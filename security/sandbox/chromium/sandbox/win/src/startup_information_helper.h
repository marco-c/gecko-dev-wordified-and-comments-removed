#
ifndef
SANDBOX_WIN_SRC_STARTUP_INFORMATION_HELPER_H_
#
define
SANDBOX_WIN_SRC_STARTUP_INFORMATION_HELPER_H_
#
include
<
windows
.
h
>
#
include
<
vector
>
#
include
"
base
/
memory
/
scoped_refptr
.
h
"
#
include
"
base
/
win
/
startup_information
.
h
"
#
include
"
sandbox
/
win
/
src
/
app_container_base
.
h
"
#
include
"
sandbox
/
win
/
src
/
process_mitigations
.
h
"
#
include
"
sandbox
/
win
/
src
/
security_capabilities
.
h
"
namespace
sandbox
{
using
base
:
:
win
:
:
StartupInformation
;
class
StartupInformationHelper
{
public
:
StartupInformationHelper
(
)
;
~
StartupInformationHelper
(
)
;
void
UpdateFlags
(
DWORD
flags
)
;
void
SetDesktop
(
std
:
:
wstring
desktop
)
;
void
SetMitigations
(
MitigationFlags
flags
)
;
void
SetRestrictChildProcessCreation
(
bool
restrict
)
;
void
SetStdHandles
(
HANDLE
stdout_handle
HANDLE
stderr_handle
)
;
void
AddInheritedHandle
(
HANDLE
handle
)
;
void
SetAppContainer
(
scoped_refptr
<
AppContainer
>
container
)
;
void
AddJobToAssociate
(
HANDLE
job_handle
)
;
bool
HasJobsToAssociate
(
)
{
return
!
job_handle_list_
.
empty
(
)
;
}
bool
ShouldInheritHandles
(
)
{
return
inherit_handles_
;
}
bool
BuildStartupInformation
(
)
;
void
SetFilterEnvironment
(
bool
filter
)
;
bool
IsEnvironmentFiltered
(
)
;
base
:
:
win
:
:
StartupInformation
*
GetStartupInformation
(
)
{
return
&
startup_info_
;
}
private
:
void
operator
=
(
const
StartupInformationHelper
&
)
=
delete
;
StartupInformationHelper
(
const
StartupInformationHelper
&
)
=
delete
;
DWORD
CountAttributes
(
)
;
scoped_refptr
<
AppContainer
>
app_container_
;
bool
restrict_child_process_creation_
=
false
;
HANDLE
stdout_handle_
=
INVALID_HANDLE_VALUE
;
HANDLE
stderr_handle_
=
INVALID_HANDLE_VALUE
;
bool
inherit_handles_
=
false
;
bool
filter_environment_
=
false
;
size_t
mitigations_size_
=
0
;
StartupInformation
startup_info_
;
std
:
:
wstring
desktop_
;
DWORD64
mitigations_
[
2
]
{
}
;
COMPONENT_FILTER
component_filter_
{
}
;
DWORD
child_process_creation_
=
0
;
DWORD
all_applications_package_policy_
=
0
;
std
:
:
vector
<
HANDLE
>
inherited_handle_list_
;
std
:
:
vector
<
HANDLE
>
job_handle_list_
;
std
:
:
unique_ptr
<
SecurityCapabilities
>
security_capabilities_
;
}
;
}
#
endif
