#
ifndef
SANDBOX_WIN_SRC_POLICY_ENGINE_PARAMS_H_
#
define
SANDBOX_WIN_SRC_POLICY_ENGINE_PARAMS_H_
#
include
<
stdint
.
h
>
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
sandbox
/
win
/
src
/
internal_types
.
h
"
#
include
"
sandbox
/
win
/
src
/
nt_internals
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_nt_util
.
h
"
namespace
sandbox
{
class
ParameterSet
{
public
:
ParameterSet
(
)
:
real_type_
(
INVALID_TYPE
)
address_
(
nullptr
)
{
}
bool
Get
(
uint32_t
*
destination
)
const
{
if
(
real_type_
!
=
UINT32_TYPE
)
{
return
false
;
}
*
destination
=
Void2TypePointerCopy
<
uint32_t
>
(
)
;
return
true
;
}
bool
Get
(
const
void
*
*
destination
)
const
{
if
(
real_type_
!
=
VOIDPTR_TYPE
)
{
return
false
;
}
*
destination
=
Void2TypePointerCopy
<
void
*
>
(
)
;
return
true
;
}
bool
Get
(
const
wchar_t
*
*
destination
)
const
{
if
(
real_type_
!
=
WCHAR_TYPE
)
{
return
false
;
}
*
destination
=
Void2TypePointerCopy
<
const
wchar_t
*
>
(
)
;
return
true
;
}
bool
IsValid
(
)
const
{
return
real_type_
!
=
INVALID_TYPE
;
}
protected
:
ParameterSet
(
ArgType
real_type
const
void
*
address
)
:
real_type_
(
real_type
)
address_
(
address
)
{
}
private
:
template
<
typename
T
>
T
Void2TypePointerCopy
(
)
const
{
return
*
(
reinterpret_cast
<
const
T
*
>
(
address_
.
get
(
)
)
)
;
}
ArgType
real_type_
;
raw_ptr
<
const
void
>
address_
;
}
;
template
<
typename
T
>
class
ParameterSetEx
:
public
ParameterSet
{
public
:
explicit
ParameterSetEx
(
const
void
*
address
)
;
}
;
template
<
>
class
ParameterSetEx
<
void
const
*
>
:
public
ParameterSet
{
public
:
explicit
ParameterSetEx
(
const
void
*
address
)
:
ParameterSet
(
VOIDPTR_TYPE
address
)
{
}
}
;
template
<
>
class
ParameterSetEx
<
void
*
>
:
public
ParameterSet
{
public
:
explicit
ParameterSetEx
(
const
void
*
address
)
:
ParameterSet
(
VOIDPTR_TYPE
address
)
{
}
}
;
template
<
>
class
ParameterSetEx
<
wchar_t
*
>
:
public
ParameterSet
{
public
:
explicit
ParameterSetEx
(
const
void
*
address
)
:
ParameterSet
(
WCHAR_TYPE
address
)
{
}
}
;
template
<
>
class
ParameterSetEx
<
wchar_t
const
*
>
:
public
ParameterSet
{
public
:
explicit
ParameterSetEx
(
const
void
*
address
)
:
ParameterSet
(
WCHAR_TYPE
address
)
{
}
}
;
template
<
>
class
ParameterSetEx
<
uint32_t
>
:
public
ParameterSet
{
public
:
explicit
ParameterSetEx
(
const
void
*
address
)
:
ParameterSet
(
UINT32_TYPE
address
)
{
}
}
;
template
<
>
class
ParameterSetEx
<
UNICODE_STRING
>
:
public
ParameterSet
{
public
:
explicit
ParameterSetEx
(
const
void
*
address
)
:
ParameterSet
(
UNISTR_TYPE
address
)
{
}
}
;
template
<
typename
T
>
ParameterSet
ParamPickerMake
(
T
&
parameter
)
{
return
ParameterSetEx
<
T
>
(
&
parameter
)
;
}
struct
CountedParameterSetBase
{
size_t
count
;
ParameterSet
parameters
[
1
]
;
}
;
template
<
typename
T
>
struct
CountedParameterSet
{
CountedParameterSet
(
)
:
count
(
T
:
:
PolParamLast
)
{
}
ParameterSet
&
operator
[
]
(
typename
T
:
:
Args
n
)
{
return
parameters
[
n
]
;
}
CountedParameterSetBase
*
GetBase
(
)
{
return
reinterpret_cast
<
CountedParameterSetBase
*
>
(
this
)
;
}
size_t
count
;
ParameterSet
parameters
[
T
:
:
PolParamLast
]
;
}
;
}
#
endif
