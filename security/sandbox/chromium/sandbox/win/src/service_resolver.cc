#
include
"
sandbox
/
win
/
src
/
service_resolver
.
h
"
#
include
<
ntstatus
.
h
>
#
include
"
base
/
notreached
.
h
"
#
include
"
base
/
win
/
pe_image
.
h
"
namespace
sandbox
{
NTSTATUS
ServiceResolverThunk
:
:
ResolveInterceptor
(
const
void
*
interceptor_module
const
char
*
interceptor_name
const
void
*
*
address
)
{
return
ResolveTarget
(
interceptor_module
interceptor_name
const_cast
<
void
*
*
>
(
address
)
)
;
}
NTSTATUS
ServiceResolverThunk
:
:
ResolveTarget
(
const
void
*
module
const
char
*
function_name
void
*
*
address
)
{
if
(
!
module
)
return
STATUS_UNSUCCESSFUL
;
base
:
:
win
:
:
PEImage
module_image
(
module
)
;
*
address
=
reinterpret_cast
<
void
*
>
(
module_image
.
GetProcAddress
(
function_name
)
)
;
if
(
!
*
address
)
{
NOTREACHED
(
)
;
return
STATUS_UNSUCCESSFUL
;
}
return
STATUS_SUCCESS
;
}
void
ServiceResolverThunk
:
:
AllowLocalPatches
(
)
{
constexpr
wchar_t
kNtdllName
[
]
=
L
"
ntdll
.
dll
"
;
ntdll_base_
=
:
:
GetModuleHandle
(
kNtdllName
)
;
}
bool
ServiceResolverThunk
:
:
WriteProtectedChildMemory
(
HANDLE
child_process
void
*
address
const
void
*
buffer
size_t
length
)
{
DWORD
old_protection
;
if
(
!
:
:
VirtualProtectEx
(
child_process
address
length
PAGE_WRITECOPY
&
old_protection
)
)
{
return
false
;
}
SIZE_T
written
;
bool
ok
=
:
:
WriteProcessMemory
(
child_process
address
buffer
length
&
written
)
&
&
(
length
=
=
written
)
;
if
(
!
:
:
VirtualProtectEx
(
child_process
address
length
old_protection
&
old_protection
)
)
{
return
false
;
}
return
ok
;
}
}
