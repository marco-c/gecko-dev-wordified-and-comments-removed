#
ifndef
SANDBOX_SRC_FILESYSTEM_DISPATCHER_H__
#
define
SANDBOX_SRC_FILESYSTEM_DISPATCHER_H__
#
include
<
stdint
.
h
>
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
strings
/
string16
.
h
"
#
include
"
sandbox
/
win
/
src
/
crosscall_server
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_policy_base
.
h
"
namespace
sandbox
{
class
FilesystemDispatcher
:
public
Dispatcher
{
public
:
explicit
FilesystemDispatcher
(
PolicyBase
*
policy_base
)
;
~
FilesystemDispatcher
(
)
override
{
}
bool
SetupService
(
InterceptionManager
*
manager
int
service
)
override
;
private
:
bool
NtCreateFile
(
IPCInfo
*
ipc
base
:
:
string16
*
name
uint32_t
attributes
uint32_t
desired_access
uint32_t
file_attributes
uint32_t
share_access
uint32_t
create_disposition
uint32_t
create_options
)
;
bool
NtOpenFile
(
IPCInfo
*
ipc
base
:
:
string16
*
name
uint32_t
attributes
uint32_t
desired_access
uint32_t
share_access
uint32_t
create_options
)
;
bool
NtQueryAttributesFile
(
IPCInfo
*
ipc
base
:
:
string16
*
name
uint32_t
attributes
CountedBuffer
*
info
)
;
bool
NtQueryFullAttributesFile
(
IPCInfo
*
ipc
base
:
:
string16
*
name
uint32_t
attributes
CountedBuffer
*
info
)
;
bool
NtSetInformationFile
(
IPCInfo
*
ipc
HANDLE
handle
CountedBuffer
*
status
CountedBuffer
*
info
uint32_t
length
uint32_t
info_class
)
;
PolicyBase
*
policy_base_
;
DISALLOW_COPY_AND_ASSIGN
(
FilesystemDispatcher
)
;
}
;
}
#
endif
