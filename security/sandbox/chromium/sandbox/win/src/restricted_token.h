#
ifndef
SANDBOX_WIN_SRC_RESTRICTED_TOKEN_H_
#
define
SANDBOX_WIN_SRC_RESTRICTED_TOKEN_H_
#
include
<
vector
>
#
include
"
base
/
win
/
access_control_list
.
h
"
#
include
"
base
/
win
/
access_token
.
h
"
#
include
"
base
/
win
/
sid
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
"
sandbox
/
win
/
src
/
security_level
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
sandbox
{
class
RestrictedToken
{
public
:
RestrictedToken
(
)
;
RestrictedToken
(
const
RestrictedToken
&
)
=
delete
;
RestrictedToken
&
operator
=
(
const
RestrictedToken
&
)
=
delete
;
~
RestrictedToken
(
)
;
absl
:
:
optional
<
base
:
:
win
:
:
AccessToken
>
GetRestrictedToken
(
)
const
;
void
AddAllSidsForDenyOnly
(
const
std
:
:
vector
<
base
:
:
win
:
:
Sid
>
&
exceptions
)
;
void
AddSidForDenyOnly
(
const
base
:
:
win
:
:
Sid
&
sid
)
;
void
AddSidForDenyOnly
(
base
:
:
win
:
:
WellKnownSid
known_sid
)
;
void
AddUserSidForDenyOnly
(
)
;
void
DeleteAllPrivileges
(
bool
remove_traversal_privilege
)
;
void
AddRestrictingSid
(
const
base
:
:
win
:
:
Sid
&
sid
)
;
void
AddRestrictingSid
(
base
:
:
win
:
:
WellKnownSid
known_sid
)
;
void
AddRestrictingSidLogonSession
(
)
;
void
AddRestrictingSidCurrentUser
(
)
;
void
AddRestrictingSidAllSids
(
)
;
void
SetIntegrityLevel
(
IntegrityLevel
integrity_level
)
;
void
SetLockdownDefaultDacl
(
)
;
void
AddDefaultDaclSid
(
const
base
:
:
win
:
:
Sid
&
sid
base
:
:
win
:
:
SecurityAccessMode
access_mode
ACCESS_MASK
access
)
;
void
AddDefaultDaclSid
(
base
:
:
win
:
:
WellKnownSid
known_sid
base
:
:
win
:
:
SecurityAccessMode
access_mode
ACCESS_MASK
access
)
;
absl
:
:
optional
<
base
:
:
win
:
:
AccessToken
>
GetRestrictedTokenForTesting
(
base
:
:
win
:
:
AccessToken
&
token
)
;
private
:
std
:
:
vector
<
base
:
:
win
:
:
Sid
>
BuildDenyOnlySids
(
const
base
:
:
win
:
:
AccessToken
&
token
)
const
;
std
:
:
vector
<
base
:
:
win
:
:
Sid
>
BuildRestrictedSids
(
const
base
:
:
win
:
:
AccessToken
&
token
)
const
;
absl
:
:
optional
<
base
:
:
win
:
:
AccessToken
>
CreateRestricted
(
const
base
:
:
win
:
:
AccessToken
&
token
)
const
;
std
:
:
vector
<
base
:
:
win
:
:
Sid
>
sids_to_restrict_
;
std
:
:
vector
<
base
:
:
win
:
:
Sid
>
sids_for_deny_only_
;
std
:
:
vector
<
base
:
:
win
:
:
ExplicitAccessEntry
>
sids_for_default_dacl_
;
absl
:
:
optional
<
base
:
:
win
:
:
AccessToken
>
effective_token_
;
absl
:
:
optional
<
DWORD
>
integrity_rid_
;
bool
lockdown_default_dacl_
=
false
;
bool
delete_all_privileges_
=
false
;
bool
remove_traversal_privilege_
=
false
;
bool
add_all_sids_for_deny_only_
=
false
;
std
:
:
vector
<
base
:
:
win
:
:
Sid
>
add_all_exceptions_
;
bool
add_user_sid_for_deny_only_
=
false
;
bool
add_restricting_sid_logon_session_
=
false
;
bool
add_restricting_sid_current_user_
=
false
;
bool
add_restricting_sid_all_sids_
=
false
;
}
;
}
#
endif
