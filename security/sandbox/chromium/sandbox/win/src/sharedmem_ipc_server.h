#
ifndef
SANDBOX_SRC_SHAREDMEM_IPC_SERVER_H_
#
define
SANDBOX_SRC_SHAREDMEM_IPC_SERVER_H_
#
include
<
stdint
.
h
>
#
include
<
list
>
#
include
<
memory
>
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
base
/
macros
.
h
"
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
include
"
sandbox
/
win
/
src
/
crosscall_params
.
h
"
#
include
"
sandbox
/
win
/
src
/
crosscall_server
.
h
"
#
include
"
sandbox
/
win
/
src
/
sharedmem_ipc_client
.
h
"
namespace
sandbox
{
class
SharedMemIPCServer
{
public
:
SharedMemIPCServer
(
HANDLE
target_process
DWORD
target_process_id
ThreadProvider
*
thread_provider
Dispatcher
*
dispatcher
)
;
~
SharedMemIPCServer
(
)
;
bool
Init
(
void
*
shared_mem
uint32_t
shared_size
uint32_t
channel_size
)
;
private
:
FRIEND_TEST_ALL_PREFIXES
(
IPCTest
SharedMemServerTests
)
;
static
void
__stdcall
ThreadPingEventReady
(
void
*
context
unsigned
char
)
;
bool
MakeEvents
(
base
:
:
win
:
:
ScopedHandle
*
server_ping
base
:
:
win
:
:
ScopedHandle
*
server_pong
HANDLE
*
client_ping
HANDLE
*
client_pong
)
;
struct
ServerControl
{
ServerControl
(
)
;
~
ServerControl
(
)
;
base
:
:
win
:
:
ScopedHandle
ping_event
;
base
:
:
win
:
:
ScopedHandle
pong_event
;
uint32_t
channel_size
;
char
*
channel_buffer
;
char
*
shared_base
;
ChannelControl
*
channel
;
Dispatcher
*
dispatcher
;
ClientInfo
target_info
;
}
;
static
bool
InvokeCallback
(
const
ServerControl
*
service_context
void
*
ipc_buffer
CrossCallReturn
*
call_result
)
;
IPCControl
*
client_control_
;
std
:
:
list
<
std
:
:
unique_ptr
<
ServerControl
>
>
server_contexts_
;
ThreadProvider
*
thread_provider_
;
HANDLE
target_process_
;
DWORD
target_process_id_
;
Dispatcher
*
call_dispatcher_
;
DISALLOW_COPY_AND_ASSIGN
(
SharedMemIPCServer
)
;
}
;
}
#
endif
