#
ifndef
SANDBOX_WIN_SRC_POLICY_ENGINE_PROCESSOR_H_
#
define
SANDBOX_WIN_SRC_POLICY_ENGINE_PROCESSOR_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
sandbox
/
win
/
src
/
policy_engine_opcodes
.
h
"
#
include
"
sandbox
/
win
/
src
/
policy_engine_params
.
h
"
namespace
sandbox
{
enum
PolicyResult
{
NO_POLICY_MATCH
POLICY_MATCH
POLICY_ERROR
}
;
const
uint32_t
kStopOnErrors
=
1
;
const
uint32_t
kIgnoreErrors
=
2
;
const
uint32_t
kShortEval
=
4
;
const
uint32_t
kRankedEval
=
8
;
class
PolicyProcessor
{
public
:
explicit
PolicyProcessor
(
PolicyBuffer
*
policy
)
:
policy_
(
policy
)
{
SetInternalState
(
0
EVAL_FALSE
)
;
}
PolicyProcessor
(
const
PolicyProcessor
&
)
=
delete
;
PolicyProcessor
&
operator
=
(
const
PolicyProcessor
&
)
=
delete
;
PolicyResult
Evaluate
(
uint32_t
options
ParameterSet
*
parameters
size_t
parameter_count
)
;
EvalResult
GetAction
(
)
const
;
private
:
struct
{
size_t
current_index_
;
EvalResult
current_result_
;
}
state_
;
void
SetInternalState
(
size_t
index
EvalResult
result
)
;
raw_ptr
<
PolicyBuffer
DanglingUntriaged
>
policy_
;
}
;
}
#
endif
