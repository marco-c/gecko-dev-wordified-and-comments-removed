#
ifndef
SANDBOX_WIN_SRC_INTERNAL_TYPES_H_
#
define
SANDBOX_WIN_SRC_INTERNAL_TYPES_H_
#
include
<
stdint
.
h
>
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
namespace
sandbox
{
const
wchar_t
kNtdllName
[
]
=
L
"
ntdll
.
dll
"
;
const
wchar_t
kKerneldllName
[
]
=
L
"
kernel32
.
dll
"
;
const
wchar_t
kKernelBasedllName
[
]
=
L
"
kernelbase
.
dll
"
;
enum
ArgType
{
INVALID_TYPE
=
0
WCHAR_TYPE
UINT32_TYPE
UNISTR_TYPE
VOIDPTR_TYPE
INPTR_TYPE
INOUTPTR_TYPE
LAST_TYPE
}
;
class
CountedBuffer
{
public
:
CountedBuffer
(
void
*
buffer
uint32_t
size
)
:
size_
(
size
)
buffer_
(
buffer
)
{
}
uint32_t
Size
(
)
const
{
return
size_
;
}
void
*
Buffer
(
)
const
{
return
buffer_
;
}
private
:
uint32_t
size_
;
raw_ptr
<
void
>
buffer_
;
}
;
class
IPCInt
{
public
:
explicit
IPCInt
(
void
*
buffer
)
{
buffer_
.
vp
=
buffer
;
}
explicit
IPCInt
(
uint32_t
i32
)
{
buffer_
.
vp
=
nullptr
;
buffer_
.
i32
=
i32
;
}
uint32_t
As32Bit
(
)
const
{
return
buffer_
.
i32
;
}
void
*
AsVoidPtr
(
)
const
{
return
buffer_
.
vp
;
}
private
:
union
U
{
RAW_PTR_EXCLUSION
void
*
vp
;
uint32_t
i32
;
}
buffer_
;
}
;
}
#
endif
