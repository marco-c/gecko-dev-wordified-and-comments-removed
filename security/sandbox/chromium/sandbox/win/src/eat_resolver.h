#
ifndef
SANDBOX_WIN_SRC_EAT_RESOLVER_H_
#
define
SANDBOX_WIN_SRC_EAT_RESOLVER_H_
#
include
<
stddef
.
h
>
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
sandbox
/
win
/
src
/
nt_internals
.
h
"
#
include
"
sandbox
/
win
/
src
/
resolver
.
h
"
namespace
sandbox
{
class
EatResolverThunk
:
public
ResolverThunk
{
public
:
EatResolverThunk
(
)
:
eat_entry_
(
nullptr
)
{
}
EatResolverThunk
(
const
EatResolverThunk
&
)
=
delete
;
EatResolverThunk
&
operator
=
(
const
EatResolverThunk
&
)
=
delete
;
~
EatResolverThunk
(
)
override
{
}
NTSTATUS
Setup
(
const
void
*
target_module
const
void
*
interceptor_module
const
char
*
target_name
const
char
*
interceptor_name
const
void
*
interceptor_entry_point
void
*
thunk_storage
size_t
storage_bytes
size_t
*
storage_used
)
override
;
NTSTATUS
ResolveTarget
(
const
void
*
module
const
char
*
function_name
void
*
*
address
)
override
;
size_t
GetThunkSize
(
)
const
override
;
private
:
RAW_PTR_EXCLUSION
DWORD
*
eat_entry_
;
}
;
}
#
endif
