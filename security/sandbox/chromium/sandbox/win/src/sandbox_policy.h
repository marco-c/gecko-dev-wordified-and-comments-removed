#
ifndef
SANDBOX_WIN_SRC_SANDBOX_POLICY_H_
#
define
SANDBOX_WIN_SRC_SANDBOX_POLICY_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
base
/
memory
/
scoped_refptr
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_types
.
h
"
#
include
"
sandbox
/
win
/
src
/
security_level
.
h
"
namespace
sandbox
{
class
AppContainerProfile
;
class
TargetPolicy
{
public
:
enum
SubSystem
{
SUBSYS_FILES
SUBSYS_NAMED_PIPES
SUBSYS_PROCESS
SUBSYS_REGISTRY
SUBSYS_SYNC
SUBSYS_WIN32K_LOCKDOWN
SUBSYS_SIGNED_BINARY
SUBSYS_LINE_BREAK
}
;
enum
Semantics
{
FILES_ALLOW_ANY
FILES_ALLOW_READONLY
FILES_ALLOW_QUERY
FILES_ALLOW_DIR_ANY
NAMEDPIPES_ALLOW_ANY
PROCESS_MIN_EXEC
PROCESS_ALL_EXEC
EVENTS_ALLOW_ANY
EVENTS_ALLOW_READONLY
REG_ALLOW_READONLY
REG_ALLOW_ANY
FAKE_USER_GDI_INIT
IMPLEMENT_OPM_APIS
SIGNED_ALLOW_LOAD
LINE_BREAK_ALLOW
}
;
virtual
void
AddRef
(
)
=
0
;
virtual
void
Release
(
)
=
0
;
virtual
ResultCode
SetTokenLevel
(
TokenLevel
initial
TokenLevel
lockdown
)
=
0
;
virtual
TokenLevel
GetInitialTokenLevel
(
)
const
=
0
;
virtual
TokenLevel
GetLockdownTokenLevel
(
)
const
=
0
;
virtual
void
SetDoNotUseRestrictingSIDs
(
)
=
0
;
virtual
ResultCode
SetJobLevel
(
JobLevel
job_level
uint32_t
ui_exceptions
)
=
0
;
virtual
JobLevel
GetJobLevel
(
)
const
=
0
;
virtual
ResultCode
SetJobMemoryLimit
(
size_t
memory_limit
)
=
0
;
virtual
ResultCode
SetAlternateDesktop
(
bool
alternate_winstation
)
=
0
;
virtual
std
:
:
wstring
GetAlternateDesktop
(
)
const
=
0
;
virtual
ResultCode
CreateAlternateDesktop
(
bool
alternate_winstation
)
=
0
;
virtual
void
DestroyAlternateDesktop
(
)
=
0
;
virtual
ResultCode
SetIntegrityLevel
(
IntegrityLevel
level
)
=
0
;
virtual
IntegrityLevel
GetIntegrityLevel
(
)
const
=
0
;
virtual
ResultCode
SetDelayedIntegrityLevel
(
IntegrityLevel
level
)
=
0
;
virtual
ResultCode
SetLowBox
(
const
wchar_t
*
sid
)
=
0
;
virtual
ResultCode
SetProcessMitigations
(
MitigationFlags
flags
)
=
0
;
virtual
MitigationFlags
GetProcessMitigations
(
)
=
0
;
virtual
ResultCode
SetDelayedProcessMitigations
(
MitigationFlags
flags
)
=
0
;
virtual
MitigationFlags
GetDelayedProcessMitigations
(
)
const
=
0
;
virtual
ResultCode
SetDisconnectCsrss
(
)
=
0
;
virtual
void
SetStrictInterceptions
(
)
=
0
;
virtual
ResultCode
SetStdoutHandle
(
HANDLE
handle
)
=
0
;
virtual
ResultCode
SetStderrHandle
(
HANDLE
handle
)
=
0
;
virtual
ResultCode
AddRule
(
SubSystem
subsystem
Semantics
semantics
const
wchar_t
*
pattern
)
=
0
;
virtual
ResultCode
AddDllToUnload
(
const
wchar_t
*
dll_name
)
=
0
;
virtual
ResultCode
AddKernelObjectToClose
(
const
wchar_t
*
handle_type
const
wchar_t
*
handle_name
)
=
0
;
virtual
void
AddHandleToShare
(
HANDLE
handle
)
=
0
;
virtual
void
SetLockdownDefaultDacl
(
)
=
0
;
virtual
void
AddRestrictingRandomSid
(
)
=
0
;
virtual
void
SetEnableOPMRedirection
(
)
=
0
;
virtual
bool
GetEnableOPMRedirection
(
)
=
0
;
virtual
ResultCode
AddAppContainerProfile
(
const
wchar_t
*
package_name
bool
create_profile
)
=
0
;
virtual
scoped_refptr
<
AppContainerProfile
>
GetAppContainerProfile
(
)
=
0
;
virtual
void
SetEffectiveToken
(
HANDLE
token
)
=
0
;
protected
:
~
TargetPolicy
(
)
{
}
}
;
}
#
endif
