#
ifndef
SANDBOX_WIN_SRC_SANDBOX_POLICY_H_
#
define
SANDBOX_WIN_SRC_SANDBOX_POLICY_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
memory
/
scoped_refptr
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_types
.
h
"
#
include
"
sandbox
/
win
/
src
/
security_level
.
h
"
namespace
sandbox
{
class
AppContainer
;
enum
class
Desktop
{
kDefault
kAlternateDesktop
kAlternateWinstation
}
;
enum
class
FileSemantics
{
kAllowAny
kAllowReadonly
kAllowQuery
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
TargetConfig
{
public
:
virtual
~
TargetConfig
(
)
{
}
virtual
bool
IsConfigured
(
)
const
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetTokenLevel
(
TokenLevel
initial
TokenLevel
lockdown
)
=
0
;
virtual
TokenLevel
GetInitialTokenLevel
(
)
const
=
0
;
virtual
TokenLevel
GetLockdownTokenLevel
(
)
const
=
0
;
virtual
void
SetDoNotUseRestrictingSIDs
(
)
=
0
;
virtual
bool
GetUseRestrictingSIDs
(
)
=
0
;
virtual
void
SetAllowEveryoneForUserRestricted
(
)
=
0
;
virtual
bool
GetAllowEveryoneForUserRestricted
(
)
=
0
;
virtual
void
SetForceKnownDllLoadingFallback
(
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetJobLevel
(
JobLevel
job_level
uint32_t
ui_exceptions
)
=
0
;
virtual
JobLevel
GetJobLevel
(
)
const
=
0
;
virtual
void
SetJobMemoryLimit
(
size_t
memory_limit
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
AllowFileAccess
(
FileSemantics
semantics
const
wchar_t
*
pattern
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
AllowNamedPipes
(
const
wchar_t
*
pattern
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
AllowRegistryRead
(
const
wchar_t
*
pattern
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
AllowExtraDlls
(
const
wchar_t
*
pattern
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetFakeGdiInit
(
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
AllowLineBreaking
(
)
=
0
;
virtual
void
AddDllToUnload
(
const
wchar_t
*
dll_name
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetIntegrityLevel
(
IntegrityLevel
level
)
=
0
;
virtual
IntegrityLevel
GetIntegrityLevel
(
)
const
=
0
;
virtual
void
SetDelayedIntegrityLevel
(
IntegrityLevel
level
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetLowBox
(
const
wchar_t
*
sid
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetProcessMitigations
(
MitigationFlags
flags
)
=
0
;
virtual
MitigationFlags
GetProcessMitigations
(
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetDelayedProcessMitigations
(
MitigationFlags
flags
)
=
0
;
virtual
MitigationFlags
GetDelayedProcessMitigations
(
)
const
=
0
;
virtual
void
AddRestrictingRandomSid
(
)
=
0
;
virtual
void
SetLockdownDefaultDacl
(
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
AddAppContainerProfile
(
const
wchar_t
*
package_name
bool
create_profile
)
=
0
;
virtual
scoped_refptr
<
AppContainer
>
GetAppContainer
(
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
AddKernelObjectToClose
(
const
wchar_t
*
handle_type
const
wchar_t
*
handle_name
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
SetDisconnectCsrss
(
)
=
0
;
virtual
void
SetDesktop
(
Desktop
desktop
)
=
0
;
virtual
void
SetFilterEnvironment
(
bool
filter
)
=
0
;
virtual
bool
GetEnvironmentFiltered
(
)
=
0
;
virtual
void
SetZeroAppShim
(
)
=
0
;
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
TargetPolicy
{
public
:
virtual
~
TargetPolicy
(
)
{
}
virtual
TargetConfig
*
GetConfig
(
)
=
0
;
virtual
ResultCode
SetStdoutHandle
(
HANDLE
handle
)
=
0
;
virtual
ResultCode
SetStderrHandle
(
HANDLE
handle
)
=
0
;
virtual
void
AddHandleToShare
(
HANDLE
handle
)
=
0
;
virtual
void
AddDelegateData
(
base
:
:
span
<
const
uint8_t
>
data
)
=
0
;
}
;
}
#
endif
