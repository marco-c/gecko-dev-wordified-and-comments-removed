#
ifndef
SANDBOX_WIN_SRC_CROSSCALL_SERVER_H_
#
define
SANDBOX_WIN_SRC_CROSSCALL_SERVER_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
functional
/
callback
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
sandbox
/
win
/
src
/
crosscall_params
.
h
"
#
include
"
sandbox
/
win
/
src
/
ipc_tags
.
h
"
namespace
sandbox
{
class
InterceptionManager
;
class
CrossCallParamsEx
:
public
CrossCallParams
{
public
:
static
CrossCallParamsEx
*
CreateFromBuffer
(
void
*
buffer_base
uint32_t
buffer_size
uint32_t
*
output_size
)
;
CrossCallParamsEx
(
const
CrossCallParamsEx
&
)
=
delete
;
CrossCallParamsEx
&
operator
=
(
const
CrossCallParamsEx
&
)
=
delete
;
void
*
GetRawParameter
(
uint32_t
index
uint32_t
*
size
ArgType
*
type
)
;
bool
GetParameter32
(
uint32_t
index
uint32_t
*
param
)
;
bool
GetParameterVoidPtr
(
uint32_t
index
void
*
*
param
)
;
bool
GetParameterStr
(
uint32_t
index
std
:
:
wstring
*
string
)
;
bool
GetParameterPtr
(
uint32_t
index
uint32_t
expected_size
void
*
*
pointer
)
;
static
void
operator
delete
(
void
*
raw_memory
)
throw
(
)
;
private
:
CrossCallParamsEx
(
)
;
ParamInfo
param_info_
[
1
]
;
}
;
void
SetCallError
(
ResultCode
error
CrossCallReturn
*
call_return
)
;
void
SetCallSuccess
(
CrossCallReturn
*
call_return
)
;
struct
ClientInfo
{
HANDLE
process
;
DWORD
process_id
;
}
;
struct
IPCInfo
{
IpcTag
ipc_tag
;
raw_ptr
<
const
ClientInfo
>
client_info
;
CrossCallReturn
return_info
;
}
;
struct
IPCParams
{
IpcTag
ipc_tag
;
ArgType
args
[
kMaxIpcParams
]
;
bool
Matches
(
IPCParams
*
other
)
const
{
return
!
memcmp
(
this
other
sizeof
(
*
other
)
)
;
}
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
Dispatcher
{
public
:
typedef
bool
(
Dispatcher
:
:
*
CallbackGeneric
)
(
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback0
)
(
IPCInfo
*
ipc
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback1
)
(
IPCInfo
*
ipc
void
*
p1
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback2
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback3
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
void
*
p3
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback4
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
void
*
p3
void
*
p4
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback5
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
void
*
p3
void
*
p4
void
*
p5
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback6
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
void
*
p3
void
*
p4
void
*
p5
void
*
p6
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback7
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
void
*
p3
void
*
p4
void
*
p5
void
*
p6
void
*
p7
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback8
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
void
*
p3
void
*
p4
void
*
p5
void
*
p6
void
*
p7
void
*
p8
)
;
typedef
bool
(
Dispatcher
:
:
*
Callback9
)
(
IPCInfo
*
ipc
void
*
p1
void
*
p2
void
*
p3
void
*
p4
void
*
p5
void
*
p6
void
*
p7
void
*
p8
void
*
p9
)
;
virtual
Dispatcher
*
OnMessageReady
(
IPCParams
*
ipc
CallbackGeneric
*
callback
)
;
virtual
bool
SetupService
(
InterceptionManager
*
manager
IpcTag
service
)
=
0
;
Dispatcher
(
)
;
virtual
~
Dispatcher
(
)
;
protected
:
struct
IPCCall
{
IPCParams
params
;
CallbackGeneric
callback
;
}
;
std
:
:
vector
<
IPCCall
>
ipc_calls_
;
}
;
}
#
endif
