#
include
"
sandbox
/
win
/
src
/
resolver
.
h
"
#
include
<
stddef
.
h
>
#
include
<
new
>
#
include
"
sandbox
/
win
/
src
/
sandbox_nt_util
.
h
"
namespace
{
const
USHORT
kMovRax
=
0xB848
;
const
USHORT
kJmpRax
=
0xe0ff
;
#
pragma
pack
(
push
1
)
struct
InternalThunk
{
InternalThunk
(
)
{
mov_rax
=
kMovRax
;
jmp_rax
=
kJmpRax
;
interceptor_function
=
0
;
}
;
USHORT
mov_rax
;
ULONG_PTR
interceptor_function
;
USHORT
jmp_rax
;
}
;
#
pragma
pack
(
pop
)
}
namespace
sandbox
{
size_t
ResolverThunk
:
:
GetInternalThunkSize
(
)
const
{
return
sizeof
(
InternalThunk
)
;
}
bool
ResolverThunk
:
:
SetInternalThunk
(
void
*
storage
size_t
storage_bytes
const
void
*
original_function
const
void
*
interceptor
)
{
if
(
storage_bytes
<
sizeof
(
InternalThunk
)
)
return
false
;
InternalThunk
*
thunk
=
new
(
storage
)
InternalThunk
;
thunk
-
>
interceptor_function
=
reinterpret_cast
<
ULONG_PTR
>
(
interceptor
)
;
return
true
;
}
NTSTATUS
ResolverThunk
:
:
ResolveTarget
(
const
void
*
module
const
char
*
function_name
void
*
*
address
)
{
return
STATUS_NOT_IMPLEMENTED
;
}
}
