#
ifndef
SANDBOX_SRC_PROCESS_THREAD_DISPATCHER_H_
#
define
SANDBOX_SRC_PROCESS_THREAD_DISPATCHER_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
base
/
macros
.
h
"
#
include
"
sandbox
/
win
/
src
/
crosscall_server
.
h
"
#
include
"
sandbox
/
win
/
src
/
ipc_tags
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_policy_base
.
h
"
namespace
sandbox
{
class
ThreadProcessDispatcher
:
public
Dispatcher
{
public
:
explicit
ThreadProcessDispatcher
(
PolicyBase
*
policy_base
)
;
~
ThreadProcessDispatcher
(
)
override
{
}
bool
SetupService
(
InterceptionManager
*
manager
IpcTag
service
)
override
;
private
:
bool
NtOpenThread
(
IPCInfo
*
ipc
uint32_t
desired_access
uint32_t
thread_id
)
;
bool
NtOpenProcess
(
IPCInfo
*
ipc
uint32_t
desired_access
uint32_t
process_id
)
;
bool
NtOpenProcessToken
(
IPCInfo
*
ipc
HANDLE
process
uint32_t
desired_access
)
;
bool
NtOpenProcessTokenEx
(
IPCInfo
*
ipc
HANDLE
process
uint32_t
desired_access
uint32_t
attributes
)
;
bool
CreateProcessW
(
IPCInfo
*
ipc
std
:
:
wstring
*
name
std
:
:
wstring
*
cmd_line
std
:
:
wstring
*
cur_dir
std
:
:
wstring
*
target_cur_dir
CountedBuffer
*
info
)
;
bool
CreateThread
(
IPCInfo
*
ipc
SIZE_T
stack_size
LPTHREAD_START_ROUTINE
start_address
LPVOID
parameter
DWORD
creation_flags
)
;
PolicyBase
*
policy_base_
;
DISALLOW_COPY_AND_ASSIGN
(
ThreadProcessDispatcher
)
;
}
;
}
#
endif
