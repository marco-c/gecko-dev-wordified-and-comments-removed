#
ifndef
SANDBOX_WIN_SRC_PROCESS_THREAD_INTERCEPTION_H_
#
define
SANDBOX_WIN_SRC_PROCESS_THREAD_INTERCEPTION_H_
#
include
<
windows
.
h
>
#
include
"
sandbox
/
win
/
src
/
nt_internals
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_types
.
h
"
namespace
sandbox
{
namespace
{
using
CreateThreadFunction
=
decltype
(
&
:
:
CreateThread
)
;
using
GetUserDefaultLCIDFunction
=
decltype
(
&
:
:
GetUserDefaultLCID
)
;
}
extern
"
C
"
{
SANDBOX_INTERCEPT
NTSTATUS
WINAPI
TargetNtOpenThread
(
NtOpenThreadFunction
orig_OpenThread
PHANDLE
thread
ACCESS_MASK
desired_access
POBJECT_ATTRIBUTES
object_attributes
PCLIENT_ID
client_id
)
;
SANDBOX_INTERCEPT
NTSTATUS
WINAPI
TargetNtOpenProcess
(
NtOpenProcessFunction
orig_OpenProcess
PHANDLE
process
ACCESS_MASK
desired_access
POBJECT_ATTRIBUTES
object_attributes
PCLIENT_ID
client_id
)
;
SANDBOX_INTERCEPT
NTSTATUS
WINAPI
TargetNtOpenProcessToken
(
NtOpenProcessTokenFunction
orig_OpenProcessToken
HANDLE
process
ACCESS_MASK
desired_access
PHANDLE
token
)
;
SANDBOX_INTERCEPT
NTSTATUS
WINAPI
TargetNtOpenProcessTokenEx
(
NtOpenProcessTokenExFunction
orig_OpenProcessTokenEx
HANDLE
process
ACCESS_MASK
desired_access
ULONG
handle_attributes
PHANDLE
token
)
;
SANDBOX_INTERCEPT
HANDLE
WINAPI
TargetCreateThread
(
CreateThreadFunction
orig_CreateThread
LPSECURITY_ATTRIBUTES
thread_attributes
SIZE_T
stack_size
LPTHREAD_START_ROUTINE
start_address
LPVOID
parameter
DWORD
creation_flags
LPDWORD
thread_id
)
;
}
}
#
endif
