#
ifndef
SANDBOX_WIN_SRC_TARGET_SERVICES_H_
#
define
SANDBOX_WIN_SRC_TARGET_SERVICES_H_
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox
.
h
"
#
include
"
sandbox
/
win
/
src
/
win_utils
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
sandbox
{
class
ProcessState
{
public
:
ProcessState
(
)
;
ProcessState
(
const
ProcessState
&
)
=
delete
;
ProcessState
&
operator
=
(
const
ProcessState
&
)
=
delete
;
bool
InitCalled
(
)
const
;
bool
RevertedToSelf
(
)
const
;
bool
IsCsrssConnected
(
)
const
;
void
SetInitCalled
(
)
;
void
SetRevertedToSelf
(
)
;
void
SetCsrssConnected
(
bool
csrss_connected
)
;
private
:
enum
class
ProcessStateInternal
{
NONE
=
0
INIT_CALLED
REVERTED_TO_SELF
}
;
ProcessStateInternal
process_state_
;
bool
csrss_connected_
;
}
;
class
TargetServicesBase
:
public
TargetServices
{
public
:
TargetServicesBase
(
)
;
TargetServicesBase
(
const
TargetServicesBase
&
)
=
delete
;
TargetServicesBase
&
operator
=
(
const
TargetServicesBase
&
)
=
delete
;
ResultCode
Init
(
)
override
;
absl
:
:
optional
<
base
:
:
span
<
const
uint8_t
>
>
GetDelegateData
(
)
override
;
void
LowerToken
(
)
override
;
ProcessState
*
GetState
(
)
override
;
ResultCode
GetComplexLineBreaks
(
const
WCHAR
*
text
uint32_t
length
uint8_t
*
break_before
)
final
;
static
TargetServicesBase
*
GetInstance
(
)
;
bool
TestIPCPing
(
int
version
)
;
private
:
~
TargetServicesBase
(
)
{
}
ProcessState
process_state_
;
}
;
}
#
endif
