#
ifndef
SANDBOX_WIN_SRC_INTERCEPTION_INTERNAL_H_
#
define
SANDBOX_WIN_SRC_INTERCEPTION_INTERNAL_H_
#
include
<
stddef
.
h
>
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
sandbox
/
win
/
src
/
interceptors
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_types
.
h
"
namespace
sandbox
{
const
int
kMaxThunkDataBytes
=
64
;
#
pragma
pack
(
push
4
)
struct
FunctionInfo
{
size_t
record_bytes
;
InterceptionType
type
;
InterceptorId
id
;
RAW_PTR_EXCLUSION
const
void
*
interceptor_address
;
char
function
[
1
]
;
}
;
struct
DllPatchInfo
{
size_t
record_bytes
;
size_t
offset_to_functions
;
size_t
num_functions
;
bool
unload_module
;
wchar_t
dll_name
[
1
]
;
}
;
struct
SharedMemory
{
size_t
num_intercepted_dlls
;
RAW_PTR_EXCLUSION
void
*
interceptor_base
;
DllPatchInfo
dll_list
[
1
]
;
}
;
struct
ThunkData
{
char
data
[
kMaxThunkDataBytes
]
;
}
;
struct
DllInterceptionData
{
size_t
data_bytes
;
size_t
used_bytes
;
RAW_PTR_EXCLUSION
void
*
base
;
int
num_thunks
;
#
if
defined
(
_WIN64
)
int
dummy
;
#
endif
ThunkData
thunks
[
1
]
;
}
;
#
pragma
pack
(
pop
)
}
#
endif
