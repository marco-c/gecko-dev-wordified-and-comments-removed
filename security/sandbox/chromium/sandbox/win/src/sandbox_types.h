#
ifndef
SANDBOX_WIN_SRC_SANDBOX_TYPES_H_
#
define
SANDBOX_WIN_SRC_SANDBOX_TYPES_H_
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
process
/
kill
.
h
"
#
include
"
base
/
process
/
launch
.
h
"
namespace
sandbox
{
#
ifdef
__MINGW32__
#
define
_Copy_s
copy
#
endif
enum
ResultCode
:
int
{
SBOX_ALL_OK
=
0
SBOX_ERROR_GENERIC
=
1
SBOX_ERROR_BAD_PARAMS
=
2
SBOX_ERROR_UNSUPPORTED
=
3
SBOX_ERROR_NO_SPACE
=
4
SBOX_ERROR_INVALID_IPC
=
5
SBOX_ERROR_FAILED_IPC
=
6
SBOX_ERROR_NO_HANDLE
=
7
SBOX_ERROR_UNEXPECTED_CALL
=
8
SBOX_ERROR_WAIT_ALREADY_CALLED
=
9
SBOX_ERROR_CHANNEL_ERROR
=
10
SBOX_ERROR_CANNOT_CREATE_DESKTOP
=
11
SBOX_ERROR_CANNOT_CREATE_WINSTATION
=
12
SBOX_ERROR_FAILED_TO_SWITCH_BACK_WINSTATION
=
13
SBOX_ERROR_INVALID_APP_CONTAINER
=
14
SBOX_ERROR_INVALID_CAPABILITY
=
15
SBOX_ERROR_CANNOT_INIT_APPCONTAINER
=
16
SBOX_ERROR_PROC_THREAD_ATTRIBUTES
=
17
SBOX_ERROR_CREATE_PROCESS
=
18
SBOX_ERROR_DELEGATE_PRE_SPAWN
=
19
SBOX_ERROR_ASSIGN_PROCESS_TO_JOB_OBJECT
=
20
SBOX_ERROR_SET_THREAD_TOKEN
=
21
SBOX_ERROR_GET_THREAD_CONTEXT
=
22
SBOX_ERROR_DUPLICATE_TARGET_INFO
=
23
SBOX_ERROR_SET_LOW_BOX_TOKEN
=
24
SBOX_ERROR_CREATE_FILE_MAPPING
=
25
SBOX_ERROR_DUPLICATE_SHARED_SECTION
=
26
SBOX_ERROR_MAP_VIEW_OF_SHARED_SECTION
=
27
SBOX_ERROR_APPLY_ASLR_MITIGATIONS
=
28
SBOX_ERROR_SETUP_BASIC_INTERCEPTIONS
=
29
SBOX_ERROR_SETUP_INTERCEPTION_SERVICE
=
30
SBOX_ERROR_INITIALIZE_INTERCEPTIONS
=
31
SBOX_ERROR_SETUP_NTDLL_IMPORTS
=
32
SBOX_ERROR_SETUP_HANDLE_CLOSER
=
33
SBOX_ERROR_CANNOT_GET_WINSTATION
=
34
SBOX_ERROR_CANNOT_QUERY_WINSTATION_SECURITY
=
35
SBOX_ERROR_CANNOT_GET_DESKTOP
=
36
SBOX_ERROR_CANNOT_QUERY_DESKTOP_SECURITY
=
37
SBOX_ERROR_CANNOT_SETUP_INTERCEPTION_CONFIG_BUFFER
=
38
SBOX_ERROR_CANNOT_COPY_DATA_TO_CHILD
=
39
SBOX_ERROR_CANNOT_SETUP_INTERCEPTION_THUNK
=
40
SBOX_ERROR_CANNOT_RESOLVE_INTERCEPTION_THUNK
=
41
SBOX_ERROR_CANNOT_WRITE_INTERCEPTION_THUNK
=
42
SBOX_ERROR_CANNOT_FIND_BASE_ADDRESS
=
43
SBOX_ERROR_CREATE_APPCONTAINER
=
44
SBOX_ERROR_CREATE_APPCONTAINER_ACCESS_CHECK
=
45
SBOX_ERROR_CREATE_APPCONTAINER_CAPABILITY
=
46
SBOX_ERROR_CANNOT_INIT_JOB
=
47
SBOX_ERROR_INVALID_LOWBOX_SID
=
48
SBOX_ERROR_CANNOT_CREATE_RESTRICTED_TOKEN
=
49
SBOX_ERROR_CANNOT_SET_DESKTOP_INTEGRITY
=
50
SBOX_ERROR_CANNOT_CREATE_LOWBOX_TOKEN
=
51
SBOX_ERROR_CANNOT_MODIFY_LOWBOX_TOKEN_DACL
=
52
SBOX_ERROR_CANNOT_CREATE_RESTRICTED_IMP_TOKEN
=
53
SBOX_ERROR_CANNOT_DUPLICATE_PROCESS_HANDLE
=
54
SBOX_ERROR_CANNOT_LOADLIBRARY_EXECUTABLE
=
55
SBOX_ERROR_CANNOT_FIND_VARIABLE_ADDRESS
=
56
SBOX_ERROR_CANNOT_WRITE_VARIABLE_VALUE
=
57
SBOX_ERROR_INVALID_WRITE_VARIABLE_SIZE
=
58
SBOX_ERROR_CANNOT_INIT_BROKERSERVICES
=
59
SBOX_ERROR_CANNOT_UPDATE_JOB_PROCESS_LIMIT
=
60
SBOX_ERROR_CANNOT_CREATE_LOWBOX_IMPERSONATION_TOKEN
=
61
SBOX_ERROR_UNSANDBOXED_PROCESS
=
62
SBOX_ERROR_CANNOT_LAUNCH_UNSANDBOXED_PROCESS
=
63
SBOX_ERROR_INVALID_LINK_STATE
=
64
SBOX_ERROR_INVALID_TARGET_BASE_ADDRESS
=
65
SBOX_ERROR_CANNOT_READ_SENTINEL_VALUE
=
66
SBOX_ERROR_INVALID_READ_SENTINEL_SIZE
=
67
SBOX_ERROR_MISMATCH_SENTINEL_VALUE
=
68
SBOX_ERROR_FAILED_TO_FREEZE_CONFIG
=
69
SBOX_ERROR_CANNOT_OBTAIN_ENVIRONMENT
=
70
SBOX_ERROR_DELEGATE_INITIALIZE_CONFIG
=
71
SBOX_ERROR_DISABLING_APPHELP
=
72
SBOX_ERROR_LAST
}
;
enum
TerminationCodes
{
SBOX_FATAL_INTEGRITY
=
7006
SBOX_FATAL_DROPTOKEN
=
7007
SBOX_FATAL_FLUSHANDLES
=
7008
SBOX_FATAL_CACHEDISABLE
=
7009
SBOX_FATAL_CLOSEHANDLES
=
7010
SBOX_FATAL_MITIGATION
=
7011
SBOX_FATAL_MEMORY_EXCEEDED
=
7012
SBOX_FATAL_WARMUP
=
7013
SBOX_FATAL_LAST
}
;
static_assert
(
SBOX_FATAL_MEMORY_EXCEEDED
=
=
base
:
:
win
:
:
kSandboxFatalMemoryExceeded
"
Value
for
SBOX_FATAL_MEMORY_EXCEEDED
must
match
base
.
"
)
;
class
BrokerServices
;
class
TargetServices
;
struct
SandboxInterfaceInfo
{
raw_ptr
<
BrokerServices
>
broker_services
;
raw_ptr
<
TargetServices
>
target_services
;
}
;
#
if
SANDBOX_EXPORTS
#
define
SANDBOX_INTERCEPT
extern
"
C
"
__declspec
(
dllexport
)
#
else
#
define
SANDBOX_INTERCEPT
extern
"
C
"
#
endif
enum
InterceptionType
{
INTERCEPTION_INVALID
=
0
INTERCEPTION_SERVICE_CALL
INTERCEPTION_EAT
INTERCEPTION_UNLOAD_MODULE
INTERCEPTION_LAST
}
;
}
#
endif
