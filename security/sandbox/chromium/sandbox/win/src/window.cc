#
include
"
sandbox
/
win
/
src
/
window
.
h
"
#
include
<
windows
.
h
>
#
include
"
base
/
notreached
.
h
"
#
include
"
base
/
win
/
security_descriptor
.
h
"
#
include
"
base
/
win
/
sid
.
h
"
#
include
"
base
/
win
/
win_util
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
sandbox
{
ResultCode
CreateAltWindowStation
(
HWINSTA
*
winsta
)
{
HWINSTA
current_winsta
=
:
:
GetProcessWindowStation
(
)
;
if
(
!
current_winsta
)
return
SBOX_ERROR_CANNOT_GET_WINSTATION
;
absl
:
:
optional
<
base
:
:
win
:
:
SecurityDescriptor
>
sd
=
base
:
:
win
:
:
SecurityDescriptor
:
:
FromHandle
(
current_winsta
base
:
:
win
:
:
SecurityObjectType
:
:
kWindowStation
DACL_SECURITY_INFORMATION
)
;
if
(
!
sd
)
{
return
SBOX_ERROR_CANNOT_QUERY_WINSTATION_SECURITY
;
}
SECURITY_DESCRIPTOR
sd_absolute
;
sd
-
>
ToAbsolute
(
sd_absolute
)
;
SECURITY_ATTRIBUTES
attributes
=
{
sizeof
(
SECURITY_ATTRIBUTES
)
&
sd_absolute
FALSE
}
;
*
winsta
=
:
:
CreateWindowStationW
(
nullptr
0
GENERIC_READ
|
WINSTA_CREATEDESKTOP
&
attributes
)
;
if
(
!
*
winsta
&
&
:
:
GetLastError
(
)
=
=
ERROR_ACCESS_DENIED
)
{
*
winsta
=
:
:
CreateWindowStationW
(
nullptr
0
WINSTA_READATTRIBUTES
|
WINSTA_CREATEDESKTOP
&
attributes
)
;
}
if
(
*
winsta
)
return
SBOX_ALL_OK
;
return
SBOX_ERROR_CANNOT_CREATE_WINSTATION
;
}
ResultCode
CreateAltDesktop
(
HWINSTA
winsta
HDESK
*
desktop
)
{
std
:
:
wstring
desktop_name
=
L
"
sbox_alternate_desktop_
"
;
if
(
!
winsta
)
{
desktop_name
+
=
L
"
local_winstation_
"
;
}
wchar_t
buffer
[
16
]
;
_snwprintf_s
(
buffer
sizeof
(
buffer
)
/
sizeof
(
wchar_t
)
L
"
0x
%
X
"
:
:
GetCurrentProcessId
(
)
)
;
desktop_name
+
=
buffer
;
HDESK
current_desktop
=
GetThreadDesktop
(
GetCurrentThreadId
(
)
)
;
if
(
!
current_desktop
)
return
SBOX_ERROR_CANNOT_GET_DESKTOP
;
absl
:
:
optional
<
base
:
:
win
:
:
SecurityDescriptor
>
sd
=
base
:
:
win
:
:
SecurityDescriptor
:
:
FromHandle
(
current_desktop
base
:
:
win
:
:
SecurityObjectType
:
:
kDesktop
DACL_SECURITY_INFORMATION
)
;
if
(
!
sd
)
{
return
SBOX_ERROR_CANNOT_QUERY_DESKTOP_SECURITY
;
}
if
(
sd
-
>
dacl
(
)
&
&
sd
-
>
dacl
(
)
-
>
is_null
(
)
)
{
sd
-
>
SetDaclEntry
(
base
:
:
win
:
:
WellKnownSid
:
:
kAllApplicationPackages
base
:
:
win
:
:
SecurityAccessMode
:
:
kGrant
GENERIC_ALL
0
)
;
sd
-
>
SetDaclEntry
(
base
:
:
win
:
:
WellKnownSid
:
:
kWorld
base
:
:
win
:
:
SecurityAccessMode
:
:
kGrant
GENERIC_ALL
0
)
;
}
static
const
ACCESS_MASK
kDesktopDenyMask
=
WRITE_DAC
|
WRITE_OWNER
|
DELETE
|
DESKTOP_CREATEMENU
|
DESKTOP_CREATEWINDOW
|
DESKTOP_HOOKCONTROL
|
DESKTOP_JOURNALPLAYBACK
|
DESKTOP_JOURNALRECORD
|
DESKTOP_SWITCHDESKTOP
;
sd
-
>
SetDaclEntry
(
base
:
:
win
:
:
WellKnownSid
:
:
kRestricted
base
:
:
win
:
:
SecurityAccessMode
:
:
kDeny
kDesktopDenyMask
0
)
;
SECURITY_DESCRIPTOR
sd_absolute
;
sd
-
>
ToAbsolute
(
sd_absolute
)
;
SECURITY_ATTRIBUTES
attributes
=
{
sizeof
(
SECURITY_ATTRIBUTES
)
&
sd_absolute
FALSE
}
;
HWINSTA
current_winsta
=
:
:
GetProcessWindowStation
(
)
;
if
(
winsta
)
{
if
(
!
:
:
SetProcessWindowStation
(
winsta
)
)
{
return
SBOX_ERROR_CANNOT_CREATE_DESKTOP
;
}
}
*
desktop
=
:
:
CreateDesktop
(
desktop_name
.
c_str
(
)
nullptr
nullptr
0
DESKTOP_CREATEWINDOW
|
DESKTOP_READOBJECTS
|
READ_CONTROL
|
WRITE_DAC
|
WRITE_OWNER
&
attributes
)
;
if
(
winsta
)
{
if
(
!
:
:
SetProcessWindowStation
(
current_winsta
)
)
{
return
SBOX_ERROR_FAILED_TO_SWITCH_BACK_WINSTATION
;
}
}
if
(
*
desktop
)
{
return
SBOX_ALL_OK
;
}
return
SBOX_ERROR_CANNOT_CREATE_DESKTOP
;
}
std
:
:
wstring
GetFullDesktopName
(
HWINSTA
winsta
HDESK
desktop
)
{
if
(
!
desktop
)
{
NOTREACHED
(
)
;
return
std
:
:
wstring
(
)
;
}
std
:
:
wstring
name
;
if
(
winsta
)
{
name
=
base
:
:
win
:
:
GetWindowObjectName
(
winsta
)
;
name
+
=
L
'
\
\
'
;
}
name
+
=
base
:
:
win
:
:
GetWindowObjectName
(
desktop
)
;
return
name
;
}
}
