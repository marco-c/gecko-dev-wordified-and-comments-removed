#
include
"
sandbox
/
win
/
src
/
alternate_desktop
.
h
"
#
include
"
base
/
win
/
win_util
.
h
"
#
include
"
sandbox
/
win
/
src
/
acl
.
h
"
#
include
"
sandbox
/
win
/
src
/
window
.
h
"
#
include
<
windows
.
h
>
namespace
sandbox
{
AlternateDesktop
:
:
~
AlternateDesktop
(
)
{
if
(
desktop_
)
{
:
:
CloseDesktop
(
desktop_
)
;
desktop_
=
nullptr
;
}
if
(
winstation_
)
{
:
:
CloseWindowStation
(
winstation_
)
;
winstation_
=
nullptr
;
}
}
ResultCode
AlternateDesktop
:
:
UpdateDesktopIntegrity
(
IntegrityLevel
integrity_level
)
{
static_assert
(
INTEGRITY_LEVEL_SYSTEM
<
INTEGRITY_LEVEL_UNTRUSTED
"
Integrity
level
ordering
reversed
.
"
)
;
DCHECK
(
integrity_level
!
=
INTEGRITY_LEVEL_LAST
)
;
if
(
!
desktop_
)
return
SBOX_ERROR_CANNOT_CREATE_DESKTOP
;
if
(
integrity_
<
integrity_level
)
{
DWORD
result
=
SetObjectIntegrityLabel
(
desktop_
base
:
:
win
:
:
SecurityObjectType
:
:
kDesktop
0
integrity_level
)
;
if
(
ERROR_SUCCESS
!
=
result
)
return
SBOX_ERROR_CANNOT_SET_DESKTOP_INTEGRITY
;
integrity_
=
integrity_level
;
}
return
SBOX_ALL_OK
;
}
ResultCode
AlternateDesktop
:
:
Initialize
(
bool
alternate_winstation
)
{
DCHECK
(
!
desktop_
&
&
!
winstation_
)
;
if
(
alternate_winstation
)
{
ResultCode
result
=
CreateAltWindowStation
(
&
winstation_
)
;
if
(
SBOX_ALL_OK
!
=
result
)
return
result
;
if
(
!
winstation_
|
|
base
:
:
win
:
:
GetWindowObjectName
(
winstation_
)
.
empty
(
)
)
{
return
SBOX_ERROR_CANNOT_CREATE_DESKTOP
;
}
}
ResultCode
result
=
CreateAltDesktop
(
winstation_
&
desktop_
)
;
if
(
SBOX_ALL_OK
!
=
result
)
return
result
;
if
(
!
desktop_
|
|
base
:
:
win
:
:
GetWindowObjectName
(
desktop_
)
.
empty
(
)
)
{
return
SBOX_ERROR_CANNOT_CREATE_DESKTOP
;
}
return
SBOX_ALL_OK
;
}
std
:
:
wstring
AlternateDesktop
:
:
GetDesktopName
(
)
{
if
(
!
desktop_
)
return
std
:
:
wstring
(
)
;
return
GetFullDesktopName
(
winstation_
desktop_
)
;
}
}
