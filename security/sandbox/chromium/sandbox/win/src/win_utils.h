#
ifndef
SANDBOX_WIN_SRC_WIN_UTILS_H_
#
define
SANDBOX_WIN_SRC_WIN_UTILS_H_
#
include
<
stdlib
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
sandbox
{
const
wchar_t
kNTPrefix
[
]
=
L
"
\
\
?
?
\
\
"
;
const
size_t
kNTPrefixLen
=
std
:
:
size
(
kNTPrefix
)
-
1
;
const
wchar_t
kNTDevicePrefix
[
]
=
L
"
\
\
Device
\
\
"
;
const
size_t
kNTDevicePrefixLen
=
std
:
:
size
(
kNTDevicePrefix
)
-
1
;
using
ProcessHandleMap
=
std
:
:
map
<
std
:
:
wstring
std
:
:
vector
<
HANDLE
>
>
;
template
<
typename
Derived
>
class
SingletonBase
{
public
:
static
Derived
*
GetInstance
(
)
{
static
Derived
*
instance
=
nullptr
;
if
(
!
instance
)
{
instance
=
new
Derived
(
)
;
_onexit
(
OnExit
)
;
}
return
instance
;
}
private
:
static
int
__cdecl
OnExit
(
)
{
delete
GetInstance
(
)
;
return
0
;
}
}
;
bool
ConvertToLongPath
(
std
:
:
wstring
*
path
const
std
:
:
wstring
*
drive_letter
=
nullptr
)
;
DWORD
IsReparsePoint
(
const
std
:
:
wstring
&
full_path
)
;
bool
SameObject
(
HANDLE
handle
const
wchar_t
*
full_path
)
;
absl
:
:
optional
<
std
:
:
wstring
>
GetPathFromHandle
(
HANDLE
handle
)
;
absl
:
:
optional
<
std
:
:
wstring
>
GetNtPathFromWin32Path
(
const
std
:
:
wstring
&
path
)
;
absl
:
:
optional
<
std
:
:
wstring
>
GetTypeNameFromHandle
(
HANDLE
handle
)
;
absl
:
:
optional
<
std
:
:
wstring
>
ResolveRegistryName
(
std
:
:
wstring
name
)
;
bool
CopyToChildMemory
(
HANDLE
child
const
void
*
local_buffer
size_t
buffer_bytes
void
*
*
remote_buffer
)
;
bool
IsPipe
(
const
std
:
:
wstring
&
path
)
;
DWORD
GetLastErrorFromNtStatus
(
NTSTATUS
status
)
;
void
*
GetProcessBaseAddress
(
HANDLE
process
)
;
absl
:
:
optional
<
ProcessHandleMap
>
GetCurrentProcessHandles
(
)
;
}
void
ResolveNTFunctionPtr
(
const
char
*
name
void
*
ptr
)
;
#
endif
