#
ifndef
SANDBOX_WIN_SRC_TARGET_PROCESS_H_
#
define
SANDBOX_WIN_SRC_TARGET_PROCESS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
environment
.
h
"
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
base
/
memory
/
free_deleter
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
strings
/
string_util
.
h
"
#
include
"
base
/
win
/
access_token
.
h
"
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
include
"
base
/
win
/
scoped_process_information
.
h
"
#
include
"
base
/
win
/
sid
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_types
.
h
"
namespace
sandbox
{
class
Dispatcher
;
class
SharedMemIPCServer
;
class
ThreadPool
;
class
StartupInformationHelper
;
class
TargetProcess
{
public
:
TargetProcess
(
)
=
delete
;
TargetProcess
(
base
:
:
win
:
:
AccessToken
initial_token
base
:
:
win
:
:
AccessToken
lockdown_token
ThreadPool
*
thread_pool
)
;
TargetProcess
(
const
TargetProcess
&
)
=
delete
;
TargetProcess
&
operator
=
(
const
TargetProcess
&
)
=
delete
;
~
TargetProcess
(
)
;
ResultCode
Create
(
const
wchar_t
*
exe_path
const
wchar_t
*
command_line
std
:
:
unique_ptr
<
StartupInformationHelper
>
startup_info
base
:
:
win
:
:
ScopedProcessInformation
*
target_info
base
:
:
EnvironmentMap
&
env_map
DWORD
*
win_error
)
;
void
Terminate
(
)
;
ResultCode
Init
(
Dispatcher
*
ipc_dispatcher
absl
:
:
optional
<
base
:
:
span
<
const
uint8_t
>
>
policy
absl
:
:
optional
<
base
:
:
span
<
const
uint8_t
>
>
delegate_data
uint32_t
shared_IPC_size
DWORD
*
win_error
)
;
HANDLE
Process
(
)
const
{
return
sandbox_process_info_
.
process_handle
(
)
;
}
HMODULE
MainModule
(
)
const
{
return
reinterpret_cast
<
HMODULE
>
(
base_address_
)
;
}
const
wchar_t
*
Name
(
)
const
{
return
exe_name_
.
get
(
)
;
}
DWORD
ProcessId
(
)
const
{
return
sandbox_process_info_
.
process_id
(
)
;
}
HANDLE
MainThread
(
)
const
{
return
sandbox_process_info_
.
thread_handle
(
)
;
}
ResultCode
TransferVariable
(
const
char
*
name
const
void
*
address
size_t
size
)
;
static
std
:
:
unique_ptr
<
TargetProcess
>
MakeTargetProcessForTesting
(
HANDLE
process
HMODULE
base_address
)
;
private
:
FRIEND_TEST_ALL_PREFIXES
(
TargetProcessTest
FilterEnvironment
)
;
void
*
GetChildAddress
(
const
char
*
name
const
void
*
address
)
;
ResultCode
VerifySentinels
(
)
;
static
std
:
:
wstring
FilterEnvironment
(
const
wchar_t
*
env
const
base
:
:
span
<
const
base
:
:
WStringPiece
>
to_keep
)
;
base
:
:
win
:
:
ScopedProcessInformation
sandbox_process_info_
;
base
:
:
win
:
:
AccessToken
lockdown_token_
;
base
:
:
win
:
:
AccessToken
initial_token_
;
base
:
:
win
:
:
ScopedHandle
shared_section_
;
std
:
:
unique_ptr
<
SharedMemIPCServer
>
ipc_server_
;
raw_ptr
<
ThreadPool
>
thread_pool_
;
RAW_PTR_EXCLUSION
void
*
base_address_
;
std
:
:
unique_ptr
<
wchar_t
base
:
:
FreeDeleter
>
exe_name_
;
}
;
}
#
endif
