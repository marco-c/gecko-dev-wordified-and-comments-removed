#
ifndef
SANDBOX_WIN_SRC_SANDBOX_H_
#
define
SANDBOX_WIN_SRC_SANDBOX_H_
#
if
!
defined
(
SANDBOX_FUZZ_TARGET
)
#
include
<
windows
.
h
>
#
else
#
include
"
sandbox
/
win
/
fuzzer
/
fuzzer_types
.
h
"
#
endif
#
include
"
base
/
memory
/
ref_counted
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_policy
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_types
.
h
"
namespace
sandbox
{
class
BrokerServices
;
class
ProcessState
;
class
TargetPolicy
;
class
TargetServices
;
class
BrokerServices
{
public
:
virtual
ResultCode
Init
(
)
=
0
;
virtual
scoped_refptr
<
TargetPolicy
>
CreatePolicy
(
)
=
0
;
virtual
ResultCode
SpawnTarget
(
const
wchar_t
*
exe_path
const
wchar_t
*
command_line
base
:
:
EnvironmentMap
&
env_map
scoped_refptr
<
TargetPolicy
>
policy
ResultCode
*
last_warning
DWORD
*
last_error
PROCESS_INFORMATION
*
target
)
=
0
;
virtual
ResultCode
WaitForAllTargets
(
)
=
0
;
virtual
ResultCode
AddTargetPeer
(
HANDLE
peer_process
)
=
0
;
protected
:
~
BrokerServices
(
)
{
}
}
;
class
TargetServices
{
public
:
virtual
ResultCode
Init
(
)
=
0
;
virtual
void
LowerToken
(
)
=
0
;
virtual
ProcessState
*
GetState
(
)
=
0
;
virtual
ResultCode
DuplicateHandle
(
HANDLE
source_handle
DWORD
target_process_id
HANDLE
*
target_handle
DWORD
desired_access
DWORD
options
)
=
0
;
protected
:
~
TargetServices
(
)
{
}
}
;
}
#
endif
