#
ifndef
SANDBOX_WIN_SRC_SANDBOX_H_
#
define
SANDBOX_WIN_SRC_SANDBOX_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_policy
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_types
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
sandbox
{
class
BrokerServicesTargetTracker
;
class
PolicyDiagnosticsReceiver
;
class
ProcessState
;
class
TargetPolicy
;
class
TargetServices
;
enum
class
Desktop
;
class
[
[
clang
:
:
lto_visibility_public
]
]
BrokerServices
{
public
:
virtual
ResultCode
Init
(
)
=
0
;
virtual
ResultCode
InitForTesting
(
std
:
:
unique_ptr
<
BrokerServicesTargetTracker
>
target_tracker
)
=
0
;
[
[
nodiscard
]
]
virtual
ResultCode
CreateAlternateDesktop
(
Desktop
desktop
)
=
0
;
virtual
void
DestroyDesktops
(
)
=
0
;
virtual
std
:
:
wstring
GetDesktopName
(
Desktop
desktop
)
=
0
;
virtual
std
:
:
unique_ptr
<
TargetPolicy
>
CreatePolicy
(
)
=
0
;
virtual
std
:
:
unique_ptr
<
TargetPolicy
>
CreatePolicy
(
base
:
:
StringPiece
tag
)
=
0
;
virtual
ResultCode
SpawnTarget
(
const
wchar_t
*
exe_path
const
wchar_t
*
command_line
base
:
:
EnvironmentMap
&
env_map
std
:
:
unique_ptr
<
TargetPolicy
>
policy
DWORD
*
last_error
PROCESS_INFORMATION
*
target
)
=
0
;
virtual
ResultCode
GetPolicyDiagnostics
(
std
:
:
unique_ptr
<
PolicyDiagnosticsReceiver
>
receiver
)
=
0
;
virtual
void
SetStartingMitigations
(
MitigationFlags
starting_mitigations
)
=
0
;
virtual
bool
RatchetDownSecurityMitigations
(
MitigationFlags
additional_flags
)
=
0
;
virtual
bool
DeriveCapabilitySidFromName
(
const
wchar_t
*
name
PSID
derived_sid
DWORD
sid_buffer_length
)
=
0
;
protected
:
~
BrokerServices
(
)
{
}
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
TargetServices
{
public
:
virtual
ResultCode
Init
(
)
=
0
;
virtual
absl
:
:
optional
<
base
:
:
span
<
const
uint8_t
>
>
GetDelegateData
(
)
=
0
;
virtual
void
LowerToken
(
)
=
0
;
virtual
ProcessState
*
GetState
(
)
=
0
;
virtual
ResultCode
GetComplexLineBreaks
(
const
WCHAR
*
text
uint32_t
length
uint8_t
*
break_before
)
=
0
;
protected
:
~
TargetServices
(
)
{
}
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
PolicyInfo
{
public
:
virtual
const
char
*
JsonString
(
)
=
0
;
virtual
~
PolicyInfo
(
)
{
}
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
PolicyList
{
public
:
virtual
std
:
:
vector
<
std
:
:
unique_ptr
<
PolicyInfo
>
>
:
:
iterator
begin
(
)
=
0
;
virtual
std
:
:
vector
<
std
:
:
unique_ptr
<
PolicyInfo
>
>
:
:
iterator
end
(
)
=
0
;
virtual
size_t
size
(
)
const
=
0
;
virtual
~
PolicyList
(
)
{
}
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
PolicyDiagnosticsReceiver
{
public
:
virtual
void
ReceiveDiagnostics
(
std
:
:
unique_ptr
<
PolicyList
>
policies
)
=
0
;
virtual
void
OnError
(
ResultCode
code
)
=
0
;
virtual
~
PolicyDiagnosticsReceiver
(
)
{
}
}
;
class
[
[
clang
:
:
lto_visibility_public
]
]
BrokerServicesTargetTracker
{
public
:
virtual
void
OnTargetAdded
(
)
=
0
;
virtual
void
OnTargetRemoved
(
)
=
0
;
virtual
~
BrokerServicesTargetTracker
(
)
{
}
}
;
}
#
endif
