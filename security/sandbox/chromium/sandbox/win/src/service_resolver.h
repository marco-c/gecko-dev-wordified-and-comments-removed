#
ifndef
SANDBOX_WIN_SRC_SERVICE_RESOLVER_H_
#
define
SANDBOX_WIN_SRC_SERVICE_RESOLVER_H_
#
include
<
stddef
.
h
>
#
include
"
base
/
win
/
windows_types
.
h
"
#
include
"
sandbox
/
win
/
src
/
resolver
.
h
"
namespace
sandbox
{
class
[
[
clang
:
:
lto_visibility_public
]
]
ServiceResolverThunk
:
public
ResolverThunk
{
public
:
ServiceResolverThunk
(
HANDLE
process
bool
relaxed
)
:
ntdll_base_
(
nullptr
)
process_
(
process
)
relaxed_
(
relaxed
)
relative_jump_
(
0
)
{
}
ServiceResolverThunk
(
const
ServiceResolverThunk
&
)
=
delete
;
ServiceResolverThunk
&
operator
=
(
const
ServiceResolverThunk
&
)
=
delete
;
~
ServiceResolverThunk
(
)
override
{
}
NTSTATUS
Setup
(
const
void
*
target_module
const
void
*
interceptor_module
const
char
*
target_name
const
char
*
interceptor_name
const
void
*
interceptor_entry_point
void
*
thunk_storage
size_t
storage_bytes
size_t
*
storage_used
)
override
;
NTSTATUS
ResolveInterceptor
(
const
void
*
module
const
char
*
function_name
const
void
*
*
address
)
override
;
NTSTATUS
ResolveTarget
(
const
void
*
module
const
char
*
function_name
void
*
*
address
)
override
;
size_t
GetThunkSize
(
)
const
override
;
void
AllowLocalPatches
(
)
;
NTSTATUS
CopyThunk
(
const
void
*
target_module
const
char
*
target_name
BYTE
*
thunk_storage
size_t
storage_bytes
size_t
*
storage_used
)
;
bool
VerifyJumpTargetForTesting
(
void
*
thunk_storage
)
const
;
private
:
HMODULE
ntdll_base_
;
HANDLE
process_
;
static
bool
WriteProtectedChildMemory
(
HANDLE
child_process
void
*
address
const
void
*
buffer
size_t
length
)
;
bool
IsFunctionAService
(
void
*
local_thunk
)
const
;
NTSTATUS
PerformPatch
(
void
*
local_thunk
void
*
remote_thunk
)
;
bool
SaveOriginalFunction
(
void
*
local_thunk
void
*
remote_thunk
)
;
bool
relaxed_
;
ULONG
relative_jump_
;
}
;
}
#
endif
