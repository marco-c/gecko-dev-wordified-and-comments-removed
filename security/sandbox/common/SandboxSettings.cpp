#
include
"
mozISandboxSettings
.
h
"
#
include
"
mozilla
/
Omnijar
.
h
"
#
include
"
mozilla
/
ModuleUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
if
defined
(
XP_MACOSX
)
#
include
<
CoreServices
/
CoreServices
.
h
>
#
define
MAC_DEV_REPO_KEY
"
MozillaDeveloperRepoPath
"
#
define
MAC_DEV_OBJ_KEY
"
MozillaDeveloperObjPath
"
#
else
#
include
"
prenv
.
h
"
#
endif
namespace
mozilla
{
bool
IsDevelopmentBuild
(
)
{
nsCOMPtr
<
nsIFile
>
path
=
mozilla
:
:
Omnijar
:
:
GetPath
(
mozilla
:
:
Omnijar
:
:
GRE
)
;
return
path
=
=
nullptr
;
}
#
if
defined
(
XP_MACOSX
)
static
nsresult
GetStringValueFromBundlePlist
(
const
nsAString
&
aKey
nsAutoCString
&
aValue
)
{
CFBundleRef
mainBundle
=
CFBundleGetMainBundle
(
)
;
CFDictionaryRef
bundleInfoDict
=
CFBundleGetInfoDictionary
(
mainBundle
)
;
if
(
bundleInfoDict
=
=
NULL
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
keyAutoCString
=
NS_ConvertUTF16toUTF8
(
aKey
)
;
CFStringRef
key
=
CFStringCreateWithCString
(
kCFAllocatorDefault
keyAutoCString
.
get
(
)
kCFStringEncodingUTF8
)
;
CFStringRef
value
=
(
CFStringRef
)
CFDictionaryGetValue
(
bundleInfoDict
key
)
;
const
char
*
valueCString
=
CFStringGetCStringPtr
(
value
kCFStringEncodingUTF8
)
;
aValue
.
Assign
(
valueCString
)
;
CFRelease
(
key
)
;
return
NS_OK
;
}
static
nsresult
GetDirFromBundlePlist
(
const
nsAString
&
aKey
nsIFile
*
*
aDir
)
{
nsresult
rv
;
nsAutoCString
dirPath
;
rv
=
GetStringValueFromBundlePlist
(
aKey
dirPath
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIFile
>
dir
;
rv
=
NS_NewLocalFile
(
NS_ConvertUTF8toUTF16
(
dirPath
)
false
getter_AddRefs
(
dir
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
dir
-
>
Normalize
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
isDirectory
=
false
;
rv
=
dir
-
>
IsDirectory
(
&
isDirectory
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
isDirectory
)
{
return
NS_ERROR_FILE_NOT_DIRECTORY
;
}
dir
.
swap
(
*
aDir
)
;
return
NS_OK
;
}
#
else
static
nsresult
GetDirFromEnv
(
const
char
*
aEnvVar
nsIFile
*
*
aDir
)
{
nsresult
rv
;
nsCOMPtr
<
nsIFile
>
dir
;
const
char
*
dir_path
=
PR_GetEnv
(
aEnvVar
)
;
if
(
!
dir_path
)
{
return
NS_ERROR_INVALID_ARG
;
}
rv
=
NS_NewLocalFile
(
NS_ConvertUTF8toUTF16
(
dir_path
)
false
getter_AddRefs
(
dir
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
dir
-
>
Normalize
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
isDirectory
=
false
;
rv
=
dir
-
>
IsDirectory
(
&
isDirectory
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
isDirectory
)
{
return
NS_ERROR_FILE_NOT_DIRECTORY
;
}
dir
.
swap
(
*
aDir
)
;
return
NS_OK
;
}
#
endif
nsresult
GetRepoDir
(
nsIFile
*
*
aRepoDir
)
{
MOZ_ASSERT
(
IsDevelopmentBuild
(
)
)
;
#
if
defined
(
XP_MACOSX
)
return
GetDirFromBundlePlist
(
NS_LITERAL_STRING
(
MAC_DEV_REPO_KEY
)
aRepoDir
)
;
#
else
return
GetDirFromEnv
(
"
MOZ_DEVELOPER_REPO_DIR
"
aRepoDir
)
;
#
endif
}
nsresult
GetObjDir
(
nsIFile
*
*
aObjDir
)
{
MOZ_ASSERT
(
IsDevelopmentBuild
(
)
)
;
#
if
defined
(
XP_MACOSX
)
return
GetDirFromBundlePlist
(
NS_LITERAL_STRING
(
MAC_DEV_OBJ_KEY
)
aObjDir
)
;
#
else
return
GetDirFromEnv
(
"
MOZ_DEVELOPER_OBJ_DIR
"
aObjDir
)
;
#
endif
}
int
GetEffectiveContentSandboxLevel
(
)
{
int
level
=
Preferences
:
:
GetInt
(
"
security
.
sandbox
.
content
.
level
"
)
;
#
if
!
defined
(
NIGHTLY_BUILD
)
&
&
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
if
(
level
<
1
)
{
level
=
1
;
}
#
endif
return
level
;
}
class
SandboxSettings
final
:
public
mozISandboxSettings
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_MOZISANDBOXSETTINGS
SandboxSettings
(
)
{
}
private
:
~
SandboxSettings
(
)
{
}
}
;
NS_IMPL_ISUPPORTS
(
SandboxSettings
mozISandboxSettings
)
NS_IMETHODIMP
SandboxSettings
:
:
GetEffectiveContentSandboxLevel
(
int32_t
*
aRetVal
)
{
*
aRetVal
=
mozilla
:
:
GetEffectiveContentSandboxLevel
(
)
;
return
NS_OK
;
}
NS_GENERIC_FACTORY_CONSTRUCTOR
(
SandboxSettings
)
NS_DEFINE_NAMED_CID
(
MOZ_SANDBOX_SETTINGS_CID
)
;
static
const
mozilla
:
:
Module
:
:
CIDEntry
kSandboxSettingsCIDs
[
]
=
{
{
&
kMOZ_SANDBOX_SETTINGS_CID
false
nullptr
SandboxSettingsConstructor
}
{
nullptr
}
}
;
static
const
mozilla
:
:
Module
:
:
ContractIDEntry
kSandboxSettingsContracts
[
]
=
{
{
MOZ_SANDBOX_SETTINGS_CONTRACTID
&
kMOZ_SANDBOX_SETTINGS_CID
}
{
nullptr
}
}
;
static
const
mozilla
:
:
Module
kSandboxSettingsModule
=
{
mozilla
:
:
Module
:
:
kVersion
kSandboxSettingsCIDs
kSandboxSettingsContracts
}
;
NSMODULE_DEFN
(
SandboxSettingsModule
)
=
&
kSandboxSettingsModule
;
}
