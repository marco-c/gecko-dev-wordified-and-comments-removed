#
include
"
mozISandboxSettings
.
h
"
#
include
"
mozilla
/
ModuleUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
prenv
.
h
"
namespace
mozilla
{
int
GetEffectiveContentSandboxLevel
(
)
{
if
(
PR_GetEnv
(
"
MOZ_DISABLE_CONTENT_SANDBOX
"
)
)
{
return
0
;
}
int
level
=
Preferences
:
:
GetInt
(
"
security
.
sandbox
.
content
.
level
"
)
;
#
if
!
defined
(
NIGHTLY_BUILD
)
&
&
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
if
(
level
<
1
)
{
level
=
1
;
}
#
endif
return
level
;
}
bool
IsContentSandboxEnabled
(
)
{
return
GetEffectiveContentSandboxLevel
(
)
>
0
;
}
class
SandboxSettings
final
:
public
mozISandboxSettings
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_MOZISANDBOXSETTINGS
SandboxSettings
(
)
{
}
private
:
~
SandboxSettings
(
)
{
}
}
;
NS_IMPL_ISUPPORTS
(
SandboxSettings
mozISandboxSettings
)
NS_IMETHODIMP
SandboxSettings
:
:
GetEffectiveContentSandboxLevel
(
int32_t
*
aRetVal
)
{
*
aRetVal
=
mozilla
:
:
GetEffectiveContentSandboxLevel
(
)
;
return
NS_OK
;
}
NS_GENERIC_FACTORY_CONSTRUCTOR
(
SandboxSettings
)
NS_DEFINE_NAMED_CID
(
MOZ_SANDBOX_SETTINGS_CID
)
;
static
const
mozilla
:
:
Module
:
:
CIDEntry
kSandboxSettingsCIDs
[
]
=
{
{
&
kMOZ_SANDBOX_SETTINGS_CID
false
nullptr
SandboxSettingsConstructor
}
{
nullptr
}
}
;
static
const
mozilla
:
:
Module
:
:
ContractIDEntry
kSandboxSettingsContracts
[
]
=
{
{
MOZ_SANDBOX_SETTINGS_CONTRACTID
&
kMOZ_SANDBOX_SETTINGS_CID
}
{
nullptr
}
}
;
static
const
mozilla
:
:
Module
kSandboxSettingsModule
=
{
mozilla
:
:
Module
:
:
kVersion
kSandboxSettingsCIDs
kSandboxSettingsContracts
}
;
NSMODULE_DEFN
(
SandboxSettingsModule
)
=
&
kSandboxSettingsModule
;
}
