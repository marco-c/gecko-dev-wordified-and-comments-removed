#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
mozISandboxSettings
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
StaticPrefs_security
.
h
"
#
include
"
prenv
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
endif
using
namespace
mozilla
;
namespace
mozilla
{
const
char
*
ContentWin32kLockdownStateToString
(
ContentWin32kLockdownState
aValue
)
{
switch
(
aValue
)
{
case
ContentWin32kLockdownState
:
:
LockdownEnabled
:
return
"
Win32k
Lockdown
enabled
"
;
case
ContentWin32kLockdownState
:
:
MissingWebRender
:
return
"
Win32k
Lockdown
disabled
-
-
Missing
WebRender
"
;
case
ContentWin32kLockdownState
:
:
OperatingSystemNotSupported
:
return
"
Win32k
Lockdown
disabled
-
-
Operating
system
not
supported
"
;
case
ContentWin32kLockdownState
:
:
PrefNotSet
:
return
"
Win32k
Lockdown
disabled
-
-
Preference
not
set
"
;
}
MOZ_CRASH
(
"
Should
never
reach
here
"
)
;
}
ContentWin32kLockdownState
GetContentWin32kLockdownState
(
)
{
#
ifdef
XP_WIN
static
ContentWin32kLockdownState
result
=
[
]
{
ContentWin32kLockdownState
state
=
[
]
{
if
(
!
IsWin8OrLater
(
)
)
{
return
ContentWin32kLockdownState
:
:
OperatingSystemNotSupported
;
}
if
(
!
gfx
:
:
gfxVars
:
:
UseWebRender
(
)
)
{
return
ContentWin32kLockdownState
:
:
MissingWebRender
;
}
if
(
!
StaticPrefs
:
:
security_sandbox_content_win32k_disable
(
)
)
{
return
ContentWin32kLockdownState
:
:
PrefNotSet
;
}
return
ContentWin32kLockdownState
:
:
LockdownEnabled
;
}
(
)
;
const
char
*
stateStr
=
ContentWin32kLockdownStateToString
(
state
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
ContentSandboxWin32kState
nsDependentCString
(
stateStr
)
)
;
return
state
;
}
(
)
;
return
result
;
#
else
return
ContentWin32kLockdownState
:
:
OperatingSystemNotSupported
;
#
endif
}
int
GetEffectiveContentSandboxLevel
(
)
{
if
(
PR_GetEnv
(
"
MOZ_DISABLE_CONTENT_SANDBOX
"
)
)
{
return
0
;
}
int
level
=
StaticPrefs
:
:
security_sandbox_content_level_DoNotUseDirectly
(
)
;
#
if
!
defined
(
NIGHTLY_BUILD
)
&
&
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
if
(
level
<
1
)
{
level
=
1
;
}
#
endif
#
ifdef
XP_LINUX
if
(
level
>
3
&
&
!
StaticPrefs
:
:
media_cubeb_sandbox
(
)
)
{
level
=
3
;
}
#
endif
return
level
;
}
bool
IsContentSandboxEnabled
(
)
{
return
GetEffectiveContentSandboxLevel
(
)
>
0
;
}
int
GetEffectiveSocketProcessSandboxLevel
(
)
{
if
(
PR_GetEnv
(
"
MOZ_DISABLE_SOCKET_PROCESS_SANDBOX
"
)
)
{
return
0
;
}
int
level
=
StaticPrefs
:
:
security_sandbox_socket_process_level_DoNotUseDirectly
(
)
;
return
level
;
}
#
if
defined
(
XP_MACOSX
)
int
ClampFlashSandboxLevel
(
const
int
aLevel
)
{
const
int
minLevel
=
0
;
const
int
maxLevel
=
3
;
if
(
aLevel
<
minLevel
)
{
return
minLevel
;
}
if
(
aLevel
>
maxLevel
)
{
return
maxLevel
;
}
return
aLevel
;
}
#
endif
class
SandboxSettings
final
:
public
mozISandboxSettings
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_MOZISANDBOXSETTINGS
SandboxSettings
(
)
=
default
;
private
:
~
SandboxSettings
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
SandboxSettings
mozISandboxSettings
)
NS_IMETHODIMP
SandboxSettings
:
:
GetEffectiveContentSandboxLevel
(
int32_t
*
aRetVal
)
{
*
aRetVal
=
mozilla
:
:
GetEffectiveContentSandboxLevel
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
SandboxSettings
:
:
GetContentWin32kLockdownState
(
int32_t
*
aRetVal
)
{
*
aRetVal
=
static_cast
<
int32_t
>
(
mozilla
:
:
GetContentWin32kLockdownState
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
SandboxSettings
:
:
GetContentWin32kLockdownStateString
(
nsAString
&
aString
)
{
ContentWin32kLockdownState
lockdownState
=
mozilla
:
:
GetContentWin32kLockdownState
(
)
;
aString
=
NS_ConvertASCIItoUTF16
(
mozilla
:
:
ContentWin32kLockdownStateToString
(
lockdownState
)
)
;
return
NS_OK
;
}
}
NS_IMPL_COMPONENT_FACTORY
(
mozISandboxSettings
)
{
return
MakeAndAddRef
<
SandboxSettings
>
(
)
.
downcast
<
nsISupports
>
(
)
;
}
