#
include
"
SandboxTestingChild
.
h
"
#
include
"
SandboxTestingThread
.
h
"
namespace
mozilla
{
SandboxTestingChild
*
SandboxTestingChild
:
:
sInstance
=
nullptr
;
bool
SandboxTestingChild
:
:
IsTestThread
(
)
{
return
mThread
-
>
IsOnThread
(
)
;
}
void
SandboxTestingChild
:
:
PostToTestThread
(
already_AddRefed
<
nsIRunnable
>
&
&
runnable
)
{
mThread
-
>
Dispatch
(
std
:
:
move
(
runnable
)
)
;
}
bool
SandboxTestingChild
:
:
Initialize
(
Endpoint
<
PSandboxTestingChild
>
&
&
aSandboxTestingEndpoint
)
{
MOZ_ASSERT
(
!
sInstance
)
;
SandboxTestingThread
*
thread
=
SandboxTestingThread
:
:
Create
(
)
;
if
(
!
thread
)
{
return
false
;
}
sInstance
=
new
SandboxTestingChild
(
thread
std
:
:
move
(
aSandboxTestingEndpoint
)
)
;
return
true
;
}
SandboxTestingChild
*
SandboxTestingChild
:
:
GetInstance
(
)
{
MOZ_ASSERT
(
sInstance
"
Must
initialize
SandboxTestingChild
before
using
it
"
)
;
return
sInstance
;
}
SandboxTestingChild
:
:
SandboxTestingChild
(
SandboxTestingThread
*
aThread
Endpoint
<
PSandboxTestingChild
>
&
&
aEndpoint
)
:
mThread
(
aThread
)
{
MOZ_ASSERT
(
aThread
)
;
PostToTestThread
(
NewNonOwningRunnableMethod
<
Endpoint
<
PSandboxTestingChild
>
&
&
>
(
"
SandboxTestingChild
:
:
Bind
"
this
&
SandboxTestingChild
:
:
Bind
std
:
:
move
(
aEndpoint
)
)
)
;
}
void
SandboxTestingChild
:
:
Bind
(
Endpoint
<
PSandboxTestingChild
>
&
&
aEndpoint
)
{
MOZ_RELEASE_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
DebugOnly
<
bool
>
ok
=
aEndpoint
.
Bind
(
this
)
;
MOZ_ASSERT
(
ok
)
;
SendReportTestResults
(
nsCString
(
"
testId1
"
)
true
true
nsCString
(
"
These
are
some
test
results
!
"
)
)
;
SendTestCompleted
(
)
;
}
void
SandboxTestingChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
MOZ_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
SandboxChildDestroyer
"
[
]
(
)
{
SandboxTestingChild
:
:
Destroy
(
)
;
}
)
)
;
}
void
SandboxTestingChild
:
:
Destroy
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sInstance
)
;
delete
sInstance
;
sInstance
=
nullptr
;
}
bool
SandboxTestingChild
:
:
RecvShutDown
(
)
{
Close
(
)
;
return
true
;
}
}
