#
include
"
SandboxTestingParent
.
h
"
#
include
"
SandboxTestingThread
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
Services
.
h
"
namespace
mozilla
{
SandboxTestingParent
*
SandboxTestingParent
:
:
Create
(
Endpoint
<
PSandboxTestingParent
>
&
&
aParentEnd
)
{
SandboxTestingThread
*
thread
=
SandboxTestingThread
:
:
Create
(
)
;
if
(
!
thread
)
{
return
nullptr
;
}
return
new
SandboxTestingParent
(
thread
std
:
:
move
(
aParentEnd
)
)
;
}
SandboxTestingParent
:
:
SandboxTestingParent
(
SandboxTestingThread
*
aThread
Endpoint
<
PSandboxTestingParent
>
&
&
aParentEnd
)
:
mThread
(
aThread
)
mMonitor
(
"
SandboxTestingParent
Lock
"
)
mShutdownDone
(
false
)
{
MOZ_ASSERT
(
mThread
)
;
mThread
-
>
Dispatch
(
NewNonOwningRunnableMethod
<
Endpoint
<
PSandboxTestingParent
>
&
&
>
(
"
SandboxTestingParent
:
:
Bind
"
this
&
SandboxTestingParent
:
:
Bind
std
:
:
move
(
aParentEnd
)
)
)
;
}
void
SandboxTestingParent
:
:
Bind
(
Endpoint
<
PSandboxTestingParent
>
&
&
aEnd
)
{
MOZ_RELEASE_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
DebugOnly
<
bool
>
ok
=
aEnd
.
Bind
(
this
)
;
MOZ_ASSERT
(
ok
)
;
}
void
SandboxTestingParent
:
:
ShutdownSandboxTestThread
(
)
{
MOZ_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
Close
(
)
;
MonitorAutoLock
lock
(
mMonitor
)
;
mShutdownDone
=
true
;
mMonitor
.
Notify
(
)
;
}
void
SandboxTestingParent
:
:
Destroy
(
SandboxTestingParent
*
aInstance
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
aInstance
)
{
return
;
}
{
MonitorAutoLock
lock
(
aInstance
-
>
mMonitor
)
;
aInstance
-
>
mThread
-
>
Dispatch
(
NewNonOwningRunnableMethod
(
"
SandboxTestingParent
:
:
ShutdownSandboxTestThread
"
aInstance
&
SandboxTestingParent
:
:
ShutdownSandboxTestThread
)
)
;
while
(
!
aInstance
-
>
mShutdownDone
)
{
aInstance
-
>
mMonitor
.
Wait
(
)
;
}
}
delete
aInstance
;
}
void
SandboxTestingParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
MOZ_RELEASE_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
SandboxTestingParent
:
:
RecvReportTestResults
(
const
nsCString
&
testName
bool
passed
const
nsCString
&
resultMessage
)
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
SandboxReportTestResults
"
[
=
]
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_RELEASE_ASSERT
(
observerService
)
;
nsCString
passedStr
(
passed
?
"
true
"
_ns
:
"
false
"
_ns
)
;
nsString
json
;
json
+
=
u
"
{
\
"
testid
\
"
:
\
"
"
_ns
+
NS_ConvertUTF8toUTF16
(
testName
)
+
u
"
\
"
\
"
passed
\
"
:
"
_ns
+
NS_ConvertUTF8toUTF16
(
passedStr
)
+
u
"
\
"
message
\
"
:
\
"
"
_ns
+
NS_ConvertUTF8toUTF16
(
resultMessage
)
+
u
"
\
"
}
"
_ns
;
observerService
-
>
NotifyObservers
(
nullptr
"
sandbox
-
test
-
result
"
json
.
BeginReading
(
)
)
;
}
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
SandboxTestingParent
:
:
RecvTestCompleted
(
)
{
Unused
<
<
SendShutDown
(
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
SandboxReportTestResults
"
[
]
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_RELEASE_ASSERT
(
observerService
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
sandbox
-
test
-
done
"
0
)
;
}
)
)
;
return
IPC_OK
(
)
;
}
}
