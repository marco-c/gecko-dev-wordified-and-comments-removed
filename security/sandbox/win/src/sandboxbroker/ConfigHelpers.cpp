#
include
"
ConfigHelpers
.
h
"
#
include
<
windows
.
h
>
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
sandbox
/
win
/
src
/
policy_engine_opcodes
.
h
"
namespace
mozilla
{
extern
LazyLogModule
sSandboxBrokerLog
;
#
define
LOG_E
(
.
.
.
)
MOZ_LOG
(
sSandboxBrokerLog
LogLevel
:
:
Error
(
__VA_ARGS__
)
)
#
define
LOG_W
(
.
.
.
)
MOZ_LOG
(
sSandboxBrokerLog
LogLevel
:
:
Warning
(
__VA_ARGS__
)
)
namespace
sandboxing
{
SizeTrackingConfig
:
:
SizeTrackingConfig
(
sandbox
:
:
TargetConfig
*
aConfig
int32_t
aStoragePages
)
:
mConfig
(
aConfig
)
{
MOZ_ASSERT
(
mConfig
)
;
MOZ_ASSERT
(
aStoragePages
<
=
14
)
;
constexpr
int32_t
kOneMemPage
=
4096
;
mRemainingSize
=
kOneMemPage
*
aStoragePages
;
}
sandbox
:
:
ResultCode
SizeTrackingConfig
:
:
AllowFileAccess
(
sandbox
:
:
FileSemantics
aSemantics
const
wchar_t
*
aPattern
)
{
auto
patternRuleSize
=
(
wcslen
(
aPattern
)
+
4
)
*
sizeof
(
wchar_t
)
;
int32_t
requiredSize
;
constexpr
auto
opcodeSize
=
sizeof
(
sandbox
:
:
PolicyOpcode
)
;
switch
(
aSemantics
)
{
case
sandbox
:
:
FileSemantics
:
:
kAllowAny
:
requiredSize
=
(
patternRuleSize
*
5
)
+
(
opcodeSize
*
10
)
;
break
;
case
sandbox
:
:
FileSemantics
:
:
kAllowReadonly
:
requiredSize
=
(
patternRuleSize
*
4
)
+
(
opcodeSize
*
12
)
;
break
;
case
sandbox
:
:
FileSemantics
:
:
kAllowQuery
:
requiredSize
=
(
patternRuleSize
*
2
)
+
(
opcodeSize
*
4
)
;
break
;
default
:
MOZ_CRASH
(
"
Unknown
FileSemantics
"
)
;
}
if
(
requiredSize
>
mRemainingSize
)
{
return
sandbox
:
:
SBOX_ERROR_NO_SPACE
;
}
mRemainingSize
-
=
requiredSize
;
return
mConfig
-
>
AllowFileAccess
(
aSemantics
aPattern
)
;
}
UserFontConfigHelper
:
:
UserFontConfigHelper
(
const
wchar_t
*
aUserFontKeyPath
const
nsString
&
aWinUserProfile
const
nsString
&
aLocalAppData
)
:
mWinUserProfile
(
aWinUserProfile
)
mLocalAppData
(
aLocalAppData
)
{
LSTATUS
lStatus
=
:
:
RegOpenKeyExW
(
HKEY_CURRENT_USER
aUserFontKeyPath
0
KEY_QUERY_VALUE
&
mUserFontKey
)
;
if
(
lStatus
!
=
ERROR_SUCCESS
)
{
mUserFontKey
=
nullptr
;
}
}
UserFontConfigHelper
:
:
~
UserFontConfigHelper
(
)
{
if
(
mUserFontKey
)
{
:
:
RegCloseKey
(
mUserFontKey
)
;
}
}
void
UserFontConfigHelper
:
:
AddRules
(
SizeTrackingConfig
&
aConfig
)
const
{
nsAutoString
windowsUserFontDir
(
mLocalAppData
)
;
windowsUserFontDir
+
=
uR
"
(
\
Microsoft
\
Windows
\
Fonts
\
*
)
"
_ns
;
auto
result
=
aConfig
.
AllowFileAccess
(
sandbox
:
:
FileSemantics
:
:
kAllowReadonly
windowsUserFontDir
.
getW
(
)
)
;
if
(
result
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
NS_ERROR
(
"
Failed
to
add
Windows
user
font
dir
policy
rule
.
"
)
;
LOG_E
(
"
Failed
(
ResultCode
%
d
)
to
add
read
access
to
:
%
S
"
result
windowsUserFontDir
.
getW
(
)
)
;
}
if
(
!
mUserFontKey
)
{
return
;
}
windowsUserFontDir
.
SetLength
(
windowsUserFontDir
.
Length
(
)
-
1
)
;
nsAutoString
winUserProfile
(
mWinUserProfile
)
;
winUserProfile
+
=
L
'
\
\
'
;
Vector
<
nsString
>
nonUserDirFonts
;
for
(
DWORD
valueIndex
=
0
;
;
+
+
valueIndex
)
{
DWORD
keyType
;
wchar_t
name
[
1024
]
;
wchar_t
data
[
2048
]
;
auto
*
dataAsBytes
=
reinterpret_cast
<
LPBYTE
>
(
data
)
;
DWORD
nameLength
=
std
:
:
size
(
name
)
;
DWORD
dataSizeInBytes
=
sizeof
(
data
)
-
sizeof
(
wchar_t
)
;
LSTATUS
lStatus
=
:
:
RegEnumValueW
(
mUserFontKey
valueIndex
name
&
nameLength
NULL
&
keyType
dataAsBytes
&
dataSizeInBytes
)
;
if
(
lStatus
=
=
ERROR_NO_MORE_ITEMS
)
{
break
;
}
if
(
lStatus
!
=
ERROR_SUCCESS
)
{
continue
;
}
if
(
keyType
!
=
REG_SZ
)
{
continue
;
}
auto
dataSizeInWChars
=
dataSizeInBytes
/
sizeof
(
wchar_t
)
;
if
(
dataSizeInWChars
<
2
)
{
continue
;
}
if
(
data
[
dataSizeInWChars
-
1
]
=
=
L
'
\
0
'
)
{
-
-
dataSizeInWChars
;
}
else
{
data
[
dataSizeInWChars
]
=
L
'
\
0
'
;
}
if
(
data
[
dataSizeInWChars
-
1
]
=
=
L
'
\
\
'
)
{
continue
;
}
if
(
dataSizeInWChars
<
winUserProfile
.
Length
(
)
|
|
!
winUserProfile
.
Equals
(
nsDependentSubstring
(
data
winUserProfile
.
Length
(
)
)
nsCaseInsensitiveStringComparator
)
)
{
Unused
<
<
nonUserDirFonts
.
emplaceBack
(
data
dataSizeInWChars
)
;
continue
;
}
if
(
dataSizeInWChars
>
windowsUserFontDir
.
Length
(
)
&
&
windowsUserFontDir
.
Equals
(
nsDependentSubstring
(
data
windowsUserFontDir
.
Length
(
)
)
nsCaseInsensitiveStringComparator
)
)
{
continue
;
}
result
=
aConfig
.
AllowFileAccess
(
sandbox
:
:
FileSemantics
:
:
kAllowReadonly
data
)
;
if
(
result
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
NS_WARNING
(
"
Failed
to
add
specific
user
font
policy
rule
.
"
)
;
LOG_W
(
"
Failed
(
ResultCode
%
d
)
to
add
read
access
to
:
%
S
"
result
data
)
;
if
(
result
=
=
sandbox
:
:
SBOX_ERROR_NO_SPACE
)
{
return
;
}
}
}
for
(
const
auto
&
fontPath
:
nonUserDirFonts
)
{
result
=
aConfig
.
AllowFileAccess
(
sandbox
:
:
FileSemantics
:
:
kAllowReadonly
fontPath
.
getW
(
)
)
;
if
(
result
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
NS_WARNING
(
"
Failed
to
add
specific
user
font
policy
rule
.
"
)
;
LOG_W
(
"
Failed
(
ResultCode
%
d
)
to
add
read
access
to
:
%
S
"
result
fontPath
.
getW
(
)
)
;
if
(
result
=
=
sandbox
:
:
SBOX_ERROR_NO_SPACE
)
{
return
;
}
}
}
}
}
}
