#
ifndef
__SECURITY_SANDBOX_SANDBOXBROKER_H__
#
define
__SECURITY_SANDBOX_SANDBOXBROKER_H__
#
include
<
stdint
.
h
>
#
include
<
windows
.
h
>
#
include
"
nsXULAppAPI
.
h
"
namespace
sandbox
{
class
BrokerServices
;
class
TargetPolicy
;
}
namespace
mozilla
{
class
SandboxBroker
{
public
:
SandboxBroker
(
)
;
static
void
Initialize
(
sandbox
:
:
BrokerServices
*
aBrokerServices
)
;
static
void
GeckoDependentInitialize
(
)
;
bool
LaunchApp
(
const
wchar_t
*
aPath
const
wchar_t
*
aArguments
GeckoProcessType
aProcessType
const
bool
aEnableLogging
void
*
*
aProcessHandle
)
;
virtual
~
SandboxBroker
(
)
;
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
void
SetSecurityLevelForContentProcess
(
int32_t
aSandboxLevel
bool
aIsFileProcess
)
;
#
endif
void
SetSecurityLevelForGPUProcess
(
int32_t
aSandboxLevel
)
;
bool
SetSecurityLevelForPluginProcess
(
int32_t
aSandboxLevel
)
;
enum
SandboxLevel
{
LockDown
Restricted
}
;
bool
SetSecurityLevelForGMPlugin
(
SandboxLevel
aLevel
)
;
bool
AllowReadFile
(
wchar_t
const
*
file
)
;
bool
AddTargetPeer
(
HANDLE
aPeerProcess
)
;
void
ApplyLoggingPolicy
(
)
;
private
:
static
sandbox
:
:
BrokerServices
*
sBrokerService
;
static
bool
sRunningFromNetworkDrive
;
sandbox
:
:
TargetPolicy
*
mPolicy
;
}
;
}
#
endif
