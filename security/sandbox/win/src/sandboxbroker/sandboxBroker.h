#
ifndef
__SECURITY_SANDBOX_SANDBOXBROKER_H__
#
define
__SECURITY_SANDBOX_SANDBOXBROKER_H__
#
include
<
stdint
.
h
>
#
include
<
windows
.
h
>
#
include
"
build
/
build_config
.
h
"
#
include
"
mozilla
/
ipc
/
EnvironmentMap
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
sandbox
{
class
BrokerServices
;
class
TargetPolicy
;
}
namespace
mozilla
{
class
AbstractSandboxBroker
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AbstractSandboxBroker
)
static
AbstractSandboxBroker
*
Create
(
GeckoProcessType
aProcessType
)
;
virtual
void
Shutdown
(
)
=
0
;
virtual
bool
LaunchApp
(
const
wchar_t
*
aPath
const
wchar_t
*
aArguments
base
:
:
EnvironmentMap
&
aEnvironment
GeckoProcessType
aProcessType
const
bool
aEnableLogging
void
*
*
aProcessHandle
)
=
0
;
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
virtual
void
SetSecurityLevelForContentProcess
(
int32_t
aSandboxLevel
bool
aIsFileProcess
)
=
0
;
#
endif
virtual
void
SetSecurityLevelForGPUProcess
(
int32_t
aSandboxLevel
)
=
0
;
virtual
bool
SetSecurityLevelForRDDProcess
(
)
=
0
;
virtual
bool
SetSecurityLevelForPluginProcess
(
int32_t
aSandboxLevel
)
=
0
;
enum
SandboxLevel
{
LockDown
Restricted
}
;
virtual
bool
SetSecurityLevelForGMPlugin
(
SandboxLevel
aLevel
)
=
0
;
virtual
bool
AllowReadFile
(
wchar_t
const
*
file
)
=
0
;
virtual
void
AddHandleToShare
(
HANDLE
aHandle
)
=
0
;
protected
:
virtual
~
AbstractSandboxBroker
(
)
{
}
}
;
class
SandboxBroker
:
public
AbstractSandboxBroker
{
public
:
SandboxBroker
(
)
;
static
void
Initialize
(
sandbox
:
:
BrokerServices
*
aBrokerServices
)
;
void
Shutdown
(
)
override
{
}
static
void
GeckoDependentInitialize
(
)
;
bool
LaunchApp
(
const
wchar_t
*
aPath
const
wchar_t
*
aArguments
base
:
:
EnvironmentMap
&
aEnvironment
GeckoProcessType
aProcessType
const
bool
aEnableLogging
void
*
*
aProcessHandle
)
override
;
virtual
~
SandboxBroker
(
)
;
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
void
SetSecurityLevelForContentProcess
(
int32_t
aSandboxLevel
bool
aIsFileProcess
)
override
;
#
endif
void
SetSecurityLevelForGPUProcess
(
int32_t
aSandboxLevel
)
override
;
bool
SetSecurityLevelForRDDProcess
(
)
override
;
bool
SetSecurityLevelForPluginProcess
(
int32_t
aSandboxLevel
)
override
;
bool
SetSecurityLevelForGMPlugin
(
SandboxLevel
aLevel
)
override
;
bool
AllowReadFile
(
wchar_t
const
*
file
)
override
;
static
bool
AddTargetPeer
(
HANDLE
aPeerProcess
)
;
void
AddHandleToShare
(
HANDLE
aHandle
)
override
;
void
ApplyLoggingPolicy
(
)
;
private
:
static
sandbox
:
:
BrokerServices
*
sBrokerService
;
static
bool
sRunningFromNetworkDrive
;
sandbox
:
:
TargetPolicy
*
mPolicy
;
}
;
}
#
endif
