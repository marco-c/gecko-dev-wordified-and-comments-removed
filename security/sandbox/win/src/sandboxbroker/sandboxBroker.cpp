#
include
"
sandboxBroker
.
h
"
#
include
"
base
/
win
/
windows_version
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
NSPRLogModulesParser
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox
.
h
"
#
include
"
sandbox
/
win
/
src
/
security_level
.
h
"
namespace
mozilla
{
sandbox
:
:
BrokerServices
*
SandboxBroker
:
:
sBrokerService
=
nullptr
;
static
LazyLogModule
sSandboxBrokerLog
(
"
SandboxBroker
"
)
;
#
define
LOG_E
(
.
.
.
)
MOZ_LOG
(
sSandboxBrokerLog
LogLevel
:
:
Error
(
__VA_ARGS__
)
)
#
define
LOG_W
(
.
.
.
)
MOZ_LOG
(
sSandboxBrokerLog
LogLevel
:
:
Warning
(
__VA_ARGS__
)
)
void
SandboxBroker
:
:
Initialize
(
sandbox
:
:
BrokerServices
*
aBrokerServices
)
{
sBrokerService
=
aBrokerServices
;
}
SandboxBroker
:
:
SandboxBroker
(
)
{
if
(
sBrokerService
)
{
mPolicy
=
sBrokerService
-
>
CreatePolicy
(
)
;
}
else
{
mPolicy
=
nullptr
;
}
}
bool
SandboxBroker
:
:
LaunchApp
(
const
wchar_t
*
aPath
const
wchar_t
*
aArguments
const
bool
aEnableLogging
void
*
*
aProcessHandle
)
{
if
(
!
sBrokerService
|
|
!
mPolicy
)
{
return
false
;
}
mPolicy
-
>
SetStdoutHandle
(
:
:
GetStdHandle
(
STD_OUTPUT_HANDLE
)
)
;
mPolicy
-
>
SetStderrHandle
(
:
:
GetStdHandle
(
STD_ERROR_HANDLE
)
)
;
if
(
aEnableLogging
)
{
ApplyLoggingPolicy
(
)
;
}
#
if
defined
(
DEBUG
)
wchar_t
tempPath
[
MAX_PATH
+
2
]
;
uint32_t
pathLen
=
:
:
GetTempPathW
(
MAX_PATH
+
1
tempPath
)
;
if
(
pathLen
>
0
)
{
tempPath
[
pathLen
]
=
L
'
*
'
;
tempPath
[
pathLen
+
1
]
=
L
'
\
0
'
;
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
tempPath
)
;
}
#
endif
wchar_t
const
*
logFileName
=
_wgetenv
(
L
"
MOZ_LOG_FILE
"
)
;
char
const
*
logFileModules
=
getenv
(
"
MOZ_LOG
"
)
;
if
(
logFileName
&
&
logFileModules
)
{
bool
rotate
=
false
;
NSPRLogModulesParser
(
logFileModules
[
&
rotate
]
(
const
char
*
aName
LogLevel
aLevel
int32_t
aValue
)
mutable
{
if
(
strcmp
(
aName
"
rotate
"
)
=
=
0
)
{
rotate
=
aValue
>
0
;
}
}
)
;
if
(
rotate
)
{
wchar_t
logFileNameWild
[
MAX_PATH
+
2
]
;
_snwprintf
(
logFileNameWild
sizeof
(
logFileNameWild
)
L
"
%
s
.
?
"
logFileName
)
;
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
logFileNameWild
)
;
}
else
{
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
logFileName
)
;
}
}
logFileName
=
_wgetenv
(
L
"
NSPR_LOG_FILE
"
)
;
if
(
logFileName
)
{
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
logFileName
)
;
}
PROCESS_INFORMATION
targetInfo
=
{
0
}
;
sandbox
:
:
ResultCode
result
;
sandbox
:
:
ResultCode
last_warning
=
sandbox
:
:
SBOX_ALL_OK
;
DWORD
last_error
=
ERROR_SUCCESS
;
result
=
sBrokerService
-
>
SpawnTarget
(
aPath
aArguments
mPolicy
&
last_warning
&
last_error
&
targetInfo
)
;
if
(
sandbox
:
:
SBOX_ALL_OK
!
=
result
)
{
LOG_E
(
"
Failed
(
ResultCode
%
d
)
to
SpawnTarget
with
last_error
=
%
d
last_warning
=
%
d
"
result
last_error
last_warning
)
;
return
false
;
}
else
if
(
sandbox
:
:
SBOX_ALL_OK
!
=
last_warning
)
{
LOG_W
(
"
Warning
on
SpawnTarget
with
last_error
=
%
d
last_warning
=
%
d
"
last_error
last_warning
)
;
}
ResumeThread
(
targetInfo
.
hThread
)
;
CloseHandle
(
targetInfo
.
hThread
)
;
*
aProcessHandle
=
targetInfo
.
hProcess
;
return
true
;
}
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
void
SandboxBroker
:
:
SetSecurityLevelForContentProcess
(
int32_t
aSandboxLevel
base
:
:
ChildPrivileges
aPrivs
)
{
MOZ_RELEASE_ASSERT
(
mPolicy
"
mPolicy
must
be
set
before
this
call
.
"
)
;
sandbox
:
:
JobLevel
jobLevel
;
sandbox
:
:
TokenLevel
accessTokenLevel
;
sandbox
:
:
IntegrityLevel
initialIntegrityLevel
;
sandbox
:
:
IntegrityLevel
delayedIntegrityLevel
;
MOZ_RELEASE_ASSERT
(
aSandboxLevel
>
=
1
"
Should
not
be
called
with
aSandboxLevel
<
1
"
)
;
if
(
aSandboxLevel
>
=
20
)
{
jobLevel
=
sandbox
:
:
JOB_LOCKDOWN
;
accessTokenLevel
=
sandbox
:
:
USER_LOCKDOWN
;
initialIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_UNTRUSTED
;
}
else
if
(
aSandboxLevel
>
=
10
)
{
jobLevel
=
sandbox
:
:
JOB_RESTRICTED
;
accessTokenLevel
=
sandbox
:
:
USER_LIMITED
;
initialIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
}
else
if
(
aSandboxLevel
>
=
2
)
{
jobLevel
=
sandbox
:
:
JOB_INTERACTIVE
;
accessTokenLevel
=
sandbox
:
:
USER_INTERACTIVE
;
initialIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
}
else
if
(
aSandboxLevel
=
=
1
)
{
jobLevel
=
sandbox
:
:
JOB_NONE
;
accessTokenLevel
=
sandbox
:
:
USER_NON_ADMIN
;
initialIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
}
if
(
aPrivs
=
=
base
:
:
ChildPrivileges
:
:
PRIVILEGES_FILEREAD
)
{
if
(
accessTokenLevel
<
sandbox
:
:
USER_NON_ADMIN
)
{
accessTokenLevel
=
sandbox
:
:
USER_NON_ADMIN
;
}
if
(
delayedIntegrityLevel
>
sandbox
:
:
INTEGRITY_LEVEL_LOW
)
{
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
}
}
sandbox
:
:
ResultCode
result
=
mPolicy
-
>
SetJobLevel
(
jobLevel
0
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
Setting
job
level
failed
have
you
set
memory
limit
when
jobLevel
=
=
JOB_NONE
?
"
)
;
sandbox
:
:
TokenLevel
initialAccessTokenLevel
=
(
accessTokenLevel
=
=
sandbox
:
:
USER_UNPROTECTED
|
|
accessTokenLevel
=
=
sandbox
:
:
USER_NON_ADMIN
)
?
sandbox
:
:
USER_UNPROTECTED
:
sandbox
:
:
USER_RESTRICTED_SAME_ACCESS
;
result
=
mPolicy
-
>
SetTokenLevel
(
initialAccessTokenLevel
accessTokenLevel
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
Lockdown
level
cannot
be
USER_UNPROTECTED
or
USER_LAST
if
initial
level
was
USER_RESTRICTED_SAME_ACCESS
"
)
;
result
=
mPolicy
-
>
SetIntegrityLevel
(
initialIntegrityLevel
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
SetIntegrityLevel
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
SetDelayedIntegrityLevel
(
delayedIntegrityLevel
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
SetDelayedIntegrityLevel
should
never
fail
what
happened
?
"
)
;
if
(
aSandboxLevel
>
2
)
{
result
=
mPolicy
-
>
SetAlternateDesktop
(
true
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
Failed
to
create
alternate
desktop
for
sandbox
.
"
)
;
}
sandbox
:
:
MitigationFlags
mitigations
=
sandbox
:
:
MITIGATION_BOTTOM_UP_ASLR
|
sandbox
:
:
MITIGATION_HEAP_TERMINATE
|
sandbox
:
:
MITIGATION_SEHOP
|
sandbox
:
:
MITIGATION_DEP_NO_ATL_THUNK
|
sandbox
:
:
MITIGATION_DEP
;
result
=
mPolicy
-
>
SetProcessMitigations
(
mitigations
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
Invalid
flags
for
SetProcessMitigations
.
"
)
;
mitigations
=
sandbox
:
:
MITIGATION_STRICT_HANDLE_CHECKS
|
sandbox
:
:
MITIGATION_DLL_SEARCH_ORDER
;
result
=
mPolicy
-
>
SetDelayedProcessMitigations
(
mitigations
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
Invalid
flags
for
SetDelayedProcessMitigations
.
"
)
;
if
(
aSandboxLevel
=
=
1
|
|
aPrivs
=
=
base
:
:
ChildPrivileges
:
:
PRIVILEGES_FILEREAD
)
{
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_READONLY
L
"
*
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
}
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
L
"
\
\
?
?
\
\
pipe
\
\
chrome
.
*
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
L
"
\
\
?
?
\
\
pipe
\
\
gecko
-
crash
-
server
-
pipe
.
*
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_BROKER
L
"
File
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_BROKER
L
"
Section
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_ANY
L
"
Section
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_BROKER
L
"
Semaphore
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_ANY
L
"
Semaphore
"
)
;
MOZ_RELEASE_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
}
#
endif
#
define
SANDBOX_ENSURE_SUCCESS
(
result
message
)
\
do
{
\
MOZ_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
message
)
;
\
if
(
sandbox
:
:
SBOX_ALL_OK
!
=
result
)
\
return
false
;
\
}
while
(
0
)
bool
SandboxBroker
:
:
SetSecurityLevelForPluginProcess
(
int32_t
aSandboxLevel
)
{
if
(
!
mPolicy
)
{
return
false
;
}
sandbox
:
:
JobLevel
jobLevel
;
sandbox
:
:
TokenLevel
accessTokenLevel
;
sandbox
:
:
IntegrityLevel
initialIntegrityLevel
;
sandbox
:
:
IntegrityLevel
delayedIntegrityLevel
;
if
(
aSandboxLevel
>
2
)
{
jobLevel
=
sandbox
:
:
JOB_UNPROTECTED
;
accessTokenLevel
=
sandbox
:
:
USER_LIMITED
;
initialIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
}
else
if
(
aSandboxLevel
=
=
2
)
{
jobLevel
=
sandbox
:
:
JOB_UNPROTECTED
;
accessTokenLevel
=
sandbox
:
:
USER_INTERACTIVE
;
initialIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_LOW
;
}
else
{
jobLevel
=
sandbox
:
:
JOB_NONE
;
accessTokenLevel
=
sandbox
:
:
USER_NON_ADMIN
;
initialIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_MEDIUM
;
delayedIntegrityLevel
=
sandbox
:
:
INTEGRITY_LEVEL_MEDIUM
;
}
sandbox
:
:
ResultCode
result
=
mPolicy
-
>
SetJobLevel
(
jobLevel
0
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
Setting
job
level
failed
have
you
set
memory
limit
when
jobLevel
=
=
JOB_NONE
?
"
)
;
result
=
mPolicy
-
>
SetTokenLevel
(
sandbox
:
:
USER_RESTRICTED_SAME_ACCESS
accessTokenLevel
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
Lockdown
level
cannot
be
USER_UNPROTECTED
or
USER_LAST
if
initial
level
was
USER_RESTRICTED_SAME_ACCESS
"
)
;
result
=
mPolicy
-
>
SetIntegrityLevel
(
initialIntegrityLevel
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
SetIntegrityLevel
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
SetDelayedIntegrityLevel
(
delayedIntegrityLevel
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
SetDelayedIntegrityLevel
should
never
fail
what
happened
?
"
)
;
sandbox
:
:
MitigationFlags
mitigations
=
sandbox
:
:
MITIGATION_BOTTOM_UP_ASLR
|
sandbox
:
:
MITIGATION_HEAP_TERMINATE
|
sandbox
:
:
MITIGATION_SEHOP
|
sandbox
:
:
MITIGATION_DEP_NO_ATL_THUNK
|
sandbox
:
:
MITIGATION_DEP
;
result
=
mPolicy
-
>
SetProcessMitigations
(
mitigations
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
Invalid
flags
for
SetProcessMitigations
.
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
L
"
\
\
?
?
\
\
pipe
\
\
chrome
.
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
L
"
\
\
?
?
\
\
pipe
\
\
gecko
-
crash
-
server
-
pipe
.
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_ANY
L
"
Section
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_BROKER
L
"
Section
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
L
"
\
\
?
?
\
\
pipe
\
\
jpi2_pid
*
_pipe
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_ANY
L
"
HKEY_CURRENT_USER
\
\
Software
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
Explorer
\
\
ComDlg32
\
\
OpenSavePidlMRU
\
\
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_ANY
L
"
HKEY_CURRENT_USER
\
\
Software
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
Explorer
\
\
ComDlg32
\
\
LastVisitedPidlMRULegacy
\
\
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
return
true
;
}
bool
SandboxBroker
:
:
SetSecurityLevelForGMPlugin
(
SandboxLevel
aLevel
)
{
if
(
!
mPolicy
)
{
return
false
;
}
auto
result
=
mPolicy
-
>
SetJobLevel
(
sandbox
:
:
JOB_LOCKDOWN
0
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
SetJobLevel
should
never
fail
with
these
arguments
what
happened
?
"
)
;
auto
level
=
(
aLevel
=
=
Restricted
)
?
sandbox
:
:
USER_RESTRICTED
:
sandbox
:
:
USER_LOCKDOWN
;
result
=
mPolicy
-
>
SetTokenLevel
(
sandbox
:
:
USER_RESTRICTED_SAME_ACCESS
level
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
SetTokenLevel
should
never
fail
with
these
arguments
what
happened
?
"
)
;
result
=
mPolicy
-
>
SetAlternateDesktop
(
true
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
Failed
to
create
alternate
desktop
for
sandbox
.
"
)
;
result
=
mPolicy
-
>
SetIntegrityLevel
(
sandbox
:
:
INTEGRITY_LEVEL_LOW
)
;
MOZ_ASSERT
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
"
SetIntegrityLevel
should
never
fail
with
these
arguments
what
happened
?
"
)
;
result
=
mPolicy
-
>
SetDelayedIntegrityLevel
(
sandbox
:
:
INTEGRITY_LEVEL_UNTRUSTED
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
SetIntegrityLevel
should
never
fail
with
these
arguments
what
happened
?
"
)
;
sandbox
:
:
MitigationFlags
mitigations
=
sandbox
:
:
MITIGATION_BOTTOM_UP_ASLR
|
sandbox
:
:
MITIGATION_HEAP_TERMINATE
|
sandbox
:
:
MITIGATION_SEHOP
|
sandbox
:
:
MITIGATION_DEP_NO_ATL_THUNK
|
sandbox
:
:
MITIGATION_DEP
;
result
=
mPolicy
-
>
SetProcessMitigations
(
mitigations
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
Invalid
flags
for
SetProcessMitigations
.
"
)
;
mitigations
=
sandbox
:
:
MITIGATION_STRICT_HANDLE_CHECKS
|
sandbox
:
:
MITIGATION_DLL_SEARCH_ORDER
;
result
=
mPolicy
-
>
SetDelayedProcessMitigations
(
mitigations
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
Invalid
flags
for
SetDelayedProcessMitigations
.
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
L
"
\
\
?
?
\
\
pipe
\
\
chrome
.
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
L
"
\
\
?
?
\
\
pipe
\
\
gecko
-
crash
-
server
-
pipe
.
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
#
ifdef
DEBUG
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_SYNC
sandbox
:
:
TargetPolicy
:
:
EVENTS_ALLOW_ANY
L
"
ChromeIPCLog
.
*
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
#
endif
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_CURRENT_USER
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_CURRENT_USER
\
\
Control
Panel
\
\
Desktop
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_CURRENT_USER
\
\
Control
Panel
\
\
Desktop
\
\
LanguageConfiguration
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_LOCAL_MACHINE
\
\
SOFTWARE
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
SideBySide
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_LOCAL_MACHINE
\
\
SOFTWARE
\
\
Policies
\
\
Microsoft
\
\
MUI
\
\
Settings
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_CURRENT_USER
\
\
Software
\
\
Policies
\
\
Microsoft
\
\
Control
Panel
\
\
Desktop
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_CURRENT_USER
\
\
Control
Panel
\
\
Desktop
\
\
PreferredUILanguages
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_LOCAL_MACHINE
\
\
SOFTWARE
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
SideBySide
\
\
PreferExternalManifest
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_READONLY
L
"
\
\
Device
\
\
SrpDevice
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_LOCAL_MACHINE
\
\
System
\
\
CurrentControlSet
\
\
Control
\
\
Srp
\
\
GP
\
\
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_LOCAL_MACHINE
\
\
System
\
\
CurrentControlSet
\
\
Control
\
\
Srp
\
\
\
\
GP
\
\
"
)
;
SANDBOX_ENSURE_SUCCESS
(
result
"
With
these
static
arguments
AddRule
should
never
fail
what
happened
?
"
)
;
return
true
;
}
#
undef
SANDBOX_ENSURE_SUCCESS
bool
SandboxBroker
:
:
AllowReadFile
(
wchar_t
const
*
file
)
{
if
(
!
mPolicy
)
{
return
false
;
}
auto
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_READONLY
file
)
;
if
(
sandbox
:
:
SBOX_ALL_OK
!
=
result
)
{
LOG_E
(
"
Failed
(
ResultCode
%
d
)
to
add
read
access
to
:
%
S
"
result
file
)
;
return
false
;
}
return
true
;
}
bool
SandboxBroker
:
:
AllowReadWriteFile
(
wchar_t
const
*
file
)
{
if
(
!
mPolicy
)
{
return
false
;
}
auto
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_ANY
file
)
;
if
(
sandbox
:
:
SBOX_ALL_OK
!
=
result
)
{
LOG_E
(
"
Failed
(
ResultCode
%
d
)
to
add
read
/
write
access
to
:
%
S
"
result
file
)
;
return
false
;
}
return
true
;
}
bool
SandboxBroker
:
:
AllowDirectory
(
wchar_t
const
*
dir
)
{
if
(
!
mPolicy
)
{
return
false
;
}
auto
result
=
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_FILES
sandbox
:
:
TargetPolicy
:
:
FILES_ALLOW_DIR_ANY
dir
)
;
if
(
sandbox
:
:
SBOX_ALL_OK
!
=
result
)
{
LOG_E
(
"
Failed
(
ResultCode
%
d
)
to
add
directory
access
to
:
%
S
"
result
dir
)
;
return
false
;
}
return
true
;
}
bool
SandboxBroker
:
:
AddTargetPeer
(
HANDLE
aPeerProcess
)
{
if
(
!
sBrokerService
)
{
return
false
;
}
sandbox
:
:
ResultCode
result
=
sBrokerService
-
>
AddTargetPeer
(
aPeerProcess
)
;
return
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
)
;
}
void
SandboxBroker
:
:
ApplyLoggingPolicy
(
)
{
MOZ_ASSERT
(
mPolicy
)
;
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_NAMED_PIPES
sandbox
:
:
TargetPolicy
:
:
NAMEDPIPES_ALLOW_ANY
L
"
dummy
"
)
;
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_PROCESS
sandbox
:
:
TargetPolicy
:
:
PROCESS_MIN_EXEC
L
"
dummy
"
)
;
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_REGISTRY
sandbox
:
:
TargetPolicy
:
:
REG_ALLOW_READONLY
L
"
HKEY_CURRENT_USER
\
\
dummy
"
)
;
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_SYNC
sandbox
:
:
TargetPolicy
:
:
EVENTS_ALLOW_READONLY
L
"
dummy
"
)
;
mPolicy
-
>
AddRule
(
sandbox
:
:
TargetPolicy
:
:
SUBSYS_HANDLES
sandbox
:
:
TargetPolicy
:
:
HANDLES_DUP_BROKER
L
"
dummy
"
)
;
}
SandboxBroker
:
:
~
SandboxBroker
(
)
{
if
(
mPolicy
)
{
mPolicy
-
>
Release
(
)
;
mPolicy
=
nullptr
;
}
}
}
