#
ifndef
__SECURITY_SANDBOX_SANDBOXTARGET_H__
#
define
__SECURITY_SANDBOX_SANDBOXTARGET_H__
#
include
<
functional
>
#
include
<
list
>
#
include
<
windows
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
namespace
sandbox
{
class
TargetServices
;
}
namespace
mozilla
{
class
SandboxTarget
{
public
:
static
SandboxTarget
*
Instance
(
)
;
void
SetTargetServices
(
sandbox
:
:
TargetServices
*
aTargetServices
)
{
MOZ_ASSERT
(
aTargetServices
)
;
MOZ_ASSERT
(
!
mTargetServices
"
Sandbox
TargetServices
must
only
be
set
once
.
"
)
;
mTargetServices
=
aTargetServices
;
}
template
<
typename
CallbackT
>
void
RegisterSandboxStartCallback
(
CallbackT
aCallback
)
{
mStartObservers
.
push_back
(
std
:
:
forward
<
CallbackT
>
(
aCallback
)
)
;
}
void
StartSandbox
(
)
;
bool
BrokerDuplicateHandle
(
HANDLE
aSourceHandle
DWORD
aTargetProcessId
HANDLE
*
aTargetHandle
DWORD
aDesiredAccess
DWORD
aOptions
)
;
protected
:
SandboxTarget
(
)
:
mTargetServices
(
nullptr
)
{
}
sandbox
:
:
TargetServices
*
mTargetServices
;
private
:
void
NotifyStartObservers
(
)
;
std
:
:
list
<
std
:
:
function
<
void
(
)
>
>
mStartObservers
;
}
;
}
#
endif
