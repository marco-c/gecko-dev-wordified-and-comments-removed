#
ifndef
__SECURITY_SANDBOX_SANDBOXTARGET_H__
#
define
__SECURITY_SANDBOX_SANDBOXTARGET_H__
#
include
<
windows
.
h
>
#
include
"
base
/
MissingBasicTypes
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox
.
h
"
#
include
"
sandbox
/
win
/
src
/
target_services
.
h
"
#
ifdef
TARGET_SANDBOX_EXPORTS
#
define
TARGET_SANDBOX_EXPORT
__declspec
(
dllexport
)
#
else
#
define
TARGET_SANDBOX_EXPORT
__declspec
(
dllimport
)
#
endif
namespace
mozilla
{
class
TARGET_SANDBOX_EXPORT
SandboxTarget
{
public
:
static
SandboxTarget
*
Instance
(
)
{
static
SandboxTarget
sb
;
return
&
sb
;
}
void
SetTargetServices
(
sandbox
:
:
TargetServices
*
aTargetServices
)
{
MOZ_ASSERT
(
aTargetServices
)
;
MOZ_ASSERT
(
!
mTargetServices
"
Sandbox
TargetServices
must
only
be
set
once
.
"
)
;
MOZ_ASSERT
(
aTargetServices
-
>
GetState
(
)
-
>
process_state_
>
1
"
Sandbox
TargetServices
must
already
be
initialized
.
"
)
;
mTargetServices
=
aTargetServices
;
}
void
StartSandbox
(
)
{
if
(
mTargetServices
)
{
mTargetServices
-
>
LowerToken
(
)
;
}
}
bool
BrokerDuplicateHandle
(
HANDLE
aSourceHandle
DWORD
aTargetProcessId
HANDLE
*
aTargetHandle
DWORD
aDesiredAccess
DWORD
aOptions
)
{
if
(
!
mTargetServices
)
{
return
false
;
}
sandbox
:
:
ResultCode
result
=
mTargetServices
-
>
DuplicateHandle
(
aSourceHandle
aTargetProcessId
aTargetHandle
aDesiredAccess
aOptions
)
;
return
(
sandbox
:
:
SBOX_ALL_OK
=
=
result
)
;
}
protected
:
SandboxTarget
(
)
:
mTargetServices
(
nullptr
)
{
}
sandbox
:
:
TargetServices
*
mTargetServices
;
}
;
}
#
endif
