#
include
"
SandboxInitialization
.
h
"
#
include
"
base
/
memory
/
ref_counted
.
h
"
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_factory
.
h
"
#
include
"
mozilla
/
sandboxing
/
permissionsService
.
h
"
namespace
mozilla
{
namespace
sandboxing
{
typedef
BOOL
(
WINAPI
*
CloseHandle_func
)
(
HANDLE
hObject
)
;
static
CloseHandle_func
stub_CloseHandle
=
nullptr
;
typedef
BOOL
(
WINAPI
*
DuplicateHandle_func
)
(
HANDLE
hSourceProcessHandle
HANDLE
hSourceHandle
HANDLE
hTargetProcessHandle
LPHANDLE
lpTargetHandle
DWORD
dwDesiredAccess
BOOL
bInheritHandle
DWORD
dwOptions
)
;
static
DuplicateHandle_func
stub_DuplicateHandle
=
nullptr
;
static
BOOL
WINAPI
patched_CloseHandle
(
HANDLE
hObject
)
{
base
:
:
win
:
:
OnHandleBeingClosed
(
hObject
)
;
return
stub_CloseHandle
(
hObject
)
;
}
static
BOOL
WINAPI
patched_DuplicateHandle
(
HANDLE
hSourceProcessHandle
HANDLE
hSourceHandle
HANDLE
hTargetProcessHandle
LPHANDLE
lpTargetHandle
DWORD
dwDesiredAccess
BOOL
bInheritHandle
DWORD
dwOptions
)
{
if
(
(
dwOptions
&
DUPLICATE_CLOSE_SOURCE
)
&
&
(
GetProcessId
(
hSourceProcessHandle
)
=
=
:
:
GetCurrentProcessId
(
)
)
)
{
base
:
:
win
:
:
OnHandleBeingClosed
(
hSourceHandle
)
;
}
return
stub_DuplicateHandle
(
hSourceProcessHandle
hSourceHandle
hTargetProcessHandle
lpTargetHandle
dwDesiredAccess
bInheritHandle
dwOptions
)
;
}
static
WindowsDllInterceptor
Kernel32Intercept
;
static
bool
EnableHandleCloseMonitoring
(
)
{
Kernel32Intercept
.
Init
(
"
kernel32
.
dll
"
)
;
bool
hooked
=
Kernel32Intercept
.
AddHook
(
"
CloseHandle
"
reinterpret_cast
<
intptr_t
>
(
patched_CloseHandle
)
(
void
*
*
)
&
stub_CloseHandle
)
;
if
(
!
hooked
)
{
return
false
;
}
hooked
=
Kernel32Intercept
.
AddHook
(
"
DuplicateHandle
"
reinterpret_cast
<
intptr_t
>
(
patched_DuplicateHandle
)
(
void
*
*
)
&
stub_DuplicateHandle
)
;
if
(
!
hooked
)
{
return
false
;
}
return
true
;
}
static
bool
ShouldDisableHandleVerifier
(
)
{
#
if
defined
(
_X86_
)
&
&
(
defined
(
NIGHTLY_BUILD
)
|
|
defined
(
DEBUG
)
)
return
false
;
#
else
return
!
getenv
(
"
MOZ_ENABLE_HANDLE_VERIFIER
"
)
;
#
endif
}
static
void
InitializeHandleVerifier
(
)
{
if
(
ShouldDisableHandleVerifier
(
)
|
|
!
EnableHandleCloseMonitoring
(
)
)
{
base
:
:
win
:
:
DisableHandleVerifier
(
)
;
}
}
static
sandbox
:
:
TargetServices
*
InitializeTargetServices
(
)
{
sandbox
:
:
TargetServices
*
targetServices
=
sandbox
:
:
SandboxFactory
:
:
GetTargetServices
(
)
;
if
(
!
targetServices
)
{
return
nullptr
;
}
if
(
targetServices
-
>
Init
(
)
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
return
nullptr
;
}
InitializeHandleVerifier
(
)
;
return
targetServices
;
}
sandbox
:
:
TargetServices
*
GetInitializedTargetServices
(
)
{
static
sandbox
:
:
TargetServices
*
sInitializedTargetServices
=
InitializeTargetServices
(
)
;
return
sInitializedTargetServices
;
}
void
LowerSandbox
(
)
{
GetInitializedTargetServices
(
)
-
>
LowerToken
(
)
;
}
static
sandbox
:
:
BrokerServices
*
InitializeBrokerServices
(
)
{
sandbox
:
:
BrokerServices
*
brokerServices
=
sandbox
:
:
SandboxFactory
:
:
GetBrokerServices
(
)
;
if
(
!
brokerServices
)
{
return
nullptr
;
}
if
(
brokerServices
-
>
Init
(
)
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
return
nullptr
;
}
scoped_refptr
<
sandbox
:
:
TargetPolicy
>
policy
=
brokerServices
-
>
CreatePolicy
(
)
;
sandbox
:
:
ResultCode
result
=
policy
-
>
CreateAlternateDesktop
(
true
)
;
InitializeHandleVerifier
(
)
;
return
brokerServices
;
}
sandbox
:
:
BrokerServices
*
GetInitializedBrokerServices
(
)
{
static
sandbox
:
:
BrokerServices
*
sInitializedBrokerServices
=
InitializeBrokerServices
(
)
;
return
sInitializedBrokerServices
;
}
PermissionsService
*
GetPermissionsService
(
)
{
return
PermissionsService
:
:
GetInstance
(
)
;
}
}
}
