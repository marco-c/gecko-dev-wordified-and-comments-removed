#
include
"
SandboxInitialization
.
h
"
#
include
"
base
/
memory
/
ref_counted
.
h
"
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_factory
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
sandboxing
/
permissionsService
.
h
"
#
include
"
mozilla
/
WindowsProcessMitigations
.
h
"
namespace
mozilla
{
namespace
sandboxing
{
typedef
BOOL
(
WINAPI
*
CloseHandle_func
)
(
HANDLE
hObject
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
CloseHandle_func
>
stub_CloseHandle
;
typedef
BOOL
(
WINAPI
*
DuplicateHandle_func
)
(
HANDLE
hSourceProcessHandle
HANDLE
hSourceHandle
HANDLE
hTargetProcessHandle
LPHANDLE
lpTargetHandle
DWORD
dwDesiredAccess
BOOL
bInheritHandle
DWORD
dwOptions
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
DuplicateHandle_func
>
stub_DuplicateHandle
;
static
BOOL
WINAPI
patched_CloseHandle
(
HANDLE
hObject
)
{
base
:
:
win
:
:
OnHandleBeingClosed
(
hObject
)
;
return
stub_CloseHandle
(
hObject
)
;
}
static
BOOL
WINAPI
patched_DuplicateHandle
(
HANDLE
hSourceProcessHandle
HANDLE
hSourceHandle
HANDLE
hTargetProcessHandle
LPHANDLE
lpTargetHandle
DWORD
dwDesiredAccess
BOOL
bInheritHandle
DWORD
dwOptions
)
{
if
(
(
dwOptions
&
DUPLICATE_CLOSE_SOURCE
)
&
&
(
GetProcessId
(
hSourceProcessHandle
)
=
=
:
:
GetCurrentProcessId
(
)
)
)
{
base
:
:
win
:
:
OnHandleBeingClosed
(
hSourceHandle
)
;
}
return
stub_DuplicateHandle
(
hSourceProcessHandle
hSourceHandle
hTargetProcessHandle
lpTargetHandle
dwDesiredAccess
bInheritHandle
dwOptions
)
;
}
typedef
BOOL
(
WINAPI
*
ApiSetQueryApiSetPresence_func
)
(
PCUNICODE_STRING
PBOOLEAN
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
ApiSetQueryApiSetPresence_func
>
stub_ApiSetQueryApiSetPresence
;
static
const
WCHAR
gApiSetNtUserWindowStation
[
]
=
L
"
ext
-
ms
-
win
-
ntuser
-
windowstation
-
l1
-
1
-
0
"
;
static
BOOL
WINAPI
patched_ApiSetQueryApiSetPresence
(
PCUNICODE_STRING
aNamespace
PBOOLEAN
aPresent
)
{
if
(
aNamespace
&
&
aPresent
&
&
!
wcsncmp
(
aNamespace
-
>
Buffer
gApiSetNtUserWindowStation
aNamespace
-
>
Length
/
sizeof
(
WCHAR
)
)
)
{
*
aPresent
=
FALSE
;
return
TRUE
;
}
return
stub_ApiSetQueryApiSetPresence
(
aNamespace
aPresent
)
;
}
static
WindowsDllInterceptor
Kernel32Intercept
;
static
WindowsDllInterceptor
gApiQueryIntercept
;
static
bool
EnableHandleCloseMonitoring
(
)
{
Kernel32Intercept
.
Init
(
"
kernel32
.
dll
"
)
;
bool
hooked
=
stub_CloseHandle
.
Set
(
Kernel32Intercept
"
CloseHandle
"
&
patched_CloseHandle
)
;
if
(
!
hooked
)
{
return
false
;
}
hooked
=
stub_DuplicateHandle
.
Set
(
Kernel32Intercept
"
DuplicateHandle
"
&
patched_DuplicateHandle
)
;
if
(
!
hooked
)
{
return
false
;
}
return
true
;
}
static
void
EnableApiQueryInterception
(
)
{
if
(
!
IsWin32kLockedDown
(
)
)
{
return
;
}
gApiQueryIntercept
.
Init
(
L
"
Api
-
ms
-
win
-
core
-
apiquery
-
l1
-
1
-
0
.
dll
"
)
;
DebugOnly
<
bool
>
hookSetOk
=
stub_ApiSetQueryApiSetPresence
.
Set
(
gApiQueryIntercept
"
ApiSetQueryApiSetPresence
"
&
patched_ApiSetQueryApiSetPresence
)
;
MOZ_ASSERT
(
hookSetOk
)
;
}
static
bool
ShouldDisableHandleVerifier
(
)
{
#
if
defined
(
_X86_
)
&
&
(
defined
(
EARLY_BETA_OR_EARLIER
)
|
|
defined
(
DEBUG
)
)
return
false
;
#
else
return
!
getenv
(
"
MOZ_ENABLE_HANDLE_VERIFIER
"
)
;
#
endif
}
static
void
InitializeHandleVerifier
(
)
{
if
(
ShouldDisableHandleVerifier
(
)
|
|
!
EnableHandleCloseMonitoring
(
)
)
{
base
:
:
win
:
:
DisableHandleVerifier
(
)
;
}
}
static
sandbox
:
:
TargetServices
*
InitializeTargetServices
(
)
{
InitializeHandleVerifier
(
)
;
EnableApiQueryInterception
(
)
;
sandbox
:
:
TargetServices
*
targetServices
=
sandbox
:
:
SandboxFactory
:
:
GetTargetServices
(
)
;
if
(
!
targetServices
)
{
return
nullptr
;
}
if
(
targetServices
-
>
Init
(
)
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
return
nullptr
;
}
return
targetServices
;
}
sandbox
:
:
TargetServices
*
GetInitializedTargetServices
(
)
{
static
sandbox
:
:
TargetServices
*
sInitializedTargetServices
=
InitializeTargetServices
(
)
;
return
sInitializedTargetServices
;
}
void
LowerSandbox
(
)
{
GetInitializedTargetServices
(
)
-
>
LowerToken
(
)
;
}
static
sandbox
:
:
BrokerServices
*
InitializeBrokerServices
(
)
{
InitializeHandleVerifier
(
)
;
sandbox
:
:
BrokerServices
*
brokerServices
=
sandbox
:
:
SandboxFactory
:
:
GetBrokerServices
(
)
;
if
(
!
brokerServices
)
{
return
nullptr
;
}
if
(
brokerServices
-
>
Init
(
)
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
return
nullptr
;
}
scoped_refptr
<
sandbox
:
:
TargetPolicy
>
policy
=
brokerServices
-
>
CreatePolicy
(
)
;
policy
-
>
CreateAlternateDesktop
(
true
)
;
return
brokerServices
;
}
sandbox
:
:
BrokerServices
*
GetInitializedBrokerServices
(
)
{
static
sandbox
:
:
BrokerServices
*
sInitializedBrokerServices
=
InitializeBrokerServices
(
)
;
return
sInitializedBrokerServices
;
}
PermissionsService
*
GetPermissionsService
(
)
{
return
PermissionsService
:
:
GetInstance
(
)
;
}
}
}
