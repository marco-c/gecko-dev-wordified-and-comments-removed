#
include
"
SandboxInitialization
.
h
"
#
include
"
base
/
memory
/
ref_counted
.
h
"
#
include
"
sandbox
/
win
/
src
/
sandbox_factory
.
h
"
#
include
"
mozilla
/
sandboxing
/
permissionsService
.
h
"
namespace
mozilla
{
namespace
sandboxing
{
static
sandbox
:
:
TargetServices
*
InitializeTargetServices
(
)
{
sandbox
:
:
TargetServices
*
targetServices
=
sandbox
:
:
SandboxFactory
:
:
GetTargetServices
(
)
;
if
(
!
targetServices
)
{
return
nullptr
;
}
if
(
targetServices
-
>
Init
(
)
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
return
nullptr
;
}
return
targetServices
;
}
sandbox
:
:
TargetServices
*
GetInitializedTargetServices
(
)
{
static
sandbox
:
:
TargetServices
*
sInitializedTargetServices
=
InitializeTargetServices
(
)
;
return
sInitializedTargetServices
;
}
void
LowerSandbox
(
)
{
GetInitializedTargetServices
(
)
-
>
LowerToken
(
)
;
}
static
sandbox
:
:
BrokerServices
*
InitializeBrokerServices
(
)
{
sandbox
:
:
BrokerServices
*
brokerServices
=
sandbox
:
:
SandboxFactory
:
:
GetBrokerServices
(
)
;
if
(
!
brokerServices
)
{
return
nullptr
;
}
if
(
brokerServices
-
>
Init
(
)
!
=
sandbox
:
:
SBOX_ALL_OK
)
{
return
nullptr
;
}
scoped_refptr
<
sandbox
:
:
TargetPolicy
>
policy
=
brokerServices
-
>
CreatePolicy
(
)
;
sandbox
:
:
ResultCode
result
=
policy
-
>
CreateAlternateDesktop
(
true
)
;
return
brokerServices
;
}
sandbox
:
:
BrokerServices
*
GetInitializedBrokerServices
(
)
{
static
sandbox
:
:
BrokerServices
*
sInitializedBrokerServices
=
InitializeBrokerServices
(
)
;
return
sInitializedBrokerServices
;
}
PermissionsService
*
GetPermissionsService
(
)
{
return
PermissionsService
:
:
GetInstance
(
)
;
}
}
}
