#
include
"
nsSHEntryShared
.
h
"
#
include
"
nsArray
.
h
"
#
include
"
nsDocShellEditorData
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
namespace
dom
=
mozilla
:
:
dom
;
namespace
{
uint64_t
gSHEntrySharedID
=
0
;
}
void
nsSHEntryShared
:
:
Shutdown
(
)
{
}
nsSHEntryShared
:
:
nsSHEntryShared
(
)
:
mDocShellID
(
{
0
}
)
mCacheKey
(
0
)
mLastTouched
(
0
)
mID
(
gSHEntrySharedID
+
+
)
mViewerBounds
(
0
0
0
0
)
mIsFrameNavigation
(
false
)
mSaveLayoutState
(
true
)
mSticky
(
true
)
mDynamicallyCreated
(
false
)
mExpired
(
false
)
{
}
nsSHEntryShared
:
:
~
nsSHEntryShared
(
)
{
RemoveFromExpirationTracker
(
)
;
mSHistory
=
nullptr
;
if
(
mContentViewer
)
{
RemoveFromBFCacheSync
(
)
;
}
}
NS_IMPL_ISUPPORTS
(
nsSHEntryShared
nsIBFCacheEntry
nsIMutationObserver
)
already_AddRefed
<
nsSHEntryShared
>
nsSHEntryShared
:
:
Duplicate
(
nsSHEntryShared
*
aEntry
)
{
RefPtr
<
nsSHEntryShared
>
newEntry
=
new
nsSHEntryShared
(
)
;
newEntry
-
>
mDocShellID
=
aEntry
-
>
mDocShellID
;
newEntry
-
>
mChildShells
.
AppendObjects
(
aEntry
-
>
mChildShells
)
;
newEntry
-
>
mTriggeringPrincipal
=
aEntry
-
>
mTriggeringPrincipal
;
newEntry
-
>
mPrincipalToInherit
=
aEntry
-
>
mPrincipalToInherit
;
newEntry
-
>
mContentType
.
Assign
(
aEntry
-
>
mContentType
)
;
newEntry
-
>
mIsFrameNavigation
=
aEntry
-
>
mIsFrameNavigation
;
newEntry
-
>
mSaveLayoutState
=
aEntry
-
>
mSaveLayoutState
;
newEntry
-
>
mSticky
=
aEntry
-
>
mSticky
;
newEntry
-
>
mDynamicallyCreated
=
aEntry
-
>
mDynamicallyCreated
;
newEntry
-
>
mCacheKey
=
aEntry
-
>
mCacheKey
;
newEntry
-
>
mLastTouched
=
aEntry
-
>
mLastTouched
;
return
newEntry
.
forget
(
)
;
}
void
nsSHEntryShared
:
:
RemoveFromExpirationTracker
(
)
{
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
;
if
(
shistory
&
&
GetExpirationState
(
)
-
>
IsTracked
(
)
)
{
shistory
-
>
RemoveFromExpirationTracker
(
this
)
;
}
}
void
nsSHEntryShared
:
:
SyncPresentationState
(
)
{
if
(
mContentViewer
&
&
mWindowState
)
{
return
;
}
DropPresentationState
(
)
;
}
void
nsSHEntryShared
:
:
DropPresentationState
(
)
{
RefPtr
<
nsSHEntryShared
>
kungFuDeathGrip
=
this
;
if
(
mDocument
)
{
mDocument
-
>
SetBFCacheEntry
(
nullptr
)
;
mDocument
-
>
RemoveMutationObserver
(
this
)
;
mDocument
=
nullptr
;
}
if
(
mContentViewer
)
{
mContentViewer
-
>
ClearHistoryEntry
(
)
;
}
RemoveFromExpirationTracker
(
)
;
mContentViewer
=
nullptr
;
mSticky
=
true
;
mWindowState
=
nullptr
;
mViewerBounds
.
SetRect
(
0
0
0
0
)
;
mChildShells
.
Clear
(
)
;
mRefreshURIList
=
nullptr
;
mEditorData
=
nullptr
;
}
nsresult
nsSHEntryShared
:
:
SetContentViewer
(
nsIContentViewer
*
aViewer
)
{
MOZ_ASSERT
(
!
aViewer
|
|
!
mContentViewer
"
SHEntryShared
already
contains
viewer
"
)
;
if
(
mContentViewer
|
|
!
aViewer
)
{
DropPresentationState
(
)
;
}
MOZ_ASSERT
(
!
GetExpirationState
(
)
-
>
IsTracked
(
)
)
;
mContentViewer
=
aViewer
;
if
(
mContentViewer
)
{
if
(
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
)
{
shistory
-
>
AddToExpirationTracker
(
this
)
;
}
mDocument
=
mContentViewer
-
>
GetDocument
(
)
;
if
(
mDocument
)
{
mDocument
-
>
SetBFCacheEntry
(
this
)
;
mDocument
-
>
AddMutationObserver
(
this
)
;
}
}
return
NS_OK
;
}
nsresult
nsSHEntryShared
:
:
RemoveFromBFCacheSync
(
)
{
MOZ_ASSERT
(
mContentViewer
&
&
mDocument
"
we
'
re
not
in
the
bfcache
!
"
)
;
RefPtr
<
nsSHEntryShared
>
kungFuDeathGrip
=
this
;
nsCOMPtr
<
nsIContentViewer
>
viewer
=
mContentViewer
;
DropPresentationState
(
)
;
if
(
viewer
)
{
viewer
-
>
Destroy
(
)
;
}
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
;
if
(
shistory
)
{
shistory
-
>
RemoveDynEntriesForBFCacheEntry
(
this
)
;
}
return
NS_OK
;
}
nsresult
nsSHEntryShared
:
:
RemoveFromBFCacheAsync
(
)
{
MOZ_ASSERT
(
mContentViewer
&
&
mDocument
"
we
'
re
not
in
the
bfcache
!
"
)
;
if
(
!
mDocument
)
{
return
NS_ERROR_UNEXPECTED
;
}
nsCOMPtr
<
nsIContentViewer
>
viewer
=
mContentViewer
;
RefPtr
<
dom
:
:
Document
>
document
=
mDocument
;
RefPtr
<
nsSHEntryShared
>
self
=
this
;
nsresult
rv
=
mDocument
-
>
Dispatch
(
mozilla
:
:
TaskCategory
:
:
Other
NS_NewRunnableFunction
(
"
nsSHEntryShared
:
:
RemoveFromBFCacheAsync
"
[
self
viewer
document
]
(
)
{
if
(
viewer
)
{
viewer
-
>
Destroy
(
)
;
}
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
self
-
>
mSHistory
)
;
if
(
shistory
)
{
shistory
-
>
RemoveDynEntriesForBFCacheEntry
(
self
)
;
}
}
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
dispatch
RemoveFromBFCacheAsync
runnable
.
"
)
;
}
else
{
DropPresentationState
(
)
;
}
return
NS_OK
;
}
nsresult
nsSHEntryShared
:
:
GetID
(
uint64_t
*
aID
)
{
*
aID
=
mID
;
return
NS_OK
;
}
void
nsSHEntryShared
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
RemoveFromBFCacheAsync
(
)
;
}
