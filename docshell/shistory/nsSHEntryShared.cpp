#
include
"
nsSHEntryShared
.
h
"
#
include
"
nsArray
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDocShellEditorData
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsSHistory
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
namespace
dom
=
mozilla
:
:
dom
;
namespace
{
uint64_t
gSHEntrySharedID
=
0
;
nsTHashMap
<
nsUint64HashKey
mozilla
:
:
dom
:
:
SHEntrySharedParentState
*
>
*
sIdToSharedState
=
nullptr
;
}
namespace
mozilla
{
namespace
dom
{
uint64_t
SHEntrySharedState
:
:
GenerateId
(
)
{
return
nsContentUtils
:
:
GenerateProcessSpecificId
(
+
+
gSHEntrySharedID
)
;
}
SHEntrySharedParentState
*
SHEntrySharedParentState
:
:
Lookup
(
uint64_t
aId
)
{
MOZ_ASSERT
(
aId
!
=
0
)
;
return
sIdToSharedState
?
sIdToSharedState
-
>
Get
(
aId
)
:
nullptr
;
}
static
void
AddSHEntrySharedParentState
(
SHEntrySharedParentState
*
aSharedState
)
{
MOZ_ASSERT
(
aSharedState
-
>
mId
!
=
0
)
;
if
(
!
sIdToSharedState
)
{
sIdToSharedState
=
new
nsTHashMap
<
nsUint64HashKey
SHEntrySharedParentState
*
>
(
)
;
}
sIdToSharedState
-
>
InsertOrUpdate
(
aSharedState
-
>
mId
aSharedState
)
;
}
SHEntrySharedParentState
:
:
SHEntrySharedParentState
(
)
{
AddSHEntrySharedParentState
(
this
)
;
}
SHEntrySharedParentState
:
:
SHEntrySharedParentState
(
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
nsIPrincipal
*
aPartitionedPrincipalToInherit
nsIContentSecurityPolicy
*
aCsp
const
nsACString
&
aContentType
)
:
SHEntrySharedState
(
aTriggeringPrincipal
aPrincipalToInherit
aPartitionedPrincipalToInherit
aCsp
aContentType
)
{
AddSHEntrySharedParentState
(
this
)
;
}
SHEntrySharedParentState
:
:
~
SHEntrySharedParentState
(
)
{
MOZ_ASSERT
(
mId
!
=
0
)
;
RefPtr
<
nsFrameLoader
>
loader
=
mFrameLoader
;
SetFrameLoader
(
nullptr
)
;
if
(
loader
)
{
if
(
NS_FAILED
(
NS_DispatchToCurrentThread
(
NS_NewRunnableFunction
(
"
SHEntrySharedParentState
:
:
~
SHEntrySharedParentState
"
[
loader
]
(
)
-
>
void
{
loader
-
>
AsyncDestroy
(
)
;
}
)
)
)
)
{
loader
-
>
AsyncDestroy
(
)
;
}
}
sIdToSharedState
-
>
Remove
(
mId
)
;
if
(
sIdToSharedState
-
>
IsEmpty
(
)
)
{
delete
sIdToSharedState
;
sIdToSharedState
=
nullptr
;
}
}
void
SHEntrySharedParentState
:
:
ChangeId
(
uint64_t
aId
)
{
MOZ_ASSERT
(
aId
!
=
0
)
;
sIdToSharedState
-
>
Remove
(
mId
)
;
mId
=
aId
;
sIdToSharedState
-
>
InsertOrUpdate
(
mId
this
)
;
}
void
SHEntrySharedParentState
:
:
CopyFrom
(
SHEntrySharedParentState
*
aEntry
)
{
mDocShellID
=
aEntry
-
>
mDocShellID
;
mTriggeringPrincipal
=
aEntry
-
>
mTriggeringPrincipal
;
mPrincipalToInherit
=
aEntry
-
>
mPrincipalToInherit
;
mPartitionedPrincipalToInherit
=
aEntry
-
>
mPartitionedPrincipalToInherit
;
mCsp
=
aEntry
-
>
mCsp
;
mSaveLayoutState
=
aEntry
-
>
mSaveLayoutState
;
mContentType
.
Assign
(
aEntry
-
>
mContentType
)
;
mIsFrameNavigation
=
aEntry
-
>
mIsFrameNavigation
;
mSticky
=
aEntry
-
>
mSticky
;
mDynamicallyCreated
=
aEntry
-
>
mDynamicallyCreated
;
mCacheKey
=
aEntry
-
>
mCacheKey
;
mLastTouched
=
aEntry
-
>
mLastTouched
;
}
void
dom
:
:
SHEntrySharedParentState
:
:
NotifyListenersContentViewerEvicted
(
)
{
if
(
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
)
{
RefPtr
<
nsSHistory
>
nsshistory
=
static_cast
<
nsSHistory
*
>
(
shistory
.
get
(
)
)
;
nsshistory
-
>
NotifyListenersContentViewerEvicted
(
1
)
;
}
}
void
SHEntrySharedChildState
:
:
CopyFrom
(
SHEntrySharedChildState
*
aEntry
)
{
mChildShells
.
AppendObjects
(
aEntry
-
>
mChildShells
)
;
}
void
SHEntrySharedParentState
:
:
SetFrameLoader
(
nsFrameLoader
*
aFrameLoader
)
{
if
(
GetExpirationState
(
)
-
>
IsTracked
(
)
&
&
mFrameLoader
)
{
if
(
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
)
{
shistory
-
>
RemoveFromExpirationTracker
(
this
)
;
}
}
mFrameLoader
=
aFrameLoader
;
if
(
mFrameLoader
)
{
if
(
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
)
{
shistory
-
>
AddToExpirationTracker
(
this
)
;
}
}
}
nsFrameLoader
*
SHEntrySharedParentState
:
:
GetFrameLoader
(
)
{
return
mFrameLoader
;
}
}
}
void
nsSHEntryShared
:
:
Shutdown
(
)
{
}
nsSHEntryShared
:
:
~
nsSHEntryShared
(
)
{
RemoveFromExpirationTracker
(
)
;
mSHistory
=
nullptr
;
if
(
mContentViewer
)
{
RemoveFromBFCacheSync
(
)
;
}
}
NS_IMPL_QUERY_INTERFACE
(
nsSHEntryShared
nsIBFCacheEntry
nsIMutationObserver
)
NS_IMPL_ADDREF_INHERITED
(
nsSHEntryShared
dom
:
:
SHEntrySharedParentState
)
NS_IMPL_RELEASE_INHERITED
(
nsSHEntryShared
dom
:
:
SHEntrySharedParentState
)
already_AddRefed
<
nsSHEntryShared
>
nsSHEntryShared
:
:
Duplicate
(
)
{
RefPtr
<
nsSHEntryShared
>
newEntry
=
new
nsSHEntryShared
(
)
;
newEntry
-
>
dom
:
:
SHEntrySharedParentState
:
:
CopyFrom
(
this
)
;
newEntry
-
>
dom
:
:
SHEntrySharedChildState
:
:
CopyFrom
(
this
)
;
return
newEntry
.
forget
(
)
;
}
void
nsSHEntryShared
:
:
RemoveFromExpirationTracker
(
)
{
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
;
if
(
shistory
&
&
GetExpirationState
(
)
-
>
IsTracked
(
)
)
{
shistory
-
>
RemoveFromExpirationTracker
(
this
)
;
}
}
void
nsSHEntryShared
:
:
SyncPresentationState
(
)
{
if
(
mContentViewer
&
&
mWindowState
)
{
return
;
}
DropPresentationState
(
)
;
}
void
nsSHEntryShared
:
:
DropPresentationState
(
)
{
RefPtr
<
nsSHEntryShared
>
kungFuDeathGrip
=
this
;
if
(
mDocument
)
{
mDocument
-
>
SetBFCacheEntry
(
nullptr
)
;
mDocument
-
>
RemoveMutationObserver
(
this
)
;
mDocument
=
nullptr
;
}
if
(
mContentViewer
)
{
mContentViewer
-
>
ClearHistoryEntry
(
)
;
}
RemoveFromExpirationTracker
(
)
;
mContentViewer
=
nullptr
;
mSticky
=
true
;
mWindowState
=
nullptr
;
mViewerBounds
.
SetRect
(
0
0
0
0
)
;
mChildShells
.
Clear
(
)
;
mRefreshURIList
=
nullptr
;
mEditorData
=
nullptr
;
}
nsresult
nsSHEntryShared
:
:
SetContentViewer
(
nsIContentViewer
*
aViewer
)
{
MOZ_ASSERT
(
!
aViewer
|
|
!
mContentViewer
"
SHEntryShared
already
contains
viewer
"
)
;
if
(
mContentViewer
|
|
!
aViewer
)
{
DropPresentationState
(
)
;
}
MOZ_ASSERT
(
!
GetExpirationState
(
)
-
>
IsTracked
(
)
)
;
mContentViewer
=
aViewer
;
if
(
mContentViewer
)
{
if
(
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
)
{
shistory
-
>
AddToExpirationTracker
(
this
)
;
}
mDocument
=
mContentViewer
-
>
GetDocument
(
)
;
if
(
mDocument
)
{
mDocument
-
>
SetBFCacheEntry
(
this
)
;
mDocument
-
>
AddMutationObserver
(
this
)
;
}
}
return
NS_OK
;
}
nsresult
nsSHEntryShared
:
:
RemoveFromBFCacheSync
(
)
{
MOZ_ASSERT
(
mContentViewer
&
&
mDocument
"
we
'
re
not
in
the
bfcache
!
"
)
;
RefPtr
<
nsSHEntryShared
>
kungFuDeathGrip
=
this
;
nsCOMPtr
<
nsIContentViewer
>
viewer
=
mContentViewer
;
DropPresentationState
(
)
;
if
(
viewer
)
{
viewer
-
>
Destroy
(
)
;
}
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
mSHistory
)
;
if
(
shistory
)
{
shistory
-
>
RemoveDynEntriesForBFCacheEntry
(
this
)
;
}
return
NS_OK
;
}
nsresult
nsSHEntryShared
:
:
RemoveFromBFCacheAsync
(
)
{
MOZ_ASSERT
(
mContentViewer
&
&
mDocument
"
we
'
re
not
in
the
bfcache
!
"
)
;
if
(
!
mDocument
)
{
return
NS_ERROR_UNEXPECTED
;
}
nsCOMPtr
<
nsIContentViewer
>
viewer
=
mContentViewer
;
RefPtr
<
dom
:
:
Document
>
document
=
mDocument
;
RefPtr
<
nsSHEntryShared
>
self
=
this
;
nsresult
rv
=
mDocument
-
>
Dispatch
(
mozilla
:
:
TaskCategory
:
:
Other
NS_NewRunnableFunction
(
"
nsSHEntryShared
:
:
RemoveFromBFCacheAsync
"
[
self
viewer
document
]
(
)
{
if
(
viewer
)
{
viewer
-
>
Destroy
(
)
;
}
nsCOMPtr
<
nsISHistory
>
shistory
=
do_QueryReferent
(
self
-
>
mSHistory
)
;
if
(
shistory
)
{
shistory
-
>
RemoveDynEntriesForBFCacheEntry
(
self
)
;
}
}
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
dispatch
RemoveFromBFCacheAsync
runnable
.
"
)
;
}
else
{
DropPresentationState
(
)
;
}
return
NS_OK
;
}
void
nsSHEntryShared
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
RemoveFromBFCacheAsync
(
)
;
}
void
nsSHEntryShared
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
RemoveFromBFCacheAsync
(
)
;
}
