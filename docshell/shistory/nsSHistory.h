#
ifndef
nsSHistory_h
#
define
nsSHistory_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsISHistoryInternal
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsWeakPtr
.
h
"
#
include
"
nsIPartialSHistoryListener
.
h
"
#
include
"
prclist
.
h
"
class
nsIDocShell
;
class
nsSHEnumerator
;
class
nsSHistoryObserver
;
class
nsISHEntry
;
class
nsISHTransaction
;
class
nsSHistory
final
:
public
PRCList
public
nsISHistory
public
nsISHistoryInternal
public
nsIWebNavigation
{
public
:
nsSHistory
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISHISTORY
NS_DECL_NSISHISTORYINTERNAL
NS_DECL_NSIWEBNAVIGATION
static
nsresult
Startup
(
)
;
static
void
Shutdown
(
)
;
static
void
UpdatePrefs
(
)
;
static
uint32_t
GetMaxTotalViewers
(
)
{
return
sHistoryMaxTotalViewers
;
}
private
:
virtual
~
nsSHistory
(
)
;
friend
class
nsSHEnumerator
;
friend
class
nsSHistoryObserver
;
NS_IMETHOD
GetTransactionAtIndex
(
int32_t
aIndex
nsISHTransaction
*
*
aResult
)
;
nsresult
LoadDifferingEntries
(
nsISHEntry
*
aPrevEntry
nsISHEntry
*
aNextEntry
nsIDocShell
*
aRootDocShell
long
aLoadType
bool
&
aDifferenceFound
)
;
nsresult
InitiateLoad
(
nsISHEntry
*
aFrameEntry
nsIDocShell
*
aFrameDS
long
aLoadType
)
;
NS_IMETHOD
LoadEntry
(
int32_t
aIndex
long
aLoadType
uint32_t
aHistCmd
)
;
#
ifdef
DEBUG
nsresult
PrintHistory
(
)
;
#
endif
void
EvictOutOfRangeWindowContentViewers
(
int32_t
aIndex
)
;
void
EvictContentViewerForTransaction
(
nsISHTransaction
*
aTrans
)
;
static
void
GloballyEvictContentViewers
(
)
;
static
void
GloballyEvictAllContentViewers
(
)
;
static
uint32_t
CalcMaxTotalViewers
(
)
;
nsresult
LoadNextPossibleEntry
(
int32_t
aNewIndex
long
aLoadType
uint32_t
aHistCmd
)
;
bool
RemoveDuplicate
(
int32_t
aIndex
bool
aKeepNext
)
;
nsCOMPtr
<
nsISHTransaction
>
mListRoot
;
int32_t
mIndex
;
int32_t
mLength
;
int32_t
mRequestedIndex
;
bool
mIsPartial
;
int32_t
mGlobalIndexOffset
;
int32_t
mEntriesInFollowingPartialHistories
;
nsAutoTObserverArray
<
nsWeakPtr
2
>
mListeners
;
nsWeakPtr
mPartialHistoryListener
;
nsIDocShell
*
mRootDocShell
;
static
int32_t
sHistoryMaxTotalViewers
;
}
;
class
nsSHEnumerator
:
public
nsISimpleEnumerator
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSISIMPLEENUMERATOR
explicit
nsSHEnumerator
(
nsSHistory
*
aHistory
)
;
protected
:
friend
class
nsSHistory
;
virtual
~
nsSHEnumerator
(
)
;
private
:
int32_t
mIndex
;
nsSHistory
*
mSHistory
;
}
;
#
endif
