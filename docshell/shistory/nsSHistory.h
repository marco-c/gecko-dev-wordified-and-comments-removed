#
ifndef
nsSHistory_h
#
define
nsSHistory_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsSHEntryShared
.
h
"
#
include
"
nsSimpleEnumerator
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsIDocShell
;
class
nsDocShell
;
class
nsSHistoryObserver
;
class
nsISHEntry
;
namespace
mozilla
{
namespace
dom
{
class
LoadSHEntryResult
;
}
}
class
nsSHistory
:
public
mozilla
:
:
LinkedListElement
<
nsSHistory
>
public
nsISHistory
public
nsSupportsWeakReference
{
public
:
class
HistoryTracker
final
:
public
nsExpirationTracker
<
nsSHEntryShared
3
>
{
public
:
explicit
HistoryTracker
(
nsSHistory
*
aSHistory
uint32_t
aTimeout
nsIEventTarget
*
aEventTarget
)
:
nsExpirationTracker
(
1000
*
aTimeout
/
2
"
HistoryTracker
"
aEventTarget
)
{
MOZ_ASSERT
(
aSHistory
)
;
mSHistory
=
aSHistory
;
}
protected
:
virtual
void
NotifyExpired
(
nsSHEntryShared
*
aObj
)
override
{
RemoveObject
(
aObj
)
;
mSHistory
-
>
EvictExpiredContentViewerForEntry
(
aObj
)
;
}
private
:
nsSHistory
*
mSHistory
;
}
;
struct
SwapEntriesData
{
mozilla
:
:
dom
:
:
BrowsingContext
*
ignoreBC
;
nsISHEntry
*
destTreeRoot
;
nsISHEntry
*
destTreeParent
;
}
;
explicit
nsSHistory
(
mozilla
:
:
dom
:
:
BrowsingContext
*
aRootBC
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISHISTORY
static
nsresult
Startup
(
)
;
static
void
Shutdown
(
)
;
static
void
UpdatePrefs
(
)
;
static
uint32_t
GetMaxTotalViewers
(
)
{
return
sHistoryMaxTotalViewers
;
}
static
already_AddRefed
<
nsISHEntry
>
GetRootSHEntry
(
nsISHEntry
*
aEntry
)
;
typedef
nsresult
(
*
WalkHistoryEntriesFunc
)
(
nsISHEntry
*
aEntry
mozilla
:
:
dom
:
:
BrowsingContext
*
aBC
int32_t
aChildIndex
void
*
aData
)
;
static
nsresult
CloneAndReplace
(
nsISHEntry
*
aSrcEntry
mozilla
:
:
dom
:
:
BrowsingContext
*
aOwnerBC
uint32_t
aCloneID
nsISHEntry
*
aReplaceEntry
bool
aCloneChildren
nsISHEntry
*
*
aDestEntry
)
;
static
nsresult
CloneAndReplaceChild
(
nsISHEntry
*
aEntry
mozilla
:
:
dom
:
:
BrowsingContext
*
aOwnerBC
int32_t
aChildIndex
void
*
aData
)
;
static
nsresult
SetChildHistoryEntry
(
nsISHEntry
*
aEntry
mozilla
:
:
dom
:
:
BrowsingContext
*
aBC
int32_t
aEntryIndex
void
*
aData
)
;
static
nsresult
WalkHistoryEntries
(
nsISHEntry
*
aRootEntry
mozilla
:
:
dom
:
:
BrowsingContext
*
aBC
WalkHistoryEntriesFunc
aCallback
void
*
aData
)
;
static
void
WalkContiguousEntries
(
nsISHEntry
*
aEntry
const
std
:
:
function
<
void
(
nsISHEntry
*
)
>
&
aCallback
)
;
nsTArray
<
nsCOMPtr
<
nsISHEntry
>
>
&
Entries
(
)
{
return
mEntries
;
}
void
RemoveEntries
(
nsTArray
<
nsID
>
&
aIDs
int32_t
aStartIndex
bool
*
aDidRemove
)
;
static
const
int32_t
VIEWER_WINDOW
=
3
;
struct
LoadEntryResult
{
RefPtr
<
mozilla
:
:
dom
:
:
BrowsingContext
>
mBrowsingContext
;
RefPtr
<
nsDocShellLoadState
>
mLoadState
;
}
;
static
void
LoadURIs
(
nsTArray
<
LoadEntryResult
>
&
aLoadResults
)
;
nsresult
Reload
(
uint32_t
aReloadFlags
nsTArray
<
LoadEntryResult
>
&
aLoadResults
)
;
nsresult
ReloadCurrentEntry
(
nsTArray
<
LoadEntryResult
>
&
aLoadResults
)
;
nsresult
GotoIndex
(
int32_t
aIndex
nsTArray
<
LoadEntryResult
>
&
aLoadResults
)
;
void
WindowIndices
(
int32_t
aIndex
int32_t
*
aOutStartIndex
int32_t
*
aOutEndIndex
)
;
void
NotifyListenersContentViewerEvicted
(
uint32_t
aNumEvicted
)
;
int32_t
Length
(
)
{
return
int32_t
(
mEntries
.
Length
(
)
)
;
}
int32_t
Index
(
)
{
return
mIndex
;
}
mozilla
:
:
dom
:
:
BrowsingContext
*
GetBrowsingContext
(
)
{
return
mRootBC
;
}
bool
HasOngoingUpdate
(
)
{
return
mHasOngoingUpdate
;
}
void
SetHasOngoingUpdate
(
bool
aVal
)
{
mHasOngoingUpdate
=
aVal
;
}
void
SetBrowsingContext
(
mozilla
:
:
dom
:
:
BrowsingContext
*
aRootBC
)
{
mRootBC
=
aRootBC
;
}
bool
GetIndexForReplace
(
)
{
return
mRequestedIndex
=
=
-
1
?
mIndex
:
mRequestedIndex
;
}
protected
:
virtual
~
nsSHistory
(
)
;
mozilla
:
:
dom
:
:
BrowsingContext
*
mRootBC
;
private
:
friend
class
nsSHistoryObserver
;
bool
LoadDifferingEntries
(
nsISHEntry
*
aPrevEntry
nsISHEntry
*
aNextEntry
mozilla
:
:
dom
:
:
BrowsingContext
*
aParent
long
aLoadType
nsTArray
<
LoadEntryResult
>
&
aLoadResults
)
;
void
InitiateLoad
(
nsISHEntry
*
aFrameEntry
mozilla
:
:
dom
:
:
BrowsingContext
*
aFrameBC
long
aLoadType
nsTArray
<
LoadEntryResult
>
&
aLoadResult
)
;
nsresult
LoadEntry
(
int32_t
aIndex
long
aLoadType
uint32_t
aHistCmd
nsTArray
<
LoadEntryResult
>
&
aLoadResults
)
;
#
ifdef
DEBUG
nsresult
PrintHistory
(
)
;
#
endif
nsresult
FindEntryForBFCache
(
nsIBFCacheEntry
*
aBFEntry
nsISHEntry
*
*
aResult
int32_t
*
aResultIndex
)
;
virtual
void
EvictOutOfRangeWindowContentViewers
(
int32_t
aIndex
)
;
void
EvictContentViewerForEntry
(
nsISHEntry
*
aEntry
)
;
static
void
GloballyEvictContentViewers
(
)
;
static
void
GloballyEvictAllContentViewers
(
)
;
static
uint32_t
CalcMaxTotalViewers
(
)
;
nsresult
LoadNextPossibleEntry
(
int32_t
aNewIndex
long
aLoadType
uint32_t
aHistCmd
nsTArray
<
LoadEntryResult
>
&
aLoadResults
)
;
bool
RemoveDuplicate
(
int32_t
aIndex
bool
aKeepNext
)
;
static
void
HandleEntriesToSwapInDocShell
(
mozilla
:
:
dom
:
:
BrowsingContext
*
aBC
nsISHEntry
*
aOldEntry
nsISHEntry
*
aNewEntry
)
;
void
UpdateRootBrowsingContextState
(
)
;
protected
:
bool
mHasOngoingUpdate
;
bool
mIsRemote
;
nsTArray
<
nsCOMPtr
<
nsISHEntry
>
>
mEntries
;
private
:
mozilla
:
:
UniquePtr
<
HistoryTracker
>
mHistoryTracker
;
int32_t
mIndex
;
int32_t
mRequestedIndex
;
nsAutoTObserverArray
<
nsWeakPtr
2
>
mListeners
;
nsID
mRootDocShellID
;
static
int32_t
sHistoryMaxTotalViewers
;
}
;
inline
nsISupports
*
ToSupports
(
nsSHistory
*
aObj
)
{
return
static_cast
<
nsISHistory
*
>
(
aObj
)
;
}
#
endif
