#
ifndef
nsSHistory_h
#
define
nsSHistory_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsSHEntryShared
.
h
"
#
include
"
nsSimpleEnumerator
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsIDocShell
;
class
nsDocShell
;
class
nsSHistoryObserver
;
class
nsISHEntry
;
class
nsSHistory
final
:
public
mozilla
:
:
LinkedListElement
<
nsSHistory
>
public
nsISHistory
public
nsSupportsWeakReference
{
public
:
class
HistoryTracker
final
:
public
nsExpirationTracker
<
nsSHEntryShared
3
>
{
public
:
explicit
HistoryTracker
(
nsSHistory
*
aSHistory
uint32_t
aTimeout
nsIEventTarget
*
aEventTarget
)
:
nsExpirationTracker
(
1000
*
aTimeout
/
2
"
HistoryTracker
"
aEventTarget
)
{
MOZ_ASSERT
(
aSHistory
)
;
mSHistory
=
aSHistory
;
}
protected
:
virtual
void
NotifyExpired
(
nsSHEntryShared
*
aObj
)
override
{
RemoveObject
(
aObj
)
;
mSHistory
-
>
EvictExpiredContentViewerForEntry
(
aObj
)
;
}
private
:
nsSHistory
*
mSHistory
;
}
;
struct
SwapEntriesData
{
nsDocShell
*
ignoreShell
;
nsISHEntry
*
destTreeRoot
;
nsISHEntry
*
destTreeParent
;
}
;
nsSHistory
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISHISTORY
nsresult
GotoIndex
(
int32_t
aIndex
)
;
nsresult
Reload
(
uint32_t
aReloadFlags
)
;
nsresult
GetCurrentURI
(
nsIURI
*
*
aResultURI
)
;
static
nsresult
Startup
(
)
;
static
void
Shutdown
(
)
;
static
void
UpdatePrefs
(
)
;
static
uint32_t
GetMaxTotalViewers
(
)
{
return
sHistoryMaxTotalViewers
;
}
static
nsISHEntry
*
GetRootSHEntry
(
nsISHEntry
*
aEntry
)
;
typedef
nsresult
(
*
WalkHistoryEntriesFunc
)
(
nsISHEntry
*
aEntry
nsDocShell
*
aShell
int32_t
aChildIndex
void
*
aData
)
;
static
nsresult
CloneAndReplace
(
nsISHEntry
*
aSrcEntry
nsDocShell
*
aSrcShell
uint32_t
aCloneID
nsISHEntry
*
aReplaceEntry
bool
aCloneChildren
nsISHEntry
*
*
aDestEntry
)
;
static
nsresult
CloneAndReplaceChild
(
nsISHEntry
*
aEntry
nsDocShell
*
aShell
int32_t
aChildIndex
void
*
aData
)
;
static
nsresult
SetChildHistoryEntry
(
nsISHEntry
*
aEntry
nsDocShell
*
aShell
int32_t
aEntryIndex
void
*
aData
)
;
static
nsresult
WalkHistoryEntries
(
nsISHEntry
*
aRootEntry
nsDocShell
*
aRootShell
WalkHistoryEntriesFunc
aCallback
void
*
aData
)
;
private
:
virtual
~
nsSHistory
(
)
;
friend
class
nsSHistoryObserver
;
nsresult
LoadDifferingEntries
(
nsISHEntry
*
aPrevEntry
nsISHEntry
*
aNextEntry
nsIDocShell
*
aRootDocShell
long
aLoadType
bool
&
aDifferenceFound
)
;
nsresult
InitiateLoad
(
nsISHEntry
*
aFrameEntry
nsIDocShell
*
aFrameDS
long
aLoadType
)
;
nsresult
LoadEntry
(
int32_t
aIndex
long
aLoadType
uint32_t
aHistCmd
)
;
#
ifdef
DEBUG
nsresult
PrintHistory
(
)
;
#
endif
nsresult
FindTransactionForBFCache
(
nsIBFCacheEntry
*
aEntry
nsISHEntry
*
*
aResult
int32_t
*
aResultIndex
)
;
void
EvictOutOfRangeWindowContentViewers
(
int32_t
aIndex
)
;
void
EvictContentViewerForTransaction
(
nsISHEntry
*
aTrans
)
;
static
void
GloballyEvictContentViewers
(
)
;
static
void
GloballyEvictAllContentViewers
(
)
;
static
uint32_t
CalcMaxTotalViewers
(
)
;
nsresult
LoadNextPossibleEntry
(
int32_t
aNewIndex
long
aLoadType
uint32_t
aHistCmd
)
;
bool
RemoveDuplicate
(
int32_t
aIndex
bool
aKeepNext
)
;
mozilla
:
:
UniquePtr
<
HistoryTracker
>
mHistoryTracker
;
nsTArray
<
nsCOMPtr
<
nsISHEntry
>
>
mTransactions
;
int32_t
mIndex
;
int32_t
mRequestedIndex
;
void
WindowIndices
(
int32_t
aIndex
int32_t
*
aOutStartIndex
int32_t
*
aOutEndIndex
)
;
int32_t
Length
(
)
{
return
int32_t
(
mTransactions
.
Length
(
)
)
;
}
nsAutoTObserverArray
<
nsWeakPtr
2
>
mListeners
;
nsIDocShell
*
mRootDocShell
;
static
int32_t
sHistoryMaxTotalViewers
;
}
;
inline
nsISupports
*
ToSupports
(
nsSHistory
*
aObj
)
{
return
static_cast
<
nsISHistory
*
>
(
aObj
)
;
}
#
endif
