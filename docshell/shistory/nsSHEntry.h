#
ifndef
nsSHEntry_h
#
define
nsSHEntry_h
#
include
"
nsCOMArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISHEntry
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
namespace
mozilla
{
namespace
dom
{
class
SHEntrySharedChildState
;
class
SHEntrySharedParentState
;
}
}
class
nsSHEntryShared
;
class
nsIInputStream
;
class
nsIURI
;
class
nsIReferrerInfo
;
class
nsSHEntry
:
public
nsISHEntry
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSISHENTRY
virtual
void
EvictContentViewer
(
)
;
static
nsresult
Startup
(
)
;
static
void
Shutdown
(
)
;
protected
:
explicit
nsSHEntry
(
mozilla
:
:
dom
:
:
SHEntrySharedParentState
*
aState
)
;
explicit
nsSHEntry
(
const
nsSHEntry
&
aOther
)
;
virtual
~
nsSHEntry
(
)
;
RefPtr
<
mozilla
:
:
dom
:
:
SHEntrySharedParentState
>
mShared
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIURI
>
mOriginalURI
;
nsCOMPtr
<
nsIURI
>
mResultPrincipalURI
;
nsCOMPtr
<
nsIReferrerInfo
>
mReferrerInfo
;
nsString
mTitle
;
nsCOMPtr
<
nsIInputStream
>
mPostData
;
uint32_t
mLoadType
;
uint32_t
mID
;
int32_t
mScrollPositionX
;
int32_t
mScrollPositionY
;
nsISHEntry
*
mParent
;
nsCOMArray
<
nsISHEntry
>
mChildren
;
nsCOMPtr
<
nsIStructuredCloneContainer
>
mStateData
;
nsString
mSrcdocData
;
nsCOMPtr
<
nsIURI
>
mBaseURI
;
bool
mLoadReplace
;
bool
mURIWasModified
;
bool
mIsSrcdocEntry
;
bool
mScrollRestorationIsManual
;
bool
mLoadedInThisProcess
;
bool
mPersist
;
}
;
class
nsLegacySHEntry
final
:
public
nsSHEntry
{
public
:
explicit
nsLegacySHEntry
(
uint64_t
aID
)
;
explicit
nsLegacySHEntry
(
const
nsLegacySHEntry
&
aOther
)
:
nsSHEntry
(
aOther
)
{
}
NS_IMETHOD
GetContentViewer
(
nsIContentViewer
*
*
aResult
)
override
;
NS_IMETHOD
SetContentViewer
(
nsIContentViewer
*
aViewer
)
override
;
NS_IMETHOD
GetWindowState
(
nsISupports
*
*
aState
)
override
;
NS_IMETHOD
SetWindowState
(
nsISupports
*
aState
)
override
;
using
nsISHEntry
:
:
GetRefreshURIList
;
NS_IMETHOD
GetRefreshURIList
(
nsIMutableArray
*
*
aRefreshURIList
)
override
;
NS_IMETHOD
SetRefreshURIList
(
nsIMutableArray
*
aRefreshURIList
)
override
;
using
nsSHEntry
:
:
GetLayoutHistoryState
;
NS_IMETHOD
GetLayoutHistoryState
(
nsILayoutHistoryState
*
*
aResult
)
override
;
NS_IMETHOD
SetLayoutHistoryState
(
nsILayoutHistoryState
*
aState
)
override
;
using
nsISHEntry
:
:
GetSaveLayoutStateFlag
;
NS_IMETHOD
GetSaveLayoutStateFlag
(
bool
*
aSaveLayoutStateFlag
)
override
;
NS_IMETHOD
SetSaveLayoutStateFlag
(
bool
aSaveLayoutStateFlag
)
override
;
NS_IMETHOD
GetBFCacheEntry
(
nsIBFCacheEntry
*
*
aEntry
)
override
;
NS_IMETHOD_
(
void
)
AddChildShell
(
nsIDocShellTreeItem
*
aShell
)
override
;
NS_IMETHOD
ChildShellAt
(
int32_t
aIndex
nsIDocShellTreeItem
*
*
aShell
)
override
;
NS_IMETHOD_
(
void
)
ClearChildShells
(
)
override
;
NS_IMETHOD_
(
void
)
SyncPresentationState
(
)
override
;
NS_IMETHOD
InitLayoutHistoryState
(
nsILayoutHistoryState
*
*
aState
)
override
;
NS_IMETHOD
Create
(
nsIURI
*
aURI
const
nsAString
&
aTitle
nsIInputStream
*
aInputStream
uint32_t
aCacheKey
const
nsACString
&
aContentType
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
nsIPrincipal
*
aStoragePrincipalToInherit
nsIContentSecurityPolicy
*
aCsp
const
nsID
&
aDocshellID
bool
aDynamicCreation
nsIURI
*
aOriginalURI
nsIURI
*
aResultPrincipalURI
bool
aLoadReplace
nsIReferrerInfo
*
aReferrerInfo
const
nsAString
&
aSrcdocData
bool
aSrcdocEntry
nsIURI
*
aBaseURI
bool
aSaveLayoutState
bool
aExpired
)
override
;
NS_IMETHOD
Clone
(
nsISHEntry
*
*
aResult
)
override
;
NS_IMETHOD_
(
nsDocShellEditorData
*
)
ForgetEditorData
(
void
)
override
;
NS_IMETHOD_
(
void
)
SetEditorData
(
nsDocShellEditorData
*
aData
)
override
;
NS_IMETHOD_
(
bool
)
HasDetachedEditor
(
)
override
;
NS_IMETHOD_
(
bool
)
HasBFCacheEntry
(
nsIBFCacheEntry
*
aEntry
)
override
;
NS_IMETHOD
AbandonBFCacheEntry
(
)
override
;
private
:
nsSHEntryShared
*
GetState
(
)
;
}
;
#
endif
