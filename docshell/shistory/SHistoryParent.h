#
ifndef
mozilla_dom_SHistoryParent_h
#
define
mozilla_dom_SHistoryParent_h
#
include
"
mozilla
/
dom
/
PSHistoryParent
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsSHistory
.
h
"
namespace
mozilla
{
namespace
dom
{
class
CanonicalBrowsingContext
;
class
SHistoryParent
;
class
LegacySHistory
final
:
public
nsSHistory
{
private
:
virtual
~
LegacySHistory
(
)
{
}
public
:
LegacySHistory
(
mozilla
:
:
dom
:
:
CanonicalBrowsingContext
*
aRootBC
const
nsID
&
aDocShellID
)
;
}
;
class
SHistoryParent
final
:
public
PSHistoryParent
{
friend
class
PSHistoryParent
;
friend
class
SHEntryParent
;
public
:
explicit
SHistoryParent
(
CanonicalBrowsingContext
*
aContext
)
;
virtual
~
SHistoryParent
(
)
;
protected
:
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
bool
RecvGetCount
(
int32_t
*
aCount
)
;
bool
RecvGetIndex
(
int32_t
*
aIndex
)
;
bool
RecvSetIndex
(
int32_t
aIndex
nsresult
*
aResult
)
;
bool
RecvGetRequestedIndex
(
int32_t
*
aIndex
)
;
bool
RecvInternalSetRequestedIndex
(
int32_t
aIndex
)
;
bool
RecvGetEntryAtIndex
(
int32_t
aIndex
nsresult
*
aResult
MaybeNewPSHEntry
*
aEntry
)
;
bool
RecvPurgeHistory
(
int32_t
aNumEntries
nsresult
*
aResult
)
;
bool
RecvReloadCurrentEntry
(
LoadSHEntryResult
*
aLoadResult
)
;
bool
RecvGotoIndex
(
int32_t
aIndex
LoadSHEntryResult
*
aLoadResult
)
;
bool
RecvGetIndexOfEntry
(
PSHEntryParent
*
aEntry
int32_t
*
aIndex
)
;
bool
RecvAddEntry
(
PSHEntryParent
*
aEntry
bool
aPersist
nsresult
*
aResult
int32_t
*
aEntriesPurged
)
;
bool
RecvUpdateIndex
(
)
;
bool
RecvReplaceEntry
(
int32_t
aIndex
PSHEntryParent
*
aEntry
nsresult
*
aResult
)
;
bool
RecvNotifyOnHistoryReload
(
bool
*
aOk
)
;
bool
RecvEvictOutOfRangeContentViewers
(
int32_t
aIndex
)
;
bool
RecvEvictAllContentViewers
(
)
;
bool
RecvRemoveDynEntries
(
int32_t
aIndex
PSHEntryParent
*
aEntry
)
;
bool
RecvRemoveEntries
(
nsTArray
<
nsID
>
&
&
ids
int32_t
aIndex
bool
*
aDidRemove
)
;
bool
RecvRemoveFrameEntries
(
PSHEntryParent
*
aEntry
)
;
bool
RecvReload
(
const
uint32_t
&
aReloadFlags
LoadSHEntryResult
*
aLoadResult
)
;
bool
RecvGetAllEntries
(
nsTArray
<
MaybeNewPSHEntry
>
*
aEntries
)
;
bool
RecvFindEntryForBFCache
(
const
uint64_t
&
aSharedID
const
bool
&
aIncludeCurrentEntry
MaybeNewPSHEntry
*
aEntry
int32_t
*
aIndex
)
;
bool
RecvEvict
(
nsTArray
<
PSHEntryParent
*
>
&
&
aEntries
)
;
bool
RecvEnsureCorrectEntryAtCurrIndex
(
PSHEntryParent
*
aEntry
)
;
RefPtr
<
CanonicalBrowsingContext
>
mContext
;
RefPtr
<
LegacySHistory
>
mHistory
;
}
;
}
}
#
endif
