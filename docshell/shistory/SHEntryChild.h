#
ifndef
mozilla_dom_SHEntryChild_h
#
define
mozilla_dom_SHEntryChild_h
#
include
"
mozilla
/
dom
/
PSHEntryChild
.
h
"
#
include
"
mozilla
/
dom
/
MaybeNewPSHEntry
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsIBFCacheEntry
.
h
"
#
include
"
nsISHEntry
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsSHEntryShared
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
class
nsDocShellEditorData
;
class
nsIContentViewer
;
class
nsILayoutHistoryState
;
class
nsIMutableArray
;
namespace
mozilla
{
namespace
dom
{
class
SHistoryChild
;
class
SHEntryChildShared
final
:
public
nsIBFCacheEntry
public
nsStubMutationObserver
public
SHEntrySharedChildState
{
public
:
static
void
Init
(
)
;
static
SHEntryChildShared
*
GetOrCreate
(
uint64_t
aSharedID
)
;
static
void
Remove
(
uint64_t
aSharedID
)
;
static
uint64_t
CreateSharedID
(
)
{
return
nsContentUtils
:
:
GenerateProcessSpecificId
(
+
+
sNextSharedID
)
;
}
static
void
EvictContentViewers
(
const
nsTArray
<
uint64_t
>
&
aToEvictSharedStateIDs
)
;
void
NotifyListenersContentViewerEvicted
(
uint32_t
aNumEvicted
=
1
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIBFCACHEENTRY
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
nsExpirationState
*
GetExpirationState
(
)
{
return
&
mExpirationState
;
}
uint64_t
GetID
(
)
{
return
mID
;
}
private
:
static
uint64_t
sNextSharedID
;
explicit
SHEntryChildShared
(
uint64_t
aID
)
;
~
SHEntryChildShared
(
)
;
friend
class
SHEntryChild
;
already_AddRefed
<
SHEntryChildShared
>
Duplicate
(
)
;
void
RemoveFromExpirationTracker
(
)
;
void
SyncPresentationState
(
)
;
void
DropPresentationState
(
)
;
nsresult
SetContentViewer
(
nsIContentViewer
*
aViewer
)
;
uint64_t
mID
;
RefPtr
<
SHistoryChild
>
mSHistory
;
}
;
class
SHEntryChild
final
:
public
PSHEntryChild
public
nsISHEntry
public
CrossProcessSHEntry
{
friend
class
PSHEntryChild
;
using
PSHEntryChild
:
:
CrossProcessSHEntry
;
public
:
explicit
SHEntryChild
(
const
SHEntryChild
*
aClone
)
:
mShared
(
aClone
-
>
mShared
.
get
(
)
)
mIPCActorDeleted
(
false
)
{
}
explicit
SHEntryChild
(
uint64_t
aSharedID
)
:
mShared
(
SHEntryChildShared
:
:
GetOrCreate
(
aSharedID
)
)
mIPCActorDeleted
(
false
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSISHENTRY
void
EvictContentViewer
(
)
;
protected
:
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
{
mIPCActorDeleted
=
true
;
}
private
:
~
SHEntryChild
(
)
=
default
;
RefPtr
<
SHEntryChildShared
>
mShared
;
bool
mIPCActorDeleted
;
}
;
inline
SHEntryChild
*
CrossProcessSHEntry
:
:
ToSHEntryChild
(
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
"
Wrong
side
!
"
)
;
return
static_cast
<
SHEntryChild
*
>
(
this
)
;
}
}
}
#
endif
