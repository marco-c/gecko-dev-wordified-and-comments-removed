#
ifndef
mozilla_dom_SHistoryChild_h
#
define
mozilla_dom_SHistoryChild_h
#
include
"
mozilla
/
dom
/
PSHistoryChild
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIDocShell
;
namespace
mozilla
{
namespace
dom
{
class
LoadSHEntryData
;
class
SHEntryChildShared
;
class
SHistoryChild
final
:
public
PSHistoryChild
public
nsISHistory
public
nsSupportsWeakReference
{
friend
class
PSHistoryChild
;
public
:
explicit
SHistoryChild
(
BrowsingContext
*
aBrowsingContext
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISHISTORY
protected
:
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
{
mIPCActorDeleted
=
true
;
}
private
:
bool
RecvReloadCurrentEntryFromChild
(
)
{
ReloadCurrentEntry
(
)
;
return
true
;
}
class
HistoryTracker
final
:
public
nsExpirationTracker
<
SHEntryChildShared
3
>
{
public
:
explicit
HistoryTracker
(
SHistoryChild
*
aSHistory
uint32_t
aTimeout
nsIEventTarget
*
aEventTarget
)
:
nsExpirationTracker
(
1000
*
aTimeout
/
2
"
HistoryTracker
"
aEventTarget
)
mSHistory
(
aSHistory
)
{
MOZ_ASSERT
(
aSHistory
)
;
mSHistory
=
aSHistory
;
}
protected
:
void
NotifyExpired
(
SHEntryChildShared
*
aObj
)
override
;
private
:
SHistoryChild
*
mSHistory
;
}
;
~
SHistoryChild
(
)
=
default
;
nsresult
LoadURI
(
LoadSHEntryData
&
aLoadData
)
;
mozilla
:
:
UniquePtr
<
HistoryTracker
>
mHistoryTracker
;
nsAutoTObserverArray
<
nsWeakPtr
2
>
mListeners
;
WeakPtr
<
nsDocShell
>
mRootDocShell
;
bool
mIPCActorDeleted
;
}
;
}
}
#
endif
