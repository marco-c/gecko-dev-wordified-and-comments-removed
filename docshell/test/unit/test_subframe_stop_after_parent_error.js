"
use
strict
"
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
undefined
/
)
;
const
{
XPCShellContentUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
XPCShellContentUtils
.
sys
.
mjs
"
)
;
XPCShellContentUtils
.
init
(
this
)
;
const
server
=
XPCShellContentUtils
.
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
function
registerSlowPage
(
path
)
{
let
result
=
{
url
:
http
:
/
/
example
.
com
/
{
path
}
}
;
let
finishedPromise
=
new
Promise
(
resolve
=
>
{
result
.
finish
=
resolve
;
}
)
;
server
.
registerPathHandler
(
/
{
path
}
async
(
request
response
)
=
>
{
response
.
processAsync
(
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
)
;
response
.
write
(
"
<
html
>
<
body
>
Hello
.
<
/
body
>
<
/
html
>
"
)
;
await
finishedPromise
;
response
.
finish
(
)
;
}
)
;
return
result
;
}
let
topFrameRequest
=
registerSlowPage
(
"
top
.
html
"
)
;
let
subFrameRequest
=
registerSlowPage
(
"
frame
.
html
"
)
;
let
thunks
=
new
Set
(
)
;
function
promiseStateStop
(
webProgress
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
onStateChange
(
aWebProgress
request
stateFlags
status
)
{
if
(
stateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
)
{
webProgress
.
removeProgressListener
(
listener
)
;
thunks
.
delete
(
listener
)
;
resolve
(
)
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
}
;
thunks
.
add
(
listener
)
;
webProgress
.
addProgressListener
(
listener
Ci
.
nsIWebProgress
.
NOTIFY_STATE_NETWORK
)
;
}
)
;
}
async
function
runTest
(
waitForErrorPage
)
{
let
page
=
await
XPCShellContentUtils
.
loadContentPage
(
"
about
:
blank
"
)
;
let
requestPromise
=
TestUtils
.
topicObserved
(
"
http
-
on
-
modify
-
request
"
subject
=
>
subject
.
QueryInterface
(
Ci
.
nsIRequest
)
.
name
=
=
topFrameRequest
.
url
)
;
await
page
.
spawn
(
[
topFrameRequest
.
url
subFrameRequest
.
url
]
function
(
topFrameUrl
subFrameRequestUrl
)
{
let
doc
=
this
.
content
.
document
;
let
frame
=
doc
.
createElement
(
"
iframe
"
)
;
frame
.
src
=
topFrameUrl
;
doc
.
body
.
appendChild
(
frame
)
;
let
frameDoc
=
frame
.
contentDocument
;
let
subframe
=
frameDoc
.
createElement
(
"
iframe
"
)
;
subframe
.
src
=
subFrameRequestUrl
;
frameDoc
.
body
.
appendChild
(
subframe
)
;
}
)
;
let
[
req
]
=
await
requestPromise
;
info
(
"
Cancel
request
for
parent
frame
"
)
;
req
.
cancel
(
Cr
.
NS_ERROR_PROXY_CONNECTION_REFUSED
)
;
await
promiseStateStop
(
page
.
browsingContext
.
webProgress
)
;
await
new
Promise
(
executeSoon
)
;
if
(
waitForErrorPage
)
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
page
.
browsingContext
.
children
[
0
]
?
.
currentWindowGlobal
?
.
documentURI
?
.
spec
.
startsWith
(
"
about
:
neterror
?
"
)
)
;
}
await
page
.
close
(
)
;
}
add_task
(
async
function
testRemoveFrameImmediately
(
)
{
await
runTest
(
false
)
;
}
)
;
add_task
(
async
function
testRemoveFrameAfterErrorPage
(
)
{
await
runTest
(
true
)
;
}
)
;
add_task
(
async
function
(
)
{
topFrameRequest
.
finish
(
)
;
subFrameRequest
.
finish
(
)
;
}
)
;
