"
use
strict
"
;
var
data
=
[
{
wrong
:
"
http
:
/
/
example
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
http
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
https
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
noProtocolFixup
:
true
}
{
wrong
:
"
http
:
/
/
www
.
example
.
abc
.
def
/
"
fixed
:
"
https
:
/
/
www
.
example
.
abc
.
def
/
"
}
{
wrong
:
"
http
:
/
/
www
.
example
/
"
fixed
:
"
https
:
/
/
www
.
example
/
"
}
{
wrong
:
"
http
:
/
/
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
http
:
/
/
example
/
example
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
example
/
"
}
{
wrong
:
"
http
:
/
/
example
/
example
/
s
#
q
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
example
/
s
#
q
"
}
{
wrong
:
"
http
:
/
/
.
org
"
fixed
:
"
https
:
/
/
www
.
xn
-
-
yck6dwa
.
org
/
"
}
{
wrong
:
"
http
:
/
/
"
fixed
:
"
https
:
/
/
www
.
xn
-
-
yck6dwa
.
com
/
"
}
{
wrong
:
"
http
:
/
/
xn
-
-
yck6dwa
"
fixed
:
"
https
:
/
/
www
.
xn
-
-
yck6dwa
.
com
/
"
}
{
wrong
:
"
https
:
/
/
.
org
"
fixed
:
"
https
:
/
/
www
.
xn
-
-
yck6dwa
.
org
/
"
noProtocolFixup
:
true
}
{
wrong
:
"
https
:
/
/
"
fixed
:
"
https
:
/
/
www
.
xn
-
-
yck6dwa
.
com
/
"
noProtocolFixup
:
true
}
{
wrong
:
"
https
:
/
/
xn
-
-
yck6dwa
"
fixed
:
"
https
:
/
/
www
.
xn
-
-
yck6dwa
.
com
/
"
noProtocolFixup
:
true
}
{
wrong
:
"
htp
:
/
/
https
:
/
/
mozilla
.
org
"
fixed
:
"
http
:
/
/
https
/
/
mozilla
.
org
"
noAlternateURI
:
true
}
{
wrong
:
"
ttp
:
/
/
http
:
/
/
mozilla
.
org
"
fixed
:
"
http
:
/
/
http
/
/
mozilla
.
org
"
noAlternateURI
:
true
}
{
wrong
:
"
htps
:
/
/
localhost
:
/
/
mozilla
.
org
"
fixed
:
"
https
:
/
/
localhost
/
/
mozilla
.
org
"
noAlternateURI
:
true
}
{
wrong
:
"
view
-
source
:
http
:
/
/
example
/
example
/
example
/
example
"
reject
:
true
comment
:
"
Scheme
should
be
either
http
or
https
"
}
{
wrong
:
"
file
:
/
/
http
:
/
/
example
/
example
/
example
/
example
"
reject
:
true
comment
:
"
Scheme
should
be
either
http
or
https
"
}
{
wrong
:
"
example
.
com
"
reject
:
true
comment
:
"
Scheme
should
be
either
http
or
https
"
}
{
wrong
:
"
"
reject
:
true
comment
:
"
Should
pass
a
non
-
null
uri
"
}
]
;
add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
setStringPref
(
"
browser
.
fixup
.
alternate
.
prefix
"
"
www
.
"
)
;
Services
.
prefs
.
setStringPref
(
"
browser
.
fixup
.
alternate
.
suffix
"
"
.
com
"
)
;
Services
.
prefs
.
setStringPref
(
"
browser
.
fixup
.
alternate
.
protocol
"
"
https
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
fixup
.
alternate
.
prefix
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
fixup
.
alternate
.
suffix
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
fixup
.
alternate
.
protocol
"
)
;
}
)
;
}
)
;
add_task
(
function
test_default_https_pref
(
)
{
for
(
let
item
of
data
)
{
if
(
item
.
reject
)
{
Assert
.
throws
(
(
)
=
>
Services
.
uriFixup
.
forceHttpFixup
(
item
.
wrong
)
/
NS_ERROR_FAILURE
/
item
.
comment
)
;
}
else
{
let
{
fixupChangedProtocol
fixupCreatedAlternateURI
fixedURI
}
=
Services
.
uriFixup
.
forceHttpFixup
(
item
.
wrong
)
;
Assert
.
equal
(
fixedURI
.
spec
item
.
fixed
"
Specs
should
be
the
same
"
)
;
Assert
.
equal
(
fixupChangedProtocol
!
item
.
noProtocolFixup
fixupChangedProtocol
should
be
{
!
item
.
noAlternateURI
}
)
;
Assert
.
equal
(
fixupCreatedAlternateURI
!
item
.
noAlternateURI
fixupCreatedAlternateURI
should
be
{
!
item
.
limitedFixup
}
)
;
}
}
}
)
;
