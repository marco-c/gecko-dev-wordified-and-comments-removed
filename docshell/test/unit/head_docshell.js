var
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
SearchTestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
sys
.
mjs
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonTestUtils
:
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
}
)
;
var
profileDir
=
do_get_profile
(
)
;
const
kSearchEngineID
=
"
test_urifixup_search_engine
"
;
const
kSearchEngineURL
=
"
https
:
/
/
www
.
example
.
org
/
?
search
=
{
searchTerms
}
"
;
const
kPrivateSearchEngineID
=
"
test_urifixup_search_engine_private
"
;
const
kPrivateSearchEngineURL
=
"
https
:
/
/
www
.
example
.
org
/
?
private
=
{
searchTerms
}
"
;
const
kPostSearchEngineID
=
"
test_urifixup_search_engine_post
"
;
const
kPostSearchEngineURL
=
"
https
:
/
/
www
.
example
.
org
/
"
;
const
kPostSearchEngineData
=
"
q
=
{
searchTerms
}
"
;
const
SEARCH_CONFIG
=
[
{
appliesTo
:
[
{
included
:
{
everywhere
:
true
}
}
]
default
:
"
yes
"
webExtension
:
{
id
:
"
fixup_search
search
.
mozilla
.
org
"
}
}
]
;
async
function
setupSearchService
(
)
{
SearchTestUtils
.
init
(
this
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
modernConfig
"
true
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
await
SearchTestUtils
.
useTestEngines
(
"
.
"
null
SEARCH_CONFIG
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
Services
.
search
.
init
(
)
;
}
async
function
addTestEngines
(
)
{
await
Services
.
search
.
addPolicyEngine
(
{
description
:
"
urifixup
search
engine
"
name
:
kSearchEngineID
search_url
:
kSearchEngineURL
}
)
;
await
Services
.
search
.
addPolicyEngine
(
{
description
:
"
urifixup
private
search
engine
"
name
:
kPrivateSearchEngineID
search_url
:
kPrivateSearchEngineURL
}
)
;
await
Services
.
search
.
addPolicyEngine
(
{
description
:
"
urifixup
POST
search
engine
"
name
:
kPostSearchEngineID
search_url
:
kPostSearchEngineURL
search_url_post_params
:
kPostSearchEngineData
}
)
;
}
