var
pref
=
"
browser
.
fixup
.
typo
.
scheme
"
;
var
data
=
[
{
wrong
:
"
ttp
:
/
/
www
.
example
.
com
/
"
fixed
:
"
http
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
htp
:
/
/
www
.
example
.
com
/
"
fixed
:
"
http
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
ttps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
tps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
ps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
htps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
ile
:
/
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
file
:
/
/
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
le
:
/
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
file
:
/
/
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
http
;
/
/
www
.
example
.
com
/
"
fixed
:
"
http
:
/
/
www
.
example
.
com
/
"
noPrefValue
:
"
http
:
/
/
http
;
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
https
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
noPrefValue
:
"
http
:
/
/
https
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
file
/
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
file
:
/
/
/
this
/
is
/
a
/
test
.
html
"
noPrefValue
:
"
http
:
/
/
file
/
/
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
https
:
/
/
example
.
com
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
https
:
/
/
example
.
com
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
whatever
:
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
whatever
:
/
/
this
/
is
/
a
/
test
.
html
"
}
]
;
var
len
=
data
.
length
;
add_task
(
async
function
setup
(
)
{
await
setupSearchService
(
)
;
Services
.
search
.
wrappedJSObject
.
_engines
.
clear
(
)
;
}
)
;
add_task
(
function
test_unset_pref_fixes_typos
(
)
{
Services
.
prefs
.
clearUserPref
(
pref
)
;
for
(
let
i
=
0
;
i
<
len
;
+
+
i
)
{
let
item
=
data
[
i
]
;
let
{
preferredURI
}
=
Services
.
uriFixup
.
getFixupURIInfo
(
item
.
wrong
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
Assert
.
equal
(
preferredURI
.
spec
item
.
fixed
)
;
}
}
)
;
add_task
(
function
test_false_pref_keeps_typos
(
)
{
Services
.
prefs
.
setBoolPref
(
pref
false
)
;
for
(
let
i
=
0
;
i
<
len
;
+
+
i
)
{
let
item
=
data
[
i
]
;
let
{
preferredURI
}
=
Services
.
uriFixup
.
getFixupURIInfo
(
item
.
wrong
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
Assert
.
equal
(
preferredURI
.
spec
item
.
noPrefValue
|
|
item
.
wrong
)
;
}
}
)
;
add_task
(
function
test_true_pref_fixes_typos
(
)
{
Services
.
prefs
.
setBoolPref
(
pref
true
)
;
for
(
let
i
=
0
;
i
<
len
;
+
+
i
)
{
let
item
=
data
[
i
]
;
let
{
preferredURI
}
=
Services
.
uriFixup
.
getFixupURIInfo
(
item
.
wrong
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
Assert
.
equal
(
preferredURI
.
spec
item
.
fixed
)
;
}
}
)
;
