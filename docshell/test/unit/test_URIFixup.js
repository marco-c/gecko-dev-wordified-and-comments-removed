const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
var
pref
=
"
browser
.
fixup
.
typo
.
scheme
"
;
var
data
=
[
{
wrong
:
"
ttp
:
/
/
www
.
example
.
com
/
"
fixed
:
"
http
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
htp
:
/
/
www
.
example
.
com
/
"
fixed
:
"
http
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
ttps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
tps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
ps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
htps
:
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
ile
:
/
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
file
:
/
/
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
le
:
/
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
file
:
/
/
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
http
;
/
/
www
.
example
.
com
/
"
fixed
:
"
http
:
/
/
www
.
example
.
com
/
"
noPrefValue
:
"
http
:
/
/
http
;
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
https
/
/
www
.
example
.
com
/
"
fixed
:
"
https
:
/
/
www
.
example
.
com
/
"
noPrefValue
:
"
http
:
/
/
https
/
/
www
.
example
.
com
/
"
}
{
wrong
:
"
file
/
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
file
:
/
/
/
this
/
is
/
a
/
test
.
html
"
noPrefValue
:
"
http
:
/
/
file
/
/
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
https
:
/
/
example
.
com
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
https
:
/
/
example
.
com
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
whatever
:
/
/
this
/
is
/
a
/
test
.
html
"
fixed
:
"
whatever
:
/
/
this
/
is
/
a
/
test
.
html
"
}
{
wrong
:
"
whatever
:
/
/
user
:
pass
example
.
com
/
test
.
html
"
fixed
:
"
whatever
:
/
/
user
:
pass
example
.
com
/
test
.
html
"
}
{
wrong
:
"
example
.
com
/
test
.
com
"
fixed
:
"
http
:
/
/
example
.
com
/
%
20
test
.
com
"
noPrefValue
:
"
http
:
/
/
example
.
com
/
%
20
test
.
com
"
}
]
;
var
dontFixURIs
=
[
{
input
:
"
leadingSpaceUsername
example
.
com
/
"
testInfo
:
"
dont
fix
usernames
with
leading
space
"
}
{
input
:
"
trailingSpacerUsername
example
.
com
/
"
testInfo
:
"
dont
fix
usernames
with
trailing
space
"
}
{
input
:
"
multiple
words
username
example
.
com
/
"
testInfo
:
"
dont
fix
usernames
with
multiple
spaces
"
}
{
input
:
"
one
spaceTwo
SpacesThree
Spaces
example
.
com
/
"
testInfo
:
"
dont
match
multiple
consecutive
spaces
"
}
{
input
:
"
dontMatchCredentialsWithSpaces
:
secret
password
example
.
com
/
"
testInfo
:
"
dont
fix
credentials
with
spaces
"
}
]
;
var
len
=
data
.
length
;
add_task
(
async
function
setup
(
)
{
Services
.
search
.
wrappedJSObject
.
errorToThrowInTest
=
"
Settings
"
;
PromiseTestUtils
.
expectUncaughtRejection
(
/
Fake
Settings
error
during
search
service
initialization
.
/
)
;
try
{
await
setupSearchService
(
)
;
}
catch
{
}
}
)
;
add_task
(
function
test_unset_pref_fixes_typos
(
)
{
Services
.
prefs
.
clearUserPref
(
pref
)
;
for
(
let
i
=
0
;
i
<
len
;
+
+
i
)
{
let
item
=
data
[
i
]
;
let
{
preferredURI
}
=
Services
.
uriFixup
.
getFixupURIInfo
(
item
.
wrong
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
Assert
.
equal
(
preferredURI
.
spec
item
.
fixed
)
;
}
}
)
;
add_task
(
function
test_false_pref_keeps_typos
(
)
{
Services
.
prefs
.
setBoolPref
(
pref
false
)
;
for
(
let
i
=
0
;
i
<
len
;
+
+
i
)
{
let
item
=
data
[
i
]
;
let
{
preferredURI
}
=
Services
.
uriFixup
.
getFixupURIInfo
(
item
.
wrong
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
Assert
.
equal
(
preferredURI
.
spec
item
.
noPrefValue
|
|
item
.
wrong
)
;
}
}
)
;
add_task
(
function
test_true_pref_fixes_typos
(
)
{
Services
.
prefs
.
setBoolPref
(
pref
true
)
;
for
(
let
i
=
0
;
i
<
len
;
+
+
i
)
{
let
item
=
data
[
i
]
;
let
{
preferredURI
}
=
Services
.
uriFixup
.
getFixupURIInfo
(
item
.
wrong
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
Assert
.
equal
(
preferredURI
.
spec
item
.
fixed
)
;
}
}
)
;
add_task
(
function
test_dont_fix_uris
(
)
{
let
dontFixLength
=
dontFixURIs
.
length
;
for
(
let
i
=
0
;
i
<
dontFixLength
;
i
+
+
)
{
let
testCase
=
dontFixURIs
[
i
]
;
Assert
.
throws
(
(
)
=
>
{
Services
.
uriFixup
.
getFixupURIInfo
(
testCase
.
input
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
}
/
NS_ERROR_MALFORMED_URI
/
testCase
.
testInfo
)
;
}
}
)
;
