"
use
strict
"
;
const
{
UrlbarTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
)
;
const
{
SearchTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
sys
.
mjs
"
)
;
SearchTestUtils
.
init
(
this
)
;
const
kSearchEngineID
=
"
browser_urifixup_search_engine
"
;
const
kSearchEngineURL
=
"
https
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
;
const
kPrivateSearchEngineID
=
"
browser_urifixup_search_engine_private
"
;
const
kPrivateSearchEngineURL
=
"
https
:
/
/
example
.
com
/
?
private
=
{
searchTerms
}
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
true
]
[
"
browser
.
search
.
separatePrivateDefault
"
true
]
]
}
)
;
let
oldCurrentEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
oldPrivateEngine
=
await
Services
.
search
.
getDefaultPrivate
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
kSearchEngineID
search_url
:
"
https
:
/
/
example
.
com
/
"
search_url_get_params
:
"
search
=
{
searchTerms
}
"
}
)
;
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
kSearchEngineID
)
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
kPrivateSearchEngineID
search_url
:
"
https
:
/
/
example
.
com
/
"
search_url_get_params
:
"
private
=
{
searchTerms
}
"
}
)
;
await
Services
.
search
.
setDefaultPrivate
(
Services
.
search
.
getEngineByName
(
kPrivateSearchEngineID
)
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
setDefault
(
oldCurrentEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
Services
.
search
.
setDefaultPrivate
(
oldPrivateEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
}
)
;
}
)
;
add_task
(
async
function
test
(
)
{
const
setValueFns
=
[
(
value
win
)
=
>
{
win
.
gURLBar
.
value
=
value
;
}
(
value
win
)
=
>
{
return
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
waitForFocus
:
SimpleTest
.
waitForFocus
value
}
)
;
}
]
;
for
(
let
value
of
[
"
foo
bar
"
"
brokenprotocol
:
somethingelse
"
]
)
{
for
(
let
setValueFn
of
setValueFns
)
{
for
(
let
inPrivateWindow
of
[
false
true
]
)
{
await
do_test
(
value
setValueFn
inPrivateWindow
)
;
}
}
}
}
)
;
async
function
do_test
(
value
setValueFn
inPrivateWindow
)
{
info
(
Search
{
value
}
in
a
{
inPrivateWindow
?
"
private
"
:
"
normal
"
}
window
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
inPrivateWindow
}
)
;
win
.
gURLBar
.
focus
(
)
;
await
setValueFn
(
value
win
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
win
)
;
let
escapedValue
=
encodeURIComponent
(
value
)
.
replace
(
"
%
20
"
"
+
"
)
;
let
searchEngineUrl
=
inPrivateWindow
?
kPrivateSearchEngineURL
:
kSearchEngineURL
;
let
expectedURL
=
searchEngineUrl
.
replace
(
"
{
searchTerms
}
"
escapedValue
)
;
await
BrowserTestUtils
.
browserLoaded
(
win
.
gBrowser
.
selectedBrowser
false
expectedURL
)
;
Assert
.
equal
(
win
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
expectedURL
"
New
tab
should
have
loaded
with
expected
url
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
