"
use
strict
"
;
add_task
(
async
function
(
)
{
const
outer
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
docshell
/
test
/
browser
/
file_onbeforeunload_nested_outer
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
outer
async
browser
=
>
{
let
inner
=
browser
.
browsingContext
.
children
[
0
]
;
await
SpecialPowers
.
spawn
(
inner
[
]
(
)
=
>
{
let
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
content
.
addEventListener
(
"
beforeunload
"
e
=
>
{
e
.
preventDefault
(
)
;
resolve
(
)
;
}
{
once
:
true
}
)
;
content
.
beforeunloadPromise
=
promise
;
}
)
;
let
beforeunloadFired
=
SpecialPowers
.
spawn
(
browser
.
browsingContext
.
children
[
0
]
[
]
(
)
=
>
{
return
content
.
beforeunloadPromise
;
}
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
.
then
(
(
)
=
>
"
loaded
"
)
;
let
timeout
=
new
Promise
(
resolve
=
>
setTimeout
(
(
)
=
>
resolve
(
"
timeout
"
)
3000
)
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
0
0
{
}
inner
true
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
"
https
:
/
/
example
.
com
/
"
)
;
await
beforeunloadFired
;
is
(
await
Promise
.
race
(
[
loaded
timeout
]
)
"
timeout
"
"
Timed
out
because
the
load
was
blocked
by
beforeunload
.
"
)
;
}
)
;
}
)
;
