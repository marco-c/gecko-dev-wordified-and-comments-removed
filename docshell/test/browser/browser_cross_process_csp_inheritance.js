"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
TEST_URI
=
TEST_PATH
+
"
file_cross_process_csp_inheritance
.
html
"
;
const
DATA_URI
=
"
data
:
text
/
html
<
html
>
test
-
same
-
diff
-
process
-
csp
-
inhertiance
<
/
html
>
"
;
const
FISSION_ENABLED
=
SpecialPowers
.
useRemoteSubframes
;
function
getCurrentPID
(
aBrowser
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
]
(
)
=
>
{
return
Services
.
appinfo
.
processID
;
}
)
;
}
function
getCurrentURI
(
aBrowser
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
]
(
)
=
>
{
let
channel
=
content
.
docShell
.
currentDocumentChannel
;
return
channel
.
URI
.
asciiSpec
;
}
)
;
}
function
verifyResult
(
aTestName
aBrowser
aDataURI
aPID
aSamePID
aFissionEnabled
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
{
aTestName
aDataURI
aPID
aSamePID
aFissionEnabled
}
]
async
function
(
{
aTestName
aDataURI
aPID
aSamePID
aFissionEnabled
}
)
{
let
channel
=
content
.
docShell
.
currentDocumentChannel
;
is
(
channel
.
URI
.
asciiSpec
aDataURI
aTestName
+
"
:
correct
data
uri
loaded
"
)
;
let
pid
=
Services
.
appinfo
.
processID
;
if
(
aSamePID
)
{
is
(
pid
aPID
aTestName
+
"
:
process
ID
needs
to
be
identical
"
)
;
}
else
if
(
aFissionEnabled
)
{
todo
(
false
pid
=
=
aPID
"
:
process
ID
needs
to
be
different
in
fission
"
)
;
}
else
{
isnot
(
pid
aPID
aTestName
+
"
:
process
ID
needs
to
be
different
"
)
;
}
let
cspOBJ
=
JSON
.
parse
(
content
.
document
.
cspJSON
)
;
let
policies
=
cspOBJ
[
"
csp
-
policies
"
]
;
is
(
policies
.
length
1
"
should
be
one
policy
"
)
;
let
policy
=
policies
[
0
]
;
is
(
policy
[
"
script
-
src
"
]
"
'
none
'
"
aTestName
+
"
:
script
-
src
directive
matches
"
)
;
}
)
;
}
async
function
simulateCspInheritanceForNewTab
(
aTestName
aSamePID
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
function
(
browser
)
{
let
currentURI
=
await
getCurrentURI
(
gBrowser
.
selectedBrowser
)
;
is
(
currentURI
TEST_URI
aTestName
+
"
:
correct
test
uri
loaded
"
)
;
let
pid
=
await
getCurrentPID
(
gBrowser
.
selectedBrowser
)
;
let
loadPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
DATA_URI
true
)
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
testLink
"
{
}
gBrowser
.
selectedBrowser
)
;
let
tab
=
await
loadPromise
;
gBrowser
.
selectTabAtIndex
(
2
)
;
await
verifyResult
(
aTestName
gBrowser
.
selectedBrowser
DATA_URI
pid
aSamePID
FISSION_ENABLED
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
add_task
(
async
function
test_csp_inheritance_diff_process
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
noopener
.
newprocess
.
enabled
"
true
]
]
}
)
;
await
simulateCspInheritanceForNewTab
(
"
diff
-
process
-
inheritance
"
false
)
;
}
)
;
add_task
(
async
function
test_csp_inheritance_same_process
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
noopener
.
newprocess
.
enabled
"
false
]
]
}
)
;
await
simulateCspInheritanceForNewTab
(
"
same
-
process
-
inheritance
"
true
)
;
}
)
;
