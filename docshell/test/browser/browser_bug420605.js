const
{
PlacesTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
sys
.
mjs
"
)
;
add_task
(
async
function
test
(
)
{
var
pageurl
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
docshell
/
test
/
browser
/
file_bug420605
.
html
"
;
var
fragmenturl
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
docshell
/
test
/
browser
/
file_bug420605
.
html
#
firefox
"
;
function
getNavHistoryEntry
(
aURI
)
{
var
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
options
.
queryType
=
Ci
.
nsINavHistoryQueryOptions
.
QUERY_TYPE_HISTORY
;
options
.
maxResults
=
1
;
var
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
uri
=
aURI
;
var
result
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
if
(
!
result
.
root
.
childCount
)
{
return
null
;
}
return
result
.
root
.
getChild
(
0
)
;
}
var
originalFavicon
;
var
_clickLinkTimes
=
0
;
function
clickLinkIfReady
(
)
{
_clickLinkTimes
+
+
;
if
(
_clickLinkTimes
=
=
2
)
{
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
firefox
-
link
"
{
}
gBrowser
.
selectedBrowser
)
;
}
}
function
onPageLoad
(
)
{
clickLinkIfReady
(
)
;
}
var
info
=
getNavHistoryEntry
(
makeURI
(
pageurl
)
)
;
ok
(
!
info
"
The
test
page
must
not
have
been
visited
already
.
"
)
;
info
=
getNavHistoryEntry
(
makeURI
(
fragmenturl
)
)
;
ok
(
!
info
"
The
fragment
test
page
must
not
have
been
visited
already
.
"
)
;
let
promiseIcon1
=
PlacesTestUtils
.
waitForNotification
(
"
favicon
-
changed
"
events
=
>
events
.
some
(
e
=
>
{
if
(
e
.
url
=
=
pageurl
)
{
ok
(
e
.
faviconUrl
"
Favicon
value
is
not
null
for
page
without
fragment
.
"
)
;
originalFavicon
=
e
.
faviconUrl
;
clickLinkIfReady
(
)
;
return
true
;
}
return
false
;
}
)
"
places
"
)
;
let
promiseIcon2
=
PlacesTestUtils
.
waitForNotification
(
"
favicon
-
changed
"
events
=
>
events
.
some
(
e
=
>
{
if
(
e
.
url
=
=
fragmenturl
)
{
is
(
e
.
faviconUrl
originalFavicon
"
New
favicon
should
be
same
as
original
favicon
.
"
)
;
ok
(
e
.
faviconUrl
"
Favicon
value
is
not
null
for
page
without
fragment
.
"
)
;
originalFavicon
=
e
.
faviconUrl
;
clickLinkIfReady
(
)
;
return
true
;
}
return
false
;
}
)
"
places
"
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
BrowserTestUtils
.
waitForContentEvent
(
gBrowser
.
selectedBrowser
"
DOMContentLoaded
"
true
)
.
then
(
onPageLoad
)
;
BrowserTestUtils
.
loadURIString
(
gBrowser
.
selectedBrowser
pageurl
)
;
await
promiseIcon1
;
await
promiseIcon2
;
info
=
getNavHistoryEntry
(
makeURI
(
fragmenturl
)
)
;
ok
(
info
"
There
must
be
a
history
entry
for
the
fragment
.
"
)
;
ok
(
info
.
icon
"
The
history
entry
must
have
an
associated
favicon
.
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
