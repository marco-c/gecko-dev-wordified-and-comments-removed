"
use
strict
"
;
const
ACTOR_NAME
=
"
TopLevelNavigationDelegate
"
;
const
ACTOR_MODULE_URI
=
getRootDirectory
(
gTestPath
)
+
"
TestTopLevelNavigationDelegate
.
jsm
"
;
const
IFRAME_PAGE
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
dummy_iframe_page
.
html
"
;
async
function
doesDelegateFor
(
browser
uriString
)
{
let
delegatePromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
TopLevelNavigationDelegateEvent
"
false
null
true
)
;
BrowserTestUtils
.
loadURI
(
browser
uriString
)
;
await
delegatePromise
;
Assert
.
ok
(
true
Delegated
navigation
for
{
uriString
}
)
;
let
parentActor
=
browser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
ACTOR_NAME
)
;
Assert
.
equal
(
parentActor
.
seenURIStrings
.
shift
(
)
uriString
"
TopLevelNavigationDelegateParent
saw
the
load
attempt
.
"
)
;
}
async
function
doesNotDelegateFor
(
browser
uriString
hashChange
=
false
)
{
let
loaded
=
hashChange
?
BrowserTestUtils
.
waitForContentEvent
(
browser
"
hashchange
"
true
)
:
BrowserTestUtils
.
browserLoaded
(
browser
false
uriString
)
;
BrowserTestUtils
.
loadURI
(
browser
uriString
)
;
await
loaded
;
Assert
.
ok
(
true
Successfully
navigated
to
{
uriString
}
)
;
}
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
"
async
browser
=
>
{
ChromeUtils
.
registerWindowActor
(
ACTOR_NAME
{
child
:
{
moduleURI
:
ACTOR_MODULE_URI
}
parent
:
{
moduleURI
:
ACTOR_MODULE_URI
}
messageManagerGroups
:
[
"
browsers
"
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
ChromeUtils
.
unregisterWindowActor
(
ACTOR_NAME
)
;
}
)
;
await
doesDelegateFor
(
browser
"
http
:
/
/
example
.
org
/
"
)
;
await
doesDelegateFor
(
browser
"
http
:
/
/
example
.
org
/
2
"
)
;
await
doesDelegateFor
(
browser
"
http
:
/
/
example
.
org
/
2
#
test
"
)
;
await
doesNotDelegateFor
(
browser
"
https
:
/
/
example
.
com
/
"
)
;
await
doesNotDelegateFor
(
browser
"
https
:
/
/
example
.
com
/
#
test
"
true
)
;
await
doesNotDelegateFor
(
browser
"
http
:
/
/
example
.
com
/
2
"
)
;
await
doesNotDelegateFor
(
browser
"
https
:
/
/
example
.
com
/
3
"
)
;
await
doesNotDelegateFor
(
browser
IFRAME_PAGE
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
iframe1
=
content
.
document
.
getElementById
(
"
frame1
"
)
;
iframe1
.
remove
(
)
;
iframe1
.
src
=
"
http
:
/
/
example
.
com
"
;
let
load1
=
ContentTaskUtils
.
waitForEvent
(
iframe1
"
load
"
)
;
content
.
document
.
body
.
appendChild
(
iframe1
)
;
await
load1
;
let
iframe2
=
content
.
document
.
getElementById
(
"
frame2
"
)
;
iframe2
.
remove
(
)
;
iframe2
.
src
=
"
http
:
/
/
example
.
org
"
;
let
load2
=
ContentTaskUtils
.
waitForEvent
(
iframe2
"
load
"
)
;
content
.
document
.
body
.
appendChild
(
iframe2
)
;
await
load2
;
}
)
;
ChromeUtils
.
unregisterWindowActor
(
ACTOR_NAME
)
;
await
doesNotDelegateFor
(
browser
"
http
:
/
/
example
.
org
/
2
"
)
;
await
doesNotDelegateFor
(
browser
"
https
:
/
/
example
.
org
/
3
"
)
;
await
doesNotDelegateFor
(
browser
"
https
:
/
/
example
.
org
/
"
)
;
await
doesNotDelegateFor
(
browser
"
https
:
/
/
example
.
org
/
#
test
"
true
)
;
}
)
;
}
)
;
