addEventListener
(
"
frames
-
loaded
"
e
=
>
sendAsyncMessage
(
"
test
:
frames
-
loaded
"
)
true
true
)
;
let
requestObserver
=
{
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
http
-
on
-
opening
-
request
"
)
{
getChildDocShells
(
)
.
map
(
ds
=
>
{
ds
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsILoadContext
)
.
associatedWindow
;
}
)
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
}
;
Services
.
obs
.
addObserver
(
requestObserver
"
http
-
on
-
opening
-
request
"
)
;
addEventListener
(
"
unload
"
e
=
>
{
if
(
e
.
target
=
=
this
)
{
Services
.
obs
.
removeObserver
(
requestObserver
"
http
-
on
-
opening
-
request
"
)
;
}
}
)
;
function
getChildDocShells
(
)
{
return
docShell
.
getAllDocShellsInSubtree
(
Ci
.
nsIDocShellTreeItem
.
typeAll
Ci
.
nsIDocShell
.
ENUMERATE_FORWARDS
)
;
}
