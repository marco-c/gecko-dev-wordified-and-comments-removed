"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
MULTIPART_URI
=
{
TEST_PATH
}
file_basic_multipart
.
sjs
;
add_setup
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
multipart
-
mixed
-
replace
.
enabled_for_document
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
viewsource_multipart_uri
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
browser
=
>
{
BrowserTestUtils
.
startLoadingURIString
(
browser
MULTIPART_URI
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
is
(
browser
.
currentURI
.
spec
MULTIPART_URI
)
;
await
TestUtils
.
waitForCondition
(
async
(
)
=
>
{
let
value
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
headers
=
content
.
document
.
querySelectorAll
(
"
h1
"
)
;
is
(
headers
.
length
1
"
only
one
h1
should
be
present
"
)
;
return
headers
[
0
]
.
textContent
;
}
)
;
ok
(
value
=
=
"
First
"
|
|
value
=
=
"
Second
"
"
some
other
value
was
found
?
"
)
;
return
value
=
=
"
Second
"
;
}
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
view
-
source
:
{
MULTIPART_URI
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
viewSourceContent
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
return
content
.
document
.
body
.
textContent
;
}
)
;
ok
(
viewSourceContent
.
includes
(
"
<
h1
>
First
<
/
h1
>
"
)
"
first
header
"
)
;
ok
(
viewSourceContent
.
includes
(
"
<
h1
>
Second
<
/
h1
>
"
)
"
second
header
"
)
;
ok
(
viewSourceContent
.
includes
(
"
BOUNDARY
"
)
"
boundary
"
)
;
}
)
;
}
)
;
