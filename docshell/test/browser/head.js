function
makeTimelineTest
(
frameScriptName
url
)
{
info
(
"
in
timelineTest
"
)
;
return
async
function
(
)
{
info
(
"
in
in
timelineTest
"
)
;
waitForExplicitFinish
(
)
;
await
timelineTestOpenUrl
(
url
)
;
const
here
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
docshell
/
test
/
browser
/
"
;
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
loadFrameScript
(
here
+
"
frame
-
head
.
js
"
false
)
;
mm
.
loadFrameScript
(
here
+
frameScriptName
false
)
;
mm
.
addMessageListener
(
"
browser
:
test
:
ok
"
function
(
message
)
{
ok
(
message
.
data
.
value
message
.
data
.
message
)
;
}
)
;
mm
.
addMessageListener
(
"
browser
:
test
:
info
"
function
(
message
)
{
info
(
message
.
data
.
message
)
;
}
)
;
mm
.
addMessageListener
(
"
browser
:
test
:
finish
"
function
(
ignore
)
{
gBrowser
.
removeCurrentTab
(
)
;
finish
(
)
;
}
)
;
}
;
}
function
timelineTestOpenUrl
(
url
)
{
window
.
focus
(
)
;
let
tabSwitchPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
window
.
gBrowser
.
addEventListener
(
"
TabSwitchDone
"
function
(
)
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
let
loadPromise
=
new
Promise
(
function
(
resolve
reject
)
{
let
tab
=
window
.
gBrowser
.
selectedTab
=
window
.
gBrowser
.
addTab
(
url
)
;
let
linkedBrowser
=
tab
.
linkedBrowser
;
linkedBrowser
.
addEventListener
(
"
load
"
function
(
)
{
resolve
(
tab
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
)
;
return
Promise
.
all
(
[
tabSwitchPromise
loadPromise
]
)
.
then
(
(
[
_
tab
]
)
=
>
tab
)
;
}
function
runCharsetTest
(
url
check1
charset
check2
)
{
waitForExplicitFinish
(
)
;
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
true
)
.
then
(
afterOpen
)
;
function
afterOpen
(
)
{
if
(
charset
)
{
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
.
then
(
afterChangeCharset
)
;
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
check1
)
.
then
(
(
)
=
>
{
BrowserSetForcedCharacterSet
(
charset
)
;
}
)
;
}
else
{
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
check1
)
.
then
(
(
)
=
>
{
gBrowser
.
removeCurrentTab
(
)
;
finish
(
)
;
}
)
;
}
}
function
afterChangeCharset
(
)
{
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
check2
)
.
then
(
(
)
=
>
{
gBrowser
.
removeCurrentTab
(
)
;
finish
(
)
;
}
)
;
}
}
