"
use
strict
"
;
const
BUILDER
=
"
http
:
/
/
mochi
.
test
:
8888
/
document
-
builder
.
sjs
?
html
=
"
;
const
PAGE_1
=
BUILDER
+
encodeURIComponent
(
<
html
>
<
body
>
Page
1
<
/
body
>
<
/
html
>
)
;
const
PAGE_2
=
BUILDER
+
encodeURIComponent
(
<
html
>
<
body
>
Page
2
<
/
body
>
<
/
html
>
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
history
.
collectWireframes
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
PAGE_1
async
browser
=
>
{
let
sh
=
browser
.
browsingContext
.
sessionHistory
;
Assert
.
equal
(
sh
.
count
1
"
Got
the
right
SessionHistory
entry
count
.
"
)
;
Assert
.
ok
(
!
sh
.
getEntryAtIndex
(
0
)
.
wireframe
"
No
wireframe
for
the
loaded
entry
.
"
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
PAGE_2
)
;
BrowserTestUtils
.
loadURI
(
browser
PAGE_2
)
;
await
loaded
;
Assert
.
equal
(
sh
.
count
2
"
Got
the
right
SessionHistory
entry
count
.
"
)
;
Assert
.
ok
(
sh
.
getEntryAtIndex
(
0
)
.
wireframe
"
A
wireframe
was
captured
for
the
first
entry
.
"
)
;
Assert
.
ok
(
!
sh
.
getEntryAtIndex
(
1
)
.
wireframe
"
No
wireframe
for
the
loaded
entry
.
"
)
;
loaded
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
browser
.
goBack
(
)
;
await
loaded
;
todo
(
sh
.
getEntryAtIndex
(
1
)
.
wireframe
"
A
wireframe
was
captured
for
the
second
entry
.
"
)
;
todo
(
!
sh
.
getEntryAtIndex
(
0
)
.
wireframe
"
No
wireframe
for
the
loaded
entry
.
"
)
;
loaded
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
browser
.
goForward
(
)
;
await
loaded
;
Assert
.
equal
(
sh
.
count
2
"
Got
the
right
SessionHistory
entry
count
.
"
)
;
Assert
.
ok
(
sh
.
getEntryAtIndex
(
0
)
.
wireframe
"
A
wireframe
was
captured
for
the
first
entry
.
"
)
;
Assert
.
ok
(
!
sh
.
getEntryAtIndex
(
1
)
.
wireframe
"
No
wireframe
for
the
loaded
entry
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
history
.
pushState
(
{
}
"
"
"
nothing
-
1
.
html
"
)
;
content
.
history
.
pushState
(
{
}
"
"
"
nothing
-
2
.
html
"
)
;
}
)
;
Assert
.
equal
(
sh
.
count
4
"
Got
the
right
SessionHistory
entry
count
.
"
)
;
Assert
.
ok
(
sh
.
getEntryAtIndex
(
0
)
.
wireframe
"
A
wireframe
was
captured
for
the
first
entry
.
"
)
;
Assert
.
ok
(
sh
.
getEntryAtIndex
(
1
)
.
wireframe
"
A
wireframe
was
captured
for
the
second
entry
.
"
)
;
Assert
.
ok
(
sh
.
getEntryAtIndex
(
2
)
.
wireframe
"
A
wireframe
was
captured
for
the
third
entry
.
"
)
;
Assert
.
ok
(
!
sh
.
getEntryAtIndex
(
3
)
.
wireframe
"
No
wireframe
for
the
loaded
entry
.
"
)
;
let
wireframe
=
sh
.
getEntryAtIndex
(
2
)
.
wireframe
;
sh
.
getEntryAtIndex
(
2
)
.
wireframe
=
null
;
Assert
.
equal
(
sh
.
getEntryAtIndex
(
2
)
.
wireframe
null
"
Successfully
cleared
wireframe
.
"
)
;
sh
.
getEntryAtIndex
(
3
)
.
wireframe
=
wireframe
;
Assert
.
deepEqual
(
sh
.
getEntryAtIndex
(
3
)
.
wireframe
wireframe
"
Successfully
wrote
a
wireframe
to
an
nsISHEntry
.
"
)
;
}
)
;
}
)
;
