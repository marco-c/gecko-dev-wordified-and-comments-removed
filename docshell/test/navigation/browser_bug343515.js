var
testPath
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
docshell
/
test
/
navigation
/
"
;
var
ctx
=
{
}
;
add_task
(
async
function
(
)
{
ctx
.
tab0
=
gBrowser
.
selectedTab
;
ctx
.
tab0Browser
=
gBrowser
.
getBrowserForTab
(
ctx
.
tab0
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
ctx
.
tab0Browser
.
docShellIsActive
"
Timed
out
waiting
for
initial
tab
to
be
active
.
"
)
;
ctx
.
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
testPath
+
"
bug343515_pg1
.
html
"
)
;
ctx
.
tab1Browser
=
gBrowser
.
getBrowserForTab
(
ctx
.
tab1
)
;
await
BrowserTestUtils
.
browserLoaded
(
ctx
.
tab1Browser
)
;
is
(
testPath
+
"
bug343515_pg1
.
html
"
ctx
.
tab1Browser
.
currentURI
.
spec
"
Got
expected
tab
1
url
in
step
2
"
)
;
ok
(
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
still
be
active
"
)
;
ok
(
!
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
not
be
active
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
ctx
.
tab1
)
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
ctx
.
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
testPath
+
"
bug343515_pg2
.
html
"
)
;
ctx
.
tab2Browser
=
gBrowser
.
getBrowserForTab
(
ctx
.
tab2
)
;
await
BrowserTestUtils
.
browserLoaded
(
ctx
.
tab2Browser
)
;
is
(
testPath
+
"
bug343515_pg2
.
html
"
ctx
.
tab2Browser
.
currentURI
.
spec
"
Got
expected
tab
2
url
in
step
3
"
)
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
ok
(
!
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
inactive
"
)
;
await
SpecialPowers
.
spawn
(
ctx
.
tab2Browser
[
]
async
function
(
)
{
Assert
.
equal
(
content
.
frames
.
length
2
"
Tab
2
should
have
2
iframes
"
)
;
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
{
info
(
"
step
3
frame
"
+
i
+
"
info
:
"
+
content
.
frames
[
i
]
.
location
)
;
let
bc
=
content
.
frames
[
i
]
.
browsingContext
;
Assert
.
ok
(
!
bc
.
isActive
Tab2
iframe
{
i
}
should
be
inactive
)
;
}
}
)
;
BrowserTestUtils
.
loadURI
(
ctx
.
tab2Browser
testPath
+
"
bug343515_pg3
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
ctx
.
tab2Browser
)
;
async
function
checkTab2Active
(
outerExpected
)
{
await
SpecialPowers
.
spawn
(
ctx
.
tab2Browser
[
outerExpected
]
async
function
(
expected
)
{
function
isActive
(
aWindow
)
{
var
docshell
=
aWindow
.
docShell
;
info
(
checking
{
docshell
.
browsingContext
.
id
}
)
;
return
docshell
.
browsingContext
.
isActive
;
}
let
active
=
expected
?
"
active
"
:
"
inactive
"
;
Assert
.
equal
(
content
.
frames
.
length
2
"
Tab
2
should
have
2
iframes
"
)
;
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
{
info
(
"
step
4
frame
"
+
i
+
"
info
:
"
+
content
.
frames
[
i
]
.
location
)
;
}
Assert
.
equal
(
content
.
frames
[
0
]
.
frames
.
length
1
"
Tab
2
iframe
0
should
have
1
iframes
"
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
)
expected
Tab2
iframe
0
should
be
{
active
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
.
frames
[
0
]
)
expected
Tab2
iframe
0
subiframe
0
should
be
{
active
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
1
]
)
expected
Tab2
iframe
1
should
be
{
active
}
)
;
}
)
;
}
is
(
testPath
+
"
bug343515_pg3
.
html
"
ctx
.
tab2Browser
.
currentURI
.
spec
"
Got
expected
tab
2
url
in
step
4
"
)
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
await
checkTab2Active
(
false
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
ctx
.
tab2
)
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
!
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
inactive
"
)
;
ok
(
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
active
"
)
;
await
checkTab2Active
(
true
)
;
let
backDone
=
BrowserTestUtils
.
waitForContentEvent
(
ctx
.
tab2Browser
"
pageshow
"
)
;
ctx
.
tab2Browser
.
goBack
(
)
;
await
backDone
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
!
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
inactive
"
)
;
ok
(
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
active
"
)
;
is
(
testPath
+
"
bug343515_pg2
.
html
"
ctx
.
tab2Browser
.
currentURI
.
spec
"
Got
expected
tab
2
url
in
step
5
"
)
;
await
SpecialPowers
.
spawn
(
ctx
.
tab2Browser
[
]
async
function
(
)
{
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
{
let
bc
=
content
.
frames
[
i
]
.
browsingContext
;
Assert
.
ok
(
bc
.
isActive
Tab2
iframe
{
i
}
should
be
active
)
;
}
}
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
ctx
.
tab1
)
;
BrowserTestUtils
.
loadURI
(
ctx
.
tab1Browser
testPath
+
"
bug343515_pg3
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
ctx
.
tab1Browser
)
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
is
(
testPath
+
"
bug343515_pg3
.
html
"
ctx
.
tab1Browser
.
currentURI
.
spec
"
Got
expected
tab
1
url
in
step
6
"
)
;
await
SpecialPowers
.
spawn
(
ctx
.
tab1Browser
[
]
async
function
(
)
{
function
isActive
(
aWindow
)
{
var
docshell
=
aWindow
.
docShell
;
info
(
checking
{
docshell
.
browsingContext
.
id
}
)
;
return
docshell
.
browsingContext
.
isActive
;
}
Assert
.
ok
(
isActive
(
content
.
frames
[
0
]
)
"
Tab1
iframe
0
should
be
active
"
)
;
Assert
.
ok
(
isActive
(
content
.
frames
[
0
]
.
frames
[
0
]
)
"
Tab1
iframe
0
subiframe
0
should
be
active
"
)
;
Assert
.
ok
(
isActive
(
content
.
frames
[
1
]
)
"
Tab1
iframe
1
should
be
active
"
)
;
}
)
;
ok
(
!
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
inactive
"
)
;
await
SpecialPowers
.
spawn
(
ctx
.
tab2Browser
[
]
async
function
(
)
{
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
{
let
bc
=
content
.
frames
[
i
]
.
browsingContext
;
Assert
.
ok
(
!
bc
.
isActive
Tab2
iframe
{
i
}
should
be
inactive
)
;
}
}
)
;
let
forwardDone
=
BrowserTestUtils
.
waitForContentEvent
(
ctx
.
tab2Browser
"
pageshow
"
)
;
ctx
.
tab2Browser
.
goForward
(
)
;
await
forwardDone
;
async
function
checkBrowser
(
browser
outerTabNum
outerActive
)
{
let
data
=
{
tabNum
:
outerTabNum
active
:
outerActive
}
;
await
SpecialPowers
.
spawn
(
browser
[
data
]
async
function
(
{
tabNum
active
}
)
{
function
isActive
(
aWindow
)
{
var
docshell
=
aWindow
.
docShell
;
info
(
checking
{
docshell
.
browsingContext
.
id
}
)
;
return
docshell
.
browsingContext
.
isActive
;
}
let
activestr
=
active
?
"
active
"
:
"
inactive
"
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
)
active
Tab
{
tabNum
}
iframe
0
should
be
{
activestr
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
.
frames
[
0
]
)
active
Tab
{
tabNum
}
iframe
0
subiframe
0
should
be
{
activestr
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
1
]
)
active
Tab
{
tabNum
}
iframe
1
should
be
{
activestr
}
)
;
}
)
;
}
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
is
(
testPath
+
"
bug343515_pg3
.
html
"
ctx
.
tab2Browser
.
currentURI
.
spec
"
Got
expected
tab
2
url
in
step
7
"
)
;
await
checkBrowser
(
ctx
.
tab1Browser
1
true
)
;
ok
(
!
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
inactive
"
)
;
await
checkBrowser
(
ctx
.
tab2Browser
2
false
)
;
BrowserTestUtils
.
removeTab
(
ctx
.
tab1
)
;
BrowserTestUtils
.
removeTab
(
ctx
.
tab2
)
;
}
)
;
