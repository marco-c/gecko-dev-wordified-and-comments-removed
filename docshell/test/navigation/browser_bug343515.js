var
testPath
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
docshell
/
test
/
navigation
/
"
;
var
ctx
=
{
}
;
function
nShotsListener
(
aElem
aType
aCallback
aCount
)
{
let
count
=
aCount
;
aElem
.
addEventListener
(
aType
function
listenerCallback
(
)
{
if
(
-
-
count
=
=
0
)
{
aElem
.
removeEventListener
(
aType
listenerCallback
true
)
;
executeSoon
(
aCallback
)
;
}
}
true
)
;
}
function
oneShotListener
(
aElem
aType
aCallback
)
{
nShotsListener
(
aElem
aType
aCallback
1
)
;
}
function
waitForPageshow
(
aBrowser
callback
)
{
return
ContentTask
.
spawn
(
aBrowser
null
async
function
(
)
{
await
ContentTaskUtils
.
waitForEvent
(
this
"
pageshow
"
)
;
}
)
.
then
(
callback
)
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
warmup
.
enabled
"
false
]
]
}
)
.
then
(
step1
)
;
}
function
step1
(
)
{
ctx
.
tab0
=
gBrowser
.
selectedTab
;
ctx
.
tab0Browser
=
gBrowser
.
getBrowserForTab
(
ctx
.
tab0
)
;
ok
(
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
active
at
test
start
"
)
;
ctx
.
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
testPath
+
"
bug343515_pg1
.
html
"
)
;
ctx
.
tab1Browser
=
gBrowser
.
getBrowserForTab
(
ctx
.
tab1
)
;
oneShotListener
(
ctx
.
tab1Browser
"
load
"
step2
)
;
}
function
step2
(
)
{
is
(
testPath
+
"
bug343515_pg1
.
html
"
ctx
.
tab1Browser
.
currentURI
.
spec
"
Got
expected
tab
1
url
in
step
2
"
)
;
ok
(
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
still
be
active
"
)
;
ok
(
!
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
not
be
active
"
)
;
BrowserTestUtils
.
switchTab
(
gBrowser
ctx
.
tab1
)
.
then
(
(
)
=
>
{
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
ctx
.
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
testPath
+
"
bug343515_pg2
.
html
"
)
;
ctx
.
tab2Browser
=
gBrowser
.
getBrowserForTab
(
ctx
.
tab2
)
;
nShotsListener
(
ctx
.
tab2Browser
"
load
"
step3
3
)
;
}
)
;
}
function
step3
(
)
{
is
(
testPath
+
"
bug343515_pg2
.
html
"
ctx
.
tab2Browser
.
currentURI
.
spec
"
Got
expected
tab
2
url
in
step
3
"
)
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
ok
(
!
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
inactive
"
)
;
ContentTask
.
spawn
(
ctx
.
tab2Browser
null
async
function
(
)
{
Assert
.
equal
(
content
.
frames
.
length
2
"
Tab
2
should
have
2
iframes
"
)
;
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
{
info
(
"
step
3
frame
"
+
i
+
"
info
:
"
+
content
.
frames
[
i
]
.
location
)
;
let
docshell
=
content
.
frames
[
i
]
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
Assert
.
ok
(
!
docShell
.
isActive
Tab2
iframe
{
i
}
should
be
inactive
)
;
}
}
)
.
then
(
(
)
=
>
{
ctx
.
tab2Browser
.
loadURI
(
testPath
+
"
bug343515_pg3
.
html
"
)
;
nShotsListener
(
ctx
.
tab2Browser
"
load
"
step4
4
)
;
}
)
;
}
function
step4
(
)
{
function
checkTab2Active
(
expected
)
{
return
ContentTask
.
spawn
(
ctx
.
tab2Browser
expected
async
function
(
expected
)
{
function
isActive
(
aWindow
)
{
var
docshell
=
aWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
return
docshell
.
isActive
;
}
let
active
=
expected
?
"
active
"
:
"
inactive
"
;
Assert
.
equal
(
content
.
frames
.
length
2
"
Tab
2
should
have
2
iframes
"
)
;
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
info
(
"
step
4
frame
"
+
i
+
"
info
:
"
+
content
.
frames
[
i
]
.
location
)
;
Assert
.
equal
(
content
.
frames
[
0
]
.
frames
.
length
1
"
Tab
2
iframe
0
should
have
1
iframes
"
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
)
expected
Tab2
iframe
0
should
be
{
active
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
.
frames
[
0
]
)
expected
Tab2
iframe
0
subiframe
0
should
be
{
active
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
1
]
)
expected
Tab2
iframe
1
should
be
{
active
}
)
;
}
)
;
}
is
(
testPath
+
"
bug343515_pg3
.
html
"
ctx
.
tab2Browser
.
currentURI
.
spec
"
Got
expected
tab
2
url
in
step
4
"
)
;
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
checkTab2Active
(
false
)
.
then
(
(
)
=
>
{
return
BrowserTestUtils
.
switchTab
(
gBrowser
ctx
.
tab2
)
;
}
)
.
then
(
(
)
=
>
{
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
!
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
inactive
"
)
;
ok
(
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
active
"
)
;
return
checkTab2Active
(
true
)
;
}
)
.
then
(
(
)
=
>
{
waitForPageshow
(
ctx
.
tab2Browser
step5
)
;
ctx
.
tab2Browser
.
goBack
(
)
;
}
)
;
}
function
step5
(
)
{
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
!
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
inactive
"
)
;
ok
(
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
active
"
)
;
ContentTask
.
spawn
(
ctx
.
tab2Browser
null
async
function
(
)
{
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
{
let
docshell
=
content
.
frames
[
i
]
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
Assert
.
ok
(
docShell
.
isActive
Tab2
iframe
{
i
}
should
be
active
)
;
}
}
)
.
then
(
(
)
=
>
{
return
BrowserTestUtils
.
switchTab
(
gBrowser
ctx
.
tab1
)
;
}
)
.
then
(
(
)
=
>
{
ctx
.
tab1Browser
.
loadURI
(
testPath
+
"
bug343515_pg3
.
html
"
)
;
nShotsListener
(
ctx
.
tab1Browser
"
load
"
step6
4
)
;
}
)
;
}
function
step6
(
)
{
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
ContentTask
.
spawn
(
ctx
.
tab1Browser
null
async
function
(
)
{
function
isActive
(
aWindow
)
{
var
docshell
=
aWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
return
docshell
.
isActive
;
}
Assert
.
ok
(
isActive
(
content
.
frames
[
0
]
)
"
Tab1
iframe
0
should
be
active
"
)
;
Assert
.
ok
(
isActive
(
content
.
frames
[
0
]
.
frames
[
0
]
)
"
Tab1
iframe
0
subiframe
0
should
be
active
"
)
;
Assert
.
ok
(
isActive
(
content
.
frames
[
1
]
)
"
Tab1
iframe
1
should
be
active
"
)
;
}
)
.
then
(
(
)
=
>
{
ok
(
!
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
inactive
"
)
;
return
ContentTask
.
spawn
(
ctx
.
tab2Browser
null
async
function
(
)
{
for
(
var
i
=
0
;
i
<
content
.
frames
.
length
;
i
+
+
)
{
let
docshell
=
content
.
frames
[
i
]
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
Assert
.
ok
(
!
docShell
.
isActive
Tab2
iframe
{
i
}
should
be
inactive
)
;
}
}
)
;
}
)
.
then
(
(
)
=
>
{
waitForPageshow
(
ctx
.
tab2Browser
step7
)
;
ctx
.
tab2Browser
.
goForward
(
)
;
}
)
;
}
function
step7
(
)
{
function
checkBrowser
(
browser
tabNum
active
)
{
return
ContentTask
.
spawn
(
browser
{
tabNum
active
}
async
function
(
{
tabNum
active
}
)
{
function
isActive
(
aWindow
)
{
var
docshell
=
aWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
return
docshell
.
isActive
;
}
let
activestr
=
active
?
"
active
"
:
"
inactive
"
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
)
active
Tab
{
tabNum
}
iframe
0
should
be
{
activestr
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
0
]
.
frames
[
0
]
)
active
Tab
{
tabNum
}
iframe
0
subiframe
0
should
be
{
activestr
}
)
;
Assert
.
equal
(
isActive
(
content
.
frames
[
1
]
)
active
Tab
{
tabNum
}
iframe
1
should
be
{
activestr
}
)
;
}
)
;
}
ok
(
!
ctx
.
tab0Browser
.
docShellIsActive
"
Tab
0
should
be
inactive
"
)
;
ok
(
ctx
.
tab1Browser
.
docShellIsActive
"
Tab
1
should
be
active
"
)
;
checkBrowser
(
ctx
.
tab1Browser
1
true
)
.
then
(
(
)
=
>
{
ok
(
!
ctx
.
tab2Browser
.
docShellIsActive
"
Tab
2
should
be
inactive
"
)
;
return
checkBrowser
(
ctx
.
tab2Browser
2
false
)
;
}
)
.
then
(
(
)
=
>
{
allDone
(
)
;
}
)
;
}
function
allDone
(
)
{
gBrowser
.
removeTab
(
ctx
.
tab1
)
;
gBrowser
.
removeTab
(
ctx
.
tab2
)
;
finish
(
)
;
}
