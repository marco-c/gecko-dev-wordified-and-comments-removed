"
use
strict
"
;
const
FocusManager
=
Services
.
focus
;
const
SITE_URL_1
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
empty
.
html
"
;
const
SITE_URL_2
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
"
)
+
"
empty
.
html
"
;
add_task
(
async
function
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
SITE_URL_1
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
SITE_URL_2
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
const
pageNavigatedBackToSite1
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
pageshow
"
)
;
tab
.
linkedBrowser
.
goBack
(
)
;
await
pageNavigatedBackToSite1
;
const
pageHideForSite1Run
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
return
new
Promise
(
r
=
>
{
content
.
addEventListener
(
"
pagehide
"
function
(
)
{
const
start
=
Date
.
now
(
)
;
while
(
Date
.
now
(
)
-
start
<
2000
)
{
r
(
)
;
}
}
)
;
}
)
;
}
)
;
let
pageNavigatedBackToSite2
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
pageshow
"
)
;
tab
.
linkedBrowser
.
goForward
(
)
;
await
pageNavigatedBackToSite2
;
await
pageHideForSite1Run
;
await
new
Promise
(
r
=
>
{
setTimeout
(
r
2000
)
;
}
)
;
Assert
.
ok
(
!
!
FocusManager
.
activeContentBrowsingContext
"
active
browsing
context
in
content
should
be
non
-
null
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
