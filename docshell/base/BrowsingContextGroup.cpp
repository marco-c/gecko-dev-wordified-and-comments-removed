#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextBinding
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
ThrottledEventQueue
.
h
"
#
include
"
nsFocusManager
.
h
"
namespace
mozilla
{
namespace
dom
{
static
StaticRefPtr
<
BrowsingContextGroup
>
sChromeGroup
;
static
StaticAutoPtr
<
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
BrowsingContextGroup
>
>
>
sBrowsingContextGroups
;
already_AddRefed
<
BrowsingContextGroup
>
BrowsingContextGroup
:
:
GetOrCreate
(
uint64_t
aId
)
{
if
(
!
sBrowsingContextGroups
)
{
sBrowsingContextGroups
=
new
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
BrowsingContextGroup
>
>
(
)
;
ClearOnShutdown
(
&
sBrowsingContextGroups
)
;
}
auto
entry
=
sBrowsingContextGroups
-
>
LookupForAdd
(
aId
)
;
RefPtr
<
BrowsingContextGroup
>
group
=
entry
.
OrInsert
(
[
&
]
{
return
do_AddRef
(
new
BrowsingContextGroup
(
aId
)
)
;
}
)
;
return
group
.
forget
(
)
;
}
already_AddRefed
<
BrowsingContextGroup
>
BrowsingContextGroup
:
:
Create
(
)
{
return
GetOrCreate
(
nsContentUtils
:
:
GenerateBrowsingContextId
(
)
)
;
}
BrowsingContextGroup
:
:
BrowsingContextGroup
(
uint64_t
aId
)
:
mId
(
aId
)
{
mTimerEventQueue
=
ThrottledEventQueue
:
:
Create
(
GetMainThreadSerialEventTarget
(
)
"
BrowsingContextGroup
timer
queue
"
)
;
mWorkerEventQueue
=
ThrottledEventQueue
:
:
Create
(
GetMainThreadSerialEventTarget
(
)
"
BrowsingContextGroup
worker
queue
"
)
;
}
void
BrowsingContextGroup
:
:
Register
(
nsISupports
*
aContext
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aContext
)
;
mContexts
.
PutEntry
(
aContext
)
;
}
void
BrowsingContextGroup
:
:
Unregister
(
nsISupports
*
aContext
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aContext
)
;
mContexts
.
RemoveEntry
(
aContext
)
;
if
(
mContexts
.
IsEmpty
(
)
)
{
UnsubscribeAllContentParents
(
)
;
}
}
void
BrowsingContextGroup
:
:
Subscribe
(
ContentParent
*
aOriginProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aOriginProcess
)
;
mSubscribers
.
PutEntry
(
aOriginProcess
)
;
aOriginProcess
-
>
OnBrowsingContextGroupSubscribe
(
this
)
;
}
void
BrowsingContextGroup
:
:
Unsubscribe
(
ContentParent
*
aOriginProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aOriginProcess
)
;
mSubscribers
.
RemoveEntry
(
aOriginProcess
)
;
aOriginProcess
-
>
OnBrowsingContextGroupUnsubscribe
(
this
)
;
nsTArray
<
RefPtr
<
BrowsingContext
>
>
toDiscard
;
for
(
auto
&
context
:
mToplevels
)
{
if
(
context
-
>
Canonical
(
)
-
>
IsEmbeddedInProcess
(
aOriginProcess
-
>
ChildID
(
)
)
)
{
toDiscard
.
AppendElement
(
context
)
;
}
}
for
(
auto
&
context
:
toDiscard
)
{
context
-
>
Detach
(
true
)
;
}
}
static
void
CollectContextInitializers
(
Span
<
RefPtr
<
BrowsingContext
>
>
aContexts
nsTArray
<
SyncedContextInitializer
>
&
aInits
)
{
for
(
auto
&
context
:
aContexts
)
{
aInits
.
AppendElement
(
context
-
>
GetIPCInitializer
(
)
)
;
for
(
auto
&
window
:
context
-
>
GetWindowContexts
(
)
)
{
aInits
.
AppendElement
(
window
-
>
GetIPCInitializer
(
)
)
;
CollectContextInitializers
(
window
-
>
Children
(
)
aInits
)
;
}
}
}
void
BrowsingContextGroup
:
:
EnsureSubscribed
(
ContentParent
*
aProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aProcess
)
;
if
(
mSubscribers
.
Contains
(
aProcess
)
)
{
return
;
}
Subscribe
(
aProcess
)
;
nsTArray
<
SyncedContextInitializer
>
inits
(
mContexts
.
Count
(
)
)
;
CollectContextInitializers
(
mToplevels
inits
)
;
Unused
<
<
aProcess
-
>
SendRegisterBrowsingContextGroup
(
Id
(
)
inits
)
;
if
(
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
)
{
BrowsingContext
*
focused
=
fm
-
>
GetFocusedBrowsingContextInChrome
(
)
;
if
(
focused
&
&
focused
-
>
Group
(
)
!
=
this
)
{
focused
=
nullptr
;
}
BrowsingContext
*
active
=
fm
-
>
GetActiveBrowsingContextInChrome
(
)
;
if
(
active
&
&
active
-
>
Group
(
)
!
=
this
)
{
active
=
nullptr
;
}
if
(
focused
|
|
active
)
{
Unused
<
<
aProcess
-
>
SendSetupFocusedAndActive
(
focused
active
)
;
}
}
}
BrowsingContextGroup
:
:
~
BrowsingContextGroup
(
)
{
UnsubscribeAllContentParents
(
)
;
}
void
BrowsingContextGroup
:
:
UnsubscribeAllContentParents
(
)
{
if
(
sBrowsingContextGroups
)
{
sBrowsingContextGroups
-
>
Remove
(
Id
(
)
)
;
}
for
(
auto
iter
=
mSubscribers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsRefPtrHashKey
<
ContentParent
>
*
entry
=
iter
.
Get
(
)
;
entry
-
>
GetKey
(
)
-
>
OnBrowsingContextGroupUnsubscribe
(
this
)
;
}
mSubscribers
.
Clear
(
)
;
}
nsISupports
*
BrowsingContextGroup
:
:
GetParentObject
(
)
const
{
return
xpc
:
:
NativeGlobal
(
xpc
:
:
PrivilegedJunkScope
(
)
)
;
}
JSObject
*
BrowsingContextGroup
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
BrowsingContextGroup_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsresult
BrowsingContextGroup
:
:
QueuePostMessageEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
if
(
StaticPrefs
:
:
dom_separate_event_queue_for_post_message_enabled
(
)
)
{
if
(
!
mPostMessageEventQueue
)
{
nsCOMPtr
<
nsISerialEventTarget
>
target
=
GetMainThreadSerialEventTarget
(
)
;
mPostMessageEventQueue
=
ThrottledEventQueue
:
:
Create
(
target
"
PostMessage
Queue
"
nsIRunnablePriority
:
:
PRIORITY_DEFERRED_TIMERS
)
;
nsresult
rv
=
mPostMessageEventQueue
-
>
SetIsPaused
(
false
)
;
MOZ_ALWAYS_SUCCEEDS
(
rv
)
;
}
if
(
mPostMessageEventQueue
-
>
IsPaused
(
)
)
{
nsresult
rv
=
mPostMessageEventQueue
-
>
SetIsPaused
(
false
)
;
MOZ_ALWAYS_SUCCEEDS
(
rv
)
;
}
if
(
mPostMessageEventQueue
)
{
mPostMessageEventQueue
-
>
Dispatch
(
std
:
:
move
(
aRunnable
)
NS_DISPATCH_NORMAL
)
;
return
NS_OK
;
}
}
return
NS_ERROR_FAILURE
;
}
void
BrowsingContextGroup
:
:
FlushPostMessageEvents
(
)
{
if
(
StaticPrefs
:
:
dom_separate_event_queue_for_post_message_enabled
(
)
)
{
if
(
mPostMessageEventQueue
)
{
nsresult
rv
=
mPostMessageEventQueue
-
>
SetIsPaused
(
true
)
;
MOZ_ALWAYS_SUCCEEDS
(
rv
)
;
nsCOMPtr
<
nsIRunnable
>
event
;
while
(
(
event
=
mPostMessageEventQueue
-
>
GetEvent
(
)
)
)
{
NS_DispatchToMainThread
(
event
.
forget
(
)
)
;
}
}
}
}
BrowsingContextGroup
*
BrowsingContextGroup
:
:
GetChromeGroup
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
sChromeGroup
&
&
XRE_IsParentProcess
(
)
)
{
sChromeGroup
=
BrowsingContextGroup
:
:
Create
(
)
;
ClearOnShutdown
(
&
sChromeGroup
)
;
}
return
sChromeGroup
;
}
void
BrowsingContextGroup
:
:
GetDocGroups
(
nsTArray
<
DocGroup
*
>
&
aDocGroups
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
auto
iter
=
mDocGroups
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aDocGroups
.
AppendElement
(
iter
.
Data
(
)
)
;
}
}
already_AddRefed
<
DocGroup
>
BrowsingContextGroup
:
:
AddDocument
(
const
nsACString
&
aKey
Document
*
aDocument
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
DocGroup
>
&
docGroup
=
mDocGroups
.
GetOrInsert
(
aKey
)
;
if
(
!
docGroup
)
{
docGroup
=
DocGroup
:
:
Create
(
this
aKey
)
;
}
docGroup
-
>
AddDocument
(
aDocument
)
;
return
do_AddRef
(
docGroup
)
;
}
void
BrowsingContextGroup
:
:
RemoveDocument
(
const
nsACString
&
aKey
Document
*
aDocument
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
DocGroup
>
docGroup
=
aDocument
-
>
GetDocGroup
(
)
;
RefPtr
<
BrowsingContextGroup
>
kungFuDeathGrip
(
this
)
;
docGroup
-
>
RemoveDocument
(
aDocument
)
;
if
(
docGroup
-
>
IsEmpty
(
)
)
{
mDocGroups
.
Remove
(
aKey
)
;
}
}
already_AddRefed
<
BrowsingContextGroup
>
BrowsingContextGroup
:
:
Select
(
WindowContext
*
aParent
BrowsingContext
*
aOpener
)
{
if
(
aParent
)
{
return
do_AddRef
(
aParent
-
>
Group
(
)
)
;
}
if
(
aOpener
)
{
return
do_AddRef
(
aOpener
-
>
Group
(
)
)
;
}
return
Create
(
)
;
}
void
BrowsingContextGroup
:
:
GetAllGroups
(
nsTArray
<
RefPtr
<
BrowsingContextGroup
>
>
&
aGroups
)
{
aGroups
.
Clear
(
)
;
if
(
!
sBrowsingContextGroups
)
{
return
;
}
aGroups
.
SetCapacity
(
sBrowsingContextGroups
-
>
Count
(
)
)
;
for
(
auto
&
group
:
*
sBrowsingContextGroups
)
{
aGroups
.
AppendElement
(
group
.
GetData
(
)
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
BrowsingContextGroup
mContexts
mToplevels
mSubscribers
mTimerEventQueue
mWorkerEventQueue
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
BrowsingContextGroup
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
BrowsingContextGroup
Release
)
}
}
