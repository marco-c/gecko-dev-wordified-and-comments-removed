#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextBinding
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
bool
BrowsingContextGroup
:
:
Contains
(
BrowsingContext
*
aBrowsingContext
)
{
return
aBrowsingContext
-
>
Group
(
)
=
=
this
;
}
void
BrowsingContextGroup
:
:
Register
(
BrowsingContext
*
aBrowsingContext
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aBrowsingContext
)
;
mContexts
.
PutEntry
(
aBrowsingContext
)
;
}
void
BrowsingContextGroup
:
:
Unregister
(
BrowsingContext
*
aBrowsingContext
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aBrowsingContext
)
;
mContexts
.
RemoveEntry
(
aBrowsingContext
)
;
}
void
BrowsingContextGroup
:
:
Subscribe
(
ContentParent
*
aOriginProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aOriginProcess
)
;
mSubscribers
.
PutEntry
(
aOriginProcess
)
;
aOriginProcess
-
>
OnBrowsingContextGroupSubscribe
(
this
)
;
}
void
BrowsingContextGroup
:
:
Unsubscribe
(
ContentParent
*
aOriginProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aOriginProcess
)
;
mSubscribers
.
RemoveEntry
(
aOriginProcess
)
;
aOriginProcess
-
>
OnBrowsingContextGroupUnsubscribe
(
this
)
;
}
void
BrowsingContextGroup
:
:
EnsureSubscribed
(
ContentParent
*
aProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aProcess
)
;
if
(
mSubscribers
.
Contains
(
aProcess
)
)
{
return
;
}
Subscribe
(
aProcess
)
;
nsTArray
<
BrowsingContext
:
:
IPCInitializer
>
inits
(
mContexts
.
Count
(
)
)
;
for
(
auto
iter
=
mContexts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
*
context
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
if
(
context
-
>
GetParent
(
)
&
&
context
-
>
GetParent
(
)
-
>
GetChildren
(
)
.
IndexOf
(
context
)
!
=
BrowsingContext
:
:
Children
:
:
NoIndex
)
{
continue
;
}
context
-
>
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
inits
.
AppendElement
(
aContext
-
>
GetIPCInitializer
(
)
)
;
}
)
;
}
Unused
<
<
aProcess
-
>
SendRegisterBrowsingContextGroup
(
inits
)
;
}
BrowsingContextGroup
:
:
~
BrowsingContextGroup
(
)
{
for
(
auto
iter
=
mSubscribers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsRefPtrHashKey
<
ContentParent
>
*
entry
=
iter
.
Get
(
)
;
entry
-
>
GetKey
(
)
-
>
OnBrowsingContextGroupUnsubscribe
(
this
)
;
}
}
nsISupports
*
BrowsingContextGroup
:
:
GetParentObject
(
)
const
{
return
xpc
:
:
NativeGlobal
(
xpc
:
:
PrivilegedJunkScope
(
)
)
;
}
JSObject
*
BrowsingContextGroup
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
BrowsingContextGroup_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
BrowsingContextGroup
mContexts
mToplevels
mSubscribers
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
BrowsingContextGroup
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
BrowsingContextGroup
Release
)
}
}
