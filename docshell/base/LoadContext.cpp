#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
LoadContext
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
xpcpublic
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
LoadContext
nsILoadContext
nsIInterfaceRequestor
)
LoadContext
:
:
LoadContext
(
nsIPrincipal
*
aPrincipal
nsILoadContext
*
aOptionalBase
)
:
mTopFrameElement
(
nullptr
)
mNestedFrameId
(
0
)
mIsContent
(
true
)
mUseRemoteTabs
(
false
)
mUseTrackingProtection
(
false
)
#
ifdef
DEBUG
mIsNotNull
(
true
)
#
endif
{
mOriginAttributes
=
aPrincipal
-
>
OriginAttributesRef
(
)
;
if
(
!
aOptionalBase
)
{
return
;
}
MOZ_ALWAYS_SUCCEEDS
(
aOptionalBase
-
>
GetIsContent
(
&
mIsContent
)
)
;
MOZ_ALWAYS_SUCCEEDS
(
aOptionalBase
-
>
GetUseRemoteTabs
(
&
mUseRemoteTabs
)
)
;
MOZ_ALWAYS_SUCCEEDS
(
aOptionalBase
-
>
GetUseTrackingProtection
(
&
mUseTrackingProtection
)
)
;
}
NS_IMETHODIMP
LoadContext
:
:
GetAssociatedWindow
(
mozIDOMWindowProxy
*
*
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
return
NS_ERROR_UNEXPECTED
;
}
NS_IMETHODIMP
LoadContext
:
:
GetTopWindow
(
mozIDOMWindowProxy
*
*
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
return
NS_ERROR_UNEXPECTED
;
}
NS_IMETHODIMP
LoadContext
:
:
GetTopFrameElement
(
nsIDOMElement
*
*
aElement
)
{
nsCOMPtr
<
nsIDOMElement
>
element
=
do_QueryReferent
(
mTopFrameElement
)
;
element
.
forget
(
aElement
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadContext
:
:
GetNestedFrameId
(
uint64_t
*
aId
)
{
NS_ENSURE_ARG
(
aId
)
;
*
aId
=
mNestedFrameId
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadContext
:
:
GetIsContent
(
bool
*
aIsContent
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
NS_ENSURE_ARG_POINTER
(
aIsContent
)
;
*
aIsContent
=
mIsContent
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadContext
:
:
GetUsePrivateBrowsing
(
bool
*
aUsePrivateBrowsing
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
NS_ENSURE_ARG_POINTER
(
aUsePrivateBrowsing
)
;
*
aUsePrivateBrowsing
=
mOriginAttributes
.
mPrivateBrowsingId
>
0
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadContext
:
:
SetUsePrivateBrowsing
(
bool
aUsePrivateBrowsing
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
return
NS_ERROR_UNEXPECTED
;
}
NS_IMETHODIMP
LoadContext
:
:
SetPrivateBrowsing
(
bool
aUsePrivateBrowsing
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
return
NS_ERROR_UNEXPECTED
;
}
NS_IMETHODIMP
LoadContext
:
:
GetUseRemoteTabs
(
bool
*
aUseRemoteTabs
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
NS_ENSURE_ARG_POINTER
(
aUseRemoteTabs
)
;
*
aUseRemoteTabs
=
mUseRemoteTabs
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadContext
:
:
SetRemoteTabs
(
bool
aUseRemoteTabs
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
return
NS_ERROR_UNEXPECTED
;
}
NS_IMETHODIMP
LoadContext
:
:
GetIsInIsolatedMozBrowserElement
(
bool
*
aIsInIsolatedMozBrowserElement
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
NS_ENSURE_ARG_POINTER
(
aIsInIsolatedMozBrowserElement
)
;
*
aIsInIsolatedMozBrowserElement
=
mOriginAttributes
.
mInIsolatedMozBrowser
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadContext
:
:
GetOriginAttributes
(
JS
:
:
MutableHandleValue
aAttrs
)
{
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
MOZ_ASSERT
(
cx
)
;
bool
ok
=
ToJSValue
(
cx
mOriginAttributes
aAttrs
)
;
NS_ENSURE_TRUE
(
ok
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
NS_IMETHODIMP_
(
void
)
LoadContext
:
:
GetOriginAttributes
(
mozilla
:
:
OriginAttributes
&
aAttrs
)
{
aAttrs
=
mOriginAttributes
;
}
NS_IMETHODIMP
LoadContext
:
:
GetUseTrackingProtection
(
bool
*
aUseTrackingProtection
)
{
MOZ_ASSERT
(
mIsNotNull
)
;
NS_ENSURE_ARG_POINTER
(
aUseTrackingProtection
)
;
*
aUseTrackingProtection
=
mUseTrackingProtection
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadContext
:
:
SetUseTrackingProtection
(
bool
aUseTrackingProtection
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
only
be
set
through
nsDocShell
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
NS_IMETHODIMP
LoadContext
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aResult
)
;
*
aResult
=
nullptr
;
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsILoadContext
)
)
)
{
*
aResult
=
static_cast
<
nsILoadContext
*
>
(
this
)
;
NS_ADDREF_THIS
(
)
;
return
NS_OK
;
}
return
NS_NOINTERFACE
;
}
}
