#
ifndef
mozilla_dom_BrowsingContextGroup_h
#
define
mozilla_dom_BrowsingContextGroup_h
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
class
BrowsingContextGroup
final
:
public
nsWrapperCache
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
BrowsingContextGroup
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
BrowsingContextGroup
)
typedef
nsTHashtable
<
nsRefPtrHashKey
<
ContentParent
>
>
ContentParents
;
bool
Contains
(
BrowsingContext
*
aContext
)
;
void
Register
(
BrowsingContext
*
aContext
)
;
void
Unregister
(
BrowsingContext
*
aContext
)
;
void
Subscribe
(
ContentParent
*
aOriginProcess
)
;
void
Unsubscribe
(
ContentParent
*
aOriginProcess
)
;
void
EnsureSubscribed
(
ContentParent
*
aProcess
)
;
bool
IsContextCached
(
BrowsingContext
*
aContext
)
const
;
void
CacheContext
(
BrowsingContext
*
aContext
)
;
void
CacheContexts
(
const
BrowsingContext
:
:
Children
&
aContexts
)
;
bool
EvictCachedContext
(
BrowsingContext
*
aContext
)
;
BrowsingContext
:
:
Children
&
Toplevels
(
)
{
return
mToplevels
;
}
void
GetToplevels
(
BrowsingContext
:
:
Children
&
aToplevels
)
{
aToplevels
.
AppendElements
(
mToplevels
)
;
}
nsISupports
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
BrowsingContextGroup
(
)
;
static
already_AddRefed
<
BrowsingContextGroup
>
Select
(
BrowsingContext
*
aParent
BrowsingContext
*
aOpener
)
{
if
(
aParent
)
{
return
do_AddRef
(
aParent
-
>
Group
(
)
)
;
}
if
(
aOpener
)
{
return
do_AddRef
(
aOpener
-
>
Group
(
)
)
;
}
return
MakeAndAddRef
<
BrowsingContextGroup
>
(
)
;
}
static
already_AddRefed
<
BrowsingContextGroup
>
Select
(
uint64_t
aParentId
uint64_t
aOpenerId
)
{
RefPtr
<
BrowsingContext
>
parent
=
BrowsingContext
:
:
Get
(
aParentId
)
;
MOZ_RELEASE_ASSERT
(
parent
|
|
aParentId
=
=
0
)
;
RefPtr
<
BrowsingContext
>
opener
=
BrowsingContext
:
:
Get
(
aOpenerId
)
;
MOZ_RELEASE_ASSERT
(
opener
|
|
aOpenerId
=
=
0
)
;
return
Select
(
parent
opener
)
;
}
template
<
typename
Func
>
void
EachOtherParent
(
ContentParent
*
aExcludedParent
Func
&
&
aCallback
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
)
;
for
(
auto
iter
=
mSubscribers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
iter
.
Get
(
)
-
>
GetKey
(
)
!
=
aExcludedParent
)
{
aCallback
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
}
}
}
template
<
typename
Func
>
void
EachParent
(
Func
&
&
aCallback
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
)
;
for
(
auto
iter
=
mSubscribers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aCallback
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
}
}
private
:
friend
class
CanonicalBrowsingContext
;
~
BrowsingContextGroup
(
)
;
void
UnsubscribeAllContentParents
(
)
;
nsTHashtable
<
nsRefPtrHashKey
<
BrowsingContext
>
>
mContexts
;
BrowsingContext
:
:
Children
mToplevels
;
ContentParents
mSubscribers
;
nsTHashtable
<
nsRefPtrHashKey
<
BrowsingContext
>
>
mCachedContexts
;
}
;
}
}
#
endif
