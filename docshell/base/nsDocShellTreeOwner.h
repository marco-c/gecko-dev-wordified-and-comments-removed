#
ifndef
nsDocShellTreeOwner_h__
#
define
nsDocShellTreeOwner_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIEmbeddingSiteWindow
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIPrompt
.
h
"
#
include
"
nsIAuthPrompt
.
h
"
#
include
"
nsITooltipTextProvider
.
h
"
#
include
"
nsCTooltipTextProvider
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Event
;
class
EventTarget
;
}
}
class
nsIDocShellTreeItem
;
class
nsWebBrowser
;
class
ChromeTooltipListener
;
class
nsDocShellTreeOwner
final
:
public
nsIDocShellTreeOwner
public
nsIBaseWindow
public
nsIInterfaceRequestor
public
nsIWebProgressListener
public
nsIDOMEventListener
public
nsSupportsWeakReference
{
friend
class
nsWebBrowser
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIBASEWINDOW
NS_DECL_NSIDOCSHELLTREEOWNER
NS_DECL_NSIDOMEVENTLISTENER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIWEBPROGRESSLISTENER
protected
:
nsDocShellTreeOwner
(
)
;
virtual
~
nsDocShellTreeOwner
(
)
;
void
WebBrowser
(
nsWebBrowser
*
aWebBrowser
)
;
nsWebBrowser
*
WebBrowser
(
)
;
NS_IMETHOD
SetTreeOwner
(
nsIDocShellTreeOwner
*
aTreeOwner
)
;
NS_IMETHOD
SetWebBrowserChrome
(
nsIWebBrowserChrome
*
aWebBrowserChrome
)
;
NS_IMETHOD
AddChromeListeners
(
)
;
NS_IMETHOD
RemoveChromeListeners
(
)
;
void
EnsurePrompter
(
)
;
void
EnsureAuthPrompter
(
)
;
void
AddToWatcher
(
)
;
void
RemoveFromWatcher
(
)
;
void
EnsureContentTreeOwner
(
)
;
already_AddRefed
<
nsIWebBrowserChrome
>
GetWebBrowserChrome
(
)
;
already_AddRefed
<
nsIEmbeddingSiteWindow
>
GetOwnerWin
(
)
;
already_AddRefed
<
nsIInterfaceRequestor
>
GetOwnerRequestor
(
)
;
protected
:
nsWebBrowser
*
mWebBrowser
;
nsIDocShellTreeOwner
*
mTreeOwner
;
nsIDocShellTreeItem
*
mPrimaryContentShell
;
nsIWebBrowserChrome
*
mWebBrowserChrome
;
nsIEmbeddingSiteWindow
*
mOwnerWin
;
nsIInterfaceRequestor
*
mOwnerRequestor
;
nsWeakPtr
mWebBrowserChromeWeak
;
RefPtr
<
ChromeTooltipListener
>
mChromeTooltipListener
;
RefPtr
<
nsDocShellTreeOwner
>
mContentTreeOwner
;
nsCOMPtr
<
nsIPrompt
>
mPrompter
;
nsCOMPtr
<
nsIAuthPrompt
>
mAuthPrompter
;
nsCOMPtr
<
nsIRemoteTab
>
mPrimaryRemoteTab
;
}
;
class
ChromeTooltipListener
final
:
public
nsIDOMEventListener
{
protected
:
virtual
~
ChromeTooltipListener
(
)
;
public
:
NS_DECL_ISUPPORTS
ChromeTooltipListener
(
nsWebBrowser
*
aInBrowser
nsIWebBrowserChrome
*
aInChrome
)
;
NS_DECL_NSIDOMEVENTLISTENER
NS_IMETHOD
MouseMove
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
NS_IMETHOD
AddChromeListeners
(
)
;
NS_IMETHOD
RemoveChromeListeners
(
)
;
NS_IMETHOD
HideTooltip
(
)
;
bool
WebProgressShowedTooltip
(
nsIWebProgress
*
aWebProgress
)
;
private
:
enum
{
kTooltipAutoHideTime
=
5000
kTooltipMouseMoveTolerance
=
7
}
;
NS_IMETHOD
AddTooltipListener
(
)
;
NS_IMETHOD
RemoveTooltipListener
(
)
;
NS_IMETHOD
ShowTooltip
(
int32_t
aInXCoords
int32_t
aInYCoords
const
nsAString
&
aInTipText
const
nsAString
&
aDirText
)
;
nsITooltipTextProvider
*
GetTooltipTextProvider
(
)
;
nsWebBrowser
*
mWebBrowser
;
nsCOMPtr
<
mozilla
:
:
dom
:
:
EventTarget
>
mEventTarget
;
nsCOMPtr
<
nsITooltipTextProvider
>
mTooltipTextProvider
;
nsCOMPtr
<
nsIWebBrowserChrome
>
mWebBrowserChrome
;
bool
mTooltipListenerInstalled
;
nsCOMPtr
<
nsITimer
>
mTooltipTimer
;
static
void
sTooltipCallback
(
nsITimer
*
aTimer
void
*
aListener
)
;
int32_t
mMouseClientX
;
int32_t
mMouseClientY
;
int32_t
mMouseScreenX
;
int32_t
mMouseScreenY
;
bool
mShowingTooltip
;
bool
mTooltipShownOnce
;
nsString
mLastShownTooltipText
;
nsWeakPtr
mLastDocshell
;
nsCOMPtr
<
nsINode
>
mPossibleTooltipNode
;
}
;
#
endif
