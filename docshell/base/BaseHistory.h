#
ifndef
mozilla_BaseHistory_h
#
define
mozilla_BaseHistory_h
#
include
"
IHistory
.
h
"
#
include
"
mozilla
/
Result
.
h
"
namespace
mozilla
{
class
BaseHistory
:
public
IHistory
{
public
:
nsresult
RegisterVisitedCallback
(
nsIURI
*
dom
:
:
Link
*
)
final
;
void
UnregisterVisitedCallback
(
nsIURI
*
dom
:
:
Link
*
)
final
;
void
NotifyVisited
(
nsIURI
*
VisitedStatus
)
final
;
protected
:
static
constexpr
const
size_t
kTrackedUrisInitialSize
=
64
;
BaseHistory
(
)
:
mTrackedURIs
(
kTrackedUrisInitialSize
)
{
}
using
ObserverArray
=
nsTObserverArray
<
dom
:
:
Link
*
>
;
struct
ObservingLinks
{
ObserverArray
mLinks
;
VisitedStatus
mStatus
=
VisitedStatus
:
:
Unknown
;
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
mLinks
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
}
;
using
PendingVisitedQueries
=
nsTHashtable
<
nsURIHashKey
>
;
virtual
void
StartPendingVisitedQueries
(
const
PendingVisitedQueries
&
)
=
0
;
private
:
void
NotifyVisitedForDocument
(
nsIURI
*
dom
:
:
Document
*
VisitedStatus
)
;
void
ScheduleVisitedQuery
(
nsIURI
*
)
;
void
CancelVisitedQueryIfPossible
(
nsIURI
*
)
;
void
DispatchNotifyVisited
(
nsIURI
*
dom
:
:
Document
*
VisitedStatus
)
;
protected
:
nsDataHashtable
<
nsURIHashKey
ObservingLinks
>
mTrackedURIs
;
private
:
PendingVisitedQueries
mPendingQueries
;
bool
mStartPendingVisitedQueriesScheduled
=
false
;
}
;
}
#
endif
