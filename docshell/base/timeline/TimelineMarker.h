#
ifndef
mozilla_TimelineMarker_h_
#
define
mozilla_TimelineMarker_h_
#
include
"
nsString
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
GeckoProfiler
.
h
"
class
nsDocShell
;
namespace
mozilla
{
namespace
dom
{
struct
ProfileTimelineMarker
;
}
class
TimelineMarker
{
public
:
enum
TimelineStackRequest
{
STACK
NO_STACK
}
;
TimelineMarker
(
const
char
*
aName
TracingMetadata
aMetaData
TimelineStackRequest
aStackRequest
=
STACK
)
;
TimelineMarker
(
const
char
*
aName
const
TimeStamp
&
aTime
TracingMetadata
aMetaData
TimelineStackRequest
aStackRequest
=
STACK
)
;
TimelineMarker
(
const
char
*
aName
const
nsAString
&
aCause
TracingMetadata
aMetaData
TimelineStackRequest
aStackRequest
=
STACK
)
;
TimelineMarker
(
const
char
*
aName
const
nsAString
&
aCause
const
TimeStamp
&
aTime
TracingMetadata
aMetaData
TimelineStackRequest
aStackRequest
=
STACK
)
;
virtual
~
TimelineMarker
(
)
;
virtual
bool
Equals
(
const
TimelineMarker
&
aOther
)
{
return
strcmp
(
mName
aOther
.
mName
)
=
=
0
;
}
virtual
void
AddDetails
(
JSContext
*
aCx
dom
:
:
ProfileTimelineMarker
&
aMarker
)
{
}
const
char
*
GetName
(
)
const
{
return
mName
;
}
const
nsString
&
GetCause
(
)
const
{
return
mCause
;
}
DOMHighResTimeStamp
GetTime
(
)
const
{
return
mTime
;
}
TracingMetadata
GetMetaData
(
)
const
{
return
mMetaData
;
}
JSObject
*
GetStack
(
)
{
if
(
mStackTrace
.
initialized
(
)
)
{
return
mStackTrace
;
}
return
nullptr
;
}
protected
:
void
CaptureStack
(
)
{
JSContext
*
ctx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
ctx
)
{
JS
:
:
RootedObject
stack
(
ctx
)
;
if
(
JS
:
:
CaptureCurrentStack
(
ctx
&
stack
)
)
{
mStackTrace
.
init
(
ctx
stack
.
get
(
)
)
;
}
else
{
JS_ClearPendingException
(
ctx
)
;
}
}
}
private
:
const
char
*
mName
;
nsString
mCause
;
DOMHighResTimeStamp
mTime
;
TracingMetadata
mMetaData
;
JS
:
:
PersistentRooted
<
JSObject
*
>
mStackTrace
;
void
SetCurrentTime
(
)
;
void
SetCustomTime
(
const
TimeStamp
&
aTime
)
;
void
CaptureStackIfNecessary
(
TracingMetadata
aMetaData
TimelineStackRequest
aStackRequest
)
;
}
;
}
#
endif
