#
ifndef
mozilla_TimelineConsumers_h_
#
define
mozilla_TimelineConsumers_h_
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
TimelineMarkerEnums
.
h
"
class
nsDocShell
;
class
nsIDocShell
;
namespace
mozilla
{
class
ObservedDocShell
;
class
TimelineMarker
;
class
TimelineConsumers
{
private
:
static
unsigned
long
sActiveConsumers
;
static
LinkedList
<
ObservedDocShell
>
*
sObservedDocShells
;
static
LinkedList
<
ObservedDocShell
>
&
GetOrCreateObservedDocShellsList
(
)
;
public
:
static
void
AddConsumer
(
nsDocShell
*
aDocShell
)
;
static
void
RemoveConsumer
(
nsDocShell
*
aDocShell
)
;
static
bool
IsEmpty
(
)
;
static
bool
GetKnownDocShells
(
Vector
<
nsRefPtr
<
nsDocShell
>
>
&
aStore
)
;
static
void
AddMarkerForDocShell
(
nsDocShell
*
aDocShell
const
char
*
aName
MarkerTracingType
aTracingType
)
;
static
void
AddMarkerForDocShell
(
nsIDocShell
*
aDocShell
const
char
*
aName
MarkerTracingType
aTracingType
)
;
static
void
AddMarkerForDocShell
(
nsDocShell
*
aDocShell
const
char
*
aName
const
TimeStamp
&
aTime
MarkerTracingType
aTracingType
)
;
static
void
AddMarkerForDocShell
(
nsIDocShell
*
aDocShell
const
char
*
aName
const
TimeStamp
&
aTime
MarkerTracingType
aTracingType
)
;
static
void
AddMarkerForDocShell
(
nsDocShell
*
aDocShell
UniquePtr
<
TimelineMarker
>
&
&
aMarker
)
;
static
void
AddMarkerForDocShell
(
nsIDocShell
*
aDocShell
UniquePtr
<
TimelineMarker
>
&
&
aMarker
)
;
static
void
AddMarkerForDocShellsList
(
Vector
<
nsRefPtr
<
nsDocShell
>
>
&
aDocShells
const
char
*
aName
MarkerTracingType
aTracingType
)
;
static
void
AddMarkerForAllObservedDocShells
(
const
char
*
aName
MarkerTracingType
aTracingType
)
;
}
;
}
#
endif
