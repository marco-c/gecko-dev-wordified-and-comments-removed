#
ifndef
mozilla_TimelineConsumers_h_
#
define
mozilla_TimelineConsumers_h_
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
TimelineMarkerEnums
.
h
"
class
nsDocShell
;
class
nsIDocShell
;
namespace
mozilla
{
class
TimeStamp
;
class
MarkersStorage
;
class
AbstractTimelineMarker
;
class
TimelineConsumers
:
public
nsIObserver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
private
:
TimelineConsumers
(
)
;
TimelineConsumers
(
const
TimelineConsumers
&
aOther
)
=
delete
;
void
operator
=
(
const
TimelineConsumers
&
aOther
)
=
delete
;
virtual
~
TimelineConsumers
(
)
=
default
;
bool
Init
(
)
;
bool
RemoveObservers
(
)
;
public
:
static
already_AddRefed
<
TimelineConsumers
>
Get
(
)
;
void
AddConsumer
(
nsDocShell
*
aDocShell
)
;
void
RemoveConsumer
(
nsDocShell
*
aDocShell
)
;
bool
HasConsumer
(
nsIDocShell
*
aDocShell
)
;
bool
IsEmpty
(
)
;
void
AddMarkerForDocShell
(
nsDocShell
*
aDocShell
const
char
*
aName
MarkerTracingType
aTracingType
)
;
void
AddMarkerForDocShell
(
nsIDocShell
*
aDocShell
const
char
*
aName
MarkerTracingType
aTracingType
)
;
void
AddMarkerForDocShell
(
nsDocShell
*
aDocShell
const
char
*
aName
const
TimeStamp
&
aTime
MarkerTracingType
aTracingType
)
;
void
AddMarkerForDocShell
(
nsIDocShell
*
aDocShell
const
char
*
aName
const
TimeStamp
&
aTime
MarkerTracingType
aTracingType
)
;
void
AddMarkerForDocShell
(
nsDocShell
*
aDocShell
UniquePtr
<
AbstractTimelineMarker
>
&
&
aMarker
)
;
void
AddMarkerForDocShell
(
nsIDocShell
*
aDocShell
UniquePtr
<
AbstractTimelineMarker
>
&
&
aMarker
)
;
void
AddMarkerForAllObservedDocShells
(
const
char
*
aName
MarkerTracingType
aTracingType
)
;
void
AddMarkerForAllObservedDocShells
(
const
char
*
aName
const
TimeStamp
&
aTime
MarkerTracingType
aTracingType
)
;
void
AddMarkerForAllObservedDocShells
(
UniquePtr
<
AbstractTimelineMarker
>
&
aMarker
)
;
private
:
static
StaticRefPtr
<
TimelineConsumers
>
sInstance
;
static
bool
sInShutdown
;
unsigned
long
mActiveConsumers
;
LinkedList
<
MarkersStorage
>
mMarkersStores
;
static
StaticMutex
sMutex
;
}
;
}
#
endif
