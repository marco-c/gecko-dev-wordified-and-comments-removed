#
ifndef
mozilla_AbstractTimelineMarker_h_
#
define
mozilla_AbstractTimelineMarker_h_
#
include
"
TimelineMarkerEnums
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
struct
JSContext
;
class
JSObject
;
namespace
mozilla
{
class
TimeStamp
;
namespace
dom
{
struct
ProfileTimelineMarker
;
}
class
AbstractTimelineMarker
{
private
:
AbstractTimelineMarker
(
)
=
delete
;
AbstractTimelineMarker
(
const
AbstractTimelineMarker
&
aOther
)
=
delete
;
void
operator
=
(
const
AbstractTimelineMarker
&
aOther
)
=
delete
;
public
:
explicit
AbstractTimelineMarker
(
const
char
*
aName
MarkerTracingType
aTracingType
)
;
explicit
AbstractTimelineMarker
(
const
char
*
aName
const
TimeStamp
&
aTime
MarkerTracingType
aTracingType
)
;
virtual
~
AbstractTimelineMarker
(
)
;
virtual
UniquePtr
<
AbstractTimelineMarker
>
Clone
(
)
;
virtual
bool
Equals
(
const
AbstractTimelineMarker
&
aOther
)
;
virtual
void
AddDetails
(
JSContext
*
aCx
dom
:
:
ProfileTimelineMarker
&
aMarker
)
=
0
;
virtual
JSObject
*
GetStack
(
)
=
0
;
const
char
*
GetName
(
)
const
{
return
mName
;
}
DOMHighResTimeStamp
GetTime
(
)
const
{
return
mTime
;
}
MarkerTracingType
GetTracingType
(
)
const
{
return
mTracingType
;
}
const
uint8_t
GetProcessType
(
)
const
{
return
mProcessType
;
}
;
const
bool
IsOffMainThread
(
)
const
{
return
mIsOffMainThread
;
}
;
private
:
const
char
*
mName
;
DOMHighResTimeStamp
mTime
;
MarkerTracingType
mTracingType
;
uint8_t
mProcessType
;
bool
mIsOffMainThread
;
protected
:
void
SetCurrentTime
(
)
;
void
SetCustomTime
(
const
TimeStamp
&
aTime
)
;
void
SetCustomTime
(
DOMHighResTimeStamp
aTime
)
;
}
;
}
#
endif
