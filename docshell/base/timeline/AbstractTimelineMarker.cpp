#
include
"
AbstractTimelineMarker
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsAppRunner
.
h
"
namespace
mozilla
{
AbstractTimelineMarker
:
:
AbstractTimelineMarker
(
const
char
*
aName
MarkerTracingType
aTracingType
)
:
mName
(
aName
)
mTracingType
(
aTracingType
)
mProcessType
(
XRE_GetProcessType
(
)
)
mIsOffMainThread
(
!
NS_IsMainThread
(
)
)
{
MOZ_COUNT_CTOR
(
AbstractTimelineMarker
)
;
SetCurrentTime
(
)
;
}
AbstractTimelineMarker
:
:
AbstractTimelineMarker
(
const
char
*
aName
const
TimeStamp
&
aTime
MarkerTracingType
aTracingType
)
:
mName
(
aName
)
mTracingType
(
aTracingType
)
mProcessType
(
XRE_GetProcessType
(
)
)
mIsOffMainThread
(
!
NS_IsMainThread
(
)
)
{
MOZ_COUNT_CTOR
(
AbstractTimelineMarker
)
;
SetCustomTime
(
aTime
)
;
}
UniquePtr
<
AbstractTimelineMarker
>
AbstractTimelineMarker
:
:
Clone
(
)
{
MOZ_ASSERT
(
false
"
Clone
method
not
yet
implemented
on
this
marker
type
.
"
)
;
return
nullptr
;
}
bool
AbstractTimelineMarker
:
:
Equals
(
const
AbstractTimelineMarker
&
aOther
)
{
return
strcmp
(
mName
aOther
.
mName
)
=
=
0
;
}
AbstractTimelineMarker
:
:
~
AbstractTimelineMarker
(
)
{
MOZ_COUNT_DTOR
(
AbstractTimelineMarker
)
;
}
void
AbstractTimelineMarker
:
:
SetCurrentTime
(
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
SetCustomTime
(
now
)
;
}
void
AbstractTimelineMarker
:
:
SetCustomTime
(
const
TimeStamp
&
aTime
)
{
bool
isInconsistent
=
false
;
mTime
=
(
aTime
-
TimeStamp
:
:
ProcessCreation
(
isInconsistent
)
)
.
ToMilliseconds
(
)
;
}
void
AbstractTimelineMarker
:
:
SetCustomTime
(
DOMHighResTimeStamp
aTime
)
{
mTime
=
aTime
;
}
}
