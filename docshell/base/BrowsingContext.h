#
ifndef
mozilla_dom_BrowsingContext_h
#
define
mozilla_dom_BrowsingContext_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
LocationBase
.
h
"
#
include
"
mozilla
/
dom
/
UserActivation
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsILoadInfo
.
h
"
class
nsDocShellLoadState
;
class
nsGlobalWindowOuter
;
class
nsIPrincipal
;
class
nsOuterWindowProxy
;
class
PickleIterator
;
namespace
IPC
{
class
Message
;
}
namespace
mozilla
{
class
ErrorResult
;
class
LogModule
;
namespace
ipc
{
class
IProtocol
;
template
<
typename
T
>
struct
IPDLParamTraits
;
}
namespace
dom
{
class
BrowsingContent
;
class
BrowsingContextGroup
;
class
CanonicalBrowsingContext
;
class
ContentParent
;
class
Element
;
template
<
typename
>
struct
Nullable
;
template
<
typename
T
>
class
Sequence
;
class
StructuredCloneHolder
;
struct
WindowPostMessageOptions
;
class
WindowProxyHolder
;
class
BrowsingContextBase
{
protected
:
BrowsingContextBase
(
)
{
#
define
MOZ_BC_FIELD
(
name
type
)
m
#
#
name
=
type
(
)
;
#
include
"
mozilla
/
dom
/
BrowsingContextFieldList
.
h
"
}
~
BrowsingContextBase
(
)
=
default
;
#
define
MOZ_BC_FIELD
(
name
type
)
\
type
m
#
#
name
;
\
\
/
*
shadow
to
validate
fields
.
aSource
is
setter
process
or
null
*
/
\
bool
MaySet
#
#
name
(
type
const
&
aValue
ContentParent
*
aSource
)
{
\
return
true
;
\
}
\
void
DidSet
#
#
name
(
)
{
}
#
include
"
mozilla
/
dom
/
BrowsingContextFieldList
.
h
"
}
;
class
BrowsingContext
:
public
nsWrapperCache
public
BrowsingContextBase
{
public
:
enum
class
Type
{
Chrome
Content
}
;
using
Children
=
nsTArray
<
RefPtr
<
BrowsingContext
>
>
;
static
void
Init
(
)
;
static
LogModule
*
GetLog
(
)
;
static
void
CleanupContexts
(
uint64_t
aProcessId
)
;
static
already_AddRefed
<
BrowsingContext
>
Get
(
uint64_t
aId
)
;
static
already_AddRefed
<
BrowsingContext
>
Get
(
GlobalObject
&
uint64_t
aId
)
{
return
Get
(
aId
)
;
}
static
already_AddRefed
<
BrowsingContext
>
GetFromWindow
(
WindowProxyHolder
&
aProxy
)
;
static
already_AddRefed
<
BrowsingContext
>
GetFromWindow
(
GlobalObject
&
WindowProxyHolder
&
aProxy
)
{
return
GetFromWindow
(
aProxy
)
;
}
static
already_AddRefed
<
BrowsingContext
>
Create
(
BrowsingContext
*
aParent
BrowsingContext
*
aOpener
const
nsAString
&
aName
Type
aType
)
;
CanonicalBrowsingContext
*
Canonical
(
)
;
bool
IsInProcess
(
)
const
{
return
mIsInProcess
;
}
bool
IsDiscarded
(
)
const
{
return
mIsDiscarded
;
}
nsIDocShell
*
GetDocShell
(
)
const
{
return
mDocShell
;
}
void
SetDocShell
(
nsIDocShell
*
aDocShell
)
;
void
ClearDocShell
(
)
{
mDocShell
=
nullptr
;
}
void
CleanUpDanglingRemoteOuterWindowProxies
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aOuter
)
;
Element
*
GetEmbedderElement
(
)
const
{
return
mEmbedderElement
;
}
void
SetEmbedderElement
(
Element
*
aEmbedder
)
;
nsPIDOMWindowOuter
*
GetDOMWindow
(
)
const
{
return
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
}
void
Attach
(
bool
aFromIPC
=
false
)
;
void
Detach
(
bool
aFromIPC
=
false
)
;
void
PrepareForProcessChange
(
)
;
void
CacheChildren
(
bool
aFromIPC
=
false
)
;
void
RestoreChildren
(
Children
&
&
aChildren
bool
aFromIPC
=
false
)
;
nsresult
LoadURI
(
BrowsingContext
*
aAccessor
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
=
false
)
;
void
DisplayLoadError
(
const
nsAString
&
aURI
)
;
bool
IsCached
(
)
;
bool
IsTargetable
(
)
;
const
nsString
&
Name
(
)
const
{
return
mName
;
}
void
GetName
(
nsAString
&
aName
)
{
aName
=
mName
;
}
bool
NameEquals
(
const
nsAString
&
aName
)
{
return
mName
.
Equals
(
aName
)
;
}
bool
IsContent
(
)
const
{
return
mType
=
=
Type
:
:
Content
;
}
bool
IsChrome
(
)
const
{
return
!
IsContent
(
)
;
}
bool
IsTopContent
(
)
const
{
return
IsContent
(
)
&
&
!
GetParent
(
)
;
}
bool
IsContentSubframe
(
)
const
{
return
IsContent
(
)
&
&
GetParent
(
)
;
}
uint64_t
Id
(
)
const
{
return
mBrowsingContextId
;
}
BrowsingContext
*
GetParent
(
)
const
{
return
mParent
;
}
BrowsingContext
*
Top
(
)
;
already_AddRefed
<
BrowsingContext
>
GetOpener
(
)
const
{
RefPtr
<
BrowsingContext
>
opener
(
Get
(
mOpenerId
)
)
;
if
(
!
mIsDiscarded
&
&
opener
&
&
!
opener
-
>
mIsDiscarded
)
{
MOZ_DIAGNOSTIC_ASSERT
(
opener
-
>
mType
=
=
mType
)
;
return
opener
.
forget
(
)
;
}
return
nullptr
;
}
void
SetOpener
(
BrowsingContext
*
aOpener
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
aOpener
|
|
aOpener
-
>
Group
(
)
=
=
Group
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aOpener
|
|
aOpener
-
>
mType
=
=
mType
)
;
SetOpenerId
(
aOpener
?
aOpener
-
>
Id
(
)
:
0
)
;
}
bool
HasOpener
(
)
const
;
bool
HadOriginalOpener
(
)
const
{
return
mHadOriginalOpener
;
}
already_AddRefed
<
BrowsingContext
>
GetOnePermittedSandboxedNavigator
(
)
const
{
return
Get
(
mOnePermittedSandboxedNavigatorId
)
;
}
void
SetOnePermittedSandboxedNavigator
(
BrowsingContext
*
aNavigator
)
{
if
(
mOnePermittedSandboxedNavigatorId
)
{
MOZ_ASSERT
(
false
"
One
Permitted
Sandboxed
Navigator
should
only
be
set
once
.
"
)
;
}
else
{
SetOnePermittedSandboxedNavigatorId
(
aNavigator
?
aNavigator
-
>
Id
(
)
:
0
)
;
}
}
void
GetChildren
(
Children
&
aChildren
)
;
BrowsingContextGroup
*
Group
(
)
{
return
mGroup
;
}
BrowsingContext
*
FindWithName
(
const
nsAString
&
aName
BrowsingContext
&
aRequestingContext
)
;
BrowsingContext
*
FindChildWithName
(
const
nsAString
&
aName
BrowsingContext
&
aRequestingContext
)
;
nsISupports
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
NotifyUserGestureActivation
(
)
;
void
NotifyResetUserGestureActivation
(
)
;
bool
HasBeenUserGestureActivated
(
)
;
bool
HasValidTransientUserGestureActivation
(
)
;
bool
ConsumeTransientUserGestureActivation
(
)
;
inline
JSObject
*
GetWindowProxy
(
)
const
{
return
mWindowProxy
;
}
void
SetWindowProxy
(
JS
:
:
Handle
<
JSObject
*
>
aWindowProxy
)
{
mWindowProxy
=
aWindowProxy
;
}
Nullable
<
WindowProxyHolder
>
GetWindow
(
)
;
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
BrowsingContext
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
BrowsingContext
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
BrowsingContext
)
const
Children
&
GetChildren
(
)
{
return
mChildren
;
}
void
PreOrderWalk
(
const
std
:
:
function
<
void
(
BrowsingContext
*
)
>
&
aCallback
)
{
aCallback
(
this
)
;
for
(
auto
&
child
:
GetChildren
(
)
)
{
child
-
>
PreOrderWalk
(
aCallback
)
;
}
}
void
PostOrderWalk
(
const
std
:
:
function
<
void
(
BrowsingContext
*
)
>
&
aCallback
)
{
for
(
auto
&
child
:
GetChildren
(
)
)
{
child
-
>
PostOrderWalk
(
aCallback
)
;
}
aCallback
(
this
)
;
}
BrowsingContext
*
Window
(
)
{
return
Self
(
)
;
}
BrowsingContext
*
Self
(
)
{
return
this
;
}
void
Location
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aLocation
ErrorResult
&
aError
)
;
void
Close
(
CallerType
aCallerType
ErrorResult
&
aError
)
;
bool
GetClosed
(
ErrorResult
&
)
{
return
mClosed
;
}
void
Focus
(
ErrorResult
&
aError
)
;
void
Blur
(
ErrorResult
&
aError
)
;
BrowsingContext
*
GetFrames
(
ErrorResult
&
aError
)
{
return
Self
(
)
;
}
int32_t
Length
(
)
const
{
return
mChildren
.
Length
(
)
;
}
Nullable
<
WindowProxyHolder
>
GetTop
(
ErrorResult
&
aError
)
;
void
GetOpener
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aOpener
ErrorResult
&
aError
)
const
;
Nullable
<
WindowProxyHolder
>
GetParent
(
ErrorResult
&
aError
)
;
void
PostMessageMoz
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
nsAString
&
aTargetOrigin
const
Sequence
<
JSObject
*
>
&
aTransfer
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
PostMessageMoz
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
WindowPostMessageOptions
&
aOptions
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
)
;
static
JSObject
*
ReadStructuredClone
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
StructuredCloneHolder
*
aHolder
)
;
bool
WriteStructuredClone
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
StructuredCloneHolder
*
aHolder
)
;
void
StartDelayedAutoplayMediaComponents
(
)
;
class
Transaction
{
public
:
nsresult
Commit
(
BrowsingContext
*
aOwner
)
;
MOZ_MUST_USE
bool
Validate
(
BrowsingContext
*
aOwner
ContentParent
*
aSource
)
;
MOZ_MUST_USE
bool
ValidateEpochs
(
BrowsingContext
*
aOwner
uint64_t
aEpoch
)
;
void
Apply
(
BrowsingContext
*
aOwner
)
;
#
define
MOZ_BC_FIELD
(
name
type
)
mozilla
:
:
Maybe
<
type
>
m
#
#
name
;
#
include
"
mozilla
/
dom
/
BrowsingContextFieldList
.
h
"
private
:
friend
struct
mozilla
:
:
ipc
:
:
IPDLParamTraits
<
Transaction
>
;
bool
mValidated
=
false
;
}
;
#
define
MOZ_BC_FIELD
(
name
type
)
\
template
<
typename
.
.
.
Args
>
\
void
Set
#
#
name
(
Args
&
&
.
.
.
aValue
)
{
\
Transaction
txn
;
\
txn
.
m
#
#
name
.
emplace
(
std
:
:
forward
<
Args
>
(
aValue
)
.
.
.
)
;
\
txn
.
Commit
(
this
)
;
\
}
\
\
type
const
&
Get
#
#
name
(
)
const
{
return
m
#
#
name
;
}
#
include
"
mozilla
/
dom
/
BrowsingContextFieldList
.
h
"
struct
IPCInitializer
{
uint64_t
mId
;
uint64_t
mParentId
;
already_AddRefed
<
BrowsingContext
>
GetParent
(
)
;
already_AddRefed
<
BrowsingContext
>
GetOpener
(
)
;
bool
mCached
;
#
define
MOZ_BC_FIELD
(
name
type
)
type
m
#
#
name
;
#
include
"
mozilla
/
dom
/
BrowsingContextFieldList
.
h
"
}
;
IPCInitializer
GetIPCInitializer
(
)
;
static
already_AddRefed
<
BrowsingContext
>
CreateFromIPC
(
IPCInitializer
&
&
aInitializer
BrowsingContextGroup
*
aGroup
ContentParent
*
aOriginProcess
)
;
bool
CanAccess
(
BrowsingContext
*
aTarget
bool
aConsiderOpener
=
true
)
;
protected
:
virtual
~
BrowsingContext
(
)
;
BrowsingContext
(
BrowsingContext
*
aParent
BrowsingContextGroup
*
aGroup
uint64_t
aBrowsingContextId
Type
aType
)
;
private
:
static
bool
IsSpecialName
(
const
nsAString
&
aName
)
;
BrowsingContext
*
FindWithSpecialName
(
const
nsAString
&
aName
BrowsingContext
&
aRequestingContext
)
;
BrowsingContext
*
FindWithNameInSubtree
(
const
nsAString
&
aName
BrowsingContext
&
aRequestingContext
)
;
friend
class
:
:
nsOuterWindowProxy
;
friend
class
:
:
nsGlobalWindowOuter
;
void
UpdateWindowProxy
(
JSObject
*
obj
JSObject
*
old
)
{
if
(
mWindowProxy
)
{
MOZ_ASSERT
(
mWindowProxy
=
=
old
)
;
mWindowProxy
=
obj
;
}
}
void
ClearWindowProxy
(
)
{
mWindowProxy
=
nullptr
;
}
friend
class
Location
;
friend
class
RemoteLocationProxy
;
class
LocationProxy
final
:
public
LocationBase
{
public
:
MozExternalRefCountType
AddRef
(
)
{
return
GetBrowsingContext
(
)
-
>
AddRef
(
)
;
}
MozExternalRefCountType
Release
(
)
{
return
GetBrowsingContext
(
)
-
>
Release
(
)
;
}
protected
:
friend
class
RemoteLocationProxy
;
BrowsingContext
*
GetBrowsingContext
(
)
override
{
return
reinterpret_cast
<
BrowsingContext
*
>
(
uintptr_t
(
this
)
-
offsetof
(
BrowsingContext
mLocation
)
)
;
}
already_AddRefed
<
nsIDocShell
>
GetDocShell
(
)
override
{
return
nullptr
;
}
}
;
bool
MaySetOpener
(
const
uint64_t
&
aValue
ContentParent
*
aSource
)
{
if
(
aValue
!
=
0
)
{
RefPtr
<
BrowsingContext
>
opener
=
Get
(
aValue
)
;
return
opener
&
&
opener
-
>
Group
(
)
=
=
Group
(
)
;
}
return
true
;
}
void
DidSetUserActivationState
(
)
;
void
DidSetMuted
(
)
;
bool
MaySetEmbedderInnerWindowId
(
const
uint64_t
&
aValue
ContentParent
*
aSource
)
;
const
Type
mType
;
const
uint64_t
mBrowsingContextId
;
RefPtr
<
BrowsingContextGroup
>
mGroup
;
RefPtr
<
BrowsingContext
>
mParent
;
Children
mChildren
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
RefPtr
<
Element
>
mEmbedderElement
;
JS
:
:
Heap
<
JSObject
*
>
mWindowProxy
;
LocationProxy
mLocation
;
struct
{
#
define
MOZ_BC_FIELD
(
name
.
.
.
)
uint64_t
name
=
0
;
#
include
"
mozilla
/
dom
/
BrowsingContextFieldList
.
h
"
}
mEpochs
;
bool
mIsInProcess
:
1
;
bool
mIsDiscarded
:
1
;
bool
mDanglingRemoteOuterProxies
:
1
;
TimeStamp
mUserGestureStart
;
}
;
extern
bool
GetRemoteOuterWindowProxy
(
JSContext
*
aCx
BrowsingContext
*
aContext
JS
:
:
Handle
<
JSObject
*
>
aTransplantTo
JS
:
:
MutableHandle
<
JSObject
*
>
aRetVal
)
;
typedef
BrowsingContext
:
:
Transaction
BrowsingContextTransaction
;
typedef
BrowsingContext
:
:
IPCInitializer
BrowsingContextInitializer
;
typedef
BrowsingContext
:
:
Children
BrowsingContextChildren
;
}
namespace
ipc
{
template
<
>
struct
IPDLParamTraits
<
dom
:
:
BrowsingContext
*
>
{
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
dom
:
:
BrowsingContext
*
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
RefPtr
<
dom
:
:
BrowsingContext
>
*
aResult
)
;
}
;
template
<
>
struct
IPDLParamTraits
<
dom
:
:
BrowsingContext
:
:
Transaction
>
{
static
void
Write
(
IPC
:
:
Message
*
aMessage
IProtocol
*
aActor
const
dom
:
:
BrowsingContext
:
:
Transaction
&
aTransaction
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMessage
PickleIterator
*
aIterator
IProtocol
*
aActor
dom
:
:
BrowsingContext
:
:
Transaction
*
aTransaction
)
;
}
;
template
<
>
struct
IPDLParamTraits
<
dom
:
:
BrowsingContext
:
:
IPCInitializer
>
{
static
void
Write
(
IPC
:
:
Message
*
aMessage
IProtocol
*
aActor
const
dom
:
:
BrowsingContext
:
:
IPCInitializer
&
aInitializer
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMessage
PickleIterator
*
aIterator
IProtocol
*
aActor
dom
:
:
BrowsingContext
:
:
IPCInitializer
*
aInitializer
)
;
}
;
}
}
#
endif
