#
ifndef
nsDocShell_h__
#
define
nsDocShell_h__
#
include
"
nsITimer
.
h
"
#
include
"
nsContentPolicyUtils
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsINetworkInterceptController
.
h
"
#
include
"
nsIScrollable
.
h
"
#
include
"
nsITextScroll
.
h
"
#
include
"
nsIContentViewerContainer
.
h
"
#
include
"
nsIDOMStorageManager
.
h
"
#
include
"
nsDocLoader
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
mozilla
/
dom
/
ProfileTimelineMarkerBinding
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
timeline
/
ObservedDocShell
.
h
"
#
include
"
timeline
/
TimelineConsumers
.
h
"
#
include
"
timeline
/
TimelineMarker
.
h
"
#
define
REFRESH_REDIRECT_TIMER
15000
#
include
"
nsIDocCharset
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsIRefreshURI
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIWebPageDescriptor
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsIDocShellLoadInfo
.
h
"
#
include
"
nsIAuthPromptProvider
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsIWebShellServices
.
h
"
#
include
"
nsILinkHandler
.
h
"
#
include
"
nsIClipboardCommands
.
h
"
#
include
"
nsITabParent
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
prtime
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
Units
.
h
"
#
include
"
nsIDeprecationWarner
.
h
"
#
include
"
nsILoadURIDelegate
.
h
"
namespace
mozilla
{
class
Encoding
;
class
HTMLEditor
;
enum
class
TaskCategory
;
namespace
dom
{
class
ClientInfo
;
class
ClientSource
;
class
EventTarget
;
class
PendingGlobalHistoryEntry
;
typedef
uint32_t
ScreenOrientationInternal
;
}
}
class
nsDocShell
;
class
nsDOMNavigationTiming
;
class
nsGlobalWindowOuter
;
class
nsGlobalWindowInner
;
class
nsIController
;
class
nsIScrollableFrame
;
class
OnLinkClickEvent
;
class
nsDSURIContentListener
;
class
nsDocShellEditorData
;
class
nsIClipboardDragDropHookList
;
class
nsICommandManager
;
class
nsIContentViewer
;
class
nsIDocument
;
class
nsIDOMNode
;
class
nsIDocShellTreeOwner
;
class
nsIGlobalHistory2
;
class
nsIHttpChannel
;
class
nsIMutableArray
;
class
nsIPrompt
;
class
nsISHistory
;
class
nsISecureBrowserUI
;
class
nsIStringBundle
;
class
nsIURIFixup
;
class
nsIURILoader
;
class
nsIWebBrowserFind
;
class
nsIWidget
;
class
FramingChecker
;
enum
ViewMode
{
viewNormal
=
0x0
viewSource
=
0x1
}
;
class
nsRefreshTimer
:
public
nsITimerCallback
public
nsINamed
{
public
:
nsRefreshTimer
(
nsDocShell
*
aDocShell
nsIURI
*
aURI
int32_t
aDelay
bool
aRepeat
bool
aMetaRefresh
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
int32_t
GetDelay
(
)
{
return
mDelay
;
}
RefPtr
<
nsDocShell
>
mDocShell
;
nsCOMPtr
<
nsIURI
>
mURI
;
int32_t
mDelay
;
bool
mRepeat
;
bool
mMetaRefresh
;
protected
:
virtual
~
nsRefreshTimer
(
)
;
}
;
enum
eCharsetReloadState
{
eCharsetReloadInit
eCharsetReloadRequested
eCharsetReloadStopOrigional
}
;
class
nsDocShell
final
:
public
nsDocLoader
public
nsIDocShell
public
nsIWebNavigation
public
nsIBaseWindow
public
nsIScrollable
public
nsITextScroll
public
nsIDocCharset
public
nsIContentViewerContainer
public
nsIRefreshURI
public
nsIWebProgressListener
public
nsIWebPageDescriptor
public
nsIAuthPromptProvider
public
nsILoadContext
public
nsIWebShellServices
public
nsILinkHandler
public
nsIClipboardCommands
public
nsIDOMStorageManager
public
nsINetworkInterceptController
public
nsIDeprecationWarner
public
mozilla
:
:
SupportsWeakPtr
<
nsDocShell
>
{
friend
class
nsDSURIContentListener
;
friend
class
FramingChecker
;
using
Encoding
=
mozilla
:
:
Encoding
;
public
:
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
nsDocShell
)
nsDocShell
(
)
;
virtual
nsresult
Init
(
)
override
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
nsDocShell
nsDocLoader
)
NS_DECL_NSIDOCSHELL
NS_DECL_NSIDOCSHELLTREEITEM
NS_DECL_NSIWEBNAVIGATION
NS_DECL_NSIBASEWINDOW
NS_DECL_NSISCROLLABLE
NS_DECL_NSITEXTSCROLL
NS_DECL_NSIDOCCHARSET
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIWEBPROGRESSLISTENER
NS_DECL_NSIREFRESHURI
NS_DECL_NSICONTENTVIEWERCONTAINER
NS_DECL_NSIWEBPAGEDESCRIPTOR
NS_DECL_NSIAUTHPROMPTPROVIDER
NS_DECL_NSICLIPBOARDCOMMANDS
NS_DECL_NSIWEBSHELLSERVICES
NS_DECL_NSINETWORKINTERCEPTCONTROLLER
NS_DECL_NSIDEPRECATIONWARNER
NS_FORWARD_SAFE_NSIDOMSTORAGEMANAGER
(
TopSessionStorageManager
(
)
)
NS_IMETHOD
Stop
(
)
override
{
return
nsDocLoader
:
:
Stop
(
)
;
}
NS_FORWARD_NSISECURITYEVENTSINK
(
nsDocLoader
:
:
)
NS_IMETHOD
OnLinkClick
(
nsIContent
*
aContent
nsIURI
*
aURI
const
char16_t
*
aTargetSpec
const
nsAString
&
aFileName
nsIInputStream
*
aPostDataStream
int64_t
aPostDataStreamLength
nsIInputStream
*
aHeadersDataStream
bool
aIsTrusted
nsIPrincipal
*
aTriggeringPrincipal
)
override
;
NS_IMETHOD
OnLinkClickSync
(
nsIContent
*
aContent
nsIURI
*
aURI
const
char16_t
*
aTargetSpec
const
nsAString
&
aFileName
nsIInputStream
*
aPostDataStream
=
0
int64_t
aPostDataStreamLength
=
-
1
nsIInputStream
*
aHeadersDataStream
=
0
bool
aNoOpenerImplied
=
false
nsIDocShell
*
*
aDocShell
=
0
nsIRequest
*
*
aRequest
=
0
nsIPrincipal
*
aTriggeringPrincipal
=
nullptr
)
override
;
NS_IMETHOD
OnOverLink
(
nsIContent
*
aContent
nsIURI
*
aURI
const
char16_t
*
aTargetSpec
)
override
;
NS_IMETHOD
OnLeaveLink
(
)
override
;
nsDocShellInfoLoadType
ConvertLoadTypeToDocShellLoadInfo
(
uint32_t
aLoadType
)
;
uint32_t
ConvertDocShellLoadInfoToLoadType
(
nsDocShellInfoLoadType
aDocShellLoadType
)
;
NS_IMETHOD
GetAssociatedWindow
(
mozIDOMWindowProxy
*
*
)
override
;
NS_IMETHOD
GetTopWindow
(
mozIDOMWindowProxy
*
*
)
override
;
NS_IMETHOD
GetTopFrameElement
(
nsIDOMElement
*
*
)
override
;
NS_IMETHOD
GetNestedFrameId
(
uint64_t
*
)
override
;
NS_IMETHOD
GetIsContent
(
bool
*
)
override
;
NS_IMETHOD
GetUsePrivateBrowsing
(
bool
*
)
override
;
NS_IMETHOD
SetUsePrivateBrowsing
(
bool
)
override
;
NS_IMETHOD
SetPrivateBrowsing
(
bool
)
override
;
NS_IMETHOD
GetUseRemoteTabs
(
bool
*
)
override
;
NS_IMETHOD
SetRemoteTabs
(
bool
)
override
;
NS_IMETHOD
GetScriptableOriginAttributes
(
JS
:
:
MutableHandle
<
JS
:
:
Value
>
)
override
;
nsresult
RestoreFromHistory
(
)
;
nsresult
ForceRefreshURIFromTimer
(
nsIURI
*
aURI
int32_t
aDelay
bool
aMetaRefresh
nsITimer
*
aTimer
)
;
friend
class
OnLinkClickEvent
;
static
bool
SandboxFlagsImplyCookies
(
const
uint32_t
&
aSandboxFlags
)
;
void
FireDummyOnLocationChange
(
)
{
FireOnLocationChange
(
this
nullptr
mCurrentURI
LOCATION_CHANGE_SAME_DOCUMENT
)
;
}
nsresult
HistoryTransactionRemoved
(
int32_t
aIndex
)
;
void
NotifyAsyncPanZoomStarted
(
)
;
void
NotifyAsyncPanZoomStopped
(
)
;
void
SetInFrameSwap
(
bool
aInSwap
)
{
mInFrameSwap
=
aInSwap
;
}
bool
InFrameSwap
(
)
;
const
Encoding
*
GetForcedCharset
(
)
{
return
mForcedCharset
;
}
mozilla
:
:
HTMLEditor
*
GetHTMLEditorInternal
(
)
;
nsresult
SetHTMLEditorInternal
(
mozilla
:
:
HTMLEditor
*
aHTMLEditor
)
;
nsDOMNavigationTiming
*
GetNavigationTiming
(
)
const
;
const
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
AncestorPrincipals
(
)
const
{
return
mAncestorPrincipals
;
}
void
SetAncestorPrincipals
(
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
&
aAncestorPrincipals
)
{
mAncestorPrincipals
=
mozilla
:
:
Move
(
aAncestorPrincipals
)
;
}
const
nsTArray
<
uint64_t
>
&
AncestorOuterWindowIDs
(
)
const
{
return
mAncestorOuterWindowIDs
;
}
void
SetAncestorOuterWindowIDs
(
nsTArray
<
uint64_t
>
&
&
aAncestorOuterWindowIDs
)
{
mAncestorOuterWindowIDs
=
mozilla
:
:
Move
(
aAncestorOuterWindowIDs
)
;
}
private
:
bool
CanSetOriginAttributes
(
)
;
public
:
const
mozilla
:
:
OriginAttributes
&
GetOriginAttributes
(
)
{
return
mOriginAttributes
;
}
nsresult
SetOriginAttributes
(
const
mozilla
:
:
OriginAttributes
&
aAttrs
)
;
void
GetInterceptedDocumentId
(
nsAString
&
aId
)
{
aId
=
mInterceptedDocumentId
;
}
private
:
mozilla
:
:
UniquePtr
<
mozilla
:
:
ObservedDocShell
>
mObserved
;
friend
void
mozilla
:
:
TimelineConsumers
:
:
AddConsumer
(
nsDocShell
*
)
;
friend
void
mozilla
:
:
TimelineConsumers
:
:
RemoveConsumer
(
nsDocShell
*
)
;
friend
void
mozilla
:
:
TimelineConsumers
:
:
AddMarkerForDocShell
(
nsDocShell
*
const
char
*
MarkerTracingType
MarkerStackRequest
)
;
friend
void
mozilla
:
:
TimelineConsumers
:
:
AddMarkerForDocShell
(
nsDocShell
*
const
char
*
const
TimeStamp
&
MarkerTracingType
MarkerStackRequest
)
;
friend
void
mozilla
:
:
TimelineConsumers
:
:
AddMarkerForDocShell
(
nsDocShell
*
UniquePtr
<
AbstractTimelineMarker
>
&
&
)
;
friend
void
mozilla
:
:
TimelineConsumers
:
:
PopMarkers
(
nsDocShell
*
JSContext
*
nsTArray
<
dom
:
:
ProfileTimelineMarker
>
&
)
;
public
:
static
void
CopyFavicon
(
nsIURI
*
aOldURI
nsIURI
*
aNewURI
nsIPrincipal
*
aLoadingPrincipal
bool
aInPrivateBrowsing
)
;
static
nsDocShell
*
Cast
(
nsIDocShell
*
aDocShell
)
{
return
static_cast
<
nsDocShell
*
>
(
aDocShell
)
;
}
protected
:
virtual
~
nsDocShell
(
)
;
virtual
void
DestroyChildren
(
)
override
;
nsresult
EnsureContentViewer
(
)
;
nsresult
CreateAboutBlankContentViewer
(
nsIPrincipal
*
aPrincipal
nsIURI
*
aBaseURI
bool
aTryToSaveOldPresentation
=
true
bool
aCheckPermitUnload
=
true
)
;
nsresult
CreateContentViewer
(
const
nsACString
&
aContentType
nsIRequest
*
aRequest
nsIStreamListener
*
*
aContentHandler
)
;
nsresult
NewContentViewerObj
(
const
nsACString
&
aContentType
nsIRequest
*
aRequest
nsILoadGroup
*
aLoadGroup
nsIStreamListener
*
*
aContentHandler
nsIContentViewer
*
*
aViewer
)
;
nsresult
SetupNewViewer
(
nsIContentViewer
*
aNewViewer
)
;
void
SetupReferrerFromChannel
(
nsIChannel
*
aChannel
)
;
nsresult
GetEldestPresContext
(
nsPresContext
*
*
aPresContext
)
;
nsIPrincipal
*
GetInheritedPrincipal
(
bool
aConsiderCurrentDocument
)
;
nsresult
DoURILoad
(
nsIURI
*
aURI
nsIURI
*
aOriginalURI
mozilla
:
:
Maybe
<
nsCOMPtr
<
nsIURI
>
>
const
&
aResultPrincipalURI
bool
aLoadReplace
bool
aLoadFromExternal
bool
aForceAllowDataURI
nsIURI
*
aReferrer
bool
aSendReferrer
uint32_t
aReferrerPolicy
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
const
char
*
aTypeHint
const
nsAString
&
aFileName
nsIInputStream
*
aPostData
int64_t
aPostDataLength
nsIInputStream
*
aHeadersData
bool
aFirstParty
nsIDocShell
*
*
aDocShell
nsIRequest
*
*
aRequest
bool
aIsNewWindowTarget
bool
aBypassClassifier
bool
aForceAllowCookies
const
nsAString
&
aSrcdoc
nsIURI
*
aBaseURI
nsContentPolicyType
aContentPolicyType
)
;
nsresult
AddHeadersToChannel
(
nsIInputStream
*
aHeadersData
nsIChannel
*
aChannel
)
;
nsresult
DoChannelLoad
(
nsIChannel
*
aChannel
nsIURILoader
*
aURILoader
bool
aBypassClassifier
)
;
nsresult
ScrollToAnchor
(
bool
aCurHasRef
bool
aNewHasRef
nsACString
&
aNewHash
uint32_t
aLoadType
)
;
bool
OnLoadingSite
(
nsIChannel
*
aChannel
bool
aFireOnLocationChange
bool
aAddToGlobalHistory
=
true
)
;
bool
OnNewURI
(
nsIURI
*
aURI
nsIChannel
*
aChannel
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
uint32_t
aLoadType
bool
aFireOnLocationChange
bool
aAddToGlobalHistory
bool
aCloneSHChildren
)
;
void
SetReferrerURI
(
nsIURI
*
aURI
)
;
void
SetReferrerPolicy
(
uint32_t
aReferrerPolicy
)
;
bool
ShouldAddToSessionHistory
(
nsIURI
*
aURI
nsIChannel
*
aChannel
)
;
nsresult
AddToSessionHistory
(
nsIURI
*
aURI
nsIChannel
*
aChannel
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
bool
aCloneChildren
nsISHEntry
*
*
aNewEntry
)
;
nsresult
AddChildSHEntryToParent
(
nsISHEntry
*
aNewEntry
int32_t
aChildOffset
bool
aCloneChildren
)
;
nsresult
AddChildSHEntryInternal
(
nsISHEntry
*
aCloneRef
nsISHEntry
*
aNewEntry
int32_t
aChildOffset
uint32_t
aLoadType
bool
aCloneChildren
)
;
nsresult
LoadHistoryEntry
(
nsISHEntry
*
aEntry
uint32_t
aLoadType
)
;
nsresult
PersistLayoutHistoryState
(
)
;
static
nsresult
CloneAndReplace
(
nsISHEntry
*
aSrcEntry
nsDocShell
*
aSrcShell
uint32_t
aCloneID
nsISHEntry
*
aReplaceEntry
bool
aCloneChildren
nsISHEntry
*
*
aDestEntry
)
;
static
nsresult
CloneAndReplaceChild
(
nsISHEntry
*
aEntry
nsDocShell
*
aShell
int32_t
aChildIndex
void
*
aData
)
;
nsresult
GetRootSessionHistory
(
nsISHistory
*
*
aReturn
)
;
nsresult
GetHttpChannel
(
nsIChannel
*
aChannel
nsIHttpChannel
*
*
aReturn
)
;
bool
ShouldDiscardLayoutState
(
nsIHttpChannel
*
aChannel
)
;
bool
HasHistoryEntry
(
nsISHEntry
*
aEntry
)
const
{
return
aEntry
&
&
(
aEntry
=
=
mOSHE
|
|
aEntry
=
=
mLSHE
)
;
}
void
SwapHistoryEntries
(
nsISHEntry
*
aOldEntry
nsISHEntry
*
aNewEntry
)
;
void
SetHistoryEntry
(
nsCOMPtr
<
nsISHEntry
>
*
aPtr
nsISHEntry
*
aEntry
)
;
static
nsresult
SetChildHistoryEntry
(
nsISHEntry
*
aEntry
nsDocShell
*
aShell
int32_t
aEntryIndex
void
*
aData
)
;
typedef
nsresult
(
*
WalkHistoryEntriesFunc
)
(
nsISHEntry
*
aEntry
nsDocShell
*
aShell
int32_t
aChildIndex
void
*
aData
)
;
static
nsresult
WalkHistoryEntries
(
nsISHEntry
*
aRootEntry
nsDocShell
*
aRootShell
WalkHistoryEntriesFunc
aCallback
void
*
aData
)
;
virtual
void
OnRedirectStateChange
(
nsIChannel
*
aOldChannel
nsIChannel
*
aNewChannel
uint32_t
aRedirectFlags
uint32_t
aStateFlags
)
override
;
bool
ChannelIsPost
(
nsIChannel
*
aChannel
)
;
void
ExtractLastVisit
(
nsIChannel
*
aChannel
nsIURI
*
*
aURI
uint32_t
*
aChannelRedirectFlags
)
;
void
SaveLastVisit
(
nsIChannel
*
aChannel
nsIURI
*
aURI
uint32_t
aChannelRedirectFlags
)
;
void
AddURIVisit
(
nsIURI
*
aURI
nsIURI
*
aReferrerURI
nsIURI
*
aPreviousURI
uint32_t
aChannelRedirectFlags
uint32_t
aResponseStatus
=
0
)
;
nsresult
ConfirmRepost
(
bool
*
aRepost
)
;
NS_IMETHOD
GetPromptAndStringBundle
(
nsIPrompt
*
*
aPrompt
nsIStringBundle
*
*
aStringBundle
)
;
NS_IMETHOD
GetChildOffset
(
nsIDOMNode
*
aChild
nsIDOMNode
*
aParent
int32_t
*
aOffset
)
;
nsIScrollableFrame
*
GetRootScrollFrame
(
)
;
NS_IMETHOD
EnsureScriptEnvironment
(
)
;
NS_IMETHOD
EnsureEditorData
(
)
;
nsresult
EnsureTransferableHookData
(
)
;
NS_IMETHOD
EnsureFind
(
)
;
nsresult
RefreshURIFromQueue
(
)
;
NS_IMETHOD
LoadErrorPage
(
nsIURI
*
aURI
const
char16_t
*
aURL
const
char
*
aErrorPage
const
char
*
aErrorType
const
char16_t
*
aDescription
const
char
*
aCSSClass
nsIChannel
*
aFailedChannel
)
;
bool
IsPrintingOrPP
(
bool
aDisplayErrorDialog
=
true
)
;
bool
IsNavigationAllowed
(
bool
aDisplayPrintErrorDialog
=
true
bool
aCheckIfUnloadFired
=
true
)
;
nsresult
SetBaseUrlForWyciwyg
(
nsIContentViewer
*
aContentViewer
)
;
static
inline
uint32_t
PRTimeToSeconds
(
PRTime
aTimeUsec
)
{
PRTime
usecPerSec
=
PR_USEC_PER_SEC
;
return
uint32_t
(
aTimeUsec
/
=
usecPerSec
)
;
}
inline
bool
UseErrorPages
(
)
{
return
(
mObserveErrorPages
?
sUseErrorPages
:
mUseErrorPages
)
;
}
bool
IsFrame
(
)
;
virtual
nsresult
EndPageLoad
(
nsIWebProgress
*
aProgress
nsIChannel
*
aChannel
nsresult
aResult
)
;
nsresult
SetDocCurrentStateObj
(
nsISHEntry
*
aShEntry
)
;
nsresult
CheckLoadingPermissions
(
)
;
static
bool
CanAccessItem
(
nsIDocShellTreeItem
*
aTargetItem
nsIDocShellTreeItem
*
aAccessingItem
bool
aConsiderOpener
=
true
)
;
static
bool
ValidateOrigin
(
nsIDocShellTreeItem
*
aOriginTreeItem
nsIDocShellTreeItem
*
aTargetTreeItem
)
;
bool
SetCurrentURI
(
nsIURI
*
aURI
nsIRequest
*
aRequest
bool
aFireOnLocationChange
uint32_t
aLocationFlags
)
;
bool
CanSavePresentation
(
uint32_t
aLoadType
nsIRequest
*
aNewRequest
nsIDocument
*
aNewDocument
)
;
nsresult
CaptureState
(
)
;
nsresult
RestorePresentation
(
nsISHEntry
*
aSHEntry
bool
*
aRestoring
)
;
nsresult
BeginRestoreChildren
(
)
;
void
DoGetPositionAndSize
(
int32_t
*
aX
int32_t
*
aY
int32_t
*
aWidth
int32_t
*
aHeight
)
;
bool
IsOKToLoadURI
(
nsIURI
*
aURI
)
;
void
ReattachEditorToWindow
(
nsISHEntry
*
aSHEntry
)
;
nsCOMPtr
<
nsIDOMStorageManager
>
mSessionStorageManager
;
nsIDOMStorageManager
*
TopSessionStorageManager
(
)
;
nsresult
GetControllerForCommand
(
const
char
*
aCommand
nsIController
*
*
aResult
)
;
nsresult
EnsureCommandHandler
(
)
;
nsIChannel
*
GetCurrentDocChannel
(
)
;
bool
ShouldBlockLoadingForBackButton
(
)
;
already_AddRefed
<
nsDocShell
>
GetParentDocshell
(
)
;
void
MaybeCreateInitialClientSource
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
GetInitialClientInfo
(
)
const
;
protected
:
nsresult
GetCurScrollPos
(
int32_t
aScrollOrientation
int32_t
*
aCurPos
)
;
nsresult
SetCurScrollPosEx
(
int32_t
aCurHorizontalPos
int32_t
aCurVerticalPos
)
;
virtual
nsresult
SetDocLoaderParent
(
nsDocLoader
*
aLoader
)
override
;
void
ClearFrameHistory
(
nsISHEntry
*
aEntry
)
;
MOZ_MUST_USE
bool
MaybeInitTiming
(
)
;
void
MaybeResetInitTiming
(
bool
aReset
)
;
bool
DisplayLoadError
(
nsresult
aError
nsIURI
*
aURI
const
char16_t
*
aURL
nsIChannel
*
aFailedChannel
)
{
bool
didDisplayLoadError
=
false
;
DisplayLoadError
(
aError
aURI
aURL
aFailedChannel
&
didDisplayLoadError
)
;
return
didDisplayLoadError
;
}
public
:
class
RestorePresentationEvent
:
public
mozilla
:
:
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
explicit
RestorePresentationEvent
(
nsDocShell
*
aDs
)
:
mozilla
:
:
Runnable
(
"
nsDocShell
:
:
RestorePresentationEvent
"
)
mDocShell
(
aDs
)
{
}
void
Revoke
(
)
{
mDocShell
=
nullptr
;
}
private
:
RefPtr
<
nsDocShell
>
mDocShell
;
}
;
protected
:
bool
JustStartedNetworkLoad
(
)
;
nsresult
CreatePrincipalFromReferrer
(
nsIURI
*
aReferrer
nsIPrincipal
*
*
aResult
)
;
static
const
nsCString
FrameTypeToString
(
uint32_t
aFrameType
)
{
switch
(
aFrameType
)
{
case
FRAME_TYPE_BROWSER
:
return
NS_LITERAL_CSTRING
(
"
browser
"
)
;
case
FRAME_TYPE_REGULAR
:
return
NS_LITERAL_CSTRING
(
"
regular
"
)
;
default
:
NS_ERROR
(
"
Unknown
frame
type
"
)
;
return
EmptyCString
(
)
;
}
}
uint32_t
GetInheritedFrameType
(
)
;
bool
HasUnloadedParent
(
)
;
void
UpdateGlobalHistoryTitle
(
nsIURI
*
aURI
)
;
NS_IMETHOD_
(
void
)
GetOriginAttributes
(
mozilla
:
:
OriginAttributes
&
aAttrs
)
override
;
nsIntRect
mBounds
;
nsString
mName
;
nsString
mTitle
;
nsString
mCustomUserAgent
;
nsCString
mContentTypeHint
;
nsIntPoint
mDefaultScrollbarPref
;
nsCOMPtr
<
nsIMutableArray
>
mRefreshURIList
;
nsCOMPtr
<
nsIMutableArray
>
mSavedRefreshURIList
;
RefPtr
<
nsDSURIContentListener
>
mContentListener
;
nsCOMPtr
<
nsIContentViewer
>
mContentViewer
;
nsCOMPtr
<
nsIWidget
>
mParentWidget
;
nsCOMPtr
<
nsIURI
>
mCurrentURI
;
nsCOMPtr
<
nsIURI
>
mReferrerURI
;
uint32_t
mReferrerPolicy
;
RefPtr
<
nsGlobalWindowOuter
>
mScriptGlobal
;
nsCOMPtr
<
nsISHistory
>
mSessionHistory
;
nsCOMPtr
<
nsIGlobalHistory2
>
mGlobalHistory
;
nsCOMPtr
<
nsIWebBrowserFind
>
mFind
;
nsCOMPtr
<
nsICommandManager
>
mCommandManager
;
nsCOMPtr
<
nsISHEntry
>
mOSHE
;
nsCOMPtr
<
nsISHEntry
>
mLSHE
;
nsRevocableEventPtr
<
RestorePresentationEvent
>
mRestorePresentationEvent
;
nsAutoPtr
<
nsDocShellEditorData
>
mEditorData
;
nsCOMPtr
<
nsIClipboardDragDropHookList
>
mTransferableHookData
;
nsCOMPtr
<
nsISecureBrowserUI
>
mSecurityUI
;
nsCOMPtr
<
nsIURI
>
mLoadingURI
;
nsCOMPtr
<
nsIURI
>
mFailedURI
;
nsCOMPtr
<
nsIChannel
>
mFailedChannel
;
uint32_t
mFailedLoadType
;
nsCOMPtr
<
nsIChannel
>
mMixedContentChannel
;
nsIDocShellTreeOwner
*
mTreeOwner
;
mozilla
:
:
dom
:
:
EventTarget
*
mChromeEventHandler
;
eCharsetReloadState
mCharsetReloadState
;
nsCOMPtr
<
nsILoadURIDelegate
>
mLoadURIDelegate
;
int32_t
mChildOffset
;
uint32_t
mBusyFlags
;
uint32_t
mAppType
;
uint32_t
mLoadType
;
int32_t
mMarginWidth
;
int32_t
mMarginHeight
;
int32_t
mItemType
;
int32_t
mPreviousTransIndex
;
int32_t
mLoadedTransIndex
;
uint32_t
mSandboxFlags
;
nsWeakPtr
mOnePermittedSandboxedNavigator
;
mozilla
:
:
dom
:
:
ScreenOrientationInternal
mOrientationLock
;
enum
FullscreenAllowedState
:
uint8_t
{
CHECK_ATTRIBUTES
PARENT_ALLOWS
PARENT_PROHIBITS
}
;
FullscreenAllowedState
mFullscreenAllowed
;
static
bool
sUseErrorPages
;
bool
mCreated
:
1
;
bool
mAllowSubframes
:
1
;
bool
mAllowPlugins
:
1
;
bool
mAllowJavascript
:
1
;
bool
mAllowMetaRedirects
:
1
;
bool
mAllowImages
:
1
;
bool
mAllowMedia
:
1
;
bool
mAllowDNSPrefetch
:
1
;
bool
mAllowWindowControl
:
1
;
bool
mAllowContentRetargeting
:
1
;
bool
mAllowContentRetargetingOnChildren
:
1
;
bool
mUseErrorPages
:
1
;
bool
mObserveErrorPages
:
1
;
bool
mAllowAuth
:
1
;
bool
mAllowKeywordFixup
:
1
;
bool
mIsOffScreenBrowser
:
1
;
bool
mIsActive
:
1
;
bool
mDisableMetaRefreshWhenInactive
:
1
;
bool
mIsPrerendered
:
1
;
bool
mIsAppTab
:
1
;
bool
mUseGlobalHistory
:
1
;
bool
mUseRemoteTabs
:
1
;
bool
mUseTrackingProtection
:
1
;
bool
mDeviceSizeIsPageSize
:
1
;
bool
mWindowDraggingAllowed
:
1
;
bool
mInFrameSwap
:
1
;
bool
mInheritPrivateBrowsingId
:
1
;
bool
mCanExecuteScripts
:
1
;
void
RecomputeCanExecuteScripts
(
)
;
bool
mFiredUnloadEvent
:
1
;
bool
mEODForCurrentDocument
:
1
;
bool
mURIResultedInDocument
:
1
;
bool
mIsBeingDestroyed
:
1
;
bool
mIsExecutingOnLoadHandler
:
1
;
bool
mIsPrintingOrPP
:
1
;
bool
mSavingOldViewer
:
1
;
bool
mDynamicallyCreated
:
1
;
bool
mAffectPrivateSessionLifetime
:
1
;
bool
mInvisible
:
1
;
bool
mHasLoadedNonBlankURI
:
1
;
bool
mBlankTiming
:
1
;
bool
mCreatingDocument
;
#
ifdef
DEBUG
bool
mInEnsureScriptEnv
;
#
endif
nsID
mHistoryID
;
uint32_t
mDefaultLoadFlags
;
static
nsIURIFixup
*
sURIFixup
;
RefPtr
<
nsDOMNavigationTiming
>
mTiming
;
uint32_t
mFrameType
;
uint32_t
mPrivateBrowsingId
;
nsString
mInterceptedDocumentId
;
uint32_t
mDisplayMode
;
private
:
const
Encoding
*
mForcedCharset
;
const
Encoding
*
mParentCharset
;
int32_t
mParentCharsetSource
;
nsCOMPtr
<
nsIPrincipal
>
mParentCharsetPrincipal
;
nsTObserverArray
<
nsWeakPtr
>
mPrivacyObservers
;
nsTObserverArray
<
nsWeakPtr
>
mReflowObservers
;
nsTObserverArray
<
nsWeakPtr
>
mScrollObservers
;
nsCString
mOriginalUriString
;
nsWeakPtr
mOpener
;
mozilla
:
:
OriginAttributes
mOriginAttributes
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
dom
:
:
PendingGlobalHistoryEntry
>
mPrerenderGlobalHistory
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
dom
:
:
ClientSource
>
mInitialClientSource
;
uint32_t
mJSRunToCompletionDepth
;
uint32_t
mTouchEventsOverride
;
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
mAncestorPrincipals
;
nsTArray
<
uint64_t
>
mAncestorOuterWindowIDs
;
nsresult
DoFindItemWithName
(
const
nsAString
&
aName
nsIDocShellTreeItem
*
aRequestor
nsIDocShellTreeItem
*
aOriginalRequestor
bool
aSkipTabGroup
nsIDocShellTreeItem
*
*
aResult
)
;
void
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
void
MaybeNotifyKeywordSearchLoading
(
const
nsString
&
aProvider
const
nsString
&
aKeyword
)
;
void
FirePageHideNotificationInternal
(
bool
aIsUnload
bool
aSkipCheckingDynEntries
)
;
nsresult
DispatchToTabGroup
(
mozilla
:
:
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
#
ifdef
DEBUG
static
unsigned
long
gNumberOfDocShells
;
#
endif
public
:
class
InterfaceRequestorProxy
:
public
nsIInterfaceRequestor
{
public
:
explicit
InterfaceRequestorProxy
(
nsIInterfaceRequestor
*
aRequestor
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINTERFACEREQUESTOR
protected
:
virtual
~
InterfaceRequestorProxy
(
)
;
InterfaceRequestorProxy
(
)
{
}
nsWeakPtr
mWeakPtr
;
}
;
}
;
#
endif
