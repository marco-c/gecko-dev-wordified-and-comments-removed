#
ifndef
nsDocShellLoadState_h__
#
define
nsDocShellLoadState_h__
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsDocShellLoadTypes
.
h
"
class
nsIContentSecurityPolicy
;
class
nsIInputStream
;
class
nsISHEntry
;
class
nsIURI
;
class
nsIDocShell
;
class
nsIChannel
;
class
nsIReferrerInfo
;
class
OriginAttibutes
;
namespace
mozilla
{
namespace
dom
{
class
DocShellLoadStateInit
;
}
}
class
nsDocShellLoadState
final
{
using
BrowsingContext
=
mozilla
:
:
dom
:
:
BrowsingContext
;
template
<
typename
T
>
using
MaybeDiscarded
=
mozilla
:
:
dom
:
:
MaybeDiscarded
<
T
>
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
nsDocShellLoadState
)
;
explicit
nsDocShellLoadState
(
nsIURI
*
aURI
)
;
explicit
nsDocShellLoadState
(
const
mozilla
:
:
dom
:
:
DocShellLoadStateInit
&
aLoadState
)
;
static
nsresult
CreateFromPendingChannel
(
nsIChannel
*
aPendingChannel
nsDocShellLoadState
*
*
aResult
)
;
static
nsresult
CreateFromLoadURIOptions
(
nsISupports
*
aConsumer
nsIURIFixup
*
aURIFixup
const
nsAString
&
aURI
const
mozilla
:
:
dom
:
:
LoadURIOptions
&
aLoadURIOptions
nsDocShellLoadState
*
*
aResult
)
;
nsIReferrerInfo
*
GetReferrerInfo
(
)
const
;
void
SetReferrerInfo
(
nsIReferrerInfo
*
aReferrerInfo
)
;
nsIURI
*
URI
(
)
const
;
void
SetURI
(
nsIURI
*
aURI
)
;
nsIURI
*
OriginalURI
(
)
const
;
void
SetOriginalURI
(
nsIURI
*
aOriginalURI
)
;
nsIURI
*
ResultPrincipalURI
(
)
const
;
void
SetResultPrincipalURI
(
nsIURI
*
aResultPrincipalURI
)
;
bool
ResultPrincipalURIIsSome
(
)
const
;
void
SetResultPrincipalURIIsSome
(
bool
aIsSome
)
;
bool
KeepResultPrincipalURIIfSet
(
)
const
;
void
SetKeepResultPrincipalURIIfSet
(
bool
aKeep
)
;
nsIPrincipal
*
PrincipalToInherit
(
)
const
;
void
SetPrincipalToInherit
(
nsIPrincipal
*
aPrincipalToInherit
)
;
nsIPrincipal
*
StoragePrincipalToInherit
(
)
const
;
void
SetStoragePrincipalToInherit
(
nsIPrincipal
*
aStoragePrincipalToInherit
)
;
bool
LoadReplace
(
)
const
;
void
SetLoadReplace
(
bool
aLoadReplace
)
;
nsIPrincipal
*
TriggeringPrincipal
(
)
const
;
void
SetTriggeringPrincipal
(
nsIPrincipal
*
aTriggeringPrincipal
)
;
nsIContentSecurityPolicy
*
Csp
(
)
const
;
void
SetCsp
(
nsIContentSecurityPolicy
*
aCsp
)
;
bool
InheritPrincipal
(
)
const
;
void
SetInheritPrincipal
(
bool
aInheritPrincipal
)
;
bool
PrincipalIsExplicit
(
)
const
;
void
SetPrincipalIsExplicit
(
bool
aPrincipalIsExplicit
)
;
bool
ForceAllowDataURI
(
)
const
;
void
SetForceAllowDataURI
(
bool
aForceAllowDataURI
)
;
bool
OriginalFrameSrc
(
)
const
;
void
SetOriginalFrameSrc
(
bool
aOriginalFrameSrc
)
;
bool
IsFormSubmission
(
)
const
;
void
SetIsFormSubmission
(
bool
aIsFormSubmission
)
;
uint32_t
LoadType
(
)
const
;
void
SetLoadType
(
uint32_t
aLoadType
)
;
nsISHEntry
*
SHEntry
(
)
const
;
void
SetSHEntry
(
nsISHEntry
*
aSHEntry
)
;
const
nsString
&
Target
(
)
const
;
void
SetTarget
(
const
nsAString
&
aTarget
)
;
nsIInputStream
*
PostDataStream
(
)
const
;
void
SetPostDataStream
(
nsIInputStream
*
aStream
)
;
nsIInputStream
*
HeadersStream
(
)
const
;
void
SetHeadersStream
(
nsIInputStream
*
aHeadersStream
)
;
bool
IsSrcdocLoad
(
)
const
;
const
nsString
&
SrcdocData
(
)
const
;
void
SetSrcdocData
(
const
nsAString
&
aSrcdocData
)
;
const
MaybeDiscarded
<
BrowsingContext
>
&
SourceBrowsingContext
(
)
const
{
return
mSourceBrowsingContext
;
}
void
SetSourceBrowsingContext
(
BrowsingContext
*
aSourceBrowsingContext
)
;
nsIURI
*
BaseURI
(
)
const
;
void
SetBaseURI
(
nsIURI
*
aBaseURI
)
;
void
GetMaybeResultPrincipalURI
(
mozilla
:
:
Maybe
<
nsCOMPtr
<
nsIURI
>
>
&
aRPURI
)
const
;
void
SetMaybeResultPrincipalURI
(
mozilla
:
:
Maybe
<
nsCOMPtr
<
nsIURI
>
>
const
&
aRPURI
)
;
uint32_t
LoadFlags
(
)
const
;
void
SetLoadFlags
(
uint32_t
aFlags
)
;
void
SetLoadFlag
(
uint32_t
aFlag
)
;
void
UnsetLoadFlag
(
uint32_t
aFlag
)
;
bool
HasLoadFlags
(
uint32_t
aFlag
)
;
bool
FirstParty
(
)
const
;
void
SetFirstParty
(
bool
aFirstParty
)
;
const
nsCString
&
TypeHint
(
)
const
;
void
SetTypeHint
(
const
nsCString
&
aTypeHint
)
;
const
nsString
&
FileName
(
)
const
;
void
SetFileName
(
const
nsAString
&
aFileName
)
;
nsresult
SetupInheritingPrincipal
(
mozilla
:
:
dom
:
:
BrowsingContext
:
:
Type
aType
const
mozilla
:
:
OriginAttributes
&
aOriginAttributes
)
;
nsresult
SetupTriggeringPrincipal
(
const
mozilla
:
:
OriginAttributes
&
aOriginAttributes
)
;
void
SetIsFromProcessingFrameAttributes
(
)
{
mIsFromProcessingFrameAttributes
=
true
;
}
bool
GetIsFromProcessingFrameAttributes
(
)
const
{
return
mIsFromProcessingFrameAttributes
;
}
nsIChannel
*
GetPendingRedirectedChannel
(
)
{
return
mPendingRedirectedChannel
;
}
void
SetOriginalURIString
(
const
nsCString
&
aOriginalURI
)
{
mOriginalURIString
.
emplace
(
aOriginalURI
)
;
}
const
mozilla
:
:
Maybe
<
nsCString
>
&
GetOriginalURIString
(
)
const
{
return
mOriginalURIString
;
}
void
SetCancelContentJSEpoch
(
int32_t
aCancelEpoch
)
{
mCancelContentJSEpoch
.
emplace
(
aCancelEpoch
)
;
}
const
mozilla
:
:
Maybe
<
int32_t
>
&
GetCancelContentJSEpoch
(
)
const
{
return
mCancelContentJSEpoch
;
}
void
CalculateLoadURIFlags
(
)
;
mozilla
:
:
dom
:
:
DocShellLoadStateInit
Serialize
(
)
;
protected
:
~
nsDocShellLoadState
(
)
;
protected
:
nsCOMPtr
<
nsIReferrerInfo
>
mReferrerInfo
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIURI
>
mOriginalURI
;
nsCOMPtr
<
nsIURI
>
mResultPrincipalURI
;
bool
mResultPrincipalURIIsSome
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
mCsp
;
bool
mKeepResultPrincipalURIIfSet
;
bool
mLoadReplace
;
bool
mInheritPrincipal
;
bool
mPrincipalIsExplicit
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipalToInherit
;
nsCOMPtr
<
nsIPrincipal
>
mStoragePrincipalToInherit
;
bool
mForceAllowDataURI
;
bool
mOriginalFrameSrc
;
bool
mIsFormSubmission
;
uint32_t
mLoadType
;
nsCOMPtr
<
nsISHEntry
>
mSHEntry
;
nsString
mTarget
;
nsCOMPtr
<
nsIInputStream
>
mPostDataStream
;
nsCOMPtr
<
nsIInputStream
>
mHeadersStream
;
nsString
mSrcdocData
;
MaybeDiscarded
<
BrowsingContext
>
mSourceBrowsingContext
;
nsCOMPtr
<
nsIURI
>
mBaseURI
;
uint32_t
mLoadFlags
;
bool
mFirstParty
;
nsCString
mTypeHint
;
nsString
mFileName
;
bool
mIsFromProcessingFrameAttributes
;
nsCOMPtr
<
nsIChannel
>
mPendingRedirectedChannel
;
mozilla
:
:
Maybe
<
nsCString
>
mOriginalURIString
;
mozilla
:
:
Maybe
<
int32_t
>
mCancelContentJSEpoch
;
}
;
#
endif
