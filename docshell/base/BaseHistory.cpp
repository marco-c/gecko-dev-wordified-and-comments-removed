#
include
"
BaseHistory
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Link
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
namespace
mozilla
{
using
mozilla
:
:
dom
:
:
ContentParent
;
using
mozilla
:
:
dom
:
:
Link
;
BaseHistory
:
:
BaseHistory
(
)
:
mTrackedURIs
(
kTrackedUrisInitialSize
)
{
}
BaseHistory
:
:
~
BaseHistory
(
)
=
default
;
static
constexpr
nsLiteralCString
kDisallowedSchemes
[
]
=
{
"
about
"
_ns
"
blob
"
_ns
"
data
"
_ns
"
chrome
"
_ns
"
imap
"
_ns
"
javascript
"
_ns
"
mailbox
"
_ns
"
moz
-
anno
"
_ns
"
news
"
_ns
"
page
-
icon
"
_ns
"
resource
"
_ns
"
view
-
source
"
_ns
"
moz
-
extension
"
_ns
}
;
bool
BaseHistory
:
:
CanStore
(
nsIURI
*
aURI
)
{
nsAutoCString
scheme
;
if
(
NS_WARN_IF
(
NS_FAILED
(
aURI
-
>
GetScheme
(
scheme
)
)
)
)
{
return
false
;
}
if
(
!
scheme
.
EqualsLiteral
(
"
http
"
)
&
&
!
scheme
.
EqualsLiteral
(
"
https
"
)
)
{
for
(
const
nsLiteralCString
&
disallowed
:
kDisallowedSchemes
)
{
if
(
scheme
.
Equals
(
disallowed
)
)
{
return
false
;
}
}
}
nsAutoCString
spec
;
aURI
-
>
GetSpec
(
spec
)
;
return
spec
.
Length
(
)
<
=
StaticPrefs
:
:
browser_history_maxUrlLength
(
)
;
}
void
BaseHistory
:
:
ScheduleVisitedQuery
(
nsIURI
*
aURI
)
{
mPendingQueries
.
PutEntry
(
aURI
)
;
if
(
mStartPendingVisitedQueriesScheduled
)
{
return
;
}
mStartPendingVisitedQueriesScheduled
=
NS_SUCCEEDED
(
NS_DispatchToMainThreadQueue
(
NS_NewRunnableFunction
(
"
BaseHistory
:
:
StartPendingVisitedQueries
"
[
self
=
RefPtr
<
BaseHistory
>
(
this
)
]
{
self
-
>
mStartPendingVisitedQueriesScheduled
=
false
;
auto
queries
=
std
:
:
move
(
self
-
>
mPendingQueries
)
;
self
-
>
StartPendingVisitedQueries
(
queries
)
;
MOZ_DIAGNOSTIC_ASSERT
(
self
-
>
mPendingQueries
.
IsEmpty
(
)
)
;
}
)
EventQueuePriority
:
:
Idle
)
)
;
}
void
BaseHistory
:
:
CancelVisitedQueryIfPossible
(
nsIURI
*
aURI
)
{
mPendingQueries
.
RemoveEntry
(
aURI
)
;
}
void
BaseHistory
:
:
RegisterVisitedCallback
(
nsIURI
*
aURI
Link
*
aLink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aURI
"
Must
pass
a
non
-
null
URI
!
"
)
;
if
(
XRE_IsContentProcess
(
)
)
{
MOZ_ASSERT
(
aLink
"
Must
pass
a
non
-
null
Link
!
"
)
;
}
auto
entry
=
mTrackedURIs
.
LookupForAdd
(
aURI
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
entry
|
|
!
entry
.
Data
(
)
.
mLinks
.
IsEmpty
(
)
"
An
empty
key
was
kept
around
in
our
hashtable
!
"
)
;
if
(
!
entry
)
{
ScheduleVisitedQuery
(
aURI
)
;
}
if
(
!
aLink
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
We
should
only
ever
get
a
null
Link
"
"
in
the
parent
process
!
"
)
;
if
(
!
entry
)
{
entry
.
OrRemove
(
)
;
}
return
;
}
ObservingLinks
&
links
=
entry
.
OrInsert
(
[
]
{
return
ObservingLinks
{
}
;
}
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
links
.
mLinks
.
Contains
(
aLink
)
"
Already
tracking
this
Link
object
!
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
links
.
mStatus
!
=
VisitedStatus
:
:
Visited
"
We
don
'
t
keep
tracking
known
-
visited
links
"
)
;
links
.
mLinks
.
AppendElement
(
aLink
)
;
switch
(
links
.
mStatus
)
{
case
VisitedStatus
:
:
Unknown
:
break
;
case
VisitedStatus
:
:
Unvisited
:
if
(
!
StaticPrefs
:
:
layout_css_notify_of_unvisited
(
)
)
{
break
;
}
[
[
fallthrough
]
]
;
case
VisitedStatus
:
:
Visited
:
aLink
-
>
VisitedQueryFinished
(
links
.
mStatus
=
=
VisitedStatus
:
:
Visited
)
;
break
;
}
}
void
BaseHistory
:
:
UnregisterVisitedCallback
(
nsIURI
*
aURI
Link
*
aLink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aURI
"
Must
pass
a
non
-
null
URI
!
"
)
;
MOZ_ASSERT
(
aLink
"
Must
pass
a
non
-
null
Link
object
!
"
)
;
auto
entry
=
mTrackedURIs
.
Lookup
(
aURI
)
;
if
(
!
entry
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Trying
to
unregister
URI
that
wasn
'
t
registered
!
"
)
;
return
;
}
ObserverArray
&
observers
=
entry
.
Data
(
)
.
mLinks
;
if
(
!
observers
.
RemoveElement
(
aLink
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Trying
to
unregister
node
that
wasn
'
t
registered
!
"
)
;
return
;
}
if
(
observers
.
IsEmpty
(
)
)
{
entry
.
Remove
(
)
;
CancelVisitedQueryIfPossible
(
aURI
)
;
}
}
void
BaseHistory
:
:
NotifyVisited
(
nsIURI
*
aURI
VisitedStatus
aStatus
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aStatus
!
=
VisitedStatus
:
:
Unknown
)
;
if
(
aStatus
=
=
VisitedStatus
:
:
Unvisited
&
&
!
StaticPrefs
:
:
layout_css_notify_of_unvisited
(
)
)
{
return
;
}
NotifyVisitedInThisProcess
(
aURI
aStatus
)
;
if
(
XRE_IsParentProcess
(
)
)
{
NotifyVisitedFromParent
(
aURI
aStatus
)
;
}
}
void
BaseHistory
:
:
NotifyVisitedInThisProcess
(
nsIURI
*
aURI
VisitedStatus
aStatus
)
{
if
(
NS_WARN_IF
(
!
aURI
)
)
{
return
;
}
auto
entry
=
mTrackedURIs
.
Lookup
(
aURI
)
;
if
(
!
entry
)
{
return
;
}
ObservingLinks
&
links
=
entry
.
Data
(
)
;
links
.
mStatus
=
aStatus
;
MOZ_ASSERT
(
!
links
.
mLinks
.
IsEmpty
(
)
)
;
const
bool
visited
=
aStatus
=
=
VisitedStatus
:
:
Visited
;
for
(
Link
*
link
:
links
.
mLinks
.
BackwardRange
(
)
)
{
link
-
>
VisitedQueryFinished
(
visited
)
;
}
if
(
visited
)
{
entry
.
Remove
(
)
;
}
}
void
BaseHistory
:
:
SendPendingVisitedResultsToChildProcesses
(
)
{
MOZ_ASSERT
(
!
mPendingResults
.
IsEmpty
(
)
)
;
mStartPendingResultsScheduled
=
false
;
auto
results
=
std
:
:
move
(
mPendingResults
)
;
MOZ_ASSERT
(
mPendingResults
.
IsEmpty
(
)
)
;
nsTArray
<
ContentParent
*
>
cplist
;
ContentParent
:
:
GetAll
(
cplist
)
;
for
(
ContentParent
*
cp
:
cplist
)
{
Unused
<
<
NS_WARN_IF
(
!
cp
-
>
SendNotifyVisited
(
results
)
)
;
}
}
void
BaseHistory
:
:
NotifyVisitedFromParent
(
nsIURI
*
aURI
VisitedStatus
aStatus
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
auto
&
result
=
*
mPendingResults
.
AppendElement
(
)
;
result
.
visited
(
)
=
aStatus
=
=
VisitedStatus
:
:
Visited
;
result
.
uri
(
)
=
aURI
;
if
(
mStartPendingResultsScheduled
)
{
return
;
}
mStartPendingResultsScheduled
=
NS_SUCCEEDED
(
NS_DispatchToMainThreadQueue
(
NewRunnableMethod
(
"
BaseHistory
:
:
SendPendingVisitedResultsToChildProcesses
"
this
&
BaseHistory
:
:
SendPendingVisitedResultsToChildProcesses
)
EventQueuePriority
:
:
Idle
)
)
;
}
}
