#
include
"
BaseHistory
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Link
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
namespace
mozilla
{
using
mozilla
:
:
dom
:
:
Document
;
using
mozilla
:
:
dom
:
:
Element
;
using
mozilla
:
:
dom
:
:
Link
;
static
Document
*
GetLinkDocument
(
const
Link
&
aLink
)
{
Element
*
element
=
aLink
.
GetElement
(
)
;
return
element
?
element
-
>
OwnerDoc
(
)
:
nullptr
;
}
void
BaseHistory
:
:
DispatchNotifyVisited
(
nsIURI
*
aURI
dom
:
:
Document
*
aDoc
VisitedStatus
aStatus
)
{
MOZ_ASSERT
(
aStatus
!
=
VisitedStatus
:
:
Unknown
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
NewRunnableMethod
<
nsCOMPtr
<
nsIURI
>
RefPtr
<
dom
:
:
Document
>
VisitedStatus
>
(
"
BaseHistory
:
:
DispatchNotifyVisited
"
this
&
BaseHistory
:
:
NotifyVisitedForDocument
aURI
aDoc
aStatus
)
;
if
(
aDoc
)
{
aDoc
-
>
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
}
else
{
NS_DispatchToMainThread
(
runnable
.
forget
(
)
)
;
}
}
void
BaseHistory
:
:
NotifyVisitedForDocument
(
nsIURI
*
aURI
dom
:
:
Document
*
aDoc
VisitedStatus
aStatus
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aStatus
!
=
VisitedStatus
:
:
Unknown
)
;
nsAutoScriptBlocker
scriptBlocker
;
auto
entry
=
mTrackedURIs
.
Lookup
(
aURI
)
;
if
(
!
entry
)
{
return
;
}
ObservingLinks
&
links
=
entry
.
Data
(
)
;
const
bool
visited
=
aStatus
=
=
VisitedStatus
:
:
Visited
;
{
ObserverArray
:
:
BackwardIterator
iter
(
links
.
mLinks
)
;
while
(
iter
.
HasMore
(
)
)
{
Link
*
link
=
iter
.
GetNext
(
)
;
if
(
GetLinkDocument
(
*
link
)
=
=
aDoc
)
{
link
-
>
VisitedQueryFinished
(
visited
)
;
if
(
visited
)
{
iter
.
Remove
(
)
;
}
}
}
}
if
(
links
.
mLinks
.
IsEmpty
(
)
)
{
entry
.
Remove
(
)
;
}
}
void
BaseHistory
:
:
ScheduleVisitedQuery
(
nsIURI
*
aURI
)
{
mPendingQueries
.
PutEntry
(
aURI
)
;
if
(
mStartPendingVisitedQueriesScheduled
)
{
return
;
}
mStartPendingVisitedQueriesScheduled
=
NS_SUCCEEDED
(
NS_DispatchToMainThreadQueue
(
NS_NewRunnableFunction
(
"
BaseHistory
:
:
StartPendingVisitedQueries
"
[
self
=
RefPtr
<
BaseHistory
>
(
this
)
]
{
self
-
>
mStartPendingVisitedQueriesScheduled
=
false
;
auto
queries
=
std
:
:
move
(
self
-
>
mPendingQueries
)
;
self
-
>
StartPendingVisitedQueries
(
queries
)
;
MOZ_DIAGNOSTIC_ASSERT
(
self
-
>
mPendingQueries
.
IsEmpty
(
)
)
;
}
)
EventQueuePriority
:
:
Idle
)
)
;
}
void
BaseHistory
:
:
CancelVisitedQueryIfPossible
(
nsIURI
*
aURI
)
{
mPendingQueries
.
RemoveEntry
(
aURI
)
;
}
nsresult
BaseHistory
:
:
RegisterVisitedCallback
(
nsIURI
*
aURI
Link
*
aLink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aURI
"
Must
pass
a
non
-
null
URI
!
"
)
;
if
(
XRE_IsContentProcess
(
)
)
{
MOZ_ASSERT
(
aLink
"
Must
pass
a
non
-
null
Link
!
"
)
;
}
auto
entry
=
mTrackedURIs
.
LookupForAdd
(
aURI
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
entry
|
|
!
entry
.
Data
(
)
.
mLinks
.
IsEmpty
(
)
"
An
empty
key
was
kept
around
in
our
hashtable
!
"
)
;
if
(
!
entry
)
{
ScheduleVisitedQuery
(
aURI
)
;
}
if
(
!
aLink
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
We
should
only
ever
get
a
null
Link
"
"
in
the
parent
process
!
"
)
;
if
(
!
entry
)
{
entry
.
OrRemove
(
)
;
}
return
NS_OK
;
}
ObservingLinks
&
links
=
entry
.
OrInsert
(
[
]
{
return
ObservingLinks
{
}
;
}
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
links
.
mLinks
.
Contains
(
aLink
)
"
Already
tracking
this
Link
object
!
"
)
;
links
.
mLinks
.
AppendElement
(
aLink
)
;
if
(
links
.
mStatus
!
=
VisitedStatus
:
:
Unknown
)
{
DispatchNotifyVisited
(
aURI
GetLinkDocument
(
*
aLink
)
links
.
mStatus
)
;
}
return
NS_OK
;
}
void
BaseHistory
:
:
UnregisterVisitedCallback
(
nsIURI
*
aURI
Link
*
aLink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aURI
"
Must
pass
a
non
-
null
URI
!
"
)
;
MOZ_ASSERT
(
aLink
"
Must
pass
a
non
-
null
Link
object
!
"
)
;
auto
entry
=
mTrackedURIs
.
Lookup
(
aURI
)
;
if
(
!
entry
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Trying
to
unregister
URI
that
wasn
'
t
registered
!
"
)
;
return
;
}
ObserverArray
&
observers
=
entry
.
Data
(
)
.
mLinks
;
if
(
!
observers
.
RemoveElement
(
aLink
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Trying
to
unregister
node
that
wasn
'
t
registered
!
"
)
;
return
;
}
if
(
observers
.
IsEmpty
(
)
)
{
entry
.
Remove
(
)
;
CancelVisitedQueryIfPossible
(
aURI
)
;
}
}
void
BaseHistory
:
:
NotifyVisited
(
nsIURI
*
aURI
VisitedStatus
aStatus
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aStatus
!
=
VisitedStatus
:
:
Unknown
)
;
if
(
NS_WARN_IF
(
!
aURI
)
)
{
return
;
}
auto
entry
=
mTrackedURIs
.
Lookup
(
aURI
)
;
if
(
!
entry
)
{
return
;
}
ObservingLinks
&
links
=
entry
.
Data
(
)
;
links
.
mStatus
=
aStatus
;
MOZ_ASSERT
(
!
links
.
mLinks
.
IsEmpty
(
)
)
;
nsTArray
<
Document
*
>
seen
;
ObserverArray
:
:
BackwardIterator
iter
(
links
.
mLinks
)
;
while
(
iter
.
HasMore
(
)
)
{
Link
*
link
=
iter
.
GetNext
(
)
;
Document
*
doc
=
GetLinkDocument
(
*
link
)
;
if
(
seen
.
Contains
(
doc
)
)
{
continue
;
}
seen
.
AppendElement
(
doc
)
;
DispatchNotifyVisited
(
aURI
doc
aStatus
)
;
}
}
}
