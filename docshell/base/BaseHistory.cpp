#
include
"
BaseHistory
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Link
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
namespace
mozilla
{
using
mozilla
:
:
dom
:
:
Document
;
using
mozilla
:
:
dom
:
:
Link
;
Document
*
BaseHistory
:
:
GetLinkDocument
(
Link
&
aLink
)
{
Element
*
element
=
aLink
.
GetElement
(
)
;
return
element
?
element
-
>
OwnerDoc
(
)
:
nullptr
;
}
void
BaseHistory
:
:
DispatchNotifyVisited
(
nsIURI
*
aURI
dom
:
:
Document
*
aDoc
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
NewRunnableMethod
<
nsCOMPtr
<
nsIURI
>
RefPtr
<
dom
:
:
Document
>
>
(
"
BaseHistory
:
:
DispatchNotifyVisited
"
this
&
BaseHistory
:
:
NotifyVisitedForDocument
aURI
aDoc
)
;
if
(
aDoc
)
{
aDoc
-
>
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
}
else
{
NS_DispatchToMainThread
(
runnable
.
forget
(
)
)
;
}
}
void
BaseHistory
:
:
NotifyVisitedForDocument
(
nsIURI
*
aURI
dom
:
:
Document
*
aDoc
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoScriptBlocker
scriptBlocker
;
auto
entry
=
mTrackedURIs
.
Lookup
(
aURI
)
;
if
(
!
entry
)
{
return
;
}
TrackedURI
&
trackedURI
=
entry
.
Data
(
)
;
{
ObserverArray
:
:
BackwardIterator
iter
(
trackedURI
.
mLinks
)
;
while
(
iter
.
HasMore
(
)
)
{
Link
*
link
=
iter
.
GetNext
(
)
;
if
(
GetLinkDocument
(
*
link
)
=
=
aDoc
)
{
link
-
>
SetLinkState
(
eLinkState_Visited
)
;
iter
.
Remove
(
)
;
}
}
}
if
(
trackedURI
.
mLinks
.
IsEmpty
(
)
)
{
entry
.
Remove
(
)
;
}
}
}
