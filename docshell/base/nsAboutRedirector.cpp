#
include
"
nsAboutRedirector
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsAboutProtocolUtils
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
NS_IMPL_ISUPPORTS
(
nsAboutRedirector
nsIAboutModule
)
struct
RedirEntry
{
const
char
*
id
;
const
char
*
url
;
uint32_t
flags
;
}
;
static
const
RedirEntry
kRedirMap
[
]
=
{
{
"
about
"
"
chrome
:
/
/
global
/
content
/
aboutAbout
.
xhtml
"
0
}
{
"
addons
"
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
extensions
.
xul
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
buildconfig
"
"
chrome
:
/
/
global
/
content
/
buildconfig
.
html
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
}
{
"
checkerboard
"
"
chrome
:
/
/
global
/
content
/
aboutCheckerboard
.
xhtml
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
config
"
"
chrome
:
/
/
global
/
content
/
config
.
xul
"
0
}
#
ifdef
MOZ_CRASHREPORTER
{
"
crashes
"
"
chrome
:
/
/
global
/
content
/
crashes
.
xhtml
"
0
}
#
endif
{
"
credits
"
"
https
:
/
/
www
.
mozilla
.
org
/
credits
/
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
}
{
"
license
"
"
chrome
:
/
/
global
/
content
/
license
.
html
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
nsIAboutModule
:
:
MAKE_LINKABLE
}
{
"
logo
"
"
chrome
:
/
/
branding
/
content
/
about
.
png
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
nsIAboutModule
:
:
MAKE_LINKABLE
}
{
"
memory
"
"
chrome
:
/
/
global
/
content
/
aboutMemory
.
xhtml
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
mozilla
"
"
chrome
:
/
/
global
/
content
/
mozilla
.
xhtml
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
}
{
"
neterror
"
"
chrome
:
/
/
global
/
content
/
netError
.
xhtml
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
nsIAboutModule
:
:
URI_CAN_LOAD_IN_CHILD
|
nsIAboutModule
:
:
ALLOW_SCRIPT
|
nsIAboutModule
:
:
HIDE_FROM_ABOUTABOUT
}
{
"
networking
"
"
chrome
:
/
/
global
/
content
/
aboutNetworking
.
xhtml
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
performance
"
"
chrome
:
/
/
global
/
content
/
aboutPerformance
.
xhtml
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
plugins
"
"
chrome
:
/
/
global
/
content
/
plugins
.
html
"
nsIAboutModule
:
:
URI_MUST_LOAD_IN_CHILD
}
{
"
serviceworkers
"
"
chrome
:
/
/
global
/
content
/
aboutServiceWorkers
.
xhtml
"
nsIAboutModule
:
:
URI_CAN_LOAD_IN_CHILD
|
nsIAboutModule
:
:
URI_MUST_LOAD_IN_CHILD
|
nsIAboutModule
:
:
ALLOW_SCRIPT
}
#
ifndef
ANDROID
{
"
profiles
"
"
chrome
:
/
/
global
/
content
/
aboutProfiles
.
xhtml
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
#
endif
{
"
srcdoc
"
"
about
:
blank
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
nsIAboutModule
:
:
HIDE_FROM_ABOUTABOUT
|
nsIAboutModule
:
:
MAKE_LINKABLE
|
nsIAboutModule
:
:
URI_CAN_LOAD_IN_CHILD
}
{
"
support
"
"
chrome
:
/
/
global
/
content
/
aboutSupport
.
xhtml
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
telemetry
"
"
chrome
:
/
/
global
/
content
/
aboutTelemetry
.
xhtml
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
url
-
classifier
"
"
chrome
:
/
/
global
/
content
/
aboutUrlClassifier
.
xhtml
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
webrtc
"
"
chrome
:
/
/
global
/
content
/
aboutwebrtc
/
aboutWebrtc
.
html
"
nsIAboutModule
:
:
ALLOW_SCRIPT
}
{
"
printpreview
"
"
about
:
blank
"
nsIAboutModule
:
:
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
nsIAboutModule
:
:
HIDE_FROM_ABOUTABOUT
|
nsIAboutModule
:
:
URI_CAN_LOAD_IN_CHILD
}
}
;
static
const
int
kRedirTotal
=
mozilla
:
:
ArrayLength
(
kRedirMap
)
;
NS_IMETHODIMP
nsAboutRedirector
:
:
NewChannel
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
nsIChannel
*
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aURI
)
;
NS_ENSURE_ARG_POINTER
(
aLoadInfo
)
;
NS_ASSERTION
(
aResult
"
must
not
be
null
"
)
;
nsAutoCString
path
;
nsresult
rv
=
NS_GetAboutModuleName
(
aURI
path
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIIOService
>
ioService
=
do_GetIOService
(
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
for
(
int
i
=
0
;
i
<
kRedirTotal
;
i
+
+
)
{
if
(
!
strcmp
(
path
.
get
(
)
kRedirMap
[
i
]
.
id
)
)
{
nsCOMPtr
<
nsIChannel
>
tempChannel
;
nsCOMPtr
<
nsIURI
>
tempURI
;
rv
=
NS_NewURI
(
getter_AddRefs
(
tempURI
)
kRedirMap
[
i
]
.
url
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
NS_NewChannelInternal
(
getter_AddRefs
(
tempChannel
)
tempURI
aLoadInfo
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
isUIResource
=
false
;
rv
=
NS_URIChainHasFlags
(
tempURI
nsIProtocolHandler
:
:
URI_IS_UI_RESOURCE
&
isUIResource
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
isAboutBlank
=
NS_IsAboutBlank
(
tempURI
)
;
if
(
!
isUIResource
&
&
!
isAboutBlank
)
{
aLoadInfo
-
>
SetResultPrincipalURI
(
tempURI
)
;
}
tempChannel
-
>
SetOriginalURI
(
aURI
)
;
tempChannel
.
forget
(
aResult
)
;
return
rv
;
}
}
NS_ERROR
(
"
nsAboutRedirector
called
for
unknown
case
"
)
;
return
NS_ERROR_ILLEGAL_VALUE
;
}
NS_IMETHODIMP
nsAboutRedirector
:
:
GetURIFlags
(
nsIURI
*
aURI
uint32_t
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aURI
)
;
nsAutoCString
name
;
nsresult
rv
=
NS_GetAboutModuleName
(
aURI
name
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
for
(
int
i
=
0
;
i
<
kRedirTotal
;
i
+
+
)
{
if
(
name
.
EqualsASCII
(
kRedirMap
[
i
]
.
id
)
)
{
*
aResult
=
kRedirMap
[
i
]
.
flags
;
return
NS_OK
;
}
}
NS_ERROR
(
"
nsAboutRedirector
called
for
unknown
case
"
)
;
return
NS_ERROR_ILLEGAL_VALUE
;
}
nsresult
nsAboutRedirector
:
:
Create
(
nsISupports
*
aOuter
REFNSIID
aIID
void
*
*
aResult
)
{
RefPtr
<
nsAboutRedirector
>
about
=
new
nsAboutRedirector
(
)
;
return
about
-
>
QueryInterface
(
aIID
aResult
)
;
}
