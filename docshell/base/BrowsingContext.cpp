#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
a11y
/
AccessibleWrap
.
h
"
#
include
"
mozilla
/
a11y
/
Compatibility
.
h
"
#
include
"
mozilla
/
a11y
/
nsWinUtils
.
h
"
#
endif
#
endif
#
include
"
js
/
LocaleSensitive
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
BindingIPCUtils
.
h
"
#
include
"
mozilla
/
dom
/
BrowserHost
.
h
"
#
include
"
mozilla
/
dom
/
BrowserChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextBinding
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Geolocation
.
h
"
#
include
"
mozilla
/
dom
/
HTMLEmbedElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLIFrameElement
.
h
"
#
include
"
mozilla
/
dom
/
Location
.
h
"
#
include
"
mozilla
/
dom
/
LocationBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaDevices
.
h
"
#
include
"
mozilla
/
dom
/
Navigation
.
h
"
#
include
"
mozilla
/
dom
/
PopupBlocker
.
h
"
#
include
"
mozilla
/
dom
/
ReferrerInfo
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
SessionStoreChild
.
h
"
#
include
"
mozilla
/
dom
/
SessionStorageManager
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneTags
.
h
"
#
include
"
mozilla
/
dom
/
UserActivationIPCUtils
.
h
"
#
include
"
mozilla
/
dom
/
WindowBinding
.
h
"
#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
dom
/
WindowProxyHolder
.
h
"
#
include
"
mozilla
/
dom
/
SyncedContextInlines
.
h
"
#
include
"
mozilla
/
dom
/
XULFrameElement
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
net
/
DocumentLoadListener
.
h
"
#
include
"
mozilla
/
net
/
RequestContextService
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MediaFeatureChange
.
h
"
#
include
"
mozilla
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPrefs_fission
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
StaticPrefs_page_load
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
URLQueryStringStripper
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
glean
/
DomMetrics
.
h
"
#
include
"
mozilla
/
StartupTimeline
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
nsIURIFixup
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
#
include
"
PresShell
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
nsScreen
.
h
"
#
include
"
nsScriptError
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
xpcprivate
.
h
"
#
include
"
AutoplayPolicy
.
h
"
#
include
"
GVAutoplayRequestStatusIPC
.
h
"
extern
mozilla
:
:
LazyLogModule
gAutoplayPermissionLog
;
extern
mozilla
:
:
LazyLogModule
gNavigationLog
;
extern
mozilla
:
:
LazyLogModule
gTimeoutDeferralLog
;
#
define
AUTOPLAY_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gAutoplayPermissionLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
OrientationType
>
:
public
mozilla
:
:
dom
:
:
WebIDLEnumSerializer
<
mozilla
:
:
dom
:
:
OrientationType
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
DisplayMode
>
:
public
mozilla
:
:
dom
:
:
WebIDLEnumSerializer
<
mozilla
:
:
dom
:
:
DisplayMode
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
PrefersColorSchemeOverride
>
:
public
mozilla
:
:
dom
:
:
WebIDLEnumSerializer
<
mozilla
:
:
dom
:
:
PrefersColorSchemeOverride
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
ForcedColorsOverride
>
:
public
mozilla
:
:
dom
:
:
WebIDLEnumSerializer
<
mozilla
:
:
dom
:
:
ForcedColorsOverride
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
ExplicitActiveStatus
>
:
public
ContiguousEnumSerializer
<
mozilla
:
:
dom
:
:
ExplicitActiveStatus
mozilla
:
:
dom
:
:
ExplicitActiveStatus
:
:
None
mozilla
:
:
dom
:
:
ExplicitActiveStatus
:
:
EndGuard_
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
TouchEventsOverride
>
:
public
mozilla
:
:
dom
:
:
WebIDLEnumSerializer
<
mozilla
:
:
dom
:
:
TouchEventsOverride
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
EmbedderColorSchemes
>
{
using
paramType
=
mozilla
:
:
dom
:
:
EmbedderColorSchemes
;
static
void
Write
(
MessageWriter
*
aWriter
const
paramType
&
aParam
)
{
WriteParam
(
aWriter
aParam
.
mUsed
)
;
WriteParam
(
aWriter
aParam
.
mPreferred
)
;
}
static
bool
Read
(
MessageReader
*
aReader
paramType
*
aResult
)
{
return
ReadParam
(
aReader
&
aResult
-
>
mUsed
)
&
&
ReadParam
(
aReader
&
aResult
-
>
mPreferred
)
;
}
}
;
}
namespace
mozilla
{
namespace
dom
{
template
class
syncedcontext
:
:
Transaction
<
BrowsingContext
>
;
extern
mozilla
:
:
LazyLogModule
gUserInteractionPRLog
;
#
define
USER_ACTIVATION_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gUserInteractionPRLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
static
LazyLogModule
gBrowsingContextLog
(
"
BrowsingContext
"
)
;
static
LazyLogModule
gBrowsingContextSyncLog
(
"
BrowsingContextSync
"
)
;
typedef
nsTHashMap
<
nsUint64HashKey
BrowsingContext
*
>
BrowsingContextMap
;
static
StaticAutoPtr
<
BrowsingContextMap
>
sBrowsingContexts
;
static
StaticAutoPtr
<
BrowsingContextMap
>
sCurrentTopByBrowserId
;
static
bool
gIPCEnabledAnnotation
=
false
;
static
bool
gFissionEnabledAnnotation
=
false
;
static
void
UnregisterBrowserId
(
BrowsingContext
*
aBrowsingContext
)
{
if
(
!
aBrowsingContext
-
>
IsTopContent
(
)
|
|
!
sCurrentTopByBrowserId
)
{
return
;
}
auto
browserIdEntry
=
sCurrentTopByBrowserId
-
>
Lookup
(
aBrowsingContext
-
>
BrowserId
(
)
)
;
if
(
browserIdEntry
&
&
browserIdEntry
.
Data
(
)
=
=
aBrowsingContext
)
{
browserIdEntry
.
Remove
(
)
;
}
}
static
void
Register
(
BrowsingContext
*
aBrowsingContext
)
{
sBrowsingContexts
-
>
InsertOrUpdate
(
aBrowsingContext
-
>
Id
(
)
aBrowsingContext
)
;
if
(
aBrowsingContext
-
>
IsTopContent
(
)
)
{
sCurrentTopByBrowserId
-
>
InsertOrUpdate
(
aBrowsingContext
-
>
BrowserId
(
)
aBrowsingContext
)
;
}
aBrowsingContext
-
>
Group
(
)
-
>
Register
(
aBrowsingContext
)
;
}
void
BrowsingContext
:
:
UpdateCurrentTopByBrowserId
(
BrowsingContext
*
aNewBrowsingContext
)
{
if
(
aNewBrowsingContext
-
>
IsTopContent
(
)
)
{
sCurrentTopByBrowserId
-
>
InsertOrUpdate
(
aNewBrowsingContext
-
>
BrowserId
(
)
aNewBrowsingContext
)
;
}
}
BrowsingContext
*
BrowsingContext
:
:
GetParent
(
)
const
{
return
mParentWindow
?
mParentWindow
-
>
GetBrowsingContext
(
)
:
nullptr
;
}
bool
BrowsingContext
:
:
IsInSubtreeOf
(
BrowsingContext
*
aContext
)
{
BrowsingContext
*
bc
=
this
;
do
{
if
(
bc
=
=
aContext
)
{
return
true
;
}
}
while
(
(
bc
=
bc
-
>
GetParent
(
)
)
)
;
return
false
;
}
BrowsingContext
*
BrowsingContext
:
:
Top
(
)
{
BrowsingContext
*
bc
=
this
;
while
(
bc
-
>
mParentWindow
)
{
bc
=
bc
-
>
GetParent
(
)
;
}
return
bc
;
}
const
BrowsingContext
*
BrowsingContext
:
:
Top
(
)
const
{
const
BrowsingContext
*
bc
=
this
;
while
(
bc
-
>
mParentWindow
)
{
bc
=
bc
-
>
GetParent
(
)
;
}
return
bc
;
}
int32_t
BrowsingContext
:
:
IndexOf
(
BrowsingContext
*
aChild
)
{
int32_t
index
=
-
1
;
for
(
BrowsingContext
*
child
:
Children
(
)
)
{
+
+
index
;
if
(
child
=
=
aChild
)
{
break
;
}
}
return
index
;
}
WindowContext
*
BrowsingContext
:
:
GetTopWindowContext
(
)
const
{
if
(
mParentWindow
)
{
return
mParentWindow
-
>
TopWindowContext
(
)
;
}
return
mCurrentWindowContext
;
}
void
BrowsingContext
:
:
Init
(
)
{
if
(
!
sBrowsingContexts
)
{
sBrowsingContexts
=
new
BrowsingContextMap
(
)
;
sCurrentTopByBrowserId
=
new
BrowsingContextMap
(
)
;
ClearOnShutdown
(
&
sBrowsingContexts
)
;
ClearOnShutdown
(
&
sCurrentTopByBrowserId
)
;
CrashReporter
:
:
RegisterAnnotationBool
(
CrashReporter
:
:
Annotation
:
:
DOMIPCEnabled
&
gIPCEnabledAnnotation
)
;
CrashReporter
:
:
RegisterAnnotationBool
(
CrashReporter
:
:
Annotation
:
:
DOMFissionEnabled
&
gFissionEnabledAnnotation
)
;
}
}
LogModule
*
BrowsingContext
:
:
GetLog
(
)
{
return
gBrowsingContextLog
;
}
LogModule
*
BrowsingContext
:
:
GetSyncLog
(
)
{
return
gBrowsingContextSyncLog
;
}
already_AddRefed
<
BrowsingContext
>
BrowsingContext
:
:
Get
(
uint64_t
aId
)
{
if
(
sBrowsingContexts
)
{
return
do_AddRef
(
sBrowsingContexts
-
>
Get
(
aId
)
)
;
}
return
nullptr
;
}
already_AddRefed
<
BrowsingContext
>
BrowsingContext
:
:
GetCurrentTopByBrowserId
(
uint64_t
aBrowserId
)
{
return
do_AddRef
(
sCurrentTopByBrowserId
-
>
Get
(
aBrowserId
)
)
;
}
already_AddRefed
<
BrowsingContext
>
BrowsingContext
:
:
GetFromWindow
(
WindowProxyHolder
&
aProxy
)
{
return
do_AddRef
(
aProxy
.
get
(
)
)
;
}
CanonicalBrowsingContext
*
BrowsingContext
:
:
Canonical
(
)
{
return
CanonicalBrowsingContext
:
:
Cast
(
this
)
;
}
bool
BrowsingContext
:
:
IsOwnedByProcess
(
)
const
{
return
mIsInProcess
&
&
mDocShell
&
&
!
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
WillChangeProcess
(
)
;
}
bool
BrowsingContext
:
:
SameOriginWithTop
(
)
{
MOZ_ASSERT
(
IsInProcess
(
)
)
;
if
(
!
Top
(
)
-
>
IsInProcess
(
)
)
{
return
false
;
}
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
false
;
}
Document
*
doc
=
docShell
-
>
GetDocument
(
)
;
if
(
!
doc
)
{
return
false
;
}
nsIPrincipal
*
principal
=
doc
-
>
NodePrincipal
(
)
;
nsIDocShell
*
topDocShell
=
Top
(
)
-
>
GetDocShell
(
)
;
if
(
!
topDocShell
)
{
return
false
;
}
Document
*
topDoc
=
topDocShell
-
>
GetDocument
(
)
;
if
(
!
topDoc
)
{
return
false
;
}
nsIPrincipal
*
topPrincipal
=
topDoc
-
>
NodePrincipal
(
)
;
return
principal
-
>
Equals
(
topPrincipal
)
;
}
already_AddRefed
<
BrowsingContext
>
BrowsingContext
:
:
CreateDetached
(
nsGlobalWindowInner
*
aParent
BrowsingContext
*
aOpener
BrowsingContextGroup
*
aSpecificGroup
const
nsAString
&
aName
Type
aType
CreateDetachedOptions
aOptions
)
{
if
(
aParent
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aParent
-
>
GetWindowContext
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aParent
-
>
GetBrowsingContext
(
)
-
>
mType
=
=
aType
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aParent
-
>
GetBrowsingContext
(
)
-
>
GetBrowserId
(
)
!
=
0
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
aType
!
=
Type
:
:
Chrome
|
|
XRE_IsParentProcess
(
)
)
;
uint64_t
id
=
nsContentUtils
:
:
GenerateBrowsingContextId
(
)
;
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
Creating
0x
%
08
"
PRIx64
"
in
%
s
"
id
XRE_IsParentProcess
(
)
?
"
Parent
"
:
"
Child
"
)
)
;
RefPtr
<
BrowsingContext
>
parentBC
=
aParent
?
aParent
-
>
GetBrowsingContext
(
)
:
nullptr
;
RefPtr
<
WindowContext
>
parentWC
=
aParent
?
aParent
-
>
GetWindowContext
(
)
:
nullptr
;
BrowsingContext
*
inherit
=
parentBC
?
parentBC
.
get
(
)
:
aOpener
;
RefPtr
<
BrowsingContextGroup
>
group
=
aSpecificGroup
;
if
(
aType
=
=
Type
:
:
Chrome
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
group
)
;
group
=
BrowsingContextGroup
:
:
GetChromeGroup
(
)
;
}
else
if
(
!
group
)
{
group
=
BrowsingContextGroup
:
:
Select
(
parentWC
aOpener
)
;
}
FieldValues
fields
;
fields
.
Get
<
IDX_Name
>
(
)
=
aName
;
if
(
aOpener
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
aParent
"
new
BC
with
both
initial
opener
and
parent
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aOpener
-
>
Group
(
)
=
=
group
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aOpener
-
>
mType
=
=
aType
)
;
fields
.
Get
<
IDX_OpenerId
>
(
)
=
aOpener
-
>
Id
(
)
;
fields
.
Get
<
IDX_HadOriginalOpener
>
(
)
=
true
;
if
(
aType
=
=
Type
:
:
Chrome
&
&
!
aParent
)
{
fields
.
Get
<
IDX_PrefersColorSchemeOverride
>
(
)
=
aOpener
-
>
Top
(
)
-
>
GetPrefersColorSchemeOverride
(
)
;
}
}
if
(
aParent
)
{
MOZ_DIAGNOSTIC_ASSERT
(
parentBC
-
>
Group
(
)
=
=
group
)
;
MOZ_DIAGNOSTIC_ASSERT
(
parentBC
-
>
mType
=
=
aType
)
;
fields
.
Get
<
IDX_EmbedderInnerWindowId
>
(
)
=
aParent
-
>
WindowID
(
)
;
fields
.
Get
<
IDX_EmbeddedInContentDocument
>
(
)
=
parentBC
-
>
mType
=
=
Type
:
:
Content
;
auto
readystate
=
aParent
-
>
GetDocument
(
)
-
>
GetReadyStateEnum
(
)
;
fields
.
Get
<
IDX_AncestorLoading
>
(
)
=
parentBC
-
>
GetAncestorLoading
(
)
|
|
readystate
=
=
Document
:
:
ReadyState
:
:
READYSTATE_LOADING
|
|
readystate
=
=
Document
:
:
ReadyState
:
:
READYSTATE_INTERACTIVE
;
}
fields
.
Get
<
IDX_BrowserId
>
(
)
=
parentBC
?
parentBC
-
>
GetBrowserId
(
)
:
nsContentUtils
:
:
GenerateBrowserId
(
)
;
fields
.
Get
<
IDX_OpenerPolicy
>
(
)
=
nsILoadInfo
:
:
OPENER_POLICY_UNSAFE_NONE
;
if
(
aOpener
&
&
aOpener
-
>
SameOriginWithTop
(
)
)
{
fields
.
Get
<
IDX_OpenerPolicy
>
(
)
=
aOpener
-
>
Top
(
)
-
>
GetOpenerPolicy
(
)
;
bool
isPotentiallyCrossOriginIsolated
=
fields
.
Get
<
IDX_OpenerPolicy
>
(
)
=
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
;
MOZ_RELEASE_ASSERT
(
isPotentiallyCrossOriginIsolated
=
=
group
-
>
IsPotentiallyCrossOriginIsolated
(
)
)
;
}
else
if
(
aOpener
)
{
auto
topPolicy
=
aOpener
-
>
Top
(
)
-
>
GetOpenerPolicy
(
)
;
MOZ_RELEASE_ASSERT
(
topPolicy
=
=
nsILoadInfo
:
:
OPENER_POLICY_UNSAFE_NONE
|
|
topPolicy
=
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_ALLOW_POPUPS
|
|
aOptions
.
isForPrinting
)
;
if
(
aOptions
.
isForPrinting
)
{
fields
.
Get
<
IDX_OpenerPolicy
>
(
)
=
topPolicy
;
}
}
else
if
(
!
aParent
&
&
group
-
>
IsPotentiallyCrossOriginIsolated
(
)
)
{
fields
.
Get
<
IDX_OpenerPolicy
>
(
)
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
;
}
fields
.
Get
<
IDX_HistoryID
>
(
)
=
nsID
:
:
GenerateUUID
(
)
;
fields
.
Get
<
IDX_ExplicitActive
>
(
)
=
[
&
]
{
if
(
parentBC
|
|
aType
=
=
Type
:
:
Content
)
{
return
ExplicitActiveStatus
:
:
None
;
}
return
ExplicitActiveStatus
:
:
Active
;
}
(
)
;
fields
.
Get
<
IDX_FullZoom
>
(
)
=
parentBC
?
parentBC
-
>
FullZoom
(
)
:
1
.
0f
;
fields
.
Get
<
IDX_TextZoom
>
(
)
=
parentBC
?
parentBC
-
>
TextZoom
(
)
:
1
.
0f
;
bool
allowContentRetargeting
=
inherit
?
inherit
-
>
GetAllowContentRetargetingOnChildren
(
)
:
true
;
fields
.
Get
<
IDX_AllowContentRetargeting
>
(
)
=
allowContentRetargeting
;
fields
.
Get
<
IDX_AllowContentRetargetingOnChildren
>
(
)
=
allowContentRetargeting
;
fields
.
Get
<
IDX_FullscreenAllowedByOwner
>
(
)
=
!
aParent
;
fields
.
Get
<
IDX_DefaultLoadFlags
>
(
)
=
inherit
?
inherit
-
>
GetDefaultLoadFlags
(
)
:
nsIRequest
:
:
LOAD_NORMAL
;
fields
.
Get
<
IDX_OrientationLock
>
(
)
=
mozilla
:
:
hal
:
:
ScreenOrientation
:
:
None
;
fields
.
Get
<
IDX_UseGlobalHistory
>
(
)
=
inherit
?
inherit
-
>
GetUseGlobalHistory
(
)
:
false
;
fields
.
Get
<
IDX_UseErrorPages
>
(
)
=
true
;
fields
.
Get
<
IDX_TouchEventsOverrideInternal
>
(
)
=
TouchEventsOverride
:
:
None
;
fields
.
Get
<
IDX_AllowJavascript
>
(
)
=
inherit
?
inherit
-
>
GetAllowJavascript
(
)
:
true
;
fields
.
Get
<
IDX_IPAddressSpace
>
(
)
=
inherit
?
inherit
-
>
GetIPAddressSpace
(
)
:
nsILoadInfo
:
:
IPAddressSpace
:
:
Unknown
;
fields
.
Get
<
IDX_IsPopupRequested
>
(
)
=
aOptions
.
isPopupRequested
;
fields
.
Get
<
IDX_TopLevelCreatedByWebContent
>
(
)
=
aOptions
.
topLevelCreatedByWebContent
;
if
(
!
parentBC
)
{
fields
.
Get
<
IDX_ShouldDelayMediaFromStart
>
(
)
=
StaticPrefs
:
:
media_block_autoplay_until_in_foreground
(
)
;
}
RefPtr
<
BrowsingContext
>
context
;
if
(
XRE_IsParentProcess
(
)
)
{
context
=
new
CanonicalBrowsingContext
(
parentWC
group
id
0
0
aType
std
:
:
move
(
fields
)
)
;
}
else
{
context
=
new
BrowsingContext
(
parentWC
group
id
aType
std
:
:
move
(
fields
)
)
;
}
context
-
>
mWindowless
=
aOptions
.
windowless
;
context
-
>
mEmbeddedByThisProcess
=
XRE_IsParentProcess
(
)
|
|
aParent
;
context
-
>
mCreatedDynamically
=
aOptions
.
createdDynamically
;
if
(
inherit
)
{
context
-
>
mPrivateBrowsingId
=
inherit
-
>
mPrivateBrowsingId
;
context
-
>
mUseRemoteTabs
=
inherit
-
>
mUseRemoteTabs
;
context
-
>
mUseRemoteSubframes
=
inherit
-
>
mUseRemoteSubframes
;
context
-
>
mOriginAttributes
=
inherit
-
>
mOriginAttributes
;
}
nsCOMPtr
<
nsIRequestContextService
>
rcsvc
=
net
:
:
RequestContextService
:
:
GetOrCreate
(
)
;
if
(
rcsvc
)
{
nsCOMPtr
<
nsIRequestContext
>
requestContext
;
nsresult
rv
=
rcsvc
-
>
NewRequestContext
(
getter_AddRefs
(
requestContext
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
requestContext
)
{
context
-
>
mRequestContextId
=
requestContext
-
>
GetID
(
)
;
}
}
return
context
.
forget
(
)
;
}
already_AddRefed
<
BrowsingContext
>
BrowsingContext
:
:
CreateIndependent
(
Type
aType
bool
aWindowless
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
BCs
created
in
the
content
process
must
be
related
to
"
"
some
BrowserChild
"
)
;
RefPtr
<
BrowsingContext
>
bc
(
CreateDetached
(
nullptr
nullptr
nullptr
u
"
"
_ns
aType
{
}
)
)
;
bc
-
>
mWindowless
=
aWindowless
;
bc
-
>
mEmbeddedByThisProcess
=
true
;
bc
-
>
EnsureAttached
(
)
;
return
bc
.
forget
(
)
;
}
void
BrowsingContext
:
:
EnsureAttached
(
)
{
if
(
!
mEverAttached
)
{
Register
(
this
)
;
Attach
(
false
nullptr
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
BrowsingContext
:
:
CreateFromIPC
(
BrowsingContext
:
:
IPCInitializer
&
&
aInit
BrowsingContextGroup
*
aGroup
ContentParent
*
aOriginProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aOriginProcess
|
|
XRE_IsContentProcess
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aGroup
)
;
uint64_t
originId
=
0
;
if
(
aOriginProcess
)
{
originId
=
aOriginProcess
-
>
ChildID
(
)
;
aGroup
-
>
EnsureHostProcess
(
aOriginProcess
)
;
}
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
Creating
0x
%
08
"
PRIx64
"
from
IPC
(
origin
=
0x
%
08
"
PRIx64
"
)
"
aInit
.
mId
originId
)
)
;
RefPtr
<
WindowContext
>
parent
=
aInit
.
GetParent
(
)
;
RefPtr
<
BrowsingContext
>
context
;
if
(
XRE_IsParentProcess
(
)
)
{
uint64_t
embedderProcessId
=
(
aInit
.
mWindowless
|
|
parent
)
?
originId
:
0
;
context
=
new
CanonicalBrowsingContext
(
parent
aGroup
aInit
.
mId
originId
embedderProcessId
Type
:
:
Content
std
:
:
move
(
aInit
.
mFields
)
)
;
}
else
{
context
=
new
BrowsingContext
(
parent
aGroup
aInit
.
mId
Type
:
:
Content
std
:
:
move
(
aInit
.
mFields
)
)
;
}
context
-
>
mWindowless
=
aInit
.
mWindowless
;
context
-
>
mCreatedDynamically
=
aInit
.
mCreatedDynamically
;
context
-
>
mChildOffset
=
aInit
.
mChildOffset
;
if
(
context
-
>
GetHasSessionHistory
(
)
)
{
context
-
>
CreateChildSHistory
(
)
;
if
(
mozilla
:
:
SessionHistoryInParent
(
)
)
{
context
-
>
GetChildSessionHistory
(
)
-
>
SetIndexAndLength
(
aInit
.
mSessionHistoryIndex
aInit
.
mSessionHistoryCount
nsID
(
)
)
;
}
}
context
-
>
SetOriginAttributes
(
aInit
.
mOriginAttributes
)
;
context
-
>
SetRemoteTabs
(
aInit
.
mUseRemoteTabs
)
;
context
-
>
SetRemoteSubframes
(
aInit
.
mUseRemoteSubframes
)
;
context
-
>
mRequestContextId
=
aInit
.
mRequestContextId
;
if
(
const
char
*
failure
=
context
-
>
BrowsingContextCoherencyChecks
(
aOriginProcess
)
)
{
mozilla
:
:
ipc
:
:
IProtocol
*
actor
=
aOriginProcess
;
if
(
!
actor
)
{
actor
=
ContentChild
:
:
GetSingleton
(
)
;
}
return
IPC_FAIL_UNSAFE_PRINTF
(
actor
"
Incoherent
BrowsingContext
:
%
s
"
failure
)
;
}
Register
(
context
)
;
context
-
>
Attach
(
true
aOriginProcess
)
;
return
IPC_OK
(
)
;
}
BrowsingContext
:
:
BrowsingContext
(
WindowContext
*
aParentWindow
BrowsingContextGroup
*
aGroup
uint64_t
aBrowsingContextId
Type
aType
FieldValues
&
&
aInit
)
:
mFields
(
std
:
:
move
(
aInit
)
)
mType
(
aType
)
mBrowsingContextId
(
aBrowsingContextId
)
mGroup
(
aGroup
)
mParentWindow
(
aParentWindow
)
mPrivateBrowsingId
(
0
)
mEverAttached
(
false
)
mIsInProcess
(
false
)
mIsDiscarded
(
false
)
mWindowless
(
false
)
mDanglingRemoteOuterProxies
(
false
)
mEmbeddedByThisProcess
(
false
)
mUseRemoteTabs
(
false
)
mUseRemoteSubframes
(
false
)
mCreatedDynamically
(
false
)
mIsInBFCache
(
false
)
mCanExecuteScripts
(
true
)
mChildOffset
(
0
)
{
MOZ_RELEASE_ASSERT
(
!
mParentWindow
|
|
mParentWindow
-
>
Group
(
)
=
=
mGroup
)
;
MOZ_RELEASE_ASSERT
(
mBrowsingContextId
!
=
0
)
;
MOZ_RELEASE_ASSERT
(
mGroup
)
;
}
void
BrowsingContext
:
:
SetDocShell
(
nsIDocShell
*
aDocShell
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mEverAttached
)
;
MOZ_RELEASE_ASSERT
(
aDocShell
-
>
GetBrowsingContext
(
)
=
=
this
)
;
mDocShell
=
aDocShell
;
mDanglingRemoteOuterProxies
=
!
mIsInProcess
;
mIsInProcess
=
true
;
if
(
mChildSessionHistory
)
{
mChildSessionHistory
-
>
SetIsInProcess
(
true
)
;
}
RecomputeCanExecuteScripts
(
)
;
ClearCachedValuesOfLocations
(
)
;
}
class
MOZ_STACK_CLASS
CompartmentRemoteProxyTransplantCallback
:
public
js
:
:
CompartmentTransplantCallback
{
public
:
explicit
CompartmentRemoteProxyTransplantCallback
(
BrowsingContext
*
aBrowsingContext
)
:
mBrowsingContext
(
aBrowsingContext
)
{
}
virtual
JSObject
*
getObjectToTransplant
(
JS
:
:
Compartment
*
compartment
)
override
{
auto
*
priv
=
xpc
:
:
CompartmentPrivate
:
:
Get
(
compartment
)
;
if
(
!
priv
)
{
return
nullptr
;
}
auto
&
map
=
priv
-
>
GetRemoteProxyMap
(
)
;
auto
result
=
map
.
lookup
(
mBrowsingContext
)
;
if
(
!
result
)
{
return
nullptr
;
}
JSObject
*
resultObject
=
result
-
>
value
(
)
;
map
.
remove
(
result
)
;
return
resultObject
;
}
private
:
BrowsingContext
*
mBrowsingContext
;
}
;
void
BrowsingContext
:
:
CleanUpDanglingRemoteOuterWindowProxies
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aOuter
)
{
if
(
!
mDanglingRemoteOuterProxies
)
{
return
;
}
mDanglingRemoteOuterProxies
=
false
;
CompartmentRemoteProxyTransplantCallback
cb
(
this
)
;
js
:
:
RemapRemoteWindowProxies
(
aCx
&
cb
aOuter
)
;
}
bool
BrowsingContext
:
:
IsActive
(
)
const
{
const
BrowsingContext
*
current
=
this
;
do
{
auto
explicit_
=
current
-
>
GetExplicitActive
(
)
;
if
(
explicit_
!
=
ExplicitActiveStatus
:
:
None
)
{
return
explicit_
=
=
ExplicitActiveStatus
:
:
Active
;
}
if
(
mParentWindow
&
&
!
mParentWindow
-
>
IsCurrent
(
)
)
{
return
false
;
}
}
while
(
(
current
=
current
-
>
GetParent
(
)
)
)
;
return
false
;
}
bool
BrowsingContext
:
:
GetIsActiveBrowserWindow
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
Top
(
)
-
>
GetIsActiveBrowserWindowInternal
(
)
;
}
return
Canonical
(
)
-
>
TopCrossChromeBoundary
(
)
-
>
GetIsActiveBrowserWindowInternal
(
)
;
}
void
BrowsingContext
:
:
SetIsActiveBrowserWindow
(
bool
aActive
)
{
Unused
<
<
SetIsActiveBrowserWindowInternal
(
aActive
)
;
}
bool
BrowsingContext
:
:
FullscreenAllowed
(
)
const
{
for
(
auto
*
current
=
this
;
current
;
current
=
current
-
>
GetParent
(
)
)
{
if
(
!
current
-
>
GetFullscreenAllowedByOwner
(
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
OwnerAllowsFullscreen
(
const
Element
&
aEmbedder
)
{
if
(
aEmbedder
.
IsXULElement
(
)
)
{
return
!
aEmbedder
.
HasAttr
(
nsGkAtoms
:
:
disablefullscreen
)
;
}
if
(
aEmbedder
.
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
)
{
return
true
;
}
if
(
const
auto
*
embed
=
HTMLEmbedElement
:
:
FromNode
(
aEmbedder
)
)
{
return
embed
-
>
AllowFullscreen
(
)
;
}
return
false
;
}
void
BrowsingContext
:
:
SetEmbedderElement
(
Element
*
aEmbedder
)
{
mEmbeddedByThisProcess
=
true
;
if
(
RefPtr
<
WindowContext
>
parent
=
GetParentWindowContext
(
)
)
{
parent
-
>
ClearLightDOMChildren
(
)
;
}
if
(
aEmbedder
)
{
Transaction
txn
;
txn
.
SetEmbedderElementType
(
Some
(
aEmbedder
-
>
LocalName
(
)
)
)
;
txn
.
SetEmbeddedInContentDocument
(
aEmbedder
-
>
OwnerDoc
(
)
-
>
IsContentDocument
(
)
)
;
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
inner
=
do_QueryInterface
(
aEmbedder
-
>
GetOwnerGlobal
(
)
)
)
{
txn
.
SetEmbedderInnerWindowId
(
inner
-
>
WindowID
(
)
)
;
}
txn
.
SetFullscreenAllowedByOwner
(
OwnerAllowsFullscreen
(
*
aEmbedder
)
)
;
if
(
XRE_IsParentProcess
(
)
&
&
aEmbedder
-
>
IsXULElement
(
)
&
&
IsTopContent
(
)
)
{
nsAutoString
messageManagerGroup
;
aEmbedder
-
>
GetAttr
(
nsGkAtoms
:
:
messagemanagergroup
messageManagerGroup
)
;
txn
.
SetMessageManagerGroup
(
messageManagerGroup
)
;
txn
.
SetUseGlobalHistory
(
!
aEmbedder
-
>
HasAttr
(
nsGkAtoms
:
:
disableglobalhistory
)
)
;
if
(
!
aEmbedder
-
>
HasAttr
(
nsGkAtoms
:
:
manualactiveness
)
)
{
RefPtr
bc
=
aEmbedder
-
>
OwnerDoc
(
)
-
>
GetBrowsingContext
(
)
;
const
bool
isActive
=
bc
&
&
bc
-
>
IsActive
(
)
;
txn
.
SetExplicitActive
(
isActive
?
ExplicitActiveStatus
:
:
Active
:
ExplicitActiveStatus
:
:
Inactive
)
;
if
(
auto
*
bp
=
Canonical
(
)
-
>
GetBrowserParent
(
)
)
{
bp
-
>
SetRenderLayers
(
isActive
)
;
}
}
}
MOZ_ALWAYS_SUCCEEDS
(
txn
.
Commit
(
this
)
)
;
}
if
(
XRE_IsParentProcess
(
)
&
&
IsTopContent
(
)
)
{
Canonical
(
)
-
>
MaybeSetPermanentKey
(
aEmbedder
)
;
}
mEmbedderElement
=
aEmbedder
;
if
(
mEmbedderElement
)
{
if
(
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
)
{
obs
-
>
NotifyWhenScriptSafe
(
ToSupports
(
this
)
"
browsing
-
context
-
did
-
set
-
embedder
"
nullptr
)
;
}
if
(
IsEmbedderTypeObjectOrEmbed
(
)
)
{
Unused
<
<
SetIsSyntheticDocumentContainer
(
true
)
;
}
}
}
bool
BrowsingContext
:
:
IsEmbedderTypeObjectOrEmbed
(
)
{
if
(
const
Maybe
<
nsString
>
&
type
=
GetEmbedderElementType
(
)
)
{
return
nsGkAtoms
:
:
object
-
>
Equals
(
*
type
)
|
|
nsGkAtoms
:
:
embed
-
>
Equals
(
*
type
)
;
}
return
false
;
}
void
BrowsingContext
:
:
Embed
(
)
{
if
(
auto
*
frame
=
HTMLIFrameElement
:
:
FromNode
(
mEmbedderElement
)
)
{
frame
-
>
BindToBrowsingContext
(
this
)
;
}
}
const
char
*
BrowsingContext
:
:
BrowsingContextCoherencyChecks
(
ContentParent
*
aOriginProcess
)
{
#
define
COHERENCY_ASSERT
(
condition
)
\
if
(
!
(
condition
)
)
return
"
Assertion
"
#
condition
"
failed
"
;
if
(
mGroup
-
>
IsPotentiallyCrossOriginIsolated
(
)
!
=
(
Top
(
)
-
>
GetOpenerPolicy
(
)
=
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
)
)
{
return
"
Invalid
CrossOriginIsolated
state
"
;
}
if
(
aOriginProcess
&
&
!
IsContent
(
)
)
{
return
"
Content
cannot
create
chrome
BCs
"
;
}
if
(
IsContent
(
)
)
{
if
(
RefPtr
<
BrowsingContext
>
opener
=
GetOpener
(
)
)
{
COHERENCY_ASSERT
(
opener
-
>
mType
=
=
mType
)
;
COHERENCY_ASSERT
(
opener
-
>
mGroup
=
=
mGroup
)
;
COHERENCY_ASSERT
(
opener
-
>
mUseRemoteTabs
=
=
mUseRemoteTabs
)
;
COHERENCY_ASSERT
(
opener
-
>
mUseRemoteSubframes
=
=
mUseRemoteSubframes
)
;
COHERENCY_ASSERT
(
opener
-
>
mPrivateBrowsingId
=
=
mPrivateBrowsingId
)
;
COHERENCY_ASSERT
(
opener
-
>
mOriginAttributes
.
EqualsIgnoringFPD
(
mOriginAttributes
)
)
;
}
}
if
(
RefPtr
<
BrowsingContext
>
parent
=
GetParent
(
)
)
{
COHERENCY_ASSERT
(
parent
-
>
mType
=
=
mType
)
;
COHERENCY_ASSERT
(
parent
-
>
mGroup
=
=
mGroup
)
;
COHERENCY_ASSERT
(
parent
-
>
mUseRemoteTabs
=
=
mUseRemoteTabs
)
;
COHERENCY_ASSERT
(
parent
-
>
mUseRemoteSubframes
=
=
mUseRemoteSubframes
)
;
COHERENCY_ASSERT
(
parent
-
>
mPrivateBrowsingId
=
=
mPrivateBrowsingId
)
;
COHERENCY_ASSERT
(
parent
-
>
mOriginAttributes
.
EqualsIgnoringFPD
(
mOriginAttributes
)
)
;
}
if
(
mUseRemoteSubframes
&
&
!
mUseRemoteTabs
)
{
return
"
Cannot
set
useRemoteSubframes
without
also
setting
useRemoteTabs
"
;
}
if
(
IsChrome
(
)
)
{
COHERENCY_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
0
)
;
}
else
{
COHERENCY_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
mPrivateBrowsingId
)
;
}
#
undef
COHERENCY_ASSERT
return
nullptr
;
}
void
BrowsingContext
:
:
Attach
(
bool
aFromIPC
ContentParent
*
aOriginProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mEverAttached
)
;
MOZ_DIAGNOSTIC_ASSERT_IF
(
aFromIPC
aOriginProcess
|
|
XRE_IsContentProcess
(
)
)
;
mEverAttached
=
true
;
if
(
MOZ_LOG_TEST
(
GetLog
(
)
LogLevel
:
:
Debug
)
)
{
nsAutoCString
suffix
;
mOriginAttributes
.
CreateSuffix
(
suffix
)
;
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
%
s
:
Connecting
0x
%
08
"
PRIx64
"
to
0x
%
08
"
PRIx64
"
(
private
=
%
d
remote
=
%
d
fission
=
%
d
oa
=
%
s
)
"
XRE_IsParentProcess
(
)
?
"
Parent
"
:
"
Child
"
Id
(
)
GetParent
(
)
?
GetParent
(
)
-
>
Id
(
)
:
0
(
int
)
mPrivateBrowsingId
(
int
)
mUseRemoteTabs
(
int
)
mUseRemoteSubframes
suffix
.
get
(
)
)
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mGroup
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsDiscarded
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
if
(
!
aFromIPC
)
{
if
(
const
char
*
failure
=
BrowsingContextCoherencyChecks
(
aOriginProcess
)
)
{
MOZ_CRASH_UNSAFE_PRINTF
(
"
Incoherent
BrowsingContext
:
%
s
"
failure
)
;
}
}
#
endif
if
(
mParentWindow
)
{
if
(
!
aFromIPC
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mParentWindow
-
>
IsDiscarded
(
)
"
local
attach
in
discarded
window
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
GetParent
(
)
-
>
IsDiscarded
(
)
"
local
attach
call
in
discarded
bc
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mParentWindow
-
>
GetWindowGlobalChild
(
)
"
local
attach
call
with
oop
parent
window
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mParentWindow
-
>
GetWindowGlobalChild
(
)
-
>
CanSend
(
)
"
local
attach
call
with
dead
parent
window
"
)
;
}
mChildOffset
=
mCreatedDynamically
?
-
1
:
mParentWindow
-
>
Children
(
)
.
Length
(
)
;
mParentWindow
-
>
AppendChildBrowsingContext
(
this
)
;
RecomputeCanExecuteScripts
(
)
;
}
else
{
mGroup
-
>
Toplevels
(
)
.
AppendElement
(
this
)
;
}
if
(
GetIsPopupSpam
(
)
)
{
PopupBlocker
:
:
RegisterOpenPopupSpam
(
)
;
}
if
(
IsTop
(
)
&
&
GetHasSessionHistory
(
)
&
&
!
mChildSessionHistory
)
{
CreateChildSHistory
(
)
;
}
const
char16_t
*
why
=
u
"
attach
"
;
if
(
XRE_IsContentProcess
(
)
&
&
!
aFromIPC
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendCreateBrowsingContext
(
mGroup
-
>
Id
(
)
GetIPCInitializer
(
)
)
;
}
else
if
(
XRE_IsParentProcess
(
)
)
{
if
(
mParentWindow
&
&
aOriginProcess
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mParentWindow
-
>
Canonical
(
)
-
>
GetContentParent
(
)
=
=
aOriginProcess
"
Creator
process
isn
'
t
the
same
as
our
embedder
?
"
)
;
Canonical
(
)
-
>
SetCurrentBrowserParent
(
mParentWindow
-
>
Canonical
(
)
-
>
GetBrowserParent
(
)
)
;
}
mGroup
-
>
EachOtherParent
(
aOriginProcess
[
&
]
(
ContentParent
*
aParent
)
{
MOZ_DIAGNOSTIC_ASSERT
(
IsContent
(
)
"
chrome
BCG
cannot
be
synced
to
content
process
"
)
;
if
(
!
Canonical
(
)
-
>
IsEmbeddedInProcess
(
aParent
-
>
ChildID
(
)
)
)
{
Unused
<
<
aParent
-
>
SendCreateBrowsingContext
(
mGroup
-
>
Id
(
)
GetIPCInitializer
(
)
)
;
}
}
)
;
if
(
IsTop
(
)
&
&
IsContent
(
)
&
&
Canonical
(
)
-
>
GetWebProgress
(
)
)
{
why
=
u
"
replace
"
;
}
if
(
IsContent
(
)
&
&
!
Canonical
(
)
-
>
mWebProgress
)
{
Canonical
(
)
-
>
mWebProgress
=
new
BrowsingContextWebProgress
(
Canonical
(
)
)
;
}
}
if
(
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
)
{
obs
-
>
NotifyWhenScriptSafe
(
ToSupports
(
this
)
"
browsing
-
context
-
attached
"
why
)
;
}
if
(
XRE_IsParentProcess
(
)
)
{
Canonical
(
)
-
>
CanonicalAttach
(
)
;
}
}
void
BrowsingContext
:
:
Detach
(
bool
aFromIPC
)
{
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
%
s
:
Detaching
0x
%
08
"
PRIx64
"
from
0x
%
08
"
PRIx64
XRE_IsParentProcess
(
)
?
"
Parent
"
:
"
Child
"
Id
(
)
GetParent
(
)
?
GetParent
(
)
-
>
Id
(
)
:
0
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mEverAttached
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsDiscarded
)
;
if
(
XRE_IsParentProcess
(
)
)
{
Canonical
(
)
-
>
AddPendingDiscard
(
)
;
}
auto
callListeners
=
MakeScopeExit
(
[
&
listeners
=
std
:
:
move
(
mDiscardListeners
)
id
=
Id
(
)
]
{
for
(
const
auto
&
listener
:
listeners
)
{
listener
(
id
)
;
}
if
(
XRE_IsParentProcess
(
)
)
{
Canonical
(
)
-
>
RemovePendingDiscard
(
)
;
}
}
)
;
nsCOMPtr
<
nsIRequestContextService
>
rcsvc
=
net
:
:
RequestContextService
:
:
GetOrCreate
(
)
;
if
(
rcsvc
)
{
rcsvc
-
>
RemoveRequestContext
(
GetRequestContextId
(
)
)
;
}
if
(
NS_WARN_IF
(
!
mGroup
)
)
{
MOZ_ASSERT_UNREACHABLE
(
)
;
return
;
}
if
(
mParentWindow
)
{
mParentWindow
-
>
RemoveChildBrowsingContext
(
this
)
;
}
else
{
mGroup
-
>
Toplevels
(
)
.
RemoveElement
(
this
)
;
}
if
(
XRE_IsParentProcess
(
)
)
{
RefPtr
<
CanonicalBrowsingContext
>
self
{
Canonical
(
)
}
;
Group
(
)
-
>
EachParent
(
[
&
]
(
ContentParent
*
aParent
)
{
bool
doDiscard
=
!
Canonical
(
)
-
>
IsEmbeddedInProcess
(
aParent
-
>
ChildID
(
)
)
&
&
!
Canonical
(
)
-
>
IsOwnedByProcess
(
aParent
-
>
ChildID
(
)
)
;
mGroup
-
>
AddKeepAlive
(
)
;
self
-
>
AddPendingDiscard
(
)
;
auto
callback
=
[
self
]
(
auto
)
{
self
-
>
mGroup
-
>
RemoveKeepAlive
(
)
;
self
-
>
RemovePendingDiscard
(
)
;
}
;
aParent
-
>
SendDiscardBrowsingContext
(
this
doDiscard
callback
callback
)
;
}
)
;
}
else
{
auto
callback
=
[
self
=
RefPtr
{
this
}
]
(
auto
)
{
}
;
ContentChild
:
:
GetSingleton
(
)
-
>
SendDiscardBrowsingContext
(
this
!
aFromIPC
callback
callback
)
;
}
mGroup
-
>
Unregister
(
this
)
;
UnregisterBrowserId
(
this
)
;
mIsDiscarded
=
true
;
if
(
XRE_IsParentProcess
(
)
)
{
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
fm
-
>
BrowsingContextDetached
(
this
)
;
}
}
if
(
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
)
{
const
char16_t
*
why
=
u
"
discard
"
;
if
(
XRE_IsParentProcess
(
)
&
&
IsTop
(
)
&
&
!
Canonical
(
)
-
>
GetWebProgress
(
)
)
{
why
=
u
"
replace
"
;
}
obs
-
>
NotifyObservers
(
ToSupports
(
this
)
"
browsing
-
context
-
discarded
"
why
)
;
}
mFields
.
SetWithoutSyncing
<
IDX_Closed
>
(
true
)
;
if
(
GetIsPopupSpam
(
)
)
{
PopupBlocker
:
:
UnregisterOpenPopupSpam
(
)
;
mFields
.
SetWithoutSyncing
<
IDX_IsPopupSpam
>
(
false
)
;
}
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
if
(
XRE_IsParentProcess
(
)
)
{
Canonical
(
)
-
>
CanonicalDiscard
(
)
;
}
}
void
BrowsingContext
:
:
AddDiscardListener
(
std
:
:
function
<
void
(
uint64_t
)
>
&
&
aListener
)
{
if
(
mIsDiscarded
)
{
aListener
(
Id
(
)
)
;
return
;
}
mDiscardListeners
.
AppendElement
(
std
:
:
move
(
aListener
)
)
;
}
void
BrowsingContext
:
:
PrepareForProcessChange
(
)
{
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
%
s
:
Preparing
0x
%
08
"
PRIx64
"
for
a
process
change
"
XRE_IsParentProcess
(
)
?
"
Parent
"
:
"
Child
"
Id
(
)
)
)
;
MOZ_ASSERT
(
mIsInProcess
"
Must
currently
be
an
in
-
process
frame
"
)
;
MOZ_ASSERT
(
!
mIsDiscarded
"
We
'
re
already
closed
?
"
)
;
mIsInProcess
=
false
;
mUserGestureStart
=
TimeStamp
(
)
;
ClearCachedValuesOfLocations
(
)
;
mDocShell
=
nullptr
;
if
(
mChildSessionHistory
)
{
mChildSessionHistory
-
>
SetIsInProcess
(
false
)
;
}
if
(
!
mWindowProxy
)
{
return
;
}
nsGlobalWindowOuter
:
:
PrepareForProcessChange
(
mWindowProxy
)
;
MOZ_ASSERT
(
!
mWindowProxy
)
;
}
bool
BrowsingContext
:
:
IsTargetable
(
)
const
{
return
!
GetClosed
(
)
&
&
AncestorsAreCurrent
(
)
;
}
void
BrowsingContext
:
:
SetOpener
(
BrowsingContext
*
aOpener
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
aOpener
|
|
aOpener
-
>
Group
(
)
=
=
Group
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aOpener
|
|
aOpener
-
>
mType
=
=
mType
)
;
MOZ_ALWAYS_SUCCEEDS
(
SetOpenerId
(
aOpener
?
aOpener
-
>
Id
(
)
:
0
)
)
;
if
(
IsChrome
(
)
&
&
IsTop
(
)
&
&
aOpener
)
{
auto
openerOverride
=
aOpener
-
>
Top
(
)
-
>
PrefersColorSchemeOverride
(
)
;
if
(
openerOverride
!
=
PrefersColorSchemeOverride
(
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
SetPrefersColorSchemeOverride
(
openerOverride
)
)
;
}
}
}
bool
BrowsingContext
:
:
HasOpener
(
)
const
{
if
(
sBrowsingContexts
)
{
return
sBrowsingContexts
-
>
Contains
(
GetOpenerId
(
)
)
;
}
return
false
;
}
bool
BrowsingContext
:
:
AncestorsAreCurrent
(
)
const
{
const
BrowsingContext
*
bc
=
this
;
while
(
true
)
{
if
(
bc
-
>
IsDiscarded
(
)
)
{
return
false
;
}
if
(
WindowContext
*
wc
=
bc
-
>
GetParentWindowContext
(
)
)
{
if
(
!
wc
-
>
IsCurrent
(
)
|
|
wc
-
>
IsDiscarded
(
)
)
{
return
false
;
}
bc
=
wc
-
>
GetBrowsingContext
(
)
;
}
else
{
return
true
;
}
}
}
bool
BrowsingContext
:
:
IsInBFCache
(
)
const
{
if
(
mozilla
:
:
SessionHistoryInParent
(
)
)
{
return
mIsInBFCache
;
}
return
mParentWindow
&
&
mParentWindow
-
>
TopWindowContext
(
)
-
>
GetWindowStateSaved
(
)
;
}
Span
<
RefPtr
<
BrowsingContext
>
>
BrowsingContext
:
:
Children
(
)
const
{
if
(
WindowContext
*
current
=
mCurrentWindowContext
)
{
return
current
-
>
Children
(
)
;
}
return
Span
<
RefPtr
<
BrowsingContext
>
>
(
)
;
}
void
BrowsingContext
:
:
GetChildren
(
nsTArray
<
RefPtr
<
BrowsingContext
>
>
&
aChildren
)
{
aChildren
.
AppendElements
(
Children
(
)
)
;
}
Span
<
RefPtr
<
BrowsingContext
>
>
BrowsingContext
:
:
NonSyntheticChildren
(
)
const
{
if
(
WindowContext
*
current
=
mCurrentWindowContext
)
{
return
current
-
>
NonSyntheticChildren
(
)
;
}
return
Span
<
RefPtr
<
BrowsingContext
>
>
(
)
;
}
BrowsingContext
*
BrowsingContext
:
:
NonSyntheticLightDOMChildAt
(
uint32_t
aIndex
)
const
{
if
(
WindowContext
*
current
=
mCurrentWindowContext
)
{
return
current
-
>
NonSyntheticLightDOMChildAt
(
aIndex
)
;
}
return
nullptr
;
}
uint32_t
BrowsingContext
:
:
NonSyntheticLightDOMChildrenCount
(
)
const
{
if
(
WindowContext
*
current
=
mCurrentWindowContext
)
{
return
current
-
>
NonSyntheticLightDOMChildrenCount
(
)
;
}
return
0
;
}
void
BrowsingContext
:
:
GetWindowContexts
(
nsTArray
<
RefPtr
<
WindowContext
>
>
&
aWindows
)
{
aWindows
.
AppendElements
(
mWindowContexts
)
;
}
void
BrowsingContext
:
:
RegisterWindowContext
(
WindowContext
*
aWindow
)
{
MOZ_ASSERT
(
!
mWindowContexts
.
Contains
(
aWindow
)
"
WindowContext
already
registered
!
"
)
;
MOZ_ASSERT
(
aWindow
-
>
GetBrowsingContext
(
)
=
=
this
)
;
mWindowContexts
.
AppendElement
(
aWindow
)
;
if
(
aWindow
-
>
InnerWindowId
(
)
=
=
GetCurrentInnerWindowId
(
)
)
{
DidSet
(
FieldIndex
<
IDX_CurrentInnerWindowId
>
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mCurrentWindowContext
=
=
aWindow
)
;
}
}
void
BrowsingContext
:
:
UnregisterWindowContext
(
WindowContext
*
aWindow
)
{
MOZ_ASSERT
(
mWindowContexts
.
Contains
(
aWindow
)
"
WindowContext
not
registered
!
"
)
;
mWindowContexts
.
RemoveElement
(
aWindow
)
;
if
(
aWindow
=
=
mCurrentWindowContext
)
{
DidSet
(
FieldIndex
<
IDX_CurrentInnerWindowId
>
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mCurrentWindowContext
=
=
nullptr
)
;
}
}
void
BrowsingContext
:
:
PreOrderWalkVoid
(
const
std
:
:
function
<
void
(
BrowsingContext
*
)
>
&
aCallback
)
{
aCallback
(
this
)
;
AutoTArray
<
RefPtr
<
BrowsingContext
>
8
>
children
;
children
.
AppendElements
(
Children
(
)
)
;
for
(
auto
&
child
:
children
)
{
child
-
>
PreOrderWalkVoid
(
aCallback
)
;
}
}
BrowsingContext
:
:
WalkFlag
BrowsingContext
:
:
PreOrderWalkFlag
(
const
std
:
:
function
<
WalkFlag
(
BrowsingContext
*
)
>
&
aCallback
)
{
switch
(
aCallback
(
this
)
)
{
case
WalkFlag
:
:
Skip
:
return
WalkFlag
:
:
Next
;
case
WalkFlag
:
:
Stop
:
return
WalkFlag
:
:
Stop
;
case
WalkFlag
:
:
Next
:
default
:
break
;
}
AutoTArray
<
RefPtr
<
BrowsingContext
>
8
>
children
;
children
.
AppendElements
(
Children
(
)
)
;
for
(
auto
&
child
:
children
)
{
switch
(
child
-
>
PreOrderWalkFlag
(
aCallback
)
)
{
case
WalkFlag
:
:
Stop
:
return
WalkFlag
:
:
Stop
;
default
:
break
;
}
}
return
WalkFlag
:
:
Next
;
}
void
BrowsingContext
:
:
PostOrderWalk
(
const
std
:
:
function
<
void
(
BrowsingContext
*
)
>
&
aCallback
)
{
AutoTArray
<
RefPtr
<
BrowsingContext
>
8
>
children
;
children
.
AppendElements
(
Children
(
)
)
;
for
(
auto
&
child
:
children
)
{
child
-
>
PostOrderWalk
(
aCallback
)
;
}
aCallback
(
this
)
;
}
void
BrowsingContext
:
:
GetAllBrowsingContextsInSubtree
(
nsTArray
<
RefPtr
<
BrowsingContext
>
>
&
aBrowsingContexts
)
{
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
aBrowsingContexts
.
AppendElement
(
aContext
)
;
}
)
;
}
BrowsingContext
*
BrowsingContext
:
:
FindChildWithName
(
const
nsAString
&
aName
WindowGlobalChild
&
aRequestingWindow
)
{
if
(
aName
.
IsEmpty
(
)
)
{
return
nullptr
;
}
for
(
BrowsingContext
*
child
:
NonSyntheticChildren
(
)
)
{
if
(
child
-
>
NameEquals
(
aName
)
&
&
aRequestingWindow
.
CanNavigate
(
child
)
&
&
child
-
>
IsTargetable
(
)
)
{
return
child
;
}
}
return
nullptr
;
}
BrowsingContext
*
BrowsingContext
:
:
FindWithSpecialName
(
const
nsAString
&
aName
WindowGlobalChild
&
aRequestingWindow
)
{
if
(
aName
.
LowerCaseEqualsLiteral
(
"
_self
"
)
)
{
return
this
;
}
if
(
aName
.
LowerCaseEqualsLiteral
(
"
_parent
"
)
)
{
if
(
BrowsingContext
*
parent
=
GetParent
(
)
)
{
return
aRequestingWindow
.
CanNavigate
(
parent
)
?
parent
:
nullptr
;
}
return
this
;
}
if
(
aName
.
LowerCaseEqualsLiteral
(
"
_top
"
)
)
{
BrowsingContext
*
top
=
Top
(
)
;
return
aRequestingWindow
.
CanNavigate
(
top
)
?
top
:
nullptr
;
}
return
nullptr
;
}
BrowsingContext
*
BrowsingContext
:
:
FindWithNameInSubtree
(
const
nsAString
&
aName
WindowGlobalChild
*
aRequestingWindow
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
aName
.
IsEmpty
(
)
)
;
if
(
NameEquals
(
aName
)
&
&
(
!
aRequestingWindow
|
|
aRequestingWindow
-
>
CanNavigate
(
this
)
)
&
&
IsTargetable
(
)
)
{
return
this
;
}
for
(
BrowsingContext
*
child
:
NonSyntheticChildren
(
)
)
{
if
(
BrowsingContext
*
found
=
child
-
>
FindWithNameInSubtree
(
aName
aRequestingWindow
)
)
{
return
found
;
}
}
return
nullptr
;
}
bool
BrowsingContext
:
:
IsSandboxedFrom
(
BrowsingContext
*
aTarget
)
{
if
(
!
aTarget
)
{
return
false
;
}
if
(
aTarget
=
=
this
)
{
return
false
;
}
uint32_t
sandboxFlags
=
GetSandboxFlags
(
)
;
if
(
mDocShell
)
{
if
(
RefPtr
<
Document
>
doc
=
mDocShell
-
>
GetExtantDocument
(
)
)
{
sandboxFlags
=
doc
-
>
GetSandboxFlags
(
)
;
}
}
if
(
!
sandboxFlags
)
{
return
false
;
}
if
(
RefPtr
<
BrowsingContext
>
ancestorOfTarget
=
aTarget
-
>
GetParent
(
)
)
{
do
{
if
(
ancestorOfTarget
=
=
this
)
{
return
false
;
}
ancestorOfTarget
=
ancestorOfTarget
-
>
GetParent
(
)
;
}
while
(
ancestorOfTarget
)
;
return
true
;
}
if
(
aTarget
-
>
GetOnePermittedSandboxedNavigatorId
(
)
=
=
Id
(
)
)
{
return
false
;
}
if
(
!
(
sandboxFlags
&
SANDBOXED_TOPLEVEL_NAVIGATION
)
&
&
aTarget
=
=
Top
(
)
)
{
return
false
;
}
if
(
!
(
sandboxFlags
&
SANDBOXED_TOPLEVEL_NAVIGATION_USER_ACTIVATION
)
&
&
mCurrentWindowContext
&
&
(
!
mCurrentWindowContext
-
>
IsInProcess
(
)
|
|
mCurrentWindowContext
-
>
HasValidTransientUserGestureActivation
(
)
)
&
&
aTarget
=
=
Top
(
)
)
{
return
false
;
}
return
true
;
}
RefPtr
<
SessionStorageManager
>
BrowsingContext
:
:
GetSessionStorageManager
(
)
{
RefPtr
<
SessionStorageManager
>
&
manager
=
Top
(
)
-
>
mSessionStorageManager
;
if
(
!
manager
)
{
manager
=
new
SessionStorageManager
(
this
)
;
}
return
manager
;
}
bool
BrowsingContext
:
:
CrossOriginIsolated
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
StaticPrefs
:
:
dom_postMessage_sharedArrayBuffer_withCOOP_COEP_AtStartup
(
)
&
&
Top
(
)
-
>
GetOpenerPolicy
(
)
=
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
&
&
XRE_IsContentProcess
(
)
&
&
StringBeginsWith
(
ContentChild
:
:
GetSingleton
(
)
-
>
GetRemoteType
(
)
WITH_COOP_COEP_REMOTE_TYPE_PREFIX
)
;
}
void
BrowsingContext
:
:
SetTriggeringAndInheritPrincipals
(
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
uint64_t
aLoadIdentifier
)
{
mTriggeringPrincipal
=
Some
(
PrincipalWithLoadIdentifierTuple
(
aTriggeringPrincipal
aLoadIdentifier
)
)
;
if
(
aPrincipalToInherit
)
{
mPrincipalToInherit
=
Some
(
PrincipalWithLoadIdentifierTuple
(
aPrincipalToInherit
aLoadIdentifier
)
)
;
}
}
std
:
:
tuple
<
nsCOMPtr
<
nsIPrincipal
>
nsCOMPtr
<
nsIPrincipal
>
>
BrowsingContext
:
:
GetTriggeringAndInheritPrincipalsForCurrentLoad
(
)
{
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
=
GetSavedPrincipal
(
mTriggeringPrincipal
)
;
nsCOMPtr
<
nsIPrincipal
>
principalToInherit
=
GetSavedPrincipal
(
mPrincipalToInherit
)
;
return
std
:
:
make_tuple
(
triggeringPrincipal
principalToInherit
)
;
}
nsIPrincipal
*
BrowsingContext
:
:
GetSavedPrincipal
(
Maybe
<
PrincipalWithLoadIdentifierTuple
>
aPrincipalTuple
)
{
if
(
aPrincipalTuple
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
;
uint64_t
loadIdentifier
;
std
:
:
tie
(
principal
loadIdentifier
)
=
*
aPrincipalTuple
;
if
(
auto
current
=
GetCurrentLoadIdentifier
(
)
;
current
&
&
*
current
=
=
loadIdentifier
)
{
return
principal
;
}
}
return
nullptr
;
}
BrowsingContext
:
:
~
BrowsingContext
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mParentWindow
|
|
!
mParentWindow
-
>
mChildren
.
Contains
(
this
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mGroup
|
|
!
mGroup
-
>
Toplevels
(
)
.
Contains
(
this
)
)
;
mDeprioritizedLoadRunner
.
clear
(
)
;
if
(
sBrowsingContexts
)
{
sBrowsingContexts
-
>
Remove
(
Id
(
)
)
;
}
UnregisterBrowserId
(
this
)
;
ClearCachedValuesOfLocations
(
)
;
mLocations
.
clear
(
)
;
}
void
BrowsingContext
:
:
DiscardFromContentParent
(
ContentParent
*
aCP
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
sBrowsingContexts
)
{
AutoTArray
<
RefPtr
<
BrowsingContext
>
8
>
toDiscard
;
for
(
const
auto
&
data
:
sBrowsingContexts
-
>
Values
(
)
)
{
auto
*
bc
=
data
-
>
Canonical
(
)
;
if
(
!
bc
-
>
IsDiscarded
(
)
&
&
bc
-
>
IsEmbeddedInProcess
(
aCP
-
>
ChildID
(
)
)
)
{
toDiscard
.
AppendElement
(
bc
)
;
}
}
for
(
BrowsingContext
*
bc
:
toDiscard
)
{
bc
-
>
Detach
(
true
)
;
}
}
}
nsISupports
*
BrowsingContext
:
:
GetParentObject
(
)
const
{
return
xpc
:
:
NativeGlobal
(
xpc
:
:
PrivilegedJunkScope
(
)
)
;
}
JSObject
*
BrowsingContext
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
BrowsingContext_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
BrowsingContext
:
:
WriteStructuredClone
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
StructuredCloneHolder
*
aHolder
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mEverAttached
)
;
return
(
JS_WriteUint32Pair
(
aWriter
SCTAG_DOM_BROWSING_CONTEXT
0
)
&
&
JS_WriteUint32Pair
(
aWriter
uint32_t
(
Id
(
)
)
uint32_t
(
Id
(
)
>
>
32
)
)
)
;
}
JSObject
*
BrowsingContext
:
:
ReadStructuredClone
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
StructuredCloneHolder
*
aHolder
)
{
uint32_t
idLow
=
0
;
uint32_t
idHigh
=
0
;
if
(
!
JS_ReadUint32Pair
(
aReader
&
idLow
&
idHigh
)
)
{
return
nullptr
;
}
uint64_t
id
=
uint64_t
(
idHigh
)
<
<
32
|
idLow
;
if
(
NS_WARN_IF
(
!
NS_IsMainThread
(
)
)
)
{
MOZ_DIAGNOSTIC_CRASH
(
"
We
shouldn
'
t
be
trying
to
decode
a
BrowsingContext
"
"
on
a
background
thread
.
"
)
;
return
nullptr
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
aCx
JS
:
:
NullValue
(
)
)
;
if
(
RefPtr
<
BrowsingContext
>
context
=
Get
(
id
)
)
{
if
(
!
GetOrCreateDOMReflector
(
aCx
context
&
val
)
|
|
!
val
.
isObject
(
)
)
{
return
nullptr
;
}
}
return
val
.
toObjectOrNull
(
)
;
}
bool
BrowsingContext
:
:
CanSetOriginAttributes
(
)
{
if
(
NS_WARN_IF
(
IsDiscarded
(
)
)
)
{
return
false
;
}
if
(
!
EverAttached
(
)
)
{
return
true
;
}
if
(
NS_WARN_IF
(
IsContent
(
)
)
)
{
MOZ_CRASH
(
)
;
return
false
;
}
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
NS_WARN_IF
(
!
Children
(
)
.
IsEmpty
(
)
)
)
{
return
false
;
}
if
(
WindowGlobalParent
*
window
=
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
)
{
if
(
nsIURI
*
uri
=
window
-
>
GetDocumentURI
(
)
)
{
MOZ_ASSERT
(
NS_IsAboutBlank
(
uri
)
)
;
return
NS_IsAboutBlank
(
uri
)
;
}
}
return
true
;
}
Nullable
<
WindowProxyHolder
>
BrowsingContext
:
:
GetAssociatedWindow
(
)
{
if
(
IsInProcess
(
)
)
{
return
WindowProxyHolder
(
this
)
;
}
return
nullptr
;
}
Nullable
<
WindowProxyHolder
>
BrowsingContext
:
:
GetTopWindow
(
)
{
return
Top
(
)
-
>
GetAssociatedWindow
(
)
;
}
Element
*
BrowsingContext
:
:
GetTopFrameElement
(
)
{
return
Top
(
)
-
>
GetEmbedderElement
(
)
;
}
void
BrowsingContext
:
:
SetUsePrivateBrowsing
(
bool
aUsePrivateBrowsing
ErrorResult
&
aError
)
{
nsresult
rv
=
SetUsePrivateBrowsing
(
aUsePrivateBrowsing
)
;
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
}
}
void
BrowsingContext
:
:
SetUseTrackingProtectionWebIDL
(
bool
aUseTrackingProtection
ErrorResult
&
aRv
)
{
SetForceEnableTrackingProtection
(
aUseTrackingProtection
aRv
)
;
}
void
BrowsingContext
:
:
GetOriginAttributes
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVal
ErrorResult
&
aError
)
{
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
if
(
!
ToJSValue
(
aCx
mOriginAttributes
aVal
)
)
{
aError
.
NoteJSContextException
(
aCx
)
;
}
}
NS_IMETHODIMP
BrowsingContext
:
:
GetAssociatedWindow
(
mozIDOMWindowProxy
*
*
aAssociatedWindow
)
{
nsCOMPtr
<
mozIDOMWindowProxy
>
win
=
GetDOMWindow
(
)
;
win
.
forget
(
aAssociatedWindow
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetTopWindow
(
mozIDOMWindowProxy
*
*
aTopWindow
)
{
return
Top
(
)
-
>
GetAssociatedWindow
(
aTopWindow
)
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetTopFrameElement
(
Element
*
*
aTopFrameElement
)
{
RefPtr
<
Element
>
topFrameElement
=
GetTopFrameElement
(
)
;
topFrameElement
.
forget
(
aTopFrameElement
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetIsContent
(
bool
*
aIsContent
)
{
*
aIsContent
=
IsContent
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetUsePrivateBrowsing
(
bool
*
aUsePrivateBrowsing
)
{
*
aUsePrivateBrowsing
=
mPrivateBrowsingId
>
0
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
SetUsePrivateBrowsing
(
bool
aUsePrivateBrowsing
)
{
if
(
!
CanSetOriginAttributes
(
)
)
{
bool
changed
=
aUsePrivateBrowsing
!
=
(
mPrivateBrowsingId
>
0
)
;
if
(
changed
)
{
NS_WARNING
(
"
SetUsePrivateBrowsing
when
!
CanSetOriginAttributes
(
)
"
)
;
}
return
changed
?
NS_ERROR_FAILURE
:
NS_OK
;
}
return
SetPrivateBrowsing
(
aUsePrivateBrowsing
)
;
}
NS_IMETHODIMP
BrowsingContext
:
:
SetPrivateBrowsing
(
bool
aPrivateBrowsing
)
{
if
(
!
CanSetOriginAttributes
(
)
)
{
NS_WARNING
(
"
Attempt
to
set
PrivateBrowsing
when
!
CanSetOriginAttributes
"
)
;
return
NS_ERROR_FAILURE
;
}
bool
changed
=
aPrivateBrowsing
!
=
(
mPrivateBrowsingId
>
0
)
;
if
(
changed
)
{
mPrivateBrowsingId
=
aPrivateBrowsing
?
1
:
0
;
if
(
IsContent
(
)
)
{
mOriginAttributes
.
SyncAttributesWithPrivateBrowsing
(
aPrivateBrowsing
)
;
}
if
(
XRE_IsParentProcess
(
)
)
{
Canonical
(
)
-
>
AdjustPrivateBrowsingCount
(
aPrivateBrowsing
)
;
}
}
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
if
(
changed
&
&
mDocShell
)
{
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
NotifyPrivateBrowsingChanged
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetUseRemoteTabs
(
bool
*
aUseRemoteTabs
)
{
*
aUseRemoteTabs
=
mUseRemoteTabs
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
SetRemoteTabs
(
bool
aUseRemoteTabs
)
{
if
(
!
CanSetOriginAttributes
(
)
)
{
NS_WARNING
(
"
Attempt
to
set
RemoteTabs
when
!
CanSetOriginAttributes
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
aUseRemoteTabs
&
&
!
gIPCEnabledAnnotation
)
{
gIPCEnabledAnnotation
=
true
;
}
if
(
NS_WARN_IF
(
!
aUseRemoteTabs
&
&
mUseRemoteSubframes
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
mUseRemoteTabs
=
aUseRemoteTabs
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetUseRemoteSubframes
(
bool
*
aUseRemoteSubframes
)
{
*
aUseRemoteSubframes
=
mUseRemoteSubframes
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
SetRemoteSubframes
(
bool
aUseRemoteSubframes
)
{
if
(
!
CanSetOriginAttributes
(
)
)
{
NS_WARNING
(
"
Attempt
to
set
RemoteSubframes
when
!
CanSetOriginAttributes
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
aUseRemoteSubframes
&
&
!
gFissionEnabledAnnotation
)
{
gFissionEnabledAnnotation
=
true
;
}
if
(
NS_WARN_IF
(
aUseRemoteSubframes
&
&
!
mUseRemoteTabs
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
mUseRemoteSubframes
=
aUseRemoteSubframes
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetUseTrackingProtection
(
bool
*
aUseTrackingProtection
)
{
*
aUseTrackingProtection
=
false
;
if
(
GetForceEnableTrackingProtection
(
)
|
|
StaticPrefs
:
:
privacy_trackingprotection_enabled
(
)
|
|
(
UsePrivateBrowsing
(
)
&
&
StaticPrefs
:
:
privacy_trackingprotection_pbmode_enabled
(
)
)
)
{
*
aUseTrackingProtection
=
true
;
return
NS_OK
;
}
if
(
GetParent
(
)
)
{
return
GetParent
(
)
-
>
GetUseTrackingProtection
(
aUseTrackingProtection
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
BrowsingContext
:
:
SetUseTrackingProtection
(
bool
aUseTrackingProtection
)
{
return
SetForceEnableTrackingProtection
(
aUseTrackingProtection
)
;
}
NS_IMETHODIMP
BrowsingContext
:
:
GetScriptableOriginAttributes
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVal
)
{
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
bool
ok
=
ToJSValue
(
aCx
mOriginAttributes
aVal
)
;
NS_ENSURE_TRUE
(
ok
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
NS_IMETHODIMP_
(
void
)
BrowsingContext
:
:
GetOriginAttributes
(
OriginAttributes
&
aAttrs
)
{
aAttrs
=
mOriginAttributes
;
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
}
nsresult
BrowsingContext
:
:
SetOriginAttributes
(
const
OriginAttributes
&
aAttrs
)
{
if
(
!
CanSetOriginAttributes
(
)
)
{
NS_WARNING
(
"
Attempt
to
set
OriginAttributes
when
!
CanSetOriginAttributes
"
)
;
return
NS_ERROR_FAILURE
;
}
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
mOriginAttributes
=
aAttrs
;
bool
isPrivate
=
mOriginAttributes
.
mPrivateBrowsingId
!
=
nsIScriptSecurityManager
:
:
DEFAULT_PRIVATE_BROWSING_ID
;
if
(
IsChrome
(
)
&
&
isPrivate
)
{
mOriginAttributes
.
mPrivateBrowsingId
=
nsIScriptSecurityManager
:
:
DEFAULT_PRIVATE_BROWSING_ID
;
}
SetPrivateBrowsing
(
isPrivate
)
;
AssertOriginAttributesMatchPrivateBrowsing
(
)
;
return
NS_OK
;
}
void
BrowsingContext
:
:
AssertOriginAttributesMatchPrivateBrowsing
(
)
{
if
(
IsChrome
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
0
)
;
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
mPrivateBrowsingId
)
;
}
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
BrowsingContext
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsILoadContext
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_CLASS
(
BrowsingContext
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
BrowsingContext
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
BrowsingContext
)
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
BrowsingContext
)
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
BrowsingContext
)
if
(
sBrowsingContexts
)
{
sBrowsingContexts
-
>
Remove
(
tmp
-
>
Id
(
)
)
;
}
UnregisterBrowserId
(
tmp
)
;
if
(
tmp
-
>
GetIsPopupSpam
(
)
)
{
PopupBlocker
:
:
UnregisterOpenPopupSpam
(
)
;
tmp
-
>
mFields
.
SetWithoutSyncing
<
IDX_IsPopupSpam
>
(
false
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocShell
mParentWindow
mGroup
mEmbedderElement
mWindowContexts
mCurrentWindowContext
mSessionStorageManager
mChildSessionHistory
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
BrowsingContext
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocShell
mParentWindow
mGroup
mEmbedderElement
mWindowContexts
mCurrentWindowContext
mSessionStorageManager
mChildSessionHistory
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
static
bool
IsCertainlyAliveForCC
(
BrowsingContext
*
aContext
)
{
return
aContext
-
>
HasKnownLiveWrapper
(
)
|
|
(
AppShutdown
:
:
GetCurrentShutdownPhase
(
)
=
=
ShutdownPhase
:
:
NotInShutdown
&
&
aContext
-
>
EverAttached
(
)
&
&
!
aContext
-
>
IsDiscarded
(
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_BEGIN
(
BrowsingContext
)
if
(
IsCertainlyAliveForCC
(
tmp
)
)
{
if
(
tmp
-
>
PreservingWrapper
(
)
)
{
tmp
-
>
MarkWrapperLive
(
)
;
}
return
true
;
}
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_BEGIN
(
BrowsingContext
)
return
IsCertainlyAliveForCC
(
tmp
)
&
&
tmp
-
>
HasNothingToTrace
(
tmp
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_BEGIN
(
BrowsingContext
)
return
IsCertainlyAliveForCC
(
tmp
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_END
class
RemoteLocationProxy
:
public
RemoteObjectProxy
<
BrowsingContext
:
:
LocationProxy
Location_Binding
:
:
sCrossOriginProperties
>
{
public
:
typedef
RemoteObjectProxy
Base
;
constexpr
RemoteLocationProxy
(
)
:
RemoteObjectProxy
(
prototypes
:
:
id
:
:
Location
)
{
}
void
NoteChildren
(
JSObject
*
aProxy
nsCycleCollectionTraversalCallback
&
aCb
)
const
override
{
auto
location
=
static_cast
<
BrowsingContext
:
:
LocationProxy
*
>
(
GetNative
(
aProxy
)
)
;
CycleCollectionNoteChild
(
aCb
location
-
>
GetBrowsingContext
(
)
"
JS
:
:
GetPrivate
(
obj
)
-
>
GetBrowsingContext
(
)
"
)
;
}
}
;
static
const
RemoteLocationProxy
sSingleton
;
template
<
>
const
JSClass
RemoteLocationProxy
:
:
Base
:
:
sClass
=
PROXY_CLASS_DEF
(
"
Proxy
"
JSCLASS_HAS_RESERVED_SLOTS
(
2
)
)
;
void
BrowsingContext
:
:
Location
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aLocation
ErrorResult
&
aError
)
{
aError
.
MightThrowJSException
(
)
;
sSingleton
.
GetProxyObject
(
aCx
&
mLocation
nullptr
aLocation
)
;
if
(
!
aLocation
)
{
aError
.
StealExceptionFromJSContext
(
aCx
)
;
}
}
bool
BrowsingContext
:
:
RemoveRootFromBFCacheSync
(
)
{
if
(
WindowContext
*
wc
=
GetParentWindowContext
(
)
)
{
if
(
RefPtr
<
Document
>
doc
=
wc
-
>
TopWindowContext
(
)
-
>
GetDocument
(
)
)
{
return
doc
-
>
RemoveFromBFCacheSync
(
)
;
}
}
return
false
;
}
nsresult
BrowsingContext
:
:
CheckSandboxFlags
(
nsDocShellLoadState
*
aLoadState
)
{
const
auto
&
sourceBC
=
aLoadState
-
>
SourceBrowsingContext
(
)
;
if
(
sourceBC
.
IsNull
(
)
)
{
return
NS_OK
;
}
BrowsingContext
*
bc
=
sourceBC
.
GetMaybeDiscarded
(
)
;
if
(
!
bc
|
|
bc
-
>
IsSandboxedFrom
(
this
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
return
NS_OK
;
}
nsresult
BrowsingContext
:
:
CheckFramebusting
(
nsDocShellLoadState
*
aLoadState
)
{
if
(
!
StaticPrefs
:
:
dom_security_framebusting_intervention_enabled
(
)
)
{
return
NS_OK
;
}
if
(
!
IsTop
(
)
)
{
return
NS_OK
;
}
if
(
aLoadState
-
>
HasValidUserGestureActivation
(
)
)
{
return
NS_OK
;
}
const
auto
&
sourceBC
=
aLoadState
-
>
SourceBrowsingContext
(
)
;
if
(
sourceBC
.
IsNull
(
)
)
{
return
NS_OK
;
}
if
(
BrowsingContext
*
bc
=
sourceBC
.
GetMaybeDiscarded
(
)
)
{
if
(
bc
-
>
IsFramebustingAllowed
(
this
)
)
{
return
NS_OK
;
}
if
(
bc
-
>
GetDOMWindow
(
)
)
{
nsGlobalWindowOuter
:
:
Cast
(
bc
-
>
GetDOMWindow
(
)
)
-
>
FireRedirectBlockedEvent
(
aLoadState
-
>
URI
(
)
)
;
}
nsAutoCString
frameURL
;
if
(
bc
-
>
GetDocument
(
)
&
&
NS_SUCCEEDED
(
bc
-
>
GetDocument
(
)
-
>
GetPrincipal
(
)
-
>
GetAsciiSpec
(
frameURL
)
)
)
{
nsContentUtils
:
:
ReportToConsoleNonLocalized
(
NS_ConvertUTF8toUTF16
(
nsPrintfCString
(
R
"
(
Attempting
to
navigate
the
top
-
level
browsing
context
from
)
"
R
"
(
frame
with
url
"
%
s
"
which
is
neither
same
-
origin
nor
has
)
"
R
"
(
the
required
user
interaction
.
)
"
frameURL
.
get
(
)
)
)
nsIScriptError
:
:
errorFlag
"
DOM
"
_ns
bc
-
>
GetDocument
(
)
)
;
}
}
return
NS_ERROR_DOM_SECURITY_ERR
;
}
bool
BrowsingContext
:
:
IsFramebustingAllowed
(
BrowsingContext
*
aTarget
)
{
MOZ_ASSERT
(
aTarget
-
>
IsTop
(
)
)
;
if
(
aTarget
-
>
BrowserId
(
)
=
=
BrowserId
(
)
)
{
return
IsFramebustingAllowedInner
(
)
|
|
IsPopupAllowed
(
)
;
}
return
true
;
}
bool
BrowsingContext
:
:
IsFramebustingAllowedInner
(
)
{
if
(
IsInProcess
(
)
&
&
SameOriginWithTop
(
)
)
{
return
true
;
}
Document
*
doc
;
nsIChannel
*
channel
;
if
(
(
doc
=
GetExtantDocument
(
)
)
&
&
(
channel
=
doc
-
>
GetChannel
(
)
)
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
channel
-
>
LoadInfo
(
)
;
uint32_t
sandboxFlags
=
loadInfo
-
>
GetSandboxFlags
(
)
;
if
(
sandboxFlags
&
&
!
(
sandboxFlags
&
SANDBOXED_TOPLEVEL_NAVIGATION
)
)
{
BrowsingContext
*
parent
=
GetParent
(
)
;
return
!
parent
|
|
parent
-
>
IsFramebustingAllowedInner
(
)
;
}
}
return
false
;
}
nsresult
BrowsingContext
:
:
LoadURI
(
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
)
{
if
(
IsDiscarded
(
)
)
{
return
NS_OK
;
}
MOZ_DIAGNOSTIC_ASSERT
(
aLoadState
-
>
TargetBrowsingContext
(
)
.
IsNull
(
)
"
Targeting
occurs
in
InternalLoad
"
)
;
aLoadState
-
>
AssertProcessCouldTriggerLoadIfSystem
(
)
;
if
(
aLoadState
-
>
HasLoadFlags
(
nsIWebNavigation
:
:
LOAD_FLAGS_DISABLE_TRR
)
)
{
Unused
<
<
SetDefaultLoadFlags
(
GetDefaultLoadFlags
(
)
|
nsIRequest
:
:
LOAD_TRR_DISABLED_MODE
)
;
}
else
if
(
aLoadState
-
>
HasLoadFlags
(
nsIWebNavigation
:
:
LOAD_FLAGS_FORCE_TRR
)
)
{
Unused
<
<
SetDefaultLoadFlags
(
GetDefaultLoadFlags
(
)
|
nsIRequest
:
:
LOAD_TRR_ONLY_MODE
)
;
}
if
(
mDocShell
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
mDocShell
;
return
docShell
-
>
LoadURI
(
aLoadState
aSetNavigating
)
;
}
MOZ_TRY
(
CheckSandboxFlags
(
aLoadState
)
)
;
SetTriggeringAndInheritPrincipals
(
aLoadState
-
>
TriggeringPrincipal
(
)
aLoadState
-
>
PrincipalToInherit
(
)
aLoadState
-
>
GetLoadIdentifier
(
)
)
;
const
auto
&
sourceBC
=
aLoadState
-
>
SourceBrowsingContext
(
)
;
if
(
aLoadState
-
>
URI
(
)
-
>
SchemeIs
(
"
javascript
"
)
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
NS_ERROR_DOM_BAD_CROSS_ORIGIN_URI
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
sourceBC
"
Should
never
see
a
cross
-
process
javascript
:
load
"
"
triggered
from
content
"
)
;
}
MOZ_TRY
(
CheckFramebusting
(
aLoadState
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
sourceBC
|
|
sourceBC
-
>
Group
(
)
=
=
Group
(
)
)
;
if
(
sourceBC
&
&
sourceBC
-
>
IsInProcess
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
(
sourceBC
-
>
GetDOMWindow
(
)
)
;
if
(
WindowGlobalChild
*
wgc
=
win
-
>
GetCurrentInnerWindow
(
)
-
>
GetWindowGlobalChild
(
)
)
{
if
(
!
wgc
-
>
CanNavigate
(
this
)
)
{
return
NS_ERROR_DOM_PROP_ACCESS_DENIED
;
}
wgc
-
>
SendLoadURI
(
this
mozilla
:
:
WrapNotNull
(
aLoadState
)
aSetNavigating
)
;
}
}
else
if
(
XRE_IsParentProcess
(
)
)
{
if
(
Canonical
(
)
-
>
LoadInParent
(
aLoadState
aSetNavigating
)
)
{
return
NS_OK
;
}
if
(
ContentParent
*
cp
=
Canonical
(
)
-
>
GetContentParent
(
)
)
{
uint64_t
loadIdentifier
=
0
;
if
(
Canonical
(
)
-
>
AttemptSpeculativeLoadInParent
(
aLoadState
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
GetCurrentLoadIdentifier
(
)
.
isSome
(
)
)
;
loadIdentifier
=
GetCurrentLoadIdentifier
(
)
.
value
(
)
;
aLoadState
-
>
SetChannelInitialized
(
true
)
;
}
cp
-
>
TransmitBlobDataIfBlobURL
(
aLoadState
-
>
URI
(
)
)
;
#
ifdef
ANDROID
uint64_t
androidLoadIdentifier
=
nsContentUtils
:
:
GenerateTabId
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
SetAndroidAppLinkLoadIdentifier
(
Some
(
androidLoadIdentifier
)
)
)
;
uint32_t
appLinkLaunchType
=
aLoadState
-
>
GetAppLinkLaunchType
(
)
;
cp
-
>
SetAndroidAppLinkLaunchType
(
androidLoadIdentifier
appLinkLaunchType
)
;
constexpr
uint32_t
APPLINK_COLD
=
1
;
if
(
appLinkLaunchType
=
=
APPLINK_COLD
)
{
const
TimeStamp
loadUriTime
=
TimeStamp
:
:
Now
(
)
;
const
TimeStamp
processCreationTime
=
TimeStamp
:
:
ProcessCreation
(
)
;
if
(
!
processCreationTime
.
IsNull
(
)
)
{
const
TimeDuration
delta
=
loadUriTime
-
processCreationTime
;
mozilla
:
:
glean
:
:
perf
:
:
cold_applink_process_launch_to_load_uri
.
AccumulateRawDuration
(
delta
)
;
PROFILER_MARKER
(
"
Cold
App
Link
Process
Creation
to
Load
URI
"
NETWORK
MarkerOptions
(
MarkerTiming
:
:
Interval
(
processCreationTime
loadUriTime
)
)
Tracing
"
AppLink
"
)
;
}
const
TimeStamp
mainTime
=
StartupTimeline
:
:
Get
(
StartupTimeline
:
:
MAIN
)
;
if
(
!
mainTime
.
IsNull
(
)
)
{
const
TimeDuration
mainDelta
=
loadUriTime
-
mainTime
;
mozilla
:
:
glean
:
:
perf
:
:
cold_applink_main_to_load_uri
.
AccumulateRawDuration
(
mainDelta
)
;
PROFILER_MARKER
(
"
Cold
App
Link
Main
to
Load
URI
"
NETWORK
MarkerOptions
(
MarkerTiming
:
:
Interval
(
mainTime
loadUriTime
)
)
Tracing
"
AppLink
"
)
;
}
}
PROFILER_MARKER_FMT
(
"
BrowsingContext
:
:
LoadURI
"
NETWORK
{
}
"
android
appLinkLaunchType
{
}
URL
{
}
"
appLinkLaunchType
aLoadState
-
>
URI
(
)
-
>
GetSpecOrDefault
(
)
.
get
(
)
)
;
#
endif
cp
-
>
SendLoadURI
(
this
mozilla
:
:
WrapNotNull
(
aLoadState
)
aSetNavigating
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
loadIdentifier
]
(
const
PContentParent
:
:
LoadURIPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
loadIdentifier
)
{
net
:
:
DocumentLoadListener
:
:
CleanupParentLoadAttempt
(
loadIdentifier
)
;
}
}
)
;
}
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
sourceBC
)
;
if
(
!
sourceBC
)
{
return
NS_ERROR_UNEXPECTED
;
}
}
return
NS_OK
;
}
nsresult
BrowsingContext
:
:
InternalLoad
(
nsDocShellLoadState
*
aLoadState
)
{
if
(
IsDiscarded
(
)
)
{
return
NS_OK
;
}
SetTriggeringAndInheritPrincipals
(
aLoadState
-
>
TriggeringPrincipal
(
)
aLoadState
-
>
PrincipalToInherit
(
)
aLoadState
-
>
GetLoadIdentifier
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aLoadState
-
>
Target
(
)
.
IsEmpty
(
)
"
should
already
have
retargeted
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aLoadState
-
>
TargetBrowsingContext
(
)
.
IsNull
(
)
"
should
have
target
bc
set
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aLoadState
-
>
TargetBrowsingContext
(
)
=
=
this
"
must
be
targeting
this
BrowsingContext
"
)
;
aLoadState
-
>
AssertProcessCouldTriggerLoadIfSystem
(
)
;
if
(
mDocShell
)
{
RefPtr
<
nsDocShell
>
docShell
=
nsDocShell
:
:
Cast
(
mDocShell
)
;
return
docShell
-
>
InternalLoad
(
aLoadState
)
;
}
MOZ_TRY
(
CheckSandboxFlags
(
aLoadState
)
)
;
const
auto
&
sourceBC
=
aLoadState
-
>
SourceBrowsingContext
(
)
;
if
(
aLoadState
-
>
URI
(
)
-
>
SchemeIs
(
"
javascript
"
)
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
NS_ERROR_DOM_BAD_CROSS_ORIGIN_URI
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
sourceBC
"
Should
never
see
a
cross
-
process
javascript
:
load
"
"
triggered
from
content
"
)
;
}
MOZ_TRY
(
CheckFramebusting
(
aLoadState
)
)
;
if
(
XRE_IsParentProcess
(
)
)
{
ContentParent
*
cp
=
Canonical
(
)
-
>
GetContentParent
(
)
;
if
(
!
cp
|
|
!
cp
-
>
CanSend
(
)
)
{
return
NS_ERROR_FAILURE
;
}
MOZ_ALWAYS_SUCCEEDS
(
SetCurrentLoadIdentifier
(
Some
(
aLoadState
-
>
GetLoadIdentifier
(
)
)
)
)
;
Unused
<
<
cp
-
>
SendInternalLoad
(
mozilla
:
:
WrapNotNull
(
aLoadState
)
)
;
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
sourceBC
)
;
MOZ_DIAGNOSTIC_ASSERT
(
sourceBC
-
>
Group
(
)
=
=
Group
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
(
sourceBC
-
>
GetDOMWindow
(
)
)
;
WindowGlobalChild
*
wgc
=
win
-
>
GetCurrentInnerWindow
(
)
-
>
GetWindowGlobalChild
(
)
;
if
(
!
wgc
|
|
!
wgc
-
>
CanSend
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
wgc
-
>
CanNavigate
(
this
)
)
{
return
NS_ERROR_DOM_PROP_ACCESS_DENIED
;
}
MOZ_ALWAYS_SUCCEEDS
(
SetCurrentLoadIdentifier
(
Some
(
aLoadState
-
>
GetLoadIdentifier
(
)
)
)
)
;
wgc
-
>
SendInternalLoad
(
mozilla
:
:
WrapNotNull
(
aLoadState
)
)
;
}
return
NS_OK
;
}
already_AddRefed
<
nsDocShellLoadState
>
BrowsingContext
:
:
CheckURLAndCreateLoadState
(
nsIURI
*
aURI
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
;
nsCOMPtr
<
nsIURI
>
sourceURI
;
ReferrerPolicy
referrerPolicy
=
ReferrerPolicy
:
:
_empty
;
nsCOMPtr
<
nsIReferrerInfo
>
referrerInfo
;
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
if
(
NS_WARN_IF
(
!
ssm
)
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
nullptr
;
}
nsresult
rv
=
ssm
-
>
CheckLoadURIWithPrincipal
(
&
aSubjectPrincipal
aURI
nsIScriptSecurityManager
:
:
STANDARD
0
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
nsAutoCString
spec
;
aURI
-
>
GetSpec
(
spec
)
;
aRv
.
ThrowTypeError
<
MSG_URL_NOT_LOADABLE
>
(
spec
)
;
return
nullptr
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
incumbent
=
do_QueryInterface
(
mozilla
:
:
dom
:
:
GetIncumbentGlobal
(
)
)
;
nsCOMPtr
<
Document
>
doc
=
incumbent
?
incumbent
-
>
GetDoc
(
)
:
nullptr
;
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
aURI
)
;
if
(
!
doc
)
{
loadState
-
>
SetTriggeringPrincipal
(
&
aSubjectPrincipal
)
;
return
loadState
.
forget
(
)
;
}
nsCOMPtr
<
nsIURI
>
docOriginalURI
docCurrentURI
principalURI
;
docOriginalURI
=
doc
-
>
GetOriginalURI
(
)
;
docCurrentURI
=
doc
-
>
GetDocumentURI
(
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
doc
-
>
NodePrincipal
(
)
;
triggeringPrincipal
=
doc
-
>
NodePrincipal
(
)
;
referrerPolicy
=
doc
-
>
GetReferrerPolicy
(
)
;
bool
urisEqual
=
false
;
if
(
docOriginalURI
&
&
docCurrentURI
&
&
principal
)
{
principal
-
>
EqualsURI
(
docOriginalURI
&
urisEqual
)
;
}
if
(
urisEqual
)
{
referrerInfo
=
new
ReferrerInfo
(
docCurrentURI
referrerPolicy
)
;
}
else
{
principal
-
>
CreateReferrerInfo
(
referrerPolicy
getter_AddRefs
(
referrerInfo
)
)
;
}
loadState
-
>
SetTriggeringPrincipal
(
triggeringPrincipal
)
;
loadState
-
>
SetTriggeringSandboxFlags
(
doc
-
>
GetSandboxFlags
(
)
)
;
loadState
-
>
SetPolicyContainer
(
doc
-
>
GetPolicyContainer
(
)
)
;
if
(
referrerInfo
)
{
loadState
-
>
SetReferrerInfo
(
referrerInfo
)
;
}
loadState
-
>
SetHasValidUserGestureActivation
(
doc
-
>
HasValidTransientUserGestureActivation
(
)
)
;
loadState
-
>
SetTextDirectiveUserActivation
(
doc
-
>
ConsumeTextDirectiveUserActivation
(
)
|
|
loadState
-
>
HasValidUserGestureActivation
(
)
)
;
loadState
-
>
SetTriggeringWindowId
(
doc
-
>
InnerWindowID
(
)
)
;
loadState
-
>
SetTriggeringStorageAccess
(
doc
-
>
UsingStorageAccess
(
)
)
;
loadState
-
>
SetTriggeringClassificationFlags
(
doc
-
>
GetScriptTrackingFlags
(
)
)
;
return
loadState
.
forget
(
)
;
}
void
BrowsingContext
:
:
Navigate
(
nsIURI
*
aURI
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
NavigationHistoryBehavior
aHistoryHandling
bool
aShouldNotForceReplaceInOnLoad
)
{
MOZ_LOG_FMT
(
gNavigationLog
LogLevel
:
:
Debug
"
Navigate
to
{
}
as
{
}
"
*
aURI
aHistoryHandling
)
;
CallerType
callerType
=
aSubjectPrincipal
.
IsSystemPrincipal
(
)
?
CallerType
:
:
System
:
CallerType
:
:
NonSystem
;
nsresult
rv
=
CheckNavigationRateLimit
(
callerType
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
;
}
RefPtr
<
nsDocShellLoadState
>
loadState
=
CheckURLAndCreateLoadState
(
aURI
aSubjectPrincipal
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
loadState
-
>
SetShouldNotForceReplaceInOnLoad
(
aShouldNotForceReplaceInOnLoad
)
;
NavigationHistoryBehavior
historyHandling
=
aHistoryHandling
;
if
(
aHistoryHandling
=
=
NavigationHistoryBehavior
:
:
Auto
)
{
if
(
auto
*
document
=
GetExtantDocument
(
)
)
{
bool
equals
=
false
;
aURI
-
>
Equals
(
document
-
>
GetDocumentURI
(
)
&
equals
)
;
if
(
equals
&
&
document
-
>
GetPrincipal
(
)
)
{
document
-
>
GetPrincipal
(
)
-
>
Equals
(
&
aSubjectPrincipal
&
equals
)
;
}
if
(
equals
)
{
historyHandling
=
NavigationHistoryBehavior
:
:
Replace
;
}
else
{
historyHandling
=
NavigationHistoryBehavior
:
:
Push
;
}
}
}
if
(
historyHandling
=
=
NavigationHistoryBehavior
:
:
Replace
)
{
loadState
-
>
SetLoadType
(
LOAD_STOP_CONTENT_AND_REPLACE
)
;
}
else
{
loadState
-
>
SetLoadType
(
LOAD_STOP_CONTENT
)
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
sourceWindow
=
nsContentUtils
:
:
IncumbentInnerWindow
(
)
;
if
(
sourceWindow
)
{
WindowContext
*
context
=
sourceWindow
-
>
GetWindowContext
(
)
;
loadState
-
>
SetSourceBrowsingContext
(
sourceWindow
-
>
GetBrowsingContext
(
)
)
;
loadState
-
>
SetHasValidUserGestureActivation
(
context
&
&
context
-
>
HasValidTransientUserGestureActivation
(
)
)
;
}
loadState
-
>
SetLoadFlags
(
nsIWebNavigation
:
:
LOAD_FLAGS_NONE
)
;
loadState
-
>
SetFirstParty
(
true
)
;
rv
=
LoadURI
(
loadState
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
if
(
rv
=
=
NS_ERROR_DOM_BAD_CROSS_ORIGIN_URI
&
&
loadState
-
>
URI
(
)
-
>
SchemeIs
(
"
javascript
"
)
)
{
return
;
}
aRv
.
Throw
(
rv
)
;
return
;
}
Document
*
doc
=
GetDocument
(
)
;
if
(
doc
&
&
nsContentUtils
:
:
IsExternalProtocol
(
aURI
)
)
{
doc
-
>
EnsureNotEnteringAndExitFullscreen
(
)
;
}
}
void
BrowsingContext
:
:
DisplayLoadError
(
const
nsAString
&
aURI
)
{
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
DisplayLoadError
"
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
IsDiscarded
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mDocShell
|
|
XRE_IsParentProcess
(
)
)
;
if
(
mDocShell
)
{
bool
didDisplayLoadError
=
false
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
mDocShell
;
docShell
-
>
DisplayLoadError
(
NS_ERROR_MALFORMED_URI
nullptr
PromiseFlatString
(
aURI
)
.
get
(
)
nullptr
&
didDisplayLoadError
)
;
}
else
{
if
(
ContentParent
*
cp
=
Canonical
(
)
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendDisplayLoadError
(
this
PromiseFlatString
(
aURI
)
)
;
}
}
}
WindowProxyHolder
BrowsingContext
:
:
Window
(
)
{
return
WindowProxyHolder
(
Self
(
)
)
;
}
WindowProxyHolder
BrowsingContext
:
:
GetFrames
(
ErrorResult
&
aError
)
{
return
Window
(
)
;
}
void
BrowsingContext
:
:
Close
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
if
(
mIsDiscarded
)
{
return
;
}
if
(
IsSubframe
(
)
)
{
return
;
}
if
(
GetDOMWindow
(
)
)
{
nsGlobalWindowOuter
:
:
Cast
(
GetDOMWindow
(
)
)
-
>
CloseOuter
(
aCallerType
=
=
CallerType
:
:
System
)
;
return
;
}
MOZ_ALWAYS_SUCCEEDS
(
SetClosed
(
true
)
)
;
if
(
ContentChild
*
cc
=
ContentChild
:
:
GetSingleton
(
)
)
{
cc
-
>
SendWindowClose
(
this
aCallerType
=
=
CallerType
:
:
System
)
;
}
else
if
(
ContentParent
*
cp
=
Canonical
(
)
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendWindowClose
(
this
aCallerType
=
=
CallerType
:
:
System
)
;
}
}
template
<
typename
FuncT
>
inline
bool
ApplyToDocumentsForPopup
(
Document
*
doc
FuncT
func
)
{
if
(
func
(
doc
)
)
{
return
true
;
}
if
(
!
doc
-
>
IsInitialDocument
(
)
)
{
return
false
;
}
Document
*
parentDoc
=
doc
-
>
GetInProcessParentDocument
(
)
;
if
(
!
parentDoc
|
|
!
parentDoc
-
>
NodePrincipal
(
)
-
>
Equals
(
doc
-
>
NodePrincipal
(
)
)
)
{
return
false
;
}
return
func
(
parentDoc
)
;
}
PopupBlocker
:
:
PopupControlState
BrowsingContext
:
:
RevisePopupAbuseLevel
(
PopupBlocker
:
:
PopupControlState
aControl
)
{
if
(
!
IsContent
(
)
)
{
return
PopupBlocker
:
:
openAllowed
;
}
RefPtr
<
Document
>
doc
=
GetExtantDocument
(
)
;
PopupBlocker
:
:
PopupControlState
abuse
=
aControl
;
switch
(
abuse
)
{
case
PopupBlocker
:
:
openControlled
:
case
PopupBlocker
:
:
openOverridden
:
if
(
IsPopupAllowed
(
)
)
{
abuse
=
PopupBlocker
:
:
PopupControlState
(
abuse
-
1
)
;
}
break
;
case
PopupBlocker
:
:
openAbused
:
if
(
IsPopupAllowed
(
)
|
|
(
doc
&
&
doc
-
>
HasValidTransientUserGestureActivation
(
)
)
)
{
abuse
=
PopupBlocker
:
:
openControlled
;
}
break
;
case
PopupBlocker
:
:
openAllowed
:
break
;
case
PopupBlocker
:
:
openBlocked
:
if
(
IsPopupAllowed
(
)
|
|
(
doc
&
&
doc
-
>
HasValidTransientUserGestureActivation
(
)
)
)
{
abuse
=
PopupBlocker
:
:
openControlled
;
}
break
;
default
:
NS_WARNING
(
"
Strange
PopupControlState
!
"
)
;
}
if
(
abuse
=
=
PopupBlocker
:
:
openAbused
|
|
abuse
=
=
PopupBlocker
:
:
openBlocked
|
|
abuse
=
=
PopupBlocker
:
:
openControlled
)
{
int32_t
popupMax
=
StaticPrefs
:
:
dom_popup_maximum
(
)
;
if
(
popupMax
>
=
0
&
&
PopupBlocker
:
:
GetOpenPopupSpamCount
(
)
>
=
(
uint32_t
)
popupMax
)
{
abuse
=
PopupBlocker
:
:
openOverridden
;
}
}
if
(
doc
)
{
auto
ConsumeTransientUserActivationForMultiplePopupBlocking
=
[
&
]
(
)
-
>
bool
{
return
ApplyToDocumentsForPopup
(
doc
[
]
(
Document
*
doc
)
{
return
doc
-
>
ConsumeTransientUserGestureActivation
(
)
;
}
)
;
}
;
if
(
(
abuse
=
=
PopupBlocker
:
:
openAllowed
|
|
abuse
=
=
PopupBlocker
:
:
openControlled
)
&
&
!
IsPopupAllowed
(
)
&
&
!
ConsumeTransientUserActivationForMultiplePopupBlocking
(
)
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
"
DOM
"
_ns
doc
nsContentUtils
:
:
eDOM_PROPERTIES
"
MultiplePopupsBlockedNoUserActivation
"
)
;
abuse
=
PopupBlocker
:
:
openBlocked
;
}
}
return
abuse
;
}
void
BrowsingContext
:
:
GetUserActivationModifiersForPopup
(
UserActivation
:
:
Modifiers
*
aModifiers
)
{
RefPtr
<
Document
>
doc
=
GetExtantDocument
(
)
;
if
(
doc
)
{
(
void
)
ApplyToDocumentsForPopup
(
doc
[
&
]
(
Document
*
doc
)
{
return
doc
-
>
GetTransientUserGestureActivationModifiers
(
aModifiers
)
;
}
)
;
}
}
void
BrowsingContext
:
:
IncrementHistoryEntryCountForBrowsingContext
(
)
{
Unused
<
<
SetHistoryEntryCount
(
GetHistoryEntryCount
(
)
+
1
)
;
}
std
:
:
tuple
<
bool
bool
>
BrowsingContext
:
:
CanFocusCheck
(
CallerType
aCallerType
)
{
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
{
false
false
}
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
caller
=
do_QueryInterface
(
GetEntryGlobal
(
)
)
;
BrowsingContext
*
callerBC
=
caller
?
caller
-
>
GetBrowsingContext
(
)
:
nullptr
;
RefPtr
<
BrowsingContext
>
openerBC
=
GetOpener
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
openerBC
|
|
openerBC
-
>
Group
(
)
=
=
Group
(
)
)
;
bool
canFocus
=
aCallerType
=
=
CallerType
:
:
System
|
|
!
Preferences
:
:
GetBool
(
"
dom
.
disable_window_flip
"
true
)
;
if
(
!
canFocus
&
&
openerBC
=
=
callerBC
)
{
canFocus
=
(
callerBC
?
callerBC
:
this
)
-
>
RevisePopupAbuseLevel
(
PopupBlocker
:
:
GetPopupControlState
(
)
)
<
PopupBlocker
:
:
openBlocked
;
}
bool
isActive
=
false
;
if
(
XRE_IsParentProcess
(
)
)
{
CanonicalBrowsingContext
*
chromeTop
=
Canonical
(
)
-
>
TopCrossChromeBoundary
(
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
activeWindow
=
fm
-
>
GetActiveWindow
(
)
;
isActive
=
activeWindow
=
=
chromeTop
-
>
GetDOMWindow
(
)
;
}
else
{
isActive
=
fm
-
>
GetActiveBrowsingContext
(
)
=
=
Top
(
)
;
}
return
{
canFocus
isActive
}
;
}
void
BrowsingContext
:
:
Focus
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
auto
[
canFocus
isActive
]
=
CanFocusCheck
(
aCallerType
)
;
if
(
!
(
canFocus
|
|
isActive
)
)
{
return
;
}
if
(
mEmbedderElement
)
{
nsContentUtils
:
:
RequestFrameFocus
(
*
mEmbedderElement
true
aCallerType
)
;
}
uint64_t
actionId
=
nsFocusManager
:
:
GenerateFocusActionId
(
)
;
if
(
ContentChild
*
cc
=
ContentChild
:
:
GetSingleton
(
)
)
{
cc
-
>
SendWindowFocus
(
this
aCallerType
actionId
)
;
}
else
if
(
ContentParent
*
cp
=
Canonical
(
)
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendWindowFocus
(
this
aCallerType
actionId
)
;
}
}
bool
BrowsingContext
:
:
CanBlurCheck
(
CallerType
aCallerType
)
{
return
aCallerType
=
=
CallerType
:
:
System
|
|
!
Preferences
:
:
GetBool
(
"
dom
.
disable_window_flip
"
true
)
;
}
void
BrowsingContext
:
:
Blur
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
if
(
!
CanBlurCheck
(
aCallerType
)
)
{
return
;
}
if
(
ContentChild
*
cc
=
ContentChild
:
:
GetSingleton
(
)
)
{
cc
-
>
SendWindowBlur
(
this
aCallerType
)
;
}
else
if
(
ContentParent
*
cp
=
Canonical
(
)
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendWindowBlur
(
this
aCallerType
)
;
}
}
Nullable
<
WindowProxyHolder
>
BrowsingContext
:
:
GetWindow
(
)
{
if
(
XRE_IsParentProcess
(
)
&
&
!
IsInProcess
(
)
)
{
return
nullptr
;
}
return
WindowProxyHolder
(
this
)
;
}
Nullable
<
WindowProxyHolder
>
BrowsingContext
:
:
GetTop
(
ErrorResult
&
aError
)
{
if
(
mIsDiscarded
)
{
return
nullptr
;
}
return
WindowProxyHolder
(
Top
(
)
)
;
}
void
BrowsingContext
:
:
GetOpener
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aOpener
ErrorResult
&
aError
)
const
{
RefPtr
<
BrowsingContext
>
opener
=
GetOpener
(
)
;
if
(
!
opener
)
{
aOpener
.
setNull
(
)
;
return
;
}
if
(
!
ToJSValue
(
aCx
WindowProxyHolder
(
opener
)
aOpener
)
)
{
aError
.
NoteJSContextException
(
aCx
)
;
}
}
Nullable
<
WindowProxyHolder
>
BrowsingContext
:
:
GetParent
(
ErrorResult
&
aError
)
{
if
(
mIsDiscarded
)
{
return
nullptr
;
}
if
(
GetParent
(
)
)
{
return
WindowProxyHolder
(
GetParent
(
)
)
;
}
return
WindowProxyHolder
(
this
)
;
}
void
BrowsingContext
:
:
PostMessageMoz
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
nsAString
&
aTargetOrigin
const
Sequence
<
JSObject
*
>
&
aTransfer
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
if
(
mIsDiscarded
)
{
return
;
}
RefPtr
<
BrowsingContext
>
sourceBc
;
PostMessageData
data
;
data
.
targetOrigin
(
)
=
aTargetOrigin
;
data
.
subjectPrincipal
(
)
=
&
aSubjectPrincipal
;
RefPtr
<
nsGlobalWindowInner
>
callerInnerWindow
;
nsAutoCString
scriptLocation
;
if
(
!
nsGlobalWindowOuter
:
:
GatherPostMessageData
(
aCx
aTargetOrigin
getter_AddRefs
(
sourceBc
)
data
.
origin
(
)
getter_AddRefs
(
data
.
targetOriginURI
(
)
)
getter_AddRefs
(
data
.
callerPrincipal
(
)
)
getter_AddRefs
(
callerInnerWindow
)
getter_AddRefs
(
data
.
callerURI
(
)
)
nullptr
&
scriptLocation
aError
)
)
{
return
;
}
if
(
sourceBc
&
&
sourceBc
-
>
IsDiscarded
(
)
)
{
return
;
}
data
.
source
(
)
=
sourceBc
;
data
.
isFromPrivateWindow
(
)
=
callerInnerWindow
&
&
nsScriptErrorBase
:
:
ComputeIsFromPrivateWindow
(
callerInnerWindow
)
;
data
.
innerWindowId
(
)
=
callerInnerWindow
?
callerInnerWindow
-
>
WindowID
(
)
:
0
;
data
.
scriptLocation
(
)
=
scriptLocation
;
JS
:
:
Rooted
<
JS
:
:
Value
>
transferArray
(
aCx
)
;
aError
=
nsContentUtils
:
:
CreateJSValueFromSequenceOfObject
(
aCx
aTransfer
&
transferArray
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
JS
:
:
CloneDataPolicy
clonePolicy
;
if
(
callerInnerWindow
&
&
callerInnerWindow
-
>
IsSharedMemoryAllowed
(
)
)
{
clonePolicy
.
allowSharedMemoryObjects
(
)
;
}
ipc
:
:
StructuredCloneData
message
=
ipc
:
:
StructuredCloneData
(
StructuredCloneHolder
:
:
StructuredCloneScope
:
:
UnknownDestination
StructuredCloneHolder
:
:
TransferringSupported
)
;
message
.
Write
(
aCx
aMessage
transferArray
clonePolicy
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
ClonedOrErrorMessageData
messageData
;
if
(
ContentChild
*
cc
=
ContentChild
:
:
GetSingleton
(
)
)
{
if
(
message
.
CloneScope
(
)
=
=
StructuredCloneHolder
:
:
StructuredCloneScope
:
:
DifferentProcess
)
{
ClonedMessageData
clonedMessageData
;
if
(
!
message
.
BuildClonedMessageData
(
clonedMessageData
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
messageData
=
std
:
:
move
(
clonedMessageData
)
;
}
else
{
MOZ_ASSERT
(
message
.
CloneScope
(
)
=
=
StructuredCloneHolder
:
:
StructuredCloneScope
:
:
SameProcess
)
;
messageData
=
ErrorMessageData
(
)
;
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
"
DOM
Window
"
_ns
callerInnerWindow
?
callerInnerWindow
-
>
GetDocument
(
)
:
nullptr
nsContentUtils
:
:
eDOM_PROPERTIES
"
PostMessageSharedMemoryObjectToCrossOriginWarning
"
)
;
}
cc
-
>
SendWindowPostMessage
(
this
messageData
data
)
;
}
else
if
(
ContentParent
*
cp
=
Canonical
(
)
-
>
GetContentParent
(
)
)
{
if
(
message
.
CloneScope
(
)
=
=
StructuredCloneHolder
:
:
StructuredCloneScope
:
:
DifferentProcess
)
{
ClonedMessageData
clonedMessageData
;
if
(
!
message
.
BuildClonedMessageData
(
clonedMessageData
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
messageData
=
std
:
:
move
(
clonedMessageData
)
;
}
else
{
MOZ_ASSERT
(
message
.
CloneScope
(
)
=
=
StructuredCloneHolder
:
:
StructuredCloneScope
:
:
SameProcess
)
;
messageData
=
ErrorMessageData
(
)
;
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
"
DOM
Window
"
_ns
callerInnerWindow
?
callerInnerWindow
-
>
GetDocument
(
)
:
nullptr
nsContentUtils
:
:
eDOM_PROPERTIES
"
PostMessageSharedMemoryObjectToCrossOriginWarning
"
)
;
}
Unused
<
<
cp
-
>
SendWindowPostMessage
(
this
messageData
data
)
;
}
}
void
BrowsingContext
:
:
PostMessageMoz
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
WindowPostMessageOptions
&
aOptions
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
PostMessageMoz
(
aCx
aMessage
aOptions
.
mTargetOrigin
aOptions
.
mTransfer
aSubjectPrincipal
aError
)
;
}
void
BrowsingContext
:
:
SendCommitTransaction
(
ContentParent
*
aParent
const
BaseTransaction
&
aTxn
uint64_t
aEpoch
)
{
Unused
<
<
aParent
-
>
SendCommitBrowsingContextTransaction
(
this
aTxn
aEpoch
)
;
}
void
BrowsingContext
:
:
SendCommitTransaction
(
ContentChild
*
aChild
const
BaseTransaction
&
aTxn
uint64_t
aEpoch
)
{
aChild
-
>
SendCommitBrowsingContextTransaction
(
this
aTxn
aEpoch
)
;
}
BrowsingContext
:
:
IPCInitializer
BrowsingContext
:
:
GetIPCInitializer
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mEverAttached
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mType
=
=
Type
:
:
Content
)
;
IPCInitializer
init
;
init
.
mId
=
Id
(
)
;
init
.
mParentId
=
mParentWindow
?
mParentWindow
-
>
Id
(
)
:
0
;
init
.
mWindowless
=
mWindowless
;
init
.
mUseRemoteTabs
=
mUseRemoteTabs
;
init
.
mUseRemoteSubframes
=
mUseRemoteSubframes
;
init
.
mCreatedDynamically
=
mCreatedDynamically
;
init
.
mChildOffset
=
mChildOffset
;
init
.
mOriginAttributes
=
mOriginAttributes
;
if
(
mChildSessionHistory
&
&
mozilla
:
:
SessionHistoryInParent
(
)
)
{
init
.
mSessionHistoryIndex
=
mChildSessionHistory
-
>
Index
(
)
;
init
.
mSessionHistoryCount
=
mChildSessionHistory
-
>
Count
(
)
;
}
init
.
mRequestContextId
=
mRequestContextId
;
init
.
mFields
=
mFields
.
RawValues
(
)
;
return
init
;
}
already_AddRefed
<
WindowContext
>
BrowsingContext
:
:
IPCInitializer
:
:
GetParent
(
)
{
RefPtr
<
WindowContext
>
parent
;
if
(
mParentId
!
=
0
)
{
parent
=
WindowContext
:
:
GetById
(
mParentId
)
;
MOZ_RELEASE_ASSERT
(
parent
)
;
}
return
parent
.
forget
(
)
;
}
already_AddRefed
<
BrowsingContext
>
BrowsingContext
:
:
IPCInitializer
:
:
GetOpener
(
)
{
RefPtr
<
BrowsingContext
>
opener
;
if
(
GetOpenerId
(
)
!
=
0
)
{
opener
=
BrowsingContext
:
:
Get
(
GetOpenerId
(
)
)
;
MOZ_RELEASE_ASSERT
(
opener
)
;
}
return
opener
.
forget
(
)
;
}
void
BrowsingContext
:
:
StartDelayedAutoplayMediaComponents
(
)
{
if
(
!
mDocShell
)
{
return
;
}
AUTOPLAY_LOG
(
"
%
s
:
StartDelayedAutoplayMediaComponents
for
bc
0x
%
08
"
PRIx64
XRE_IsParentProcess
(
)
?
"
Parent
"
:
"
Child
"
Id
(
)
)
;
mDocShell
-
>
StartDelayedAutoplayMediaComponents
(
)
;
}
nsresult
BrowsingContext
:
:
ResetGVAutoplayRequestStatus
(
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Should
only
set
GVAudibleAutoplayRequestStatus
in
the
top
-
level
"
"
browsing
context
"
)
;
Transaction
txn
;
txn
.
SetGVAudibleAutoplayRequestStatus
(
GVAutoplayRequestStatus
:
:
eUNKNOWN
)
;
txn
.
SetGVInaudibleAutoplayRequestStatus
(
GVAutoplayRequestStatus
:
:
eUNKNOWN
)
;
return
txn
.
Commit
(
this
)
;
}
template
<
typename
Callback
>
void
BrowsingContext
:
:
WalkPresContexts
(
Callback
&
&
aCallback
)
{
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
if
(
nsIDocShell
*
shell
=
aContext
-
>
GetDocShell
(
)
)
{
if
(
RefPtr
pc
=
shell
-
>
GetPresContext
(
)
)
{
aCallback
(
pc
.
get
(
)
)
;
}
}
}
)
;
}
void
BrowsingContext
:
:
PresContextAffectingFieldChanged
(
)
{
WalkPresContexts
(
[
&
]
(
nsPresContext
*
aPc
)
{
aPc
-
>
RecomputeBrowsingContextDependentData
(
)
;
}
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_SessionStoreEpoch
>
uint32_t
aOldValue
)
{
if
(
!
mCurrentWindowContext
)
{
return
;
}
SessionStoreChild
*
sessionStoreChild
=
SessionStoreChild
:
:
From
(
mCurrentWindowContext
-
>
GetWindowGlobalChild
(
)
)
;
if
(
!
sessionStoreChild
)
{
return
;
}
sessionStoreChild
-
>
SetEpoch
(
GetSessionStoreEpoch
(
)
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_GVAudibleAutoplayRequestStatus
>
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Should
only
set
GVAudibleAutoplayRequestStatus
in
the
top
-
level
"
"
browsing
context
"
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_GVInaudibleAutoplayRequestStatus
>
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Should
only
set
GVAudibleAutoplayRequestStatus
in
the
top
-
level
"
"
browsing
context
"
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_ExplicitActive
>
const
ExplicitActiveStatus
&
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
IsTop
(
)
&
&
!
aSource
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_ExplicitActive
>
ExplicitActiveStatus
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
const
bool
isActive
=
IsActive
(
)
;
const
bool
wasActive
=
[
&
]
{
if
(
aOldValue
!
=
ExplicitActiveStatus
:
:
None
)
{
return
aOldValue
=
=
ExplicitActiveStatus
:
:
Active
;
}
return
GetParent
(
)
&
&
GetParent
(
)
-
>
IsActive
(
)
;
}
(
)
;
if
(
isActive
=
=
wasActive
)
{
return
;
}
Group
(
)
-
>
UpdateToplevelsSuspendedIfNeeded
(
)
;
if
(
XRE_IsParentProcess
(
)
)
{
if
(
BrowserParent
*
bp
=
Canonical
(
)
-
>
GetBrowserParent
(
)
)
{
bp
-
>
RecomputeProcessPriority
(
)
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
if
(
a11y
:
:
Compatibility
:
:
IsDolphin
(
)
)
{
if
(
a11y
:
:
DocAccessibleParent
*
tabDoc
=
bp
-
>
GetTopLevelDocAccessible
(
)
)
{
HWND
window
=
tabDoc
-
>
GetEmulatedWindowHandle
(
)
;
MOZ_ASSERT
(
window
)
;
if
(
window
)
{
if
(
isActive
)
{
a11y
:
:
nsWinUtils
:
:
ShowNativeWindow
(
window
)
;
}
else
{
a11y
:
:
nsWinUtils
:
:
HideNativeWindow
(
window
)
;
}
}
}
}
#
endif
}
auto
manageTopDescendant
=
[
&
]
(
auto
*
aChild
)
{
if
(
!
aChild
-
>
ManuallyManagesActiveness
(
)
)
{
aChild
-
>
SetIsActiveInternal
(
isActive
IgnoreErrors
(
)
)
;
if
(
BrowserParent
*
bp
=
aChild
-
>
GetBrowserParent
(
)
)
{
bp
-
>
SetRenderLayers
(
isActive
)
;
}
}
return
CallState
:
:
Continue
;
}
;
Canonical
(
)
-
>
CallOnTopDescendants
(
manageTopDescendant
CanonicalBrowsingContext
:
:
TopDescendantKind
:
:
NonNested
)
;
}
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
if
(
nsCOMPtr
<
nsIDocShell
>
ds
=
aContext
-
>
GetDocShell
(
)
)
{
if
(
auto
*
bc
=
BrowserChild
:
:
GetFrom
(
ds
)
)
{
bc
-
>
UpdateVisibility
(
)
;
}
nsDocShell
:
:
Cast
(
ds
)
-
>
ActivenessMaybeChanged
(
)
;
}
}
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_InRDMPane
>
bool
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Should
only
set
InRDMPane
in
the
top
-
level
browsing
context
"
)
;
if
(
GetInRDMPane
(
)
=
=
aOldValue
)
{
return
;
}
if
(
!
GetInRDMPane
(
)
)
{
ResetOrientationOverride
(
)
;
}
PresContextAffectingFieldChanged
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_HasOrientationOverride
>
bool
aOldValue
)
{
bool
hasOrientationOverride
=
GetHasOrientationOverride
(
)
;
OrientationType
type
=
GetCurrentOrientationType
(
)
;
float
angle
=
GetCurrentOrientationAngle
(
)
;
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aBrowsingContext
)
{
if
(
RefPtr
<
WindowContext
>
windowContext
=
aBrowsingContext
-
>
GetCurrentWindowContext
(
)
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
windowContext
-
>
GetInnerWindow
(
)
)
{
ScreenOrientation
*
orientation
=
nsGlobalWindowInner
:
:
Cast
(
window
)
-
>
Screen
(
)
-
>
Orientation
(
)
;
float
screenOrientationAngle
=
orientation
-
>
DeviceAngle
(
CallerType
:
:
System
)
;
OrientationType
screenOrientationType
=
orientation
-
>
DeviceType
(
CallerType
:
:
System
)
;
bool
overrideIsDifferentThanDevice
=
screenOrientationType
!
=
type
|
|
screenOrientationAngle
!
=
angle
;
if
(
!
hasOrientationOverride
&
&
aOldValue
)
{
Unused
<
<
aBrowsingContext
-
>
SetCurrentOrientation
(
screenOrientationType
screenOrientationAngle
)
;
}
else
if
(
!
aBrowsingContext
-
>
IsTop
(
)
)
{
Unused
<
<
aBrowsingContext
-
>
SetCurrentOrientation
(
type
angle
)
;
}
orientation
-
>
MaybeDispatchEventsForOverride
(
aBrowsingContext
aOldValue
overrideIsDifferentThanDevice
)
;
}
}
}
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_ForceDesktopViewport
>
bool
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Should
only
set
in
the
top
-
level
browsing
context
"
)
;
if
(
ForceDesktopViewport
(
)
=
=
aOldValue
)
{
return
;
}
PresContextAffectingFieldChanged
(
)
;
if
(
nsIDocShell
*
shell
=
GetDocShell
(
)
)
{
if
(
RefPtr
ps
=
shell
-
>
GetPresShell
(
)
)
{
ps
-
>
MaybeRecreateMobileViewportManager
(
true
)
;
}
}
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_PageAwakeRequestCount
>
uint32_t
aNewValue
ContentParent
*
aSource
)
{
return
IsTop
(
)
&
&
XRE_IsParentProcess
(
)
&
&
!
aSource
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_PageAwakeRequestCount
>
uint32_t
aOldValue
)
{
if
(
!
IsTop
(
)
|
|
aOldValue
=
=
GetPageAwakeRequestCount
(
)
)
{
return
;
}
Group
(
)
-
>
UpdateToplevelsSuspendedIfNeeded
(
)
;
}
auto
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_AllowJavascript
>
bool
aValue
ContentParent
*
aSource
)
-
>
CanSetResult
{
if
(
mozilla
:
:
SessionHistoryInParent
(
)
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
?
CanSetResult
:
:
Allow
:
CanSetResult
:
:
Deny
;
}
return
LegacyRevertIfNotOwningOrParentProcess
(
aSource
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_AllowJavascript
>
bool
aOldValue
)
{
RecomputeCanExecuteScripts
(
)
;
}
void
BrowsingContext
:
:
RecomputeCanExecuteScripts
(
)
{
const
bool
old
=
mCanExecuteScripts
;
if
(
!
AllowJavascript
(
)
)
{
mCanExecuteScripts
=
false
;
}
else
if
(
GetParentWindowContext
(
)
)
{
mCanExecuteScripts
=
GetParentWindowContext
(
)
-
>
CanExecuteScripts
(
)
;
}
else
{
mCanExecuteScripts
=
true
;
}
if
(
old
!
=
mCanExecuteScripts
)
{
for
(
WindowContext
*
wc
:
GetWindowContexts
(
)
)
{
wc
-
>
RecomputeCanExecuteScripts
(
)
;
}
}
}
bool
BrowsingContext
:
:
InactiveForSuspend
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_suspend_inactive_enabled
(
)
)
{
return
false
;
}
return
!
IsActive
(
)
&
&
GetPageAwakeRequestCount
(
)
=
=
0
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_TouchEventsOverrideInternal
>
dom
:
:
TouchEventsOverride
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_TouchEventsOverrideInternal
>
dom
:
:
TouchEventsOverride
&
&
aOldValue
)
{
if
(
GetTouchEventsOverrideInternal
(
)
=
=
aOldValue
)
{
return
;
}
WalkPresContexts
(
[
&
]
(
nsPresContext
*
aPc
)
{
aPc
-
>
MediaFeatureValuesChanged
(
{
MediaFeatureChangeReason
:
:
SystemMetricsChange
}
MediaFeatureChangePropagation
:
:
JustThisDocument
)
;
}
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_EmbedderColorSchemes
>
EmbedderColorSchemes
&
&
aOldValue
)
{
if
(
GetEmbedderColorSchemes
(
)
=
=
aOldValue
)
{
return
;
}
PresContextAffectingFieldChanged
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_PrefersColorSchemeOverride
>
dom
:
:
PrefersColorSchemeOverride
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
if
(
PrefersColorSchemeOverride
(
)
=
=
aOldValue
)
{
return
;
}
PresContextAffectingFieldChanged
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_ForcedColorsOverride
>
dom
:
:
ForcedColorsOverride
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
if
(
ForcedColorsOverride
(
)
=
=
aOldValue
)
{
return
;
}
PresContextAffectingFieldChanged
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_LanguageOverride
>
nsCString
&
&
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
const
nsCString
&
languageOverride
=
GetLanguageOverride
(
)
;
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aBrowsingContext
)
{
if
(
RefPtr
<
WindowContext
>
windowContext
=
aBrowsingContext
-
>
GetCurrentWindowContext
(
)
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
windowContext
-
>
GetInnerWindow
(
)
)
{
JSObject
*
global
=
nsGlobalWindowInner
:
:
Cast
(
window
)
-
>
GetGlobalJSObject
(
)
;
JS
:
:
Realm
*
realm
=
JS
:
:
GetObjectRealmOrNull
(
global
)
;
if
(
mDefaultLocale
=
=
nullptr
)
{
AutoJSAPI
jsapi
;
if
(
jsapi
.
Init
(
window
)
)
{
JSContext
*
context
=
jsapi
.
cx
(
)
;
mDefaultLocale
=
JS_GetDefaultLocale
(
context
)
;
}
}
if
(
languageOverride
.
IsEmpty
(
)
)
{
JS
:
:
SetRealmLocaleOverride
(
realm
mDefaultLocale
.
get
(
)
)
;
mDefaultLocale
=
nullptr
;
}
else
{
JS
:
:
SetRealmLocaleOverride
(
realm
PromiseFlatCString
(
languageOverride
)
.
get
(
)
)
;
}
}
}
}
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_MediumOverride
>
nsString
&
&
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
if
(
GetMediumOverride
(
)
=
=
aOldValue
)
{
return
;
}
PresContextAffectingFieldChanged
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_DisplayMode
>
enum
DisplayMode
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
if
(
GetDisplayMode
(
)
=
=
aOldValue
)
{
return
;
}
WalkPresContexts
(
[
&
]
(
nsPresContext
*
aPc
)
{
aPc
-
>
MediaFeatureValuesChanged
(
{
MediaFeatureChangeReason
:
:
DisplayModeChange
}
MediaFeatureChangePropagation
:
:
JustThisDocument
)
;
}
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_Muted
>
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Set
muted
flag
on
non
top
-
level
context
!
"
)
;
USER_ACTIVATION_LOG
(
"
Set
audio
muted
%
d
for
%
s
browsing
context
0x
%
08
"
PRIx64
GetMuted
(
)
XRE_IsParentProcess
(
)
?
"
Parent
"
:
"
Child
"
Id
(
)
)
;
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
nsPIDOMWindowOuter
*
win
=
aContext
-
>
GetDOMWindow
(
)
;
if
(
win
)
{
win
-
>
RefreshMediaElementsVolume
(
)
;
}
}
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_IsAppTab
>
const
bool
&
aValue
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
&
&
IsTop
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_HasSiblings
>
const
bool
&
aValue
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
&
&
IsTop
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_ShouldDelayMediaFromStart
>
const
bool
&
aValue
ContentParent
*
aSource
)
{
return
IsTop
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_ShouldDelayMediaFromStart
>
bool
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Set
attribute
on
non
top
-
level
context
!
"
)
;
if
(
aOldValue
=
=
GetShouldDelayMediaFromStart
(
)
)
{
return
;
}
if
(
!
GetShouldDelayMediaFromStart
(
)
)
{
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
if
(
nsPIDOMWindowOuter
*
win
=
aContext
-
>
GetDOMWindow
(
)
)
{
win
-
>
ActivateMediaComponents
(
)
;
}
}
)
;
}
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_OverrideDPPX
>
const
float
&
aValue
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
&
&
IsTop
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_OverrideDPPX
>
float
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
if
(
GetOverrideDPPX
(
)
=
=
aOldValue
)
{
return
;
}
PresContextAffectingFieldChanged
(
)
;
}
void
BrowsingContext
:
:
SetCustomUserAgent
(
const
nsAString
&
aUserAgent
ErrorResult
&
aRv
)
{
Top
(
)
-
>
SetUserAgentOverride
(
aUserAgent
aRv
)
;
}
nsresult
BrowsingContext
:
:
SetCustomUserAgent
(
const
nsAString
&
aUserAgent
)
{
return
Top
(
)
-
>
SetUserAgentOverride
(
aUserAgent
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_UserAgentOverride
>
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
nsIDocShell
*
shell
=
aContext
-
>
GetDocShell
(
)
;
if
(
shell
)
{
shell
-
>
ClearCachedUserAgent
(
)
;
}
if
(
nsCOMPtr
<
Document
>
doc
=
aContext
-
>
GetExtantDocument
(
)
)
{
if
(
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
doc
-
>
GetChannel
(
)
)
)
{
Unused
<
<
httpChannel
-
>
SetIsUserAgentHeaderOutdated
(
true
)
;
}
}
}
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_IsInBFCache
>
bool
ContentParent
*
aSource
)
{
return
IsTop
(
)
&
&
!
aSource
&
&
mozilla
:
:
BFCacheInParent
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_IsInBFCache
>
)
{
MOZ_RELEASE_ASSERT
(
mozilla
:
:
BFCacheInParent
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
IsTop
(
)
)
;
const
bool
isInBFCache
=
GetIsInBFCache
(
)
;
if
(
!
isInBFCache
)
{
UpdateCurrentTopByBrowserId
(
this
)
;
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
aContext
-
>
mIsInBFCache
=
false
;
nsCOMPtr
<
nsIDocShell
>
shell
=
aContext
-
>
GetDocShell
(
)
;
if
(
shell
)
{
nsDocShell
:
:
Cast
(
shell
)
-
>
ThawFreezeNonRecursive
(
true
)
;
}
}
)
;
}
if
(
isInBFCache
&
&
XRE_IsContentProcess
(
)
&
&
mDocShell
)
{
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
MaybeDisconnectChildListenersOnPageHide
(
)
;
}
if
(
isInBFCache
)
{
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
nsCOMPtr
<
nsIDocShell
>
shell
=
aContext
-
>
GetDocShell
(
)
;
if
(
shell
)
{
nsDocShell
:
:
Cast
(
shell
)
-
>
FirePageHideShowNonRecursive
(
false
)
;
}
}
)
;
}
else
{
PostOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
nsCOMPtr
<
nsIDocShell
>
shell
=
aContext
-
>
GetDocShell
(
)
;
if
(
shell
)
{
nsDocShell
:
:
Cast
(
shell
)
-
>
FirePageHideShowNonRecursive
(
true
)
;
}
}
)
;
}
if
(
isInBFCache
)
{
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
nsCOMPtr
<
nsIDocShell
>
shell
=
aContext
-
>
GetDocShell
(
)
;
if
(
shell
)
{
nsDocShell
:
:
Cast
(
shell
)
-
>
ThawFreezeNonRecursive
(
false
)
;
if
(
nsPresContext
*
pc
=
shell
-
>
GetPresContext
(
)
)
{
pc
-
>
EventStateManager
(
)
-
>
ResetHoverState
(
)
;
}
}
aContext
-
>
mIsInBFCache
=
true
;
Document
*
doc
=
aContext
-
>
GetDocument
(
)
;
if
(
doc
)
{
doc
-
>
NotifyActivityChanged
(
)
;
}
}
)
;
if
(
XRE_IsParentProcess
(
)
)
{
if
(
mCurrentWindowContext
&
&
mCurrentWindowContext
-
>
Canonical
(
)
-
>
Fullscreen
(
)
)
{
mCurrentWindowContext
-
>
Canonical
(
)
-
>
ExitTopChromeDocumentFullscreen
(
)
;
}
}
}
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_IsSyntheticDocumentContainer
>
)
{
if
(
WindowContext
*
parentWindowContext
=
GetParentWindowContext
(
)
)
{
parentWindowContext
-
>
UpdateChildSynthetic
(
this
GetIsSyntheticDocumentContainer
(
)
)
;
}
}
void
BrowsingContext
:
:
SetCustomPlatform
(
const
nsAString
&
aPlatform
ErrorResult
&
aRv
)
{
Top
(
)
-
>
SetPlatformOverride
(
aPlatform
aRv
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_PlatformOverride
>
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
nsIDocShell
*
shell
=
aContext
-
>
GetDocShell
(
)
;
if
(
shell
)
{
shell
-
>
ClearCachedPlatform
(
)
;
}
}
)
;
}
auto
BrowsingContext
:
:
LegacyRevertIfNotOwningOrParentProcess
(
ContentParent
*
aSource
)
-
>
CanSetResult
{
if
(
aSource
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
Canonical
(
)
-
>
IsOwnedByProcess
(
aSource
-
>
ChildID
(
)
)
)
{
return
CanSetResult
:
:
Revert
;
}
}
else
if
(
!
IsInProcess
(
)
&
&
!
XRE_IsParentProcess
(
)
)
{
return
CanSetResult
:
:
Deny
;
}
return
CanSetResult
:
:
Allow
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_IsActiveBrowserWindowInternal
>
const
bool
&
aValue
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
&
&
IsTop
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_IsActiveBrowserWindowInternal
>
bool
aOldValue
)
{
bool
isActivateEvent
=
GetIsActiveBrowserWindowInternal
(
)
;
PreOrderWalk
(
[
isActivateEvent
]
(
BrowsingContext
*
aContext
)
{
if
(
RefPtr
<
Document
>
doc
=
aContext
-
>
GetExtantDocument
(
)
)
{
doc
-
>
UpdateDocumentStates
(
DocumentState
:
:
WINDOW_INACTIVE
true
)
;
RefPtr
<
nsPIDOMWindowInner
>
win
=
doc
-
>
GetInnerWindow
(
)
;
if
(
win
)
{
RefPtr
<
MediaDevices
>
devices
;
if
(
isActivateEvent
&
&
(
devices
=
win
-
>
GetExtantMediaDevices
(
)
)
)
{
devices
-
>
BrowserWindowBecameActive
(
)
;
}
if
(
XRE_IsContentProcess
(
)
&
&
(
!
aContext
-
>
GetParent
(
)
|
|
!
aContext
-
>
GetParent
(
)
-
>
IsInProcess
(
)
)
)
{
nsContentUtils
:
:
DispatchEventOnlyToChrome
(
doc
nsGlobalWindowInner
:
:
Cast
(
win
)
isActivateEvent
?
u
"
activate
"
_ns
:
u
"
deactivate
"
_ns
CanBubble
:
:
eYes
Cancelable
:
:
eYes
nullptr
)
;
}
}
}
}
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_OpenerPolicy
>
nsILoadInfo
:
:
CrossOriginOpenerPolicy
aPolicy
ContentParent
*
aSource
)
{
return
GetOpenerPolicy
(
)
=
=
aPolicy
|
|
(
GetOpenerPolicy
(
)
!
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
&
&
aPolicy
!
=
nsILoadInfo
:
:
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
)
;
}
auto
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_AllowContentRetargeting
>
const
bool
&
aAllowContentRetargeting
ContentParent
*
aSource
)
-
>
CanSetResult
{
return
LegacyRevertIfNotOwningOrParentProcess
(
aSource
)
;
}
auto
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_AllowContentRetargetingOnChildren
>
const
bool
&
aAllowContentRetargetingOnChildren
ContentParent
*
aSource
)
-
>
CanSetResult
{
return
LegacyRevertIfNotOwningOrParentProcess
(
aSource
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_FullscreenAllowedByOwner
>
const
bool
&
aAllowed
ContentParent
*
aSource
)
{
return
CheckOnlyEmbedderCanSet
(
aSource
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_UseErrorPages
>
const
bool
&
aUseErrorPages
ContentParent
*
aSource
)
{
return
CheckOnlyEmbedderCanSet
(
aSource
)
;
}
TouchEventsOverride
BrowsingContext
:
:
TouchEventsOverride
(
)
const
{
for
(
const
auto
*
bc
=
this
;
bc
;
bc
=
bc
-
>
GetParent
(
)
)
{
auto
tev
=
bc
-
>
GetTouchEventsOverrideInternal
(
)
;
if
(
tev
!
=
dom
:
:
TouchEventsOverride
:
:
None
)
{
return
tev
;
}
}
return
dom
:
:
TouchEventsOverride
:
:
None
;
}
bool
BrowsingContext
:
:
TargetTopLevelLinkClicksToBlank
(
)
const
{
return
Top
(
)
-
>
GetTargetTopLevelLinkClicksToBlankInternal
(
)
;
}
bool
BrowsingContext
:
:
WatchedByDevTools
(
)
{
return
Top
(
)
-
>
GetWatchedByDevToolsInternal
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_WatchedByDevToolsInternal
>
const
bool
&
aWatchedByDevTools
ContentParent
*
aSource
)
{
return
IsTop
(
)
;
}
void
BrowsingContext
:
:
SetWatchedByDevTools
(
bool
aWatchedByDevTools
ErrorResult
&
aRv
)
{
if
(
!
IsTop
(
)
)
{
aRv
.
ThrowInvalidModificationError
(
"
watchedByDevTools
can
only
be
set
on
top
BrowsingContext
"
)
;
return
;
}
SetWatchedByDevToolsInternal
(
aWatchedByDevTools
aRv
)
;
}
RefPtr
<
nsGeolocationService
>
BrowsingContext
:
:
GetGeolocationServiceOverride
(
)
{
return
Top
(
)
-
>
mGeolocationServiceOverride
;
}
void
BrowsingContext
:
:
SetGeolocationServiceOverride
(
const
Optional
<
nsIDOMGeoPosition
*
>
&
aGeolocationOverride
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Should
only
set
GeolocationServiceOverride
in
the
top
browsing
context
"
)
;
if
(
aGeolocationOverride
.
WasPassed
(
)
)
{
if
(
!
mGeolocationServiceOverride
)
{
mGeolocationServiceOverride
=
new
nsGeolocationService
(
)
;
mGeolocationServiceOverride
-
>
Init
(
)
;
}
mGeolocationServiceOverride
-
>
Update
(
aGeolocationOverride
.
Value
(
)
)
;
}
else
if
(
RefPtr
<
nsGeolocationService
>
serviceOverride
=
mGeolocationServiceOverride
.
forget
(
)
)
{
RefPtr
<
nsGeolocationService
>
service
=
nsGeolocationService
:
:
GetGeolocationService
(
)
;
serviceOverride
-
>
MoveLocators
(
service
)
;
}
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_TimezoneOverride
>
nsString
&
&
aOldValue
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aBrowsingContext
)
{
if
(
RefPtr
<
WindowContext
>
windowContext
=
aBrowsingContext
-
>
GetCurrentWindowContext
(
)
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
windowContext
-
>
GetInnerWindow
(
)
)
{
JSObject
*
global
=
nsGlobalWindowInner
:
:
Cast
(
window
)
-
>
GetGlobalJSObject
(
)
;
JS
:
:
Realm
*
realm
=
JS
:
:
GetObjectRealmOrNull
(
global
)
;
if
(
GetTimezoneOverride
(
)
.
IsEmpty
(
)
)
{
JS
:
:
SetRealmTimezoneOverride
(
realm
nullptr
)
;
}
else
{
JS
:
:
SetRealmTimezoneOverride
(
realm
NS_ConvertUTF16toUTF8
(
GetTimezoneOverride
(
)
)
.
get
(
)
)
;
}
}
}
}
)
;
}
auto
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_DefaultLoadFlags
>
const
uint32_t
&
aDefaultLoadFlags
ContentParent
*
aSource
)
-
>
CanSetResult
{
return
LegacyRevertIfNotOwningOrParentProcess
(
aSource
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_DefaultLoadFlags
>
)
{
auto
loadFlags
=
GetDefaultLoadFlags
(
)
;
if
(
GetDocShell
(
)
)
{
nsDocShell
:
:
Cast
(
GetDocShell
(
)
)
-
>
SetLoadGroupDefaultLoadFlags
(
loadFlags
)
;
}
if
(
XRE_IsParentProcess
(
)
)
{
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
if
(
aContext
!
=
this
)
{
Unused
<
<
aContext
-
>
SetDefaultLoadFlags
(
loadFlags
)
;
}
}
)
;
}
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_UseGlobalHistory
>
const
bool
&
aUseGlobalHistory
ContentParent
*
aSource
)
{
return
true
;
}
auto
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_UserAgentOverride
>
const
nsString
&
aUserAgent
ContentParent
*
aSource
)
-
>
CanSetResult
{
if
(
!
IsTop
(
)
)
{
return
CanSetResult
:
:
Deny
;
}
return
LegacyRevertIfNotOwningOrParentProcess
(
aSource
)
;
}
auto
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_PlatformOverride
>
const
nsString
&
aPlatform
ContentParent
*
aSource
)
-
>
CanSetResult
{
if
(
!
IsTop
(
)
)
{
return
CanSetResult
:
:
Deny
;
}
return
LegacyRevertIfNotOwningOrParentProcess
(
aSource
)
;
}
bool
BrowsingContext
:
:
CheckOnlyEmbedderCanSet
(
ContentParent
*
aSource
)
{
if
(
XRE_IsParentProcess
(
)
)
{
uint64_t
childId
=
aSource
?
aSource
-
>
ChildID
(
)
:
0
;
return
Canonical
(
)
-
>
IsEmbeddedInProcess
(
childId
)
;
}
return
mEmbeddedByThisProcess
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_EmbedderInnerWindowId
>
const
uint64_t
&
aValue
ContentParent
*
aSource
)
{
if
(
mParentWindow
)
{
return
mParentWindow
-
>
Id
(
)
=
=
aValue
;
}
return
CheckOnlyEmbedderCanSet
(
aSource
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_EmbedderElementType
>
const
Maybe
<
nsString
>
&
ContentParent
*
aSource
)
{
return
CheckOnlyEmbedderCanSet
(
aSource
)
;
}
auto
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_CurrentInnerWindowId
>
const
uint64_t
&
aValue
ContentParent
*
aSource
)
-
>
CanSetResult
{
if
(
aValue
=
=
0
)
{
return
CanSetResult
:
:
Allow
;
}
RefPtr
<
WindowContext
>
window
=
WindowContext
:
:
GetById
(
aValue
)
;
if
(
!
window
|
|
window
-
>
GetBrowsingContext
(
)
!
=
this
)
{
return
CanSetResult
:
:
Deny
;
}
if
(
aSource
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
Canonical
(
)
-
>
IsOwnedByProcess
(
aSource
-
>
ChildID
(
)
)
)
{
return
CanSetResult
:
:
Revert
;
}
}
else
if
(
XRE_IsContentProcess
(
)
&
&
!
IsOwnedByProcess
(
)
)
{
return
CanSetResult
:
:
Deny
;
}
return
CanSetResult
:
:
Allow
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_ParentInitiatedNavigationEpoch
>
const
uint64_t
&
aValue
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_CurrentInnerWindowId
>
)
{
RefPtr
<
WindowContext
>
prevWindowContext
=
mCurrentWindowContext
.
forget
(
)
;
mCurrentWindowContext
=
WindowContext
:
:
GetById
(
GetCurrentInnerWindowId
(
)
)
;
MOZ_ASSERT
(
!
mCurrentWindowContext
|
|
mWindowContexts
.
Contains
(
mCurrentWindowContext
)
"
WindowContext
not
registered
?
"
)
;
BrowsingContext_Binding
:
:
ClearCachedChildrenValue
(
this
)
;
if
(
XRE_IsParentProcess
(
)
)
{
if
(
prevWindowContext
!
=
mCurrentWindowContext
)
{
if
(
prevWindowContext
)
{
prevWindowContext
-
>
Canonical
(
)
-
>
DidBecomeCurrentWindowGlobal
(
false
)
;
}
if
(
mCurrentWindowContext
)
{
Canonical
(
)
-
>
MaybeScheduleSessionStoreUpdate
(
)
;
mCurrentWindowContext
-
>
Canonical
(
)
-
>
DidBecomeCurrentWindowGlobal
(
true
)
;
}
}
BrowserParent
:
:
UpdateFocusFromBrowsingContext
(
)
;
}
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_IsPopupSpam
>
const
bool
&
aValue
ContentParent
*
aSource
)
{
return
aValue
&
&
!
GetIsPopupSpam
(
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_IsPopupSpam
>
)
{
if
(
GetIsPopupSpam
(
)
)
{
PopupBlocker
:
:
RegisterOpenPopupSpam
(
)
;
}
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_MessageManagerGroup
>
const
nsString
&
aMessageManagerGroup
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
&
&
IsTopContent
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_OrientationLock
>
const
mozilla
:
:
hal
:
:
ScreenOrientation
&
aOrientationLock
ContentParent
*
aSource
)
{
return
IsTop
(
)
;
}
bool
BrowsingContext
:
:
IsLoading
(
)
{
if
(
GetLoading
(
)
)
{
return
true
;
}
nsIDocShell
*
shell
=
GetDocShell
(
)
;
if
(
shell
)
{
Document
*
doc
=
shell
-
>
GetDocument
(
)
;
return
doc
&
&
doc
-
>
GetReadyStateEnum
(
)
<
Document
:
:
READYSTATE_COMPLETE
;
}
return
false
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_Loading
>
)
{
if
(
mFields
.
Get
<
IDX_Loading
>
(
)
)
{
return
;
}
while
(
!
mDeprioritizedLoadRunner
.
isEmpty
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
runner
=
mDeprioritizedLoadRunner
.
popFirst
(
)
;
NS_DispatchToCurrentThread
(
runner
.
forget
(
)
)
;
}
if
(
IsTop
(
)
)
{
Group
(
)
-
>
FlushPostMessageEvents
(
)
;
}
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_AncestorLoading
>
)
{
nsPIDOMWindowOuter
*
outer
=
GetDOMWindow
(
)
;
if
(
!
outer
)
{
MOZ_LOG
(
gTimeoutDeferralLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
DidSetAncestorLoading
BC
:
%
p
-
-
No
outer
window
"
(
void
*
)
this
)
)
;
return
;
}
Document
*
document
=
nsGlobalWindowOuter
:
:
Cast
(
outer
)
-
>
GetExtantDoc
(
)
;
if
(
document
)
{
MOZ_LOG
(
gTimeoutDeferralLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
DidSetAncestorLoading
BC
:
%
p
-
-
NotifyLoading
(
%
d
%
d
%
d
)
"
(
void
*
)
this
GetAncestorLoading
(
)
document
-
>
GetReadyStateEnum
(
)
document
-
>
GetReadyStateEnum
(
)
)
)
;
document
-
>
NotifyLoading
(
GetAncestorLoading
(
)
document
-
>
GetReadyStateEnum
(
)
document
-
>
GetReadyStateEnum
(
)
)
;
}
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_AuthorStyleDisabledDefault
>
)
{
MOZ_ASSERT
(
IsTop
(
)
"
Should
only
set
AuthorStyleDisabledDefault
in
the
top
"
"
browsing
context
"
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_TextZoom
>
float
aOldValue
)
{
if
(
GetTextZoom
(
)
=
=
aOldValue
)
{
return
;
}
if
(
IsInProcess
(
)
)
{
if
(
nsIDocShell
*
shell
=
GetDocShell
(
)
)
{
if
(
nsPresContext
*
pc
=
shell
-
>
GetPresContext
(
)
)
{
pc
-
>
RecomputeBrowsingContextDependentData
(
)
;
}
}
for
(
BrowsingContext
*
child
:
Children
(
)
)
{
Unused
<
<
child
-
>
SetTextZoom
(
GetTextZoom
(
)
)
;
}
}
if
(
IsTop
(
)
&
&
XRE_IsParentProcess
(
)
)
{
if
(
Element
*
element
=
GetEmbedderElement
(
)
)
{
AsyncEventDispatcher
:
:
RunDOMEventWhenSafe
(
*
element
u
"
TextZoomChange
"
_ns
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eYes
)
;
}
}
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_FullZoom
>
float
aOldValue
)
{
if
(
GetFullZoom
(
)
=
=
aOldValue
)
{
return
;
}
if
(
IsInProcess
(
)
)
{
if
(
nsIDocShell
*
shell
=
GetDocShell
(
)
)
{
if
(
nsPresContext
*
pc
=
shell
-
>
GetPresContext
(
)
)
{
pc
-
>
RecomputeBrowsingContextDependentData
(
)
;
}
}
for
(
BrowsingContext
*
child
:
Children
(
)
)
{
auto
fullZoom
=
GetFullZoom
(
)
;
if
(
auto
*
elem
=
child
-
>
GetEmbedderElement
(
)
)
{
if
(
auto
*
frame
=
elem
-
>
GetPrimaryFrame
(
)
)
{
fullZoom
=
frame
-
>
Style
(
)
-
>
EffectiveZoom
(
)
.
Zoom
(
fullZoom
)
;
}
}
Unused
<
<
child
-
>
SetFullZoom
(
fullZoom
)
;
}
}
if
(
IsTop
(
)
&
&
XRE_IsParentProcess
(
)
)
{
if
(
Element
*
element
=
GetEmbedderElement
(
)
)
{
AsyncEventDispatcher
:
:
RunDOMEventWhenSafe
(
*
element
u
"
FullZoomChange
"
_ns
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eYes
)
;
}
}
}
void
BrowsingContext
:
:
AddDeprioritizedLoadRunner
(
nsIRunnable
*
aRunner
)
{
MOZ_ASSERT
(
IsLoading
(
)
)
;
MOZ_ASSERT
(
Top
(
)
=
=
this
)
;
RefPtr
<
DeprioritizedLoadRunner
>
runner
=
new
DeprioritizedLoadRunner
(
aRunner
)
;
mDeprioritizedLoadRunner
.
insertBack
(
runner
)
;
NS_DispatchToCurrentThreadQueue
(
runner
.
forget
(
)
EventQueuePriority
:
:
Low
)
;
}
bool
BrowsingContext
:
:
IsDynamic
(
)
const
{
const
BrowsingContext
*
current
=
this
;
do
{
if
(
current
-
>
CreatedDynamically
(
)
)
{
return
true
;
}
}
while
(
(
current
=
current
-
>
GetParent
(
)
)
)
;
return
false
;
}
bool
BrowsingContext
:
:
GetOffsetPath
(
nsTArray
<
uint32_t
>
&
aPath
)
const
{
for
(
const
BrowsingContext
*
current
=
this
;
current
&
&
current
-
>
GetParent
(
)
;
current
=
current
-
>
GetParent
(
)
)
{
if
(
current
-
>
CreatedDynamically
(
)
)
{
return
false
;
}
aPath
.
AppendElement
(
current
-
>
ChildOffset
(
)
)
;
}
return
true
;
}
void
BrowsingContext
:
:
GetHistoryID
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVal
ErrorResult
&
aError
)
{
if
(
!
xpc
:
:
ID2JSValue
(
aCx
GetHistoryID
(
)
aVal
)
)
{
aError
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
}
}
void
BrowsingContext
:
:
InitSessionHistory
(
)
{
MOZ_ASSERT
(
!
IsDiscarded
(
)
)
;
MOZ_ASSERT
(
IsTop
(
)
)
;
MOZ_ASSERT
(
EverAttached
(
)
)
;
if
(
!
GetHasSessionHistory
(
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
SetHasSessionHistory
(
true
)
)
;
}
}
ChildSHistory
*
BrowsingContext
:
:
GetChildSessionHistory
(
)
{
if
(
!
mozilla
:
:
SessionHistoryInParent
(
)
)
{
return
mChildSessionHistory
&
&
mChildSessionHistory
-
>
IsInProcess
(
)
?
mChildSessionHistory
.
get
(
)
:
nullptr
;
}
return
mChildSessionHistory
;
}
void
BrowsingContext
:
:
CreateChildSHistory
(
)
{
MOZ_ASSERT
(
IsTop
(
)
)
;
MOZ_ASSERT
(
GetHasSessionHistory
(
)
)
;
MOZ_ASSERT
(
!
mChildSessionHistory
)
;
mChildSessionHistory
=
new
ChildSHistory
(
this
)
;
mChildSessionHistory
-
>
SetIsInProcess
(
IsInProcess
(
)
)
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_HasSessionHistory
>
bool
aOldValue
)
{
MOZ_ASSERT
(
GetHasSessionHistory
(
)
|
|
!
aOldValue
"
We
don
'
t
support
turning
off
session
history
.
"
)
;
if
(
GetHasSessionHistory
(
)
&
&
!
aOldValue
)
{
CreateChildSHistory
(
)
;
}
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_TargetTopLevelLinkClicksToBlankInternal
>
const
bool
&
aTargetTopLevelLinkClicksToBlankInternal
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
&
&
IsTop
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_BrowserId
>
const
uint32_t
&
aValue
ContentParent
*
aSource
)
{
return
GetBrowserId
(
)
=
=
0
&
&
IsTop
(
)
&
&
Children
(
)
.
IsEmpty
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_PendingInitialization
>
bool
aNewValue
ContentParent
*
aSource
)
{
return
IsTop
(
)
&
&
GetPendingInitialization
(
)
&
&
!
aNewValue
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_TopLevelCreatedByWebContent
>
const
bool
&
aNewValue
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
&
&
IsTop
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_HasRestoreData
>
bool
aNewValue
ContentParent
*
aSource
)
{
return
IsTop
(
)
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_IsUnderHiddenEmbedderElement
>
const
bool
&
aIsUnderHiddenEmbedderElement
ContentParent
*
aSource
)
{
return
true
;
}
bool
BrowsingContext
:
:
CanSet
(
FieldIndex
<
IDX_ForceOffline
>
bool
aNewValue
ContentParent
*
aSource
)
{
return
XRE_IsParentProcess
(
)
&
&
!
aSource
;
}
void
BrowsingContext
:
:
DidSet
(
FieldIndex
<
IDX_IsUnderHiddenEmbedderElement
>
bool
aOldValue
)
{
nsIDocShell
*
shell
=
GetDocShell
(
)
;
if
(
!
shell
)
{
return
;
}
const
bool
newValue
=
IsUnderHiddenEmbedderElement
(
)
;
if
(
NS_WARN_IF
(
aOldValue
=
=
newValue
)
)
{
return
;
}
if
(
auto
*
bc
=
BrowserChild
:
:
GetFrom
(
shell
)
)
{
bc
-
>
UpdateVisibility
(
)
;
}
if
(
PresShell
*
presShell
=
shell
-
>
GetPresShell
(
)
)
{
presShell
-
>
SetIsUnderHiddenEmbedderElement
(
newValue
)
;
}
auto
PropagateToChild
=
[
&
newValue
]
(
BrowsingContext
*
aChild
)
{
Element
*
embedderElement
=
aChild
-
>
GetEmbedderElement
(
)
;
if
(
!
embedderElement
)
{
return
CallState
:
:
Continue
;
}
bool
embedderFrameIsHidden
=
true
;
if
(
auto
*
embedderFrame
=
embedderElement
-
>
GetPrimaryFrame
(
)
)
{
embedderFrameIsHidden
=
!
embedderFrame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
;
}
bool
hidden
=
newValue
|
|
embedderFrameIsHidden
;
if
(
aChild
-
>
IsUnderHiddenEmbedderElement
(
)
!
=
hidden
)
{
Unused
<
<
aChild
-
>
SetIsUnderHiddenEmbedderElement
(
hidden
)
;
}
return
CallState
:
:
Continue
;
}
;
for
(
BrowsingContext
*
child
:
Children
(
)
)
{
PropagateToChild
(
child
)
;
}
if
(
XRE_IsParentProcess
(
)
)
{
Canonical
(
)
-
>
CallOnTopDescendants
(
PropagateToChild
CanonicalBrowsingContext
:
:
TopDescendantKind
:
:
ChildrenOnly
)
;
}
}
bool
BrowsingContext
:
:
IsPopupAllowed
(
)
{
for
(
auto
*
context
=
GetCurrentWindowContext
(
)
;
context
;
context
=
context
-
>
GetParentWindowContext
(
)
)
{
if
(
context
-
>
CanShowPopup
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
BrowsingContext
:
:
ShouldAddEntryForRefresh
(
nsIURI
*
aPreviousURI
const
SessionHistoryInfo
&
aInfo
)
{
return
ShouldAddEntryForRefresh
(
aPreviousURI
aInfo
.
GetURI
(
)
aInfo
.
HasPostData
(
)
)
;
}
bool
BrowsingContext
:
:
ShouldAddEntryForRefresh
(
nsIURI
*
aPreviousURI
nsIURI
*
aNewURI
bool
aHasPostData
)
{
if
(
aHasPostData
)
{
return
true
;
}
bool
equalsURI
=
false
;
if
(
aPreviousURI
)
{
aPreviousURI
-
>
Equals
(
aNewURI
&
equalsURI
)
;
}
return
!
equalsURI
;
}
bool
BrowsingContext
:
:
AddSHEntryWouldIncreaseLength
(
SessionHistoryInfo
*
aCurrentEntry
)
const
{
const
bool
isCurrentTransientEntry
=
aCurrentEntry
&
&
aCurrentEntry
-
>
IsTransient
(
)
;
const
bool
wouldAddToParentEntry
=
!
IsTop
(
)
&
&
!
aCurrentEntry
;
return
!
isCurrentTransientEntry
&
&
!
wouldAddToParentEntry
;
}
void
BrowsingContext
:
:
SessionHistoryCommit
(
const
LoadingSessionHistoryInfo
&
aInfo
uint32_t
aLoadType
nsIURI
*
aPreviousURI
SessionHistoryInfo
*
aPreviousActiveEntry
bool
aCloneEntryChildren
bool
aChannelExpired
uint32_t
aCacheKey
)
{
nsID
changeID
=
{
}
;
if
(
XRE_IsContentProcess
(
)
)
{
RefPtr
<
ChildSHistory
>
rootSH
=
Top
(
)
-
>
GetChildSessionHistory
(
)
;
if
(
rootSH
)
{
if
(
!
aInfo
.
mLoadIsFromSessionHistory
)
{
const
bool
isReplaceLoad
=
LOAD_TYPE_HAS_FLAGS
(
aLoadType
nsIWebNavigation
:
:
LOAD_FLAGS_REPLACE_HISTORY
)
isRefreshLoad
=
LOAD_TYPE_HAS_FLAGS
(
aLoadType
nsIWebNavigation
:
:
LOAD_FLAGS_IS_REFRESH
)
;
if
(
!
isReplaceLoad
&
&
AddSHEntryWouldIncreaseLength
(
aPreviousActiveEntry
)
&
&
ShouldUpdateSessionHistory
(
aLoadType
)
&
&
(
!
isRefreshLoad
|
|
ShouldAddEntryForRefresh
(
aPreviousURI
aInfo
.
mInfo
)
)
)
{
changeID
=
rootSH
-
>
AddPendingHistoryChange
(
)
;
}
}
else
{
changeID
=
rootSH
-
>
AddPendingHistoryChange
(
aInfo
.
mOffset
0
)
;
}
}
ContentChild
*
cc
=
ContentChild
:
:
GetSingleton
(
)
;
mozilla
:
:
Unused
<
<
cc
-
>
SendHistoryCommit
(
this
aInfo
.
mLoadId
changeID
aLoadType
aCloneEntryChildren
aChannelExpired
aCacheKey
)
;
}
else
{
Canonical
(
)
-
>
SessionHistoryCommit
(
aInfo
.
mLoadId
changeID
aLoadType
aCloneEntryChildren
aChannelExpired
aCacheKey
)
;
}
}
void
BrowsingContext
:
:
SetActiveSessionHistoryEntry
(
const
Maybe
<
nsPoint
>
&
aPreviousScrollPos
SessionHistoryInfo
*
aInfo
SessionHistoryInfo
*
aPreviousActiveEntry
uint32_t
aLoadType
uint32_t
aUpdatedCacheKey
bool
aUpdateLength
)
{
if
(
IsTop
(
)
&
&
!
nsDocShell
:
:
ShouldAddToSessionHistory
(
aInfo
-
>
GetURI
(
)
nullptr
)
)
{
aInfo
-
>
SetTransient
(
)
;
}
if
(
XRE_IsContentProcess
(
)
)
{
if
(
aUpdatedCacheKey
!
=
0
)
{
aInfo
-
>
SetCacheKey
(
aUpdatedCacheKey
)
;
}
nsID
changeID
=
{
}
;
if
(
aUpdateLength
)
{
RefPtr
<
ChildSHistory
>
shistory
=
Top
(
)
-
>
GetChildSessionHistory
(
)
;
if
(
shistory
)
{
if
(
AddSHEntryWouldIncreaseLength
(
aPreviousActiveEntry
)
)
{
changeID
=
shistory
-
>
AddPendingHistoryChange
(
)
;
}
}
}
ContentChild
:
:
GetSingleton
(
)
-
>
SendSetActiveSessionHistoryEntry
(
this
aPreviousScrollPos
*
aInfo
aLoadType
aUpdatedCacheKey
changeID
)
;
}
else
{
Canonical
(
)
-
>
SetActiveSessionHistoryEntry
(
aPreviousScrollPos
aInfo
aLoadType
aUpdatedCacheKey
nsID
(
)
)
;
}
}
void
BrowsingContext
:
:
ReplaceActiveSessionHistoryEntry
(
SessionHistoryInfo
*
aInfo
)
{
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendReplaceActiveSessionHistoryEntry
(
this
*
aInfo
)
;
}
else
{
Canonical
(
)
-
>
ReplaceActiveSessionHistoryEntry
(
aInfo
)
;
}
}
void
BrowsingContext
:
:
RemoveDynEntriesFromActiveSessionHistoryEntry
(
)
{
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendRemoveDynEntriesFromActiveSessionHistoryEntry
(
this
)
;
}
else
{
Canonical
(
)
-
>
RemoveDynEntriesFromActiveSessionHistoryEntry
(
)
;
}
}
void
BrowsingContext
:
:
RemoveFromSessionHistory
(
const
nsID
&
aChangeID
)
{
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendRemoveFromSessionHistory
(
this
aChangeID
)
;
}
else
{
Canonical
(
)
-
>
RemoveFromSessionHistory
(
aChangeID
)
;
}
}
void
BrowsingContext
:
:
HistoryGo
(
int32_t
aOffset
uint64_t
aHistoryEpoch
bool
aRequireUserInteraction
bool
aUserActivation
std
:
:
function
<
void
(
Maybe
<
int32_t
>
&
&
)
>
&
&
aResolver
)
{
bool
checkForCancelation
=
true
;
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendHistoryGo
(
this
aOffset
aHistoryEpoch
aRequireUserInteraction
aUserActivation
checkForCancelation
std
:
:
move
(
aResolver
)
[
]
(
mozilla
:
:
ipc
:
:
ResponseRejectReason
)
{
}
)
;
}
else
{
RefPtr
<
CanonicalBrowsingContext
>
self
=
Canonical
(
)
;
aResolver
(
self
-
>
HistoryGo
(
aOffset
aHistoryEpoch
aRequireUserInteraction
aUserActivation
checkForCancelation
self
-
>
GetContentParent
(
)
?
Some
(
self
-
>
GetContentParent
(
)
-
>
ChildID
(
)
)
:
Nothing
(
)
)
)
;
}
}
void
BrowsingContext
:
:
NavigationTraverse
(
const
nsID
&
aKey
uint64_t
aHistoryEpoch
bool
aUserActivation
bool
aCheckForCancelation
std
:
:
function
<
void
(
nsresult
)
>
&
&
aResolver
)
{
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendNavigationTraverse
(
this
aKey
aHistoryEpoch
aUserActivation
aCheckForCancelation
std
:
:
move
(
aResolver
)
[
]
(
mozilla
:
:
ipc
:
:
ResponseRejectReason
)
{
}
)
;
}
else
{
RefPtr
<
CanonicalBrowsingContext
>
self
=
Canonical
(
)
;
self
-
>
NavigationTraverse
(
aKey
aHistoryEpoch
aUserActivation
aCheckForCancelation
self
-
>
GetContentParent
(
)
?
Some
(
self
-
>
GetContentParent
(
)
-
>
ChildID
(
)
)
:
Nothing
(
)
std
:
:
move
(
aResolver
)
)
;
}
}
void
BrowsingContext
:
:
SetChildSHistory
(
ChildSHistory
*
aChildSHistory
)
{
mChildSessionHistory
=
aChildSHistory
;
mChildSessionHistory
-
>
SetBrowsingContext
(
this
)
;
mFields
.
SetWithoutSyncing
<
IDX_HasSessionHistory
>
(
true
)
;
}
bool
BrowsingContext
:
:
ShouldUpdateSessionHistory
(
uint32_t
aLoadType
)
{
return
nsDocShell
:
:
ShouldUpdateGlobalHistory
(
aLoadType
)
&
&
(
!
(
aLoadType
&
nsIDocShell
:
:
LOAD_CMD_RELOAD
)
|
|
(
IsForceReloadType
(
aLoadType
)
&
&
IsSubframe
(
)
)
)
;
}
nsresult
BrowsingContext
:
:
CheckNavigationRateLimit
(
CallerType
aCallerType
)
{
if
(
aCallerType
=
=
CallerType
:
:
System
)
{
return
NS_OK
;
}
uint32_t
limitCount
=
StaticPrefs
:
:
dom_navigation_navigationRateLimit_count
(
)
;
uint32_t
timeSpanSeconds
=
StaticPrefs
:
:
dom_navigation_navigationRateLimit_timespan
(
)
;
if
(
limitCount
=
=
0
|
|
timeSpanSeconds
=
=
0
)
{
return
NS_OK
;
}
TimeDuration
throttleSpan
=
TimeDuration
:
:
FromSeconds
(
timeSpanSeconds
)
;
if
(
mNavigationRateLimitSpanStart
.
IsNull
(
)
|
|
(
(
TimeStamp
:
:
Now
(
)
-
mNavigationRateLimitSpanStart
)
>
throttleSpan
)
)
{
mNavigationRateLimitSpanStart
=
TimeStamp
:
:
Now
(
)
;
mNavigationRateLimitCount
=
1
;
return
NS_OK
;
}
if
(
mNavigationRateLimitCount
>
=
limitCount
)
{
Document
*
doc
=
GetDocument
(
)
;
if
(
doc
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
errorFlag
"
DOM
"
_ns
doc
nsContentUtils
:
:
eDOM_PROPERTIES
"
LocChangeFloodingPrevented
"
)
;
}
return
NS_ERROR_DOM_SECURITY_ERR
;
}
mNavigationRateLimitCount
+
+
;
return
NS_OK
;
}
void
BrowsingContext
:
:
ResetNavigationRateLimit
(
)
{
mNavigationRateLimitSpanStart
=
TimeStamp
(
)
;
}
void
BrowsingContext
:
:
LocationCreated
(
dom
:
:
Location
*
aLocation
)
{
MOZ_ASSERT
(
!
aLocation
-
>
isInList
(
)
)
;
mLocations
.
insertBack
(
aLocation
)
;
}
void
BrowsingContext
:
:
ClearCachedValuesOfLocations
(
)
{
for
(
dom
:
:
Location
*
loc
=
mLocations
.
getFirst
(
)
;
loc
;
loc
=
loc
-
>
getNext
(
)
)
{
loc
-
>
ClearCachedValues
(
)
;
}
}
void
BrowsingContext
:
:
ConsumeHistoryActivation
(
)
{
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aBrowsingContext
)
{
RefPtr
<
WindowContext
>
windowContext
=
aBrowsingContext
-
>
GetCurrentWindowContext
(
)
;
if
(
aBrowsingContext
-
>
IsInProcess
(
)
&
&
windowContext
&
&
windowContext
-
>
GetUserActivationState
(
)
=
=
UserActivation
:
:
State
:
:
FullActivated
)
{
windowContext
-
>
UpdateLastHistoryActivation
(
)
;
}
}
)
;
}
}
namespace
ipc
{
void
IPDLParamTraits
<
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
>
:
:
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
&
aParam
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
aParam
.
GetMaybeDiscarded
(
)
|
|
aParam
.
GetMaybeDiscarded
(
)
-
>
EverAttached
(
)
)
;
uint64_t
id
=
aParam
.
ContextId
(
)
;
WriteIPDLParam
(
aWriter
aActor
id
)
;
}
bool
IPDLParamTraits
<
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
>
:
:
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
*
aResult
)
{
uint64_t
id
=
0
;
if
(
!
ReadIPDLParam
(
aReader
aActor
&
id
)
)
{
return
false
;
}
if
(
id
=
=
0
)
{
*
aResult
=
nullptr
;
}
else
if
(
RefPtr
<
dom
:
:
BrowsingContext
>
bc
=
dom
:
:
BrowsingContext
:
:
Get
(
id
)
)
{
*
aResult
=
std
:
:
move
(
bc
)
;
}
else
{
aResult
-
>
SetDiscarded
(
id
)
;
}
return
true
;
}
void
IPDLParamTraits
<
dom
:
:
BrowsingContext
:
:
IPCInitializer
>
:
:
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
dom
:
:
BrowsingContext
:
:
IPCInitializer
&
aInit
)
{
WriteIPDLParam
(
aWriter
aActor
aInit
.
mId
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mParentId
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mWindowless
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mUseRemoteTabs
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mUseRemoteSubframes
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mCreatedDynamically
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mChildOffset
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mOriginAttributes
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mRequestContextId
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mSessionHistoryIndex
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mSessionHistoryCount
)
;
WriteIPDLParam
(
aWriter
aActor
aInit
.
mFields
)
;
}
bool
IPDLParamTraits
<
dom
:
:
BrowsingContext
:
:
IPCInitializer
>
:
:
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
dom
:
:
BrowsingContext
:
:
IPCInitializer
*
aInit
)
{
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mId
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mParentId
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mWindowless
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mUseRemoteTabs
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mUseRemoteSubframes
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mCreatedDynamically
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mChildOffset
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mOriginAttributes
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mRequestContextId
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mSessionHistoryIndex
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mSessionHistoryCount
)
|
|
!
ReadIPDLParam
(
aReader
aActor
&
aInit
-
>
mFields
)
)
{
return
false
;
}
return
true
;
}
template
struct
IPDLParamTraits
<
dom
:
:
BrowsingContext
:
:
BaseTransaction
>
;
}
}
