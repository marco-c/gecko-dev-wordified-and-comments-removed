#
ifndef
mozilla_dom_WindowContext_h
#
define
mozilla_dom_WindowContext_h
#
include
"
mozilla
/
dom
/
MaybeDiscarded
.
h
"
#
include
"
mozilla
/
dom
/
SyncedContext
.
h
"
#
include
"
mozilla
/
net
/
NeckoChannelParams
.
h
"
namespace
mozilla
{
namespace
dom
{
#
define
MOZ_EACH_WC_FIELD
(
FIELD
)
\
FIELD
(
OuterWindowId
uint64_t
)
\
FIELD
(
CookieJarSettings
Maybe
<
mozilla
:
:
net
:
:
CookieJarSettingsArgs
>
)
\
FIELD
(
HasStoragePermission
bool
)
class
WindowContext
:
public
nsISupports
public
nsWrapperCache
{
MOZ_DECL_SYNCED_CONTEXT
(
WindowContext
MOZ_EACH_WC_FIELD
)
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
WindowContext
)
public
:
static
already_AddRefed
<
WindowContext
>
GetById
(
uint64_t
aInnerWindowId
)
;
static
LogModule
*
GetLog
(
)
;
BrowsingContext
*
GetBrowsingContext
(
)
const
{
return
mBrowsingContext
;
}
BrowsingContextGroup
*
Group
(
)
const
;
uint64_t
Id
(
)
const
{
return
InnerWindowId
(
)
;
}
uint64_t
InnerWindowId
(
)
const
{
return
mInnerWindowId
;
}
uint64_t
OuterWindowId
(
)
const
{
return
GetOuterWindowId
(
)
;
}
bool
IsDiscarded
(
)
const
{
return
mIsDiscarded
;
}
WindowGlobalParent
*
Canonical
(
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Discard
(
)
;
struct
IPCInitializer
{
uint64_t
mInnerWindowId
;
uint64_t
mBrowsingContextId
;
FieldTuple
mFields
;
}
;
IPCInitializer
GetIPCInitializer
(
)
{
return
{
mInnerWindowId
mBrowsingContext
-
>
Id
(
)
mFields
.
Fields
(
)
}
;
}
static
already_AddRefed
<
WindowContext
>
Create
(
WindowGlobalChild
*
aWindow
)
;
static
void
CreateFromIPC
(
IPCInitializer
&
&
aInit
)
;
protected
:
WindowContext
(
BrowsingContext
*
aBrowsingContext
uint64_t
aInnerWindowId
FieldTuple
&
&
aFields
)
;
virtual
~
WindowContext
(
)
;
void
Init
(
)
;
private
:
void
SendCommitTransaction
(
ContentParent
*
aParent
const
BaseTransaction
&
aTxn
uint64_t
aEpoch
)
;
void
SendCommitTransaction
(
ContentChild
*
aChild
const
BaseTransaction
&
aTxn
uint64_t
aEpoch
)
;
bool
CanSet
(
FieldIndex
<
IDX_OuterWindowId
>
const
uint64_t
&
aValue
ContentParent
*
aSource
)
{
return
GetOuterWindowId
(
)
=
=
0
&
&
aValue
!
=
0
;
}
bool
CanSet
(
FieldIndex
<
IDX_CookieJarSettings
>
const
Maybe
<
mozilla
:
:
net
:
:
CookieJarSettingsArgs
>
&
aValue
ContentParent
*
aSource
)
{
return
true
;
}
bool
CanSet
(
FieldIndex
<
IDX_HasStoragePermission
>
const
bool
&
aValue
ContentParent
*
aSource
)
{
return
true
;
}
template
<
size_t
I
>
void
DidSet
(
FieldIndex
<
I
>
)
{
}
uint64_t
mInnerWindowId
;
RefPtr
<
BrowsingContext
>
mBrowsingContext
;
bool
mIsDiscarded
=
false
;
}
;
using
WindowContextTransaction
=
WindowContext
:
:
BaseTransaction
;
using
WindowContextInitializer
=
WindowContext
:
:
IPCInitializer
;
using
MaybeDiscardedWindowContext
=
MaybeDiscarded
<
WindowContext
>
;
extern
template
class
syncedcontext
:
:
Transaction
<
WindowContext
>
;
}
namespace
ipc
{
template
<
>
struct
IPDLParamTraits
<
dom
:
:
MaybeDiscarded
<
dom
:
:
WindowContext
>
>
{
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
const
dom
:
:
MaybeDiscarded
<
dom
:
:
WindowContext
>
&
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
dom
:
:
MaybeDiscarded
<
dom
:
:
WindowContext
>
*
aResult
)
;
}
;
template
<
>
struct
IPDLParamTraits
<
dom
:
:
WindowContext
:
:
IPCInitializer
>
{
static
void
Write
(
IPC
:
:
Message
*
aMessage
IProtocol
*
aActor
const
dom
:
:
WindowContext
:
:
IPCInitializer
&
aInitializer
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMessage
PickleIterator
*
aIterator
IProtocol
*
aActor
dom
:
:
WindowContext
:
:
IPCInitializer
*
aInitializer
)
;
}
;
}
}
#
endif
