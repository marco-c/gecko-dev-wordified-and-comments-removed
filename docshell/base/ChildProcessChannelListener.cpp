#
include
"
mozilla
/
dom
/
ChildProcessChannelListener
.
h
"
namespace
mozilla
{
namespace
dom
{
static
StaticRefPtr
<
ChildProcessChannelListener
>
sCPCLSingleton
;
void
ChildProcessChannelListener
:
:
RegisterCallback
(
uint64_t
aIdentifier
Callback
&
&
aCallback
)
{
if
(
auto
args
=
mChannelArgs
.
GetAndRemove
(
aIdentifier
)
)
{
aCallback
(
args
-
>
mLoadState
std
:
:
move
(
args
-
>
mRedirects
)
args
-
>
mTiming
)
;
}
else
{
mCallbacks
.
Put
(
aIdentifier
std
:
:
move
(
aCallback
)
)
;
}
}
void
ChildProcessChannelListener
:
:
OnChannelReady
(
nsDocShellLoadState
*
aLoadState
uint64_t
aIdentifier
nsTArray
<
net
:
:
DocumentChannelRedirect
>
&
&
aRedirects
nsDOMNavigationTiming
*
aTiming
)
{
if
(
auto
callback
=
mCallbacks
.
GetAndRemove
(
aIdentifier
)
)
{
(
*
callback
)
(
aLoadState
std
:
:
move
(
aRedirects
)
aTiming
)
;
}
else
{
mChannelArgs
.
Put
(
aIdentifier
{
aLoadState
std
:
:
move
(
aRedirects
)
aTiming
}
)
;
}
}
already_AddRefed
<
ChildProcessChannelListener
>
ChildProcessChannelListener
:
:
GetSingleton
(
)
{
if
(
!
sCPCLSingleton
)
{
sCPCLSingleton
=
new
ChildProcessChannelListener
(
)
;
ClearOnShutdown
(
&
sCPCLSingleton
)
;
}
RefPtr
<
ChildProcessChannelListener
>
cpcl
=
sCPCLSingleton
;
return
cpcl
.
forget
(
)
;
}
}
}
