#
include
"
nsDocShell
.
h
"
#
include
"
nsDSURIContentListener
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsDocShellCID
.
h
"
#
include
"
nsIWebNavigationInfo
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsContentSecurityManager
.
h
"
#
include
"
nsDocShellLoadTypes
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIMultiPartChannel
.
h
"
using
namespace
mozilla
;
NS_IMPL_ADDREF
(
MaybeCloseWindowHelper
)
NS_IMPL_RELEASE
(
MaybeCloseWindowHelper
)
NS_INTERFACE_MAP_BEGIN
(
MaybeCloseWindowHelper
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
MaybeCloseWindowHelper
:
:
MaybeCloseWindowHelper
(
nsIInterfaceRequestor
*
aContentContext
)
:
mContentContext
(
aContentContext
)
mWindowToClose
(
nullptr
)
mTimer
(
nullptr
)
mShouldCloseWindow
(
false
)
{
}
MaybeCloseWindowHelper
:
:
~
MaybeCloseWindowHelper
(
)
{
}
void
MaybeCloseWindowHelper
:
:
SetShouldCloseWindow
(
bool
aShouldCloseWindow
)
{
mShouldCloseWindow
=
aShouldCloseWindow
;
}
nsIInterfaceRequestor
*
MaybeCloseWindowHelper
:
:
MaybeCloseWindow
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
do_GetInterface
(
mContentContext
)
;
NS_ENSURE_TRUE
(
window
mContentContext
)
;
if
(
mShouldCloseWindow
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
opener
=
nsGlobalWindowOuter
:
:
Cast
(
window
)
-
>
GetSameProcessOpener
(
)
;
if
(
opener
&
&
!
opener
-
>
Closed
(
)
)
{
mContentContext
=
do_QueryInterface
(
opener
)
;
NS_ASSERTION
(
!
mTimer
"
mTimer
was
already
initialized
once
!
"
)
;
NS_NewTimerWithCallback
(
getter_AddRefs
(
mTimer
)
this
0
nsITimer
:
:
TYPE_ONE_SHOT
)
;
mWindowToClose
=
window
;
}
}
return
mContentContext
;
}
NS_IMETHODIMP
MaybeCloseWindowHelper
:
:
Notify
(
nsITimer
*
timer
)
{
NS_ASSERTION
(
mWindowToClose
"
No
window
to
close
after
timer
fired
"
)
;
mWindowToClose
-
>
Close
(
)
;
mWindowToClose
=
nullptr
;
mTimer
=
nullptr
;
return
NS_OK
;
}
nsDSURIContentListener
:
:
nsDSURIContentListener
(
nsDocShell
*
aDocShell
)
:
mDocShell
(
aDocShell
)
mExistingJPEGRequest
(
nullptr
)
mParentContentListener
(
nullptr
)
{
}
nsDSURIContentListener
:
:
~
nsDSURIContentListener
(
)
{
}
nsresult
nsDSURIContentListener
:
:
Init
(
)
{
nsresult
rv
;
mNavInfo
=
do_GetService
(
NS_WEBNAVIGATION_INFO_CONTRACTID
&
rv
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
get
webnav
info
"
)
;
return
rv
;
}
NS_IMPL_ADDREF
(
nsDSURIContentListener
)
NS_IMPL_RELEASE
(
nsDSURIContentListener
)
NS_INTERFACE_MAP_BEGIN
(
nsDSURIContentListener
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIURIContentListener
)
NS_INTERFACE_MAP_ENTRY
(
nsIURIContentListener
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_END
NS_IMETHODIMP
nsDSURIContentListener
:
:
OnStartURIOpen
(
nsIURI
*
aURI
bool
*
aAbortOpen
)
{
if
(
!
mDocShell
)
{
*
aAbortOpen
=
true
;
return
NS_OK
;
}
nsCOMPtr
<
nsIURIContentListener
>
parentListener
;
GetParentContentListener
(
getter_AddRefs
(
parentListener
)
)
;
if
(
parentListener
)
{
return
parentListener
-
>
OnStartURIOpen
(
aURI
aAbortOpen
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsDSURIContentListener
:
:
DoContent
(
const
nsACString
&
aContentType
bool
aIsContentPreferred
nsIRequest
*
aRequest
nsIStreamListener
*
*
aContentHandler
bool
*
aAbortProcess
)
{
nsresult
rv
;
NS_ENSURE_ARG_POINTER
(
aContentHandler
)
;
NS_ENSURE_TRUE
(
mDocShell
NS_ERROR_FAILURE
)
;
*
aAbortProcess
=
false
;
nsLoadFlags
loadFlags
=
0
;
nsCOMPtr
<
nsIChannel
>
aOpenedChannel
=
do_QueryInterface
(
aRequest
)
;
if
(
aOpenedChannel
)
{
aOpenedChannel
-
>
GetLoadFlags
(
&
loadFlags
)
;
if
(
!
nsContentSecurityManager
:
:
AllowTopLevelNavigationToDataURI
(
aOpenedChannel
)
)
{
aRequest
-
>
Cancel
(
NS_ERROR_DOM_BAD_URI
)
;
*
aAbortProcess
=
true
;
if
(
mDocShell
)
{
nsCOMPtr
<
nsIInterfaceRequestor
>
contentContext
=
do_QueryInterface
(
mDocShell
-
>
GetWindow
(
)
)
;
if
(
contentContext
)
{
RefPtr
<
MaybeCloseWindowHelper
>
maybeCloseWindowHelper
=
new
MaybeCloseWindowHelper
(
contentContext
)
;
maybeCloseWindowHelper
-
>
SetShouldCloseWindow
(
true
)
;
maybeCloseWindowHelper
-
>
MaybeCloseWindow
(
)
;
}
}
return
NS_OK
;
}
}
if
(
loadFlags
&
nsIChannel
:
:
LOAD_RETARGETED_DOCUMENT_URI
)
{
mDocShell
-
>
Stop
(
nsIWebNavigation
:
:
STOP_NETWORK
)
;
mDocShell
-
>
SetLoadType
(
aIsContentPreferred
?
LOAD_LINK
:
LOAD_NORMAL
)
;
}
nsCOMPtr
<
nsIChannel
>
baseChannel
;
if
(
nsCOMPtr
<
nsIMultiPartChannel
>
mpchan
=
do_QueryInterface
(
aRequest
)
)
{
mpchan
-
>
GetBaseChannel
(
getter_AddRefs
(
baseChannel
)
)
;
}
bool
reuseCV
=
baseChannel
&
&
baseChannel
=
=
mExistingJPEGRequest
&
&
aContentType
.
EqualsLiteral
(
"
image
/
jpeg
"
)
;
if
(
mExistingJPEGStreamListener
&
&
reuseCV
)
{
RefPtr
<
nsIStreamListener
>
copy
(
mExistingJPEGStreamListener
)
;
copy
.
forget
(
aContentHandler
)
;
rv
=
NS_OK
;
}
else
{
rv
=
mDocShell
-
>
CreateContentViewer
(
aContentType
aRequest
aContentHandler
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
reuseCV
)
{
mExistingJPEGStreamListener
=
*
aContentHandler
;
}
else
{
mExistingJPEGStreamListener
=
nullptr
;
}
mExistingJPEGRequest
=
baseChannel
;
}
if
(
rv
=
=
NS_ERROR_REMOTE_XUL
|
|
rv
=
=
NS_ERROR_DOCSHELL_DYING
)
{
aRequest
-
>
Cancel
(
rv
)
;
*
aAbortProcess
=
true
;
return
NS_OK
;
}
if
(
NS_FAILED
(
rv
)
)
{
*
aContentHandler
=
nullptr
;
return
rv
;
}
if
(
loadFlags
&
nsIChannel
:
:
LOAD_RETARGETED_DOCUMENT_URI
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWindow
=
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
NS_ENSURE_TRUE
(
domWindow
NS_ERROR_FAILURE
)
;
domWindow
-
>
Focus
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsDSURIContentListener
:
:
IsPreferred
(
const
char
*
aContentType
char
*
*
aDesiredContentType
bool
*
aCanHandle
)
{
NS_ENSURE_ARG_POINTER
(
aCanHandle
)
;
NS_ENSURE_ARG_POINTER
(
aDesiredContentType
)
;
nsCOMPtr
<
nsIURIContentListener
>
parentListener
;
GetParentContentListener
(
getter_AddRefs
(
parentListener
)
)
;
if
(
parentListener
)
{
return
parentListener
-
>
IsPreferred
(
aContentType
aDesiredContentType
aCanHandle
)
;
}
return
CanHandleContent
(
aContentType
true
aDesiredContentType
aCanHandle
)
;
}
NS_IMETHODIMP
nsDSURIContentListener
:
:
CanHandleContent
(
const
char
*
aContentType
bool
aIsContentPreferred
char
*
*
aDesiredContentType
bool
*
aCanHandleContent
)
{
MOZ_ASSERT
(
aCanHandleContent
"
Null
out
param
?
"
)
;
NS_ENSURE_ARG_POINTER
(
aDesiredContentType
)
;
*
aCanHandleContent
=
false
;
*
aDesiredContentType
=
nullptr
;
nsresult
rv
=
NS_OK
;
if
(
aContentType
)
{
uint32_t
canHandle
=
nsIWebNavigationInfo
:
:
UNSUPPORTED
;
rv
=
mNavInfo
-
>
IsTypeSupported
(
nsDependentCString
(
aContentType
)
mDocShell
&
canHandle
)
;
*
aCanHandleContent
=
(
canHandle
!
=
nsIWebNavigationInfo
:
:
UNSUPPORTED
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsDSURIContentListener
:
:
GetLoadCookie
(
nsISupports
*
*
aLoadCookie
)
{
NS_IF_ADDREF
(
*
aLoadCookie
=
nsDocShell
:
:
GetAsSupports
(
mDocShell
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsDSURIContentListener
:
:
SetLoadCookie
(
nsISupports
*
aLoadCookie
)
{
#
ifdef
DEBUG
RefPtr
<
nsDocLoader
>
cookieAsDocLoader
=
nsDocLoader
:
:
GetAsDocLoader
(
aLoadCookie
)
;
NS_ASSERTION
(
cookieAsDocLoader
&
&
cookieAsDocLoader
=
=
mDocShell
"
Invalid
load
cookie
being
set
!
"
)
;
#
endif
return
NS_OK
;
}
NS_IMETHODIMP
nsDSURIContentListener
:
:
GetParentContentListener
(
nsIURIContentListener
*
*
aParentListener
)
{
if
(
mWeakParentContentListener
)
{
nsCOMPtr
<
nsIURIContentListener
>
tempListener
=
do_QueryReferent
(
mWeakParentContentListener
)
;
*
aParentListener
=
tempListener
;
NS_IF_ADDREF
(
*
aParentListener
)
;
}
else
{
*
aParentListener
=
mParentContentListener
;
NS_IF_ADDREF
(
*
aParentListener
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsDSURIContentListener
:
:
SetParentContentListener
(
nsIURIContentListener
*
aParentListener
)
{
if
(
aParentListener
)
{
mParentContentListener
=
nullptr
;
mWeakParentContentListener
=
do_GetWeakReference
(
aParentListener
)
;
if
(
!
mWeakParentContentListener
)
{
mParentContentListener
=
aParentListener
;
}
}
else
{
mWeakParentContentListener
=
nullptr
;
mParentContentListener
=
nullptr
;
}
return
NS_OK
;
}
