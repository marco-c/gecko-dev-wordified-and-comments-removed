#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalActorsBinding
.
h
"
#
include
"
mozilla
/
dom
/
SyncedContextInlines
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
namespace
dom
{
template
class
syncedcontext
:
:
Transaction
<
WindowContext
>
;
static
LazyLogModule
gWindowContextLog
(
"
WindowContext
"
)
;
using
WindowContextByIdMap
=
nsDataHashtable
<
nsUint64HashKey
WindowContext
*
>
;
static
StaticAutoPtr
<
WindowContextByIdMap
>
gWindowContexts
;
LogModule
*
WindowContext
:
:
GetLog
(
)
{
return
gWindowContextLog
;
}
already_AddRefed
<
WindowContext
>
WindowContext
:
:
GetById
(
uint64_t
aInnerWindowId
)
{
if
(
!
gWindowContexts
)
{
return
nullptr
;
}
return
do_AddRef
(
gWindowContexts
-
>
Get
(
aInnerWindowId
)
)
;
}
BrowsingContextGroup
*
WindowContext
:
:
Group
(
)
const
{
return
mBrowsingContext
-
>
Group
(
)
;
}
WindowGlobalParent
*
WindowContext
:
:
Canonical
(
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
WindowGlobalParent
*
>
(
this
)
;
}
bool
WindowContext
:
:
IsCached
(
)
const
{
return
mBrowsingContext
-
>
mCurrentWindowContext
!
=
this
;
}
nsIGlobalObject
*
WindowContext
:
:
GetParentObject
(
)
const
{
return
xpc
:
:
NativeGlobal
(
xpc
:
:
PrivilegedJunkScope
(
)
)
;
}
void
WindowContext
:
:
AppendChildBrowsingContext
(
BrowsingContext
*
aBrowsingContext
)
{
MOZ_DIAGNOSTIC_ASSERT
(
Group
(
)
=
=
aBrowsingContext
-
>
Group
(
)
"
Mismatched
groups
?
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mChildren
.
Contains
(
aBrowsingContext
)
)
;
mChildren
.
AppendElement
(
aBrowsingContext
)
;
if
(
!
IsCached
(
)
)
{
BrowsingContext_Binding
:
:
ClearCachedChildrenValue
(
mBrowsingContext
)
;
}
}
void
WindowContext
:
:
RemoveChildBrowsingContext
(
BrowsingContext
*
aBrowsingContext
)
{
MOZ_DIAGNOSTIC_ASSERT
(
Group
(
)
=
=
aBrowsingContext
-
>
Group
(
)
"
Mismatched
groups
?
"
)
;
mChildren
.
RemoveElement
(
aBrowsingContext
)
;
if
(
!
IsCached
(
)
)
{
BrowsingContext_Binding
:
:
ClearCachedChildrenValue
(
mBrowsingContext
)
;
}
}
void
WindowContext
:
:
SendCommitTransaction
(
ContentParent
*
aParent
const
BaseTransaction
&
aTxn
uint64_t
aEpoch
)
{
Unused
<
<
aParent
-
>
SendCommitWindowContextTransaction
(
this
aTxn
aEpoch
)
;
}
void
WindowContext
:
:
SendCommitTransaction
(
ContentChild
*
aChild
const
BaseTransaction
&
aTxn
uint64_t
aEpoch
)
{
aChild
-
>
SendCommitWindowContextTransaction
(
this
aTxn
aEpoch
)
;
}
already_AddRefed
<
WindowContext
>
WindowContext
:
:
Create
(
WindowGlobalChild
*
aWindow
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsContentProcess
(
)
"
Should
be
a
WindowGlobalParent
in
the
parent
"
)
;
FieldTuple
init
;
mozilla
:
:
Get
<
IDX_OuterWindowId
>
(
init
)
=
aWindow
-
>
OuterWindowId
(
)
;
RefPtr
<
WindowContext
>
context
=
new
WindowContext
(
aWindow
-
>
BrowsingContext
(
)
aWindow
-
>
InnerWindowId
(
)
std
:
:
move
(
init
)
)
;
context
-
>
Init
(
)
;
return
context
.
forget
(
)
;
}
void
WindowContext
:
:
CreateFromIPC
(
IPCInitializer
&
&
aInit
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsContentProcess
(
)
"
Should
be
a
WindowGlobalParent
in
the
parent
"
)
;
RefPtr
<
BrowsingContext
>
bc
=
BrowsingContext
:
:
Get
(
aInit
.
mBrowsingContextId
)
;
MOZ_RELEASE_ASSERT
(
bc
)
;
if
(
bc
-
>
IsDiscarded
(
)
)
{
return
;
}
RefPtr
<
WindowContext
>
context
=
new
WindowContext
(
bc
aInit
.
mInnerWindowId
std
:
:
move
(
aInit
.
mFields
)
)
;
context
-
>
Init
(
)
;
}
void
WindowContext
:
:
Init
(
)
{
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
Registering
0x
%
"
PRIx64
"
(
bc
=
0x
%
"
PRIx64
"
)
"
mInnerWindowId
mBrowsingContext
-
>
Id
(
)
)
)
;
if
(
!
gWindowContexts
)
{
gWindowContexts
=
new
WindowContextByIdMap
(
)
;
ClearOnShutdown
(
&
gWindowContexts
)
;
}
auto
&
entry
=
gWindowContexts
-
>
GetOrInsert
(
mInnerWindowId
)
;
MOZ_RELEASE_ASSERT
(
!
entry
"
Duplicate
WindowContext
for
ID
!
"
)
;
entry
=
this
;
mBrowsingContext
-
>
RegisterWindowContext
(
this
)
;
}
void
WindowContext
:
:
Discard
(
)
{
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
Discarding
0x
%
"
PRIx64
"
(
bc
=
0x
%
"
PRIx64
"
)
"
mInnerWindowId
mBrowsingContext
-
>
Id
(
)
)
)
;
if
(
mIsDiscarded
)
{
return
;
}
mBrowsingContext
-
>
UnregisterWindowContext
(
this
)
;
gWindowContexts
-
>
Remove
(
InnerWindowId
(
)
)
;
mIsDiscarded
=
true
;
}
WindowContext
:
:
WindowContext
(
BrowsingContext
*
aBrowsingContext
uint64_t
aInnerWindowId
FieldTuple
&
&
aFields
)
:
mFields
(
std
:
:
move
(
aFields
)
)
mInnerWindowId
(
aInnerWindowId
)
mBrowsingContext
(
aBrowsingContext
)
{
MOZ_ASSERT
(
mBrowsingContext
)
;
MOZ_ASSERT
(
mInnerWindowId
)
;
}
WindowContext
:
:
~
WindowContext
(
)
{
if
(
gWindowContexts
)
{
gWindowContexts
-
>
Remove
(
InnerWindowId
(
)
)
;
}
}
JSObject
*
WindowContext
:
:
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
WindowContext_Binding
:
:
Wrap
(
cx
this
aGivenProto
)
;
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
WindowContext
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
WindowContext
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
WindowContext
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
WindowContext
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
WindowContext
)
if
(
gWindowContexts
)
{
gWindowContexts
-
>
Remove
(
tmp
-
>
InnerWindowId
(
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mBrowsingContext
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChildren
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
WindowContext
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mBrowsingContext
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChildren
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_WRAPPERCACHE
(
WindowContext
)
}
namespace
ipc
{
void
IPDLParamTraits
<
dom
:
:
MaybeDiscarded
<
dom
:
:
WindowContext
>
>
:
:
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
const
dom
:
:
MaybeDiscarded
<
dom
:
:
WindowContext
>
&
aParam
)
{
uint64_t
id
=
aParam
.
ContextId
(
)
;
WriteIPDLParam
(
aMsg
aActor
id
)
;
}
bool
IPDLParamTraits
<
dom
:
:
MaybeDiscarded
<
dom
:
:
WindowContext
>
>
:
:
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
dom
:
:
MaybeDiscarded
<
dom
:
:
WindowContext
>
*
aResult
)
{
uint64_t
id
=
0
;
if
(
!
ReadIPDLParam
(
aMsg
aIter
aActor
&
id
)
)
{
return
false
;
}
if
(
id
=
=
0
)
{
*
aResult
=
nullptr
;
}
else
if
(
RefPtr
<
dom
:
:
WindowContext
>
wc
=
dom
:
:
WindowContext
:
:
GetById
(
id
)
)
{
*
aResult
=
std
:
:
move
(
wc
)
;
}
else
{
aResult
-
>
SetDiscarded
(
id
)
;
}
return
true
;
}
void
IPDLParamTraits
<
dom
:
:
WindowContext
:
:
IPCInitializer
>
:
:
Write
(
IPC
:
:
Message
*
aMessage
IProtocol
*
aActor
const
dom
:
:
WindowContext
:
:
IPCInitializer
&
aInit
)
{
WriteIPDLParam
(
aMessage
aActor
aInit
.
mInnerWindowId
)
;
WriteIPDLParam
(
aMessage
aActor
aInit
.
mBrowsingContextId
)
;
WriteIPDLParam
(
aMessage
aActor
aInit
.
mFields
)
;
}
bool
IPDLParamTraits
<
dom
:
:
WindowContext
:
:
IPCInitializer
>
:
:
Read
(
const
IPC
:
:
Message
*
aMessage
PickleIterator
*
aIterator
IProtocol
*
aActor
dom
:
:
WindowContext
:
:
IPCInitializer
*
aInit
)
{
return
ReadIPDLParam
(
aMessage
aIterator
aActor
&
aInit
-
>
mInnerWindowId
)
&
&
ReadIPDLParam
(
aMessage
aIterator
aActor
&
aInit
-
>
mBrowsingContextId
)
&
&
ReadIPDLParam
(
aMessage
aIterator
aActor
&
aInit
-
>
mFields
)
;
}
template
struct
IPDLParamTraits
<
dom
:
:
WindowContext
:
:
BaseTransaction
>
;
}
}
