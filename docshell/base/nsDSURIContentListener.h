#
ifndef
nsDSURIContentListener_h__
#
define
nsDSURIContentListener_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIURIContentListener
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsDocShell
;
class
nsIWebNavigationInfo
;
class
nsIHttpChannel
;
class
nsAString
;
class
nsDSURIContentListener
final
:
public
nsIURIContentListener
public
nsSupportsWeakReference
{
friend
class
nsDocShell
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIURICONTENTLISTENER
nsresult
Init
(
)
;
static
bool
CheckFrameOptions
(
nsIChannel
*
aChannel
nsIDocShell
*
aDocShell
nsIPrincipal
*
aPrincipal
)
;
protected
:
explicit
nsDSURIContentListener
(
nsDocShell
*
aDocShell
)
;
virtual
~
nsDSURIContentListener
(
)
;
void
DropDocShellReference
(
)
{
mDocShell
=
nullptr
;
mExistingJPEGRequest
=
nullptr
;
mExistingJPEGStreamListener
=
nullptr
;
}
static
bool
CheckOneFrameOptionsPolicy
(
nsIHttpChannel
*
aHttpChannel
const
nsAString
&
aPolicy
nsIDocShell
*
aDocShell
)
;
enum
XFOHeader
{
eDENY
eSAMEORIGIN
eALLOWFROM
}
;
static
void
ReportXFOViolation
(
nsIDocShellTreeItem
*
aTopDocShellItem
nsIURI
*
aThisURI
XFOHeader
aHeader
)
;
protected
:
nsDocShell
*
mDocShell
;
nsCOMPtr
<
nsIStreamListener
>
mExistingJPEGStreamListener
;
nsCOMPtr
<
nsIChannel
>
mExistingJPEGRequest
;
nsWeakPtr
mWeakParentContentListener
;
nsIURIContentListener
*
mParentContentListener
;
nsCOMPtr
<
nsIWebNavigationInfo
>
mNavInfo
;
}
;
#
endif
