#
include
"
nsWebNavigationInfo
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsIDocumentLoaderFactory
.
h
"
#
include
"
nsIPluginHost
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
imgLoader
.
h
"
#
include
"
nsPluginHost
.
h
"
NS_IMPL_ISUPPORTS
(
nsWebNavigationInfo
nsIWebNavigationInfo
)
nsresult
nsWebNavigationInfo
:
:
Init
(
)
{
nsresult
rv
;
mCategoryManager
=
do_GetService
(
NS_CATEGORYMANAGER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebNavigationInfo
:
:
IsTypeSupported
(
const
nsACString
&
aType
nsIWebNavigation
*
aWebNav
uint32_t
*
aIsTypeSupported
)
{
MOZ_ASSERT
(
aIsTypeSupported
"
null
out
param
?
"
)
;
*
aIsTypeSupported
=
nsIWebNavigationInfo
:
:
UNSUPPORTED
;
if
(
aType
.
LowerCaseEqualsLiteral
(
"
application
/
pdf
"
)
&
&
nsContentUtils
:
:
IsPDFJSEnabled
(
)
)
{
return
NS_OK
;
}
const
nsCString
&
flatType
=
PromiseFlatCString
(
aType
)
;
nsresult
rv
=
IsTypeSupportedInternal
(
flatType
aIsTypeSupported
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
*
aIsTypeSupported
)
{
return
rv
;
}
if
(
!
nsPluginHost
:
:
CanUsePluginForMIMEType
(
aType
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
(
do_QueryInterface
(
aWebNav
)
)
;
bool
allowed
;
if
(
docShell
&
&
NS_SUCCEEDED
(
docShell
-
>
GetAllowPlugins
(
&
allowed
)
)
&
&
!
allowed
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIPluginHost
>
pluginHost
=
do_GetService
(
MOZ_PLUGIN_HOST_CONTRACTID
)
;
if
(
pluginHost
)
{
rv
=
pluginHost
-
>
ReloadPlugins
(
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
return
IsTypeSupportedInternal
(
flatType
aIsTypeSupported
)
;
}
}
return
NS_OK
;
}
nsresult
nsWebNavigationInfo
:
:
IsTypeSupportedInternal
(
const
nsCString
&
aType
uint32_t
*
aIsSupported
)
{
MOZ_ASSERT
(
aIsSupported
"
Null
out
param
?
"
)
;
nsContentUtils
:
:
ContentViewerType
vtype
=
nsContentUtils
:
:
TYPE_UNSUPPORTED
;
nsCOMPtr
<
nsIDocumentLoaderFactory
>
docLoaderFactory
=
nsContentUtils
:
:
FindInternalContentViewer
(
aType
&
vtype
)
;
switch
(
vtype
)
{
case
nsContentUtils
:
:
TYPE_UNSUPPORTED
:
*
aIsSupported
=
nsIWebNavigationInfo
:
:
UNSUPPORTED
;
break
;
case
nsContentUtils
:
:
TYPE_PLUGIN
:
*
aIsSupported
=
nsIWebNavigationInfo
:
:
PLUGIN
;
break
;
case
nsContentUtils
:
:
TYPE_UNKNOWN
:
*
aIsSupported
=
nsIWebNavigationInfo
:
:
OTHER
;
break
;
case
nsContentUtils
:
:
TYPE_CONTENT
:
if
(
imgLoader
:
:
SupportImageWithMimeType
(
aType
.
get
(
)
)
)
{
*
aIsSupported
=
nsIWebNavigationInfo
:
:
IMAGE
;
}
else
{
*
aIsSupported
=
nsIWebNavigationInfo
:
:
OTHER
;
}
break
;
}
return
NS_OK
;
}
