#
ifndef
mozilla_IHistory_h_
#
define
mozilla_IHistory_h_
#
include
"
nsISupports
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsTObserverArray
.
h
"
class
nsIURI
;
class
nsIWidget
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
class
Link
;
}
#
define
IHISTORY_IID
\
{
\
0x0057c9d3
0xb98e
0x4933
{
\
0xbd
0xc5
0x02
0x75
0xd0
0x67
0x05
0xe1
\
}
\
}
class
IHistory
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
IHISTORY_IID
)
virtual
void
RegisterVisitedCallback
(
nsIURI
*
aURI
dom
:
:
Link
*
aLink
)
=
0
;
virtual
void
UnregisterVisitedCallback
(
nsIURI
*
aURI
dom
:
:
Link
*
aLink
)
=
0
;
enum
class
VisitedStatus
:
uint8_t
{
Unknown
Visited
Unvisited
}
;
virtual
void
NotifyVisited
(
nsIURI
*
VisitedStatus
)
=
0
;
enum
VisitFlags
{
TOP_LEVEL
=
1
<
<
0
REDIRECT_PERMANENT
=
1
<
<
1
REDIRECT_TEMPORARY
=
1
<
<
2
REDIRECT_SOURCE
=
1
<
<
3
UNRECOVERABLE_ERROR
=
1
<
<
4
REDIRECT_SOURCE_PERMANENT
=
1
<
<
5
}
;
NS_IMETHOD
VisitURI
(
nsIWidget
*
aWidget
nsIURI
*
aURI
nsIURI
*
aLastVisitedURI
uint32_t
aFlags
)
=
0
;
NS_IMETHOD
SetURITitle
(
nsIURI
*
aURI
const
nsAString
&
aTitle
)
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
IHistory
IHISTORY_IID
)
}
#
endif
