#
include
"
mozilla
/
dom
/
ChromeBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
namespace
mozilla
{
namespace
dom
{
extern
mozilla
:
:
LazyLogModule
gUserInteractionPRLog
;
#
define
USER_ACTIVATION_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gUserInteractionPRLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
ChromeBrowsingContext
:
:
ChromeBrowsingContext
(
BrowsingContext
*
aParent
BrowsingContext
*
aOpener
const
nsAString
&
aName
uint64_t
aBrowsingContextId
uint64_t
aProcessId
BrowsingContext
:
:
Type
aType
)
:
BrowsingContext
(
aParent
aOpener
aName
aBrowsingContextId
aType
)
mProcessId
(
aProcessId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
void
ChromeBrowsingContext
:
:
CleanupContexts
(
uint64_t
aProcessId
)
{
nsTArray
<
RefPtr
<
BrowsingContext
>
>
roots
;
BrowsingContext
:
:
GetRootBrowsingContexts
(
roots
)
;
for
(
RefPtr
<
BrowsingContext
>
context
:
roots
)
{
if
(
Cast
(
context
)
-
>
IsOwnedByProcess
(
aProcessId
)
)
{
context
-
>
Detach
(
)
;
}
}
}
already_AddRefed
<
ChromeBrowsingContext
>
ChromeBrowsingContext
:
:
Get
(
uint64_t
aId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
BrowsingContext
:
:
Get
(
aId
)
.
downcast
<
ChromeBrowsingContext
>
(
)
;
}
ChromeBrowsingContext
*
ChromeBrowsingContext
:
:
Cast
(
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
ChromeBrowsingContext
*
>
(
aContext
)
;
}
const
ChromeBrowsingContext
*
ChromeBrowsingContext
:
:
Cast
(
const
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
const
ChromeBrowsingContext
*
>
(
aContext
)
;
}
void
ChromeBrowsingContext
:
:
GetWindowGlobals
(
nsTArray
<
RefPtr
<
WindowGlobalParent
>
>
&
aWindows
)
{
aWindows
.
SetCapacity
(
mWindowGlobals
.
Count
(
)
)
;
for
(
auto
iter
=
mWindowGlobals
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aWindows
.
AppendElement
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
}
}
void
ChromeBrowsingContext
:
:
RegisterWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
{
MOZ_ASSERT
(
!
mWindowGlobals
.
Contains
(
aGlobal
)
"
Global
already
registered
!
"
)
;
mWindowGlobals
.
PutEntry
(
aGlobal
)
;
}
void
ChromeBrowsingContext
:
:
UnregisterWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
{
MOZ_ASSERT
(
mWindowGlobals
.
Contains
(
aGlobal
)
"
Global
not
registered
!
"
)
;
mWindowGlobals
.
RemoveEntry
(
aGlobal
)
;
if
(
aGlobal
=
=
mCurrentWindowGlobal
)
{
mCurrentWindowGlobal
=
nullptr
;
}
}
void
ChromeBrowsingContext
:
:
SetCurrentWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
{
MOZ_ASSERT
(
mWindowGlobals
.
Contains
(
aGlobal
)
"
Global
not
registered
!
"
)
;
mCurrentWindowGlobal
=
aGlobal
;
}
JSObject
*
ChromeBrowsingContext
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
ChromeBrowsingContext_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
ChromeBrowsingContext
:
:
NotifyUserGestureActivationFromIPC
(
)
{
if
(
!
mCurrentWindowGlobal
)
{
return
;
}
SetUserGestureActivation
(
)
;
USER_ACTIVATION_LOG
(
"
Chrome
browsing
context
0x
%
08
"
PRIx64
"
would
notify
other
browsing
contexts
for
setting
"
"
user
gesture
activation
.
"
Id
(
)
)
;
}
void
ChromeBrowsingContext
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
{
ChromeBrowsingContext
*
tmp
=
this
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWindowGlobals
)
;
}
void
ChromeBrowsingContext
:
:
Unlink
(
)
{
ChromeBrowsingContext
*
tmp
=
this
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWindowGlobals
)
;
}
}
}
