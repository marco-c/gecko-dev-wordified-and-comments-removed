#
include
"
ChromeBrowsingContext
.
h
"
namespace
mozilla
{
namespace
dom
{
ChromeBrowsingContext
:
:
ChromeBrowsingContext
(
uint64_t
aBrowsingContextId
const
nsAString
&
aName
uint64_t
aProcessId
)
:
BrowsingContext
(
aBrowsingContextId
aName
)
mProcessId
(
aProcessId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
ChromeBrowsingContext
:
:
ChromeBrowsingContext
(
nsIDocShell
*
aDocShell
)
:
BrowsingContext
(
aDocShell
)
mProcessId
(
0
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
void
ChromeBrowsingContext
:
:
CleanupContexts
(
uint64_t
aProcessId
)
{
nsTArray
<
RefPtr
<
BrowsingContext
>
>
roots
;
BrowsingContext
:
:
GetRootBrowsingContexts
(
roots
)
;
for
(
RefPtr
<
BrowsingContext
>
context
:
roots
)
{
if
(
Cast
(
context
)
-
>
IsOwnedByProcess
(
aProcessId
)
)
{
context
-
>
Detach
(
)
;
}
}
}
already_AddRefed
<
ChromeBrowsingContext
>
ChromeBrowsingContext
:
:
Get
(
uint64_t
aId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
BrowsingContext
:
:
Get
(
aId
)
.
downcast
<
ChromeBrowsingContext
>
(
)
;
}
ChromeBrowsingContext
*
ChromeBrowsingContext
:
:
Cast
(
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
ChromeBrowsingContext
*
>
(
aContext
)
;
}
already_AddRefed
<
ChromeBrowsingContext
>
ChromeBrowsingContext
:
:
Create
(
uint64_t
aBrowsingContextId
const
nsAString
&
aName
uint64_t
aProcessId
)
{
return
do_AddRef
(
new
ChromeBrowsingContext
(
aBrowsingContextId
aName
aProcessId
)
)
;
}
}
}
