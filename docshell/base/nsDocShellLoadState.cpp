#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
SHEntryParent
.
h
"
#
include
"
SHEntryChild
.
h
"
#
include
"
nsISHEntry
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
ReferrerInfo
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
LoadURIOptionsBinding
.
h
"
#
include
"
mozilla
/
StaticPrefs_fission
.
h
"
#
include
"
mozilla
/
OriginAttributes
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
dom
/
PContent
.
h
"
static
mozilla
:
:
StaticRefPtr
<
nsIURIFixup
>
sURIFixup
;
namespace
{
already_AddRefed
<
nsIURIFixupInfo
>
GetFixupURIInfo
(
const
nsACString
&
aStringURI
uint32_t
aFixupFlags
nsIInputStream
*
*
aPostData
)
{
nsCOMPtr
<
nsIURIFixupInfo
>
info
;
if
(
XRE_IsContentProcess
(
)
)
{
dom
:
:
ContentChild
*
contentChild
=
dom
:
:
ContentChild
:
:
GetSingleton
(
)
;
if
(
!
contentChild
)
{
return
nullptr
;
}
RefPtr
<
nsIInputStream
>
postData
;
RefPtr
<
nsIURI
>
fixedURI
preferredURI
;
nsAutoString
providerName
;
nsAutoCString
stringURI
(
aStringURI
)
;
if
(
contentChild
-
>
SendGetFixupURIInfo
(
stringURI
aFixupFlags
&
providerName
&
postData
&
fixedURI
&
preferredURI
)
)
{
if
(
preferredURI
)
{
info
=
do_CreateInstance
(
"
mozilla
.
org
/
docshell
/
uri
-
fixup
-
info
;
1
"
)
;
if
(
NS_WARN_IF
(
!
info
)
)
{
return
nullptr
;
}
info
-
>
SetKeywordProviderName
(
providerName
)
;
if
(
aPostData
)
{
postData
.
forget
(
aPostData
)
;
}
info
-
>
SetFixedURI
(
fixedURI
)
;
info
-
>
SetPreferredURI
(
preferredURI
)
;
}
}
}
else
{
sURIFixup
-
>
GetFixupURIInfo
(
aStringURI
aFixupFlags
aPostData
getter_AddRefs
(
info
)
)
;
}
return
info
.
forget
(
)
;
}
}
nsDocShellLoadState
:
:
nsDocShellLoadState
(
nsIURI
*
aURI
)
:
mURI
(
aURI
)
mResultPrincipalURIIsSome
(
false
)
mKeepResultPrincipalURIIfSet
(
false
)
mLoadReplace
(
false
)
mInheritPrincipal
(
false
)
mPrincipalIsExplicit
(
false
)
mForceAllowDataURI
(
false
)
mOriginalFrameSrc
(
false
)
mIsFormSubmission
(
false
)
mLoadType
(
LOAD_NORMAL
)
mTarget
(
)
mSrcdocData
(
VoidString
(
)
)
mLoadFlags
(
0
)
mFirstParty
(
false
)
mHasValidUserGestureActivation
(
false
)
mTypeHint
(
VoidCString
(
)
)
mFileName
(
VoidString
(
)
)
mIsFromProcessingFrameAttributes
(
false
)
mLoadIdentifier
(
0
)
{
MOZ_ASSERT
(
aURI
"
Cannot
create
a
LoadState
with
a
null
URI
!
"
)
;
}
nsDocShellLoadState
:
:
nsDocShellLoadState
(
const
DocShellLoadStateInit
&
aLoadState
)
{
MOZ_ASSERT
(
aLoadState
.
URI
(
)
"
Cannot
create
a
LoadState
with
a
null
URI
!
"
)
;
mResultPrincipalURI
=
aLoadState
.
ResultPrincipalURI
(
)
;
mResultPrincipalURIIsSome
=
aLoadState
.
ResultPrincipalURIIsSome
(
)
;
mKeepResultPrincipalURIIfSet
=
aLoadState
.
KeepResultPrincipalURIIfSet
(
)
;
mLoadReplace
=
aLoadState
.
LoadReplace
(
)
;
mInheritPrincipal
=
aLoadState
.
InheritPrincipal
(
)
;
mPrincipalIsExplicit
=
aLoadState
.
PrincipalIsExplicit
(
)
;
mForceAllowDataURI
=
aLoadState
.
ForceAllowDataURI
(
)
;
mOriginalFrameSrc
=
aLoadState
.
OriginalFrameSrc
(
)
;
mIsFormSubmission
=
aLoadState
.
IsFormSubmission
(
)
;
mLoadType
=
aLoadState
.
LoadType
(
)
;
mTarget
=
aLoadState
.
Target
(
)
;
mLoadFlags
=
aLoadState
.
LoadFlags
(
)
;
mFirstParty
=
aLoadState
.
FirstParty
(
)
;
mHasValidUserGestureActivation
=
aLoadState
.
HasValidUserGestureActivation
(
)
;
mTypeHint
=
aLoadState
.
TypeHint
(
)
;
mFileName
=
aLoadState
.
FileName
(
)
;
mIsFromProcessingFrameAttributes
=
aLoadState
.
IsFromProcessingFrameAttributes
(
)
;
mReferrerInfo
=
aLoadState
.
ReferrerInfo
(
)
;
mURI
=
aLoadState
.
URI
(
)
;
mOriginalURI
=
aLoadState
.
OriginalURI
(
)
;
mSourceBrowsingContext
=
aLoadState
.
SourceBrowsingContext
(
)
;
mBaseURI
=
aLoadState
.
BaseURI
(
)
;
mTriggeringPrincipal
=
aLoadState
.
TriggeringPrincipal
(
)
;
mPrincipalToInherit
=
aLoadState
.
PrincipalToInherit
(
)
;
mStoragePrincipalToInherit
=
aLoadState
.
StoragePrincipalToInherit
(
)
;
mCsp
=
aLoadState
.
Csp
(
)
;
mOriginalURIString
=
aLoadState
.
OriginalURIString
(
)
;
mCancelContentJSEpoch
=
aLoadState
.
CancelContentJSEpoch
(
)
;
mPostDataStream
=
aLoadState
.
PostDataStream
(
)
;
mHeadersStream
=
aLoadState
.
HeadersStream
(
)
;
mSrcdocData
=
aLoadState
.
SrcdocData
(
)
;
mLoadIdentifier
=
aLoadState
.
LoadIdentifier
(
)
;
if
(
!
aLoadState
.
SHEntry
(
)
|
|
!
StaticPrefs
:
:
fission_sessionHistoryInParent
(
)
)
{
return
;
}
if
(
XRE_IsParentProcess
(
)
)
{
mSHEntry
=
static_cast
<
LegacySHEntry
*
>
(
aLoadState
.
SHEntry
(
)
)
;
}
else
{
mSHEntry
=
static_cast
<
SHEntryChild
*
>
(
aLoadState
.
SHEntry
(
)
)
;
}
}
nsDocShellLoadState
:
:
nsDocShellLoadState
(
const
nsDocShellLoadState
&
aOther
)
:
mReferrerInfo
(
aOther
.
mReferrerInfo
)
mURI
(
aOther
.
mURI
)
mOriginalURI
(
aOther
.
mOriginalURI
)
mResultPrincipalURI
(
aOther
.
mResultPrincipalURI
)
mResultPrincipalURIIsSome
(
aOther
.
mResultPrincipalURIIsSome
)
mTriggeringPrincipal
(
aOther
.
mTriggeringPrincipal
)
mCsp
(
aOther
.
mCsp
)
mKeepResultPrincipalURIIfSet
(
aOther
.
mKeepResultPrincipalURIIfSet
)
mLoadReplace
(
aOther
.
mLoadReplace
)
mInheritPrincipal
(
aOther
.
mInheritPrincipal
)
mPrincipalIsExplicit
(
aOther
.
mPrincipalIsExplicit
)
mPrincipalToInherit
(
aOther
.
mPrincipalToInherit
)
mStoragePrincipalToInherit
(
aOther
.
mStoragePrincipalToInherit
)
mForceAllowDataURI
(
aOther
.
mForceAllowDataURI
)
mOriginalFrameSrc
(
aOther
.
mOriginalFrameSrc
)
mIsFormSubmission
(
aOther
.
mIsFormSubmission
)
mLoadType
(
aOther
.
mLoadType
)
mSHEntry
(
aOther
.
mSHEntry
)
mTarget
(
aOther
.
mTarget
)
mPostDataStream
(
aOther
.
mPostDataStream
)
mHeadersStream
(
aOther
.
mHeadersStream
)
mSrcdocData
(
aOther
.
mSrcdocData
)
mSourceBrowsingContext
(
aOther
.
mSourceBrowsingContext
)
mBaseURI
(
aOther
.
mBaseURI
)
mLoadFlags
(
aOther
.
mLoadFlags
)
mFirstParty
(
aOther
.
mFirstParty
)
mHasValidUserGestureActivation
(
aOther
.
mHasValidUserGestureActivation
)
mTypeHint
(
aOther
.
mTypeHint
)
mFileName
(
aOther
.
mFileName
)
mIsFromProcessingFrameAttributes
(
aOther
.
mIsFromProcessingFrameAttributes
)
mPendingRedirectedChannel
(
aOther
.
mPendingRedirectedChannel
)
mOriginalURIString
(
aOther
.
mOriginalURIString
)
mCancelContentJSEpoch
(
aOther
.
mCancelContentJSEpoch
)
mLoadIdentifier
(
aOther
.
mLoadIdentifier
)
{
}
nsDocShellLoadState
:
:
~
nsDocShellLoadState
(
)
{
}
nsresult
nsDocShellLoadState
:
:
CreateFromPendingChannel
(
nsIChannel
*
aPendingChannel
nsDocShellLoadState
*
*
aResult
)
{
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
aPendingChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
uri
)
;
loadState
-
>
mPendingRedirectedChannel
=
aPendingChannel
;
nsCOMPtr
<
nsIURI
>
originalUri
;
rv
=
aPendingChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalUri
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
loadState
-
>
SetOriginalURI
(
originalUri
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aPendingChannel
-
>
LoadInfo
(
)
;
loadState
-
>
SetTriggeringPrincipal
(
loadInfo
-
>
TriggeringPrincipal
(
)
)
;
loadState
.
forget
(
aResult
)
;
return
NS_OK
;
}
nsresult
nsDocShellLoadState
:
:
CreateFromLoadURIOptions
(
nsISupports
*
aConsumer
const
nsAString
&
aURI
const
LoadURIOptions
&
aLoadURIOptions
nsDocShellLoadState
*
*
aResult
)
{
uint32_t
loadFlags
=
aLoadURIOptions
.
mLoadFlags
;
NS_ASSERTION
(
(
loadFlags
&
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_LOADURI_SETUP_FLAGS
)
=
=
0
"
Unexpected
flags
"
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsCOMPtr
<
nsIInputStream
>
postData
(
aLoadURIOptions
.
mPostData
)
;
nsresult
rv
=
NS_OK
;
NS_ConvertUTF16toUTF8
uriString
(
aURI
)
;
uriString
.
Trim
(
"
"
)
;
uriString
.
StripCRLF
(
)
;
NS_ENSURE_TRUE
(
!
uriString
.
IsEmpty
(
)
NS_ERROR_FAILURE
)
;
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
uriString
)
;
bool
fixup
=
true
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
uri
&
&
(
uri
-
>
SchemeIs
(
"
about
"
)
|
|
uri
-
>
SchemeIs
(
"
chrome
"
)
)
)
{
loadFlags
&
=
~
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
;
fixup
=
false
;
}
else
if
(
!
sURIFixup
)
{
nsCOMPtr
<
nsIURIFixup
>
uriFixup
=
components
:
:
URIFixup
:
:
Service
(
)
;
if
(
uriFixup
)
{
sURIFixup
=
uriFixup
;
ClearOnShutdown
(
&
sURIFixup
)
;
}
else
{
fixup
=
false
;
}
}
nsCOMPtr
<
nsIURIFixupInfo
>
fixupInfo
;
if
(
fixup
)
{
uint32_t
fixupFlags
;
if
(
NS_FAILED
(
sURIFixup
-
>
WebNavigationFlagsToFixupFlags
(
uriString
loadFlags
&
fixupFlags
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
(
fixupFlags
&
nsIURIFixup
:
:
FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP
)
)
{
loadFlags
&
=
~
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
;
}
nsCOMPtr
<
nsILoadContext
>
loadContext
=
do_QueryInterface
(
aConsumer
)
;
if
(
!
loadContext
)
{
if
(
RefPtr
<
Element
>
element
=
do_QueryObject
(
aConsumer
)
)
{
loadContext
=
do_QueryInterface
(
element
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
)
;
}
}
MOZ_ASSERT
(
loadContext
"
We
should
always
have
a
LoadContext
here
.
"
)
;
if
(
loadContext
&
&
loadContext
-
>
UsePrivateBrowsing
(
)
)
{
fixupFlags
|
=
nsIURIFixup
:
:
FIXUP_FLAG_PRIVATE_CONTEXT
;
}
nsCOMPtr
<
nsIInputStream
>
fixupStream
;
fixupInfo
=
GetFixupURIInfo
(
uriString
fixupFlags
getter_AddRefs
(
fixupStream
)
)
;
if
(
fixupInfo
)
{
rv
=
NS_OK
;
fixupInfo
-
>
GetPreferredURI
(
getter_AddRefs
(
uri
)
)
;
fixupInfo
-
>
SetConsumer
(
aConsumer
)
;
}
if
(
fixupStream
)
{
postData
=
fixupStream
;
}
if
(
fixupInfo
&
&
loadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
)
{
nsCOMPtr
<
nsIObserverService
>
serv
=
services
:
:
GetObserverService
(
)
;
if
(
serv
)
{
serv
-
>
NotifyObservers
(
fixupInfo
"
keyword
-
uri
-
fixup
"
PromiseFlatString
(
aURI
)
.
get
(
)
)
;
}
}
}
if
(
rv
=
=
NS_ERROR_MALFORMED_URI
)
{
MOZ_ASSERT
(
!
uri
)
;
return
rv
;
}
if
(
NS_FAILED
(
rv
)
|
|
!
uri
)
{
return
NS_ERROR_FAILURE
;
}
uint64_t
available
;
if
(
postData
)
{
rv
=
postData
-
>
Available
(
&
available
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
available
=
=
0
)
{
return
NS_ERROR_INVALID_ARG
;
}
}
if
(
aLoadURIOptions
.
mHeaders
)
{
rv
=
aLoadURIOptions
.
mHeaders
-
>
Available
(
&
available
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
available
=
=
0
)
{
return
NS_ERROR_INVALID_ARG
;
}
}
bool
forceAllowDataURI
=
loadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_FORCE_ALLOW_DATA_URI
;
uint32_t
extraFlags
=
(
loadFlags
&
EXTRA_LOAD_FLAGS
)
;
loadFlags
&
=
~
EXTRA_LOAD_FLAGS
;
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
uri
)
;
loadState
-
>
SetReferrerInfo
(
aLoadURIOptions
.
mReferrerInfo
)
;
if
(
loadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_MIXED_CONTENT
)
{
loadState
-
>
SetLoadType
(
MAKE_LOAD_TYPE
(
LOAD_NORMAL_ALLOW_MIXED_CONTENT
loadFlags
)
)
;
}
else
{
loadState
-
>
SetLoadType
(
MAKE_LOAD_TYPE
(
LOAD_NORMAL
loadFlags
)
)
;
}
loadState
-
>
SetLoadFlags
(
extraFlags
)
;
loadState
-
>
SetFirstParty
(
true
)
;
loadState
-
>
SetHasValidUserGestureActivation
(
aLoadURIOptions
.
mHasValidUserGestureActivation
)
;
loadState
-
>
SetPostDataStream
(
postData
)
;
loadState
-
>
SetHeadersStream
(
aLoadURIOptions
.
mHeaders
)
;
loadState
-
>
SetBaseURI
(
aLoadURIOptions
.
mBaseURI
)
;
loadState
-
>
SetTriggeringPrincipal
(
aLoadURIOptions
.
mTriggeringPrincipal
)
;
loadState
-
>
SetCsp
(
aLoadURIOptions
.
mCsp
)
;
loadState
-
>
SetForceAllowDataURI
(
forceAllowDataURI
)
;
loadState
-
>
SetOriginalURIString
(
uriString
)
;
if
(
aLoadURIOptions
.
mCancelContentJSEpoch
)
{
loadState
-
>
SetCancelContentJSEpoch
(
aLoadURIOptions
.
mCancelContentJSEpoch
)
;
}
if
(
fixupInfo
)
{
nsAutoString
searchProvider
keyword
;
fixupInfo
-
>
GetKeywordProviderName
(
searchProvider
)
;
fixupInfo
-
>
GetKeywordAsSent
(
keyword
)
;
nsDocShell
:
:
MaybeNotifyKeywordSearchLoading
(
searchProvider
keyword
)
;
}
loadState
.
forget
(
aResult
)
;
return
NS_OK
;
}
nsIReferrerInfo
*
nsDocShellLoadState
:
:
GetReferrerInfo
(
)
const
{
return
mReferrerInfo
;
}
void
nsDocShellLoadState
:
:
SetReferrerInfo
(
nsIReferrerInfo
*
aReferrerInfo
)
{
mReferrerInfo
=
aReferrerInfo
;
}
nsIURI
*
nsDocShellLoadState
:
:
URI
(
)
const
{
return
mURI
;
}
void
nsDocShellLoadState
:
:
SetURI
(
nsIURI
*
aURI
)
{
mURI
=
aURI
;
}
nsIURI
*
nsDocShellLoadState
:
:
OriginalURI
(
)
const
{
return
mOriginalURI
;
}
void
nsDocShellLoadState
:
:
SetOriginalURI
(
nsIURI
*
aOriginalURI
)
{
mOriginalURI
=
aOriginalURI
;
}
nsIURI
*
nsDocShellLoadState
:
:
ResultPrincipalURI
(
)
const
{
return
mResultPrincipalURI
;
}
void
nsDocShellLoadState
:
:
SetResultPrincipalURI
(
nsIURI
*
aResultPrincipalURI
)
{
mResultPrincipalURI
=
aResultPrincipalURI
;
}
bool
nsDocShellLoadState
:
:
ResultPrincipalURIIsSome
(
)
const
{
return
mResultPrincipalURIIsSome
;
}
void
nsDocShellLoadState
:
:
SetResultPrincipalURIIsSome
(
bool
aIsSome
)
{
mResultPrincipalURIIsSome
=
aIsSome
;
}
bool
nsDocShellLoadState
:
:
KeepResultPrincipalURIIfSet
(
)
const
{
return
mKeepResultPrincipalURIIfSet
;
}
void
nsDocShellLoadState
:
:
SetKeepResultPrincipalURIIfSet
(
bool
aKeep
)
{
mKeepResultPrincipalURIIfSet
=
aKeep
;
}
bool
nsDocShellLoadState
:
:
LoadReplace
(
)
const
{
return
mLoadReplace
;
}
void
nsDocShellLoadState
:
:
SetLoadReplace
(
bool
aLoadReplace
)
{
mLoadReplace
=
aLoadReplace
;
}
nsIPrincipal
*
nsDocShellLoadState
:
:
TriggeringPrincipal
(
)
const
{
return
mTriggeringPrincipal
;
}
void
nsDocShellLoadState
:
:
SetTriggeringPrincipal
(
nsIPrincipal
*
aTriggeringPrincipal
)
{
mTriggeringPrincipal
=
aTriggeringPrincipal
;
}
nsIPrincipal
*
nsDocShellLoadState
:
:
PrincipalToInherit
(
)
const
{
return
mPrincipalToInherit
;
}
void
nsDocShellLoadState
:
:
SetPrincipalToInherit
(
nsIPrincipal
*
aPrincipalToInherit
)
{
mPrincipalToInherit
=
aPrincipalToInherit
;
}
nsIPrincipal
*
nsDocShellLoadState
:
:
StoragePrincipalToInherit
(
)
const
{
return
mStoragePrincipalToInherit
;
}
void
nsDocShellLoadState
:
:
SetStoragePrincipalToInherit
(
nsIPrincipal
*
aStoragePrincipalToInherit
)
{
mStoragePrincipalToInherit
=
aStoragePrincipalToInherit
;
}
void
nsDocShellLoadState
:
:
SetCsp
(
nsIContentSecurityPolicy
*
aCsp
)
{
mCsp
=
aCsp
;
}
nsIContentSecurityPolicy
*
nsDocShellLoadState
:
:
Csp
(
)
const
{
return
mCsp
;
}
bool
nsDocShellLoadState
:
:
InheritPrincipal
(
)
const
{
return
mInheritPrincipal
;
}
void
nsDocShellLoadState
:
:
SetInheritPrincipal
(
bool
aInheritPrincipal
)
{
mInheritPrincipal
=
aInheritPrincipal
;
}
bool
nsDocShellLoadState
:
:
PrincipalIsExplicit
(
)
const
{
return
mPrincipalIsExplicit
;
}
void
nsDocShellLoadState
:
:
SetPrincipalIsExplicit
(
bool
aPrincipalIsExplicit
)
{
mPrincipalIsExplicit
=
aPrincipalIsExplicit
;
}
bool
nsDocShellLoadState
:
:
ForceAllowDataURI
(
)
const
{
return
mForceAllowDataURI
;
}
void
nsDocShellLoadState
:
:
SetForceAllowDataURI
(
bool
aForceAllowDataURI
)
{
mForceAllowDataURI
=
aForceAllowDataURI
;
}
bool
nsDocShellLoadState
:
:
OriginalFrameSrc
(
)
const
{
return
mOriginalFrameSrc
;
}
void
nsDocShellLoadState
:
:
SetOriginalFrameSrc
(
bool
aOriginalFrameSrc
)
{
mOriginalFrameSrc
=
aOriginalFrameSrc
;
}
bool
nsDocShellLoadState
:
:
IsFormSubmission
(
)
const
{
return
mIsFormSubmission
;
}
void
nsDocShellLoadState
:
:
SetIsFormSubmission
(
bool
aIsFormSubmission
)
{
mIsFormSubmission
=
aIsFormSubmission
;
}
uint32_t
nsDocShellLoadState
:
:
LoadType
(
)
const
{
return
mLoadType
;
}
void
nsDocShellLoadState
:
:
SetLoadType
(
uint32_t
aLoadType
)
{
mLoadType
=
aLoadType
;
}
nsISHEntry
*
nsDocShellLoadState
:
:
SHEntry
(
)
const
{
return
mSHEntry
;
}
void
nsDocShellLoadState
:
:
SetSHEntry
(
nsISHEntry
*
aSHEntry
)
{
mSHEntry
=
aSHEntry
;
}
const
nsString
&
nsDocShellLoadState
:
:
Target
(
)
const
{
return
mTarget
;
}
void
nsDocShellLoadState
:
:
SetTarget
(
const
nsAString
&
aTarget
)
{
mTarget
=
aTarget
;
}
nsIInputStream
*
nsDocShellLoadState
:
:
PostDataStream
(
)
const
{
return
mPostDataStream
;
}
void
nsDocShellLoadState
:
:
SetPostDataStream
(
nsIInputStream
*
aStream
)
{
mPostDataStream
=
aStream
;
}
nsIInputStream
*
nsDocShellLoadState
:
:
HeadersStream
(
)
const
{
return
mHeadersStream
;
}
void
nsDocShellLoadState
:
:
SetHeadersStream
(
nsIInputStream
*
aHeadersStream
)
{
mHeadersStream
=
aHeadersStream
;
}
const
nsString
&
nsDocShellLoadState
:
:
SrcdocData
(
)
const
{
return
mSrcdocData
;
}
void
nsDocShellLoadState
:
:
SetSrcdocData
(
const
nsAString
&
aSrcdocData
)
{
mSrcdocData
=
aSrcdocData
;
}
void
nsDocShellLoadState
:
:
SetSourceBrowsingContext
(
BrowsingContext
*
aSourceBrowsingContext
)
{
mSourceBrowsingContext
=
aSourceBrowsingContext
;
}
nsIURI
*
nsDocShellLoadState
:
:
BaseURI
(
)
const
{
return
mBaseURI
;
}
void
nsDocShellLoadState
:
:
SetBaseURI
(
nsIURI
*
aBaseURI
)
{
mBaseURI
=
aBaseURI
;
}
void
nsDocShellLoadState
:
:
GetMaybeResultPrincipalURI
(
mozilla
:
:
Maybe
<
nsCOMPtr
<
nsIURI
>
>
&
aRPURI
)
const
{
bool
isSome
=
ResultPrincipalURIIsSome
(
)
;
aRPURI
.
reset
(
)
;
if
(
!
isSome
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
uri
=
ResultPrincipalURI
(
)
;
aRPURI
.
emplace
(
std
:
:
move
(
uri
)
)
;
}
void
nsDocShellLoadState
:
:
SetMaybeResultPrincipalURI
(
mozilla
:
:
Maybe
<
nsCOMPtr
<
nsIURI
>
>
const
&
aRPURI
)
{
SetResultPrincipalURI
(
aRPURI
.
refOr
(
nullptr
)
)
;
SetResultPrincipalURIIsSome
(
aRPURI
.
isSome
(
)
)
;
}
uint32_t
nsDocShellLoadState
:
:
LoadFlags
(
)
const
{
return
mLoadFlags
;
}
void
nsDocShellLoadState
:
:
SetLoadFlags
(
uint32_t
aLoadFlags
)
{
mLoadFlags
=
aLoadFlags
;
}
void
nsDocShellLoadState
:
:
SetLoadFlag
(
uint32_t
aFlag
)
{
mLoadFlags
|
=
aFlag
;
}
void
nsDocShellLoadState
:
:
UnsetLoadFlag
(
uint32_t
aFlag
)
{
mLoadFlags
&
=
~
aFlag
;
}
bool
nsDocShellLoadState
:
:
HasLoadFlags
(
uint32_t
aFlags
)
{
return
(
mLoadFlags
&
aFlags
)
=
=
aFlags
;
}
bool
nsDocShellLoadState
:
:
FirstParty
(
)
const
{
return
mFirstParty
;
}
void
nsDocShellLoadState
:
:
SetFirstParty
(
bool
aFirstParty
)
{
mFirstParty
=
aFirstParty
;
}
bool
nsDocShellLoadState
:
:
HasValidUserGestureActivation
(
)
const
{
return
mHasValidUserGestureActivation
;
}
void
nsDocShellLoadState
:
:
SetHasValidUserGestureActivation
(
bool
aHasValidUserGestureActivation
)
{
mHasValidUserGestureActivation
=
aHasValidUserGestureActivation
;
}
const
nsCString
&
nsDocShellLoadState
:
:
TypeHint
(
)
const
{
return
mTypeHint
;
}
void
nsDocShellLoadState
:
:
SetTypeHint
(
const
nsCString
&
aTypeHint
)
{
mTypeHint
=
aTypeHint
;
}
const
nsString
&
nsDocShellLoadState
:
:
FileName
(
)
const
{
return
mFileName
;
}
void
nsDocShellLoadState
:
:
SetFileName
(
const
nsAString
&
aFileName
)
{
mFileName
=
aFileName
;
}
nsresult
nsDocShellLoadState
:
:
SetupInheritingPrincipal
(
BrowsingContext
:
:
Type
aType
const
mozilla
:
:
OriginAttributes
&
aOriginAttributes
)
{
mPrincipalToInherit
=
mTriggeringPrincipal
;
if
(
mPrincipalToInherit
&
&
aType
!
=
BrowsingContext
:
:
Type
:
:
Chrome
)
{
if
(
mPrincipalToInherit
-
>
IsSystemPrincipal
(
)
)
{
if
(
mPrincipalIsExplicit
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
mPrincipalToInherit
=
nullptr
;
mInheritPrincipal
=
true
;
}
else
if
(
nsContentUtils
:
:
IsExpandedPrincipal
(
mPrincipalToInherit
)
)
{
if
(
mPrincipalIsExplicit
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
mPrincipalToInherit
=
NullPrincipal
:
:
CreateWithInheritedAttributes
(
aOriginAttributes
false
)
;
mInheritPrincipal
=
false
;
}
}
if
(
!
mPrincipalToInherit
&
&
!
mInheritPrincipal
&
&
!
mPrincipalIsExplicit
)
{
mInheritPrincipal
=
nsContentUtils
:
:
LegacyIsCallerChromeOrNativeCode
(
)
;
}
if
(
mLoadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_DISALLOW_INHERIT_PRINCIPAL
)
{
mInheritPrincipal
=
false
;
mPrincipalToInherit
=
NullPrincipal
:
:
CreateWithInheritedAttributes
(
aOriginAttributes
mFirstParty
)
;
}
return
NS_OK
;
}
nsresult
nsDocShellLoadState
:
:
SetupTriggeringPrincipal
(
const
mozilla
:
:
OriginAttributes
&
aOriginAttributes
)
{
if
(
!
mTriggeringPrincipal
)
{
if
(
mReferrerInfo
)
{
nsCOMPtr
<
nsIURI
>
referrer
=
mReferrerInfo
-
>
GetOriginalReferrer
(
)
;
mTriggeringPrincipal
=
BasePrincipal
:
:
CreateContentPrincipal
(
referrer
aOriginAttributes
)
;
if
(
!
mTriggeringPrincipal
)
{
return
NS_ERROR_FAILURE
;
}
}
else
{
mTriggeringPrincipal
=
nsContentUtils
:
:
GetSystemPrincipal
(
)
;
}
}
return
NS_OK
;
}
void
nsDocShellLoadState
:
:
CalculateLoadURIFlags
(
)
{
uint32_t
oldLoadFlags
=
mLoadFlags
;
mLoadFlags
=
0
;
if
(
mInheritPrincipal
)
{
MOZ_ASSERT
(
!
mPrincipalToInherit
|
|
!
mPrincipalToInherit
-
>
IsSystemPrincipal
(
)
"
Should
not
inherit
SystemPrincipal
"
)
;
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_INHERIT_PRINCIPAL
;
}
if
(
mReferrerInfo
&
&
!
mReferrerInfo
-
>
GetSendReferrer
(
)
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_DONT_SEND_REFERRER
;
}
if
(
oldLoadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
;
}
if
(
oldLoadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_FIRST_LOAD
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_FIRST_LOAD
;
}
if
(
oldLoadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_BYPASS_CLASSIFIER
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_BYPASS_CLASSIFIER
;
}
if
(
oldLoadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_FORCE_ALLOW_COOKIES
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_FORCE_ALLOW_COOKIES
;
}
if
(
oldLoadFlags
&
nsIWebNavigation
:
:
LOAD_FLAGS_BYPASS_LOAD_URI_DELEGATE
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_BYPASS_LOAD_URI_DELEGATE
;
}
if
(
!
mSrcdocData
.
IsVoid
(
)
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_IS_SRCDOC
;
}
if
(
mForceAllowDataURI
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_FORCE_ALLOW_DATA_URI
;
}
if
(
mOriginalFrameSrc
)
{
mLoadFlags
|
=
nsDocShell
:
:
INTERNAL_LOAD_FLAGS_ORIGINAL_FRAME_SRC
;
}
}
DocShellLoadStateInit
nsDocShellLoadState
:
:
Serialize
(
)
{
DocShellLoadStateInit
loadState
;
loadState
.
ResultPrincipalURI
(
)
=
mResultPrincipalURI
;
loadState
.
ResultPrincipalURIIsSome
(
)
=
mResultPrincipalURIIsSome
;
loadState
.
KeepResultPrincipalURIIfSet
(
)
=
mKeepResultPrincipalURIIfSet
;
loadState
.
LoadReplace
(
)
=
mLoadReplace
;
loadState
.
InheritPrincipal
(
)
=
mInheritPrincipal
;
loadState
.
PrincipalIsExplicit
(
)
=
mPrincipalIsExplicit
;
loadState
.
ForceAllowDataURI
(
)
=
mForceAllowDataURI
;
loadState
.
OriginalFrameSrc
(
)
=
mOriginalFrameSrc
;
loadState
.
IsFormSubmission
(
)
=
mIsFormSubmission
;
loadState
.
LoadType
(
)
=
mLoadType
;
loadState
.
Target
(
)
=
mTarget
;
loadState
.
LoadFlags
(
)
=
mLoadFlags
;
loadState
.
FirstParty
(
)
=
mFirstParty
;
loadState
.
HasValidUserGestureActivation
(
)
=
mHasValidUserGestureActivation
;
loadState
.
TypeHint
(
)
=
mTypeHint
;
loadState
.
FileName
(
)
=
mFileName
;
loadState
.
IsFromProcessingFrameAttributes
(
)
=
mIsFromProcessingFrameAttributes
;
loadState
.
URI
(
)
=
mURI
;
loadState
.
OriginalURI
(
)
=
mOriginalURI
;
loadState
.
SourceBrowsingContext
(
)
=
mSourceBrowsingContext
;
loadState
.
BaseURI
(
)
=
mBaseURI
;
loadState
.
TriggeringPrincipal
(
)
=
mTriggeringPrincipal
;
loadState
.
PrincipalToInherit
(
)
=
mPrincipalToInherit
;
loadState
.
StoragePrincipalToInherit
(
)
=
mStoragePrincipalToInherit
;
loadState
.
Csp
(
)
=
mCsp
;
loadState
.
OriginalURIString
(
)
=
mOriginalURIString
;
loadState
.
CancelContentJSEpoch
(
)
=
mCancelContentJSEpoch
;
loadState
.
ReferrerInfo
(
)
=
mReferrerInfo
;
loadState
.
PostDataStream
(
)
=
mPostDataStream
;
loadState
.
HeadersStream
(
)
=
mHeadersStream
;
loadState
.
SrcdocData
(
)
=
mSrcdocData
;
loadState
.
ResultPrincipalURI
(
)
=
mResultPrincipalURI
;
loadState
.
LoadIdentifier
(
)
=
mLoadIdentifier
;
if
(
!
mSHEntry
|
|
!
StaticPrefs
:
:
fission_sessionHistoryInParent
(
)
)
{
return
loadState
;
}
if
(
XRE_IsParentProcess
(
)
)
{
loadState
.
SHEntry
(
)
=
static_cast
<
CrossProcessSHEntry
*
>
(
static_cast
<
LegacySHEntry
*
>
(
mSHEntry
.
get
(
)
)
)
;
}
else
{
loadState
.
SHEntry
(
)
=
static_cast
<
CrossProcessSHEntry
*
>
(
static_cast
<
SHEntryChild
*
>
(
mSHEntry
.
get
(
)
)
)
;
}
return
loadState
;
}
