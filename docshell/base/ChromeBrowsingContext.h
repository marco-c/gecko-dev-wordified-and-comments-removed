#
ifndef
mozilla_dom_ChromeBrowsingContext_h
#
define
mozilla_dom_ChromeBrowsingContext_h
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
class
nsIDocShell
;
namespace
mozilla
{
namespace
dom
{
class
WindowGlobalParent
;
class
ChromeBrowsingContext
final
:
public
BrowsingContext
{
public
:
static
void
CleanupContexts
(
uint64_t
aProcessId
)
;
static
already_AddRefed
<
ChromeBrowsingContext
>
Get
(
uint64_t
aId
)
;
static
ChromeBrowsingContext
*
Cast
(
BrowsingContext
*
aContext
)
;
static
const
ChromeBrowsingContext
*
Cast
(
const
BrowsingContext
*
aContext
)
;
bool
IsOwnedByProcess
(
uint64_t
aProcessId
)
const
{
return
mProcessId
=
=
aProcessId
;
}
void
RegisterWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
;
void
UnregisterWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
;
protected
:
void
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
;
void
Unlink
(
)
;
using
Type
=
BrowsingContext
:
:
Type
;
ChromeBrowsingContext
(
BrowsingContext
*
aParent
BrowsingContext
*
aOpener
const
nsAString
&
aName
uint64_t
aBrowsingContextId
uint64_t
aProcessId
Type
aType
=
Type
:
:
Chrome
)
;
private
:
friend
class
BrowsingContext
;
uint64_t
mProcessId
;
nsTHashtable
<
nsRefPtrHashKey
<
WindowGlobalParent
>
>
mWindowGlobals
;
}
;
}
}
#
endif
