#
ifndef
mozilla_dom_CanonicalBrowsingContext_h
#
define
mozilla_dom_CanonicalBrowsingContext_h
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
MediaControllerBinding
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextWebProgress
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISecureBrowserUI
.
h
"
class
nsISHistory
;
class
nsBrowserStatusFilter
;
class
nsSecureBrowserUI
;
namespace
mozilla
{
namespace
net
{
class
DocumentLoadListener
;
}
namespace
dom
{
class
BrowserParent
;
class
MediaController
;
struct
SessionHistoryInfoAndId
;
class
SessionHistoryEntry
;
class
WindowGlobalParent
;
struct
SessionHistoryEntryAndId
{
SessionHistoryEntryAndId
(
uint64_t
aId
SessionHistoryEntry
*
aEntry
)
:
mId
(
aId
)
mEntry
(
aEntry
)
{
}
uint64_t
mId
;
RefPtr
<
SessionHistoryEntry
>
mEntry
;
}
;
class
CanonicalBrowsingContext
final
:
public
BrowsingContext
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
CanonicalBrowsingContext
BrowsingContext
)
static
already_AddRefed
<
CanonicalBrowsingContext
>
Get
(
uint64_t
aId
)
;
static
CanonicalBrowsingContext
*
Cast
(
BrowsingContext
*
aContext
)
;
static
const
CanonicalBrowsingContext
*
Cast
(
const
BrowsingContext
*
aContext
)
;
bool
IsOwnedByProcess
(
uint64_t
aProcessId
)
const
{
return
mProcessId
=
=
aProcessId
;
}
bool
IsEmbeddedInProcess
(
uint64_t
aProcessId
)
const
{
return
mEmbedderProcessId
=
=
aProcessId
;
}
uint64_t
OwnerProcessId
(
)
const
{
return
mProcessId
;
}
uint64_t
EmbedderProcessId
(
)
const
{
return
mEmbedderProcessId
;
}
ContentParent
*
GetContentParent
(
)
const
;
void
GetCurrentRemoteType
(
nsAString
&
aRemoteType
ErrorResult
&
aRv
)
const
;
void
SetOwnerProcessId
(
uint64_t
aProcessId
)
;
void
SetInFlightProcessId
(
uint64_t
aProcessId
)
;
uint64_t
GetInFlightProcessId
(
)
const
{
return
mInFlightProcessId
;
}
void
GetWindowGlobals
(
nsTArray
<
RefPtr
<
WindowGlobalParent
>
>
&
aWindows
)
;
WindowGlobalParent
*
GetCurrentWindowGlobal
(
)
const
;
CanonicalBrowsingContext
*
GetParent
(
)
{
return
Cast
(
BrowsingContext
:
:
GetParent
(
)
)
;
}
CanonicalBrowsingContext
*
Top
(
)
{
return
Cast
(
BrowsingContext
:
:
Top
(
)
)
;
}
WindowGlobalParent
*
GetParentWindowContext
(
)
;
WindowGlobalParent
*
GetTopWindowContext
(
)
;
already_AddRefed
<
nsIWidget
>
GetParentProcessWidgetContaining
(
)
;
already_AddRefed
<
WindowGlobalParent
>
GetEmbedderWindowGlobal
(
)
const
;
already_AddRefed
<
CanonicalBrowsingContext
>
GetParentCrossChromeBoundary
(
)
;
Nullable
<
WindowProxyHolder
>
GetTopChromeWindow
(
)
;
nsISHistory
*
GetSessionHistory
(
)
;
UniquePtr
<
SessionHistoryInfoAndId
>
CreateSessionHistoryEntryForLoad
(
nsDocShellLoadState
*
aLoadState
nsIChannel
*
aChannel
)
;
void
SessionHistoryCommit
(
uint64_t
aSessionHistoryEntryId
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
DispatchWheelZoomChange
(
bool
aIncrease
)
;
void
NotifyStartDelayedAutoplayMedia
(
)
;
void
NotifyMediaMutedChanged
(
bool
aMuted
)
;
static
uint32_t
CountSiteOrigins
(
GlobalObject
&
aGlobal
const
Sequence
<
mozilla
:
:
OwningNonNull
<
BrowsingContext
>
>
&
aRoots
)
;
void
UpdateMediaControlKey
(
MediaControlKey
aKey
)
;
using
BrowsingContext
:
:
LoadURI
;
void
LoadURI
(
const
nsAString
&
aURI
const
LoadURIOptions
&
aOptions
ErrorResult
&
aError
)
;
using
RemotenessPromise
=
MozPromise
<
RefPtr
<
BrowserParent
>
nsresult
false
>
;
RefPtr
<
RemotenessPromise
>
ChangeRemoteness
(
const
nsAString
&
aRemoteType
uint64_t
aPendingSwitchId
bool
aReplaceBrowsingContext
uint64_t
aSpecificGroupId
)
;
MediaController
*
GetMediaController
(
)
;
bool
AttemptLoadURIInParent
(
nsDocShellLoadState
*
aLoadState
uint32_t
*
aLoadIdentifier
)
;
nsISecureBrowserUI
*
GetSecureBrowserUI
(
)
;
BrowsingContextWebProgress
*
GetWebProgress
(
)
{
return
mWebProgress
;
}
void
UpdateSecurityStateForLocationOrMixedContentChange
(
)
;
void
MaybeAddAsProgressListener
(
nsIWebProgress
*
aWebProgress
)
;
void
ReplacedBy
(
CanonicalBrowsingContext
*
aNewContext
)
;
protected
:
void
CanonicalDiscard
(
)
;
using
Type
=
BrowsingContext
:
:
Type
;
CanonicalBrowsingContext
(
WindowContext
*
aParentWindow
BrowsingContextGroup
*
aGroup
uint64_t
aBrowsingContextId
uint64_t
aOwnerProcessId
uint64_t
aEmbedderProcessId
Type
aType
FieldTuple
&
&
aFields
)
;
private
:
friend
class
BrowsingContext
;
~
CanonicalBrowsingContext
(
)
=
default
;
class
PendingRemotenessChange
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
PendingRemotenessChange
)
PendingRemotenessChange
(
CanonicalBrowsingContext
*
aTarget
RemotenessPromise
:
:
Private
*
aPromise
uint64_t
aPendingSwitchId
bool
aReplaceBrowsingContext
uint64_t
aSpecificGroupId
)
;
void
Cancel
(
nsresult
aRv
)
;
private
:
friend
class
CanonicalBrowsingContext
;
~
PendingRemotenessChange
(
)
;
void
ProcessReady
(
)
;
void
Finish
(
)
;
void
Clear
(
)
;
RefPtr
<
CanonicalBrowsingContext
>
mTarget
;
RefPtr
<
RemotenessPromise
:
:
Private
>
mPromise
;
RefPtr
<
GenericPromise
>
mPrepareToChangePromise
;
RefPtr
<
ContentParent
>
mContentParent
;
uint64_t
mPendingSwitchId
;
uint64_t
mSpecificGroupId
;
bool
mReplaceBrowsingContext
;
}
;
friend
class
net
:
:
DocumentLoadListener
;
void
StartDocumentLoad
(
net
:
:
DocumentLoadListener
*
aLoad
)
;
void
EndDocumentLoad
(
net
:
:
DocumentLoadListener
*
aLoad
)
;
uint64_t
mProcessId
;
uint64_t
mEmbedderProcessId
;
uint64_t
mInFlightProcessId
=
0
;
RefPtr
<
PendingRemotenessChange
>
mPendingRemotenessChange
;
nsCOMPtr
<
nsISHistory
>
mSessionHistory
;
RefPtr
<
MediaController
>
mTabMediaController
;
RefPtr
<
net
:
:
DocumentLoadListener
>
mCurrentLoad
;
nsTArray
<
SessionHistoryEntryAndId
>
mLoadingEntries
;
RefPtr
<
SessionHistoryEntry
>
mActiveEntry
;
RefPtr
<
nsSecureBrowserUI
>
mSecureBrowserUI
;
RefPtr
<
BrowsingContextWebProgress
>
mWebProgress
;
RefPtr
<
nsBrowserStatusFilter
>
mStatusFilter
;
}
;
}
}
#
endif
