#
ifndef
mozilla_dom_CanonicalBrowsingContext_h
#
define
mozilla_dom_CanonicalBrowsingContext_h
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
MediaControlKeySource
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextWebProgress
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
#
include
"
mozilla
/
dom
/
SessionStoreRestoreData
.
h
"
#
include
"
mozilla
/
dom
/
SessionStoreUtils
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISecureBrowserUI
.
h
"
class
nsISHistory
;
class
nsIWidget
;
class
nsIPrintSettings
;
class
nsSHistory
;
class
nsBrowserStatusFilter
;
class
nsSecureBrowserUI
;
class
CallerWillNotifyHistoryIndexAndLengthChanges
;
class
nsITimer
;
namespace
mozilla
{
enum
class
CallState
;
namespace
net
{
class
DocumentLoadListener
;
}
namespace
dom
{
class
BrowserParent
;
class
BrowserBridgeParent
;
class
FeaturePolicy
;
struct
LoadURIOptions
;
class
MediaController
;
struct
LoadingSessionHistoryInfo
;
class
SSCacheCopy
;
class
WindowGlobalParent
;
struct
RemotenessChangeOptions
{
nsCString
mRemoteType
;
bool
mReplaceBrowsingContext
=
false
;
uint64_t
mSpecificGroupId
=
0
;
bool
mTryUseBFCache
=
false
;
RefPtr
<
SessionHistoryEntry
>
mActiveSessionHistoryEntry
;
}
;
class
CanonicalBrowsingContext
final
:
public
BrowsingContext
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
CanonicalBrowsingContext
BrowsingContext
)
static
already_AddRefed
<
CanonicalBrowsingContext
>
Get
(
uint64_t
aId
)
;
static
CanonicalBrowsingContext
*
Cast
(
BrowsingContext
*
aContext
)
;
static
const
CanonicalBrowsingContext
*
Cast
(
const
BrowsingContext
*
aContext
)
;
static
already_AddRefed
<
CanonicalBrowsingContext
>
Cast
(
already_AddRefed
<
BrowsingContext
>
&
&
aContext
)
;
bool
IsOwnedByProcess
(
uint64_t
aProcessId
)
const
{
return
mProcessId
=
=
aProcessId
;
}
bool
IsEmbeddedInProcess
(
uint64_t
aProcessId
)
const
{
return
mEmbedderProcessId
=
=
aProcessId
;
}
uint64_t
OwnerProcessId
(
)
const
{
return
mProcessId
;
}
uint64_t
EmbedderProcessId
(
)
const
{
return
mEmbedderProcessId
;
}
ContentParent
*
GetContentParent
(
)
const
;
void
GetCurrentRemoteType
(
nsACString
&
aRemoteType
ErrorResult
&
aRv
)
const
;
void
SetOwnerProcessId
(
uint64_t
aProcessId
)
;
uint64_t
GetCrossGroupOpenerId
(
)
const
{
return
mCrossGroupOpenerId
;
}
void
SetCrossGroupOpenerId
(
uint64_t
aOpenerId
)
;
void
GetWindowGlobals
(
nsTArray
<
RefPtr
<
WindowGlobalParent
>
>
&
aWindows
)
;
WindowGlobalParent
*
GetCurrentWindowGlobal
(
)
const
;
CanonicalBrowsingContext
*
GetParent
(
)
{
return
Cast
(
BrowsingContext
:
:
GetParent
(
)
)
;
}
CanonicalBrowsingContext
*
Top
(
)
{
return
Cast
(
BrowsingContext
:
:
Top
(
)
)
;
}
WindowGlobalParent
*
GetParentWindowContext
(
)
;
WindowGlobalParent
*
GetTopWindowContext
(
)
;
already_AddRefed
<
nsIWidget
>
GetParentProcessWidgetContaining
(
)
;
already_AddRefed
<
WindowGlobalParent
>
GetEmbedderWindowGlobal
(
)
const
;
already_AddRefed
<
CanonicalBrowsingContext
>
GetParentCrossChromeBoundary
(
)
;
already_AddRefed
<
CanonicalBrowsingContext
>
TopCrossChromeBoundary
(
)
;
Nullable
<
WindowProxyHolder
>
GetTopChromeWindow
(
)
;
nsISHistory
*
GetSessionHistory
(
)
;
SessionHistoryEntry
*
GetActiveSessionHistoryEntry
(
)
;
void
SetActiveSessionHistoryEntry
(
SessionHistoryEntry
*
aEntry
)
;
UniquePtr
<
LoadingSessionHistoryInfo
>
CreateLoadingSessionHistoryEntryForLoad
(
nsDocShellLoadState
*
aLoadState
nsIChannel
*
aChannel
)
;
UniquePtr
<
LoadingSessionHistoryInfo
>
ReplaceLoadingSessionHistoryEntryForLoad
(
LoadingSessionHistoryInfo
*
aInfo
nsIChannel
*
aChannel
)
;
already_AddRefed
<
Promise
>
Print
(
nsIPrintSettings
*
aPrintSettings
ErrorResult
&
aRv
)
;
void
CallOnAllTopDescendants
(
const
std
:
:
function
<
mozilla
:
:
CallState
(
CanonicalBrowsingContext
*
)
>
&
aCallback
)
;
void
SessionHistoryCommit
(
uint64_t
aLoadId
const
nsID
&
aChangeID
uint32_t
aLoadType
bool
aPersist
bool
aCloneEntryChildren
)
;
void
NotifyOnHistoryReload
(
bool
aForceReload
bool
&
aCanReload
Maybe
<
RefPtr
<
nsDocShellLoadState
>
>
&
aLoadState
Maybe
<
bool
>
&
aReloadActiveEntry
)
;
void
SetActiveSessionHistoryEntry
(
const
Maybe
<
nsPoint
>
&
aPreviousScrollPos
SessionHistoryInfo
*
aInfo
uint32_t
aLoadType
uint32_t
aUpdatedCacheKey
const
nsID
&
aChangeID
)
;
void
ReplaceActiveSessionHistoryEntry
(
SessionHistoryInfo
*
aInfo
)
;
void
RemoveDynEntriesFromActiveSessionHistoryEntry
(
)
;
void
RemoveFromSessionHistory
(
const
nsID
&
aChangeID
)
;
void
HistoryGo
(
int32_t
aIndex
uint64_t
aHistoryEpoch
bool
aRequireUserInteraction
bool
aUserActivation
Maybe
<
ContentParentId
>
aContentId
std
:
:
function
<
void
(
int32_t
&
&
)
>
&
&
aResolver
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
DispatchWheelZoomChange
(
bool
aIncrease
)
;
void
NotifyStartDelayedAutoplayMedia
(
)
;
void
NotifyMediaMutedChanged
(
bool
aMuted
ErrorResult
&
aRv
)
;
static
uint32_t
CountSiteOrigins
(
GlobalObject
&
aGlobal
const
Sequence
<
mozilla
:
:
OwningNonNull
<
BrowsingContext
>
>
&
aRoots
)
;
void
UpdateMediaControlAction
(
const
MediaControlAction
&
aAction
)
;
using
BrowsingContext
:
:
LoadURI
;
void
LoadURI
(
const
nsAString
&
aURI
const
LoadURIOptions
&
aOptions
ErrorResult
&
aError
)
;
void
GoBack
(
const
Optional
<
int32_t
>
&
aCancelContentJSEpoch
bool
aRequireUserInteraction
bool
aUserActivation
)
;
void
GoForward
(
const
Optional
<
int32_t
>
&
aCancelContentJSEpoch
bool
aRequireUserInteraction
bool
aUserActivation
)
;
void
GoToIndex
(
int32_t
aIndex
const
Optional
<
int32_t
>
&
aCancelContentJSEpoch
bool
aUserActivation
)
;
void
Reload
(
uint32_t
aReloadFlags
)
;
void
Stop
(
uint32_t
aStopFlags
)
;
already_AddRefed
<
nsIURI
>
GetCurrentURI
(
)
const
;
void
SetCurrentRemoteURI
(
nsIURI
*
aCurrentRemoteURI
)
;
BrowserParent
*
GetBrowserParent
(
)
const
;
void
SetCurrentBrowserParent
(
BrowserParent
*
aBrowserParent
)
;
using
RemotenessPromise
=
MozPromise
<
RefPtr
<
BrowserParent
>
nsresult
false
>
;
RefPtr
<
RemotenessPromise
>
ChangeRemoteness
(
const
RemotenessChangeOptions
&
aOptions
uint64_t
aPendingSwitchId
)
;
MediaController
*
GetMediaController
(
)
;
bool
HasCreatedMediaController
(
)
const
;
bool
LoadInParent
(
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
)
;
bool
AttemptSpeculativeLoadInParent
(
nsDocShellLoadState
*
aLoadState
)
;
nsISecureBrowserUI
*
GetSecureBrowserUI
(
)
;
BrowsingContextWebProgress
*
GetWebProgress
(
)
{
return
mWebProgress
;
}
void
UpdateSecurityState
(
)
;
void
MaybeAddAsProgressListener
(
nsIWebProgress
*
aWebProgress
)
;
void
ReplacedBy
(
CanonicalBrowsingContext
*
aNewContext
const
RemotenessChangeOptions
&
aRemotenessOptions
)
;
bool
HasHistoryEntry
(
nsISHEntry
*
aEntry
)
;
void
SwapHistoryEntries
(
nsISHEntry
*
aOldEntry
nsISHEntry
*
aNewEntry
)
;
void
AddLoadingSessionHistoryEntry
(
uint64_t
aLoadId
SessionHistoryEntry
*
aEntry
)
;
void
GetLoadingSessionHistoryInfoFromParent
(
Maybe
<
LoadingSessionHistoryInfo
>
&
aLoadingInfo
int32_t
*
aRequestedIndex
int32_t
*
aLength
)
;
void
HistoryCommitIndexAndLength
(
)
;
void
ResetScalingZoom
(
)
;
void
SetContainerFeaturePolicy
(
FeaturePolicy
*
aContainerFeaturePolicy
)
;
FeaturePolicy
*
GetContainerFeaturePolicy
(
)
const
{
return
mContainerFeaturePolicy
;
}
void
SetRestoreData
(
SessionStoreRestoreData
*
aData
ErrorResult
&
aError
)
;
void
ClearRestoreState
(
)
;
void
RequestRestoreTabContent
(
WindowGlobalParent
*
aWindow
)
;
already_AddRefed
<
Promise
>
GetRestorePromise
(
)
;
nsresult
WriteSessionStorageToSessionStore
(
const
nsTArray
<
SSCacheCopy
>
&
aSesssionStorage
uint32_t
aEpoch
)
;
void
UpdateSessionStoreSessionStorage
(
const
std
:
:
function
<
void
(
)
>
&
aDone
)
;
static
void
UpdateSessionStoreForStorage
(
uint64_t
aBrowsingContextId
)
;
void
BrowserParentDestroyed
(
BrowserParent
*
aBrowserParent
bool
aAbnormalShutdown
)
;
void
StartUnloadingHost
(
uint64_t
aChildID
)
;
void
ClearUnloadingHost
(
uint64_t
aChildID
)
;
bool
AllowedInBFCache
(
const
Maybe
<
uint64_t
>
&
aChannelId
)
;
bool
IsPriorityActive
(
)
const
{
MOZ_RELEASE_ASSERT
(
IsTop
(
)
)
;
return
mPriorityActive
;
}
void
SetPriorityActive
(
bool
aIsActive
)
{
MOZ_RELEASE_ASSERT
(
IsTop
(
)
)
;
mPriorityActive
=
aIsActive
;
}
void
SetTouchEventsOverride
(
dom
:
:
TouchEventsOverride
ErrorResult
&
aRv
)
;
bool
IsReplaced
(
)
const
{
return
mIsReplaced
;
}
const
JS
:
:
Heap
<
JS
:
:
Value
>
&
PermanentKey
(
)
{
return
mPermanentKey
;
}
void
MaybeSetPermanentKey
(
Element
*
aEmbedder
)
;
protected
:
void
CanonicalDiscard
(
)
;
using
Type
=
BrowsingContext
:
:
Type
;
CanonicalBrowsingContext
(
WindowContext
*
aParentWindow
BrowsingContextGroup
*
aGroup
uint64_t
aBrowsingContextId
uint64_t
aOwnerProcessId
uint64_t
aEmbedderProcessId
Type
aType
FieldValues
&
&
aInit
)
;
private
:
friend
class
BrowsingContext
;
virtual
~
CanonicalBrowsingContext
(
)
;
class
PendingRemotenessChange
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
PendingRemotenessChange
)
PendingRemotenessChange
(
CanonicalBrowsingContext
*
aTarget
RemotenessPromise
:
:
Private
*
aPromise
uint64_t
aPendingSwitchId
const
RemotenessChangeOptions
&
aOptions
)
;
void
Cancel
(
nsresult
aRv
)
;
private
:
friend
class
CanonicalBrowsingContext
;
~
PendingRemotenessChange
(
)
;
void
ProcessLaunched
(
)
;
void
ProcessReady
(
)
;
void
Finish
(
)
;
void
Clear
(
)
;
nsresult
FinishTopContent
(
)
;
nsresult
FinishSubframe
(
)
;
RefPtr
<
CanonicalBrowsingContext
>
mTarget
;
RefPtr
<
RemotenessPromise
:
:
Private
>
mPromise
;
RefPtr
<
GenericPromise
>
mPrepareToChangePromise
;
RefPtr
<
ContentParent
>
mContentParent
;
RefPtr
<
BrowsingContextGroup
>
mSpecificGroup
;
uint64_t
mPendingSwitchId
;
RemotenessChangeOptions
mOptions
;
}
;
struct
RestoreState
{
NS_INLINE_DECL_REFCOUNTING
(
RestoreState
)
void
ClearData
(
)
{
mData
=
nullptr
;
}
void
Resolve
(
)
;
RefPtr
<
SessionStoreRestoreData
>
mData
;
RefPtr
<
Promise
>
mPromise
;
uint32_t
mRequests
=
0
;
uint32_t
mResolves
=
0
;
private
:
~
RestoreState
(
)
=
default
;
}
;
friend
class
net
:
:
DocumentLoadListener
;
bool
StartDocumentLoad
(
net
:
:
DocumentLoadListener
*
aLoad
)
;
void
EndDocumentLoad
(
bool
aForProcessSwitch
)
;
bool
SupportsLoadingInParent
(
nsDocShellLoadState
*
aLoadState
uint64_t
*
aOuterWindowId
)
;
void
HistoryCommitIndexAndLength
(
const
nsID
&
aChangeID
const
CallerWillNotifyHistoryIndexAndLengthChanges
&
aProofOfCaller
)
;
struct
UnloadingHost
{
uint64_t
mChildID
;
nsTArray
<
std
:
:
function
<
void
(
)
>
>
mCallbacks
;
}
;
nsTArray
<
UnloadingHost
>
:
:
iterator
FindUnloadingHost
(
uint64_t
aChildID
)
;
void
ShowSubframeCrashedUI
(
BrowserBridgeParent
*
aBridge
)
;
void
MaybeScheduleSessionStoreUpdate
(
)
;
void
CancelSessionStoreUpdate
(
)
;
uint64_t
mProcessId
;
uint64_t
mEmbedderProcessId
;
uint64_t
mCrossGroupOpenerId
=
0
;
void
ResetSHEntryHasUserInteractionCache
(
)
;
RefPtr
<
BrowserParent
>
mCurrentBrowserParent
;
nsTArray
<
UnloadingHost
>
mUnloadingHosts
;
nsCOMPtr
<
nsIURI
>
mCurrentRemoteURI
;
RefPtr
<
PendingRemotenessChange
>
mPendingRemotenessChange
;
RefPtr
<
nsSHistory
>
mSessionHistory
;
RefPtr
<
MediaController
>
mTabMediaController
;
RefPtr
<
net
:
:
DocumentLoadListener
>
mCurrentLoad
;
struct
LoadingSessionHistoryEntry
{
uint64_t
mLoadId
=
0
;
RefPtr
<
SessionHistoryEntry
>
mEntry
;
}
;
nsTArray
<
LoadingSessionHistoryEntry
>
mLoadingEntries
;
RefPtr
<
SessionHistoryEntry
>
mActiveEntry
;
RefPtr
<
nsSecureBrowserUI
>
mSecureBrowserUI
;
RefPtr
<
BrowsingContextWebProgress
>
mWebProgress
;
nsCOMPtr
<
nsIWebProgressListener
>
mDocShellProgressBridge
;
RefPtr
<
nsBrowserStatusFilter
>
mStatusFilter
;
RefPtr
<
FeaturePolicy
>
mContainerFeaturePolicy
;
RefPtr
<
RestoreState
>
mRestoreState
;
bool
mPriorityActive
=
false
;
nsCOMPtr
<
nsITimer
>
mSessionStoreSessionStorageUpdateTimer
;
bool
mIsReplaced
=
false
;
JS
:
:
Heap
<
JS
:
:
Value
>
mPermanentKey
;
}
;
}
}
#
endif
