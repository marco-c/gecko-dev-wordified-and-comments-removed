#
ifndef
mozilla_dom_CanonicalBrowsingContext_h
#
define
mozilla_dom_CanonicalBrowsingContext_h
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
MediaControlKeysEvent
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsISHEntry
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WindowGlobalParent
;
class
BrowserParent
;
class
MediaController
;
class
WindowGlobalParent
;
class
CanonicalBrowsingContext
final
:
public
BrowsingContext
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
CanonicalBrowsingContext
BrowsingContext
)
static
already_AddRefed
<
CanonicalBrowsingContext
>
Get
(
uint64_t
aId
)
;
static
CanonicalBrowsingContext
*
Cast
(
BrowsingContext
*
aContext
)
;
static
const
CanonicalBrowsingContext
*
Cast
(
const
BrowsingContext
*
aContext
)
;
bool
IsOwnedByProcess
(
uint64_t
aProcessId
)
const
{
return
mProcessId
=
=
aProcessId
;
}
bool
IsEmbeddedInProcess
(
uint64_t
aProcessId
)
const
{
return
mEmbedderProcessId
=
=
aProcessId
;
}
uint64_t
OwnerProcessId
(
)
const
{
return
mProcessId
;
}
uint64_t
EmbedderProcessId
(
)
const
{
return
mEmbedderProcessId
;
}
ContentParent
*
GetContentParent
(
)
const
;
void
GetCurrentRemoteType
(
nsAString
&
aRemoteType
ErrorResult
&
aRv
)
const
;
void
SetOwnerProcessId
(
uint64_t
aProcessId
)
;
void
SetInFlightProcessId
(
uint64_t
aProcessId
)
;
uint64_t
GetInFlightProcessId
(
)
const
{
return
mInFlightProcessId
;
}
void
GetWindowGlobals
(
nsTArray
<
RefPtr
<
WindowGlobalParent
>
>
&
aWindows
)
;
WindowGlobalParent
*
GetCurrentWindowGlobal
(
)
const
;
already_AddRefed
<
nsIWidget
>
GetParentProcessWidgetContaining
(
)
;
already_AddRefed
<
WindowGlobalParent
>
GetEmbedderWindowGlobal
(
)
const
;
nsISHistory
*
GetSessionHistory
(
)
;
void
SetSessionHistory
(
nsISHistory
*
aSHistory
)
{
mSessionHistory
=
aSHistory
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
NotifyStartDelayedAutoplayMedia
(
)
;
void
NotifyMediaMutedChanged
(
bool
aMuted
)
;
static
uint32_t
CountSiteOrigins
(
GlobalObject
&
aGlobal
const
Sequence
<
mozilla
:
:
OwningNonNull
<
BrowsingContext
>
>
&
aRoots
)
;
void
UpdateMediaControlKeysEvent
(
MediaControlKeysEvent
aEvent
)
;
using
BrowsingContext
:
:
LoadURI
;
void
LoadURI
(
const
nsAString
&
aURI
const
LoadURIOptions
&
aOptions
ErrorResult
&
aError
)
;
using
RemotenessPromise
=
MozPromise
<
RefPtr
<
BrowserParent
>
nsresult
false
>
;
RefPtr
<
RemotenessPromise
>
ChangeFrameRemoteness
(
const
nsAString
&
aRemoteType
uint64_t
aPendingSwitchId
)
;
MediaController
*
GetMediaController
(
)
;
bool
HasHistoryEntry
(
nsISHEntry
*
aEntry
)
const
{
return
aEntry
&
&
(
aEntry
=
=
mOSHE
|
|
aEntry
=
=
mLSHE
)
;
}
void
UpdateSHEntries
(
nsISHEntry
*
aNewLSHE
nsISHEntry
*
aNewOSHE
)
{
mLSHE
=
aNewLSHE
;
mOSHE
=
aNewOSHE
;
}
void
SwapHistoryEntries
(
nsISHEntry
*
aOldEntry
nsISHEntry
*
aNewEntry
)
{
if
(
aOldEntry
=
=
mOSHE
)
{
mOSHE
=
aNewEntry
;
}
if
(
aOldEntry
=
=
mLSHE
)
{
mLSHE
=
aNewEntry
;
}
}
protected
:
void
CanonicalDiscard
(
)
;
using
Type
=
BrowsingContext
:
:
Type
;
CanonicalBrowsingContext
(
BrowsingContext
*
aParent
BrowsingContextGroup
*
aGroup
uint64_t
aBrowsingContextId
uint64_t
aOwnerProcessId
uint64_t
aEmbedderProcessId
Type
aType
FieldTuple
&
&
aFields
)
;
private
:
friend
class
BrowsingContext
;
~
CanonicalBrowsingContext
(
)
=
default
;
class
PendingRemotenessChange
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
PendingRemotenessChange
)
PendingRemotenessChange
(
CanonicalBrowsingContext
*
aTarget
RemotenessPromise
:
:
Private
*
aPromise
uint64_t
aPendingSwitchId
)
:
mTarget
(
aTarget
)
mPromise
(
aPromise
)
mPendingSwitchId
(
aPendingSwitchId
)
{
}
void
Cancel
(
nsresult
aRv
)
;
void
Complete
(
ContentParent
*
aContentParent
)
;
private
:
~
PendingRemotenessChange
(
)
;
void
Clear
(
)
;
RefPtr
<
CanonicalBrowsingContext
>
mTarget
;
RefPtr
<
RemotenessPromise
:
:
Private
>
mPromise
;
uint64_t
mPendingSwitchId
;
}
;
uint64_t
mProcessId
;
uint64_t
mEmbedderProcessId
;
uint64_t
mInFlightProcessId
=
0
;
RefPtr
<
PendingRemotenessChange
>
mPendingRemotenessChange
;
nsCOMPtr
<
nsISHistory
>
mSessionHistory
;
RefPtr
<
MediaController
>
mTabMediaController
;
nsCOMPtr
<
nsISHEntry
>
mOSHE
;
nsCOMPtr
<
nsISHEntry
>
mLSHE
;
}
;
}
}
#
endif
