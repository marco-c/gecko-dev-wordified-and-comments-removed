#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentProcessManager
.
h
"
extern
mozilla
:
:
LazyLogModule
gAutoplayPermissionLog
;
#
define
AUTOPLAY_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gAutoplayPermissionLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
dom
{
extern
mozilla
:
:
LazyLogModule
gUserInteractionPRLog
;
#
define
USER_ACTIVATION_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gUserInteractionPRLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
CanonicalBrowsingContext
:
:
CanonicalBrowsingContext
(
BrowsingContext
*
aParent
BrowsingContextGroup
*
aGroup
uint64_t
aBrowsingContextId
uint64_t
aProcessId
BrowsingContext
:
:
Type
aType
)
:
BrowsingContext
(
aParent
aGroup
aBrowsingContextId
aType
)
mProcessId
(
aProcessId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
already_AddRefed
<
CanonicalBrowsingContext
>
CanonicalBrowsingContext
:
:
Get
(
uint64_t
aId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
BrowsingContext
:
:
Get
(
aId
)
.
downcast
<
CanonicalBrowsingContext
>
(
)
;
}
CanonicalBrowsingContext
*
CanonicalBrowsingContext
:
:
Cast
(
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
CanonicalBrowsingContext
*
>
(
aContext
)
;
}
const
CanonicalBrowsingContext
*
CanonicalBrowsingContext
:
:
Cast
(
const
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
const
CanonicalBrowsingContext
*
>
(
aContext
)
;
}
ContentParent
*
CanonicalBrowsingContext
:
:
GetContentParent
(
)
const
{
if
(
mProcessId
=
=
0
)
{
return
nullptr
;
}
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
return
cpm
-
>
GetContentProcessById
(
ContentParentId
(
mProcessId
)
)
;
}
void
CanonicalBrowsingContext
:
:
GetWindowGlobals
(
nsTArray
<
RefPtr
<
WindowGlobalParent
>
>
&
aWindows
)
{
aWindows
.
SetCapacity
(
mWindowGlobals
.
Count
(
)
)
;
for
(
auto
iter
=
mWindowGlobals
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aWindows
.
AppendElement
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
}
}
void
CanonicalBrowsingContext
:
:
RegisterWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
{
MOZ_ASSERT
(
!
mWindowGlobals
.
Contains
(
aGlobal
)
"
Global
already
registered
!
"
)
;
mWindowGlobals
.
PutEntry
(
aGlobal
)
;
}
void
CanonicalBrowsingContext
:
:
UnregisterWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
{
MOZ_ASSERT
(
mWindowGlobals
.
Contains
(
aGlobal
)
"
Global
not
registered
!
"
)
;
mWindowGlobals
.
RemoveEntry
(
aGlobal
)
;
if
(
aGlobal
=
=
mCurrentWindowGlobal
)
{
mCurrentWindowGlobal
=
nullptr
;
}
}
void
CanonicalBrowsingContext
:
:
SetCurrentWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
{
MOZ_ASSERT
(
mWindowGlobals
.
Contains
(
aGlobal
)
"
Global
not
registered
!
"
)
;
mCurrentWindowGlobal
=
aGlobal
;
}
void
CanonicalBrowsingContext
:
:
SetEmbedderWindowGlobal
(
WindowGlobalParent
*
aGlobal
)
{
MOZ_RELEASE_ASSERT
(
aGlobal
"
null
embedder
"
)
;
if
(
RefPtr
<
BrowsingContext
>
parent
=
GetParent
(
)
)
{
MOZ_RELEASE_ASSERT
(
aGlobal
-
>
BrowsingContext
(
)
=
=
parent
"
Embedder
has
incorrect
browsing
context
"
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
aGlobal
-
>
IsInProcess
(
)
"
Toplevel
must
have
a
parent
-
process
embedder
"
)
;
}
mEmbedderWindowGlobal
=
aGlobal
;
}
bool
CanonicalBrowsingContext
:
:
ValidateTransaction
(
const
Transaction
&
aTransaction
ContentParent
*
aProcess
)
{
if
(
aTransaction
.
HasNonRacyField
(
)
)
{
if
(
NS_WARN_IF
(
aProcess
&
&
mProcessId
!
=
aProcess
-
>
ChildID
(
)
)
)
{
return
false
;
}
}
return
true
;
}
JSObject
*
CanonicalBrowsingContext
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CanonicalBrowsingContext_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
CanonicalBrowsingContext
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
{
CanonicalBrowsingContext
*
tmp
=
this
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWindowGlobals
mCurrentWindowGlobal
mEmbedderWindowGlobal
)
;
}
void
CanonicalBrowsingContext
:
:
Unlink
(
)
{
CanonicalBrowsingContext
*
tmp
=
this
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWindowGlobals
mCurrentWindowGlobal
mEmbedderWindowGlobal
)
;
}
void
CanonicalBrowsingContext
:
:
NotifyStartDelayedAutoplayMedia
(
)
{
if
(
!
mCurrentWindowGlobal
)
{
return
;
}
NotifyUserGestureActivation
(
)
;
AUTOPLAY_LOG
(
"
NotifyStartDelayedAutoplayMedia
for
chrome
bc
0x
%
08
"
PRIx64
Id
(
)
)
;
StartDelayedAutoplayMediaComponents
(
)
;
for
(
auto
iter
=
Group
(
)
-
>
ContentParentsIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
iter
.
Get
(
)
;
Unused
<
<
entry
-
>
GetKey
(
)
-
>
SendStartDelayedAutoplayMediaComponents
(
this
)
;
}
}
void
CanonicalBrowsingContext
:
:
SetFieldEpochsForChild
(
ContentParent
*
aChild
const
BrowsingContext
:
:
FieldEpochs
&
aEpochs
)
{
mChildFieldEpochs
.
Put
(
aChild
-
>
ChildID
(
)
aEpochs
)
;
}
const
BrowsingContext
:
:
FieldEpochs
&
CanonicalBrowsingContext
:
:
GetFieldEpochsForChild
(
ContentParent
*
aChild
)
{
static
const
BrowsingContext
:
:
FieldEpochs
sDefaultFieldEpochs
;
if
(
auto
entry
=
mChildFieldEpochs
.
Lookup
(
aChild
-
>
ChildID
(
)
)
)
{
return
entry
.
Data
(
)
;
}
return
sDefaultFieldEpochs
;
}
}
}
