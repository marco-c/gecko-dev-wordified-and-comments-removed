#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextBinding
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentProcessManager
.
h
"
#
include
"
mozilla
/
dom
/
MediaController
.
h
"
#
include
"
mozilla
/
dom
/
MediaControlService
.
h
"
#
include
"
mozilla
/
dom
/
ContentPlaybackController
.
h
"
#
include
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
net
/
DocumentLoadListener
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
mozilla
/
MozPromiseInlines
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsSHistory
.
h
"
#
include
"
nsSecureBrowserUI
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsBrowserStatusFilter
.
h
"
#
include
"
nsIBrowser
.
h
"
using
namespace
mozilla
:
:
ipc
;
extern
mozilla
:
:
LazyLogModule
gAutoplayPermissionLog
;
#
define
AUTOPLAY_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gAutoplayPermissionLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
dom
{
extern
mozilla
:
:
LazyLogModule
gUserInteractionPRLog
;
#
define
USER_ACTIVATION_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gUserInteractionPRLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
CanonicalBrowsingContext
:
:
CanonicalBrowsingContext
(
WindowContext
*
aParentWindow
BrowsingContextGroup
*
aGroup
uint64_t
aBrowsingContextId
uint64_t
aOwnerProcessId
uint64_t
aEmbedderProcessId
BrowsingContext
:
:
Type
aType
FieldTuple
&
&
aFields
)
:
BrowsingContext
(
aParentWindow
aGroup
aBrowsingContextId
aType
std
:
:
move
(
aFields
)
)
mProcessId
(
aOwnerProcessId
)
mEmbedderProcessId
(
aEmbedderProcessId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
already_AddRefed
<
CanonicalBrowsingContext
>
CanonicalBrowsingContext
:
:
Get
(
uint64_t
aId
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
BrowsingContext
:
:
Get
(
aId
)
.
downcast
<
CanonicalBrowsingContext
>
(
)
;
}
CanonicalBrowsingContext
*
CanonicalBrowsingContext
:
:
Cast
(
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
CanonicalBrowsingContext
*
>
(
aContext
)
;
}
const
CanonicalBrowsingContext
*
CanonicalBrowsingContext
:
:
Cast
(
const
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
static_cast
<
const
CanonicalBrowsingContext
*
>
(
aContext
)
;
}
ContentParent
*
CanonicalBrowsingContext
:
:
GetContentParent
(
)
const
{
if
(
mProcessId
=
=
0
)
{
return
nullptr
;
}
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
return
cpm
-
>
GetContentProcessById
(
ContentParentId
(
mProcessId
)
)
;
}
void
CanonicalBrowsingContext
:
:
GetCurrentRemoteType
(
nsACString
&
aRemoteType
ErrorResult
&
aRv
)
const
{
if
(
mProcessId
=
=
0
)
{
aRemoteType
=
NOT_REMOTE_TYPE
;
return
;
}
ContentParent
*
cp
=
GetContentParent
(
)
;
if
(
!
cp
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
aRemoteType
=
cp
-
>
GetRemoteType
(
)
;
}
void
CanonicalBrowsingContext
:
:
SetOwnerProcessId
(
uint64_t
aProcessId
)
{
MOZ_LOG
(
GetLog
(
)
LogLevel
:
:
Debug
(
"
SetOwnerProcessId
for
0x
%
08
"
PRIx64
"
(
0x
%
08
"
PRIx64
"
-
>
0x
%
08
"
PRIx64
"
)
"
Id
(
)
mProcessId
aProcessId
)
)
;
mProcessId
=
aProcessId
;
}
nsISecureBrowserUI
*
CanonicalBrowsingContext
:
:
GetSecureBrowserUI
(
)
{
if
(
!
IsTop
(
)
)
{
return
nullptr
;
}
if
(
!
mSecureBrowserUI
)
{
mSecureBrowserUI
=
new
nsSecureBrowserUI
(
this
)
;
}
return
mSecureBrowserUI
;
}
void
CanonicalBrowsingContext
:
:
MaybeAddAsProgressListener
(
nsIWebProgress
*
aWebProgress
)
{
if
(
!
GetWebProgress
(
)
)
{
return
;
}
if
(
!
mStatusFilter
)
{
mStatusFilter
=
new
nsBrowserStatusFilter
(
)
;
mStatusFilter
-
>
AddProgressListener
(
GetWebProgress
(
)
nsIWebProgress
:
:
NOTIFY_ALL
)
;
}
aWebProgress
-
>
AddProgressListener
(
mStatusFilter
nsIWebProgress
:
:
NOTIFY_ALL
)
;
}
void
CanonicalBrowsingContext
:
:
ReplacedBy
(
CanonicalBrowsingContext
*
aNewContext
)
{
MOZ_ASSERT
(
!
aNewContext
-
>
EverAttached
(
)
)
;
if
(
mStatusFilter
)
{
mStatusFilter
-
>
RemoveProgressListener
(
mWebProgress
)
;
mStatusFilter
=
nullptr
;
}
aNewContext
-
>
mWebProgress
=
std
:
:
move
(
mWebProgress
)
;
aNewContext
-
>
mFields
.
SetWithoutSyncing
<
IDX_BrowserId
>
(
GetBrowserId
(
)
)
;
}
void
CanonicalBrowsingContext
:
:
UpdateSecurityStateForLocationOrMixedContentChange
(
)
{
if
(
mSecureBrowserUI
)
{
mSecureBrowserUI
-
>
UpdateForLocationOrMixedContentChange
(
)
;
}
}
void
CanonicalBrowsingContext
:
:
SetInFlightProcessId
(
uint64_t
aProcessId
)
{
MOZ_ASSERT
(
aProcessId
)
;
mInFlightProcessId
=
aProcessId
;
}
void
CanonicalBrowsingContext
:
:
ClearInFlightProcessId
(
uint64_t
aProcessId
)
{
MOZ_ASSERT
(
aProcessId
)
;
if
(
mInFlightProcessId
=
=
aProcessId
)
{
mInFlightProcessId
=
0
;
}
}
void
CanonicalBrowsingContext
:
:
GetWindowGlobals
(
nsTArray
<
RefPtr
<
WindowGlobalParent
>
>
&
aWindows
)
{
aWindows
.
SetCapacity
(
GetWindowContexts
(
)
.
Length
(
)
)
;
for
(
auto
&
window
:
GetWindowContexts
(
)
)
{
aWindows
.
AppendElement
(
static_cast
<
WindowGlobalParent
*
>
(
window
.
get
(
)
)
)
;
}
}
WindowGlobalParent
*
CanonicalBrowsingContext
:
:
GetCurrentWindowGlobal
(
)
const
{
return
static_cast
<
WindowGlobalParent
*
>
(
GetCurrentWindowContext
(
)
)
;
}
WindowGlobalParent
*
CanonicalBrowsingContext
:
:
GetParentWindowContext
(
)
{
return
static_cast
<
WindowGlobalParent
*
>
(
BrowsingContext
:
:
GetParentWindowContext
(
)
)
;
}
WindowGlobalParent
*
CanonicalBrowsingContext
:
:
GetTopWindowContext
(
)
{
return
static_cast
<
WindowGlobalParent
*
>
(
BrowsingContext
:
:
GetTopWindowContext
(
)
)
;
}
already_AddRefed
<
nsIWidget
>
CanonicalBrowsingContext
:
:
GetParentProcessWidgetContaining
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
;
if
(
nsGlobalWindowOuter
*
window
=
nsGlobalWindowOuter
:
:
Cast
(
GetDOMWindow
(
)
)
)
{
widget
=
window
-
>
GetNearestWidget
(
)
;
}
else
if
(
Element
*
topEmbedder
=
Top
(
)
-
>
GetEmbedderElement
(
)
)
{
widget
=
nsContentUtils
:
:
WidgetForContent
(
topEmbedder
)
;
if
(
!
widget
)
{
widget
=
nsContentUtils
:
:
WidgetForDocument
(
topEmbedder
-
>
OwnerDoc
(
)
)
;
}
}
if
(
widget
)
{
widget
=
widget
-
>
GetTopLevelWidget
(
)
;
}
return
widget
.
forget
(
)
;
}
already_AddRefed
<
WindowGlobalParent
>
CanonicalBrowsingContext
:
:
GetEmbedderWindowGlobal
(
)
const
{
uint64_t
windowId
=
GetEmbedderInnerWindowId
(
)
;
if
(
windowId
=
=
0
)
{
return
nullptr
;
}
return
WindowGlobalParent
:
:
GetByInnerWindowId
(
windowId
)
;
}
already_AddRefed
<
CanonicalBrowsingContext
>
CanonicalBrowsingContext
:
:
GetParentCrossChromeBoundary
(
)
{
if
(
GetParent
(
)
)
{
return
do_AddRef
(
Cast
(
GetParent
(
)
)
)
;
}
if
(
GetEmbedderElement
(
)
)
{
return
do_AddRef
(
Cast
(
GetEmbedderElement
(
)
-
>
OwnerDoc
(
)
-
>
GetBrowsingContext
(
)
)
)
;
}
return
nullptr
;
}
Nullable
<
WindowProxyHolder
>
CanonicalBrowsingContext
:
:
GetTopChromeWindow
(
)
{
RefPtr
<
CanonicalBrowsingContext
>
bc
(
this
)
;
while
(
RefPtr
<
CanonicalBrowsingContext
>
parent
=
bc
-
>
GetParentCrossChromeBoundary
(
)
)
{
bc
=
parent
.
forget
(
)
;
}
if
(
bc
-
>
IsChrome
(
)
)
{
return
WindowProxyHolder
(
bc
.
forget
(
)
)
;
}
return
nullptr
;
}
nsISHistory
*
CanonicalBrowsingContext
:
:
GetSessionHistory
(
)
{
if
(
!
IsTop
(
)
)
{
return
Cast
(
Top
(
)
)
-
>
GetSessionHistory
(
)
;
}
if
(
!
mSessionHistory
&
&
GetChildSessionHistory
(
)
)
{
mSessionHistory
=
new
nsSHistory
(
this
)
;
}
return
mSessionHistory
;
}
UniquePtr
<
SessionHistoryInfo
>
CanonicalBrowsingContext
:
:
CreateSessionHistoryEntryForLoad
(
nsDocShellLoadState
*
aLoadState
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
GetSessionHistory
(
)
"
Creating
an
entry
but
session
history
is
not
enabled
for
this
"
"
browsing
context
!
"
)
;
RefPtr
<
SessionHistoryEntry
>
entry
=
new
SessionHistoryEntry
(
aLoadState
aChannel
)
;
mLoadingEntries
.
AppendElement
(
entry
)
;
MOZ_ASSERT
(
SessionHistoryEntry
:
:
GetByInfoId
(
entry
-
>
Info
(
)
.
Id
(
)
)
=
=
entry
)
;
return
MakeUnique
<
SessionHistoryInfo
>
(
entry
-
>
Info
(
)
)
;
}
void
CanonicalBrowsingContext
:
:
SessionHistoryCommit
(
uint64_t
aSessionHistoryEntryId
)
{
for
(
size_t
i
=
0
;
i
<
mLoadingEntries
.
Length
(
)
;
+
+
i
)
{
if
(
mLoadingEntries
[
i
]
-
>
Info
(
)
.
Id
(
)
=
=
aSessionHistoryEntryId
)
{
RefPtr
<
SessionHistoryEntry
>
oldActiveEntry
=
mActiveEntry
.
forget
(
)
;
mActiveEntry
=
mLoadingEntries
[
i
]
;
mLoadingEntries
.
RemoveElementAt
(
i
)
;
if
(
IsTop
(
)
)
{
GetSessionHistory
(
)
-
>
AddEntry
(
mActiveEntry
true
)
;
}
else
{
if
(
oldActiveEntry
)
{
GetSessionHistory
(
)
-
>
AddChildSHEntryHelper
(
oldActiveEntry
mActiveEntry
Top
(
)
true
)
;
}
else
{
SessionHistoryEntry
*
parentEntry
=
static_cast
<
CanonicalBrowsingContext
*
>
(
GetParent
(
)
)
-
>
mActiveEntry
;
if
(
parentEntry
)
{
parentEntry
-
>
AddChild
(
mActiveEntry
Children
(
)
.
Length
(
)
-
1
IsInProcess
(
)
)
;
}
}
}
Group
(
)
-
>
EachParent
(
[
&
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendHistoryCommitLength
(
Top
(
)
GetSessionHistory
(
)
-
>
GetCount
(
)
)
;
}
)
;
return
;
}
}
}
void
CanonicalBrowsingContext
:
:
NotifyOnHistoryReload
(
bool
&
aCanReload
Maybe
<
RefPtr
<
nsDocShellLoadState
>
>
&
aLoadState
Maybe
<
bool
>
&
aReloadActiveEntry
)
{
GetSessionHistory
(
)
-
>
NotifyOnHistoryReload
(
&
aCanReload
)
;
if
(
!
aCanReload
)
{
return
;
}
if
(
mActiveEntry
)
{
aLoadState
.
emplace
(
)
;
mActiveEntry
-
>
CreateLoadInfo
(
getter_AddRefs
(
aLoadState
.
ref
(
)
)
)
;
aReloadActiveEntry
.
emplace
(
true
)
;
}
else
if
(
!
mLoadingEntries
.
IsEmpty
(
)
)
{
aLoadState
.
emplace
(
)
;
mLoadingEntries
.
LastElement
(
)
-
>
CreateLoadInfo
(
getter_AddRefs
(
aLoadState
.
ref
(
)
)
)
;
aReloadActiveEntry
.
emplace
(
false
)
;
}
}
JSObject
*
CanonicalBrowsingContext
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CanonicalBrowsingContext_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
CanonicalBrowsingContext
:
:
DispatchWheelZoomChange
(
bool
aIncrease
)
{
Element
*
element
=
Top
(
)
-
>
GetEmbedderElement
(
)
;
if
(
!
element
)
{
return
;
}
auto
event
=
aIncrease
?
u
"
DoZoomEnlargeBy10
"
_ns
:
u
"
DoZoomReduceBy10
"
_ns
;
auto
dispatcher
=
MakeRefPtr
<
AsyncEventDispatcher
>
(
element
event
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eYes
)
;
dispatcher
-
>
PostDOMEvent
(
)
;
}
void
CanonicalBrowsingContext
:
:
CanonicalDiscard
(
)
{
if
(
mTabMediaController
)
{
mTabMediaController
-
>
Shutdown
(
)
;
mTabMediaController
=
nullptr
;
}
}
void
CanonicalBrowsingContext
:
:
NotifyStartDelayedAutoplayMedia
(
)
{
if
(
!
GetCurrentWindowGlobal
(
)
)
{
return
;
}
NotifyUserGestureActivation
(
)
;
AUTOPLAY_LOG
(
"
NotifyStartDelayedAutoplayMedia
for
chrome
bc
0x
%
08
"
PRIx64
Id
(
)
)
;
StartDelayedAutoplayMediaComponents
(
)
;
Group
(
)
-
>
EachParent
(
[
&
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendStartDelayedAutoplayMediaComponents
(
this
)
;
}
)
;
}
void
CanonicalBrowsingContext
:
:
NotifyMediaMutedChanged
(
bool
aMuted
)
{
MOZ_ASSERT
(
!
GetParent
(
)
"
Notify
media
mute
change
on
non
top
-
level
context
!
"
)
;
SetMuted
(
aMuted
)
;
}
uint32_t
CanonicalBrowsingContext
:
:
CountSiteOrigins
(
GlobalObject
&
aGlobal
const
Sequence
<
OwningNonNull
<
BrowsingContext
>
>
&
aRoots
)
{
nsTHashtable
<
nsCStringHashKey
>
uniqueSiteOrigins
;
for
(
const
auto
&
root
:
aRoots
)
{
root
-
>
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
WindowGlobalParent
*
windowGlobalParent
=
aContext
-
>
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
if
(
windowGlobalParent
)
{
nsIPrincipal
*
documentPrincipal
=
windowGlobalParent
-
>
DocumentPrincipal
(
)
;
bool
isContentPrincipal
=
documentPrincipal
-
>
GetIsContentPrincipal
(
)
;
if
(
isContentPrincipal
)
{
nsCString
siteOrigin
;
documentPrincipal
-
>
GetSiteOrigin
(
siteOrigin
)
;
uniqueSiteOrigins
.
PutEntry
(
siteOrigin
)
;
}
}
}
)
;
}
return
uniqueSiteOrigins
.
Count
(
)
;
}
void
CanonicalBrowsingContext
:
:
UpdateMediaControlKey
(
MediaControlKey
aKey
)
{
ContentMediaControlKeyHandler
:
:
HandleMediaControlKey
(
this
aKey
)
;
Group
(
)
-
>
EachParent
(
[
&
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendUpdateMediaControlKey
(
this
aKey
)
;
}
)
;
}
void
CanonicalBrowsingContext
:
:
LoadURI
(
const
nsAString
&
aURI
const
LoadURIOptions
&
aOptions
ErrorResult
&
aError
)
{
RefPtr
<
nsDocShellLoadState
>
loadState
;
nsresult
rv
=
nsDocShellLoadState
:
:
CreateFromLoadURIOptions
(
this
aURI
aOptions
getter_AddRefs
(
loadState
)
)
;
if
(
rv
=
=
NS_ERROR_MALFORMED_URI
)
{
DisplayLoadError
(
aURI
)
;
return
;
}
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
return
;
}
LoadURI
(
loadState
true
)
;
}
void
CanonicalBrowsingContext
:
:
GoBack
(
const
Optional
<
int32_t
>
&
aCancelContentJSEpoch
bool
aRequireUserInteraction
)
{
if
(
IsDiscarded
(
)
)
{
return
;
}
if
(
mCurrentLoad
)
{
mCurrentLoad
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
}
if
(
nsDocShell
*
docShell
=
nsDocShell
:
:
Cast
(
GetDocShell
(
)
)
)
{
if
(
aCancelContentJSEpoch
.
WasPassed
(
)
)
{
docShell
-
>
SetCancelContentJSEpoch
(
aCancelContentJSEpoch
.
Value
(
)
)
;
}
docShell
-
>
GoBack
(
aRequireUserInteraction
)
;
}
else
if
(
ContentParent
*
cp
=
GetContentParent
(
)
)
{
Maybe
<
int32_t
>
cancelContentJSEpoch
;
if
(
aCancelContentJSEpoch
.
WasPassed
(
)
)
{
cancelContentJSEpoch
=
Some
(
aCancelContentJSEpoch
.
Value
(
)
)
;
}
Unused
<
<
cp
-
>
SendGoBack
(
this
cancelContentJSEpoch
aRequireUserInteraction
)
;
}
}
void
CanonicalBrowsingContext
:
:
GoForward
(
const
Optional
<
int32_t
>
&
aCancelContentJSEpoch
bool
aRequireUserInteraction
)
{
if
(
IsDiscarded
(
)
)
{
return
;
}
if
(
mCurrentLoad
)
{
mCurrentLoad
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
}
if
(
auto
*
docShell
=
nsDocShell
:
:
Cast
(
GetDocShell
(
)
)
)
{
if
(
aCancelContentJSEpoch
.
WasPassed
(
)
)
{
docShell
-
>
SetCancelContentJSEpoch
(
aCancelContentJSEpoch
.
Value
(
)
)
;
}
docShell
-
>
GoForward
(
aRequireUserInteraction
)
;
}
else
if
(
ContentParent
*
cp
=
GetContentParent
(
)
)
{
Maybe
<
int32_t
>
cancelContentJSEpoch
;
if
(
aCancelContentJSEpoch
.
WasPassed
(
)
)
{
cancelContentJSEpoch
.
emplace
(
aCancelContentJSEpoch
.
Value
(
)
)
;
}
Unused
<
<
cp
-
>
SendGoForward
(
this
cancelContentJSEpoch
aRequireUserInteraction
)
;
}
}
void
CanonicalBrowsingContext
:
:
GoToIndex
(
int32_t
aIndex
const
Optional
<
int32_t
>
&
aCancelContentJSEpoch
)
{
if
(
IsDiscarded
(
)
)
{
return
;
}
if
(
mCurrentLoad
)
{
mCurrentLoad
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
}
if
(
auto
*
docShell
=
nsDocShell
:
:
Cast
(
GetDocShell
(
)
)
)
{
if
(
aCancelContentJSEpoch
.
WasPassed
(
)
)
{
docShell
-
>
SetCancelContentJSEpoch
(
aCancelContentJSEpoch
.
Value
(
)
)
;
}
docShell
-
>
GotoIndex
(
aIndex
)
;
}
else
if
(
ContentParent
*
cp
=
GetContentParent
(
)
)
{
Maybe
<
int32_t
>
cancelContentJSEpoch
;
if
(
aCancelContentJSEpoch
.
WasPassed
(
)
)
{
cancelContentJSEpoch
.
emplace
(
aCancelContentJSEpoch
.
Value
(
)
)
;
}
Unused
<
<
cp
-
>
SendGoToIndex
(
this
aIndex
cancelContentJSEpoch
)
;
}
}
void
CanonicalBrowsingContext
:
:
Reload
(
uint32_t
aReloadFlags
)
{
if
(
IsDiscarded
(
)
)
{
return
;
}
if
(
mCurrentLoad
)
{
mCurrentLoad
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
}
if
(
auto
*
docShell
=
nsDocShell
:
:
Cast
(
GetDocShell
(
)
)
)
{
docShell
-
>
Reload
(
aReloadFlags
)
;
}
else
if
(
ContentParent
*
cp
=
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendReload
(
this
aReloadFlags
)
;
}
}
void
CanonicalBrowsingContext
:
:
Stop
(
uint32_t
aStopFlags
)
{
if
(
IsDiscarded
(
)
)
{
return
;
}
if
(
mCurrentLoad
&
&
(
aStopFlags
&
nsIWebNavigation
:
:
STOP_NETWORK
)
)
{
mCurrentLoad
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
}
if
(
auto
*
docShell
=
nsDocShell
:
:
Cast
(
GetDocShell
(
)
)
)
{
docShell
-
>
Stop
(
aStopFlags
)
;
}
else
if
(
ContentParent
*
cp
=
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendStopLoad
(
this
aStopFlags
)
;
}
}
void
CanonicalBrowsingContext
:
:
PendingRemotenessChange
:
:
ProcessReady
(
)
{
if
(
!
mPromise
)
{
return
;
}
if
(
mPrepareToChangePromise
)
{
mPrepareToChangePromise
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
=
RefPtr
{
this
}
]
(
bool
)
{
self
-
>
Finish
(
)
;
}
[
self
=
RefPtr
{
this
}
]
(
nsresult
aRv
)
{
self
-
>
Cancel
(
aRv
)
;
}
)
;
return
;
}
Finish
(
)
;
}
void
CanonicalBrowsingContext
:
:
PendingRemotenessChange
:
:
Finish
(
)
{
if
(
!
mPromise
)
{
return
;
}
RefPtr
<
CanonicalBrowsingContext
>
target
(
mTarget
)
;
if
(
target
-
>
IsDiscarded
(
)
)
{
Cancel
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
Element
*
browserElement
=
target
-
>
GetEmbedderElement
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
target
-
>
IsTop
(
)
"
We
shouldn
'
t
be
trying
to
change
the
remoteness
of
"
"
non
-
remote
iframes
"
)
;
nsCOMPtr
<
nsIBrowser
>
browser
=
browserElement
-
>
AsBrowser
(
)
;
if
(
!
browser
)
{
Cancel
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
nsFrameLoaderOwner
>
frameLoaderOwner
=
do_QueryObject
(
browserElement
)
;
MOZ_RELEASE_ASSERT
(
frameLoaderOwner
"
embedder
browser
must
be
nsFrameLoaderOwner
"
)
;
nsresult
rv
=
browser
-
>
BeforeChangeRemoteness
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
Cancel
(
rv
)
;
return
;
}
browserElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
remote
mContentParent
?
u
"
true
"
_ns
:
u
"
false
"
_ns
true
)
;
RefPtr
<
BrowsingContextGroup
>
specificGroup
;
if
(
mSpecificGroupId
!
=
0
)
{
specificGroup
=
BrowsingContextGroup
:
:
GetOrCreate
(
mSpecificGroupId
)
;
}
ErrorResult
error
;
frameLoaderOwner
-
>
ChangeRemotenessToProcess
(
mContentParent
mReplaceBrowsingContext
specificGroup
error
)
;
if
(
error
.
Failed
(
)
)
{
Cancel
(
error
.
StealNSResult
(
)
)
;
return
;
}
bool
loadResumed
=
false
;
rv
=
browser
-
>
FinishChangeRemoteness
(
mPendingSwitchId
&
loadResumed
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Cancel
(
rv
)
;
return
;
}
RefPtr
<
nsFrameLoader
>
frameLoader
=
frameLoaderOwner
-
>
GetFrameLoader
(
)
;
RefPtr
<
BrowserParent
>
newBrowser
=
frameLoader
-
>
GetBrowserParent
(
)
;
if
(
!
newBrowser
)
{
if
(
mContentParent
)
{
Cancel
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
if
(
!
loadResumed
)
{
RefPtr
<
nsDocShell
>
newDocShell
=
frameLoader
-
>
GetDocShell
(
error
)
;
if
(
error
.
Failed
(
)
)
{
Cancel
(
error
.
StealNSResult
(
)
)
;
return
;
}
rv
=
newDocShell
-
>
ResumeRedirectedLoad
(
mPendingSwitchId
-
1
)
;
if
(
NS_FAILED
(
rv
)
)
{
Cancel
(
error
.
StealNSResult
(
)
)
;
return
;
}
}
}
else
if
(
!
loadResumed
)
{
newBrowser
-
>
ResumeLoad
(
mPendingSwitchId
)
;
}
mPromise
-
>
Resolve
(
newBrowser
__func__
)
;
Clear
(
)
;
return
;
}
if
(
NS_WARN_IF
(
!
mContentParent
)
)
{
Cancel
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
WindowGlobalParent
>
embedderWindow
=
target
-
>
GetEmbedderWindowGlobal
(
)
;
if
(
NS_WARN_IF
(
!
embedderWindow
)
|
|
NS_WARN_IF
(
!
embedderWindow
-
>
CanSend
(
)
)
)
{
Cancel
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
BrowserParent
>
embedderBrowser
=
embedderWindow
-
>
GetBrowserParent
(
)
;
if
(
NS_WARN_IF
(
!
embedderBrowser
)
)
{
Cancel
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsILoadContext
>
loadContext
=
embedderBrowser
-
>
GetLoadContext
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
loadContext
-
>
UseRemoteTabs
(
)
&
&
loadContext
-
>
UseRemoteSubframes
(
)
"
Not
supported
without
fission
"
)
;
uint32_t
chromeFlags
=
nsIWebBrowserChrome
:
:
CHROME_REMOTE_WINDOW
|
nsIWebBrowserChrome
:
:
CHROME_FISSION_WINDOW
;
if
(
loadContext
-
>
UsePrivateBrowsing
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_PRIVATE_WINDOW
;
}
RefPtr
<
WindowGlobalParent
>
oldWindow
=
target
-
>
GetCurrentWindowGlobal
(
)
;
RefPtr
<
BrowserParent
>
oldBrowser
=
oldWindow
?
oldWindow
-
>
GetBrowserParent
(
)
:
nullptr
;
bool
wasRemote
=
oldWindow
&
&
oldWindow
-
>
IsProcessRoot
(
)
;
uint64_t
inFlightProcessId
=
target
-
>
OwnerProcessId
(
)
;
target
-
>
SetInFlightProcessId
(
inFlightProcessId
)
;
target
-
>
SetOwnerProcessId
(
mContentParent
-
>
ChildID
(
)
)
;
auto
resetInFlightId
=
[
target
inFlightProcessId
]
{
target
-
>
ClearInFlightProcessId
(
inFlightProcessId
)
;
}
;
if
(
wasRemote
)
{
MOZ_DIAGNOSTIC_ASSERT
(
oldBrowser
)
;
MOZ_DIAGNOSTIC_ASSERT
(
oldBrowser
!
=
embedderBrowser
)
;
MOZ_DIAGNOSTIC_ASSERT
(
oldBrowser
-
>
GetBrowserBridgeParent
(
)
)
;
auto
callback
=
[
resetInFlightId
]
(
auto
)
{
resetInFlightId
(
)
;
}
;
oldBrowser
-
>
SendWillChangeProcess
(
callback
callback
)
;
oldBrowser
-
>
Destroy
(
)
;
}
MOZ_ASSERT
(
!
mReplaceBrowsingContext
"
Cannot
replace
BC
for
subframe
"
)
;
nsCOMPtr
<
nsIPrincipal
>
initialPrincipal
=
NullPrincipal
:
:
CreateWithInheritedAttributes
(
target
-
>
OriginAttributesRef
(
)
false
)
;
WindowGlobalInit
windowInit
=
WindowGlobalActor
:
:
AboutBlankInitializer
(
target
initialPrincipal
)
;
TabId
tabId
(
nsContentUtils
:
:
GenerateTabId
(
)
)
;
RefPtr
<
BrowserBridgeParent
>
bridge
=
new
BrowserBridgeParent
(
)
;
nsresult
rv
=
bridge
-
>
InitWithProcess
(
embedderBrowser
mContentParent
windowInit
chromeFlags
tabId
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Cancel
(
rv
)
;
return
;
}
RefPtr
<
BrowserParent
>
newBrowser
=
bridge
-
>
GetBrowserParent
(
)
;
{
auto
callback
=
[
wasRemote
resetInFlightId
]
(
auto
)
{
if
(
!
wasRemote
)
{
resetInFlightId
(
)
;
}
}
;
ManagedEndpoint
<
PBrowserBridgeChild
>
endpoint
=
embedderBrowser
-
>
OpenPBrowserBridgeEndpoint
(
bridge
)
;
if
(
NS_WARN_IF
(
!
endpoint
.
IsValid
(
)
)
)
{
Cancel
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
embedderWindow
-
>
SendMakeFrameRemote
(
target
std
:
:
move
(
endpoint
)
tabId
newBrowser
-
>
GetLayersId
(
)
callback
callback
)
;
}
newBrowser
-
>
ResumeLoad
(
mPendingSwitchId
)
;
mPromise
-
>
Resolve
(
newBrowser
__func__
)
;
Clear
(
)
;
}
void
CanonicalBrowsingContext
:
:
PendingRemotenessChange
:
:
Cancel
(
nsresult
aRv
)
{
if
(
!
mPromise
)
{
return
;
}
mPromise
-
>
Reject
(
aRv
__func__
)
;
Clear
(
)
;
}
void
CanonicalBrowsingContext
:
:
PendingRemotenessChange
:
:
Clear
(
)
{
RefPtr
<
PendingRemotenessChange
>
kungFuDeathGrip
(
this
)
;
if
(
mTarget
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mTarget
-
>
mPendingRemotenessChange
=
=
this
)
;
mTarget
-
>
mPendingRemotenessChange
=
nullptr
;
}
if
(
mContentParent
)
{
mContentParent
-
>
RemoveKeepAlive
(
)
;
mContentParent
=
nullptr
;
}
mPromise
=
nullptr
;
mTarget
=
nullptr
;
mPrepareToChangePromise
=
nullptr
;
}
CanonicalBrowsingContext
:
:
PendingRemotenessChange
:
:
PendingRemotenessChange
(
CanonicalBrowsingContext
*
aTarget
RemotenessPromise
:
:
Private
*
aPromise
uint64_t
aPendingSwitchId
bool
aReplaceBrowsingContext
uint64_t
aSpecificGroupId
)
:
mTarget
(
aTarget
)
mPromise
(
aPromise
)
mPendingSwitchId
(
aPendingSwitchId
)
mSpecificGroupId
(
aSpecificGroupId
)
mReplaceBrowsingContext
(
aReplaceBrowsingContext
)
{
}
CanonicalBrowsingContext
:
:
PendingRemotenessChange
:
:
~
PendingRemotenessChange
(
)
{
MOZ_ASSERT
(
!
mPromise
&
&
!
mTarget
"
should
'
ve
already
been
Cancel
(
)
or
Complete
(
)
-
ed
"
)
;
}
RefPtr
<
CanonicalBrowsingContext
:
:
RemotenessPromise
>
CanonicalBrowsingContext
:
:
ChangeRemoteness
(
const
nsACString
&
aRemoteType
uint64_t
aPendingSwitchId
bool
aReplaceBrowsingContext
uint64_t
aSpecificGroupId
)
{
MOZ_DIAGNOSTIC_ASSERT
(
IsContent
(
)
"
cannot
change
the
process
of
chrome
contexts
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
IsTop
(
)
=
=
IsEmbeddedInProcess
(
0
)
"
toplevel
content
must
be
embedded
in
the
parent
process
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aReplaceBrowsingContext
|
|
IsTop
(
)
"
Cannot
replace
BrowsingContext
for
subframes
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aSpecificGroupId
=
=
0
|
|
aReplaceBrowsingContext
"
Cannot
specify
group
ID
unless
replacing
BC
"
)
;
RefPtr
<
WindowGlobalParent
>
embedderWindowGlobal
=
GetEmbedderWindowGlobal
(
)
;
if
(
!
embedderWindowGlobal
)
{
NS_WARNING
(
"
Non
-
embedded
BrowsingContext
"
)
;
return
RemotenessPromise
:
:
CreateAndReject
(
NS_ERROR_UNEXPECTED
__func__
)
;
}
if
(
!
embedderWindowGlobal
-
>
CanSend
(
)
)
{
NS_WARNING
(
"
Embedder
already
been
destroyed
.
"
)
;
return
RemotenessPromise
:
:
CreateAndReject
(
NS_ERROR_NOT_AVAILABLE
__func__
)
;
}
if
(
aRemoteType
.
IsEmpty
(
)
&
&
(
!
IsTop
(
)
|
|
!
GetEmbedderElement
(
)
)
)
{
NS_WARNING
(
"
Cannot
load
non
-
remote
subframes
"
)
;
return
RemotenessPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
if
(
mPendingRemotenessChange
)
{
mPendingRemotenessChange
-
>
Cancel
(
NS_ERROR_ABORT
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mPendingRemotenessChange
"
Should
have
cleared
"
)
;
}
RefPtr
<
BrowserParent
>
embedderBrowser
=
embedderWindowGlobal
-
>
GetBrowserParent
(
)
;
if
(
embedderBrowser
&
&
aRemoteType
.
Equals
(
embedderBrowser
-
>
Manager
(
)
-
>
GetRemoteType
(
)
)
)
{
if
(
GetCurrentWindowGlobal
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
GetCurrentWindowGlobal
(
)
-
>
IsProcessRoot
(
)
)
;
RefPtr
<
BrowserParent
>
oldBrowser
=
GetCurrentWindowGlobal
(
)
-
>
GetBrowserParent
(
)
;
uint64_t
targetProcessId
=
OwnerProcessId
(
)
;
SetInFlightProcessId
(
targetProcessId
)
;
auto
callback
=
[
target
=
RefPtr
{
this
}
targetProcessId
]
(
auto
)
{
target
-
>
ClearInFlightProcessId
(
targetProcessId
)
;
}
;
oldBrowser
-
>
SendWillChangeProcess
(
callback
callback
)
;
oldBrowser
-
>
Destroy
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
aReplaceBrowsingContext
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aRemoteType
.
IsEmpty
(
)
)
;
SetOwnerProcessId
(
embedderBrowser
-
>
Manager
(
)
-
>
ChildID
(
)
)
;
Unused
<
<
embedderWindowGlobal
-
>
SendMakeFrameLocal
(
this
aPendingSwitchId
)
;
return
RemotenessPromise
:
:
CreateAndResolve
(
embedderBrowser
__func__
)
;
}
auto
promise
=
MakeRefPtr
<
RemotenessPromise
:
:
Private
>
(
__func__
)
;
RefPtr
<
PendingRemotenessChange
>
change
=
new
PendingRemotenessChange
(
this
promise
aPendingSwitchId
aReplaceBrowsingContext
aSpecificGroupId
)
;
mPendingRemotenessChange
=
change
;
if
(
IsTop
(
)
&
&
GetEmbedderElement
(
)
)
{
nsCOMPtr
<
nsIBrowser
>
browser
=
GetEmbedderElement
(
)
-
>
AsBrowser
(
)
;
if
(
!
browser
)
{
change
-
>
Cancel
(
NS_ERROR_FAILURE
)
;
return
promise
.
forget
(
)
;
}
RefPtr
<
Promise
>
blocker
;
nsresult
rv
=
browser
-
>
PrepareToChangeRemoteness
(
getter_AddRefs
(
blocker
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
change
-
>
Cancel
(
rv
)
;
return
promise
.
forget
(
)
;
}
change
-
>
mPrepareToChangePromise
=
GenericPromise
:
:
FromDomPromise
(
blocker
)
;
}
if
(
aRemoteType
.
IsEmpty
(
)
)
{
change
-
>
ProcessReady
(
)
;
}
else
{
change
-
>
mContentParent
=
ContentParent
:
:
GetNewOrUsedLaunchingBrowserProcess
(
nullptr
aRemoteType
hal
:
:
PROCESS_PRIORITY_FOREGROUND
false
)
;
if
(
!
change
-
>
mContentParent
)
{
change
-
>
Cancel
(
NS_ERROR_FAILURE
)
;
return
promise
.
forget
(
)
;
}
change
-
>
mContentParent
-
>
AddKeepAlive
(
)
;
change
-
>
mContentParent
-
>
WaitForLaunchAsync
(
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
change
]
(
ContentParent
*
)
{
change
-
>
ProcessReady
(
)
;
}
[
change
]
(
LaunchError
)
{
change
-
>
Cancel
(
NS_ERROR_FAILURE
)
;
}
)
;
}
return
promise
.
forget
(
)
;
}
MediaController
*
CanonicalBrowsingContext
:
:
GetMediaController
(
)
{
if
(
GetParent
(
)
)
{
return
Cast
(
Top
(
)
)
-
>
GetMediaController
(
)
;
}
MOZ_ASSERT
(
!
GetParent
(
)
"
Must
access
the
controller
from
the
top
-
level
browsing
context
!
"
)
;
if
(
!
mTabMediaController
&
&
!
IsDiscarded
(
)
&
&
IsContent
(
)
)
{
mTabMediaController
=
new
MediaController
(
Id
(
)
)
;
}
return
mTabMediaController
;
}
bool
CanonicalBrowsingContext
:
:
SupportsLoadingInParent
(
nsDocShellLoadState
*
aLoadState
uint64_t
*
aOuterWindowId
)
{
if
(
WatchedByDevTools
(
)
)
{
return
false
;
}
if
(
!
net
:
:
SchemeIsHTTP
(
aLoadState
-
>
URI
(
)
)
&
&
!
net
:
:
SchemeIsHTTPS
(
aLoadState
-
>
URI
(
)
)
)
{
return
false
;
}
if
(
WindowGlobalParent
*
global
=
GetCurrentWindowGlobal
(
)
)
{
nsCOMPtr
<
nsIURI
>
currentURI
=
global
-
>
GetDocumentURI
(
)
;
if
(
currentURI
)
{
bool
newURIHasRef
=
false
;
aLoadState
-
>
URI
(
)
-
>
GetHasRef
(
&
newURIHasRef
)
;
bool
equalsExceptRef
=
false
;
aLoadState
-
>
URI
(
)
-
>
EqualsExceptRef
(
currentURI
&
equalsExceptRef
)
;
if
(
equalsExceptRef
&
&
newURIHasRef
)
{
return
false
;
}
}
if
(
global
-
>
HasBeforeUnload
(
)
)
{
return
false
;
}
*
aOuterWindowId
=
global
-
>
OuterWindowId
(
)
;
}
return
true
;
}
bool
CanonicalBrowsingContext
:
:
LoadInParent
(
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
)
{
if
(
!
IsTopContent
(
)
|
|
!
GetContentParent
(
)
|
|
!
StaticPrefs
:
:
browser_tabs_documentchannel
(
)
|
|
!
StaticPrefs
:
:
browser_tabs_documentchannel_parent_controlled
(
)
)
{
return
false
;
}
uint64_t
outerWindowId
=
0
;
if
(
!
SupportsLoadingInParent
(
aLoadState
&
outerWindowId
)
)
{
return
false
;
}
return
net
:
:
DocumentLoadListener
:
:
LoadInParent
(
this
aLoadState
outerWindowId
aSetNavigating
)
;
}
bool
CanonicalBrowsingContext
:
:
AttemptSpeculativeLoadInParent
(
nsDocShellLoadState
*
aLoadState
)
{
if
(
!
IsTopContent
(
)
|
|
!
GetContentParent
(
)
|
|
!
StaticPrefs
:
:
browser_tabs_documentchannel
(
)
|
|
!
StaticPrefs
:
:
browser_tabs_documentchannel_parent_initiated
(
)
|
|
StaticPrefs
:
:
browser_tabs_documentchannel_parent_controlled
(
)
)
{
return
false
;
}
uint64_t
outerWindowId
=
0
;
if
(
!
SupportsLoadingInParent
(
aLoadState
&
outerWindowId
)
)
{
return
false
;
}
return
net
:
:
DocumentLoadListener
:
:
SpeculativeLoadInParent
(
this
aLoadState
outerWindowId
)
;
}
bool
CanonicalBrowsingContext
:
:
StartDocumentLoad
(
net
:
:
DocumentLoadListener
*
aLoad
)
{
if
(
StaticPrefs
:
:
browser_tabs_documentchannel_parent_controlled
(
)
&
&
mCurrentLoad
)
{
mCurrentLoad
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
}
mCurrentLoad
=
aLoad
;
SetCurrentLoadIdentifier
(
Some
(
aLoad
-
>
GetLoadIdentifier
(
)
)
)
;
return
true
;
}
void
CanonicalBrowsingContext
:
:
EndDocumentLoad
(
bool
aForProcessSwitch
)
{
mCurrentLoad
=
nullptr
;
if
(
!
aForProcessSwitch
)
{
SetCurrentLoadIdentifier
(
Nothing
(
)
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
CanonicalBrowsingContext
BrowsingContext
mSessionHistory
)
NS_IMPL_ADDREF_INHERITED
(
CanonicalBrowsingContext
BrowsingContext
)
NS_IMPL_RELEASE_INHERITED
(
CanonicalBrowsingContext
BrowsingContext
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CanonicalBrowsingContext
)
NS_INTERFACE_MAP_END_INHERITING
(
BrowsingContext
)
}
}
