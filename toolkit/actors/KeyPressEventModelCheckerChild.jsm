"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
KeyPressEventModelCheckerChild
"
]
;
const
{
ActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorChild
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
KeyPressEventModelCheckerChild
extends
ActorChild
{
handleEvent
(
aEvent
)
{
if
(
!
AppConstants
.
DEBUG
)
{
aEvent
.
stopImmediatePropagation
(
)
;
}
let
model
=
HTMLDocument
.
KEYPRESS_EVENT_MODEL_DEFAULT
;
if
(
this
.
_isOldConfluence
(
aEvent
.
target
.
ownerGlobal
)
)
{
model
=
HTMLDocument
.
KEYPRESS_EVENT_MODEL_SPLIT
;
}
aEvent
.
target
.
setKeyPressEventModel
(
model
)
;
}
_isOldConfluence
(
aWindow
)
{
if
(
!
aWindow
)
{
return
false
;
}
let
tinyMCEObject
;
try
{
tinyMCEObject
=
ChromeUtils
.
waiveXrays
(
aWindow
.
parent
)
.
tinyMCE
;
}
catch
(
e
)
{
}
if
(
!
tinyMCEObject
)
{
try
{
tinyMCEObject
=
ChromeUtils
.
waiveXrays
(
aWindow
)
.
tinyMCE
;
}
catch
(
e
)
{
}
if
(
!
tinyMCEObject
)
{
return
false
;
}
}
try
{
let
{
author
version
}
=
new
tinyMCEObject
.
plugins
.
CursorTargetPlugin
(
)
.
getInfo
(
)
;
if
(
author
!
=
=
"
Atlassian
"
)
{
return
false
;
}
let
isOldVersion
=
version
=
=
=
"
1
.
0
"
;
Services
.
telemetry
.
keyedScalarAdd
(
"
dom
.
event
.
confluence_load_count
"
isOldVersion
?
"
old
"
:
"
new
"
1
)
;
return
isOldVersion
;
}
catch
(
e
)
{
return
false
;
}
}
}
