"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
TestParent
"
]
;
class
TestParent
extends
JSWindowActorParent
{
constructor
(
)
{
super
(
)
;
this
.
wrappedJSObject
=
this
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
init
"
:
aMessage
.
data
.
initial
=
true
;
this
.
sendAsyncMessage
(
"
toChild
"
aMessage
.
data
)
;
break
;
case
"
toParent
"
:
aMessage
.
data
.
toParent
=
true
;
this
.
sendAsyncMessage
(
"
done
"
aMessage
.
data
)
;
break
;
case
"
asyncMul
"
:
let
{
a
b
}
=
aMessage
.
data
;
return
{
result
:
a
*
b
}
;
case
"
event
"
:
Services
.
obs
.
notifyObservers
(
this
"
test
-
js
-
window
-
actor
-
parent
-
event
"
aMessage
.
data
.
type
)
;
break
;
}
return
undefined
;
}
show
(
)
{
return
"
TestParent
"
;
}
willDestroy
(
)
{
Services
.
obs
.
notifyObservers
(
this
"
test
-
js
-
window
-
actor
-
parent
-
willdestroy
"
true
)
;
}
didDestroy
(
)
{
Services
.
obs
.
notifyObservers
(
this
"
test
-
js
-
window
-
actor
-
parent
-
diddestroy
"
true
)
;
}
}
