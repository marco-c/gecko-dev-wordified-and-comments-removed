"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PictureInPictureChild
"
"
PictureInPictureToggleChild
"
]
;
ChromeUtils
.
defineModuleGetter
(
this
"
DeferredTask
"
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TOGGLE_POLICIES
"
"
resource
:
/
/
gre
/
modules
/
PictureInPictureTogglePolicy
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TOGGLE_POLICY_STRINGS
"
"
resource
:
/
/
gre
/
modules
/
PictureInPictureTogglePolicy
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
TOGGLE_ENABLED_PREF
=
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
enabled
"
;
const
TOGGLE_TESTING_PREF
=
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
testing
"
;
const
MOUSEMOVE_PROCESSING_DELAY_MS
=
50
;
const
TOGGLE_HIDING_TIMEOUT_MS
=
2000
;
var
gWeakVideo
=
null
;
var
gWeakPlayerContent
=
null
;
var
gWeakIntersectingVideosForTesting
=
new
WeakSet
(
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gToggleOverrides
"
(
)
=
>
{
return
PictureInPictureToggleChild
.
getToggleOverrides
(
)
;
}
)
;
class
PictureInPictureToggleChild
extends
JSWindowActorChild
{
constructor
(
dispatcher
)
{
super
(
dispatcher
)
;
this
.
weakDocStates
=
new
WeakMap
(
)
;
this
.
toggleEnabled
=
Services
.
prefs
.
getBoolPref
(
TOGGLE_ENABLED_PREF
)
;
this
.
toggleTesting
=
Services
.
prefs
.
getBoolPref
(
TOGGLE_TESTING_PREF
false
)
;
this
.
observerFunction
=
(
subject
topic
data
)
=
>
{
this
.
observe
(
subject
topic
data
)
;
}
;
Services
.
prefs
.
addObserver
(
TOGGLE_ENABLED_PREF
this
.
observerFunction
)
;
}
willDestroy
(
)
{
this
.
stopTrackingMouseOverVideos
(
)
;
Services
.
prefs
.
removeObserver
(
TOGGLE_ENABLED_PREF
this
.
observerFunction
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
nsPref
:
changed
"
&
&
data
=
=
TOGGLE_ENABLED_PREF
)
{
this
.
toggleEnabled
=
Services
.
prefs
.
getBoolPref
(
TOGGLE_ENABLED_PREF
)
;
if
(
this
.
toggleEnabled
)
{
this
.
contentWindow
.
requestIdleCallback
(
(
)
=
>
{
let
videos
=
this
.
document
.
querySelectorAll
(
"
video
"
)
;
for
(
let
video
of
videos
)
{
this
.
registerVideo
(
video
)
;
}
}
)
;
}
}
}
get
docState
(
)
{
let
state
=
this
.
weakDocStates
.
get
(
this
.
document
)
;
if
(
!
state
)
{
state
=
{
intersectionObserver
:
null
weakVisibleVideos
:
new
WeakSet
(
)
visibleVideosCount
:
0
mousemoveDeferredTask
:
null
weakOverVideo
:
null
isClickingToggle
:
false
clickedElement
:
null
hideToggleDeferredTask
:
null
isTrackingVideos
:
false
togglePolicy
:
TOGGLE_POLICIES
.
DEFAULT
hasCheckedPolicy
:
false
}
;
this
.
weakDocStates
.
set
(
this
.
document
state
)
;
}
return
state
;
}
getWeakOverVideo
(
)
{
let
{
weakOverVideo
}
=
this
.
docState
;
if
(
weakOverVideo
)
{
try
{
return
weakOverVideo
.
get
(
)
;
}
catch
(
e
)
{
return
null
;
}
}
return
null
;
}
handleEvent
(
event
)
{
if
(
!
event
.
isTrusted
)
{
return
;
}
switch
(
event
.
type
)
{
case
"
UAWidgetSetupOrChange
"
:
{
if
(
this
.
toggleEnabled
&
&
event
.
target
instanceof
this
.
contentWindow
.
HTMLVideoElement
&
&
event
.
target
.
ownerDocument
=
=
this
.
document
)
{
this
.
registerVideo
(
event
.
target
)
;
}
break
;
}
case
"
contextmenu
"
:
{
if
(
this
.
toggleEnabled
)
{
this
.
checkContextMenu
(
event
)
;
}
break
;
}
case
"
mouseout
"
:
{
this
.
onMouseOut
(
event
)
;
break
;
}
case
"
mousedown
"
:
case
"
pointerup
"
:
case
"
mouseup
"
:
case
"
click
"
:
{
this
.
onMouseButtonEvent
(
event
)
;
break
;
}
case
"
pointerdown
"
:
{
this
.
onPointerDown
(
event
)
;
break
;
}
case
"
mousemove
"
:
{
this
.
onMouseMove
(
event
)
;
break
;
}
case
"
pageshow
"
:
{
this
.
onPageShow
(
event
)
;
break
;
}
case
"
pagehide
"
:
{
this
.
onPageHide
(
event
)
;
break
;
}
}
}
registerVideo
(
video
)
{
let
state
=
this
.
docState
;
if
(
!
state
.
intersectionObserver
)
{
let
fn
=
this
.
onIntersection
.
bind
(
this
)
;
state
.
intersectionObserver
=
new
this
.
contentWindow
.
IntersectionObserver
(
fn
{
threshold
:
[
0
.
0
0
.
5
]
}
)
;
}
state
.
intersectionObserver
.
observe
(
video
)
;
}
worthTracking
(
intersectionEntry
)
{
return
intersectionEntry
.
isIntersecting
;
}
onIntersection
(
entries
)
{
let
state
=
this
.
docState
;
let
oldVisibleVideosCount
=
state
.
visibleVideosCount
;
for
(
let
entry
of
entries
)
{
let
video
=
entry
.
target
;
if
(
this
.
worthTracking
(
entry
)
)
{
if
(
!
state
.
weakVisibleVideos
.
has
(
video
)
)
{
state
.
weakVisibleVideos
.
add
(
video
)
;
state
.
visibleVideosCount
+
+
;
if
(
this
.
toggleTesting
)
{
gWeakIntersectingVideosForTesting
.
add
(
video
)
;
}
}
}
else
if
(
state
.
weakVisibleVideos
.
has
(
video
)
)
{
state
.
weakVisibleVideos
.
delete
(
video
)
;
state
.
visibleVideosCount
-
-
;
if
(
this
.
toggleTesting
)
{
gWeakIntersectingVideosForTesting
.
delete
(
video
)
;
}
}
}
if
(
!
oldVisibleVideosCount
&
&
state
.
visibleVideosCount
)
{
if
(
this
.
toggleTesting
)
{
this
.
beginTrackingMouseOverVideos
(
)
;
}
else
{
this
.
contentWindow
.
requestIdleCallback
(
(
)
=
>
{
this
.
beginTrackingMouseOverVideos
(
)
;
}
)
;
}
}
else
if
(
oldVisibleVideosCount
&
&
!
state
.
visibleVideosCount
)
{
if
(
this
.
toggleTesting
)
{
this
.
stopTrackingMouseOverVideos
(
)
;
}
else
{
this
.
contentWindow
.
requestIdleCallback
(
(
)
=
>
{
this
.
stopTrackingMouseOverVideos
(
)
;
}
)
;
}
}
}
addMouseButtonListeners
(
)
{
this
.
contentWindow
.
windowRoot
.
addEventListener
(
"
pointerdown
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
addEventListener
(
"
mousedown
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
addEventListener
(
"
mouseup
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
addEventListener
(
"
pointerup
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
addEventListener
(
"
click
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
addEventListener
(
"
mouseout
"
this
{
capture
:
true
}
)
;
}
removeMouseButtonListeners
(
)
{
this
.
contentWindow
.
windowRoot
.
removeEventListener
(
"
pointerdown
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
removeEventListener
(
"
mousedown
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
removeEventListener
(
"
mouseup
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
removeEventListener
(
"
pointerup
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
removeEventListener
(
"
click
"
this
{
capture
:
true
}
)
;
this
.
contentWindow
.
windowRoot
.
removeEventListener
(
"
mouseout
"
this
{
capture
:
true
}
)
;
}
beginTrackingMouseOverVideos
(
)
{
let
state
=
this
.
docState
;
if
(
!
state
.
mousemoveDeferredTask
)
{
state
.
mousemoveDeferredTask
=
new
DeferredTask
(
(
)
=
>
{
this
.
checkLastMouseMove
(
)
;
}
MOUSEMOVE_PROCESSING_DELAY_MS
)
;
}
this
.
document
.
addEventListener
(
"
mousemove
"
this
{
mozSystemGroup
:
true
capture
:
true
}
)
;
this
.
contentWindow
.
addEventListener
(
"
pageshow
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
contentWindow
.
addEventListener
(
"
pagehide
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
addMouseButtonListeners
(
)
;
state
.
isTrackingVideos
=
true
;
}
stopTrackingMouseOverVideos
(
)
{
let
state
=
this
.
docState
;
if
(
!
state
.
mousemoveDeferredTask
)
{
return
;
}
state
.
mousemoveDeferredTask
.
disarm
(
)
;
this
.
document
.
removeEventListener
(
"
mousemove
"
this
{
mozSystemGroup
:
true
capture
:
true
}
)
;
this
.
contentWindow
.
removeEventListener
(
"
pageshow
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
contentWindow
.
removeEventListener
(
"
pagehide
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
removeMouseButtonListeners
(
)
;
let
oldOverVideo
=
this
.
getWeakOverVideo
(
)
;
if
(
oldOverVideo
)
{
this
.
onMouseLeaveVideo
(
oldOverVideo
)
;
}
state
.
isTrackingVideos
=
false
;
}
onPageShow
(
event
)
{
let
state
=
this
.
docState
;
if
(
state
.
isTrackingVideos
)
{
this
.
addMouseButtonListeners
(
)
;
}
}
onPageHide
(
event
)
{
let
state
=
this
.
docState
;
if
(
state
.
isTrackingVideos
)
{
this
.
removeMouseButtonListeners
(
)
;
}
}
onPointerDown
(
event
)
{
if
(
event
.
button
!
=
0
)
{
return
;
}
let
video
=
this
.
getWeakOverVideo
(
)
;
if
(
!
video
)
{
return
;
}
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
if
(
!
shadowRoot
)
{
return
;
}
let
{
clientX
clientY
}
=
event
;
let
winUtils
=
this
.
contentWindow
.
windowUtils
;
let
elements
=
winUtils
.
nodesFromRect
(
clientX
clientY
1
1
1
1
true
false
true
)
;
if
(
!
Array
.
from
(
elements
)
.
includes
(
video
)
)
{
return
;
}
let
toggle
=
shadowRoot
.
getElementById
(
"
pictureInPictureToggleButton
"
)
;
if
(
this
.
isMouseOverToggle
(
toggle
event
)
)
{
let
state
=
this
.
docState
;
state
.
isClickingToggle
=
true
;
state
.
clickedElement
=
Cu
.
getWeakReference
(
event
.
originalTarget
)
;
event
.
stopImmediatePropagation
(
)
;
Services
.
telemetry
.
keyedScalarAdd
(
"
pictureinpicture
.
opened_method
"
"
toggle
"
1
)
;
let
pipEvent
=
new
this
.
contentWindow
.
CustomEvent
(
"
MozTogglePictureInPicture
"
{
bubbles
:
true
}
)
;
video
.
dispatchEvent
(
pipEvent
)
;
this
.
onMouseLeaveVideo
(
video
)
;
}
}
onMouseButtonEvent
(
event
)
{
if
(
event
.
button
!
=
0
)
{
return
;
}
let
state
=
this
.
docState
;
if
(
state
.
isClickingToggle
)
{
event
.
stopImmediatePropagation
(
)
;
let
isMouseUpOnOtherElement
=
event
.
type
=
=
"
mouseup
"
&
&
(
!
state
.
clickedElement
|
|
state
.
clickedElement
.
get
(
)
!
=
event
.
originalTarget
)
;
if
(
isMouseUpOnOtherElement
|
|
event
.
type
=
=
"
click
"
)
{
state
.
isClickingToggle
=
false
;
state
.
clickedElement
=
null
;
}
}
}
onMouseOut
(
event
)
{
if
(
!
event
.
relatedTarget
)
{
let
video
=
this
.
getWeakOverVideo
(
)
;
if
(
!
video
)
{
return
;
}
this
.
onMouseLeaveVideo
(
video
)
;
}
}
onMouseMove
(
event
)
{
let
state
=
this
.
docState
;
if
(
state
.
hideToggleDeferredTask
)
{
state
.
hideToggleDeferredTask
.
disarm
(
)
;
state
.
hideToggleDeferredTask
.
arm
(
)
;
}
state
.
lastMouseMoveEvent
=
event
;
state
.
mousemoveDeferredTask
.
arm
(
)
;
}
checkLastMouseMove
(
)
{
let
state
=
this
.
docState
;
let
event
=
state
.
lastMouseMoveEvent
;
let
{
clientX
clientY
}
=
event
;
let
winUtils
=
this
.
contentWindow
.
windowUtils
;
let
elements
=
winUtils
.
nodesFromRect
(
clientX
clientY
1
1
1
1
true
false
true
)
;
for
(
let
element
of
elements
)
{
if
(
state
.
weakVisibleVideos
.
has
(
element
)
&
&
!
element
.
isCloningElementVisually
)
{
this
.
onMouseOverVideo
(
element
event
)
;
return
;
}
}
let
oldOverVideo
=
this
.
getWeakOverVideo
(
)
;
if
(
oldOverVideo
)
{
this
.
onMouseLeaveVideo
(
oldOverVideo
)
;
}
}
onMouseOverVideo
(
video
event
)
{
let
oldOverVideo
=
this
.
getWeakOverVideo
(
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
if
(
!
shadowRoot
)
{
if
(
oldOverVideo
)
{
this
.
onMouseLeaveVideo
(
oldOverVideo
)
;
}
return
;
}
let
state
=
this
.
docState
;
let
toggle
=
shadowRoot
.
getElementById
(
"
pictureInPictureToggleButton
"
)
;
let
controlsOverlay
=
shadowRoot
.
querySelector
(
"
.
controlsOverlay
"
)
;
if
(
!
state
.
hasCheckedPolicy
)
{
let
toggleOverrides
=
this
.
toggleTesting
?
PictureInPictureToggleChild
.
getToggleOverrides
(
)
:
gToggleOverrides
;
for
(
let
[
override
policy
]
of
toggleOverrides
)
{
if
(
override
.
matches
(
this
.
document
.
documentURI
)
)
{
state
.
togglePolicy
=
policy
;
break
;
}
}
state
.
hasCheckedPolicy
=
true
;
}
if
(
state
.
togglePolicy
!
=
TOGGLE_POLICIES
.
DEFAULT
&
&
!
(
state
.
togglePolicy
=
=
TOGGLE_POLICIES
.
BOTTOM
&
&
video
.
controls
)
)
{
toggle
.
setAttribute
(
"
policy
"
TOGGLE_POLICY_STRINGS
[
state
.
togglePolicy
]
)
;
}
controlsOverlay
.
removeAttribute
(
"
hidetoggle
"
)
;
if
(
!
state
.
hideToggleDeferredTask
&
&
!
this
.
toggleTesting
)
{
state
.
hideToggleDeferredTask
=
new
DeferredTask
(
(
)
=
>
{
controlsOverlay
.
setAttribute
(
"
hidetoggle
"
true
)
;
}
TOGGLE_HIDING_TIMEOUT_MS
)
;
}
if
(
oldOverVideo
)
{
if
(
oldOverVideo
=
=
video
)
{
this
.
checkHoverToggle
(
toggle
event
)
;
return
;
}
this
.
onMouseLeaveVideo
(
oldOverVideo
)
;
}
state
.
weakOverVideo
=
Cu
.
getWeakReference
(
video
)
;
controlsOverlay
.
classList
.
add
(
"
hovering
"
)
;
this
.
checkHoverToggle
(
toggle
event
)
;
}
checkHoverToggle
(
toggle
event
)
{
toggle
.
classList
.
toggle
(
"
hovering
"
this
.
isMouseOverToggle
(
toggle
event
)
)
;
}
onMouseLeaveVideo
(
video
)
{
let
state
=
this
.
docState
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
if
(
shadowRoot
)
{
let
controlsOverlay
=
shadowRoot
.
querySelector
(
"
.
controlsOverlay
"
)
;
let
toggle
=
shadowRoot
.
getElementById
(
"
pictureInPictureToggleButton
"
)
;
controlsOverlay
.
classList
.
remove
(
"
hovering
"
)
;
toggle
.
classList
.
remove
(
"
hovering
"
)
;
}
state
.
weakOverVideo
=
null
;
if
(
!
this
.
toggleTesting
)
{
state
.
hideToggleDeferredTask
.
disarm
(
)
;
state
.
mousemoveDeferredTask
.
disarm
(
)
;
}
state
.
hideToggleDeferredTask
=
null
;
}
isMouseOverToggle
(
toggle
event
)
{
let
toggleRect
=
toggle
.
ownerGlobal
.
windowUtils
.
getBoundsWithoutFlushing
(
toggle
)
;
if
(
!
toggleRect
.
width
|
|
!
toggleRect
.
height
)
{
return
false
;
}
let
{
clientX
clientY
}
=
event
;
return
(
clientX
>
=
toggleRect
.
left
&
&
clientX
<
=
toggleRect
.
right
&
&
clientY
>
=
toggleRect
.
top
&
&
clientY
<
=
toggleRect
.
bottom
)
;
}
checkContextMenu
(
event
)
{
let
video
=
this
.
getWeakOverVideo
(
)
;
if
(
!
video
)
{
return
;
}
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
if
(
!
shadowRoot
)
{
return
;
}
let
toggle
=
shadowRoot
.
getElementById
(
"
pictureInPictureToggleButton
"
)
;
if
(
this
.
isMouseOverToggle
(
toggle
event
)
)
{
event
.
stopImmediatePropagation
(
)
;
event
.
preventDefault
(
)
;
this
.
sendAsyncMessage
(
"
PictureInPicture
:
OpenToggleContextMenu
"
{
screenX
:
event
.
screenX
screenY
:
event
.
screenY
mozInputSource
:
event
.
mozInputSource
}
)
;
}
}
static
isTracking
(
video
)
{
return
gWeakIntersectingVideosForTesting
.
has
(
video
)
;
}
static
getToggleOverrides
(
)
{
let
result
=
[
]
;
let
patterns
=
Services
.
cpmm
.
sharedData
.
get
(
"
PictureInPicture
:
ToggleOverrides
"
)
;
for
(
let
pattern
in
patterns
)
{
let
matcher
=
new
MatchPattern
(
pattern
)
;
result
.
push
(
[
matcher
patterns
[
pattern
]
]
)
;
}
return
result
;
}
}
class
PictureInPictureChild
extends
JSWindowActorChild
{
static
videoIsPlaying
(
video
)
{
return
!
!
(
video
.
currentTime
>
0
&
&
!
video
.
paused
&
&
!
video
.
ended
&
&
video
.
readyState
>
2
)
;
}
static
videoIsMuted
(
video
)
{
return
video
.
muted
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
MozTogglePictureInPicture
"
:
{
if
(
event
.
isTrusted
)
{
this
.
togglePictureInPicture
(
event
.
target
)
;
}
break
;
}
case
"
MozStopPictureInPicture
"
:
{
if
(
event
.
isTrusted
&
&
event
.
target
=
=
=
this
.
getWeakVideo
(
)
)
{
this
.
closePictureInPicture
(
{
reason
:
"
video
-
el
-
remove
"
}
)
;
}
break
;
}
case
"
pagehide
"
:
{
this
.
closePictureInPicture
(
{
reason
:
"
pagehide
"
}
)
;
break
;
}
case
"
play
"
:
{
this
.
sendAsyncMessage
(
"
PictureInPicture
:
Playing
"
)
;
break
;
}
case
"
pause
"
:
{
this
.
sendAsyncMessage
(
"
PictureInPicture
:
Paused
"
)
;
break
;
}
case
"
volumechange
"
:
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
video
!
=
=
event
.
target
)
{
Cu
.
reportError
(
"
PictureInPictureChild
received
volumechange
for
"
+
"
the
wrong
video
!
"
)
;
return
;
}
if
(
video
.
muted
)
{
this
.
sendAsyncMessage
(
"
PictureInPicture
:
Muting
"
)
;
}
else
{
this
.
sendAsyncMessage
(
"
PictureInPicture
:
Unmuting
"
)
;
}
break
;
}
case
"
resize
"
:
{
let
video
=
event
.
target
;
if
(
this
.
inPictureInPicture
(
video
)
)
{
this
.
sendAsyncMessage
(
"
PictureInPicture
:
Resize
"
{
videoHeight
:
video
.
videoHeight
videoWidth
:
video
.
videoWidth
}
)
;
}
break
;
}
}
}
getWeakVideo
(
)
{
if
(
gWeakVideo
)
{
try
{
return
gWeakVideo
.
get
(
)
;
}
catch
(
e
)
{
return
null
;
}
}
return
null
;
}
getWeakPlayerContent
(
)
{
if
(
gWeakPlayerContent
)
{
try
{
return
gWeakPlayerContent
.
get
(
)
;
}
catch
(
e
)
{
return
null
;
}
}
return
null
;
}
async
togglePictureInPicture
(
video
)
{
if
(
video
.
srcObject
)
{
return
;
}
if
(
this
.
inPictureInPicture
(
video
)
)
{
await
this
.
closePictureInPicture
(
{
reason
:
"
contextmenu
"
}
)
;
}
else
{
if
(
this
.
getWeakVideo
(
)
)
{
await
this
.
closePictureInPicture
(
{
reason
:
"
new
-
pip
"
}
)
;
}
gWeakVideo
=
Cu
.
getWeakReference
(
video
)
;
this
.
sendAsyncMessage
(
"
PictureInPicture
:
Request
"
{
isMuted
:
PictureInPictureChild
.
videoIsMuted
(
video
)
playing
:
PictureInPictureChild
.
videoIsPlaying
(
video
)
videoHeight
:
video
.
videoHeight
videoWidth
:
video
.
videoWidth
}
)
;
}
}
inPictureInPicture
(
video
)
{
return
this
.
getWeakVideo
(
)
=
=
=
video
;
}
async
closePictureInPicture
(
{
reason
}
)
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
video
)
{
this
.
untrackOriginatingVideo
(
video
)
;
}
this
.
sendAsyncMessage
(
"
PictureInPicture
:
Close
"
{
reason
}
)
;
let
playerContent
=
this
.
getWeakPlayerContent
(
)
;
if
(
playerContent
)
{
if
(
!
playerContent
.
closed
)
{
await
new
Promise
(
resolve
=
>
{
playerContent
.
addEventListener
(
"
unload
"
resolve
{
once
:
true
}
)
;
}
)
;
}
gWeakPlayerContent
=
null
;
}
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
PictureInPicture
:
SetupPlayer
"
:
{
this
.
setupPlayer
(
)
;
break
;
}
case
"
PictureInPicture
:
Play
"
:
{
this
.
play
(
)
;
break
;
}
case
"
PictureInPicture
:
Pause
"
:
{
this
.
pause
(
)
;
break
;
}
case
"
PictureInPicture
:
Mute
"
:
{
this
.
mute
(
)
;
break
;
}
case
"
PictureInPicture
:
Unmute
"
:
{
this
.
unmute
(
)
;
break
;
}
case
"
PictureInPicture
:
KeyDown
"
:
{
this
.
keyDown
(
message
.
data
)
;
break
;
}
case
"
PictureInPicture
:
KeyToggle
"
:
{
this
.
keyToggle
(
)
;
break
;
}
}
}
trackOriginatingVideo
(
originatingVideo
)
{
let
originatingWindow
=
originatingVideo
.
ownerGlobal
;
if
(
originatingWindow
)
{
originatingWindow
.
addEventListener
(
"
pagehide
"
this
)
;
originatingVideo
.
addEventListener
(
"
play
"
this
)
;
originatingVideo
.
addEventListener
(
"
pause
"
this
)
;
originatingVideo
.
addEventListener
(
"
volumechange
"
this
)
;
originatingVideo
.
addEventListener
(
"
resize
"
this
)
;
}
}
untrackOriginatingVideo
(
originatingVideo
)
{
let
originatingWindow
=
originatingVideo
.
ownerGlobal
;
if
(
originatingWindow
)
{
originatingWindow
.
removeEventListener
(
"
pagehide
"
this
)
;
originatingVideo
.
removeEventListener
(
"
play
"
this
)
;
originatingVideo
.
removeEventListener
(
"
pause
"
this
)
;
originatingVideo
.
removeEventListener
(
"
volumechange
"
this
)
;
originatingVideo
.
removeEventListener
(
"
resize
"
this
)
;
}
}
async
setupPlayer
(
)
{
let
originatingVideo
=
this
.
getWeakVideo
(
)
;
if
(
!
originatingVideo
)
{
await
this
.
closePictureInPicture
(
{
reason
:
"
setup
-
failure
"
}
)
;
return
;
}
this
.
contentWindow
.
location
.
reload
(
)
;
let
webProgress
=
this
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
if
(
webProgress
.
isLoadingDocument
)
{
await
new
Promise
(
resolve
=
>
{
this
.
contentWindow
.
addEventListener
(
"
load
"
resolve
{
once
:
true
mozSystemGroup
:
true
capture
:
true
}
)
;
}
)
;
}
let
doc
=
this
.
document
;
let
playerVideo
=
doc
.
createElement
(
"
video
"
)
;
doc
.
body
.
style
.
overflow
=
"
hidden
"
;
doc
.
body
.
style
.
margin
=
"
0
"
;
playerVideo
.
style
.
height
=
"
100vh
"
;
playerVideo
.
style
.
width
=
"
100vw
"
;
playerVideo
.
style
.
backgroundImage
=
'
url
(
"
chrome
:
/
/
global
/
skin
/
media
/
imagedoc
-
darknoise
.
png
"
)
'
;
doc
.
body
.
appendChild
(
playerVideo
)
;
originatingVideo
.
cloneElementVisually
(
playerVideo
)
;
this
.
trackOriginatingVideo
(
originatingVideo
)
;
this
.
contentWindow
.
addEventListener
(
"
unload
"
(
)
=
>
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
video
)
{
this
.
untrackOriginatingVideo
(
video
)
;
video
.
stopCloningElementVisually
(
)
;
}
gWeakVideo
=
null
;
}
{
once
:
true
}
)
;
gWeakPlayerContent
=
Cu
.
getWeakReference
(
this
.
contentWindow
)
;
}
play
(
)
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
video
)
{
video
.
play
(
)
;
}
}
pause
(
)
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
video
)
{
video
.
pause
(
)
;
}
}
mute
(
)
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
video
)
{
video
.
muted
=
true
;
}
}
unmute
(
)
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
video
)
{
video
.
muted
=
false
;
}
}
keyDown
(
{
altKey
shiftKey
metaKey
ctrlKey
keyCode
}
)
{
let
video
=
this
.
getWeakVideo
(
)
;
if
(
!
video
)
{
return
;
}
var
keystroke
=
"
"
;
if
(
altKey
)
{
keystroke
+
=
"
alt
-
"
;
}
if
(
shiftKey
)
{
keystroke
+
=
"
shift
-
"
;
}
if
(
this
.
contentWindow
.
navigator
.
platform
.
startsWith
(
"
Mac
"
)
)
{
if
(
metaKey
)
{
keystroke
+
=
"
accel
-
"
;
}
if
(
ctrlKey
)
{
keystroke
+
=
"
control
-
"
;
}
}
else
{
if
(
metaKey
)
{
keystroke
+
=
"
meta
-
"
;
}
if
(
ctrlKey
)
{
keystroke
+
=
"
accel
-
"
;
}
}
switch
(
keyCode
)
{
case
this
.
contentWindow
.
KeyEvent
.
DOM_VK_UP
:
keystroke
+
=
"
upArrow
"
;
break
;
case
this
.
contentWindow
.
KeyEvent
.
DOM_VK_DOWN
:
keystroke
+
=
"
downArrow
"
;
break
;
case
this
.
contentWindow
.
KeyEvent
.
DOM_VK_LEFT
:
keystroke
+
=
"
leftArrow
"
;
break
;
case
this
.
contentWindow
.
KeyEvent
.
DOM_VK_RIGHT
:
keystroke
+
=
"
rightArrow
"
;
break
;
case
this
.
contentWindow
.
KeyEvent
.
DOM_VK_HOME
:
keystroke
+
=
"
home
"
;
break
;
case
this
.
contentWindow
.
KeyEvent
.
DOM_VK_END
:
keystroke
+
=
"
end
"
;
break
;
case
this
.
contentWindow
.
KeyEvent
.
DOM_VK_SPACE
:
keystroke
+
=
"
space
"
;
break
;
}
const
isVideoStreaming
=
video
.
duration
=
=
+
Infinity
;
var
oldval
newval
;
try
{
switch
(
keystroke
)
{
case
"
space
"
:
if
(
video
.
paused
|
|
video
.
ended
)
{
video
.
play
(
)
;
}
else
{
video
.
pause
(
)
;
}
break
;
case
"
downArrow
"
:
oldval
=
video
.
volume
;
video
.
volume
=
oldval
<
0
.
1
?
0
:
oldval
-
0
.
1
;
video
.
muted
=
false
;
break
;
case
"
upArrow
"
:
oldval
=
video
.
volume
;
video
.
volume
=
oldval
>
0
.
9
?
1
:
oldval
+
0
.
1
;
video
.
muted
=
false
;
break
;
case
"
accel
-
downArrow
"
:
video
.
muted
=
true
;
break
;
case
"
accel
-
upArrow
"
:
video
.
muted
=
false
;
break
;
case
"
leftArrow
"
:
case
"
accel
-
leftArrow
"
:
if
(
isVideoStreaming
)
{
return
;
}
oldval
=
video
.
currentTime
;
if
(
keystroke
=
=
"
leftArrow
"
)
{
newval
=
oldval
-
15
;
}
else
{
newval
=
oldval
-
video
.
duration
/
10
;
}
video
.
currentTime
=
newval
>
=
0
?
newval
:
0
;
break
;
case
"
rightArrow
"
:
case
"
accel
-
rightArrow
"
:
if
(
isVideoStreaming
)
{
return
;
}
oldval
=
video
.
currentTime
;
var
maxtime
=
video
.
duration
;
if
(
keystroke
=
=
"
rightArrow
"
)
{
newval
=
oldval
+
15
;
}
else
{
newval
=
oldval
+
maxtime
/
10
;
}
video
.
currentTime
=
newval
<
=
maxtime
?
newval
:
maxtime
;
break
;
case
"
home
"
:
if
(
!
isVideoStreaming
)
{
video
.
currentTime
=
0
;
}
break
;
case
"
end
"
:
if
(
!
isVideoStreaming
&
&
video
.
currentTime
!
=
video
.
duration
)
{
video
.
currentTime
=
video
.
duration
;
}
break
;
default
:
}
}
catch
(
e
)
{
}
}
keyToggle
(
)
{
let
focusedWindow
=
Services
.
focus
.
focusedWindow
;
if
(
focusedWindow
)
{
let
doc
=
focusedWindow
.
document
;
if
(
doc
)
{
let
listOfVideos
=
doc
.
querySelectorAll
(
"
video
"
)
;
let
video
=
Array
.
from
(
listOfVideos
)
.
filter
(
v
=
>
!
v
.
paused
)
[
0
]
|
|
listOfVideos
[
0
]
;
if
(
video
)
{
this
.
togglePictureInPicture
(
video
)
;
}
}
}
}
}
