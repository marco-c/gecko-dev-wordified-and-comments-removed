"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PictureInPictureChild
"
"
PictureInPictureToggleChild
"
]
;
const
{
ActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorChild
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DeferredTask
"
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DOMLocalization
"
"
resource
:
/
/
gre
/
modules
/
DOMLocalization
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
TOGGLE_STYLESHEET
=
"
chrome
:
/
/
global
/
skin
/
pictureinpicture
/
toggle
.
css
"
;
const
TOGGLE_ID
=
"
picture
-
in
-
picture
-
toggle
"
;
const
FLYOUT_TOGGLE_ID
=
"
picture
-
in
-
picture
-
flyout
-
toggle
"
;
const
FLYOUT_TOGGLE_CONTAINER
=
"
picture
-
in
-
picture
-
flyout
-
container
"
;
const
TOGGLE_ENABLED_PREF
=
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
enabled
"
;
const
FLYOUT_ENABLED_PREF
=
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
flyout
-
enabled
"
;
const
FLYOUT_WAIT_MS_PREF
=
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
flyout
-
wait
-
ms
"
;
const
FLYOUT_ANIMATION_RUNTIME_MS
=
400
;
const
MOUSEMOVE_PROCESSING_DELAY_MS
=
50
;
var
gWeakVideo
=
null
;
var
gWeakPlayerContent
=
null
;
var
gFlyoutLabelPromise
=
null
;
var
gToggleWidth
=
0
;
class
PictureInPictureToggleChild
extends
ActorChild
{
constructor
(
dispatcher
)
{
super
(
dispatcher
)
;
this
.
weakDocStates
=
new
WeakMap
(
)
;
this
.
toggleEnabled
=
Services
.
prefs
.
getBoolPref
(
TOGGLE_ENABLED_PREF
)
;
this
.
flyoutEnabled
=
Services
.
prefs
.
getBoolPref
(
FLYOUT_ENABLED_PREF
)
;
this
.
flyoutWaitMs
=
Services
.
prefs
.
getIntPref
(
FLYOUT_WAIT_MS_PREF
)
;
this
.
l10n
=
new
DOMLocalization
(
[
"
toolkit
/
global
/
videocontrols
.
ftl
"
]
)
;
}
get
docState
(
)
{
let
state
=
this
.
weakDocStates
.
get
(
this
.
content
.
document
)
;
if
(
!
state
)
{
state
=
{
intersectionObserver
:
null
weakVisibleVideos
:
new
WeakSet
(
)
visibleVideos
:
0
mousemoveDeferredTask
:
null
weakOverVideo
:
null
pipToggle
:
null
flyoutToggle
:
null
}
;
this
.
weakDocStates
.
set
(
this
.
content
.
document
state
)
;
}
return
state
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
canplay
"
:
{
if
(
this
.
toggleEnabled
&
&
event
.
target
instanceof
this
.
content
.
HTMLVideoElement
&
&
event
.
target
.
ownerDocument
=
=
this
.
content
.
document
)
{
this
.
registerVideo
(
event
.
target
)
;
}
break
;
}
case
"
click
"
:
{
let
state
=
this
.
docState
;
let
clickedFlyout
=
state
.
flyoutToggle
&
&
state
.
flyoutToggle
.
getTargetIdForEvent
(
event
)
=
=
FLYOUT_TOGGLE_ID
;
let
clickedToggle
=
state
.
pipToggle
&
&
state
.
pipToggle
.
getTargetIdForEvent
(
event
)
=
=
TOGGLE_ID
;
if
(
clickedFlyout
|
|
clickedToggle
)
{
let
video
=
state
.
weakOverVideo
&
&
state
.
weakOverVideo
.
get
(
)
;
if
(
video
)
{
let
pipEvent
=
new
this
.
content
.
CustomEvent
(
"
MozTogglePictureInPicture
"
{
bubbles
:
true
}
)
;
video
.
dispatchEvent
(
pipEvent
)
;
this
.
hideFlyout
(
)
;
this
.
onMouseLeaveVideo
(
video
)
;
}
}
break
;
}
case
"
mousemove
"
:
{
this
.
onMouseMove
(
event
)
;
break
;
}
}
}
registerVideo
(
video
)
{
let
state
=
this
.
docState
;
if
(
!
state
.
intersectionObserver
)
{
let
fn
=
this
.
onIntersection
.
bind
(
this
)
;
state
.
intersectionObserver
=
new
this
.
content
.
IntersectionObserver
(
fn
{
threshold
:
[
0
.
0
1
.
0
]
}
)
;
}
state
.
intersectionObserver
.
observe
(
video
)
;
}
worthTracking
(
intersectionEntry
)
{
let
video
=
intersectionEntry
.
target
;
let
rect
=
video
.
ownerGlobal
.
windowUtils
.
getBoundsWithoutFlushing
(
video
)
;
let
intRect
=
intersectionEntry
.
intersectionRect
;
return
intersectionEntry
.
isIntersecting
&
&
rect
.
width
=
=
intRect
.
width
&
&
rect
.
height
=
=
intRect
.
height
;
}
onIntersection
(
entries
)
{
let
state
=
this
.
docState
;
let
oldVisibleVideos
=
state
.
visibleVideos
;
for
(
let
entry
of
entries
)
{
let
video
=
entry
.
target
;
if
(
this
.
worthTracking
(
entry
)
)
{
if
(
!
state
.
weakVisibleVideos
.
has
(
video
)
)
{
state
.
weakVisibleVideos
.
add
(
video
)
;
state
.
visibleVideos
+
+
;
if
(
this
.
flyoutEnabled
)
{
this
.
content
.
requestIdleCallback
(
(
)
=
>
{
this
.
maybeShowFlyout
(
video
)
;
}
)
;
}
}
}
else
if
(
state
.
weakVisibleVideos
.
has
(
video
)
)
{
state
.
weakVisibleVideos
.
delete
(
video
)
;
state
.
visibleVideos
-
-
;
}
}
if
(
!
oldVisibleVideos
&
&
state
.
visibleVideos
)
{
this
.
content
.
requestIdleCallback
(
(
)
=
>
{
this
.
beginTrackingMouseOverVideos
(
)
;
}
)
;
}
else
if
(
oldVisibleVideos
&
&
!
state
.
visibleVideos
)
{
this
.
content
.
requestIdleCallback
(
(
)
=
>
{
this
.
stopTrackingMouseOverVideos
(
)
;
}
)
;
}
}
beginTrackingMouseOverVideos
(
)
{
let
state
=
this
.
docState
;
if
(
!
state
.
mousemoveDeferredTask
)
{
state
.
mousemoveDeferredTask
=
new
DeferredTask
(
(
)
=
>
{
this
.
checkLastMouseMove
(
)
;
}
MOUSEMOVE_PROCESSING_DELAY_MS
)
;
}
this
.
content
.
document
.
addEventListener
(
"
mousemove
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
content
.
document
.
addEventListener
(
"
click
"
this
{
mozSystemGroup
:
true
}
)
;
}
stopTrackingMouseOverVideos
(
)
{
let
state
=
this
.
docState
;
state
.
mousemoveDeferredTask
.
disarm
(
)
;
this
.
content
.
document
.
removeEventListener
(
"
mousemove
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
content
.
document
.
removeEventListener
(
"
click
"
this
{
mozSystemGroup
:
true
}
)
;
let
oldOverVideo
=
state
.
weakOverVideo
&
&
state
.
weakOverVideo
.
get
(
)
;
if
(
oldOverVideo
)
{
this
.
onMouseLeaveVideo
(
oldOverVideo
)
;
}
}
onMouseMove
(
event
)
{
let
state
=
this
.
docState
;
state
.
lastMouseMoveEvent
=
event
;
state
.
mousemoveDeferredTask
.
arm
(
)
;
}
checkLastMouseMove
(
)
{
let
state
=
this
.
docState
;
let
event
=
state
.
lastMouseMoveEvent
;
let
{
clientX
clientY
}
=
event
;
let
winUtils
=
this
.
content
.
windowUtils
;
let
elements
=
winUtils
.
nodesFromRect
(
clientX
clientY
1
1
1
1
true
false
)
;
for
(
let
element
of
elements
)
{
if
(
state
.
weakVisibleVideos
.
has
(
element
)
&
&
!
element
.
isCloningElementVisually
)
{
this
.
onMouseOverVideo
(
element
)
;
return
;
}
}
let
oldOverVideo
=
state
.
weakOverVideo
&
&
state
.
weakOverVideo
.
get
(
)
;
if
(
oldOverVideo
)
{
this
.
onMouseLeaveVideo
(
oldOverVideo
)
;
}
}
onMouseOverVideo
(
video
)
{
let
state
=
this
.
docState
;
let
oldOverVideo
=
state
.
weakOverVideo
&
&
state
.
weakOverVideo
.
get
(
)
;
if
(
oldOverVideo
&
&
oldOverVideo
=
=
video
)
{
return
;
}
state
.
weakOverVideo
=
Cu
.
getWeakReference
(
video
)
;
this
.
moveToggleToVideo
(
video
)
;
}
onMouseLeaveVideo
(
video
)
{
let
state
=
this
.
docState
;
state
.
weakOverVideo
=
null
;
state
.
pipToggle
.
setAttributeForElement
(
TOGGLE_ID
"
hidden
"
"
true
"
)
;
}
calculateTogglePosition
(
video
anonymousContent
toggleID
)
{
let
winUtils
=
this
.
content
.
windowUtils
;
let
scrollX
=
{
}
scrollY
=
{
}
;
winUtils
.
getScrollXY
(
false
scrollX
scrollY
)
;
let
rect
=
winUtils
.
getBoundsWithoutFlushing
(
video
)
;
if
(
!
gToggleWidth
)
{
let
widthStr
=
anonymousContent
.
getComputedStylePropertyValue
(
toggleID
"
-
-
pip
-
toggle
-
icon
-
width
-
height
"
)
;
let
paddingStr
=
anonymousContent
.
getComputedStylePropertyValue
(
toggleID
"
-
-
pip
-
toggle
-
padding
"
)
;
let
iconWidth
=
parseInt
(
widthStr
0
)
;
let
iconPadding
=
parseInt
(
paddingStr
0
)
;
gToggleWidth
=
iconWidth
+
(
2
*
iconPadding
)
;
}
let
originY
=
rect
.
top
+
scrollY
.
value
;
let
originX
=
rect
.
left
+
scrollX
.
value
;
let
top
=
originY
+
(
rect
.
height
/
2
-
Math
.
round
(
gToggleWidth
/
2
)
)
;
let
left
=
originX
+
(
rect
.
width
-
gToggleWidth
)
;
return
{
top
left
width
:
gToggleWidth
}
;
}
moveToggleToVideo
(
video
)
{
let
state
=
this
.
docState
;
let
winUtils
=
this
.
content
.
windowUtils
;
if
(
!
state
.
pipToggle
)
{
try
{
winUtils
.
loadSheetUsingURIString
(
TOGGLE_STYLESHEET
winUtils
.
AGENT_SHEET
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_INVALID_ARG
)
{
throw
e
;
}
}
let
toggle
=
this
.
content
.
document
.
createElement
(
"
button
"
)
;
toggle
.
classList
.
add
(
"
picture
-
in
-
picture
-
toggle
-
button
"
)
;
toggle
.
id
=
TOGGLE_ID
;
let
icon
=
this
.
content
.
document
.
createElement
(
"
div
"
)
;
icon
.
classList
.
add
(
"
icon
"
)
;
toggle
.
appendChild
(
icon
)
;
state
.
pipToggle
=
this
.
content
.
document
.
insertAnonymousContent
(
toggle
)
;
}
let
{
top
left
}
=
this
.
calculateTogglePosition
(
video
state
.
pipToggle
TOGGLE_ID
)
;
let
styles
=
top
:
{
top
}
px
;
left
:
{
left
}
px
;
;
let
toggle
=
state
.
pipToggle
;
toggle
.
setAttributeForElement
(
TOGGLE_ID
"
style
"
styles
)
;
toggle
.
removeAttributeForElement
(
TOGGLE_ID
"
hidden
"
)
;
}
get
flyoutLabel
(
)
{
if
(
gFlyoutLabelPromise
)
{
return
gFlyoutLabelPromise
;
}
gFlyoutLabelPromise
=
this
.
l10n
.
formatValue
(
"
picture
-
in
-
picture
-
flyout
-
toggle
"
)
;
return
gFlyoutLabelPromise
;
}
async
maybeShowFlyout
(
video
)
{
let
state
=
this
.
docState
;
if
(
state
.
flyoutToggle
)
{
return
;
}
let
winUtils
=
this
.
content
.
windowUtils
;
try
{
winUtils
.
loadSheetUsingURIString
(
TOGGLE_STYLESHEET
winUtils
.
AGENT_SHEET
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_INVALID_ARG
)
{
throw
e
;
}
}
let
container
=
this
.
content
.
document
.
createElement
(
"
div
"
)
;
container
.
id
=
FLYOUT_TOGGLE_CONTAINER
;
let
toggle
=
this
.
content
.
document
.
createElement
(
"
button
"
)
;
toggle
.
classList
.
add
(
"
picture
-
in
-
picture
-
toggle
-
button
"
)
;
toggle
.
id
=
FLYOUT_TOGGLE_ID
;
let
icon
=
this
.
content
.
document
.
createElement
(
"
div
"
)
;
icon
.
classList
.
add
(
"
icon
"
)
;
toggle
.
appendChild
(
icon
)
;
let
label
=
this
.
content
.
document
.
createElement
(
"
span
"
)
;
label
.
classList
.
add
(
"
label
"
)
;
label
.
textContent
=
await
this
.
flyoutLabel
;
toggle
.
appendChild
(
label
)
;
container
.
appendChild
(
toggle
)
;
state
.
flyoutToggle
=
this
.
content
.
document
.
insertAnonymousContent
(
container
)
;
let
{
top
left
width
}
=
this
.
calculateTogglePosition
(
video
state
.
flyoutToggle
FLYOUT_TOGGLE_ID
)
;
let
styles
=
top
:
{
top
}
px
;
left
:
{
left
}
px
;
;
let
flyout
=
state
.
flyoutToggle
;
flyout
.
setAttributeForElement
(
FLYOUT_TOGGLE_CONTAINER
"
style
"
styles
)
;
let
flyoutAnim
=
flyout
.
setAnimationForElement
(
FLYOUT_TOGGLE_ID
[
{
transform
:
translateX
(
calc
(
100
%
-
{
width
}
px
)
)
opacity
:
"
0
.
2
"
}
{
transform
:
translateX
(
calc
(
100
%
-
{
width
}
px
)
)
opacity
:
"
0
.
8
"
}
{
transform
:
"
translateX
(
0
)
"
opacity
:
"
1
"
}
]
FLYOUT_ANIMATION_RUNTIME_MS
)
;
await
flyoutAnim
.
finished
;
await
new
Promise
(
resolve
=
>
this
.
content
.
setTimeout
(
resolve
this
.
flyoutWaitMs
)
)
;
flyoutAnim
.
reverse
(
)
;
await
flyoutAnim
.
finished
;
this
.
hideFlyout
(
)
;
}
hideFlyout
(
)
{
let
state
=
this
.
docState
;
let
flyout
=
state
.
flyoutToggle
;
if
(
flyout
)
{
flyout
.
setAttributeForElement
(
FLYOUT_TOGGLE_CONTAINER
"
hidden
"
"
true
"
)
;
}
}
}
class
PictureInPictureChild
extends
ActorChild
{
static
videoIsPlaying
(
video
)
{
return
!
!
(
video
.
currentTime
>
0
&
&
!
video
.
paused
&
&
!
video
.
ended
&
&
video
.
readyState
>
2
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
MozTogglePictureInPicture
"
:
{
if
(
event
.
isTrusted
)
{
this
.
togglePictureInPicture
(
event
.
target
)
;
}
break
;
}
case
"
pagehide
"
:
{
this
.
closePictureInPicture
(
)
;
break
;
}
case
"
play
"
:
{
this
.
mm
.
sendAsyncMessage
(
"
PictureInPicture
:
Playing
"
)
;
break
;
}
case
"
pause
"
:
{
this
.
mm
.
sendAsyncMessage
(
"
PictureInPicture
:
Paused
"
)
;
break
;
}
}
}
get
weakVideo
(
)
{
if
(
gWeakVideo
)
{
return
gWeakVideo
.
get
(
)
;
}
return
null
;
}
get
weakPlayerContent
(
)
{
if
(
gWeakPlayerContent
)
{
return
gWeakPlayerContent
.
get
(
)
;
}
return
null
;
}
async
togglePictureInPicture
(
video
)
{
if
(
this
.
inPictureInPicture
(
video
)
)
{
await
this
.
closePictureInPicture
(
)
;
}
else
{
if
(
this
.
weakVideo
)
{
await
this
.
closePictureInPicture
(
)
;
}
gWeakVideo
=
Cu
.
getWeakReference
(
video
)
;
this
.
mm
.
sendAsyncMessage
(
"
PictureInPicture
:
Request
"
{
playing
:
PictureInPictureChild
.
videoIsPlaying
(
video
)
videoHeight
:
video
.
videoHeight
videoWidth
:
video
.
videoWidth
}
)
;
}
}
inPictureInPicture
(
video
)
{
return
this
.
weakVideo
=
=
=
video
;
}
async
closePictureInPicture
(
)
{
if
(
this
.
weakVideo
)
{
this
.
untrackOriginatingVideo
(
this
.
weakVideo
)
;
}
this
.
mm
.
sendAsyncMessage
(
"
PictureInPicture
:
Close
"
{
browingContextId
:
this
.
docShell
.
browsingContext
.
id
}
)
;
if
(
this
.
weakPlayerContent
)
{
await
new
Promise
(
resolve
=
>
{
this
.
weakPlayerContent
.
addEventListener
(
"
unload
"
resolve
{
once
:
true
}
)
;
}
)
;
gWeakPlayerContent
=
null
;
}
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
PictureInPicture
:
SetupPlayer
"
:
{
this
.
setupPlayer
(
)
;
break
;
}
case
"
PictureInPicture
:
Play
"
:
{
this
.
play
(
)
;
break
;
}
case
"
PictureInPicture
:
Pause
"
:
{
this
.
pause
(
)
;
break
;
}
}
}
trackOriginatingVideo
(
originatingVideo
)
{
let
originatingWindow
=
originatingVideo
.
ownerGlobal
;
if
(
originatingWindow
)
{
originatingWindow
.
addEventListener
(
"
pagehide
"
this
)
;
originatingVideo
.
addEventListener
(
"
play
"
this
)
;
originatingVideo
.
addEventListener
(
"
pause
"
this
)
;
}
}
untrackOriginatingVideo
(
originatingVideo
)
{
let
originatingWindow
=
originatingVideo
.
ownerGlobal
;
if
(
originatingWindow
)
{
originatingWindow
.
removeEventListener
(
"
pagehide
"
this
)
;
originatingVideo
.
removeEventListener
(
"
play
"
this
)
;
originatingVideo
.
removeEventListener
(
"
pause
"
this
)
;
}
}
async
setupPlayer
(
)
{
let
originatingVideo
=
this
.
weakVideo
;
if
(
!
originatingVideo
)
{
await
this
.
closePictureInPicture
(
)
;
return
;
}
let
webProgress
=
this
.
mm
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
if
(
webProgress
.
isLoadingDocument
)
{
await
new
Promise
(
resolve
=
>
{
this
.
mm
.
addEventListener
(
"
load
"
resolve
{
once
:
true
mozSystemGroup
:
true
capture
:
true
}
)
;
}
)
;
}
let
doc
=
this
.
content
.
document
;
let
playerVideo
=
originatingVideo
.
cloneNode
(
)
;
playerVideo
.
removeAttribute
(
"
controls
"
)
;
playerVideo
.
muted
=
true
;
playerVideo
.
style
.
height
=
"
100vh
"
;
playerVideo
.
style
.
width
=
"
100vw
"
;
playerVideo
.
style
.
margin
=
"
0
"
;
doc
.
body
.
style
.
overflow
=
"
hidden
"
;
doc
.
body
.
style
.
margin
=
"
0
"
;
doc
.
body
.
appendChild
(
playerVideo
)
;
originatingVideo
.
cloneElementVisually
(
playerVideo
)
;
this
.
trackOriginatingVideo
(
originatingVideo
)
;
this
.
content
.
addEventListener
(
"
unload
"
(
)
=
>
{
if
(
this
.
weakVideo
)
{
this
.
weakVideo
.
stopCloningElementVisually
(
)
;
}
gWeakVideo
=
null
;
}
{
once
:
true
}
)
;
gWeakPlayerContent
=
Cu
.
getWeakReference
(
this
.
content
)
;
}
play
(
)
{
let
video
=
this
.
weakVideo
;
if
(
video
)
{
video
.
play
(
)
;
}
}
pause
(
)
{
let
video
=
this
.
weakVideo
;
if
(
video
)
{
video
.
pause
(
)
;
}
}
}
