"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutHttpsOnlyErrorParent
"
]
;
const
{
HomePage
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
HomePage
.
jsm
"
)
;
const
{
PrivateBrowsingUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
SessionStore
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
)
;
class
AboutHttpsOnlyErrorParent
extends
JSWindowActorParent
{
get
browser
(
)
{
return
this
.
browsingContext
.
top
.
embedderElement
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
goBack
"
:
this
.
goBackFromErrorPage
(
this
.
browser
.
ownerGlobal
)
;
break
;
case
"
openInsecure
"
:
this
.
openWebsiteInsecure
(
this
.
browser
aMessage
.
data
.
inFrame
)
;
break
;
}
}
goBackFromErrorPage
(
aWindow
)
{
if
(
!
aWindow
.
gBrowser
)
{
return
;
}
let
state
=
JSON
.
parse
(
SessionStore
.
getTabState
(
aWindow
.
gBrowser
.
selectedTab
)
)
;
if
(
state
.
index
=
=
1
)
{
aWindow
.
gBrowser
.
loadURI
(
this
.
getDefaultHomePage
(
aWindow
)
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
else
{
aWindow
.
gBrowser
.
goBack
(
)
;
}
}
openWebsiteInsecure
(
aBrowser
aIsIFrame
)
{
const
currentURI
=
aBrowser
.
currentURI
;
const
isViewSource
=
currentURI
.
schemeIs
(
"
view
-
source
"
)
;
let
innerURI
=
isViewSource
?
currentURI
.
QueryInterface
(
Ci
.
nsINestedURI
)
.
innerURI
:
currentURI
;
if
(
!
innerURI
.
schemeIs
(
"
https
"
)
&
&
!
innerURI
.
schemeIs
(
"
http
"
)
)
{
throw
new
Error
(
"
Exceptions
can
only
be
created
for
http
or
https
sites
.
"
)
;
}
let
newURI
=
aIsIFrame
?
innerURI
:
innerURI
.
mutate
(
)
.
setScheme
(
"
http
"
)
.
finalize
(
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
newURI
aBrowser
.
contentPrincipal
.
originAttributes
)
;
Services
.
perms
.
addFromPrincipal
(
principal
"
https
-
only
-
load
-
insecure
"
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW_SESSION
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
)
;
const
insecureSpec
=
isViewSource
?
view
-
source
:
{
newURI
.
spec
}
:
newURI
.
spec
;
aBrowser
.
loadURI
(
insecureSpec
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
loadFlags
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_REPLACE_HISTORY
}
)
;
}
getDefaultHomePage
(
win
)
{
let
url
=
win
.
BROWSER_NEW_TAB_URL
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
return
url
;
}
url
=
HomePage
.
getDefault
(
)
;
if
(
url
.
includes
(
"
|
"
)
)
{
url
=
url
.
split
(
"
|
"
)
[
0
]
;
}
return
url
;
}
}
