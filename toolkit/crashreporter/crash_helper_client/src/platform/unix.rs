use
anyhow
:
:
Result
;
use
crash_helper_common
:
:
{
ignore_eintr
BreakpadChar
BreakpadData
IPCChannel
IPCConnector
IPCListener
}
;
use
nix
:
:
{
sys
:
:
wait
:
:
waitpid
unistd
:
:
{
execv
fork
getpid
setsid
ForkResult
}
}
;
use
std
:
:
ffi
:
:
{
CStr
CString
}
;
use
crate
:
:
CrashHelperClient
;
impl
CrashHelperClient
{
pub
(
crate
)
fn
new
(
program
:
*
const
BreakpadChar
breakpad_data
:
BreakpadData
minidump_path
:
*
const
BreakpadChar
)
-
>
Result
<
CrashHelperClient
>
{
let
channel
=
IPCChannel
:
:
new
(
)
?
;
let
(
listener
server_endpoint
client_endpoint
)
=
channel
.
deconstruct
(
)
;
CrashHelperClient
:
:
spawn_crash_helper
(
program
breakpad_data
minidump_path
listener
server_endpoint
)
?
;
Ok
(
CrashHelperClient
{
connector
:
client_endpoint
spawner_thread
:
None
helper_process
:
Some
(
(
)
)
}
)
}
fn
spawn_crash_helper
(
program
:
*
const
BreakpadChar
breakpad_data
:
BreakpadData
minidump_path
:
*
const
BreakpadChar
listener
:
IPCListener
endpoint
:
IPCConnector
)
-
>
Result
<
(
)
>
{
let
parent_pid
=
getpid
(
)
.
to_string
(
)
;
let
parent_pid_arg
=
unsafe
{
CString
:
:
from_vec_unchecked
(
parent_pid
.
into_bytes
(
)
)
}
;
let
pid
=
unsafe
{
fork
(
)
}
?
;
match
pid
{
ForkResult
:
:
Child
=
>
{
let
_
=
setsid
(
)
;
let
pid
=
unsafe
{
fork
(
)
}
.
unwrap
(
)
;
match
pid
{
ForkResult
:
:
Child
=
>
{
let
program
=
unsafe
{
CStr
:
:
from_ptr
(
program
)
}
;
let
breakpad_data_arg
=
unsafe
{
CString
:
:
from_vec_unchecked
(
breakpad_data
.
to_string
(
)
.
into_bytes
(
)
)
}
;
let
minidump_path
=
unsafe
{
CStr
:
:
from_ptr
(
minidump_path
)
}
;
let
listener_arg
=
listener
.
serialize
(
)
;
let
endpoint_arg
=
endpoint
.
serialize
(
)
;
let
_
=
execv
(
program
&
[
program
&
parent_pid_arg
&
breakpad_data_arg
minidump_path
&
listener_arg
&
endpoint_arg
]
)
;
unsafe
{
nix
:
:
libc
:
:
_exit
(
1
)
}
;
}
_
=
>
unsafe
{
nix
:
:
libc
:
:
_exit
(
0
)
;
}
}
}
ForkResult
:
:
Parent
{
child
}
=
>
{
ignore_eintr
!
(
waitpid
(
child
None
)
)
?
;
Ok
(
(
)
)
}
}
}
#
[
cfg
(
not
(
target_os
=
"
linux
"
)
)
]
pub
(
crate
)
fn
prepare_for_minidump
(
_pid
:
crash_helper_common
:
:
Pid
)
{
}
}
