use
std
:
:
process
;
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
use
crate
:
:
platform
:
:
linux
:
:
unix_socketpair
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
use
crate
:
:
platform
:
:
macos
:
:
unix_socketpair
;
use
crate
:
:
{
errors
:
:
IPCError
IPCConnector
IPCListener
Pid
}
;
pub
struct
IPCChannel
{
listener
:
IPCListener
client_endpoint
:
IPCConnector
server_endpoint
:
IPCConnector
}
impl
IPCChannel
{
pub
fn
new
(
)
-
>
Result
<
IPCChannel
IPCError
>
{
let
listener
=
IPCListener
:
:
new
(
process
:
:
id
(
)
as
Pid
)
?
;
let
pair
=
unix_socketpair
(
)
.
map_err
(
IPCError
:
:
System
)
?
;
let
client_endpoint
=
IPCConnector
:
:
from_fd
(
pair
.
0
)
?
;
let
server_endpoint
=
IPCConnector
:
:
from_fd_inheritable
(
pair
.
1
)
?
;
Ok
(
IPCChannel
{
listener
client_endpoint
server_endpoint
}
)
}
pub
fn
deconstruct
(
self
)
-
>
(
IPCListener
IPCConnector
IPCConnector
)
{
(
self
.
listener
self
.
server_endpoint
self
.
client_endpoint
)
}
}
pub
struct
IPCClientChannel
{
client_endpoint
:
IPCConnector
server_endpoint
:
IPCConnector
}
impl
IPCClientChannel
{
pub
fn
new
(
)
-
>
Result
<
IPCClientChannel
IPCError
>
{
let
pair
=
unix_socketpair
(
)
.
map_err
(
IPCError
:
:
System
)
?
;
let
client_endpoint
=
IPCConnector
:
:
from_fd
(
pair
.
0
)
?
;
let
server_endpoint
=
IPCConnector
:
:
from_fd
(
pair
.
1
)
?
;
Ok
(
IPCClientChannel
{
client_endpoint
server_endpoint
}
)
}
pub
fn
deconstruct
(
self
)
-
>
(
IPCConnector
IPCConnector
)
{
(
self
.
server_endpoint
self
.
client_endpoint
)
}
}
