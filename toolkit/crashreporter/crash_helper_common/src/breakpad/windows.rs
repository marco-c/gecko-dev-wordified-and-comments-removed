use
std
:
:
ffi
:
:
OsString
;
use
crate
:
:
{
errors
:
:
MessageError
BreakpadString
}
;
pub
type
Pid
=
u32
;
pub
type
BreakpadChar
=
u16
;
pub
type
AncillaryData
=
(
)
;
pub
type
BreakpadRawData
=
*
const
u16
;
pub
struct
BreakpadData
{
data
:
OsString
}
impl
BreakpadData
{
pub
fn
new
(
raw
:
BreakpadRawData
)
-
>
BreakpadData
{
BreakpadData
{
data
:
<
OsString
as
BreakpadString
>
:
:
from_ptr
(
raw
)
}
}
pub
fn
into_raw
(
self
)
-
>
BreakpadRawData
{
unsafe
{
self
.
data
.
into_raw
(
)
}
}
pub
(
crate
)
fn
from_slice_with_ancillary
(
data
:
&
[
u8
]
ancillary
:
Option
<
AncillaryData
>
)
-
>
Result
<
BreakpadData
MessageError
>
{
debug_assert
!
(
ancillary
.
is_none
(
)
"
BreakpadData
doesn
'
t
have
ancillary
data
on
Windows
"
)
;
let
data
=
<
OsString
as
BreakpadString
>
:
:
deserialize
(
data
)
?
;
Ok
(
BreakpadData
{
data
}
)
}
pub
(
crate
)
fn
serialize
(
&
self
)
-
>
Vec
<
u8
>
{
self
.
data
.
serialize
(
)
}
pub
(
crate
)
fn
ancillary
(
&
self
)
-
>
Option
<
AncillaryData
>
{
None
}
}
