use
crate
:
:
{
ignore_eintr
AncillaryData
Pid
}
;
use
nix
:
:
{
errno
:
:
Errno
fcntl
:
:
{
fcntl
FcntlArg
:
:
F_SETFL
OFlag
}
libc
:
:
{
setsockopt
SOL_SOCKET
SO_NOSIGPIPE
}
sys
:
:
socket
:
:
{
getsockopt
recv
send
sockopt
:
:
LocalPeerPid
MsgFlags
SockFlag
SockType
UnixAddr
}
Result
}
;
use
std
:
:
{
mem
:
:
size_of
os
:
:
fd
:
:
{
AsRawFd
BorrowedFd
OwnedFd
RawFd
}
path
:
:
PathBuf
str
:
:
FromStr
}
;
pub
(
crate
)
const
SOCKET_TYPE
:
SockType
=
SockType
:
:
Stream
;
pub
(
crate
)
const
SOCKET_FLAGS
:
SockFlag
=
SockFlag
:
:
empty
(
)
;
pub
(
crate
)
fn
set_socket_flags
(
socket
:
&
OwnedFd
)
-
>
Result
<
(
)
>
{
fcntl
(
socket
.
as_raw_fd
(
)
F_SETFL
(
OFlag
:
:
O_CLOEXEC
)
)
?
;
fcntl
(
socket
.
as_raw_fd
(
)
F_SETFL
(
OFlag
:
:
O_NONBLOCK
)
)
?
;
let
res
=
unsafe
{
setsockopt
(
socket
.
as_raw_fd
(
)
SOL_SOCKET
SO_NOSIGPIPE
(
&
1
as
*
const
i32
)
.
cast
(
)
size_of
:
:
<
i32
>
(
)
as
_
)
}
;
if
res
<
0
{
return
Err
(
Errno
:
:
last
(
)
)
;
}
Ok
(
(
)
)
}
pub
(
crate
)
fn
server_addr
(
pid
:
Pid
)
-
>
Result
<
UnixAddr
>
{
let
server_name
=
format
!
(
"
/
tmp
/
gecko
-
crash
-
helper
-
pipe
.
{
pid
:
}
"
)
;
let
server_path
=
PathBuf
:
:
from_str
(
&
server_name
)
.
unwrap
(
)
;
UnixAddr
:
:
new
(
&
server_path
)
}
pub
(
crate
)
fn
connected_process_pid
(
socket
:
BorrowedFd
)
-
>
Result
<
Pid
>
{
let
pid
=
getsockopt
(
&
socket
LocalPeerPid
)
?
;
Ok
(
pid
)
}
pub
(
crate
)
fn
send_nonblock
(
socket
:
RawFd
buff
:
&
[
u8
]
fd
:
Option
<
AncillaryData
>
)
-
>
Result
<
(
)
>
{
if
fd
.
is_some
(
)
{
return
Err
(
Errno
:
:
EINVAL
)
;
}
let
mut
bytes_sent
=
0
;
while
bytes_sent
!
=
buff
.
len
(
)
{
let
res
=
ignore_eintr
!
(
send
(
socket
&
buff
[
bytes_sent
.
.
]
MsgFlags
:
:
empty
(
)
)
)
;
match
res
{
Ok
(
size
)
=
>
{
bytes_sent
+
=
size
;
}
Err
(
error
)
=
>
{
return
Err
(
error
)
;
}
}
}
Ok
(
(
)
)
}
pub
(
crate
)
fn
recv_nonblock
(
socket
:
RawFd
expected_size
:
usize
)
-
>
Result
<
(
Vec
<
u8
>
Option
<
AncillaryData
>
)
>
{
let
mut
buff
:
Vec
<
u8
>
=
vec
!
[
0
;
expected_size
]
;
let
mut
bytes_received
=
0
;
while
bytes_received
!
=
expected_size
{
let
res
=
ignore_eintr
!
(
recv
(
socket
&
mut
buff
[
bytes_received
.
.
]
MsgFlags
:
:
empty
(
)
)
)
;
match
res
{
Ok
(
size
)
=
>
{
bytes_received
+
=
size
;
if
size
=
=
0
{
return
Err
(
Errno
:
:
EBADMSG
)
;
}
}
Err
(
error
)
=
>
{
return
Err
(
error
)
;
}
}
}
Ok
(
(
buff
None
)
)
}
