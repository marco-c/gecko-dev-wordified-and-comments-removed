#
[
cfg
(
any
(
target_os
=
"
linux
"
target_os
=
"
android
"
)
)
]
extern
crate
rust_minidump_writer_linux
;
mod
breakpad_crash_generator
;
mod
crash_generation
;
mod
ipc_server
;
mod
logging
;
mod
phc
;
use
crash_helper_common
:
:
{
BreakpadData
BreakpadRawData
IPCConnector
IPCListener
Pid
}
;
use
std
:
:
ffi
:
:
{
c_char
CStr
OsString
}
;
use
crash_generation
:
:
CrashGenerator
;
use
ipc_server
:
:
{
IPCServer
IPCServerState
}
;
#
[
cfg
(
target_os
=
"
android
"
)
]
use
std
:
:
os
:
:
fd
:
:
{
FromRawFd
OwnedFd
RawFd
}
;
#
[
cfg
(
not
(
target_os
=
"
android
"
)
)
]
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
crash_generator_logic_desktop
(
client_pid
:
Pid
breakpad_data
:
BreakpadRawData
minidump_path
:
*
const
c_char
listener
:
*
const
c_char
pipe
:
*
const
c_char
)
-
>
i32
{
logging
:
:
init
(
)
;
let
breakpad_data
=
BreakpadData
:
:
new
(
breakpad_data
)
;
let
minidump_path
=
unsafe
{
CStr
:
:
from_ptr
(
minidump_path
)
}
.
to_owned
(
)
.
into_string
(
)
.
unwrap
(
)
;
let
minidump_path
=
OsString
:
:
from
(
minidump_path
)
;
let
listener
=
unsafe
{
CStr
:
:
from_ptr
(
listener
)
}
;
let
listener
=
IPCListener
:
:
deserialize
(
listener
client_pid
)
.
map_err
(
|
error
|
{
log
:
:
error
!
(
"
Could
not
parse
the
crash
generator
'
s
listener
(
error
:
{
error
}
)
"
)
;
}
)
.
unwrap
(
)
;
let
pipe
=
unsafe
{
CStr
:
:
from_ptr
(
pipe
)
}
;
let
connector
=
IPCConnector
:
:
deserialize
(
pipe
)
.
map_err
(
|
error
|
{
log
:
:
error
!
(
"
Could
not
parse
the
crash
generator
'
s
connector
(
error
:
{
error
}
)
"
)
;
}
)
.
unwrap
(
)
;
let
crash_generator
=
CrashGenerator
:
:
new
(
breakpad_data
minidump_path
)
.
map_err
(
|
error
|
{
log
:
:
error
!
(
"
Could
not
create
the
crash
generator
(
error
:
{
error
}
)
"
)
;
error
}
)
.
unwrap
(
)
;
let
ipc_server
=
IPCServer
:
:
new
(
listener
connector
)
;
main_loop
(
ipc_server
crash_generator
)
}
#
[
cfg
(
target_os
=
"
android
"
)
]
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
crash_generator_logic_android
(
client_pid
:
Pid
breakpad_data
:
BreakpadRawData
minidump_path
:
*
const
c_char
listener
:
RawFd
pipe
:
RawFd
)
{
logging
:
:
init
(
)
;
let
breakpad_data
=
BreakpadData
:
:
new
(
breakpad_data
)
;
let
minidump_path
=
unsafe
{
CStr
:
:
from_ptr
(
minidump_path
)
}
.
to_owned
(
)
.
into_string
(
)
.
unwrap
(
)
;
let
minidump_path
=
OsString
:
:
from
(
minidump_path
)
;
let
crash_generator
=
CrashGenerator
:
:
new
(
breakpad_data
minidump_path
)
.
map_err
(
|
error
|
{
log
:
:
error
!
(
"
Could
not
create
the
crash
generator
(
error
:
{
error
}
)
"
)
;
error
}
)
.
unwrap
(
)
;
let
listener
=
unsafe
{
OwnedFd
:
:
from_raw_fd
(
listener
)
}
;
let
listener
=
IPCListener
:
:
from_fd
(
client_pid
listener
)
.
map_err
(
|
error
|
{
log
:
:
error
!
(
"
Could
not
use
the
listener
(
error
:
{
error
}
)
"
)
;
}
)
.
unwrap
(
)
;
let
pipe
=
unsafe
{
OwnedFd
:
:
from_raw_fd
(
pipe
)
}
;
let
connector
=
IPCConnector
:
:
from_fd
(
pipe
)
.
map_err
(
|
error
|
{
log
:
:
error
!
(
"
Could
not
use
the
pipe
(
error
:
{
error
}
)
"
)
;
}
)
.
unwrap
(
)
;
let
ipc_server
=
IPCServer
:
:
new
(
listener
connector
)
;
let
_
=
std
:
:
thread
:
:
spawn
(
move
|
|
main_loop
(
ipc_server
crash_generator
)
)
;
}
fn
main_loop
(
mut
ipc_server
:
IPCServer
mut
crash_generator
:
CrashGenerator
)
-
>
i32
{
loop
{
match
ipc_server
.
run
(
&
mut
crash_generator
)
{
Ok
(
_result
IPCServerState
:
:
ClientDisconnected
)
=
>
{
return
0
;
}
Err
(
error
)
=
>
{
log
:
:
error
!
(
"
The
crashhelper
encountered
an
error
exiting
(
error
:
{
error
}
)
"
)
;
return
-
1
;
}
_
=
>
{
}
}
}
}
