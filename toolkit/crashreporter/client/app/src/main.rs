#
!
[
cfg_attr
(
windows
windows_subsystem
=
"
windows
"
)
]
use
crate
:
:
std
:
:
sync
:
:
Arc
;
use
config
:
:
Config
;
macro_rules
!
cc
{
(
(
(
c
:
ident
)
*
)
e
:
expr
)
=
>
{
{
(
let
c
=
c
.
clone
(
)
;
)
*
e
}
}
}
macro_rules
!
ekey
{
(
name
:
literal
)
=
>
{
concat
!
(
"
MOZ_CRASHREPORTER_
"
name
)
}
;
}
mod
analyze
;
mod
async_task
;
mod
config
;
mod
data
;
mod
glean
;
mod
lang
;
mod
logging
;
mod
logic
;
mod
memory_test
;
mod
net
;
mod
process
;
mod
settings
;
mod
std
;
mod
thread_bound
;
mod
ui
;
#
[
cfg
(
test
)
]
mod
test
;
fn
main
(
)
{
match
:
:
std
:
:
env
:
:
args_os
(
)
.
nth
(
1
)
{
Some
(
s
)
if
s
=
=
"
-
-
analyze
"
=
>
analyze
:
:
main
(
)
Some
(
s
)
if
s
=
=
"
-
-
memtest
"
=
>
memory_test
:
:
main
(
)
_
=
>
report_main
(
)
}
}
#
[
cfg
(
not
(
mock
)
)
]
fn
report_main
(
)
{
let
log_target
=
logging
:
:
init
(
)
;
let
mut
config
=
Config
:
:
new
(
)
;
config
.
log_target
=
Some
(
log_target
)
;
config
.
read_from_environment
(
)
;
let
mut
config
=
Arc
:
:
new
(
config
)
;
match
try_run
(
&
mut
config
)
{
Ok
(
attempted_send
)
=
>
{
if
!
attempted_send
{
config
.
delete_files
(
)
;
}
}
Err
(
message
)
=
>
{
log
:
:
error
!
(
"
exiting
with
error
:
{
message
:
#
}
"
)
;
if
!
config
.
auto_submit
{
ui
:
:
error_dialog
(
config
message
)
;
}
std
:
:
process
:
:
exit
(
1
)
;
}
}
}
#
[
cfg
(
mock
)
]
fn
report_main
(
)
{
use
crate
:
:
std
:
:
{
fs
:
:
{
MockFS
MockFiles
}
mock
process
:
:
Command
}
;
const
MOCK_MINIDUMP_EXTRA
:
&
str
=
r
#
"
{
"
Vendor
"
:
"
FooCorp
"
"
ProductName
"
:
"
Bar
"
"
ReleaseChannel
"
:
"
release
"
"
BuildID
"
:
"
1234
"
"
StackTraces
"
:
{
"
status
"
:
"
OK
"
}
"
Version
"
:
"
100
.
0
"
"
ServerURL
"
:
"
https
:
/
/
reports
.
example
"
"
TelemetryServerURL
"
:
"
https
:
/
/
telemetry
.
example
"
"
TelemetryClientId
"
:
"
telemetry_client
"
"
TelemetryProfileGroupId
"
:
"
telemetry_profile_group
"
"
TelemetrySessionId
"
:
"
telemetry_session
"
"
URL
"
:
"
https
:
/
/
url
.
example
"
}
"
#
;
const
MOCK_MINIDUMP_FILE
:
&
[
u8
]
=
&
[
1
2
3
4
]
;
const
MOCK_CURRENT_TIME
:
&
str
=
"
2004
-
11
-
09T12
:
34
:
56Z
"
;
const
MOCK_REMOTE_CRASH_ID
:
&
str
=
"
8cbb847c
-
def2
-
4f68
-
be9e
-
000000000000
"
;
logging
:
:
init
(
)
;
let
mock_files
=
MockFiles
:
:
new
(
)
;
mock_files
.
add_file
(
"
minidump
.
dmp
"
MOCK_MINIDUMP_FILE
)
.
add_file
(
"
minidump
.
extra
"
MOCK_MINIDUMP_EXTRA
)
;
let
mut
mock
=
mock
:
:
builder
(
)
;
mock
.
set
(
Command
:
:
mock
(
"
work_dir
/
pingsender
"
)
Box
:
:
new
(
|
_
|
Ok
(
crate
:
:
std
:
:
process
:
:
success_output
(
)
)
)
)
.
set
(
Command
:
:
mock
(
"
curl
"
)
Box
:
:
new
(
|
_
|
{
let
mut
output
=
crate
:
:
std
:
:
process
:
:
success_output
(
)
;
output
.
stdout
=
format
!
(
"
CrashID
=
{
MOCK_REMOTE_CRASH_ID
}
"
)
.
into
(
)
;
std
:
:
thread
:
:
sleep
(
std
:
:
time
:
:
Duration
:
:
from_secs
(
2
)
)
;
Ok
(
output
)
}
)
)
.
set
(
MockFS
mock_files
.
clone
(
)
)
.
set
(
crate
:
:
std
:
:
env
:
:
MockCurrentExe
"
work_dir
/
crashreporter
"
.
into
(
)
)
.
set
(
crate
:
:
std
:
:
env
:
:
MockTempDir
"
tmp
"
.
into
(
)
)
.
set
(
crate
:
:
std
:
:
time
:
:
MockCurrentTime
time
:
:
OffsetDateTime
:
:
parse
(
MOCK_CURRENT_TIME
&
time
:
:
format_description
:
:
well_known
:
:
Iso8601
:
:
DEFAULT
)
.
unwrap
(
)
.
into
(
)
)
.
set
(
mock
:
:
MockHook
:
:
new
(
"
enable_glean_pings
"
)
false
)
;
let
result
=
mock
.
run
(
|
|
{
let
mut
cfg
=
Config
:
:
new
(
)
;
cfg
.
data_dir
=
Some
(
"
data_dir
"
.
into
(
)
)
;
cfg
.
events_dir
=
Some
(
"
events_dir
"
.
into
(
)
)
;
cfg
.
dump_file
=
Some
(
"
minidump
.
dmp
"
.
into
(
)
)
;
cfg
.
restart_command
=
Some
(
"
mockfox
"
.
into
(
)
)
;
cfg
.
strings
=
Some
(
lang
:
:
load
(
)
)
;
let
mut
cfg
=
Arc
:
:
new
(
cfg
)
;
try_run
(
&
mut
cfg
)
}
)
;
if
let
Err
(
e
)
=
result
{
log
:
:
error
!
(
"
exiting
with
error
:
{
e
}
"
)
;
std
:
:
process
:
:
exit
(
1
)
;
}
}
fn
try_run
(
config
:
&
mut
Arc
<
Config
>
)
-
>
anyhow
:
:
Result
<
bool
>
{
if
config
.
dump_file
.
is_none
(
)
{
if
!
config
.
auto_submit
{
Err
(
anyhow
:
:
anyhow
!
(
config
.
string
(
"
crashreporter
-
information
"
)
)
)
}
else
{
Ok
(
false
)
}
}
else
if
!
config
.
dump_file
(
)
.
exists
(
)
{
Err
(
anyhow
:
:
anyhow
!
(
config
.
string
(
"
crashreporter
-
error
-
failed
-
to
-
generate
-
minidump
"
)
)
)
}
else
{
#
[
cfg
(
not
(
mock
)
)
]
{
if
let
Err
(
e
)
=
minidump_analyzer
:
:
MinidumpAnalyzer
:
:
new
(
config
.
dump_file
(
)
)
.
all_threads
(
config
.
dump_all_threads
)
.
analyze
(
)
{
log
:
:
warn
!
(
"
minidump
analyzer
failed
:
{
e
}
"
)
;
}
}
let
extra
=
{
let
config
=
Arc
:
:
get_mut
(
config
)
.
expect
(
"
unexpected
config
references
"
)
;
let
extra
=
config
.
load_extra_file
(
)
?
;
config
.
move_crash_data_to_pending
(
)
?
;
extra
}
;
#
[
cfg
(
not
(
test
)
)
]
glean
:
:
init
(
&
config
)
;
logic
:
:
ReportCrash
:
:
new
(
config
.
clone
(
)
extra
)
?
.
run
(
)
}
}
#
[
cfg
(
all
(
target_os
=
"
windows
"
target_env
=
"
gnu
"
)
)
]
#
[
link
(
name
=
"
bcryptprimitives
"
)
]
extern
"
C
"
{
}
