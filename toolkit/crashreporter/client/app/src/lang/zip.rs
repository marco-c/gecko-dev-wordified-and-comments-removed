use
crate
:
:
std
:
:
{
fs
:
:
File
io
:
:
Read
path
:
:
Path
}
;
use
anyhow
:
:
{
Context
Result
}
;
use
zip
:
:
read
:
:
{
ArchiveOffset
Config
as
ZipConfig
ZipArchive
}
;
pub
type
Archive
=
ZipArchive
<
File
>
;
pub
fn
read_zip
(
path
:
&
Path
)
-
>
Result
<
Archive
>
{
ZipArchive
:
:
with_config
(
ZipConfig
{
archive_offset
:
ArchiveOffset
:
:
Known
(
0
)
}
File
:
:
open
(
&
path
)
.
with_context
(
|
|
format
!
(
"
failed
to
open
{
}
"
path
.
display
(
)
)
)
?
)
.
with_context
(
|
|
format
!
(
"
failed
to
read
zip
archive
in
{
}
"
path
.
display
(
)
)
)
}
pub
fn
read_archive_file_as_string
(
archive
:
&
mut
Archive
path
:
&
str
)
-
>
anyhow
:
:
Result
<
String
>
{
let
mut
file
=
archive
.
by_name
(
path
)
.
with_context
(
|
|
format
!
(
"
failed
to
locate
{
path
}
in
archive
"
)
)
?
;
let
mut
data
=
String
:
:
new
(
)
;
file
.
read_to_string
(
&
mut
data
)
.
with_context
(
|
|
format
!
(
"
failed
to
read
{
path
}
from
archive
"
)
)
?
;
Ok
(
data
)
}
