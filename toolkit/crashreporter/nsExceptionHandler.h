#
ifndef
nsExceptionHandler_h__
#
define
nsExceptionHandler_h__
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
CrashAnnotations
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
nsError
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prio
.
h
"
#
if
defined
(
XP_WIN32
)
#
ifdef
WIN32_LEAN_AND_MEAN
#
undef
WIN32_LEAN_AND_MEAN
#
endif
#
include
<
windows
.
h
>
#
endif
#
if
defined
(
XP_MACOSX
)
#
include
<
mach
/
mach
.
h
>
#
endif
#
if
defined
(
XP_LINUX
)
#
include
<
signal
.
h
>
#
endif
class
nsIFile
;
namespace
CrashReporter
{
static
inline
bool
IsDummy
(
)
{
#
ifdef
MOZ_CRASHREPORTER
return
false
;
#
else
return
true
;
#
endif
}
nsresult
SetExceptionHandler
(
nsIFile
*
aXREDirectory
bool
force
=
false
)
;
nsresult
UnsetExceptionHandler
(
)
;
void
SetUserAppDataDirectory
(
nsIFile
*
aDir
)
;
void
SetProfileDirectory
(
nsIFile
*
aDir
)
;
void
UpdateCrashEventsDir
(
)
;
void
SetMemoryReportFile
(
nsIFile
*
aFile
)
;
nsresult
GetDefaultMemoryReportFile
(
nsIFile
*
*
aFile
)
;
void
SetTelemetrySessionId
(
const
nsACString
&
id
)
;
bool
GetCrashEventsDir
(
nsAString
&
aPath
)
;
bool
GetEnabled
(
)
;
bool
GetServerURL
(
nsACString
&
aServerURL
)
;
nsresult
SetServerURL
(
const
nsACString
&
aServerURL
)
;
bool
GetMinidumpPath
(
nsAString
&
aPath
)
;
nsresult
SetMinidumpPath
(
const
nsAString
&
aPath
)
;
nsresult
AnnotateCrashReport
(
Annotation
key
bool
data
)
;
nsresult
AnnotateCrashReport
(
Annotation
key
int
data
)
;
nsresult
AnnotateCrashReport
(
Annotation
key
unsigned
int
data
)
;
nsresult
AnnotateCrashReport
(
Annotation
key
const
nsACString
&
data
)
;
nsresult
RemoveCrashReportAnnotation
(
Annotation
key
)
;
nsresult
AppendAppNotesToCrashReport
(
const
nsACString
&
data
)
;
void
NotifyCrashReporterClientCreated
(
)
;
void
AnnotateOOMAllocationSize
(
size_t
size
)
;
void
AnnotateTexturesSize
(
size_t
size
)
;
nsresult
SetGarbageCollecting
(
bool
collecting
)
;
void
SetEventloopNestingLevel
(
uint32_t
level
)
;
void
SetMinidumpAnalysisAllThreads
(
)
;
nsresult
SetRestartArgs
(
int
argc
char
*
*
argv
)
;
nsresult
SetupExtraData
(
nsIFile
*
aAppDataDirectory
const
nsACString
&
aBuildID
)
;
nsresult
RegisterAppMemory
(
void
*
ptr
size_t
length
)
;
nsresult
UnregisterAppMemory
(
void
*
ptr
)
;
void
SetIncludeContextHeap
(
bool
aValue
)
;
typedef
mozilla
:
:
EnumeratedArray
<
Annotation
Annotation
:
:
Count
nsCString
>
AnnotationTable
;
void
DeleteMinidumpFilesForID
(
const
nsAString
&
id
)
;
bool
GetMinidumpForID
(
const
nsAString
&
id
nsIFile
*
*
minidump
)
;
bool
GetIDFromMinidump
(
nsIFile
*
minidump
nsAString
&
id
)
;
bool
GetExtraFileForID
(
const
nsAString
&
id
nsIFile
*
*
extraFile
)
;
bool
GetExtraFileForMinidump
(
nsIFile
*
minidump
nsIFile
*
*
extraFile
)
;
bool
AppendExtraData
(
const
nsAString
&
id
const
AnnotationTable
&
data
)
;
bool
AppendExtraData
(
nsIFile
*
extraFile
const
AnnotationTable
&
data
)
;
void
RenameAdditionalHangMinidump
(
nsIFile
*
aDumpFile
const
nsIFile
*
aOwnerDumpFile
const
nsACString
&
aDumpFileProcessType
)
;
#
ifdef
XP_WIN32
nsresult
WriteMinidumpForException
(
EXCEPTION_POINTERS
*
aExceptionInfo
)
;
#
endif
#
ifdef
XP_LINUX
bool
WriteMinidumpForSigInfo
(
int
signo
siginfo_t
*
info
void
*
uc
)
;
#
endif
#
ifdef
XP_MACOSX
nsresult
AppendObjCExceptionInfoToAppNotes
(
void
*
inException
)
;
#
endif
nsresult
GetSubmitReports
(
bool
*
aSubmitReport
)
;
nsresult
SetSubmitReports
(
bool
aSubmitReport
)
;
void
OOPInit
(
)
;
bool
TakeMinidump
(
nsIFile
*
*
aResult
bool
aMoveToPending
=
false
)
;
bool
TakeMinidumpForChild
(
uint32_t
childPid
nsIFile
*
*
dump
uint32_t
*
aSequence
=
nullptr
)
;
#
if
defined
(
XP_WIN
)
typedef
HANDLE
ProcessHandle
;
typedef
DWORD
ProcessId
;
typedef
DWORD
ThreadId
;
typedef
HANDLE
FileHandle
;
#
elif
defined
(
XP_MACOSX
)
typedef
task_t
ProcessHandle
;
typedef
pid_t
ProcessId
;
typedef
mach_port_t
ThreadId
;
typedef
int
FileHandle
;
#
else
typedef
int
ProcessHandle
;
typedef
pid_t
ProcessId
;
typedef
int
ThreadId
;
typedef
int
FileHandle
;
#
endif
#
if
!
defined
(
XP_WIN
)
int
GetAnnotationTimeCrashFd
(
)
;
#
endif
void
RegisterChildCrashAnnotationFileDescriptor
(
ProcessId
aProcess
PRFileDesc
*
aFd
)
;
void
DeregisterChildCrashAnnotationFileDescriptor
(
ProcessId
aProcess
)
;
ThreadId
CurrentThreadId
(
)
;
bool
CreateMinidumpsAndPair
(
ProcessHandle
aTargetPid
ThreadId
aTargetBlamedThread
const
nsACString
&
aIncomingPairName
nsIFile
*
aIncomingDumpToPair
nsIFile
*
*
aTargetDumpOut
)
;
bool
CreateAdditionalChildMinidump
(
ProcessHandle
childPid
ThreadId
childBlamedThread
nsIFile
*
parentMinidump
const
nsACString
&
name
)
;
void
GetChildProcessTmpDir
(
nsIFile
*
*
aOutTmpDir
)
;
#
if
defined
(
XP_WIN32
)
|
|
defined
(
XP_MACOSX
)
const
char
*
GetChildNotificationPipe
(
)
;
#
ifdef
MOZ_CRASHREPORTER_INJECTOR
class
InjectorCrashCallback
{
public
:
InjectorCrashCallback
(
)
{
}
virtual
void
OnCrash
(
DWORD
processID
)
=
0
;
}
;
void
InjectCrashReporterIntoProcess
(
DWORD
processID
InjectorCrashCallback
*
cb
)
;
void
UnregisterInjectorCallback
(
DWORD
processID
)
;
#
endif
#
if
defined
(
XP_WIN32
)
bool
SetRemoteExceptionHandler
(
const
nsACString
&
crashPipe
uintptr_t
aCrashTimeAnnotationFile
)
;
#
else
bool
SetRemoteExceptionHandler
(
const
nsACString
&
crashPipe
)
;
#
endif
#
else
bool
CreateNotificationPipeForChild
(
int
*
childCrashFd
int
*
childCrashRemapFd
)
;
bool
SetRemoteExceptionHandler
(
)
;
#
endif
bool
UnsetRemoteExceptionHandler
(
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
SetNotificationPipeForChild
(
int
childCrashFd
)
;
void
SetCrashAnnotationPipeForChild
(
int
childCrashAnnotationFd
)
;
void
AddLibraryMapping
(
const
char
*
library_name
uintptr_t
start_address
size_t
mapping_length
size_t
file_offset
)
;
#
endif
void
SetCurrentThreadName
(
const
char
*
aName
)
;
}
#
endif
