#
ifndef
MINIDUMP_CALLBACK_H__
#
define
MINIDUMP_CALLBACK_H__
#
include
<
windows
.
h
>
#
include
<
dbghelp
.
h
>
#
include
<
list
>
namespace
google_breakpad
{
struct
AppMemory
{
ULONG64
ptr
;
ULONG
length
;
bool
preallocated
;
bool
operator
=
=
(
const
struct
AppMemory
&
other
)
const
{
return
ptr
=
=
other
.
ptr
;
}
bool
operator
=
=
(
const
void
*
other
)
const
{
return
ptr
=
=
reinterpret_cast
<
ULONG64
>
(
other
)
;
}
AppMemory
(
)
:
ptr
(
0
)
length
(
0
)
preallocated
(
false
)
{
}
AppMemory
&
operator
=
(
const
AppMemory
&
other
)
=
default
;
}
;
typedef
std
:
:
list
<
AppMemory
>
AppMemoryList
;
typedef
struct
{
AppMemoryList
:
:
const_iterator
iter
;
AppMemoryList
:
:
const_iterator
end
;
}
MinidumpCallbackContext
;
static
const
size_t
kExceptionAppMemoryRegions
=
16
;
#
if
defined
(
_M_IX86
)
using
RegisterValueType
=
DWORD
;
#
elif
defined
(
_M_AMD64
)
using
RegisterValueType
=
DWORD64
;
#
else
#
error
Unsupported
platform
#
endif
void
IncludeAppMemoryFromExceptionContext
(
HANDLE
aProcess
DWORD
aThreadId
AppMemoryList
&
aList
PCONTEXT
aExceptionContext
bool
aInsttructionPointerOnly
)
;
BOOL
CALLBACK
MinidumpWriteDumpCallback
(
PVOID
context
const
PMINIDUMP_CALLBACK_INPUT
callback_input
PMINIDUMP_CALLBACK_OUTPUT
callback_output
)
;
void
InitAppMemoryInternal
(
)
;
}
#
endif
