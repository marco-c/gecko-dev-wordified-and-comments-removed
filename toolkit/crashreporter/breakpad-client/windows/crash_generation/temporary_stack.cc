#
include
<
windows
.
h
>
#
include
<
cassert
>
#
include
<
intrin
.
h
>
#
include
"
temporary_stack
.
h
"
struct
Fiberizer
{
bool
const
was_already_a_fiber
=
:
:
IsThreadAFiber
(
)
;
Fiberizer
(
)
{
if
(
!
was_already_a_fiber
)
{
:
:
ConvertThreadToFiberEx
(
NULL
FIBER_FLAG_FLOAT_SWITCH
)
;
}
}
~
Fiberizer
(
)
{
if
(
!
was_already_a_fiber
)
{
:
:
ConvertFiberToThread
(
)
;
}
}
}
;
void
RunOnTemporaryStack
(
void
(
*
func
)
(
void
*
)
void
*
param
size_t
reserved_stack_size
)
{
Fiberizer
fiberizer_
;
struct
Args
{
LPVOID
calling_fiber
;
void
(
*
func
)
(
void
*
)
;
void
*
param
;
}
args
=
{
.
calling_fiber
=
:
:
GetCurrentFiber
(
)
.
func
=
func
.
param
=
param
}
;
auto
const
adaptor
=
[
]
(
void
*
v
)
{
Args
const
&
args
=
*
static_cast
<
Args
*
>
(
v
)
;
(
args
.
func
)
(
args
.
param
)
;
:
:
SwitchToFiber
(
args
.
calling_fiber
)
;
}
;
LPVOID
const
alt_fiber
=
:
:
CreateFiberEx
(
0
reserved_stack_size
FIBER_FLAG_FLOAT_SWITCH
adaptor
&
args
)
;
assert
(
alt_fiber
)
;
:
:
SwitchToFiber
(
alt_fiber
)
;
:
:
DeleteFiber
(
alt_fiber
)
;
}
