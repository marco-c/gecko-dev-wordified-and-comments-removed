#
ifndef
CLIENT_WINDOWS_CRASH_GENERATION_MINIDUMP_GENERATOR_H_
#
define
CLIENT_WINDOWS_CRASH_GENERATION_MINIDUMP_GENERATOR_H_
#
include
<
windows
.
h
>
#
include
<
dbghelp
.
h
>
#
include
<
rpc
.
h
>
#
include
<
list
>
#
include
<
string
>
#
include
"
google_breakpad
/
common
/
minidump_format
.
h
"
namespace
google_breakpad
{
class
MinidumpGenerator
{
public
:
MinidumpGenerator
(
const
std
:
:
wstring
&
dump_path
const
HANDLE
process_handle
const
DWORD
process_id
const
DWORD
thread_id
const
DWORD
requesting_thread_id
EXCEPTION_POINTERS
*
exception_pointers
MDRawAssertionInfo
*
assert_info
const
MINIDUMP_TYPE
dump_type
const
bool
is_client_pointers
)
;
~
MinidumpGenerator
(
)
;
void
SetDumpFile
(
const
HANDLE
dump_file
)
{
dump_file_
=
dump_file
;
}
void
SetFullDumpFile
(
const
HANDLE
full_dump_file
)
{
full_dump_file_
=
full_dump_file
;
}
bool
GenerateDumpFile
(
std
:
:
wstring
*
dump_path
)
;
bool
GenerateFullDumpFile
(
std
:
:
wstring
*
full_dump_path
)
;
void
SetAdditionalStreams
(
MINIDUMP_USER_STREAM_INFORMATION
*
additional_streams
)
{
additional_streams_
=
additional_streams
;
}
void
SetCallback
(
MINIDUMP_CALLBACK_INFORMATION
*
callback_info
)
{
callback_info_
=
callback_info
;
}
bool
WriteMinidump
(
)
;
private
:
typedef
BOOL
(
WINAPI
*
MiniDumpWriteDumpType
)
(
HANDLE
hProcess
DWORD
ProcessId
HANDLE
hFile
MINIDUMP_TYPE
DumpType
CONST
PMINIDUMP_EXCEPTION_INFORMATION
ExceptionParam
CONST
PMINIDUMP_USER_STREAM_INFORMATION
UserStreamParam
CONST
PMINIDUMP_CALLBACK_INFORMATION
CallbackParam
)
;
typedef
RPC_STATUS
(
RPC_ENTRY
*
UuidCreateType
)
(
UUID
*
Uuid
)
;
HMODULE
GetDbghelpModule
(
)
;
MiniDumpWriteDumpType
GetWriteDump
(
)
;
HMODULE
GetRpcrt4Module
(
)
;
UuidCreateType
GetCreateUuid
(
)
;
bool
GenerateDumpFilePath
(
std
:
:
wstring
*
file_path
)
;
HMODULE
dbghelp_module_
;
MiniDumpWriteDumpType
write_dump_
;
HMODULE
rpcrt4_module_
;
UuidCreateType
create_uuid_
;
HANDLE
process_handle_
;
DWORD
process_id_
;
DWORD
thread_id_
;
DWORD
requesting_thread_id_
;
EXCEPTION_POINTERS
*
exception_pointers_
;
MDRawAssertionInfo
*
assert_info_
;
MINIDUMP_TYPE
dump_type_
;
bool
is_client_pointers_
;
std
:
:
wstring
dump_path_
;
HANDLE
dump_file_
;
HANDLE
full_dump_file_
;
bool
dump_file_is_internal_
;
bool
full_dump_file_is_internal_
;
MINIDUMP_USER_STREAM_INFORMATION
*
additional_streams_
;
MINIDUMP_CALLBACK_INFORMATION
*
callback_info_
;
CRITICAL_SECTION
module_load_sync_
;
CRITICAL_SECTION
get_proc_address_sync_
;
}
;
}
#
endif
