#
ifndef
CLIENT_LINUX_CRASH_GENERATION_CRASH_GENERATION_SERVER_H_
#
define
CLIENT_LINUX_CRASH_GENERATION_CRASH_GENERATION_SERVER_H_
#
include
<
pthread
.
h
>
#
include
<
array
>
#
include
<
functional
>
#
include
<
string
>
#
include
"
common
/
using_std_string
.
h
"
struct
DirectAuxvDumpInfo
;
namespace
google_breakpad
{
class
ClientInfo
;
class
CrashGenerationServer
{
public
:
using
OnClientDumpRequestCallback
=
void
(
const
ClientInfo
&
client_info
const
string
&
file_path
)
;
using
GetAuxvInfo
=
bool
(
pid_t
pid
DirectAuxvDumpInfo
*
)
;
CrashGenerationServer
(
const
int
listen_fd
std
:
:
function
<
GetAuxvInfo
>
get_auxv_info
std
:
:
function
<
OnClientDumpRequestCallback
>
dump_callback
const
string
*
dump_path
)
;
~
CrashGenerationServer
(
)
;
bool
Start
(
)
;
void
Stop
(
)
;
static
bool
CreateReportChannel
(
int
*
server_fd
int
*
client_fd
)
;
CrashGenerationServer
(
CrashGenerationServer
&
&
)
=
delete
;
CrashGenerationServer
&
operator
=
(
CrashGenerationServer
&
&
)
=
delete
;
CrashGenerationServer
(
const
CrashGenerationServer
&
)
=
delete
;
CrashGenerationServer
&
operator
=
(
const
CrashGenerationServer
&
)
=
delete
;
private
:
void
Run
(
)
;
bool
ClientEvent
(
short
revents
)
;
bool
ControlEvent
(
short
revents
)
;
bool
MakeMinidumpFilename
(
string
&
outFilename
)
;
void
ReserveFileDescriptors
(
)
;
void
ReleaseFileDescriptors
(
)
;
int
server_fd_
;
std
:
:
function
<
GetAuxvInfo
>
get_auxv_info_
;
std
:
:
function
<
OnClientDumpRequestCallback
>
dump_callback_
;
string
dump_dir_
;
bool
started_
;
pthread_t
thread_
;
int
control_pipe_in_
;
int
control_pipe_out_
;
static
const
size_t
RESERVED_FDS_NUM
=
2
;
std
:
:
array
<
int
RESERVED_FDS_NUM
>
reserved_fds_
;
}
;
}
#
endif
