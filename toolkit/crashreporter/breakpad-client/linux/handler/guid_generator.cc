#
include
"
linux
/
handler
/
guid_generator
.
h
"
#
include
<
assert
.
h
>
#
include
<
pthread
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
time
.
h
>
#
include
<
unistd
.
h
>
class
GUIDGenerator
{
public
:
static
uint16_t
BytesToUInt16
(
const
uint8_t
bytes
[
]
)
{
return
(
(
uint16_t
)
bytes
[
1
]
<
<
8
)
|
(
(
uint16_t
)
bytes
[
0
]
)
;
}
static
uint64_t
BytesToUInt48
(
const
uint8_t
bytes
[
]
)
{
return
(
(
uint64_t
)
bytes
[
0
]
<
<
40
)
|
(
(
uint64_t
)
bytes
[
1
]
<
<
32
)
|
(
(
uint64_t
)
bytes
[
2
]
<
<
24
)
|
(
(
uint64_t
)
bytes
[
3
]
<
<
16
)
|
(
(
uint64_t
)
bytes
[
4
]
<
<
8
)
|
(
uint64_t
)
bytes
[
5
]
;
}
static
void
UInt32ToBytes
(
uint8_t
bytes
[
]
uint32_t
n
)
{
bytes
[
0
]
=
n
&
0xff
;
bytes
[
1
]
=
(
n
>
>
8
)
&
0xff
;
bytes
[
2
]
=
(
n
>
>
16
)
&
0xff
;
bytes
[
3
]
=
(
n
>
>
24
)
&
0xff
;
}
static
bool
CreateGUID
(
GUID
*
guid
)
{
InitOnce
(
)
;
guid
-
>
data1
=
random
(
)
;
guid
-
>
data2
=
(
uint16_t
)
(
random
(
)
)
;
guid
-
>
data3
=
(
uint16_t
)
(
random
(
)
)
;
UInt32ToBytes
(
&
guid
-
>
data4
[
0
]
random
(
)
)
;
UInt32ToBytes
(
&
guid
-
>
data4
[
4
]
random
(
)
)
;
return
true
;
}
private
:
static
void
InitOnce
(
)
{
pthread_once
(
&
once_control
&
InitOnceImpl
)
;
}
static
void
InitOnceImpl
(
)
{
srandom
(
time
(
NULL
)
)
;
}
static
pthread_once_t
once_control
;
}
;
pthread_once_t
GUIDGenerator
:
:
once_control
=
PTHREAD_ONCE_INIT
;
bool
CreateGUID
(
GUID
*
guid
)
{
return
GUIDGenerator
:
:
CreateGUID
(
guid
)
;
}
bool
GUIDToString
(
const
GUID
*
guid
char
*
buf
size_t
buf_len
)
{
assert
(
buf_len
>
kGUIDStringLength
)
;
int
num
=
snprintf
(
buf
buf_len
kGUIDFormatString
guid
-
>
data1
guid
-
>
data2
guid
-
>
data3
GUIDGenerator
:
:
BytesToUInt16
(
&
(
guid
-
>
data4
[
0
]
)
)
GUIDGenerator
:
:
BytesToUInt48
(
&
(
guid
-
>
data4
[
2
]
)
)
)
;
if
(
num
!
=
kGUIDStringLength
)
return
false
;
buf
[
num
]
=
'
\
0
'
;
return
true
;
}
