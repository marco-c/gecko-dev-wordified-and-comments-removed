#
include
"
linux
/
log
/
log
.
h
"
#
if
defined
(
__ANDROID__
)
#
include
<
android
/
log
.
h
>
#
include
<
dlfcn
.
h
>
#
else
#
include
"
third_party
/
lss
/
linux_syscall_support
.
h
"
#
endif
namespace
logger
{
#
if
defined
(
__ANDROID__
)
namespace
{
using
AndroidLogBufferWriteFunc
=
int
(
*
)
(
int
bufID
int
prio
const
char
*
tag
const
char
*
text
)
;
const
int
kAndroidCrashLogId
=
4
;
const
char
kAndroidLogTag
[
]
=
"
google
-
breakpad
"
;
bool
g_crash_log_initialized
=
false
;
AndroidLogBufferWriteFunc
g_android_log_buf_write
=
nullptr
;
}
void
initializeCrashLogWriter
(
)
{
if
(
g_crash_log_initialized
)
return
;
g_android_log_buf_write
=
reinterpret_cast
<
AndroidLogBufferWriteFunc
>
(
dlsym
(
RTLD_DEFAULT
"
__android_log_buf_write
"
)
)
;
g_crash_log_initialized
=
true
;
}
int
writeToCrashLog
(
const
char
*
buf
)
{
if
(
g_android_log_buf_write
)
{
return
g_android_log_buf_write
(
kAndroidCrashLogId
ANDROID_LOG_FATAL
kAndroidLogTag
buf
)
;
}
return
__android_log_write
(
ANDROID_LOG_FATAL
kAndroidLogTag
buf
)
;
}
#
endif
int
write
(
const
char
*
buf
size_t
nbytes
)
{
#
if
defined
(
__ANDROID__
)
return
__android_log_write
(
ANDROID_LOG_WARN
kAndroidLogTag
buf
)
;
#
else
return
sys_write
(
2
buf
nbytes
)
;
#
endif
}
}
