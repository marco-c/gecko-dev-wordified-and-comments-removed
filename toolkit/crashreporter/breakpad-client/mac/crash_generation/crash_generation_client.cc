#
include
"
mac
/
crash_generation
/
crash_generation_client
.
h
"
#
include
"
mac
/
crash_generation
/
crash_generation_server
.
h
"
#
include
"
common
/
mac
/
MachIPC
.
h
"
#
include
"
mozilla
/
recordreplay
/
ChildIPC
.
h
"
namespace
google_breakpad
{
bool
CrashGenerationClient
:
:
RequestDumpForException
(
int
exception_type
int
exception_code
int
exception_subcode
mach_port_t
crashing_thread
mach_port_t
crashing_task
)
{
ReceivePort
acknowledge_port
;
MachSendMessage
message
(
kDumpRequestMessage
)
;
message
.
AddDescriptor
(
crashing_task
)
;
message
.
AddDescriptor
(
crashing_thread
)
;
message
.
AddDescriptor
(
MACH_PORT_NULL
)
;
message
.
AddDescriptor
(
acknowledge_port
.
GetPort
(
)
)
;
ExceptionInfo
info
;
info
.
exception_type
=
exception_type
;
info
.
exception_code
=
exception_code
;
info
.
exception_subcode
=
exception_subcode
;
info
.
child_pid
=
getpid
(
)
;
if
(
mozilla
:
:
recordreplay
:
:
IsRecording
(
)
)
{
info
.
child_pid
=
mozilla
:
:
recordreplay
:
:
child
:
:
MiddlemanProcessId
(
)
;
}
message
.
SetData
(
&
info
sizeof
(
info
)
)
;
const
mach_msg_timeout_t
kSendTimeoutMs
=
2
*
1000
;
kern_return_t
result
=
sender_
.
SendMessage
(
message
kSendTimeoutMs
)
;
if
(
result
!
=
KERN_SUCCESS
)
return
false
;
const
mach_msg_timeout_t
kReceiveTimeoutMs
=
5
*
1000
;
MachReceiveMessage
acknowledge_message
;
result
=
acknowledge_port
.
WaitForMessage
(
&
acknowledge_message
kReceiveTimeoutMs
)
;
return
result
=
=
KERN_SUCCESS
;
}
}
