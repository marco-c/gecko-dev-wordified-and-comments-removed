#
ifndef
CLIENT_MAC_GENERATOR_MINIDUMP_GENERATOR_H__
#
define
CLIENT_MAC_GENERATOR_MINIDUMP_GENERATOR_H__
#
include
<
mach
/
mach
.
h
>
#
include
<
TargetConditionals
.
h
>
#
include
<
string
>
#
include
"
mac
/
handler
/
ucontext_compat
.
h
"
#
include
"
minidump_file_writer
.
h
"
#
include
"
common
/
memory_allocator
.
h
"
#
include
"
common
/
mac
/
macho_utilities
.
h
"
#
include
"
google_breakpad
/
common
/
minidump_format
.
h
"
#
include
"
dynamic_images
.
h
"
#
include
"
mach_vm_compat
.
h
"
#
if
defined
(
__arm__
)
#
define
HAS_ARM_SUPPORT
#
elif
defined
(
__aarch64__
)
#
define
HAS_ARM64_SUPPORT
#
elif
defined
(
__i386__
)
|
|
defined
(
__x86_64__
)
#
define
HAS_X86_SUPPORT
#
endif
namespace
google_breakpad
{
using
std
:
:
string
;
#
if
__DARWIN_OPAQUE_ARM_THREAD_STATE64
#
define
ARRAY_REGISTER_FROM_THREADSTATE
(
a
b
i
)
(
(
a
)
-
>
__
#
#
b
[
i
]
)
#
define
GET_REGISTER_FROM_THREADSTATE_fp
(
a
)
\
(
reinterpret_cast
<
uintptr_t
>
(
(
a
)
-
>
__opaque_fp
)
)
#
define
GET_REGISTER_FROM_THREADSTATE_lr
(
a
)
\
(
reinterpret_cast
<
uintptr_t
>
(
(
a
)
-
>
__opaque_lr
)
)
#
define
GET_REGISTER_FROM_THREADSTATE_sp
(
a
)
\
(
reinterpret_cast
<
uintptr_t
>
(
(
a
)
-
>
__opaque_sp
)
)
#
define
GET_REGISTER_FROM_THREADSTATE_pc
(
a
)
\
(
reinterpret_cast
<
uintptr_t
>
(
(
a
)
-
>
__opaque_pc
)
)
#
define
GET_REGISTER_FROM_THREADSTATE_cpsr
(
a
)
(
(
a
)
-
>
__cpsr
)
#
define
GET_REGISTER_FROM_THREADSTATE_flags
(
a
)
(
(
a
)
-
>
__opaque_flags
)
#
define
REGISTER_FROM_THREADSTATE
(
a
b
)
(
GET_REGISTER_FROM_THREADSTATE_
#
#
b
(
a
)
)
#
elif
__DARWIN_UNIX03
|
|
TARGET_CPU_X86_64
|
|
TARGET_CPU_PPC64
|
|
TARGET_CPU_ARM
#
define
REGISTER_FROM_THREADSTATE
(
a
b
)
(
(
a
)
-
>
__
#
#
b
)
#
define
ARRAY_REGISTER_FROM_THREADSTATE
(
a
b
i
)
\
REGISTER_FROM_THREADSTATE
(
a
b
[
i
]
)
#
else
#
define
REGISTER_FROM_THREADSTATE
(
a
b
)
(
a
-
>
b
)
#
define
ARRAY_REGISTER_FROM_THREADSTATE
(
a
b
i
)
\
REGISTER_FROM_THREADSTATE
(
a
b
[
i
]
)
#
endif
#
ifdef
__LP64__
typedef
dyld_all_image_infos64
dyld_all_image_infos_self
;
#
else
typedef
dyld_all_image_infos32
dyld_all_image_infos_self
;
#
endif
class
MinidumpGenerator
{
public
:
MinidumpGenerator
(
)
;
MinidumpGenerator
(
mach_port_t
crashing_task
mach_port_t
handler_thread
)
;
virtual
~
MinidumpGenerator
(
)
;
static
string
UniqueNameInDirectory
(
const
string
&
dir
string
*
unique_name
)
;
bool
Write
(
const
char
*
path
)
;
void
SetExceptionInformation
(
int
type
int64_t
code
int64_t
subcode
mach_port_t
thread_name
)
{
exception_type_
=
type
;
exception_code_
=
code
;
exception_subcode_
=
subcode
;
exception_thread_
=
thread_name
;
}
void
SetTaskContext
(
breakpad_ucontext_t
*
task_context
)
;
static
void
GatherSystemInformation
(
)
;
static
uint64_t
GetCurrentProcessModuleSlide
(
breakpad_mach_header
*
mh
uint64_t
shared_cache_slide
)
;
void
GatherCurrentProcessDyldInformation
(
)
;
protected
:
virtual
bool
WriteExceptionStream
(
MDRawDirectory
*
exception_stream
)
;
virtual
bool
WriteThreadStream
(
mach_port_t
thread_id
MDRawThread
*
thread
)
;
private
:
typedef
bool
(
MinidumpGenerator
:
:
*
WriteStreamFN
)
(
MDRawDirectory
*
)
;
bool
WriteThreadListStream
(
MDRawDirectory
*
thread_list_stream
)
;
bool
WriteMemoryListStream
(
MDRawDirectory
*
memory_list_stream
)
;
bool
WriteSystemInfoStream
(
MDRawDirectory
*
system_info_stream
)
;
bool
WriteModuleListStream
(
MDRawDirectory
*
module_list_stream
)
;
bool
WriteMiscInfoStream
(
MDRawDirectory
*
misc_info_stream
)
;
bool
WriteBreakpadInfoStream
(
MDRawDirectory
*
breakpad_info_stream
)
;
bool
WriteCrashInfoStream
(
MDRawDirectory
*
crash_info_stream
)
;
bool
WriteBootargsStream
(
MDRawDirectory
*
bootargs_stream
)
;
bool
WriteThreadNamesStream
(
MDRawDirectory
*
thread_names_stream
)
;
uint64_t
CurrentPCForStack
(
breakpad_thread_state_data_t
state
)
;
bool
GetThreadState
(
thread_act_t
target_thread
thread_state_t
state
mach_msg_type_number_t
*
count
)
;
bool
WriteStackFromStartAddress
(
mach_vm_address_t
start_addr
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteStack
(
breakpad_thread_state_data_t
state
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteContext
(
breakpad_thread_state_data_t
state
MDLocationDescriptor
*
register_location
)
;
bool
WriteCVRecord
(
MDRawModule
*
module
int
cpu_type
int
cpu_subtype
const
char
*
module_path
bool
in_memory
bool
out_of_process
bool
dyld_or_in_dyld_shared_cache
)
;
bool
WriteModuleStream
(
unsigned
int
index
MDRawModule
*
module
)
;
bool
WriteCrashInfoRecord
(
MDLocationDescriptor
*
location
const
char
*
module_path
const
char
*
crash_info
unsigned
long
crash_info_size
bool
out_of_process
bool
dyld_or_in_dyld_shared_cache
)
;
bool
WriteThreadName
(
mach_port_t
thread_id
MDRawThreadName
*
thread_name
)
;
size_t
CalculateStackSize
(
mach_vm_address_t
start_addr
)
;
int
FindExecutableModule
(
)
;
bool
IsValidExcCrash
(
uint64_t
exception_code
)
;
void
RecoverExceptionDataFromExcCrash
(
uint64_t
exception_code
int
&
signal_number
)
;
#
ifdef
HAS_ARM_SUPPORT
bool
WriteStackARM
(
breakpad_thread_state_data_t
state
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteContextARM
(
breakpad_thread_state_data_t
state
MDLocationDescriptor
*
register_location
)
;
uint64_t
CurrentPCForStackARM
(
breakpad_thread_state_data_t
state
)
;
#
endif
#
ifdef
HAS_ARM64_SUPPORT
bool
WriteStackARM64
(
breakpad_thread_state_data_t
state
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteContextARM64
(
breakpad_thread_state_data_t
state
MDLocationDescriptor
*
register_location
)
;
uint64_t
CurrentPCForStackARM64
(
breakpad_thread_state_data_t
state
)
;
#
endif
#
ifdef
HAS_PPC_SUPPORT
bool
WriteStackPPC
(
breakpad_thread_state_data_t
state
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteContextPPC
(
breakpad_thread_state_data_t
state
MDLocationDescriptor
*
register_location
)
;
uint64_t
CurrentPCForStackPPC
(
breakpad_thread_state_data_t
state
)
;
bool
WriteStackPPC64
(
breakpad_thread_state_data_t
state
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteContextPPC64
(
breakpad_thread_state_data_t
state
MDLocationDescriptor
*
register_location
)
;
uint64_t
CurrentPCForStackPPC64
(
breakpad_thread_state_data_t
state
)
;
#
endif
#
ifdef
HAS_X86_SUPPORT
bool
WriteStackX86
(
breakpad_thread_state_data_t
state
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteContextX86
(
breakpad_thread_state_data_t
state
MDLocationDescriptor
*
register_location
)
;
uint64_t
CurrentPCForStackX86
(
breakpad_thread_state_data_t
state
)
;
bool
WriteStackX86_64
(
breakpad_thread_state_data_t
state
MDMemoryDescriptor
*
stack_location
)
;
bool
WriteContextX86_64
(
breakpad_thread_state_data_t
state
MDLocationDescriptor
*
register_location
)
;
uint64_t
CurrentPCForStackX86_64
(
breakpad_thread_state_data_t
state
)
;
#
endif
explicit
MinidumpGenerator
(
const
MinidumpGenerator
&
)
;
void
operator
=
(
const
MinidumpGenerator
&
)
;
protected
:
MinidumpFileWriter
writer_
;
private
:
int
exception_type_
;
int64_t
exception_code_
;
int64_t
exception_subcode_
;
mach_port_t
exception_thread_
;
mach_port_t
crashing_task_
;
mach_port_t
handler_thread_
;
cpu_type_t
cpu_type_
;
static
char
build_string_
[
16
]
;
static
int
os_major_version_
;
static
int
os_minor_version_
;
static
int
os_build_number_
;
breakpad_mach_header
*
dyldImageLoadAddress_
;
ptrdiff_t
dyldSlide_
;
string
dyldPath_
;
breakpad_ucontext_t
*
task_context_
;
DynamicImages
*
dynamic_images_
;
mutable
PageAllocator
allocator_
;
protected
:
wasteful_vector
<
MDMemoryDescriptor
>
memory_blocks_
;
}
;
}
#
endif
