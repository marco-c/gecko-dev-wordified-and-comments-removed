pub
type
TaskFn
<
T
>
=
Box
<
dyn
FnOnce
(
&
T
)
+
Send
+
'
static
>
;
pub
struct
AsyncTask
<
T
>
{
send
:
Box
<
dyn
Fn
(
TaskFn
<
T
>
)
+
Send
+
Sync
>
}
impl
<
T
>
AsyncTask
<
T
>
{
pub
fn
new
<
F
:
Fn
(
TaskFn
<
T
>
)
+
Send
+
Sync
+
'
static
>
(
send
:
F
)
-
>
Self
{
AsyncTask
{
send
:
Box
:
:
new
(
send
)
}
}
pub
fn
push
<
F
:
FnOnce
(
&
T
)
+
Send
+
'
static
>
(
&
self
f
:
F
)
{
(
self
.
send
)
(
Box
:
:
new
(
f
)
)
;
}
pub
fn
wait
<
R
:
Send
+
'
static
F
:
FnOnce
(
&
T
)
-
>
R
+
Send
+
'
static
>
(
&
self
f
:
F
)
-
>
R
{
let
(
tx
rx
)
=
std
:
:
sync
:
:
mpsc
:
:
sync_channel
(
0
)
;
self
.
push
(
move
|
v
|
tx
.
send
(
f
(
v
)
)
.
unwrap
(
)
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
}
