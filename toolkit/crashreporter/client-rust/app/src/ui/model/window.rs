use
super
:
:
{
Element
ElementBuilder
TypedElement
}
;
use
crate
:
:
data
:
:
Event
;
#
[
derive
(
Debug
Default
)
]
pub
struct
Window
{
pub
title
:
String
pub
content
:
Option
<
Box
<
Element
>
>
pub
children
:
Vec
<
TypedElement
<
Self
>
>
pub
modal
:
bool
pub
close
:
Option
<
Event
<
(
)
>
>
}
impl
ElementBuilder
<
Window
>
{
pub
fn
title
(
&
mut
self
s
:
impl
Into
<
String
>
)
{
self
.
element_type
.
title
=
s
.
into
(
)
;
}
pub
fn
modal
(
&
mut
self
value
:
bool
)
{
self
.
element_type
.
modal
=
value
;
}
pub
fn
close_when
(
&
mut
self
event
:
&
Event
<
(
)
>
)
{
self
.
element_type
.
close
=
Some
(
event
.
clone
(
)
)
;
}
pub
fn
child_window
(
&
mut
self
window
:
TypedElement
<
Window
>
)
{
self
.
element_type
.
children
.
push
(
window
)
;
}
pub
fn
add_child
(
&
mut
self
child
:
Element
)
{
Self
:
:
single_child
(
&
mut
self
.
element_type
.
content
child
)
;
}
}
