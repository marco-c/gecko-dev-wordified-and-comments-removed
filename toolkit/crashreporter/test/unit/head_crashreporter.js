var
{
utils
:
Cu
classes
:
Cc
interfaces
:
Ci
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
AppData
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
function
getEventDir
(
)
{
return
OS
.
Path
.
join
(
do_get_tempdir
(
)
.
path
"
crash
-
events
"
)
;
}
function
do_crash
(
setup
callback
canReturnZero
)
{
let
bin
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Components
.
interfaces
.
nsIFile
)
;
if
(
!
bin
.
exists
(
)
)
{
do_throw
(
"
Can
'
t
find
xpcshell
binary
!
"
)
;
}
let
greD
=
Services
.
dirsvc
.
get
(
"
GreD
"
Components
.
interfaces
.
nsIFile
)
;
let
headfile
=
do_get_file
(
"
crasher_subprocess_head
.
js
"
)
;
let
tailfile
=
do_get_file
(
"
crasher_subprocess_tail
.
js
"
)
;
let
process
=
Components
.
classes
[
"
mozilla
.
org
/
process
/
util
;
1
"
]
.
createInstance
(
Components
.
interfaces
.
nsIProcess
)
;
process
.
init
(
bin
)
;
let
args
=
[
"
-
g
"
greD
.
path
"
-
f
"
headfile
.
path
]
;
if
(
setup
)
{
if
(
typeof
(
setup
)
=
=
"
function
"
)
setup
=
"
(
"
+
setup
.
toSource
(
)
+
"
)
(
)
;
"
;
args
.
push
(
"
-
e
"
setup
)
;
}
args
.
push
(
"
-
f
"
tailfile
.
path
)
;
let
env
=
Components
.
classes
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIEnvironment
)
;
let
crashD
=
do_get_tempdir
(
)
;
crashD
.
append
(
"
crash
-
events
"
)
;
if
(
!
crashD
.
exists
(
)
)
{
crashD
.
create
(
crashD
.
DIRECTORY_TYPE
0o700
)
;
}
env
.
set
(
"
CRASHES_EVENTS_DIR
"
crashD
.
path
)
;
try
{
process
.
run
(
true
args
args
.
length
)
;
}
catch
(
ex
)
{
}
finally
{
env
.
set
(
"
CRASHES_EVENTS_DIR
"
"
"
)
;
}
if
(
!
canReturnZero
)
{
do_check_neq
(
process
.
exitValue
0
)
;
}
handleMinidump
(
callback
)
;
}
function
getMinidump
(
)
{
let
en
=
do_get_tempdir
(
)
.
directoryEntries
;
while
(
en
.
hasMoreElements
(
)
)
{
let
f
=
en
.
getNext
(
)
.
QueryInterface
(
Components
.
interfaces
.
nsIFile
)
;
if
(
f
.
leafName
.
substr
(
-
4
)
=
=
"
.
dmp
"
)
{
return
f
;
}
}
return
null
;
}
function
runMinidumpAnalyzer
(
dumpFile
additionalArgs
)
{
if
(
AppConstants
.
platform
!
=
=
"
win
"
)
{
return
;
}
let
bin
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
;
ok
(
bin
&
&
bin
.
exists
(
)
)
;
bin
=
bin
.
parent
;
ok
(
bin
&
&
bin
.
exists
(
)
)
;
bin
.
append
(
"
minidump
-
analyzer
.
exe
"
)
;
ok
(
bin
.
exists
(
)
)
;
let
process
=
Cc
[
"
mozilla
.
org
/
process
/
util
;
1
"
]
.
createInstance
(
Ci
.
nsIProcess
)
;
process
.
init
(
bin
)
;
let
args
=
[
]
;
if
(
additionalArgs
)
{
args
=
args
.
concat
(
additionalArgs
)
;
}
args
.
push
(
dumpFile
.
path
)
;
process
.
run
(
true
args
args
.
length
)
;
}
function
handleMinidump
(
callback
)
{
let
minidump
=
getMinidump
(
)
;
if
(
minidump
=
=
null
)
{
do_throw
(
"
No
minidump
found
!
"
)
;
}
let
extrafile
=
minidump
.
clone
(
)
;
extrafile
.
leafName
=
extrafile
.
leafName
.
slice
(
0
-
4
)
+
"
.
extra
"
;
let
memoryfile
=
minidump
.
clone
(
)
;
memoryfile
.
leafName
=
memoryfile
.
leafName
.
slice
(
0
-
4
)
+
"
.
memory
.
json
.
gz
"
;
do_register_cleanup
(
function
(
)
{
if
(
minidump
.
exists
(
)
)
{
minidump
.
remove
(
false
)
;
}
if
(
extrafile
.
exists
(
)
)
{
extrafile
.
remove
(
false
)
;
}
if
(
memoryfile
.
exists
(
)
)
{
memoryfile
.
remove
(
false
)
;
}
}
)
;
do_check_true
(
extrafile
.
exists
(
)
)
;
let
extra
=
parseKeyValuePairsFromFile
(
extrafile
)
;
if
(
callback
)
{
callback
(
minidump
extra
extrafile
)
;
}
if
(
minidump
.
exists
(
)
)
{
minidump
.
remove
(
false
)
;
}
if
(
extrafile
.
exists
(
)
)
{
extrafile
.
remove
(
false
)
;
}
if
(
memoryfile
.
exists
(
)
)
{
memoryfile
.
remove
(
false
)
;
}
}
function
do_content_crash
(
setup
callback
)
{
do_load_child_test_harness
(
)
;
do_test_pending
(
)
;
let
crashReporter
=
Components
.
classes
[
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsICrashReporter
)
;
crashReporter
.
minidumpPath
=
do_get_tempdir
(
)
;
let
headfile
=
do_get_file
(
"
.
.
/
unit
/
crasher_subprocess_head
.
js
"
)
;
let
tailfile
=
do_get_file
(
"
.
.
/
unit
/
crasher_subprocess_tail
.
js
"
)
;
if
(
setup
)
{
if
(
typeof
(
setup
)
=
=
"
function
"
)
{
setup
=
"
(
"
+
setup
.
toSource
(
)
+
"
)
(
)
;
"
;
}
}
let
handleCrash
=
function
(
)
{
let
id
=
getMinidump
(
)
.
leafName
.
slice
(
0
-
4
)
;
Services
.
crashmanager
.
ensureCrashIsPresent
(
id
)
.
then
(
(
)
=
>
{
try
{
handleMinidump
(
callback
)
;
}
catch
(
x
)
{
do_report_unexpected_exception
(
x
)
;
}
do_test_finished
(
)
;
}
)
;
}
;
do_get_profile
(
)
;
makeFakeAppDir
(
)
.
then
(
(
)
=
>
{
sendCommand
(
"
load
(
\
"
"
+
headfile
.
path
.
replace
(
/
\
\
/
g
"
/
"
)
+
"
\
"
)
;
"
(
)
=
>
sendCommand
(
setup
(
)
=
>
sendCommand
(
"
load
(
\
"
"
+
tailfile
.
path
.
replace
(
/
\
\
/
g
"
/
"
)
+
"
\
"
)
;
"
(
)
=
>
do_execute_soon
(
handleCrash
)
)
)
)
;
}
)
;
}
function
do_triggered_content_crash
(
trigger
callback
)
{
do_load_child_test_harness
(
)
;
do_test_pending
(
)
;
let
crashReporter
=
Components
.
classes
[
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsICrashReporter
)
;
crashReporter
.
minidumpPath
=
do_get_tempdir
(
)
;
let
headfile
=
do_get_file
(
"
.
.
/
unit
/
crasher_subprocess_head
.
js
"
)
;
if
(
trigger
)
{
if
(
typeof
(
trigger
)
=
=
"
function
"
)
{
trigger
=
"
(
"
+
trigger
.
toSource
(
)
+
"
)
(
)
;
"
;
}
}
let
handleCrash
=
function
(
)
{
let
id
=
getMinidump
(
)
.
leafName
.
slice
(
0
-
4
)
;
Services
.
crashmanager
.
ensureCrashIsPresent
(
id
)
.
then
(
(
)
=
>
{
try
{
handleMinidump
(
callback
)
;
}
catch
(
x
)
{
do_report_unexpected_exception
(
x
)
;
}
do_test_finished
(
)
;
}
)
;
}
;
do_get_profile
(
)
;
makeFakeAppDir
(
)
.
then
(
(
)
=
>
{
sendCommand
(
"
load
(
\
"
"
+
headfile
.
path
.
replace
(
/
\
\
/
g
"
/
"
)
+
"
\
"
)
;
"
(
)
=
>
sendCommand
(
trigger
(
)
=
>
do_execute_soon
(
handleCrash
)
)
)
;
}
)
;
}
Components
.
utils
.
import
(
"
resource
:
/
/
test
/
CrashTestUtils
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
KeyValueParser
.
jsm
"
)
;
