"
use
strict
"
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
add_task
(
async
function
test_cpu_microcode_version_annotation
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
}
async
function
(
browser
)
{
let
annotations
=
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
ok
(
"
CPUMicrocodeVersion
"
in
annotations
"
contains
CPU
microcode
version
"
)
;
}
)
;
}
)
;
}
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
add_task
(
async
function
test_sandbox_violation_is_sigsys
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
}
async
function
(
browser
)
{
let
annotations
=
await
BrowserTestUtils
.
crashFrame
(
browser
true
true
null
{
crashType
:
"
CRASH_SYSCALL
"
}
)
;
Assert
.
equal
(
annotations
.
StackTraces
.
crash_info
.
type
"
SIGSYS
"
"
The
crash
type
is
SIGSYS
"
)
;
function
chroot_syscall_number
(
)
{
switch
(
Services
.
sysinfo
.
get
(
"
arch
"
)
)
{
case
"
x86
-
64
"
:
return
"
0xa1
"
;
case
"
aarch64
"
:
return
"
0x33
"
;
default
:
return
"
0x3d
"
;
}
}
Assert
.
equal
(
annotations
.
StackTraces
.
crash_info
.
address
chroot_syscall_number
(
)
"
The
address
corresponds
to
the
chroot
(
)
syscall
number
"
)
;
}
)
;
}
)
;
}
