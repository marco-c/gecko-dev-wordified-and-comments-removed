function
cleanup_and_finish
(
)
{
try
{
cleanup_fake_appdir
(
)
;
}
catch
(
ex
)
{
}
Services
.
prefs
.
clearUserPref
(
"
breakpad
.
reportURL
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
.
then
(
finish
)
;
}
function
check_crash_list
(
crashes
)
{
let
doc
=
content
.
document
;
let
crashlinks
=
doc
.
getElementsByClassName
(
"
crashReport
"
)
;
Assert
.
equal
(
crashlinks
.
length
crashes
.
length
"
about
:
crashes
lists
correct
number
of
crash
reports
"
)
;
if
(
crashlinks
.
length
=
=
crashes
.
length
)
{
for
(
let
i
=
0
;
i
<
crashes
.
length
;
i
+
+
)
{
Assert
.
equal
(
crashlinks
[
i
]
.
id
crashes
[
i
]
.
id
i
+
"
:
crash
ID
is
correct
"
)
;
if
(
crashes
[
i
]
.
pending
)
{
Assert
.
equal
(
crashlinks
[
i
]
.
getAttribute
(
"
href
"
)
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
about
/
throttling
"
"
pending
URL
links
to
the
correct
static
page
"
)
;
}
}
}
}
function
check_submit_pending
(
tab
crashes
)
{
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
let
SubmittedCrash
=
null
;
let
CrashID
=
null
;
let
CrashURL
=
null
;
function
csp_onload
(
)
{
ok
(
true
'
got
submission
onload
'
)
;
ContentTask
.
spawn
(
browser
null
function
(
)
{
let
CrashID
=
content
.
location
.
search
.
split
(
"
=
"
)
[
1
]
;
let
CrashURL
=
content
.
location
.
toString
(
)
;
let
result
=
JSON
.
parse
(
content
.
document
.
documentElement
.
textContent
)
;
Assert
.
equal
(
result
.
upload_file_minidump
"
MDMP
"
"
minidump
file
sent
properly
"
)
;
Assert
.
equal
(
result
.
memory_report
"
Let
'
s
pretend
this
is
a
memory
report
"
"
memory
report
sent
properly
"
)
;
Assert
.
equal
(
+
result
.
Throttleable
0
"
correctly
sent
as
non
-
throttleable
"
)
;
delete
result
.
upload_file_minidump
;
delete
result
.
memory_report
;
delete
result
.
Throttleable
;
return
{
id
:
CrashID
url
:
CrashURL
result
}
;
}
)
.
then
(
(
{
id
url
result
}
)
=
>
{
delete
SubmittedCrash
.
extra
.
ServerURL
;
CrashID
=
id
;
CrashURL
=
url
;
for
(
let
x
in
result
)
{
if
(
x
in
SubmittedCrash
.
extra
)
is
(
result
[
x
]
SubmittedCrash
.
extra
[
x
]
"
submitted
value
for
"
+
x
+
"
matches
expected
"
)
;
else
ok
(
false
"
property
"
+
x
+
"
missing
from
submitted
data
!
"
)
;
}
for
(
let
y
in
SubmittedCrash
.
extra
)
{
if
(
!
(
y
in
result
)
)
ok
(
false
"
property
"
+
y
+
"
missing
from
result
data
!
"
)
;
}
BrowserTestUtils
.
waitForEvent
(
browser
"
pageshow
"
true
)
.
then
(
csp_pageshow
)
;
browser
.
goBack
(
)
;
}
)
;
}
function
csp_fail
(
)
{
browser
.
removeEventListener
(
"
CrashSubmitFailed
"
csp_fail
true
)
;
ok
(
false
"
failed
to
submit
crash
report
!
"
)
;
cleanup_and_finish
(
)
;
}
browser
.
addEventListener
(
"
CrashSubmitFailed
"
csp_fail
true
)
;
BrowserTestUtils
.
browserLoaded
(
browser
false
(
url
)
=
>
url
!
=
=
"
about
:
crashes
"
)
.
then
(
csp_onload
)
;
function
csp_pageshow
(
)
{
ContentTask
.
spawn
(
browser
{
CrashID
CrashURL
}
function
(
{
CrashID
CrashURL
}
)
{
Assert
.
equal
(
content
.
location
.
href
"
about
:
crashes
"
"
navigated
back
successfully
"
)
;
let
link
=
content
.
document
.
getElementById
(
CrashID
)
;
Assert
.
notEqual
(
link
null
"
crash
report
link
changed
correctly
"
)
;
if
(
link
)
Assert
.
equal
(
link
.
href
CrashURL
"
crash
report
link
points
to
correct
href
"
)
;
}
)
.
then
(
cleanup_and_finish
)
;
}
for
(
let
crash
of
crashes
)
{
if
(
crash
.
pending
)
{
SubmittedCrash
=
crash
;
break
;
}
}
ContentTask
.
spawn
(
browser
SubmittedCrash
.
id
function
(
id
)
{
let
link
=
content
.
document
.
getElementById
(
id
)
;
link
.
click
(
)
;
}
)
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
let
appD
=
make_fake_appdir
(
)
;
let
crD
=
appD
.
clone
(
)
;
crD
.
append
(
"
Crash
Reports
"
)
;
let
crashes
=
add_fake_crashes
(
crD
1
)
;
crashes
.
push
(
addPendingCrashreport
(
crD
crashes
[
crashes
.
length
-
1
]
.
date
+
60000
{
'
ServerURL
'
:
'
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
test
/
browser
/
crashreport
.
sjs
'
'
ProductName
'
:
'
Test
App
'
'
Foo
'
:
'
ABC
=
XYZ
'
}
)
)
;
crashes
.
sort
(
(
a
b
)
=
>
b
.
date
-
a
.
date
)
;
Services
.
prefs
.
setCharPref
(
"
breakpad
.
reportURL
"
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
test
/
browser
/
crashreport
.
sjs
?
id
=
"
)
;
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
crashes
"
)
.
then
(
(
tab
)
=
>
{
ContentTask
.
spawn
(
tab
.
linkedBrowser
crashes
check_crash_list
)
.
then
(
(
)
=
>
check_submit_pending
(
tab
crashes
)
)
;
}
)
;
}
