#
include
"
ThreadAnnotation
.
h
"
#
include
<
string
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
mozilla
:
:
Monitor
;
using
mozilla
:
:
MonitorAutoLock
;
namespace
CrashReporter
{
namespace
{
TEST
(
TestCrashThreadAnnotation
TestInitShutdown
)
{
InitThreadAnnotation
(
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestNestedInitShutdown
)
{
InitThreadAnnotation
(
)
;
InitThreadAnnotation
(
)
;
ShutdownThreadAnnotation
(
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestUnbalancedInit
)
{
InitThreadAnnotation
(
)
;
InitThreadAnnotation
(
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestUnbalancedShutdown
)
{
InitThreadAnnotation
(
)
;
ShutdownThreadAnnotation
(
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestGetFlatThreadAnnotation_BeforeInit
)
{
std
:
:
function
<
void
(
const
char
*
)
>
getThreadAnnotationCB
=
[
&
]
(
const
char
*
aAnnotation
)
-
>
void
{
ASSERT_STREQ
(
aAnnotation
"
"
)
;
}
;
GetFlatThreadAnnotation
(
getThreadAnnotationCB
)
;
}
TEST
(
TestCrashThreadAnnotation
TestGetFlatThreadAnnotation_AfterShutdown
)
{
InitThreadAnnotation
(
)
;
ShutdownThreadAnnotation
(
)
;
std
:
:
function
<
void
(
const
char
*
)
>
getThreadAnnotationCB
=
[
&
]
(
const
char
*
aAnnotation
)
-
>
void
{
ASSERT_STREQ
(
aAnnotation
"
"
)
;
}
;
GetFlatThreadAnnotation
(
getThreadAnnotationCB
)
;
}
already_AddRefed
<
nsIThread
>
CreateTestThread
(
const
char
*
aName
Monitor
&
aMonitor
bool
&
aDone
)
{
nsCOMPtr
<
nsIRunnable
>
setNameRunnable
=
NS_NewRunnableFunction
(
[
aName
&
aMonitor
&
aDone
]
(
)
-
>
void
{
NS_SetCurrentThreadName
(
aName
)
;
MonitorAutoLock
lock
(
aMonitor
)
;
aDone
=
true
;
aMonitor
.
NotifyAll
(
)
;
}
)
;
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewThread
(
getter_AddRefs
(
thread
)
setNameRunnable
)
;
mozilla
:
:
Unused
<
<
rv
;
return
thread
.
forget
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestGetFlatThreadAnnotation_OneThread
)
{
InitThreadAnnotation
(
)
;
Monitor
monitor
(
"
TestCrashThreadAnnotation
"
)
;
bool
threadNameSet
=
false
;
nsCOMPtr
<
nsIThread
>
thread
=
CreateTestThread
(
"
Thread1
"
monitor
threadNameSet
)
;
ASSERT_TRUE
(
!
!
thread
)
;
{
MonitorAutoLock
lock
(
monitor
)
;
while
(
!
threadNameSet
)
{
monitor
.
Wait
(
)
;
}
}
std
:
:
function
<
void
(
const
char
*
)
>
getThreadAnnotationCB
=
[
&
]
(
const
char
*
aAnnotation
)
-
>
void
{
ASSERT_TRUE
(
!
!
strstr
(
aAnnotation
"
Thread1
"
)
)
;
}
;
GetFlatThreadAnnotation
(
getThreadAnnotationCB
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestGetFlatThreadAnnotation_SetNameTwice
)
{
InitThreadAnnotation
(
)
;
Monitor
monitor
(
"
TestCrashThreadAnnotation
"
)
;
bool
threadNameSet
=
false
;
nsCOMPtr
<
nsIRunnable
>
setNameRunnable
=
NS_NewRunnableFunction
(
[
&
]
(
)
-
>
void
{
NS_SetCurrentThreadName
(
"
Thread1
"
)
;
NS_SetCurrentThreadName
(
"
Thread1Again
"
)
;
MonitorAutoLock
lock
(
monitor
)
;
threadNameSet
=
true
;
monitor
.
NotifyAll
(
)
;
}
)
;
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewThread
(
getter_AddRefs
(
thread
)
setNameRunnable
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
{
MonitorAutoLock
lock
(
monitor
)
;
while
(
!
threadNameSet
)
{
monitor
.
Wait
(
)
;
}
}
std
:
:
function
<
void
(
const
char
*
)
>
getThreadAnnotationCB
=
[
&
]
(
const
char
*
aAnnotation
)
-
>
void
{
ASSERT_TRUE
(
!
!
strstr
(
aAnnotation
"
Thread1Again
"
)
)
;
}
;
GetFlatThreadAnnotation
(
getThreadAnnotationCB
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestGetFlatThreadAnnotation_TwoThreads
)
{
InitThreadAnnotation
(
)
;
Monitor
monitor
(
"
TestCrashThreadAnnotation
"
)
;
bool
thread1NameSet
=
false
;
bool
thread2NameSet
=
false
;
nsCOMPtr
<
nsIThread
>
thread1
=
CreateTestThread
(
"
Thread1
"
monitor
thread1NameSet
)
;
ASSERT_TRUE
(
!
!
thread1
)
;
nsCOMPtr
<
nsIThread
>
thread2
=
CreateTestThread
(
"
Thread2
"
monitor
thread2NameSet
)
;
ASSERT_TRUE
(
!
!
thread2
)
;
{
MonitorAutoLock
lock
(
monitor
)
;
while
(
!
(
thread1NameSet
&
&
thread2NameSet
)
)
{
monitor
.
Wait
(
)
;
}
}
std
:
:
function
<
void
(
const
char
*
)
>
getThreadAnnotationCB
=
[
&
]
(
const
char
*
aAnnotation
)
-
>
void
{
ASSERT_TRUE
(
!
!
strstr
(
aAnnotation
"
Thread1
"
)
)
;
ASSERT_TRUE
(
!
!
strstr
(
aAnnotation
"
Thread2
"
)
)
;
}
;
GetFlatThreadAnnotation
(
getThreadAnnotationCB
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestGetFlatThreadAnnotation_ShutdownOneThread
)
{
InitThreadAnnotation
(
)
;
Monitor
monitor
(
"
TestCrashThreadAnnotation
"
)
;
bool
thread1NameSet
=
false
;
bool
thread2NameSet
=
false
;
nsCOMPtr
<
nsIThread
>
thread1
=
CreateTestThread
(
"
Thread1
"
monitor
thread1NameSet
)
;
ASSERT_TRUE
(
!
!
thread1
)
;
nsCOMPtr
<
nsIThread
>
thread2
=
CreateTestThread
(
"
Thread2
"
monitor
thread2NameSet
)
;
ASSERT_TRUE
(
!
!
thread2
)
;
{
MonitorAutoLock
lock
(
monitor
)
;
while
(
!
(
thread1NameSet
&
&
thread2NameSet
)
)
{
monitor
.
Wait
(
)
;
}
}
nsresult
rv
=
thread1
-
>
Shutdown
(
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
std
:
:
function
<
void
(
const
char
*
)
>
getThreadAnnotationCB
=
[
&
]
(
const
char
*
aAnnotation
)
-
>
void
{
ASSERT_TRUE
(
!
strstr
(
aAnnotation
"
Thread1
"
)
)
;
ASSERT_TRUE
(
!
!
strstr
(
aAnnotation
"
Thread2
"
)
)
;
}
;
GetFlatThreadAnnotation
(
getThreadAnnotationCB
)
;
ShutdownThreadAnnotation
(
)
;
}
TEST
(
TestCrashThreadAnnotation
TestGetFlatThreadAnnotation_ShutdownBothThreads
)
{
InitThreadAnnotation
(
)
;
Monitor
monitor
(
"
TestCrashThreadAnnotation
"
)
;
bool
thread1NameSet
=
false
;
bool
thread2NameSet
=
false
;
nsCOMPtr
<
nsIThread
>
thread1
=
CreateTestThread
(
"
Thread1
"
monitor
thread1NameSet
)
;
ASSERT_TRUE
(
!
!
thread1
)
;
nsCOMPtr
<
nsIThread
>
thread2
=
CreateTestThread
(
"
Thread2
"
monitor
thread2NameSet
)
;
ASSERT_TRUE
(
!
!
thread2
)
;
{
MonitorAutoLock
lock
(
monitor
)
;
while
(
!
(
thread1NameSet
&
&
thread2NameSet
)
)
{
monitor
.
Wait
(
)
;
}
}
nsresult
rv
=
thread1
-
>
Shutdown
(
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
thread2
-
>
Shutdown
(
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
std
:
:
function
<
void
(
const
char
*
)
>
getThreadAnnotationCB
=
[
&
]
(
const
char
*
aAnnotation
)
-
>
void
{
ASSERT_STREQ
(
aAnnotation
"
"
)
;
}
;
GetFlatThreadAnnotation
(
getThreadAnnotationCB
)
;
ShutdownThreadAnnotation
(
)
;
}
}
}
