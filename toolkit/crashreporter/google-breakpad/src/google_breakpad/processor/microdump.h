#
ifndef
GOOGLE_BREAKPAD_PROCESSOR_MICRODUMP_H__
#
define
GOOGLE_BREAKPAD_PROCESSOR_MICRODUMP_H__
#
include
<
string
>
#
include
<
vector
>
#
include
"
common
/
scoped_ptr
.
h
"
#
include
"
common
/
using_std_string
.
h
"
#
include
"
google_breakpad
/
processor
/
dump_context
.
h
"
#
include
"
google_breakpad
/
processor
/
memory_region
.
h
"
#
include
"
google_breakpad
/
processor
/
system_info
.
h
"
#
include
"
processor
/
basic_code_modules
.
h
"
namespace
google_breakpad
{
class
MicrodumpModules
:
public
BasicCodeModules
{
public
:
void
Add
(
const
CodeModule
*
module
)
;
}
;
class
MicrodumpContext
:
public
DumpContext
{
public
:
virtual
void
SetContextARM
(
MDRawContextARM
*
arm
)
;
virtual
void
SetContextARM64
(
MDRawContextARM64
*
arm64
)
;
}
;
class
MicrodumpMemoryRegion
:
public
MemoryRegion
{
public
:
MicrodumpMemoryRegion
(
)
;
virtual
~
MicrodumpMemoryRegion
(
)
{
}
void
Init
(
uint64_t
base_address
const
std
:
:
vector
<
uint8_t
>
&
contents
)
;
virtual
uint64_t
GetBase
(
)
const
;
virtual
uint32_t
GetSize
(
)
const
;
virtual
bool
GetMemoryAtAddress
(
uint64_t
address
uint8_t
*
value
)
const
;
virtual
bool
GetMemoryAtAddress
(
uint64_t
address
uint16_t
*
value
)
const
;
virtual
bool
GetMemoryAtAddress
(
uint64_t
address
uint32_t
*
value
)
const
;
virtual
bool
GetMemoryAtAddress
(
uint64_t
address
uint64_t
*
value
)
const
;
virtual
void
Print
(
)
const
;
private
:
template
<
typename
ValueType
>
bool
GetMemoryLittleEndian
(
uint64_t
address
ValueType
*
value
)
const
;
uint64_t
base_address_
;
std
:
:
vector
<
uint8_t
>
contents_
;
}
;
class
Microdump
{
public
:
explicit
Microdump
(
const
string
&
contents
)
;
virtual
~
Microdump
(
)
{
}
DumpContext
*
GetContext
(
)
{
return
context_
.
get
(
)
;
}
MicrodumpMemoryRegion
*
GetMemory
(
)
{
return
stack_region_
.
get
(
)
;
}
MicrodumpModules
*
GetModules
(
)
{
return
modules_
.
get
(
)
;
}
SystemInfo
*
GetSystemInfo
(
)
{
return
system_info_
.
get
(
)
;
}
private
:
scoped_ptr
<
MicrodumpContext
>
context_
;
scoped_ptr
<
MicrodumpMemoryRegion
>
stack_region_
;
scoped_ptr
<
MicrodumpModules
>
modules_
;
scoped_ptr
<
SystemInfo
>
system_info_
;
}
;
}
#
endif
