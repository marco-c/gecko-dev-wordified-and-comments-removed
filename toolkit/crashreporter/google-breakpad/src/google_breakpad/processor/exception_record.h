#
ifndef
THIRD_PARTY_BREAKPAD_SRC_GOOGLE_BREAKPAD_PROCESSOR_EXCEPTION_RECORD_H_
#
define
THIRD_PARTY_BREAKPAD_SRC_GOOGLE_BREAKPAD_PROCESSOR_EXCEPTION_RECORD_H_
#
include
<
vector
>
namespace
google_breakpad
{
class
ExceptionParameter
{
public
:
ExceptionParameter
(
uint64_t
value
const
string
&
description
)
:
value_
(
value
)
description_
(
description
)
{
}
uint64_t
value
(
)
const
{
return
value_
;
}
void
set_value
(
uint64_t
value
)
{
value_
=
value
;
}
const
string
&
description
(
)
const
{
return
description_
;
}
void
set_description
(
const
string
&
description
)
{
description_
=
description
;
}
private
:
uint64_t
value_
;
string
description_
;
}
;
class
ExceptionRecord
{
public
:
uint32_t
code
(
)
const
{
return
code_
;
}
const
string
&
code_description
(
)
const
{
return
code_description_
;
}
void
set_code
(
uint32_t
code
const
string
&
description
)
{
code_
=
code
;
code_description_
=
description
;
}
uint32_t
flags
(
)
const
{
return
flags_
;
}
const
string
&
flags_description
(
)
const
{
return
flags_description_
;
}
void
set_flags
(
uint32_t
flags
const
string
&
description
)
{
flags_
=
flags
;
flags_description_
=
description
;
}
uint64_t
nested_exception_record_address
(
)
const
{
return
nested_exception_record_address_
;
}
void
set_nested_exception_record_address
(
uint64_t
nested_exception_record_address
)
{
nested_exception_record_address_
=
nested_exception_record_address
;
}
uint64_t
address
(
)
const
{
return
address_
;
}
void
set_address
(
uint64_t
address
)
{
address_
=
address
;
}
const
std
:
:
vector
<
ExceptionParameter
>
*
parameters
(
)
const
{
return
&
parameters_
;
}
void
add_parameter
(
uint64_t
value
const
string
&
description
)
{
parameters_
.
push_back
(
ExceptionParameter
(
value
description
)
)
;
}
private
:
uint32_t
code_
;
string
code_description_
;
uint32_t
flags_
;
string
flags_description_
;
uint64_t
nested_exception_record_address_
;
uint64_t
address_
;
std
:
:
vector
<
ExceptionParameter
>
parameters_
;
}
;
}
#
endif
