#
ifndef
GOOGLE_BREAKPAD_PROCESSOR_CALL_STACK_H__
#
define
GOOGLE_BREAKPAD_PROCESSOR_CALL_STACK_H__
#
include
<
cstdint
>
#
include
<
vector
>
namespace
google_breakpad
{
using
std
:
:
vector
;
struct
StackFrame
;
template
<
typename
T
>
class
linked_ptr
;
class
CallStack
{
public
:
CallStack
(
)
{
Clear
(
)
;
}
~
CallStack
(
)
;
void
Clear
(
)
;
const
vector
<
StackFrame
*
>
*
frames
(
)
const
{
return
&
frames_
;
}
void
set_tid
(
uint32_t
tid
)
{
tid_
=
tid
;
}
void
set_last_error
(
uint32_t
last_error
)
{
last_error_
=
last_error
;
}
uint32_t
tid
(
)
const
{
return
tid_
;
}
uint32_t
last_error
(
)
const
{
return
last_error_
;
}
private
:
friend
class
Stackwalker
;
vector
<
StackFrame
*
>
frames_
;
uint32_t
tid_
;
uint32_t
last_error_
;
}
;
}
#
endif
