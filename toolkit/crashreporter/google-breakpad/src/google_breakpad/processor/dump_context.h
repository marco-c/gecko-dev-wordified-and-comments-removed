#
ifndef
GOOGLE_BREAKPAD_PROCESSOR_DUMP_CONTEXT_H__
#
define
GOOGLE_BREAKPAD_PROCESSOR_DUMP_CONTEXT_H__
#
include
"
google_breakpad
/
common
/
minidump_format
.
h
"
#
include
"
google_breakpad
/
processor
/
dump_object
.
h
"
namespace
google_breakpad
{
class
DumpContext
:
public
DumpObject
{
public
:
virtual
~
DumpContext
(
)
;
uint32_t
GetContextCPU
(
)
const
;
uint32_t
GetContextFlags
(
)
const
;
const
MDRawContextAMD64
*
GetContextAMD64
(
)
const
;
const
MDRawContextARM
*
GetContextARM
(
)
const
;
const
MDRawContextARM64
*
GetContextARM64
(
)
const
;
const
MDRawContextMIPS
*
GetContextMIPS
(
)
const
;
const
MDRawContextPPC
*
GetContextPPC
(
)
const
;
const
MDRawContextPPC64
*
GetContextPPC64
(
)
const
;
const
MDRawContextSPARC
*
GetContextSPARC
(
)
const
;
const
MDRawContextX86
*
GetContextX86
(
)
const
;
bool
GetInstructionPointer
(
uint64_t
*
ip
)
const
;
bool
GetStackPointer
(
uint64_t
*
sp
)
const
;
void
Print
(
)
;
protected
:
DumpContext
(
)
;
void
SetContextFlags
(
uint32_t
context_flags
)
;
void
SetContextX86
(
MDRawContextX86
*
x86
)
;
void
SetContextPPC
(
MDRawContextPPC
*
ppc
)
;
void
SetContextPPC64
(
MDRawContextPPC64
*
ppc64
)
;
void
SetContextAMD64
(
MDRawContextAMD64
*
amd64
)
;
void
SetContextSPARC
(
MDRawContextSPARC
*
ctx_sparc
)
;
void
SetContextARM
(
MDRawContextARM
*
arm
)
;
void
SetContextARM64
(
MDRawContextARM64
*
arm64
)
;
void
SetContextMIPS
(
MDRawContextMIPS
*
ctx_mips
)
;
void
FreeContext
(
)
;
private
:
union
{
MDRawContextBase
*
base
;
MDRawContextX86
*
x86
;
MDRawContextPPC
*
ppc
;
MDRawContextPPC64
*
ppc64
;
MDRawContextAMD64
*
amd64
;
MDRawContextSPARC
*
ctx_sparc
;
MDRawContextARM
*
arm
;
MDRawContextARM64
*
arm64
;
MDRawContextMIPS
*
ctx_mips
;
}
context_
;
uint32_t
context_flags_
;
}
;
}
#
endif
