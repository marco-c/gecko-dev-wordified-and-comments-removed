#
ifndef
GOOGLE_BREAKPAD_PROCESSOR_MINIDUMP_PROCESSOR_H__
#
define
GOOGLE_BREAKPAD_PROCESSOR_MINIDUMP_PROCESSOR_H__
#
include
<
assert
.
h
>
#
include
<
string
>
#
include
"
common
/
using_std_string
.
h
"
#
include
"
google_breakpad
/
common
/
breakpad_types
.
h
"
#
include
"
google_breakpad
/
processor
/
process_result
.
h
"
namespace
google_breakpad
{
class
Minidump
;
class
ProcessState
;
class
StackFrameSymbolizer
;
class
SourceLineResolverInterface
;
class
SymbolSupplier
;
struct
SystemInfo
;
class
MinidumpProcessor
{
public
:
MinidumpProcessor
(
SymbolSupplier
*
supplier
SourceLineResolverInterface
*
resolver
)
;
MinidumpProcessor
(
SymbolSupplier
*
supplier
SourceLineResolverInterface
*
resolver
bool
enable_exploitability
)
;
MinidumpProcessor
(
StackFrameSymbolizer
*
stack_frame_symbolizer
bool
enable_exploitability
)
;
~
MinidumpProcessor
(
)
;
ProcessResult
Process
(
const
string
&
minidump_file
ProcessState
*
process_state
)
;
ProcessResult
Process
(
Minidump
*
minidump
ProcessState
*
process_state
)
;
static
bool
GetCPUInfo
(
Minidump
*
dump
SystemInfo
*
info
)
;
static
bool
GetOSInfo
(
Minidump
*
dump
SystemInfo
*
info
)
;
static
bool
GetProcessCreateTime
(
Minidump
*
dump
uint32_t
*
process_create_time
)
;
static
string
GetCrashReason
(
Minidump
*
dump
uint64_t
*
address
)
;
static
bool
IsErrorUnrecoverable
(
ProcessResult
p
)
{
assert
(
p
!
=
PROCESS_OK
)
;
return
(
p
!
=
PROCESS_SYMBOL_SUPPLIER_INTERRUPTED
)
;
}
static
string
GetAssertion
(
Minidump
*
dump
)
;
void
set_enable_objdump
(
bool
enabled
)
{
enable_objdump_
=
enabled
;
}
private
:
StackFrameSymbolizer
*
frame_symbolizer_
;
bool
own_frame_symbolizer_
;
bool
enable_exploitability_
;
bool
enable_objdump_
;
}
;
}
#
endif
