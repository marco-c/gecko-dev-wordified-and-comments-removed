#
include
"
common
/
windows
/
dia_util
.
h
"
#
include
<
atlbase
.
h
>
namespace
google_breakpad
{
bool
FindDebugStream
(
const
wchar_t
*
name
IDiaSession
*
session
IDiaEnumDebugStreamData
*
*
debug_stream
)
{
CComPtr
<
IDiaEnumDebugStreams
>
enum_debug_streams
;
if
(
FAILED
(
session
-
>
getEnumDebugStreams
(
&
enum_debug_streams
)
)
)
{
fprintf
(
stderr
"
IDiaSession
:
:
getEnumDebugStreams
failed
\
n
"
)
;
return
false
;
}
CComPtr
<
IDiaEnumDebugStreamData
>
temp_debug_stream
;
ULONG
fetched
=
0
;
while
(
SUCCEEDED
(
enum_debug_streams
-
>
Next
(
1
&
temp_debug_stream
&
fetched
)
)
&
&
fetched
=
=
1
)
{
CComBSTR
stream_name
;
if
(
FAILED
(
temp_debug_stream
-
>
get_name
(
&
stream_name
)
)
)
{
fprintf
(
stderr
"
IDiaEnumDebugStreamData
:
:
get_name
failed
\
n
"
)
;
return
false
;
}
if
(
wcsncmp
(
(
LPWSTR
)
stream_name
name
stream_name
.
Length
(
)
)
=
=
0
)
{
*
debug_stream
=
temp_debug_stream
.
Detach
(
)
;
return
true
;
}
temp_debug_stream
.
Release
(
)
;
}
return
false
;
}
bool
FindTable
(
REFIID
iid
IDiaSession
*
session
void
*
*
table
)
{
CComPtr
<
IDiaEnumTables
>
enum_tables
;
if
(
FAILED
(
session
-
>
getEnumTables
(
&
enum_tables
)
)
)
{
fprintf
(
stderr
"
IDiaSession
:
:
getEnumTables
failed
\
n
"
)
;
return
false
;
}
CComPtr
<
IDiaTable
>
temp_table
;
ULONG
fetched
=
0
;
while
(
SUCCEEDED
(
enum_tables
-
>
Next
(
1
&
temp_table
&
fetched
)
)
&
&
fetched
=
=
1
)
{
void
*
temp
=
NULL
;
if
(
SUCCEEDED
(
temp_table
-
>
QueryInterface
(
iid
&
temp
)
)
)
{
*
table
=
temp
;
return
true
;
}
temp_table
.
Release
(
)
;
}
return
false
;
}
}
