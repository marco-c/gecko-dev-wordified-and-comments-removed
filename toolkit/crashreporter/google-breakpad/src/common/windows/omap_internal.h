#
ifndef
COMMON_WINDOWS_OMAP_INTERNAL_H_
#
define
COMMON_WINDOWS_OMAP_INTERNAL_H_
#
include
<
windows
.
h
>
#
include
<
dia2
.
h
>
#
include
<
vector
>
namespace
google_breakpad
{
struct
OMAP
{
DWORD
rva
;
DWORD
rvaTo
;
}
;
static_assert
(
sizeof
(
OMAP
)
=
=
8
"
Wrong
size
for
OMAP
structure
.
"
)
;
typedef
std
:
:
vector
<
OMAP
>
OmapTable
;
struct
OmapData
{
OmapTable
omap_from
;
OmapTable
omap_to
;
DWORD
length_original
;
OmapData
(
)
:
length_original
(
0
)
{
}
}
;
struct
AddressRange
{
DWORD
rva
;
DWORD
length
;
AddressRange
(
)
:
rva
(
0
)
length
(
0
)
{
}
AddressRange
(
DWORD
rva
DWORD
length
)
:
rva
(
rva
)
length
(
length
)
{
}
DWORD
end
(
)
const
{
return
rva
+
length
;
}
int
Compare
(
const
AddressRange
&
rhs
)
const
;
bool
operator
<
(
const
AddressRange
&
rhs
)
const
{
return
Compare
(
rhs
)
=
=
-
1
;
}
bool
operator
>
(
const
AddressRange
&
rhs
)
const
{
return
Compare
(
rhs
)
=
=
1
;
}
bool
operator
=
=
(
const
AddressRange
&
rhs
)
const
{
return
rva
=
=
rhs
.
rva
&
&
length
=
=
rhs
.
length
;
}
bool
operator
!
=
(
const
AddressRange
&
rhs
)
const
{
return
!
(
(
*
this
)
=
=
rhs
)
;
}
}
;
typedef
std
:
:
vector
<
AddressRange
>
AddressRangeVector
;
struct
MappedRange
{
DWORD
rva_original
;
DWORD
rva_transformed
;
DWORD
length
;
DWORD
injected
;
DWORD
removed
;
}
;
typedef
std
:
:
vector
<
MappedRange
>
Mapping
;
struct
EndpointIndex
{
DWORD
endpoint
;
size_t
index
;
}
;
typedef
std
:
:
vector
<
EndpointIndex
>
EndpointIndexMap
;
struct
ImageMap
{
Mapping
mapping
;
EndpointIndexMap
endpoint_index_map
;
}
;
}
#
endif
