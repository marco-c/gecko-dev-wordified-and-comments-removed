#
ifndef
COMMON_WINDOWS_PDB_SOURCE_LINE_WRITER_H_
#
define
COMMON_WINDOWS_PDB_SOURCE_LINE_WRITER_H_
#
include
<
atlcomcli
.
h
>
#
include
<
ImageHlp
.
h
>
#
include
<
unordered_map
>
#
include
<
string
>
#
include
"
common
/
windows
/
omap
.
h
"
struct
IDiaEnumLineNumbers
;
struct
IDiaSession
;
struct
IDiaSymbol
;
namespace
google_breakpad
{
using
std
:
:
wstring
;
using
std
:
:
unordered_map
;
struct
PDBModuleInfo
{
public
:
wstring
debug_file
;
wstring
debug_identifier
;
wstring
cpu
;
}
;
struct
PEModuleInfo
{
wstring
code_file
;
wstring
code_identifier
;
}
;
class
PDBSourceLineWriter
{
public
:
enum
FileFormat
{
PDB_FILE
EXE_FILE
ANY_FILE
}
;
explicit
PDBSourceLineWriter
(
)
;
~
PDBSourceLineWriter
(
)
;
bool
Open
(
const
wstring
&
file
FileFormat
format
)
;
bool
SetCodeFile
(
const
wstring
&
exe_file
)
;
bool
WriteMap
(
FILE
*
map_file
)
;
void
Close
(
)
;
bool
GetModuleInfo
(
PDBModuleInfo
*
info
)
;
bool
GetPEInfo
(
PEModuleInfo
*
info
)
;
bool
UsesGUID
(
bool
*
uses_guid
)
;
private
:
bool
PrintLines
(
IDiaEnumLineNumbers
*
lines
)
;
bool
PrintFunction
(
IDiaSymbol
*
function
IDiaSymbol
*
block
bool
has_multiple_symbols
)
;
bool
PrintFunctions
(
)
;
bool
PrintSourceFiles
(
)
;
bool
PrintFrameDataUsingPDB
(
)
;
bool
PrintFrameDataUsingEXE
(
)
;
bool
PrintFrameDataUsingArm64EXE
(
)
;
bool
PrintFrameData
(
)
;
bool
PrintCodePublicSymbol
(
IDiaSymbol
*
symbol
bool
has_multiple_symbols
)
;
bool
PrintPDBInfo
(
)
;
bool
PrintPEInfo
(
)
;
bool
FileIDIsCached
(
const
wstring
&
file
)
{
return
unique_files_
.
find
(
file
)
!
=
unique_files_
.
end
(
)
;
}
void
CacheFileID
(
const
wstring
&
file
DWORD
id
)
{
unique_files_
[
file
]
=
id
;
}
void
StoreDuplicateFileID
(
const
wstring
&
file
DWORD
id
)
{
unordered_map
<
wstring
DWORD
>
:
:
iterator
iter
=
unique_files_
.
find
(
file
)
;
if
(
iter
!
=
unique_files_
.
end
(
)
)
{
file_ids_
[
id
]
=
iter
-
>
second
;
}
}
DWORD
GetRealFileID
(
DWORD
id
)
{
unordered_map
<
DWORD
DWORD
>
:
:
iterator
iter
=
file_ids_
.
find
(
id
)
;
if
(
iter
=
=
file_ids_
.
end
(
)
)
return
id
;
return
iter
-
>
second
;
}
bool
FindPEFile
(
)
;
bool
Get64BitExceptionInformation
(
PLOADED_IMAGE
image
DWORD
*
rva
DWORD
*
size
)
;
PLOADED_IMAGE
LoadImageForPEFile
(
)
;
static
bool
GetSymbolFunctionName
(
IDiaSymbol
*
function
BSTR
*
name
int
*
stack_param_size
)
;
static
int
GetFunctionStackParamSize
(
IDiaSymbol
*
function
)
;
wstring
code_file_
;
CComPtr
<
IDiaSession
>
session_
;
FILE
*
output_
;
unordered_map
<
DWORD
DWORD
>
file_ids_
;
unordered_map
<
wstring
DWORD
>
unique_files_
;
ImageMap
image_map_
;
PDBSourceLineWriter
(
const
PDBSourceLineWriter
&
)
;
void
operator
=
(
const
PDBSourceLineWriter
&
)
;
}
;
}
#
endif
