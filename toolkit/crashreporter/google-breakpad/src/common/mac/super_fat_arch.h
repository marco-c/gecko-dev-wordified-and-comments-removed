#
ifndef
BREAKPAD_COMMON_MAC_SUPER_FAT_ARCH_H_
#
define
BREAKPAD_COMMON_MAC_SUPER_FAT_ARCH_H_
#
include
<
limits
>
#
include
<
mach
-
o
/
fat
.
h
>
#
include
<
stdint
.
h
>
class
SuperFatArch
{
public
:
uint32_t
cputype
;
uint32_t
cpusubtype
;
uint64_t
offset
;
uint64_t
size
;
uint64_t
align
;
SuperFatArch
(
)
:
cputype
(
0
)
cpusubtype
(
0
)
offset
(
0
)
size
(
0
)
align
(
0
)
{
}
explicit
SuperFatArch
(
const
struct
fat_arch
&
arch
)
:
cputype
(
arch
.
cputype
)
cpusubtype
(
arch
.
cpusubtype
)
offset
(
arch
.
offset
)
size
(
arch
.
size
)
align
(
arch
.
align
)
{
}
bool
ConvertToFatArch
(
struct
fat_arch
*
output_arch
)
const
{
if
(
offset
>
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
return
false
;
if
(
size
>
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
return
false
;
if
(
align
>
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
return
false
;
struct
fat_arch
arch
;
arch
.
cputype
=
cputype
;
arch
.
cpusubtype
=
cpusubtype
;
arch
.
offset
=
offset
;
arch
.
size
=
size
;
arch
.
align
=
align
;
*
output_arch
=
arch
;
return
true
;
}
}
;
#
endif
