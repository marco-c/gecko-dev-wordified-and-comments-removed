#
include
<
mach
-
o
/
loader
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
ostream
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
common
/
byte_cursor
.
h
"
#
include
"
common
/
mac
/
macho_reader
.
h
"
#
include
"
common
/
mac
/
super_fat_arch
.
h
"
#
include
"
common
/
module
.
h
"
#
include
"
common
/
scoped_ptr
.
h
"
#
include
"
common
/
symbol_data
.
h
"
namespace
google_breakpad
{
class
DumpSymbols
{
public
:
DumpSymbols
(
SymbolData
symbol_data
bool
handle_inter_cu_refs
)
:
symbol_data_
(
symbol_data
)
handle_inter_cu_refs_
(
handle_inter_cu_refs
)
input_pathname_
(
)
object_filename_
(
)
contents_
(
)
object_files_
(
)
selected_object_file_
(
)
selected_object_name_
(
)
{
}
~
DumpSymbols
(
)
{
}
bool
Read
(
const
std
:
:
string
&
filename
)
;
bool
SetArchitecture
(
cpu_type_t
cpu_type
cpu_subtype_t
cpu_subtype
)
;
bool
SetArchitecture
(
const
std
:
:
string
&
arch_name
)
;
const
SuperFatArch
*
AvailableArchitectures
(
size_t
*
count
)
{
*
count
=
object_files_
.
size
(
)
;
if
(
object_files_
.
size
(
)
>
0
)
return
&
object_files_
[
0
]
;
return
NULL
;
}
bool
WriteSymbolFile
(
std
:
:
ostream
&
stream
)
;
bool
WriteSymbolFileHeader
(
std
:
:
ostream
&
stream
)
;
bool
ReadSymbolData
(
Module
*
*
module
)
;
private
:
class
DumperLineToModule
;
class
LoadCommandDumper
;
SuperFatArch
*
FindBestMatchForArchitecture
(
cpu_type_t
cpu_type
cpu_subtype_t
cpu_subtype
)
;
std
:
:
string
Identifier
(
)
;
bool
CreateEmptyModule
(
scoped_ptr
<
Module
>
&
module
)
;
bool
ReadDwarf
(
google_breakpad
:
:
Module
*
module
const
mach_o
:
:
Reader
&
macho_reader
const
mach_o
:
:
SectionMap
&
dwarf_sections
bool
handle_inter_cu_refs
)
const
;
bool
ReadCFI
(
google_breakpad
:
:
Module
*
module
const
mach_o
:
:
Reader
&
macho_reader
const
mach_o
:
:
Section
&
section
bool
eh_frame
)
const
;
const
SymbolData
symbol_data_
;
const
bool
handle_inter_cu_refs_
;
std
:
:
string
input_pathname_
;
std
:
:
string
object_filename_
;
scoped_array
<
uint8_t
>
contents_
;
vector
<
SuperFatArch
>
object_files_
;
const
SuperFatArch
*
selected_object_file_
;
string
selected_object_name_
;
}
;
}
