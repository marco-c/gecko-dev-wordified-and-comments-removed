#
ifndef
COMMON_DWARF_DWARF2READER_H__
#
define
COMMON_DWARF_DWARF2READER_H__
#
include
<
stdint
.
h
>
#
include
<
list
>
#
include
<
map
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
<
memory
>
#
include
"
common
/
dwarf
/
bytereader
.
h
"
#
include
"
common
/
dwarf
/
dwarf2enums
.
h
"
#
include
"
common
/
dwarf
/
types
.
h
"
#
include
"
common
/
using_std_string
.
h
"
#
include
"
common
/
dwarf
/
elf_reader
.
h
"
namespace
dwarf2reader
{
struct
LineStateMachine
;
class
Dwarf2Handler
;
class
LineInfoHandler
;
class
DwpReader
;
typedef
std
:
:
map
<
string
std
:
:
pair
<
const
uint8_t
*
uint64
>
>
SectionMap
;
typedef
std
:
:
list
<
std
:
:
pair
<
enum
DwarfAttribute
enum
DwarfForm
>
>
AttributeList
;
typedef
AttributeList
:
:
iterator
AttributeIterator
;
typedef
AttributeList
:
:
const_iterator
ConstAttributeIterator
;
struct
LineInfoHeader
{
uint64
total_length
;
uint16
version
;
uint64
prologue_length
;
uint8
min_insn_length
;
bool
default_is_stmt
;
int8
line_base
;
uint8
line_range
;
uint8
opcode_base
;
std
:
:
vector
<
unsigned
char
>
*
std_opcode_lengths
;
}
;
class
LineInfo
{
public
:
LineInfo
(
const
uint8_t
*
buffer_
uint64
buffer_length
ByteReader
*
reader
LineInfoHandler
*
handler
)
;
virtual
~
LineInfo
(
)
{
if
(
header_
.
std_opcode_lengths
)
{
delete
header_
.
std_opcode_lengths
;
}
}
uint64
Start
(
)
;
static
bool
ProcessOneOpcode
(
ByteReader
*
reader
LineInfoHandler
*
handler
const
struct
LineInfoHeader
&
header
const
uint8_t
*
start
struct
LineStateMachine
*
lsm
size_t
*
len
uintptr
pc
bool
*
lsm_passes_pc
)
;
private
:
void
ReadHeader
(
)
;
void
ReadLines
(
)
;
LineInfoHandler
*
handler_
;
ByteReader
*
reader_
;
struct
LineInfoHeader
header_
;
const
uint8_t
*
buffer_
;
#
ifndef
NDEBUG
uint64
buffer_length_
;
#
endif
const
uint8_t
*
after_header_
;
}
;
class
LineInfoHandler
{
public
:
LineInfoHandler
(
)
{
}
virtual
~
LineInfoHandler
(
)
{
}
virtual
void
DefineDir
(
const
string
&
name
uint32
dir_num
)
{
}
virtual
void
DefineFile
(
const
string
&
name
int32
file_num
uint32
dir_num
uint64
mod_time
uint64
length
)
{
}
virtual
void
AddLine
(
uint64
address
uint64
length
uint32
file_num
uint32
line_num
uint32
column_num
)
{
}
}
;
class
Dwarf2Handler
{
public
:
Dwarf2Handler
(
)
{
}
virtual
~
Dwarf2Handler
(
)
{
}
virtual
bool
StartCompilationUnit
(
uint64
offset
uint8
address_size
uint8
offset_size
uint64
cu_length
uint8
dwarf_version
)
{
return
false
;
}
virtual
bool
NeedSplitDebugInfo
(
)
{
return
true
;
}
virtual
bool
StartSplitCompilationUnit
(
uint64
offset
uint64
cu_length
)
{
return
false
;
}
virtual
bool
StartDIE
(
uint64
offset
enum
DwarfTag
tag
)
{
return
false
;
}
virtual
void
ProcessAttributeUnsigned
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
uint64
data
)
{
}
virtual
void
ProcessAttributeSigned
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
int64
data
)
{
}
virtual
void
ProcessAttributeReference
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
uint64
data
)
{
}
virtual
void
ProcessAttributeBuffer
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
const
uint8_t
*
data
uint64
len
)
{
}
virtual
void
ProcessAttributeString
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
const
string
&
data
)
{
}
virtual
void
ProcessAttributeSignature
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
uint64
signature
)
{
}
virtual
void
EndDIE
(
uint64
offset
)
{
}
}
;
class
CompilationUnit
{
public
:
CompilationUnit
(
const
string
&
path
const
SectionMap
&
sections
uint64
offset
ByteReader
*
reader
Dwarf2Handler
*
handler
)
;
virtual
~
CompilationUnit
(
)
{
if
(
abbrevs_
)
delete
abbrevs_
;
}
void
SetSplitDwarf
(
const
uint8_t
*
addr_buffer
uint64
addr_buffer_length
uint64
addr_base
uint64
ranges_base
uint64
dwo_id
)
;
uint64
Start
(
)
;
private
:
struct
Abbrev
{
uint64
number
;
enum
DwarfTag
tag
;
bool
has_children
;
AttributeList
attributes
;
}
;
struct
CompilationUnitHeader
{
uint64
length
;
uint16
version
;
uint64
abbrev_offset
;
uint8
address_size
;
}
header_
;
void
ReadHeader
(
)
;
void
ReadAbbrevs
(
)
;
const
uint8_t
*
ProcessDIE
(
uint64
dieoffset
const
uint8_t
*
start
const
Abbrev
&
abbrev
)
;
const
uint8_t
*
ProcessAttribute
(
uint64
dieoffset
const
uint8_t
*
start
enum
DwarfAttribute
attr
enum
DwarfForm
form
)
;
void
ProcessAttributeUnsigned
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
uint64
data
)
{
if
(
attr
=
=
DW_AT_GNU_dwo_id
)
{
dwo_id_
=
data
;
}
else
if
(
attr
=
=
DW_AT_GNU_addr_base
)
{
addr_base_
=
data
;
}
else
if
(
attr
=
=
DW_AT_GNU_ranges_base
)
{
ranges_base_
=
data
;
}
else
if
(
attr
=
=
DW_AT_ranges
&
&
is_split_dwarf_
)
{
data
+
=
ranges_base_
;
}
handler_
-
>
ProcessAttributeUnsigned
(
offset
attr
form
data
)
;
}
void
ProcessAttributeSigned
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
int64
data
)
{
handler_
-
>
ProcessAttributeSigned
(
offset
attr
form
data
)
;
}
void
ProcessAttributeBuffer
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
const
uint8_t
*
data
uint64
len
)
{
handler_
-
>
ProcessAttributeBuffer
(
offset
attr
form
data
len
)
;
}
void
ProcessAttributeString
(
uint64
offset
enum
DwarfAttribute
attr
enum
DwarfForm
form
const
char
*
data
)
{
if
(
attr
=
=
DW_AT_GNU_dwo_name
)
dwo_name_
=
data
;
handler_
-
>
ProcessAttributeString
(
offset
attr
form
data
)
;
}
void
ProcessDIEs
(
)
;
const
uint8_t
*
SkipDIE
(
const
uint8_t
*
start
const
Abbrev
&
abbrev
)
;
const
uint8_t
*
SkipAttribute
(
const
uint8_t
*
start
enum
DwarfForm
form
)
;
void
ProcessSplitDwarf
(
)
;
void
ReadDebugSectionsFromDwo
(
ElfReader
*
elf_reader
SectionMap
*
sections
)
;
const
string
path_
;
uint64
offset_from_section_start_
;
const
uint8_t
*
buffer_
;
uint64
buffer_length_
;
const
uint8_t
*
after_header_
;
ByteReader
*
reader_
;
const
SectionMap
&
sections_
;
Dwarf2Handler
*
handler_
;
std
:
:
vector
<
Abbrev
>
*
abbrevs_
;
const
uint8_t
*
string_buffer_
;
uint64
string_buffer_length_
;
const
uint8_t
*
str_offsets_buffer_
;
uint64
str_offsets_buffer_length_
;
const
uint8_t
*
addr_buffer_
;
uint64
addr_buffer_length_
;
bool
is_split_dwarf_
;
uint64
dwo_id_
;
const
char
*
dwo_name_
;
uint64
skeleton_dwo_id_
;
uint64
ranges_base_
;
uint64
addr_base_
;
bool
have_checked_for_dwp_
;
string
dwp_path_
;
std
:
:
unique_ptr
<
ByteReader
>
dwp_byte_reader_
;
std
:
:
unique_ptr
<
DwpReader
>
dwp_reader_
;
}
;
class
DwpReader
{
public
:
DwpReader
(
const
ByteReader
&
byte_reader
ElfReader
*
elf_reader
)
;
~
DwpReader
(
)
;
void
Initialize
(
)
;
void
ReadDebugSectionsForCU
(
uint64
dwo_id
SectionMap
*
sections
)
;
private
:
int
LookupCU
(
uint64
dwo_id
)
;
uint32
LookupCUv2
(
uint64
dwo_id
)
;
ElfReader
*
elf_reader_
;
const
ByteReader
&
byte_reader_
;
const
char
*
cu_index_
;
size_t
cu_index_size_
;
const
char
*
string_buffer_
;
size_t
string_buffer_size_
;
int
version_
;
unsigned
int
ncolumns_
;
unsigned
int
nunits_
;
unsigned
int
nslots_
;
const
char
*
phash_
;
const
char
*
pindex_
;
const
char
*
shndx_pool_
;
const
char
*
offset_table_
;
const
char
*
size_table_
;
const
char
*
abbrev_data_
;
size_t
abbrev_size_
;
const
char
*
info_data_
;
size_t
info_size_
;
const
char
*
str_offsets_data_
;
size_t
str_offsets_size_
;
}
;
class
CallFrameInfo
{
public
:
enum
EntryKind
{
kUnknown
kCIE
kFDE
kTerminator
}
;
class
Handler
;
class
Reporter
;
CallFrameInfo
(
const
uint8_t
*
buffer
size_t
buffer_length
ByteReader
*
reader
Handler
*
handler
Reporter
*
reporter
bool
eh_frame
=
false
)
:
buffer_
(
buffer
)
buffer_length_
(
buffer_length
)
reader_
(
reader
)
handler_
(
handler
)
reporter_
(
reporter
)
eh_frame_
(
eh_frame
)
{
}
~
CallFrameInfo
(
)
{
}
bool
Start
(
)
;
static
const
char
*
KindName
(
EntryKind
kind
)
;
private
:
struct
CIE
;
struct
Entry
{
size_t
offset
;
const
uint8_t
*
start
;
EntryKind
kind
;
const
uint8_t
*
fields
;
const
uint8_t
*
instructions
;
const
uint8_t
*
end
;
uint64
id
;
CIE
*
cie
;
}
;
struct
CIE
:
public
Entry
{
uint8
version
;
string
augmentation
;
uint64
code_alignment_factor
;
int
data_alignment_factor
;
unsigned
return_address_register
;
bool
has_z_augmentation
;
bool
has_z_lsda
;
bool
has_z_personality
;
bool
has_z_signal_frame
;
DwarfPointerEncoding
lsda_encoding
;
DwarfPointerEncoding
personality_encoding
;
uint64
personality_address
;
DwarfPointerEncoding
pointer_encoding
;
}
;
struct
FDE
:
public
Entry
{
uint64
address
;
uint64
size
;
uint64
lsda_address
;
}
;
class
Rule
;
class
UndefinedRule
;
class
SameValueRule
;
class
OffsetRule
;
class
ValOffsetRule
;
class
RegisterRule
;
class
ExpressionRule
;
class
ValExpressionRule
;
class
RuleMap
;
class
State
;
bool
ReadEntryPrologue
(
const
uint8_t
*
cursor
Entry
*
entry
)
;
bool
ReadCIEFields
(
CIE
*
cie
)
;
bool
ReadFDEFields
(
FDE
*
fde
)
;
bool
ReportIncomplete
(
Entry
*
entry
)
;
static
bool
IsIndirectEncoding
(
DwarfPointerEncoding
encoding
)
{
return
encoding
&
DW_EH_PE_indirect
;
}
const
uint8_t
*
buffer_
;
size_t
buffer_length_
;
ByteReader
*
reader_
;
Handler
*
handler_
;
Reporter
*
reporter_
;
bool
eh_frame_
;
}
;
class
CallFrameInfo
:
:
Handler
{
public
:
enum
{
kCFARegister
=
-
1
}
;
Handler
(
)
{
}
virtual
~
Handler
(
)
{
}
virtual
bool
Entry
(
size_t
offset
uint64
address
uint64
length
uint8
version
const
string
&
augmentation
unsigned
return_address
)
=
0
;
virtual
bool
UndefinedRule
(
uint64
address
int
reg
)
=
0
;
virtual
bool
SameValueRule
(
uint64
address
int
reg
)
=
0
;
virtual
bool
OffsetRule
(
uint64
address
int
reg
int
base_register
long
offset
)
=
0
;
virtual
bool
ValOffsetRule
(
uint64
address
int
reg
int
base_register
long
offset
)
=
0
;
virtual
bool
RegisterRule
(
uint64
address
int
reg
int
base_register
)
=
0
;
virtual
bool
ExpressionRule
(
uint64
address
int
reg
const
string
&
expression
)
=
0
;
virtual
bool
ValExpressionRule
(
uint64
address
int
reg
const
string
&
expression
)
=
0
;
virtual
bool
End
(
)
=
0
;
virtual
bool
PersonalityRoutine
(
uint64
address
bool
indirect
)
{
return
true
;
}
virtual
bool
LanguageSpecificDataArea
(
uint64
address
bool
indirect
)
{
return
true
;
}
virtual
bool
SignalHandler
(
)
{
return
true
;
}
}
;
class
CallFrameInfo
:
:
Reporter
{
public
:
Reporter
(
const
string
&
filename
const
string
&
section
=
"
.
debug_frame
"
)
:
filename_
(
filename
)
section_
(
section
)
{
}
virtual
~
Reporter
(
)
{
}
virtual
void
Incomplete
(
uint64
offset
CallFrameInfo
:
:
EntryKind
kind
)
;
virtual
void
EarlyEHTerminator
(
uint64
offset
)
;
virtual
void
CIEPointerOutOfRange
(
uint64
offset
uint64
cie_offset
)
;
virtual
void
BadCIEId
(
uint64
offset
uint64
cie_offset
)
;
virtual
void
UnrecognizedVersion
(
uint64
offset
int
version
)
;
virtual
void
UnrecognizedAugmentation
(
uint64
offset
const
string
&
augmentation
)
;
virtual
void
InvalidPointerEncoding
(
uint64
offset
uint8
encoding
)
;
virtual
void
UnusablePointerEncoding
(
uint64
offset
uint8
encoding
)
;
virtual
void
RestoreInCIE
(
uint64
offset
uint64
insn_offset
)
;
virtual
void
BadInstruction
(
uint64
offset
CallFrameInfo
:
:
EntryKind
kind
uint64
insn_offset
)
;
virtual
void
NoCFARule
(
uint64
offset
CallFrameInfo
:
:
EntryKind
kind
uint64
insn_offset
)
;
virtual
void
EmptyStateStack
(
uint64
offset
CallFrameInfo
:
:
EntryKind
kind
uint64
insn_offset
)
;
virtual
void
ClearingCFARule
(
uint64
offset
CallFrameInfo
:
:
EntryKind
kind
uint64
insn_offset
)
;
protected
:
string
filename_
;
string
section_
;
}
;
}
#
endif
