#
ifndef
COMMON_DWARF_ELF_READER_H__
#
define
COMMON_DWARF_ELF_READER_H__
#
include
<
string
>
#
include
<
vector
>
#
include
"
common
/
dwarf
/
types
.
h
"
#
include
"
common
/
using_std_string
.
h
"
using
std
:
:
vector
;
using
std
:
:
pair
;
namespace
dwarf2reader
{
class
SymbolMap
;
class
Elf32
;
class
Elf64
;
template
<
typename
ElfArch
>
class
ElfReaderImpl
;
class
ElfReader
{
public
:
explicit
ElfReader
(
const
string
&
path
)
;
~
ElfReader
(
)
;
bool
IsNativeElfFile
(
)
const
;
bool
IsElf32File
(
)
const
;
bool
IsElf64File
(
)
const
;
bool
IsDynamicSharedObject
(
)
;
void
AddSymbols
(
SymbolMap
*
symbols
uint64
mem_offset
uint64
file_offset
uint64
length
)
;
class
SymbolSink
{
public
:
virtual
~
SymbolSink
(
)
{
}
virtual
void
AddSymbol
(
const
char
*
name
uint64
address
uint64
size
)
=
0
;
}
;
void
VisitSymbols
(
SymbolSink
*
sink
)
;
void
VisitSymbols
(
SymbolSink
*
sink
int
symbol_binding
int
symbol_type
)
;
void
VisitSymbols
(
SymbolSink
*
sink
int
symbol_binding
int
symbol_type
bool
get_raw_symbol_values
)
;
uint64
VaddrOfFirstLoadSegment
(
)
;
const
char
*
GetSectionName
(
int
shndx
)
;
uint64
GetNumSections
(
)
;
const
char
*
GetSectionByIndex
(
int
shndx
size_t
*
size
)
;
const
char
*
GetSectionByName
(
const
string
&
section_name
size_t
*
size
)
;
struct
SectionInfo
{
uint32
type
;
uint64
flags
;
uint64
addr
;
uint64
offset
;
uint64
size
;
uint32
link
;
uint32
info
;
uint64
addralign
;
uint64
entsize
;
}
;
const
char
*
GetSectionInfoByName
(
const
string
&
section_name
SectionInfo
*
info
)
;
static
bool
IsNonStrippedELFBinary
(
const
string
&
path
)
;
static
bool
IsNonDebugStrippedELFBinary
(
const
string
&
path
)
;
static
bool
SectionNamesMatch
(
const
string
&
name
const
string
&
sh_name
)
;
private
:
ElfReaderImpl
<
Elf32
>
*
GetImpl32
(
)
;
ElfReaderImpl
<
Elf64
>
*
GetImpl64
(
)
;
const
string
path_
;
int
fd_
;
ElfReaderImpl
<
Elf32
>
*
impl32_
;
ElfReaderImpl
<
Elf64
>
*
impl64_
;
}
;
}
#
endif
