#
ifndef
COMMON_LINUX_DWARF_CU_TO_MODULE_H__
#
define
COMMON_LINUX_DWARF_CU_TO_MODULE_H__
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
common
/
language
.
h
"
#
include
"
common
/
module
.
h
"
#
include
"
common
/
dwarf
/
bytereader
.
h
"
#
include
"
common
/
dwarf
/
dwarf2diehandler
.
h
"
#
include
"
common
/
dwarf
/
dwarf2reader
.
h
"
#
include
"
common
/
scoped_ptr
.
h
"
#
include
"
common
/
using_std_string
.
h
"
namespace
google_breakpad
{
using
dwarf2reader
:
:
DwarfAttribute
;
using
dwarf2reader
:
:
DwarfForm
;
using
dwarf2reader
:
:
DwarfLanguage
;
using
dwarf2reader
:
:
DwarfTag
;
class
DwarfCUToModule
:
public
dwarf2reader
:
:
RootDIEHandler
{
struct
FilePrivate
;
public
:
class
FileContext
{
public
:
FileContext
(
const
string
&
filename
Module
*
module
bool
handle_inter_cu_refs
)
;
~
FileContext
(
)
;
void
AddSectionToSectionMap
(
const
string
&
name
const
uint8_t
*
contents
uint64
length
)
;
void
ClearSectionMapForTest
(
)
;
const
dwarf2reader
:
:
SectionMap
&
section_map
(
)
const
;
private
:
friend
class
DwarfCUToModule
;
void
ClearSpecifications
(
)
;
bool
IsUnhandledInterCUReference
(
uint64
offset
uint64
compilation_unit_start
)
const
;
const
string
filename_
;
dwarf2reader
:
:
SectionMap
section_map_
;
Module
*
module_
;
const
bool
handle_inter_cu_refs_
;
scoped_ptr
<
FilePrivate
>
file_private_
;
}
;
class
LineToModuleHandler
{
public
:
LineToModuleHandler
(
)
{
}
virtual
~
LineToModuleHandler
(
)
{
}
virtual
void
StartCompilationUnit
(
const
string
&
compilation_dir
)
=
0
;
virtual
void
ReadProgram
(
const
uint8_t
*
program
uint64
length
Module
*
module
vector
<
Module
:
:
Line
>
*
lines
)
=
0
;
}
;
class
WarningReporter
{
public
:
WarningReporter
(
const
string
&
filename
uint64
cu_offset
)
:
filename_
(
filename
)
cu_offset_
(
cu_offset
)
printed_cu_header_
(
false
)
printed_unpaired_header_
(
false
)
uncovered_warnings_enabled_
(
false
)
{
}
virtual
~
WarningReporter
(
)
{
}
virtual
void
SetCUName
(
const
string
&
name
)
{
cu_name_
=
name
;
}
virtual
bool
uncovered_warnings_enabled
(
)
const
{
return
uncovered_warnings_enabled_
;
}
virtual
void
set_uncovered_warnings_enabled
(
bool
value
)
{
uncovered_warnings_enabled_
=
value
;
}
virtual
void
UnknownSpecification
(
uint64
offset
uint64
target
)
;
virtual
void
UnknownAbstractOrigin
(
uint64
offset
uint64
target
)
;
virtual
void
MissingSection
(
const
string
&
section_name
)
;
virtual
void
BadLineInfoOffset
(
uint64
offset
)
;
virtual
void
UncoveredFunction
(
const
Module
:
:
Function
&
function
)
;
virtual
void
UncoveredLine
(
const
Module
:
:
Line
&
line
)
;
virtual
void
UnnamedFunction
(
uint64
offset
)
;
virtual
void
DemangleError
(
const
string
&
input
int
error
)
;
virtual
void
UnhandledInterCUReference
(
uint64
offset
uint64
target
)
;
uint64
cu_offset
(
)
const
{
return
cu_offset_
;
}
protected
:
const
string
filename_
;
const
uint64
cu_offset_
;
string
cu_name_
;
bool
printed_cu_header_
;
bool
printed_unpaired_header_
;
bool
uncovered_warnings_enabled_
;
private
:
void
CUHeading
(
)
;
void
UncoveredHeading
(
)
;
}
;
DwarfCUToModule
(
FileContext
*
file_context
LineToModuleHandler
*
line_reader
WarningReporter
*
reporter
)
;
~
DwarfCUToModule
(
)
;
void
ProcessAttributeSigned
(
enum
DwarfAttribute
attr
enum
DwarfForm
form
int64
data
)
;
void
ProcessAttributeUnsigned
(
enum
DwarfAttribute
attr
enum
DwarfForm
form
uint64
data
)
;
void
ProcessAttributeString
(
enum
DwarfAttribute
attr
enum
DwarfForm
form
const
string
&
data
)
;
bool
EndAttributes
(
)
;
DIEHandler
*
FindChildHandler
(
uint64
offset
enum
DwarfTag
tag
)
;
void
Finish
(
)
;
bool
StartCompilationUnit
(
uint64
offset
uint8
address_size
uint8
offset_size
uint64
cu_length
uint8
dwarf_version
)
;
bool
StartRootDIE
(
uint64
offset
enum
DwarfTag
tag
)
;
private
:
struct
CUContext
;
struct
DIEContext
;
struct
Specification
;
class
GenericDIEHandler
;
class
FuncHandler
;
class
NamedScopeHandler
;
typedef
map
<
uint64
Specification
>
SpecificationByOffset
;
void
SetLanguage
(
DwarfLanguage
language
)
;
void
ReadSourceLines
(
uint64
offset
)
;
void
AssignLinesToFunctions
(
)
;
LineToModuleHandler
*
line_reader_
;
scoped_ptr
<
CUContext
>
cu_context_
;
scoped_ptr
<
DIEContext
>
child_context_
;
bool
has_source_line_info_
;
uint64
source_line_offset_
;
vector
<
Module
:
:
Line
>
lines_
;
}
;
}
#
endif
