#
include
<
algorithm
>
#
include
<
string
>
#
include
"
breakpad_googletest_includes
.
h
"
#
include
"
common
/
long_string_dictionary
.
h
"
namespace
google_breakpad
{
using
std
:
:
string
;
TEST
(
LongStringDictionary
LongStringDictionary
)
{
LongStringDictionary
dict
;
dict
.
SetKeyValue
(
"
key1
"
"
value1
"
)
;
dict
.
SetKeyValue
(
"
key2
"
"
value2
"
)
;
dict
.
SetKeyValue
(
"
key3
"
"
value3
"
)
;
EXPECT_EQ
(
"
value1
"
dict
.
GetValueForKey
(
"
key1
"
)
)
;
EXPECT_EQ
(
"
value2
"
dict
.
GetValueForKey
(
"
key2
"
)
)
;
EXPECT_EQ
(
"
value3
"
dict
.
GetValueForKey
(
"
key3
"
)
)
;
EXPECT_EQ
(
3u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
"
"
dict
.
GetValueForKey
(
"
key4
"
)
)
;
dict
.
RemoveKey
(
"
key3
"
)
;
EXPECT_EQ
(
"
"
dict
.
GetValueForKey
(
"
key3
"
)
)
;
dict
.
SetKeyValue
(
"
key2
"
NULL
)
;
EXPECT_EQ
(
"
"
dict
.
GetValueForKey
(
"
key2
"
)
)
;
}
TEST
(
LongStringDictionary
Iterator
)
{
LongStringDictionary
*
dict
=
new
LongStringDictionary
(
)
;
ASSERT_TRUE
(
dict
)
;
char
key
[
LongStringDictionary
:
:
key_size
]
;
char
value
[
LongStringDictionary
:
:
value_size
]
;
const
int
kDictionaryCapacity
=
LongStringDictionary
:
:
num_entries
;
const
int
kPartitionIndex
=
kDictionaryCapacity
-
5
;
ASSERT_GE
(
kDictionaryCapacity
64
)
;
int
expectedDictionarySize
=
0
;
for
(
int
i
=
0
;
i
<
kPartitionIndex
;
+
+
i
)
{
sprintf
(
key
"
key
%
d
"
i
)
;
sprintf
(
value
"
value
%
d
"
i
)
;
dict
-
>
SetKeyValue
(
key
value
)
;
}
expectedDictionarySize
=
kPartitionIndex
;
dict
-
>
SetKeyValue
(
"
key2
"
"
value2
"
)
;
dict
-
>
SetKeyValue
(
"
key4
"
"
value4
"
)
;
dict
-
>
SetKeyValue
(
"
key15
"
"
value15
"
)
;
dict
-
>
RemoveKey
(
"
key7
"
)
;
dict
-
>
RemoveKey
(
"
key18
"
)
;
dict
-
>
RemoveKey
(
"
key23
"
)
;
dict
-
>
RemoveKey
(
"
key31
"
)
;
expectedDictionarySize
-
=
4
;
for
(
int
i
=
kPartitionIndex
;
i
<
kDictionaryCapacity
;
+
+
i
)
{
sprintf
(
key
"
key
%
d
"
i
)
;
sprintf
(
value
"
value
%
d
"
i
)
;
dict
-
>
SetKeyValue
(
key
value
)
;
}
expectedDictionarySize
+
=
kDictionaryCapacity
-
kPartitionIndex
;
SimpleStringDictionary
:
:
Iterator
iter
(
*
dict
)
;
int
count
[
kDictionaryCapacity
]
;
memset
(
count
0
sizeof
(
count
)
)
;
int
totalCount
=
0
;
const
SimpleStringDictionary
:
:
Entry
*
entry
;
while
(
(
entry
=
iter
.
Next
(
)
)
)
{
totalCount
+
+
;
int
keyNumber
;
sscanf
(
entry
-
>
key
"
key
%
d
"
&
keyNumber
)
;
int
valueNumber
;
sscanf
(
entry
-
>
value
"
value
%
d
"
&
valueNumber
)
;
EXPECT_EQ
(
keyNumber
valueNumber
)
;
bool
isKeyInGoodRange
=
(
keyNumber
>
=
0
&
&
keyNumber
<
kDictionaryCapacity
)
;
bool
isValueInGoodRange
=
(
valueNumber
>
=
0
&
&
valueNumber
<
kDictionaryCapacity
)
;
EXPECT_TRUE
(
isKeyInGoodRange
)
;
EXPECT_TRUE
(
isValueInGoodRange
)
;
if
(
isKeyInGoodRange
&
&
isValueInGoodRange
)
{
+
+
count
[
keyNumber
]
;
}
}
for
(
size_t
i
=
0
;
i
<
kDictionaryCapacity
;
+
+
i
)
{
if
(
!
(
i
=
=
7
|
|
i
=
=
18
|
|
i
=
=
23
|
|
i
=
=
31
)
)
{
EXPECT_EQ
(
count
[
i
]
1
)
;
}
}
EXPECT_EQ
(
totalCount
expectedDictionarySize
)
;
}
TEST
(
LongStringDictionary
AddRemove
)
{
LongStringDictionary
dict
;
dict
.
SetKeyValue
(
"
rob
"
"
ert
"
)
;
dict
.
SetKeyValue
(
"
mike
"
"
pink
"
)
;
dict
.
SetKeyValue
(
"
mark
"
"
allays
"
)
;
EXPECT_EQ
(
3u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
"
ert
"
dict
.
GetValueForKey
(
"
rob
"
)
)
;
EXPECT_EQ
(
"
pink
"
dict
.
GetValueForKey
(
"
mike
"
)
)
;
EXPECT_EQ
(
"
allays
"
dict
.
GetValueForKey
(
"
mark
"
)
)
;
dict
.
RemoveKey
(
"
mike
"
)
;
EXPECT_EQ
(
2u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
"
"
dict
.
GetValueForKey
(
"
mike
"
)
)
;
dict
.
SetKeyValue
(
"
mark
"
"
mal
"
)
;
EXPECT_EQ
(
2u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
"
mal
"
dict
.
GetValueForKey
(
"
mark
"
)
)
;
dict
.
RemoveKey
(
"
mark
"
)
;
EXPECT_EQ
(
1u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
"
"
dict
.
GetValueForKey
(
"
mark
"
)
)
;
}
TEST
(
LongStringDictionary
AddRemoveLongValue
)
{
LongStringDictionary
dict
;
string
long_value
=
string
(
256
'
x
'
)
;
dict
.
SetKeyValue
(
"
rob
"
long_value
.
c_str
(
)
)
;
EXPECT_EQ
(
2u
dict
.
GetCount
(
)
)
;
string
long_value_part_1
=
string
(
255
'
x
'
)
;
EXPECT_EQ
(
long_value_part_1
dict
.
GetValueForKey
(
"
rob__1
"
)
)
;
EXPECT_EQ
(
"
x
"
dict
.
GetValueForKey
(
"
rob__2
"
)
)
;
EXPECT_EQ
(
long_value
dict
.
GetValueForKey
(
"
rob
"
)
)
;
dict
.
RemoveKey
(
"
rob
"
)
;
EXPECT_EQ
(
0u
dict
.
GetCount
(
)
)
;
}
TEST
(
LongStringDictionary
AddRemoveSuperLongValue
)
{
LongStringDictionary
dict
;
string
long_value
=
string
(
255
*
10
'
x
'
)
;
dict
.
SetKeyValue
(
"
rob
"
long_value
.
c_str
(
)
)
;
EXPECT_EQ
(
10u
dict
.
GetCount
(
)
)
;
string
long_value_part
=
string
(
255
'
x
'
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__1
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__2
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__3
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__4
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__5
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__6
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__7
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__8
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__9
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__10
"
)
)
;
EXPECT_EQ
(
10u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
long_value
dict
.
GetValueForKey
(
"
rob
"
)
)
;
dict
.
RemoveKey
(
"
rob
"
)
;
EXPECT_EQ
(
0u
dict
.
GetCount
(
)
)
;
}
TEST
(
LongStringDictionary
TruncateSuperLongValue
)
{
LongStringDictionary
dict
;
string
long_value
=
string
(
255
*
11
'
x
'
)
;
dict
.
SetKeyValue
(
"
rob
"
long_value
.
c_str
(
)
)
;
EXPECT_EQ
(
10u
dict
.
GetCount
(
)
)
;
string
long_value_part
=
string
(
255
'
x
'
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__1
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__2
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__3
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__4
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__5
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__6
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__7
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__8
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__9
"
)
)
;
EXPECT_EQ
(
long_value_part
dict
.
GetValueForKey
(
"
rob__10
"
)
)
;
EXPECT_EQ
(
10u
dict
.
GetCount
(
)
)
;
string
expected_long_value
=
string
(
255
*
10
'
x
'
)
;
EXPECT_EQ
(
expected_long_value
dict
.
GetValueForKey
(
"
rob
"
)
)
;
dict
.
RemoveKey
(
"
rob
"
)
;
EXPECT_EQ
(
0u
dict
.
GetCount
(
)
)
;
}
TEST
(
LongStringDictionary
OverrideLongValue
)
{
LongStringDictionary
dict
;
string
long_value
=
string
(
255
*
10
'
x
'
)
;
dict
.
SetKeyValue
(
"
rob
"
long_value
.
c_str
(
)
)
;
EXPECT_EQ
(
10u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
long_value
dict
.
GetValueForKey
(
"
rob
"
)
)
;
dict
.
SetKeyValue
(
"
rob
"
"
short_value
"
)
;
EXPECT_EQ
(
1u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
"
short_value
"
dict
.
GetValueForKey
(
"
rob
"
)
)
;
}
TEST
(
LongStringDictionary
OverrideShortValue
)
{
LongStringDictionary
dict
;
dict
.
SetKeyValue
(
"
rob
"
"
short_value
"
)
;
EXPECT_EQ
(
1u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
"
short_value
"
dict
.
GetValueForKey
(
"
rob
"
)
)
;
string
long_value
=
string
(
255
*
10
'
x
'
)
;
dict
.
SetKeyValue
(
"
rob
"
long_value
.
c_str
(
)
)
;
EXPECT_EQ
(
10u
dict
.
GetCount
(
)
)
;
EXPECT_EQ
(
long_value
dict
.
GetValueForKey
(
"
rob
"
)
)
;
}
}
