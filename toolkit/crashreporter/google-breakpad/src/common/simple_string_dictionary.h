#
ifndef
COMMON_SIMPLE_STRING_DICTIONARY_H_
#
define
COMMON_SIMPLE_STRING_DICTIONARY_H_
#
include
<
assert
.
h
>
#
include
<
string
.
h
>
#
include
"
common
/
basictypes
.
h
"
namespace
google_breakpad
{
struct
SerializedNonAllocatingMap
;
template
<
size_t
KeySize
size_t
ValueSize
size_t
NumEntries
>
class
NonAllocatingMap
{
public
:
static
const
size_t
key_size
=
KeySize
;
static
const
size_t
value_size
=
ValueSize
;
static
const
size_t
num_entries
=
NumEntries
;
struct
Entry
{
char
key
[
KeySize
]
;
char
value
[
ValueSize
]
;
bool
is_active
(
)
const
{
return
key
[
0
]
!
=
'
\
0
'
;
}
}
;
class
Iterator
{
public
:
explicit
Iterator
(
const
NonAllocatingMap
&
map
)
:
map_
(
map
)
current_
(
0
)
{
}
const
Entry
*
Next
(
)
{
while
(
current_
<
map_
.
num_entries
)
{
const
Entry
*
entry
=
&
map_
.
entries_
[
current_
+
+
]
;
if
(
entry
-
>
is_active
(
)
)
{
return
entry
;
}
}
return
NULL
;
}
private
:
const
NonAllocatingMap
&
map_
;
size_t
current_
;
DISALLOW_COPY_AND_ASSIGN
(
Iterator
)
;
}
;
NonAllocatingMap
(
)
:
entries_
(
)
{
}
NonAllocatingMap
(
const
NonAllocatingMap
&
other
)
{
*
this
=
other
;
}
NonAllocatingMap
&
operator
=
(
const
NonAllocatingMap
&
other
)
{
assert
(
other
.
key_size
=
=
key_size
)
;
assert
(
other
.
value_size
=
=
value_size
)
;
assert
(
other
.
num_entries
=
=
num_entries
)
;
if
(
other
.
key_size
=
=
key_size
&
&
other
.
value_size
=
=
value_size
&
&
other
.
num_entries
=
=
num_entries
)
{
memcpy
(
entries_
other
.
entries_
sizeof
(
entries_
)
)
;
}
return
*
this
;
}
NonAllocatingMap
(
const
SerializedNonAllocatingMap
*
map
size_t
size
)
{
assert
(
size
=
=
sizeof
(
entries_
)
)
;
if
(
size
=
=
sizeof
(
entries_
)
)
{
memcpy
(
entries_
map
size
)
;
}
}
size_t
GetCount
(
)
const
{
size_t
count
=
0
;
for
(
size_t
i
=
0
;
i
<
num_entries
;
+
+
i
)
{
if
(
entries_
[
i
]
.
is_active
(
)
)
{
+
+
count
;
}
}
return
count
;
}
const
char
*
GetValueForKey
(
const
char
*
key
)
const
{
assert
(
key
)
;
if
(
!
key
)
return
NULL
;
size_t
index
=
GetEntryIndexForKey
(
key
)
;
if
(
index
=
=
num_entries
)
return
NULL
;
return
entries_
[
index
]
.
value
;
}
size_t
SetKeyValue
(
const
char
*
key
const
char
*
value
)
{
if
(
!
value
)
{
RemoveKey
(
key
)
;
return
num_entries
;
}
assert
(
key
)
;
if
(
!
key
)
return
num_entries
;
assert
(
key
[
0
]
!
=
'
\
0
'
)
;
if
(
key
[
0
]
=
=
'
\
0
'
)
return
num_entries
;
size_t
entry_index
=
GetEntryIndexForKey
(
key
)
;
if
(
entry_index
=
=
num_entries
)
{
for
(
size_t
i
=
0
;
i
<
num_entries
;
+
+
i
)
{
if
(
!
entries_
[
i
]
.
is_active
(
)
)
{
entry_index
=
i
;
Entry
*
entry
=
&
entries_
[
i
]
;
strncpy
(
entry
-
>
key
key
key_size
)
;
entry
-
>
key
[
key_size
-
1
]
=
'
\
0
'
;
break
;
}
}
}
if
(
entry_index
=
=
num_entries
)
return
num_entries
;
#
ifndef
NDEBUG
int
count
=
0
;
for
(
size_t
i
=
0
;
i
<
num_entries
;
+
+
i
)
{
if
(
strncmp
(
entries_
[
i
]
.
key
key
key_size
)
=
=
0
)
+
+
count
;
}
assert
(
count
=
=
1
)
;
#
endif
strncpy
(
entries_
[
entry_index
]
.
value
value
value_size
)
;
entries_
[
entry_index
]
.
value
[
value_size
-
1
]
=
'
\
0
'
;
return
entry_index
;
}
void
SetValueAtIndex
(
size_t
index
const
char
*
value
)
{
assert
(
index
<
num_entries
)
;
if
(
index
>
=
num_entries
)
return
;
Entry
*
entry
=
&
entries_
[
index
]
;
assert
(
entry
-
>
key
[
0
]
!
=
'
\
0
'
)
;
strncpy
(
entry
-
>
value
value
value_size
)
;
entry
-
>
value
[
value_size
-
1
]
=
'
\
0
'
;
}
bool
RemoveKey
(
const
char
*
key
)
{
assert
(
key
)
;
if
(
!
key
)
return
false
;
return
RemoveAtIndex
(
GetEntryIndexForKey
(
key
)
)
;
}
bool
RemoveAtIndex
(
size_t
index
)
{
if
(
index
>
=
num_entries
)
return
false
;
entries_
[
index
]
.
key
[
0
]
=
'
\
0
'
;
entries_
[
index
]
.
value
[
0
]
=
'
\
0
'
;
return
true
;
}
size_t
Serialize
(
const
SerializedNonAllocatingMap
*
*
map
)
const
{
*
map
=
reinterpret_cast
<
const
SerializedNonAllocatingMap
*
>
(
entries_
)
;
return
sizeof
(
entries_
)
;
}
private
:
size_t
GetEntryIndexForKey
(
const
char
*
key
)
const
{
for
(
size_t
i
=
0
;
i
<
num_entries
;
+
+
i
)
{
if
(
strncmp
(
key
entries_
[
i
]
.
key
key_size
)
=
=
0
)
{
return
i
;
}
}
return
num_entries
;
}
Entry
entries_
[
NumEntries
]
;
}
;
typedef
NonAllocatingMap
<
256
256
64
>
SimpleStringDictionary
;
}
#
endif
