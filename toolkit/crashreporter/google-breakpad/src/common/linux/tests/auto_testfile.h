#
ifndef
GOOGLE_BREAKPAD_COMMON_LINUX_TESTS_AUTO_TESTFILE
#
define
GOOGLE_BREAKPAD_COMMON_LINUX_TESTS_AUTO_TESTFILE
#
include
<
unistd
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
string
>
#
include
"
breakpad_googletest_includes
.
h
"
#
include
"
common
/
linux
/
eintr_wrapper
.
h
"
#
include
"
common
/
tests
/
auto_tempdir
.
h
"
namespace
google_breakpad
{
class
AutoTestFile
{
public
:
explicit
AutoTestFile
(
const
char
*
test_prefix
)
{
Init
(
test_prefix
)
;
}
AutoTestFile
(
const
char
*
test_prefix
const
char
*
text
)
{
Init
(
test_prefix
)
;
if
(
fd_
>
=
0
)
WriteText
(
text
static_cast
<
size_t
>
(
strlen
(
text
)
)
)
;
}
AutoTestFile
(
const
char
*
test_prefix
const
char
*
text
size_t
text_len
)
{
Init
(
test_prefix
)
;
if
(
fd_
>
=
0
)
WriteText
(
text
text_len
)
;
}
~
AutoTestFile
(
)
{
if
(
fd_
>
=
0
)
{
close
(
fd_
)
;
fd_
=
-
1
;
}
}
bool
IsOk
(
)
{
return
fd_
>
=
0
;
}
int
GetFd
(
)
{
return
fd_
;
}
private
:
void
Init
(
const
char
*
test_prefix
)
{
fd_
=
-
1
;
char
path_templ
[
PATH_MAX
]
;
int
ret
=
snprintf
(
path_templ
sizeof
(
path_templ
)
TEMPDIR
"
/
%
s
-
unittest
.
XXXXXX
"
test_prefix
)
;
if
(
ret
>
=
static_cast
<
int
>
(
sizeof
(
path_templ
)
)
)
return
;
fd_
=
mkstemp
(
path_templ
)
;
if
(
fd_
<
0
)
return
;
unlink
(
path_templ
)
;
}
void
WriteText
(
const
char
*
text
size_t
text_len
)
{
ssize_t
r
=
HANDLE_EINTR
(
write
(
fd_
text
text_len
)
)
;
if
(
r
!
=
static_cast
<
ssize_t
>
(
text_len
)
)
{
close
(
fd_
)
;
fd_
=
-
1
;
return
;
}
lseek
(
fd_
0
SEEK_SET
)
;
}
int
fd_
;
}
;
}
#
endif
