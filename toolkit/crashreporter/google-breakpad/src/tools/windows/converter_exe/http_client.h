#
ifndef
TOOLS_CRASH_CONVERTER_WINDOWS_HTTP_CLIENT_H_
#
define
TOOLS_CRASH_CONVERTER_WINDOWS_HTTP_CLIENT_H_
#
include
<
tchar
.
h
>
#
include
<
windows
.
h
>
#
include
<
vector
>
typedef
void
*
HttpHandle
;
namespace
crash
{
class
HttpClient
{
public
:
enum
AccessType
{
ACCESS_TYPE_PRECONFIG
ACCESS_TYPE_DIRECT
ACCESS_TYPE_PROXY
}
;
virtual
~
HttpClient
(
)
{
}
virtual
bool
CrackUrl
(
const
TCHAR
*
url
DWORD
flags
TCHAR
*
scheme
size_t
scheme_buffer_length
TCHAR
*
host
size_t
host_buffer_length
TCHAR
*
uri
size_t
uri_buffer_length
int
*
port
)
const
=
0
;
virtual
bool
Open
(
const
TCHAR
*
user_agent
DWORD
access_type
const
TCHAR
*
proxy_name
const
TCHAR
*
proxy_bypass
HttpHandle
*
session_handle
)
const
=
0
;
virtual
bool
Connect
(
HttpHandle
session_handle
const
TCHAR
*
server
int
port
HttpHandle
*
connection_handle
)
const
=
0
;
virtual
bool
OpenRequest
(
HttpHandle
connection_handle
const
TCHAR
*
verb
const
TCHAR
*
uri
const
TCHAR
*
version
const
TCHAR
*
referrer
bool
is_secure
HttpHandle
*
request_handle
)
const
=
0
;
virtual
bool
SendRequest
(
HttpHandle
request_handle
const
TCHAR
*
headers
DWORD
headers_length
)
const
=
0
;
virtual
bool
ReceiveResponse
(
HttpHandle
request_handle
)
const
=
0
;
virtual
bool
GetHttpStatusCode
(
HttpHandle
request_handle
int
*
status_code
)
const
=
0
;
virtual
bool
GetContentLength
(
HttpHandle
request_handle
DWORD
*
content_length
)
const
=
0
;
virtual
bool
ReadData
(
HttpHandle
request_handle
void
*
buffer
DWORD
buffer_length
DWORD
*
bytes_read
)
const
=
0
;
virtual
bool
Close
(
HttpHandle
handle
)
const
=
0
;
static
const
DWORD
kUnknownContentLength
=
(
DWORD
)
-
1
;
}
;
}
#
endif
