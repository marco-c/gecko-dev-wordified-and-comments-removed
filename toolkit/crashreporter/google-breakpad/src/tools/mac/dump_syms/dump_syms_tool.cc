#
include
<
mach
-
o
/
arch
.
h
>
#
include
<
unistd
.
h
>
#
include
<
iostream
>
#
include
<
vector
>
#
include
"
common
/
mac
/
dump_syms
.
h
"
#
include
"
common
/
mac
/
arch_utilities
.
h
"
#
include
"
common
/
mac
/
macho_utilities
.
h
"
using
google_breakpad
:
:
DumpSymbols
;
using
std
:
:
vector
;
struct
Options
{
Options
(
)
:
srcPath
(
)
arch
(
)
cfi
(
true
)
{
}
string
srcPath
;
const
NXArchInfo
*
arch
;
bool
cfi
;
}
;
static
bool
Start
(
const
Options
&
options
)
{
DumpSymbols
dump_symbols
(
options
.
cfi
?
ALL_SYMBOL_DATA
:
NO_CFI
)
;
if
(
!
dump_symbols
.
Read
(
options
.
srcPath
)
)
return
false
;
if
(
options
.
arch
)
{
if
(
!
dump_symbols
.
SetArchitecture
(
options
.
arch
-
>
cputype
options
.
arch
-
>
cpusubtype
)
)
{
fprintf
(
stderr
"
%
s
:
no
architecture
'
%
s
'
is
present
in
file
.
\
n
"
options
.
srcPath
.
c_str
(
)
options
.
arch
-
>
name
)
;
size_t
available_size
;
const
struct
fat_arch
*
available
=
dump_symbols
.
AvailableArchitectures
(
&
available_size
)
;
if
(
available_size
=
=
1
)
fprintf
(
stderr
"
the
file
'
s
architecture
is
:
"
)
;
else
fprintf
(
stderr
"
architectures
present
in
the
file
are
:
\
n
"
)
;
for
(
size_t
i
=
0
;
i
<
available_size
;
i
+
+
)
{
const
struct
fat_arch
*
arch
=
&
available
[
i
]
;
const
NXArchInfo
*
arch_info
=
google_breakpad
:
:
BreakpadGetArchInfoFromCpuType
(
arch
-
>
cputype
arch
-
>
cpusubtype
)
;
if
(
arch_info
)
fprintf
(
stderr
"
%
s
(
%
s
)
\
n
"
arch_info
-
>
name
arch_info
-
>
description
)
;
else
fprintf
(
stderr
"
unrecognized
cpu
type
0x
%
x
subtype
0x
%
x
\
n
"
arch
-
>
cputype
arch
-
>
cpusubtype
)
;
}
return
false
;
}
}
return
dump_symbols
.
WriteSymbolFile
(
std
:
:
cout
)
;
}
static
void
Usage
(
int
argc
const
char
*
argv
[
]
)
{
fprintf
(
stderr
"
Output
a
Breakpad
symbol
file
from
a
Mach
-
o
file
.
\
n
"
)
;
fprintf
(
stderr
"
Usage
:
%
s
[
-
a
ARCHITECTURE
]
[
-
c
]
<
Mach
-
o
file
>
\
n
"
argv
[
0
]
)
;
fprintf
(
stderr
"
\
t
-
a
:
Architecture
type
[
default
:
native
or
whatever
is
\
n
"
)
;
fprintf
(
stderr
"
\
t
in
the
file
if
it
contains
only
one
architecture
]
\
n
"
)
;
fprintf
(
stderr
"
\
t
-
c
:
Do
not
generate
CFI
section
\
n
"
)
;
fprintf
(
stderr
"
\
t
-
h
:
Usage
\
n
"
)
;
fprintf
(
stderr
"
\
t
-
?
:
Usage
\
n
"
)
;
}
static
void
SetupOptions
(
int
argc
const
char
*
argv
[
]
Options
*
options
)
{
extern
int
optind
;
signed
char
ch
;
while
(
(
ch
=
getopt
(
argc
(
char
*
const
*
)
argv
"
a
:
ch
?
"
)
)
!
=
-
1
)
{
switch
(
ch
)
{
case
'
a
'
:
{
const
NXArchInfo
*
arch_info
=
google_breakpad
:
:
BreakpadGetArchInfoFromName
(
optarg
)
;
if
(
!
arch_info
)
{
fprintf
(
stderr
"
%
s
:
Invalid
architecture
:
%
s
\
n
"
argv
[
0
]
optarg
)
;
Usage
(
argc
argv
)
;
exit
(
1
)
;
}
options
-
>
arch
=
arch_info
;
break
;
}
case
'
c
'
:
options
-
>
cfi
=
false
;
break
;
case
'
?
'
:
case
'
h
'
:
Usage
(
argc
argv
)
;
exit
(
0
)
;
break
;
}
}
if
(
(
argc
-
optind
)
!
=
1
)
{
fprintf
(
stderr
"
Must
specify
Mach
-
o
file
\
n
"
)
;
Usage
(
argc
argv
)
;
exit
(
1
)
;
}
options
-
>
srcPath
=
argv
[
optind
]
;
}
int
main
(
int
argc
const
char
*
argv
[
]
)
{
Options
options
;
bool
result
;
SetupOptions
(
argc
argv
&
options
)
;
result
=
Start
(
options
)
;
return
!
result
;
}
