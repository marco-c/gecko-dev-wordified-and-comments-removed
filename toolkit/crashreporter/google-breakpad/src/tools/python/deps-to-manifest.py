"
"
"
Convert
gclient
'
s
DEPS
file
to
repo
'
s
manifest
xml
file
.
"
"
"
from
__future__
import
print_function
import
argparse
import
os
import
sys
REMOTES
=
{
    
'
chromium
'
:
'
https
:
/
/
chromium
.
googlesource
.
com
/
'
    
'
github
'
:
'
https
:
/
/
github
.
com
/
'
}
REVIEWS
=
{
    
'
chromium
'
:
'
https
:
/
/
chromium
-
review
.
googlesource
.
com
'
}
MANIFEST_HEAD
=
"
"
"
<
?
xml
version
=
'
1
.
0
'
encoding
=
'
UTF
-
8
'
?
>
<
!
-
-
AUTOGENERATED
BY
%
(
prog
)
s
;
DO
NOT
EDIT
-
-
>
<
manifest
>
  
<
default
revision
=
'
refs
/
heads
/
master
'
           
remote
=
'
chromium
'
           
sync
-
c
=
'
true
'
           
sync
-
j
=
'
8
'
/
>
"
"
"
MANIFEST_REMOTE
=
"
"
"
  
<
remote
name
=
'
%
(
name
)
s
'
           
fetch
=
'
%
(
fetch
)
s
'
           
review
=
'
%
(
review
)
s
'
/
>
"
"
"
MANIFEST_PROJECT
=
"
"
"
  
<
project
path
=
'
%
(
path
)
s
'
           
name
=
'
%
(
name
)
s
'
           
revision
=
'
%
(
revision
)
s
'
           
remote
=
'
%
(
remote
)
s
'
/
>
"
"
"
MANIFEST_TAIL
=
"
"
"
<
/
manifest
>
"
"
"
def
ConvertDepsToManifest
(
deps
manifest
)
:
  
"
"
"
Convert
the
|
deps
|
file
to
the
|
manifest
|
.
"
"
"
  
ctx
=
{
}
  
execfile
(
deps
ctx
)
  
new_contents
=
'
'
  
data
=
{
      
'
prog
'
:
os
.
path
.
basename
(
__file__
)
  
}
  
new_contents
+
=
MANIFEST_HEAD
%
data
  
for
name
fetch
in
REMOTES
.
items
(
)
:
    
data
=
{
        
'
name
'
:
name
        
'
fetch
'
:
fetch
        
'
review
'
:
REVIEWS
.
get
(
name
'
'
)
    
}
    
new_contents
+
=
MANIFEST_REMOTE
%
data
  
data
=
{
      
'
path
'
:
'
src
'
      
'
name
'
:
'
breakpad
/
breakpad
'
      
'
revision
'
:
'
refs
/
heads
/
master
'
      
'
remote
'
:
'
chromium
'
  
}
  
new_contents
+
=
MANIFEST_PROJECT
%
data
  
for
path
url
in
ctx
[
'
deps
'
]
.
items
(
)
:
    
for
name
fetch
in
REMOTES
.
items
(
)
:
      
if
url
.
startswith
(
fetch
)
:
        
remote
=
name
        
break
    
else
:
      
raise
ValueError
(
'
Unknown
DEPS
remote
:
%
s
:
%
s
'
%
(
path
url
)
)
    
remote_path
rev
=
url
.
split
(
'
'
)
    
remote_path
=
remote_path
[
len
(
fetch
)
:
]
    
if
len
(
rev
)
!
=
40
:
      
rev
=
'
refs
/
tags
/
%
s
'
%
rev
    
data
=
{
        
'
path
'
:
path
        
'
name
'
:
remote_path
        
'
revision
'
:
rev
        
'
remote
'
:
remote
    
}
    
new_contents
+
=
MANIFEST_PROJECT
%
data
  
new_contents
+
=
MANIFEST_TAIL
  
try
:
    
old_contents
=
open
(
manifest
)
.
read
(
)
  
except
IOError
:
    
old_contents
=
'
'
  
if
old_contents
!
=
new_contents
:
    
print
(
'
Updating
%
s
due
to
changed
%
s
'
%
(
manifest
deps
)
)
    
with
open
(
manifest
'
w
'
)
as
fp
:
      
fp
.
write
(
new_contents
)
def
GetParser
(
)
:
  
"
"
"
Return
a
CLI
parser
.
"
"
"
  
parser
=
argparse
.
ArgumentParser
(
description
=
__doc__
)
  
parser
.
add_argument
(
'
deps
'
                      
help
=
'
The
DEPS
file
to
convert
'
)
  
parser
.
add_argument
(
'
manifest
'
                      
help
=
'
The
manifest
xml
to
generate
'
)
  
return
parser
def
main
(
argv
)
:
  
"
"
"
The
main
func
!
"
"
"
  
parser
=
GetParser
(
)
  
opts
=
parser
.
parse_args
(
argv
)
  
ConvertDepsToManifest
(
opts
.
deps
opts
.
manifest
)
if
__name__
=
=
'
__main__
'
:
  
sys
.
exit
(
main
(
sys
.
argv
[
1
:
]
)
)
