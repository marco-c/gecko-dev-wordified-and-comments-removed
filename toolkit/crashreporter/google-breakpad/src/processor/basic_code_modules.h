#
ifndef
PROCESSOR_BASIC_CODE_MODULES_H__
#
define
PROCESSOR_BASIC_CODE_MODULES_H__
#
include
<
stddef
.
h
>
#
include
<
vector
>
#
include
"
google_breakpad
/
processor
/
code_modules
.
h
"
#
include
"
processor
/
linked_ptr
.
h
"
#
include
"
processor
/
range_map
.
h
"
namespace
google_breakpad
{
class
BasicCodeModules
:
public
CodeModules
{
public
:
BasicCodeModules
(
const
CodeModules
*
that
MergeRangeStrategy
strategy
)
;
virtual
~
BasicCodeModules
(
)
;
virtual
unsigned
int
module_count
(
)
const
;
virtual
const
CodeModule
*
GetModuleForAddress
(
uint64_t
address
)
const
;
virtual
const
CodeModule
*
GetMainModule
(
)
const
;
virtual
const
CodeModule
*
GetModuleAtSequence
(
unsigned
int
sequence
)
const
;
virtual
const
CodeModule
*
GetModuleAtIndex
(
unsigned
int
index
)
const
;
virtual
const
CodeModules
*
Copy
(
)
const
;
virtual
std
:
:
vector
<
linked_ptr
<
const
CodeModule
>
>
GetShrunkRangeModules
(
)
const
;
protected
:
BasicCodeModules
(
)
;
uint64_t
main_address_
;
RangeMap
<
uint64_t
linked_ptr
<
const
CodeModule
>
>
map_
;
std
:
:
vector
<
linked_ptr
<
const
CodeModule
>
>
shrunk_range_modules_
;
private
:
BasicCodeModules
(
const
BasicCodeModules
&
that
)
;
void
operator
=
(
const
BasicCodeModules
&
that
)
;
}
;
}
#
endif
