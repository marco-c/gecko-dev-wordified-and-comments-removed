#
include
"
processor
/
basic_code_modules
.
h
"
#
include
<
assert
.
h
>
#
include
<
vector
>
#
include
"
google_breakpad
/
processor
/
code_module
.
h
"
#
include
"
processor
/
linked_ptr
.
h
"
#
include
"
processor
/
logging
.
h
"
#
include
"
processor
/
range_map
-
inl
.
h
"
namespace
google_breakpad
{
using
std
:
:
vector
;
BasicCodeModules
:
:
BasicCodeModules
(
const
CodeModules
*
that
MergeRangeStrategy
strategy
)
:
main_address_
(
0
)
map_
(
)
{
BPLOG_IF
(
ERROR
!
that
)
<
<
"
BasicCodeModules
:
:
BasicCodeModules
requires
"
"
|
that
|
"
;
assert
(
that
)
;
map_
.
SetMergeStrategy
(
strategy
)
;
const
CodeModule
*
main_module
=
that
-
>
GetMainModule
(
)
;
if
(
main_module
)
main_address_
=
main_module
-
>
base_address
(
)
;
unsigned
int
count
=
that
-
>
module_count
(
)
;
for
(
unsigned
int
i
=
0
;
i
<
count
;
+
+
i
)
{
linked_ptr
<
const
CodeModule
>
module
(
that
-
>
GetModuleAtIndex
(
i
)
-
>
Copy
(
)
)
;
if
(
!
map_
.
StoreRange
(
module
-
>
base_address
(
)
module
-
>
size
(
)
module
)
)
{
BPLOG
(
ERROR
)
<
<
"
Module
"
<
<
module
-
>
code_file
(
)
<
<
"
could
not
be
stored
"
;
}
}
for
(
unsigned
int
i
=
0
;
i
<
count
;
+
+
i
)
{
linked_ptr
<
const
CodeModule
>
module
(
that
-
>
GetModuleAtIndex
(
i
)
-
>
Copy
(
)
)
;
uint64_t
delta
=
0
;
if
(
map_
.
RetrieveRange
(
module
-
>
base_address
(
)
+
module
-
>
size
(
)
-
1
&
module
NULL
&
delta
NULL
)
&
&
delta
>
0
)
{
BPLOG
(
INFO
)
<
<
"
The
range
for
module
"
<
<
module
-
>
code_file
(
)
<
<
"
was
shrunk
down
by
"
<
<
HexString
(
delta
)
<
<
"
bytes
.
"
;
linked_ptr
<
CodeModule
>
shrunk_range_module
(
module
-
>
Copy
(
)
)
;
shrunk_range_module
-
>
SetShrinkDownDelta
(
delta
)
;
shrunk_range_modules_
.
push_back
(
shrunk_range_module
)
;
}
}
}
BasicCodeModules
:
:
BasicCodeModules
(
)
:
main_address_
(
0
)
map_
(
)
{
}
BasicCodeModules
:
:
~
BasicCodeModules
(
)
{
}
unsigned
int
BasicCodeModules
:
:
module_count
(
)
const
{
return
map_
.
GetCount
(
)
;
}
const
CodeModule
*
BasicCodeModules
:
:
GetModuleForAddress
(
uint64_t
address
)
const
{
linked_ptr
<
const
CodeModule
>
module
;
if
(
!
map_
.
RetrieveRange
(
address
&
module
NULL
NULL
NULL
)
)
{
BPLOG
(
INFO
)
<
<
"
No
module
at
"
<
<
HexString
(
address
)
;
return
NULL
;
}
return
module
.
get
(
)
;
}
const
CodeModule
*
BasicCodeModules
:
:
GetMainModule
(
)
const
{
return
GetModuleForAddress
(
main_address_
)
;
}
const
CodeModule
*
BasicCodeModules
:
:
GetModuleAtSequence
(
unsigned
int
sequence
)
const
{
linked_ptr
<
const
CodeModule
>
module
;
if
(
!
map_
.
RetrieveRangeAtIndex
(
sequence
&
module
NULL
NULL
NULL
)
)
{
BPLOG
(
ERROR
)
<
<
"
RetrieveRangeAtIndex
failed
for
sequence
"
<
<
sequence
;
return
NULL
;
}
return
module
.
get
(
)
;
}
const
CodeModule
*
BasicCodeModules
:
:
GetModuleAtIndex
(
unsigned
int
index
)
const
{
return
GetModuleAtSequence
(
index
)
;
}
const
CodeModules
*
BasicCodeModules
:
:
Copy
(
)
const
{
return
new
BasicCodeModules
(
this
map_
.
GetMergeStrategy
(
)
)
;
}
vector
<
linked_ptr
<
const
CodeModule
>
>
BasicCodeModules
:
:
GetShrunkRangeModules
(
)
const
{
return
shrunk_range_modules_
;
}
}
