#
ifndef
GOOGLE_BREAKPAD_PROCESSOR_EXPLOITABILITY_LINUX_H_
#
define
GOOGLE_BREAKPAD_PROCESSOR_EXPLOITABILITY_LINUX_H_
#
include
"
google_breakpad
/
common
/
breakpad_types
.
h
"
#
include
"
google_breakpad
/
processor
/
exploitability
.
h
"
namespace
google_breakpad
{
class
ExploitabilityLinux
:
public
Exploitability
{
public
:
ExploitabilityLinux
(
Minidump
*
dump
ProcessState
*
process_state
)
;
ExploitabilityLinux
(
Minidump
*
dump
ProcessState
*
process_state
bool
enable_objdump
)
;
virtual
ExploitabilityRating
CheckPlatformExploitability
(
)
;
private
:
friend
class
ExploitabilityLinuxTest
;
bool
InstructionPointerInCode
(
uint64_t
instruction_ptr
)
;
bool
BenignCrashTrigger
(
const
MDRawExceptionStream
*
raw_exception_stream
)
;
bool
EndedOnIllegalWrite
(
uint64_t
instruction_ptr
)
;
#
ifndef
_WIN32
static
bool
DisassembleBytes
(
const
string
&
architecture
const
uint8_t
*
raw_bytes
const
unsigned
int
MAX_OBJDUMP_BUFFER_LEN
char
*
objdump_output_buffer
)
;
static
bool
TokenizeObjdumpInstruction
(
const
string
&
line
string
*
operation
string
*
dest
string
*
src
)
;
static
bool
CalculateAddress
(
const
string
&
address_expression
const
DumpContext
&
context
uint64_t
*
write_address
)
;
#
endif
bool
StackPointerOffStack
(
uint64_t
stack_ptr
)
;
bool
ExecutableStackOrHeap
(
)
;
bool
enable_objdump_
;
}
;
}
#
endif
