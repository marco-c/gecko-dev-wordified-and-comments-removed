#
ifndef
PROCESSOR_RANGE_MAP_H__
#
define
PROCESSOR_RANGE_MAP_H__
#
include
<
map
>
namespace
google_breakpad
{
template
<
class
class
>
class
RangeMapSerializer
;
template
<
typename
AddressType
typename
EntryType
>
class
RangeMap
{
public
:
RangeMap
(
)
:
enable_shrink_down_
(
false
)
map_
(
)
{
}
void
SetEnableShrinkDown
(
bool
enable_shrink_down
)
;
bool
IsShrinkDownEnabled
(
)
const
;
bool
StoreRange
(
const
AddressType
&
base
const
AddressType
&
size
const
EntryType
&
entry
)
;
bool
RetrieveRange
(
const
AddressType
&
address
EntryType
*
entry
AddressType
*
entry_base
AddressType
*
entry_delta
AddressType
*
entry_size
)
const
;
bool
RetrieveNearestRange
(
const
AddressType
&
address
EntryType
*
entry
AddressType
*
entry_base
AddressType
*
entry_delta
AddressType
*
entry_size
)
const
;
bool
RetrieveRangeAtIndex
(
int
index
EntryType
*
entry
AddressType
*
entry_base
AddressType
*
entry_delta
AddressType
*
entry_size
)
const
;
int
GetCount
(
)
const
;
void
Clear
(
)
;
private
:
friend
class
ModuleComparer
;
friend
class
RangeMapSerializer
<
AddressType
EntryType
>
;
bool
StoreRangeInternal
(
const
AddressType
&
base
const
AddressType
&
delta
const
AddressType
&
size
const
EntryType
&
entry
)
;
class
Range
{
public
:
Range
(
const
AddressType
&
base
const
AddressType
&
delta
const
EntryType
&
entry
)
:
base_
(
base
)
delta_
(
delta
)
entry_
(
entry
)
{
}
AddressType
base
(
)
const
{
return
base_
;
}
AddressType
delta
(
)
const
{
return
delta_
;
}
EntryType
entry
(
)
const
{
return
entry_
;
}
private
:
const
AddressType
base_
;
const
AddressType
delta_
;
const
EntryType
entry_
;
}
;
typedef
std
:
:
map
<
AddressType
Range
>
AddressToRangeMap
;
typedef
typename
AddressToRangeMap
:
:
const_iterator
MapConstIterator
;
typedef
typename
AddressToRangeMap
:
:
value_type
MapValue
;
bool
enable_shrink_down_
;
AddressToRangeMap
map_
;
}
;
}
#
endif
