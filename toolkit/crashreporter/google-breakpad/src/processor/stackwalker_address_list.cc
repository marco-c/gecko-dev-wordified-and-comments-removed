#
include
<
assert
.
h
>
#
include
<
vector
>
#
include
"
google_breakpad
/
processor
/
call_stack
.
h
"
#
include
"
google_breakpad
/
processor
/
memory_region
.
h
"
#
include
"
google_breakpad
/
processor
/
source_line_resolver_interface
.
h
"
#
include
"
google_breakpad
/
processor
/
stack_frame
.
h
"
#
include
"
processor
/
logging
.
h
"
#
include
"
processor
/
stackwalker_address_list
.
h
"
namespace
google_breakpad
{
StackwalkerAddressList
:
:
StackwalkerAddressList
(
const
uint64_t
*
frames
size_t
frame_count
const
CodeModules
*
modules
StackFrameSymbolizer
*
frame_symbolizer
)
:
Stackwalker
(
NULL
NULL
modules
frame_symbolizer
)
frames_
(
frames
)
frame_count_
(
frame_count
)
{
assert
(
frames
)
;
assert
(
frame_symbolizer
)
;
}
StackFrame
*
StackwalkerAddressList
:
:
GetContextFrame
(
)
{
if
(
frame_count_
=
=
0
)
return
NULL
;
StackFrame
*
frame
=
new
StackFrame
(
)
;
frame
-
>
instruction
=
frames_
[
0
]
;
frame
-
>
trust
=
StackFrame
:
:
FRAME_TRUST_PREWALKED
;
return
frame
;
}
StackFrame
*
StackwalkerAddressList
:
:
GetCallerFrame
(
const
CallStack
*
stack
bool
stack_scan_allowed
)
{
if
(
!
stack
)
{
BPLOG
(
ERROR
)
<
<
"
Can
'
t
get
caller
frame
without
stack
"
;
return
NULL
;
}
size_t
frame_index
=
stack
-
>
frames
(
)
-
>
size
(
)
;
if
(
frame_index
>
=
frame_count_
)
return
NULL
;
StackFrame
*
frame
=
new
StackFrame
(
)
;
frame
-
>
instruction
=
frames_
[
frame_index
]
;
frame
-
>
trust
=
StackFrame
:
:
FRAME_TRUST_PREWALKED
;
return
frame
;
}
}
