#
include
"
processor
/
stackwalker_ppc64
.
h
"
#
include
"
google_breakpad
/
processor
/
call_stack
.
h
"
#
include
"
google_breakpad
/
processor
/
memory_region
.
h
"
#
include
"
google_breakpad
/
processor
/
stack_frame_cpu
.
h
"
#
include
"
processor
/
logging
.
h
"
#
include
<
stdio
.
h
>
namespace
google_breakpad
{
StackwalkerPPC64
:
:
StackwalkerPPC64
(
const
SystemInfo
*
system_info
const
MDRawContextPPC64
*
context
MemoryRegion
*
memory
const
CodeModules
*
modules
StackFrameSymbolizer
*
resolver_helper
)
:
Stackwalker
(
system_info
memory
modules
resolver_helper
)
context_
(
context
)
{
}
StackFrame
*
StackwalkerPPC64
:
:
GetContextFrame
(
)
{
if
(
!
context_
)
{
BPLOG
(
ERROR
)
<
<
"
Can
'
t
get
context
frame
without
context
"
;
return
NULL
;
}
StackFramePPC64
*
frame
=
new
StackFramePPC64
(
)
;
frame
-
>
context
=
*
context_
;
frame
-
>
context_validity
=
StackFramePPC64
:
:
CONTEXT_VALID_ALL
;
frame
-
>
trust
=
StackFrame
:
:
FRAME_TRUST_CONTEXT
;
frame
-
>
instruction
=
frame
-
>
context
.
srr0
;
return
frame
;
}
StackFrame
*
StackwalkerPPC64
:
:
GetCallerFrame
(
const
CallStack
*
stack
bool
stack_scan_allowed
)
{
if
(
!
memory_
|
|
!
stack
)
{
BPLOG
(
ERROR
)
<
<
"
Can
'
t
get
caller
frame
without
memory
or
stack
"
;
return
NULL
;
}
StackFramePPC64
*
last_frame
=
static_cast
<
StackFramePPC64
*
>
(
stack
-
>
frames
(
)
-
>
back
(
)
)
;
uint64_t
stack_pointer
;
if
(
!
memory_
-
>
GetMemoryAtAddress
(
last_frame
-
>
context
.
gpr
[
1
]
&
stack_pointer
)
|
|
stack_pointer
<
=
last_frame
-
>
context
.
gpr
[
1
]
)
{
return
NULL
;
}
uint64_t
instruction
;
if
(
!
memory_
-
>
GetMemoryAtAddress
(
stack_pointer
+
16
&
instruction
)
|
|
instruction
<
=
1
)
{
return
NULL
;
}
StackFramePPC64
*
frame
=
new
StackFramePPC64
(
)
;
frame
-
>
context
=
last_frame
-
>
context
;
frame
-
>
context
.
srr0
=
instruction
;
frame
-
>
context
.
gpr
[
1
]
=
stack_pointer
;
frame
-
>
context_validity
=
StackFramePPC64
:
:
CONTEXT_VALID_SRR0
|
StackFramePPC64
:
:
CONTEXT_VALID_GPR1
;
frame
-
>
trust
=
StackFrame
:
:
FRAME_TRUST_FP
;
frame
-
>
instruction
=
frame
-
>
context
.
srr0
-
8
;
return
frame
;
}
}
