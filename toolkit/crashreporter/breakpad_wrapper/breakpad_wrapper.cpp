#
include
<
string
>
#
if
defined
(
XP_LINUX
)
#
include
<
sys
/
signalfd
.
h
>
#
include
<
sys
/
ucontext
.
h
>
#
include
"
linux
/
crash_generation
/
client_info
.
h
"
#
include
"
linux
/
crash_generation
/
crash_generation_server
.
h
"
using
breakpad_char
=
char
;
using
breakpad_string
=
std
:
:
string
;
using
breakpad_init_type
=
int
;
using
breakpad_pid
=
pid_t
;
#
elif
defined
(
XP_WIN
)
#
include
"
windows
/
crash_generation
/
client_info
.
h
"
#
include
"
windows
/
crash_generation
/
crash_generation_server
.
h
"
using
breakpad_char
=
wchar_t
;
using
breakpad_string
=
std
:
:
wstring
;
using
breakpad_init_type
=
wchar_t
*
;
using
breakpad_pid
=
DWORD
;
#
elif
defined
(
XP_MACOSX
)
#
include
<
mach
/
mach_types
.
h
>
#
include
<
unistd
.
h
>
#
include
"
mac
/
crash_generation
/
client_info
.
h
"
#
include
"
mac
/
crash_generation
/
crash_generation_server
.
h
"
using
breakpad_char
=
char
;
using
breakpad_string
=
std
:
:
string
;
using
breakpad_init_type
=
const
char
*
;
using
breakpad_pid
=
pid_t
;
#
else
#
error
"
Unsupported
platform
"
#
endif
#
ifdef
MOZ_PHC
#
include
"
PHC
.
h
"
namespace
mozilla
:
:
phc
{
MOZ_RUNINIT
mozilla
:
:
phc
:
:
AddrInfo
gAddrInfo
;
}
#
endif
using
google_breakpad
:
:
ClientInfo
;
using
google_breakpad
:
:
CrashGenerationServer
;
struct
BreakpadProcessId
{
breakpad_pid
pid
;
#
if
defined
(
XP_MACOSX
)
task_t
task
;
#
elif
defined
(
XP_WIN
)
HANDLE
handle
;
#
endif
}
;
using
RustCallback
=
void
(
*
)
(
BreakpadProcessId
const
char
*
const
breakpad_char
*
)
;
void
onClientDumpRequestCallback
(
void
*
context
const
ClientInfo
&
client_info
const
breakpad_string
&
file_path
)
{
RustCallback
callback
=
reinterpret_cast
<
RustCallback
>
(
context
)
;
BreakpadProcessId
process_id
=
{
.
pid
=
client_info
.
pid
(
)
#
if
defined
(
XP_MACOSX
)
.
task
=
client_info
.
task
(
)
#
elif
defined
(
XP_WIN
)
.
handle
=
client_info
.
process_handle
(
)
#
endif
}
;
const
char
*
error_msg
=
#
if
defined
(
XP_LINUX
)
client_info
.
error_msg
(
)
;
#
else
nullptr
;
#
endif
callback
(
process_id
error_msg
file_path
.
c_str
(
)
)
;
}
#
ifdef
XP_WIN
extern
"
C
"
void
*
CrashGenerationServer_init
(
breakpad_init_type
aBreakpadData
const
breakpad_char
*
aMinidumpPath
RustCallback
aDumpCallback
)
{
breakpad_string
minidumpPath
(
aMinidumpPath
)
;
breakpad_string
breakpadData
(
aBreakpadData
)
;
CrashGenerationServer
*
server
=
new
CrashGenerationServer
(
breakpadData
nullptr
nullptr
nullptr
onClientDumpRequestCallback
reinterpret_cast
<
void
*
>
(
aDumpCallback
)
nullptr
nullptr
nullptr
nullptr
nullptr
true
&
minidumpPath
)
;
if
(
!
server
-
>
Start
(
)
)
{
delete
server
;
return
nullptr
;
}
return
server
;
}
#
elif
defined
(
XP_MACOSX
)
extern
"
C
"
void
*
CrashGenerationServer_init
(
breakpad_init_type
aBreakpadData
const
breakpad_char
*
aMinidumpPath
RustCallback
aDumpCallback
)
{
breakpad_string
minidumpPath
(
aMinidumpPath
)
;
breakpad_init_type
breakpadData
=
aBreakpadData
;
CrashGenerationServer
*
server
=
new
CrashGenerationServer
(
breakpadData
nullptr
nullptr
onClientDumpRequestCallback
reinterpret_cast
<
void
*
>
(
aDumpCallback
)
nullptr
nullptr
true
minidumpPath
)
;
if
(
!
server
-
>
Start
(
)
)
{
delete
server
;
return
nullptr
;
}
return
server
;
}
#
elif
defined
(
XP_LINUX
)
extern
"
C
"
void
*
CrashGenerationServer_init
(
breakpad_init_type
aBreakpadData
const
breakpad_char
*
aMinidumpPath
RustCallback
aDumpCallback
)
{
breakpad_string
minidumpPath
(
aMinidumpPath
)
;
breakpad_init_type
breakpadData
=
aBreakpadData
;
CrashGenerationServer
*
server
=
new
CrashGenerationServer
(
breakpadData
[
]
(
void
*
aDumpContext
const
ClientInfo
&
aClientInfo
const
breakpad_string
&
aFilePath
)
{
onClientDumpRequestCallback
(
aDumpContext
aClientInfo
aFilePath
)
;
}
reinterpret_cast
<
void
*
>
(
aDumpCallback
)
&
minidumpPath
)
;
if
(
!
server
-
>
Start
(
)
)
{
delete
server
;
return
nullptr
;
}
return
server
;
}
#
endif
extern
"
C
"
void
CrashGenerationServer_shutdown
(
void
*
aServer
)
{
CrashGenerationServer
*
server
=
static_cast
<
CrashGenerationServer
*
>
(
aServer
)
;
delete
server
;
}
extern
"
C
"
void
CrashGenerationServer_set_path
(
void
*
aServer
const
breakpad_char
*
aMinidumpPath
)
{
CrashGenerationServer
*
server
=
static_cast
<
CrashGenerationServer
*
>
(
aServer
)
;
server
-
>
SetPath
(
aMinidumpPath
)
;
}
