use
std
:
:
path
:
:
PathBuf
;
#
[
derive
(
Debug
thiserror
:
:
Error
)
]
pub
enum
Error
{
#
[
error
(
"
failed
to
open
{
}
:
{
source
}
"
.
path
.
display
(
)
)
]
FailedToOpenFile
{
path
:
PathBuf
source
:
std
:
:
io
:
:
Error
}
#
[
error
(
"
failed
to
read
buffer
of
size
{
size
}
:
{
source
}
"
)
]
FailedToRead
{
size
:
usize
source
:
std
:
:
io
:
:
Error
}
#
[
error
(
"
failed
to
convert
to
string
from
bytes
:
{
0
}
"
)
]
StringFromBytesNulError
(
#
[
from
]
std
:
:
ffi
:
:
FromBytesUntilNulError
)
#
[
error
(
"
failed
to
convert
to
string
from
bytes
:
{
0
}
"
)
]
StringFromBytesUtf8Error
(
#
[
from
]
std
:
:
str
:
:
Utf8Error
)
#
[
error
(
"
failed
to
{
action
}
:
{
source
}
"
)
]
Goblin
{
action
:
&
'
static
str
source
:
goblin
:
:
error
:
:
Error
}
#
[
error
(
"
failed
to
copy
{
count
}
bytes
at
{
offset
}
:
{
source
}
"
)
]
CopyBytes
{
offset
:
usize
count
:
usize
source
:
std
:
:
io
:
:
Error
}
#
[
error
(
"
failed
to
find
note
"
)
]
NoteNotAvailable
#
[
error
(
"
the
note
name
isn
'
t
a
valid
form
"
)
]
InvalidNoteName
#
[
error
(
"
failed
to
find
architecture
in
fat
binary
"
)
]
ArchNotAvailable
#
[
error
(
"
mach
file
looked
like
a
fat
archive
but
couldn
'
t
be
parsed
as
one
"
)
]
NotFatArchive
#
[
error
(
"
not
enough
data
provided
expected
at
least
{
expected
}
bytes
:
{
source
}
"
)
]
NotEnoughData
{
expected
:
usize
source
:
std
:
:
array
:
:
TryFromSliceError
}
}
pub
type
Result
<
T
>
=
std
:
:
result
:
:
Result
<
T
Error
>
;
