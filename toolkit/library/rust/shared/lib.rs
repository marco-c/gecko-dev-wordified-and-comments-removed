#
[
cfg
(
feature
=
"
servo
"
)
]
extern
crate
geckoservo
;
extern
crate
mp4parse_capi
;
extern
crate
nsstring
;
extern
crate
nserror
;
extern
crate
rust_url_capi
;
#
[
cfg
(
feature
=
"
quantum_render
"
)
]
extern
crate
webrender_bindings
;
#
[
cfg
(
feature
=
"
cubeb_pulse_rust
"
)
]
extern
crate
cubeb_pulse
;
extern
crate
encoding_c
;
extern
crate
encoding_glue
;
use
std
:
:
boxed
:
:
Box
;
use
std
:
:
ffi
:
:
CStr
;
use
std
:
:
os
:
:
raw
:
:
c_char
;
use
std
:
:
panic
;
thread_local
!
(
static
UNUSED_THREAD_LOCAL
:
(
)
=
(
)
)
;
#
[
no_mangle
]
pub
extern
"
C
"
fn
rust_init_please_remove_this_after_updating_rust_1_19
(
)
{
UNUSED_THREAD_LOCAL
.
with
(
|
_
|
(
)
)
;
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
intentional_panic
(
message
:
*
const
c_char
)
{
panic
!
(
"
{
}
"
unsafe
{
CStr
:
:
from_ptr
(
message
)
}
.
to_string_lossy
(
)
)
;
}
static
mut
PANIC_REASON
:
Option
<
(
*
const
str
usize
)
>
=
None
;
#
[
no_mangle
]
pub
extern
"
C
"
fn
install_rust_panic_hook
(
)
{
panic
:
:
set_hook
(
Box
:
:
new
(
|
info
|
{
let
payload
=
info
.
payload
(
)
;
if
let
Some
(
s
)
=
payload
.
downcast_ref
:
:
<
&
str
>
(
)
{
unsafe
{
PANIC_REASON
=
Some
(
(
*
s
as
*
const
str
s
.
len
(
)
)
)
}
}
else
if
let
Some
(
s
)
=
payload
.
downcast_ref
:
:
<
String
>
(
)
{
unsafe
{
PANIC_REASON
=
Some
(
(
s
.
as_str
(
)
as
*
const
str
s
.
len
(
)
)
)
}
}
else
{
println
!
(
"
Unhandled
panic
payload
!
"
)
;
}
}
)
)
;
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
get_rust_panic_reason
(
reason
:
*
mut
*
const
c_char
length
:
*
mut
usize
)
-
>
bool
{
unsafe
{
match
PANIC_REASON
{
Some
(
(
s
len
)
)
=
>
{
*
reason
=
s
as
*
const
c_char
;
*
length
=
len
;
true
}
None
=
>
false
}
}
}
