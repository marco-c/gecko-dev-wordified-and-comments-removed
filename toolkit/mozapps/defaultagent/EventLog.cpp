#
include
"
EventLog
.
h
"
#
include
<
stdio
.
h
>
#
include
"
mozilla
/
UniquePtr
.
h
"
static
void
WriteEventLogErrorBuffer
(
const
wchar_t
*
buffer
DWORD
eventId
)
{
HANDLE
source
=
RegisterEventSourceW
(
nullptr
L
"
"
MOZ_APP_DISPLAYNAME
"
Default
Browser
Agent
"
)
;
if
(
!
source
)
{
return
;
}
const
wchar_t
*
stringsArray
[
]
=
{
buffer
}
;
ReportEventW
(
source
EVENTLOG_ERROR_TYPE
0
eventId
nullptr
1
0
stringsArray
nullptr
)
;
DeregisterEventSource
(
source
)
;
}
void
WriteEventLogHresult
(
HRESULT
hr
const
char
*
sourceFile
int
sourceLine
)
{
const
wchar_t
*
format
=
L
"
0x
%
X
in
%
S
:
%
d
"
;
int
bufferSize
=
_scwprintf
(
format
hr
sourceFile
sourceLine
)
;
+
+
bufferSize
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
errorStr
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
bufferSize
)
;
_snwprintf_s
(
errorStr
.
get
(
)
bufferSize
_TRUNCATE
format
hr
sourceFile
sourceLine
)
;
WriteEventLogErrorBuffer
(
errorStr
.
get
(
)
hr
)
;
}
void
WriteEventLogErrorMessage
(
const
wchar_t
*
messageFormat
const
char
*
sourceFile
int
sourceLine
.
.
.
)
{
va_list
ap
;
va_start
(
ap
sourceLine
)
;
int
bufferSize
=
_vscwprintf
(
messageFormat
ap
)
;
+
+
bufferSize
;
va_end
(
ap
)
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
message
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
bufferSize
)
;
va_start
(
ap
sourceLine
)
;
vswprintf
(
message
.
get
(
)
bufferSize
messageFormat
ap
)
;
va_end
(
ap
)
;
const
wchar_t
*
errorFormat
=
L
"
Error
:
%
s
(
%
S
:
%
d
)
"
;
bufferSize
=
_scwprintf
(
errorFormat
message
.
get
(
)
sourceFile
sourceLine
)
;
+
+
bufferSize
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
errorStr
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
bufferSize
)
;
_snwprintf_s
(
errorStr
.
get
(
)
bufferSize
_TRUNCATE
errorFormat
message
.
get
(
)
sourceFile
sourceLine
)
;
WriteEventLogErrorBuffer
(
errorStr
.
get
(
)
0
)
;
}
