#
include
<
windows
.
h
>
#
include
<
shlwapi
.
h
>
#
include
<
objbase
.
h
>
#
include
<
string
.
h
>
#
include
"
nsAutoRef
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
include
"
DefaultBrowser
.
h
"
#
include
"
Notification
.
h
"
#
include
"
Policy
.
h
"
#
include
"
ScheduledTask
.
h
"
#
include
"
Telemetry
.
h
"
static
void
RemoveAllRegistryEntries
(
)
{
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
installPath
=
mozilla
:
:
GetFullBinaryPath
(
)
;
if
(
!
PathRemoveFileSpecW
(
installPath
.
get
(
)
)
)
{
return
;
}
const
wchar_t
*
regKeyName
=
L
"
SOFTWARE
\
\
"
MOZ_APP_VENDOR
"
\
\
"
MOZ_APP_BASENAME
"
\
\
Default
Browser
Agent
"
;
HKEY
rawRegKey
=
nullptr
;
if
(
ERROR_SUCCESS
!
=
RegOpenKeyExW
(
HKEY_CURRENT_USER
regKeyName
0
KEY_WRITE
|
KEY_QUERY_VALUE
|
KEY_WOW64_64KEY
&
rawRegKey
)
)
{
return
;
}
nsAutoRegKey
regKey
(
rawRegKey
)
;
DWORD
maxValueNameLen
=
0
;
if
(
ERROR_SUCCESS
!
=
RegQueryInfoKeyW
(
regKey
.
get
(
)
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
&
maxValueNameLen
nullptr
nullptr
nullptr
)
)
{
return
;
}
maxValueNameLen
+
=
1
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
valueName
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
maxValueNameLen
)
;
DWORD
valueIndex
=
0
;
while
(
true
)
{
DWORD
valueNameLen
=
maxValueNameLen
;
LSTATUS
ls
=
RegEnumValueW
(
regKey
.
get
(
)
valueIndex
valueName
.
get
(
)
&
valueNameLen
nullptr
nullptr
nullptr
nullptr
)
;
if
(
ls
!
=
ERROR_SUCCESS
)
{
break
;
}
if
(
!
wcsnicmp
(
valueName
.
get
(
)
installPath
.
get
(
)
wcslen
(
installPath
.
get
(
)
)
)
)
{
RegDeleteValue
(
regKey
.
get
(
)
valueName
.
get
(
)
)
;
}
else
{
valueIndex
+
+
;
}
}
if
(
ERROR_SUCCESS
!
=
RegQueryInfoKeyW
(
regKey
.
get
(
)
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
&
valueIndex
nullptr
nullptr
nullptr
nullptr
)
)
{
return
;
}
regKey
.
reset
(
)
;
if
(
valueIndex
=
=
0
)
{
RegDeleteKeyW
(
HKEY_CURRENT_USER
regKeyName
)
;
}
}
int
wmain
(
int
argc
wchar_t
*
*
argv
)
{
if
(
argc
<
2
|
|
!
argv
[
1
]
)
{
return
E_INVALIDARG
;
}
HRESULT
hr
=
CoInitializeEx
(
nullptr
COINIT_MULTITHREADED
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
const
struct
ComUninitializer
{
~
ComUninitializer
(
)
{
CoUninitialize
(
)
;
}
}
kCUi
;
if
(
!
wcscmp
(
argv
[
1
]
L
"
uninstall
"
)
|
|
!
wcscmp
(
argv
[
1
]
L
"
unregister
-
task
"
)
)
{
if
(
argc
<
3
|
|
!
argv
[
2
]
)
{
return
E_INVALIDARG
;
}
if
(
!
wcscmp
(
argv
[
1
]
L
"
uninstall
"
)
)
{
RemoveAllRegistryEntries
(
)
;
}
return
RemoveTask
(
argv
[
2
]
)
;
}
if
(
IsAgentDisabled
(
)
)
{
return
HRESULT_FROM_WIN32
(
ERROR_ACCESS_DISABLED_BY_POLICY
)
;
}
if
(
!
wcscmp
(
argv
[
1
]
L
"
register
-
task
"
)
)
{
if
(
argc
<
3
|
|
!
argv
[
2
]
)
{
return
E_INVALIDARG
;
}
return
RegisterTask
(
argv
[
2
]
)
;
}
else
if
(
!
wcscmp
(
argv
[
1
]
L
"
update
-
task
"
)
)
{
if
(
argc
<
3
|
|
!
argv
[
2
]
)
{
return
E_INVALIDARG
;
}
return
UpdateTask
(
argv
[
2
]
)
;
}
else
if
(
!
wcscmp
(
argv
[
1
]
L
"
do
-
task
"
)
)
{
if
(
argc
<
3
|
|
!
argv
[
2
]
)
{
return
E_INVALIDARG
;
}
DefaultBrowserResult
defaultBrowserResult
=
GetDefaultBrowserInfo
(
)
;
if
(
defaultBrowserResult
.
isErr
(
)
)
{
return
defaultBrowserResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
}
DefaultBrowserInfo
browserInfo
=
defaultBrowserResult
.
unwrap
(
)
;
NotificationActivities
activitiesPerformed
=
MaybeShowNotification
(
browserInfo
argv
[
2
]
)
;
if
(
!
IsTelemetryDisabled
(
)
)
{
return
SendDefaultBrowserPing
(
browserInfo
activitiesPerformed
)
;
}
return
S_OK
;
}
else
{
return
E_INVALIDARG
;
}
}
