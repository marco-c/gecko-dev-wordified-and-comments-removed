#
include
"
Telemetry
.
h
"
#
include
<
fstream
>
#
include
<
string
>
#
include
<
windows
.
h
>
#
include
"
common
.
h
"
#
include
"
EventLog
.
h
"
#
include
"
Notification
.
h
"
#
include
"
Policy
.
h
"
#
include
"
json
/
json
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
HelperMacros
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
define
TELEMETRY_BASE_URL
"
https
:
/
/
incoming
.
telemetry
.
mozilla
.
org
/
submit
"
#
define
TELEMETRY_NAMESPACE
"
default
-
browser
-
agent
"
#
define
TELEMETRY_PING_VERSION
"
1
"
#
define
TELEMETRY_PING_DOCTYPE
"
default
-
browser
"
#
define
TELEMETRY_PING_URL
\
TELEMETRY_BASE_URL
"
/
"
TELEMETRY_NAMESPACE
"
/
"
TELEMETRY_PING_DOCTYPE
\
"
/
"
TELEMETRY_PING_VERSION
"
/
"
#
define
MINIMUM_PING_PERIOD_SEC
(
(
23
*
60
*
60
)
+
(
45
*
60
)
)
#
define
MAX_NOTIFICATION_DATA_CACHE_SIZE
2
#
define
NOTIFICATION_TYPE_CACHE_PREFIX
L
"
PingCacheNotificationType
"
#
define
NOTIFICATION_SHOWN_CACHE_PREFIX
L
"
PingCacheNotificationShown
"
#
define
NOTIFICATION_ACTION_CACHE_PREFIX
L
"
PingCacheNotificationAction
"
#
define
PREV_NOTIFICATION_ACTION_CACHE_PREFIX
L
"
PingCachePrevNotificationAction
"
#
define
PREV_NOTIFICATION_ACTION_REG_NAME
L
"
PrevNotificationAction
"
#
if
!
defined
(
RRF_SUBKEY_WOW6464KEY
)
#
define
RRF_SUBKEY_WOW6464KEY
0x00010000
#
endif
using
TelemetryFieldResult
=
mozilla
:
:
WindowsErrorResult
<
std
:
:
string
>
;
using
FilePathResult
=
mozilla
:
:
WindowsErrorResult
<
std
:
:
wstring
>
;
using
BoolResult
=
mozilla
:
:
WindowsErrorResult
<
bool
>
;
static
bool
IsOfficialTelemetry
(
)
{
#
if
defined
(
MOZILLA_OFFICIAL
)
&
&
defined
(
MOZ_TELEMETRY_REPORTING
)
&
&
\
!
defined
(
DEBUG
)
return
true
;
#
else
return
false
;
#
endif
}
static
TelemetryFieldResult
GetOSVersion
(
)
{
OSVERSIONINFOEXW
osv
=
{
sizeof
(
osv
)
}
;
if
(
:
:
GetVersionExW
(
reinterpret_cast
<
OSVERSIONINFOW
*
>
(
&
osv
)
)
)
{
std
:
:
ostringstream
oss
;
oss
<
<
osv
.
dwMajorVersion
<
<
"
.
"
<
<
osv
.
dwMinorVersion
<
<
"
.
"
<
<
osv
.
dwBuildNumber
;
if
(
osv
.
dwMajorVersion
=
=
10
&
&
osv
.
dwMinorVersion
=
=
0
)
{
DWORD
ubrValue
;
DWORD
ubrValueLen
=
sizeof
(
ubrValue
)
;
LSTATUS
ubrOk
=
:
:
RegGetValueW
(
HKEY_LOCAL_MACHINE
L
"
SOFTWARE
\
\
Microsoft
\
\
Windows
NT
\
\
CurrentVersion
"
L
"
UBR
"
RRF_RT_DWORD
|
RRF_SUBKEY_WOW6464KEY
nullptr
&
ubrValue
&
ubrValueLen
)
;
if
(
ubrOk
=
=
ERROR_SUCCESS
)
{
oss
<
<
"
.
"
<
<
ubrValue
;
}
}
return
oss
.
str
(
)
;
}
HRESULT
hr
=
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
LOG_ERROR
(
hr
)
;
return
TelemetryFieldResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
static
TelemetryFieldResult
GetOSLocale
(
)
{
wchar_t
localeName
[
LOCALE_NAME_MAX_LENGTH
]
=
L
"
"
;
if
(
!
GetUserDefaultLocaleName
(
localeName
LOCALE_NAME_MAX_LENGTH
)
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
LOG_ERROR
(
hr
)
;
return
TelemetryFieldResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
int
bufLen
=
WideCharToMultiByte
(
CP_UTF8
0
localeName
-
1
nullptr
0
nullptr
nullptr
)
;
mozilla
:
:
UniquePtr
<
char
[
]
>
narrowLocaleName
=
mozilla
:
:
MakeUnique
<
char
[
]
>
(
bufLen
)
;
if
(
!
narrowLocaleName
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ERROR_OUTOFMEMORY
)
;
LOG_ERROR
(
hr
)
;
return
TelemetryFieldResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
WideCharToMultiByte
(
CP_UTF8
0
localeName
-
1
narrowLocaleName
.
get
(
)
bufLen
nullptr
nullptr
)
;
return
std
:
:
string
(
narrowLocaleName
.
get
(
)
)
;
}
static
FilePathResult
GenerateUUIDStr
(
)
{
UUID
uuid
;
RPC_STATUS
status
=
UuidCreate
(
&
uuid
)
;
if
(
status
!
=
RPC_S_OK
)
{
HRESULT
hr
=
MAKE_HRESULT
(
1
FACILITY_RPC
status
)
;
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
wchar_t
guidBuf
[
39
]
=
{
}
;
if
(
StringFromGUID2
(
uuid
guidBuf
39
)
!
=
39
)
{
LOG_ERROR
(
HRESULT_FROM_WIN32
(
ERROR_INSUFFICIENT_BUFFER
)
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromWin32Error
(
ERROR_INSUFFICIENT_BUFFER
)
)
;
}
return
std
:
:
wstring
(
guidBuf
+
1
guidBuf
+
37
)
;
}
static
FilePathResult
GetPingFilePath
(
std
:
:
wstring
&
uuid
)
{
wchar_t
*
rawAppDataPath
;
HRESULT
hr
=
SHGetKnownFolderPath
(
FOLDERID_RoamingAppData
0
nullptr
&
rawAppDataPath
)
;
if
(
FAILED
(
hr
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
mozilla
:
:
UniquePtr
<
wchar_t
mozilla
:
:
CoTaskMemFreeDeleter
>
appDataPath
(
rawAppDataPath
)
;
hr
=
HRESULT_FROM_WIN32
(
ERROR_INSUFFICIENT_BUFFER
)
;
wchar_t
pingFilePath
[
MAX_PATH
]
=
L
"
"
;
if
(
!
PathCombineW
(
pingFilePath
appDataPath
.
get
(
)
L
"
"
MOZ_APP_VENDOR
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
if
(
!
PathAppendW
(
pingFilePath
L
"
"
MOZ_APP_BASENAME
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
if
(
!
PathAppendW
(
pingFilePath
L
"
Pending
Pings
"
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
if
(
!
PathAppendW
(
pingFilePath
uuid
.
c_str
(
)
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
std
:
:
wstring
(
pingFilePath
)
;
}
static
FilePathResult
GetPingsenderPath
(
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ERROR_INSUFFICIENT_BUFFER
)
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
thisBinaryPath
=
mozilla
:
:
GetFullBinaryPath
(
)
;
if
(
!
PathRemoveFileSpecW
(
thisBinaryPath
.
get
(
)
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
wchar_t
pingsenderPath
[
MAX_PATH
]
=
L
"
"
;
if
(
!
PathCombineW
(
pingsenderPath
thisBinaryPath
.
get
(
)
L
"
pingsender
.
exe
"
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
std
:
:
wstring
(
pingsenderPath
)
;
}
static
mozilla
:
:
WindowsError
SendPing
(
const
std
:
:
string
defaultBrowser
const
std
:
:
string
previousDefaultBrowser
const
std
:
:
string
osVersion
const
std
:
:
string
osLocale
const
std
:
:
string
notificationType
const
std
:
:
string
notificationShown
const
std
:
:
string
notificationAction
const
std
:
:
string
prevNotificationAction
)
{
Json
:
:
Value
ping
;
ping
[
"
build_channel
"
]
=
MOZ_STRINGIFY
(
MOZ_UPDATE_CHANNEL
)
;
ping
[
"
build_version
"
]
=
MOZILLA_VERSION
;
ping
[
"
default_browser
"
]
=
defaultBrowser
;
ping
[
"
previous_default_browser
"
]
=
previousDefaultBrowser
;
ping
[
"
os_version
"
]
=
osVersion
;
ping
[
"
os_locale
"
]
=
osLocale
;
ping
[
"
notification_type
"
]
=
notificationType
;
ping
[
"
notification_shown
"
]
=
notificationShown
;
ping
[
"
notification_action
"
]
=
notificationAction
;
ping
[
"
previous_notification_action
"
]
=
prevNotificationAction
;
Json
:
:
StreamWriterBuilder
jsonStream
;
jsonStream
[
"
indentation
"
]
=
"
"
;
std
:
:
string
pingStr
=
Json
:
:
writeString
(
jsonStream
ping
)
;
FilePathResult
uuidResult
=
GenerateUUIDStr
(
)
;
if
(
uuidResult
.
isErr
(
)
)
{
return
uuidResult
.
unwrapErr
(
)
;
}
std
:
:
wstring
uuid
=
uuidResult
.
unwrap
(
)
;
FilePathResult
pingFilePathResult
=
GetPingFilePath
(
uuid
)
;
if
(
pingFilePathResult
.
isErr
(
)
)
{
return
pingFilePathResult
.
unwrapErr
(
)
;
}
std
:
:
wstring
pingFilePath
=
pingFilePathResult
.
unwrap
(
)
;
{
std
:
:
ofstream
outFile
(
pingFilePath
)
;
outFile
<
<
pingStr
;
if
(
outFile
.
fail
(
)
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ERROR_IO_DEVICE
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
;
}
}
FilePathResult
pingsenderPathResult
=
GetPingsenderPath
(
)
;
if
(
pingsenderPathResult
.
isErr
(
)
)
{
return
pingsenderPathResult
.
unwrapErr
(
)
;
}
std
:
:
wstring
pingsenderPath
=
pingsenderPathResult
.
unwrap
(
)
;
std
:
:
wstring
url
(
L
"
"
TELEMETRY_PING_URL
)
;
url
.
append
(
uuid
)
;
const
wchar_t
*
pingsenderArgs
[
]
=
{
pingsenderPath
.
c_str
(
)
url
.
c_str
(
)
pingFilePath
.
c_str
(
)
}
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
pingsenderCmdLine
(
mozilla
:
:
MakeCommandLine
(
mozilla
:
:
ArrayLength
(
pingsenderArgs
)
const_cast
<
wchar_t
*
*
>
(
pingsenderArgs
)
)
)
;
PROCESS_INFORMATION
pi
;
STARTUPINFOW
si
=
{
sizeof
(
si
)
}
;
si
.
dwFlags
=
STARTF_USESHOWWINDOW
;
si
.
wShowWindow
=
SW_HIDE
;
if
(
!
:
:
CreateProcessW
(
pingsenderPath
.
c_str
(
)
pingsenderCmdLine
.
get
(
)
nullptr
nullptr
FALSE
0
nullptr
nullptr
&
si
&
pi
)
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
;
}
CloseHandle
(
pi
.
hThread
)
;
CloseHandle
(
pi
.
hProcess
)
;
return
mozilla
:
:
WindowsError
:
:
CreateSuccess
(
)
;
}
static
BoolResult
GetPingAlreadySentToday
(
)
{
const
wchar_t
*
valueName
=
L
"
LastPingSentAt
"
;
MaybeQwordResult
readResult
=
RegistryGetValueQword
(
IsPrefixed
:
:
Unprefixed
valueName
)
;
if
(
readResult
.
isErr
(
)
)
{
HRESULT
hr
=
readResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Unable
to
read
registry
:
%
#
X
"
hr
)
;
return
BoolResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
mozilla
:
:
Maybe
<
ULONGLONG
>
maybeValue
=
readResult
.
unwrap
(
)
;
ULONGLONG
now
=
GetCurrentTimestamp
(
)
;
if
(
maybeValue
.
isSome
(
)
)
{
ULONGLONG
lastPingTime
=
maybeValue
.
value
(
)
;
if
(
SecondsPassedSince
(
lastPingTime
now
)
<
MINIMUM_PING_PERIOD_SEC
)
{
return
true
;
}
}
mozilla
:
:
WindowsErrorResult
<
mozilla
:
:
Ok
>
writeResult
=
RegistrySetValueQword
(
IsPrefixed
:
:
Unprefixed
valueName
now
)
;
if
(
writeResult
.
isErr
(
)
)
{
HRESULT
hr
=
readResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Unable
to
write
registry
:
%
#
X
"
hr
)
;
return
BoolResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
false
;
}
static
TelemetryFieldResult
GetAndUpdatePreviousDefaultBrowser
(
const
std
:
:
string
&
currentDefault
Browser
prevDefault
)
{
const
wchar_t
*
registryValueName
=
L
"
PingCurrentDefault
"
;
MaybeStringResult
readResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
registryValueName
)
;
if
(
readResult
.
isErr
(
)
)
{
HRESULT
hr
=
readResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Unable
to
read
registry
:
%
#
X
"
hr
)
;
return
TelemetryFieldResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeValue
=
readResult
.
unwrap
(
)
;
std
:
:
string
oldCurrentDefault
;
if
(
maybeValue
.
isSome
(
)
)
{
oldCurrentDefault
=
maybeValue
.
value
(
)
;
}
else
{
oldCurrentDefault
=
GetStringForBrowser
(
prevDefault
)
;
}
mozilla
:
:
WindowsErrorResult
<
mozilla
:
:
Ok
>
writeResult
=
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
registryValueName
currentDefault
.
c_str
(
)
)
;
if
(
writeResult
.
isErr
(
)
)
{
HRESULT
hr
=
writeResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Unable
to
write
registry
:
%
#
X
"
hr
)
;
return
TelemetryFieldResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
oldCurrentDefault
;
}
HRESULT
MaybeCache
(
const
std
:
:
string
&
notificationType
const
std
:
:
string
&
notificationShown
const
std
:
:
string
&
notificationAction
const
std
:
:
string
&
prevNotificationAction
)
{
std
:
:
string
notShown
=
GetStringForNotificationShown
(
NotificationShown
:
:
NotShown
)
;
if
(
notificationShown
=
=
notShown
)
{
return
S_OK
;
}
unsigned
int
cacheIndex
=
0
;
while
(
true
)
{
std
:
:
wstring
valueName
=
NOTIFICATION_TYPE_CACHE_PREFIX
;
valueName
+
=
std
:
:
to_wstring
(
cacheIndex
)
;
LSTATUS
ls
=
RegGetValueW
(
HKEY_CURRENT_USER
AGENT_REGKEY_NAME
valueName
.
c_str
(
)
RRF_RT_REG_SZ
nullptr
nullptr
nullptr
)
;
if
(
ls
=
=
ERROR_FILE_NOT_FOUND
)
{
break
;
}
if
(
ls
!
=
ERROR_SUCCESS
)
{
LOG_ERROR_MESSAGE
(
L
"
Error
probing
cache
:
%
#
X
"
ls
)
;
return
HRESULT_FROM_WIN32
(
ls
)
;
}
+
+
cacheIndex
;
if
(
cacheIndex
>
=
MAX_NOTIFICATION_DATA_CACHE_SIZE
)
{
LOG_ERROR_MESSAGE
(
L
"
Cache
full
.
Cannot
store
another
value
.
"
)
;
return
E_FAIL
;
}
}
std
:
:
wstring
typeValueName
=
NOTIFICATION_TYPE_CACHE_PREFIX
;
typeValueName
+
=
std
:
:
to_wstring
(
cacheIndex
)
;
std
:
:
wstring
shownValueName
=
NOTIFICATION_SHOWN_CACHE_PREFIX
;
shownValueName
+
=
std
:
:
to_wstring
(
cacheIndex
)
;
std
:
:
wstring
actionValueName
=
NOTIFICATION_ACTION_CACHE_PREFIX
;
actionValueName
+
=
std
:
:
to_wstring
(
cacheIndex
)
;
std
:
:
wstring
prevActionValueName
=
PREV_NOTIFICATION_ACTION_CACHE_PREFIX
;
prevActionValueName
+
=
std
:
:
to_wstring
(
cacheIndex
)
;
mozilla
:
:
WindowsErrorResult
<
mozilla
:
:
Ok
>
result
=
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
typeValueName
.
c_str
(
)
notificationType
.
c_str
(
)
)
;
if
(
result
.
isErr
(
)
)
{
HRESULT
hr
=
result
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Failed
to
write
to
cache
:
%
#
X
"
hr
)
;
return
hr
;
}
result
=
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
shownValueName
.
c_str
(
)
notificationShown
.
c_str
(
)
)
;
if
(
result
.
isErr
(
)
)
{
HRESULT
hr
=
result
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Failed
to
write
to
cache
:
%
#
X
"
hr
)
;
return
hr
;
}
result
=
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
actionValueName
.
c_str
(
)
notificationAction
.
c_str
(
)
)
;
if
(
result
.
isErr
(
)
)
{
HRESULT
hr
=
result
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Failed
to
write
to
cache
:
%
#
X
"
hr
)
;
return
hr
;
}
result
=
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
prevActionValueName
.
c_str
(
)
prevNotificationAction
.
c_str
(
)
)
;
if
(
result
.
isErr
(
)
)
{
HRESULT
hr
=
result
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Failed
to
write
to
cache
:
%
#
X
"
hr
)
;
return
hr
;
}
return
S_OK
;
}
HRESULT
PopCache
(
bool
&
cacheEmpty
std
:
:
string
&
notificationType
std
:
:
string
&
notificationShown
std
:
:
string
&
notificationAction
std
:
:
string
&
prevNotificationAction
)
{
for
(
unsigned
int
i
=
0
;
i
<
MAX_NOTIFICATION_DATA_CACHE_SIZE
;
+
+
i
)
{
unsigned
int
readIndex
=
0
;
std
:
:
wstring
typeValueName
=
NOTIFICATION_TYPE_CACHE_PREFIX
;
typeValueName
+
=
std
:
:
to_wstring
(
readIndex
)
;
std
:
:
wstring
shownValueName
=
NOTIFICATION_SHOWN_CACHE_PREFIX
;
shownValueName
+
=
std
:
:
to_wstring
(
readIndex
)
;
std
:
:
wstring
actionValueName
=
NOTIFICATION_ACTION_CACHE_PREFIX
;
actionValueName
+
=
std
:
:
to_wstring
(
readIndex
)
;
std
:
:
wstring
prevActionValueName
=
PREV_NOTIFICATION_ACTION_CACHE_PREFIX
;
prevActionValueName
+
=
std
:
:
to_wstring
(
readIndex
)
;
MaybeStringResult
typeResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
typeValueName
.
c_str
(
)
)
;
MaybeStringResult
shownResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
shownValueName
.
c_str
(
)
)
;
MaybeStringResult
actionResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
actionValueName
.
c_str
(
)
)
;
MaybeStringResult
prevActionResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
prevActionValueName
.
c_str
(
)
)
;
bool
cacheReadSuccess
=
false
;
if
(
typeResult
.
isOk
(
)
&
&
shownResult
.
isOk
(
)
&
&
actionResult
.
isOk
(
)
&
&
prevActionResult
.
isOk
(
)
)
{
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeType
=
typeResult
.
unwrap
(
)
;
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeShown
=
shownResult
.
unwrap
(
)
;
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeAction
=
actionResult
.
unwrap
(
)
;
mozilla
:
:
Maybe
<
std
:
:
string
>
maybePrevAction
=
prevActionResult
.
unwrap
(
)
;
if
(
maybeType
.
isNothing
(
)
&
&
maybeShown
.
isNothing
(
)
&
&
maybeAction
.
isNothing
(
)
&
&
maybePrevAction
.
isNothing
(
)
)
{
cacheEmpty
=
true
;
return
S_OK
;
}
cacheReadSuccess
=
maybeType
.
isSome
(
)
&
&
maybeShown
.
isSome
(
)
&
&
maybeAction
.
isSome
(
)
;
if
(
cacheReadSuccess
)
{
notificationType
=
maybeType
.
value
(
)
;
notificationShown
=
maybeShown
.
value
(
)
;
notificationAction
=
maybeAction
.
value
(
)
;
if
(
maybePrevAction
.
isSome
(
)
)
{
prevNotificationAction
=
maybePrevAction
.
value
(
)
;
}
else
{
prevNotificationAction
=
GetStringForNotificationAction
(
NotificationAction
:
:
NoAction
)
;
}
}
else
{
LOG_ERROR_MESSAGE
(
L
"
Some
notification
data
cache
data
is
missing
.
"
L
"
Cache
entry
dropped
"
)
;
}
}
else
{
LOG_ERROR_MESSAGE
(
L
"
Error
reading
cache
data
.
Entry
dropped
:
%
#
X
%
#
X
%
#
X
%
#
X
"
typeResult
.
isErr
(
)
?
typeResult
.
unwrapErr
(
)
.
AsHResult
(
)
:
0
shownResult
.
isErr
(
)
?
shownResult
.
unwrapErr
(
)
.
AsHResult
(
)
:
0
actionResult
.
isErr
(
)
?
actionResult
.
unwrapErr
(
)
.
AsHResult
(
)
:
0
prevActionResult
.
isErr
(
)
?
prevActionResult
.
unwrapErr
(
)
.
AsHResult
(
)
:
0
)
;
}
for
(
unsigned
int
shiftTo
=
0
;
shiftTo
+
1
<
MAX_NOTIFICATION_DATA_CACHE_SIZE
;
+
+
shiftTo
)
{
const
unsigned
int
shiftFrom
=
shiftTo
+
1
;
std
:
:
wstring
shiftToTypeName
=
NOTIFICATION_TYPE_CACHE_PREFIX
;
shiftToTypeName
+
=
std
:
:
to_wstring
(
shiftTo
)
;
std
:
:
wstring
shiftToShownName
=
NOTIFICATION_SHOWN_CACHE_PREFIX
;
shiftToShownName
+
=
std
:
:
to_wstring
(
shiftTo
)
;
std
:
:
wstring
shiftToActionName
=
NOTIFICATION_ACTION_CACHE_PREFIX
;
shiftToActionName
+
=
std
:
:
to_wstring
(
shiftTo
)
;
std
:
:
wstring
shiftToPrevActionName
=
PREV_NOTIFICATION_ACTION_CACHE_PREFIX
;
shiftToPrevActionName
+
=
std
:
:
to_wstring
(
shiftTo
)
;
std
:
:
wstring
shiftFromTypeName
=
NOTIFICATION_TYPE_CACHE_PREFIX
;
shiftFromTypeName
+
=
std
:
:
to_wstring
(
shiftFrom
)
;
std
:
:
wstring
shiftFromShownName
=
NOTIFICATION_SHOWN_CACHE_PREFIX
;
shiftFromShownName
+
=
std
:
:
to_wstring
(
shiftFrom
)
;
std
:
:
wstring
shiftFromActionName
=
NOTIFICATION_ACTION_CACHE_PREFIX
;
shiftFromActionName
+
=
std
:
:
to_wstring
(
shiftFrom
)
;
std
:
:
wstring
shiftFromPrevActionName
=
PREV_NOTIFICATION_ACTION_CACHE_PREFIX
;
shiftFromPrevActionName
+
=
std
:
:
to_wstring
(
shiftFrom
)
;
MaybeStringResult
result
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
shiftFromTypeName
.
c_str
(
)
)
;
if
(
result
.
isOk
(
)
)
{
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeValue
=
result
.
unwrap
(
)
;
if
(
maybeValue
.
isSome
(
)
)
{
std
:
:
string
value
=
maybeValue
.
value
(
)
;
mozilla
:
:
Unused
<
<
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
shiftToTypeName
.
c_str
(
)
value
.
c_str
(
)
)
;
}
else
{
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftToTypeName
.
c_str
(
)
)
;
}
}
result
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
shiftFromShownName
.
c_str
(
)
)
;
if
(
result
.
isOk
(
)
)
{
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeValue
=
result
.
unwrap
(
)
;
if
(
maybeValue
.
isSome
(
)
)
{
std
:
:
string
value
=
maybeValue
.
value
(
)
;
mozilla
:
:
Unused
<
<
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
shiftToShownName
.
c_str
(
)
value
.
c_str
(
)
)
;
}
else
{
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftToShownName
.
c_str
(
)
)
;
}
}
result
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
shiftFromActionName
.
c_str
(
)
)
;
if
(
result
.
isOk
(
)
)
{
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeValue
=
result
.
unwrap
(
)
;
if
(
maybeValue
.
isSome
(
)
)
{
std
:
:
string
value
=
maybeValue
.
value
(
)
;
mozilla
:
:
Unused
<
<
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
shiftToActionName
.
c_str
(
)
value
.
c_str
(
)
)
;
}
else
{
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftToActionName
.
c_str
(
)
)
;
}
}
result
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
shiftFromPrevActionName
.
c_str
(
)
)
;
if
(
result
.
isOk
(
)
)
{
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeValue
=
result
.
unwrap
(
)
;
if
(
maybeValue
.
isSome
(
)
)
{
std
:
:
string
value
=
maybeValue
.
value
(
)
;
mozilla
:
:
Unused
<
<
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
shiftToPrevActionName
.
c_str
(
)
value
.
c_str
(
)
)
;
}
else
{
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftToPrevActionName
.
c_str
(
)
)
;
}
}
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftFromTypeName
.
c_str
(
)
)
;
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftFromShownName
.
c_str
(
)
)
;
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftFromActionName
.
c_str
(
)
)
;
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Unprefixed
shiftFromPrevActionName
.
c_str
(
)
)
;
}
if
(
cacheReadSuccess
)
{
cacheEmpty
=
false
;
return
S_OK
;
}
}
return
E_FAIL
;
}
HRESULT
MaybeSwapForCached
(
std
:
:
string
&
notificationType
std
:
:
string
&
notificationShown
std
:
:
string
&
notificationAction
std
:
:
string
&
prevNotificationAction
)
{
bool
cacheEmpty
;
std
:
:
string
cachedType
cachedShown
cachedAction
cachedPrevAction
;
HRESULT
hr
=
PopCache
(
cacheEmpty
cachedType
cachedShown
cachedAction
cachedPrevAction
)
;
if
(
FAILED
(
hr
)
)
{
LOG_ERROR_MESSAGE
(
L
"
Failed
to
read
cache
:
%
#
X
"
hr
)
;
return
hr
;
}
if
(
cacheEmpty
)
{
return
S_OK
;
}
MaybeCache
(
notificationType
notificationShown
notificationAction
prevNotificationAction
)
;
notificationType
=
cachedType
;
notificationShown
=
cachedShown
;
notificationAction
=
cachedAction
;
prevNotificationAction
=
cachedPrevAction
;
return
S_OK
;
}
HRESULT
ReadPreviousNotificationAction
(
std
:
:
string
&
prevAction
)
{
MaybeStringResult
maybePrevActionResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
PREV_NOTIFICATION_ACTION_REG_NAME
)
;
if
(
maybePrevActionResult
.
isErr
(
)
)
{
HRESULT
hr
=
maybePrevActionResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Unable
to
read
prev
action
from
registry
:
%
#
X
"
hr
)
;
return
hr
;
}
mozilla
:
:
Maybe
<
std
:
:
string
>
maybePrevAction
=
maybePrevActionResult
.
unwrap
(
)
;
if
(
maybePrevAction
.
isNothing
(
)
)
{
prevAction
=
GetStringForNotificationAction
(
NotificationAction
:
:
NoAction
)
;
}
else
{
prevAction
=
maybePrevAction
.
value
(
)
;
EnsureValidNotificationAction
(
prevAction
)
;
}
return
S_OK
;
}
HRESULT
MaybeWritePreviousNotificationAction
(
const
NotificationActivities
&
activitiesPerformed
)
{
if
(
activitiesPerformed
.
shown
!
=
NotificationShown
:
:
Shown
)
{
return
S_OK
;
}
std
:
:
string
notificationAction
=
GetStringForNotificationAction
(
activitiesPerformed
.
action
)
;
mozilla
:
:
WindowsErrorResult
<
mozilla
:
:
Ok
>
result
=
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
PREV_NOTIFICATION_ACTION_REG_NAME
notificationAction
.
c_str
(
)
)
;
if
(
result
.
isErr
(
)
)
{
HRESULT
hr
=
result
.
unwrapErr
(
)
.
AsHResult
(
)
;
LOG_ERROR_MESSAGE
(
L
"
Unable
to
write
prev
action
to
registry
:
%
#
X
"
hr
)
;
return
hr
;
}
return
S_OK
;
}
HRESULT
SendDefaultBrowserPing
(
const
DefaultBrowserInfo
&
browserInfo
const
NotificationActivities
&
activitiesPerformed
)
{
std
:
:
string
currentDefaultBrowser
=
GetStringForBrowser
(
browserInfo
.
currentDefaultBrowser
)
;
std
:
:
string
notificationType
=
GetStringForNotificationType
(
activitiesPerformed
.
type
)
;
std
:
:
string
notificationShown
=
GetStringForNotificationShown
(
activitiesPerformed
.
shown
)
;
std
:
:
string
notificationAction
=
GetStringForNotificationAction
(
activitiesPerformed
.
action
)
;
TelemetryFieldResult
osVersionResult
=
GetOSVersion
(
)
;
if
(
osVersionResult
.
isErr
(
)
)
{
return
osVersionResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
}
std
:
:
string
osVersion
=
osVersionResult
.
unwrap
(
)
;
TelemetryFieldResult
osLocaleResult
=
GetOSLocale
(
)
;
if
(
osLocaleResult
.
isErr
(
)
)
{
return
osLocaleResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
}
std
:
:
string
osLocale
=
osLocaleResult
.
unwrap
(
)
;
std
:
:
string
prevNotificationAction
;
HRESULT
hr
=
ReadPreviousNotificationAction
(
prevNotificationAction
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
MaybeWritePreviousNotificationAction
(
activitiesPerformed
)
;
if
(
!
IsOfficialTelemetry
(
)
|
|
IsTelemetryDisabled
(
)
)
{
return
MaybeCache
(
notificationType
notificationShown
notificationAction
prevNotificationAction
)
;
}
BoolResult
pingAlreadySentResult
=
GetPingAlreadySentToday
(
)
;
if
(
pingAlreadySentResult
.
isErr
(
)
)
{
return
pingAlreadySentResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
}
bool
pingAlreadySent
=
pingAlreadySentResult
.
unwrap
(
)
;
if
(
pingAlreadySent
)
{
return
MaybeCache
(
notificationType
notificationShown
notificationAction
prevNotificationAction
)
;
}
hr
=
MaybeSwapForCached
(
notificationType
notificationShown
notificationAction
prevNotificationAction
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
TelemetryFieldResult
previousDefaultBrowserResult
=
GetAndUpdatePreviousDefaultBrowser
(
currentDefaultBrowser
browserInfo
.
previousDefaultBrowser
)
;
if
(
previousDefaultBrowserResult
.
isErr
(
)
)
{
return
previousDefaultBrowserResult
.
unwrapErr
(
)
.
AsHResult
(
)
;
}
std
:
:
string
previousDefaultBrowser
=
previousDefaultBrowserResult
.
unwrap
(
)
;
return
SendPing
(
currentDefaultBrowser
previousDefaultBrowser
osVersion
osLocale
notificationType
notificationShown
notificationAction
prevNotificationAction
)
.
AsHResult
(
)
;
}
