#
include
"
ScheduledTask
.
h
"
#
include
<
string
>
#
include
<
time
.
h
>
#
include
<
taskschd
.
h
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
const
wchar_t
*
kTaskVendor
=
L
"
"
MOZ_APP_VENDOR
;
const
wchar_t
*
kTaskName
=
L
"
"
MOZ_APP_DISPLAYNAME
"
Default
Browser
Agent
"
;
const
wchar_t
*
kTimeFormat
=
L
"
%
Y
-
%
m
-
%
dT
%
H
:
%
M
:
%
SZ
"
;
const
size_t
kTimeStrMaxLen
=
20
;
#
define
ENSURE
(
x
)
\
if
(
FAILED
(
hr
=
(
x
)
)
)
{
\
LOG_ERROR
(
hr
)
;
\
return
hr
;
\
}
struct
SysFreeStringDeleter
{
void
operator
(
)
(
BSTR
aPtr
)
{
:
:
SysFreeString
(
aPtr
)
;
}
}
;
using
BStrPtr
=
mozilla
:
:
UniquePtr
<
OLECHAR
SysFreeStringDeleter
>
;
HRESULT
RegisterTask
(
const
wchar_t
*
uniqueToken
BSTR
startTime
)
{
RemoveTask
(
uniqueToken
)
;
bool
createdFolder
=
false
;
HRESULT
hr
=
S_OK
;
RefPtr
<
ITaskService
>
scheduler
;
ENSURE
(
CoCreateInstance
(
CLSID_TaskScheduler
nullptr
CLSCTX_INPROC_SERVER
IID_ITaskService
getter_AddRefs
(
scheduler
)
)
)
;
ENSURE
(
scheduler
-
>
Connect
(
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
)
)
;
RefPtr
<
ITaskFolder
>
rootFolder
;
BStrPtr
rootFolderBStr
=
BStrPtr
(
SysAllocString
(
L
"
\
\
"
)
)
;
ENSURE
(
scheduler
-
>
GetFolder
(
rootFolderBStr
.
get
(
)
getter_AddRefs
(
rootFolder
)
)
)
;
RefPtr
<
ITaskFolder
>
taskFolder
;
BStrPtr
vendorBStr
=
BStrPtr
(
SysAllocString
(
kTaskVendor
)
)
;
if
(
FAILED
(
rootFolder
-
>
GetFolder
(
vendorBStr
.
get
(
)
getter_AddRefs
(
taskFolder
)
)
)
)
{
hr
=
rootFolder
-
>
CreateFolder
(
vendorBStr
.
get
(
)
VARIANT
{
}
getter_AddRefs
(
taskFolder
)
)
;
if
(
SUCCEEDED
(
hr
)
)
{
createdFolder
=
true
;
}
else
if
(
hr
!
=
HRESULT_FROM_WIN32
(
ERROR_ALREADY_EXISTS
)
)
{
LOG_ERROR
(
hr
)
;
return
hr
;
}
}
auto
cleanupFolder
=
mozilla
:
:
MakeScopeExit
(
[
hr
createdFolder
&
rootFolder
&
vendorBStr
]
{
if
(
createdFolder
&
&
FAILED
(
hr
)
)
{
rootFolder
-
>
DeleteFolder
(
vendorBStr
.
get
(
)
0
)
;
}
}
)
;
RefPtr
<
ITaskDefinition
>
newTask
;
ENSURE
(
scheduler
-
>
NewTask
(
0
getter_AddRefs
(
newTask
)
)
)
;
RefPtr
<
ITaskSettings
>
taskSettings
;
ENSURE
(
newTask
-
>
get_Settings
(
getter_AddRefs
(
taskSettings
)
)
)
;
ENSURE
(
taskSettings
-
>
put_DisallowStartIfOnBatteries
(
VARIANT_FALSE
)
)
;
ENSURE
(
taskSettings
-
>
put_MultipleInstances
(
TASK_INSTANCES_IGNORE_NEW
)
)
;
ENSURE
(
taskSettings
-
>
put_StartWhenAvailable
(
VARIANT_TRUE
)
)
;
ENSURE
(
taskSettings
-
>
put_StopIfGoingOnBatteries
(
VARIANT_FALSE
)
)
;
BStrPtr
execTimeLimitBStr
=
BStrPtr
(
SysAllocString
(
L
"
PT35M
"
)
)
;
ENSURE
(
taskSettings
-
>
put_ExecutionTimeLimit
(
execTimeLimitBStr
.
get
(
)
)
)
;
RefPtr
<
IRegistrationInfo
>
regInfo
;
ENSURE
(
newTask
-
>
get_RegistrationInfo
(
getter_AddRefs
(
regInfo
)
)
)
;
ENSURE
(
regInfo
-
>
put_Author
(
vendorBStr
.
get
(
)
)
)
;
RefPtr
<
ITriggerCollection
>
triggers
;
ENSURE
(
newTask
-
>
get_Triggers
(
getter_AddRefs
(
triggers
)
)
)
;
RefPtr
<
ITrigger
>
newTrigger
;
ENSURE
(
triggers
-
>
Create
(
TASK_TRIGGER_DAILY
getter_AddRefs
(
newTrigger
)
)
)
;
RefPtr
<
IDailyTrigger
>
dailyTrigger
;
ENSURE
(
newTrigger
-
>
QueryInterface
(
IID_IDailyTrigger
getter_AddRefs
(
dailyTrigger
)
)
)
;
if
(
startTime
)
{
ENSURE
(
dailyTrigger
-
>
put_StartBoundary
(
startTime
)
)
;
}
else
{
time_t
now_t
=
time
(
nullptr
)
;
now_t
-
=
60
;
tm
now_tm
;
errno_t
errno_rv
=
gmtime_s
(
&
now_tm
&
now_t
)
;
if
(
errno_rv
!
=
0
)
{
hr
=
HRESULT_FROM_WIN32
(
ERROR_INVALID_TIME
)
;
LOG_ERROR
(
hr
)
;
return
hr
;
}
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
timeStr
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
kTimeStrMaxLen
+
1
)
;
if
(
!
timeStr
)
{
return
E_OUTOFMEMORY
;
}
if
(
wcsftime
(
timeStr
.
get
(
)
kTimeStrMaxLen
+
1
kTimeFormat
&
now_tm
)
=
=
0
)
{
hr
=
E_NOT_SUFFICIENT_BUFFER
;
LOG_ERROR
(
hr
)
;
return
hr
;
}
BStrPtr
startTimeBStr
=
BStrPtr
(
SysAllocString
(
timeStr
.
get
(
)
)
)
;
ENSURE
(
dailyTrigger
-
>
put_StartBoundary
(
startTimeBStr
.
get
(
)
)
)
;
}
ENSURE
(
dailyTrigger
-
>
put_DaysInterval
(
1
)
)
;
RefPtr
<
IActionCollection
>
actions
;
ENSURE
(
newTask
-
>
get_Actions
(
getter_AddRefs
(
actions
)
)
)
;
RefPtr
<
IAction
>
action
;
ENSURE
(
actions
-
>
Create
(
TASK_ACTION_EXEC
getter_AddRefs
(
action
)
)
)
;
RefPtr
<
IExecAction
>
execAction
;
ENSURE
(
action
-
>
QueryInterface
(
IID_IExecAction
getter_AddRefs
(
execAction
)
)
)
;
BStrPtr
binaryPathBStr
=
BStrPtr
(
SysAllocString
(
mozilla
:
:
GetFullBinaryPath
(
)
.
get
(
)
)
)
;
ENSURE
(
execAction
-
>
put_Path
(
binaryPathBStr
.
get
(
)
)
)
;
std
:
:
wstring
taskArgs
=
L
"
do
-
task
\
"
"
;
taskArgs
+
=
uniqueToken
;
taskArgs
+
=
L
"
\
"
"
;
BStrPtr
argsBStr
=
BStrPtr
(
SysAllocString
(
taskArgs
.
c_str
(
)
)
)
;
ENSURE
(
execAction
-
>
put_Arguments
(
argsBStr
.
get
(
)
)
)
;
std
:
:
wstring
taskName
(
kTaskName
)
;
taskName
+
=
uniqueToken
;
BStrPtr
taskNameBStr
=
BStrPtr
(
SysAllocString
(
taskName
.
c_str
(
)
)
)
;
RefPtr
<
IRegisteredTask
>
registeredTask
;
ENSURE
(
taskFolder
-
>
RegisterTaskDefinition
(
taskNameBStr
.
get
(
)
newTask
TASK_CREATE_OR_UPDATE
VARIANT
{
}
VARIANT
{
}
TASK_LOGON_INTERACTIVE_TOKEN
VARIANT
{
}
getter_AddRefs
(
registeredTask
)
)
)
;
return
hr
;
}
HRESULT
UpdateTask
(
const
wchar_t
*
uniqueToken
)
{
RefPtr
<
ITaskService
>
scheduler
;
HRESULT
hr
=
S_OK
;
ENSURE
(
CoCreateInstance
(
CLSID_TaskScheduler
nullptr
CLSCTX_INPROC_SERVER
IID_ITaskService
getter_AddRefs
(
scheduler
)
)
)
;
ENSURE
(
scheduler
-
>
Connect
(
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
)
)
;
RefPtr
<
ITaskFolder
>
taskFolder
;
BStrPtr
folderBStr
=
BStrPtr
(
SysAllocString
(
kTaskVendor
)
)
;
if
(
FAILED
(
scheduler
-
>
GetFolder
(
folderBStr
.
get
(
)
getter_AddRefs
(
taskFolder
)
)
)
)
{
return
RegisterTask
(
uniqueToken
)
;
}
std
:
:
wstring
taskName
(
kTaskName
)
;
taskName
+
=
uniqueToken
;
BStrPtr
taskNameBStr
=
BStrPtr
(
SysAllocString
(
taskName
.
c_str
(
)
)
)
;
RefPtr
<
IRegisteredTask
>
task
;
if
(
FAILED
(
taskFolder
-
>
GetTask
(
taskNameBStr
.
get
(
)
getter_AddRefs
(
task
)
)
)
)
{
return
RegisterTask
(
uniqueToken
)
;
}
RefPtr
<
ITaskDefinition
>
definition
;
if
(
FAILED
(
task
-
>
get_Definition
(
getter_AddRefs
(
definition
)
)
)
)
{
return
RegisterTask
(
uniqueToken
)
;
}
RefPtr
<
ITriggerCollection
>
triggerList
;
if
(
FAILED
(
definition
-
>
get_Triggers
(
getter_AddRefs
(
triggerList
)
)
)
)
{
return
RegisterTask
(
uniqueToken
)
;
}
RefPtr
<
ITrigger
>
trigger
;
if
(
FAILED
(
triggerList
-
>
get_Item
(
1
getter_AddRefs
(
trigger
)
)
)
)
{
return
RegisterTask
(
uniqueToken
)
;
}
BSTR
startTimeBstr
;
if
(
FAILED
(
trigger
-
>
get_StartBoundary
(
&
startTimeBstr
)
)
)
{
return
RegisterTask
(
uniqueToken
)
;
}
BStrPtr
startTime
(
startTimeBstr
)
;
return
RegisterTask
(
uniqueToken
startTime
.
get
(
)
)
;
}
HRESULT
RemoveTask
(
const
wchar_t
*
uniqueToken
)
{
RefPtr
<
ITaskService
>
scheduler
;
HRESULT
hr
=
S_OK
;
ENSURE
(
CoCreateInstance
(
CLSID_TaskScheduler
nullptr
CLSCTX_INPROC_SERVER
IID_ITaskService
getter_AddRefs
(
scheduler
)
)
)
;
ENSURE
(
scheduler
-
>
Connect
(
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
)
)
;
RefPtr
<
ITaskFolder
>
taskFolder
;
BStrPtr
folderBStr
=
BStrPtr
(
SysAllocString
(
kTaskVendor
)
)
;
hr
=
scheduler
-
>
GetFolder
(
folderBStr
.
get
(
)
getter_AddRefs
(
taskFolder
)
)
;
if
(
FAILED
(
hr
)
)
{
if
(
hr
=
=
HRESULT_FROM_WIN32
(
ERROR_FILE_NOT_FOUND
)
)
{
return
S_OK
;
}
else
{
return
hr
;
}
}
std
:
:
wstring
taskName
(
kTaskName
)
;
taskName
+
=
uniqueToken
;
BStrPtr
taskNameBStr
=
BStrPtr
(
SysAllocString
(
taskName
.
c_str
(
)
)
)
;
hr
=
taskFolder
-
>
DeleteTask
(
taskNameBStr
.
get
(
)
0
)
;
if
(
FAILED
(
hr
)
)
{
if
(
hr
=
=
HRESULT_FROM_WIN32
(
ERROR_FILE_NOT_FOUND
)
)
{
return
S_OK
;
}
else
{
return
hr
;
}
}
RefPtr
<
IRegisteredTaskCollection
>
tasksInFolder
;
ENSURE
(
taskFolder
-
>
GetTasks
(
TASK_ENUM_HIDDEN
getter_AddRefs
(
tasksInFolder
)
)
)
;
LONG
numTasks
=
0
;
ENSURE
(
tasksInFolder
-
>
get_Count
(
&
numTasks
)
)
;
if
(
numTasks
<
=
0
)
{
RefPtr
<
ITaskFolder
>
rootFolder
;
BStrPtr
rootFolderBStr
=
BStrPtr
(
SysAllocString
(
L
"
\
\
"
)
)
;
ENSURE
(
scheduler
-
>
GetFolder
(
rootFolderBStr
.
get
(
)
getter_AddRefs
(
rootFolder
)
)
)
;
ENSURE
(
rootFolder
-
>
DeleteFolder
(
folderBStr
.
get
(
)
0
)
)
;
}
return
hr
;
}
