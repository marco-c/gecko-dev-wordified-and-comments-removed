#
include
"
mozilla
/
Logging
.
h
"
#
include
"
WindowsMutex
.
h
"
namespace
mozilla
:
:
default_agent
{
using
mozilla
:
:
LogLevel
;
static
LazyLogModule
gWindowsMutexLog
(
"
WindowsMutex
"
)
;
NS_IMPL_ISUPPORTS
(
WindowsMutexFactory
nsIWindowsMutexFactory
)
NS_IMETHODIMP
WindowsMutexFactory
:
:
CreateMutex
(
const
nsAString
&
aName
nsIWindowsMutex
*
*
aWindowsMutex
)
{
nsAutoHandle
mutex
;
auto
name
=
PromiseFlatString
(
aName
)
;
mutex
.
own
(
CreateMutexW
(
nullptr
FALSE
name
.
get
(
)
)
)
;
if
(
mutex
.
get
(
)
=
=
nullptr
)
{
MOZ_LOG
(
gWindowsMutexLog
LogLevel
:
:
Error
(
"
Couldn
'
t
open
mutex
\
"
%
s
\
"
:
%
#
lX
"
NS_ConvertUTF16toUTF8
(
name
)
.
get
(
)
GetLastError
(
)
)
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
RefPtr
<
WindowsMutex
>
nsMutex
=
new
WindowsMutex
(
name
mutex
)
;
nsMutex
.
forget
(
aWindowsMutex
)
;
return
NS_OK
;
}
WindowsMutex
:
:
WindowsMutex
(
const
nsString
&
aName
nsAutoHandle
&
aMutex
)
:
mName
(
NS_ConvertUTF16toUTF8
(
aName
)
)
mLocked
(
false
)
{
mMutex
.
steal
(
aMutex
)
;
}
WindowsMutex
:
:
~
WindowsMutex
(
)
{
Unlock
(
)
;
}
NS_IMPL_ISUPPORTS
(
WindowsMutex
nsIWindowsMutex
)
NS_IMETHODIMP
WindowsMutex
:
:
TryLock
(
)
{
DWORD
mutexStatus
=
WaitForSingleObject
(
mMutex
.
get
(
)
0
)
;
if
(
mutexStatus
=
=
WAIT_OBJECT_0
)
{
mLocked
=
true
;
}
else
if
(
mutexStatus
=
=
WAIT_TIMEOUT
)
{
MOZ_LOG
(
gWindowsMutexLog
LogLevel
:
:
Warning
(
"
Timed
out
waiting
for
mutex
\
"
%
s
\
"
"
mName
.
get
(
)
)
)
;
}
else
if
(
mutexStatus
=
=
WAIT_ABANDONED
)
{
MOZ_LOG
(
gWindowsMutexLog
LogLevel
:
:
Warning
(
"
Found
abandoned
mutex
\
"
%
s
\
"
.
Continuing
.
.
.
"
mName
.
get
(
)
)
)
;
mLocked
=
true
;
}
else
{
MOZ_LOG
(
gWindowsMutexLog
LogLevel
:
:
Error
(
"
Failed
to
wait
on
mutex
:
mName
:
%
s
error
%
#
lX
"
mName
.
get
(
)
GetLastError
(
)
)
)
;
}
return
mLocked
?
NS_OK
:
NS_ERROR_NOT_AVAILABLE
;
}
NS_IMETHODIMP
WindowsMutex
:
:
IsLocked
(
bool
*
aLocked
)
{
*
aLocked
=
mLocked
;
return
NS_OK
;
}
NS_IMETHODIMP
WindowsMutex
:
:
Unlock
(
)
{
nsresult
rv
=
NS_OK
;
if
(
mLocked
)
{
BOOL
success
=
ReleaseMutex
(
mMutex
.
get
(
)
)
;
if
(
!
success
)
{
MOZ_LOG
(
gWindowsMutexLog
LogLevel
:
:
Error
(
"
Failed
to
release
mutex
\
"
%
s
\
"
"
mName
.
get
(
)
)
)
;
rv
=
NS_ERROR_UNEXPECTED
;
}
mLocked
=
false
;
}
return
rv
;
}
}
