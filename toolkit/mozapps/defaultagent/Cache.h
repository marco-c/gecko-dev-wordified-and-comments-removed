#
ifndef
__DEFAULT_BROWSER_AGENT_CACHE_H__
#
define
__DEFAULT_BROWSER_AGENT_CACHE_H__
#
include
<
cstdint
>
#
include
<
string
>
#
include
<
windows
.
h
>
#
include
"
Registry
.
h
"
using
DwordResult
=
mozilla
:
:
WindowsErrorResult
<
uint32_t
>
;
class
Cache
{
public
:
explicit
Cache
(
const
wchar_t
*
cacheRegKey
=
nullptr
)
;
~
Cache
(
)
;
static
constexpr
const
uint32_t
kVersion
=
2
;
static
constexpr
const
uint32_t
kEntryVersion
=
2
;
static
constexpr
const
uint32_t
kDefaultCapacity
=
2
;
static
constexpr
const
uint32_t
kMaxCapacity
=
100
;
static
constexpr
const
wchar_t
*
kDefaultPingCacheRegKey
=
L
"
PingCache
"
;
static
constexpr
const
wchar_t
*
kVersion1KeyPrefix
=
L
"
PingCache
"
;
static
constexpr
const
uint32_t
kVersion1MaxSize
=
2
;
static
constexpr
const
wchar_t
*
kCapacityRegName
=
L
"
Capacity
"
;
static
constexpr
const
wchar_t
*
kFrontRegName
=
L
"
Front
"
;
static
constexpr
const
wchar_t
*
kSizeRegName
=
L
"
Size
"
;
static
constexpr
const
wchar_t
*
kEntryVersionKey
=
L
"
CacheEntryVersion
"
;
static
constexpr
const
wchar_t
*
kNotificationTypeKey
=
L
"
NotificationType
"
;
static
constexpr
const
wchar_t
*
kNotificationShownKey
=
L
"
NotificationShown
"
;
static
constexpr
const
wchar_t
*
kNotificationActionKey
=
L
"
NotificationAction
"
;
static
constexpr
const
wchar_t
*
kPrevNotificationActionKey
=
L
"
PrevNotificationAction
"
;
static
constexpr
const
uint32_t
kInitialVersionEntryVersionKey
=
1
;
static
constexpr
const
uint32_t
kInitialVersionNotificationTypeKey
=
1
;
static
constexpr
const
uint32_t
kInitialVersionNotificationShownKey
=
1
;
static
constexpr
const
uint32_t
kInitialVersionNotificationActionKey
=
1
;
static
constexpr
const
uint32_t
kInitialVersionPrevNotificationActionKey
=
2
;
struct
Entry
{
std
:
:
string
notificationType
;
std
:
:
string
notificationShown
;
std
:
:
string
notificationAction
;
std
:
:
string
prevNotificationAction
;
}
;
struct
VersionedEntry
{
uint32_t
entryVersion
;
std
:
:
string
notificationType
;
std
:
:
string
notificationShown
;
std
:
:
string
notificationAction
;
mozilla
:
:
Maybe
<
std
:
:
string
>
prevNotificationAction
;
}
;
using
MaybeEntry
=
mozilla
:
:
Maybe
<
VersionedEntry
>
;
using
MaybeEntryResult
=
mozilla
:
:
WindowsErrorResult
<
MaybeEntry
>
;
VoidResult
Init
(
)
;
VoidResult
Enqueue
(
const
Entry
&
entry
)
;
MaybeEntryResult
Dequeue
(
)
;
private
:
const
std
:
:
wstring
mCacheRegKey
;
mozilla
:
:
Maybe
<
HRESULT
>
mInitializeResult
;
uint32_t
mCapacity
;
uint32_t
mFront
;
uint32_t
mSize
;
DwordResult
EnsureDwordSetting
(
const
wchar_t
*
regName
uint32_t
defaultValue
)
;
VoidResult
SetupCache
(
)
;
VoidResult
MaybeMigrateVersion1
(
)
;
std
:
:
wstring
MakeEntryRegKeyName
(
uint32_t
index
)
;
VoidResult
WriteEntryKeys
(
uint32_t
index
const
VersionedEntry
&
entry
)
;
VoidResult
DeleteEntry
(
uint32_t
index
)
;
VoidResult
SetFront
(
uint32_t
newFront
)
;
VoidResult
SetSize
(
uint32_t
newSize
)
;
VoidResult
VersionedEnqueue
(
const
VersionedEntry
&
entry
)
;
VoidResult
DiscardFront
(
)
;
MaybeDwordResult
ReadEntryKeyDword
(
const
std
:
:
wstring
&
regKey
const
wchar_t
*
regName
bool
expected
)
;
MaybeStringResult
ReadEntryKeyString
(
const
std
:
:
wstring
&
regKey
const
wchar_t
*
regName
bool
expected
)
;
}
;
#
endif
