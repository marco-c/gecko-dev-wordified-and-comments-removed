#
include
"
common
.
h
"
#
include
"
EventLog
.
h
"
#
include
<
windows
.
h
>
namespace
mozilla
:
:
default_agent
{
ULONGLONG
GetCurrentTimestamp
(
)
{
FILETIME
filetime
;
GetSystemTimeAsFileTime
(
&
filetime
)
;
ULARGE_INTEGER
integerTime
;
integerTime
.
u
.
LowPart
=
filetime
.
dwLowDateTime
;
integerTime
.
u
.
HighPart
=
filetime
.
dwHighDateTime
;
return
integerTime
.
QuadPart
;
}
ULONGLONG
SecondsPassedSince
(
ULONGLONG
initialTime
ULONGLONG
currentTime
)
{
if
(
currentTime
=
=
0
)
{
currentTime
=
GetCurrentTimestamp
(
)
;
}
if
(
initialTime
>
=
currentTime
)
{
return
0
;
}
return
(
currentTime
-
initialTime
)
/
10
/
1000
/
1000
;
}
FilePathResult
GenerateUUIDStr
(
)
{
UUID
uuid
;
RPC_STATUS
status
=
UuidCreate
(
&
uuid
)
;
if
(
status
!
=
RPC_S_OK
)
{
HRESULT
hr
=
MAKE_HRESULT
(
1
FACILITY_RPC
status
)
;
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
wchar_t
guidBuf
[
39
]
=
{
}
;
if
(
StringFromGUID2
(
uuid
guidBuf
39
)
!
=
39
)
{
LOG_ERROR
(
HRESULT_FROM_WIN32
(
ERROR_INSUFFICIENT_BUFFER
)
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromWin32Error
(
ERROR_INSUFFICIENT_BUFFER
)
)
;
}
return
std
:
:
wstring
(
guidBuf
+
1
guidBuf
+
37
)
;
}
FilePathResult
GetRelativeBinaryPath
(
const
wchar_t
*
suffix
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ERROR_INSUFFICIENT_BUFFER
)
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
thisBinaryPath
=
mozilla
:
:
GetFullBinaryPath
(
)
;
if
(
!
PathRemoveFileSpecW
(
thisBinaryPath
.
get
(
)
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
wchar_t
relativePath
[
MAX_PATH
]
=
L
"
"
;
if
(
!
PathCombineW
(
relativePath
thisBinaryPath
.
get
(
)
suffix
)
)
{
LOG_ERROR
(
hr
)
;
return
FilePathResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
std
:
:
wstring
(
relativePath
)
;
}
}
