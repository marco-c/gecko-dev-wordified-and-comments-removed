#
include
"
ScheduledTaskRemove
.
h
"
#
include
<
string
>
#
include
<
comutil
.
h
>
#
include
<
taskschd
.
h
>
#
include
"
EventLog
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
namespace
mozilla
:
:
default_agent
{
#
define
ENSURE
(
x
)
\
if
(
FAILED
(
hr
=
(
x
)
)
)
{
\
LOG_ERROR
(
hr
)
;
\
return
hr
;
\
}
bool
EndsWith
(
const
wchar_t
*
string
const
wchar_t
*
suffix
)
{
size_t
string_len
=
wcslen
(
string
)
;
size_t
suffix_len
=
wcslen
(
suffix
)
;
if
(
suffix_len
>
string_len
)
{
return
false
;
}
const
wchar_t
*
substring
=
string
+
string_len
-
suffix_len
;
return
wcscmp
(
substring
suffix
)
=
=
0
;
}
HRESULT
RemoveTasks
(
const
wchar_t
*
uniqueToken
WhichTasks
tasksToRemove
)
{
if
(
!
uniqueToken
|
|
wcslen
(
uniqueToken
)
=
=
0
)
{
return
E_INVALIDARG
;
}
RefPtr
<
ITaskService
>
scheduler
;
HRESULT
hr
=
S_OK
;
ENSURE
(
CoCreateInstance
(
CLSID_TaskScheduler
nullptr
CLSCTX_INPROC_SERVER
IID_ITaskService
getter_AddRefs
(
scheduler
)
)
)
;
ENSURE
(
scheduler
-
>
Connect
(
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
)
)
;
RefPtr
<
ITaskFolder
>
taskFolder
;
BStrPtr
folderBStr
(
SysAllocString
(
kTaskVendor
)
)
;
hr
=
scheduler
-
>
GetFolder
(
folderBStr
.
get
(
)
getter_AddRefs
(
taskFolder
)
)
;
if
(
FAILED
(
hr
)
)
{
if
(
hr
=
=
HRESULT_FROM_WIN32
(
ERROR_FILE_NOT_FOUND
)
)
{
return
S_OK
;
}
else
{
return
hr
;
}
}
RefPtr
<
IRegisteredTaskCollection
>
tasksInFolder
;
ENSURE
(
taskFolder
-
>
GetTasks
(
TASK_ENUM_HIDDEN
getter_AddRefs
(
tasksInFolder
)
)
)
;
LONG
numTasks
=
0
;
ENSURE
(
tasksInFolder
-
>
get_Count
(
&
numTasks
)
)
;
std
:
:
wstring
WdbaTaskName
(
kTaskName
)
;
WdbaTaskName
+
=
uniqueToken
;
HRESULT
deleteResult
=
S_OK
;
bool
tasksSkipped
=
false
;
for
(
LONG
i
=
0
;
i
<
numTasks
;
+
+
i
)
{
RefPtr
<
IRegisteredTask
>
task
;
hr
=
tasksInFolder
-
>
get_Item
(
_variant_t
(
i
+
1
)
getter_AddRefs
(
task
)
)
;
if
(
FAILED
(
hr
)
)
{
deleteResult
=
hr
;
continue
;
}
BSTR
taskName
;
hr
=
task
-
>
get_Name
(
&
taskName
)
;
if
(
FAILED
(
hr
)
)
{
deleteResult
=
hr
;
continue
;
}
BStrPtr
uniqueTaskName
(
taskName
)
;
if
(
tasksToRemove
=
=
WhichTasks
:
:
WdbaTaskOnly
)
{
if
(
WdbaTaskName
.
compare
(
taskName
)
!
=
0
)
{
tasksSkipped
=
true
;
continue
;
}
}
else
{
if
(
!
EndsWith
(
taskName
uniqueToken
)
)
{
tasksSkipped
=
true
;
continue
;
}
}
hr
=
taskFolder
-
>
DeleteTask
(
taskName
0
)
;
if
(
FAILED
(
hr
)
)
{
deleteResult
=
hr
;
}
}
if
(
!
tasksSkipped
&
&
SUCCEEDED
(
deleteResult
)
)
{
RefPtr
<
ITaskFolder
>
rootFolder
;
BStrPtr
rootFolderBStr
=
BStrPtr
(
SysAllocString
(
L
"
\
\
"
)
)
;
ENSURE
(
scheduler
-
>
GetFolder
(
rootFolderBStr
.
get
(
)
getter_AddRefs
(
rootFolder
)
)
)
;
ENSURE
(
rootFolder
-
>
DeleteFolder
(
folderBStr
.
get
(
)
0
)
)
;
}
return
deleteResult
;
}
}
