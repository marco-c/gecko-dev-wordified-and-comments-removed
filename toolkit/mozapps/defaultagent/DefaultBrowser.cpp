#
include
"
DefaultBrowser
.
h
"
#
include
<
string
>
#
include
<
shlobj
.
h
>
#
include
<
shlwapi
.
h
>
#
include
"
common
.
h
"
#
include
"
EventLog
.
h
"
#
include
"
Registry
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
using
BrowserResult
=
mozilla
:
:
WindowsErrorResult
<
Browser
>
;
constexpr
std
:
:
pair
<
std
:
:
string_view
Browser
>
kStringBrowserMap
[
]
{
{
"
"
Browser
:
:
Unknown
}
{
"
firefox
"
Browser
:
:
Firefox
}
{
"
chrome
"
Browser
:
:
Chrome
}
{
"
edge
"
Browser
:
:
EdgeWithEdgeHTML
}
{
"
edge
-
chrome
"
Browser
:
:
EdgeWithBlink
}
{
"
ie
"
Browser
:
:
InternetExplorer
}
{
"
opera
"
Browser
:
:
Opera
}
{
"
brave
"
Browser
:
:
Brave
}
{
"
yandex
"
Browser
:
:
Yandex
}
{
"
qq
-
browser
"
Browser
:
:
QQBrowser
}
{
"
360
-
browser
"
Browser
:
:
_360Browser
}
{
"
sogou
"
Browser
:
:
Sogou
}
}
;
static_assert
(
mozilla
:
:
ArrayLength
(
kStringBrowserMap
)
=
=
kBrowserCount
)
;
std
:
:
string
GetStringForBrowser
(
Browser
browser
)
{
for
(
const
auto
&
[
mapString
mapBrowser
]
:
kStringBrowserMap
)
{
if
(
browser
=
=
mapBrowser
)
{
return
std
:
:
string
{
mapString
}
;
}
}
return
std
:
:
string
(
"
"
)
;
}
Browser
GetBrowserFromString
(
const
std
:
:
string
&
browserString
)
{
for
(
const
auto
&
[
mapString
mapBrowser
]
:
kStringBrowserMap
)
{
if
(
browserString
=
=
mapString
)
{
return
mapBrowser
;
}
}
return
Browser
:
:
Unknown
;
}
static
BrowserResult
GetDefaultBrowser
(
)
{
RefPtr
<
IApplicationAssociationRegistration
>
pAAR
;
HRESULT
hr
=
CoCreateInstance
(
CLSID_ApplicationAssociationRegistration
nullptr
CLSCTX_INPROC
IID_IApplicationAssociationRegistration
getter_AddRefs
(
pAAR
)
)
;
if
(
FAILED
(
hr
)
)
{
LOG_ERROR
(
hr
)
;
return
BrowserResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
wchar_t
*
rawRegisteredApp
;
hr
=
pAAR
-
>
QueryCurrentDefault
(
L
"
http
"
AT_URLPROTOCOL
AL_EFFECTIVE
&
rawRegisteredApp
)
;
if
(
FAILED
(
hr
)
)
{
LOG_ERROR
(
hr
)
;
return
BrowserResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
mozilla
:
:
UniquePtr
<
wchar_t
mozilla
:
:
CoTaskMemFreeDeleter
>
registeredApp
(
rawRegisteredApp
)
;
std
:
:
array
<
wchar_t
256
>
friendlyName
{
}
;
DWORD
friendlyNameLen
=
friendlyName
.
size
(
)
;
hr
=
AssocQueryStringW
(
ASSOCF_NONE
ASSOCSTR_FRIENDLYAPPNAME
registeredApp
.
get
(
)
NULL
friendlyName
.
data
(
)
&
friendlyNameLen
)
;
if
(
FAILED
(
hr
)
)
{
LOG_ERROR
(
hr
)
;
return
BrowserResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
constexpr
std
:
:
pair
<
std
:
:
wstring_view
Browser
>
kFriendlyNamePrefixes
[
]
=
{
{
L
"
Firefox
"
Browser
:
:
Firefox
}
{
L
"
Google
Chrome
"
Browser
:
:
Chrome
}
{
L
"
Microsoft
Edge
"
Browser
:
:
EdgeWithBlink
}
{
L
"
Internet
Explorer
"
Browser
:
:
InternetExplorer
}
{
L
"
Opera
"
Browser
:
:
Opera
}
{
L
"
Brave
"
Browser
:
:
Brave
}
{
L
"
Yandex
"
Browser
:
:
Yandex
}
{
L
"
QQBrowser
"
Browser
:
:
QQBrowser
}
{
L
"
\
u0033
\
u0036
\
u0030
\
u5b89
\
u5168
\
u6d4f
\
u89c8
\
u5668
"
Browser
:
:
_360Browser
}
{
L
"
\
u641c
\
u72d7
\
u9ad8
\
u901f
\
u6d4f
\
u89c8
\
u5668
"
Browser
:
:
Sogou
}
}
;
for
(
const
auto
&
[
prefix
browser
]
:
kFriendlyNamePrefixes
)
{
if
(
!
wcsnicmp
(
friendlyName
.
data
(
)
prefix
.
data
(
)
prefix
.
length
(
)
)
)
{
if
(
browser
=
=
Browser
:
:
EdgeWithBlink
)
{
constexpr
std
:
:
wstring_view
progIdEdgeHtml
{
L
"
AppXq0fevzme2pys62n3e0fbqa7peapykr8v
"
}
;
if
(
!
wcsnicmp
(
registeredApp
.
get
(
)
progIdEdgeHtml
.
data
(
)
progIdEdgeHtml
.
length
(
)
)
)
{
return
Browser
:
:
EdgeWithEdgeHTML
;
}
}
return
browser
;
}
}
return
Browser
:
:
Unknown
;
}
static
BrowserResult
GetPreviousDefaultBrowser
(
Browser
currentDefault
)
{
std
:
:
string
currentDefaultStr
=
GetStringForBrowser
(
currentDefault
)
;
std
:
:
string
previousDefault
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
L
"
CurrentDefault
"
)
.
unwrapOr
(
mozilla
:
:
Some
(
currentDefaultStr
)
)
.
valueOr
(
currentDefaultStr
)
;
mozilla
:
:
Unused
<
<
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
L
"
CurrentDefault
"
currentDefaultStr
.
c_str
(
)
)
;
return
GetBrowserFromString
(
previousDefault
)
;
}
DefaultBrowserResult
GetDefaultBrowserInfo
(
)
{
DefaultBrowserInfo
browserInfo
;
BrowserResult
defaultBrowserResult
=
GetDefaultBrowser
(
)
;
if
(
defaultBrowserResult
.
isErr
(
)
)
{
return
DefaultBrowserResult
(
defaultBrowserResult
.
unwrapErr
(
)
)
;
}
browserInfo
.
currentDefaultBrowser
=
defaultBrowserResult
.
unwrap
(
)
;
BrowserResult
previousDefaultBrowserResult
=
GetPreviousDefaultBrowser
(
browserInfo
.
currentDefaultBrowser
)
;
if
(
previousDefaultBrowserResult
.
isErr
(
)
)
{
return
DefaultBrowserResult
(
previousDefaultBrowserResult
.
unwrapErr
(
)
)
;
}
browserInfo
.
previousDefaultBrowser
=
previousDefaultBrowserResult
.
unwrap
(
)
;
return
browserInfo
;
}
void
MaybeMigrateCurrentDefault
(
)
{
const
wchar_t
*
valueName
=
L
"
CurrentDefault
"
;
MaybeStringResult
valueResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Prefixed
valueName
)
;
if
(
valueResult
.
isErr
(
)
)
{
return
;
}
mozilla
:
:
Maybe
<
std
:
:
string
>
maybeValue
=
valueResult
.
unwrap
(
)
;
if
(
maybeValue
.
isNothing
(
)
)
{
return
;
}
std
:
:
string
value
=
maybeValue
.
value
(
)
;
mozilla
:
:
Unused
<
<
RegistryDeleteValue
(
IsPrefixed
:
:
Prefixed
valueName
)
;
valueResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Unprefixed
valueName
)
;
if
(
valueResult
.
isErr
(
)
)
{
return
;
}
if
(
valueResult
.
unwrap
(
)
.
isNothing
(
)
)
{
mozilla
:
:
Unused
<
<
RegistrySetValueString
(
IsPrefixed
:
:
Unprefixed
valueName
value
.
c_str
(
)
)
;
}
}
