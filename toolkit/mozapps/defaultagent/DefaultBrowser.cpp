#
include
"
DefaultBrowser
.
h
"
#
include
<
string
>
#
include
<
unordered_map
>
#
include
<
shlobj
.
h
>
#
include
<
shlwapi
.
h
>
#
include
"
common
.
h
"
#
include
"
EventLog
.
h
"
#
include
"
Registry
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
using
StringResult
=
mozilla
:
:
WindowsErrorResult
<
std
:
:
string
>
;
static
StringResult
GetDefaultBrowser
(
)
{
RefPtr
<
IApplicationAssociationRegistration
>
pAAR
;
HRESULT
hr
=
CoCreateInstance
(
CLSID_ApplicationAssociationRegistration
nullptr
CLSCTX_INPROC
IID_IApplicationAssociationRegistration
getter_AddRefs
(
pAAR
)
)
;
if
(
FAILED
(
hr
)
)
{
LOG_ERROR
(
hr
)
;
return
StringResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
wchar_t
*
rawRegisteredApp
;
hr
=
pAAR
-
>
QueryCurrentDefault
(
L
"
http
"
AT_URLPROTOCOL
AL_EFFECTIVE
&
rawRegisteredApp
)
;
if
(
FAILED
(
hr
)
)
{
LOG_ERROR
(
hr
)
;
return
StringResult
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
mozilla
:
:
UniquePtr
<
wchar_t
mozilla
:
:
CoTaskMemFreeDeleter
>
registeredApp
(
rawRegisteredApp
)
;
const
std
:
:
unordered_map
<
std
:
:
wstring
std
:
:
string
>
AppIDPrefixes
=
{
{
L
"
Firefox
"
"
firefox
"
}
{
L
"
Chrome
"
"
chrome
"
}
{
L
"
AppX
"
"
edge
"
}
{
L
"
MSEdgeHTM
"
"
edge
-
chrome
"
}
{
L
"
IE
.
"
"
ie
"
}
{
L
"
Opera
"
"
opera
"
}
{
L
"
Brave
"
"
brave
"
}
}
;
for
(
const
auto
&
prefix
:
AppIDPrefixes
)
{
if
(
!
wcsnicmp
(
registeredApp
.
get
(
)
prefix
.
first
.
c_str
(
)
prefix
.
first
.
length
(
)
)
)
{
return
prefix
.
second
;
}
}
return
std
:
:
string
(
"
"
)
;
}
static
StringResult
GetPreviousDefaultBrowser
(
const
std
:
:
string
&
currentDefault
)
{
std
:
:
string
previousDefault
=
RegistryGetValueString
(
IsPrefixed
:
:
Prefixed
L
"
CurrentDefault
"
)
.
unwrapOr
(
mozilla
:
:
Some
(
currentDefault
)
)
.
valueOr
(
currentDefault
)
;
mozilla
:
:
Unused
<
<
RegistrySetValueString
(
IsPrefixed
:
:
Prefixed
L
"
CurrentDefault
"
currentDefault
.
c_str
(
)
)
;
return
previousDefault
;
}
DefaultBrowserResult
GetDefaultBrowserInfo
(
)
{
DefaultBrowserInfo
browserInfo
;
StringResult
defaultBrowserResult
=
GetDefaultBrowser
(
)
;
if
(
defaultBrowserResult
.
isErr
(
)
)
{
return
DefaultBrowserResult
(
defaultBrowserResult
.
unwrapErr
(
)
)
;
}
browserInfo
.
currentDefaultBrowser
=
defaultBrowserResult
.
unwrap
(
)
;
StringResult
previousDefaultBrowserResult
=
GetPreviousDefaultBrowser
(
browserInfo
.
currentDefaultBrowser
)
;
if
(
previousDefaultBrowserResult
.
isErr
(
)
)
{
return
DefaultBrowserResult
(
previousDefaultBrowserResult
.
unwrapErr
(
)
)
;
}
browserInfo
.
previousDefaultBrowser
=
previousDefaultBrowserResult
.
unwrap
(
)
;
return
browserInfo
;
}
