#
include
<
windows
.
h
>
#
include
<
shlwapi
.
h
>
#
include
<
objbase
.
h
>
#
include
<
string
.
h
>
#
include
<
filesystem
>
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
int
wmain
(
int
argc
wchar_t
*
*
argv
)
{
std
:
:
vector
<
wchar_t
>
path
(
MAX_PATH
0
)
;
DWORD
charsWritten
=
GetModuleFileNameW
(
nullptr
path
.
data
(
)
path
.
size
(
)
)
;
while
(
charsWritten
=
=
path
.
size
(
)
)
{
path
.
resize
(
path
.
size
(
)
*
2
0
)
;
charsWritten
=
GetModuleFileNameW
(
nullptr
path
.
data
(
)
path
.
size
(
)
)
;
}
if
(
charsWritten
=
=
0
)
{
return
E_UNEXPECTED
;
}
std
:
:
filesystem
:
:
path
programPath
=
path
.
data
(
)
;
programPath
=
programPath
.
parent_path
(
)
;
programPath
+
=
L
"
\
\
"
MOZ_APP_NAME
L
"
.
exe
"
;
std
:
:
vector
<
const
wchar_t
*
>
childArgv
;
childArgv
.
push_back
(
programPath
.
c_str
(
)
)
;
childArgv
.
push_back
(
L
"
-
-
backgroundtask
"
)
;
childArgv
.
push_back
(
L
"
defaultagent
"
)
;
for
(
int
i
=
1
;
i
<
argc
;
i
+
+
)
{
childArgv
.
push_back
(
argv
[
i
]
)
;
}
auto
cmdLine
=
mozilla
:
:
MakeCommandLine
(
childArgv
.
size
(
)
childArgv
.
data
(
)
)
;
STARTUPINFOW
si
=
{
}
;
si
.
cb
=
sizeof
(
STARTUPINFOW
)
;
PROCESS_INFORMATION
pi
=
{
}
;
CreateProcessW
(
programPath
.
c_str
(
)
cmdLine
.
get
(
)
nullptr
nullptr
false
DETACHED_PROCESS
|
NORMAL_PRIORITY_CLASS
nullptr
nullptr
&
si
&
pi
)
;
}
