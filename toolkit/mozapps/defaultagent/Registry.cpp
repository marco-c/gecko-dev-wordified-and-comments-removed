#
include
"
Registry
.
h
"
#
include
<
windows
.
h
>
#
include
<
shlwapi
.
h
>
#
include
"
common
.
h
"
using
WStringResult
=
mozilla
:
:
WindowsErrorResult
<
std
:
:
wstring
>
;
static
WStringResult
MaybePrefixRegistryValueName
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueNameSuffix
)
{
if
(
isPrefixed
=
=
IsPrefixed
:
:
Unprefixed
)
{
std
:
:
wstring
registryValueName
=
registryValueNameSuffix
;
return
registryValueName
;
}
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
installPath
=
mozilla
:
:
GetFullBinaryPath
(
)
;
if
(
!
PathRemoveFileSpecW
(
installPath
.
get
(
)
)
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ERROR_BAD_PATHNAME
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
std
:
:
wstring
registryValueName
(
installPath
.
get
(
)
)
;
registryValueName
.
append
(
L
"
|
"
)
;
registryValueName
.
append
(
registryValueNameSuffix
)
;
return
registryValueName
;
}
static
std
:
:
wstring
MakeKeyName
(
const
wchar_t
*
subKey
)
{
std
:
:
wstring
keyName
=
AGENT_REGKEY_NAME
;
if
(
subKey
)
{
keyName
+
=
L
"
\
\
"
;
keyName
+
=
subKey
;
}
return
keyName
;
}
MaybeStringResult
RegistryGetValueString
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
DWORD
wideDataSize
=
0
;
LSTATUS
ls
=
RegGetValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
RRF_RT_REG_SZ
nullptr
nullptr
&
wideDataSize
)
;
if
(
ls
=
=
ERROR_FILE_NOT_FOUND
)
{
return
mozilla
:
:
Maybe
<
std
:
:
string
>
(
mozilla
:
:
Nothing
(
)
)
;
}
else
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
DWORD
charCount
=
(
wideDataSize
/
sizeof
(
wchar_t
)
)
+
1
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
wideData
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
charCount
)
;
ls
=
RegGetValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
RRF_RT_REG_SZ
nullptr
wideData
.
get
(
)
&
wideDataSize
)
;
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
int
narrowLen
=
WideCharToMultiByte
(
CP_UTF8
0
wideData
.
get
(
)
-
1
nullptr
0
nullptr
nullptr
)
;
if
(
narrowLen
=
=
0
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
mozilla
:
:
UniquePtr
<
char
[
]
>
narrowOldValue
=
mozilla
:
:
MakeUnique
<
char
[
]
>
(
narrowLen
)
;
int
charsWritten
=
WideCharToMultiByte
(
CP_UTF8
0
wideData
.
get
(
)
-
1
narrowOldValue
.
get
(
)
narrowLen
nullptr
nullptr
)
;
if
(
charsWritten
=
=
0
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Some
(
std
:
:
string
(
narrowOldValue
.
get
(
)
)
)
;
}
VoidResult
RegistrySetValueString
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
const
char
*
newValue
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
int
wideLen
=
MultiByteToWideChar
(
CP_UTF8
0
newValue
-
1
nullptr
0
)
;
if
(
wideLen
=
=
0
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
wideValue
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
wideLen
)
;
int
charsWritten
=
MultiByteToWideChar
(
CP_UTF8
0
newValue
-
1
wideValue
.
get
(
)
wideLen
)
;
if
(
charsWritten
=
=
0
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
GetLastError
(
)
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
LSTATUS
ls
=
RegSetKeyValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
REG_SZ
wideValue
.
get
(
)
wideLen
*
sizeof
(
wchar_t
)
)
;
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Ok
(
)
;
}
MaybeBoolResult
RegistryGetValueBool
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
DWORD
value
;
DWORD
valueSize
=
sizeof
(
DWORD
)
;
LSTATUS
ls
=
RegGetValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
RRF_RT_REG_DWORD
nullptr
&
value
&
valueSize
)
;
if
(
ls
=
=
ERROR_FILE_NOT_FOUND
)
{
return
mozilla
:
:
Maybe
<
bool
>
(
mozilla
:
:
Nothing
(
)
)
;
}
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Some
(
value
!
=
0
)
;
}
VoidResult
RegistrySetValueBool
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
bool
newValue
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
DWORD
value
=
newValue
?
1
:
0
;
LSTATUS
ls
=
RegSetKeyValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
REG_DWORD
&
value
sizeof
(
DWORD
)
)
;
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Ok
(
)
;
}
MaybeQwordResult
RegistryGetValueQword
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
ULONGLONG
value
;
DWORD
valueSize
=
sizeof
(
ULONGLONG
)
;
LSTATUS
ls
=
RegGetValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
RRF_RT_REG_QWORD
nullptr
&
value
&
valueSize
)
;
if
(
ls
=
=
ERROR_FILE_NOT_FOUND
)
{
return
mozilla
:
:
Maybe
<
ULONGLONG
>
(
mozilla
:
:
Nothing
(
)
)
;
}
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Some
(
value
)
;
}
VoidResult
RegistrySetValueQword
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
ULONGLONG
newValue
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
LSTATUS
ls
=
RegSetKeyValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
REG_QWORD
&
newValue
sizeof
(
ULONGLONG
)
)
;
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Ok
(
)
;
}
MaybeDwordResult
RegistryGetValueDword
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
uint32_t
value
;
DWORD
valueSize
=
sizeof
(
uint32_t
)
;
LSTATUS
ls
=
RegGetValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
RRF_RT_DWORD
nullptr
&
value
&
valueSize
)
;
if
(
ls
=
=
ERROR_FILE_NOT_FOUND
)
{
return
mozilla
:
:
Maybe
<
uint32_t
>
(
mozilla
:
:
Nothing
(
)
)
;
}
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Some
(
value
)
;
}
VoidResult
RegistrySetValueDword
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
uint32_t
newValue
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
LSTATUS
ls
=
RegSetKeyValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
REG_DWORD
&
newValue
sizeof
(
uint32_t
)
)
;
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Ok
(
)
;
}
VoidResult
RegistryDeleteValue
(
IsPrefixed
isPrefixed
const
wchar_t
*
registryValueName
const
wchar_t
*
subKey
)
{
WStringResult
registryValueNameResult
=
MaybePrefixRegistryValueName
(
isPrefixed
registryValueName
)
;
if
(
registryValueNameResult
.
isErr
(
)
)
{
return
mozilla
:
:
Err
(
registryValueNameResult
.
unwrapErr
(
)
)
;
}
std
:
:
wstring
valueName
=
registryValueNameResult
.
unwrap
(
)
;
std
:
:
wstring
keyName
=
MakeKeyName
(
subKey
)
;
LSTATUS
ls
=
RegDeleteKeyValueW
(
HKEY_CURRENT_USER
keyName
.
c_str
(
)
valueName
.
c_str
(
)
)
;
if
(
ls
!
=
ERROR_SUCCESS
)
{
HRESULT
hr
=
HRESULT_FROM_WIN32
(
ls
)
;
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
return
mozilla
:
:
Ok
(
)
;
}
