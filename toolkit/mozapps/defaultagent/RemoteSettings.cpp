#
include
"
RemoteSettings
.
h
"
#
include
<
iostream
>
#
include
<
windows
.
h
>
#
include
<
shlwapi
.
h
>
#
include
"
common
.
h
"
#
include
"
Registry
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
extern
"
C
"
{
HRESULT
IsAgentRemoteDisabledRust
(
const
char
*
szUrl
DWORD
*
lpdwDisabled
)
;
}
#
define
PROD_ENDPOINT
"
https
:
/
/
firefox
.
settings
.
services
.
mozilla
.
com
/
v1
"
#
define
PROD_BID
"
main
"
#
define
PROD_CID
"
windows
-
default
-
browser
-
agent
"
#
define
PROD_ID
"
state
"
#
define
PATH
"
buckets
/
"
PROD_BID
"
/
collections
/
"
PROD_CID
"
/
records
/
"
PROD_ID
using
BoolResult
=
mozilla
:
:
WindowsErrorResult
<
bool
>
;
static
BoolResult
IsAgentRemoteDisabledInternal
(
)
{
auto
serverResult
=
RegistryGetValueString
(
IsPrefixed
:
:
Prefixed
L
"
ServicesSettingsServer
"
)
;
std
:
:
string
url
=
serverResult
.
unwrapOr
(
mozilla
:
:
Some
(
std
:
:
string
(
PROD_ENDPOINT
)
)
)
.
valueOr
(
std
:
:
string
(
PROD_ENDPOINT
)
)
;
if
(
url
.
length
(
)
>
0
&
&
url
[
url
.
length
(
)
-
1
]
!
=
'
/
'
)
{
url
+
=
'
/
'
;
}
url
+
=
PATH
;
std
:
:
cerr
<
<
"
default
-
browser
-
agent
:
Remote
service
disabled
state
URL
:
'
"
<
<
url
<
<
"
'
"
<
<
std
:
:
endl
;
DWORD
isRemoteDisabled
;
HRESULT
hr
=
IsAgentRemoteDisabledRust
(
url
.
c_str
(
)
&
isRemoteDisabled
)
;
std
:
:
cerr
<
<
"
default
-
browser
-
agent
:
HRESULT
:
0x
"
<
<
std
:
:
hex
<
<
hr
<
<
std
:
:
endl
;
if
(
SUCCEEDED
(
hr
)
)
{
return
(
0
!
=
isRemoteDisabled
)
;
}
LOG_ERROR
(
hr
)
;
return
mozilla
:
:
Err
(
mozilla
:
:
WindowsError
:
:
FromHResult
(
hr
)
)
;
}
bool
IsAgentRemoteDisabled
(
)
{
bool
lastRemoteDisabled
=
RegistryGetValueBool
(
IsPrefixed
:
:
Prefixed
L
"
DefaultAgentLastRemoteDisabled
"
)
.
unwrapOr
(
mozilla
:
:
Some
(
false
)
)
.
valueOr
(
false
)
;
std
:
:
cerr
<
<
"
default
-
browser
-
agent
:
Last
remote
disabled
:
"
<
<
lastRemoteDisabled
<
<
std
:
:
endl
;
auto
remoteDisabledResult
=
IsAgentRemoteDisabledInternal
(
)
;
if
(
remoteDisabledResult
.
isErr
(
)
)
{
return
lastRemoteDisabled
;
}
bool
remoteDisabled
=
remoteDisabledResult
.
unwrap
(
)
;
std
:
:
cerr
<
<
"
default
-
browser
-
agent
:
Next
remote
disabled
:
"
<
<
remoteDisabled
<
<
std
:
:
endl
;
mozilla
:
:
Unused
<
<
RegistrySetValueBool
(
IsPrefixed
:
:
Prefixed
L
"
DefaultAgentLastRemoteDisabled
"
remoteDisabled
)
;
return
remoteDisabled
;
}
