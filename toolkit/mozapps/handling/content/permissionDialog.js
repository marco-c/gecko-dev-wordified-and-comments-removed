const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
EnableDelayHelper
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
SharedPromptUtils
.
jsm
"
)
;
let
dialog
=
{
initialize
(
)
{
let
args
=
window
.
arguments
[
0
]
.
wrappedJSObject
|
|
window
.
arguments
[
0
]
;
let
{
handler
principal
outArgs
canPersistPermission
preferredHandlerName
browsingContext
}
=
args
;
this
.
_handlerInfo
=
handler
.
QueryInterface
(
Ci
.
nsIHandlerInfo
)
;
this
.
_principal
=
principal
?
.
QueryInterface
(
Ci
.
nsIPrincipal
)
;
this
.
_browsingContext
=
browsingContext
;
this
.
_outArgs
=
outArgs
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag
)
;
this
.
_preferredHandlerName
=
preferredHandlerName
;
this
.
_dialog
=
document
.
querySelector
(
"
dialog
"
)
;
this
.
_checkRemember
=
document
.
getElementById
(
"
remember
"
)
;
this
.
_checkRememberContainer
=
document
.
getElementById
(
"
rememberContainer
"
)
;
if
(
!
canPersistPermission
)
{
this
.
_checkRememberContainer
.
hidden
=
true
;
}
let
changeAppLink
=
document
.
getElementById
(
"
change
-
app
"
)
;
if
(
this
.
_preferredHandlerName
)
{
changeAppLink
.
hidden
=
false
;
changeAppLink
.
addEventListener
(
"
click
"
(
)
=
>
this
.
onChangeApp
(
)
)
;
}
document
.
addEventListener
(
"
dialogaccept
"
(
)
=
>
this
.
onAccept
(
)
)
;
document
.
mozSubdialogReady
=
this
.
initL10n
(
)
.
then
(
(
)
=
>
{
window
.
sizeToContent
(
)
;
}
)
;
this
.
_delayHelper
=
new
EnableDelayHelper
(
{
disableDialog
:
(
)
=
>
{
this
.
_dialog
.
setAttribute
(
"
buttondisabledaccept
"
true
)
;
}
enableDialog
:
(
)
=
>
{
this
.
_dialog
.
setAttribute
(
"
buttondisabledaccept
"
false
)
;
}
focusTarget
:
window
}
)
;
}
triggeringPrincipalIsTop
(
)
{
let
topContentPrincipal
=
this
.
_browsingContext
?
.
top
.
embedderElement
?
.
contentPrincipal
;
if
(
!
topContentPrincipal
)
{
return
false
;
}
return
this
.
_principal
.
equals
(
topContentPrincipal
)
;
}
async
initL10n
(
)
{
let
idAcceptButton
;
if
(
this
.
_preferredHandlerName
)
{
idAcceptButton
=
"
permission
-
dialog
-
btn
-
open
-
link
"
;
}
else
{
idAcceptButton
=
"
permission
-
dialog
-
btn
-
choose
-
app
"
;
let
descriptionExtra
=
document
.
getElementById
(
"
description
-
extra
"
)
;
descriptionExtra
.
hidden
=
false
;
}
let
host
=
this
.
_principal
?
.
exposablePrePath
;
let
scheme
=
this
.
_handlerInfo
.
type
;
let
description
=
document
.
getElementById
(
"
description
"
)
;
if
(
host
&
&
!
this
.
triggeringPrincipalIsTop
(
)
)
{
if
(
this
.
_preferredHandlerName
)
{
document
.
l10n
.
setAttributes
(
description
"
permission
-
dialog
-
description
-
host
-
app
"
{
host
scheme
appName
:
this
.
_preferredHandlerName
}
)
;
}
else
{
document
.
l10n
.
setAttributes
(
description
"
permission
-
dialog
-
description
-
host
"
{
host
scheme
}
)
;
}
}
else
if
(
this
.
_preferredHandlerName
)
{
document
.
l10n
.
setAttributes
(
description
"
permission
-
dialog
-
description
-
app
"
{
scheme
appName
:
this
.
_preferredHandlerName
}
)
;
}
else
{
document
.
l10n
.
setAttributes
(
description
"
permission
-
dialog
-
description
"
{
scheme
}
)
;
}
if
(
!
this
.
_checkRememberContainer
.
hidden
)
{
let
checkboxLabel
=
document
.
getElementById
(
"
remember
-
label
"
)
;
document
.
l10n
.
setAttributes
(
checkboxLabel
"
permission
-
dialog
-
remember
"
{
host
scheme
}
)
;
}
let
acceptButton
=
this
.
_dialog
.
getButton
(
"
accept
"
)
;
let
[
result
]
=
await
document
.
l10n
.
formatMessages
(
[
{
id
:
idAcceptButton
}
]
)
;
result
.
attributes
.
forEach
(
attr
=
>
{
if
(
attr
.
name
=
=
"
label
"
)
{
acceptButton
.
label
=
attr
.
value
;
}
else
{
acceptButton
.
accessKey
=
attr
.
value
;
}
}
)
;
return
document
.
l10n
.
ready
;
}
onAccept
(
)
{
this
.
_outArgs
.
setProperty
(
"
remember
"
this
.
_checkRemember
.
checked
)
;
this
.
_outArgs
.
setProperty
(
"
granted
"
true
)
;
}
onChangeApp
(
)
{
this
.
_outArgs
.
setProperty
(
"
resetHandlerChoice
"
true
)
;
this
.
onAccept
(
)
;
window
.
close
(
)
;
}
}
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
dialog
.
initialize
(
)
{
once
:
true
}
)
;
