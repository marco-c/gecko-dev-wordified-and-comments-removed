const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
DIALOG_URL_APP_CHOOSER
=
"
chrome
:
/
/
mozapps
/
content
/
handling
/
appChooser
.
xhtml
"
;
const
DIALOG_URL_PERMISSION
=
"
chrome
:
/
/
mozapps
/
content
/
handling
/
permissionDialog
.
xhtml
"
;
var
EXPORTED_SYMBOLS
=
[
"
nsContentDispatchChooser
"
]
;
const
PROTOCOL_HANDLER_OPEN_PERM_KEY
=
"
open
-
protocol
-
handler
"
;
const
PERMISSION_KEY_DELIMITER
=
"
^
"
;
class
nsContentDispatchChooser
{
async
handleURI
(
aHandler
aURI
aPrincipal
aBrowsingContext
)
{
let
callerHasPermission
=
this
.
_hasProtocolHandlerPermission
(
aHandler
.
type
aPrincipal
)
;
if
(
callerHasPermission
&
&
!
aHandler
.
alwaysAskBeforeHandling
&
&
(
aHandler
.
preferredAction
=
=
Ci
.
nsIHandlerInfo
.
useHelperApp
|
|
aHandler
.
preferredAction
=
=
Ci
.
nsIHandlerInfo
.
useSystemDefault
)
)
{
try
{
aHandler
.
launchWithURI
(
aURI
aBrowsingContext
)
;
}
catch
(
error
)
{
if
(
error
.
result
=
=
Cr
.
NS_ERROR_FILE_NOT_FOUND
)
{
aHandler
.
alwaysAskBeforeHandling
=
true
;
}
else
{
throw
error
;
}
}
}
let
shouldOpenHandler
=
false
;
try
{
shouldOpenHandler
=
await
this
.
_prompt
(
aHandler
aPrincipal
callerHasPermission
aBrowsingContext
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
error
.
message
)
;
}
if
(
!
shouldOpenHandler
)
{
return
;
}
aHandler
.
launchWithURI
(
aURI
aBrowsingContext
)
;
}
async
_prompt
(
aHandler
aPrincipal
aHasPermission
aBrowsingContext
)
{
let
shouldOpenHandler
=
false
;
let
resetHandlerChoice
=
false
;
if
(
!
aHasPermission
)
{
let
canPersistPermission
=
this
.
_isSupportedPrincipal
(
aPrincipal
)
;
let
outArgs
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag
)
;
outArgs
.
setProperty
(
"
granted
"
false
)
;
outArgs
.
setProperty
(
"
resetHandlerChoice
"
null
)
;
outArgs
.
setProperty
(
"
remember
"
null
)
;
await
this
.
_openDialog
(
DIALOG_URL_PERMISSION
{
handler
:
aHandler
principal
:
aPrincipal
browsingContext
:
aBrowsingContext
outArgs
canPersistPermission
preferredHandlerName
:
!
aHandler
.
alwaysAskBeforeHandling
&
&
aHandler
.
preferredApplicationHandler
?
.
name
}
aBrowsingContext
)
;
if
(
!
outArgs
.
getProperty
(
"
granted
"
)
)
{
return
false
;
}
resetHandlerChoice
=
outArgs
.
getProperty
(
"
resetHandlerChoice
"
)
;
if
(
!
resetHandlerChoice
)
{
let
remember
=
outArgs
.
getProperty
(
"
remember
"
)
;
this
.
_updatePermission
(
aPrincipal
aHandler
.
type
remember
)
;
}
shouldOpenHandler
=
true
;
}
if
(
aHandler
.
alwaysAskBeforeHandling
|
|
resetHandlerChoice
)
{
let
outArgs
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag
)
;
outArgs
.
setProperty
(
"
openHandler
"
false
)
;
outArgs
.
setProperty
(
"
preferredAction
"
null
)
;
outArgs
.
setProperty
(
"
preferredApplicationHandler
"
null
)
;
outArgs
.
setProperty
(
"
alwaysAskBeforeHandling
"
null
)
;
let
usePrivateBrowsing
=
aBrowsingContext
?
.
usePrivateBrowsing
;
await
this
.
_openDialog
(
DIALOG_URL_APP_CHOOSER
{
handler
:
aHandler
outArgs
usePrivateBrowsing
enableButtonDelay
:
aHasPermission
}
aBrowsingContext
)
;
shouldOpenHandler
=
outArgs
.
getProperty
(
"
openHandler
"
)
;
if
(
shouldOpenHandler
)
{
for
(
let
prop
of
[
"
preferredAction
"
"
preferredApplicationHandler
"
"
alwaysAskBeforeHandling
"
]
)
{
aHandler
[
prop
]
=
outArgs
.
getProperty
(
prop
)
;
}
Cc
[
"
mozilla
.
org
/
uriloader
/
handler
-
service
;
1
"
]
.
getService
(
Ci
.
nsIHandlerService
)
.
store
(
aHandler
)
;
}
}
return
shouldOpenHandler
;
}
_hasProtocolHandlerPermission
(
scheme
aPrincipal
)
{
if
(
!
nsContentDispatchChooser
.
isPermissionEnabled
)
{
return
true
;
}
if
(
Services
.
prefs
.
getBoolPref
(
"
network
.
protocol
-
handler
.
external
.
"
+
scheme
false
)
)
{
return
true
;
}
if
(
!
aPrincipal
)
{
return
false
;
}
let
key
=
this
.
_getSkipProtoDialogPermissionKey
(
scheme
)
;
return
(
Services
.
perms
.
testPermissionFromPrincipal
(
aPrincipal
key
)
=
=
=
Services
.
perms
.
ALLOW_ACTION
)
;
}
_getSkipProtoDialogPermissionKey
(
aProtocolScheme
)
{
return
(
PROTOCOL_HANDLER_OPEN_PERM_KEY
+
PERMISSION_KEY_DELIMITER
+
aProtocolScheme
)
;
}
async
_openDialog
(
aDialogURL
aDialogArgs
aBrowsingContext
)
{
let
resizable
=
resizable
=
{
aDialogURL
=
=
DIALOG_URL_APP_CHOOSER
?
"
yes
"
:
"
no
"
}
;
if
(
aBrowsingContext
)
{
if
(
!
aBrowsingContext
.
topChromeWindow
)
{
throw
new
Error
(
"
Can
'
t
show
external
protocol
dialog
.
BrowsingContext
has
no
chrome
window
associated
.
"
)
;
}
let
window
=
aBrowsingContext
.
topChromeWindow
;
let
tabDialogBox
=
window
.
gBrowser
.
getTabDialogBox
(
aBrowsingContext
.
embedderElement
)
;
return
tabDialogBox
.
open
(
aDialogURL
{
features
:
resizable
allowDuplicateDialogs
:
false
keepOpenSameOriginNav
:
true
}
aDialogArgs
)
;
}
let
win
=
Services
.
ww
.
openWindow
(
null
aDialogURL
null
chrome
dialog
=
yes
centerscreen
{
resizable
}
aDialogArgs
)
;
return
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
unload
"
function
onUnload
(
event
)
{
if
(
event
.
target
.
location
!
=
aDialogURL
)
{
return
;
}
win
.
removeEventListener
(
"
unload
"
onUnload
)
;
resolve
(
)
;
}
)
;
}
)
;
}
_updatePermission
(
aPrincipal
aScheme
aAllow
)
{
if
(
!
nsContentDispatchChooser
.
isPermissionEnabled
|
|
aPrincipal
.
isSystemPrincipal
|
|
!
this
.
_isSupportedPrincipal
(
aPrincipal
)
)
{
return
;
}
let
permKey
=
this
.
_getSkipProtoDialogPermissionKey
(
aScheme
)
;
if
(
aAllow
)
{
Services
.
perms
.
addFromPrincipal
(
aPrincipal
permKey
Services
.
perms
.
ALLOW_ACTION
Services
.
perms
.
EXPIRE_NEVER
)
;
}
else
{
Services
.
perms
.
removeFromPrincipal
(
aPrincipal
permKey
)
;
}
}
_isSupportedPrincipal
(
aPrincipal
)
{
return
(
aPrincipal
&
&
[
"
http
"
"
https
"
"
moz
-
extension
"
"
file
"
]
.
some
(
scheme
=
>
aPrincipal
.
schemeIs
(
scheme
)
)
)
;
}
}
nsContentDispatchChooser
.
prototype
.
classID
=
Components
.
ID
(
"
e35d5067
-
95bc
-
4029
-
8432
-
e8f1e431148d
"
)
;
nsContentDispatchChooser
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIContentDispatchChooser
"
]
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
nsContentDispatchChooser
"
isPermissionEnabled
"
"
security
.
external_protocol_requires_permission
"
true
)
;
