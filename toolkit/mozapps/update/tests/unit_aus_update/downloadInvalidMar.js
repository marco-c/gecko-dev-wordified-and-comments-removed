var
gNextRunFunc
;
var
gExpectedStatusResult
;
function
run_test
(
)
{
do_get_profile
(
)
;
setupTestCommon
(
)
;
debugDump
(
"
testing
invalid
mar
downloads
"
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
false
)
;
start_httpserver
(
)
;
setUpdateURL
(
gURLData
+
gHTTPHandlerPath
)
;
standardInit
(
)
;
do_execute_soon
(
run_test_pt1
)
;
}
function
finish_test
(
)
{
stop_httpserver
(
doTestFinish
)
;
}
function
run_test_helper_pt1
(
aMsg
aExpectedStatusResult
aNextRunFunc
)
{
gUpdates
=
null
;
gUpdateCount
=
null
;
gStatusResult
=
null
;
gCheckFunc
=
check_test_helper_pt1_1
;
gNextRunFunc
=
aNextRunFunc
;
gExpectedStatusResult
=
aExpectedStatusResult
;
debugDump
(
aMsg
Components
.
stack
.
caller
)
;
gUpdateChecker
.
checkForUpdates
(
updateCheckListener
true
)
;
}
function
check_test_helper_pt1_1
(
)
{
Assert
.
equal
(
gUpdateCount
1
"
the
update
count
"
+
MSG_SHOULD_EQUAL
)
;
gCheckFunc
=
check_test_helper_pt1_2
;
let
bestUpdate
=
gAUS
.
selectUpdate
(
gUpdates
gUpdateCount
)
;
let
state
=
gAUS
.
downloadUpdate
(
bestUpdate
false
)
;
if
(
state
=
=
STATE_NONE
|
|
state
=
=
STATE_FAILED
)
{
do_throw
(
"
nsIApplicationUpdateService
:
downloadUpdate
returned
"
+
state
)
;
}
gAUS
.
addDownloadListener
(
downloadListener
)
;
}
function
check_test_helper_pt1_2
(
)
{
Assert
.
equal
(
gStatusResult
gExpectedStatusResult
"
the
download
status
result
"
+
MSG_SHOULD_EQUAL
)
;
gAUS
.
removeDownloadListener
(
downloadListener
)
;
gNextRunFunc
(
)
;
}
function
run_test_pt1
(
)
{
let
patchProps
=
{
url
:
gURLData
+
"
missing
.
mar
"
}
;
let
patches
=
getRemotePatchString
(
patchProps
)
;
let
updates
=
getRemoteUpdateString
(
{
}
patches
)
;
gResponseBody
=
getRemoteUpdatesXMLString
(
updates
)
;
run_test_helper_pt1
(
"
mar
download
with
the
mar
not
found
"
Cr
.
NS_ERROR_UNEXPECTED
run_test_pt2
)
;
}
function
run_test_pt2
(
)
{
let
patchProps
=
{
size
:
"
1024000
"
}
;
let
patches
=
getRemotePatchString
(
patchProps
)
;
let
updates
=
getRemoteUpdateString
(
{
}
patches
)
;
gResponseBody
=
getRemoteUpdatesXMLString
(
updates
)
;
run_test_helper_pt1
(
"
mar
download
with
an
invalid
file
size
"
Cr
.
NS_ERROR_UNEXPECTED
finish_test
)
;
}
