const
{
Subprocess
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
jsm
"
)
;
const
thisBinary
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
;
const
greDir
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
;
add_task
(
async
function
(
)
{
setupTestCommon
(
)
;
let
syncManager
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
sync
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIUpdateSyncManager
)
;
Assert
.
ok
(
!
syncManager
.
isOtherInstanceRunning
(
)
"
no
other
instance
is
running
yet
"
)
;
const
args
=
[
"
-
g
"
greDir
.
path
"
-
e
"
const
customGreDirPath
=
"
{
getApplyDirFile
(
DIR_RESOURCES
)
.
path
.
replaceAll
(
"
\
\
"
"
\
\
\
\
"
)
}
"
;
const
customGreBinDirPath
=
"
{
getApplyDirFile
(
DIR_MACOS
)
.
path
.
replaceAll
(
"
\
\
"
"
\
\
\
\
"
)
}
"
;
const
customExePath
=
"
{
getApplyDirFile
(
DIR_MACOS
+
FILE_APP_BIN
)
.
path
.
replaceAll
(
"
\
\
"
"
\
\
\
\
"
)
}
"
;
const
customUpdDirPath
=
"
{
getMockUpdRootD
(
)
.
path
.
replaceAll
(
"
\
\
"
"
\
\
\
\
"
)
}
"
;
const
customOldUpdDirPath
=
"
{
getMockUpdRootD
(
true
)
.
path
.
replaceAll
(
"
\
\
"
"
\
\
\
\
"
)
}
"
;
"
-
f
"
getTestDirFile
(
"
syncManagerTestChild
.
js
"
)
.
path
]
;
debugDump
(
launching
child
process
at
{
thisBinary
.
path
}
with
args
{
args
}
)
;
Subprocess
.
call
(
{
command
:
thisBinary
.
path
arguments
:
args
stderr
:
"
stdout
"
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
syncManager
.
isOtherInstanceRunning
(
)
"
waiting
for
child
process
to
take
the
lock
"
)
.
catch
(
e
=
>
{
Assert
.
ok
(
syncManager
.
isOtherInstanceRunning
(
)
"
child
process
has
the
lock
"
)
;
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
syncManager
.
isOtherInstanceRunning
(
)
"
waiting
for
child
process
to
release
the
lock
"
)
.
catch
(
e
=
>
{
Assert
.
ok
(
!
syncManager
.
isOtherInstanceRunning
(
)
"
child
process
has
released
the
lock
"
)
;
}
)
;
doTestFinish
(
)
;
}
)
;
