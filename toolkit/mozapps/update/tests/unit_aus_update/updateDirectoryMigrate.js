function
getOldUpdatesRootDir
(
)
{
return
Services
.
dirsvc
.
get
(
XRE_OLD_UPDATE_ROOT_DIR
Ci
.
nsIFile
)
;
}
function
getOldUpdatesDir
(
)
{
let
dir
=
getOldUpdatesRootDir
(
)
;
dir
.
append
(
DIR_UPDATES
)
;
return
dir
;
}
function
getOldUpdatesPatchDir
(
)
{
let
dir
=
getOldUpdatesDir
(
)
;
dir
.
append
(
DIR_PATCH
)
;
return
dir
;
}
function
getOldUpdatesXMLFile
(
aIsActiveUpdate
)
{
let
file
=
getOldUpdatesRootDir
(
)
;
file
.
append
(
aIsActiveUpdate
?
FILE_ACTIVE_UPDATE_XML
:
FILE_UPDATES_XML
)
;
return
file
;
}
function
writeUpdatesToOldXMLFile
(
aContent
aIsActiveUpdate
)
{
writeFile
(
getOldUpdatesXMLFile
(
aIsActiveUpdate
)
aContent
)
;
}
function
writeOldStatusFile
(
aStatus
)
{
let
file
=
getOldUpdatesPatchDir
(
)
;
file
.
append
(
FILE_UPDATE_STATUS
)
;
writeFile
(
file
aStatus
+
"
\
n
"
)
;
}
function
getOldUpdateLog
(
aLogLeafName
)
{
let
updateLog
=
getOldUpdatesDir
(
)
;
if
(
aLogLeafName
=
=
FILE_UPDATE_LOG
)
{
updateLog
.
append
(
DIR_PATCH
)
;
}
updateLog
.
append
(
aLogLeafName
)
;
return
updateLog
;
}
function
run_test
(
)
{
setupTestCommon
(
)
;
debugDump
(
"
testing
that
the
update
directory
is
migrated
after
a
successful
update
"
)
;
Services
.
prefs
.
setIntPref
(
PREF_APP_UPDATE_CANCELATIONS
5
)
;
let
patchProps
=
{
state
:
STATE_PENDING
}
;
let
patches
=
getLocalPatchString
(
patchProps
)
;
let
updates
=
getLocalUpdateString
(
{
}
patches
)
;
writeUpdatesToOldXMLFile
(
getLocalUpdatesXMLString
(
updates
)
true
)
;
writeOldStatusFile
(
STATE_SUCCEEDED
)
;
let
log
=
getOldUpdateLog
(
FILE_UPDATE_LOG
)
;
writeFile
(
log
"
Last
Update
Log
"
)
;
standardInit
(
)
;
Assert
.
ok
(
!
gUpdateManager
.
activeUpdate
"
there
should
not
be
an
active
update
"
)
;
Assert
.
equal
(
gUpdateManager
.
updateCount
1
"
the
update
manager
update
count
"
+
MSG_SHOULD_EQUAL
)
;
executeSoon
(
waitForUpdateXMLFiles
)
;
}
function
waitForUpdateXMLFilesFinished
(
)
{
let
cancelations
=
Services
.
prefs
.
getIntPref
(
PREF_APP_UPDATE_CANCELATIONS
0
)
;
Assert
.
equal
(
cancelations
0
"
the
"
+
PREF_APP_UPDATE_CANCELATIONS
+
"
preference
"
+
MSG_SHOULD_EQUAL
)
;
let
oldDir
=
getOldUpdatesRootDir
(
)
;
let
newDir
=
getUpdatesRootDir
(
)
;
if
(
oldDir
.
path
!
=
newDir
.
path
)
{
Assert
.
ok
(
!
oldDir
.
exists
(
)
"
Old
update
directory
should
have
been
deleted
after
migration
"
)
;
}
let
log
=
getUpdateLog
(
FILE_UPDATE_LOG
)
;
Assert
.
ok
(
!
log
.
exists
(
)
MSG_SHOULD_NOT_EXIST
)
;
log
=
getUpdateLog
(
FILE_LAST_UPDATE_LOG
)
;
Assert
.
ok
(
log
.
exists
(
)
MSG_SHOULD_EXIST
)
;
Assert
.
equal
(
readFile
(
log
)
"
Last
Update
Log
"
"
the
last
update
log
contents
"
+
MSG_SHOULD_EQUAL
)
;
log
=
getUpdateLog
(
FILE_BACKUP_UPDATE_LOG
)
;
Assert
.
ok
(
!
log
.
exists
(
)
MSG_SHOULD_NOT_EXIST
)
;
let
dir
=
getUpdatesPatchDir
(
)
;
Assert
.
ok
(
dir
.
exists
(
)
MSG_SHOULD_EXIST
)
;
doTestFinish
(
)
;
}
