async
function
run_test
(
)
{
setupTestCommon
(
)
;
debugDump
(
"
testing
write
access
to
the
application
directory
"
)
;
let
testFile
=
getCurrentProcessDir
(
)
;
testFile
.
append
(
"
update_write_access_test
"
)
;
testFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
PERMS_FILE
)
;
Assert
.
ok
(
testFile
.
exists
(
)
MSG_SHOULD_EXIST
)
;
testFile
.
remove
(
false
)
;
Assert
.
ok
(
!
testFile
.
exists
(
)
MSG_SHOULD_NOT_EXIST
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
let
updateMutex
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
mutex
;
1
"
]
.
createInstance
(
Ci
.
nsIUpdateMutex
)
;
debugDump
(
"
attempting
to
acquire
the
update
mutex
"
)
;
Assert
.
ok
(
updateMutex
.
tryLock
(
)
"
should
be
able
to
acquire
the
update
mutex
"
)
;
try
{
Assert
.
ok
(
!
gAUS
.
canCheckForUpdates
"
should
not
be
able
to
check
for
updates
when
the
update
mutex
is
acquired
by
another
instance
"
)
;
Assert
.
ok
(
!
gAUS
.
canApplyUpdates
"
should
not
be
able
to
apply
updates
when
the
update
mutex
is
acquired
by
another
instance
"
)
;
}
finally
{
debugDump
(
"
releasing
the
update
mutex
"
)
;
updateMutex
.
unlock
(
)
;
}
}
Assert
.
ok
(
gAUS
.
canCheckForUpdates
"
should
be
able
to
check
for
updates
"
)
;
Assert
.
ok
(
gAUS
.
canApplyUpdates
"
should
be
able
to
apply
updates
"
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
let
updateMutex
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
mutex
;
1
"
]
.
createInstance
(
Ci
.
nsIUpdateMutex
)
;
debugDump
(
"
attempting
to
acquire
the
update
mutex
"
)
;
let
isAcquired
=
updateMutex
.
tryLock
(
)
;
if
(
isAcquired
)
{
updateMutex
.
unlock
(
)
;
}
Assert
.
ok
(
!
isAcquired
"
should
not
be
able
to
acquire
the
update
mutex
when
the
current
instance
has
already
acquired
it
"
)
;
}
await
doTestFinish
(
)
;
}
