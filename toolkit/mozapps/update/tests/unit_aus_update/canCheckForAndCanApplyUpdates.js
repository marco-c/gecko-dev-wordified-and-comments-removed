function
run_test
(
)
{
setupTestCommon
(
)
;
debugDump
(
"
testing
write
access
to
the
application
directory
"
)
;
let
testFile
=
getCurrentProcessDir
(
)
;
testFile
.
append
(
"
update_write_access_test
"
)
;
testFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
PERMS_FILE
)
;
Assert
.
ok
(
testFile
.
exists
(
)
MSG_SHOULD_EXIST
)
;
testFile
.
remove
(
false
)
;
Assert
.
ok
(
!
testFile
.
exists
(
)
MSG_SHOULD_NOT_EXIST
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
debugDump
(
"
attempting
to
create
mutex
"
)
;
let
handle
=
createMutex
(
getPerInstallationMutexName
(
)
)
;
Assert
.
ok
(
!
!
handle
"
the
update
mutex
should
have
been
created
"
)
;
Assert
.
ok
(
!
gAUS
.
canCheckForUpdates
"
should
not
be
able
to
check
for
"
+
"
updates
when
there
is
an
update
mutex
"
)
;
Assert
.
ok
(
!
gAUS
.
canApplyUpdates
"
should
not
be
able
to
apply
updates
when
there
is
an
update
mutex
"
)
;
debugDump
(
"
destroying
mutex
"
)
;
closeHandle
(
handle
)
;
}
Assert
.
ok
(
gAUS
.
canCheckForUpdates
"
should
be
able
to
check
for
updates
"
)
;
Assert
.
ok
(
gAUS
.
canApplyUpdates
"
should
be
able
to
apply
updates
"
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
debugDump
(
"
attempting
to
create
mutex
"
)
;
let
handle
=
createMutex
(
getPerInstallationMutexName
(
)
)
;
Assert
.
ok
(
!
handle
"
should
not
be
able
to
create
the
update
mutex
when
"
+
"
the
application
has
created
the
update
mutex
"
)
;
}
doTestFinish
(
)
;
}
