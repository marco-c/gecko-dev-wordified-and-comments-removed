async
function
run_test
(
)
{
setupTestCommon
(
)
;
debugDump
(
"
testing
mar
mar
download
interrupted
recovery
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
http
.
speculative
-
parallel
-
limit
"
6
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
speculative
-
parallel
-
limit
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
false
)
;
start_httpserver
(
)
;
setUpdateURL
(
gURLData
+
gHTTPHandlerPath
)
;
initMockIncrementalDownload
(
)
;
gIncrementalDownloadErrorType
=
0
;
let
patches
=
getRemotePatchString
(
{
}
)
;
let
updates
=
getRemoteUpdateString
(
{
}
patches
)
;
gResponseBody
=
getRemoteUpdatesXMLString
(
updates
)
;
await
waitForUpdateCheck
(
true
{
updateCount
:
1
}
)
.
then
(
async
(
aArgs
)
=
>
{
await
waitForUpdateDownload
(
aArgs
.
updates
Cr
.
NS_OK
)
;
}
)
;
stop_httpserver
(
doTestFinish
)
;
}
