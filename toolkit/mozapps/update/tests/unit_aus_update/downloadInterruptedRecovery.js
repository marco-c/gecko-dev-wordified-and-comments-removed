function
run_test
(
)
{
setupTestCommon
(
)
;
debugDump
(
"
testing
mar
mar
download
interrupted
recovery
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
http
.
speculative
-
parallel
-
limit
"
6
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
http
.
speculative
-
parallel
-
limit
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
false
)
;
start_httpserver
(
)
;
setUpdateURL
(
gURLData
+
gHTTPHandlerPath
)
;
initMockIncrementalDownload
(
)
;
gIncrementalDownloadErrorType
=
0
;
let
patches
=
getRemotePatchString
(
{
}
)
;
let
updates
=
getRemoteUpdateString
(
{
}
patches
)
;
gResponseBody
=
getRemoteUpdatesXMLString
(
updates
)
;
gUpdates
=
null
;
gUpdateCount
=
null
;
gStatusResult
=
null
;
gCheckFunc
=
updateCheckCompleted
;
gUpdateChecker
.
checkForUpdates
(
updateCheckListener
true
)
;
}
function
updateCheckCompleted
(
)
{
Assert
.
equal
(
gUpdateCount
1
"
the
update
count
"
+
MSG_SHOULD_EQUAL
)
;
let
bestUpdate
=
gAUS
.
selectUpdate
(
gUpdates
gUpdateCount
)
;
let
state
=
gAUS
.
downloadUpdate
(
bestUpdate
false
)
;
if
(
state
=
=
STATE_NONE
|
|
state
=
=
STATE_FAILED
)
{
do_throw
(
"
nsIApplicationUpdateService
:
downloadUpdate
returned
"
+
state
)
;
}
gAUS
.
addDownloadListener
(
downloadListener
)
;
}
function
downloadListenerStop
(
)
{
Assert
.
equal
(
gStatusResult
Cr
.
NS_OK
"
the
download
status
result
"
+
MSG_SHOULD_EQUAL
)
;
gAUS
.
removeDownloadListener
(
downloadListener
)
;
stop_httpserver
(
doTestFinish
)
;
}
