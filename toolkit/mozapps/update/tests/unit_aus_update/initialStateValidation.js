let
gServerPort
;
const
UpdateObjectState
=
{
nonexistent
:
"
UpdateObjectState
:
:
nonexistent
"
hasWrongState
:
"
UpdateObjectState
:
:
hasWrongState
"
expected
:
"
UpdateObjectState
:
:
expected
"
}
;
async
function
testInitialStateValidation
(
{
updateState
downloadingUpdateState
readyUpdateState
readyUpdateMarExists
}
)
{
const
url
=
APP_UPDATE_SJS_HOST
+
"
:
"
+
gServerPort
+
"
/
"
+
REL_PATH_DATA
+
"
app_update
.
sjs
?
slowDownloadMar
=
1
"
;
const
statusFile
=
getUpdateDirFile
(
FILE_UPDATE_STATUS
)
;
const
updateXmlFile
=
getUpdateDirFile
(
FILE_ACTIVE_UPDATE_XML
)
;
const
readyMarFile
=
getUpdateDirFile
(
FILE_UPDATE_MAR
DIR_PATCH
)
;
const
downloadingMarFile
=
getUpdateDirFile
(
FILE_UPDATE_MAR
DIR_DOWNLOADING
)
;
let
statusFileState
=
updateState
;
if
(
statusFileState
=
=
STATE_FAILED
)
{
statusFileState
+
=
STATE_FAILED_DELIMETER
;
statusFileState
+
=
READ_ERROR
;
}
writeStatusFile
(
statusFileState
)
;
let
updates
=
"
"
;
let
readyUpdateStatus
;
if
(
readyUpdateState
!
=
UpdateObjectState
.
nonexistent
)
{
readyUpdateStatus
=
updateState
;
if
(
downloadingUpdateState
=
=
UpdateObjectState
.
hasWrongState
)
{
readyUpdateStatus
=
STATE_NONE
;
}
const
patches
=
getLocalPatchString
(
{
state
:
readyUpdateStatus
url
}
)
;
updates
+
=
getLocalUpdateString
(
{
appVersion
:
"
2
"
}
patches
)
;
}
let
downloadingUpdateStatus
;
if
(
downloadingUpdateState
!
=
UpdateObjectState
.
nonexistent
)
{
downloadingUpdateStatus
=
STATE_DOWNLOADING
;
if
(
downloadingUpdateState
=
=
UpdateObjectState
.
hasWrongState
)
{
downloadingUpdateStatus
=
STATE_NONE
;
}
const
patches
=
getLocalPatchString
(
{
state
:
downloadingUpdateStatus
url
}
)
;
updates
+
=
getLocalUpdateString
(
{
appVersion
:
"
3
"
}
patches
)
;
}
if
(
updates
.
length
)
{
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
updates
)
true
)
;
}
else
{
ensureRemoved
(
updateXmlFile
)
;
}
if
(
readyUpdateMarExists
)
{
writeFile
(
readyMarFile
"
test
mar
contents
"
)
;
}
else
{
ensureRemoved
(
readyMarFile
)
;
}
await
reloadUpdateManagerData
(
)
;
await
reInitUpdateService
(
)
;
let
expectedAusState
;
switch
(
updateState
)
{
case
STATE_DOWNLOADING
:
if
(
downloadingUpdateState
=
=
UpdateObjectState
.
nonexistent
|
|
readyUpdateState
!
=
UpdateObjectState
.
nonexistent
)
{
expectedAusState
=
Ci
.
nsIApplicationUpdateService
.
STATE_IDLE
;
}
else
{
expectedAusState
=
Ci
.
nsIApplicationUpdateService
.
STATE_DOWNLOADING
;
}
break
;
case
STATE_PENDING
:
case
STATE_PENDING_SVC
:
case
STATE_APPLIED
:
case
STATE_APPLIED_SVC
:
if
(
readyUpdateState
=
=
UpdateObjectState
.
nonexistent
|
|
!
readyUpdateMarExists
)
{
expectedAusState
=
Ci
.
nsIApplicationUpdateService
.
STATE_IDLE
;
}
else
{
expectedAusState
=
Ci
.
nsIApplicationUpdateService
.
STATE_PENDING
;
readyUpdateStatus
=
updateState
;
}
break
;
case
STATE_APPLYING
:
if
(
downloadingUpdateState
=
=
UpdateObjectState
.
expected
&
&
readyUpdateMarExists
)
{
expectedAusState
=
Ci
.
nsIApplicationUpdateService
.
STATE_DOWNLOADING
;
}
else
{
expectedAusState
=
Ci
.
nsIApplicationUpdateService
.
STATE_IDLE
;
}
break
;
default
:
expectedAusState
=
Ci
.
nsIApplicationUpdateService
.
STATE_IDLE
;
break
;
}
let
expectReadyUpdatePresent
;
let
expectDownloadingUpdatePresent
;
switch
(
expectedAusState
)
{
case
Ci
.
nsIApplicationUpdateService
.
STATE_IDLE
:
expectReadyUpdatePresent
=
false
;
expectDownloadingUpdatePresent
=
false
;
break
;
case
Ci
.
nsIApplicationUpdateService
.
STATE_DOWNLOADING
:
expectReadyUpdatePresent
=
false
;
expectDownloadingUpdatePresent
=
downloadingUpdateState
=
=
UpdateObjectState
.
expected
;
break
;
case
Ci
.
nsIApplicationUpdateService
.
STATE_PENDING
:
expectReadyUpdatePresent
=
true
;
expectDownloadingUpdatePresent
=
downloadingUpdateState
=
=
UpdateObjectState
.
expected
;
break
;
default
:
Assert
.
ok
(
false
Unexpected
value
of
expectedAusState
=
{
expectedAusState
}
)
;
break
;
}
Assert
.
equal
(
gAUS
.
currentState
expectedAusState
AUS
state
-
actual
=
{
gAUS
.
getStateName
(
gAUS
.
currentState
)
}
expected
=
{
gAUS
.
getStateName
(
expectedAusState
)
}
)
;
const
readyUpdate
=
await
gUpdateManager
.
getReadyUpdate
(
)
;
const
downloadingUpdate
=
await
gUpdateManager
.
getDownloadingUpdate
(
)
;
Assert
.
equal
(
!
!
readyUpdate
expectReadyUpdatePresent
readyUpdate
should
{
expectReadyUpdatePresent
?
"
"
:
"
not
"
}
be
present
:
{
readyUpdate
}
)
;
Assert
.
equal
(
!
!
downloadingUpdate
expectDownloadingUpdatePresent
downloadingUpdate
should
{
expectDownloadingUpdatePresent
?
"
"
:
"
not
"
}
be
present
)
;
if
(
expectReadyUpdatePresent
)
{
Assert
.
equal
(
readyUpdate
.
state
readyUpdateStatus
"
readyUpdate
should
have
the
expected
state
"
)
;
}
if
(
expectDownloadingUpdatePresent
)
{
Assert
.
equal
(
downloadingUpdate
.
state
downloadingUpdateStatus
"
downloadingUpdate
should
have
the
expected
state
"
)
;
}
if
(
expectDownloadingUpdatePresent
)
{
let
downloadFinished
=
gAUS
.
stateTransition
;
await
continueFileHandler
(
CONTINUE_DOWNLOAD
)
;
await
downloadFinished
;
if
(
gAUS
.
currentState
=
=
Ci
.
nsIApplicationUpdateService
.
STATE_SWAP
)
{
await
gAUS
.
stateTransition
;
}
}
ensureRemoved
(
statusFile
)
;
ensureRemoved
(
updateXmlFile
)
;
ensureRemoved
(
readyMarFile
)
;
ensureRemoved
(
downloadingMarFile
)
;
}
add_task
(
async
function
initialStateValidation
(
)
{
setupTestCommon
(
true
)
;
const
server
=
startSjsServer
(
)
;
gServerPort
=
server
.
identity
.
primaryPort
;
setUpdateChannel
(
"
test_channel
"
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_DISABLEDFORTESTING
false
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
false
)
;
await
parameterizedTest
(
testInitialStateValidation
{
updateState
:
[
STATE_NONE
STATE_DOWNLOADING
STATE_PENDING
STATE_PENDING_SVC
STATE_APPLYING
STATE_APPLIED
STATE_APPLIED_SVC
STATE_SUCCEEDED
STATE_DOWNLOAD_FAILED
STATE_FAILED
"
bad
-
state
"
]
downloadingUpdateState
:
Object
.
values
(
UpdateObjectState
)
readyUpdateState
:
Object
.
values
(
UpdateObjectState
)
readyUpdateMarExists
:
[
true
false
]
}
{
skipFn
:
(
{
updateState
downloadingUpdateState
readyUpdateState
}
)
=
>
{
return
(
(
readyUpdateState
=
=
UpdateObjectState
.
nonexistent
&
&
(
downloadingUpdateState
=
=
UpdateObjectState
.
hasWrongState
|
|
updateState
!
=
STATE_DOWNLOADING
)
)
|
|
(
updateState
=
=
STATE_DOWNLOADING
&
&
readyUpdateState
!
=
UpdateObjectState
.
nonexistent
&
&
downloadingUpdateState
=
=
UpdateObjectState
.
nonexistent
)
)
;
}
}
)
;
await
doTestFinish
(
)
;
}
)
;
