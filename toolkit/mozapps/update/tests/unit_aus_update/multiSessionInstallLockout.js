const
syncManager
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
sync
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIUpdateSyncManager
)
;
async
function
testMsil
(
{
msilEnabled
msilTimeoutHr
installAttemptDelayHr
otherInstancesRunning
}
)
{
const
msilTimeoutMs
=
msilTimeoutHr
*
1000
*
60
*
60
;
const
installAttemptDelayMs
=
installAttemptDelayHr
*
1000
*
60
*
60
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_INSTALL_LOCKOUT_ENABLED
msilEnabled
)
;
Services
.
prefs
.
setIntPref
(
PREF_APP_UPDATE_INSTALL_LOCKOUT_TIMEOUT_MS
msilTimeoutMs
)
;
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
await
setupUpdaterTest
(
FILE_COMPLETE_MAR
false
"
"
false
)
;
const
preDownloadTimestamp
=
Date
.
now
(
)
;
await
downloadUpdate
(
{
checkWithAUS
:
true
}
)
;
const
postDownloadTimestamp
=
Date
.
now
(
)
;
let
msilTimestampMs
=
readMsilTimeoutFile
(
)
;
if
(
msilEnabled
&
&
msilTimeoutMs
>
0
)
{
const
msilTimestampInt
=
parseInt
(
msilTimestampMs
10
)
;
Assert
.
greaterOrEqual
(
msilTimestampInt
preDownloadTimestamp
+
msilTimeoutMs
)
;
Assert
.
lessOrEqual
(
msilTimestampInt
postDownloadTimestamp
+
msilTimeoutMs
)
;
}
else
{
Assert
.
equal
(
msilTimestampMs
null
)
;
}
if
(
msilTimestampMs
!
=
null
&
&
installAttemptDelayMs
>
0
)
{
msilTimestampMs
=
(
msilTimestampMs
-
installAttemptDelayMs
)
.
toString
(
)
;
writeMsilTimeoutFile
(
msilTimestampMs
)
;
}
let
appBin
=
getApplyDirFile
(
DIR_MACOS
+
FILE_APP_BIN
)
;
if
(
!
otherInstancesRunning
)
{
appBin
=
appBin
.
parent
;
appBin
.
append
(
"
fakeDir
"
)
;
appBin
.
append
(
"
fakeExe
"
)
;
}
syncManager
.
resetLock
(
appBin
)
;
const
msilShouldPreventUpdate
=
otherInstancesRunning
&
&
msilEnabled
&
&
msilTimeoutMs
>
0
&
&
installAttemptDelayMs
<
msilTimeoutMs
;
const
expectedState
=
msilShouldPreventUpdate
?
STATE_PENDING
:
STATE_SUCCEEDED
;
await
runUpdateUsingApp
(
expectedState
)
;
if
(
msilShouldPreventUpdate
)
{
const
newMsilTimeoutMs
=
readMsilTimeoutFile
(
)
;
Assert
.
equal
(
newMsilTimeoutMs
msilTimestampMs
"
Timestamp
should
not
have
changed
"
)
;
}
cleanupUpdateFiles
(
)
;
await
reloadUpdateManagerData
(
true
)
;
}
add_task
(
async
function
test_multi_session_install_lockout
(
)
{
setupTestCommon
(
true
)
;
startSjsServer
(
)
;
setUpdateURL
(
gURLData
+
"
&
completePatchOnly
=
1
"
)
;
setUpdateChannel
(
"
test_channel
"
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_DISABLEDFORTESTING
false
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
false
)
;
const
origAppUpdateAutoVal
=
await
UpdateUtils
.
getAppUpdateAutoEnabled
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
UpdateUtils
.
setAppUpdateAutoEnabled
(
origAppUpdateAutoVal
)
;
}
)
;
await
parameterizedTest
(
testMsil
{
msilEnabled
:
[
true
false
]
msilTimeoutHr
:
[
0
24
]
installAttemptDelayHr
:
[
12
120
]
otherInstancesRunning
:
[
true
false
]
}
)
;
await
doTestFinish
(
)
;
}
)
;
