"
use
strict
"
;
const
STATE_IDLE
=
1
;
add_task
(
async
function
updateFailureTest
(
)
{
setupTestCommon
(
)
;
simulateUpdateState
(
"
pending
-
service
"
"
failed
:
7
"
)
;
reloadUpdateManagerData
(
false
)
;
let
update
=
await
gUpdateManager
.
getReadyUpdate
(
)
;
Assert
.
ok
(
update
"
there
should
be
a
ready
update
"
)
;
Assert
.
equal
(
update
.
state
STATE_PENDING
"
update
state
should
fall
back
to
pending
"
)
;
Assert
.
equal
(
readStatusFile
(
)
STATE_PENDING
"
status
file
state
should
fall
back
to
pending
"
)
;
simulateUpdateState
(
"
pending
"
"
failed
:
7
"
)
;
reloadUpdateManagerData
(
false
)
;
await
testPostUpdateProcessing
(
)
;
update
=
await
gUpdateManager
.
getReadyUpdate
(
)
;
Assert
.
ok
(
!
update
"
handleFallbackToCompleteUpdate
should
have
cleared
readyUpdate
"
)
;
Assert
.
equal
(
gAUS
.
currentState
STATE_IDLE
"
AUS
.
currentState
should
be
idle
as
we
expect
handleFallbackToCompleteUpdate
(
)
to
be
called
"
)
;
simulateUpdateState
(
"
applied
"
"
failed
:
7
"
)
;
reloadUpdateManagerData
(
false
)
;
await
testPostUpdateProcessing
(
)
;
update
=
await
gUpdateManager
.
getReadyUpdate
(
)
;
Assert
.
ok
(
!
update
"
handleFallbackToCompleteUpdate
should
have
cleared
readyUpdate
"
)
;
Assert
.
equal
(
gAUS
.
currentState
STATE_IDLE
"
AUS
.
currentState
should
be
idle
as
we
expect
handleFallbackToCompleteUpdate
(
)
to
be
called
"
)
;
executeSoon
(
doTestFinish
)
;
}
)
;
function
simulateUpdateState
(
updateState
statusFileState
)
{
const
XML_UPDATE
=
<
?
xml
version
=
"
1
.
0
"
?
>
<
updates
xmlns
=
"
http
:
/
/
www
.
mozilla
.
org
/
2005
/
app
-
update
"
>
<
update
appVersion
=
"
1
.
0
"
buildID
=
"
20080811053724
"
channel
=
"
default
"
displayVersion
=
"
Version
1
.
0
"
installDate
=
"
1238441400314
"
platformVersion
=
"
1
.
0
"
isCompleteUpdate
=
"
true
"
name
=
"
Update
Test
1
.
0
"
type
=
"
minor
"
detailsURL
=
"
http
:
/
/
example
.
com
/
"
previousAppVersion
=
"
1
.
0
"
serviceURL
=
"
https
:
/
/
example
.
com
/
"
statusText
=
"
The
Update
was
successfully
installed
"
foregroundDownload
=
"
true
"
actions
=
"
showURL
"
openURL
=
"
1
.
0
"
>
<
patch
type
=
"
complete
"
URL
=
"
http
:
/
/
example
.
com
/
"
size
=
"
775
"
selected
=
"
true
"
state
=
"
{
updateState
}
"
/
>
<
/
update
>
<
/
updates
>
;
writeUpdatesToXMLFile
(
XML_UPDATE
true
)
;
writeStatusFile
(
statusFileState
)
;
}
