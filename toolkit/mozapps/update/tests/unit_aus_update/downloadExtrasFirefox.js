const
{
EnterprisePolicyTesting
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
EnterprisePolicyTesting
.
sys
.
mjs
"
)
;
const
downloadHeaders
=
new
DownloadHeadersTest
(
)
;
function
setup_enterprise_policy_testing
(
)
{
let
policies
=
Cc
[
"
mozilla
.
org
/
enterprisepolicies
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
policies
.
observe
(
null
"
policies
-
startup
"
null
)
;
}
async
function
setupPolicyEngineWithJson
(
json
customSchema
)
{
if
(
typeof
json
!
=
"
object
"
)
{
let
filePath
=
do_get_file
(
json
?
json
:
"
non
-
existing
-
file
.
json
"
)
.
path
;
return
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
filePath
customSchema
)
;
}
return
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
json
customSchema
)
;
}
add_setup
(
async
(
)
=
>
{
setupTestCommon
(
true
false
)
;
setup_enterprise_policy_testing
(
)
;
downloadHeaders
.
startUpdateServer
(
)
;
}
)
;
add_task
(
async
function
test_noTask_noBITS
(
)
{
await
downloadHeaders
.
test
(
{
useBits
:
false
backgroundTaskName
:
null
userAgentPattern
:
/
\
sGecko
\
/
/
expectedExtras
:
[
{
mode
:
null
name
:
null
}
{
mode
:
"
0
"
name
:
null
}
]
}
)
;
}
)
;
const
canTask
=
{
skip_if
:
(
)
=
>
!
AppConstants
.
MOZ_BACKGROUNDTASKS
}
;
add_task
(
canTask
async
function
test_task_noBITS
(
)
{
await
downloadHeaders
.
test
(
{
useBits
:
false
backgroundTaskName
:
"
task_downloadHeaders
"
userAgentPattern
:
/
\
sGecko
\
/
/
expectedExtras
:
[
{
mode
:
null
name
:
null
}
{
mode
:
"
1
"
name
:
"
task_downloadHeaders
"
}
]
}
)
;
}
)
;
const
canBits
=
{
skip_if
:
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_BITS_ENABLED
true
)
;
return
!
gAUS
.
canUsuallyUseBits
;
}
}
;
add_task
(
canBits
async
function
test_noTask_BITS
(
)
{
await
downloadHeaders
.
test
(
{
useBits
:
true
backgroundTaskName
:
null
userAgentPattern
:
/
^
Microsoft
BITS
\
/
/
expectedExtras
:
[
{
mode
:
null
name
:
null
}
{
mode
:
"
0
"
name
:
null
}
]
}
)
;
}
)
;
const
canTaskBits
=
{
skip_if
:
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_BITS_ENABLED
true
)
;
return
!
AppConstants
.
MOZ_BACKGROUNDTASKS
|
|
!
gAUS
.
canUsuallyUseBits
;
}
}
;
add_task
(
canTaskBits
async
function
test_task_BITS
(
)
{
await
downloadHeaders
.
test
(
{
useBits
:
true
backgroundTaskName
:
"
task_downloadHeaders
"
userAgentPattern
:
/
^
Microsoft
BITS
\
/
/
expectedExtras
:
[
{
mode
:
null
name
:
null
}
{
mode
:
"
1
"
name
:
"
task_downloadHeaders
"
}
]
}
)
;
}
)
;
add_task
(
async
function
test_task_policies
(
)
{
await
setupPolicyEngineWithJson
(
{
policies
:
{
AppUpdateURL
:
downloadHeaders
.
updateUrl
}
}
)
;
Assert
.
equal
(
Services
.
policies
.
status
Ci
.
nsIEnterprisePolicies
.
ACTIVE
"
Engine
is
active
"
)
;
await
downloadHeaders
.
test
(
{
useBits
:
false
backgroundTaskName
:
"
task_downloadHeaders
"
userAgentPattern
:
/
\
sGecko
\
/
/
expectedExtras
:
[
{
mode
:
null
name
:
null
}
{
mode
:
null
name
:
null
}
]
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
doTestFinish
(
)
;
}
)
;
