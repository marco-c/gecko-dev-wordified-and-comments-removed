function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesPartialSuccess
;
gTestDirs
=
gTestDirsPartialSuccess
;
setTestFilesAndDirsForFailure
(
)
;
setupUpdaterTest
(
FILE_PARTIAL_MAR
false
)
;
}
function
setupUpdaterTestFinished
(
)
{
runHelperLockFile
(
gTestFiles
[
2
]
)
;
}
function
waitForHelperSleepFinished
(
)
{
runUpdate
(
STATE_FAILED_READ_ERROR
false
1
true
)
;
}
function
runUpdateFinished
(
)
{
waitForHelperExit
(
)
;
}
function
waitForHelperExitFinished
(
)
{
standardInit
(
)
;
Assert
.
equal
(
readStatusFile
(
)
STATE_NONE
"
the
status
file
failure
code
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
updateCount
1
"
the
update
manager
updateCount
attribute
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
getUpdateAt
(
0
)
.
state
STATE_FAILED
"
the
update
state
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
getUpdateAt
(
0
)
.
errorCode
READ_ERROR
"
the
update
errorCode
"
+
MSG_SHOULD_EQUAL
)
;
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateFailure
(
getApplyDirFile
)
;
checkUpdateLogContains
(
ERR_UNABLE_OPEN_DEST
)
;
checkUpdateLogContains
(
STATE_FAILED_READ_ERROR
+
"
\
n
"
+
CALL_QUIT
)
;
checkCallbackLog
(
)
;
}
