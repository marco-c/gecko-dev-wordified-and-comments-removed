const
STATE_AFTER_STAGE
=
STATE_APPLIED
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
)
;
}
function
setupUpdaterTestFinished
(
)
{
stageUpdate
(
false
)
;
}
function
stageUpdateFinished
(
)
{
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getStageDirFile
true
)
;
checkUpdateLogContents
(
LOG_COMPLETE_SUCCESS
true
)
;
let
patchProps
=
{
state
:
STATE_AFTER_STAGE
}
;
let
patches
=
getLocalPatchString
(
patchProps
)
;
let
updateProps
=
{
appVersion
:
"
1
.
0
"
}
;
let
updates
=
getLocalUpdateString
(
updateProps
patches
)
;
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
updates
)
true
)
;
writeVersionFile
(
"
1
.
0
"
)
;
reloadUpdateManagerData
(
)
;
runUpdateUsingApp
(
STATE_AFTER_STAGE
)
;
}
function
runUpdateFinished
(
)
{
standardInit
(
)
;
Assert
.
equal
(
readStatusState
(
)
STATE_NONE
"
the
status
file
state
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
ok
(
!
gUpdateManager
.
activeUpdate
"
the
active
update
should
not
be
defined
"
)
;
Assert
.
equal
(
gUpdateManager
.
updateCount
1
"
the
update
manager
updateCount
attribute
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
getUpdateAt
(
0
)
.
state
STATE_AFTER_STAGE
"
the
update
state
"
+
MSG_SHOULD_EQUAL
)
;
checkPostUpdateRunningFile
(
false
)
;
setTestFilesAndDirsForFailure
(
)
;
checkFilesAfterUpdateFailure
(
getApplyDirFile
!
IS_MACOSX
false
)
;
let
updatesDir
=
getUpdatesPatchDir
(
)
;
Assert
.
ok
(
updatesDir
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
updatesDir
.
path
)
)
;
let
log
=
getUpdateLog
(
FILE_UPDATE_LOG
)
;
Assert
.
ok
(
!
log
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
log
.
path
)
)
;
log
=
getUpdateLog
(
FILE_LAST_UPDATE_LOG
)
;
Assert
.
ok
(
log
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
log
.
path
)
)
;
log
=
getUpdateLog
(
FILE_BACKUP_UPDATE_LOG
)
;
Assert
.
ok
(
!
log
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
log
.
path
)
)
;
waitForFilesInUse
(
)
;
}
