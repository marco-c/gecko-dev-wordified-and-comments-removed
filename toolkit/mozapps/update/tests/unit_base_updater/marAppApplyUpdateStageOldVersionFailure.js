const
STATE_AFTER_STAGE
=
STATE_APPLIED
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
)
;
}
function
setupUpdaterTestFinished
(
)
{
stageUpdate
(
false
)
;
}
function
stageUpdateFinished
(
)
{
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getStageDirFile
true
)
;
checkUpdateLogContents
(
LOG_COMPLETE_SUCCESS
true
)
;
writeVersionFile
(
"
0
.
9
"
)
;
runUpdateUsingApp
(
STATE_AFTER_STAGE
)
;
}
function
runUpdateFinished
(
)
{
let
patchProps
=
{
state
:
STATE_AFTER_STAGE
}
;
let
patches
=
getLocalPatchString
(
patchProps
)
;
let
updateProps
=
{
appVersion
:
"
0
.
9
"
}
;
let
updates
=
getLocalUpdateString
(
updateProps
patches
)
;
getUpdatesXMLFile
(
true
)
.
remove
(
false
)
;
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
updates
)
true
)
;
reloadUpdateManagerData
(
)
;
standardInit
(
)
;
checkPostUpdateRunningFile
(
false
)
;
setTestFilesAndDirsForFailure
(
)
;
checkFilesAfterUpdateFailure
(
getApplyDirFile
!
IS_MACOSX
false
)
;
executeSoon
(
waitForUpdateXMLFiles
)
;
}
function
waitForUpdateXMLFilesFinished
(
)
{
checkUpdateManager
(
STATE_NONE
false
STATE_FAILED
ERR_OLDER_VERSION_OR_SAME_BUILD
1
)
;
let
updatesDir
=
getUpdatesPatchDir
(
)
;
Assert
.
ok
(
updatesDir
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
updatesDir
.
path
)
)
;
let
log
=
getUpdateLog
(
FILE_UPDATE_LOG
)
;
Assert
.
ok
(
!
log
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
log
.
path
)
)
;
log
=
getUpdateLog
(
FILE_LAST_UPDATE_LOG
)
;
Assert
.
ok
(
log
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
log
.
path
)
)
;
log
=
getUpdateLog
(
FILE_BACKUP_UPDATE_LOG
)
;
Assert
.
ok
(
!
log
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
log
.
path
)
)
;
waitForFilesInUse
(
)
;
}
