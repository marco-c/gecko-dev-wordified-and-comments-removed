const
STATE_AFTER_STAGE
=
IS_SERVICE_TEST
?
STATE_APPLIED_SVC
:
STATE_APPLIED
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
true
)
;
}
function
setupUpdaterTestFinished
(
)
{
stageUpdate
(
true
)
;
}
function
stageUpdateFinished
(
)
{
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getStageDirFile
true
)
;
checkUpdateLogContents
(
LOG_COMPLETE_SUCCESS
true
)
;
runUpdateUsingApp
(
STATE_SUCCEEDED
)
;
}
function
runUpdateFinished
(
)
{
checkPostUpdateAppLog
(
)
;
}
async
function
checkPostUpdateAppLogFinished
(
)
{
checkAppBundleModTime
(
)
;
standardInit
(
)
;
checkPostUpdateRunningFile
(
true
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
false
true
)
;
checkUpdateLogContents
(
LOG_REPLACE_SUCCESS
false
true
)
;
await
waitForUpdateXMLFiles
(
)
;
checkUpdateManager
(
STATE_NONE
false
STATE_SUCCEEDED
0
1
)
;
let
updatesDir
=
getUpdateDirFile
(
DIR_PATCH
)
;
Assert
.
ok
(
updatesDir
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
updatesDir
.
path
)
)
;
let
log
=
getUpdateDirFile
(
FILE_UPDATE_LOG
)
;
Assert
.
ok
(
!
log
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
log
.
path
)
)
;
log
=
getUpdateDirFile
(
FILE_LAST_UPDATE_LOG
)
;
Assert
.
ok
(
log
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
log
.
path
)
)
;
log
=
getUpdateDirFile
(
FILE_BACKUP_UPDATE_LOG
)
;
Assert
.
ok
(
log
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
log
.
path
)
)
;
waitForFilesInUse
(
)
;
}
