const
START_STATE
=
STATE_PENDING
;
const
STATE_AFTER_STAGE
=
STATE_APPLIED
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestFiles
[
gTestFiles
.
length
-
1
]
.
originalContents
=
null
;
gTestFiles
[
gTestFiles
.
length
-
1
]
.
compareContents
=
"
FromComplete
\
n
"
;
gTestFiles
[
gTestFiles
.
length
-
1
]
.
comparePerms
=
0o644
;
gTestDirs
=
gTestDirsCompleteSuccess
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
true
)
;
}
function
setupUpdaterTestFinished
(
)
{
setupSymLinks
(
)
;
runHelperFileInUse
(
DIR_RESOURCES
+
gCallbackBinFile
false
)
;
}
function
waitForHelperSleepFinished
(
)
{
stageUpdate
(
true
)
;
}
function
stageUpdateFinished
(
)
{
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getStageDirFile
true
)
;
checkUpdateLogContents
(
LOG_COMPLETE_SUCCESS
true
)
;
runUpdate
(
STATE_SUCCEEDED
true
0
true
)
;
}
function
runUpdateFinished
(
)
{
waitForHelperExit
(
)
;
}
function
waitForHelperExitFinished
(
)
{
checkPostUpdateAppLog
(
)
;
}
function
checkPostUpdateAppLogFinished
(
)
{
checkAppBundleModTime
(
)
;
checkSymLinks
(
)
;
standardInit
(
)
;
checkPostUpdateRunningFile
(
true
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
)
;
checkUpdateLogContents
(
LOG_REPLACE_SUCCESS
false
true
)
;
executeSoon
(
waitForUpdateXMLFiles
)
;
}
function
waitForUpdateXMLFilesFinished
(
)
{
checkUpdateManager
(
STATE_NONE
false
STATE_SUCCEEDED
0
1
)
;
checkCallbackLog
(
)
;
}
function
setupSymLinks
(
)
{
if
(
IS_UNIX
)
{
removeSymlink
(
)
;
createSymlink
(
)
;
registerCleanupFunction
(
removeSymlink
)
;
gTestFiles
.
splice
(
gTestFiles
.
length
-
3
0
{
description
:
"
Readable
symlink
"
fileName
:
"
link
"
relPathDir
:
DIR_RESOURCES
originalContents
:
"
test
"
compareContents
:
"
test
"
originalFile
:
null
compareFile
:
null
originalPerms
:
0o666
comparePerms
:
0o666
}
)
;
}
}
function
checkSymLinks
(
)
{
if
(
IS_UNIX
)
{
checkSymlink
(
)
;
}
}
