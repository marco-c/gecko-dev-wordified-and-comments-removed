function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesPartialSuccess
;
gTestDirs
=
gTestDirsPartialSuccess
;
setupUpdaterTest
(
FILE_PARTIAL_MAR
false
)
;
}
function
setupUpdaterTestFinished
(
)
{
runHelperFileInUse
(
gTestDirs
[
2
]
.
relPathDir
+
gTestDirs
[
2
]
.
files
[
0
]
true
)
;
}
function
waitForHelperSleepFinished
(
)
{
runUpdate
(
STATE_SUCCEEDED
false
0
true
)
;
}
function
runUpdateFinished
(
)
{
waitForHelperExit
(
)
;
}
function
waitForHelperExitFinished
(
)
{
checkPostUpdateAppLog
(
)
;
}
function
checkPostUpdateAppLogFinished
(
)
{
standardInit
(
)
;
Assert
.
equal
(
readStatusState
(
)
STATE_NONE
"
the
status
file
state
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
ok
(
!
gUpdateManager
.
activeUpdate
"
the
active
update
should
not
be
defined
"
)
;
Assert
.
equal
(
gUpdateManager
.
updateCount
1
"
the
update
manager
updateCount
attribute
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
getUpdateAt
(
0
)
.
state
STATE_SUCCEEDED
"
the
update
state
"
+
MSG_SHOULD_EQUAL
)
;
checkPostUpdateRunningFile
(
true
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
false
true
)
;
checkUpdateLogContains
(
ERR_BACKUP_DISCARD
)
;
checkUpdateLogContains
(
STATE_SUCCEEDED
+
"
\
n
"
+
CALL_QUIT
)
;
checkCallbackLog
(
)
;
}
