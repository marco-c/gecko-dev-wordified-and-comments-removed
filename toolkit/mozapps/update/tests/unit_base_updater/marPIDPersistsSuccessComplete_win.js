function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
false
)
;
}
function
setupUpdaterTestFinished
(
)
{
runHelperPIDPersists
(
DIR_RESOURCES
+
gCallbackBinFile
false
)
;
}
function
waitForHelperSleepFinished
(
)
{
if
(
!
gPIDPersistProcess
.
pid
)
{
do_execute_soon
(
waitForHelperSleepFinished
)
;
return
;
}
runUpdate
(
STATE_SUCCEEDED
false
0
true
)
;
}
function
runUpdateFinished
(
)
{
waitForHelperExit
(
)
;
}
function
waitForHelperExitFinished
(
)
{
checkPostUpdateAppLog
(
)
;
}
function
checkPostUpdateAppLogFinished
(
)
{
standardInit
(
)
;
Assert
.
equal
(
readStatusState
(
)
STATE_NONE
"
the
status
file
state
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
ok
(
!
gUpdateManager
.
activeUpdate
"
the
active
update
should
not
be
defined
"
)
;
Assert
.
equal
(
gUpdateManager
.
updateCount
1
"
the
update
manager
updateCount
attribute
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
getUpdateAt
(
0
)
.
state
STATE_SUCCEEDED
"
the
update
state
"
+
MSG_SHOULD_EQUAL
)
;
checkPostUpdateRunningFile
(
true
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
)
;
checkUpdateLogContains
(
ERR_PARENT_PID_PERSISTS
)
;
checkCallbackLog
(
)
;
}
