const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
const
{
BackgroundTasksTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
BackgroundTasksTestUtils
.
jsm
"
)
;
BackgroundTasksTestUtils
.
init
(
this
)
;
const
do_backgroundtask
=
BackgroundTasksTestUtils
.
do_backgroundtask
.
bind
(
BackgroundTasksTestUtils
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
sys
.
mjs
"
)
;
async
function
run_test
(
)
{
{
let
omniJa
=
Services
.
dirsvc
.
get
(
"
XCurProcD
"
Ci
.
nsIFile
)
;
omniJa
.
append
(
"
omni
.
ja
"
)
;
if
(
!
omniJa
.
exists
(
)
)
{
Assert
.
ok
(
false
"
This
test
requires
a
packaged
build
"
+
"
run
'
mach
package
'
and
then
use
'
mach
xpcshell
-
test
-
-
xre
-
path
=
.
.
.
'
"
)
;
return
;
}
}
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesPartialSuccess
;
let
channelPrefs
=
gTestFiles
[
gTestFiles
.
length
-
1
]
;
Assert
.
equal
(
"
channel
-
prefs
.
js
"
channelPrefs
.
fileName
)
;
let
f
=
gGREDirOrig
.
clone
(
)
;
f
.
append
(
"
defaults
"
)
;
f
.
append
(
"
pref
"
)
;
f
.
append
(
"
channel
-
prefs
.
js
"
)
;
channelPrefs
.
originalFile
=
null
;
channelPrefs
.
originalContents
=
readFile
(
f
)
;
channelPrefs
.
compareContents
=
channelPrefs
.
originalContents
;
gTestDirs
=
gTestDirsPartialSuccess
;
await
setupUpdaterTest
(
FILE_PARTIAL_MAR
false
"
test
/
.
.
/
"
true
{
requiresOmnijar
:
true
}
)
;
let
exitCode
;
exitCode
=
await
do_backgroundtask
(
"
file_exists
"
{
extraArgs
:
[
getApplyDirFile
(
DIR_RESOURCES
+
"
0
/
00
/
00text2
"
)
.
path
]
}
)
;
Assert
.
equal
(
11
exitCode
)
;
let
taskStarted
=
PromiseUtils
.
defer
(
)
;
let
p
=
do_backgroundtask
(
"
wait
"
{
onStdoutLine
:
(
line
proc
)
=
>
{
if
(
line
.
includes
(
"
runBackgroundTask
:
wait
"
)
)
{
taskStarted
.
resolve
(
proc
)
;
}
}
}
)
;
let
proc
=
await
taskStarted
.
promise
;
runUpdate
(
STATE_SUCCEEDED
false
0
true
)
;
checkAppBundleModTime
(
)
;
standardInit
(
)
;
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
)
;
checkUpdateLogContents
(
LOG_PARTIAL_SUCCESS
)
;
await
waitForUpdateXMLFiles
(
)
;
checkUpdateManager
(
STATE_NONE
false
STATE_SUCCEEDED
0
1
)
;
await
proc
.
kill
(
)
;
Assert
.
ok
(
"
Waiting
for
background
task
to
die
after
kill
(
)
"
)
;
exitCode
=
await
p
;
let
retVal
=
AppConstants
.
platform
=
=
"
win
"
?
-
9
:
-
15
;
Assert
.
equal
(
retVal
exitCode
)
;
exitCode
=
await
do_backgroundtask
(
"
file_exists
"
{
extraArgs
:
[
getApplyDirFile
(
DIR_RESOURCES
+
"
0
/
00
/
00text2
"
)
.
path
]
}
)
;
Assert
.
equal
(
0
exitCode
)
;
checkCallbackLog
(
)
;
}
