const
{
FileUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
sys
.
mjs
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UpdateUtils
:
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
sys
.
mjs
"
ctypes
:
"
resource
:
/
/
gre
/
modules
/
ctypes
.
sys
.
mjs
"
TelemetryArchiveTesting
:
"
resource
:
/
/
testing
-
common
/
TelemetryArchiveTesting
.
sys
.
mjs
"
}
)
;
const
PREF_APP_UPDATE_AUTO
=
"
app
.
update
.
auto
"
;
const
PREF_APP_UPDATE_BACKGROUNDERRORS
=
"
app
.
update
.
backgroundErrors
"
;
const
PREF_APP_UPDATE_BACKGROUNDMAXERRORS
=
"
app
.
update
.
backgroundMaxErrors
"
;
const
PREF_APP_UPDATE_BADGEWAITTIME
=
"
app
.
update
.
badgeWaitTime
"
;
const
PREF_APP_UPDATE_BITS_ENABLED
=
"
app
.
update
.
BITS
.
enabled
"
;
const
PREF_APP_UPDATE_CANCELATIONS
=
"
app
.
update
.
cancelations
"
;
const
PREF_APP_UPDATE_CHANNEL
=
"
app
.
update
.
channel
"
;
const
PREF_APP_UPDATE_DOWNLOAD_MAXATTEMPTS
=
"
app
.
update
.
download
.
maxAttempts
"
;
const
PREF_APP_UPDATE_DOWNLOAD_ATTEMPTS
=
"
app
.
update
.
download
.
attempts
"
;
const
PREF_APP_UPDATE_DISABLEDFORTESTING
=
"
app
.
update
.
disabledForTesting
"
;
const
PREF_APP_UPDATE_INTERVAL
=
"
app
.
update
.
interval
"
;
const
PREF_APP_UPDATE_LASTUPDATETIME
=
"
app
.
update
.
lastUpdateTime
.
background
-
update
-
timer
"
;
const
PREF_APP_UPDATE_LOG
=
"
app
.
update
.
log
"
;
const
PREF_APP_UPDATE_NOTIFYDURINGDOWNLOAD
=
"
app
.
update
.
notifyDuringDownload
"
;
const
PREF_APP_UPDATE_PROMPTWAITTIME
=
"
app
.
update
.
promptWaitTime
"
;
const
PREF_APP_UPDATE_RETRYTIMEOUT
=
"
app
.
update
.
socket
.
retryTimeout
"
;
const
PREF_APP_UPDATE_SERVICE_ENABLED
=
"
app
.
update
.
service
.
enabled
"
;
const
PREF_APP_UPDATE_SOCKET_MAXERRORS
=
"
app
.
update
.
socket
.
maxErrors
"
;
const
PREF_APP_UPDATE_STAGING_ENABLED
=
"
app
.
update
.
staging
.
enabled
"
;
const
PREF_APP_UPDATE_UNSUPPORTED_URL
=
"
app
.
update
.
unsupported
.
url
"
;
const
PREF_APP_UPDATE_URL_DETAILS
=
"
app
.
update
.
url
.
details
"
;
const
PREF_APP_UPDATE_URL_MANUAL
=
"
app
.
update
.
url
.
manual
"
;
const
PREF_APP_UPDATE_LANGPACK_ENABLED
=
"
app
.
update
.
langpack
.
enabled
"
;
const
PREFBRANCH_APP_PARTNER
=
"
app
.
partner
.
"
;
const
PREF_DISTRIBUTION_ID
=
"
distribution
.
id
"
;
const
PREF_DISTRIBUTION_VERSION
=
"
distribution
.
version
"
;
const
CONFIG_APP_UPDATE_AUTO
=
"
app
.
update
.
auto
"
;
const
NS_APP_PROFILE_DIR_STARTUP
=
"
ProfDS
"
;
const
NS_APP_USER_PROFILE_50_DIR
=
"
ProfD
"
;
const
NS_GRE_BIN_DIR
=
"
GreBinD
"
;
const
NS_GRE_DIR
=
"
GreD
"
;
const
NS_XPCOM_CURRENT_PROCESS_DIR
=
"
XCurProcD
"
;
const
XRE_EXECUTABLE_FILE
=
"
XREExeF
"
;
const
XRE_OLD_UPDATE_ROOT_DIR
=
"
OldUpdRootD
"
;
const
XRE_UPDATE_ROOT_DIR
=
"
UpdRootD
"
;
const
DIR_PATCH
=
"
0
"
;
const
DIR_TOBEDELETED
=
"
tobedeleted
"
;
const
DIR_UPDATES
=
"
updates
"
;
const
DIR_UPDATED
=
AppConstants
.
platform
=
=
"
macosx
"
?
"
Updated
.
app
"
:
"
updated
"
;
const
DIR_DOWNLOADING
=
"
downloading
"
;
const
FILE_ACTIVE_UPDATE_XML
=
"
active
-
update
.
xml
"
;
const
FILE_ACTIVE_UPDATE_XML_TMP
=
"
active
-
update
.
xml
.
tmp
"
;
const
FILE_APPLICATION_INI
=
"
application
.
ini
"
;
const
FILE_BACKUP_UPDATE_CONFIG_JSON
=
"
backup
-
update
-
config
.
json
"
;
const
FILE_BACKUP_UPDATE_ELEVATED_LOG
=
"
backup
-
update
-
elevated
.
log
"
;
const
FILE_BACKUP_UPDATE_LOG
=
"
backup
-
update
.
log
"
;
const
FILE_CHANNEL_PREFS
=
AppConstants
.
platform
=
=
"
macosx
"
?
"
ChannelPrefs
"
:
"
channel
-
prefs
.
js
"
;
const
FILE_LAST_UPDATE_ELEVATED_LOG
=
"
last
-
update
-
elevated
.
log
"
;
const
FILE_LAST_UPDATE_LOG
=
"
last
-
update
.
log
"
;
const
FILE_PRECOMPLETE
=
"
precomplete
"
;
const
FILE_PRECOMPLETE_BAK
=
"
precomplete
.
bak
"
;
const
FILE_UPDATE_CONFIG_JSON
=
"
update
-
config
.
json
"
;
const
FILE_UPDATE_ELEVATED_LOG
=
"
update
-
elevated
.
log
"
;
const
FILE_UPDATE_LOG
=
"
update
.
log
"
;
const
FILE_UPDATE_MAR
=
"
update
.
mar
"
;
const
FILE_UPDATE_SETTINGS_FRAMEWORK
=
"
UpdateSettings
"
;
const
FILE_UPDATE_SETTINGS_INI
=
"
update
-
settings
.
ini
"
;
const
FILE_UPDATE_SETTINGS_INI_BAK
=
"
update
-
settings
.
ini
.
bak
"
;
const
FILE_UPDATE_STATUS
=
"
update
.
status
"
;
const
FILE_UPDATE_TEST
=
"
update
.
test
"
;
const
FILE_UPDATE_VERSION
=
"
update
.
version
"
;
const
FILE_UPDATER_INI
=
"
updater
.
ini
"
;
const
FILE_UPDATES_XML
=
"
updates
.
xml
"
;
const
FILE_UPDATES_XML_TMP
=
"
updates
.
xml
.
tmp
"
;
const
UPDATE_SETTINGS_CONTENTS
=
"
[
Settings
]
\
nACCEPTED_MAR_CHANNEL_IDS
=
xpcshell
-
test
\
n
"
;
const
PRECOMPLETE_CONTENTS
=
'
rmdir
"
nonexistent_dir
/
"
\
n
'
;
const
PR_RDWR
=
0x04
;
const
PR_CREATE_FILE
=
0x08
;
const
PR_TRUNCATE
=
0x20
;
var
gChannel
;
var
gDebugTest
=
false
;
Services
.
scriptloader
.
loadSubScript
(
DATA_URI_SPEC
+
"
sharedUpdateXML
.
js
"
this
)
;
const
PERMS_FILE
=
FileUtils
.
PERMS_FILE
;
const
PERMS_DIRECTORY
=
FileUtils
.
PERMS_DIRECTORY
;
const
MODE_WRONLY
=
FileUtils
.
MODE_WRONLY
;
const
MODE_CREATE
=
FileUtils
.
MODE_CREATE
;
const
MODE_APPEND
=
FileUtils
.
MODE_APPEND
;
const
MODE_TRUNCATE
=
FileUtils
.
MODE_TRUNCATE
;
const
URI_UPDATES_PROPERTIES
=
"
chrome
:
/
/
mozapps
/
locale
/
update
/
updates
.
properties
"
;
const
gUpdateBundle
=
Services
.
strings
.
createBundle
(
URI_UPDATES_PROPERTIES
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
gAUS
"
function
test_gAUS
(
)
{
return
Cc
[
"
mozilla
.
org
/
updates
/
update
-
service
;
1
"
]
.
getService
(
Ci
.
nsIApplicationUpdateService
)
.
QueryInterface
(
Ci
.
nsITimerCallback
)
.
QueryInterface
(
Ci
.
nsIObserver
)
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gUpdateManager
"
"
mozilla
.
org
/
updates
/
update
-
manager
;
1
"
"
nsIUpdateManager
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gUpdateChecker
"
"
mozilla
.
org
/
updates
/
update
-
checker
;
1
"
"
nsIUpdateChecker
"
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
gDefaultPrefBranch
"
function
test_gDPB
(
)
{
return
Services
.
prefs
.
getDefaultBranch
(
null
)
;
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
gPrefRoot
"
function
test_gPR
(
)
{
return
Services
.
prefs
.
getBranch
(
null
)
;
}
)
;
function
waitForEvent
(
topic
status
=
null
)
{
return
new
Promise
(
resolve
=
>
Services
.
obs
.
addObserver
(
{
observe
(
subject
innerTopic
innerStatus
)
{
if
(
!
status
|
|
status
=
=
innerStatus
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
resolve
(
innerStatus
)
;
}
}
}
topic
)
)
;
}
async
function
testPostUpdateProcessing
(
)
{
await
gAUS
.
internal
.
postUpdateProcessing
(
)
;
}
async
function
initUpdateServiceStub
(
)
{
const
updateServiceStub
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
service
-
stub
;
1
"
]
.
getService
(
Ci
.
nsIApplicationUpdateServiceStub
)
;
await
updateServiceStub
.
init
(
)
;
}
function
reloadUpdateManagerData
(
skipFiles
=
false
)
{
gUpdateManager
.
internal
.
reload
(
skipFiles
)
;
}
const
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
nsPref
:
changed
"
&
&
aData
=
=
PREF_APP_UPDATE_CHANNEL
)
{
let
channel
=
gDefaultPrefBranch
.
getCharPref
(
PREF_APP_UPDATE_CHANNEL
)
;
if
(
channel
!
=
gChannel
)
{
debugDump
(
"
Changing
channel
from
"
+
channel
+
"
to
"
+
gChannel
)
;
gDefaultPrefBranch
.
setCharPref
(
PREF_APP_UPDATE_CHANNEL
gChannel
)
;
}
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
}
;
function
setUpdateChannel
(
aChannel
)
{
gChannel
=
aChannel
;
debugDump
(
"
setting
default
pref
"
+
PREF_APP_UPDATE_CHANNEL
+
"
to
"
+
gChannel
)
;
gDefaultPrefBranch
.
unlockPref
(
PREF_APP_UPDATE_CHANNEL
)
;
gDefaultPrefBranch
.
setCharPref
(
PREF_APP_UPDATE_CHANNEL
gChannel
)
;
gPrefRoot
.
addObserver
(
PREF_APP_UPDATE_CHANNEL
observer
)
;
}
function
setUpdateURL
(
aURL
)
{
let
url
=
aURL
?
aURL
:
URL_HOST
+
"
/
update
.
xml
"
;
debugDump
(
"
setting
update
URL
to
"
+
url
)
;
let
origAppInfo
=
Services
.
appinfo
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
appinfo
=
origAppInfo
;
}
)
;
let
mockAppInfo
=
Object
.
create
(
origAppInfo
{
updateURL
:
{
configurable
:
true
enumerable
:
true
writable
:
false
value
:
url
}
}
)
;
Services
.
appinfo
=
mockAppInfo
;
}
function
writeUpdatesToXMLFile
(
aContent
aIsActiveUpdate
)
{
let
file
=
getUpdateDirFile
(
aIsActiveUpdate
?
FILE_ACTIVE_UPDATE_XML
:
FILE_UPDATES_XML
)
;
writeFile
(
file
aContent
)
;
}
function
writeStatusFile
(
aStatus
)
{
let
file
=
getUpdateDirFile
(
FILE_UPDATE_STATUS
)
;
writeFile
(
file
aStatus
+
"
\
n
"
)
;
}
function
writeVersionFile
(
aVersion
)
{
let
file
=
getUpdateDirFile
(
FILE_UPDATE_VERSION
)
;
writeFile
(
file
aVersion
+
"
\
n
"
)
;
}
function
writeFile
(
aFile
aText
)
{
let
fos
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
if
(
!
aFile
.
exists
(
)
)
{
aFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
PERMS_FILE
)
;
}
fos
.
init
(
aFile
MODE_WRONLY
|
MODE_CREATE
|
MODE_TRUNCATE
PERMS_FILE
0
)
;
fos
.
write
(
aText
aText
.
length
)
;
fos
.
close
(
)
;
}
function
readStatusFile
(
)
{
let
file
=
getUpdateDirFile
(
FILE_UPDATE_STATUS
)
;
if
(
!
file
.
exists
(
)
)
{
debugDump
(
"
update
status
file
does
not
exists
!
Path
:
"
+
file
.
path
)
;
return
STATE_NONE
;
}
return
readFile
(
file
)
.
split
(
"
\
n
"
)
[
0
]
;
}
function
readStatusState
(
)
{
return
readStatusFile
(
)
.
split
(
"
:
"
)
[
0
]
;
}
function
readStatusFailedCode
(
)
{
return
readStatusFile
(
)
.
split
(
"
:
"
)
[
1
]
;
}
function
readFile
(
aFile
)
{
let
fis
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
if
(
!
aFile
.
exists
(
)
)
{
return
null
;
}
fis
.
init
(
aFile
-
1
-
1
Ci
.
nsIFileInputStream
.
CLOSE_ON_EOF
)
;
let
sis
=
Cc
[
"
mozilla
.
org
/
scriptableinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIScriptableInputStream
)
;
sis
.
init
(
fis
)
;
let
text
=
sis
.
read
(
sis
.
available
(
)
)
;
sis
.
close
(
)
;
return
text
;
}
function
getStatusText
(
aErrCode
)
{
return
getString
(
"
check_error
-
"
+
aErrCode
)
;
}
function
getString
(
aName
)
{
try
{
return
gUpdateBundle
.
GetStringFromName
(
aName
)
;
}
catch
(
e
)
{
}
return
null
;
}
function
getFileExtension
(
aFile
)
{
return
Services
.
io
.
newFileURI
(
aFile
)
.
QueryInterface
(
Ci
.
nsIURL
)
.
fileExtension
;
}
function
getUpdateDirFile
(
aLeafName
aWhichDir
=
null
)
{
let
file
=
Services
.
dirsvc
.
get
(
XRE_UPDATE_ROOT_DIR
Ci
.
nsIFile
)
;
switch
(
aLeafName
)
{
case
undefined
:
return
file
;
case
DIR_UPDATES
:
case
FILE_ACTIVE_UPDATE_XML
:
case
FILE_ACTIVE_UPDATE_XML_TMP
:
case
FILE_UPDATE_CONFIG_JSON
:
case
FILE_BACKUP_UPDATE_CONFIG_JSON
:
case
FILE_UPDATE_TEST
:
case
FILE_UPDATES_XML
:
case
FILE_UPDATES_XML_TMP
:
file
.
append
(
aLeafName
)
;
return
file
;
case
DIR_PATCH
:
case
DIR_DOWNLOADING
:
case
FILE_BACKUP_UPDATE_LOG
:
case
FILE_BACKUP_UPDATE_ELEVATED_LOG
:
case
FILE_LAST_UPDATE_LOG
:
case
FILE_LAST_UPDATE_ELEVATED_LOG
:
file
.
append
(
DIR_UPDATES
)
;
file
.
append
(
aLeafName
)
;
return
file
;
case
FILE_UPDATE_LOG
:
case
FILE_UPDATE_ELEVATED_LOG
:
case
FILE_UPDATE_MAR
:
case
FILE_UPDATE_STATUS
:
case
FILE_UPDATE_VERSION
:
case
FILE_UPDATER_INI
:
file
.
append
(
DIR_UPDATES
)
;
if
(
aWhichDir
=
=
DIR_DOWNLOADING
)
{
file
.
append
(
DIR_DOWNLOADING
)
;
}
else
{
file
.
append
(
DIR_PATCH
)
;
}
file
.
append
(
aLeafName
)
;
return
file
;
}
throw
new
Error
(
"
The
leafName
specified
is
not
handled
by
this
function
"
+
"
leafName
:
"
+
aLeafName
)
;
}
function
getStageDirFile
(
aRelPath
)
{
let
file
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
file
=
getUpdateDirFile
(
DIR_PATCH
)
;
}
else
{
file
=
getGREBinDir
(
)
;
}
file
.
append
(
DIR_UPDATED
)
;
if
(
aRelPath
)
{
let
pathParts
=
aRelPath
.
split
(
"
/
"
)
;
for
(
let
i
=
0
;
i
<
pathParts
.
length
;
i
+
+
)
{
if
(
pathParts
[
i
]
)
{
file
.
append
(
pathParts
[
i
]
)
;
}
}
}
return
file
;
}
function
removeUpdateFiles
(
aRemoveLogFiles
)
{
let
files
=
[
[
FILE_ACTIVE_UPDATE_XML
]
[
FILE_UPDATES_XML
]
[
FILE_UPDATE_STATUS
]
[
FILE_UPDATE_VERSION
]
[
FILE_UPDATE_MAR
]
[
FILE_UPDATE_MAR
DIR_DOWNLOADING
]
[
FILE_UPDATER_INI
]
]
;
if
(
aRemoveLogFiles
)
{
files
=
files
.
concat
(
[
[
FILE_BACKUP_UPDATE_LOG
]
[
FILE_LAST_UPDATE_LOG
]
[
FILE_UPDATE_LOG
]
[
FILE_BACKUP_UPDATE_ELEVATED_LOG
]
[
FILE_LAST_UPDATE_ELEVATED_LOG
]
[
FILE_UPDATE_ELEVATED_LOG
]
]
)
;
}
for
(
let
i
=
0
;
i
<
files
.
length
;
i
+
+
)
{
let
file
=
getUpdateDirFile
.
apply
(
null
files
[
i
]
)
;
try
{
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
}
catch
(
e
)
{
logTestInfo
(
"
Unable
to
remove
file
.
Path
:
"
+
file
.
path
+
"
Exception
:
"
+
e
)
;
}
}
let
stageDir
=
getStageDirFile
(
)
;
if
(
stageDir
.
exists
(
)
)
{
try
{
removeDirRecursive
(
stageDir
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Unable
to
remove
directory
.
Path
:
"
+
stageDir
.
path
+
"
Exception
:
"
+
e
)
;
}
}
}
function
removeDirRecursive
(
aDir
)
{
if
(
!
aDir
.
exists
(
)
)
{
return
;
}
if
(
!
aDir
.
isDirectory
(
)
)
{
throw
new
Error
(
"
Only
a
directory
can
be
passed
to
this
funtion
!
"
)
;
}
try
{
debugDump
(
"
attempting
to
remove
directory
.
Path
:
"
+
aDir
.
path
)
;
aDir
.
remove
(
true
)
;
return
;
}
catch
(
e
)
{
logTestInfo
(
"
non
-
fatal
error
removing
directory
.
Exception
:
"
+
e
)
;
}
let
dirEntries
=
aDir
.
directoryEntries
;
while
(
dirEntries
.
hasMoreElements
(
)
)
{
let
entry
=
dirEntries
.
nextFile
;
if
(
entry
.
isDirectory
(
)
)
{
removeDirRecursive
(
entry
)
;
}
else
{
entry
.
permissions
=
PERMS_FILE
;
try
{
debugDump
(
"
attempting
to
remove
file
.
Path
:
"
+
entry
.
path
)
;
entry
.
remove
(
false
)
;
}
catch
(
e
)
{
logTestInfo
(
"
error
removing
file
.
Exception
:
"
+
e
)
;
throw
e
;
}
}
}
aDir
.
permissions
=
PERMS_DIRECTORY
;
try
{
debugDump
(
"
attempting
to
remove
directory
.
Path
:
"
+
aDir
.
path
)
;
aDir
.
remove
(
true
)
;
}
catch
(
e
)
{
logTestInfo
(
"
error
removing
directory
.
Exception
:
"
+
e
)
;
throw
e
;
}
}
function
getCurrentProcessDir
(
)
{
return
Services
.
dirsvc
.
get
(
NS_XPCOM_CURRENT_PROCESS_DIR
Ci
.
nsIFile
)
;
}
function
getGREDir
(
)
{
return
Services
.
dirsvc
.
get
(
NS_GRE_DIR
Ci
.
nsIFile
)
;
}
function
getGREBinDir
(
)
{
return
Services
.
dirsvc
.
get
(
NS_GRE_BIN_DIR
Ci
.
nsIFile
)
;
}
function
getPerInstallationMutexName
(
)
{
if
(
AppConstants
.
platform
!
=
"
win
"
)
{
throw
new
Error
(
"
Windows
only
function
called
by
a
different
platform
!
"
)
;
}
let
hasher
=
Cc
[
"
mozilla
.
org
/
security
/
hash
;
1
"
]
.
createInstance
(
Ci
.
nsICryptoHash
)
;
hasher
.
init
(
hasher
.
SHA1
)
;
let
exeFile
=
Services
.
dirsvc
.
get
(
XRE_EXECUTABLE_FILE
Ci
.
nsIFile
)
;
let
data
=
new
TextEncoder
(
)
.
encode
(
exeFile
.
path
.
toLowerCase
(
)
)
;
hasher
.
update
(
data
data
.
length
)
;
return
"
Global
\
\
MozillaUpdateMutex
-
"
+
hasher
.
finish
(
true
)
;
}
function
closeHandle
(
aHandle
)
{
if
(
AppConstants
.
platform
!
=
"
win
"
)
{
throw
new
Error
(
"
Windows
only
function
called
by
a
different
platform
!
"
)
;
}
let
lib
=
ctypes
.
open
(
"
kernel32
.
dll
"
)
;
let
CloseHandle
=
lib
.
declare
(
"
CloseHandle
"
ctypes
.
winapi_abi
ctypes
.
int32_t
ctypes
.
void_t
.
ptr
)
;
CloseHandle
(
aHandle
)
;
lib
.
close
(
)
;
}
function
createMutex
(
aName
)
{
if
(
AppConstants
.
platform
!
=
"
win
"
)
{
throw
new
Error
(
"
Windows
only
function
called
by
a
different
platform
!
"
)
;
}
const
INITIAL_OWN
=
1
;
const
ERROR_ALREADY_EXISTS
=
0xb7
;
let
lib
=
ctypes
.
open
(
"
kernel32
.
dll
"
)
;
let
CreateMutexW
=
lib
.
declare
(
"
CreateMutexW
"
ctypes
.
winapi_abi
ctypes
.
void_t
.
ptr
ctypes
.
void_t
.
ptr
ctypes
.
int32_t
ctypes
.
char16_t
.
ptr
)
;
let
handle
=
CreateMutexW
(
null
INITIAL_OWN
aName
)
;
lib
.
close
(
)
;
let
alreadyExists
=
ctypes
.
winLastError
=
=
ERROR_ALREADY_EXISTS
;
if
(
handle
&
&
!
handle
.
isNull
(
)
&
&
alreadyExists
)
{
closeHandle
(
handle
)
;
handle
=
null
;
}
if
(
handle
&
&
handle
.
isNull
(
)
)
{
handle
=
null
;
}
return
handle
;
}
function
setAppUpdateAutoSync
(
aEnabled
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
let
file
=
getUpdateDirFile
(
FILE_UPDATE_CONFIG_JSON
)
;
if
(
aEnabled
=
=
=
undefined
|
|
aEnabled
=
=
=
null
)
{
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
}
else
{
writeFile
(
file
'
{
"
'
+
CONFIG_APP_UPDATE_AUTO
+
'
"
:
'
+
aEnabled
.
toString
(
)
+
"
}
"
)
;
}
}
else
if
(
aEnabled
=
=
=
undefined
|
|
aEnabled
=
=
=
null
)
{
if
(
Services
.
prefs
.
prefHasUserValue
(
PREF_APP_UPDATE_AUTO
)
)
{
Services
.
prefs
.
clearUserPref
(
PREF_APP_UPDATE_AUTO
)
;
}
}
else
{
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_AUTO
aEnabled
)
;
}
}
function
logTestInfo
(
aText
aCaller
)
{
let
caller
=
aCaller
?
aCaller
:
Components
.
stack
.
caller
;
let
now
=
new
Date
(
)
;
let
hh
=
now
.
getHours
(
)
;
let
mm
=
now
.
getMinutes
(
)
;
let
ss
=
now
.
getSeconds
(
)
;
let
ms
=
now
.
getMilliseconds
(
)
;
let
time
=
(
hh
<
10
?
"
0
"
+
hh
:
hh
)
+
"
:
"
+
(
mm
<
10
?
"
0
"
+
mm
:
mm
)
+
"
:
"
+
(
ss
<
10
?
"
0
"
+
ss
:
ss
)
+
"
:
"
;
if
(
ms
<
10
)
{
time
+
=
"
00
"
;
}
else
if
(
ms
<
100
)
{
time
+
=
"
0
"
;
}
time
+
=
ms
;
let
msg
=
time
+
"
|
TEST
-
INFO
|
"
+
caller
.
filename
+
"
|
[
"
+
caller
.
name
+
"
:
"
+
caller
.
lineNumber
+
"
]
"
+
aText
;
LOG_FUNCTION
(
msg
)
;
}
function
debugDump
(
aText
aCaller
)
{
if
(
gDebugTest
)
{
let
caller
=
aCaller
?
aCaller
:
Components
.
stack
.
caller
;
logTestInfo
(
aText
caller
)
;
}
}
async
function
continueFileHandler
(
leafName
)
{
let
interval
=
100
;
let
retries
=
300
;
let
continueFile
;
if
(
leafName
=
=
CONTINUE_STAGING
)
{
interval
=
200
;
retries
=
600
;
continueFile
=
getGREBinDir
(
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
continueFile
=
continueFile
.
parent
.
parent
;
}
continueFile
.
append
(
leafName
)
;
}
else
{
continueFile
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
let
continuePath
=
REL_PATH_DATA
+
leafName
;
let
continuePathParts
=
continuePath
.
split
(
"
/
"
)
;
for
(
let
i
=
0
;
i
<
continuePathParts
.
length
;
+
+
i
)
{
continueFile
.
append
(
continuePathParts
[
i
]
)
;
}
}
if
(
continueFile
.
exists
(
)
)
{
logTestInfo
(
"
The
continue
file
should
not
exist
path
:
"
+
continueFile
.
path
)
;
continueFile
.
remove
(
false
)
;
}
debugDump
(
"
Creating
continue
file
path
:
"
+
continueFile
.
path
)
;
continueFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
PERMS_FILE
)
;
registerCleanupFunction
(
(
)
=
>
{
if
(
continueFile
.
exists
(
)
)
{
logTestInfo
(
"
Removing
continue
file
during
test
cleanup
path
:
"
+
continueFile
.
path
)
;
continueFile
.
remove
(
false
)
;
}
}
)
;
return
TestUtils
.
waitForCondition
(
(
)
=
>
!
continueFile
.
exists
(
)
"
Waiting
for
file
to
be
deleted
path
:
"
+
continueFile
.
path
interval
retries
)
.
catch
(
_e
=
>
{
logTestInfo
(
"
Continue
file
was
not
removed
after
checking
"
+
retries
+
"
times
path
:
"
+
continueFile
.
path
)
;
}
)
;
}
async
function
waitForUpdatePing
(
archiveChecker
expectedProperties
)
{
let
updatePing
;
await
TestUtils
.
waitForCondition
(
async
function
(
)
{
updatePing
=
await
archiveChecker
.
promiseFindPing
(
"
update
"
expectedProperties
)
;
return
!
!
updatePing
;
}
"
Wait
for
Update
Ping
to
be
generated
"
500
100
)
;
return
updatePing
;
}
