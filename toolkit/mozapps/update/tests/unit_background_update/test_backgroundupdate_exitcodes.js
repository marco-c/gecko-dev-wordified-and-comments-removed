"
use
strict
"
;
const
{
EXIT_CODE
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BackgroundUpdate
.
jsm
"
)
.
BackgroundUpdate
;
setupProfileService
(
)
;
let
syncManager
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
sync
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIUpdateSyncManager
)
;
let
lockFile
=
do_get_profile
(
)
;
lockFile
.
append
(
"
customExePath
"
)
;
lockFile
.
append
(
"
customExe
"
)
;
syncManager
.
resetLock
(
lockFile
)
;
add_task
(
async
function
test_default_profile_does_not_exist
(
)
{
let
exitCode
=
await
do_backgroundtask
(
"
backgroundupdate
"
{
extraEnv
:
{
MOZ_BACKGROUNDTASKS_NO_DEFAULT_PROFILE
:
"
1
"
}
}
)
;
Assert
.
equal
(
EXIT_CODE
.
DEFAULT_PROFILE_DOES_NOT_EXIST
exitCode
)
;
Assert
.
equal
(
11
exitCode
)
;
}
)
;
add_task
(
async
function
test_default_profile_cannot_be_locked
(
)
{
let
profileService
=
Cc
[
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
]
.
getService
(
Ci
.
nsIToolkitProfileService
)
;
let
file
=
do_get_profile
(
)
;
file
.
append
(
"
profile_cannot_be_locked
"
)
;
let
profile
=
profileService
.
createUniqueProfile
(
file
"
test_default_profile
"
)
;
let
lock
=
profile
.
lock
(
{
}
)
;
try
{
let
exitCode
=
await
do_backgroundtask
(
"
backgroundupdate
"
{
extraEnv
:
{
MOZ_BACKGROUNDTASKS_DEFAULT_PROFILE_PATH
:
lock
.
directory
.
path
}
}
)
;
Assert
.
equal
(
EXIT_CODE
.
DEFAULT_PROFILE_CANNOT_BE_LOCKED
exitCode
)
;
Assert
.
equal
(
12
exitCode
)
;
}
finally
{
lock
.
unlock
(
)
;
}
}
)
;
add_task
(
async
function
test_default_profile_cannot_be_read
(
)
{
let
file
=
do_get_profile
(
)
;
file
.
append
(
"
profile_cannot_be_read
"
)
;
await
IOUtils
.
makeDirectory
(
file
.
path
)
;
let
exitCode
=
await
do_backgroundtask
(
"
backgroundupdate
"
{
extraEnv
:
{
MOZ_BACKGROUNDTASKS_DEFAULT_PROFILE_PATH
:
file
.
path
}
}
)
;
Assert
.
equal
(
EXIT_CODE
.
DEFAULT_PROFILE_CANNOT_BE_READ
exitCode
)
;
Assert
.
equal
(
13
exitCode
)
;
}
)
;
