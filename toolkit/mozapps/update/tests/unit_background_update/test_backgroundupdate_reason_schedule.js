"
use
strict
"
;
const
{
BackgroundUpdate
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BackgroundUpdate
.
jsm
"
)
;
let
reasons
=
(
)
=
>
BackgroundUpdate
.
_reasonsToNotScheduleUpdates
(
)
;
let
REASON
=
BackgroundUpdate
.
REASON
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
ExtensionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
function
setupProfileService
(
)
{
let
gProfD
=
do_get_profile
(
)
;
let
gDataHome
=
gProfD
.
clone
(
)
;
gDataHome
.
append
(
"
data
"
)
;
gDataHome
.
createUnique
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
let
gDataHomeLocal
=
gProfD
.
clone
(
)
;
gDataHomeLocal
.
append
(
"
local
"
)
;
gDataHomeLocal
.
createUnique
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
let
xreDirProvider
=
Cc
[
"
mozilla
.
org
/
xre
/
directory
-
provider
;
1
"
]
.
getService
(
Ci
.
nsIXREDirProvider
)
;
xreDirProvider
.
setUserDataDirectory
(
gDataHome
false
)
;
xreDirProvider
.
setUserDataDirectory
(
gDataHomeLocal
true
)
;
}
setupProfileService
(
)
;
ExtensionTestUtils
.
init
(
this
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
AppConstants
.
MOZ_BACKGROUNDTASKS
}
async
function
test_reasons_schedule_langpacks
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Services
.
prefs
.
setBoolPref
(
"
app
.
update
.
langpack
.
enabled
"
true
)
;
let
result
=
await
reasons
(
)
;
Assert
.
ok
(
!
result
.
includes
(
REASON
.
LANGPACK_INSTALLED
)
"
Reasons
does
not
include
LANGPACK_INSTALLED
"
)
;
let
langpack
=
{
"
manifest
.
json
"
:
{
name
:
"
test
Language
Pack
"
version
:
"
1
.
0
"
manifest_version
:
2
applications
:
{
gecko
:
{
id
:
"
test
-
langpack
"
strict_min_version
:
"
42
.
0
"
strict_max_version
:
"
42
.
0
"
}
}
langpack_id
:
"
fr
"
languages
:
{
fr
:
{
chrome_resources
:
{
global
:
"
chrome
/
fr
/
locale
/
fr
/
global
/
"
}
version
:
"
20171001190118
"
}
}
sources
:
{
browser
:
{
base_path
:
"
browser
/
"
}
}
}
}
;
await
Promise
.
all
(
[
TestUtils
.
topicObserved
(
"
webextension
-
langpack
-
startup
"
)
AddonTestUtils
.
promiseInstallXPI
(
langpack
)
]
)
;
result
=
await
reasons
(
)
;
Assert
.
ok
(
result
.
includes
(
REASON
.
LANGPACK_INSTALLED
)
"
Reasons
include
LANGPACK_INSTALLED
"
)
;
Services
.
prefs
.
setBoolPref
(
"
app
.
update
.
langpack
.
enabled
"
false
)
;
result
=
await
reasons
(
)
;
Assert
.
ok
(
!
result
.
includes
(
REASON
.
LANGPACK_INSTALLED
)
"
Reasons
does
not
include
LANGPACK_INSTALLED
"
)
;
}
)
;
