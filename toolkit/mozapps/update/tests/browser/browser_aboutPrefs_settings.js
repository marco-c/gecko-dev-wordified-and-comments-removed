async
function
changeAndVerifyPref
(
tab
newConfigValue
)
{
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
newConfigValue
}
]
async
function
(
{
newConfigValue
}
)
{
let
radioId
=
newConfigValue
?
"
autoDesktop
"
:
"
manualDesktop
"
;
let
radioElement
=
content
.
document
.
getElementById
(
radioId
)
;
radioElement
.
click
(
)
;
}
)
;
let
configValueRead
=
await
UpdateUtils
.
getAppUpdateAutoEnabled
(
)
;
is
(
configValueRead
newConfigValue
"
Value
returned
should
have
matched
the
expected
value
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
newConfigValue
}
]
async
function
(
{
newConfigValue
}
)
{
let
updateRadioGroup
=
content
.
document
.
getElementById
(
"
updateRadioGroup
"
)
;
is
(
updateRadioGroup
.
value
{
newConfigValue
}
"
Update
preference
should
match
expected
"
)
;
}
)
;
}
add_task
(
async
function
testUpdateAutoPrefUI
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
"
)
;
await
changeAndVerifyPref
(
tab
true
)
;
ok
(
!
gUpdateManager
.
downloadingUpdate
"
There
should
not
be
a
downloading
update
"
)
;
ok
(
!
gUpdateManager
.
readyUpdate
"
There
should
not
be
a
ready
update
"
)
;
await
changeAndVerifyPref
(
tab
false
)
;
ok
(
!
gUpdateManager
.
downloadingUpdate
"
There
should
not
be
a
downloading
update
"
)
;
ok
(
!
gUpdateManager
.
readyUpdate
"
There
should
not
be
a
ready
update
"
)
;
let
patchProps
=
{
state
:
STATE_PENDING
}
;
let
patches
=
getLocalPatchString
(
patchProps
)
;
let
updateProps
=
{
checkInterval
:
"
1
"
}
;
let
updates
=
getLocalUpdateString
(
updateProps
patches
)
;
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
updates
)
true
)
;
writeStatusFile
(
STATE_PENDING
)
;
reloadUpdateManagerData
(
)
;
ok
(
!
!
gUpdateManager
.
readyUpdate
"
There
should
be
a
ready
update
"
)
;
let
discardUpdate
=
0
;
let
{
prompt
}
=
Services
;
let
promptService
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPromptService
"
]
)
confirmEx
(
.
.
.
args
)
{
promptService
.
_confirmExArgs
=
args
;
return
discardUpdate
;
}
}
;
Services
.
prompt
=
promptService
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prompt
=
prompt
;
}
)
;
discardUpdate
=
1
;
await
changeAndVerifyPref
(
tab
false
)
;
ok
(
!
!
gUpdateManager
.
readyUpdate
"
There
should
be
a
ready
update
"
)
;
discardUpdate
=
0
;
await
changeAndVerifyPref
(
tab
true
)
;
ok
(
!
!
gUpdateManager
.
readyUpdate
"
There
should
be
a
ready
update
"
)
;
discardUpdate
=
0
;
await
changeAndVerifyPref
(
tab
false
)
;
ok
(
!
gUpdateManager
.
downloadingUpdate
"
There
should
not
be
a
downloading
update
"
)
;
ok
(
!
gUpdateManager
.
readyUpdate
"
There
should
not
be
a
ready
update
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
