ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppMenuNotifications
"
"
resource
:
/
/
gre
/
modules
/
AppMenuNotifications
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
UpdateListener
"
"
resource
:
/
/
gre
/
modules
/
UpdateListener
.
jsm
"
)
;
const
IS_MACOSX
=
(
"
nsILocalFileMac
"
in
Ci
)
;
const
IS_WIN
=
(
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
in
Cc
)
;
const
BIN_SUFFIX
=
(
IS_WIN
?
"
.
exe
"
:
"
"
)
;
const
FILE_UPDATER_BIN
=
"
updater
"
+
(
IS_MACOSX
?
"
.
app
"
:
BIN_SUFFIX
)
;
const
FILE_UPDATER_BIN_BAK
=
FILE_UPDATER_BIN
+
"
.
bak
"
;
const
PREF_APP_UPDATE_INTERVAL
=
"
app
.
update
.
interval
"
;
const
PREF_APP_UPDATE_LASTUPDATETIME
=
"
app
.
update
.
lastUpdateTime
.
background
-
update
-
timer
"
;
const
DATA_URI_SPEC
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
mozapps
/
update
/
tests
/
browser
/
"
;
var
DEBUG_AUS_TEST
=
true
;
const
LOG_FUNCTION
=
info
;
const
MAX_UPDATE_COPY_ATTEMPTS
=
10
;
Services
.
scriptloader
.
loadSubScript
(
DATA_URI_SPEC
+
"
testConstants
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
DATA_URI_SPEC
+
"
shared
.
js
"
this
)
;
var
gURLData
=
URL_HOST
+
"
/
"
+
REL_PATH_DATA
;
const
URL_MANUAL_UPDATE
=
gURLData
+
"
downloadPage
.
html
"
;
const
gEnv
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
gOriginalUpdateAutoValue
=
null
;
async
function
continueFileHandler
(
leafName
)
{
let
retries
=
undefined
;
let
continueFile
;
if
(
leafName
=
=
CONTINUE_STAGING
)
{
debugDump
(
"
creating
"
+
leafName
+
"
file
for
slow
update
staging
"
)
;
retries
=
100
;
continueFile
=
getUpdatesPatchDir
(
)
;
continueFile
.
append
(
leafName
)
;
}
else
{
debugDump
(
"
creating
"
+
leafName
+
"
file
for
slow
http
server
requests
"
)
;
continueFile
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
let
continuePath
=
REL_PATH_DATA
+
leafName
;
let
continuePathParts
=
continuePath
.
split
(
"
/
"
)
;
for
(
let
i
=
0
;
i
<
continuePathParts
.
length
;
+
+
i
)
{
continueFile
.
append
(
continuePathParts
[
i
]
)
;
}
}
if
(
continueFile
.
exists
(
)
)
{
throw
new
Error
(
"
The
continue
file
should
not
exist
path
:
"
+
continueFile
.
path
)
;
}
continueFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
PERMS_FILE
)
;
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
(
!
continueFile
.
exists
(
)
)
"
Waiting
for
file
to
be
deleted
path
:
"
+
continueFile
.
path
undefined
retries
)
;
}
function
lockWriteTestFile
(
)
{
if
(
!
IS_WIN
)
{
throw
new
Error
(
"
Windows
only
test
function
called
"
)
;
}
let
file
=
getUpdatesRootDir
(
)
;
file
.
append
(
FILE_UPDATE_TEST
)
;
file
.
QueryInterface
(
Ci
.
nsILocalFileWin
)
;
if
(
file
.
exists
(
)
)
{
file
.
fileAttributesWin
|
=
file
.
WFA_READWRITE
;
file
.
fileAttributesWin
&
=
~
file
.
WFA_READONLY
;
file
.
remove
(
false
)
;
}
file
.
create
(
file
.
NORMAL_FILE_TYPE
0o444
)
;
file
.
fileAttributesWin
|
=
file
.
WFA_READONLY
;
file
.
fileAttributesWin
&
=
~
file
.
WFA_READWRITE
;
registerCleanupFunction
(
(
)
=
>
{
file
.
fileAttributesWin
|
=
file
.
WFA_READWRITE
;
file
.
fileAttributesWin
&
=
~
file
.
WFA_READONLY
;
file
.
remove
(
false
)
;
}
)
;
}
function
setOtherInstanceHandlingUpdates
(
)
{
if
(
!
IS_WIN
)
{
throw
new
Error
(
"
Windows
only
test
function
called
"
)
;
}
gAUS
.
observe
(
null
"
test
-
close
-
handle
-
update
-
mutex
"
"
"
)
;
let
handle
=
createMutex
(
getPerInstallationMutexName
(
)
)
;
registerCleanupFunction
(
(
)
=
>
{
closeHandle
(
handle
)
;
}
)
;
}
function
getVersionParams
(
aAppVersion
)
{
let
appInfo
=
Services
.
appinfo
;
return
"
&
appVersion
=
"
+
(
aAppVersion
?
aAppVersion
:
appInfo
.
version
)
;
}
function
cleanUpUpdates
(
)
{
reloadUpdateManagerData
(
true
)
;
removeUpdateDirsAndFiles
(
)
;
}
function
setUpdateTimerPrefs
(
)
{
let
now
=
Math
.
round
(
Date
.
now
(
)
/
1000
)
-
60
;
Services
.
prefs
.
setIntPref
(
PREF_APP_UPDATE_LASTUPDATETIME
now
)
;
Services
.
prefs
.
setIntPref
(
PREF_APP_UPDATE_INTERVAL
43200
)
;
}
async
function
setAppUpdateAutoEnabledHelper
(
enabled
)
{
if
(
gOriginalUpdateAutoValue
=
=
null
)
{
gOriginalUpdateAutoValue
=
await
UpdateUtils
.
getAppUpdateAutoEnabled
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
UpdateUtils
.
setAppUpdateAutoEnabled
(
gOriginalUpdateAutoValue
)
;
}
)
;
}
await
UpdateUtils
.
setAppUpdateAutoEnabled
(
enabled
)
;
}
add_task
(
async
function
setDefaults
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_LOG
DEBUG_AUS_TEST
]
[
"
services
.
sync
.
autoconnectDelay
"
600000
]
]
}
)
;
await
setAppUpdateAutoEnabledHelper
(
true
)
;
}
)
;
function
runUpdateTest
(
updateParams
checkAttempts
steps
)
{
return
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
{
gEnv
.
set
(
"
MOZ_TEST_SKIP_UPDATE_STAGE
"
"
"
)
;
UpdateListener
.
reset
(
)
;
cleanUpUpdates
(
)
;
}
)
;
gEnv
.
set
(
"
MOZ_TEST_SKIP_UPDATE_STAGE
"
"
1
"
)
;
setUpdateTimerPrefs
(
)
;
removeUpdateDirsAndFiles
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_DOWNLOADPROMPTATTEMPTS
0
]
[
PREF_APP_UPDATE_DISABLEDFORTESTING
false
]
[
PREF_APP_UPDATE_IDLETIME
0
]
[
PREF_APP_UPDATE_URL_MANUAL
URL_MANUAL_UPDATE
]
]
}
)
;
await
setupTestUpdater
(
)
;
let
url
=
URL_HTTP_UPDATE_SJS
+
"
?
"
+
updateParams
+
getVersionParams
(
)
;
setUpdateURL
(
url
)
;
executeSoon
(
(
)
=
>
{
(
async
function
(
)
{
gAUS
.
checkForBackgroundUpdates
(
)
;
for
(
var
i
=
0
;
i
<
checkAttempts
-
1
;
i
+
+
)
{
await
waitForEvent
(
"
update
-
error
"
"
check
-
attempt
-
failed
"
)
;
gAUS
.
checkForBackgroundUpdates
(
)
;
}
}
)
(
)
;
}
)
;
for
(
let
step
of
steps
)
{
await
processStep
(
step
)
;
}
await
finishTestRestoreUpdaterBackup
(
)
;
}
)
(
)
;
}
function
runUpdateProcessingTest
(
updates
steps
)
{
return
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
{
gEnv
.
set
(
"
MOZ_TEST_SKIP_UPDATE_STAGE
"
"
"
)
;
UpdateListener
.
reset
(
)
;
cleanUpUpdates
(
)
;
}
)
;
gEnv
.
set
(
"
MOZ_TEST_SKIP_UPDATE_STAGE
"
"
1
"
)
;
setUpdateTimerPrefs
(
)
;
removeUpdateDirsAndFiles
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_DOWNLOADPROMPTATTEMPTS
0
]
[
PREF_APP_UPDATE_DISABLEDFORTESTING
false
]
[
PREF_APP_UPDATE_IDLETIME
0
]
[
PREF_APP_UPDATE_URL_MANUAL
URL_MANUAL_UPDATE
]
]
}
)
;
await
setupTestUpdater
(
)
;
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
updates
)
true
)
;
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
"
"
)
false
)
;
writeStatusFile
(
STATE_FAILED_CRC_ERROR
)
;
reloadUpdateManagerData
(
)
;
testPostUpdateProcessing
(
)
;
for
(
let
step
of
steps
)
{
await
processStep
(
step
)
;
}
await
finishTestRestoreUpdaterBackup
(
)
;
}
)
(
)
;
}
function
processStep
(
step
)
{
if
(
typeof
(
step
)
=
=
"
function
"
)
{
return
step
(
)
;
}
const
{
notificationId
button
beforeClick
cleanup
}
=
step
;
return
(
async
function
(
)
{
await
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
notificationPanel
"
popupshown
"
)
;
const
shownNotification
=
AppMenuNotifications
.
activeNotification
.
id
;
is
(
shownNotification
notificationId
"
The
right
notification
showed
up
.
"
)
;
if
(
shownNotification
!
=
notificationId
)
{
if
(
cleanup
)
{
await
cleanup
(
)
;
}
return
;
}
let
buttonEl
=
getNotificationButton
(
window
notificationId
button
)
;
if
(
beforeClick
)
{
await
beforeClick
(
)
;
}
buttonEl
.
click
(
)
;
if
(
cleanup
)
{
await
cleanup
(
)
;
}
}
)
(
)
;
}
function
waitForEvent
(
topic
status
=
null
)
{
return
new
Promise
(
resolve
=
>
Services
.
obs
.
addObserver
(
{
observe
(
subject
innerTopic
innerStatus
)
{
if
(
!
status
|
|
status
=
=
innerStatus
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
resolve
(
innerStatus
)
;
}
}
}
topic
)
)
;
}
function
getNotificationButton
(
win
notificationId
button
)
{
let
notification
=
win
.
document
.
getElementById
(
appMenu
-
{
notificationId
}
-
notification
)
;
is
(
notification
.
hidden
false
{
notificationId
}
notification
is
showing
)
;
return
win
.
document
.
getAnonymousElementByAttribute
(
notification
"
anonid
"
button
)
;
}
function
checkWhatsNewLink
(
win
id
url
)
{
let
whatsNewLink
=
win
.
document
.
getElementById
(
id
)
;
is
(
whatsNewLink
.
href
url
|
|
URL_HTTP_UPDATE_SJS
+
"
?
uiURL
=
DETAILS
"
"
What
'
s
new
link
points
to
the
test_details
URL
"
)
;
is
(
whatsNewLink
.
hidden
false
"
What
'
s
new
link
is
not
hidden
.
"
)
;
}
function
setupTestUpdater
(
)
{
return
(
async
function
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
)
)
{
try
{
restoreUpdaterBackup
(
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Attempt
to
restore
the
backed
up
updater
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
await
TestUtils
.
waitForTick
(
)
;
await
setupTestUpdater
(
)
;
return
;
}
await
moveRealUpdater
(
)
;
}
}
)
(
)
;
}
function
moveRealUpdater
(
)
{
return
(
async
function
(
)
{
try
{
let
baseAppDir
=
getAppBaseDir
(
)
;
let
updater
=
baseAppDir
.
clone
(
)
;
updater
.
append
(
FILE_UPDATER_BIN
)
;
updater
.
moveTo
(
baseAppDir
FILE_UPDATER_BIN_BAK
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Attempt
to
move
the
real
updater
out
of
the
way
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
await
TestUtils
.
waitForTick
(
)
;
await
moveRealUpdater
(
)
;
return
;
}
await
copyTestUpdater
(
)
;
}
)
(
)
;
}
function
copyTestUpdater
(
attempt
=
0
)
{
return
(
async
function
(
)
{
try
{
let
baseAppDir
=
getAppBaseDir
(
)
;
let
testUpdaterDir
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
let
relPath
=
REL_PATH_DATA
;
let
pathParts
=
relPath
.
split
(
"
/
"
)
;
for
(
let
i
=
0
;
i
<
pathParts
.
length
;
+
+
i
)
{
testUpdaterDir
.
append
(
pathParts
[
i
]
)
;
}
let
testUpdater
=
testUpdaterDir
.
clone
(
)
;
testUpdater
.
append
(
FILE_UPDATER_BIN
)
;
testUpdater
.
copyToFollowingLinks
(
baseAppDir
FILE_UPDATER_BIN
)
;
}
catch
(
e
)
{
if
(
attempt
<
MAX_UPDATE_COPY_ATTEMPTS
)
{
logTestInfo
(
"
Attempt
to
copy
the
test
updater
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
await
TestUtils
.
waitForTick
(
)
;
await
copyTestUpdater
(
attempt
+
1
)
;
}
}
}
)
(
)
;
}
function
restoreUpdaterBackup
(
)
{
let
baseAppDir
=
getAppBaseDir
(
)
;
let
updater
=
baseAppDir
.
clone
(
)
;
let
updaterBackup
=
baseAppDir
.
clone
(
)
;
updater
.
append
(
FILE_UPDATER_BIN
)
;
updaterBackup
.
append
(
FILE_UPDATER_BIN_BAK
)
;
if
(
updaterBackup
.
exists
(
)
)
{
if
(
updater
.
exists
(
)
)
{
updater
.
remove
(
true
)
;
}
updaterBackup
.
moveTo
(
baseAppDir
FILE_UPDATER_BIN
)
;
}
}
function
finishTestRestoreUpdaterBackup
(
)
{
return
(
async
function
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
)
)
{
try
{
restoreUpdaterBackup
(
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Attempt
to
restore
the
backed
up
updater
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
await
TestUtils
.
waitForTick
(
)
;
await
finishTestRestoreUpdaterBackup
(
)
;
}
}
}
)
(
)
;
}
function
waitForAboutDialog
(
)
{
return
new
Promise
(
resolve
=
>
{
var
listener
=
{
onOpenWindow
:
aXULWindow
=
>
{
debugDump
(
"
About
dialog
shown
.
.
.
"
)
;
Services
.
wm
.
removeListener
(
listener
)
;
async
function
aboutDialogOnLoad
(
)
{
domwindow
.
removeEventListener
(
"
load
"
aboutDialogOnLoad
true
)
;
let
chromeURI
=
"
chrome
:
/
/
browser
/
content
/
aboutDialog
.
xul
"
;
is
(
domwindow
.
document
.
location
.
href
chromeURI
"
About
dialog
appeared
"
)
;
resolve
(
domwindow
)
;
}
var
domwindow
=
aXULWindow
.
docShell
.
domWindow
;
domwindow
.
addEventListener
(
"
load
"
aboutDialogOnLoad
true
)
;
}
onCloseWindow
:
aXULWindow
=
>
{
}
}
;
Services
.
wm
.
addListener
(
listener
)
;
openAboutDialog
(
)
;
}
)
;
}
function
runAboutDialogUpdateTest
(
updateParams
backgroundUpdate
steps
)
{
let
detailsURL
=
URL_HOST
+
"
/
"
;
let
aboutDialog
;
function
processAboutDialogStep
(
step
)
{
if
(
typeof
(
step
)
=
=
"
function
"
)
{
return
step
(
)
;
}
const
{
panelId
checkActiveUpdate
continueFile
}
=
step
;
return
(
async
function
(
)
{
let
updateDeck
=
aboutDialog
.
document
.
getElementById
(
"
updateDeck
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
(
updateDeck
.
selectedPanel
&
&
updateDeck
.
selectedPanel
.
id
=
=
panelId
)
"
Waiting
for
expected
panel
ID
-
got
:
\
"
"
+
updateDeck
.
selectedPanel
.
id
+
"
\
"
expected
\
"
"
+
panelId
+
"
\
"
"
)
;
let
selectedPanel
=
updateDeck
.
selectedPanel
;
is
(
selectedPanel
.
id
panelId
"
The
panel
ID
should
equal
"
+
panelId
)
;
if
(
checkActiveUpdate
)
{
ok
(
!
!
gUpdateManager
.
activeUpdate
"
There
should
be
an
active
update
"
)
;
is
(
gUpdateManager
.
activeUpdate
.
state
checkActiveUpdate
.
state
"
The
active
update
state
should
equal
"
+
checkActiveUpdate
.
state
)
;
}
else
{
ok
(
!
gUpdateManager
.
activeUpdate
"
There
should
not
be
an
active
update
"
)
;
}
if
(
continueFile
)
{
await
continueFileHandler
(
continueFile
)
;
}
let
linkPanels
=
[
"
downloadFailed
"
"
manualUpdate
"
"
unsupportedSystem
"
]
;
if
(
linkPanels
.
includes
(
panelId
)
)
{
let
link
=
selectedPanel
.
querySelector
(
"
label
.
text
-
link
"
)
;
is
(
link
.
href
detailsURL
"
The
panel
'
s
link
href
should
equal
the
expected
value
"
)
;
}
let
buttonPanels
=
[
"
downloadAndInstall
"
"
apply
"
]
;
if
(
buttonPanels
.
includes
(
panelId
)
)
{
let
buttonEl
=
selectedPanel
.
querySelector
(
"
button
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
(
aboutDialog
.
document
.
activeElement
=
=
buttonEl
)
"
The
button
should
receive
focus
"
)
;
ok
(
!
buttonEl
.
disabled
"
The
button
should
be
enabled
"
)
;
if
(
panelId
!
=
"
apply
"
)
{
buttonEl
.
click
(
)
;
}
}
}
)
(
)
;
}
return
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_SERVICE_ENABLED
false
]
[
PREF_APP_UPDATE_DISABLEDFORTESTING
false
]
[
PREF_APP_UPDATE_URL_MANUAL
detailsURL
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
gEnv
.
set
(
"
MOZ_TEST_SLOW_SKIP_UPDATE_STAGE
"
"
"
)
;
UpdateListener
.
reset
(
)
;
cleanUpUpdates
(
)
;
}
)
;
gEnv
.
set
(
"
MOZ_TEST_SLOW_SKIP_UPDATE_STAGE
"
"
1
"
)
;
setUpdateTimerPrefs
(
)
;
removeUpdateDirsAndFiles
(
)
;
await
setupTestUpdater
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
finishTestRestoreUpdaterBackup
(
)
;
}
)
;
let
updateURL
=
URL_HTTP_UPDATE_SJS
+
"
?
detailsURL
=
"
+
detailsURL
+
updateParams
+
getVersionParams
(
)
;
if
(
backgroundUpdate
)
{
setUpdateURL
(
updateURL
)
;
if
(
Services
.
prefs
.
getBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
)
)
{
continueFileHandler
(
CONTINUE_STAGING
)
;
}
gAUS
.
checkForBackgroundUpdates
(
)
;
await
waitForEvent
(
"
update
-
downloaded
"
)
;
}
else
{
updateURL
+
=
"
&
slowUpdateCheck
=
1
&
useSlowDownloadMar
=
1
"
;
setUpdateURL
(
updateURL
)
;
}
aboutDialog
=
await
waitForAboutDialog
(
)
;
registerCleanupFunction
(
(
)
=
>
{
aboutDialog
.
close
(
)
;
}
)
;
for
(
let
step
of
steps
)
{
await
processAboutDialogStep
(
step
)
;
}
}
)
(
)
;
}
function
runAboutPrefsUpdateTest
(
updateParams
backgroundUpdate
steps
)
{
let
detailsURL
=
URL_HOST
+
"
/
"
;
let
tab
;
function
processAboutPrefsStep
(
step
)
{
if
(
typeof
(
step
)
=
=
"
function
"
)
{
return
step
(
)
;
}
const
{
panelId
checkActiveUpdate
continueFile
}
=
step
;
return
(
async
function
(
)
{
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
panelId
}
async
(
{
panelId
}
)
=
>
{
let
updateDeck
=
content
.
document
.
getElementById
(
"
updateDeck
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
(
updateDeck
.
selectedPanel
&
&
updateDeck
.
selectedPanel
.
id
=
=
panelId
)
"
Waiting
for
expected
panel
ID
-
got
:
\
"
"
+
updateDeck
.
selectedPanel
.
id
+
"
\
"
expected
\
"
"
+
panelId
+
"
\
"
"
)
;
is
(
updateDeck
.
selectedPanel
.
id
panelId
"
The
panel
ID
should
equal
"
+
panelId
)
;
}
)
;
if
(
checkActiveUpdate
)
{
ok
(
!
!
gUpdateManager
.
activeUpdate
"
There
should
be
an
active
update
"
)
;
is
(
gUpdateManager
.
activeUpdate
.
state
checkActiveUpdate
.
state
"
The
active
update
state
should
equal
"
+
checkActiveUpdate
.
state
)
;
}
else
{
ok
(
!
gUpdateManager
.
activeUpdate
"
There
should
not
be
an
active
update
"
)
;
}
if
(
continueFile
)
{
await
continueFileHandler
(
continueFile
)
;
}
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
panelId
detailsURL
}
async
(
{
panelId
detailsURL
}
)
=
>
{
let
linkPanels
=
[
"
downloadFailed
"
"
manualUpdate
"
"
unsupportedSystem
"
]
;
if
(
linkPanels
.
includes
(
panelId
)
)
{
let
selectedPanel
=
content
.
document
.
getElementById
(
"
updateDeck
"
)
.
selectedPanel
;
let
selector
=
"
label
.
text
-
link
"
;
if
(
selectedPanel
.
id
=
=
"
downloadFailed
"
)
{
selector
=
"
a
.
text
-
link
"
;
}
let
link
=
selectedPanel
.
querySelector
(
selector
)
;
is
(
link
.
href
detailsURL
"
The
panel
'
s
link
href
should
equal
the
expected
value
"
)
;
}
let
buttonPanels
=
[
"
downloadAndInstall
"
"
apply
"
]
;
if
(
buttonPanels
.
includes
(
panelId
)
)
{
let
selectedPanel
=
content
.
document
.
getElementById
(
"
updateDeck
"
)
.
selectedPanel
;
let
buttonEl
=
selectedPanel
.
querySelector
(
"
button
"
)
;
ok
(
!
buttonEl
.
disabled
"
The
button
should
be
enabled
"
)
;
if
(
selectedPanel
.
id
!
=
"
apply
"
)
{
buttonEl
.
click
(
)
;
}
}
}
)
;
}
)
(
)
;
}
return
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_SERVICE_ENABLED
false
]
[
PREF_APP_UPDATE_DISABLEDFORTESTING
false
]
[
PREF_APP_UPDATE_URL_MANUAL
detailsURL
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
gEnv
.
set
(
"
MOZ_TEST_SLOW_SKIP_UPDATE_STAGE
"
"
"
)
;
UpdateListener
.
reset
(
)
;
cleanUpUpdates
(
)
;
}
)
;
gEnv
.
set
(
"
MOZ_TEST_SLOW_SKIP_UPDATE_STAGE
"
"
1
"
)
;
setUpdateTimerPrefs
(
)
;
removeUpdateDirsAndFiles
(
)
;
await
setupTestUpdater
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
finishTestRestoreUpdaterBackup
(
)
;
}
)
;
let
updateURL
=
URL_HTTP_UPDATE_SJS
+
"
?
detailsURL
=
"
+
detailsURL
+
updateParams
+
getVersionParams
(
)
;
if
(
backgroundUpdate
)
{
setUpdateURL
(
updateURL
)
;
if
(
Services
.
prefs
.
getBoolPref
(
PREF_APP_UPDATE_STAGING_ENABLED
)
)
{
continueFileHandler
(
CONTINUE_STAGING
)
;
}
gAUS
.
checkForBackgroundUpdates
(
)
;
await
waitForEvent
(
"
update
-
downloaded
"
)
;
}
else
{
updateURL
+
=
"
&
slowUpdateCheck
=
1
&
useSlowDownloadMar
=
1
"
;
setUpdateURL
(
updateURL
)
;
}
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
for
(
let
step
of
steps
)
{
await
processAboutPrefsStep
(
step
)
;
}
}
)
(
)
;
}
