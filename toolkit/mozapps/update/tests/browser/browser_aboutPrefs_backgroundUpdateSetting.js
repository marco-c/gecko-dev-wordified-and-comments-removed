"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
UpdateUtils
"
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
const
ENABLE_UI_PREF
=
"
app
.
update
.
background
.
scheduling
.
enabled
"
;
const
BACKGROUND_UPDATE_PREF
=
"
app
.
update
.
background
.
enabled
"
;
add_task
(
async
function
testBackgroundUpdateSettingUI
(
)
{
if
(
!
AppConstants
.
MOZ_UPDATE_AGENT
)
{
logTestInfo
(
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
WARNING
!
This
test
involves
background
update
but
background
tasks
are
disabled
.
This
test
will
unconditionally
pass
since
the
feature
it
wants
to
test
isn
'
t
available
.
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
)
;
ok
(
true
"
Unconditionally
passing
test
"
)
;
return
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
"
)
;
const
originalBackgroundUpdateVal
=
await
UpdateUtils
.
readUpdateConfigSetting
(
BACKGROUND_UPDATE_PREF
)
;
const
originalUpdateAutoVal
=
await
UpdateUtils
.
getAppUpdateAutoEnabled
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
prefs
.
clearUserPref
(
ENABLE_UI_PREF
)
;
await
UpdateUtils
.
writeUpdateConfigSetting
(
BACKGROUND_UPDATE_PREF
originalBackgroundUpdateVal
)
;
await
UpdateUtils
.
setAppUpdateAutoEnabled
(
originalUpdateAutoVal
)
;
}
)
;
let
defaultValue
=
AppConstants
.
NIGHTLY_BUILD
&
&
AppConstants
.
platform
=
=
"
win
"
;
is
(
Services
.
prefs
.
getBoolPref
(
ENABLE_UI_PREF
false
)
defaultValue
{
ENABLE_UI_PREF
}
should
default
to
{
defaultValue
}
.
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
defaultValue
]
defaultValue
=
>
{
is
(
content
.
document
.
getElementById
(
"
backgroundUpdate
"
)
.
hidden
!
defaultValue
The
background
update
UI
should
be
{
defaultValue
?
"
shown
"
:
"
hidden
"
}
when
app
.
update
.
scheduling
.
enabled
is
{
defaultValue
}
.
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
ENABLE_UI_PREF
true
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
"
)
;
await
UpdateUtils
.
setAppUpdateAutoEnabled
(
false
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
UpdateUtils
.
PER_INSTALLATION_PREFS_SUPPORTED
]
async
perInstallationPrefsSupported
=
>
{
let
backgroundUpdateCheckbox
=
content
.
document
.
getElementById
(
"
backgroundUpdate
"
)
;
is
(
backgroundUpdateCheckbox
.
hidden
!
perInstallationPrefsSupported
The
background
update
UI
should
{
perInstallationPrefsSupported
?
"
not
"
:
"
"
}
be
hidden
when
app
.
update
.
background
.
scheduling
.
enabled
is
true
+
and
perInstallationPrefsSupported
is
{
perInstallationPrefsSupported
}
)
;
if
(
perInstallationPrefsSupported
)
{
is
(
backgroundUpdateCheckbox
.
disabled
true
The
background
update
UI
should
be
disabled
when
auto
update
is
+
disabled
)
;
}
}
)
;
if
(
!
UpdateUtils
.
PER_INSTALLATION_PREFS_SUPPORTED
)
{
return
;
}
await
UpdateUtils
.
setAppUpdateAutoEnabled
(
true
)
;
await
UpdateUtils
.
writeUpdateConfigSetting
(
BACKGROUND_UPDATE_PREF
true
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
let
backgroundUpdateCheckbox
=
content
.
document
.
getElementById
(
"
backgroundUpdate
"
)
;
is
(
backgroundUpdateCheckbox
.
disabled
false
The
background
update
UI
should
not
be
disabled
when
auto
update
is
+
enabled
)
;
is
(
backgroundUpdateCheckbox
.
checked
true
"
After
enabling
background
update
the
checkbox
should
be
checked
"
)
;
backgroundUpdateCheckbox
.
click
(
)
;
}
)
;
is
(
await
UpdateUtils
.
readUpdateConfigSetting
(
BACKGROUND_UPDATE_PREF
)
false
"
Toggling
the
checkbox
should
have
changed
the
setting
value
to
false
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
let
backgroundUpdateCheckbox
=
content
.
document
.
getElementById
(
"
backgroundUpdate
"
)
;
is
(
backgroundUpdateCheckbox
.
checked
false
"
After
toggling
the
checked
checkbox
it
should
be
unchecked
.
"
)
;
backgroundUpdateCheckbox
.
click
(
)
;
}
)
;
is
(
await
UpdateUtils
.
readUpdateConfigSetting
(
BACKGROUND_UPDATE_PREF
)
true
"
Toggling
the
checkbox
should
have
changed
the
setting
value
to
true
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
is
(
content
.
document
.
getElementById
(
"
backgroundUpdate
"
)
.
checked
true
"
After
toggling
the
unchecked
checkbox
it
should
be
checked
"
)
;
}
)
;
await
UpdateUtils
.
writeUpdateConfigSetting
(
BACKGROUND_UPDATE_PREF
false
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
is
(
content
.
document
.
getElementById
(
"
backgroundUpdate
"
)
.
checked
false
"
Externally
disabling
background
update
should
uncheck
the
checkbox
"
)
;
}
)
;
await
UpdateUtils
.
writeUpdateConfigSetting
(
BACKGROUND_UPDATE_PREF
true
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
is
(
content
.
document
.
getElementById
(
"
backgroundUpdate
"
)
.
checked
true
"
Externally
enabling
background
update
should
check
the
checkbox
"
)
;
}
)
;
}
)
;
