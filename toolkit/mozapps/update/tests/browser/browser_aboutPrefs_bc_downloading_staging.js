"
use
strict
"
;
add_task
(
async
function
aboutPrefs_backgroundCheck_downloading_staging
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_STAGING_ENABLED
true
]
]
}
)
;
let
downloadInfo
=
[
]
;
if
(
Services
.
prefs
.
getBoolPref
(
PREF_APP_UPDATE_BITS_ENABLED
)
)
{
downloadInfo
[
0
]
=
{
patchType
:
"
partial
"
bitsResult
:
"
0
"
}
;
}
else
{
downloadInfo
[
0
]
=
{
patchType
:
"
partial
"
internalResult
:
"
0
"
}
;
}
let
lankpackCall
=
mockLangpackInstall
(
)
;
let
params
=
{
queryString
:
"
&
useSlowDownloadMar
=
1
&
invalidCompleteSize
=
1
"
backgroundUpdate
:
true
waitForUpdateState
:
STATE_DOWNLOADING
}
;
await
runAboutPrefsUpdateTest
(
params
[
{
panelId
:
"
downloading
"
checkActiveUpdate
:
{
state
:
STATE_DOWNLOADING
}
continueFile
:
CONTINUE_DOWNLOAD
downloadInfo
}
{
panelId
:
"
applying
"
checkActiveUpdate
:
{
state
:
STATE_PENDING
}
continueFile
:
CONTINUE_STAGING
}
async
tab
=
>
{
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
readStatusFile
(
)
=
=
STATE_APPLIED
;
}
)
;
let
updateDeckId
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
return
content
.
gAppUpdater
.
selectedPanel
.
id
;
}
)
;
is
(
updateDeckId
"
applying
"
"
UI
should
still
show
as
applying
.
"
)
;
let
{
appVersion
resolve
}
=
await
lankpackCall
;
is
(
appVersion
Services
.
appinfo
.
version
"
Should
see
the
right
app
version
.
"
)
;
resolve
(
)
;
}
{
panelId
:
"
apply
"
checkActiveUpdate
:
{
state
:
STATE_APPLIED
}
continueFile
:
null
}
]
)
;
}
)
;
