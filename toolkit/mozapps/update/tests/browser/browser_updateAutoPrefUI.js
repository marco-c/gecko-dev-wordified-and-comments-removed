ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
this
)
;
async
function
changeAndVerifyPref
(
tab
newConfigValue
)
{
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
newConfigValue
}
async
function
(
{
newConfigValue
}
)
{
let
radioId
=
newConfigValue
?
"
autoDesktop
"
:
"
manualDesktop
"
;
let
radioElement
=
content
.
document
.
getElementById
(
radioId
)
;
radioElement
.
click
(
)
;
}
)
;
let
configValueRead
=
await
gAUS
.
getAutoUpdateIsEnabled
(
)
;
is
(
configValueRead
newConfigValue
"
Value
returned
should
have
matched
the
expected
value
"
)
;
let
configFile
=
getUpdateConfigFile
(
)
;
let
decoder
=
new
TextDecoder
(
)
;
let
fileContents
=
await
OS
.
File
.
read
(
configFile
.
path
)
;
let
saveObject
=
JSON
.
parse
(
decoder
.
decode
(
fileContents
)
)
;
is
(
saveObject
[
"
app
.
update
.
auto
"
]
newConfigValue
"
Value
in
file
should
match
expected
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
newConfigValue
}
async
function
(
{
newConfigValue
}
)
{
let
updateRadioGroup
=
content
.
document
.
getElementById
(
"
updateRadioGroup
"
)
;
is
(
updateRadioGroup
.
value
{
newConfigValue
}
"
Update
preference
should
match
expected
"
)
;
}
)
;
}
add_task
(
async
function
testUpdateAutoPrefUI
(
)
{
let
originalPrefValue
=
await
gAUS
.
getAutoUpdateIsEnabled
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
"
)
;
await
changeAndVerifyPref
(
tab
true
)
;
await
changeAndVerifyPref
(
tab
false
)
;
await
changeAndVerifyPref
(
tab
false
)
;
await
changeAndVerifyPref
(
tab
true
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
await
gAUS
.
setAutoUpdateIsEnabled
(
originalPrefValue
)
;
}
)
;
