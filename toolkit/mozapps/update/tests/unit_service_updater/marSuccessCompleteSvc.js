function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
preventDistributionFiles
(
)
;
setupDistributionDir
(
)
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
true
)
;
}
function
setupUpdaterTestFinished
(
)
{
runUpdate
(
STATE_SUCCEEDED
false
0
true
)
;
}
function
runUpdateFinished
(
)
{
checkPostUpdateAppLog
(
)
;
}
function
checkPostUpdateAppLogFinished
(
)
{
checkAppBundleModTime
(
)
;
standardInit
(
)
;
checkPostUpdateRunningFile
(
true
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
)
;
checkUpdateLogContents
(
LOG_COMPLETE_SUCCESS
false
false
true
)
;
checkDistributionDir
(
)
;
checkCallbackLog
(
)
;
}
function
setupDistributionDir
(
)
{
if
(
IS_MACOSX
)
{
let
testFile
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
/
testFile
"
true
)
;
writeFile
(
testFile
"
test
\
n
"
)
;
testFile
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
/
test
/
testFile
"
true
)
;
writeFile
(
testFile
"
test
\
n
"
)
;
}
}
function
checkDistributionDir
(
)
{
let
distributionDir
=
getApplyDirFile
(
DIR_RESOURCES
+
"
distribution
"
true
)
;
if
(
IS_MACOSX
)
{
Assert
.
ok
(
distributionDir
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
distributionDir
.
path
)
)
;
let
testFile
=
getApplyDirFile
(
DIR_RESOURCES
+
"
distribution
/
testFile
"
true
)
;
Assert
.
ok
(
testFile
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
testFile
.
path
)
)
;
testFile
=
getApplyDirFile
(
DIR_RESOURCES
+
"
distribution
/
test
/
testFile
"
true
)
;
Assert
.
ok
(
testFile
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
testFile
.
path
)
)
;
distributionDir
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
"
true
)
;
Assert
.
ok
(
!
distributionDir
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
distributionDir
.
path
)
)
;
checkUpdateLogContains
(
MOVE_OLD_DIST_DIR
)
;
}
else
{
debugDump
(
"
testing
that
files
aren
'
t
added
with
an
add
-
if
instruction
"
+
"
when
the
file
'
s
destination
directory
doesn
'
t
exist
"
)
;
Assert
.
ok
(
!
distributionDir
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
distributionDir
.
path
)
)
;
}
}
