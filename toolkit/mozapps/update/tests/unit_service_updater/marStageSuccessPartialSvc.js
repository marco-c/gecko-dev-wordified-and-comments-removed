const
STATE_AFTER_STAGE
=
IS_SERVICE_TEST
?
STATE_APPLIED_SVC
:
STATE_APPLIED
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesPartialSuccess
;
gTestFiles
[
gTestFiles
.
length
-
2
]
.
originalContents
=
null
;
gTestFiles
[
gTestFiles
.
length
-
2
]
.
compareContents
=
"
FromPartial
\
n
"
;
gTestFiles
[
gTestFiles
.
length
-
2
]
.
comparePerms
=
0o644
;
gTestDirs
=
gTestDirsPartialSuccess
;
preventDistributionFiles
(
)
;
setupDistributionDir
(
)
;
setupUpdaterTest
(
FILE_PARTIAL_MAR
true
)
;
}
function
setupUpdaterTestFinished
(
)
{
stageUpdate
(
)
;
}
function
stageUpdateFinished
(
)
{
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getStageDirFile
true
)
;
checkUpdateLogContents
(
LOG_PARTIAL_SUCCESS_STAGE
true
false
true
)
;
runUpdate
(
STATE_SUCCEEDED
true
0
false
)
;
}
function
runUpdateFinished
(
)
{
checkPostUpdateAppLog
(
)
;
}
function
checkPostUpdateAppLogFinished
(
)
{
checkAppBundleModTime
(
)
;
standardInit
(
)
;
Assert
.
equal
(
readStatusState
(
)
STATE_NONE
"
the
status
file
state
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
ok
(
!
gUpdateManager
.
activeUpdate
"
the
active
update
should
not
be
defined
"
)
;
Assert
.
equal
(
gUpdateManager
.
updateCount
1
"
the
update
manager
updateCount
attribute
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
getUpdateAt
(
0
)
.
state
STATE_SUCCEEDED
"
the
update
state
"
+
MSG_SHOULD_EQUAL
)
;
checkPostUpdateRunningFile
(
true
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
false
true
)
;
checkUpdateLogContents
(
LOG_REPLACE_SUCCESS
false
true
true
)
;
checkDistributionDir
(
)
;
checkCallbackLog
(
)
;
}
function
setupDistributionDir
(
)
{
if
(
IS_MACOSX
)
{
let
testFile
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
/
testFile
"
true
)
;
writeFile
(
testFile
"
test
\
n
"
)
;
testFile
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
/
test
/
testFile
"
true
)
;
writeFile
(
testFile
"
test
\
n
"
)
;
}
}
function
checkDistributionDir
(
)
{
let
distributionDir
=
getApplyDirFile
(
DIR_RESOURCES
+
"
distribution
"
true
)
;
if
(
IS_MACOSX
)
{
Assert
.
ok
(
distributionDir
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
distributionDir
.
path
)
)
;
let
testFile
=
getApplyDirFile
(
DIR_RESOURCES
+
"
distribution
/
testFile
"
true
)
;
Assert
.
ok
(
testFile
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
testFile
.
path
)
)
;
testFile
=
getApplyDirFile
(
DIR_RESOURCES
+
"
distribution
/
test
/
testFile
"
true
)
;
Assert
.
ok
(
testFile
.
exists
(
)
MSG_SHOULD_EXIST
+
getMsgPath
(
testFile
.
path
)
)
;
distributionDir
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
"
true
)
;
Assert
.
ok
(
!
distributionDir
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
distributionDir
.
path
)
)
;
checkUpdateLogContains
(
MOVE_OLD_DIST_DIR
)
;
}
else
{
debugDump
(
"
testing
that
files
aren
'
t
added
with
an
add
-
if
instruction
"
+
"
when
the
file
'
s
destination
directory
doesn
'
t
exist
"
)
;
Assert
.
ok
(
!
distributionDir
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
distributionDir
.
path
)
)
;
}
}
