const
STATE_AFTER_STAGE
=
IS_SERVICE_TEST
?
STATE_APPLIED_SVC
:
STATE_APPLIED
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
gCallbackBinFile
=
"
exe0
.
exe
"
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
false
)
;
}
function
setupUpdaterTestFinished
(
)
{
stageUpdate
(
true
)
;
}
function
stageUpdateFinished
(
)
{
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getStageDirFile
true
)
;
checkUpdateLogContents
(
LOG_COMPLETE_SUCCESS
true
)
;
runUpdate
(
STATE_SUCCEEDED
true
0
true
)
;
}
function
runUpdateFinished
(
)
{
checkPostUpdateAppLog
(
)
;
}
function
checkPostUpdateAppLogFinished
(
)
{
standardInit
(
)
;
Assert
.
equal
(
readStatusState
(
)
STATE_NONE
"
the
status
file
state
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
ok
(
!
gUpdateManager
.
activeUpdate
"
the
active
update
should
not
be
defined
"
)
;
Assert
.
equal
(
gUpdateManager
.
updateCount
1
"
the
update
manager
updateCount
attribute
"
+
MSG_SHOULD_EQUAL
)
;
Assert
.
equal
(
gUpdateManager
.
getUpdateAt
(
0
)
.
state
STATE_SUCCEEDED
"
the
update
state
"
+
MSG_SHOULD_EQUAL
)
;
checkPostUpdateRunningFile
(
true
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
false
true
)
;
checkUpdateLogContents
(
LOG_REPLACE_SUCCESS
false
true
)
;
checkCallbackLog
(
)
;
}
