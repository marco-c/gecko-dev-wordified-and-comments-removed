const
STATE_AFTER_STAGE
=
IS_SERVICE_TEST
?
STATE_APPLIED_SVC
:
STATE_APPLIED
;
const
STATE_AFTER_RUNUPDATE
=
IS_SERVICE_TEST
?
STATE_PENDING_SVC
:
STATE_PENDING
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesPartialSuccess
;
gTestDirs
=
gTestDirsPartialSuccess
;
setupUpdaterTest
(
FILE_PARTIAL_MAR
false
)
;
}
function
setupUpdaterTestFinished
(
)
{
runHelperFileInUse
(
gTestFiles
[
11
]
.
relPathDir
+
gTestFiles
[
11
]
.
fileName
false
)
;
}
function
waitForHelperSleepFinished
(
)
{
stageUpdate
(
true
)
;
}
function
stageUpdateFinished
(
)
{
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getStageDirFile
true
)
;
checkUpdateLogContents
(
LOG_PARTIAL_SUCCESS
true
)
;
runUpdate
(
STATE_AFTER_RUNUPDATE
true
1
true
)
;
}
function
runUpdateFinished
(
)
{
waitForHelperExit
(
)
;
}
async
function
waitForHelperExitFinished
(
)
{
standardInit
(
)
;
checkPostUpdateRunningFile
(
false
)
;
setTestFilesAndDirsForFailure
(
)
;
checkFilesAfterUpdateFailure
(
getApplyDirFile
)
;
checkUpdateLogContains
(
ERR_RENAME_FILE
)
;
checkUpdateLogContains
(
ERR_MOVE_DESTDIR_7
+
"
\
n
"
+
STATE_FAILED_WRITE_ERROR
+
"
\
n
"
+
CALL_QUIT
)
;
await
waitForUpdateXMLFiles
(
)
;
checkUpdateManager
(
STATE_NONE
false
STATE_AFTER_RUNUPDATE
0
1
)
;
checkCallbackLog
(
)
;
}
