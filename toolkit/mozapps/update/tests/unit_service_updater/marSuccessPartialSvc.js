function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesPartialSuccess
;
gTestFiles
[
gTestFiles
.
length
-
1
]
.
originalContents
=
null
;
gTestFiles
[
gTestFiles
.
length
-
1
]
.
compareContents
=
"
FromPartial
\
n
"
;
gTestFiles
[
gTestFiles
.
length
-
1
]
.
comparePerms
=
0o644
;
gTestFiles
[
gTestFiles
.
length
-
2
]
.
originalContents
=
null
;
gTestFiles
[
gTestFiles
.
length
-
2
]
.
compareContents
=
"
FromPartial
\
n
"
;
gTestFiles
[
gTestFiles
.
length
-
2
]
.
comparePerms
=
0o644
;
gTestDirs
=
gTestDirsPartialSuccess
;
setupDistributionDir
(
)
;
setupUpdaterTest
(
FILE_PARTIAL_MAR
false
"
test
/
.
.
/
"
)
;
}
function
setupUpdaterTestFinished
(
)
{
runUpdate
(
STATE_SUCCEEDED
false
0
true
)
;
}
function
runUpdateFinished
(
)
{
checkAppBundleModTime
(
)
;
standardInit
(
)
;
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateSuccess
(
getApplyDirFile
)
;
checkUpdateLogContents
(
LOG_PARTIAL_SUCCESS
)
;
checkDistributionDir
(
)
;
do_execute_soon
(
waitForUpdateXMLFiles
)
;
}
function
waitForUpdateXMLFilesFinished
(
)
{
checkUpdateManager
(
STATE_NONE
false
STATE_SUCCEEDED
0
1
)
;
checkCallbackLog
(
)
;
}
function
setupDistributionDir
(
)
{
if
(
IS_MACOSX
)
{
let
testFile
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
/
testFile
"
true
)
;
writeFile
(
testFile
"
test
\
n
"
)
;
testFile
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
/
test
/
testFile
"
true
)
;
writeFile
(
testFile
"
test
\
n
"
)
;
}
}
function
checkDistributionDir
(
)
{
if
(
IS_MACOSX
)
{
let
distributionDir
=
getApplyDirFile
(
DIR_MACOS
+
"
distribution
"
true
)
;
Assert
.
ok
(
!
distributionDir
.
exists
(
)
MSG_SHOULD_NOT_EXIST
+
getMsgPath
(
distributionDir
.
path
)
)
;
checkUpdateLogContains
(
REMOVE_OLD_DIST_DIR
)
;
}
}
