const
STATE_AFTER_RUNUPDATE_BASE
=
STATE_FAILED_INVALID_INSTALL_DIR_PATH_ERROR
;
const
STATE_AFTER_RUNUPDATE_SERVICE
=
AppConstants
.
EARLY_BETA_OR_EARLIER
?
STATE_PENDING_SVC
:
STATE_FAILED_SERVICE_INVALID_INSTALL_DIR_PATH_ERROR
;
const
STATE_AFTER_RUNUPDATE
=
IS_SERVICE_TEST
?
STATE_AFTER_RUNUPDATE_SERVICE
:
STATE_AFTER_RUNUPDATE_BASE
;
function
run_test
(
)
{
if
(
!
setupTestCommon
(
)
)
{
return
;
}
gTestFiles
=
gTestFilesCompleteSuccess
;
gTestDirs
=
gTestDirsCompleteSuccess
;
setTestFilesAndDirsForFailure
(
)
;
setupUpdaterTest
(
FILE_COMPLETE_MAR
false
)
;
}
async
function
setupUpdaterTestFinished
(
)
{
let
path
=
"
123456789
"
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
path
=
"
\
\
"
+
path
;
path
=
path
.
repeat
(
30
)
;
path
=
"
C
:
"
+
path
;
}
else
{
path
=
"
/
"
+
path
;
path
=
path
.
repeat
(
1000
)
;
}
runUpdate
(
STATE_AFTER_RUNUPDATE
false
1
true
null
path
null
null
)
;
standardInit
(
)
;
checkPostUpdateRunningFile
(
false
)
;
checkFilesAfterUpdateFailure
(
getApplyDirFile
)
;
await
waitForUpdateXMLFiles
(
)
;
if
(
IS_SERVICE_TEST
)
{
if
(
AppConstants
.
EARLY_BETA_OR_EARLIER
)
{
checkUpdateManager
(
STATE_NONE
false
STATE_PENDING_SVC
0
1
)
;
}
else
{
checkUpdateManager
(
STATE_NONE
false
STATE_FAILED
SERVICE_INVALID_INSTALL_DIR_PATH_ERROR
1
)
;
}
}
else
{
checkUpdateManager
(
STATE_NONE
false
STATE_FAILED
INVALID_INSTALL_DIR_PATH_ERROR
1
)
;
}
waitForFilesInUse
(
)
;
}
