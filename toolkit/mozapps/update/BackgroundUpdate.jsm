"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BackgroundUpdate
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UpdateUtils
:
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
let
consoleOptions
=
{
maxLogLevel
:
"
error
"
maxLogLevelPref
:
"
app
.
update
.
background
.
loglevel
"
prefix
:
"
BackgroundUpdate
"
}
;
return
new
ConsoleAPI
(
consoleOptions
)
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
ProfileService
"
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
"
nsIToolkitProfileService
"
)
;
var
BackgroundUpdate
=
{
_initialized
:
false
get
taskId
(
)
{
let
taskId
=
"
backgroundupdate
"
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
taskId
=
{
AppConstants
.
MOZ_APP_DISPLAYNAME_DO_NOT_USE
}
Background
Update
;
}
return
taskId
;
}
async
_hasOmnijar
(
)
{
const
appOmniJar
=
FileUtils
.
getFile
(
"
XCurProcD
"
[
AppConstants
.
OMNIJAR_NAME
]
)
;
const
greOmniJar
=
FileUtils
.
getFile
(
"
GreD
"
[
AppConstants
.
OMNIJAR_NAME
]
)
;
let
bothExist
=
(
await
IOUtils
.
exists
(
appOmniJar
.
path
)
)
&
&
(
await
IOUtils
.
exists
(
greOmniJar
.
path
)
)
;
return
bothExist
;
}
_force
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
app
.
update
.
background
.
force
"
false
)
;
}
_currentProfileIsDefaultProfile
(
)
{
let
defaultProfile
;
try
{
defaultProfile
=
ProfileService
.
defaultProfile
;
}
catch
(
e
)
{
}
let
currentProfile
=
ProfileService
.
currentProfile
;
let
isDefaultProfile
=
defaultProfile
&
&
currentProfile
=
=
defaultProfile
;
return
isDefaultProfile
;
}
async
_reasonsToNotUpdateInstallation
(
)
{
let
SLUG
=
"
_reasonsToNotUpdateInstallation
"
;
let
reasons
=
[
]
;
log
.
debug
(
{
SLUG
}
:
checking
app
.
update
.
auto
)
;
let
updateAuto
=
await
UpdateUtils
.
getAppUpdateAutoEnabled
(
)
;
if
(
!
updateAuto
)
{
reasons
.
push
(
this
.
REASON
.
NO_APP_UPDATE_AUTO
)
;
}
log
.
debug
(
{
SLUG
}
:
checking
app
.
update
.
background
.
enabled
)
;
let
updateBackground
=
await
UpdateUtils
.
readUpdateConfigSetting
(
"
app
.
update
.
background
.
enabled
"
)
;
if
(
!
updateBackground
)
{
reasons
.
push
(
this
.
REASON
.
NO_APP_UPDATE_BACKGROUND_ENABLED
)
;
}
const
bts
=
"
mozilla
.
org
/
backgroundtasks
;
1
"
in
Cc
&
&
Cc
[
"
mozilla
.
org
/
backgroundtasks
;
1
"
]
.
getService
(
Ci
.
nsIBackgroundTasks
)
;
log
.
debug
(
{
SLUG
}
:
checking
for
MOZ_BACKGROUNDTASKS
)
;
if
(
!
AppConstants
.
MOZ_BACKGROUNDTASKS
|
|
!
bts
)
{
reasons
.
push
(
this
.
REASON
.
NO_MOZ_BACKGROUNDTASKS
)
;
}
let
updateService
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
service
;
1
"
]
.
getService
(
Ci
.
nsIApplicationUpdateService
)
;
log
.
debug
(
{
SLUG
}
:
checking
that
updates
are
not
disabled
by
policy
testing
+
configuration
or
abnormal
runtime
environment
)
;
if
(
!
updateService
.
canUsuallyCheckForUpdates
)
{
reasons
.
push
(
this
.
REASON
.
CANNOT_USUALLY_CHECK
)
;
}
log
.
debug
(
{
SLUG
}
:
checking
that
we
can
make
progress
:
updates
can
stage
and
/
or
apply
)
;
if
(
!
updateService
.
canUsuallyStageUpdates
&
&
!
updateService
.
canUsuallyApplyUpdates
)
{
reasons
.
push
(
this
.
REASON
.
CANNOT_USUALLY_STAGE_AND_CANNOT_USUALLY_APPLY
)
;
}
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
if
(
!
updateService
.
canUsuallyUseBits
)
{
reasons
.
push
(
this
.
REASON
.
WINDOWS_CANNOT_USUALLY_USE_BITS
)
;
}
}
log
.
debug
(
{
SLUG
}
:
checking
that
this
installation
has
an
omnijar
)
;
if
(
!
(
await
this
.
_hasOmnijar
(
)
)
)
{
reasons
.
push
(
this
.
REASON
.
NO_OMNIJAR
)
;
}
return
reasons
;
}
}
;
BackgroundUpdate
.
REASON
=
{
CANNOT_USUALLY_CHECK
:
"
cannot
usually
check
for
updates
due
to
policy
testing
configuration
or
runtime
environment
"
CANNOT_USUALLY_STAGE_AND_CANNOT_USUALLY_APPLY
:
"
updates
cannot
usually
stage
and
cannot
usually
apply
"
LANGPACK_INSTALLED
:
"
app
.
update
.
langpack
.
enabled
=
true
and
at
least
one
langpack
is
installed
"
NOT_DEFAULT_PROFILE
:
"
not
default
profile
"
NO_APP_UPDATE_AUTO
:
"
app
.
update
.
auto
=
false
"
NO_APP_UPDATE_BACKGROUND_ENABLED
:
"
app
.
update
.
background
.
enabled
=
false
"
NO_MOZ_BACKGROUNDTASKS
:
"
MOZ_BACKGROUNDTASKS
=
0
"
NO_OMNIJAR
:
"
no
omnijar
"
WINDOWS_CANNOT_USUALLY_USE_BITS
:
"
on
Windows
but
cannot
usually
use
BITS
"
OTHER_INSTANCE
:
"
other
instance
is
running
"
}
;
