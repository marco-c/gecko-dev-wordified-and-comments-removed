"
use
strict
"
;
const
gUpdateElevationDialog
=
{
openUpdateURL
(
event
)
{
if
(
event
.
button
=
=
0
)
{
openURL
(
event
.
target
.
getAttribute
(
"
url
"
)
)
;
}
}
getAUSString
(
key
strings
)
{
if
(
strings
)
{
return
this
.
strings
.
getFormattedString
(
key
strings
)
;
}
return
this
.
strings
.
getString
(
key
)
;
}
_setButton
(
button
string
)
{
var
label
=
this
.
getAUSString
(
string
)
;
if
(
label
.
includes
(
"
%
S
"
)
)
{
label
=
label
.
replace
(
/
%
S
/
this
.
brandName
)
;
}
button
.
label
=
label
;
button
.
setAttribute
(
"
accesskey
"
this
.
getAUSString
(
string
+
"
.
accesskey
"
)
)
;
}
async
onLoad
(
)
{
this
.
strings
=
document
.
getElementById
(
"
updateStrings
"
)
;
this
.
brandName
=
document
.
getElementById
(
"
brandStrings
"
)
.
getString
(
"
brandShortName
"
)
;
let
um
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIUpdateManager
)
;
let
update
=
await
um
.
getReadyUpdate
(
)
;
let
updateFinishedName
=
document
.
getElementById
(
"
updateFinishedName
"
)
;
updateFinishedName
.
value
=
update
.
name
;
let
link
=
document
.
getElementById
(
"
detailsLinkLabel
"
)
;
if
(
update
.
detailsURL
)
{
link
.
setAttribute
(
"
url
"
update
.
detailsURL
)
;
link
.
disabled
=
false
;
}
else
{
link
.
hidden
=
true
;
}
link
.
addEventListener
(
"
click
"
event
=
>
gUpdateElevationDialog
.
openUpdateURL
(
event
)
)
;
let
manualLinkLabel
=
document
.
getElementById
(
"
manualLinkLabel
"
)
;
let
manualURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
update
.
url
.
manual
"
)
;
manualLinkLabel
.
value
=
manualURL
;
manualLinkLabel
.
setAttribute
(
"
url
"
manualURL
)
;
manualLinkLabel
.
addEventListener
(
"
click
"
event
=
>
gUpdateElevationDialog
.
openUpdateURL
(
event
)
)
;
let
buttonElevateExtra2
=
document
.
getElementById
(
"
elevateExtra2
"
)
;
buttonElevateExtra2
.
addEventListener
(
"
command
"
(
)
=
>
gUpdateElevationDialog
.
onRestartLater
(
)
)
;
this
.
_setButton
(
buttonElevateExtra2
"
restartLaterButton
"
)
;
let
buttonElevateExtra1
=
document
.
getElementById
(
"
elevateExtra1
"
)
;
buttonElevateExtra1
.
addEventListener
(
"
command
"
(
)
=
>
gUpdateElevationDialog
.
onNoThanks
(
)
)
;
this
.
_setButton
(
buttonElevateExtra1
"
noThanksButton
"
)
;
let
buttonElevateAccept
=
document
.
getElementById
(
"
elevateAccept
"
)
;
buttonElevateAccept
.
addEventListener
(
"
command
"
(
)
=
>
gUpdateElevationDialog
.
onRestartNow
(
)
)
;
this
.
_setButton
(
buttonElevateAccept
"
restartNowButton
"
)
;
buttonElevateAccept
.
focus
(
)
;
}
onRestartLater
(
)
{
window
.
close
(
)
;
}
async
onNoThanks
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
update
-
canceled
"
)
;
let
um
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIUpdateManager
)
;
let
update
=
await
um
.
getReadyUpdate
(
)
;
um
.
cleanupReadyUpdate
(
)
;
let
aus
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
service
;
1
"
]
.
getService
(
Ci
.
nsIApplicationUpdateService
)
;
if
(
aus
.
elevationRequired
&
&
update
)
{
Services
.
prefs
.
setCharPref
(
"
app
.
update
.
elevate
.
never
"
update
.
appVersion
)
;
}
window
.
close
(
)
;
}
async
onRestartNow
(
)
{
document
.
getElementById
(
"
elevateExtra2
"
)
.
disabled
=
true
;
document
.
getElementById
(
"
elevateExtra1
"
)
.
disabled
=
true
;
document
.
getElementById
(
"
elevateAccept
"
)
.
disabled
=
true
;
let
um
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIUpdateManager
)
;
await
um
.
elevationOptedIn
(
)
;
let
cancelQuit
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelQuit
"
quit
-
application
-
requested
"
"
restart
"
)
;
if
(
cancelQuit
.
data
)
{
return
;
}
if
(
Services
.
appinfo
.
inSafeMode
)
{
Services
.
env
.
set
(
"
MOZ_SAFE_MODE_RESTART
"
"
1
"
)
;
}
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
}
}
;
window
.
addEventListener
(
"
load
"
(
)
=
>
gUpdateElevationDialog
.
onLoad
(
)
)
;
