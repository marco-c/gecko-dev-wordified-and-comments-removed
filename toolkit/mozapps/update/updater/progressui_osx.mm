#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
<
stdio
.
h
>
#
include
<
unistd
.
h
>
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
progressui
.
h
"
#
include
"
readstrings
.
h
"
#
include
"
updatererrors
.
h
"
#
define
TIMER_INTERVAL
0
.
2
static
float
sProgressVal
;
static
BOOL
sQuit
=
NO
;
static
BOOL
sIndeterminate
=
NO
;
MOZ_RUNINIT
static
StringTable
sLabels
;
static
const
char
*
sUpdatePath
;
interface
UpdaterUI
:
NSObject
{
IBOutlet
NSProgressIndicator
*
progressBar
;
IBOutlet
NSTextField
*
progressTextField
;
}
end
implementation
UpdaterUI
-
(
void
)
awakeFromNib
{
NSWindow
*
w
=
[
progressBar
window
]
;
[
w
setTitle
:
[
NSString
stringWithUTF8String
:
sLabels
.
title
.
get
(
)
]
]
;
[
progressTextField
setStringValue
:
[
NSString
stringWithUTF8String
:
sLabels
.
info
.
get
(
)
]
]
;
NSRect
origTextFrame
=
[
progressTextField
frame
]
;
[
progressTextField
sizeToFit
]
;
int
widthAdjust
=
progressTextField
.
frame
.
size
.
width
-
origTextFrame
.
size
.
width
;
if
(
widthAdjust
>
0
)
{
NSRect
f
;
f
.
size
.
width
=
w
.
frame
.
size
.
width
+
widthAdjust
;
f
.
size
.
height
=
w
.
frame
.
size
.
height
;
[
w
setFrame
:
f
display
:
YES
]
;
}
[
w
center
]
;
[
progressBar
setIndeterminate
:
sIndeterminate
]
;
[
progressBar
setDoubleValue
:
0
.
0
]
;
[
[
NSTimer
scheduledTimerWithTimeInterval
:
TIMER_INTERVAL
target
:
self
selector
:
selector
(
updateProgressUI
:
)
userInfo
:
nil
repeats
:
YES
]
retain
]
;
[
NSApp
activateIgnoringOtherApps
:
YES
]
;
}
-
(
void
)
updateProgressUI
:
(
NSTimer
*
)
aTimer
{
if
(
sQuit
)
{
[
aTimer
invalidate
]
;
[
aTimer
release
]
;
[
NSApp
activateIgnoringOtherApps
:
YES
]
;
[
NSApp
hide
:
self
]
;
[
NSApp
stop
:
self
]
;
}
float
progress
=
sProgressVal
;
[
progressBar
setDoubleValue
:
(
double
)
progress
]
;
}
-
(
BOOL
)
applicationShouldTerminate
:
(
NSApplication
*
)
sender
{
return
sQuit
;
}
end
int
InitProgressUI
(
int
*
pargc
char
*
*
*
pargv
)
{
sUpdatePath
=
(
*
pargv
)
[
1
]
;
return
0
;
}
int
ShowProgressUI
(
bool
indeterminate
)
{
if
(
!
sUpdatePath
)
{
return
-
1
;
}
usleep
(
500000
)
;
if
(
sQuit
|
|
sProgressVal
>
70
.
0f
)
{
return
0
;
}
char
path
[
PATH_MAX
]
;
SprintfLiteral
(
path
"
%
s
/
updater
.
ini
"
sUpdatePath
)
;
if
(
ReadStrings
(
path
&
sLabels
)
!
=
OK
)
{
return
-
1
;
}
sIndeterminate
=
indeterminate
;
[
NSApplication
sharedApplication
]
;
[
[
NSBundle
mainBundle
]
loadNibNamed
:
"
MainMenu
"
owner
:
NSApp
topLevelObjects
:
nil
]
;
[
NSApp
run
]
;
return
0
;
}
void
QuitProgressUI
(
)
{
sQuit
=
YES
;
}
void
UpdateProgressUI
(
float
progress
)
{
sProgressVal
=
progress
;
}
