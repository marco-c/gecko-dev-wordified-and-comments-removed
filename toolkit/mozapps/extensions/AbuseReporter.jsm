const
EXPORTED_SYMBOLS
=
[
"
AbuseReporter
"
"
AbuseReportError
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
const
PREF_ABUSE_REPORT_URL
=
"
extensions
.
abuseReport
.
url
"
;
const
MIN_MS_BETWEEN_SUBMITS
=
30000
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
ClientID
:
"
resource
:
/
/
gre
/
modules
/
ClientID
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
ABUSE_REPORT_URL
"
PREF_ABUSE_REPORT_URL
)
;
const
PRIVATE_REPORT_PROPS
=
Symbol
(
"
privateReportProps
"
)
;
const
ERROR_TYPES
=
Object
.
freeze
(
[
"
ERROR_ABORTED_SUBMIT
"
"
ERROR_ADDON_NOTFOUND
"
"
ERROR_CLIENT
"
"
ERROR_NETWORK
"
"
ERROR_UNKNOWN
"
"
ERROR_RECENT_SUBMIT
"
"
ERROR_SERVER
"
]
)
;
class
AbuseReportError
extends
Error
{
constructor
(
errorType
)
{
if
(
!
ERROR_TYPES
.
includes
(
errorType
)
)
{
throw
new
Error
(
Unknown
AbuseReportError
type
"
{
errorType
}
"
)
;
}
super
(
errorType
)
;
this
.
name
=
"
AbuseReportError
"
;
this
.
errorType
=
errorType
;
}
}
const
AbuseReporter
=
{
_lastReportTimestamp
:
null
updateLastReportTimestamp
(
)
{
this
.
_lastReportTimestamp
=
Date
.
now
(
)
;
}
getTimeFromLastReport
(
)
{
const
currentTimestamp
=
Date
.
now
(
)
;
if
(
this
.
_lastReportTimestamp
>
currentTimestamp
)
{
this
.
_lastReportTimestamp
=
null
;
}
if
(
!
this
.
_lastReportTimestamp
)
{
return
Infinity
;
}
return
currentTimestamp
-
this
.
_lastReportTimestamp
;
}
async
createAbuseReport
(
addonId
{
reportEntryPoint
}
=
{
}
)
{
const
addon
=
await
AddonManager
.
getAddonByID
(
addonId
)
;
if
(
!
addon
)
{
throw
new
AbuseReportError
(
"
ERROR_ADDON_NOTFOUND
"
)
;
}
const
reportData
=
await
this
.
getReportData
(
addon
)
;
return
new
AbuseReport
(
{
addon
reportData
reportEntryPoint
}
)
;
}
async
getReportData
(
addon
)
{
const
data
=
{
addon
:
addon
.
id
addon_version
:
addon
.
version
addon_summary
:
addon
.
description
addon_install_origin
:
addon
.
sourceURI
&
&
addon
.
sourceURI
.
spec
install_date
:
addon
.
installDate
&
&
addon
.
installDate
.
toISOString
(
)
}
;
let
install_method
=
"
other
"
;
if
(
addon
.
installTelemetryInfo
)
{
const
{
source
method
}
=
addon
.
installTelemetryInfo
;
switch
(
source
)
{
case
"
enterprise
-
policy
"
:
case
"
file
-
uri
"
:
case
"
system
-
addon
"
:
case
"
temporary
-
addon
"
:
install_method
=
source
.
replace
(
/
-
/
g
"
_
"
)
;
break
;
case
"
distribution
"
:
case
"
sideload
"
:
case
"
sync
"
:
install_method
=
source
;
break
;
default
:
install_method
=
"
other
"
;
}
switch
(
method
)
{
case
"
link
"
:
install_method
=
method
;
break
;
case
"
amWebAPI
"
:
case
"
installTrigger
"
:
install_method
=
method
.
toLowerCase
(
)
;
break
;
case
"
drag
-
and
-
drop
"
:
case
"
install
-
from
-
file
"
:
case
"
management
-
webext
-
api
"
:
install_method
=
method
.
replace
(
/
-
/
g
"
_
"
)
;
break
;
}
}
data
.
addon_install_method
=
install_method
;
switch
(
addon
.
signedState
)
{
case
AddonManager
.
SIGNEDSTATE_BROKEN
:
data
.
addon_signature
=
"
broken
"
;
break
;
case
AddonManager
.
SIGNEDSTATE_UNKNOWN
:
data
.
addon_signature
=
"
unknown
"
;
break
;
case
AddonManager
.
SIGNEDSTATE_MISSING
:
data
.
addon_signature
=
"
missing
"
;
break
;
case
AddonManager
.
SIGNEDSTATE_PRELIMINARY
:
data
.
addon_signature
=
"
preliminary
"
;
break
;
case
AddonManager
.
SIGNEDSTATE_SIGNED
:
data
.
addon_signature
=
"
signed
"
;
break
;
case
AddonManager
.
SIGNEDSTATE_SYSTEM
:
data
.
addon_signature
=
"
system
"
;
break
;
case
AddonManager
.
SIGNEDSTATE_PRIVILEGED
:
data
.
addon_signature
=
"
privileged
"
;
break
;
default
:
data
.
addon_signature
=
unknown
:
{
addon
.
signedState
}
;
}
data
.
client_id
=
await
ClientID
.
getClientIdHash
(
)
;
data
.
app
=
Services
.
appinfo
.
name
.
toLowerCase
(
)
;
data
.
appversion
=
Services
.
appinfo
.
version
;
data
.
lang
=
Services
.
locale
.
appLocaleAsLangTag
;
data
.
operating_system
=
AppConstants
.
platform
;
data
.
operating_system_version
=
Services
.
sysinfo
.
getProperty
(
"
version
"
)
;
return
data
;
}
}
;
class
AbuseReport
{
constructor
(
{
addon
createErrorType
reportData
reportEntryPoint
}
)
{
this
[
PRIVATE_REPORT_PROPS
]
=
{
aborted
:
false
abortController
:
new
AbortController
(
)
addon
reportData
reportEntryPoint
}
;
}
async
submit
(
{
reason
message
}
)
{
const
{
aborted
abortController
reportData
reportEntryPoint
}
=
this
[
PRIVATE_REPORT_PROPS
]
;
if
(
aborted
)
{
throw
new
AbuseReportError
(
"
ERROR_ABORTED_SUBMIT
"
)
;
}
let
msFromLastReport
=
AbuseReporter
.
getTimeFromLastReport
(
)
;
if
(
msFromLastReport
<
MIN_MS_BETWEEN_SUBMITS
)
{
throw
new
AbuseReportError
(
"
ERROR_RECENT_SUBMIT
"
)
;
}
let
response
;
try
{
response
=
await
fetch
(
ABUSE_REPORT_URL
{
signal
:
abortController
.
signal
method
:
"
POST
"
credentials
:
"
omit
"
referrerPolicy
:
"
no
-
referrer
"
headers
:
{
"
Content
-
Type
"
:
"
application
/
json
"
}
body
:
JSON
.
stringify
(
{
.
.
.
reportData
report_entry_point
:
reportEntryPoint
message
reason
}
)
}
)
;
}
catch
(
err
)
{
if
(
err
.
name
=
=
=
"
AbortError
"
)
{
throw
new
AbuseReportError
(
"
ERROR_ABORTED_SUBMIT
"
)
;
}
Cu
.
reportError
(
err
)
;
throw
new
AbuseReportError
(
"
ERROR_NETWORK
"
)
;
}
if
(
response
.
ok
&
&
response
.
status
>
=
200
&
&
response
.
status
<
400
)
{
await
response
.
json
(
)
;
AbuseReporter
.
updateLastReportTimestamp
(
)
;
return
;
}
if
(
response
.
status
>
=
400
&
&
response
.
status
<
500
)
{
throw
new
AbuseReportError
(
"
ERROR_CLIENT
"
)
;
}
if
(
response
.
status
>
=
500
&
&
response
.
status
<
600
)
{
throw
new
AbuseReportError
(
"
ERROR_SERVER
"
)
;
}
throw
new
AbuseReportError
(
"
ERROR_UNKNOWN
"
)
;
}
abort
(
)
{
const
{
abortController
}
=
this
[
PRIVATE_REPORT_PROPS
]
;
abortController
.
abort
(
)
;
this
[
PRIVATE_REPORT_PROPS
]
.
aborted
=
true
;
}
get
addon
(
)
{
return
this
[
PRIVATE_REPORT_PROPS
]
.
addon
;
}
get
reportEntryPoint
(
)
{
return
this
[
PRIVATE_REPORT_PROPS
]
.
reportEntryPoint
;
}
}
