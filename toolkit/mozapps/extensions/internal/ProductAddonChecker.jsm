"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ProductAddonChecker
"
"
ProductAddonCheckerTestUtils
"
]
;
const
{
Log
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Log
.
sys
.
mjs
"
)
;
const
{
CertUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
CertUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
ServiceRequest
:
"
resource
:
/
/
gre
/
modules
/
ServiceRequest
.
sys
.
mjs
"
}
)
;
var
logger
=
Log
.
repository
.
getLogger
(
"
addons
.
productaddons
"
)
;
logger
.
manageLevelFromPref
(
"
extensions
.
logging
.
productaddons
.
level
"
)
;
const
TIMEOUT_DELAY_MS
=
20000
;
function
getRequestStatus
(
request
)
{
let
status
=
null
;
try
{
status
=
request
.
status
;
}
catch
(
e
)
{
}
if
(
status
!
=
null
)
{
return
status
;
}
return
request
.
channel
.
QueryInterface
(
Ci
.
nsIRequest
)
.
status
;
}
async
function
conservativeFetch
(
input
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
const
request
=
new
lazy
.
ServiceRequest
(
{
mozAnon
:
true
}
)
;
request
.
timeout
=
TIMEOUT_DELAY_MS
;
request
.
onerror
=
(
)
=
>
{
let
err
=
new
TypeError
(
"
NetworkError
:
Network
request
failed
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
NETWORK_REQUEST_ERR
;
reject
(
err
)
;
}
;
request
.
ontimeout
=
(
)
=
>
{
let
err
=
new
TypeError
(
"
Timeout
:
Network
request
failed
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
NETWORK_TIMEOUT_ERR
;
reject
(
err
)
;
}
;
request
.
onabort
=
(
)
=
>
{
let
err
=
new
DOMException
(
"
Aborted
"
"
AbortError
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
ABORT_ERR
;
reject
(
err
)
;
}
;
request
.
onload
=
(
)
=
>
{
const
responseAttributes
=
{
status
:
request
.
status
statusText
:
request
.
statusText
url
:
request
.
responseURL
}
;
resolve
(
new
Response
(
request
.
response
responseAttributes
)
)
;
}
;
const
method
=
"
GET
"
;
request
.
open
(
method
input
true
)
;
request
.
send
(
)
;
}
)
;
}
async
function
verifyGmpContentSignature
(
data
contentSignatureHeader
)
{
if
(
!
contentSignatureHeader
)
{
logger
.
warn
(
"
Unexpected
missing
content
signature
header
during
content
signature
validation
"
)
;
let
err
=
new
Error
(
"
Content
signature
validation
failed
:
missing
content
signature
header
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
VERIFICATION_MISSING_DATA_ERR
;
throw
err
;
}
const
headerFields
=
contentSignatureHeader
.
split
(
"
;
"
)
.
map
(
s
=
>
s
.
trim
(
)
)
.
map
(
s
=
>
[
s
.
substring
(
0
s
.
indexOf
(
"
=
"
)
)
s
.
substring
(
s
.
indexOf
(
"
=
"
)
+
1
)
]
)
;
let
x5u
;
let
signature
;
for
(
const
[
fieldName
fieldValue
]
of
headerFields
)
{
if
(
fieldName
=
=
"
x5u
"
)
{
x5u
=
fieldValue
;
}
else
if
(
fieldName
=
=
"
p384ecdsa
"
)
{
signature
=
p384ecdsa
=
{
fieldValue
}
;
}
}
if
(
!
x5u
)
{
logger
.
warn
(
"
Unexpected
missing
x5u
during
content
signature
validation
"
)
;
let
err
=
Error
(
"
Content
signature
validation
failed
:
missing
x5u
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
VERIFICATION_MISSING_DATA_ERR
;
throw
err
;
}
if
(
!
signature
)
{
logger
.
warn
(
"
Unexpected
missing
signature
during
content
signature
validation
"
)
;
let
err
=
Error
(
"
Content
signature
validation
failed
:
missing
signature
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
VERIFICATION_MISSING_DATA_ERR
;
throw
err
;
}
const
certChain
=
await
(
await
conservativeFetch
(
x5u
)
)
.
text
(
)
;
const
verifier
=
Cc
[
"
mozilla
.
org
/
security
/
contentsignatureverifier
;
1
"
]
.
createInstance
(
Ci
.
nsIContentSignatureVerifier
)
;
let
root
=
Ci
.
nsIContentSignatureVerifier
.
ContentSignatureProdRoot
;
if
(
Services
.
env
.
exists
(
"
XPCSHELL_TEST_PROFILE_DIR
"
)
)
{
root
=
Ci
.
nsIX509CertDB
.
AppXPCShellRoot
;
}
let
valid
;
try
{
valid
=
await
verifier
.
asyncVerifyContentSignature
(
data
signature
certChain
"
aus
.
content
-
signature
.
mozilla
.
org
"
root
)
;
}
catch
(
err
)
{
logger
.
warn
(
Unexpected
error
while
validating
content
signature
:
{
err
}
)
;
let
newErr
=
new
Error
(
Content
signature
validation
failed
:
{
err
}
)
;
newErr
.
addonCheckerErr
=
ProductAddonChecker
.
VERIFICATION_FAILED_ERR
;
throw
newErr
;
}
if
(
!
valid
)
{
logger
.
warn
(
"
Unexpected
invalid
content
signature
found
during
validation
"
)
;
let
err
=
new
Error
(
"
Content
signature
is
not
valid
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
VERIFICATION_INVALID_ERR
;
throw
err
;
}
}
function
downloadXMLWithRequest
(
url
allowNonBuiltIn
=
false
allowedCerts
=
null
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
request
=
new
lazy
.
ServiceRequest
(
)
;
if
(
request
.
wrappedJSObject
)
{
request
=
request
.
wrappedJSObject
;
}
request
.
open
(
"
GET
"
url
true
)
;
request
.
channel
.
notificationCallbacks
=
new
CertUtils
.
BadCertHandler
(
allowNonBuiltIn
)
;
request
.
channel
.
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_BYPASS_CACHE
;
request
.
channel
.
loadFlags
|
=
Ci
.
nsIRequest
.
INHIBIT_CACHING
;
request
.
channel
.
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_ANONYMOUS
;
request
.
timeout
=
TIMEOUT_DELAY_MS
;
request
.
overrideMimeType
(
"
text
/
xml
"
)
;
request
.
setRequestHeader
(
"
Cache
-
Control
"
"
no
-
cache
"
)
;
request
.
setRequestHeader
(
"
Pragma
"
"
no
-
cache
"
)
;
let
fail
=
event
=
>
{
let
request
=
event
.
target
;
let
status
=
getRequestStatus
(
request
)
;
let
message
=
"
Failed
downloading
XML
status
:
"
+
status
+
"
reason
:
"
+
event
.
type
;
logger
.
warn
(
message
)
;
let
ex
=
new
Error
(
message
)
;
ex
.
status
=
status
;
if
(
event
.
type
=
=
"
error
"
)
{
ex
.
addonCheckerErr
=
ProductAddonChecker
.
NETWORK_REQUEST_ERR
;
}
else
if
(
event
.
type
=
=
"
abort
"
)
{
ex
.
addonCheckerErr
=
ProductAddonChecker
.
ABORT_ERR
;
}
else
if
(
event
.
type
=
=
"
timeout
"
)
{
ex
.
addonCheckerErr
=
ProductAddonChecker
.
NETWORK_TIMEOUT_ERR
;
}
reject
(
ex
)
;
}
;
let
success
=
event
=
>
{
logger
.
info
(
"
Completed
downloading
document
"
)
;
let
request
=
event
.
target
;
try
{
CertUtils
.
checkCert
(
request
.
channel
allowNonBuiltIn
allowedCerts
)
;
}
catch
(
ex
)
{
logger
.
error
(
"
Request
failed
certificate
checks
:
"
+
ex
)
;
ex
.
status
=
getRequestStatus
(
request
)
;
ex
.
addonCheckerErr
=
ProductAddonChecker
.
VERIFICATION_FAILED_ERR
;
reject
(
ex
)
;
return
;
}
resolve
(
request
)
;
}
;
request
.
addEventListener
(
"
error
"
fail
)
;
request
.
addEventListener
(
"
abort
"
fail
)
;
request
.
addEventListener
(
"
timeout
"
fail
)
;
request
.
addEventListener
(
"
load
"
success
)
;
logger
.
info
(
"
sending
request
to
:
"
+
url
)
;
request
.
send
(
null
)
;
}
)
;
}
async
function
downloadXML
(
url
allowNonBuiltIn
=
false
allowedCerts
=
null
verifyContentSignature
=
false
)
{
let
request
=
await
downloadXMLWithRequest
(
url
allowNonBuiltIn
allowedCerts
)
;
if
(
verifyContentSignature
)
{
await
verifyGmpContentSignature
(
request
.
response
request
.
getResponseHeader
(
"
content
-
signature
"
)
)
;
}
return
request
.
responseXML
;
}
function
parseXML
(
document
)
{
if
(
document
.
documentElement
.
localName
!
=
"
updates
"
)
{
let
err
=
new
Error
(
"
got
node
name
:
"
+
document
.
documentElement
.
localName
+
"
expected
:
updates
"
)
;
err
.
addonCheckerErr
=
ProductAddonChecker
.
XML_PARSE_ERR
;
throw
err
;
}
let
addons
=
document
.
querySelector
(
"
updates
:
root
>
addons
"
)
;
if
(
!
addons
)
{
return
null
;
}
let
results
=
[
]
;
let
addonList
=
document
.
querySelectorAll
(
"
updates
:
root
>
addons
>
addon
"
)
;
for
(
let
addonElement
of
addonList
)
{
let
addon
=
{
}
;
for
(
let
name
of
[
"
id
"
"
URL
"
"
hashFunction
"
"
hashValue
"
"
version
"
"
size
"
]
)
{
if
(
addonElement
.
hasAttribute
(
name
)
)
{
addon
[
name
]
=
addonElement
.
getAttribute
(
name
)
;
}
}
addon
.
size
=
Number
(
addon
.
size
)
|
|
undefined
;
results
.
push
(
addon
)
;
}
return
{
usedFallback
:
false
addons
:
results
}
;
}
function
downloadFile
(
url
options
=
{
httpsOnlyNoUpgrade
:
false
}
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
sr
=
new
lazy
.
ServiceRequest
(
)
;
sr
.
onload
=
function
(
response
)
{
logger
.
info
(
"
downloadFile
File
download
.
status
=
"
+
sr
.
status
)
;
if
(
sr
.
status
!
=
200
&
&
sr
.
status
!
=
206
)
{
reject
(
Components
.
Exception
(
"
File
download
failed
"
sr
.
status
)
)
;
return
;
}
(
async
function
(
)
{
const
path
=
await
IOUtils
.
createUniqueFile
(
PathUtils
.
tempDir
"
tmpaddon
"
)
;
logger
.
info
(
Downloaded
file
will
be
saved
to
{
path
}
)
;
await
IOUtils
.
write
(
path
new
Uint8Array
(
sr
.
response
)
)
;
return
path
;
}
)
(
)
.
then
(
resolve
reject
)
;
}
;
let
fail
=
event
=
>
{
let
request
=
event
.
target
;
let
status
=
getRequestStatus
(
request
)
;
let
message
=
"
Failed
downloading
via
ServiceRequest
status
:
"
+
status
+
"
reason
:
"
+
event
.
type
;
logger
.
warn
(
message
)
;
let
ex
=
new
Error
(
message
)
;
ex
.
status
=
status
;
reject
(
ex
)
;
}
;
sr
.
addEventListener
(
"
error
"
fail
)
;
sr
.
addEventListener
(
"
abort
"
fail
)
;
sr
.
responseType
=
"
arraybuffer
"
;
try
{
sr
.
open
(
"
GET
"
url
)
;
if
(
options
.
httpsOnlyNoUpgrade
)
{
sr
.
channel
.
loadInfo
.
httpsOnlyStatus
|
=
Ci
.
nsILoadInfo
.
HTTPS_ONLY_EXEMPT
;
}
sr
.
channel
.
loadInfo
.
allowDeprecatedSystemRequests
=
true
;
sr
.
send
(
null
)
;
}
catch
(
ex
)
{
reject
(
ex
)
;
}
}
)
;
}
var
verifyFile
=
async
function
(
properties
path
)
{
if
(
properties
.
size
!
=
=
undefined
)
{
let
stat
=
await
IOUtils
.
stat
(
path
)
;
if
(
stat
.
size
!
=
properties
.
size
)
{
throw
new
Error
(
"
Downloaded
file
was
"
+
stat
.
size
+
"
bytes
but
expected
"
+
properties
.
size
+
"
bytes
.
"
)
;
}
}
if
(
properties
.
hashFunction
!
=
=
undefined
)
{
let
expectedDigest
=
properties
.
hashValue
.
toLowerCase
(
)
;
let
digest
=
await
IOUtils
.
computeHexDigest
(
path
properties
.
hashFunction
)
;
if
(
digest
!
=
expectedDigest
)
{
throw
new
Error
(
"
Hash
was
"
+
digest
+
"
but
expected
"
+
expectedDigest
+
"
.
"
)
;
}
}
}
;
const
ProductAddonChecker
=
{
NETWORK_REQUEST_ERR
:
"
NetworkRequestError
"
NETWORK_TIMEOUT_ERR
:
"
NetworkTimeoutError
"
ABORT_ERR
:
"
AbortError
"
VERIFICATION_MISSING_DATA_ERR
:
"
VerificationMissingDataError
"
VERIFICATION_FAILED_ERR
:
"
VerificationFailedError
"
VERIFICATION_INVALID_ERR
:
"
VerificationInvalidError
"
XML_PARSE_ERR
:
"
XMLParseError
"
getProductAddonList
(
url
allowNonBuiltIn
=
false
allowedCerts
=
null
verifyContentSignature
=
false
)
{
return
downloadXML
(
url
allowNonBuiltIn
allowedCerts
verifyContentSignature
)
.
then
(
parseXML
)
;
}
async
downloadAddon
(
addon
options
=
{
httpsOnlyNoUpgrade
:
false
}
)
{
let
path
=
await
downloadFile
(
addon
.
URL
options
)
;
try
{
await
verifyFile
(
addon
path
)
;
return
path
;
}
catch
(
e
)
{
await
IOUtils
.
remove
(
path
)
;
throw
e
;
}
}
}
;
const
ProductAddonCheckerTestUtils
=
{
async
overrideServiceRequest
(
mockRequest
callback
)
{
let
originalServiceRequest
=
lazy
.
ServiceRequest
;
lazy
.
ServiceRequest
=
function
(
)
{
return
mockRequest
;
}
;
try
{
return
await
callback
(
)
;
}
finally
{
lazy
.
ServiceRequest
=
originalServiceRequest
;
}
}
}
;
