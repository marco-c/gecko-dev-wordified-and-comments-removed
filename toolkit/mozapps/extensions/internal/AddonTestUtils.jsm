var
EXPORTED_SYMBOLS
=
[
"
AddonTestUtils
"
"
MockAsyncShutdown
"
]
;
const
CERTDB_CONTRACTID
=
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
const
{
AsyncShutdown
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
)
;
const
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
EventEmitter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AMTelemetry
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionTestCommon
"
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Management
"
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionAddonObserver
"
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FileTestUtils
"
"
resource
:
/
/
testing
-
common
/
FileTestUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
HttpServer
"
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
MockRegistrar
"
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
aomStartup
:
[
"
mozilla
.
org
/
addons
/
addon
-
manager
-
startup
;
1
"
"
amIAddonManagerStartup
"
]
proxyService
:
[
"
mozilla
.
org
/
network
/
protocol
-
proxy
-
service
;
1
"
"
nsIProtocolProxyService
"
]
uuidGen
:
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
]
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
AppInfo
"
(
)
=
>
{
let
AppInfo
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
jsm
"
AppInfo
)
;
return
AppInfo
;
}
)
;
const
PREF_DISABLE_SECURITY
=
"
security
.
turn_off_all_security_so_that_
"
+
"
viruses_can_take_over_this_computer
"
;
const
ArrayBufferInputStream
=
Components
.
Constructor
(
"
mozilla
.
org
/
io
/
arraybuffer
-
input
-
stream
;
1
"
"
nsIArrayBufferInputStream
"
"
setData
"
)
;
const
nsFile
=
Components
.
Constructor
(
"
mozilla
.
org
/
file
/
local
;
1
"
"
nsIFile
"
"
initWithPath
"
)
;
const
ZipReader
=
Components
.
Constructor
(
"
mozilla
.
org
/
libjar
/
zip
-
reader
;
1
"
"
nsIZipReader
"
"
open
"
)
;
const
ZipWriter
=
Components
.
Constructor
(
"
mozilla
.
org
/
zipwriter
;
1
"
"
nsIZipWriter
"
"
open
"
)
;
function
isRegExp
(
val
)
{
return
val
&
&
typeof
val
=
=
=
"
object
"
&
&
typeof
val
.
test
=
=
=
"
function
"
;
}
var
AMscope
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
null
)
;
var
{
AddonManager
AddonManagerPrivate
}
=
AMscope
;
class
MockBarrier
{
constructor
(
name
)
{
this
.
name
=
name
;
this
.
blockers
=
[
]
;
}
addBlocker
(
name
blocker
options
)
{
this
.
blockers
.
push
(
{
name
blocker
options
}
)
;
}
async
trigger
(
)
{
await
Promise
.
all
(
this
.
blockers
.
map
(
async
(
{
blocker
name
}
)
=
>
{
try
{
if
(
typeof
blocker
=
=
"
function
"
)
{
await
blocker
(
)
;
}
else
{
await
blocker
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
dump
(
Shutdown
blocker
'
{
name
}
'
for
{
this
.
name
}
threw
error
:
{
e
}
:
:
{
e
.
stack
}
\
n
)
;
}
}
)
)
;
this
.
blockers
=
[
]
;
}
}
var
MockAsyncShutdown
=
{
profileBeforeChange
:
new
MockBarrier
(
"
profileBeforeChange
"
)
profileChangeTeardown
:
new
MockBarrier
(
"
profileChangeTeardown
"
)
quitApplicationGranted
:
new
MockBarrier
(
"
quitApplicationGranted
"
)
Barrier
:
AsyncShutdown
.
Barrier
}
;
AMscope
.
AsyncShutdown
=
MockAsyncShutdown
;
class
MockBlocklist
{
constructor
(
addons
)
{
if
(
ChromeUtils
.
getClassName
(
addons
)
=
=
=
"
Object
"
)
{
addons
=
new
Map
(
Object
.
entries
(
addons
)
)
;
}
this
.
addons
=
addons
;
this
.
wrappedJSObject
=
this
;
for
(
let
[
k
v
]
of
Object
.
entries
(
Ci
.
nsIBlocklistService
)
)
{
if
(
typeof
v
=
=
=
"
number
"
)
{
this
[
k
]
=
v
;
}
}
this
.
_xpidb
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIDatabase
.
jsm
"
null
)
;
}
get
contractID
(
)
{
return
"
mozilla
.
org
/
extensions
/
blocklist
;
1
"
;
}
_reLazifyService
(
)
{
XPCOMUtils
.
defineLazyServiceGetter
(
Services
"
blocklist
"
this
.
contractID
)
;
ChromeUtils
.
defineModuleGetter
(
this
.
_xpidb
"
Blocklist
"
"
resource
:
/
/
gre
/
modules
/
Blocklist
.
jsm
"
)
;
}
register
(
)
{
this
.
originalCID
=
MockRegistrar
.
register
(
this
.
contractID
this
)
;
this
.
_reLazifyService
(
)
;
this
.
_xpidb
.
Blocklist
=
this
;
}
unregister
(
)
{
MockRegistrar
.
unregister
(
this
.
originalCID
)
;
this
.
_reLazifyService
(
)
;
}
async
getAddonBlocklistState
(
addon
appVersion
toolkitVersion
)
{
await
new
Promise
(
r
=
>
setTimeout
(
r
150
)
)
;
return
(
this
.
addons
.
get
(
addon
.
id
)
|
|
Ci
.
nsIBlocklistService
.
STATE_NOT_BLOCKED
)
;
}
async
getAddonBlocklistEntry
(
addon
appVersion
toolkitVersion
)
{
let
state
=
await
this
.
getAddonBlocklistState
(
addon
appVersion
toolkitVersion
)
;
if
(
state
!
=
Ci
.
nsIBlocklistService
.
STATE_NOT_BLOCKED
)
{
return
{
state
url
:
"
http
:
/
/
example
.
com
/
"
}
;
}
return
null
;
}
async
getPluginBlocklistState
(
plugin
version
appVersion
toolkitVersion
)
{
await
new
Promise
(
r
=
>
setTimeout
(
r
150
)
)
;
return
Ci
.
nsIBlocklistService
.
STATE_NOT_BLOCKED
;
}
}
MockBlocklist
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIBlocklistService
"
]
)
;
class
AddonsList
{
constructor
(
file
)
{
this
.
extensions
=
[
]
;
this
.
themes
=
[
]
;
this
.
xpis
=
[
]
;
if
(
!
file
.
exists
(
)
)
{
return
;
}
let
data
=
aomStartup
.
readStartupData
(
)
;
for
(
let
loc
of
Object
.
values
(
data
)
)
{
let
dir
=
loc
.
path
&
&
new
nsFile
(
loc
.
path
)
;
for
(
let
addon
of
Object
.
values
(
loc
.
addons
)
)
{
let
file
;
if
(
dir
)
{
file
=
dir
.
clone
(
)
;
try
{
file
.
appendRelativePath
(
addon
.
path
)
;
}
catch
(
e
)
{
file
=
new
nsFile
(
addon
.
path
)
;
}
}
else
if
(
addon
.
path
)
{
file
=
new
nsFile
(
addon
.
path
)
;
}
if
(
!
file
)
{
continue
;
}
this
.
xpis
.
push
(
file
)
;
if
(
addon
.
enabled
)
{
addon
.
type
=
addon
.
type
|
|
"
extension
"
;
if
(
addon
.
type
=
=
"
theme
"
)
{
this
.
themes
.
push
(
file
)
;
}
else
{
this
.
extensions
.
push
(
file
)
;
}
}
}
}
}
hasItem
(
type
dir
id
)
{
var
path
=
dir
.
clone
(
)
;
path
.
append
(
id
)
;
var
xpiPath
=
dir
.
clone
(
)
;
xpiPath
.
append
(
{
id
}
.
xpi
)
;
return
this
[
type
]
.
some
(
file
=
>
{
if
(
!
file
.
exists
(
)
)
{
throw
new
Error
(
Non
-
existent
path
found
in
addonStartup
.
json
:
{
file
.
path
}
)
;
}
if
(
file
.
isDirectory
(
)
)
{
return
file
.
equals
(
path
)
;
}
if
(
file
.
isFile
(
)
)
{
return
file
.
equals
(
xpiPath
)
;
}
return
false
;
}
)
;
}
hasTheme
(
dir
id
)
{
return
this
.
hasItem
(
"
themes
"
dir
id
)
;
}
hasExtension
(
dir
id
)
{
return
this
.
hasItem
(
"
extensions
"
dir
id
)
;
}
}
var
AddonTestUtils
=
{
addonIntegrationService
:
null
addonsList
:
null
appInfo
:
null
addonStartup
:
null
collectedTelemetryEvents
:
[
]
testScope
:
null
testUnpacked
:
false
useRealCertChecks
:
false
usePrivilegedSignatures
:
true
overrideEntry
:
null
maybeInit
(
testScope
)
{
if
(
this
.
testScope
!
=
testScope
)
{
this
.
init
(
testScope
)
;
}
}
init
(
testScope
enableLogging
=
true
)
{
if
(
this
.
testScope
=
=
=
testScope
)
{
return
;
}
this
.
testScope
=
testScope
;
this
.
profileDir
=
testScope
.
do_get_profile
(
)
;
this
.
profileExtensions
=
this
.
profileDir
.
clone
(
)
;
this
.
profileExtensions
.
append
(
"
extensions
"
)
;
this
.
addonStartup
=
this
.
profileDir
.
clone
(
)
;
this
.
addonStartup
.
append
(
"
addonStartup
.
json
.
lz4
"
)
;
this
.
tempDir
=
this
.
profileDir
.
clone
(
)
;
this
.
tempDir
.
append
(
"
temp
"
)
;
this
.
tempDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
this
.
registerDirectory
(
"
TmpD
"
this
.
tempDir
)
;
const
appDirForAddons
=
this
.
profileDir
.
clone
(
)
;
appDirForAddons
.
append
(
"
appdir
-
addons
"
)
;
appDirForAddons
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
this
.
registerDirectory
(
"
XREAddonAppDir
"
appDirForAddons
)
;
if
(
enableLogging
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
logging
.
enabled
"
true
)
;
}
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
AddonManager
.
SCOPE_PROFILE
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
autoDisableScopes
"
0
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
startupScanScopes
"
15
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
getAddons
.
cache
.
enabled
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
update
.
url
"
"
http
:
/
/
127
.
0
.
0
.
1
/
updateURL
"
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
update
.
background
.
url
"
"
http
:
/
/
127
.
0
.
0
.
1
/
updateBackgroundURL
"
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
"
http
:
/
/
127
.
0
.
0
.
1
/
blocklistURL
"
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
settings
.
server
"
"
http
:
/
/
localhost
/
dummy
-
kinto
/
v1
"
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
installDistroAddons
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
xpinstall
.
signatures
.
required
"
true
)
;
var
blockFile
=
OS
.
Path
.
join
(
this
.
profileDir
.
path
"
blocklist
.
xml
"
)
;
var
data
=
'
<
?
xml
version
=
"
1
.
0
"
encoding
=
"
UTF
-
8
"
?
>
\
n
'
+
'
<
blocklist
xmlns
=
"
http
:
/
/
www
.
mozilla
.
org
/
2006
/
addons
-
blocklist
"
>
\
n
'
+
"
<
/
blocklist
>
\
n
"
;
this
.
awaitPromise
(
OS
.
File
.
writeAtomic
(
blockFile
new
TextEncoder
(
)
.
encode
(
data
)
)
)
;
function
pathShouldntExist
(
file
)
{
if
(
file
.
exists
(
)
)
{
throw
new
Error
(
Test
cleanup
:
path
{
file
.
path
}
exists
when
it
should
not
)
;
}
}
testScope
.
registerCleanupFunction
(
(
)
=
>
{
this
.
cleanupTempXPIs
(
)
;
let
ignoreEntries
=
new
Set
(
)
;
{
let
{
value
}
=
Object
.
getOwnPropertyDescriptor
(
FileTestUtils
"
_globalTemporaryDirectory
"
)
;
if
(
value
)
{
ignoreEntries
.
add
(
value
.
leafName
)
;
}
}
var
entries
=
[
]
;
for
(
let
{
leafName
}
of
this
.
iterDirectory
(
this
.
tempDir
)
)
{
if
(
!
ignoreEntries
.
has
(
leafName
)
)
{
entries
.
push
(
leafName
)
;
}
}
if
(
entries
.
length
)
{
throw
new
Error
(
Found
unexpected
files
in
temporary
directory
:
{
entries
.
join
(
"
"
)
}
)
;
}
try
{
appDirForAddons
.
remove
(
true
)
;
}
catch
(
ex
)
{
testScope
.
info
(
Got
exception
removing
addon
app
dir
:
{
ex
}
)
;
}
let
featuresDir
=
this
.
profileDir
.
clone
(
)
;
featuresDir
.
append
(
"
features
"
)
;
for
(
let
dir
of
this
.
iterDirectory
(
featuresDir
)
)
{
dir
.
append
(
"
stage
"
)
;
pathShouldntExist
(
dir
)
;
}
let
testDir
=
this
.
profileDir
.
clone
(
)
;
testDir
.
append
(
"
extensions
"
)
;
testDir
.
append
(
"
trash
"
)
;
pathShouldntExist
(
testDir
)
;
testDir
.
leafName
=
"
staged
"
;
pathShouldntExist
(
testDir
)
;
return
this
.
promiseShutdownManager
(
)
;
}
)
;
}
initMochitest
(
testScope
)
{
if
(
this
.
testScope
=
=
=
testScope
)
{
return
;
}
this
.
testScope
=
testScope
;
this
.
profileDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
]
)
;
this
.
profileExtensions
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
extensions
"
]
)
;
this
.
tempDir
=
FileUtils
.
getDir
(
"
TmpD
"
[
]
)
;
this
.
tempDir
.
append
(
"
addons
-
mochitest
"
)
;
this
.
tempDir
.
createUnique
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
testScope
.
registerCleanupFunction
(
(
)
=
>
{
testScope
.
registerCleanupFunction
(
(
)
=
>
{
this
.
testScope
=
null
;
}
)
;
this
.
cleanupTempXPIs
(
)
;
try
{
this
.
tempDir
.
remove
(
true
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
)
;
}
*
iterDirectory
(
dir
)
{
let
dirEnum
;
try
{
dirEnum
=
dir
.
directoryEntries
;
let
file
;
while
(
(
file
=
dirEnum
.
nextFile
)
)
{
yield
file
;
}
}
catch
(
e
)
{
if
(
dir
.
exists
(
)
)
{
Cu
.
reportError
(
e
)
;
}
}
finally
{
if
(
dirEnum
)
{
dirEnum
.
close
(
)
;
}
}
}
createHttpServer
(
{
port
=
-
1
hosts
}
=
{
}
)
{
let
server
=
new
HttpServer
(
)
;
server
.
start
(
port
)
;
if
(
hosts
)
{
hosts
=
new
Set
(
hosts
)
;
const
serverHost
=
"
localhost
"
;
const
serverPort
=
server
.
identity
.
primaryPort
;
for
(
let
host
of
hosts
)
{
server
.
identity
.
add
(
"
http
"
host
80
)
;
}
const
proxyFilter
=
{
proxyInfo
:
proxyService
.
newProxyInfo
(
"
http
"
serverHost
serverPort
"
"
"
"
0
4096
null
)
applyFilter
(
service
channel
defaultProxyInfo
callback
)
{
if
(
hosts
.
has
(
channel
.
URI
.
host
)
)
{
callback
.
onProxyFilterResult
(
this
.
proxyInfo
)
;
}
else
{
callback
.
onProxyFilterResult
(
defaultProxyInfo
)
;
}
}
}
;
proxyService
.
registerChannelFilter
(
proxyFilter
0
)
;
this
.
testScope
.
registerCleanupFunction
(
(
)
=
>
{
proxyService
.
unregisterChannelFilter
(
proxyFilter
)
;
}
)
;
}
this
.
testScope
.
registerCleanupFunction
(
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
server
.
stop
(
resolve
)
;
}
)
;
}
)
;
return
server
;
}
registerJSON
(
server
path
obj
)
{
server
.
registerPathHandler
(
path
(
request
response
)
=
>
{
response
.
setHeader
(
"
content
-
type
"
"
application
/
json
"
true
)
;
response
.
write
(
JSON
.
stringify
(
obj
)
)
;
}
)
;
}
info
(
msg
)
{
let
print
=
this
.
testScope
.
info
|
|
this
.
testScope
.
do_print
;
print
(
msg
)
;
}
cleanupTempXPIs
(
)
{
let
didGC
=
false
;
for
(
let
file
of
this
.
tempXPIs
.
splice
(
0
)
)
{
if
(
file
.
exists
(
)
)
{
try
{
Services
.
obs
.
notifyObservers
(
file
"
flush
-
cache
-
entry
"
)
;
file
.
remove
(
false
)
;
}
catch
(
e
)
{
if
(
didGC
)
{
Cu
.
reportError
(
Failed
to
remove
{
file
.
path
}
:
{
e
}
)
;
}
else
{
this
.
info
(
Force
a
GC
)
;
Cu
.
forceGC
(
)
;
didGC
=
true
;
try
{
file
.
remove
(
false
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
Failed
to
remove
{
file
.
path
}
after
GC
:
{
e
}
)
;
}
}
}
}
}
}
awaitPromise
(
promise
)
{
let
done
=
false
;
let
result
;
let
error
;
promise
.
then
(
val
=
>
{
result
=
val
;
}
err
=
>
{
error
=
err
;
}
)
.
then
(
(
)
=
>
{
done
=
true
;
}
)
;
Services
.
tm
.
spinEventLoopUntil
(
(
)
=
>
done
)
;
if
(
error
!
=
=
undefined
)
{
throw
error
;
}
return
result
;
}
createAppInfo
(
ID
name
version
platformVersion
=
"
1
.
0
"
)
{
AppInfo
.
updateAppInfo
(
{
ID
name
version
platformVersion
crashReporter
:
true
extraProps
:
{
browserTabsRemoteAutostart
:
false
}
}
)
;
this
.
appInfo
=
AppInfo
.
getAppInfo
(
)
;
}
getManifestURI
(
file
)
{
if
(
file
.
isDirectory
(
)
)
{
file
.
leafName
=
"
manifest
.
json
"
;
if
(
file
.
exists
(
)
)
{
return
NetUtil
.
newURI
(
file
)
;
}
throw
new
Error
(
"
No
manifest
file
present
"
)
;
}
let
zip
=
ZipReader
(
file
)
;
try
{
let
uri
=
NetUtil
.
newURI
(
file
)
;
if
(
zip
.
hasEntry
(
"
manifest
.
json
"
)
)
{
return
NetUtil
.
newURI
(
jar
:
{
uri
.
spec
}
!
/
manifest
.
json
)
;
}
throw
new
Error
(
"
No
manifest
file
present
"
)
;
}
finally
{
zip
.
close
(
)
;
}
}
getIDFromExtension
(
file
)
{
return
this
.
getIDFromManifest
(
this
.
getManifestURI
(
file
)
)
;
}
async
getIDFromManifest
(
manifestURI
)
{
let
body
=
await
fetch
(
manifestURI
.
spec
)
;
let
manifest
=
await
body
.
json
(
)
;
try
{
return
manifest
.
applications
.
gecko
.
id
;
}
catch
(
e
)
{
return
uuidGen
.
generateUUID
(
)
.
number
;
}
}
overrideCertDB
(
)
{
let
verifyCert
=
async
(
file
result
cert
callback
)
=
>
{
if
(
result
=
=
Cr
.
NS_ERROR_SIGNED_JAR_NOT_SIGNED
&
&
!
this
.
useRealCertChecks
&
&
callback
.
wrappedJSObject
)
{
callback
=
callback
.
wrappedJSObject
;
try
{
let
id
;
try
{
let
manifestURI
=
this
.
getManifestURI
(
file
)
;
id
=
await
this
.
getIDFromManifest
(
manifestURI
)
;
}
catch
(
err
)
{
if
(
file
.
leafName
.
endsWith
(
"
.
xpi
"
)
)
{
id
=
file
.
leafName
.
slice
(
0
-
4
)
;
}
}
let
fakeCert
=
{
commonName
:
id
}
;
if
(
this
.
usePrivilegedSignatures
)
{
let
privileged
=
typeof
this
.
usePrivilegedSignatures
=
=
"
function
"
?
this
.
usePrivilegedSignatures
(
id
)
:
this
.
usePrivilegedSignatures
;
if
(
privileged
=
=
=
"
system
"
)
{
fakeCert
.
organizationalUnit
=
"
Mozilla
Components
"
;
}
else
if
(
privileged
)
{
fakeCert
.
organizationalUnit
=
"
Mozilla
Extensions
"
;
}
}
return
[
callback
Cr
.
NS_OK
fakeCert
]
;
}
catch
(
e
)
{
}
finally
{
if
(
file
.
isFile
(
)
)
{
Services
.
obs
.
notifyObservers
(
file
"
flush
-
cache
-
entry
"
"
cert
-
override
"
)
;
}
}
}
return
[
callback
result
cert
]
;
}
;
let
FakeCertDB
=
{
init
(
)
{
for
(
let
property
of
Object
.
keys
(
this
.
_genuine
.
QueryInterface
(
Ci
.
nsIX509CertDB
)
)
)
{
if
(
property
in
this
)
{
continue
;
}
if
(
typeof
this
.
_genuine
[
property
]
=
=
"
function
"
)
{
this
[
property
]
=
this
.
_genuine
[
property
]
.
bind
(
this
.
_genuine
)
;
}
}
}
openSignedAppFileAsync
(
root
file
callback
)
{
this
.
_genuine
.
openSignedAppFileAsync
(
root
file
(
result
zipReader
cert
)
=
>
{
verifyCert
(
file
.
clone
(
)
result
cert
callback
)
.
then
(
(
[
callback
result
cert
]
)
=
>
{
callback
.
openSignedAppFileFinished
(
result
zipReader
cert
)
;
}
)
;
}
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIX509CertDB
]
)
}
;
MockRegistrar
.
register
(
CERTDB_CONTRACTID
FakeCertDB
)
;
Cc
[
CERTDB_CONTRACTID
]
.
getService
(
)
;
FakeCertDB
.
init
(
)
;
}
overrideBlocklist
(
addons
)
{
let
mock
=
new
MockBlocklist
(
addons
)
;
mock
.
register
(
)
;
return
mock
;
}
async
loadBlocklistData
(
dir
prefix
)
{
let
loadedData
=
{
}
;
for
(
let
fileSuffix
of
[
"
extensions
"
"
plugins
"
]
)
{
const
fileName
=
{
prefix
}
-
{
fileSuffix
}
.
json
;
let
jsonStr
=
await
OS
.
File
.
read
(
OS
.
Path
.
join
(
dir
.
path
fileName
)
{
encoding
:
"
UTF
-
8
"
}
)
.
catch
(
(
)
=
>
{
}
)
;
if
(
!
jsonStr
)
{
continue
;
}
this
.
info
(
Loaded
{
fileName
}
)
;
loadedData
[
fileSuffix
]
=
JSON
.
parse
(
jsonStr
)
;
}
return
this
.
loadBlocklistRawData
(
loadedData
)
;
}
async
loadBlocklistRawData
(
data
)
{
const
bsPass
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Blocklist
.
jsm
"
null
)
;
const
blocklistMapping
=
{
extensions
:
bsPass
.
ExtensionBlocklistRS
plugins
:
bsPass
.
PluginBlocklistRS
}
;
for
(
const
[
dataProp
blocklistObj
]
of
Object
.
entries
(
blocklistMapping
)
)
{
let
newData
=
data
[
dataProp
]
;
if
(
!
newData
)
{
continue
;
}
if
(
!
Array
.
isArray
(
newData
)
)
{
throw
new
Error
(
"
Expected
an
array
of
new
items
to
put
in
the
"
+
dataProp
+
"
blocklist
!
"
)
;
}
for
(
let
item
of
newData
)
{
if
(
!
item
.
id
)
{
item
.
id
=
uuidGen
.
generateUUID
(
)
.
number
.
slice
(
1
-
1
)
;
}
if
(
!
item
.
last_modified
)
{
item
.
last_modified
=
Date
.
now
(
)
;
}
}
blocklistObj
.
ensureInitialized
(
)
;
let
collection
=
await
blocklistObj
.
_client
.
openCollection
(
)
;
await
collection
.
clear
(
)
;
await
collection
.
loadDump
(
newData
)
;
await
blocklistObj
.
_onUpdate
(
)
;
}
}
async
promiseStartupManager
(
newVersion
)
{
if
(
this
.
addonIntegrationService
)
{
throw
new
Error
(
"
Attempting
to
startup
manager
that
was
already
started
.
"
)
;
}
if
(
newVersion
)
{
this
.
appInfo
.
version
=
newVersion
;
if
(
Cu
.
isModuleLoaded
(
"
resource
:
/
/
gre
/
modules
/
Blocklist
.
jsm
"
)
)
{
let
bsPassBlocklist
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Blocklist
.
jsm
"
null
)
;
Object
.
defineProperty
(
bsPassBlocklist
"
gAppVersion
"
{
value
:
newVersion
}
)
;
}
}
ExtensionAddonObserver
.
init
(
)
;
let
XPIScope
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
null
)
;
XPIScope
.
AsyncShutdown
=
MockAsyncShutdown
;
XPIScope
.
XPIInternal
.
BootstrapScope
.
prototype
.
_beforeCallBootstrapMethod
=
(
method
params
reason
)
=
>
{
try
{
this
.
emit
(
"
bootstrap
-
method
"
{
method
params
reason
}
)
;
}
catch
(
e
)
{
try
{
this
.
testScope
.
do_throw
(
e
)
;
}
catch
(
e
)
{
}
}
}
;
this
.
addonIntegrationService
=
Cc
[
"
mozilla
.
org
/
addons
/
integration
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
this
.
addonIntegrationService
.
observe
(
null
"
addons
-
startup
"
null
)
;
this
.
emit
(
"
addon
-
manager
-
started
"
)
;
await
Promise
.
all
(
XPIScope
.
XPIProvider
.
startupPromises
)
;
await
this
.
loadAddonsList
(
true
)
;
const
{
XPIProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
)
;
await
Promise
.
all
(
Array
.
from
(
XPIProvider
.
activeAddons
.
values
(
)
addon
=
>
addon
.
startupPromise
)
)
;
}
async
promiseShutdownManager
(
clearOverrides
=
true
)
{
if
(
!
this
.
addonIntegrationService
)
{
return
false
;
}
if
(
this
.
overrideEntry
&
&
clearOverrides
)
{
this
.
overrideEntry
.
destruct
(
)
;
this
.
overrideEntry
=
null
;
}
Services
.
obs
.
notifyObservers
(
null
"
quit
-
application
-
granted
"
)
;
await
MockAsyncShutdown
.
quitApplicationGranted
.
trigger
(
)
;
await
MockAsyncShutdown
.
profileBeforeChange
.
trigger
(
)
;
await
MockAsyncShutdown
.
profileChangeTeardown
.
trigger
(
)
;
this
.
emit
(
"
addon
-
manager
-
shutdown
"
)
;
this
.
addonIntegrationService
=
null
;
await
this
.
loadAddonsList
(
)
;
for
(
let
file
of
this
.
addonsList
.
xpis
)
{
Services
.
obs
.
notifyObservers
(
file
"
flush
-
cache
-
entry
"
)
;
}
this
.
appInfo
.
annotations
=
{
}
;
let
XPIscope
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
null
)
;
let
shutdownError
=
XPIscope
.
XPIDatabase
.
_saveError
;
AddonManagerPrivate
.
unregisterProvider
(
XPIscope
.
XPIProvider
)
;
Cu
.
unload
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
)
;
Cu
.
unload
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIDatabase
.
jsm
"
)
;
Cu
.
unload
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIInstall
.
jsm
"
)
;
let
ExtensionScope
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
null
)
;
ExtensionAddonObserver
.
uninit
(
)
;
ChromeUtils
.
defineModuleGetter
(
ExtensionScope
"
XPIProvider
"
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
)
;
if
(
shutdownError
)
{
throw
shutdownError
;
}
return
true
;
}
async
promiseRestartManager
(
newVersion
)
{
await
this
.
promiseShutdownManager
(
false
)
;
await
this
.
promiseStartupManager
(
newVersion
)
;
}
async
loadAddonsList
(
flush
=
false
)
{
if
(
flush
)
{
let
XPIScope
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
null
)
;
XPIScope
.
XPIStates
.
save
(
)
;
await
XPIScope
.
XPIStates
.
_jsonFile
.
_save
(
)
;
}
this
.
addonsList
=
new
AddonsList
(
this
.
addonStartup
)
;
}
recursiveMakeDir
(
path
)
{
let
paths
=
[
]
;
for
(
let
lastPath
;
path
!
=
lastPath
;
lastPath
=
path
path
=
OS
.
Path
.
dirname
(
path
)
)
{
paths
.
push
(
path
)
;
}
return
Promise
.
all
(
paths
.
reverse
(
)
.
map
(
path
=
>
OS
.
File
.
makeDir
(
path
{
ignoreExisting
:
true
}
)
.
catch
(
(
)
=
>
{
}
)
)
)
;
}
writeFilesToZip
(
zipFile
files
flags
=
0
)
{
if
(
typeof
zipFile
=
=
"
string
"
)
{
zipFile
=
nsFile
(
zipFile
)
;
}
var
zipW
=
ZipWriter
(
zipFile
FileUtils
.
MODE_WRONLY
|
FileUtils
.
MODE_CREATE
|
flags
)
;
for
(
let
[
path
data
]
of
Object
.
entries
(
files
)
)
{
if
(
typeof
data
=
=
=
"
object
"
&
&
ChromeUtils
.
getClassName
(
data
)
=
=
=
"
Object
"
)
{
data
=
JSON
.
stringify
(
data
)
;
}
if
(
!
(
data
instanceof
ArrayBuffer
)
)
{
data
=
new
TextEncoder
(
"
utf
-
8
"
)
.
encode
(
data
)
.
buffer
;
}
let
stream
=
ArrayBufferInputStream
(
data
0
data
.
byteLength
)
;
zipW
.
addEntryStream
(
path
Math
.
pow
(
2
49
)
Ci
.
nsIZipWriter
.
COMPRESSION_NONE
stream
false
)
;
}
zipW
.
close
(
)
;
}
async
promiseWriteFilesToZip
(
zip
files
flags
)
{
await
this
.
recursiveMakeDir
(
OS
.
Path
.
dirname
(
zip
)
)
;
this
.
writeFilesToZip
(
zip
files
flags
)
;
return
Promise
.
resolve
(
nsFile
(
zip
)
)
;
}
async
promiseWriteFilesToDir
(
dir
files
)
{
await
this
.
recursiveMakeDir
(
dir
)
;
for
(
let
[
path
data
]
of
Object
.
entries
(
files
)
)
{
path
=
path
.
split
(
"
/
"
)
;
let
leafName
=
path
.
pop
(
)
;
let
dirPath
=
dir
;
for
(
let
subDir
of
path
)
{
dirPath
=
OS
.
Path
.
join
(
dirPath
subDir
)
;
await
OS
.
File
.
makeDir
(
dirPath
{
ignoreExisting
:
true
}
)
;
}
if
(
typeof
data
=
=
"
object
"
&
&
ChromeUtils
.
getClassName
(
data
)
=
=
"
Object
"
)
{
data
=
JSON
.
stringify
(
data
)
;
}
if
(
typeof
data
=
=
"
string
"
)
{
data
=
new
TextEncoder
(
"
utf
-
8
"
)
.
encode
(
data
)
;
}
await
OS
.
File
.
writeAtomic
(
OS
.
Path
.
join
(
dirPath
leafName
)
data
)
;
}
return
nsFile
(
dir
)
;
}
promiseWriteFilesToExtension
(
dir
id
files
unpacked
=
this
.
testUnpacked
)
{
if
(
unpacked
)
{
let
path
=
OS
.
Path
.
join
(
dir
id
)
;
return
this
.
promiseWriteFilesToDir
(
path
files
)
;
}
let
xpi
=
OS
.
Path
.
join
(
dir
{
id
}
.
xpi
)
;
return
this
.
promiseWriteFilesToZip
(
xpi
files
)
;
}
tempXPIs
:
[
]
allocTempXPIFile
(
)
{
let
file
=
this
.
tempDir
.
clone
(
)
;
let
uuid
=
uuidGen
.
generateUUID
(
)
.
number
.
slice
(
1
-
1
)
;
file
.
append
(
{
uuid
}
.
xpi
)
;
this
.
tempXPIs
.
push
(
file
)
;
return
file
;
}
createTempXPIFile
(
files
)
{
let
file
=
this
.
allocTempXPIFile
(
)
;
this
.
writeFilesToZip
(
file
.
path
files
)
;
return
file
;
}
createTempWebExtensionFile
(
data
)
{
let
file
=
ExtensionTestCommon
.
generateXPI
(
data
)
;
this
.
tempXPIs
.
push
(
file
)
;
return
file
;
}
promiseInstallXPI
(
files
)
{
return
this
.
promiseInstallFile
(
this
.
createTempXPIFile
(
files
)
)
;
}
promiseWriteProxyFileToDir
(
dir
addon
id
)
{
let
files
=
{
[
id
]
:
addon
.
path
}
;
return
this
.
promiseWriteFilesToDir
(
dir
.
path
files
)
;
}
async
manuallyInstall
(
xpiFile
installLocation
=
this
.
profileExtensions
id
=
null
unpacked
=
this
.
testUnpacked
)
{
if
(
id
=
=
null
)
{
id
=
await
this
.
getIDFromExtension
(
xpiFile
)
;
}
if
(
unpacked
)
{
let
dir
=
installLocation
.
clone
(
)
;
dir
.
append
(
id
)
;
dir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
let
zip
=
ZipReader
(
xpiFile
)
;
for
(
let
entry
of
zip
.
findEntries
(
null
)
)
{
let
target
=
dir
.
clone
(
)
;
for
(
let
part
of
entry
.
split
(
"
/
"
)
)
{
target
.
append
(
part
)
;
}
if
(
!
target
.
parent
.
exists
(
)
)
{
target
.
parent
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
try
{
zip
.
extract
(
entry
target
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_FILE_DIR_NOT_EMPTY
&
&
!
(
target
.
exists
(
)
&
&
target
.
isDirectory
(
)
)
)
{
throw
e
;
}
}
target
.
permissions
|
=
FileUtils
.
PERMS_FILE
;
}
zip
.
close
(
)
;
return
dir
;
}
let
target
=
installLocation
.
clone
(
)
;
target
.
append
(
{
id
}
.
xpi
)
;
xpiFile
.
copyTo
(
target
.
parent
target
.
leafName
)
;
return
target
;
}
manuallyUninstall
(
installLocation
id
unpacked
=
this
.
testUnpacked
)
{
let
file
=
this
.
getFileForAddon
(
installLocation
id
unpacked
)
;
if
(
file
.
isFile
(
)
)
{
Services
.
obs
.
notifyObservers
(
file
"
flush
-
cache
-
entry
"
)
;
}
file
.
remove
(
true
)
;
}
getFileForAddon
(
dir
id
unpacked
=
this
.
testUnpacked
)
{
dir
=
dir
.
clone
(
)
;
if
(
unpacked
)
{
dir
.
append
(
id
)
;
}
else
{
dir
.
append
(
{
id
}
.
xpi
)
;
}
return
dir
;
}
setExtensionModifiedTime
(
ext
time
)
{
ext
.
lastModifiedTime
=
time
;
if
(
ext
.
isDirectory
(
)
)
{
for
(
let
file
of
this
.
iterDirectory
(
ext
)
)
{
this
.
setExtensionModifiedTime
(
file
time
)
;
}
}
}
async
promiseSetExtensionModifiedTime
(
path
time
)
{
await
OS
.
File
.
setDates
(
path
time
time
)
;
let
iterator
=
new
OS
.
File
.
DirectoryIterator
(
path
)
;
try
{
await
iterator
.
forEach
(
entry
=
>
{
return
this
.
promiseSetExtensionModifiedTime
(
entry
.
path
time
)
;
}
)
;
}
catch
(
ex
)
{
if
(
ex
instanceof
OS
.
File
.
Error
)
{
return
;
}
throw
ex
;
}
finally
{
iterator
.
close
(
)
.
catch
(
(
)
=
>
{
}
)
;
}
}
registerDirectory
(
key
dir
)
{
var
dirProvider
=
{
getFile
(
prop
persistent
)
{
persistent
.
value
=
false
;
if
(
prop
=
=
key
)
{
return
dir
.
clone
(
)
;
}
return
null
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIDirectoryServiceProvider
]
)
}
;
Services
.
dirsvc
.
registerProvider
(
dirProvider
)
;
try
{
Services
.
dirsvc
.
undefine
(
key
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_FAILURE
)
{
throw
e
;
}
}
}
promiseAddonEvent
(
event
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
[
event
]
(
.
.
.
args
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
args
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
}
)
;
}
promiseInstallEvent
(
event
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
[
event
]
(
.
.
.
args
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
args
)
;
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
promiseCompleteInstall
(
install
)
{
let
listener
;
return
new
Promise
(
resolve
=
>
{
listener
=
{
onDownloadFailed
:
resolve
onDownloadCancelled
:
resolve
onInstallFailed
:
resolve
onInstallCancelled
:
resolve
onInstallEnded
:
resolve
onInstallPostponed
:
resolve
}
;
install
.
addListener
(
listener
)
;
install
.
install
(
)
;
}
)
.
then
(
(
)
=
>
{
install
.
removeListener
(
listener
)
;
return
install
;
}
)
;
}
async
promiseInstallFile
(
file
ignoreIncompatible
=
false
installTelemetryInfo
)
{
let
install
=
await
AddonManager
.
getInstallForFile
(
file
null
installTelemetryInfo
)
;
if
(
!
install
)
{
throw
new
Error
(
No
AddonInstall
created
for
{
file
.
path
}
)
;
}
if
(
install
.
state
!
=
AddonManager
.
STATE_DOWNLOADED
)
{
throw
new
Error
(
Expected
file
to
be
downloaded
for
install
of
{
file
.
path
}
)
;
}
if
(
ignoreIncompatible
&
&
install
.
addon
.
appDisabled
)
{
return
null
;
}
await
install
.
install
(
)
;
return
install
;
}
promiseInstallAllFiles
(
files
ignoreIncompatible
=
false
)
{
return
Promise
.
all
(
Array
.
from
(
files
file
=
>
this
.
promiseInstallFile
(
file
ignoreIncompatible
)
)
)
;
}
promiseCompleteAllInstalls
(
installs
)
{
return
Promise
.
all
(
Array
.
from
(
installs
this
.
promiseCompleteInstall
)
)
;
}
updateReason
:
AddonManager
.
UPDATE_WHEN_PERIODIC_UPDATE
promiseFindAddonUpdates
(
addon
reason
=
AddonTestUtils
.
updateReason
.
.
.
args
)
{
let
equal
=
this
.
testScope
.
equal
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
result
=
{
}
;
addon
.
findUpdates
(
{
onNoCompatibilityUpdateAvailable
(
addon2
)
{
if
(
"
compatibilityUpdate
"
in
result
)
{
throw
new
Error
(
"
Saw
multiple
compatibility
update
events
"
)
;
}
equal
(
addon
addon2
"
onNoCompatibilityUpdateAvailable
"
)
;
result
.
compatibilityUpdate
=
false
;
}
onCompatibilityUpdateAvailable
(
addon2
)
{
if
(
"
compatibilityUpdate
"
in
result
)
{
throw
new
Error
(
"
Saw
multiple
compatibility
update
events
"
)
;
}
equal
(
addon
addon2
"
onCompatibilityUpdateAvailable
"
)
;
result
.
compatibilityUpdate
=
true
;
}
onNoUpdateAvailable
(
addon2
)
{
if
(
"
updateAvailable
"
in
result
)
{
throw
new
Error
(
"
Saw
multiple
update
available
events
"
)
;
}
equal
(
addon
addon2
"
onNoUpdateAvailable
"
)
;
result
.
updateAvailable
=
false
;
}
onUpdateAvailable
(
addon2
install
)
{
if
(
"
updateAvailable
"
in
result
)
{
throw
new
Error
(
"
Saw
multiple
update
available
events
"
)
;
}
equal
(
addon
addon2
"
onUpdateAvailable
"
)
;
result
.
updateAvailable
=
install
;
}
onUpdateFinished
(
addon2
error
)
{
equal
(
addon
addon2
"
onUpdateFinished
"
)
;
if
(
error
=
=
AddonManager
.
UPDATE_STATUS_NO_ERROR
)
{
resolve
(
result
)
;
}
else
{
result
.
error
=
error
;
reject
(
result
)
;
}
}
}
reason
.
.
.
args
)
;
}
)
;
}
async
promiseConsoleOutput
(
task
)
{
const
DONE
=
"
=
=
=
xpcshell
test
console
listener
done
=
=
=
"
;
let
listener
messages
=
[
]
;
let
awaitListener
=
new
Promise
(
resolve
=
>
{
listener
=
msg
=
>
{
if
(
msg
=
=
DONE
)
{
resolve
(
)
;
}
else
{
msg
instanceof
Ci
.
nsIScriptError
;
messages
.
push
(
msg
)
;
}
}
;
}
)
;
Services
.
console
.
registerListener
(
listener
)
;
try
{
let
result
=
await
task
(
)
;
Services
.
console
.
logStringMessage
(
DONE
)
;
await
awaitListener
;
return
{
messages
result
}
;
}
finally
{
Services
.
console
.
unregisterListener
(
listener
)
;
}
}
checkMessages
(
messages
{
expected
=
[
]
forbidden
=
[
]
forbidUnexpected
=
false
}
)
{
function
msgMatches
(
msg
expectedMsg
)
{
for
(
let
[
prop
pattern
]
of
Object
.
entries
(
expectedMsg
)
)
{
if
(
isRegExp
(
pattern
)
&
&
typeof
msg
[
prop
]
=
=
=
"
string
"
)
{
if
(
!
pattern
.
test
(
msg
[
prop
]
)
)
{
return
false
;
}
}
else
if
(
msg
[
prop
]
!
=
=
pattern
)
{
return
false
;
}
}
return
true
;
}
let
i
=
0
;
for
(
let
msg
of
messages
)
{
if
(
forbidden
.
some
(
pat
=
>
msgMatches
(
msg
pat
)
)
)
{
this
.
testScope
.
ok
(
false
Got
forbidden
console
message
:
{
msg
}
)
;
continue
;
}
if
(
i
<
expected
.
length
&
&
msgMatches
(
msg
expected
[
i
]
)
)
{
this
.
info
(
Matched
expected
console
message
:
{
msg
}
)
;
i
+
+
;
}
else
if
(
forbidUnexpected
)
{
this
.
testScope
.
ok
(
false
Got
unexpected
console
message
:
{
msg
}
)
;
}
}
for
(
let
pat
of
expected
.
slice
(
i
)
)
{
this
.
testScope
.
ok
(
false
Did
not
get
expected
console
message
:
{
uneval
(
pat
)
}
)
;
}
}
checkInstallInfo
(
addonOrInstall
expectedInstallInfo
)
{
const
installInfo
=
addonOrInstall
.
installTelemetryInfo
;
const
{
Assert
}
=
this
.
testScope
;
for
(
const
key
of
Object
.
keys
(
expectedInstallInfo
)
)
{
const
actual
=
installInfo
[
key
]
;
let
expected
=
expectedInstallInfo
[
key
]
;
if
(
expected
&
&
typeof
expected
.
test
=
=
"
function
"
)
{
Assert
.
ok
(
expected
.
test
(
actual
)
{
key
}
value
"
{
actual
}
"
has
the
value
expected
:
"
{
expected
}
"
)
;
}
else
{
Assert
.
deepEqual
(
actual
expected
Got
the
expected
value
for
{
key
}
)
;
}
}
}
promiseWebExtensionStartup
(
id
)
{
return
new
Promise
(
resolve
=
>
{
Management
.
on
(
"
ready
"
function
listener
(
event
extension
)
{
if
(
!
id
|
|
extension
.
id
=
=
id
)
{
Management
.
off
(
"
ready
"
listener
)
;
resolve
(
extension
)
;
}
}
)
;
}
)
;
}
async
waitForSearchProviderStartup
(
extension
{
expectPending
=
false
}
=
{
}
)
{
let
{
equal
ok
}
=
this
.
testScope
;
if
(
!
equal
|
|
!
ok
)
{
let
{
Assert
}
=
this
.
testScope
;
equal
=
Assert
.
equal
.
bind
(
Assert
)
;
ok
=
Assert
.
ok
.
bind
(
Assert
)
;
}
equal
(
extension
.
state
"
running
"
"
Search
provider
extension
should
be
running
"
)
;
ok
(
extension
.
id
"
Extension
ID
of
search
provider
should
be
set
"
)
;
let
{
pendingSearchSetupTasks
}
=
Management
.
global
;
let
searchStartupPromise
=
pendingSearchSetupTasks
.
get
(
extension
.
id
)
;
if
(
expectPending
)
{
ok
(
searchStartupPromise
"
Search
provider
registration
should
be
in
progress
"
)
;
}
return
searchStartupPromise
;
}
initializeURLPreloader
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_DISABLE_SECURITY
true
)
;
aomStartup
.
initializeURLPreloader
(
)
;
}
async
overrideBuiltIns
(
data
)
{
let
prevPrefVal
=
Services
.
prefs
.
getBoolPref
(
PREF_DISABLE_SECURITY
false
)
;
this
.
initializeURLPreloader
(
)
;
let
file
=
this
.
tempDir
.
clone
(
)
;
file
.
append
(
"
override
.
txt
"
)
;
this
.
tempXPIs
.
push
(
file
)
;
let
manifest
=
Services
.
io
.
newFileURI
(
file
)
;
await
OS
.
File
.
writeAtomic
(
file
.
path
new
TextEncoder
(
)
.
encode
(
JSON
.
stringify
(
data
)
)
)
;
this
.
overrideEntry
=
aomStartup
.
registerChrome
(
manifest
[
[
"
override
"
"
chrome
:
/
/
browser
/
content
/
built_in_addons
.
json
"
Services
.
io
.
newFileURI
(
file
)
.
spec
]
]
)
;
Services
.
prefs
.
setBoolPref
(
PREF_DISABLE_SECURITY
prevPrefVal
)
;
}
hookAMTelemetryEvents
(
)
{
let
originalRecordEvent
=
AMTelemetry
.
recordEvent
;
AMTelemetry
.
recordEvent
=
event
=
>
{
this
.
collectedTelemetryEvents
.
push
(
event
)
;
}
;
this
.
testScope
.
registerCleanupFunction
(
(
)
=
>
{
this
.
testScope
.
Assert
.
deepEqual
(
[
]
this
.
collectedTelemetryEvents
"
No
unexamined
telemetry
events
after
test
is
finished
"
)
;
AMTelemetry
.
recordEvent
=
originalRecordEvent
;
}
)
;
}
getAMTelemetryEvents
(
)
{
let
events
=
this
.
collectedTelemetryEvents
;
this
.
collectedTelemetryEvents
=
[
]
;
return
events
;
}
}
;
for
(
let
[
key
val
]
of
Object
.
entries
(
AddonTestUtils
)
)
{
if
(
typeof
val
=
=
"
function
"
)
{
AddonTestUtils
[
key
]
=
val
.
bind
(
AddonTestUtils
)
;
}
}
EventEmitter
.
decorate
(
AddonTestUtils
)
;
