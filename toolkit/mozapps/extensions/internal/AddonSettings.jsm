"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AddonSettings
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
PREF_SIGNATURES_REQUIRED
=
"
xpinstall
.
signatures
.
required
"
;
const
PREF_LANGPACK_SIGNATURES
=
"
extensions
.
langpacks
.
signatures
.
required
"
;
const
PREF_ALLOW_EXPERIMENTS
=
"
extensions
.
experiments
.
enabled
"
;
const
PREF_IS_EMBEDDED
=
"
extensions
.
isembedded
"
;
var
AddonSettings
=
{
}
;
function
makeConstant
(
name
value
)
{
Object
.
defineProperty
(
AddonSettings
name
{
configurable
:
false
enumerable
:
false
writable
:
false
value
}
)
;
}
if
(
AppConstants
.
MOZ_REQUIRE_SIGNING
&
&
!
Cu
.
isInAutomation
)
{
makeConstant
(
"
REQUIRE_SIGNING
"
true
)
;
makeConstant
(
"
LANGPACKS_REQUIRE_SIGNING
"
true
)
;
}
else
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
AddonSettings
"
REQUIRE_SIGNING
"
PREF_SIGNATURES_REQUIRED
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
AddonSettings
"
LANGPACKS_REQUIRE_SIGNING
"
PREF_LANGPACK_SIGNATURES
false
)
;
}
if
(
Cu
.
isInAutomation
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
AddonSettings
"
IS_EMBEDDED
"
PREF_IS_EMBEDDED
false
)
;
}
else
{
makeConstant
(
"
IS_EMBEDDED
"
AppConstants
.
platform
=
=
=
"
android
"
)
;
}
if
(
!
AppConstants
.
MOZ_REQUIRE_SIGNING
|
|
AppConstants
.
NIGHTLY_BUILD
|
|
AppConstants
.
MOZ_DEV_EDITION
|
|
Cu
.
isInAutomation
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
AddonSettings
"
EXPERIMENTS_ENABLED
"
PREF_ALLOW_EXPERIMENTS
true
)
;
}
else
{
makeConstant
(
"
EXPERIMENTS_ENABLED
"
false
)
;
}
if
(
AppConstants
.
MOZ_DEV_EDITION
)
{
makeConstant
(
"
DEFAULT_THEME_ID
"
"
firefox
-
compact
-
dark
mozilla
.
org
"
)
;
}
else
{
makeConstant
(
"
DEFAULT_THEME_ID
"
"
default
-
theme
mozilla
.
org
"
)
;
}
