PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Message
manager
disconnected
/
)
;
let
scopes
=
AddonManager
.
SCOPE_PROFILE
|
AddonManager
.
SCOPE_APPLICATION
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
scopes
)
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
const
IGNORE_ID
=
"
system_delay_ignore
tests
.
mozilla
.
org
"
;
const
COMPLETE_ID
=
"
system_delay_complete
tests
.
mozilla
.
org
"
;
const
DEFER_ID
=
"
system_delay_defer
tests
.
mozilla
.
org
"
;
const
DEFER2_ID
=
"
system_delay_defer2
tests
.
mozilla
.
org
"
;
const
DEFER_ALSO_ID
=
"
system_delay_defer_also
tests
.
mozilla
.
org
"
;
const
NORMAL_ID
=
"
system1
tests
.
mozilla
.
org
"
;
const
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
]
)
;
distroDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
registerDirectory
(
"
XREAppFeat
"
distroDir
)
;
registerCleanupFunction
(
(
)
=
>
{
distroDir
.
remove
(
true
)
;
}
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
(
)
=
>
"
system
"
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
function
promiseInstallPostponed
(
addonID1
addonID2
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
seen
=
[
]
;
let
listener
=
{
onInstallFailed
:
(
)
=
>
{
AddonManager
.
removeInstallListener
(
listener
)
;
reject
(
"
extension
installation
should
not
have
failed
"
)
;
}
onInstallEnded
:
install
=
>
{
AddonManager
.
removeInstallListener
(
listener
)
;
reject
(
extension
installation
should
not
have
ended
for
{
install
.
addon
.
id
}
)
;
}
onInstallPostponed
:
install
=
>
{
seen
.
push
(
install
.
addon
.
id
)
;
if
(
seen
.
includes
(
addonID1
)
&
&
seen
.
includes
(
addonID2
)
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
)
;
}
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
function
promiseInstallResumed
(
addonID1
addonID2
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
seenPostponed
=
[
]
;
let
seenEnded
=
[
]
;
let
listener
=
{
onInstallFailed
:
(
)
=
>
{
AddonManager
.
removeInstallListener
(
listener
)
;
reject
(
"
extension
installation
should
not
have
failed
"
)
;
}
onInstallEnded
:
install
=
>
{
seenEnded
.
push
(
install
.
addon
.
id
)
;
if
(
seenEnded
.
includes
(
addonID1
)
&
&
seenEnded
.
includes
(
addonID2
)
&
&
seenPostponed
.
includes
(
addonID1
)
&
&
seenPostponed
.
includes
(
addonID2
)
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
)
;
}
}
onInstallPostponed
:
install
=
>
{
seenPostponed
.
push
(
install
.
addon
.
id
)
;
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
function
promiseInstallDeferred
(
addonID1
addonID2
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
seenEnded
=
[
]
;
let
listener
=
{
onInstallFailed
:
(
)
=
>
{
AddonManager
.
removeInstallListener
(
listener
)
;
reject
(
"
extension
installation
should
not
have
failed
"
)
;
}
onInstallEnded
:
install
=
>
{
seenEnded
.
push
(
install
.
addon
.
id
)
;
if
(
seenEnded
.
includes
(
addonID1
)
&
&
seenEnded
.
includes
(
addonID2
)
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
)
;
}
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
async
function
checkAddon
(
addonID
{
version
}
)
{
let
addon
=
await
promiseAddonByID
(
addonID
)
;
Assert
.
notEqual
(
addon
null
)
;
Assert
.
equal
(
addon
.
version
version
)
;
Assert
.
ok
(
addon
.
isCompatible
)
;
Assert
.
ok
(
!
addon
.
appDisabled
)
;
Assert
.
ok
(
addon
.
isActive
)
;
Assert
.
equal
(
addon
.
type
"
extension
"
)
;
}
async
function
test_addon_upgrade_on_restart
(
{
asBuiltIn
}
=
{
}
)
{
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
"
"
)
;
function
background
(
)
{
browser
.
runtime
.
onUpdateAvailable
.
addListener
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
got
-
update
"
)
;
}
)
;
}
if
(
asBuiltIn
)
{
await
setupBuiltinExtension
(
{
background
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
IGNORE_ID
}
}
}
}
"
test
-
systemaddon
-
ignore
"
)
;
await
setupBuiltinExtension
(
{
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
NORMAL_ID
}
}
}
}
"
test
-
systemaddon
-
normal
"
)
;
await
overrideBuiltIns
(
{
builtins
:
[
{
addon_id
:
IGNORE_ID
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
test
-
systemaddon
-
ignore
/
}
{
addon_id
:
NORMAL_ID
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
test
-
systemaddon
-
normal
/
}
]
}
)
;
}
else
{
let
xpi
=
await
getSystemAddonXPI
(
1
"
1
.
0
"
)
;
xpi
.
copyTo
(
distroDir
{
NORMAL_ID
}
.
xpi
)
;
xpi
=
await
createTempWebExtensionFile
(
{
background
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
IGNORE_ID
}
}
}
}
)
;
xpi
.
copyTo
(
distroDir
{
IGNORE_ID
}
.
xpi
)
;
await
overrideBuiltIns
(
{
system
:
[
IGNORE_ID
NORMAL_ID
]
}
)
;
}
let
xpi2
=
await
createTempWebExtensionFile
(
{
manifest
:
{
version
:
"
2
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
IGNORE_ID
}
}
}
}
)
;
let
extension
=
ExtensionTestUtils
.
expectExtension
(
IGNORE_ID
)
;
await
Promise
.
all
(
[
promiseStartupManager
(
)
extension
.
awaitStartup
(
)
]
)
;
let
updateList
=
[
{
id
:
IGNORE_ID
version
:
"
2
.
0
"
path
:
"
system_delay_ignore_2
.
xpi
"
xpi
:
xpi2
}
{
id
:
NORMAL_ID
version
:
"
2
.
0
"
path
:
"
system1_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
1
"
2
.
0
"
)
}
]
;
await
Promise
.
all
(
[
promiseInstallPostponed
(
IGNORE_ID
NORMAL_ID
)
installSystemAddons
(
buildSystemAddonUpdates
(
updateList
)
)
extension
.
awaitMessage
(
"
got
-
update
"
)
]
)
;
await
checkAddon
(
IGNORE_ID
{
version
:
"
1
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
1
.
0
"
}
)
;
await
Promise
.
all
(
[
promiseRestartManager
(
)
extension
.
awaitStartup
(
)
]
)
;
await
checkAddon
(
IGNORE_ID
{
version
:
"
2
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
2
.
0
"
}
)
;
await
promiseShutdownManager
(
)
;
extension
.
destroy
(
)
;
}
add_task
(
async
function
test_systemaddon_upgrade_on_restart_xpi
(
)
{
info
(
"
Test
on
a
systemaddon
xpi
installed
in
app
-
system
-
defaults
location
"
)
;
await
test_addon_upgrade_on_restart
(
{
asBuiltIn
:
false
}
)
;
}
)
;
add_task
(
async
function
test_systemaddon_upgrade_on_restart_builtin
(
)
{
info
(
"
Test
on
a
systemaddon
bundled
in
the
omni
jar
"
)
;
await
test_addon_upgrade_on_restart
(
{
asBuiltIn
:
true
}
)
;
}
)
;
async
function
test_addon_upgrade_on_reload
(
{
asBuiltIn
=
true
}
=
{
}
)
{
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
"
"
)
;
function
background
(
)
{
browser
.
runtime
.
onUpdateAvailable
.
addListener
(
function
listener
(
)
{
browser
.
runtime
.
onUpdateAvailable
.
removeListener
(
listener
)
;
browser
.
test
.
sendMessage
(
"
got
-
update
"
)
;
browser
.
runtime
.
reload
(
)
;
}
)
;
}
let
xpi2
=
await
createTempWebExtensionFile
(
{
manifest
:
{
version
:
"
2
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
COMPLETE_ID
}
}
}
}
)
;
if
(
asBuiltIn
)
{
await
setupBuiltinExtension
(
{
background
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
COMPLETE_ID
}
}
}
}
"
test
-
systemaddon
-
complete
"
)
;
await
setupBuiltinExtension
(
{
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
NORMAL_ID
}
}
}
}
"
test
-
systemaddon
-
normal
"
)
;
await
overrideBuiltIns
(
{
builtins
:
[
{
addon_id
:
COMPLETE_ID
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
test
-
systemaddon
-
complete
/
}
{
addon_id
:
NORMAL_ID
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
test
-
systemaddon
-
normal
/
}
]
}
)
;
}
else
{
let
xpi
=
await
getSystemAddonXPI
(
1
"
1
.
0
"
)
;
xpi
.
copyTo
(
distroDir
{
NORMAL_ID
}
.
xpi
)
;
xpi
=
await
createTempWebExtensionFile
(
{
background
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
COMPLETE_ID
}
}
}
}
)
;
xpi
.
copyTo
(
distroDir
{
COMPLETE_ID
}
.
xpi
)
;
await
overrideBuiltIns
(
{
system
:
[
COMPLETE_ID
NORMAL_ID
]
}
)
;
}
let
extension
=
ExtensionTestUtils
.
expectExtension
(
COMPLETE_ID
)
;
await
Promise
.
all
(
[
promiseStartupManager
(
)
extension
.
awaitStartup
(
)
]
)
;
let
updateList
=
[
{
id
:
COMPLETE_ID
version
:
"
2
.
0
"
path
:
"
system_delay_complete_2
.
xpi
"
xpi
:
xpi2
}
{
id
:
NORMAL_ID
version
:
"
2
.
0
"
path
:
"
system1_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
1
"
2
.
0
"
)
}
]
;
await
checkAddon
(
COMPLETE_ID
{
version
:
"
1
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
1
.
0
"
}
)
;
await
Promise
.
all
(
[
extension
.
awaitMessage
(
"
got
-
update
"
)
promiseInstallResumed
(
COMPLETE_ID
NORMAL_ID
)
installSystemAddons
(
buildSystemAddonUpdates
(
updateList
)
)
]
)
;
await
extension
.
awaitStartup
(
)
;
await
checkAddon
(
COMPLETE_ID
{
version
:
"
2
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
2
.
0
"
}
)
;
await
Promise
.
all
(
[
promiseRestartManager
(
)
extension
.
awaitStartup
(
)
]
)
;
await
checkAddon
(
COMPLETE_ID
{
version
:
"
2
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
2
.
0
"
}
)
;
await
promiseShutdownManager
(
)
;
extension
.
destroy
(
)
;
}
add_task
(
async
function
test_systemaddon_upgrade_on_reload_xpi
(
)
{
info
(
"
Test
on
a
systemaddon
xpi
installed
in
app
-
system
-
defaults
location
"
)
;
await
test_addon_upgrade_on_reload
(
{
asBuiltIn
:
false
}
)
;
}
)
;
add_task
(
async
function
test_systemaddon_upgrade_on_reload_builtin
(
)
{
info
(
"
Test
on
a
systemaddon
bundled
in
the
omni
jar
"
)
;
await
test_addon_upgrade_on_reload
(
{
asBuiltIn
:
true
}
)
;
}
)
;
function
delayBackground
(
)
{
browser
.
test
.
onMessage
.
addListener
(
msg
=
>
{
if
(
msg
!
=
=
"
reload
"
)
{
browser
.
test
.
fail
(
Got
unexpected
test
message
:
{
msg
}
)
;
}
browser
.
runtime
.
reload
(
)
;
}
)
;
browser
.
runtime
.
onUpdateAvailable
.
addListener
(
async
function
listener
(
)
{
browser
.
runtime
.
onUpdateAvailable
.
removeListener
(
listener
)
;
browser
.
test
.
sendMessage
(
"
got
-
update
"
)
;
}
)
;
}
async
function
test_addon_upgrade_after_pause
(
{
asBuiltIn
=
true
}
=
{
}
)
{
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
"
"
)
;
if
(
asBuiltIn
)
{
await
setupBuiltinExtension
(
{
background
:
delayBackground
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER_ID
}
}
}
}
"
test
-
systemaddon
-
defer
"
)
;
await
setupBuiltinExtension
(
{
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
NORMAL_ID
}
}
}
}
"
test
-
systemaddon
-
normal
"
)
;
await
overrideBuiltIns
(
{
builtins
:
[
{
addon_id
:
DEFER_ID
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
test
-
systemaddon
-
defer
/
}
{
addon_id
:
NORMAL_ID
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
test
-
systemaddon
-
normal
/
}
]
}
)
;
}
else
{
let
xpi
=
await
getSystemAddonXPI
(
1
"
1
.
0
"
)
;
xpi
.
copyTo
(
distroDir
{
NORMAL_ID
}
.
xpi
)
;
xpi
=
await
createTempWebExtensionFile
(
{
background
:
delayBackground
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER_ID
}
}
}
}
)
;
xpi
.
copyTo
(
distroDir
{
DEFER_ID
}
.
xpi
)
;
await
overrideBuiltIns
(
{
system
:
[
DEFER_ID
NORMAL_ID
]
}
)
;
}
let
xpi2
=
await
createTempWebExtensionFile
(
{
manifest
:
{
version
:
"
2
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER_ID
}
}
}
}
)
;
let
extension
=
ExtensionTestUtils
.
expectExtension
(
DEFER_ID
)
;
await
Promise
.
all
(
[
promiseStartupManager
(
)
extension
.
awaitStartup
(
)
]
)
;
let
updateList
=
[
{
id
:
DEFER_ID
version
:
"
2
.
0
"
path
:
"
system_delay_defer_2
.
xpi
"
xpi
:
xpi2
}
{
id
:
NORMAL_ID
version
:
"
2
.
0
"
path
:
"
system1_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
1
"
2
.
0
"
)
}
]
;
await
Promise
.
all
(
[
promiseInstallPostponed
(
DEFER_ID
NORMAL_ID
)
installSystemAddons
(
buildSystemAddonUpdates
(
updateList
)
)
extension
.
awaitMessage
(
"
got
-
update
"
)
]
)
;
await
checkAddon
(
DEFER_ID
{
version
:
"
1
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
1
.
0
"
}
)
;
let
deferred
=
promiseInstallDeferred
(
DEFER_ID
NORMAL_ID
)
;
extension
.
setRestarting
(
)
;
extension
.
sendMessage
(
"
reload
"
)
;
await
Promise
.
all
(
[
deferred
extension
.
awaitStartup
(
)
]
)
;
await
checkAddon
(
DEFER_ID
{
version
:
"
2
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
2
.
0
"
}
)
;
await
promiseRestartManager
(
)
;
await
extension
.
awaitStartup
(
)
;
await
checkAddon
(
DEFER_ID
{
version
:
"
2
.
0
"
}
)
;
await
checkAddon
(
NORMAL_ID
{
version
:
"
2
.
0
"
}
)
;
await
promiseShutdownManager
(
)
;
extension
.
destroy
(
)
;
}
add_task
(
async
function
test_systemaddon_upgrade_after_pause_xpi
(
)
{
info
(
"
Test
on
a
systemaddon
xpi
installed
in
app
-
system
-
defaults
location
"
)
;
await
test_addon_upgrade_after_pause
(
{
asBuiltIn
:
false
}
)
;
}
)
;
add_task
(
async
function
test_systemaddon_upgrade_after_pause_builtin
(
)
{
info
(
"
Test
on
a
systemaddon
bundled
in
the
omni
jar
"
)
;
await
test_addon_upgrade_after_pause
(
{
asBuiltIn
:
true
}
)
;
}
)
;
async
function
test_multiple_addon_upgrade_postpone
(
{
asBuiltIn
=
true
}
=
{
}
)
{
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
"
"
)
;
let
updateList
=
[
]
;
let
xpi
;
let
overrideBuiltInsData
=
{
system
:
[
]
builtins
:
[
]
}
;
if
(
asBuiltIn
)
{
await
setupBuiltinExtension
(
{
background
:
delayBackground
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER2_ID
}
}
}
}
"
test
-
systemaddon
-
defer2
"
)
;
overrideBuiltInsData
.
builtins
.
push
(
{
addon_id
:
DEFER2_ID
addon_version
:
"
1
.
0
"
res_url
:
"
resource
:
/
/
test
-
systemaddon
-
defer2
/
"
}
)
;
}
else
{
xpi
=
await
createTempWebExtensionFile
(
{
background
:
delayBackground
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER2_ID
}
}
}
}
)
;
xpi
.
copyTo
(
distroDir
{
DEFER2_ID
}
.
xpi
)
;
overrideBuiltInsData
.
system
.
push
(
DEFER2_ID
)
;
}
xpi
=
await
createTempWebExtensionFile
(
{
manifest
:
{
version
:
"
2
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER2_ID
}
}
}
}
)
;
updateList
.
push
(
{
id
:
DEFER2_ID
version
:
"
2
.
0
"
path
:
"
system_delay_defer_2
.
xpi
"
xpi
}
)
;
if
(
asBuiltIn
)
{
await
setupBuiltinExtension
(
{
background
:
delayBackground
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER_ALSO_ID
}
}
}
}
"
test
-
systemaddon
-
defer
-
also
"
)
;
overrideBuiltInsData
.
builtins
.
push
(
{
addon_id
:
DEFER_ALSO_ID
addon_version
:
"
1
.
0
"
res_url
:
"
resource
:
/
/
test
-
systemaddon
-
defer
-
also
/
"
}
)
;
}
else
{
xpi
=
await
createTempWebExtensionFile
(
{
background
:
delayBackground
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER_ALSO_ID
}
}
}
}
)
;
xpi
.
copyTo
(
distroDir
{
DEFER_ALSO_ID
}
.
xpi
)
;
overrideBuiltInsData
.
system
.
push
(
DEFER_ALSO_ID
)
;
}
xpi
=
await
createTempWebExtensionFile
(
{
manifest
:
{
version
:
"
2
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
DEFER_ALSO_ID
}
}
}
}
)
;
updateList
.
push
(
{
id
:
DEFER_ALSO_ID
version
:
"
2
.
0
"
path
:
"
system_delay_defer_also_2
.
xpi
"
xpi
}
)
;
await
overrideBuiltIns
(
overrideBuiltInsData
)
;
let
extension1
=
ExtensionTestUtils
.
expectExtension
(
DEFER2_ID
)
;
let
extension2
=
ExtensionTestUtils
.
expectExtension
(
DEFER_ALSO_ID
)
;
await
Promise
.
all
(
[
promiseStartupManager
(
)
extension1
.
awaitStartup
(
)
extension2
.
awaitStartup
(
)
]
)
;
await
Promise
.
all
(
[
promiseInstallPostponed
(
DEFER2_ID
DEFER_ALSO_ID
)
installSystemAddons
(
buildSystemAddonUpdates
(
updateList
)
)
extension1
.
awaitMessage
(
"
got
-
update
"
)
extension2
.
awaitMessage
(
"
got
-
update
"
)
]
)
;
await
checkAddon
(
DEFER2_ID
{
version
:
"
1
.
0
"
}
)
;
await
checkAddon
(
DEFER_ALSO_ID
{
version
:
"
1
.
0
"
}
)
;
let
deferred
=
promiseInstallDeferred
(
DEFER2_ID
DEFER_ALSO_ID
)
;
extension1
.
setRestarting
(
)
;
extension1
.
sendMessage
(
"
reload
"
)
;
await
checkAddon
(
DEFER2_ID
{
version
:
"
1
.
0
"
}
)
;
await
checkAddon
(
DEFER_ALSO_ID
{
version
:
"
1
.
0
"
}
)
;
extension2
.
setRestarting
(
)
;
extension2
.
sendMessage
(
"
reload
"
)
;
await
Promise
.
all
(
[
deferred
extension1
.
awaitStartup
(
)
extension2
.
awaitStartup
(
)
]
)
;
await
checkAddon
(
DEFER2_ID
{
version
:
"
2
.
0
"
}
)
;
await
checkAddon
(
DEFER_ALSO_ID
{
version
:
"
2
.
0
"
}
)
;
await
Promise
.
all
(
[
promiseRestartManager
(
)
extension1
.
awaitStartup
(
)
extension2
.
awaitStartup
(
)
]
)
;
await
checkAddon
(
DEFER2_ID
{
version
:
"
2
.
0
"
}
)
;
await
checkAddon
(
DEFER_ALSO_ID
{
version
:
"
2
.
0
"
}
)
;
await
promiseShutdownManager
(
)
;
extension1
.
destroy
(
)
;
extension2
.
destroy
(
)
;
}
add_task
(
async
function
test_multiple_systemaddon_upgrade_postpone_xpi
(
)
{
info
(
"
Test
on
a
systemaddon
xpi
installed
in
app
-
system
-
defaults
location
"
)
;
await
test_multiple_addon_upgrade_postpone
(
{
asBuiltIn
:
false
}
)
;
}
)
;
add_task
(
async
function
test_multiple_systemaddon_upgrade_postpone_builtin
(
)
{
info
(
"
Test
on
a
systemaddon
bundled
in
the
omni
jar
"
)
;
await
test_multiple_addon_upgrade_postpone
(
{
asBuiltIn
:
true
}
)
;
}
)
;
