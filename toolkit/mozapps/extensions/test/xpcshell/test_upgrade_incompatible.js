Services
.
prefs
.
setBoolPref
(
PREF_DISABLE_SECURITY
true
)
;
add_task
(
async
function
test_upgrade_incompatible
(
)
{
const
ID
=
"
incompatible
-
upgrade
tests
.
mozilla
.
org
"
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
await
promiseStartupManager
(
)
;
let
file
=
createTempWebExtensionFile
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
ID
}
}
}
}
)
;
let
{
addon
}
=
await
promiseInstallFile
(
file
)
;
notEqual
(
addon
null
)
;
equal
(
addon
.
appDisabled
false
)
;
await
promiseShutdownManager
(
)
;
let
newfile
=
createTempWebExtensionFile
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
ID
}
}
manifest_version
:
1
}
}
)
;
let
path
=
PathUtils
.
join
(
gProfD
.
path
"
extensions
"
{
ID
}
.
xpi
)
;
let
fileInfo
=
await
IOUtils
.
stat
(
path
)
;
let
timestamp
=
fileInfo
.
lastModified
;
await
IOUtils
.
move
(
newfile
.
path
path
)
;
await
promiseSetExtensionModifiedTime
(
path
timestamp
)
;
Services
.
obs
.
notifyObservers
(
new
FileUtils
.
File
(
path
)
"
flush
-
cache
-
entry
"
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
databaseSchema
"
0
)
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
)
;
equal
(
addon
.
appDisabled
true
)
;
await
promiseShutdownManager
(
)
;
file
=
createTempWebExtensionFile
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
ID
}
}
}
}
)
;
await
IOUtils
.
move
(
file
.
path
path
)
;
await
promiseSetExtensionModifiedTime
(
path
timestamp
)
;
Services
.
obs
.
notifyObservers
(
new
FileUtils
.
File
(
path
)
"
flush
-
cache
-
entry
"
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
databaseSchema
"
0
)
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
)
;
equal
(
addon
.
appDisabled
false
)
;
await
promiseShutdownManager
(
)
;
}
)
;
