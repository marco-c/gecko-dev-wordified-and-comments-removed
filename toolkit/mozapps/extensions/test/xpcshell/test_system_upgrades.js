"
use
strict
"
;
let
scopes
=
AddonManager
.
SCOPE_PROFILE
|
AddonManager
.
SCOPE_APPLICATION
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
scopes
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
BootstrapMonitor
.
init
(
)
;
const
systemDefaults
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
app
-
system
-
defaults
"
"
features
"
]
)
;
systemDefaults
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
registerDirectory
(
"
XREAppFeat
"
systemDefaults
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
(
)
=
>
"
system
"
;
const
ADDON_ID
=
"
updates
test
"
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
checkUpdateSecurity
"
false
)
;
let
server
=
createHttpServer
(
)
;
server
.
registerPathHandler
(
"
/
upgrade
.
json
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
ok
"
)
;
response
.
write
(
JSON
.
stringify
(
{
addons
:
{
[
ADDON_ID
]
:
{
updates
:
[
{
version
:
"
4
.
0
"
update_link
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
{
ADDON_ID
}
.
xpi
}
]
}
}
}
)
)
;
}
)
;
function
createWebExtensionFile
(
id
version
update_url
)
{
return
AddonTestUtils
.
createTempWebExtensionFile
(
{
manifest
:
{
version
browser_specific_settings
:
{
gecko
:
{
id
update_url
}
}
}
}
)
;
}
let
xpiUpdate
=
createWebExtensionFile
(
ADDON_ID
"
4
.
0
"
)
;
server
.
registerFile
(
/
{
ADDON_ID
}
.
xpi
xpiUpdate
)
;
async
function
promiseInstallDefaultSystemAddon
(
id
version
)
{
let
xpi
=
createWebExtensionFile
(
id
version
)
;
await
AddonTestUtils
.
manuallyInstall
(
xpi
systemDefaults
)
;
return
xpi
;
}
async
function
promiseInstallProfileExtension
(
id
version
update_url
)
{
return
promiseInstallWebExtension
(
{
manifest
:
{
version
browser_specific_settings
:
{
gecko
:
{
id
update_url
}
}
}
}
)
;
}
async
function
promiseInstallSystemProfileAddon
(
id
version
)
{
let
xpi
=
createWebExtensionFile
(
id
version
)
;
const
install
=
await
AddonManager
.
getInstallForURL
(
file
:
/
/
{
xpi
.
path
}
{
useSystemLocation
:
true
}
)
;
return
install
.
install
(
)
;
}
async
function
promiseUpdateSystemAddon
(
id
version
waitForStartup
=
true
)
{
let
xpi
=
createWebExtensionFile
(
id
version
)
;
let
xml
=
buildSystemAddonUpdates
(
[
{
id
:
ADDON_ID
version
path
:
xpi
.
leafName
xpi
}
]
)
;
let
promises
=
[
]
;
if
(
!
waitForStartup
)
{
promises
.
push
(
AddonTestUtils
.
promiseAddonEvent
(
"
onInstalled
"
)
)
;
}
promises
.
push
(
installSystemAddons
(
xml
waitForStartup
?
[
ADDON_ID
]
:
[
]
)
)
;
return
Promise
.
all
(
promises
)
;
}
async
function
promiseClearSystemAddons
(
)
{
let
xml
=
buildSystemAddonUpdates
(
[
]
)
;
return
installSystemAddons
(
xml
[
]
)
;
}
const
builtInOverride
=
{
system
:
[
ADDON_ID
]
builtins
:
[
]
}
;
async
function
checkAddon
(
version
reason
startReason
=
reason
)
{
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
extension
"
]
)
;
Assert
.
equal
(
addons
.
length
1
"
one
addon
expected
to
be
installed
"
)
;
Assert
.
equal
(
addons
[
0
]
.
version
version
addon
{
version
}
is
installed
)
;
Assert
.
ok
(
addons
[
0
]
.
isActive
addon
{
version
}
is
active
)
;
Assert
.
ok
(
!
addons
[
0
]
.
disabled
addon
{
version
}
is
enabled
)
;
let
installInfo
=
BootstrapMonitor
.
checkInstalled
(
ADDON_ID
version
)
;
equal
(
installInfo
.
reason
reason
bootstrap
monitor
verified
install
reason
for
{
version
}
)
;
let
started
=
BootstrapMonitor
.
checkStarted
(
ADDON_ID
version
)
;
equal
(
started
.
reason
startReason
bootstrap
monitor
verified
started
reason
for
{
version
}
)
;
return
addons
[
0
]
;
}
async
function
_test_builtin_addon_override
(
)
{
await
promiseUpdateSystemAddon
(
ADDON_ID
"
2
.
0
"
)
;
await
checkAddon
(
"
2
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
let
tmpAddon
=
createWebExtensionFile
(
ADDON_ID
"
2
.
1
"
)
;
await
Promise
.
all
(
[
AddonManager
.
installTemporaryAddon
(
tmpAddon
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
let
addon
=
await
checkAddon
(
"
2
.
1
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
addon
.
uninstall
(
)
;
await
checkAddon
(
"
2
.
0
"
BOOTSTRAP_REASONS
.
ADDON_DOWNGRADE
)
;
info
(
"
Install
an
System
Profile
Addon
then
uninstall
it
.
"
)
;
await
Promise
.
all
(
[
promiseInstallSystemProfileAddon
(
ADDON_ID
"
2
.
2
"
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
addon
=
await
checkAddon
(
"
2
.
2
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
addon
.
uninstall
(
)
;
await
checkAddon
(
"
2
.
0
"
BOOTSTRAP_REASONS
.
ADDON_DOWNGRADE
)
;
await
Promise
.
all
(
[
promiseInstallProfileExtension
(
ADDON_ID
"
3
.
0
"
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
upgrade
.
json
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
await
checkAddon
(
"
3
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
promiseUpdateSystemAddon
(
ADDON_ID
"
2
.
2
"
false
)
;
await
checkAddon
(
"
3
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
Promise
.
all
(
[
promiseClearSystemAddons
(
)
AddonTestUtils
.
promiseAddonEvent
(
"
onUninstalled
"
)
]
)
;
addon
=
await
checkAddon
(
"
3
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
let
update
=
await
promiseFindAddonUpdates
(
addon
)
;
await
Promise
.
all
(
[
promiseCompleteAllInstalls
(
[
update
.
updateAvailable
]
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
addon
=
await
checkAddon
(
"
4
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
addon
.
disable
(
)
;
await
AddonManager
.
getAddonByID
(
ADDON_ID
)
;
Assert
.
ok
(
!
addon
.
isActive
"
4
.
0
is
disabled
"
)
;
Assert
.
equal
(
addon
.
version
"
4
.
0
"
"
version
4
.
0
is
still
the
visible
version
"
)
;
await
Promise
.
all
(
[
addon
.
uninstall
(
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
addon
=
await
checkAddon
(
"
1
.
0
"
BOOTSTRAP_REASONS
.
ADDON_DOWNGRADE
)
;
await
promiseUpdateSystemAddon
(
ADDON_ID
"
5
.
1
"
)
;
addon
=
await
checkAddon
(
"
5
.
1
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
Promise
.
all
(
[
promiseInstallProfileExtension
(
ADDON_ID
"
5
.
0
"
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
addon
=
await
checkAddon
(
"
5
.
0
"
BOOTSTRAP_REASONS
.
ADDON_DOWNGRADE
)
;
await
Promise
.
all
(
[
addon
.
uninstall
(
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
addon
=
await
checkAddon
(
"
5
.
1
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
Promise
.
all
(
[
addon
.
uninstall
(
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
await
checkAddon
(
"
1
.
0
"
BOOTSTRAP_REASONS
.
ADDON_DOWNGRADE
)
;
Services
.
prefs
.
clearUserPref
(
PREF_SYSTEM_ADDON_SET
)
;
}
add_task
(
async
function
test_system_addon_upgrades
(
)
{
await
AddonTestUtils
.
overrideBuiltIns
(
builtInOverride
)
;
await
promiseInstallDefaultSystemAddon
(
ADDON_ID
"
1
.
0
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
checkAddon
(
"
1
.
0
"
BOOTSTRAP_REASONS
.
ADDON_INSTALL
)
;
await
_test_builtin_addon_override
(
)
;
await
AddonTestUtils
.
manuallyUninstall
(
systemDefaults
ADDON_ID
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
BootstrapMonitor
.
clear
(
ADDON_ID
)
;
}
)
;
add_task
(
async
function
test_manually_installed_builtin_addon_upgrades
(
)
{
builtInOverride
.
system
=
[
]
;
builtInOverride
.
builtins
=
[
]
;
await
AddonTestUtils
.
overrideBuiltIns
(
builtInOverride
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
Promise
.
all
(
[
installBuiltinExtension
(
{
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
ADDON_ID
}
}
}
}
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
await
checkAddon
(
"
1
.
0
"
BOOTSTRAP_REASONS
.
ADDON_INSTALL
)
;
await
_test_builtin_addon_override
(
)
;
let
addon
=
await
AddonManager
.
getAddonByID
(
ADDON_ID
)
;
await
addon
.
uninstall
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
BootstrapMonitor
.
clear
(
ADDON_ID
)
;
}
)
;
add_task
(
async
function
test_auto_installed_builtin_addon_upgrades
(
)
{
const
ADDON_VERSION
=
"
1
.
0
"
;
const
builtinExtensionDefinitions
=
{
manifest
:
{
version
:
ADDON_VERSION
browser_specific_settings
:
{
gecko
:
{
id
:
ADDON_ID
}
}
}
}
;
await
setupBuiltinExtension
(
builtinExtensionDefinitions
"
test
-
builtin
-
ext
"
)
;
builtInOverride
.
system
=
[
]
;
builtInOverride
.
builtins
=
[
{
addon_id
:
ADDON_ID
addon_version
:
ADDON_VERSION
res_url
:
"
resource
:
/
/
test
-
builtin
-
ext
/
"
}
]
;
await
AddonTestUtils
.
overrideBuiltIns
(
builtInOverride
)
;
await
Promise
.
all
(
[
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
AddonTestUtils
.
promiseStartupManager
(
)
]
)
;
await
checkAddon
(
ADDON_VERSION
BOOTSTRAP_REASONS
.
ADDON_INSTALL
)
;
await
_test_builtin_addon_override
(
)
;
let
addon
=
await
AddonManager
.
getAddonByID
(
ADDON_ID
)
;
await
addon
.
uninstall
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
BootstrapMonitor
.
clear
(
ADDON_ID
)
;
}
)
;
add_task
(
async
function
test_system_addon_precedence
(
)
{
builtInOverride
.
system
=
[
ADDON_ID
]
;
builtInOverride
.
builtins
=
[
]
;
await
AddonTestUtils
.
overrideBuiltIns
(
builtInOverride
)
;
await
promiseInstallDefaultSystemAddon
(
ADDON_ID
"
1
.
0
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
checkAddon
(
"
1
.
0
"
BOOTSTRAP_REASONS
.
ADDON_INSTALL
)
;
await
promiseUpdateSystemAddon
(
ADDON_ID
"
2
.
0
"
)
;
await
checkAddon
(
"
2
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
await
AddonTestUtils
.
overrideBuiltIns
(
builtInOverride
)
;
await
promiseInstallDefaultSystemAddon
(
ADDON_ID
"
1
.
5
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
"
2
"
)
;
await
checkAddon
(
"
1
.
5
"
BOOTSTRAP_REASONS
.
ADDON_DOWNGRADE
BOOTSTRAP_REASONS
.
APP_STARTUP
)
;
await
AddonTestUtils
.
manuallyUninstall
(
systemDefaults
ADDON_ID
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
BootstrapMonitor
.
clear
(
ADDON_ID
)
;
}
)
;
add_task
(
async
function
test_builtin_addon_version_precedence
(
)
{
builtInOverride
.
system
=
[
]
;
builtInOverride
.
builtins
=
[
]
;
await
AddonTestUtils
.
overrideBuiltIns
(
builtInOverride
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
Promise
.
all
(
[
installBuiltinExtension
(
{
manifest
:
{
version
:
"
1
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
ADDON_ID
}
}
}
}
)
AddonTestUtils
.
promiseWebExtensionStartup
(
ADDON_ID
)
]
)
;
await
checkAddon
(
"
1
.
0
"
BOOTSTRAP_REASONS
.
ADDON_INSTALL
)
;
await
promiseUpdateSystemAddon
(
ADDON_ID
"
2
.
0
"
)
;
await
checkAddon
(
"
2
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
await
Promise
.
all
(
[
installBuiltinExtension
(
{
manifest
:
{
version
:
"
1
.
5
"
browser_specific_settings
:
{
gecko
:
{
id
:
ADDON_ID
}
}
}
}
false
)
AddonTestUtils
.
promiseAddonEvent
(
"
onInstalled
"
)
]
)
;
await
checkAddon
(
"
2
.
0
"
BOOTSTRAP_REASONS
.
ADDON_UPGRADE
)
;
let
addon
=
await
AddonManager
.
getAddonByID
(
ADDON_ID
)
;
await
addon
.
uninstall
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
BootstrapMonitor
.
clear
(
ADDON_ID
)
;
}
)
;
