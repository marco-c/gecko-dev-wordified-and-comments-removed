var
gTestserver
=
AddonTestUtils
.
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
gPort
=
gTestserver
.
identity
.
primaryPort
;
gTestserver
.
registerDirectory
(
"
/
data
/
"
do_get_file
(
"
.
.
/
data
"
)
)
;
function
load_blocklist
(
file
)
{
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
"
http
:
/
/
localhost
:
"
+
gPort
+
"
/
data
/
"
+
file
)
;
var
blocklist
=
Cc
[
"
mozilla
.
org
/
extensions
/
blocklist
;
1
"
]
.
getService
(
Ci
.
nsITimerCallback
)
;
blocklist
.
notify
(
null
)
;
}
async
function
run_test
(
)
{
var
gfxInfo
=
Cc
[
"
mozilla
.
org
/
gfx
/
info
;
1
"
]
.
getService
(
Ci
.
nsIGfxInfo
)
;
if
(
!
(
gfxInfo
instanceof
Ci
.
nsIGfxInfoDebug
)
)
{
do_test_finished
(
)
;
return
;
}
gfxInfo
.
QueryInterface
(
Ci
.
nsIGfxInfoDebug
)
;
gfxInfo
.
fireTestProcess
(
)
;
gfxInfo
.
spoofVendorID
(
"
0xabcd
"
)
;
gfxInfo
.
spoofDeviceID
(
"
0x6666
"
)
;
switch
(
Services
.
appinfo
.
OS
)
{
case
"
WINNT
"
:
gfxInfo
.
spoofOSVersion
(
0x60001
)
;
break
;
case
"
Linux
"
:
break
;
case
"
Darwin
"
:
gfxInfo
.
spoofOSVersion
(
0x1090
)
;
break
;
case
"
Android
"
:
break
;
}
do_test_pending
(
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
3
"
"
8
"
)
;
await
promiseStartupManager
(
)
;
function
checkBlacklist
(
)
{
var
driverVersion
=
gfxInfo
.
adapterDriverVersion
;
if
(
driverVersion
)
{
var
status
=
gfxInfo
.
getFeatureStatus
(
Ci
.
nsIGfxInfo
.
FEATURE_DIRECT2D
)
;
Assert
.
equal
(
status
Ci
.
nsIGfxInfo
.
FEATURE_BLOCKED_DEVICE
)
;
status
=
gfxInfo
.
getFeatureStatus
(
Ci
.
nsIGfxInfo
.
FEATURE_DIRECT3D_9_LAYERS
)
;
Assert
.
equal
(
status
Ci
.
nsIGfxInfo
.
FEATURE_STATUS_OK
)
;
}
do_test_finished
(
)
;
}
Services
.
obs
.
addObserver
(
function
(
aSubject
aTopic
aData
)
{
executeSoon
(
checkBlacklist
)
;
}
"
blocklist
-
data
-
gfxItems
"
)
;
load_blocklist
(
"
test_gfxBlacklist
.
xml
"
)
;
}
