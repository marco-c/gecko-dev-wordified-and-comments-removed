const
LIST_UPDATED_TOPIC
=
"
plugins
-
list
-
updated
"
;
class
PluginTag
extends
MockPluginTag
{
constructor
(
name
description
)
{
super
(
{
name
description
version
:
"
1
.
0
"
}
)
;
this
.
description
=
description
;
}
}
const
PLUGINS
=
[
new
PluginTag
(
"
Java
"
"
A
mock
Java
plugin
"
)
new
PluginTag
(
"
Flash
"
"
A
mock
Flash
plugin
"
)
new
PluginTag
(
"
Flash
"
"
A
mock
Flash
plugin
"
)
]
;
mockPluginHost
(
PLUGINS
)
;
async
function
run_test
(
)
{
do_test_pending
(
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
Services
.
prefs
.
setBoolPref
(
"
media
.
gmp
-
provider
.
enabled
"
false
)
;
await
promiseStartupManager
(
)
;
AddonManager
.
addAddonListener
(
AddonListener
)
;
AddonManager
.
addInstallListener
(
InstallListener
)
;
run_test_1
(
)
;
}
function
end_test
(
)
{
executeSoon
(
do_test_finished
)
;
}
function
sortAddons
(
addons
)
{
addons
.
sort
(
function
(
a
b
)
{
return
a
.
name
.
localeCompare
(
b
.
name
)
;
}
)
;
}
async
function
run_test_1
(
)
{
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
sortAddons
(
addons
)
;
Assert
.
equal
(
addons
.
length
2
)
;
Assert
.
equal
(
addons
[
0
]
.
name
"
Flash
"
)
;
Assert
.
ok
(
!
addons
[
0
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
1
]
.
name
"
Java
"
)
;
Assert
.
ok
(
!
addons
[
1
]
.
userDisabled
)
;
run_test_2
(
)
;
}
async
function
run_test_2
(
)
{
let
tag
=
PLUGINS
[
0
]
;
PLUGINS
[
0
]
=
PLUGINS
[
2
]
;
PLUGINS
[
2
]
=
PLUGINS
[
1
]
;
PLUGINS
[
1
]
=
tag
;
Services
.
obs
.
notifyObservers
(
null
LIST_UPDATED_TOPIC
)
;
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
sortAddons
(
addons
)
;
Assert
.
equal
(
addons
.
length
2
)
;
Assert
.
equal
(
addons
[
0
]
.
name
"
Flash
"
)
;
Assert
.
ok
(
!
addons
[
0
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
1
]
.
name
"
Java
"
)
;
Assert
.
ok
(
!
addons
[
1
]
.
userDisabled
)
;
run_test_3
(
)
;
}
async
function
run_test_3
(
)
{
let
tag
=
new
PluginTag
(
"
Quicktime
"
"
A
mock
Quicktime
plugin
"
)
;
PLUGINS
.
push
(
tag
)
;
let
id
=
tag
.
name
+
tag
.
description
;
let
test_params
=
{
}
;
test_params
[
id
]
=
[
[
"
onInstalling
"
false
]
"
onInstalled
"
]
;
prepare_test
(
test_params
[
"
onExternalInstall
"
]
)
;
Services
.
obs
.
notifyObservers
(
null
LIST_UPDATED_TOPIC
)
;
ensure_test_completed
(
)
;
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
sortAddons
(
addons
)
;
Assert
.
equal
(
addons
.
length
3
)
;
Assert
.
equal
(
addons
[
0
]
.
name
"
Flash
"
)
;
Assert
.
ok
(
!
addons
[
0
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
1
]
.
name
"
Java
"
)
;
Assert
.
ok
(
!
addons
[
1
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
2
]
.
name
"
Quicktime
"
)
;
Assert
.
ok
(
!
addons
[
2
]
.
userDisabled
)
;
run_test_4
(
)
;
}
async
function
run_test_4
(
)
{
let
tag
=
PLUGINS
.
splice
(
1
1
)
[
0
]
;
let
id
=
tag
.
name
+
tag
.
description
;
let
test_params
=
{
}
;
test_params
[
id
]
=
[
[
"
onUninstalling
"
false
]
"
onUninstalled
"
]
;
prepare_test
(
test_params
)
;
Services
.
obs
.
notifyObservers
(
null
LIST_UPDATED_TOPIC
)
;
ensure_test_completed
(
)
;
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
sortAddons
(
addons
)
;
Assert
.
equal
(
addons
.
length
2
)
;
Assert
.
equal
(
addons
[
0
]
.
name
"
Flash
"
)
;
Assert
.
ok
(
!
addons
[
0
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
1
]
.
name
"
Quicktime
"
)
;
Assert
.
ok
(
!
addons
[
1
]
.
userDisabled
)
;
run_test_5
(
)
;
}
async
function
run_test_5
(
)
{
PLUGINS
.
splice
(
0
1
)
;
Services
.
obs
.
notifyObservers
(
null
LIST_UPDATED_TOPIC
)
;
ensure_test_completed
(
)
;
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
sortAddons
(
addons
)
;
Assert
.
equal
(
addons
.
length
2
)
;
Assert
.
equal
(
addons
[
0
]
.
name
"
Flash
"
)
;
Assert
.
ok
(
!
addons
[
0
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
1
]
.
name
"
Quicktime
"
)
;
Assert
.
ok
(
!
addons
[
1
]
.
userDisabled
)
;
run_test_6
(
)
;
}
async
function
run_test_6
(
)
{
let
oldTag
=
PLUGINS
.
splice
(
0
1
)
[
0
]
;
let
newTag
=
new
PluginTag
(
"
Flash
2
"
"
A
new
crash
-
free
Flash
!
"
)
;
newTag
.
disabled
=
true
;
PLUGINS
.
push
(
newTag
)
;
let
test_params
=
{
}
;
test_params
[
oldTag
.
name
+
oldTag
.
description
]
=
[
[
"
onUninstalling
"
false
]
"
onUninstalled
"
]
;
test_params
[
newTag
.
name
+
newTag
.
description
]
=
[
[
"
onInstalling
"
false
]
"
onInstalled
"
]
;
prepare_test
(
test_params
[
"
onExternalInstall
"
]
)
;
Services
.
obs
.
notifyObservers
(
null
LIST_UPDATED_TOPIC
)
;
ensure_test_completed
(
)
;
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
sortAddons
(
addons
)
;
Assert
.
equal
(
addons
.
length
2
)
;
Assert
.
equal
(
addons
[
0
]
.
name
"
Flash
2
"
)
;
Assert
.
ok
(
addons
[
0
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
1
]
.
name
"
Quicktime
"
)
;
Assert
.
ok
(
!
addons
[
1
]
.
userDisabled
)
;
run_test_7
(
)
;
}
async
function
run_test_7
(
)
{
PLUGINS
[
0
]
=
new
PluginTag
(
"
Quicktime
"
"
A
mock
Quicktime
plugin
"
)
;
PLUGINS
[
0
]
.
disabled
=
true
;
PLUGINS
[
1
]
=
new
PluginTag
(
"
Flash
2
"
"
A
new
crash
-
free
Flash
!
"
)
;
let
test_params
=
{
}
;
test_params
[
PLUGINS
[
0
]
.
name
+
PLUGINS
[
0
]
.
description
]
=
[
[
"
onDisabling
"
false
]
"
onDisabled
"
]
;
test_params
[
PLUGINS
[
1
]
.
name
+
PLUGINS
[
1
]
.
description
]
=
[
[
"
onEnabling
"
false
]
"
onEnabled
"
]
;
prepare_test
(
test_params
)
;
Services
.
obs
.
notifyObservers
(
null
LIST_UPDATED_TOPIC
)
;
ensure_test_completed
(
)
;
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
sortAddons
(
addons
)
;
Assert
.
equal
(
addons
.
length
2
)
;
Assert
.
equal
(
addons
[
0
]
.
name
"
Flash
2
"
)
;
Assert
.
ok
(
!
addons
[
0
]
.
userDisabled
)
;
Assert
.
equal
(
addons
[
1
]
.
name
"
Quicktime
"
)
;
Assert
.
ok
(
addons
[
1
]
.
userDisabled
)
;
end_test
(
)
;
}
