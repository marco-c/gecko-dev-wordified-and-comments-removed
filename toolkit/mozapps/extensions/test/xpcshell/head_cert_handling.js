"
use
strict
"
;
function
stringToArray
(
s
)
{
let
a
=
[
]
;
for
(
let
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
a
.
push
(
s
.
charCodeAt
(
i
)
)
;
}
return
a
;
}
function
pemToBase64
(
pem
)
{
return
pem
.
replace
(
/
-
-
-
-
-
BEGIN
CERTIFICATE
-
-
-
-
-
/
"
"
)
.
replace
(
/
-
-
-
-
-
END
CERTIFICATE
-
-
-
-
-
/
"
"
)
.
replace
(
/
[
\
r
\
n
]
/
g
"
"
)
;
}
function
readFile
(
file
)
{
let
fstream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
fstream
.
init
(
file
-
1
0
0
)
;
let
available
=
fstream
.
available
(
)
;
let
data
=
available
>
0
?
NetUtil
.
readInputStreamToString
(
fstream
available
)
:
"
"
;
fstream
.
close
(
)
;
return
data
;
}
function
constructCertFromFile
(
filename
)
{
let
certFile
=
do_get_file
(
filename
false
)
;
let
certBytes
=
readFile
(
certFile
)
;
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
return
certdb
.
constructX509FromBase64
(
pemToBase64
(
certBytes
)
)
;
}
function
setCertRoot
(
filename
)
{
let
cert
=
constructCertFromFile
(
filename
)
;
Services
.
prefs
.
setCharPref
(
"
security
.
content
.
signature
.
root_hash
"
cert
.
sha256Fingerprint
)
;
}
function
loadCertChain
(
prefix
names
)
{
let
chain
=
[
]
;
for
(
let
name
of
names
)
{
let
filename
=
{
prefix
}
_
{
name
}
.
pem
;
chain
.
push
(
readFile
(
do_get_file
(
filename
)
)
)
;
}
return
chain
;
}
