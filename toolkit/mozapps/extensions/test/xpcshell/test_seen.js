const
ID
=
"
bootstrap1
tests
.
mozilla
.
org
"
;
let
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
const
SCOPES
=
AddonManager
.
SCOPE_PROFILE
|
AddonManager
.
SCOPE_SYSTEM
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
SCOPES
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
autoDisableScopes
"
SCOPES
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
const
ADDONS
=
{
test_bootstrap1_1
:
{
"
install
.
rdf
"
:
{
"
id
"
:
"
bootstrap1
tests
.
mozilla
.
org
"
"
name
"
:
"
Test
Bootstrap
1
"
}
"
bootstrap
.
js
"
:
BOOTSTRAP_MONITOR_BOOTSTRAP_JS
}
test_bootstrap1_2
:
{
"
install
.
rdf
"
:
{
"
id
"
:
"
bootstrap1
tests
.
mozilla
.
org
"
"
version
"
:
"
2
.
0
"
"
name
"
:
"
Test
Bootstrap
1
"
}
"
bootstrap
.
js
"
:
BOOTSTRAP_MONITOR_BOOTSTRAP_JS
}
}
;
const
XPIS
=
{
}
;
for
(
let
[
name
files
]
of
Object
.
entries
(
ADDONS
)
)
{
XPIS
[
name
]
=
AddonTestUtils
.
createTempXPIFile
(
files
)
;
}
add_task
(
async
function
(
)
{
await
promiseStartupManager
(
)
;
let
install
=
await
AddonTestUtils
.
promiseInstallXPI
(
ADDONS
.
test_bootstrap1_1
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_INSTALLED
)
;
Assert
.
ok
(
!
hasFlag
(
install
.
addon
.
pendingOperations
AddonManager
.
PENDING_INSTALL
)
)
;
let
addon
=
install
.
addon
;
Assert
.
equal
(
addon
.
version
"
1
.
0
"
)
;
Assert
.
ok
(
!
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
ok
(
!
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
install
=
await
AddonTestUtils
.
promiseInstallXPI
(
ADDONS
.
test_bootstrap1_2
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_INSTALLED
)
;
Assert
.
ok
(
!
hasFlag
(
install
.
addon
.
pendingOperations
AddonManager
.
PENDING_INSTALL
)
)
;
addon
=
install
.
addon
;
Assert
.
equal
(
addon
.
version
"
2
.
0
"
)
;
Assert
.
ok
(
!
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
ok
(
!
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
addon
.
uninstall
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
savedStartupScanScopes
=
Services
.
prefs
.
getIntPref
(
"
extensions
.
startupScanScopes
"
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
startupScanScopes
"
0
)
;
let
systemParentDir
=
gTmpD
.
clone
(
)
;
systemParentDir
.
append
(
"
systemwide
-
extensions
"
)
;
registerDirectory
(
"
XRESysSExtPD
"
systemParentDir
.
clone
(
)
)
;
registerCleanupFunction
(
(
)
=
>
{
systemParentDir
.
remove
(
true
)
;
}
)
;
let
systemDir
=
systemParentDir
.
clone
(
)
;
systemDir
.
append
(
Services
.
appinfo
.
ID
)
;
let
path
=
await
manuallyInstall
(
XPIS
.
test_bootstrap1_1
systemDir
ID
)
;
setExtensionModifiedTime
(
path
Date
.
now
(
)
-
10000
)
;
await
promiseStartupManager
(
)
;
await
AddonManagerPrivate
.
getNewSideloads
(
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
1
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
promiseShutdownManager
(
)
;
Services
.
obs
.
notifyObservers
(
path
"
flush
-
cache
-
entry
"
)
;
path
.
remove
(
true
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
startupScanScopes
"
savedStartupScanScopes
)
;
}
)
;
add_task
(
async
function
(
)
{
let
path
=
await
manuallyInstall
(
XPIS
.
test_bootstrap1_1
profileDir
ID
)
;
setExtensionModifiedTime
(
path
Date
.
now
(
)
-
10000
)
;
await
promiseStartupManager
(
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
1
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
promiseShutdownManager
(
)
;
manuallyUninstall
(
profileDir
ID
)
;
await
manuallyInstall
(
XPIS
.
test_bootstrap1_2
profileDir
ID
)
;
setExtensionModifiedTime
(
path
Date
.
now
(
)
)
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
2
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
addon
.
uninstall
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
path
=
await
manuallyInstall
(
XPIS
.
test_bootstrap1_1
profileDir
ID
)
;
setExtensionModifiedTime
(
path
Date
.
now
(
)
-
10000
)
;
await
promiseStartupManager
(
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
1
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
let
install
=
await
AddonTestUtils
.
promiseInstallXPI
(
ADDONS
.
test_bootstrap1_2
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_INSTALLED
)
;
Assert
.
ok
(
!
hasFlag
(
install
.
addon
.
pendingOperations
AddonManager
.
PENDING_INSTALL
)
)
;
addon
=
install
.
addon
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
2
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
await
addon
.
uninstall
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
path
=
await
manuallyInstall
(
XPIS
.
test_bootstrap1_1
profileDir
ID
)
;
setExtensionModifiedTime
(
path
Date
.
now
(
)
-
10000
)
;
await
promiseStartupManager
(
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
1
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
addon
.
markAsSeen
(
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
promiseShutdownManager
(
)
;
manuallyUninstall
(
profileDir
ID
)
;
await
manuallyInstall
(
XPIS
.
test_bootstrap1_2
profileDir
ID
)
;
setExtensionModifiedTime
(
path
Date
.
now
(
)
)
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
2
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
addon
.
uninstall
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
path
=
await
manuallyInstall
(
XPIS
.
test_bootstrap1_1
profileDir
ID
)
;
setExtensionModifiedTime
(
path
Date
.
now
(
)
-
10000
)
;
await
promiseStartupManager
(
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
1
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
addon
.
markAsSeen
(
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
let
install
=
await
AddonTestUtils
.
promiseInstallXPI
(
ADDONS
.
test_bootstrap1_2
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_INSTALLED
)
;
Assert
.
ok
(
!
hasFlag
(
install
.
addon
.
pendingOperations
AddonManager
.
PENDING_INSTALL
)
)
;
addon
=
install
.
addon
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
promiseRestartManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
Assert
.
equal
(
addon
.
version
"
2
.
0
"
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
ok
(
addon
.
seen
)
;
await
addon
.
uninstall
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
