createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
2
"
)
;
let
scopes
=
AddonManager
.
SCOPE_PROFILE
|
AddonManager
.
SCOPE_APPLICATION
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
scopes
)
;
let
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
"
empty
"
]
)
;
distroDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
registerDirectory
(
"
XREAppFeat
"
distroDir
)
;
add_task
(
(
)
=
>
initSystemAddonDirs
(
)
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
(
)
=
>
"
system
"
;
const
TEST_CONDITIONS
=
{
blank
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withAppSet
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
prefilled
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withProfileSet
:
{
async
setup
(
)
{
await
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withBothSets
:
{
async
setup
(
)
{
await
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
hidden
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
}
;
const
TESTS
=
{
overlapping
:
{
updateList
:
[
]
finalState
:
{
blank
:
[
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
withAppSet
:
[
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
withProfileSet
:
[
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
withBothSets
:
[
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
}
}
}
;
add_task
(
async
function
setup
(
)
{
await
overrideBuiltIns
(
{
system
:
[
]
}
)
;
await
promiseStartupManager
(
)
;
await
promiseShutdownManager
(
)
;
let
list
=
TESTS
.
overlapping
.
updateList
;
let
xpi
=
await
getSystemAddonXPI
(
1
"
2
.
0
"
)
;
list
.
push
(
{
id
:
"
system1
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system1_2
.
xpi
"
xpi
}
)
;
xpi
=
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
;
list
.
push
(
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
}
)
;
xpi
=
await
getSystemAddonXPI
(
3
"
3
.
0
"
)
;
list
.
push
(
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
3
.
0
"
path
:
"
system3_3
.
xpi
"
xpi
}
)
;
xpi
=
await
getSystemAddonXPI
(
4
"
1
.
0
"
)
;
list
.
push
(
{
id
:
"
system4
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system4_1
.
xpi
"
xpi
}
)
;
}
)
;
add_task
(
async
function
(
)
{
for
(
let
setupName
of
Object
.
keys
(
TEST_CONDITIONS
)
)
{
for
(
let
testName
of
Object
.
keys
(
TESTS
)
)
{
info
(
"
Running
test
"
+
setupName
+
"
"
+
testName
)
;
let
setup
=
TEST_CONDITIONS
[
setupName
]
;
let
test
=
TESTS
[
testName
]
;
await
execSystemAddonTest
(
setupName
setup
test
distroDir
)
;
info
(
"
Running
test
"
+
setupName
+
"
"
+
testName
+
"
(
asBuiltIn
)
"
)
;
const
setupAsBuiltIn
=
{
setup
:
setup
.
setup
initialState
:
setup
.
initialState
.
map
(
stateEntry
=
>
{
return
!
stateEntry
.
version
?
stateEntry
:
{
.
.
.
stateEntry
asBuiltin
:
true
}
;
}
)
}
;
await
execSystemAddonTest
(
setupName
setupAsBuiltIn
test
distroDir
)
;
}
}
}
)
;
