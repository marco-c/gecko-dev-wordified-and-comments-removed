"
use
strict
"
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
AddonManager
.
SCOPE_APPLICATION
)
;
ExtensionTestUtils
.
mockAppInfo
(
)
;
const
DEFAULT_THEME_ID
=
"
default
-
theme
mozilla
.
org
"
;
function
getXPIProviderSpies
(
)
{
const
sandbox
=
sinon
.
createSandbox
(
)
;
const
{
XPIProvider
}
=
AddonTestUtils
.
getXPIExports
(
)
;
return
{
sandbox
maybeInstallBuiltinAddon
:
sandbox
.
spy
(
XPIProvider
"
maybeInstallBuiltinAddon
"
)
installBuiltinAddon
:
sandbox
.
spy
(
XPIProvider
"
installBuiltinAddon
"
)
}
;
}
add_task
(
async
function
installs_default_theme_at_addonmanager_startup
(
)
{
const
spies
=
getXPIProviderSpies
(
)
;
await
promiseStartupManager
(
)
;
let
defaultThemeAddon
=
await
AddonManager
.
getAddonByID
(
DEFAULT_THEME_ID
)
;
info
(
"
maybeInstallBuiltinAddon
(
)
should
be
called
with
the
right
version
"
)
;
sinon
.
assert
.
calledOnce
(
spies
.
maybeInstallBuiltinAddon
)
;
sinon
.
assert
.
calledWithExactly
(
spies
.
maybeInstallBuiltinAddon
DEFAULT_THEME_ID
defaultThemeAddon
.
version
"
resource
:
/
/
default
-
theme
/
"
)
;
info
(
"
maybeInstallBuiltinAddon
(
)
should
trigger
actual
installation
"
)
;
sinon
.
assert
.
calledOnce
(
spies
.
installBuiltinAddon
)
;
sinon
.
assert
.
calledWithExactly
(
spies
.
installBuiltinAddon
"
resource
:
/
/
default
-
theme
/
"
)
;
spies
.
sandbox
.
restore
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
does_not_reinstall_default_theme_after_restart
(
)
{
const
spies
=
getXPIProviderSpies
(
)
;
await
promiseStartupManager
(
)
;
sinon
.
assert
.
calledOnce
(
spies
.
maybeInstallBuiltinAddon
)
;
sinon
.
assert
.
calledWith
(
spies
.
maybeInstallBuiltinAddon
DEFAULT_THEME_ID
)
;
info
(
"
maybeInstallBuiltinAddon
(
)
should
not
trigger
re
-
installation
"
)
;
sinon
.
assert
.
notCalled
(
spies
.
installBuiltinAddon
)
;
spies
.
sandbox
.
restore
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
