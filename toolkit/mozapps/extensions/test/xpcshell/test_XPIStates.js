createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
function
run_test
(
)
{
registerCleanupFunction
(
promiseShutdownManager
)
;
run_next_test
(
)
;
}
writeInstallRDFToXPI
(
{
id
:
"
packed
-
enabled
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
name
:
"
Packed
Enabled
"
}
profileDir
)
;
writeInstallRDFToXPI
(
{
id
:
"
packed
-
disabled
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
name
:
"
Packed
Disabled
"
}
profileDir
)
;
writeInstallRDFToDir
(
{
id
:
"
unpacked
-
enabled
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
unpack
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
name
:
"
Unpacked
Enabled
"
}
profileDir
undefined
"
extraFile
.
js
"
)
;
writeInstallRDFToDir
(
{
id
:
"
unpacked
-
disabled
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
unpack
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
name
:
"
Unpacked
disabled
"
}
profileDir
undefined
"
extraFile
.
js
"
)
;
var
lastTimestamp
=
Date
.
now
(
)
;
function
checkChange
(
XS
aPath
aChange
)
{
Assert
.
ok
(
aPath
.
exists
(
)
)
;
lastTimestamp
+
=
10000
;
info
(
"
Touching
file
"
+
aPath
.
path
+
"
with
"
+
lastTimestamp
)
;
aPath
.
lastModifiedTime
=
lastTimestamp
;
Assert
.
equal
(
XS
.
getInstallState
(
)
aChange
)
;
XS
.
save
(
)
;
}
function
getXS
(
)
{
let
XPI
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
{
}
)
;
return
XPI
.
XPIStates
;
}
async
function
getXSJSON
(
)
{
await
AddonTestUtils
.
loadAddonsList
(
true
)
;
return
aomStartup
.
readStartupData
(
)
;
}
add_task
(
async
function
detect_touches
(
)
{
startupManager
(
)
;
let
[
pd
ud
]
=
await
promiseAddonsByIDs
(
[
"
packed
-
enabled
tests
.
mozilla
.
org
"
"
packed
-
disabled
tests
.
mozilla
.
org
"
"
unpacked
-
enabled
tests
.
mozilla
.
org
"
"
unpacked
-
disabled
tests
.
mozilla
.
org
"
]
)
;
info
(
"
Disable
test
add
-
ons
"
)
;
pd
.
userDisabled
=
true
;
ud
.
userDisabled
=
true
;
let
XS
=
getXS
(
)
;
Assert
.
ok
(
!
XS
.
getInstallState
(
)
)
;
let
states
=
XS
.
getLocation
(
"
app
-
profile
"
)
;
Assert
.
ok
(
states
.
get
(
"
packed
-
enabled
tests
.
mozilla
.
org
"
)
.
enabled
)
;
Assert
.
ok
(
!
states
.
get
(
"
packed
-
disabled
tests
.
mozilla
.
org
"
)
.
enabled
)
;
Assert
.
ok
(
states
.
get
(
"
unpacked
-
enabled
tests
.
mozilla
.
org
"
)
.
enabled
)
;
Assert
.
ok
(
!
states
.
get
(
"
unpacked
-
disabled
tests
.
mozilla
.
org
"
)
.
enabled
)
;
let
peFile
=
profileDir
.
clone
(
)
;
peFile
.
append
(
"
packed
-
enabled
tests
.
mozilla
.
org
.
xpi
"
)
;
checkChange
(
XS
peFile
true
)
;
let
pdFile
=
profileDir
.
clone
(
)
;
pdFile
.
append
(
"
packed
-
disabled
tests
.
mozilla
.
org
.
xpi
"
)
;
checkChange
(
XS
pdFile
true
)
;
let
ueDir
=
profileDir
.
clone
(
)
;
ueDir
.
append
(
"
unpacked
-
enabled
tests
.
mozilla
.
org
"
)
;
let
manifest
=
ueDir
.
clone
(
)
;
manifest
.
append
(
"
install
.
rdf
"
)
;
checkChange
(
XS
manifest
true
)
;
let
udDir
=
profileDir
.
clone
(
)
;
udDir
.
append
(
"
unpacked
-
disabled
tests
.
mozilla
.
org
"
)
;
manifest
=
udDir
.
clone
(
)
;
manifest
.
append
(
"
install
.
rdf
"
)
;
checkChange
(
XS
manifest
true
)
;
let
otherFile
=
udDir
.
clone
(
)
;
otherFile
.
append
(
"
extraFile
.
js
"
)
;
checkChange
(
XS
otherFile
false
)
;
ud
.
userDisabled
=
false
;
let
xState
=
XS
.
getAddon
(
"
app
-
profile
"
ud
.
id
)
;
Assert
.
ok
(
xState
.
enabled
)
;
Assert
.
equal
(
xState
.
mtime
ud
.
updateDate
.
getTime
(
)
)
;
}
)
;
add_task
(
async
function
uninstall_bootstrap
(
)
{
let
[
pe
]
=
await
promiseAddonsByIDs
(
[
"
packed
-
enabled
tests
.
mozilla
.
org
"
"
packed
-
disabled
tests
.
mozilla
.
org
"
"
unpacked
-
enabled
tests
.
mozilla
.
org
"
"
unpacked
-
disabled
tests
.
mozilla
.
org
"
]
)
;
pe
.
uninstall
(
)
;
let
xpiState
=
await
getXSJSON
(
)
;
Assert
.
equal
(
false
"
packed
-
enabled
tests
.
mozilla
.
org
"
in
xpiState
[
"
app
-
profile
"
]
.
addons
)
;
}
)
;
add_task
(
async
function
install_bootstrap
(
)
{
let
XS
=
getXS
(
)
;
let
installer
=
await
promiseInstallFile
(
do_get_addon
(
"
test_bootstrap1_1
"
)
)
;
let
newAddon
=
installer
.
addon
;
let
xState
=
XS
.
getAddon
(
"
app
-
profile
"
newAddon
.
id
)
;
Assert
.
ok
(
!
!
xState
)
;
Assert
.
ok
(
xState
.
enabled
)
;
Assert
.
equal
(
xState
.
mtime
newAddon
.
updateDate
.
getTime
(
)
)
;
newAddon
.
uninstall
(
)
;
}
)
;
add_task
(
async
function
install_restart
(
)
{
let
XS
=
getXS
(
)
;
let
installer
=
await
promiseInstallFile
(
do_get_addon
(
"
test_bootstrap1_4
"
)
)
;
let
newAddon
=
installer
.
addon
;
let
newID
=
newAddon
.
id
;
let
xState
=
XS
.
getAddon
(
"
app
-
profile
"
newID
)
;
Assert
.
ok
(
!
xState
)
;
XS
=
null
;
newAddon
=
null
;
await
promiseRestartManager
(
)
;
XS
=
getXS
(
)
;
newAddon
=
await
promiseAddonByID
(
newID
)
;
xState
=
XS
.
getAddon
(
"
app
-
profile
"
newID
)
;
Assert
.
ok
(
xState
)
;
Assert
.
ok
(
xState
.
enabled
)
;
Assert
.
equal
(
xState
.
mtime
newAddon
.
updateDate
.
getTime
(
)
)
;
newAddon
.
userDisabled
=
true
;
Assert
.
ok
(
!
xState
.
enabled
)
;
XS
=
null
;
newAddon
=
null
;
await
promiseRestartManager
(
)
;
XS
=
getXS
(
)
;
xState
=
XS
.
getAddon
(
"
app
-
profile
"
newID
)
;
Assert
.
ok
(
xState
)
;
Assert
.
ok
(
!
xState
.
enabled
)
;
newAddon
=
await
promiseAddonByID
(
newID
)
;
newAddon
.
userDisabled
=
false
;
Assert
.
ok
(
xState
.
enabled
)
;
XS
=
null
;
newAddon
=
null
;
await
promiseRestartManager
(
)
;
XS
=
getXS
(
)
;
xState
=
XS
.
getAddon
(
"
app
-
profile
"
newID
)
;
Assert
.
ok
(
xState
)
;
Assert
.
ok
(
xState
.
enabled
)
;
newAddon
=
await
promiseAddonByID
(
newID
)
;
newAddon
.
uninstall
(
)
;
xState
=
XS
.
getAddon
(
"
app
-
profile
"
newID
)
;
Assert
.
ok
(
xState
)
;
Assert
.
ok
(
!
xState
.
enabled
)
;
XS
=
null
;
newAddon
=
null
;
await
promiseRestartManager
(
)
;
XS
=
getXS
(
)
;
xState
=
XS
.
getAddon
(
"
app
-
profile
"
newID
)
;
Assert
.
ok
(
!
xState
)
;
}
)
;
