const
{
QuarantinedDomains
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionPermissions
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
computeSha1HashAsString
:
"
resource
:
/
/
gre
/
modules
/
addons
/
crypto
-
utils
.
sys
.
mjs
"
}
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
const
QUARANTINE_LIST_PREF
=
"
extensions
.
quarantinedDomains
.
list
"
;
function
assertQuarantinedListPref
(
expectedPrefValue
)
{
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
QUARANTINE_LIST_PREF
)
Services
.
prefs
.
PREF_STRING
Expect
{
QUARANTINE_LIST_PREF
}
preference
type
to
be
string
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
QUARANTINE_LIST_PREF
)
expectedPrefValue
Got
the
expected
value
set
on
{
QUARANTINE_LIST_PREF
}
)
;
}
function
assertQuarantinedListTelemetry
(
expectedTelemetryHash
)
{
Assert
.
deepEqual
(
{
listhash
:
Glean
.
extensionsQuarantinedDomains
.
listhash
.
testGetValue
(
)
remotehash
:
Glean
.
extensionsQuarantinedDomains
.
remotehash
.
testGetValue
(
)
}
expectedTelemetryHash
"
Got
the
expected
computed
domains
list
probes
recorded
by
the
Glean
metrics
"
)
;
const
scalars
=
Services
.
telemetry
.
getSnapshotForScalars
(
)
.
parent
;
Assert
.
deepEqual
(
{
listhash
:
scalars
?
.
[
"
extensions
.
quarantinedDomains
.
listhash
"
]
remotehash
:
scalars
?
.
[
"
extensions
.
quarantinedDomains
.
remotehash
"
]
}
expectedTelemetryHash
"
Got
the
expected
metrics
mirrored
into
the
unified
telemetry
scalars
"
)
;
}
async
function
testQuarantinedDomainsFromRemoteSettings
(
)
{
const
MAX_PREF_LENGTH
=
1
*
1024
*
1024
;
const
quarantinedDomainsSets
=
{
testSet1
:
"
example
.
com
example
.
org
"
testSet2
:
"
someothersite
.
org
testset2
.
org
"
}
;
resetTelemetryData
(
)
;
await
setAndEmitFakeRemoteSettingsData
(
[
{
id
:
"
quarantinedDomains
-
01
-
testSet
-
toolong
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
"
x
"
.
repeat
(
MAX_PREF_LENGTH
+
1
)
}
installTriggerDeprecation
:
null
}
{
id
:
"
quarantinedDomains
-
02
-
testSet1
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
quarantinedDomainsSets
.
testSet1
}
installTriggerDeprecation
:
null
}
{
id
:
"
quarantinedDomains
-
03
-
testSet2
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
quarantinedDomainsSets
.
testSet2
}
installTriggerDeprecation
:
null
}
{
id
:
"
quarantinedDomains
-
04
-
null
"
quarantinedDomains
:
null
installTriggerDeprecation
:
null
}
]
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
QUARANTINE_LIST_PREF
)
Services
.
prefs
.
PREF_STRING
Expect
{
QUARANTINE_LIST_PREF
}
preference
type
to
be
string
)
;
assertQuarantinedListPref
(
quarantinedDomainsSets
.
testSet2
)
;
assertQuarantinedListTelemetry
(
{
listhash
:
computeSha1HashAsString
(
quarantinedDomainsSets
.
testSet2
)
remotehash
:
computeSha1HashAsString
(
quarantinedDomainsSets
.
testSet2
)
}
)
;
for
(
const
domain
of
quarantinedDomainsSets
.
testSet2
.
split
(
"
"
)
)
{
let
uri
=
Services
.
io
.
newURI
(
https
:
/
/
{
domain
}
/
)
;
ok
(
WebExtensionPolicy
.
isQuarantinedURI
(
uri
)
Expect
{
domain
}
to
be
quarantined
)
;
}
for
(
const
domain
of
quarantinedDomainsSets
.
testSet1
.
split
(
"
"
)
)
{
let
uri
=
Services
.
io
.
newURI
(
https
:
/
/
{
domain
}
/
)
;
ok
(
!
WebExtensionPolicy
.
isQuarantinedURI
(
uri
)
Expect
{
domain
}
to
not
be
quarantined
)
;
}
const
NEW_PREF_VALUE
=
"
newdomain1
.
org
newdomain2
.
org
"
;
await
setAndEmitFakeRemoteSettingsData
(
[
{
id
:
"
quarantinedDomains
-
withoutInstallTriggerDeprecation
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
NEW_PREF_VALUE
}
}
]
)
;
assertQuarantinedListPref
(
NEW_PREF_VALUE
)
;
assertQuarantinedListTelemetry
(
{
listhash
:
computeSha1HashAsString
(
NEW_PREF_VALUE
)
remotehash
:
computeSha1HashAsString
(
NEW_PREF_VALUE
)
}
)
;
await
setAndEmitFakeRemoteSettingsData
(
[
{
id
:
"
quarantinedDomains
-
withoutInstallTriggerDeprecation
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
quarantinedDomainsSets
.
testSet1
}
someUnexpectedProperty
:
"
some
unexpected
value
"
}
]
)
;
assertQuarantinedListPref
(
quarantinedDomainsSets
.
testSet1
)
;
assertQuarantinedListTelemetry
(
{
listhash
:
computeSha1HashAsString
(
quarantinedDomainsSets
.
testSet1
)
remotehash
:
computeSha1HashAsString
(
quarantinedDomainsSets
.
testSet1
)
}
)
;
info
(
"
Tamper
with
the
domains
list
pref
value
verify
the
remotesettings
value
is
set
back
after
restart
"
)
;
const
MANUALLY_CHANGED_PREF_VALUE
=
quarantinedDomainsSets
.
testSet1
+
"
test123
.
example
.
org
"
;
Services
.
prefs
.
setStringPref
(
QUARANTINE_LIST_PREF
MANUALLY_CHANGED_PREF_VALUE
)
;
assertQuarantinedListTelemetry
(
{
listhash
:
computeSha1HashAsString
(
MANUALLY_CHANGED_PREF_VALUE
)
remotehash
:
computeSha1HashAsString
(
quarantinedDomainsSets
.
testSet1
)
}
)
;
info
(
"
Mock
browser
restart
"
)
;
resetTelemetryData
(
)
;
const
promisePrefChanged
=
TestUtils
.
waitForPrefChange
(
QUARANTINE_LIST_PREF
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
info
(
Wait
for
expected
change
notified
for
the
{
QUARANTINE_LIST_PREF
}
pref
)
;
await
promisePrefChanged
;
assertQuarantinedListPref
(
quarantinedDomainsSets
.
testSet1
)
;
assertQuarantinedListTelemetry
(
{
listhash
:
computeSha1HashAsString
(
quarantinedDomainsSets
.
testSet1
)
remotehash
:
computeSha1HashAsString
(
quarantinedDomainsSets
.
testSet1
)
}
)
;
}
add_setup
(
async
(
)
=
>
{
setupTelemetryForTests
(
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Assert
.
ok
(
QuarantinedDomains
.
_initialized
"
QuarantinedDomains
is
initialized
"
)
;
}
)
;
add_task
(
testQuarantinedDomainsFromRemoteSettings
)
;
