createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
const
QUARANTINE_LIST_PREF
=
"
extensions
.
quarantinedDomains
.
list
"
;
async
function
testQuarantinedDomainsFromRemoteSettings
(
)
{
const
MAX_PREF_LENGTH
=
1
*
1024
*
1024
;
const
quarantinedDomainsSets
=
{
testSet1
:
"
example
.
com
example
.
org
"
testSet2
:
"
someothersite
.
org
testset2
.
org
"
}
;
await
setAndEmitFakeRemoteSettingsData
(
[
{
id
:
"
quarantinedDomains
-
testSet
-
toolong
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
"
x
"
.
repeat
(
MAX_PREF_LENGTH
+
1
)
}
}
{
id
:
"
quarantinedDomains
-
testSet1
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
quarantinedDomainsSets
.
testSet1
}
}
{
id
:
"
quarantinedDomains
-
testSet2
"
quarantinedDomains
:
{
[
QUARANTINE_LIST_PREF
]
:
quarantinedDomainsSets
.
testSet2
}
}
]
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
QUARANTINE_LIST_PREF
)
Services
.
prefs
.
PREF_STRING
Expect
{
QUARANTINE_LIST_PREF
}
preference
type
to
be
string
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
QUARANTINE_LIST_PREF
)
quarantinedDomainsSets
.
testSet2
Got
the
expected
value
set
on
{
QUARANTINE_LIST_PREF
}
)
;
for
(
const
domain
of
quarantinedDomainsSets
.
testSet2
.
split
(
"
"
)
)
{
let
uri
=
Services
.
io
.
newURI
(
https
:
/
/
{
domain
}
/
)
;
ok
(
WebExtensionPolicy
.
isQuarantinedURI
(
uri
)
Expect
{
domain
}
to
be
quarantined
)
;
}
for
(
const
domain
of
quarantinedDomainsSets
.
testSet1
.
split
(
"
"
)
)
{
let
uri
=
Services
.
io
.
newURI
(
https
:
/
/
{
domain
}
/
)
;
ok
(
!
WebExtensionPolicy
.
isQuarantinedURI
(
uri
)
Expect
{
domain
}
to
not
be
quarantined
)
;
}
}
add_setup
(
async
(
)
=
>
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
}
)
;
add_task
(
testQuarantinedDomainsFromRemoteSettings
)
;
