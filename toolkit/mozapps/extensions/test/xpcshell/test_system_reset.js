let
updatesDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
features
"
]
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
(
)
=
>
"
system
"
;
let
scopes
=
AddonManager
.
SCOPE_PROFILE
|
AddonManager
.
SCOPE_APPLICATION
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
scopes
)
;
const
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
"
app0
"
]
)
;
distroDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
registerDirectory
(
"
XREAppFeat
"
distroDir
)
;
const
SYSTEM_DEFAULTS_ADDON_IDS
=
[
"
system1
tests
.
mozilla
.
org
"
"
system2
tests
.
mozilla
.
org
"
"
system3
tests
.
mozilla
.
org
"
"
system5
tests
.
mozilla
.
org
"
]
;
async
function
setupOverrideBuiltinsApp1
(
)
{
const
builtins
=
[
await
getSystemBuiltin
(
1
"
1
.
0
"
"
app1
-
builtin
-
system1
"
)
await
getSystemBuiltin
(
2
"
1
.
0
"
"
app1
-
builtin
-
system2
"
)
{
addon_id
:
"
system3
tests
.
mozilla
.
org
"
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
app1
-
builtin
-
system3
/
}
{
addon_id
:
"
system5
tests
.
mozilla
.
org
"
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
app1
-
builtin
-
system5
/
}
]
;
await
overrideBuiltIns
(
{
builtins
}
)
;
}
async
function
setupOverrideBuiltinsApp2
(
)
{
const
builtins
=
[
await
getSystemBuiltin
(
1
"
2
.
0
"
"
app2
-
builtin
-
system1
"
)
await
getSystemBuiltin
(
3
"
1
.
0
"
"
app2
-
builtin
-
system3
"
)
{
addon_id
:
"
system2
tests
.
mozilla
.
org
"
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
app2
-
builtin
-
system2
/
}
{
addon_id
:
"
system5
tests
.
mozilla
.
org
"
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
app2
-
builtin
-
system5
/
}
]
;
await
overrideBuiltIns
(
{
builtins
}
)
;
}
async
function
setupOverrideBuiltinsApp3
(
)
{
const
builtins
=
[
await
getSystemBuiltin
(
1
"
1
.
0
"
"
app3
-
builtin
-
system1
"
)
await
getSystemBuiltin
(
3
"
1
.
0
"
"
app3
-
builtin
-
system3
"
)
{
addon_id
:
"
system2
tests
.
mozilla
.
org
"
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
app3
-
builtin
-
system2
/
}
{
addon_id
:
"
system5
tests
.
mozilla
.
org
"
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
app3
-
builtin
-
system5
/
}
]
;
await
overrideBuiltIns
(
{
builtins
}
)
;
}
function
makeUUID
(
)
{
let
uuidGen
=
Services
.
uuid
;
return
uuidGen
.
generateUUID
(
)
.
toString
(
)
;
}
async
function
check_installed
(
conditions
)
{
for
(
let
i
=
0
;
i
<
conditions
.
length
;
i
+
+
)
{
let
condition
=
conditions
[
i
]
;
let
id
=
"
system
"
+
(
i
+
1
)
+
"
tests
.
mozilla
.
org
"
;
info
(
check_installed
:
verifying
addon
{
id
}
)
;
let
addon
=
await
promiseAddonByID
(
id
)
;
if
(
!
(
"
isUpgrade
"
in
condition
)
|
|
!
(
"
version
"
in
condition
)
)
{
throw
Error
(
"
condition
must
contain
isUpgrade
and
version
"
)
;
}
let
isUpgrade
=
conditions
[
i
]
.
isUpgrade
;
let
version
=
conditions
[
i
]
.
version
;
const
{
builtins
}
=
AddonTestUtils
.
getXPIExports
(
)
.
XPIProvider
.
builtInAddons
;
const
foundAsBuiltIn
=
builtins
?
.
find
(
entry
=
>
entry
.
addon_id
=
=
=
id
)
;
if
(
version
)
{
Assert
.
notEqual
(
addon
null
"
add
-
on
should
be
installed
"
)
;
Assert
.
equal
(
addon
.
version
version
"
addon
.
version
"
)
;
Assert
.
ok
(
addon
.
isActive
"
addon
.
isActive
"
)
;
Assert
.
ok
(
!
addon
.
foreignInstall
"
!
addon
.
foreignInstall
"
)
;
Assert
.
ok
(
addon
.
hidden
"
addon
.
hidden
"
)
;
Assert
.
ok
(
addon
.
isSystem
"
addon
.
isSystem
"
)
;
Assert
.
ok
(
!
hasFlag
(
addon
.
permissions
AddonManager
.
PERM_CAN_UPGRADE
)
"
should
not
have
PERM_CAN_UPGRADE
"
)
;
if
(
isUpgrade
)
{
Assert
.
ok
(
hasFlag
(
addon
.
permissions
AddonManager
.
PERM_API_CAN_UNINSTALL
)
"
system
-
signed
update
should
have
PERM_API_CAN_UNINSTALL
"
)
;
}
else
{
Assert
.
ok
(
!
hasFlag
(
addon
.
permissions
AddonManager
.
PERM_API_CAN_UNINSTALL
)
"
auto
-
installed
built
-
in
add
-
ons
update
should
not
have
PERM_API_CAN_UNINSTALL
"
)
;
}
if
(
!
isUpgrade
)
{
Assert
.
equal
(
addon
.
getResourceURI
(
"
"
)
.
spec
foundAsBuiltIn
.
res_url
)
;
}
else
{
let
file
=
updatesDir
.
clone
(
)
;
file
.
append
(
id
+
"
.
xpi
"
)
;
Assert
.
ok
(
file
.
exists
(
)
)
;
Assert
.
ok
(
file
.
isFile
(
)
)
;
Assert
.
equal
(
getAddonFile
(
addon
)
.
path
file
.
path
)
;
Assert
.
equal
(
addon
.
signedState
AddonManager
.
SIGNEDSTATE_SYSTEM
"
should
be
system
-
signed
"
)
;
}
}
else
if
(
isUpgrade
)
{
Assert
.
equal
(
addon
null
"
add
-
on
should
not
be
installed
"
)
;
}
else
{
Assert
.
ok
(
!
addon
|
|
!
addon
.
isActive
"
add
-
on
should
disabled
or
not
installed
"
)
;
}
}
}
async
function
test_default_missing
(
)
{
let
overrideBuiltInsData
=
{
builtins
:
SYSTEM_DEFAULTS_ADDON_IDS
.
map
(
id
=
>
{
return
{
addon_id
:
id
addon_version
:
"
1
.
0
"
res_url
:
resource
:
/
/
missing
-
builtin
-
{
id
.
split
(
"
"
)
[
0
]
}
/
}
;
}
)
}
;
await
overrideBuiltIns
(
overrideBuiltInsData
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
;
await
check_installed
(
conditions
)
;
Assert
.
ok
(
!
updatesDir
.
exists
(
)
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_new_version
(
)
{
gAppInfo
.
version
=
"
1
"
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
;
await
check_installed
(
conditions
)
;
Assert
.
ok
(
!
updatesDir
.
exists
(
)
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_upgrade
(
)
{
gAppInfo
.
version
=
"
2
"
;
await
setupOverrideBuiltinsApp2
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
Assert
.
ok
(
!
updatesDir
.
exists
(
)
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_downgrade
(
)
{
gAppInfo
.
version
=
"
1
"
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
;
await
check_installed
(
conditions
)
;
Assert
.
ok
(
!
updatesDir
.
exists
(
)
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_updated
(
)
{
let
dirname
=
makeUUID
(
)
;
let
dir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
features
"
dirname
]
)
;
dir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
updatesDir
=
dir
;
let
file
=
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
;
file
.
copyTo
(
updatesDir
"
system2
tests
.
mozilla
.
org
.
xpi
"
)
;
file
=
await
getSystemAddonXPI
(
3
"
2
.
0
"
)
;
file
.
copyTo
(
updatesDir
"
system3
tests
.
mozilla
.
org
.
xpi
"
)
;
let
addonSet
=
{
schema
:
1
directory
:
updatesDir
.
leafName
addons
:
{
"
system2
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system3
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
}
}
;
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
JSON
.
stringify
(
addonSet
)
)
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
async
function
safe_mode_disabled
(
)
{
gAppInfo
.
inSafeMode
=
true
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
async
function
normal_mode_enabled
(
)
{
gAppInfo
.
inSafeMode
=
false
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_skips_additional
(
)
{
let
file
=
await
getSystemAddonXPI
(
4
"
1
.
0
"
)
;
file
.
copyTo
(
updatesDir
"
system4
tests
.
mozilla
.
org
.
xpi
"
)
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_no_hide_location_on_missing_addon
(
)
{
manuallyUninstall
(
updatesDir
"
system2
tests
.
mozilla
.
org
"
)
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_reuse
(
)
{
let
file
=
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
;
file
.
copyTo
(
updatesDir
"
system2
tests
.
mozilla
.
org
.
xpi
"
)
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_corrupt_pref
(
)
{
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
"
foo
"
)
;
await
setupOverrideBuiltinsApp1
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
async
function
test_bad_profile_cert
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
id
=
>
{
return
id
=
=
=
"
system1
tests
.
mozilla
.
org
"
?
false
:
"
system
"
;
}
;
let
file
=
await
getSystemAddonXPI
(
1
"
2
.
0
"
)
;
file
.
copyTo
(
updatesDir
"
system1
tests
.
mozilla
.
org
.
xpi
"
)
;
let
addonSet
=
{
schema
:
1
directory
:
updatesDir
.
leafName
addons
:
{
"
system1
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system2
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system3
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
}
}
;
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
JSON
.
stringify
(
addonSet
)
)
;
await
setupOverrideBuiltinsApp1
(
)
;
const
{
messages
}
=
await
AddonTestUtils
.
promiseConsoleOutput
(
async
(
)
=
>
{
await
promiseStartupManager
(
)
;
}
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
const
expectedMessage
=
/
system1
tests
.
mozilla
.
org
is
not
correctly
signed
/
;
AddonTestUtils
.
checkMessages
(
messages
{
expected
:
[
{
message
:
expectedMessage
}
]
}
)
;
verifySystemAddonSetPref
(
{
"
system1
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system2
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system3
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
}
)
;
await
promiseShutdownManager
(
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
(
)
=
>
"
system
"
;
}
async
function
test_system_signature_is_not_required_for_builtins
(
)
{
gAppInfo
.
version
=
"
3
"
;
AddonTestUtils
.
usePrivilegedSignatures
=
id
=
>
{
return
id
=
=
=
"
system1
tests
.
mozilla
.
org
"
?
false
:
"
system
"
;
}
;
await
setupOverrideBuiltinsApp3
(
)
;
await
promiseStartupManager
(
)
;
verifySystemAddonSetPref
(
{
"
system1
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system2
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system3
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
}
)
;
let
addon
=
await
promiseAddonByID
(
"
system1
tests
.
mozilla
.
org
"
)
;
Assert
.
notEqual
(
addon
null
)
;
Assert
.
equal
(
addon
.
signedState
AddonManager
.
SIGNEDSTATE_NOT_REQUIRED
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
verifySystemAddonSetPref
(
{
"
system1
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system2
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system3
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
}
)
;
await
promiseShutdownManager
(
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
(
)
=
>
"
system
"
;
}
async
function
test_updated_bad_update_set
(
)
{
let
dirname
=
makeUUID
(
)
;
let
dir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
features
"
dirname
]
)
;
dir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
updatesDir
=
dir
;
let
file
=
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
;
file
.
copyTo
(
updatesDir
"
system2
tests
.
mozilla
.
org
.
xpi
"
)
;
file
=
await
getSystemAddonXPI
(
"
failed_update
"
"
1
.
0
"
)
;
file
.
copyTo
(
updatesDir
"
system_failed_update
tests
.
mozilla
.
org
.
xpi
"
)
;
let
addonSet
=
{
schema
:
1
directory
:
updatesDir
.
leafName
addons
:
{
"
system2
tests
.
mozilla
.
org
"
:
{
version
:
"
2
.
0
"
}
"
system_failed_update
tests
.
mozilla
.
org
"
:
{
version
:
"
1
.
0
"
}
}
}
;
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_SET
JSON
.
stringify
(
addonSet
)
)
;
await
setupOverrideBuiltinsApp3
(
)
;
await
promiseStartupManager
(
)
;
let
conditions
=
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
]
;
await
check_installed
(
conditions
)
;
await
promiseShutdownManager
(
)
;
}
add_task
(
async
function
run_system_reset_scenarios
(
)
{
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
0
"
)
;
clearSystemAddonUpdatesDir
(
)
;
const
test_scenarios
=
[
test_default_missing
test_new_version
test_upgrade
test_downgrade
test_updated
safe_mode_disabled
normal_mode_enabled
test_skips_additional
test_no_hide_location_on_missing_addon
test_reuse
test_corrupt_pref
test_bad_profile_cert
test_system_signature_is_not_required_for_builtins
test_updated_bad_update_set
]
;
for
(
const
test_fn
of
test_scenarios
)
{
info
(
=
=
=
=
=
Entering
test
scenario
:
{
test_fn
.
name
}
=
=
=
=
=
)
;
await
test_fn
(
)
;
info
(
=
=
=
=
=
Exiting
test
scenario
:
{
test_fn
.
name
}
=
=
=
=
=
)
;
}
}
)
;
