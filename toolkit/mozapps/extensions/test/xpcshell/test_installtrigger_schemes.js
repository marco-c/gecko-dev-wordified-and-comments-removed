"
use
strict
"
;
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
async
function
assertInstallTriggetRejected
(
page
xpi_url
expectedError
)
{
await
Assert
.
rejects
(
page
.
spawn
(
[
xpi_url
]
async
url
=
>
{
this
.
content
.
eval
(
InstallTrigger
.
install
(
{
extension
:
'
{
url
}
'
}
)
;
)
;
}
)
expectedError
InstallTrigger
.
install
expected
to
throw
on
xpi
url
"
{
xpi_url
}
"
)
;
}
add_task
(
{
pref_set
:
[
[
"
extensions
.
InstallTrigger
.
enabled
"
true
]
[
"
extensions
.
InstallTriggerImpl
.
enabled
"
true
]
[
"
xpinstall
.
userActivation
.
required
"
false
]
]
}
async
function
test_InstallTriggerThrows_on_unsupported_xpi_schemes_blob
(
)
{
const
page
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
"
)
;
const
blob_url
=
await
page
.
spawn
(
[
]
(
)
=
>
{
return
this
.
content
.
eval
(
(
function
(
)
{
const
blob
=
new
Blob
(
[
'
fakexpicontent
'
]
)
;
return
URL
.
createObjectURL
(
blob
)
;
}
)
(
)
)
;
}
)
;
await
assertInstallTriggetRejected
(
page
blob_url
/
Unsupported
scheme
/
)
;
await
page
.
close
(
)
;
}
)
;
add_task
(
{
pref_set
:
[
[
"
extensions
.
InstallTrigger
.
enabled
"
true
]
[
"
extensions
.
InstallTriggerImpl
.
enabled
"
true
]
[
"
xpinstall
.
userActivation
.
required
"
false
]
]
}
async
function
test_InstallTriggerThrows_on_unsupported_xpi_schemes_data
(
)
{
const
page
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
"
)
;
const
data_url
=
"
data
:
;
fakexpicontent
"
;
await
assertInstallTriggetRejected
(
page
data_url
/
Insufficient
permissions
to
install
/
)
;
await
page
.
close
(
)
;
}
)
;
