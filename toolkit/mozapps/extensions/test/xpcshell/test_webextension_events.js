createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
add_task
(
async
function
(
)
{
let
triggered
=
{
}
;
const
{
Management
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
;
for
(
let
event
of
[
"
install
"
"
uninstall
"
"
update
"
]
)
{
triggered
[
event
]
=
false
;
Management
.
on
(
event
(
)
=
>
triggered
[
event
]
=
true
)
;
}
async
function
expectEvents
(
expected
fn
)
{
let
events
=
Object
.
keys
(
expected
)
;
for
(
let
event
of
events
)
{
triggered
[
event
]
=
false
;
}
await
fn
(
)
;
for
(
let
event
of
events
)
{
equal
(
triggered
[
event
]
expected
[
event
]
Event
{
event
}
was
{
expected
[
event
]
?
"
"
:
"
not
"
}
triggered
)
;
}
}
await
promiseStartupManager
(
)
;
const
id
=
"
webextension
tests
.
mozilla
.
org
"
;
await
expectEvents
(
{
update
:
false
uninstall
:
false
}
async
(
)
=
>
{
await
promiseInstallWebExtension
(
{
manifest
:
{
version
:
"
1
.
0
"
applications
:
{
gecko
:
{
id
}
}
}
}
)
;
}
)
;
await
expectEvents
(
{
update
:
true
uninstall
:
false
}
async
(
)
=
>
{
await
promiseInstallWebExtension
(
{
manifest
:
{
version
:
"
2
.
0
"
applications
:
{
gecko
:
{
id
}
}
}
}
)
;
}
)
;
let
v3
=
createTempWebExtensionFile
(
{
manifest
:
{
version
:
"
3
.
0
"
applications
:
{
gecko
:
{
id
}
}
}
}
)
;
await
expectEvents
(
{
update
:
true
uninstall
:
false
}
(
)
=
>
Promise
.
all
(
[
AddonManager
.
installTemporaryAddon
(
v3
)
promiseWebExtensionStartup
(
)
]
)
)
;
let
addon
=
await
promiseAddonByID
(
id
)
;
await
expectEvents
(
{
update
:
true
uninstall
:
false
}
(
)
=
>
{
addon
.
uninstall
(
)
;
}
)
;
await
Promise
.
all
(
[
AddonManager
.
installTemporaryAddon
(
v3
)
promiseWebExtensionStartup
(
)
]
)
;
await
expectEvents
(
{
update
:
true
uninstall
:
false
}
(
)
=
>
promiseShutdownManager
(
)
)
;
await
expectEvents
(
{
install
:
false
}
(
)
=
>
promiseStartupManager
(
)
)
;
addon
=
await
promiseAddonByID
(
id
)
;
await
expectEvents
(
{
update
:
false
uninstall
:
true
}
(
)
=
>
{
addon
.
uninstall
(
)
;
}
)
;
}
)
;
