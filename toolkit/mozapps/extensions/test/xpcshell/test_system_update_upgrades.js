Components
.
utils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
BootstrapMonitor
.
init
(
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
2
"
)
;
var
testserver
=
new
HttpServer
(
)
;
testserver
.
registerDirectory
(
"
/
data
/
"
do_get_file
(
"
data
/
system_addons
"
)
)
;
testserver
.
start
(
)
;
var
root
=
testserver
.
identity
.
primaryScheme
+
"
:
/
/
"
+
testserver
.
identity
.
primaryHost
+
"
:
"
+
testserver
.
identity
.
primaryPort
+
"
/
data
/
"
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_UPDATE_URL
root
+
"
update
.
xml
"
)
;
let
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
"
empty
"
]
true
)
;
registerDirectory
(
"
XREAppFeat
"
distroDir
)
;
initSystemAddonDirs
(
)
;
const
TEST_CONDITIONS
=
{
blank
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withAppSet
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
prefilled
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withProfileSet
:
{
setup
(
)
{
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withBothSets
:
{
setup
(
)
{
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
hidden
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
}
;
const
TESTS
=
{
upgrades
:
{
updateList
:
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
3
.
0
"
path
:
"
system2_3
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
3
.
0
"
path
:
"
system3_3
.
xpi
"
}
]
finalState
:
{
blank
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
withAppSet
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
withProfileSet
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
withBothSets
:
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
true
version
:
"
3
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
}
}
add_task
(
async
function
setup
(
)
{
awaitPromise
(
overrideBuiltIns
(
{
"
system
"
:
[
]
}
)
)
;
startupManager
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
(
)
{
for
(
let
setupName
of
Object
.
keys
(
TEST_CONDITIONS
)
)
{
for
(
let
testName
of
Object
.
keys
(
TESTS
)
)
{
do_print
(
"
Running
test
"
+
setupName
+
"
"
+
testName
)
;
let
setup
=
TEST_CONDITIONS
[
setupName
]
;
let
test
=
TESTS
[
testName
]
;
await
execSystemAddonTest
(
setupName
setup
test
distroDir
root
testserver
)
;
}
}
}
)
;
