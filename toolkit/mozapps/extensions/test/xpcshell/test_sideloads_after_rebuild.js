"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
webextensions
.
warnings
-
as
-
errors
"
false
)
;
let
legacyIDs
=
[
getID
(
legacy
-
global
)
getID
(
legacy
-
user
)
getID
(
legacy
-
app
)
getID
(
legacy
-
profile
)
]
;
add_task
(
async
function
test_sideloads_after_rebuild
(
)
{
let
IDs
=
[
]
;
for
(
let
[
name
dir
]
of
Object
.
entries
(
scopeDirectories
)
)
{
let
id
=
getID
(
legacy
-
{
name
}
)
;
IDs
.
push
(
id
)
;
await
createWebExtension
(
id
initialVersion
(
name
)
dir
)
;
}
await
promiseStartupManager
(
)
;
let
sideloaded
=
await
AddonManagerPrivate
.
getNewSideloads
(
)
;
Assert
.
equal
(
sideloaded
.
length
4
"
four
sideloaded
addon
"
)
;
let
sideloadedIds
=
sideloaded
.
map
(
a
=
>
a
.
id
)
;
for
(
let
id
of
legacyIDs
)
{
Assert
.
ok
(
sideloadedIds
.
includes
(
id
)
)
;
}
await
promiseShutdownManager
(
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
sideloadScopes
"
AddonManager
.
SCOPE_PROFILE
)
;
await
createWebExtension
(
getID
(
sideload
-
global
-
1
)
initialVersion
(
"
sideload
-
global
"
)
globalDir
)
;
await
promiseStartupManager
(
"
2
"
)
;
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
extension
"
]
)
;
Assert
.
equal
(
addons
.
length
4
"
addons
remain
installed
"
)
;
await
promiseShutdownManager
(
)
;
await
createWebExtension
(
getID
(
sideload
-
global
-
2
)
initialVersion
(
"
sideload
-
global
"
)
globalDir
)
;
await
createWebExtension
(
getID
(
sideload
-
app
-
2
)
initialVersion
(
"
sideload
-
global
"
)
globalDir
)
;
await
createWebExtension
(
getID
(
sideload
-
profile
)
initialVersion
(
"
sideload
-
profile
"
)
profileDir
)
;
await
IOUtils
.
writeJSON
(
gExtensionsJSON
.
path
{
not
:
"
what
we
expect
to
find
"
}
)
;
info
(
*
*
*
*
restart
AOM
and
rebuild
XPI
database
)
;
await
promiseStartupManager
(
)
;
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
extension
"
]
)
;
Assert
.
equal
(
addons
.
length
5
"
addons
installed
"
)
;
await
promiseShutdownManager
(
)
;
await
createWebExtension
(
getID
(
sideload
-
global
-
3
)
initialVersion
(
"
sideload
-
global
"
)
globalDir
)
;
await
createWebExtension
(
getID
(
sideload
-
profile
-
2
)
initialVersion
(
"
sideload
-
profile
"
)
profileDir
)
;
await
IOUtils
.
writeJSON
(
gExtensionsJSON
.
path
{
not
:
"
what
we
expect
to
find
"
}
)
;
gAddonStartup
.
remove
(
true
)
;
info
(
*
*
*
*
restart
AOM
and
rebuild
XPI
database
)
;
await
promiseStartupManager
(
)
;
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
extension
"
]
)
;
Assert
.
equal
(
addons
.
length
3
"
addons
installed
"
)
;
let
[
a1
a2
a3
]
=
await
promiseAddonsByIDs
(
[
getID
(
legacy
-
profile
)
getID
(
sideload
-
profile
)
getID
(
sideload
-
profile
-
2
)
]
)
;
Assert
.
notEqual
(
a1
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a1
.
id
)
)
;
Assert
.
notEqual
(
a2
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a2
.
id
)
)
;
Assert
.
notEqual
(
a3
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a3
.
id
)
)
;
await
promiseShutdownManager
(
)
;
}
)
;
