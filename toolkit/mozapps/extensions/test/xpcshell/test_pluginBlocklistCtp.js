const
nsIBLS
=
Ci
.
nsIBlocklistService
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
var
gNotifier
=
null
;
var
gNextTest
=
null
;
var
gPluginHost
=
null
;
var
gServer
=
new
HttpServer
(
)
;
gServer
.
start
(
-
1
)
;
gPort
=
gServer
.
identity
.
primaryPort
;
mapFile
(
"
/
data
/
test_pluginBlocklistCtp
.
xml
"
gServer
)
;
mapFile
(
"
/
data
/
test_pluginBlocklistCtpUndo
.
xml
"
gServer
)
;
var
PLUGINS
=
[
{
name
:
"
test_plugin_0
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_1
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_2
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_3
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_4
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_5
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
]
;
function
test_basic
(
)
{
var
blocklist
=
Cc
[
"
mozilla
.
org
/
extensions
/
blocklist
;
1
"
]
.
getService
(
nsIBLS
)
;
Assert
.
ok
(
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
0
]
"
1
"
"
1
.
9
"
)
=
=
nsIBLS
.
STATE_OUTDATED
)
;
Assert
.
ok
(
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
1
]
"
1
"
"
1
.
9
"
)
=
=
nsIBLS
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
Assert
.
ok
(
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
2
]
"
1
"
"
1
.
9
"
)
=
=
nsIBLS
.
STATE_VULNERABLE_NO_UPDATE
)
;
Assert
.
ok
(
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
3
]
"
1
"
"
1
.
9
"
)
=
=
nsIBLS
.
STATE_BLOCKED
)
;
Assert
.
ok
(
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
4
]
"
1
"
"
1
.
9
"
)
=
=
nsIBLS
.
STATE_SOFTBLOCKED
)
;
Assert
.
ok
(
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
5
]
"
1
"
"
1
.
9
"
)
=
=
nsIBLS
.
STATE_NOT_BLOCKED
)
;
gNextTest
=
test_is_not_clicktoplay
;
executeSoon
(
gNextTest
)
;
}
function
get_test_plugin
(
)
{
var
pluginHost
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
for
(
var
plugin
of
pluginHost
.
getPluginTags
(
)
)
{
if
(
plugin
.
name
=
=
"
Test
Plug
-
in
"
)
return
plugin
;
}
Assert
.
ok
(
false
)
;
return
null
;
}
function
test_is_not_clicktoplay
(
)
{
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
Services
.
blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
"
http
:
/
/
localhost
:
"
+
gPort
+
"
/
data
/
test_pluginBlocklistCtpUndo
.
xml
"
)
;
gNextTest
=
test_is_clicktoplay
;
gNotifier
.
notify
(
null
)
;
}
function
test_is_clicktoplay
(
)
{
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
Services
.
blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
equal
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
"
http
:
/
/
localhost
:
"
+
gPort
+
"
/
data
/
test_pluginBlocklistCtp
.
xml
"
)
;
gNextTest
=
test_is_not_clicktoplay2
;
gNotifier
.
notify
(
null
)
;
}
function
test_is_not_clicktoplay2
(
)
{
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
Services
.
blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
"
http
:
/
/
localhost
:
"
+
gPort
+
"
/
data
/
test_pluginBlocklistCtpUndo
.
xml
"
)
;
gNextTest
=
test_disable_blocklist
;
gNotifier
.
notify
(
null
)
;
}
function
test_disable_blocklist
(
)
{
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
Services
.
blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
equal
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
gNextTest
=
null
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
enabled
"
false
)
;
blocklistState
=
Services
.
blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
Services
.
prefs
.
setBoolPref
(
"
plugins
.
click_to_play
"
true
)
;
let
previousEnabledState
=
plugin
.
enabledState
;
plugin
.
enabledState
=
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
;
Assert
.
equal
(
gPluginHost
.
getStateForType
(
"
application
/
x
-
test
"
)
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
plugin
.
enabledState
=
previousEnabledState
;
gServer
.
stop
(
do_test_finished
)
;
}
function
observer
(
)
{
if
(
gNextTest
)
executeSoon
(
gNextTest
)
;
}
function
run_test
(
)
{
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
"
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
"
http
:
/
/
localhost
:
"
+
gPort
+
"
/
data
/
test_pluginBlocklistCtp
.
xml
"
)
;
Services
.
prefs
.
setBoolPref
(
"
plugin
.
load_flash_only
"
false
)
;
startupManager
(
)
;
gPluginHost
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
gNotifier
=
Cc
[
"
mozilla
.
org
/
extensions
/
blocklist
;
1
"
]
.
getService
(
Ci
.
nsITimerCallback
)
;
Services
.
obs
.
addObserver
(
observer
"
blocklist
-
updated
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
extensions
.
blocklist
.
url
"
)
;
Services
.
prefs
.
clearUserPref
(
"
extensions
.
blocklist
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
plugins
.
click_to_play
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
blocklist
-
updated
"
)
;
}
)
;
gNextTest
=
test_basic
;
do_test_pending
(
)
;
gNotifier
.
notify
(
null
)
;
}
