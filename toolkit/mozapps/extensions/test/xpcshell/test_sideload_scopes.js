"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
security
.
turn_off_all_security_so_that_viruses_can_take_over_this_computer
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
AddonManager
.
SCOPE_ALL
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
sideloadScopes
"
AddonManager
.
SCOPE_ALL
)
;
Services
.
prefs
.
clearUserPref
(
"
extensions
.
autoDisableScopes
"
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
function
getID
(
n
)
{
return
{
n
}
tests
.
mozilla
.
org
;
}
function
initialVersion
(
n
)
{
return
{
n
}
.
0
;
}
const
globalDir
=
gProfD
.
clone
(
)
;
globalDir
.
append
(
"
app
-
system
-
share
"
)
;
globalDir
.
append
(
gAppInfo
.
ID
)
;
registerDirectory
(
"
XRESysSExtPD
"
globalDir
.
parent
)
;
const
userDir
=
gProfD
.
clone
(
)
;
userDir
.
append
(
"
app
-
system
-
user
"
)
;
userDir
.
append
(
gAppInfo
.
ID
)
;
registerDirectory
(
"
XREUSysExt
"
userDir
.
parent
)
;
const
addonAppDir
=
gProfD
.
clone
(
)
;
addonAppDir
.
append
(
"
app
-
global
"
)
;
addonAppDir
.
append
(
gAppInfo
.
ID
)
;
registerDirectory
(
"
XREAddonAppDir
"
addonAppDir
.
parent
)
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
const
scopeDirectories
=
Object
.
entries
(
{
global
:
globalDir
user
:
userDir
app
:
addonAppDir
profile
:
profileDir
}
)
;
function
check_startup_changes
(
aType
aIds
)
{
var
ids
=
aIds
.
slice
(
0
)
;
ids
.
sort
(
)
;
var
changes
=
AddonManager
.
getStartupChanges
(
aType
)
;
changes
=
changes
.
filter
(
aEl
=
>
/
tests
.
mozilla
.
org
/
.
test
(
aEl
)
)
;
changes
.
sort
(
)
;
Assert
.
equal
(
JSON
.
stringify
(
ids
)
JSON
.
stringify
(
changes
)
)
;
}
async
function
createWebExtension
(
id
version
dir
)
{
let
xpi
=
AddonTestUtils
.
createTempWebExtensionFile
(
{
manifest
:
{
version
applications
:
{
gecko
:
{
id
}
}
}
}
)
;
await
AddonTestUtils
.
manuallyInstall
(
xpi
dir
)
;
}
let
legacyIDs
=
[
getID
(
legacy
-
global
)
getID
(
legacy
-
user
)
getID
(
legacy
-
profile
)
]
;
add_task
(
async
function
test_sideloads_legacy
(
)
{
let
IDs
=
[
]
;
for
(
let
[
name
dir
]
of
scopeDirectories
)
{
let
id
=
getID
(
legacy
-
{
name
}
)
;
IDs
.
push
(
id
)
;
await
createWebExtension
(
id
initialVersion
(
name
)
dir
)
;
}
await
promiseStartupManager
(
)
;
let
sideloaded
=
await
AddonManagerPrivate
.
getNewSideloads
(
)
;
Assert
.
equal
(
sideloaded
.
length
3
"
three
sideloaded
addon
"
)
;
let
sideloadedIds
=
sideloaded
.
map
(
a
=
>
a
.
id
)
;
for
(
let
id
of
legacyIDs
)
{
Assert
.
ok
(
sideloadedIds
.
includes
(
id
)
{
id
}
is
sideloaded
)
;
}
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_INSTALLED
[
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_CHANGED
[
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_UNINSTALLED
[
]
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_sideloads_disabled
(
)
{
Services
.
prefs
.
clearUserPref
(
"
extensions
.
sideloadScopes
"
)
;
for
(
let
[
name
dir
]
of
scopeDirectories
)
{
await
createWebExtension
(
getID
(
name
)
initialVersion
(
name
)
dir
)
;
}
await
promiseStartupManager
(
)
;
let
sideloaded
=
await
AddonManagerPrivate
.
getNewSideloads
(
)
;
Assert
.
equal
(
sideloaded
.
length
1
"
one
sideloaded
addon
"
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_INSTALLED
[
getID
(
"
profile
"
)
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_CHANGED
[
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_UNINSTALLED
[
]
)
;
for
(
let
[
name
]
of
scopeDirectories
)
{
let
id
=
getID
(
name
)
;
let
addon
=
await
promiseAddonByID
(
id
)
;
if
(
name
=
=
=
"
profile
"
)
{
Assert
.
notEqual
(
addon
null
)
;
Assert
.
equal
(
addon
.
id
id
)
;
Assert
.
ok
(
addon
.
foreignInstall
)
;
Assert
.
equal
(
addon
.
scope
AddonManager
.
SCOPE_PROFILE
)
;
Assert
.
ok
(
addon
.
userDisabled
)
;
Assert
.
ok
(
!
addon
.
seen
)
;
}
else
{
Assert
.
equal
(
addon
null
addon
{
id
}
is
not
installed
)
;
}
}
let
extensionAddons
=
await
AddonManager
.
getAddonsByTypes
(
[
"
extension
"
]
)
;
Assert
.
equal
(
extensionAddons
.
length
4
)
;
let
IDs
=
extensionAddons
.
map
(
ext
=
>
ext
.
id
)
;
for
(
let
id
of
[
getID
(
"
profile
"
)
.
.
.
legacyIDs
]
)
{
Assert
.
ok
(
IDs
.
includes
(
id
)
{
id
}
is
installed
)
;
}
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_sideloads_changed
(
)
{
for
(
let
[
name
dir
]
of
scopeDirectories
)
{
let
id
=
getID
(
name
)
;
await
createWebExtension
(
id
{
name
}
.
1
dir
)
;
id
=
getID
(
legacy
-
{
name
}
)
;
await
createWebExtension
(
id
{
name
}
.
1
dir
)
;
}
await
promiseStartupManager
(
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_INSTALLED
[
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_CHANGED
[
getID
(
"
profile
"
)
.
.
.
legacyIDs
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_UNINSTALLED
[
]
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_sideloads_removed
(
)
{
for
(
let
[
name
dir
]
of
scopeDirectories
)
{
let
id
=
getID
(
name
)
;
await
OS
.
File
.
remove
(
OS
.
Path
.
join
(
dir
.
path
{
id
}
.
xpi
)
)
;
id
=
getID
(
legacy
-
{
name
}
)
;
await
OS
.
File
.
remove
(
OS
.
Path
.
join
(
dir
.
path
{
id
}
.
xpi
)
)
;
}
await
promiseStartupManager
(
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_INSTALLED
[
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_CHANGED
[
]
)
;
check_startup_changes
(
AddonManager
.
STARTUP_CHANGE_UNINSTALLED
[
getID
(
"
profile
"
)
.
.
.
legacyIDs
]
)
;
await
promiseShutdownManager
(
)
;
}
)
;
