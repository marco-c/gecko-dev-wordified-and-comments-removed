ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
function
run_test
(
)
{
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
startupManager
(
)
;
do_test_pending
(
)
;
run_test_1
(
)
;
}
async
function
run_test_1
(
)
{
let
install
=
await
AddonManager
.
getInstallForFile
(
do_get_file
(
"
data
/
unsigned
.
xpi
"
)
)
;
Assert
.
notEqual
(
install
null
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_DOWNLOADED
)
;
Assert
.
equal
(
install
.
error
0
)
;
install
.
cancel
(
)
;
run_test_2
(
)
;
}
async
function
run_test_2
(
)
{
let
install
=
await
AddonManager
.
getInstallForFile
(
do_get_file
(
"
data
/
corrupt
.
xpi
"
)
)
;
Assert
.
notEqual
(
install
null
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_DOWNLOAD_FAILED
)
;
Assert
.
equal
(
install
.
error
AddonManager
.
ERROR_CORRUPT_FILE
)
;
run_test_3
(
)
;
}
async
function
run_test_3
(
)
{
let
install
=
await
AddonManager
.
getInstallForFile
(
do_get_file
(
"
data
/
empty
.
xpi
"
)
)
;
Assert
.
notEqual
(
install
null
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_DOWNLOAD_FAILED
)
;
Assert
.
equal
(
install
.
error
AddonManager
.
ERROR_CORRUPT_FILE
)
;
run_test_4
(
)
;
}
async
function
run_test_4
(
)
{
let
url
=
Services
.
io
.
newFileURI
(
do_get_file
(
"
data
/
unsigned
.
xpi
"
)
)
.
spec
;
let
install
=
await
AddonManager
.
getInstallForURL
(
url
null
"
application
/
x
-
xpinstall
"
"
sha1
:
foo
"
)
;
Assert
.
notEqual
(
install
null
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_DOWNLOAD_FAILED
)
;
Assert
.
equal
(
install
.
error
AddonManager
.
ERROR_INCORRECT_HASH
)
;
run_test_5
(
)
;
}
async
function
run_test_5
(
)
{
let
file
=
do_get_file
(
"
data
"
)
;
file
.
append
(
"
missing
.
xpi
"
)
;
let
install
=
await
AddonManager
.
getInstallForFile
(
file
)
;
Assert
.
notEqual
(
install
null
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_DOWNLOAD_FAILED
)
;
Assert
.
equal
(
install
.
error
AddonManager
.
ERROR_NETWORK_FAILURE
)
;
run_test_6
(
)
;
}
async
function
run_test_6
(
)
{
let
install
=
await
AddonManager
.
getInstallForFile
(
do_get_addon
(
"
test_bug567173
"
)
)
;
Assert
.
notEqual
(
install
null
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_DOWNLOAD_FAILED
)
;
Assert
.
equal
(
install
.
error
AddonManager
.
ERROR_CORRUPT_FILE
)
;
executeSoon
(
do_test_finished
)
;
}
