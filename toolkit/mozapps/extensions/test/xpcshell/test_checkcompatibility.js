var
ADDONS
=
[
{
id
:
"
addon1
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
name
:
"
Test
1
"
targetApplications
:
[
{
id
:
"
unknown
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
}
{
id
:
"
addon2
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
name
:
"
Test
2
"
targetApplications
:
[
{
id
:
"
toolkit
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
}
{
id
:
"
addon3
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
name
:
"
Test
3
"
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
}
{
id
:
"
addon4
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
name
:
"
Test
4
"
targetApplications
:
[
{
id
:
"
toolkit
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
2
"
}
]
}
{
id
:
"
addon5
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
name
:
"
Test
5
"
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
3
"
}
]
}
]
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
var
gIsNightly
=
false
;
function
run_test
(
)
{
do_test_pending
(
"
checkcompatibility
.
js
"
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
2
.
2
.
3
"
"
2
"
)
;
ADDONS
.
forEach
(
function
(
a
)
{
writeInstallRDFForExtension
(
a
profileDir
)
;
}
)
;
gIsNightly
=
isNightlyChannel
(
)
;
startupManager
(
)
;
run_test_1
(
)
;
}
function
check_state
(
overridden
a1
a2
a3
a4
a5
)
{
Assert
.
notEqual
(
a1
null
)
;
Assert
.
ok
(
!
a1
.
isActive
)
;
Assert
.
ok
(
!
a1
.
isCompatible
)
;
Assert
.
notEqual
(
a2
null
)
;
if
(
overridden
)
Assert
.
ok
(
a2
.
isActive
)
;
else
Assert
.
ok
(
!
a2
.
isActive
)
;
Assert
.
ok
(
!
a2
.
isCompatible
)
;
Assert
.
notEqual
(
a3
null
)
;
if
(
overridden
)
Assert
.
ok
(
a3
.
isActive
)
;
else
Assert
.
ok
(
!
a3
.
isActive
)
;
Assert
.
ok
(
!
a3
.
isCompatible
)
;
Assert
.
notEqual
(
a4
null
)
;
Assert
.
ok
(
a4
.
isActive
)
;
Assert
.
ok
(
a4
.
isCompatible
)
;
Assert
.
notEqual
(
a5
null
)
;
Assert
.
ok
(
a5
.
isActive
)
;
Assert
.
ok
(
a5
.
isCompatible
)
;
}
function
run_test_1
(
)
{
AddonManager
.
getAddonsByIDs
(
[
"
addon1
tests
.
mozilla
.
org
"
"
addon2
tests
.
mozilla
.
org
"
"
addon3
tests
.
mozilla
.
org
"
"
addon4
tests
.
mozilla
.
org
"
"
addon5
tests
.
mozilla
.
org
"
]
function
(
[
a1
a2
a3
a4
a5
]
)
{
check_state
(
false
a1
a2
a3
a4
a5
)
;
do_execute_soon
(
run_test_2
)
;
}
)
;
}
function
run_test_2
(
)
{
if
(
gIsNightly
)
Services
.
prefs
.
setBoolPref
(
"
extensions
.
checkCompatibility
.
nightly
"
false
)
;
else
Services
.
prefs
.
setBoolPref
(
"
extensions
.
checkCompatibility
.
2
.
2
"
false
)
;
restartManager
(
)
;
AddonManager
.
getAddonsByIDs
(
[
"
addon1
tests
.
mozilla
.
org
"
"
addon2
tests
.
mozilla
.
org
"
"
addon3
tests
.
mozilla
.
org
"
"
addon4
tests
.
mozilla
.
org
"
"
addon5
tests
.
mozilla
.
org
"
]
function
(
[
a1
a2
a3
a4
a5
]
)
{
check_state
(
true
a1
a2
a3
a4
a5
)
;
do_execute_soon
(
run_test_3
)
;
}
)
;
}
function
run_test_3
(
)
{
if
(
!
gIsNightly
)
Services
.
prefs
.
setBoolPref
(
"
extensions
.
checkCompatibility
.
2
.
1a
"
false
)
;
restartManager
(
"
2
.
1a4
"
)
;
AddonManager
.
getAddonsByIDs
(
[
"
addon1
tests
.
mozilla
.
org
"
"
addon2
tests
.
mozilla
.
org
"
"
addon3
tests
.
mozilla
.
org
"
"
addon4
tests
.
mozilla
.
org
"
"
addon5
tests
.
mozilla
.
org
"
]
function
(
[
a1
a2
a3
a4
a5
]
)
{
check_state
(
true
a1
a2
a3
a4
a5
)
;
do_execute_soon
(
run_test_4
)
;
}
)
;
}
function
run_test_4
(
)
{
if
(
gIsNightly
)
Services
.
prefs
.
setBoolPref
(
"
extensions
.
checkCompatibility
.
nightly
"
true
)
;
else
Services
.
prefs
.
setBoolPref
(
"
extensions
.
checkCompatibility
.
2
.
1a
"
true
)
;
restartManager
(
)
;
AddonManager
.
getAddonsByIDs
(
[
"
addon1
tests
.
mozilla
.
org
"
"
addon2
tests
.
mozilla
.
org
"
"
addon3
tests
.
mozilla
.
org
"
"
addon4
tests
.
mozilla
.
org
"
"
addon5
tests
.
mozilla
.
org
"
]
function
(
[
a1
a2
a3
a4
a5
]
)
{
check_state
(
false
a1
a2
a3
a4
a5
)
;
do_execute_soon
(
do_test_finished
)
;
}
)
;
}
