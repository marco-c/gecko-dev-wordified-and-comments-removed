ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
BootstrapMonitor
.
init
(
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
2
"
)
;
var
testserver
=
new
HttpServer
(
)
;
testserver
.
registerDirectory
(
"
/
data
/
"
do_get_file
(
"
data
/
system_addons
"
)
)
;
testserver
.
start
(
)
;
var
root
=
testserver
.
identity
.
primaryScheme
+
"
:
/
/
"
+
testserver
.
identity
.
primaryHost
+
"
:
"
+
testserver
.
identity
.
primaryPort
+
"
/
data
/
"
;
Services
.
prefs
.
setCharPref
(
PREF_SYSTEM_ADDON_UPDATE_URL
root
+
"
update
.
xml
"
)
;
let
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
"
empty
"
]
true
)
;
registerDirectory
(
"
XREAppFeat
"
distroDir
)
;
initSystemAddonDirs
(
)
;
const
TEST_CONDITIONS
=
{
blank
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withAppSet
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
prefilled
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withProfileSet
:
{
setup
(
)
{
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withBothSets
:
{
setup
(
)
{
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
hidden
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
}
;
add_task
(
async
function
test_addon_update
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_ENABLED
true
)
;
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
blank
distroDir
)
;
await
updateAllSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
}
]
root
)
testserver
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
blank
.
initialState
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_app_update_disabled
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
blank
distroDir
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_ENABLED
false
)
;
await
updateAllSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
}
]
root
)
testserver
)
;
Services
.
prefs
.
clearUserPref
(
PREF_APP_UPDATE_ENABLED
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
blank
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_safe_mode
(
)
{
gAppInfo
.
inSafeMode
=
true
;
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
blank
distroDir
)
;
Services
.
prefs
.
setBoolPref
(
PREF_APP_UPDATE_ENABLED
false
)
;
await
updateAllSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
}
]
root
)
testserver
)
;
Services
.
prefs
.
clearUserPref
(
PREF_APP_UPDATE_ENABLED
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
blank
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
gAppInfo
.
inSafeMode
=
false
;
}
)
;
add_task
(
async
function
test_match_default
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withAppSet
distroDir
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
}
]
root
)
testserver
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withAppSet
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_match_default_revert
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system1
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system1_1
.
xpi
"
}
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system2_1
.
xpi
"
}
]
root
)
testserver
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_match_current
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
}
]
root
)
testserver
)
;
let
set
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
PREF_SYSTEM_ADDON_SET
)
)
;
Assert
.
equal
(
set
.
directory
"
prefilled
"
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_no_download
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
missing
.
xpi
"
}
{
id
:
"
system4
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system4_1
.
xpi
"
}
]
root
)
testserver
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_double_update
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withAppSet
distroDir
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system3_1
.
xpi
"
}
]
root
)
testserver
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
}
{
id
:
"
system4
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system4_1
.
xpi
"
}
]
root
)
testserver
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withAppSet
.
initialState
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
true
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_update_purges
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system3_1
.
xpi
"
}
]
root
)
testserver
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
installSystemAddons
(
await
buildSystemAddonUpdates
(
null
)
testserver
)
;
let
dirs
=
await
getSystemAddonDirectories
(
)
;
Assert
.
equal
(
dirs
.
length
1
)
;
await
promiseShutdownManager
(
)
;
}
)
;
