createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
2
"
)
;
let
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
"
empty
"
]
true
)
;
registerDirectory
(
"
XREAppFeat
"
distroDir
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
id
=
>
"
system
"
;
add_task
(
initSystemAddonDirs
)
;
const
TEST_CONDITIONS
=
{
blank
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withAppSet
:
{
setup
(
)
{
clearSystemAddonUpdatesDir
(
)
;
distroDir
.
leafName
=
"
prefilled
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withProfileSet
:
{
async
setup
(
)
{
await
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
empty
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
withBothSets
:
{
async
setup
(
)
{
await
buildPrefilledUpdatesDir
(
)
;
distroDir
.
leafName
=
"
hidden
"
;
}
initialState
:
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
}
}
;
add_task
(
async
function
test_addon_update
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_SYSTEM_ADDON_UPDATE_ENABLED
true
)
;
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
blank
distroDir
)
;
let
updateXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
2
.
0
"
)
}
]
)
;
const
promiseInstallsEnded
=
createInstallsEndedPromise
(
2
)
;
await
Promise
.
all
(
[
updateAllSystemAddons
(
updateXML
)
promiseWebExtensionStartup
(
"
system2
tests
.
mozilla
.
org
"
)
promiseWebExtensionStartup
(
"
system3
tests
.
mozilla
.
org
"
)
]
)
;
await
promiseInstallsEnded
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
blank
.
initialState
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_app_update_disabled
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
blank
distroDir
)
;
Services
.
prefs
.
setBoolPref
(
PREF_SYSTEM_ADDON_UPDATE_ENABLED
false
)
;
let
updateXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
2
.
0
"
)
}
]
)
;
await
updateAllSystemAddons
(
updateXML
)
;
Services
.
prefs
.
clearUserPref
(
PREF_SYSTEM_ADDON_UPDATE_ENABLED
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
blank
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_safe_mode
(
)
{
gAppInfo
.
inSafeMode
=
true
;
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
blank
distroDir
)
;
Services
.
prefs
.
setBoolPref
(
PREF_SYSTEM_ADDON_UPDATE_ENABLED
false
)
;
let
updateXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
2
.
0
"
)
}
]
)
;
await
updateAllSystemAddons
(
updateXML
)
;
Services
.
prefs
.
clearUserPref
(
PREF_SYSTEM_ADDON_UPDATE_ENABLED
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
blank
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
gAppInfo
.
inSafeMode
=
false
;
}
)
;
add_task
(
async
function
test_match_default
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withAppSet
distroDir
)
;
let
installXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
2
.
0
"
)
}
]
)
;
await
installSystemAddons
(
installXML
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withAppSet
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_match_default_revert
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
let
installXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system1
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system1_1
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
1
"
1
.
0
"
)
}
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system2_1
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
1
.
0
"
)
}
]
)
;
await
installSystemAddons
(
installXML
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_match_current
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
let
installXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
2
.
0
"
)
}
]
)
;
await
installSystemAddons
(
installXML
)
;
let
set
=
JSON
.
parse
(
Services
.
prefs
.
getCharPref
(
PREF_SYSTEM_ADDON_SET
)
)
;
Assert
.
equal
(
set
.
directory
"
prefilled
"
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
undefined
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_no_download
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
let
installXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
missing
.
xpi
"
}
{
id
:
"
system4
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system4_1
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
4
"
1
.
0
"
)
}
]
)
;
const
promiseInstallsEnded
=
createInstallsEndedPromise
(
2
)
;
await
Promise
.
all
(
[
installSystemAddons
(
installXML
)
promiseWebExtensionStartup
(
"
system4
tests
.
mozilla
.
org
"
)
]
)
;
info
(
"
Wait
for
system
addon
installs
to
be
completed
"
)
;
await
promiseInstallsEnded
;
info
(
"
Wait
for
system
addons
stating
dir
to
be
released
"
)
;
await
waitForSystemAddonStagingDirReleased
(
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_double_update
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withAppSet
distroDir
)
;
let
installXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system3_1
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
1
.
0
"
)
}
]
)
;
await
Promise
.
all
(
[
installSystemAddons
(
installXML
)
promiseWebExtensionStartup
(
"
system2
tests
.
mozilla
.
org
"
)
promiseWebExtensionStartup
(
"
system3
tests
.
mozilla
.
org
"
)
]
)
;
installXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system3_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
2
.
0
"
)
}
{
id
:
"
system4
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system4_1
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
4
"
1
.
0
"
)
}
]
)
;
await
Promise
.
all
(
[
installSystemAddons
(
installXML
)
promiseWebExtensionStartup
(
"
system3
tests
.
mozilla
.
org
"
)
promiseWebExtensionStartup
(
"
system4
tests
.
mozilla
.
org
"
)
]
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withAppSet
.
initialState
[
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
]
true
distroDir
)
;
await
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_update_purges
(
)
{
await
setupSystemAddonConditions
(
TEST_CONDITIONS
.
withBothSets
distroDir
)
;
let
installXML
=
buildSystemAddonUpdates
(
[
{
id
:
"
system2
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
path
:
"
system2_2
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
2
"
2
.
0
"
)
}
{
id
:
"
system3
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
path
:
"
system3_1
.
xpi
"
xpi
:
await
getSystemAddonXPI
(
3
"
1
.
0
"
)
}
]
)
;
await
Promise
.
all
(
[
installSystemAddons
(
installXML
)
promiseWebExtensionStartup
(
"
system2
tests
.
mozilla
.
org
"
)
promiseWebExtensionStartup
(
"
system3
tests
.
mozilla
.
org
"
)
]
)
;
await
verifySystemAddonState
(
TEST_CONDITIONS
.
withBothSets
.
initialState
[
{
isUpgrade
:
false
version
:
"
1
.
0
"
}
{
isUpgrade
:
true
version
:
"
2
.
0
"
}
{
isUpgrade
:
true
version
:
"
1
.
0
"
}
{
isUpgrade
:
false
version
:
null
}
{
isUpgrade
:
false
version
:
null
}
]
false
distroDir
)
;
await
installSystemAddons
(
buildSystemAddonUpdates
(
null
)
)
;
let
dirs
=
await
getSystemAddonDirectories
(
)
;
Assert
.
equal
(
dirs
.
length
1
)
;
await
promiseShutdownManager
(
)
;
}
)
;
function
createInstallsEndedPromise
(
expectedCount
)
{
return
new
Promise
(
resolve
=
>
{
let
installsEnded
=
0
;
const
listener
=
{
onInstallStarted
(
)
{
}
onInstallEnded
(
)
{
installsEnded
+
+
;
if
(
installsEnded
=
=
=
expectedCount
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
)
;
}
}
onInstallCancelled
(
)
{
}
onInstallFailed
(
)
{
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
async
function
waitForSystemAddonStagingDirReleased
(
)
{
const
{
XPIInternal
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
)
;
let
systemAddonLocation
=
XPIInternal
.
XPIStates
.
getLocation
(
XPIInternal
.
KEY_APP_SYSTEM_ADDONS
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
systemAddonLocation
.
installer
.
_stagingDirLock
=
=
0
;
}
"
Wait
for
staging
dir
to
be
released
"
)
;
}
