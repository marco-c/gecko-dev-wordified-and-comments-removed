"
use
strict
"
;
const
ADDON_ID_PRIVILEGED
=
"
privileged
-
addon
-
id
"
;
const
ADDON_ID_NO_PRIV
=
"
addon
-
without
-
privileges
"
;
AddonTestUtils
.
usePrivilegedSignatures
=
id
=
>
id
=
=
=
ADDON_ID_PRIVILEGED
;
function
isExtensionPrivileged
(
addonId
)
{
const
{
extension
}
=
WebExtensionPolicy
.
getByID
(
addonId
)
;
return
extension
.
isPrivileged
;
}
add_task
(
async
function
setup
(
)
{
await
ExtensionTestUtils
.
startAddonManager
(
)
;
}
)
;
add_task
(
async
function
isPrivileged_at_install
(
)
{
{
let
addon
=
await
promiseInstallWebExtension
(
{
manifest
:
{
permissions
:
[
"
mozillaAddons
"
]
applications
:
{
gecko
:
{
id
:
ADDON_ID_PRIVILEGED
}
}
}
}
)
;
ok
(
addon
.
isPrivileged
"
Add
-
on
is
privileged
"
)
;
ok
(
isExtensionPrivileged
(
ADDON_ID_PRIVILEGED
)
"
Extension
is
privileged
"
)
;
}
{
let
addon
=
await
promiseInstallWebExtension
(
{
manifest
:
{
permissions
:
[
"
mozillaAddons
"
]
applications
:
{
gecko
:
{
id
:
ADDON_ID_NO_PRIV
}
}
}
}
)
;
ok
(
!
addon
.
isPrivileged
"
Add
-
on
is
not
privileged
"
)
;
ok
(
!
isExtensionPrivileged
(
ADDON_ID_NO_PRIV
)
"
Extension
is
not
privileged
"
)
;
}
}
)
;
add_task
(
async
function
isPrivileged_at_restart
(
)
{
await
promiseRestartManager
(
)
;
{
let
addon
=
await
AddonManager
.
getAddonByID
(
ADDON_ID_PRIVILEGED
)
;
ok
(
addon
.
isPrivileged
"
Add
-
on
is
privileged
"
)
;
ok
(
isExtensionPrivileged
(
ADDON_ID_PRIVILEGED
)
"
Extension
is
privileged
"
)
;
}
{
let
addon
=
await
AddonManager
.
getAddonByID
(
ADDON_ID_NO_PRIV
)
;
ok
(
!
addon
.
isPrivileged
"
Add
-
on
is
not
privileged
"
)
;
ok
(
!
isExtensionPrivileged
(
ADDON_ID_NO_PRIV
)
"
Extension
is
not
privileged
"
)
;
}
}
)
;
