createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
function
mockAddonProvider
(
aName
)
{
let
mockProvider
=
{
donePromise
:
null
doneResolve
:
null
doneReject
:
null
shutdownPromise
:
null
shutdownResolve
:
null
get
name
(
)
{
return
aName
;
}
shutdown
(
)
{
this
.
shutdownResolve
(
)
;
return
this
.
donePromise
;
}
}
;
mockProvider
.
donePromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
mockProvider
.
doneResolve
=
resolve
;
mockProvider
.
doneReject
=
reject
;
}
)
;
mockProvider
.
shutdownPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
mockProvider
.
shutdownResolve
=
resolve
;
}
)
;
return
mockProvider
;
}
function
findInStatus
(
aStatus
aName
)
{
for
(
let
{
name
state
}
of
aStatus
.
state
)
{
if
(
name
=
=
aName
)
{
return
state
;
}
}
return
null
;
}
add_task
(
async
function
blockRepoShutdown
(
)
{
let
mockRepo
=
mockAddonProvider
(
"
Mock
repo
"
)
;
void
AMscope
.
AddonRepository
;
AMscope
.
AddonRepository
=
mockRepo
;
let
mockProvider
=
mockAddonProvider
(
"
Mock
provider
"
)
;
await
promiseStartupManager
(
)
;
AddonManagerPrivate
.
registerProvider
(
mockProvider
)
;
let
managerDown
=
promiseShutdownManager
(
)
;
await
mockProvider
.
shutdownPromise
;
let
status
=
MockAsyncShutdown
.
status
(
)
;
equal
(
findInStatus
(
status
[
0
]
"
Mock
provider
"
)
"
(
none
)
"
)
;
equal
(
status
[
1
]
.
name
"
AddonRepository
:
async
shutdown
"
)
;
equal
(
status
[
1
]
.
state
"
pending
"
)
;
mockProvider
.
doneResolve
(
)
;
await
mockRepo
.
shutdownPromise
;
status
=
MockAsyncShutdown
.
status
(
)
;
equal
(
status
[
0
]
.
name
"
AddonManager
:
Waiting
for
providers
to
shut
down
.
"
)
;
equal
(
status
[
0
]
.
state
"
Complete
"
)
;
equal
(
status
[
1
]
.
name
"
AddonRepository
:
async
shutdown
"
)
;
equal
(
status
[
1
]
.
state
"
in
progress
"
)
;
mockRepo
.
doneResolve
(
)
;
await
managerDown
;
status
=
MockAsyncShutdown
.
status
(
)
;
equal
(
status
[
0
]
.
name
"
AddonRepository
:
async
shutdown
"
)
;
equal
(
status
[
0
]
.
state
"
done
"
)
;
}
)
;
