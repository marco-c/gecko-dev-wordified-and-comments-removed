const
PREF_SIGNATURES_GENERAL
=
"
xpinstall
.
signatures
.
required
"
;
const
PREF_SIGNATURES_LANGPACKS
=
"
extensions
.
langpacks
.
signatures
.
required
"
;
Services
.
prefs
.
setBoolPref
(
"
security
.
turn_off_all_security_so_that_viruses_can_take_over_this_computer
"
false
)
;
async
function
installShouldSucceed
(
file
)
{
let
install
=
await
promiseInstallFile
(
file
)
;
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_INSTALLED
)
;
Assert
.
notEqual
(
install
.
addon
null
)
;
await
install
.
addon
.
uninstall
(
)
;
}
async
function
installShouldFail
(
file
)
{
let
install
;
try
{
install
=
await
AddonManager
.
getInstallForFile
(
file
)
;
}
catch
(
err
)
{
}
Assert
.
equal
(
install
.
state
AddonManager
.
STATE_DOWNLOAD_FAILED
)
;
Assert
.
equal
(
install
.
error
AddonManager
.
ERROR_SIGNEDSTATE_REQUIRED
)
;
Assert
.
equal
(
install
.
addon
null
)
;
}
add_task
(
useAMOStageCert
(
)
async
function
(
)
{
AddonTestUtils
.
useRealCertChecks
=
true
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
"
)
;
await
promiseStartupManager
(
)
;
Services
.
prefs
.
setBoolPref
(
PREF_SIGNATURES_GENERAL
true
)
;
Services
.
prefs
.
setBoolPref
(
PREF_SIGNATURES_LANGPACKS
true
)
;
let
signedXPI
=
do_get_file
(
"
data
/
signing_checks
/
langpack_signed
.
xpi
"
)
;
await
installShouldSucceed
(
signedXPI
)
;
let
unsignedXPI
=
do_get_file
(
"
data
/
signing_checks
/
langpack_unsigned
.
xpi
"
)
;
await
installShouldFail
(
unsignedXPI
)
;
Services
.
prefs
.
setBoolPref
(
PREF_SIGNATURES_GENERAL
false
)
;
await
installShouldFail
(
unsignedXPI
)
;
Services
.
prefs
.
setBoolPref
(
PREF_SIGNATURES_LANGPACKS
false
)
;
if
(
AppConstants
.
MOZ_REQUIRE_SIGNING
)
{
await
installShouldFail
(
unsignedXPI
)
;
}
else
{
await
installShouldSucceed
(
unsignedXPI
)
;
}
await
promiseShutdownManager
(
)
;
}
)
;
