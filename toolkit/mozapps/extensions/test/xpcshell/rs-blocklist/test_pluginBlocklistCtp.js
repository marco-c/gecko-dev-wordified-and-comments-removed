const
nsIBLS
=
Ci
.
nsIBlocklistService
;
var
gPluginHost
=
null
;
var
PLUGINS
=
[
{
name
:
"
test_plugin_0
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_1
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_2
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_3
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_4
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
{
name
:
"
test_plugin_5
"
version
:
"
5
"
disabled
:
false
blocklisted
:
false
}
]
;
const
BLOCKLIST_DATA
=
{
ctp
:
[
{
"
matchName
"
:
"
^
test_plugin_0
"
"
versionRange
"
:
[
{
"
maxVersion
"
:
"
*
"
"
minVersion
"
:
"
0
"
"
severity
"
:
"
0
"
"
vulnerabilityStatus
"
:
"
0
"
}
]
}
{
"
matchName
"
:
"
^
test_plugin_1
"
"
versionRange
"
:
[
{
"
maxVersion
"
:
"
*
"
"
minVersion
"
:
"
0
"
"
severity
"
:
"
0
"
"
vulnerabilityStatus
"
:
"
1
"
}
]
}
{
"
matchName
"
:
"
^
test_plugin_2
"
"
versionRange
"
:
[
{
"
maxVersion
"
:
"
*
"
"
minVersion
"
:
"
0
"
"
severity
"
:
"
0
"
"
vulnerabilityStatus
"
:
"
2
"
}
]
}
{
"
matchName
"
:
"
^
test_plugin_3
"
"
versionRange
"
:
[
{
"
maxVersion
"
:
"
*
"
"
minVersion
"
:
"
0
"
"
vulnerabilityStatus
"
:
"
2
"
}
]
}
{
"
matchName
"
:
"
^
test_plugin_4
"
"
versionRange
"
:
[
{
"
maxVersion
"
:
"
*
"
"
minVersion
"
:
"
0
"
"
severity
"
:
"
1
"
"
vulnerabilityStatus
"
:
"
2
"
}
]
}
]
ctpUndo
:
[
{
"
matchName
"
:
"
^
Test
Plug
-
in
"
"
versionRange
"
:
[
{
"
maxVersion
"
:
"
*
"
"
minVersion
"
:
"
0
"
"
severity
"
:
"
0
"
"
vulnerabilityStatus
"
:
"
2
"
}
]
}
]
}
;
async
function
updateBlocklist
(
file
)
{
let
blocklistUpdated
=
TestUtils
.
topicObserved
(
"
plugin
-
blocklist
-
updated
"
)
;
AddonTestUtils
.
loadBlocklistRawData
(
{
plugins
:
BLOCKLIST_DATA
[
file
]
}
)
;
return
blocklistUpdated
;
}
add_task
(
async
function
setup
(
)
{
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
"
)
;
Services
.
prefs
.
setBoolPref
(
"
plugin
.
load_flash_only
"
false
)
;
gPluginHost
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
await
promiseStartupManager
(
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
updateBlocklist
(
"
ctp
"
)
;
var
{
blocklist
}
=
Services
;
Assert
.
equal
(
await
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
0
]
"
1
"
"
1
.
9
"
)
nsIBLS
.
STATE_OUTDATED
)
;
Assert
.
equal
(
await
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
1
]
"
1
"
"
1
.
9
"
)
nsIBLS
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
Assert
.
equal
(
await
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
2
]
"
1
"
"
1
.
9
"
)
nsIBLS
.
STATE_VULNERABLE_NO_UPDATE
)
;
Assert
.
equal
(
await
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
3
]
"
1
"
"
1
.
9
"
)
nsIBLS
.
STATE_BLOCKED
)
;
Assert
.
equal
(
await
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
4
]
"
1
"
"
1
.
9
"
)
nsIBLS
.
STATE_SOFTBLOCKED
)
;
Assert
.
equal
(
await
blocklist
.
getPluginBlocklistState
(
PLUGINS
[
5
]
"
1
"
"
1
.
9
"
)
nsIBLS
.
STATE_NOT_BLOCKED
)
;
}
)
;
function
get_test_plugin
(
)
{
for
(
var
plugin
of
gPluginHost
.
getPluginTags
(
)
)
{
if
(
plugin
.
name
=
=
"
Test
Plug
-
in
"
)
return
plugin
;
}
Assert
.
ok
(
false
"
Should
have
found
the
test
plugin
!
"
)
;
return
null
;
}
add_task
(
async
function
test_is_not_clicktoplay
(
)
{
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
await
Blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
}
)
;
add_task
(
async
function
test_is_clicktoplay
(
)
{
await
updateBlocklist
(
"
ctpUndo
"
)
;
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
await
Blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
equal
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
}
)
;
add_task
(
async
function
test_is_not_clicktoplay2
(
)
{
await
updateBlocklist
(
"
ctp
"
)
;
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
await
Blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
}
)
;
add_task
(
async
function
test_disable_blocklist
(
)
{
await
updateBlocklist
(
"
ctpUndo
"
)
;
var
plugin
=
get_test_plugin
(
)
;
var
blocklistState
=
await
Blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
equal
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
enabled
"
false
)
;
blocklistState
=
await
Blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_NO_UPDATE
)
;
Assert
.
notEqual
(
blocklistState
Ci
.
nsIBlocklistService
.
STATE_VULNERABLE_UPDATE_AVAILABLE
)
;
let
previousEnabledState
=
plugin
.
enabledState
;
plugin
.
enabledState
=
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
;
Assert
.
equal
(
gPluginHost
.
getStateForType
(
"
application
/
x
-
test
"
)
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
plugin
.
enabledState
=
previousEnabledState
;
}
)
;
