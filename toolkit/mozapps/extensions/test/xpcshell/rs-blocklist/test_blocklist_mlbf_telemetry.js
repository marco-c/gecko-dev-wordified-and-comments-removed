"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
useMLBF
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
useMLBF
.
stashes
"
true
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
"
)
;
const
{
Downloader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
Attachments
.
jsm
"
)
;
const
{
TelemetryController
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
OLDEST_STASH
=
{
stash
:
{
blocked
:
[
]
unblocked
:
[
]
}
stash_time
:
2e6
}
;
const
NEWEST_STASH
=
{
stash
:
{
blocked
:
[
]
unblocked
:
[
]
}
stash_time
:
5e6
}
;
const
RECORDS_WITH_STASHES_AND_MLBF
=
[
MLBF_RECORD
OLDEST_STASH
NEWEST_STASH
]
;
const
ExtensionBlocklistMLBF
=
getExtensionBlocklistMLBF
(
)
;
function
assertTelemetryScalars
(
expectedScalars
)
{
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
)
;
for
(
const
scalarName
of
Object
.
keys
(
expectedScalars
|
|
{
}
)
)
{
equal
(
scalars
[
scalarName
]
expectedScalars
[
scalarName
]
Got
the
expected
value
for
{
scalarName
}
scalar
)
;
}
}
function
toUTC
(
time
)
{
return
new
Date
(
time
)
.
toUTCString
(
)
;
}
add_task
(
async
function
setup
(
)
{
await
TelemetryController
.
testSetup
(
)
;
await
promiseStartupManager
(
)
;
Downloader
.
_RESOURCE_BASE_URL
=
"
invalid
:
/
/
bogus
"
;
}
)
;
add_task
(
async
function
test_initialization
(
)
{
ExtensionBlocklistMLBF
.
ensureInitialized
(
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
true
"
blocklist
.
lastModified_rs_addons_mlbf
"
:
undefined
"
blocklist
.
mlbf_generation_time
"
:
undefined
"
blocklist
.
mlbf_stash_time_oldest
"
:
undefined
"
blocklist
.
mlbf_stash_time_newest
"
:
undefined
}
)
;
}
)
;
add_task
(
async
function
test_without_mlbf
(
)
{
await
AddonTestUtils
.
loadBlocklistRawData
(
{
extensionsMLBF
:
[
]
}
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
true
"
blocklist
.
mlbf_generation_time
"
:
"
Missing
Date
"
"
blocklist
.
mlbf_stash_time_oldest
"
:
"
Missing
Date
"
"
blocklist
.
mlbf_stash_time_newest
"
:
"
Missing
Date
"
}
)
;
}
)
;
add_task
(
async
function
test_common_good_case_with_stashes
(
)
{
await
ExtensionBlocklistMLBF
.
_client
.
db
.
saveAttachment
(
ExtensionBlocklistMLBF
.
RS_ATTACHMENT_ID
{
record
:
MLBF_RECORD
blob
:
await
load_mlbf_record_as_blob
(
)
}
)
;
await
AddonTestUtils
.
loadBlocklistRawData
(
{
extensionsMLBF
:
RECORDS_WITH_STASHES_AND_MLBF
}
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
true
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
"
blocklist
.
mlbf_stash_time_oldest
"
:
toUTC
(
OLDEST_STASH
.
stash_time
)
"
blocklist
.
mlbf_stash_time_newest
"
:
toUTC
(
NEWEST_STASH
.
stash_time
)
}
)
;
}
)
;
add_task
(
async
function
test_toggle_stash_pref
(
)
{
await
toggleStashPref
(
false
(
)
=
>
{
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
false
}
)
;
}
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
false
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
"
blocklist
.
mlbf_stash_time_oldest
"
:
"
Missing
Date
"
"
blocklist
.
mlbf_stash_time_newest
"
:
"
Missing
Date
"
}
)
;
await
toggleStashPref
(
true
(
)
=
>
{
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
true
}
)
;
}
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
true
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
"
blocklist
.
mlbf_stash_time_oldest
"
:
toUTC
(
OLDEST_STASH
.
stash_time
)
"
blocklist
.
mlbf_stash_time_newest
"
:
toUTC
(
NEWEST_STASH
.
stash_time
)
}
)
;
}
)
;
add_task
(
async
function
test_without_stashes
(
)
{
await
AddonTestUtils
.
loadBlocklistRawData
(
{
extensionsMLBF
:
[
MLBF_RECORD
]
}
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
true
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
"
blocklist
.
mlbf_stash_time_oldest
"
:
"
Missing
Date
"
"
blocklist
.
mlbf_stash_time_newest
"
:
"
Missing
Date
"
}
)
;
}
)
;
add_task
(
async
function
test_toggle_preferences
(
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
enabled
"
false
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
true
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
}
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
useMLBF
.
stashes
"
false
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
true
"
blocklist
.
mlbf_stashes
"
:
false
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
}
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
useMLBF
"
false
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
false
"
blocklist
.
mlbf_stashes
"
:
false
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
}
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
useMLBF
.
stashes
"
true
)
;
assertTelemetryScalars
(
{
"
blocklist
.
mlbf_enabled
"
:
false
"
blocklist
.
mlbf_stashes
"
:
false
"
blocklist
.
mlbf_generation_time
"
:
toUTC
(
MLBF_RECORD
.
generation_time
)
}
)
;
}
)
;
