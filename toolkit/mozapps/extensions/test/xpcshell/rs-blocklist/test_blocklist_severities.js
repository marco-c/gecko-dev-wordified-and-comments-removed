const
useMLBF
=
Services
.
prefs
.
getBoolPref
(
"
extensions
.
blocklist
.
useMLBF
"
true
)
;
if
(
useMLBF
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
softblock
.
enabled
"
true
)
;
}
const
URI_EXTENSION_BLOCKLIST_DIALOG
=
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
blocklist
.
xhtml
"
;
const
PREF_BLOCKLIST_ITEM_URL
=
"
extensions
.
blocklist
.
itemURL
"
;
Services
.
prefs
.
setCharPref
(
PREF_BLOCKLIST_ITEM_URL
"
http
:
/
/
example
.
com
/
blocklist
/
%
blockID
%
"
)
;
const
PREF_BLOCKLIST_ADDONITEM_URL
=
"
extensions
.
blocklist
.
addonItemURL
"
;
Services
.
prefs
.
setCharPref
(
PREF_BLOCKLIST_ADDONITEM_URL
"
https
:
/
/
example
.
com
/
blocked
-
addon
/
%
addonID
%
/
%
addonVersion
%
/
"
)
;
async
function
getAddonBlocklistURL
(
addon
)
{
let
entry
=
await
Blocklist
.
getAddonBlocklistEntry
(
addon
)
;
return
entry
&
&
entry
.
url
;
}
var
ADDONS
=
[
{
id
:
"
test_bug455906_1
tests
.
mozilla
.
org
"
name
:
"
Bug
455906
Addon
Test
1
"
version
:
"
5
"
appVersion
:
"
3
"
}
{
id
:
"
test_bug455906_2
tests
.
mozilla
.
org
"
name
:
"
Bug
455906
Addon
Test
2
"
version
:
"
5
"
appVersion
:
"
3
"
}
{
id
:
"
test_bug455906_3
tests
.
mozilla
.
org
"
name
:
"
Bug
455906
Addon
Test
3
"
version
:
"
5
"
appVersion
:
"
3
"
}
{
id
:
"
test_bug455906_4
tests
.
mozilla
.
org
"
name
:
"
Bug
455906
Addon
Test
4
"
version
:
"
5
"
appVersion
:
"
3
"
}
{
id
:
"
test_bug455906_5
tests
.
mozilla
.
org
"
name
:
"
Bug
455906
Addon
Test
5
"
version
:
"
5
"
appVersion
:
"
3
"
}
{
id
:
"
test_bug455906_6
tests
.
mozilla
.
org
"
name
:
"
Bug
455906
Addon
Test
6
"
version
:
"
5
"
appVersion
:
"
3
"
}
{
id
:
"
test_bug455906_7
tests
.
mozilla
.
org
"
name
:
"
Bug
455906
Addon
Test
7
"
version
:
"
5
"
appVersion
:
"
2
"
}
{
id
:
"
dummy_bug455906_1
tests
.
mozilla
.
org
"
name
:
"
Dummy
Addon
1
"
version
:
"
5
"
appVersion
:
"
3
"
}
{
id
:
"
dummy_bug455906_2
tests
.
mozilla
.
org
"
name
:
"
Dummy
Addon
2
"
version
:
"
5
"
appVersion
:
"
3
"
}
]
;
var
gNotificationCheck
=
null
;
var
WindowWatcher
=
{
openWindow
(
parent
url
name
features
windowArguments
)
{
equal
(
url
URI_EXTENSION_BLOCKLIST_DIALOG
)
;
if
(
gNotificationCheck
)
{
gNotificationCheck
(
windowArguments
.
wrappedJSObject
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
addon
-
blocklist
-
closed
"
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWindowWatcher
"
]
)
}
;
MockRegistrar
.
register
(
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
WindowWatcher
)
;
function
createAddon
(
addon
)
{
return
promiseInstallWebExtension
(
{
manifest
:
{
name
:
addon
.
name
version
:
addon
.
version
browser_specific_settings
:
{
gecko
:
{
id
:
addon
.
id
strict_min_version
:
addon
.
appVersion
strict_max_version
:
addon
.
appVersion
}
}
}
}
)
;
}
const
BLOCKLIST_DATA
=
{
start
:
{
extensionsMLBF
:
[
{
stash
:
{
softblocked
:
[
"
test_bug455906_4
tests
.
mozilla
.
org
:
5
"
"
test_bug455906_5
tests
.
mozilla
.
org
:
5
"
]
blocked
:
[
"
test_bug455906_6
tests
.
mozilla
.
org
:
5
"
"
dummy_bug455906_1
tests
.
mozilla
.
org
:
5
"
]
unblocked
:
[
]
}
}
]
extensions
:
[
{
guid
:
"
test_bug455906_4
tests
.
mozilla
.
org
"
versionRange
:
[
{
severity
:
"
-
1
"
}
]
}
{
guid
:
"
test_bug455906_5
tests
.
mozilla
.
org
"
versionRange
:
[
{
severity
:
"
1
"
}
]
}
{
guid
:
"
test_bug455906_6
tests
.
mozilla
.
org
"
versionRange
:
[
{
severity
:
"
2
"
}
]
}
{
guid
:
"
dummy_bug455906_1
tests
.
mozilla
.
org
"
versionRange
:
[
]
}
]
}
warn
:
{
extensionsMLBF
:
ADDONS
.
filter
(
a
=
>
a
.
id
.
startsWith
(
"
test_
"
)
)
.
map
(
a
=
>
(
{
stash
:
{
softblocked
:
[
{
a
.
id
}
:
{
a
.
version
}
]
blocked
:
[
]
unblocked
:
[
]
}
}
)
)
extensions
:
ADDONS
.
filter
(
a
=
>
a
.
id
.
startsWith
(
"
test_
"
)
)
.
map
(
a
=
>
(
{
guid
:
a
.
id
versionRange
:
[
{
severity
:
"
-
1
"
}
]
}
)
)
}
block
:
{
extensionsMLBF
:
ADDONS
.
filter
(
a
=
>
a
.
id
.
startsWith
(
"
test_
"
)
)
.
map
(
a
=
>
(
{
stash
:
{
blocked
:
[
{
a
.
id
}
:
{
a
.
version
}
]
softblocked
:
[
]
unblocked
:
[
]
}
}
)
)
extensions
:
ADDONS
.
filter
(
a
=
>
a
.
id
.
startsWith
(
"
test_
"
)
)
.
map
(
a
=
>
(
{
guid
:
a
.
id
blockID
:
a
.
id
versionRange
:
[
]
}
)
)
}
empty
:
{
extensionsMLBF
:
[
{
stash
:
{
blocked
:
[
"
dummy_bug455906_2
tests
.
mozilla
.
org
:
5
"
]
softblocked
:
[
]
unblocked
:
[
]
}
}
]
extensions
:
[
{
guid
:
"
dummy_bug455906_2
tests
.
mozilla
.
org
"
versionRange
:
[
]
}
]
}
}
;
async
function
loadBlocklist
(
id
callback
)
{
gNotificationCheck
=
callback
;
await
AddonTestUtils
.
loadBlocklistRawData
(
BLOCKLIST_DATA
[
id
]
)
;
}
function
create_blocklistURL
(
addon
)
{
if
(
!
useMLBF
)
{
let
url
=
Services
.
urlFormatter
.
formatURLPref
(
PREF_BLOCKLIST_ITEM_URL
)
;
url
=
url
.
replace
(
/
%
blockID
%
/
g
addon
.
id
)
;
return
url
;
}
let
url
=
Services
.
urlFormatter
.
formatURLPref
(
PREF_BLOCKLIST_ADDONITEM_URL
)
;
const
{
id
version
}
=
addon
;
return
url
.
replace
(
/
%
addonID
%
/
g
id
)
.
replace
(
/
%
addonVersion
%
/
g
version
)
;
}
async
function
checkInitialState
(
)
{
let
addons
=
await
AddonManager
.
getAddonsByIDs
(
ADDONS
.
map
(
a
=
>
a
.
id
)
)
;
checkAddonState
(
addons
[
0
]
{
userDisabled
:
true
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
1
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
2
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
3
]
{
userDisabled
:
true
softDisabled
:
true
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
4
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
5
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
checkAddonState
(
addons
[
6
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
}
function
checkAddonState
(
addon
state
)
{
return
checkAddon
(
addon
.
id
addon
state
)
;
}
add_setup
(
async
function
setup
(
)
{
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
3
"
"
3
"
)
;
await
promiseStartupManager
(
)
;
await
AddonTestUtils
.
loadBlocklistRawData
(
BLOCKLIST_DATA
.
start
)
;
for
(
let
addon
of
ADDONS
)
{
await
createAddon
(
addon
)
;
}
}
)
;
add_task
(
async
function
test_1
(
)
{
let
addons
=
await
AddonManager
.
getAddonsByIDs
(
ADDONS
.
map
(
a
=
>
a
.
id
)
)
;
for
(
var
i
=
0
;
i
<
ADDONS
.
length
;
i
+
+
)
{
ok
(
addons
[
i
]
Addon
{
i
+
1
}
should
be
installed
correctly
)
;
}
checkAddonState
(
addons
[
0
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
1
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
2
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
3
]
{
userDisabled
:
true
softDisabled
:
true
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
4
]
{
userDisabled
:
true
softDisabled
:
true
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
5
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
checkAddonState
(
addons
[
6
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
await
addons
[
0
]
.
disable
(
)
;
await
addons
[
4
]
.
enable
(
)
;
await
promiseRestartManager
(
)
;
await
checkInitialState
(
)
;
await
loadBlocklist
(
"
warn
"
args
=
>
{
dump
(
"
Checking
notification
pt
2
\
n
"
)
;
equal
(
args
.
list
.
length
2
)
;
}
)
;
await
promiseRestartManager
(
)
;
dump
(
"
Checking
results
pt
2
\
n
"
)
;
addons
=
await
AddonManager
.
getAddonsByIDs
(
ADDONS
.
map
(
a
=
>
a
.
id
)
)
;
info
(
"
Should
have
disabled
this
add
-
on
as
requested
"
)
;
checkAddonState
(
addons
[
2
]
{
userDisabled
:
true
softDisabled
:
true
appDisabled
:
false
}
)
;
info
(
"
The
blocked
add
-
on
should
have
changed
to
soft
disabled
"
)
;
checkAddonState
(
addons
[
5
]
{
userDisabled
:
true
softDisabled
:
true
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
6
]
{
userDisabled
:
true
softDisabled
:
true
appDisabled
:
true
}
)
;
info
(
"
These
should
have
been
unchanged
"
)
;
checkAddonState
(
addons
[
0
]
{
userDisabled
:
true
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
3
]
{
userDisabled
:
true
softDisabled
:
true
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
4
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
await
addons
[
2
]
.
enable
(
)
;
await
addons
[
5
]
.
enable
(
)
;
await
promiseRestartManager
(
)
;
await
loadBlocklist
(
"
start
"
)
;
}
)
;
add_task
(
async
function
test_pt3
(
)
{
await
promiseRestartManager
(
)
;
await
checkInitialState
(
)
;
await
loadBlocklist
(
"
block
"
args
=
>
{
dump
(
"
Checking
notification
pt
3
\
n
"
)
;
equal
(
args
.
list
.
length
3
)
;
}
)
;
await
promiseRestartManager
(
)
;
dump
(
"
Checking
results
pt
3
\
n
"
)
;
let
addons
=
await
AddonManager
.
getAddonsByIDs
(
ADDONS
.
map
(
a
=
>
a
.
id
)
)
;
checkAddonState
(
addons
[
0
]
{
userDisabled
:
true
softDisabled
:
false
appDisabled
:
true
}
)
;
checkAddonState
(
addons
[
1
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
checkAddonState
(
addons
[
2
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
checkAddonState
(
addons
[
4
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
checkAddonState
(
addons
[
3
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
equal
(
await
getAddonBlocklistURL
(
addons
[
0
]
)
create_blocklistURL
(
addons
[
0
]
)
)
;
equal
(
await
getAddonBlocklistURL
(
addons
[
1
]
)
create_blocklistURL
(
addons
[
1
]
)
)
;
equal
(
await
getAddonBlocklistURL
(
addons
[
2
]
)
create_blocklistURL
(
addons
[
2
]
)
)
;
equal
(
await
getAddonBlocklistURL
(
addons
[
3
]
)
create_blocklistURL
(
addons
[
3
]
)
)
;
equal
(
await
getAddonBlocklistURL
(
addons
[
4
]
)
create_blocklistURL
(
addons
[
4
]
)
)
;
checkAddonState
(
addons
[
5
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
checkAddonState
(
addons
[
6
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
await
loadBlocklist
(
"
start
"
)
;
}
)
;
add_task
(
async
function
test_pt4
(
)
{
let
addon
=
await
AddonManager
.
getAddonByID
(
ADDONS
[
4
]
.
id
)
;
await
addon
.
enable
(
)
;
await
promiseRestartManager
(
)
;
await
checkInitialState
(
)
;
await
loadBlocklist
(
"
empty
"
(
)
=
>
{
dump
(
"
Checking
notification
pt
4
\
n
"
)
;
ok
(
false
"
Should
not
get
a
notification
as
there
are
no
blocked
addons
.
"
)
;
}
)
;
await
promiseRestartManager
(
)
;
dump
(
"
Checking
results
pt
4
\
n
"
)
;
let
addons
=
await
AddonManager
.
getAddonsByIDs
(
ADDONS
.
map
(
a
=
>
a
.
id
)
)
;
checkAddonState
(
addons
[
5
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
3
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
0
]
{
userDisabled
:
true
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
1
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
2
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
4
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
false
}
)
;
checkAddonState
(
addons
[
6
]
{
userDisabled
:
false
softDisabled
:
false
appDisabled
:
true
}
)
;
}
)
;
