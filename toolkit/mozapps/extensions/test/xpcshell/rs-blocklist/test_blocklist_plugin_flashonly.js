const
nsIBLS
=
Ci
.
nsIBlocklistService
;
function
get_test_plugintag
(
)
{
var
host
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
var
tags
=
host
.
getPluginTags
(
)
;
for
(
let
tag
of
tags
)
{
if
(
tag
.
name
=
=
"
Test
Plug
-
in
"
)
{
return
tag
;
}
}
return
null
;
}
add_task
(
async
function
checkFlashOnlyPluginState
(
)
{
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
"
)
;
Services
.
prefs
.
setBoolPref
(
"
plugin
.
load_flash_only
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
turn_off_all_security_so_that_viruses_can_take_over_this_computer
"
true
)
;
await
AddonTestUtils
.
loadBlocklistRawData
(
{
plugins
:
[
{
matchName
:
"
Test
Plug
-
in
"
versionRange
:
[
{
severity
:
"
0
"
}
]
}
]
}
)
;
var
plugin
=
get_test_plugintag
(
)
;
if
(
!
plugin
)
{
do_throw
(
"
Plugin
tag
not
found
"
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
addon
-
blocklist
-
closed
"
)
;
await
new
Promise
(
executeSoon
)
;
Assert
.
equal
(
await
Blocklist
.
getPluginBlocklistState
(
plugin
"
1
"
"
1
.
9
"
)
nsIBLS
.
STATE_OUTDATED
)
;
}
)
;
