BootstrapMonitor
.
init
(
)
;
const
PREF_DB_SCHEMA
=
"
extensions
.
databaseSchema
"
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
49
"
)
;
add_task
(
async
function
schema_change
(
)
{
await
promiseStartupManager
(
)
;
const
ID
=
"
schema
-
change
tests
.
mozilla
.
org
"
;
let
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
.
9
.
2
"
}
]
}
)
;
await
promiseInstallFile
(
xpiFile
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
1
.
0
"
"
Got
the
expected
version
"
)
;
await
promiseShutdownManager
(
)
;
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
2
"
version
:
"
2
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
.
9
.
2
"
}
]
}
)
;
Services
.
prefs
.
setIntPref
(
PREF_DB_SCHEMA
0
)
;
let
file
=
profileDir
.
clone
(
)
;
file
.
append
(
{
ID
}
.
xpi
)
;
let
timestamp
=
file
.
lastModifiedTime
;
xpiFile
.
moveTo
(
profileDir
{
ID
}
.
xpi
)
;
file
.
lastModifiedTime
=
timestamp
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
2
.
0
"
"
Got
the
expected
version
"
)
;
let
waitUninstall
=
promiseAddonEvent
(
"
onUninstalled
"
)
;
await
addon
.
uninstall
(
)
;
await
waitUninstall
;
}
)
;
add_task
(
async
function
schema_change
(
)
{
const
ID
=
"
schema
-
change
tests
.
mozilla
.
org
"
;
let
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
2
"
}
]
}
)
;
await
promiseInstallFile
(
xpiFile
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
1
.
0
"
"
Got
the
expected
version
"
)
;
await
promiseShutdownManager
(
)
;
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
2
"
version
:
"
2
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
2
"
}
]
}
)
;
gAppInfo
.
version
=
"
2
"
;
let
file
=
profileDir
.
clone
(
)
;
file
.
append
(
{
ID
}
.
xpi
)
;
let
timestamp
=
file
.
lastModifiedTime
;
xpiFile
.
moveTo
(
profileDir
{
ID
}
.
xpi
)
;
file
.
lastModifiedTime
=
timestamp
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
1
.
0
"
"
Got
the
expected
version
"
)
;
let
waitUninstall
=
promiseAddonEvent
(
"
onUninstalled
"
)
;
await
addon
.
uninstall
(
)
;
await
waitUninstall
;
}
)
;
add_task
(
async
function
schema_change_app_update
(
)
{
const
ID
=
"
schema
-
change
tests
.
mozilla
.
org
"
;
let
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
3
"
}
]
}
)
;
await
promiseInstallFile
(
xpiFile
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
1
.
0
"
"
Got
the
expected
version
"
)
;
await
promiseShutdownManager
(
)
;
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
2
"
version
:
"
2
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
3
"
}
]
}
)
;
gAppInfo
.
version
=
"
3
"
;
Services
.
prefs
.
setIntPref
(
PREF_DB_SCHEMA
0
)
;
let
file
=
profileDir
.
clone
(
)
;
file
.
append
(
{
ID
}
.
xpi
)
;
let
timestamp
=
file
.
lastModifiedTime
;
xpiFile
.
moveTo
(
profileDir
{
ID
}
.
xpi
)
;
file
.
lastModifiedTime
=
timestamp
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
appDisabled
false
)
;
equal
(
addon
.
version
"
2
.
0
"
"
Got
the
expected
version
"
)
;
let
waitUninstall
=
promiseAddonEvent
(
"
onUninstalled
"
)
;
await
addon
.
uninstall
(
)
;
await
waitUninstall
;
}
)
;
add_task
(
async
function
schema_change
(
)
{
const
ID
=
"
schema
-
change
tests
.
mozilla
.
org
"
;
let
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
.
9
.
2
"
}
]
}
)
;
await
promiseInstallFile
(
xpiFile
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
1
.
0
"
"
Got
the
expected
version
"
)
;
await
promiseShutdownManager
(
)
;
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
2
"
version
:
"
2
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
.
9
.
2
"
}
]
}
)
;
let
file
=
profileDir
.
clone
(
)
;
file
.
append
(
{
ID
}
.
xpi
)
;
let
timestamp
=
file
.
lastModifiedTime
;
xpiFile
.
moveTo
(
profileDir
{
ID
}
.
xpi
)
;
file
.
lastModifiedTime
=
timestamp
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
1
.
0
"
"
Got
the
expected
version
"
)
;
let
waitUninstall
=
promiseAddonEvent
(
"
onUninstalled
"
)
;
await
addon
.
uninstall
(
)
;
await
waitUninstall
;
}
)
;
add_task
(
async
function
schema_change
(
)
{
const
ID
=
"
schema
-
change
tests
.
mozilla
.
org
"
;
let
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
.
9
.
2
"
}
]
}
)
;
await
promiseInstallFile
(
xpiFile
)
;
let
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
1
.
0
"
"
Got
the
expected
version
"
)
;
await
promiseShutdownManager
(
)
;
xpiFile
=
createTempXPIFile
(
{
id
:
ID
name
:
"
Test
Add
-
on
2
"
version
:
"
2
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
.
9
.
2
"
}
]
}
)
;
xpiFile
.
moveTo
(
profileDir
{
ID
}
.
xpi
)
;
let
file
=
profileDir
.
clone
(
)
;
file
.
append
(
{
ID
}
.
xpi
)
;
let
timestamp
=
new
Date
(
Date
.
now
(
)
+
60000
)
;
xpiFile
.
moveTo
(
profileDir
{
ID
}
.
xpi
)
;
file
.
lastModifiedTime
=
timestamp
;
await
promiseStartupManager
(
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
notEqual
(
addon
null
"
Got
an
addon
object
as
expected
"
)
;
equal
(
addon
.
version
"
2
.
0
"
"
Got
the
expected
version
"
)
;
let
waitUninstall
=
promiseAddonEvent
(
"
onUninstalled
"
)
;
await
addon
.
uninstall
(
)
;
await
waitUninstall
;
}
)
;
