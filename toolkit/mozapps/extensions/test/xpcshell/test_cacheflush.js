var
gExpectedFile
=
null
;
var
gCacheFlushCount
=
0
;
var
CacheFlushObserver
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
!
=
"
flush
-
cache
-
entry
"
)
{
return
;
}
if
(
aData
=
=
"
cert
-
override
"
|
|
aSubject
=
=
null
)
{
return
;
}
if
(
!
gExpectedFile
)
{
return
;
}
ok
(
aSubject
instanceof
Ci
.
nsIFile
)
;
equal
(
aSubject
.
path
gExpectedFile
.
path
)
;
gCacheFlushCount
+
+
;
}
}
;
add_task
(
async
function
setup
(
)
{
Services
.
obs
.
addObserver
(
CacheFlushObserver
"
flush
-
cache
-
entry
"
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
2
"
)
;
await
promiseStartupManager
(
)
;
}
)
;
add_task
(
async
function
test_flush_restartless_install
(
)
{
let
xpi
=
await
createTempWebExtensionFile
(
{
manifest
:
{
name
:
"
Cache
Flush
Test
"
version
:
"
2
.
0
"
applications
:
{
gecko
:
{
id
:
"
addon2
tests
.
mozilla
.
org
"
}
}
}
}
)
;
let
install
=
await
AddonManager
.
getInstallForFile
(
xpi
)
;
await
new
Promise
(
resolve
=
>
{
install
.
addListener
(
{
onInstallStarted
(
)
{
gExpectedFile
=
gProfD
.
clone
(
)
;
gExpectedFile
.
append
(
"
extensions
"
)
;
gExpectedFile
.
append
(
"
staged
"
)
;
gExpectedFile
.
append
(
"
addon2
tests
.
mozilla
.
org
.
xpi
"
)
;
}
onInstallEnded
(
)
{
equal
(
gCacheFlushCount
1
)
;
gExpectedFile
=
null
;
gCacheFlushCount
=
0
;
resolve
(
)
;
}
}
)
;
install
.
install
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_flush_uninstall
(
)
{
let
addon
=
await
AddonManager
.
getAddonByID
(
"
addon2
tests
.
mozilla
.
org
"
)
;
gExpectedFile
=
gProfD
.
clone
(
)
;
gExpectedFile
.
append
(
"
extensions
"
)
;
gExpectedFile
.
append
(
"
addon2
tests
.
mozilla
.
org
.
xpi
"
)
;
await
addon
.
uninstall
(
)
;
ok
(
gCacheFlushCount
>
=
1
)
;
gExpectedFile
=
null
;
gCacheFlushCount
=
0
;
}
)
;
