"
use
strict
"
;
const
{
XPIInstall
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIInstall
.
jsm
"
)
;
const
{
XPIInternal
:
{
BuiltInLocation
KEY_APP_PROFILE
KEY_APP_SYSTEM_DEFAULTS
KEY_APP_SYSTEM_PROFILE
TemporaryInstallLocation
XPIStates
}
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
addons
/
XPIProvider
.
jsm
"
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
AddonManager
.
SCOPE_PROFILE
|
AddonManager
.
SCOPE_APPLICATION
)
;
const
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
]
true
)
;
registerDirectory
(
"
XREAppFeat
"
distroDir
)
;
function
getInstallLocation
(
{
isBuiltin
=
false
isSystem
=
false
isTemporary
=
false
}
)
{
if
(
isTemporary
)
{
return
TemporaryInstallLocation
;
}
let
location
;
if
(
isSystem
)
{
if
(
isBuiltin
)
{
location
=
XPIStates
.
getLocation
(
KEY_APP_SYSTEM_DEFAULTS
)
;
}
else
{
location
=
XPIStates
.
getLocation
(
KEY_APP_SYSTEM_PROFILE
)
;
}
}
else
if
(
isBuiltin
)
{
location
=
BuiltInLocation
;
}
else
{
location
=
XPIStates
.
getLocation
(
KEY_APP_PROFILE
)
;
}
if
(
location
.
isSystem
!
=
=
isSystem
)
{
ok
(
false
{
location
.
name
}
unexpected
isSystem
=
{
location
.
isSystem
}
)
;
}
if
(
location
.
isBuiltin
!
=
=
isBuiltin
)
{
ok
(
false
{
location
.
name
}
unexpected
isBuiltin
=
{
location
.
isBuiltin
}
)
;
}
return
location
;
}
async
function
testLoadManifest
(
{
location
expectPrivileged
}
)
{
location
?
?
=
getInstallLocation
(
{
}
)
;
let
xpi
=
await
AddonTestUtils
.
createTempWebExtensionFile
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
"
with
-
privileged
-
perm
"
}
}
permissions
:
[
"
mozillaAddons
"
"
cookies
"
]
}
}
)
;
let
actualPermissions
;
let
{
messages
}
=
await
AddonTestUtils
.
promiseConsoleOutput
(
async
(
)
=
>
{
let
addon
=
await
XPIInstall
.
loadManifestFromFile
(
xpi
location
)
;
actualPermissions
=
addon
.
userPermissions
;
}
)
;
if
(
expectPrivileged
)
{
AddonTestUtils
.
checkMessages
(
messages
{
expected
:
[
]
forbidden
:
[
{
message
:
/
Reading
manifest
:
Invalid
extension
permission
/
}
]
}
)
;
Assert
.
deepEqual
(
actualPermissions
{
origins
:
[
]
permissions
:
[
"
mozillaAddons
"
"
cookies
"
]
}
"
Privileged
permission
should
exist
"
)
;
}
else
{
AddonTestUtils
.
checkMessages
(
messages
{
expected
:
[
{
message
:
/
Reading
manifest
:
Invalid
extension
permission
:
mozillaAddons
/
}
]
forbidden
:
[
]
}
)
;
Assert
.
deepEqual
(
actualPermissions
{
origins
:
[
]
permissions
:
[
"
cookies
"
]
}
"
Privileged
permission
should
be
ignored
"
)
;
}
}
add_task
(
async
function
setup
(
)
{
await
ExtensionTestUtils
.
startAddonManager
(
)
;
}
)
;
add_task
(
async
function
test_regular_addon
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
await
testLoadManifest
(
{
expectPrivileged
:
false
}
)
;
}
)
;
add_task
(
async
function
test_privileged_signature
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
true
;
await
testLoadManifest
(
{
expectPrivileged
:
true
}
)
;
}
)
;
add_task
(
async
function
test_system_signature
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
"
system
"
;
await
testLoadManifest
(
{
expectPrivileged
:
true
}
)
;
}
)
;
add_task
(
async
function
test_builtin_location
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
await
testLoadManifest
(
{
expectPrivileged
:
true
location
:
getInstallLocation
(
{
isBuiltin
:
true
}
)
}
)
;
}
)
;
add_task
(
async
function
test_system_location
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
await
testLoadManifest
(
{
expectPrivileged
:
false
location
:
getInstallLocation
(
{
isSystem
:
true
}
)
}
)
;
}
)
;
add_task
(
async
function
test_builtin_system_location
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
await
testLoadManifest
(
{
expectPrivileged
:
true
location
:
getInstallLocation
(
{
isSystem
:
true
isBuiltin
:
true
}
)
}
)
;
}
)
;
add_task
(
async
function
test_temporary_regular
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
experiments
.
enabled
"
false
)
;
await
testLoadManifest
(
{
expectPrivileged
:
false
location
:
getInstallLocation
(
{
isTemporary
:
true
}
)
}
)
;
}
)
;
add_task
(
async
function
test_temporary_privileged_signature
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
true
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
experiments
.
enabled
"
false
)
;
await
testLoadManifest
(
{
expectPrivileged
:
true
location
:
getInstallLocation
(
{
isTemporary
:
true
}
)
}
)
;
}
)
;
add_task
(
async
function
test_temporary_experiments_enabled
(
)
{
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
experiments
.
enabled
"
true
)
;
await
testLoadManifest
(
{
expectPrivileged
:
true
location
:
getInstallLocation
(
{
isTemporary
:
true
}
)
}
)
;
}
)
;
