Services
.
prefs
.
setBoolPref
(
PREF_EM_STRICT_COMPATIBILITY
false
)
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
AddonManager
.
SCOPE_PROFILE
+
AddonManager
.
SCOPE_APPLICATION
)
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
const
globalDir
=
Services
.
dirsvc
.
get
(
"
XREAddonAppDir
"
Ci
.
nsIFile
)
;
globalDir
.
append
(
"
extensions
"
)
;
var
gGlobalExisted
=
globalDir
.
exists
(
)
;
var
gInstallTime
=
Date
.
now
(
)
;
add_task
(
async
function
setup
(
)
{
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
await
promiseWriteInstallRDFForExtension
(
{
id
:
"
addon1
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
name
:
"
Test
Addon
1
"
targetPlatforms
:
[
"
XPCShell
"
"
WINNT_x86
"
]
}
profileDir
)
;
await
promiseWriteInstallRDFForExtension
(
{
id
:
"
addon2
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
2
"
}
]
name
:
"
Test
Addon
2
"
targetPlatforms
:
[
"
XPCShell_noarch
-
spidermonkey
"
]
}
profileDir
)
;
await
promiseWriteInstallRDFForExtension
(
{
id
:
"
addon3
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
2
"
maxVersion
:
"
2
"
}
]
name
:
"
Test
Addon
3
"
}
profileDir
)
;
var
dest
=
await
promiseWriteInstallRDFForExtension
(
{
id
:
"
addon4
tests
.
mozilla
.
org
"
version
:
"
1
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
1
"
maxVersion
:
"
1
"
}
]
name
:
"
Test
Addon
4
"
}
globalDir
)
;
setExtensionModifiedTime
(
dest
gInstallTime
)
;
}
)
;
registerCleanupFunction
(
function
end_test
(
)
{
if
(
!
gGlobalExisted
)
{
globalDir
.
remove
(
true
)
;
}
else
{
globalDir
.
append
(
do_get_expected_addon_name
(
"
addon4
tests
.
mozilla
.
org
"
)
)
;
globalDir
.
remove
(
true
)
;
}
}
)
;
add_task
(
async
function
test_1
(
)
{
await
promiseStartupManager
(
)
;
let
[
a1
a2
a3
a4
]
=
await
AddonManager
.
getAddonsByIDs
(
[
"
addon1
tests
.
mozilla
.
org
"
"
addon2
tests
.
mozilla
.
org
"
"
addon3
tests
.
mozilla
.
org
"
"
addon4
tests
.
mozilla
.
org
"
]
)
;
Assert
.
notEqual
(
a1
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a1
.
id
)
)
;
Assert
.
notEqual
(
a2
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a2
.
id
)
)
;
Assert
.
notEqual
(
a3
null
)
;
Assert
.
ok
(
!
isExtensionInBootstrappedList
(
profileDir
a3
.
id
)
)
;
Assert
.
notEqual
(
a4
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
globalDir
a4
.
id
)
)
;
Assert
.
equal
(
a4
.
version
"
1
.
0
"
)
;
}
)
;
add_task
(
async
function
test_2
(
)
{
await
promiseShutdownManager
(
)
;
var
dest
=
await
promiseWriteInstallRDFForExtension
(
{
id
:
"
addon4
tests
.
mozilla
.
org
"
version
:
"
2
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
2
"
maxVersion
:
"
2
"
}
]
name
:
"
Test
Addon
4
"
}
globalDir
)
;
setExtensionModifiedTime
(
dest
gInstallTime
)
;
await
promiseStartupManager
(
"
2
"
)
;
let
[
a1
a2
a3
a4
]
=
await
AddonManager
.
getAddonsByIDs
(
[
"
addon1
tests
.
mozilla
.
org
"
"
addon2
tests
.
mozilla
.
org
"
"
addon3
tests
.
mozilla
.
org
"
"
addon4
tests
.
mozilla
.
org
"
]
)
;
Assert
.
notEqual
(
a1
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a1
.
id
)
)
;
Assert
.
notEqual
(
a2
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a2
.
id
)
)
;
Assert
.
notEqual
(
a3
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a3
.
id
)
)
;
Assert
.
notEqual
(
a4
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
globalDir
a4
.
id
)
)
;
Assert
.
equal
(
a4
.
version
"
2
.
0
"
)
;
}
)
;
add_task
(
async
function
test_3
(
)
{
await
promiseShutdownManager
(
)
;
var
dest
=
await
promiseWriteInstallRDFForExtension
(
{
id
:
"
addon4
tests
.
mozilla
.
org
"
version
:
"
3
.
0
"
bootstrap
:
true
targetApplications
:
[
{
id
:
"
xpcshell
tests
.
mozilla
.
org
"
minVersion
:
"
3
"
maxVersion
:
"
3
"
}
]
name
:
"
Test
Addon
4
"
}
globalDir
)
;
setExtensionModifiedTime
(
dest
gInstallTime
)
;
gAddonStartup
.
remove
(
true
)
;
await
promiseStartupManager
(
)
;
let
[
a1
a2
a3
a4
]
=
await
AddonManager
.
getAddonsByIDs
(
[
"
addon1
tests
.
mozilla
.
org
"
"
addon2
tests
.
mozilla
.
org
"
"
addon3
tests
.
mozilla
.
org
"
"
addon4
tests
.
mozilla
.
org
"
]
)
;
Assert
.
notEqual
(
a1
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a1
.
id
)
)
;
Assert
.
notEqual
(
a2
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a2
.
id
)
)
;
Assert
.
notEqual
(
a3
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
profileDir
a3
.
id
)
)
;
Assert
.
notEqual
(
a4
null
)
;
Assert
.
ok
(
isExtensionInBootstrappedList
(
globalDir
a4
.
id
)
)
;
Assert
.
equal
(
a4
.
version
"
2
.
0
"
)
;
await
promiseShutdownManager
(
)
;
}
)
;
