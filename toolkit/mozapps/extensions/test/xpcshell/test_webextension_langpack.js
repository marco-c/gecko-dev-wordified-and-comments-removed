Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
Services
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
{
L10nRegistry
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
L10nRegistry
.
jsm
"
{
}
)
;
const
ID
=
"
langpack
-
und
test
.
mozilla
.
org
"
;
const
profileDir
=
gProfD
.
clone
(
)
;
profileDir
.
append
(
"
extensions
"
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
58
"
)
;
startupManager
(
)
;
const
{
GlobalManager
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
;
function
promiseLangpackStartup
(
)
{
return
new
Promise
(
resolve
=
>
{
const
EVENT
=
"
webextension
-
langpack
-
startup
"
;
Services
.
obs
.
addObserver
(
function
observer
(
)
{
Services
.
obs
.
removeObserver
(
observer
EVENT
)
;
resolve
(
)
;
}
EVENT
)
;
}
)
;
}
add_task
(
async
function
(
)
{
equal
(
L10nRegistry
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
false
)
;
equal
(
Services
.
locale
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
false
)
;
let
[
{
addon
}
]
=
await
Promise
.
all
(
[
promiseInstallFile
(
do_get_addon
(
"
langpack_1
"
)
true
)
promiseLangpackStartup
(
)
]
)
;
equal
(
L10nRegistry
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
true
)
;
equal
(
Services
.
locale
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
true
)
;
addon
.
userDisabled
=
true
;
equal
(
L10nRegistry
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
false
)
;
equal
(
Services
.
locale
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
false
)
;
addon
.
userDisabled
=
false
;
await
promiseLangpackStartup
(
)
;
equal
(
L10nRegistry
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
true
)
;
equal
(
Services
.
locale
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
true
)
;
addon
.
uninstall
(
)
;
equal
(
L10nRegistry
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
false
)
;
equal
(
Services
.
locale
.
getAvailableLocales
(
)
.
includes
(
"
und
"
)
false
)
;
}
)
;
add_task
(
async
function
(
)
{
let
[
{
addon
}
]
=
await
Promise
.
all
(
[
promiseInstallFile
(
do_get_addon
(
"
langpack_1
"
)
true
)
promiseLangpackStartup
(
)
]
)
;
{
let
ctxs
=
L10nRegistry
.
generateContexts
(
[
"
und
"
]
[
"
toolkit_test
.
ftl
"
]
)
;
let
ctx0
=
(
await
ctxs
.
next
(
)
)
.
value
;
equal
(
ctx0
.
hasMessage
(
"
message
-
id1
"
)
true
)
;
}
{
let
ctxs
=
L10nRegistry
.
generateContexts
(
[
"
und
"
]
[
"
browser
.
ftl
"
]
)
;
let
ctx0
=
(
await
ctxs
.
next
(
)
)
.
value
;
equal
(
ctx0
.
hasMessage
(
"
message
-
browser
"
)
true
)
;
}
{
let
reqLocs
=
Services
.
locale
.
getRequestedLocales
(
)
;
Services
.
locale
.
setRequestedLocales
(
[
"
und
"
]
)
;
let
bundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
global
/
locale
/
test
.
properties
"
)
;
let
entry
=
bundle
.
GetStringFromName
(
"
message
"
)
;
equal
(
entry
"
Value
from
.
properties
"
)
;
Services
.
locale
.
setRequestedLocales
(
reqLocs
)
;
}
addon
.
uninstall
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
[
{
addon
}
]
=
await
Promise
.
all
(
[
promiseInstallFile
(
do_get_addon
(
"
langpack_1
"
)
true
)
promiseLangpackStartup
(
)
]
)
;
do_check_true
(
addon
.
isActive
)
;
await
promiseShutdownManager
(
)
;
gAppInfo
.
version
=
"
59
"
;
gAppInfo
.
platformVersion
=
"
59
"
;
await
promiseStartupManager
(
true
)
;
addon
=
await
promiseAddonByID
(
ID
)
;
do_check_false
(
addon
.
isActive
)
;
do_check_true
(
addon
.
appDisabled
)
;
addon
.
uninstall
(
)
;
}
)
;
