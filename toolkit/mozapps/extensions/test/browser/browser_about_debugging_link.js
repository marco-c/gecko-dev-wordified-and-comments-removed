"
use
strict
"
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Connection
closed
/
)
;
function
waitForDispatch
(
store
type
)
{
return
new
Promise
(
resolve
=
>
{
store
.
dispatch
(
{
type
:
"
service
/
waitUntil
"
predicate
:
action
=
>
action
.
type
=
=
=
type
run
:
(
dispatch
getState
action
)
=
>
{
resolve
(
action
)
;
}
}
)
;
}
)
;
}
async
function
waitForRequestsToSettle
(
store
delay
=
500
)
{
let
hasSettled
=
false
;
while
(
!
hasSettled
)
{
let
timer
;
const
timerPromise
=
new
Promise
(
resolve
=
>
{
timer
=
setTimeout
(
(
)
=
>
{
hasSettled
=
true
;
resolve
(
)
;
}
delay
)
;
}
)
;
await
Promise
.
race
(
[
waitForDispatch
(
store
"
REQUEST_EXTENSIONS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_TABS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_WORKERS_SUCCESS
"
)
timerPromise
]
)
;
clearTimeout
(
timer
)
;
}
}
function
waitForRequestsSuccess
(
store
)
{
return
Promise
.
all
(
[
waitForDispatch
(
store
"
REQUEST_EXTENSIONS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_TABS_SUCCESS
"
)
waitForDispatch
(
store
"
REQUEST_WORKERS_SUCCESS
"
)
]
)
;
}
add_task
(
async
function
testAboutDebugging
(
)
{
let
win
=
await
loadInitialView
(
"
extension
"
)
;
let
aboutAddonsTab
=
gBrowser
.
selectedTab
;
let
debugAddonsBtn
=
win
.
document
.
querySelector
(
'
#
page
-
options
[
action
=
"
debug
-
addons
"
]
'
)
;
info
(
Check
about
:
debugging
loads
)
;
let
loaded
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
debugging
#
/
runtime
/
this
-
firefox
"
true
)
;
debugAddonsBtn
.
click
(
)
;
await
loaded
;
let
aboutDebuggingTab
=
gBrowser
.
selectedTab
;
const
{
AboutDebugging
}
=
aboutDebuggingTab
.
linkedBrowser
.
contentWindow
;
info
(
"
Wait
until
about
:
debugging
actions
are
finished
"
)
;
await
waitForRequestsSuccess
(
AboutDebugging
.
store
)
;
info
(
"
Switch
back
to
about
:
addons
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
aboutAddonsTab
)
;
is
(
gBrowser
.
selectedTab
aboutAddonsTab
"
Back
to
about
:
addons
"
)
;
info
(
"
Re
-
open
about
:
debugging
"
)
;
let
switched
=
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
selectedTab
=
=
aboutDebuggingTab
)
;
debugAddonsBtn
.
click
(
)
;
await
switched
;
await
waitForRequestsToSettle
(
AboutDebugging
.
store
)
;
info
(
"
Force
about
:
debugging
to
a
different
hash
URL
"
)
;
aboutDebuggingTab
.
linkedBrowser
.
contentWindow
.
location
.
hash
=
"
/
setup
"
;
info
(
"
Switch
back
to
about
:
addons
again
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
aboutAddonsTab
)
;
is
(
gBrowser
.
selectedTab
aboutAddonsTab
"
Back
to
about
:
addons
"
)
;
info
(
"
Re
-
open
about
:
debugging
a
second
time
"
)
;
switched
=
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
selectedTab
=
=
aboutDebuggingTab
)
;
debugAddonsBtn
.
click
(
)
;
await
switched
;
info
(
"
Wait
until
any
new
about
:
debugging
request
did
settle
"
)
;
await
waitForRequestsToSettle
(
AboutDebugging
.
store
)
;
info
(
"
Remove
the
about
:
debugging
tab
"
)
;
BrowserTestUtils
.
removeTab
(
aboutDebuggingTab
)
;
await
closeView
(
win
)
;
}
)
;
