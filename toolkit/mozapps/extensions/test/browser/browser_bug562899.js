const
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
this
\
.
_errorLink
/
)
;
var
gManagerWindow
;
var
gCategoryUtilities
;
async
function
test
(
)
{
waitForExplicitFinish
(
)
;
let
aWindow
=
await
open_manager
(
null
)
;
gManagerWindow
=
aWindow
;
gCategoryUtilities
=
new
CategoryUtilities
(
gManagerWindow
)
;
run_next_test
(
)
;
}
async
function
end_test
(
)
{
await
close_manager
(
gManagerWindow
)
;
finish
(
)
;
}
add_test
(
async
function
(
)
{
var
themeCount
=
null
;
var
pluginCount
=
null
;
var
themeItem
=
gCategoryUtilities
.
get
(
"
theme
"
)
;
var
pluginItem
=
gCategoryUtilities
.
get
(
"
plugin
"
)
;
var
list
=
gManagerWindow
.
document
.
getElementById
(
"
addon
-
list
"
)
;
await
gCategoryUtilities
.
open
(
themeItem
)
;
themeCount
=
list
.
childNodes
.
length
;
ok
(
themeCount
>
0
"
Test
is
useless
if
there
are
no
themes
"
)
;
await
gCategoryUtilities
.
open
(
pluginItem
)
;
pluginCount
=
list
.
childNodes
.
length
;
ok
(
pluginCount
>
0
"
Test
is
useless
if
there
are
no
plugins
"
)
;
gCategoryUtilities
.
open
(
themeItem
)
;
await
gCategoryUtilities
.
open
(
pluginItem
)
;
is
(
list
.
childNodes
.
length
pluginCount
"
Should
only
see
the
plugins
"
)
;
var
item
=
list
.
firstChild
;
while
(
item
)
{
is
(
item
.
getAttribute
(
"
type
"
)
"
plugin
"
"
All
items
should
be
plugins
"
)
;
item
=
item
.
nextSibling
;
}
gCategoryUtilities
.
open
(
themeItem
)
;
gCategoryUtilities
.
open
(
pluginItem
)
;
await
gCategoryUtilities
.
open
(
themeItem
)
;
is
(
list
.
childNodes
.
length
themeCount
"
Should
only
see
the
theme
"
)
;
item
=
list
.
firstChild
;
while
(
item
)
{
is
(
item
.
getAttribute
(
"
type
"
)
"
theme
"
"
All
items
should
be
theme
"
)
;
item
=
item
.
nextSibling
;
}
run_next_test
(
)
;
}
)
;
