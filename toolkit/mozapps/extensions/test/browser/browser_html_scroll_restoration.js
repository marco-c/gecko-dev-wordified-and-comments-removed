"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
const
server
=
AddonTestUtils
.
createHttpServer
(
)
;
const
TEST_API_URL
=
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
discoapi
;
const
EXT_ID_EXTENSION
=
"
extension
example
.
com
"
;
const
EXT_ID_THEME
=
"
theme
example
.
com
"
;
let
requestCount
=
0
;
server
.
registerPathHandler
(
"
/
discoapi
"
(
request
response
)
=
>
{
is
(
+
+
requestCount
1
"
Expect
only
one
discoapi
request
"
)
;
let
results
=
{
results
:
[
{
addon
:
{
authors
:
[
{
name
:
"
Some
author
"
}
]
current_version
:
{
files
:
[
{
platform
:
"
all
"
url
:
"
data
:
"
}
]
}
url
:
"
data
:
"
guid
:
"
recommendation
example
.
com
"
type
:
"
extension
"
}
}
]
}
;
response
.
write
(
JSON
.
stringify
(
results
)
)
;
}
)
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
getAddons
.
discovery
.
api_url
"
TEST_API_URL
]
]
}
)
;
let
mockProvider
=
new
MockProvider
(
)
;
mockProvider
.
createAddons
(
[
{
id
:
EXT_ID_EXTENSION
name
:
"
Mock
1
"
type
:
"
extension
"
userPermissions
:
{
origins
:
[
"
<
all_urls
>
"
]
permissions
:
[
"
tabs
"
]
}
}
{
id
:
EXT_ID_THEME
name
:
"
Mock
2
"
type
:
"
theme
"
}
]
)
;
}
)
;
async
function
switchToView
(
win
type
param
=
"
"
)
{
let
loaded
=
waitForViewLoad
(
win
)
;
win
.
gViewController
.
loadView
(
addons
:
/
/
{
type
}
/
{
param
}
)
;
await
loaded
;
await
waitForStableLayout
(
win
)
;
}
async
function
historyGo
(
win
delta
expectedViewType
)
{
let
loaded
=
waitForViewLoad
(
win
)
;
win
.
history
.
go
(
delta
)
;
await
loaded
;
is
(
win
.
gViewController
.
currentViewId
expectedViewType
"
Expected
view
after
history
navigation
"
)
;
await
waitForStableLayout
(
win
)
;
}
async
function
waitForStableLayout
(
win
)
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
isLayoutStable
(
win
)
"
Waiting
for
layout
to
stabilize
"
)
;
}
function
isLayoutStable
(
win
)
{
for
(
let
bar
of
win
.
document
.
querySelectorAll
(
"
message
-
bar
"
)
)
{
if
(
!
win
.
getComputedStyle
(
bar
)
.
getPropertyValue
(
"
-
-
message
-
bar
-
icon
-
url
"
)
)
{
return
false
;
}
}
return
true
;
}
function
getAddonCard
(
win
addonId
)
{
return
win
.
document
.
querySelector
(
addon
-
card
[
addon
-
id
=
"
{
addonId
}
"
]
)
;
}
function
getScrollOffset
(
win
)
{
let
{
scrollTop
:
top
scrollLeft
:
left
}
=
win
.
document
.
documentElement
;
return
{
top
left
}
;
}
function
scrollTopLeftIntoView
(
elem
)
{
elem
.
scrollIntoView
(
{
block
:
"
start
"
inline
:
"
start
"
}
)
;
assertNonZeroScrollOffsets
(
getScrollOffset
(
elem
.
ownerGlobal
)
)
;
}
function
assertNonZeroScrollOffsets
(
offsets
)
{
ok
(
offsets
.
left
"
Should
have
scrolled
to
the
right
"
)
;
ok
(
offsets
.
top
"
Should
have
scrolled
down
"
)
;
}
function
checkScrollOffset
(
win
expected
msg
=
"
"
)
{
let
actual
=
getScrollOffset
(
win
)
;
is
(
actual
.
top
expected
.
top
Top
scroll
offset
-
{
msg
}
)
;
is
(
actual
.
left
expected
.
left
Left
scroll
offset
-
{
msg
}
)
;
}
add_task
(
async
function
test_scroll_restoration
(
)
{
let
win
=
await
loadInitialView
(
"
discover
"
)
;
await
win
.
document
.
querySelector
(
"
recommended
-
addon
-
list
"
)
.
cardsReady
;
win
.
document
.
body
.
style
.
paddingTop
=
"
200vh
"
;
win
.
document
.
body
.
style
.
paddingLeft
=
"
100vw
"
;
win
.
document
.
body
.
style
.
width
=
"
200vw
"
;
checkScrollOffset
(
win
{
top
:
0
left
:
0
}
"
initial
page
load
"
)
;
scrollTopLeftIntoView
(
win
.
document
.
querySelector
(
"
recommended
-
addon
-
card
"
)
)
;
let
discoOffsets
=
getScrollOffset
(
win
)
;
assertNonZeroScrollOffsets
(
discoOffsets
)
;
await
switchToView
(
win
"
list
"
"
extension
"
)
;
checkScrollOffset
(
win
{
top
:
0
left
:
0
}
"
initial
extension
list
"
)
;
scrollTopLeftIntoView
(
getAddonCard
(
win
EXT_ID_EXTENSION
)
)
;
let
extListOffsets
=
getScrollOffset
(
win
)
;
assertNonZeroScrollOffsets
(
extListOffsets
)
;
let
loaded
=
waitForViewLoad
(
win
)
;
getAddonCard
(
win
EXT_ID_EXTENSION
)
.
click
(
)
;
await
loaded
;
checkScrollOffset
(
win
{
top
:
0
left
:
0
}
"
initial
details
view
"
)
;
scrollTopLeftIntoView
(
getAddonCard
(
win
EXT_ID_EXTENSION
)
)
;
let
detailsOffsets
=
getScrollOffset
(
win
)
;
assertNonZeroScrollOffsets
(
detailsOffsets
)
;
await
historyGo
(
win
-
1
"
addons
:
/
/
list
/
extension
"
)
;
checkScrollOffset
(
win
extListOffsets
"
back
to
extension
list
"
)
;
ok
(
win
.
document
.
querySelector
(
"
recommended
-
addon
-
card
"
)
"
Recommendations
have
already
been
loaded
"
)
;
win
.
document
.
body
.
scrollIntoView
(
{
block
:
"
end
"
inline
:
"
end
"
}
)
;
extListOffsets
=
getScrollOffset
(
win
)
;
assertNonZeroScrollOffsets
(
extListOffsets
)
;
await
historyGo
(
win
+
1
addons
:
/
/
detail
/
{
EXT_ID_EXTENSION
}
)
;
checkScrollOffset
(
win
detailsOffsets
"
details
view
with
default
tab
"
)
;
win
.
document
.
querySelector
(
"
.
tab
-
button
[
name
=
'
permissions
'
]
"
)
.
click
(
)
;
await
historyGo
(
win
-
1
"
addons
:
/
/
list
/
extension
"
)
;
checkScrollOffset
(
win
extListOffsets
"
bottom
-
right
of
extension
list
"
)
;
ok
(
win
.
document
.
querySelector
(
"
recommended
-
addon
-
card
"
)
"
Recommendations
should
have
been
loaded
again
"
)
;
await
historyGo
(
win
+
1
addons
:
/
/
detail
/
{
EXT_ID_EXTENSION
}
)
;
checkScrollOffset
(
win
{
top
:
0
left
:
0
}
"
details
view
non
-
default
tab
"
)
;
await
historyGo
(
win
-
2
"
addons
:
/
/
discover
/
"
)
;
checkScrollOffset
(
win
discoOffsets
"
after
switching
back
to
disco
pane
"
)
;
await
switchToView
(
win
"
list
"
"
theme
"
)
;
checkScrollOffset
(
win
{
top
:
0
left
:
0
}
"
initial
theme
list
"
)
;
await
closeView
(
win
)
;
}
)
;
