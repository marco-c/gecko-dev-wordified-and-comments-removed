add_task
(
async
function
(
)
{
const
INFO_URL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
webextensions
"
;
const
IGNORE
=
[
"
special
-
powers
mozilla
.
org
"
"
mochikit
mozilla
.
org
"
"
mozscreenshots
mozilla
.
org
"
]
;
let
exceptions
=
Services
.
prefs
.
getCharPref
(
"
extensions
.
legacy
.
exceptions
"
)
;
exceptions
=
[
exceptions
.
.
.
IGNORE
]
.
join
(
"
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
legacy
.
enabled
"
false
]
[
"
extensions
.
legacy
.
exceptions
"
exceptions
]
[
"
xpinstall
.
signatures
.
required
"
false
]
]
}
)
;
let
goodAddons
=
[
{
id
:
"
webextension
tests
.
mozilla
.
org
"
name
:
"
WebExtension
"
type
:
"
extension
"
isWebExtension
:
true
}
{
id
:
"
mozilla
tests
.
mozilla
.
org
"
name
:
"
Mozilla
signed
extension
"
type
:
"
extension
"
isWebExtension
:
false
signedState
:
AddonManager
.
SIGNEDSTATE_PRIVILEGED
}
]
;
let
disabledAddon
=
[
{
id
:
"
legacy
tests
.
mozilla
.
org
"
name
:
"
Legacy
extension
"
type
:
"
extension
"
isWebExtension
:
false
appDisabled
:
true
}
]
;
let
unsignedAddons
=
[
{
id
:
"
unsigned_webext
tests
.
mozilla
.
org
"
name
:
"
Unsigned
WebExtension
"
type
:
"
extension
"
isWebExtension
:
true
appDisabled
:
true
signedState
:
AddonManager
.
SIGNEDSTATE_MISSING
}
{
id
:
"
unsigned_legacy
tests
.
mozilla
.
org
"
name
:
"
Unsigned
legacy
extension
"
type
:
"
extension
"
isWebExtension
:
false
appDisabled
:
true
signedState
:
AddonManager
.
SIGNEDSTATE_MISSING
}
]
;
let
provider
=
new
MockProvider
(
)
;
provider
.
createAddons
(
goodAddons
)
;
let
mgrWin
=
await
open_manager
(
null
)
;
let
catUtils
=
new
CategoryUtilities
(
mgrWin
)
;
async
function
checkList
(
listId
expectIds
)
{
let
ids
=
new
Set
(
expectIds
)
;
for
(
let
item
of
mgrWin
.
document
.
getElementById
(
listId
)
.
itemChildren
)
{
if
(
!
item
.
mAddon
.
id
.
endsWith
(
"
tests
.
mozilla
.
org
"
)
)
{
continue
;
}
ok
(
ids
.
has
(
item
.
mAddon
.
id
)
Found
{
item
.
mAddon
.
id
}
in
addons
list
)
;
ids
.
delete
(
item
.
mAddon
.
id
)
;
}
for
(
let
id
of
ids
)
{
ok
(
false
Did
not
find
{
id
}
in
addons
list
)
;
}
}
await
catUtils
.
openType
(
"
extension
"
)
;
checkList
(
"
addon
-
list
"
[
"
webextension
tests
.
mozilla
.
org
"
"
mozilla
tests
.
mozilla
.
org
"
]
)
;
let
banner
=
mgrWin
.
document
.
getElementById
(
"
legacy
-
extensions
-
notice
"
)
;
is_element_hidden
(
banner
"
Warning
about
legacy
extensions
should
be
hidden
"
)
;
is
(
mgrWin
.
gLegacyView
.
_categoryItem
.
disabled
true
"
Legacy
category
is
hidden
"
)
;
provider
.
createAddons
(
disabledAddon
)
;
await
mgrWin
.
gLegacyView
.
refreshVisibility
(
)
;
await
catUtils
.
openType
(
"
plugin
"
)
;
await
catUtils
.
openType
(
"
extension
"
)
;
checkList
(
"
addon
-
list
"
[
"
webextension
tests
.
mozilla
.
org
"
"
mozilla
tests
.
mozilla
.
org
"
]
)
;
banner
=
mgrWin
.
document
.
getElementById
(
"
legacy
-
extensions
-
notice
"
)
;
is_element_visible
(
banner
"
Warning
about
legacy
extensions
should
be
visible
"
)
;
let
catItem
=
mgrWin
.
gLegacyView
.
_categoryItem
;
is
(
catItem
.
disabled
false
"
Legacy
category
is
visible
"
)
;
is
(
catItem
.
getAttribute
(
"
name
"
)
get_string
(
"
type
.
legacy
.
name
"
)
"
Category
label
with
no
unsigned
extensions
is
correct
"
)
;
let
legacyLink
=
mgrWin
.
document
.
getElementById
(
"
legacy
-
extensions
-
learnmore
-
link
"
)
;
is_element_visible
(
legacyLink
"
Link
to
legacy
extension
is
visible
"
)
;
let
loadPromise
=
new
Promise
(
resolve
=
>
wait_for_view_load
(
mgrWin
resolve
true
)
)
;
legacyLink
.
click
(
)
;
await
loadPromise
;
is
(
mgrWin
.
gViewController
.
currentViewId
"
addons
:
/
/
legacy
/
"
"
Legacy
extensions
link
leads
to
the
correct
view
"
)
;
let
link
=
mgrWin
.
document
.
getElementById
(
"
legacy
-
learnmore
"
)
;
is
(
link
.
href
INFO_URL
"
Learn
more
link
points
to
the
right
place
"
)
;
checkList
(
"
legacy
-
list
"
[
"
legacy
tests
.
mozilla
.
org
"
]
)
;
provider
.
createAddons
(
unsignedAddons
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
xpinstall
.
signatures
.
required
"
true
]
]
}
)
;
await
mgrWin
.
gLegacyView
.
refreshVisibility
(
)
;
is
(
catItem
.
disabled
false
"
Legacy
category
is
visible
"
)
;
is
(
catItem
.
getAttribute
(
"
name
"
)
get_string
(
"
type
.
unsupported
.
name
"
)
"
Category
label
with
unsigned
extensions
is
correct
"
)
;
await
catUtils
.
openType
(
"
extension
"
)
;
checkList
(
"
addon
-
list
"
[
"
webextension
tests
.
mozilla
.
org
"
"
mozilla
tests
.
mozilla
.
org
"
]
)
;
banner
=
mgrWin
.
document
.
getElementById
(
"
legacy
-
extensions
-
notice
"
)
;
is_element_visible
(
banner
"
Warning
about
legacy
extensions
should
be
visible
"
)
;
await
catUtils
.
openType
(
"
legacy
"
)
;
checkList
(
"
legacy
-
list
"
[
"
legacy
tests
.
mozilla
.
org
"
"
unsigned_webext
tests
.
mozilla
.
org
"
"
unsigned_legacy
tests
.
mozilla
.
org
"
]
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
xpinstall
.
signatures
.
required
"
false
]
]
}
)
;
await
new
Promise
(
executeSoon
)
;
await
mgrWin
.
gLegacyView
.
refreshVisibility
(
)
;
is
(
catItem
.
disabled
false
"
Legacy
category
is
visible
"
)
;
is
(
catItem
.
getAttribute
(
"
name
"
)
get_string
(
"
type
.
legacy
.
name
"
)
"
Category
label
with
no
unsigned
extensions
is
correct
"
)
;
await
catUtils
.
openType
(
"
extension
"
)
;
checkList
(
"
addon
-
list
"
[
"
webextension
tests
.
mozilla
.
org
"
"
mozilla
tests
.
mozilla
.
org
"
"
unsigned_webext
tests
.
mozilla
.
org
"
]
)
;
await
catUtils
.
openType
(
"
legacy
"
)
;
checkList
(
"
legacy
-
list
"
[
"
legacy
tests
.
mozilla
.
org
"
"
unsigned_legacy
tests
.
mozilla
.
org
"
]
)
;
await
close_manager
(
mgrWin
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
legacy
.
enabled
"
true
]
]
}
)
;
mgrWin
=
await
open_manager
(
null
)
;
is
(
mgrWin
.
gViewController
.
currentViewId
"
addons
:
/
/
list
/
extension
"
"
addons
manager
switched
to
extensions
list
"
)
;
await
close_manager
(
mgrWin
)
;
}
)
;
