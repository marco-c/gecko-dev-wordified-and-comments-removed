"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
ExtensionUtils
:
{
promiseEvent
promiseObserved
}
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
const
DISCOAPI_DEFAULT_FIXTURE
=
PathUtils
.
join
(
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
.
path
.
.
.
RELATIVE_DIR
.
split
(
"
/
"
)
"
discovery
"
"
api_response
.
json
"
)
;
async
function
readAPIResponseFixture
(
amoTestHost
fixtureFilePath
=
DISCOAPI_DEFAULT_FIXTURE
)
{
let
apiText
=
await
IOUtils
.
readUTF8
(
fixtureFilePath
)
;
apiText
=
apiText
.
replace
(
/
\
bhttps
?
:
\
/
\
/
[
^
"
]
+
(
?
=
"
)
/
g
url
=
>
{
try
{
url
=
new
URL
(
url
)
;
}
catch
(
e
)
{
return
url
;
}
let
ext
=
url
.
pathname
.
split
(
"
.
"
)
.
pop
(
)
;
return
http
:
/
/
{
amoTestHost
}
/
{
ext
}
?
{
url
.
pathname
}
{
url
.
search
}
;
}
)
;
return
apiText
;
}
function
promiseDiscopaneUpdate
(
win
)
{
let
{
cardsReady
}
=
getCardContainer
(
win
)
;
ok
(
cardsReady
"
Discovery
cards
should
have
started
to
initialize
"
)
;
return
cardsReady
;
}
function
getCardContainer
(
win
)
{
return
getDiscoveryElement
(
win
)
.
querySelector
(
"
recommended
-
addon
-
list
"
)
;
}
function
getDiscoveryElement
(
win
)
{
return
win
.
document
.
querySelector
(
"
discovery
-
pane
"
)
;
}
async
function
promiseAddonInstall
(
amoServer
extensionData
expectedTelemetryInfo
=
{
source
:
"
disco
"
taarRecommended
:
false
}
)
{
let
description
=
extensionData
.
manifest
.
description
;
let
xpiFile
=
AddonTestUtils
.
createTempWebExtensionFile
(
extensionData
)
;
amoServer
.
registerFile
(
"
/
xpi
"
xpiFile
)
;
let
addonId
=
extensionData
.
manifest
?
.
browser_specific_settings
?
.
gecko
?
.
id
|
|
extensionData
.
manifest
?
.
applications
?
.
gecko
?
.
id
;
let
installedPromise
=
waitAppMenuNotificationShown
(
"
addon
-
installed
"
addonId
true
)
;
if
(
!
extensionData
.
manifest
.
theme
)
{
info
(
{
description
}
:
Waiting
for
permission
prompt
)
;
let
panel
=
await
promisePopupNotificationShown
(
"
addon
-
webext
-
permissions
"
)
;
panel
.
button
.
click
(
)
;
}
else
{
info
(
{
description
}
:
Waiting
for
install
prompt
)
;
let
panel
=
await
promisePopupNotificationShown
(
"
addon
-
install
-
confirmation
"
)
;
panel
.
button
.
click
(
)
;
}
info
(
"
Waiting
for
post
-
install
doorhanger
"
)
;
await
installedPromise
;
let
addon
=
await
AddonManager
.
getAddonByID
(
addonId
)
;
Assert
.
deepEqual
(
addon
.
installTelemetryInfo
expectedTelemetryInfo
"
The
installed
add
-
on
should
have
the
expected
telemetry
info
"
)
;
}
