const
ADDON_INSTALL_ID
=
"
addon
-
webext
-
permissions
"
;
let
fileurl1
=
get_addon_file_url
(
"
browser_dragdrop1
.
xpi
"
)
;
let
fileurl2
=
get_addon_file_url
(
"
browser_dragdrop2
.
xpi
"
)
;
function
promiseInstallNotification
(
aBrowser
)
{
return
new
Promise
(
resolve
=
>
{
function
popupshown
(
event
)
{
let
notification
=
PopupNotifications
.
getNotification
(
ADDON_INSTALL_ID
aBrowser
)
;
if
(
!
notification
)
{
return
;
}
if
(
gBrowser
.
selectedBrowser
!
=
=
aBrowser
)
{
return
;
}
PopupNotifications
.
panel
.
removeEventListener
(
"
popupshown
"
popupshown
)
;
ok
(
true
Got
{
ADDON_INSTALL_ID
}
popup
for
browser
)
;
event
.
target
.
firstChild
.
secondaryButton
.
click
(
)
;
resolve
(
)
;
}
PopupNotifications
.
panel
.
addEventListener
(
"
popupshown
"
popupshown
)
;
}
)
;
}
function
CheckBrowserInPid
(
browser
expectedPid
message
)
{
return
SpecialPowers
.
spawn
(
browser
[
{
expectedPid
message
}
]
arg
=
>
{
is
(
Services
.
appinfo
.
processID
arg
.
expectedPid
arg
.
message
)
;
}
)
;
}
async
function
testOpenedAndDraggedXPI
(
aBrowser
)
{
let
browserPid
=
await
SpecialPowers
.
spawn
(
aBrowser
[
]
(
)
=
>
{
return
Services
.
appinfo
.
processID
;
}
)
;
let
promiseNotification
=
promiseInstallNotification
(
aBrowser
)
;
let
urlbar
=
gURLBar
;
urlbar
.
value
=
fileurl1
.
spec
;
urlbar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
promiseNotification
;
await
CheckBrowserInPid
(
aBrowser
browserPid
"
Check
that
browser
has
not
switched
process
.
"
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
promiseNotification
=
promiseInstallNotification
(
aBrowser
)
;
let
effect
=
EventUtils
.
synthesizeDrop
(
tab
tab
[
[
{
type
:
"
text
/
uri
-
list
"
data
:
fileurl1
.
spec
}
]
]
"
move
"
)
;
is
(
effect
"
move
"
"
Drag
should
be
accepted
"
)
;
await
promiseNotification
;
await
CheckBrowserInPid
(
aBrowser
browserPid
"
Check
that
browser
has
not
switched
process
.
"
)
;
promiseNotification
=
promiseInstallNotification
(
aBrowser
)
;
let
promiseNewTab
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
effect
=
EventUtils
.
synthesizeDrop
(
tab
tab
[
[
{
type
:
"
text
/
uri
-
list
"
data
:
fileurl1
.
spec
}
]
[
{
type
:
"
text
/
uri
-
list
"
data
:
fileurl2
.
spec
}
]
]
"
move
"
)
;
is
(
effect
"
move
"
"
Drag
should
be
accepted
"
)
;
let
{
target
:
newTab
}
=
await
promiseNewTab
;
await
promiseNotification
;
let
promiseSecondNotification
=
promiseInstallNotification
(
newTab
.
linkedBrowser
)
;
BrowserTestUtils
.
switchTab
(
gBrowser
newTab
)
;
await
promiseSecondNotification
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
await
CheckBrowserInPid
(
aBrowser
browserPid
"
Check
that
browser
has
not
switched
process
.
"
)
;
}
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
"
testOpenedAndDraggedXPI
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
robots
"
testOpenedAndDraggedXPI
)
;
}
)
;
