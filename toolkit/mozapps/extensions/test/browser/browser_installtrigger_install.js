"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
PermissionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PermissionTestUtils
.
jsm
"
)
;
const
XPI_URL
=
{
SECURE_TESTROOT
}
.
.
/
xpinstall
/
amosigned
.
xpi
;
const
XPI_ADDON_ID
=
"
amosigned
-
xpi
tests
.
mozilla
.
org
"
;
AddonTestUtils
.
initMochitest
(
this
)
;
add_task
(
async
function
testInstallAfterHistoryPushState
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
webapi
.
testing
"
true
]
[
"
extensions
.
install
.
requireBuiltInCerts
"
false
]
]
}
)
;
PermissionTestUtils
.
add
(
"
https
:
/
/
example
.
com
/
"
"
install
"
Services
.
perms
.
ALLOW_ACTION
)
;
registerCleanupFunction
(
async
(
)
=
>
{
PermissionTestUtils
.
remove
(
"
https
:
/
/
example
.
com
"
"
install
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
SECURE_TESTROOT
async
browser
=
>
{
let
installPromptPromise
=
promisePopupNotificationShown
(
"
addon
-
webext
-
permissions
"
)
.
then
(
panel
=
>
{
panel
.
button
.
click
(
)
;
}
)
;
let
promptPromise
=
acceptAppMenuNotificationWhenShown
(
"
addon
-
installed
"
XPI_ADDON_ID
)
;
await
SpecialPowers
.
spawn
(
browser
[
SECURE_TESTROOT
XPI_URL
]
(
secureTestRoot
xpiUrl
)
=
>
{
content
.
history
.
pushState
(
{
}
"
"
{
secureTestRoot
}
?
some
=
query
&
par
=
am
)
;
content
.
InstallTrigger
.
install
(
{
URL
:
xpiUrl
}
)
;
}
)
;
await
Promise
.
all
(
[
installPromptPromise
promptPromise
]
)
;
let
addon
=
await
promiseAddonByID
(
XPI_ADDON_ID
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
addon
.
uninstall
(
)
;
}
)
;
AddonTestUtils
.
checkInstallInfo
(
addon
{
method
:
"
installTrigger
"
source
:
"
test
-
host
"
sourceURL
:
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
mozapps
/
extensions
/
test
/
browser
/
?
some
=
query
&
par
=
am
"
}
)
;
}
)
;
}
)
;
