"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
const
LIGHT_SCHEME_BG
=
"
rgb
(
255
255
255
)
"
;
const
LIGHT_SCHEME_FG
=
"
rgb
(
0
0
0
)
"
;
const
DARK_SCHEME_BG
=
"
rgb
(
28
27
34
)
"
;
const
DARK_SCHEME_FG
=
"
rgb
(
251
251
254
)
"
;
async
function
getColorsForOptionsUI
(
{
browser_style
open_in_tab
}
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
temporary
"
manifest
:
{
options_ui
:
{
browser_style
page
:
"
options
.
html
"
open_in_tab
}
}
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
msg
=
>
{
browser
.
test
.
assertEq
(
"
openOptionsPage
"
msg
"
expect
openOptionsPage
"
)
;
browser
.
runtime
.
openOptionsPage
(
)
;
}
)
;
}
files
:
{
"
options
.
html
"
:
<
style
>
:
root
{
color
-
scheme
:
dark
light
;
}
<
/
style
>
<
script
src
=
"
options
.
js
"
>
<
/
script
>
"
options
.
js
"
:
(
)
=
>
{
window
.
onload
=
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
options_ui_opened
"
)
;
}
;
}
}
}
)
;
await
extension
.
startup
(
)
;
extension
.
sendMessage
(
"
openOptionsPage
"
)
;
await
extension
.
awaitMessage
(
"
options_ui_opened
"
)
;
const
tab
=
gBrowser
.
selectedTab
;
let
optionsBrowser
;
if
(
open_in_tab
)
{
optionsBrowser
=
tab
.
linkedBrowser
;
is
(
optionsBrowser
.
currentURI
.
spec
moz
-
extension
:
/
/
{
extension
.
uuid
}
/
options
.
html
"
With
open_in_tab
=
true
should
open
options
.
html
in
tab
"
)
;
}
else
{
is
(
tab
.
linkedBrowser
.
currentURI
.
spec
"
about
:
addons
"
"
Without
open_in_tab
should
open
about
:
addons
"
)
;
optionsBrowser
=
tab
.
linkedBrowser
.
contentDocument
.
getElementById
(
"
addon
-
inline
-
options
"
)
;
is
(
optionsBrowser
.
currentURI
.
spec
moz
-
extension
:
/
/
{
extension
.
uuid
}
/
options
.
html
"
Found
options
.
html
in
inline
options
browser
"
)
;
}
let
colors
=
await
SpecialPowers
.
spawn
(
optionsBrowser
[
]
(
)
=
>
{
let
style
=
content
.
getComputedStyle
(
content
.
document
.
body
)
;
return
{
bgColor
:
content
.
windowUtils
.
canvasBackgroundColor
fgColor
:
style
.
color
}
;
}
)
;
if
(
colors
.
bgColor
=
=
=
"
rgba
(
0
0
0
0
)
"
)
{
Assert
.
ok
(
!
open_in_tab
"
Background
only
transparent
without
open_in_tab
"
)
;
let
style
=
optionsBrowser
.
ownerGlobal
.
getComputedStyle
(
optionsBrowser
)
;
colors
.
bgColor
=
style
.
backgroundColor
;
}
BrowserTestUtils
.
removeTab
(
tab
)
;
await
extension
.
unload
(
)
;
return
colors
;
}
add_setup
(
async
(
)
=
>
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
data
:
"
)
;
registerCleanupFunction
(
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
add_task
(
async
function
options_ui_open_in_tab_light
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
0
]
]
}
)
;
Assert
.
deepEqual
(
await
getColorsForOptionsUI
(
{
browser_style
:
true
open_in_tab
:
true
}
)
{
bgColor
:
LIGHT_SCHEME_BG
fgColor
:
LIGHT_SCHEME_FG
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
options_ui_open_in_tab_dark
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
1
]
]
}
)
;
Assert
.
deepEqual
(
await
getColorsForOptionsUI
(
{
browser_style
:
true
open_in_tab
:
true
}
)
{
bgColor
:
DARK_SCHEME_BG
fgColor
:
DARK_SCHEME_FG
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
options_ui_light
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
0
]
]
}
)
;
Assert
.
deepEqual
(
await
getColorsForOptionsUI
(
{
browser_style
:
false
open_in_tab
:
false
}
)
{
bgColor
:
LIGHT_SCHEME_BG
fgColor
:
LIGHT_SCHEME_FG
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
options_ui_dark
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
1
]
]
}
)
;
Assert
.
deepEqual
(
await
getColorsForOptionsUI
(
{
browser_style
:
false
open_in_tab
:
false
}
)
{
bgColor
:
DARK_SCHEME_BG
fgColor
:
DARK_SCHEME_FG
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
options_ui_browser_style_true_light
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
0
]
]
}
)
;
Assert
.
deepEqual
(
await
getColorsForOptionsUI
(
{
browser_style
:
true
open_in_tab
:
false
}
)
{
bgColor
:
LIGHT_SCHEME_BG
fgColor
:
"
rgb
(
34
36
38
)
"
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
options_ui_browser_style_true_dark
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
1
]
]
}
)
;
Assert
.
deepEqual
(
await
getColorsForOptionsUI
(
{
browser_style
:
true
open_in_tab
:
false
}
)
{
bgColor
:
DARK_SCHEME_BG
fgColor
:
DARK_SCHEME_FG
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
