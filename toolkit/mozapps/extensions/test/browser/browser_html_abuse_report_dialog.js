loadTestSubscript
(
"
head_abuse_report
.
js
"
)
;
add_task
(
async
function
setup
(
)
{
await
AbuseReportTestUtils
.
setup
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
abuseReport
.
openDialog
"
true
]
]
}
)
;
}
)
;
addCommonAbuseReportTestTasks
(
)
;
add_task
(
async
function
test_report_triggered_when_report_dialog_is_open
(
)
{
const
addonId
=
"
addon
-
to
-
report
mochi
.
test
"
;
const
extension
=
await
installTestExtension
(
addonId
)
;
const
reportDialog
=
await
AbuseReporter
.
openDialog
(
addonId
"
menu
"
gBrowser
.
selectedBrowser
)
;
await
AbuseReportTestUtils
.
promiseReportDialogRendered
(
)
;
let
promiseClosedWindow
=
waitClosedWindow
(
)
;
const
reportDialog2
=
await
AbuseReporter
.
openDialog
(
addonId
"
menu
"
gBrowser
.
selectedBrowser
)
;
await
promiseClosedWindow
;
await
AbuseReportTestUtils
.
promiseReportDialogRendered
(
)
;
ok
(
!
reportDialog
.
window
|
|
reportDialog
.
window
.
closed
"
expect
the
first
dialog
to
be
closed
"
)
;
ok
(
!
!
reportDialog2
.
window
"
expect
the
second
dialog
to
be
open
"
)
;
is
(
reportDialog2
.
window
AbuseReportTestUtils
.
getReportDialog
(
)
"
Got
a
report
dialog
as
expected
"
)
;
AbuseReportTestUtils
.
triggerSubmit
(
"
fake
-
reason
"
"
fake
-
message
"
)
;
ok
(
!
(
await
reportDialog
.
promiseReport
)
"
expect
the
first
report
to
be
cancelled
"
)
;
ok
(
!
!
(
await
reportDialog2
.
promiseReport
)
"
expect
the
second
report
to
be
resolved
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_report_dialog_window_closed_by_user
(
)
{
const
addonId
=
"
addon
-
to
-
report
mochi
.
test
"
;
const
extension
=
await
installTestExtension
(
addonId
)
;
const
reportDialog
=
await
AbuseReporter
.
openDialog
(
addonId
"
menu
"
gBrowser
.
selectedBrowser
)
;
await
AbuseReportTestUtils
.
promiseReportDialogRendered
(
)
;
let
promiseClosedWindow
=
waitClosedWindow
(
)
;
reportDialog
.
close
(
)
;
await
promiseClosedWindow
;
ok
(
!
(
await
reportDialog
.
promiseReport
)
"
expect
promiseReport
to
be
resolved
as
user
cancelled
"
)
;
await
extension
.
unload
(
)
;
}
)
;
