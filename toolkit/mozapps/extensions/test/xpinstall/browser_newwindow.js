"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
let
promiseAddonStarted
=
null
;
function
confirm_install
(
panel
)
{
is
(
panel
.
getAttribute
(
"
name
"
)
"
XPI
Test
"
"
Should
have
seen
the
name
"
)
;
promiseAddonStarted
=
AddonTestUtils
.
promiseWebExtensionStartup
(
"
amosigned
-
xpi
tests
.
mozilla
.
org
"
)
;
return
true
;
}
function
install_ended
(
install
addon
)
{
is
(
addon
.
__AddonInternal__
.
_install
null
"
Expect
addon
.
_install
to
not
be
set
after
install
is
completed
"
)
;
promiseAddonStarted
.
then
(
(
)
=
>
addon
.
uninstall
(
)
)
;
}
add_task
(
async
function
test_newwindow_leak
(
)
{
ok
(
AppConstants
.
DEBUG
"
Test
is
running
on
a
DEBUG
build
as
expected
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
webapi
.
testing
"
true
]
[
PREF_INSTALL_REQUIREBUILTINCERTS
false
]
]
}
)
;
const
deferredInstallCompleted
=
Promise
.
withResolvers
(
)
;
Harness
.
installConfirmCallback
=
confirm_install
;
Harness
.
installStartedCallback
=
install
=
>
{
is
(
install
.
addon
.
__AddonInternal__
.
_install
install
.
__AddonInstallInternal__
"
Expect
addon
.
_install
to
be
set
when
install
is
started
"
)
;
}
;
Harness
.
installEndedCallback
=
install_ended
;
Harness
.
installsCompletedCallback
=
deferredInstallCompleted
.
resolve
;
Harness
.
finalContentEvent
=
"
InstallComplete
"
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
Harness
.
setup
(
win
)
;
const
triggers
=
encodeURIComponent
(
JSON
.
stringify
(
{
url
:
SECURE_TESTROOT
+
"
amosigned
.
xpi
"
}
)
)
;
const
url
=
{
SECURE_TESTROOT
}
mozaddonmanager
.
html
?
{
triggers
}
;
let
newtabPromise
=
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
url
)
;
let
popupPromise
=
BrowserTestUtils
.
waitForEvent
(
win
.
PanelUI
.
notificationPanel
"
popupshown
"
)
;
info
(
"
Wait
for
the
install
to
be
completed
"
)
;
const
count
=
await
deferredInstallCompleted
.
promise
;
is
(
count
1
"
1
Add
-
on
should
have
been
successfully
installed
"
)
;
const
results
=
await
SpecialPowers
.
spawn
(
win
.
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
return
{
return
:
content
.
document
.
getElementById
(
"
return
"
)
.
textContent
status
:
content
.
document
.
getElementById
(
"
status
"
)
.
textContent
}
;
}
)
;
is
(
results
.
return
"
true
"
"
mozAddonManager
should
have
claimed
success
"
)
;
is
(
results
.
status
"
STATE_INSTALLED
"
"
Callback
should
have
seen
a
success
"
)
;
await
popupPromise
;
win
.
PanelUI
.
notificationPanel
.
querySelector
(
"
popupnotification
[
popupid
=
addon
-
installed
]
"
)
.
button
.
click
(
)
;
await
newtabPromise
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
Harness
.
finish
(
win
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
