"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
const
XPI_URL
=
{
TESTROOT
}
amosigned
.
xpi
;
async
function
runTestCase
(
spawnArgs
spawnFn
{
expectInstall
clickLink
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
xpinstall
.
userActivation
.
required
"
true
]
[
"
dom
.
security
.
https_first
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
TESTROOT
async
browser
=
>
{
const
expectedError
=
{
XPI_URL
}
install
cancelled
because
of
missing
user
gesture
activation
;
let
promiseDone
;
if
(
expectInstall
)
{
promiseDone
=
TestUtils
.
topicObserved
(
"
addon
-
install
-
blocked
"
)
.
then
(
(
[
subject
]
)
=
>
{
subject
.
wrappedJSObject
.
cancel
(
)
;
}
)
;
}
else
{
promiseDone
=
new
Promise
(
resolve
=
>
{
function
messageHandler
(
msgObj
)
{
if
(
msgObj
instanceof
Ci
.
nsIScriptError
&
&
msgObj
.
message
.
includes
(
expectedError
)
)
{
ok
(
true
"
Expect
error
on
triggering
navigation
to
xpi
without
user
gesture
activation
"
)
;
cleanupListener
(
)
;
resolve
(
)
;
}
}
let
listenerCleared
=
false
;
function
cleanupListener
(
)
{
if
(
!
listenerCleared
)
{
Services
.
console
.
unregisterListener
(
messageHandler
)
;
}
listenerCleared
=
true
;
}
Services
.
console
.
registerListener
(
messageHandler
)
;
registerCleanupFunction
(
cleanupListener
)
;
}
)
;
}
await
SpecialPowers
.
spawn
(
browser
spawnArgs
spawnFn
)
;
if
(
clickLink
)
{
info
(
"
Click
link
element
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
link
-
to
-
xpi
-
file
"
{
}
browser
)
;
}
info
(
"
Wait
test
case
to
be
completed
"
)
;
await
promiseDone
;
ok
(
true
"
Test
case
run
completed
"
)
;
}
)
;
}
add_task
(
async
function
testSuccessOnUserActivatedLink
(
)
{
await
runTestCase
(
[
XPI_URL
]
xpiURL
=
>
{
const
{
document
}
=
this
.
content
;
const
link
=
document
.
createElement
(
"
a
"
)
;
link
.
id
=
"
link
-
to
-
xpi
-
file
"
;
link
.
setAttribute
(
"
href
"
xpiURL
)
;
link
.
textContent
=
"
Link
to
XPI
File
"
;
document
.
body
.
innerHTML
=
"
"
;
document
.
body
.
appendChild
(
link
)
;
}
{
expectInstall
:
true
clickLink
:
true
}
)
;
}
)
;
add_task
(
async
function
testSuccessOnJSWithUserActivation
(
)
{
await
runTestCase
(
[
XPI_URL
]
xpiURL
=
>
{
const
{
document
}
=
this
.
content
;
const
link
=
document
.
createElement
(
"
a
"
)
;
link
.
id
=
"
link
-
to
-
xpi
-
file
"
;
link
.
setAttribute
(
"
href
"
"
#
"
)
;
link
.
textContent
=
"
Link
to
XPI
File
"
;
document
.
body
.
innerHTML
=
"
"
;
document
.
body
.
appendChild
(
link
)
;
this
.
content
.
eval
(
const
linkEl
=
document
.
querySelector
(
"
#
link
-
to
-
xpi
-
file
"
)
;
linkEl
.
onclick
=
(
)
=
>
{
/
/
This
is
expected
to
trigger
the
install
flow
successfully
if
handling
/
/
a
user
gesture
DOM
event
but
to
fail
when
triggered
outside
of
it
(
as
/
/
done
a
few
line
below
)
.
window
.
location
=
"
{
xpiURL
}
"
;
}
;
)
;
}
{
expectInstall
:
true
clickLink
:
true
}
)
;
}
)
;
add_task
(
async
function
testFailureOnJSWithoutUserActivation
(
)
{
await
runTestCase
(
[
XPI_URL
]
xpiURL
=
>
{
this
.
content
.
eval
(
window
.
location
=
"
{
xpiURL
}
"
;
)
;
}
{
expectInstall
:
false
}
)
;
}
)
;
add_task
(
async
function
testFailureOnJSWithoutUserActivation
(
)
{
await
runTestCase
(
[
XPI_URL
]
xpiURL
=
>
{
this
.
content
.
eval
(
const
frame
=
document
.
createElement
(
"
iframe
"
)
;
frame
.
src
=
"
{
xpiURL
}
"
;
document
.
body
.
innerHTML
=
"
"
;
document
.
body
.
appendChild
(
frame
)
;
)
;
}
{
expectInstall
:
false
}
)
;
}
)
;
