"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AddonManagerTesting
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
var
AddonManagerTesting
=
{
getAddonById
(
id
)
{
return
AddonManager
.
getAddonByID
(
id
)
;
}
uninstallAddonByID
(
id
)
{
return
new
Promise
(
async
(
resolve
reject
)
=
>
{
let
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
if
(
!
addon
)
{
reject
(
new
Error
(
"
Add
-
on
is
not
known
:
"
+
id
)
)
;
return
;
}
let
listener
=
{
onUninstalling
(
addon
needsRestart
)
{
if
(
addon
.
id
!
=
id
)
{
return
;
}
if
(
needsRestart
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
true
)
;
}
}
onUninstalled
(
addon
)
{
if
(
addon
.
id
!
=
id
)
{
return
;
}
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
false
)
;
}
onOperationCancelled
(
addon
)
{
if
(
addon
.
id
!
=
id
)
{
return
;
}
AddonManager
.
removeAddonListener
(
listener
)
;
reject
(
new
Error
(
"
Uninstall
cancelled
.
"
)
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
addon
.
uninstall
(
)
;
}
)
;
}
installXPIFromURL
(
url
hash
name
iconURL
version
)
{
return
new
Promise
(
async
(
resolve
reject
)
=
>
{
let
install
=
await
AddonManager
.
getInstallForURL
(
url
"
application
/
x
-
xpinstall
"
hash
name
iconURL
version
)
;
let
fail
=
(
)
=
>
{
reject
(
new
Error
(
"
Add
-
on
install
failed
.
"
)
)
;
}
;
let
listener
=
{
onDownloadCancelled
:
fail
onDownloadFailed
:
fail
onInstallCancelled
:
fail
onInstallFailed
:
fail
onInstallEnded
(
install
addon
)
{
resolve
(
addon
)
;
}
}
;
install
.
addListener
(
listener
)
;
install
.
install
(
)
;
}
)
;
}
}
;
