"
use
strict
"
;
const
XPI_CONTENT_TYPE
=
"
application
/
x
-
xpinstall
"
;
const
MSG_INSTALL_ADDON
=
"
WebInstallerInstallAddonFromWebpage
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
amContentHandler
(
)
{
}
amContentHandler
.
prototype
=
{
handleContent
(
aMimetype
aContext
aRequest
)
{
if
(
aMimetype
!
=
XPI_CONTENT_TYPE
)
throw
Cr
.
NS_ERROR_WONT_HANDLE_CONTENT
;
if
(
!
(
aRequest
instanceof
Ci
.
nsIChannel
)
)
throw
Cr
.
NS_ERROR_WONT_HANDLE_CONTENT
;
let
uri
=
aRequest
.
URI
;
let
window
=
null
;
let
callbacks
=
aRequest
.
notificationCallbacks
?
aRequest
.
notificationCallbacks
:
aRequest
.
loadGroup
.
notificationCallbacks
;
if
(
callbacks
)
window
=
callbacks
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
aRequest
.
cancel
(
Cr
.
NS_BINDING_ABORTED
)
;
let
install
=
{
uri
:
uri
.
spec
hash
:
null
name
:
null
icon
:
null
mimetype
:
XPI_CONTENT_TYPE
triggeringPrincipal
:
aRequest
.
loadInfo
.
triggeringPrincipal
callbackID
:
-
1
}
;
if
(
Services
.
appinfo
.
processType
=
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
)
{
let
element
=
window
.
frameElement
;
let
ssm
=
Services
.
scriptSecurityManager
;
while
(
element
&
&
!
ssm
.
isSystemPrincipal
(
element
.
ownerDocument
.
nodePrincipal
)
)
element
=
element
.
ownerGlobal
.
frameElement
;
if
(
element
)
{
let
listener
=
Cc
[
"
mozilla
.
org
/
addons
/
integration
;
1
"
]
.
getService
(
)
;
listener
.
wrappedJSObject
.
receiveMessage
(
{
name
:
MSG_INSTALL_ADDON
target
:
element
data
:
install
}
)
;
return
;
}
}
let
messageManager
=
window
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
messageManager
.
sendAsyncMessage
(
MSG_INSTALL_ADDON
install
)
;
}
classID
:
Components
.
ID
(
"
{
7beb3ba8
-
6ec3
-
41b4
-
b67c
-
da89b8518922
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIContentHandler
]
)
log
(
aMsg
)
{
let
msg
=
"
amContentHandler
.
js
:
"
+
(
aMsg
.
join
?
aMsg
.
join
(
"
"
)
:
aMsg
)
;
Services
.
console
.
logStringMessage
(
msg
)
;
dump
(
msg
+
"
\
n
"
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
amContentHandler
]
)
;
