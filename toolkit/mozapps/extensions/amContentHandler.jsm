"
use
strict
"
;
const
XPI_CONTENT_TYPE
=
"
application
/
x
-
xpinstall
"
;
const
MSG_INSTALL_ADDON
=
"
WebInstallerInstallAddonFromWebpage
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyServiceGetters
(
lazy
{
ThirdPartyUtil
:
[
"
mozilla
.
org
/
thirdpartyutil
;
1
"
"
mozIThirdPartyUtil
"
]
}
)
;
function
amContentHandler
(
)
{
}
amContentHandler
.
prototype
=
{
handleContent
(
aMimetype
aContext
aRequest
)
{
if
(
aMimetype
!
=
XPI_CONTENT_TYPE
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_WONT_HANDLE_CONTENT
)
;
}
if
(
!
(
aRequest
instanceof
Ci
.
nsIChannel
)
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_WONT_HANDLE_CONTENT
)
;
}
let
uri
=
aRequest
.
URI
;
if
(
!
aRequest
.
loadInfo
.
hasValidUserGestureActivation
&
&
Services
.
prefs
.
getBoolPref
(
"
xpinstall
.
userActivation
.
required
"
true
)
)
{
const
error
=
Components
.
Exception
(
{
uri
.
spec
}
install
cancelled
because
of
missing
user
gesture
activation
Cr
.
NS_ERROR_WONT_HANDLE_CONTENT
)
;
Cu
.
reportError
(
error
)
;
throw
error
;
}
aRequest
.
cancel
(
Cr
.
NS_BINDING_ABORTED
)
;
let
{
loadInfo
}
=
aRequest
;
const
{
triggeringPrincipal
}
=
loadInfo
;
let
browsingContext
=
loadInfo
.
targetBrowsingContext
;
let
sourceHost
;
let
sourceURL
;
try
{
sourceURL
=
triggeringPrincipal
.
spec
!
=
"
"
?
triggeringPrincipal
.
spec
:
undefined
;
sourceHost
=
triggeringPrincipal
.
host
;
}
catch
(
error
)
{
}
let
install
=
{
uri
:
uri
.
spec
hash
:
null
name
:
null
icon
:
null
mimetype
:
XPI_CONTENT_TYPE
triggeringPrincipal
callbackID
:
-
1
method
:
"
link
"
sourceHost
sourceURL
browsingContext
hasCrossOriginAncestor
:
lazy
.
ThirdPartyUtil
.
isThirdPartyChannel
(
aRequest
)
}
;
Services
.
cpmm
.
sendAsyncMessage
(
MSG_INSTALL_ADDON
install
)
;
}
classID
:
Components
.
ID
(
"
{
7beb3ba8
-
6ec3
-
41b4
-
b67c
-
da89b8518922
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIContentHandler
"
]
)
log
(
aMsg
)
{
let
msg
=
"
amContentHandler
.
js
:
"
+
(
aMsg
.
join
?
aMsg
.
join
(
"
"
)
:
aMsg
)
;
Services
.
console
.
logStringMessage
(
msg
)
;
dump
(
msg
+
"
\
n
"
)
;
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
amContentHandler
"
]
;
