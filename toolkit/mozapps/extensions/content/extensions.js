"
use
strict
"
;
const
{
AddonManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AMTelemetry
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
var
gViewDefault
=
"
addons
:
/
/
discover
/
"
;
document
.
addEventListener
(
"
load
"
initialize
true
)
;
window
.
addEventListener
(
"
unload
"
shutdown
)
;
var
gPendingInitializations
=
1
;
Object
.
defineProperty
(
this
"
gIsInitializing
"
{
get
:
(
)
=
>
gPendingInitializations
>
0
}
)
;
function
initialize
(
event
)
{
document
.
removeEventListener
(
"
load
"
initialize
true
)
;
if
(
!
isDiscoverEnabled
(
)
)
{
gViewDefault
=
"
addons
:
/
/
list
/
extension
"
;
}
document
.
addEventListener
(
"
keypress
"
e
=
>
{
getHtmlBrowser
(
)
.
contentDocument
.
querySelector
(
"
search
-
addons
"
)
.
handleEvent
(
e
)
;
}
)
;
gViewController
.
initialize
(
)
;
Services
.
obs
.
addObserver
(
sendEMPong
"
EM
-
ping
"
)
;
Services
.
obs
.
notifyObservers
(
window
"
EM
-
loaded
"
)
;
if
(
gViewController
.
initialViewSelected
)
{
return
;
}
if
(
window
.
history
.
state
)
{
gViewController
.
updateState
(
window
.
history
.
state
)
;
}
}
function
notifyInitialized
(
)
{
if
(
!
gIsInitializing
)
{
return
;
}
gPendingInitializations
-
-
;
if
(
!
gIsInitializing
)
{
var
event
=
document
.
createEvent
(
"
Events
"
)
;
event
.
initEvent
(
"
Initialized
"
true
true
)
;
document
.
dispatchEvent
(
event
)
;
}
}
function
shutdown
(
)
{
gViewController
.
shutdown
(
)
;
Services
.
obs
.
removeObserver
(
sendEMPong
"
EM
-
ping
"
)
;
}
function
sendEMPong
(
aSubject
aTopic
aData
)
{
Services
.
obs
.
notifyObservers
(
window
"
EM
-
pong
"
)
;
}
async
function
recordViewTelemetry
(
param
)
{
let
type
;
let
addon
;
if
(
param
in
AddonManager
.
addonTypes
|
|
[
"
recent
"
"
available
"
]
.
includes
(
param
)
)
{
type
=
param
;
}
else
if
(
param
)
{
let
id
=
param
.
replace
(
"
/
preferences
"
"
"
)
;
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
}
let
{
currentViewId
}
=
gViewController
;
let
viewType
=
gViewController
.
parseViewId
(
currentViewId
)
?
.
type
;
AMTelemetry
.
recordViewEvent
(
{
view
:
viewType
|
|
"
other
"
addon
type
}
)
;
}
function
loadView
(
aViewId
)
{
if
(
!
gViewController
.
initialViewSelected
)
{
gViewController
.
loadInitialView
(
aViewId
)
;
}
else
{
gViewController
.
loadView
(
aViewId
)
;
}
}
var
HTML5History
=
{
get
index
(
)
{
return
window
.
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
sessionHistory
.
index
;
}
get
canGoBack
(
)
{
return
window
.
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
canGoBack
;
}
get
canGoForward
(
)
{
return
window
.
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
canGoForward
;
}
back
(
)
{
window
.
history
.
back
(
)
;
}
forward
(
)
{
window
.
history
.
forward
(
)
;
}
pushState
(
aState
)
{
window
.
history
.
pushState
(
aState
document
.
title
)
;
}
replaceState
(
aState
)
{
window
.
history
.
replaceState
(
aState
document
.
title
)
;
}
popState
(
)
{
function
onStatePopped
(
aEvent
)
{
window
.
removeEventListener
(
"
popstate
"
onStatePopped
true
)
;
window
.
history
.
pushState
(
aEvent
.
state
document
.
title
)
;
}
window
.
addEventListener
(
"
popstate
"
onStatePopped
true
)
;
window
.
history
.
back
(
)
;
}
}
;
var
FakeHistory
=
{
pos
:
0
states
:
[
null
]
get
index
(
)
{
return
this
.
pos
;
}
get
canGoBack
(
)
{
return
this
.
pos
>
0
;
}
get
canGoForward
(
)
{
return
this
.
pos
+
1
<
this
.
states
.
length
;
}
back
(
)
{
if
(
this
.
pos
=
=
0
)
{
throw
Components
.
Exception
(
"
Cannot
go
back
from
this
point
"
)
;
}
this
.
pos
-
-
;
gViewController
.
updateState
(
this
.
states
[
this
.
pos
]
)
;
}
forward
(
)
{
if
(
this
.
pos
+
1
>
=
this
.
states
.
length
)
{
throw
Components
.
Exception
(
"
Cannot
go
forward
from
this
point
"
)
;
}
this
.
pos
+
+
;
gViewController
.
updateState
(
this
.
states
[
this
.
pos
]
)
;
}
pushState
(
aState
)
{
this
.
pos
+
+
;
this
.
states
.
splice
(
this
.
pos
this
.
states
.
length
)
;
this
.
states
.
push
(
aState
)
;
}
replaceState
(
aState
)
{
this
.
states
[
this
.
pos
]
=
aState
;
}
popState
(
)
{
if
(
this
.
pos
=
=
0
)
{
throw
Components
.
Exception
(
"
Cannot
popState
from
this
view
"
)
;
}
this
.
states
.
splice
(
this
.
pos
this
.
states
.
length
)
;
this
.
pos
-
-
;
gViewController
.
updateState
(
this
.
states
[
this
.
pos
]
)
;
}
}
;
if
(
window
.
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
sessionHistory
)
{
var
gHistory
=
HTML5History
;
}
else
{
gHistory
=
FakeHistory
;
}
var
gViewController
=
{
viewPort
:
null
currentViewId
:
"
"
currentViewObj
:
null
currentViewRequest
:
0
nextHistoryEntryId
:
Math
.
floor
(
Math
.
random
(
)
*
2
*
*
32
)
viewObjects
:
{
}
viewChangeCallback
:
null
initialViewSelected
:
false
lastHistoryIndex
:
-
1
initialize
(
)
{
this
.
viewPort
=
document
.
getElementById
(
"
view
-
port
"
)
;
this
.
headeredViews
=
document
.
getElementById
(
"
headered
-
views
"
)
;
this
.
headeredViewsDeck
=
document
.
getElementById
(
"
headered
-
views
-
content
"
)
;
this
.
viewObjects
.
shortcuts
=
htmlView
(
"
shortcuts
"
)
;
this
.
viewObjects
.
list
=
htmlView
(
"
list
"
)
;
this
.
viewObjects
.
detail
=
htmlView
(
"
detail
"
)
;
this
.
viewObjects
.
updates
=
htmlView
(
"
updates
"
)
;
this
.
viewObjects
.
discover
=
htmlView
(
"
discover
"
)
;
for
(
let
type
in
this
.
viewObjects
)
{
let
view
=
this
.
viewObjects
[
type
]
;
view
.
initialize
(
)
;
}
gCategories
.
initialize
(
)
;
window
.
controllers
.
appendController
(
this
)
;
window
.
addEventListener
(
"
popstate
"
function
(
e
)
{
gViewController
.
updateState
(
e
.
state
)
;
}
)
;
}
shutdown
(
)
{
if
(
this
.
currentViewObj
)
{
this
.
currentViewObj
.
hide
(
)
;
}
this
.
currentViewRequest
=
0
;
window
.
controllers
.
removeController
(
this
)
;
}
updateState
(
state
)
{
try
{
this
.
loadViewInternal
(
state
.
view
state
.
previousView
state
)
;
this
.
lastHistoryIndex
=
gHistory
.
index
;
}
catch
(
e
)
{
if
(
this
.
lastHistoryIndex
>
gHistory
.
index
)
{
if
(
gHistory
.
canGoBack
)
{
gHistory
.
back
(
)
;
}
else
{
gViewController
.
replaceView
(
gViewDefault
)
;
}
}
else
if
(
gHistory
.
canGoForward
)
{
gHistory
.
forward
(
)
;
}
else
{
gViewController
.
replaceView
(
gViewDefault
)
;
}
}
}
parseViewId
(
aViewId
)
{
var
matchRegex
=
/
^
addons
:
\
/
\
/
(
[
^
\
/
]
+
)
\
/
(
.
*
)
/
;
var
[
viewType
viewParam
]
=
aViewId
.
match
(
matchRegex
)
|
|
[
]
;
return
{
type
:
viewType
param
:
decodeURIComponent
(
viewParam
)
}
;
}
get
isLoading
(
)
{
return
(
!
this
.
currentViewObj
|
|
this
.
currentViewObj
.
node
.
hasAttribute
(
"
loading
"
)
)
;
}
loadView
(
aViewId
)
{
var
isRefresh
=
false
;
if
(
aViewId
=
=
this
.
currentViewId
)
{
if
(
this
.
isLoading
)
{
return
;
}
if
(
!
(
"
refresh
"
in
this
.
currentViewObj
)
)
{
return
;
}
if
(
!
this
.
currentViewObj
.
canRefresh
(
)
)
{
return
;
}
isRefresh
=
true
;
}
var
state
=
{
view
:
aViewId
previousView
:
this
.
currentViewId
historyEntryId
:
+
+
this
.
nextHistoryEntryId
}
;
if
(
!
isRefresh
)
{
gHistory
.
pushState
(
state
)
;
this
.
lastHistoryIndex
=
gHistory
.
index
;
}
this
.
loadViewInternal
(
aViewId
this
.
currentViewId
state
)
;
}
replaceView
(
aViewId
)
{
if
(
aViewId
=
=
this
.
currentViewId
)
{
return
;
}
var
state
=
{
view
:
aViewId
previousView
:
null
historyEntryId
:
+
+
this
.
nextHistoryEntryId
}
;
gHistory
.
replaceState
(
state
)
;
this
.
loadViewInternal
(
aViewId
null
state
)
;
}
loadInitialView
(
aViewId
)
{
var
state
=
{
view
:
aViewId
previousView
:
null
historyEntryId
:
+
+
this
.
nextHistoryEntryId
}
;
gHistory
.
replaceState
(
state
)
;
this
.
loadViewInternal
(
aViewId
null
state
)
;
notifyInitialized
(
)
;
}
get
displayedView
(
)
{
if
(
this
.
viewPort
.
selectedPanel
=
=
this
.
headeredViews
)
{
return
this
.
headeredViewsDeck
.
selectedPanel
;
}
return
this
.
viewPort
.
selectedPanel
;
}
set
displayedView
(
view
)
{
let
node
=
view
.
node
;
if
(
node
.
parentNode
=
=
this
.
headeredViewsDeck
)
{
this
.
headeredViewsDeck
.
selectedPanel
=
node
;
this
.
viewPort
.
selectedPanel
=
this
.
headeredViews
;
}
else
{
this
.
viewPort
.
selectedPanel
=
node
;
}
}
loadViewInternal
(
aViewId
aPreviousView
aState
aEvent
)
{
var
view
=
this
.
parseViewId
(
aViewId
)
;
if
(
!
view
.
type
|
|
!
(
view
.
type
in
this
.
viewObjects
)
)
{
throw
Components
.
Exception
(
"
Invalid
view
:
"
+
view
.
type
)
;
}
var
viewObj
=
this
.
viewObjects
[
view
.
type
]
;
if
(
!
viewObj
.
node
)
{
throw
Components
.
Exception
(
"
Root
node
doesn
'
t
exist
for
'
"
+
view
.
type
+
"
'
view
"
)
;
}
if
(
this
.
currentViewObj
&
&
aViewId
!
=
aPreviousView
)
{
try
{
let
canHide
=
this
.
currentViewObj
.
hide
(
)
;
if
(
canHide
=
=
=
false
)
{
return
;
}
this
.
displayedView
.
removeAttribute
(
"
loading
"
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
this
.
currentViewId
=
aViewId
;
this
.
currentViewObj
=
viewObj
;
this
.
displayedView
=
this
.
currentViewObj
;
this
.
currentViewObj
.
node
.
setAttribute
(
"
loading
"
"
true
"
)
;
recordViewTelemetry
(
view
.
param
)
;
if
(
aViewId
=
=
aPreviousView
)
{
this
.
currentViewObj
.
refresh
(
view
.
param
+
+
this
.
currentViewRequest
aState
)
;
}
else
{
this
.
currentViewObj
.
show
(
view
.
param
+
+
this
.
currentViewRequest
aState
)
;
}
this
.
initialViewSelected
=
true
;
}
popState
(
aCallback
)
{
this
.
viewChangeCallback
=
aCallback
;
gHistory
.
popState
(
)
;
}
notifyViewChanged
(
)
{
this
.
displayedView
.
removeAttribute
(
"
loading
"
)
;
if
(
this
.
viewChangeCallback
)
{
this
.
viewChangeCallback
(
)
;
this
.
viewChangeCallback
=
null
;
}
var
event
=
document
.
createEvent
(
"
Events
"
)
;
event
.
initEvent
(
"
ViewChanged
"
true
true
)
;
this
.
currentViewObj
.
node
.
dispatchEvent
(
event
)
;
}
onEvent
(
)
{
}
}
;
var
gCategories
=
{
initialize
(
)
{
gPendingInitializations
+
+
;
promiseHtmlBrowserLoaded
(
)
.
then
(
async
browser
=
>
{
await
browser
.
contentWindow
.
customElements
.
whenDefined
(
"
categories
-
box
"
)
;
let
categoriesBox
=
browser
.
contentDocument
.
getElementById
(
"
categories
"
)
;
await
categoriesBox
.
promiseInitialized
;
notifyInitialized
(
)
;
}
)
;
}
}
;
const
htmlViewOpts
=
{
loadViewFn
(
view
)
{
let
viewId
=
view
.
startsWith
(
"
addons
:
/
/
"
)
?
view
:
addons
:
/
/
{
view
}
;
gViewController
.
loadView
(
viewId
)
;
}
loadInitialViewFn
(
viewId
)
{
gViewController
.
loadInitialView
(
viewId
)
;
}
replaceWithDefaultViewFn
(
)
{
gViewController
.
replaceView
(
gViewDefault
)
;
}
get
shouldLoadInitialView
(
)
{
return
!
gViewController
.
currentViewId
&
&
!
window
.
history
.
state
;
}
}
;
let
htmlBrowser
;
let
_htmlBrowserLoaded
;
function
getHtmlBrowser
(
)
{
if
(
!
htmlBrowser
)
{
gPendingInitializations
+
+
;
htmlBrowser
=
document
.
getElementById
(
"
html
-
view
-
browser
"
)
;
htmlBrowser
.
loadURI
(
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
aboutaddons
.
html
"
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
_htmlBrowserLoaded
=
new
Promise
(
resolve
=
>
htmlBrowser
.
addEventListener
(
"
load
"
function
loadListener
(
)
{
if
(
htmlBrowser
.
contentWindow
.
location
.
href
!
=
"
about
:
blank
"
)
{
htmlBrowser
.
removeEventListener
(
"
load
"
loadListener
)
;
resolve
(
)
;
}
}
)
)
.
then
(
(
)
=
>
{
htmlBrowser
.
contentWindow
.
initialize
(
htmlViewOpts
)
;
notifyInitialized
(
)
;
}
)
;
}
return
htmlBrowser
;
}
async
function
promiseHtmlBrowserLoaded
(
)
{
let
browser
=
getHtmlBrowser
(
)
;
await
_htmlBrowserLoaded
;
return
browser
;
}
function
htmlView
(
type
)
{
return
{
_browser
:
null
node
:
null
initialize
(
)
{
this
.
_browser
=
getHtmlBrowser
(
)
;
this
.
node
=
this
.
_browser
.
closest
(
"
#
html
-
view
"
)
;
}
async
show
(
param
request
state
)
{
await
promiseHtmlBrowserLoaded
(
)
;
await
this
.
_browser
.
contentWindow
.
show
(
type
param
state
)
;
gViewController
.
notifyViewChanged
(
)
;
}
async
hide
(
)
{
await
promiseHtmlBrowserLoaded
(
)
;
return
this
.
_browser
.
contentWindow
.
hide
(
)
;
}
getSelectedAddon
(
)
{
return
null
;
}
}
;
}
window
.
openAbuseReport
=
(
{
addonId
reportEntryPoint
}
)
=
>
{
promiseHtmlBrowserLoaded
(
)
.
then
(
browser
=
>
{
browser
.
contentWindow
.
openAbuseReport
(
{
addonId
reportEntryPoint
}
)
;
}
)
;
}
;
