"
use
strict
"
;
class
NamedDeckButton
extends
HTMLElement
{
constructor
(
)
{
super
(
)
;
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
;
let
style
=
document
.
createElement
(
"
style
"
)
;
style
.
textContent
=
button
{
-
moz
-
appearance
:
none
;
border
:
none
;
border
-
top
:
2px
solid
transparent
;
border
-
bottom
:
2px
solid
transparent
;
background
:
white
;
font
-
size
:
14px
;
line
-
height
:
20px
;
padding
:
4px
16px
;
color
:
var
(
-
-
grey
-
90
)
;
}
button
:
hover
{
background
-
color
:
var
(
-
-
grey
-
90
-
a10
)
;
border
-
top
-
color
:
var
(
-
-
grey
-
90
-
a20
)
;
}
button
:
hover
:
active
{
background
-
color
:
var
(
-
-
grey
-
90
-
a20
)
;
}
:
host
(
[
selected
]
)
button
{
border
-
top
-
color
:
var
(
-
-
blue
-
60
)
;
color
:
var
(
-
-
blue
-
60
)
;
}
;
this
.
shadowRoot
.
appendChild
(
style
)
;
let
button
=
document
.
createElement
(
"
button
"
)
;
button
.
appendChild
(
document
.
createElement
(
"
slot
"
)
)
;
this
.
shadowRoot
.
appendChild
(
button
)
;
this
.
addEventListener
(
"
click
"
this
)
;
}
connectedCallback
(
)
{
this
.
setSelectedFromDeck
(
)
;
document
.
addEventListener
(
"
view
-
changed
"
this
{
capture
:
true
}
)
;
}
disconnectedCallback
(
)
{
document
.
removeEventListener
(
"
view
-
changed
"
this
{
capture
:
true
}
)
;
}
get
deckId
(
)
{
return
this
.
getAttribute
(
"
deck
"
)
;
}
set
deckId
(
val
)
{
this
.
setAttribute
(
"
deck
"
val
)
;
}
get
deck
(
)
{
return
document
.
getElementById
(
this
.
deckId
)
;
}
handleEvent
(
e
)
{
if
(
e
.
type
=
=
"
view
-
changed
"
&
&
e
.
target
.
id
=
=
this
.
deckId
)
{
this
.
setSelectedFromDeck
(
)
;
}
else
if
(
e
.
type
=
=
"
click
"
)
{
let
{
deck
}
=
this
;
if
(
deck
)
{
deck
.
selectedViewName
=
this
.
name
;
}
}
}
get
name
(
)
{
return
this
.
getAttribute
(
"
name
"
)
;
}
get
selected
(
)
{
return
this
.
hasAttribute
(
"
selected
"
)
;
}
set
selected
(
val
)
{
this
.
toggleAttribute
(
"
selected
"
!
!
val
)
;
}
setSelectedFromDeck
(
)
{
let
{
deck
}
=
this
;
this
.
selected
=
deck
&
&
deck
.
selectedViewName
=
=
this
.
name
;
}
}
customElements
.
define
(
"
named
-
deck
-
button
"
NamedDeckButton
)
;
class
NamedDeck
extends
HTMLElement
{
static
get
observedAttributes
(
)
{
return
[
"
selected
-
view
"
]
;
}
constructor
(
)
{
super
(
)
;
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
;
let
selectedSlot
=
document
.
createElement
(
"
slot
"
)
;
selectedSlot
.
setAttribute
(
"
name
"
"
selected
"
)
;
this
.
shadowRoot
.
appendChild
(
selectedSlot
)
;
this
.
observer
=
new
MutationObserver
(
(
)
=
>
{
this
.
_setSelectedViewAttributes
(
)
;
}
)
;
}
connectedCallback
(
)
{
if
(
this
.
selectedViewName
)
{
this
.
_setSelectedViewAttributes
(
)
;
}
else
{
let
firstView
=
this
.
firstElementChild
;
if
(
firstView
)
{
this
.
selectedViewName
=
firstView
.
getAttribute
(
"
name
"
)
;
}
}
this
.
observer
.
observe
(
this
{
childList
:
true
}
)
;
}
disconnectedCallback
(
)
{
this
.
observer
.
disconnect
(
)
;
}
attributeChangedCallback
(
attr
oldVal
newVal
)
{
if
(
attr
=
=
"
selected
-
view
"
&
&
oldVal
!
=
newVal
)
{
this
.
_setSelectedViewAttributes
(
)
;
this
.
dispatchEvent
(
new
CustomEvent
(
"
view
-
changed
"
)
)
;
}
}
get
selectedViewName
(
)
{
return
this
.
getAttribute
(
"
selected
-
view
"
)
;
}
set
selectedViewName
(
name
)
{
this
.
setAttribute
(
"
selected
-
view
"
name
)
;
}
_setSelectedViewAttributes
(
)
{
let
{
selectedViewName
}
=
this
;
for
(
let
view
of
this
.
children
)
{
if
(
view
.
getAttribute
(
"
name
"
)
=
=
selectedViewName
)
{
view
.
slot
=
"
selected
"
;
}
else
{
view
.
slot
=
"
"
;
}
}
}
}
customElements
.
define
(
"
named
-
deck
"
NamedDeck
)
;
