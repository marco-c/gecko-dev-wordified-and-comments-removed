"
use
strict
"
;
{
const
ABUSE_REPORT_ENABLED
=
Services
.
prefs
.
getBoolPref
(
"
extensions
.
abuseReport
.
enabled
"
false
)
;
const
ABUSE_REPORT_FRAME_URL
=
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
abuse
-
report
-
frame
.
html
"
;
const
fm
=
Services
.
focus
;
const
{
AbuseReporter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AbuseReporter
.
jsm
"
)
;
class
AddonAbuseReportsXULFrame
extends
MozXULElement
{
constructor
(
)
{
super
(
)
;
this
.
report
=
null
;
this
.
browserLoadURI
=
false
;
}
connectedCallback
(
)
{
this
.
textContent
=
"
"
;
const
content
=
MozXULElement
.
parseXULToFragment
(
<
browser
id
=
"
abuse
-
report
-
xulframe
-
overlay
-
inner
"
type
=
"
content
"
disablehistory
=
"
true
"
transparent
=
"
true
"
flex
=
"
1
"
>
<
/
browser
>
)
;
this
.
appendChild
(
content
)
;
const
browser
=
this
.
querySelector
(
"
browser
"
)
;
this
.
promiseBrowserLoaded
=
new
Promise
(
resolve
=
>
{
browser
.
addEventListener
(
"
load
"
(
)
=
>
resolve
(
browser
)
{
once
:
true
}
)
;
}
)
;
document
.
addEventListener
(
"
focus
"
this
)
;
this
.
promiseHtmlAboutAddons
.
then
(
win
=
>
{
win
.
document
.
addEventListener
(
"
abuse
-
report
:
new
"
this
)
;
}
)
;
this
.
update
(
)
;
}
disconnectedCallback
(
)
{
this
.
textContent
=
"
"
;
this
.
browserLoadURI
=
false
;
this
.
promiseBrowserLoaded
=
null
;
this
.
report
=
null
;
document
.
removeEventListener
(
"
focus
"
this
)
;
this
.
promiseHtmlAboutAddons
.
then
(
win
=
>
{
win
.
document
.
removeEventListener
(
"
abuse
-
report
:
new
"
this
)
;
}
)
;
}
handleEvent
(
evt
)
{
switch
(
evt
.
type
)
{
case
"
focus
"
:
this
.
focus
(
)
;
break
;
case
"
abuse
-
report
:
new
"
:
this
.
openReport
(
evt
.
detail
)
;
this
.
forwardEvent
(
evt
)
;
break
;
case
"
abuse
-
report
:
cancel
"
:
this
.
cancelReport
(
)
;
this
.
forwardEvent
(
evt
)
;
break
;
case
"
abuse
-
report
:
submit
"
:
this
.
onSubmitReport
(
evt
)
;
this
.
forwardEvent
(
evt
)
;
break
;
case
"
abuse
-
report
:
updated
"
:
this
.
forwardEvent
(
evt
)
;
break
;
}
}
forwardEvent
(
evt
)
{
this
.
dispatchEvent
(
new
CustomEvent
(
evt
.
type
{
detail
:
evt
.
detail
}
)
)
;
}
async
openReport
(
{
addonId
reportEntryPoint
}
)
{
if
(
this
.
report
)
{
throw
new
Error
(
"
Ignoring
new
abuse
report
request
.
AbuseReport
panel
already
open
"
)
;
}
else
{
try
{
this
.
report
=
await
AbuseReporter
.
createAbuseReport
(
addonId
{
reportEntryPoint
}
)
;
this
.
update
(
)
;
}
catch
(
err
)
{
console
.
error
(
"
Error
creating
abuse
report
for
"
addonId
err
)
;
const
win
=
await
this
.
promiseHtmlAboutAddons
;
win
.
document
.
dispatchEvent
(
new
CustomEvent
(
"
abuse
-
report
:
create
-
error
"
{
detail
:
{
addonId
addon
:
err
.
addon
errorType
:
err
.
errorType
}
}
)
)
;
}
}
}
cancelReport
(
)
{
if
(
this
.
report
)
{
this
.
report
.
abort
(
)
;
this
.
report
=
null
;
this
.
update
(
)
;
}
}
async
onSubmitReport
(
evt
)
{
if
(
this
.
report
)
{
this
.
report
=
null
;
this
.
update
(
)
;
const
win
=
await
this
.
promiseHtmlAboutAddons
;
win
.
document
.
dispatchEvent
(
evt
)
;
}
}
focus
(
)
{
if
(
this
.
hasAddonId
)
{
this
.
promiseAbuseReport
.
then
(
abuseReport
=
>
{
abuseReport
.
focus
(
)
;
}
)
;
}
}
async
update
(
)
{
const
{
report
}
=
this
;
if
(
report
&
&
report
.
addon
&
&
!
report
.
errorType
)
{
const
{
addon
reportEntryPoint
}
=
this
.
report
;
this
.
addonId
=
addon
.
id
;
this
.
reportEntryPoint
=
reportEntryPoint
;
this
.
promiseAbuseReport
.
then
(
abuseReport
=
>
{
this
.
hidden
=
false
;
abuseReport
.
addEventListener
(
"
abuse
-
report
:
updated
"
this
{
once
:
true
}
)
;
abuseReport
.
addEventListener
(
"
abuse
-
report
:
submit
"
this
{
once
:
true
}
)
;
abuseReport
.
addEventListener
(
"
abuse
-
report
:
cancel
"
this
{
once
:
true
}
)
;
abuseReport
.
setAbuseReport
(
report
)
;
this
.
aboutAddonsContent
.
setAttribute
(
"
aria
-
hidden
"
true
)
;
this
.
focus
(
)
;
this
.
dispatchEvent
(
new
CustomEvent
(
"
abuse
-
report
:
frame
-
shown
"
)
)
;
}
)
;
}
else
{
this
.
hidden
=
true
;
this
.
removeAttribute
(
"
addon
-
id
"
)
;
this
.
removeAttribute
(
"
report
-
entry
-
point
"
)
;
this
.
aboutAddonsContent
.
setAttribute
(
"
aria
-
hidden
"
false
)
;
fm
.
moveFocus
(
window
null
fm
.
MOVEFOCUS_ROOT
fm
.
FLAG_BYKEY
)
;
this
.
promiseAbuseReport
.
then
(
abuseReport
=
>
{
abuseReport
.
removeEventListener
(
"
abuse
-
report
:
updated
"
this
{
once
:
true
}
)
;
abuseReport
.
removeEventListener
(
"
abuse
-
report
:
submit
"
this
{
once
:
true
}
)
;
abuseReport
.
removeEventListener
(
"
abuse
-
report
:
cancel
"
this
{
once
:
true
}
)
;
abuseReport
.
setAbuseReport
(
null
)
;
}
err
=
>
{
console
.
error
(
"
promiseAbuseReport
rejected
"
err
)
;
}
)
.
then
(
(
)
=
>
{
this
.
dispatchEvent
(
new
CustomEvent
(
"
abuse
-
report
:
frame
-
hidden
"
)
)
;
}
)
;
}
}
get
aboutAddonsContent
(
)
{
return
document
.
getElementById
(
"
main
-
page
-
content
"
)
;
}
get
promiseAbuseReport
(
)
{
if
(
!
this
.
browserLoadURI
)
{
const
browser
=
this
.
querySelector
(
"
browser
"
)
;
browser
.
loadURI
(
ABUSE_REPORT_FRAME_URL
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
this
.
browserLoadURI
=
true
;
}
return
this
.
promiseBrowserLoaded
.
then
(
browser
=
>
{
return
browser
.
contentDocument
.
querySelector
(
"
addon
-
abuse
-
report
"
)
;
}
)
;
}
get
promiseHtmlAboutAddons
(
)
{
return
promiseHtmlBrowserLoaded
(
)
.
then
(
browser
=
>
{
return
browser
.
contentWindow
;
}
)
;
}
get
hasAddonId
(
)
{
return
!
!
this
.
addonId
;
}
get
addonId
(
)
{
return
this
.
getAttribute
(
"
addon
-
id
"
)
;
}
set
addonId
(
value
)
{
this
.
setAttribute
(
"
addon
-
id
"
value
)
;
}
get
reportEntryPoint
(
)
{
return
this
.
getAttribute
(
"
report
-
entry
-
point
"
)
;
}
set
reportEntryPoint
(
value
)
{
this
.
setAttribute
(
"
report
-
entry
-
point
"
value
)
;
}
}
if
(
ABUSE_REPORT_ENABLED
)
{
customElements
.
define
(
"
addon
-
abuse
-
report
-
xulframe
"
AddonAbuseReportsXULFrame
)
;
}
window
.
openAbuseReport
=
(
{
addonId
reportEntryPoint
}
)
=
>
{
if
(
AbuseReporter
.
openDialogDisabled
)
{
const
frame
=
document
.
querySelector
(
"
addon
-
abuse
-
report
-
xulframe
"
)
;
frame
.
openReport
(
{
addonId
reportEntryPoint
}
)
;
return
;
}
promiseHtmlBrowserLoaded
(
)
.
then
(
browser
=
>
{
browser
.
contentWindow
.
openAbuseReport
(
{
addonId
reportEntryPoint
}
)
;
}
)
;
}
;
}
