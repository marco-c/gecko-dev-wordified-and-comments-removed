"
use
strict
"
;
var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
WEBEXT_PERMISSION_PROMPTS
"
"
extensions
.
webextPermissionPrompts
"
false
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Extension
"
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
function
getBrowserElement
(
)
{
return
window
.
docShell
.
chromeEventHandler
;
}
function
attachUpdateHandler
(
install
)
{
if
(
!
WEBEXT_PERMISSION_PROMPTS
)
{
return
;
}
install
.
promptHandler
=
(
info
)
=
>
{
let
oldPerms
=
info
.
existingAddon
.
userPermissions
;
if
(
!
oldPerms
)
{
return
Promise
.
resolve
(
)
;
}
let
newPerms
=
info
.
addon
.
userPermissions
;
let
difference
=
Extension
.
comparePermissions
(
oldPerms
newPerms
)
;
if
(
difference
.
origins
.
length
=
=
0
&
&
difference
.
permissions
.
length
=
=
0
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
subject
=
{
wrappedJSObject
:
{
target
:
getBrowserElement
(
)
info
:
{
type
:
"
update
"
addon
:
info
.
addon
icon
:
info
.
addon
.
icon
install
permissions
:
difference
resolve
reject
}
}
}
;
Services
.
obs
.
notifyObservers
(
subject
"
webextension
-
permission
-
prompt
"
)
;
}
)
;
}
;
}
async
function
loadReleaseNotes
(
uri
)
{
const
res
=
await
fetch
(
uri
.
spec
{
credentials
:
"
omit
"
}
)
;
if
(
!
res
.
ok
)
{
throw
new
Error
(
"
Error
loading
release
notes
"
)
;
}
const
text
=
await
res
.
text
(
)
;
const
ParserUtils
=
Cc
[
"
mozilla
.
org
/
parserutils
;
1
"
]
.
getService
(
Ci
.
nsIParserUtils
)
;
const
flags
=
ParserUtils
.
SanitizerDropMedia
|
ParserUtils
.
SanitizerDropNonCSSPresentation
|
ParserUtils
.
SanitizerDropForms
;
const
context
=
document
.
createElement
(
"
div
"
)
;
return
ParserUtils
.
parseFragment
(
text
flags
false
uri
context
)
;
}
function
openOptionsInTab
(
optionsURL
)
{
let
mainWindow
=
window
.
windowRoot
.
ownerGlobal
;
if
(
"
switchToTabHavingURI
"
in
mainWindow
)
{
mainWindow
.
switchToTabHavingURI
(
optionsURL
true
{
relatedToCurrent
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
return
true
;
}
return
false
;
}
