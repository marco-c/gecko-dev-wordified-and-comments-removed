"
use
strict
"
;
const
{
AddonManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AMTelemetry
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
async
function
recordViewTelemetry
(
param
)
{
let
type
;
let
addon
;
if
(
param
in
AddonManager
.
addonTypes
|
|
[
"
recent
"
"
available
"
]
.
includes
(
param
)
)
{
type
=
param
;
}
else
if
(
param
)
{
let
id
=
param
.
replace
(
"
/
preferences
"
"
"
)
;
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
}
let
{
currentViewId
}
=
gViewController
;
let
viewType
=
gViewController
.
parseViewId
(
currentViewId
)
?
.
type
;
AMTelemetry
.
recordViewEvent
(
{
view
:
viewType
|
|
"
other
"
addon
type
}
)
;
}
function
loadView
(
viewId
)
{
gViewController
.
loadView
(
viewId
)
;
}
var
gViewController
=
{
currentViewId
:
null
get
defaultViewId
(
)
{
if
(
!
isDiscoverEnabled
(
)
)
{
return
"
addons
:
/
/
list
/
extension
"
;
}
return
"
addons
:
/
/
discover
/
"
;
}
isLoading
:
true
nextHistoryEntryId
:
Math
.
floor
(
Math
.
random
(
)
*
2
*
*
32
)
views
:
{
}
initialize
(
container
)
{
this
.
container
=
container
;
window
.
addEventListener
(
"
popstate
"
e
=
>
{
this
.
renderState
(
e
.
state
)
;
}
)
;
}
defineView
(
viewName
renderFunction
)
{
this
.
views
[
viewName
]
=
renderFunction
;
}
parseViewId
(
viewId
)
{
const
matchRegex
=
/
^
addons
:
\
/
\
/
(
[
^
\
/
]
+
)
\
/
(
.
*
)
/
;
const
[
viewType
viewParam
]
=
viewId
.
match
(
matchRegex
)
|
|
[
]
;
return
{
type
:
viewType
param
:
decodeURIComponent
(
viewParam
)
}
;
}
loadView
(
viewId
replace
=
false
)
{
viewId
=
viewId
.
startsWith
(
"
addons
:
/
/
"
)
?
viewId
:
addons
:
/
/
{
viewId
}
;
if
(
viewId
=
=
this
.
currentViewId
)
{
return
Promise
.
resolve
(
)
;
}
replace
=
replace
|
|
!
this
.
currentViewId
;
const
state
=
{
view
:
viewId
previousView
:
replace
?
null
:
this
.
currentViewId
historyEntryId
:
+
+
this
.
nextHistoryEntryId
}
;
if
(
replace
)
{
history
.
replaceState
(
state
"
"
)
;
}
else
{
history
.
pushState
(
state
"
"
)
;
}
return
this
.
renderState
(
state
)
;
}
async
renderState
(
state
)
{
let
{
param
type
}
=
this
.
parseViewId
(
state
.
view
)
;
if
(
!
type
|
|
!
this
.
views
.
hasOwnProperty
(
type
)
)
{
console
.
warn
(
No
view
for
{
type
}
{
param
}
switching
to
default
)
;
this
.
resetState
(
)
;
return
;
}
this
.
currentViewId
=
state
.
view
;
this
.
isLoading
=
true
;
recordViewTelemetry
(
param
)
;
document
.
dispatchEvent
(
new
CustomEvent
(
"
view
-
selected
"
{
detail
:
{
id
:
state
.
view
param
type
}
}
)
)
;
this
.
container
.
setAttribute
(
"
current
-
view
"
type
)
;
let
fragment
=
await
this
.
views
[
type
]
(
param
)
;
if
(
fragment
)
{
ScrollOffsets
.
save
(
)
;
ScrollOffsets
.
setView
(
state
.
historyEntryId
)
;
this
.
container
.
textContent
=
"
"
;
this
.
container
.
append
(
fragment
)
;
await
new
Promise
(
resolve
=
>
{
window
.
requestAnimationFrame
(
(
)
=
>
{
ScrollOffsets
.
restore
(
)
;
resolve
(
)
;
}
)
;
}
)
;
}
else
{
this
.
resetState
(
)
;
return
;
}
this
.
isLoading
=
false
;
document
.
dispatchEvent
(
new
CustomEvent
(
"
ViewChanged
"
)
)
;
}
resetState
(
)
{
return
this
.
loadView
(
this
.
defaultViewId
true
)
;
}
}
;
