"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
}
)
;
const
PLUGIN_ICON_URL
=
"
chrome
:
/
/
global
/
skin
/
plugins
/
pluginGeneric
.
svg
"
;
let
_templates
=
{
}
;
function
importTemplate
(
name
)
{
if
(
!
_templates
.
hasOwnProperty
(
name
)
)
{
_templates
[
name
]
=
document
.
querySelector
(
template
[
name
=
"
{
name
}
"
]
)
;
}
let
template
=
_templates
[
name
]
;
if
(
template
)
{
return
document
.
importNode
(
template
.
content
true
)
;
}
throw
new
Error
(
Unknown
template
:
{
name
}
)
;
}
class
ListView
{
constructor
(
{
param
root
}
)
{
this
.
type
=
param
;
this
.
root
=
root
;
}
async
getAddons
(
)
{
let
addons
=
await
AddonManager
.
getAddonsByTypes
(
[
this
.
type
]
)
;
addons
=
addons
.
filter
(
addon
=
>
!
addon
.
isSystem
)
;
addons
.
sort
(
(
a
b
)
=
>
a
.
name
.
localeCompare
(
b
.
name
)
)
;
return
addons
;
}
setEnableLabel
(
button
disabled
)
{
if
(
disabled
)
{
document
.
l10n
.
setAttributes
(
button
"
enable
-
addon
-
button
"
)
;
}
else
{
document
.
l10n
.
setAttributes
(
button
"
disable
-
addon
-
button
"
)
;
}
}
updateCard
(
card
addon
)
{
let
icon
;
if
(
addon
.
type
=
=
"
plugin
"
)
{
icon
=
PLUGIN_ICON_URL
;
}
else
{
icon
=
AddonManager
.
getPreferredIconURL
(
addon
32
window
)
;
}
card
.
querySelector
(
"
.
addon
-
icon
"
)
.
src
=
icon
;
card
.
querySelector
(
"
.
addon
-
name
"
)
.
textContent
=
addon
.
name
;
card
.
querySelector
(
"
.
addon
-
description
"
)
.
textContent
=
addon
.
description
;
this
.
setEnableLabel
(
card
.
querySelector
(
'
[
action
=
"
toggle
-
disabled
"
]
'
)
addon
.
userDisabled
)
;
}
renderAddonCard
(
addon
)
{
let
card
=
importTemplate
(
"
card
"
)
.
firstElementChild
;
card
.
setAttribute
(
"
addon
-
id
"
addon
.
id
)
;
this
.
updateCard
(
card
addon
)
;
card
.
addEventListener
(
"
click
"
async
(
e
)
=
>
{
switch
(
e
.
target
.
getAttribute
(
"
action
"
)
)
{
case
"
toggle
-
disabled
"
:
if
(
addon
.
userDisabled
)
{
await
addon
.
enable
(
)
;
}
else
{
await
addon
.
disable
(
)
;
}
this
.
render
(
)
;
break
;
case
"
remove
"
:
await
addon
.
uninstall
(
)
;
this
.
render
(
)
;
break
;
}
}
)
;
return
card
;
}
renderSections
(
{
disabledFrag
enabledFrag
}
)
{
let
viewFrag
=
importTemplate
(
"
list
"
)
;
let
enabledSection
=
viewFrag
.
querySelector
(
'
[
type
=
"
enabled
"
]
'
)
;
let
disabledSection
=
viewFrag
.
querySelector
(
'
[
type
=
"
disabled
"
]
'
)
;
let
setSection
=
(
section
cards
)
=
>
{
if
(
cards
.
children
.
length
>
0
)
{
section
.
appendChild
(
cards
)
;
}
else
{
section
.
remove
(
)
;
}
}
;
setSection
(
enabledSection
enabledFrag
)
;
setSection
(
disabledSection
disabledFrag
)
;
return
viewFrag
;
}
async
render
(
)
{
let
addons
=
await
this
.
getAddons
(
)
;
let
disabledFrag
=
document
.
createDocumentFragment
(
)
;
let
enabledFrag
=
document
.
createDocumentFragment
(
)
;
for
(
let
addon
of
addons
)
{
let
card
=
this
.
renderAddonCard
(
addon
)
;
if
(
addon
.
userDisabled
)
{
disabledFrag
.
appendChild
(
card
)
;
}
else
{
enabledFrag
.
appendChild
(
card
)
;
}
}
let
frag
=
this
.
renderSections
(
{
disabledFrag
enabledFrag
}
)
;
this
.
root
.
textContent
=
"
"
;
this
.
root
.
appendChild
(
frag
)
;
}
}
let
root
=
null
;
function
initialize
(
)
{
root
=
document
.
getElementById
(
"
main
"
)
;
}
async
function
show
(
type
param
)
{
if
(
type
=
=
"
list
"
)
{
await
new
ListView
(
{
param
root
}
)
.
render
(
)
;
}
}
function
hide
(
)
{
root
.
textContent
=
"
"
;
}
