from
__future__
import
unicode_literals
from
argparse
import
ArgumentParser
import
json
import
buildconfig
import
os
def
main
(
)
:
    
parser
=
ArgumentParser
(
)
    
parser
.
add_argument
(
'
output
'
help
=
'
Output
file
'
)
    
parser
.
add_argument
(
'
pkg_platform
'
help
=
'
Package
platform
identifier
'
)
    
args
=
parser
.
parse_args
(
)
    
important_substitutions
=
[
        
'
target_alias
'
'
target_cpu
'
'
target_os
'
'
target_vendor
'
        
'
host_alias
'
'
host_cpu
'
'
host_os
'
'
host_vendor
'
        
'
MOZ_UPDATE_CHANNEL
'
'
MOZ_APP_VENDOR
'
'
MOZ_APP_NAME
'
        
'
MOZ_APP_VERSION
'
'
MOZ_APP_MAXVERSION
'
'
MOZ_APP_ID
'
        
'
CC
'
'
CXX
'
'
AS
'
'
MOZ_SOURCE_REPO
'
    
]
    
all_key_value_pairs
=
{
x
.
lower
(
)
:
buildconfig
.
substs
[
x
]
                           
for
x
in
important_substitutions
}
    
all_key_value_pairs
.
update
(
{
        
'
buildid
'
:
os
.
environ
[
'
MOZ_BUILD_DATE
'
]
        
'
moz_source_stamp
'
:
buildconfig
.
substs
[
'
MOZ_SOURCE_CHANGESET
'
]
        
'
moz_pkg_platform
'
:
args
.
pkg_platform
    
}
)
    
with
open
(
args
.
output
'
wb
'
)
as
f
:
        
json
.
dump
(
all_key_value_pairs
f
indent
=
2
sort_keys
=
True
)
        
f
.
write
(
'
\
n
'
)
if
__name__
=
=
'
__main__
'
:
    
main
(
)
