project_flag
(
env
=
"
MOZ_APP_ID
"
nargs
=
1
help
=
'
Used
for
application
.
ini
\
'
s
"
ID
"
field
and
crash
reporter
server
url
'
)
depends
(
"
MOZ_APP_ID
"
build_project
)
def
check_moz_app_id
(
moz_app_id
build_project
)
:
if
not
moz_app_id
:
die
(
f
"
No
value
for
MOZ_APP_ID
in
project
'
{
build_project
}
'
"
)
project_flag
(
env
=
"
MOZ_APP_VENDOR
"
nargs
=
1
help
=
'
Used
for
application
.
ini
\
'
s
"
Vendor
"
field
which
also
impacts
profile
location
and
user
-
visible
fields
'
)
project_flag
(
env
=
"
MOZ_APP_UA_NAME
"
default
=
"
"
nargs
=
1
help
=
"
Application
name
in
the
User
Agent
string
"
)
project_flag
(
"
MOZ_APP_PROFILE
"
nargs
=
1
help
=
'
Used
for
application
.
ini
\
'
s
"
Profile
"
field
which
controls
profile
location
'
)
project_flag
(
env
=
"
MOZ_DEVTOOLS
"
default
=
"
server
"
choices
=
(
"
all
"
"
server
"
)
nargs
=
1
help
=
"
Which
devtools
version
should
be
built
"
)
option
(
env
=
"
MOZ_STUB_INSTALLER
"
help
=
"
Produce
a
stub
installer
"
)
set_config
(
"
MOZ_STUB_INSTALLER
"
True
when
=
"
MOZ_STUB_INSTALLER
"
)
project_flag
(
env
=
"
MOZ_PROFILE_MIGRATOR
"
help
=
"
Enable
profile
migrator
"
)
project_flag
(
env
=
"
BROWSER_CHROME_URL
"
default
=
"
"
nargs
=
1
set_as_define
=
True
help
=
"
Markup
for
a
single
browser
window
"
)
set_define
(
"
BROWSER_CHROME_URL_QUOTED
"
depends
(
"
BROWSER_CHROME_URL
"
)
(
lambda
v
:
f
'
"
{
v
[
0
]
}
"
'
if
v
else
"
"
)
)
option
(
env
=
"
MOZ_SOURCE_REPO
"
nargs
=
1
help
=
"
Project
source
repository
"
)
set_config
(
"
MOZ_SOURCE_REPO
"
depends_if
(
"
MOZ_SOURCE_REPO
"
)
(
lambda
src
:
src
[
0
]
)
)
option
(
env
=
"
MOZ_SOURCE_CHANGESET
"
nargs
=
1
help
=
"
Source
changeset
"
)
set_config
(
"
MOZ_SOURCE_CHANGESET
"
depends_if
(
"
MOZ_SOURCE_CHANGESET
"
)
(
lambda
v
:
v
[
0
]
)
)
option
(
env
=
"
MOZ_INCLUDE_SOURCE_INFO
"
default
=
mozilla_official
help
=
"
Include
build
repository
informations
"
)
set_config
(
"
MOZ_INCLUDE_SOURCE_INFO
"
True
when
=
"
MOZ_INCLUDE_SOURCE_INFO
"
)
option
(
"
-
-
with
-
distribution
-
id
"
nargs
=
1
default
=
"
org
.
mozilla
"
help
=
"
Set
distribution
-
specific
id
"
)
set_config
(
"
MOZ_DISTRIBUTION_ID
"
depends
(
"
-
-
with
-
distribution
-
id
"
)
(
lambda
v
:
v
[
0
]
)
)
add_old_configure_assignment
(
"
MOZ_DISTRIBUTION_ID
"
depends
(
"
-
-
with
-
distribution
-
id
"
)
(
lambda
v
:
v
[
0
]
)
)
depends
(
"
MOZ_APP_VENDOR
"
build_project
)
def
check_moz_app_vendor
(
moz_app_vendor
build_project
)
:
if
not
moz_app_vendor
:
die
(
f
"
No
value
for
MOZ_APP_VENDOR
in
project
'
{
build_project
}
'
"
)
dependable
imports
(
_from
=
"
mozbuild
.
shellutil
"
_import
=
"
quote
"
)
imports
(
_from
=
"
mozbuild
.
util
"
_import
=
"
ensure_unicode
"
)
imports
(
_from
=
"
mozbuild
.
util
"
_import
=
"
system_encoding
"
)
imports
(
"
__sandbox__
"
)
def
all_configure_options
(
)
:
result
=
[
]
previous
=
None
for
option
in
__sandbox__
.
_options
.
values
(
)
:
if
option
=
=
previous
or
option
.
env
in
(
"
OLD_CONFIGURE
"
"
MOZCONFIG
"
)
:
continue
previous
=
option
value
=
__sandbox__
.
_value_for
(
option
)
if
(
value
is
not
None
and
value
.
origin
not
in
(
"
default
"
"
implied
"
"
confvars
"
)
and
value
!
=
option
.
default
)
:
result
.
append
(
ensure_unicode
(
__sandbox__
.
_raw_options
[
option
]
system_encoding
)
)
elif
(
option
.
help
=
=
"
Help
missing
for
old
configure
options
"
and
option
in
__sandbox__
.
_raw_options
)
:
result
.
append
(
ensure_unicode
(
__sandbox__
.
_raw_options
[
option
]
system_encoding
)
)
if
not
result
:
return
"
"
return
quote
(
*
result
)
set_config
(
"
MOZ_CONFIGURE_OPTIONS
"
all_configure_options
)
depends
(
target
)
def
fold_libs
(
target
)
:
return
target
.
os
in
(
"
WINNT
"
"
OSX
"
"
iOS
"
"
Android
"
)
set_config
(
"
MOZ_FOLD_LIBS
"
fold_libs
)
option
(
"
-
-
disable
-
gecko
-
profiler
"
help
=
"
Disable
the
Gecko
profiler
"
)
depends
(
"
-
-
disable
-
gecko
-
profiler
"
target
)
def
gecko_profiler
(
enable_gecko_profiler
target
)
:
if
not
enable_gecko_profiler
:
return
False
if
target
.
os
=
=
"
Android
"
:
return
target
.
cpu
in
(
"
aarch64
"
"
arm
"
"
x86
"
"
x86_64
"
)
elif
target
.
kernel
=
=
"
Linux
"
:
return
target
.
cpu
in
(
"
aarch64
"
"
arm
"
"
x86
"
"
x86_64
"
"
mips64
"
)
elif
target
.
kernel
=
=
"
FreeBSD
"
:
return
target
.
cpu
in
(
"
aarch64
"
"
x86_64
"
)
return
target
.
kernel
in
(
"
Darwin
"
"
WINNT
"
)
depends
(
gecko_profiler
)
def
gecko_profiler_define
(
value
)
:
if
value
:
return
True
set_config
(
"
MOZ_GECKO_PROFILER
"
gecko_profiler_define
)
set_define
(
"
MOZ_GECKO_PROFILER
"
gecko_profiler_define
)
set_config
(
"
MOZ_PERFETTO
"
gecko_profiler_define
when
=
target_is_android
&
milestone
.
is_nightly
)
set_define
(
"
MOZ_PERFETTO
"
gecko_profiler_define
when
=
target_is_android
&
milestone
.
is_nightly
)
depends
(
gecko_profiler
target
)
def
gecko_profiler_parse_elf
(
value
target
)
:
if
value
and
(
target
.
kernel
=
=
"
Linux
"
or
target
.
kernel
=
=
"
FreeBSD
"
)
:
return
True
set_config
(
"
MOZ_GECKO_PROFILER_PARSE_ELF
"
gecko_profiler_parse_elf
)
set_config
(
"
MOZ_PROFILER_MEMORY
"
gecko_profiler_define
)
set_define
(
"
MOZ_PROFILER_MEMORY
"
gecko_profiler_define
)
depends
(
"
-
-
enable
-
debug
"
milestone
build_project
when
=
artifact_builds
|
depends
(
when
=
"
-
-
enable
-
replace
-
malloc
"
)
(
lambda
:
True
)
)
def
dmd_default
(
debug
milestone
build_project
)
:
return
bool
(
build_project
=
=
"
browser
"
and
(
debug
or
milestone
.
is_nightly
)
)
option
(
"
-
-
enable
-
dmd
"
env
=
"
MOZ_DMD
"
default
=
dmd_default
help
=
"
{
Enable
|
Disable
}
Dark
Matter
Detector
(
heap
profiler
)
.
"
"
Also
enables
jemalloc
replace
-
malloc
and
profiling
"
)
depends
(
"
-
-
enable
-
dmd
"
)
def
dmd
(
value
)
:
if
value
:
return
True
set_config
(
"
MOZ_DMD
"
dmd
)
set_define
(
"
MOZ_DMD
"
dmd
)
imply_option
(
"
-
-
enable
-
profiling
"
dmd
)
imply_option
(
"
-
-
enable
-
jemalloc
"
dmd
when
=
compile_environment
)
imply_option
(
"
-
-
enable
-
replace
-
malloc
"
dmd
when
=
compile_environment
)
depends
(
target
)
def
midir_linux_support
(
target
)
:
return
(
target
.
kernel
=
=
"
Linux
"
and
target
.
os
!
=
"
Android
"
and
target
.
cpu
!
=
"
riscv64
"
)
depends
(
target
midir_linux_support
)
def
midir_support
(
target
midir_linux_support
)
:
if
target
.
os
in
(
"
WINNT
"
"
OSX
"
)
or
midir_linux_support
:
return
True
set_config
(
"
MOZ_WEBMIDI_MIDIR_IMPL
"
midir_support
)
depends
(
target
)
def
audio_backends_default
(
target
)
:
if
target
.
os
=
=
"
Android
"
:
return
(
"
aaudio
"
"
opensl
"
)
elif
target
.
os
in
(
"
DragonFly
"
"
FreeBSD
"
"
SunOS
"
)
:
return
(
"
oss
"
)
elif
target
.
os
=
=
"
OpenBSD
"
:
return
(
"
sndio
"
)
elif
target
.
kernel
=
=
"
Darwin
"
:
return
(
"
audiounit
"
)
elif
target
.
os
=
=
"
NetBSD
"
:
return
(
"
sunaudio
"
)
elif
target
.
os
=
=
"
SunOS
"
:
return
(
"
sunaudio
"
)
elif
target
.
os
=
=
"
WINNT
"
:
return
(
"
wasapi
"
)
else
:
return
(
"
pulseaudio
"
)
option
(
"
-
-
enable
-
audio
-
backends
"
nargs
=
"
+
"
choices
=
(
"
aaudio
"
"
alsa
"
"
audiounit
"
"
jack
"
"
opensl
"
"
oss
"
"
pulseaudio
"
"
sndio
"
"
sunaudio
"
"
wasapi
"
)
default
=
audio_backends_default
help
=
"
{
Enable
|
Disable
}
various
cubeb
backends
"
)
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_aaudio
(
values
target
)
:
if
any
(
"
aaudio
"
in
value
for
value
in
values
)
and
target
.
os
!
=
"
Android
"
:
die
(
"
Cannot
enable
AAudio
on
%
s
"
target
.
os
)
return
any
(
"
aaudio
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_alsa
(
values
target
)
:
if
(
any
(
"
alsa
"
in
value
for
value
in
values
)
and
target
.
kernel
!
=
"
Linux
"
and
target
.
os
!
=
"
FreeBSD
"
)
:
die
(
"
Cannot
enable
ALSA
on
%
s
"
target
.
os
)
return
any
(
"
alsa
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_audiounit
(
values
target
)
:
if
any
(
"
audiounit
"
in
value
for
value
in
values
)
and
target
.
kernel
!
=
"
Darwin
"
:
die
(
"
Cannot
enable
AudioUnit
on
%
s
"
target
.
os
)
return
any
(
"
audiounit
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
)
def
imply_jack
(
values
)
:
return
any
(
"
jack
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_opensl
(
values
target
)
:
if
any
(
"
opensl
"
in
value
for
value
in
values
)
and
target
.
os
!
=
"
Android
"
:
die
(
"
Cannot
enable
OpenSL
on
%
s
"
target
.
os
)
return
any
(
"
opensl
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_oss
(
values
target
)
:
if
any
(
"
oss
"
in
value
for
value
in
values
)
and
(
target
.
os
in
(
"
Android
"
"
OSX
"
"
iOS
"
"
WINNT
"
)
)
:
die
(
"
Cannot
enable
OSS
on
%
s
"
target
.
os
)
return
any
(
"
oss
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_pulseaudio
(
values
target
)
:
if
any
(
"
pulseaudio
"
in
value
for
value
in
values
)
and
(
target
.
os
in
(
"
Android
"
"
OSX
"
"
iOS
"
"
WINNT
"
)
)
:
die
(
"
Cannot
enable
PulseAudio
on
%
s
"
target
.
os
)
return
any
(
"
pulseaudio
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_sndio
(
values
target
)
:
if
any
(
"
sndio
"
in
value
for
value
in
values
)
and
(
target
.
os
in
(
"
Android
"
"
OSX
"
"
iOS
"
"
WINNT
"
)
)
:
die
(
"
Cannot
enable
sndio
on
%
s
"
target
.
os
)
return
any
(
"
sndio
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_sunaudio
(
values
target
)
:
if
any
(
"
sunaudio
"
in
value
for
value
in
values
)
and
(
target
.
os
!
=
"
NetBSD
"
and
target
.
os
!
=
"
SunOS
"
)
:
die
(
"
Cannot
enable
sunaudio
on
%
s
"
target
.
os
)
return
any
(
"
sunaudio
"
in
value
for
value
in
values
)
or
None
depends
(
"
-
-
enable
-
audio
-
backends
"
target
)
def
imply_wasapi
(
values
target
)
:
if
any
(
"
wasapi
"
in
value
for
value
in
values
)
and
target
.
os
!
=
"
WINNT
"
:
die
(
"
Cannot
enable
WASAPI
on
%
s
"
target
.
os
)
return
any
(
"
wasapi
"
in
value
for
value
in
values
)
or
None
set_config
(
"
MOZ_AAUDIO
"
imply_aaudio
when
=
"
-
-
enable
-
audio
-
backends
"
)
imply_option
(
"
-
-
enable
-
alsa
"
imply_alsa
reason
=
"
-
-
enable
-
audio
-
backends
"
when
=
use_pkg_config
)
set_config
(
"
MOZ_AUDIOUNIT_RUST
"
imply_audiounit
when
=
"
-
-
enable
-
audio
-
backends
"
)
imply_option
(
"
-
-
enable
-
jack
"
imply_jack
reason
=
"
-
-
enable
-
audio
-
backends
"
when
=
use_pkg_config
)
set_config
(
"
MOZ_OPENSL
"
imply_opensl
when
=
"
-
-
enable
-
audio
-
backends
"
)
set_config
(
"
MOZ_OSS
"
imply_oss
when
=
"
-
-
enable
-
audio
-
backends
"
)
imply_option
(
"
-
-
enable
-
pulseaudio
"
imply_pulseaudio
reason
=
"
-
-
enable
-
audio
-
backends
"
when
=
use_pkg_config
)
imply_option
(
"
-
-
enable
-
sndio
"
imply_sndio
reason
=
"
-
-
enable
-
audio
-
backends
"
when
=
use_pkg_config
)
set_config
(
"
MOZ_SUNAUDIO
"
imply_sunaudio
when
=
"
-
-
enable
-
audio
-
backends
"
)
set_config
(
"
MOZ_WASAPI
"
imply_wasapi
when
=
"
-
-
enable
-
audio
-
backends
"
)
option
(
"
-
-
enable
-
alsa
"
env
=
"
MOZ_ALSA
"
help
=
"
Enable
ALSA
audio
backend
"
when
=
use_pkg_config
)
depends
(
"
-
-
enable
-
alsa
"
when
=
use_pkg_config
)
def
enable_alsa_option
(
enable_alsa
)
:
return
enable_alsa
depends
(
enable_alsa_option
midir_linux_support
)
def
enable_alsa_or_midir_linux_support
(
alsa_enabled
midir_linux_support
)
:
return
alsa_enabled
or
midir_linux_support
pkg_check_modules
(
"
MOZ_ALSA
"
"
alsa
"
when
=
enable_alsa_or_midir_linux_support
)
set_config
(
"
MOZ_ALSA
"
True
when
=
"
-
-
enable
-
alsa
"
)
set_define
(
"
MOZ_ALSA
"
True
when
=
"
-
-
enable
-
alsa
"
)
system_lib_option
(
"
-
-
enable
-
jack
"
env
=
"
MOZ_JACK
"
help
=
"
Enable
JACK
audio
backend
"
when
=
use_pkg_config
)
jack
=
pkg_check_modules
(
"
MOZ_JACK
"
"
jack
"
when
=
"
-
-
enable
-
jack
"
)
set_config
(
"
MOZ_JACK
"
depends_if
(
jack
)
(
lambda
_
:
True
)
)
option
(
"
-
-
enable
-
pulseaudio
"
env
=
"
MOZ_PULSEAUDIO
"
help
=
"
{
Enable
|
Disable
}
PulseAudio
audio
backend
"
when
=
use_pkg_config
)
pulseaudio
=
pkg_check_modules
(
"
MOZ_PULSEAUDIO
"
"
libpulse
"
when
=
"
-
-
enable
-
pulseaudio
"
)
set_config
(
"
MOZ_PULSEAUDIO
"
depends_if
(
pulseaudio
)
(
lambda
_
:
True
)
)
set_define
(
"
MOZ_PULSEAUDIO
"
depends_if
(
pulseaudio
)
(
lambda
_
:
True
)
)
system_lib_option
(
"
-
-
enable
-
sndio
"
env
=
"
MOZ_SNDIO
"
help
=
"
Enable
sndio
audio
backend
"
when
=
use_pkg_config
)
sndio
=
pkg_check_modules
(
"
MOZ_SNDIO
"
"
sndio
"
when
=
"
-
-
enable
-
sndio
"
)
set_config
(
"
MOZ_SNDIO
"
depends_if
(
sndio
)
(
lambda
_
:
True
)
)
include
(
"
.
.
/
js
/
moz
.
configure
"
)
include
(
"
.
.
/
build
/
moz
.
configure
/
node
.
configure
"
)
set_define
(
"
JSON_USE_EXCEPTION
"
0
)
option
(
"
-
-
with
-
l10n
-
base
"
nargs
=
1
env
=
"
L10NBASEDIR
"
help
=
"
Path
to
l10n
repositories
"
)
depends
(
"
-
-
with
-
l10n
-
base
"
"
MOZ_AUTOMATION
"
build_environment
)
imports
(
_from
=
"
os
.
path
"
_import
=
"
isdir
"
)
imports
(
_from
=
"
os
.
path
"
_import
=
"
expanduser
"
)
imports
(
_from
=
"
os
"
_import
=
"
environ
"
)
def
l10n_base
(
value
automation
build_env
)
:
if
value
:
path
=
value
[
0
]
if
not
isdir
(
path
)
:
die
(
"
Invalid
value
-
-
with
-
l10n
-
base
%
s
doesn
'
t
exist
"
path
)
elif
automation
:
path
=
os
.
path
.
join
(
build_env
.
topsrcdir
"
.
.
/
l10n
-
central
"
)
else
:
path
=
os
.
path
.
join
(
environ
.
get
(
"
MOZBUILD_STATE_PATH
"
expanduser
(
os
.
path
.
join
(
"
~
"
"
.
mozbuild
"
)
)
)
"
l10n
-
central
"
)
return
os
.
path
.
realpath
(
os
.
path
.
abspath
(
path
)
)
set_config
(
"
L10NBASEDIR
"
l10n_base
)
depends
(
target
)
def
toolkit_choices
(
target
)
:
if
target
.
os
=
=
"
WINNT
"
:
return
(
"
cairo
-
windows
"
)
elif
target
.
os
=
=
"
OSX
"
:
return
(
"
cairo
-
cocoa
"
)
elif
target
.
os
=
=
"
iOS
"
:
return
(
"
cairo
-
uikit
"
)
elif
target
.
os
=
=
"
Android
"
:
return
(
"
cairo
-
android
"
)
else
:
return
(
"
cairo
-
gtk3
"
"
cairo
-
gtk3
-
wayland
"
"
cairo
-
gtk3
-
x11
-
wayland
"
"
cairo
-
gtk3
-
wayland
-
only
"
"
cairo
-
gtk3
-
x11
-
only
"
)
depends
(
toolkit_choices
)
def
toolkit_default
(
choices
)
:
return
choices
[
0
]
option
(
"
-
-
enable
-
default
-
toolkit
"
nargs
=
1
choices
=
toolkit_choices
default
=
toolkit_default
help
=
"
Select
default
toolkit
"
)
depends
(
"
-
-
enable
-
default
-
toolkit
"
)
def
full_toolkit
(
value
)
:
if
value
:
return
value
[
0
]
depends
(
full_toolkit
)
def
toolkit
(
toolkit
)
:
if
toolkit
.
startswith
(
"
cairo
-
gtk3
"
)
:
widget_toolkit
=
"
gtk
"
else
:
widget_toolkit
=
toolkit
.
replace
(
"
cairo
-
"
"
"
)
return
widget_toolkit
set_config
(
"
MOZ_WIDGET_TOOLKIT
"
toolkit
)
depends
(
toolkit
)
def
toolkit_define
(
toolkit
)
:
if
toolkit
!
=
"
windows
"
:
return
"
MOZ_WIDGET_
%
s
"
%
toolkit
.
upper
(
)
set_define
(
toolkit_define
True
)
depends
(
toolkit
)
def
toolkit_gtk
(
toolkit
)
:
return
toolkit
=
=
"
gtk
"
depends
(
toolkit_gtk
full_toolkit
)
def
toolkit_gtk_x11
(
toolkit_gtk
full_toolkit
)
:
return
toolkit_gtk
and
full_toolkit
!
=
"
cairo
-
gtk3
-
wayland
-
only
"
depends
(
full_toolkit
)
def
toolkit_gtk_x11_optional
(
full_toolkit
)
:
return
full_toolkit
=
=
"
cairo
-
gtk3
-
wayland
"
depends
(
toolkit_gtk
full_toolkit
)
def
toolkit_gtk_wayland
(
toolkit_gtk
full_toolkit
)
:
return
toolkit_gtk
and
full_toolkit
!
=
"
cairo
-
gtk3
-
x11
-
only
"
depends
(
full_toolkit
)
def
toolkit_gtk_wayland_optional
(
full_toolkit
)
:
return
full_toolkit
=
=
"
cairo
-
gtk3
"
wayland_headers
=
pkg_check_modules
(
"
MOZ_WAYLAND
"
"
gtk
+
-
wayland
-
3
.
0
>
=
3
.
14
xkbcommon
>
=
0
.
4
.
1
"
allow_missing
=
toolkit_gtk_wayland_optional
when
=
toolkit_gtk_wayland
)
depends
(
wayland_headers
toolkit_gtk
artifact_builds
toolkit_gtk_wayland
)
def
wayland_headers
(
wayland
toolkit_gtk
artifacts
toolkit_gtk_wayland
)
:
if
not
toolkit_gtk_wayland
:
return
False
if
toolkit_gtk
and
artifacts
:
return
True
return
wayland
set_config
(
"
MOZ_WAYLAND
"
depends_if
(
wayland_headers
)
(
lambda
_
:
True
)
)
set_define
(
"
MOZ_WAYLAND
"
depends_if
(
wayland_headers
)
(
lambda
_
:
True
)
)
set_config
(
"
MOZ_ENABLE_VAAPI
"
True
when
=
toolkit_gtk
)
set_define
(
"
MOZ_ENABLE_VAAPI
"
True
when
=
toolkit_gtk
)
depends
(
target
toolkit_gtk
)
def
v4l2
(
target
toolkit_gtk
)
:
if
target
.
cpu
in
(
"
arm
"
"
aarch64
"
"
riscv64
"
)
and
toolkit_gtk
:
return
True
set_config
(
"
MOZ_ENABLE_V4L2
"
True
when
=
v4l2
)
set_define
(
"
MOZ_ENABLE_V4L2
"
True
when
=
v4l2
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
pipewire
"
nargs
=
"
?
"
help
=
"
Use
system
PipeWire
"
when
=
use_pkg_config
)
pipewire_headers
=
pkg_check_modules
(
"
MOZ_PIPEWIRE
"
"
libpipewire
-
0
.
3
libspa
-
0
.
2
"
when
=
"
-
-
with
-
system
-
pipewire
"
)
set_config
(
"
MOZ_SYSTEM_PIPEWIRE
"
True
when
=
"
-
-
with
-
system
-
pipewire
"
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
gbm
"
nargs
=
"
?
"
help
=
"
Use
system
gbm
"
when
=
use_pkg_config
)
pipewire_headers
=
pkg_check_modules
(
"
MOZ_GBM
"
"
gbm
"
when
=
"
-
-
with
-
system
-
gbm
"
)
set_config
(
"
MOZ_SYSTEM_GBM
"
True
when
=
"
-
-
with
-
system
-
gbm
"
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
libdrm
"
nargs
=
"
?
"
help
=
"
Use
system
libdrm
"
when
=
use_pkg_config
)
pipewire_headers
=
pkg_check_modules
(
"
MOZ_LIBDRM
"
"
libdrm
"
when
=
"
-
-
with
-
system
-
libdrm
"
)
set_config
(
"
MOZ_SYSTEM_LIBDRM
"
True
when
=
"
-
-
with
-
system
-
libdrm
"
)
option
(
"
-
-
with
-
gl
-
provider
"
nargs
=
1
help
=
"
Set
GL
provider
backend
type
"
)
depends
(
"
-
-
with
-
gl
-
provider
"
)
def
gl_provider
(
value
)
:
if
value
:
return
value
[
0
]
depends
(
gl_provider
)
def
gl_provider_define
(
provider
)
:
if
provider
:
return
"
GLContextProvider
%
s
"
%
provider
set_define
(
"
MOZ_GL_PROVIDER
"
gl_provider_define
)
depends
(
gl_provider
toolkit_gtk
)
def
gl_default_provider
(
value
toolkit_gtk
)
:
if
value
:
return
value
elif
toolkit_gtk
:
return
"
EGL
"
set_config
(
"
MOZ_GL_PROVIDER
"
gl_provider
)
set_config
(
"
MOZ_GL_DEFAULT_PROVIDER
"
gl_default_provider
)
depends
(
gl_default_provider
)
def
gl_provider_define
(
provider
)
:
if
provider
:
return
"
GL_PROVIDER_
%
s
"
%
provider
set_define
(
gl_provider_define
True
)
depends
(
toolkit
)
def
pdf_printing
(
toolkit
)
:
if
toolkit
in
(
"
windows
"
"
gtk
"
"
android
"
)
:
return
True
set_config
(
"
MOZ_PDF_PRINTING
"
pdf_printing
)
set_define
(
"
MOZ_PDF_PRINTING
"
pdf_printing
)
option
(
env
=
"
USE_FC_FREETYPE
"
help
=
"
Force
-
enable
the
use
of
fontconfig
freetype
"
)
depends
(
"
USE_FC_FREETYPE
"
toolkit
)
def
fc_freetype
(
value
toolkit
)
:
if
value
or
(
toolkit
=
=
"
gtk
"
and
value
.
origin
=
=
"
default
"
)
:
return
True
set_define
(
"
USE_FC_FREETYPE
"
fc_freetype
)
pkg_check_modules
(
"
MOZ_PANGO
"
"
pango
>
=
1
.
22
.
0
"
when
=
toolkit_gtk
)
fontconfig_info
=
pkg_check_modules
(
"
_FONTCONFIG
"
"
fontconfig
>
=
2
.
7
.
0
"
when
=
fc_freetype
)
depends
(
fc_freetype
)
def
check_for_freetype2
(
fc_freetype
)
:
if
fc_freetype
:
return
True
freetype2_info
=
pkg_check_modules
(
"
_FT2
"
"
freetype2
>
=
9
.
10
.
3
"
when
=
check_for_freetype2
)
depends
(
fontconfig_info
freetype2_info
)
def
freetype2_combined_info
(
fontconfig_info
freetype2_info
)
:
if
not
freetype2_info
:
return
if
not
fontconfig_info
:
return
freetype2_info
return
namespace
(
cflags
=
freetype2_info
.
cflags
+
fontconfig_info
.
cflags
libs
=
freetype2_info
.
libs
+
fontconfig_info
.
libs
)
set_define
(
"
MOZ_HAVE_FREETYPE2
"
depends_if
(
freetype2_info
)
(
lambda
_
:
True
)
)
depends
(
toolkit
)
def
applemedia
(
toolkit
)
:
if
toolkit
in
(
"
cocoa
"
"
uikit
"
)
:
return
True
set_config
(
"
MOZ_APPLEMEDIA
"
applemedia
)
set_define
(
"
MOZ_APPLEMEDIA
"
applemedia
)
option
(
"
-
-
disable
-
wmf
"
help
=
"
Disable
support
for
Windows
Media
Foundation
"
)
depends
(
"
-
-
disable
-
wmf
"
target
"
-
-
help
"
)
def
wmf
(
value
target
_
)
:
enabled
=
bool
(
value
)
if
value
.
origin
=
=
"
default
"
:
enabled
=
target
.
os
=
=
"
WINNT
"
if
enabled
and
target
.
os
!
=
"
WINNT
"
:
die
(
"
Cannot
enable
Windows
Media
Foundation
support
on
%
s
"
target
.
os
)
if
enabled
:
return
True
depends
(
artifact_builds
c_compiler
when
=
wmf
)
def
wmfmediaengine
(
artifact_builds
c_compiler
)
:
if
c_compiler
:
return
c_compiler
.
type
=
=
"
clang
-
cl
"
return
bool
(
artifact_builds
)
set_config
(
"
MOZ_WMF
"
wmf
)
set_define
(
"
MOZ_WMF
"
wmf
)
set_config
(
"
MOZ_WMF_MEDIA_ENGINE
"
True
when
=
wmfmediaengine
)
set_define
(
"
MOZ_WMF_MEDIA_ENGINE
"
True
when
=
wmfmediaengine
)
option
(
"
-
-
disable
-
ffmpeg
"
help
=
"
Disable
FFmpeg
for
fragmented
H264
/
AAC
decoding
"
)
depends
(
"
-
-
disable
-
ffmpeg
"
target
)
def
ffmpeg
(
value
target
)
:
enabled
=
bool
(
value
)
if
value
.
origin
=
=
"
default
"
:
enabled
=
target
.
os
not
in
(
"
Android
"
"
WINNT
"
)
if
enabled
:
return
True
set_config
(
"
MOZ_FFMPEG
"
ffmpeg
)
set_define
(
"
MOZ_FFMPEG
"
ffmpeg
)
option
(
"
-
-
disable
-
av1
"
help
=
"
Disable
av1
video
support
"
)
depends
(
"
-
-
enable
-
av1
"
)
def
av1
(
value
)
:
if
value
:
return
True
option
(
"
-
-
with
-
system
-
av1
"
help
=
"
Use
system
av1
(
located
with
pkg
-
config
)
"
)
pkg_check_modules
(
"
MOZ_SYSTEM_LIBAOM
"
"
aom
>
=
3
.
0
.
0
"
when
=
"
-
-
with
-
system
-
av1
"
)
pkg_check_modules
(
"
MOZ_SYSTEM_LIBDAV1D
"
"
dav1d
>
=
1
.
2
.
1
"
when
=
"
-
-
with
-
system
-
av1
"
)
depends
(
target
"
-
-
with
-
system
-
av1
"
when
=
av1
&
compile_environment
)
def
dav1d_asm
(
target
system_av1
)
:
if
not
system_av1
and
target
.
cpu
in
(
"
arm
"
"
aarch64
"
"
x86
"
"
x86_64
"
)
:
return
True
depends
(
target
"
-
-
with
-
system
-
av1
"
when
=
av1
&
compile_environment
)
def
dav1d_nasm
(
target
system_av1
)
:
if
not
system_av1
and
target
.
cpu
in
(
"
x86
"
"
x86_64
"
)
:
return
namespace
(
version
=
"
2
.
14
"
what
=
"
AV1
"
)
set_config
(
"
MOZ_DAV1D_ASM
"
dav1d_asm
)
set_define
(
"
MOZ_DAV1D_ASM
"
dav1d_asm
)
set_config
(
"
MOZ_AV1
"
av1
)
set_define
(
"
MOZ_AV1
"
av1
)
set_config
(
"
MOZ_SYSTEM_AV1
"
True
when
=
"
-
-
with
-
system
-
av1
"
)
option
(
"
-
-
disable
-
jxl
"
help
=
"
Disable
jxl
image
support
"
)
depends
(
"
-
-
disable
-
jxl
"
milestone
.
is_nightly
)
def
jxl
(
value
is_nightly
)
:
if
is_nightly
and
value
:
return
True
set_config
(
"
MOZ_JXL
"
jxl
)
set_define
(
"
MOZ_JXL
"
jxl
)
set_config
(
"
MOZ_SAMPLE_TYPE_FLOAT32
"
True
)
set_define
(
"
MOZ_SAMPLE_TYPE_FLOAT32
"
True
)
set_config
(
"
MOZ_VORBIS
"
True
)
option
(
"
-
-
disable
-
real
-
time
-
tracing
"
help
=
"
Disable
tracing
of
real
-
time
audio
callbacks
"
)
set_config
(
"
MOZ_REAL_TIME_TRACING
"
True
when
=
"
-
-
enable
-
real
-
time
-
tracing
"
)
set_define
(
"
MOZ_REAL_TIME_TRACING
"
True
when
=
"
-
-
enable
-
real
-
time
-
tracing
"
)
option
(
"
-
-
enable
-
openmax
"
help
=
"
Enable
OpenMAX
IL
for
video
/
audio
decoding
"
)
depends
(
"
-
-
enable
-
openmax
"
)
def
openmax
(
value
)
:
enabled
=
bool
(
value
)
if
enabled
:
return
True
set_config
(
"
MOZ_OMX
"
openmax
)
set_define
(
"
MOZ_OMX
"
openmax
)
depends
(
target
wmf
)
def
eme_choices
(
target
wmf
)
:
if
(
target
.
kernel
in
(
"
WINNT
"
"
Linux
"
)
and
target
.
os
!
=
"
Android
"
and
target
.
cpu
in
(
"
x86
"
"
x86_64
"
)
)
:
if
wmf
:
return
(
"
widevine
"
"
wmfcdm
"
)
return
(
"
widevine
"
)
if
target
.
kernel
=
=
"
WINNT
"
and
target
.
cpu
=
=
"
aarch64
"
:
return
(
"
widevine
"
)
if
target
.
os
in
(
"
OSX
"
)
:
return
(
"
widevine
"
)
depends
(
build_project
eme_choices
)
def
eme_default
(
build_project
choices
)
:
if
build_project
=
=
"
browser
"
:
return
choices
option
(
"
-
-
enable
-
eme
"
nargs
=
"
+
"
choices
=
eme_choices
default
=
eme_default
when
=
eme_choices
help
=
"
{
Enable
|
Disable
}
support
for
Encrypted
Media
Extensions
"
)
depends
(
"
-
-
enable
-
eme
"
when
=
eme_choices
)
def
eme_modules
(
value
)
:
return
value
set_config
(
"
MOZ_EME_MODULES
"
eme_modules
|
dependable
(
[
]
)
)
depends
(
eme_modules
when
=
wmfmediaengine
)
def
wmfcdm
(
modules
)
:
if
"
wmfcdm
"
in
modules
:
return
True
set_config
(
"
MOZ_WMF_CDM
"
True
when
=
wmfcdm
)
set_define
(
"
MOZ_WMF_CDM
"
True
when
=
wmfcdm
)
option
(
name
=
"
-
-
enable
-
chrome
-
format
"
help
=
"
Select
FORMAT
of
chrome
files
during
packaging
"
nargs
=
1
choices
=
(
"
omni
"
"
jar
"
"
flat
"
)
default
=
"
omni
"
)
depends
(
"
-
-
enable
-
chrome
-
format
"
)
def
packager_format
(
value
)
:
return
value
[
0
]
set_config
(
"
MOZ_PACKAGER_FORMAT
"
packager_format
)
depends
(
target_is_android
"
-
-
enable
-
debug
"
milestone
.
is_nightly
)
def
enable_minify_default
(
is_android
debug
is_nightly
)
:
if
is_android
and
not
debug
and
not
is_nightly
:
return
(
"
properties
"
"
js
"
)
return
(
"
properties
"
)
option
(
name
=
"
-
-
enable
-
minify
"
help
=
"
Select
types
of
files
to
minify
during
packaging
"
nargs
=
"
*
"
choices
=
(
"
properties
"
"
js
"
)
default
=
enable_minify_default
)
depends
(
"
-
-
enable
-
minify
"
)
def
enable_minify
(
value
)
:
if
"
js
"
in
value
and
"
properties
"
not
in
value
:
die
(
"
-
-
enable
-
minify
=
js
requires
-
-
enable
-
minify
=
properties
.
"
)
return
namespace
(
properties
=
"
properties
"
in
value
js
=
"
js
"
in
value
)
set_config
(
"
MOZ_PACKAGER_MINIFY
"
True
when
=
enable_minify
.
properties
)
set_config
(
"
MOZ_PACKAGER_MINIFY_JS
"
True
when
=
enable_minify
.
js
)
depends
(
host
build_project
)
def
jar_maker_format
(
host
build_project
)
:
if
host
.
os
=
=
"
WINNT
"
or
build_project
=
=
"
mobile
/
android
"
:
return
"
flat
"
return
"
symlink
"
set_config
(
"
MOZ_JAR_MAKER_FILE_FORMAT
"
jar_maker_format
)
depends
(
toolkit
)
def
omnijar_name
(
toolkit
)
:
return
"
assets
/
omni
.
ja
"
if
toolkit
=
=
"
android
"
else
"
omni
.
ja
"
set_config
(
"
OMNIJAR_NAME
"
omnijar_name
)
project_flag
(
"
MOZ_PLACES
"
help
=
"
Build
Places
if
required
"
set_as_define
=
True
)
project_flag
(
"
MOZ_SERVICES_HEALTHREPORT
"
help
=
"
Build
Firefox
Health
Reporter
Service
"
set_as_define
=
True
)
project_flag
(
"
MOZ_NORMANDY
"
help
=
"
Enable
Normandy
recipe
runner
"
set_as_define
=
True
)
project_flag
(
"
MOZ_SERVICES_SYNC
"
help
=
"
Build
Sync
Services
if
required
"
)
project_flag
(
"
MOZ_GECKOVIEW_HISTORY
"
help
=
"
Enable
Geckoview
History
instead
of
Places
"
set_as_define
=
True
)
depends
(
toolkit
bin_suffix
(
target
)
)
def
moz_child_process_name
(
toolkit
bin_suffix
)
:
if
toolkit
!
=
"
android
"
:
return
f
"
plugin
-
container
{
bin_suffix
}
"
else
:
return
"
libplugin
-
container
.
so
"
set_config
(
"
MOZ_CHILD_PROCESS_NAME
"
moz_child_process_name
)
with
only_when
(
target_is_osx
)
:
set_config
(
"
MOZ_CHILD_PROCESS_BUNDLE
"
"
plugin
-
container
.
app
/
Contents
/
MacOS
/
"
)
set_config
(
"
MOZ_CHILD_PROCESS_BUNDLEID
"
depends
(
"
-
-
with
-
distribution
-
id
"
)
(
lambda
v
:
f
"
{
v
[
0
]
}
.
plugincontainer
"
)
)
set_config
(
"
MOZ_CHILD_PROCESS_BUNDLENAME
"
"
plugin
-
container
.
app
"
)
set_define
(
"
MOZ_SELECTABLE_PROFILES
"
True
)
set_config
(
"
MOZ_SELECTABLE_PROFILES
"
True
)
project_flag
(
"
MOZ_DEDICATED_PROFILES
"
help
=
"
Enable
dedicated
profiles
per
install
"
set_as_define
=
True
)
project_flag
(
"
MOZ_BLOCK_PROFILE_DOWNGRADE
"
help
=
"
Block
users
from
starting
profiles
last
used
by
a
newer
build
"
set_as_define
=
True
)
depends
(
"
MOZ_PLACES
"
"
MOZ_GECKOVIEW_HISTORY
"
)
def
check_places_and_geckoview_history
(
places
geckoview_history
)
:
if
places
and
geckoview_history
:
die
(
"
Cannot
use
MOZ_GECKOVIEW_HISTORY
alongside
MOZ_PLACES
.
"
)
if
not
places
and
not
geckoview_history
:
die
(
"
One
of
MOZ_GECKOVIEW_HISTORY
or
MOZ_PLACES
must
be
set
.
"
)
option
(
env
=
"
MOZ_TELEMETRY_REPORTING
"
default
=
mozilla_official
help
=
"
Enable
telemetry
reporting
"
)
set_define
(
"
MOZ_TELEMETRY_REPORTING
"
True
when
=
"
MOZ_TELEMETRY_REPORTING
"
)
depends
(
"
MOZ_TELEMETRY_REPORTING
"
milestone
.
is_nightly
)
def
telemetry_on_by_default
(
reporting
is_nightly
)
:
return
reporting
and
is_nightly
set_define
(
"
MOZ_TELEMETRY_ON_BY_DEFAULT
"
True
when
=
telemetry_on_by_default
)
check_prog
(
"
TAR
"
(
"
gnutar
"
"
gtar
"
"
tar
"
)
)
check_prog
(
"
UNZIP
"
(
"
unzip
"
)
)
include
(
"
.
.
/
build
/
moz
.
configure
/
keyfiles
.
configure
"
)
simple_keyfile
(
"
Mozilla
API
"
)
simple_keyfile
(
"
Google
Location
Service
API
"
)
simple_keyfile
(
"
Google
Safebrowsing
API
"
)
id_and_secret_keyfile
(
"
Bing
API
"
)
simple_keyfile
(
"
Adjust
SDK
"
)
id_and_secret_keyfile
(
"
Leanplum
SDK
"
)
simple_keyfile
(
"
Pocket
API
"
)
option
(
"
-
-
enable
-
webrender
-
debugger
"
help
=
"
Build
the
websocket
debug
server
in
WebRender
"
)
set_config
(
"
MOZ_WEBRENDER_DEBUGGER
"
depends_if
(
"
-
-
enable
-
webrender
-
debugger
"
)
(
lambda
_
:
True
)
)
option
(
"
-
-
enable
-
app
-
system
-
headers
"
env
=
"
MOZ_APP_SYSTEM_HEADERS
"
help
=
"
Use
additional
system
headers
defined
in
MOZ_BUILD_APP
/
app
-
system
-
headers
.
mozbuild
"
)
depends
(
"
-
-
enable
-
app
-
system
-
headers
"
)
def
app_system_headers
(
value
)
:
if
value
:
return
True
set_config
(
"
MOZ_APP_SYSTEM_HEADERS
"
app_system_headers
)
depends
(
target
)
def
printing_default
(
target
)
:
return
target
.
os
!
=
"
iOS
"
option
(
"
-
-
disable
-
printing
"
default
=
printing_default
help
=
"
{
Enable
|
Disable
}
printing
support
"
)
depends
(
"
-
-
disable
-
printing
"
)
def
printing
(
value
)
:
if
value
:
return
True
set_config
(
"
NS_PRINTING
"
printing
)
set_define
(
"
NS_PRINTING
"
printing
)
set_define
(
"
NS_PRINT_PREVIEW
"
printing
)
depends
(
toolkit
)
def
no_speechd_on_non_gtk
(
toolkit
)
:
if
toolkit
!
=
"
gtk
"
:
return
False
imply_option
(
"
-
-
enable
-
synth
-
speechd
"
no_speechd_on_non_gtk
reason
=
"
-
-
enable
-
default
-
toolkit
"
)
option
(
"
-
-
disable
-
synth
-
speechd
"
help
=
"
Disable
speech
-
dispatcher
support
"
)
set_config
(
"
MOZ_SYNTH_SPEECHD
"
depends_if
(
"
-
-
disable
-
synth
-
speechd
"
)
(
lambda
_
:
True
)
)
option
(
"
-
-
disable
-
webspeech
"
help
=
"
Disable
support
for
HTML
Speech
API
"
)
depends
(
"
-
-
disable
-
webspeech
"
)
def
webspeech
(
value
)
:
if
value
:
return
True
set_config
(
"
MOZ_WEBSPEECH
"
webspeech
)
set_define
(
"
MOZ_WEBSPEECH
"
webspeech
)
option
(
"
-
-
enable
-
webspeechtestbackend
"
default
=
webspeech
help
=
"
{
Enable
|
Disable
}
support
for
HTML
Speech
API
Test
Backend
"
)
depends_if
(
"
-
-
enable
-
webspeechtestbackend
"
)
def
webspeech_test_backend
(
value
)
:
return
True
set_config
(
"
MOZ_WEBSPEECH_TEST_BACKEND
"
webspeech_test_backend
)
set_define
(
"
MOZ_WEBSPEECH_TEST_BACKEND
"
webspeech_test_backend
)
depends
(
target
milestone
)
def
skia_pdf_default
(
target
milestone
)
:
return
milestone
.
is_nightly
and
target
.
os
!
=
"
WINNT
"
option
(
"
-
-
enable
-
skia
-
pdf
"
default
=
skia_pdf_default
help
=
"
{
Enable
|
Disable
}
Skia
PDF
"
)
set_config
(
"
MOZ_ENABLE_SKIA_PDF
"
True
when
=
"
-
-
enable
-
skia
-
pdf
"
)
set_define
(
"
MOZ_ENABLE_SKIA_PDF
"
True
when
=
"
-
-
enable
-
skia
-
pdf
"
)
set_config
(
"
SKIA_INCLUDES
"
[
"
/
gfx
/
skia
"
"
/
gfx
/
skia
/
skia
"
]
)
system_lib_option
(
"
-
-
with
-
system
-
webp
"
help
=
"
Use
system
libwebp
(
located
with
pkgconfig
)
"
when
=
use_pkg_config
)
system_webp
=
pkg_check_modules
(
"
MOZ_WEBP
"
"
libwebp
>
=
1
.
0
.
2
libwebpdemux
>
=
1
.
0
.
2
"
when
=
"
-
-
with
-
system
-
webp
"
)
set_config
(
"
MOZ_SYSTEM_WEBP
"
depends
(
when
=
system_webp
)
(
lambda
:
True
)
)
depends
(
target
"
-
-
enable
-
skia
-
pdf
"
)
def
tree_freetype
(
target
skia_pdf
)
:
if
target
.
os
=
=
"
Android
"
or
(
skia_pdf
and
target
.
os
=
=
"
WINNT
"
)
:
return
True
set_define
(
"
MOZ_TREE_FREETYPE
"
tree_freetype
)
set_config
(
"
MOZ_TREE_FREETYPE
"
tree_freetype
)
set_define
(
"
HAVE_FT_GLYPHSLOT_EMBOLDEN
"
tree_freetype
)
set_define
(
"
HAVE_FT_LOAD_SFNT_TABLE
"
tree_freetype
)
depends
(
freetype2_combined_info
tree_freetype
build_environment
)
def
ft2_info
(
freetype2_combined_info
tree_freetype
build_env
)
:
if
tree_freetype
:
return
namespace
(
cflags
=
(
"
-
I
%
s
/
modules
/
freetype2
/
include
"
%
build_env
.
topsrcdir
)
libs
=
(
)
)
if
freetype2_combined_info
:
return
freetype2_combined_info
set_config
(
"
FT2_LIBS
"
ft2_info
.
libs
)
depends
(
target
tree_freetype
freetype2_info
)
def
enable_cairo_ft
(
target
tree_freetype
freetype2_info
)
:
return
freetype2_info
or
(
tree_freetype
and
target
.
os
!
=
"
WINNT
"
)
set_config
(
"
MOZ_ENABLE_CAIRO_FT
"
True
when
=
enable_cairo_ft
)
set_config
(
"
CAIRO_FT_CFLAGS
"
ft2_info
.
cflags
when
=
enable_cairo_ft
)
option
(
"
-
-
disable
-
webdriver
"
help
=
"
Disable
support
for
WebDriver
remote
protocols
"
)
depends
(
"
-
-
disable
-
webdriver
"
)
def
webdriver
(
enabled
)
:
if
enabled
:
return
True
set_config
(
"
ENABLE_WEBDRIVER
"
webdriver
)
set_define
(
"
ENABLE_WEBDRIVER
"
webdriver
)
depends
(
"
-
-
enable
-
tests
"
target
cross_compiling
hazard_analysis
asan
"
MOZ_AUTOMATION
"
)
def
geckodriver_default
(
enable_tests
target
cross_compile
hazard
asan
automation
)
:
if
not
enable_tests
:
return
False
if
hazard
or
target
.
os
=
=
"
Android
"
or
(
asan
and
cross_compile
)
:
return
False
if
automation
:
return
False
return
True
option
(
"
-
-
enable
-
geckodriver
"
default
=
geckodriver_default
when
=
"
-
-
enable
-
compile
-
environment
"
help
=
"
{
Build
|
Do
not
build
}
geckodriver
"
)
depends
(
"
-
-
enable
-
geckodriver
"
when
=
"
-
-
enable
-
compile
-
environment
"
)
def
geckodriver
(
enabled
)
:
if
enabled
:
return
True
set_config
(
"
MOZ_GECKODRIVER
"
geckodriver
)
depends
(
target
)
def
webrtc_default
(
target
)
:
os_match
=
target
.
kernel
in
(
"
Linux
"
"
WINNT
"
"
DragonFly
"
"
FreeBSD
"
"
kFreeBSD
"
"
NetBSD
"
"
OpenBSD
"
)
if
not
os_match
:
os_match
=
target
.
os
in
(
"
OSX
"
)
cpu_match
=
target
.
cpu
in
(
"
x86_64
"
"
arm
"
"
aarch64
"
"
x86
"
"
ia64
"
"
loongarch64
"
"
mips32
"
"
mips64
"
"
ppc
"
"
ppc64
"
"
riscv64
"
)
return
os_match
and
cpu_match
and
target
.
endianness
=
=
"
little
"
option
(
"
-
-
disable
-
webrtc
"
default
=
webrtc_default
help
=
"
{
Enable
|
Disable
}
support
for
WebRTC
"
)
depends
(
"
-
-
disable
-
webrtc
"
)
def
webrtc
(
enabled
)
:
if
enabled
:
return
True
set_config
(
"
MOZ_WEBRTC
"
webrtc
)
set_define
(
"
MOZ_WEBRTC
"
webrtc
)
set_config
(
"
MOZ_SCTP
"
webrtc
)
set_config
(
"
MOZ_SRTP
"
webrtc
)
set_config
(
"
MOZ_WEBRTC_SIGNALING
"
webrtc
)
set_config
(
"
MOZ_PEERCONNECTION
"
webrtc
)
set_define
(
"
MOZ_PEERCONNECTION
"
webrtc
)
set_config
(
"
MOZ_WEBRTC_ASSERT_ALWAYS
"
webrtc
)
set_define
(
"
MOZ_WEBRTC_ASSERT_ALWAYS
"
webrtc
)
depends
(
target
webrtc
)
def
raw_media_default
(
target
webrtc
)
:
if
target
.
os
=
=
"
Android
"
:
return
True
if
webrtc
:
return
True
option
(
"
-
-
enable
-
raw
"
default
=
raw_media_default
help
=
"
{
Enable
|
Disable
}
support
for
RAW
media
"
)
set_define
(
"
MOZ_RAW
"
depends_if
(
"
-
-
enable
-
raw
"
)
(
lambda
_
:
True
)
)
depends
(
webrtc
when
=
toolkit_gtk
)
def
x11_libs
(
webrtc
)
:
libs
=
[
"
x11
"
"
xcb
"
"
xcb
-
shm
"
"
x11
-
xcb
"
"
xext
"
"
xrandr
>
=
1
.
4
.
0
"
]
if
webrtc
:
libs
+
=
[
"
xcomposite
"
"
xcursor
"
"
xdamage
"
"
xfixes
"
"
xi
"
]
return
libs
x11
=
pkg_check_modules
(
"
MOZ_X11
"
x11_libs
allow_missing
=
toolkit_gtk_x11_optional
when
=
toolkit_gtk_x11
config
=
False
)
depends
(
x11
target_is_openbsd
)
def
moz_x11_libs
(
x11
target_is_openbsd
)
:
if
not
x11
:
return
[
]
if
target_is_openbsd
:
rpath
=
tuple
(
f
"
-
Wl
-
rpath
-
link
{
flag
[
2
:
]
}
"
for
flag
in
x11
.
libs
if
flag
.
startswith
(
"
-
L
"
)
)
else
:
rpath
=
(
)
return
x11
.
libs
+
rpath
set_config
(
"
MOZ_X11_CFLAGS
"
x11
.
cflags
)
set_config
(
"
MOZ_X11_LIBS
"
moz_x11_libs
)
set_config
(
"
MOZ_X11
"
True
when
=
x11
)
set_define
(
"
MOZ_X11
"
True
when
=
x11
)
pkg_check_modules
(
"
MOZ_X11_SM
"
[
"
ice
"
"
sm
"
]
cflags_only
=
True
allow_missing
=
toolkit_gtk_x11_optional
when
=
toolkit_gtk_x11
)
option
(
"
-
-
enable
-
address
-
sanitizer
-
reporter
"
help
=
"
Enable
Address
Sanitizer
Reporter
Extension
"
)
depends
(
"
-
-
enable
-
address
-
sanitizer
-
reporter
"
)
def
enable_asan_reporter
(
value
)
:
if
value
:
return
True
set_config
(
"
MOZ_ASAN_REPORTER
"
enable_asan_reporter
)
set_define
(
"
MOZ_ASAN_REPORTER
"
enable_asan_reporter
)
with
only_when
(
compile_environment
&
depends
(
target
.
os
)
(
lambda
os
:
os
!
=
"
WINNT
"
)
)
:
set_define
(
"
HAVE_STAT64
"
check_symbol
(
"
stat64
"
)
)
set_define
(
"
HAVE_LSTAT64
"
check_symbol
(
"
lstat64
"
)
)
set_define
(
"
HAVE_TRUNCATE64
"
check_symbol
(
"
truncate64
"
)
)
set_define
(
"
HAVE_STATVFS64
"
check_symbol
(
"
statvfs64
"
)
)
set_define
(
"
HAVE_STATVFS
"
check_symbol
(
"
statvfs
"
)
)
set_define
(
"
HAVE_STATFS64
"
check_symbol
(
"
statfs64
"
)
)
set_define
(
"
HAVE_STATFS
"
check_symbol
(
"
statfs
"
)
)
set_define
(
"
HAVE_LUTIMES
"
check_symbol
(
"
lutimes
"
)
)
set_define
(
"
HAVE_POSIX_FADVISE
"
check_symbol
(
"
posix_fadvise
"
)
)
set_define
(
"
HAVE_POSIX_FALLOCATE
"
check_symbol
(
"
posix_fallocate
"
)
)
set_define
(
"
HAVE_EVENTFD
"
check_symbol
(
"
eventfd
"
)
)
have_arc4random
=
check_symbol
(
"
arc4random
"
)
set_define
(
"
HAVE_ARC4RANDOM
"
have_arc4random
)
set_define
(
"
HAVE_ARC4RANDOM_BUF
"
check_symbol
(
"
arc4random_buf
"
)
)
set_define
(
"
HAVE_MALLINFO
"
check_symbol
(
"
mallinfo
"
)
)
with
only_when
(
compile_environment
&
depends
(
target
.
os
)
(
lambda
os
:
os
!
=
"
WINNT
"
)
)
:
set_define
(
"
HAVE_SYSIOCCOM_H
"
check_header
(
"
sys
/
ioccom
.
h
"
)
)
with
only_when
(
"
-
-
enable
-
compile
-
environment
"
)
:
depends
(
host
target
)
def
has_elfhack
(
host
target
)
:
return
(
target
.
kernel
=
=
"
Linux
"
and
host
.
kernel
=
=
"
Linux
"
and
target
.
cpu
in
(
"
arm
"
"
aarch64
"
"
x86
"
"
x86_64
"
)
)
option
(
"
-
-
disable
-
elf
-
hack
"
nargs
=
"
?
"
choices
=
(
"
legacy
"
"
relr
"
)
help
=
"
{
Enable
|
Disable
}
elf
hacks
"
when
=
has_elfhack
)
depends
(
"
-
-
enable
-
elf
-
hack
"
when
=
has_elfhack
)
def
may_enable_legacy_elfhack
(
enable
)
:
if
enable
and
enable
!
=
(
"
relr
"
)
:
return
enable
depends
(
"
-
-
enable
-
elf
-
hack
"
when
=
has_elfhack
)
def
may_enable_relrhack
(
enable
)
:
if
enable
and
enable
!
=
(
"
legacy
"
)
:
return
enable
option
(
"
-
-
enable
-
packed
-
relative
-
relocs
"
help
=
"
{
Enable
|
Disable
}
packed
relative
relocations
(
RELR
)
"
when
=
target_has_linux_kernel
)
depends
(
"
-
-
enable
-
packed
-
relative
-
relocs
"
have_arc4random
android_version
when
=
target_has_linux_kernel
)
def
may_use_pack_relative_relocs
(
enable
have_arc4random
android_version
)
:
if
enable
:
return
True
if
not
enable
and
enable
.
origin
!
=
"
default
"
:
return
False
if
android_version
:
return
android_version
>
=
30
return
have_arc4random
depends
(
c_compiler
extra_toolchain_flags
linker_ldflags
readelf
when
=
may_use_pack_relative_relocs
|
may_enable_relrhack
)
checking
(
"
for
-
z
pack
-
relative
-
relocs
option
to
ld
"
bool
)
imports
(
_from
=
"
__builtin__
"
_import
=
"
FileNotFoundError
"
)
imports
(
"
os
"
)
imports
(
"
textwrap
"
)
def
has_pack_relative_relocs
(
c_compiler
extra_toolchain_flags
linker_ldflags
readelf
)
:
with
create_temporary_file
(
suffix
=
"
.
out
"
)
as
path
:
pack_rel_relocs
=
[
"
-
Wl
-
z
pack
-
relative
-
relocs
"
]
if
(
try_invoke_compiler
(
None
[
c_compiler
.
compiler
]
+
c_compiler
.
flags
c_compiler
.
language
"
int
main
(
)
{
return
0
;
}
\
nint
(
*
ptr
)
(
)
=
main
;
"
pack_rel_relocs
+
[
"
-
pie
"
"
-
o
"
path
]
+
(
extra_toolchain_flags
or
[
]
)
+
linker_ldflags
wrapper
=
c_compiler
.
wrapper
onerror
=
lambda
:
None
)
is
not
None
)
:
env
=
os
.
environ
.
copy
(
)
env
[
"
LANG
"
]
=
"
C
"
dyn
=
check_cmd_output
(
readelf
"
-
d
"
path
env
=
env
)
.
splitlines
(
)
tags
=
[
int
(
l
.
split
(
)
[
0
]
16
)
for
l
in
dyn
if
l
.
strip
(
)
.
startswith
(
"
0x
"
)
]
if
0x23
in
tags
:
needed
=
[
l
for
l
in
dyn
if
l
.
split
(
)
[
1
:
2
]
=
=
[
"
(
NEEDED
)
"
]
]
is_glibc
=
any
(
l
.
endswith
(
"
[
libc
.
so
.
6
]
"
)
for
l
in
needed
)
if
is_glibc
:
versions
=
check_cmd_output
(
readelf
"
-
V
"
path
env
=
env
)
if
"
GLIBC_ABI_DT_RELR
"
in
versions
.
split
(
)
:
return
pack_rel_relocs
else
:
return
pack_rel_relocs
depends
(
has_pack_relative_relocs
may_enable_legacy_elfhack
may_enable_relrhack
may_use_pack_relative_relocs
when
=
has_pack_relative_relocs
)
def
pack_relative_relocs_flags
(
flags
may_enable_legacy_elfhack
may_enable_relrhack
may_use_pack_relative_relocs
)
:
if
may_enable_relrhack
and
may_enable_relrhack
.
origin
!
=
"
default
"
:
return
None
if
may_enable_legacy_elfhack
and
may_enable_legacy_elfhack
.
origin
!
=
"
default
"
:
return
None
if
may_use_pack_relative_relocs
:
return
flags
depends
(
select_linker
pack_relative_relocs_flags
has_pack_relative_relocs
may_enable_legacy_elfhack
may_enable_relrhack
when
=
has_elfhack
)
def
which_elf_hack
(
linker
pack_relative_relocs_flags
has_pack_relative_relocs
may_enable_legacy_elfhack
may_enable_relrhack
)
:
if
pack_relative_relocs_flags
:
return
if
may_enable_relrhack
:
if
has_pack_relative_relocs
:
return
"
relr
"
elif
(
may_enable_relrhack
.
origin
!
=
"
default
"
and
not
may_enable_legacy_elfhack
)
:
die
(
"
Cannot
enable
relrhack
without
linker
support
for
-
z
pack
-
relative
-
relocs
"
)
if
may_enable_legacy_elfhack
:
if
linker
and
linker
.
KIND
in
(
"
lld
"
"
mold
"
)
:
if
may_enable_legacy_elfhack
.
origin
!
=
"
default
"
:
die
(
f
"
Cannot
enable
elfhack
with
{
linker
.
KIND
}
.
"
"
Use
-
-
enable
-
linker
=
bfd
-
-
enable
-
linker
=
gold
or
-
-
disable
-
elf
-
hack
"
)
else
:
return
"
legacy
"
set_config
(
"
USE_ELF_HACK
"
True
when
=
depends
(
which_elf_hack
)
(
lambda
x
:
x
=
=
"
legacy
"
)
)
use_relrhack
=
depends
(
which_elf_hack
)
(
lambda
x
:
x
=
=
"
relr
"
)
set_config
(
"
RELRHACK
"
True
when
=
use_relrhack
)
depends
(
c_compiler
linker_ldflags
when
=
use_relrhack
)
def
relrhack_real_linker
(
c_compiler
linker_ldflags
)
:
ld
=
"
ld
"
for
flag
in
linker_ldflags
:
if
flag
.
startswith
(
"
-
fuse
-
ld
=
"
)
:
ld
=
"
ld
.
"
+
flag
[
len
(
"
-
fuse
-
ld
=
"
)
:
]
ld
=
check_cmd_output
(
c_compiler
.
compiler
f
"
-
-
print
-
prog
-
name
=
{
ld
}
"
*
c_compiler
.
flags
)
return
ld
.
rstrip
(
)
depends
(
relrhack_real_linker
when
=
use_relrhack
)
def
relrhack_linker
(
ld
)
:
return
os
.
path
.
basename
(
ld
)
set_config
(
"
RELRHACK_LINKER
"
relrhack_linker
)
std_filesystem
=
host_cxx_compiler
.
try_run
(
header
=
"
#
include
<
filesystem
>
"
body
=
'
auto
foo
=
std
:
:
filesystem
:
:
absolute
(
"
"
)
;
'
flags
=
host_linker_ldflags
when
=
use_relrhack
onerror
=
lambda
:
None
)
stdcxxfs
=
host_cxx_compiler
.
try_run
(
header
=
"
#
include
<
filesystem
>
"
body
=
'
auto
foo
=
std
:
:
filesystem
:
:
absolute
(
"
"
)
;
'
flags
=
depends
(
host_linker_ldflags
)
(
lambda
flags
:
(
flags
or
[
]
)
+
[
"
-
lstdc
+
+
fs
"
]
)
check_msg
=
"
whether
std
:
:
filesystem
requires
-
lstdc
+
+
fs
"
when
=
use_relrhack
&
depends
(
std_filesystem
)
(
lambda
x
:
not
x
)
onerror
=
lambda
:
None
)
set_config
(
"
RELRHACK_LIBS
"
[
"
stdc
+
+
fs
"
]
when
=
stdcxxfs
)
depends
(
build_environment
relrhack_real_linker
when
=
use_relrhack
)
def
relrhack_ldflags
(
build_env
ld
)
:
flags
=
[
"
-
B
"
os
.
path
.
join
(
build_env
.
topobjdir
"
build
"
"
unix
"
"
elfhack
"
)
]
if
os
.
path
.
basename
(
ld
)
!
=
ld
:
flags
.
append
(
f
"
-
Wl
-
-
real
-
linker
{
ld
}
"
)
return
flags
set_config
(
"
RELRHACK_LDFLAGS
"
relrhack_ldflags
)
depends
(
build_environment
)
def
idl_roots
(
build_env
)
:
return
namespace
(
ipdl_root
=
os
.
path
.
join
(
build_env
.
topobjdir
"
ipc
"
"
ipdl
"
)
webidl_root
=
os
.
path
.
join
(
build_env
.
topobjdir
"
dom
"
"
bindings
"
)
xpcom_root
=
os
.
path
.
join
(
build_env
.
topobjdir
"
xpcom
"
"
components
"
)
)
set_config
(
"
WEBIDL_ROOT
"
idl_roots
.
webidl_root
)
set_config
(
"
IPDL_ROOT
"
idl_roots
.
ipdl_root
)
set_config
(
"
XPCOM_ROOT
"
idl_roots
.
xpcom_root
)
option
(
"
-
-
enable
-
proxy
-
bypass
-
protection
"
help
=
"
Prevent
suspected
or
confirmed
proxy
bypasses
"
)
depends_if
(
"
-
-
enable
-
proxy
-
bypass
-
protection
"
)
def
proxy_bypass_protection
(
_
)
:
return
True
set_config
(
"
MOZ_PROXY_BYPASS_PROTECTION
"
proxy_bypass_protection
)
set_define
(
"
MOZ_PROXY_BYPASS_PROTECTION
"
proxy_bypass_protection
)
option
(
"
-
-
disable
-
proxy
-
direct
-
failover
"
help
=
"
Disable
direct
failover
for
system
requests
"
)
depends_if
(
"
-
-
disable
-
proxy
-
direct
-
failover
"
)
def
proxy_direct_failover
(
value
)
:
if
value
:
return
True
set_config
(
"
MOZ_PROXY_DIRECT_FAILOVER
"
proxy_direct_failover
)
set_define
(
"
MOZ_PROXY_DIRECT_FAILOVER
"
proxy_direct_failover
)
depends
(
c_compiler
toolchain_prefix
)
def
midl_names
(
c_compiler
toolchain_prefix
)
:
if
c_compiler
and
c_compiler
.
type
in
[
"
gcc
"
"
clang
"
]
:
widl
=
(
"
widl
"
)
if
toolchain_prefix
:
prefixed
=
tuple
(
"
%
s
%
s
"
%
(
p
"
widl
"
)
for
p
in
toolchain_prefix
)
widl
=
prefixed
+
widl
return
widl
return
(
"
midl
.
exe
"
)
depends
(
target
"
-
-
enable
-
compile
-
environment
"
)
def
check_for_midl
(
target
compile_environment
)
:
if
target
.
os
!
=
"
WINNT
"
:
return
if
compile_environment
:
return
True
midl
=
check_prog
(
"
MIDL
"
midl_names
when
=
check_for_midl
allow_missing
=
True
paths
=
sdk_bin_path
allow_spaces
=
True
)
option
(
env
=
"
MIDL_FLAGS
"
nargs
=
1
help
=
"
Extra
flags
to
pass
to
MIDL
"
)
depends
(
"
MIDL_FLAGS
"
target
midl
when
=
depends
(
midl
target
)
(
lambda
m
t
:
m
and
t
.
kernel
=
=
"
WINNT
"
)
)
def
midl_flags
(
flags
target
midl
)
:
if
flags
:
flags
=
flags
[
0
]
.
split
(
)
else
:
flags
=
[
]
if
not
midl
.
endswith
(
"
widl
"
)
:
env
=
{
"
x86
"
:
"
win32
"
"
x86_64
"
:
"
x64
"
"
aarch64
"
:
"
arm64
"
}
[
target
.
cpu
]
return
flags
+
[
"
-
nologo
"
"
-
no_cpp
"
"
-
env
"
env
]
return
(
flags
+
{
"
x86
"
:
[
"
-
-
win32
"
"
-
m32
"
]
"
x86_64
"
:
[
"
-
-
win64
"
"
-
m64
"
]
}
[
target
.
cpu
]
)
set_config
(
"
MIDL_FLAGS
"
midl_flags
)
option
(
"
-
-
disable
-
accessibility
"
help
=
"
Disable
accessibility
support
"
)
depends
(
"
-
-
enable
-
accessibility
"
check_for_midl
midl
c_compiler
)
def
accessibility
(
value
check_for_midl
midl
c_compiler
)
:
enabled
=
bool
(
value
)
if
not
enabled
:
return
if
check_for_midl
and
not
midl
:
if
c_compiler
and
c_compiler
.
type
in
(
"
gcc
"
"
clang
"
)
:
die
(
"
You
have
accessibility
enabled
but
widl
could
not
be
found
.
"
"
Add
-
-
disable
-
accessibility
to
your
mozconfig
or
install
widl
.
"
"
See
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
docs
/
Cross_Compile_Mozilla_for_Mingw32
for
details
.
"
)
else
:
die
(
"
MIDL
could
not
be
found
.
"
"
Building
accessibility
without
MIDL
is
not
supported
.
"
)
return
enabled
set_config
(
"
ACCESSIBILITY
"
accessibility
)
set_define
(
"
ACCESSIBILITY
"
accessibility
)
depends
(
moz_debug
developer_options
)
def
a11y_log
(
debug
developer_options
)
:
return
debug
or
developer_options
set_config
(
"
A11Y_LOG
"
True
when
=
a11y_log
)
set_define
(
"
A11Y_LOG
"
True
when
=
a11y_log
)
depends
(
milestone
)
def
require_signing
(
milestone
)
:
return
milestone
.
is_release_or_beta
and
not
milestone
.
is_esr
option
(
env
=
"
MOZ_REQUIRE_SIGNING
"
default
=
require_signing
help
=
"
Enforce
that
add
-
ons
are
signed
by
the
trusted
root
"
)
set_config
(
"
MOZ_REQUIRE_SIGNING
"
True
when
=
"
MOZ_REQUIRE_SIGNING
"
)
set_define
(
"
MOZ_REQUIRE_SIGNING
"
True
when
=
"
MOZ_REQUIRE_SIGNING
"
)
option
(
"
-
-
with
-
unsigned
-
addon
-
scopes
"
nargs
=
"
+
"
choices
=
(
"
app
"
"
system
"
)
help
=
"
Addon
scopes
where
signature
is
not
required
"
)
depends
(
"
-
-
with
-
unsigned
-
addon
-
scopes
"
)
def
unsigned_addon_scopes
(
scopes
)
:
return
namespace
(
app
=
"
app
"
in
scopes
or
None
system
=
"
system
"
in
scopes
or
None
)
set_config
(
"
MOZ_UNSIGNED_APP_SCOPE
"
unsigned_addon_scopes
.
app
)
set_config
(
"
MOZ_UNSIGNED_SYSTEM_SCOPE
"
unsigned_addon_scopes
.
system
)
option
(
"
-
-
allow
-
addon
-
sideload
"
default
=
milestone
.
is_esr
help
=
"
Addon
sideloading
is
allowed
"
)
set_config
(
"
MOZ_ALLOW_ADDON_SIDELOAD
"
True
when
=
"
-
-
allow
-
addon
-
sideload
"
)
depends
(
milestone
)
def
extensions_webidl_bindings_default
(
milestone
)
:
return
milestone
.
is_nightly
option
(
"
-
-
enable
-
extensions
-
webidl
-
bindings
"
default
=
extensions_webidl_bindings_default
help
=
"
{
Enable
|
Disable
}
building
experimental
WebExtensions
WebIDL
bindings
"
)
depends
(
"
-
-
enable
-
extensions
-
webidl
-
bindings
"
)
def
extensions_webidl_enabled
(
value
)
:
return
bool
(
value
)
set_config
(
"
MOZ_WEBEXT_WEBIDL_ENABLED
"
extensions_webidl_enabled
)
depends
(
target
)
def
launcher_process_default
(
target
)
:
return
target
.
os
=
=
"
WINNT
"
option
(
"
-
-
enable
-
launcher
-
process
"
default
=
launcher_process_default
help
=
"
{
Enable
|
Disable
}
launcher
process
by
default
"
)
depends
(
"
-
-
enable
-
launcher
-
process
"
target
)
def
launcher
(
value
target
)
:
enabled
=
bool
(
value
)
if
enabled
and
target
.
os
!
=
"
WINNT
"
:
die
(
"
Cannot
enable
launcher
process
on
%
s
"
target
.
os
)
if
enabled
:
return
True
set_config
(
"
MOZ_LAUNCHER_PROCESS
"
launcher
)
set_define
(
"
MOZ_LAUNCHER_PROCESS
"
launcher
)
depends
(
build_project
target
"
-
-
enable
-
compile
-
environment
"
)
def
check_for_llvm_dlltool
(
build_project
target
compile_environment
)
:
if
build_project
!
=
"
browser
"
:
return
if
target
.
os
!
=
"
WINNT
"
:
return
return
compile_environment
llvm_dlltool
=
check_prog
(
"
LLVM_DLLTOOL
"
(
"
llvm
-
dlltool
"
)
what
=
"
llvm
-
dlltool
"
when
=
check_for_llvm_dlltool
paths
=
clang_search_path
)
depends
(
target
when
=
llvm_dlltool
)
def
llvm_dlltool_flags
(
target
)
:
arch
=
{
"
x86
"
:
"
i386
"
"
x86_64
"
:
"
i386
:
x86
-
64
"
"
aarch64
"
:
"
arm64
"
}
[
target
.
cpu
]
return
[
"
-
m
"
arch
]
set_config
(
"
LLVM_DLLTOOL_FLAGS
"
llvm_dlltool_flags
)
option
(
"
-
-
enable
-
bits
-
download
"
when
=
target_is_windows
default
=
target_is_windows
help
=
"
{
Enable
|
Disable
}
building
BITS
download
support
"
)
set_define
(
"
MOZ_BITS_DOWNLOAD
"
depends_if
(
"
-
-
enable
-
bits
-
download
"
when
=
target_is_windows
)
(
lambda
_
:
True
)
)
set_config
(
"
MOZ_BITS_DOWNLOAD
"
depends_if
(
"
-
-
enable
-
bits
-
download
"
when
=
target_is_windows
)
(
lambda
_
:
True
)
)
depends
(
target
)
def
bundled_fonts_default
(
target
)
:
return
target
.
os
=
=
"
WINNT
"
or
target
.
kernel
=
=
"
Linux
"
depends
(
build_project
)
def
allow_bundled_fonts
(
project
)
:
return
project
=
=
"
browser
"
or
project
=
=
"
comm
/
mail
"
option
(
"
-
-
enable
-
bundled
-
fonts
"
default
=
bundled_fonts_default
when
=
allow_bundled_fonts
help
=
"
{
Enable
|
Disable
}
support
for
bundled
fonts
on
desktop
platforms
"
)
set_define
(
"
MOZ_BUNDLED_FONTS
"
depends_if
(
"
-
-
enable
-
bundled
-
fonts
"
when
=
allow_bundled_fonts
)
(
lambda
_
:
True
)
)
depends
(
moz_debug
)
def
reflow_perf
(
debug
)
:
if
debug
:
return
True
option
(
"
-
-
enable
-
reflow
-
perf
"
default
=
reflow_perf
help
=
"
{
Enable
|
Disable
}
reflow
performance
tracing
"
)
set_define
(
"
MOZ_REFLOW_PERF
"
depends_if
(
"
-
-
enable
-
reflow
-
perf
"
)
(
lambda
_
:
True
)
)
set_define
(
"
MOZ_REFLOW_PERF_DSP
"
reflow_perf
)
depends
(
moz_debug
)
def
layout_debugger
(
debug
)
:
if
debug
:
return
True
option
(
"
-
-
enable
-
layout
-
debugger
"
default
=
layout_debugger
help
=
"
{
Enable
|
Disable
}
layout
debugger
"
)
set_config
(
"
MOZ_LAYOUT_DEBUGGER
"
True
when
=
"
-
-
enable
-
layout
-
debugger
"
)
set_define
(
"
MOZ_LAYOUT_DEBUGGER
"
True
when
=
"
-
-
enable
-
layout
-
debugger
"
)
with
only_when
(
compile_environment
)
:
fxc
=
check_prog
(
"
FXC
"
(
"
fxc
.
exe
"
"
fxc2
.
exe
"
)
when
=
depends
(
target
)
(
lambda
t
:
t
.
kernel
=
=
"
WINNT
"
)
paths
=
sdk_bin_path
allow_spaces
=
True
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
libvpx
"
help
=
"
Use
system
libvpx
(
located
with
pkgconfig
)
"
when
=
use_pkg_config
)
depends
(
"
-
-
with
-
system
-
libvpx
"
when
=
use_pkg_config
)
def
with_system_libvpx_option
(
with_system_libvpx
)
:
return
with_system_libvpx
with
only_when
(
"
-
-
with
-
system
-
libvpx
"
)
:
vpx
=
pkg_check_modules
(
"
MOZ_LIBVPX
"
"
vpx
>
=
1
.
10
.
0
"
)
check_header
(
"
vpx
/
vpx_decoder
.
h
"
flags
=
vpx
.
cflags
onerror
=
lambda
:
die
(
"
Couldn
'
t
find
vpx
/
vpx_decoder
.
h
which
is
required
to
build
"
"
with
system
libvpx
.
Use
-
-
without
-
system
-
libvpx
to
build
"
"
with
in
-
tree
libvpx
.
"
)
)
check_symbol
(
"
vpx_codec_dec_init_ver
"
flags
=
vpx
.
libs
onerror
=
lambda
:
die
(
"
-
-
with
-
system
-
libvpx
requested
but
symbol
vpx_codec_dec_init_ver
"
"
not
found
"
)
)
set_config
(
"
MOZ_SYSTEM_LIBVPX
"
True
)
depends
(
with_system_libvpx_option
target
)
def
in_tree_vpx
(
system_libvpx
target
)
:
if
system_libvpx
:
return
arm_asm
=
(
target
.
cpu
=
=
"
arm
"
)
or
None
return
namespace
(
arm_asm
=
arm_asm
)
depends
(
target
when
=
in_tree_vpx
)
def
vpx_nasm
(
target
)
:
if
target
.
cpu
in
(
"
x86
"
"
x86_64
"
)
:
if
target
.
kernel
=
=
"
WINNT
"
:
return
namespace
(
version
=
"
2
.
03
"
what
=
"
VPX
"
)
return
namespace
(
what
=
"
VPX
"
)
depends
(
in_tree_vpx
vpx_nasm
target
neon_flags
)
def
vpx_as_flags
(
vpx
vpx_nasm
target
neon_flags
)
:
if
vpx
and
vpx
.
arm_asm
:
return
neon_flags
elif
vpx
and
vpx_nasm
and
target
.
os
!
=
"
WINNT
"
and
target
.
cpu
!
=
"
x86_64
"
:
return
(
"
-
DPIC
"
)
set_config
(
"
VPX_USE_NASM
"
True
when
=
vpx_nasm
)
set_config
(
"
VPX_ASFLAGS
"
vpx_as_flags
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
jpeg
"
nargs
=
"
?
"
help
=
"
Use
system
libjpeg
(
installed
at
given
prefix
)
"
)
depends_if
(
"
-
-
with
-
system
-
jpeg
"
)
def
jpeg_flags
(
value
)
:
if
len
(
value
)
:
return
namespace
(
cflags
=
(
"
-
I
%
s
/
include
"
%
value
[
0
]
)
ldflags
=
(
"
-
L
%
s
/
lib
"
%
value
[
0
]
"
-
ljpeg
"
)
)
return
namespace
(
ldflags
=
(
"
-
ljpeg
"
)
)
with
only_when
(
"
-
-
with
-
system
-
jpeg
"
)
:
check_symbol
(
"
jpeg_destroy_compress
"
flags
=
jpeg_flags
.
ldflags
onerror
=
lambda
:
die
(
"
-
-
with
-
system
-
jpeg
requested
but
symbol
"
"
jpeg_destroy_compress
not
found
.
"
)
)
c_compiler
.
try_compile
(
includes
=
[
"
stdio
.
h
"
"
sys
/
types
.
h
"
"
jpeglib
.
h
"
]
body
=
"
"
"
#
if
JPEG_LIB_VERSION
<
62
#
error
Insufficient
JPEG
library
version
#
endif
"
"
"
flags
=
jpeg_flags
.
cflags
check_msg
=
"
for
sufficient
jpeg
library
version
"
onerror
=
lambda
:
die
(
"
Insufficient
JPEG
library
version
for
"
"
-
-
with
-
system
-
jpeg
(
62
required
)
"
)
)
c_compiler
.
try_compile
(
includes
=
[
"
stdio
.
h
"
"
sys
/
types
.
h
"
"
jpeglib
.
h
"
]
body
=
"
"
"
#
ifndef
JCS_EXTENSIONS
#
error
libjpeg
-
turbo
JCS_EXTENSIONS
required
#
endif
"
"
"
flags
=
jpeg_flags
.
cflags
check_msg
=
"
for
sufficient
libjpeg
-
turbo
JCS_EXTENSIONS
"
onerror
=
lambda
:
die
(
"
libjpeg
-
turbo
JCS_EXTENSIONS
required
for
"
"
-
-
with
-
system
-
jpeg
"
)
)
set_config
(
"
MOZ_JPEG_CFLAGS
"
jpeg_flags
.
cflags
)
set_config
(
"
MOZ_JPEG_LIBS
"
jpeg_flags
.
ldflags
)
depends
(
"
-
-
with
-
system
-
jpeg
"
target
neon_flags
)
def
in_tree_jpeg_arm
(
system_jpeg
target
neon_flags
)
:
if
system_jpeg
:
return
if
target
.
cpu
=
=
"
arm
"
:
return
neon_flags
elif
target
.
cpu
=
=
"
aarch64
"
:
return
(
"
-
march
=
armv8
-
a
"
)
depends
(
"
-
-
with
-
system
-
jpeg
"
target
)
def
in_tree_jpeg_mips64
(
system_jpeg
target
)
:
if
system_jpeg
:
return
if
target
.
cpu
=
=
"
mips64
"
:
return
(
"
-
Wa
-
mloongson
-
mmi
"
"
-
mloongson
-
ext
"
)
jpeg_mips64_mmi
=
c_compiler
.
try_compile
(
body
=
'
int
c
=
0
a
=
0
b
=
0
;
asm
(
"
paddb
%
0
%
1
%
2
"
:
"
=
f
"
(
c
)
:
"
f
"
(
a
)
"
f
"
(
b
)
)
;
'
check_msg
=
"
for
loongson
mmi
support
"
flags
=
in_tree_jpeg_mips64
when
=
in_tree_jpeg_mips64
)
depends
(
"
-
-
with
-
system
-
jpeg
"
target
in_tree_jpeg_arm
in_tree_jpeg_mips64
jpeg_mips64_mmi
)
def
in_tree_jpeg
(
system_jpeg
target
in_tree_jpeg_arm
in_tree_jpeg_mips64
jpeg_mips64_mmi
)
:
if
system_jpeg
:
return
if
target
.
cpu
in
(
"
arm
"
"
aarch64
"
)
:
return
in_tree_jpeg_arm
elif
target
.
kernel
=
=
"
Darwin
"
:
if
target
.
cpu
=
=
"
x86
"
:
return
(
"
-
DPIC
"
"
-
DMACHO
"
)
elif
target
.
cpu
=
=
"
x86_64
"
:
return
(
"
-
D__x86_64__
"
"
-
DPIC
"
"
-
DMACHO
"
)
elif
target
.
kernel
=
=
"
WINNT
"
:
if
target
.
cpu
=
=
"
x86
"
:
return
(
"
-
DPIC
"
"
-
DWIN32
"
)
elif
target
.
cpu
=
=
"
x86_64
"
:
return
(
"
-
D__x86_64__
"
"
-
DPIC
"
"
-
DWIN64
"
"
-
DMSVC
"
)
elif
target
.
cpu
=
=
"
mips32
"
:
return
(
"
-
mdspr2
"
)
elif
target
.
cpu
=
=
"
mips64
"
and
jpeg_mips64_mmi
:
return
in_tree_jpeg_mips64
elif
target
.
cpu
=
=
"
x86
"
:
return
(
"
-
DPIC
"
"
-
DELF
"
)
elif
target
.
cpu
=
=
"
x86_64
"
:
return
(
"
-
D__x86_64__
"
"
-
DPIC
"
"
-
DELF
"
)
depends
(
target
when
=
depends
(
"
-
-
with
-
system
-
jpeg
"
)
(
lambda
x
:
not
x
)
)
def
jpeg_nasm
(
target
)
:
if
target
.
cpu
in
(
"
x86
"
"
x86_64
"
)
:
return
namespace
(
version
=
"
2
.
10
"
what
=
"
JPEG
"
)
jpeg_arm_neon_vld1_s16_x3
=
c_compiler
.
try_compile
(
includes
=
[
"
arm_neon
.
h
"
]
body
=
"
int16_t
input
[
12
]
=
{
}
;
int16x4x3_t
output
=
vld1_s16_x3
(
input
)
;
"
check_msg
=
"
for
vld1_s16_x3
in
arm_neon
.
h
"
flags
=
in_tree_jpeg_arm
when
=
in_tree_jpeg_arm
)
jpeg_arm_neon_vld1_u16_x2
=
c_compiler
.
try_compile
(
includes
=
[
"
arm_neon
.
h
"
]
body
=
"
uint16_t
input
[
8
]
=
{
}
;
uint16x4x2_t
output
=
vld1_u16_x2
(
input
)
;
"
check_msg
=
"
for
vld1_u16_x2
in
arm_neon
.
h
"
flags
=
in_tree_jpeg_arm
when
=
in_tree_jpeg_arm
)
jpeg_arm_neon_vld1q_u8_x4
=
c_compiler
.
try_compile
(
includes
=
[
"
arm_neon
.
h
"
]
body
=
"
uint8_t
input
[
64
]
=
{
}
;
uint8x16x4_t
output
=
vld1q_u8_x4
(
input
)
;
"
check_msg
=
"
for
vld1q_u8_x4
in
arm_neon
.
h
"
flags
=
in_tree_jpeg_arm
when
=
in_tree_jpeg_arm
)
set_config
(
"
LIBJPEG_TURBO_USE_NASM
"
True
when
=
jpeg_nasm
)
set_config
(
"
LIBJPEG_TURBO_SIMD_FLAGS
"
in_tree_jpeg
)
set_config
(
"
LIBJPEG_TURBO_HAVE_VLD1_S16_X3
"
jpeg_arm_neon_vld1_s16_x3
)
set_config
(
"
LIBJPEG_TURBO_HAVE_VLD1_U16_X2
"
jpeg_arm_neon_vld1_u16_x2
)
set_config
(
"
LIBJPEG_TURBO_HAVE_VLD1Q_U8_X4
"
jpeg_arm_neon_vld1q_u8_x4
)
set_config
(
"
LIBJPEG_TURBO_NEON_INTRINSICS
"
jpeg_arm_neon_vld1_s16_x3
&
jpeg_arm_neon_vld1_u16_x2
&
jpeg_arm_neon_vld1q_u8_x4
)
set_config
(
"
MOZ_SYSTEM_JPEG
"
True
when
=
"
-
-
with
-
system
-
jpeg
"
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
png
"
nargs
=
"
?
"
help
=
"
Use
system
libpng
"
when
=
use_pkg_config
)
depends
(
"
-
-
with
-
system
-
png
"
when
=
use_pkg_config
)
def
deprecated_system_png_path
(
value
)
:
if
len
(
value
)
=
=
1
:
die
(
"
-
-
with
-
system
-
png
=
PATH
is
not
supported
anymore
.
Please
use
"
"
-
-
with
-
system
-
png
and
set
any
necessary
pkg
-
config
environment
variable
.
"
)
png
=
pkg_check_modules
(
"
MOZ_PNG
"
"
libpng
>
=
1
.
6
.
45
"
when
=
"
-
-
with
-
system
-
png
"
)
check_symbol
(
"
png_get_acTL
"
flags
=
png
.
libs
onerror
=
lambda
:
die
(
"
-
-
with
-
system
-
png
won
'
t
work
because
the
system
'
s
libpng
doesn
'
t
have
APNG
support
"
)
when
=
"
-
-
with
-
system
-
png
"
)
set_config
(
"
MOZ_SYSTEM_PNG
"
True
when
=
"
-
-
with
-
system
-
png
"
)
depends
(
target
)
def
ffvpx
(
target
)
:
use_nasm
=
True
audio_only
=
False
flags
=
[
]
if
target
.
kernel
=
=
"
WINNT
"
:
if
target
.
cpu
=
=
"
x86
"
:
flags
=
[
"
-
DPIC
"
"
-
DWIN32
"
"
-
DPREFIX
"
"
-
Pconfig_win32
.
asm
"
]
elif
target
.
cpu
=
=
"
x86_64
"
:
flags
=
[
"
-
D__x86_64__
"
"
-
DPIC
"
"
-
DWIN64
"
"
-
DMSVC
"
"
-
Pconfig_win64
.
asm
"
]
elif
target
.
cpu
=
=
"
aarch64
"
:
flags
=
[
"
-
DPIC
"
"
-
DWIN64
"
]
use_nasm
=
False
elif
target
.
kernel
=
=
"
Darwin
"
:
flags
=
[
"
-
DPIC
"
"
-
DMACHO
"
"
-
DPREFIX
"
]
if
target
.
cpu
=
=
"
x86_64
"
:
flags
+
=
[
"
-
D__x86_64__
"
"
-
Pconfig_darwin64
.
asm
"
]
elif
target
.
cpu
=
=
"
aarch64
"
:
use_nasm
=
False
elif
target
.
cpu
=
=
"
x86_64
"
:
flags
=
[
"
-
D__x86_64__
"
"
-
DPIC
"
"
-
DELF
"
"
-
Pconfig_unix64
.
asm
"
]
else
:
audio_only
=
True
if
audio_only
:
use_nasm
=
False
return
namespace
(
use_nasm
=
use_nasm
audio_only
=
audio_only
flags
=
flags
)
depends
(
when
=
ffvpx
.
use_nasm
)
def
ffvpx_nasm
(
)
:
return
namespace
(
version
=
"
2
.
10
"
what
=
"
FFVPX
"
)
depends
(
ffvpx
vpx_as_flags
target
)
def
ffvpx
(
ffvpx
vpx_as_flags
target
)
:
if
ffvpx
and
vpx_as_flags
and
target
.
cpu
in
(
"
arm
"
"
aarch64
"
)
:
ffvpx
.
flags
.
extend
(
vpx_as_flags
)
return
ffvpx
set_config
(
"
MOZ_FFVPX_AUDIOONLY
"
True
when
=
ffvpx
.
audio_only
)
set_define
(
"
MOZ_FFVPX_AUDIOONLY
"
True
when
=
ffvpx
.
audio_only
)
set_config
(
"
FFVPX_ASFLAGS
"
ffvpx
.
flags
)
set_config
(
"
FFVPX_USE_NASM
"
True
when
=
ffvpx
.
use_nasm
)
depends
(
dav1d_nasm
vpx_nasm
jpeg_nasm
ffvpx_nasm
when
=
compile_environment
)
def
need_nasm
(
*
requirements
)
:
requires
=
{
x
.
what
:
x
.
version
if
hasattr
(
x
"
version
"
)
else
True
for
x
in
requirements
if
x
}
if
requires
:
items
=
sorted
(
requires
.
keys
(
)
)
if
len
(
items
)
>
1
:
what
=
"
and
"
.
join
(
(
"
"
.
join
(
items
[
:
-
1
]
)
items
[
-
1
]
)
)
else
:
what
=
items
[
0
]
versioned
=
{
k
:
v
for
(
k
v
)
in
requires
.
items
(
)
if
v
is
not
True
}
return
namespace
(
what
=
what
versioned
=
versioned
)
nasm
=
check_prog
(
"
NASM
"
[
"
nasm
"
]
allow_missing
=
True
bootstrap
=
"
nasm
"
when
=
need_nasm
)
depends
(
nasm
need_nasm
.
what
)
def
check_nasm
(
nasm
what
)
:
if
not
nasm
and
what
:
die
(
"
Nasm
is
required
to
build
with
%
s
but
it
was
not
found
.
"
%
what
)
return
nasm
depends_if
(
check_nasm
)
checking
(
"
nasm
version
"
)
def
nasm_version
(
nasm
)
:
version
=
(
check_cmd_output
(
nasm
"
-
v
"
onerror
=
lambda
:
die
(
"
Failed
to
get
nasm
version
.
"
)
)
.
splitlines
(
)
[
0
]
.
split
(
)
[
2
]
)
return
Version
(
version
)
depends
(
nasm_version
need_nasm
.
versioned
when
=
need_nasm
.
versioned
)
def
check_nasm_version
(
nasm_version
versioned
)
:
by_version
=
sorted
(
versioned
.
items
(
)
key
=
lambda
x
:
x
[
1
]
)
what
version
=
by_version
[
-
1
]
if
nasm_version
<
version
:
die
(
"
Nasm
version
%
s
or
greater
is
required
to
build
with
%
s
.
"
%
(
version
what
)
)
return
nasm_version
depends
(
target
when
=
check_nasm_version
)
def
nasm_asflags
(
target
)
:
asflags
=
{
(
"
Darwin
"
"
x86
"
)
:
[
"
-
f
"
"
macho32
"
]
(
"
Darwin
"
"
x86_64
"
)
:
[
"
-
f
"
"
macho64
"
]
(
"
WINNT
"
"
x86
"
)
:
[
"
-
f
"
"
win32
"
]
(
"
WINNT
"
"
x86_64
"
)
:
[
"
-
f
"
"
win64
"
]
}
.
get
(
(
target
.
kernel
target
.
cpu
)
None
)
if
asflags
is
None
:
if
target
.
cpu
=
=
"
x86
"
:
asflags
=
[
"
-
f
"
"
elf32
"
]
elif
target
.
cpu
=
=
"
x86_64
"
:
asflags
=
[
"
-
f
"
"
elf64
"
]
return
asflags
set_config
(
"
NASM_ASFLAGS
"
nasm_asflags
)
with
only_when
(
compile_environment
&
target_is_windows
)
:
set_config
(
"
MOZ_ANGLE_RENDERER
"
True
)
with
only_when
(
target_is_windows
)
:
option
(
"
-
-
enable
-
dxcompiler
"
default
=
milestone
.
is_nightly
help
=
"
{
Enable
|
Disable
}
DXC
for
WebGPU
on
Windows
"
)
depends
(
"
-
-
enable
-
dxcompiler
"
target
artifact_builds
valid_windows_sdk_dir
)
checking
(
"
for
dxcompiler
.
dll
and
dxil
.
dll
"
)
imports
(
"
os
.
path
"
)
def
dxcompiler
(
enable_dxc
target
artifact
windows_sdk_dir
)
:
if
not
windows_sdk_dir
and
not
artifact
:
return
namespace
(
enabled
=
False
)
if
not
enable_dxc
:
return
namespace
(
enabled
=
False
)
arch
=
{
"
x86_64
"
:
"
x64
"
"
aarch64
"
:
"
arm64
"
}
.
get
(
target
.
cpu
target
.
cpu
)
dxc_name
=
"
dxcompiler
.
dll
"
dxil_name
=
"
dxil
.
dll
"
dxc_path
=
"
"
dxil_path
=
"
"
if
not
artifact
:
sdk_d3d_path
=
os
.
path
.
join
(
windows_sdk_dir
.
path
"
Redist
"
"
D3D
"
arch
)
dxc_path
=
os
.
path
.
join
(
sdk_d3d_path
dxc_name
)
dxil_path
=
os
.
path
.
join
(
sdk_d3d_path
dxil_name
)
if
not
os
.
path
.
exists
(
dxc_path
)
:
die
(
"
Could
not
find
dxcompiler
.
dll
at
{
}
"
dxc_path
)
if
not
os
.
path
.
exists
(
dxil_path
)
:
die
(
"
Could
not
find
dxil
.
dll
at
{
}
"
dxil_path
)
return
namespace
(
enabled
=
True
from_sdk
=
not
artifact
dxc_name
=
dxc_name
dxc_path
=
dxc_path
dxil_name
=
dxil_name
dxil_path
=
dxil_path
)
with
only_when
(
dxcompiler
.
enabled
)
:
set_config
(
"
MOZ_DXCOMPILER
"
True
)
set_define
(
"
MOZ_DXCOMPILER
"
1
)
set_define
(
"
MOZ_DXC_DLL_NAME
"
dxcompiler
.
dxc_name
)
set_define
(
"
MOZ_DXIL_DLL_NAME
"
dxcompiler
.
dxil_name
)
with
only_when
(
dxcompiler
.
from_sdk
)
:
set_config
(
"
MOZ_DXC_DLL_PATH
"
dxcompiler
.
dxc_path
)
set_config
(
"
MOZ_DXIL_DLL_PATH
"
dxcompiler
.
dxil_path
)
depends
(
toolkit
)
def
has_remote
(
toolkit
)
:
if
toolkit
in
(
"
gtk
"
"
windows
"
"
cocoa
"
)
:
return
True
set_config
(
"
MOZ_HAS_REMOTE
"
has_remote
)
set_define
(
"
MOZ_HAS_REMOTE
"
has_remote
)
def
wasm_sandboxing_libraries
(
)
:
return
(
"
graphite
"
"
ogg
"
"
hunspell
"
"
expat
"
"
woff2
"
"
soundtouch
"
)
depends
(
dependable
(
wasm_sandboxing_libraries
)
build_project
)
def
default_wasm_sandboxing_libraries
(
libraries
build_project
)
:
if
build_project
!
=
"
tools
/
rusttests
"
:
non_default_libs
=
{
}
return
tuple
(
l
for
l
in
libraries
if
l
not
in
non_default_libs
)
option
(
"
-
-
with
-
wasm
-
sandboxed
-
libraries
"
env
=
"
WASM_SANDBOXED_LIBRARIES
"
help
=
"
{
Enable
wasm
sandboxing
for
the
selected
libraries
|
Disable
wasm
sandboxing
}
"
nargs
=
"
+
"
choices
=
dependable
(
wasm_sandboxing_libraries
)
default
=
default_wasm_sandboxing_libraries
)
depends
(
"
-
-
with
-
wasm
-
sandboxed
-
libraries
"
)
def
requires_wasm_sandboxing
(
libraries
)
:
if
libraries
:
return
True
set_config
(
"
MOZ_USING_WASM_SANDBOXING
"
requires_wasm_sandboxing
)
set_define
(
"
MOZ_USING_WASM_SANDBOXING
"
requires_wasm_sandboxing
)
with
only_when
(
requires_wasm_sandboxing
&
compile_environment
)
:
option
(
"
-
-
with
-
wasi
-
sysroot
"
env
=
"
WASI_SYSROOT
"
nargs
=
1
help
=
"
Path
to
wasi
sysroot
for
wasm
sandboxing
"
)
depends
(
"
-
-
with
-
wasi
-
sysroot
"
requires_wasm_sandboxing
)
def
bootstrap_wasi_sysroot
(
wasi_sysroot
requires_wasm_sandboxing
)
:
return
requires_wasm_sandboxing
and
not
wasi_sysroot
depends
(
"
-
-
with
-
wasi
-
sysroot
"
bootstrap_path
(
"
sysroot
-
wasm32
-
wasi
"
when
=
bootstrap_wasi_sysroot
)
)
imports
(
"
os
"
)
def
wasi_sysroot
(
wasi_sysroot
bootstrapped_sysroot
)
:
if
not
wasi_sysroot
:
return
bootstrapped_sysroot
wasi_sysroot
=
wasi_sysroot
[
0
]
if
not
os
.
path
.
isdir
(
wasi_sysroot
)
:
die
(
"
Argument
to
-
-
with
-
wasi
-
sysroot
must
be
a
directory
"
)
if
not
os
.
path
.
isabs
(
wasi_sysroot
)
:
die
(
"
Argument
to
-
-
with
-
wasi
-
sysroot
must
be
an
absolute
path
"
)
return
wasi_sysroot
depends
(
wasi_sysroot
)
def
wasi_sysroot_flags
(
wasi_sysroot
)
:
if
wasi_sysroot
:
log
.
info
(
"
Using
wasi
sysroot
in
%
s
"
wasi_sysroot
)
return
[
"
-
-
sysroot
=
%
s
"
%
wasi_sysroot
]
return
[
]
set_config
(
"
WASI_SYSROOT
"
wasi_sysroot
)
def
wasm_compiler_with_flags
(
compiler
sysroot_flags
)
:
if
compiler
:
return
(
compiler
.
wrapper
+
[
compiler
.
compiler
]
+
compiler
.
flags
+
sysroot_flags
)
template
def
wasm_compiler_error
(
msg
)
:
depends
(
"
-
-
with
-
wasm
-
sandboxed
-
libraries
"
)
def
wasm_compiler_error
(
sandboxed_libs
)
:
suggest_disable
=
"
"
if
sandboxed_libs
.
origin
=
=
"
default
"
:
suggest_disable
=
"
Or
build
with
-
-
without
-
wasm
-
sandboxed
-
libraries
.
"
return
lambda
:
die
(
msg
+
suggest_disable
)
return
wasm_compiler_error
template
def
check_wasm_compiler
(
compiler
language
)
:
compiler
.
try_compile
(
includes
=
[
"
cstring
"
if
language
=
=
"
C
+
+
"
else
"
string
.
h
"
]
flags
=
wasi_sysroot_flags
check_msg
=
"
the
wasm
%
s
compiler
can
find
wasi
headers
"
%
language
onerror
=
wasm_compiler_error
(
"
Cannot
find
wasi
headers
or
problem
with
the
wasm
compiler
.
"
"
Please
fix
the
problem
.
"
)
)
compiler
.
try_run
(
flags
=
wasi_sysroot_flags
check_msg
=
"
the
wasm
%
s
linker
can
find
wasi
libraries
"
%
language
onerror
=
wasm_compiler_error
(
"
Cannot
find
wasi
libraries
or
problem
with
the
wasm
linker
.
"
"
Please
fix
the
problem
.
"
)
)
wasm_cc
=
compiler
(
"
C
"
wasm
other_compiler
=
c_compiler
)
check_wasm_compiler
(
wasm_cc
"
C
"
)
depends
(
wasm_cc
wasi_sysroot_flags
)
def
wasm_cc_with_flags
(
wasm_cc
wasi_sysroot_flags
)
:
return
wasm_compiler_with_flags
(
wasm_cc
wasi_sysroot_flags
)
set_config
(
"
WASM_CC
"
wasm_cc_with_flags
)
wasm_cxx
=
compiler
(
"
C
+
+
"
wasm
c_compiler
=
wasm_cc
other_compiler
=
cxx_compiler
other_c_compiler
=
c_compiler
)
check_wasm_compiler
(
wasm_cxx
"
C
+
+
"
)
depends
(
wasm_cxx
wasi_sysroot_flags
)
def
wasm_cxx_with_flags
(
wasm_cxx
wasi_sysroot_flags
)
:
return
wasm_compiler_with_flags
(
wasm_cxx
wasi_sysroot_flags
)
set_config
(
"
WASM_CXX
"
wasm_cxx_with_flags
)
wasm_compile_flags
=
dependable
(
[
"
-
fno
-
exceptions
"
"
-
fno
-
strict
-
aliasing
"
]
)
option
(
env
=
"
WASM_CFLAGS
"
nargs
=
1
help
=
"
Options
to
pass
to
WASM_CC
"
)
depends
(
"
WASM_CFLAGS
"
wasm_compile_flags
)
def
wasm_cflags
(
value
wasm_compile_flags
)
:
if
value
:
return
wasm_compile_flags
+
value
else
:
return
wasm_compile_flags
set_config
(
"
WASM_CFLAGS
"
wasm_cflags
)
option
(
env
=
"
WASM_CXXFLAGS
"
nargs
=
1
help
=
"
Options
to
pass
to
WASM_CXX
"
)
depends
(
"
WASM_CXXFLAGS
"
wasm_compile_flags
)
def
wasm_cxxflags
(
value
wasm_compile_flags
)
:
if
value
:
return
wasm_compile_flags
+
value
else
:
return
wasm_compile_flags
set_config
(
"
WASM_CXXFLAGS
"
wasm_cxxflags
)
depends
(
"
-
-
with
-
wasm
-
sandboxed
-
libraries
"
)
def
wasm_sandboxing
(
libraries
)
:
if
not
libraries
:
return
return
namespace
(
*
*
{
name
:
True
for
name
in
libraries
}
)
template
def
wasm_sandboxing_config_defines
(
)
:
for
lib
in
wasm_sandboxing_libraries
(
)
:
set_config
(
"
MOZ_WASM_SANDBOXING_
%
s
"
%
lib
.
upper
(
)
getattr
(
wasm_sandboxing
lib
)
)
set_define
(
"
MOZ_WASM_SANDBOXING_
%
s
"
%
lib
.
upper
(
)
getattr
(
wasm_sandboxing
lib
)
)
wasm_sandboxing_config_defines
(
)
with
only_when
(
compile_environment
&
wasm_sandboxing
.
hunspell
)
:
clock_in_wasi_sysroot
=
wasm_cc
.
try_run
(
header
=
"
#
include
<
time
.
h
>
"
body
=
"
clock
(
)
;
"
check_msg
=
"
for
clock
(
)
in
wasi
sysroot
"
flags
=
depends
(
wasi_sysroot_flags
)
(
lambda
sysroot_flags
:
[
"
-
Werror
"
]
+
sysroot_flags
)
)
wasi_emulated_clock
=
wasm_cc
.
try_run
(
header
=
"
#
include
<
time
.
h
>
"
body
=
"
clock
(
)
;
"
check_msg
=
"
for
emulated
clock
(
)
in
wasi
sysroot
"
flags
=
depends
(
wasi_sysroot_flags
)
(
lambda
sysroot_flags
:
[
"
-
Werror
"
"
-
D_WASI_EMULATED_PROCESS_CLOCKS
"
"
-
lwasi
-
emulated
-
process
-
clocks
"
]
+
sysroot_flags
)
when
=
depends
(
clock_in_wasi_sysroot
)
(
lambda
x
:
not
x
)
onerror
=
lambda
:
die
(
"
Can
'
t
find
clock
(
)
in
wasi
sysroot
.
"
)
)
set_config
(
"
MOZ_WASI_EMULATED_CLOCK
"
True
when
=
wasi_emulated_clock
)
option
(
"
-
-
enable
-
disk
-
remnant
-
avoidance
"
help
=
"
Prevent
persistence
of
auxiliary
files
on
application
close
"
)
set_config
(
"
MOZ_AVOID_DISK_REMNANT_ON_CLOSE
"
True
when
=
"
-
-
enable
-
disk
-
remnant
-
avoidance
"
)
depends
(
target
)
def
glean_android
(
target
)
:
return
target
.
os
=
=
"
Android
"
set_config
(
"
MOZ_GLEAN_ANDROID
"
True
when
=
glean_android
)
set_define
(
"
MOZ_GLEAN_ANDROID
"
True
when
=
glean_android
)
check_prog
(
"
DUMP_SYMS
"
[
"
dump_syms
"
]
allow_missing
=
True
bootstrap
=
"
dump_syms
"
when
=
compile_environment
)
depends
(
valid_windows_sdk_dir
host
)
imports
(
_from
=
"
os
"
_import
=
"
environ
"
)
def
pdbstr_paths
(
valid_windows_sdk_dir
host
)
:
if
not
valid_windows_sdk_dir
:
return
vc_host
=
{
"
x86
"
:
"
x86
"
"
x86_64
"
:
"
x64
"
"
aarch64
"
:
"
arm64
"
}
.
get
(
host
.
cpu
)
return
[
environ
[
"
PATH
"
]
os
.
path
.
join
(
valid_windows_sdk_dir
.
path
"
Debuggers
"
vc_host
"
srcsrv
"
)
]
depends
(
"
MOZ_AUTOMATION
"
c_compiler
)
def
allow_missing_wintools
(
automation
c_compiler
)
:
if
not
automation
:
return
True
if
c_compiler
and
c_compiler
.
type
!
=
"
clang
-
cl
"
:
return
True
check_prog
(
"
PDBSTR
"
[
"
pdbstr
.
exe
"
]
allow_missing
=
allow_missing_wintools
when
=
compile_environment
&
target_is_windows
paths
=
pdbstr_paths
allow_spaces
=
True
)
check_prog
(
"
WINCHECKSEC
"
[
"
winchecksec
.
exe
"
"
winchecksec
"
]
bootstrap
=
"
winchecksec
"
allow_missing
=
allow_missing_wintools
when
=
compile_environment
&
target_is_windows
)
depends
(
target
build_project
)
def
forkserver_default
(
target
build_project
)
:
return
build_project
=
=
"
browser
"
and
(
(
target
.
os
=
=
"
GNU
"
and
target
.
kernel
=
=
"
Linux
"
)
or
target
.
os
=
=
"
FreeBSD
"
or
target
.
os
=
=
"
OpenBSD
"
)
option
(
"
-
-
enable
-
forkserver
"
default
=
forkserver_default
env
=
"
MOZ_ENABLE_FORKSERVER
"
help
=
"
{
Enable
|
Disable
}
fork
server
"
)
depends
(
"
-
-
enable
-
forkserver
"
target
)
def
forkserver_flag
(
value
target
)
:
if
(
target
.
os
=
=
"
Android
"
or
(
target
.
os
=
=
"
GNU
"
and
target
.
kernel
=
=
"
Linux
"
)
or
target
.
os
=
=
"
FreeBSD
"
or
target
.
os
=
=
"
OpenBSD
"
)
:
return
bool
(
value
)
pass
set_config
(
"
MOZ_ENABLE_FORKSERVER
"
forkserver_flag
)
set_define
(
"
MOZ_ENABLE_FORKSERVER
"
forkserver_flag
forkserver_flag
)
with
only_when
(
compile_environment
&
target_has_linux_kernel
)
:
getcontext
=
check_symbol
(
"
getcontext
"
)
set_config
(
"
HAVE_GETCONTEXT
"
getcontext
)
set_define
(
"
HAVE_GETCONTEXT
"
getcontext
)
include
(
"
.
.
/
build
/
moz
.
configure
/
nss
.
configure
"
)
option
(
"
-
-
disable
-
backgroundtasks
"
help
=
"
Disable
running
in
background
task
mode
"
)
set_config
(
"
MOZ_BACKGROUNDTASKS
"
True
when
=
"
-
-
enable
-
backgroundtasks
"
)
set_define
(
"
MOZ_BACKGROUNDTASKS
"
True
when
=
"
-
-
enable
-
backgroundtasks
"
)
include
(
"
.
.
/
build
/
moz
.
configure
/
update
-
programs
.
configure
"
)
option
(
"
-
-
enable
-
mobile
-
optimize
"
default
=
target_is_android
help
=
"
{
Enable
|
Disable
}
mobile
optimizations
"
)
set_define
(
"
MOZ_GFX_OPTIMIZE_MOBILE
"
True
when
=
"
-
-
enable
-
mobile
-
optimize
"
)
option
(
"
-
-
disable
-
pref
-
extensions
"
help
=
"
Disable
pref
extensions
such
as
autoconfig
"
)
set_config
(
"
MOZ_PREF_EXTENSIONS
"
True
when
=
"
-
-
enable
-
pref
-
extensions
"
)
option
(
"
-
-
disable
-
startupcache
"
help
=
"
Disable
startup
cache
"
)
depends
(
"
-
-
enable
-
startupcache
"
)
def
enable_startupcache
(
value
)
:
if
value
:
return
True
set_define
(
"
MOZ_DISABLE_STARTUPCACHE
"
True
when
=
depends
(
enable_startupcache
)
(
lambda
x
:
not
x
)
)
option
(
"
-
-
enable
-
official
-
branding
"
help
=
"
Enable
Official
mozilla
.
org
Branding
.
"
"
Do
not
distribute
builds
with
-
-
enable
-
official
-
branding
unless
"
"
you
have
permission
to
use
trademarks
per
"
"
http
:
/
/
www
.
mozilla
.
org
/
foundation
/
trademarks
/
"
)
with
only_when
(
"
-
-
enable
-
official
-
branding
"
)
:
set_config
(
"
MOZ_OFFICIAL_BRANDING
"
True
)
set_define
(
"
MOZ_OFFICIAL_BRANDING
"
True
)
add_old_configure_assignment
(
"
MOZ_OFFICIAL_BRANDING
"
True
)
confvar
(
"
MOZ_BRANDING_DIRECTORY
"
nargs
=
1
set_as_config
=
False
help
=
"
Path
to
the
directory
used
for
branding
resources
"
)
confvar
(
"
MOZ_OFFICIAL_BRANDING_DIRECTORY
"
set_as_config
=
False
allow_implied
=
True
nargs
=
1
help
=
"
Path
to
the
directory
used
for
official
branding
resources
"
)
option
(
"
-
-
with
-
branding
"
metavar
=
"
DIR
"
nargs
=
1
help
=
"
Use
branding
from
directory
DIR
"
)
depends
(
"
MOZ_OFFICIAL_BRANDING_DIRECTORY
"
when
=
"
-
-
enable
-
official
-
branding
"
)
def
check_official_branding_directory
(
moz_official_branding_directory
)
:
if
not
moz_official_branding_directory
:
die
(
"
MOZ_OFFICIAL_BRANDING_DIRECTORY
must
be
set
in
a
confvars
.
sh
to
use
-
-
enable
-
official
-
branding
.
"
)
depends
(
"
-
-
with
-
branding
"
"
-
-
enable
-
official
-
branding
"
"
MOZ_OFFICIAL_BRANDING_DIRECTORY
"
"
MOZ_BRANDING_DIRECTORY
"
)
def
moz_branding_directory
(
with_branding_dir
moz_official_branding
moz_official_branding_directory
moz_branding_directory
)
:
if
moz_official_branding
:
return
moz_official_branding_directory
[
0
]
if
with_branding_dir
:
return
with_branding_dir
[
0
]
if
moz_branding_directory
:
return
moz_branding_directory
[
0
]
set_config
(
"
MOZ_BRANDING_DIRECTORY
"
moz_branding_directory
)
add_old_configure_assignment
(
"
MOZ_BRANDING_DIRECTORY
"
moz_branding_directory
)
depends
(
moz_branding_directory
build_project
)
def
real_branding_directory
(
moz_branding_directory
build_project
)
:
if
moz_branding_directory
:
return
moz_branding_directory
return
f
"
{
build_project
}
/
branding
/
nightly
"
confvar
(
"
MOZ_APP_DISPLAYNAME
"
nargs
=
1
set_as_config
=
False
help
=
"
Branded
application
name
"
)
with
only_when
(
target_is_android
)
:
confvar
(
env
=
"
ANDROID_APPEND_USERNAME_TO_PACKAGE_NAME
"
set_as_config
=
False
help
=
"
Append
username
to
app
display
and
android
name
"
)
confvar
(
env
=
"
ANDROID_PACKAGE_NAME
"
nargs
=
1
set_as_config
=
False
help
=
"
Name
of
the
Android
package
(
default
org
.
mozilla
.
MOZ_APP_NAME
)
"
)
with
only_when
(
"
ANDROID_APPEND_USERNAME_TO_PACKAGE_NAME
"
)
:
option
(
env
=
"
USER
"
nargs
=
1
help
=
"
System
user
name
"
)
depends
(
"
USER
"
)
def
mangled_username
(
user
)
:
if
user
:
return
user
[
0
]
.
replace
(
"
-
"
"
_
"
)
else
:
return
"
unknown
"
depends
(
"
ANDROID_PACKAGE_NAME
"
moz_app_name
mangled_username
)
def
android_package_name
(
value
moz_app_name
username
)
:
if
value
:
if
username
:
return
f
"
{
value
[
0
]
}
_
{
username
}
"
else
:
return
value
[
0
]
if
moz_app_name
=
=
"
fennec
"
:
return
"
org
.
mozilla
.
fennec_aurora
"
return
"
org
.
mozilla
.
%
s
"
%
moz_app_name
set_config
(
"
ANDROID_PACKAGE_NAME
"
android_package_name
)
depends
(
"
MOZ_APP_DISPLAYNAME
"
mangled_username
)
def
moz_app_displayname
(
value
username
)
:
if
not
value
:
return
if
username
:
return
f
"
{
value
[
0
]
}
{
username
}
"
return
value
[
0
]
set_config
(
"
MOZ_APP_DISPLAYNAME
"
moz_app_displayname
)
add_old_configure_assignment
(
"
MOZ_APP_DISPLAYNAME
"
moz_app_displayname
)
confvar
(
"
MOZ_DEV_EDITION
"
nargs
=
1
set_as_define
=
True
help
=
"
Whether
this
a
dev
edition
build
"
)
confvar
(
"
MOZ_MACBUNDLE_ID
"
nargs
=
1
set_as_config
=
False
help
=
"
ID
of
the
associated
mac
bundle
"
)
add_old_configure_assignment
(
"
MOZ_MACBUNDLE_ID
"
depends_if
(
"
MOZ_MACBUNDLE_ID
"
)
(
lambda
v
:
v
[
0
]
)
)
option
(
env
=
"
MOZ_APP_REMOTINGNAME
"
nargs
=
1
help
=
"
Used
for
the
internal
program
name
which
affects
profile
name
"
"
and
remoting
.
If
not
set
defaults
to
MOZ_APP_NAME
if
the
update
channel
"
"
is
release
and
MOZ_APP_NAME
-
MOZ_UPDATE_CHANNEL
otherwise
"
)
depends
(
"
MOZ_APP_REMOTINGNAME
"
moz_app_name
update_channel
)
def
moz_app_remotingname
(
value
moz_app_name
update_channel
)
:
if
value
:
return
value
[
0
]
if
update_channel
=
=
"
release
"
:
return
moz_app_name
return
moz_app_name
+
"
-
"
+
update_channel
set_config
(
"
MOZ_APP_REMOTINGNAME
"
moz_app_remotingname
)
option
(
env
=
"
MOZ_WINCONSOLE
"
nargs
=
"
?
"
help
=
"
Whether
we
can
create
a
console
window
"
)
set_define
(
"
MOZ_WINCONSOLE
"
True
when
=
depends
(
"
MOZ_WINCONSOLE
"
)
(
lambda
x
:
x
)
)
option
(
"
-
-
with
-
crashreporter
-
url
"
env
=
"
MOZ_CRASHREPORTER_URL
"
default
=
"
https
:
/
/
crash
-
reports
.
mozilla
.
com
/
"
nargs
=
1
help
=
"
Set
an
alternative
crashreporter
url
"
)
set_config
(
"
MOZ_CRASHREPORTER_URL
"
depends
(
"
-
-
with
-
crashreporter
-
url
"
)
(
lambda
x
:
x
[
0
]
.
rstrip
(
"
/
"
)
)
)
depends
(
target
)
def
oxidized_breakpad
(
target
)
:
if
target
.
kernel
=
=
"
Linux
"
:
return
target
.
cpu
in
(
"
aarch64
"
"
arm
"
"
x86
"
"
x86_64
"
)
return
False
set_config
(
"
MOZ_OXIDIZED_BREAKPAD
"
True
when
=
oxidized_breakpad
)
set_define
(
"
MOZ_OXIDIZED_BREAKPAD
"
True
when
=
oxidized_breakpad
)
option
(
env
=
"
MOZ_CRASHREPORTER_MOCK
"
help
=
"
Mock
the
crashreporter
to
test
native
GUIs
"
)
set_config
(
"
MOZ_CRASHREPORTER_MOCK
"
True
when
=
"
MOZ_CRASHREPORTER_MOCK
"
)
depends
(
target
host
)
def
want_wine
(
target
host
)
:
return
target
.
kernel
=
=
"
WINNT
"
and
host
.
kernel
!
=
"
WINNT
"
wine
=
check_prog
(
"
WINE
"
[
"
wine64
"
"
wine
"
]
when
=
want_wine
bootstrap
=
"
wine
/
bin
"
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
libevent
"
nargs
=
"
?
"
help
=
"
Use
system
libevent
"
when
=
use_pkg_config
)
depends
(
"
-
-
with
-
system
-
libevent
"
when
=
use_pkg_config
)
def
deprecated_system_libevent_path
(
value
)
:
if
len
(
value
)
=
=
1
:
die
(
"
-
-
with
-
system
-
libevent
=
PATH
is
not
supported
anymore
.
Please
use
"
"
-
-
with
-
system
-
libevent
and
set
any
necessary
pkg
-
config
environment
variable
.
"
)
pkg_check_modules
(
"
MOZ_LIBEVENT
"
"
libevent
"
when
=
"
-
-
with
-
system
-
libevent
"
)
set_config
(
"
MOZ_SYSTEM_LIBEVENT
"
True
when
=
"
-
-
with
-
system
-
libevent
"
)
depends
(
target
developer_options
artifact_builds
)
def
crashreporter_default
(
target
developer_options
artifacts
)
:
if
target
.
os
in
(
"
WINNT
"
"
OSX
"
)
:
return
True
if
target
.
kernel
=
=
"
Linux
"
and
target
.
cpu
in
(
"
x86
"
"
x86_64
"
"
arm
"
"
aarch64
"
)
:
return
target
.
os
!
=
"
Android
"
or
not
developer_options
or
artifacts
option
(
"
-
-
enable
-
crashreporter
"
default
=
crashreporter_default
help
=
"
{
Enable
|
Disable
}
crash
reporting
"
)
set_config
(
"
MOZ_CRASHREPORTER
"
True
when
=
"
-
-
enable
-
crashreporter
"
)
set_define
(
"
MOZ_CRASHREPORTER
"
True
when
=
"
-
-
enable
-
crashreporter
"
)
with
only_when
(
compile_environment
)
:
with
only_when
(
"
-
-
enable
-
crashreporter
"
)
:
pkg_check_modules
(
"
MOZ_GTHREAD
"
"
gthread
-
2
.
0
"
when
=
depends
(
target
)
(
lambda
t
:
t
.
os
=
=
"
GNU
"
and
t
.
kernel
=
=
"
Linux
"
)
)
depends
(
"
MOZ_TELEMETRY_REPORTING
"
"
MOZ_SERVICES_HEALTHREPORT
"
"
-
-
enable
-
crashreporter
"
"
MOZ_NORMANDY
"
)
def
data_reporting
(
telemetry
healthreport
crashreporter
normandy
)
:
return
telemetry
or
healthreport
or
crashreporter
or
normandy
set_config
(
"
MOZ_DATA_REPORTING
"
True
when
=
data_reporting
)
set_define
(
"
MOZ_DATA_REPORTING
"
True
when
=
data_reporting
)
with
only_when
(
toolkit_gtk
)
:
pkg_check_modules
(
"
MOZ_GTK3
"
"
gtk
+
-
3
.
0
>
=
3
.
14
.
0
gtk
+
-
unix
-
print
-
3
.
0
glib
-
2
.
0
gobject
-
2
.
0
gio
-
unix
-
2
.
0
"
)
set_define
(
"
GDK_VERSION_MIN_REQUIRED
"
"
GDK_VERSION_3_14
"
)
set_define
(
"
GDK_VERSION_MAX_ALLOWED
"
"
GDK_VERSION_3_14
"
)
pkg_check_modules
(
"
GLIB
"
"
glib
-
2
.
0
>
=
2
.
42
gobject
-
2
.
0
"
)
set_define
(
"
GLIB_VERSION_MIN_REQUIRED
"
"
GLIB_VERSION_2_42
"
)
set_define
(
"
GLIB_VERSION_MAX_ALLOWED
"
"
GLIB_VERSION_2_42
"
)
set_define
(
"
MOZ_ACCESSIBILITY_ATK
"
True
when
=
accessibility
)
with
only_when
(
toolkit_gtk
)
:
option
(
"
-
-
disable
-
dbus
"
help
=
"
Disable
dbus
support
"
when
=
use_pkg_config
)
depends
(
"
-
-
enable
-
dbus
"
when
=
use_pkg_config
)
def
enable_dbus_option
(
enable_dbus
)
:
return
enable_dbus
with
only_when
(
enable_dbus_option
)
:
pkg_check_modules
(
"
MOZ_DBUS
"
"
dbus
-
1
>
=
0
.
60
"
)
set_config
(
"
MOZ_ENABLE_DBUS
"
True
)
set_define
(
"
MOZ_ENABLE_DBUS
"
True
)
depends
(
target
)
def
necko_wifi_when
(
target
)
:
return
target
.
os
in
(
"
WINNT
"
"
OSX
"
"
DragonFly
"
"
FreeBSD
"
)
or
(
target
.
kernel
=
=
"
Linux
"
and
target
.
os
=
=
"
GNU
"
)
option
(
"
-
-
disable
-
necko
-
wifi
"
help
=
"
Disable
necko
wifi
scanner
"
when
=
necko_wifi_when
)
set_config
(
"
NECKO_WIFI
"
True
when
=
"
-
-
enable
-
necko
-
wifi
"
)
set_define
(
"
NECKO_WIFI
"
True
when
=
"
-
-
enable
-
necko
-
wifi
"
)
depends
(
depends
(
"
-
-
enable
-
necko
-
wifi
"
when
=
necko_wifi_when
)
(
lambda
x
:
x
)
depends
(
enable_dbus_option
when
=
toolkit_gtk
)
(
lambda
x
:
x
)
when
=
use_pkg_config
&
depends
(
target
)
(
lambda
t
:
t
.
os
=
=
"
GNU
"
and
t
.
kernel
=
=
"
Linux
"
)
)
def
necko_wifi_dbus
(
necko_wifi
dbus
)
:
if
necko_wifi
and
not
dbus
:
die
(
"
Necko
WiFi
scanning
needs
DBus
on
your
platform
remove
-
-
disable
-
dbus
"
"
or
use
-
-
disable
-
necko
-
wifi
"
)
return
necko_wifi
and
dbus
set_config
(
"
NECKO_WIFI_DBUS
"
True
when
=
necko_wifi_dbus
)
set_define
(
"
NECKO_WIFI_DBUS
"
True
when
=
necko_wifi_dbus
)
option
(
"
-
-
enable
-
debug
-
js
-
modules
"
help
=
"
Enable
debug
mode
for
frontend
JS
libraries
"
)
set_config
(
"
DEBUG_JS_MODULES
"
True
when
=
"
-
-
enable
-
debug
-
js
-
modules
"
)
option
(
"
-
-
enable
-
dump
-
painting
"
help
=
"
Enable
paint
debugging
"
)
set_define
(
"
MOZ_DUMP_PAINTING
"
True
when
=
depends
(
"
-
-
enable
-
dump
-
painting
"
"
-
-
enable
-
debug
"
)
(
lambda
painting
debug
:
painting
or
debug
)
)
set_define
(
"
MOZ_LAYERS_HAVE_LOG
"
True
when
=
"
-
-
enable
-
dump
-
painting
"
)
with
only_when
(
toolkit_gtk
)
:
system_lib_option
(
"
-
-
enable
-
libproxy
"
help
=
"
Enable
libproxy
support
"
when
=
use_pkg_config
)
with
only_when
(
"
-
-
enable
-
libproxy
"
)
:
pkg_check_modules
(
"
MOZ_LIBPROXY
"
"
libproxy
-
1
.
0
"
)
set_config
(
"
MOZ_ENABLE_LIBPROXY
"
True
)
set_define
(
"
MOZ_LOGGING
"
True
)
set_define
(
"
FORCE_PR_LOG
"
True
)
option
(
"
-
-
enable
-
logrefcnt
"
default
=
moz_debug
help
=
"
{
Enable
|
Disable
}
logging
of
refcounts
"
)
set_define
(
"
NS_BUILD_REFCNT_LOGGING
"
True
when
=
"
-
-
enable
-
logrefcnt
"
)
option
(
"
-
-
disable
-
negotiateauth
"
help
=
"
Disable
GSS
-
API
negotiation
"
)
set_config
(
"
MOZ_AUTH_EXTENSION
"
True
when
=
"
-
-
enable
-
negotiateauth
"
)
set_define
(
"
MOZ_AUTH_EXTENSION
"
True
when
=
"
-
-
enable
-
negotiateauth
"
)
option
(
"
-
-
disable
-
parental
-
controls
"
help
=
"
Do
not
build
parental
controls
"
)
set_config
(
"
MOZ_DISABLE_PARENTAL_CONTROLS
"
True
when
=
depends
(
"
-
-
enable
-
parental
-
controls
"
)
(
lambda
x
:
not
x
)
)
set_define
(
"
MOZ_DISABLE_PARENTAL_CONTROLS
"
True
when
=
depends
(
"
-
-
enable
-
parental
-
controls
"
)
(
lambda
x
:
not
x
)
)
with
only_when
(
"
MOZ_AUTOMATION
"
)
:
option
(
env
=
"
MOZ_SIMPLE_PACKAGE_NAME
"
nargs
=
1
help
=
"
Package
name
override
"
)
set_config
(
"
MOZ_SIMPLE_PACKAGE_NAME
"
depends_if
(
"
MOZ_SIMPLE_PACKAGE_NAME
"
)
(
lambda
x
:
x
[
0
]
)
)
option
(
env
=
"
MOZ_PKG_SPECIAL
"
nargs
=
1
help
=
"
Name
of
special
moz
flavor
"
)
set_config
(
"
MOZ_PKG_SPECIAL
"
depends_if
(
"
MOZ_PKG_SPECIAL
"
)
(
lambda
x
:
x
[
0
]
)
)
with
only_when
(
target_is_osx
)
:
option
(
"
-
-
with
-
macbundlename
-
prefix
"
nargs
=
1
help
=
"
Prefix
for
the
mac
bundle
name
"
)
depends_if
(
"
-
-
with
-
macbundlename
-
prefix
"
)
def
mac_bundle_name
(
value
)
:
return
value
[
0
]
add_old_configure_assignment
(
"
MOZ_MACBUNDLE_NAME_PREFIX
"
mac_bundle_name
)
option
(
env
=
"
DMG_TOOL
"
nargs
=
1
help
=
"
Path
to
the
dmg
tool
"
)
set_config
(
"
DMG_TOOL
"
depends_if
(
"
DMG_TOOL
"
)
(
lambda
x
:
x
[
0
]
)
)
option
(
env
=
"
MOZ_PACKAGE_JSSHELL
"
help
=
"
Whether
the
installer
bundles
the
JS
shell
"
)
set_config
(
"
MOZ_PACKAGE_JSSHELL
"
depends_if
(
"
MOZ_PACKAGE_JSSHELL
"
)
(
lambda
x
:
bool
(
x
)
)
)
depends
(
target
tsan
asan
)
def
sandbox_default
(
target
tsan
asan
)
:
if
target
.
kernel
=
=
"
Linux
"
and
target
.
os
=
=
"
GNU
"
:
if
tsan
or
asan
:
return
False
return
target
.
cpu
in
(
"
x86
"
"
x86_64
"
"
arm
"
"
aarch64
"
)
return
target
.
kernel
in
(
"
WINNT
"
"
Darwin
"
"
OpenBSD
"
)
option
(
"
-
-
enable
-
sandbox
"
default
=
sandbox_default
help
=
"
{
Enable
|
Disable
}
sandboxing
support
"
)
set_config
(
"
MOZ_SANDBOX
"
True
when
=
"
-
-
enable
-
sandbox
"
)
set_define
(
"
MOZ_SANDBOX
"
True
when
=
"
-
-
enable
-
sandbox
"
)
option
(
"
-
-
disable
-
system
-
extension
-
dirs
"
help
=
"
Disable
searching
system
-
and
account
-
global
directories
for
extensions
"
"
of
any
kind
;
use
only
profile
-
specific
extension
directories
"
)
set_define
(
"
ENABLE_SYSTEM_EXTENSION_DIRS
"
True
when
=
"
-
-
enable
-
system
-
extension
-
dirs
"
)
with
only_when
(
compile_environment
)
:
system_lib_option
(
"
-
-
with
-
system
-
pixman
"
help
=
"
Use
system
pixman
(
located
with
pkgconfig
)
"
when
=
use_pkg_config
)
depends
(
"
-
-
with
-
system
-
pixman
"
when
=
use_pkg_config
)
def
enable_system_pixman_option
(
enable_system_pixman
)
:
return
enable_system_pixman
depends
(
enable_system_pixman_option
)
def
in_tree_pixman
(
pixman
)
:
return
not
pixman
set_config
(
"
MOZ_TREE_PIXMAN
"
True
when
=
in_tree_pixman
)
set_define
(
"
MOZ_TREE_PIXMAN
"
True
when
=
in_tree_pixman
)
pkg_check_modules
(
"
MOZ_PIXMAN
"
"
pixman
-
1
>
=
0
.
40
.
0
"
when
=
"
-
-
with
-
system
-
pixman
"
)
set_config
(
"
MOZ_PIXMAN_CFLAGS
"
[
]
when
=
in_tree_pixman
)
with
only_when
(
compile_environment
)
:
option
(
"
-
-
disable
-
universalchardet
"
help
=
"
Disable
universal
encoding
detection
"
)
set_config
(
"
MOZ_UNIVERSALCHARDET
"
True
when
=
"
-
-
enable
-
universalchardet
"
)
with
only_when
(
compile_environment
)
:
option
(
"
-
-
disable
-
zipwriter
"
help
=
"
Disable
zipwriter
component
"
)
set_config
(
"
MOZ_ZIPWRITER
"
True
when
=
"
-
-
enable
-
zipwriter
"
)
with
only_when
(
compile_environment
)
:
depends
(
target
)
def
default_user_appdir
(
target
)
:
if
target
.
kernel
in
(
"
WINNT
"
"
Darwin
"
)
:
return
"
Mozilla
"
return
"
.
mozilla
"
option
(
"
-
-
with
-
user
-
appdir
"
nargs
=
1
default
=
default_user_appdir
help
=
"
Set
user
-
specific
appdir
"
)
depends
(
"
-
-
with
-
user
-
appdir
"
)
def
user_appdir
(
appdir
)
:
if
not
appdir
:
die
(
"
-
-
without
-
user
-
appdir
is
not
a
valid
option
.
"
)
if
"
/
"
in
appdir
[
0
]
:
die
(
"
-
-
with
-
user
-
appdir
must
be
a
single
relative
path
.
"
)
return
'
"
{
}
"
'
.
format
(
appdir
[
0
]
)
set_define
(
"
MOZ_USER_DIR
"
user_appdir
)
with
only_when
(
compile_environment
)
:
have_sin_len
=
c_compiler
.
try_compile
(
includes
=
[
"
netinet
/
in
.
h
"
]
body
=
"
struct
sockaddr_in
x
;
void
*
foo
=
(
void
*
)
&
x
.
sin_len
;
"
check_msg
=
"
for
sin_len
in
struct
sockaddr_in
"
)
have_sin6_len
=
c_compiler
.
try_compile
(
includes
=
[
"
netinet
/
in
.
h
"
]
body
=
"
struct
sockaddr_in6
x
;
void
*
foo
=
(
void
*
)
&
x
.
sin6_len
;
"
check_msg
=
"
for
sin_len6
in
struct
sockaddr_in6
"
)
set_define
(
"
HAVE_SIN_LEN
"
have_sin_len
)
set_define
(
"
HAVE_SIN6_LEN
"
have_sin6_len
)
set_define
(
"
HAVE_SCONN_LEN
"
have_sin_len
&
have_sin6_len
)
set_define
(
"
HAVE_SA_LEN
"
c_compiler
.
try_compile
(
includes
=
[
"
netinet
/
in
.
h
"
]
body
=
"
struct
sockaddr
x
;
void
*
foo
=
(
void
*
)
&
x
.
sa_len
;
"
check_msg
=
"
for
sa_len
in
struct
sockaddr
"
)
)
with
only_when
(
compile_environment
)
:
set_define
(
"
HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC
"
c_compiler
.
try_compile
(
includes
=
[
"
pthread
.
h
"
]
body
=
"
pthread_cond_timedwait_monotonic_np
(
0
0
0
)
;
"
flags
=
[
"
-
Werror
=
implicit
-
function
-
declaration
"
]
check_msg
=
"
for
pthread_cond_timedwait_monotonic_np
"
)
)
with
only_when
(
target_has_linux_kernel
&
compile_environment
)
:
option
(
env
=
"
MOZ_LINKER
"
default
=
depends
(
target
.
os
when
=
"
-
-
enable
-
jemalloc
"
)
(
lambda
os
:
os
=
=
"
Android
"
)
help
=
"
{
Enable
|
Disable
}
custom
dynamic
linker
"
)
set_config
(
"
MOZ_LINKER
"
True
when
=
"
MOZ_LINKER
"
)
set_define
(
"
MOZ_LINKER
"
True
when
=
"
MOZ_LINKER
"
)
check_and_add_linker_flag
(
"
-
Wl
-
-
hash
-
style
=
sysv
"
when
=
"
MOZ_LINKER
"
)
with
only_when
(
target_has_linux_kernel
&
compile_environment
)
:
set_config
(
"
MOZ_WEBRTC_HAVE_ETHTOOL_SPEED_HI
"
c_compiler
.
try_compile
(
includes
=
[
"
linux
/
ethtool
.
h
"
]
body
=
"
struct
ethtool_cmd
cmd
;
cmd
.
speed_hi
=
0
;
"
check_msg
=
"
for
32
-
bits
ethtool_cmd
.
speed
"
)
)
depends
(
build_project
)
def
disable_smart_cards
(
build_project
)
:
return
build_project
=
=
"
mobile
/
android
"
set_config
(
"
MOZ_NO_SMART_CARDS
"
True
when
=
disable_smart_cards
)
set_define
(
"
MOZ_NO_SMART_CARDS
"
True
when
=
disable_smart_cards
)
option
(
"
-
-
enable
-
uniffi
-
fixtures
"
help
=
"
Enable
UniFFI
Fixtures
/
Examples
"
)
set_config
(
"
MOZ_UNIFFI_FIXTURES
"
True
when
=
"
-
-
enable
-
uniffi
-
fixtures
"
)
option
(
"
-
-
disable
-
system
-
policies
"
help
=
"
Disable
reading
policies
from
Windows
registry
macOS
'
s
file
system
attributes
and
/
etc
/
firefox
"
)
set_config
(
"
MOZ_SYSTEM_POLICIES
"
True
when
=
"
-
-
enable
-
system
-
policies
"
)
option
(
"
-
-
disable
-
legacy
-
profile
-
creation
"
help
=
"
Disable
the
creation
a
legacy
profile
to
be
used
by
old
versions
"
"
of
Firefox
when
no
profiles
exist
"
)
set_config
(
"
MOZ_CREATE_LEGACY_PROFILE
"
True
when
=
"
-
-
enable
-
legacy
-
profile
-
creation
"
)
set_config
(
"
WRAP_STL_INCLUDES
"
True
)
set_config
(
"
STL_FLAGS
"
depends
(
build_environment
.
dist
)
(
lambda
dist
:
[
f
"
-
I
{
dist
}
/
stl_wrappers
"
]
)
)
depends
(
target
)
def
need_perl
(
target
)
:
return
target
.
cpu
=
=
"
arm
"
perl
=
check_prog
(
"
PERL
"
(
"
perl5
"
"
perl
"
)
when
=
need_perl
)
template
def
perl_version_check
(
min_version
)
:
depends
(
perl
)
checking
(
"
for
minimum
required
perl
version
>
=
%
s
"
%
min_version
)
def
get_perl_version
(
perl
)
:
return
Version
(
check_cmd_output
(
perl
"
-
e
"
"
print
]
"
onerror
=
lambda
:
die
(
"
Failed
to
get
perl
version
.
"
)
)
)
depends
(
get_perl_version
)
def
check_perl_version
(
version
)
:
if
version
<
min_version
:
die
(
"
Perl
%
s
or
higher
is
required
.
"
min_version
)
depends
(
perl
)
checking
(
"
for
full
perl
installation
"
)
imports
(
"
subprocess
"
)
def
has_full_perl_installation
(
perl
)
:
ret
=
subprocess
.
call
(
[
perl
"
-
e
"
"
use
Config
;
exit
(
!
-
d
Config
{
archlib
}
)
"
]
)
return
ret
=
=
0
depends
(
has_full_perl_installation
)
def
require_full_perl_installation
(
has_full_perl_installation
)
:
if
not
has_full_perl_installation
:
die
(
"
Cannot
find
Config
.
pm
or
Config
{
archlib
}
.
"
"
A
full
perl
installation
is
required
.
"
)
with
only_when
(
need_perl
)
:
perl_version_check
(
"
5
.
006
"
)
with
only_when
(
target_is_windows
&
compile_environment
)
:
option
(
env
=
"
MOZ_WINDOWS_RS_DIR
"
nargs
=
1
help
=
"
Path
to
the
source
of
the
'
windows
'
Rust
crate
"
)
depends
(
"
MOZ_WINDOWS_RS_DIR
"
bootstrap_path
(
"
windows
-
rs
"
when
=
depends
(
"
MOZ_WINDOWS_RS_DIR
"
)
(
lambda
x
:
not
x
)
)
build_environment
.
topsrcdir
)
checking
(
"
for
the
windows
rust
crate
source
"
)
imports
(
_from
=
"
__builtin__
"
_import
=
"
open
"
)
imports
(
"
re
"
)
imports
(
"
toml
"
)
def
windows_rs_dir
(
dir
bootstrapped
topsrcdir
)
:
if
bootstrapped
:
dir
=
bootstrapped
elif
dir
:
dir
=
dir
[
0
]
raw_cargo_toml
=
open
(
os
.
path
.
join
(
topsrcdir
"
build
/
rust
/
windows
/
Cargo
.
toml
"
)
)
.
read
(
)
cargo_toml
=
toml
.
loads
(
raw_cargo_toml
)
expected_version
=
cargo_toml
[
"
package
"
]
[
"
version
"
]
if
not
dir
:
raise
FatalCheckError
(
"
Cannot
find
the
windows
rust
crate
source
.
\
n
"
f
"
Try
downloading
it
with
cargo
download
-
x
windows
=
{
expected_version
}
\
n
"
"
(
you
may
need
to
cargo
install
cargo
-
download
first
)
\
n
"
f
"
and
set
MOZ_WINDOWS_RS_DIR
to
location
of
the
windows
-
{
expected_version
}
"
"
directory
"
)
raw_cargo_toml_orig
=
open
(
os
.
path
.
join
(
dir
"
Cargo
.
toml
"
)
)
.
read
(
)
cargo_toml
=
toml
.
loads
(
raw_cargo_toml_orig
)
version
=
cargo_toml
[
"
package
"
]
[
"
version
"
]
if
version
!
=
expected_version
:
raise
FatalCheckError
(
f
"
The
windows
rust
crate
source
in
{
dir
}
contains
version
"
f
"
{
version
}
but
expected
{
expected_version
}
.
"
)
DEPENDENCIES
=
'
\
n
[
dependencies
.
mozbuild
]
\
nversion
=
"
0
.
1
"
\
n
'
if
not
raw_cargo_toml
.
endswith
(
DEPENDENCIES
)
:
configure_error
(
"
In
-
tree
windows
crate
is
missing
dependency
on
mozbuild
"
)
if
raw_cargo_toml
[
:
-
len
(
DEPENDENCIES
)
]
!
=
raw_cargo_toml_orig
:
configure_error
(
"
In
-
tree
windows
crate
Cargo
.
toml
doesn
'
t
match
original
"
)
return
dir
set_config
(
"
MOZ_WINDOWS_RS_DIR
"
windows_rs_dir
)
