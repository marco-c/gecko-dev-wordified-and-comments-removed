"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
RemotePageManager
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
gInContentProcess
=
Services
.
appinfo
.
processType
=
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_CONTENT
;
Services
.
cpmm
.
addMessageListener
(
"
gmp
-
plugin
-
crash
"
msg
=
>
{
let
gmpservice
=
Cc
[
"
mozilla
.
org
/
gecko
-
media
-
plugin
-
service
;
1
"
]
.
getService
(
Ci
.
mozIGeckoMediaPluginService
)
;
gmpservice
.
RunPluginCrashCallbacks
(
msg
.
data
.
pluginID
msg
.
data
.
pluginName
)
;
}
)
;
if
(
gInContentProcess
)
{
let
ProcessObserver
=
{
TOPICS
:
[
"
inner
-
window
-
destroyed
"
"
xpcom
-
shutdown
"
]
init
(
)
{
for
(
let
topic
of
this
.
TOPICS
)
{
Services
.
obs
.
addObserver
(
this
topic
)
;
}
}
uninit
(
)
{
for
(
let
topic
of
this
.
TOPICS
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
inner
-
window
-
destroyed
"
:
{
let
innerWindowID
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
Services
.
cpmm
.
sendAsyncMessage
(
"
Toolkit
:
inner
-
window
-
destroyed
"
innerWindowID
)
;
break
;
}
case
"
xpcom
-
shutdown
"
:
{
this
.
uninit
(
)
;
break
;
}
}
}
}
;
ProcessObserver
.
init
(
)
;
}
