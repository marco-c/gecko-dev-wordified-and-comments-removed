"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Services
.
cpmm
.
addMessageListener
(
"
gmp
-
plugin
-
crash
"
(
{
data
}
)
=
>
{
Cc
[
"
mozilla
.
org
/
gecko
-
media
-
plugin
-
service
;
1
"
]
.
getService
(
Ci
.
mozIGeckoMediaPluginService
)
.
RunPluginCrashCallbacks
(
data
.
pluginID
data
.
pluginName
)
;
}
)
;
let
ProcessObserver
=
{
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
chrome
-
document
-
global
-
created
"
)
;
Services
.
obs
.
addObserver
(
this
"
content
-
document
-
global
-
created
"
)
;
if
(
Services
.
appinfo
.
processType
=
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_CONTENT
)
{
Services
.
obs
.
addObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
chrome
-
document
-
global
-
created
"
:
case
"
content
-
document
-
global
-
created
"
:
{
let
window
=
subject
;
let
url
=
window
.
document
.
documentURI
.
replace
(
/
[
#
?
]
.
*
/
"
"
)
;
let
registeredURLs
=
Services
.
cpmm
.
sharedData
.
get
(
"
RemotePageManager
:
urls
"
)
;
if
(
registeredURLs
&
&
registeredURLs
.
has
(
url
)
)
{
let
{
ChildMessagePort
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
remotepagemanager
/
RemotePageManagerChild
.
jsm
"
)
;
new
ChildMessagePort
(
window
)
;
}
break
;
}
case
"
inner
-
window
-
destroyed
"
:
Services
.
cpmm
.
sendAsyncMessage
(
"
Toolkit
:
inner
-
window
-
destroyed
"
subject
.
nsISupportsPRUint64
.
data
)
;
break
;
}
}
}
;
ProcessObserver
.
init
(
)
;
ProcessObserver
.
init
=
null
;
