function
goUpdateGlobalEditMenuItems
(
force
)
{
if
(
!
force
&
&
typeof
gEditUIVisible
!
=
"
undefined
"
&
&
!
gEditUIVisible
)
{
return
;
}
goUpdateUndoEditMenuItems
(
)
;
goUpdateCommand
(
"
cmd_cut
"
)
;
goUpdateCommand
(
"
cmd_copy
"
)
;
goUpdatePasteMenuItems
(
)
;
goUpdateCommand
(
"
cmd_selectAll
"
)
;
goUpdateCommand
(
"
cmd_delete
"
)
;
goUpdateCommand
(
"
cmd_switchTextDirection
"
)
;
}
function
goUpdateUndoEditMenuItems
(
)
{
goUpdateCommand
(
"
cmd_undo
"
)
;
goUpdateCommand
(
"
cmd_redo
"
)
;
}
function
goUpdatePasteMenuItems
(
)
{
goUpdateCommand
(
"
cmd_paste
"
)
;
goUpdateCommand
(
"
cmd_pasteNoFormatting
"
)
;
}
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
let
container
=
document
.
querySelector
(
"
commandset
"
)
|
|
document
.
documentElement
;
let
fragment
=
MozXULElement
.
parseXULToFragment
(
<
commandset
id
=
"
editMenuCommands
"
>
<
commandset
id
=
"
editMenuCommandSetAll
"
commandupdater
=
"
true
"
events
=
"
focus
select
"
/
>
<
commandset
id
=
"
editMenuCommandSetUndo
"
commandupdater
=
"
true
"
events
=
"
undo
"
/
>
<
commandset
id
=
"
editMenuCommandSetPaste
"
commandupdater
=
"
true
"
events
=
"
clipboard
"
/
>
<
command
id
=
"
cmd_undo
"
internal
=
"
true
"
/
>
<
command
id
=
"
cmd_redo
"
internal
=
"
true
"
/
>
<
command
id
=
"
cmd_cut
"
internal
=
"
true
"
/
>
<
command
id
=
"
cmd_copy
"
internal
=
"
true
"
/
>
<
command
id
=
"
cmd_paste
"
internal
=
"
true
"
/
>
<
command
id
=
"
cmd_pasteNoFormatting
"
internal
=
"
true
"
/
>
<
command
id
=
"
cmd_delete
"
/
>
<
command
id
=
"
cmd_selectAll
"
internal
=
"
true
"
/
>
<
command
id
=
"
cmd_switchTextDirection
"
/
>
<
/
commandset
>
)
;
let
editMenuCommandSetAll
=
fragment
.
querySelector
(
"
#
editMenuCommandSetAll
"
)
;
editMenuCommandSetAll
.
addEventListener
(
"
commandupdate
"
function
(
)
{
goUpdateGlobalEditMenuItems
(
)
;
}
)
;
let
editMenuCommandSetUndo
=
fragment
.
querySelector
(
"
#
editMenuCommandSetUndo
"
)
;
editMenuCommandSetUndo
.
addEventListener
(
"
commandupdate
"
function
(
)
{
goUpdateUndoEditMenuItems
(
)
;
}
)
;
let
editMenuCommandSetPaste
=
fragment
.
querySelector
(
"
#
editMenuCommandSetPaste
"
)
;
editMenuCommandSetPaste
.
addEventListener
(
"
commandupdate
"
function
(
)
{
goUpdatePasteMenuItems
(
)
;
}
)
;
fragment
.
firstElementChild
.
addEventListener
(
"
command
"
event
=
>
{
let
commandID
=
event
.
target
.
id
;
goDoCommand
(
commandID
)
;
}
)
;
container
.
appendChild
(
fragment
)
;
}
{
once
:
true
}
)
;
window
.
addEventListener
(
"
contextmenu
"
e
=
>
{
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
let
target
=
e
.
composedTarget
;
let
needsContextMenu
=
target
.
ownerDocument
=
=
document
&
&
!
e
.
defaultPrevented
&
&
target
.
parentNode
.
nodeName
!
=
"
moz
-
input
-
box
"
&
&
(
(
[
"
textarea
"
"
input
"
]
.
includes
(
target
.
localName
)
&
&
target
.
namespaceURI
=
=
HTML_NS
)
|
|
target
.
closest
(
"
search
-
textbox
"
)
)
;
if
(
!
needsContextMenu
)
{
return
;
}
let
popup
=
document
.
getElementById
(
"
textbox
-
contextmenu
"
)
;
if
(
!
popup
)
{
MozXULElement
.
insertFTLIfNeeded
(
"
toolkit
/
global
/
textActions
.
ftl
"
)
;
document
.
documentElement
.
appendChild
(
MozXULElement
.
parseXULToFragment
(
<
menupopup
id
=
"
textbox
-
contextmenu
"
class
=
"
textbox
-
contextmenu
"
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
undo
"
command
=
"
cmd_undo
"
>
<
/
menuitem
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
redo
"
command
=
"
cmd_redo
"
>
<
/
menuitem
>
<
menuseparator
>
<
/
menuseparator
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
cut
"
command
=
"
cmd_cut
"
>
<
/
menuitem
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
copy
"
command
=
"
cmd_copy
"
>
<
/
menuitem
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
paste
"
command
=
"
cmd_paste
"
>
<
/
menuitem
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
delete
"
command
=
"
cmd_delete
"
>
<
/
menuitem
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
select
-
all
"
command
=
"
cmd_selectAll
"
>
<
/
menuitem
>
<
menuitem
data
-
l10n
-
id
=
"
text
-
action
-
reveal
-
password
"
type
=
"
checkbox
"
id
=
"
textbox
-
contextmenu
-
reveal
-
password
"
/
>
<
/
menupopup
>
)
)
;
popup
=
document
.
documentElement
.
lastElementChild
;
popup
.
querySelector
(
"
#
textbox
-
contextmenu
-
reveal
-
password
"
)
.
addEventListener
(
"
command
"
function
(
)
{
popup
.
triggerNode
.
revealPassword
=
!
popup
.
triggerNode
.
revealPassword
;
}
)
;
}
goUpdateGlobalEditMenuItems
(
true
)
;
const
isPasswordInput
=
target
.
localName
=
=
"
input
"
&
&
target
.
namespaceURI
=
=
HTML_NS
&
&
target
.
type
=
=
"
password
"
;
let
revealPassword
=
popup
.
querySelector
(
"
#
textbox
-
contextmenu
-
reveal
-
password
"
)
;
revealPassword
.
hidden
=
!
isPasswordInput
;
if
(
isPasswordInput
)
{
if
(
target
.
revealPassword
)
{
revealPassword
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
else
{
revealPassword
.
removeAttribute
(
"
checked
"
)
;
}
}
popup
.
openPopupAtScreen
(
e
.
screenX
e
.
screenY
true
e
)
;
e
.
preventDefault
(
)
;
}
)
;
