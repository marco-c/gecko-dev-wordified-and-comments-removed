ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AutoCompletePopup
"
"
resource
:
/
/
gre
/
modules
/
AutoCompletePopupContent
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AutoScrollController
"
"
resource
:
/
/
gre
/
modules
/
AutoScrollController
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SelectContentHelper
"
"
resource
:
/
/
gre
/
modules
/
SelectContentHelper
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FindContent
"
"
resource
:
/
/
gre
/
modules
/
FindContent
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrintingContent
"
"
resource
:
/
/
gre
/
modules
/
PrintingContent
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
RemoteFinder
"
"
resource
:
/
/
gre
/
modules
/
RemoteFinder
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
formFill
"
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
"
nsIFormFillController
"
)
;
var
global
=
this
;
XPCOMUtils
.
defineLazyProxy
(
this
"
PopupBlocking
"
(
)
=
>
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PopupBlocking
.
jsm
"
tmp
)
;
return
new
tmp
.
PopupBlocking
(
global
)
;
}
)
;
XPCOMUtils
.
defineLazyProxy
(
this
"
SelectionSourceContent
"
"
resource
:
/
/
gre
/
modules
/
SelectionSourceContent
.
jsm
"
)
;
XPCOMUtils
.
defineLazyProxy
(
this
"
DateTimePickerContent
"
(
)
=
>
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
DateTimePickerContent
.
jsm
"
tmp
)
;
return
new
tmp
.
DateTimePickerContent
(
this
)
;
}
)
;
addMessageListener
(
"
Finder
:
Initialize
"
function
(
)
{
let
{
RemoteFinderListener
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
RemoteFinder
.
jsm
"
{
}
)
;
new
RemoteFinderListener
(
global
)
;
}
)
;
var
AutoScrollListener
=
{
handleEvent
(
event
)
{
if
(
event
.
isTrusted
&
!
event
.
defaultPrevented
&
&
event
.
button
=
=
1
)
{
if
(
!
this
.
_controller
)
{
this
.
_controller
=
new
AutoScrollController
(
global
)
;
}
this
.
_controller
.
handleEvent
(
event
)
;
}
}
}
;
Services
.
els
.
addSystemEventListener
(
global
"
mousedown
"
AutoScrollListener
true
)
;
addEventListener
(
"
MozOpenDateTimePicker
"
DateTimePickerContent
)
;
addEventListener
(
"
DOMPopupBlocked
"
PopupBlocking
true
)
;
var
Printing
=
{
MESSAGES
:
[
"
Printing
:
Preview
:
Enter
"
"
Printing
:
Preview
:
Exit
"
"
Printing
:
Preview
:
Navigate
"
"
Printing
:
Preview
:
ParseDocument
"
"
Printing
:
Print
"
]
init
(
)
{
this
.
MESSAGES
.
forEach
(
msgName
=
>
addMessageListener
(
msgName
this
)
)
;
addEventListener
(
"
PrintingError
"
this
true
)
;
addEventListener
(
"
printPreviewUpdate
"
this
true
)
;
this
.
init
=
null
;
}
handleEvent
(
event
)
{
return
PrintingContent
.
handleEvent
(
global
event
)
;
}
receiveMessage
(
message
)
{
return
PrintingContent
.
receiveMessage
(
global
message
)
;
}
}
;
Printing
.
init
(
)
;
function
SwitchDocumentDirection
(
aWindow
)
{
if
(
aWindow
.
document
.
dir
=
=
"
ltr
"
|
|
aWindow
.
document
.
dir
=
=
"
"
)
{
aWindow
.
document
.
dir
=
"
rtl
"
;
}
else
if
(
aWindow
.
document
.
dir
=
=
"
rtl
"
)
{
aWindow
.
document
.
dir
=
"
ltr
"
;
}
for
(
let
run
=
0
;
run
<
aWindow
.
frames
.
length
;
run
+
+
)
{
SwitchDocumentDirection
(
aWindow
.
frames
[
run
]
)
;
}
}
addMessageListener
(
"
SwitchDocumentDirection
"
(
)
=
>
{
SwitchDocumentDirection
(
content
.
window
)
;
}
)
;
var
FindBar
=
{
FIND_NORMAL
:
0
FIND_TYPEAHEAD
:
1
FIND_LINKS
:
2
_findMode
:
0
_findKey
:
null
_findModifiers
:
null
init
(
)
{
addMessageListener
(
"
Findbar
:
UpdateState
"
this
)
;
Services
.
els
.
addSystemEventListener
(
global
"
keypress
"
this
false
)
;
Services
.
els
.
addSystemEventListener
(
global
"
mouseup
"
this
false
)
;
this
.
_initShortcutData
(
)
;
this
.
init
=
null
;
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
Findbar
:
UpdateState
"
:
this
.
_findMode
=
msg
.
data
.
findMode
;
this
.
_quickFindTimeout
=
msg
.
data
.
hasQuickFindTimeout
;
if
(
msg
.
data
.
isOpenAndFocused
)
{
this
.
_keepPassingUntilToldOtherwise
=
false
;
}
break
;
case
"
Findbar
:
ShortcutData
"
:
Services
.
cpmm
.
initialProcessData
.
findBarShortcutData
=
msg
.
data
;
Services
.
cpmm
.
removeMessageListener
(
"
Findbar
:
ShortcutData
"
this
)
;
this
.
_initShortcutData
(
msg
.
data
)
;
break
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
keypress
"
:
this
.
_onKeypress
(
event
)
;
break
;
case
"
mouseup
"
:
this
.
_onMouseup
(
event
)
;
break
;
}
}
_initShortcutData
(
data
=
Services
.
cpmm
.
initialProcessData
.
findBarShortcutData
)
{
if
(
data
)
{
this
.
_findKey
=
data
.
key
;
this
.
_findModifiers
=
data
.
modifiers
;
}
else
{
Services
.
cpmm
.
addMessageListener
(
"
Findbar
:
ShortcutData
"
this
)
;
}
}
_eventMatchesFindShortcut
(
aEvent
)
{
let
modifiers
=
this
.
_findModifiers
;
if
(
!
modifiers
)
{
return
false
;
}
return
aEvent
.
ctrlKey
=
=
modifiers
.
ctrlKey
&
&
aEvent
.
altKey
=
=
modifiers
.
altKey
&
&
aEvent
.
shiftKey
=
=
modifiers
.
shiftKey
&
&
aEvent
.
metaKey
=
=
modifiers
.
metaKey
&
&
aEvent
.
key
=
=
this
.
_findKey
;
}
_canAndShouldFastFind
(
)
{
let
should
=
false
;
let
can
=
BrowserUtils
.
canFastFind
(
content
)
;
if
(
can
)
{
let
focusedWindow
=
{
}
;
let
elt
=
Services
.
focus
.
getFocusedElementForWindow
(
content
true
focusedWindow
)
;
let
win
=
focusedWindow
.
value
;
should
=
BrowserUtils
.
shouldFastFind
(
elt
win
)
;
}
return
{
can
should
}
;
}
_onKeypress
(
event
)
{
const
FAYT_LINKS_KEY
=
"
'
"
;
const
FAYT_TEXT_KEY
=
"
/
"
;
if
(
this
.
_eventMatchesFindShortcut
(
event
)
)
{
this
.
_keepPassingUntilToldOtherwise
=
true
;
}
if
(
event
.
ctrlKey
|
|
event
.
altKey
|
|
event
.
metaKey
|
|
event
.
defaultPrevented
)
{
return
;
}
let
fastFind
=
this
.
_canAndShouldFastFind
(
)
;
if
(
!
fastFind
.
can
)
{
return
;
}
if
(
this
.
_keepPassingUntilToldOtherwise
)
{
this
.
_passKeyToParent
(
event
)
;
return
;
}
if
(
!
fastFind
.
should
)
{
return
;
}
let
charCode
=
event
.
charCode
;
if
(
this
.
_findMode
!
=
this
.
FIND_NORMAL
&
&
this
.
_quickFindTimeout
)
{
if
(
!
charCode
)
return
;
this
.
_passKeyToParent
(
event
)
;
}
else
{
let
key
=
charCode
?
String
.
fromCharCode
(
charCode
)
:
null
;
let
manualstartFAYT
=
(
key
=
=
FAYT_LINKS_KEY
|
|
key
=
=
FAYT_TEXT_KEY
)
&
&
RemoteFinder
.
_manualFAYT
;
let
autostartFAYT
=
!
manualstartFAYT
&
&
RemoteFinder
.
_findAsYouType
&
&
key
&
&
key
!
=
"
"
;
if
(
manualstartFAYT
|
|
autostartFAYT
)
{
let
mode
=
(
key
=
=
FAYT_LINKS_KEY
|
|
(
autostartFAYT
&
&
RemoteFinder
.
_typeAheadLinksOnly
)
)
?
this
.
FIND_LINKS
:
this
.
FIND_TYPEAHEAD
;
this
.
_findMode
=
mode
;
this
.
_passKeyToParent
(
event
)
;
}
}
}
_passKeyToParent
(
event
)
{
event
.
preventDefault
(
)
;
const
kRequiredProps
=
[
"
type
"
"
bubbles
"
"
cancelable
"
"
ctrlKey
"
"
altKey
"
"
shiftKey
"
"
metaKey
"
"
keyCode
"
"
charCode
"
]
;
let
fakeEvent
=
{
}
;
for
(
let
prop
of
kRequiredProps
)
{
fakeEvent
[
prop
]
=
event
[
prop
]
;
}
sendAsyncMessage
(
"
Findbar
:
Keypress
"
fakeEvent
)
;
}
_onMouseup
(
event
)
{
if
(
this
.
_findMode
!
=
this
.
FIND_NORMAL
)
sendAsyncMessage
(
"
Findbar
:
Mouseup
"
)
;
}
}
;
FindBar
.
init
(
)
;
let
WebChannelMessageToChromeListener
=
{
URL_WHITELIST_PREF
:
"
webchannel
.
allowObject
.
urlWhitelist
"
_cachedWhitelist
:
[
]
_lastWhitelistValue
:
"
"
init
(
)
{
addEventListener
(
"
WebChannelMessageToChrome
"
e
=
>
{
this
.
_onMessageToChrome
(
e
)
;
}
true
true
)
;
}
_getWhitelistedPrincipals
(
)
{
let
whitelist
=
Services
.
prefs
.
getCharPref
(
this
.
URL_WHITELIST_PREF
)
;
if
(
whitelist
!
=
this
.
_lastWhitelistValue
)
{
let
urls
=
whitelist
.
split
(
/
\
s
+
/
)
;
this
.
_cachedWhitelist
=
urls
.
map
(
origin
=
>
Services
.
scriptSecurityManager
.
createCodebasePrincipalFromOrigin
(
origin
)
)
;
}
return
this
.
_cachedWhitelist
;
}
_onMessageToChrome
(
e
)
{
let
principal
=
e
.
target
.
nodePrincipal
?
e
.
target
.
nodePrincipal
:
e
.
target
.
document
.
nodePrincipal
;
if
(
e
.
detail
)
{
if
(
typeof
e
.
detail
!
=
"
string
"
)
{
let
objectsAllowed
=
this
.
_getWhitelistedPrincipals
(
)
.
some
(
whitelisted
=
>
principal
.
originNoSuffix
=
=
whitelisted
.
originNoSuffix
)
;
if
(
!
objectsAllowed
)
{
Cu
.
reportError
(
"
WebChannelMessageToChrome
sent
with
an
object
from
a
non
-
whitelisted
principal
"
)
;
return
;
}
}
sendAsyncMessage
(
"
WebChannelMessageToChrome
"
e
.
detail
{
eventTarget
:
e
.
target
}
principal
)
;
}
else
{
Cu
.
reportError
(
"
WebChannel
message
failed
.
No
message
detail
.
"
)
;
}
}
}
;
WebChannelMessageToChromeListener
.
init
(
)
;
addMessageListener
(
"
WebChannelMessageToContent
"
function
(
e
)
{
if
(
e
.
data
)
{
let
eventTarget
=
e
.
objects
.
eventTarget
|
|
content
;
let
targetPrincipal
=
eventTarget
instanceof
Ci
.
nsIDOMWindow
?
eventTarget
.
document
.
nodePrincipal
:
eventTarget
.
nodePrincipal
;
if
(
e
.
principal
.
subsumes
(
targetPrincipal
)
)
{
let
targetWindow
=
eventTarget
instanceof
Ci
.
nsIDOMWindow
?
eventTarget
:
eventTarget
.
ownerGlobal
;
eventTarget
.
dispatchEvent
(
new
targetWindow
.
CustomEvent
(
"
WebChannelMessageToContent
"
{
detail
:
Cu
.
cloneInto
(
{
id
:
e
.
data
.
id
message
:
e
.
data
.
message
}
targetWindow
)
}
)
)
;
}
else
{
Cu
.
reportError
(
"
WebChannel
message
failed
.
Principal
mismatch
.
"
)
;
}
}
else
{
Cu
.
reportError
(
"
WebChannel
message
failed
.
No
message
data
.
"
)
;
}
}
)
;
var
AudioPlaybackListener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
audio
-
playback
"
)
;
addMessageListener
(
"
AudioPlayback
"
this
)
;
addEventListener
(
"
unload
"
(
)
=
>
{
AudioPlaybackListener
.
uninit
(
)
;
}
)
;
this
.
init
=
null
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
audio
-
playback
"
)
;
removeMessageListener
(
"
AudioPlayback
"
this
)
;
}
handleMediaControlMessage
(
msg
)
{
let
utils
=
global
.
content
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
suspendTypes
=
Ci
.
nsISuspendedTypes
;
switch
(
msg
)
{
case
"
mute
"
:
utils
.
audioMuted
=
true
;
break
;
case
"
unmute
"
:
utils
.
audioMuted
=
false
;
break
;
case
"
lostAudioFocus
"
:
utils
.
mediaSuspend
=
suspendTypes
.
SUSPENDED_PAUSE_DISPOSABLE
;
break
;
case
"
lostAudioFocusTransiently
"
:
utils
.
mediaSuspend
=
suspendTypes
.
SUSPENDED_PAUSE
;
break
;
case
"
gainAudioFocus
"
:
utils
.
mediaSuspend
=
suspendTypes
.
NONE_SUSPENDED
;
break
;
case
"
mediaControlPaused
"
:
utils
.
mediaSuspend
=
suspendTypes
.
SUSPENDED_PAUSE_DISPOSABLE
;
break
;
case
"
mediaControlStopped
"
:
utils
.
mediaSuspend
=
suspendTypes
.
SUSPENDED_STOP_DISPOSABLE
;
break
;
case
"
resumeMedia
"
:
content
.
document
.
notifyUserGestureActivation
(
)
;
utils
.
mediaSuspend
=
suspendTypes
.
NONE_SUSPENDED
;
break
;
default
:
dump
(
"
Error
:
wrong
media
control
msg
!
\
n
"
)
;
break
;
}
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
audio
-
playback
"
)
{
if
(
subject
&
&
subject
.
top
=
=
global
.
content
)
{
let
name
=
"
AudioPlayback
:
"
;
if
(
data
=
=
=
"
activeMediaBlockStart
"
)
{
name
+
=
"
ActiveMediaBlockStart
"
;
}
else
if
(
data
=
=
=
"
activeMediaBlockStop
"
)
{
name
+
=
"
ActiveMediaBlockStop
"
;
}
else
{
name
+
=
(
data
=
=
=
"
active
"
)
?
"
Start
"
:
"
Stop
"
;
}
sendAsyncMessage
(
name
)
;
}
}
}
receiveMessage
(
msg
)
{
if
(
msg
.
name
=
=
"
AudioPlayback
"
)
{
this
.
handleMediaControlMessage
(
msg
.
data
.
type
)
;
}
}
}
;
AudioPlaybackListener
.
init
(
)
;
var
UnselectedTabHoverObserver
=
{
init
(
)
{
addMessageListener
(
"
Browser
:
UnselectedTabHover
"
this
)
;
addEventListener
(
"
UnselectedTabHover
:
Enable
"
this
)
;
addEventListener
(
"
UnselectedTabHover
:
Disable
"
this
)
;
this
.
init
=
null
;
}
receiveMessage
(
message
)
{
Services
.
obs
.
notifyObservers
(
content
.
window
"
unselected
-
tab
-
hover
"
message
.
data
.
hovered
)
;
}
handleEvent
(
event
)
{
sendAsyncMessage
(
"
UnselectedTabHover
:
Toggle
"
{
enable
:
event
.
type
=
=
"
UnselectedTabHover
:
Enable
"
}
)
;
}
}
;
UnselectedTabHoverObserver
.
init
(
)
;
addMessageListener
(
"
Browser
:
PurgeSessionHistory
"
function
BrowserPurgeHistory
(
)
{
let
sessionHistory
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
sessionHistory
;
if
(
!
sessionHistory
)
{
return
;
}
if
(
sessionHistory
.
index
<
sessionHistory
.
count
-
1
)
{
let
legacy
=
sessionHistory
.
legacySHistory
;
legacy
.
QueryInterface
(
Ci
.
nsISHistoryInternal
)
;
let
indexEntry
=
legacy
.
getEntryAtIndex
(
sessionHistory
.
index
false
)
;
indexEntry
.
QueryInterface
(
Ci
.
nsISHEntry
)
;
legacy
.
addEntry
(
indexEntry
true
)
;
}
let
purge
=
sessionHistory
.
count
;
if
(
global
.
content
.
location
.
href
!
=
"
about
:
blank
"
)
{
-
-
purge
;
}
if
(
purge
>
0
)
{
sessionHistory
.
legacySHistory
.
PurgeHistory
(
purge
)
;
}
}
)
;
addMessageListener
(
"
ViewSource
:
GetSelection
"
SelectionSourceContent
)
;
addEventListener
(
"
MozApplicationManifest
"
function
(
e
)
{
let
doc
=
e
.
target
;
let
info
=
{
uri
:
doc
.
documentURI
characterSet
:
doc
.
characterSet
manifest
:
doc
.
documentElement
.
getAttribute
(
"
manifest
"
)
principal
:
doc
.
nodePrincipal
}
;
sendAsyncMessage
(
"
MozApplicationManifest
"
info
)
;
}
false
)
;
let
AutoComplete
=
{
_connected
:
false
init
(
)
{
addEventListener
(
"
unload
"
this
{
once
:
true
}
)
;
addEventListener
(
"
DOMContentLoaded
"
this
{
once
:
true
}
)
;
addEventListener
(
"
pageshow
"
this
{
capture
:
true
once
:
true
}
)
;
XPCOMUtils
.
defineLazyProxy
(
this
"
popup
"
(
)
=
>
new
AutoCompletePopup
(
global
)
{
QueryInterface
:
null
}
)
;
this
.
init
=
null
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
case
"
pageshow
"
:
if
(
!
this
.
_connected
)
{
formFill
.
attachToBrowser
(
docShell
this
.
popup
)
;
this
.
_connected
=
true
;
}
break
;
case
"
unload
"
:
if
(
this
.
_connected
)
{
formFill
.
detachFromBrowser
(
docShell
)
;
this
.
_connected
=
false
;
}
break
;
}
}
}
;
AutoComplete
.
init
(
)
;
addEventListener
(
"
mozshowdropdown
"
event
=
>
{
if
(
!
event
.
isTrusted
)
return
;
if
(
!
SelectContentHelper
.
open
)
{
new
SelectContentHelper
(
event
.
target
{
isOpenedViaTouch
:
false
}
this
)
;
}
}
)
;
addEventListener
(
"
mozshowdropdown
-
sourcetouch
"
event
=
>
{
if
(
!
event
.
isTrusted
)
return
;
if
(
!
SelectContentHelper
.
open
)
{
new
SelectContentHelper
(
event
.
target
{
isOpenedViaTouch
:
true
}
this
)
;
}
}
)
;
let
ExtFind
=
{
init
(
)
{
addMessageListener
(
"
ext
-
Finder
:
CollectResults
"
this
)
;
addMessageListener
(
"
ext
-
Finder
:
HighlightResults
"
this
)
;
addMessageListener
(
"
ext
-
Finder
:
clearHighlighting
"
this
)
;
this
.
init
=
null
;
}
_findContent
:
null
async
receiveMessage
(
message
)
{
if
(
!
this
.
_findContent
)
{
this
.
_findContent
=
new
FindContent
(
docShell
)
;
}
let
data
;
switch
(
message
.
name
)
{
case
"
ext
-
Finder
:
CollectResults
"
:
this
.
finderInited
=
true
;
data
=
await
this
.
_findContent
.
findRanges
(
message
.
data
)
;
sendAsyncMessage
(
"
ext
-
Finder
:
CollectResultsFinished
"
data
)
;
break
;
case
"
ext
-
Finder
:
HighlightResults
"
:
data
=
this
.
_findContent
.
highlightResults
(
message
.
data
)
;
sendAsyncMessage
(
"
ext
-
Finder
:
HighlightResultsFinished
"
data
)
;
break
;
case
"
ext
-
Finder
:
clearHighlighting
"
:
this
.
_findContent
.
highlighter
.
highlight
(
false
)
;
break
;
}
}
}
;
ExtFind
.
init
(
)
;
