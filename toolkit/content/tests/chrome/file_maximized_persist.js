SimpleTest
.
waitForExplicitFinish
(
)
;
const
WIDTH
=
300
;
const
HEIGHT
=
300
;
let
gWindow
;
function
promiseMessage
(
msg
)
{
info
(
wait
for
message
"
{
msg
}
"
)
;
return
new
Promise
(
resolve
=
>
{
function
listener
(
evt
)
{
info
(
got
message
"
{
evt
.
data
}
"
)
;
if
(
evt
.
data
=
=
msg
)
{
window
.
removeEventListener
(
"
message
"
listener
)
;
resolve
(
)
;
}
}
window
.
addEventListener
(
"
message
"
listener
)
;
}
)
;
}
function
openWindow
(
features
=
"
"
)
{
return
window
.
browsingContext
.
topChromeWindow
.
openDialog
(
gWindow
"
_blank
"
"
chrome
dialog
=
no
all
"
+
features
window
)
;
}
function
checkWindow
(
msg
win
sizemode
width
height
)
{
is
(
win
.
windowState
sizemode
"
sizemode
should
match
"
+
msg
)
;
if
(
sizemode
=
=
win
.
STATE_NORMAL
)
{
is
(
win
.
innerWidth
width
"
width
should
match
"
+
msg
)
;
is
(
win
.
innerHeight
height
"
height
should
match
"
+
msg
)
;
}
}
function
todoCheckWindow
(
msg
win
sizemode
)
{
todo_is
(
win
.
windowState
sizemode
"
sizemode
should
match
"
+
msg
)
;
}
function
waitForSizeModePersisted
(
)
{
return
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
1000
)
;
}
)
;
}
async
function
changeSizeMode
(
func
)
{
let
promiseSizeModeChange
=
promiseMessage
(
"
sizemodechange
"
)
;
func
(
)
;
await
promiseSizeModeChange
;
await
waitForSizeModePersisted
(
)
;
}
async
function
runTest
(
aWindow
)
{
gWindow
=
aWindow
;
let
win
=
openWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
const
chrome_url
=
win
.
location
.
href
;
checkWindow
(
"
when
open
initially
"
win
win
.
STATE_NORMAL
WIDTH
HEIGHT
)
;
const
widthDiff
=
win
.
outerWidth
-
win
.
innerWidth
;
const
heightDiff
=
win
.
outerHeight
-
win
.
innerHeight
;
await
changeSizeMode
(
(
)
=
>
win
.
maximize
(
)
)
;
checkWindow
(
"
after
maximize
window
"
win
win
.
STATE_MAXIMIZED
)
;
win
.
close
(
)
;
win
=
openWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
checkWindow
(
"
when
reopen
to
maximized
"
win
win
.
STATE_MAXIMIZED
)
;
if
(
win
.
windowState
=
=
win
.
STATE_MAXIMIZED
)
{
await
changeSizeMode
(
(
)
=
>
win
.
restore
(
)
)
;
}
checkWindow
(
"
after
restore
window
"
win
win
.
STATE_NORMAL
WIDTH
HEIGHT
)
;
win
.
close
(
)
;
win
=
openWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
checkWindow
(
"
when
reopen
to
normal
"
win
win
.
STATE_NORMAL
WIDTH
HEIGHT
)
;
await
changeSizeMode
(
(
)
=
>
win
.
maximize
(
)
)
;
win
.
close
(
)
;
win
=
openWindow
(
"
centerscreen
"
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
checkWindow
(
"
when
open
with
centerscreen
"
win
win
.
STATE_MAXIMIZED
)
;
win
.
close
(
)
;
let
todo
=
navigator
.
platform
.
includes
(
"
Linux
"
)
;
let
checkWindowMayFail
=
todo
?
todoCheckWindow
:
checkWindow
;
win
=
openWindow
(
"
width
=
400
height
=
400
"
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
checkWindow
(
"
when
reopen
with
size
"
win
win
.
STATE_NORMAL
400
400
)
;
await
waitForSizeModePersisted
(
)
;
win
.
close
(
)
;
win
=
openWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
checkWindowMayFail
(
"
when
reopen
without
size
"
win
win
.
STATE_MAXIMIZED
)
;
win
.
close
(
)
;
win
=
openWindow
(
)
;
win
.
resizeTo
(
500
+
widthDiff
500
+
heightDiff
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
checkWindow
(
"
when
sized
synchronously
"
win
win
.
STATE_NORMAL
500
500
)
;
await
waitForSizeModePersisted
(
)
;
win
.
close
(
)
;
win
=
openWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
checkWindowMayFail
(
"
when
reopen
without
sizing
"
win
win
.
STATE_MAXIMIZED
)
;
win
.
close
(
)
;
Services
.
xulStore
.
removeDocument
(
chrome_url
)
;
SimpleTest
.
finish
(
)
;
}
