"
use
strict
"
;
add_task
(
async
function
test_focus_after_selection
(
)
{
info
(
Ensure
navigating
through
Datepicker
using
keyboard
after
a
date
has
already
been
selected
will
not
lose
keyboard
focus
when
reaching
a
different
month
.
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
prefersReducedMotion
"
1
]
]
}
)
;
Assert
.
ok
(
matchMedia
(
"
(
prefers
-
reduced
-
motion
:
reduce
)
"
)
.
matches
"
The
reduce
motion
mode
is
active
"
)
;
const
inputValue
=
"
2022
-
12
-
12
"
;
const
prevMonth
=
"
2022
-
10
-
01
"
;
const
nextYear
=
"
2023
-
11
-
01
"
;
const
nextYearAfter
=
"
2024
-
01
-
01
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
type
=
"
date
"
value
=
{
inputValue
}
>
)
;
info
(
"
Test
behavior
when
selection
is
done
on
the
calendar
grid
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
repeat
:
7
}
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
prevMonth
)
)
"
The
calendar
is
updated
to
show
the
second
previous
month
(
2022
-
10
)
.
"
)
;
let
closed
=
helper
.
promisePickerClosed
(
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
closed
;
let
ready
=
helper
.
waitForPickerReady
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
ready
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
repeat
:
7
}
)
;
const
focusedDay
=
getDayEl
(
12
)
;
let
monthYearEl
=
helper
.
getElement
(
MONTH_YEAR
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
monthYearEl
{
childList
:
true
}
(
)
=
>
{
return
monthYearEl
.
textContent
=
=
DATE_FORMAT
(
new
Date
(
inputValue
)
)
;
}
Should
change
to
December
2022
instead
got
{
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
}
)
;
Assert
.
equal
(
focusedDay
helper
.
getElement
(
DAYS_VIEW
)
.
querySelector
(
'
[
tabindex
=
"
0
"
]
'
)
"
There
is
a
focusable
day
within
a
calendar
grid
"
)
;
Assert
.
ok
(
focusedDay
.
matches
(
"
:
focus
"
)
"
The
focusable
day
within
a
calendar
grid
is
focused
"
)
;
info
(
"
Test
behavior
when
selection
is
done
on
the
month
-
year
panel
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
2
}
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
monthYearEl
{
childList
:
true
}
(
)
=
>
{
return
monthYearEl
.
textContent
=
=
DATE_FORMAT
(
new
Date
(
nextYear
)
)
;
}
Should
change
to
November
2023
instead
got
{
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
}
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
helper
.
getElement
(
MONTH_YEAR_VIEW
)
)
"
Month
-
year
selection
panel
is
not
visible
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
repeat
:
8
}
)
;
const
newFocusedDay
=
getDayEl
(
7
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
nextYearAfter
)
)
"
The
calendar
is
updated
to
show
another
month
(
2024
-
01
)
.
"
)
;
Assert
.
equal
(
newFocusedDay
helper
.
getElement
(
DAYS_VIEW
)
.
querySelector
(
'
[
tabindex
=
"
0
"
]
'
)
"
There
is
a
focusable
day
within
a
calendar
grid
"
)
;
Assert
.
ok
(
newFocusedDay
.
matches
(
"
:
focus
"
)
"
The
focusable
day
within
a
calendar
grid
is
focused
"
)
;
await
helper
.
tearDown
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
