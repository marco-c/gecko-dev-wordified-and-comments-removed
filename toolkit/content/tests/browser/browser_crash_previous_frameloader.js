"
use
strict
"
;
function
getCrashDumpId
(
subject
)
{
Assert
.
ok
(
subject
instanceof
Ci
.
nsIPropertyBag2
"
Subject
needs
to
be
a
nsIPropertyBag2
to
clean
up
properly
"
)
;
return
subject
.
getPropertyAsAString
(
"
dumpID
"
)
;
}
function
cleanUpMinidump
(
id
)
{
let
dir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
dir
.
append
(
"
minidumps
"
)
;
let
file
=
dir
.
clone
(
)
;
file
.
append
(
id
+
"
.
dmp
"
)
;
file
.
remove
(
true
)
;
file
=
dir
.
clone
(
)
;
file
.
append
(
id
+
"
.
extra
"
)
;
file
.
remove
(
true
)
;
}
add_task
(
async
function
test_crash_in_previous_frameloader
(
)
{
requestLongerTimeout
(
2
)
;
if
(
!
gMultiProcessBrowser
)
{
Assert
.
ok
(
false
"
This
test
should
only
be
run
in
multi
-
process
mode
.
"
)
;
return
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
"
}
async
function
(
browser
)
{
Assert
.
ok
(
browser
.
isRemoteBrowser
"
This
browser
needs
to
be
remote
if
this
test
is
going
to
"
+
"
work
properly
.
"
)
;
let
contentProcessGone
=
TestUtils
.
topicObserved
(
"
ipc
:
content
-
shutdown
"
)
;
let
sawTabCrashed
=
false
;
let
onTabCrashed
=
(
)
=
>
{
sawTabCrashed
=
true
;
}
;
browser
.
addEventListener
(
"
oop
-
browser
-
crashed
"
onTabCrashed
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
let
dies
=
function
(
)
{
privateNoteIntentionalCrash
(
)
;
let
zero
=
new
ctypes
.
intptr_t
(
8
)
;
let
badptr
=
ctypes
.
cast
(
zero
ctypes
.
PointerType
(
ctypes
.
int32_t
)
)
;
badptr
.
contents
}
;
addEventListener
(
"
pagehide
"
function
(
)
{
dump
(
"
\
nEt
tu
Brute
?
\
n
"
)
;
dies
(
)
;
}
)
;
}
)
;
gBrowser
.
updateBrowserRemoteness
(
browser
false
)
;
info
(
"
Waiting
for
content
process
to
go
away
.
"
)
;
let
[
subject
]
=
await
contentProcessGone
;
let
dumpID
=
getCrashDumpId
(
subject
)
;
Assert
.
ok
(
dumpID
"
There
should
be
a
dumpID
"
)
;
if
(
dumpID
)
{
await
Services
.
crashmanager
.
ensureCrashIsPresent
(
dumpID
)
;
cleanUpMinidump
(
dumpID
)
;
}
info
(
"
Content
process
is
gone
!
"
)
;
Assert
.
ok
(
!
sawTabCrashed
"
Should
not
have
seen
the
oop
-
browser
-
crashed
event
.
"
)
;
browser
.
removeEventListener
(
"
oop
-
browser
-
crashed
"
onTabCrashed
)
;
}
)
;
}
)
;
