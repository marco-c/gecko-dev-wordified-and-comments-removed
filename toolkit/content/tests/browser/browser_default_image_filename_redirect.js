let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
add_task
(
async
function
(
)
{
const
URL_FIREBIRD
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
content
/
tests
/
browser
/
firebird
.
png
"
;
await
BrowserTestUtils
.
withNewTab
(
URL_FIREBIRD
async
function
(
browser
)
{
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
document
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
img
"
{
type
:
"
contextmenu
"
button
:
2
}
browser
)
;
await
popupShownPromise
;
let
showFilePickerPromise
=
new
Promise
(
resolve
=
>
{
MockFilePicker
.
showCallback
=
fp
=
>
resolve
(
fp
.
defaultString
)
;
}
)
;
registerCleanupFunction
(
function
(
)
{
MockFilePicker
.
cleanup
(
)
;
}
)
;
var
saveImageAsCommand
=
document
.
getElementById
(
"
context
-
saveimage
"
)
;
saveImageAsCommand
.
doCommand
(
)
;
let
filename
=
await
showFilePickerPromise
;
is
(
filename
"
doggy
.
png
"
"
Verify
image
filename
.
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
popupHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
contextMenu
.
hidePopup
(
)
;
await
popupHiddenPromise
;
}
)
;
}
)
;
