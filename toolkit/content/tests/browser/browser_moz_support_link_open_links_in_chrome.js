"
use
strict
"
;
async
function
createMozSupportLink
(
)
{
await
import
(
"
chrome
:
/
/
global
/
content
/
elements
/
moz
-
support
-
link
.
mjs
"
)
;
let
supportLink
=
document
.
createElement
(
"
a
"
{
is
:
"
moz
-
support
-
link
"
}
)
;
supportLink
.
setAttribute
(
"
support
-
page
"
"
dnt
"
)
;
let
navigatorToolbox
=
document
.
getElementById
(
"
navigator
-
toolbox
"
)
;
navigatorToolbox
.
appendChild
(
supportLink
)
;
await
document
.
l10n
.
translateElements
(
[
supportLink
]
)
;
return
supportLink
;
}
add_task
(
async
function
test_open_link_in_chrome_with_keyboard
(
)
{
let
supportTab
;
let
supportLink
=
await
createMozSupportLink
(
)
;
supportLink
.
focus
(
)
;
const
supportTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
dnt
"
)
;
await
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
supportTab
=
await
supportTabPromise
;
Assert
.
ok
(
supportTab
"
Support
tab
in
new
tab
opened
with
Enter
key
"
)
;
await
BrowserTestUtils
.
removeTab
(
supportTab
)
;
let
supportWindow
;
supportLink
.
focus
(
)
;
const
supportWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
dnt
"
)
;
await
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
shiftKey
:
true
}
)
;
supportWindow
=
await
supportWindowPromise
;
Assert
.
ok
(
supportWindow
"
Support
tab
in
new
window
opened
with
Shift
+
Enter
key
"
)
;
supportLink
.
remove
(
)
;
await
BrowserTestUtils
.
closeWindow
(
supportWindow
)
;
}
)
;
add_task
(
async
function
test_open_link_in_chrome_with_mouse
(
)
{
let
supportTab
;
let
supportLink
=
await
createMozSupportLink
(
)
;
const
supportTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
dnt
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
supportLink
{
}
)
;
supportTab
=
await
supportTabPromise
;
Assert
.
ok
(
supportTab
"
Support
tab
in
new
tab
opened
"
)
;
await
BrowserTestUtils
.
removeTab
(
supportTab
)
;
let
supportWindow
;
const
supportWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
dnt
"
)
;
await
EventUtils
.
synthesizeMouseAtCenter
(
supportLink
{
shiftKey
:
true
}
)
;
supportWindow
=
await
supportWindowPromise
;
Assert
.
ok
(
supportWindow
"
Support
tab
in
new
window
opened
"
)
;
await
BrowserTestUtils
.
closeWindow
(
supportWindow
)
;
supportLink
=
document
.
querySelector
(
"
a
[
support
-
page
]
"
)
;
supportLink
.
remove
(
)
;
}
)
;
