async
function
setFile
(
downloadLastDir
aURI
aValue
)
{
downloadLastDir
.
setFile
(
aURI
aValue
)
;
await
TestUtils
.
waitForTick
(
)
;
}
function
newDirectory
(
)
{
let
tmpDir
=
FileUtils
.
getDir
(
"
TmpD
"
[
]
true
)
;
let
dir
=
tmpDir
.
clone
(
)
;
dir
.
append
(
"
testdir
"
)
;
dir
.
createUnique
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
return
dir
;
}
function
clearHistory
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
"
)
;
}
async
function
clearHistoryAndWait
(
)
{
clearHistory
(
)
;
await
TestUtils
.
waitForTick
(
)
;
await
TestUtils
.
waitForTick
(
)
;
}
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
const
{
DownloadLastDir
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
DownloadLastDir
.
jsm
"
)
;
const
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
add_task
(
async
function
(
)
{
const
IMAGE_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
content
/
tests
/
browser
/
doggy
.
png
"
;
await
BrowserTestUtils
.
withNewTab
(
IMAGE_URL
async
function
(
browser
)
{
let
tmpDir
=
FileUtils
.
getDir
(
"
TmpD
"
[
]
true
)
;
let
dir
=
newDirectory
(
)
;
let
downloadLastDir
=
new
DownloadLastDir
(
null
)
;
await
setFile
(
downloadLastDir
IMAGE_URL
dir
)
;
await
setFile
(
downloadLastDir
null
tmpDir
)
;
registerCleanupFunction
(
async
function
(
)
{
await
clearHistoryAndWait
(
)
;
dir
.
remove
(
true
)
;
}
)
;
let
showFilePickerPromise
=
new
Promise
(
resolve
=
>
{
MockFilePicker
.
showCallback
=
fp
=
>
resolve
(
fp
.
displayDirectory
.
path
)
;
}
)
;
registerCleanupFunction
(
function
(
)
{
MockFilePicker
.
cleanup
(
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
s
"
{
accelKey
:
true
}
)
;
let
dirPath
=
await
showFilePickerPromise
;
is
(
dirPath
dir
.
path
"
Verify
proposed
download
folder
.
"
)
;
}
)
;
}
)
;
