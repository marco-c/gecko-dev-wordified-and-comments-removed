"
use
strict
"
;
const
MONTH_YEAR
=
"
.
month
-
year
"
BTN_MONTH_YEAR
=
"
#
month
-
year
-
label
"
MONTH_YEAR_VIEW
=
"
.
month
-
year
-
view
"
DAYS_VIEW
=
"
.
days
-
view
"
DAY_SELECTED
=
"
.
selection
"
;
const
DATE_FORMAT
=
new
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
year
:
"
numeric
"
month
:
"
long
"
timeZone
:
"
UTC
"
}
)
.
format
;
async
function
testCalendarBtnAttribute
(
attr
val
)
{
let
browser
=
helper
.
tab
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
attr
val
]
(
attr
val
)
=
>
{
const
input
=
content
.
document
.
querySelector
(
"
input
"
)
;
const
shadowRoot
=
SpecialPowers
.
wrap
(
input
)
.
openOrClosedShadowRoot
;
const
calendarBtn
=
shadowRoot
.
getElementById
(
"
calendar
-
button
"
)
;
Assert
.
equal
(
calendarBtn
.
getAttribute
(
attr
)
val
Calendar
button
has
{
attr
}
attribute
set
to
{
val
}
)
;
}
)
;
}
async
function
testKeyOnSpinners
(
key
document
tabs
=
1
)
{
info
(
Testing
"
{
key
}
"
key
behavior
)
;
Assert
.
equal
(
document
.
activeElement
helper
.
getElement
(
BTN_MONTH_YEAR
)
"
The
month
-
year
toggle
button
is
focused
"
)
;
await
EventUtils
.
synthesizeKey
(
"
"
{
}
)
;
Assert
.
equal
(
helper
.
getElement
(
BTN_MONTH_YEAR
)
.
getAttribute
(
"
aria
-
expanded
"
)
"
true
"
"
Month
-
year
button
is
expanded
when
the
spinners
are
shown
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
helper
.
getElement
(
MONTH_YEAR_VIEW
)
)
"
Month
-
year
selection
panel
is
visible
"
)
;
await
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
tabs
}
)
;
Assert
.
equal
(
document
.
activeElement
.
getAttribute
(
"
role
"
)
"
spinbutton
"
"
The
spinner
is
focused
"
)
;
await
EventUtils
.
synthesizeKey
(
key
{
}
)
;
Assert
.
equal
(
helper
.
getElement
(
BTN_MONTH_YEAR
)
.
getAttribute
(
"
aria
-
expanded
"
)
"
false
"
"
Month
-
year
button
is
collapsed
when
the
spinners
are
hidden
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
helper
.
getElement
(
MONTH_YEAR_VIEW
)
)
"
Month
-
year
selection
panel
is
not
visible
"
)
;
Assert
.
equal
(
document
.
activeElement
helper
.
getElement
(
DAYS_VIEW
)
.
querySelector
(
'
[
tabindex
=
"
0
"
]
'
)
"
A
focusable
day
within
a
calendar
grid
is
focused
"
)
;
await
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
2
}
)
;
}
let
helper
=
new
DateTimeTestHelper
(
)
;
registerCleanupFunction
(
(
)
=
>
{
helper
.
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_datepicker_keyboard_nav
(
)
{
info
(
"
Ensure
picker
opens
closes
and
updates
its
value
with
key
bindings
appropriately
.
"
)
;
const
inputValue
=
"
2016
-
12
-
15
"
;
const
prevMonth
=
"
2016
-
11
-
01
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
id
=
date
type
=
date
value
=
{
inputValue
}
>
)
;
let
browser
=
helper
.
tab
.
linkedBrowser
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
"
)
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
true
"
)
;
let
closed
=
helper
.
promisePickerClosed
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
)
;
await
closed
;
Assert
.
equal
(
helper
.
panel
.
state
"
closed
"
"
Panel
should
be
closed
after
Escape
from
anywhere
on
the
window
"
)
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
false
"
)
;
let
ready
=
helper
.
waitForPickerReady
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
querySelector
(
"
#
date
"
)
.
focus
(
)
;
}
)
;
info
(
"
Test
that
input
updates
with
the
keyboard
update
the
picker
"
)
;
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
browser
)
;
BrowserTestUtils
.
synthesizeKey
(
"
"
{
}
browser
)
;
await
ready
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
true
"
)
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
on
Space
from
anywhere
within
the
input
field
"
)
;
Assert
.
equal
(
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
.
activeElement
.
textContent
"
15
"
"
Picker
is
opened
with
a
focus
set
to
the
currently
selected
date
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
=
=
DATE_FORMAT
(
new
Date
(
prevMonth
)
)
)
;
}
Should
change
to
November
2016
instead
got
{
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
}
)
;
Assert
.
ok
(
true
"
The
date
on
both
the
Calendar
and
Month
-
Year
button
was
updated
when
updating
months
with
Down
arrow
key
"
)
;
closed
=
helper
.
promisePickerClosed
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
window
)
;
await
closed
;
Assert
.
equal
(
helper
.
panel
.
state
"
closed
"
"
Panel
should
be
closed
on
Escape
"
)
;
let
isFocused
=
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
return
(
content
.
document
.
querySelector
(
"
#
date
"
)
=
=
=
content
.
document
.
activeElement
)
;
}
)
;
Assert
.
ok
(
isFocused
"
<
input
>
should
again
be
focused
"
)
;
BrowserTestUtils
.
synthesizeKey
(
"
VK_RIGHT
"
{
}
browser
)
;
BrowserTestUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
browser
)
;
ready
=
helper
.
waitForPickerReady
(
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
"
{
}
browser
)
;
await
ready
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
true
"
)
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
on
Space
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
helper
.
getElement
(
DAY_SELECTED
)
.
textContent
=
=
=
"
16
"
;
}
Should
change
to
the
16th
instead
got
{
helper
.
getElement
(
DAY_SELECTED
)
.
textContent
}
)
;
Assert
.
ok
(
true
"
The
date
on
the
Calendar
was
updated
when
updating
days
with
Up
arrow
key
"
)
;
closed
=
helper
.
promisePickerClosed
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
window
)
;
await
closed
;
Assert
.
equal
(
helper
.
panel
.
state
"
closed
"
"
Panel
should
be
closed
on
Escape
"
)
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
false
"
)
;
info
(
"
Test
the
Calendar
button
can
toggle
the
picker
with
Enter
/
Space
"
)
;
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
browser
)
;
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
browser
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
browser
)
;
await
helper
.
waitForPickerReady
(
)
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
on
Enter
from
the
Calendar
button
"
)
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
true
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RIGHT
"
{
}
)
;
await
EventUtils
.
synthesizeKey
(
"
"
{
}
)
;
await
helper
.
promisePickerClosed
(
)
;
Assert
.
equal
(
helper
.
panel
.
state
"
closed
"
"
Panel
should
be
closed
on
Space
from
the
date
gridcell
"
)
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
false
"
)
;
await
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
{
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
const
input
=
content
.
document
.
querySelector
(
"
input
"
)
;
const
shadowRoot
=
SpecialPowers
.
wrap
(
input
)
.
openOrClosedShadowRoot
;
const
calendarBtn
=
shadowRoot
.
getElementById
(
"
calendar
-
button
"
)
;
Assert
.
equal
(
calendarBtn
.
children
[
0
]
.
tagName
"
svg
"
Calendar
button
has
an
<
svg
>
child
)
;
Assert
.
equal
(
input
.
value
"
2016
-
11
-
17
"
Input
'
s
value
is
not
removed
)
;
}
)
;
await
EventUtils
.
synthesizeKey
(
"
"
{
}
)
;
await
helper
.
waitForPickerReady
(
)
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
on
Space
from
the
Calendar
button
"
)
;
await
testCalendarBtnAttribute
(
"
aria
-
expanded
"
"
true
"
)
;
await
helper
.
tearDown
(
)
;
}
)
;
add_task
(
async
function
test_datepicker_keyboard_arrows
(
)
{
info
(
"
Ensure
calendar
follows
Arrow
key
bindings
appropriately
.
"
)
;
const
inputValue
=
"
2016
-
12
-
10
"
;
const
prevMonth
=
"
2016
-
11
-
01
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
id
=
date
type
=
date
value
=
{
inputValue
}
>
)
;
let
pickerDoc
=
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RIGHT
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
11
"
"
Arrow
Right
moves
focus
to
the
next
day
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
4
"
"
Arrow
Up
moves
focus
to
the
same
weekday
of
the
previous
week
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_LEFT
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
3
"
"
Arrow
Left
moves
focus
to
the
previous
day
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
26
"
"
Arrow
Up
updates
the
view
to
be
on
the
previous
month
if
needed
"
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
prevMonth
)
)
"
Arrow
Up
updates
the
spinner
to
show
the
previous
month
if
needed
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
3
"
"
Arrow
Down
updates
the
view
to
be
on
the
next
month
if
needed
"
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
inputValue
)
)
"
Arrow
Down
updates
the
spinner
to
show
the
next
month
if
needed
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
10
"
"
Arrow
Down
moves
focus
to
the
same
day
of
the
next
week
"
)
;
await
helper
.
tearDown
(
)
;
}
)
;
add_task
(
async
function
test_datepicker_keyboard_home_end
(
)
{
info
(
"
Ensure
calendar
follows
Home
/
End
key
bindings
appropriately
.
"
)
;
const
inputValue
=
"
2016
-
12
-
15
"
;
const
prevMonth
=
"
2016
-
11
-
01
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
id
=
date
type
=
date
value
=
{
inputValue
}
>
)
;
let
pickerDoc
=
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_HOME
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
11
"
"
Home
key
moves
focus
to
the
first
day
/
Sunday
of
the
current
week
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_END
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
17
"
"
End
key
moves
focus
to
the
last
day
/
Saturday
of
the
current
week
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_END
"
{
ctrlKey
:
true
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
31
"
"
Ctrl
+
End
keys
move
focus
to
the
last
day
of
the
current
month
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_HOME
"
{
ctrlKey
:
true
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
1
"
"
Ctrl
+
Home
keys
move
focus
to
the
first
day
of
the
current
month
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_HOME
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
27
"
"
Home
key
updates
the
view
to
be
on
the
previous
month
if
needed
"
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
prevMonth
)
)
"
Home
key
updates
the
spinner
to
show
the
previous
month
if
needed
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_END
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
3
"
"
End
key
updates
the
view
to
be
on
the
next
month
if
needed
"
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
inputValue
)
)
"
End
key
updates
the
spinner
to
show
the
next
month
if
needed
"
)
;
await
helper
.
tearDown
(
)
;
}
)
;
add_task
(
async
function
test_datepicker_keyboard_home_end
(
)
{
info
(
"
Ensure
calendar
follows
Page
Up
/
Down
key
bindings
appropriately
.
"
)
;
const
inputValue
=
"
2023
-
01
-
31
"
;
const
prevMonth
=
"
2022
-
12
-
31
"
;
const
nextMonth
=
"
2023
-
01
-
31
"
;
const
nextShortMonth
=
"
2023
-
03
-
03
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
id
=
date
type
=
date
value
=
{
inputValue
}
>
)
;
let
pickerDoc
=
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
;
Assert
.
equal
(
helper
.
panel
.
state
"
open
"
"
Panel
should
be
opened
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_PageUp
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
31
"
"
Page
Up
key
moves
focus
to
the
same
day
of
the
previous
month
"
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
prevMonth
)
)
"
Page
Up
key
updates
the
spinner
to
show
the
previous
month
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_PageUp
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
1
"
When
the
same
day
does
not
exists
in
the
previous
month
Page
Up
key
moves
focus
to
the
same
day
of
the
same
week
of
the
current
month
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
prevMonth
)
)
"
Page
Up
key
keeps
the
spinner
to
show
the
current
month
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_END
"
{
ctrlKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_PageDown
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
31
"
"
Page
Down
key
moves
focus
to
the
same
day
of
the
next
month
"
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
nextMonth
)
)
"
Page
Down
key
updates
the
spinner
to
show
the
next
month
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_PageDown
"
{
}
)
;
Assert
.
equal
(
pickerDoc
.
activeElement
.
textContent
"
3
"
When
the
same
day
does
not
exists
in
the
next
month
Page
Down
key
moves
focus
to
the
same
day
of
the
same
week
of
the
month
after
)
;
Assert
.
equal
(
helper
.
getElement
(
MONTH_YEAR
)
.
textContent
DATE_FORMAT
(
new
Date
(
nextShortMonth
)
)
"
Page
Down
key
updates
the
spinner
to
show
the
month
after
"
)
;
await
helper
.
tearDown
(
)
;
}
)
;
add_task
(
async
function
test_monthyear_close_date
(
)
{
info
(
"
Ensure
the
month
-
year
panel
of
a
date
input
handles
Space
and
Enter
appropriately
.
"
)
;
const
inputValue
=
"
2022
-
11
-
11
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
type
=
"
date
"
value
=
{
inputValue
}
>
)
;
let
pickerDoc
=
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
;
await
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
2
}
)
;
await
testKeyOnSpinners
(
"
KEY_Enter
"
pickerDoc
)
;
await
testKeyOnSpinners
(
"
"
pickerDoc
)
;
await
testKeyOnSpinners
(
"
KEY_Enter
"
pickerDoc
2
)
;
await
testKeyOnSpinners
(
"
"
pickerDoc
2
)
;
await
helper
.
tearDown
(
)
;
}
)
;
add_task
(
async
function
test_monthyear_close_datetime
(
)
{
info
(
"
Ensure
the
month
-
year
panel
of
a
datetime
-
local
input
handles
Space
and
Enter
appropriately
.
"
)
;
const
inputValue
=
"
2022
-
11
-
11T11
:
11
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
type
=
"
datetime
-
local
"
value
=
{
inputValue
}
>
)
;
let
pickerDoc
=
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
;
await
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
2
}
)
;
await
testKeyOnSpinners
(
"
KEY_Enter
"
pickerDoc
)
;
await
testKeyOnSpinners
(
"
"
pickerDoc
)
;
await
testKeyOnSpinners
(
"
KEY_Enter
"
pickerDoc
2
)
;
await
testKeyOnSpinners
(
"
"
pickerDoc
2
)
;
await
helper
.
tearDown
(
)
;
}
)
;
add_task
(
async
function
test_monthyear_escape_date
(
)
{
info
(
"
Ensure
the
month
-
year
panel
of
a
date
input
can
be
closed
with
Esc
.
"
)
;
const
inputValue
=
"
2022
-
12
-
12
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
type
=
"
date
"
value
=
{
inputValue
}
>
)
;
let
pickerDoc
=
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
2
}
)
;
await
testKeyOnSpinners
(
"
KEY_Escape
"
pickerDoc
)
;
await
testKeyOnSpinners
(
"
KEY_Escape
"
pickerDoc
2
)
;
await
helper
.
tearDown
(
)
;
}
)
;
add_task
(
async
function
test_monthyear_escape_datetime
(
)
{
info
(
"
Ensure
the
month
-
year
panel
of
a
datetime
-
local
input
can
be
closed
with
Esc
.
"
)
;
const
inputValue
=
"
2022
-
12
-
12
"
;
await
helper
.
openPicker
(
data
:
text
/
html
<
input
type
=
"
date
"
value
=
{
inputValue
}
>
)
;
let
pickerDoc
=
helper
.
panel
.
querySelector
(
"
#
dateTimePopupFrame
"
)
.
contentDocument
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
2
}
)
;
await
testKeyOnSpinners
(
"
KEY_Escape
"
pickerDoc
)
;
await
testKeyOnSpinners
(
"
KEY_Escape
"
pickerDoc
2
)
;
await
helper
.
tearDown
(
)
;
}
)
;
