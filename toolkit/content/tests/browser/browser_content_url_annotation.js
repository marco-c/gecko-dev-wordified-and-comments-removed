"
use
strict
"
;
requestLongerTimeout
(
2
)
;
function
removeFile
(
directory
filename
)
{
let
file
=
directory
.
clone
(
)
;
file
.
append
(
filename
)
;
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
}
function
getMinidumpDirectory
(
)
{
let
dir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
dir
.
append
(
"
minidumps
"
)
;
return
dir
;
}
add_task
(
async
function
test_content_url_annotation
(
)
{
let
url
=
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
content
/
tests
/
browser
/
file_redirect
.
html
"
;
let
redirect_url
=
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
content
/
tests
/
browser
/
file_redirect_to
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
}
async
function
(
browser
)
{
ok
(
browser
.
isRemoteBrowser
"
Should
be
a
remote
browser
"
)
;
let
promise
=
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
dump
(
"
ContentTask
starting
.
.
.
\
n
"
)
;
await
new
Promise
(
(
resolve
)
=
>
{
addEventListener
(
"
RedirectDone
"
function
listener
(
)
{
dump
(
"
Got
RedirectDone
\
n
"
)
;
removeEventListener
(
"
RedirectDone
"
listener
)
;
resolve
(
)
;
}
true
true
)
;
}
)
;
}
)
;
browser
.
loadURI
(
url
)
;
await
promise
;
let
annotations
=
await
BrowserTestUtils
.
crashBrowser
(
browser
)
;
ok
(
"
URL
"
in
annotations
"
annotated
a
URL
"
)
;
is
(
annotations
.
URL
redirect_url
"
Should
have
annotated
the
URL
after
redirect
"
)
;
}
)
;
}
)
;
