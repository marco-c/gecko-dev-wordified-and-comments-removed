XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
this
)
;
const
TEST_PAGE_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
The
letter
s
.
"
;
const
E10S_PARENT_TEST_PAGE_URI
=
"
javascript
:
document
.
write
(
'
The
letter
s
.
'
)
;
"
;
add_task
(
async
function
test_hotkey_event_propagation
(
)
{
info
(
"
Ensure
hotkeys
are
not
affected
by
stopPropagation
.
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE_URI
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
let
findbar
=
gBrowser
.
getFindBar
(
)
;
const
HOTKEYS
=
[
"
/
"
"
'
"
]
;
for
(
let
key
of
HOTKEYS
)
{
is
(
findbar
.
hidden
true
"
Findbar
is
hidden
now
.
"
)
;
gBrowser
.
selectedTab
=
tab
;
await
SimpleTest
.
promiseFocus
(
gBrowser
.
selectedBrowser
)
;
await
BrowserTestUtils
.
sendChar
(
key
browser
)
;
is
(
findbar
.
hidden
false
"
Findbar
should
not
be
hidden
.
"
)
;
await
closeFindbarAndWait
(
findbar
)
;
}
let
frameScript
=
(
)
=
>
{
const
stopPropagation
=
e
=
>
e
.
stopImmediatePropagation
(
)
;
let
window
=
content
.
document
.
defaultView
;
window
.
removeEventListener
(
"
keydown
"
stopPropagation
)
;
window
.
removeEventListener
(
"
keypress
"
stopPropagation
)
;
window
.
removeEventListener
(
"
keyup
"
stopPropagation
)
;
}
;
let
mm
=
browser
.
messageManager
;
mm
.
loadFrameScript
(
"
data
:
(
"
+
frameScript
.
toString
(
)
+
"
)
(
)
;
"
false
)
;
for
(
let
key
of
HOTKEYS
)
{
is
(
findbar
.
hidden
true
"
Findbar
is
hidden
now
.
"
)
;
gBrowser
.
selectedTab
=
tab
;
await
SimpleTest
.
promiseFocus
(
gBrowser
.
selectedBrowser
)
;
await
BrowserTestUtils
.
sendChar
(
key
browser
)
;
is
(
findbar
.
hidden
false
"
Findbar
should
not
be
hidden
.
"
)
;
await
closeFindbarAndWait
(
findbar
)
;
}
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_not_found
(
)
{
info
(
"
Check
correct
'
Phrase
not
found
'
on
new
tab
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE_URI
)
;
await
promiseFindFinished
(
"
-
-
-
THIS
SHOULD
NEVER
MATCH
-
-
-
"
false
)
;
let
findbar
=
gBrowser
.
getFindBar
(
)
;
is
(
findbar
.
_findStatusDesc
.
textContent
findbar
.
_notFoundStr
"
Findbar
status
text
should
be
'
Phrase
not
found
'
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_found
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE_URI
)
;
await
promiseFindFinished
(
"
S
"
true
)
;
ok
(
!
gBrowser
.
getFindBar
(
)
.
_findStatusDesc
.
textContent
"
Findbar
status
should
be
empty
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_tabwise_case_sensitive
(
)
{
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE_URI
)
;
let
findbar1
=
gBrowser
.
getFindBar
(
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE_URI
)
;
let
findbar2
=
gBrowser
.
getFindBar
(
)
;
findbar1
.
getElement
(
"
find
-
case
-
sensitive
"
)
.
click
(
)
;
gBrowser
.
selectedTab
=
tab1
;
await
promiseFindFinished
(
"
S
"
true
)
;
is
(
findbar1
.
_findStatusDesc
.
textContent
findbar1
.
_notFoundStr
"
Findbar
status
text
should
be
'
Phrase
not
found
'
"
)
;
gBrowser
.
selectedTab
=
tab2
;
await
promiseFindFinished
(
"
S
"
true
)
;
ok
(
!
findbar2
.
_findStatusDesc
.
textContent
"
Findbar
status
should
be
empty
"
)
;
gBrowser
.
removeTab
(
tab1
)
;
gBrowser
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
test_reinitialization_at_remoteness_change
(
)
{
if
(
!
gMultiProcessBrowser
)
{
info
(
"
Skipping
this
test
because
of
non
-
e10s
environment
.
"
)
;
return
;
}
info
(
"
Ensure
findbar
re
-
initialization
at
remoteness
change
.
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE_URI
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
let
findbar
=
gBrowser
.
getFindBar
(
)
;
await
promiseFindFinished
(
"
z
"
false
)
;
is
(
findbar
.
_findStatusDesc
.
textContent
findbar
.
_notFoundStr
"
Findbar
status
text
should
be
'
Phrase
not
found
'
"
)
;
await
promiseFindFinished
(
"
s
"
false
)
;
ok
(
!
findbar
.
_findStatusDesc
.
textContent
"
Findbar
status
should
be
empty
"
)
;
ok
(
browser
.
isRemoteBrowser
"
Browser
should
be
remote
now
.
"
)
;
await
promiseRemotenessChange
(
tab
false
)
;
await
BrowserTestUtils
.
loadURI
(
browser
E10S_PARENT_TEST_PAGE_URI
)
;
ok
(
!
browser
.
isRemoteBrowser
"
Browser
should
not
be
remote
any
more
.
"
)
;
await
promiseFindFinished
(
"
z
"
false
)
;
is
(
findbar
.
_findStatusDesc
.
textContent
findbar
.
_notFoundStr
"
Findbar
status
text
should
be
'
Phrase
not
found
'
"
)
;
await
promiseFindFinished
(
"
s
"
false
)
;
ok
(
!
findbar
.
_findStatusDesc
.
textContent
"
Findbar
status
should
be
empty
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
(
)
{
if
(
!
gMultiProcessBrowser
)
{
info
(
"
Skipping
this
test
because
of
non
-
e10s
environment
.
"
)
;
return
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE_URI
)
;
let
browser
=
tab
.
linkedBrowser
;
ok
(
!
gFindBarInitialized
"
findbar
isn
'
t
initialized
yet
"
)
;
let
findBar
=
gFindBar
;
let
initialValue
=
findBar
.
_findField
.
value
;
EventUtils
.
synthesizeKey
(
"
f
"
{
accelKey
:
true
}
window
)
;
let
promises
=
[
BrowserTestUtils
.
sendChar
(
"
a
"
browser
)
BrowserTestUtils
.
sendChar
(
"
b
"
browser
)
BrowserTestUtils
.
sendChar
(
"
c
"
browser
)
]
;
isnot
(
document
.
activeElement
findBar
.
_findField
.
inputField
"
findbar
is
not
yet
focused
"
)
;
is
(
findBar
.
_findField
.
value
initialValue
"
still
has
initial
find
query
"
)
;
await
Promise
.
all
(
promises
)
;
is
(
document
.
activeElement
findBar
.
_findField
.
inputField
"
findbar
is
now
focused
"
)
;
is
(
findBar
.
_findField
.
value
"
abc
"
"
abc
fully
entered
as
find
query
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
function
promiseFindFinished
(
searchText
highlightOn
)
{
let
deferred
=
Promise
.
defer
(
)
;
let
findbar
=
gBrowser
.
getFindBar
(
)
;
findbar
.
startFind
(
findbar
.
FIND_NORMAL
)
;
let
highlightElement
=
findbar
.
getElement
(
"
highlight
"
)
;
if
(
highlightElement
.
checked
!
=
highlightOn
)
highlightElement
.
click
(
)
;
executeSoon
(
(
)
=
>
{
findbar
.
_findField
.
value
=
searchText
;
let
resultListener
;
let
waitMore
=
highlightOn
;
let
findTimeout
=
setTimeout
(
(
)
=
>
foundOrTimedout
(
null
)
2000
)
;
let
foundOrTimedout
=
function
(
aData
)
{
if
(
aData
!
=
=
null
&
&
waitMore
)
{
waitMore
=
false
;
return
;
}
if
(
aData
=
=
=
null
)
info
(
"
Result
listener
not
called
timeout
reached
.
"
)
;
clearTimeout
(
findTimeout
)
;
findbar
.
browser
.
finder
.
removeResultListener
(
resultListener
)
;
deferred
.
resolve
(
)
;
}
resultListener
=
{
onFindResult
:
foundOrTimedout
}
;
findbar
.
browser
.
finder
.
addResultListener
(
resultListener
)
;
findbar
.
_find
(
)
;
}
)
;
return
deferred
.
promise
;
}
function
promiseRemotenessChange
(
tab
shouldBeRemote
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
tab
.
addEventListener
(
"
TabRemotenessChange
"
function
(
)
{
resolve
(
)
;
}
{
once
:
true
}
)
;
gBrowser
.
updateBrowserRemoteness
(
browser
shouldBeRemote
)
;
}
)
;
}
