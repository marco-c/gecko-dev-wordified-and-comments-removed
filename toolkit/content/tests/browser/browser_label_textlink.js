add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
config
"
}
async
function
(
browser
)
{
let
newTabURL
=
"
http
:
/
/
www
.
example
.
com
/
"
;
await
ContentTask
.
spawn
(
browser
newTabURL
async
function
(
newTabURL
)
{
let
doc
=
content
.
document
;
let
label
=
doc
.
createElement
(
"
label
"
)
;
label
.
href
=
newTabURL
;
label
.
id
=
"
textlink
-
test
"
;
label
.
className
=
"
text
-
link
"
;
label
.
textContent
=
"
click
me
"
;
doc
.
documentElement
.
append
(
label
)
;
}
)
;
let
awaitNewTab
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
newTabURL
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
textlink
-
test
"
{
}
browser
)
;
let
newTab
=
await
awaitNewTab
;
is
(
newTab
.
linkedBrowser
gBrowser
.
selectedBrowser
"
selected
tab
should
be
example
page
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
awaitNewTab
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
newTabURL
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
textlink
-
test
"
{
ctrlKey
:
true
metaKey
:
true
shiftKey
:
true
}
browser
)
;
await
awaitNewTab
;
is
(
gBrowser
.
selectedBrowser
browser
"
selected
tab
should
be
original
tab
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
)
;
awaitNewTab
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
newTabURL
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
textlink
-
test
"
{
button
:
1
}
browser
)
;
newTab
=
await
awaitNewTab
;
is
(
newTab
.
linkedBrowser
gBrowser
.
selectedBrowser
"
selected
tab
should
be
example
page
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
)
;
}
)
;
}
)
;
