"
use
strict
"
;
function
DateKeeper
(
props
)
{
this
.
init
(
props
)
;
}
{
const
DAYS_IN_A_WEEK
=
7
MONTHS_IN_A_YEAR
=
12
YEAR_VIEW_SIZE
=
200
YEAR_BUFFER_SIZE
=
10
MIN_DATE
=
-
8640000000000000
MAX_DATE
=
8640000000000000
;
DateKeeper
.
prototype
=
{
get
year
(
)
{
return
this
.
state
.
dateObj
.
getUTCFullYear
(
)
;
}
get
month
(
)
{
return
this
.
state
.
dateObj
.
getUTCMonth
(
)
;
}
get
day
(
)
{
return
this
.
state
.
dateObj
.
getUTCDate
(
)
;
}
get
selection
(
)
{
return
this
.
state
.
selection
;
}
init
(
{
year
month
day
min
max
firstDayOfWeek
=
0
weekends
=
[
0
]
calViewSize
=
42
}
)
{
const
today
=
new
Date
(
)
;
const
isDateSet
=
year
!
=
undefined
&
&
month
!
=
undefined
&
&
day
!
=
undefined
;
this
.
state
=
{
firstDayOfWeek
weekends
calViewSize
min
:
new
Date
(
min
!
=
undefined
?
min
:
MIN_DATE
)
max
:
new
Date
(
max
!
=
undefined
?
max
:
MAX_DATE
)
today
:
this
.
_newUTCDate
(
today
.
getFullYear
(
)
today
.
getMonth
(
)
today
.
getDate
(
)
)
weekHeaders
:
this
.
_getWeekHeaders
(
firstDayOfWeek
weekends
)
years
:
[
]
months
:
[
]
days
:
[
]
selection
:
{
year
month
day
}
}
;
this
.
state
.
dateObj
=
isDateSet
?
this
.
_newUTCDate
(
year
month
day
)
:
new
Date
(
this
.
state
.
today
)
;
}
set
(
{
year
=
this
.
year
month
=
this
.
month
day
=
this
.
day
}
)
{
this
.
state
.
dateObj
.
setUTCFullYear
(
year
month
day
)
;
}
setSelection
(
{
year
month
day
}
)
{
this
.
state
.
selection
.
year
=
year
;
this
.
state
.
selection
.
month
=
month
;
this
.
state
.
selection
.
day
=
day
;
}
setMonth
(
month
)
{
const
lastDayOfMonth
=
this
.
_newUTCDate
(
this
.
year
month
+
1
0
)
.
getUTCDate
(
)
;
this
.
set
(
{
year
:
this
.
year
month
day
:
Math
.
min
(
this
.
day
lastDayOfMonth
)
}
)
;
}
setYear
(
year
)
{
const
lastDayOfMonth
=
this
.
_newUTCDate
(
year
this
.
month
+
1
0
)
.
getUTCDate
(
)
;
this
.
set
(
{
year
month
:
this
.
month
day
:
Math
.
min
(
this
.
day
lastDayOfMonth
)
}
)
;
}
setMonthByOffset
(
offset
)
{
const
lastDayOfMonth
=
this
.
_newUTCDate
(
this
.
year
this
.
month
+
offset
+
1
0
)
.
getUTCDate
(
)
;
this
.
set
(
{
year
:
this
.
year
month
:
this
.
month
+
offset
day
:
Math
.
min
(
this
.
day
lastDayOfMonth
)
}
)
;
}
getMonths
(
)
{
let
months
=
[
]
;
for
(
let
i
=
0
;
i
<
MONTHS_IN_A_YEAR
;
i
+
+
)
{
months
.
push
(
{
value
:
i
enabled
:
true
}
)
;
}
return
months
;
}
getYears
(
)
{
let
years
=
[
]
;
const
firstItem
=
this
.
state
.
years
[
0
]
;
const
lastItem
=
this
.
state
.
years
[
this
.
state
.
years
.
length
-
1
]
;
const
currentYear
=
this
.
year
;
if
(
!
firstItem
|
|
!
lastItem
|
|
currentYear
<
=
firstItem
.
value
+
YEAR_BUFFER_SIZE
|
|
currentYear
>
=
lastItem
.
value
-
YEAR_BUFFER_SIZE
)
{
for
(
let
i
=
-
(
YEAR_VIEW_SIZE
/
2
)
;
i
<
YEAR_VIEW_SIZE
/
2
;
i
+
+
)
{
years
.
push
(
{
value
:
currentYear
+
i
enabled
:
true
}
)
;
}
this
.
state
.
years
=
years
;
}
return
this
.
state
.
years
;
}
getDays
(
)
{
const
firstDayOfMonth
=
this
.
_getFirstCalendarDate
(
this
.
state
.
dateObj
this
.
state
.
firstDayOfWeek
)
;
const
month
=
this
.
month
;
let
days
=
[
]
;
for
(
let
i
=
0
;
i
<
this
.
state
.
calViewSize
;
i
+
+
)
{
const
dateObj
=
this
.
_newUTCDate
(
firstDayOfMonth
.
getUTCFullYear
(
)
firstDayOfMonth
.
getUTCMonth
(
)
firstDayOfMonth
.
getUTCDate
(
)
+
i
)
;
let
classNames
=
[
]
;
let
enabled
=
true
;
if
(
this
.
state
.
weekends
.
includes
(
dateObj
.
getUTCDay
(
)
)
)
{
classNames
.
push
(
"
weekend
"
)
;
}
if
(
month
!
=
dateObj
.
getUTCMonth
(
)
)
{
classNames
.
push
(
"
outside
"
)
;
}
if
(
this
.
state
.
selection
.
year
=
=
dateObj
.
getUTCFullYear
(
)
&
&
this
.
state
.
selection
.
month
=
=
dateObj
.
getUTCMonth
(
)
&
&
this
.
state
.
selection
.
day
=
=
dateObj
.
getUTCDate
(
)
)
{
classNames
.
push
(
"
selection
"
)
;
}
if
(
dateObj
.
getTime
(
)
<
this
.
state
.
min
.
getTime
(
)
|
|
dateObj
.
getTime
(
)
>
this
.
state
.
max
.
getTime
(
)
)
{
classNames
.
push
(
"
out
-
of
-
range
"
)
;
enabled
=
false
;
}
if
(
this
.
state
.
today
.
getTime
(
)
=
=
dateObj
.
getTime
(
)
)
{
classNames
.
push
(
"
today
"
)
;
}
days
.
push
(
{
dateObj
classNames
enabled
}
)
;
}
return
days
;
}
_getWeekHeaders
(
firstDayOfWeek
weekends
)
{
let
headers
=
[
]
;
let
dayOfWeek
=
firstDayOfWeek
;
for
(
let
i
=
0
;
i
<
DAYS_IN_A_WEEK
;
i
+
+
)
{
headers
.
push
(
{
textContent
:
dayOfWeek
%
DAYS_IN_A_WEEK
classNames
:
weekends
.
includes
(
dayOfWeek
%
DAYS_IN_A_WEEK
)
?
[
"
weekend
"
]
:
[
]
}
)
;
dayOfWeek
+
+
;
}
return
headers
;
}
_getFirstCalendarDate
(
dateObj
firstDayOfWeek
)
{
const
daysOffset
=
1
-
DAYS_IN_A_WEEK
;
let
firstDayOfMonth
=
this
.
_newUTCDate
(
dateObj
.
getUTCFullYear
(
)
dateObj
.
getUTCMonth
(
)
)
;
let
dayOfWeek
=
firstDayOfMonth
.
getUTCDay
(
)
;
return
this
.
_newUTCDate
(
firstDayOfMonth
.
getUTCFullYear
(
)
firstDayOfMonth
.
getUTCMonth
(
)
firstDayOfWeek
=
=
dayOfWeek
?
daysOffset
:
(
firstDayOfWeek
-
dayOfWeek
+
daysOffset
)
%
DAYS_IN_A_WEEK
)
;
}
_newUTCDate
(
.
.
.
parts
)
{
return
new
Date
(
Date
.
UTC
(
.
.
.
parts
)
)
;
}
}
;
}
