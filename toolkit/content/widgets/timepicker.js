"
use
strict
"
;
function
TimePicker
(
context
)
{
this
.
context
=
context
;
this
.
_attachEventListeners
(
)
;
}
{
const
DAY_PERIOD_IN_HOURS
=
12
SECOND_IN_MS
=
1000
MINUTE_IN_MS
=
60000
DAY_IN_MS
=
86400000
;
TimePicker
.
prototype
=
{
init
(
props
)
{
this
.
props
=
props
|
|
{
}
;
this
.
_setDefaultState
(
)
;
this
.
_createComponents
(
)
;
this
.
_setComponentStates
(
)
;
}
_setDefaultState
(
)
{
const
{
hour
minute
min
max
step
format
}
=
this
.
props
;
const
now
=
new
Date
(
)
;
let
timerHour
=
hour
=
=
undefined
?
now
.
getHours
(
)
:
hour
;
let
timerMinute
=
minute
=
=
undefined
?
now
.
getMinutes
(
)
:
minute
;
let
timeKeeper
=
new
TimeKeeper
(
{
min
:
this
.
_parseTimeString
(
min
)
|
|
new
Date
(
0
)
max
:
this
.
_parseTimeString
(
max
)
|
|
new
Date
(
DAY_IN_MS
-
1
)
stepInMs
:
step
?
step
*
SECOND_IN_MS
:
MINUTE_IN_MS
format
:
format
|
|
"
12
"
}
)
;
timeKeeper
.
setState
(
{
hour
:
timerHour
minute
:
timerMinute
}
)
;
this
.
state
=
{
timeKeeper
}
;
}
_parseTimeString
(
timeString
)
{
let
time
=
new
Date
(
"
1970
-
01
-
01T
"
+
timeString
+
"
Z
"
)
;
return
time
.
toString
(
)
=
=
"
Invalid
Date
"
?
false
:
time
;
}
_createComponents
(
)
{
const
{
locale
format
}
=
this
.
props
;
const
{
timeKeeper
}
=
this
.
state
;
const
wrapSetValueFn
=
(
setTimeFunction
)
=
>
{
return
(
value
)
=
>
{
setTimeFunction
(
value
)
;
this
.
_setComponentStates
(
)
;
this
.
_dispatchState
(
)
;
}
;
}
;
const
numberFormat
=
new
Intl
.
NumberFormat
(
locale
)
.
format
;
this
.
components
=
{
hour
:
new
Spinner
(
{
setValue
:
wrapSetValueFn
(
value
=
>
{
timeKeeper
.
setHour
(
value
)
;
this
.
state
.
isHourSet
=
true
;
}
)
getDisplayString
:
hour
=
>
{
if
(
format
=
=
"
24
"
)
{
return
numberFormat
(
hour
)
;
}
const
hourIn12
=
hour
%
DAY_PERIOD_IN_HOURS
;
return
hourIn12
=
=
0
?
numberFormat
(
12
)
:
numberFormat
(
hourIn12
)
;
}
}
this
.
context
)
minute
:
new
Spinner
(
{
setValue
:
wrapSetValueFn
(
value
=
>
{
timeKeeper
.
setMinute
(
value
)
;
this
.
state
.
isMinuteSet
=
true
;
}
)
getDisplayString
:
minute
=
>
numberFormat
(
minute
)
}
this
.
context
)
}
;
this
.
_insertLayoutElement
(
{
tag
:
"
div
"
textContent
:
"
:
"
className
:
"
colon
"
insertBefore
:
this
.
components
.
minute
.
elements
.
container
}
)
;
if
(
format
=
=
"
12
"
)
{
this
.
components
.
dayPeriod
=
new
Spinner
(
{
setValue
:
wrapSetValueFn
(
value
=
>
{
timeKeeper
.
setDayPeriod
(
value
)
;
this
.
state
.
isDayPeriodSet
=
true
;
}
)
getDisplayString
:
dayPeriod
=
>
dayPeriod
=
=
0
?
"
AM
"
:
"
PM
"
hideButtons
:
true
}
this
.
context
)
;
this
.
_insertLayoutElement
(
{
tag
:
"
div
"
className
:
"
spacer
"
insertBefore
:
this
.
components
.
dayPeriod
.
elements
.
container
}
)
;
}
}
_insertLayoutElement
(
{
tag
insertBefore
className
textContent
}
)
{
let
el
=
document
.
createElement
(
tag
)
;
el
.
textContent
=
textContent
;
el
.
className
=
className
;
this
.
context
.
insertBefore
(
el
insertBefore
)
;
}
_setComponentStates
(
)
{
const
{
timeKeeper
isHourSet
isMinuteSet
isDayPeriodSet
}
=
this
.
state
;
const
isInvalid
=
timeKeeper
.
state
.
isInvalid
;
const
setToMinValue
=
!
isHourSet
&
&
!
isMinuteSet
&
&
!
isDayPeriodSet
&
&
isInvalid
;
this
.
components
.
hour
.
setState
(
{
value
:
setToMinValue
?
timeKeeper
.
ranges
.
hours
[
0
]
.
value
:
timeKeeper
.
hour
items
:
timeKeeper
.
ranges
.
hours
isInfiniteScroll
:
true
isValueSet
:
isHourSet
isInvalid
}
)
;
this
.
components
.
minute
.
setState
(
{
value
:
setToMinValue
?
timeKeeper
.
ranges
.
minutes
[
0
]
.
value
:
timeKeeper
.
minute
items
:
timeKeeper
.
ranges
.
minutes
isInfiniteScroll
:
true
isValueSet
:
isMinuteSet
isInvalid
}
)
;
if
(
this
.
props
.
format
=
=
"
12
"
)
{
this
.
components
.
dayPeriod
.
setState
(
{
value
:
setToMinValue
?
timeKeeper
.
ranges
.
dayPeriod
[
0
]
.
value
:
timeKeeper
.
dayPeriod
items
:
timeKeeper
.
ranges
.
dayPeriod
isInfiniteScroll
:
false
isValueSet
:
isDayPeriodSet
isInvalid
}
)
;
}
}
_dispatchState
(
)
{
const
{
hour
minute
}
=
this
.
state
.
timeKeeper
;
const
{
isHourSet
isMinuteSet
isDayPeriodSet
}
=
this
.
state
;
window
.
postMessage
(
{
name
:
"
TimePickerPopupChanged
"
detail
:
{
hour
minute
isHourSet
isMinuteSet
isDayPeriodSet
}
}
"
*
"
)
;
}
_attachEventListeners
(
)
{
window
.
addEventListener
(
"
message
"
this
)
;
document
.
addEventListener
(
"
mousedown
"
this
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
message
"
:
{
this
.
handleMessage
(
event
)
;
break
;
}
case
"
mousedown
"
:
{
event
.
preventDefault
(
)
;
event
.
target
.
setCapture
(
)
;
break
;
}
}
}
handleMessage
(
event
)
{
switch
(
event
.
data
.
name
)
{
case
"
TimePickerSetValue
"
:
{
this
.
set
(
event
.
data
.
detail
)
;
break
;
}
case
"
TimePickerInit
"
:
{
this
.
init
(
event
.
data
.
detail
)
;
break
;
}
}
}
set
(
timeState
)
{
if
(
timeState
.
hour
!
=
undefined
)
{
this
.
state
.
isHourSet
=
true
;
}
if
(
timeState
.
minute
!
=
undefined
)
{
this
.
state
.
isMinuteSet
=
true
;
}
this
.
state
.
timeKeeper
.
setState
(
timeState
)
;
this
.
_setComponentStates
(
)
;
}
}
;
}
