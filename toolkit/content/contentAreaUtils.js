var
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserUtils
:
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
Downloads
:
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
DownloadPaths
:
"
resource
:
/
/
gre
/
modules
/
DownloadPaths
.
jsm
"
DownloadLastDir
:
"
resource
:
/
/
gre
/
modules
/
DownloadLastDir
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
Deprecated
:
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
}
)
;
var
ContentAreaUtils
=
{
get
stringBundle
(
)
{
delete
this
.
stringBundle
;
return
(
this
.
stringBundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
global
/
locale
/
contentAreaCommands
.
properties
"
)
)
;
}
}
;
function
urlSecurityCheck
(
aURL
aPrincipal
aFlags
)
{
return
BrowserUtils
.
urlSecurityCheck
(
aURL
aPrincipal
aFlags
)
;
}
function
forbidCPOW
(
arg
func
argname
)
{
if
(
arg
&
&
(
typeof
arg
=
=
"
object
"
|
|
typeof
arg
=
=
"
function
"
)
&
&
Cu
.
isCrossProcessWrapper
(
arg
)
)
{
throw
new
Error
(
no
CPOWs
allowed
for
argument
{
argname
}
to
{
func
}
)
;
}
}
function
saveURL
(
aURL
aFileName
aFilePickerTitleKey
aShouldBypassCache
aSkipPrompt
aReferrerInfo
aSourceDocument
aIsContentWindowPrivate
aPrincipal
)
{
forbidCPOW
(
aURL
"
saveURL
"
"
aURL
"
)
;
forbidCPOW
(
aReferrerInfo
"
saveURL
"
"
aReferrerInfo
"
)
;
internalSave
(
aURL
null
aFileName
null
null
aShouldBypassCache
aFilePickerTitleKey
null
aReferrerInfo
aSourceDocument
aSkipPrompt
null
aIsContentWindowPrivate
aPrincipal
)
;
}
const
imgICache
=
Ci
.
imgICache
;
const
nsISupportsCString
=
Ci
.
nsISupportsCString
;
function
saveImageURL
(
aURL
aFileName
aFilePickerTitleKey
aShouldBypassCache
aSkipPrompt
aReferrerInfo
aDoc
aContentType
aContentDisp
aIsContentWindowPrivate
aPrincipal
)
{
forbidCPOW
(
aURL
"
saveImageURL
"
"
aURL
"
)
;
forbidCPOW
(
aReferrerInfo
"
saveImageURL
"
"
aReferrerInfo
"
)
;
if
(
aDoc
&
&
aIsContentWindowPrivate
=
=
undefined
)
{
if
(
Cu
.
isCrossProcessWrapper
(
aDoc
)
)
{
Deprecated
.
warning
(
"
saveImageURL
should
not
be
passed
document
CPOWs
.
"
+
"
The
caller
should
pass
in
the
content
type
and
"
+
"
disposition
themselves
"
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1243643
"
)
;
}
Deprecated
.
warning
(
"
saveImageURL
should
be
passed
the
private
state
of
"
+
"
the
containing
window
.
"
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1243643
"
)
;
aIsContentWindowPrivate
=
PrivateBrowsingUtils
.
isContentWindowPrivate
(
aDoc
.
defaultView
)
;
}
if
(
aIsContentWindowPrivate
=
=
undefined
)
{
throw
new
Error
(
"
saveImageURL
couldn
'
t
compute
private
state
of
content
window
"
)
;
}
if
(
!
aShouldBypassCache
&
&
aDoc
&
&
!
Cu
.
isCrossProcessWrapper
(
aDoc
)
&
&
!
aContentType
&
&
!
aContentDisp
)
{
try
{
var
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
aDoc
)
;
var
props
=
imageCache
.
findEntryProperties
(
makeURI
(
aURL
getCharsetforSave
(
null
)
)
aDoc
)
;
if
(
props
)
{
aContentType
=
props
.
get
(
"
type
"
nsISupportsCString
)
;
aContentDisp
=
props
.
get
(
"
content
-
disposition
"
nsISupportsCString
)
;
}
}
catch
(
e
)
{
}
}
internalSave
(
aURL
null
aFileName
aContentDisp
aContentType
aShouldBypassCache
aFilePickerTitleKey
null
aReferrerInfo
aDoc
aSkipPrompt
null
aIsContentWindowPrivate
aPrincipal
)
;
}
function
saveBrowser
(
aBrowser
aSkipPrompt
aOuterWindowID
=
0
)
{
if
(
!
aBrowser
)
{
throw
new
Error
(
"
Must
have
a
browser
when
calling
saveBrowser
"
)
;
}
let
persistable
=
aBrowser
.
frameLoader
;
if
(
aBrowser
.
contentPrincipal
.
URI
&
&
aBrowser
.
contentPrincipal
.
URI
.
spec
=
=
"
resource
:
/
/
pdf
.
js
/
web
/
viewer
.
html
"
&
&
aBrowser
.
currentURI
.
schemeIs
(
"
file
"
)
)
{
let
correctPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
aBrowser
.
currentURI
aBrowser
.
contentPrincipal
.
originAttributes
)
;
internalSave
(
aBrowser
.
currentURI
.
spec
null
null
null
"
application
/
pdf
"
false
null
null
null
null
aSkipPrompt
null
PrivateBrowsingUtils
.
isWindowPrivate
(
aBrowser
.
ownerGlobal
)
correctPrincipal
)
;
return
;
}
let
stack
=
Components
.
stack
.
caller
;
persistable
.
startPersistence
(
aOuterWindowID
{
onDocumentReady
(
document
)
{
saveDocument
(
document
aSkipPrompt
)
;
}
onError
(
status
)
{
throw
new
Components
.
Exception
(
"
saveBrowser
failed
asynchronously
in
startPersistence
"
status
stack
)
;
}
}
)
;
}
function
saveDocument
(
aDocument
aSkipPrompt
)
{
if
(
!
aDocument
)
{
throw
new
Error
(
"
Must
have
a
document
when
calling
saveDocument
"
)
;
}
let
contentDisposition
=
null
;
let
cacheKey
=
0
;
if
(
aDocument
instanceof
Ci
.
nsIWebBrowserPersistDocument
)
{
contentDisposition
=
aDocument
.
contentDisposition
;
cacheKey
=
aDocument
.
cacheKey
;
}
else
if
(
aDocument
.
nodeType
=
=
9
)
{
let
win
=
aDocument
.
defaultView
;
try
{
contentDisposition
=
win
.
windowUtils
.
getDocumentMetadata
(
"
content
-
disposition
"
)
;
}
catch
(
ex
)
{
}
try
{
let
shEntry
=
win
.
docShell
.
QueryInterface
(
Ci
.
nsIWebPageDescriptor
)
.
currentDescriptor
.
QueryInterface
(
Ci
.
nsISHEntry
)
;
cacheKey
=
shEntry
.
cacheKey
;
}
catch
(
ex
)
{
}
}
internalSave
(
aDocument
.
documentURI
aDocument
null
contentDisposition
aDocument
.
contentType
false
null
null
aDocument
.
referrerInfo
aDocument
aSkipPrompt
cacheKey
)
;
}
function
DownloadListener
(
win
transfer
)
{
function
makeClosure
(
name
)
{
return
function
(
)
{
transfer
[
name
]
.
apply
(
transfer
arguments
)
;
}
;
}
this
.
window
=
win
;
for
(
var
i
in
transfer
)
{
if
(
i
!
=
"
QueryInterface
"
)
{
this
[
i
]
=
makeClosure
(
i
)
;
}
}
}
DownloadListener
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIInterfaceRequestor
"
"
nsIWebProgressListener
"
"
nsIWebProgressListener2
"
]
)
getInterface
:
function
dl_gi
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIAuthPrompt
)
|
|
aIID
.
equals
(
Ci
.
nsIAuthPrompt2
)
)
{
var
ww
=
Cc
[
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
]
.
getService
(
Ci
.
nsIPromptFactory
)
;
return
ww
.
getPrompt
(
this
.
window
aIID
)
;
}
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
}
;
const
kSaveAsType_Complete
=
0
;
XPCOMUtils
.
defineConstant
(
this
"
kSaveAsType_Complete
"
0
)
;
const
kSaveAsType_Text
=
2
;
XPCOMUtils
.
defineConstant
(
this
"
kSaveAsType_Text
"
kSaveAsType_Text
)
;
function
internalSave
(
aURL
aDocument
aDefaultFileName
aContentDisposition
aContentType
aShouldBypassCache
aFilePickerTitleKey
aChosenData
aReferrerInfo
aInitiatingDocument
aSkipPrompt
aCacheKey
aIsContentWindowPrivate
aPrincipal
)
{
forbidCPOW
(
aURL
"
internalSave
"
"
aURL
"
)
;
forbidCPOW
(
aReferrerInfo
"
internalSave
"
"
aReferrerInfo
"
)
;
forbidCPOW
(
aCacheKey
"
internalSave
"
"
aCacheKey
"
)
;
if
(
aSkipPrompt
=
=
undefined
)
{
aSkipPrompt
=
false
;
}
if
(
aCacheKey
=
=
undefined
)
{
aCacheKey
=
0
;
}
var
saveMode
=
GetSaveModeForContentType
(
aContentType
aDocument
)
;
var
file
sourceURI
saveAsType
;
let
contentPolicyType
=
Ci
.
nsIContentPolicy
.
TYPE_SAVEAS_DOWNLOAD
;
if
(
aChosenData
)
{
file
=
aChosenData
.
file
;
sourceURI
=
aChosenData
.
uri
;
saveAsType
=
kSaveAsType_Complete
;
continueSave
(
)
;
}
else
{
var
charset
=
null
;
if
(
aDocument
)
{
charset
=
aDocument
.
characterSet
;
}
var
fileInfo
=
new
FileInfo
(
aDefaultFileName
)
;
initFileInfo
(
fileInfo
aURL
charset
aDocument
aContentType
aContentDisposition
)
;
sourceURI
=
fileInfo
.
uri
;
if
(
aContentType
&
&
aContentType
.
startsWith
(
"
image
/
"
)
)
{
contentPolicyType
=
Ci
.
nsIContentPolicy
.
TYPE_IMAGE
;
}
var
fpParams
=
{
fpTitleKey
:
aFilePickerTitleKey
fileInfo
contentType
:
aContentType
saveMode
saveAsType
:
kSaveAsType_Complete
file
}
;
let
relatedURI
=
aReferrerInfo
?
aReferrerInfo
.
originalReferrer
:
sourceURI
;
promiseTargetFile
(
fpParams
aSkipPrompt
relatedURI
)
.
then
(
aDialogAccepted
=
>
{
if
(
!
aDialogAccepted
)
{
return
;
}
saveAsType
=
fpParams
.
saveAsType
;
file
=
fpParams
.
file
;
continueSave
(
)
;
}
)
.
catch
(
Cu
.
reportError
)
;
}
function
continueSave
(
)
{
var
useSaveDocument
=
aDocument
&
&
(
(
saveMode
&
SAVEMODE_COMPLETE_DOM
&
&
saveAsType
=
=
kSaveAsType_Complete
)
|
|
(
saveMode
&
SAVEMODE_COMPLETE_TEXT
&
&
saveAsType
=
=
kSaveAsType_Text
)
)
;
let
nonCPOWDocument
=
aDocument
&
&
!
Cu
.
isCrossProcessWrapper
(
aDocument
)
;
let
isPrivate
=
aIsContentWindowPrivate
;
if
(
isPrivate
=
=
=
undefined
)
{
isPrivate
=
aInitiatingDocument
.
nodeType
=
=
9
?
PrivateBrowsingUtils
.
isContentWindowPrivate
(
aInitiatingDocument
.
defaultView
)
:
aInitiatingDocument
.
isPrivate
;
}
let
sourcePrincipal
=
aPrincipal
|
|
(
aDocument
&
&
(
aDocument
.
nodePrincipal
|
|
aDocument
.
principal
)
)
|
|
(
aInitiatingDocument
&
&
aInitiatingDocument
.
nodePrincipal
)
;
var
persistArgs
=
{
sourceURI
sourcePrincipal
sourceReferrerInfo
:
aReferrerInfo
sourceDocument
:
useSaveDocument
?
aDocument
:
null
targetContentType
:
saveAsType
=
=
kSaveAsType_Text
?
"
text
/
plain
"
:
null
targetFile
:
file
sourceCacheKey
:
aCacheKey
sourcePostData
:
nonCPOWDocument
?
getPostData
(
aDocument
)
:
null
bypassCache
:
aShouldBypassCache
contentPolicyType
isPrivate
}
;
internalPersist
(
persistArgs
)
;
}
}
function
internalPersist
(
persistArgs
)
{
var
persist
=
makeWebBrowserPersist
(
)
;
const
nsIWBP
=
Ci
.
nsIWebBrowserPersist
;
const
flags
=
nsIWBP
.
PERSIST_FLAGS_REPLACE_EXISTING_FILES
;
if
(
persistArgs
.
bypassCache
)
{
persist
.
persistFlags
=
flags
|
nsIWBP
.
PERSIST_FLAGS_BYPASS_CACHE
;
}
else
{
persist
.
persistFlags
=
flags
|
nsIWBP
.
PERSIST_FLAGS_FROM_CACHE
;
}
persist
.
persistFlags
|
=
nsIWBP
.
PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION
;
var
targetFileURL
=
makeFileURI
(
persistArgs
.
targetFile
)
;
var
tr
=
Cc
[
"
mozilla
.
org
/
transfer
;
1
"
]
.
createInstance
(
Ci
.
nsITransfer
)
;
tr
.
init
(
persistArgs
.
sourceURI
targetFileURL
"
"
null
null
null
persist
persistArgs
.
isPrivate
)
;
persist
.
progressListener
=
new
DownloadListener
(
window
tr
)
;
if
(
persistArgs
.
sourceDocument
)
{
var
filesFolder
=
null
;
if
(
persistArgs
.
targetContentType
!
=
"
text
/
plain
"
)
{
filesFolder
=
persistArgs
.
targetFile
.
clone
(
)
;
var
nameWithoutExtension
=
getFileBaseName
(
filesFolder
.
leafName
)
;
var
filesFolderLeafName
=
ContentAreaUtils
.
stringBundle
.
formatStringFromName
(
"
filesFolder
"
[
nameWithoutExtension
]
)
;
filesFolder
.
leafName
=
filesFolderLeafName
;
}
var
encodingFlags
=
0
;
if
(
persistArgs
.
targetContentType
=
=
"
text
/
plain
"
)
{
encodingFlags
|
=
nsIWBP
.
ENCODE_FLAGS_FORMATTED
;
encodingFlags
|
=
nsIWBP
.
ENCODE_FLAGS_ABSOLUTE_LINKS
;
encodingFlags
|
=
nsIWBP
.
ENCODE_FLAGS_NOFRAMES_CONTENT
;
}
else
{
encodingFlags
|
=
nsIWBP
.
ENCODE_FLAGS_ENCODE_BASIC_ENTITIES
;
}
const
kWrapColumn
=
80
;
persist
.
saveDocument
(
persistArgs
.
sourceDocument
targetFileURL
filesFolder
persistArgs
.
targetContentType
encodingFlags
kWrapColumn
)
;
}
else
{
persist
.
savePrivacyAwareURI
(
persistArgs
.
sourceURI
persistArgs
.
sourcePrincipal
persistArgs
.
sourceCacheKey
persistArgs
.
sourceReferrerInfo
persistArgs
.
sourcePostData
null
targetFileURL
persistArgs
.
contentPolicyType
|
|
Ci
.
nsIContentPolicy
.
TYPE_SAVEAS_DOWNLOAD
persistArgs
.
isPrivate
)
;
}
}
function
AutoChosen
(
aFileAutoChosen
aUriAutoChosen
)
{
this
.
file
=
aFileAutoChosen
;
this
.
uri
=
aUriAutoChosen
;
}
function
FileInfo
(
aSuggestedFileName
aFileName
aFileBaseName
aFileExt
aUri
)
{
this
.
suggestedFileName
=
aSuggestedFileName
;
this
.
fileName
=
aFileName
;
this
.
fileBaseName
=
aFileBaseName
;
this
.
fileExt
=
aFileExt
;
this
.
uri
=
aUri
;
}
function
initFileInfo
(
aFI
aURL
aURLCharset
aDocument
aContentType
aContentDisposition
)
{
try
{
try
{
aFI
.
uri
=
makeURI
(
aURL
aURLCharset
)
;
var
url
=
aFI
.
uri
.
QueryInterface
(
Ci
.
nsIURL
)
;
aFI
.
fileExt
=
url
.
fileExtension
;
}
catch
(
e
)
{
}
aFI
.
fileName
=
getDefaultFileName
(
aFI
.
suggestedFileName
|
|
aFI
.
fileName
aFI
.
uri
aDocument
aContentDisposition
)
;
if
(
!
aFI
.
fileExt
&
&
!
aDocument
&
&
!
aContentType
&
&
/
^
http
(
s
?
)
:
\
/
\
/
/
i
.
test
(
aURL
)
)
{
aFI
.
fileExt
=
"
htm
"
;
aFI
.
fileBaseName
=
aFI
.
fileName
;
}
else
{
aFI
.
fileExt
=
getDefaultExtension
(
aFI
.
fileName
aFI
.
uri
aContentType
)
;
aFI
.
fileBaseName
=
getFileBaseName
(
aFI
.
fileName
)
;
}
}
catch
(
e
)
{
}
}
function
promiseTargetFile
(
aFpP
aSkipPrompt
aRelatedURI
)
{
return
(
async
function
(
)
{
let
downloadLastDir
=
new
DownloadLastDir
(
window
)
;
let
prefBranch
=
Services
.
prefs
.
getBranch
(
"
browser
.
download
.
"
)
;
let
useDownloadDir
=
prefBranch
.
getBoolPref
(
"
useDownloadDir
"
)
;
if
(
!
aSkipPrompt
)
{
useDownloadDir
=
false
;
}
let
dirPath
=
await
Downloads
.
getPreferredDownloadsDirectory
(
)
;
let
dirExists
=
await
OS
.
File
.
exists
(
dirPath
)
;
let
dir
=
new
FileUtils
.
File
(
dirPath
)
;
if
(
useDownloadDir
&
&
dirExists
)
{
dir
.
append
(
getNormalizedLeafName
(
aFpP
.
fileInfo
.
fileName
aFpP
.
fileInfo
.
fileExt
)
)
;
aFpP
.
file
=
uniqueFile
(
dir
)
;
return
true
;
}
let
file
=
await
new
Promise
(
resolve
=
>
{
if
(
useDownloadDir
)
{
Services
.
tm
.
dispatchToMainThread
(
function
(
)
{
resolve
(
null
)
;
}
)
;
}
else
{
downloadLastDir
.
getFileAsync
(
aRelatedURI
function
getFileAsyncCB
(
aFile
)
{
resolve
(
aFile
)
;
}
)
;
}
}
)
;
if
(
file
&
&
(
await
OS
.
File
.
exists
(
file
.
path
)
)
)
{
dir
=
file
;
dirExists
=
true
;
}
if
(
!
dirExists
)
{
dir
=
Services
.
dirsvc
.
get
(
"
Desk
"
Ci
.
nsIFile
)
;
}
let
fp
=
makeFilePicker
(
)
;
let
titleKey
=
aFpP
.
fpTitleKey
|
|
"
SaveLinkTitle
"
;
fp
.
init
(
window
ContentAreaUtils
.
stringBundle
.
GetStringFromName
(
titleKey
)
Ci
.
nsIFilePicker
.
modeSave
)
;
fp
.
displayDirectory
=
dir
;
fp
.
defaultExtension
=
aFpP
.
fileInfo
.
fileExt
;
fp
.
defaultString
=
getNormalizedLeafName
(
aFpP
.
fileInfo
.
fileName
aFpP
.
fileInfo
.
fileExt
)
;
appendFiltersForContentType
(
fp
aFpP
.
contentType
aFpP
.
fileInfo
.
fileExt
aFpP
.
saveMode
)
;
if
(
aFpP
.
saveMode
!
=
SAVEMODE_FILEONLY
)
{
try
{
fp
.
filterIndex
=
prefBranch
.
getIntPref
(
"
save_converter_index
"
)
;
}
catch
(
e
)
{
}
}
let
result
=
await
new
Promise
(
resolve
=
>
{
fp
.
open
(
function
(
aResult
)
{
resolve
(
aResult
)
;
}
)
;
}
)
;
if
(
result
=
=
Ci
.
nsIFilePicker
.
returnCancel
|
|
!
fp
.
file
)
{
return
false
;
}
if
(
aFpP
.
saveMode
!
=
SAVEMODE_FILEONLY
)
{
prefBranch
.
setIntPref
(
"
save_converter_index
"
fp
.
filterIndex
)
;
}
downloadLastDir
.
setFile
(
aRelatedURI
fp
.
file
.
parent
)
;
fp
.
file
.
leafName
=
validateFileName
(
fp
.
file
.
leafName
)
;
aFpP
.
saveAsType
=
fp
.
filterIndex
;
aFpP
.
file
=
fp
.
file
;
aFpP
.
fileURL
=
fp
.
fileURL
;
return
true
;
}
)
(
)
;
}
function
uniqueFile
(
aLocalFile
)
{
var
collisionCount
=
0
;
while
(
aLocalFile
.
exists
(
)
)
{
collisionCount
+
+
;
if
(
collisionCount
=
=
1
)
{
if
(
aLocalFile
.
leafName
.
match
(
/
\
.
[
^
\
.
]
{
1
3
}
\
.
(
gz
|
bz2
|
Z
)
/
i
)
)
{
aLocalFile
.
leafName
=
aLocalFile
.
leafName
.
replace
(
/
\
.
[
^
\
.
]
{
1
3
}
\
.
(
gz
|
bz2
|
Z
)
/
i
"
(
2
)
&
"
)
;
}
else
{
aLocalFile
.
leafName
=
aLocalFile
.
leafName
.
replace
(
/
(
\
.
[
^
\
.
]
*
)
?
/
"
(
2
)
&
"
)
;
}
}
else
{
aLocalFile
.
leafName
=
aLocalFile
.
leafName
.
replace
(
/
^
(
.
*
\
(
)
\
d
+
\
)
/
"
1
"
+
(
collisionCount
+
1
)
+
"
)
"
)
;
}
}
return
aLocalFile
;
}
function
DownloadURL
(
aURL
aFileName
aInitiatingDocument
)
{
let
isPrivate
=
aInitiatingDocument
.
defaultView
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
usePrivateBrowsing
;
let
fileInfo
=
new
FileInfo
(
aFileName
)
;
initFileInfo
(
fileInfo
aURL
null
null
null
null
)
;
let
filepickerParams
=
{
fileInfo
saveMode
:
SAVEMODE_FILEONLY
}
;
(
async
function
(
)
{
let
accepted
=
await
promiseTargetFile
(
filepickerParams
true
fileInfo
.
uri
)
;
if
(
!
accepted
)
{
return
;
}
let
file
=
filepickerParams
.
file
;
let
download
=
await
Downloads
.
createDownload
(
{
source
:
{
url
:
aURL
isPrivate
}
target
:
{
path
:
file
.
path
partFilePath
:
file
.
path
+
"
.
part
"
}
}
)
;
download
.
tryToKeepPartialData
=
true
;
download
.
start
(
)
.
catch
(
(
)
=
>
{
}
)
;
let
list
=
await
Downloads
.
getList
(
Downloads
.
ALL
)
;
list
.
add
(
download
)
;
}
)
(
)
.
catch
(
Cu
.
reportError
)
;
}
const
SAVEMODE_FILEONLY
=
0x00
;
XPCOMUtils
.
defineConstant
(
this
"
SAVEMODE_FILEONLY
"
SAVEMODE_FILEONLY
)
;
const
SAVEMODE_COMPLETE_DOM
=
0x01
;
XPCOMUtils
.
defineConstant
(
this
"
SAVEMODE_COMPLETE_DOM
"
SAVEMODE_COMPLETE_DOM
)
;
const
SAVEMODE_COMPLETE_TEXT
=
0x02
;
XPCOMUtils
.
defineConstant
(
this
"
SAVEMODE_COMPLETE_TEXT
"
SAVEMODE_COMPLETE_TEXT
)
;
function
appendFiltersForContentType
(
aFilePicker
aContentType
aFileExtension
aSaveMode
)
{
var
bundleName
;
var
filterString
;
if
(
aSaveMode
!
=
SAVEMODE_FILEONLY
)
{
switch
(
aContentType
)
{
case
"
text
/
html
"
:
bundleName
=
"
WebPageHTMLOnlyFilter
"
;
filterString
=
"
*
.
htm
;
*
.
html
"
;
break
;
case
"
application
/
xhtml
+
xml
"
:
bundleName
=
"
WebPageXHTMLOnlyFilter
"
;
filterString
=
"
*
.
xht
;
*
.
xhtml
"
;
break
;
case
"
image
/
svg
+
xml
"
:
bundleName
=
"
WebPageSVGOnlyFilter
"
;
filterString
=
"
*
.
svg
;
*
.
svgz
"
;
break
;
case
"
text
/
xml
"
:
case
"
application
/
xml
"
:
bundleName
=
"
WebPageXMLOnlyFilter
"
;
filterString
=
"
*
.
xml
"
;
break
;
}
}
if
(
!
bundleName
)
{
if
(
aSaveMode
!
=
SAVEMODE_FILEONLY
)
{
throw
new
Error
(
Invalid
save
mode
for
type
'
{
aContentType
}
'
)
;
}
var
mimeInfo
=
getMIMEInfoForType
(
aContentType
aFileExtension
)
;
if
(
mimeInfo
)
{
var
extString
=
"
"
;
for
(
var
extension
of
mimeInfo
.
getFileExtensions
(
)
)
{
if
(
extString
)
{
extString
+
=
"
;
"
;
}
extString
+
=
"
*
.
"
+
extension
;
}
if
(
extString
)
{
aFilePicker
.
appendFilter
(
mimeInfo
.
description
extString
)
;
}
}
}
if
(
aSaveMode
&
SAVEMODE_COMPLETE_DOM
)
{
aFilePicker
.
appendFilter
(
ContentAreaUtils
.
stringBundle
.
GetStringFromName
(
"
WebPageCompleteFilter
"
)
filterString
)
;
aFilePicker
.
appendFilter
(
ContentAreaUtils
.
stringBundle
.
GetStringFromName
(
bundleName
)
filterString
)
;
}
if
(
aSaveMode
&
SAVEMODE_COMPLETE_TEXT
)
{
aFilePicker
.
appendFilters
(
Ci
.
nsIFilePicker
.
filterText
)
;
}
aFilePicker
.
appendFilters
(
Ci
.
nsIFilePicker
.
filterAll
)
;
}
function
getPostData
(
aDocument
)
{
if
(
aDocument
instanceof
Ci
.
nsIWebBrowserPersistDocument
)
{
return
aDocument
.
postData
;
}
try
{
let
sessionHistoryEntry
=
aDocument
.
defaultView
.
docShell
.
QueryInterface
(
Ci
.
nsIWebPageDescriptor
)
.
currentDescriptor
.
QueryInterface
(
Ci
.
nsISHEntry
)
;
return
sessionHistoryEntry
.
postData
;
}
catch
(
e
)
{
}
return
null
;
}
function
makeWebBrowserPersist
(
)
{
const
persistContractID
=
"
mozilla
.
org
/
embedding
/
browser
/
nsWebBrowserPersist
;
1
"
;
const
persistIID
=
Ci
.
nsIWebBrowserPersist
;
return
Cc
[
persistContractID
]
.
createInstance
(
persistIID
)
;
}
function
makeURI
(
aURL
aOriginCharset
aBaseURI
)
{
return
Services
.
io
.
newURI
(
aURL
aOriginCharset
aBaseURI
)
;
}
function
makeFileURI
(
aFile
)
{
return
Services
.
io
.
newFileURI
(
aFile
)
;
}
function
makeFilePicker
(
)
{
const
fpContractID
=
"
mozilla
.
org
/
filepicker
;
1
"
;
const
fpIID
=
Ci
.
nsIFilePicker
;
return
Cc
[
fpContractID
]
.
createInstance
(
fpIID
)
;
}
function
getMIMEService
(
)
{
const
mimeSvcContractID
=
"
mozilla
.
org
/
mime
;
1
"
;
const
mimeSvcIID
=
Ci
.
nsIMIMEService
;
const
mimeSvc
=
Cc
[
mimeSvcContractID
]
.
getService
(
mimeSvcIID
)
;
return
mimeSvc
;
}
function
getFileBaseName
(
aFileName
)
{
return
aFileName
.
replace
(
/
\
.
[
^
.
]
*
/
"
"
)
;
}
function
getMIMETypeForURI
(
aURI
)
{
try
{
return
getMIMEService
(
)
.
getTypeFromURI
(
aURI
)
;
}
catch
(
e
)
{
}
return
null
;
}
function
getMIMEInfoForType
(
aMIMEType
aExtension
)
{
if
(
aMIMEType
|
|
aExtension
)
{
try
{
return
getMIMEService
(
)
.
getFromTypeAndExtension
(
aMIMEType
aExtension
)
;
}
catch
(
e
)
{
}
}
return
null
;
}
function
getDefaultFileName
(
aDefaultFileName
aURI
aDocument
aContentDisposition
)
{
if
(
aContentDisposition
)
{
const
mhpContractID
=
"
mozilla
.
org
/
network
/
mime
-
hdrparam
;
1
"
;
const
mhpIID
=
Ci
.
nsIMIMEHeaderParam
;
const
mhp
=
Cc
[
mhpContractID
]
.
getService
(
mhpIID
)
;
var
dummy
=
{
value
:
null
}
;
var
charset
=
getCharsetforSave
(
aDocument
)
;
var
fileName
=
null
;
try
{
fileName
=
mhp
.
getParameter
(
aContentDisposition
"
filename
"
charset
true
dummy
)
;
}
catch
(
e
)
{
try
{
fileName
=
mhp
.
getParameter
(
aContentDisposition
"
name
"
charset
true
dummy
)
;
}
catch
(
e
)
{
}
}
if
(
fileName
)
{
return
validateFileName
(
Services
.
textToSubURI
.
unEscapeURIForUI
(
fileName
)
)
;
}
}
let
docTitle
;
if
(
aDocument
&
&
aDocument
.
title
&
&
aDocument
.
title
.
trim
(
)
)
{
docTitle
=
validateFileName
(
aDocument
.
title
)
;
let
contentType
=
aDocument
.
contentType
;
if
(
contentType
=
=
"
application
/
xhtml
+
xml
"
|
|
contentType
=
=
"
application
/
xml
"
|
|
contentType
=
=
"
image
/
svg
+
xml
"
|
|
contentType
=
=
"
text
/
html
"
|
|
contentType
=
=
"
text
/
xml
"
)
{
return
docTitle
;
}
}
try
{
var
url
=
aURI
.
QueryInterface
(
Ci
.
nsIURL
)
;
if
(
url
.
fileName
!
=
"
"
)
{
return
validateFileName
(
Services
.
textToSubURI
.
unEscapeURIForUI
(
url
.
fileName
)
)
;
}
}
catch
(
e
)
{
}
if
(
docTitle
)
{
return
docTitle
;
}
if
(
aDefaultFileName
)
{
return
validateFileName
(
aDefaultFileName
)
;
}
var
path
=
aURI
.
pathQueryRef
.
match
(
/
\
/
(
[
^
\
/
]
+
)
\
/
/
)
;
if
(
path
&
&
path
.
length
>
1
)
{
return
validateFileName
(
path
[
1
]
)
;
}
try
{
if
(
aURI
.
host
)
{
return
validateFileName
(
aURI
.
host
)
;
}
}
catch
(
e
)
{
}
try
{
return
ContentAreaUtils
.
stringBundle
.
GetStringFromName
(
"
DefaultSaveFileName
"
)
;
}
catch
(
e
)
{
}
return
"
index
"
;
}
function
validateFileName
(
aFileName
)
{
let
processed
=
DownloadPaths
.
sanitize
(
aFileName
)
|
|
"
_
"
;
if
(
AppConstants
.
platform
=
=
"
android
"
)
{
if
(
processed
.
replace
(
/
_
/
g
"
"
)
.
length
<
=
processed
.
length
/
2
)
{
var
original
=
processed
;
processed
=
"
download
"
;
if
(
original
.
includes
(
"
.
"
)
)
{
var
suffix
=
original
.
split
(
"
.
"
)
.
slice
(
-
1
)
[
0
]
;
if
(
suffix
&
&
!
suffix
.
includes
(
"
_
"
)
)
{
processed
+
=
"
.
"
+
suffix
;
}
}
}
}
return
processed
;
}
function
getNormalizedLeafName
(
aFile
aDefaultExtension
)
{
if
(
!
aDefaultExtension
)
{
return
aFile
;
}
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
aFile
=
aFile
.
replace
(
/
[
\
s
.
]
+
/
"
"
)
;
}
aFile
=
aFile
.
replace
(
/
^
\
.
+
/
"
"
)
;
var
i
=
aFile
.
lastIndexOf
(
"
.
"
)
;
if
(
aFile
.
substr
(
i
+
1
)
!
=
aDefaultExtension
)
{
return
aFile
+
"
.
"
+
aDefaultExtension
;
}
return
aFile
;
}
function
getDefaultExtension
(
aFilename
aURI
aContentType
)
{
if
(
aContentType
=
=
"
text
/
plain
"
|
|
aContentType
=
=
"
application
/
octet
-
stream
"
|
|
aURI
.
scheme
=
=
"
ftp
"
)
{
return
"
"
;
}
var
url
=
Cc
[
"
mozilla
.
org
/
network
/
standard
-
url
-
mutator
;
1
"
]
.
createInstance
(
Ci
.
nsIURIMutator
)
.
setSpec
(
"
http
:
/
/
example
.
com
"
)
.
setFilePath
(
aFilename
)
.
finalize
(
)
.
QueryInterface
(
Ci
.
nsIURL
)
;
var
ext
=
url
.
fileExtension
;
var
mimeInfo
=
getMIMEInfoForType
(
aContentType
ext
)
;
if
(
ext
&
&
mimeInfo
&
&
mimeInfo
.
extensionExists
(
ext
)
)
{
return
ext
;
}
var
urlext
;
try
{
url
=
aURI
.
QueryInterface
(
Ci
.
nsIURL
)
;
urlext
=
url
.
fileExtension
;
}
catch
(
e
)
{
}
if
(
urlext
&
&
mimeInfo
&
&
mimeInfo
.
extensionExists
(
urlext
)
)
{
return
urlext
;
}
try
{
if
(
mimeInfo
)
{
return
mimeInfo
.
primaryExtension
;
}
}
catch
(
e
)
{
}
return
ext
|
|
urlext
;
}
function
GetSaveModeForContentType
(
aContentType
aDocument
)
{
if
(
!
aDocument
|
|
Cu
.
isCrossProcessWrapper
(
aDocument
)
)
{
return
SAVEMODE_FILEONLY
;
}
var
saveMode
=
SAVEMODE_FILEONLY
;
switch
(
aContentType
)
{
case
"
text
/
html
"
:
case
"
application
/
xhtml
+
xml
"
:
case
"
image
/
svg
+
xml
"
:
saveMode
|
=
SAVEMODE_COMPLETE_TEXT
;
case
"
text
/
xml
"
:
case
"
application
/
xml
"
:
saveMode
|
=
SAVEMODE_COMPLETE_DOM
;
break
;
}
return
saveMode
;
}
function
getCharsetforSave
(
aDocument
)
{
if
(
aDocument
)
{
return
aDocument
.
characterSet
;
}
if
(
document
.
commandDispatcher
.
focusedWindow
)
{
return
document
.
commandDispatcher
.
focusedWindow
.
document
.
characterSet
;
}
return
window
.
content
.
document
.
characterSet
;
}
function
openURL
(
aURL
)
{
var
uri
=
aURL
instanceof
Ci
.
nsIURI
?
aURL
:
makeURI
(
aURL
)
;
var
protocolSvc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
;
if
(
!
protocolSvc
.
isExposedProtocol
(
uri
.
scheme
)
)
{
protocolSvc
.
loadURI
(
uri
)
;
}
else
{
var
recentWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
recentWindow
)
{
recentWindow
.
openWebLinkIn
(
uri
.
spec
"
tab
"
{
triggeringPrincipal
:
recentWindow
.
document
.
contentPrincipal
}
)
;
return
;
}
var
loadgroup
=
Cc
[
"
mozilla
.
org
/
network
/
load
-
group
;
1
"
]
.
createInstance
(
Ci
.
nsILoadGroup
)
;
var
appstartup
=
Services
.
startup
;
var
loadListener
=
{
onStartRequest
:
function
ll_start
(
aRequest
)
{
appstartup
.
enterLastWindowClosingSurvivalArea
(
)
;
}
onStopRequest
:
function
ll_stop
(
aRequest
aStatusCode
)
{
appstartup
.
exitLastWindowClosingSurvivalArea
(
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIRequestObserver
"
"
nsISupportsWeakReference
"
]
)
}
;
loadgroup
.
groupObserver
=
loadListener
;
var
uriListener
=
{
onStartURIOpen
(
uri
)
{
return
false
;
}
doContent
(
ctype
preferred
request
handler
)
{
return
false
;
}
isPreferred
(
ctype
desired
)
{
return
false
;
}
canHandleContent
(
ctype
preferred
desired
)
{
return
false
;
}
loadCookie
:
null
parentContentListener
:
null
getInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsIURIContentListener
)
)
{
return
this
;
}
if
(
iid
.
equals
(
Ci
.
nsILoadGroup
)
)
{
return
loadgroup
;
}
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
}
;
var
channel
=
NetUtil
.
newChannel
(
{
uri
loadUsingSystemPrincipal
:
true
}
)
;
if
(
channel
)
{
channel
.
channelIsForDownload
=
true
;
}
var
uriLoader
=
Cc
[
"
mozilla
.
org
/
uriloader
;
1
"
]
.
getService
(
Ci
.
nsIURILoader
)
;
uriLoader
.
openURI
(
channel
Ci
.
nsIURILoader
.
IS_CONTENT_PREFERRED
uriListener
)
;
}
}
