"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
gDashboard
=
Cc
[
"
mozilla
.
org
/
network
/
dashboard
;
1
"
]
.
getService
(
Ci
.
nsIDashboard
)
;
const
gDirServ
=
Cc
[
"
mozilla
.
org
/
file
/
directory_service
;
1
"
]
.
getService
(
Ci
.
nsIDirectoryServiceProvider
)
;
const
{
ProfilerMenuButton
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
menu
-
button
.
jsm
.
js
"
)
;
const
{
CustomizableUI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
ProfilerPopupBackground
"
function
(
)
{
return
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
client
/
performance
-
new
/
popup
/
background
.
jsm
.
js
"
)
;
}
)
;
const
=
document
.
querySelector
.
bind
(
document
)
;
const
=
document
.
querySelectorAll
.
bind
(
document
)
;
const
gLoggingPresets
=
{
networking
:
{
modules
:
"
timestamp
sync
nsHttp
:
5
cache2
:
5
nsSocketTransport
:
5
nsHostResolver
:
5
"
l10nIds
:
{
label
:
"
about
-
logging
-
preset
-
networking
-
label
"
description
:
"
about
-
logging
-
preset
-
networking
-
description
"
}
profilerPreset
:
"
networking
"
}
"
media
-
playback
"
:
{
modules
:
"
cubeb
:
5
PlatformDecoderModule
:
5
AudioSink
:
5
AudioSinkWrapper
:
5
MediaDecoderStateMachine
:
4
MediaDecoder
:
4
"
l10nIds
:
{
label
:
"
about
-
logging
-
preset
-
media
-
playback
-
label
"
description
:
"
about
-
logging
-
preset
-
media
-
playback
-
description
"
}
profilerPreset
:
"
media
"
}
custom
:
{
modules
:
"
"
l10nIds
:
{
label
:
"
about
-
logging
-
preset
-
custom
-
label
"
description
:
"
about
-
logging
-
preset
-
custom
-
description
"
}
}
}
;
const
gLoggingSettings
=
{
loggingOutputType
:
"
profiler
"
running
:
false
loggingPreset
:
"
"
}
;
function
populatePresets
(
)
{
let
dropdown
=
(
"
#
logging
-
preset
-
dropdown
"
)
;
for
(
let
presetName
in
gLoggingPresets
)
{
let
preset
=
gLoggingPresets
[
presetName
]
;
let
option
=
document
.
createElement
(
"
option
"
)
;
document
.
l10n
.
setAttributes
(
option
preset
.
l10nIds
.
label
)
;
option
.
value
=
presetName
;
dropdown
.
appendChild
(
option
)
;
if
(
option
.
value
=
=
=
gLoggingSettings
.
loggingPreset
)
{
option
.
setAttribute
(
"
selected
"
true
)
;
}
}
function
setPresetAndDescription
(
preset
)
{
document
.
l10n
.
setAttributes
(
(
"
#
logging
-
preset
-
description
"
)
gLoggingPresets
[
preset
]
.
l10nIds
.
description
)
;
gLoggingSettings
.
loggingPreset
=
preset
;
}
dropdown
.
onchange
=
function
(
)
{
if
(
dropdown
.
value
!
=
"
custom
"
)
{
(
"
#
log
-
modules
"
)
.
value
=
gLoggingPresets
[
dropdown
.
value
]
.
modules
;
}
setPresetAndDescription
(
dropdown
.
value
)
;
setLogModules
(
)
;
Services
.
prefs
.
setCharPref
(
"
logging
.
config
.
preset
"
dropdown
.
value
)
;
}
;
(
"
#
log
-
modules
"
)
.
value
=
gLoggingPresets
[
dropdown
.
value
]
.
modules
;
setPresetAndDescription
(
dropdown
.
value
)
;
(
"
#
log
-
modules
"
)
.
oninput
=
e
=
>
{
dropdown
.
value
=
"
custom
"
;
}
;
}
function
updateLoggingOutputType
(
profilerOutputType
)
{
gLoggingSettings
.
loggingOutputType
=
profilerOutputType
;
if
(
gLoggingSettings
.
loggingOutputType
=
=
=
"
profiler
"
)
{
(
"
#
log
-
file
-
configuration
"
)
.
hidden
=
true
;
}
else
if
(
gLoggingSettings
.
loggingOutputType
=
=
=
"
file
"
)
{
(
"
#
log
-
file
-
configuration
"
)
.
hidden
=
false
;
}
Services
.
prefs
.
setCharPref
(
"
logging
.
config
.
output_type
"
gLoggingSettings
.
loggingOutputType
)
;
}
let
gInited
=
false
;
function
init
(
)
{
if
(
gInited
)
{
return
;
}
gInited
=
true
;
gDashboard
.
enableLogging
=
true
;
populatePresets
(
)
;
let
setLogButton
=
(
"
#
set
-
log
-
file
-
button
"
)
;
setLogButton
.
addEventListener
(
"
click
"
setLogFile
)
;
let
setModulesButton
=
(
"
#
set
-
log
-
modules
-
button
"
)
;
setModulesButton
.
addEventListener
(
"
click
"
setLogModules
)
;
let
toggleLoggingButton
=
(
"
#
toggle
-
logging
-
button
"
)
;
toggleLoggingButton
.
addEventListener
(
"
click
"
startStopLogging
)
;
(
"
input
[
type
=
radio
]
"
)
.
forEach
(
radio
=
>
{
radio
.
onchange
=
e
=
>
{
updateLoggingOutputType
(
e
.
target
.
value
)
;
}
;
}
)
;
try
{
let
loggingOutputType
=
Services
.
prefs
.
getCharPref
(
"
logging
.
config
.
output_type
"
)
;
if
(
loggingOutputType
.
length
)
{
updateLoggingOutputType
(
loggingOutputType
)
;
}
}
catch
{
updateLoggingOutputType
(
"
profiler
"
)
;
}
try
{
let
loggingPreset
=
Services
.
prefs
.
getCharPref
(
"
logging
.
config
.
preset
"
)
;
gLoggingSettings
.
loggingPreset
=
loggingPreset
;
}
catch
{
}
try
{
let
running
=
Services
.
prefs
.
getBoolPref
(
"
logging
.
config
.
running
"
)
;
gLoggingSettings
.
running
=
running
;
(
"
#
toggle
-
logging
-
button
"
)
.
setAttribute
(
"
data
-
l10n
-
id
"
about
-
logging
-
{
gLoggingSettings
.
running
?
"
stop
"
:
"
start
"
}
-
logging
)
;
}
catch
{
}
try
{
let
file
=
gDirServ
.
getFile
(
"
TmpD
"
{
}
)
;
file
.
append
(
"
log
.
txt
"
)
;
(
"
#
log
-
file
"
)
.
value
=
file
.
path
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
updateLogFile
(
)
;
updateLogModules
(
)
;
if
(
setLogButton
.
disabled
|
|
setModulesButton
.
disabled
)
{
(
"
#
buttons
-
disabled
"
)
.
hidden
=
false
;
toggleLoggingButton
.
disabled
=
true
;
}
}
function
updateLogFile
(
)
{
let
logPath
=
"
"
;
logPath
=
Services
.
env
.
get
(
"
MOZ_LOG_FILE
"
)
|
|
Services
.
env
.
get
(
"
NSPR_LOG_FILE
"
)
;
let
currentLogFile
=
(
"
#
current
-
log
-
file
"
)
;
let
setLogFileButton
=
(
"
#
set
-
log
-
file
-
button
"
)
;
if
(
logPath
.
length
)
{
currentLogFile
.
innerText
=
logPath
;
setLogFileButton
.
disabled
=
true
;
}
else
if
(
gDashboard
.
getLogPath
(
)
!
=
"
.
moz_log
"
)
{
currentLogFile
.
innerText
=
gDashboard
.
getLogPath
(
)
;
}
else
{
try
{
let
file
=
gDirServ
.
getFile
(
"
TmpD
"
{
}
)
;
file
.
append
(
"
log
.
txt
"
)
;
(
"
#
log
-
file
"
)
.
value
=
file
.
path
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
currentLogFile
.
innerText
=
(
"
#
log
-
file
"
)
.
value
;
}
let
openLogFileButton
=
(
"
#
open
-
log
-
file
-
button
"
)
;
openLogFileButton
.
disabled
=
true
;
if
(
currentLogFile
.
innerText
.
length
)
{
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
currentLogFile
.
innerText
)
;
if
(
file
.
exists
(
)
)
{
openLogFileButton
.
disabled
=
false
;
openLogFileButton
.
onclick
=
function
(
e
)
{
file
.
reveal
(
)
;
}
;
}
}
}
function
updateLogModules
(
)
{
let
logModules
=
Services
.
env
.
get
(
"
MOZ_LOG
"
)
|
|
Services
.
env
.
get
(
"
MOZ_LOG_MODULES
"
)
|
|
Services
.
env
.
get
(
"
NSPR_LOG_MODULES
"
)
;
let
currentLogModules
=
(
"
#
current
-
log
-
modules
"
)
;
let
setLogModulesButton
=
(
"
#
set
-
log
-
modules
-
button
"
)
;
if
(
logModules
.
length
)
{
currentLogModules
.
innerText
=
logModules
;
setLogModulesButton
.
disabled
=
true
;
}
else
{
let
activeLogModules
=
[
]
;
try
{
if
(
Services
.
prefs
.
getBoolPref
(
"
logging
.
config
.
add_timestamp
"
)
)
{
activeLogModules
.
push
(
"
timestamp
"
)
;
}
}
catch
(
e
)
{
}
try
{
if
(
Services
.
prefs
.
getBoolPref
(
"
logging
.
config
.
sync
"
)
)
{
activeLogModules
.
push
(
"
sync
"
)
;
}
}
catch
(
e
)
{
}
try
{
if
(
Services
.
prefs
.
getBoolPref
(
"
logging
.
config
.
profilerstacks
"
)
)
{
activeLogModules
.
push
(
"
profilerstacks
"
)
;
}
}
catch
(
e
)
{
}
let
children
=
Services
.
prefs
.
getBranch
(
"
logging
.
"
)
.
getChildList
(
"
"
)
;
for
(
let
pref
of
children
)
{
if
(
pref
.
startsWith
(
"
config
.
"
)
)
{
continue
;
}
try
{
let
value
=
Services
.
prefs
.
getIntPref
(
logging
.
{
pref
}
)
;
activeLogModules
.
push
(
{
pref
}
:
{
value
}
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
if
(
activeLogModules
.
length
!
=
=
0
)
{
currentLogModules
.
innerText
=
activeLogModules
.
join
(
"
"
)
;
currentLogModules
.
hidden
=
false
;
(
"
#
no
-
log
-
modules
"
)
.
hidden
=
true
;
}
else
{
currentLogModules
.
innerText
=
"
"
;
currentLogModules
.
hidden
=
true
;
(
"
#
no
-
log
-
modules
"
)
.
hidden
=
false
;
}
}
}
function
setLogFile
(
)
{
let
setLogButton
=
(
"
#
set
-
log
-
file
-
button
"
)
;
if
(
setLogButton
.
disabled
)
{
return
;
}
let
logFile
=
(
"
#
log
-
file
"
)
.
value
.
trim
(
)
;
Services
.
prefs
.
setCharPref
(
"
logging
.
config
.
LOG_FILE
"
logFile
)
;
updateLogFile
(
)
;
}
function
clearLogModules
(
)
{
let
children
=
Services
.
prefs
.
getBranch
(
"
logging
.
"
)
.
getChildList
(
"
"
)
;
for
(
let
pref
of
children
)
{
if
(
!
pref
.
startsWith
(
"
config
.
"
)
)
{
Services
.
prefs
.
clearUserPref
(
logging
.
{
pref
}
)
;
}
}
Services
.
prefs
.
clearUserPref
(
"
logging
.
config
.
add_timestamp
"
)
;
Services
.
prefs
.
clearUserPref
(
"
logging
.
config
.
sync
"
)
;
updateLogModules
(
)
;
}
function
setLogModules
(
)
{
let
setLogModulesButton
=
(
"
#
set
-
log
-
modules
-
button
"
)
;
if
(
setLogModulesButton
.
disabled
)
{
return
;
}
let
modules
=
(
"
#
log
-
modules
"
)
.
value
.
trim
(
)
;
clearLogModules
(
)
;
if
(
modules
.
length
!
=
=
0
)
{
let
logModules
=
modules
.
split
(
"
"
)
;
for
(
let
module
of
logModules
)
{
if
(
module
=
=
"
timestamp
"
)
{
Services
.
prefs
.
setBoolPref
(
"
logging
.
config
.
add_timestamp
"
true
)
;
}
else
if
(
module
=
=
"
rotate
"
)
{
}
else
if
(
module
=
=
"
append
"
)
{
}
else
if
(
module
=
=
"
sync
"
)
{
Services
.
prefs
.
setBoolPref
(
"
logging
.
config
.
sync
"
true
)
;
}
else
if
(
module
=
=
"
profilerstacks
"
)
{
Services
.
prefs
.
setBoolPref
(
"
logging
.
config
.
profilerstacks
"
true
)
;
}
else
{
let
lastColon
=
module
.
lastIndexOf
(
"
:
"
)
;
let
key
=
module
.
slice
(
0
lastColon
)
;
let
value
=
parseInt
(
module
.
slice
(
lastColon
+
1
)
10
)
;
Services
.
prefs
.
setIntPref
(
logging
.
{
key
}
value
)
;
}
}
}
updateLogModules
(
)
;
}
function
isLogging
(
)
{
try
{
return
Services
.
prefs
.
getBoolPref
(
"
logging
.
config
.
running
"
)
;
}
catch
{
return
false
;
}
}
function
startStopLogging
(
)
{
if
(
isLogging
(
)
)
{
document
.
l10n
.
setAttributes
(
(
"
#
toggle
-
logging
-
button
"
)
"
about
-
logging
-
start
-
logging
"
)
;
stopLogging
(
)
;
}
else
{
document
.
l10n
.
setAttributes
(
(
"
#
toggle
-
logging
-
button
"
)
"
about
-
logging
-
stop
-
logging
"
)
;
startLogging
(
)
;
}
}
function
startLogging
(
)
{
setLogModules
(
)
;
if
(
gLoggingSettings
.
loggingOutputType
=
=
=
"
profiler
"
)
{
if
(
gLoggingSettings
.
loggingPreset
!
=
"
custom
"
)
{
const
profilerPreset
=
gLoggingPresets
[
gLoggingSettings
.
loggingPreset
]
.
profilerPreset
;
const
supportedFeatures
=
Services
.
profiler
.
GetFeatures
(
)
;
ProfilerPopupBackground
.
changePreset
(
"
aboutlogging
"
profilerPreset
supportedFeatures
)
;
}
if
(
!
ProfilerMenuButton
.
isInNavbar
(
)
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
performance
.
popup
.
feature
-
flag
"
true
)
;
ProfilerMenuButton
.
addToNavbar
(
)
;
CustomizableUI
.
dispatchToolboxEvent
(
"
customizationchange
"
)
;
}
ProfilerPopupBackground
.
startProfiler
(
"
aboutlogging
"
)
;
}
else
{
setLogFile
(
)
;
}
Services
.
prefs
.
setBoolPref
(
"
logging
.
config
.
running
"
true
)
;
}
async
function
stopLogging
(
)
{
if
(
gLoggingSettings
.
loggingOutputType
=
=
=
"
profiler
"
)
{
await
ProfilerPopupBackground
.
captureProfile
(
"
aboutlogging
"
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
"
logging
.
config
.
LOG_FILE
"
)
;
updateLogFile
(
)
;
}
Services
.
prefs
.
setBoolPref
(
"
logging
.
config
.
running
"
false
)
;
clearLogModules
(
)
;
}
window
.
addEventListener
(
"
pageshow
"
function
(
)
{
init
(
)
;
}
)
;
