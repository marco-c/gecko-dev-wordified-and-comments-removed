ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
try
{
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIBrowserChild
)
.
beginSendingWebProgressEventsToParent
(
)
;
}
catch
(
e
)
{
}
sendAsyncMessage
(
"
Content
:
BrowserChildReady
"
{
time
:
Services
.
telemetry
.
msSystemNow
(
)
}
)
;
addEventListener
(
"
DOMTitleChanged
"
function
(
aEvent
)
{
if
(
!
aEvent
.
isTrusted
|
|
content
.
closed
)
{
return
;
}
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
if
(
docShell
.
document
!
=
aEvent
.
target
)
{
return
;
}
sendAsyncMessage
(
"
DOMTitleChanged
"
{
title
:
content
.
document
.
title
}
)
;
}
false
)
;
addEventListener
(
"
ImageContentLoaded
"
function
(
aEvent
)
{
if
(
content
.
document
instanceof
Ci
.
nsIImageDocument
)
{
let
req
=
content
.
document
.
imageRequest
;
if
(
!
req
.
image
)
{
return
;
}
sendAsyncMessage
(
"
ImageDocumentLoaded
"
{
width
:
req
.
image
.
width
height
:
req
.
image
.
height
}
)
;
}
}
false
)
;
addMessageListener
(
"
BrowserElement
:
CreateAboutBlank
"
message
=
>
{
if
(
!
content
.
document
|
|
content
.
document
.
documentURI
!
=
"
about
:
blank
"
)
{
throw
new
Error
(
"
Can
'
t
create
a
content
viewer
unless
on
about
:
blank
"
)
;
}
let
{
principal
storagePrincipal
}
=
message
.
data
;
principal
=
BrowserUtils
.
principalWithMatchingOA
(
principal
content
.
document
.
nodePrincipal
)
;
storagePrincipal
=
BrowserUtils
.
principalWithMatchingOA
(
storagePrincipal
content
.
document
.
effectiveStoragePrincipal
)
;
docShell
.
createAboutBlankContentViewer
(
principal
storagePrincipal
)
;
}
)
;
var
outerWindowID
=
docShell
.
outerWindowID
;
var
browsingContextId
=
docShell
.
browsingContext
.
id
;
sendAsyncMessage
(
"
Browser
:
Init
"
{
outerWindowID
browsingContextId
}
)
;
