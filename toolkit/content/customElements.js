"
use
strict
"
;
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
gXULDOMParser
=
new
DOMParser
(
)
;
gXULDOMParser
.
forceEnableXULXBL
(
)
;
class
MozXULElement
extends
XULElement
{
static
parseXULToFragment
(
str
preamble
=
"
"
)
{
let
doc
=
gXULDOMParser
.
parseFromString
(
{
preamble
}
<
box
xmlns
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
>
{
str
}
<
/
box
>
"
application
/
xml
"
)
;
let
nodeIterator
=
doc
.
createNodeIterator
(
doc
NodeFilter
.
SHOW_TEXT
)
;
let
currentNode
=
nodeIterator
.
nextNode
(
)
;
while
(
currentNode
)
{
currentNode
.
remove
(
)
;
currentNode
=
nodeIterator
.
nextNode
(
)
;
}
let
range
=
doc
.
createRange
(
)
;
range
.
selectNodeContents
(
doc
.
querySelector
(
"
box
"
)
)
;
return
range
.
extractContents
(
)
;
}
static
implementCustomInterface
(
cls
ifaces
)
{
cls
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
ifaces
)
;
cls
.
prototype
.
getCustomInterfaceCallback
=
function
getCustomInterfaceCallback
(
iface
)
{
if
(
ifaces
.
includes
(
Ci
[
Components
.
interfacesByID
[
iface
.
number
]
]
)
)
{
return
getInterfaceProxy
(
this
)
;
}
return
null
;
}
;
}
}
function
getInterfaceProxy
(
obj
)
{
if
(
!
obj
.
_customInterfaceProxy
)
{
obj
.
_customInterfaceProxy
=
new
Proxy
(
obj
{
get
(
target
prop
receiver
)
{
let
propOrMethod
=
target
[
prop
]
;
if
(
typeof
propOrMethod
=
=
"
function
"
)
{
if
(
propOrMethod
instanceof
MozQueryInterface
)
{
return
Reflect
.
get
(
target
prop
receiver
)
;
}
return
function
(
.
.
.
args
)
{
return
propOrMethod
.
apply
(
target
args
)
;
}
;
}
return
propOrMethod
;
}
}
)
;
}
return
obj
.
_customInterfaceProxy
;
}
window
.
MozXULElement
=
MozXULElement
;
for
(
let
script
of
[
"
chrome
:
/
/
global
/
content
/
elements
/
stringbundle
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
general
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
textbox
.
js
"
]
)
{
Services
.
scriptloader
.
loadSubScript
(
script
window
)
;
}
customElements
.
setElementCreationCallback
(
"
printpreview
-
toolbar
"
type
=
>
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
printPreviewToolbar
.
js
"
window
)
;
}
)
;
customElements
.
setElementCreationCallback
(
"
editor
"
type
=
>
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
elements
/
editor
.
js
"
window
)
;
}
)
;
}
