"
use
strict
"
;
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
gXULDOMParser
=
new
DOMParser
(
)
;
gXULDOMParser
.
forceEnableXULXBL
(
)
;
class
MozXULElement
extends
XULElement
{
static
parseXULToFragment
(
str
entities
=
[
]
)
{
let
doc
=
gXULDOMParser
.
parseFromString
(
{
entities
.
length
?
<
!
DOCTYPE
bindings
[
{
entities
.
reduce
(
(
preamble
url
index
)
=
>
{
return
preamble
+
<
!
ENTITY
%
_dtd
-
{
index
}
SYSTEM
"
{
url
}
"
>
%
_dtd
-
{
index
}
;
;
}
"
"
)
}
]
>
:
"
"
}
<
box
xmlns
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
>
{
str
}
<
/
box
>
"
application
/
xml
"
)
;
let
nodeIterator
=
doc
.
createNodeIterator
(
doc
NodeFilter
.
SHOW_TEXT
)
;
let
currentNode
=
nodeIterator
.
nextNode
(
)
;
while
(
currentNode
)
{
currentNode
.
remove
(
)
;
currentNode
=
nodeIterator
.
nextNode
(
)
;
}
let
range
=
doc
.
createRange
(
)
;
range
.
selectNodeContents
(
doc
.
querySelector
(
"
box
"
)
)
;
return
range
.
extractContents
(
)
;
}
static
insertFTLIfNeeded
(
path
)
{
let
container
=
document
.
head
|
|
document
.
querySelector
(
"
linkset
"
)
;
if
(
!
container
)
{
if
(
document
.
contentType
=
=
"
application
/
vnd
.
mozilla
.
xul
+
xml
"
)
{
container
=
document
.
createXULElement
(
"
linkset
"
)
;
document
.
documentElement
.
appendChild
(
container
)
;
}
else
if
(
document
.
documentURI
=
=
AppConstants
.
BROWSER_CHROME_URL
)
{
container
=
document
.
documentElement
;
}
else
{
throw
new
Error
(
"
Attempt
to
inject
localization
link
before
document
.
head
is
available
"
)
;
}
}
for
(
let
link
of
container
.
querySelectorAll
(
"
link
"
)
)
{
if
(
link
.
getAttribute
(
"
href
"
)
=
=
path
)
{
return
;
}
}
let
link
=
document
.
createElement
(
"
link
"
)
;
link
.
setAttribute
(
"
rel
"
"
localization
"
)
;
link
.
setAttribute
(
"
href
"
path
)
;
container
.
appendChild
(
link
)
;
}
static
implementCustomInterface
(
cls
ifaces
)
{
cls
.
prototype
.
getCustomInterfaceCallback
=
function
getCustomInterfaceCallback
(
iface
)
{
if
(
ifaces
.
includes
(
Ci
[
Components
.
interfacesByID
[
iface
.
number
]
]
)
)
{
return
getInterfaceProxy
(
this
)
;
}
return
null
;
}
;
}
}
function
getInterfaceProxy
(
obj
)
{
if
(
!
obj
.
_customInterfaceProxy
)
{
obj
.
_customInterfaceProxy
=
new
Proxy
(
obj
{
get
(
target
prop
receiver
)
{
let
propOrMethod
=
target
[
prop
]
;
if
(
typeof
propOrMethod
=
=
"
function
"
)
{
if
(
propOrMethod
instanceof
MozQueryInterface
)
{
return
Reflect
.
get
(
target
prop
receiver
)
;
}
return
function
(
.
.
.
args
)
{
return
propOrMethod
.
apply
(
target
args
)
;
}
;
}
return
propOrMethod
;
}
}
)
;
}
return
obj
.
_customInterfaceProxy
;
}
window
.
MozXULElement
=
MozXULElement
;
for
(
let
script
of
[
"
chrome
:
/
/
global
/
content
/
elements
/
general
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
textbox
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
tabbox
.
js
"
]
)
{
Services
.
scriptloader
.
loadSubScript
(
script
window
)
;
}
for
(
let
[
tag
script
]
of
[
[
"
findbar
"
"
chrome
:
/
/
global
/
content
/
elements
/
findbar
.
js
"
]
[
"
stringbundle
"
"
chrome
:
/
/
global
/
content
/
elements
/
stringbundle
.
js
"
]
[
"
printpreview
-
toolbar
"
"
chrome
:
/
/
global
/
content
/
printPreviewToolbar
.
js
"
]
[
"
editor
"
"
chrome
:
/
/
global
/
content
/
elements
/
editor
.
js
"
]
]
)
{
customElements
.
setElementCreationCallback
(
tag
(
)
=
>
{
Services
.
scriptloader
.
loadSubScript
(
script
window
)
;
}
)
;
}
}
