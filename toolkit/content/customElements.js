"
use
strict
"
;
(
(
)
=
>
{
if
(
window
.
MozXULElement
)
{
return
;
}
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
gIsDOMContentLoaded
=
false
;
const
gElementsPendingConnection
=
new
Set
(
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
gIsDOMContentLoaded
=
true
;
for
(
let
element
of
gElementsPendingConnection
)
{
try
{
if
(
element
.
isConnected
)
{
element
.
isRunningDelayedConnectedCallback
=
true
;
element
.
connectedCallback
(
)
;
}
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
}
element
.
isRunningDelayedConnectedCallback
=
false
;
}
gElementsPendingConnection
.
clear
(
)
;
}
{
once
:
true
capture
:
true
}
)
;
const
gXULDOMParser
=
new
DOMParser
(
)
;
gXULDOMParser
.
forceEnableXULXBL
(
)
;
const
MozElements
=
{
}
;
const
MozElementMixin
=
Base
=
>
class
MozElement
extends
Base
{
inheritAttribute
(
child
attr
)
{
let
attrName
=
attr
;
let
attrNewName
=
attr
;
let
split
=
attrName
.
split
(
"
=
"
)
;
if
(
split
.
length
=
=
2
)
{
attrName
=
split
[
1
]
;
attrNewName
=
split
[
0
]
;
}
let
hasAttr
=
this
.
hasAttribute
(
attrName
)
;
let
attrValue
=
this
.
getAttribute
(
attrName
)
;
if
(
!
this
.
_inheritedAttributesMap
)
{
this
.
_inheritedAttributesMap
=
new
WeakMap
(
)
;
}
if
(
!
this
.
_inheritedAttributesMap
.
has
(
child
)
)
{
this
.
_inheritedAttributesMap
.
set
(
child
{
}
)
;
}
let
lastInheritedAttributes
=
this
.
_inheritedAttributesMap
.
get
(
child
)
;
if
(
(
hasAttr
&
&
attrValue
=
=
=
lastInheritedAttributes
[
attrName
]
)
|
|
(
!
hasAttr
&
&
!
lastInheritedAttributes
.
hasOwnProperty
(
attrName
)
)
)
{
return
;
}
if
(
hasAttr
)
{
lastInheritedAttributes
[
attrName
]
=
attrValue
;
}
else
{
delete
lastInheritedAttributes
[
attrName
]
;
}
if
(
attrNewName
=
=
=
"
text
"
)
{
child
.
textContent
=
hasAttr
?
attrValue
:
"
"
;
}
else
if
(
hasAttr
)
{
child
.
setAttribute
(
attrNewName
attrValue
)
;
}
else
{
child
.
removeAttribute
(
attrNewName
)
;
}
}
delayConnectedCallback
(
)
{
if
(
gIsDOMContentLoaded
)
{
return
false
;
}
gElementsPendingConnection
.
add
(
this
)
;
return
true
;
}
get
isConnectedAndReady
(
)
{
return
gIsDOMContentLoaded
&
&
this
.
isConnected
;
}
static
parseXULToFragment
(
str
entities
=
[
]
)
{
let
doc
=
gXULDOMParser
.
parseFromString
(
{
entities
.
length
?
<
!
DOCTYPE
bindings
[
{
entities
.
reduce
(
(
preamble
url
index
)
=
>
{
return
preamble
+
<
!
ENTITY
%
_dtd
-
{
index
}
SYSTEM
"
{
url
}
"
>
%
_dtd
-
{
index
}
;
;
}
"
"
)
}
]
>
:
"
"
}
<
box
xmlns
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
xmlns
:
html
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
>
{
str
}
<
/
box
>
"
application
/
xml
"
)
;
let
nodeIterator
=
doc
.
createNodeIterator
(
doc
NodeFilter
.
SHOW_TEXT
)
;
let
currentNode
=
nodeIterator
.
nextNode
(
)
;
while
(
currentNode
)
{
currentNode
.
remove
(
)
;
currentNode
=
nodeIterator
.
nextNode
(
)
;
}
let
range
=
doc
.
createRange
(
)
;
range
.
selectNodeContents
(
doc
.
querySelector
(
"
box
"
)
)
;
return
range
.
extractContents
(
)
;
}
static
insertFTLIfNeeded
(
path
)
{
let
container
=
document
.
head
|
|
document
.
querySelector
(
"
linkset
"
)
;
if
(
!
container
)
{
if
(
document
.
contentType
=
=
"
application
/
vnd
.
mozilla
.
xul
+
xml
"
)
{
container
=
document
.
createXULElement
(
"
linkset
"
)
;
document
.
documentElement
.
appendChild
(
container
)
;
}
else
if
(
document
.
documentURI
=
=
AppConstants
.
BROWSER_CHROME_URL
)
{
container
=
document
.
documentElement
;
}
else
{
throw
new
Error
(
"
Attempt
to
inject
localization
link
before
document
.
head
is
available
"
)
;
}
}
for
(
let
link
of
container
.
querySelectorAll
(
"
link
"
)
)
{
if
(
link
.
getAttribute
(
"
href
"
)
=
=
path
)
{
return
;
}
}
let
link
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
link
"
)
;
link
.
setAttribute
(
"
rel
"
"
localization
"
)
;
link
.
setAttribute
(
"
href
"
path
)
;
container
.
appendChild
(
link
)
;
}
static
implementCustomInterface
(
cls
ifaces
)
{
if
(
cls
.
prototype
.
customInterfaces
)
{
ifaces
.
push
(
.
.
.
cls
.
prototype
.
customInterfaces
)
;
}
cls
.
prototype
.
customInterfaces
=
ifaces
;
cls
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
ifaces
)
;
cls
.
prototype
.
getCustomInterfaceCallback
=
function
getCustomInterfaceCallback
(
ifaceToCheck
)
{
if
(
cls
.
prototype
.
customInterfaces
.
some
(
iface
=
>
iface
.
equals
(
ifaceToCheck
)
)
)
{
return
getInterfaceProxy
(
this
)
;
}
return
null
;
}
;
}
}
;
const
MozXULElement
=
MozElementMixin
(
XULElement
)
;
function
getInterfaceProxy
(
obj
)
{
if
(
!
obj
.
_customInterfaceProxy
)
{
obj
.
_customInterfaceProxy
=
new
Proxy
(
obj
{
get
(
target
prop
receiver
)
{
let
propOrMethod
=
target
[
prop
]
;
if
(
typeof
propOrMethod
=
=
"
function
"
)
{
if
(
propOrMethod
instanceof
MozQueryInterface
)
{
return
Reflect
.
get
(
target
prop
receiver
)
;
}
return
function
(
.
.
.
args
)
{
return
propOrMethod
.
apply
(
target
args
)
;
}
;
}
return
propOrMethod
;
}
}
)
;
}
return
obj
.
_customInterfaceProxy
;
}
const
BaseControlMixin
=
Base
=
>
{
class
BaseControl
extends
Base
{
get
disabled
(
)
{
return
this
.
getAttribute
(
"
disabled
"
)
=
=
"
true
"
;
}
set
disabled
(
val
)
{
if
(
val
)
{
this
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
this
.
removeAttribute
(
"
disabled
"
)
;
}
}
get
tabIndex
(
)
{
return
parseInt
(
this
.
getAttribute
(
"
tabindex
"
)
)
|
|
0
;
}
set
tabIndex
(
val
)
{
if
(
val
)
{
this
.
setAttribute
(
"
tabindex
"
val
)
;
}
else
{
this
.
removeAttribute
(
"
tabindex
"
)
;
}
}
}
Base
.
implementCustomInterface
(
BaseControl
[
Ci
.
nsIDOMXULControlElement
]
)
;
return
BaseControl
;
}
;
MozElements
.
BaseControl
=
BaseControlMixin
(
MozXULElement
)
;
const
BaseTextMixin
=
Base
=
>
class
extends
BaseControlMixin
(
Base
)
{
set
label
(
val
)
{
this
.
setAttribute
(
"
label
"
val
)
;
return
val
;
}
get
label
(
)
{
return
this
.
getAttribute
(
"
label
"
)
;
}
set
crop
(
val
)
{
this
.
setAttribute
(
"
crop
"
val
)
;
return
val
;
}
get
crop
(
)
{
return
this
.
getAttribute
(
"
crop
"
)
;
}
set
image
(
val
)
{
this
.
setAttribute
(
"
image
"
val
)
;
return
val
;
}
get
image
(
)
{
return
this
.
getAttribute
(
"
image
"
)
;
}
set
command
(
val
)
{
this
.
setAttribute
(
"
command
"
val
)
;
return
val
;
}
get
command
(
)
{
return
this
.
getAttribute
(
"
command
"
)
;
}
set
accessKey
(
val
)
{
this
.
setAttribute
(
"
accesskey
"
val
)
;
if
(
this
.
labelElement
)
{
this
.
labelElement
.
accessKey
=
val
;
}
return
val
;
}
get
accessKey
(
)
{
return
this
.
labelElement
?
this
.
labelElement
.
accessKey
:
this
.
getAttribute
(
"
accesskey
"
)
;
}
}
;
MozElements
.
BaseText
=
BaseTextMixin
(
MozXULElement
)
;
window
.
BaseControlMixin
=
BaseControlMixin
;
window
.
MozElementMixin
=
MozElementMixin
;
window
.
MozXULElement
=
MozXULElement
;
window
.
MozElements
=
MozElements
;
customElements
.
setElementCreationCallback
(
"
browser
"
(
)
=
>
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
elements
/
browser
-
custom
-
element
.
js
"
window
)
;
}
)
;
const
isDummyDocument
=
document
.
documentURI
=
=
"
chrome
:
/
/
extensions
/
content
/
dummy
.
xul
"
;
if
(
!
isDummyDocument
)
{
for
(
let
script
of
[
"
chrome
:
/
/
global
/
content
/
elements
/
general
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
menu
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
notificationbox
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
popupnotification
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
radio
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
richlistbox
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
autocomplete
-
richlistitem
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
textbox
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
tabbox
.
js
"
"
chrome
:
/
/
global
/
content
/
elements
/
tree
.
js
"
]
)
{
Services
.
scriptloader
.
loadSubScript
(
script
window
)
;
}
for
(
let
[
tag
script
]
of
[
[
"
findbar
"
"
chrome
:
/
/
global
/
content
/
elements
/
findbar
.
js
"
]
[
"
menulist
"
"
chrome
:
/
/
global
/
content
/
elements
/
menulist
.
js
"
]
[
"
stringbundle
"
"
chrome
:
/
/
global
/
content
/
elements
/
stringbundle
.
js
"
]
[
"
printpreview
-
toolbar
"
"
chrome
:
/
/
global
/
content
/
printPreviewToolbar
.
js
"
]
[
"
editor
"
"
chrome
:
/
/
global
/
content
/
elements
/
editor
.
js
"
]
]
)
{
customElements
.
setElementCreationCallback
(
tag
(
)
=
>
{
Services
.
scriptloader
.
loadSubScript
(
script
window
)
;
}
)
;
}
}
}
)
(
)
;
