"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
third_party
/
d3
/
d3
.
js
"
)
;
const
d3
=
this
.
d3
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
METRIC_DATA
=
{
}
;
let
MAPPED_METRIC_DATA
=
[
]
;
let
FILTERED_METRIC_DATA
=
[
]
;
let
METRIC_DATA_INITIALIZED
=
false
;
const
INVALID_VALUE_REASONS
=
{
LABELED_METRIC
:
0
UNKNOWN_METRIC
:
1
}
;
const
SIMPLE_TYPES
=
{
Boolean
:
"
Boolean
"
String
:
"
String
"
StringList
:
"
StringList
"
Text
:
"
Text
"
Counter
:
"
Counter
"
}
;
const
SELECTED_METRICS
=
[
]
;
let
DOCUMENT_BODY_SEL
=
undefined
;
function
updatePrefsAndDefines
(
)
{
let
upload
=
Services
.
prefs
.
getBoolPref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
[
data
-
l10n
-
id
=
'
about
-
glean
-
data
-
upload
'
]
"
)
"
about
-
glean
-
data
-
upload
"
{
"
data
-
upload
-
pref
-
value
"
:
upload
}
)
;
let
port
=
Services
.
prefs
.
getIntPref
(
"
telemetry
.
fog
.
test
.
localhost_port
"
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
[
data
-
l10n
-
id
=
'
about
-
glean
-
local
-
port
'
]
"
)
"
about
-
glean
-
local
-
port
"
{
"
local
-
port
-
pref
-
value
"
:
port
}
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
[
data
-
l10n
-
id
=
'
about
-
glean
-
glean
-
android
'
]
"
)
"
about
-
glean
-
glean
-
android
"
{
"
glean
-
android
-
define
-
value
"
:
AppConstants
.
MOZ_GLEAN_ANDROID
}
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
[
data
-
l10n
-
id
=
'
about
-
glean
-
moz
-
official
'
]
"
)
"
about
-
glean
-
moz
-
official
"
{
"
moz
-
official
-
define
-
value
"
:
AppConstants
.
MOZILLA_OFFICIAL
}
)
;
let
uploadMessageEl
=
document
.
getElementById
(
"
upload
-
status
"
)
;
let
uploadL10nId
=
"
about
-
glean
-
upload
-
enabled
"
;
if
(
!
upload
)
{
uploadL10nId
=
"
about
-
glean
-
upload
-
disabled
"
;
}
else
if
(
port
<
0
|
|
(
port
=
=
0
&
&
!
AppConstants
.
MOZILLA_OFFICIAL
)
)
{
uploadL10nId
=
"
about
-
glean
-
upload
-
fake
-
enabled
"
;
let
a
=
document
.
createElement
(
"
a
"
)
;
a
.
href
=
"
https
:
/
/
debug
-
ping
-
preview
.
firebaseapp
.
com
/
"
;
a
.
setAttribute
(
"
data
-
l10n
-
name
"
"
glean
-
debug
-
ping
-
viewer
"
)
;
uploadMessageEl
.
appendChild
(
a
)
;
}
else
if
(
port
>
0
)
{
uploadL10nId
=
"
about
-
glean
-
upload
-
enabled
-
local
"
;
}
document
.
l10n
.
setAttributes
(
uploadMessageEl
uploadL10nId
)
;
}
function
camelToKebab
(
str
)
{
let
out
=
"
"
;
for
(
let
i
=
0
;
i
<
str
.
length
;
i
+
+
)
{
let
c
=
str
.
charAt
(
i
)
;
if
(
c
=
=
c
.
toUpperCase
(
)
)
{
out
+
=
"
-
"
;
c
=
c
.
toLowerCase
(
)
;
}
out
+
=
c
;
}
return
out
;
}
const
GLEAN_BUILTIN_PINGS
=
[
"
metrics
"
"
events
"
"
baseline
"
]
;
const
NO_PING
=
"
(
don
'
t
submit
any
ping
)
"
;
function
refillPingNames
(
)
{
let
select
=
document
.
getElementById
(
"
ping
-
names
"
)
;
let
pings
=
GLEAN_BUILTIN_PINGS
.
slice
(
)
.
concat
(
Object
.
keys
(
GleanPings
)
)
;
pings
.
forEach
(
ping
=
>
{
let
option
=
document
.
createElement
(
"
option
"
)
;
option
.
textContent
=
camelToKebab
(
ping
)
;
select
.
appendChild
(
option
)
;
}
)
;
let
option
=
document
.
createElement
(
"
option
"
)
;
document
.
l10n
.
setAttributes
(
option
"
about
-
glean
-
no
-
ping
-
label
"
)
;
option
.
value
=
NO_PING
;
select
.
appendChild
(
option
)
;
}
function
fillDebugTag
(
)
{
const
DEBUG_TAG_PREF
=
"
telemetry
.
fog
.
aboutGlean
.
debugTag
"
;
let
debugTag
;
if
(
Services
.
prefs
.
prefHasUserValue
(
DEBUG_TAG_PREF
)
)
{
debugTag
=
Services
.
prefs
.
getStringPref
(
DEBUG_TAG_PREF
)
;
}
else
{
const
debugTagPrefix
=
"
about
-
glean
-
"
;
const
profileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
path
;
let
charSum
=
Array
.
from
(
profileDir
)
.
reduce
(
(
prev
cur
)
=
>
prev
+
cur
.
charCodeAt
(
0
)
0
)
;
debugTag
=
debugTagPrefix
+
(
charSum
%
1000
)
;
}
let
tagInput
=
document
.
getElementById
(
"
tag
-
pings
"
)
;
tagInput
.
value
=
debugTag
;
const
updateDebugTagValues
=
(
)
=
>
{
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
[
data
-
l10n
-
id
=
'
about
-
glean
-
label
-
for
-
controls
-
submit
'
]
"
)
"
about
-
glean
-
label
-
for
-
controls
-
submit
"
{
"
debug
-
tag
"
:
tagInput
.
value
}
)
;
const
GDPV_ROOT
=
"
https
:
/
/
debug
-
ping
-
preview
.
firebaseapp
.
com
/
pings
/
"
;
let
gdpvLink
=
document
.
querySelector
(
"
[
data
-
l10n
-
name
=
'
gdpv
-
tagged
-
pings
-
link
'
]
"
)
;
gdpvLink
.
href
=
GDPV_ROOT
+
tagInput
.
value
;
}
;
tagInput
.
addEventListener
(
"
change
"
(
)
=
>
{
Services
.
prefs
.
setStringPref
(
DEBUG_TAG_PREF
tagInput
.
value
)
;
updateDebugTagValues
(
)
;
}
)
;
updateDebugTagValues
(
)
;
}
function
showTab
(
button
)
{
let
current_tab
=
document
.
querySelector
(
"
.
active
"
)
;
let
category
=
button
.
getAttribute
(
"
id
"
)
.
substring
(
"
category
-
"
.
length
)
;
let
content
=
document
.
getElementById
(
category
)
;
if
(
current_tab
=
=
content
)
{
return
;
}
current_tab
.
classList
.
remove
(
"
active
"
)
;
current_tab
.
hidden
=
true
;
content
.
classList
.
add
(
"
active
"
)
;
content
.
hidden
=
false
;
let
current_button
=
document
.
querySelector
(
"
[
selected
=
true
]
"
)
;
current_button
.
removeAttribute
(
"
selected
"
)
;
button
.
setAttribute
(
"
selected
"
"
true
"
)
;
}
function
onLoad
(
)
{
let
menu
=
document
.
getElementById
(
"
categories
"
)
;
menu
.
addEventListener
(
"
click
"
function
click
(
e
)
{
if
(
e
.
target
&
&
e
.
target
.
parentNode
=
=
menu
)
{
showTab
(
e
.
target
)
;
}
}
)
;
showTab
(
document
.
getElementById
(
"
category
-
about
-
glean
"
)
)
;
updatePrefsAndDefines
(
)
;
refillPingNames
(
)
;
fillDebugTag
(
)
;
document
.
getElementById
(
"
controls
-
submit
"
)
.
addEventListener
(
"
click
"
(
)
=
>
{
let
tag
=
document
.
getElementById
(
"
tag
-
pings
"
)
.
value
;
let
log
=
document
.
getElementById
(
"
log
-
pings
"
)
.
checked
;
let
ping
=
document
.
getElementById
(
"
ping
-
names
"
)
.
value
;
let
feedbackToast
=
document
.
getElementById
(
"
feedback
"
)
;
Services
.
fog
.
setLogPings
(
log
)
;
Services
.
fog
.
setTagPings
(
tag
)
;
if
(
ping
!
=
NO_PING
)
{
Services
.
fog
.
sendPing
(
ping
)
;
feedbackToast
.
setAttribute
(
"
data
-
l10n
-
id
"
"
about
-
glean
-
feedback
-
settings
-
and
-
ping
"
)
;
}
else
{
feedbackToast
.
setAttribute
(
"
data
-
l10n
-
id
"
"
about
-
glean
-
feedback
-
settings
-
only
"
)
;
}
feedbackToast
.
style
.
visibility
=
"
visible
"
;
setTimeout
(
(
)
=
>
{
feedbackToast
.
style
.
visibility
=
"
hidden
"
;
}
3000
)
;
}
)
;
let
redesignEnabled
=
Services
.
prefs
.
getBoolPref
(
"
about
.
glean
.
redesign
.
enabled
"
)
;
if
(
redesignEnabled
)
{
const
categories
=
document
.
getElementById
(
"
categories
"
)
;
const
div
=
document
.
createElement
(
"
div
"
)
;
div
.
id
=
"
category
-
metrics
-
table
"
;
div
.
className
=
"
category
"
;
const
span
=
document
.
createElement
(
"
span
"
)
;
span
.
className
=
"
category
-
name
"
;
span
.
setAttribute
(
"
data
-
l10n
-
id
"
"
about
-
glean
-
category
-
metrics
-
table
"
)
;
div
.
appendChild
(
span
)
;
categories
.
appendChild
(
div
)
;
}
DOCUMENT_BODY_SEL
=
d3
.
select
(
document
.
body
)
;
document
.
getElementById
(
"
category
-
metrics
-
table
"
)
.
addEventListener
(
"
click
"
(
)
=
>
{
initializeMetricData
(
)
;
const
table
=
document
.
getElementById
(
"
metrics
-
table
-
instance
"
)
;
table
.
removeAttribute
(
"
hidden
"
)
;
MAPPED_METRIC_DATA
=
Object
.
entries
(
METRIC_DATA
)
.
flatMap
(
(
[
category
metrics
]
)
=
>
Object
.
entries
(
metrics
)
.
map
(
(
[
name
metric
]
)
=
>
(
{
category
name
fullName
:
{
category
}
.
{
name
}
.
.
.
metric
}
)
)
)
;
updateFilteredMetricData
(
)
;
updateTable
(
)
;
}
)
;
let
inputTimeout
=
undefined
;
document
.
getElementById
(
"
filter
-
metrics
"
)
.
addEventListener
(
"
input
"
e
=
>
{
clearTimeout
(
inputTimeout
)
;
inputTimeout
=
setTimeout
(
(
)
=
>
{
updateFilteredMetricData
(
e
.
target
.
value
?
?
"
"
)
;
}
200
)
;
}
)
;
document
.
getElementById
(
"
load
-
all
"
)
.
addEventListener
(
"
click
"
(
)
=
>
{
MAPPED_METRIC_DATA
.
forEach
(
datum
=
>
{
updateDatum
(
datum
false
)
;
}
)
;
updateTable
(
)
;
}
)
;
}
function
initializeMetricData
(
)
{
if
(
METRIC_DATA_INITIALIZED
)
{
return
;
}
for
(
let
[
category
metrics
]
of
Object
.
entries
(
Glean
)
)
{
for
(
let
[
metricName
metric
]
of
Object
.
entries
(
metrics
)
)
{
let
constructorName
=
metric
.
constructor
.
name
.
replace
(
"
Glean
"
"
"
)
;
if
(
constructorName
=
=
"
Labeled
"
)
{
constructorName
+
=
metric
.
__other__
.
constructor
.
name
.
replace
(
"
Glean
"
"
"
)
;
}
if
(
!
METRIC_DATA
[
category
]
)
{
METRIC_DATA
[
category
]
=
{
}
;
}
METRIC_DATA
[
category
]
[
metricName
]
=
{
type
:
constructorName
value
:
undefined
metric
}
;
}
}
METRIC_DATA_INITIALIZED
=
true
;
}
function
updateButtonsSelection
(
selection
)
{
selection
.
attr
(
"
data
-
l10n
-
id
"
d
=
>
d
.
watching
?
"
about
-
glean
-
button
-
unwatch
"
:
"
about
-
glean
-
button
-
watch
"
)
;
}
function
updateValueSelection
(
selection
)
{
selection
.
attr
(
"
data
-
l10n
-
id
"
d
=
>
{
switch
(
d
.
invalidValue
)
{
case
INVALID_VALUE_REASONS
.
LABELED_METRIC
:
return
"
about
-
glean
-
labeled
-
metric
-
warning
"
;
case
INVALID_VALUE_REASONS
.
UNKNOWN_METRIC
:
return
"
about
-
glean
-
unknown
-
metric
-
type
-
warning
"
;
default
:
return
null
;
}
}
)
.
each
(
function
(
datum
)
{
if
(
datum
.
loaded
)
{
let
codeSelection
=
d3
.
select
(
this
)
.
select
(
"
pre
>
code
"
)
;
if
(
codeSelection
.
empty
(
)
)
{
codeSelection
=
d3
.
select
(
this
)
.
append
(
"
pre
"
)
.
append
(
"
code
"
)
;
}
switch
(
datum
.
type
)
{
default
:
codeSelection
.
text
(
prettyPrint
(
datum
.
value
)
)
;
}
}
}
)
;
}
function
updateDatum
(
datum
update
=
true
)
{
if
(
typeof
datum
.
metric
.
testGetValue
=
=
"
function
"
)
{
try
{
datum
.
value
=
datum
.
metric
.
testGetValue
(
)
;
datum
.
error
=
undefined
;
}
catch
(
e
)
{
datum
.
error
=
e
;
}
datum
.
loaded
=
true
;
datum
.
invalidValue
=
undefined
;
}
else
if
(
datum
.
type
.
includes
(
"
Labeled
"
)
)
{
datum
.
invalidValue
=
INVALID_VALUE_REASONS
.
LABELED_METRIC
;
}
else
{
datum
.
invalidValue
=
INVALID_VALUE_REASONS
.
UNKNOWN_METRIC
;
}
if
(
update
)
{
updateValueSelection
(
DOCUMENT_BODY_SEL
.
select
(
tr
[
data
-
d3
-
row
=
"
{
datum
.
fullName
}
"
]
>
td
[
data
-
d3
-
cell
=
value
]
)
)
;
}
}
function
prettyPrint
(
jsonValue
)
{
const
pretty
=
JSON
.
stringify
(
jsonValue
(
key
value
)
=
>
{
if
(
value
?
.
type
=
=
=
Symbol
(
"
JSON_NUMBER
"
)
)
{
return
JSON
.
rawJSON
(
value
.
source
)
;
}
if
(
Object
.
is
(
value
-
0
)
)
{
return
JSON
.
rawJSON
(
"
-
0
"
)
;
}
return
value
;
}
"
"
)
;
return
pretty
;
}
function
updateTable
(
)
{
const
tbody
=
DOCUMENT_BODY_SEL
.
select
(
"
#
metrics
-
table
-
body
"
)
;
const
rows
=
tbody
.
selectAll
(
"
tr
"
)
.
data
(
FILTERED_METRIC_DATA
d
=
>
d
.
fullName
)
;
let
newRows
=
rows
.
enter
(
)
.
append
(
"
tr
"
)
.
attr
(
"
data
-
d3
-
row
"
d
=
>
d
.
fullName
)
.
classed
(
{
"
metric
-
row
"
:
true
}
)
;
const
actions
=
newRows
.
append
(
"
td
"
)
.
attr
(
"
data
-
d3
-
cell
"
"
actions
"
)
.
append
(
"
div
"
)
;
newRows
.
append
(
"
td
"
)
.
attr
(
"
data
-
d3
-
cell
"
"
category
"
)
.
append
(
"
pre
"
)
.
text
(
d
=
>
d
.
category
)
;
newRows
.
append
(
"
td
"
)
.
attr
(
"
data
-
d3
-
cell
"
"
name
"
)
.
append
(
"
pre
"
)
.
text
(
d
=
>
d
.
name
)
;
newRows
.
append
(
"
td
"
)
.
attr
(
"
data
-
d3
-
cell
"
"
type
"
)
.
text
(
d
=
>
d
.
type
)
;
newRows
.
append
(
"
td
"
)
.
attr
(
"
data
-
d3
-
cell
"
"
value
"
)
;
actions
.
append
(
"
button
"
)
.
attr
(
"
data
-
l10n
-
id
"
"
about
-
glean
-
button
-
load
-
value
"
)
.
on
(
"
click
"
datum
=
>
updateDatum
(
datum
)
)
;
actions
.
append
(
"
button
"
)
.
attr
(
"
data
-
l10n
-
id
"
"
about
-
glean
-
button
-
dictionary
-
link
"
)
.
classed
(
{
primary
:
true
}
)
.
on
(
"
click
"
datum
=
>
{
const
upperRegExp
=
/
[
A
-
Z
]
/
;
const
app
=
"
firefox_desktop
"
;
let
category
=
datum
.
category
;
let
index
=
category
.
search
(
upperRegExp
)
;
while
(
index
!
=
-
1
)
{
category
=
category
.
replace
(
upperRegExp
"
_
"
+
category
[
index
]
.
toLowerCase
(
)
)
;
index
=
category
.
search
(
upperRegExp
)
;
}
let
name
=
datum
.
name
;
index
=
name
.
search
(
upperRegExp
)
;
while
(
index
!
=
-
1
)
{
name
=
name
.
replace
(
upperRegExp
"
_
"
+
name
[
index
]
.
toLowerCase
(
)
)
;
index
=
name
.
search
(
upperRegExp
)
;
}
window
.
open
(
https
:
/
/
dictionary
.
telemetry
.
mozilla
.
org
/
apps
/
{
app
}
/
metrics
/
{
category
}
_
{
name
}
"
_blank
"
)
.
focus
(
)
;
}
)
;
updateButtonsSelection
(
rows
.
selectAll
(
"
td
[
data
-
d3
-
cell
=
actions
]
button
[
data
-
d3
-
button
=
watch
]
"
)
)
;
updateValueSelection
(
rows
.
selectAll
(
"
td
[
data
-
d3
-
cell
=
value
]
"
)
)
;
rows
.
sort
(
(
a
b
)
=
>
d3
.
ascending
(
a
.
fullName
b
.
fullName
)
)
;
rows
.
exit
(
)
.
remove
(
)
;
document
.
l10n
.
translateFragment
(
document
.
querySelector
(
"
#
metrics
-
table
-
body
"
)
)
;
}
function
updateFilteredMetricData
(
searchString
)
{
if
(
!
searchString
)
{
FILTERED_METRIC_DATA
=
MAPPED_METRIC_DATA
;
}
else
{
const
simpleTypeValueSearch
=
datum
=
>
{
if
(
!
Object
.
values
(
SIMPLE_TYPES
)
.
includes
(
datum
.
type
)
)
{
return
false
;
}
switch
(
datum
.
type
)
{
case
SIMPLE_TYPES
.
Boolean
:
if
(
searchString
=
=
"
true
"
)
{
return
datum
.
value
=
=
=
true
;
}
else
if
(
searchString
=
=
"
false
"
)
{
return
datum
.
value
=
=
=
false
;
}
return
false
;
default
:
return
false
;
}
}
;
FILTERED_METRIC_DATA
=
MAPPED_METRIC_DATA
.
filter
(
datum
=
>
datum
.
category
.
includes
(
searchString
)
|
|
datum
.
name
.
includes
(
searchString
)
|
|
datum
.
type
.
includes
(
searchString
)
|
|
simpleTypeValueSearch
(
datum
)
)
;
}
updateTable
(
)
;
}
window
.
addEventListener
(
"
load
"
onLoad
)
;
