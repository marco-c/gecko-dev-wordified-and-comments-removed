const
{
EXIT_CODE
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
BackgroundTasksManager
.
sys
.
mjs
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
add_setup
(
(
)
=
>
{
let
{
didCreate
}
=
selectStartupProfile
(
)
;
Assert
.
ok
(
didCreate
"
Should
have
created
a
new
profile
.
"
)
;
}
)
;
function
wait
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
function
runDeletionTask
(
rootDir
localDir
timeout
)
{
let
binary
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
;
binary
.
leafName
=
binary
.
leafName
.
replace
(
"
xpcshell
"
"
firefox
"
)
;
let
process
=
Cc
[
"
mozilla
.
org
/
process
/
util
;
1
"
]
.
createInstance
(
Ci
.
nsIProcess
)
;
process
.
init
(
binary
)
;
process
.
noShell
=
true
;
process
.
startHidden
=
true
;
let
args
=
[
"
-
-
backgroundtask
"
"
removeProfileFiles
"
rootDir
.
path
localDir
.
path
String
(
timeout
)
]
;
console
.
log
(
"
Executing
"
binary
.
path
.
.
.
args
)
;
return
new
Promise
(
resolve
=
>
{
process
.
runwAsync
(
args
args
.
length
(
)
=
>
{
resolve
(
process
.
exitValue
)
;
}
)
;
}
)
;
}
add_task
(
async
(
)
=
>
{
let
service
=
getProfileService
(
)
;
let
profile
=
service
.
createProfile
(
null
"
Test2
"
)
;
await
service
.
removeProfileFilesByPath
(
profile
.
rootDir
profile
.
localDir
0
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
rootDir
.
path
)
)
"
Should
have
deleted
the
root
dir
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
localDir
.
path
)
)
"
Should
have
deleted
the
local
dir
"
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
AppConstants
.
MOZ_BACKGROUNDTASKS
}
async
(
)
=
>
{
let
service
=
getProfileService
(
)
;
let
profile
=
service
.
createProfile
(
null
"
Test3
"
)
;
let
testRootFile
=
PathUtils
.
join
(
profile
.
rootDir
.
path
"
test
.
txt
"
)
;
await
IOUtils
.
writeUTF8
(
testRootFile
"
hello
"
)
;
let
testLocalFile
=
PathUtils
.
join
(
profile
.
localDir
.
path
"
test
.
txt
"
)
;
await
IOUtils
.
writeUTF8
(
testLocalFile
"
goodbye
"
)
;
let
exitCode
=
await
runDeletionTask
(
profile
.
rootDir
profile
.
localDir
0
)
;
Assert
.
equal
(
exitCode
EXIT_CODE
.
SUCCESS
"
Process
should
have
completed
successfully
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
rootDir
.
path
)
)
"
Should
have
deleted
the
root
dir
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
localDir
.
path
)
)
"
Should
have
deleted
the
local
dir
"
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
AppConstants
.
MOZ_BACKGROUNDTASKS
}
async
(
)
=
>
{
let
service
=
getProfileService
(
)
;
let
profile
=
service
.
createProfile
(
null
"
Test4
"
)
;
let
testRootFile
=
PathUtils
.
join
(
profile
.
rootDir
.
path
"
test
.
txt
"
)
;
await
IOUtils
.
writeUTF8
(
testRootFile
"
hello
"
)
;
let
testLocalFile
=
PathUtils
.
join
(
profile
.
localDir
.
path
"
test
.
txt
"
)
;
await
IOUtils
.
writeUTF8
(
testLocalFile
"
goodbye
"
)
;
let
lock
=
profile
.
lock
(
{
}
)
;
let
exitCode
=
await
runDeletionTask
(
profile
.
rootDir
profile
.
localDir
0
)
;
Assert
.
equal
(
exitCode
EXIT_CODE
.
EXCEPTION
"
Process
should
not
have
completed
successfully
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
testRootFile
)
"
Should
not
have
deleted
the
root
dir
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
testLocalFile
)
"
Should
not
have
deleted
the
local
dir
"
)
;
lock
.
unlock
(
)
;
exitCode
=
await
runDeletionTask
(
profile
.
rootDir
profile
.
localDir
0
)
;
Assert
.
equal
(
exitCode
EXIT_CODE
.
SUCCESS
"
Process
should
have
completed
successfully
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
rootDir
.
path
)
)
"
Should
have
deleted
the
root
dir
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
localDir
.
path
)
)
"
Should
have
deleted
the
local
dir
"
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
AppConstants
.
MOZ_BACKGROUNDTASKS
}
async
(
)
=
>
{
let
service
=
getProfileService
(
)
;
let
profile
=
service
.
createProfile
(
null
"
Test5
"
)
;
let
testRootFile
=
PathUtils
.
join
(
profile
.
rootDir
.
path
"
test
.
txt
"
)
;
await
IOUtils
.
writeUTF8
(
testRootFile
"
hello
"
)
;
let
testLocalFile
=
PathUtils
.
join
(
profile
.
localDir
.
path
"
test
.
txt
"
)
;
await
IOUtils
.
writeUTF8
(
testLocalFile
"
goodbye
"
)
;
let
lock
=
profile
.
lock
(
{
}
)
;
let
deletionPromise
=
runDeletionTask
(
profile
.
rootDir
profile
.
localDir
20
)
;
await
wait
(
AppConstants
.
DEBUG
?
4000
:
1000
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
testRootFile
)
"
Should
not
have
deleted
the
root
dir
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
testLocalFile
)
"
Should
not
have
deleted
the
local
dir
"
)
;
lock
.
unlock
(
)
;
let
exitCode
=
await
deletionPromise
;
Assert
.
equal
(
exitCode
EXIT_CODE
.
SUCCESS
"
Process
should
have
completed
successfully
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
rootDir
.
path
)
)
"
Should
have
deleted
the
root
dir
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
profile
.
localDir
.
path
)
)
"
Should
have
deleted
the
local
dir
"
)
;
}
)
;
