let
condition
=
{
skip_if
:
(
)
=
>
!
AppConstants
.
MOZ_BACKGROUNDTASKS
}
;
let
vendor
=
"
Mozilla
"
;
add_task
(
condition
async
(
)
=
>
{
let
hash
=
xreDirProvider
.
getInstallHash
(
)
;
writeProfilesIni
(
BACKGROUNDTASKS_PROFILE_DATA
)
;
const
bts
=
Cc
[
"
mozilla
.
org
/
backgroundtasks
;
1
"
]
.
getService
(
Ci
.
nsIBackgroundTasks
)
;
bts
.
overrideBackgroundTaskNameForTesting
(
"
not_ephemeral_profile
"
)
;
let
{
didCreate
rootDir
}
=
selectStartupProfile
(
)
;
checkStartupReason
(
"
backgroundtask
-
not
-
ephemeral
"
)
;
Assert
.
equal
(
didCreate
true
"
Created
new
non
-
ephemeral
profile
"
)
;
let
profileData
=
readProfilesIni
(
)
;
Assert
.
equal
(
profileData
.
backgroundTasksProfiles
.
length
2
)
;
Assert
.
deepEqual
(
[
profileData
.
backgroundTasksProfiles
[
1
]
]
BACKGROUNDTASKS_PROFILE_DATA
.
backgroundTasksProfiles
)
;
let
saltedPath
=
profileData
.
backgroundTasksProfiles
[
0
]
.
path
;
Assert
.
ok
(
saltedPath
.
endsWith
(
.
{
vendor
}
BackgroundTask
-
{
hash
}
-
not_ephemeral_profile
)
{
saltedPath
}
ends
with
"
.
{
vendor
}
BackgroundTask
-
{
hash
}
-
not_ephemeral_profile
"
)
;
Assert
.
ok
(
!
saltedPath
.
startsWith
(
.
{
vendor
}
BackgroundTask
-
{
hash
}
-
not_ephemeral_profile
)
{
saltedPath
}
is
really
salted
)
;
Assert
.
deepEqual
(
profileData
.
backgroundTasksProfiles
[
0
]
{
name
:
{
vendor
}
BackgroundTask
-
{
hash
}
-
not_ephemeral_profile
path
:
saltedPath
}
)
;
Assert
.
ok
(
rootDir
.
path
.
endsWith
(
saltedPath
)
rootDir
"
{
rootDir
.
path
}
"
ends
with
salted
path
"
{
saltedPath
}
"
)
;
let
backgroundTasksProfilesPath
=
gDataHome
;
if
(
!
AppConstants
.
XP_UNIX
|
|
AppConstants
.
platform
=
=
=
"
macosx
"
)
{
backgroundTasksProfilesPath
.
append
(
"
Background
Tasks
Profiles
"
)
;
}
Assert
.
ok
(
rootDir
.
path
.
startsWith
(
backgroundTasksProfilesPath
.
path
)
rootDir
"
{
rootDir
.
path
}
"
is
sibling
to
user
profiles
directory
{
backgroundTasksProfilesPath
}
)
;
}
)
;
