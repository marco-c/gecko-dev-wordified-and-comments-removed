#
ifndef
nsToolkitProfileService_h
#
define
nsToolkitProfileService_h
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
nsIToolkitProfileService
.
h
"
#
include
"
nsIToolkitProfile
.
h
"
#
include
"
nsIFactory
.
h
"
#
include
"
nsSimpleEnumerator
.
h
"
#
include
"
nsProfileLock
.
h
"
#
include
"
nsINIParser
.
h
"
class
nsToolkitProfile
final
:
public
nsIToolkitProfile
public
mozilla
:
:
LinkedListElement
<
RefPtr
<
nsToolkitProfile
>
>
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSITOOLKITPROFILE
friend
class
nsToolkitProfileService
;
private
:
~
nsToolkitProfile
(
)
=
default
;
nsToolkitProfile
(
const
nsACString
&
aName
nsIFile
*
aRootDir
nsIFile
*
aLocalDir
bool
aFromDB
const
nsACString
&
aStoreID
bool
aShowProfileSelector
)
;
nsresult
RemoveInternal
(
bool
aRemoveFiles
bool
aInBackground
)
;
friend
class
nsToolkitProfileLock
;
nsCString
mName
;
nsCOMPtr
<
nsIFile
>
mRootDir
;
nsCOMPtr
<
nsIFile
>
mLocalDir
;
nsCString
mStoreID
;
bool
mShowProfileSelector
;
nsIProfileLock
*
mLock
;
uint32_t
mIndex
;
nsCString
mSection
;
}
;
class
nsToolkitProfileLock
final
:
public
nsIProfileLock
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPROFILELOCK
nsresult
Init
(
nsToolkitProfile
*
aProfile
nsIProfileUnlocker
*
*
aUnlocker
)
;
nsresult
Init
(
nsIFile
*
aDirectory
nsIFile
*
aLocalDirectory
nsIProfileUnlocker
*
*
aUnlocker
)
;
nsToolkitProfileLock
(
)
=
default
;
private
:
~
nsToolkitProfileLock
(
)
;
RefPtr
<
nsToolkitProfile
>
mProfile
;
nsCOMPtr
<
nsIFile
>
mDirectory
;
nsCOMPtr
<
nsIFile
>
mLocalDirectory
;
nsProfileLock
mLock
;
}
;
class
nsToolkitProfileService
final
:
public
nsIToolkitProfileService
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSITOOLKITPROFILESERVICE
nsresult
SelectStartupProfile
(
int
*
aArgc
char
*
aArgv
[
]
bool
aIsResetting
nsIFile
*
*
aRootDir
nsIFile
*
*
aLocalDir
nsIToolkitProfile
*
*
aProfile
bool
*
aDidCreate
bool
*
aWasDefaultSelection
)
;
nsresult
CreateResetProfile
(
nsIToolkitProfile
*
*
aNewProfile
)
;
nsresult
ApplyResetProfile
(
nsIToolkitProfile
*
aOldProfile
)
;
void
CompleteStartup
(
)
;
private
:
friend
class
nsToolkitProfile
;
friend
already_AddRefed
<
nsToolkitProfileService
>
NS_GetToolkitProfileService
(
)
;
nsToolkitProfileService
(
)
;
~
nsToolkitProfileService
(
)
;
nsresult
Init
(
)
;
nsresult
CreateTimesInternal
(
nsIFile
*
profileDir
)
;
void
GetProfileByDir
(
nsIFile
*
aRootDir
nsIFile
*
aLocalDir
nsIToolkitProfile
*
*
aResult
)
;
nsresult
GetProfileByStoreID
(
const
nsACString
&
aStoreID
nsIToolkitProfile
*
*
aResult
)
;
nsresult
GetProfileDescriptor
(
nsIFile
*
aRootDir
nsACString
&
aDescriptor
bool
*
aIsRelative
)
;
nsresult
GetProfileDescriptor
(
nsIToolkitProfile
*
aProfile
nsACString
&
aDescriptor
bool
*
aIsRelative
)
;
bool
IsProfileForCurrentInstall
(
nsIToolkitProfile
*
aProfile
)
;
void
ClearProfileFromOtherInstalls
(
nsIToolkitProfile
*
aProfile
)
;
nsresult
MaybeMakeDefaultDedicatedProfile
(
nsIToolkitProfile
*
aProfile
bool
*
aResult
)
;
bool
IsSnapEnvironment
(
)
;
bool
UseLegacyProfiles
(
)
;
nsresult
CreateDefaultProfile
(
nsIToolkitProfile
*
*
aResult
)
;
void
SetNormalDefault
(
nsIToolkitProfile
*
aProfile
)
;
nsresult
GetLocalDirFromRootDir
(
nsIFile
*
aRootDir
nsIFile
*
*
aResult
)
;
nsTArray
<
nsCString
>
GetKnownInstalls
(
)
;
bool
mStartupProfileSelected
;
mozilla
:
:
LinkedList
<
RefPtr
<
nsToolkitProfile
>
>
mProfiles
;
nsCOMPtr
<
nsIToolkitProfile
>
mCurrent
;
nsCOMPtr
<
nsIToolkitProfile
>
mGroupProfile
;
nsCOMPtr
<
nsIToolkitProfile
>
mDedicatedProfile
;
nsCOMPtr
<
nsIToolkitProfile
>
mNormalDefault
;
nsCOMPtr
<
nsIToolkitProfile
>
mDevEditionDefault
;
nsCOMPtr
<
nsIFile
>
mAppData
;
nsCOMPtr
<
nsIFile
>
mTempData
;
nsCOMPtr
<
nsIFile
>
mProfileDBFile
;
nsCOMPtr
<
nsIFile
>
mInstallDBFile
;
nsINIParser
mProfileDB
;
nsCString
mInstallSection
;
nsCString
mLegacyInstallSection
;
bool
mStartWithLast
;
bool
mIsFirstRun
;
bool
mUseDevEditionProfile
;
const
bool
mUseDedicatedProfile
;
nsString
mStartupReason
;
nsCString
mStartupFileVersion
;
bool
mMaybeLockProfile
;
nsCString
mUpdateChannel
;
bool
mProfileDBExists
;
int64_t
mProfileDBFileSize
;
PRTime
mProfileDBModifiedTime
;
static
nsToolkitProfileService
*
gService
;
class
ProfileEnumerator
final
:
public
nsSimpleEnumerator
{
public
:
NS_DECL_NSISIMPLEENUMERATOR
const
nsID
&
DefaultInterface
(
)
override
{
return
NS_GET_IID
(
nsIToolkitProfile
)
;
}
explicit
ProfileEnumerator
(
nsToolkitProfile
*
first
)
{
mCurrent
=
first
;
}
private
:
RefPtr
<
nsToolkitProfile
>
mCurrent
;
}
;
}
;
already_AddRefed
<
nsToolkitProfileService
>
NS_GetToolkitProfileService
(
)
;
#
endif
