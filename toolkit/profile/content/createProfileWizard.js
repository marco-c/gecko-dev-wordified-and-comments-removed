const
C
=
Cc
;
const
I
=
Ci
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
ToolkitProfileService
=
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
;
var
gProfileService
;
var
gProfileManagerBundle
;
var
gDefaultProfileParent
;
var
gProfileRoot
;
var
gProfileDisplay
;
function
initWizard
(
)
{
try
{
gProfileService
=
C
[
ToolkitProfileService
]
.
getService
(
I
.
nsIToolkitProfileService
)
;
gProfileManagerBundle
=
document
.
getElementById
(
"
bundle_profileManager
"
)
;
gDefaultProfileParent
=
Services
.
dirsvc
.
get
(
"
DefProfRt
"
I
.
nsIFile
)
;
gProfileDisplay
=
document
.
getElementById
(
"
profileDisplay
"
)
.
firstChild
;
document
.
addEventListener
(
"
wizardfinish
"
onFinish
)
;
document
.
getElementById
(
"
explanation
"
)
.
addEventListener
(
"
pageshow
"
enableNextButton
)
;
document
.
getElementById
(
"
createProfile
"
)
.
addEventListener
(
"
pageshow
"
initSecondWizardPage
)
;
setDisplayToDefaultFolder
(
)
;
}
catch
(
e
)
{
window
.
close
(
)
;
throw
e
;
}
}
function
initSecondWizardPage
(
)
{
var
profileName
=
document
.
getElementById
(
"
profileName
"
)
;
profileName
.
select
(
)
;
profileName
.
focus
(
)
;
checkCurrentInput
(
profileName
.
value
)
;
}
const
kSaltTable
=
[
"
a
"
"
b
"
"
c
"
"
d
"
"
e
"
"
f
"
"
g
"
"
h
"
"
i
"
"
j
"
"
k
"
"
l
"
"
m
"
"
n
"
"
o
"
"
p
"
"
q
"
"
r
"
"
s
"
"
t
"
"
u
"
"
v
"
"
w
"
"
x
"
"
y
"
"
z
"
"
1
"
"
2
"
"
3
"
"
4
"
"
5
"
"
6
"
"
7
"
"
8
"
"
9
"
"
0
"
]
;
var
kSaltString
=
"
"
;
for
(
var
i
=
0
;
i
<
8
;
+
+
i
)
{
kSaltString
+
=
kSaltTable
[
Math
.
floor
(
Math
.
random
(
)
*
kSaltTable
.
length
)
]
;
}
function
saltName
(
aName
)
{
return
kSaltString
+
"
.
"
+
aName
;
}
function
setDisplayToDefaultFolder
(
)
{
var
defaultProfileDir
=
gDefaultProfileParent
.
clone
(
)
;
defaultProfileDir
.
append
(
saltName
(
document
.
getElementById
(
"
profileName
"
)
.
value
)
)
;
gProfileRoot
=
defaultProfileDir
;
document
.
getElementById
(
"
useDefault
"
)
.
disabled
=
true
;
}
function
updateProfileDisplay
(
)
{
gProfileDisplay
.
data
=
gProfileRoot
.
path
;
}
function
chooseProfileFolder
(
)
{
var
newProfileRoot
;
var
dirChooser
=
C
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
I
.
nsIFilePicker
)
;
dirChooser
.
init
(
window
.
browsingContext
gProfileManagerBundle
.
getString
(
"
chooseFolder
"
)
I
.
nsIFilePicker
.
modeGetFolder
)
;
dirChooser
.
appendFilters
(
I
.
nsIFilePicker
.
filterAll
)
;
dirChooser
.
displayDirectory
=
gDefaultProfileParent
;
dirChooser
.
open
(
(
)
=
>
{
newProfileRoot
=
dirChooser
.
file
;
document
.
getElementById
(
"
useDefault
"
)
.
disabled
=
newProfileRoot
.
parent
.
equals
(
gDefaultProfileParent
)
;
gProfileRoot
=
newProfileRoot
;
updateProfileDisplay
(
)
;
}
)
;
}
function
checkCurrentInput
(
currentInput
)
{
let
wizard
=
document
.
querySelector
(
"
wizard
"
)
;
var
finishButton
=
wizard
.
getButton
(
"
finish
"
)
;
var
finishText
=
document
.
getElementById
(
"
finishText
"
)
;
var
canAdvance
;
var
errorMessage
=
checkProfileName
(
currentInput
)
;
if
(
!
errorMessage
)
{
finishText
.
className
=
"
"
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
finishText
.
firstChild
.
data
=
gProfileManagerBundle
.
getString
(
"
profileFinishTextMac
"
)
;
}
else
{
finishText
.
firstChild
.
data
=
gProfileManagerBundle
.
getString
(
"
profileFinishText
"
)
;
}
canAdvance
=
true
;
}
else
{
finishText
.
className
=
"
error
"
;
finishText
.
firstChild
.
data
=
errorMessage
;
canAdvance
=
false
;
}
wizard
.
canAdvance
=
canAdvance
;
finishButton
.
disabled
=
!
canAdvance
;
updateProfileDisplay
(
)
;
return
canAdvance
;
}
function
updateProfileName
(
aNewName
)
{
if
(
checkCurrentInput
(
aNewName
)
)
{
gProfileRoot
.
leafName
=
saltName
(
aNewName
)
;
updateProfileDisplay
(
)
;
}
}
function
checkProfileName
(
profileNameToCheck
)
{
if
(
!
/
\
S
/
.
test
(
profileNameToCheck
)
)
{
return
gProfileManagerBundle
.
getString
(
"
profileNameEmpty
"
)
;
}
if
(
/
(
[
\
\
*
:
?
<
>
|
\
/
\
"
]
)
/
.
test
(
profileNameToCheck
)
)
{
return
gProfileManagerBundle
.
getFormattedString
(
"
invalidChar
"
[
RegExp
.
1
]
)
;
}
if
(
profileExists
(
profileNameToCheck
)
)
{
return
gProfileManagerBundle
.
getString
(
"
profileExists
"
)
;
}
return
"
"
;
}
function
profileExists
(
aName
)
{
for
(
let
profile
of
gProfileService
.
profiles
)
{
if
(
profile
.
name
.
toLowerCase
(
)
=
=
aName
.
toLowerCase
(
)
)
{
return
true
;
}
}
return
false
;
}
function
enableNextButton
(
)
{
document
.
querySelector
(
"
wizard
"
)
.
canAdvance
=
true
;
}
function
onFinish
(
event
)
{
var
profileName
=
document
.
getElementById
(
"
profileName
"
)
.
value
;
var
profile
;
try
{
profile
=
gProfileService
.
createProfile
(
gProfileRoot
profileName
)
;
}
catch
(
e
)
{
var
profileCreationFailed
=
gProfileManagerBundle
.
getString
(
"
profileCreationFailed
"
)
;
var
profileCreationFailedTitle
=
gProfileManagerBundle
.
getString
(
"
profileCreationFailedTitle
"
)
;
Services
.
prompt
.
alert
(
window
profileCreationFailedTitle
profileCreationFailed
+
"
\
n
"
+
e
)
;
event
.
preventDefault
(
)
;
return
;
}
if
(
window
.
arguments
&
&
window
.
arguments
[
1
]
)
{
window
.
arguments
[
1
]
.
CreateProfile
(
profile
)
;
}
else
{
var
profileLock
=
profile
.
lock
(
null
)
;
var
dialogParams
=
window
.
arguments
[
0
]
.
QueryInterface
(
I
.
nsIDialogParamBlock
)
;
dialogParams
.
objects
.
insertElementAt
(
profileLock
0
)
;
}
}
