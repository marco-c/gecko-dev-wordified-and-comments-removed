#
ifndef
mozilla_recordreplay_SpinLock_h
#
define
mozilla_recordreplay_SpinLock_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
<
sched
.
h
>
namespace
mozilla
{
namespace
recordreplay
{
class
SpinLock
{
public
:
inline
void
Lock
(
)
;
inline
void
Unlock
(
)
;
private
:
Atomic
<
bool
SequentiallyConsistent
Behavior
:
:
DontPreserve
>
mLocked
;
}
;
class
ReadWriteSpinLock
{
public
:
inline
void
ReadLock
(
)
;
inline
void
ReadUnlock
(
)
;
inline
void
WriteLock
(
)
;
inline
void
WriteUnlock
(
)
;
private
:
SpinLock
mLock
;
int32_t
mReaders
;
}
;
struct
MOZ_RAII
AutoSpinLock
{
explicit
AutoSpinLock
(
SpinLock
&
aLock
)
:
mLock
(
aLock
)
{
mLock
.
Lock
(
)
;
}
~
AutoSpinLock
(
)
{
mLock
.
Unlock
(
)
;
}
private
:
SpinLock
&
mLock
;
}
;
struct
AutoReadSpinLock
{
explicit
AutoReadSpinLock
(
ReadWriteSpinLock
&
aLock
)
:
mLock
(
aLock
)
{
mLock
.
ReadLock
(
)
;
}
~
AutoReadSpinLock
(
)
{
mLock
.
ReadUnlock
(
)
;
}
private
:
ReadWriteSpinLock
&
mLock
;
}
;
struct
AutoWriteSpinLock
{
explicit
AutoWriteSpinLock
(
ReadWriteSpinLock
&
aLock
)
:
mLock
(
aLock
)
{
mLock
.
WriteLock
(
)
;
}
~
AutoWriteSpinLock
(
)
{
mLock
.
WriteUnlock
(
)
;
}
private
:
ReadWriteSpinLock
&
mLock
;
}
;
static
inline
void
ThreadYield
(
)
{
sched_yield
(
)
;
}
inline
void
SpinLock
:
:
Lock
(
)
{
while
(
mLocked
.
exchange
(
true
)
)
{
ThreadYield
(
)
;
}
}
inline
void
SpinLock
:
:
Unlock
(
)
{
DebugOnly
<
bool
>
rv
=
mLocked
.
exchange
(
false
)
;
MOZ_ASSERT
(
rv
)
;
}
inline
void
ReadWriteSpinLock
:
:
ReadLock
(
)
{
while
(
true
)
{
AutoSpinLock
ex
(
mLock
)
;
if
(
mReaders
!
=
-
1
)
{
mReaders
+
+
;
return
;
}
}
}
inline
void
ReadWriteSpinLock
:
:
ReadUnlock
(
)
{
AutoSpinLock
ex
(
mLock
)
;
MOZ_ASSERT
(
mReaders
>
0
)
;
mReaders
-
-
;
}
inline
void
ReadWriteSpinLock
:
:
WriteLock
(
)
{
while
(
true
)
{
AutoSpinLock
ex
(
mLock
)
;
if
(
mReaders
=
=
0
)
{
mReaders
=
-
1
;
return
;
}
}
}
inline
void
ReadWriteSpinLock
:
:
WriteUnlock
(
)
{
AutoSpinLock
ex
(
mLock
)
;
MOZ_ASSERT
(
mReaders
=
=
-
1
)
;
mReaders
=
0
;
}
}
}
#
endif
