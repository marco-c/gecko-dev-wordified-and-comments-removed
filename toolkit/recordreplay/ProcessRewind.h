#
ifndef
mozilla_recordreplay_ProcessRewind_h
#
define
mozilla_recordreplay_ProcessRewind_h
#
include
"
mozilla
/
RecordReplay
.
h
"
#
include
<
functional
>
namespace
mozilla
{
namespace
recordreplay
{
struct
CheckpointId
{
size_t
mNormal
;
static
const
size_t
Invalid
=
0
;
static
const
size_t
First
=
1
;
size_t
mTemporary
;
explicit
CheckpointId
(
size_t
aNormal
=
Invalid
size_t
aTemporary
=
0
)
:
mNormal
(
aNormal
)
mTemporary
(
aTemporary
)
{
}
inline
bool
operator
=
=
(
const
CheckpointId
&
o
)
const
{
return
mNormal
=
=
o
.
mNormal
&
&
mTemporary
=
=
o
.
mTemporary
;
}
inline
bool
operator
!
=
(
const
CheckpointId
&
o
)
const
{
return
mNormal
!
=
o
.
mNormal
|
|
mTemporary
!
=
o
.
mTemporary
;
}
CheckpointId
NextCheckpoint
(
bool
aTemporary
)
const
{
return
CheckpointId
(
aTemporary
?
mNormal
:
mNormal
+
1
aTemporary
?
mTemporary
+
1
:
0
)
;
}
}
;
void
InitializeRewindState
(
)
;
void
SetSaveCheckpoint
(
size_t
aCheckpoint
bool
aSave
)
;
void
PauseMainThreadAndInvokeCallback
(
const
std
:
:
function
<
void
(
)
>
&
aCallback
)
;
bool
MainThreadShouldPause
(
)
;
void
PauseMainThreadAndServiceCallbacks
(
)
;
bool
HasSavedCheckpoint
(
)
;
CheckpointId
GetLastSavedCheckpoint
(
)
;
CheckpointId
GetLastSavedCheckpointPriorTo
(
const
CheckpointId
&
aCheckpoint
)
;
void
RestoreCheckpointAndResume
(
const
CheckpointId
&
aCheckpoint
)
;
void
ResumeExecution
(
)
;
void
DivergeFromRecording
(
)
;
void
DisallowUnhandledDivergeFromRecording
(
)
;
void
EnsureNotDivergedFromRecording
(
)
;
void
SetIsActiveChild
(
bool
aActive
)
;
bool
IsActiveChild
(
)
;
bool
NewCheckpoint
(
bool
aTemporary
)
;
}
}
#
endif
