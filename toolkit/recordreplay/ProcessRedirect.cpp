#
include
"
ProcessRedirect
.
h
"
#
include
"
InfallibleVector
.
h
"
#
include
"
ExternalCall
.
h
"
#
include
"
ipc
/
ChildInternal
.
h
"
#
include
"
ipc
/
ParentInternal
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
<
dlfcn
.
h
>
#
include
<
string
.
h
>
namespace
mozilla
{
namespace
recordreplay
{
static
bool
CallPreambleHook
(
PreambleFn
aPreamble
size_t
aCallId
CallArguments
*
aArguments
)
{
PreambleResult
result
=
aPreamble
(
aArguments
)
;
switch
(
result
)
{
case
PreambleResult
:
:
Veto
:
return
true
;
case
PreambleResult
:
:
IgnoreRedirect
:
RecordReplayInvokeCall
(
OriginalFunction
(
aCallId
)
aArguments
)
;
return
true
;
case
PreambleResult
:
:
PassThrough
:
{
AutoEnsurePassThroughThreadEvents
pt
;
RecordReplayInvokeCall
(
OriginalFunction
(
aCallId
)
aArguments
)
;
return
true
;
}
case
PreambleResult
:
:
Redirect
:
return
false
;
}
Unreachable
(
)
;
}
extern
"
C
"
{
__attribute__
(
(
used
)
)
int
RecordReplayInterceptCall
(
int
aCallId
CallArguments
*
aArguments
)
{
Redirection
&
redirection
=
GetRedirection
(
aCallId
)
;
if
(
redirection
.
mPreamble
)
{
if
(
CallPreambleHook
(
redirection
.
mPreamble
aCallId
aArguments
)
)
{
return
0
;
}
}
Thread
*
thread
=
Thread
:
:
Current
(
)
;
Maybe
<
RecordingEventSection
>
res
;
res
.
emplace
(
thread
)
;
if
(
!
res
.
ref
(
)
.
CanAccessEvents
(
)
)
{
if
(
!
thread
|
|
thread
-
>
PassThroughEvents
(
)
)
{
aArguments
-
>
Rval
<
uint8_t
*
>
(
)
=
redirection
.
mOriginalFunction
;
return
1
;
}
MOZ_RELEASE_ASSERT
(
thread
-
>
HasDivergedFromRecording
(
)
)
;
if
(
redirection
.
mExternalPreamble
)
{
if
(
CallPreambleHook
(
redirection
.
mExternalPreamble
aCallId
aArguments
)
)
{
return
0
;
}
}
if
(
redirection
.
mExternalCall
)
{
if
(
OnExternalCall
(
aCallId
aArguments
true
)
)
{
return
0
;
}
}
if
(
child
:
:
CurrentRepaintCannotFail
(
)
)
{
child
:
:
ReportFatalError
(
"
Could
not
perform
external
call
:
%
s
\
n
"
redirection
.
mName
)
;
}
EnsureNotDivergedFromRecording
(
Some
(
aCallId
)
)
;
Unreachable
(
)
;
}
if
(
IsRecording
(
)
)
{
res
.
reset
(
)
;
thread
-
>
SetPassThrough
(
true
)
;
RecordReplayInvokeCall
(
redirection
.
mOriginalFunction
aArguments
)
;
thread
-
>
SetPassThrough
(
false
)
;
res
.
emplace
(
thread
)
;
}
ErrorType
error
=
SaveError
(
)
;
thread
-
>
Events
(
)
.
RecordOrReplayThreadEvent
(
CallIdToThreadEvent
(
aCallId
)
)
;
if
(
redirection
.
mSaveOutput
)
{
redirection
.
mSaveOutput
(
thread
-
>
Events
(
)
aArguments
&
error
)
;
}
if
(
IsReplaying
(
)
&
&
redirection
.
mExternalCall
)
{
(
void
)
OnExternalCall
(
aCallId
aArguments
false
)
;
}
RestoreError
(
error
)
;
return
0
;
}
extern
size_t
RecordReplayRedirectCall
(
.
.
.
)
;
__asm
(
"
_RecordReplayRedirectCall
:
"
"
pushq
%
rbp
;
"
"
movq
%
rsp
%
rbp
;
"
"
subq
624
%
rsp
;
"
"
movq
%
rdi
0
(
%
rsp
)
;
"
"
movq
%
rsi
8
(
%
rsp
)
;
"
"
movq
%
rdx
16
(
%
rsp
)
;
"
"
movq
%
rcx
24
(
%
rsp
)
;
"
"
movq
%
r8
32
(
%
rsp
)
;
"
"
movq
%
r9
40
(
%
rsp
)
;
"
"
movsd
%
xmm0
48
(
%
rsp
)
;
"
"
movsd
%
xmm1
56
(
%
rsp
)
;
"
"
movsd
%
xmm2
64
(
%
rsp
)
;
"
"
movq
64
%
rsi
;
"
"
jmp
_RecordReplayRedirectCall_Loop
;
"
"
_RecordReplayRedirectCall_Loop
:
"
"
subq
1
%
rsi
;
"
"
movq
640
(
%
rsp
%
rsi
8
)
%
rdx
;
"
"
movq
%
rdx
104
(
%
rsp
%
rsi
8
)
;
"
"
testq
%
rsi
%
rsi
;
"
"
jne
_RecordReplayRedirectCall_Loop
;
"
"
movq
%
rax
%
rdi
;
"
"
movq
%
rsp
%
rsi
;
"
"
call
_RecordReplayInterceptCall
;
"
"
testq
%
rax
%
rax
;
"
"
je
RecordReplayRedirectCall_done
;
"
"
movq
0
(
%
rsp
)
%
rdi
;
"
"
movq
8
(
%
rsp
)
%
rsi
;
"
"
movq
16
(
%
rsp
)
%
rdx
;
"
"
movq
24
(
%
rsp
)
%
rcx
;
"
"
movq
32
(
%
rsp
)
%
r8
;
"
"
movq
40
(
%
rsp
)
%
r9
;
"
"
movsd
48
(
%
rsp
)
%
xmm0
;
"
"
movsd
56
(
%
rsp
)
%
xmm1
;
"
"
movsd
64
(
%
rsp
)
%
xmm2
;
"
"
movq
72
(
%
rsp
)
%
rax
;
"
"
addq
624
%
rsp
;
"
"
popq
%
rbp
;
"
"
jmpq
*
%
rax
;
"
"
RecordReplayRedirectCall_done
:
"
"
movq
72
(
%
rsp
)
%
rax
;
"
"
movq
80
(
%
rsp
)
%
rdx
;
"
"
movsd
88
(
%
rsp
)
%
xmm0
;
"
"
movsd
96
(
%
rsp
)
%
xmm1
;
"
"
addq
624
%
rsp
;
"
"
popq
%
rbp
;
"
"
ret
;
"
)
;
extern
void
RecordReplayInvokeCallRaw
(
CallArguments
*
aArguments
void
*
aFnPtr
)
;
__asm
(
"
_RecordReplayInvokeCallRaw
:
"
"
pushq
%
rbp
;
"
"
movq
%
rsp
%
rbp
;
"
"
movq
%
rsi
%
rax
;
"
"
push
%
rdi
;
"
"
push
%
rdi
;
"
"
movq
64
%
rsi
;
"
"
jmp
_RecordReplayInvokeCallRaw_Loop
;
"
"
_RecordReplayInvokeCallRaw_Loop
:
"
"
subq
1
%
rsi
;
"
"
movq
104
(
%
rdi
%
rsi
8
)
%
rdx
;
"
"
push
%
rdx
;
"
"
testq
%
rsi
%
rsi
;
"
"
jne
_RecordReplayInvokeCallRaw_Loop
;
"
"
movq
8
(
%
rdi
)
%
rsi
;
"
"
movq
16
(
%
rdi
)
%
rdx
;
"
"
movq
24
(
%
rdi
)
%
rcx
;
"
"
movq
32
(
%
rdi
)
%
r8
;
"
"
movq
40
(
%
rdi
)
%
r9
;
"
"
movsd
48
(
%
rdi
)
%
xmm0
;
"
"
movsd
56
(
%
rdi
)
%
xmm1
;
"
"
movsd
64
(
%
rdi
)
%
xmm2
;
"
"
movq
0
(
%
rdi
)
%
rdi
;
"
"
callq
*
%
rax
;
"
"
addq
512
%
rsp
;
"
"
pop
%
rdi
;
"
"
pop
%
rdi
;
"
"
movq
%
rax
72
(
%
rdi
)
;
"
"
movq
%
rdx
80
(
%
rdi
)
;
"
"
movsd
%
xmm0
88
(
%
rdi
)
;
"
"
movsd
%
xmm1
96
(
%
rdi
)
;
"
"
popq
%
rbp
;
"
"
ret
;
"
)
;
}
MOZ_NEVER_INLINE
void
RecordReplayInvokeCall
(
void
*
aFunction
CallArguments
*
aArguments
)
{
RecordReplayInvokeCallRaw
(
aArguments
aFunction
)
;
}
uint8_t
*
GenerateRedirectStub
(
Assembler
&
aAssembler
size_t
aCallId
bool
aPreserveCallerSaveRegisters
)
{
uint8_t
*
newFunction
=
aAssembler
.
Current
(
)
;
if
(
aPreserveCallerSaveRegisters
)
{
static
Register
registers
[
]
=
{
Register
:
:
RDI
Register
:
:
RDI
Register
:
:
RSI
Register
:
:
RDX
Register
:
:
RCX
Register
:
:
R8
Register
:
:
R9
Register
:
:
R10
Register
:
:
R11
}
;
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
registers
)
;
i
+
+
)
{
aAssembler
.
MoveRegisterToRax
(
registers
[
i
]
)
;
aAssembler
.
PushRax
(
)
;
}
aAssembler
.
MoveImmediateToRax
(
(
void
*
)
aCallId
)
;
uint8_t
*
after
=
aAssembler
.
Current
(
)
+
Assembler
:
:
PushImmediateBytes
+
Assembler
:
:
JumpBytes
;
aAssembler
.
PushImmediate
(
after
)
;
aAssembler
.
Jump
(
BitwiseCast
<
void
*
>
(
RecordReplayRedirectCall
)
)
;
for
(
int
i
=
ArrayLength
(
registers
)
-
1
;
i
>
=
0
;
i
-
-
)
{
aAssembler
.
PopRegister
(
registers
[
i
]
)
;
}
aAssembler
.
Return
(
)
;
}
else
{
aAssembler
.
MoveImmediateToRax
(
(
void
*
)
aCallId
)
;
aAssembler
.
Jump
(
BitwiseCast
<
void
*
>
(
RecordReplayRedirectCall
)
)
;
}
return
newFunction
;
}
void
*
OriginalFunction
(
const
char
*
aName
)
{
size_t
numRedirections
=
NumRedirections
(
)
;
for
(
size_t
i
=
0
;
i
<
numRedirections
;
i
+
+
)
{
const
Redirection
&
redirection
=
GetRedirection
(
i
)
;
if
(
!
strcmp
(
aName
redirection
.
mName
)
)
{
return
redirection
.
mOriginalFunction
;
}
}
MOZ_CRASH
(
"
OriginalFunction
:
unknown
redirection
"
)
;
}
Atomic
<
size_t
SequentiallyConsistent
Behavior
:
:
DontPreserve
>
gMemoryLeakBytes
;
void
*
BindFunctionArgument
(
void
*
aFunction
void
*
aArgument
size_t
aArgumentPosition
Assembler
&
aAssembler
)
{
void
*
res
=
aAssembler
.
Current
(
)
;
aAssembler
.
MoveImmediateToRax
(
aArgument
)
;
switch
(
aArgumentPosition
)
{
case
1
:
aAssembler
.
MoveRaxToRegister
(
Register
:
:
RSI
)
;
break
;
case
2
:
aAssembler
.
MoveRaxToRegister
(
Register
:
:
RDX
)
;
break
;
case
3
:
aAssembler
.
MoveRaxToRegister
(
Register
:
:
RCX
)
;
break
;
default
:
MOZ_CRASH
(
)
;
}
aAssembler
.
Jump
(
aFunction
)
;
return
res
;
}
}
}
