#
ifndef
mozilla_recordreplay_ProcessRedirect_h
#
define
mozilla_recordreplay_ProcessRedirect_h
#
include
"
Assembler
.
h
"
#
include
"
Callback
.
h
"
#
include
"
CallFunction
.
h
"
#
include
"
ProcessRecordReplay
.
h
"
#
include
"
ProcessRewind
.
h
"
#
include
"
Thread
.
h
"
#
include
"
ipc
/
Channel
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
<
errno
.
h
>
namespace
mozilla
{
namespace
recordreplay
{
struct
Redirection
{
const
char
*
mName
;
uint8_t
*
mBaseFunction
;
uint8_t
*
mNewFunction
;
uint8_t
*
mOriginalFunction
;
}
;
extern
Redirection
gRedirections
[
]
;
void
EarlyInitializeRedirections
(
)
;
bool
InitializeRedirections
(
)
;
typedef
ssize_t
ErrorType
;
static
inline
ErrorType
SaveError
(
)
{
return
errno
;
}
static
inline
void
RestoreError
(
ErrorType
aError
)
{
errno
=
aError
;
}
#
define
DEFAULTABI
DefineAllCallFunctions
(
DEFAULTABI
)
static
inline
void
*
OriginalFunction
(
size_t
aCallId
)
{
return
gRedirections
[
aCallId
]
.
mOriginalFunction
;
}
#
define
TokenPaste
(
aFirst
aSecond
)
aFirst
#
#
aSecond
#
define
OriginalCallABI
(
aName
aReturnType
aABI
.
.
.
)
\
TokenPaste
(
CallFunction
aABI
)
<
aReturnType
>
\
(
OriginalFunction
(
CallEvent_
#
#
aName
)
#
#
__VA_ARGS__
)
#
define
OriginalCall
(
aName
aReturnType
.
.
.
)
\
OriginalCallABI
(
aName
aReturnType
DEFAULTABI
#
#
__VA_ARGS__
)
struct
AutoRecordReplayFunctionVoid
{
Thread
*
mThread
;
ErrorType
mError
;
protected
:
size_t
mCallId
;
const
char
*
mCallName
;
public
:
AutoRecordReplayFunctionVoid
(
size_t
aCallId
const
char
*
aCallName
)
:
mThread
(
AreThreadEventsPassedThrough
(
)
?
nullptr
:
Thread
:
:
Current
(
)
)
mError
(
0
)
mCallId
(
aCallId
)
mCallName
(
aCallName
)
{
if
(
mThread
)
{
EnsureNotDivergedFromRecording
(
)
;
MOZ_ASSERT
(
!
AreThreadEventsDisallowed
(
)
)
;
mThread
-
>
SetPassThrough
(
true
)
;
}
}
~
AutoRecordReplayFunctionVoid
(
)
{
if
(
mThread
)
{
RestoreError
(
mError
)
;
}
}
inline
void
StartRecordReplay
(
)
{
MOZ_ASSERT
(
mThread
)
;
mError
=
SaveError
(
)
;
mThread
-
>
SetPassThrough
(
false
)
;
RecordReplayAssert
(
"
%
s
"
mCallName
)
;
ThreadEvent
ev
=
(
ThreadEvent
)
(
(
uint32_t
)
ThreadEvent
:
:
CallStart
+
mCallId
)
;
mThread
-
>
Events
(
)
.
RecordOrReplayThreadEvent
(
ev
)
;
}
}
;
template
<
typename
ReturnType
>
struct
AutoRecordReplayFunction
:
AutoRecordReplayFunctionVoid
{
ReturnType
mRval
;
AutoRecordReplayFunction
(
size_t
aCallId
const
char
*
aCallName
)
:
AutoRecordReplayFunctionVoid
(
aCallId
aCallName
)
{
}
}
;
#
define
RecordReplayFunctionABI
(
aName
aReturnType
aABI
.
.
.
)
\
AutoRecordReplayFunction
<
aReturnType
>
rrf
(
CallEvent_
#
#
aName
#
aName
)
;
\
if
(
!
rrf
.
mThread
)
{
\
return
OriginalCallABI
(
aName
aReturnType
aABI
#
#
__VA_ARGS__
)
;
\
}
\
if
(
IsRecording
(
)
)
{
\
rrf
.
mRval
=
OriginalCallABI
(
aName
aReturnType
aABI
#
#
__VA_ARGS__
)
;
\
}
\
rrf
.
StartRecordReplay
(
)
;
\
Stream
&
events
=
rrf
.
mThread
-
>
Events
(
)
;
\
(
void
)
events
;
\
aReturnType
&
rval
=
rrf
.
mRval
#
define
RecordReplayFunction
(
aName
aReturnType
.
.
.
)
\
RecordReplayFunctionABI
(
aName
aReturnType
DEFAULTABI
#
#
__VA_ARGS__
)
#
define
RecordReplayFunctionVoidABI
(
aName
aABI
.
.
.
)
\
AutoRecordReplayFunctionVoid
rrf
(
CallEvent_
#
#
aName
#
aName
)
;
\
if
(
!
rrf
.
mThread
)
{
\
OriginalCallABI
(
aName
void
aABI
#
#
__VA_ARGS__
)
;
\
return
;
\
}
\
if
(
IsRecording
(
)
)
{
\
OriginalCallABI
(
aName
void
aABI
#
#
__VA_ARGS__
)
;
\
}
\
rrf
.
StartRecordReplay
(
)
;
\
Stream
&
events
=
rrf
.
mThread
-
>
Events
(
)
;
\
(
void
)
events
#
define
RecordReplayFunctionVoid
(
aName
.
.
.
)
\
RecordReplayFunctionVoidABI
(
aName
DEFAULTABI
#
#
__VA_ARGS__
)
#
define
RRFunctionTypes0
(
aName
aRT
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
)
\
{
\
RecordReplayFunction
(
aName
aRT
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes1
(
aName
aRT
aAT0
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes2
(
aName
aRT
aAT0
aAT1
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes3
(
aName
aRT
aAT0
aAT1
aAT2
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes4
(
aName
aRT
aAT0
aAT1
aAT2
aAT3
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
a3
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes5
(
aName
aRT
aAT0
aAT1
aAT2
aAT3
\
aAT4
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
aAT4
a4
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
a3
a4
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes6
(
aName
aRT
aAT0
aAT1
aAT2
aAT3
\
aAT4
aAT5
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
aAT4
a4
\
aAT5
a5
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
a3
a4
a5
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes7
(
aName
aRT
aAT0
aAT1
aAT2
aAT3
\
aAT4
aAT5
aAT6
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
aAT4
a4
\
aAT5
a5
aAT6
a6
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
a3
a4
a5
a6
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes8
(
aName
aRT
aAT0
aAT1
aAT2
aAT3
\
aAT4
aAT5
aAT6
aAT7
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
aAT4
a4
\
aAT5
a5
aAT6
a6
aAT7
a7
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
a3
a4
a5
a6
a7
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes9
(
aName
aRT
aAT0
aAT1
aAT2
aAT3
\
aAT4
aAT5
aAT6
aAT7
aAT8
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
aAT4
a4
\
aAT5
a5
aAT6
a6
aAT7
a7
aAT8
a8
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
a3
a4
a5
a6
a7
a8
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypes10
(
aName
aRT
aAT0
aAT1
aAT2
aAT3
\
aAT4
aAT5
aAT6
aAT7
aAT8
aAT9
)
\
static
aRT
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
aAT4
a4
\
aAT5
a5
aAT6
a6
aAT7
a7
aAT8
a8
aAT9
a9
)
\
{
\
RecordReplayFunction
(
aName
aRT
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
return
rval
;
\
}
#
define
RRFunctionTypesVoid1
(
aName
aAT0
)
\
static
void
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
)
\
{
\
RecordReplayFunctionVoid
(
aName
a0
)
;
\
}
#
define
RRFunctionTypesVoid2
(
aName
aAT0
aAT1
)
\
static
void
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
)
\
{
\
RecordReplayFunctionVoid
(
aName
a0
a1
)
;
\
}
#
define
RRFunctionTypesVoid3
(
aName
aAT0
aAT1
aAT2
)
\
static
void
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
)
\
{
\
RecordReplayFunctionVoid
(
aName
a0
a1
a2
)
;
\
}
#
define
RRFunctionTypesVoid4
(
aName
aAT0
aAT1
aAT2
aAT3
)
\
static
void
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
)
\
{
\
RecordReplayFunctionVoid
(
aName
a0
a1
a2
a3
)
;
\
}
#
define
RRFunctionTypesVoid5
(
aName
aAT0
aAT1
aAT2
aAT3
aAT4
)
\
static
void
DEFAULTABI
\
RR_
#
#
aName
(
aAT0
a0
aAT1
a1
aAT2
a2
aAT3
a3
aAT4
a4
)
\
{
\
RecordReplayFunctionVoid
(
aName
a0
a1
a2
a3
a4
)
;
\
}
#
define
RRFunction0
(
aName
)
\
RRFunctionTypes0
(
aName
size_t
)
#
define
RRFunction1
(
aName
)
\
RRFunctionTypes1
(
aName
size_t
size_t
)
#
define
RRFunction2
(
aName
)
\
RRFunctionTypes2
(
aName
size_t
size_t
size_t
)
#
define
RRFunction3
(
aName
)
\
RRFunctionTypes3
(
aName
size_t
size_t
size_t
size_t
)
#
define
RRFunction4
(
aName
)
\
RRFunctionTypes4
(
aName
size_t
size_t
size_t
size_t
size_t
)
#
define
RRFunction5
(
aName
)
\
RRFunctionTypes5
(
aName
size_t
size_t
size_t
size_t
size_t
size_t
)
#
define
RRFunction6
(
aName
)
\
RRFunctionTypes6
(
aName
size_t
size_t
size_t
size_t
size_t
size_t
size_t
)
#
define
RRFunction7
(
aName
)
\
RRFunctionTypes7
(
aName
size_t
size_t
size_t
size_t
size_t
size_t
size_t
size_t
)
#
define
RRFunction8
(
aName
)
\
RRFunctionTypes8
(
aName
size_t
size_t
size_t
size_t
size_t
size_t
size_t
size_t
\
size_t
)
#
define
RRFunction9
(
aName
)
\
RRFunctionTypes9
(
aName
size_t
size_t
size_t
size_t
size_t
size_t
size_t
size_t
\
size_t
size_t
)
#
define
RRFunction10
(
aName
)
\
RRFunctionTypes10
(
aName
size_t
size_t
size_t
size_t
size_t
size_t
size_t
size_t
\
size_t
size_t
size_t
)
#
define
RRFunctionVoid0
(
aName
)
\
static
void
DEFAULTABI
\
RR_
#
#
aName
(
)
\
{
\
RecordReplayFunctionVoid
(
aName
)
;
\
}
#
define
RRFunctionVoid1
(
aName
)
\
RRFunctionTypesVoid1
(
aName
size_t
)
#
define
RRFunctionVoid2
(
aName
)
\
RRFunctionTypesVoid2
(
aName
size_t
size_t
)
#
define
RRFunctionVoid3
(
aName
)
\
RRFunctionTypesVoid3
(
aName
size_t
size_t
size_t
)
#
define
RRFunctionVoid4
(
aName
)
\
RRFunctionTypesVoid4
(
aName
size_t
size_t
size_t
size_t
)
#
define
RRFunctionVoid5
(
aName
)
\
RRFunctionTypesVoid5
(
aName
size_t
size_t
size_t
size_t
size_t
)
#
define
RRFunctionNegError0
(
aName
)
\
static
ssize_t
DEFAULTABI
\
RR_
#
#
aName
(
)
\
{
\
RecordReplayFunction
(
aName
ssize_t
)
;
\
RecordOrReplayHadErrorNegative
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionNegError1
(
aName
)
\
static
ssize_t
DEFAULTABI
\
RR_
#
#
aName
(
size_t
a0
)
\
{
\
RecordReplayFunction
(
aName
ssize_t
a0
)
;
\
RecordOrReplayHadErrorNegative
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionNegError2
(
aName
)
\
static
ssize_t
DEFAULTABI
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
)
\
{
\
RecordReplayFunction
(
aName
ssize_t
a0
a1
)
;
\
RecordOrReplayHadErrorNegative
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionNegError3
(
aName
)
\
static
ssize_t
DEFAULTABI
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
)
\
{
\
RecordReplayFunction
(
aName
ssize_t
a0
a1
a2
)
;
\
RecordOrReplayHadErrorNegative
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionNegError4
(
aName
)
\
static
ssize_t
DEFAULTABI
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
)
\
{
\
RecordReplayFunction
(
aName
ssize_t
a0
a1
a2
a3
)
;
\
RecordOrReplayHadErrorNegative
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionNegError5
(
aName
)
\
static
ssize_t
DEFAULTABI
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
\
size_t
a4
)
\
{
\
RecordReplayFunction
(
aName
ssize_t
a0
a1
a2
a3
a4
)
;
\
RecordOrReplayHadErrorNegative
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionNegError6
(
aName
)
\
static
ssize_t
DEFAULTABI
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
\
size_t
a4
size_t
a5
)
\
{
\
RecordReplayFunction
(
aName
ssize_t
a0
a1
a2
a3
a4
a5
)
;
\
RecordOrReplayHadErrorNegative
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError0
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
)
\
{
\
RecordReplayFunction
(
aName
size_t
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError1
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
size_t
a0
)
\
{
\
RecordReplayFunction
(
aName
size_t
a0
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroErrorABI2
(
aName
aABI
)
\
static
size_t
aABI
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
)
\
{
\
RecordReplayFunctionABI
(
aName
size_t
aABI
a0
a1
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError2
(
aName
)
RRFunctionZeroErrorABI2
(
aName
DEFAULTABI
)
#
define
RRFunctionZeroError3
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
)
\
{
\
RecordReplayFunction
(
aName
size_t
a0
a1
a2
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError4
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
)
\
{
\
RecordReplayFunction
(
aName
size_t
a0
a1
a2
a3
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError5
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
\
size_t
a4
)
\
{
\
RecordReplayFunction
(
aName
size_t
a0
a1
a2
a3
a4
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError6
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
\
size_t
a4
size_t
a5
)
\
{
\
RecordReplayFunction
(
aName
size_t
a0
a1
a2
a3
a4
a5
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError7
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
\
size_t
a4
size_t
a5
size_t
a6
)
\
{
\
RecordReplayFunction
(
aName
size_t
a0
a1
a2
a3
a4
a5
a6
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RRFunctionZeroError8
(
aName
)
\
static
size_t
__stdcall
\
RR_
#
#
aName
(
size_t
a0
size_t
a1
size_t
a2
size_t
a3
\
size_t
a4
size_t
a5
size_t
a6
size_t
a7
)
\
{
\
RecordReplayFunction
(
aName
size_t
a0
a1
a2
a3
a4
a5
a6
a7
)
;
\
RecordOrReplayHadErrorZero
(
rrf
)
;
\
return
rval
;
\
}
#
define
RecordReplayOrderedFunction
(
aName
aReturnType
aFailureRval
aFormals
.
.
.
)
\
static
aReturnType
DEFAULTABI
\
RR_
#
#
aName
aFormals
\
{
\
BeginOrderedEvent
(
)
;
/
*
This
is
a
noop
if
!
mThread
*
/
\
RecordReplayFunction
(
aName
aReturnType
__VA_ARGS__
)
;
\
EndOrderedEvent
(
)
;
\
events
.
RecordOrReplayValue
(
&
rval
)
;
\
if
(
rval
=
=
aFailureRval
)
{
\
events
.
RecordOrReplayValue
(
&
rrf
.
mError
)
;
\
}
\
return
rval
;
\
}
struct
CallbackWrapperData
{
void
*
mFunction
;
void
*
mData
;
template
<
typename
FunctionType
>
CallbackWrapperData
(
FunctionType
aFunction
void
*
aData
)
:
mFunction
(
BitwiseCast
<
void
*
>
(
aFunction
)
)
mData
(
aData
)
{
}
}
;
template
<
typename
FunctionType
>
struct
AutoRecordReplayCallback
{
FunctionType
mFunction
;
AutoRecordReplayCallback
(
void
*
*
aDataArgument
size_t
aCallbackId
)
:
mFunction
(
nullptr
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
if
(
IsRecording
(
)
)
{
CallbackWrapperData
*
wrapperData
=
(
CallbackWrapperData
*
)
*
aDataArgument
;
mFunction
=
(
FunctionType
)
wrapperData
-
>
mFunction
;
*
aDataArgument
=
wrapperData
-
>
mData
;
BeginCallback
(
aCallbackId
)
;
}
SaveOrRestoreCallbackData
(
(
void
*
*
)
&
mFunction
)
;
SaveOrRestoreCallbackData
(
aDataArgument
)
;
}
~
AutoRecordReplayCallback
(
)
{
if
(
IsRecording
(
)
)
{
EndCallback
(
)
;
}
}
}
;
#
define
RecordReplayCallback
(
aFunctionType
aDataArgument
)
\
AutoRecordReplayCallback
<
aFunctionType
>
rrc
(
aDataArgument
CallbackEvent_
#
#
aFunctionType
)
template
<
typename
T
>
static
inline
bool
RecordOrReplayHadErrorZero
(
AutoRecordReplayFunction
<
T
>
&
aRrf
)
{
aRrf
.
mThread
-
>
Events
(
)
.
RecordOrReplayValue
(
&
aRrf
.
mRval
)
;
if
(
aRrf
.
mRval
=
=
0
)
{
aRrf
.
mThread
-
>
Events
(
)
.
RecordOrReplayValue
(
&
aRrf
.
mError
)
;
return
true
;
}
return
false
;
}
template
<
typename
T
>
static
inline
bool
RecordOrReplayHadErrorNegative
(
AutoRecordReplayFunction
<
T
>
&
aRrf
)
{
aRrf
.
mThread
-
>
Events
(
)
.
RecordOrReplayValue
(
&
aRrf
.
mRval
)
;
if
(
aRrf
.
mRval
<
0
)
{
aRrf
.
mThread
-
>
Events
(
)
.
RecordOrReplayValue
(
&
aRrf
.
mError
)
;
return
true
;
}
return
false
;
}
extern
Atomic
<
size_t
SequentiallyConsistent
Behavior
:
:
DontPreserve
>
gMemoryLeakBytes
;
template
<
typename
T
>
static
inline
T
*
NewLeakyArray
(
size_t
aSize
)
{
gMemoryLeakBytes
+
=
aSize
*
sizeof
(
T
)
;
return
new
T
[
aSize
]
;
}
void
*
BindFunctionArgument
(
void
*
aFunction
void
*
aArgument
size_t
aArgumentPosition
Assembler
&
aAssembler
)
;
}
}
#
endif
