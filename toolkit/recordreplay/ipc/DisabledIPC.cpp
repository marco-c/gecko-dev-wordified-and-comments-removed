#
include
"
ChildIPC
.
h
"
#
include
"
ParentIPC
.
h
"
namespace
mozilla
{
namespace
recordreplay
{
namespace
child
{
void
InitRecordingOrReplayingProcess
(
base
:
:
ProcessId
aParentPid
int
*
aArgc
char
*
*
*
aArgv
)
{
MOZ_CRASH
(
)
;
}
char
*
PrefsShmemContents
(
size_t
aPrefsLen
)
{
MOZ_CRASH
(
)
;
}
base
:
:
ProcessId
MiddlemanProcessId
(
)
{
MOZ_CRASH
(
)
;
}
base
:
:
ProcessId
ParentProcessId
(
)
{
MOZ_CRASH
(
)
;
}
void
SetVsyncObserver
(
VsyncObserver
*
aObserver
)
{
MOZ_CRASH
(
)
;
}
void
NotifyVsyncObserver
(
)
{
MOZ_CRASH
(
)
;
}
void
NotifyPaint
(
)
{
MOZ_CRASH
(
)
;
}
void
NotifyPaintStart
(
)
{
MOZ_CRASH
(
)
;
}
void
NotifyPaintComplete
(
)
{
MOZ_CRASH
(
)
;
}
void
WaitForPaintToComplete
(
)
{
MOZ_CRASH
(
)
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
DrawTargetForRemoteDrawing
(
LayoutDeviceIntSize
aSize
)
{
MOZ_CRASH
(
)
;
}
void
NotifyFlushedRecording
(
)
{
MOZ_CRASH
(
)
;
}
void
NotifyAlwaysMarkMajorCheckpoints
(
)
{
MOZ_CRASH
(
)
;
}
void
ReportFatalError
(
const
char
*
aFormat
.
.
.
)
{
MOZ_CRASH
(
)
;
}
void
BeginIdleTime
(
)
{
MOZ_CRASH
(
)
;
}
void
EndIdleTime
(
)
{
MOZ_CRASH
(
)
;
}
}
namespace
parent
{
void
InitializeUIProcess
(
int
aArgc
char
*
*
aArgv
)
{
}
const
char
*
SaveAllRecordingsDirectory
(
)
{
return
nullptr
;
}
void
SaveRecording
(
const
nsCString
&
aFilename
)
{
MOZ_CRASH
(
)
;
}
ipc
:
:
MessageChannel
*
ChannelToUIProcess
(
)
{
MOZ_CRASH
(
)
;
}
void
InitializeMiddleman
(
int
aArgc
char
*
aArgv
[
]
base
:
:
ProcessId
aParentPid
)
{
MOZ_CRASH
(
)
;
}
void
NotePrefsShmemContents
(
char
*
aPrefs
size_t
aPrefsLen
)
{
MOZ_CRASH
(
)
;
}
}
}
}
