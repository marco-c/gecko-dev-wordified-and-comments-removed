#
include
"
ChildIPC
.
h
"
#
include
"
ParentIPC
.
h
"
namespace
mozilla
{
namespace
recordreplay
{
void
NewCheckpoint
(
)
{
MOZ_CRASH
(
)
;
}
namespace
child
{
void
InitRecordingOrReplayingProcess
(
int
*
aArgc
char
*
*
*
aArgv
)
{
}
char
*
PrefsShmemContents
(
size_t
aPrefsLen
)
{
MOZ_CRASH
(
)
;
}
base
:
:
ProcessId
MiddlemanProcessId
(
)
{
MOZ_CRASH
(
)
;
}
base
:
:
ProcessId
ParentProcessId
(
)
{
MOZ_CRASH
(
)
;
}
void
SetVsyncObserver
(
VsyncObserver
*
aObserver
)
{
MOZ_CRASH
(
)
;
}
bool
OnVsync
(
)
{
MOZ_CRASH
(
)
;
}
void
NotifyPaintStart
(
)
{
MOZ_CRASH
(
)
;
}
void
NotifyPaintComplete
(
)
{
MOZ_CRASH
(
)
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
DrawTargetForRemoteDrawing
(
LayoutDeviceIntSize
aSize
)
{
MOZ_CRASH
(
)
;
}
}
namespace
parent
{
void
InitializeUIProcess
(
int
aArgc
char
*
*
aArgv
)
{
}
const
char
*
SaveAllRecordingsDirectory
(
)
{
return
nullptr
;
}
void
SaveRecording
(
const
ipc
:
:
FileDescriptor
&
aFile
)
{
MOZ_CRASH
(
)
;
}
ipc
:
:
MessageChannel
*
ChannelToUIProcess
(
)
{
MOZ_CRASH
(
)
;
}
void
InitializeMiddleman
(
int
aArgc
char
*
aArgv
[
]
base
:
:
ProcessId
aParentPid
const
base
:
:
SharedMemoryHandle
&
aPrefsHandle
const
ipc
:
:
FileDescriptor
&
aPrefMapHandle
)
{
MOZ_CRASH
(
)
;
}
void
NotePrefsShmemContents
(
char
*
aPrefs
size_t
aPrefsLen
)
{
MOZ_CRASH
(
)
;
}
void
OpenChannel
(
base
:
:
ProcessId
aMiddlemanPid
uint32_t
aChannelId
ipc
:
:
FileDescriptor
*
aConnection
)
{
MOZ_CRASH
(
)
;
}
void
GetArgumentsForChildProcess
(
base
:
:
ProcessId
aMiddlemanPid
uint32_t
aChannelId
const
char
*
aRecordingFile
bool
aRecording
std
:
:
vector
<
std
:
:
string
>
&
aExtraArgs
)
{
MOZ_CRASH
(
)
;
}
base
:
:
ProcessId
ParentProcessId
(
)
{
MOZ_CRASH
(
)
;
}
bool
IsMiddlemanWithRecordingChild
(
)
{
return
false
;
}
bool
DebuggerRunsInMiddleman
(
)
{
MOZ_CRASH
(
)
;
}
}
}
}
