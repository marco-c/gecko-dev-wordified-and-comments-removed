#
ifndef
mozilla_recordreplay_ChildInternal_h
#
define
mozilla_recordreplay_ChildInternal_h
#
include
"
Channel
.
h
"
#
include
"
ChildIPC
.
h
"
#
include
"
JSControl
.
h
"
#
include
"
ExternalCall
.
h
"
#
include
"
Monitor
.
h
"
namespace
mozilla
{
namespace
recordreplay
{
namespace
child
{
void
SetupRecordReplayChannel
(
int
aArgc
char
*
aArgv
[
]
)
;
struct
MinidumpInfo
{
int
mExceptionType
;
int
mCode
;
int
mSubcode
;
mach_port_t
mThread
;
mach_port_t
mTask
;
MinidumpInfo
(
int
aExceptionType
int
aCode
int
aSubcode
mach_port_t
aThread
mach_port_t
aTask
)
:
mExceptionType
(
aExceptionType
)
mCode
(
aCode
)
mSubcode
(
aSubcode
)
mThread
(
aThread
)
mTask
(
aTask
)
{
}
}
;
void
ReportCrash
(
const
MinidumpInfo
&
aMinidumpInfo
void
*
aFaultingAddress
)
;
void
ReportFatalError
(
const
char
*
aFormat
.
.
.
)
;
void
ReportUnhandledDivergence
(
)
;
size_t
GetId
(
)
;
extern
Monitor
*
gMonitor
;
bool
DebuggerRunsInMiddleman
(
)
;
void
ManifestFinished
(
const
js
:
:
CharBuffer
&
aResponse
)
;
void
SendExternalCallRequest
(
ExternalCallId
aId
const
char
*
aInputData
size_t
aInputSize
InfallibleVector
<
char
>
*
aOutputData
)
;
void
SendExternalCallOutput
(
ExternalCallId
aId
const
char
*
aOutputData
size_t
aOutputSize
)
;
bool
CurrentRepaintCannotFail
(
)
;
bool
Repaint
(
nsACString
&
aData
)
;
void
RegisterFork
(
size_t
aForkId
)
;
void
SendRecordingData
(
size_t
aStart
const
uint8_t
*
aData
size_t
aSize
)
;
void
AddPendingRecordingData
(
)
;
}
}
}
#
endif
