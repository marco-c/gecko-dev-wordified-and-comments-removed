#
ifndef
mozilla_recordreplay_Monitor_h
#
define
mozilla_recordreplay_Monitor_h
#
include
"
mozilla
/
PlatformConditionVariable
.
h
"
namespace
mozilla
{
namespace
recordreplay
{
class
Monitor
:
public
detail
:
:
MutexImpl
{
public
:
Monitor
(
)
:
detail
:
:
MutexImpl
(
Behavior
:
:
DontPreserve
)
{
}
void
Lock
(
)
{
detail
:
:
MutexImpl
:
:
lock
(
)
;
}
void
Unlock
(
)
{
detail
:
:
MutexImpl
:
:
unlock
(
)
;
}
void
Wait
(
)
{
mCondVar
.
wait
(
*
this
)
;
}
void
Notify
(
)
{
mCondVar
.
notify_one
(
)
;
}
void
NotifyAll
(
)
{
mCondVar
.
notify_all
(
)
;
}
void
WaitUntil
(
TimeStamp
aTime
)
{
AutoEnsurePassThroughThreadEvents
pt
;
mCondVar
.
wait_for
(
*
this
aTime
-
TimeStamp
:
:
Now
(
)
)
;
}
private
:
detail
:
:
ConditionVariableImpl
mCondVar
;
}
;
struct
MOZ_RAII
MonitorAutoLock
{
explicit
MonitorAutoLock
(
Monitor
&
aMonitor
)
:
mMonitor
(
aMonitor
)
{
mMonitor
.
Lock
(
)
;
}
~
MonitorAutoLock
(
)
{
mMonitor
.
Unlock
(
)
;
}
private
:
Monitor
&
mMonitor
;
}
;
struct
MOZ_RAII
MonitorAutoUnlock
{
explicit
MonitorAutoUnlock
(
Monitor
&
aMonitor
)
:
mMonitor
(
aMonitor
)
{
mMonitor
.
Unlock
(
)
;
}
~
MonitorAutoUnlock
(
)
{
mMonitor
.
Lock
(
)
;
}
private
:
Monitor
&
mMonitor
;
}
;
}
}
#
endif
