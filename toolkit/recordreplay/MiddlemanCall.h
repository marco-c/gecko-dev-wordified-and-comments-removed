#
ifndef
mozilla_recordreplay_MiddlemanCall_h
#
define
mozilla_recordreplay_MiddlemanCall_h
#
include
"
BufferStream
.
h
"
#
include
"
ProcessRedirect
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
namespace
recordreplay
{
enum
class
MiddlemanCallPhase
{
ReplayPreface
ReplayInput
MiddlemanInput
MiddlemanOutput
ReplayOutput
MiddlemanRelease
}
;
struct
MiddlemanCall
{
size_t
mId
;
size_t
mCallId
;
CallRegisterArguments
mArguments
;
InfallibleVector
<
char
>
mPreface
;
InfallibleVector
<
char
>
mInput
;
InfallibleVector
<
char
>
mOutput
;
bool
mSent
;
Maybe
<
const
void
*
>
mRecordingValue
;
Maybe
<
const
void
*
>
mMiddlemanValue
;
MiddlemanCall
(
)
:
mId
(
0
)
mCallId
(
0
)
mSent
(
false
)
{
}
void
EncodeInput
(
BufferStream
&
aStream
)
const
;
void
DecodeInput
(
BufferStream
&
aStream
)
;
void
EncodeOutput
(
BufferStream
&
aStream
)
const
;
void
DecodeOutput
(
BufferStream
&
aStream
)
;
void
SetRecordingValue
(
const
void
*
aValue
)
{
MOZ_RELEASE_ASSERT
(
mRecordingValue
.
isNothing
(
)
)
;
mRecordingValue
.
emplace
(
aValue
)
;
}
void
SetMiddlemanValue
(
const
void
*
aValue
)
{
MOZ_RELEASE_ASSERT
(
mMiddlemanValue
.
isNothing
(
)
)
;
mMiddlemanValue
.
emplace
(
aValue
)
;
}
}
;
struct
MiddlemanCallContext
{
MiddlemanCall
*
mCall
;
CallArguments
*
mArguments
;
MiddlemanCallPhase
mPhase
;
bool
mFailed
;
InfallibleVector
<
MiddlemanCall
*
>
*
mDependentCalls
;
Maybe
<
BufferStream
>
mPrefaceStream
;
Maybe
<
BufferStream
>
mInputStream
;
Maybe
<
BufferStream
>
mOutputStream
;
bool
mReplayOutputIsOld
;
MiddlemanCallContext
(
MiddlemanCall
*
aCall
CallArguments
*
aArguments
MiddlemanCallPhase
aPhase
)
:
mCall
(
aCall
)
mArguments
(
aArguments
)
mPhase
(
aPhase
)
mFailed
(
false
)
mDependentCalls
(
nullptr
)
mReplayOutputIsOld
(
false
)
{
switch
(
mPhase
)
{
case
MiddlemanCallPhase
:
:
ReplayPreface
:
mPrefaceStream
.
emplace
(
&
mCall
-
>
mPreface
)
;
break
;
case
MiddlemanCallPhase
:
:
ReplayInput
:
mPrefaceStream
.
emplace
(
mCall
-
>
mPreface
.
begin
(
)
mCall
-
>
mPreface
.
length
(
)
)
;
mInputStream
.
emplace
(
&
mCall
-
>
mInput
)
;
break
;
case
MiddlemanCallPhase
:
:
MiddlemanInput
:
mPrefaceStream
.
emplace
(
mCall
-
>
mPreface
.
begin
(
)
mCall
-
>
mPreface
.
length
(
)
)
;
mInputStream
.
emplace
(
mCall
-
>
mInput
.
begin
(
)
mCall
-
>
mInput
.
length
(
)
)
;
break
;
case
MiddlemanCallPhase
:
:
MiddlemanOutput
:
mOutputStream
.
emplace
(
&
mCall
-
>
mOutput
)
;
break
;
case
MiddlemanCallPhase
:
:
ReplayOutput
:
mOutputStream
.
emplace
(
mCall
-
>
mOutput
.
begin
(
)
mCall
-
>
mOutput
.
length
(
)
)
;
break
;
case
MiddlemanCallPhase
:
:
MiddlemanRelease
:
break
;
}
}
void
MarkAsFailed
(
)
{
MOZ_RELEASE_ASSERT
(
mPhase
=
=
MiddlemanCallPhase
:
:
ReplayPreface
|
|
mPhase
=
=
MiddlemanCallPhase
:
:
ReplayInput
)
;
mFailed
=
true
;
}
void
WriteInputBytes
(
const
void
*
aBuffer
size_t
aSize
)
{
MOZ_RELEASE_ASSERT
(
mPhase
=
=
MiddlemanCallPhase
:
:
ReplayInput
)
;
mInputStream
.
ref
(
)
.
WriteBytes
(
aBuffer
aSize
)
;
}
void
WriteInputScalar
(
size_t
aValue
)
{
MOZ_RELEASE_ASSERT
(
mPhase
=
=
MiddlemanCallPhase
:
:
ReplayInput
)
;
mInputStream
.
ref
(
)
.
WriteScalar
(
aValue
)
;
}
void
ReadInputBytes
(
void
*
aBuffer
size_t
aSize
)
{
MOZ_RELEASE_ASSERT
(
mPhase
=
=
MiddlemanCallPhase
:
:
MiddlemanInput
)
;
mInputStream
.
ref
(
)
.
ReadBytes
(
aBuffer
aSize
)
;
}
size_t
ReadInputScalar
(
)
{
MOZ_RELEASE_ASSERT
(
mPhase
=
=
MiddlemanCallPhase
:
:
MiddlemanInput
)
;
return
mInputStream
.
ref
(
)
.
ReadScalar
(
)
;
}
bool
AccessInput
(
)
{
return
mInputStream
.
isSome
(
)
;
}
void
ReadOrWriteInputBytes
(
void
*
aBuffer
size_t
aSize
)
{
switch
(
mPhase
)
{
case
MiddlemanCallPhase
:
:
ReplayInput
:
WriteInputBytes
(
aBuffer
aSize
)
;
break
;
case
MiddlemanCallPhase
:
:
MiddlemanInput
:
ReadInputBytes
(
aBuffer
aSize
)
;
break
;
default
:
MOZ_CRASH
(
)
;
}
}
bool
AccessPreface
(
)
{
return
mPrefaceStream
.
isSome
(
)
;
}
void
ReadOrWritePrefaceBytes
(
void
*
aBuffer
size_t
aSize
)
{
switch
(
mPhase
)
{
case
MiddlemanCallPhase
:
:
ReplayPreface
:
mPrefaceStream
.
ref
(
)
.
WriteBytes
(
aBuffer
aSize
)
;
break
;
case
MiddlemanCallPhase
:
:
ReplayInput
:
case
MiddlemanCallPhase
:
:
MiddlemanInput
:
mPrefaceStream
.
ref
(
)
.
ReadBytes
(
aBuffer
aSize
)
;
break
;
default
:
MOZ_CRASH
(
)
;
}
}
void
ReadOrWritePrefaceBuffer
(
void
*
*
aBufferPtr
size_t
aSize
)
{
switch
(
mPhase
)
{
case
MiddlemanCallPhase
:
:
ReplayPreface
:
mPrefaceStream
.
ref
(
)
.
WriteBytes
(
*
aBufferPtr
aSize
)
;
break
;
case
MiddlemanCallPhase
:
:
ReplayInput
:
case
MiddlemanCallPhase
:
:
MiddlemanInput
:
*
aBufferPtr
=
AllocateBytes
(
aSize
)
;
mPrefaceStream
.
ref
(
)
.
ReadBytes
(
*
aBufferPtr
aSize
)
;
break
;
default
:
MOZ_CRASH
(
)
;
}
}
bool
AccessOutput
(
)
{
return
mOutputStream
.
isSome
(
)
;
}
void
ReadOrWriteOutputBytes
(
void
*
aBuffer
size_t
aSize
)
{
switch
(
mPhase
)
{
case
MiddlemanCallPhase
:
:
MiddlemanOutput
:
mOutputStream
.
ref
(
)
.
WriteBytes
(
aBuffer
aSize
)
;
break
;
case
MiddlemanCallPhase
:
:
ReplayOutput
:
mOutputStream
.
ref
(
)
.
ReadBytes
(
aBuffer
aSize
)
;
break
;
default
:
MOZ_CRASH
(
)
;
}
}
void
ReadOrWriteOutputBuffer
(
void
*
*
aBuffer
size_t
aSize
)
{
if
(
*
aBuffer
)
{
if
(
mPhase
=
=
MiddlemanCallPhase
:
:
MiddlemanInput
|
|
mReplayOutputIsOld
)
{
*
aBuffer
=
AllocateBytes
(
aSize
)
;
}
if
(
AccessOutput
(
)
)
{
ReadOrWriteOutputBytes
(
*
aBuffer
aSize
)
;
}
}
}
void
*
AllocateBytes
(
size_t
aSize
)
;
}
;
bool
SendCallToMiddleman
(
size_t
aCallId
CallArguments
*
aArguments
bool
aDiverged
)
;
void
ProcessMiddlemanCall
(
const
char
*
aInputData
size_t
aInputSize
InfallibleVector
<
char
>
*
aOutputData
)
;
void
ResetMiddlemanCalls
(
)
;
template
<
size_t
BufferArg
size_t
CountArg
typename
ElemType
=
char
>
static
inline
void
Middleman_Buffer
(
MiddlemanCallContext
&
aCx
)
{
if
(
aCx
.
AccessPreface
(
)
)
{
auto
&
buffer
=
aCx
.
mArguments
-
>
Arg
<
BufferArg
void
*
>
(
)
;
auto
byteSize
=
aCx
.
mArguments
-
>
Arg
<
CountArg
size_t
>
(
)
*
sizeof
(
ElemType
)
;
aCx
.
ReadOrWritePrefaceBuffer
(
&
buffer
byteSize
)
;
}
}
template
<
size_t
BufferArg
size_t
ByteSize
>
static
inline
void
Middleman_BufferFixedSize
(
MiddlemanCallContext
&
aCx
)
{
if
(
aCx
.
AccessPreface
(
)
)
{
auto
&
buffer
=
aCx
.
mArguments
-
>
Arg
<
BufferArg
void
*
>
(
)
;
if
(
buffer
)
{
aCx
.
ReadOrWritePrefaceBuffer
(
&
buffer
ByteSize
)
;
}
}
}
template
<
size_t
StringArg
>
static
inline
void
Middleman_CString
(
MiddlemanCallContext
&
aCx
)
{
if
(
aCx
.
AccessPreface
(
)
)
{
auto
&
buffer
=
aCx
.
mArguments
-
>
Arg
<
StringArg
char
*
>
(
)
;
size_t
len
=
(
aCx
.
mPhase
=
=
MiddlemanCallPhase
:
:
ReplayPreface
)
?
strlen
(
buffer
)
+
1
:
0
;
aCx
.
ReadOrWritePrefaceBytes
(
&
len
sizeof
(
len
)
)
;
aCx
.
ReadOrWritePrefaceBuffer
(
(
void
*
*
)
&
buffer
len
)
;
}
}
template
<
size_t
BufferArg
size_t
CountArg
typename
ElemType
>
static
inline
void
Middleman_WriteBuffer
(
MiddlemanCallContext
&
aCx
)
{
auto
&
buffer
=
aCx
.
mArguments
-
>
Arg
<
BufferArg
void
*
>
(
)
;
auto
count
=
aCx
.
mArguments
-
>
Arg
<
CountArg
size_t
>
(
)
;
aCx
.
ReadOrWriteOutputBuffer
(
&
buffer
count
*
sizeof
(
ElemType
)
)
;
}
template
<
size_t
BufferArg
size_t
ByteSize
>
static
inline
void
Middleman_WriteBufferFixedSize
(
MiddlemanCallContext
&
aCx
)
{
auto
&
buffer
=
aCx
.
mArguments
-
>
Arg
<
BufferArg
void
*
>
(
)
;
aCx
.
ReadOrWriteOutputBuffer
(
&
buffer
ByteSize
)
;
}
template
<
size_t
ByteSize
>
static
inline
void
Middleman_OversizeRval
(
MiddlemanCallContext
&
aCx
)
{
Middleman_WriteBufferFixedSize
<
0
ByteSize
>
(
aCx
)
;
}
template
<
size_t
ByteSize
>
static
inline
void
Middleman_StackArgumentData
(
MiddlemanCallContext
&
aCx
)
{
if
(
aCx
.
AccessPreface
(
)
)
{
auto
stack
=
aCx
.
mArguments
-
>
StackAddress
<
0
>
(
)
;
aCx
.
ReadOrWritePrefaceBytes
(
stack
ByteSize
)
;
}
}
static
inline
void
Middleman_NoOp
(
MiddlemanCallContext
&
aCx
)
{
}
template
<
MiddlemanCallFn
Fn0
MiddlemanCallFn
Fn1
MiddlemanCallFn
Fn2
=
Middleman_NoOp
MiddlemanCallFn
Fn3
=
Middleman_NoOp
MiddlemanCallFn
Fn4
=
Middleman_NoOp
>
static
inline
void
Middleman_Compose
(
MiddlemanCallContext
&
aCx
)
{
Fn0
(
aCx
)
;
Fn1
(
aCx
)
;
Fn2
(
aCx
)
;
Fn3
(
aCx
)
;
Fn4
(
aCx
)
;
}
bool
Middleman_SystemInput
(
MiddlemanCallContext
&
aCx
const
void
*
*
aThingPtr
)
;
void
Middleman_SystemOutput
(
MiddlemanCallContext
&
aCx
const
void
*
*
aOutput
bool
aUpdating
=
false
)
;
}
}
#
endif
