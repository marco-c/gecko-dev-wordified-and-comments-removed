#
ifndef
mozilla_recordreplay_MemorySnapshot_h
#
define
mozilla_recordreplay_MemorySnapshot_h
#
include
"
mozilla
/
Types
.
h
"
#
include
"
ProcessRecordReplay
.
h
"
namespace
mozilla
{
namespace
recordreplay
{
void
CheckFixedMemory
(
void
*
aAddress
size_t
aSize
)
;
void
RestoreWritableFixedMemory
(
void
*
aAddress
size_t
aSize
)
;
void
*
AllocateMemoryTryAddress
(
void
*
aAddress
size_t
aSize
MemoryKind
aKind
)
;
void
RegisterAllocatedMemory
(
void
*
aBaseAddress
size_t
aSize
MemoryKind
aKind
)
;
void
AddInitialUntrackedMemoryRegion
(
uint8_t
*
aBase
size_t
aSize
)
;
void
InitializeMemorySnapshots
(
)
;
void
TakeFirstMemorySnapshot
(
)
;
void
TakeDiffMemorySnapshot
(
)
;
void
RestoreMemoryToLastSavedCheckpoint
(
)
;
void
RestoreMemoryToLastSavedDiffCheckpoint
(
)
;
void
EraseLastSavedDiffMemorySnapshot
(
)
;
void
SetMemoryChangesAllowed
(
bool
aAllowed
)
;
struct
MOZ_RAII
AutoDisallowMemoryChanges
{
AutoDisallowMemoryChanges
(
)
{
SetMemoryChangesAllowed
(
false
)
;
}
~
AutoDisallowMemoryChanges
(
)
{
SetMemoryChangesAllowed
(
true
)
;
}
}
;
bool
HandleDirtyMemoryFault
(
uint8_t
*
aAddress
)
;
void
UnrecoverableSnapshotFailure
(
)
;
void
FixupFreeRegionsAfterRewind
(
)
;
void
SetAllowIntentionalCrashes
(
bool
aAllowed
)
;
void
StartCountdown
(
size_t
aCount
)
;
struct
MOZ_RAII
AutoCountdown
{
explicit
AutoCountdown
(
size_t
aCount
)
;
~
AutoCountdown
(
)
;
}
;
void
InitializeCountdownThread
(
)
;
void
MemoryMove
(
void
*
aDst
const
void
*
aSrc
size_t
aSize
)
;
void
MemoryZero
(
void
*
aDst
size_t
aSize
)
;
}
}
#
endif
