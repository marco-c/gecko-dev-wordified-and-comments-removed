#
include
"
Thread
.
h
"
#
include
"
ipc
/
ChildIPC
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
ChunkAllocator
.
h
"
#
include
"
MemorySnapshot
.
h
"
#
include
"
ProcessRewind
.
h
"
#
include
"
SpinLock
.
h
"
#
include
"
ThreadSnapshot
.
h
"
namespace
mozilla
{
namespace
recordreplay
{
static
MOZ_THREAD_LOCAL
(
Thread
*
)
gTlsThreadKey
;
Monitor
*
Thread
:
:
gMonitor
;
Thread
*
Thread
:
:
Current
(
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
Thread
*
thread
=
gTlsThreadKey
.
get
(
)
;
if
(
!
thread
&
&
IsReplaying
(
)
)
{
WaitForeverNoIdle
(
)
;
}
return
thread
;
}
bool
Thread
:
:
CurrentIsMainThread
(
)
{
Thread
*
thread
=
Current
(
)
;
return
thread
&
&
thread
-
>
IsMainThread
(
)
;
}
void
Thread
:
:
BindToCurrent
(
)
{
MOZ_ASSERT
(
!
mStackBase
)
;
gTlsThreadKey
.
set
(
this
)
;
mNativeId
=
pthread_self
(
)
;
size_t
size
=
pthread_get_stacksize_np
(
mNativeId
)
;
uint8_t
*
base
=
(
uint8_t
*
)
pthread_get_stackaddr_np
(
mNativeId
)
-
size
;
Maybe
<
MonitorAutoLock
>
lock
;
if
(
mId
!
=
MainThreadId
)
{
lock
.
emplace
(
*
gMonitor
)
;
}
mStackBase
=
base
;
mStackSize
=
size
;
if
(
mId
!
=
MainThreadId
)
{
gMonitor
-
>
NotifyAll
(
)
;
}
}
static
Thread
*
gThreads
;
Thread
*
Thread
:
:
GetById
(
size_t
aId
)
{
MOZ_ASSERT
(
aId
)
;
MOZ_ASSERT
(
aId
<
=
MaxThreadId
)
;
return
&
gThreads
[
aId
]
;
}
Thread
*
Thread
:
:
GetByNativeId
(
NativeThreadId
aNativeId
)
{
for
(
size_t
id
=
MainThreadId
;
id
<
=
MaxRecordedThreadId
;
id
+
+
)
{
Thread
*
thread
=
GetById
(
id
)
;
if
(
thread
-
>
mNativeId
=
=
aNativeId
)
{
return
thread
;
}
}
return
nullptr
;
}
Thread
*
Thread
:
:
GetByStackPointer
(
void
*
aSp
)
{
if
(
!
gThreads
)
{
return
nullptr
;
}
for
(
size_t
i
=
MainThreadId
;
i
<
=
MaxThreadId
;
i
+
+
)
{
Thread
*
thread
=
&
gThreads
[
i
]
;
if
(
MemoryContains
(
thread
-
>
mStackBase
thread
-
>
mStackSize
aSp
)
)
{
return
thread
;
}
}
return
nullptr
;
}
void
Thread
:
:
InitializeThreads
(
)
{
gThreads
=
new
Thread
[
MaxThreadId
+
1
]
;
for
(
size_t
i
=
MainThreadId
;
i
<
=
MaxThreadId
;
i
+
+
)
{
Thread
*
thread
=
&
gThreads
[
i
]
;
PodZero
(
thread
)
;
new
(
thread
)
Thread
(
)
;
thread
-
>
mId
=
i
;
if
(
i
<
=
MaxRecordedThreadId
)
{
thread
-
>
mEvents
=
gRecordingFile
-
>
OpenStream
(
StreamName
:
:
Event
i
)
;
}
DirectCreatePipe
(
&
thread
-
>
mNotifyfd
&
thread
-
>
mIdlefd
)
;
}
if
(
!
gTlsThreadKey
.
init
(
)
)
{
MOZ_CRASH
(
)
;
}
}
void
Thread
:
:
WaitUntilInitialized
(
Thread
*
aThread
)
{
MonitorAutoLock
lock
(
*
gMonitor
)
;
while
(
!
aThread
-
>
mStackBase
)
{
gMonitor
-
>
Wait
(
)
;
}
}
void
Thread
:
:
ThreadMain
(
void
*
aArgument
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
Thread
*
thread
=
(
Thread
*
)
aArgument
;
MOZ_ASSERT
(
thread
-
>
mId
>
MainThreadId
)
;
thread
-
>
BindToCurrent
(
)
;
while
(
true
)
{
while
(
true
)
{
{
MonitorAutoLock
lock
(
*
gMonitor
)
;
if
(
thread
-
>
mStart
)
{
break
;
}
}
Wait
(
)
;
}
{
Maybe
<
AutoPassThroughThreadEvents
>
pt
;
if
(
!
thread
-
>
IsRecordedThread
(
)
)
pt
.
emplace
(
)
;
thread
-
>
mStart
(
thread
-
>
mStartArg
)
;
}
MonitorAutoLock
lock
(
*
gMonitor
)
;
thread
-
>
mStart
=
nullptr
;
thread
-
>
mStartArg
=
nullptr
;
gMonitor
-
>
NotifyAll
(
)
;
}
}
void
Thread
:
:
SpawnAllThreads
(
)
{
MOZ_ASSERT
(
AreThreadEventsPassedThrough
(
)
)
;
InitializeThreadSnapshots
(
MaxRecordedThreadId
+
1
)
;
gMonitor
=
new
Monitor
(
)
;
for
(
size_t
i
=
MainThreadId
+
1
;
i
<
=
MaxRecordedThreadId
;
i
+
+
)
{
SpawnThread
(
GetById
(
i
)
)
;
}
}
static
Atomic
<
size_t
SequentiallyConsistent
Behavior
:
:
DontPreserve
>
gNumNonRecordedThreads
;
Thread
*
Thread
:
:
SpawnNonRecordedThread
(
Callback
aStart
void
*
aArgument
)
{
if
(
IsMiddleman
(
)
)
{
DirectSpawnThread
(
aStart
aArgument
)
;
return
nullptr
;
}
size_t
id
=
MaxRecordedThreadId
+
+
+
gNumNonRecordedThreads
;
MOZ_RELEASE_ASSERT
(
id
<
=
MaxThreadId
)
;
Thread
*
thread
=
GetById
(
id
)
;
thread
-
>
mStart
=
aStart
;
thread
-
>
mStartArg
=
aArgument
;
SpawnThread
(
thread
)
;
return
thread
;
}
void
Thread
:
:
SpawnThread
(
Thread
*
aThread
)
{
DirectSpawnThread
(
ThreadMain
aThread
)
;
WaitUntilInitialized
(
aThread
)
;
}
NativeThreadId
Thread
:
:
StartThread
(
Callback
aStart
void
*
aArgument
bool
aNeedsJoin
)
{
Thread
*
thread
=
Thread
:
:
Current
(
)
;
RecordingEventSection
res
(
thread
)
;
if
(
!
res
.
CanAccessEvents
(
)
)
{
return
0
;
}
MonitorAutoLock
lock
(
*
gMonitor
)
;
size_t
id
=
0
;
if
(
IsRecording
(
)
)
{
for
(
id
=
MainThreadId
+
1
;
id
<
=
MaxRecordedThreadId
;
id
+
+
)
{
Thread
*
targetThread
=
Thread
:
:
GetById
(
id
)
;
if
(
!
targetThread
-
>
mStart
&
&
!
targetThread
-
>
mNeedsJoin
)
{
break
;
}
}
if
(
id
>
=
MaxRecordedThreadId
)
{
child
:
:
ReportFatalError
(
Nothing
(
)
"
Too
many
threads
"
)
;
}
MOZ_RELEASE_ASSERT
(
id
<
=
MaxRecordedThreadId
)
;
}
thread
-
>
Events
(
)
.
RecordOrReplayThreadEvent
(
ThreadEvent
:
:
CreateThread
)
;
thread
-
>
Events
(
)
.
RecordOrReplayScalar
(
&
id
)
;
Thread
*
targetThread
=
GetById
(
id
)
;
while
(
targetThread
-
>
mStart
)
{
MOZ_RELEASE_ASSERT
(
IsReplaying
(
)
)
;
gMonitor
-
>
Wait
(
)
;
}
targetThread
-
>
mStart
=
aStart
;
targetThread
-
>
mStartArg
=
aArgument
;
targetThread
-
>
mNeedsJoin
=
aNeedsJoin
;
Notify
(
id
)
;
return
targetThread
-
>
mNativeId
;
}
void
Thread
:
:
Join
(
)
{
MOZ_ASSERT
(
!
AreThreadEventsPassedThrough
(
)
)
;
EnsureNotDivergedFromRecording
(
)
;
while
(
true
)
{
MonitorAutoLock
lock
(
*
gMonitor
)
;
if
(
!
mStart
)
{
MOZ_RELEASE_ASSERT
(
mNeedsJoin
)
;
mNeedsJoin
=
false
;
break
;
}
gMonitor
-
>
Wait
(
)
;
}
}
extern
"
C
"
{
MOZ_EXPORT
void
RecordReplayInterface_InternalBeginPassThroughThreadEvents
(
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
if
(
!
gInitializationFailureMessage
)
{
Thread
:
:
Current
(
)
-
>
SetPassThrough
(
true
)
;
}
}
MOZ_EXPORT
void
RecordReplayInterface_InternalEndPassThroughThreadEvents
(
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
if
(
!
gInitializationFailureMessage
)
{
Thread
:
:
Current
(
)
-
>
SetPassThrough
(
false
)
;
}
}
MOZ_EXPORT
bool
RecordReplayInterface_InternalAreThreadEventsPassedThrough
(
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
if
(
gInitializationFailureMessage
)
{
return
true
;
}
Thread
*
thread
=
Thread
:
:
Current
(
)
;
return
!
thread
|
|
thread
-
>
PassThroughEvents
(
)
;
}
MOZ_EXPORT
void
RecordReplayInterface_InternalBeginDisallowThreadEvents
(
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
Thread
:
:
Current
(
)
-
>
BeginDisallowEvents
(
)
;
}
MOZ_EXPORT
void
RecordReplayInterface_InternalEndDisallowThreadEvents
(
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
Thread
:
:
Current
(
)
-
>
EndDisallowEvents
(
)
;
}
MOZ_EXPORT
bool
RecordReplayInterface_InternalAreThreadEventsDisallowed
(
)
{
MOZ_ASSERT
(
IsRecordingOrReplaying
(
)
)
;
Thread
*
thread
=
Thread
:
:
Current
(
)
;
return
thread
&
&
thread
-
>
AreEventsDisallowed
(
)
;
}
}
void
Thread
:
:
WaitForIdleThreads
(
)
{
MOZ_RELEASE_ASSERT
(
CurrentIsMainThread
(
)
)
;
MonitorAutoLock
lock
(
*
gMonitor
)
;
for
(
size_t
i
=
MainThreadId
+
1
;
i
<
=
MaxRecordedThreadId
;
i
+
+
)
{
Thread
*
thread
=
GetById
(
i
)
;
thread
-
>
mShouldIdle
=
true
;
thread
-
>
mUnrecordedWaitNotified
=
false
;
}
while
(
true
)
{
bool
done
=
true
;
for
(
size_t
i
=
MainThreadId
+
1
;
i
<
=
MaxRecordedThreadId
;
i
+
+
)
{
Thread
*
thread
=
GetById
(
i
)
;
if
(
!
thread
-
>
mIdle
)
{
done
=
false
;
if
(
thread
-
>
mUnrecordedWaitCallback
&
&
!
thread
-
>
mUnrecordedWaitNotified
)
{
thread
-
>
mUnrecordedWaitNotified
=
true
;
std
:
:
function
<
void
(
)
>
callback
=
thread
-
>
mUnrecordedWaitCallback
;
{
MonitorAutoUnlock
unlock
(
*
gMonitor
)
;
AutoPassThroughThreadEvents
pt
;
callback
(
)
;
}
done
=
true
;
i
=
MainThreadId
;
}
}
}
if
(
done
)
{
break
;
}
MonitorAutoUnlock
unlock
(
*
gMonitor
)
;
WaitNoIdle
(
)
;
}
}
void
Thread
:
:
ResumeSingleIdleThread
(
size_t
aId
)
{
GetById
(
aId
)
-
>
mShouldIdle
=
false
;
Notify
(
aId
)
;
}
void
Thread
:
:
ResumeIdleThreads
(
)
{
MOZ_RELEASE_ASSERT
(
CurrentIsMainThread
(
)
)
;
for
(
size_t
i
=
MainThreadId
+
1
;
i
<
=
MaxRecordedThreadId
;
i
+
+
)
{
ResumeSingleIdleThread
(
i
)
;
}
}
void
Thread
:
:
NotifyUnrecordedWait
(
const
std
:
:
function
<
void
(
)
>
&
aNotifyCallback
)
{
if
(
IsMainThread
(
)
)
{
return
;
}
MonitorAutoLock
lock
(
*
gMonitor
)
;
if
(
mUnrecordedWaitCallback
)
{
mUnrecordedWaitNotified
=
false
;
}
else
{
MOZ_RELEASE_ASSERT
(
!
mUnrecordedWaitNotified
)
;
}
mUnrecordedWaitCallback
=
aNotifyCallback
;
if
(
mShouldIdle
)
{
Notify
(
MainThreadId
)
;
}
}
bool
Thread
:
:
MaybeWaitForCheckpointSave
(
const
std
:
:
function
<
void
(
)
>
&
aReleaseCallback
)
{
MOZ_RELEASE_ASSERT
(
!
PassThroughEvents
(
)
)
;
if
(
IsMainThread
(
)
)
{
return
false
;
}
MonitorAutoLock
lock
(
*
gMonitor
)
;
if
(
!
mShouldIdle
)
{
return
false
;
}
aReleaseCallback
(
)
;
while
(
mShouldIdle
)
{
MonitorAutoUnlock
unlock
(
*
gMonitor
)
;
Wait
(
)
;
}
return
true
;
}
void
Thread
:
:
WaitNoIdle
(
)
{
Thread
*
thread
=
Current
(
)
;
uint8_t
data
=
0
;
size_t
read
=
DirectRead
(
thread
-
>
mIdlefd
&
data
1
)
;
MOZ_RELEASE_ASSERT
(
read
=
=
1
)
;
}
void
Thread
:
:
Wait
(
)
{
Thread
*
thread
=
Current
(
)
;
MOZ_ASSERT
(
!
thread
-
>
mIdle
)
;
MOZ_ASSERT
(
thread
-
>
IsRecordedThread
(
)
&
&
!
thread
-
>
PassThroughEvents
(
)
)
;
if
(
thread
-
>
IsMainThread
(
)
)
{
WaitNoIdle
(
)
;
return
;
}
thread
-
>
SetPassThrough
(
true
)
;
int
stackSeparator
=
0
;
if
(
!
SaveThreadState
(
thread
-
>
Id
(
)
&
stackSeparator
)
)
{
Notify
(
MainThreadId
)
;
}
thread
-
>
mIdle
=
true
;
if
(
thread
-
>
mShouldIdle
)
{
Notify
(
MainThreadId
)
;
}
do
{
WaitNoIdle
(
)
;
if
(
ShouldRestoreThreadStack
(
thread
-
>
Id
(
)
)
)
{
RestoreThreadStack
(
thread
-
>
Id
(
)
)
;
Unreachable
(
)
;
}
}
while
(
thread
-
>
mShouldIdle
)
;
thread
-
>
mIdle
=
false
;
thread
-
>
SetPassThrough
(
false
)
;
}
void
Thread
:
:
WaitForever
(
)
{
while
(
true
)
{
Wait
(
)
;
}
Unreachable
(
)
;
}
void
Thread
:
:
WaitForeverNoIdle
(
)
{
FileHandle
writeFd
readFd
;
DirectCreatePipe
(
&
writeFd
&
readFd
)
;
while
(
true
)
{
uint8_t
data
;
DirectRead
(
readFd
&
data
1
)
;
}
}
void
Thread
:
:
Notify
(
size_t
aId
)
{
uint8_t
data
=
0
;
DirectWrite
(
GetById
(
aId
)
-
>
mNotifyfd
&
data
1
)
;
}
}
}
