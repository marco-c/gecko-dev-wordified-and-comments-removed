#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
<
SystemConfiguration
/
SystemConfiguration
.
h
>
#
include
"
nsISystemProxySettings
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
ProxyUtils
.
h
"
class
nsOSXSystemProxySettings
final
:
public
nsISystemProxySettings
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSISYSTEMPROXYSETTINGS
nsOSXSystemProxySettings
(
)
;
nsresult
Init
(
)
;
void
ProxyHasChanged
(
)
;
bool
IsAutoconfigEnabled
(
)
const
;
nsresult
GetAutoconfigURL
(
nsAutoCString
&
aResult
)
const
;
nsresult
FindSCProxyPort
(
const
nsACString
&
aScheme
nsACString
&
aResultHost
int32_t
&
aResultPort
bool
&
aResultSocksProxy
)
;
bool
IsInExceptionList
(
const
nsACString
&
aHost
)
const
;
private
:
~
nsOSXSystemProxySettings
(
)
;
SCDynamicStoreContext
mContext
;
SCDynamicStoreRef
mSystemDynamicStore
;
NSDictionary
*
mProxyDict
;
struct
SchemeMapping
{
const
char
*
mScheme
;
CFStringRef
mEnabled
;
CFStringRef
mHost
;
CFStringRef
mPort
;
bool
mIsSocksProxy
;
}
;
static
const
SchemeMapping
gSchemeMappingList
[
]
;
}
;
NS_IMPL_ISUPPORTS
(
nsOSXSystemProxySettings
nsISystemProxySettings
)
NS_IMETHODIMP
nsOSXSystemProxySettings
:
:
GetMainThreadOnly
(
bool
*
aMainThreadOnly
)
{
*
aMainThreadOnly
=
true
;
return
NS_OK
;
}
const
nsOSXSystemProxySettings
:
:
SchemeMapping
nsOSXSystemProxySettings
:
:
gSchemeMappingList
[
]
=
{
{
"
http
"
kSCPropNetProxiesHTTPEnable
kSCPropNetProxiesHTTPProxy
kSCPropNetProxiesHTTPPort
false
}
{
"
https
"
kSCPropNetProxiesHTTPSEnable
kSCPropNetProxiesHTTPSProxy
kSCPropNetProxiesHTTPSPort
false
}
{
"
ftp
"
kSCPropNetProxiesFTPEnable
kSCPropNetProxiesFTPProxy
kSCPropNetProxiesFTPPort
false
}
{
"
socks
"
kSCPropNetProxiesSOCKSEnable
kSCPropNetProxiesSOCKSProxy
kSCPropNetProxiesSOCKSPort
true
}
{
NULL
NULL
NULL
NULL
false
}
}
;
static
void
ProxyHasChangedWrapper
(
SCDynamicStoreRef
aStore
CFArrayRef
aChangedKeys
void
*
aInfo
)
{
static_cast
<
nsOSXSystemProxySettings
*
>
(
aInfo
)
-
>
ProxyHasChanged
(
)
;
}
nsOSXSystemProxySettings
:
:
nsOSXSystemProxySettings
(
)
:
mSystemDynamicStore
(
NULL
)
mProxyDict
(
NULL
)
{
mContext
=
(
SCDynamicStoreContext
)
{
0
this
NULL
NULL
NULL
}
;
}
nsresult
nsOSXSystemProxySettings
:
:
Init
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
mSystemDynamicStore
=
SCDynamicStoreCreate
(
NULL
CFSTR
(
"
Mozilla
"
)
ProxyHasChangedWrapper
&
mContext
)
;
if
(
!
mSystemDynamicStore
)
return
NS_ERROR_FAILURE
;
CFStringRef
proxiesKey
=
SCDynamicStoreKeyCreateProxies
(
NULL
)
;
if
(
!
proxiesKey
)
return
NS_ERROR_FAILURE
;
CFArrayRef
keyArray
=
CFArrayCreate
(
NULL
(
const
void
*
*
)
(
&
proxiesKey
)
1
&
kCFTypeArrayCallBacks
)
;
CFRelease
(
proxiesKey
)
;
if
(
!
keyArray
)
return
NS_ERROR_FAILURE
;
SCDynamicStoreSetNotificationKeys
(
mSystemDynamicStore
keyArray
NULL
)
;
CFRelease
(
keyArray
)
;
CFRunLoopSourceRef
storeRLSource
=
SCDynamicStoreCreateRunLoopSource
(
NULL
mSystemDynamicStore
0
)
;
if
(
!
storeRLSource
)
return
NS_ERROR_FAILURE
;
CFRunLoopAddSource
(
CFRunLoopGetCurrent
(
)
storeRLSource
kCFRunLoopCommonModes
)
;
CFRelease
(
storeRLSource
)
;
mProxyDict
=
(
NSDictionary
*
)
SCDynamicStoreCopyProxies
(
mSystemDynamicStore
)
;
if
(
!
mProxyDict
)
return
NS_ERROR_FAILURE
;
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsOSXSystemProxySettings
:
:
~
nsOSXSystemProxySettings
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
[
mProxyDict
release
]
;
if
(
mSystemDynamicStore
)
{
CFRunLoopSourceRef
rls
=
SCDynamicStoreCreateRunLoopSource
(
NULL
mSystemDynamicStore
0
)
;
if
(
rls
)
{
CFRunLoopSourceInvalidate
(
rls
)
;
CFRelease
(
rls
)
;
}
CFRelease
(
mSystemDynamicStore
)
;
}
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
void
nsOSXSystemProxySettings
:
:
ProxyHasChanged
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
[
mProxyDict
release
]
;
mProxyDict
=
(
NSDictionary
*
)
SCDynamicStoreCopyProxies
(
mSystemDynamicStore
)
;
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
nsresult
nsOSXSystemProxySettings
:
:
FindSCProxyPort
(
const
nsACString
&
aScheme
nsACString
&
aResultHost
int32_t
&
aResultPort
bool
&
aResultSocksProxy
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
NS_ENSURE_TRUE
(
mProxyDict
!
=
NULL
NS_ERROR_FAILURE
)
;
for
(
const
SchemeMapping
*
keys
=
gSchemeMappingList
;
keys
-
>
mScheme
!
=
NULL
;
+
+
keys
)
{
if
(
strcasecmp
(
keys
-
>
mScheme
PromiseFlatCString
(
aScheme
)
.
get
(
)
)
&
&
!
keys
-
>
mIsSocksProxy
)
continue
;
NSNumber
*
enabled
=
[
mProxyDict
objectForKey
:
(
NSString
*
)
keys
-
>
mEnabled
]
;
NS_ENSURE_TRUE
(
enabled
=
=
NULL
|
|
[
enabled
isKindOfClass
:
[
NSNumber
class
]
]
NS_ERROR_FAILURE
)
;
if
(
[
enabled
intValue
]
=
=
0
)
continue
;
NSString
*
host
=
[
mProxyDict
objectForKey
:
(
NSString
*
)
keys
-
>
mHost
]
;
if
(
host
=
=
NULL
)
break
;
NS_ENSURE_TRUE
(
[
host
isKindOfClass
:
[
NSString
class
]
]
NS_ERROR_FAILURE
)
;
aResultHost
.
Assign
(
[
host
UTF8String
]
)
;
NSNumber
*
port
=
[
mProxyDict
objectForKey
:
(
NSString
*
)
keys
-
>
mPort
]
;
NS_ENSURE_TRUE
(
[
port
isKindOfClass
:
[
NSNumber
class
]
]
NS_ERROR_FAILURE
)
;
aResultPort
=
[
port
intValue
]
;
aResultSocksProxy
=
keys
-
>
mIsSocksProxy
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
bool
nsOSXSystemProxySettings
:
:
IsAutoconfigEnabled
(
)
const
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN
;
NSNumber
*
value
=
[
mProxyDict
objectForKey
:
(
NSString
*
)
kSCPropNetProxiesProxyAutoConfigEnable
]
;
NS_ENSURE_TRUE
(
value
=
=
NULL
|
|
[
value
isKindOfClass
:
[
NSNumber
class
]
]
false
)
;
return
(
[
value
intValue
]
!
=
0
)
;
NS_OBJC_END_TRY_ABORT_BLOCK_RETURN
(
false
)
;
}
nsresult
nsOSXSystemProxySettings
:
:
GetAutoconfigURL
(
nsAutoCString
&
aResult
)
const
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
NSString
*
value
=
[
mProxyDict
objectForKey
:
(
NSString
*
)
kSCPropNetProxiesProxyAutoConfigURLString
]
;
if
(
value
!
=
NULL
)
{
NS_ENSURE_TRUE
(
[
value
isKindOfClass
:
[
NSString
class
]
]
NS_ERROR_FAILURE
)
;
aResult
.
Assign
(
[
value
UTF8String
]
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
bool
nsOSXSystemProxySettings
:
:
IsInExceptionList
(
const
nsACString
&
aHost
)
const
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN
;
NS_ENSURE_TRUE
(
mProxyDict
!
=
NULL
false
)
;
NSArray
*
exceptionList
=
[
mProxyDict
objectForKey
:
(
NSString
*
)
kSCPropNetProxiesExceptionsList
]
;
NS_ENSURE_TRUE
(
exceptionList
=
=
NULL
|
|
[
exceptionList
isKindOfClass
:
[
NSArray
class
]
]
false
)
;
NSEnumerator
*
exceptionEnumerator
=
[
exceptionList
objectEnumerator
]
;
NSString
*
currentValue
=
NULL
;
while
(
(
currentValue
=
[
exceptionEnumerator
nextObject
]
)
)
{
NS_ENSURE_TRUE
(
[
currentValue
isKindOfClass
:
[
NSString
class
]
]
false
)
;
nsAutoCString
overrideStr
(
[
currentValue
UTF8String
]
)
;
if
(
mozilla
:
:
toolkit
:
:
system
:
:
IsHostProxyEntry
(
aHost
overrideStr
)
)
return
true
;
}
NS_OBJC_END_TRY_ABORT_BLOCK_RETURN
(
false
)
;
}
nsresult
nsOSXSystemProxySettings
:
:
GetPACURI
(
nsACString
&
aResult
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
NS_ENSURE_TRUE
(
mProxyDict
!
=
NULL
NS_ERROR_FAILURE
)
;
nsAutoCString
pacUrl
;
if
(
IsAutoconfigEnabled
(
)
&
&
NS_SUCCEEDED
(
GetAutoconfigURL
(
pacUrl
)
)
)
{
aResult
.
Assign
(
pacUrl
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsresult
nsOSXSystemProxySettings
:
:
GetProxyForURI
(
const
nsACString
&
aSpec
const
nsACString
&
aScheme
const
nsACString
&
aHost
const
int32_t
aPort
nsACString
&
aResult
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
int32_t
proxyPort
;
nsAutoCString
proxyHost
;
bool
proxySocks
;
nsresult
rv
=
FindSCProxyPort
(
aScheme
proxyHost
proxyPort
proxySocks
)
;
if
(
NS_FAILED
(
rv
)
|
|
IsInExceptionList
(
aHost
)
)
{
aResult
.
AssignLiteral
(
"
DIRECT
"
)
;
}
else
if
(
proxySocks
)
{
aResult
.
Assign
(
"
SOCKS
"
_ns
+
proxyHost
+
nsPrintfCString
(
"
:
%
d
"
proxyPort
)
)
;
}
else
{
aResult
.
Assign
(
"
PROXY
"
_ns
+
proxyHost
+
nsPrintfCString
(
"
:
%
d
"
proxyPort
)
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMPL_COMPONENT_FACTORY
(
nsOSXSystemProxySettings
)
{
auto
settings
=
mozilla
:
:
MakeRefPtr
<
nsOSXSystemProxySettings
>
(
)
;
if
(
NS_SUCCEEDED
(
settings
-
>
Init
(
)
)
)
{
return
settings
.
forget
(
)
.
downcast
<
nsISupports
>
(
)
;
}
return
nullptr
;
}
