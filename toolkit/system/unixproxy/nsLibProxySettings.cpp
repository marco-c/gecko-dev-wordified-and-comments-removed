#
include
"
nsISystemProxySettings
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nspr
.
h
"
extern
"
C
"
{
#
include
<
proxy
.
h
>
}
class
nsUnixSystemProxySettings
:
public
nsISystemProxySettings
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSISYSTEMPROXYSETTINGS
nsUnixSystemProxySettings
(
)
{
mProxyFactory
=
nullptr
;
}
private
:
~
nsUnixSystemProxySettings
(
)
{
if
(
mProxyFactory
)
px_proxy_factory_free
(
mProxyFactory
)
;
}
pxProxyFactory
*
mProxyFactory
;
}
;
NS_IMPL_ISUPPORTS
(
nsUnixSystemProxySettings
nsISystemProxySettings
)
NS_IMETHODIMP
nsUnixSystemProxySettings
:
:
GetMainThreadOnly
(
bool
*
aMainThreadOnly
)
{
*
aMainThreadOnly
=
false
;
return
NS_OK
;
}
nsresult
nsUnixSystemProxySettings
:
:
GetPACURI
(
nsACString
&
aResult
)
{
aResult
.
Truncate
(
)
;
return
NS_OK
;
}
nsresult
nsUnixSystemProxySettings
:
:
GetProxyForURI
(
const
nsACString
&
aSpec
const
nsACString
&
aScheme
const
nsACString
&
aHost
const
int32_t
aPort
nsACString
&
aResult
)
{
nsresult
rv
;
if
(
!
mProxyFactory
)
{
mProxyFactory
=
px_proxy_factory_new
(
)
;
}
NS_ENSURE_TRUE
(
mProxyFactory
NS_ERROR_NOT_AVAILABLE
)
;
char
*
*
proxyArray
=
nullptr
;
proxyArray
=
px_proxy_factory_get_proxies
(
mProxyFactory
PromiseFlatCString
(
aSpec
)
.
get
(
)
)
;
NS_ENSURE_TRUE
(
proxyArray
NS_ERROR_NOT_AVAILABLE
)
;
int
c
=
0
;
while
(
proxyArray
[
c
]
!
=
nullptr
)
{
if
(
!
aResult
.
IsEmpty
(
)
)
{
aResult
.
AppendLiteral
(
"
;
"
)
;
}
char
*
colon
=
strchr
(
proxyArray
[
c
]
'
:
'
)
;
uint32_t
schemelen
=
colon
?
colon
-
proxyArray
[
c
]
:
0
;
if
(
schemelen
<
1
)
{
c
+
+
;
continue
;
}
if
(
schemelen
=
=
6
&
&
!
strncasecmp
(
proxyArray
[
c
]
"
direct
"
6
)
)
{
aResult
.
AppendLiteral
(
"
DIRECT
"
)
;
}
else
{
aResult
.
AppendLiteral
(
"
PROXY
"
)
;
aResult
.
Append
(
proxyArray
[
c
]
)
;
}
c
+
+
;
}
free
(
proxyArray
)
;
return
NS_OK
;
}
NS_IMPL_COMPONENT_FACTORY
(
nsUnixSystemProxySettings
)
{
return
do_AddRef
(
new
nsUnixSystemProxySettings
(
)
)
.
downcast
<
nsISupports
>
(
)
;
}
