"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
ForgetAboutSite
"
]
;
var
ForgetAboutSite
=
{
async
removeDataFromDomain
(
aDomain
)
{
let
promises
=
[
]
;
[
"
http
:
/
/
"
"
https
:
/
/
"
]
.
forEach
(
scheme
=
>
{
promises
.
push
(
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromHost
(
aDomain
true
Ci
.
nsIClearDataService
.
CLEAR_ALL
resolve
)
;
}
)
)
;
}
)
;
promises
.
push
(
(
async
function
(
)
{
let
mps
=
Cc
[
"
mozilla
.
org
/
gecko
-
media
-
plugin
-
service
;
1
"
]
.
getService
(
Ci
.
mozIGeckoMediaPluginChromeService
)
;
mps
.
forgetThisSite
(
aDomain
JSON
.
stringify
(
{
}
)
)
;
}
)
(
)
.
catch
(
ex
=
>
{
throw
new
Error
(
"
Exception
thrown
while
clearing
Encrypted
Media
Extensions
:
"
+
ex
)
;
}
)
)
;
promises
.
push
(
(
async
function
(
)
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
for
(
let
type
of
[
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
]
)
{
let
enumerator
=
sss
.
enumerate
(
type
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
entry
=
enumerator
.
getNext
(
)
;
let
hostname
=
entry
.
QueryInterface
(
Ci
.
nsISiteSecurityState
)
.
hostname
;
if
(
hostname
=
=
aDomain
|
|
hostname
.
endsWith
(
"
.
"
+
aDomain
)
)
{
let
uri
=
NetUtil
.
newURI
(
"
https
:
/
/
"
+
hostname
)
;
sss
.
removeState
(
type
uri
0
entry
.
originAttributes
)
;
}
}
}
}
)
(
)
.
catch
(
ex
=
>
{
throw
new
Error
(
"
Exception
thrown
while
clearing
HSTS
/
HPKP
:
"
+
ex
)
;
}
)
)
;
let
ErrorCount
=
0
;
for
(
let
promise
of
promises
)
{
try
{
await
promise
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
ErrorCount
+
+
;
}
}
if
(
ErrorCount
!
=
=
0
)
throw
new
Error
(
There
were
a
total
of
{
ErrorCount
}
errors
during
removal
)
;
}
}
;
