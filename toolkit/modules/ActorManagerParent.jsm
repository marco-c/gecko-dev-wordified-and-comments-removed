"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ActorManagerParent
"
]
;
const
{
ExtensionUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
DefaultMap
}
=
ExtensionUtils
;
let
ACTORS
=
{
AudioPlayback
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
AudioPlaybackParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
AudioPlaybackChild
.
jsm
"
observers
:
[
"
audio
-
playback
"
]
}
allFrames
:
true
}
AutoComplete
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
AutoCompleteParent
.
jsm
"
messages
:
[
"
FormAutoComplete
:
SelectBy
"
"
FormAutoComplete
:
SetSelectedIndex
"
"
FormAutoComplete
:
MaybeOpenPopup
"
"
FormAutoComplete
:
Invalidate
"
"
FormAutoComplete
:
ClosePopup
"
"
FormAutoComplete
:
Disconnect
"
]
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
AutoCompleteChild
.
jsm
"
events
:
{
DOMContentLoaded
:
{
}
pageshow
:
{
capture
:
true
}
pagehide
:
{
capture
:
true
}
unload
:
{
capture
:
true
}
focus
:
{
capture
:
true
}
blur
:
{
capture
:
true
}
mousedown
:
{
capture
:
true
}
input
:
{
capture
:
true
}
keydown
:
{
capture
:
true
}
keypress
:
{
capture
:
true
mozSystemGroup
:
true
}
compositionstart
:
{
capture
:
true
}
compositionend
:
{
capture
:
true
}
contextmenu
:
{
capture
:
true
}
}
messages
:
[
"
FormAutoComplete
:
HandleEnter
"
"
FormAutoComplete
:
PopupClosed
"
"
FormAutoComplete
:
PopupOpened
"
]
}
allFrames
:
true
}
Autoplay
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
AutoplayParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
AutoplayChild
.
jsm
"
events
:
{
GloballyAutoplayBlocked
:
{
}
}
}
allFrames
:
true
}
BrowserElement
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
BrowserElementParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
BrowserElementChild
.
jsm
"
events
:
{
DOMWindowClose
:
{
}
}
}
allFrames
:
true
}
DateTimePicker
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
DateTimePickerParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
DateTimePickerChild
.
jsm
"
events
:
{
MozOpenDateTimePicker
:
{
}
MozUpdateDateTimePicker
:
{
}
MozCloseDateTimePicker
:
{
}
}
}
allFrames
:
true
}
ExtFind
:
{
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
ExtFindChild
.
jsm
"
messages
:
[
"
ext
-
Finder
:
CollectResults
"
"
ext
-
Finder
:
HighlightResults
"
"
ext
-
Finder
:
ClearHighlighting
"
]
}
allFrames
:
true
}
FindBar
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
FindBarParent
.
jsm
"
messages
:
[
"
Findbar
:
Keypress
"
"
Findbar
:
Mouseup
"
]
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
FindBarChild
.
jsm
"
events
:
{
keypress
:
{
mozSystemGroup
:
true
}
}
}
allFrames
:
true
}
Finder
:
{
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
FinderChild
.
jsm
"
messages
:
[
"
Finder
:
CaseSensitive
"
"
Finder
:
EntireWord
"
"
Finder
:
Find
"
"
Finder
:
SetSearchStringToSelection
"
"
Finder
:
GetInitialSelection
"
"
Finder
:
Highlight
"
"
Finder
:
UpdateHighlightAndMatchCount
"
"
Finder
:
HighlightAllChange
"
"
Finder
:
EnableSelection
"
"
Finder
:
RemoveSelection
"
"
Finder
:
FocusContent
"
"
Finder
:
FindbarClose
"
"
Finder
:
FindbarOpen
"
"
Finder
:
KeyPress
"
"
Finder
:
MatchesCount
"
"
Finder
:
ModalHighlightChange
"
]
}
allFrames
:
true
}
InlineSpellChecker
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
InlineSpellCheckerParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
InlineSpellCheckerChild
.
jsm
"
}
allFrames
:
true
}
LoginManager
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
modules
/
LoginManagerParent
.
jsm
"
messages
:
[
"
PasswordManager
:
findLogins
"
"
PasswordManager
:
onFormSubmit
"
"
PasswordManager
:
onGeneratedPasswordFilledOrEdited
"
"
PasswordManager
:
insecureLoginFormPresent
"
"
PasswordManager
:
autoCompleteLogins
"
"
PasswordManager
:
removeLogin
"
"
PasswordManager
:
OpenPreferences
"
"
PasswordManager
:
formProcessed
"
]
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
modules
/
LoginManagerChild
.
jsm
"
events
:
{
DOMFormBeforeSubmit
:
{
}
DOMFormHasPassword
:
{
}
DOMInputPasswordAdded
:
{
}
}
messages
:
[
"
PasswordManager
:
fillForm
"
"
PasswordManager
:
fillGeneratedPassword
"
"
FormAutoComplete
:
PopupOpened
"
"
FormAutoComplete
:
PopupClosed
"
]
}
allFrames
:
true
}
Select
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
SelectParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
SelectChild
.
jsm
"
events
:
{
mozshowdropdown
:
{
}
"
mozshowdropdown
-
sourcetouch
"
:
{
}
mozhidedropdown
:
{
mozSystemGroup
:
true
}
}
}
allFrames
:
true
}
Zoom
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
ZoomParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
ZoomChild
.
jsm
"
events
:
{
FullZoomChange
:
{
}
TextZoomChange
:
{
}
ZoomChangeUsingMouseWheel
:
{
}
}
}
allFrames
:
true
}
UAWidgets
:
{
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
UAWidgetsChild
.
jsm
"
events
:
{
UAWidgetSetupOrChange
:
{
}
UAWidgetTeardown
:
{
}
}
}
allFrames
:
true
}
PurgeSessionHistory
:
{
child
:
{
moduleURI
:
"
resource
:
/
/
gre
/
actors
/
PurgeSessionHistoryChild
.
jsm
"
}
allFrames
:
true
}
}
;
let
LEGACY_ACTORS
=
{
Controllers
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
ControllersChild
.
jsm
"
messages
:
[
"
ControllerCommands
:
Do
"
"
ControllerCommands
:
DoWithParams
"
]
}
}
FormSubmit
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
FormSubmitChild
.
jsm
"
allFrames
:
true
events
:
{
DOMFormBeforeSubmit
:
{
}
}
}
}
KeyPressEventModelChecker
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
KeyPressEventModelCheckerChild
.
jsm
"
events
:
{
CheckKeyPressEventModel
:
{
capture
:
true
mozSystemGroup
:
true
}
}
}
}
ManifestMessages
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
modules
/
ManifestMessagesChild
.
jsm
"
messages
:
[
"
DOM
:
Manifest
:
FireAppInstalledEvent
"
"
DOM
:
ManifestObtainer
:
Obtain
"
"
DOM
:
WebManifest
:
fetchIcon
"
"
DOM
:
WebManifest
:
hasManifestLink
"
]
}
}
PictureInPicture
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
PictureInPictureChild
.
jsm
"
events
:
{
MozTogglePictureInPicture
:
{
capture
:
true
}
MozStopPictureInPicture
:
{
capture
:
true
}
}
messages
:
[
"
PictureInPicture
:
SetupPlayer
"
"
PictureInPicture
:
Play
"
"
PictureInPicture
:
Pause
"
"
PictureInPicture
:
KeyToggle
"
]
}
}
PictureInPictureToggle
:
{
child
:
{
allFrames
:
true
module
:
"
resource
:
/
/
gre
/
actors
/
PictureInPictureChild
.
jsm
"
events
:
{
UAWidgetSetupOrChange
:
{
}
contextmenu
:
{
capture
:
true
}
}
}
}
PopupBlocking
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
PopupBlockingChild
.
jsm
"
events
:
{
DOMPopupBlocked
:
{
capture
:
true
}
}
}
}
Printing
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
PrintingChild
.
jsm
"
events
:
{
PrintingError
:
{
capture
:
true
}
printPreviewUpdate
:
{
capture
:
true
}
}
messages
:
[
"
Printing
:
Preview
:
Enter
"
"
Printing
:
Preview
:
Exit
"
"
Printing
:
Preview
:
Navigate
"
"
Printing
:
Preview
:
ParseDocument
"
"
Printing
:
Print
"
]
}
}
SelectionSource
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
SelectionSourceChild
.
jsm
"
messages
:
[
"
ViewSource
:
GetSelection
"
]
}
}
Thumbnails
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
ThumbnailsChild
.
jsm
"
messages
:
[
"
Browser
:
Thumbnail
:
Request
"
"
Browser
:
Thumbnail
:
CheckState
"
"
Browser
:
Thumbnail
:
GetOriginalURL
"
]
}
}
UnselectedTabHover
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
UnselectedTabHoverChild
.
jsm
"
events
:
{
"
UnselectedTabHover
:
Enable
"
:
{
}
"
UnselectedTabHover
:
Disable
"
:
{
}
}
messages
:
[
"
Browser
:
UnselectedTabHover
"
]
}
}
WebChannel
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
WebChannelChild
.
jsm
"
events
:
{
WebChannelMessageToChrome
:
{
capture
:
true
wantUntrusted
:
true
}
}
messages
:
[
"
WebChannelMessageToContent
"
]
}
}
WebNavigation
:
{
child
:
{
module
:
"
resource
:
/
/
gre
/
actors
/
WebNavigationChild
.
jsm
"
messages
:
[
"
WebNavigation
:
GoBack
"
"
WebNavigation
:
GoForward
"
"
WebNavigation
:
GotoIndex
"
"
WebNavigation
:
Reload
"
"
WebNavigation
:
SetOriginAttributes
"
"
WebNavigation
:
Stop
"
]
}
}
}
;
class
ActorSet
{
constructor
(
group
actorSide
)
{
this
.
group
=
group
;
this
.
actorSide
=
actorSide
;
this
.
actors
=
new
Map
(
)
;
this
.
events
=
[
]
;
this
.
messages
=
new
DefaultMap
(
(
)
=
>
[
]
)
;
this
.
observers
=
new
DefaultMap
(
(
)
=
>
[
]
)
;
}
addActor
(
actorName
actor
)
{
actorName
+
=
this
.
actorSide
;
this
.
actors
.
set
(
actorName
{
module
:
actor
.
module
}
)
;
if
(
actor
.
events
)
{
for
(
let
[
event
options
]
of
Object
.
entries
(
actor
.
events
)
)
{
this
.
events
.
push
(
{
actor
:
actorName
event
options
}
)
;
}
}
for
(
let
msg
of
actor
.
messages
|
|
[
]
)
{
this
.
messages
.
get
(
msg
)
.
push
(
actorName
)
;
}
for
(
let
topic
of
actor
.
observers
|
|
[
]
)
{
this
.
observers
.
get
(
topic
)
.
push
(
actorName
)
;
}
}
}
const
{
sharedData
}
=
Services
.
ppmm
;
var
ActorManagerParent
=
{
childGroups
:
new
DefaultMap
(
group
=
>
new
ActorSet
(
group
"
Child
"
)
)
parentGroups
:
new
DefaultMap
(
group
=
>
new
ActorSet
(
group
"
Parent
"
)
)
singletons
:
new
DefaultMap
(
(
)
=
>
new
ActorSet
(
null
"
Child
"
)
)
addActors
(
actors
)
{
for
(
let
[
actorName
actor
]
of
Object
.
entries
(
actors
)
)
{
ChromeUtils
.
registerWindowActor
(
actorName
actor
)
;
}
}
addLegacyActors
(
actors
)
{
for
(
let
[
actorName
actor
]
of
Object
.
entries
(
actors
)
)
{
let
{
child
}
=
actor
;
{
let
actorSet
;
if
(
child
.
matches
|
|
child
.
allFrames
)
{
actorSet
=
this
.
singletons
.
get
(
{
matches
:
child
.
matches
|
|
[
"
<
all_urls
>
"
]
allFrames
:
child
.
allFrames
matchAboutBlank
:
child
.
matchAboutBlank
}
)
;
}
else
{
actorSet
=
this
.
childGroups
.
get
(
child
.
group
|
|
null
)
;
}
actorSet
.
addActor
(
actorName
child
)
;
}
if
(
actor
.
parent
)
{
let
{
parent
}
=
actor
;
this
.
parentGroups
.
get
(
parent
.
group
|
|
null
)
.
addActor
(
actorName
parent
)
;
}
}
}
flush
(
)
{
for
(
let
[
name
data
]
of
this
.
childGroups
)
{
sharedData
.
set
(
ChildActors
:
{
name
|
|
"
"
}
data
)
;
}
sharedData
.
set
(
"
ChildSingletonActors
"
this
.
singletons
)
;
}
}
;
ActorManagerParent
.
addActors
(
ACTORS
)
;
ActorManagerParent
.
addLegacyActors
(
LEGACY_ACTORS
)
;
