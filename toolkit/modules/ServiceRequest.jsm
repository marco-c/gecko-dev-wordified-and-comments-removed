"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
XMLHttpRequest
"
]
)
;
var
EXPORTED_SYMBOLS
=
[
"
ServiceRequest
"
]
;
const
logger
=
Log
.
repository
.
getLogger
(
"
ServiceRequest
"
)
;
logger
.
level
=
Log
.
Level
.
Debug
;
logger
.
addAppender
(
new
Log
.
ConsoleAppender
(
new
Log
.
BasicFormatter
(
)
)
)
;
class
ServiceRequest
extends
XMLHttpRequest
{
constructor
(
options
)
{
super
(
options
)
;
}
open
(
method
url
options
)
{
super
.
open
(
method
url
true
)
;
if
(
super
.
channel
instanceof
Ci
.
nsIHttpChannelInternal
)
{
let
internal
=
super
.
channel
.
QueryInterface
(
Ci
.
nsIHttpChannelInternal
)
;
internal
.
beConservative
=
true
;
if
(
options
?
.
bypassProxy
&
&
this
.
bypassProxyEnabled
)
{
internal
.
bypassProxy
=
true
;
}
}
}
get
bypassProxy
(
)
{
let
{
channel
}
=
this
;
return
channel
.
QueryInterface
(
Ci
.
nsIHttpChannelInternal
)
.
bypassProxy
;
}
get
isProxied
(
)
{
let
{
channel
}
=
this
;
return
!
!
(
channel
instanceof
Ci
.
nsIProxiedChannel
&
&
channel
.
proxyInfo
)
;
}
get
bypassProxyEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
network
.
proxy
.
allow_bypass
"
true
)
;
}
}
