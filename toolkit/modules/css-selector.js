"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
findCssSelector
"
]
;
function
getRootBindingParent
(
node
)
{
let
parent
;
let
doc
=
node
.
ownerDocument
;
if
(
!
doc
)
{
return
node
;
}
while
(
(
parent
=
doc
.
getBindingParent
(
node
)
)
)
{
node
=
parent
;
}
return
node
;
}
function
positionInNodeList
(
element
nodeList
)
{
for
(
let
i
=
0
;
i
<
nodeList
.
length
;
i
+
+
)
{
if
(
element
=
=
=
nodeList
[
i
]
)
{
return
i
;
}
}
return
-
1
;
}
const
findCssSelector
=
function
(
ele
)
{
ele
=
getRootBindingParent
(
ele
)
;
let
document
=
ele
.
ownerDocument
;
if
(
!
document
|
|
!
document
.
contains
(
ele
)
)
{
throw
new
Error
(
"
findCssSelector
received
element
not
inside
document
"
)
;
}
let
cssEscape
=
ele
.
ownerGlobal
.
CSS
.
escape
;
if
(
ele
.
id
&
&
document
.
querySelectorAll
(
"
#
"
+
cssEscape
(
ele
.
id
)
)
.
length
=
=
=
1
)
{
return
"
#
"
+
cssEscape
(
ele
.
id
)
;
}
let
tagName
=
ele
.
localName
;
if
(
tagName
=
=
=
"
html
"
)
{
return
"
html
"
;
}
if
(
tagName
=
=
=
"
head
"
)
{
return
"
head
"
;
}
if
(
tagName
=
=
=
"
body
"
)
{
return
"
body
"
;
}
let
selector
index
matches
;
if
(
ele
.
classList
.
length
>
0
)
{
for
(
let
i
=
0
;
i
<
ele
.
classList
.
length
;
i
+
+
)
{
selector
=
"
.
"
+
cssEscape
(
ele
.
classList
.
item
(
i
)
)
;
matches
=
document
.
querySelectorAll
(
selector
)
;
if
(
matches
.
length
=
=
=
1
)
{
return
selector
;
}
selector
=
cssEscape
(
tagName
)
+
selector
;
matches
=
document
.
querySelectorAll
(
selector
)
;
if
(
matches
.
length
=
=
=
1
)
{
return
selector
;
}
index
=
positionInNodeList
(
ele
ele
.
parentNode
.
children
)
+
1
;
selector
=
selector
+
"
:
nth
-
child
(
"
+
index
+
"
)
"
;
matches
=
document
.
querySelectorAll
(
selector
)
;
if
(
matches
.
length
=
=
=
1
)
{
return
selector
;
}
}
}
if
(
ele
.
parentNode
!
=
=
document
)
{
index
=
positionInNodeList
(
ele
ele
.
parentNode
.
children
)
+
1
;
selector
=
findCssSelector
(
ele
.
parentNode
)
+
"
>
"
+
cssEscape
(
tagName
)
+
"
:
nth
-
child
(
"
+
index
+
"
)
"
;
}
return
selector
;
}
