var
EXPORTED_SYMBOLS
=
[
"
ContentDOMReference
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gUUIDGenerator
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
var
gRegistry
=
new
WeakMap
(
)
;
var
ContentDOMReference
=
{
get
(
element
)
{
if
(
!
element
)
{
throw
new
Error
(
"
Can
'
t
create
a
ContentDOMReference
identifier
for
"
+
"
non
-
existant
nodes
.
"
)
;
}
let
browsingContext
=
element
.
ownerGlobal
.
getWindowGlobalChild
(
)
.
browsingContext
;
let
mappings
=
gRegistry
.
get
(
browsingContext
)
;
if
(
!
mappings
)
{
mappings
=
{
UUIDToElement
:
new
Map
(
)
elementToUUID
:
new
WeakMap
(
)
}
;
gRegistry
.
set
(
browsingContext
mappings
)
;
}
let
uuid
=
mappings
.
elementToUUID
.
get
(
element
)
;
if
(
uuid
)
{
return
{
browsingContextId
:
browsingContext
.
id
uuid
}
;
}
uuid
=
gUUIDGenerator
.
generateUUID
(
)
.
toString
(
)
;
mappings
.
elementToUUID
.
set
(
element
uuid
)
;
mappings
.
UUIDToElement
.
set
(
uuid
Cu
.
getWeakReference
(
element
)
)
;
return
{
browsingContextId
:
browsingContext
.
id
uuid
}
;
}
resolve
(
identifier
)
{
let
browsingContext
=
BrowsingContext
.
get
(
identifier
.
browsingContextId
)
;
let
uuid
=
identifier
.
uuid
;
return
this
.
_resolveUUIDToElement
(
browsingContext
uuid
)
;
}
revoke
(
identifier
)
{
let
browsingContext
=
BrowsingContext
.
get
(
identifier
.
browsingContextId
)
;
let
uuid
=
identifier
.
uuid
;
let
mappings
=
gRegistry
.
get
(
browsingContext
)
;
if
(
!
mappings
)
{
return
;
}
let
element
=
this
.
_resolveUUIDToElement
(
browsingContext
uuid
)
;
if
(
element
)
{
mappings
.
elementToUUID
.
delete
(
element
)
;
}
mappings
.
UUIDToElement
.
delete
(
uuid
)
;
}
_resolveUUIDToElement
(
browsingContext
uuid
)
{
let
mappings
=
gRegistry
.
get
(
browsingContext
)
;
if
(
!
mappings
)
{
return
null
;
}
let
weakReference
=
mappings
.
UUIDToElement
.
get
(
uuid
)
;
if
(
!
weakReference
)
{
return
null
;
}
return
weakReference
.
get
(
)
;
}
}
;
