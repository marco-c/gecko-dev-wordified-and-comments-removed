"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
setTimeout
"
"
setTimeoutWithTarget
"
"
clearTimeout
"
"
setInterval
"
"
setIntervalWithTarget
"
"
clearInterval
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
gNextId
=
1
;
var
gTimerTable
=
new
Map
(
)
;
function
_setTimeoutOrIsInterval
(
aCallback
aMilliseconds
aIsInterval
aTarget
aArgs
)
{
if
(
typeof
aCallback
!
=
=
"
function
"
)
{
throw
new
Error
(
callback
is
not
a
function
in
{
aIsInterval
?
"
setInterval
"
:
"
setTimeout
"
}
)
;
}
let
id
=
gNextId
+
+
;
let
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
if
(
aTarget
)
{
timer
.
target
=
aTarget
;
}
let
callback
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsITimerCallback
Ci
.
nsINamed
]
)
notify
(
)
{
if
(
!
aIsInterval
)
{
gTimerTable
.
delete
(
id
)
;
}
aCallback
.
apply
(
null
aArgs
)
;
}
name
:
(
aIsInterval
?
"
setInterval
(
)
for
"
:
"
setTimeout
(
)
for
"
)
+
Cu
.
generateXPCWrappedJS
(
aCallback
)
.
QueryInterface
(
Ci
.
nsINamed
)
.
name
}
;
timer
.
initWithCallback
(
callback
aMilliseconds
aIsInterval
?
timer
.
TYPE_REPEATING_SLACK
:
timer
.
TYPE_ONE_SHOT
)
;
gTimerTable
.
set
(
id
timer
)
;
return
id
;
}
this
.
setTimeout
=
function
setTimeout
(
aCallback
aMilliseconds
.
.
.
aArgs
)
{
return
_setTimeoutOrIsInterval
(
aCallback
aMilliseconds
false
null
aArgs
)
;
}
;
this
.
setTimeoutWithTarget
=
function
setTimeoutWithTarget
(
aCallback
aMilliseconds
aTarget
.
.
.
aArgs
)
{
return
_setTimeoutOrIsInterval
(
aCallback
aMilliseconds
false
aTarget
aArgs
)
;
}
;
this
.
setInterval
=
function
setInterval
(
aCallback
aMilliseconds
.
.
.
aArgs
)
{
return
_setTimeoutOrIsInterval
(
aCallback
aMilliseconds
true
null
aArgs
)
;
}
;
this
.
setIntervalWithTarget
=
function
setIntervalWithTarget
(
aCallback
aMilliseconds
aTarget
.
.
.
aArgs
)
{
return
_setTimeoutOrIsInterval
(
aCallback
aMilliseconds
true
aTarget
aArgs
)
;
}
;
this
.
clearInterval
=
this
.
clearTimeout
=
function
clearTimeout
(
aId
)
{
if
(
gTimerTable
.
has
(
aId
)
)
{
gTimerTable
.
get
(
aId
)
.
cancel
(
)
;
gTimerTable
.
delete
(
aId
)
;
}
}
;
