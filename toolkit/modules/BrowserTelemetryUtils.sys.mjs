export
var
BrowserTelemetryUtils
=
{
recordSiteOriginTelemetry
(
aWindows
aIsGeckoView
)
{
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
{
this
.
_recordSiteOriginTelemetry
(
aWindows
aIsGeckoView
)
;
}
)
;
}
computeSiteOriginCount
(
aWindows
aIsGeckoView
)
{
let
tabs
=
[
]
;
if
(
aIsGeckoView
)
{
tabs
=
aWindows
;
}
else
{
for
(
const
win
of
aWindows
)
{
tabs
=
tabs
.
concat
(
win
.
gBrowser
.
tabs
)
;
}
}
let
topLevelBCs
=
[
]
;
for
(
const
tab
of
tabs
)
{
let
browser
;
if
(
aIsGeckoView
)
{
browser
=
tab
.
browser
;
}
else
{
browser
=
tab
.
linkedBrowser
;
}
if
(
browser
.
browsingContext
)
{
topLevelBCs
.
push
(
browser
.
browsingContext
)
;
}
}
return
CanonicalBrowsingContext
.
countSiteOrigins
(
topLevelBCs
)
;
}
_recordSiteOriginTelemetry
(
aWindows
aIsGeckoView
)
{
let
currentTime
=
Date
.
now
(
)
;
if
(
!
this
.
min_interval
)
{
this
.
min_interval
=
Services
.
prefs
.
getIntPref
(
"
telemetry
.
number_of_site_origin
.
min_interval
"
300000
)
;
}
let
originCount
=
this
.
computeSiteOriginCount
(
aWindows
aIsGeckoView
)
;
if
(
!
this
.
_lastRecordSiteOrigin
)
{
this
.
_lastRecordSiteOrigin
=
currentTime
;
}
else
if
(
currentTime
>
=
this
.
_lastRecordSiteOrigin
+
this
.
min_interval
)
{
this
.
_lastRecordSiteOrigin
=
currentTime
;
Glean
.
geckoview
.
documentSiteOrigins
.
accumulateSamples
(
[
originCount
]
)
;
}
}
}
;
