"
use
strict
"
;
var
Ci
=
Components
.
interfaces
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
WebNavigationFrames
"
"
resource
:
/
/
gre
/
modules
/
WebNavigationFrames
.
jsm
"
)
;
function
loadListener
(
event
)
{
let
document
=
event
.
target
;
let
window
=
document
.
defaultView
;
let
url
=
document
.
documentURI
;
let
windowId
=
WebNavigationFrames
.
getWindowId
(
window
)
;
let
parentWindowId
=
WebNavigationFrames
.
getParentWindowId
(
window
)
;
sendAsyncMessage
(
"
Extension
:
DOMContentLoaded
"
{
windowId
parentWindowId
url
}
)
;
}
addEventListener
(
"
DOMContentLoaded
"
loadListener
)
;
addMessageListener
(
"
Extension
:
DisableWebNavigation
"
(
)
=
>
{
removeEventListener
(
"
DOMContentLoaded
"
loadListener
)
;
}
)
;
var
FormSubmitListener
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsIFormSubmitObserver
Ci
.
nsISupportsWeakReference
]
)
init
(
)
{
this
.
formSubmitWindows
=
new
WeakSet
(
)
;
Services
.
obs
.
addObserver
(
FormSubmitListener
"
earlyformsubmit
"
false
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
FormSubmitListener
"
earlyformsubmit
"
false
)
;
this
.
formSubmitWindows
=
new
WeakSet
(
)
;
}
notify
:
function
(
form
window
actionURI
)
{
try
{
this
.
formSubmitWindows
.
add
(
window
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
Error
in
FormSubmitListener
.
notify
"
)
;
}
}
hasAndForget
:
function
(
window
)
{
let
has
=
this
.
formSubmitWindows
.
has
(
window
)
;
this
.
formSubmitWindows
.
delete
(
window
)
;
return
has
;
}
}
;
var
WebProgressListener
=
{
init
:
function
(
)
{
this
.
previousURIMap
=
new
WeakMap
(
)
;
for
(
let
currentDocShell
of
WebNavigationFrames
.
iterateDocShellTree
(
docShell
)
)
{
let
win
=
currentDocShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
let
{
currentURI
}
=
currentDocShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
this
.
previousURIMap
.
set
(
win
currentURI
)
;
}
let
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
webProgress
.
addProgressListener
(
this
Ci
.
nsIWebProgress
.
NOTIFY_STATE_WINDOW
|
Ci
.
nsIWebProgress
.
NOTIFY_LOCATION
)
;
}
uninit
(
)
{
if
(
!
docShell
)
{
return
;
}
let
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
webProgress
.
removeProgressListener
(
this
)
;
}
onStateChange
:
function
onStateChange
(
webProgress
request
stateFlags
status
)
{
let
{
originalURI
URI
:
locationURI
}
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
if
(
locationURI
.
schemeIs
(
"
file
"
)
|
|
locationURI
.
schemeIs
(
"
jar
"
)
)
{
let
shouldUseOriginalURI
=
originalURI
.
schemeIs
(
"
about
"
)
|
|
originalURI
.
schemeIs
(
"
chrome
"
)
|
|
originalURI
.
schemeIs
(
"
resource
"
)
|
|
originalURI
.
schemeIs
(
"
moz
-
extension
"
)
;
locationURI
=
shouldUseOriginalURI
?
originalURI
:
locationURI
;
}
this
.
sendStateChange
(
{
webProgress
locationURI
stateFlags
status
}
)
;
if
(
(
webProgress
.
DOMWindow
.
top
!
=
webProgress
.
DOMWindow
)
&
&
(
stateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_IS_DOCUMENT
)
)
{
this
.
sendDocumentChange
(
{
webProgress
locationURI
request
}
)
;
}
}
onLocationChange
:
function
onLocationChange
(
webProgress
request
locationURI
flags
)
{
let
{
DOMWindow
}
=
webProgress
;
let
previousURI
=
this
.
previousURIMap
.
get
(
DOMWindow
)
;
this
.
previousURIMap
.
set
(
DOMWindow
locationURI
)
;
let
isSameDocument
=
(
flags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
;
if
(
isSameDocument
)
{
this
.
sendHistoryChange
(
{
webProgress
previousURI
locationURI
request
}
)
;
}
else
if
(
webProgress
.
DOMWindow
.
top
=
=
webProgress
.
DOMWindow
)
{
this
.
sendDocumentChange
(
{
webProgress
locationURI
request
}
)
;
}
}
sendStateChange
(
{
webProgress
locationURI
stateFlags
status
}
)
{
let
data
=
{
requestURL
:
locationURI
.
spec
windowId
:
webProgress
.
DOMWindowID
parentWindowId
:
WebNavigationFrames
.
getParentWindowId
(
webProgress
.
DOMWindow
)
status
stateFlags
}
;
sendAsyncMessage
(
"
Extension
:
StateChange
"
data
)
;
}
sendDocumentChange
(
{
webProgress
locationURI
request
}
)
{
let
{
loadType
DOMWindow
}
=
webProgress
;
let
frameTransitionData
=
this
.
getFrameTransitionData
(
{
loadType
request
DOMWindow
}
)
;
let
data
=
{
frameTransitionData
location
:
locationURI
?
locationURI
.
spec
:
"
"
windowId
:
webProgress
.
DOMWindowID
parentWindowId
:
WebNavigationFrames
.
getParentWindowId
(
webProgress
.
DOMWindow
)
}
;
sendAsyncMessage
(
"
Extension
:
DocumentChange
"
data
)
;
}
sendHistoryChange
(
{
webProgress
previousURI
locationURI
request
}
)
{
let
{
loadType
DOMWindow
}
=
webProgress
;
let
isHistoryStateUpdated
=
false
;
let
isReferenceFragmentUpdated
=
false
;
let
pathChanged
=
!
(
previousURI
&
&
locationURI
.
equalsExceptRef
(
previousURI
)
)
;
let
hashChanged
=
!
(
previousURI
&
&
previousURI
.
ref
=
=
locationURI
.
ref
)
;
if
(
!
pathChanged
&
&
hashChanged
)
{
isReferenceFragmentUpdated
=
true
;
}
else
if
(
loadType
&
Ci
.
nsIDocShell
.
LOAD_CMD_PUSHSTATE
)
{
isHistoryStateUpdated
=
true
;
}
else
if
(
loadType
&
Ci
.
nsIDocShell
.
LOAD_CMD_HISTORY
)
{
isHistoryStateUpdated
=
true
;
}
if
(
isHistoryStateUpdated
|
|
isReferenceFragmentUpdated
)
{
let
frameTransitionData
=
this
.
getFrameTransitionData
(
{
loadType
request
DOMWindow
}
)
;
let
data
=
{
frameTransitionData
isHistoryStateUpdated
isReferenceFragmentUpdated
location
:
locationURI
?
locationURI
.
spec
:
"
"
windowId
:
webProgress
.
DOMWindowID
parentWindowId
:
WebNavigationFrames
.
getParentWindowId
(
webProgress
.
DOMWindow
)
}
;
sendAsyncMessage
(
"
Extension
:
HistoryChange
"
data
)
;
}
}
getFrameTransitionData
(
{
loadType
request
DOMWindow
}
)
{
let
frameTransitionData
=
{
}
;
if
(
loadType
&
Ci
.
nsIDocShell
.
LOAD_CMD_HISTORY
)
{
frameTransitionData
.
forward_back
=
true
;
}
if
(
loadType
&
Ci
.
nsIDocShell
.
LOAD_CMD_RELOAD
)
{
frameTransitionData
.
reload
=
true
;
}
if
(
request
instanceof
Ci
.
nsIChannel
)
{
if
(
request
.
loadInfo
.
redirectChain
.
length
)
{
frameTransitionData
.
server_redirect
=
true
;
}
}
if
(
FormSubmitListener
.
hasAndForget
(
DOMWindow
)
)
{
frameTransitionData
.
form_submit
=
true
;
}
return
frameTransitionData
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
}
;
var
disabled
=
false
;
WebProgressListener
.
init
(
)
;
FormSubmitListener
.
init
(
)
;
addEventListener
(
"
unload
"
(
)
=
>
{
if
(
!
disabled
)
{
disabled
=
true
;
WebProgressListener
.
uninit
(
)
;
FormSubmitListener
.
uninit
(
)
;
}
}
)
;
addMessageListener
(
"
Extension
:
DisableWebNavigation
"
(
)
=
>
{
if
(
!
disabled
)
{
disabled
=
true
;
WebProgressListener
.
uninit
(
)
;
FormSubmitListener
.
uninit
(
)
;
}
}
)
;
