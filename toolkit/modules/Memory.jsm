this
.
EXPORTED_SYMBOLS
=
[
"
Memory
"
]
;
const
TIMEOUT_INTERVAL
=
2000
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
this
.
Memory
=
{
summary
(
)
{
if
(
!
this
.
_pendingPromise
)
{
this
.
_pendingPromise
=
new
Promise
(
(
resolve
)
=
>
{
this
.
_pendingResolve
=
resolve
;
this
.
_summaries
=
{
}
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
Memory
:
GetSummary
"
)
;
Services
.
ppmm
.
addMessageListener
(
"
Memory
:
Summary
"
this
)
;
this
.
_pendingTimeout
=
setTimeout
(
(
)
=
>
{
this
.
finish
(
)
;
}
TIMEOUT_INTERVAL
)
;
}
)
;
}
return
this
.
_pendingPromise
;
}
receiveMessage
(
msg
)
{
if
(
msg
.
name
!
=
"
Memory
:
Summary
"
|
|
!
this
.
_pendingResolve
)
{
return
;
}
this
.
_summaries
[
msg
.
data
.
pid
]
=
msg
.
data
.
summary
;
if
(
Object
.
keys
(
this
.
_summaries
)
.
length
>
=
Services
.
ppmm
.
childCount
-
1
)
{
this
.
finish
(
)
;
}
}
finish
(
)
{
let
memMgr
=
Cc
[
"
mozilla
.
org
/
memory
-
reporter
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIMemoryReporterManager
)
;
let
rss
=
memMgr
.
resident
;
let
uss
=
memMgr
.
residentUnique
;
this
.
_summaries
.
Parent
=
{
uss
rss
}
;
this
.
_pendingResolve
(
this
.
_summaries
)
;
this
.
_pendingResolve
=
null
;
this
.
_summaries
=
null
;
this
.
_pendingPromise
=
null
;
clearTimeout
(
this
.
_pendingTimeout
)
;
Services
.
ppmm
.
removeMessageListener
(
"
Memory
:
Summary
"
this
)
;
}
}
;
