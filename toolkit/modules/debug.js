var
EXPORTED_SYMBOLS
=
[
"
NS_ASSERT
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
gTraceOnAssert
=
false
;
function
NS_ASSERT
(
condition
message
)
{
if
(
condition
)
return
;
var
releaseBuild
=
true
;
var
defB
=
Services
.
prefs
.
getDefaultBranch
(
null
)
;
try
{
switch
(
defB
.
getCharPref
(
"
app
.
update
.
channel
"
)
)
{
case
"
nightly
"
:
case
"
aurora
"
:
case
"
beta
"
:
case
"
default
"
:
releaseBuild
=
false
;
}
}
catch
(
ex
)
{
}
var
assertionText
=
"
ASSERT
:
"
+
message
+
"
\
n
"
;
Components
.
utils
.
reportError
(
assertionText
)
;
if
(
releaseBuild
)
{
return
;
}
var
stackText
=
"
"
;
if
(
gTraceOnAssert
)
{
stackText
=
"
Stack
Trace
:
\
n
"
;
var
count
=
0
;
var
caller
=
arguments
.
callee
.
caller
;
while
(
caller
)
{
stackText
+
=
count
+
+
+
"
:
"
+
caller
.
name
+
"
(
"
;
for
(
var
i
=
0
;
i
<
caller
.
arguments
.
length
;
+
+
i
)
{
var
arg
=
caller
.
arguments
[
i
]
;
stackText
+
=
arg
;
if
(
i
<
caller
.
arguments
.
length
-
1
)
stackText
+
=
"
"
;
}
stackText
+
=
"
)
\
n
"
;
caller
=
caller
.
arguments
.
callee
.
caller
;
}
}
dump
(
assertionText
+
stackText
)
;
}
