"
use
strict
"
;
const
sandbox
=
new
Cu
.
Sandbox
(
null
{
wantComponents
:
false
wantGlobalProperties
:
[
"
URL
"
]
}
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
third_party
/
cfworker
/
json
-
schema
.
js
"
sandbox
)
;
Cu
.
exportFunction
(
function
validateMozUrlFormat
(
input
)
{
try
{
const
formatted
=
Services
.
urlFormatter
.
formatURL
(
input
)
;
return
Cu
.
waiveXrays
(
sandbox
.
fastFormat
)
.
uri
(
formatted
)
;
}
catch
{
return
false
;
}
}
sandbox
.
fastFormat
{
defineAs
:
"
moz
-
url
-
format
"
}
)
;
Cu
.
evalInSandbox
(
this
.
initialBaseURI
=
initialBaseURI
=
new
URL
(
"
http
:
/
/
mozilla
.
org
"
)
;
sandbox
)
;
class
Validator
{
#
inner
;
#
draft
;
constructor
(
schema
{
draft
=
detectSchemaDraft
(
schema
)
shortCircuit
=
true
}
=
{
}
)
{
this
.
#
draft
=
draft
;
this
.
#
inner
=
Cu
.
waiveXrays
(
new
sandbox
.
Validator
(
Cu
.
cloneInto
(
schema
sandbox
)
draft
shortCircuit
)
)
;
}
validate
(
instance
)
{
return
this
.
#
inner
.
validate
(
Cu
.
cloneInto
(
instance
sandbox
)
)
;
}
addSchema
(
schema
id
)
{
const
draft
=
detectSchemaDraft
(
schema
undefined
)
;
if
(
draft
&
&
this
.
#
draft
!
=
draft
)
{
Cu
.
reportError
(
Adding
a
draft
"
{
draft
}
"
schema
to
a
draft
"
{
this
.
#
draft
}
"
validator
.
)
;
}
this
.
#
inner
.
addSchema
(
Cu
.
cloneInto
(
schema
sandbox
)
id
)
;
}
}
function
validate
(
instance
schema
{
draft
=
detectSchemaDraft
(
schema
)
shortCircuit
=
true
}
=
{
}
)
{
const
clonedSchema
=
Cu
.
cloneInto
(
schema
sandbox
)
;
return
sandbox
.
validate
(
Cu
.
cloneInto
(
instance
sandbox
)
clonedSchema
draft
sandbox
.
dereference
(
clonedSchema
)
shortCircuit
)
;
}
function
detectSchemaDraft
(
schema
defaultDraft
=
"
2019
-
09
"
)
{
const
{
schema
}
=
schema
;
if
(
typeof
schema
=
=
=
"
undefined
"
)
{
return
defaultDraft
;
}
switch
(
schema
)
{
case
"
http
:
/
/
json
-
schema
.
org
/
draft
-
04
/
schema
#
"
:
return
"
4
"
;
case
"
http
:
/
/
json
-
schema
.
org
/
draft
-
06
/
schema
#
"
:
return
"
6
"
;
case
"
http
:
/
/
json
-
schema
.
org
/
draft
-
07
/
schema
#
"
:
return
"
7
"
;
case
"
https
:
/
/
json
-
schema
.
org
/
draft
/
2019
-
09
/
schema
"
:
return
"
2019
-
09
"
;
case
"
https
:
/
/
json
-
schema
.
org
/
draft
/
2020
-
12
/
schema
"
:
return
"
2020
-
12
"
;
default
:
Cu
.
reportError
(
Unexpected
schema
"
{
schema
}
"
defaulting
to
{
defaultDraft
}
.
)
;
return
defaultDraft
;
}
}
const
JsonSchema
=
{
Validator
validate
detectSchemaDraft
}
;
const
EXPORTED_SYMBOLS
=
[
"
JsonSchema
"
]
;
