"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
sandbox
=
new
Cu
.
Sandbox
(
null
{
wantComponents
:
false
wantGlobalProperties
:
[
"
URL
"
]
}
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
third_party
/
cfworker
/
json
-
schema
.
js
"
sandbox
)
;
Cu
.
exportFunction
(
function
validateMozUrlFormat
(
input
)
{
try
{
const
formatted
=
Services
.
urlFormatter
.
formatURL
(
input
)
;
return
Cu
.
waiveXrays
(
sandbox
.
fastFormat
)
.
uri
(
formatted
)
;
}
catch
{
return
false
;
}
}
sandbox
.
fastFormat
{
defineAs
:
"
moz
-
url
-
format
"
}
)
;
class
Validator
{
#
inner
;
constructor
(
schema
draft
=
"
2019
-
09
"
shortCircuit
=
true
)
{
this
.
#
inner
=
Cu
.
waiveXrays
(
new
sandbox
.
Validator
(
Cu
.
cloneInto
(
schema
sandbox
)
draft
shortCircuit
)
)
;
}
validate
(
instance
)
{
return
this
.
#
inner
.
validate
(
Cu
.
cloneInto
(
instance
sandbox
)
)
;
}
addSchema
(
schema
id
)
{
this
.
#
inner
.
addSchema
(
Cu
.
cloneInto
(
schema
sandbox
)
id
)
;
}
}
function
validate
(
instance
schema
{
draft
=
"
2019
-
09
"
shortCircuit
=
true
}
=
{
}
)
{
const
clonedSchema
=
Cu
.
cloneInto
(
schema
sandbox
)
;
return
sandbox
.
validate
(
Cu
.
cloneInto
(
instance
sandbox
)
clonedSchema
draft
sandbox
.
dereference
(
clonedSchema
)
shortCircuit
)
;
}
const
EXPORTED_SYMBOLS
=
[
"
Validator
"
"
validate
"
"
sandbox
"
]
;
