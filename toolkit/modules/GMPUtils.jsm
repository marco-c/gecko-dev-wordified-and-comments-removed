"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GMP_PLUGIN_IDS
"
"
GMPPrefs
"
"
GMPUtils
"
"
OPEN_H264_ID
"
"
WIDEVINE_ID
"
]
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
UpdateUtils
"
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
const
OPEN_H264_ID
=
"
gmp
-
gmpopenh264
"
;
const
WIDEVINE_ID
=
"
gmp
-
widevinecdm
"
;
const
GMP_PLUGIN_IDS
=
[
OPEN_H264_ID
WIDEVINE_ID
]
;
var
GMPUtils
=
{
isPluginHidden
(
aPlugin
)
{
if
(
this
.
_is32bitModeMacOS
(
)
)
{
return
true
;
}
if
(
!
this
.
_isPluginSupported
(
aPlugin
)
|
|
!
this
.
_isPluginVisible
(
aPlugin
)
)
{
return
true
;
}
if
(
!
aPlugin
.
isEME
)
{
return
false
;
}
if
(
!
GMPPrefs
.
getBool
(
GMPPrefs
.
KEY_EME_ENABLED
true
)
)
{
return
true
;
}
return
false
;
}
_isPluginSupported
(
aPlugin
)
{
if
(
this
.
_isPluginForceSupported
(
aPlugin
)
)
{
return
true
;
}
if
(
aPlugin
.
id
=
=
WIDEVINE_ID
)
{
return
(
AppConstants
.
platform
=
=
"
win
"
|
|
AppConstants
.
platform
=
=
"
macosx
"
|
|
AppConstants
.
platform
=
=
"
linux
"
)
;
}
return
true
;
}
_is32bitModeMacOS
(
)
{
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
return
false
;
}
return
Services
.
appinfo
.
XPCOMABI
.
split
(
"
-
"
)
[
0
]
=
=
"
x86
"
;
}
_isPluginVisible
(
aPlugin
)
{
return
GMPPrefs
.
getBool
(
GMPPrefs
.
KEY_PLUGIN_VISIBLE
false
aPlugin
.
id
)
;
}
_isPluginForceSupported
(
aPlugin
)
{
return
GMPPrefs
.
getBool
(
GMPPrefs
.
KEY_PLUGIN_FORCE_SUPPORTED
false
aPlugin
.
id
)
;
}
_isWindowsOnARM64
(
)
{
return
AppConstants
.
platform
=
=
"
win
"
&
&
UpdateUtils
.
ABI
.
match
(
/
aarch64
/
)
;
}
_expectedABI
(
aPlugin
)
{
let
defaultABI
=
UpdateUtils
.
ABI
;
if
(
aPlugin
.
id
=
=
WIDEVINE_ID
&
&
this
.
_isWindowsOnARM64
(
)
)
{
defaultABI
=
defaultABI
.
replace
(
/
aarch64
/
g
"
x86
"
)
;
}
return
defaultABI
;
}
}
;
var
GMPPrefs
=
{
KEY_EME_ENABLED
:
"
media
.
eme
.
enabled
"
KEY_PLUGIN_ENABLED
:
"
media
.
{
0
}
.
enabled
"
KEY_PLUGIN_LAST_UPDATE
:
"
media
.
{
0
}
.
lastUpdate
"
KEY_PLUGIN_VERSION
:
"
media
.
{
0
}
.
version
"
KEY_PLUGIN_AUTOUPDATE
:
"
media
.
{
0
}
.
autoupdate
"
KEY_PLUGIN_VISIBLE
:
"
media
.
{
0
}
.
visible
"
KEY_PLUGIN_ABI
:
"
media
.
{
0
}
.
abi
"
KEY_PLUGIN_FORCE_SUPPORTED
:
"
media
.
{
0
}
.
forceSupported
"
KEY_URL
:
"
media
.
gmp
-
manager
.
url
"
KEY_URL_OVERRIDE
:
"
media
.
gmp
-
manager
.
url
.
override
"
KEY_CERT_CHECKATTRS
:
"
media
.
gmp
-
manager
.
cert
.
checkAttributes
"
KEY_CERT_REQUIREBUILTIN
:
"
media
.
gmp
-
manager
.
cert
.
requireBuiltIn
"
KEY_CHECK_CONTENT_SIGNATURE
:
"
media
.
gmp
-
manager
.
checkContentSignature
"
KEY_UPDATE_LAST_CHECK
:
"
media
.
gmp
-
manager
.
lastCheck
"
KEY_SECONDS_BETWEEN_CHECKS
:
"
media
.
gmp
-
manager
.
secondsBetweenChecks
"
KEY_UPDATE_ENABLED
:
"
media
.
gmp
-
manager
.
updateEnabled
"
KEY_APP_DISTRIBUTION
:
"
distribution
.
id
"
KEY_APP_DISTRIBUTION_VERSION
:
"
distribution
.
version
"
KEY_BUILDID
:
"
media
.
gmp
-
manager
.
buildID
"
KEY_CERTS_BRANCH
:
"
media
.
gmp
-
manager
.
certs
.
"
KEY_PROVIDER_ENABLED
:
"
media
.
gmp
-
provider
.
enabled
"
KEY_LOG_BASE
:
"
media
.
gmp
.
log
.
"
KEY_LOGGING_LEVEL
:
"
media
.
gmp
.
log
.
level
"
KEY_LOGGING_DUMP
:
"
media
.
gmp
.
log
.
dump
"
getString
(
aKey
aDefaultValue
aPlugin
)
{
if
(
aKey
=
=
=
this
.
KEY_APP_DISTRIBUTION
|
|
aKey
=
=
=
this
.
KEY_APP_DISTRIBUTION_VERSION
)
{
return
Services
.
prefs
.
getDefaultBranch
(
null
)
.
getCharPref
(
aKey
"
default
"
)
;
}
return
Services
.
prefs
.
getStringPref
(
this
.
getPrefKey
(
aKey
aPlugin
)
aDefaultValue
)
;
}
getInt
(
aKey
aDefaultValue
aPlugin
)
{
return
Services
.
prefs
.
getIntPref
(
this
.
getPrefKey
(
aKey
aPlugin
)
aDefaultValue
)
;
}
getBool
(
aKey
aDefaultValue
aPlugin
)
{
return
Services
.
prefs
.
getBoolPref
(
this
.
getPrefKey
(
aKey
aPlugin
)
aDefaultValue
)
;
}
setString
(
aKey
aVal
aPlugin
)
{
Services
.
prefs
.
setStringPref
(
this
.
getPrefKey
(
aKey
aPlugin
)
aVal
)
;
}
setBool
(
aKey
aVal
aPlugin
)
{
Services
.
prefs
.
setBoolPref
(
this
.
getPrefKey
(
aKey
aPlugin
)
aVal
)
;
}
setInt
(
aKey
aVal
aPlugin
)
{
Services
.
prefs
.
setIntPref
(
this
.
getPrefKey
(
aKey
aPlugin
)
aVal
)
;
}
isSet
(
aKey
aPlugin
)
{
return
Services
.
prefs
.
prefHasUserValue
(
this
.
getPrefKey
(
aKey
aPlugin
)
)
;
}
reset
(
aKey
aPlugin
)
{
Services
.
prefs
.
clearUserPref
(
this
.
getPrefKey
(
aKey
aPlugin
)
)
;
}
getPrefKey
(
aKey
aPlugin
)
{
return
aKey
.
replace
(
"
{
0
}
"
aPlugin
|
|
"
"
)
;
}
}
;
