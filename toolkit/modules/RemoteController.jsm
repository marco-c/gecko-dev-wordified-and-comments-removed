this
.
EXPORTED_SYMBOLS
=
[
"
RemoteController
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
function
RemoteController
(
browser
)
{
this
.
_browser
=
browser
;
this
.
_supportedCommands
=
{
}
;
}
RemoteController
.
prototype
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIController
Ci
.
nsICommandController
]
)
isCommandEnabled
:
function
(
aCommand
)
{
return
this
.
_supportedCommands
[
aCommand
]
|
|
false
;
}
supportsCommand
:
function
(
aCommand
)
{
return
aCommand
in
this
.
_supportedCommands
;
}
doCommand
:
function
(
aCommand
)
{
this
.
_browser
.
messageManager
.
sendAsyncMessage
(
"
ControllerCommands
:
Do
"
aCommand
)
;
}
getCommandStateWithParams
:
function
(
aCommand
aCommandParams
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
doCommandWithParams
:
function
(
aCommand
aCommandParams
)
{
let
cmd
=
{
cmd
:
aCommand
params
:
null
}
;
if
(
aCommand
=
=
"
cmd_lookUpDictionary
"
)
{
let
rect
=
this
.
_browser
.
getBoundingClientRect
(
)
;
cmd
.
params
=
{
x
:
{
type
:
"
long
"
value
:
aCommandParams
.
getLongValue
(
"
x
"
)
-
rect
.
left
}
y
:
{
type
:
"
long
"
value
:
aCommandParams
.
getLongValue
(
"
y
"
)
-
rect
.
top
}
}
;
}
else
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
this
.
_browser
.
messageManager
.
sendAsyncMessage
(
"
ControllerCommands
:
DoWithParams
"
cmd
)
;
}
getSupportedCommands
:
function
(
aCount
aCommands
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
onEvent
:
function
(
)
{
}
enableDisableCommands
:
function
(
aAction
aEnabledLength
aEnabledCommands
aDisabledLength
aDisabledCommands
)
{
this
.
_supportedCommands
=
{
}
;
for
(
let
c
=
0
;
c
<
aEnabledLength
;
c
+
+
)
{
this
.
_supportedCommands
[
aEnabledCommands
[
c
]
]
=
true
;
}
for
(
let
c
=
0
;
c
<
aDisabledLength
;
c
+
+
)
{
this
.
_supportedCommands
[
aDisabledCommands
[
c
]
]
=
false
;
}
this
.
_browser
.
ownerDocument
.
defaultView
.
updateCommands
(
aAction
)
;
}
}
;
