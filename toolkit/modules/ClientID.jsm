"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ClientID
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
LOGGER_NAME
=
"
Toolkit
.
Telemetry
"
;
const
LOGGER_PREFIX
=
"
ClientID
:
:
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CommonUtils
"
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gDatareportingPath
"
(
)
=
>
{
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
datareporting
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gStateFilePath
"
(
)
=
>
{
return
OS
.
Path
.
join
(
gDatareportingPath
"
state
.
json
"
)
;
}
)
;
const
PREF_CACHED_CLIENTID
=
"
toolkit
.
telemetry
.
cachedClientID
"
;
function
isValidClientID
(
id
)
{
const
UUID_REGEX
=
/
^
[
0
-
9a
-
f
]
{
8
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
12
}
/
i
;
return
UUID_REGEX
.
test
(
id
)
;
}
this
.
ClientID
=
Object
.
freeze
(
{
getClientID
:
function
(
)
{
return
ClientIDImpl
.
getClientID
(
)
;
}
getCachedClientID
:
function
(
)
{
return
ClientIDImpl
.
getCachedClientID
(
)
;
}
_reset
:
function
(
)
{
return
ClientIDImpl
.
_reset
(
)
;
}
}
)
;
var
ClientIDImpl
=
{
_clientID
:
null
_loadClientIdTask
:
null
_saveClientIdTask
:
null
_logger
:
null
_loadClientID
:
function
(
)
{
if
(
this
.
_loadClientIdTask
)
{
return
this
.
_loadClientIdTask
;
}
this
.
_loadClientIdTask
=
this
.
_doLoadClientID
(
)
;
let
clear
=
(
)
=
>
this
.
_loadClientIdTask
=
null
;
this
.
_loadClientIdTask
.
then
(
clear
clear
)
;
return
this
.
_loadClientIdTask
;
}
_doLoadClientID
:
Task
.
async
(
function
*
(
)
{
try
{
let
state
=
yield
CommonUtils
.
readJSON
(
gStateFilePath
)
;
if
(
state
&
&
this
.
updateClientID
(
state
.
clientID
)
)
{
return
this
.
_clientID
;
}
}
catch
(
e
)
{
}
try
{
let
fhrStatePath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
healthreport
"
"
state
.
json
"
)
;
let
state
=
yield
CommonUtils
.
readJSON
(
fhrStatePath
)
;
if
(
state
&
&
this
.
updateClientID
(
state
.
clientID
)
)
{
this
.
_saveClientID
(
)
;
return
this
.
_clientID
;
}
}
catch
(
e
)
{
}
this
.
updateClientID
(
CommonUtils
.
generateUUID
(
)
)
;
this
.
_saveClientIdTask
=
this
.
_saveClientID
(
)
;
yield
this
.
_saveClientIdTask
;
return
this
.
_clientID
;
}
)
_saveClientID
:
Task
.
async
(
function
*
(
)
{
let
obj
=
{
clientID
:
this
.
_clientID
}
;
yield
OS
.
File
.
makeDir
(
gDatareportingPath
)
;
yield
CommonUtils
.
writeJSON
(
obj
gStateFilePath
)
;
this
.
_saveClientIdTask
=
null
;
}
)
getClientID
:
function
(
)
{
if
(
!
this
.
_clientID
)
{
return
this
.
_loadClientID
(
)
;
}
return
Promise
.
resolve
(
this
.
_clientID
)
;
}
getCachedClientID
:
function
(
)
{
if
(
this
.
_clientID
)
{
return
this
.
_clientID
;
}
let
id
=
Preferences
.
get
(
PREF_CACHED_CLIENTID
null
)
;
if
(
id
=
=
=
null
)
{
return
null
;
}
if
(
!
isValidClientID
(
id
)
)
{
this
.
_log
.
error
(
"
getCachedClientID
-
invalid
client
id
in
preferences
resetting
"
id
)
;
Preferences
.
reset
(
PREF_CACHED_CLIENTID
)
;
return
null
;
}
return
id
;
}
_reset
:
Task
.
async
(
function
*
(
)
{
yield
this
.
_loadClientIdTask
;
yield
this
.
_saveClientIdTask
;
this
.
_clientID
=
null
;
}
)
updateClientID
:
function
(
id
)
{
if
(
!
isValidClientID
(
id
)
)
{
this
.
_log
.
error
(
"
updateClientID
-
invalid
client
ID
"
id
)
;
return
false
;
}
this
.
_clientID
=
id
;
Preferences
.
set
(
PREF_CACHED_CLIENTID
this
.
_clientID
)
;
return
true
;
}
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
)
;
}
return
this
.
_logger
;
}
}
;
