"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
IndexedDB
"
]
;
Cu
.
importGlobalProperties
(
[
"
indexedDB
"
]
)
;
function
wrapRequest
(
request
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
request
.
onsuccess
=
(
)
=
>
{
resolve
(
request
.
result
)
;
}
;
request
.
onerror
=
(
)
=
>
{
reject
(
request
.
error
)
;
}
;
}
)
;
}
function
forwardGetters
(
cls
target
props
)
{
for
(
let
prop
of
props
)
{
Object
.
defineProperty
(
cls
.
prototype
prop
{
get
(
)
{
return
this
[
target
]
[
prop
]
;
}
}
)
;
}
}
function
forwardProps
(
cls
target
props
)
{
for
(
let
prop
of
props
)
{
Object
.
defineProperty
(
cls
.
prototype
prop
{
get
(
)
{
return
this
[
target
]
[
prop
]
;
}
set
(
value
)
{
this
[
target
]
[
prop
]
=
value
;
}
}
)
;
}
}
function
wrapMethods
(
cls
target
methods
)
{
for
(
let
method
of
methods
)
{
cls
.
prototype
[
method
]
=
function
(
.
.
.
args
)
{
return
wrapRequest
(
this
[
target
]
[
method
]
(
.
.
.
args
)
)
;
}
;
}
}
function
forwardMethods
(
cls
target
methods
)
{
for
(
let
method
of
methods
)
{
cls
.
prototype
[
method
]
=
function
(
.
.
.
args
)
{
return
this
[
target
]
[
method
]
(
.
.
.
args
)
;
}
;
}
}
class
Cursor
{
constructor
(
cursor
source
)
{
this
.
cursor
=
cursor
;
this
.
source
=
source
;
}
}
forwardGetters
(
Cursor
"
cursor
"
[
"
direction
"
"
key
"
"
primaryKey
"
]
)
;
wrapMethods
(
Cursor
"
cursor
"
[
"
delete
"
"
update
"
]
)
;
forwardMethods
(
Cursor
"
cursor
"
[
"
advance
"
"
continue
"
"
continuePrimaryKey
"
]
)
;
class
CursorWithValue
extends
Cursor
{
}
forwardGetters
(
CursorWithValue
"
cursor
"
[
"
value
"
]
)
;
class
Cursed
{
constructor
(
cursed
)
{
this
.
cursed
=
cursed
;
}
openCursor
(
.
.
.
args
)
{
return
wrapRequest
(
this
.
cursed
.
openCursor
(
.
.
.
args
)
)
.
then
(
cursor
=
>
{
return
new
CursorWithValue
(
cursor
this
)
;
}
)
;
}
openKeyCursor
(
.
.
.
args
)
{
return
wrapRequest
(
this
.
cursed
.
openKeyCursor
(
.
.
.
args
)
)
.
then
(
cursor
=
>
{
return
new
Cursor
(
cursor
this
)
;
}
)
;
}
}
wrapMethods
(
Cursed
"
cursed
"
[
"
count
"
"
get
"
"
getAll
"
"
getAllKeys
"
"
getKey
"
]
)
;
class
Index
extends
Cursed
{
constructor
(
index
objectStore
)
{
super
(
index
)
;
this
.
objectStore
=
objectStore
;
this
.
index
=
index
;
}
}
forwardGetters
(
Index
"
index
"
[
"
isAutoLocale
"
"
keyPath
"
"
locale
"
"
multiEntry
"
"
name
"
"
unique
"
]
)
;
class
ObjectStore
extends
Cursed
{
constructor
(
store
)
{
super
(
store
)
;
this
.
store
=
store
;
}
createIndex
(
.
.
.
args
)
{
return
new
Index
(
this
.
store
.
createIndex
(
.
.
.
args
)
this
)
;
}
index
(
.
.
.
args
)
{
return
new
Index
(
this
.
store
.
index
(
.
.
.
args
)
this
)
;
}
}
wrapMethods
(
ObjectStore
"
store
"
[
"
add
"
"
clear
"
"
delete
"
"
put
"
]
)
;
forwardMethods
(
ObjectStore
"
store
"
[
"
deleteIndex
"
]
)
;
class
Transaction
{
constructor
(
transaction
)
{
this
.
transaction
=
transaction
;
this
.
_completionPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
transaction
.
oncomplete
=
resolve
;
transaction
.
onerror
=
(
)
=
>
{
reject
(
transaction
.
error
)
;
}
;
}
)
;
}
objectStore
(
name
)
{
return
new
ObjectStore
(
this
.
transaction
.
objectStore
(
name
)
)
;
}
promiseComplete
(
)
{
return
this
.
_completionPromise
;
}
}
forwardGetters
(
Transaction
"
transaction
"
[
"
db
"
"
mode
"
"
error
"
"
objectStoreNames
"
]
)
;
forwardMethods
(
Transaction
"
transaction
"
[
"
abort
"
]
)
;
class
IndexedDB
{
static
open
(
dbName
options
onupgradeneeded
=
null
)
{
let
request
=
indexedDB
.
open
(
dbName
options
)
;
request
.
onupgradeneeded
=
event
=
>
{
let
db
=
new
this
(
request
.
result
)
;
if
(
onupgradeneeded
)
{
onupgradeneeded
(
db
event
)
;
}
else
{
db
.
onupgradeneeded
(
event
)
;
}
}
;
return
wrapRequest
(
request
)
.
then
(
db
=
>
new
IndexedDB
(
db
)
)
;
}
constructor
(
db
)
{
this
.
db
=
db
;
}
onupgradeneeded
(
)
{
}
transaction
(
storeNames
mode
callback
=
null
)
{
let
transaction
=
new
Transaction
(
this
.
db
.
transaction
(
storeNames
mode
)
)
;
if
(
callback
)
{
let
result
=
new
Promise
(
resolve
=
>
{
resolve
(
callback
(
transaction
)
)
;
}
)
;
return
transaction
.
promiseComplete
(
)
.
then
(
(
)
=
>
result
)
;
}
return
transaction
;
}
objectStore
(
storeName
mode
callback
=
null
)
{
let
transaction
=
this
.
transaction
(
[
storeName
]
mode
)
;
let
objectStore
=
transaction
.
objectStore
(
storeName
)
;
if
(
callback
)
{
let
result
=
new
Promise
(
resolve
=
>
{
resolve
(
callback
(
objectStore
)
)
;
}
)
;
return
transaction
.
promiseComplete
(
)
.
then
(
(
)
=
>
result
)
;
}
return
objectStore
;
}
createObjectStore
(
.
.
.
args
)
{
return
new
ObjectStore
(
this
.
db
.
createObjectStore
(
.
.
.
args
)
)
;
}
}
for
(
let
method
of
[
"
cmp
"
"
deleteDatabase
"
]
)
{
IndexedDB
[
method
]
=
function
(
.
.
.
args
)
{
return
indexedDB
[
method
]
(
.
.
.
args
)
;
}
;
}
forwardMethods
(
IndexedDB
"
db
"
[
"
addEventListener
"
"
close
"
"
deleteObjectStore
"
"
hasEventListener
"
"
removeEventListener
"
]
)
;
forwardGetters
(
IndexedDB
"
db
"
[
"
name
"
"
objectStoreNames
"
"
version
"
]
)
;
forwardProps
(
IndexedDB
"
db
"
[
"
onabort
"
"
onclose
"
"
onerror
"
"
onversionchange
"
]
)
;
