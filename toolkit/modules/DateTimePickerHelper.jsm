"
use
strict
"
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cu
=
Components
.
utils
;
const
DEBUG
=
false
;
function
debug
(
aStr
)
{
if
(
DEBUG
)
{
dump
(
"
-
*
-
DateTimePickerHelper
:
"
+
aStr
+
"
\
n
"
)
;
}
}
this
.
EXPORTED_SYMBOLS
=
[
"
DateTimePickerHelper
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
this
.
DateTimePickerHelper
=
{
picker
:
null
weakBrowser
:
null
MESSAGES
:
[
"
FormDateTime
:
OpenPicker
"
"
FormDateTime
:
ClosePicker
"
"
FormDateTime
:
UpdatePicker
"
]
init
(
)
{
for
(
let
msg
of
this
.
MESSAGES
)
{
Services
.
mm
.
addMessageListener
(
msg
this
)
;
}
}
uninit
(
)
{
for
(
let
msg
of
this
.
MESSAGES
)
{
Services
.
mm
.
removeMessageListener
(
msg
this
)
;
}
}
receiveMessage
(
aMessage
)
{
debug
(
"
receiveMessage
:
"
+
aMessage
.
name
)
;
switch
(
aMessage
.
name
)
{
case
"
FormDateTime
:
OpenPicker
"
:
{
this
.
showPicker
(
aMessage
.
target
aMessage
.
data
)
;
break
;
}
case
"
FormDateTime
:
ClosePicker
"
:
{
if
(
!
this
.
picker
)
{
return
;
}
this
.
picker
.
closePicker
(
)
;
break
;
}
case
"
FormDateTime
:
UpdatePicker
"
:
{
this
.
picker
.
setPopupValue
(
aMessage
.
data
)
;
break
;
}
default
:
break
;
}
}
handleEvent
(
aEvent
)
{
debug
(
"
handleEvent
:
"
+
aEvent
.
type
)
;
switch
(
aEvent
.
type
)
{
case
"
DateTimePickerValueChanged
"
:
{
this
.
updateInputBoxValue
(
aEvent
)
;
break
;
}
case
"
popuphidden
"
:
{
let
browser
=
this
.
weakBrowser
?
this
.
weakBrowser
.
get
(
)
:
null
;
if
(
browser
)
{
browser
.
messageManager
.
sendAsyncMessage
(
"
FormDateTime
:
PickerClosed
"
)
;
}
this
.
close
(
)
;
break
;
}
default
:
break
;
}
}
updateInputBoxValue
(
aEvent
)
{
let
browser
=
this
.
weakBrowser
?
this
.
weakBrowser
.
get
(
)
:
null
;
if
(
browser
)
{
browser
.
messageManager
.
sendAsyncMessage
(
"
FormDateTime
:
PickerValueChanged
"
aEvent
.
detail
)
;
}
}
showPicker
(
aBrowser
aData
)
{
let
rect
=
aData
.
rect
;
let
type
=
aData
.
type
;
let
detail
=
aData
.
detail
;
this
.
_anchor
=
aBrowser
.
ownerGlobal
.
gBrowser
.
popupAnchor
;
this
.
_anchor
.
left
=
rect
.
left
;
this
.
_anchor
.
top
=
rect
.
top
;
this
.
_anchor
.
width
=
rect
.
width
;
this
.
_anchor
.
height
=
rect
.
height
;
this
.
_anchor
.
hidden
=
false
;
debug
(
"
Opening
picker
with
details
:
"
+
JSON
.
stringify
(
detail
)
)
;
let
window
=
aBrowser
.
ownerGlobal
;
let
tabbrowser
=
window
.
gBrowser
;
if
(
Services
.
focus
.
activeWindow
!
=
window
|
|
tabbrowser
.
selectedBrowser
!
=
aBrowser
)
{
return
;
}
this
.
weakBrowser
=
Cu
.
getWeakReference
(
aBrowser
)
;
this
.
picker
=
aBrowser
.
dateTimePicker
;
if
(
!
this
.
picker
)
{
debug
(
"
aBrowser
.
dateTimePicker
not
found
exiting
now
.
"
)
;
return
;
}
this
.
picker
.
loadPicker
(
type
detail
)
;
this
.
picker
.
openPopup
(
this
.
_anchor
"
after_start
"
0
0
)
;
this
.
addPickerListeners
(
)
;
}
close
(
)
{
this
.
removePickerListeners
(
)
;
this
.
picker
=
null
;
this
.
weakBrowser
=
null
;
this
.
_anchor
.
hidden
=
true
;
}
addPickerListeners
(
)
{
if
(
!
this
.
picker
)
{
return
;
}
this
.
picker
.
addEventListener
(
"
popuphidden
"
this
)
;
this
.
picker
.
addEventListener
(
"
DateTimePickerValueChanged
"
this
)
;
}
removePickerListeners
(
)
{
if
(
!
this
.
picker
)
{
return
;
}
this
.
picker
.
removeEventListener
(
"
popuphidden
"
this
)
;
this
.
picker
.
removeEventListener
(
"
DateTimePickerValueChanged
"
this
)
;
}
}
;
