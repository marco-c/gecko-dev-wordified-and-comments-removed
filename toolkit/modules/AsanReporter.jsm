const
EXPORTED_SYMBOLS
=
[
"
AsanReporter
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
TextDecoder
"
"
XMLHttpRequest
"
]
)
;
const
PREF_CLIENT_ID
=
"
asanreporter
.
clientid
"
;
const
PREF_API_URL
=
"
asanreporter
.
apiurl
"
;
const
PREF_AUTH_TOKEN
=
"
asanreporter
.
authtoken
"
;
const
PREF_LOG_LEVEL
=
"
asanreporter
.
loglevel
"
;
const
REPORTER_PRODUCT
=
{
firefox
:
"
mozilla
-
central
-
asan
-
nightly
"
thunderbird
:
"
comm
-
central
-
asan
-
daily
"
}
;
const
LOGGER_NAME
=
"
asanreporter
"
;
let
logger
;
XPCOMUtils
.
defineLazyGetter
(
this
"
asanDumpDir
"
(
)
=
>
{
let
profileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
return
OS
.
Path
.
join
(
profileDir
.
path
"
asan
"
)
;
}
)
;
const
AsanReporter
=
{
init
(
)
{
if
(
this
.
initialized
)
{
return
;
}
this
.
initialized
=
true
;
logger
=
Log
.
repository
.
getLogger
(
LOGGER_NAME
)
;
logger
.
addAppender
(
new
Log
.
ConsoleAppender
(
new
Log
.
BasicFormatter
(
)
)
)
;
logger
.
addAppender
(
new
Log
.
DumpAppender
(
new
Log
.
BasicFormatter
(
)
)
)
;
logger
.
level
=
Services
.
prefs
.
getIntPref
(
PREF_LOG_LEVEL
Log
.
Level
.
Info
)
;
logger
.
info
(
"
Starting
up
.
.
.
"
)
;
Services
.
obs
.
addObserver
(
this
"
ipc
:
content
-
shutdown
"
)
;
processDirectory
(
)
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
ipc
:
content
-
shutdown
"
)
{
aSubject
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
;
if
(
!
aSubject
.
get
(
"
abnormal
"
)
)
{
return
;
}
processDirectory
(
)
;
}
}
}
;
function
processDirectory
(
)
{
let
iterator
=
new
OS
.
File
.
DirectoryIterator
(
asanDumpDir
)
;
let
results
=
[
]
;
iterator
.
forEach
(
entry
=
>
{
if
(
entry
.
name
.
indexOf
(
"
ff_asan_log
.
"
)
=
=
0
&
&
!
entry
.
name
.
includes
(
"
submitted
"
)
)
{
results
.
push
(
entry
)
;
}
}
)
.
then
(
(
)
=
>
{
iterator
.
close
(
)
;
logger
.
info
(
"
Processing
"
+
results
.
length
+
"
reports
.
.
.
"
)
;
let
requests
=
Promise
.
resolve
(
)
;
results
.
forEach
(
result
=
>
{
requests
=
requests
.
then
(
(
)
=
>
submitReport
(
result
.
path
)
.
then
(
(
)
=
>
{
logger
.
info
(
"
Successfully
submitted
"
+
result
.
path
)
;
}
e
=
>
{
logger
.
error
(
"
Failed
to
submit
"
+
result
.
path
+
"
.
Reason
:
"
+
e
)
;
}
)
)
;
}
)
;
requests
.
then
(
(
)
=
>
logger
.
info
(
"
Done
processing
reports
.
"
)
)
;
}
e
=
>
{
iterator
.
close
(
)
;
logger
.
error
(
"
Error
while
iterating
over
report
files
:
"
+
e
)
;
}
)
;
}
function
submitReport
(
reportFile
)
{
logger
.
info
(
"
Processing
"
+
reportFile
)
;
return
OS
.
File
.
read
(
reportFile
)
.
then
(
submitToServer
)
.
then
(
(
)
=
>
{
return
OS
.
File
.
move
(
reportFile
reportFile
+
"
.
submitted
"
)
;
}
)
;
}
function
submitToServer
(
data
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
logger
.
debug
(
"
Setting
up
XHR
request
"
)
;
let
client
=
Services
.
prefs
.
getStringPref
(
PREF_CLIENT_ID
)
;
let
api_url
=
Services
.
prefs
.
getStringPref
(
PREF_API_URL
)
;
let
auth_token
=
Services
.
prefs
.
getStringPref
(
PREF_AUTH_TOKEN
null
)
;
let
decoder
=
new
TextDecoder
(
)
;
if
(
!
client
)
{
client
=
"
unknown
"
;
}
let
versionArr
=
[
Services
.
appinfo
.
version
Services
.
appinfo
.
appBuildID
AppConstants
.
SOURCE_REVISION_URL
|
|
"
unknown
"
]
;
let
product_version
=
versionArr
.
join
(
"
-
"
)
;
let
os
=
AppConstants
.
platform
;
let
reporter_product
=
REPORTER_PRODUCT
[
AppConstants
.
MOZ_APP_NAME
]
;
let
reportObj
=
{
rawStdout
:
"
"
rawStderr
:
"
"
rawCrashData
:
decoder
.
decode
(
data
)
platform
:
"
x86
-
64
"
product
:
reporter_product
product_version
os
client
tool
:
"
asan
-
nightly
-
program
"
}
;
var
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
"
POST
"
api_url
true
)
;
xhr
.
setRequestHeader
(
"
Content
-
Type
"
"
application
/
json
"
)
;
if
(
auth_token
)
{
xhr
.
setRequestHeader
(
"
Authorization
"
"
Token
"
+
auth_token
)
;
}
else
{
xhr
.
channel
.
loadFlags
|
=
Ci
.
nsIRequest
.
LOAD_ANONYMOUS
;
}
xhr
.
onreadystatechange
=
function
(
)
{
if
(
xhr
.
readyState
=
=
4
)
{
if
(
xhr
.
status
=
=
"
201
"
)
{
logger
.
debug
(
"
XHR
:
OK
"
)
;
resolve
(
xhr
)
;
}
else
{
logger
.
debug
(
"
XHR
:
Status
:
"
+
xhr
.
status
+
"
Response
:
"
+
xhr
.
responseText
)
;
reject
(
xhr
)
;
}
}
}
;
xhr
.
send
(
JSON
.
stringify
(
reportObj
)
)
;
}
)
;
}
