"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserUtils
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
BrowserUtils
=
{
urlSecurityCheck
(
aURL
aPrincipal
aFlags
)
{
var
secMan
=
Services
.
scriptSecurityManager
;
if
(
aFlags
=
=
=
undefined
)
{
aFlags
=
secMan
.
STANDARD
;
}
try
{
if
(
aURL
instanceof
Ci
.
nsIURI
)
{
secMan
.
checkLoadURIWithPrincipal
(
aPrincipal
aURL
aFlags
)
;
}
else
{
secMan
.
checkLoadURIStrWithPrincipal
(
aPrincipal
aURL
aFlags
)
;
}
}
catch
(
e
)
{
let
principalStr
=
"
"
;
try
{
principalStr
=
"
from
"
+
aPrincipal
.
spec
;
}
catch
(
e2
)
{
}
throw
new
Error
(
Load
of
{
aURL
+
principalStr
}
denied
.
)
;
}
}
principalWithMatchingOA
(
principal
existingPrincipal
)
{
if
(
principal
.
isSystemPrincipal
)
{
return
principal
;
}
if
(
existingPrincipal
.
originSuffix
=
=
principal
.
originSuffix
)
{
return
principal
;
}
let
secMan
=
Services
.
scriptSecurityManager
;
if
(
principal
.
isContentPrincipal
)
{
return
secMan
.
principalWithOA
(
principal
existingPrincipal
.
originAttributes
)
;
}
if
(
principal
.
isNullPrincipal
)
{
return
secMan
.
createNullPrincipal
(
existingPrincipal
.
originAttributes
)
;
}
throw
new
Error
(
"
Can
'
t
change
the
originAttributes
of
an
expanded
principal
!
"
)
;
}
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
{
if
(
originalTarget
!
=
"
"
|
|
!
isAppTab
)
{
return
originalTarget
;
}
let
linkHost
;
let
docHost
;
try
{
linkHost
=
linkURI
.
host
;
docHost
=
linkNode
.
ownerDocument
.
documentURIObject
.
host
;
}
catch
(
e
)
{
return
originalTarget
;
}
if
(
docHost
=
=
linkHost
)
{
return
originalTarget
;
}
let
[
longHost
shortHost
]
=
linkHost
.
length
>
docHost
.
length
?
[
linkHost
docHost
]
:
[
docHost
linkHost
]
;
if
(
longHost
=
=
"
www
.
"
+
shortHost
)
{
return
originalTarget
;
}
return
"
_blank
"
;
}
mimeTypeIsTextBased
(
mimeType
)
{
return
(
mimeType
.
startsWith
(
"
text
/
"
)
|
|
mimeType
.
endsWith
(
"
+
xml
"
)
|
|
mimeType
=
=
"
application
/
x
-
javascript
"
|
|
mimeType
=
=
"
application
/
javascript
"
|
|
mimeType
=
=
"
application
/
json
"
|
|
mimeType
=
=
"
application
/
xml
"
)
;
}
canFindInPage
(
location
)
{
return
(
!
location
.
startsWith
(
"
about
:
addons
"
)
&
&
!
location
.
startsWith
(
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
aboutaddons
.
html
"
)
&
&
!
location
.
startsWith
(
"
about
:
preferences
"
)
)
;
}
isFindbarVisible
(
docShell
)
{
const
FINDER_JSM
=
"
resource
:
/
/
gre
/
modules
/
Finder
.
jsm
"
;
return
(
Cu
.
isModuleLoaded
(
FINDER_JSM
)
&
&
ChromeUtils
.
import
(
FINDER_JSM
)
.
Finder
.
isFindbarVisible
(
docShell
)
)
;
}
promiseObserved
(
topic
test
=
(
)
=
>
true
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
(
subject
topic
data
)
=
>
{
if
(
test
(
subject
data
)
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
{
subject
data
}
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
topic
)
;
}
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
BrowserUtils
"
navigationRequireUserInteraction
"
"
browser
.
navigation
.
requireUserInteraction
"
false
)
;
