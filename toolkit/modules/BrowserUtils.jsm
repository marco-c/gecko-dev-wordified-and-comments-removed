"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserUtils
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
var
BrowserUtils
=
{
dumpLn
(
.
.
.
args
)
{
for
(
let
a
of
args
)
dump
(
a
+
"
"
)
;
dump
(
"
\
n
"
)
;
}
restartApplication
(
)
{
let
cancelQuit
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelQuit
"
quit
-
application
-
requested
"
"
restart
"
)
;
if
(
cancelQuit
.
data
)
{
return
false
;
}
if
(
Services
.
appinfo
.
inSafeMode
)
{
Services
.
startup
.
restartInSafeMode
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
return
undefined
;
}
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
return
undefined
;
}
urlSecurityCheck
(
aURL
aPrincipal
aFlags
)
{
var
secMan
=
Services
.
scriptSecurityManager
;
if
(
aFlags
=
=
=
undefined
)
{
aFlags
=
secMan
.
STANDARD
;
}
try
{
if
(
aURL
instanceof
Ci
.
nsIURI
)
secMan
.
checkLoadURIWithPrincipal
(
aPrincipal
aURL
aFlags
)
;
else
secMan
.
checkLoadURIStrWithPrincipal
(
aPrincipal
aURL
aFlags
)
;
}
catch
(
e
)
{
let
principalStr
=
"
"
;
try
{
principalStr
=
"
from
"
+
aPrincipal
.
URI
.
spec
;
}
catch
(
e2
)
{
}
throw
"
Load
of
"
+
aURL
+
principalStr
+
"
denied
.
"
;
}
}
principalWithMatchingOA
(
principal
existingPrincipal
)
{
if
(
principal
.
isSystemPrincipal
)
{
return
principal
;
}
if
(
existingPrincipal
.
originSuffix
=
=
principal
.
originSuffix
)
{
return
principal
;
}
let
secMan
=
Services
.
scriptSecurityManager
;
if
(
principal
.
isCodebasePrincipal
)
{
return
secMan
.
createCodebasePrincipal
(
principal
.
URI
existingPrincipal
.
originAttributes
)
;
}
if
(
principal
.
isNullPrincipal
)
{
return
secMan
.
createNullPrincipal
(
existingPrincipal
.
originAttributes
)
;
}
throw
new
Error
(
"
Can
'
t
change
the
originAttributes
of
an
expanded
principal
!
"
)
;
}
makeURI
(
aURL
aOriginCharset
aBaseURI
)
{
return
Services
.
io
.
newURI
(
aURL
aOriginCharset
aBaseURI
)
;
}
makeFileURI
(
aFile
)
{
return
Services
.
io
.
newFileURI
(
aFile
)
;
}
makeURIFromCPOW
(
aCPOWURI
)
{
return
Services
.
io
.
newURI
(
aCPOWURI
.
spec
)
;
}
getElementBoundingScreenRect
(
aElement
)
{
return
this
.
getElementBoundingRect
(
aElement
true
)
;
}
getElementBoundingRect
(
aElement
aInScreenCoords
)
{
let
rect
=
aElement
.
getBoundingClientRect
(
)
;
let
win
=
aElement
.
ownerGlobal
;
let
x
=
rect
.
left
y
=
rect
.
top
;
let
parentFrame
=
win
.
frameElement
;
while
(
parentFrame
)
{
win
=
parentFrame
.
ownerGlobal
;
let
cstyle
=
win
.
getComputedStyle
(
parentFrame
)
;
let
framerect
=
parentFrame
.
getBoundingClientRect
(
)
;
x
+
=
framerect
.
left
+
parseFloat
(
cstyle
.
borderLeftWidth
)
+
parseFloat
(
cstyle
.
paddingLeft
)
;
y
+
=
framerect
.
top
+
parseFloat
(
cstyle
.
borderTopWidth
)
+
parseFloat
(
cstyle
.
paddingTop
)
;
parentFrame
=
win
.
frameElement
;
}
if
(
aInScreenCoords
)
{
x
+
=
win
.
mozInnerScreenX
;
y
+
=
win
.
mozInnerScreenY
;
}
let
fullZoom
=
win
.
windowUtils
.
fullZoom
;
rect
=
{
left
:
x
*
fullZoom
top
:
y
*
fullZoom
width
:
rect
.
width
*
fullZoom
height
:
rect
.
height
*
fullZoom
}
;
return
rect
;
}
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
{
if
(
originalTarget
!
=
"
"
|
|
!
isAppTab
)
return
originalTarget
;
let
linkHost
;
let
docHost
;
try
{
linkHost
=
linkURI
.
host
;
docHost
=
linkNode
.
ownerDocument
.
documentURIObject
.
host
;
}
catch
(
e
)
{
return
originalTarget
;
}
if
(
docHost
=
=
linkHost
)
return
originalTarget
;
let
[
longHost
shortHost
]
=
linkHost
.
length
>
docHost
.
length
?
[
linkHost
docHost
]
:
[
docHost
linkHost
]
;
if
(
longHost
=
=
"
www
.
"
+
shortHost
)
return
originalTarget
;
return
"
_blank
"
;
}
makeNicePluginName
(
aName
)
{
if
(
aName
=
=
"
Shockwave
Flash
"
)
return
"
Adobe
Flash
"
;
if
(
/
^
Java
\
W
/
.
exec
(
aName
)
)
return
"
Java
"
;
let
newName
=
aName
.
replace
(
/
\
(
.
*
?
\
)
/
g
"
"
)
.
replace
(
/
[
\
s
\
d
\
.
\
-
\
_
\
(
\
)
]
+
/
"
"
)
.
replace
(
/
\
bplug
-
?
in
\
b
/
i
"
"
)
.
trim
(
)
;
return
newName
;
}
linkHasNoReferrer
(
linkNode
)
{
if
(
!
linkNode
)
return
true
;
let
rel
=
linkNode
.
getAttribute
(
"
rel
"
)
;
if
(
!
rel
)
return
false
;
let
values
=
rel
.
split
(
/
[
\
t
\
r
\
n
\
f
]
/
)
;
return
values
.
includes
(
"
noreferrer
"
)
;
}
mimeTypeIsTextBased
(
mimeType
)
{
return
mimeType
.
startsWith
(
"
text
/
"
)
|
|
mimeType
.
endsWith
(
"
+
xml
"
)
|
|
mimeType
=
=
"
application
/
x
-
javascript
"
|
|
mimeType
=
=
"
application
/
javascript
"
|
|
mimeType
=
=
"
application
/
json
"
|
|
mimeType
=
=
"
application
/
xml
"
|
|
mimeType
=
=
"
mozilla
.
application
/
cached
-
xul
"
;
}
shouldFastFind
(
elt
)
{
if
(
elt
)
{
let
win
=
elt
.
ownerGlobal
;
if
(
elt
instanceof
win
.
HTMLInputElement
&
&
elt
.
mozIsTextField
(
false
)
)
return
false
;
if
(
elt
.
isContentEditable
|
|
win
.
document
.
designMode
=
=
"
on
"
)
return
false
;
if
(
elt
instanceof
win
.
HTMLTextAreaElement
|
|
elt
instanceof
win
.
HTMLSelectElement
|
|
elt
instanceof
win
.
HTMLObjectElement
|
|
elt
instanceof
win
.
HTMLEmbedElement
)
return
false
;
}
return
true
;
}
canFindInPage
(
location
)
{
return
!
location
.
startsWith
(
"
about
:
addons
"
)
&
&
!
location
.
startsWith
(
"
about
:
preferences
"
)
;
}
_visibleToolbarsMap
:
new
WeakMap
(
)
isToolbarVisible
(
docShell
which
)
{
let
window
=
this
.
getRootWindow
(
docShell
)
;
if
(
!
this
.
_visibleToolbarsMap
.
has
(
window
)
)
return
false
;
let
toolbars
=
this
.
_visibleToolbarsMap
.
get
(
window
)
;
return
!
!
toolbars
&
&
toolbars
.
has
(
which
)
;
}
async
setToolbarButtonHeightProperty
(
element
)
{
let
window
=
element
.
ownerGlobal
;
let
dwu
=
window
.
windowUtils
;
let
toolbarItem
=
element
;
let
urlBarContainer
=
element
.
closest
(
"
#
urlbar
-
container
"
)
;
if
(
urlBarContainer
)
{
toolbarItem
=
urlBarContainer
;
}
if
(
!
toolbarItem
)
{
return
;
}
let
bounds
=
dwu
.
getBoundsWithoutFlushing
(
toolbarItem
)
;
if
(
!
bounds
.
height
)
{
await
window
.
promiseDocumentFlushed
(
(
)
=
>
{
bounds
=
dwu
.
getBoundsWithoutFlushing
(
toolbarItem
)
;
}
)
;
}
if
(
bounds
.
height
)
{
toolbarItem
.
style
.
setProperty
(
"
-
-
toolbarbutton
-
height
"
bounds
.
height
+
"
px
"
)
;
}
}
trackToolbarVisibility
(
docShell
which
visible
=
true
)
{
let
window
=
this
.
getRootWindow
(
docShell
)
;
let
toolbars
=
this
.
_visibleToolbarsMap
.
get
(
window
)
;
if
(
!
toolbars
)
{
toolbars
=
new
Set
(
)
;
this
.
_visibleToolbarsMap
.
set
(
window
toolbars
)
;
}
if
(
!
visible
)
toolbars
.
delete
(
which
)
;
else
toolbars
.
add
(
which
)
;
}
getRootWindow
(
docShell
)
{
return
docShell
.
sameTypeRootTreeItem
.
domWindow
;
}
trimSelection
(
aSelection
aMaxLen
)
{
const
maxLen
=
Math
.
min
(
aMaxLen
|
|
150
aSelection
.
length
)
;
if
(
aSelection
.
length
>
maxLen
)
{
let
pattern
=
new
RegExp
(
"
^
(
?
:
\
\
s
*
.
)
{
0
"
+
maxLen
+
"
}
"
)
;
pattern
.
test
(
aSelection
)
;
aSelection
=
RegExp
.
lastMatch
;
}
aSelection
=
aSelection
.
trim
(
)
.
replace
(
/
\
s
+
/
g
"
"
)
;
if
(
aSelection
.
length
>
maxLen
)
{
aSelection
=
aSelection
.
substr
(
0
maxLen
)
;
}
return
aSelection
;
}
getSelectionDetails
(
aTopWindow
aCharLen
)
{
let
focusedWindow
=
{
}
;
let
focusedElement
=
Services
.
focus
.
getFocusedElementForWindow
(
aTopWindow
true
focusedWindow
)
;
focusedWindow
=
focusedWindow
.
value
;
let
selection
=
focusedWindow
.
getSelection
(
)
;
let
selectionStr
=
selection
.
toString
(
)
;
let
fullText
;
let
url
;
let
linkText
;
if
(
!
selectionStr
&
&
focusedElement
)
{
if
(
ChromeUtils
.
getClassName
(
focusedElement
)
=
=
=
"
HTMLTextAreaElement
"
|
|
(
ChromeUtils
.
getClassName
(
focusedElement
)
=
=
=
"
HTMLInputElement
"
&
&
focusedElement
.
mozIsTextField
(
true
)
)
)
{
selection
=
focusedElement
.
editor
.
selection
;
selectionStr
=
selection
.
toString
(
)
;
}
}
let
collapsed
=
selection
.
isCollapsed
;
if
(
selectionStr
)
{
linkText
=
selectionStr
.
trim
(
)
;
if
(
/
^
(
?
:
https
?
|
ftp
)
:
/
i
.
test
(
linkText
)
)
{
try
{
url
=
this
.
makeURI
(
linkText
)
;
}
catch
(
ex
)
{
}
}
else
if
(
/
^
(
?
:
[
a
-
z
\
d
-
]
+
\
.
)
+
[
a
-
z
]
+
/
i
.
test
(
linkText
)
)
{
let
beginRange
=
selection
.
getRangeAt
(
0
)
;
let
delimitedAtStart
=
/
^
\
s
/
.
test
(
beginRange
)
;
if
(
!
delimitedAtStart
)
{
let
container
=
beginRange
.
startContainer
;
let
offset
=
beginRange
.
startOffset
;
if
(
container
.
nodeType
=
=
container
.
TEXT_NODE
&
&
offset
>
0
)
delimitedAtStart
=
/
\
W
/
.
test
(
container
.
textContent
[
offset
-
1
]
)
;
else
delimitedAtStart
=
true
;
}
let
delimitedAtEnd
=
false
;
if
(
delimitedAtStart
)
{
let
endRange
=
selection
.
getRangeAt
(
selection
.
rangeCount
-
1
)
;
delimitedAtEnd
=
/
\
s
/
.
test
(
endRange
)
;
if
(
!
delimitedAtEnd
)
{
let
container
=
endRange
.
endContainer
;
let
offset
=
endRange
.
endOffset
;
if
(
container
.
nodeType
=
=
container
.
TEXT_NODE
&
&
offset
<
container
.
textContent
.
length
)
delimitedAtEnd
=
/
\
W
/
.
test
(
container
.
textContent
[
offset
]
)
;
else
delimitedAtEnd
=
true
;
}
}
if
(
delimitedAtStart
&
&
delimitedAtEnd
)
{
try
{
url
=
Services
.
uriFixup
.
createFixupURI
(
linkText
Services
.
uriFixup
.
FIXUP_FLAG_NONE
)
;
}
catch
(
ex
)
{
}
}
}
}
if
(
selectionStr
)
{
fullText
=
selectionStr
.
substr
(
0
16384
)
;
selectionStr
=
this
.
trimSelection
(
selectionStr
aCharLen
)
;
}
if
(
url
&
&
!
url
.
host
)
{
url
=
null
;
}
return
{
text
:
selectionStr
docSelectionIsCollapsed
:
collapsed
fullText
linkURL
:
url
?
url
.
spec
:
null
linkText
:
url
?
linkText
:
"
"
}
;
}
canCloseWindow
(
window
)
{
let
docShell
=
window
.
docShell
;
for
(
let
i
=
0
;
i
<
docShell
.
childCount
;
+
+
i
)
{
let
childShell
=
docShell
.
getChildAt
(
i
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
let
contentViewer
=
childShell
.
contentViewer
;
if
(
contentViewer
&
&
!
contentViewer
.
permitUnload
(
)
)
{
return
false
;
}
}
return
true
;
}
async
parseUrlAndPostData
(
url
postData
param
)
{
let
hasGETParam
=
/
%
s
/
i
.
test
(
url
)
;
let
decodedPostData
=
postData
?
unescape
(
postData
)
:
"
"
;
let
hasPOSTParam
=
/
%
s
/
i
.
test
(
decodedPostData
)
;
if
(
!
hasGETParam
&
&
!
hasPOSTParam
)
{
if
(
param
)
{
throw
new
Error
(
"
A
param
was
provided
but
there
'
s
nothing
to
bind
it
to
"
)
;
}
return
[
url
postData
]
;
}
let
charset
=
"
"
;
const
re
=
/
^
(
.
*
)
\
&
mozcharset
=
(
[
a
-
zA
-
Z
]
[
_
\
-
a
-
zA
-
Z0
-
9
]
+
)
\
s
*
/
;
let
matches
=
url
.
match
(
re
)
;
if
(
matches
)
{
[
url
charset
]
=
matches
;
}
else
{
try
{
let
pageInfo
=
await
PlacesUtils
.
history
.
fetch
(
url
{
includeAnnotations
:
true
}
)
;
if
(
pageInfo
&
&
pageInfo
.
annotations
.
has
(
PlacesUtils
.
CHARSET_ANNO
)
)
{
charset
=
pageInfo
.
annotations
.
get
(
PlacesUtils
.
CHARSET_ANNO
)
;
}
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
let
encodedParam
=
"
"
;
if
(
charset
&
&
charset
!
=
"
UTF
-
8
"
)
{
try
{
let
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
charset
;
encodedParam
=
converter
.
ConvertFromUnicode
(
param
)
+
converter
.
Finish
(
)
;
}
catch
(
ex
)
{
encodedParam
=
param
;
}
encodedParam
=
escape
(
encodedParam
)
.
replace
(
/
[
+
\
/
]
+
/
g
encodeURIComponent
)
;
}
else
{
encodedParam
=
encodeURIComponent
(
param
)
;
}
url
=
url
.
replace
(
/
%
s
/
g
encodedParam
)
.
replace
(
/
%
S
/
g
param
)
;
if
(
hasPOSTParam
)
{
postData
=
decodedPostData
.
replace
(
/
%
s
/
g
encodedParam
)
.
replace
(
/
%
S
/
g
param
)
;
}
return
[
url
postData
]
;
}
getLocalizedFragment
(
doc
msg
.
.
.
nodesOrStrings
)
{
for
(
let
i
=
1
;
i
<
=
nodesOrStrings
.
length
;
i
+
+
)
{
if
(
!
msg
.
includes
(
"
%
"
+
i
+
"
S
"
)
)
{
msg
=
msg
.
replace
(
/
%
S
/
"
%
"
+
i
+
"
S
"
)
;
}
}
let
numberOfInsertionPoints
=
msg
.
match
(
/
%
\
d
+
\
S
/
g
)
.
length
;
if
(
numberOfInsertionPoints
!
=
nodesOrStrings
.
length
)
{
Cu
.
reportError
(
Message
has
{
numberOfInsertionPoints
}
insertion
points
+
but
got
{
nodesOrStrings
.
length
}
replacement
parameters
!
)
;
}
let
fragment
=
doc
.
createDocumentFragment
(
)
;
let
parts
=
[
msg
]
;
let
insertionPoint
=
1
;
for
(
let
replacement
of
nodesOrStrings
)
{
let
insertionString
=
"
%
"
+
(
insertionPoint
+
+
)
+
"
S
"
;
let
partIndex
=
parts
.
findIndex
(
part
=
>
typeof
part
=
=
"
string
"
&
&
part
.
includes
(
insertionString
)
)
;
if
(
partIndex
=
=
-
1
)
{
fragment
.
appendChild
(
doc
.
createTextNode
(
msg
)
)
;
return
fragment
;
}
if
(
typeof
replacement
=
=
"
string
"
)
{
parts
[
partIndex
]
=
parts
[
partIndex
]
.
replace
(
insertionString
replacement
)
;
}
else
{
let
[
firstBit
lastBit
]
=
parts
[
partIndex
]
.
split
(
insertionString
)
;
parts
.
splice
(
partIndex
1
firstBit
replacement
lastBit
)
;
}
}
for
(
let
part
of
parts
)
{
if
(
typeof
part
=
=
"
string
"
)
{
if
(
part
)
{
fragment
.
appendChild
(
doc
.
createTextNode
(
part
)
)
;
}
}
else
{
fragment
.
appendChild
(
part
)
;
}
}
return
fragment
;
}
promiseObserved
(
topic
test
=
(
)
=
>
true
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
(
subject
topic
data
)
=
>
{
if
(
test
(
subject
data
)
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
{
subject
data
}
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
topic
)
;
}
)
;
}
trimURL
(
aURL
)
{
let
url
=
aURL
.
replace
(
/
^
(
(
?
:
http
|
https
|
ftp
)
:
\
/
\
/
[
^
/
]
+
)
\
/
/
"
1
"
)
;
if
(
!
url
.
startsWith
(
"
http
:
/
/
"
)
)
{
return
url
;
}
let
urlWithoutProtocol
=
url
.
substring
(
7
)
;
let
flags
=
Services
.
uriFixup
.
FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP
|
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
;
let
fixedUpURL
expectedURLSpec
;
try
{
fixedUpURL
=
Services
.
uriFixup
.
createFixupURI
(
urlWithoutProtocol
flags
)
;
expectedURLSpec
=
Services
.
io
.
newURI
(
aURL
)
.
displaySpec
;
}
catch
(
ex
)
{
return
url
;
}
if
(
fixedUpURL
.
displaySpec
=
=
expectedURLSpec
)
{
return
urlWithoutProtocol
;
}
return
url
;
}
}
;
