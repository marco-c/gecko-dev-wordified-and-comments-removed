"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserUtils
"
]
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Region
"
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
)
;
function
stringPrefToSet
(
prefVal
)
{
return
new
Set
(
prefVal
.
toLowerCase
(
)
.
split
(
/
\
s
*
\
s
*
/
g
)
.
filter
(
v
=
>
!
!
v
)
)
;
}
var
BrowserUtils
=
{
principalWithMatchingOA
(
principal
existingPrincipal
)
{
if
(
principal
.
isSystemPrincipal
)
{
return
principal
;
}
if
(
existingPrincipal
.
originSuffix
=
=
principal
.
originSuffix
)
{
return
principal
;
}
let
secMan
=
Services
.
scriptSecurityManager
;
if
(
principal
.
isContentPrincipal
)
{
return
secMan
.
principalWithOA
(
principal
existingPrincipal
.
originAttributes
)
;
}
if
(
principal
.
isNullPrincipal
)
{
return
secMan
.
createNullPrincipal
(
existingPrincipal
.
originAttributes
)
;
}
throw
new
Error
(
"
Can
'
t
change
the
originAttributes
of
an
expanded
principal
!
"
)
;
}
mimeTypeIsTextBased
(
mimeType
)
{
return
(
mimeType
.
startsWith
(
"
text
/
"
)
|
|
mimeType
.
endsWith
(
"
+
xml
"
)
|
|
mimeType
.
endsWith
(
"
+
json
"
)
|
|
mimeType
=
=
"
application
/
x
-
javascript
"
|
|
mimeType
=
=
"
application
/
javascript
"
|
|
mimeType
=
=
"
application
/
json
"
|
|
mimeType
=
=
"
application
/
xml
"
)
;
}
canFindInPage
(
location
)
{
return
(
!
location
.
startsWith
(
"
about
:
addons
"
)
&
&
!
location
.
startsWith
(
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
aboutaddons
.
html
"
)
&
&
!
location
.
startsWith
(
"
about
:
preferences
"
)
)
;
}
isFindbarVisible
(
docShell
)
{
const
FINDER_JSM
=
"
resource
:
/
/
gre
/
modules
/
Finder
.
jsm
"
;
return
(
Cu
.
isModuleLoaded
(
FINDER_JSM
)
&
&
ChromeUtils
.
import
(
FINDER_JSM
)
.
Finder
.
isFindbarVisible
(
docShell
)
)
;
}
promiseObserved
(
topic
test
=
(
)
=
>
true
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
(
subject
topic
data
)
=
>
{
if
(
test
(
subject
data
)
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
{
subject
data
}
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
topic
)
;
}
)
;
}
isShareableURL
(
url
)
{
if
(
!
url
)
{
return
false
;
}
if
(
url
.
spec
.
length
>
65535
)
{
return
false
;
}
let
scheme
=
url
.
scheme
;
return
!
(
"
about
"
=
=
scheme
|
|
"
resource
"
=
=
scheme
|
|
"
chrome
"
=
=
scheme
|
|
"
blob
"
=
=
scheme
|
|
"
moz
-
extension
"
=
=
scheme
)
;
}
hrefAndLinkNodeForClickEvent
(
event
)
{
let
content
=
event
.
view
|
|
event
.
composedTarget
?
.
ownerGlobal
;
if
(
!
content
?
.
HTMLAnchorElement
)
{
return
null
;
}
function
isHTMLLink
(
aNode
)
{
return
(
(
aNode
instanceof
content
.
HTMLAnchorElement
&
&
aNode
.
href
)
|
|
(
aNode
instanceof
content
.
HTMLAreaElement
&
&
aNode
.
href
)
|
|
aNode
instanceof
content
.
HTMLLinkElement
)
;
}
let
node
=
event
.
composedTarget
;
while
(
node
&
&
!
isHTMLLink
(
node
)
)
{
node
=
node
.
flattenedTreeParentNode
;
}
if
(
node
)
{
return
[
node
.
href
node
node
.
ownerDocument
.
nodePrincipal
]
;
}
let
href
baseURI
;
node
=
event
.
composedTarget
;
while
(
node
&
&
!
href
)
{
if
(
node
.
nodeType
=
=
content
.
Node
.
ELEMENT_NODE
&
&
(
node
.
localName
=
=
"
a
"
|
|
node
.
namespaceURI
=
=
"
http
:
/
/
www
.
w3
.
org
/
1998
/
Math
/
MathML
"
)
)
{
href
=
node
.
getAttribute
(
"
href
"
)
|
|
node
.
getAttributeNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xlink
"
"
href
"
)
;
if
(
href
)
{
baseURI
=
node
.
ownerDocument
.
baseURIObject
;
break
;
}
}
node
=
node
.
flattenedTreeParentNode
;
}
return
[
href
?
Services
.
io
.
newURI
(
href
null
baseURI
)
.
spec
:
null
null
node
&
&
node
.
ownerDocument
.
nodePrincipal
]
;
}
whereToOpenLink
(
e
ignoreButton
ignoreAlt
)
{
if
(
!
e
)
{
return
"
current
"
;
}
e
=
this
.
getRootEvent
(
e
)
;
var
shift
=
e
.
shiftKey
;
var
ctrl
=
e
.
ctrlKey
;
var
meta
=
e
.
metaKey
;
var
alt
=
e
.
altKey
&
&
!
ignoreAlt
;
let
middle
=
!
ignoreButton
&
&
e
.
button
=
=
1
;
let
middleUsesTabs
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
opentabfor
.
middleclick
"
true
)
;
let
middleUsesNewWindow
=
Services
.
prefs
.
getBoolPref
(
"
middlemouse
.
openNewWindow
"
false
)
;
var
metaKey
=
AppConstants
.
platform
=
=
"
macosx
"
?
meta
:
ctrl
;
if
(
metaKey
|
|
(
middle
&
&
middleUsesTabs
)
)
{
return
shift
?
"
tabshifted
"
:
"
tab
"
;
}
if
(
alt
&
&
Services
.
prefs
.
getBoolPref
(
"
browser
.
altClickSave
"
false
)
)
{
return
"
save
"
;
}
if
(
shift
|
|
(
middle
&
&
!
middleUsesTabs
&
&
middleUsesNewWindow
)
)
{
return
"
window
"
;
}
return
"
current
"
;
}
getRootEvent
(
aEvent
)
{
if
(
!
aEvent
)
{
return
aEvent
;
}
let
tempEvent
=
aEvent
;
while
(
tempEvent
.
sourceEvent
)
{
if
(
tempEvent
.
sourceEvent
.
button
=
=
1
)
{
aEvent
=
tempEvent
.
sourceEvent
;
break
;
}
tempEvent
=
tempEvent
.
sourceEvent
;
}
return
aEvent
;
}
shouldShowVPNPromo
(
)
{
const
vpnPromoEnabled
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
vpn_promo
.
enabled
"
true
)
;
const
homeRegion
=
Region
.
home
|
|
"
"
;
const
currentRegion
=
Region
.
current
|
|
"
"
;
const
supportedRegions
=
BrowserUtils
.
vpnSupportedRegions
;
const
inSupportedRegion
=
supportedRegions
.
has
(
currentRegion
.
toLowerCase
(
)
)
|
|
supportedRegions
.
has
(
homeRegion
.
toLowerCase
(
)
)
;
const
avoidAdsCountries
=
BrowserUtils
.
vpnDisallowedRegions
;
const
vpnIllegalCountries
=
[
"
cn
"
"
kp
"
"
tm
"
]
;
vpnIllegalCountries
.
forEach
(
country
=
>
avoidAdsCountries
.
add
(
country
)
)
;
const
noActivePolicy
=
!
Services
.
policies
|
|
Services
.
policies
.
status
!
=
=
Services
.
policies
.
ACTIVE
;
return
(
vpnPromoEnabled
&
&
!
avoidAdsCountries
.
has
(
homeRegion
.
toLowerCase
(
)
)
&
&
!
avoidAdsCountries
.
has
(
currentRegion
.
toLowerCase
(
)
)
&
&
inSupportedRegion
&
&
noActivePolicy
)
;
}
shouldShowRallyPromo
(
)
{
const
homeRegion
=
Region
.
home
|
|
"
"
;
const
currentRegion
=
Region
.
current
|
|
"
"
;
const
region
=
currentRegion
|
|
homeRegion
;
const
language
=
Services
.
locale
.
appLocaleAsBCP47
;
return
language
.
startsWith
(
"
en
-
"
)
&
&
region
.
toLowerCase
(
)
=
=
"
us
"
;
}
sendToDeviceEmailsSupported
(
)
{
const
userLocale
=
Services
.
locale
.
appLocaleAsBCP47
.
toLowerCase
(
)
;
return
this
.
emailSupportedLocales
.
has
(
userLocale
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
BrowserUtils
"
navigationRequireUserInteraction
"
"
browser
.
navigation
.
requireUserInteraction
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
BrowserUtils
"
vpnSupportedRegions
"
"
browser
.
contentblocking
.
report
.
vpn_regions
"
"
us
ca
nz
sg
my
gb
de
fr
"
null
stringPrefToSet
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
BrowserUtils
"
vpnDisallowedRegions
"
"
browser
.
vpn_promo
.
disallowed_regions
"
"
ae
by
cn
cu
iq
ir
kp
om
ru
sd
sy
tm
tr
ua
"
null
stringPrefToSet
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
BrowserUtils
"
emailSupportedLocales
"
"
browser
.
send_to_device_locales
"
"
"
null
stringPrefToSet
)
;
