ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
DateTimePickerContent
"
]
;
class
DateTimePickerContent
{
constructor
(
global
)
{
this
.
_inputElement
=
null
;
this
.
_global
=
global
;
}
close
(
)
{
this
.
removeListeners
(
)
;
this
.
_inputElement
.
setDateTimePickerState
(
false
)
;
this
.
_inputElement
=
null
;
}
addListeners
(
)
{
this
.
_global
.
addEventListener
(
"
MozUpdateDateTimePicker
"
this
)
;
this
.
_global
.
addEventListener
(
"
MozCloseDateTimePicker
"
this
)
;
this
.
_global
.
addEventListener
(
"
pagehide
"
this
)
;
this
.
_global
.
addMessageListener
(
"
FormDateTime
:
PickerValueChanged
"
this
)
;
this
.
_global
.
addMessageListener
(
"
FormDateTime
:
PickerClosed
"
this
)
;
}
removeListeners
(
)
{
this
.
_global
.
removeEventListener
(
"
MozUpdateDateTimePicker
"
this
)
;
this
.
_global
.
removeEventListener
(
"
MozCloseDateTimePicker
"
this
)
;
this
.
_global
.
removeEventListener
(
"
pagehide
"
this
)
;
this
.
_global
.
removeMessageListener
(
"
FormDateTime
:
PickerValueChanged
"
this
)
;
this
.
_global
.
removeMessageListener
(
"
FormDateTime
:
PickerClosed
"
this
)
;
}
getComputedDirection
(
aElement
)
{
return
aElement
.
ownerGlobal
.
getComputedStyle
(
aElement
)
.
getPropertyValue
(
"
direction
"
)
;
}
getBoundingContentRect
(
aElement
)
{
return
BrowserUtils
.
getElementBoundingRect
(
aElement
)
;
}
getTimePickerPref
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
dom
.
forms
.
datetime
.
timepicker
"
)
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
FormDateTime
:
PickerClosed
"
:
{
this
.
close
(
)
;
break
;
}
case
"
FormDateTime
:
PickerValueChanged
"
:
{
this
.
_inputElement
.
updateDateTimeInputBox
(
aMessage
.
data
)
;
break
;
}
default
:
break
;
}
}
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
MozOpenDateTimePicker
"
:
{
if
(
!
(
aEvent
.
originalTarget
instanceof
aEvent
.
originalTarget
.
ownerGlobal
.
HTMLInputElement
)
|
|
(
aEvent
.
originalTarget
.
type
=
=
"
time
"
&
&
!
this
.
getTimePickerPref
(
)
)
)
{
return
;
}
if
(
this
.
_inputElement
)
{
return
;
}
this
.
_inputElement
=
aEvent
.
originalTarget
;
this
.
_inputElement
.
setDateTimePickerState
(
true
)
;
this
.
addListeners
(
)
;
let
value
=
this
.
_inputElement
.
getDateTimeInputBoxValue
(
)
;
this
.
_global
.
sendAsyncMessage
(
"
FormDateTime
:
OpenPicker
"
{
rect
:
this
.
getBoundingContentRect
(
this
.
_inputElement
)
dir
:
this
.
getComputedDirection
(
this
.
_inputElement
)
type
:
this
.
_inputElement
.
type
detail
:
{
value
:
Object
.
keys
(
value
)
.
length
>
0
?
value
:
this
.
_inputElement
.
value
min
:
this
.
_inputElement
.
getMinimum
(
)
max
:
this
.
_inputElement
.
getMaximum
(
)
step
:
this
.
_inputElement
.
getStep
(
)
stepBase
:
this
.
_inputElement
.
getStepBase
(
)
}
}
)
;
break
;
}
case
"
MozUpdateDateTimePicker
"
:
{
let
value
=
this
.
_inputElement
.
getDateTimeInputBoxValue
(
)
;
value
.
type
=
this
.
_inputElement
.
type
;
this
.
_global
.
sendAsyncMessage
(
"
FormDateTime
:
UpdatePicker
"
{
value
}
)
;
break
;
}
case
"
MozCloseDateTimePicker
"
:
{
this
.
_global
.
sendAsyncMessage
(
"
FormDateTime
:
ClosePicker
"
)
;
this
.
close
(
)
;
break
;
}
case
"
pagehide
"
:
{
if
(
this
.
_inputElement
&
&
this
.
_inputElement
.
ownerDocument
=
=
aEvent
.
target
)
{
this
.
_global
.
sendAsyncMessage
(
"
FormDateTime
:
ClosePicker
"
)
;
this
.
close
(
)
;
}
break
;
}
default
:
break
;
}
}
}
