"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Utils
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
serializationHelper
"
"
mozilla
.
org
/
network
/
serialization
-
helper
;
1
"
"
nsISerializationHelper
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
ssu
"
"
mozilla
.
org
/
browser
/
sessionstore
/
utils
;
1
"
"
nsISessionStoreUtils
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
eTLDService
"
"
mozilla
.
org
/
network
/
effective
-
tld
-
service
;
1
"
"
nsIEffectiveTLDService
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
SERIALIZED_SYSTEMPRINCIPAL
"
function
(
)
{
return
Utils
.
serializePrincipal
(
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
)
;
function
debug
(
msg
)
{
Services
.
console
.
logStringMessage
(
"
Utils
:
"
+
msg
)
;
}
var
Utils
=
Object
.
freeze
(
{
get
SERIALIZED_SYSTEMPRINCIPAL
(
)
{
return
SERIALIZED_SYSTEMPRINCIPAL
;
}
makeURI
(
url
)
{
return
Services
.
io
.
newURI
(
url
)
;
}
makeInputStream
(
data
)
{
if
(
typeof
data
=
=
"
string
"
)
{
let
stream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsCString
)
;
stream
.
data
=
data
;
return
stream
;
}
let
stream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsCString
)
;
stream
.
data
=
data
.
content
;
if
(
data
.
headers
)
{
let
mimeStream
=
Cc
[
"
mozilla
.
org
/
network
/
mime
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIMIMEInputStream
)
;
mimeStream
.
setData
(
stream
)
;
for
(
let
[
name
value
]
of
data
.
headers
)
{
mimeStream
.
addHeader
(
name
value
)
;
}
return
mimeStream
;
}
return
stream
;
}
serializeInputStream
(
aStream
)
{
let
data
=
{
content
:
NetUtil
.
readInputStreamToString
(
aStream
aStream
.
available
(
)
)
}
;
if
(
aStream
instanceof
Ci
.
nsIMIMEInputStream
)
{
data
.
headers
=
new
Map
(
)
;
aStream
.
visitHeaders
(
(
name
value
)
=
>
{
data
.
headers
.
set
(
name
value
)
;
}
)
;
}
return
data
;
}
hasRootDomain
(
url
domain
)
{
let
host
;
try
{
host
=
this
.
makeURI
(
url
)
.
host
;
}
catch
(
e
)
{
return
false
;
}
return
eTLDService
.
hasRootDomain
(
host
domain
)
;
}
shallowCopy
(
obj
)
{
let
retval
=
{
}
;
for
(
let
key
of
Object
.
keys
(
obj
)
)
{
retval
[
key
]
=
obj
[
key
]
;
}
return
retval
;
}
serializePrincipal
(
principal
)
{
let
serializedPrincipal
=
null
;
try
{
if
(
principal
)
{
serializedPrincipal
=
serializationHelper
.
serializeToString
(
principal
)
;
}
}
catch
(
e
)
{
debug
(
Failed
to
serialize
principal
'
{
principal
}
'
{
e
}
)
;
}
return
serializedPrincipal
;
}
deserializePrincipal
(
principal_b64
)
{
if
(
!
principal_b64
)
return
null
;
try
{
let
principal
=
serializationHelper
.
deserializeObject
(
principal_b64
)
;
principal
.
QueryInterface
(
Ci
.
nsIPrincipal
)
;
return
principal
;
}
catch
(
e
)
{
debug
(
Failed
to
deserialize
principal_b64
'
{
principal_b64
}
'
{
e
}
)
;
}
return
null
;
}
mapFrameTree
(
frame
.
.
.
dataCollectors
)
{
let
objs
=
dataCollectors
.
map
(
(
dataCollector
)
=
>
dataCollector
(
frame
)
|
|
{
}
)
;
let
children
=
dataCollectors
.
map
(
(
)
=
>
[
]
)
;
ssu
.
forEachNonDynamicChildFrame
(
frame
(
subframe
index
)
=
>
{
let
results
=
this
.
mapFrameTree
(
subframe
.
.
.
dataCollectors
)
;
if
(
!
results
)
{
return
;
}
for
(
let
j
=
results
.
length
-
1
;
j
>
=
0
;
-
-
j
)
{
if
(
!
results
[
j
]
|
|
!
Object
.
getOwnPropertyNames
(
results
[
j
]
)
.
length
)
{
continue
;
}
children
[
j
]
[
index
]
=
results
[
j
]
;
}
}
)
;
for
(
let
i
=
objs
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
if
(
!
children
[
i
]
.
length
)
{
continue
;
}
objs
[
i
]
.
children
=
children
[
i
]
;
}
return
objs
.
map
(
(
obj
)
=
>
Object
.
getOwnPropertyNames
(
obj
)
.
length
?
obj
:
null
)
;
}
}
)
;
