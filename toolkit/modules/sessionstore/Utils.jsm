"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Utils
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
eTLDService
"
"
mozilla
.
org
/
network
/
effective
-
tld
-
service
;
1
"
"
nsIEffectiveTLDService
"
)
;
var
Utils
=
Object
.
freeze
(
{
serializeInputStream
(
aStream
)
{
let
data
=
{
content
:
NetUtil
.
readInputStreamToString
(
aStream
aStream
.
available
(
)
)
}
;
if
(
aStream
instanceof
Ci
.
nsIMIMEInputStream
)
{
data
.
headers
=
new
Map
(
)
;
aStream
.
visitHeaders
(
(
name
value
)
=
>
{
data
.
headers
.
set
(
name
value
)
;
}
)
;
}
return
data
;
}
hasRootDomain
(
url
domain
)
{
let
host
;
try
{
host
=
Services
.
io
.
newURI
(
url
)
.
host
;
}
catch
(
e
)
{
return
false
;
}
return
eTLDService
.
hasRootDomain
(
host
domain
)
;
}
shallowCopy
(
obj
)
{
let
retval
=
{
}
;
for
(
let
key
of
Object
.
keys
(
obj
)
)
{
retval
[
key
]
=
obj
[
key
]
;
}
return
retval
;
}
restoreFrameTreeData
(
frame
data
cb
)
{
if
(
cb
(
frame
data
)
=
=
=
false
)
{
return
;
}
if
(
!
data
.
hasOwnProperty
(
"
children
"
)
)
{
return
;
}
SessionStoreUtils
.
forEachNonDynamicChildFrame
(
frame
(
subframe
index
)
=
>
{
if
(
data
.
children
[
index
]
)
{
this
.
restoreFrameTreeData
(
subframe
data
.
children
[
index
]
cb
)
;
}
}
)
;
}
}
)
;
