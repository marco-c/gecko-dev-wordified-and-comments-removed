"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ScrollPosition
"
]
;
var
ScrollPosition
=
Object
.
freeze
(
{
collect
(
frame
)
{
return
ScrollPositionInternal
.
collect
(
frame
)
;
}
restore
(
frame
value
)
{
ScrollPositionInternal
.
restore
(
frame
value
)
;
}
restoreTree
(
root
data
)
{
ScrollPositionInternal
.
restoreTree
(
root
data
)
;
}
}
)
;
var
ScrollPositionInternal
=
{
collect
(
frame
)
{
let
ifreq
=
frame
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
;
let
utils
=
ifreq
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
scrollX
=
{
}
scrollY
=
{
}
;
utils
.
getScrollXY
(
false
scrollX
scrollY
)
;
if
(
scrollX
.
value
|
|
scrollY
.
value
)
{
return
{
scroll
:
scrollX
.
value
+
"
"
+
scrollY
.
value
}
;
}
return
null
;
}
restore
(
frame
value
)
{
let
match
;
if
(
value
&
&
(
match
=
/
(
\
d
+
)
(
\
d
+
)
/
.
exec
(
value
)
)
)
{
frame
.
scrollTo
(
match
[
1
]
match
[
2
]
)
;
}
}
restoreTree
(
root
data
)
{
if
(
data
.
hasOwnProperty
(
"
scroll
"
)
)
{
this
.
restore
(
root
data
.
scroll
)
;
}
if
(
!
data
.
hasOwnProperty
(
"
children
"
)
)
{
return
;
}
let
frames
=
root
.
frames
;
data
.
children
.
forEach
(
(
child
index
)
=
>
{
if
(
child
&
&
index
<
frames
.
length
)
{
this
.
restoreTree
(
frames
[
index
]
child
)
;
}
}
)
;
}
}
;
