"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
DeferredTask
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PromiseUtils
"
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
const
Timer
=
Components
.
Constructor
(
"
mozilla
.
org
/
timer
;
1
"
"
nsITimer
"
"
initWithCallback
"
)
;
this
.
DeferredTask
=
function
(
aTaskFn
aDelayMs
)
{
this
.
_taskFn
=
aTaskFn
;
this
.
_delayMs
=
aDelayMs
;
if
(
aTaskFn
.
isGenerator
(
)
)
{
Cu
.
reportError
(
new
Error
(
"
Unexpected
generator
function
passed
to
DeferredTask
"
)
)
;
}
}
this
.
DeferredTask
.
prototype
=
{
_taskFn
:
null
_delayMs
:
null
get
isArmed
(
)
{
return
this
.
_armed
;
}
_armed
:
false
get
isRunning
(
)
{
return
!
!
this
.
_runningPromise
;
}
_runningPromise
:
null
_timer
:
null
_startTimer
(
)
{
this
.
_timer
=
new
Timer
(
this
.
_timerCallback
.
bind
(
this
)
this
.
_delayMs
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
arm
(
)
{
if
(
this
.
_finalized
)
{
throw
new
Error
(
"
Unable
to
arm
timer
the
object
has
been
finalized
.
"
)
;
}
this
.
_armed
=
true
;
if
(
!
this
.
_runningPromise
&
&
!
this
.
_timer
)
{
this
.
_startTimer
(
)
;
}
}
disarm
(
)
{
this
.
_armed
=
false
;
if
(
this
.
_timer
)
{
this
.
_timer
.
cancel
(
)
;
this
.
_timer
=
null
;
}
}
finalize
(
)
{
if
(
this
.
_finalized
)
{
throw
new
Error
(
"
The
object
has
been
already
finalized
.
"
)
;
}
this
.
_finalized
=
true
;
if
(
this
.
_timer
)
{
this
.
disarm
(
)
;
this
.
_timerCallback
(
)
;
}
if
(
this
.
_runningPromise
)
{
return
this
.
_runningPromise
;
}
return
Promise
.
resolve
(
)
;
}
_finalized
:
false
_timerCallback
(
)
{
let
runningDeferred
=
PromiseUtils
.
defer
(
)
;
this
.
_timer
=
null
;
this
.
_armed
=
false
;
this
.
_runningPromise
=
runningDeferred
.
promise
;
runningDeferred
.
resolve
(
(
async
(
)
=
>
{
await
this
.
_runTask
(
)
;
if
(
this
.
_armed
)
{
if
(
!
this
.
_finalized
)
{
this
.
_startTimer
(
)
;
}
else
{
this
.
_armed
=
false
;
await
this
.
_runTask
(
)
;
}
}
this
.
_runningPromise
=
null
;
}
)
(
)
.
catch
(
Cu
.
reportError
)
)
;
}
async
_runTask
(
)
{
try
{
await
this
.
_taskFn
(
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
;
