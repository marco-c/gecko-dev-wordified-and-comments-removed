"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
RemotePageAccessManager
"
]
;
let
RemotePageAccessManager
=
{
accessMap
:
{
"
about
:
certerror
"
:
{
RPMSendAsyncMessage
:
[
"
Browser
:
EnableOnlineMode
"
"
Browser
:
ResetSSLPreferences
"
"
GetChangedCertPrefs
"
"
Browser
:
OpenCaptivePortalPage
"
"
Browser
:
SSLErrorGoBack
"
"
Browser
:
PrimeMitm
"
"
Browser
:
ResetEnterpriseRootsPref
"
"
DisplayOfflineSupportPage
"
]
RPMRecordTelemetryEvent
:
[
"
*
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
RPMGetFormatURLPref
:
[
"
app
.
support
.
baseURL
"
]
RPMGetBoolPref
:
[
"
security
.
certerrors
.
mitm
.
priming
.
enabled
"
"
security
.
certerrors
.
permanentOverride
"
"
security
.
enterprise_roots
.
auto
-
enabled
"
"
security
.
certerror
.
hideAddException
"
]
RPMSetBoolPref
:
[
"
security
.
tls
.
version
.
enable
-
deprecated
"
]
RPMGetIntPref
:
[
"
services
.
settings
.
clock_skew_seconds
"
"
services
.
settings
.
last_update_seconds
"
]
RPMGetAppBuildID
:
[
"
*
"
]
RPMGetInnerMostURI
:
[
"
*
"
]
RPMIsWindowPrivate
:
[
"
*
"
]
RPMAddToHistogram
:
[
"
*
"
]
}
"
about
:
httpsonlyerror
"
:
{
RPMGetFormatURLPref
:
[
"
app
.
support
.
baseURL
"
]
RPMSendAsyncMessage
:
[
"
goBack
"
"
openInsecure
"
]
RPMAddMessageListener
:
[
"
WWWReachable
"
]
RPMTryPingSecureWWWLink
:
[
"
*
"
]
RPMOpenSecureWWWLink
:
[
"
*
"
]
}
"
about
:
certificate
"
:
{
RPMSendQuery
:
[
"
getCertificates
"
]
}
"
about
:
neterror
"
:
{
RPMSendAsyncMessage
:
[
"
Browser
:
EnableOnlineMode
"
"
Browser
:
ResetSSLPreferences
"
"
GetChangedCertPrefs
"
"
Browser
:
OpenCaptivePortalPage
"
"
Browser
:
SSLErrorGoBack
"
"
Browser
:
PrimeMitm
"
"
Browser
:
ResetEnterpriseRootsPref
"
"
ReportBlockingError
"
"
DisplayOfflineSupportPage
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
RPMGetFormatURLPref
:
[
"
app
.
support
.
baseURL
"
]
RPMGetBoolPref
:
[
"
security
.
certerror
.
hideAddException
"
"
security
.
tls
.
version
.
enable
-
deprecated
"
"
security
.
certerrors
.
tls
.
version
.
show
-
override
"
"
security
.
xfocsp
.
errorReporting
.
automatic
"
"
security
.
xfocsp
.
errorReporting
.
enabled
"
"
browser
.
proton
.
enabled
"
]
RPMSetBoolPref
:
[
"
security
.
tls
.
version
.
enable
-
deprecated
"
"
security
.
xfocsp
.
errorReporting
.
automatic
"
]
RPMPrefIsLocked
:
[
"
security
.
tls
.
version
.
min
"
]
RPMAddToHistogram
:
[
"
*
"
]
RPMGetInnerMostURI
:
[
"
*
"
]
RPMGetHttpResponseHeader
:
[
"
*
"
]
}
"
about
:
plugins
"
:
{
RPMSendQuery
:
[
"
RequestPlugins
"
]
}
"
about
:
pocket
-
saved
"
:
{
RPMSendAsyncMessage
:
[
"
*
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
}
"
about
:
pocket
-
signup
"
:
{
RPMSendAsyncMessage
:
[
"
*
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
}
"
about
:
pocket
-
home
"
:
{
RPMSendAsyncMessage
:
[
"
*
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
}
"
about
:
privatebrowsing
"
:
{
RPMSendAsyncMessage
:
[
"
OpenPrivateWindow
"
"
SearchBannerDismissed
"
"
OpenSearchPreferences
"
"
SearchHandoff
"
]
RPMSendQuery
:
[
"
ShouldShowSearch
"
"
ShouldShowSearchBanner
"
"
ShouldShowVPNPromo
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
RPMGetFormatURLPref
:
[
"
app
.
support
.
baseURL
"
"
browser
.
privatebrowsing
.
vpnpromourl
"
]
RPMIsWindowPrivate
:
[
"
*
"
]
}
"
about
:
protections
"
:
{
RPMSendAsyncMessage
:
[
"
OpenContentBlockingPreferences
"
"
OpenAboutLogins
"
"
OpenSyncPreferences
"
"
ClearMonitorCache
"
"
RecordEntryPoint
"
]
RPMSendQuery
:
[
"
FetchUserLoginsData
"
"
FetchMonitorData
"
"
FetchContentBlockingEvents
"
"
FetchMobileDeviceConnected
"
"
GetShowProxyCard
"
"
FetchEntryPoint
"
"
FetchVPNSubStatus
"
"
FetchShowVPNCard
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
RPMSetBoolPref
:
[
"
browser
.
contentblocking
.
report
.
show_mobile_app
"
"
browser
.
contentblocking
.
report
.
hide_vpn_banner
"
]
RPMGetBoolPref
:
[
"
browser
.
contentblocking
.
report
.
lockwise
.
enabled
"
"
browser
.
contentblocking
.
report
.
monitor
.
enabled
"
"
privacy
.
socialtracking
.
block_cookies
.
enabled
"
"
browser
.
contentblocking
.
report
.
proxy
.
enabled
"
"
privacy
.
trackingprotection
.
cryptomining
.
enabled
"
"
privacy
.
trackingprotection
.
fingerprinting
.
enabled
"
"
privacy
.
trackingprotection
.
enabled
"
"
privacy
.
trackingprotection
.
socialtracking
.
enabled
"
"
browser
.
contentblocking
.
report
.
show_mobile_app
"
"
browser
.
contentblocking
.
report
.
hide_vpn_banner
"
"
browser
.
contentblocking
.
report
.
vpn
.
enabled
"
]
RPMGetStringPref
:
[
"
browser
.
contentblocking
.
category
"
"
browser
.
contentblocking
.
report
.
monitor
.
url
"
"
browser
.
contentblocking
.
report
.
monitor
.
sign_in_url
"
"
browser
.
contentblocking
.
report
.
manage_devices
.
url
"
"
browser
.
contentblocking
.
report
.
proxy_extension
.
url
"
"
browser
.
contentblocking
.
report
.
lockwise
.
mobile
-
android
.
url
"
"
browser
.
contentblocking
.
report
.
lockwise
.
mobile
-
ios
.
url
"
"
browser
.
contentblocking
.
report
.
mobile
-
ios
.
url
"
"
browser
.
contentblocking
.
report
.
mobile
-
android
.
url
"
"
browser
.
contentblocking
.
report
.
vpn
.
url
"
"
browser
.
contentblocking
.
report
.
vpn
-
promo
.
url
"
"
browser
.
contentblocking
.
report
.
vpn
-
android
.
url
"
"
browser
.
contentblocking
.
report
.
vpn
-
ios
.
url
"
"
browser
.
contentblocking
.
report
.
vpn_platforms
"
]
RPMGetIntPref
:
[
"
network
.
cookie
.
cookieBehavior
"
]
RPMGetFormatURLPref
:
[
"
browser
.
contentblocking
.
report
.
monitor
.
how_it_works
.
url
"
"
browser
.
contentblocking
.
report
.
lockwise
.
how_it_works
.
url
"
"
browser
.
contentblocking
.
report
.
monitor
.
preferences_url
"
"
browser
.
contentblocking
.
report
.
monitor
.
home_page_url
"
"
browser
.
contentblocking
.
report
.
social
.
url
"
"
browser
.
contentblocking
.
report
.
cookie
.
url
"
"
browser
.
contentblocking
.
report
.
tracker
.
url
"
"
browser
.
contentblocking
.
report
.
fingerprinter
.
url
"
"
browser
.
contentblocking
.
report
.
cryptominer
.
url
"
]
RPMRecordTelemetryEvent
:
[
"
*
"
]
}
"
about
:
tabcrashed
"
:
{
RPMSendAsyncMessage
:
[
"
Load
"
"
closeTab
"
"
restoreTab
"
"
restoreAll
"
]
RPMAddMessageListener
:
[
"
*
"
]
RPMRemoveMessageListener
:
[
"
*
"
]
}
}
checkAllowAccess
(
aDocument
aFeature
aValue
)
{
let
principal
=
aDocument
.
nodePrincipal
;
if
(
!
principal
)
{
return
false
;
}
return
this
.
checkAllowAccessWithPrincipal
(
principal
aFeature
aValue
aDocument
)
;
}
checkAllowAccessWithPrincipal
(
aPrincipal
aFeature
aValue
aDocument
)
{
let
accessMapForFeature
=
this
.
checkAllowAccessToFeature
(
aPrincipal
aFeature
aDocument
)
;
if
(
!
accessMapForFeature
)
{
Cu
.
reportError
(
"
RemotePageAccessManager
does
not
allow
access
to
Feature
:
"
+
aFeature
+
"
for
:
"
+
aDocument
.
location
)
;
return
false
;
}
if
(
accessMapForFeature
.
includes
(
aValue
)
|
|
accessMapForFeature
[
0
]
=
=
"
*
"
)
{
return
true
;
}
return
false
;
}
checkAllowAccessToFeature
(
aPrincipal
aFeature
aDocument
)
{
let
spec
;
if
(
!
aPrincipal
.
isContentPrincipal
)
{
if
(
!
aDocument
)
{
return
null
;
}
if
(
!
aDocument
.
documentURIObject
.
schemeIs
(
"
about
"
)
)
{
return
null
;
}
spec
=
aDocument
.
documentURIObject
.
prePath
+
aDocument
.
documentURIObject
.
filePath
;
}
else
{
if
(
!
aPrincipal
.
schemeIs
(
"
about
"
)
)
{
return
null
;
}
spec
=
aPrincipal
.
prePath
+
aPrincipal
.
filePath
;
}
let
accessMapForURI
=
this
.
accessMap
[
spec
]
;
if
(
!
accessMapForURI
)
{
return
null
;
}
return
accessMapForURI
[
aFeature
]
;
}
}
;
