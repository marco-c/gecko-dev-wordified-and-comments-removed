"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
RemotePageAccessManager
"
]
;
let
RemotePageAccessManager
=
{
accessMap
:
{
}
checkAllowAccess
(
aDocument
aFeature
aValue
)
{
let
principal
=
aDocument
.
nodePrincipal
;
if
(
!
principal
)
{
return
false
;
}
return
this
.
checkAllowAccessWithPrincipal
(
principal
aFeature
aValue
aDocument
)
;
}
checkAllowAccessWithPrincipal
(
aPrincipal
aFeature
aValue
aDocument
)
{
let
accessMapForFeature
=
this
.
checkAllowAccessToFeature
(
aPrincipal
aFeature
aDocument
)
;
if
(
!
accessMapForFeature
)
{
Cu
.
reportError
(
"
RemotePageAccessManager
does
not
allow
access
to
Feature
:
"
+
aFeature
+
"
for
:
"
+
aDocument
.
location
)
;
return
false
;
}
if
(
accessMapForFeature
.
includes
(
aValue
)
|
|
accessMapForFeature
[
0
]
=
=
"
*
"
)
{
return
true
;
}
return
false
;
}
checkAllowAccessToFeature
(
aPrincipal
aFeature
aDocument
)
{
let
uri
;
if
(
aPrincipal
.
isNullPrincipal
|
|
!
aPrincipal
.
URI
)
{
if
(
!
aDocument
)
{
return
null
;
}
uri
=
aDocument
.
documentURIObject
;
}
else
{
uri
=
aPrincipal
.
URI
;
}
let
spec
=
uri
.
prePath
+
uri
.
filePath
;
if
(
!
uri
.
schemeIs
(
"
about
"
)
)
{
return
null
;
}
let
accessMapForURI
=
this
.
accessMap
[
spec
]
;
if
(
!
accessMapForURI
)
{
return
null
;
}
return
accessMapForURI
[
aFeature
]
;
}
}
;
