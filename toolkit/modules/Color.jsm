"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Color
"
]
;
function
Color
(
r
g
b
)
{
this
.
r
=
r
;
this
.
g
=
g
;
this
.
b
=
b
;
}
Color
.
prototype
=
{
get
relativeLuminance
(
)
{
let
colorArr
=
[
this
.
r
this
.
b
this
.
g
]
.
map
(
color
=
>
{
color
=
parseInt
(
color
10
)
;
if
(
color
<
=
10
)
return
color
/
255
/
12
.
92
;
return
Math
.
pow
(
(
(
color
/
255
)
+
0
.
055
)
/
1
.
055
2
.
4
)
;
}
)
;
return
colorArr
[
0
]
*
0
.
2126
+
colorArr
[
1
]
*
0
.
7152
+
colorArr
[
2
]
*
0
.
0722
;
}
get
isBright
(
)
{
return
this
.
relativeLuminance
>
0
.
7
;
}
contrastRatio
(
otherColor
)
{
if
(
!
(
otherColor
instanceof
Color
)
)
throw
new
TypeError
(
"
The
first
argument
should
be
an
instance
of
Color
"
)
;
let
luminance
=
this
.
relativeLuminance
;
let
otherLuminance
=
otherColor
.
relativeLuminance
;
return
(
Math
.
max
(
luminance
otherLuminance
)
+
0
.
05
)
/
(
Math
.
min
(
luminance
otherLuminance
)
+
0
.
05
)
;
}
isContrastRatioAcceptable
(
otherColor
)
{
return
this
.
contrastRatio
(
otherColor
)
>
3
;
}
}
;
