"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GetBattery
"
"
Battery
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
gFakeBattery
=
{
charging
:
false
chargingTime
:
0
dischargingTime
:
Infinity
level
:
1
}
;
var
Debugging
=
{
fake
:
false
}
;
var
GetBattery
=
function
(
)
{
return
new
Services
.
appShell
.
hiddenDOMWindow
.
Promise
(
function
(
resolve
reject
)
{
if
(
Debugging
.
fake
)
{
resolve
(
gFakeBattery
)
;
return
;
}
Services
.
appShell
.
hiddenDOMWindow
.
navigator
.
getBattery
(
)
.
then
(
resolve
reject
)
;
}
)
;
}
;
var
Battery
=
{
}
;
for
(
let
k
of
[
"
charging
"
"
chargingTime
"
"
dischargingTime
"
"
level
"
]
)
{
let
prop
=
k
;
Object
.
defineProperty
(
this
.
Battery
prop
{
get
(
)
{
if
(
Debugging
.
fake
)
{
return
gFakeBattery
[
prop
]
;
}
return
Services
.
appShell
.
hiddenDOMWindow
.
navigator
.
battery
[
prop
]
;
}
set
(
fakeSetting
)
{
if
(
!
Debugging
.
fake
)
{
throw
new
Error
(
"
Tried
to
set
fake
battery
value
when
battery
spoofing
was
disabled
"
)
;
}
gFakeBattery
[
prop
]
=
fakeSetting
;
}
}
)
;
}
