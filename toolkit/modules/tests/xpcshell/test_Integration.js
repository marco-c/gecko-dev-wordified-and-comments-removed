"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Integration
.
jsm
"
this
)
;
const
TestIntegration
=
{
value
:
"
value
"
get
valueFromThis
(
)
{
return
this
.
value
;
}
get
property
(
)
{
return
this
.
_property
;
}
set
property
(
value
)
{
this
.
_property
=
value
;
}
method
(
argument
)
{
this
.
methodArgument
=
argument
;
return
"
method
"
+
argument
;
}
asyncMethod
:
Task
.
async
(
function
*
(
argument
)
{
this
.
asyncMethodArgument
=
argument
;
return
"
asyncMethod
"
+
argument
;
}
)
}
;
let
overrideFn
=
base
=
>
(
{
value
:
"
overridden
-
value
"
get
property
(
)
{
return
"
overridden
-
"
+
base
.
__lookupGetter__
(
"
property
"
)
.
call
(
this
)
;
}
set
property
(
value
)
{
base
.
__lookupSetter__
(
"
property
"
)
.
call
(
this
"
overridden
-
"
+
value
)
;
}
method
(
)
{
return
"
overridden
-
"
+
base
.
method
.
apply
(
this
arguments
)
;
}
asyncMethod
:
Task
.
async
(
function
*
(
)
{
return
"
overridden
-
"
+
(
yield
base
.
asyncMethod
.
apply
(
this
arguments
)
)
;
}
)
}
)
;
let
superOverrideFn
=
base
=
>
(
{
__proto__
:
base
value
:
"
overridden
-
value
"
get
property
(
)
{
return
"
overridden
-
"
+
super
.
property
;
}
set
property
(
value
)
{
super
.
property
=
"
overridden
-
"
+
value
;
}
method
(
)
{
return
"
overridden
-
"
+
super
.
method
(
.
.
.
arguments
)
;
}
asyncMethod
:
Task
.
async
(
function
*
(
)
{
return
"
overridden
-
"
+
(
yield
base
.
asyncMethod
.
apply
(
this
arguments
)
)
;
}
)
}
)
;
function
*
assertCombinedResults
(
combined
overridesCount
)
{
let
expectedValue
=
overridesCount
>
0
?
"
overridden
-
value
"
:
"
value
"
;
let
prefix
=
"
overridden
-
"
.
repeat
(
overridesCount
)
;
Assert
.
equal
(
combined
.
value
expectedValue
)
;
Assert
.
equal
(
combined
.
valueFromThis
expectedValue
)
;
combined
.
property
=
"
property
"
;
Assert
.
equal
(
combined
.
property
prefix
.
repeat
(
2
)
+
"
property
"
)
;
combined
.
methodArgument
=
"
"
;
Assert
.
equal
(
combined
.
method
(
"
-
argument
"
)
prefix
+
"
method
-
argument
"
)
;
Assert
.
equal
(
combined
.
methodArgument
"
-
argument
"
)
;
combined
.
asyncMethodArgument
=
"
"
;
Assert
.
equal
(
yield
combined
.
asyncMethod
(
"
-
argument
"
)
prefix
+
"
asyncMethod
-
argument
"
)
;
Assert
.
equal
(
combined
.
asyncMethodArgument
"
-
argument
"
)
;
}
function
*
assertCurrentCombinedResults
(
overridesCount
)
{
let
combined
=
Integration
.
testModule
.
getCombined
(
TestIntegration
)
;
yield
assertCombinedResults
(
combined
overridesCount
)
;
}
add_task
(
function
*
test_base
(
)
{
yield
assertCurrentCombinedResults
(
0
)
;
}
)
;
add_task
(
function
*
test_override
(
)
{
Integration
.
testModule
.
register
(
overrideFn
)
;
yield
assertCurrentCombinedResults
(
1
)
;
Integration
.
testModule
.
register
(
overrideFn
)
;
yield
assertCurrentCombinedResults
(
1
)
;
Integration
.
testModule
.
unregister
(
overrideFn
)
;
yield
assertCurrentCombinedResults
(
0
)
;
}
)
;
add_task
(
function
*
test_override_super_multiple
(
)
{
Integration
.
testModule
.
register
(
overrideFn
)
;
Integration
.
testModule
.
register
(
superOverrideFn
)
;
yield
assertCurrentCombinedResults
(
2
)
;
Integration
.
testModule
.
unregister
(
overrideFn
)
;
yield
assertCurrentCombinedResults
(
1
)
;
Integration
.
testModule
.
unregister
(
superOverrideFn
)
;
yield
assertCurrentCombinedResults
(
0
)
;
}
)
;
add_task
(
function
*
test_override_error
(
)
{
let
errorOverrideFn
=
base
=
>
{
throw
"
Expected
error
.
"
}
;
Integration
.
testModule
.
register
(
errorOverrideFn
)
;
Integration
.
testModule
.
register
(
overrideFn
)
;
yield
assertCurrentCombinedResults
(
1
)
;
Integration
.
testModule
.
unregister
(
errorOverrideFn
)
;
Integration
.
testModule
.
unregister
(
overrideFn
)
;
yield
assertCurrentCombinedResults
(
0
)
;
}
)
;
add_task
(
function
*
test_state_preserved
(
)
{
let
valueObject
=
{
toString
:
(
)
=
>
"
toString
"
}
;
let
combined
=
Integration
.
testModule
.
getCombined
(
TestIntegration
)
;
combined
.
property
=
valueObject
;
Assert
.
ok
(
combined
.
property
=
=
=
valueObject
)
;
Integration
.
testModule
.
register
(
overrideFn
)
;
combined
=
Integration
.
testModule
.
getCombined
(
TestIntegration
)
;
Assert
.
equal
(
combined
.
property
"
overridden
-
toString
"
)
;
Integration
.
testModule
.
unregister
(
overrideFn
)
;
combined
=
Integration
.
testModule
.
getCombined
(
TestIntegration
)
;
Assert
.
ok
(
combined
.
property
=
=
=
valueObject
)
;
}
)
;
add_task
(
function
*
test_xpcom_throws
(
)
{
let
combined
=
Integration
.
testModule
.
getCombined
(
TestIntegration
)
;
Assert
.
throws
(
(
)
=
>
Services
.
obs
.
addObserver
(
combined
"
test
-
topic
"
true
)
"
NS_NOINTERFACE
"
)
;
}
)
;
add_task
(
function
*
test_defineModuleGetter
(
)
{
let
objectForGetters
=
{
}
;
Integration
.
testModule
.
defineModuleGetter
(
objectForGetters
"
TestIntegration
"
"
resource
:
/
/
testing
-
common
/
TestIntegration
.
jsm
"
)
;
Integration
.
testModule
.
defineModuleGetter
(
objectForGetters
"
integration
"
"
resource
:
/
/
testing
-
common
/
TestIntegration
.
jsm
"
"
TestIntegration
"
)
;
Integration
.
testModule
.
register
(
overrideFn
)
;
yield
assertCombinedResults
(
objectForGetters
.
integration
1
)
;
yield
assertCombinedResults
(
objectForGetters
.
TestIntegration
1
)
;
Integration
.
testModule
.
unregister
(
overrideFn
)
;
yield
assertCombinedResults
(
objectForGetters
.
integration
0
)
;
yield
assertCombinedResults
(
objectForGetters
.
TestIntegration
0
)
;
}
)
;
