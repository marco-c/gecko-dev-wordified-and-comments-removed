const
{
Log
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Log
.
sys
.
mjs
"
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_eval_with_system_principal
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_eval_with_system_principal
"
)
;
}
)
;
class
MockAppender
extends
Log
.
Appender
{
constructor
(
formatter
)
{
super
(
formatter
)
;
this
.
messages
=
[
]
;
}
doAppend
(
message
)
{
this
.
messages
.
push
(
message
)
;
}
}
add_task
(
function
test_Logger
(
)
{
let
log
=
Log
.
repository
.
getLogger
(
"
test
.
logger
"
)
;
let
appender
=
new
MockAppender
(
new
Log
.
BasicFormatter
(
)
)
;
log
.
level
=
Log
.
Level
.
Debug
;
appender
.
level
=
Log
.
Level
.
Info
;
log
.
addAppender
(
appender
)
;
log
.
info
(
"
info
test
"
)
;
log
.
debug
(
"
this
should
be
logged
but
not
appended
.
"
)
;
Assert
.
equal
(
appender
.
messages
.
length
1
)
;
let
msgRe
=
/
\
d
+
\
ttest
.
logger
\
t
\
INFO
\
tinfo
test
/
;
Assert
.
ok
(
msgRe
.
test
(
appender
.
messages
[
0
]
)
)
;
}
)
;
add_task
(
function
test_Logger_parent
(
)
{
let
grandparentLog
=
Log
.
repository
.
getLogger
(
"
grandparent
"
)
;
let
childLog
=
Log
.
repository
.
getLogger
(
"
grandparent
.
parent
.
child
"
)
;
Assert
.
equal
(
childLog
.
parent
.
name
"
grandparent
"
)
;
Log
.
repository
.
getLogger
(
"
grandparent
.
parent
"
)
;
Assert
.
equal
(
childLog
.
parent
.
name
"
grandparent
.
parent
"
)
;
let
gpAppender
=
new
MockAppender
(
new
Log
.
BasicFormatter
(
)
)
;
gpAppender
.
level
=
Log
.
Level
.
Info
;
grandparentLog
.
addAppender
(
gpAppender
)
;
childLog
.
info
(
"
child
info
test
"
)
;
Log
.
repository
.
rootLogger
.
info
(
"
this
shouldn
'
t
show
up
in
gpAppender
"
)
;
Assert
.
equal
(
gpAppender
.
messages
.
length
1
)
;
Assert
.
ok
(
gpAppender
.
messages
[
0
]
.
indexOf
(
"
child
info
test
"
)
>
0
)
;
}
)
;
add_task
(
async
function
log_message_with_params
(
)
{
let
formatter
=
new
Log
.
BasicFormatter
(
)
;
function
formatMessage
(
text
params
)
{
let
full
=
formatter
.
format
(
new
Log
.
LogMessage
(
"
test
.
logger
"
Log
.
Level
.
Warn
text
params
)
)
;
return
full
.
split
(
"
\
t
"
)
[
3
]
;
}
Assert
.
equal
(
formatMessage
(
"
String
is
{
foo
}
"
{
foo
:
"
bar
"
}
)
"
String
is
bar
"
)
;
Assert
.
equal
(
formatMessage
(
"
Number
is
{
number
}
"
{
number
:
47
}
)
"
Number
is
47
"
)
;
Assert
.
equal
(
formatMessage
(
"
Object
is
{
}
"
{
foo
:
"
bar
"
}
)
'
Object
is
{
"
foo
"
:
"
bar
"
}
'
)
;
Assert
.
equal
(
formatMessage
(
"
Sub
object
is
{
sub
}
"
{
sub
:
{
foo
:
"
bar
"
}
}
)
'
Sub
object
is
{
"
foo
"
:
"
bar
"
}
'
)
;
Assert
.
equal
(
formatMessage
(
"
Missing
object
is
{
missing
}
"
{
}
)
"
Missing
object
is
{
missing
}
"
)
;
Assert
.
equal
(
formatMessage
(
"
False
is
{
false
}
"
{
false
:
true
}
)
"
False
is
true
"
)
;
let
ob
=
function
(
)
{
}
;
ob
.
toJSON
=
function
(
)
{
return
{
sneaky
:
"
value
"
}
;
}
;
Assert
.
equal
(
formatMessage
(
"
JSON
is
{
sub
}
"
{
sub
:
ob
}
)
'
JSON
is
{
"
sneaky
"
:
"
value
"
}
'
)
;
ob
=
function
(
)
{
}
;
ob
.
toJSON
=
function
(
)
{
throw
new
Error
(
"
oh
noes
JSON
"
)
;
}
;
Assert
.
equal
(
formatMessage
(
"
Fail
is
{
sub
}
"
{
sub
:
ob
}
)
"
Fail
is
(
function
(
)
{
}
)
"
)
;
ob
.
toSource
=
function
(
)
{
throw
new
Error
(
"
oh
noes
SOURCE
"
)
;
}
;
Assert
.
equal
(
formatMessage
(
"
Fail
is
{
sub
}
"
{
sub
:
ob
}
)
"
Fail
is
function
(
)
{
}
"
)
;
ob
.
toString
=
function
(
)
{
throw
new
Error
(
"
oh
noes
STRING
"
)
;
}
;
Assert
.
equal
(
formatMessage
(
"
Fail
is
{
sub
}
"
{
sub
:
ob
}
)
"
Fail
is
[
object
]
"
)
;
Assert
.
equal
(
formatMessage
(
"
Text
with
no
subs
"
{
a
:
"
b
"
c
:
"
d
"
}
)
'
Text
with
no
subs
:
{
"
a
"
:
"
b
"
"
c
"
:
"
d
"
}
'
)
;
Assert
.
equal
(
formatMessage
(
"
Text
with
partial
sub
{
a
}
"
{
a
:
"
b
"
c
:
"
d
"
}
)
"
Text
with
partial
sub
b
"
)
;
Assert
.
equal
(
formatMessage
(
"
Params
with
_
{
}
"
{
a
:
"
b
"
_c
:
"
d
"
_level
:
20
_message
:
"
froo
"
_time
:
123456
_namespace
:
"
here
.
there
"
}
)
'
Params
with
_
{
"
a
"
:
"
b
"
"
_c
"
:
"
d
"
}
'
)
;
Assert
.
equal
(
formatMessage
(
"
All
params
internal
"
{
_level
:
20
_message
:
"
froo
"
_time
:
123456
_namespace
:
"
here
.
there
"
}
)
"
All
params
internal
"
)
;
Assert
.
equal
(
formatMessage
(
"
Null
{
n
}
undefined
{
u
}
"
{
n
:
null
u
:
undefined
}
)
"
Null
null
undefined
undefined
"
)
;
Assert
.
equal
(
formatMessage
(
"
number
{
n
}
boolean
{
b
}
boxed
Boolean
{
bx
}
String
{
s
}
"
{
n
:
45
b
:
false
bx
:
Boolean
(
true
)
s
:
String
(
"
whatevs
"
)
}
)
"
number
45
boolean
false
boxed
Boolean
true
String
whatevs
"
)
;
Assert
.
equal
(
formatMessage
(
"
{
a
}
{
b
}
{
c
}
"
{
a
:
"
foo
"
b
:
"
bar
"
c
:
"
baz
"
}
)
"
foobarbaz
"
)
;
let
err
=
Components
.
Exception
(
"
test
exception
"
Cr
.
NS_ERROR_FAILURE
)
;
let
str
=
formatMessage
(
"
Exception
is
{
}
"
err
)
;
Assert
.
ok
(
str
.
includes
(
'
Exception
is
[
Exception
.
.
.
"
test
exception
"
'
)
)
;
Assert
.
ok
(
str
.
includes
(
"
(
NS_ERROR_FAILURE
)
"
)
)
;
str
=
formatMessage
(
"
Exception
is
"
err
)
;
Assert
.
ok
(
str
.
includes
(
'
Exception
is
:
[
Exception
.
.
.
"
test
exception
"
'
)
)
;
str
=
formatMessage
(
"
Exception
is
{
error
}
"
{
error
:
err
}
)
;
Assert
.
ok
(
str
.
includes
(
'
Exception
is
[
Exception
.
.
.
"
test
exception
"
'
)
)
;
str
=
formatMessage
(
"
Exception
is
"
{
_error
:
err
}
)
;
info
(
str
)
;
Assert
.
ok
(
str
.
includes
(
'
Exception
is
:
{
"
_error
"
:
{
}
'
)
)
;
str
=
formatMessage
(
null
err
)
;
Assert
.
ok
(
str
.
startsWith
(
'
[
Exception
.
.
.
"
test
exception
"
'
)
)
;
str
=
formatMessage
(
null
"
String
in
place
of
params
"
)
;
Assert
.
equal
(
str
"
String
in
place
of
params
"
)
;
let
vOf
=
{
a
:
1
valueOf
:
function
(
)
{
throw
new
Error
(
"
oh
noes
valueOf
"
)
;
}
}
;
Assert
.
equal
(
formatMessage
(
"
Broken
valueOf
{
}
"
vOf
)
'
Broken
valueOf
(
{
a
:
1
valueOf
:
(
function
(
)
{
\
n
throw
new
Error
(
"
oh
noes
valueOf
"
)
;
\
n
}
)
}
)
'
)
;
Assert
.
equal
(
formatMessage
(
"
non
-
object
no
subst
"
1
)
"
non
-
object
no
subst
:
1
"
)
;
Assert
.
equal
(
formatMessage
(
"
non
-
object
all
subst
{
}
"
2
)
"
non
-
object
all
subst
2
"
)
;
Assert
.
equal
(
formatMessage
(
"
false
no
subst
"
false
)
"
false
no
subst
:
false
"
)
;
Assert
.
equal
(
formatMessage
(
"
null
no
subst
"
null
)
"
null
no
subst
:
null
"
)
;
Assert
.
equal
(
formatMessage
(
"
undefined
no
subst
"
undefined
)
"
undefined
no
subst
"
)
;
Assert
.
equal
(
formatMessage
(
"
non
-
object
named
subst
{
junk
}
space
"
3
)
"
non
-
object
named
subst
{
junk
}
space
:
3
"
)
;
Assert
.
equal
(
formatMessage
(
"
no
params
{
missing
}
"
undefined
)
"
no
params
{
missing
}
"
)
;
Assert
.
equal
(
formatMessage
(
"
object
missing
tag
{
missing
}
space
"
{
mising
:
"
not
here
"
}
)
'
object
missing
tag
{
missing
}
space
:
{
"
mising
"
:
"
not
here
"
}
'
)
;
Assert
.
equal
(
formatMessage
(
null
)
"
"
)
;
}
)
;
add_task
(
async
function
test_log_err_only
(
)
{
let
log
=
Log
.
repository
.
getLogger
(
"
error
.
only
"
)
;
let
mockFormatter
=
{
format
:
msg
=
>
msg
}
;
let
appender
=
new
MockAppender
(
mockFormatter
)
;
log
.
addAppender
(
appender
)
;
try
{
eval
(
"
javascript
syntax
error
"
)
;
}
catch
(
e
)
{
log
.
error
(
e
)
;
let
msg
=
appender
.
messages
.
pop
(
)
;
Assert
.
equal
(
msg
.
message
null
)
;
Assert
.
equal
(
msg
.
params
e
)
;
}
}
)
;
add_task
(
async
function
log_message_with_params
(
)
{
let
log
=
Log
.
repository
.
getLogger
(
"
error
.
logger
"
)
;
let
mockFormatter
=
{
format
:
msg
=
>
msg
}
;
let
appender
=
new
MockAppender
(
mockFormatter
)
;
log
.
addAppender
(
appender
)
;
let
testParams
=
{
a
:
1
b
:
2
}
;
log
.
fatal
(
"
Test
fatal
"
testParams
)
;
log
.
error
(
"
Test
error
"
testParams
)
;
log
.
warn
(
"
Test
warn
"
testParams
)
;
log
.
info
(
"
Test
info
"
testParams
)
;
log
.
config
(
"
Test
config
"
testParams
)
;
log
.
debug
(
"
Test
debug
"
testParams
)
;
log
.
trace
(
"
Test
trace
"
testParams
)
;
Assert
.
equal
(
appender
.
messages
.
length
7
)
;
for
(
let
msg
of
appender
.
messages
)
{
Assert
.
ok
(
msg
.
params
=
=
=
testParams
)
;
Assert
.
ok
(
msg
.
message
.
startsWith
(
"
Test
"
)
)
;
}
}
)
;
add_task
(
async
function
log_template_literal_message
(
)
{
let
log
=
Log
.
repository
.
getLogger
(
"
error
.
logger
"
)
;
let
appender
=
new
MockAppender
(
new
Log
.
BasicFormatter
(
)
)
;
log
.
addAppender
(
appender
)
;
log
.
fatal
Test
{
"
foo
"
}
{
42
}
;
log
.
error
Test
{
"
foo
"
}
42
;
log
.
warn
Test
foo
42
;
log
.
info
Test
{
"
foo
"
+
42
}
;
log
.
config
{
"
Test
"
}
foo
{
42
}
;
log
.
debug
Test
{
"
f
"
}
{
"
o
"
}
{
"
o
"
}
42
;
log
.
trace
{
"
Test
foo
42
"
}
;
Assert
.
equal
(
appender
.
messages
.
length
7
)
;
for
(
let
msg
of
appender
.
messages
)
{
Assert
.
equal
(
msg
.
split
(
"
\
t
"
)
[
3
]
"
Test
foo
42
"
)
;
}
}
)
;
add_task
(
async
function
format_errors
(
)
{
let
pFormat
=
new
Log
.
ParameterFormatter
(
)
;
let
err
=
new
ReferenceError
(
"
Ref
Error
"
"
ERROR_FILE
"
28
)
;
let
str
=
pFormat
.
format
(
err
)
;
Assert
.
ok
(
str
.
includes
(
"
ReferenceError
"
)
)
;
Assert
.
ok
(
str
.
includes
(
"
ERROR_FILE
:
28
"
)
)
;
Assert
.
ok
(
str
.
includes
(
"
Ref
Error
"
)
)
;
try
{
await
Promise
.
resolve
(
)
;
eval
(
"
javascript
syntax
error
"
)
;
}
catch
(
e
)
{
str
=
pFormat
.
format
(
e
)
;
Assert
.
ok
(
str
.
includes
(
"
SyntaxError
:
unexpected
token
"
)
)
;
Assert
.
ok
(
str
.
includes
(
"
:
1
:
12
)
"
)
)
;
Assert
.
ok
(
str
.
includes
(
"
format_errors
"
)
)
;
}
}
)
;
add_test
(
function
test_prefs
(
)
{
let
log
=
Log
.
repository
.
getLogger
(
"
error
.
logger
"
)
;
log
.
level
=
Log
.
Level
.
Debug
;
Services
.
prefs
.
setStringPref
(
"
logger
.
test
"
"
Error
"
)
;
log
.
manageLevelFromPref
(
"
logger
.
test
"
)
;
equal
(
log
.
level
Log
.
Level
.
Error
)
;
Services
.
prefs
.
setStringPref
(
"
logger
.
test
"
"
Error
"
)
;
Services
.
prefs
.
setStringPref
(
"
logger
.
test
"
"
Trace
"
)
;
equal
(
log
.
level
Log
.
Level
.
Trace
)
;
Services
.
prefs
.
setStringPref
(
"
logger
.
test
"
"
invalid
-
level
-
value
"
)
;
equal
(
log
.
level
Log
.
Level
.
Trace
)
;
Services
.
prefs
.
setIntPref
(
"
logger
.
test
"
123
)
;
equal
(
log
.
level
Log
.
Level
.
Trace
)
;
Services
.
prefs
.
setStringPref
(
"
logger
.
test
.
foo
"
"
Debug
"
)
;
equal
(
log
.
level
Log
.
Level
.
Trace
)
;
Log
.
repository
.
getLogger
(
"
error
"
)
.
level
=
Log
.
Level
.
All
;
Services
.
prefs
.
setStringPref
(
"
logger
.
test
"
"
"
)
;
equal
(
log
.
level
Log
.
Level
.
All
)
;
run_next_test
(
)
;
}
)
;
