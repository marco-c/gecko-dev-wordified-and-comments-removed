const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
BrowserUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
const
{
EnterprisePolicyTesting
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
EnterprisePolicyTesting
.
jsm
"
)
;
const
{
Region
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
)
;
const
{
updateAppInfo
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
jsm
"
)
;
const
{
Preferences
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
function
setupRegions
(
home
current
)
{
Region
.
_setHomeRegion
(
home
|
|
"
"
)
;
Region
.
_setCurrentRegion
(
current
|
|
"
"
)
;
}
function
setLanguage
(
language
)
{
Services
.
locale
.
availableLocales
=
[
language
]
;
Services
.
locale
.
requestedLocales
=
[
language
]
;
}
async
function
setupEnterprisePolicy
(
)
{
updateAppInfo
(
{
name
:
"
XPCShell
"
}
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
EnableTrackingProtection
:
{
Value
:
true
}
}
}
)
;
}
add_task
(
async
function
test_shouldShowVPNPromo
(
)
{
function
setPromoEnabled
(
enabled
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
vpn_promo
.
enabled
"
enabled
)
;
}
const
allowedRegion
=
"
US
"
;
const
disallowedRegion
=
"
SY
"
;
const
illegalRegion
=
"
CN
"
;
const
unsupportedRegion
=
"
LY
"
;
setupRegions
(
allowedRegion
allowedRegion
)
;
Assert
.
ok
(
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
setPromoEnabled
(
false
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
setPromoEnabled
(
true
)
;
setupRegions
(
disallowedRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
setupRegions
(
illegalRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
setupRegions
(
allowedRegion
disallowedRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
setupRegions
(
allowedRegion
illegalRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
setupRegions
(
allowedRegion
unsupportedRegion
)
;
Assert
.
ok
(
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
setupRegions
(
unsupportedRegion
allowedRegion
)
;
Assert
.
ok
(
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
if
(
AppConstants
.
platform
!
=
=
"
android
"
)
{
setupRegions
(
allowedRegion
allowedRegion
)
;
await
setupEnterprisePolicy
(
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowVPNPromo
(
)
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
"
"
)
;
}
}
)
;
add_task
(
async
function
test_shouldShowRallyPromo
(
)
{
const
allowedRegion
=
"
US
"
;
const
disallowedRegion
=
"
CN
"
;
const
allowedLanguage
=
"
en
-
US
"
;
const
disallowedLanguage
=
"
fr
"
;
setupRegions
(
allowedRegion
allowedRegion
)
;
setLanguage
(
allowedLanguage
)
;
Assert
.
ok
(
BrowserUtils
.
shouldShowRallyPromo
(
)
)
;
setupRegions
(
disallowedRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowRallyPromo
(
)
)
;
setLanguage
(
disallowedLanguage
)
;
setupRegions
(
allowedRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowRallyPromo
(
)
)
;
setupRegions
(
disallowedRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowRallyPromo
(
)
)
;
setupRegions
(
allowedRegion
disallowedRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowRallyPromo
(
)
)
;
}
)
;
add_task
(
async
function
test_sendToDeviceEmailsSupported
(
)
{
const
allowedLanguage
=
"
en
-
US
"
;
const
disallowedLanguage
=
"
ar
"
;
setLanguage
(
allowedLanguage
)
;
Assert
.
ok
(
BrowserUtils
.
sendToDeviceEmailsSupported
(
)
)
;
setLanguage
(
disallowedLanguage
)
;
Assert
.
ok
(
!
BrowserUtils
.
sendToDeviceEmailsSupported
(
)
)
;
}
)
;
add_task
(
async
function
test_shouldShowFocusPromo
(
)
{
const
allowedRegion
=
"
US
"
;
const
disallowedRegion
=
"
CN
"
;
setupRegions
(
allowedRegion
allowedRegion
)
;
Assert
.
ok
(
BrowserUtils
.
shouldShowPromo
(
BrowserUtils
.
PromoType
.
FOCUS
)
)
;
setupRegions
(
disallowedRegion
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowPromo
(
BrowserUtils
.
PromoType
.
FOCUS
)
)
;
setupRegions
(
allowedRegion
allowedRegion
)
;
if
(
AppConstants
.
platform
!
=
=
"
android
"
)
{
await
setupEnterprisePolicy
(
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowPromo
(
BrowserUtils
.
PromoType
.
FOCUS
)
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
"
"
)
;
}
Preferences
.
set
(
"
browser
.
promo
.
focus
.
enabled
"
false
)
;
Assert
.
ok
(
!
BrowserUtils
.
shouldShowPromo
(
BrowserUtils
.
PromoType
.
FOCUS
)
)
;
Preferences
.
resetBranch
(
"
browser
.
promo
.
focus
"
)
;
}
)
;
add_task
(
function
test_isShareableURL
(
)
{
Assert
.
ok
(
!
BrowserUtils
.
isShareableURL
(
"
"
)
)
;
Assert
.
ok
(
BrowserUtils
.
isShareableURL
(
Services
.
io
.
newURI
(
"
https
:
/
/
mozilla
.
org
"
)
)
)
;
Assert
.
ok
(
!
BrowserUtils
.
isShareableURL
(
Services
.
io
.
newURI
(
"
file
:
/
/
path
/
to
/
pdf
.
pdf
"
)
)
)
;
}
)
;
