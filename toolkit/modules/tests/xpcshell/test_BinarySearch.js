const
{
BinarySearch
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BinarySearch
.
jsm
"
)
;
function
run_test
(
)
{
check
(
[
]
1
false
0
)
;
check
(
[
2
]
2
true
0
)
;
check
(
[
2
]
1
false
0
)
;
check
(
[
2
]
3
false
1
)
;
check
(
[
2
4
]
2
true
0
)
;
check
(
[
2
4
]
4
true
1
)
;
check
(
[
2
4
]
1
false
0
)
;
check
(
[
2
4
]
3
false
1
)
;
check
(
[
2
4
]
5
false
2
)
;
check
(
[
2
4
6
]
2
true
0
)
;
check
(
[
2
4
6
]
4
true
1
)
;
check
(
[
2
4
6
]
6
true
2
)
;
check
(
[
2
4
6
]
1
false
0
)
;
check
(
[
2
4
6
]
3
false
1
)
;
check
(
[
2
4
6
]
5
false
2
)
;
check
(
[
2
4
6
]
7
false
3
)
;
check
(
[
2
2
]
2
true
0
)
;
check
(
[
2
2
]
1
false
0
)
;
check
(
[
2
2
]
3
false
2
)
;
check
(
[
2
2
4
]
2
true
1
)
;
check
(
[
2
2
4
]
4
true
2
)
;
check
(
[
2
2
4
]
1
false
0
)
;
check
(
[
2
2
4
]
3
false
2
)
;
check
(
[
2
2
4
]
5
false
3
)
;
check
(
[
2
4
4
]
2
true
0
)
;
check
(
[
2
4
4
]
4
true
1
)
;
check
(
[
2
4
4
]
1
false
0
)
;
check
(
[
2
4
4
]
3
false
1
)
;
check
(
[
2
4
4
]
5
false
3
)
;
check
(
[
2
4
4
6
]
2
true
0
)
;
check
(
[
2
4
4
6
]
4
true
1
)
;
check
(
[
2
4
4
6
]
6
true
3
)
;
check
(
[
2
4
4
6
]
1
false
0
)
;
check
(
[
2
4
4
6
]
3
false
1
)
;
check
(
[
2
4
4
6
]
5
false
3
)
;
check
(
[
2
4
4
6
]
7
false
4
)
;
check
(
[
2
2
4
4
6
6
]
2
true
0
)
;
check
(
[
2
2
4
4
6
6
]
4
true
2
)
;
check
(
[
2
2
4
4
6
6
]
6
true
4
)
;
check
(
[
2
2
4
4
6
6
]
1
false
0
)
;
check
(
[
2
2
4
4
6
6
]
3
false
2
)
;
check
(
[
2
2
4
4
6
6
]
5
false
4
)
;
check
(
[
2
2
4
4
6
6
]
7
false
6
)
;
}
function
check
(
array
target
expectedFound
expectedIdx
)
{
let
[
found
idx
]
=
BinarySearch
.
search
(
cmp
array
target
)
;
Assert
.
equal
(
found
expectedFound
)
;
Assert
.
equal
(
idx
expectedIdx
)
;
idx
=
expectedFound
?
expectedIdx
:
-
1
;
Assert
.
equal
(
BinarySearch
.
indexOf
(
cmp
array
target
)
idx
)
;
Assert
.
equal
(
BinarySearch
.
insertionIndexOf
(
cmp
array
target
)
expectedIdx
)
;
}
function
cmp
(
num1
num2
)
{
return
num1
-
num2
;
}
