"
use
strict
"
;
const
{
OsEnvironment
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
OsEnvironment
.
jsm
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
var
APP_SOURCE_ANYWHERE
=
"
Anywhere
"
;
var
APP_SOURCE_RECOMMENDATIONS
=
"
Recommendations
"
;
var
APP_SOURCE_PREFER_STORE
=
"
PreferStore
"
;
var
APP_SOURCE_STORE_ONLY
=
"
StoreOnly
"
;
var
APP_SOURCE_NO_SUCH_FEATURE
=
"
NoSuchFeature
"
;
var
APP_SOURCE_COLLECTION_ERROR
=
"
Error
"
;
var
gRegistryData
;
var
gErrorReadingRegistryValue
=
false
;
var
gHaveAppSourcesFeature
=
true
;
var
gErrorDetectingAppSourcesFeature
=
false
;
function
setup
(
)
{
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
telemetry
.
testing
.
overrideProductsCheck
"
true
)
;
OsEnvironment
.
Policy
.
getAllowedAppSources
=
(
)
=
>
{
if
(
gErrorReadingRegistryValue
)
{
throw
new
Error
(
"
Arbitrary
Testing
Error
"
)
;
}
return
gRegistryData
;
}
;
OsEnvironment
.
Policy
.
windowsVersionHasAppSourcesFeature
=
(
)
=
>
{
if
(
gErrorDetectingAppSourcesFeature
)
{
throw
new
Error
(
"
Arbitrary
Testing
Error
"
)
;
}
return
gHaveAppSourcesFeature
;
}
;
}
function
runTest
(
{
registryData
=
"
"
registryValueExists
=
true
registryReadError
=
false
osHasAppSourcesFeature
=
true
errorDetectingAppSourcesFeature
=
false
}
expectedScalarValue
)
{
if
(
registryValueExists
)
{
gRegistryData
=
registryData
;
}
else
{
gRegistryData
=
undefined
;
}
gErrorReadingRegistryValue
=
registryReadError
;
gHaveAppSourcesFeature
=
osHasAppSourcesFeature
;
gErrorDetectingAppSourcesFeature
=
errorDetectingAppSourcesFeature
;
OsEnvironment
.
reportAllowedAppSources
(
)
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
)
;
const
scalarName
=
"
os
.
environment
.
allowed_app_sources
"
;
Assert
.
ok
(
scalarName
in
scalars
&
&
scalars
[
scalarName
]
=
=
=
expectedScalarValue
"
The
allowed
app
sources
reported
should
match
the
expected
sources
"
)
;
}
add_task
(
async
function
testAppSources
(
)
{
setup
(
)
;
runTest
(
{
registryData
:
APP_SOURCE_ANYWHERE
}
APP_SOURCE_ANYWHERE
)
;
runTest
(
{
registryData
:
APP_SOURCE_RECOMMENDATIONS
}
APP_SOURCE_RECOMMENDATIONS
)
;
runTest
(
{
registryData
:
APP_SOURCE_PREFER_STORE
}
APP_SOURCE_PREFER_STORE
)
;
runTest
(
{
registryData
:
APP_SOURCE_STORE_ONLY
}
APP_SOURCE_STORE_ONLY
)
;
runTest
(
{
registryValueExists
:
false
}
APP_SOURCE_ANYWHERE
)
;
runTest
(
{
registryReadError
:
true
}
APP_SOURCE_COLLECTION_ERROR
)
;
runTest
(
{
registryData
:
"
UnexpectedValue
"
}
APP_SOURCE_COLLECTION_ERROR
)
;
runTest
(
{
osHasAppSourcesFeature
:
false
}
APP_SOURCE_NO_SUCH_FEATURE
)
;
runTest
(
{
errorDetectingAppSourcesFeature
:
true
}
APP_SOURCE_COLLECTION_ERROR
)
;
}
)
;
