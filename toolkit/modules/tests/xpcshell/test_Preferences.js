add_test
(
function
test_set_get_pref
(
)
{
Preferences
.
set
(
"
test_set_get_pref
.
integer
"
1
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_set_get_pref
.
integer
"
)
1
)
;
Preferences
.
set
(
"
test_set_get_pref
.
string
"
"
foo
"
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_set_get_pref
.
string
"
)
"
foo
"
)
;
Preferences
.
set
(
"
test_set_get_pref
.
boolean
"
true
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_set_get_pref
.
boolean
"
)
true
)
;
Preferences
.
resetBranch
(
"
test_set_get_pref
.
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_set_get_branch_pref
(
)
{
let
prefs
=
new
Preferences
(
"
test_set_get_branch_pref
.
"
)
;
prefs
.
set
(
"
something
"
1
)
;
Assert
.
equal
(
prefs
.
get
(
"
something
"
)
1
)
;
Assert
.
ok
(
!
Preferences
.
has
(
"
something
"
)
)
;
prefs
.
reset
(
"
something
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_set_get_multiple_prefs
(
)
{
Preferences
.
set
(
{
"
test_set_get_multiple_prefs
.
integer
"
:
1
"
test_set_get_multiple_prefs
.
string
"
:
"
foo
"
"
test_set_get_multiple_prefs
.
boolean
"
:
true
}
)
;
let
[
i
s
b
]
=
Preferences
.
get
(
[
"
test_set_get_multiple_prefs
.
integer
"
"
test_set_get_multiple_prefs
.
string
"
"
test_set_get_multiple_prefs
.
boolean
"
]
)
;
Assert
.
equal
(
i
1
)
;
Assert
.
equal
(
s
"
foo
"
)
;
Assert
.
equal
(
b
true
)
;
Preferences
.
resetBranch
(
"
test_set_get_multiple_prefs
.
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_get_multiple_prefs_with_default_value
(
)
{
Preferences
.
set
(
{
"
test_get_multiple_prefs_with_default_value
.
a
"
:
1
"
test_get_multiple_prefs_with_default_value
.
b
"
:
2
}
)
;
let
[
a
b
c
]
=
Preferences
.
get
(
[
"
test_get_multiple_prefs_with_default_value
.
a
"
"
test_get_multiple_prefs_with_default_value
.
b
"
"
test_get_multiple_prefs_with_default_value
.
c
"
]
0
)
;
Assert
.
equal
(
a
1
)
;
Assert
.
equal
(
b
2
)
;
Assert
.
equal
(
c
0
)
;
Preferences
.
resetBranch
(
"
test_get_multiple_prefs_with_default_value
.
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_set_get_unicode_pref
(
)
{
Preferences
.
set
(
"
test_set_get_unicode_pref
"
String
.
fromCharCode
(
960
)
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_set_get_unicode_pref
"
)
String
.
fromCharCode
(
960
)
)
;
Preferences
.
reset
(
"
test_set_get_unicode_pref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_set_null_pref
(
)
{
try
{
Preferences
.
set
(
"
test_set_null_pref
"
null
)
;
Assert
.
ok
(
false
)
;
}
catch
(
ex
)
{
}
run_next_test
(
)
;
}
)
;
add_test
(
function
test_set_undefined_pref
(
)
{
try
{
Preferences
.
set
(
"
test_set_undefined_pref
"
)
;
Assert
.
ok
(
false
)
;
}
catch
(
ex
)
{
}
run_next_test
(
)
;
}
)
;
add_test
(
function
test_set_unsupported_pref
(
)
{
try
{
Preferences
.
set
(
"
test_set_unsupported_pref
"
[
]
)
;
Assert
.
ok
(
false
)
;
}
catch
(
ex
)
{
}
run_next_test
(
)
;
}
)
;
add_test
(
function
test_get_string_pref
(
)
{
Services
.
prefs
.
setCharPref
(
"
test_get_string_pref
"
"
a
normal
string
"
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_get_string_pref
"
)
"
a
normal
string
"
)
;
Preferences
.
reset
(
"
test_get_string_pref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_get_localized_string_pref
(
)
{
let
prefName
=
"
test_get_localized_string_pref
"
;
let
localizedString
=
Cc
[
"
mozilla
.
org
/
pref
-
localizedstring
;
1
"
]
.
createInstance
(
Ci
.
nsIPrefLocalizedString
)
;
localizedString
.
data
=
"
a
localized
string
"
;
Services
.
prefs
.
setComplexValue
(
prefName
Ci
.
nsIPrefLocalizedString
localizedString
)
;
Assert
.
equal
(
Preferences
.
get
(
prefName
null
Ci
.
nsIPrefLocalizedString
)
"
a
localized
string
"
)
;
Preferences
.
reset
(
prefName
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_set_get_number_pref
(
)
{
Preferences
.
set
(
"
test_set_get_number_pref
"
5
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_set_get_number_pref
"
)
5
)
;
Preferences
.
set
(
"
test_set_get_number_pref
"
3
.
14159
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_set_get_number_pref
"
)
3
)
;
try
{
Preferences
.
set
(
"
test_set_get_number_pref
"
Math
.
pow
(
2
31
)
)
;
Assert
.
ok
(
false
)
;
}
catch
(
ex
)
{
}
Preferences
.
reset
(
"
test_set_get_number_pref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_reset_pref
(
)
{
Preferences
.
set
(
"
test_reset_pref
"
1
)
;
Preferences
.
reset
(
"
test_reset_pref
"
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_reset_pref
"
)
undefined
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_reset_pref_branch
(
)
{
Preferences
.
set
(
"
test_reset_pref_branch
.
foo
"
1
)
;
Preferences
.
set
(
"
test_reset_pref_branch
.
bar
"
2
)
;
Preferences
.
resetBranch
(
"
test_reset_pref_branch
.
"
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_reset_pref_branch
.
foo
"
)
undefined
)
;
Assert
.
equal
(
Preferences
.
get
(
"
test_reset_pref_branch
.
bar
"
)
undefined
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_reset_nonexistent_pref
(
)
{
Preferences
.
reset
(
"
test_reset_nonexistent_pref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_reset_nonexistent_pref_branch
(
)
{
Preferences
.
resetBranch
(
"
test_reset_nonexistent_pref_branch
.
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_observe_prefs_function
(
)
{
let
observed
=
false
;
let
observer
=
function
(
)
{
observed
=
!
observed
;
}
;
Preferences
.
observe
(
"
test_observe_prefs_function
"
observer
)
;
Preferences
.
set
(
"
test_observe_prefs_function
.
subpref
"
"
something
"
)
;
Assert
.
ok
(
!
observed
)
;
Preferences
.
set
(
"
test_observe_prefs_function
"
"
something
"
)
;
Assert
.
ok
(
observed
)
;
Preferences
.
ignore
(
"
test_observe_prefs_function
"
observer
)
;
Preferences
.
set
(
"
test_observe_prefs_function
"
"
something
else
"
)
;
Assert
.
ok
(
observed
)
;
Preferences
.
reset
(
"
test_observe_prefs_function
"
)
;
Preferences
.
reset
(
"
test_observe_prefs_function
.
subpref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_observe_prefs_object
(
)
{
let
observer
=
{
observed
:
false
observe
(
)
{
this
.
observed
=
!
this
.
observed
;
}
}
;
Preferences
.
observe
(
"
test_observe_prefs_object
"
observer
.
observe
observer
)
;
Preferences
.
set
(
"
test_observe_prefs_object
.
subpref
"
"
something
"
)
;
Assert
.
ok
(
!
observer
.
observed
)
;
Preferences
.
set
(
"
test_observe_prefs_object
"
"
something
"
)
;
Assert
.
ok
(
observer
.
observed
)
;
Preferences
.
ignore
(
"
test_observe_prefs_object
"
observer
.
observe
observer
)
;
Preferences
.
set
(
"
test_observe_prefs_object
"
"
something
else
"
)
;
Assert
.
ok
(
observer
.
observed
)
;
Preferences
.
reset
(
"
test_observe_prefs_object
"
)
;
Preferences
.
reset
(
"
test_observe_prefs_object
.
subpref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_observe_prefs_nsIObserver
(
)
{
let
observer
=
{
observed
:
false
observe
(
subject
topic
data
)
{
this
.
observed
=
!
this
.
observed
;
Assert
.
ok
(
subject
instanceof
Ci
.
nsIPrefBranch
)
;
Assert
.
equal
(
topic
"
nsPref
:
changed
"
)
;
Assert
.
equal
(
data
"
test_observe_prefs_nsIObserver
"
)
;
}
}
;
Preferences
.
observe
(
"
test_observe_prefs_nsIObserver
"
observer
)
;
Preferences
.
set
(
"
test_observe_prefs_nsIObserver
.
subpref
"
"
something
"
)
;
Preferences
.
set
(
"
test_observe_prefs_nsIObserver
"
"
something
"
)
;
Assert
.
ok
(
observer
.
observed
)
;
Preferences
.
ignore
(
"
test_observe_prefs_nsIObserver
"
observer
)
;
Preferences
.
set
(
"
test_observe_prefs_nsIObserver
"
"
something
else
"
)
;
Assert
.
ok
(
observer
.
observed
)
;
Preferences
.
reset
(
"
test_observe_prefs_nsIObserver
"
)
;
Preferences
.
reset
(
"
test_observe_prefs_nsIObserver
.
subpref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_observe_exact_pref
(
)
{
let
observed
=
false
;
let
observer
=
function
(
)
{
observed
=
!
observed
;
}
;
Preferences
.
observe
(
"
test_observe_exact_pref
"
observer
)
;
Preferences
.
set
(
"
test_observe_exact_pref
.
sub
-
pref
"
"
something
"
)
;
Assert
.
ok
(
!
observed
)
;
Preferences
.
ignore
(
"
test_observe_exact_pref
"
observer
)
;
Preferences
.
reset
(
"
test_observe_exact_pref
.
sub
-
pref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_observe_value_of_set_pref
(
)
{
let
observer
=
function
(
newVal
)
{
Assert
.
equal
(
newVal
"
something
"
)
;
}
;
Preferences
.
observe
(
"
test_observe_value_of_set_pref
"
observer
)
;
Preferences
.
set
(
"
test_observe_value_of_set_pref
.
subpref
"
"
somethingelse
"
)
;
Preferences
.
set
(
"
test_observe_value_of_set_pref
"
"
something
"
)
;
Preferences
.
ignore
(
"
test_observe_value_of_set_pref
"
observer
)
;
Preferences
.
reset
(
"
test_observe_value_of_set_pref
"
)
;
Preferences
.
reset
(
"
test_observe_value_of_set_pref
.
subpref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_observe_value_of_reset_pref
(
)
{
let
observer
=
function
(
newVal
)
{
Assert
.
equal
(
typeof
newVal
"
undefined
"
)
;
}
;
Preferences
.
set
(
"
test_observe_value_of_reset_pref
"
"
something
"
)
;
Preferences
.
observe
(
"
test_observe_value_of_reset_pref
"
observer
)
;
Preferences
.
reset
(
"
test_observe_value_of_reset_pref
"
)
;
Preferences
.
ignore
(
"
test_observe_value_of_reset_pref
"
observer
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_has_pref
(
)
{
Assert
.
ok
(
!
Preferences
.
has
(
"
test_has_pref
"
)
)
;
Preferences
.
set
(
"
test_has_pref
"
"
foo
"
)
;
Assert
.
ok
(
Preferences
.
has
(
"
test_has_pref
"
)
)
;
Preferences
.
set
(
"
test_has_pref
.
foo
"
"
foo
"
)
;
Preferences
.
set
(
"
test_has_pref
.
bar
"
"
bar
"
)
;
let
[
hasFoo
hasBar
hasBaz
]
=
Preferences
.
has
(
[
"
test_has_pref
.
foo
"
"
test_has_pref
.
bar
"
"
test_has_pref
.
baz
"
]
)
;
Assert
.
ok
(
hasFoo
)
;
Assert
.
ok
(
hasBar
)
;
Assert
.
ok
(
!
hasBaz
)
;
Preferences
.
resetBranch
(
"
test_has_pref
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
test_isSet_pref
(
)
{
Assert
.
ok
(
!
Preferences
.
isSet
(
"
toolkit
.
defaultChromeURI
"
)
)
;
Preferences
.
set
(
"
toolkit
.
defaultChromeURI
"
"
foo
"
)
;
Assert
.
ok
(
Preferences
.
isSet
(
"
toolkit
.
defaultChromeURI
"
)
)
;
Preferences
.
reset
(
"
toolkit
.
defaultChromeURI
"
)
;
run_next_test
(
)
;
}
)
;
