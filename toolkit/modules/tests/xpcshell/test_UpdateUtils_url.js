var
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
const
PREF_APP_UPDATE_CHANNEL
=
"
app
.
update
.
channel
"
;
const
PREF_APP_PARTNER_BRANCH
=
"
app
.
partner
.
"
;
const
PREF_DISTRIBUTION_ID
=
"
distribution
.
id
"
;
const
PREF_DISTRIBUTION_VERSION
=
"
distribution
.
version
"
;
const
URL_PREFIX
=
"
http
:
/
/
localhost
/
"
;
const
MSG_SHOULD_EQUAL
=
"
should
equal
the
expected
value
"
;
updateAppInfo
(
)
;
const
gAppInfo
=
getAppInfo
(
)
;
const
gDefaultPrefBranch
=
Services
.
prefs
.
getDefaultBranch
(
null
)
;
function
setUpdateChannel
(
aChannel
)
{
gDefaultPrefBranch
.
setCharPref
(
PREF_APP_UPDATE_CHANNEL
aChannel
)
;
}
function
getServicePack
(
)
{
const
BYTE
=
ctypes
.
uint8_t
;
const
WORD
=
ctypes
.
uint16_t
;
const
DWORD
=
ctypes
.
uint32_t
;
const
WCHAR
=
ctypes
.
char16_t
;
const
BOOL
=
ctypes
.
int
;
const
SZCSDVERSIONLENGTH
=
128
;
const
OSVERSIONINFOEXW
=
new
ctypes
.
StructType
(
"
OSVERSIONINFOEXW
"
[
{
dwOSVersionInfoSize
:
DWORD
}
{
dwMajorVersion
:
DWORD
}
{
dwMinorVersion
:
DWORD
}
{
dwBuildNumber
:
DWORD
}
{
dwPlatformId
:
DWORD
}
{
szCSDVersion
:
ctypes
.
ArrayType
(
WCHAR
SZCSDVERSIONLENGTH
)
}
{
wServicePackMajor
:
WORD
}
{
wServicePackMinor
:
WORD
}
{
wSuiteMask
:
WORD
}
{
wProductType
:
BYTE
}
{
wReserved
:
BYTE
}
]
)
;
let
kernel32
=
ctypes
.
open
(
"
kernel32
"
)
;
try
{
let
GetVersionEx
=
kernel32
.
declare
(
"
GetVersionExW
"
ctypes
.
winapi_abi
BOOL
OSVERSIONINFOEXW
.
ptr
)
;
let
winVer
=
OSVERSIONINFOEXW
(
)
;
winVer
.
dwOSVersionInfoSize
=
OSVERSIONINFOEXW
.
size
;
if
(
0
=
=
=
GetVersionEx
(
winVer
.
address
(
)
)
)
{
throw
(
"
Failure
in
GetVersionEx
(
returned
0
)
"
)
;
}
return
winVer
.
wServicePackMajor
+
"
.
"
+
winVer
.
wServicePackMinor
;
}
finally
{
kernel32
.
close
(
)
;
}
}
function
getProcArchitecture
(
)
{
const
WORD
=
ctypes
.
uint16_t
;
const
DWORD
=
ctypes
.
uint32_t
;
const
SYSTEM_INFO
=
new
ctypes
.
StructType
(
"
SYSTEM_INFO
"
[
{
wProcessorArchitecture
:
WORD
}
{
wReserved
:
WORD
}
{
dwPageSize
:
DWORD
}
{
lpMinimumApplicationAddress
:
ctypes
.
voidptr_t
}
{
lpMaximumApplicationAddress
:
ctypes
.
voidptr_t
}
{
dwActiveProcessorMask
:
DWORD
.
ptr
}
{
dwNumberOfProcessors
:
DWORD
}
{
dwProcessorType
:
DWORD
}
{
dwAllocationGranularity
:
DWORD
}
{
wProcessorLevel
:
WORD
}
{
wProcessorRevision
:
WORD
}
]
)
;
let
kernel32
=
ctypes
.
open
(
"
kernel32
"
)
;
try
{
let
GetNativeSystemInfo
=
kernel32
.
declare
(
"
GetNativeSystemInfo
"
ctypes
.
winapi_abi
ctypes
.
void_t
SYSTEM_INFO
.
ptr
)
;
let
sysInfo
=
SYSTEM_INFO
(
)
;
sysInfo
.
wProcessorArchitecture
=
0xffff
;
GetNativeSystemInfo
(
sysInfo
.
address
(
)
)
;
switch
(
sysInfo
.
wProcessorArchitecture
)
{
case
9
:
return
"
x64
"
;
case
6
:
return
"
IA64
"
;
case
0
:
return
"
x86
"
;
default
:
throw
(
"
Unknown
architecture
returned
from
GetNativeSystemInfo
:
"
+
sysInfo
.
wProcessorArchitecture
)
;
}
}
finally
{
kernel32
.
close
(
)
;
}
}
function
getInstructionSet
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
const
PF_MMX_INSTRUCTIONS_AVAILABLE
=
3
;
const
PF_XMMI_INSTRUCTIONS_AVAILABLE
=
6
;
const
PF_XMMI64_INSTRUCTIONS_AVAILABLE
=
10
;
const
PF_SSE3_INSTRUCTIONS_AVAILABLE
=
13
;
let
lib
=
ctypes
.
open
(
"
kernel32
.
dll
"
)
;
let
IsProcessorFeaturePresent
=
lib
.
declare
(
"
IsProcessorFeaturePresent
"
ctypes
.
winapi_abi
ctypes
.
int32_t
ctypes
.
uint32_t
)
;
let
instructionSet
=
"
unknown
"
;
try
{
if
(
IsProcessorFeaturePresent
(
PF_SSE3_INSTRUCTIONS_AVAILABLE
)
)
{
instructionSet
=
"
SSE3
"
;
}
else
if
(
IsProcessorFeaturePresent
(
PF_XMMI64_INSTRUCTIONS_AVAILABLE
)
)
{
instructionSet
=
"
SSE2
"
;
}
else
if
(
IsProcessorFeaturePresent
(
PF_XMMI_INSTRUCTIONS_AVAILABLE
)
)
{
instructionSet
=
"
SSE
"
;
}
else
if
(
IsProcessorFeaturePresent
(
PF_MMX_INSTRUCTIONS_AVAILABLE
)
)
{
instructionSet
=
"
MMX
"
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
"
Error
getting
processor
instruction
set
.
"
+
"
Exception
:
"
+
e
)
;
}
lib
.
close
(
)
;
return
instructionSet
;
}
return
"
NA
"
;
}
function
getMemoryMB
(
)
{
let
memoryMB
=
"
unknown
"
;
try
{
memoryMB
=
Services
.
sysinfo
.
getProperty
(
"
memsize
"
)
;
if
(
memoryMB
)
{
memoryMB
=
Math
.
round
(
memoryMB
/
1024
/
1024
)
;
}
}
catch
(
e
)
{
do_throw
(
"
Error
getting
system
info
memsize
property
.
Exception
:
"
+
e
)
;
}
return
memoryMB
;
}
function
getResult
(
url
)
{
url
=
UpdateUtils
.
formatUpdateURL
(
url
)
;
return
url
.
substr
(
URL_PREFIX
.
length
)
.
split
(
"
/
"
)
[
0
]
;
}
add_task
(
function
*
test_product
(
)
{
let
url
=
URL_PREFIX
+
"
%
PRODUCT
%
/
"
;
Assert
.
equal
(
getResult
(
url
)
gAppInfo
.
name
"
the
url
param
for
%
PRODUCT
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_version
(
)
{
let
url
=
URL_PREFIX
+
"
%
VERSION
%
/
"
;
Assert
.
equal
(
getResult
(
url
)
gAppInfo
.
version
"
the
url
param
for
%
VERSION
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_build_id
(
)
{
let
url
=
URL_PREFIX
+
"
%
BUILD_ID
%
/
"
;
Assert
.
equal
(
getResult
(
url
)
gAppInfo
.
appBuildID
"
the
url
param
for
%
BUILD_ID
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_build_target
(
)
{
let
url
=
URL_PREFIX
+
"
%
BUILD_TARGET
%
/
"
;
let
abi
;
try
{
abi
=
gAppInfo
.
XPCOMABI
;
}
catch
(
e
)
{
do_throw
(
"
nsIXULAppInfo
:
XPCOMABI
not
defined
\
n
"
)
;
}
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
let
macutils
=
Cc
[
"
mozilla
.
org
/
xpcom
/
mac
-
utils
;
1
"
]
.
getService
(
Ci
.
nsIMacUtils
)
;
if
(
macutils
.
isUniversalBinary
)
{
abi
+
=
"
-
u
-
"
+
macutils
.
architecturesInBinary
;
}
}
else
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
abi
+
=
"
-
"
+
getProcArchitecture
(
)
;
}
Assert
.
equal
(
getResult
(
url
)
gAppInfo
.
OS
+
"
_
"
+
abi
"
the
url
param
for
%
BUILD_TARGET
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_locale
(
)
{
do_get_profile
(
)
;
let
url
=
URL_PREFIX
+
"
%
LOCALE
%
/
"
;
Assert
.
equal
(
getResult
(
url
)
AppConstants
.
INSTALL_LOCALE
"
the
url
param
for
%
LOCALE
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_channel
(
)
{
let
url
=
URL_PREFIX
+
"
%
CHANNEL
%
/
"
;
setUpdateChannel
(
"
test_channel
"
)
;
Assert
.
equal
(
getResult
(
url
)
"
test_channel
"
"
the
url
param
for
%
CHANNEL
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_channel_distribution
(
)
{
let
url
=
URL_PREFIX
+
"
%
CHANNEL
%
/
"
;
gDefaultPrefBranch
.
setCharPref
(
PREF_APP_PARTNER_BRANCH
+
"
test_partner1
"
"
test_partner1
"
)
;
gDefaultPrefBranch
.
setCharPref
(
PREF_APP_PARTNER_BRANCH
+
"
test_partner2
"
"
test_partner2
"
)
;
Assert
.
equal
(
getResult
(
url
)
"
test_channel
-
cck
-
test_partner1
-
test_partner2
"
"
the
url
param
for
%
CHANNEL
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_platform_version
(
)
{
let
url
=
URL_PREFIX
+
"
%
PLATFORM_VERSION
%
/
"
;
Assert
.
equal
(
getResult
(
url
)
gAppInfo
.
platformVersion
"
the
url
param
for
%
PLATFORM_VERSION
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_os_version
(
)
{
let
url
=
URL_PREFIX
+
"
%
OS_VERSION
%
/
"
;
let
osVersion
;
let
sysInfo
=
Cc
[
"
mozilla
.
org
/
system
-
info
;
1
"
]
.
getService
(
Ci
.
nsIPropertyBag2
)
;
osVersion
=
sysInfo
.
getProperty
(
"
name
"
)
+
"
"
+
sysInfo
.
getProperty
(
"
version
"
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
try
{
let
servicePack
=
getServicePack
(
)
;
osVersion
+
=
"
.
"
+
servicePack
;
}
catch
(
e
)
{
do_throw
(
"
Failure
obtaining
service
pack
:
"
+
e
)
;
}
if
(
"
5
.
0
"
=
=
=
sysInfo
.
getProperty
(
"
version
"
)
)
{
osVersion
+
=
"
(
unknown
)
"
;
}
else
{
try
{
osVersion
+
=
"
(
"
+
getProcArchitecture
(
)
+
"
)
"
;
}
catch
(
e
)
{
do_throw
(
"
Failed
to
obtain
processor
architecture
:
"
+
e
)
;
}
}
}
if
(
osVersion
)
{
try
{
osVersion
+
=
"
(
"
+
sysInfo
.
getProperty
(
"
secondaryLibrary
"
)
+
"
)
"
;
}
catch
(
e
)
{
}
osVersion
=
encodeURIComponent
(
osVersion
)
;
}
Assert
.
equal
(
getResult
(
url
)
osVersion
"
the
url
param
for
%
OS_VERSION
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_distribution
(
)
{
let
url
=
URL_PREFIX
+
"
%
DISTRIBUTION
%
/
"
;
gDefaultPrefBranch
.
setCharPref
(
PREF_DISTRIBUTION_ID
"
test_distro
"
)
;
Assert
.
equal
(
getResult
(
url
)
"
test_distro
"
"
the
url
param
for
%
DISTRIBUTION
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_distribution_version
(
)
{
let
url
=
URL_PREFIX
+
"
%
DISTRIBUTION_VERSION
%
/
"
;
gDefaultPrefBranch
.
setCharPref
(
PREF_DISTRIBUTION_VERSION
"
test_distro_version
"
)
;
Assert
.
equal
(
getResult
(
url
)
"
test_distro_version
"
"
the
url
param
for
%
DISTRIBUTION_VERSION
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_custom
(
)
{
Services
.
prefs
.
setCharPref
(
"
app
.
update
.
custom
"
"
custom
"
)
;
let
url
=
URL_PREFIX
+
"
%
CUSTOM
%
/
"
;
Assert
.
equal
(
getResult
(
url
)
"
custom
"
"
the
url
query
string
for
%
CUSTOM
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
add_task
(
function
*
test_systemCapabilities
(
)
{
let
url
=
URL_PREFIX
+
"
%
SYSTEM_CAPABILITIES
%
/
"
;
let
systemCapabilities
=
getInstructionSet
(
)
+
"
"
+
getMemoryMB
(
)
;
Assert
.
equal
(
getResult
(
url
)
systemCapabilities
"
the
url
param
for
%
SYSTEM_CAPABILITIES
%
"
+
MSG_SHOULD_EQUAL
)
;
}
)
;
