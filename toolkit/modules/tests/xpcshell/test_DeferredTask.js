ChromeUtils
.
defineModuleGetter
(
this
"
DeferredTask
"
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
)
;
const
T
=
100
;
function
promiseTimeout
(
aTimeoutMs
)
{
return
new
Promise
(
resolve
=
>
{
do_timeout
(
aTimeoutMs
resolve
)
;
}
)
;
}
add_test
(
function
test_arm_simple
(
)
{
new
DeferredTask
(
run_next_test
10
)
.
arm
(
)
;
}
)
;
add_test
(
function
test_arm_delay_respected
(
)
{
let
executed1
=
false
;
let
executed2
=
false
;
new
DeferredTask
(
function
(
)
{
executed1
=
true
;
Assert
.
ok
(
!
executed2
)
;
}
1
*
T
)
.
arm
(
)
;
new
DeferredTask
(
function
(
)
{
executed2
=
true
;
Assert
.
ok
(
executed1
)
;
run_next_test
(
)
;
}
2
*
T
)
.
arm
(
)
;
}
)
;
add_test
(
function
test_arm_delay_notrestarted
(
)
{
let
executed
=
false
;
let
deferredTask
=
new
DeferredTask
(
(
)
=
>
{
executed
=
true
;
}
4
*
T
)
;
deferredTask
.
arm
(
)
;
do_timeout
(
2
*
T
(
)
=
>
deferredTask
.
arm
(
)
)
;
do_timeout
(
5
*
T
function
(
)
{
Assert
.
ok
(
executed
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_arm_coalesced
(
)
{
let
executed
=
false
;
let
deferredTask
=
new
DeferredTask
(
function
(
)
{
Assert
.
ok
(
!
executed
)
;
executed
=
true
;
run_next_test
(
)
;
}
50
)
;
deferredTask
.
arm
(
)
;
deferredTask
.
arm
(
)
;
}
)
;
add_test
(
function
test_arm_coalesced_nodelay
(
)
{
let
executed
=
false
;
let
deferredTask
=
new
DeferredTask
(
function
(
)
{
Assert
.
ok
(
!
executed
)
;
executed
=
true
;
run_next_test
(
)
;
}
0
)
;
deferredTask
.
arm
(
)
;
deferredTask
.
arm
(
)
;
}
)
;
add_test
(
function
test_arm_recursive
(
)
{
let
executed
=
false
;
let
deferredTask
=
new
DeferredTask
(
function
(
)
{
if
(
!
executed
)
{
executed
=
true
;
deferredTask
.
arm
(
)
;
}
else
{
run_next_test
(
)
;
}
}
50
)
;
deferredTask
.
arm
(
)
;
}
)
;
add_test
(
function
test_arm_async
(
)
{
let
finishedExecution
=
false
;
let
finishedExecutionAgain
=
false
;
let
deferredTask
=
new
DeferredTask
(
async
function
(
)
{
await
promiseTimeout
(
4
*
T
)
;
if
(
!
finishedExecution
)
{
finishedExecution
=
true
;
}
else
if
(
!
finishedExecutionAgain
)
{
finishedExecutionAgain
=
true
;
}
}
2
*
T
)
;
deferredTask
.
arm
(
)
;
do_timeout
(
4
*
T
function
(
)
{
Assert
.
ok
(
deferredTask
.
isRunning
)
;
Assert
.
ok
(
!
finishedExecution
)
;
deferredTask
.
arm
(
)
;
}
)
;
do_timeout
(
7
*
T
function
(
)
{
Assert
.
ok
(
!
deferredTask
.
isRunning
)
;
Assert
.
ok
(
finishedExecution
)
;
}
)
;
do_timeout
(
10
*
T
function
(
)
{
Assert
.
ok
(
deferredTask
.
isRunning
)
;
Assert
.
ok
(
!
finishedExecutionAgain
)
;
}
)
;
do_timeout
(
13
*
T
function
(
)
{
Assert
.
ok
(
!
deferredTask
.
isRunning
)
;
Assert
.
ok
(
finishedExecutionAgain
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_arm_async_function
(
)
{
let
deferredTask
=
new
DeferredTask
(
async
function
(
)
{
await
Promise
.
resolve
(
)
;
run_next_test
(
)
;
}
50
)
;
deferredTask
.
arm
(
)
;
}
)
;
add_test
(
function
test_disarm
(
)
{
let
deferredTask
=
new
DeferredTask
(
function
(
)
{
do_throw
(
"
This
task
should
not
run
.
"
)
;
}
2
*
T
)
;
deferredTask
.
arm
(
)
;
do_timeout
(
1
*
T
(
)
=
>
deferredTask
.
disarm
(
)
)
;
do_timeout
(
3
*
T
run_next_test
)
;
}
)
;
add_test
(
function
test_disarm_delay_restarted
(
)
{
let
executed
=
false
;
let
deferredTask
=
new
DeferredTask
(
(
)
=
>
{
executed
=
true
;
}
4
*
T
)
;
deferredTask
.
arm
(
)
;
do_timeout
(
2
*
T
function
(
)
{
deferredTask
.
disarm
(
)
;
deferredTask
.
arm
(
)
;
}
)
;
do_timeout
(
5
*
T
function
(
)
{
Assert
.
ok
(
!
executed
)
;
}
)
;
do_timeout
(
7
*
T
function
(
)
{
Assert
.
ok
(
executed
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_disarm_async
(
)
{
let
finishedExecution
=
false
;
let
deferredTask
=
new
DeferredTask
(
async
function
(
)
{
deferredTask
.
arm
(
)
;
await
promiseTimeout
(
2
*
T
)
;
finishedExecution
=
true
;
}
1
*
T
)
;
deferredTask
.
arm
(
)
;
do_timeout
(
2
*
T
function
(
)
{
Assert
.
ok
(
deferredTask
.
isRunning
)
;
Assert
.
ok
(
deferredTask
.
isArmed
)
;
Assert
.
ok
(
!
finishedExecution
)
;
deferredTask
.
disarm
(
)
;
}
)
;
do_timeout
(
4
*
T
function
(
)
{
Assert
.
ok
(
!
deferredTask
.
isRunning
)
;
Assert
.
ok
(
!
deferredTask
.
isArmed
)
;
Assert
.
ok
(
finishedExecution
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_disarm_immediate_async
(
)
{
let
executed
=
false
;
let
deferredTask
=
new
DeferredTask
(
async
function
(
)
{
Assert
.
ok
(
!
executed
)
;
executed
=
true
;
await
promiseTimeout
(
2
*
T
)
;
}
1
*
T
)
;
deferredTask
.
arm
(
)
;
do_timeout
(
2
*
T
function
(
)
{
Assert
.
ok
(
deferredTask
.
isRunning
)
;
Assert
.
ok
(
!
deferredTask
.
isArmed
)
;
deferredTask
.
arm
(
)
;
deferredTask
.
disarm
(
)
;
}
)
;
do_timeout
(
4
*
T
function
(
)
{
Assert
.
ok
(
executed
)
;
Assert
.
ok
(
!
deferredTask
.
isRunning
)
;
Assert
.
ok
(
!
deferredTask
.
isArmed
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_isArmed_isRunning
(
)
{
let
deferredTask
=
new
DeferredTask
(
function
(
)
{
Assert
.
ok
(
deferredTask
.
isRunning
)
;
Assert
.
ok
(
!
deferredTask
.
isArmed
)
;
deferredTask
.
arm
(
)
;
Assert
.
ok
(
deferredTask
.
isArmed
)
;
deferredTask
.
disarm
(
)
;
Assert
.
ok
(
!
deferredTask
.
isArmed
)
;
run_next_test
(
)
;
}
50
)
;
Assert
.
ok
(
!
deferredTask
.
isArmed
)
;
deferredTask
.
arm
(
)
;
Assert
.
ok
(
deferredTask
.
isArmed
)
;
Assert
.
ok
(
!
deferredTask
.
isRunning
)
;
}
)
;
add_test
(
function
test_finalize
(
)
{
let
executed
=
false
;
let
timePassed
=
false
;
let
deferredTask
=
new
DeferredTask
(
function
(
)
{
Assert
.
ok
(
!
timePassed
)
;
executed
=
true
;
}
2
*
T
)
;
deferredTask
.
arm
(
)
;
do_timeout
(
1
*
T
(
)
=
>
{
timePassed
=
true
;
}
)
;
deferredTask
.
finalize
(
)
.
then
(
function
(
)
{
Assert
.
ok
(
executed
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_finalize_executes_entirely
(
)
{
let
executed
=
false
;
let
executedAgain
=
false
;
let
timePassed
=
false
;
let
deferredTask
=
new
DeferredTask
(
async
function
(
)
{
if
(
!
executed
)
{
deferredTask
.
arm
(
)
;
Assert
.
ok
(
deferredTask
.
isArmed
)
;
Assert
.
ok
(
deferredTask
.
isRunning
)
;
deferredTask
.
finalize
(
)
.
then
(
function
(
)
{
Assert
.
ok
(
executedAgain
)
;
Assert
.
ok
(
!
timePassed
)
;
Assert
.
ok
(
!
deferredTask
.
isArmed
)
;
Assert
.
ok
(
!
deferredTask
.
isRunning
)
;
run_next_test
(
)
;
}
)
;
do_timeout
(
3
*
T
(
)
=
>
{
timePassed
=
true
;
}
)
;
}
await
promiseTimeout
(
1
*
T
)
;
if
(
executed
)
{
Assert
.
ok
(
deferredTask
.
isRunning
)
;
executedAgain
=
true
;
}
else
{
executed
=
true
;
}
}
2
*
T
)
;
deferredTask
.
arm
(
)
;
}
)
;
