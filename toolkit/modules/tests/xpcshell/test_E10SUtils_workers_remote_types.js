const
{
E10SUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
sys
.
mjs
"
)
;
const
URI_SECURE_COM
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
const
URI_SECURE_ORG
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
const
URI_INSECURE_ORG
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
org
"
)
;
const
URI_FILE
=
Services
.
io
.
newURI
(
"
file
:
/
/
/
path
/
to
/
dir
"
)
;
const
URI_EXTENSION
=
Services
.
io
.
newURI
(
"
moz
-
extension
:
/
/
fake
-
uuid
"
)
;
const
URI_EXT_PROTOCOL
=
Services
.
io
.
newURI
(
"
ext
+
custom
:
/
/
fake
-
url
"
)
;
const
URI_WEB_PROTOCOL
=
Services
.
io
.
newURI
(
"
web
+
custom
:
/
/
fake
-
url
"
)
;
const
URI_PRIVILEGEDMOZILLA
=
Services
.
io
.
newURI
(
"
https
:
/
/
addons
.
mozilla
.
org
"
)
;
const
fakeContentScriptSandbox
=
Cu
.
Sandbox
(
[
"
https
:
/
/
example
.
org
"
"
moz
-
extension
:
/
/
fake
-
uuid
"
]
{
}
)
;
const
ssm
=
Services
.
scriptSecurityManager
;
const
systemPrincipal
=
ssm
.
getSystemPrincipal
(
)
;
const
nullPrincipal
=
ssm
.
createNullPrincipal
(
{
}
)
;
const
principalSecureCom
=
ssm
.
createContentPrincipal
(
URI_SECURE_COM
{
}
)
;
const
principalSecureOrg
=
ssm
.
createContentPrincipal
(
URI_SECURE_ORG
{
}
)
;
const
principalInsecureOrg
=
ssm
.
createContentPrincipal
(
URI_INSECURE_ORG
{
}
)
;
const
principalFile
=
ssm
.
createContentPrincipal
(
URI_FILE
{
}
)
;
const
principalExtension
=
ssm
.
createContentPrincipal
(
URI_EXTENSION
{
}
)
;
const
principalExpanded
=
Cu
.
getObjectPrincipal
(
fakeContentScriptSandbox
)
;
const
principalExtProtocol
=
ssm
.
createContentPrincipal
(
URI_EXT_PROTOCOL
{
}
)
;
const
principalWebProtocol
=
ssm
.
createContentPrincipal
(
URI_WEB_PROTOCOL
{
}
)
;
const
principalPrivilegedMozilla
=
ssm
.
createContentPrincipal
(
URI_PRIVILEGEDMOZILLA
{
}
)
;
const
{
EXTENSION_REMOTE_TYPE
FILE_REMOTE_TYPE
FISSION_WEB_REMOTE_TYPE
NOT_REMOTE
PRIVILEGEDABOUT_REMOTE_TYPE
PRIVILEGEDMOZILLA_REMOTE_TYPE
SERVICEWORKER_REMOTE_TYPE
WEB_REMOTE_COOP_COEP_TYPE_PREFIX
WEB_REMOTE_TYPE
}
=
E10SUtils
;
const
{
REMOTE_WORKER_TYPE_SHARED
REMOTE_WORKER_TYPE_SERVICE
}
=
Ci
.
nsIE10SUtils
;
add_task
(
function
test_get_remote_type_for_service_worker
(
)
{
for
(
const
principal
of
[
systemPrincipal
nullPrincipal
]
)
{
Assert
.
throws
(
(
)
=
>
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principal
REMOTE_WORKER_TYPE_SERVICE
true
false
)
/
Unexpected
system
or
null
principal
/
Did
raise
an
exception
on
"
{
principal
.
origin
}
"
principal
ServiceWorker
)
;
}
function
*
getTestCase
(
fission
=
false
)
{
const
TEST_PRINCIPALS
=
[
principalSecureCom
principalSecureOrg
principalExtension
]
;
const
PREFERRED_REMOTE_TYPES
=
[
E10SUtils
.
DEFAULT_REMOTE_TYPE
E10SUtils
.
WEB_REMOTE_TYPE
"
fakeRemoteType
"
]
;
for
(
const
principal
of
TEST_PRINCIPALS
)
{
for
(
const
preferred
of
PREFERRED_REMOTE_TYPES
)
{
const
msg
=
ServiceWorker
principal
=
{
principal
.
origin
}
preferredRemoteType
=
{
preferred
}
{
fission
?
"
fission
"
:
"
e10s
"
}
;
yield
[
msg
principal
REMOTE_WORKER_TYPE_SERVICE
true
fission
preferred
]
;
}
}
}
for
(
const
testCase
of
getTestCase
(
false
)
)
{
const
[
msg
principal
.
.
.
args
]
=
testCase
;
let
expected
=
E10SUtils
.
WEB_REMOTE_TYPE
;
if
(
principal
=
=
principalExtension
)
{
expected
=
WebExtensionPolicy
.
useRemoteWebExtensions
?
E10SUtils
.
EXTENSION_REMOTE_TYPE
:
E10SUtils
.
NOT_REMOTE
;
}
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principal
.
.
.
args
)
expected
msg
)
;
}
for
(
const
testCase
of
getTestCase
(
true
)
)
{
const
[
msg
principal
.
.
.
args
]
=
testCase
;
let
expected
=
{
SERVICEWORKER_REMOTE_TYPE
}
=
{
principal
.
siteOrigin
}
;
if
(
principal
=
=
principalExtension
)
{
expected
=
WebExtensionPolicy
.
useRemoteWebExtensions
?
E10SUtils
.
EXTENSION_REMOTE_TYPE
:
E10SUtils
.
NOT_REMOTE
;
}
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principal
.
.
.
args
)
expected
msg
)
;
}
}
)
;
add_task
(
function
test_get_remote_type_for_shared_worker
(
)
{
for
(
const
[
principal
preferredRemoteType
]
of
[
[
principalSecureCom
{
WEB_REMOTE_COOP_COEP_TYPE_PREFIX
}
=
{
principalSecureCom
.
siteOrigin
}
]
]
)
{
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principal
REMOTE_WORKER_TYPE_SHARED
true
false
preferredRemoteType
)
WEB_REMOTE_TYPE
Got
WEB_REMOTE_TYPE
on
preferred
{
preferredRemoteType
}
and
fission
disabled
)
;
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principal
REMOTE_WORKER_TYPE_SHARED
true
true
preferredRemoteType
)
{
FISSION_WEB_REMOTE_TYPE
}
=
{
principal
.
siteOrigin
}
Got
WEB_REMOTE_TYPE
on
preferred
{
preferredRemoteType
}
and
fission
enabled
)
;
}
for
(
const
[
principal
preferredRemoteType
]
of
[
[
systemPrincipal
NOT_REMOTE
]
[
systemPrincipal
PRIVILEGEDABOUT_REMOTE_TYPE
]
]
)
{
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principal
REMOTE_WORKER_TYPE_SHARED
true
true
preferredRemoteType
)
preferredRemoteType
Selected
the
preferred
{
preferredRemoteType
}
on
system
principal
shared
worker
)
;
}
Assert
.
throws
(
(
)
=
>
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
systemPrincipal
REMOTE_WORKER_TYPE_SHARED
true
true
"
fakeRemoteType
"
)
/
Failed
to
get
a
remoteType
/
"
Does
fail
explicitly
on
system
worker
for
arbitrary
preferredRemoteType
"
)
;
for
(
const
[
principal
expectedRemoteType
]
of
[
[
principalSecureCom
{
FISSION_WEB_REMOTE_TYPE
}
=
{
principalSecureCom
.
siteOrigin
}
]
[
principalExtension
WebExtensionPolicy
.
useRemoteWebExtensions
?
EXTENSION_REMOTE_TYPE
:
NOT_REMOTE
]
]
)
{
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principal
REMOTE_WORKER_TYPE_SHARED
true
true
NOT_REMOTE
)
expectedRemoteType
Got
{
expectedRemoteType
}
for
content
principal
{
principal
.
siteOrigin
}
)
;
}
for
(
const
[
preferredRemoteType
expectedRemoteType
]
of
[
[
WEB_REMOTE_TYPE
WEB_REMOTE_TYPE
]
[
"
fakeRemoteType
"
"
fakeRemoteType
"
]
]
)
{
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principalWebProtocol
REMOTE_WORKER_TYPE_SHARED
true
true
preferredRemoteType
)
expectedRemoteType
"
Selected
expected
process
for
web
+
custom
:
/
/
shared
worker
"
)
;
}
for
(
const
[
preferredRemoteType
expectedRemoteType
]
of
[
[
WEB_REMOTE_TYPE
WEB_REMOTE_TYPE
]
[
"
fakeRemoteType
"
"
fakeRemoteType
"
]
]
)
{
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principalExtProtocol
REMOTE_WORKER_TYPE_SHARED
true
true
preferredRemoteType
)
expectedRemoteType
"
Selected
expected
process
for
ext
+
custom
:
/
/
shared
worker
"
)
;
}
const
expectedFileRemoteType
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
remote
.
separateFileUriProcess
"
false
)
?
FILE_REMOTE_TYPE
:
WEB_REMOTE_TYPE
;
for
(
const
[
preferredRemoteType
expectedRemoteType
]
of
[
[
WEB_REMOTE_TYPE
expectedFileRemoteType
]
[
"
fakeRemoteType
"
expectedFileRemoteType
]
]
)
{
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principalFile
REMOTE_WORKER_TYPE_SHARED
true
true
preferredRemoteType
)
expectedRemoteType
"
Got
expected
remote
type
on
file
principal
shared
worker
"
)
;
}
const
usePrivilegedMozilla
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
remote
.
separatePrivilegedMozillaWebContentProcess
"
false
)
;
const
expectedRemoteType
=
usePrivilegedMozilla
?
PRIVILEGEDMOZILLA_REMOTE_TYPE
:
{
FISSION_WEB_REMOTE_TYPE
}
=
https
:
/
/
mozilla
.
org
;
for
(
const
preferredRemoteType
of
[
PRIVILEGEDMOZILLA_REMOTE_TYPE
"
fakeRemoteType
"
]
)
{
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principalPrivilegedMozilla
REMOTE_WORKER_TYPE_SHARED
true
true
preferredRemoteType
)
expectedRemoteType
"
Got
expected
remote
type
on
privilegedmozilla
principal
shared
worker
"
)
;
}
}
)
;
add_task
(
function
test_get_remote_type_throws_on_expanded_principals
(
)
{
for
(
const
workerType
of
[
REMOTE_WORKER_TYPE_SHARED
REMOTE_WORKER_TYPE_SERVICE
]
)
{
Assert
.
throws
(
(
)
=
>
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
principalExpanded
workerType
true
false
)
/
Unexpected
expanded
principal
/
"
Did
raise
an
exception
as
expected
"
)
;
}
}
)
;
add_task
(
function
test_get_remote_type_multiprocess_disabled
(
)
{
function
*
getTestCase
(
)
{
const
TEST_PRINCIPALS
=
[
systemPrincipal
nullPrincipal
principalSecureCom
principalSecureOrg
principalInsecureOrg
principalFile
principalExtension
]
;
const
PREFERRED_REMOTE_TYPES
=
[
E10SUtils
.
DEFAULT_REMOTE_TYPE
E10SUtils
.
WEB_REMOTE_TYPE
"
fakeRemoteType
"
]
;
for
(
const
principal
of
TEST_PRINCIPALS
)
{
for
(
const
preferred
of
PREFERRED_REMOTE_TYPES
)
{
const
msg
=
SharedWorker
principal
=
{
principal
.
origin
}
preferredRemoteType
=
{
preferred
}
;
yield
[
msg
principal
REMOTE_WORKER_TYPE_SHARED
false
false
preferred
]
;
}
}
for
(
const
principal
of
TEST_PRINCIPALS
)
{
if
(
principal
.
isSystemPrincipal
|
|
principal
.
isNullPrincipal
)
{
continue
;
}
for
(
const
preferred
of
PREFERRED_REMOTE_TYPES
)
{
const
msg
=
ServiceWorker
with
principal
{
principal
.
origin
}
and
preferredRemoteType
{
preferred
}
;
yield
[
msg
principal
REMOTE_WORKER_TYPE_SERVICE
false
false
preferred
]
;
}
}
}
for
(
const
testCase
of
getTestCase
(
)
)
{
const
[
msg
.
.
.
args
]
=
testCase
;
equal
(
E10SUtils
.
getRemoteTypeForWorkerPrincipal
(
.
.
.
args
)
E10SUtils
.
NOT_REMOTE
Expect
NOT_REMOTE
on
disabled
multiprocess
:
{
msg
}
)
;
}
}
)
;
