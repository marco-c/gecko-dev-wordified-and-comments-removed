add_task
(
async
function
test_getSelectionDetails_input
(
)
{
const
url
=
kFixtureBaseURL
+
"
file_getSelectionDetails_inputs
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
function
checkSelection
(
{
id
text
linkURL
}
)
{
const
{
SelectionUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
SelectionUtils
.
sys
.
mjs
"
)
;
content
.
document
.
getElementById
(
id
)
.
select
(
)
;
content
.
getSelection
(
)
.
removeAllRanges
(
)
;
let
info
=
SelectionUtils
.
getSelectionDetails
(
content
)
;
Assert
.
equal
(
text
info
.
text
)
;
Assert
.
strictEqual
(
info
.
docSelectionIsCollapsed
false
)
;
Assert
.
equal
(
linkURL
info
.
linkURL
)
;
}
checkSelection
(
{
id
:
"
url
-
no
-
scheme
"
text
:
"
test
.
example
.
com
"
linkURL
:
"
http
:
/
/
test
.
example
.
com
/
"
}
)
;
checkSelection
(
{
id
:
"
url
-
with
-
scheme
"
text
:
"
https
:
/
/
test
.
example
.
com
"
linkURL
:
"
https
:
/
/
test
.
example
.
com
/
"
}
)
;
checkSelection
(
{
id
:
"
not
-
url
"
text
:
"
foo
.
bar
"
linkURL
:
null
}
)
;
checkSelection
(
{
id
:
"
not
-
url
-
number
"
text
:
"
3
.
5
"
linkURL
:
null
}
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_getSelectionDetails_shadow_selection
(
)
{
const
url
=
kFixtureBaseURL
+
"
file_getSelectionDetails_inputs
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
function
checkSelection
(
)
{
const
{
SelectionUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
SelectionUtils
.
sys
.
mjs
"
)
;
const
text
=
content
.
document
.
getElementById
(
"
outer
"
)
;
const
host
=
content
.
document
.
getElementById
(
"
host
"
)
;
content
.
getSelection
(
)
.
setBaseAndExtent
(
text
0
host
.
shadowRoot
.
getElementById
(
"
inner
"
)
.
firstChild
3
)
;
let
info
=
SelectionUtils
.
getSelectionDetails
(
content
)
;
Assert
.
strictEqual
(
info
.
docSelectionIsCollapsed
false
)
;
}
checkSelection
(
)
;
}
)
;
}
)
;
}
)
;
