const
PREF_DEPRECATION_WARNINGS
=
"
devtools
.
errorconsole
.
deprecation_warnings
"
;
function
basicDeprecatedFunction
(
)
{
Deprecated
.
warning
(
"
this
method
is
deprecated
.
"
"
https
:
/
/
example
.
com
"
)
;
return
true
;
}
function
deprecationFunctionBogusCallstack
(
)
{
Deprecated
.
warning
(
"
this
method
is
deprecated
.
"
"
https
:
/
/
example
.
com
"
{
caller
:
{
}
}
)
;
return
true
;
}
function
deprecationFunctionCustomCallstack
(
)
{
function
getStack
(
)
{
return
Components
.
stack
;
}
Deprecated
.
warning
(
"
this
method
is
deprecated
.
"
"
https
:
/
/
example
.
com
"
getStack
(
)
)
;
return
true
;
}
var
tests
=
[
{
deprecatedFunction
:
basicDeprecatedFunction
expectedObservation
(
aMessage
)
{
testAMessage
(
aMessage
)
;
ok
(
aMessage
.
indexOf
(
"
basicDeprecatedFunction
"
)
>
0
"
Callstack
is
correctly
logged
.
"
)
;
}
}
{
deprecatedFunction
(
)
{
Deprecated
.
warning
(
"
this
method
is
deprecated
.
"
)
;
return
true
;
}
expectedObservation
(
aMessage
)
{
ok
(
aMessage
.
indexOf
(
"
must
provide
a
URL
"
)
>
0
"
Deprecation
warning
logged
an
empty
URL
argument
.
"
)
;
}
}
{
deprecatedFunction
:
deprecationFunctionBogusCallstack
expectedObservation
(
aMessage
)
{
testAMessage
(
aMessage
)
;
ok
(
aMessage
.
indexOf
(
"
deprecationFunctionBogusCallstack
"
)
>
0
"
Callstack
is
correctly
logged
.
"
)
;
}
}
{
deprecatedFunction
:
deprecationFunctionCustomCallstack
expectedObservation
(
aMessage
)
{
testAMessage
(
aMessage
)
;
ok
(
aMessage
.
indexOf
(
"
deprecationFunctionCustomCallstack
"
)
>
0
"
Callstack
is
correctly
logged
.
"
)
;
}
logWarnings
:
true
}
]
;
function
testAMessage
(
aMessage
)
{
ok
(
aMessage
.
indexOf
(
"
DEPRECATION
WARNING
:
this
method
is
deprecated
.
"
)
=
=
=
0
"
Deprecation
is
correctly
logged
.
"
)
;
ok
(
aMessage
.
indexOf
(
"
https
:
/
/
example
.
com
"
)
>
0
"
URL
is
correctly
logged
.
"
)
;
}
add_task
(
async
function
test_setup
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_DEPRECATION_WARNINGS
true
)
;
ok
(
Deprecated
"
Deprecated
object
exists
"
)
;
}
)
;
add_task
(
async
function
test_pref_enabled
(
)
{
for
(
let
[
idx
test
]
of
tests
.
entries
(
)
)
{
info
(
"
Running
test
#
"
+
idx
)
;
let
promiseObserved
=
TestUtils
.
consoleMessageObserved
(
subject
=
>
{
let
msg
=
subject
.
wrappedJSObject
.
arguments
?
.
[
0
]
;
return
(
msg
.
includes
(
"
DEPRECATION
WARNING
:
"
)
|
|
msg
.
includes
(
"
must
provide
a
URL
"
)
)
;
}
)
;
test
.
deprecatedFunction
(
)
;
let
msg
=
await
promiseObserved
;
test
.
expectedObservation
(
msg
.
wrappedJSObject
.
arguments
?
.
[
0
]
)
;
}
}
)
;
add_task
(
async
function
test_pref_disabled
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_DEPRECATION_WARNINGS
false
)
;
let
endFn
=
TestUtils
.
listenForConsoleMessages
(
)
;
basicDeprecatedFunction
(
)
;
let
messages
=
await
endFn
(
)
;
Assert
.
equal
(
messages
.
length
0
"
Should
not
have
received
any
messages
"
)
;
}
)
;
