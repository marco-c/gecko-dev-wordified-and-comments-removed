"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
MockDocument
"
]
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
const
MockDocument
=
{
createTestDocument
(
aDocumentURL
aContent
=
"
<
form
>
"
aType
=
"
text
/
html
"
useSystemPrincipal
=
false
)
{
let
parser
=
new
DOMParser
(
)
;
let
parsedDoc
;
if
(
useSystemPrincipal
)
{
parsedDoc
=
parser
.
parseFromSafeString
(
aContent
aType
)
;
}
else
{
parsedDoc
=
parser
.
parseFromString
(
aContent
aType
)
;
}
this
.
mockOwnerGlobalProperty
(
parsedDoc
.
documentElement
)
;
for
(
let
form
of
parsedDoc
.
forms
)
{
this
.
mockOwnerDocumentProperty
(
form
parsedDoc
aDocumentURL
)
;
this
.
mockOwnerGlobalProperty
(
form
)
;
for
(
let
field
of
form
.
elements
)
{
this
.
mockOwnerGlobalProperty
(
field
)
;
}
}
return
parsedDoc
;
}
mockOwnerDocumentProperty
(
aElement
aDoc
aURL
)
{
let
document
=
new
Proxy
(
aDoc
{
get
(
target
property
receiver
)
{
if
(
property
=
=
"
location
"
)
{
return
new
URL
(
aURL
)
;
}
return
target
[
property
]
;
}
}
)
;
Object
.
defineProperty
(
aElement
"
ownerDocument
"
{
value
:
document
}
)
;
}
mockOwnerGlobalProperty
(
aElement
)
{
Object
.
defineProperty
(
aElement
"
ownerGlobal
"
{
value
:
{
windowUtils
:
{
addManuallyManagedState
(
)
{
}
removeManuallyManagedState
(
)
{
}
}
UIEvent
:
Event
Event
}
configurable
:
true
}
)
;
}
mockNodePrincipalProperty
(
aElement
aURL
)
{
Object
.
defineProperty
(
aElement
"
nodePrincipal
"
{
value
:
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
aURL
)
{
}
)
}
)
;
}
mockBrowsingContextProperty
(
aElement
aBC
)
{
Object
.
defineProperty
(
aElement
"
browsingContext
"
{
value
:
aBC
}
)
;
}
createTestDocumentFromFile
(
aDocumentURL
aFile
)
{
let
fileStream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
fileStream
.
init
(
aFile
-
1
-
1
0
)
;
let
data
=
NetUtil
.
readInputStreamToString
(
fileStream
fileStream
.
available
(
)
)
;
return
this
.
createTestDocument
(
aDocumentURL
data
)
;
}
}
;
