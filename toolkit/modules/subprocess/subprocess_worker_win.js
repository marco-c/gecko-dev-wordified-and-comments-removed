"
use
strict
"
;
importScripts
(
"
resource
:
/
/
gre
/
modules
/
subprocess
/
subprocess_shared
.
js
"
"
resource
:
/
/
gre
/
modules
/
subprocess
/
subprocess_shared_win
.
js
"
"
resource
:
/
/
gre
/
modules
/
subprocess
/
subprocess_worker_common
.
js
"
)
;
const
POLL_TIMEOUT
=
5000
;
const
TERMINATE_EXIT_CODE
=
0x7f
;
let
io
;
let
nextPipeId
=
0
;
class
Pipe
extends
BasePipe
{
constructor
(
process
origHandle
)
{
super
(
)
;
let
handle
=
win32
.
HANDLE
(
)
;
let
curProc
=
libc
.
GetCurrentProcess
(
)
;
libc
.
DuplicateHandle
(
curProc
origHandle
curProc
handle
.
address
(
)
0
false
win32
.
DUPLICATE_SAME_ACCESS
)
;
origHandle
.
dispose
(
)
;
this
.
id
=
nextPipeId
+
+
;
this
.
process
=
process
;
this
.
handle
=
win32
.
Handle
(
handle
)
;
let
event
=
libc
.
CreateEventW
(
null
false
false
null
)
;
this
.
overlapped
=
win32
.
OVERLAPPED
(
)
;
this
.
overlapped
.
hEvent
=
event
;
this
.
_event
=
win32
.
Handle
(
event
)
;
this
.
buffer
=
null
;
}
get
event
(
)
{
if
(
this
.
pending
.
length
)
{
return
this
.
_event
;
}
return
null
;
}
maybeClose
(
)
{
}
close
(
force
=
false
)
{
if
(
!
force
&
&
this
.
pending
.
length
)
{
this
.
closing
=
true
;
return
this
.
closedPromise
;
}
for
(
let
{
reject
}
of
this
.
pending
)
{
let
error
=
new
Error
(
"
File
closed
"
)
;
error
.
errorCode
=
SubprocessConstants
.
ERROR_END_OF_FILE
;
reject
(
error
)
;
}
this
.
pending
.
length
=
0
;
this
.
buffer
=
null
;
if
(
!
this
.
closed
)
{
this
.
handle
.
dispose
(
)
;
this
.
_event
.
dispose
(
)
;
io
.
pipes
.
delete
(
this
.
id
)
;
this
.
handle
=
null
;
this
.
closed
=
true
;
this
.
resolveClosed
(
)
;
io
.
updatePollEvents
(
)
;
}
return
this
.
closedPromise
;
}
onError
(
)
{
this
.
close
(
true
)
;
}
}
class
InputPipe
extends
Pipe
{
readNext
(
)
{
if
(
this
.
buffer
=
=
=
null
)
{
this
.
readBuffer
(
this
.
pending
[
0
]
.
length
)
;
}
}
maybeClose
(
)
{
if
(
this
.
buffer
)
{
let
read
=
win32
.
DWORD
(
)
;
let
ok
=
libc
.
GetOverlappedResult
(
this
.
handle
this
.
overlapped
.
address
(
)
read
.
address
(
)
false
)
;
if
(
!
ok
)
{
this
.
onError
(
)
;
}
}
}
read
(
length
)
{
if
(
this
.
closing
|
|
this
.
closed
)
{
throw
new
Error
(
"
Attempt
to
read
from
closed
pipe
"
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
pending
.
push
(
{
resolve
reject
length
}
)
;
this
.
readNext
(
)
;
}
)
;
}
readBuffer
(
count
)
{
this
.
buffer
=
new
ArrayBuffer
(
count
)
;
let
ok
=
libc
.
ReadFile
(
this
.
handle
this
.
buffer
count
null
this
.
overlapped
.
address
(
)
)
;
if
(
!
ok
&
&
(
!
this
.
process
.
handle
|
|
libc
.
winLastError
)
)
{
this
.
onError
(
)
;
}
else
{
io
.
updatePollEvents
(
)
;
}
}
onReady
(
)
{
let
read
=
win32
.
DWORD
(
)
;
let
ok
=
libc
.
GetOverlappedResult
(
this
.
handle
this
.
overlapped
.
address
(
)
read
.
address
(
)
false
)
;
read
=
read
.
value
;
if
(
!
ok
)
{
this
.
onError
(
)
;
}
else
if
(
read
>
0
)
{
let
buffer
=
this
.
buffer
;
this
.
buffer
=
null
;
let
{
resolve
}
=
this
.
shiftPending
(
)
;
if
(
read
=
=
buffer
.
byteLength
)
{
resolve
(
buffer
)
;
}
else
{
resolve
(
ArrayBuffer
.
transfer
(
buffer
read
)
)
;
}
if
(
this
.
pending
.
length
)
{
this
.
readNext
(
)
;
}
else
{
io
.
updatePollEvents
(
)
;
}
}
}
}
class
OutputPipe
extends
Pipe
{
writeNext
(
)
{
if
(
this
.
buffer
=
=
=
null
)
{
this
.
writeBuffer
(
this
.
pending
[
0
]
.
buffer
)
;
}
}
write
(
buffer
)
{
if
(
this
.
closing
|
|
this
.
closed
)
{
throw
new
Error
(
"
Attempt
to
write
to
closed
pipe
"
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
pending
.
push
(
{
resolve
reject
buffer
}
)
;
this
.
writeNext
(
)
;
}
)
;
}
writeBuffer
(
buffer
)
{
this
.
buffer
=
buffer
;
let
ok
=
libc
.
WriteFile
(
this
.
handle
buffer
buffer
.
byteLength
null
this
.
overlapped
.
address
(
)
)
;
if
(
!
ok
&
&
libc
.
winLastError
)
{
this
.
onError
(
)
;
}
else
{
io
.
updatePollEvents
(
)
;
}
}
onReady
(
)
{
let
written
=
win32
.
DWORD
(
)
;
let
ok
=
libc
.
GetOverlappedResult
(
this
.
handle
this
.
overlapped
.
address
(
)
written
.
address
(
)
false
)
;
written
=
written
.
value
;
if
(
!
ok
|
|
written
!
=
this
.
buffer
.
byteLength
)
{
this
.
onError
(
)
;
}
else
if
(
written
>
0
)
{
let
{
resolve
}
=
this
.
shiftPending
(
)
;
this
.
buffer
=
null
;
resolve
(
written
)
;
if
(
this
.
pending
.
length
)
{
this
.
writeNext
(
)
;
}
else
{
io
.
updatePollEvents
(
)
;
}
}
}
}
class
Signal
{
constructor
(
event
)
{
this
.
event
=
event
;
}
cleanup
(
)
{
libc
.
CloseHandle
(
this
.
event
)
;
this
.
event
=
null
;
}
onError
(
)
{
io
.
shutdown
(
)
;
}
onReady
(
)
{
io
.
messageCount
+
=
1
;
}
}
class
Process
extends
BaseProcess
{
constructor
(
.
.
.
args
)
{
super
(
.
.
.
args
)
;
this
.
killed
=
false
;
}
get
event
(
)
{
return
this
.
handle
;
}
kill
(
)
{
this
.
killed
=
true
;
libc
.
TerminateJobObject
(
this
.
jobHandle
TERMINATE_EXIT_CODE
)
;
}
initPipes
(
{
stderr
}
)
{
let
our_pipes
=
[
]
;
let
their_pipes
=
[
]
;
let
secAttr
=
new
win32
.
SECURITY_ATTRIBUTES
(
)
;
secAttr
.
nLength
=
win32
.
SECURITY_ATTRIBUTES
.
size
;
secAttr
.
bInheritHandle
=
true
;
let
pipe
=
input
=
>
{
if
(
input
)
{
let
handles
=
win32
.
createPipe
(
secAttr
win32
.
FILE_FLAG_OVERLAPPED
)
;
our_pipes
.
push
(
new
InputPipe
(
this
handles
[
0
]
)
)
;
return
handles
[
1
]
;
}
let
handles
=
win32
.
createPipe
(
secAttr
0
win32
.
FILE_FLAG_OVERLAPPED
)
;
our_pipes
.
push
(
new
OutputPipe
(
this
handles
[
1
]
)
)
;
return
handles
[
0
]
;
}
;
their_pipes
[
0
]
=
pipe
(
false
)
;
their_pipes
[
1
]
=
pipe
(
true
)
;
if
(
stderr
=
=
"
pipe
"
)
{
their_pipes
[
2
]
=
pipe
(
true
)
;
}
else
{
let
srcHandle
;
if
(
stderr
=
=
"
stdout
"
)
{
srcHandle
=
their_pipes
[
1
]
;
}
else
{
srcHandle
=
libc
.
GetStdHandle
(
win32
.
STD_ERROR_HANDLE
)
;
}
let
handle
=
win32
.
HANDLE
(
)
;
let
curProc
=
libc
.
GetCurrentProcess
(
)
;
let
ok
=
libc
.
DuplicateHandle
(
curProc
srcHandle
curProc
handle
.
address
(
)
0
true
win32
.
DUPLICATE_SAME_ACCESS
)
;
their_pipes
[
2
]
=
ok
&
&
win32
.
Handle
(
handle
)
;
}
if
(
!
their_pipes
.
every
(
handle
=
>
handle
)
)
{
throw
new
Error
(
"
Failed
to
create
pipe
"
)
;
}
this
.
pipes
=
our_pipes
;
return
their_pipes
;
}
stringList
(
strings
)
{
strings
=
strings
.
filter
(
string
=
>
string
)
;
let
string
=
strings
.
join
(
"
\
0
"
)
+
"
\
0
\
0
"
;
return
win32
.
WCHAR
.
array
(
)
(
string
)
;
}
quoteString
(
str
)
{
if
(
!
/
[
\
s
"
]
/
.
test
(
str
)
)
{
return
str
;
}
let
escaped
=
str
.
replace
(
/
(
\
\
*
)
(
"
|
)
/
g
(
m0
m1
m2
)
=
>
{
if
(
m2
)
{
m2
=
\
\
{
m2
}
;
}
return
{
m1
}
{
m1
}
{
m2
}
;
}
)
;
return
"
{
escaped
}
"
;
}
spawn
(
options
)
{
let
{
command
arguments
:
args
}
=
options
;
args
=
args
.
map
(
arg
=
>
this
.
quoteString
(
arg
)
)
;
let
envp
=
this
.
stringList
(
options
.
environment
)
;
let
handles
=
this
.
initPipes
(
options
)
;
let
processFlags
=
win32
.
CREATE_NO_WINDOW
|
win32
.
CREATE_SUSPENDED
|
win32
.
CREATE_UNICODE_ENVIRONMENT
;
if
(
io
.
breakAwayFromJob
)
{
processFlags
|
=
win32
.
CREATE_BREAKAWAY_FROM_JOB
;
}
let
startupInfoEx
=
new
win32
.
STARTUPINFOEXW
(
)
;
let
startupInfo
=
startupInfoEx
.
StartupInfo
;
startupInfo
.
cb
=
win32
.
STARTUPINFOW
.
size
;
startupInfo
.
dwFlags
=
win32
.
STARTF_USESTDHANDLES
;
startupInfo
.
hStdInput
=
handles
[
0
]
;
startupInfo
.
hStdOutput
=
handles
[
1
]
;
startupInfo
.
hStdError
=
handles
[
2
]
;
let
handleArray
=
win32
.
HANDLE
.
array
(
)
(
handles
)
;
let
threadAttrs
=
win32
.
createThreadAttributeList
(
handleArray
)
;
if
(
threadAttrs
)
{
processFlags
|
=
win32
.
EXTENDED_STARTUPINFO_PRESENT
;
startupInfo
.
cb
=
win32
.
STARTUPINFOEXW
.
size
;
startupInfoEx
.
lpAttributeList
=
threadAttrs
;
}
let
procInfo
=
new
win32
.
PROCESS_INFORMATION
(
)
;
let
errorMessage
=
"
Failed
to
create
process
"
;
let
ok
=
libc
.
CreateProcessW
(
command
args
.
join
(
"
"
)
null
null
true
processFlags
envp
options
.
workdir
startupInfo
.
address
(
)
procInfo
.
address
(
)
)
;
for
(
let
handle
of
new
Set
(
handles
)
)
{
handle
.
dispose
(
)
;
}
if
(
threadAttrs
)
{
libc
.
DeleteProcThreadAttributeList
(
threadAttrs
)
;
}
if
(
ok
)
{
this
.
jobHandle
=
win32
.
Handle
(
libc
.
CreateJobObjectW
(
null
null
)
)
;
ok
=
libc
.
AssignProcessToJobObject
(
this
.
jobHandle
procInfo
.
hProcess
)
;
errorMessage
=
Failed
to
attach
process
to
job
object
:
0x
{
(
ctypes
.
winLastError
|
|
0
)
.
toString
(
16
)
}
;
}
if
(
!
ok
)
{
for
(
let
pipe
of
this
.
pipes
)
{
pipe
.
close
(
)
;
}
throw
new
Error
(
errorMessage
)
;
}
this
.
handle
=
win32
.
Handle
(
procInfo
.
hProcess
)
;
this
.
pid
=
procInfo
.
dwProcessId
;
libc
.
ResumeThread
(
procInfo
.
hThread
)
;
libc
.
CloseHandle
(
procInfo
.
hThread
)
;
}
onReady
(
)
{
this
.
wait
(
)
;
}
wait
(
)
{
if
(
this
.
exitCode
!
=
=
null
)
{
return
this
.
exitCode
;
}
let
status
=
win32
.
DWORD
(
)
;
let
ok
=
libc
.
GetExitCodeProcess
(
this
.
handle
status
.
address
(
)
)
;
if
(
ok
&
&
status
.
value
!
=
win32
.
STILL_ACTIVE
)
{
let
exitCode
=
status
.
value
;
if
(
this
.
killed
&
&
exitCode
=
=
TERMINATE_EXIT_CODE
)
{
exitCode
=
-
9
;
}
this
.
resolveExit
(
exitCode
)
;
this
.
exitCode
=
exitCode
;
this
.
handle
.
dispose
(
)
;
this
.
handle
=
null
;
libc
.
TerminateJobObject
(
this
.
jobHandle
TERMINATE_EXIT_CODE
)
;
this
.
jobHandle
.
dispose
(
)
;
this
.
jobHandle
=
null
;
for
(
let
pipe
of
this
.
pipes
)
{
pipe
.
maybeClose
(
)
;
}
io
.
updatePollEvents
(
)
;
return
exitCode
;
}
}
}
io
=
{
events
:
null
eventHandlers
:
null
pipes
:
new
Map
(
)
processes
:
new
Map
(
)
messageCount
:
0
running
:
true
init
(
details
)
{
let
signalEvent
=
ctypes
.
cast
(
ctypes
.
uintptr_t
(
details
.
signalEvent
)
win32
.
HANDLE
)
;
this
.
signal
=
new
Signal
(
signalEvent
)
;
this
.
updatePollEvents
(
)
;
this
.
breakAwayFromJob
=
details
.
breakAwayFromJob
;
setTimeout
(
this
.
loop
.
bind
(
this
)
0
)
;
}
shutdown
(
)
{
if
(
this
.
running
)
{
this
.
running
=
false
;
this
.
signal
.
cleanup
(
)
;
this
.
signal
=
null
;
self
.
close
(
)
;
}
}
getPipe
(
pipeId
)
{
let
pipe
=
this
.
pipes
.
get
(
pipeId
)
;
if
(
!
pipe
)
{
let
error
=
new
Error
(
"
File
closed
"
)
;
error
.
errorCode
=
SubprocessConstants
.
ERROR_END_OF_FILE
;
throw
error
;
}
return
pipe
;
}
getProcess
(
processId
)
{
let
process
=
this
.
processes
.
get
(
processId
)
;
if
(
!
process
)
{
throw
new
Error
(
Invalid
process
ID
:
{
processId
}
)
;
}
return
process
;
}
updatePollEvents
(
)
{
let
handlers
=
[
this
.
signal
.
.
.
this
.
pipes
.
values
(
)
.
.
.
this
.
processes
.
values
(
)
]
;
handlers
=
handlers
.
filter
(
handler
=
>
handler
.
event
)
;
this
.
eventHandlers
=
handlers
;
let
handles
=
handlers
.
map
(
handler
=
>
handler
.
event
)
;
this
.
events
=
win32
.
HANDLE
.
array
(
)
(
handles
)
;
}
loop
(
)
{
this
.
poll
(
)
;
if
(
this
.
running
)
{
setTimeout
(
this
.
loop
.
bind
(
this
)
0
)
;
}
}
poll
(
)
{
let
timeout
=
this
.
messageCount
>
0
?
0
:
POLL_TIMEOUT
;
for
(
;
;
timeout
=
0
)
{
let
events
=
this
.
events
;
let
handlers
=
this
.
eventHandlers
;
let
result
=
libc
.
WaitForMultipleObjects
(
events
.
length
events
false
timeout
)
;
if
(
result
<
handlers
.
length
)
{
try
{
handlers
[
result
]
.
onReady
(
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
debug
(
Worker
error
:
{
e
}
:
:
{
e
.
stack
}
)
;
handlers
[
result
]
.
onError
(
)
;
}
}
else
{
break
;
}
}
}
addProcess
(
process
)
{
this
.
processes
.
set
(
process
.
id
process
)
;
for
(
let
pipe
of
process
.
pipes
)
{
this
.
pipes
.
set
(
pipe
.
id
pipe
)
;
}
}
cleanupProcess
(
process
)
{
this
.
processes
.
delete
(
process
.
id
)
;
}
}
;
