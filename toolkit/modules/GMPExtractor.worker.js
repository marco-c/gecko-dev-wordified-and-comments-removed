"
use
strict
"
;
const
FILE_ENTRY
=
"
201
:
"
;
async
function
readJarDirectory
(
jarPath
installToDirPath
)
{
let
extractedPaths
=
[
]
;
let
jarResponse
=
await
fetch
(
jarPath
)
;
let
dirListing
=
await
jarResponse
.
text
(
)
;
let
lines
=
dirListing
.
split
(
"
\
n
"
)
;
let
reader
=
new
FileReader
(
)
;
for
(
let
line
of
lines
)
{
if
(
!
line
.
startsWith
(
FILE_ENTRY
)
)
{
continue
;
}
let
lineSplits
=
line
.
split
(
"
"
)
;
let
jarEntry
=
lineSplits
[
1
]
;
let
jarType
=
lineSplits
[
4
]
;
if
(
jarType
=
=
=
"
DIRECTORY
"
)
{
extractedPaths
.
push
(
.
.
.
(
await
readJarDirectory
(
jarPath
+
jarEntry
installToDirPath
)
)
)
;
continue
;
}
let
fileName
=
jarEntry
.
split
(
"
/
"
)
.
pop
(
)
;
if
(
!
fileName
.
endsWith
(
"
.
info
"
)
&
&
!
fileName
.
endsWith
(
"
.
dll
"
)
&
&
!
fileName
.
endsWith
(
"
.
dylib
"
)
&
&
!
fileName
.
endsWith
(
"
.
sig
"
)
&
&
!
fileName
.
endsWith
(
"
.
so
"
)
&
&
!
fileName
.
endsWith
(
"
.
txt
"
)
&
&
fileName
!
=
=
"
LICENSE
"
&
&
fileName
!
=
=
"
manifest
.
json
"
)
{
continue
;
}
let
filePath
=
jarPath
+
jarEntry
;
let
filePathResponse
=
await
fetch
(
filePath
)
;
let
fileContents
=
await
filePathResponse
.
blob
(
)
;
let
fileData
=
await
new
Promise
(
resolve
=
>
{
reader
.
onloadend
=
function
(
)
{
resolve
(
reader
.
result
)
;
}
;
reader
.
readAsArrayBuffer
(
fileContents
)
;
}
)
;
await
IOUtils
.
makeDirectory
(
installToDirPath
)
;
let
destPath
=
PathUtils
.
join
(
installToDirPath
fileName
)
;
await
IOUtils
.
write
(
destPath
new
Uint8Array
(
fileData
)
{
tmpPath
:
destPath
+
"
.
tmp
"
}
)
;
await
IOUtils
.
setPermissions
(
destPath
0o700
)
;
if
(
IOUtils
.
delMacXAttr
)
{
try
{
await
IOUtils
.
delMacXAttr
(
destPath
"
com
.
apple
.
quarantine
"
)
;
}
catch
(
e
)
{
}
}
extractedPaths
.
push
(
destPath
)
;
}
return
extractedPaths
;
}
onmessage
=
async
function
(
msg
)
{
try
{
let
jarPath
=
"
jar
:
"
+
msg
.
data
.
zipURI
+
"
!
/
"
;
let
installToDirPath
=
PathUtils
.
join
(
await
PathUtils
.
getProfileDir
(
)
.
.
.
msg
.
data
.
relativeInstallPath
)
;
let
extractedPaths
=
await
readJarDirectory
(
jarPath
installToDirPath
)
;
postMessage
(
{
result
:
"
success
"
extractedPaths
}
)
;
}
catch
(
e
)
{
postMessage
(
{
result
:
"
fail
"
exception
:
e
.
message
}
)
;
}
}
;
