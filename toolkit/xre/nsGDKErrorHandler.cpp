#
include
"
nsGDKErrorHandler
.
h
"
#
include
<
gtk
/
gtk
.
h
>
#
include
<
gdk
/
gdkx
.
h
>
#
include
<
errno
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
"
nsDebug
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsX11ErrorHandler
.
h
"
#
include
"
prenv
.
h
"
static
void
GdkErrorHandler
(
const
gchar
*
log_domain
GLogLevelFlags
log_level
const
gchar
*
message
gpointer
user_data
)
{
if
(
strstr
(
message
"
X
Window
System
error
"
)
)
{
XErrorEvent
event
;
nsDependentCString
buffer
(
message
)
;
char
*
endptr
;
constexpr
auto
serialString
=
"
(
Details
:
serial
"
_ns
;
int32_t
start
=
buffer
.
Find
(
serialString
)
;
if
(
start
=
=
kNotFound
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
start
+
=
serialString
.
Length
(
)
;
errno
=
0
;
event
.
serial
=
strtol
(
buffer
.
BeginReading
(
)
+
start
&
endptr
10
)
;
if
(
errno
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
constexpr
auto
errorCodeString
=
"
error_code
"
_ns
;
if
(
!
StringBeginsWith
(
Substring
(
endptr
buffer
.
EndReading
(
)
)
errorCodeString
)
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
errno
=
0
;
event
.
error_code
=
strtol
(
endptr
+
errorCodeString
.
Length
(
)
&
endptr
10
)
;
if
(
errno
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
constexpr
auto
requestCodeString
=
"
request_code
"
_ns
;
if
(
!
StringBeginsWith
(
Substring
(
endptr
buffer
.
EndReading
(
)
)
requestCodeString
)
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
errno
=
0
;
event
.
request_code
=
strtol
(
endptr
+
requestCodeString
.
Length
(
)
&
endptr
10
)
;
if
(
errno
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
constexpr
auto
minorCodeString
=
"
minor_code
"
_ns
;
start
=
buffer
.
Find
(
minorCodeString
false
endptr
-
buffer
.
BeginReading
(
)
)
;
if
(
!
start
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
errno
=
0
;
event
.
minor_code
=
strtol
(
buffer
.
BeginReading
(
)
+
start
+
minorCodeString
.
Length
(
)
nullptr
10
)
;
if
(
errno
)
{
MOZ_CRASH_UNSAFE
(
message
)
;
}
event
.
display
=
GDK_DISPLAY_XDISPLAY
(
gdk_display_get_default
(
)
)
;
event
.
resourceid
=
0
;
X11Error
(
event
.
display
&
event
)
;
}
else
{
g_log_default_handler
(
log_domain
log_level
message
user_data
)
;
MOZ_CRASH_UNSAFE
(
message
)
;
}
}
void
InstallGdkErrorHandler
(
)
{
g_log_set_handler
(
"
Gdk
"
(
GLogLevelFlags
)
(
G_LOG_LEVEL_ERROR
|
G_LOG_FLAG_FATAL
|
G_LOG_FLAG_RECURSION
)
GdkErrorHandler
nullptr
)
;
if
(
PR_GetEnv
(
"
MOZ_X_SYNC
"
)
)
{
XSynchronize
(
GDK_DISPLAY_XDISPLAY
(
gdk_display_get_default
(
)
)
X11True
)
;
}
}
