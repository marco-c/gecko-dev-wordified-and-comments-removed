#
ifndef
mozilla_Bootstrap_h
#
define
mozilla_Bootstrap_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
jni
.
h
"
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
namespace
sandbox
{
class
BrokerServices
;
}
#
endif
namespace
mozilla
{
struct
StaticXREAppData
;
struct
BootstrapConfig
{
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
sandbox
:
:
BrokerServices
*
sandboxBrokerServices
;
#
endif
const
StaticXREAppData
*
appData
;
const
char
*
appDataPath
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
int
crashChildNotificationSocket
;
int
crashHelperSocket
;
#
endif
}
;
class
Bootstrap
{
protected
:
Bootstrap
(
)
{
}
virtual
~
Bootstrap
(
)
{
}
virtual
void
Dispose
(
)
=
0
;
class
BootstrapDelete
{
public
:
constexpr
BootstrapDelete
(
)
{
}
void
operator
(
)
(
Bootstrap
*
aPtr
)
const
{
aPtr
-
>
Dispose
(
)
;
}
}
;
public
:
typedef
mozilla
:
:
UniquePtr
<
Bootstrap
BootstrapDelete
>
UniquePtr
;
virtual
void
NS_LogInit
(
)
=
0
;
virtual
void
NS_LogTerm
(
)
=
0
;
virtual
void
XRE_TelemetryAccumulate
(
int
aID
uint32_t
aSample
)
=
0
;
virtual
void
XRE_StartupTimelineRecord
(
int
aEvent
mozilla
:
:
TimeStamp
aWhen
)
=
0
;
virtual
int
XRE_main
(
int
argc
char
*
argv
[
]
const
BootstrapConfig
&
aConfig
)
=
0
;
virtual
void
XRE_StopLateWriteChecks
(
)
=
0
;
virtual
int
XRE_XPCShellMain
(
int
argc
char
*
*
argv
char
*
*
envp
const
XREShellData
*
aShellData
)
=
0
;
virtual
nsresult
XRE_InitChildProcess
(
int
argc
char
*
argv
[
]
const
XREChildData
*
aChildData
)
=
0
;
virtual
void
XRE_EnableSameExecutableForContentProc
(
)
=
0
;
#
ifdef
MOZ_WIDGET_ANDROID
virtual
void
XRE_SetGeckoThreadEnv
(
JNIEnv
*
aEnv
)
=
0
;
virtual
void
XRE_SetAndroidChildFds
(
JNIEnv
*
aEnv
jintArray
aFds
)
=
0
;
#
ifdef
MOZ_PROFILE_GENERATE
virtual
void
XRE_WriteLLVMProfData
(
)
=
0
;
#
endif
#
endif
#
ifdef
LIBFUZZER
virtual
void
XRE_LibFuzzerSetDriver
(
LibFuzzerDriver
aDriver
)
=
0
;
#
endif
#
ifdef
MOZ_ENABLE_FORKSERVER
virtual
int
XRE_ForkServer
(
int
*
argc
char
*
*
*
argv
)
=
0
;
#
endif
}
;
enum
class
LibLoadingStrategy
{
NoReadAhead
ReadAhead
}
;
#
if
defined
(
XP_WIN
)
using
DLErrorType
=
unsigned
long
;
#
else
using
DLErrorType
=
UniqueFreePtr
<
char
>
;
#
endif
using
BootstrapError
=
Variant
<
nsresult
DLErrorType
>
;
using
BootstrapResult
=
:
:
mozilla
:
:
Result
<
Bootstrap
:
:
UniquePtr
BootstrapError
>
;
#
ifdef
XPCOM_GLUE
typedef
void
(
*
GetBootstrapType
)
(
Bootstrap
:
:
UniquePtr
&
)
;
BootstrapResult
GetBootstrap
(
const
char
*
aXPCOMFile
=
nullptr
LibLoadingStrategy
aLibLoadingStrategy
=
LibLoadingStrategy
:
:
NoReadAhead
)
;
#
else
extern
"
C
"
NS_EXPORT
void
NS_FROZENCALL
XRE_GetBootstrap
(
Bootstrap
:
:
UniquePtr
&
b
)
;
inline
BootstrapResult
GetBootstrap
(
const
char
*
aXPCOMFile
=
nullptr
LibLoadingStrategy
aLibLoadingStrategy
=
LibLoadingStrategy
:
:
NoReadAhead
)
{
Bootstrap
:
:
UniquePtr
bootstrap
;
XRE_GetBootstrap
(
bootstrap
)
;
return
bootstrap
;
}
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
_M_X64
)
&
&
defined
(
MOZ_DIAGNOSTIC_ASSERT_ENABLED
)
extern
"
C
"
NS_EXPORT
bool
XRE_CheckBlockScopeStaticVarInit
(
uint32_t
*
aTlsIndex
)
;
#
endif
}
#
endif
