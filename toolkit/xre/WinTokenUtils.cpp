#
include
"
WinTokenUtils
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
using
namespace
mozilla
;
static
LauncherResult
<
bool
>
IsMemberOfAdministrators
(
const
nsAutoHandle
&
aToken
)
{
BYTE
adminsGroupSid
[
SECURITY_MAX_SID_SIZE
]
;
DWORD
adminsGroupSidSize
=
sizeof
(
adminsGroupSid
)
;
if
(
!
CreateWellKnownSid
(
WinBuiltinAdministratorsSid
nullptr
adminsGroupSid
&
adminsGroupSidSize
)
)
{
return
LAUNCHER_ERROR_FROM_LAST
(
)
;
}
BOOL
isMember
;
if
(
!
CheckTokenMembership
(
aToken
adminsGroupSid
&
isMember
)
)
{
return
LAUNCHER_ERROR_FROM_LAST
(
)
;
}
return
!
!
isMember
;
}
static
LauncherResult
<
bool
>
IsUacEnabled
(
)
{
DWORD
len
=
sizeof
(
DWORD
)
;
DWORD
value
;
LSTATUS
status
=
RegGetValueW
(
HKEY_LOCAL_MACHINE
L
"
SOFTWARE
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
Policies
\
\
System
"
L
"
EnableLUA
"
RRF_RT_DWORD
nullptr
&
value
&
len
)
;
if
(
status
!
=
ERROR_SUCCESS
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
status
)
;
}
return
(
value
!
=
0
)
;
}
namespace
mozilla
{
LauncherResult
<
bool
>
IsAdminWithoutUac
(
)
{
LauncherResult
<
bool
>
containsAdminGroup
=
IsMemberOfAdministrators
(
nsAutoHandle
(
)
)
;
if
(
containsAdminGroup
.
isErr
(
)
)
{
return
containsAdminGroup
.
propagateErr
(
)
;
}
if
(
!
containsAdminGroup
.
unwrap
(
)
)
{
return
false
;
}
LauncherResult
<
bool
>
isUacEnabled
=
IsUacEnabled
(
)
;
if
(
isUacEnabled
.
isErr
(
)
)
{
return
isUacEnabled
.
propagateErr
(
)
;
}
return
!
isUacEnabled
.
unwrap
(
)
;
}
}
