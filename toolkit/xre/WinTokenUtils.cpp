#
include
"
WinTokenUtils
.
h
"
using
namespace
mozilla
;
static
LauncherResult
<
bool
>
IsMemberOfSidType
(
const
nsAutoHandle
&
aToken
const
WELL_KNOWN_SID_TYPE
aWellKnownSid
)
{
BYTE
sid
[
SECURITY_MAX_SID_SIZE
]
;
DWORD
sidSize
=
sizeof
(
sid
)
;
if
(
!
CreateWellKnownSid
(
aWellKnownSid
nullptr
sid
&
sidSize
)
)
{
return
LAUNCHER_ERROR_FROM_LAST
(
)
;
}
BOOL
isMember
;
if
(
!
CheckTokenMembership
(
aToken
sid
&
isMember
)
)
{
return
LAUNCHER_ERROR_FROM_LAST
(
)
;
}
return
!
!
isMember
;
}
static
LauncherResult
<
bool
>
IsUacEnabled
(
)
{
DWORD
len
=
sizeof
(
DWORD
)
;
DWORD
value
;
LSTATUS
status
=
RegGetValueW
(
HKEY_LOCAL_MACHINE
L
"
SOFTWARE
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
Policies
\
\
System
"
L
"
EnableLUA
"
RRF_RT_DWORD
nullptr
&
value
&
len
)
;
if
(
status
!
=
ERROR_SUCCESS
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
status
)
;
}
return
(
value
!
=
0
)
;
}
namespace
mozilla
{
LauncherResult
<
bool
>
IsAdminWithoutUac
(
)
{
return
UserHasAdminPrivileges
(
)
.
andThen
(
[
]
(
bool
containsAdminGroup
)
-
>
LauncherResult
<
bool
>
{
if
(
!
containsAdminGroup
)
{
return
false
;
}
return
IsUacEnabled
(
)
.
map
(
[
]
(
bool
isUacEnabled
)
{
return
!
isUacEnabled
;
}
)
;
}
)
;
}
LauncherResult
<
bool
>
UserHasAdminPrivileges
(
)
{
return
IsMemberOfSidType
(
nsAutoHandle
(
)
WinBuiltinAdministratorsSid
)
;
}
LauncherResult
<
bool
>
UserIsLocalSystem
(
)
{
return
IsMemberOfSidType
(
nsAutoHandle
(
)
WinLocalSystemSid
)
;
}
}
