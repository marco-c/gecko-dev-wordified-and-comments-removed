#
ifndef
mozilla_LauncherRegistryInfo_h
#
define
mozilla_LauncherRegistryInfo_h
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
LauncherResult
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
string
>
namespace
mozilla
{
class
LauncherRegistryInfo
final
{
public
:
enum
class
ProcessType
{
Launcher
Browser
}
;
enum
class
EnabledState
{
Enabled
FailDisabled
ForceDisabled
}
;
LauncherRegistryInfo
(
)
:
mBinPath
(
GetFullBinaryPath
(
)
.
get
(
)
)
{
}
LauncherVoidResult
ReflectPrefToRegistry
(
const
bool
aEnable
)
;
LauncherResult
<
EnabledState
>
IsEnabled
(
)
;
LauncherResult
<
ProcessType
>
Check
(
const
ProcessType
aDesiredType
)
;
LauncherVoidResult
DisableDueToFailure
(
)
;
private
:
enum
class
Disposition
{
CreatedNew
OpenedExisting
}
;
private
:
LauncherResult
<
Disposition
>
Open
(
)
;
LauncherVoidResult
WriteStartTimestamp
(
ProcessType
aProcessType
const
Maybe
<
uint64_t
>
&
aValue
=
Nothing
(
)
)
;
LauncherResult
<
DWORD
>
GetCurrentImageTimestamp
(
)
;
LauncherVoidResult
WriteImageTimestamp
(
DWORD
aTimestamp
)
;
LauncherResult
<
bool
>
ClearStartTimestamp
(
ProcessType
aProcessType
)
;
LauncherVoidResult
ClearStartTimestamps
(
)
;
LauncherResult
<
DWORD
>
GetSavedImageTimestamp
(
)
;
LauncherResult
<
uint64_t
>
GetStartTimestamp
(
ProcessType
aProcessType
)
;
LauncherResult
<
std
:
:
wstring
>
ResolveValueName
(
ProcessType
aProcessType
)
;
std
:
:
wstring
ResolveImageTimestampValueName
(
)
;
private
:
nsAutoRegKey
mRegKey
;
std
:
:
wstring
mBinPath
;
std
:
:
wstring
mImageValueName
;
std
:
:
wstring
mBrowserValueName
;
std
:
:
wstring
mLauncherValueName
;
static
const
wchar_t
kLauncherSubKeyPath
[
]
;
static
const
wchar_t
kLauncherSuffix
[
]
;
static
const
wchar_t
kBrowserSuffix
[
]
;
static
const
wchar_t
kImageTimestampSuffix
[
]
;
}
;
}
#
endif
