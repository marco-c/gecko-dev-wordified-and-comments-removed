"
use
strict
"
;
function
getCrashDumpId
(
subject
)
{
Assert
.
ok
(
subject
instanceof
Ci
.
nsIPropertyBag2
"
Subject
needs
to
be
a
nsIPropertyBag2
to
clean
up
properly
"
)
;
return
subject
.
getPropertyAsAString
(
"
dumpID
"
)
;
}
add_task
(
async
function
test_cfg_enabled
(
)
{
requestLongerTimeout
(
2
)
;
if
(
!
gMultiProcessBrowser
)
{
Assert
.
ok
(
false
"
This
test
should
only
be
run
in
multi
-
process
mode
.
"
)
;
return
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
"
}
async
function
(
browser
)
{
Assert
.
ok
(
browser
.
isRemoteBrowser
"
This
browser
needs
to
be
remote
if
this
test
is
going
to
"
+
"
work
properly
.
"
)
;
let
contentProcessGone
=
TestUtils
.
topicObserved
(
"
ipc
:
content
-
shutdown
"
)
;
ContentTask
.
spawn
(
browser
null
function
(
)
{
privateNoteIntentionalCrash
(
)
;
const
{
ctypes
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
let
mozglue
=
ctypes
.
open
(
"
mozglue
.
dll
"
)
;
let
CFG_DisabledOrCrash
=
mozglue
.
declare
(
"
CFG_DisabledOrCrash
"
ctypes
.
default_abi
ctypes
.
bool
)
;
CFG_DisabledOrCrash
(
)
;
Assert
.
ok
(
false
"
This
test
should
cause
a
crash
when
CFG
is
enabled
.
If
it
"
+
"
does
not
this
false
assertion
will
trigger
.
It
means
CFG
is
not
enabled
"
+
"
and
we
have
lost
compiler
hardening
features
.
"
)
;
}
)
;
let
timeout
=
new
Promise
(
resolve
=
>
setTimeout
(
resolve
5000
[
null
]
)
)
;
let
[
subject
]
=
await
Promise
.
race
(
[
timeout
contentProcessGone
]
)
;
if
(
!
subject
)
{
Assert
.
ok
(
false
"
This
test
should
cause
a
crash
when
CFG
is
enabled
.
We
didn
'
t
"
+
"
observe
a
crash
.
This
specific
assertion
should
be
redundant
to
a
false
assertion
"
+
"
immediately
prior
to
it
.
If
it
occurs
alone
then
something
strange
has
occured
"
+
"
and
CFG
status
and
this
test
should
be
investigated
.
"
)
;
}
else
{
info
(
"
Content
process
is
gone
!
"
)
;
let
dumpID
=
getCrashDumpId
(
subject
)
;
Assert
.
ok
(
dumpID
=
=
"
"
"
There
should
NOT
be
a
dumpID
but
we
have
one
:
"
+
dumpID
)
;
}
}
)
;
}
)
;
