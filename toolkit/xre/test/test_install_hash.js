const
{
Subprocess
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
sys
.
mjs
"
)
;
const
XRE
=
Cc
[
"
mozilla
.
org
/
xre
/
directory
-
provider
;
1
"
]
.
getService
(
Ci
.
nsIXREDirProvider
)
;
const
HASH
=
XRE
.
getInstallHash
(
false
)
;
const
EXE
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
;
const
GREBIND
=
Services
.
dirsvc
.
get
(
"
GreBinD
"
Ci
.
nsIFile
)
;
const
SCRIPT
=
do_get_file
(
"
show_hash
.
js
"
false
)
;
async
function
getHash
(
bin
)
{
try
{
let
args
=
[
"
-
g
"
GREBIND
.
path
]
;
if
(
!
bin
.
leafName
.
startsWith
(
"
xpcshell
"
)
)
{
args
.
push
(
"
-
xpcshell
"
)
;
}
args
.
push
(
SCRIPT
.
path
)
;
let
proc
=
await
Subprocess
.
call
(
{
command
:
bin
.
path
arguments
:
args
}
)
;
let
result
=
"
"
;
let
string
;
while
(
(
string
=
await
proc
.
stdout
.
readString
(
)
)
)
{
result
+
=
string
;
}
return
result
.
trim
(
)
;
}
catch
(
e
)
{
if
(
e
.
errorCode
=
=
Subprocess
.
ERROR_BAD_EXECUTABLE
)
{
return
null
;
}
throw
e
;
}
}
function
mutatePath
(
path
mutator
)
{
let
parts
=
[
]
;
let
index
=
0
;
while
(
path
.
parent
!
=
null
)
{
parts
.
push
(
mutator
(
path
.
leafName
index
+
+
)
)
;
path
=
path
.
parent
;
}
while
(
parts
.
length
)
{
path
.
append
(
parts
.
pop
(
)
)
;
}
return
path
;
}
function
countParts
(
path
)
{
let
index
=
0
;
while
(
path
.
parent
!
=
null
)
{
path
=
path
.
parent
;
index
+
+
;
}
return
index
;
}
add_task
(
async
function
testSameBinary
(
)
{
Assert
.
equal
(
await
getHash
(
EXE
)
HASH
"
Should
have
the
same
hash
when
running
the
same
binary
.
"
)
;
}
)
;
add_task
(
async
function
testUpperCase
(
)
{
let
upper
=
mutatePath
(
EXE
p
=
>
p
.
toLocaleUpperCase
(
)
)
;
let
hash
=
await
getHash
(
upper
)
;
if
(
hash
)
{
Assert
.
equal
(
hash
HASH
Should
have
seen
the
same
hash
from
{
upper
.
path
}
.
)
;
}
}
)
;
add_task
(
async
function
testLowerCase
(
)
{
let
lower
=
mutatePath
(
EXE
p
=
>
p
.
toLocaleLowerCase
(
)
)
;
let
hash
=
await
getHash
(
lower
)
;
if
(
hash
)
{
Assert
.
equal
(
hash
HASH
Should
have
seen
the
same
hash
from
{
lower
.
path
}
.
)
;
}
}
)
;
add_task
(
async
function
testEachPart
(
)
{
let
count
=
countParts
(
EXE
)
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
let
upper
=
mutatePath
(
EXE
(
p
index
)
=
>
index
=
=
i
?
p
.
toLocaleUpperCase
(
)
:
p
)
;
let
lower
=
mutatePath
(
EXE
(
p
index
)
=
>
index
=
=
i
?
p
.
toLocaleLowerCase
(
)
:
p
)
;
let
upperHash
=
await
getHash
(
upper
)
;
if
(
upperHash
)
{
Assert
.
equal
(
upperHash
HASH
Should
have
seen
the
same
hash
from
{
upper
.
path
}
.
)
;
}
let
lowerHash
=
await
getHash
(
lower
)
;
if
(
lowerHash
)
{
Assert
.
equal
(
lowerHash
HASH
Should
have
seen
the
same
hash
from
{
lower
.
path
}
.
)
;
}
}
}
)
;
