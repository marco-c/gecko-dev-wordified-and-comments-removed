#
ifndef
nsUpdateDriver_h__
#
define
nsUpdateDriver_h__
#
include
"
nscore
.
h
"
#
include
"
nsIUpdateService
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsIFile
;
#
if
defined
(
XP_WIN
)
#
include
<
windows
.
h
>
typedef
HANDLE
ProcessType
;
#
elif
defined
(
XP_UNIX
)
typedef
pid_t
ProcessType
;
#
else
#
include
"
prproces
.
h
"
typedef
PRProcess
*
ProcessType
;
#
endif
nsresult
ProcessUpdates
(
nsIFile
*
greDir
nsIFile
*
appDir
nsIFile
*
updRootDir
int
argc
char
*
*
argv
const
char
*
appVersion
bool
restart
=
true
ProcessType
*
pid
=
nullptr
)
;
class
nsUpdateProcessor
final
:
public
nsIUpdateProcessor
{
public
:
nsUpdateProcessor
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIUPDATEPROCESSOR
private
:
~
nsUpdateProcessor
(
)
;
struct
StagedUpdateInfo
{
StagedUpdateInfo
(
)
:
mArgc
(
0
)
mArgv
(
nullptr
)
{
}
~
StagedUpdateInfo
(
)
{
for
(
int
i
=
0
;
i
<
mArgc
;
+
+
i
)
{
delete
[
]
mArgv
[
i
]
;
}
delete
[
]
mArgv
;
}
nsCOMPtr
<
nsIFile
>
mGREDir
;
nsCOMPtr
<
nsIFile
>
mAppDir
;
nsCOMPtr
<
nsIFile
>
mUpdateRoot
;
int
mArgc
;
char
*
*
mArgv
;
nsCString
mAppVersion
;
}
;
private
:
void
StartStagedUpdate
(
)
;
void
WaitForProcess
(
)
;
void
UpdateDone
(
)
;
void
ShutdownWatcherThread
(
)
;
private
:
ProcessType
mUpdaterPID
;
nsCOMPtr
<
nsIThread
>
mProcessWatcher
;
StagedUpdateInfo
mInfo
;
}
;
#
endif
