#
ifndef
mozilla_SafeMode_h
#
define
mozilla_SafeMode_h
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
PolicyChecks
.
h
"
#
include
<
windows
.
h
>
#
endif
#
undef
None
namespace
mozilla
{
enum
class
SafeModeFlag
:
uint32_t
{
None
=
0
Unset
=
(
1
<
<
0
)
NoKeyPressCheck
=
(
1
<
<
1
)
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
SafeModeFlag
)
template
<
typename
CharT
>
inline
Maybe
<
bool
>
IsSafeModeRequested
(
int
&
aArgc
CharT
*
aArgv
[
]
const
SafeModeFlag
aFlags
=
SafeModeFlag
:
:
Unset
)
{
CheckArgFlag
checkArgFlags
=
CheckArgFlag
:
:
CheckOSInt
;
if
(
aFlags
&
SafeModeFlag
:
:
Unset
)
{
checkArgFlags
|
=
CheckArgFlag
:
:
RemoveArg
;
}
ArgResult
ar
=
CheckArg
(
aArgc
aArgv
GetLiteral
<
CharT
FlagLiteral
:
:
safemode
>
(
)
static_cast
<
const
CharT
*
*
>
(
nullptr
)
checkArgFlags
)
;
if
(
ar
=
=
ARG_BAD
)
{
return
Nothing
(
)
;
}
bool
result
=
ar
=
=
ARG_FOUND
;
#
if
defined
(
XP_WIN
)
if
(
!
(
aFlags
&
SafeModeFlag
:
:
NoKeyPressCheck
)
&
&
(
GetKeyState
(
VK_SHIFT
)
&
0x8000
)
&
&
!
(
GetKeyState
(
VK_CONTROL
)
&
0x8000
)
&
&
!
(
GetKeyState
(
VK_MENU
)
&
0x8000
)
&
&
!
EnvHasValue
(
"
MOZ_DISABLE_SAFE_MODE_KEY
"
)
)
{
result
=
true
;
}
if
(
result
&
&
PolicyCheckBoolean
(
L
"
DisableSafeMode
"
)
)
{
result
=
false
;
}
#
endif
#
if
defined
(
XP_MACOSX
)
if
(
!
(
aFlags
&
SafeModeFlag
:
:
NoKeyPressCheck
)
&
&
(
GetCurrentEventKeyModifiers
(
)
&
optionKey
)
&
&
!
EnvHasValue
(
"
MOZ_DISABLE_SAFE_MODE_KEY
"
)
)
{
result
=
true
;
}
#
endif
if
(
EnvHasValue
(
"
MOZ_SAFE_MODE_RESTART
"
)
)
{
result
=
true
;
if
(
aFlags
&
SafeModeFlag
:
:
Unset
)
{
SaveToEnv
(
"
MOZ_SAFE_MODE_RESTART
=
"
)
;
}
}
return
Some
(
result
)
;
}
}
#
endif
