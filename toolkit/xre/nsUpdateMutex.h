#
ifndef
nsUpdateMutex_h__
#
define
nsUpdateMutex_h__
#
include
"
nsIUpdateService
.
h
"
#
include
"
nsProfileLock
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
class
MOZ_CAPABILITY
(
"
mutex
"
)
UpdateMutexImpl
{
public
:
[
[
nodiscard
]
]
bool
TryLock
(
)
MOZ_TRY_ACQUIRE
(
true
)
;
void
Unlock
(
)
MOZ_CAPABILITY_RELEASE
(
)
;
private
:
static
mozilla
:
:
StaticMutex
sInProcessMutex
;
nsProfileLock
mCrossProcessLock
;
}
;
class
nsUpdateMutex
final
:
public
nsIUpdateMutex
{
public
:
explicit
nsUpdateMutex
(
)
=
default
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIUPDATEMUTEX
private
:
UpdateMutexImpl
mUpdateMutexImpl
;
bool
mIsLocked
{
}
;
virtual
~
nsUpdateMutex
(
)
{
if
(
mIsLocked
)
{
Unlock
(
)
;
}
}
}
;
#
endif
