#
ifndef
mozilla_ModuleEvaluator_windows_h
#
define
mozilla_ModuleEvaluator_windows_h
#
include
"
mozilla
/
glue
/
WindowsDllServices
.
h
"
#
include
"
mozilla
/
Authenticode
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ModuleVersionInfo_windows
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsString
.
h
"
class
InfallibleAllocPolicy
;
namespace
mozilla
{
enum
class
ModuleTrustFlags
:
uint32_t
{
None
=
0
MozillaSignature
=
1
MicrosoftWindowsSignature
=
2
MicrosoftVersion
=
4
FirefoxDirectory
=
8
FirefoxDirectoryAndVersion
=
0x10
SystemDirectory
=
0x20
KeyboardLayout
=
0x40
JitPI
=
0x80
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
ModuleTrustFlags
)
;
class
ModuleLoadEvent
{
public
:
class
ModuleInfo
{
public
:
ModuleInfo
(
)
=
default
;
ModuleInfo
(
const
ModuleInfo
&
)
=
default
;
ModuleInfo
(
ModuleInfo
&
&
)
=
default
;
ModuleInfo
&
operator
=
(
const
ModuleInfo
&
)
=
default
;
ModuleInfo
&
operator
=
(
ModuleInfo
&
&
)
=
default
;
explicit
ModuleInfo
(
const
glue
:
:
ModuleLoadEvent
:
:
ModuleInfo
&
)
;
uintptr_t
mBase
;
nsString
mLdrName
;
nsCOMPtr
<
nsIFile
>
mFile
;
nsString
mFilePathClean
;
ModuleTrustFlags
mTrustFlags
;
nsCString
mFileVersion
;
}
;
ModuleLoadEvent
(
)
=
default
;
ModuleLoadEvent
(
ModuleLoadEvent
&
&
)
=
default
;
enum
class
CopyOption
:
int
{
CopyEverything
CopyWithoutModules
}
;
ModuleLoadEvent
(
const
ModuleLoadEvent
&
aOther
CopyOption
aOption
=
CopyOption
:
:
CopyEverything
)
;
ModuleLoadEvent
&
operator
=
(
ModuleLoadEvent
&
&
aOther
)
=
default
;
ModuleLoadEvent
&
operator
=
(
const
ModuleLoadEvent
&
aOther
)
=
delete
;
explicit
ModuleLoadEvent
(
const
glue
:
:
ModuleLoadEvent
&
aOther
)
;
bool
mIsStartup
;
DWORD
mThreadID
;
nsCString
mThreadName
;
uint64_t
mProcessUptimeMS
;
Vector
<
uintptr_t
0
InfallibleAllocPolicy
>
mStack
;
Vector
<
ModuleInfo
0
InfallibleAllocPolicy
>
mModules
;
}
;
class
ModuleEvaluator
{
Maybe
<
uint64_t
>
mExeVersion
;
nsString
mExeDirectory
;
nsString
mSysDirectory
;
Vector
<
nsString
0
InfallibleAllocPolicy
>
mKeyboardLayoutDlls
;
public
:
ModuleEvaluator
(
)
;
Maybe
<
bool
>
IsModuleTrusted
(
ModuleLoadEvent
:
:
ModuleInfo
&
aDllInfo
const
ModuleLoadEvent
&
aEvent
Authenticode
*
aSvc
)
const
;
}
;
}
#
endif
