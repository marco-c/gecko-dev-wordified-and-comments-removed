#
ifndef
nsAppRunner_h__
#
define
nsAppRunner_h__
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
include
"
mozilla
/
WindowsConsole
.
h
"
#
else
#
include
<
limits
.
h
>
#
endif
#
ifndef
MAXPATHLEN
#
ifdef
PATH_MAX
#
define
MAXPATHLEN
PATH_MAX
#
elif
defined
(
_MAX_PATH
)
#
define
MAXPATHLEN
_MAX_PATH
#
elif
defined
(
CCHMAXPATH
)
#
define
MAXPATHLEN
CCHMAXPATH
#
else
#
define
MAXPATHLEN
1024
#
endif
#
endif
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
ifdef
MOZ_HAS_REMOTE
#
include
"
nsIRemoteService
.
h
"
#
endif
class
nsINativeAppSupport
;
class
nsXREDirProvider
;
class
nsIToolkitProfileService
;
class
nsIFile
;
class
nsIProfileLock
;
class
nsIProfileUnlocker
;
class
nsIFactory
;
extern
nsXREDirProvider
*
gDirServiceProvider
;
extern
const
mozilla
:
:
XREAppData
*
gAppData
;
extern
bool
gSafeMode
;
extern
bool
gFxREmbedded
;
extern
int
gArgc
;
extern
char
*
*
gArgv
;
extern
int
gRestartArgc
;
extern
char
*
*
gRestartArgv
;
extern
bool
gRestartedByOS
;
extern
bool
gLogConsoleErrors
;
extern
nsString
gAbsoluteArgv0Path
;
extern
bool
gIsGtest
;
extern
bool
gKioskMode
;
extern
int
gKioskMonitor
;
extern
bool
gAllowContentAnalysisArgPresent
;
namespace
mozilla
{
nsresult
AppInfoConstructor
(
const
nsID
&
aIID
void
*
*
aResult
)
;
}
void
BuildCompatVersion
(
const
char
*
aAppVersion
const
char
*
aAppBuildID
const
char
*
aToolkitBuildID
nsACString
&
aBuf
)
;
int32_t
CompareCompatVersions
(
const
nsACString
&
aOldCompatVersion
const
nsACString
&
aNewCompatVersion
)
;
nsresult
NS_CreateNativeAppSupport
(
nsINativeAppSupport
*
*
aResult
)
;
already_AddRefed
<
nsINativeAppSupport
>
NS_GetNativeAppSupport
(
)
;
#
ifdef
MOZ_HAS_REMOTE
already_AddRefed
<
nsIRemoteService
>
GetRemoteService
(
)
;
#
endif
nsresult
NS_LockProfilePath
(
nsIFile
*
aPath
nsIFile
*
aTempPath
nsIProfileUnlocker
*
*
aUnlocker
nsIProfileLock
*
*
aResult
)
;
void
WriteConsoleLog
(
)
;
void
MozExpectedExit
(
)
;
class
nsINativeAppSupport
;
nsresult
LaunchChild
(
bool
aBlankCommandLine
bool
aTryExec
=
false
)
;
void
UnlockProfile
(
)
;
#
ifdef
XP_WIN
BOOL
WinLaunchChild
(
const
wchar_t
*
exePath
int
argc
char
*
*
argv
HANDLE
userToken
=
nullptr
HANDLE
*
hProcess
=
nullptr
)
;
BOOL
WinLaunchChild
(
const
wchar_t
*
exePath
int
argc
wchar_t
*
*
argv
HANDLE
userToken
=
nullptr
HANDLE
*
hProcess
=
nullptr
)
;
#
define
PREF_WIN_REGISTER_APPLICATION_RESTART
\
"
toolkit
.
winRegisterApplicationRestart
"
#
define
PREF_WIN_ALTERED_DLL_PREFETCH
"
startup
.
experiments
.
alteredDllPrefetch
"
#
if
defined
(
MOZ_LAUNCHER_PROCESS
)
#
define
PREF_WIN_LAUNCHER_PROCESS_ENABLED
"
browser
.
launcherProcess
.
enabled
"
#
endif
#
endif
namespace
mozilla
{
namespace
startup
{
Result
<
nsCOMPtr
<
nsIFile
>
nsresult
>
GetIncompleteStartupFile
(
nsIFile
*
aProfLD
)
;
void
IncreaseDescriptorLimits
(
)
;
}
const
char
*
PlatformBuildID
(
)
;
bool
RunningGTest
(
)
;
}
void
SetupErrorHandling
(
const
char
*
progname
)
;
#
ifdef
MOZ_ASAN_REPORTER
extern
"
C
"
{
void
MOZ_EXPORT
__sanitizer_set_report_path
(
const
char
*
path
)
;
}
void
setASanReporterPath
(
nsIFile
*
aDir
)
;
#
endif
bool
IsWaylandEnabled
(
)
;
#
endif
