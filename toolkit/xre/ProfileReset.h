#
include
"
nsToolkitProfileService
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsThreadUtils
.
h
"
static
bool
gProfileResetCleanupCompleted
=
false
;
static
const
char
kResetProgressURL
[
]
=
"
chrome
:
/
/
global
/
content
/
resetProfileProgress
.
xul
"
;
nsresult
ProfileResetCleanup
(
nsToolkitProfileService
*
aService
nsIToolkitProfile
*
aOldProfile
)
;
class
ProfileResetCleanupResultTask
:
public
mozilla
:
:
Runnable
{
public
:
ProfileResetCleanupResultTask
(
)
:
mozilla
:
:
Runnable
(
"
ProfileResetCleanupResultTask
"
)
mWorkerThread
(
do_GetCurrentThread
(
)
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mWorkerThread
-
>
Shutdown
(
)
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIThread
>
mWorkerThread
;
}
;
class
ProfileResetCleanupAsyncTask
:
public
mozilla
:
:
Runnable
{
public
:
ProfileResetCleanupAsyncTask
(
nsIFile
*
aProfileDir
nsIFile
*
aProfileLocalDir
nsIFile
*
aTargetDir
const
nsAString
&
aLeafName
)
:
mozilla
:
:
Runnable
(
"
ProfileResetCleanupAsyncTask
"
)
mProfileDir
(
aProfileDir
)
mProfileLocalDir
(
aProfileLocalDir
)
mTargetDir
(
aTargetDir
)
mLeafName
(
aLeafName
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsresult
rv
=
mProfileDir
-
>
CopyToFollowingLinks
(
mTargetDir
mLeafName
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
NS_WARNING
(
"
Could
not
backup
the
root
profile
directory
"
)
;
}
bool
sameDir
;
nsresult
rvLocal
=
mProfileDir
-
>
Equals
(
mProfileLocalDir
&
sameDir
)
;
if
(
NS_SUCCEEDED
(
rvLocal
)
&
&
!
sameDir
)
{
rvLocal
=
mProfileLocalDir
-
>
Remove
(
true
)
;
if
(
NS_FAILED
(
rvLocal
)
)
{
NS_WARNING
(
"
Could
not
remove
the
old
local
profile
directory
(
cache
)
"
)
;
}
}
gProfileResetCleanupCompleted
=
true
;
nsCOMPtr
<
nsIRunnable
>
resultRunnable
=
new
ProfileResetCleanupResultTask
(
)
;
NS_DispatchToMainThread
(
resultRunnable
)
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIFile
>
mProfileDir
;
nsCOMPtr
<
nsIFile
>
mProfileLocalDir
;
nsCOMPtr
<
nsIFile
>
mTargetDir
;
nsString
mLeafName
;
}
;
