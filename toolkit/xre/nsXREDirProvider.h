#
ifndef
_nsXREDirProvider_h__
#
define
_nsXREDirProvider_h__
#
include
"
nsIDirectoryService
.
h
"
#
include
"
nsIProfileMigrator
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsXREDirProvider
final
:
public
nsIDirectoryServiceProvider2
public
nsIProfileStartup
{
public
:
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
void
)
override
;
NS_DECL_NSIDIRECTORYSERVICEPROVIDER
NS_DECL_NSIDIRECTORYSERVICEPROVIDER2
NS_DECL_NSIPROFILESTARTUP
nsXREDirProvider
(
)
;
nsresult
Initialize
(
nsIFile
*
aXULAppDir
nsIFile
*
aGREDir
nsIDirectoryServiceProvider
*
aAppProvider
=
nullptr
)
;
~
nsXREDirProvider
(
)
;
static
nsXREDirProvider
*
GetSingleton
(
)
;
nsresult
GetUserProfilesRootDir
(
nsIFile
*
*
aResult
)
;
nsresult
GetUserProfilesLocalDir
(
nsIFile
*
*
aResult
)
;
nsresult
SetProfile
(
nsIFile
*
aProfileDir
nsIFile
*
aProfileLocalDir
)
;
void
InitializeUserPrefs
(
)
;
void
DoShutdown
(
)
;
static
nsresult
GetUserAppDataDirectory
(
nsIFile
*
*
aFile
)
{
return
GetUserDataDirectory
(
aFile
false
)
;
}
static
nsresult
GetUserLocalDataDirectory
(
nsIFile
*
*
aFile
)
{
return
GetUserDataDirectory
(
aFile
true
)
;
}
static
nsresult
GetUserDataDirectory
(
nsIFile
*
*
aFile
bool
aLocal
)
;
nsIFile
*
GetGREDir
(
)
{
return
mGREDir
;
}
nsIFile
*
GetGREBinDir
(
)
{
return
mGREBinDir
;
}
nsIFile
*
GetAppDir
(
)
{
if
(
mXULAppDir
)
return
mXULAppDir
;
return
mGREDir
;
}
nsresult
GetInstallHash
(
nsAString
&
aPathHash
bool
aUseCompatibilityMode
=
false
)
;
nsresult
GetUpdateRootDir
(
nsIFile
*
*
aResult
)
;
nsresult
GetProfileStartupDir
(
nsIFile
*
*
aResult
)
;
nsresult
GetProfileDir
(
nsIFile
*
*
aResult
)
;
protected
:
nsresult
GetFilesInternal
(
const
char
*
aProperty
nsISimpleEnumerator
*
*
aResult
)
;
static
nsresult
GetUserDataDirectoryHome
(
nsIFile
*
*
aFile
bool
aLocal
)
;
static
nsresult
GetSysUserExtensionsDirectory
(
nsIFile
*
*
aFile
)
;
static
nsresult
GetSysUserExtensionsDevDirectory
(
nsIFile
*
*
aFile
)
;
#
if
defined
(
XP_UNIX
)
|
|
defined
(
XP_MACOSX
)
static
nsresult
GetSystemExtensionsDirectory
(
nsIFile
*
*
aFile
)
;
#
endif
static
nsresult
EnsureDirectoryExists
(
nsIFile
*
aDirectory
)
;
static
nsresult
AppendProfilePath
(
nsIFile
*
aFile
bool
aLocal
)
;
static
nsresult
AppendSysUserExtensionPath
(
nsIFile
*
aFile
)
;
static
nsresult
AppendSysUserExtensionsDevPath
(
nsIFile
*
aFile
)
;
static
inline
nsresult
AppendProfileString
(
nsIFile
*
aFile
const
char
*
aPath
)
;
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
nsresult
LoadContentProcessTempDir
(
)
;
#
endif
void
Append
(
nsIFile
*
aDirectory
)
;
nsCOMPtr
<
nsIDirectoryServiceProvider
>
mAppProvider
;
nsCOMPtr
<
nsIFile
>
mGREDir
;
nsCOMPtr
<
nsIFile
>
mGREBinDir
;
nsCOMPtr
<
nsIFile
>
mXULAppDir
;
nsCOMPtr
<
nsIFile
>
mProfileDir
;
nsCOMPtr
<
nsIFile
>
mProfileLocalDir
;
bool
mProfileNotified
;
bool
mPrefsInitialized
=
false
;
#
if
defined
(
MOZ_CONTENT_SANDBOX
)
nsCOMPtr
<
nsIFile
>
mContentTempDir
;
nsCOMPtr
<
nsIFile
>
mContentProcessSandboxTempDir
;
#
endif
nsCOMArray
<
nsIFile
>
mAppBundleDirectories
;
}
;
#
endif
