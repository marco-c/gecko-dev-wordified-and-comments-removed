#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsICategoryManager
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsAppStartupNotifier
.
h
"
#
include
"
mozilla
/
SimpleEnumerator
.
h
"
nsresult
nsAppStartupNotifier
:
:
NotifyObservers
(
const
char
*
aCategory
)
{
NS_ENSURE_ARG
(
aCategory
)
;
nsresult
rv
;
nsCOMPtr
<
nsICategoryManager
>
categoryManager
=
do_GetService
(
NS_CATEGORYMANAGER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsDependentCString
category
(
aCategory
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
enumerator
;
rv
=
categoryManager
-
>
EnumerateCategory
(
category
getter_AddRefs
(
enumerator
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
for
(
auto
&
categoryEntry
:
SimpleEnumerator
<
nsICategoryEntry
>
(
enumerator
)
)
{
nsAutoCString
contractId
;
categoryEntry
-
>
GetValue
(
contractId
)
;
nsCOMPtr
<
nsISupports
>
startupInstance
;
if
(
StringBeginsWith
(
contractId
NS_LITERAL_CSTRING
(
"
service
"
)
)
)
{
startupInstance
=
do_GetService
(
contractId
.
get
(
)
+
8
&
rv
)
;
}
else
{
startupInstance
=
do_CreateInstance
(
contractId
.
get
(
)
&
rv
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIObserver
>
startupObserver
=
do_QueryInterface
(
startupInstance
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
startupObserver
-
>
Observe
(
nullptr
aCategory
nullptr
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Startup
Observer
failed
!
\
n
"
)
;
}
}
else
{
#
ifdef
DEBUG
nsAutoCString
warnStr
(
"
Cannot
create
startup
observer
:
"
)
;
warnStr
+
=
contractId
.
get
(
)
;
NS_WARNING
(
warnStr
.
get
(
)
)
;
#
endif
}
}
return
NS_OK
;
}
