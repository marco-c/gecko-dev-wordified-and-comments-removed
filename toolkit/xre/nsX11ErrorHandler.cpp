#
include
"
nsX11ErrorHandler
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
X11Util
.
h
"
#
include
<
X11
/
Xlib
.
h
>
#
define
BUFSIZE
2048
/
/
What
Xlib
uses
with
XGetErrorDatabaseText
struct
XExtension
{
nsCString
name
;
int
major_opcode
;
XExtension
(
const
char
*
aName
int
aCode
)
:
name
(
aName
)
major_opcode
(
aCode
)
{
}
}
;
static
nsTArray
<
XExtension
>
sXExtensions
;
static
void
QueryXExtensions
(
Display
*
aDisplay
)
{
if
(
!
sXExtensions
.
IsEmpty
(
)
|
|
!
aDisplay
)
{
return
;
}
int
nExts
=
0
;
char
*
*
extNames
=
XListExtensions
(
aDisplay
&
nExts
)
;
if
(
!
extNames
)
{
return
;
}
for
(
int
i
=
0
;
i
<
nExts
;
+
+
i
)
{
int
major_opcode
first_event
first_error
;
if
(
XQueryExtension
(
aDisplay
extNames
[
i
]
&
major_opcode
&
first_event
&
first_error
)
)
{
sXExtensions
.
EmplaceBack
(
extNames
[
i
]
major_opcode
)
;
}
}
XFreeExtensionList
(
extNames
)
;
}
extern
"
C
"
{
int
X11Error
(
Display
*
display
XErrorEvent
*
event
)
{
#
ifdef
DEBUG
unsigned
long
age
=
NextRequest
(
display
)
-
event
-
>
serial
;
#
endif
nsAutoCString
message
;
if
(
event
-
>
request_code
<
128
)
{
message
.
AppendInt
(
event
-
>
request_code
)
;
}
else
{
for
(
XExtension
&
ext
:
sXExtensions
)
{
if
(
ext
.
major_opcode
=
=
event
-
>
request_code
)
{
message
.
Append
(
ext
.
name
)
;
message
.
Append
(
'
.
'
)
;
message
.
AppendInt
(
event
-
>
minor_code
)
;
break
;
}
}
}
char
buffer
[
BUFSIZE
]
;
if
(
message
.
IsEmpty
(
)
)
{
buffer
[
0
]
=
'
\
0
'
;
}
else
{
XGetErrorDatabaseText
(
display
"
XRequest
"
message
.
get
(
)
"
"
buffer
sizeof
(
buffer
)
)
;
}
nsAutoCString
notes
;
if
(
buffer
[
0
]
)
{
notes
.
Append
(
buffer
)
;
}
else
{
notes
.
AppendLiteral
(
"
Request
"
)
;
notes
.
AppendInt
(
event
-
>
request_code
)
;
notes
.
Append
(
'
.
'
)
;
notes
.
AppendInt
(
event
-
>
minor_code
)
;
}
notes
.
AppendLiteral
(
"
:
"
)
;
XGetErrorText
(
display
event
-
>
error_code
buffer
sizeof
(
buffer
)
)
;
notes
.
Append
(
buffer
)
;
#
ifdef
DEBUG
if
(
age
>
1
)
{
if
(
XSynchronize
(
display
X11True
)
=
=
XSynchronize
(
display
X11False
)
)
{
notes
.
AppendLiteral
(
"
;
sync
"
)
;
}
else
{
notes
.
AppendLiteral
(
"
;
"
)
;
notes
.
AppendInt
(
uint32_t
(
age
)
)
;
notes
.
AppendLiteral
(
"
requests
ago
"
)
;
}
}
notes
.
AppendLiteral
(
"
;
id
=
0x
"
)
;
notes
.
AppendInt
(
uint32_t
(
event
-
>
resourceid
)
16
)
;
#
ifdef
MOZ_X11
if
(
!
PR_GetEnv
(
"
MOZ_X_SYNC
"
)
)
{
notes
.
AppendLiteral
(
"
\
nRe
-
running
with
MOZ_X_SYNC
=
1
in
the
environment
may
give
a
more
"
"
helpful
backtrace
.
"
)
;
}
#
endif
#
endif
NS_WARNING
(
notes
.
get
(
)
)
;
return
0
;
}
}
void
InstallX11ErrorHandler
(
)
{
XSetErrorHandler
(
X11Error
)
;
if
(
Display
*
display
=
mozilla
:
:
DefaultXDisplay
(
)
)
{
QueryXExtensions
(
display
)
;
if
(
PR_GetEnv
(
"
MOZ_X_SYNC
"
)
)
{
XSynchronize
(
display
X11True
)
;
}
}
}
void
CleanupX11ErrorHandler
(
)
{
sXExtensions
.
Clear
(
)
;
}
