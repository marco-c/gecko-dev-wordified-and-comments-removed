#
ifndef
mozilla_ModuleVersionInfo_h
#
define
mozilla_ModuleVersionInfo_h
#
include
<
windows
.
h
>
#
include
"
nsString
.
h
"
namespace
mozilla
{
class
ModuleVersionInfo
{
public
:
nsString
mCompanyName
;
nsString
mProductName
;
nsString
mLegalCopyright
;
nsString
mFileDescription
;
class
VersionNumber
{
uint64_t
mVersion64
=
0
;
public
:
VersionNumber
(
)
=
default
;
VersionNumber
(
DWORD
aMostSig
DWORD
aLeastSig
)
:
mVersion64
(
(
uint64_t
)
aMostSig
<
<
32
|
aLeastSig
)
{
}
uint16_t
A
(
)
const
{
return
(
uint16_t
)
(
(
mVersion64
&
0xffff000000000000
)
>
>
48
)
;
}
uint16_t
B
(
)
const
{
return
(
uint16_t
)
(
(
mVersion64
&
0x0000ffff00000000
)
>
>
32
)
;
}
uint16_t
C
(
)
const
{
return
(
uint16_t
)
(
(
mVersion64
&
0x00000000ffff0000
)
>
>
16
)
;
}
uint16_t
D
(
)
const
{
return
(
uint16_t
)
(
mVersion64
&
0x000000000000ffff
)
;
}
uint64_t
Version64
(
)
const
{
return
mVersion64
;
}
bool
operator
=
=
(
const
VersionNumber
&
aOther
)
const
{
return
mVersion64
=
=
aOther
.
mVersion64
;
}
nsCString
ToString
(
)
const
{
nsCString
ret
;
ret
.
AppendPrintf
(
"
%
d
.
%
d
.
%
d
.
%
d
"
(
int
)
A
(
)
(
int
)
B
(
)
(
int
)
C
(
)
(
int
)
D
(
)
)
;
return
ret
;
}
}
;
VersionNumber
mFileVersion
;
VersionNumber
mProductVersion
;
bool
GetFromImage
(
const
nsAString
&
aPath
)
;
}
;
}
#
endif
