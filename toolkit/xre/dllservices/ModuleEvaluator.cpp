#
include
"
ModuleEvaluator
.
h
"
#
include
<
algorithm
>
#
include
<
type_traits
>
#
include
<
windows
.
h
>
#
include
<
shlobj
.
h
>
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
ModuleVersionInfo
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
WinDllServices
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
static
Vector
<
nsString
>
GetKeyboardLayoutDlls
(
)
{
Vector
<
nsString
>
result
;
HKEY
rawKey
;
if
(
:
:
RegOpenKeyExW
(
HKEY_LOCAL_MACHINE
L
"
SYSTEM
\
\
CurrentControlSet
\
\
Control
\
\
Keyboard
Layouts
"
0
KEY_ENUMERATE_SUB_KEYS
&
rawKey
)
!
=
ERROR_SUCCESS
)
{
return
result
;
}
nsAutoRegKey
key
(
rawKey
)
;
DWORD
iKey
=
0
;
wchar_t
strTemp
[
MAX_PATH
]
=
{
}
;
while
(
true
)
{
DWORD
strTempSize
=
ArrayLength
(
strTemp
)
;
if
(
RegEnumKeyExW
(
rawKey
iKey
strTemp
&
strTempSize
nullptr
nullptr
nullptr
nullptr
)
!
=
ERROR_SUCCESS
)
{
return
result
;
}
iKey
+
+
;
strTempSize
=
sizeof
(
strTemp
)
;
if
(
:
:
RegGetValueW
(
rawKey
strTemp
L
"
Layout
File
"
RRF_RT_REG_SZ
nullptr
strTemp
&
strTempSize
)
=
=
ERROR_SUCCESS
&
&
strTempSize
)
{
nsString
ws
(
strTemp
(
(
strTempSize
+
1
)
/
sizeof
(
wchar_t
)
)
-
1
)
;
ToLowerCase
(
ws
)
;
Unused
<
<
result
.
emplaceBack
(
std
:
:
move
(
ws
)
)
;
}
}
}
bool
ModuleEvaluator
:
:
ResolveKnownFolder
(
REFKNOWNFOLDERID
aFolderId
nsIFile
*
*
aOutFile
)
{
if
(
!
aOutFile
)
{
return
false
;
}
*
aOutFile
=
nullptr
;
PWSTR
rawPath
=
nullptr
;
HRESULT
hr
=
:
:
SHGetKnownFolderPath
(
aFolderId
KF_FLAG_DEFAULT
nullptr
&
rawPath
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
using
ShellStringUniquePtr
=
UniquePtr
<
std
:
:
remove_pointer_t
<
PWSTR
>
CoTaskMemFreeDeleter
>
;
ShellStringUniquePtr
path
(
rawPath
)
;
nsresult
rv
=
NS_NewLocalFile
(
nsDependentString
(
path
.
get
(
)
)
false
aOutFile
)
;
return
NS_SUCCEEDED
(
rv
)
;
}
ModuleEvaluator
:
:
ModuleEvaluator
(
)
:
mKeyboardLayoutDlls
(
GetKeyboardLayoutDlls
(
)
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
#
if
defined
(
_M_IX86
)
REFKNOWNFOLDERID
systemFolderId
=
FOLDERID_SystemX86
;
#
else
REFKNOWNFOLDERID
systemFolderId
=
FOLDERID_System
;
#
endif
bool
resolveOk
=
ResolveKnownFolder
(
systemFolderId
getter_AddRefs
(
mSysDirectory
)
)
;
MOZ_ASSERT
(
resolveOk
)
;
if
(
!
resolveOk
)
{
return
;
}
nsCOMPtr
<
nsIFile
>
winSxSDir
;
resolveOk
=
ResolveKnownFolder
(
FOLDERID_Windows
getter_AddRefs
(
winSxSDir
)
)
;
MOZ_ASSERT
(
resolveOk
)
;
if
(
!
resolveOk
)
{
return
;
}
nsresult
rv
=
winSxSDir
-
>
Append
(
u
"
WinSxS
"
_ns
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
mWinSxSDirectory
=
std
:
:
move
(
winSxSDir
)
;
nsCOMPtr
<
nsIFile
>
exeFile
;
rv
=
XRE_GetBinaryPath
(
getter_AddRefs
(
exeFile
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
rv
=
exeFile
-
>
GetParent
(
getter_AddRefs
(
mExeDirectory
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsAutoString
exePath
;
rv
=
exeFile
-
>
GetPath
(
exePath
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
ModuleVersionInfo
exeVi
;
if
(
!
exeVi
.
GetFromImage
(
exePath
)
)
{
return
;
}
mExeVersion
=
Some
(
ModuleVersion
(
exeVi
.
mFileVersion
.
Version64
(
)
)
)
;
}
ModuleEvaluator
:
:
operator
bool
(
)
const
{
return
mExeVersion
.
isSome
(
)
&
&
mExeDirectory
&
&
mSysDirectory
&
&
mWinSxSDirectory
;
}
Maybe
<
ModuleTrustFlags
>
ModuleEvaluator
:
:
GetTrust
(
const
ModuleRecord
&
aModuleRecord
)
const
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
aModuleRecord
.
mVendorInfo
.
isSome
(
)
&
&
aModuleRecord
.
mVendorInfo
.
ref
(
)
.
mHasNestedMicrosoftSignature
)
{
return
Some
(
ModuleTrustFlags
:
:
MicrosoftWindowsSignature
)
;
}
if
(
aModuleRecord
.
mVendorInfo
.
isSome
(
)
&
&
aModuleRecord
.
mVendorInfo
.
ref
(
)
.
mSource
=
=
VendorInfo
:
:
Source
:
:
Signature
)
{
const
nsString
&
signedBy
=
aModuleRecord
.
mVendorInfo
.
ref
(
)
.
mVendor
;
if
(
signedBy
.
EqualsLiteral
(
"
Microsoft
Windows
"
)
)
{
return
Some
(
ModuleTrustFlags
:
:
MicrosoftWindowsSignature
)
;
}
else
if
(
signedBy
.
EqualsLiteral
(
"
Microsoft
Corporation
"
)
)
{
return
Some
(
ModuleTrustFlags
:
:
MicrosoftWindowsSignature
)
;
}
else
if
(
signedBy
.
EqualsLiteral
(
"
Mozilla
Corporation
"
)
)
{
return
Some
(
ModuleTrustFlags
:
:
MozillaSignature
)
;
}
else
{
return
Some
(
ModuleTrustFlags
:
:
None
)
;
}
}
const
nsCOMPtr
<
nsIFile
>
&
dllFile
=
aModuleRecord
.
mResolvedDosName
;
MOZ_ASSERT
(
!
!
dllFile
)
;
if
(
!
dllFile
)
{
return
Nothing
(
)
;
}
nsAutoString
dllLeafLower
;
if
(
NS_FAILED
(
dllFile
-
>
GetLeafName
(
dllLeafLower
)
)
)
{
return
Nothing
(
)
;
}
ToLowerCase
(
dllLeafLower
)
;
if
(
dllLeafLower
.
EqualsLiteral
(
"
jitpi
.
dll
"
)
)
{
return
Some
(
ModuleTrustFlags
:
:
JitPI
)
;
}
ModuleTrustFlags
result
=
ModuleTrustFlags
:
:
None
;
nsresult
rv
;
bool
contained
;
rv
=
mSysDirectory
-
>
Contains
(
dllFile
&
contained
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
contained
)
{
result
|
=
ModuleTrustFlags
:
:
SystemDirectory
;
}
rv
=
mWinSxSDirectory
-
>
Contains
(
dllFile
&
contained
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
contained
)
{
result
|
=
ModuleTrustFlags
:
:
WinSxSDirectory
;
}
if
(
std
:
:
find
(
mKeyboardLayoutDlls
.
begin
(
)
mKeyboardLayoutDlls
.
end
(
)
dllLeafLower
)
!
=
mKeyboardLayoutDlls
.
end
(
)
)
{
result
|
=
ModuleTrustFlags
:
:
KeyboardLayout
;
}
if
(
aModuleRecord
.
mVendorInfo
.
isSome
(
)
&
&
aModuleRecord
.
mVendorInfo
.
ref
(
)
.
mSource
=
=
VendorInfo
:
:
Source
:
:
VersionInfo
)
{
const
nsString
&
companyName
=
aModuleRecord
.
mVendorInfo
.
ref
(
)
.
mVendor
;
if
(
companyName
.
EqualsLiteral
(
"
Microsoft
Corporation
"
)
)
{
result
|
=
ModuleTrustFlags
:
:
MicrosoftVersion
;
}
}
rv
=
mExeDirectory
-
>
Contains
(
dllFile
&
contained
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
contained
)
{
result
|
=
ModuleTrustFlags
:
:
FirefoxDirectory
;
if
(
mExeVersion
.
isSome
(
)
&
&
aModuleRecord
.
mVersion
.
isSome
(
)
&
&
mExeVersion
.
value
(
)
=
=
aModuleRecord
.
mVersion
.
value
(
)
)
{
result
|
=
ModuleTrustFlags
:
:
FirefoxDirectoryAndVersion
;
}
}
return
Some
(
result
)
;
}
}
