#
ifndef
mozilla_windowsdllblocklist_h
#
define
mozilla_windowsdllblocklist_h
#
if
(
defined
(
_MSC_VER
)
|
|
defined
(
__MINGW32__
)
)
&
&
\
(
defined
(
_M_IX86
)
|
|
defined
(
_M_X64
)
|
|
defined
(
_M_ARM64
)
)
#
include
<
windows
.
h
>
#
include
"
CrashAnnotations
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ProcessType
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
define
HAS_DLL_BLOCKLIST
enum
DllBlocklistInitFlags
{
eDllBlocklistInitFlagDefault
=
0
eDllBlocklistInitFlagIsChildProcess
=
1
<
<
0
eDllBlocklistInitFlagWasBootstrapped
=
1
<
<
1
eDllBlocklistInitFlagIsUtilityProcess
=
1
<
<
2
eDllBlocklistInitFlagIsSocketProcess
=
1
<
<
3
eDllBlocklistInitFlagIsGPUProcess
=
1
<
<
4
}
;
inline
void
SetDllBlocklistProcessTypeFlags
(
uint32_t
&
aFlags
GeckoProcessType
aProcessType
)
{
if
(
aProcessType
=
=
GeckoProcessType_Utility
)
{
aFlags
|
=
eDllBlocklistInitFlagIsUtilityProcess
;
}
else
if
(
aProcessType
=
=
GeckoProcessType_Socket
)
{
aFlags
|
=
eDllBlocklistInitFlagIsSocketProcess
;
}
else
if
(
aProcessType
=
=
GeckoProcessType_GPU
)
{
aFlags
|
=
eDllBlocklistInitFlagIsGPUProcess
;
}
}
#
if
!
defined
(
IMPL_MFBT
)
&
&
!
defined
(
MOZILLA_INTERNAL_API
)
extern
uint32_t
gBlocklistInitFlags
;
#
endif
MFBT_API
void
DllBlocklist_Initialize
(
uint32_t
aInitFlags
=
eDllBlocklistInitFlagDefault
)
;
MFBT_API
void
DllBlocklist_WriteNotes
(
CrashReporter
:
:
AnnotationWriter
&
aWriter
)
;
MFBT_API
bool
DllBlocklist_CheckStatus
(
)
;
#
ifdef
DEBUG
MFBT_API
void
DllBlocklist_Shutdown
(
)
;
#
endif
namespace
mozilla
{
namespace
glue
{
namespace
detail
{
class
DllServicesBase
;
template
<
size_t
N
>
class
WritableBuffer
{
char
mBuffer
[
N
]
;
size_t
mLen
;
size_t
Available
(
)
const
{
return
sizeof
(
mBuffer
)
-
mLen
;
}
public
:
WritableBuffer
(
)
:
mBuffer
{
0
}
mLen
(
0
)
{
}
void
Write
(
const
char
*
aData
size_t
aLen
)
{
size_t
writable_len
=
std
:
:
min
(
aLen
Available
(
)
)
;
memcpy
(
mBuffer
+
mLen
aData
writable_len
)
;
mLen
+
=
writable_len
;
}
size_t
Length
(
)
const
{
return
mLen
;
}
const
char
*
Data
(
)
const
{
return
mBuffer
;
}
}
;
}
}
}
MFBT_API
void
DllBlocklist_SetFullDllServices
(
mozilla
:
:
glue
:
:
detail
:
:
DllServicesBase
*
aSvc
)
;
MFBT_API
void
DllBlocklist_SetBasicDllServices
(
mozilla
:
:
glue
:
:
detail
:
:
DllServicesBase
*
aSvc
)
;
#
endif
#
endif
