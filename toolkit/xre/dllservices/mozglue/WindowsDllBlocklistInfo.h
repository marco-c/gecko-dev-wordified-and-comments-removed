#
ifndef
mozilla_WindowsDllBlocklistInfo_h
#
define
mozilla_WindowsDllBlocklistInfo_h
#
include
<
stdint
.
h
>
namespace
mozilla
{
enum
DllBlockInfoFlags
:
uint32_t
{
FLAGS_DEFAULT
=
0
USE_TIMESTAMP
=
1
<
<
0
CHILD_PROCESSES_ONLY
=
1
<
<
1
BROWSER_PROCESS_ONLY
=
1
<
<
2
REDIRECT_TO_NOOP_ENTRYPOINT
=
1
<
<
3
UTILITY_PROCESSES_ONLY
=
1
<
<
4
SOCKET_PROCESSES_ONLY
=
1
<
<
5
GPU_PROCESSES_ONLY
=
1
<
<
6
GMPLUGIN_PROCESSES_ONLY
=
1
<
<
7
}
;
constexpr
DllBlockInfoFlags
operator
|
(
const
DllBlockInfoFlags
a
const
DllBlockInfoFlags
b
)
{
return
static_cast
<
DllBlockInfoFlags
>
(
static_cast
<
uint32_t
>
(
a
)
|
static_cast
<
uint32_t
>
(
b
)
)
;
}
template
<
typename
StrType
>
struct
DllBlockInfoT
{
StrType
mName
;
uint64_t
mMaxVersion
;
DllBlockInfoFlags
mFlags
;
bool
IsVersionBlocked
(
const
uint64_t
aOther
)
const
{
if
(
mMaxVersion
=
=
ALL_VERSIONS
)
{
return
true
;
}
return
aOther
<
=
mMaxVersion
;
}
bool
IsValidDynamicBlocklistEntry
(
)
const
;
static
const
uint64_t
ALL_VERSIONS
=
(
uint64_t
)
-
1LL
;
static
const
uint64_t
UNVERSIONED
=
0ULL
;
}
;
}
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
__clang__
)
#
define
MAKE_VERSION
(
a
b
c
d
)
\
(
(
a
#
#
ULL
<
<
48
)
+
(
b
#
#
ULL
<
<
32
)
+
(
c
#
#
ULL
<
<
16
)
+
d
#
#
ULL
)
#
else
static
inline
constexpr
uint64_t
MAKE_VERSION
(
uint16_t
a
uint16_t
b
uint16_t
c
uint16_t
d
)
{
return
static_cast
<
uint64_t
>
(
a
)
<
<
48
|
static_cast
<
uint64_t
>
(
b
)
<
<
32
|
static_cast
<
uint64_t
>
(
c
)
<
<
16
|
static_cast
<
uint64_t
>
(
d
)
;
}
#
endif
#
endif
