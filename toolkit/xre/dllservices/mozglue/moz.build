Library
(
"
dllservices_mozglue
"
)
if
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
:
SOURCES
+
=
[
"
WindowsDllBlocklist
.
cpp
"
]
UNIFIED_SOURCES
+
=
[
"
Authenticode
.
cpp
"
"
LoaderObserver
.
cpp
"
"
ModuleLoadFrame
.
cpp
"
"
WindowsBCryptInitialization
.
cpp
"
"
WindowsFallbackLoaderAPI
.
cpp
"
"
WindowsStackWalkInitialization
.
cpp
"
]
if
not
CONFIG
[
"
JS_STANDALONE
"
]
:
UNIFIED_SOURCES
+
=
[
"
CacheNtDllThunk
.
cpp
"
]
OS_LIBS
+
=
[
"
crypt32
"
"
ntdll
"
"
version
"
"
wintrust
"
]
DELAYLOAD_DLLS
+
=
[
"
crypt32
.
dll
"
"
wintrust
.
dll
"
]
EXPORTS
+
=
[
"
nsWindowsDllInterceptor
.
h
"
]
EXPORTS
.
mozilla
+
=
[
"
Authenticode
.
h
"
"
CacheNtDllThunk
.
h
"
"
LoaderAPIInterfaces
.
h
"
"
ModuleLoadInfo
.
h
"
"
WindowsBCryptInitialization
.
h
"
"
WindowsDllBlocklist
.
h
"
"
WindowsDllBlocklistCommon
.
h
"
"
WindowsDllBlocklistInfo
.
h
"
"
WindowsStackWalkInitialization
.
h
"
]
EXPORTS
.
mozilla
.
glue
+
=
[
"
SharedSection
.
h
"
"
WindowsDllServices
.
h
"
]
blocklist_header_types
=
[
"
A11y
"
"
Launcher
"
"
Legacy
"
"
Test
"
]
blocklist_file_leaf_tpl
=
"
WindowsDllBlocklist
{
0
}
Defs
.
h
"
blocklist_files
=
tuple
(
[
blocklist_file_leaf_tpl
.
format
(
type
)
for
type
in
blocklist_header_types
]
)
GeneratedFile
(
*
blocklist_files
script
=
"
gen_dll_blocklist_defs
.
py
"
entry_point
=
"
gen_blocklists
"
inputs
=
[
"
WindowsDllBlocklistDefs
.
in
"
]
)
EXPORTS
.
mozilla
+
=
[
"
!
"
+
hdr
for
hdr
in
blocklist_files
]
DIRS
+
=
[
"
interceptor
"
]
FINAL_LIBRARY
=
"
mozglue
"
