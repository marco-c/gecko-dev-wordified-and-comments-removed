#
include
"
mozilla
/
WindowsStackWalkInitialization
.
h
"
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
StackWalk_windows
.
h
"
namespace
mozilla
{
#
if
defined
(
_M_AMD64
)
|
|
defined
(
_M_ARM64
)
static
WindowsDllInterceptor
NtDllIntercept
;
typedef
NTSTATUS
(
NTAPI
*
LdrUnloadDll_func
)
(
HMODULE
module
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
LdrUnloadDll_func
>
stub_LdrUnloadDll
;
static
NTSTATUS
NTAPI
patched_LdrUnloadDll
(
HMODULE
module
)
{
AutoSuppressStackWalking
suppress
;
return
stub_LdrUnloadDll
(
module
)
;
}
typedef
PVOID
(
WINAPI
*
LdrResolveDelayLoadedAPI_func
)
(
PVOID
ParentModuleBase
PVOID
DelayloadDescriptor
PVOID
FailureDllHook
PVOID
FailureSystemHook
PVOID
ThunkAddress
ULONG
Flags
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
LdrResolveDelayLoadedAPI_func
>
stub_LdrResolveDelayLoadedAPI
;
static
PVOID
WINAPI
patched_LdrResolveDelayLoadedAPI
(
PVOID
ParentModuleBase
PVOID
DelayloadDescriptor
PVOID
FailureDllHook
PVOID
FailureSystemHook
PVOID
ThunkAddress
ULONG
Flags
)
{
AutoSuppressStackWalking
suppress
;
return
stub_LdrResolveDelayLoadedAPI
(
ParentModuleBase
DelayloadDescriptor
FailureDllHook
FailureSystemHook
ThunkAddress
Flags
)
;
}
void
WindowsStackWalkInitialization
(
)
{
static
bool
ran
=
false
;
if
(
ran
)
{
return
;
}
ran
=
true
;
NtDllIntercept
.
Init
(
"
ntdll
.
dll
"
)
;
stub_LdrUnloadDll
.
Set
(
NtDllIntercept
"
LdrUnloadDll
"
&
patched_LdrUnloadDll
)
;
stub_LdrResolveDelayLoadedAPI
.
Set
(
NtDllIntercept
"
LdrResolveDelayLoadedAPI
"
&
patched_LdrResolveDelayLoadedAPI
)
;
}
#
endif
}
