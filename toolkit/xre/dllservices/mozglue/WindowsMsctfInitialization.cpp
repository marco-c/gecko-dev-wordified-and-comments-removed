#
include
"
mozilla
/
WindowsMsctfInitialization
.
h
"
#
include
<
windows
.
h
>
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsWindowsDllInterceptor
.
h
"
namespace
mozilla
{
#
if
defined
(
_M_IX86
)
|
|
defined
(
_M_X64
)
struct
LPARAM20000
{
uintptr_t
Reserved1
;
LPARAM
LegacyValue
;
uintptr_t
Reserved2
;
}
;
static
WindowsDllInterceptor
MsctfIntercept
;
typedef
uintptr_t
(
WINAPI
*
TF_Notify_func
)
(
UINT
uMsg
WPARAM
wParam
LPARAM
lParam
)
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
TF_Notify_func
>
stub_TF_Notify
;
uintptr_t
WINAPI
patched_TF_Notify
(
UINT
uMsg
WPARAM
wParam
LPARAM
lParam
)
{
if
(
uMsg
=
=
0x20000
&
&
IsBadReadPtr
(
reinterpret_cast
<
void
*
>
(
lParam
)
sizeof
(
LPARAM20000
)
)
)
{
LPARAM20000
lParamWithNewConvention
{
.
Reserved1
=
0
.
LegacyValue
=
lParam
.
Reserved2
=
0
}
;
return
stub_TF_Notify
(
uMsg
wParam
reinterpret_cast
<
LPARAM
>
(
&
lParamWithNewConvention
)
)
;
}
return
stub_TF_Notify
(
uMsg
wParam
lParam
)
;
}
bool
WindowsMsctfInitialization
(
)
{
HMODULE
icsak
=
:
:
GetModuleHandleW
(
L
"
icsak
.
dll
"
)
;
if
(
!
icsak
)
{
return
true
;
}
if
(
!
IsWin1122H2OrLater
(
)
)
{
return
true
;
}
nt
:
:
PEHeaders
icsakHeaders
{
icsak
}
;
uint64_t
icsakVersion
{
}
;
if
(
!
icsakHeaders
|
|
!
icsakHeaders
.
GetVersionInfo
(
icsakVersion
)
|
|
icsakVersion
>
0x0001000501890885
)
{
return
true
;
}
MsctfIntercept
.
Init
(
L
"
msctf
.
dll
"
)
;
return
stub_TF_Notify
.
Set
(
MsctfIntercept
"
TF_Notify
"
&
patched_TF_Notify
)
;
}
#
endif
}
