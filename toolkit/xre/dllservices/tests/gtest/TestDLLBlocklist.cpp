#
include
<
windows
.
h
>
#
include
<
winternl
.
h
>
#
include
<
process
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Char16
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
static
nsString
GetFullPath
(
const
nsAString
&
aLeaf
)
{
nsCOMPtr
<
nsIFile
>
f
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
NS_GetSpecialDirectory
(
NS_OS_CURRENT_WORKING_DIR
getter_AddRefs
(
f
)
)
)
)
;
EXPECT_NS_SUCCEEDED
(
f
-
>
Append
(
aLeaf
)
)
;
bool
exists
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
f
-
>
Exists
(
&
exists
)
)
&
&
exists
)
;
nsString
ret
;
EXPECT_NS_SUCCEEDED
(
f
-
>
GetPath
(
ret
)
)
;
return
ret
;
}
TEST
(
TestDllBlocklist
BlockDllByName
)
{
constexpr
auto
kLeafName
=
u
"
TestDllBlocklist_MatchByName
.
dll
"
_ns
;
nsString
dllPath
=
GetFullPath
(
kLeafName
)
;
nsModuleHandle
hDll
(
:
:
LoadLibraryW
(
dllPath
.
get
(
)
)
)
;
EXPECT_TRUE
(
!
hDll
)
;
EXPECT_TRUE
(
!
:
:
GetModuleHandleW
(
kLeafName
.
get
(
)
)
)
;
hDll
.
own
(
:
:
LoadLibraryExW
(
dllPath
.
get
(
)
nullptr
LOAD_LIBRARY_AS_DATAFILE
)
)
;
EXPECT_TRUE
(
hDll
)
;
}
TEST
(
TestDllBlocklist
BlockDllByVersion
)
{
constexpr
auto
kLeafName
=
u
"
TestDllBlocklist_MatchByVersion
.
dll
"
_ns
;
nsString
dllPath
=
GetFullPath
(
kLeafName
)
;
nsModuleHandle
hDll
(
:
:
LoadLibraryW
(
dllPath
.
get
(
)
)
)
;
EXPECT_TRUE
(
!
hDll
)
;
EXPECT_TRUE
(
!
:
:
GetModuleHandleW
(
kLeafName
.
get
(
)
)
)
;
hDll
.
own
(
:
:
LoadLibraryExW
(
dllPath
.
get
(
)
nullptr
LOAD_LIBRARY_AS_IMAGE_RESOURCE
)
)
;
EXPECT_TRUE
(
hDll
)
;
}
TEST
(
TestDllBlocklist
AllowDllByVersion
)
{
constexpr
auto
kLeafName
=
u
"
TestDllBlocklist_AllowByVersion
.
dll
"
_ns
;
nsString
dllPath
=
GetFullPath
(
kLeafName
)
;
nsModuleHandle
hDll
(
:
:
LoadLibraryW
(
dllPath
.
get
(
)
)
)
;
EXPECT_TRUE
(
!
!
hDll
)
;
EXPECT_TRUE
(
!
!
:
:
GetModuleHandleW
(
kLeafName
.
get
(
)
)
)
;
}
TEST
(
TestDllBlocklist
SocketProcessOnly_AllowInMainProcess
)
{
constexpr
auto
kLeafName
=
u
"
TestDllBlocklist_SocketProcessOnly
.
dll
"
_ns
;
nsString
dllPath
=
GetFullPath
(
kLeafName
)
;
nsModuleHandle
hDll
(
:
:
LoadLibraryW
(
dllPath
.
get
(
)
)
)
;
EXPECT_TRUE
(
!
!
hDll
)
;
EXPECT_TRUE
(
!
!
:
:
GetModuleHandleW
(
kLeafName
.
get
(
)
)
)
;
}
TEST
(
TestDllBlocklist
UtilityProcessOnly_AllowInMainProcess
)
{
constexpr
auto
kLeafName
=
u
"
TestDllBlocklist_UtilityProcessOnly
.
dll
"
_ns
;
nsString
dllPath
=
GetFullPath
(
kLeafName
)
;
nsModuleHandle
hDll
(
:
:
LoadLibraryW
(
dllPath
.
get
(
)
)
)
;
EXPECT_TRUE
(
!
!
hDll
)
;
EXPECT_TRUE
(
!
!
:
:
GetModuleHandleW
(
kLeafName
.
get
(
)
)
)
;
}
#
if
defined
(
MOZ_LAUNCHER_PROCESS
)
TEST
(
TestDllBlocklist
NoOpEntryPoint
)
{
constexpr
auto
kLeafName
=
u
"
TestDllBlocklist_NoOpEntryPoint
.
dll
"
_ns
;
nsString
dllPath
=
GetFullPath
(
kLeafName
)
;
nsModuleHandle
hDll
(
:
:
LoadLibraryW
(
dllPath
.
get
(
)
)
)
;
#
if
defined
(
MOZ_ASAN
)
EXPECT_TRUE
(
!
hDll
)
;
EXPECT_TRUE
(
!
:
:
GetModuleHandleW
(
kLeafName
.
get
(
)
)
)
;
#
else
EXPECT_TRUE
(
!
!
hDll
)
;
EXPECT_TRUE
(
!
!
:
:
GetModuleHandleW
(
kLeafName
.
get
(
)
)
)
;
#
endif
}
#
endif
#
define
DLL_BLOCKLIST_ENTRY
(
name
.
.
.
)
{
name
__VA_ARGS__
}
#
define
DLL_BLOCKLIST_STRING_TYPE
const
char
*
#
include
"
mozilla
/
WindowsDllBlocklistLegacyDefs
.
h
"
TEST
(
TestDllBlocklist
BlocklistIntegrity
)
{
nsTArray
<
DLL_BLOCKLIST_STRING_TYPE
>
dupes
;
DECLARE_POINTER_TO_FIRST_DLL_BLOCKLIST_ENTRY
(
pFirst
)
;
DECLARE_POINTER_TO_LAST_DLL_BLOCKLIST_ENTRY
(
pLast
)
;
EXPECT_FALSE
(
pLast
-
>
mName
|
|
pLast
-
>
mMaxVersion
|
|
pLast
-
>
mFlags
)
;
for
(
size_t
i
=
0
;
i
<
mozilla
:
:
ArrayLength
(
gWindowsDllBlocklist
)
-
1
;
+
+
i
)
{
auto
pEntry
=
pFirst
+
i
;
EXPECT_TRUE
(
!
!
pEntry
-
>
mName
)
;
EXPECT_GT
(
strlen
(
pEntry
-
>
mName
)
3U
)
;
for
(
auto
pch
=
pEntry
-
>
mName
;
*
pch
!
=
0
;
+
+
pch
)
{
EXPECT_FALSE
(
*
pch
>
=
'
A
'
&
&
*
pch
<
=
'
Z
'
)
;
}
for
(
auto
&
&
dupe
:
dupes
)
{
EXPECT_NE
(
stricmp
(
dupe
pEntry
-
>
mName
)
0
)
;
}
dupes
.
AppendElement
(
pEntry
-
>
mName
)
;
}
}
TEST
(
TestDllBlocklist
BlockThreadWithLoadLibraryEntryPoint
)
{
#
if
defined
(
NIGHTLY_BUILD
)
using
ThreadProc
=
unsigned
(
__stdcall
*
)
(
void
*
)
;
constexpr
auto
kLeafNameW
=
u
"
TestDllBlocklist_MatchByVersion
.
dll
"
_ns
;
nsString
fullPathW
=
GetFullPath
(
kLeafNameW
)
;
EXPECT_FALSE
(
fullPathW
.
IsEmpty
(
)
)
;
nsAutoHandle
threadW
(
reinterpret_cast
<
HANDLE
>
(
_beginthreadex
(
nullptr
0
reinterpret_cast
<
ThreadProc
>
(
&
:
:
LoadLibraryW
)
(
void
*
)
fullPathW
.
get
(
)
0
nullptr
)
)
)
;
EXPECT_TRUE
(
!
!
threadW
)
;
EXPECT_EQ
(
:
:
WaitForSingleObject
(
threadW
INFINITE
)
WAIT_OBJECT_0
)
;
#
if
!
defined
(
MOZ_ASAN
)
DWORD
exitCode
;
EXPECT_TRUE
(
:
:
GetExitCodeThread
(
threadW
&
exitCode
)
&
&
!
exitCode
)
;
#
endif
EXPECT_TRUE
(
!
:
:
GetModuleHandleW
(
kLeafNameW
.
get
(
)
)
)
;
const
NS_LossyConvertUTF16toASCII
fullPathA
(
fullPathW
)
;
EXPECT_FALSE
(
fullPathA
.
IsEmpty
(
)
)
;
nsAutoHandle
threadA
(
reinterpret_cast
<
HANDLE
>
(
_beginthreadex
(
nullptr
0
reinterpret_cast
<
ThreadProc
>
(
&
:
:
LoadLibraryA
)
(
void
*
)
fullPathA
.
get
(
)
0
nullptr
)
)
)
;
EXPECT_TRUE
(
!
!
threadA
)
;
EXPECT_EQ
(
:
:
WaitForSingleObject
(
threadA
INFINITE
)
WAIT_OBJECT_0
)
;
#
if
!
defined
(
MOZ_ASAN
)
EXPECT_TRUE
(
:
:
GetExitCodeThread
(
threadA
&
exitCode
)
&
&
!
exitCode
)
;
#
endif
EXPECT_TRUE
(
!
:
:
GetModuleHandleW
(
kLeafNameW
.
get
(
)
)
)
;
#
endif
}
