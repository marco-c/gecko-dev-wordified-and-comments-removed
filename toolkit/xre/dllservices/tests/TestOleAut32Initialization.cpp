#
include
"
mozilla
/
WindowsOleAut32Initialization
.
h
"
#
include
<
windows
.
h
>
#
include
<
oleauto
.
h
>
#
pragma
comment
(
lib
"
oleaut32
"
)
#
include
<
cstdio
>
void
TestNoCrash
(
)
{
static
wchar_t
sLongString
[
32768
/
2
+
1
]
;
static_assert
(
sizeof
sLongString
>
32768
"
sLongString
might
not
be
long
enough
to
bypass
the
APP_DATA
cache
"
)
;
for
(
size_t
i
=
0
;
i
<
(
sizeof
sLongString
/
2
)
-
1
;
+
+
i
)
{
sLongString
[
i
]
=
L
'
A
'
;
}
sLongString
[
(
sizeof
sLongString
/
2
)
-
1
]
=
0
;
VARIANTARG
var
;
VariantInit
(
&
var
)
;
var
.
vt
=
VT_BSTR
;
var
.
bstrVal
=
SysAllocString
(
sLongString
)
;
VariantClear
(
&
var
)
;
var
.
vt
=
VT_BSTR
;
VariantClear
(
&
var
)
;
wprintf
(
L
"
TEST
-
PASS
|
TestOleAut32Initialization
|
Did
not
crash
after
double
"
L
"
free
pattern
\
n
"
)
;
}
int
wmain
(
int
argc
wchar_t
*
argv
[
]
)
{
if
(
!
:
:
HeapSetInformation
(
nullptr
HeapEnableTerminationOnCorruption
nullptr
0
)
)
{
wprintf
(
L
"
TEST
-
FAILED
|
TestOleAut32Initialization
|
HeapSetInformation
"
L
"
failed
to
HeapEnableTerminationOnCorruption
\
n
"
)
;
return
1
;
}
if
(
!
mozilla
:
:
WindowsOleAut32Initialization
(
)
)
{
wprintf
(
L
"
TEST
-
FAILED
|
TestOleAut32Initialization
|
"
L
"
WindowsOleAut32Initialization
failed
\
n
"
)
;
return
1
;
}
TestNoCrash
(
)
;
return
0
;
}
