#
include
<
cstdio
>
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
interceptor
/
Arm64
.
h
"
#
define
TEST_FAILED
(
format
.
.
.
)
\
do
{
\
wprintf
(
L
"
TEST
-
FAILED
|
TestArm64Disassembler
|
"
format
__VA_OPT__
(
)
\
__VA_ARGS__
)
;
\
return
false
;
\
}
while
(
0
)
#
define
TEST_PASS
(
format
.
.
.
)
\
do
{
\
wprintf
(
L
"
TEST
-
PASS
|
TestArm64Disassembler
|
"
format
__VA_OPT__
(
)
\
__VA_ARGS__
)
;
\
}
while
(
0
)
using
namespace
mozilla
;
using
namespace
mozilla
:
:
interceptor
:
:
arm64
;
bool
TestCheckForPCRelAdrp
(
)
{
Result
<
LoadOrBranch
PCRelCheckError
>
result
=
CheckForPCRel
(
0x7ff959a7ea80
0xd0dfff11
)
;
if
(
result
.
isErr
(
)
)
{
auto
error
=
result
.
unwrapErr
(
)
;
TEST_FAILED
(
"
Failed
to
recognize
adrp
as
a
PC
-
relative
instruction
with
a
"
"
decoder
got
PCRelCheckError
%
d
.
\
n
"
error
)
;
}
auto
loadOrBranch
=
result
.
unwrap
(
)
;
if
(
loadOrBranch
.
mType
!
=
LoadOrBranch
:
:
Type
:
:
Load
)
{
TEST_FAILED
(
"
Computed
an
incorrect
LoadOrBranch
:
:
Type
for
adrp
got
%
d
.
\
n
"
loadOrBranch
.
mType
)
;
}
if
(
loadOrBranch
.
mDestReg
!
=
17
)
{
TEST_FAILED
(
"
Computed
an
incorrect
destination
register
for
adrp
got
%
d
.
\
n
"
loadOrBranch
.
mDestReg
)
;
}
if
(
loadOrBranch
.
mAbsAddress
!
=
0x7ff919a60000
)
{
TEST_FAILED
(
"
Computed
a
wrong
absolute
address
for
adrp
got
address
%
p
.
\
n
"
loadOrBranch
.
mAbsAddress
)
;
}
TEST_PASS
(
"
Properly
recognized
adrp
as
a
PC
-
relative
load
instruction
with
a
"
"
working
decoder
.
\
n
"
)
;
return
true
;
}
bool
TestCheckForPCRelAdr
(
)
{
Result
<
LoadOrBranch
PCRelCheckError
>
result
=
CheckForPCRel
(
0x7ff959a7ea80
0x50dfff11
)
;
if
(
!
result
.
isErr
(
)
)
{
TEST_FAILED
(
"
Unexpectedly
recognized
adr
as
a
PC
-
relative
instruction
with
a
"
"
decoder
.
If
you
have
implemented
a
decoder
for
this
instruction
"
"
please
update
TestArm64Disassembler
.
cpp
.
\
n
"
)
;
}
auto
error
=
result
.
unwrapErr
(
)
;
if
(
error
!
=
PCRelCheckError
:
:
NoDecoderAvailable
)
{
TEST_FAILED
(
"
Failed
to
recognize
adr
as
a
PC
-
relative
instruction
got
"
"
PCRelCheckError
%
d
.
\
n
"
error
)
;
}
TEST_PASS
(
"
Properly
recognized
adr
as
a
PC
-
relative
instruction
without
a
"
"
decoder
.
\
n
"
)
;
return
true
;
}
int
wmain
(
int
argc
wchar_t
*
argv
[
]
)
{
if
(
!
TestCheckForPCRelAdrp
(
)
|
|
!
TestCheckForPCRelAdr
(
)
)
{
return
-
1
;
}
return
0
;
}
