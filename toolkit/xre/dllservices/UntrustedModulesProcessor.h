#
ifndef
mozilla_UntrustedModulesProcessor_h
#
define
mozilla_UntrustedModulesProcessor_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
glue
/
WindowsDllServices
.
h
"
#
include
"
mozilla
/
LazyIdleThread
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UntrustedModulesData
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
class
ModuleEvaluator
;
using
UntrustedModulesPromise
=
MozPromise
<
Maybe
<
UntrustedModulesData
>
nsresult
true
>
;
using
ModulesTrustPromise
=
MozPromise
<
ModulesMapResult
nsresult
true
>
;
using
GetModulesTrustIpcPromise
=
MozPromise
<
Maybe
<
ModulesMapResult
>
ipc
:
:
ResponseRejectReason
true
>
;
class
UntrustedModulesProcessor
final
:
public
nsIObserver
{
public
:
static
RefPtr
<
UntrustedModulesProcessor
>
Create
(
bool
aIsReadyForBackgroundProcessing
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
bool
IsReadyForBackgroundProcessing
(
)
const
;
void
Disable
(
)
;
void
Enqueue
(
glue
:
:
EnhancedModuleLoadInfo
&
&
aModLoadInfo
)
;
void
Enqueue
(
ModuleLoadInfoVec
&
&
aEvents
)
;
RefPtr
<
UntrustedModulesPromise
>
GetProcessedData
(
)
;
RefPtr
<
ModulesTrustPromise
>
GetModulesTrust
(
ModulePaths
&
&
aModPaths
bool
aRunAtNormalPriority
)
;
UntrustedModulesProcessor
(
const
UntrustedModulesProcessor
&
)
=
delete
;
UntrustedModulesProcessor
(
UntrustedModulesProcessor
&
&
)
=
delete
;
UntrustedModulesProcessor
&
operator
=
(
const
UntrustedModulesProcessor
&
)
=
delete
;
UntrustedModulesProcessor
&
operator
=
(
UntrustedModulesProcessor
&
&
)
=
delete
;
private
:
~
UntrustedModulesProcessor
(
)
=
default
;
explicit
UntrustedModulesProcessor
(
bool
aIsReadyForBackgroundProcessing
)
;
static
bool
IsSupportedProcessType
(
)
;
void
AddObservers
(
)
;
void
RemoveObservers
(
)
;
void
ScheduleNonEmptyQueueProcessing
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
CancelScheduledProcessing
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
DispatchBackgroundProcessing
(
)
;
void
BackgroundProcessModuleLoadQueue
(
)
;
void
ProcessModuleLoadQueue
(
)
;
using
LoadsVec
=
Vector
<
glue
:
:
EnhancedModuleLoadInfo
>
;
LoadsVec
ExtractLoadingEventsToProcess
(
size_t
aMaxLength
)
;
class
ModulesMapResultWithLoads
final
{
public
:
ModulesMapResultWithLoads
(
Maybe
<
ModulesMapResult
>
&
&
aModMapResult
LoadsVec
&
&
aLoads
)
:
mModMapResult
(
std
:
:
move
(
aModMapResult
)
)
mLoads
(
std
:
:
move
(
aLoads
)
)
{
}
Maybe
<
ModulesMapResult
>
mModMapResult
;
LoadsVec
mLoads
;
}
;
using
GetModulesTrustPromise
=
MozPromise
<
Maybe
<
ModulesMapResultWithLoads
>
nsresult
true
>
;
enum
class
Priority
{
Default
Background
}
;
RefPtr
<
GetModulesTrustPromise
>
ProcessModuleLoadQueueChildProcess
(
Priority
aPriority
)
;
void
BackgroundProcessModuleLoadQueueChildProcess
(
)
;
void
AssertRunningOnLazyIdleThread
(
)
;
RefPtr
<
UntrustedModulesPromise
>
GetProcessedDataInternal
(
)
;
RefPtr
<
UntrustedModulesPromise
>
GetProcessedDataInternalChildProcess
(
)
;
RefPtr
<
ModulesTrustPromise
>
GetModulesTrustInternal
(
ModulePaths
&
&
aModPaths
bool
aRunAtNormalPriority
)
;
RefPtr
<
ModulesTrustPromise
>
GetModulesTrustInternal
(
ModulePaths
&
&
aModPaths
)
;
RefPtr
<
ModuleRecord
>
GetOrAddModuleRecord
(
const
ModuleEvaluator
&
aModEval
const
nsAString
&
aResolvedNtPath
)
;
RefPtr
<
ModuleRecord
>
GetModuleRecord
(
const
ModulesMap
&
aModules
const
glue
:
:
EnhancedModuleLoadInfo
&
aModuleLoadInfo
)
;
RefPtr
<
GetModulesTrustIpcPromise
>
SendGetModulesTrust
(
ModulePaths
&
&
aModules
Priority
aPriority
)
;
void
CompleteProcessing
(
ModulesMapResultWithLoads
&
&
aModulesAndLoads
)
;
RefPtr
<
UntrustedModulesPromise
>
GetAllProcessedData
(
const
char
*
aSource
)
;
private
:
RefPtr
<
LazyIdleThread
>
mThread
;
Mutex
mUnprocessedMutex
;
Mutex
mModuleCacheMutex
;
Vector
<
glue
:
:
EnhancedModuleLoadInfo
>
mUnprocessedModuleLoads
;
nsCOMPtr
<
nsIRunnable
>
mIdleRunnable
;
UntrustedModulesData
mProcessedModuleLoads
;
enum
class
Status
{
StartingUp
Allowed
ShuttingDown
}
;
Atomic
<
Status
>
mStatus
;
ModulesMap
mGlobalModuleCache
;
}
;
}
#
endif
