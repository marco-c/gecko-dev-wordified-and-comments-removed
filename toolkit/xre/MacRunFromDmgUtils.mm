#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
include
<
CoreServices
/
CoreServices
.
h
>
#
include
<
IOKit
/
IOKitLib
.
h
>
#
include
<
string
.
h
>
#
include
<
sys
/
mount
.
h
>
#
include
<
sys
/
param
.
h
>
#
include
"
MacRunFromDmgUtils
.
h
"
#
include
"
nsCocoaFeatures
.
h
"
#
include
"
nsCommandLine
.
h
"
#
include
"
nsCommandLineServiceMac
.
h
"
#
include
"
nsILocalFileMac
.
h
"
#
include
"
nsIMacDockSupport
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
MacRunFromDmgUtils
{
bool
IsAppRunningFromDmg
(
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
const
char
*
path
=
[
[
[
NSBundle
mainBundle
]
bundlePath
]
fileSystemRepresentation
]
;
struct
statfs
statfsBuf
;
if
(
statfs
(
path
&
statfsBuf
)
!
=
0
)
{
return
false
;
}
if
(
!
(
statfsBuf
.
f_flags
&
MNT_RDONLY
)
)
{
return
false
;
}
const
char
devDirPath
[
]
=
"
/
dev
/
"
;
const
int
devDirPathLength
=
strlen
(
devDirPath
)
;
if
(
strncmp
(
statfsBuf
.
f_mntfromname
devDirPath
devDirPathLength
)
!
=
0
)
{
return
false
;
}
const
char
*
bsdDeviceName
=
statfsBuf
.
f_mntfromname
+
devDirPathLength
;
CFMutableDictionaryRef
serviceDict
=
IOBSDNameMatching
(
kIOMasterPortDefault
0
bsdDeviceName
)
;
if
(
!
serviceDict
)
{
return
false
;
}
io_service_t
media
=
IOServiceGetMatchingService
(
kIOMasterPortDefault
serviceDict
)
;
if
(
!
media
|
|
!
IOObjectConformsTo
(
media
"
IOMedia
"
)
)
{
return
false
;
}
io_service_t
imageDrive
=
IO_OBJECT_NULL
;
io_iterator_t
iter
;
if
(
IORegistryEntryCreateIterator
(
media
kIOServicePlane
kIORegistryIterateRecursively
|
kIORegistryIterateParents
&
iter
)
!
=
KERN_SUCCESS
)
{
IOObjectRelease
(
media
)
;
return
false
;
}
const
char
*
imageClass
=
nsCocoaFeatures
:
:
macOSVersionMajor
(
)
>
=
12
?
"
AppleDiskImageDevice
"
:
"
IOHDIXHDDrive
"
;
for
(
imageDrive
=
media
;
imageDrive
;
imageDrive
=
IOIteratorNext
(
iter
)
)
{
if
(
IOObjectConformsTo
(
imageDrive
imageClass
)
)
{
break
;
}
IOObjectRelease
(
imageDrive
)
;
}
IOObjectRelease
(
iter
)
;
if
(
imageDrive
)
{
IOObjectRelease
(
imageDrive
)
;
return
true
;
}
return
false
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
false
)
;
}
}
}
