#
include
"
nsNativeAppSupportBase
.
h
"
#
include
"
nsNativeAppSupportWin
.
h
"
#
include
<
windows
.
h
>
#
include
<
fcntl
.
h
>
using
namespace
mozilla
;
class
nsNativeAppSupportWin
:
public
nsNativeAppSupportBase
{
public
:
void
CheckConsole
(
)
;
private
:
~
nsNativeAppSupportWin
(
)
{
}
}
;
void
UseParentConsole
(
)
{
if
(
AttachConsole
(
ATTACH_PARENT_PROCESS
)
)
{
if
(
_fileno
(
stdout
)
=
=
-
2
)
{
freopen
(
"
CONOUT
"
"
w
"
stdout
)
;
}
if
(
_fileno
(
stderr
)
=
=
-
2
)
{
freopen
(
"
CONOUT
"
"
w
"
stderr
)
;
}
if
(
_fileno
(
stdin
)
=
=
-
2
)
{
freopen
(
"
CONIN
"
"
r
"
stdin
)
;
}
}
}
void
nsNativeAppSupportWin
:
:
CheckConsole
(
)
{
for
(
int
i
=
1
;
i
<
gArgc
;
+
+
i
)
{
if
(
strcmp
(
"
-
console
"
gArgv
[
i
]
)
=
=
0
|
|
strcmp
(
"
-
-
console
"
gArgv
[
i
]
)
=
=
0
|
|
strcmp
(
"
/
console
"
gArgv
[
i
]
)
=
=
0
)
{
if
(
AllocConsole
(
)
)
{
if
(
_fileno
(
stdout
)
=
=
-
2
)
{
freopen
(
"
CONOUT
"
"
w
"
stdout
)
;
}
if
(
_fileno
(
stderr
)
=
=
-
2
)
{
freopen
(
"
CONOUT
"
"
w
"
stderr
)
;
}
if
(
_fileno
(
stdin
)
=
=
-
2
)
{
freopen
(
"
CONIN
"
"
r
"
stdin
)
;
}
}
}
else
if
(
strcmp
(
"
-
attach
-
console
"
gArgv
[
i
]
)
=
=
0
|
|
strcmp
(
"
-
-
attach
-
console
"
gArgv
[
i
]
)
=
=
0
|
|
strcmp
(
"
/
attach
-
console
"
gArgv
[
i
]
)
=
=
0
)
{
UseParentConsole
(
)
;
}
}
}
nsresult
NS_CreateNativeAppSupport
(
nsINativeAppSupport
*
*
aResult
)
{
nsNativeAppSupportWin
*
pNative
=
new
nsNativeAppSupportWin
;
if
(
!
pNative
)
return
NS_ERROR_OUT_OF_MEMORY
;
pNative
-
>
CheckConsole
(
)
;
*
aResult
=
pNative
;
NS_ADDREF
(
*
aResult
)
;
return
NS_OK
;
}
