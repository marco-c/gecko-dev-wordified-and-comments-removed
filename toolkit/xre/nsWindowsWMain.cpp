#
ifndef
nsWindowsWMain_cpp
#
define
nsWindowsWMain_cpp
#
ifndef
XP_WIN
#
error
This
file
only
makes
sense
on
Windows
.
#
endif
#
include
"
mozilla
/
Char16
.
h
"
#
include
"
nsUTF8Utils
.
h
"
#
include
<
windows
.
h
>
#
ifdef
__MINGW32__
#
include
<
shellapi
.
h
>
int
wmain
(
int
argc
WCHAR
*
*
argv
)
;
int
main
(
int
argc
char
*
*
argv
)
{
LPWSTR
commandLine
=
GetCommandLineW
(
)
;
int
argcw
=
0
;
LPWSTR
*
argvw
=
CommandLineToArgvW
(
commandLine
&
argcw
)
;
if
(
!
argvw
)
return
127
;
int
result
=
wmain
(
argcw
argvw
)
;
LocalFree
(
argvw
)
;
return
result
;
}
#
endif
#
define
main
NS_internal_main
#
ifndef
XRE_WANT_ENVIRON
int
main
(
int
argc
char
*
*
argv
)
;
#
else
int
main
(
int
argc
char
*
*
argv
char
*
*
envp
)
;
#
endif
static
void
SanitizeEnvironmentVariables
(
)
{
DWORD
bufferSize
=
GetEnvironmentVariableW
(
L
"
PATH
"
nullptr
0
)
;
if
(
bufferSize
)
{
wchar_t
*
originalPath
=
new
wchar_t
[
bufferSize
]
;
if
(
bufferSize
-
1
=
=
GetEnvironmentVariableW
(
L
"
PATH
"
originalPath
bufferSize
)
)
{
bufferSize
=
ExpandEnvironmentStringsW
(
originalPath
nullptr
0
)
;
if
(
bufferSize
&
&
bufferSize
<
32768
)
{
wchar_t
*
newPath
=
new
wchar_t
[
bufferSize
]
;
if
(
ExpandEnvironmentStringsW
(
originalPath
newPath
bufferSize
)
)
{
SetEnvironmentVariableW
(
L
"
PATH
"
newPath
)
;
}
delete
[
]
newPath
;
}
}
delete
[
]
originalPath
;
}
}
static
char
*
AllocConvertUTF16toUTF8
(
char16ptr_t
arg
)
{
size_t
len
=
wcslen
(
arg
)
;
size_t
dstLen
=
len
*
3
+
1
;
char
*
s
=
new
char
[
dstLen
+
1
]
;
if
(
!
s
)
return
nullptr
;
int
written
=
:
:
WideCharToMultiByte
(
CP_UTF8
0
arg
len
s
dstLen
nullptr
nullptr
)
;
s
[
written
]
=
0
;
return
s
;
}
static
void
FreeAllocStrings
(
int
argc
char
*
*
argv
)
{
while
(
argc
)
{
-
-
argc
;
delete
[
]
argv
[
argc
]
;
}
delete
[
]
argv
;
}
void
RemovePrefetchArguments
(
int
&
argc
WCHAR
*
*
argv
)
{
size_t
prefetchArgsCount
[
[
maybe_unused
]
]
=
0
;
for
(
int
i
=
0
;
i
<
argc
;
+
+
i
)
{
constexpr
const
wchar_t
prefix
[
]
=
L
"
/
prefetch
:
"
;
auto
const
cmp
=
wcsncmp
(
argv
[
i
]
prefix
ARRAYSIZE
(
prefix
)
-
1
)
;
if
(
cmp
=
=
0
)
{
std
:
:
copy
(
argv
+
i
+
1
argv
+
argc
argv
+
i
)
;
-
-
argc
;
-
-
i
;
prefetchArgsCount
+
+
;
}
}
MOZ_ASSERT
(
prefetchArgsCount
<
=
1
"
at
most
one
/
prefetch
:
#
#
argument
should
be
present
"
)
;
}
int
wmain
(
int
argc
WCHAR
*
*
argv
)
{
SanitizeEnvironmentVariables
(
)
;
SetDllDirectoryW
(
L
"
"
)
;
RemovePrefetchArguments
(
argc
argv
)
;
#
if
defined
(
mozilla_LauncherProcessWin_h
)
mozilla
:
:
Maybe
<
int
>
launcherResult
=
mozilla
:
:
LauncherMain
(
argc
argv
sAppData
)
;
if
(
launcherResult
)
{
return
launcherResult
.
value
(
)
;
}
#
endif
char
*
*
argvConverted
=
new
char
*
[
argc
+
1
]
;
if
(
!
argvConverted
)
return
127
;
for
(
int
i
=
0
;
i
<
argc
;
+
+
i
)
{
argvConverted
[
i
]
=
AllocConvertUTF16toUTF8
(
argv
[
i
]
)
;
if
(
!
argvConverted
[
i
]
)
{
return
127
;
}
}
argvConverted
[
argc
]
=
nullptr
;
char
*
*
deleteUs
=
new
char
*
[
argc
+
1
]
;
if
(
!
deleteUs
)
{
FreeAllocStrings
(
argc
argvConverted
)
;
return
127
;
}
for
(
int
i
=
0
;
i
<
argc
;
i
+
+
)
deleteUs
[
i
]
=
argvConverted
[
i
]
;
#
ifndef
XRE_WANT_ENVIRON
int
result
=
main
(
argc
argvConverted
)
;
#
else
getenv
(
"
PATH
"
)
;
int
result
=
main
(
argc
argvConverted
_environ
)
;
#
endif
delete
[
]
argvConverted
;
FreeAllocStrings
(
argc
deleteUs
)
;
return
result
;
}
#
endif
