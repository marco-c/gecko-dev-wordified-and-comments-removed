#
include
"
mozilla
/
GeckoArgs
.
h
"
namespace
mozilla
:
:
geckoargs
{
template
<
>
Maybe
<
UniqueFileHandle
>
CommandLineArg
<
UniqueFileHandle
>
:
:
GetCommon
(
const
char
*
aMatch
int
&
aArgc
char
*
*
aArgv
const
CheckArgFlag
aFlags
)
{
if
(
Maybe
<
uint32_t
>
arg
=
CommandLineArg
<
uint32_t
>
:
:
GetCommon
(
aMatch
aArgc
aArgv
aFlags
)
)
{
#
ifdef
XP_WIN
return
Some
(
UniqueFileHandle
{
reinterpret_cast
<
HANDLE
>
(
static_cast
<
uintptr_t
>
(
static_cast
<
int32_t
>
(
*
arg
)
)
)
}
)
;
#
else
MOZ_CRASH
(
"
not
implemented
yet
"
)
;
#
endif
}
return
Nothing
(
)
;
}
template
<
>
void
CommandLineArg
<
UniqueFileHandle
>
:
:
PutCommon
(
const
char
*
aName
UniqueFileHandle
aValue
ChildProcessArgs
&
aArgs
)
{
if
(
aValue
)
{
#
ifdef
XP_WIN
HANDLE
value
=
aValue
.
get
(
)
;
CommandLineArg
<
uint32_t
>
:
:
PutCommon
(
aName
static_cast
<
uint32_t
>
(
reinterpret_cast
<
uintptr_t
>
(
value
)
)
aArgs
)
;
#
else
MOZ_CRASH
(
"
not
implemented
yet
"
)
;
#
endif
aArgs
.
mFiles
.
push_back
(
std
:
:
move
(
aValue
)
)
;
}
}
}
