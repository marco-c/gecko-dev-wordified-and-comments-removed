"
use
strict
"
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
CredentialChooserService
"
"
mozilla
.
org
/
browser
/
credentialchooserservice
;
1
"
"
nsICredentialChooserService
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
sys
.
mjs
"
}
)
;
const
TEST_URL
=
"
https
:
/
/
www
.
example
.
com
/
"
;
const
TEST_CREDENTIAL_URL
=
"
https
:
/
/
www
.
example
.
net
/
"
;
const
TEST_IMAGE_DATA
=
"
data
:
image
/
svg
+
xml
;
base64
PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIiB2aWV3Qm94PSIwIDAgMzIgMzIiPgogIDxjaXJjbGUgZmlsbD0iY29udGV4dC1maWxsIiBjeD0iMTYiIGN5PSIxNiIgcj0iMTYiLz4KPC9zdmc
+
"
;
add_task
(
async
function
test_single_credential_dialog
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credential
=
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
TEST_CREDENTIAL_URL
}
;
let
credentialChoice
=
new
Promise
(
resolve
=
>
{
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
[
credential
]
{
notify
:
resolve
}
)
;
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
inputs
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
"
)
;
is
(
inputs
.
length
1
"
One
account
expected
"
)
;
let
label
=
inputs
[
0
]
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
label
-
stack
"
)
[
0
]
;
ok
(
label
.
textContent
.
includes
(
"
www
.
example
.
net
"
)
"
Label
includes
the
credential
'
s
origin
without
UI
hints
"
)
;
let
title
=
document
.
getElementById
(
"
credential
-
chooser
-
header
-
text
"
)
;
ok
(
title
.
textContent
.
includes
(
"
www
.
example
.
com
"
)
"
Popup
title
includes
the
visited
hostname
"
)
;
let
icon
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
icon
"
)
[
0
]
;
is
(
icon
.
src
"
chrome
:
/
/
global
/
skin
/
icons
/
defaultFavicon
.
svg
"
"
The
icon
matches
the
default
favicon
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementsByClassName
(
"
popup
-
notification
-
primary
-
button
"
)
[
0
]
{
}
)
;
await
popupHiding
;
let
choice
=
await
credentialChoice
;
is
(
choice
"
foo
"
"
must
have
the
correct
credential
chosen
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_dialog_cancel
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credential
=
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
TEST_CREDENTIAL_URL
}
;
let
credentialChoice
=
new
Promise
(
resolve
=
>
{
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
[
credential
]
{
notify
:
resolve
}
)
;
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementsByClassName
(
"
popup
-
notification
-
secondary
-
button
"
)
[
0
]
{
}
)
;
await
popupHiding
;
let
choice
=
await
credentialChoice
;
is
(
choice
null
"
Cancel
should
give
a
null
choice
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_dialog_dismiss
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credential
=
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
TEST_CREDENTIAL_URL
}
;
let
state
=
"
pending
"
;
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
[
credential
]
{
notify
:
_id
=
>
{
state
=
"
fulfilled
"
;
}
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
popupHiding
;
is
(
state
"
pending
"
"
Escape
should
not
call
the
nofity
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_three_credential_dialog
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credentials
=
[
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
"
https
:
/
/
www
.
example
.
net
/
"
}
{
id
:
"
bar
"
type
:
"
identity
"
origin
:
"
https
:
/
/
example
.
net
/
"
}
{
id
:
"
baz
"
type
:
"
identity
"
origin
:
"
https
:
/
/
example
.
com
/
"
}
]
;
let
credentialChoice
=
new
Promise
(
resolve
=
>
{
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
credentials
{
notify
:
resolve
}
)
;
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
inputs
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
"
)
;
is
(
inputs
.
length
3
"
Three
accounts
expected
"
)
;
let
title
=
document
.
getElementById
(
"
credential
-
chooser
-
header
-
text
"
)
;
ok
(
title
.
textContent
.
includes
(
"
www
.
example
.
com
"
)
"
Popup
title
includes
the
visited
hostname
"
)
;
const
LABELS
=
[
"
www
.
example
.
net
"
"
example
.
net
"
"
example
.
com
"
]
;
for
(
let
index
=
0
;
index
<
inputs
.
length
;
index
+
+
)
{
let
input
=
inputs
[
index
]
;
let
label
=
input
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
label
-
stack
"
)
[
0
]
;
ok
(
label
.
textContent
.
includes
(
LABELS
[
index
]
)
"
Label
includes
the
credential
'
s
origin
without
UI
hints
"
)
;
let
radio
=
input
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
radio
"
)
[
0
]
;
is
(
radio
.
checked
index
=
=
0
"
Initial
radio
state
correct
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
input
{
}
)
;
ok
(
radio
.
checked
"
Radio
state
selected
after
click
"
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementsByClassName
(
"
popup
-
notification
-
primary
-
button
"
)
[
0
]
{
}
)
;
await
popupHiding
;
let
choice
=
await
credentialChoice
;
is
(
choice
"
baz
"
"
must
have
the
correct
credential
chosen
(
the
last
of
the
list
)
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_uihint_nonexpiring_credential_dialog
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credential
=
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
TEST_CREDENTIAL_URL
uiHints
:
{
iconURL
:
TEST_IMAGE_DATA
name
:
"
user
readable
"
}
}
;
let
credentialChoice
=
new
Promise
(
resolve
=
>
{
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
[
credential
]
{
notify
:
resolve
}
)
;
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
inputs
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
"
)
;
let
title
=
document
.
getElementById
(
"
credential
-
chooser
-
header
-
text
"
)
;
ok
(
title
.
textContent
.
includes
(
"
www
.
example
.
com
"
)
"
Popup
title
includes
the
visited
hostname
"
)
;
is
(
inputs
.
length
1
"
One
account
expected
"
)
;
let
label
=
inputs
[
0
]
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
label
-
stack
"
)
[
0
]
;
ok
(
label
.
textContent
.
includes
(
"
www
.
example
.
net
"
)
"
Label
still
includes
the
credential
'
s
origin
with
UI
hints
"
)
;
ok
(
label
.
textContent
.
includes
(
"
user
readable
"
)
"
Label
includes
the
credential
'
s
name
with
UI
hints
"
)
;
let
icon
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
icon
"
)
[
0
]
;
is
(
icon
.
src
TEST_IMAGE_DATA
"
The
icon
matches
the
custom
.
svg
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementsByClassName
(
"
popup
-
notification
-
primary
-
button
"
)
[
0
]
{
}
)
;
await
popupHiding
;
let
choice
=
await
credentialChoice
;
is
(
choice
"
foo
"
"
must
have
the
correct
credential
chosen
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_uihint_nonexpiring_credential_dialog
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credential
=
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
TEST_CREDENTIAL_URL
uiHints
:
{
iconURL
:
TEST_IMAGE_DATA
name
:
"
user
readable
"
expiresAfter
:
1000
}
}
;
let
credentialChoice
=
new
Promise
(
resolve
=
>
{
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
[
credential
]
{
notify
:
resolve
}
)
;
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
inputs
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
"
)
;
let
title
=
document
.
getElementById
(
"
credential
-
chooser
-
header
-
text
"
)
;
ok
(
title
.
textContent
.
includes
(
"
www
.
example
.
com
"
)
"
Popup
title
includes
the
visited
hostname
"
)
;
is
(
inputs
.
length
1
"
One
account
expected
"
)
;
let
label
=
inputs
[
0
]
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
label
-
stack
"
)
[
0
]
;
ok
(
label
.
textContent
.
includes
(
"
www
.
example
.
net
"
)
"
Label
still
includes
the
credential
'
s
origin
with
UI
hints
"
)
;
ok
(
label
.
textContent
.
includes
(
"
user
readable
"
)
"
Label
includes
the
credential
'
s
name
with
UI
hints
"
)
;
let
icon
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
icon
"
)
[
0
]
;
is
(
icon
.
src
TEST_IMAGE_DATA
"
The
icon
matches
the
custom
.
svg
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementsByClassName
(
"
popup
-
notification
-
primary
-
button
"
)
[
0
]
{
}
)
;
await
popupHiding
;
let
choice
=
await
credentialChoice
;
is
(
choice
"
foo
"
"
must
have
the
correct
credential
chosen
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_uihint_not_yet_expiring_credential_dialog
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credential
=
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
TEST_CREDENTIAL_URL
uiHints
:
{
iconURL
:
TEST_IMAGE_DATA
name
:
"
user
readable
"
}
}
;
let
credentialChoice
=
new
Promise
(
resolve
=
>
{
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
[
credential
]
{
notify
:
resolve
}
)
;
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
inputs
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
"
)
;
let
title
=
document
.
getElementById
(
"
credential
-
chooser
-
header
-
text
"
)
;
ok
(
title
.
textContent
.
includes
(
"
www
.
example
.
com
"
)
"
Popup
title
includes
the
visited
hostname
"
)
;
is
(
inputs
.
length
1
"
One
account
expected
"
)
;
let
label
=
inputs
[
0
]
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
label
-
stack
"
)
[
0
]
;
ok
(
label
.
textContent
.
includes
(
"
www
.
example
.
net
"
)
"
Label
still
includes
the
credential
'
s
origin
with
UI
hints
"
)
;
ok
(
label
.
textContent
.
includes
(
"
user
readable
"
)
"
Label
includes
the
credential
'
s
name
with
UI
hints
"
)
;
let
icon
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
icon
"
)
[
0
]
;
is
(
icon
.
src
TEST_IMAGE_DATA
"
The
icon
matches
the
custom
.
svg
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementsByClassName
(
"
popup
-
notification
-
primary
-
button
"
)
[
0
]
{
}
)
;
await
popupHiding
;
let
choice
=
await
credentialChoice
;
is
(
choice
"
foo
"
"
must
have
the
correct
credential
chosen
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_uihint_expired_credential_dialog
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
credential
=
{
id
:
"
foo
"
type
:
"
identity
"
origin
:
TEST_CREDENTIAL_URL
uiHints
:
{
iconURL
:
TEST_IMAGE_DATA
name
:
"
user
readable
"
expiresAfter
:
0
}
}
;
let
credentialChoice
=
new
Promise
(
resolve
=
>
{
CredentialChooserService
.
showCredentialChooser
(
tab
.
linkedBrowser
.
browsingContext
[
credential
]
{
notify
:
resolve
}
)
;
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
inputs
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
"
)
;
let
title
=
document
.
getElementById
(
"
credential
-
chooser
-
header
-
text
"
)
;
ok
(
title
.
textContent
.
includes
(
"
www
.
example
.
com
"
)
"
Popup
title
includes
the
visited
hostname
"
)
;
is
(
inputs
.
length
1
"
One
account
expected
"
)
;
let
label
=
inputs
[
0
]
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
label
-
stack
"
)
[
0
]
;
ok
(
label
.
textContent
.
includes
(
"
www
.
example
.
net
"
)
"
Label
still
includes
the
credential
'
s
origin
"
)
;
ok
(
!
label
.
textContent
.
includes
(
"
user
readable
"
)
"
Label
does
not
include
the
credential
'
s
name
without
UI
hints
"
)
;
let
icon
=
document
.
getElementById
(
"
credential
-
chooser
-
entry
"
)
.
getElementsByClassName
(
"
identity
-
credential
-
list
-
item
-
icon
"
)
[
0
]
;
Assert
.
notEqual
(
icon
.
src
TEST_IMAGE_DATA
"
We
don
'
t
use
the
hint
icon
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementsByClassName
(
"
popup
-
notification
-
primary
-
button
"
)
[
0
]
{
}
)
;
await
popupHiding
;
let
choice
=
await
credentialChoice
;
is
(
choice
"
foo
"
"
must
have
the
correct
credential
chosen
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
