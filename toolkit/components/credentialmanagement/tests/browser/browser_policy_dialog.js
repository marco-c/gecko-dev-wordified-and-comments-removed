"
use
strict
"
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
IdentityCredentialPromptService
"
"
mozilla
.
org
/
browser
/
identitycredentialpromptservice
;
1
"
"
nsIIdentityCredentialPromptService
"
)
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
"
;
add_task
(
async
function
test_policy_dialog_empty
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
prompt
=
IdentityCredentialPromptService
.
showPolicyPrompt
(
tab
.
linkedBrowser
.
browsingContext
{
configURL
:
"
https
:
/
/
idp
.
example
/
"
clientId
:
"
123
"
}
{
accounts_endpoint
:
"
"
client_metadata_endpoint
:
"
"
id_assertion_endpoint
:
"
"
}
{
}
)
;
let
value
=
await
prompt
;
is
(
value
true
"
Automatically
accept
the
missing
policies
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_policy_dialog
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
prompt
=
IdentityCredentialPromptService
.
showPolicyPrompt
(
tab
.
linkedBrowser
.
browsingContext
{
configURL
:
"
https
:
/
/
idp
.
example
/
"
clientId
:
"
123
"
}
{
accounts_endpoint
:
"
"
client_metadata_endpoint
:
"
"
id_assertion_endpoint
:
"
"
branding
:
{
background_color
:
"
0x6200ee
"
color
:
"
0xffffff
"
icons
:
[
{
size
:
256
url
:
"
https
:
/
/
example
.
net
/
browser
/
toolkit
/
components
/
credentialmanagement
/
tests
/
browser
/
custom
.
svg
"
}
]
}
}
{
privacy_policy_url
:
"
https
:
/
/
idp
.
example
/
privacy
-
policy
.
html
"
terms_of_service_url
:
"
https
:
/
/
idp
.
example
/
terms
-
of
-
service
.
html
"
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
document
=
tab
.
linkedBrowser
.
browsingContext
.
topChromeWindow
.
document
;
let
description
=
document
.
getElementById
(
"
identity
-
credential
-
policy
-
explanation
"
)
;
ok
(
description
.
textContent
.
includes
(
"
idp
.
example
"
)
"
IDP
domain
in
the
policy
prompt
text
"
)
;
ok
(
description
.
textContent
.
includes
(
"
example
.
com
"
)
"
RP
domain
in
the
policy
prompt
text
"
)
;
ok
(
description
.
textContent
.
includes
(
"
Privacy
Policy
"
)
"
Link
to
the
privacy
policy
in
the
policy
prompt
text
"
)
;
ok
(
description
.
textContent
.
includes
(
"
Terms
of
Service
"
)
"
Link
to
the
ToS
in
the
policy
prompt
text
"
)
;
let
title
=
document
.
getElementById
(
"
identity
-
credential
-
header
-
text
"
)
;
ok
(
title
.
textContent
.
includes
(
"
idp
.
example
"
)
"
IDP
domain
in
the
policy
prompt
header
"
)
;
const
headerIcon
=
document
.
getElementsByClassName
(
"
identity
-
credential
-
header
-
icon
"
)
[
0
]
;
ok
(
BrowserTestUtils
.
is_visible
(
headerIcon
)
"
Header
Icon
is
showing
"
)
;
ok
(
headerIcon
.
src
.
startsWith
(
"
data
:
image
/
svg
+
xml
;
base64
PCEtLSBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljCiAgIC0gTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcwogICAtIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uIC0tPgo8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDE2IDE2IiB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIGZpbGw9ImNvbnRleHQtZmlsbCIgZmlsbC1vcGFjaXR5PSJjb250ZXh0LWZpbGwtb3BhY2l0eSI
+
CiAgPHBhdGggZD0iTS42MjUgMTNhLjYyNS42MjUgMCAwIDEgMC0xLjI1bDMuMjUgMEE0Ljg4IDQuODggMCAwIDAgOC43NSA2Ljg3NWwwLS4yNWEuNjI1LjYyNSAwIDAgMSAxLjI1IDBsMCAuMjVBNi4xMzIgNi4xMzIgMCAwIDEgMy44NzUgMTNsLTMuMjUgMHoiLz
"
)
"
The
header
icon
matches
the
icon
resource
from
manifest
"
)
;
document
.
getElementsByClassName
(
"
popup
-
notification
-
primary
-
button
"
)
[
0
]
.
click
(
)
;
let
value
=
await
prompt
;
is
(
value
true
"
User
clicking
accept
resolves
with
true
"
)
;
await
popupHiding
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_policy_reject
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
prompt
=
IdentityCredentialPromptService
.
showPolicyPrompt
(
tab
.
linkedBrowser
.
browsingContext
{
configURL
:
"
https
:
/
/
idp
.
example
/
"
clientId
:
"
123
"
}
{
accounts_endpoint
:
"
"
client_metadata_endpoint
:
"
"
id_assertion_endpoint
:
"
"
}
{
privacy_policy_url
:
"
https
:
/
/
idp
.
example
/
privacy
-
policy
.
html
"
terms_of_service_url
:
"
https
:
/
/
idp
.
example
/
terms
-
of
-
service
.
html
"
}
)
;
await
popupShown
;
let
popupHiding
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphiding
"
)
;
let
document
=
tab
.
linkedBrowser
.
browsingContext
.
topChromeWindow
.
document
;
document
.
getElementsByClassName
(
"
popup
-
notification
-
secondary
-
button
"
)
[
0
]
.
click
(
)
;
let
value
=
await
prompt
;
is
(
value
false
"
User
clicking
reject
causes
the
promise
to
resolve
(
false
)
"
)
;
await
popupHiding
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
