#
ifndef
MOZILLA_IDENTITYCREDENTIALREQUESTMANAGER_H_
#
define
MOZILLA_IDENTITYCREDENTIALREQUESTMANAGER_H_
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
PrincipalHashKey
.
h
"
#
include
"
mozilla
/
dom
/
IdentityCredentialBinding
.
h
"
#
include
"
mozilla
/
dom
/
IPCIdentityCredential
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsTHashMap
.
h
"
namespace
mozilla
{
class
IdentityCredentialRequestManager
final
:
nsISupports
{
public
:
NS_DECL_ISUPPORTS
static
IdentityCredentialRequestManager
*
GetInstance
(
)
;
nsresult
StorePendingRequest
(
const
nsCOMPtr
<
nsIPrincipal
>
&
aRPPrincipal
const
dom
:
:
IdentityCredentialRequestOptions
&
aRequest
uint64_t
aWindowID
)
;
void
NotifyOfStoredCredential
(
const
nsCOMPtr
<
nsIPrincipal
>
&
aIDPPrincipal
const
dom
:
:
IPCIdentityCredential
&
aCredential
)
;
IdentityCredentialRequestManager
(
IdentityCredentialRequestManager
&
other
)
=
delete
;
void
operator
=
(
const
IdentityCredentialRequestManager
&
)
=
delete
;
private
:
static
StaticRefPtr
<
IdentityCredentialRequestManager
>
sSingleton
;
IdentityCredentialRequestManager
(
)
{
}
;
~
IdentityCredentialRequestManager
(
)
=
default
;
struct
PendingRequestEntry
{
nsCOMPtr
<
nsIPrincipal
>
mRPPrincipal
;
dom
:
:
IdentityCredentialRequestOptions
mRequestOptions
;
uint64_t
mWindowID
;
PendingRequestEntry
(
nsIPrincipal
*
aRPPrincipal
const
dom
:
:
IdentityCredentialRequestOptions
&
aRequestOptions
uint64_t
aWindowID
)
:
mRPPrincipal
(
aRPPrincipal
)
mRequestOptions
(
aRequestOptions
)
mWindowID
(
aWindowID
)
{
}
}
;
nsTHashMap
<
PrincipalHashKey
nsTArray
<
PendingRequestEntry
>
>
mPendingRequests
;
}
;
}
#
endif
