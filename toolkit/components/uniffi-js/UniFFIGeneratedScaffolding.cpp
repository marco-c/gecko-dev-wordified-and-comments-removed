#
include
"
nsString
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
ScaffoldingConverter
.
h
"
#
include
"
mozilla
/
dom
/
UniFFICall
.
h
"
#
include
"
mozilla
/
dom
/
UniFFICallbacks
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIPointerType
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIScaffolding
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIRust
.
h
"
namespace
mozilla
:
:
uniffi
{
using
dom
:
:
ArrayBuffer
;
using
dom
:
:
AutoEntryScript
;
using
dom
:
:
GlobalObject
;
using
dom
:
:
RootedDictionary
;
using
dom
:
:
Promise
;
using
dom
:
:
UniFFIScaffoldingValue
;
using
dom
:
:
Sequence
;
using
dom
:
:
UniFFICallbackHandler
;
using
dom
:
:
UniFFIPointer
;
using
dom
:
:
UniFFIScaffoldingCallResult
;
extern
"
C
"
{
void
*
uniffi_relevancy_fn_clone_relevancystore
(
void
*
RustCallStatus
*
)
;
void
uniffi_relevancy_fn_free_relevancystore
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_relevancy_fn_constructor_relevancystore_new
(
RustBuffer
RustCallStatus
*
)
;
RustBuffer
uniffi_relevancy_fn_method_relevancystore_calculate_metrics
(
void
*
RustCallStatus
*
)
;
void
uniffi_relevancy_fn_method_relevancystore_close
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_relevancy_fn_method_relevancystore_ingest
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
uniffi_relevancy_fn_method_relevancystore_interrupt
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_relevancy_fn_method_relevancystore_user_interest_vector
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_remote_settings_fn_clone_remotesettings
(
void
*
RustCallStatus
*
)
;
void
uniffi_remote_settings_fn_free_remotesettings
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_remote_settings_fn_constructor_remotesettings_new
(
RustBuffer
RustCallStatus
*
)
;
void
uniffi_remote_settings_fn_method_remotesettings_download_attachment_to_path
(
void
*
RustBuffer
RustBuffer
RustCallStatus
*
)
;
RustBuffer
uniffi_remote_settings_fn_method_remotesettings_get_records
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_remote_settings_fn_method_remotesettings_get_records_since
(
void
*
uint64_t
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_clone_suggeststore
(
void
*
RustCallStatus
*
)
;
void
uniffi_suggest_fn_free_suggeststore
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_constructor_suggeststore_new
(
RustBuffer
RustBuffer
RustCallStatus
*
)
;
void
uniffi_suggest_fn_method_suggeststore_clear
(
void
*
RustCallStatus
*
)
;
void
uniffi_suggest_fn_method_suggeststore_clear_dismissed_suggestions
(
void
*
RustCallStatus
*
)
;
void
uniffi_suggest_fn_method_suggeststore_dismiss_suggestion
(
void
*
RustBuffer
RustCallStatus
*
)
;
RustBuffer
uniffi_suggest_fn_method_suggeststore_fetch_global_config
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_suggest_fn_method_suggeststore_fetch_provider_config
(
void
*
RustBuffer
RustCallStatus
*
)
;
RustBuffer
uniffi_suggest_fn_method_suggeststore_ingest
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
uniffi_suggest_fn_method_suggeststore_interrupt
(
void
*
RustBuffer
RustCallStatus
*
)
;
RustBuffer
uniffi_suggest_fn_method_suggeststore_query
(
void
*
RustBuffer
RustCallStatus
*
)
;
RustBuffer
uniffi_suggest_fn_method_suggeststore_query_with_metrics
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_clone_suggeststorebuilder
(
void
*
RustCallStatus
*
)
;
void
uniffi_suggest_fn_free_suggeststorebuilder
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_constructor_suggeststorebuilder_new
(
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_method_suggeststorebuilder_build
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_method_suggeststorebuilder_cache_path
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_method_suggeststorebuilder_data_path
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_method_suggeststorebuilder_load_extension
(
void
*
RustBuffer
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_bucket_name
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_server
(
void
*
RustBuffer
RustCallStatus
*
)
;
int8_t
uniffi_suggest_fn_func_raw_suggestion_url_matches
(
RustBuffer
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_tabs_fn_clone_remotecommandstore
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_free_remotecommandstore
(
void
*
RustCallStatus
*
)
;
int8_t
uniffi_tabs_fn_method_remotecommandstore_add_remote_command
(
void
*
RustBuffer
RustBuffer
RustCallStatus
*
)
;
int8_t
uniffi_tabs_fn_method_remotecommandstore_add_remote_command_at
(
void
*
RustBuffer
RustBuffer
int64_t
RustCallStatus
*
)
;
RustBuffer
uniffi_tabs_fn_method_remotecommandstore_get_unsent_commands
(
void
*
RustCallStatus
*
)
;
int8_t
uniffi_tabs_fn_method_remotecommandstore_remove_remote_command
(
void
*
RustBuffer
RustBuffer
RustCallStatus
*
)
;
int8_t
uniffi_tabs_fn_method_remotecommandstore_set_pending_command_sent
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_tabs_fn_clone_tabsbridgedengine
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_free_tabsbridgedengine
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_tabs_fn_method_tabsbridgedengine_apply
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_tabs_fn_method_tabsbridgedengine_ensure_current_sync_id
(
void
*
RustBuffer
RustCallStatus
*
)
;
int64_t
uniffi_tabs_fn_method_tabsbridgedengine_last_sync
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_prepare_for_sync
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_reset
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_tabs_fn_method_tabsbridgedengine_reset_sync_id
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_set_last_sync
(
void
*
int64_t
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_set_uploaded
(
void
*
int64_t
RustBuffer
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_store_incoming
(
void
*
RustBuffer
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_sync_finished
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_tabs_fn_method_tabsbridgedengine_sync_id
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_sync_started
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsbridgedengine_wipe
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_tabs_fn_clone_tabsstore
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_free_tabsstore
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_tabs_fn_constructor_tabsstore_new
(
RustBuffer
RustCallStatus
*
)
;
void
*
uniffi_tabs_fn_method_tabsstore_bridged_engine
(
void
*
RustCallStatus
*
)
;
RustBuffer
uniffi_tabs_fn_method_tabsstore_get_all
(
void
*
RustCallStatus
*
)
;
void
*
uniffi_tabs_fn_method_tabsstore_new_remote_command_store
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsstore_register_with_sync_manager
(
void
*
RustCallStatus
*
)
;
void
uniffi_tabs_fn_method_tabsstore_set_local_tabs
(
void
*
RustBuffer
RustCallStatus
*
)
;
}
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
kRelevancyRelevancyStorePointerType
{
"
relevancy
:
:
RelevancyStore
"
_ns
uniffi_relevancy_fn_clone_relevancystore
uniffi_relevancy_fn_free_relevancystore
}
;
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
kRemoteSettingsRemoteSettingsPointerType
{
"
remote_settings
:
:
RemoteSettings
"
_ns
uniffi_remote_settings_fn_clone_remotesettings
uniffi_remote_settings_fn_free_remotesettings
}
;
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
kSuggestSuggestStorePointerType
{
"
suggest
:
:
SuggestStore
"
_ns
uniffi_suggest_fn_clone_suggeststore
uniffi_suggest_fn_free_suggeststore
}
;
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
kSuggestSuggestStoreBuilderPointerType
{
"
suggest
:
:
SuggestStoreBuilder
"
_ns
uniffi_suggest_fn_clone_suggeststorebuilder
uniffi_suggest_fn_free_suggeststorebuilder
}
;
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
kTabsRemoteCommandStorePointerType
{
"
tabs
:
:
RemoteCommandStore
"
_ns
uniffi_tabs_fn_clone_remotecommandstore
uniffi_tabs_fn_free_remotecommandstore
}
;
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
kTabsTabsBridgedEnginePointerType
{
"
tabs
:
:
TabsBridgedEngine
"
_ns
uniffi_tabs_fn_clone_tabsbridgedengine
uniffi_tabs_fn_free_tabsbridgedengine
}
;
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
kTabsTabsStorePointerType
{
"
tabs
:
:
TabsStore
"
_ns
uniffi_tabs_fn_clone_tabsstore
uniffi_tabs_fn_free_tabsstore
}
;
Maybe
<
CallbackInterfaceInfo
>
UniFFIGetCallbackInterfaceInfo
(
uint64_t
aInterfaceId
)
{
switch
(
aInterfaceId
)
{
default
:
return
Nothing
(
)
;
}
}
class
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnConstructorRelevancystoreNew
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mDbpath
;
typename
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
0
]
&
mDbpath
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
FromRust
(
uniffi_relevancy_fn_constructor_relevancystore_new
(
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mDbpath
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreCalculateMetrics
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_relevancy_fn_method_relevancystore_calculate_metrics
(
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreClose
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_relevancy_fn_method_relevancystore_close
(
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreIngest
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mTopUrls
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mTopUrls
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_relevancy_fn_method_relevancystore_ingest
(
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mTopUrls
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreInterrupt
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_relevancy_fn_method_relevancystore_interrupt
(
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreUserInterestVector
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_relevancy_fn_method_relevancystore_user_interest_vector
(
ScaffoldingObjectConverter
<
&
kRelevancyRelevancyStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnConstructorRemotesettingsNew
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mRemoteSettingsConfig
;
typename
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
0
]
&
mRemoteSettingsConfig
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
FromRust
(
uniffi_remote_settings_fn_constructor_remotesettings_new
(
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mRemoteSettingsConfig
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnMethodRemotesettingsDownloadAttachmentToPath
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mAttachmentId
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mPath
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mAttachmentId
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
2
]
&
mPath
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_remote_settings_fn_method_remotesettings_download_attachment_to_path
(
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mAttachmentId
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mPath
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnMethodRemotesettingsGetRecords
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_remote_settings_fn_method_remotesettings_get_records
(
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnMethodRemotesettingsGetRecordsSince
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
uint64_t
>
:
:
IntermediateType
mTimestamp
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
uint64_t
>
:
:
FromJs
(
aArgs
[
1
]
&
mTimestamp
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_remote_settings_fn_method_remotesettings_get_records_since
(
ScaffoldingObjectConverter
<
&
kRemoteSettingsRemoteSettingsPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
uint64_t
>
:
:
IntoRust
(
std
:
:
move
(
mTimestamp
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnConstructorSuggeststoreNew
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mPath
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mSettingsConfig
;
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
0
]
&
mPath
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mSettingsConfig
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromRust
(
uniffi_suggest_fn_constructor_suggeststore_new
(
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mPath
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mSettingsConfig
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreClear
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_suggest_fn_method_suggeststore_clear
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreClearDismissedSuggestions
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_suggest_fn_method_suggeststore_clear_dismissed_suggestions
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreDismissSuggestion
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mRawSuggestionUrl
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mRawSuggestionUrl
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_suggest_fn_method_suggeststore_dismiss_suggestion
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mRawSuggestionUrl
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreFetchGlobalConfig
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststore_fetch_global_config
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreFetchProviderConfig
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mProvider
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mProvider
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststore_fetch_provider_config
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mProvider
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreIngest
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mConstraints
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mConstraints
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststore_ingest
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mConstraints
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreInterrupt
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mKind
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mKind
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_suggest_fn_method_suggeststore_interrupt
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mKind
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreQuery
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mQuery
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mQuery
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststore_query
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mQuery
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreQueryWithMetrics
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mQuery
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mQuery
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststore_query_with_metrics
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mQuery
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnConstructorSuggeststorebuilderNew
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromRust
(
uniffi_suggest_fn_constructor_suggeststorebuilder_new
(
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderBuild
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststorebuilder_build
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStorePointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderCachePath
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mPath
;
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mPath
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststorebuilder_cache_path
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mPath
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderDataPath
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mPath
;
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mPath
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststorebuilder_data_path
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mPath
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderLoadExtension
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mLibraryName
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mEntrypoint
;
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mLibraryName
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
2
]
&
mEntrypoint
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststorebuilder_load_extension
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mLibraryName
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mEntrypoint
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsBucketName
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mBucketName
;
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mBucketName
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_bucket_name
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mBucketName
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsServer
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mServer
;
typename
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mServer
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
FromRust
(
uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_server
(
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mServer
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kSuggestSuggestStoreBuilderPointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiSuggestFnFuncRawSuggestionUrlMatches
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mRawUrl
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUrl
;
typename
ScaffoldingConverter
<
int8_t
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
0
]
&
mRawUrl
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mUrl
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
int8_t
>
:
:
FromRust
(
uniffi_suggest_fn_func_raw_suggestion_url_matches
(
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mRawUrl
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mUrl
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
int8_t
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreAddRemoteCommand
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mDeviceId
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mCommand
;
typename
ScaffoldingConverter
<
int8_t
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mDeviceId
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
2
]
&
mCommand
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
int8_t
>
:
:
FromRust
(
uniffi_tabs_fn_method_remotecommandstore_add_remote_command
(
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mDeviceId
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mCommand
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
int8_t
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreAddRemoteCommandAt
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mDeviceId
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mCommand
;
typename
ScaffoldingConverter
<
int64_t
>
:
:
IntermediateType
mWhen
;
typename
ScaffoldingConverter
<
int8_t
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mDeviceId
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
2
]
&
mCommand
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
int64_t
>
:
:
FromJs
(
aArgs
[
3
]
&
mWhen
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
int8_t
>
:
:
FromRust
(
uniffi_tabs_fn_method_remotecommandstore_add_remote_command_at
(
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mDeviceId
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mCommand
)
)
ScaffoldingConverter
<
int64_t
>
:
:
IntoRust
(
std
:
:
move
(
mWhen
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
int8_t
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreGetUnsentCommands
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_tabs_fn_method_remotecommandstore_get_unsent_commands
(
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreRemoveRemoteCommand
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mDeviceId
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mCommand
;
typename
ScaffoldingConverter
<
int8_t
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mDeviceId
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
2
]
&
mCommand
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
int8_t
>
:
:
FromRust
(
uniffi_tabs_fn_method_remotecommandstore_remove_remote_command
(
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mDeviceId
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mCommand
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
int8_t
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreSetPendingCommandSent
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mCommand
;
typename
ScaffoldingConverter
<
int8_t
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mCommand
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
int8_t
>
:
:
FromRust
(
uniffi_tabs_fn_method_remotecommandstore_set_pending_command_sent
(
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mCommand
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
int8_t
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineApply
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsbridgedengine_apply
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineEnsureCurrentSyncId
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mNewSyncId
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mNewSyncId
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsbridgedengine_ensure_current_sync_id
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mNewSyncId
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineLastSync
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
int64_t
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
int64_t
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsbridgedengine_last_sync
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
int64_t
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedenginePrepareForSync
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mClientData
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mClientData
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_prepare_for_sync
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mClientData
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineReset
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_reset
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineResetSyncId
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsbridgedengine_reset_sync_id
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSetLastSync
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
int64_t
>
:
:
IntermediateType
mLastSync
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
int64_t
>
:
:
FromJs
(
aArgs
[
1
]
&
mLastSync
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_set_last_sync
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
int64_t
>
:
:
IntoRust
(
std
:
:
move
(
mLastSync
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSetUploaded
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
int64_t
>
:
:
IntermediateType
mNewTimestamp
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUploadedIds
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
int64_t
>
:
:
FromJs
(
aArgs
[
1
]
&
mNewTimestamp
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
2
]
&
mUploadedIds
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_set_uploaded
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
int64_t
>
:
:
IntoRust
(
std
:
:
move
(
mNewTimestamp
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mUploadedIds
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineStoreIncoming
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mIncomingEnvelopesAsJson
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mIncomingEnvelopesAsJson
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_store_incoming
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mIncomingEnvelopesAsJson
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSyncFinished
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_sync_finished
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSyncId
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsbridgedengine_sync_id
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSyncStarted
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_sync_started
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineWipe
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsbridgedengine_wipe
(
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnConstructorTabsstoreNew
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mPath
;
typename
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
0
]
&
mPath
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
FromRust
(
uniffi_tabs_fn_constructor_tabsstore_new
(
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mPath
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreBridgedEngine
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsstore_bridged_engine
(
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsBridgedEnginePointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreGetAll
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingConverter
<
RustBuffer
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsstore_get_all
(
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreNewRemoteCommandStore
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntermediateType
mUniffiReturnValue
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
mUniffiReturnValue
=
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
FromRust
(
uniffi_tabs_fn_method_tabsstore_new_remote_command_store
(
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsRemoteCommandStorePointerType
>
:
:
IntoJs
(
aCx
std
:
:
move
(
mUniffiReturnValue
)
aDest
aError
)
;
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreRegisterWithSyncManager
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntermediateType
mPtr
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsstore_register_with_sync_manager
(
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
class
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreSetLocalTabs
:
public
UniffiHandlerBase
{
private
:
typename
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntermediateType
mPtr
;
typename
ScaffoldingConverter
<
RustBuffer
>
:
:
IntermediateType
mRemoteTabs
;
public
:
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
override
{
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
FromJs
(
aArgs
[
0
]
&
mPtr
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
ScaffoldingConverter
<
RustBuffer
>
:
:
FromJs
(
aArgs
[
1
]
&
mRemoteTabs
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
}
void
MakeRustCall
(
)
override
{
RustCallStatus
callStatus
{
}
;
uniffi_tabs_fn_method_tabsstore_set_local_tabs
(
ScaffoldingObjectConverter
<
&
kTabsTabsStorePointerType
>
:
:
IntoRust
(
std
:
:
move
(
mPtr
)
)
ScaffoldingConverter
<
RustBuffer
>
:
:
IntoRust
(
std
:
:
move
(
mRemoteTabs
)
)
&
callStatus
)
;
mUniffiCallStatusCode
=
callStatus
.
code
;
if
(
callStatus
.
error_buf
.
data
)
{
mUniffiCallStatusErrorBuf
=
OwnedRustBuffer
(
callStatus
.
error_buf
)
;
}
}
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
override
{
}
}
;
UniquePtr
<
UniffiHandlerBase
>
UniFFIGetHandler
(
uint64_t
aId
)
{
switch
(
aId
)
{
case
1
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnConstructorRelevancystoreNew
>
(
)
;
}
case
2
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreCalculateMetrics
>
(
)
;
}
case
3
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreClose
>
(
)
;
}
case
4
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreIngest
>
(
)
;
}
case
5
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreInterrupt
>
(
)
;
}
case
6
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRelevancyFnMethodRelevancystoreUserInterestVector
>
(
)
;
}
case
8
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnConstructorRemotesettingsNew
>
(
)
;
}
case
9
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnMethodRemotesettingsDownloadAttachmentToPath
>
(
)
;
}
case
10
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnMethodRemotesettingsGetRecords
>
(
)
;
}
case
11
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiRemoteSettingsFnMethodRemotesettingsGetRecordsSince
>
(
)
;
}
case
13
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnConstructorSuggeststoreNew
>
(
)
;
}
case
14
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreClear
>
(
)
;
}
case
15
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreClearDismissedSuggestions
>
(
)
;
}
case
16
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreDismissSuggestion
>
(
)
;
}
case
17
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreFetchGlobalConfig
>
(
)
;
}
case
18
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreFetchProviderConfig
>
(
)
;
}
case
19
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreIngest
>
(
)
;
}
case
20
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreInterrupt
>
(
)
;
}
case
21
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreQuery
>
(
)
;
}
case
22
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststoreQueryWithMetrics
>
(
)
;
}
case
24
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnConstructorSuggeststorebuilderNew
>
(
)
;
}
case
25
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderBuild
>
(
)
;
}
case
26
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderCachePath
>
(
)
;
}
case
27
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderDataPath
>
(
)
;
}
case
28
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderLoadExtension
>
(
)
;
}
case
29
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsBucketName
>
(
)
;
}
case
30
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsServer
>
(
)
;
}
case
31
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiSuggestFnFuncRawSuggestionUrlMatches
>
(
)
;
}
case
33
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreAddRemoteCommand
>
(
)
;
}
case
34
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreAddRemoteCommandAt
>
(
)
;
}
case
35
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreGetUnsentCommands
>
(
)
;
}
case
36
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreRemoveRemoteCommand
>
(
)
;
}
case
37
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodRemotecommandstoreSetPendingCommandSent
>
(
)
;
}
case
39
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineApply
>
(
)
;
}
case
40
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineEnsureCurrentSyncId
>
(
)
;
}
case
41
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineLastSync
>
(
)
;
}
case
42
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedenginePrepareForSync
>
(
)
;
}
case
43
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineReset
>
(
)
;
}
case
44
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineResetSyncId
>
(
)
;
}
case
45
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSetLastSync
>
(
)
;
}
case
46
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSetUploaded
>
(
)
;
}
case
47
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineStoreIncoming
>
(
)
;
}
case
48
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSyncFinished
>
(
)
;
}
case
49
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSyncId
>
(
)
;
}
case
50
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineSyncStarted
>
(
)
;
}
case
51
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsbridgedengineWipe
>
(
)
;
}
case
53
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnConstructorTabsstoreNew
>
(
)
;
}
case
54
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreBridgedEngine
>
(
)
;
}
case
55
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreGetAll
>
(
)
;
}
case
56
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreNewRemoteCommandStore
>
(
)
;
}
case
57
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreRegisterWithSyncManager
>
(
)
;
}
case
58
:
{
return
MakeUnique
<
ScaffoldingCallHandlerUniFFIUniffiTabsFnMethodTabsstoreSetLocalTabs
>
(
)
;
}
default
:
return
nullptr
;
}
}
Maybe
<
already_AddRefed
<
UniFFIPointer
>
>
UniFFIReadPointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
{
const
UniFFIPointerType
*
type
;
switch
(
aId
)
{
case
0
:
{
type
=
&
kRelevancyRelevancyStorePointerType
;
break
;
}
case
1
:
{
type
=
&
kRemoteSettingsRemoteSettingsPointerType
;
break
;
}
case
2
:
{
type
=
&
kSuggestSuggestStorePointerType
;
break
;
}
case
3
:
{
type
=
&
kSuggestSuggestStoreBuilderPointerType
;
break
;
}
case
4
:
{
type
=
&
kTabsRemoteCommandStorePointerType
;
break
;
}
case
5
:
{
type
=
&
kTabsTabsBridgedEnginePointerType
;
break
;
}
case
6
:
{
type
=
&
kTabsTabsStorePointerType
;
break
;
}
default
:
return
Nothing
(
)
;
}
return
Some
(
UniFFIPointer
:
:
Read
(
aArrayBuff
aPosition
type
aError
)
)
;
}
bool
UniFFIWritePointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
UniFFIPointer
&
aPtr
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
{
const
UniFFIPointerType
*
type
;
switch
(
aId
)
{
case
0
:
{
type
=
&
kRelevancyRelevancyStorePointerType
;
break
;
}
case
1
:
{
type
=
&
kRemoteSettingsRemoteSettingsPointerType
;
break
;
}
case
2
:
{
type
=
&
kSuggestSuggestStorePointerType
;
break
;
}
case
3
:
{
type
=
&
kSuggestSuggestStoreBuilderPointerType
;
break
;
}
case
4
:
{
type
=
&
kTabsRemoteCommandStorePointerType
;
break
;
}
case
5
:
{
type
=
&
kTabsTabsBridgedEnginePointerType
;
break
;
}
case
6
:
{
type
=
&
kTabsTabsStorePointerType
;
break
;
}
default
:
return
false
;
}
aPtr
.
Write
(
aArrayBuff
aPosition
type
aError
)
;
return
true
;
}
}
