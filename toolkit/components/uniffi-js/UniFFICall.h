#
ifndef
mozilla_UniFFICall_h
#
define
mozilla_UniFFICall_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIRust
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIScaffolding
.
h
"
namespace
mozilla
:
:
uniffi
{
class
UniffiHandlerBase
{
protected
:
virtual
void
PrepareRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
=
0
;
virtual
void
MakeRustCall
(
)
=
0
;
int8_t
mUniffiCallStatusCode
=
RUST_CALL_SUCCESS
;
OwnedRustBuffer
mUniffiCallStatusErrorBuf
;
virtual
void
ExtractSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
UniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
=
0
;
void
ExtractCallResult
(
JSContext
*
aCx
dom
:
:
RootedDictionary
<
dom
:
:
UniFFIScaffoldingCallResult
>
&
aDest
ErrorResult
&
aError
)
;
public
:
virtual
~
UniffiHandlerBase
(
)
=
default
;
static
void
CallSync
(
UniquePtr
<
UniffiHandlerBase
>
aHandler
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
dom
:
:
RootedDictionary
<
dom
:
:
UniFFIScaffoldingCallResult
>
&
aReturnValue
ErrorResult
&
aError
)
;
static
already_AddRefed
<
dom
:
:
Promise
>
CallAsync
(
UniquePtr
<
UniffiHandlerBase
>
aHandler
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
Sequence
<
dom
:
:
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
;
}
;
}
#
endif
