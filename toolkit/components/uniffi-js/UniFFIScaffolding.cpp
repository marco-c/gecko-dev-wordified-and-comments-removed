#
include
<
inttypes
.
h
>
#
include
"
nsError
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
UniFFICall
.
h
"
#
include
"
mozilla
/
dom
/
UniFFICallbacks
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIScaffolding
.
h
"
using
mozilla
:
:
dom
:
:
ArrayBuffer
;
using
mozilla
:
:
dom
:
:
GlobalObject
;
using
mozilla
:
:
dom
:
:
Promise
;
using
mozilla
:
:
dom
:
:
RootedDictionary
;
using
mozilla
:
:
dom
:
:
Sequence
;
using
mozilla
:
:
dom
:
:
UniFFICallbackHandler
;
using
mozilla
:
:
dom
:
:
UniFFIPointer
;
using
mozilla
:
:
dom
:
:
UniFFIScaffoldingCallResult
;
using
mozilla
:
:
dom
:
:
UniFFIScaffoldingValue
;
using
mozilla
:
:
uniffi
:
:
UniffiHandlerBase
;
namespace
mozilla
:
:
uniffi
{
UniquePtr
<
UniffiHandlerBase
>
UniFFIGetHandler
(
uint64_t
aId
)
;
Maybe
<
already_AddRefed
<
UniFFIPointer
>
>
UniFFIReadPointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
;
bool
UniFFIWritePointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
UniFFIPointer
&
aPtr
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
;
#
ifdef
MOZ_UNIFFI_FIXTURES
UniquePtr
<
UniffiHandlerBase
>
UniFFIFixturesGetHandler
(
uint64_t
aId
)
;
Maybe
<
already_AddRefed
<
UniFFIPointer
>
>
UniFFIFixturesReadPointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
;
bool
UniFFIFixturesWritePointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
UniFFIPointer
&
aPtr
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
;
#
endif
static
UniquePtr
<
UniffiHandlerBase
>
GetHandlerHelper
(
uint64_t
aId
)
{
UniquePtr
<
UniffiHandlerBase
>
handler
=
uniffi
:
:
UniFFIGetHandler
(
aId
)
;
#
ifdef
MOZ_UNIFFI_FIXTURES
if
(
!
handler
)
{
handler
=
uniffi
:
:
UniFFIFixturesGetHandler
(
aId
)
;
}
#
endif
return
handler
;
}
}
namespace
mozilla
:
:
dom
{
already_AddRefed
<
Promise
>
UniFFIScaffolding
:
:
CallAsync
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
Sequence
<
UniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
{
if
(
UniquePtr
<
UniffiHandlerBase
>
handler
=
uniffi
:
:
GetHandlerHelper
(
aId
)
)
{
return
UniffiHandlerBase
:
:
CallAsync
(
std
:
:
move
(
handler
)
aGlobal
aArgs
aError
)
;
}
aError
.
ThrowUnknownError
(
nsPrintfCString
(
"
Unknown
function
id
:
%
"
PRIu64
aId
)
)
;
return
nullptr
;
}
void
UniFFIScaffolding
:
:
CallSync
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
Sequence
<
UniFFIScaffoldingValue
>
&
aArgs
RootedDictionary
<
UniFFIScaffoldingCallResult
>
&
aReturnValue
ErrorResult
&
aError
)
{
if
(
UniquePtr
<
UniffiHandlerBase
>
handler
=
uniffi
:
:
GetHandlerHelper
(
aId
)
)
{
return
UniffiHandlerBase
:
:
CallSync
(
std
:
:
move
(
handler
)
aGlobal
aArgs
aReturnValue
aError
)
;
}
aError
.
ThrowUnknownError
(
nsPrintfCString
(
"
Unknown
function
id
:
%
"
PRIu64
aId
)
)
;
}
already_AddRefed
<
UniFFIPointer
>
UniFFIScaffolding
:
:
ReadPointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
{
Maybe
<
already_AddRefed
<
UniFFIPointer
>
>
firstTry
=
uniffi
:
:
UniFFIReadPointer
(
aGlobal
aId
aArrayBuff
aPosition
aError
)
;
if
(
firstTry
.
isSome
(
)
)
{
return
firstTry
.
extract
(
)
;
}
#
ifdef
MOZ_UNIFFI_FIXTURES
Maybe
<
already_AddRefed
<
UniFFIPointer
>
>
secondTry
=
uniffi
:
:
UniFFIFixturesReadPointer
(
aGlobal
aId
aArrayBuff
aPosition
aError
)
;
if
(
secondTry
.
isSome
(
)
)
{
return
secondTry
.
extract
(
)
;
}
#
endif
aError
.
ThrowUnknownError
(
nsPrintfCString
(
"
Unknown
object
id
:
%
"
PRIu64
aId
)
)
;
return
nullptr
;
}
void
UniFFIScaffolding
:
:
WritePointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
UniFFIPointer
&
aPtr
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
{
if
(
uniffi
:
:
UniFFIWritePointer
(
aGlobal
aId
aPtr
aArrayBuff
aPosition
aError
)
)
{
return
;
}
#
ifdef
MOZ_UNIFFI_FIXTURES
if
(
uniffi
:
:
UniFFIFixturesWritePointer
(
aGlobal
aId
aPtr
aArrayBuff
aPosition
aError
)
)
{
return
;
}
#
endif
aError
.
ThrowUnknownError
(
nsPrintfCString
(
"
Unknown
object
id
:
%
"
PRIu64
aId
)
)
;
}
void
UniFFIScaffolding
:
:
RegisterCallbackHandler
(
GlobalObject
&
aGlobal
uint64_t
aInterfaceId
UniFFICallbackHandler
&
aCallbackHandler
ErrorResult
&
aError
)
{
uniffi
:
:
RegisterCallbackHandler
(
aInterfaceId
aCallbackHandler
aError
)
;
}
void
UniFFIScaffolding
:
:
DeregisterCallbackHandler
(
GlobalObject
&
aGlobal
uint64_t
aInterfaceId
ErrorResult
&
aError
)
{
uniffi
:
:
DeregisterCallbackHandler
(
aInterfaceId
aError
)
;
}
}
