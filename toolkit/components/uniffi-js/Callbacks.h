#
ifndef
mozilla_UniFFICallbacks_h
#
define
mozilla_UniFFICallbacks_h
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIScaffolding
.
h
"
#
include
"
mozilla
/
uniffi
/
FfiValue
.
h
"
#
include
"
mozilla
/
uniffi
/
Rust
.
h
"
namespace
mozilla
:
:
uniffi
{
void
RegisterCallbackHandler
(
uint64_t
aInterfaceId
dom
:
:
UniFFICallbackHandler
&
aCallbackHandler
ErrorResult
&
aError
)
;
void
DeregisterCallbackHandler
(
uint64_t
aInterfaceId
ErrorResult
&
aError
)
;
class
AsyncCallbackMethodHandlerBase
{
public
:
AsyncCallbackMethodHandlerBase
(
const
char
*
aUniffiMethodName
uint64_t
aUniffiHandle
)
:
mUniffiMethodName
(
aUniffiMethodName
)
mUniffiHandle
(
aUniffiHandle
)
{
}
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
dom
:
:
Promise
>
MakeCall
(
JSContext
*
aCx
dom
:
:
UniFFICallbackHandler
*
aJsHandler
ErrorResult
&
aError
)
=
0
;
virtual
void
HandleReturn
(
const
RootedDictionary
<
UniFFIScaffoldingCallResult
>
&
aReturnValue
ErrorResult
&
aError
)
{
}
virtual
~
AsyncCallbackMethodHandlerBase
(
)
=
default
;
static
void
ScheduleAsyncCall
(
UniquePtr
<
AsyncCallbackMethodHandlerBase
>
aHandler
StaticRefPtr
<
dom
:
:
UniFFICallbackHandler
>
*
aJsHandler
)
;
protected
:
const
char
*
mUniffiMethodName
;
FfiValueInt
<
uint64_t
>
mUniffiHandle
;
private
:
class
PromiseHandler
final
:
public
dom
:
:
PromiseNativeHandler
{
public
:
NS_DECL_ISUPPORTS
PromiseHandler
(
UniquePtr
<
AsyncCallbackMethodHandlerBase
>
aHandler
)
:
mHandler
(
std
:
:
move
(
aHandler
)
)
{
}
MOZ_CAN_RUN_SCRIPT
virtual
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
virtual
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
private
:
UniquePtr
<
AsyncCallbackMethodHandlerBase
>
mHandler
;
~
PromiseHandler
(
)
=
default
;
}
;
}
;
NS_IMPL_ISUPPORTS0
(
AsyncCallbackMethodHandlerBase
:
:
PromiseHandler
)
;
class
CallbackFreeHandler
:
public
AsyncCallbackMethodHandlerBase
{
public
:
CallbackFreeHandler
(
const
char
*
aUniffiMethodName
uint64_t
aUniffiHandle
)
:
AsyncCallbackMethodHandlerBase
(
aUniffiMethodName
aUniffiHandle
)
{
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
dom
:
:
Promise
>
MakeCall
(
JSContext
*
aCx
dom
:
:
UniFFICallbackHandler
*
aJsHandler
ErrorResult
&
aError
)
override
;
}
;
}
#
endif
