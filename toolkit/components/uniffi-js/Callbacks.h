#
ifndef
mozilla_UniFFICallbacks_h
#
define
mozilla_UniFFICallbacks_h
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIScaffolding
.
h
"
#
include
"
mozilla
/
uniffi
/
Rust
.
h
"
namespace
mozilla
:
:
uniffi
{
void
RegisterCallbackHandler
(
uint64_t
aInterfaceId
dom
:
:
UniFFICallbackHandler
&
aCallbackHandler
ErrorResult
&
aError
)
;
void
DeregisterCallbackHandler
(
uint64_t
aInterfaceId
ErrorResult
&
aError
)
;
class
UniffiCallbackMethodHandlerBase
{
protected
:
const
char
*
mUniffiInterfaceName
;
FfiValueInt
<
uint64_t
>
mUniffiHandle
;
MOZ_CAN_RUN_SCRIPT
virtual
void
MakeCall
(
JSContext
*
aCx
dom
:
:
UniFFICallbackHandler
*
aJsHandler
ErrorResult
&
aError
)
=
0
;
public
:
UniffiCallbackMethodHandlerBase
(
const
char
*
aInterfaceName
uint64_t
aUniffiHandle
)
:
mUniffiInterfaceName
(
aInterfaceName
)
mUniffiHandle
(
FfiValueInt
<
uint64_t
>
:
:
FromRust
(
aUniffiHandle
)
)
{
}
virtual
~
UniffiCallbackMethodHandlerBase
(
)
=
default
;
static
void
FireAndForget
(
UniquePtr
<
UniffiCallbackMethodHandlerBase
>
aHandler
StaticRefPtr
<
dom
:
:
UniFFICallbackHandler
>
*
aJsHandler
)
;
}
;
class
UniffiCallbackFreeHandler
:
public
UniffiCallbackMethodHandlerBase
{
public
:
UniffiCallbackFreeHandler
(
const
char
*
aInterfaceName
uint64_t
aObjectHandle
)
:
UniffiCallbackMethodHandlerBase
(
aInterfaceName
aObjectHandle
)
{
}
void
MakeCall
(
JSContext
*
aCx
dom
:
:
UniFFICallbackHandler
*
aJsHandler
ErrorResult
&
aError
)
override
;
}
;
}
#
endif
