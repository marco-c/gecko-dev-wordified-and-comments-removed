#
ifndef
mozilla_UniFFICall_h
#
define
mozilla_UniFFICall_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIBindingFwd
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIScaffolding
.
h
"
#
include
"
mozilla
/
uniffi
/
OwnedRustBuffer
.
h
"
#
include
"
mozilla
/
uniffi
/
FfiValue
.
h
"
#
include
"
mozilla
/
uniffi
/
ResultPromise
.
h
"
#
include
"
mozilla
/
uniffi
/
Rust
.
h
"
namespace
mozilla
:
:
uniffi
{
class
UniffiCallHandlerBase
{
public
:
virtual
void
LiftSuccessfulCallResult
(
JSContext
*
aCx
dom
:
:
Optional
<
dom
:
:
OwningUniFFIScaffoldingValue
>
&
aDest
ErrorResult
&
aError
)
=
0
;
void
LiftCallResult
(
JSContext
*
aCx
dom
:
:
RootedDictionary
<
dom
:
:
UniFFIScaffoldingCallResult
>
&
aDest
ErrorResult
&
aError
)
;
virtual
~
UniffiCallHandlerBase
(
)
=
default
;
protected
:
int8_t
mUniffiCallStatusCode
=
RUST_CALL_SUCCESS
;
FfiValueRustBuffer
mUniffiCallStatusErrorBuf
;
}
;
class
UniffiSyncCallHandler
:
public
UniffiCallHandlerBase
{
protected
:
virtual
void
LowerRustArgs
(
const
dom
:
:
Sequence
<
dom
:
:
OwningUniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
=
0
;
virtual
void
MakeRustCall
(
RustCallStatus
*
aOutStatus
)
=
0
;
public
:
virtual
~
UniffiSyncCallHandler
(
)
=
default
;
static
void
CallSync
(
UniquePtr
<
UniffiSyncCallHandler
>
aHandler
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
Sequence
<
dom
:
:
OwningUniFFIScaffoldingValue
>
&
aArgs
dom
:
:
RootedDictionary
<
dom
:
:
UniFFIScaffoldingCallResult
>
&
aReturnValue
ErrorResult
&
aError
)
;
static
already_AddRefed
<
dom
:
:
Promise
>
CallAsyncWrapper
(
UniquePtr
<
UniffiSyncCallHandler
>
aHandler
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
Sequence
<
dom
:
:
OwningUniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
;
}
;
class
UniffiAsyncCallHandler
:
public
UniffiCallHandlerBase
{
public
:
UniffiAsyncCallHandler
(
PollFutureFn
aPollFn
FreeFutureFn
aFreeFn
)
:
mPollFn
(
aPollFn
)
mFreeFn
(
aFreeFn
)
{
}
protected
:
virtual
void
LowerArgsAndMakeRustCall
(
const
dom
:
:
Sequence
<
dom
:
:
OwningUniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
=
0
;
uint64_t
mFutureHandle
;
PollFutureFn
mPollFn
;
FreeFutureFn
mFreeFn
;
virtual
void
CallCompleteFn
(
RustCallStatus
*
aOutStatus
)
=
0
;
static
void
Poll
(
UniquePtr
<
UniffiAsyncCallHandler
>
aHandler
)
;
public
:
virtual
~
UniffiAsyncCallHandler
(
)
;
static
already_AddRefed
<
dom
:
:
Promise
>
CallAsync
(
UniquePtr
<
UniffiAsyncCallHandler
>
aHandler
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
Sequence
<
dom
:
:
OwningUniFFIScaffoldingValue
>
&
aArgs
ErrorResult
&
aError
)
;
private
:
ResultPromise
mPromise
;
static
void
FutureCallback
(
uint64_t
aCallHandlerHandle
int8_t
aCode
)
;
}
;
}
#
endif
