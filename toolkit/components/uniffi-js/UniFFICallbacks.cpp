#
include
"
nsPrintfCString
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
dom
/
OwnedRustBuffer
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIBinding
.
h
"
#
include
"
mozilla
/
dom
/
UniFFICallbacks
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
static
mozilla
:
:
LazyLogModule
UNIFFI_INVOKE_CALLBACK_LOGGER
(
"
uniffi
"
)
;
namespace
mozilla
:
:
uniffi
{
void
UniffiCallbackMethodHandlerBase
:
:
FireAndForget
(
UniquePtr
<
UniffiCallbackMethodHandlerBase
>
aHandler
StaticRefPtr
<
dom
:
:
UniFFICallbackHandler
>
*
aJsHandler
)
{
nsresult
dispatchResult
=
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
UniFFI
callback
"
[
handler
=
std
:
:
move
(
aHandler
)
aJsHandler
]
(
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY
{
RefPtr
<
dom
:
:
UniFFICallbackHandler
>
jsHandler
=
*
aJsHandler
;
if
(
!
jsHandler
)
{
MOZ_LOG
(
UNIFFI_INVOKE_CALLBACK_LOGGER
LogLevel
:
:
Error
(
"
[
UniFFI
]
%
s
called
but
JS
handler
not
registered
"
handler
-
>
mInterfaceName
)
)
;
return
;
}
JSObject
*
global
=
jsHandler
-
>
CallbackGlobalOrNull
(
)
;
if
(
!
global
)
{
MOZ_LOG
(
UNIFFI_INVOKE_CALLBACK_LOGGER
LogLevel
:
:
Error
(
"
[
UniFFI
]
JS
handler
for
%
s
has
null
global
"
handler
-
>
mInterfaceName
)
)
;
return
;
}
dom
:
:
AutoEntryScript
aes
(
global
handler
-
>
mInterfaceName
)
;
IgnoredErrorResult
error
;
handler
-
>
MakeCall
(
aes
.
cx
(
)
jsHandler
error
)
;
if
(
error
.
Failed
(
)
)
{
MOZ_LOG
(
UNIFFI_INVOKE_CALLBACK_LOGGER
LogLevel
:
:
Error
(
"
[
UniFFI
]
Error
invoking
JS
handler
for
%
s
"
handler
-
>
mInterfaceName
)
)
;
return
;
}
}
)
)
;
if
(
NS_FAILED
(
dispatchResult
)
)
{
MOZ_LOG
(
UNIFFI_INVOKE_CALLBACK_LOGGER
LogLevel
:
:
Error
(
"
[
UniFFI
]
Error
dispatching
UniFFI
callback
task
"
)
)
;
}
}
void
UniffiCallbackFreeHandler
:
:
MakeCall
(
JSContext
*
aCx
dom
:
:
UniFFICallbackHandler
*
aJsHandler
ErrorResult
&
aError
)
{
aJsHandler
-
>
Destroy
(
mObjectHandle
aError
)
;
}
}
