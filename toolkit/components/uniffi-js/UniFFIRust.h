#
ifndef
mozilla_UniFFIRust_h
#
define
mozilla_UniFFIRust_h
#
include
<
stdint
.
h
>
namespace
mozilla
:
:
uniffi
{
constexpr
int8_t
RUST_CALL_SUCCESS
=
0
;
constexpr
int8_t
RUST_CALL_ERROR
=
1
;
constexpr
int8_t
RUST_CALL_INTERNAL_ERROR
=
2
;
constexpr
int8_t
UNIFFI_FUTURE_READY
=
0
;
constexpr
int8_t
UNIFFI_FUTURE_MAYBE_READY
=
1
;
constexpr
int8_t
CALLBACK_INTERFACE_SUCCESS
=
0
;
constexpr
int8_t
CALLBACK_INTERFACE_ERROR
=
1
;
constexpr
int8_t
CALLBACK_INTERFACE_UNEXPECTED_ERROR
=
2
;
extern
"
C
"
{
struct
RustBuffer
{
uint64_t
capacity
;
uint64_t
len
;
uint8_t
*
data
;
}
;
struct
ForeignBytes
{
int32_t
len
;
uint8_t
*
data
;
}
;
struct
RustCallStatus
{
int8_t
code
;
RustBuffer
error_buf
;
}
;
typedef
int
(
*
ForeignCallback
)
(
uint64_t
handle
uint32_t
method
const
uint8_t
*
argsData
int32_t
argsLen
RustBuffer
*
buf_ptr
)
;
typedef
void
(
*
FutureCallback
)
(
uint64_t
futureHandle
int8_t
code
)
;
typedef
void
(
*
PollFutureFn
)
(
uint64_t
futureHandle
FutureCallback
callback
uint64_t
callback_data
)
;
typedef
void
(
*
FreeFutureFn
)
(
uint64_t
futureHandle
)
;
RustBuffer
uniffi_rustbuffer_alloc
(
uint64_t
size
RustCallStatus
*
call_status
)
;
void
uniffi_rustbuffer_free
(
RustBuffer
buf
RustCallStatus
*
call_status
)
;
}
}
#
endif
