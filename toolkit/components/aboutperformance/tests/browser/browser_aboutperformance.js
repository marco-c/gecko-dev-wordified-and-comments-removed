"
use
strict
"
;
const
URL
=
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
aboutperformance
/
tests
/
browser
/
browser_compartments
.
html
?
test
=
"
+
Math
.
random
(
)
;
add_task
(
async
function
init
(
)
{
info
(
"
Setting
up
about
:
performance
"
)
;
let
tabAboutPerformance
=
(
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
performance
"
)
)
;
await
BrowserTestUtils
.
browserLoaded
(
tabAboutPerformance
.
linkedBrowser
)
;
info
(
Setting
up
{
URL
}
)
;
let
tabContent
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
tabContent
.
linkedBrowser
)
;
let
doc
=
tabAboutPerformance
.
linkedBrowser
.
contentDocument
;
let
tbody
=
doc
.
getElementById
(
"
dispatch
-
tbody
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
tbody
.
childElementCount
)
;
await
new
Promise
(
resolve
=
>
{
let
observer
=
new
doc
.
ownerGlobal
.
MutationObserver
(
(
)
=
>
{
observer
.
disconnect
(
)
;
resolve
(
)
;
}
)
;
observer
.
observe
(
tbody
{
childList
:
true
}
)
;
}
)
;
let
row
=
tbody
.
firstChild
;
while
(
row
&
&
row
.
firstChild
.
textContent
!
=
"
Main
frame
for
test
browser_aboutperformance
.
js
"
)
{
row
=
row
.
nextSibling
;
}
Assert
.
ok
(
row
"
found
a
table
row
for
our
test
tab
"
)
;
Assert
.
equal
(
row
.
windowId
tabContent
.
linkedBrowser
.
outerWindowID
"
the
correct
window
id
is
set
"
)
;
let
l10nId
=
row
.
children
[
2
]
.
getAttribute
(
"
data
-
l10n
-
id
"
)
;
Assert
.
ok
(
[
"
energy
-
impact
-
medium
"
"
energy
-
impact
-
high
"
]
.
includes
(
l10nId
)
"
our
test
tab
is
medium
or
high
energy
impact
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
row
{
}
tabAboutPerformance
.
linkedBrowser
.
contentWindow
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
selected
"
)
"
true
"
"
doing
a
single
click
selects
the
row
"
)
;
Assert
.
equal
(
gBrowser
.
selectedTab
tabAboutPerformance
"
the
about
:
performance
tab
is
selected
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
row
{
clickCount
:
2
}
tabAboutPerformance
.
linkedBrowser
.
contentWindow
)
;
Assert
.
equal
(
gBrowser
.
selectedTab
tabContent
"
after
a
double
click
the
test
tab
is
selected
"
)
;
info
(
"
Verify
we
can
toggle
subitems
using
a
twisty
image
button
"
)
;
let
twistyBtn
=
doc
.
querySelector
(
"
tr
>
td
.
root
>
.
twisty
"
)
;
let
groupRow
=
twistyBtn
.
parentNode
.
parentNode
;
Assert
.
ok
(
twistyBtn
.
hasAttribute
(
"
aria
-
label
"
)
"
the
Twisty
image
button
has
an
aria
-
label
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
label
"
)
groupRow
.
firstChild
.
textContent
"
the
Twisty
image
button
'
s
aria
-
label
is
the
same
as
the
Name
of
its
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
role
"
)
"
button
"
"
the
Twisty
image
is
programmatically
a
button
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
tabindex
"
)
"
0
"
"
the
Twisty
image
button
is
included
in
the
focus
order
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
false
"
"
the
Twisty
image
button
is
collapsed
by
default
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
twistyBtn
{
}
tabAboutPerformance
.
linkedBrowser
.
contentWindow
)
;
Assert
.
ok
(
groupRow
.
nextSibling
.
children
[
0
]
.
classList
.
contains
(
"
indent
"
)
"
clicking
a
collapsed
Twisty
adds
subitems
after
the
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
true
"
"
the
Twisty
image
button
is
expanded
after
a
click
"
)
;
twistyBtn
.
focus
(
)
;
Assert
.
equal
(
twistyBtn
doc
.
activeElement
"
the
Twisty
image
button
can
be
focused
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
tabAboutPerformance
.
linkedBrowser
.
contentWindow
)
;
Assert
.
ok
(
!
groupRow
.
nextSibling
.
children
[
0
]
.
classList
.
contains
(
"
indent
"
)
"
pressing
Enter
on
expanded
Twisty
removes
subitems
after
the
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
false
"
"
the
Twisty
image
button
is
collapsed
after
a
keypress
"
)
;
Assert
.
equal
(
twistyBtn
doc
.
activeElement
"
the
Twisty
retains
focus
after
the
page
is
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
"
{
}
tabAboutPerformance
.
linkedBrowser
.
contentWindow
)
;
Assert
.
ok
(
groupRow
.
nextSibling
.
children
[
0
]
.
classList
.
contains
(
"
indent
"
)
"
pressing
Space
on
collapsed
Twisty
adds
subitems
after
the
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
true
"
"
the
Twisty
image
button
is
expanded
after
a
keypress
"
)
;
info
(
"
Verify
the
focus
stays
on
a
twisty
image
button
"
)
;
Assert
.
equal
(
twistyBtn
doc
.
activeElement
"
the
Twisty
retains
focus
after
the
page
is
updated
"
)
;
Assert
.
notEqual
(
doc
.
activeElement
.
tagName
"
body
"
"
the
body
does
not
pull
the
focus
after
the
page
is
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
tabAboutPerformance
.
linkedBrowser
.
contentWindow
)
;
Assert
.
notEqual
(
twistyBtn
doc
.
activeElement
"
the
Twisty
does
not
pull
the
focus
after
the
page
is
updated
"
)
;
info
(
"
Verify
we
can
close
a
tab
using
the
X
button
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabAboutPerformance
)
;
let
tabClosing
=
BrowserTestUtils
.
waitForTabClosing
(
tabContent
)
;
EventUtils
.
synthesizeMouseAtCenter
(
row
.
children
[
4
]
{
}
tabAboutPerformance
.
linkedBrowser
.
contentWindow
)
;
await
tabClosing
;
BrowserTestUtils
.
removeTab
(
tabAboutPerformance
)
;
}
)
;
