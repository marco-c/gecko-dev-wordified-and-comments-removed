"
use
strict
"
;
async
function
setup_tab
(
url
)
{
info
(
Setting
up
{
url
}
)
;
let
tabContent
=
BrowserTestUtils
.
addTab
(
gBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
tabContent
.
linkedBrowser
)
;
await
SpecialPowers
.
spawn
(
tabContent
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
waitForTestReady
(
)
;
}
)
;
return
tabContent
;
}
async
function
setup_about_performance
(
)
{
info
(
"
Setting
up
about
:
performance
"
)
;
let
tabAboutPerformance
=
(
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
performance
"
)
)
;
await
BrowserTestUtils
.
browserLoaded
(
tabAboutPerformance
.
linkedBrowser
)
;
let
doc
=
tabAboutPerformance
.
linkedBrowser
.
contentDocument
;
let
tbody
=
doc
.
getElementById
(
"
dispatch
-
tbody
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
tbody
.
childElementCount
)
;
await
new
Promise
(
resolve
=
>
{
let
observer
=
new
doc
.
ownerGlobal
.
MutationObserver
(
(
)
=
>
{
observer
.
disconnect
(
)
;
resolve
(
)
;
}
)
;
observer
.
observe
(
tbody
{
childList
:
true
}
)
;
}
)
;
return
{
tab
:
tabAboutPerformance
doc
tbody
}
;
}
function
find_row
(
tbody
title
tab
)
{
let
row
=
tbody
.
firstChild
;
while
(
row
&
&
row
.
firstChild
.
textContent
!
=
title
)
{
row
=
row
.
nextSibling
;
}
Assert
.
ok
(
row
"
found
a
table
row
for
our
test
tab
"
)
;
Assert
.
equal
(
row
.
windowId
tab
.
linkedBrowser
.
outerWindowID
"
the
correct
window
id
is
set
"
)
;
return
row
;
}
function
checkEnergyMedHigh
(
row
)
{
let
l10nId
=
row
.
children
[
2
]
.
getAttribute
(
"
data
-
l10n
-
id
"
)
;
Assert
.
ok
(
[
"
energy
-
impact
-
medium
"
"
energy
-
impact
-
high
"
]
.
includes
(
l10nId
)
"
our
test
tab
is
medium
or
high
energy
impact
"
)
;
}
function
checkMemoryAtLeast
(
bytes
row
)
{
let
memCell
=
row
.
children
[
3
]
;
ok
(
memCell
"
Found
the
cell
containing
the
amount
of
memory
"
)
;
let
text
=
memCell
.
textContent
;
ok
(
text
"
Found
the
text
from
the
memory
cell
"
)
;
info
(
Text
is
{
text
}
.
)
;
let
mbStr
=
text
.
match
(
/
^
(
\
d
+
(
\
.
\
d
+
)
?
)
MB
/
)
;
ok
(
mbStr
&
&
mbStr
[
1
]
"
Matched
a
memory
size
in
Megabytes
"
)
;
if
(
!
mbStr
)
{
return
;
}
ok
(
bytes
<
Number
(
mbStr
[
1
]
)
*
1024
*
1024
"
Memory
usage
is
high
enough
"
)
;
}
add_task
(
async
function
test_tab_operations
(
)
{
let
tabContent
=
await
setup_tab
(
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
aboutperformance
/
tests
/
browser
/
browser_compartments
.
html
?
test
=
"
+
Math
.
random
(
)
)
;
let
aboutPerformance
=
await
setup_about_performance
(
)
;
let
row
=
find_row
(
aboutPerformance
.
tbody
"
Main
frame
for
test
browser_aboutperformance
.
js
"
tabContent
)
;
EventUtils
.
synthesizeMouseAtCenter
(
row
{
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
selected
"
)
"
true
"
"
doing
a
single
click
selects
the
row
"
)
;
Assert
.
equal
(
gBrowser
.
selectedTab
aboutPerformance
.
tab
"
the
about
:
performance
tab
is
selected
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
row
{
clickCount
:
2
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
Assert
.
equal
(
gBrowser
.
selectedTab
tabContent
"
after
a
double
click
the
test
tab
is
selected
"
)
;
info
(
"
Verify
we
can
toggle
subitems
using
a
twisty
image
button
"
)
;
let
twistyBtn
=
aboutPerformance
.
doc
.
querySelector
(
"
tr
>
td
.
root
>
.
twisty
"
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
aboutPerformance
.
showInternals
"
false
)
)
{
Assert
.
ok
(
twistyBtn
"
A
twisty
button
was
found
"
)
;
let
groupRow
=
twistyBtn
.
parentNode
.
parentNode
;
Assert
.
ok
(
twistyBtn
.
hasAttribute
(
"
aria
-
label
"
)
"
the
Twisty
image
button
has
an
aria
-
label
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
label
"
)
groupRow
.
firstChild
.
textContent
"
the
Twisty
image
button
'
s
aria
-
label
is
the
same
as
the
Name
of
its
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
role
"
)
"
button
"
"
the
Twisty
image
is
programmatically
a
button
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
tabindex
"
)
"
0
"
"
the
Twisty
image
button
is
included
in
the
focus
order
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
false
"
"
the
Twisty
image
button
is
collapsed
by
default
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
twistyBtn
{
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
Assert
.
ok
(
groupRow
.
nextSibling
.
children
[
0
]
.
classList
.
contains
(
"
indent
"
)
"
clicking
a
collapsed
Twisty
adds
subitems
after
the
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
true
"
"
the
Twisty
image
button
is
expanded
after
a
click
"
)
;
twistyBtn
.
focus
(
)
;
Assert
.
equal
(
twistyBtn
aboutPerformance
.
doc
.
activeElement
"
the
Twisty
image
button
can
be
focused
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
Assert
.
ok
(
!
groupRow
.
nextSibling
.
children
[
0
]
.
classList
.
contains
(
"
indent
"
)
"
pressing
Enter
on
expanded
Twisty
removes
subitems
after
the
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
false
"
"
the
Twisty
image
button
is
collapsed
after
a
keypress
"
)
;
Assert
.
equal
(
twistyBtn
aboutPerformance
.
doc
.
activeElement
"
the
Twisty
retains
focus
after
the
page
is
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
"
{
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
Assert
.
ok
(
groupRow
.
nextSibling
.
children
[
0
]
.
classList
.
contains
(
"
indent
"
)
"
pressing
Space
on
collapsed
Twisty
adds
subitems
after
the
row
"
)
;
Assert
.
equal
(
twistyBtn
.
getAttribute
(
"
aria
-
expanded
"
)
"
true
"
"
the
Twisty
image
button
is
expanded
after
a
keypress
"
)
;
info
(
"
Verify
the
focus
stays
on
a
twisty
image
button
"
)
;
Assert
.
equal
(
twistyBtn
aboutPerformance
.
doc
.
activeElement
"
the
Twisty
retains
focus
after
the
page
is
updated
"
)
;
Assert
.
notEqual
(
aboutPerformance
.
doc
.
activeElement
.
tagName
"
body
"
"
the
body
does
not
pull
the
focus
after
the
page
is
updated
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
Assert
.
notEqual
(
twistyBtn
aboutPerformance
.
doc
.
activeElement
"
the
Twisty
does
not
pull
the
focus
after
the
page
is
updated
"
)
;
}
else
{
Assert
.
ok
(
!
twistyBtn
"
No
twisty
button
should
exist
when
the
showInternals
pref
is
false
"
)
;
}
info
(
"
Verify
we
can
close
a
tab
using
the
X
button
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
aboutPerformance
.
tab
)
;
let
tabClosing
=
BrowserTestUtils
.
waitForTabClosing
(
tabContent
)
;
EventUtils
.
synthesizeMouseAtCenter
(
row
.
children
[
4
]
{
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
await
tabClosing
;
BrowserTestUtils
.
removeTab
(
aboutPerformance
.
tab
)
;
}
)
;
add_task
(
async
function
test_tab_energy
(
)
{
let
tabContent
=
await
setup_tab
(
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
aboutperformance
/
tests
/
browser
/
browser_compartments
.
html
?
test
=
"
+
Math
.
random
(
)
)
;
let
aboutPerformance
=
await
setup_about_performance
(
)
;
let
row
=
find_row
(
aboutPerformance
.
tbody
"
Main
frame
for
test
browser_aboutperformance
.
js
"
tabContent
)
;
checkEnergyMedHigh
(
row
)
;
await
BrowserTestUtils
.
removeTab
(
tabContent
)
;
await
BrowserTestUtils
.
removeTab
(
aboutPerformance
.
tab
)
;
}
)
;
add_task
(
async
function
test_tab_memory
(
)
{
let
tabContent
=
await
setup_tab
(
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
aboutperformance
/
tests
/
browser
/
tab_use_memory
.
html
"
)
;
let
aboutPerformance
=
await
setup_about_performance
(
)
;
let
row
=
find_row
(
aboutPerformance
.
tbody
"
Main
frame
for
test
browser_aboutperformance
.
js
"
tabContent
)
;
checkMemoryAtLeast
(
32
*
1024
*
1024
row
)
;
await
BrowserTestUtils
.
removeTab
(
tabContent
)
;
await
BrowserTestUtils
.
removeTab
(
aboutPerformance
.
tab
)
;
}
)
;
add_task
(
async
function
test_worker_energy
(
)
{
let
tabContent
=
await
setup_tab
(
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
aboutperformance
/
tests
/
browser
/
workers
.
html
"
)
;
let
aboutPerformance
=
await
setup_about_performance
(
)
;
let
row
=
find_row
(
aboutPerformance
.
tbody
"
Main
frame
for
test
browser_aboutperformance
.
js
"
tabContent
)
;
let
button
=
row
.
firstChild
.
firstChild
;
Assert
.
ok
(
button
&
&
button
.
classList
"
Has
a
span
to
create
the
button
"
)
;
Assert
.
ok
(
button
.
classList
.
contains
(
"
twisty
"
)
"
Button
is
expandable
.
"
)
;
Assert
.
ok
(
!
button
.
classList
.
contains
(
"
open
"
)
"
Not
already
open
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
aboutPerformance
.
tab
.
linkedBrowser
.
contentWindow
)
;
Assert
.
ok
(
button
.
classList
.
contains
(
"
open
"
)
"
It
'
s
now
open
"
)
;
row
=
row
.
nextSibling
;
Assert
.
equal
(
row
.
children
[
1
]
.
getAttribute
(
"
data
-
l10n
-
id
"
)
"
type
-
worker
"
)
;
checkEnergyMedHigh
(
row
)
;
await
BrowserTestUtils
.
removeTab
(
tabContent
)
;
await
BrowserTestUtils
.
removeTab
(
aboutPerformance
.
tab
)
;
}
)
;
