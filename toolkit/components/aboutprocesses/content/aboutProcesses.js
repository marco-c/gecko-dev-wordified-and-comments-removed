"
use
strict
"
;
const
TIME_BEFORE_SORTING_AGAIN
=
5000
;
const
BUFFER_SAMPLING_RATE_MS
=
1000
;
const
BUFFER_DURATION_MS
=
10000
;
const
UPDATE_INTERVAL_MS
=
2000
;
const
NS_PER_US
=
1000
;
const
NS_PER_MS
=
1000
*
1000
;
const
NS_PER_S
=
1000
*
1000
*
1000
;
const
NS_PER_MIN
=
NS_PER_S
*
60
;
const
NS_PER_HOUR
=
NS_PER_MIN
*
60
;
const
NS_PER_DAY
=
NS_PER_HOUR
*
24
;
const
ONE_GIGA
=
1024
*
1024
*
1024
;
const
ONE_MEGA
=
1024
*
1024
;
const
ONE_KILO
=
1024
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
WebExtensionPolicy
}
=
Cu
.
getGlobalForObject
(
Services
)
;
const
SHOW_THREADS
=
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
aboutProcesses
.
showThreads
"
)
;
const
SHOW_ALL_SUBFRAMES
=
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
aboutProcesses
.
showAllSubframes
"
)
;
function
wait
(
ms
=
0
)
{
try
{
let
resolve
;
let
p
=
new
Promise
(
resolve_
=
>
{
resolve
=
resolve_
;
}
)
;
setTimeout
(
resolve
ms
)
;
return
p
;
}
catch
(
e
)
{
dump
(
"
WARNING
:
wait
aborted
because
of
an
invalid
Window
state
in
aboutPerformance
.
js
.
\
n
"
)
;
return
undefined
;
}
}
let
gPromisePrefetchedUnits
;
let
tabFinder
=
{
update
(
)
{
this
.
_map
=
new
Map
(
)
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
let
tabbrowser
=
win
.
gBrowser
;
for
(
let
browser
of
tabbrowser
.
browsers
)
{
let
id
=
browser
.
outerWindowID
;
if
(
id
!
=
null
)
{
this
.
_map
.
set
(
id
browser
)
;
}
}
if
(
tabbrowser
.
preloadedBrowser
)
{
let
browser
=
tabbrowser
.
preloadedBrowser
;
if
(
browser
.
outerWindowID
)
{
this
.
_map
.
set
(
browser
.
outerWindowID
browser
)
;
}
}
}
}
get
(
id
)
{
let
browser
=
this
.
_map
.
get
(
id
)
;
if
(
!
browser
)
{
return
null
;
}
let
tabbrowser
=
browser
.
getTabBrowser
(
)
;
if
(
!
tabbrowser
)
{
return
{
tabbrowser
:
null
tab
:
{
getAttribute
(
)
{
return
"
"
;
}
linkedBrowser
:
browser
}
}
;
}
return
{
tabbrowser
tab
:
tabbrowser
.
getTabForBrowser
(
browser
)
}
;
}
}
;
var
State
=
{
_buffer
:
[
]
_latest
:
null
async
_promiseSnapshot
(
)
{
let
date
=
Cu
.
now
(
)
;
let
main
=
await
ChromeUtils
.
requestProcInfo
(
)
;
main
.
date
=
date
;
let
processes
=
new
Map
(
)
;
processes
.
set
(
main
.
pid
main
)
;
for
(
let
child
of
main
.
children
)
{
child
.
date
=
date
;
processes
.
set
(
child
.
pid
child
)
;
}
return
{
processes
date
}
;
}
async
update
(
force
=
false
)
{
if
(
!
this
.
_buffer
.
length
)
{
this
.
_latest
=
await
this
.
_promiseSnapshot
(
)
;
this
.
_buffer
.
push
(
this
.
_latest
)
;
await
wait
(
BUFFER_SAMPLING_RATE_MS
*
1
.
1
)
;
}
let
now
=
Cu
.
now
(
)
;
let
latestInBuffer
=
this
.
_buffer
[
this
.
_buffer
.
length
-
1
]
;
let
deltaT
=
now
-
latestInBuffer
.
date
;
if
(
force
|
|
deltaT
>
BUFFER_SAMPLING_RATE_MS
)
{
this
.
_latest
=
await
this
.
_promiseSnapshot
(
)
;
this
.
_buffer
.
push
(
this
.
_latest
)
;
}
let
oldestInBuffer
=
this
.
_buffer
[
0
]
;
if
(
oldestInBuffer
.
date
+
BUFFER_DURATION_MS
<
this
.
_latest
.
date
)
{
this
.
_buffer
.
shift
(
)
;
}
}
_getThreadDelta
(
cur
prev
deltaT
)
{
let
name
=
cur
.
name
|
|
"
?
?
?
"
;
let
result
=
{
tid
:
cur
.
tid
name
totalCpuUser
:
cur
.
cpuUser
slopeCpuUser
:
null
totalCpuKernel
:
cur
.
cpuKernel
slopeCpuKernel
:
null
totalCpu
:
cur
.
cpuUser
+
cur
.
cpuKernel
slopeCpu
:
null
}
;
if
(
!
prev
)
{
return
result
;
}
if
(
prev
.
tid
!
=
cur
.
tid
)
{
throw
new
Error
(
"
Assertion
failed
:
A
thread
cannot
change
tid
.
"
)
;
}
result
.
slopeCpuUser
=
(
cur
.
cpuUser
-
prev
.
cpuUser
)
/
deltaT
;
result
.
slopeCpuKernel
=
(
cur
.
cpuKernel
-
prev
.
cpuKernel
)
/
deltaT
;
result
.
slopeCpu
=
result
.
slopeCpuKernel
+
result
.
slopeCpuUser
;
return
result
;
}
_getDOMWindows
(
process
)
{
if
(
!
process
.
windows
)
{
return
[
]
;
}
if
(
!
process
.
type
=
=
"
extensions
"
)
{
return
[
]
;
}
let
windows
=
process
.
windows
.
map
(
win
=
>
{
let
tab
=
tabFinder
.
get
(
win
.
outerWindowId
)
;
let
addon
=
process
.
type
=
=
"
extension
"
?
WebExtensionPolicy
.
getByURI
(
win
.
documentURI
)
:
null
;
let
displayRank
;
if
(
tab
)
{
displayRank
=
1
;
}
else
if
(
win
.
isProcessRoot
)
{
displayRank
=
2
;
}
else
if
(
win
.
documentTitle
)
{
displayRank
=
3
;
}
else
{
displayRank
=
4
;
}
return
{
outerWindowId
:
win
.
outerWindowId
documentURI
:
win
.
documentURI
documentTitle
:
win
.
documentTitle
isProcessRoot
:
win
.
isProcessRoot
isInProcess
:
win
.
isInProcess
tab
addon
count
:
1
displayRank
}
;
}
)
;
let
collapsible
=
new
Map
(
)
;
let
result
=
[
]
;
for
(
let
win
of
windows
)
{
if
(
win
.
tab
|
|
win
.
addon
)
{
result
.
push
(
win
)
;
continue
;
}
let
prev
=
collapsible
.
get
(
win
.
documentURI
.
prePath
)
;
if
(
prev
)
{
prev
.
count
+
=
1
;
}
else
{
collapsible
.
set
(
win
.
documentURI
.
prePath
win
)
;
result
.
push
(
win
)
;
}
}
return
result
;
}
_getProcessDelta
(
cur
prev
)
{
let
windows
=
this
.
_getDOMWindows
(
cur
)
;
let
totalRamSize
=
cur
.
type
=
=
"
browser
"
?
cur
.
residentSetSize
:
cur
.
residentUniqueSize
;
let
result
=
{
pid
:
cur
.
pid
childID
:
cur
.
childID
filename
:
cur
.
filename
totalRamSize
deltaRamSize
:
null
totalCpuUser
:
cur
.
cpuUser
slopeCpuUser
:
null
totalCpuKernel
:
cur
.
cpuKernel
slopeCpuKernel
:
null
totalCpu
:
cur
.
cpuUser
+
cur
.
cpuKernel
slopeCpu
:
null
type
:
cur
.
type
origin
:
cur
.
origin
|
|
"
"
threads
:
null
displayRank
:
Control
.
_getDisplayGroupRank
(
cur
windows
)
windows
title
:
null
}
;
let
titles
=
[
.
.
.
new
Set
(
result
.
windows
.
filter
(
win
=
>
win
.
documentTitle
)
.
map
(
win
=
>
win
.
documentTitle
)
)
]
;
if
(
titles
.
length
=
=
1
)
{
result
.
title
=
titles
[
0
]
;
}
if
(
!
prev
)
{
if
(
SHOW_THREADS
)
{
result
.
threads
=
cur
.
threads
.
map
(
data
=
>
this
.
_getThreadDelta
(
data
null
null
)
)
;
}
return
result
;
}
if
(
prev
.
pid
!
=
cur
.
pid
)
{
throw
new
Error
(
"
Assertion
failed
:
A
process
cannot
change
pid
.
"
)
;
}
let
deltaT
=
(
cur
.
date
-
prev
.
date
)
*
NS_PER_MS
;
let
threads
=
null
;
if
(
SHOW_THREADS
)
{
let
prevThreads
=
new
Map
(
)
;
for
(
let
thread
of
prev
.
threads
)
{
prevThreads
.
set
(
thread
.
tid
thread
)
;
}
threads
=
cur
.
threads
.
map
(
curThread
=
>
{
let
prevThread
=
prevThreads
.
get
(
curThread
.
tid
)
;
if
(
!
prevThread
)
{
return
this
.
_getThreadDelta
(
curThread
)
;
}
return
this
.
_getThreadDelta
(
curThread
prevThread
deltaT
)
;
}
)
;
}
result
.
deltaRamSize
=
cur
.
type
=
=
"
browser
"
?
cur
.
residentSetSize
-
prev
.
residentSetSize
:
cur
.
residentUniqueSize
-
prev
.
residentUniqueSize
;
result
.
slopeCpuUser
=
(
cur
.
cpuUser
-
prev
.
cpuUser
)
/
deltaT
;
result
.
slopeCpuKernel
=
(
cur
.
cpuKernel
-
prev
.
cpuKernel
)
/
deltaT
;
result
.
slopeCpu
=
result
.
slopeCpuUser
+
result
.
slopeCpuKernel
;
result
.
threads
=
threads
;
return
result
;
}
getCounters
(
)
{
tabFinder
.
update
(
)
;
let
current
=
this
.
_latest
;
let
counters
=
[
]
;
for
(
let
cur
of
current
.
processes
.
values
(
)
)
{
let
oldest
=
null
;
let
delta
;
for
(
let
index
=
0
;
index
<
=
this
.
_buffer
.
length
-
2
;
+
+
index
)
{
oldest
=
this
.
_buffer
[
index
]
.
processes
.
get
(
cur
.
pid
)
;
if
(
oldest
)
{
break
;
}
}
if
(
oldest
)
{
delta
=
this
.
_getProcessDelta
(
cur
oldest
)
;
}
else
{
delta
=
this
.
_getProcessDelta
(
cur
null
)
;
}
counters
.
push
(
delta
)
;
}
return
counters
;
}
}
;
var
View
=
{
_killedRecently
:
[
]
commit
(
)
{
this
.
_killedRecently
.
length
=
0
;
let
tbody
=
document
.
getElementById
(
"
process
-
tbody
"
)
;
let
insertPoint
=
tbody
.
firstChild
;
let
nextRow
;
while
(
(
nextRow
=
this
.
_orderedRows
.
shift
(
)
)
)
{
if
(
insertPoint
&
&
insertPoint
=
=
=
nextRow
)
{
insertPoint
=
insertPoint
.
nextSibling
;
}
else
{
tbody
.
insertBefore
(
nextRow
insertPoint
)
;
}
}
if
(
insertPoint
)
{
while
(
(
nextRow
=
insertPoint
.
nextSibling
)
)
{
this
.
_removeRow
(
nextRow
)
;
}
this
.
_removeRow
(
insertPoint
)
;
}
}
discardUpdate
(
)
{
for
(
let
row
of
this
.
_orderedRows
)
{
if
(
!
row
.
parentNode
)
{
this
.
_rowsById
.
delete
(
row
.
rowId
)
;
}
}
this
.
_orderedRows
=
[
]
;
}
insertAfterRow
(
row
)
{
let
tbody
=
row
.
parentNode
;
let
nextRow
;
while
(
(
nextRow
=
this
.
_orderedRows
.
shift
(
)
)
)
{
tbody
.
insertBefore
(
nextRow
row
.
nextSibling
)
;
}
}
_rowsById
:
new
Map
(
)
_removeRow
(
row
)
{
this
.
_rowsById
.
delete
(
row
.
rowId
)
;
row
.
remove
(
)
;
}
_getOrCreateRow
(
rowId
cellCount
)
{
let
row
=
this
.
_rowsById
.
get
(
rowId
)
;
if
(
!
row
)
{
row
=
document
.
createElement
(
"
tr
"
)
;
while
(
cellCount
-
-
)
{
row
.
appendChild
(
document
.
createElement
(
"
td
"
)
)
;
}
row
.
rowId
=
rowId
;
this
.
_rowsById
.
set
(
rowId
row
)
;
}
this
.
_orderedRows
.
push
(
row
)
;
return
row
;
}
displayProcessRow
(
data
units
)
{
const
cellCount
=
4
;
let
rowId
=
"
p
:
"
+
data
.
pid
;
let
row
=
this
.
_getOrCreateRow
(
rowId
cellCount
)
;
row
.
process
=
data
;
{
let
classNames
=
"
process
"
;
if
(
data
.
isHung
)
{
classNames
+
=
"
hung
"
;
}
row
.
className
=
classNames
;
}
let
nameCell
=
row
.
firstChild
;
{
let
fluentName
;
let
classNames
=
[
]
;
switch
(
data
.
type
)
{
case
"
web
"
:
fluentName
=
"
about
-
processes
-
web
-
process
-
name
"
;
break
;
case
"
webIsolated
"
:
fluentName
=
"
about
-
processes
-
web
-
isolated
-
process
-
name
"
;
break
;
case
"
webLargeAllocation
"
:
fluentName
=
"
about
-
processes
-
web
-
large
-
allocation
-
process
-
name
"
;
break
;
case
"
file
"
:
fluentName
=
"
about
-
processes
-
file
-
process
-
name
"
;
break
;
case
"
extension
"
:
fluentName
=
"
about
-
processes
-
extension
-
process
-
name
"
;
classNames
=
[
"
extensions
"
]
;
break
;
case
"
privilegedabout
"
:
fluentName
=
"
about
-
processes
-
privilegedabout
-
process
-
name
"
;
break
;
case
"
withCoopCoep
"
:
fluentName
=
"
about
-
processes
-
with
-
coop
-
coep
-
process
-
name
"
;
break
;
case
"
browser
"
:
fluentName
=
"
about
-
processes
-
browser
-
process
-
name
"
;
break
;
case
"
plugin
"
:
fluentName
=
"
about
-
processes
-
plugin
-
process
-
name
"
;
break
;
case
"
gmpPlugin
"
:
fluentName
=
"
about
-
processes
-
gmp
-
plugin
-
process
-
name
"
;
break
;
case
"
gpu
"
:
fluentName
=
"
about
-
processes
-
gpu
-
process
-
name
"
;
break
;
case
"
vr
"
:
fluentName
=
"
about
-
processes
-
vr
-
process
-
name
"
;
break
;
case
"
rdd
"
:
fluentName
=
"
about
-
processes
-
rdd
-
process
-
name
"
;
break
;
case
"
socket
"
:
fluentName
=
"
about
-
processes
-
socket
-
process
-
name
"
;
break
;
case
"
remoteSandboxBroker
"
:
fluentName
=
"
about
-
processes
-
remote
-
sandbox
-
broker
-
process
-
name
"
;
break
;
case
"
forkServer
"
:
fluentName
=
"
about
-
processes
-
fork
-
server
-
process
-
name
"
;
break
;
case
"
preallocated
"
:
fluentName
=
"
about
-
processes
-
preallocated
-
process
-
name
"
;
break
;
default
:
fluentName
=
"
about
-
processes
-
unknown
-
process
-
name
"
;
break
;
}
this
.
_fillCell
(
nameCell
{
fluentName
fluentArgs
:
{
pid
:
"
"
+
data
.
pid
origin
:
data
.
origin
type
:
data
.
type
}
classes
:
[
"
type
"
"
favicon
"
.
.
.
classNames
]
}
)
;
let
image
;
switch
(
data
.
type
)
{
case
"
browser
"
:
case
"
privilegedabout
"
:
image
=
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
;
break
;
case
"
extension
"
:
image
=
"
chrome
:
/
/
mozapps
/
skin
/
extensions
/
extension
.
svg
"
;
break
;
default
:
for
(
let
win
of
data
.
windows
|
|
[
]
)
{
if
(
!
win
.
tab
)
{
continue
;
}
let
favicon
=
win
.
tab
.
tab
.
getAttribute
(
"
image
"
)
;
if
(
!
favicon
)
{
}
else
if
(
!
image
)
{
image
=
favicon
;
}
else
if
(
image
=
=
favicon
)
{
}
else
{
image
=
null
;
break
;
}
}
if
(
!
image
)
{
image
=
"
chrome
:
/
/
browser
/
skin
/
link
.
svg
"
;
}
}
nameCell
.
style
.
backgroundImage
=
url
(
'
{
image
}
'
)
;
}
let
memoryCell
=
nameCell
.
nextSibling
;
{
let
formattedTotal
=
this
.
_formatMemory
(
data
.
totalRamSize
)
;
if
(
data
.
deltaRamSize
)
{
let
formattedDelta
=
this
.
_formatMemory
(
data
.
deltaRamSize
)
;
this
.
_fillCell
(
memoryCell
{
fluentName
:
"
about
-
processes
-
total
-
memory
-
size
"
fluentArgs
:
{
total
:
formattedTotal
.
amount
totalUnit
:
units
.
memory
[
formattedTotal
.
unit
]
delta
:
Math
.
abs
(
formattedDelta
.
amount
)
deltaUnit
:
units
.
memory
[
formattedDelta
.
unit
]
deltaSign
:
data
.
deltaRamSize
>
0
?
"
+
"
:
"
-
"
}
classes
:
[
"
memory
"
]
}
)
;
}
else
{
this
.
_fillCell
(
memoryCell
{
fluentName
:
"
about
-
processes
-
total
-
memory
-
size
-
no
-
change
"
fluentArgs
:
{
total
:
formattedTotal
.
amount
totalUnit
:
units
.
memory
[
formattedTotal
.
unit
]
}
classes
:
[
"
memory
"
]
}
)
;
}
}
let
cpuCell
=
memoryCell
.
nextSibling
;
if
(
data
.
slopeCpu
=
=
null
)
{
this
.
_fillCell
(
cpuCell
{
fluentName
:
"
about
-
processes
-
cpu
-
user
-
and
-
kernel
-
not
-
ready
"
classes
:
[
"
cpu
"
]
}
)
;
}
else
{
let
{
duration
unit
}
=
this
.
_getDuration
(
data
.
totalCpu
)
;
let
localizedUnit
=
units
.
duration
[
unit
]
;
if
(
data
.
slopeCpu
=
=
0
)
{
this
.
_fillCell
(
cpuCell
{
fluentName
:
"
about
-
processes
-
cpu
-
user
-
and
-
kernel
-
idle
"
fluentArgs
:
{
total
:
duration
unit
:
localizedUnit
}
classes
:
[
"
cpu
"
]
}
)
;
}
else
{
this
.
_fillCell
(
cpuCell
{
fluentName
:
"
about
-
processes
-
cpu
-
user
-
and
-
kernel
"
fluentArgs
:
{
percent
:
data
.
slopeCpu
total
:
duration
unit
:
localizedUnit
}
classes
:
[
"
cpu
"
]
}
)
;
}
}
let
killButton
=
cpuCell
.
nextSibling
;
killButton
.
className
=
"
action
-
icon
"
;
if
(
[
"
web
"
"
webIsolated
"
"
webLargeAllocation
"
]
.
includes
(
data
.
type
)
)
{
if
(
this
.
_killedRecently
.
some
(
kill
=
>
kill
.
pid
&
&
kill
.
pid
=
=
data
.
pid
)
)
{
row
.
classList
.
add
(
"
killed
"
)
;
}
else
{
killButton
.
classList
.
add
(
"
close
-
icon
"
)
;
document
.
l10n
.
setAttributes
(
killButton
"
about
-
processes
-
shutdown
-
process
"
)
;
}
}
return
row
;
}
displayThreadSummaryRow
(
data
)
{
const
cellCount
=
2
;
let
rowId
=
"
ts
:
"
+
data
.
pid
;
let
row
=
this
.
_getOrCreateRow
(
rowId
cellCount
)
;
row
.
process
=
data
;
row
.
className
=
"
thread
-
summary
"
;
let
isOpen
=
false
;
let
nameCell
=
row
.
firstChild
;
let
fluentName
=
"
about
-
processes
-
thread
-
summary
"
;
let
fluentArgs
=
{
number
:
data
.
threads
.
length
}
;
if
(
!
nameCell
.
firstChild
)
{
this
.
_fillCell
(
nameCell
{
fluentName
fluentArgs
classes
:
[
"
name
"
"
indent
"
]
}
)
;
let
img
=
document
.
createElement
(
"
span
"
)
;
img
.
classList
.
add
(
"
twisty
"
)
;
nameCell
.
insertBefore
(
img
nameCell
.
firstChild
)
;
}
else
{
let
img
=
nameCell
.
firstChild
;
isOpen
=
img
.
classList
.
contains
(
"
open
"
)
;
let
span
=
img
.
nextSibling
;
document
.
l10n
.
setAttributes
(
span
fluentName
fluentArgs
)
;
}
let
actionCell
=
nameCell
.
nextSibling
;
actionCell
.
className
=
"
action
-
icon
"
;
return
isOpen
;
}
displayDOMWindowRow
(
data
parent
)
{
const
cellCount
=
2
;
let
rowId
=
"
w
:
"
+
data
.
outerWindowId
;
let
row
=
this
.
_getOrCreateRow
(
rowId
cellCount
)
;
row
.
win
=
data
;
row
.
className
=
"
window
"
;
let
nameCell
=
row
.
firstChild
;
let
tab
=
tabFinder
.
get
(
data
.
outerWindowId
)
;
let
fluentName
;
let
name
;
let
className
;
if
(
parent
.
type
=
=
"
extension
"
)
{
fluentName
=
"
about
-
processes
-
extension
-
name
"
;
if
(
data
.
addon
)
{
name
=
data
.
addon
.
name
;
}
else
if
(
data
.
documentURI
.
scheme
=
=
"
about
"
)
{
name
=
data
.
documentURI
.
spec
;
}
else
{
name
=
data
.
documentURI
.
host
;
}
}
else
if
(
tab
&
&
tab
.
tabbrowser
)
{
fluentName
=
"
about
-
processes
-
tab
-
name
"
;
name
=
data
.
documentTitle
;
className
=
"
tab
"
;
}
else
if
(
tab
)
{
fluentName
=
"
about
-
processes
-
preloaded
-
tab
"
;
name
=
null
;
className
=
"
preloaded
-
tab
"
;
}
else
if
(
data
.
count
=
=
1
)
{
fluentName
=
"
about
-
processes
-
frame
-
name
-
one
"
;
name
=
data
.
prePath
;
className
=
"
frame
-
one
"
;
}
else
{
fluentName
=
"
about
-
processes
-
frame
-
name
-
many
"
;
name
=
data
.
prePath
;
className
=
"
frame
-
many
"
;
}
this
.
_fillCell
(
nameCell
{
fluentName
fluentArgs
:
{
name
url
:
data
.
documentURI
.
spec
number
:
data
.
count
shortUrl
:
data
.
documentURI
.
scheme
=
=
"
about
"
?
data
.
documentURI
.
spec
:
data
.
documentURI
.
prePath
}
classes
:
[
"
name
"
"
indent
"
"
favicon
"
className
]
}
)
;
let
image
=
tab
?
.
tab
.
getAttribute
(
"
image
"
)
;
if
(
image
)
{
nameCell
.
style
.
backgroundImage
=
url
(
'
{
image
}
'
)
;
}
let
killButton
=
nameCell
.
nextSibling
;
killButton
.
className
=
"
action
-
icon
"
;
if
(
data
.
tab
&
&
data
.
tab
.
tabbrowser
)
{
if
(
this
.
_killedRecently
.
some
(
kill
=
>
kill
.
windowId
&
&
kill
.
windowId
=
=
data
.
outerWindowId
)
)
{
row
.
classList
.
add
(
"
killed
"
)
;
}
else
{
killButton
.
classList
.
add
(
"
close
-
icon
"
)
;
document
.
l10n
.
setAttributes
(
killButton
"
about
-
processes
-
shutdown
-
tab
"
)
;
}
}
}
displayThreadRow
(
data
units
)
{
const
cellCount
=
3
;
let
rowId
=
"
t
:
"
+
data
.
tid
;
let
row
=
this
.
_getOrCreateRow
(
rowId
cellCount
)
;
row
.
thread
=
data
;
row
.
className
=
"
thread
"
;
let
nameCell
=
row
.
firstChild
;
this
.
_fillCell
(
nameCell
{
fluentName
:
"
about
-
processes
-
thread
-
name
"
fluentArgs
:
{
name
:
data
.
name
tid
:
"
"
+
data
.
tid
}
classes
:
[
"
name
"
"
double_indent
"
]
}
)
;
let
cpuCell
=
nameCell
.
nextSibling
;
if
(
data
.
slopeCpu
=
=
null
)
{
this
.
_fillCell
(
cpuCell
{
fluentName
:
"
about
-
processes
-
cpu
-
user
-
and
-
kernel
-
not
-
ready
"
classes
:
[
"
cpu
"
]
}
)
;
}
else
{
let
{
duration
unit
}
=
this
.
_getDuration
(
data
.
totalCpu
)
;
let
localizedUnit
=
units
.
duration
[
unit
]
;
if
(
data
.
slopeCpu
=
=
0
)
{
this
.
_fillCell
(
cpuCell
{
fluentName
:
"
about
-
processes
-
cpu
-
user
-
and
-
kernel
-
idle
"
fluentArgs
:
{
total
:
duration
unit
:
localizedUnit
}
classes
:
[
"
cpu
"
]
}
)
;
}
else
{
this
.
_fillCell
(
cpuCell
{
fluentName
:
"
about
-
processes
-
cpu
-
user
-
and
-
kernel
"
fluentArgs
:
{
percent
:
data
.
slopeCpu
total
:
duration
unit
:
localizedUnit
}
classes
:
[
"
cpu
"
]
}
)
;
}
}
}
_orderedRows
:
[
]
_fillCell
(
elt
{
classes
fluentName
fluentArgs
}
)
{
let
span
=
elt
.
firstChild
;
if
(
!
span
)
{
span
=
document
.
createElement
(
"
span
"
)
;
elt
.
appendChild
(
span
)
;
}
document
.
l10n
.
setAttributes
(
span
fluentName
fluentArgs
)
;
elt
.
className
=
classes
.
join
(
"
"
)
;
}
_getDuration
(
rawDurationNS
)
{
if
(
rawDurationNS
<
=
NS_PER_US
)
{
return
{
duration
:
rawDurationNS
unit
:
"
ns
"
}
;
}
if
(
rawDurationNS
<
=
NS_PER_MS
)
{
return
{
duration
:
rawDurationNS
/
NS_PER_US
unit
:
"
us
"
}
;
}
if
(
rawDurationNS
<
=
NS_PER_S
)
{
return
{
duration
:
rawDurationNS
/
NS_PER_MS
unit
:
"
ms
"
}
;
}
if
(
rawDurationNS
<
=
NS_PER_MIN
)
{
return
{
duration
:
rawDurationNS
/
NS_PER_S
unit
:
"
s
"
}
;
}
if
(
rawDurationNS
<
=
NS_PER_HOUR
)
{
return
{
duration
:
rawDurationNS
/
NS_PER_MIN
unit
:
"
m
"
}
;
}
if
(
rawDurationNS
<
=
NS_PER_DAY
)
{
return
{
duration
:
rawDurationNS
/
NS_PER_HOUR
unit
:
"
h
"
}
;
}
return
{
duration
:
rawDurationNS
/
NS_PER_DAY
unit
:
"
d
"
}
;
}
_formatMemory
(
value
)
{
if
(
value
=
=
null
)
{
return
{
unit
:
"
?
"
amount
:
0
}
;
}
if
(
typeof
value
!
=
"
number
"
)
{
throw
new
Error
(
Invalid
memory
value
{
value
}
)
;
}
let
abs
=
Math
.
abs
(
value
)
;
if
(
abs
>
=
ONE_GIGA
)
{
return
{
unit
:
"
GB
"
amount
:
value
/
ONE_GIGA
}
;
}
if
(
abs
>
=
ONE_MEGA
)
{
return
{
unit
:
"
MB
"
amount
:
value
/
ONE_MEGA
}
;
}
if
(
abs
>
=
ONE_KILO
)
{
return
{
unit
:
"
KB
"
amount
:
value
/
ONE_KILO
}
;
}
return
{
unit
:
"
B
"
amount
:
value
}
;
}
}
;
var
Control
=
{
_hungItems
:
new
Set
(
)
_sortColumn
:
null
_sortAscendent
:
true
_removeSubtree
(
row
)
{
let
sibling
=
row
.
nextSibling
;
while
(
sibling
&
&
!
sibling
.
classList
.
contains
(
"
process
"
)
)
{
let
next
=
sibling
.
nextSibling
;
if
(
sibling
.
classList
.
contains
(
"
thread
"
)
)
{
View
.
_removeRow
(
sibling
)
;
}
sibling
=
next
;
}
}
init
(
)
{
this
.
_initHangReports
(
)
;
gPromisePrefetchedUnits
=
(
async
function
(
)
{
let
[
ns
us
ms
s
m
h
d
B
KB
MB
GB
TB
PB
EB
]
=
await
document
.
l10n
.
formatValues
(
[
{
id
:
"
duration
-
unit
-
ns
"
}
{
id
:
"
duration
-
unit
-
us
"
}
{
id
:
"
duration
-
unit
-
ms
"
}
{
id
:
"
duration
-
unit
-
s
"
}
{
id
:
"
duration
-
unit
-
m
"
}
{
id
:
"
duration
-
unit
-
h
"
}
{
id
:
"
duration
-
unit
-
d
"
}
{
id
:
"
memory
-
unit
-
B
"
}
{
id
:
"
memory
-
unit
-
KB
"
}
{
id
:
"
memory
-
unit
-
MB
"
}
{
id
:
"
memory
-
unit
-
GB
"
}
{
id
:
"
memory
-
unit
-
TB
"
}
{
id
:
"
memory
-
unit
-
PB
"
}
{
id
:
"
memory
-
unit
-
EB
"
}
]
)
;
return
{
duration
:
{
ns
us
ms
s
m
h
d
}
memory
:
{
B
KB
MB
GB
TB
PB
EB
}
}
;
}
)
(
)
;
let
tbody
=
document
.
getElementById
(
"
process
-
tbody
"
)
;
tbody
.
addEventListener
(
"
click
"
event
=
>
{
this
.
_updateLastMouseEvent
(
)
;
let
target
=
event
.
target
;
if
(
target
.
classList
.
contains
(
"
twisty
"
)
)
{
this
.
_handleTwisty
(
target
)
;
return
;
}
if
(
target
.
classList
.
contains
(
"
close
-
icon
"
)
)
{
this
.
_handleKill
(
target
)
;
return
;
}
let
row
=
target
.
closest
(
"
tr
"
)
;
if
(
!
row
)
{
return
;
}
if
(
this
.
selectedRow
)
{
this
.
selectedRow
.
removeAttribute
(
"
selected
"
)
;
if
(
this
.
selectedRow
.
rowId
=
=
row
.
rowId
)
{
this
.
selectedRow
=
null
;
return
;
}
}
row
.
setAttribute
(
"
selected
"
"
true
"
)
;
this
.
selectedRow
=
row
;
}
)
;
tbody
.
addEventListener
(
"
dblclick
"
event
=
>
{
this
.
_updateLastMouseEvent
(
)
;
event
.
stopPropagation
(
)
;
for
(
let
target
=
event
.
target
;
target
&
&
target
.
getAttribute
(
"
id
"
)
!
=
"
process
-
tbody
"
;
target
=
target
.
parentNode
)
{
if
(
target
.
classList
.
contains
(
"
tab
"
)
)
{
let
{
tab
tabbrowser
}
=
target
.
parentNode
.
win
.
tab
;
tabbrowser
.
selectedTab
=
tab
;
tabbrowser
.
ownerGlobal
.
focus
(
)
;
return
;
}
if
(
target
.
classList
.
contains
(
"
extensions
"
)
)
{
let
parentWin
=
window
.
docShell
.
browsingContext
.
embedderElement
.
ownerGlobal
;
parentWin
.
BrowserOpenAddonsMgr
(
)
;
return
;
}
}
}
)
;
tbody
.
addEventListener
(
"
mousemove
"
(
)
=
>
{
this
.
_updateLastMouseEvent
(
)
;
}
)
;
window
.
addEventListener
(
"
visibilitychange
"
event
=
>
{
if
(
!
document
.
hidden
)
{
this
.
_updateDisplay
(
true
)
;
}
}
)
;
document
.
getElementById
(
"
process
-
thead
"
)
.
addEventListener
(
"
click
"
async
event
=
>
{
if
(
!
event
.
target
.
classList
.
contains
(
"
clickable
"
)
)
{
return
;
}
if
(
this
.
_sortColumn
)
{
const
td
=
document
.
getElementById
(
this
.
_sortColumn
)
;
td
.
classList
.
remove
(
"
asc
"
)
;
td
.
classList
.
remove
(
"
desc
"
)
;
}
const
columnId
=
event
.
target
.
id
;
if
(
columnId
=
=
this
.
_sortColumn
)
{
this
.
_sortAscendent
=
!
this
.
_sortAscendent
;
}
else
{
this
.
_sortColumn
=
columnId
;
this
.
_sortAscendent
=
true
;
}
if
(
this
.
_sortAscendent
)
{
event
.
target
.
classList
.
remove
(
"
desc
"
)
;
event
.
target
.
classList
.
add
(
"
asc
"
)
;
}
else
{
event
.
target
.
classList
.
remove
(
"
asc
"
)
;
event
.
target
.
classList
.
add
(
"
desc
"
)
;
}
await
this
.
_updateDisplay
(
true
)
;
}
)
;
}
_lastMouseEvent
:
0
_updateLastMouseEvent
(
)
{
this
.
_lastMouseEvent
=
Date
.
now
(
)
;
}
_initHangReports
(
)
{
const
PROCESS_HANG_REPORT_NOTIFICATION
=
"
process
-
hang
-
report
"
;
let
hangReporter
=
report
=
>
{
report
.
QueryInterface
(
Ci
.
nsIHangReport
)
;
this
.
_hungItems
.
add
(
report
.
childID
)
;
}
;
Services
.
obs
.
addObserver
(
hangReporter
PROCESS_HANG_REPORT_NOTIFICATION
)
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
Services
.
obs
.
removeObserver
(
hangReporter
PROCESS_HANG_REPORT_NOTIFICATION
)
;
}
{
once
:
true
}
)
;
}
async
update
(
force
=
false
)
{
await
State
.
update
(
force
)
;
if
(
document
.
hidden
)
{
return
;
}
await
wait
(
0
)
;
await
this
.
_updateDisplay
(
force
)
;
}
async
_updateDisplay
(
force
=
false
)
{
let
counters
=
State
.
getCounters
(
)
;
let
units
=
await
gPromisePrefetchedUnits
;
let
hungItems
=
this
.
_hungItems
;
this
.
_hungItems
=
new
Set
(
)
;
counters
=
this
.
_sortProcesses
(
counters
)
;
let
previousProcess
=
null
;
for
(
let
process
of
counters
)
{
this
.
_sortDOMWindows
(
process
.
windows
)
;
process
.
isHung
=
process
.
childID
&
&
hungItems
.
has
(
process
.
childID
)
;
let
processRow
=
View
.
displayProcessRow
(
process
units
)
;
if
(
process
.
type
!
=
"
extension
"
)
{
for
(
let
win
of
process
.
windows
)
{
if
(
SHOW_ALL_SUBFRAMES
|
|
win
.
tab
|
|
win
.
isProcessRoot
)
{
View
.
displayDOMWindowRow
(
win
process
)
;
}
}
}
if
(
SHOW_THREADS
)
{
if
(
View
.
displayThreadSummaryRow
(
process
)
)
{
this
.
_showThreads
(
processRow
units
)
;
}
}
if
(
this
.
_sortColumn
=
=
null
&
&
previousProcess
&
&
previousProcess
.
displayRank
!
=
process
.
displayRank
)
{
processRow
.
classList
.
add
(
"
separate
-
from
-
previous
-
process
-
group
"
)
;
}
previousProcess
=
process
;
}
if
(
!
force
&
&
Date
.
now
(
)
-
this
.
_lastMouseEvent
<
TIME_BEFORE_SORTING_AGAIN
)
{
View
.
discardUpdate
(
)
;
return
;
}
View
.
commit
(
)
;
if
(
this
.
selectedRow
&
&
!
this
.
selectedRow
.
parentNode
)
{
this
.
selectedRow
=
null
;
}
}
_showThreads
(
row
units
)
{
let
process
=
row
.
process
;
this
.
_sortThreads
(
process
.
threads
)
;
for
(
let
thread
of
process
.
threads
)
{
View
.
displayThreadRow
(
thread
units
)
;
}
}
_sortThreads
(
threads
)
{
return
threads
.
sort
(
(
a
b
)
=
>
{
let
order
;
switch
(
this
.
_sortColumn
)
{
case
"
column
-
name
"
:
order
=
a
.
name
.
localeCompare
(
b
.
name
)
|
|
a
.
pid
-
b
.
pid
;
break
;
case
"
column
-
cpu
-
total
"
:
order
=
b
.
slopeCpu
-
a
.
slopeCpu
;
break
;
case
"
column
-
memory
-
resident
"
:
case
"
column
-
pid
"
:
case
null
:
order
=
b
.
tid
-
a
.
tid
;
break
;
default
:
throw
new
Error
(
"
Unsupported
order
:
"
+
this
.
_sortColumn
)
;
}
if
(
!
this
.
_sortAscendent
)
{
order
=
-
order
;
}
return
order
;
}
)
;
}
_sortProcesses
(
counters
)
{
return
counters
.
sort
(
(
a
b
)
=
>
{
let
order
;
switch
(
this
.
_sortColumn
)
{
case
"
column
-
pid
"
:
order
=
b
.
pid
-
a
.
pid
;
break
;
case
"
column
-
name
"
:
order
=
String
(
a
.
origin
)
.
localeCompare
(
b
.
origin
)
|
|
String
(
a
.
type
)
.
localeCompare
(
b
.
type
)
|
|
a
.
pid
-
b
.
pid
;
break
;
case
"
column
-
cpu
-
total
"
:
order
=
b
.
slopeCpu
-
a
.
slopeCpu
;
break
;
case
"
column
-
memory
-
resident
"
:
order
=
b
.
totalRamSize
-
a
.
totalRamSize
;
break
;
case
null
:
order
=
a
.
displayRank
-
b
.
displayRank
|
|
String
(
a
.
origin
)
.
localeCompare
(
b
.
origin
)
;
break
;
default
:
throw
new
Error
(
"
Unsupported
order
:
"
+
this
.
_sortColumn
)
;
}
if
(
!
this
.
_sortAscendent
)
{
order
=
-
order
;
}
return
order
;
}
)
;
}
_sortDOMWindows
(
windows
)
{
return
windows
.
sort
(
(
a
b
)
=
>
{
let
order
=
a
.
displayRank
-
b
.
displayRank
|
|
a
.
documentTitle
.
localeCompare
(
b
.
documentTitle
)
|
|
a
.
documentURI
.
spec
.
localeCompare
(
b
.
documentURI
.
spec
)
;
if
(
!
this
.
_sortAscendent
)
{
order
=
-
order
;
}
return
order
;
}
)
;
}
_getDisplayGroupRank
(
data
windows
)
{
const
RANK_BROWSER
=
0
;
const
RANK_WEB_TABS
=
1
;
const
RANK_WEB_FRAMES
=
2
;
const
RANK_UTILITY
=
3
;
const
RANK_PREALLOCATED
=
4
;
let
type
=
data
.
type
;
switch
(
type
)
{
case
"
browser
"
:
return
RANK_BROWSER
;
case
"
webIsolated
"
:
case
"
webLargeAllocation
"
:
case
"
withCoopCoep
"
:
{
if
(
windows
.
some
(
w
=
>
w
.
tab
)
)
{
return
RANK_WEB_TABS
;
}
return
RANK_WEB_FRAMES
;
}
case
"
preallocated
"
:
return
RANK_PREALLOCATED
;
case
"
web
"
:
if
(
windows
.
some
(
w
=
>
w
.
tab
)
)
{
return
RANK_WEB_TABS
;
}
if
(
windows
.
length
>
=
1
)
{
return
RANK_WEB_FRAMES
;
}
return
RANK_PREALLOCATED
;
default
:
return
RANK_UTILITY
;
}
}
async
_handleTwisty
(
target
)
{
let
units
=
await
gPromisePrefetchedUnits
;
let
row
=
target
.
parentNode
.
parentNode
;
if
(
target
.
classList
.
toggle
(
"
open
"
)
)
{
this
.
_showThreads
(
row
units
)
;
View
.
insertAfterRow
(
row
)
;
}
else
{
this
.
_removeSubtree
(
row
)
;
}
}
_handleKill
(
target
)
{
let
row
=
target
.
parentNode
;
if
(
row
.
process
)
{
let
pid
=
row
.
process
.
pid
;
View
.
_killedRecently
.
push
(
{
pid
}
)
;
row
.
classList
.
add
(
"
killing
"
)
;
for
(
let
childRow
=
row
.
nextSibling
;
childRow
&
&
!
childRow
.
classList
.
contains
(
"
process
"
)
;
childRow
=
childRow
.
nextSibling
)
{
childRow
.
classList
.
add
(
"
killing
"
)
;
let
win
=
childRow
.
win
;
if
(
win
)
{
View
.
_killedRecently
.
push
(
{
pid
:
win
.
outerWindowId
}
)
;
if
(
win
.
tab
&
&
win
.
tab
.
tabbrowser
)
{
win
.
tab
.
tabbrowser
.
discardBrowser
(
win
.
tab
.
tab
true
)
;
}
}
}
const
ProcessTools
=
Cc
[
"
mozilla
.
org
/
processtools
-
service
;
1
"
]
.
getService
(
Ci
.
nsIProcessToolsService
)
;
ProcessTools
.
kill
(
pid
)
;
}
else
if
(
row
.
win
&
&
row
.
win
.
tab
&
&
row
.
win
.
tab
.
tabbrowser
)
{
row
.
win
.
tab
.
tabbrowser
.
removeTab
(
row
.
win
.
tab
.
tab
{
skipPermitUnload
:
true
animate
:
true
}
)
;
View
.
_killedRecently
.
push
(
{
outerWindowId
:
row
.
win
.
outerWindowId
}
)
;
row
.
classList
.
add
(
"
killing
"
)
;
if
(
row
.
previousSibling
.
classList
.
contains
(
"
process
"
)
)
{
let
parentRow
=
row
.
previousSibling
;
let
roots
=
0
;
for
(
let
win
of
parentRow
.
process
.
windows
)
{
if
(
win
.
isProcessRoot
)
{
roots
+
=
1
;
}
}
if
(
roots
<
=
1
)
{
View
.
_killedRecently
.
push
(
{
pid
:
parentRow
.
process
.
pid
}
)
;
parentRow
.
classList
.
add
(
"
killing
"
)
;
}
}
}
}
}
;
window
.
onload
=
async
function
(
)
{
Control
.
init
(
)
;
await
Control
.
update
(
)
;
window
.
setInterval
(
(
)
=
>
Control
.
update
(
)
UPDATE_INTERVAL_MS
)
;
}
;
