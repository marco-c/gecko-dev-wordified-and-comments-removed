var
{
PromiseUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
this
)
;
async
function
waitForViewSourceTab
(
open
)
{
let
sourceLoadedPromise
;
let
tabPromise
;
tabPromise
=
new
Promise
(
resolve
=
>
{
gBrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
event
=
>
{
let
tab
=
event
.
target
;
sourceLoadedPromise
=
waitForSourceLoaded
(
tab
)
;
resolve
(
tab
)
;
}
{
once
:
true
}
)
;
}
)
;
await
open
(
)
;
let
tab
=
await
tabPromise
;
await
sourceLoadedPromise
;
return
tab
;
}
function
openViewSourceForBrowser
(
browser
)
{
return
waitForViewSourceTab
(
(
)
=
>
{
window
.
BrowserViewSource
(
browser
)
;
}
)
;
}
async
function
openViewSource
(
)
{
let
contentAreaContextMenuPopup
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
contentAreaContextMenuPopup
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
body
"
{
type
:
"
contextmenu
"
button
:
2
}
gBrowser
.
selectedBrowser
)
;
await
popupShownPromise
;
return
waitForViewSourceTab
(
async
(
)
=
>
{
let
popupHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
contentAreaContextMenuPopup
"
popuphidden
"
)
;
let
item
=
document
.
getElementById
(
"
context
-
viewsource
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
)
;
await
popupHiddenPromise
;
}
)
;
}
async
function
openViewPartialSource
(
aCSSSelector
)
{
let
contentAreaContextMenuPopup
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
contentAreaContextMenuPopup
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
aCSSSelector
{
type
:
"
contextmenu
"
button
:
2
}
gBrowser
.
selectedBrowser
)
;
await
popupShownPromise
;
return
waitForViewSourceTab
(
async
(
)
=
>
{
let
popupHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
contentAreaContextMenuPopup
"
popuphidden
"
)
;
let
item
=
document
.
getElementById
(
"
context
-
viewpartialsource
-
selection
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
)
;
await
popupHiddenPromise
;
}
)
;
}
async
function
openViewFrameSourceTab
(
aCSSSelector
)
{
let
contentAreaContextMenuPopup
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
contentAreaContextMenuPopup
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
aCSSSelector
{
type
:
"
contextmenu
"
button
:
2
}
gBrowser
.
selectedBrowser
)
;
await
popupShownPromise
;
let
frameContextMenu
=
document
.
getElementById
(
"
frame
"
)
;
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
frameContextMenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
frameContextMenu
{
}
)
;
await
popupShownPromise
;
return
waitForViewSourceTab
(
async
(
)
=
>
{
let
popupHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
frameContextMenu
"
popuphidden
"
)
;
let
item
=
document
.
getElementById
(
"
context
-
viewframesource
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
)
;
await
popupHiddenPromise
;
}
)
;
}
function
waitForSourceLoaded
(
tab
)
{
return
new
Promise
(
resolve
=
>
{
let
mm
=
tab
.
linkedBrowser
.
messageManager
;
mm
.
addMessageListener
(
"
ViewSource
:
SourceLoaded
"
function
sourceLoaded
(
)
{
mm
.
removeMessageListener
(
"
ViewSource
:
SourceLoaded
"
sourceLoaded
)
;
setTimeout
(
resolve
0
)
;
}
)
;
}
)
;
}
async
function
openDocumentSelect
(
aURI
aCSSSelector
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
aURI
)
;
registerCleanupFunction
(
function
(
)
{
gBrowser
.
removeTab
(
tab
)
;
}
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
selector
:
aCSSSelector
}
async
function
(
arg
)
{
let
element
=
content
.
document
.
querySelector
(
arg
.
selector
)
;
content
.
getSelection
(
)
.
selectAllChildren
(
element
)
;
}
)
;
return
openViewPartialSource
(
aCSSSelector
)
;
}
async
function
openDocument
(
aURI
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
aURI
)
;
registerCleanupFunction
(
function
(
)
{
gBrowser
.
removeTab
(
tab
)
;
}
)
;
return
openViewSource
(
)
;
}
function
pushPrefs
(
.
.
.
aPrefs
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
aPrefs
}
)
;
}
function
waitForPrefChange
(
pref
)
{
let
deferred
=
PromiseUtils
.
defer
(
)
;
let
observer
=
(
)
=
>
{
Preferences
.
ignore
(
pref
observer
)
;
deferred
.
resolve
(
)
;
}
;
Preferences
.
observe
(
pref
observer
)
;
return
deferred
.
promise
;
}
