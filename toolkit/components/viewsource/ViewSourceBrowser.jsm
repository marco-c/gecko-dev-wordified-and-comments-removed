const
{
utils
:
Cu
interfaces
:
Ci
classes
:
Cc
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Deprecated
"
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
)
;
const
BUNDLE_URL
=
"
chrome
:
/
/
global
/
locale
/
viewSource
.
properties
"
;
const
FRAME_SCRIPT
=
"
chrome
:
/
/
global
/
content
/
viewSource
-
content
.
js
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ViewSourceBrowser
"
]
;
var
gKnownBrowsers
=
new
WeakSet
(
)
;
this
.
ViewSourceBrowser
=
function
ViewSourceBrowser
(
aBrowser
)
{
this
.
_browser
=
aBrowser
;
this
.
init
(
)
;
}
ViewSourceBrowser
.
prototype
=
{
get
browser
(
)
{
return
this
.
_browser
;
}
lastLineFound
:
null
messages
:
[
"
ViewSource
:
PromptAndGoToLine
"
"
ViewSource
:
GoToLine
:
Success
"
"
ViewSource
:
GoToLine
:
Failed
"
"
ViewSource
:
StoreWrapping
"
"
ViewSource
:
StoreSyntaxHighlighting
"
]
init
(
)
{
this
.
messages
.
forEach
(
(
msgName
)
=
>
{
this
.
mm
.
addMessageListener
(
msgName
this
)
;
}
)
;
if
(
this
.
_browser
)
{
this
.
loadFrameScript
(
)
;
}
}
uninit
(
)
{
this
.
messages
.
forEach
(
(
msgName
)
=
>
{
this
.
mm
.
removeMessageListener
(
msgName
this
)
;
}
)
;
}
loadFrameScript
(
)
{
if
(
!
gKnownBrowsers
.
has
(
this
.
browser
)
)
{
gKnownBrowsers
.
add
(
this
.
browser
)
;
this
.
mm
.
loadFrameScript
(
FRAME_SCRIPT
false
)
;
}
}
receiveMessage
(
message
)
{
let
data
=
message
.
data
;
switch
(
message
.
name
)
{
case
"
ViewSource
:
PromptAndGoToLine
"
:
this
.
promptAndGoToLine
(
)
;
break
;
case
"
ViewSource
:
GoToLine
:
Success
"
:
this
.
onGoToLineSuccess
(
data
.
lineNumber
)
;
break
;
case
"
ViewSource
:
GoToLine
:
Failed
"
:
this
.
onGoToLineFailed
(
)
;
break
;
case
"
ViewSource
:
StoreWrapping
"
:
this
.
storeWrapping
(
data
.
state
)
;
break
;
case
"
ViewSource
:
StoreSyntaxHighlighting
"
:
this
.
storeSyntaxHighlighting
(
data
.
state
)
;
break
;
}
}
get
mm
(
)
{
return
this
.
browser
.
messageManager
;
}
sendAsyncMessage
(
.
.
.
args
)
{
this
.
browser
.
messageManager
.
sendAsyncMessage
(
.
.
.
args
)
;
}
get
bundle
(
)
{
if
(
this
.
_bundle
)
{
return
this
.
_bundle
;
}
return
this
.
_bundle
=
Services
.
strings
.
createBundle
(
BUNDLE_URL
)
;
}
loadViewSource
(
{
URL
browser
outerWindowID
lineNumber
}
)
{
if
(
!
URL
)
{
throw
new
Error
(
"
Must
supply
a
URL
when
opening
view
source
.
"
)
;
}
if
(
browser
)
{
this
.
updateBrowserRemoteness
(
browser
.
isRemoteBrowser
)
;
}
else
{
if
(
outerWindowID
)
{
throw
new
Error
(
"
Must
supply
the
browser
if
passing
the
outerWindowID
"
)
;
}
}
this
.
sendAsyncMessage
(
"
ViewSource
:
LoadSource
"
{
URL
outerWindowID
lineNumber
}
)
;
}
loadViewSourceFromSelection
(
URL
drawSelection
baseURI
)
{
this
.
sendAsyncMessage
(
"
ViewSource
:
LoadSourceWithSelection
"
{
URL
drawSelection
baseURI
}
)
;
}
updateBrowserRemoteness
(
shouldBeRemote
)
{
if
(
this
.
browser
.
isRemoteBrowser
!
=
shouldBeRemote
)
{
throw
new
Error
(
"
View
source
browser
'
s
remoteness
mismatch
"
)
;
}
}
promptAndGoToLine
(
)
{
let
input
=
{
value
:
this
.
lastLineFound
}
;
let
window
=
Services
.
wm
.
getMostRecentWindow
(
null
)
;
let
ok
=
Services
.
prompt
.
prompt
(
window
this
.
bundle
.
GetStringFromName
(
"
goToLineTitle
"
)
this
.
bundle
.
GetStringFromName
(
"
goToLineText
"
)
input
null
{
value
:
0
}
)
;
if
(
!
ok
)
return
;
let
line
=
parseInt
(
input
.
value
10
)
;
if
(
!
(
line
>
0
)
)
{
Services
.
prompt
.
alert
(
window
this
.
bundle
.
GetStringFromName
(
"
invalidInputTitle
"
)
this
.
bundle
.
GetStringFromName
(
"
invalidInputText
"
)
)
;
this
.
promptAndGoToLine
(
)
;
}
else
{
this
.
goToLine
(
line
)
;
}
}
goToLine
(
lineNumber
)
{
this
.
sendAsyncMessage
(
"
ViewSource
:
GoToLine
"
{
lineNumber
}
)
;
}
onGoToLineSuccess
(
lineNumber
)
{
this
.
lastLineFound
=
lineNumber
;
}
onGoToLineFailed
(
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
null
)
;
Services
.
prompt
.
alert
(
window
this
.
bundle
.
GetStringFromName
(
"
outOfRangeTitle
"
)
this
.
bundle
.
GetStringFromName
(
"
outOfRangeText
"
)
)
;
this
.
promptAndGoToLine
(
)
;
}
storeWrapping
(
state
)
{
Services
.
prefs
.
setBoolPref
(
"
view_source
.
wrap_long_lines
"
state
)
;
}
storeSyntaxHighlighting
(
state
)
{
Services
.
prefs
.
setBoolPref
(
"
view_source
.
syntax_highlight
"
state
)
;
}
}
;
ViewSourceBrowser
.
isViewSource
=
function
(
uri
)
{
return
uri
.
startsWith
(
"
view
-
source
:
"
)
|
|
(
uri
.
startsWith
(
"
data
:
"
)
&
&
uri
.
includes
(
"
MathML
"
)
)
;
}
;
