#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
<
CoreServices
/
CoreServices
.
h
>
#
include
"
MacAutoreleasePool
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIWindowMediator
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsICommandLineRunner
.
h
"
#
include
"
nsICommandLine
.
h
"
#
include
"
nsCommandLine
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsMacRemoteServer
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
RemoteUtils
.
h
"
CFDataRef
messageServerCallback
(
CFMessagePortRef
aLocal
int32_t
aMsgid
CFDataRef
aData
void
*
aInfo
)
{
static_cast
<
nsMacRemoteServer
*
>
(
aInfo
)
-
>
HandleCommandLine
(
aData
)
;
return
NULL
;
}
void
nsMacRemoteServer
:
:
HandleCommandLine
(
CFDataRef
aData
)
{
mozilla
:
:
MacAutoreleasePool
pool
;
if
(
aData
)
{
NSDictionary
*
dict
=
[
NSKeyedUnarchiver
unarchiveObjectWithData
:
(
NSData
*
)
aData
]
;
if
(
dict
&
&
[
dict
isKindOfClass
:
[
NSDictionary
class
]
]
)
{
NSArray
*
args
=
dict
[
"
args
"
]
;
if
(
!
args
)
{
NS_ERROR
(
"
Wrong
parameters
passed
to
the
Remote
Server
"
)
;
return
;
}
nsCOMPtr
<
nsICommandLineRunner
>
cmdLine
(
new
nsCommandLine
(
)
)
;
int
argc
=
[
args
count
]
;
const
char
*
*
argv
=
new
const
char
*
[
argc
]
;
for
(
int
i
=
0
;
i
<
argc
;
i
+
+
)
{
const
char
*
arg
=
[
[
args
objectAtIndex
:
i
]
UTF8String
]
;
argv
[
i
]
=
arg
;
}
nsresult
rv
=
cmdLine
-
>
Init
(
argc
argv
nullptr
nsICommandLine
:
:
STATE_REMOTE_AUTO
)
;
delete
[
]
argv
;
if
(
NS_FAILED
(
rv
)
)
{
NS_ERROR
(
"
Error
initializing
command
line
.
"
)
;
return
;
}
cmdLine
-
>
Run
(
)
;
NSNumber
*
raise
=
dict
[
"
raise
"
]
;
if
(
!
raise
|
|
[
raise
boolValue
]
)
{
[
[
NSRunningApplication
currentApplication
]
activateWithOptions
:
NSApplicationActivateIgnoringOtherApps
]
;
}
}
}
}
nsresult
nsMacRemoteServer
:
:
Startup
(
const
char
*
aAppName
const
char
*
aProfileName
)
{
mozilla
:
:
MacAutoreleasePool
pool
;
nsString
className
;
BuildClassName
(
aAppName
aProfileName
className
)
;
NSString
*
serverNameString
=
[
NSString
stringWithCharacters
:
reinterpret_cast
<
const
unichar
*
>
(
className
.
get
(
)
)
length
:
className
.
Length
(
)
]
;
CFMessagePortContext
context
;
context
.
copyDescription
=
NULL
;
context
.
info
=
this
;
context
.
release
=
NULL
;
context
.
retain
=
NULL
;
context
.
version
=
NULL
;
mMessageServer
=
CFMessagePortCreateLocal
(
NULL
(
CFStringRef
)
serverNameString
messageServerCallback
&
context
NULL
)
;
if
(
!
mMessageServer
)
{
return
NS_ERROR_FAILURE
;
}
mRunLoopSource
=
CFMessagePortCreateRunLoopSource
(
NULL
mMessageServer
0
)
;
if
(
!
mRunLoopSource
)
{
CFRelease
(
mMessageServer
)
;
mMessageServer
=
NULL
;
return
NS_ERROR_FAILURE
;
}
CFRunLoopRef
runLoop
=
CFRunLoopGetMain
(
)
;
CFRunLoopAddSource
(
runLoop
mRunLoopSource
kCFRunLoopDefaultMode
)
;
return
NS_OK
;
}
void
nsMacRemoteServer
:
:
Shutdown
(
)
{
if
(
mMessageServer
)
{
CFMessagePortInvalidate
(
mMessageServer
)
;
}
if
(
mRunLoopSource
)
{
CFRelease
(
mRunLoopSource
)
;
mRunLoopSource
=
NULL
;
}
if
(
mMessageServer
)
{
CFRelease
(
mMessageServer
)
;
mMessageServer
=
NULL
;
}
}
