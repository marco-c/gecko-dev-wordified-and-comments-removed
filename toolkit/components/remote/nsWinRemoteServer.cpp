#
include
"
CmdLineAndEnvUtils
.
h
"
#
include
"
nsWinRemoteServer
.
h
"
#
include
"
RemoteUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIWindowMediator
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsICommandLineRunner
.
h
"
#
include
"
nsICommandLine
.
h
"
#
include
"
nsCommandLine
.
h
"
#
include
"
nsIDocShell
.
h
"
HWND
hwndForDOMWindow
(
mozIDOMWindowProxy
*
window
)
{
if
(
!
window
)
{
return
0
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
pidomwindow
=
nsPIDOMWindowOuter
:
:
From
(
window
)
;
nsCOMPtr
<
nsIBaseWindow
>
ppBaseWindow
=
do_QueryInterface
(
pidomwindow
-
>
GetDocShell
(
)
)
;
if
(
!
ppBaseWindow
)
{
return
0
;
}
nsCOMPtr
<
nsIWidget
>
ppWidget
;
ppBaseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
ppWidget
)
)
;
return
(
HWND
)
(
ppWidget
-
>
GetNativeData
(
NS_NATIVE_WIDGET
)
)
;
}
static
nsresult
GetMostRecentWindow
(
mozIDOMWindowProxy
*
*
aWindow
)
{
nsresult
rv
;
nsCOMPtr
<
nsIWindowMediator
>
med
(
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
med
)
return
med
-
>
GetMostRecentWindow
(
nullptr
aWindow
)
;
return
NS_ERROR_FAILURE
;
}
LRESULT
CALLBACK
WindowProc
(
HWND
msgWindow
UINT
msg
WPARAM
wp
LPARAM
lp
)
{
if
(
msg
=
=
WM_COPYDATA
)
{
COPYDATASTRUCT
*
cds
=
(
COPYDATASTRUCT
*
)
lp
;
nsCOMPtr
<
nsIFile
>
workingDir
;
if
(
1
>
=
cds
-
>
dwData
)
{
char
*
wdpath
=
(
char
*
)
cds
-
>
lpData
;
while
(
*
wdpath
)
+
+
wdpath
;
+
+
wdpath
;
NS_NewLocalFile
(
NS_ConvertUTF8toUTF16
(
wdpath
)
false
getter_AddRefs
(
workingDir
)
)
;
}
mozilla
:
:
CommandLineParserWin
<
char
>
parser
;
parser
.
HandleCommandLine
(
reinterpret_cast
<
char
*
>
(
cds
-
>
lpData
)
)
;
nsCOMPtr
<
nsICommandLineRunner
>
cmdLine
(
new
nsCommandLine
(
)
)
;
if
(
NS_SUCCEEDED
(
cmdLine
-
>
Init
(
parser
.
Argc
(
)
parser
.
Argv
(
)
workingDir
nsICommandLine
:
:
STATE_REMOTE_AUTO
)
)
)
{
cmdLine
-
>
Run
(
)
;
}
else
{
NS_ERROR
(
"
Error
initializing
command
line
.
"
)
;
}
nsCOMPtr
<
mozIDOMWindowProxy
>
win
;
GetMostRecentWindow
(
getter_AddRefs
(
win
)
)
;
return
win
?
(
LRESULT
)
hwndForDOMWindow
(
win
)
:
0
;
}
return
DefWindowProc
(
msgWindow
msg
wp
lp
)
;
}
nsresult
nsWinRemoteServer
:
:
Startup
(
const
char
*
aAppName
const
char
*
aProfileName
)
{
nsString
className
;
BuildClassName
(
aAppName
aProfileName
className
)
;
WNDCLASSW
classStruct
=
{
0
&
WindowProc
0
0
0
0
0
0
0
className
.
get
(
)
}
;
NS_ENSURE_TRUE
(
:
:
RegisterClassW
(
&
classStruct
)
NS_ERROR_FAILURE
)
;
mHandle
=
:
:
CreateWindowW
(
className
.
get
(
)
0
WS_CAPTION
0
0
0
0
0
0
0
0
)
;
return
mHandle
?
NS_OK
:
NS_ERROR_FAILURE
;
}
void
nsWinRemoteServer
:
:
Shutdown
(
)
{
DestroyWindow
(
mHandle
)
;
mHandle
=
nullptr
;
}
