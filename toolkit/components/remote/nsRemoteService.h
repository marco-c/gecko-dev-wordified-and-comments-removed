#
ifndef
TOOLKIT_COMPONENTS_REMOTE_NSREMOTESERVER_H_
#
define
TOOLKIT_COMPONENTS_REMOTE_NSREMOTESERVER_H_
#
include
"
nsRemoteServer
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIRemoteService
.
h
"
#
include
"
mozilla
/
ThreadSafeWeakPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsProfileLock
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
class
nsStartupLock
final
:
public
mozilla
:
:
SupportsThreadSafeWeakPtr
<
nsStartupLock
>
{
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
nsStartupLock
)
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
nsStartupLock
)
nsStartupLock
(
nsIFile
*
aDir
nsProfileLock
&
aLock
)
;
private
:
~
nsStartupLock
(
)
;
nsCOMPtr
<
nsIFile
>
mDir
;
nsProfileLock
mLock
;
}
;
class
nsRemoteService
final
:
public
nsIObserver
public
nsIRemoteService
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIREMOTESERVICE
nsRemoteService
(
)
;
void
SetProgram
(
const
char
*
aProgram
)
;
void
SetProfile
(
nsACString
&
aProfile
)
;
#
ifdef
MOZ_WIDGET_GTK
void
SetStartupToken
(
nsACString
&
aStartupToken
)
;
#
endif
using
StartupLockPromise
=
mozilla
:
:
MozPromise
<
RefPtr
<
nsStartupLock
>
nsresult
false
>
;
RefPtr
<
StartupLockPromise
>
AsyncLockStartup
(
double
aTimeout
)
;
already_AddRefed
<
nsStartupLock
>
LockStartup
(
)
;
nsresult
StartClient
(
)
;
void
StartupServer
(
)
;
void
ShutdownServer
(
)
;
private
:
friend
nsStartupLock
;
static
mozilla
:
:
ThreadSafeWeakPtr
<
nsStartupLock
>
gStartupLock
;
static
mozilla
:
:
StaticRefPtr
<
nsRemoteService
:
:
StartupLockPromise
>
gStartupLockPromise
;
~
nsRemoteService
(
)
;
nsresult
SendCommandLine
(
const
nsACString
&
aProfile
size_t
aArgc
const
char
*
*
aArgv
bool
aRaise
)
;
mozilla
:
:
UniquePtr
<
nsRemoteServer
>
mRemoteServer
;
nsCString
mProgram
;
nsCString
mProfile
;
#
ifdef
MOZ_WIDGET_GTK
nsCString
mStartupToken
;
#
endif
}
;
#
endif
