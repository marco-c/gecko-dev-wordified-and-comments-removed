#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsXRemoteServer
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsICommandLineRunner
.
h
"
#
include
"
nsICommandLine
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsIAppShellService
.
h
"
#
include
"
nsAppShellCID
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
mozilla
/
X11Util
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
<
X11
/
Xlib
.
h
>
#
include
<
X11
/
Xatom
.
h
>
using
namespace
mozilla
;
#
define
MOZILLA_VERSION_PROP
"
_MOZILLA_VERSION
"
#
define
MOZILLA_LOCK_PROP
"
_MOZILLA_LOCK
"
#
define
MOZILLA_RESPONSE_PROP
"
_MOZILLA_RESPONSE
"
#
define
MOZILLA_USER_PROP
"
_MOZILLA_USER
"
#
define
MOZILLA_PROFILE_PROP
"
_MOZILLA_PROFILE
"
#
define
MOZILLA_PROGRAM_PROP
"
_MOZILLA_PROGRAM
"
#
define
MOZILLA_COMMANDLINE_PROP
"
_MOZILLA_COMMANDLINE
"
const
unsigned
char
kRemoteVersion
[
]
=
"
5
.
1
"
;
static
const
char
*
XAtomNames
[
]
=
{
MOZILLA_VERSION_PROP
MOZILLA_LOCK_PROP
MOZILLA_RESPONSE_PROP
MOZILLA_USER_PROP
MOZILLA_PROFILE_PROP
MOZILLA_PROGRAM_PROP
MOZILLA_COMMANDLINE_PROP
}
;
static
Atom
XAtoms
[
MOZ_ARRAY_LENGTH
(
XAtomNames
)
]
;
Atom
nsXRemoteServer
:
:
sMozVersionAtom
;
Atom
nsXRemoteServer
:
:
sMozLockAtom
;
Atom
nsXRemoteServer
:
:
sMozResponseAtom
;
Atom
nsXRemoteServer
:
:
sMozUserAtom
;
Atom
nsXRemoteServer
:
:
sMozProfileAtom
;
Atom
nsXRemoteServer
:
:
sMozProgramAtom
;
Atom
nsXRemoteServer
:
:
sMozCommandLineAtom
;
nsXRemoteServer
:
:
nsXRemoteServer
(
)
=
default
;
void
nsXRemoteServer
:
:
XRemoteBaseStartup
(
const
char
*
aAppName
const
char
*
aProfileName
)
{
EnsureAtoms
(
)
;
mAppName
=
aAppName
;
ToLowerCase
(
mAppName
)
;
mProfileName
=
aProfileName
;
}
void
nsXRemoteServer
:
:
HandleCommandsFor
(
Window
aWindowId
)
{
XChangeProperty
(
mozilla
:
:
DefaultXDisplay
(
)
aWindowId
sMozVersionAtom
XA_STRING
8
PropModeReplace
kRemoteVersion
sizeof
(
kRemoteVersion
)
-
1
)
;
unsigned
char
*
logname
;
logname
=
(
unsigned
char
*
)
PR_GetEnv
(
"
LOGNAME
"
)
;
if
(
logname
)
{
XChangeProperty
(
mozilla
:
:
DefaultXDisplay
(
)
aWindowId
sMozUserAtom
XA_STRING
8
PropModeReplace
logname
strlen
(
(
char
*
)
logname
)
)
;
}
XChangeProperty
(
mozilla
:
:
DefaultXDisplay
(
)
aWindowId
sMozProgramAtom
XA_STRING
8
PropModeReplace
(
unsigned
char
*
)
mAppName
.
get
(
)
mAppName
.
Length
(
)
)
;
if
(
!
mProfileName
.
IsEmpty
(
)
)
{
XChangeProperty
(
mozilla
:
:
DefaultXDisplay
(
)
aWindowId
sMozProfileAtom
XA_STRING
8
PropModeReplace
(
unsigned
char
*
)
mProfileName
.
get
(
)
mProfileName
.
Length
(
)
)
;
}
}
bool
nsXRemoteServer
:
:
HandleNewProperty
(
XID
aWindowId
Display
*
aDisplay
Time
aEventTime
Atom
aChangedAtom
)
{
if
(
aChangedAtom
=
=
sMozCommandLineAtom
)
{
int
result
;
Atom
actual_type
;
int
actual_format
;
unsigned
long
nitems
bytes_after
;
char
*
data
=
0
;
result
=
XGetWindowProperty
(
aDisplay
aWindowId
aChangedAtom
0
(
65536
/
sizeof
(
long
)
)
True
XA_STRING
&
actual_type
&
actual_format
&
nitems
&
bytes_after
(
unsigned
char
*
*
)
&
data
)
;
if
(
result
!
=
Success
)
return
false
;
if
(
!
data
|
|
!
TO_LITTLE_ENDIAN32
(
*
reinterpret_cast
<
int32_t
*
>
(
data
)
)
)
return
false
;
const
char
*
response
=
HandleCommandLine
(
data
aEventTime
)
;
XChangeProperty
(
aDisplay
aWindowId
sMozResponseAtom
XA_STRING
8
PropModeReplace
(
const
unsigned
char
*
)
response
strlen
(
response
)
)
;
XFree
(
data
)
;
return
true
;
}
if
(
aChangedAtom
=
=
sMozResponseAtom
)
{
return
true
;
}
else
if
(
aChangedAtom
=
=
sMozLockAtom
)
{
return
true
;
}
return
false
;
}
void
nsXRemoteServer
:
:
EnsureAtoms
(
void
)
{
if
(
sMozVersionAtom
)
return
;
XInternAtoms
(
mozilla
:
:
DefaultXDisplay
(
)
const_cast
<
char
*
*
>
(
XAtomNames
)
ArrayLength
(
XAtomNames
)
False
XAtoms
)
;
int
i
=
0
;
sMozVersionAtom
=
XAtoms
[
i
+
+
]
;
sMozLockAtom
=
XAtoms
[
i
+
+
]
;
sMozResponseAtom
=
XAtoms
[
i
+
+
]
;
sMozUserAtom
=
XAtoms
[
i
+
+
]
;
sMozProfileAtom
=
XAtoms
[
i
+
+
]
;
sMozProgramAtom
=
XAtoms
[
i
+
+
]
;
sMozCommandLineAtom
=
XAtoms
[
i
]
;
}
