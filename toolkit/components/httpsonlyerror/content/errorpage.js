"
use
strict
"
;
const
searchParams
=
new
URLSearchParams
(
document
.
documentURI
.
split
(
"
?
"
)
[
1
]
)
;
function
initPage
(
)
{
if
(
!
searchParams
.
get
(
"
e
"
)
)
{
document
.
getElementById
(
"
error
"
)
.
remove
(
)
;
}
const
explanation1
=
document
.
getElementById
(
"
insecure
-
explanation
-
unavailable
"
)
;
const
pageUrl
=
new
URL
(
window
.
location
.
href
.
replace
(
/
^
view
-
source
:
/
"
"
)
)
;
document
.
l10n
.
setAttributes
(
explanation1
"
about
-
httpsonly
-
explanation
-
unavailable2
"
{
websiteUrl
:
pageUrl
.
host
}
)
;
const
baseSupportURL
=
RPMGetFormatURLPref
(
"
app
.
support
.
baseURL
"
)
;
document
.
getElementById
(
"
learnMoreLink
"
)
.
setAttribute
(
"
href
"
baseSupportURL
+
"
https
-
only
-
prefs
"
)
;
document
.
getElementById
(
"
mixedContentLearnMoreLink
"
)
.
setAttribute
(
"
href
"
baseSupportURL
+
"
mixed
-
content
"
)
;
const
isTopLevel
=
window
.
top
=
=
window
;
if
(
!
isTopLevel
)
{
for
(
const
id
of
[
"
explanation
-
continue
"
"
goBack
"
"
openInsecure
"
]
)
{
document
.
getElementById
(
id
)
.
remove
(
)
;
}
document
.
getElementById
(
"
explanation
-
iframe
"
)
.
removeAttribute
(
"
hidden
"
)
;
return
;
}
document
.
getElementById
(
"
openInsecure
"
)
.
addEventListener
(
"
click
"
onOpenInsecureButtonClick
)
;
document
.
getElementById
(
"
goBack
"
)
.
addEventListener
(
"
click
"
onReturnButtonClick
)
;
const
delay
=
RPMGetIntPref
(
"
security
.
dialog_enable_delay
"
1000
)
;
setTimeout
(
(
)
=
>
{
document
.
getElementById
(
"
openInsecure
"
)
.
removeAttribute
(
"
inert
"
)
;
}
delay
)
;
addAutofocus
(
"
#
goBack
"
"
beforeend
"
)
;
const
hasWWWPrefix
=
pageUrl
.
href
.
startsWith
(
"
https
:
/
/
www
.
"
)
;
if
(
!
hasWWWPrefix
)
{
window
.
addEventListener
(
"
pingSecureWWWLinkSuccess
"
(
)
=
>
{
activateSuggestionBox
(
)
;
displayWWWSuggestion
(
pageUrl
.
host
)
;
}
)
;
RPMTryPingSecureWWWLink
(
)
;
}
}
function
activateSuggestionBox
(
)
{
const
suggestionBox
=
document
.
querySelector
(
"
.
suggestion
-
box
"
)
;
suggestionBox
.
hidden
=
false
;
}
function
displayWWWSuggestion
(
aURL
)
{
const
suggestionBox
=
document
.
querySelector
(
"
.
suggestion
-
box
"
)
;
const
suggestionWWWText
=
document
.
createElement
(
"
p
"
)
;
const
suggestionWWWButton
=
document
.
createElement
(
"
button
"
)
;
const
suggestionButtonContainer
=
document
.
createElement
(
"
div
"
)
;
document
.
l10n
.
setAttributes
(
suggestionWWWText
"
about
-
httpsonly
-
suggestion
-
box
-
www
-
text
"
{
websiteUrl
:
aURL
}
)
;
suggestionWWWButton
.
setAttribute
(
"
id
"
"
openWWW
"
)
;
document
.
l10n
.
setAttributes
(
suggestionWWWButton
"
about
-
httpsonly
-
suggestion
-
box
-
www
-
button
"
{
websiteUrl
:
aURL
}
)
;
suggestionWWWButton
.
addEventListener
(
"
click
"
openSecureWWWButtonClick
)
;
suggestionButtonContainer
.
classList
.
add
(
"
button
-
container
"
)
;
suggestionBox
.
appendChild
(
suggestionWWWText
)
;
suggestionButtonContainer
.
appendChild
(
suggestionWWWButton
)
;
suggestionBox
.
appendChild
(
suggestionButtonContainer
)
;
}
function
openSecureWWWButtonClick
(
)
{
RPMOpenSecureWWWLink
(
)
;
}
function
onOpenInsecureButtonClick
(
)
{
document
.
reloadWithHttpsOnlyException
(
)
;
}
function
onReturnButtonClick
(
)
{
RPMSendAsyncMessage
(
"
goBack
"
)
;
}
function
addAutofocus
(
selector
position
=
"
afterbegin
"
)
{
if
(
window
.
top
!
=
window
)
{
return
;
}
var
button
=
document
.
querySelector
(
selector
)
;
var
parent
=
button
.
parentNode
;
button
.
remove
(
)
;
button
.
setAttribute
(
"
autofocus
"
"
true
"
)
;
parent
.
insertAdjacentElement
(
position
button
)
;
}
initPage
(
)
;
let
event
=
new
CustomEvent
(
"
AboutNetErrorLoad
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
