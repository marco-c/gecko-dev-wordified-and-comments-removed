"
use
strict
"
;
const
ROOT_PATH
=
getRootDirectory
(
gTestPath
)
;
const
EXPIRED_ROOT_PATH
=
ROOT_PATH
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
supports
-
insecure
.
expired
.
example
.
com
"
)
;
const
SECURE_ROOT_PATH
=
ROOT_PATH
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
INSECURE_ROOT_PATH
=
ROOT_PATH
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
add_task
(
async
function
(
)
{
let
expectedQueries
=
new
Set
(
[
"
content
"
"
img
"
"
iframe
"
"
xhr
"
"
nestedimg
"
]
)
;
let
tab
=
await
openErrorPage
(
{
EXPIRED_ROOT_PATH
}
file_upgrade_insecure_server
.
sjs
?
content
false
)
;
let
browser
=
tab
.
linkedBrowser
;
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
true
)
;
const
filesLoaded
=
setupFileServer
(
)
;
await
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
openInsecureButton
=
content
.
document
.
getElementById
(
"
openInsecure
"
)
;
ok
(
openInsecureButton
!
=
null
"
openInsecureButton
should
exist
.
"
)
;
openInsecureButton
.
click
(
)
;
}
)
;
await
pageShownPromise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
doc
=
content
.
document
;
ok
(
!
doc
.
documentURI
.
startsWith
(
"
http
:
/
/
expired
.
example
.
com
"
)
"
Page
should
load
with
after
exception
button
was
clicked
.
"
)
;
}
)
;
let
results
=
await
filesLoaded
;
for
(
let
resultIndex
in
results
)
{
const
response
=
results
[
resultIndex
]
;
const
[
key
result
]
=
response
.
split
(
"
-
"
2
)
;
if
(
expectedQueries
.
has
(
key
)
)
{
expectedQueries
.
delete
(
key
)
;
is
(
result
"
ok
"
Request
'
{
key
}
'
should
be
loaded
with
HTTP
.
'
)
;
}
else
{
ok
(
false
Unexpected
response
from
server
(
{
response
}
)
)
;
}
}
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
function
setupFileServer
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
var
xhrRequest
=
new
XMLHttpRequest
(
)
;
xhrRequest
.
open
(
"
GET
"
{
SECURE_ROOT_PATH
}
file_upgrade_insecure_server
.
sjs
?
queryresult
=
{
INSECURE_ROOT_PATH
}
)
;
xhrRequest
.
onload
=
function
(
e
)
{
var
results
=
xhrRequest
.
responseText
.
split
(
"
"
)
;
resolve
(
results
)
;
}
;
xhrRequest
.
onerror
=
e
=
>
{
ok
(
false
"
Could
not
query
results
from
server
(
"
+
e
.
message
+
"
)
"
)
;
reject
(
)
;
}
;
xhrRequest
.
send
(
)
;
}
)
;
}
