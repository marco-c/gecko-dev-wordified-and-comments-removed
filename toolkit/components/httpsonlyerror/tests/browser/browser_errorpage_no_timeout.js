"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
TEST_PATH_HTTP
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
TEST_PATH_HTTPS
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
HSTS_SITE
=
TEST_PATH_HTTPS
+
"
file_https_telemetry_hsts
.
sjs
"
;
const
TIMEOUT_PAGE_URI_HTTP
=
TEST_PATH_HTTP
+
"
file_errorpage_no_timeout_server
.
sjs
"
;
const
TIMEOUT_PAGE_URI_HTTPS
=
TEST_PATH_HTTPS
+
"
file_errorpage_no_timeout_server
.
sjs
"
;
async
function
runUpgradeTest
(
aURI
aDesc
aAssertURLStartsWith
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
browser
)
{
const
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
null
true
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
aURI
)
;
await
loaded
;
await
SpecialPowers
.
spawn
(
browser
[
aDesc
aAssertURLStartsWith
]
async
function
(
aDesc
aAssertURLStartsWith
)
{
ok
(
content
.
document
.
location
.
href
.
startsWith
(
aAssertURLStartsWith
)
aDesc
)
;
}
)
;
await
SpecialPowers
.
removePermission
(
"
https
-
only
-
load
-
insecure
"
aURI
)
;
}
)
;
}
async
function
getPage
(
wanted
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
browser
)
{
info
(
wanted
:
{
wanted
}
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
TIMEOUT_PAGE_URI_HTTPS
true
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
TIMEOUT_PAGE_URI_HTTP
)
;
await
loaded
;
await
SpecialPowers
.
spawn
(
browser
[
wanted
]
async
function
(
wanted
)
{
const
doc
=
content
.
document
;
let
errorPage
=
doc
.
body
.
innerHTML
;
ok
(
errorPage
.
includes
(
wanted
)
Response
must
contain
search
string
:
{
wanted
}
)
;
}
)
;
}
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_fire_http_request_background_timer_ms
"
1000
]
[
"
dom
.
security
.
https_only_mode
"
true
]
[
"
dom
.
security
.
https_first
"
true
]
[
"
dom
.
security
.
https_first_schemeless
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
wait_longer_for_hsts_page
(
)
{
await
getPage
(
"
about
-
httpsonly
-
title
-
site
-
not
-
available
"
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
browser
)
{
const
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
null
true
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
HSTS_SITE
)
;
await
loaded
;
}
)
;
await
getPage
(
"
slow
"
)
;
const
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
sss
.
clearAll
(
)
;
}
)
;
