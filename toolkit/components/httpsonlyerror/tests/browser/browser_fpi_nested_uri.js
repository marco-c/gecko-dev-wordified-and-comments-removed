"
use
strict
"
;
const
INSECURE_VIEW_SOURCE_URL
=
"
view
-
source
:
http
:
/
/
192
.
168
.
0
.
0
/
"
;
function
promiseIsErrorPage
(
)
{
return
new
Promise
(
resolve
=
>
{
BrowserTestUtils
.
waitForErrorPage
(
gBrowser
.
selectedBrowser
)
.
then
(
(
)
=
>
resolve
(
true
)
)
;
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
.
then
(
(
)
=
>
resolve
(
false
)
)
;
}
)
;
}
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
[
"
dom
.
security
.
https_only_mode
.
upgrade_local
"
true
]
[
"
privacy
.
firstparty
.
isolate
"
true
]
]
}
)
;
let
loaded
=
BrowserTestUtils
.
waitForErrorPage
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
INSECURE_VIEW_SOURCE_URL
)
;
await
loaded
;
loaded
=
promiseIsErrorPage
(
)
;
await
waitForAndClickOpenInsecureButton
(
gBrowser
.
selectedBrowser
)
;
const
isErrorPage
=
await
loaded
;
ok
(
!
isErrorPage
"
We
should
not
land
on
an
error
page
"
)
;
await
Services
.
perms
.
removeAll
(
)
;
}
)
;
