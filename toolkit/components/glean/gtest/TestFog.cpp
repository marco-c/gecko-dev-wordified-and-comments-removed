#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsString
.
h
"
using
mozilla
:
:
Preferences
;
using
namespace
mozilla
:
:
glean
;
#
define
DATA_PREF
"
datareporting
.
healthreport
.
uploadEnabled
"
extern
"
C
"
{
void
GTest_FOG_ExpectFailure
(
const
char
*
aMessage
)
{
EXPECT_STREQ
(
aMessage
"
"
)
;
}
nsresult
fog_init
(
)
;
nsresult
fog_submit_ping
(
const
nsACString
*
aPingName
)
;
}
TEST
(
FOG
FogInitDoesntCrash
)
{
Preferences
:
:
SetInt
(
"
telemetry
.
fog
.
test
.
localhost_port
"
-
1
)
;
ASSERT_EQ
(
NS_OK
fog_init
(
)
)
;
Preferences
:
:
SetBool
(
DATA_PREF
false
)
;
Preferences
:
:
SetBool
(
DATA_PREF
true
)
;
}
extern
"
C
"
void
Rust_MeasureInitializeTime
(
)
;
TEST
(
FOG
TestMeasureInitializeTime
)
{
Rust_MeasureInitializeTime
(
)
;
}
TEST
(
FOG
BuiltinPingsRegistered
)
{
Preferences
:
:
SetInt
(
"
telemetry
.
fog
.
test
.
localhost_port
"
-
1
)
;
nsAutoCString
metricsPingName
(
"
metrics
"
)
;
nsAutoCString
baselinePingName
(
"
baseline
"
)
;
nsAutoCString
eventsPingName
(
"
events
"
)
;
ASSERT_EQ
(
NS_OK
fog_submit_ping
(
&
metricsPingName
)
)
;
ASSERT_EQ
(
NS_ERROR_NO_CONTENT
fog_submit_ping
(
&
baselinePingName
)
)
;
ASSERT_EQ
(
NS_ERROR_NO_CONTENT
fog_submit_ping
(
&
eventsPingName
)
)
;
}
TEST
(
FOG
TestCppCounterWorks
)
{
mozilla
:
:
glean
:
:
test_only
:
:
bad_code
.
Add
(
42
)
;
ASSERT_TRUE
(
mozilla
:
:
glean
:
:
test_only
:
:
bad_code
.
TestHasValue
(
"
test
-
ping
"
)
)
;
ASSERT_EQ
(
42
mozilla
:
:
glean
:
:
test_only
:
:
bad_code
.
TestGetValue
(
"
test
-
ping
"
)
)
;
}
TEST
(
FOG
TestCppTimespanWorks
)
{
mozilla
:
:
glean
:
:
test_only
:
:
can_we_time_it
.
Start
(
)
;
PR_Sleep
(
PR_MillisecondsToInterval
(
10
)
)
;
mozilla
:
:
glean
:
:
test_only
:
:
can_we_time_it
.
Stop
(
)
;
ASSERT_TRUE
(
mozilla
:
:
glean
:
:
test_only
:
:
can_we_time_it
.
TestHasValue
(
"
test
-
ping
"
)
)
;
ASSERT_TRUE
(
mozilla
:
:
glean
:
:
test_only
:
:
can_we_time_it
.
TestGetValue
(
"
test
-
ping
"
)
>
0
)
;
}
TEST
(
FOG
TestCppUuidWorks
)
{
nsCString
kTestUuid
(
"
decafdec
-
afde
-
cafd
-
ecaf
-
decafdecafde
"
)
;
test_only
:
:
what_id_it
.
Set
(
kTestUuid
)
;
ASSERT_TRUE
(
test_only
:
:
what_id_it
.
TestHasValue
(
"
test
-
ping
"
)
)
;
ASSERT_STREQ
(
kTestUuid
.
get
(
)
test_only
:
:
what_id_it
.
TestGetValue
(
"
test
-
ping
"
)
.
get
(
)
)
;
test_only
:
:
what_id_it
.
GenerateAndSet
(
)
;
ASSERT_STRNE
(
kTestUuid
.
get
(
)
test_only
:
:
what_id_it
.
TestGetValue
(
"
test
-
ping
"
)
.
get
(
)
)
;
}
