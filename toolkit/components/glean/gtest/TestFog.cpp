#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
mozilla
/
glean
/
GleanPings
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prtime
.
h
"
using
mozilla
:
:
Preferences
;
using
namespace
mozilla
:
:
glean
;
using
namespace
mozilla
:
:
glean
:
:
impl
;
#
define
DATA_PREF
"
datareporting
.
healthreport
.
uploadEnabled
"
extern
"
C
"
{
void
GTest_FOG_ExpectFailure
(
const
char
*
aMessage
)
{
EXPECT_STREQ
(
aMessage
"
"
)
;
}
}
TEST
(
FOG
FogInitDoesntCrash
)
{
Preferences
:
:
SetInt
(
"
telemetry
.
fog
.
test
.
localhost_port
"
-
1
)
;
ASSERT_EQ
(
NS_OK
fog_init
(
)
)
;
Preferences
:
:
SetBool
(
DATA_PREF
false
)
;
Preferences
:
:
SetBool
(
DATA_PREF
true
)
;
}
TEST
(
FOG
BuiltinPingsRegistered
)
{
Preferences
:
:
SetInt
(
"
telemetry
.
fog
.
test
.
localhost_port
"
-
1
)
;
nsAutoCString
metricsPingName
(
"
metrics
"
)
;
nsAutoCString
baselinePingName
(
"
baseline
"
)
;
nsAutoCString
eventsPingName
(
"
events
"
)
;
ASSERT_EQ
(
NS_OK
fog_submit_ping
(
&
metricsPingName
)
)
;
ASSERT_EQ
(
NS_OK
fog_submit_ping
(
&
baselinePingName
)
)
;
ASSERT_EQ
(
NS_OK
fog_submit_ping
(
&
eventsPingName
)
)
;
}
TEST
(
FOG
TestCppCounterWorks
)
{
mozilla
:
:
glean
:
:
test_only
:
:
bad_code
.
Add
(
42
)
;
ASSERT_EQ
(
42
mozilla
:
:
glean
:
:
test_only
:
:
bad_code
.
TestGetValue
(
"
test
-
ping
"
_ns
)
.
value
(
)
)
;
ASSERT_EQ
(
42
test_only
:
:
bad_code
.
TestGetValue
(
)
.
value
(
)
)
;
}
TEST
(
FOG
TestCppStringWorks
)
{
auto
kValue
=
"
cheez
!
"
_ns
;
mozilla
:
:
glean
:
:
test_only
:
:
cheesy_string
.
Set
(
kValue
)
;
ASSERT_STREQ
(
kValue
.
get
(
)
mozilla
:
:
glean
:
:
test_only
:
:
cheesy_string
.
TestGetValue
(
"
test
-
ping
"
_ns
)
.
value
(
)
.
get
(
)
)
;
}
TEST
(
FOG
TestCppTimespanWorks
)
{
mozilla
:
:
glean
:
:
test_only
:
:
can_we_time_it
.
Start
(
)
;
PR_Sleep
(
PR_MillisecondsToInterval
(
10
)
)
;
mozilla
:
:
glean
:
:
test_only
:
:
can_we_time_it
.
Stop
(
)
;
ASSERT_TRUE
(
mozilla
:
:
glean
:
:
test_only
:
:
can_we_time_it
.
TestGetValue
(
"
test
-
ping
"
_ns
)
.
value
(
)
>
0
)
;
}
TEST
(
FOG
TestCppUuidWorks
)
{
nsCString
kTestUuid
(
"
decafdec
-
afde
-
cafd
-
ecaf
-
decafdecafde
"
)
;
test_only
:
:
what_id_it
.
Set
(
kTestUuid
)
;
ASSERT_STREQ
(
kTestUuid
.
get
(
)
test_only
:
:
what_id_it
.
TestGetValue
(
"
test
-
ping
"
_ns
)
.
value
(
)
.
get
(
)
)
;
test_only
:
:
what_id_it
.
GenerateAndSet
(
)
;
ASSERT_STRNE
(
kTestUuid
.
get
(
)
test_only
:
:
what_id_it
.
TestGetValue
(
"
test
-
ping
"
_ns
)
.
value
(
)
.
get
(
)
)
;
}
TEST
(
FOG
TestCppBooleanWorks
)
{
mozilla
:
:
glean
:
:
test_only
:
:
can_we_flag_it
.
Set
(
false
)
;
ASSERT_EQ
(
false
mozilla
:
:
glean
:
:
test_only
:
:
can_we_flag_it
.
TestGetValue
(
"
test
-
ping
"
_ns
)
.
value
(
)
)
;
}
using
mozilla
:
:
MakeTuple
;
using
mozilla
:
:
Tuple
;
using
mozilla
:
:
glean
:
:
test_only_ipc
:
:
AnEventKeys
;
TEST
(
FOG
TestCppEventWorks
)
{
test_only_ipc
:
:
no_extra_event
.
Record
(
)
;
ASSERT_TRUE
(
test_only_ipc
:
:
no_extra_event
.
TestGetValue
(
"
store1
"
_ns
)
.
isSome
(
)
)
;
nsTArray
<
Tuple
<
test_only_ipc
:
:
AnEventKeys
nsCString
>
>
extra
;
nsCString
val
=
"
can
set
extras
"
_ns
;
extra
.
AppendElement
(
MakeTuple
(
AnEventKeys
:
:
Extra1
val
)
)
;
test_only_ipc
:
:
an_event
.
Record
(
std
:
:
move
(
extra
)
)
;
ASSERT_TRUE
(
test_only_ipc
:
:
an_event
.
TestGetValue
(
"
store1
"
_ns
)
.
isSome
(
)
)
;
}
TEST
(
FOG
TestCppMemoryDistWorks
)
{
test_only
:
:
do_you_remember
.
Accumulate
(
7
)
;
test_only
:
:
do_you_remember
.
Accumulate
(
17
)
;
DistributionData
data
=
test_only
:
:
do_you_remember
.
TestGetValue
(
"
test
-
ping
"
_ns
)
.
ref
(
)
;
ASSERT_EQ
(
data
.
sum
24UL
*
1024
*
1024
)
;
for
(
auto
iter
=
data
.
values
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
uint64_t
bucket
=
iter
.
Key
(
)
;
const
uint64_t
count
=
iter
.
UserData
(
)
;
ASSERT_TRUE
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
17520006
|
|
bucket
=
=
7053950
)
)
)
<
<
"
Only
two
occupied
buckets
"
;
}
}
TEST
(
FOG
TestCppPings
)
{
auto
ping
=
mozilla
:
:
glean_pings
:
:
OnePingOnly
;
mozilla
:
:
Unused
<
<
ping
;
}
TEST
(
FOG
TestCppStringLists
)
{
auto
kValue
=
"
cheez
!
"
_ns
;
auto
kValue2
=
"
cheezier
!
"
_ns
;
auto
kValue3
=
"
cheeziest
.
"
_ns
;
nsTArray
<
nsCString
>
cheezList
;
cheezList
.
EmplaceBack
(
kValue
)
;
cheezList
.
EmplaceBack
(
kValue2
)
;
test_only
:
:
cheesy_string_list
.
Set
(
cheezList
)
;
auto
val
=
test_only
:
:
cheesy_string_list
.
TestGetValue
(
)
.
value
(
)
;
ASSERT_STREQ
(
kValue
.
get
(
)
val
[
0
]
.
get
(
)
)
;
ASSERT_STREQ
(
kValue2
.
get
(
)
val
[
1
]
.
get
(
)
)
;
test_only
:
:
cheesy_string_list
.
Add
(
kValue3
)
;
val
=
test_only
:
:
cheesy_string_list
.
TestGetValue
(
)
.
value
(
)
;
ASSERT_STREQ
(
kValue3
.
get
(
)
val
[
2
]
.
get
(
)
)
;
}
TEST
(
FOG
TestCppTimingDistWorks
)
{
auto
id1
=
test_only
:
:
what_time_is_it
.
Start
(
)
;
auto
id2
=
test_only
:
:
what_time_is_it
.
Start
(
)
;
PR_Sleep
(
PR_MillisecondsToInterval
(
5
)
)
;
auto
id3
=
test_only
:
:
what_time_is_it
.
Start
(
)
;
test_only
:
:
what_time_is_it
.
Cancel
(
std
:
:
move
(
id1
)
)
;
PR_Sleep
(
PR_MillisecondsToInterval
(
5
)
)
;
test_only
:
:
what_time_is_it
.
StopAndAccumulate
(
std
:
:
move
(
id2
)
)
;
test_only
:
:
what_time_is_it
.
StopAndAccumulate
(
std
:
:
move
(
id3
)
)
;
DistributionData
data
=
test_only
:
:
what_time_is_it
.
TestGetValue
(
)
.
ref
(
)
;
const
uint64_t
NANOS_IN_MILLIS
=
1e6
;
ASSERT_GT
(
data
.
sum
(
uint64_t
)
(
15
*
NANOS_IN_MILLIS
)
)
;
uint64_t
sampleCount
=
0
;
for
(
auto
iter
=
data
.
values
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
sampleCount
+
=
iter
.
UserData
(
)
;
}
ASSERT_EQ
(
sampleCount
(
uint64_t
)
2
)
;
}
