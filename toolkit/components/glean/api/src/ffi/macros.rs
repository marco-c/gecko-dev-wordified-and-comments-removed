macro_rules
!
define_metric_ffi
{
(
metric_map
:
ident
{
test_has
-
>
ffi_has_fn
:
ident
test_get
-
>
ffi_get_fn
:
ident
:
get_ret
:
ty
(
op
:
ident
-
>
ffi_fn
:
ident
(
(
op_argname
:
ident
:
op_argtyp
:
ty
)
*
(
)
*
)
)
*
(
)
*
}
)
=
>
{
(
#
[
no_mangle
]
pub
extern
"
C
"
fn
ffi_fn
(
id
:
u32
(
op_argname
:
op_argtyp
)
*
)
{
match
crate
:
:
metrics
:
:
__glean_metric_maps
:
:
metric_map
.
get
(
&
id
)
{
Some
(
metric
)
=
>
metric
.
op
(
(
op_argname
)
*
)
None
=
>
panic
!
(
"
No
metric
for
id
{
}
"
id
)
}
}
)
*
/
/
/
FFI
wrapper
to
test
whether
a
value
is
stored
for
the
metric
.
/
/
/
/
/
/
Returns
1
if
a
metric
value
exists
otherwise
0
.
/
/
/
/
/
/
Panics
if
no
metric
exists
for
the
given
ID
.
/
/
/
This
indicates
a
bug
in
the
calling
code
as
this
method
is
only
called
through
generated
code
/
/
/
which
will
guarantee
the
use
of
valid
IDs
.
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
ffi_has_fn
(
id
:
u32
storage_name
:
*
const
:
:
std
:
:
os
:
:
raw
:
:
c_char
)
-
>
u8
{
let
storage_name
=
match
:
:
std
:
:
ffi
:
:
CStr
:
:
from_ptr
(
storage_name
)
.
to_str
(
)
{
Ok
(
s
)
=
>
s
Err
(
e
)
=
>
panic
!
(
"
Invalid
string
for
storage
name
metric
id
{
}
error
:
{
:
?
}
"
id
e
)
}
;
match
crate
:
:
metrics
:
:
__glean_metric_maps
:
:
metric_map
.
get
(
&
id
)
{
Some
(
metric
)
=
>
metric
.
test_get_value
(
storage_name
)
.
is_some
(
)
as
u8
None
=
>
panic
!
(
"
No
metric
for
id
{
}
"
id
)
}
}
/
/
/
FFI
wrapper
to
get
the
currently
stored
value
.
/
/
/
/
/
/
Returns
the
value
of
the
stored
metric
.
/
/
/
/
/
/
Panics
if
no
metric
exists
for
the
given
ID
.
/
/
/
This
indicates
a
bug
in
the
calling
code
as
this
method
is
only
called
through
generated
code
/
/
/
which
will
guarantee
the
use
of
valid
IDs
.
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
ffi_get_fn
(
id
:
u32
storage_name
:
*
const
:
:
std
:
:
os
:
:
raw
:
:
c_char
)
-
>
get_ret
{
let
storage_name
=
match
:
:
std
:
:
ffi
:
:
CStr
:
:
from_ptr
(
storage_name
)
.
to_str
(
)
{
Ok
(
s
)
=
>
s
Err
(
e
)
=
>
panic
!
(
"
Invalid
string
for
storage
name
metric
id
{
}
error
:
{
:
?
}
"
id
e
)
}
;
match
crate
:
:
metrics
:
:
__glean_metric_maps
:
:
metric_map
.
get
(
&
id
)
{
Some
(
metric
)
=
>
metric
.
test_get_value
(
storage_name
)
.
unwrap
(
)
.
into
(
)
None
=
>
panic
!
(
"
No
metric
for
id
{
}
"
id
)
}
}
}
}
