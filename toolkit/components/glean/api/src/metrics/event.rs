use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
hash
:
:
Hash
;
use
std
:
:
marker
:
:
PhantomData
;
use
super
:
:
{
CommonMetricData
Instant
}
;
pub
trait
ExtraKeys
:
Hash
+
Eq
+
PartialEq
+
Copy
{
const
ALLOWED_KEYS
:
&
'
static
[
&
'
static
str
]
;
fn
index
(
self
)
-
>
i32
;
}
#
[
derive
(
Clone
Copy
Hash
Eq
PartialEq
)
]
pub
enum
NoExtraKeys
{
}
impl
ExtraKeys
for
NoExtraKeys
{
const
ALLOWED_KEYS
:
&
'
static
[
&
'
static
str
]
=
&
[
]
;
fn
index
(
self
)
-
>
i32
{
-
1
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
EventMetric
<
K
>
{
inner
:
glean_core
:
:
metrics
:
:
EventMetric
extra_keys
:
PhantomData
<
K
>
}
impl
<
K
:
ExtraKeys
>
EventMetric
<
K
>
{
pub
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
let
allowed_extra_keys
=
K
:
:
ALLOWED_KEYS
.
iter
(
)
.
map
(
|
s
|
s
.
to_string
(
)
)
.
collect
(
)
;
let
inner
=
glean_core
:
:
metrics
:
:
EventMetric
:
:
new
(
meta
allowed_extra_keys
)
;
Self
{
inner
extra_keys
:
PhantomData
}
}
pub
fn
record
<
M
:
Into
<
Option
<
HashMap
<
K
String
>
>
>
>
(
&
self
extra
:
M
)
{
let
now
=
Instant
:
:
now
(
)
;
let
extra
=
extra
.
into
(
)
.
map
(
|
h
|
h
.
into_iter
(
)
.
map
(
|
(
k
v
)
|
(
k
.
index
(
)
v
)
)
.
collect
(
)
)
;
crate
:
:
with_glean
(
|
glean
|
self
.
inner
.
record
(
glean
now
.
as_millis
(
)
extra
)
)
}
pub
fn
test_get_value
(
&
self
storage_name
:
&
str
)
-
>
Option
<
String
>
{
crate
:
:
with_glean
(
|
glean
|
{
let
inner
=
&
self
.
inner
;
if
inner
.
test_has_value
(
glean
storage_name
)
{
Some
(
inner
.
test_get_value_as_json_string
(
glean
storage_name
)
)
}
else
{
None
}
}
)
}
}
