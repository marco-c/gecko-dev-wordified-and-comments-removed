use
std
:
:
sync
:
:
RwLock
;
use
glean_core
:
:
CommonMetricData
;
use
super
:
:
{
Instant
TimeUnit
}
;
#
[
derive
(
Debug
)
]
pub
struct
TimespanMetric
{
inner
:
RwLock
<
glean_core
:
:
metrics
:
:
TimespanMetric
>
}
impl
TimespanMetric
{
pub
fn
new
(
meta
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
let
inner
=
RwLock
:
:
new
(
glean_core
:
:
metrics
:
:
TimespanMetric
:
:
new
(
meta
time_unit
)
)
;
Self
{
inner
}
}
pub
fn
start
(
&
self
)
{
crate
:
:
with_glean
(
move
|
glean
|
{
let
now
=
Instant
:
:
now
(
)
;
let
mut
inner
=
self
.
inner
.
write
(
)
.
expect
(
"
lock
of
wrapped
metric
was
poisoned
"
)
;
inner
.
set_start
(
glean
now
.
as_u64
(
)
)
}
)
}
pub
fn
stop
(
&
self
)
{
crate
:
:
with_glean
(
move
|
glean
|
{
let
now
=
Instant
:
:
now
(
)
;
let
mut
inner
=
self
.
inner
.
write
(
)
.
expect
(
"
lock
of
wrapped
metric
was
poisoned
"
)
;
inner
.
set_stop
(
glean
now
.
as_u64
(
)
)
}
)
}
pub
fn
cancel
(
&
self
)
{
let
mut
inner
=
self
.
inner
.
write
(
)
.
expect
(
"
lock
of
wrapped
metric
was
poisoned
"
)
;
inner
.
cancel
(
)
}
pub
fn
test_get_value
(
&
self
storage_name
:
&
str
)
-
>
Option
<
u64
>
{
crate
:
:
with_glean
(
move
|
glean
|
{
let
inner
=
self
.
inner
.
read
(
)
.
expect
(
"
lock
of
wrapped
metric
was
poisoned
"
)
;
inner
.
test_get_value
(
glean
storage_name
)
}
)
}
}
