use
std
:
:
sync
:
:
RwLock
;
use
glean_core
:
:
metrics
:
:
MetricType
;
use
super
:
:
{
BooleanMetric
CommonMetricData
CounterMetric
ErrorType
StringMetric
}
;
mod
private
{
use
super
:
:
{
BooleanMetric
CommonMetricData
CounterMetric
StringMetric
}
;
pub
trait
Sealed
{
type
Inner
:
glean_core
:
:
metrics
:
:
MetricType
+
Clone
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
;
fn
new_inner
(
meta
:
CommonMetricData
)
-
>
Self
:
:
Inner
;
}
impl
Sealed
for
BooleanMetric
{
type
Inner
=
glean_core
:
:
metrics
:
:
BooleanMetric
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
{
BooleanMetric
(
metric
)
}
fn
new_inner
(
meta
:
CommonMetricData
)
-
>
Self
:
:
Inner
{
glean_core
:
:
metrics
:
:
BooleanMetric
:
:
new
(
meta
)
}
}
impl
Sealed
for
StringMetric
{
type
Inner
=
glean_core
:
:
metrics
:
:
StringMetric
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
{
StringMetric
(
metric
)
}
fn
new_inner
(
meta
:
CommonMetricData
)
-
>
Self
:
:
Inner
{
glean_core
:
:
metrics
:
:
StringMetric
:
:
new
(
meta
)
}
}
impl
Sealed
for
CounterMetric
{
type
Inner
=
glean_core
:
:
metrics
:
:
CounterMetric
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
{
CounterMetric
(
metric
)
}
fn
new_inner
(
meta
:
CommonMetricData
)
-
>
Self
:
:
Inner
{
glean_core
:
:
metrics
:
:
CounterMetric
:
:
new
(
meta
)
}
}
}
pub
trait
AllowLabeled
:
private
:
:
Sealed
{
}
impl
<
T
>
AllowLabeled
for
T
where
T
:
private
:
:
Sealed
{
}
#
[
derive
(
Debug
)
]
pub
struct
LabeledMetric
<
T
:
AllowLabeled
>
{
core
:
RwLock
<
glean_core
:
:
metrics
:
:
LabeledMetric
<
T
:
:
Inner
>
>
}
impl
<
T
>
LabeledMetric
<
T
>
where
T
:
AllowLabeled
{
pub
fn
new
(
meta
:
CommonMetricData
labels
:
Option
<
Vec
<
String
>
>
)
-
>
LabeledMetric
<
T
>
{
let
submetric
=
T
:
:
new_inner
(
meta
)
;
let
core
=
glean_core
:
:
metrics
:
:
LabeledMetric
:
:
new
(
submetric
labels
)
;
LabeledMetric
{
core
:
RwLock
:
:
new
(
core
)
}
}
pub
fn
get
(
&
self
label
:
&
str
)
-
>
T
{
let
mut
core
=
self
.
core
.
write
(
)
.
expect
(
"
lock
of
wrapped
metric
was
poisoned
"
)
;
let
inner
=
core
.
get
(
label
)
;
T
:
:
from_inner
(
inner
)
}
pub
fn
test_get_num_recorded_errors
(
&
self
error_type
:
ErrorType
storage_name
:
Option
<
&
str
>
)
-
>
Result
<
i32
String
>
{
crate
:
:
with_glean
(
move
|
glean
|
{
let
core
=
self
.
core
.
read
(
)
.
expect
(
"
lock
of
wrapped
metric
was
poisoned
"
)
;
glean_core
:
:
test_get_num_recorded_errors
(
&
glean
&
core
.
get_submetric
(
)
.
meta
(
)
error_type
storage_name
)
}
)
}
}
