use
inherent
:
:
inherent
;
use
super
:
:
{
CommonMetricData
MetricId
}
;
use
crate
:
:
ipc
:
:
need_ipc
;
#
[
derive
(
Clone
)
]
pub
enum
StringMetric
{
Parent
(
glean
:
:
private
:
:
StringMetric
)
Child
(
StringMetricIpc
)
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
StringMetricIpc
;
impl
StringMetric
{
pub
fn
new
(
_id
:
MetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
StringMetric
:
:
Child
(
StringMetricIpc
)
}
else
{
StringMetric
:
:
Parent
(
glean
:
:
private
:
:
StringMetric
:
:
new
(
meta
)
)
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
StringMetric
:
:
Parent
(
_
)
=
>
StringMetric
:
:
Child
(
StringMetricIpc
)
StringMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
}
#
[
inherent
(
pub
)
]
impl
glean_core
:
:
traits
:
:
String
for
StringMetric
{
fn
set
<
S
:
Into
<
std
:
:
string
:
:
String
>
>
(
&
self
value
:
S
)
{
match
self
{
StringMetric
:
:
Parent
(
p
)
=
>
{
glean_core
:
:
traits
:
:
String
:
:
set
(
&
*
p
value
)
;
}
StringMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
string
metric
in
non
-
main
process
.
Ignoring
.
"
)
;
}
}
;
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
std
:
:
string
:
:
String
>
{
match
self
{
StringMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_value
(
ping_name
)
StringMetric
:
:
Child
(
_
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
string
metric
in
non
-
parent
process
!
"
)
}
}
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
glean
:
:
ErrorType
ping_name
:
S
)
-
>
i32
{
match
self
{
StringMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_num_recorded_errors
(
error
ping_name
)
StringMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
string
metric
in
non
-
parent
process
!
"
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_string_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_string
;
metric
.
set
(
"
test_string_value
"
)
;
assert_eq
!
(
"
test_string_value
"
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
string_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_string
;
parent_metric
.
set
(
"
test_parent_value
"
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
child_metric
.
set
(
"
test_string_value
"
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert
!
(
"
test_parent_value
"
=
=
parent_metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
"
String
metrics
should
only
work
in
the
parent
process
"
)
;
}
}
