use
serde
:
:
{
Deserialize
Serialize
}
;
pub
use
glean
:
:
{
traits
CommonMetricData
DistributionData
ErrorType
LabeledMetricData
Lifetime
MemoryUnit
RecordedEvent
TimeUnit
TimerId
}
;
mod
boolean
;
mod
counter
;
mod
custom_distribution
;
mod
datetime
;
mod
denominator
;
mod
event
;
mod
labeled
;
mod
labeled_counter
;
mod
labeled_custom_distribution
;
mod
labeled_memory_distribution
;
mod
labeled_timing_distribution
;
mod
memory_distribution
;
mod
numerator
;
mod
object
;
mod
ping
;
mod
quantity
;
mod
rate
;
pub
(
crate
)
mod
string
;
mod
string_list
;
mod
text
;
mod
timespan
;
mod
timing_distribution
;
mod
url
;
mod
uuid
;
pub
use
self
:
:
boolean
:
:
BooleanMetric
;
pub
use
self
:
:
boolean
:
:
BooleanMetric
as
LabeledBooleanMetric
;
pub
use
self
:
:
counter
:
:
CounterMetric
;
pub
use
self
:
:
custom_distribution
:
:
CustomDistributionMetric
;
pub
use
self
:
:
datetime
:
:
DatetimeMetric
;
pub
use
self
:
:
denominator
:
:
DenominatorMetric
;
pub
use
self
:
:
event
:
:
{
EventMetric
EventRecordingError
ExtraKeys
NoExtraKeys
}
;
pub
use
self
:
:
labeled
:
:
LabeledMetric
;
pub
use
self
:
:
labeled_counter
:
:
LabeledCounterMetric
;
pub
use
self
:
:
labeled_custom_distribution
:
:
LabeledCustomDistributionMetric
;
pub
use
self
:
:
labeled_memory_distribution
:
:
LabeledMemoryDistributionMetric
;
pub
use
self
:
:
labeled_timing_distribution
:
:
LabeledTimingDistributionMetric
;
pub
use
self
:
:
memory_distribution
:
:
MemoryDistributionMetric
;
pub
use
self
:
:
numerator
:
:
NumeratorMetric
;
pub
use
self
:
:
object
:
:
ObjectMetric
;
pub
use
self
:
:
ping
:
:
Ping
;
pub
use
self
:
:
quantity
:
:
QuantityMetric
;
pub
use
self
:
:
rate
:
:
RateMetric
;
pub
use
self
:
:
string
:
:
StringMetric
;
pub
use
self
:
:
string
:
:
StringMetric
as
LabeledStringMetric
;
pub
use
self
:
:
string_list
:
:
StringListMetric
;
pub
use
self
:
:
text
:
:
TextMetric
;
pub
use
self
:
:
timespan
:
:
TimespanMetric
;
pub
use
self
:
:
timing_distribution
:
:
TimingDistributionMetric
;
pub
use
self
:
:
url
:
:
UrlMetric
;
pub
use
self
:
:
uuid
:
:
UuidMetric
;
#
[
derive
(
Debug
PartialEq
Eq
Hash
Copy
Clone
Deserialize
Serialize
)
]
#
[
repr
(
transparent
)
]
pub
struct
MetricId
(
pub
(
crate
)
u32
)
;
impl
MetricId
{
pub
fn
new
(
id
:
u32
)
-
>
Self
{
Self
(
id
)
}
}
impl
From
<
u32
>
for
MetricId
{
fn
from
(
id
:
u32
)
-
>
Self
{
Self
(
id
)
}
}
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
pub
(
crate
)
mod
profiler_utils
{
#
[
derive
(
Debug
)
]
pub
(
crate
)
enum
LookupError
{
NullPointer
Utf8ParseError
(
std
:
:
str
:
:
Utf8Error
)
}
impl
LookupError
{
pub
fn
as_str
(
self
)
-
>
&
'
static
str
{
match
self
{
LookupError
:
:
NullPointer
=
>
"
id
not
found
"
LookupError
:
:
Utf8ParseError
(
_
)
=
>
"
utf8
parse
error
"
}
}
}
impl
std
:
:
fmt
:
:
Display
for
LookupError
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
match
self
{
LookupError
:
:
NullPointer
=
>
write
!
(
f
"
id
not
found
"
)
LookupError
:
:
Utf8ParseError
(
p
)
=
>
write
!
(
f
"
utf8
parse
error
:
{
}
"
p
)
}
}
}
pub
(
crate
)
fn
lookup_canonical_metric_name
(
id
:
&
super
:
:
MetricId
)
-
>
Result
<
&
'
static
str
LookupError
>
{
#
[
allow
(
unused
)
]
use
std
:
:
ffi
:
:
{
c_char
CStr
}
;
extern
"
C
"
{
fn
FOG_GetMetricIdentifier
(
id
:
u32
)
-
>
*
const
c_char
;
}
unsafe
{
let
raw_name_ptr
=
FOG_GetMetricIdentifier
(
id
.
0
)
;
if
raw_name_ptr
.
is_null
(
)
{
Err
(
LookupError
:
:
NullPointer
)
}
else
{
let
name
=
CStr
:
:
from_ptr
(
raw_name_ptr
)
.
to_str
(
)
;
match
name
{
Ok
(
s
)
=
>
Ok
(
s
)
Err
(
ut8err
)
=
>
Err
(
LookupError
:
:
Utf8ParseError
(
ut8err
)
)
}
}
}
}
}
