use
inherent
:
:
inherent
;
use
glean
:
:
traits
:
:
Counter
;
use
crate
:
:
ipc
:
:
with_ipc_payload
;
#
[
cfg
(
test
)
]
use
crate
:
:
private
:
:
MetricId
;
use
crate
:
:
private
:
:
{
BaseMetricId
CounterMetric
}
;
use
std
:
:
collections
:
:
HashMap
;
#
[
derive
(
Clone
)
]
pub
enum
DualLabeledCounterSubMetric
{
Parent
(
CounterMetric
)
Child
{
id
:
BaseMetricId
dual_labels
:
(
String
String
)
}
}
impl
DualLabeledCounterSubMetric
{
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
metric_id
(
&
self
)
-
>
MetricId
{
match
self
{
DualLabeledCounterSubMetric
:
:
Parent
(
p
)
=
>
p
.
metric_id
(
)
DualLabeledCounterSubMetric
:
:
Child
{
id
.
.
}
=
>
(
*
id
)
.
into
(
)
}
}
}
#
[
inherent
]
impl
Counter
for
DualLabeledCounterSubMetric
{
pub
fn
add
(
&
self
amount
:
i32
)
{
match
self
{
DualLabeledCounterSubMetric
:
:
Parent
(
p
)
=
>
p
.
add
(
amount
)
DualLabeledCounterSubMetric
:
:
Child
{
id
dual_labels
}
=
>
{
with_ipc_payload
(
move
|
payload
|
{
if
let
Some
(
map
)
=
payload
.
dual_labeled_counters
.
get_mut
(
id
)
{
if
let
Some
(
v
)
=
map
.
get_mut
(
dual_labels
)
{
*
v
+
=
amount
;
}
else
{
map
.
insert
(
dual_labels
.
clone
(
)
amount
)
;
}
}
else
{
let
mut
map
=
HashMap
:
:
new
(
)
;
map
.
insert
(
dual_labels
.
clone
(
)
amount
)
;
payload
.
dual_labeled_counters
.
insert
(
*
id
map
)
;
}
}
)
;
}
}
}
pub
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
i32
>
{
match
self
{
DualLabeledCounterSubMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_value
(
ping_name
)
DualLabeledCounterSubMetric
:
:
Child
{
id
.
.
}
=
>
{
panic
!
(
"
Cannot
get
test
value
for
{
:
?
}
in
non
-
parent
process
!
"
id
)
}
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
glean
:
:
ErrorType
)
-
>
i32
{
match
self
{
DualLabeledCounterSubMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_num_recorded_errors
(
error
)
DualLabeledCounterSubMetric
:
:
Child
{
id
.
.
}
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
{
:
?
}
in
non
-
parent
process
!
"
id
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_dual_labeled_counter_value_parent
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_dual_labeled_counter
;
metric
.
get
(
"
a_key
"
"
a_category
"
)
.
add
(
1
)
;
assert_eq
!
(
1
metric
.
get
(
"
a_key
"
"
a_category
"
)
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
sets_dual_labeled_counter_value_child
(
)
{
let
_lock
=
lock_test
(
)
;
let
key
=
"
some_key
"
;
let
category
=
"
some_category
"
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_dual_labeled_counter
;
parent_metric
.
get
(
key
category
)
.
add
(
3
)
;
{
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
{
let
mut
map
=
crate
:
:
metrics
:
:
__glean_metric_maps
:
:
submetric_maps
:
:
DUAL_COUNTER_MAP
.
write
(
)
.
expect
(
"
Write
lock
for
COUNTER_MAP
was
poisoned
"
)
;
map
.
clear
(
)
;
}
let
child_metric
=
parent_metric
.
get
(
key
category
)
;
let
metric_id
=
child_metric
.
metric_id
(
)
.
base_metric_id
(
)
.
expect
(
"
Cannot
perform
IPC
calls
without
a
BaseMetricId
"
)
;
child_metric
.
add
(
42
)
;
ipc
:
:
with_ipc_payload
(
move
|
payload
|
{
assert_eq
!
(
42
*
payload
.
dual_labeled_counters
.
get
(
&
metric_id
)
.
unwrap
(
)
.
get
(
&
(
key
.
to_string
(
)
category
.
to_string
(
)
)
)
.
unwrap
(
)
"
Stored
the
correct
value
in
the
ipc
payload
"
)
;
}
)
;
{
let
mut
map
=
crate
:
:
metrics
:
:
__glean_metric_maps
:
:
submetric_maps
:
:
DUAL_COUNTER_MAP
.
write
(
)
.
expect
(
"
Write
lock
for
COUNTER_MAP
was
poisoned
"
)
;
map
.
clear
(
)
;
}
}
assert
!
(
false
=
=
ipc
:
:
need_ipc
(
)
"
RAII
dropped
should
not
need
ipc
any
more
"
)
;
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert_eq
!
(
45
parent_metric
.
get
(
key
category
)
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
"
Values
from
the
'
processes
'
should
be
summed
"
)
;
}
}
