use
inherent
:
:
inherent
;
use
crate
:
:
ipc
:
:
need_ipc
;
#
[
derive
(
Clone
Debug
)
]
pub
enum
Ping
{
Parent
(
glean
:
:
private
:
:
PingType
)
Child
}
impl
Ping
{
pub
fn
new
<
S
:
Into
<
String
>
>
(
name
:
S
include_client_id
:
bool
send_if_empty
:
bool
reason_codes
:
Vec
<
String
>
)
-
>
Self
{
if
need_ipc
(
)
{
Ping
:
:
Child
}
else
{
Ping
:
:
Parent
(
glean
:
:
private
:
:
PingType
:
:
new
(
name
include_client_id
send_if_empty
reason_codes
)
)
}
}
}
#
[
inherent
(
pub
)
]
impl
glean
:
:
traits
:
:
Ping
for
Ping
{
fn
submit
(
&
self
reason
:
Option
<
&
str
>
)
{
match
self
{
Ping
:
:
Parent
(
p
)
=
>
{
glean
:
:
traits
:
:
Ping
:
:
submit
(
p
reason
)
;
}
Ping
:
:
Child
=
>
{
log
:
:
error
!
(
"
Unable
to
submit
ping
{
:
?
}
in
non
-
main
process
.
Ignoring
.
"
self
)
;
}
}
;
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
once_cell
:
:
sync
:
:
Lazy
;
use
super
:
:
*
;
use
crate
:
:
common_test
:
:
*
;
static
PROTOTYPE_PING
:
Lazy
<
Ping
>
=
Lazy
:
:
new
(
|
|
Ping
:
:
new
(
"
prototype
"
false
true
vec
!
[
]
)
)
;
#
[
test
]
fn
smoke_test_custom_ping
(
)
{
let
_lock
=
lock_test
(
)
;
PROTOTYPE_PING
.
submit
(
None
)
;
}
}
