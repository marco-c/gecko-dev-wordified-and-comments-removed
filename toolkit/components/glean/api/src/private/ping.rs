#
[
derive
(
Clone
Debug
)
]
pub
struct
Ping
(
glean_core
:
:
metrics
:
:
PingType
)
;
impl
Ping
{
pub
fn
new
<
S
:
Into
<
String
>
>
(
name
:
S
include_client_id
:
bool
send_if_empty
:
bool
reason_codes
:
Vec
<
String
>
)
-
>
Self
{
let
ping
=
glean_core
:
:
metrics
:
:
PingType
:
:
new
(
name
include_client_id
send_if_empty
reason_codes
)
;
crate
:
:
with_glean
(
|
glean
|
{
glean
.
register_ping_type
(
&
ping
)
;
}
)
;
Self
(
ping
)
}
pub
fn
submit
(
&
self
reason
:
Option
<
&
str
>
)
-
>
bool
{
let
res
=
crate
:
:
with_glean
(
|
glean
|
self
.
0
.
submit
(
glean
reason
)
.
unwrap_or
(
false
)
)
;
if
res
{
crate
:
:
ping_upload
:
:
check_for_uploads
(
)
;
}
res
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
once_cell
:
:
sync
:
:
Lazy
;
use
super
:
:
*
;
use
crate
:
:
common_test
:
:
*
;
static
PROTOTYPE_PING
:
Lazy
<
Ping
>
=
Lazy
:
:
new
(
|
|
Ping
:
:
new
(
"
prototype
"
false
true
vec
!
[
]
)
)
;
#
[
test
]
fn
smoke_test_custom_ping
(
)
{
let
_lock
=
lock_test
(
)
;
crate
:
:
dispatcher
:
:
block_on_queue
(
)
;
assert_eq
!
(
true
PROTOTYPE_PING
.
submit
(
None
)
)
;
}
}
