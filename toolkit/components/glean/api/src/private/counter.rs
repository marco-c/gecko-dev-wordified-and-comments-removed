use
glean
:
:
traits
:
:
Counter
;
use
inherent
:
:
inherent
;
use
std
:
:
sync
:
:
Arc
;
use
super
:
:
{
BaseMetricId
ChildMetricMeta
CommonMetricData
MetricId
}
;
use
crate
:
:
ipc
:
:
{
need_ipc
with_ipc_payload
}
;
#
[
derive
(
Clone
)
]
pub
enum
CounterMetric
{
Parent
{
id
:
MetricId
inner
:
Arc
<
glean
:
:
private
:
:
CounterMetric
>
}
Child
(
ChildMetricMeta
)
}
crate
:
:
define_metric_namer
!
(
CounterMetric
)
;
impl
CounterMetric
{
pub
fn
new
(
id
:
BaseMetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
CounterMetric
:
:
Child
(
ChildMetricMeta
:
:
from_common_metric_data
(
id
meta
)
)
}
else
{
let
inner
=
Arc
:
:
new
(
glean
:
:
private
:
:
CounterMetric
:
:
new
(
meta
)
)
;
CounterMetric
:
:
Parent
{
id
:
id
.
into
(
)
inner
}
}
}
pub
fn
codegen_new
(
id
:
u32
category
:
&
str
name
:
&
str
ping
:
&
str
)
-
>
Self
{
if
need_ipc
(
)
{
CounterMetric
:
:
Child
(
ChildMetricMeta
:
:
from_name_category_pair
(
BaseMetricId
(
id
)
name
category
)
)
}
else
{
let
inner
=
Arc
:
:
new
(
glean
:
:
private
:
:
CounterMetric
:
:
new
(
CommonMetricData
{
category
:
category
.
into
(
)
name
:
name
.
into
(
)
send_in_pings
:
vec
!
[
ping
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
)
;
CounterMetric
:
:
Parent
{
id
:
BaseMetricId
(
id
)
.
into
(
)
inner
}
}
}
pub
fn
codegen_disabled_new
(
id
:
u32
category
:
&
str
name
:
&
str
ping
:
&
str
)
-
>
Self
{
if
need_ipc
(
)
{
CounterMetric
:
:
Child
(
ChildMetricMeta
:
:
from_name_category_pair
(
BaseMetricId
(
id
)
name
category
)
)
}
else
{
let
inner
=
Arc
:
:
new
(
glean
:
:
private
:
:
CounterMetric
:
:
new
(
CommonMetricData
{
category
:
category
.
into
(
)
name
:
name
.
into
(
)
send_in_pings
:
vec
!
[
ping
.
into
(
)
]
disabled
:
true
.
.
Default
:
:
default
(
)
}
)
)
;
CounterMetric
:
:
Parent
{
id
:
BaseMetricId
(
id
)
.
into
(
)
inner
}
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
metric_id
(
&
self
)
-
>
MetricId
{
match
self
{
CounterMetric
:
:
Parent
{
id
.
.
}
=
>
*
id
CounterMetric
:
:
Child
(
meta
)
=
>
meta
.
id
.
into
(
)
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
CounterMetric
:
:
Parent
{
id
inner
}
=
>
{
CounterMetric
:
:
Child
(
ChildMetricMeta
:
:
from_metric_identifier
(
id
.
base_metric_id
(
)
.
unwrap
(
)
inner
.
as_ref
(
)
)
)
}
CounterMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
}
#
[
inherent
]
impl
Counter
for
CounterMetric
{
pub
fn
add
(
&
self
amount
:
i32
)
{
#
[
allow
(
unused
)
]
let
id
=
match
self
{
CounterMetric
:
:
Parent
{
id
inner
.
.
}
=
>
{
inner
.
add
(
amount
)
;
*
id
}
CounterMetric
:
:
Child
(
meta
)
=
>
{
with_ipc_payload
(
move
|
payload
|
{
if
let
Some
(
v
)
=
payload
.
counters
.
get_mut
(
&
meta
.
id
)
{
*
v
+
=
amount
;
}
else
{
payload
.
counters
.
insert
(
meta
.
id
amount
)
;
}
}
)
;
MetricId
:
:
Id
(
meta
.
id
)
}
}
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
if
gecko_profiler
:
:
can_accept_markers
(
)
{
gecko_profiler
:
:
add_marker
(
"
Counter
:
:
add
"
super
:
:
profiler_utils
:
:
TelemetryProfilerCategory
Default
:
:
default
(
)
super
:
:
profiler_utils
:
:
IntLikeMetricMarker
:
:
<
CounterMetric
i32
>
:
:
new
(
id
None
amount
)
)
;
}
}
pub
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
i32
>
{
let
ping_name
=
ping_name
.
into
(
)
.
map
(
|
s
|
s
.
to_string
(
)
)
;
match
self
{
CounterMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_value
(
ping_name
)
CounterMetric
:
:
Child
(
meta
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
{
:
?
}
in
non
-
parent
process
!
"
meta
.
id
)
}
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
glean
:
:
ErrorType
)
-
>
i32
{
match
self
{
CounterMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_num_recorded_errors
(
error
)
CounterMetric
:
:
Child
(
meta
)
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
{
:
?
}
in
non
-
parent
process
!
"
meta
.
id
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_counter_value_parent
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_counter
;
metric
.
add
(
1
)
;
assert_eq
!
(
1
metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
sets_counter_value_child
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_counter
;
parent_metric
.
add
(
3
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
let
metric_id
=
child_metric
.
metric_id
(
)
.
base_metric_id
(
)
.
expect
(
"
Cannot
perform
IPC
calls
without
a
BaseMetricId
"
)
;
child_metric
.
add
(
42
)
;
ipc
:
:
with_ipc_payload
(
move
|
payload
|
{
assert
!
(
42
=
=
*
payload
.
counters
.
get
(
&
metric_id
)
.
unwrap
(
)
"
Stored
the
correct
value
in
the
ipc
payload
"
)
;
}
)
;
}
assert
!
(
false
=
=
ipc
:
:
need_ipc
(
)
"
RAII
dropped
should
not
need
ipc
any
more
"
)
;
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert
!
(
45
=
=
parent_metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
"
Values
from
the
'
processes
'
should
be
summed
"
)
;
}
}
