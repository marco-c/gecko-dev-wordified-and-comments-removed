use
inherent
:
:
inherent
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
convert
:
:
TryInto
;
use
std
:
:
sync
:
:
{
atomic
:
:
{
AtomicUsize
Ordering
}
RwLock
}
;
use
std
:
:
time
:
:
Instant
;
use
super
:
:
{
CommonMetricData
MetricId
TimeUnit
}
;
use
glean
:
:
{
DistributionData
ErrorType
TimerId
}
;
use
crate
:
:
ipc
:
:
{
need_ipc
with_ipc_payload
}
;
use
glean
:
:
traits
:
:
TimingDistribution
;
pub
enum
TimingDistributionMetric
{
Parent
{
id
:
MetricId
inner
:
glean
:
:
private
:
:
TimingDistributionMetric
}
Child
(
TimingDistributionMetricIpc
)
}
#
[
derive
(
Debug
)
]
pub
struct
TimingDistributionMetricIpc
{
metric_id
:
MetricId
next_timer_id
:
AtomicUsize
instants
:
RwLock
<
HashMap
<
u64
Instant
>
>
}
impl
TimingDistributionMetric
{
pub
fn
new
(
id
:
MetricId
meta
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
if
need_ipc
(
)
{
TimingDistributionMetric
:
:
Child
(
TimingDistributionMetricIpc
{
metric_id
:
id
next_timer_id
:
AtomicUsize
:
:
new
(
0
)
instants
:
RwLock
:
:
new
(
HashMap
:
:
new
(
)
)
}
)
}
else
{
let
inner
=
glean
:
:
private
:
:
TimingDistributionMetric
:
:
new
(
meta
time_unit
)
;
TimingDistributionMetric
:
:
Parent
{
id
inner
}
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
TimingDistributionMetric
:
:
Parent
{
id
.
.
}
=
>
{
TimingDistributionMetric
:
:
Child
(
TimingDistributionMetricIpc
{
metric_id
:
*
id
next_timer_id
:
AtomicUsize
:
:
new
(
0
)
instants
:
RwLock
:
:
new
(
HashMap
:
:
new
(
)
)
}
)
}
TimingDistributionMetric
:
:
Child
(
_
)
=
>
{
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
}
pub
(
crate
)
fn
accumulate_raw_samples_nanos
(
&
self
samples
:
Vec
<
u64
>
)
{
match
self
{
TimingDistributionMetric
:
:
Parent
{
inner
.
.
}
=
>
{
inner
.
accumulate_raw_samples_nanos
(
samples
)
;
}
TimingDistributionMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Can
'
t
record
samples
for
a
timing
distribution
from
a
child
metric
"
)
;
}
}
}
}
#
[
inherent
(
pub
)
]
impl
TimingDistribution
for
TimingDistributionMetric
{
fn
start
(
&
self
)
-
>
TimerId
{
match
self
{
TimingDistributionMetric
:
:
Parent
{
id
inner
}
=
>
{
let
timer_id
=
inner
.
start
(
)
;
extern
"
C
"
{
fn
GIFFT_TimingDistributionStart
(
metric_id
:
u32
timer_id
:
u64
)
;
}
unsafe
{
GIFFT_TimingDistributionStart
(
id
.
0
timer_id
)
;
}
timer_id
}
TimingDistributionMetric
:
:
Child
(
c
)
=
>
{
let
id
=
c
.
next_timer_id
.
fetch_add
(
1
Ordering
:
:
SeqCst
)
.
try_into
(
)
.
unwrap
(
)
;
let
mut
map
=
c
.
instants
.
write
(
)
.
expect
(
"
lock
of
instants
map
was
poisoned
"
)
;
if
let
Some
(
_v
)
=
map
.
insert
(
id
Instant
:
:
now
(
)
)
{
}
id
}
}
}
fn
stop_and_accumulate
(
&
self
id
:
TimerId
)
{
match
self
{
TimingDistributionMetric
:
:
Parent
{
id
:
metric_id
inner
}
=
>
{
extern
"
C
"
{
fn
GIFFT_TimingDistributionStopAndAccumulate
(
metric_id
:
u32
timer_id
:
u64
)
;
}
unsafe
{
GIFFT_TimingDistributionStopAndAccumulate
(
metric_id
.
0
id
)
;
}
inner
.
stop_and_accumulate
(
id
)
;
}
TimingDistributionMetric
:
:
Child
(
c
)
=
>
{
let
mut
map
=
c
.
instants
.
write
(
)
.
expect
(
"
Write
lock
must
'
ve
been
poisoned
.
"
)
;
if
let
Some
(
start
)
=
map
.
remove
(
&
id
)
{
let
now
=
Instant
:
:
now
(
)
;
let
sample
=
now
.
checked_duration_since
(
start
)
.
map
(
|
s
|
s
.
as_nanos
(
)
.
try_into
(
)
)
;
let
sample
=
match
sample
{
Some
(
Ok
(
sample
)
)
=
>
sample
Some
(
Err
(
_
)
)
=
>
{
log
:
:
warn
!
(
"
Elapsed
time
larger
than
fits
into
64
-
bytes
.
Saturating
at
u64
:
:
MAX
.
"
)
;
u64
:
:
MAX
}
None
=
>
{
log
:
:
warn
!
(
"
Time
went
backwards
.
Not
recording
.
"
)
;
return
;
}
}
;
with_ipc_payload
(
move
|
payload
|
{
if
let
Some
(
v
)
=
payload
.
timing_samples
.
get_mut
(
&
c
.
metric_id
)
{
v
.
push
(
sample
)
;
}
else
{
payload
.
timing_samples
.
insert
(
c
.
metric_id
vec
!
[
sample
]
)
;
}
}
)
;
}
else
{
}
}
}
}
fn
cancel
(
&
self
id
:
TimerId
)
{
match
self
{
TimingDistributionMetric
:
:
Parent
{
id
:
metric_id
inner
}
=
>
{
extern
"
C
"
{
fn
GIFFT_TimingDistributionCancel
(
metric_id
:
u32
timer_id
:
u64
)
;
}
unsafe
{
GIFFT_TimingDistributionCancel
(
metric_id
.
0
id
)
;
}
inner
.
cancel
(
id
)
;
}
TimingDistributionMetric
:
:
Child
(
c
)
=
>
{
let
mut
map
=
c
.
instants
.
write
(
)
.
expect
(
"
Write
lock
must
'
ve
been
poisoned
.
"
)
;
if
map
.
remove
(
&
id
)
.
is_none
(
)
{
}
}
}
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
DistributionData
>
{
match
self
{
TimingDistributionMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_value
(
ping_name
)
TimingDistributionMetric
:
:
Child
(
c
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
{
:
?
}
in
non
-
parent
process
!
"
c
)
}
}
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
ErrorType
ping_name
:
S
)
-
>
i32
{
match
self
{
TimingDistributionMetric
:
:
Parent
{
inner
.
.
}
=
>
{
inner
.
test_get_num_recorded_errors
(
error
ping_name
)
}
TimingDistributionMetric
:
:
Child
(
c
)
=
>
panic
!
(
"
Cannot
get
number
of
recorded
errors
for
{
:
?
}
in
non
-
parent
process
!
"
c
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
smoke_test_timing_distribution
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_timing_dist
;
let
id
=
metric
.
start
(
)
;
metric
.
cancel
(
id
)
;
assert
!
(
metric
.
test_get_value
(
"
store1
"
)
.
is_none
(
)
)
;
}
#
[
test
]
fn
timing_distribution_child
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_timing_dist
;
let
id
=
parent_metric
.
start
(
)
;
std
:
:
thread
:
:
sleep
(
std
:
:
time
:
:
Duration
:
:
from_millis
(
10
)
)
;
parent_metric
.
stop_and_accumulate
(
id
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
let
id
=
child_metric
.
start
(
)
;
let
id2
=
child_metric
.
start
(
)
;
assert_ne
!
(
id
id2
)
;
std
:
:
thread
:
:
sleep
(
std
:
:
time
:
:
Duration
:
:
from_millis
(
10
)
)
;
child_metric
.
stop_and_accumulate
(
id
)
;
child_metric
.
cancel
(
id2
)
;
}
let
buf
=
ipc
:
:
take_buf
(
)
.
unwrap
(
)
;
assert
!
(
buf
.
len
(
)
>
0
)
;
assert
!
(
ipc
:
:
replay_from_buf
(
&
buf
)
.
is_ok
(
)
)
;
let
data
=
parent_metric
.
test_get_value
(
"
store1
"
)
.
expect
(
"
should
have
some
data
"
)
;
assert_eq
!
(
2
data
.
values
.
values
(
)
.
fold
(
0
|
acc
count
|
acc
+
count
)
"
record
2
values
one
parent
one
child
measurement
"
)
;
assert
!
(
0
<
data
.
sum
"
record
some
time
"
)
;
}
}
