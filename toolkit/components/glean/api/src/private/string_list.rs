use
inherent
:
:
inherent
;
use
super
:
:
{
CommonMetricData
MetricId
}
;
use
glean
:
:
traits
:
:
StringList
;
use
crate
:
:
ipc
:
:
{
need_ipc
with_ipc_payload
}
;
#
[
derive
(
Clone
)
]
pub
enum
StringListMetric
{
Parent
{
id
:
MetricId
inner
:
glean
:
:
private
:
:
StringListMetric
}
Child
(
StringListMetricIpc
)
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
StringListMetricIpc
(
MetricId
)
;
impl
StringListMetric
{
pub
fn
new
(
id
:
MetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
StringListMetric
:
:
Child
(
StringListMetricIpc
(
id
)
)
}
else
{
let
inner
=
glean
:
:
private
:
:
StringListMetric
:
:
new
(
meta
)
;
StringListMetric
:
:
Parent
{
id
inner
}
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
StringListMetric
:
:
Parent
{
id
.
.
}
=
>
{
StringListMetric
:
:
Child
(
StringListMetricIpc
(
*
id
)
)
}
StringListMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
}
#
[
inherent
(
pub
)
]
impl
StringList
for
StringListMetric
{
fn
add
<
S
:
Into
<
String
>
>
(
&
self
value
:
S
)
{
match
self
{
StringListMetric
:
:
Parent
{
inner
.
.
}
=
>
{
StringList
:
:
add
(
&
*
inner
value
)
;
}
StringListMetric
:
:
Child
(
c
)
=
>
{
with_ipc_payload
(
move
|
payload
|
{
if
let
Some
(
v
)
=
payload
.
string_lists
.
get_mut
(
&
c
.
0
)
{
v
.
push
(
value
.
into
(
)
)
;
}
else
{
let
v
=
vec
!
[
value
.
into
(
)
]
;
payload
.
string_lists
.
insert
(
c
.
0
v
)
;
}
}
)
;
}
}
}
fn
set
(
&
self
value
:
Vec
<
String
>
)
{
match
self
{
StringListMetric
:
:
Parent
{
inner
.
.
}
=
>
{
StringList
:
:
set
(
&
*
inner
value
)
;
}
StringListMetric
:
:
Child
(
c
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
string
list
metric
{
:
?
}
in
non
-
main
process
.
Ignoring
.
"
c
.
0
)
;
}
}
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
Vec
<
String
>
>
{
match
self
{
StringListMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_value
(
ping_name
)
StringListMetric
:
:
Child
(
c
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
{
:
?
}
in
non
-
parent
process
!
"
c
.
0
)
}
}
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
glean
:
:
ErrorType
ping_name
:
S
)
-
>
i32
{
match
self
{
StringListMetric
:
:
Parent
{
inner
.
.
}
=
>
{
inner
.
test_get_num_recorded_errors
(
error
ping_name
)
}
StringListMetric
:
:
Child
(
c
)
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
{
:
?
}
in
non
-
parent
process
!
"
c
.
0
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
#
[
ignore
]
fn
sets_string_list_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_string_list
;
metric
.
set
(
vec
!
[
"
test_string_value
"
.
to_string
(
)
]
)
;
metric
.
add
(
"
another
test
value
"
)
;
assert_eq
!
(
vec
!
[
"
test_string_value
"
"
another
test
value
"
]
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
#
[
ignore
]
fn
string_list_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_string_list
;
parent_metric
.
set
(
vec
!
[
"
test_string_value
"
.
to_string
(
)
]
)
;
parent_metric
.
add
(
"
another
test
value
"
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
child_metric
.
set
(
vec
!
[
"
not
gonna
be
set
"
.
to_string
(
)
]
)
;
child_metric
.
add
(
"
child_value
"
)
;
assert
!
(
ipc
:
:
take_buf
(
)
.
unwrap
(
)
.
len
(
)
>
0
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert_eq
!
(
vec
!
[
"
test_string_value
"
"
another
test
value
"
]
parent_metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
}
