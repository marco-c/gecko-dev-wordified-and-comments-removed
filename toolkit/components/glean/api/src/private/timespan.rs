use
inherent
:
:
inherent
;
use
super
:
:
{
CommonMetricData
MetricId
TimeUnit
}
;
use
glean_core
:
:
traits
:
:
Timespan
;
use
crate
:
:
ipc
:
:
need_ipc
;
pub
enum
TimespanMetric
{
Parent
(
glean
:
:
private
:
:
TimespanMetric
)
Child
}
impl
TimespanMetric
{
pub
fn
new
(
_id
:
MetricId
meta
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
if
need_ipc
(
)
{
TimespanMetric
:
:
Child
}
else
{
TimespanMetric
:
:
Parent
(
glean
:
:
private
:
:
TimespanMetric
:
:
new
(
meta
time_unit
)
)
}
}
}
#
[
inherent
(
pub
)
]
impl
Timespan
for
TimespanMetric
{
fn
start
(
&
self
)
{
match
self
{
TimespanMetric
:
:
Parent
(
p
)
=
>
Timespan
:
:
start
(
p
)
TimespanMetric
:
:
Child
=
>
{
log
:
:
error
!
(
"
Unable
to
start
timespan
metric
in
non
-
main
process
.
Ignoring
.
"
)
;
}
}
}
fn
stop
(
&
self
)
{
match
self
{
TimespanMetric
:
:
Parent
(
p
)
=
>
Timespan
:
:
stop
(
p
)
TimespanMetric
:
:
Child
=
>
{
log
:
:
error
!
(
"
Unable
to
stop
timespan
metric
in
non
-
main
process
.
Ignoring
.
"
)
;
}
}
}
fn
cancel
(
&
self
)
{
match
self
{
TimespanMetric
:
:
Parent
(
p
)
=
>
Timespan
:
:
cancel
(
p
)
TimespanMetric
:
:
Child
=
>
{
log
:
:
error
!
(
"
Unable
to
cancel
timespan
metric
in
non
-
main
process
.
Ignoring
.
"
)
;
}
}
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
u64
>
{
match
self
{
TimespanMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_value
(
ping_name
)
TimespanMetric
:
:
Child
=
>
{
panic
!
(
"
Cannot
get
test
value
for
in
non
-
parent
process
!
"
)
;
}
}
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
glean
:
:
ErrorType
ping_name
:
S
)
-
>
i32
{
match
self
{
TimespanMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_num_recorded_errors
(
error
ping_name
)
TimespanMetric
:
:
Child
=
>
{
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
timespan
metric
in
non
-
parent
process
!
"
)
;
}
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
smoke_test_timespan
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
TimespanMetric
:
:
new
(
0
.
into
(
)
CommonMetricData
{
name
:
"
timespan_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
disabled
:
false
.
.
Default
:
:
default
(
)
}
TimeUnit
:
:
Nanosecond
)
;
metric
.
start
(
)
;
metric
.
cancel
(
)
;
assert_eq
!
(
None
metric
.
test_get_value
(
"
store1
"
)
)
;
}
#
[
test
]
fn
timespan_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
let
child_metric
=
&
metrics
:
:
test_only
:
:
can_we_time_it
;
child_metric
.
start
(
)
;
child_metric
.
cancel
(
)
;
let
result
=
std
:
:
panic
:
:
catch_unwind
(
move
|
|
{
child_metric
.
test_get_value
(
"
store1
"
)
;
}
)
;
assert
!
(
result
.
is_err
(
)
)
;
}
}
