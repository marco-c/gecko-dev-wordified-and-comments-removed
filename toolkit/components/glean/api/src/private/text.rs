use
inherent
:
:
inherent
;
use
std
:
:
sync
:
:
Arc
;
use
super
:
:
{
CommonMetricData
MetricId
}
;
use
crate
:
:
ipc
:
:
need_ipc
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
use
super
:
:
profiler_utils
:
:
StringLikeMetricMarker
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
use
gecko_profiler
:
:
gecko_profiler_category
;
#
[
derive
(
Clone
)
]
pub
enum
TextMetric
{
Parent
{
id
:
MetricId
inner
:
Arc
<
glean
:
:
private
:
:
TextMetric
>
}
Child
(
TextMetricIpc
)
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
TextMetricIpc
;
impl
TextMetric
{
pub
fn
new
(
id
:
MetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
TextMetric
:
:
Child
(
TextMetricIpc
)
}
else
{
TextMetric
:
:
Parent
{
id
:
id
inner
:
Arc
:
:
new
(
glean
:
:
private
:
:
TextMetric
:
:
new
(
meta
)
)
}
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
TextMetric
:
:
Parent
{
.
.
}
=
>
TextMetric
:
:
Child
(
TextMetricIpc
)
TextMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
process
"
)
}
}
}
#
[
inherent
]
impl
glean
:
:
traits
:
:
Text
for
TextMetric
{
pub
fn
set
<
S
:
Into
<
std
:
:
string
:
:
String
>
>
(
&
self
value
:
S
)
{
match
self
{
#
[
allow
(
unused
)
]
TextMetric
:
:
Parent
{
id
inner
}
=
>
{
let
value
=
value
.
into
(
)
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
if
gecko_profiler
:
:
can_accept_markers
(
)
{
gecko_profiler
:
:
add_marker
(
"
Text
:
:
set
"
gecko_profiler_category
!
(
Telemetry
)
Default
:
:
default
(
)
StringLikeMetricMarker
:
:
new
(
*
id
&
value
)
)
;
}
inner
.
set
(
value
)
;
}
TextMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
text
metric
in
non
-
main
process
.
This
operation
will
be
ignored
.
"
)
;
assert
!
(
!
crate
:
:
ipc
:
:
is_in_automation
(
)
"
Attempted
to
set
text
metric
in
non
-
main
process
which
is
forbidden
.
This
panics
in
automation
.
"
)
;
}
}
}
pub
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
std
:
:
string
:
:
String
>
{
let
ping_name
=
ping_name
.
into
(
)
.
map
(
|
s
|
s
.
to_string
(
)
)
;
match
self
{
TextMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_value
(
ping_name
)
TextMetric
:
:
Child
(
_
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
text
metric
in
non
-
main
process
!
"
)
}
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
glean
:
:
ErrorType
)
-
>
i32
{
match
self
{
TextMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_num_recorded_errors
(
error
)
TextMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
text
metric
in
non
-
main
process
!
"
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_text_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_text
;
metric
.
set
(
"
test_text_value
"
)
;
assert_eq
!
(
"
test_text_value
"
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
text_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_text
;
parent_metric
.
set
(
"
test_parent_value
"
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
child_metric
.
set
(
"
test_child_value
"
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert
!
(
"
test_parent_value
"
=
=
parent_metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
"
Text
metrics
should
only
work
in
the
parent
process
"
)
;
}
}
