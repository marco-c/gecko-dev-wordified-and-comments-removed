use
std
:
:
sync
:
:
Arc
;
use
uuid
:
:
Uuid
;
use
super
:
:
{
CommonMetricData
MetricId
}
;
use
crate
:
:
{
dispatcher
ipc
:
:
need_ipc
}
;
#
[
derive
(
Debug
)
]
pub
enum
UuidMetric
{
Parent
(
Arc
<
UuidMetricImpl
>
)
Child
(
UuidMetricIpc
)
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
UuidMetricImpl
(
pub
(
crate
)
glean_core
:
:
metrics
:
:
UuidMetric
)
;
#
[
derive
(
Debug
)
]
pub
struct
UuidMetricIpc
;
impl
UuidMetric
{
pub
fn
new
(
_id
:
MetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
UuidMetric
:
:
Child
(
UuidMetricIpc
)
}
else
{
UuidMetric
:
:
Parent
(
Arc
:
:
new
(
UuidMetricImpl
:
:
new
(
meta
)
)
)
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
UuidMetric
:
:
Parent
(
_
)
=
>
UuidMetric
:
:
Child
(
UuidMetricIpc
)
UuidMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
pub
fn
set
(
&
self
value
:
Uuid
)
{
match
self
{
UuidMetric
:
:
Parent
(
p
)
=
>
{
let
metric
=
Arc
:
:
clone
(
&
p
)
;
dispatcher
:
:
launch
(
move
|
|
metric
.
set
(
value
)
)
;
}
UuidMetric
:
:
Child
(
_c
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
UUID
metric
{
:
?
}
in
non
-
main
process
.
Ignoring
.
"
self
)
;
}
}
;
}
pub
fn
generate_and_set
(
&
self
)
{
match
self
{
UuidMetric
:
:
Parent
(
p
)
=
>
{
let
metric
=
Arc
:
:
clone
(
&
p
)
;
dispatcher
:
:
launch
(
move
|
|
metric
.
generate_and_set
(
)
)
;
}
UuidMetric
:
:
Child
(
_c
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
UUID
metric
{
:
?
}
in
non
-
main
process
.
Ignoring
.
"
self
)
;
}
}
;
}
pub
fn
test_get_value
(
&
self
storage_name
:
&
str
)
-
>
Option
<
Uuid
>
{
match
self
{
UuidMetric
:
:
Parent
(
p
)
=
>
{
dispatcher
:
:
block_on_queue
(
)
;
p
.
test_get_value
(
storage_name
)
.
map
(
|
uuid
|
{
Uuid
:
:
parse_str
(
&
uuid
)
.
expect
(
"
can
'
t
parse
internally
created
UUID
value
"
)
}
)
}
UuidMetric
:
:
Child
(
_c
)
=
>
panic
!
(
"
Cannot
get
test
value
for
{
:
?
}
in
non
-
parent
process
!
"
self
)
}
}
}
impl
UuidMetricImpl
{
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
Self
(
glean_core
:
:
metrics
:
:
UuidMetric
:
:
new
(
meta
)
)
}
fn
set
(
&
self
value
:
Uuid
)
{
crate
:
:
with_glean
(
move
|
glean
|
self
.
0
.
set
(
glean
value
)
)
;
}
fn
generate_and_set
(
&
self
)
{
crate
:
:
with_glean
(
move
|
glean
|
self
.
0
.
generate_and_set
(
glean
)
)
;
}
fn
test_get_value
(
&
self
storage_name
:
&
str
)
-
>
Option
<
String
>
{
crate
:
:
with_glean
(
move
|
glean
|
self
.
0
.
test_get_value
(
glean
storage_name
)
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_uuid_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_uuid
;
let
expected
=
Uuid
:
:
new_v4
(
)
;
metric
.
set
(
expected
.
clone
(
)
)
;
assert_eq
!
(
expected
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
uuid_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_uuid
;
let
expected
=
Uuid
:
:
new_v4
(
)
;
parent_metric
.
set
(
expected
.
clone
(
)
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
child_metric
.
set
(
Uuid
:
:
new_v4
(
)
)
;
let
result
=
std
:
:
panic
:
:
catch_unwind
(
move
|
|
{
child_metric
.
test_get_value
(
"
store1
"
)
;
}
)
;
assert
!
(
result
.
is_err
(
)
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert_eq
!
(
expected
parent_metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
"
UUID
metrics
should
only
work
in
the
parent
process
"
)
;
}
}
