use
inherent
:
:
inherent
;
use
uuid
:
:
Uuid
;
use
super
:
:
{
CommonMetricData
MetricId
}
;
use
crate
:
:
ipc
:
:
need_ipc
;
pub
enum
UuidMetric
{
Parent
(
glean
:
:
private
:
:
UuidMetric
)
Child
(
UuidMetricIpc
)
}
#
[
derive
(
Debug
)
]
pub
struct
UuidMetricIpc
;
impl
UuidMetric
{
pub
fn
new
(
_id
:
MetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
UuidMetric
:
:
Child
(
UuidMetricIpc
)
}
else
{
UuidMetric
:
:
Parent
(
glean
:
:
private
:
:
UuidMetric
:
:
new
(
meta
)
)
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
UuidMetric
:
:
Parent
(
_
)
=
>
UuidMetric
:
:
Child
(
UuidMetricIpc
)
UuidMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
}
#
[
inherent
(
pub
)
]
impl
glean
:
:
traits
:
:
Uuid
for
UuidMetric
{
fn
set
(
&
self
value
:
Uuid
)
{
match
self
{
UuidMetric
:
:
Parent
(
p
)
=
>
{
glean
:
:
traits
:
:
Uuid
:
:
set
(
&
*
p
value
)
;
}
UuidMetric
:
:
Child
(
_c
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
the
uuid
metric
in
non
-
main
process
.
Ignoring
.
"
)
;
}
}
;
}
fn
generate_and_set
(
&
self
)
-
>
Uuid
{
match
self
{
UuidMetric
:
:
Parent
(
p
)
=
>
glean
:
:
traits
:
:
Uuid
:
:
generate_and_set
(
&
*
p
)
UuidMetric
:
:
Child
(
_c
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
the
uuid
metric
in
non
-
main
process
.
Ignoring
.
"
)
;
Uuid
:
:
nil
(
)
}
}
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
storage_name
:
S
)
-
>
Option
<
Uuid
>
{
match
self
{
UuidMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_value
(
storage_name
)
UuidMetric
:
:
Child
(
_c
)
=
>
panic
!
(
"
Cannot
get
test
value
for
in
non
-
parent
process
!
"
)
}
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
glean
:
:
ErrorType
ping_name
:
S
)
-
>
i32
{
match
self
{
UuidMetric
:
:
Parent
(
p
)
=
>
p
.
test_get_num_recorded_errors
(
error
ping_name
)
UuidMetric
:
:
Child
(
_c
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
UuidMetric
in
non
-
parent
process
!
"
)
}
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_uuid_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_uuid
;
let
expected
=
Uuid
:
:
new_v4
(
)
;
metric
.
set
(
expected
.
clone
(
)
)
;
assert_eq
!
(
expected
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
uuid_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_uuid
;
let
expected
=
Uuid
:
:
new_v4
(
)
;
parent_metric
.
set
(
expected
.
clone
(
)
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
child_metric
.
set
(
Uuid
:
:
new_v4
(
)
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert_eq
!
(
expected
parent_metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
"
UUID
metrics
should
only
work
in
the
parent
process
"
)
;
}
}
