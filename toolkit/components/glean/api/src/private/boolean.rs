use
inherent
:
:
inherent
;
use
std
:
:
sync
:
:
Arc
;
use
glean
:
:
traits
:
:
Boolean
;
use
super
:
:
{
BaseMetricId
ChildMetricMeta
CommonMetricData
MetricId
}
;
use
crate
:
:
ipc
:
:
{
need_ipc
with_ipc_payload
}
;
#
[
derive
(
Clone
)
]
pub
enum
BooleanMetric
{
Parent
{
id
:
MetricId
inner
:
Arc
<
glean
:
:
private
:
:
BooleanMetric
>
}
Child
(
ChildMetricMeta
)
UnorderedChild
(
ChildMetricMeta
)
}
impl
BooleanMetric
{
pub
fn
new
(
id
:
BaseMetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
BooleanMetric
:
:
Child
(
ChildMetricMeta
:
:
from_common_metric_data
(
id
meta
)
)
}
else
{
BooleanMetric
:
:
Parent
{
id
:
id
.
into
(
)
inner
:
Arc
:
:
new
(
glean
:
:
private
:
:
BooleanMetric
:
:
new
(
meta
)
)
}
}
}
pub
fn
with_unordered_ipc
(
id
:
BaseMetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
BooleanMetric
:
:
UnorderedChild
(
ChildMetricMeta
:
:
from_common_metric_data
(
id
meta
)
)
}
else
{
Self
:
:
new
(
id
meta
)
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
metric_id
(
&
self
)
-
>
MetricId
{
match
self
{
BooleanMetric
:
:
Parent
{
id
.
.
}
=
>
*
id
BooleanMetric
:
:
UnorderedChild
(
meta
)
=
>
(
meta
.
id
)
.
into
(
)
_
=
>
panic
!
(
"
Can
'
t
get
a
metric_id
from
a
non
-
ipc
-
supporting
child
boolean
metric
.
"
)
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
BooleanMetric
:
:
Parent
{
id
inner
}
=
>
{
BooleanMetric
:
:
Child
(
ChildMetricMeta
:
:
from_metric_identifier
(
id
.
base_metric_id
(
)
.
unwrap
(
)
inner
.
as_ref
(
)
)
)
}
_
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
}
#
[
inherent
]
impl
Boolean
for
BooleanMetric
{
pub
fn
set
(
&
self
value
:
bool
)
{
match
self
{
#
[
allow
(
unused
)
]
BooleanMetric
:
:
Parent
{
id
inner
}
=
>
{
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
gecko_profiler
:
:
add_marker
(
"
Boolean
:
:
set
"
super
:
:
profiler_utils
:
:
TelemetryProfilerCategory
Default
:
:
default
(
)
super
:
:
profiler_utils
:
:
BooleanMetricMarker
:
:
new
(
*
id
None
value
)
)
;
inner
.
set
(
value
)
;
}
BooleanMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
boolean
metric
in
non
-
main
process
.
This
operation
will
be
ignored
.
"
)
;
assert
!
(
!
crate
:
:
ipc
:
:
is_in_automation
(
)
"
Attempted
to
set
boolean
metric
in
non
-
main
process
which
is
forbidden
.
This
panics
in
automation
.
"
)
;
}
BooleanMetric
:
:
UnorderedChild
(
meta
)
=
>
{
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
gecko_profiler
:
:
add_marker
(
"
Boolean
:
:
set
"
super
:
:
profiler_utils
:
:
TelemetryProfilerCategory
Default
:
:
default
(
)
super
:
:
profiler_utils
:
:
BooleanMetricMarker
:
:
new
(
meta
.
id
.
into
(
)
None
value
)
)
;
with_ipc_payload
(
move
|
payload
|
{
if
let
Some
(
v
)
=
payload
.
booleans
.
get_mut
(
&
meta
.
id
)
{
*
v
=
value
;
}
else
{
payload
.
booleans
.
insert
(
meta
.
id
value
)
;
}
}
)
;
}
}
}
pub
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
bool
>
{
let
ping_name
=
ping_name
.
into
(
)
.
map
(
|
s
|
s
.
to_string
(
)
)
;
match
self
{
BooleanMetric
:
:
Parent
{
id
:
_
inner
}
=
>
inner
.
test_get_value
(
ping_name
)
_
=
>
{
panic
!
(
"
Cannot
get
test
value
for
boolean
metric
in
non
-
main
process
!
"
)
}
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
glean
:
:
ErrorType
)
-
>
i32
{
match
self
{
BooleanMetric
:
:
Parent
{
id
:
_
inner
}
=
>
inner
.
test_get_num_recorded_errors
(
error
)
_
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
boolean
metric
in
non
-
main
process
!
"
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_boolean_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_bool
;
metric
.
set
(
true
)
;
assert
!
(
metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
boolean_no_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_bool
;
parent_metric
.
set
(
false
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
child_metric
.
set
(
true
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert
!
(
false
=
=
parent_metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
"
Boolean
metrics
should
only
work
in
the
parent
process
"
)
;
}
#
[
test
]
fn
boolean_unordered_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
an_unordered_bool
;
parent_metric
.
set
(
false
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
child_metric
.
set
(
true
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert
!
(
!
parent_metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
"
Boolean
metrics
can
unsafely
work
in
child
processes
"
)
;
}
}
