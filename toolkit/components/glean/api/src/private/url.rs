use
inherent
:
:
inherent
;
use
super
:
:
{
BaseMetricId
CommonMetricData
}
;
use
crate
:
:
ipc
:
:
need_ipc
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
use
super
:
:
profiler_utils
:
:
{
stream_identifiers_by_id
truncate_string_for_marker
TelemetryProfilerCategory
}
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
#
[
derive
(
serde
:
:
Serialize
serde
:
:
Deserialize
Debug
)
]
struct
UrlMetricMarker
{
id
:
BaseMetricId
val
:
String
}
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
impl
gecko_profiler
:
:
ProfilerMarker
for
UrlMetricMarker
{
fn
marker_type_name
(
)
-
>
&
'
static
str
{
"
UrlMetric
"
}
fn
marker_type_display
(
)
-
>
gecko_profiler
:
:
MarkerSchema
{
use
gecko_profiler
:
:
schema
:
:
*
;
let
mut
schema
=
MarkerSchema
:
:
new
(
&
[
Location
:
:
MarkerChart
Location
:
:
MarkerTable
]
)
;
schema
.
set_tooltip_label
(
"
{
marker
.
data
.
cat
}
.
{
marker
.
data
.
id
}
{
marker
.
data
.
val
}
"
)
;
schema
.
set_table_label
(
"
{
marker
.
data
.
cat
}
.
{
marker
.
data
.
id
}
:
{
marker
.
data
.
val
}
"
)
;
schema
.
add_key_label_format_searchable
(
"
cat
"
"
Category
"
Format
:
:
UniqueString
Searchable
:
:
Searchable
)
;
schema
.
add_key_label_format_searchable
(
"
id
"
"
Metric
"
Format
:
:
UniqueString
Searchable
:
:
Searchable
)
;
schema
.
add_key_label_format_searchable
(
"
val
"
"
Value
"
Format
:
:
Url
Searchable
:
:
Searchable
)
;
schema
}
fn
stream_json_marker_data
(
&
self
json_writer
:
&
mut
gecko_profiler
:
:
JSONWriter
)
{
stream_identifiers_by_id
:
:
<
UrlMetric
>
(
&
self
.
id
.
into
(
)
json_writer
)
;
json_writer
.
string_property
(
"
val
"
self
.
val
.
as_str
(
)
)
;
}
}
#
[
derive
(
Clone
)
]
pub
enum
UrlMetric
{
Parent
{
id
:
BaseMetricId
inner
:
glean
:
:
private
:
:
UrlMetric
}
Child
(
UrlMetricIpc
)
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
UrlMetricIpc
;
define_metric_metadata_getter
!
(
UrlMetric
URL_MAP
)
;
define_metric_namer
!
(
UrlMetric
PARENT_ONLY
)
;
impl
UrlMetric
{
pub
fn
new
(
id
:
BaseMetricId
meta
:
CommonMetricData
)
-
>
Self
{
if
need_ipc
(
)
{
UrlMetric
:
:
Child
(
UrlMetricIpc
)
}
else
{
UrlMetric
:
:
Parent
{
id
inner
:
glean
:
:
private
:
:
UrlMetric
:
:
new
(
meta
)
}
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
UrlMetric
:
:
Parent
{
.
.
}
=
>
UrlMetric
:
:
Child
(
UrlMetricIpc
)
UrlMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
}
#
[
inherent
]
impl
glean
:
:
traits
:
:
Url
for
UrlMetric
{
pub
fn
set
<
S
:
Into
<
std
:
:
string
:
:
String
>
>
(
&
self
value
:
S
)
{
match
self
{
#
[
allow
(
unused
)
]
UrlMetric
:
:
Parent
{
id
inner
}
=
>
{
let
value
:
String
=
value
.
into
(
)
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
gecko_profiler
:
:
lazy_add_marker
!
(
"
Url
:
:
set
"
TelemetryProfilerCategory
UrlMetricMarker
{
id
:
*
id
val
:
truncate_string_for_marker
(
value
.
clone
(
)
)
}
)
;
inner
.
set
(
value
)
}
UrlMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
Url
metric
in
non
-
main
process
.
This
operation
will
be
ignored
.
"
)
;
assert
!
(
!
crate
:
:
ipc
:
:
is_in_automation
(
)
"
Attempted
to
set
URL
metric
in
non
-
main
process
which
is
forbidden
.
This
panics
in
automation
.
"
)
;
}
}
;
}
pub
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
std
:
:
string
:
:
String
>
{
let
ping_name
=
ping_name
.
into
(
)
.
map
(
|
s
|
s
.
to_string
(
)
)
;
match
self
{
UrlMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_value
(
ping_name
)
UrlMetric
:
:
Child
(
_
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
Url
metric
in
non
-
main
process
!
"
)
}
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
glean
:
:
ErrorType
)
-
>
i32
{
match
self
{
UrlMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_num_recorded_errors
(
error
)
UrlMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
Url
metric
in
non
-
main
process
!
"
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_url_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_url
;
metric
.
set
(
"
https
:
/
/
example
.
com
"
)
;
assert_eq
!
(
"
https
:
/
/
example
.
com
"
metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
url_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_url
;
parent_metric
.
set
(
"
https
:
/
/
example
.
com
/
parent
"
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
child_metric
.
set
(
"
https
:
/
/
example
.
com
/
child
"
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert
!
(
"
https
:
/
/
example
.
com
/
parent
"
=
=
parent_metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
"
Url
metrics
should
only
work
in
the
parent
process
"
)
;
}
}
