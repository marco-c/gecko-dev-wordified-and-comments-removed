use
std
:
:
sync
:
:
Arc
;
use
super
:
:
{
CommonMetricData
MetricId
}
;
use
super
:
:
TimeUnit
;
use
crate
:
:
dispatcher
;
use
crate
:
:
ipc
:
:
need_ipc
;
use
chrono
:
:
{
DateTime
FixedOffset
}
;
#
[
derive
(
Debug
)
]
pub
enum
DatetimeMetric
{
Parent
(
Arc
<
DatetimeMetricImpl
>
)
Child
(
DatetimeMetricIpc
)
}
#
[
derive
(
Debug
)
]
pub
struct
DatetimeMetricImpl
(
glean_core
:
:
metrics
:
:
DatetimeMetric
)
;
#
[
derive
(
Debug
)
]
pub
struct
DatetimeMetricIpc
;
impl
DatetimeMetric
{
pub
fn
new
(
_id
:
MetricId
meta
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
if
need_ipc
(
)
{
DatetimeMetric
:
:
Child
(
DatetimeMetricIpc
)
}
else
{
DatetimeMetric
:
:
Parent
(
Arc
:
:
new
(
DatetimeMetricImpl
:
:
new
(
meta
time_unit
)
)
)
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
DatetimeMetric
:
:
Parent
{
.
.
}
=
>
DatetimeMetric
:
:
Child
(
DatetimeMetricIpc
)
DatetimeMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
pub
fn
set
(
&
self
value
:
Option
<
DateTime
<
FixedOffset
>
>
)
{
match
self
{
DatetimeMetric
:
:
Parent
(
p
)
=
>
{
let
metric
=
Arc
:
:
clone
(
&
p
)
;
dispatcher
:
:
launch
(
move
|
|
metric
.
set
(
value
)
)
;
}
DatetimeMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
datetime
metric
{
:
?
}
in
non
-
parent
process
.
Ignoring
.
"
self
)
;
}
}
}
pub
(
crate
)
fn
set_with_details
(
&
self
year
:
i32
month
:
u32
day
:
u32
hour
:
u32
minute
:
u32
second
:
u32
nano
:
u32
offset_seconds
:
i32
)
{
match
self
{
DatetimeMetric
:
:
Parent
(
p
)
=
>
{
let
metric
=
Arc
:
:
clone
(
&
p
)
;
dispatcher
:
:
launch
(
move
|
|
{
metric
.
set_with_details
(
year
month
day
hour
minute
second
nano
offset_seconds
)
}
)
;
}
DatetimeMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
datetime
metric
{
:
?
}
in
non
-
parent
process
.
Ignoring
.
"
self
)
;
}
}
}
pub
fn
test_get_value
(
&
self
storage_name
:
&
str
)
-
>
Option
<
String
>
{
match
self
{
DatetimeMetric
:
:
Parent
(
p
)
=
>
{
dispatcher
:
:
block_on_queue
(
)
;
p
.
test_get_value
(
storage_name
)
}
DatetimeMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Cannot
get
test
value
for
{
:
?
}
in
non
-
parent
process
!
"
self
)
}
}
}
impl
DatetimeMetricImpl
{
pub
fn
new
(
meta
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
Self
(
glean_core
:
:
metrics
:
:
DatetimeMetric
:
:
new
(
meta
time_unit
)
)
}
pub
fn
set
(
&
self
value
:
Option
<
DateTime
<
FixedOffset
>
>
)
{
crate
:
:
with_glean
(
move
|
glean
|
self
.
0
.
set
(
glean
value
)
)
}
pub
(
crate
)
fn
set_with_details
(
&
self
year
:
i32
month
:
u32
day
:
u32
hour
:
u32
minute
:
u32
second
:
u32
nano
:
u32
offset_seconds
:
i32
)
{
crate
:
:
with_glean
(
move
|
glean
|
{
self
.
0
.
set_with_details
(
glean
year
month
day
hour
minute
second
nano
offset_seconds
)
;
}
)
}
pub
fn
test_get_value
(
&
self
storage_name
:
&
str
)
-
>
Option
<
String
>
{
crate
:
:
with_glean
(
move
|
glean
|
self
.
0
.
test_get_value_as_string
(
glean
storage_name
)
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
chrono
:
:
{
FixedOffset
TimeZone
}
;
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
#
[
ignore
]
fn
sets_datetime_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_date
;
let
a_datetime
=
FixedOffset
:
:
east
(
5
*
3600
)
.
ymd
(
2020
05
07
)
.
and_hms
(
11
58
00
)
;
metric
.
set
(
Some
(
a_datetime
)
)
;
assert_eq
!
(
"
2020
-
05
-
07T11
:
58
:
00
+
05
:
00
"
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
#
[
ignore
]
fn
sets_datetime_value_with_details
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_date
;
metric
.
set_with_details
(
2020
05
07
11
58
0
0
5
*
3600
)
;
assert_eq
!
(
"
2020
-
05
-
07T11
:
58
:
00
+
05
:
00
"
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
#
[
ignore
]
fn
datetime_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_date
;
let
a_datetime
=
FixedOffset
:
:
east
(
5
*
3600
)
.
ymd
(
2020
10
13
)
.
and_hms
(
16
41
00
)
;
parent_metric
.
set
(
Some
(
a_datetime
)
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
let
a_datetime
=
FixedOffset
:
:
east
(
0
)
.
ymd
(
2018
4
7
)
.
and_hms
(
12
01
00
)
;
child_metric
.
set
(
Some
(
a_datetime
)
)
;
let
result
=
std
:
:
panic
:
:
catch_unwind
(
move
|
|
{
child_metric
.
test_get_value
(
"
store1
"
)
;
}
)
;
assert
!
(
result
.
is_err
(
)
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
assert_eq
!
(
"
2020
-
10
-
13T16
:
41
:
00
+
05
:
00
"
parent_metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
)
;
}
}
