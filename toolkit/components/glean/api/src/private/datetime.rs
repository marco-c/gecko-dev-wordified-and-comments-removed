use
inherent
:
:
inherent
;
use
super
:
:
{
BaseMetricId
ChildMetricMeta
CommonMetricData
}
;
use
super
:
:
TimeUnit
;
use
crate
:
:
ipc
:
:
need_ipc
;
use
chrono
:
:
{
FixedOffset
TimeZone
}
;
use
glean
:
:
traits
:
:
Datetime
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
use
super
:
:
profiler_utils
:
:
{
glean_to_chrono_datetime
local_now_with_offset
TelemetryProfilerCategory
}
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
#
[
derive
(
serde
:
:
Serialize
serde
:
:
Deserialize
Debug
)
]
struct
DatetimeMetricMarker
{
id
:
BaseMetricId
time
:
chrono
:
:
DateTime
<
FixedOffset
>
}
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
impl
gecko_profiler
:
:
ProfilerMarker
for
DatetimeMetricMarker
{
fn
marker_type_name
(
)
-
>
&
'
static
str
{
"
DatetimeMetric
"
}
fn
marker_type_display
(
)
-
>
gecko_profiler
:
:
MarkerSchema
{
use
gecko_profiler
:
:
schema
:
:
*
;
let
mut
schema
=
MarkerSchema
:
:
new
(
&
[
Location
:
:
MarkerChart
Location
:
:
MarkerTable
]
)
;
schema
.
set_tooltip_label
(
"
{
marker
.
data
.
id
}
{
marker
.
data
.
time
}
"
)
;
schema
.
set_table_label
(
"
{
marker
.
name
}
-
{
marker
.
data
.
id
}
:
{
marker
.
data
.
time
}
"
)
;
schema
.
add_key_label_format_searchable
(
"
id
"
"
Metric
"
Format
:
:
UniqueString
Searchable
:
:
Searchable
)
;
schema
.
add_key_label_format
(
"
time
"
"
Time
"
Format
:
:
String
)
;
schema
}
fn
stream_json_marker_data
(
&
self
json_writer
:
&
mut
gecko_profiler
:
:
JSONWriter
)
{
let
name
=
self
.
id
.
get_name
(
)
;
json_writer
.
unique_string_property
(
"
id
"
&
name
)
;
let
naive
=
self
.
time
.
naive_utc
(
)
;
let
datestring
=
format
!
(
"
{
}
"
naive
.
format
(
"
%
Y
-
%
m
-
%
dT
%
H
:
%
M
:
%
S
%
.
3fZ
"
)
)
;
json_writer
.
string_property
(
"
time
"
datestring
.
as_str
(
)
)
;
}
}
#
[
derive
(
Clone
)
]
pub
enum
DatetimeMetric
{
Parent
{
id
:
BaseMetricId
inner
:
glean
:
:
private
:
:
DatetimeMetric
}
Child
(
ChildMetricMeta
)
}
impl
DatetimeMetric
{
pub
fn
new
(
id
:
BaseMetricId
meta
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
if
need_ipc
(
)
{
DatetimeMetric
:
:
Child
(
ChildMetricMeta
:
:
from_common_metric_data
(
id
meta
)
)
}
else
{
DatetimeMetric
:
:
Parent
{
id
inner
:
glean
:
:
private
:
:
DatetimeMetric
:
:
new
(
meta
time_unit
)
}
}
}
#
[
cfg
(
test
)
]
pub
(
crate
)
fn
child_metric
(
&
self
)
-
>
Self
{
match
self
{
DatetimeMetric
:
:
Parent
{
id
inner
}
=
>
{
DatetimeMetric
:
:
Child
(
ChildMetricMeta
:
:
from_metric_identifier
(
*
id
inner
)
)
}
DatetimeMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Can
'
t
get
a
child
metric
from
a
child
metric
"
)
}
}
#
[
cfg_attr
(
not
(
feature
=
"
with_gecko
"
)
allow
(
dead_code
)
)
]
#
[
allow
(
clippy
:
:
too_many_arguments
)
]
pub
(
crate
)
fn
set_with_details
(
&
self
year
:
i32
month
:
u32
day
:
u32
hour
:
u32
minute
:
u32
second
:
u32
nano
:
u32
offset_seconds
:
i32
)
{
match
self
{
#
[
allow
(
unused
)
]
DatetimeMetric
:
:
Parent
{
id
inner
}
=
>
{
let
tz
=
FixedOffset
:
:
east_opt
(
offset_seconds
)
;
if
tz
.
is_none
(
)
{
log
:
:
error
!
(
"
Unable
to
set
datetime
metric
with
invalid
offset
seconds
{
}
"
offset_seconds
)
;
return
;
}
let
value
=
FixedOffset
:
:
east
(
offset_seconds
)
.
ymd_opt
(
year
month
day
)
.
and_hms_nano_opt
(
hour
minute
second
nano
)
;
match
value
.
single
(
)
{
Some
(
d
)
=
>
{
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
if
gecko_profiler
:
:
can_accept_markers
(
)
{
gecko_profiler
:
:
add_marker
(
"
Datetime
:
:
set
"
TelemetryProfilerCategory
Default
:
:
default
(
)
DatetimeMetricMarker
{
id
:
*
id
time
:
d
}
)
;
}
inner
.
set
(
Some
(
d
.
into
(
)
)
)
;
}
_
=
>
{
log
:
:
error
!
(
"
Unable
to
construct
datetime
"
)
;
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
if
gecko_profiler
:
:
can_accept_markers
(
)
{
let
name
=
id
.
get_name
(
)
;
let
payload
=
format
!
(
"
Conversion
failed
for
metric
{
}
:
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
"
&
name
year
month
day
hour
minute
second
nano
offset_seconds
)
;
gecko_profiler
:
:
add_text_marker
(
"
Datetime
:
:
set
"
TelemetryProfilerCategory
Default
:
:
default
(
)
payload
.
as_str
(
)
)
;
}
}
}
}
DatetimeMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
datetime
metric
in
non
-
main
process
.
This
operation
will
be
ignored
.
"
)
;
assert
!
(
!
crate
:
:
ipc
:
:
is_in_automation
(
)
"
Attempted
to
set
datetime
in
non
-
main
process
which
is
forbidden
.
This
panics
in
automation
.
"
)
;
}
}
}
}
#
[
inherent
]
impl
Datetime
for
DatetimeMetric
{
pub
fn
set
(
&
self
value
:
Option
<
glean
:
:
Datetime
>
)
{
match
self
{
#
[
allow
(
unused
)
]
DatetimeMetric
:
:
Parent
{
id
inner
}
=
>
{
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
if
gecko_profiler
:
:
can_accept_markers
(
)
{
match
value
{
Some
(
ref
d
)
=
>
{
glean_to_chrono_datetime
(
d
)
.
and_then
(
|
c
|
c
.
single
(
)
)
.
map
(
|
c
|
{
gecko_profiler
:
:
add_marker
(
"
Datetime
:
:
set
"
TelemetryProfilerCategory
Default
:
:
default
(
)
DatetimeMetricMarker
{
id
:
*
id
time
:
c
}
)
;
}
)
;
}
None
=
>
{
gecko_profiler
:
:
add_marker
(
"
Datetime
:
:
set
"
TelemetryProfilerCategory
Default
:
:
default
(
)
DatetimeMetricMarker
{
id
:
*
id
time
:
local_now_with_offset
(
)
}
)
;
}
}
;
}
inner
.
set
(
value
)
;
}
DatetimeMetric
:
:
Child
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
set
datetime
metric
DatetimeMetric
in
non
-
main
process
.
This
operation
will
be
ignored
.
"
)
;
assert
!
(
!
crate
:
:
ipc
:
:
is_in_automation
(
)
"
Attempted
to
set
datetime
metric
in
non
-
main
process
which
is
forbidden
.
This
panics
in
automation
.
"
)
;
}
}
}
pub
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
glean
:
:
Datetime
>
{
let
ping_name
=
ping_name
.
into
(
)
.
map
(
|
s
|
s
.
to_string
(
)
)
;
match
self
{
DatetimeMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_value
(
ping_name
)
DatetimeMetric
:
:
Child
(
_
)
=
>
{
panic
!
(
"
Cannot
get
test
value
for
DatetimeMetric
in
non
-
main
process
!
"
)
}
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
glean
:
:
ErrorType
)
-
>
i32
{
match
self
{
DatetimeMetric
:
:
Parent
{
inner
.
.
}
=
>
inner
.
test_get_num_recorded_errors
(
error
)
DatetimeMetric
:
:
Child
(
_
)
=
>
panic
!
(
"
Cannot
get
the
number
of
recorded
errors
for
DatetimeMetric
in
non
-
main
process
!
"
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
chrono
:
:
{
DateTime
FixedOffset
TimeZone
}
;
use
crate
:
:
{
common_test
:
:
*
ipc
metrics
}
;
#
[
test
]
fn
sets_datetime_value
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_date
;
let
a_datetime
=
FixedOffset
:
:
east
(
5
*
3600
)
.
ymd
(
2020
05
07
)
.
and_hms
(
11
58
00
)
;
metric
.
set
(
Some
(
a_datetime
.
into
(
)
)
)
;
let
expected
:
glean
:
:
Datetime
=
DateTime
:
:
parse_from_rfc3339
(
"
2020
-
05
-
07T11
:
58
:
00
+
05
:
00
"
)
.
unwrap
(
)
.
into
(
)
;
assert_eq
!
(
expected
metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
sets_datetime_value_with_details
(
)
{
let
_lock
=
lock_test
(
)
;
let
metric
=
&
metrics
:
:
test_only_ipc
:
:
a_date
;
metric
.
set_with_details
(
2020
05
07
11
58
0
0
5
*
3600
)
;
let
expected
:
glean
:
:
Datetime
=
DateTime
:
:
parse_from_rfc3339
(
"
2020
-
05
-
07T11
:
58
:
00
+
05
:
00
"
)
.
unwrap
(
)
.
into
(
)
;
assert_eq
!
(
expected
metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
datetime_ipc
(
)
{
let
_lock
=
lock_test
(
)
;
let
parent_metric
=
&
metrics
:
:
test_only_ipc
:
:
a_date
;
let
a_datetime
=
FixedOffset
:
:
east
(
5
*
3600
)
.
ymd
(
2020
10
13
)
.
and_hms
(
16
41
00
)
;
parent_metric
.
set
(
Some
(
a_datetime
.
into
(
)
)
)
;
{
let
child_metric
=
parent_metric
.
child_metric
(
)
;
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
let
a_datetime
=
FixedOffset
:
:
east
(
0
)
.
ymd
(
2018
4
7
)
.
and_hms
(
12
01
00
)
;
child_metric
.
set
(
Some
(
a_datetime
.
into
(
)
)
)
;
}
assert
!
(
ipc
:
:
replay_from_buf
(
&
ipc
:
:
take_buf
(
)
.
unwrap
(
)
)
.
is_ok
(
)
)
;
let
expected
:
glean
:
:
Datetime
=
DateTime
:
:
parse_from_rfc3339
(
"
2020
-
10
-
13T16
:
41
:
00
+
05
:
00
"
)
.
unwrap
(
)
.
into
(
)
;
assert_eq
!
(
expected
parent_metric
.
test_get_value
(
"
test
-
ping
"
)
.
unwrap
(
)
)
;
}
}
