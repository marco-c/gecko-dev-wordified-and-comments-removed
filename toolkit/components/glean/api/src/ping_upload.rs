use
glean_core
:
:
upload
:
:
PingUploadTask
:
:
*
;
pub
use
glean_core
:
:
upload
:
:
{
PingRequest
UploadResult
}
;
use
once_cell
:
:
sync
:
:
OnceCell
;
use
std
:
:
sync
:
:
Mutex
;
use
std
:
:
thread
;
pub
type
UploadFn
=
dyn
(
FnMut
(
&
PingRequest
)
-
>
UploadResult
)
+
Send
;
static
UPLOADER
:
OnceCell
<
Mutex
<
Box
<
UploadFn
>
>
>
=
OnceCell
:
:
new
(
)
;
pub
fn
register_uploader
(
uploader
:
Box
<
UploadFn
>
)
-
>
Result
<
(
)
(
)
>
{
UPLOADER
.
set
(
Mutex
:
:
new
(
uploader
)
)
.
map_err
(
|
_
|
(
)
)
}
pub
fn
check_for_uploads
(
)
{
if
UPLOADER
.
get
(
)
.
is_none
(
)
{
return
;
}
thread
:
:
spawn
(
move
|
|
{
loop
{
if
let
Some
(
mutex
)
=
UPLOADER
.
get
(
)
{
let
uploader
=
&
mut
*
mutex
.
lock
(
)
.
unwrap
(
)
;
if
let
Upload
(
request
)
=
crate
:
:
with_glean
(
|
glean
|
glean
.
get_upload_task
(
false
)
)
{
let
response
=
(
*
uploader
)
(
&
request
)
;
crate
:
:
with_glean
(
|
glean
|
{
glean
.
process_ping_upload_response
(
&
request
.
document_id
response
)
}
)
;
}
else
{
break
;
}
}
else
{
break
;
}
}
}
)
;
}
