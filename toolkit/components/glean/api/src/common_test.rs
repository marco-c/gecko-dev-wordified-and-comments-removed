use
std
:
:
sync
:
:
{
Mutex
MutexGuard
}
;
use
crate
:
:
private
:
:
Ping
;
use
once_cell
:
:
sync
:
:
Lazy
;
const
GLOBAL_APPLICATION_ID
:
&
str
=
"
org
.
mozilla
.
firefox
.
test
"
;
pub
fn
lock_test
(
)
-
>
(
MutexGuard
<
'
static
(
)
>
tempfile
:
:
TempDir
)
{
static
GLOBAL_LOCK
:
Lazy
<
Mutex
<
(
)
>
>
=
Lazy
:
:
new
(
|
|
Mutex
:
:
new
(
(
)
)
)
;
let
lock
=
GLOBAL_LOCK
.
lock
(
)
.
unwrap
(
)
;
_
=
Ping
:
:
new
(
"
test
-
ping
"
true
false
true
true
true
vec
!
[
]
vec
!
[
]
true
vec
!
[
]
)
;
let
dir
=
setup_glean
(
None
)
;
(
lock
dir
)
}
fn
setup_glean
(
tempdir
:
Option
<
tempfile
:
:
TempDir
>
)
-
>
tempfile
:
:
TempDir
{
let
dir
=
match
tempdir
{
Some
(
tempdir
)
=
>
tempdir
None
=
>
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
}
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
glean
:
:
ConfigurationBuilder
:
:
new
(
true
tmpname
GLOBAL_APPLICATION_ID
)
.
build
(
)
;
let
client_info
=
glean
:
:
ClientInfoMetrics
{
app_build
:
"
test
-
build
"
.
into
(
)
app_display_version
:
"
1
.
2
.
3
"
.
into
(
)
channel
:
None
locale
:
None
}
;
glean
:
:
test_reset_glean
(
cfg
client_info
true
)
;
dir
}
