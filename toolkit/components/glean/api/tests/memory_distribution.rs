mod
common
;
use
common
:
:
*
;
use
fog
:
:
ipc
;
use
fog
:
:
private
:
:
{
CommonMetricData
Lifetime
MemoryDistributionMetric
MemoryUnit
}
;
#
[
test
]
fn
smoke_test_memory_distribution
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
setup_glean
(
None
)
;
let
store_names
:
Vec
<
String
>
=
vec
!
[
"
store1
"
.
into
(
)
]
;
let
metric
=
MemoryDistributionMetric
:
:
new
(
CommonMetricData
{
name
:
"
memory_distribution_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
store_names
.
clone
(
)
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
MemoryUnit
:
:
Kilobyte
)
;
metric
.
accumulate
(
42
)
;
let
metric_data
=
metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
;
assert_eq
!
(
1
metric_data
.
values
[
&
42494
]
)
;
assert_eq
!
(
0
metric_data
.
values
[
&
44376
]
)
;
assert_eq
!
(
43008
metric_data
.
sum
)
;
}
#
[
test
]
fn
memory_distribution_child
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
setup_glean
(
None
)
;
let
store_names
:
Vec
<
String
>
=
vec
!
[
"
store1
"
.
into
(
)
]
;
let
meta
=
CommonMetricData
{
name
:
"
memory_distribution_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
store_names
.
clone
(
)
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
;
let
parent_metric
=
MemoryDistributionMetric
:
:
new
(
meta
.
clone
(
)
MemoryUnit
:
:
Kilobyte
)
;
parent_metric
.
accumulate
(
42
)
;
{
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
let
child_metric
=
MemoryDistributionMetric
:
:
new
(
meta
.
clone
(
)
MemoryUnit
:
:
Kilobyte
)
;
child_metric
.
accumulate
(
13
*
9
)
;
}
let
metric_data
=
parent_metric
.
test_get_value
(
"
store1
"
)
.
unwrap
(
)
;
assert_eq
!
(
1
metric_data
.
values
[
&
42494
]
)
;
assert_eq
!
(
0
metric_data
.
values
[
&
44376
]
)
;
assert_eq
!
(
43008
metric_data
.
sum
)
;
let
buf
=
ipc
:
:
take_buf
(
)
.
unwrap
(
)
;
assert
!
(
buf
.
len
(
)
>
0
)
;
assert
!
(
ipc
:
:
replay_from_buf
(
&
buf
)
.
is_ok
(
)
)
;
}
