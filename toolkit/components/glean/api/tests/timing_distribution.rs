mod
common
;
use
common
:
:
*
;
use
fog
:
:
ipc
;
use
fog
:
:
private
:
:
{
CommonMetricData
Lifetime
TimeUnit
TimingDistributionMetric
}
;
#
[
test
]
fn
smoke_test_timing_distribution
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
setup_glean
(
None
)
;
let
store_names
:
Vec
<
String
>
=
vec
!
[
"
store1
"
.
into
(
)
]
;
let
metric
=
TimingDistributionMetric
:
:
new
(
CommonMetricData
{
name
:
"
timing_distribution_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
store_names
.
clone
(
)
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
TimeUnit
:
:
Nanosecond
)
;
let
id
=
metric
.
start
(
)
;
metric
.
cancel
(
id
)
;
assert_eq
!
(
None
metric
.
test_get_value
(
"
store1
"
)
)
;
}
#
[
test
]
fn
timing_distribution_child
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
setup_glean
(
None
)
;
let
store_names
:
Vec
<
String
>
=
vec
!
[
"
store1
"
.
into
(
)
]
;
let
meta
=
CommonMetricData
{
name
:
"
timing_distribution_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
store_names
.
clone
(
)
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
;
let
parent_metric
=
TimingDistributionMetric
:
:
new
(
meta
.
clone
(
)
TimeUnit
:
:
Nanosecond
)
;
let
id
=
parent_metric
.
start
(
)
;
std
:
:
thread
:
:
sleep
(
std
:
:
time
:
:
Duration
:
:
from_millis
(
10
)
)
;
parent_metric
.
stop_and_accumulate
(
id
)
;
{
let
_raii
=
ipc
:
:
test_set_need_ipc
(
true
)
;
let
child_metric
=
TimingDistributionMetric
:
:
new
(
meta
.
clone
(
)
TimeUnit
:
:
Nanosecond
)
;
let
id
=
child_metric
.
start
(
)
;
let
id2
=
child_metric
.
start
(
)
;
assert_ne
!
(
id
id2
)
;
std
:
:
thread
:
:
sleep
(
std
:
:
time
:
:
Duration
:
:
from_millis
(
10
)
)
;
child_metric
.
stop_and_accumulate
(
id
)
;
child_metric
.
cancel
(
id2
)
;
}
let
buf
=
ipc
:
:
take_buf
(
)
.
unwrap
(
)
;
assert
!
(
buf
.
len
(
)
>
0
)
;
assert
!
(
ipc
:
:
replay_from_buf
(
&
buf
)
.
is_ok
(
)
)
;
}
