use
std
:
:
ffi
:
:
CStr
;
use
std
:
:
os
:
:
raw
:
:
c_char
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicBool
Ordering
}
;
use
nserror
:
:
{
nsresult
NS_ERROR_FAILURE
NS_OK
}
;
use
nsstring
:
:
{
nsACString
nsCStr
}
;
use
xpcom
:
:
{
interfaces
:
:
{
nsIPrefBranch
nsISupports
}
RefPtr
XpCom
}
;
static
RECORDING_ENABLED
:
AtomicBool
=
AtomicBool
:
:
new
(
false
)
;
#
[
derive
(
xpcom
)
]
#
[
xpimplements
(
nsIObserver
)
]
#
[
refcnt
=
"
atomic
"
]
pub
(
crate
)
struct
InitUploadPrefObserver
{
}
#
[
allow
(
non_snake_case
)
]
impl
UploadPrefObserver
{
pub
(
crate
)
fn
begin_observing
(
)
-
>
Result
<
(
)
nsresult
>
{
let
recording_enabled
=
static_prefs
:
:
pref
!
(
"
telemetry
.
fog
.
test
.
localhost_port
"
)
<
0
;
RECORDING_ENABLED
.
store
(
recording_enabled
Ordering
:
:
SeqCst
)
;
unsafe
{
let
pref_obs
=
Self
:
:
allocate
(
InitUploadPrefObserver
{
}
)
;
let
pref_service
=
xpcom
:
:
services
:
:
get_PrefService
(
)
.
ok_or
(
NS_ERROR_FAILURE
)
?
;
let
pref_branch
:
RefPtr
<
nsIPrefBranch
>
=
(
*
pref_service
)
.
query_interface
(
)
.
ok_or
(
NS_ERROR_FAILURE
)
?
;
let
pref_nscstr
=
&
nsCStr
:
:
from
(
"
datareporting
.
healthreport
.
uploadEnabled
"
)
as
&
nsACString
;
(
*
pref_branch
)
.
AddObserverImpl
(
pref_nscstr
pref_obs
.
coerce
(
)
false
)
.
to_result
(
)
?
;
let
pref_nscstr
=
&
nsCStr
:
:
from
(
"
telemetry
.
fog
.
test
.
localhost_port
"
)
as
&
nsACString
;
(
*
pref_branch
)
.
AddObserverImpl
(
pref_nscstr
pref_obs
.
coerce
(
)
false
)
.
to_result
(
)
?
;
}
Ok
(
(
)
)
}
unsafe
fn
Observe
(
&
self
_subject
:
*
const
nsISupports
topic
:
*
const
c_char
pref_name
:
*
const
u16
)
-
>
nserror
:
:
nsresult
{
let
topic
=
CStr
:
:
from_ptr
(
topic
)
.
to_str
(
)
.
unwrap
(
)
;
let
len
=
(
0
.
.
)
.
take_while
(
|
&
i
|
*
pref_name
.
offset
(
i
)
!
=
0
)
.
count
(
)
;
let
slice
=
std
:
:
slice
:
:
from_raw_parts
(
pref_name
len
)
;
let
pref_name
=
match
String
:
:
from_utf16
(
slice
)
{
Ok
(
name
)
=
>
name
Err
(
_
)
=
>
return
NS_ERROR_FAILURE
}
;
log
:
:
info
!
(
"
Observed
{
:
?
}
{
:
?
}
"
topic
pref_name
)
;
debug_assert
!
(
topic
=
=
"
nsPref
:
changed
"
)
;
debug_assert
!
(
pref_name
=
=
"
datareporting
.
healthreport
.
uploadEnabled
"
|
|
pref_name
=
=
"
telemetry
.
fog
.
test
.
localhost_port
"
)
;
let
upload_enabled
=
static_prefs
:
:
pref
!
(
"
datareporting
.
healthreport
.
uploadEnabled
"
)
;
let
recording_enabled
=
static_prefs
:
:
pref
!
(
"
telemetry
.
fog
.
test
.
localhost_port
"
)
<
0
;
log
:
:
info
!
(
"
New
upload_enabled
{
}
recording_enabled
{
}
"
upload_enabled
recording_enabled
)
;
if
RECORDING_ENABLED
.
load
(
Ordering
:
:
SeqCst
)
&
&
!
recording_enabled
{
glean
:
:
set_upload_enabled
(
false
)
;
}
RECORDING_ENABLED
.
store
(
recording_enabled
Ordering
:
:
SeqCst
)
;
glean
:
:
set_upload_enabled
(
upload_enabled
|
|
recording_enabled
)
;
NS_OK
}
}
