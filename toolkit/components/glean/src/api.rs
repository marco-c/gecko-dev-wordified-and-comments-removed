#
!
[
allow
(
dead_code
)
]
use
fog
:
:
dispatcher
;
use
fog
:
:
ping_upload
:
:
{
self
UploadResult
}
;
use
glean_core
:
:
{
global_glean
setup_glean
Configuration
Glean
Result
}
;
use
once_cell
:
:
sync
:
:
OnceCell
;
use
url
:
:
Url
;
use
viaduct
:
:
Request
;
use
crate
:
:
client_info
:
:
ClientInfo
;
use
crate
:
:
core_metrics
:
:
InternalMetrics
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
AppState
{
client_info
:
ClientInfo
}
static
STATE
:
OnceCell
<
AppState
>
=
OnceCell
:
:
new
(
)
;
fn
global_state
(
)
-
>
&
'
static
AppState
{
STATE
.
get
(
)
.
unwrap
(
)
}
fn
with_glean_mut
<
F
R
>
(
f
:
F
)
-
>
Option
<
R
>
where
F
:
Fn
(
&
mut
Glean
)
-
>
R
{
let
mut
glean
=
global_glean
(
)
?
.
lock
(
)
.
unwrap
(
)
;
Some
(
f
(
&
mut
glean
)
)
}
fn
register_uploader
(
)
{
let
result
=
ping_upload
:
:
register_uploader
(
Box
:
:
new
(
|
ping_request
|
{
log
:
:
trace
!
(
"
FOG
Ping
Uploader
uploading
ping
{
}
"
ping_request
.
document_id
)
;
let
result
:
std
:
:
result
:
:
Result
<
UploadResult
viaduct
:
:
Error
>
=
(
move
|
|
{
const
SERVER
:
&
str
=
"
https
:
/
/
incoming
.
telemetry
.
mozilla
.
org
"
;
let
mut
server
=
String
:
:
from
(
SERVER
)
;
let
localhost_port
=
static_prefs
:
:
pref
!
(
"
telemetry
.
fog
.
test
.
localhost_port
"
)
;
if
localhost_port
>
0
{
server
=
format
!
(
"
http
:
/
/
localhost
:
{
}
"
localhost_port
)
;
}
else
if
localhost_port
<
0
{
log
:
:
info
!
(
"
FOG
Ping
uploader
faking
success
"
)
;
return
Ok
(
UploadResult
:
:
HttpStatus
(
200
)
)
;
}
let
url
=
Url
:
:
parse
(
&
server
)
?
.
join
(
&
ping_request
.
path
)
?
;
log
:
:
info
!
(
"
FOG
Ping
uploader
uploading
to
{
:
?
}
"
url
)
;
let
mut
req
=
Request
:
:
post
(
url
)
.
body
(
ping_request
.
body
.
clone
(
)
)
;
for
(
header_key
header_value
)
in
&
ping_request
.
headers
{
req
=
req
.
header
(
header_key
.
to_owned
(
)
header_value
)
?
;
}
log
:
:
trace
!
(
"
FOG
Ping
Uploader
sending
ping
{
}
"
ping_request
.
document_id
)
;
let
res
=
req
.
send
(
)
?
;
Ok
(
UploadResult
:
:
HttpStatus
(
res
.
status
.
into
(
)
)
)
}
)
(
)
;
log
:
:
trace
!
(
"
FOG
Ping
Uploader
completed
uploading
ping
{
}
(
Result
{
:
?
}
)
"
ping_request
.
document_id
result
)
;
match
result
{
Ok
(
result
)
=
>
result
_
=
>
UploadResult
:
:
UnrecoverableFailure
}
}
)
)
;
if
result
.
is_err
(
)
{
log
:
:
warn
!
(
"
Couldn
'
t
register
uploader
because
one
'
s
already
in
there
.
{
:
?
}
"
result
)
;
}
}
pub
fn
set_debug_view_tag
(
value
:
&
str
)
-
>
bool
{
with_glean_mut
(
|
glean
|
glean
.
set_debug_view_tag
(
value
)
)
.
unwrap_or
(
false
)
}
pub
fn
submit_ping
(
ping_name
:
&
str
)
-
>
Result
<
bool
>
{
match
with_glean_mut
(
|
glean
|
glean
.
submit_ping_by_name
(
ping_name
None
)
)
{
Some
(
Ok
(
true
)
)
=
>
{
ping_upload
:
:
check_for_uploads
(
)
;
Ok
(
true
)
}
Some
(
result
)
=
>
result
None
=
>
Ok
(
false
)
}
}
pub
fn
set_log_pings
(
value
:
bool
)
-
>
bool
{
with_glean_mut
(
|
glean
|
glean
.
set_log_pings
(
value
)
)
.
unwrap_or
(
false
)
}
