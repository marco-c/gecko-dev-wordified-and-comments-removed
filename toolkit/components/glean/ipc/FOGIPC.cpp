#
include
"
FOGIPC
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
mozilla
:
:
dom
:
:
ContentParent
;
using
FlushFOGDataPromise
=
mozilla
:
:
dom
:
:
ContentParent
:
:
FlushFOGDataPromise
;
namespace
mozilla
{
namespace
glean
{
void
FlushFOGData
(
std
:
:
function
<
void
(
ipc
:
:
ByteBuf
&
&
)
>
&
&
aResolver
)
{
}
void
FlushAllChildData
(
std
:
:
function
<
void
(
const
nsTArray
<
ipc
:
:
ByteBuf
>
&
&
)
>
&
&
aResolver
)
{
nsTArray
<
ContentParent
*
>
parents
;
ContentParent
:
:
GetAll
(
parents
)
;
if
(
parents
.
Length
(
)
=
=
0
)
{
nsTArray
<
ipc
:
:
ByteBuf
>
results
;
aResolver
(
std
:
:
move
(
results
)
)
;
return
;
}
nsTArray
<
RefPtr
<
FlushFOGDataPromise
>
>
promises
;
for
(
auto
parent
:
parents
)
{
promises
.
EmplaceBack
(
parent
-
>
SendFlushFOGData
(
)
)
;
}
FlushFOGDataPromise
:
:
All
(
GetCurrentThreadSerialEventTarget
(
)
promises
)
-
>
Then
(
GetCurrentThreadSerialEventTarget
(
)
__func__
[
&
aResolver
]
(
FlushFOGDataPromise
:
:
AllPromiseType
:
:
ResolveOrRejectValue
&
&
aValue
)
{
if
(
aValue
.
IsResolve
(
)
)
{
aResolver
(
std
:
:
move
(
aValue
.
ResolveValue
(
)
)
)
;
}
else
{
nsTArray
<
ipc
:
:
ByteBuf
>
results
;
aResolver
(
std
:
:
move
(
results
)
)
;
}
}
)
;
}
void
FOGData
(
ipc
:
:
ByteBuf
&
&
buf
)
{
}
void
SendFOGData
(
ipc
:
:
ByteBuf
&
&
buf
)
{
switch
(
XRE_GetProcessType
(
)
)
{
case
GeckoProcessType_Content
:
mozilla
:
:
dom
:
:
ContentChild
:
:
GetSingleton
(
)
-
>
SendFOGData
(
std
:
:
move
(
buf
)
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unsuppored
process
type
"
)
;
}
}
}
}
