#
include
"
FOGIPC
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
mozilla
:
:
dom
:
:
ContentParent
;
using
mozilla
:
:
ipc
:
:
ByteBuf
;
using
FlushFOGDataPromise
=
mozilla
:
:
dom
:
:
ContentParent
:
:
FlushFOGDataPromise
;
namespace
mozilla
{
namespace
glean
{
void
FlushFOGData
(
std
:
:
function
<
void
(
ipc
:
:
ByteBuf
&
&
)
>
&
&
aResolver
)
{
#
ifndef
MOZ_GLEAN_ANDROID
ByteBuf
buf
;
uint32_t
ipcBufferSize
=
impl
:
:
fog_serialize_ipc_buf
(
)
;
bool
ok
=
buf
.
Allocate
(
ipcBufferSize
)
;
if
(
!
ok
)
{
return
;
}
uint32_t
writtenLen
=
impl
:
:
fog_give_ipc_buf
(
buf
.
mData
buf
.
mLen
)
;
if
(
writtenLen
!
=
ipcBufferSize
)
{
return
;
}
aResolver
(
std
:
:
move
(
buf
)
)
;
#
endif
}
void
FlushAllChildData
(
std
:
:
function
<
void
(
nsTArray
<
ipc
:
:
ByteBuf
>
&
&
)
>
&
&
aResolver
)
{
#
ifndef
MOZ_GLEAN_ANDROID
nsTArray
<
ContentParent
*
>
parents
;
ContentParent
:
:
GetAll
(
parents
)
;
if
(
parents
.
Length
(
)
=
=
0
)
{
nsTArray
<
ipc
:
:
ByteBuf
>
results
;
aResolver
(
std
:
:
move
(
results
)
)
;
return
;
}
auto
timerId
=
fog_ipc
:
:
flush_durations
.
Start
(
)
;
nsTArray
<
RefPtr
<
FlushFOGDataPromise
>
>
promises
;
for
(
auto
*
parent
:
parents
)
{
promises
.
EmplaceBack
(
parent
-
>
SendFlushFOGData
(
)
)
;
}
FlushFOGDataPromise
:
:
All
(
GetCurrentSerialEventTarget
(
)
promises
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
=
std
:
:
move
(
aResolver
)
timerId
]
(
FlushFOGDataPromise
:
:
AllPromiseType
:
:
ResolveOrRejectValue
&
&
aValue
)
{
fog_ipc
:
:
flush_durations
.
StopAndAccumulate
(
std
:
:
move
(
timerId
)
)
;
if
(
aValue
.
IsResolve
(
)
)
{
aResolver
(
std
:
:
move
(
aValue
.
ResolveValue
(
)
)
)
;
}
else
{
nsTArray
<
ipc
:
:
ByteBuf
>
results
;
aResolver
(
std
:
:
move
(
results
)
)
;
}
}
)
;
#
endif
}
void
FOGData
(
ipc
:
:
ByteBuf
&
&
buf
)
{
#
ifndef
MOZ_GLEAN_ANDROID
fog_ipc
:
:
buffer_sizes
.
Accumulate
(
buf
.
mLen
)
;
impl
:
:
fog_use_ipc_buf
(
buf
.
mData
buf
.
mLen
)
;
#
endif
}
void
SendFOGData
(
ipc
:
:
ByteBuf
&
&
buf
)
{
#
ifndef
MOZ_GLEAN_ANDROID
switch
(
XRE_GetProcessType
(
)
)
{
case
GeckoProcessType_Content
:
mozilla
:
:
dom
:
:
ContentChild
:
:
GetSingleton
(
)
-
>
SendFOGData
(
std
:
:
move
(
buf
)
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unsuppored
process
type
"
)
;
}
#
endif
}
RefPtr
<
GenericPromise
>
FlushAndUseFOGData
(
)
{
RefPtr
<
GenericPromise
:
:
Private
>
ret
=
new
GenericPromise
:
:
Private
(
__func__
)
;
std
:
:
function
<
void
(
nsTArray
<
ByteBuf
>
&
&
)
>
resolver
=
[
ret
]
(
nsTArray
<
ByteBuf
>
&
&
bufs
)
{
for
(
ByteBuf
&
buf
:
bufs
)
{
FOGData
(
std
:
:
move
(
buf
)
)
;
}
ret
-
>
Resolve
(
true
__func__
)
;
}
;
FlushAllChildData
(
std
:
:
move
(
resolver
)
)
;
return
ret
;
}
}
}
