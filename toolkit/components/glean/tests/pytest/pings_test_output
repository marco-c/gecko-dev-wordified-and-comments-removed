use
crate
:
:
private
:
:
Ping
;
use
once_cell
:
:
sync
:
:
Lazy
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
not_baseline
:
Lazy
<
Ping
>
=
Lazy
:
:
new
(
|
|
{
Ping
:
:
new
(
"
not
-
baseline
"
true
false
true
true
vec
!
[
"
background
"
.
into
(
)
"
dirty_startup
"
.
into
(
)
"
foreground
"
.
into
(
)
]
)
}
)
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
not_deletion_request
:
Lazy
<
Ping
>
=
Lazy
:
:
new
(
|
|
{
Ping
:
:
new
(
"
not
-
deletion
-
request
"
true
true
true
true
vec
!
[
]
)
}
)
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
not_events
:
Lazy
<
Ping
>
=
Lazy
:
:
new
(
|
|
{
Ping
:
:
new
(
"
not
-
events
"
true
false
true
true
vec
!
[
"
background
"
.
into
(
)
"
max_capacity
"
.
into
(
)
"
startup
"
.
into
(
)
]
)
}
)
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
not_metrics
:
Lazy
<
Ping
>
=
Lazy
:
:
new
(
|
|
{
Ping
:
:
new
(
"
not
-
metrics
"
true
false
true
true
vec
!
[
"
overdue
"
.
into
(
)
"
reschedule
"
.
into
(
)
"
today
"
.
into
(
)
"
tomorrow
"
.
into
(
)
"
upgrade
"
.
into
(
)
]
)
}
)
;
#
[
doc
(
hidden
)
]
pub
fn
register_pings
(
application_id
:
Option
<
&
str
>
)
{
match
application_id
{
_
=
>
{
let
_
=
&
*
not_baseline
;
let
_
=
&
*
not_deletion_request
;
let
_
=
&
*
not_events
;
let
_
=
&
*
not_metrics
;
}
}
}
#
[
cfg
(
feature
=
"
with_gecko
"
)
]
pub
(
crate
)
fn
submit_ping_by_id
(
id
:
u32
reason
:
Option
<
&
str
>
)
{
if
id
&
(
1
<
<
crate
:
:
factory
:
:
DYNAMIC_PING_BIT
)
>
0
{
let
map
=
crate
:
:
factory
:
:
__jog_metric_maps
:
:
PING_MAP
.
read
(
)
.
expect
(
"
Read
lock
for
dynamic
ping
map
was
poisoned
!
"
)
;
if
let
Some
(
ping
)
=
map
.
get
(
&
id
)
{
ping
.
submit
(
reason
)
;
}
else
{
log
:
:
error
!
(
"
Cannot
submit
unknown
dynamic
ping
{
}
by
id
.
"
id
)
;
}
return
;
}
match
id
{
1
=
>
not_baseline
.
submit
(
reason
)
2
=
>
not_deletion_request
.
submit
(
reason
)
3
=
>
not_events
.
submit
(
reason
)
4
=
>
not_metrics
.
submit
(
reason
)
_
=
>
{
log
:
:
error
!
(
"
Cannot
submit
unknown
ping
{
}
by
id
.
"
id
)
;
}
}
}
