#
ifndef
mozilla_Metrics_h
#
define
mozilla_Metrics_h
#
include
"
mozilla
/
glean
/
bindings
/
MetricTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
<
tuple
>
namespace
mozilla
:
:
glean
{
struct
NoExtraKeys
;
enum
class
DynamicLabel
:
uint16_t
{
}
;
namespace
test
{
constexpr
impl
:
:
BooleanMetric
boolean_metric
(
1
)
;
constexpr
impl
:
:
CounterMetric
counter_metric
(
2
)
;
constexpr
impl
:
:
CustomDistributionMetric
custom_distribution_metric
(
3
)
;
constexpr
impl
:
:
Labeled
<
impl
:
:
BooleanMetric
DynamicLabel
>
labeled_boolean_metric
(
4
)
;
enum
class
LabeledBooleanMetricLabelsLabel
:
uint16_t
{
eOneLabel
=
0
eTwoLabels
=
1
eThreeLabels
=
2
eFourLabels
=
3
eFiveLabels
=
4
eSixLabels
=
5
eSevenLabels
=
6
eEightLabels
=
7
eNineLabels
=
8
eTenLabels
=
9
e__Other__
}
;
constexpr
impl
:
:
Labeled
<
impl
:
:
BooleanMetric
LabeledBooleanMetricLabelsLabel
>
labeled_boolean_metric_labels
(
5
)
;
constexpr
impl
:
:
Labeled
<
impl
:
:
CounterMetric
DynamicLabel
>
labeled_counter_metric
(
6
)
;
enum
class
LabeledCounterMetricLabelsLabel
:
uint16_t
{
eOneLabel
=
0
eTwoLabels
=
1
e__Other__
}
;
constexpr
impl
:
:
Labeled
<
impl
:
:
CounterMetric
LabeledCounterMetricLabelsLabel
>
labeled_counter_metric_labels
(
7
)
;
constexpr
impl
:
:
Labeled
<
impl
:
:
StringMetric
DynamicLabel
>
labeled_string_metric
(
8
)
;
enum
class
LabeledStringMetricLabelsLabel
:
uint16_t
{
eOneLabel
=
0
eTwoLabels
=
1
e__Other__
}
;
constexpr
impl
:
:
Labeled
<
impl
:
:
StringMetric
LabeledStringMetricLabelsLabel
>
labeled_string_metric_labels
(
9
)
;
constexpr
impl
:
:
MemoryDistributionMetric
memory_distribution_metric
(
10
)
;
constexpr
impl
:
:
StringListMetric
string_list_metric
(
11
)
;
constexpr
impl
:
:
StringMetric
string_metric
(
12
)
;
constexpr
impl
:
:
TextMetric
text_metric
(
13
)
;
constexpr
impl
:
:
TimespanMetric
timespan_metric
(
14
)
;
constexpr
impl
:
:
TimingDistributionMetric
timing_distribution_metric
(
15
)
;
}
namespace
test_nested
{
constexpr
impl
:
:
DatetimeMetric
datetime_metric
(
17
)
;
constexpr
impl
:
:
EventMetric
<
NoExtraKeys
>
event_metric
(
18
)
;
struct
EventMetricWithExtraExtra
{
mozilla
:
:
Maybe
<
nsCString
>
anExtraKey
;
mozilla
:
:
Maybe
<
nsCString
>
anotherExtraKey
;
std
:
:
tuple
<
nsTArray
<
nsCString
>
nsTArray
<
nsCString
>
>
ToFfiExtra
(
)
const
{
nsTArray
<
nsCString
>
extraKeys
;
nsTArray
<
nsCString
>
extraValues
;
if
(
anExtraKey
)
{
extraKeys
.
AppendElement
(
)
-
>
AssignASCII
(
"
an_extra_key
"
)
;
extraValues
.
EmplaceBack
(
anExtraKey
.
value
(
)
)
;
}
if
(
anotherExtraKey
)
{
extraKeys
.
AppendElement
(
)
-
>
AssignASCII
(
"
another_extra_key
"
)
;
extraValues
.
EmplaceBack
(
anotherExtraKey
.
value
(
)
)
;
}
return
std
:
:
make_tuple
(
std
:
:
move
(
extraKeys
)
std
:
:
move
(
extraValues
)
)
;
}
}
;
constexpr
impl
:
:
EventMetric
<
EventMetricWithExtraExtra
>
event_metric_with_extra
(
19
)
;
constexpr
impl
:
:
DenominatorMetric
external_denominator
(
20
)
;
constexpr
impl
:
:
CounterMetric
optimizable_counter_metric
(
21
)
;
constexpr
impl
:
:
QuantityMetric
quantity_metric
(
22
)
;
constexpr
impl
:
:
RateMetric
rate_metric
(
23
)
;
constexpr
impl
:
:
NumeratorMetric
rate_with_external_denominator
(
24
)
;
constexpr
impl
:
:
UuidMetric
uuid_metric
(
25
)
;
}
}
#
endif
