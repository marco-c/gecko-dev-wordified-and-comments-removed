#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsTHashMap
.
h
"
#
ifndef
mozilla_glean_ScalarGifftMap_h
#
define
mozilla_glean_ScalarGifftMap_h
namespace
mozilla
:
:
glean
{
using
Telemetry
:
:
ScalarID
;
typedef
nsUint32HashKey
SubmetricIdHashKey
;
typedef
nsTHashMap
<
SubmetricIdHashKey
Tuple
<
ScalarID
nsString
>
>
SubmetricToLabeledMirrorMapType
;
typedef
StaticDataMutex
<
UniquePtr
<
SubmetricToLabeledMirrorMapType
>
>
SubmetricToMirrorMutex
;
static
inline
SubmetricToMirrorMutex
:
:
AutoLock
GetLabeledMirrorLock
(
)
{
static
SubmetricToMirrorMutex
sLabeledMirrors
(
"
sLabeledMirrors
"
)
;
auto
lock
=
sLabeledMirrors
.
Lock
(
)
;
if
(
!
*
lock
)
{
*
lock
=
MakeUnique
<
SubmetricToLabeledMirrorMapType
>
(
)
;
}
return
lock
;
}
namespace
{
class
ScalarIDHashKey
:
public
PLDHashEntryHdr
{
public
:
typedef
const
ScalarID
&
KeyType
;
typedef
const
ScalarID
*
KeyTypePointer
;
explicit
ScalarIDHashKey
(
KeyTypePointer
aKey
)
:
mValue
(
*
aKey
)
{
}
ScalarIDHashKey
(
ScalarIDHashKey
&
&
aOther
)
:
PLDHashEntryHdr
(
std
:
:
move
(
aOther
)
)
mValue
(
std
:
:
move
(
aOther
.
mValue
)
)
{
}
~
ScalarIDHashKey
(
)
=
default
;
KeyType
GetKey
(
)
const
{
return
mValue
;
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
*
aKey
=
=
mValue
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
static_cast
<
std
:
:
underlying_type
<
ScalarID
>
:
:
type
>
(
*
aKey
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
const
ScalarID
mValue
;
}
;
}
typedef
StaticDataMutex
<
UniquePtr
<
nsTHashMap
<
ScalarIDHashKey
TimeStamp
>
>
>
TimesToStartsMutex
;
static
inline
TimesToStartsMutex
:
:
AutoLock
GetTimesToStartsLock
(
)
{
static
TimesToStartsMutex
sTimespanStarts
(
"
sTimespanStarts
"
)
;
auto
lock
=
sTimespanStarts
.
Lock
(
)
;
if
(
!
*
lock
)
{
*
lock
=
MakeUnique
<
nsTHashMap
<
ScalarIDHashKey
TimeStamp
>
>
(
)
;
}
return
lock
;
}
static
inline
bool
IsSubmetricId
(
uint32_t
aId
)
{
return
aId
>
(
1
<
<
27
)
;
}
static
Maybe
<
ScalarID
>
ScalarIdForMetric
(
uint32_t
aId
)
{
switch
(
aId
)
{
case
1
:
{
return
Some
(
ScalarID
:
:
SOME_BOOL_SCALAR
)
;
}
case
2
:
{
return
Some
(
ScalarID
:
:
SOME_KEYED_BOOL_SCALAR
)
;
}
case
3
:
{
return
Some
(
ScalarID
:
:
SOME_OTHER_KEYED_BOOL_SCALAR
)
;
}
case
4
:
{
return
Some
(
ScalarID
:
:
SOME_UINT_SCALAR
)
;
}
case
5
:
{
return
Some
(
ScalarID
:
:
SOME_KEYED_UINT_SCALAR
)
;
}
case
6
:
{
return
Some
(
ScalarID
:
:
SOME_OTHER_KEYED_UINT_SCALAR
)
;
}
case
7
:
{
return
Some
(
ScalarID
:
:
SOME_STRING_SCALAR
)
;
}
case
10
:
{
return
Some
(
ScalarID
:
:
SOME_KEYED_BOOL_SCALAR
)
;
}
case
11
:
{
return
Some
(
ScalarID
:
:
SOME_OTHER_UINT_SCALAR
)
;
}
case
15
:
{
return
Some
(
ScalarID
:
:
SOME_OTHER_STRING_SCALAR
)
;
}
case
16
:
{
return
Some
(
ScalarID
:
:
SOME_STILL_OTHER_STRING_SCALAR
)
;
}
case
19
:
{
return
Some
(
ScalarID
:
:
TELEMETRY_TEST_MIRROR_FOR_QUANTITY
)
;
}
default
:
{
return
Nothing
(
)
;
}
}
}
}
#
endif
