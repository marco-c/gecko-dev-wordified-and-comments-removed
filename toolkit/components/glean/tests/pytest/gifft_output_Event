#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
GleanJSMetricsLookup
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
jog
/
JOG
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
<
tuple
>
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
ifndef
mozilla_glean_EventGifftMap_h
#
define
mozilla_glean_EventGifftMap_h
#
define
DYNAMIC_METRIC_BIT
(
26
)
#
define
GLEAN_METRIC_ID
(
id
)
(
(
id
)
&
(
(
1ULL
<
<
27
)
-
1
)
)
namespace
mozilla
:
:
glean
{
using
Telemetry
:
:
EventID
;
static
inline
Maybe
<
EventID
>
EventIdForMetric
(
uint32_t
aId
)
{
switch
(
aId
)
{
case
17
:
{
return
Some
(
EventID
:
:
EventMetric_EnumNames_AreStrange
)
;
}
case
18
:
{
return
Some
(
EventID
:
:
EventMetric_EnumName_WithExtra
)
;
}
default
:
{
if
(
MOZ_UNLIKELY
(
aId
&
(
1
<
<
DYNAMIC_METRIC_BIT
)
)
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
metricName
=
JOG
:
:
GetMetricName
(
aId
)
;
if
(
metricName
.
isSome
(
)
)
{
auto
maybeMetric
=
MetricByNameLookup
(
metricName
.
ref
(
)
)
;
if
(
maybeMetric
.
isSome
(
)
)
{
uint32_t
staticId
=
GLEAN_METRIC_ID
(
maybeMetric
.
value
(
)
)
;
MOZ_ASSERT
(
!
(
staticId
&
(
1
<
<
DYNAMIC_METRIC_BIT
)
)
)
;
return
EventIdForMetric
(
staticId
)
;
}
}
}
return
Nothing
(
)
;
}
}
}
}
#
undef
GLEAN_METRIC_ID
#
undef
DYNAMIC_METRIC_BIT
#
endif
