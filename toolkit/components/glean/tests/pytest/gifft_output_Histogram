#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
ifndef
mozilla_glean_HistogramGifftMap_h
#
define
mozilla_glean_HistogramGifftMap_h
namespace
mozilla
:
:
glean
{
using
Telemetry
:
:
HistogramID
;
typedef
uint64_t
TimerId
;
typedef
StaticDataMutex
<
UniquePtr
<
nsTHashMap
<
TimerId
TimeStamp
>
>
>
TimerToStampMutex
;
static
inline
Maybe
<
TimerToStampMutex
:
:
AutoLock
>
GetTimerIdToStartsLock
(
)
{
static
TimerToStampMutex
sTimerIdToStarts
(
"
sTimerIdToStarts
"
)
;
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
return
Nothing
(
)
;
}
if
(
!
*
lock
)
{
*
lock
=
MakeUnique
<
nsTHashMap
<
TimerId
TimeStamp
>
>
(
)
;
RefPtr
<
nsIRunnable
>
cleanupFn
=
NS_NewRunnableFunction
(
__func__
[
&
]
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
return
;
}
RunOnShutdown
(
[
&
]
{
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
}
)
;
nsIRunnable
*
temp
=
cleanupFn
.
get
(
)
;
nsCOMPtr
<
nsIThread
>
mainThread
;
if
(
NS_FAILED
(
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
)
|
|
NS_FAILED
(
mainThread
-
>
Dispatch
(
cleanupFn
.
forget
(
)
nsIThread
:
:
DISPATCH_NORMAL
)
)
)
{
if
(
!
cleanupFn
)
{
NS_RELEASE
(
temp
)
;
}
*
lock
=
nullptr
;
return
Nothing
(
)
;
}
}
return
Some
(
std
:
:
move
(
lock
)
)
;
}
static
Maybe
<
HistogramID
>
HistogramIdForMetric
(
uint32_t
aId
)
{
switch
(
aId
)
{
case
12
:
{
return
Some
(
HistogramID
:
:
SOME_TIME_HISTOGRAM_MS
)
;
}
case
13
:
{
return
Some
(
HistogramID
:
:
SOME_MEM_HISTOGRAM_KB
)
;
}
case
14
:
{
return
Some
(
HistogramID
:
:
SOME_LINEAR_HISTOGRAM
)
;
}
default
:
{
return
Nothing
(
)
;
}
}
}
}
#
endif
