#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
GleanJSMetricsLookup
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
jog
/
JOG
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
<
tuple
>
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
ifndef
mozilla_glean_HistogramGifftMap_h
#
define
mozilla_glean_HistogramGifftMap_h
#
define
DYNAMIC_METRIC_BIT
(
26
)
#
define
GLEAN_METRIC_ID
(
id
)
(
(
id
)
&
(
(
1ULL
<
<
27
)
-
1
)
)
namespace
mozilla
:
:
glean
{
using
Telemetry
:
:
HistogramID
;
using
MetricId
=
uint32_t
;
using
TimerId
=
uint64_t
;
using
MetricTimerTuple
=
std
:
:
tuple
<
MetricId
TimerId
>
;
class
MetricTimerTupleHashKey
:
public
PLDHashEntryHdr
{
public
:
using
KeyType
=
const
MetricTimerTuple
&
;
using
KeyTypePointer
=
const
MetricTimerTuple
*
;
explicit
MetricTimerTupleHashKey
(
KeyTypePointer
aKey
)
:
mValue
(
*
aKey
)
{
}
MetricTimerTupleHashKey
(
MetricTimerTupleHashKey
&
&
aOther
)
:
PLDHashEntryHdr
(
std
:
:
move
(
aOther
)
)
mValue
(
std
:
:
move
(
aOther
.
mValue
)
)
{
}
~
MetricTimerTupleHashKey
(
)
=
default
;
KeyType
GetKey
(
)
const
{
return
mValue
;
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
std
:
:
get
<
0
>
(
*
aKey
)
=
=
std
:
:
get
<
0
>
(
mValue
)
&
&
std
:
:
get
<
1
>
(
*
aKey
)
=
=
std
:
:
get
<
1
>
(
mValue
)
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
HashGeneric
(
std
:
:
get
<
0
>
(
*
aKey
)
std
:
:
get
<
1
>
(
*
aKey
)
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
const
MetricTimerTuple
mValue
;
}
;
typedef
StaticDataMutex
<
UniquePtr
<
nsTHashMap
<
MetricTimerTupleHashKey
TimeStamp
>
>
>
TimerToStampMutex
;
static
inline
Maybe
<
TimerToStampMutex
:
:
AutoLock
>
GetTimerIdToStartsLock
(
)
{
static
TimerToStampMutex
sTimerIdToStarts
(
"
sTimerIdToStarts
"
)
;
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
return
Nothing
(
)
;
}
if
(
!
*
lock
)
{
*
lock
=
MakeUnique
<
nsTHashMap
<
MetricTimerTupleHashKey
TimeStamp
>
>
(
)
;
RefPtr
<
nsIRunnable
>
cleanupFn
=
NS_NewRunnableFunction
(
__func__
[
&
]
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
return
;
}
RunOnShutdown
(
[
&
]
{
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
}
)
;
nsIRunnable
*
temp
=
cleanupFn
.
get
(
)
;
nsCOMPtr
<
nsIThread
>
mainThread
;
if
(
NS_FAILED
(
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
)
|
|
NS_FAILED
(
mainThread
-
>
Dispatch
(
cleanupFn
.
forget
(
)
nsIThread
:
:
DISPATCH_NORMAL
)
)
)
{
if
(
!
cleanupFn
)
{
NS_RELEASE
(
temp
)
;
}
*
lock
=
nullptr
;
return
Nothing
(
)
;
}
}
return
Some
(
std
:
:
move
(
lock
)
)
;
}
static
Maybe
<
HistogramID
>
HistogramIdForMetric
(
uint32_t
aId
)
{
switch
(
aId
)
{
case
3
:
{
return
Some
(
HistogramID
:
:
SOME_LINEAR_HISTOGRAM
)
;
}
case
10
:
{
return
Some
(
HistogramID
:
:
SOME_MEM_HISTOGRAM_KB
)
;
}
case
15
:
{
return
Some
(
HistogramID
:
:
SOME_TIME_HISTOGRAM_MS
)
;
}
default
:
{
if
(
MOZ_UNLIKELY
(
aId
&
(
1
<
<
DYNAMIC_METRIC_BIT
)
)
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
metricName
=
JOG
:
:
GetMetricName
(
aId
)
;
if
(
metricName
.
isSome
(
)
)
{
auto
maybeMetric
=
MetricByNameLookup
(
metricName
.
ref
(
)
)
;
if
(
maybeMetric
.
isSome
(
)
)
{
uint32_t
staticId
=
GLEAN_METRIC_ID
(
maybeMetric
.
value
(
)
)
;
MOZ_ASSERT
(
!
(
staticId
&
(
1
<
<
DYNAMIC_METRIC_BIT
)
)
)
;
return
HistogramIdForMetric
(
staticId
)
;
}
}
}
return
Nothing
(
)
;
}
}
}
}
#
undef
GLEAN_METRIC_ID
#
undef
DYNAMIC_METRIC_BIT
#
endif
