"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
ContentTaskUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ContentTaskUtils
.
jsm
"
)
;
add_setup
(
{
skip_if
:
(
)
=
>
!
runningInParent
|
|
AppConstants
.
platform
=
=
"
android
"
}
function
test_setup
(
)
{
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
}
)
;
const
FOG_IPC_PAYLOAD_ACCESS_LIMIT
=
100000
;
add_task
(
{
skip_if
:
(
)
=
>
runningInParent
}
async
function
run_child_stuff
(
)
{
for
(
let
i
=
0
;
i
<
FOG_IPC_PAYLOAD_ACCESS_LIMIT
+
1
;
i
+
+
)
{
Glean
.
testOnly
.
badCode
.
add
(
1
)
;
}
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
runningInParent
}
async
function
test_fog_ipc_limit
(
)
{
await
run_test_in_child
(
"
test_FOGIPCLimit
.
js
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
!
!
Glean
.
testOnly
.
badCode
.
testGetValue
(
)
;
}
"
Waiting
for
IPC
.
"
)
;
Assert
.
greater
(
Glean
.
testOnly
.
badCode
.
testGetValue
(
)
FOG_IPC_PAYLOAD_ACCESS_LIMIT
)
;
}
)
;
