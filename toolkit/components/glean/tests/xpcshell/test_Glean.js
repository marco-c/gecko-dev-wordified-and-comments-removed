"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
add_setup
(
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
"
android
"
}
function
test_setup
(
)
{
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
}
)
;
add_task
(
function
test_fog_counter_works
(
)
{
Glean
.
testOnly
.
badCode
.
add
(
31
)
;
Assert
.
equal
(
31
Glean
.
testOnly
.
badCode
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
async
function
test_fog_string_works
(
)
{
Assert
.
equal
(
null
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
cheesyString
.
set
(
undefined
)
;
Assert
.
equal
(
null
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
)
)
;
const
value
=
"
a
cheesy
string
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
value
)
;
Assert
.
equal
(
value
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
async
function
test_fog_string_list_works
(
)
{
const
value
=
"
a
cheesy
string
!
"
;
const
value2
=
"
a
cheesier
string
!
"
;
const
value3
=
"
the
cheeziest
of
strings
.
"
;
const
cheeseList
=
[
value
value2
]
;
Glean
.
testOnly
.
cheesyStringList
.
set
(
cheeseList
)
;
let
val
=
Glean
.
testOnly
.
cheesyStringList
.
testGetValue
(
)
;
Assert
.
deepEqual
(
cheeseList
val
)
;
Glean
.
testOnly
.
cheesyStringList
.
add
(
value3
)
;
Assert
.
ok
(
Glean
.
testOnly
.
cheesyStringList
.
testGetValue
(
)
.
includes
(
value3
)
)
;
}
)
;
add_task
(
async
function
test_fog_timespan_works
(
)
{
Glean
.
testOnly
.
canWeTimeIt
.
start
(
)
;
Glean
.
testOnly
.
canWeTimeIt
.
cancel
(
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
canWeTimeIt
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
canWeTimeIt
.
start
(
)
;
await
sleep
(
10
)
;
Glean
.
testOnly
.
canWeTimeIt
.
stop
(
)
;
Assert
.
ok
(
Glean
.
testOnly
.
canWeTimeIt
.
testGetValue
(
"
test
-
ping
"
)
>
0
)
;
}
)
;
add_task
(
async
function
test_fog_timespan_throws_on_stop_wout_start
(
)
{
Glean
.
testOnly
.
canWeTimeIt
.
stop
(
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
canWeTimeIt
.
testGetValue
(
)
/
DataError
/
"
Should
throw
because
stop
was
called
without
start
.
"
)
;
}
)
;
add_task
(
async
function
test_fog_uuid_works
(
)
{
const
kTestUuid
=
"
decafdec
-
afde
-
cafd
-
ecaf
-
decafdecafde
"
;
Glean
.
testOnly
.
whatIdIt
.
set
(
kTestUuid
)
;
Assert
.
equal
(
kTestUuid
Glean
.
testOnly
.
whatIdIt
.
testGetValue
(
"
test
-
ping
"
)
)
;
Glean
.
testOnly
.
whatIdIt
.
generateAndSet
(
)
;
Assert
.
notEqual
(
kTestUuid
Glean
.
testOnly
.
whatIdIt
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
function
test_fog_datetime_works
(
)
{
const
value
=
new
Date
(
"
2020
-
06
-
11T12
:
00
:
00
"
)
;
Glean
.
testOnly
.
whatADate
.
set
(
value
.
getTime
(
)
*
1000
)
;
const
received
=
Glean
.
testOnly
.
whatADate
.
testGetValue
(
"
test
-
ping
"
)
;
Assert
.
equal
(
received
.
getTime
(
)
value
.
getTime
(
)
)
;
}
)
;
add_task
(
function
test_fog_boolean_works
(
)
{
Glean
.
testOnly
.
canWeFlagIt
.
set
(
false
)
;
Assert
.
equal
(
false
Glean
.
testOnly
.
canWeFlagIt
.
testGetValue
(
"
test
-
ping
"
)
)
;
Assert
.
equal
(
false
Glean
.
testOnly
.
canWeFlagIt
.
testGetValue
(
)
)
;
}
)
;
add_task
(
async
function
test_fog_event_works
(
)
{
Glean
.
testOnlyIpc
.
noExtraEvent
.
record
(
)
;
var
events
=
Glean
.
testOnlyIpc
.
noExtraEvent
.
testGetValue
(
)
;
Assert
.
equal
(
1
events
.
length
)
;
Assert
.
equal
(
"
test_only
.
ipc
"
events
[
0
]
.
category
)
;
Assert
.
equal
(
"
no_extra_event
"
events
[
0
]
.
name
)
;
let
extra
=
{
extra1
:
"
can
set
extras
"
extra2
:
"
passing
more
data
"
}
;
Glean
.
testOnlyIpc
.
anEvent
.
record
(
extra
)
;
events
=
Glean
.
testOnlyIpc
.
anEvent
.
testGetValue
(
)
;
Assert
.
equal
(
1
events
.
length
)
;
Assert
.
equal
(
"
test_only
.
ipc
"
events
[
0
]
.
category
)
;
Assert
.
equal
(
"
an_event
"
events
[
0
]
.
name
)
;
Assert
.
deepEqual
(
extra
events
[
0
]
.
extra
)
;
extra
=
{
extra1
:
undefined
extra2
:
"
defined
"
}
;
Glean
.
testOnlyIpc
.
anEvent
.
record
(
extra
)
;
events
=
Glean
.
testOnlyIpc
.
anEvent
.
testGetValue
(
)
;
Assert
.
equal
(
2
events
.
length
)
;
Assert
.
deepEqual
(
{
extra2
:
"
defined
"
}
events
[
1
]
.
extra
)
;
let
extra2
=
{
extra1
:
"
can
set
extras
"
extra2
:
37
extra3_longer_name
:
false
}
;
Glean
.
testOnlyIpc
.
eventWithExtra
.
record
(
extra2
)
;
events
=
Glean
.
testOnlyIpc
.
eventWithExtra
.
testGetValue
(
)
;
Assert
.
equal
(
1
events
.
length
)
;
Assert
.
equal
(
"
test_only
.
ipc
"
events
[
0
]
.
category
)
;
Assert
.
equal
(
"
event_with_extra
"
events
[
0
]
.
name
)
;
let
expectedExtra
=
{
extra1
:
"
can
set
extras
"
extra2
:
"
37
"
extra3_longer_name
:
"
false
"
}
;
Assert
.
deepEqual
(
expectedExtra
events
[
0
]
.
extra
)
;
let
extra5
=
{
extra3LongerName
:
false
}
;
Glean
.
testOnlyIpc
.
eventWithExtra
.
record
(
extra5
)
;
events
=
Glean
.
testOnlyIpc
.
eventWithExtra
.
testGetValue
(
)
;
Assert
.
equal
(
2
events
.
length
"
Recorded
one
event
too
many
.
"
)
;
expectedExtra
=
{
extra3_longer_name
:
"
false
"
}
;
Assert
.
deepEqual
(
expectedExtra
events
[
1
]
.
extra
)
;
let
extra3
=
{
extra1_nonexistent_extra
:
"
this
does
not
crash
"
}
;
Glean
.
testOnlyIpc
.
eventWithExtra
.
record
(
extra3
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
eventWithExtra
.
testGetValue
(
)
/
DataError
/
"
Should
throw
because
of
a
recording
error
.
"
)
;
}
)
;
add_task
(
async
function
test_fog_memory_distribution_works
(
)
{
Glean
.
testOnly
.
doYouRemember
.
accumulate
(
7
)
;
Glean
.
testOnly
.
doYouRemember
.
accumulate
(
17
)
;
let
data
=
Glean
.
testOnly
.
doYouRemember
.
testGetValue
(
"
test
-
ping
"
)
;
Assert
.
equal
(
2
data
.
count
"
Count
of
entries
is
correct
"
)
;
Assert
.
equal
(
24
*
1024
*
1024
data
.
sum
"
Sum
'
s
correct
"
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
Assert
.
ok
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
17520006
|
|
bucket
=
=
7053950
)
)
"
Only
two
buckets
have
a
sample
"
)
;
}
}
)
;
add_task
(
async
function
test_fog_custom_distribution_works
(
)
{
Glean
.
testOnlyIpc
.
aCustomDist
.
accumulateSamples
(
[
7
268435458
]
)
;
let
data
=
Glean
.
testOnlyIpc
.
aCustomDist
.
testGetValue
(
"
store1
"
)
;
Assert
.
equal
(
2
data
.
count
"
Count
of
entries
is
correct
"
)
;
Assert
.
equal
(
7
+
268435458
data
.
sum
"
Sum
'
s
correct
"
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
Assert
.
ok
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
1
|
|
bucket
=
=
268435456
)
)
Only
two
buckets
have
a
sample
{
bucket
}
{
count
}
)
;
}
Glean
.
testOnlyIpc
.
aCustomDist
.
accumulateSamples
(
[
-
7
]
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
aCustomDist
.
testGetValue
(
)
/
DataError
/
)
;
}
)
;
add_task
(
function
test_fog_custom_pings
(
)
{
Assert
.
ok
(
"
onePingOnly
"
in
GleanPings
)
;
let
submitted
=
false
;
Glean
.
testOnly
.
onePingOneBool
.
set
(
false
)
;
GleanPings
.
onePingOnly
.
testBeforeNextSubmit
(
(
)
=
>
{
submitted
=
true
;
Assert
.
equal
(
false
Glean
.
testOnly
.
onePingOneBool
.
testGetValue
(
)
)
;
}
)
;
GleanPings
.
onePingOnly
.
submit
(
)
;
Assert
.
ok
(
submitted
"
Ping
was
submitted
callback
was
called
.
"
)
;
}
)
;
add_task
(
function
test_recursive_testBeforeNextSubmit
(
)
{
Assert
.
ok
(
"
onePingOnly
"
in
GleanPings
)
;
let
submitted
=
0
;
let
rec
=
(
)
=
>
{
submitted
+
+
;
GleanPings
.
onePingOnly
.
testBeforeNextSubmit
(
rec
)
;
}
;
GleanPings
.
onePingOnly
.
testBeforeNextSubmit
(
rec
)
;
GleanPings
.
onePingOnly
.
submit
(
)
;
GleanPings
.
onePingOnly
.
submit
(
)
;
GleanPings
.
onePingOnly
.
submit
(
)
;
Assert
.
equal
(
3
submitted
"
Ping
was
submitted
3
times
"
)
;
GleanPings
.
onePingOnly
.
testBeforeNextSubmit
(
(
)
=
>
{
}
)
;
}
)
;
add_task
(
async
function
test_fog_timing_distribution_works
(
)
{
let
t1
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
let
t2
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
await
sleep
(
5
)
;
let
t3
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
cancel
(
t1
)
;
await
sleep
(
5
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
stopAndAccumulate
(
t2
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
stopAndAccumulate
(
t3
)
;
let
data
=
Glean
.
testOnly
.
whatTimeIsIt
.
testGetValue
(
)
;
Assert
.
equal
(
2
data
.
count
"
Count
of
entries
is
correct
"
)
;
const
NANOS_IN_MILLIS
=
1e6
;
const
EPSILON
=
40000
;
Assert
.
greater
(
data
.
sum
15
*
NANOS_IN_MILLIS
-
EPSILON
)
;
Assert
.
equal
(
2
Object
.
entries
(
data
.
values
)
.
reduce
(
(
acc
[
count
]
)
=
>
acc
+
count
0
)
"
Only
two
buckets
with
samples
"
)
;
}
)
;
add_task
(
async
function
test_fog_labels_conform
(
)
{
Glean
.
testOnly
.
mabelsLabelMaker
.
singleword
.
set
(
"
portmanteau
"
)
;
Assert
.
equal
(
"
portmanteau
"
Glean
.
testOnly
.
mabelsLabelMaker
.
singleword
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mabelsLabelMaker
.
snake_case
.
set
(
"
snek
"
)
;
Assert
.
equal
(
"
snek
"
Glean
.
testOnly
.
mabelsLabelMaker
.
snake_case
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mabelsLabelMaker
[
"
dash
-
character
"
]
.
set
(
"
Dash
Rendar
"
)
;
Assert
.
equal
(
"
Dash
Rendar
"
Glean
.
testOnly
.
mabelsLabelMaker
[
"
dash
-
character
"
]
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mabelsLabelMaker
[
"
dot
.
separated
"
]
.
set
(
"
dot
product
"
)
;
Assert
.
equal
(
"
dot
product
"
Glean
.
testOnly
.
mabelsLabelMaker
[
"
dot
.
separated
"
]
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mabelsLabelMaker
.
camelCase
.
set
(
"
wednesday
"
)
;
Assert
.
equal
(
"
wednesday
"
Glean
.
testOnly
.
mabelsLabelMaker
.
camelCase
.
testGetValue
(
)
)
;
const
veryLong
=
"
1
"
.
repeat
(
72
)
;
Glean
.
testOnly
.
mabelsLabelMaker
[
veryLong
]
.
set
(
"
seventy
-
two
"
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
mabelsLabelMaker
[
veryLong
]
.
testGetValue
(
)
/
DataError
/
"
Should
throw
because
of
an
invalid
label
.
"
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
mabelsLabelMaker
[
"
dot
.
separated
"
]
.
testGetValue
(
)
/
DataError
/
"
Should
throw
because
of
an
invalid
label
.
"
)
;
}
)
;
add_task
(
async
function
test_fog_labeled_boolean_works
(
)
{
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mabelsLikeBalloons
.
at_parties
.
testGetValue
(
)
"
New
labels
with
no
values
should
return
undefined
"
)
;
Glean
.
testOnly
.
mabelsLikeBalloons
.
at_parties
.
set
(
true
)
;
Glean
.
testOnly
.
mabelsLikeBalloons
.
at_funerals
.
set
(
false
)
;
Assert
.
equal
(
true
Glean
.
testOnly
.
mabelsLikeBalloons
.
at_parties
.
testGetValue
(
)
)
;
Assert
.
equal
(
false
Glean
.
testOnly
.
mabelsLikeBalloons
.
at_funerals
.
testGetValue
(
)
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mabelsLikeBalloons
.
__other__
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mabelsLikeBalloons
[
"
1
"
.
repeat
(
72
)
]
.
set
(
true
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
mabelsLikeBalloons
.
__other__
.
testGetValue
(
)
/
DataError
/
"
Should
throw
because
of
a
recording
error
.
"
)
;
}
)
;
add_task
(
async
function
test_fog_labeled_counter_works
(
)
{
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mabelsKitchenCounters
.
near_the_sink
.
testGetValue
(
)
"
New
labels
with
no
values
should
return
undefined
"
)
;
Glean
.
testOnly
.
mabelsKitchenCounters
.
near_the_sink
.
add
(
1
)
;
Glean
.
testOnly
.
mabelsKitchenCounters
.
with_junk_on_them
.
add
(
2
)
;
Assert
.
equal
(
1
Glean
.
testOnly
.
mabelsKitchenCounters
.
near_the_sink
.
testGetValue
(
)
)
;
Assert
.
equal
(
2
Glean
.
testOnly
.
mabelsKitchenCounters
.
with_junk_on_them
.
testGetValue
(
)
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mabelsKitchenCounters
.
__other__
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mabelsKitchenCounters
[
"
1
"
.
repeat
(
72
)
]
.
add
(
1
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
mabelsKitchenCounters
.
__other__
.
testGetValue
(
)
/
DataError
/
"
Should
throw
because
of
a
recording
error
.
"
)
;
}
)
;
add_task
(
async
function
test_fog_labeled_string_works
(
)
{
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mabelsBalloonStrings
.
colour_of_99
.
testGetValue
(
)
"
New
labels
with
no
values
should
return
undefined
"
)
;
Glean
.
testOnly
.
mabelsBalloonStrings
.
colour_of_99
.
set
(
"
crimson
"
)
;
Glean
.
testOnly
.
mabelsBalloonStrings
.
string_lengths
.
set
(
"
various
"
)
;
Assert
.
equal
(
"
crimson
"
Glean
.
testOnly
.
mabelsBalloonStrings
.
colour_of_99
.
testGetValue
(
)
)
;
Assert
.
equal
(
"
various
"
Glean
.
testOnly
.
mabelsBalloonStrings
.
string_lengths
.
testGetValue
(
)
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mabelsBalloonStrings
.
__other__
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mabelsBalloonStrings
[
"
1
"
.
repeat
(
72
)
]
.
set
(
"
valid
"
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
mabelsBalloonStrings
.
__other__
.
testGetValue
(
)
/
DataError
/
)
;
}
)
;
add_task
(
function
test_fog_quantity_works
(
)
{
Glean
.
testOnly
.
meaningOfLife
.
set
(
42
)
;
Assert
.
equal
(
42
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
)
)
;
}
)
;
add_task
(
function
test_fog_rate_works
(
)
{
Glean
.
testOnlyIpc
.
irate
.
addToNumerator
(
22
)
;
Glean
.
testOnlyIpc
.
irate
.
addToDenominator
(
7
)
;
Assert
.
deepEqual
(
{
numerator
:
22
denominator
:
7
}
Glean
.
testOnlyIpc
.
irate
.
testGetValue
(
)
)
;
Glean
.
testOnlyIpc
.
anExternalDenominator
.
add
(
11
)
;
Glean
.
testOnlyIpc
.
rateWithExternalDenominator
.
addToNumerator
(
121
)
;
Assert
.
equal
(
11
Glean
.
testOnlyIpc
.
anExternalDenominator
.
testGetValue
(
)
)
;
Assert
.
deepEqual
(
{
numerator
:
121
denominator
:
11
}
Glean
.
testOnlyIpc
.
rateWithExternalDenominator
.
testGetValue
(
)
)
;
}
)
;
add_task
(
async
function
test_fog_url_works
(
)
{
const
value
=
"
https
:
/
/
www
.
example
.
com
/
fog
"
;
Glean
.
testOnlyIpc
.
aUrl
.
set
(
value
)
;
Assert
.
equal
(
value
Glean
.
testOnlyIpc
.
aUrl
.
testGetValue
(
"
store1
"
)
)
;
}
)
;
add_task
(
async
function
test_fog_text_works
(
)
{
const
value
=
"
Before
the
risin
'
sun
we
fly
So
many
roads
to
choose
We
'
ll
start
out
walkin
'
and
learn
to
run
(
We
'
ve
only
just
begun
)
"
;
Glean
.
testOnlyIpc
.
aText
.
set
(
value
)
;
let
rslt
=
Glean
.
testOnlyIpc
.
aText
.
testGetValue
(
)
;
Assert
.
equal
(
value
rslt
)
;
Assert
.
equal
(
121
rslt
.
length
)
;
}
)
;
add_task
(
async
function
test_fog_text_works_unusual_character
(
)
{
const
value
=
"
The
secret
to
Dominique
Ansel
'
s
viennoiserie
is
the
use
of
Isigny
Sainte
-
M
re
butter
and
Les
Grands
Moulins
de
Paris
flour
"
;
Glean
.
testOnlyIpc
.
aText
.
set
(
value
)
;
let
rslt
=
Glean
.
testOnlyIpc
.
aText
.
testGetValue
(
)
;
Assert
.
equal
(
value
rslt
)
;
Assert
.
greater
(
rslt
.
length
100
)
;
}
)
;
