"
use
strict
"
;
add_setup
(
function
test_setup
(
)
{
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
}
)
;
add_task
(
function
test_fog_metrics_disabled_remotely
(
)
{
const
str1
=
"
a
cheesy
string
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str1
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
const
feature_config
=
{
metrics_enabled
:
{
"
test_only
.
cheesy_string
"
:
false
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
const
str2
=
"
another
cheesy
string
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str2
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
)
;
add_task
(
function
test_fog_multiple_metrics_disabled_remotely
(
)
{
const
str1
=
"
yet
another
a
cheesy
string
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str1
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
const
qty1
=
42
;
Glean
.
testOnly
.
meaningOfLife
.
set
(
qty1
)
;
Assert
.
equal
(
qty1
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
"
test
-
ping
"
)
)
;
var
feature_config
=
{
metrics_enabled
:
{
"
test_only
.
cheesy_string
"
:
false
"
test_only
.
meaning_of_life
"
:
false
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
const
str2
=
"
another
cheesy
string
v2
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str2
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
const
qty2
=
52
;
Glean
.
testOnly
.
meaningOfLife
.
set
(
qty2
)
;
Assert
.
equal
(
qty1
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
"
test
-
ping
"
)
)
;
feature_config
=
{
metrics_enabled
:
{
"
test_only
.
cheesy_string
"
:
true
"
test_only
.
meaning_of_life
"
:
false
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
const
str3
=
"
another
cheesy
string
v3
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str3
)
;
Assert
.
equal
(
str3
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
const
qty3
=
62
;
Glean
.
testOnly
.
meaningOfLife
.
set
(
qty3
)
;
Assert
.
equal
(
qty1
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
"
test
-
ping
"
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
const
str4
=
"
another
a
cheesy
string
v4
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str4
)
;
Assert
.
equal
(
str4
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
const
qty4
=
72
;
Glean
.
testOnly
.
meaningOfLife
.
set
(
qty4
)
;
Assert
.
equal
(
qty4
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
function
test_fog_metrics_feature_config_api_handles_null_values
(
)
{
const
str1
=
"
a
cheesy
string
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str1
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
const
feature_config
=
{
metrics_enabled
:
{
"
test_only
.
cheesy_string
"
:
false
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
const
str2
=
"
another
cheesy
string
v2
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str2
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
Services
.
fog
.
applyServerKnobsConfig
(
null
)
;
Glean
.
testOnly
.
cheesyString
.
set
(
str2
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
Services
.
fog
.
applyServerKnobsConfig
(
"
"
)
;
const
str3
=
"
another
cheesy
string
v3
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str3
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
function
test_fog_metrics_disabled_reset_fog_behavior
(
)
{
const
str1
=
"
a
cheesy
string
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str1
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
const
feature_config
=
{
metrics_enabled
:
{
"
test_only
.
cheesy_string
"
:
false
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
const
str2
=
"
another
cheesy
string
!
"
;
Glean
.
testOnly
.
cheesyString
.
set
(
str2
)
;
Assert
.
equal
(
str1
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
Glean
.
testOnly
.
cheesyString
.
set
(
str2
)
;
Assert
.
equal
(
str2
Glean
.
testOnly
.
cheesyString
.
testGetValue
(
"
test
-
ping
"
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
)
;
add_task
(
function
test_fog_metrics_disabled_ping
(
)
{
Assert
.
ok
(
"
disabledPing
"
in
GleanPings
)
;
Glean
.
testOnly
.
disabledCounter
.
add
(
1
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
disabledCounter
.
testGetValue
(
)
)
;
let
feature_config
=
{
pings_enabled
:
{
"
disabled
-
ping
"
:
true
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
Glean
.
testOnly
.
disabledCounter
.
add
(
2
)
;
Assert
.
equal
(
2
Glean
.
testOnly
.
disabledCounter
.
testGetValue
(
)
)
;
GleanPings
.
disabledPing
.
submit
(
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
disabledCounter
.
testGetValue
(
)
)
;
feature_config
=
{
pings_enabled
:
{
"
disabled
-
ping
"
:
false
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
Glean
.
testOnly
.
disabledCounter
.
add
(
3
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
disabledCounter
.
testGetValue
(
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
)
;
add_task
(
function
test_fog_metrics_collection_disabled_pings_cannot_be_serverknobs_controlled
(
)
{
Assert
.
ok
(
"
collectionDisabledPing
"
in
GleanPings
)
;
Glean
.
testOnly
.
collectionDisabledCounter
.
add
(
1
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
collectionDisabledCounter
.
testGetValue
(
)
)
;
let
feature_config
=
{
pings_enabled
:
{
"
collection
-
disabled
-
ping
"
:
true
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
Glean
.
testOnly
.
collectionDisabledCounter
.
add
(
2
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
collectionDisabledCounter
.
testGetValue
(
)
)
;
GleanPings
.
collectionDisabledPing
.
setEnabled
(
true
)
;
Glean
.
testOnly
.
collectionDisabledCounter
.
add
(
3
)
;
Assert
.
equal
(
3
Glean
.
testOnly
.
collectionDisabledCounter
.
testGetValue
(
)
)
;
GleanPings
.
collectionDisabledPing
.
submit
(
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
collectionDisabledCounter
.
testGetValue
(
)
)
;
feature_config
=
{
pings_enabled
:
{
"
collection
-
disabled
-
ping
"
:
false
}
}
;
Services
.
fog
.
applyServerKnobsConfig
(
JSON
.
stringify
(
feature_config
)
)
;
Glean
.
testOnly
.
collectionDisabledCounter
.
add
(
4
)
;
Assert
.
equal
(
4
Glean
.
testOnly
.
collectionDisabledCounter
.
testGetValue
(
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
)
;
