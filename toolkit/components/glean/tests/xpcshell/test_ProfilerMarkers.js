"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
ProfilerTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
ProfilerTestUtils
.
sys
.
mjs
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
add_setup
(
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
"
android
"
}
function
test_setup
(
)
{
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
}
)
;
async
function
runWithProfilerAndGetMarkers
(
type
func
)
{
await
ProfilerTestUtils
.
startProfiler
(
{
entries
:
10000
interval
:
10
features
:
[
"
nostacksampling
"
]
threads
:
[
"
GeckoMain
"
]
}
)
;
Assert
.
ok
(
Services
.
profiler
.
IsActive
(
)
)
;
await
func
(
)
;
let
profile
=
await
ProfilerTestUtils
.
stopNowAndGetProfile
(
)
;
Assert
.
equal
(
profile
.
threads
.
length
1
"
We
should
only
be
profiling
one
thread
"
)
;
let
markers
=
ProfilerTestUtils
.
getPayloadsOfType
(
profile
.
threads
[
0
]
type
)
;
let
stringTable
=
profile
.
threads
[
0
]
.
stringTable
;
for
(
let
marker
of
markers
)
{
marker
.
id
=
stringTable
[
marker
.
id
]
;
}
return
markers
;
}
add_task
(
async
function
test_fog_counter_markers
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
IntLikeMetric
"
(
)
=
>
{
Glean
.
testOnly
.
badCode
.
add
(
31
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
IntLikeMetric
"
id
:
"
testOnly
.
badCode
"
val
:
31
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_string_markers
(
)
{
const
value
=
"
a
cheesy
string
!
"
;
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
StringLikeMetric
"
(
)
=
>
{
Glean
.
testOnly
.
cheesyString
.
set
(
value
)
;
Glean
.
testOnly
.
cheesyString
.
set
(
"
a
"
.
repeat
(
2048
)
)
;
}
)
;
const
truncatedLongString
=
"
a
"
.
repeat
(
1024
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
StringLikeMetric
"
id
:
"
testOnly
.
cheesyString
"
val
:
value
}
{
type
:
"
StringLikeMetric
"
id
:
"
testOnly
.
cheesyString
"
val
:
truncatedLongString
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_string_list
(
)
{
const
value
=
"
a
cheesy
string
!
"
;
const
value2
=
"
a
cheesier
string
!
"
;
const
value3
=
"
the
cheeziest
of
strings
.
"
;
const
cheeseList
=
[
value
value2
]
;
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
StringLikeMetric
"
(
)
=
>
{
Glean
.
testOnly
.
cheesyStringList
.
set
(
cheeseList
)
;
Glean
.
testOnly
.
cheesyStringList
.
add
(
value3
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
StringLikeMetric
"
id
:
"
testOnly
.
cheesyStringList
"
val
:
[
{
value
}
{
value2
}
]
}
{
type
:
"
StringLikeMetric
"
id
:
"
testOnly
.
cheesyStringList
"
val
:
value3
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_timespan
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
TimespanMetric
"
async
(
)
=
>
{
Glean
.
testOnly
.
canWeTimeIt
.
start
(
)
;
Glean
.
testOnly
.
canWeTimeIt
.
cancel
(
)
;
Glean
.
testOnly
.
canWeTimeIt
.
start
(
)
;
await
sleep
(
10
)
;
Glean
.
testOnly
.
canWeTimeIt
.
stop
(
)
;
Glean
.
testOnly
.
canWeTimeIt
.
setRaw
(
100
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
TimespanMetric
"
id
:
"
testOnly
.
canWeTimeIt
"
}
{
type
:
"
TimespanMetric
"
id
:
"
testOnly
.
canWeTimeIt
"
}
{
type
:
"
TimespanMetric
"
id
:
"
testOnly
.
canWeTimeIt
"
}
{
type
:
"
TimespanMetric
"
id
:
"
testOnly
.
canWeTimeIt
"
}
{
type
:
"
TimespanMetric
"
id
:
"
testOnly
.
canWeTimeIt
"
val
:
100
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_timespan_throws_on_stop_wout_start_but_still_records
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
TimespanMetric
"
(
)
=
>
{
Glean
.
testOnly
.
canWeTimeIt
.
stop
(
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
TimespanMetric
"
id
:
"
testOnly
.
canWeTimeIt
"
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_uuid
(
)
{
const
kTestUuid
=
"
decafdec
-
afde
-
cafd
-
ecaf
-
decafdecafde
"
;
let
generatedUuid
;
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
StringLikeMetric
"
(
)
=
>
{
Glean
.
testOnly
.
whatIdIt
.
set
(
kTestUuid
)
;
Glean
.
testOnly
.
whatIdIt
.
generateAndSet
(
)
;
generatedUuid
=
Glean
.
testOnly
.
whatIdIt
.
testGetValue
(
"
test
-
ping
"
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
StringLikeMetric
"
id
:
"
testOnly
.
whatIdIt
"
val
:
kTestUuid
}
{
type
:
"
StringLikeMetric
"
id
:
"
testOnly
.
whatIdIt
"
val
:
generatedUuid
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_datetime
(
)
{
const
value
=
new
Date
(
)
;
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
DatetimeMetric
"
(
)
=
>
{
Glean
.
testOnly
.
whatADate
.
set
(
value
.
getTime
(
)
*
1000
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
DatetimeMetric
"
id
:
"
testOnly
.
whatADate
"
time
:
value
.
toISOString
(
)
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_boolean_markers
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
BooleanMetric
"
(
)
=
>
{
Glean
.
testOnly
.
canWeFlagIt
.
set
(
false
)
;
Glean
.
testOnly
.
canWeFlagIt
.
set
(
true
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
BooleanMetric
"
id
:
"
testOnly
.
canWeFlagIt
"
val
:
false
}
{
type
:
"
BooleanMetric
"
id
:
"
testOnly
.
canWeFlagIt
"
val
:
true
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_event_markers
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
EventMetric
"
(
)
=
>
{
Glean
.
testOnlyIpc
.
noExtraEvent
.
record
(
)
;
let
extra
=
{
extra1
:
"
can
set
extras
"
extra2
:
"
passing
more
data
"
}
;
Glean
.
testOnlyIpc
.
anEvent
.
record
(
extra
)
;
let
extraWithUndef
=
{
extra1
:
undefined
extra2
:
"
defined
"
}
;
Glean
.
testOnlyIpc
.
anEvent
.
record
(
extraWithUndef
)
;
let
extra2
=
{
extra1
:
"
can
set
extras
"
extra2
:
37
extra3_longer_name
:
false
}
;
Glean
.
testOnlyIpc
.
eventWithExtra
.
record
(
extra2
)
;
let
extra5
=
{
extra4CamelCase
:
false
}
;
Glean
.
testOnlyIpc
.
eventWithExtra
.
record
(
extra5
)
;
Glean
.
testOnlyIpc
.
eventWithExtra
.
record
(
null
)
;
let
extra3
=
{
extra1_nonexistent_extra
:
"
this
does
not
crash
"
}
;
Glean
.
testOnlyIpc
.
eventWithExtra
.
record
(
extra3
)
;
Glean
.
testOnlyIpc
.
noExtraEvent
.
record
(
extra3
)
;
}
)
;
let
expected_markers
=
[
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
noExtraEvent
"
}
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
anEvent
"
extra
:
{
extra1
:
"
can
set
extras
"
extra2
:
"
passing
more
data
"
}
}
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
anEvent
"
extra
:
{
extra2
:
"
defined
"
}
}
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
eventWithExtra
"
extra
:
{
extra3_longer_name
:
"
false
"
extra2
:
"
37
"
extra1
:
"
can
set
extras
"
}
}
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
eventWithExtra
"
extra
:
{
extra4CamelCase
:
"
false
"
}
}
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
eventWithExtra
"
}
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
eventWithExtra
"
extra
:
{
extra1_nonexistent_extra
:
"
this
does
not
crash
"
}
}
{
type
:
"
EventMetric
"
id
:
"
testOnlyIpc
.
noExtraEvent
"
extra
:
{
extra1_nonexistent_extra
:
"
this
does
not
crash
"
}
}
]
;
markers
.
forEach
(
m
=
>
{
if
(
m
.
extra
!
=
=
undefined
)
{
m
.
extra
=
JSON
.
parse
(
m
.
extra
)
;
}
}
)
;
Assert
.
deepEqual
(
markers
expected_markers
)
;
}
)
;
add_task
(
async
function
test_fog_memory_distribution
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
DistMetric
"
(
)
=
>
{
Glean
.
testOnly
.
doYouRemember
.
accumulate
(
7
)
;
Glean
.
testOnly
.
doYouRemember
.
accumulate
(
17
)
;
}
)
;
let
testMarkers
=
markers
.
filter
(
marker
=
>
marker
.
id
=
=
"
testOnly
.
doYouRemember
"
)
;
Assert
.
deepEqual
(
testMarkers
[
{
type
:
"
DistMetric
"
id
:
"
testOnly
.
doYouRemember
"
sample
:
7
}
{
type
:
"
DistMetric
"
id
:
"
testOnly
.
doYouRemember
"
sample
:
17
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_custom_distribution
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
DistMetric
"
(
)
=
>
{
Glean
.
testOnlyIpc
.
aCustomDist
.
accumulateSingleSample
(
120
)
;
Glean
.
testOnlyIpc
.
aCustomDist
.
accumulateSamples
(
[
7
268435458
]
)
;
Glean
.
testOnlyIpc
.
aCustomDist
.
accumulateSamples
(
[
-
7
]
)
;
}
)
;
let
testMarkers
=
markers
.
filter
(
marker
=
>
marker
.
id
=
=
"
testOnlyIpc
.
aCustomDist
"
)
;
Assert
.
deepEqual
(
testMarkers
[
{
type
:
"
DistMetric
"
id
:
"
testOnlyIpc
.
aCustomDist
"
sample
:
120
}
{
type
:
"
DistMetric
"
id
:
"
testOnlyIpc
.
aCustomDist
"
samples
:
"
[
7
268435458
]
"
}
{
type
:
"
DistMetric
"
id
:
"
testOnlyIpc
.
aCustomDist
"
samples
:
"
[
-
7
]
"
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_timing_distribution
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
TimingDist
"
async
(
)
=
>
{
let
t1
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
let
t2
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
await
sleep
(
5
)
;
let
t3
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
cancel
(
t1
)
;
await
sleep
(
5
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
stopAndAccumulate
(
t2
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
stopAndAccumulate
(
t3
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
accumulateSingleSample
(
5000
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
accumulateSamples
(
[
2000
8000
]
)
;
}
)
;
let
testMarkers
=
markers
.
filter
(
marker
=
>
marker
.
id
=
=
"
testOnly
.
whatTimeIsIt
"
)
;
Assert
.
deepEqual
(
testMarkers
[
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
timer_id
:
1
}
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
timer_id
:
2
}
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
timer_id
:
3
}
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
timer_id
:
1
}
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
timer_id
:
2
}
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
timer_id
:
3
}
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
sample
:
"
5000
"
}
{
type
:
"
TimingDist
"
id
:
"
testOnly
.
whatTimeIsIt
"
samples
:
"
[
2000
8000
]
"
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_quantity
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
IntLikeMetric
"
(
)
=
>
{
Glean
.
testOnly
.
meaningOfLife
.
set
(
42
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
IntLikeMetric
"
id
:
"
testOnly
.
meaningOfLife
"
val
:
42
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_rate
(
)
{
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
IntLikeMetric
"
(
)
=
>
{
Glean
.
testOnlyIpc
.
irate
.
addToNumerator
(
22
)
;
Glean
.
testOnlyIpc
.
irate
.
addToDenominator
(
7
)
;
Glean
.
testOnlyIpc
.
anExternalDenominator
.
add
(
11
)
;
Glean
.
testOnlyIpc
.
rateWithExternalDenominator
.
addToNumerator
(
121
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
IntLikeMetric
"
id
:
"
testOnlyIpc
.
irate
"
val
:
22
}
{
type
:
"
IntLikeMetric
"
id
:
"
testOnlyIpc
.
irate
"
val
:
7
}
{
type
:
"
IntLikeMetric
"
id
:
"
testOnlyIpc
.
anExternalDenominator
"
val
:
11
}
{
type
:
"
IntLikeMetric
"
id
:
"
testOnlyIpc
.
rateWithExternalDenominator
"
val
:
121
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_url
(
)
{
const
value
=
"
https
:
/
/
www
.
example
.
com
/
fog
"
;
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
UrlMetric
"
(
)
=
>
{
Glean
.
testOnlyIpc
.
aUrl
.
set
(
value
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
UrlMetric
"
id
:
"
testOnlyIpc
.
aUrl
"
val
:
value
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_text
(
)
{
const
value
=
"
Before
the
risin
'
sun
we
fly
So
many
roads
to
choose
We
'
ll
start
out
walkin
'
and
learn
to
run
(
We
'
ve
only
just
begun
)
"
;
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
StringLikeMetric
"
(
)
=
>
{
Glean
.
testOnlyIpc
.
aText
.
set
(
value
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
StringLikeMetric
"
id
:
"
testOnlyIpc
.
aText
"
val
:
value
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_text_unusual_character
(
)
{
const
value
=
"
The
secret
to
Dominique
Ansel
'
s
viennoiserie
is
the
use
of
Isigny
Sainte
-
M
re
butter
and
Les
Grands
Moulins
de
Paris
flour
"
;
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
StringLikeMetric
"
(
)
=
>
{
Glean
.
testOnlyIpc
.
aText
.
set
(
value
)
;
}
)
;
Assert
.
deepEqual
(
markers
[
{
type
:
"
StringLikeMetric
"
id
:
"
testOnlyIpc
.
aText
"
val
:
value
}
]
)
;
}
)
;
add_task
(
async
function
test_fog_object_markers
(
)
{
if
(
!
Glean
.
testOnly
.
balloons
)
{
return
;
}
let
markers
=
await
runWithProfilerAndGetMarkers
(
"
ObjectMetric
"
(
)
=
>
{
let
balloons
=
[
{
colour
:
"
red
"
diameter
:
5
}
{
colour
:
"
blue
"
diameter
:
7
}
{
colour
:
"
orange
"
}
]
;
Glean
.
testOnly
.
balloons
.
set
(
balloons
)
;
balloons
=
[
{
colour
:
"
inf
"
diameter
:
Infinity
}
{
colour
:
"
negative
-
inf
"
diameter
:
-
1
/
0
}
{
colour
:
"
nan
"
diameter
:
NaN
}
{
colour
:
"
undef
"
diameter
:
undefined
}
]
;
Glean
.
testOnly
.
balloons
.
set
(
balloons
)
;
let
invalid
=
[
{
color
:
"
orange
"
}
{
color
:
"
red
"
diameter
:
"
small
"
}
]
;
Glean
.
testOnly
.
balloons
.
set
(
invalid
)
;
Services
.
fog
.
testResetFOG
(
)
;
balloons
=
[
{
colour
:
"
red
"
diameter
:
5
}
{
colour
:
"
blue
"
diameter
:
7
}
]
;
Glean
.
testOnly
.
balloons
.
set
(
balloons
)
;
invalid
=
[
{
colour
:
"
red
"
diameter
:
5
extra
:
"
field
"
}
]
;
Glean
.
testOnly
.
balloons
.
set
(
invalid
)
;
Glean
.
testOnly
.
crashStack
.
set
(
{
}
)
;
let
stack
=
{
status
:
"
OK
"
crash_info
:
{
typ
:
"
main
"
address
:
"
0xf001ba11
"
crashing_thread
:
1
}
main_module
:
0
modules
:
[
{
base_addr
:
"
0x00000000
"
end_addr
:
"
0x00004000
"
}
]
}
;
Glean
.
testOnly
.
crashStack
.
set
(
stack
)
;
stack
=
{
status
:
"
OK
"
modules
:
[
{
base_addr
:
"
0x00000000
"
end_addr
:
"
0x00004000
"
}
]
}
;
Glean
.
testOnly
.
crashStack
.
set
(
stack
)
;
stack
=
{
status
:
"
OK
"
modules
:
[
]
}
;
Glean
.
testOnly
.
crashStack
.
set
(
stack
)
;
stack
=
{
status
:
"
OK
"
}
;
Glean
.
testOnly
.
crashStack
.
set
(
stack
)
;
}
)
;
let
expected_markers
=
[
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
balloons
"
value
:
[
{
colour
:
"
red
"
diameter
:
5
}
{
colour
:
"
blue
"
diameter
:
7
}
{
colour
:
"
orange
"
}
]
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
balloons
"
value
:
[
{
colour
:
"
inf
"
diameter
:
null
}
{
colour
:
"
negative
-
inf
"
diameter
:
null
}
{
colour
:
"
nan
"
diameter
:
null
}
{
colour
:
"
undef
"
}
]
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
balloons
"
value
:
[
{
color
:
"
orange
"
}
{
color
:
"
red
"
diameter
:
"
small
"
}
]
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
balloons
"
value
:
[
{
colour
:
"
red
"
diameter
:
5
}
{
colour
:
"
blue
"
diameter
:
7
}
]
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
balloons
"
value
:
[
{
colour
:
"
red
"
diameter
:
5
extra
:
"
field
"
}
]
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
crashStack
"
value
:
{
}
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
crashStack
"
value
:
{
status
:
"
OK
"
crash_info
:
{
typ
:
"
main
"
address
:
"
0xf001ba11
"
crashing_thread
:
1
}
main_module
:
0
modules
:
[
{
base_addr
:
"
0x00000000
"
end_addr
:
"
0x00004000
"
}
]
}
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
crashStack
"
value
:
{
status
:
"
OK
"
modules
:
[
{
base_addr
:
"
0x00000000
"
end_addr
:
"
0x00004000
"
}
]
}
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
crashStack
"
value
:
{
status
:
"
OK
"
modules
:
[
]
}
}
{
type
:
"
ObjectMetric
"
id
:
"
testOnly
.
crashStack
"
value
:
{
status
:
"
OK
"
}
}
]
;
markers
.
forEach
(
m
=
>
{
if
(
m
.
value
!
=
=
undefined
)
{
m
.
value
=
JSON
.
parse
(
m
.
value
)
;
}
}
)
;
Assert
.
deepEqual
(
markers
expected_markers
)
;
}
)
;
