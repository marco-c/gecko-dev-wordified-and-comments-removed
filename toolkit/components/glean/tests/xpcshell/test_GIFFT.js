"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
)
;
const
Telemetry
=
Services
.
telemetry
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
function
scalarValue
(
aScalarName
)
{
let
snapshot
=
Telemetry
.
getSnapshotForScalars
(
)
;
return
"
parent
"
in
snapshot
?
snapshot
.
parent
[
aScalarName
]
:
undefined
;
}
function
keyedScalarValue
(
aScalarName
)
{
let
snapshot
=
Telemetry
.
getSnapshotForKeyedScalars
(
)
;
return
"
parent
"
in
snapshot
?
snapshot
.
parent
[
aScalarName
]
:
undefined
;
}
add_setup
(
function
test_setup
(
)
{
do_get_profile
(
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
telemetry
.
testing
.
overrideProductsCheck
"
true
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Services
.
fog
.
initializeFOG
(
)
;
}
}
)
;
add_task
(
function
test_gifft_counter
(
)
{
Glean
.
testOnlyIpc
.
aCounter
.
add
(
20
)
;
Assert
.
equal
(
20
Glean
.
testOnlyIpc
.
aCounter
.
testGetValue
(
)
)
;
Assert
.
equal
(
20
scalarValue
(
"
telemetry
.
test
.
mirror_for_counter
"
)
)
;
}
)
;
add_task
(
function
test_gifft_boolean
(
)
{
Glean
.
testOnlyIpc
.
aBool
.
set
(
false
)
;
Assert
.
equal
(
false
Glean
.
testOnlyIpc
.
aBool
.
testGetValue
(
)
)
;
Assert
.
equal
(
false
scalarValue
(
"
telemetry
.
test
.
boolean_kind
"
)
)
;
}
)
;
add_task
(
function
test_gifft_datetime
(
)
{
const
dateStr
=
"
2021
-
03
-
22T16
:
06
:
00
"
;
const
value
=
new
Date
(
dateStr
)
;
Glean
.
testOnlyIpc
.
aDate
.
set
(
value
.
getTime
(
)
*
1000
)
;
let
received
=
Glean
.
testOnlyIpc
.
aDate
.
testGetValue
(
)
;
Assert
.
equal
(
value
.
getTime
(
)
received
.
getTime
(
)
)
;
Assert
.
ok
(
scalarValue
(
"
telemetry
.
test
.
mirror_for_date
"
)
.
startsWith
(
dateStr
)
)
;
}
)
;
add_task
(
function
test_gifft_string
(
)
{
const
value
=
"
a
string
!
"
;
Glean
.
testOnlyIpc
.
aString
.
set
(
value
)
;
Assert
.
equal
(
value
Glean
.
testOnlyIpc
.
aString
.
testGetValue
(
)
)
;
Assert
.
equal
(
value
scalarValue
(
"
telemetry
.
test
.
multiple_stores_string
"
)
)
;
}
)
;
add_task
(
function
test_gifft_memory_dist
(
)
{
Glean
.
testOnlyIpc
.
aMemoryDist
.
accumulate
(
7
)
;
Glean
.
testOnlyIpc
.
aMemoryDist
.
accumulate
(
17
)
;
let
data
=
Glean
.
testOnlyIpc
.
aMemoryDist
.
testGetValue
(
)
;
Assert
.
equal
(
24
*
1024
data
.
sum
"
Sum
'
s
correct
"
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
Assert
.
ok
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
6888
|
|
bucket
=
=
17109
)
)
Only
two
buckets
have
a
sample
{
bucket
}
{
count
}
)
;
}
data
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_TEST_LINEAR
"
)
.
snapshot
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_TEST_LINEAR
"
)
.
clear
(
)
;
Assert
.
equal
(
24
data
.
sum
"
Histogram
'
s
in
memory_unit
units
"
)
;
Assert
.
equal
(
2
data
.
values
[
"
1
"
]
"
Both
samples
in
a
low
bucket
"
)
;
Glean
.
testOnlyIpc
.
aMemoryDist
.
accumulate
(
36893488147419103232
)
;
let
dubiousValue
=
Object
.
entries
(
Glean
.
testOnlyIpc
.
aMemoryDist
.
testGetValue
(
)
.
values
)
[
0
]
[
1
]
;
Assert
.
equal
(
dubiousValue
1
"
Greater
than
64
-
Byte
number
did
not
accumulate
correctly
"
)
;
Glean
.
testOnlyIpc
.
aMemoryDist
.
accumulate
(
Math
.
pow
(
2
31
)
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
aMemoryDist
.
testGetValue
(
)
/
DataError
/
"
Did
not
accumulate
correctly
"
)
;
}
)
;
add_task
(
function
test_gifft_custom_dist
(
)
{
Glean
.
testOnlyIpc
.
aCustomDist
.
accumulateSamples
(
[
7
268435458
]
)
;
let
data
=
Glean
.
testOnlyIpc
.
aCustomDist
.
testGetValue
(
)
;
Assert
.
equal
(
7
+
268435458
data
.
sum
"
Sum
'
s
correct
"
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
Assert
.
ok
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
1
|
|
bucket
=
=
268435456
)
)
Only
two
buckets
have
a
sample
{
bucket
}
{
count
}
)
;
}
data
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_TEST_MIRROR_FOR_CUSTOM
"
)
.
snapshot
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_TEST_MIRROR_FOR_CUSTOM
"
)
.
clear
(
)
;
Assert
.
equal
(
7
+
268435458
data
.
sum
"
Sum
in
histogram
is
correct
"
)
;
Assert
.
equal
(
1
data
.
values
[
"
1
"
]
"
One
sample
in
the
low
bucket
"
)
;
Assert
.
equal
(
1
data
.
values
[
"
268435457
"
]
"
One
sample
in
the
next
bucket
"
)
;
}
)
;
add_task
(
async
function
test_gifft_timing_dist
(
)
{
let
t1
=
Glean
.
testOnlyIpc
.
aTimingDist
.
start
(
)
;
let
ot1
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
let
t2
=
Glean
.
testOnlyIpc
.
aTimingDist
.
start
(
)
;
let
ot2
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
cancel
(
ot1
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
cancel
(
ot2
)
;
await
sleep
(
5
)
;
let
t3
=
Glean
.
testOnlyIpc
.
aTimingDist
.
start
(
)
;
Glean
.
testOnlyIpc
.
aTimingDist
.
cancel
(
t1
)
;
await
sleep
(
5
)
;
Glean
.
testOnlyIpc
.
aTimingDist
.
stopAndAccumulate
(
t2
)
;
Glean
.
testOnlyIpc
.
aTimingDist
.
stopAndAccumulate
(
t3
)
;
let
data
=
Glean
.
testOnlyIpc
.
aTimingDist
.
testGetValue
(
)
;
const
NANOS_IN_MILLIS
=
1e6
;
const
EPSILON
=
40000
;
Assert
.
greater
(
data
.
sum
13
*
NANOS_IN_MILLIS
-
EPSILON
)
;
Assert
.
equal
(
2
Object
.
entries
(
data
.
values
)
.
reduce
(
(
acc
[
count
]
)
=
>
acc
+
count
0
)
"
Only
two
buckets
with
samples
"
)
;
data
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_TEST_EXPONENTIAL
"
)
.
snapshot
(
)
;
Assert
.
greaterOrEqual
(
data
.
sum
13
"
Histogram
'
s
in
milliseconds
"
)
;
Assert
.
equal
(
2
Object
.
entries
(
data
.
values
)
.
reduce
(
(
acc
[
count
]
)
=
>
acc
+
count
0
)
"
Only
two
samples
"
)
;
}
)
;
add_task
(
function
test_gifft_string_list_works
(
)
{
const
value
=
"
a
string
!
"
;
const
value2
=
"
another
string
!
"
;
const
value3
=
"
yet
another
string
.
"
;
Glean
.
testOnlyIpc
.
aStringList
.
add
(
value
)
;
Glean
.
testOnlyIpc
.
aStringList
.
add
(
value2
)
;
Glean
.
testOnlyIpc
.
aStringList
.
add
(
value3
)
;
let
val
=
Glean
.
testOnlyIpc
.
aStringList
.
testGetValue
(
)
;
Assert
.
deepEqual
(
[
value
value2
value3
]
val
)
;
val
=
keyedScalarValue
(
"
telemetry
.
test
.
keyed_boolean_kind
"
)
;
Assert
.
deepEqual
(
{
[
value
]
:
true
[
value2
]
:
true
[
value3
]
:
true
}
val
)
;
}
)
;
add_task
(
function
test_gifft_events
(
)
{
Telemetry
.
setEventRecordingEnabled
(
"
telemetry
.
test
"
true
)
;
Glean
.
testOnlyIpc
.
noExtraEvent
.
record
(
)
;
var
events
=
Glean
.
testOnlyIpc
.
noExtraEvent
.
testGetValue
(
)
;
Assert
.
equal
(
1
events
.
length
)
;
Assert
.
equal
(
"
test_only
.
ipc
"
events
[
0
]
.
category
)
;
Assert
.
equal
(
"
no_extra_event
"
events
[
0
]
.
name
)
;
let
extra
=
{
value
:
"
a
value
for
Telemetry
"
extra1
:
"
can
set
extras
"
extra2
:
"
passing
more
data
"
}
;
let
{
extra1
extra2
}
=
extra
;
let
telExtra
=
{
extra1
extra2
}
;
Glean
.
testOnlyIpc
.
anEvent
.
record
(
extra
)
;
events
=
Glean
.
testOnlyIpc
.
anEvent
.
testGetValue
(
)
;
Assert
.
equal
(
1
events
.
length
)
;
Assert
.
equal
(
"
test_only
.
ipc
"
events
[
0
]
.
category
)
;
Assert
.
equal
(
"
an_event
"
events
[
0
]
.
name
)
;
Assert
.
deepEqual
(
extra
events
[
0
]
.
extra
)
;
TelemetryTestUtils
.
assertEvents
(
[
[
"
telemetry
.
test
"
"
not_expired_optout
"
"
object1
"
undefined
undefined
]
[
"
telemetry
.
test
"
"
mirror_with_extra
"
"
object1
"
extra
.
value
telExtra
]
]
{
category
:
"
telemetry
.
test
"
}
)
;
}
)
;
add_task
(
function
test_gifft_uuid
(
)
{
const
kTestUuid
=
"
decafdec
-
afde
-
cafd
-
ecaf
-
decafdecafde
"
;
Glean
.
testOnlyIpc
.
aUuid
.
set
(
kTestUuid
)
;
Assert
.
equal
(
kTestUuid
Glean
.
testOnlyIpc
.
aUuid
.
testGetValue
(
)
)
;
Assert
.
equal
(
kTestUuid
scalarValue
(
"
telemetry
.
test
.
string_kind
"
)
)
;
}
)
;
add_task
(
function
test_gifft_labeled_counter
(
)
{
Assert
.
equal
(
undefined
Glean
.
testOnlyIpc
.
aLabeledCounter
.
a_label
.
testGetValue
(
)
"
New
labels
with
no
values
should
return
undefined
"
)
;
Glean
.
testOnlyIpc
.
aLabeledCounter
.
a_label
.
add
(
1
)
;
Glean
.
testOnlyIpc
.
aLabeledCounter
.
another_label
.
add
(
2
)
;
Glean
.
testOnlyIpc
.
aLabeledCounter
.
a_label
.
add
(
3
)
;
Assert
.
equal
(
4
Glean
.
testOnlyIpc
.
aLabeledCounter
.
a_label
.
testGetValue
(
)
)
;
Assert
.
equal
(
2
Glean
.
testOnlyIpc
.
aLabeledCounter
.
another_label
.
testGetValue
(
)
)
;
Assert
.
equal
(
undefined
Glean
.
testOnlyIpc
.
aLabeledCounter
.
__other__
.
testGetValue
(
)
)
;
Glean
.
testOnlyIpc
.
aLabeledCounter
[
"
1
"
.
repeat
(
72
)
]
.
add
(
3
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
aLabeledCounter
.
__other__
.
testGetValue
(
)
/
DataError
/
"
Can
'
t
get
the
value
when
you
'
re
error
'
d
"
)
;
let
value
=
keyedScalarValue
(
"
telemetry
.
test
.
another_mirror_for_labeled_counter
"
)
;
Assert
.
deepEqual
(
{
a_label
:
4
another_label
:
2
[
"
1
"
.
repeat
(
72
)
]
:
3
}
value
)
;
}
)
;
add_task
(
async
function
test_gifft_timespan
(
)
{
Glean
.
testOnly
.
mirrorTime
.
start
(
)
;
await
sleep
(
10
)
;
Glean
.
testOnly
.
mirrorTime
.
stop
(
)
;
const
NANOS_IN_MILLIS
=
1e6
;
const
EPSILON
=
40000
;
Assert
.
greater
(
Glean
.
testOnly
.
mirrorTime
.
testGetValue
(
)
10
*
NANOS_IN_MILLIS
-
EPSILON
)
;
Assert
.
greaterOrEqual
(
scalarValue
(
"
telemetry
.
test
.
mirror_for_timespan
"
)
9
)
;
}
)
;
add_task
(
async
function
test_gifft_timespan_raw
(
)
{
Glean
.
testOnly
.
mirrorTimeNanos
.
setRaw
(
15
)
;
Assert
.
equal
(
15
Glean
.
testOnly
.
mirrorTimeNanos
.
testGetValue
(
)
)
;
Assert
.
equal
(
scalarValue
(
"
telemetry
.
test
.
mirror_for_timespan_nanos
"
)
15
)
;
}
)
;
add_task
(
async
function
test_gifft_labeled_boolean
(
)
{
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mirrorsForLabeledBools
.
a_label
.
testGetValue
(
)
"
New
labels
with
no
values
should
return
undefined
"
)
;
Glean
.
testOnly
.
mirrorsForLabeledBools
.
a_label
.
set
(
true
)
;
Glean
.
testOnly
.
mirrorsForLabeledBools
.
another_label
.
set
(
false
)
;
Assert
.
equal
(
true
Glean
.
testOnly
.
mirrorsForLabeledBools
.
a_label
.
testGetValue
(
)
)
;
Assert
.
equal
(
false
Glean
.
testOnly
.
mirrorsForLabeledBools
.
another_label
.
testGetValue
(
)
)
;
Assert
.
equal
(
undefined
Glean
.
testOnly
.
mirrorsForLabeledBools
.
__other__
.
testGetValue
(
)
)
;
Glean
.
testOnly
.
mirrorsForLabeledBools
[
"
1
"
.
repeat
(
72
)
]
.
set
(
true
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
mirrorsForLabeledBools
.
__other__
.
testGetValue
(
)
/
DataError
/
"
Should
throw
because
of
a
recording
error
.
"
)
;
let
value
=
keyedScalarValue
(
"
telemetry
.
test
.
mirror_for_labeled_bool
"
)
;
Assert
.
deepEqual
(
{
a_label
:
true
another_label
:
false
[
"
1
"
.
repeat
(
72
)
]
:
true
}
value
)
;
}
)
;
add_task
(
function
test_gifft_boolean
(
)
{
Glean
.
testOnly
.
meaningOfLife
.
set
(
42
)
;
Assert
.
equal
(
42
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
)
)
;
Assert
.
equal
(
42
scalarValue
(
"
telemetry
.
test
.
mirror_for_quantity
"
)
)
;
}
)
;
add_task
(
function
test_gifft_rate
(
)
{
Glean
.
testOnlyIpc
.
irate
.
addToNumerator
(
22
)
;
Glean
.
testOnlyIpc
.
irate
.
addToDenominator
(
7
)
;
Assert
.
deepEqual
(
{
numerator
:
22
denominator
:
7
}
Glean
.
testOnlyIpc
.
irate
.
testGetValue
(
)
)
;
Assert
.
deepEqual
(
{
numerator
:
22
denominator
:
7
}
keyedScalarValue
(
"
telemetry
.
test
.
mirror_for_rate
"
)
)
;
}
)
;
add_task
(
function
test_gifft_numeric_limits
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
true
)
;
Services
.
telemetry
.
getSnapshotForScalars
(
"
main
"
true
)
;
Services
.
telemetry
.
getSnapshotForKeyedScalars
(
"
main
"
true
)
;
Glean
.
testOnlyIpc
.
aCounter
.
add
(
-
20
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
aCounter
.
testGetValue
(
)
/
DataError
/
"
Can
'
t
get
the
value
when
you
'
re
error
'
d
"
)
;
Assert
.
equal
(
undefined
scalarValue
(
"
telemetry
.
test
.
mirror_for_counter
"
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
Glean
.
testOnlyIpc
.
aCounter
.
add
(
Math
.
pow
(
2
31
)
-
1
)
;
Glean
.
testOnlyIpc
.
aCounter
.
add
(
1
)
;
Glean
.
testOnlyIpc
.
aCounter
.
add
(
Math
.
pow
(
2
31
)
-
1
)
;
Glean
.
testOnlyIpc
.
aCounter
.
add
(
2
)
;
Assert
.
equal
(
Math
.
pow
(
2
31
)
-
1
Glean
.
testOnlyIpc
.
aCounter
.
testGetValue
(
)
)
;
Assert
.
equal
(
1
scalarValue
(
"
telemetry
.
test
.
mirror_for_counter
"
)
)
;
Glean
.
testOnly
.
meaningOfLife
.
set
(
-
42
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
)
/
DataError
/
"
Can
'
t
get
the
value
when
you
'
re
error
'
d
"
)
;
Assert
.
equal
(
undefined
scalarValue
(
"
telemetry
.
test
.
mirror_for_quantity
"
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
Glean
.
testOnly
.
meaningOfLife
.
set
(
Math
.
pow
(
2
32
)
)
;
Assert
.
equal
(
Math
.
pow
(
2
32
)
Glean
.
testOnly
.
meaningOfLife
.
testGetValue
(
)
)
;
Assert
.
equal
(
Math
.
pow
(
2
32
)
-
1
scalarValue
(
"
telemetry
.
test
.
mirror_for_quantity
"
)
)
;
Glean
.
testOnlyIpc
.
irate
.
addToNumerator
(
-
22
)
;
Glean
.
testOnlyIpc
.
irate
.
addToDenominator
(
7
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
irate
.
testGetValue
(
)
/
DataError
/
"
Can
'
t
get
the
value
when
you
'
re
error
'
d
"
)
;
Assert
.
deepEqual
(
{
denominator
:
7
}
keyedScalarValue
(
"
telemetry
.
test
.
mirror_for_rate
"
)
)
;
Services
.
fog
.
testResetFOG
(
)
;
Services
.
telemetry
.
getSnapshotForKeyedScalars
(
"
main
"
true
)
;
Glean
.
testOnlyIpc
.
irate
.
addToNumerator
(
22
)
;
Glean
.
testOnlyIpc
.
irate
.
addToDenominator
(
-
7
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
irate
.
testGetValue
(
)
/
DataError
/
"
Can
'
t
get
the
value
when
you
'
re
error
'
d
"
)
;
Assert
.
deepEqual
(
{
numerator
:
22
}
keyedScalarValue
(
"
telemetry
.
test
.
mirror_for_rate
"
)
)
;
Glean
.
testOnlyIpc
.
aTimingDist
.
testAccumulateRawMillis
(
Math
.
pow
(
2
31
)
+
1
)
;
Glean
.
testOnlyIpc
.
aTimingDist
.
testAccumulateRawMillis
(
Math
.
pow
(
2
32
)
+
1
)
;
Assert
.
throws
(
(
)
=
>
Glean
.
testOnlyIpc
.
aTimingDist
.
testGetValue
(
)
/
DataError
/
"
Can
'
t
get
the
value
when
you
'
re
error
'
d
"
)
;
let
snapshot
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_TEST_EXPONENTIAL
"
)
.
snapshot
(
)
;
Assert
.
equal
(
snapshot
.
values
[
"
2147483646
"
]
2
"
samples
>
i32
:
:
max
should
end
up
in
the
top
bucket
"
)
;
}
)
;
add_task
(
function
test_gifft_url
(
)
{
const
value
=
"
https
:
/
/
www
.
example
.
com
"
;
Glean
.
testOnlyIpc
.
aUrl
.
set
(
value
)
;
Assert
.
equal
(
value
Glean
.
testOnlyIpc
.
aUrl
.
testGetValue
(
)
)
;
Assert
.
equal
(
value
scalarValue
(
"
telemetry
.
test
.
mirror_for_url
"
)
)
;
}
)
;
add_task
(
function
test_gifft_url_cropped
(
)
{
const
value
=
https
:
/
/
example
.
com
{
"
/
test
"
.
repeat
(
47
)
}
;
Glean
.
testOnlyIpc
.
aUrl
.
set
(
value
)
;
Assert
.
equal
(
value
Glean
.
testOnlyIpc
.
aUrl
.
testGetValue
(
)
)
;
Assert
.
equal
(
value
.
substring
(
0
50
)
scalarValue
(
"
telemetry
.
test
.
mirror_for_url
"
)
)
;
}
)
;
add_task
(
function
test_gifft_labeled_custom_dist
(
)
{
Glean
.
testOnly
.
mabelsCustomLabelLengths
.
rubbermaid
.
accumulateSamples
(
[
7
268435458
]
)
;
let
data
=
Glean
.
testOnly
.
mabelsCustomLabelLengths
.
rubbermaid
.
testGetValue
(
)
;
Assert
.
equal
(
7
+
268435458
data
.
sum
"
Sum
'
s
correct
"
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
Assert
.
ok
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
1
|
|
bucket
=
=
268435456
)
)
Only
two
buckets
have
a
sample
{
bucket
}
{
count
}
)
;
}
data
=
Telemetry
.
getKeyedHistogramById
(
"
TELEMETRY_TEST_KEYED_LINEAR
"
)
.
snapshot
(
)
;
Telemetry
.
getKeyedHistogramById
(
"
TELEMETRY_TEST_KEYED_LINEAR
"
)
.
clear
(
)
;
Assert
.
ok
(
"
rubbermaid
"
in
data
"
Mirror
has
key
"
)
;
Assert
.
equal
(
7
+
268435458
data
.
rubbermaid
.
sum
"
Sum
in
histogram
is
correct
"
)
;
Assert
.
equal
(
1
data
.
rubbermaid
.
values
[
"
1
"
]
"
One
sample
in
the
low
bucket
"
)
;
Assert
.
equal
(
1
data
.
rubbermaid
.
values
[
"
250000
"
]
"
One
sample
in
the
high
bucket
"
)
;
}
)
;
add_task
(
function
test_gifft_labeled_memory_dist
(
)
{
Glean
.
testOnly
.
whatDoYouRemember
.
childhood
.
accumulate
(
7
)
;
Glean
.
testOnly
.
whatDoYouRemember
.
childhood
.
accumulate
(
17
)
;
let
data
=
Glean
.
testOnly
.
whatDoYouRemember
.
childhood
.
testGetValue
(
)
;
Assert
.
equal
(
24
*
1024
*
1024
data
.
sum
"
Sum
'
s
correct
"
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
Assert
.
ok
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
7053950
|
|
bucket
=
=
17520006
)
)
Only
two
buckets
have
a
sample
{
bucket
}
{
count
}
)
;
}
data
=
Telemetry
.
getKeyedHistogramById
(
"
TELEMETRY_TEST_MIRROR_FOR_LABELED_MEMORY
"
)
.
snapshot
(
)
;
Telemetry
.
getKeyedHistogramById
(
"
TELEMETRY_TEST_MIRROR_FOR_LABELED_MEMORY
"
)
.
clear
(
)
;
Assert
.
ok
(
"
childhood
"
in
data
"
Key
'
s
present
"
)
;
Assert
.
equal
(
24
data
.
childhood
.
sum
"
Histogram
'
s
in
memory_unit
units
"
)
;
Assert
.
equal
(
2
data
.
childhood
.
values
[
"
1
"
]
"
Both
samples
in
a
low
bucket
"
)
;
}
)
;
add_task
(
async
function
test_gifft_labeled_timing_dist
(
)
{
let
t1
=
Glean
.
testOnly
.
whereHasTheTimeGone
[
"
down
the
drain
"
]
.
start
(
)
;
let
t2
=
Glean
.
testOnly
.
whereHasTheTimeGone
[
"
down
the
drain
"
]
.
start
(
)
;
await
sleep
(
5
)
;
let
t3
=
Glean
.
testOnly
.
whereHasTheTimeGone
[
"
down
the
drain
"
]
.
start
(
)
;
Glean
.
testOnly
.
whereHasTheTimeGone
[
"
down
the
drain
"
]
.
cancel
(
t1
)
;
await
sleep
(
5
)
;
Glean
.
testOnly
.
whereHasTheTimeGone
[
"
down
the
drain
"
]
.
stopAndAccumulate
(
t2
)
;
Glean
.
testOnly
.
whereHasTheTimeGone
[
"
down
the
drain
"
]
.
stopAndAccumulate
(
t3
)
;
let
data
=
Glean
.
testOnly
.
whereHasTheTimeGone
[
"
down
the
drain
"
]
.
testGetValue
(
)
;
const
NANOS_IN_MILLIS
=
1e6
;
const
EPSILON
=
40000
;
Assert
.
greater
(
data
.
sum
13
*
NANOS_IN_MILLIS
-
EPSILON
)
;
Assert
.
equal
(
2
Object
.
entries
(
data
.
values
)
.
reduce
(
(
acc
[
count
]
)
=
>
acc
+
count
0
)
"
Only
two
buckets
with
samples
"
)
;
data
=
Telemetry
.
getKeyedHistogramById
(
"
TELEMETRY_TEST_MIRROR_FOR_LABELED_TIMING
"
)
.
snapshot
(
)
;
info
(
JSON
.
stringify
(
data
)
)
;
Assert
.
ok
(
"
down
the
drain
"
in
data
"
Has
the
key
"
)
;
data
=
data
[
"
down
the
drain
"
]
;
Assert
.
greaterOrEqual
(
data
.
sum
13
"
Histogram
'
s
in
milliseconds
"
)
;
Assert
.
equal
(
2
Object
.
entries
(
data
.
values
)
.
reduce
(
(
acc
[
count
]
)
=
>
acc
+
count
0
)
"
Only
two
samples
"
)
;
}
)
;
