#
-
*
-
coding
:
utf
-
8
-
*
-
import
cpp
import
js
import
re
import
rust
import
sys
from
glean_parser
import
lint
parser
util
from
pathlib
import
Path
def
get_parser_options
(
moz_app_version
)
:
    
app_version_major
=
moz_app_version
.
split
(
"
.
"
1
)
[
0
]
    
return
{
        
"
allow_reserved
"
:
False
        
"
custom_is_expired
"
:
lambda
expires
:
expires
=
=
"
expired
"
        
or
expires
!
=
"
never
"
        
and
int
(
expires
)
<
=
int
(
app_version_major
)
        
"
custom_validate_expires
"
:
lambda
expires
:
expires
in
(
"
expired
"
"
never
"
)
        
or
re
.
fullmatch
(
r
"
\
d
\
d
+
"
expires
flags
=
re
.
ASCII
)
    
}
def
parse
(
args
)
:
    
"
"
"
    
Parse
and
lint
the
input
files
    
then
return
the
parsed
objects
for
further
processing
.
    
"
"
"
    
yaml_array
=
args
[
:
-
1
]
    
moz_app_version
=
args
[
-
1
]
    
input_files
=
[
Path
(
x
)
for
x
in
yaml_array
]
    
options
=
get_parser_options
(
moz_app_version
)
    
all_objs
=
parser
.
parse_objects
(
input_files
options
)
    
if
util
.
report_validation_errors
(
all_objs
)
:
        
sys
.
exit
(
1
)
    
if
lint
.
lint_metrics
(
all_objs
.
value
options
)
:
        
sys
.
exit
(
1
)
    
return
all_objs
.
value
options
DEPS_LEN
=
13
def
main
(
output_fd
*
args
)
:
    
args
=
args
[
DEPS_LEN
:
]
    
all_objs
options
=
parse
(
args
)
    
rust
.
output_rust
(
all_objs
output_fd
options
)
def
cpp_metrics
(
output_fd
*
args
)
:
    
args
=
args
[
DEPS_LEN
:
]
    
all_objs
options
=
parse
(
args
)
    
cpp
.
output_cpp
(
all_objs
output_fd
options
)
def
js_metrics
(
output_fd
*
args
)
:
    
args
=
args
[
DEPS_LEN
:
]
    
all_objs
options
=
parse
(
args
)
    
js
.
output_js
(
all_objs
output_fd
options
)
if
__name__
=
=
"
__main__
"
:
    
main
(
sys
.
stdout
*
sys
.
argv
[
1
:
]
)
