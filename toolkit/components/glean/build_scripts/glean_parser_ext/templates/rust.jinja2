{
#
The
rendered
source
is
autogenerated
but
this
Jinja2
template
is
not
.
Please
file
bugs
!
#
}
{
%
macro
generate_extra_keys
(
obj
)
%
}
{
%
for
name
suffix
in
obj
[
"
_generate_enums
"
]
%
}
{
%
if
obj
|
attr
(
name
)
|
length
%
}
#
[
derive
(
Clone
Copy
Hash
Eq
PartialEq
)
]
pub
enum
{
{
obj
.
name
|
Camelize
}
}
{
{
suffix
}
}
{
{
%
for
key
in
obj
|
attr
(
name
)
%
}
{
{
key
|
Camelize
}
}
{
%
endfor
%
}
}
impl
ExtraKeys
for
{
{
obj
.
name
|
Camelize
}
}
{
{
suffix
}
}
{
const
ALLOWED_KEYS
:
&
'
static
[
&
'
static
str
]
=
{
{
obj
.
allowed_extra_keys
|
extra_keys
}
}
;
fn
index
(
self
)
-
>
i32
{
self
as
i32
}
}
{
%
endif
%
}
{
%
endfor
%
}
{
%
endmacro
%
}
{
%
for
category_name
objs
in
all_objs
.
items
(
)
%
}
pub
mod
{
{
category_name
|
snake_case
}
}
{
use
crate
:
:
private
:
:
*
;
use
glean_core
:
:
CommonMetricData
;
use
once_cell
:
:
sync
:
:
Lazy
;
{
%
for
obj
in
objs
.
values
(
)
%
}
{
%
if
obj
|
attr
(
"
_generate_enums
"
)
%
}
{
{
generate_extra_keys
(
obj
)
}
}
{
%
-
endif
%
}
#
[
allow
(
non_upper_case_globals
)
]
pub
static
{
{
obj
.
name
|
snake_case
}
}
:
Lazy
<
{
{
obj
|
type_name
}
}
>
=
Lazy
:
:
new
(
|
|
{
{
{
obj
|
ctor
}
}
(
CommonMetricData
{
{
%
for
arg_name
in
common_metric_data_args
if
obj
[
arg_name
]
is
defined
%
}
{
{
arg_name
}
}
:
{
{
obj
[
arg_name
]
|
rust
}
}
{
%
endfor
%
}
.
.
Default
:
:
default
(
)
}
{
%
-
for
arg_name
in
extra_args
if
obj
[
arg_name
]
is
defined
and
arg_name
not
in
common_metric_data_args
and
arg_name
!
=
'
allowed_extra_keys
'
-
%
}
{
{
obj
[
arg_name
]
|
rust
}
}
{
%
-
endfor
-
%
}
{
{
"
"
if
obj
.
labeled
else
"
)
\
n
"
}
}
{
%
-
if
obj
.
labeled
-
%
}
{
%
-
if
obj
.
labels
-
%
}
Some
(
{
{
obj
.
labels
|
rust
}
}
)
{
%
-
else
-
%
}
None
{
%
-
endif
-
%
}
)
{
%
endif
%
}
}
)
;
{
%
endfor
%
}
}
{
%
endfor
%
}
