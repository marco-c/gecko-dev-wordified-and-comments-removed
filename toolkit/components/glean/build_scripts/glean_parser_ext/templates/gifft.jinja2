{
#
The
rendered
source
is
autogenerated
but
this
Jinja2
template
is
not
.
Pleas
file
bugs
!
#
}
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
{
%
if
probe_type
=
=
"
Scalar
"
%
}
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsTHashMap
.
h
"
{
%
endif
%
}
#
include
"
nsThreadUtils
.
h
"
#
ifndef
mozilla_glean_
{
{
probe_type
}
}
GifftMap_h
#
define
mozilla_glean_
{
{
probe_type
}
}
GifftMap_h
namespace
mozilla
:
:
glean
{
using
Telemetry
:
:
{
{
probe_type
}
}
ID
;
{
%
if
probe_type
=
=
"
Histogram
"
%
}
typedef
uint64_t
TimerId
;
typedef
StaticDataMutex
<
UniquePtr
<
nsTHashMap
<
TimerId
TimeStamp
>
>
>
TimerToStampMutex
;
static
inline
Maybe
<
TimerToStampMutex
:
:
AutoLock
>
GetTimerIdToStartsLock
(
)
{
static
TimerToStampMutex
sTimerIdToStarts
(
"
sTimerIdToStarts
"
)
;
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
return
Nothing
(
)
;
}
if
(
!
*
lock
)
{
*
lock
=
MakeUnique
<
nsTHashMap
<
TimerId
TimeStamp
>
>
(
)
;
RefPtr
<
nsIRunnable
>
cleanupFn
=
NS_NewRunnableFunction
(
__func__
[
&
]
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
return
;
}
RunOnShutdown
(
[
&
]
{
auto
lock
=
sTimerIdToStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
}
)
;
nsIRunnable
*
temp
=
cleanupFn
.
get
(
)
;
nsCOMPtr
<
nsIThread
>
mainThread
;
if
(
NS_FAILED
(
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
)
|
|
NS_FAILED
(
mainThread
-
>
Dispatch
(
cleanupFn
.
forget
(
)
nsIThread
:
:
DISPATCH_NORMAL
)
)
)
{
if
(
!
cleanupFn
)
{
NS_RELEASE
(
temp
)
;
}
*
lock
=
nullptr
;
return
Nothing
(
)
;
}
}
return
Some
(
std
:
:
move
(
lock
)
)
;
}
{
%
elif
probe_type
=
=
"
Scalar
"
%
}
typedef
nsUint32HashKey
SubmetricIdHashKey
;
typedef
nsTHashMap
<
SubmetricIdHashKey
Tuple
<
ScalarID
nsString
>
>
SubmetricToLabeledMirrorMapType
;
typedef
StaticDataMutex
<
UniquePtr
<
SubmetricToLabeledMirrorMapType
>
>
SubmetricToMirrorMutex
;
static
inline
Maybe
<
SubmetricToMirrorMutex
:
:
AutoLock
>
GetLabeledMirrorLock
(
)
{
static
SubmetricToMirrorMutex
sLabeledMirrors
(
"
sLabeledMirrors
"
)
;
auto
lock
=
sLabeledMirrors
.
Lock
(
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
return
Nothing
(
)
;
}
if
(
!
*
lock
)
{
*
lock
=
MakeUnique
<
SubmetricToLabeledMirrorMapType
>
(
)
;
RefPtr
<
nsIRunnable
>
cleanupFn
=
NS_NewRunnableFunction
(
__func__
[
&
]
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
auto
lock
=
sLabeledMirrors
.
Lock
(
)
;
*
lock
=
nullptr
;
return
;
}
RunOnShutdown
(
[
&
]
{
auto
lock
=
sLabeledMirrors
.
Lock
(
)
;
*
lock
=
nullptr
;
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
}
)
;
nsIRunnable
*
temp
=
cleanupFn
.
get
(
)
;
nsCOMPtr
<
nsIThread
>
mainThread
;
if
(
NS_FAILED
(
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
)
|
|
NS_FAILED
(
mainThread
-
>
Dispatch
(
cleanupFn
.
forget
(
)
nsIThread
:
:
DISPATCH_NORMAL
)
)
)
{
if
(
!
cleanupFn
)
{
NS_RELEASE
(
temp
)
;
}
*
lock
=
nullptr
;
return
Nothing
(
)
;
}
}
return
Some
(
std
:
:
move
(
lock
)
)
;
}
namespace
{
class
ScalarIDHashKey
:
public
PLDHashEntryHdr
{
public
:
typedef
const
ScalarID
&
KeyType
;
typedef
const
ScalarID
*
KeyTypePointer
;
explicit
ScalarIDHashKey
(
KeyTypePointer
aKey
)
:
mValue
(
*
aKey
)
{
}
ScalarIDHashKey
(
ScalarIDHashKey
&
&
aOther
)
:
PLDHashEntryHdr
(
std
:
:
move
(
aOther
)
)
mValue
(
std
:
:
move
(
aOther
.
mValue
)
)
{
}
~
ScalarIDHashKey
(
)
=
default
;
KeyType
GetKey
(
)
const
{
return
mValue
;
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
*
aKey
=
=
mValue
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
static_cast
<
std
:
:
underlying_type
<
ScalarID
>
:
:
type
>
(
*
aKey
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
const
ScalarID
mValue
;
}
;
}
typedef
StaticDataMutex
<
UniquePtr
<
nsTHashMap
<
ScalarIDHashKey
TimeStamp
>
>
>
TimesToStartsMutex
;
static
inline
Maybe
<
TimesToStartsMutex
:
:
AutoLock
>
GetTimesToStartsLock
(
)
{
static
TimesToStartsMutex
sTimespanStarts
(
"
sTimespanStarts
"
)
;
auto
lock
=
sTimespanStarts
.
Lock
(
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
return
Nothing
(
)
;
}
if
(
!
*
lock
)
{
*
lock
=
MakeUnique
<
nsTHashMap
<
ScalarIDHashKey
TimeStamp
>
>
(
)
;
RefPtr
<
nsIRunnable
>
cleanupFn
=
NS_NewRunnableFunction
(
__func__
[
&
]
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
auto
lock
=
sTimespanStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
return
;
}
RunOnShutdown
(
[
&
]
{
auto
lock
=
sTimespanStarts
.
Lock
(
)
;
*
lock
=
nullptr
;
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
}
)
;
nsIRunnable
*
temp
=
cleanupFn
.
get
(
)
;
nsCOMPtr
<
nsIThread
>
mainThread
;
if
(
NS_FAILED
(
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
)
|
|
NS_FAILED
(
mainThread
-
>
Dispatch
(
cleanupFn
.
forget
(
)
nsIThread
:
:
DISPATCH_NORMAL
)
)
)
{
if
(
!
cleanupFn
)
{
NS_RELEASE
(
temp
)
;
}
*
lock
=
nullptr
;
return
Nothing
(
)
;
}
}
return
Some
(
std
:
:
move
(
lock
)
)
;
}
static
inline
bool
IsSubmetricId
(
uint32_t
aId
)
{
return
aId
>
(
1
<
<
27
)
;
}
{
%
endif
%
}
static
{
%
if
probe_type
=
=
"
Event
"
%
}
inline
{
%
endif
%
}
Maybe
<
{
{
probe_type
}
}
ID
>
{
{
probe_type
}
}
IdForMetric
(
uint32_t
aId
)
{
switch
(
aId
)
{
{
%
for
id
(
mirror
metric_name
)
in
ids_to_probes
.
items
(
)
%
}
case
{
{
id
}
}
:
{
return
Some
(
{
{
probe_type
}
}
ID
:
:
{
{
mirror
}
}
)
;
}
{
%
endfor
%
}
default
:
{
return
Nothing
(
)
;
}
}
}
}
#
endif
