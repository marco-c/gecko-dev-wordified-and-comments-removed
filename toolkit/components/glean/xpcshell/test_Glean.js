"
use
strict
"
;
Cu
.
importGlobalProperties
(
[
"
Glean
"
"
GleanPings
"
]
)
;
const
{
MockRegistrar
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
var
SysInfo
=
{
overrides
:
{
}
_getOverridden
(
name
)
{
if
(
name
in
this
.
overrides
)
{
return
this
.
overrides
[
name
]
;
}
return
undefined
;
}
getProperty
(
name
)
{
let
override
=
this
.
_getOverridden
(
name
)
;
return
override
!
=
=
undefined
?
override
:
this
.
_genuine
.
QueryInterface
(
Ci
.
nsIPropertyBag
)
.
getProperty
(
name
)
;
}
get
(
name
)
{
let
override
=
this
.
_getOverridden
(
name
)
;
return
override
!
=
=
undefined
?
override
:
this
.
_genuine
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
.
get
(
name
)
;
}
getPropertyAsACString
(
name
)
{
return
this
.
get
(
name
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPropertyBag2
"
"
nsISystemInfo
"
]
)
}
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
add_task
(
function
test_setup
(
)
{
do_get_profile
(
)
;
SysInfo
.
overrides
=
{
version
:
"
1
.
2
.
3
"
arc
:
"
x64
"
}
;
MockRegistrar
.
register
(
"
mozilla
.
org
/
system
-
info
;
1
"
SysInfo
)
;
let
FOG
=
Cc
[
"
mozilla
.
org
/
toolkit
/
glean
;
1
"
]
.
createInstance
(
Ci
.
nsIFOG
)
;
FOG
.
initializeFOG
(
)
;
}
)
;
add_task
(
function
test_osversion_is_set
(
)
{
Assert
.
equal
(
"
1
.
2
.
3
"
Glean
.
fog_validation
.
os_version
.
testGetValue
(
"
fog
-
validation
"
)
)
;
}
)
;
add_task
(
function
test_fog_counter_works
(
)
{
Glean
.
test_only
.
bad_code
.
add
(
31
)
;
Assert
.
equal
(
31
Glean
.
test_only
.
bad_code
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
async
function
test_fog_string_works
(
)
{
const
value
=
"
a
cheesy
string
!
"
;
Glean
.
test_only
.
cheesy_string
.
set
(
value
)
;
Assert
.
equal
(
value
Glean
.
test_only
.
cheesy_string
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
async
function
test_fog_timespan_works
(
)
{
Glean
.
test_only
.
can_we_time_it
.
start
(
)
;
await
sleep
(
10
)
;
Glean
.
test_only
.
can_we_time_it
.
stop
(
)
;
Assert
.
ok
(
Glean
.
test_only
.
can_we_time_it
.
testGetValue
(
"
test
-
ping
"
)
>
0
)
;
}
)
;
add_task
(
async
function
test_fog_uuid_works
(
)
{
const
kTestUuid
=
"
decafdec
-
afde
-
cafd
-
ecaf
-
decafdecafde
"
;
Glean
.
test_only
.
what_id_it
.
set
(
kTestUuid
)
;
Assert
.
equal
(
kTestUuid
Glean
.
test_only
.
what_id_it
.
testGetValue
(
"
test
-
ping
"
)
)
;
Glean
.
test_only
.
what_id_it
.
generateAndSet
(
)
;
Assert
.
notEqual
(
kTestUuid
Glean
.
test_only
.
what_id_it
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
true
}
function
test_fog_datetime_works
(
)
{
const
value
=
new
Date
(
"
2020
-
06
-
11T12
:
00
:
00
"
)
;
Glean
.
test_only
.
what_a_date
.
set
(
value
.
getTime
(
)
*
1000
)
;
const
received
=
Glean
.
test_only
.
what_a_date
.
testGetValue
(
"
test
-
ping
"
)
;
Assert
.
ok
(
received
.
startsWith
(
"
2020
-
06
-
11T12
:
00
:
00
"
)
)
;
}
)
;
add_task
(
function
test_fog_boolean_works
(
)
{
Glean
.
test_only
.
can_we_flag_it
.
set
(
false
)
;
Assert
.
equal
(
false
Glean
.
test_only
.
can_we_flag_it
.
testGetValue
(
"
test
-
ping
"
)
)
;
}
)
;
add_task
(
async
function
test_fog_event_works
(
)
{
Glean
.
test_only_ipc
.
no_extra_event
.
record
(
)
;
let
extra
=
{
extra1
:
"
can
set
extras
"
extra2
:
"
passing
more
data
"
}
;
Glean
.
test_only_ipc
.
an_event
.
record
(
extra
)
;
}
)
;
add_task
(
async
function
test_fog_memory_distribution_works
(
)
{
Glean
.
test_only
.
do_you_remember
.
accumulate
(
7
)
;
Glean
.
test_only
.
do_you_remember
.
accumulate
(
17
)
;
let
data
=
Glean
.
test_only
.
do_you_remember
.
testGetValue
(
"
test
-
ping
"
)
;
Assert
.
equal
(
24
*
1024
*
1024
data
.
sum
"
Sum
'
s
correct
"
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
Assert
.
ok
(
count
=
=
0
|
|
(
count
=
=
1
&
&
(
bucket
=
=
17520006
|
|
bucket
=
=
7053950
)
)
"
Only
two
buckets
have
a
sample
"
)
;
}
}
)
;
add_task
(
function
test_fog_custom_pings
(
)
{
Assert
.
ok
(
"
onePingOnly
"
in
GleanPings
)
;
}
)
;
