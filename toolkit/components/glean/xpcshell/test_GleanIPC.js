"
use
strict
"
;
Cu
.
importGlobalProperties
(
[
"
Glean
"
"
GleanPings
"
]
)
;
const
{
MockRegistrar
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
const
{
ObjectUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
var
SysInfo
=
{
overrides
:
{
}
_getOverridden
(
name
)
{
if
(
name
in
this
.
overrides
)
{
return
this
.
overrides
[
name
]
;
}
return
undefined
;
}
getProperty
(
name
)
{
let
override
=
this
.
_getOverridden
(
name
)
;
return
override
!
=
=
undefined
?
override
:
this
.
_genuine
.
QueryInterface
(
Ci
.
nsIPropertyBag
)
.
getProperty
(
name
)
;
}
get
(
name
)
{
let
override
=
this
.
_getOverridden
(
name
)
;
return
override
!
=
=
undefined
?
override
:
this
.
_genuine
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
.
get
(
name
)
;
}
getPropertyAsACString
(
name
)
{
return
this
.
get
(
name
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPropertyBag2
"
"
nsISystemInfo
"
]
)
}
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
add_task
(
{
skip_if
:
(
)
=
>
!
runningInParent
}
function
test_setup
(
)
{
do_get_profile
(
)
;
SysInfo
.
overrides
=
{
version
:
"
1
.
2
.
3
"
arch
:
"
x64
"
}
;
MockRegistrar
.
register
(
"
mozilla
.
org
/
system
-
info
;
1
"
SysInfo
)
;
let
FOG
=
Cc
[
"
mozilla
.
org
/
toolkit
/
glean
;
1
"
]
.
createInstance
(
Ci
.
nsIFOG
)
;
FOG
.
initializeFOG
(
)
;
}
)
;
const
BAD_CODE_COUNT
=
42
;
const
CHEESY_STRING
=
"
a
very
cheesy
string
!
"
;
const
CHEESIER_STRING
=
"
a
much
cheesier
string
!
"
;
const
EVENT_EXTRA
=
{
extra1
:
"
so
very
extra
"
}
;
const
MEMORIES
=
[
13
31
]
;
const
MEMORY_BUCKETS
=
[
"
13509772
"
"
32131834
"
]
;
const
COUNTERS_NEAR_THE_SINK
=
3
;
const
COUNTERS_WITH_JUNK_ON_THEM
=
5
;
const
INVALID_COUNTERS
=
7
;
add_task
(
{
skip_if
:
(
)
=
>
runningInParent
}
async
function
run_child_stuff
(
)
{
Glean
.
testOnly
.
badCode
.
add
(
BAD_CODE_COUNT
)
;
Glean
.
testOnly
.
cheesyStringList
.
add
(
CHEESY_STRING
)
;
Glean
.
testOnly
.
cheesyStringList
.
add
(
CHEESIER_STRING
)
;
Glean
.
testOnlyIpc
.
noExtraEvent
.
record
(
)
;
Glean
.
testOnlyIpc
.
anEvent
.
record
(
)
;
for
(
let
memory
of
MEMORIES
)
{
Glean
.
testOnly
.
doYouRemember
.
accumulate
(
memory
)
;
}
let
t1
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
let
t2
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
await
sleep
(
5
)
;
let
t3
=
Glean
.
testOnly
.
whatTimeIsIt
.
start
(
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
cancel
(
t1
)
;
await
sleep
(
5
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
stopAndAccumulate
(
t2
)
;
Glean
.
testOnly
.
whatTimeIsIt
.
stopAndAccumulate
(
t3
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
runningInParent
}
async
function
test_child_metrics
(
)
{
await
run_test_in_child
(
"
test_GleanIPC
.
js
"
)
;
let
FOG
=
Cc
[
"
mozilla
.
org
/
toolkit
/
glean
;
1
"
]
.
createInstance
(
Ci
.
nsIFOG
)
;
await
FOG
.
testFlushAllChildren
(
)
;
Assert
.
equal
(
Glean
.
testOnly
.
badCode
.
testGetValue
(
)
BAD_CODE_COUNT
)
;
const
cheesyStrings
=
Glean
.
testOnly
.
cheesyStringList
.
testGetValue
(
)
;
Assert
.
deepEqual
(
cheesyStrings
[
CHEESY_STRING
CHEESIER_STRING
]
)
;
const
data
=
Glean
.
testOnly
.
doYouRemember
.
testGetValue
(
)
;
Assert
.
equal
(
MEMORIES
.
reduce
(
(
a
b
)
=
>
a
+
b
0
)
*
1024
*
1024
data
.
sum
)
;
for
(
let
[
bucket
count
]
of
Object
.
entries
(
data
.
values
)
)
{
if
(
count
=
=
0
)
{
continue
;
}
Assert
.
ok
(
count
=
=
1
&
&
MEMORY_BUCKETS
.
includes
(
bucket
)
)
;
}
}
)
;
