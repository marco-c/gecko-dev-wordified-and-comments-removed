#
ifndef
mozilla_glean_GleanDatetime_h
#
define
mozilla_glean_GleanDatetime_h
#
include
"
mozilla
/
glean
/
bindings
/
ScalarGIFFTMap
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
:
:
glean
{
namespace
impl
{
class
DatetimeMetric
{
public
:
constexpr
explicit
DatetimeMetric
(
uint32_t
aId
)
:
mId
(
aId
)
{
}
void
Set
(
const
PRExplodedTime
*
aValue
=
nullptr
)
const
{
PRExplodedTime
exploded
;
if
(
!
aValue
)
{
PR_ExplodeTime
(
PR_Now
(
)
PR_LocalTimeParameters
&
exploded
)
;
}
else
{
exploded
=
*
aValue
;
}
auto
id
=
ScalarIdForMetric
(
mId
)
;
if
(
id
)
{
const
uint32_t
buflen
=
64
;
char
buf
[
buflen
]
;
uint32_t
written
=
PR_FormatTime
(
buf
buflen
"
%
FT
%
T
%
z
"
&
exploded
)
;
if
(
written
>
2
&
&
written
<
64
)
{
buf
[
written
]
=
'
\
0
'
;
buf
[
written
-
1
]
=
buf
[
written
-
2
]
;
buf
[
written
-
2
]
=
buf
[
written
-
3
]
;
buf
[
written
-
3
]
=
'
:
'
;
Telemetry
:
:
ScalarSet
(
id
.
extract
(
)
NS_ConvertASCIItoUTF16
(
buf
)
)
;
}
}
#
ifndef
MOZ_GLEAN_ANDROID
int32_t
offset
=
exploded
.
tm_params
.
tp_gmt_offset
+
exploded
.
tm_params
.
tp_dst_offset
;
fog_datetime_set
(
mId
exploded
.
tm_year
exploded
.
tm_month
+
1
exploded
.
tm_mday
exploded
.
tm_hour
exploded
.
tm_min
exploded
.
tm_sec
exploded
.
tm_usec
*
1000
offset
)
;
#
endif
}
Maybe
<
nsCString
>
TestGetValue
(
const
nsACString
&
aPingName
=
nsCString
(
)
)
const
{
#
ifdef
MOZ_GLEAN_ANDROID
Unused
<
<
mId
;
return
Nothing
(
)
;
#
else
if
(
!
fog_datetime_test_has_value
(
mId
&
aPingName
)
)
{
return
Nothing
(
)
;
}
nsCString
ret
;
fog_datetime_test_get_value
(
mId
&
aPingName
&
ret
)
;
return
Some
(
ret
)
;
#
endif
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanDatetime
final
:
public
nsIGleanDatetime
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANDATETIME
explicit
GleanDatetime
(
uint32_t
aId
)
:
mDatetime
(
aId
)
{
}
;
private
:
virtual
~
GleanDatetime
(
)
=
default
;
const
impl
:
:
DatetimeMetric
mDatetime
;
}
;
}
#
endif
