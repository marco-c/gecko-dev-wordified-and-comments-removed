#
ifndef
mozilla_glean_GleanDatetime_h
#
define
mozilla_glean_GleanDatetime_h
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
namespace
glean
{
namespace
impl
{
extern
"
C
"
{
void
fog_datetime_set
(
uint32_t
id
int32_t
year
uint32_t
month
uint32_t
day
uint32_t
hour
uint32_t
minute
uint32_t
second
uint32_t
nano
int32_t
offset_seconds
)
;
uint32_t
fog_datetime_test_has_value
(
uint32_t
id
const
char
*
storageName
)
;
void
fog_datetime_test_get_value
(
uint32_t
id
const
char
*
storageName
nsACString
&
value
)
;
}
class
DatetimeMetric
{
public
:
constexpr
explicit
DatetimeMetric
(
uint32_t
id
)
:
mId
(
id
)
{
}
void
Set
(
const
PRExplodedTime
*
value
=
nullptr
)
const
{
PRExplodedTime
exploded
;
if
(
!
value
)
{
PR_ExplodeTime
(
PR_Now
(
)
PR_LocalTimeParameters
&
exploded
)
;
}
else
{
exploded
=
*
value
;
}
int32_t
offset
=
exploded
.
tm_params
.
tp_gmt_offset
+
exploded
.
tm_params
.
tp_dst_offset
;
fog_datetime_set
(
mId
exploded
.
tm_year
exploded
.
tm_month
+
1
exploded
.
tm_mday
exploded
.
tm_hour
exploded
.
tm_min
exploded
.
tm_sec
exploded
.
tm_usec
*
1000
offset
)
;
}
bool
TestHasValue
(
const
char
*
aStorageName
)
const
{
return
fog_datetime_test_has_value
(
mId
aStorageName
)
!
=
0
;
}
nsCString
TestGetValue
(
const
char
*
aStorageName
)
const
{
nsCString
ret
;
fog_datetime_test_get_value
(
mId
aStorageName
ret
)
;
return
ret
;
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanDatetime
final
:
public
nsIGleanDatetime
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANDATETIME
explicit
GleanDatetime
(
uint32_t
id
)
:
mDatetime
(
id
)
{
}
;
private
:
virtual
~
GleanDatetime
(
)
=
default
;
const
impl
:
:
DatetimeMetric
mDatetime
;
}
;
}
}
#
endif
