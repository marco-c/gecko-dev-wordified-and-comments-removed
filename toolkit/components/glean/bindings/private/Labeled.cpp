#
include
"
mozilla
/
glean
/
bindings
/
Labeled
.
h
"
#
include
"
mozilla
/
dom
/
GleanBinding
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
GleanJSMetricsLookup
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
MetricTypes
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
ScalarGIFFTMap
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
RemoteType
.
h
"
namespace
mozilla
:
:
glean
{
JSObject
*
GleanLabeled
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
GleanLabeled_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
GleanMetric
>
GleanLabeled
:
:
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
{
auto
label
=
NS_ConvertUTF16toUTF8
(
aName
)
;
aFound
=
true
;
uint32_t
submetricId
=
0
;
already_AddRefed
<
GleanMetric
>
submetric
=
NewSubMetricFromIds
(
mTypeId
mId
label
&
submetricId
mParent
)
;
auto
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
GetLabeledMirrorLock
(
)
.
apply
(
[
&
]
(
const
auto
&
lock
)
{
auto
tuple
=
std
:
:
make_tuple
<
Telemetry
:
:
ScalarID
nsString
>
(
mirrorId
.
extract
(
)
nsString
(
aName
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
submetricId
std
:
:
move
(
tuple
)
)
;
}
)
;
}
else
if
(
auto
mirrorHgramId
=
HistogramIdForMetric
(
mId
)
)
{
GetLabeledDistributionMirrorLock
(
)
.
apply
(
[
&
]
(
const
auto
&
lock
)
{
auto
tuple
=
std
:
:
make_tuple
<
Telemetry
:
:
HistogramID
nsCString
>
(
mirrorHgramId
.
extract
(
)
nsCString
(
label
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
submetricId
std
:
:
move
(
tuple
)
)
;
}
)
;
}
return
submetric
;
}
bool
GleanLabeled
:
:
NameIsEnumerable
(
const
nsAString
&
aName
)
{
return
false
;
}
void
GleanLabeled
:
:
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
{
}
namespace
impl
{
nsCString
GetProcessTypeForTelemetry
(
)
{
nsCString
processType
(
XRE_GetProcessTypeString
(
)
)
;
if
(
processType
.
EqualsLiteral
(
"
tab
"
)
)
{
auto
*
cc
=
mozilla
:
:
dom
:
:
ContentChild
:
:
GetSingleton
(
)
;
if
(
cc
)
{
const
nsACString
&
remoteType
=
cc
-
>
GetRemoteType
(
)
;
if
(
remoteType
=
=
EXTENSION_REMOTE_TYPE
)
{
processType
.
AssignLiteral
(
"
extension
"
)
;
}
else
if
(
remoteType
=
=
INFERENCE_REMOTE_TYPE
)
{
processType
.
AssignLiteral
(
"
inference
"
)
;
}
}
}
return
processType
;
}
}
}
