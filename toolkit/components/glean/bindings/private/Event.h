#
ifndef
mozilla_glean_GleanEvent_h
#
define
mozilla_glean_GleanEvent_h
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
glean
{
class
GleanEvent
;
namespace
impl
{
struct
RecordedEvent
{
public
:
uint64_t
mTimestamp
;
nsCString
mCategory
;
nsCString
mName
;
nsTArray
<
Tuple
<
nsCString
nsCString
>
>
mExtra
;
}
;
template
<
class
T
>
class
EventMetric
{
friend
class
mozilla
:
:
glean
:
:
GleanEvent
;
public
:
constexpr
explicit
EventMetric
(
uint32_t
id
)
:
mId
(
id
)
{
}
void
Record
(
const
Span
<
const
Tuple
<
T
nsCString
>
>
&
aExtras
=
{
}
)
const
{
#
ifndef
MOZ_GLEAN_ANDROID
static_assert
(
sizeof
(
T
)
<
=
sizeof
(
int32_t
)
"
Extra
keys
need
to
fit
into
32
bits
"
)
;
nsTArray
<
int32_t
>
extraKeys
;
nsTArray
<
nsCString
>
extraValues
;
for
(
auto
&
entry
:
aExtras
)
{
extraKeys
.
AppendElement
(
static_cast
<
int32_t
>
(
mozilla
:
:
Get
<
0
>
(
entry
)
)
)
;
extraValues
.
AppendElement
(
mozilla
:
:
Get
<
1
>
(
entry
)
)
;
}
fog_event_record
(
mId
&
extraKeys
&
extraValues
)
;
#
endif
}
Maybe
<
nsTArray
<
RecordedEvent
>
>
TestGetValue
(
const
nsACString
&
aPingName
=
nsCString
(
)
)
const
{
#
ifdef
MOZ_GLEAN_ANDROID
Unused
<
<
mId
;
return
Nothing
(
)
;
#
else
if
(
!
fog_event_test_has_value
(
mId
&
aPingName
)
)
{
return
Nothing
(
)
;
}
nsTArray
<
FfiRecordedEvent
>
events
;
fog_event_test_get_value
(
mId
&
aPingName
&
events
)
;
nsTArray
<
RecordedEvent
>
result
;
for
(
auto
event
:
events
)
{
auto
ev
=
result
.
AppendElement
(
)
;
ev
-
>
mTimestamp
=
event
.
timestamp
;
ev
-
>
mCategory
.
Append
(
event
.
category
)
;
ev
-
>
mName
.
Assign
(
event
.
name
)
;
ev
-
>
mExtra
.
SetCapacity
(
event
.
extra_len
)
;
for
(
unsigned
int
i
=
0
;
i
<
event
.
extra_len
;
i
+
+
)
{
auto
key
=
event
.
extra
[
2
*
i
]
;
auto
value
=
event
.
extra
[
2
*
i
+
1
]
;
ev
-
>
mExtra
.
AppendElement
(
MakeTuple
(
key
value
)
)
;
}
fog_event_free_event_extra
(
event
.
extra
event
.
extra_len
)
;
}
return
Some
(
std
:
:
move
(
result
)
)
;
#
endif
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanEvent
final
:
public
nsIGleanEvent
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANEVENT
explicit
GleanEvent
(
uint32_t
id
)
:
mEvent
(
id
)
{
}
;
private
:
virtual
~
GleanEvent
(
)
=
default
;
const
impl
:
:
EventMetric
<
uint32_t
>
mEvent
;
}
;
}
#
endif
