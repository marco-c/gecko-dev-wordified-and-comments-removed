#
ifndef
mozilla_glean_GleanEvent_h
#
define
mozilla_glean_GleanEvent_h
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
EventGIFFTMap
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
glean
{
class
GleanEvent
;
namespace
impl
{
struct
RecordedEvent
{
public
:
uint64_t
mTimestamp
;
nsCString
mCategory
;
nsCString
mName
;
nsTArray
<
Tuple
<
nsCString
nsCString
>
>
mExtra
;
}
;
template
<
class
T
>
class
EventMetric
{
friend
class
mozilla
:
:
glean
:
:
GleanEvent
;
public
:
constexpr
explicit
EventMetric
(
uint32_t
id
)
:
mId
(
id
)
{
}
void
Record
(
const
Maybe
<
T
>
&
aExtras
=
Nothing
(
)
)
const
{
auto
id
=
EventIdForMetric
(
mId
)
;
if
(
id
)
{
Maybe
<
CopyableTArray
<
Telemetry
:
:
EventExtraEntry
>
>
telExtras
;
if
(
aExtras
)
{
CopyableTArray
<
Telemetry
:
:
EventExtraEntry
>
extras
;
auto
serializedExtras
=
aExtras
-
>
ToFfiExtra
(
)
;
auto
keys
=
std
:
:
move
(
Get
<
0
>
(
serializedExtras
)
)
;
auto
values
=
std
:
:
move
(
Get
<
1
>
(
serializedExtras
)
)
;
for
(
size_t
i
=
0
;
i
<
keys
.
Length
(
)
;
i
+
+
)
{
extras
.
EmplaceBack
(
Telemetry
:
:
EventExtraEntry
{
keys
[
i
]
values
[
i
]
}
)
;
}
telExtras
=
Some
(
extras
)
;
}
Telemetry
:
:
RecordEvent
(
id
.
extract
(
)
Nothing
(
)
telExtras
)
;
}
if
(
aExtras
)
{
auto
extra
=
aExtras
-
>
ToFfiExtra
(
)
;
fog_event_record
(
mId
&
mozilla
:
:
Get
<
0
>
(
extra
)
&
mozilla
:
:
Get
<
1
>
(
extra
)
)
;
}
else
{
nsTArray
<
nsCString
>
keys
;
nsTArray
<
nsCString
>
vals
;
fog_event_record
(
mId
&
keys
&
vals
)
;
}
}
Result
<
Maybe
<
nsTArray
<
RecordedEvent
>
>
nsCString
>
TestGetValue
(
const
nsACString
&
aPingName
=
nsCString
(
)
)
const
{
nsCString
err
;
if
(
fog_event_test_get_error
(
mId
&
err
)
)
{
return
Err
(
err
)
;
}
if
(
!
fog_event_test_has_value
(
mId
&
aPingName
)
)
{
return
Maybe
<
nsTArray
<
RecordedEvent
>
>
(
)
;
}
nsTArray
<
FfiRecordedEvent
>
events
;
fog_event_test_get_value
(
mId
&
aPingName
&
events
)
;
nsTArray
<
RecordedEvent
>
result
;
for
(
const
auto
&
event
:
events
)
{
auto
ev
=
result
.
AppendElement
(
)
;
ev
-
>
mTimestamp
=
event
.
timestamp
;
ev
-
>
mCategory
.
Append
(
event
.
category
)
;
ev
-
>
mName
.
Assign
(
event
.
name
)
;
MOZ_ASSERT
(
event
.
extras
.
Length
(
)
%
2
=
=
0
)
;
ev
-
>
mExtra
.
SetCapacity
(
event
.
extras
.
Length
(
)
/
2
)
;
for
(
unsigned
int
i
=
0
;
i
<
event
.
extras
.
Length
(
)
;
i
+
=
2
)
{
nsCString
key
=
std
:
:
move
(
event
.
extras
[
i
]
)
;
nsCString
value
=
std
:
:
move
(
event
.
extras
[
i
+
1
]
)
;
ev
-
>
mExtra
.
AppendElement
(
MakeTuple
(
std
:
:
move
(
key
)
std
:
:
move
(
value
)
)
)
;
}
}
return
Some
(
std
:
:
move
(
result
)
)
;
}
private
:
static
const
nsCString
ExtraStringForKey
(
uint32_t
aKey
)
;
const
uint32_t
mId
;
}
;
}
struct
NoExtraKeys
{
Tuple
<
nsTArray
<
nsCString
>
nsTArray
<
nsCString
>
>
ToFfiExtra
(
)
const
{
nsTArray
<
nsCString
>
extraKeys
;
nsTArray
<
nsCString
>
extraValues
;
return
MakeTuple
(
std
:
:
move
(
extraKeys
)
std
:
:
move
(
extraValues
)
)
;
}
}
;
class
GleanEvent
final
:
public
nsIGleanEvent
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANEVENT
explicit
GleanEvent
(
uint32_t
id
)
:
mEvent
(
id
)
{
}
;
private
:
virtual
~
GleanEvent
(
)
=
default
;
const
impl
:
:
EventMetric
<
NoExtraKeys
>
mEvent
;
}
;
}
#
endif
