#
ifndef
mozilla_glean_GleanUuid_h
#
define
mozilla_glean_GleanUuid_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
glean
{
namespace
impl
{
extern
"
C
"
{
void
fog_uuid_set
(
uint32_t
aId
const
nsACString
&
aUuid
)
;
void
fog_uuid_generate_and_set
(
uint32_t
aId
)
;
uint32_t
fog_uuid_test_has_value
(
uint32_t
aId
const
char
*
aStorageName
)
;
void
fog_uuid_test_get_value
(
uint32_t
aId
const
char
*
aStorageName
nsACString
&
aValue
)
;
}
class
UuidMetric
{
public
:
constexpr
explicit
UuidMetric
(
uint32_t
aId
)
:
mId
(
aId
)
{
}
void
Set
(
const
nsACString
&
aValue
)
const
{
fog_uuid_set
(
mId
aValue
)
;
}
void
GenerateAndSet
(
)
const
{
fog_uuid_generate_and_set
(
mId
)
;
}
Maybe
<
nsCString
>
TestGetValue
(
const
char
*
aStorageName
)
const
{
if
(
!
fog_uuid_test_has_value
(
mId
aStorageName
)
)
{
return
Nothing
(
)
;
}
nsCString
ret
;
fog_uuid_test_get_value
(
mId
aStorageName
ret
)
;
return
Some
(
ret
)
;
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanUuid
final
:
public
nsIGleanUuid
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANUUID
explicit
GleanUuid
(
uint32_t
aId
)
:
mUuid
(
aId
)
{
}
;
private
:
virtual
~
GleanUuid
(
)
=
default
;
const
impl
:
:
UuidMetric
mUuid
;
}
;
}
#
endif
