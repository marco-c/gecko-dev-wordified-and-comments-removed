#
ifndef
mozilla_glean_GleanTimingDistribution_h
#
define
mozilla_glean_GleanTimingDistribution_h
#
include
"
mozilla
/
glean
/
bindings
/
DistributionData
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
glean
{
typedef
uint64_t
TimerId
;
namespace
impl
{
class
TimingDistributionMetric
{
public
:
constexpr
explicit
TimingDistributionMetric
(
uint32_t
aId
)
:
mId
(
aId
)
{
}
TimerId
Start
(
)
const
{
#
ifdef
MOZ_GLEAN_ANDROID
return
0
;
#
else
return
fog_timing_distribution_start
(
mId
)
;
#
endif
}
void
StopAndAccumulate
(
TimerId
&
&
aId
)
const
{
#
ifndef
MOZ_GLEAN_ANDROID
fog_timing_distribution_stop_and_accumulate
(
mId
aId
)
;
#
endif
}
void
Cancel
(
TimerId
&
&
aId
)
const
{
#
ifndef
MOZ_GLEAN_ANDROID
fog_timing_distribution_cancel
(
mId
aId
)
;
#
endif
}
Maybe
<
DistributionData
>
TestGetValue
(
const
nsACString
&
aPingName
=
nsCString
(
)
)
const
{
#
ifdef
MOZ_GLEAN_ANDROID
Unused
<
<
mId
;
return
Nothing
(
)
;
#
else
if
(
!
fog_timing_distribution_test_has_value
(
mId
&
aPingName
)
)
{
return
Nothing
(
)
;
}
nsTArray
<
uint64_t
>
buckets
;
nsTArray
<
uint64_t
>
counts
;
DistributionData
ret
;
fog_timing_distribution_test_get_value
(
mId
&
aPingName
&
ret
.
sum
&
buckets
&
counts
)
;
for
(
size_t
i
=
0
;
i
<
buckets
.
Length
(
)
;
+
+
i
)
{
ret
.
values
.
InsertOrUpdate
(
buckets
[
i
]
counts
[
i
]
)
;
}
return
Some
(
std
:
:
move
(
ret
)
)
;
#
endif
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanTimingDistribution
final
:
public
nsIGleanTimingDistribution
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANTIMINGDISTRIBUTION
explicit
GleanTimingDistribution
(
uint64_t
aId
)
:
mTimingDist
(
aId
)
{
}
;
private
:
virtual
~
GleanTimingDistribution
(
)
=
default
;
const
impl
:
:
TimingDistributionMetric
mTimingDist
;
}
;
}
#
endif
