#
ifndef
mozilla_glean_Ping_h
#
define
mozilla_glean_Ping_h
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIGleanPing
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
glean
{
using
PingTestCallback
=
std
:
:
function
<
void
(
const
nsACString
&
aReason
)
>
;
using
FalliblePingTestCallback
=
std
:
:
function
<
nsresult
(
const
nsACString
&
aReason
)
>
;
using
PingSubmitCallback
=
std
:
:
function
<
void
(
)
>
;
class
GleanPing
;
namespace
impl
{
class
Ping
{
friend
class
:
:
mozilla
:
:
glean
:
:
GleanPing
;
public
:
constexpr
explicit
Ping
(
uint32_t
aId
)
:
mId
(
aId
)
{
}
void
Submit
(
const
nsACString
&
aReason
=
nsCString
(
)
)
const
;
void
TestBeforeNextSubmit
(
PingTestCallback
&
&
aCallback
)
const
;
void
TestBeforeNextSubmitFallible
(
FalliblePingTestCallback
&
&
aCallback
)
const
;
[
[
nodiscard
]
]
bool
TestSubmission
(
PingTestCallback
&
&
aTestCallback
PingSubmitCallback
&
&
aSubmitCallback
)
const
;
void
SetEnabled
(
bool
aValue
)
const
;
private
:
nsresult
SubmitInternal
(
const
nsACString
&
aReason
=
nsCString
(
)
)
const
;
const
uint32_t
mId
;
}
;
}
class
GleanPing
final
:
public
nsIGleanPing
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANPING
explicit
GleanPing
(
uint32_t
aId
)
:
mPing
(
aId
)
{
}
private
:
virtual
~
GleanPing
(
)
=
default
;
const
impl
:
:
Ping
mPing
;
}
;
}
#
endif
