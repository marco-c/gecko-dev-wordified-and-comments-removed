#
include
"
mozilla
/
glean
/
bindings
/
Text
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
String
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
dom
/
GleanMetricsBinding
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
ScalarGIFFTMap
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
namespace
mozilla
:
:
glean
{
namespace
impl
{
void
TextMetric
:
:
Set
(
const
nsACString
&
aValue
)
const
{
fog_text_set
(
mId
&
aValue
)
;
}
Result
<
Maybe
<
nsCString
>
nsCString
>
TextMetric
:
:
TestGetValue
(
const
nsACString
&
aPingName
)
const
{
nsCString
err
;
if
(
fog_text_test_get_error
(
mId
&
err
)
)
{
return
Err
(
err
)
;
}
if
(
!
fog_text_test_has_value
(
mId
&
aPingName
)
)
{
return
Maybe
<
nsCString
>
(
)
;
}
nsCString
ret
;
fog_text_test_get_value
(
mId
&
aPingName
&
ret
)
;
return
Some
(
ret
)
;
}
}
JSObject
*
GleanText
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
GleanText_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
GleanText
:
:
Set
(
const
nsACString
&
aValue
)
{
mText
.
Set
(
aValue
)
;
}
void
GleanText
:
:
TestGetValue
(
const
nsACString
&
aPingName
nsCString
&
aResult
ErrorResult
&
aRv
)
{
auto
result
=
mText
.
TestGetValue
(
aPingName
)
;
if
(
result
.
isErr
(
)
)
{
aRv
.
ThrowDataError
(
result
.
unwrapErr
(
)
)
;
return
;
}
auto
optresult
=
result
.
unwrap
(
)
;
if
(
!
optresult
.
isNothing
(
)
)
{
aResult
.
Assign
(
optresult
.
extract
(
)
)
;
}
else
{
aResult
.
SetIsVoid
(
true
)
;
}
}
}
