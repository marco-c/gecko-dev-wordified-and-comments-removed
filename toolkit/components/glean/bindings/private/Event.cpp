#
include
"
mozilla
/
glean
/
bindings
/
Event
.
h
"
#
include
"
Common
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
nsIClassInfoImpl
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsIScriptError
.
h
"
namespace
mozilla
:
:
glean
{
NS_IMPL_CLASSINFO
(
GleanEvent
nullptr
0
{
0
}
)
NS_IMPL_ISUPPORTS_CI
(
GleanEvent
nsIGleanEvent
)
NS_IMETHODIMP
GleanEvent
:
:
Record
(
JS
:
:
HandleValue
aExtra
JSContext
*
aCx
)
{
#
ifdef
MOZ_GLEAN_ANDROID
return
NS_OK
;
#
else
if
(
aExtra
.
isNullOrUndefined
(
)
)
{
mEvent
.
Record
(
)
;
return
NS_OK
;
}
if
(
!
aExtra
.
isObject
(
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
warningFlag
u
"
Extras
need
to
be
an
object
"
_ns
)
;
return
NS_OK
;
}
nsTArray
<
nsCString
>
extraKeys
;
nsTArray
<
nsCString
>
extraValues
;
JS
:
:
RootedObject
obj
(
aCx
&
aExtra
.
toObject
(
)
)
;
JS
:
:
Rooted
<
JS
:
:
IdVector
>
ids
(
aCx
JS
:
:
IdVector
(
aCx
)
)
;
if
(
!
JS_Enumerate
(
aCx
obj
&
ids
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
warningFlag
u
"
Failed
to
enumerate
object
.
"
_ns
)
;
return
NS_OK
;
}
for
(
size_t
i
=
0
n
=
ids
.
length
(
)
;
i
<
n
;
i
+
+
)
{
nsAutoJSCString
jsKey
;
if
(
!
jsKey
.
init
(
aCx
ids
[
i
]
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
warningFlag
u
"
Extra
dictionary
should
only
contain
string
keys
.
"
_ns
)
;
return
NS_OK
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
)
;
if
(
!
JS_GetPropertyById
(
aCx
obj
ids
[
i
]
&
value
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
warningFlag
u
"
Failed
to
get
extra
property
.
"
_ns
)
;
return
NS_OK
;
}
nsAutoJSCString
jsValue
;
if
(
!
value
.
isString
(
)
|
|
!
jsValue
.
init
(
aCx
value
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
warningFlag
u
"
Extra
properties
should
have
string
values
.
"
_ns
)
;
return
NS_OK
;
}
extraKeys
.
AppendElement
(
jsKey
)
;
extraValues
.
AppendElement
(
jsValue
)
;
}
impl
:
:
fog_event_record_str
(
mEvent
.
mId
&
extraKeys
&
extraValues
)
;
return
NS_OK
;
#
endif
}
NS_IMETHODIMP
GleanEvent
:
:
TestGetValue
(
const
nsACString
&
aStorageName
JSContext
*
aCx
JS
:
:
MutableHandleValue
aResult
)
{
auto
result
=
mEvent
.
TestGetValue
(
aStorageName
)
;
if
(
result
.
isNothing
(
)
)
{
aResult
.
set
(
JS
:
:
UndefinedValue
(
)
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
}
