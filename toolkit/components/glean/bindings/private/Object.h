#
ifndef
mozilla_glean_GleanObject_h
#
define
mozilla_glean_GleanObject_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
GleanMetric
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
glean
{
class
GleanObject
;
namespace
impl
{
template
<
typename
T
typename
Tag
>
class
ObjectMetric
{
friend
class
mozilla
:
:
glean
:
:
GleanObject
;
public
:
constexpr
explicit
ObjectMetric
(
uint32_t
id
)
:
mId
(
id
)
{
}
void
Set
(
const
T
&
)
const
;
Result
<
Maybe
<
nsCString
>
nsCString
>
TestGetValueAsJSONString
(
const
nsACString
&
aPingName
=
nsCString
(
)
)
const
{
nsCString
err
;
if
(
fog_object_test_get_error
(
mId
&
err
)
)
{
return
Err
(
err
)
;
}
if
(
!
fog_object_test_has_value
(
mId
&
aPingName
)
)
{
return
Maybe
<
nsCString
>
(
)
;
}
nsCString
ret
;
fog_object_test_get_value
(
mId
&
aPingName
&
ret
)
;
return
Some
(
ret
)
;
}
private
:
const
uint32_t
mId
;
void
SetStr
(
const
nsACString
&
aValue
)
const
{
fog_object_set_string
(
mId
&
aValue
)
;
}
}
;
using
RuntimeObject
=
bool
;
template
<
>
void
ObjectMetric
<
RuntimeObject
void
>
:
:
Set
(
const
RuntimeObject
&
)
const
=
delete
;
}
class
GleanObject
final
:
public
GleanMetric
{
public
:
explicit
GleanObject
(
uint32_t
aId
nsISupports
*
aParent
)
:
GleanMetric
(
aParent
)
mObject
(
aId
)
{
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
final
;
void
Set
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
void
TestGetValue
(
JSContext
*
aCx
const
nsACString
&
aPingName
JS
:
:
MutableHandle
<
JSObject
*
>
aResult
ErrorResult
&
aRv
)
;
virtual
~
GleanObject
(
)
=
default
;
private
:
const
impl
:
:
ObjectMetric
<
impl
:
:
RuntimeObject
void
>
mObject
;
}
;
}
#
endif
