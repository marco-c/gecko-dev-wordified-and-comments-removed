#
ifndef
mozilla_glean_Labeled_h
#
define
mozilla_glean_Labeled_h
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
Boolean
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
Counter
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
ScalarGIFFTMap
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
String
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
enum
class
DynamicLabel
:
uint16_t
;
namespace
mozilla
:
:
glean
{
namespace
impl
{
template
<
typename
T
typename
E
>
class
Labeled
{
public
:
constexpr
explicit
Labeled
<
T
E
>
(
uint32_t
id
)
:
mId
(
id
)
{
}
T
Get
(
const
nsACString
&
aLabel
)
const
;
T
EnumGet
(
E
aLabel
)
const
;
private
:
const
uint32_t
mId
;
}
;
static
inline
void
UpdateLabeledMirror
(
Telemetry
:
:
ScalarID
aMirrorId
uint32_t
aSubmetricId
const
nsACString
&
aLabel
)
{
GetLabeledMirrorLock
(
)
.
apply
(
[
&
]
(
auto
&
lock
)
{
auto
tuple
=
std
:
:
make_tuple
<
Telemetry
:
:
ScalarID
nsString
>
(
std
:
:
move
(
aMirrorId
)
NS_ConvertUTF8toUTF16
(
aLabel
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
aSubmetricId
std
:
:
move
(
tuple
)
)
;
}
)
;
}
template
<
typename
E
>
class
Labeled
<
BooleanMetric
E
>
{
public
:
constexpr
explicit
Labeled
(
uint32_t
id
)
:
mId
(
id
)
{
}
BooleanMetric
Get
(
const
nsACString
&
aLabel
)
const
{
auto
submetricId
=
fog_labeled_boolean_get
(
mId
&
aLabel
)
;
auto
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
UpdateLabeledMirror
(
mirrorId
.
extract
(
)
submetricId
aLabel
)
;
}
return
BooleanMetric
(
submetricId
)
;
}
BooleanMetric
EnumGet
(
E
aLabel
)
const
{
auto
submetricId
=
fog_labeled_boolean_enum_get
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
)
;
auto
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
nsCString
label
;
fog_labeled_enum_to_str
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
&
label
)
;
UpdateLabeledMirror
(
mirrorId
.
extract
(
)
submetricId
label
)
;
}
return
BooleanMetric
(
submetricId
)
;
}
private
:
const
uint32_t
mId
;
}
;
template
<
typename
E
>
class
Labeled
<
CounterMetric
E
>
{
public
:
constexpr
explicit
Labeled
(
uint32_t
id
)
:
mId
(
id
)
{
}
CounterMetric
Get
(
const
nsACString
&
aLabel
)
const
{
auto
submetricId
=
fog_labeled_counter_get
(
mId
&
aLabel
)
;
auto
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
GetLabeledMirrorLock
(
)
.
apply
(
[
&
]
(
auto
&
lock
)
{
auto
tuple
=
std
:
:
make_tuple
<
Telemetry
:
:
ScalarID
nsString
>
(
mirrorId
.
extract
(
)
NS_ConvertUTF8toUTF16
(
aLabel
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
submetricId
std
:
:
move
(
tuple
)
)
;
}
)
;
}
return
CounterMetric
(
submetricId
)
;
}
CounterMetric
EnumGet
(
E
aLabel
)
const
{
auto
submetricId
=
fog_labeled_counter_enum_get
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
)
;
auto
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
nsCString
label
;
fog_labeled_enum_to_str
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
&
label
)
;
UpdateLabeledMirror
(
mirrorId
.
extract
(
)
submetricId
label
)
;
}
return
CounterMetric
(
submetricId
)
;
}
private
:
const
uint32_t
mId
;
}
;
template
<
typename
E
>
class
Labeled
<
StringMetric
E
>
{
public
:
constexpr
explicit
Labeled
(
uint32_t
id
)
:
mId
(
id
)
{
}
StringMetric
Get
(
const
nsACString
&
aLabel
)
const
{
auto
submetricId
=
fog_labeled_string_get
(
mId
&
aLabel
)
;
return
StringMetric
(
submetricId
)
;
}
StringMetric
EnumGet
(
E
aLabel
)
const
{
auto
submetricId
=
fog_labeled_string_enum_get
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
)
;
return
StringMetric
(
submetricId
)
;
}
private
:
const
uint32_t
mId
;
}
;
template
<
>
class
Labeled
<
BooleanMetric
DynamicLabel
>
{
public
:
constexpr
explicit
Labeled
(
uint32_t
id
)
:
mId
(
id
)
{
}
BooleanMetric
Get
(
const
nsACString
&
aLabel
)
const
{
auto
submetricId
=
fog_labeled_boolean_get
(
mId
&
aLabel
)
;
auto
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
UpdateLabeledMirror
(
mirrorId
.
extract
(
)
submetricId
aLabel
)
;
}
return
BooleanMetric
(
submetricId
)
;
}
BooleanMetric
EnumGet
(
DynamicLabel
aLabel
)
const
=
delete
;
private
:
const
uint32_t
mId
;
}
;
template
<
>
class
Labeled
<
CounterMetric
DynamicLabel
>
{
public
:
constexpr
explicit
Labeled
(
uint32_t
id
)
:
mId
(
id
)
{
}
CounterMetric
Get
(
const
nsACString
&
aLabel
)
const
{
auto
submetricId
=
fog_labeled_counter_get
(
mId
&
aLabel
)
;
auto
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
GetLabeledMirrorLock
(
)
.
apply
(
[
&
]
(
auto
&
lock
)
{
auto
tuple
=
std
:
:
make_tuple
<
Telemetry
:
:
ScalarID
nsString
>
(
mirrorId
.
extract
(
)
NS_ConvertUTF8toUTF16
(
aLabel
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
submetricId
std
:
:
move
(
tuple
)
)
;
}
)
;
}
return
CounterMetric
(
submetricId
)
;
}
CounterMetric
EnumGet
(
DynamicLabel
aLabel
)
const
=
delete
;
private
:
const
uint32_t
mId
;
}
;
template
<
>
class
Labeled
<
StringMetric
DynamicLabel
>
{
public
:
constexpr
explicit
Labeled
(
uint32_t
id
)
:
mId
(
id
)
{
}
StringMetric
Get
(
const
nsACString
&
aLabel
)
const
{
auto
submetricId
=
fog_labeled_string_get
(
mId
&
aLabel
)
;
return
StringMetric
(
submetricId
)
;
}
StringMetric
EnumGet
(
DynamicLabel
aLabel
)
const
=
delete
;
private
:
const
uint32_t
mId
;
}
;
}
class
GleanLabeled
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
GleanLabeled
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsISupports
*
GetParentObject
(
)
{
return
nullptr
;
}
explicit
GleanLabeled
(
uint32_t
aId
uint32_t
aTypeId
)
:
mId
(
aId
)
mTypeId
(
aTypeId
)
{
}
;
already_AddRefed
<
nsISupports
>
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
;
bool
NameIsEnumerable
(
const
nsAString
&
aName
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
;
private
:
virtual
~
GleanLabeled
(
)
=
default
;
const
uint32_t
mId
;
const
uint32_t
mTypeId
;
}
;
}
#
endif
