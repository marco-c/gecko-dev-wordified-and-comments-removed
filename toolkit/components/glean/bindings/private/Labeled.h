#
ifndef
mozilla_glean_Labeled_h
#
define
mozilla_glean_Labeled_h
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
namespace
mozilla
:
:
glean
{
namespace
impl
{
template
<
typename
T
>
class
Labeled
{
public
:
constexpr
explicit
Labeled
<
T
>
(
uint32_t
id
)
:
mId
(
id
)
{
}
T
Get
(
const
nsACString
&
aLabel
)
const
;
private
:
const
uint32_t
mId
;
}
;
}
class
GleanLabeled
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
GleanLabeled
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsISupports
*
GetParentObject
(
)
{
return
nullptr
;
}
explicit
GleanLabeled
(
uint32_t
aId
uint32_t
aTypeId
)
:
mId
(
aId
)
mTypeId
(
aTypeId
)
{
}
;
already_AddRefed
<
nsISupports
>
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
;
bool
NameIsEnumerable
(
const
nsAString
&
aName
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
;
private
:
virtual
~
GleanLabeled
(
)
=
default
;
const
uint32_t
mId
;
const
uint32_t
mTypeId
;
}
;
}
#
endif
