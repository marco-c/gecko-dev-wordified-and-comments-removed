#
ifndef
mozilla_glean_Labeled_h
#
define
mozilla_glean_Labeled_h
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
Boolean
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
Counter
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
CustomDistribution
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
GleanMetric
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
HistogramGIFFTMap
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
MemoryDistribution
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
Quantity
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
ScalarGIFFTMap
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
String
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
TimingDistribution
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
enum
class
DynamicLabel
:
uint16_t
;
namespace
mozilla
:
:
glean
{
namespace
impl
{
nsCString
GetProcessTypeForTelemetry
(
)
;
static
inline
void
UpdateLabeledMirror
(
Telemetry
:
:
ScalarID
aMirrorId
uint32_t
aSubmetricId
const
nsACString
&
aLabel
)
{
GetLabeledMirrorLock
(
)
.
apply
(
[
&
]
(
const
auto
&
lock
)
{
auto
tuple
=
std
:
:
make_tuple
<
Telemetry
:
:
ScalarID
nsString
>
(
std
:
:
move
(
aMirrorId
)
NS_ConvertUTF8toUTF16
(
aLabel
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
aSubmetricId
std
:
:
move
(
tuple
)
)
;
}
)
;
}
static
inline
void
UpdateLabeledDistributionMirror
(
Telemetry
:
:
HistogramID
aMirrorId
uint32_t
aSubmetricId
const
nsACString
&
aLabel
)
{
GetLabeledDistributionMirrorLock
(
)
.
apply
(
[
&
]
(
const
auto
&
lock
)
{
auto
tuple
=
std
:
:
make_tuple
<
Telemetry
:
:
HistogramID
nsCString
>
(
std
:
:
move
(
aMirrorId
)
nsPromiseFlatCString
(
aLabel
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
aSubmetricId
std
:
:
move
(
tuple
)
)
;
}
)
;
}
template
<
typename
T
>
inline
uint32_t
fog_labeled_get
(
uint32_t
aId
const
nsACString
*
aLabel
)
;
template
<
typename
T
>
inline
uint32_t
fog_labeled_enum_get
(
uint32_t
aId
uint16_t
aLabel
)
;
#
define
FOG_LABEL_TYPE_MAP
(
type
name
)
\
template
<
>
\
inline
uint32_t
fog_labeled_get
<
type
>
(
uint32_t
aId
\
const
nsACString
*
aLabel
)
{
\
return
fog_labeled_
#
#
name
#
#
_get
(
aId
aLabel
)
;
\
}
\
template
<
>
\
inline
uint32_t
fog_labeled_enum_get
<
type
>
(
uint32_t
aId
uint16_t
aLabel
)
{
\
return
fog_labeled_
#
#
name
#
#
_enum_get
(
aId
aLabel
)
;
\
}
FOG_LABEL_TYPE_MAP
(
BooleanMetric
boolean
)
FOG_LABEL_TYPE_MAP
(
QuantityMetric
quantity
)
FOG_LABEL_TYPE_MAP
(
StringMetric
string
)
FOG_LABEL_TYPE_MAP
(
CounterMetric
<
CounterType
:
:
eBaseOrLabeled
>
counter
)
FOG_LABEL_TYPE_MAP
(
CustomDistributionMetric
custom_distribution
)
FOG_LABEL_TYPE_MAP
(
MemoryDistributionMetric
memory_distribution
)
FOG_LABEL_TYPE_MAP
(
TimingDistributionMetric
timing_distribution
)
template
<
typename
T
typename
E
>
class
Labeled
{
public
:
constexpr
explicit
Labeled
(
uint32_t
id
)
:
mId
(
id
)
{
}
T
Get
(
const
nsACString
&
aLabel
)
const
{
uint32_t
submetricId
=
fog_labeled_get
<
T
>
(
mId
&
aLabel
)
;
Maybe
<
ScalarID
>
mirrorId
;
if
constexpr
(
MayBeScalarMirror
(
)
)
{
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
UpdateLabeledMirror
(
mirrorId
.
extract
(
)
submetricId
aLabel
)
;
}
}
if
constexpr
(
MayBeDistributionMirror
(
)
)
{
if
(
!
mirrorId
)
{
if
(
Maybe
<
HistogramID
>
mirrorHgramId
=
HistogramIdForMetric
(
mId
)
)
{
UpdateLabeledDistributionMirror
(
mirrorHgramId
.
extract
(
)
submetricId
aLabel
)
;
}
}
}
return
T
(
submetricId
)
;
}
template
<
typename
U
=
T
>
std
:
:
enable_if_t
<
!
std
:
:
is_same_v
<
U
DynamicLabel
>
T
>
EnumGet
(
E
aLabel
)
const
{
uint32_t
submetricId
=
fog_labeled_enum_get
<
T
>
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
)
;
Maybe
<
ScalarID
>
mirrorId
;
if
constexpr
(
MayBeScalarMirror
(
)
)
{
mirrorId
=
ScalarIdForMetric
(
mId
)
;
if
(
mirrorId
)
{
nsCString
label
;
fog_labeled_enum_to_str
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
&
label
)
;
UpdateLabeledMirror
(
mirrorId
.
extract
(
)
submetricId
label
)
;
}
}
if
constexpr
(
MayBeDistributionMirror
(
)
)
{
if
(
!
mirrorId
)
{
if
(
Maybe
<
HistogramID
>
mirrorHgramId
=
HistogramIdForMetric
(
mId
)
)
{
nsCString
label
;
fog_labeled_enum_to_str
(
mId
static_cast
<
uint16_t
>
(
aLabel
)
&
label
)
;
UpdateLabeledDistributionMirror
(
mirrorHgramId
.
extract
(
)
submetricId
label
)
;
}
}
}
return
T
(
submetricId
)
;
}
template
<
typename
U
=
T
typename
V
=
E
>
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
U
TimingDistributionMetric
>
&
&
std
:
:
is_same_v
<
V
DynamicLabel
>
T
>
MaybeTruncateAndGet
(
const
nsACString
&
aLabel
)
const
{
if
(
aLabel
.
Length
(
)
<
112
)
{
return
Get
(
aLabel
)
;
}
nsAutoCStringN
<
111
>
truncated
;
truncated
.
Append
(
aLabel
.
BeginReading
(
)
108
)
;
truncated
+
=
"
.
.
.
"
;
return
Get
(
truncated
)
;
}
T
ProcessGet
(
)
const
{
return
Get
(
GetProcessTypeForTelemetry
(
)
)
;
}
protected
:
uint32_t
mId
;
private
:
static
constexpr
bool
MayBeScalarMirror
(
)
{
return
std
:
:
is_same_v
<
T
BooleanMetric
>
|
|
std
:
:
is_same_v
<
T
CounterMetric
<
CounterType
:
:
eBaseOrLabeled
>
>
|
|
std
:
:
is_same_v
<
T
QuantityMetric
>
;
}
static
constexpr
bool
MayBeDistributionMirror
(
)
{
return
std
:
:
is_same_v
<
T
CounterMetric
<
CounterType
:
:
eBaseOrLabeled
>
>
|
|
std
:
:
is_same_v
<
T
CustomDistributionMetric
>
|
|
std
:
:
is_same_v
<
T
MemoryDistributionMetric
>
|
|
std
:
:
is_same_v
<
T
TimingDistributionMetric
>
;
}
}
;
}
class
GleanLabeled
final
:
public
GleanMetric
{
public
:
explicit
GleanLabeled
(
uint32_t
aId
uint32_t
aTypeId
nsISupports
*
aParent
)
:
GleanMetric
(
aParent
)
mId
(
aId
)
mTypeId
(
aTypeId
)
{
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
final
;
already_AddRefed
<
GleanMetric
>
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
;
bool
NameIsEnumerable
(
const
nsAString
&
aName
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
;
private
:
virtual
~
GleanLabeled
(
)
=
default
;
const
uint32_t
mId
;
const
uint32_t
mTypeId
;
}
;
}
#
endif
