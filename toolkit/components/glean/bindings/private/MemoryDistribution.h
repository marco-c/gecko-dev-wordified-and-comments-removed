#
ifndef
mozilla_glean_GleanMemoryDistribution_h
#
define
mozilla_glean_GleanMemoryDistribution_h
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
glean
{
struct
DistributionData
final
{
uint64_t
sum
;
nsDataHashtable
<
nsUint64HashKey
uint64_t
>
values
;
}
;
namespace
impl
{
class
MemoryDistributionMetric
{
public
:
constexpr
explicit
MemoryDistributionMetric
(
uint32_t
aId
)
:
mId
(
aId
)
{
}
void
Accumulate
(
uint64_t
aSample
)
const
{
fog_memory_distribution_accumulate
(
mId
aSample
)
;
}
Maybe
<
DistributionData
>
TestGetValue
(
const
nsACString
&
aPingName
)
const
{
if
(
!
fog_memory_distribution_test_has_value
(
mId
&
aPingName
)
)
{
return
Nothing
(
)
;
}
nsTArray
<
uint64_t
>
buckets
;
nsTArray
<
uint64_t
>
counts
;
DistributionData
ret
;
fog_memory_distribution_test_get_value
(
mId
&
aPingName
&
ret
.
sum
&
buckets
&
counts
)
;
for
(
size_t
i
=
0
;
i
<
buckets
.
Length
(
)
;
+
+
i
)
{
ret
.
values
.
Put
(
buckets
[
i
]
counts
[
i
]
)
;
}
return
Some
(
std
:
:
move
(
ret
)
)
;
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanMemoryDistribution
final
:
public
nsIGleanMemoryDistribution
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANMEMORYDISTRIBUTION
explicit
GleanMemoryDistribution
(
uint64_t
aId
)
:
mMemoryDist
(
aId
)
{
}
;
private
:
virtual
~
GleanMemoryDistribution
(
)
=
default
;
const
impl
:
:
MemoryDistributionMetric
mMemoryDist
;
}
;
}
#
endif
