#
ifndef
mozilla_glean_GleanTimespan_h
#
define
mozilla_glean_GleanTimespan_h
#
include
"
nsIGleanMetrics
.
h
"
namespace
mozilla
{
namespace
glean
{
namespace
impl
{
extern
"
C
"
{
void
fog_timespan_start
(
uint32_t
id
)
;
void
fog_timespan_stop
(
uint32_t
id
)
;
uint32_t
fog_timespan_test_has_value
(
uint32_t
id
const
char
*
storageName
)
;
int64_t
fog_timespan_test_get_value
(
uint32_t
id
const
char
*
storageName
)
;
}
class
TimespanMetric
{
public
:
constexpr
explicit
TimespanMetric
(
uint32_t
id
)
:
mId
(
id
)
{
}
void
Start
(
)
const
{
fog_timespan_start
(
mId
)
;
}
void
Stop
(
)
const
{
fog_timespan_stop
(
mId
)
;
}
bool
TestHasValue
(
const
char
*
aStorageName
)
const
{
return
fog_timespan_test_has_value
(
mId
aStorageName
)
!
=
0
;
}
int64_t
TestGetValue
(
const
char
*
aStorageName
)
const
{
return
fog_timespan_test_get_value
(
mId
aStorageName
)
;
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanTimespan
final
:
public
nsIGleanTimespan
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANTIMESPAN
explicit
GleanTimespan
(
uint32_t
id
)
:
mTimespan
(
id
)
{
}
;
private
:
virtual
~
GleanTimespan
(
)
=
default
;
const
impl
:
:
TimespanMetric
mTimespan
;
}
;
}
}
#
endif
