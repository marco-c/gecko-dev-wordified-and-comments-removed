#
ifndef
mozilla_glean_GleanTimespan_h
#
define
mozilla_glean_GleanTimespan_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIGleanMetrics
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
namespace
mozilla
:
:
glean
{
namespace
impl
{
class
TimespanMetric
{
public
:
constexpr
explicit
TimespanMetric
(
uint32_t
aId
)
:
mId
(
aId
)
{
}
void
Start
(
)
const
{
auto
optScalarId
=
ScalarIdForMetric
(
mId
)
;
if
(
optScalarId
)
{
auto
scalarId
=
optScalarId
.
extract
(
)
;
auto
lock
=
GetTimesToStartsLock
(
)
;
(
void
)
NS_WARN_IF
(
lock
.
ref
(
)
-
>
Remove
(
scalarId
)
)
;
lock
.
ref
(
)
-
>
InsertOrUpdate
(
scalarId
TimeStamp
:
:
Now
(
)
)
;
}
#
ifndef
MOZ_GLEAN_ANDROID
fog_timespan_start
(
mId
)
;
#
endif
}
void
Stop
(
)
const
{
auto
optScalarId
=
ScalarIdForMetric
(
mId
)
;
if
(
optScalarId
)
{
auto
scalarId
=
optScalarId
.
extract
(
)
;
auto
lock
=
GetTimesToStartsLock
(
)
;
auto
optStart
=
lock
.
ref
(
)
-
>
Extract
(
scalarId
)
;
if
(
!
NS_WARN_IF
(
!
optStart
)
)
{
uint32_t
delta
=
static_cast
<
uint32_t
>
(
(
TimeStamp
:
:
Now
(
)
-
optStart
.
extract
(
)
)
.
ToMilliseconds
(
)
)
;
Telemetry
:
:
ScalarSet
(
scalarId
delta
)
;
}
}
#
ifndef
MOZ_GLEAN_ANDROID
fog_timespan_stop
(
mId
)
;
#
endif
}
void
Cancel
(
)
const
{
auto
optScalarId
=
ScalarIdForMetric
(
mId
)
;
if
(
optScalarId
)
{
auto
scalarId
=
optScalarId
.
extract
(
)
;
auto
lock
=
GetTimesToStartsLock
(
)
;
lock
.
ref
(
)
-
>
Remove
(
scalarId
)
;
}
#
ifndef
MOZ_GLEAN_ANDROID
fog_timespan_cancel
(
mId
)
;
#
endif
}
void
SetRaw
(
uint32_t
aDuration
)
const
{
auto
optScalarId
=
ScalarIdForMetric
(
mId
)
;
if
(
optScalarId
)
{
auto
scalarId
=
optScalarId
.
extract
(
)
;
Telemetry
:
:
ScalarSet
(
scalarId
aDuration
)
;
}
#
ifndef
MOZ_GLEAN_ANDROID
fog_timespan_set_raw
(
mId
aDuration
)
;
#
endif
}
Maybe
<
int64_t
>
TestGetValue
(
const
nsACString
&
aPingName
=
nsCString
(
)
)
const
{
#
ifdef
MOZ_GLEAN_ANDROID
Unused
<
<
mId
;
return
Nothing
(
)
;
#
else
if
(
!
fog_timespan_test_has_value
(
mId
&
aPingName
)
)
{
return
Nothing
(
)
;
}
return
Some
(
fog_timespan_test_get_value
(
mId
&
aPingName
)
)
;
#
endif
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanTimespan
final
:
public
nsIGleanTimespan
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANTIMESPAN
explicit
GleanTimespan
(
uint32_t
aId
)
:
mTimespan
(
aId
)
{
}
;
private
:
virtual
~
GleanTimespan
(
)
=
default
;
const
impl
:
:
TimespanMetric
mTimespan
;
}
;
}
#
endif
