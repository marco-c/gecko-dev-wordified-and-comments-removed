#
ifndef
mozilla_glean_GleanBoolean_h
#
define
mozilla_glean_GleanBoolean_h
#
include
"
mozilla
/
glean
/
bindings
/
ScalarGIFFTMap
.
h
"
#
include
"
mozilla
/
glean
/
fog_ffi_generated
.
h
"
#
include
"
nsIGleanMetrics
.
h
"
namespace
mozilla
{
namespace
glean
{
namespace
impl
{
class
BooleanMetric
{
public
:
constexpr
explicit
BooleanMetric
(
uint32_t
id
)
:
mId
(
id
)
{
}
void
Set
(
bool
aValue
)
const
{
auto
scalarId
=
ScalarIdForMetric
(
mId
)
;
if
(
scalarId
)
{
Telemetry
:
:
ScalarSet
(
scalarId
.
extract
(
)
aValue
)
;
}
else
if
(
IsSubmetricId
(
mId
)
)
{
auto
map
=
gLabeledMirrors
.
Lock
(
)
;
auto
tuple
=
map
-
>
MaybeGet
(
mId
)
;
if
(
tuple
)
{
Telemetry
:
:
ScalarSet
(
Get
<
0
>
(
*
tuple
.
ref
(
)
)
Get
<
1
>
(
*
tuple
.
ref
(
)
)
aValue
)
;
}
}
#
ifndef
MOZ_GLEAN_ANDROID
fog_boolean_set
(
mId
int
(
aValue
)
)
;
#
endif
}
Maybe
<
bool
>
TestGetValue
(
const
nsACString
&
aPingName
=
nsCString
(
)
)
const
{
#
ifdef
MOZ_GLEAN_ANDROID
Unused
<
<
mId
;
return
Nothing
(
)
;
#
else
if
(
!
fog_boolean_test_has_value
(
mId
&
aPingName
)
)
{
return
Nothing
(
)
;
}
return
Some
(
fog_boolean_test_get_value
(
mId
&
aPingName
)
)
;
#
endif
}
private
:
const
uint32_t
mId
;
}
;
}
class
GleanBoolean
final
:
public
nsIGleanBoolean
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGLEANBOOLEAN
explicit
GleanBoolean
(
uint32_t
id
)
:
mBoolean
(
id
)
{
}
;
private
:
virtual
~
GleanBoolean
(
)
=
default
;
const
impl
:
:
BooleanMetric
mBoolean
;
}
;
}
}
#
endif
