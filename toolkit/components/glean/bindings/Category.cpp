#
include
"
mozilla
/
dom
/
GleanBinding
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
Glean
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
Category
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
GleanJSMetricsLookup
.
h
"
#
include
"
mozilla
/
glean
/
bindings
/
jog
/
JOG
.
h
"
namespace
mozilla
:
:
glean
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0
(
Category
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
Category
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
Category
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Category
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
JSObject
*
Category
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
GleanCategory_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
nsISupports
>
Category
:
:
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
{
aFound
=
false
;
nsCString
metricName
;
metricName
.
AppendASCII
(
mName
)
;
metricName
.
AppendLiteral
(
"
.
"
)
;
AppendUTF16toUTF8
(
aName
metricName
)
;
Maybe
<
uint32_t
>
metricIdx
=
JOG
:
:
GetMetric
(
metricName
)
;
if
(
metricIdx
.
isNothing
(
)
&
&
!
JOG
:
:
AreRuntimeMetricsComprehensive
(
)
)
{
metricIdx
=
MetricByNameLookup
(
metricName
)
;
}
if
(
metricIdx
.
isNothing
(
)
)
{
aFound
=
false
;
return
nullptr
;
}
aFound
=
true
;
return
NewMetricFromId
(
metricIdx
.
value
(
)
)
;
}
bool
Category
:
:
NameIsEnumerable
(
const
nsAString
&
aName
)
{
return
false
;
}
void
Category
:
:
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
{
if
(
!
JOG
:
:
AreRuntimeMetricsComprehensive
(
)
)
{
for
(
metric_entry_t
entry
:
sMetricByNameLookupEntries
)
{
const
char
*
identifierBuf
=
GetMetricIdentifier
(
entry
)
;
nsDependentCString
identifier
(
identifierBuf
)
;
if
(
identifier
.
Find
(
mName
false
0
1
)
=
=
0
&
&
identifier
.
CharAt
(
mName
.
Length
(
)
)
=
=
'
.
'
)
{
const
char
*
metricName
=
&
identifierBuf
[
mName
.
Length
(
)
+
1
]
;
aNames
.
AppendElement
(
)
-
>
AssignASCII
(
metricName
)
;
}
}
}
}
}
