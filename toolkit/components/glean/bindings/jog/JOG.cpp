#
include
"
mozilla
/
glean
/
bindings
/
jog
/
JOG
.
h
"
#
include
<
locale
>
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
:
:
glean
{
StaticAutoPtr
<
nsTHashSet
<
nsCString
>
>
gCategories
;
StaticAutoPtr
<
nsTHashMap
<
nsCString
uint32_t
>
>
gMetrics
;
bool
JOG
:
:
HasCategory
(
const
nsACString
&
aCategoryName
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
gCategories
&
&
gCategories
-
>
Contains
(
aCategoryName
)
;
}
bool
JOG
:
:
EnsureRuntimeMetricsRegistered
(
bool
aForce
)
{
return
false
;
}
bool
JOG
:
:
AreRuntimeMetricsComprehensive
(
)
{
return
false
;
}
void
JOG
:
:
GetCategoryNames
(
nsTArray
<
nsString
>
&
aNames
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gCategories
)
{
return
;
}
for
(
const
auto
&
category
:
*
gCategories
)
{
aNames
.
EmplaceBack
(
NS_ConvertUTF8toUTF16
(
category
)
)
;
}
}
Maybe
<
uint32_t
>
JOG
:
:
GetMetric
(
const
nsACString
&
aMetricName
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
!
gMetrics
?
Nothing
(
)
:
gMetrics
-
>
MaybeGet
(
aMetricName
)
;
}
}
nsCString
dottedSnakeToCamel
(
const
nsACString
&
aSnake
)
{
nsCString
camel
;
bool
first
=
true
;
for
(
const
nsACString
&
segment
:
aSnake
.
Split
(
'
_
'
)
)
{
for
(
const
nsACString
&
part
:
segment
.
Split
(
'
.
'
)
)
{
if
(
first
)
{
first
=
false
;
camel
.
Append
(
part
)
;
}
else
if
(
part
.
Length
(
)
)
{
char
lower
=
part
.
CharAt
(
0
)
;
if
(
'
a
'
<
=
lower
&
&
lower
<
=
'
z
'
)
{
camel
.
Append
(
std
:
:
toupper
(
lower
std
:
:
locale
(
)
)
)
;
camel
.
Append
(
part
.
BeginReading
(
)
+
1
part
.
Length
(
)
-
1
)
;
}
else
{
camel
.
Append
(
part
)
;
}
}
}
}
return
camel
;
}
using
mozilla
:
:
AppShutdown
;
using
mozilla
:
:
ShutdownPhase
;
using
mozilla
:
:
glean
:
:
gCategories
;
using
mozilla
:
:
glean
:
:
gMetrics
;
extern
"
C
"
NS_EXPORT
void
JOG_RegisterMetric
(
const
nsACString
&
aCategory
const
nsACString
&
aName
uint32_t
aMetric
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
return
;
}
auto
categoryCamel
=
dottedSnakeToCamel
(
aCategory
)
;
auto
nameCamel
=
dottedSnakeToCamel
(
aName
)
;
if
(
!
gCategories
)
{
gCategories
=
new
nsTHashSet
<
nsCString
>
(
)
;
RunOnShutdown
(
[
&
]
{
gCategories
=
nullptr
;
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
}
gCategories
-
>
Insert
(
categoryCamel
)
;
if
(
!
gMetrics
)
{
gMetrics
=
new
nsTHashMap
<
nsCString
uint32_t
>
(
)
;
RunOnShutdown
(
[
&
]
{
gMetrics
=
nullptr
;
}
ShutdownPhase
:
:
XPCOMWillShutdown
)
;
}
gMetrics
-
>
InsertOrUpdate
(
categoryCamel
+
"
.
"
_ns
+
nameCamel
aMetric
)
;
}
