"
use
strict
"
;
const
{
ComponentUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ComponentUtils
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
Downloads
:
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
ServiceWorkerCleanUp
:
"
resource
:
/
/
gre
/
modules
/
ServiceWorkerCleanUp
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
sas
"
"
mozilla
.
org
/
storage
/
activity
-
service
;
1
"
"
nsIStorageActivityService
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
TrackingDBService
"
"
mozilla
.
org
/
tracking
-
db
-
service
;
1
"
"
nsITrackingDBService
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gFirstPartyIsolateUseSite
"
"
privacy
.
firstparty
.
isolate
.
use_site
"
false
)
;
function
getBaseDomainFromPartitionKey
(
partitionKey
)
{
if
(
!
partitionKey
?
.
length
)
{
return
undefined
;
}
if
(
gFirstPartyIsolateUseSite
)
{
return
partitionKey
;
}
let
entries
=
partitionKey
.
substr
(
1
partitionKey
.
length
-
2
)
.
split
(
"
"
)
;
if
(
entries
.
length
<
2
)
{
return
undefined
;
}
return
entries
[
1
]
;
}
function
hasBaseDomain
(
{
host
originAttributes
=
null
}
aBaseDomain
)
{
if
(
Services
.
eTLD
.
hasRootDomain
(
host
aBaseDomain
)
)
{
return
true
;
}
if
(
!
originAttributes
)
{
return
false
;
}
let
partitionKeyBaseDomain
=
getBaseDomainFromPartitionKey
(
originAttributes
.
partitionKey
)
;
return
partitionKeyBaseDomain
&
&
partitionKeyBaseDomain
=
=
aBaseDomain
;
}
const
CookieCleaner
=
{
deleteByLocalFiles
(
aOriginAttributes
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cookies
.
removeCookiesFromExactHost
(
"
"
JSON
.
stringify
(
aOriginAttributes
)
)
;
aResolve
(
)
;
}
)
;
}
deleteByHost
(
aHost
aOriginAttributes
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cookies
.
removeCookiesFromExactHost
(
aHost
JSON
.
stringify
(
aOriginAttributes
)
)
;
aResolve
(
)
;
}
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
async
deleteByBaseDomain
(
aDomain
)
{
Services
.
cookies
.
cookies
.
filter
(
(
{
rawHost
originAttributes
}
)
=
>
hasBaseDomain
(
{
host
:
rawHost
originAttributes
}
aDomain
)
)
.
forEach
(
cookie
=
>
{
Services
.
cookies
.
removeCookiesFromExactHost
(
cookie
.
rawHost
JSON
.
stringify
(
cookie
.
originAttributes
)
)
;
}
)
;
}
deleteByRange
(
aFrom
aTo
)
{
return
Services
.
cookies
.
removeAllSince
(
aFrom
)
;
}
deleteByOriginAttributes
(
aOriginAttributesString
)
{
return
new
Promise
(
aResolve
=
>
{
try
{
Services
.
cookies
.
removeCookiesWithOriginAttributes
(
aOriginAttributesString
)
;
}
catch
(
ex
)
{
}
aResolve
(
)
;
}
)
;
}
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cookies
.
removeAll
(
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
CertCleaner
=
{
async
deleteByHost
(
aHost
aOriginAttributes
)
{
let
overrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
overrideService
.
clearValidityOverride
(
aHost
-
1
aOriginAttributes
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
async
deleteByBaseDomain
(
aBaseDomain
)
{
let
overrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
overrideService
.
getOverrides
(
)
.
filter
(
(
{
asciiHost
}
)
=
>
hasBaseDomain
(
{
host
:
asciiHost
}
aBaseDomain
)
)
.
forEach
(
(
{
asciiHost
port
}
)
=
>
overrideService
.
clearValidityOverride
(
asciiHost
port
{
}
)
)
;
}
async
deleteAll
(
)
{
let
overrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
overrideService
.
clearAllOverrides
(
)
;
}
}
;
const
NetworkCacheCleaner
=
{
async
deleteByHost
(
aHost
aOriginAttributes
)
{
let
httpURI
=
Services
.
io
.
newURI
(
"
http
:
/
/
"
+
aHost
)
;
let
httpsURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
"
+
aHost
)
;
let
httpPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
httpURI
aOriginAttributes
)
;
let
httpsPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
httpsURI
aOriginAttributes
)
;
Services
.
cache2
.
clearOrigin
(
httpPrincipal
)
;
Services
.
cache2
.
clearOrigin
(
httpsPrincipal
)
;
}
async
deleteByBaseDomain
(
aBaseDomain
)
{
Services
.
cache2
.
clearBaseDomain
(
aBaseDomain
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cache2
.
clearOrigin
(
aPrincipal
)
;
aResolve
(
)
;
}
)
;
}
deleteByOriginAttributes
(
aOriginAttributesString
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cache2
.
clearOriginAttributes
(
aOriginAttributesString
)
;
aResolve
(
)
;
}
)
;
}
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cache2
.
clear
(
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
CSSCacheCleaner
=
{
async
deleteByHost
(
aHost
aOriginAttributes
)
{
let
httpURI
=
Services
.
io
.
newURI
(
"
http
:
/
/
"
+
aHost
)
;
let
httpsURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
"
+
aHost
)
;
let
httpPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
httpURI
aOriginAttributes
)
;
let
httpsPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
httpsURI
aOriginAttributes
)
;
ChromeUtils
.
clearStyleSheetCacheByPrincipal
(
httpPrincipal
)
;
ChromeUtils
.
clearStyleSheetCacheByPrincipal
(
httpsPrincipal
)
;
}
async
deleteByPrincipal
(
aPrincipal
)
{
ChromeUtils
.
clearStyleSheetCacheByPrincipal
(
aPrincipal
)
;
}
async
deleteByBaseDomain
(
aBaseDomain
)
{
ChromeUtils
.
clearStyleSheetCacheByBaseDomain
(
aBaseDomain
)
;
}
async
deleteAll
(
)
{
ChromeUtils
.
clearStyleSheetCache
(
)
;
}
}
;
const
ImageCacheCleaner
=
{
async
deleteByHost
(
aHost
aOriginAttributes
)
{
let
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
let
httpURI
=
Services
.
io
.
newURI
(
"
http
:
/
/
"
+
aHost
)
;
let
httpsURI
=
Services
.
io
.
newURI
(
"
https
:
/
/
"
+
aHost
)
;
let
httpPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
httpURI
aOriginAttributes
)
;
let
httpsPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
httpsURI
aOriginAttributes
)
;
imageCache
.
removeEntriesFromPrincipalInAllProcesses
(
httpPrincipal
)
;
imageCache
.
removeEntriesFromPrincipalInAllProcesses
(
httpsPrincipal
)
;
}
async
deleteByPrincipal
(
aPrincipal
)
{
let
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
imageCache
.
removeEntriesFromPrincipalInAllProcesses
(
aPrincipal
)
;
}
async
deleteByBaseDomain
(
aBaseDomain
)
{
let
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
imageCache
.
removeEntriesFromBaseDomainInAllProcesses
(
aBaseDomain
)
;
}
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
let
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
imageCache
.
clearCache
(
false
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
DownloadsCleaner
=
{
async
_deleteInternal
(
{
hostOrBaseDomain
principal
originAttributes
}
)
{
originAttributes
=
originAttributes
|
|
principal
?
.
originAttributes
|
|
{
}
;
let
list
=
await
Downloads
.
getList
(
Downloads
.
ALL
)
;
list
.
removeFinished
(
(
{
source
}
)
=
>
{
if
(
"
userContextId
"
in
originAttributes
&
&
"
userContextId
"
in
source
&
&
originAttributes
.
userContextId
!
=
source
.
userContextId
)
{
return
false
;
}
if
(
"
privateBrowsingId
"
in
originAttributes
&
&
!
!
originAttributes
.
privateBrowsingId
!
=
source
.
isPrivate
)
{
return
false
;
}
let
entryURI
=
Services
.
io
.
newURI
(
source
.
url
)
;
if
(
hostOrBaseDomain
)
{
return
Services
.
eTLD
.
hasRootDomain
(
entryURI
.
host
hostOrBaseDomain
)
;
}
if
(
principal
)
{
return
principal
.
equalsURI
(
entryURI
)
;
}
return
false
;
}
)
;
}
async
deleteByHost
(
aHost
aOriginAttributes
)
{
return
this
.
_deleteInternal
(
{
hostOrBaseDomain
:
aHost
originAttributes
:
aOriginAttributes
}
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
_deleteInternal
(
{
principal
:
aPrincipal
}
)
;
}
async
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
_deleteInternal
(
{
hostOrBaseDomain
:
aBaseDomain
}
)
;
}
deleteByRange
(
aFrom
aTo
)
{
let
rangeBeginMs
=
aFrom
/
1000
;
let
rangeEndMs
=
aTo
/
1000
;
return
Downloads
.
getList
(
Downloads
.
ALL
)
.
then
(
aList
=
>
{
aList
.
removeFinished
(
aDownload
=
>
aDownload
.
startTime
>
=
rangeBeginMs
&
&
aDownload
.
startTime
<
=
rangeEndMs
)
;
}
)
;
}
deleteAll
(
)
{
return
Downloads
.
getList
(
Downloads
.
ALL
)
.
then
(
aList
=
>
{
aList
.
removeFinished
(
null
)
;
}
)
;
}
}
;
const
PasswordsCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
return
this
.
_deleteInternal
(
aLogin
=
>
Services
.
eTLD
.
hasRootDomain
(
aLogin
.
hostname
aHost
)
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
_deleteInternal
(
aLogin
=
>
aLogin
.
origin
=
=
aPrincipal
.
originNoSuffix
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
_deleteInternal
(
aLogin
=
>
Services
.
eTLD
.
hasRootDomain
(
aLogin
.
hostname
aBaseDomain
)
)
;
}
deleteAll
(
)
{
return
this
.
_deleteInternal
(
(
)
=
>
true
)
;
}
async
_deleteInternal
(
aCb
)
{
try
{
let
logins
=
Services
.
logins
.
getAllLogins
(
)
;
for
(
let
login
of
logins
)
{
if
(
aCb
(
login
)
)
{
Services
.
logins
.
removeLogin
(
login
)
;
}
}
}
catch
(
ex
)
{
if
(
!
ex
.
message
.
includes
(
"
User
canceled
Master
Password
entry
"
)
&
&
ex
.
result
!
=
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
{
throw
new
Error
(
"
Exception
occured
in
clearing
passwords
:
"
+
ex
)
;
}
}
}
}
;
const
MediaDevicesCleaner
=
{
async
deleteByRange
(
aFrom
aTo
)
{
let
mediaMgr
=
Cc
[
"
mozilla
.
org
/
mediaManagerService
;
1
"
]
.
getService
(
Ci
.
nsIMediaManagerService
)
;
mediaMgr
.
sanitizeDeviceIds
(
aFrom
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteAll
(
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteAll
(
)
;
}
async
deleteAll
(
)
{
let
mediaMgr
=
Cc
[
"
mozilla
.
org
/
mediaManagerService
;
1
"
]
.
getService
(
Ci
.
nsIMediaManagerService
)
;
mediaMgr
.
sanitizeDeviceIds
(
null
)
;
}
}
;
const
QuotaCleaner
=
{
deleteByPrincipal
(
aPrincipal
)
{
Services
.
obs
.
notifyObservers
(
null
"
extension
:
purge
-
localStorage
"
aPrincipal
.
host
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
sessionStorage
"
aPrincipal
.
host
)
;
return
ServiceWorkerCleanUp
.
removeFromPrincipal
(
aPrincipal
)
.
then
(
_
=
>
false
_
=
>
true
)
.
then
(
exceptionThrown
=
>
{
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
req
=
Services
.
qms
.
clearStoragesForPrincipal
(
aPrincipal
)
;
req
.
callback
=
(
)
=
>
{
if
(
exceptionThrown
|
|
req
.
resultCode
!
=
Cr
.
NS_OK
)
{
aReject
(
{
message
:
"
Delete
by
principal
failed
"
}
)
;
}
else
{
aResolve
(
)
;
}
}
;
}
)
;
}
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteByHost
(
aBaseDomain
{
}
)
;
}
deleteByHost
(
aHost
aOriginAttributes
)
{
Services
.
obs
.
notifyObservers
(
null
"
extension
:
purge
-
localStorage
"
aHost
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
sessionStorage
"
aHost
)
;
return
ServiceWorkerCleanUp
.
removeFromHost
(
aHost
)
.
then
(
_
=
>
false
_
=
>
true
)
.
then
(
exceptionThrown
=
>
{
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
Services
.
qms
.
listOrigins
(
)
.
callback
=
aRequest
=
>
{
if
(
aRequest
.
resultCode
!
=
Cr
.
NS_OK
)
{
aReject
(
{
message
:
"
Delete
by
host
failed
"
}
)
;
return
;
}
let
promises
=
[
]
;
for
(
const
origin
of
aRequest
.
result
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
origin
)
;
let
host
;
try
{
host
=
principal
.
host
;
}
catch
(
e
)
{
continue
;
}
if
(
Services
.
eTLD
.
hasRootDomain
(
host
aHost
)
)
{
promises
.
push
(
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
clearRequest
=
Services
.
qms
.
clearStoragesForPrincipal
(
principal
)
;
clearRequest
.
callback
=
(
)
=
>
{
if
(
clearRequest
.
resultCode
=
=
Cr
.
NS_OK
)
{
aResolve
(
)
;
}
else
{
aReject
(
{
message
:
"
Delete
by
host
failed
"
}
)
;
}
}
;
}
)
)
;
}
}
Promise
.
all
(
promises
)
.
then
(
exceptionThrown
?
aReject
:
aResolve
)
;
}
;
}
)
;
}
)
;
}
deleteByRange
(
aFrom
aTo
)
{
let
principals
=
sas
.
getActiveOrigins
(
aFrom
aTo
)
.
QueryInterface
(
Ci
.
nsIArray
)
;
let
promises
=
[
]
;
for
(
let
i
=
0
;
i
<
principals
.
length
;
+
+
i
)
{
let
principal
=
principals
.
queryElementAt
(
i
Ci
.
nsIPrincipal
)
;
if
(
!
principal
.
schemeIs
(
"
http
"
)
&
&
!
principal
.
schemeIs
(
"
https
"
)
&
&
!
principal
.
schemeIs
(
"
file
"
)
)
{
continue
;
}
promises
.
push
(
this
.
deleteByPrincipal
(
principal
)
)
;
}
return
Promise
.
all
(
promises
)
;
}
deleteByOriginAttributes
(
aOriginAttributesString
)
{
return
ServiceWorkerCleanUp
.
removeFromOriginAttributes
(
aOriginAttributesString
)
.
then
(
_
=
>
false
_
=
>
true
)
.
then
(
exceptionThrown
=
>
{
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
req
=
Services
.
qms
.
clearStoragesForOriginAttributesPattern
(
aOriginAttributesString
)
;
req
.
callback
=
(
)
=
>
{
if
(
req
.
resultCode
=
=
Cr
.
NS_OK
)
{
aResolve
(
)
;
}
else
{
aReject
(
{
message
:
"
Delete
by
origin
attributes
failed
"
}
)
;
}
}
;
}
)
;
}
)
;
}
deleteAll
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
extension
:
purge
-
localStorage
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
sessionStorage
"
)
;
return
ServiceWorkerCleanUp
.
removeAll
(
)
.
then
(
_
=
>
false
_
=
>
true
)
.
then
(
exceptionThrown
=
>
{
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
Services
.
qms
.
getUsage
(
aRequest
=
>
{
if
(
aRequest
.
resultCode
!
=
Cr
.
NS_OK
)
{
aReject
(
{
message
:
"
Delete
all
failed
"
}
)
;
return
;
}
let
promises
=
[
]
;
for
(
let
item
of
aRequest
.
result
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
item
.
origin
)
;
if
(
principal
.
schemeIs
(
"
http
"
)
|
|
principal
.
schemeIs
(
"
https
"
)
|
|
principal
.
schemeIs
(
"
file
"
)
)
{
promises
.
push
(
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
req
=
Services
.
qms
.
clearStoragesForPrincipal
(
principal
)
;
req
.
callback
=
(
)
=
>
{
if
(
req
.
resultCode
=
=
Cr
.
NS_OK
)
{
aResolve
(
)
;
}
else
{
aReject
(
{
message
:
"
Delete
all
failed
"
}
)
;
}
}
;
}
)
)
;
}
}
Promise
.
all
(
promises
)
.
then
(
exceptionThrown
?
aReject
:
aResolve
)
;
}
)
;
}
)
;
}
)
;
}
}
;
const
PredictorNetworkCleaner
=
{
async
deleteAll
(
)
{
let
np
=
Cc
[
"
mozilla
.
org
/
network
/
predictor
;
1
"
]
.
getService
(
Ci
.
nsINetworkPredictor
)
;
np
.
reset
(
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteAll
(
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteAll
(
)
;
}
}
;
const
PushNotificationsCleaner
=
{
_deleteByRootDomain
(
aDomain
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
dom
.
push
.
enabled
"
false
)
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
push
=
Cc
[
"
mozilla
.
org
/
push
/
Service
;
1
"
]
.
getService
(
Ci
.
nsIPushService
)
;
push
.
clearForDomain
(
aDomain
aStatus
=
>
{
if
(
!
Components
.
isSuccessCode
(
aStatus
)
)
{
aReject
(
)
;
}
else
{
aResolve
(
)
;
}
}
)
;
}
)
;
}
deleteByHost
(
aHost
aOriginAttributes
)
{
return
this
.
_deleteByRootDomain
(
aHost
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
_deleteByRootDomain
(
aPrincipal
.
host
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
_deleteByRootDomain
(
aBaseDomain
)
;
}
deleteAll
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
dom
.
push
.
enabled
"
false
)
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
push
=
Cc
[
"
mozilla
.
org
/
push
/
Service
;
1
"
]
.
getService
(
Ci
.
nsIPushService
)
;
push
.
clearForDomain
(
"
*
"
aStatus
=
>
{
if
(
!
Components
.
isSuccessCode
(
aStatus
)
)
{
aReject
(
)
;
}
else
{
aResolve
(
)
;
}
}
)
;
}
)
;
}
}
;
const
StorageAccessCleaner
=
{
async
deleteExceptPrincipals
(
aPrincipalsWithStorage
aFrom
)
{
let
baseDomainsWithStorage
=
new
Set
(
)
;
for
(
let
principal
of
aPrincipalsWithStorage
)
{
baseDomainsWithStorage
.
add
(
principal
.
baseDomain
)
;
}
for
(
let
perm
of
Services
.
perms
.
getAllByTypeSince
(
"
storageAccessAPI
"
aFrom
)
)
{
if
(
!
baseDomainsWithStorage
.
has
(
perm
.
principal
.
baseDomain
)
)
{
Services
.
perms
.
removePermission
(
perm
)
;
}
}
}
async
deleteByPrincipal
(
aPrincipal
)
{
return
Services
.
perms
.
removeFromPrincipal
(
aPrincipal
"
storageAccessAPI
"
)
;
}
_deleteInternal
(
filter
)
{
Services
.
perms
.
all
.
filter
(
(
{
type
}
)
=
>
type
=
=
"
storageAccessAPI
"
)
.
filter
(
filter
)
.
forEach
(
perm
=
>
{
try
{
Services
.
perms
.
removePermission
(
perm
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
)
;
}
async
deleteByHost
(
aHost
aOriginAttributes
)
{
this
.
_deleteInternal
(
(
{
principal
}
)
=
>
{
let
toBeRemoved
=
false
;
try
{
toBeRemoved
=
Services
.
eTLD
.
hasRootDomain
(
principal
.
host
aHost
)
;
}
catch
(
ex
)
{
}
return
toBeRemoved
;
}
)
;
}
async
deleteByBaseDomain
(
aBaseDomain
)
{
this
.
_deleteInternal
(
(
{
principal
}
)
=
>
principal
.
baseDomain
=
=
aBaseDomain
)
;
}
async
deleteByRange
(
aFrom
aTo
)
{
Services
.
perms
.
removeByTypeSince
(
"
storageAccessAPI
"
aFrom
/
1000
)
;
}
async
deleteAll
(
)
{
Services
.
perms
.
removeByType
(
"
storageAccessAPI
"
)
;
}
}
;
const
HistoryCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
if
(
!
AppConstants
.
MOZ_PLACES
)
{
return
Promise
.
resolve
(
)
;
}
return
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
.
"
+
aHost
}
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
if
(
!
AppConstants
.
MOZ_PLACES
)
{
return
Promise
.
resolve
(
)
;
}
return
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
aPrincipal
.
host
}
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteByHost
(
aBaseDomain
{
}
)
;
}
deleteByRange
(
aFrom
aTo
)
{
if
(
!
AppConstants
.
MOZ_PLACES
)
{
return
Promise
.
resolve
(
)
;
}
return
PlacesUtils
.
history
.
removeVisitsByFilter
(
{
beginDate
:
new
Date
(
aFrom
/
1000
)
endDate
:
new
Date
(
aTo
/
1000
)
}
)
;
}
deleteAll
(
)
{
if
(
!
AppConstants
.
MOZ_PLACES
)
{
return
Promise
.
resolve
(
)
;
}
return
PlacesUtils
.
history
.
clear
(
)
;
}
}
;
const
SessionHistoryCleaner
=
{
async
deleteByHost
(
aHost
aOriginAttributes
)
{
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
sessionStorage
"
aHost
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
-
for
-
domain
"
aHost
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteByHost
(
aBaseDomain
{
}
)
;
}
async
deleteByRange
(
aFrom
aTo
)
{
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
"
String
(
aFrom
)
)
;
}
async
deleteAll
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
"
)
;
}
}
;
const
AuthTokensCleaner
=
{
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteAll
(
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteAll
(
)
;
}
async
deleteAll
(
)
{
let
sdr
=
Cc
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Ci
.
nsISecretDecoderRing
)
;
sdr
.
logoutAndTeardown
(
)
;
}
}
;
const
AuthCacheCleaner
=
{
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteAll
(
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteAll
(
)
;
}
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
obs
.
notifyObservers
(
null
"
net
:
clear
-
active
-
logins
"
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
PermissionsCleaner
=
{
async
_deleteInternal
(
{
baseDomain
host
}
)
{
for
(
let
perm
of
Services
.
perms
.
all
)
{
let
toBeRemoved
;
if
(
baseDomain
)
{
toBeRemoved
=
perm
.
principal
.
baseDomain
=
=
baseDomain
;
}
else
{
try
{
toBeRemoved
=
Services
.
eTLD
.
hasRootDomain
(
perm
.
principal
.
host
host
)
;
}
catch
(
ex
)
{
continue
;
}
}
if
(
!
toBeRemoved
&
&
perm
.
type
.
startsWith
(
"
3rdPartyStorage
^
"
)
)
{
let
parts
=
perm
.
type
.
split
(
"
^
"
)
;
let
uri
;
try
{
uri
=
Services
.
io
.
newURI
(
parts
[
1
]
)
;
}
catch
(
ex
)
{
continue
;
}
toBeRemoved
=
Services
.
eTLD
.
hasRootDomain
(
uri
.
host
baseDomain
|
|
host
)
;
}
if
(
!
toBeRemoved
)
{
continue
;
}
try
{
Services
.
perms
.
removePermission
(
perm
)
;
}
catch
(
ex
)
{
}
}
}
deleteByHost
(
aHost
aOriginAttributes
)
{
return
this
.
_deleteInternal
(
{
host
:
aHost
}
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
_deleteInternal
(
{
baseDomain
:
aBaseDomain
}
)
;
}
async
deleteByRange
(
aFrom
aTo
)
{
Services
.
perms
.
removeAllSince
(
aFrom
/
1000
)
;
}
async
deleteByOriginAttributes
(
aOriginAttributesString
)
{
Services
.
perms
.
removePermissionsWithAttributes
(
aOriginAttributesString
)
;
}
async
deleteAll
(
)
{
Services
.
perms
.
removeAll
(
)
;
}
}
;
const
PreferencesCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
cps2
=
Cc
[
"
mozilla
.
org
/
content
-
pref
/
service
;
1
"
]
.
getService
(
Ci
.
nsIContentPrefService2
)
;
cps2
.
removeBySubdomain
(
aHost
null
{
handleCompletion
:
aReason
=
>
{
if
(
aReason
=
=
=
cps2
.
COMPLETE_ERROR
)
{
aReject
(
)
;
}
else
{
aResolve
(
)
;
}
}
handleError
(
)
{
}
}
)
;
}
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteByHost
(
aBaseDomain
{
}
)
;
}
async
deleteByRange
(
aFrom
aTo
)
{
let
cps2
=
Cc
[
"
mozilla
.
org
/
content
-
pref
/
service
;
1
"
]
.
getService
(
Ci
.
nsIContentPrefService2
)
;
cps2
.
removeAllDomainsSince
(
aFrom
/
1000
null
)
;
}
async
deleteAll
(
)
{
let
cps2
=
Cc
[
"
mozilla
.
org
/
content
-
pref
/
service
;
1
"
]
.
getService
(
Ci
.
nsIContentPrefService2
)
;
cps2
.
removeAllDomains
(
null
)
;
}
}
;
const
SecuritySettingsCleaner
=
{
async
deleteByHost
(
aHost
aOriginAttributes
)
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
for
(
let
entry
of
sss
.
enumerate
(
)
)
{
let
hostname
=
entry
.
hostname
;
if
(
Services
.
eTLD
.
hasRootDomain
(
hostname
aHost
)
)
{
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
"
+
hostname
)
;
sss
.
resetState
(
uri
0
entry
.
originAttributes
)
;
}
}
let
cars
=
Cc
[
"
mozilla
.
org
/
security
/
clientAuthRememberService
;
1
"
]
.
getService
(
Ci
.
nsIClientAuthRememberService
)
;
cars
.
deleteDecisionsByHost
(
aHost
aOriginAttributes
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
async
deleteByBaseDomain
(
aDomain
)
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
Array
.
from
(
sss
.
enumerate
(
)
)
.
filter
(
(
{
hostname
originAttributes
}
)
=
>
hasBaseDomain
(
{
host
:
hostname
originAttributes
}
aDomain
)
)
.
forEach
(
(
{
hostname
originAttributes
}
)
=
>
{
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
"
+
hostname
)
;
sss
.
resetState
(
uri
0
originAttributes
)
;
}
)
;
let
cars
=
Cc
[
"
mozilla
.
org
/
security
/
clientAuthRememberService
;
1
"
]
.
getService
(
Ci
.
nsIClientAuthRememberService
)
;
cars
.
getDecisions
(
)
.
filter
(
(
{
asciiHost
entryKey
}
)
=
>
{
let
originSuffixEncoded
=
entryKey
.
split
(
"
"
)
[
2
]
;
let
originAttributes
;
if
(
originSuffixEncoded
)
{
try
{
let
originSuffix
=
decodeURIComponent
(
originSuffixEncoded
)
;
originAttributes
=
ChromeUtils
.
CreateOriginAttributesFromOriginSuffix
(
originSuffix
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
return
hasBaseDomain
(
{
host
:
asciiHost
originAttributes
}
aDomain
)
;
}
)
.
forEach
(
(
{
entryKey
}
)
=
>
cars
.
forgetRememberedDecision
(
entryKey
)
)
;
}
async
deleteAll
(
)
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
sss
.
clearAll
(
)
;
let
cars
=
Cc
[
"
mozilla
.
org
/
security
/
clientAuthRememberService
;
1
"
]
.
getService
(
Ci
.
nsIClientAuthRememberService
)
;
cars
.
clearRememberedDecisions
(
)
;
}
}
;
const
EMECleaner
=
{
async
deleteByHost
(
aHost
aOriginAttributes
)
{
let
mps
=
Cc
[
"
mozilla
.
org
/
gecko
-
media
-
plugin
-
service
;
1
"
]
.
getService
(
Ci
.
mozIGeckoMediaPluginChromeService
)
;
mps
.
forgetThisSite
(
aHost
JSON
.
stringify
(
aOriginAttributes
)
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
async
deleteByBaseDomain
(
aBaseDomain
)
{
let
mps
=
Cc
[
"
mozilla
.
org
/
gecko
-
media
-
plugin
-
service
;
1
"
]
.
getService
(
Ci
.
mozIGeckoMediaPluginChromeService
)
;
mps
.
forgetThisBaseDomain
(
aBaseDomain
)
;
}
deleteAll
(
)
{
return
Promise
.
resolve
(
)
;
}
}
;
const
ReportsCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
obs
.
notifyObservers
(
null
"
reporting
:
purge
-
host
"
aHost
)
;
aResolve
(
)
;
}
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteByHost
(
aPrincipal
.
host
aPrincipal
.
originAttributes
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteByHost
(
aBaseDomain
{
}
)
;
}
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
obs
.
notifyObservers
(
null
"
reporting
:
purge
-
all
"
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
ContentBlockingCleaner
=
{
deleteAll
(
)
{
return
TrackingDBService
.
clearAll
(
)
;
}
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteAll
(
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteAll
(
)
;
}
deleteByRange
(
aFrom
aTo
)
{
return
TrackingDBService
.
clearSince
(
aFrom
)
;
}
}
;
const
AboutHomeStartupCacheCleaner
=
{
deleteByPrincipal
(
aPrincipal
)
{
return
this
.
deleteAll
(
)
;
}
deleteByBaseDomain
(
aBaseDomain
)
{
return
this
.
deleteAll
(
)
;
}
deleteAll
(
)
{
if
(
!
AppConstants
.
MOZ_BUILD_APP
=
=
"
browser
"
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
lci
=
Services
.
loadContextInfo
.
default
;
let
storage
=
Services
.
cache2
.
diskCacheStorage
(
lci
)
;
let
uri
=
Services
.
io
.
newURI
(
"
about
:
home
"
)
;
try
{
storage
.
asyncDoomURI
(
uri
"
"
{
onCacheEntryDoomed
(
aResult
)
{
if
(
Components
.
isSuccessCode
(
aResult
)
|
|
aResult
=
=
Cr
.
NS_ERROR_NOT_AVAILABLE
)
{
aResolve
(
)
;
}
else
{
aReject
(
{
message
:
"
asyncDoomURI
for
about
:
home
failed
"
}
)
;
}
}
}
)
;
}
catch
(
e
)
{
aReject
(
{
message
:
"
Failed
to
doom
about
:
home
startup
cache
entry
"
}
)
;
}
}
)
;
}
}
;
const
FLAGS_MAP
=
[
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_CERT_EXCEPTIONS
cleaners
:
[
CertCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
cleaners
:
[
CookieCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_NETWORK_CACHE
cleaners
:
[
NetworkCacheCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_IMAGE_CACHE
cleaners
:
[
ImageCacheCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_CSS_CACHE
cleaners
:
[
CSSCacheCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_DOWNLOADS
cleaners
:
[
DownloadsCleaner
AboutHomeStartupCacheCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_PASSWORDS
cleaners
:
[
PasswordsCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_MEDIA_DEVICES
cleaners
:
[
MediaDevicesCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_DOM_QUOTA
cleaners
:
[
QuotaCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_PREDICTOR_NETWORK_DATA
cleaners
:
[
PredictorNetworkCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_DOM_PUSH_NOTIFICATIONS
cleaners
:
[
PushNotificationsCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_HISTORY
cleaners
:
[
HistoryCleaner
AboutHomeStartupCacheCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_SESSION_HISTORY
cleaners
:
[
SessionHistoryCleaner
AboutHomeStartupCacheCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_AUTH_TOKENS
cleaners
:
[
AuthTokensCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_AUTH_CACHE
cleaners
:
[
AuthCacheCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_PERMISSIONS
cleaners
:
[
PermissionsCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_CONTENT_PREFERENCES
cleaners
:
[
PreferencesCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_SECURITY_SETTINGS
cleaners
:
[
SecuritySettingsCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_EME
cleaners
:
[
EMECleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_REPORTS
cleaners
:
[
ReportsCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_STORAGE_ACCESS
cleaners
:
[
StorageAccessCleaner
]
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_CONTENT_BLOCKING_RECORDS
cleaners
:
[
ContentBlockingCleaner
]
}
]
;
this
.
ClearDataService
=
function
(
)
{
this
.
_initialize
(
)
;
}
;
ClearDataService
.
prototype
=
Object
.
freeze
(
{
classID
:
Components
.
ID
(
"
{
0c06583d
-
7dd8
-
4293
-
b1a5
-
912205f779aa
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIClearDataService
"
]
)
_xpcom_factory
:
ComponentUtils
.
generateSingletonFactory
(
ClearDataService
)
_initialize
(
)
{
if
(
!
Services
.
qms
)
{
Cu
.
reportError
(
"
Failed
initializiation
of
QuotaManagerService
.
"
)
;
}
}
deleteDataFromLocalFiles
(
aIsUserRequest
aFlags
aCallback
)
{
if
(
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
if
(
aCleaner
.
deleteByLocalFiles
)
{
return
aCleaner
.
deleteByLocalFiles
(
{
}
)
;
}
return
Promise
.
resolve
(
)
;
}
)
;
}
deleteDataFromHost
(
aHost
aIsUserRequest
aFlags
aCallback
)
{
if
(
!
aHost
|
|
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
if
(
aCleaner
.
deleteByHost
)
{
return
aCleaner
.
deleteByHost
(
aHost
{
}
)
;
}
if
(
aIsUserRequest
)
{
return
aCleaner
.
deleteAll
(
)
;
}
return
Promise
.
resolve
(
)
;
}
)
;
}
deleteDataFromBaseDomain
(
aDomainOrHost
aIsUserRequest
aFlags
aCallback
)
{
if
(
!
aDomainOrHost
|
|
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
let
baseDomain
=
Services
.
eTLD
.
getBaseDomainFromHost
(
aDomainOrHost
)
;
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
aCleaner
.
deleteByBaseDomain
(
baseDomain
aIsUserRequest
)
)
;
}
deleteDataFromPrincipal
(
aPrincipal
aIsUserRequest
aFlags
aCallback
)
{
if
(
!
aPrincipal
|
|
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
aCleaner
.
deleteByPrincipal
(
aPrincipal
aIsUserRequest
)
)
;
}
deleteDataInTimeRange
(
aFrom
aTo
aIsUserRequest
aFlags
aCallback
)
{
if
(
aFrom
>
aTo
|
|
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
if
(
aCleaner
.
deleteByRange
)
{
return
aCleaner
.
deleteByRange
(
aFrom
aTo
)
;
}
if
(
aIsUserRequest
)
{
return
aCleaner
.
deleteAll
(
)
;
}
return
Promise
.
resolve
(
)
;
}
)
;
}
deleteData
(
aFlags
aCallback
)
{
if
(
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
return
aCleaner
.
deleteAll
(
)
;
}
)
;
}
deleteDataFromOriginAttributesPattern
(
aPattern
aCallback
)
{
if
(
!
aPattern
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
let
patternString
=
JSON
.
stringify
(
aPattern
)
;
Services
.
obs
.
notifyObservers
(
null
"
clear
-
origin
-
attributes
-
data
"
patternString
)
;
if
(
!
aCallback
)
{
aCallback
=
{
onDataDeleted
:
(
)
=
>
{
}
}
;
}
return
this
.
_deleteInternal
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
aCallback
aCleaner
=
>
{
if
(
aCleaner
.
deleteByOriginAttributes
)
{
return
aCleaner
.
deleteByOriginAttributes
(
patternString
)
;
}
return
Promise
.
resolve
(
)
;
}
)
;
}
deleteUserInteractionForClearingHistory
(
aPrincipalsWithStorage
aFrom
aCallback
)
{
if
(
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
StorageAccessCleaner
.
deleteExceptPrincipals
(
aPrincipalsWithStorage
aFrom
)
.
then
(
(
)
=
>
{
aCallback
.
onDataDeleted
(
0
)
;
}
)
;
return
Cr
.
NS_OK
;
}
_deleteInternal
(
aFlags
aCallback
aHelper
)
{
let
resultFlags
=
0
;
let
promises
=
FLAGS_MAP
.
filter
(
c
=
>
aFlags
&
c
.
flag
)
.
map
(
c
=
>
{
return
Promise
.
all
(
c
.
cleaners
.
map
(
cleaner
=
>
{
return
aHelper
(
cleaner
)
.
catch
(
e
=
>
{
Cu
.
reportError
(
e
)
;
resultFlags
|
=
c
.
flag
;
}
)
;
}
)
)
;
}
)
;
Promise
.
all
(
promises
)
.
then
(
(
)
=
>
{
aCallback
.
onDataDeleted
(
resultFlags
)
;
}
)
;
return
Cr
.
NS_OK
;
}
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
ClearDataService
"
]
;
