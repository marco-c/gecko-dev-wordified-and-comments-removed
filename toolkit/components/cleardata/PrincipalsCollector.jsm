"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyServiceGetter
(
lazy
"
serviceWorkerManager
"
"
mozilla
.
org
/
serviceworkers
/
manager
;
1
"
"
nsIServiceWorkerManager
"
)
;
class
PrincipalsCollector
{
constructor
(
)
{
this
.
principals
=
null
;
}
static
isSupportedPrincipal
(
principal
)
{
return
[
"
http
"
"
https
"
"
file
"
]
.
some
(
scheme
=
>
principal
.
schemeIs
(
scheme
)
)
;
}
async
getAllPrincipals
(
progress
=
{
}
)
{
if
(
this
.
principals
=
=
null
)
{
this
.
principals
=
await
this
.
_getAllPrincipalsInternal
(
progress
)
;
}
return
this
.
principals
;
}
async
_getAllPrincipalsInternal
(
progress
=
{
}
)
{
progress
.
step
=
"
principals
-
quota
-
manager
"
;
let
principals
=
await
new
Promise
(
resolve
=
>
{
Services
.
qms
.
listOrigins
(
)
.
callback
=
request
=
>
{
progress
.
step
=
"
principals
-
quota
-
manager
-
listOrigins
"
;
if
(
request
.
resultCode
!
=
Cr
.
NS_OK
)
{
resolve
(
[
]
)
;
return
;
}
let
principalsMap
=
new
Map
(
)
;
for
(
const
origin
of
request
.
result
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
origin
)
;
if
(
PrincipalsCollector
.
isSupportedPrincipal
(
principal
)
)
{
principalsMap
.
set
(
principal
.
origin
principal
)
;
}
}
progress
.
step
=
"
principals
-
quota
-
manager
-
completed
"
;
resolve
(
principalsMap
)
;
}
;
}
)
.
catch
(
ex
=
>
{
Cu
.
reportError
(
"
QuotaManagerService
promise
failed
:
"
+
ex
)
;
return
[
]
;
}
)
;
progress
.
step
=
"
principals
-
service
-
workers
"
;
let
serviceWorkers
=
lazy
.
serviceWorkerManager
.
getAllRegistrations
(
)
;
for
(
let
i
=
0
;
i
<
serviceWorkers
.
length
;
i
+
+
)
{
let
sw
=
serviceWorkers
.
queryElementAt
(
i
Ci
.
nsIServiceWorkerRegistrationInfo
)
;
principals
.
set
(
sw
.
principal
.
origin
sw
.
principal
)
;
}
progress
.
step
=
"
principals
-
cookies
"
;
let
cookies
=
Services
.
cookies
.
cookies
;
let
hosts
=
new
Set
(
)
;
for
(
let
cookie
of
cookies
)
{
hosts
.
add
(
cookie
.
rawHost
+
ChromeUtils
.
originAttributesToSuffix
(
cookie
.
originAttributes
)
)
;
}
progress
.
step
=
"
principals
-
host
-
cookie
"
;
hosts
.
forEach
(
host
=
>
{
const
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
"
https
:
/
/
"
+
host
)
;
principals
.
set
(
principal
.
origin
principal
)
;
}
)
;
progress
.
step
=
"
total
-
principals
:
"
+
principals
.
length
;
principals
=
Array
.
from
(
principals
.
values
(
)
)
;
return
principals
;
}
}
const
EXPORTED_SYMBOLS
=
[
"
PrincipalsCollector
"
]
;
