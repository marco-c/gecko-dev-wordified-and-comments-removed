"
use
strict
"
;
add_task
(
async
function
test_all_cookies
(
)
{
const
expiry
=
Date
.
now
(
)
+
24
*
60
*
60
;
Services
.
cookies
.
add
(
"
example
.
net
"
"
path
"
"
name
"
"
value
"
true
true
false
expiry
{
}
Ci
.
nsICookie2
.
SAMESITE_UNSET
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
0
)
;
}
)
;
add_task
(
async
function
test_range_cookies
(
)
{
const
expiry
=
Date
.
now
(
)
+
24
*
60
*
60
;
Services
.
cookies
.
add
(
"
example
.
net
"
"
path
"
"
name
"
"
value
"
true
true
false
expiry
{
}
Ci
.
nsICookie2
.
SAMESITE_UNSET
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
let
from
=
Date
.
now
(
)
+
60
*
60
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataInTimeRange
(
from
*
1000
expiry
*
2000
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
from
=
Date
.
now
(
)
-
60
*
60
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataInTimeRange
(
from
*
1000
expiry
*
2000
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
0
)
;
}
)
;
add_task
(
async
function
test_principal_cookies
(
)
{
const
expiry
=
Date
.
now
(
)
+
24
*
60
*
60
;
Services
.
cookies
.
add
(
"
example
.
net
"
"
path
"
"
name
"
"
value
"
true
true
false
expiry
{
}
Ci
.
nsICookie2
.
SAMESITE_UNSET
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
let
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
"
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
{
}
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromPrincipal
(
principal
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
net
"
)
;
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
{
}
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromPrincipal
(
principal
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
0
)
;
}
)
;
