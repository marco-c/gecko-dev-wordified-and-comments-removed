"
use
strict
"
;
add_task
(
async
function
test_all_cookies
(
)
{
const
expiry
=
Date
.
now
(
)
+
24
*
60
*
60
;
Services
.
cookies
.
add
(
"
example
.
net
"
"
path
"
"
name
"
"
value
"
true
true
false
expiry
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
0
)
;
}
)
;
add_task
(
async
function
test_range_cookies
(
)
{
const
expiry
=
Date
.
now
(
)
+
24
*
60
*
60
;
Services
.
cookies
.
add
(
"
example
.
net
"
"
path
"
"
name
"
"
value
"
true
true
false
expiry
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
let
from
=
Date
.
now
(
)
+
60
*
60
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataInTimeRange
(
from
*
1000
expiry
*
2000
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
from
=
Date
.
now
(
)
-
60
*
60
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataInTimeRange
(
from
*
1000
expiry
*
2000
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
0
)
;
}
)
;
add_task
(
async
function
test_principal_cookies
(
)
{
const
expiry
=
Date
.
now
(
)
+
24
*
60
*
60
;
Services
.
cookies
.
add
(
"
example
.
net
"
"
path
"
"
name
"
"
value
"
true
true
false
expiry
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
let
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
"
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromPrincipal
(
principal
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
1
)
;
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
net
"
)
;
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromPrincipal
(
principal
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
value
=
>
{
Assert
.
equal
(
value
0
)
;
aResolve
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
example
.
net
"
)
0
)
;
}
)
;
add_task
(
async
function
test_localfile_cookies
(
)
{
const
expiry
=
Date
.
now
(
)
+
24
*
60
*
60
;
Services
.
cookies
.
add
(
"
"
"
path
"
"
name
"
"
value
"
false
false
false
expiry
{
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_HTTP
)
;
Assert
.
notEqual
(
Services
.
cookies
.
countCookiesFromHost
(
"
"
)
0
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromLocalFiles
(
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
aResolve
)
;
}
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
"
"
)
0
)
;
}
)
;
function
getTestCookieName
(
host
topLevelBaseDomain
)
{
if
(
!
topLevelBaseDomain
)
{
return
host
;
}
return
{
host
}
_
{
topLevelBaseDomain
}
;
}
function
setTestCookie
(
{
host
topLevelBaseDomain
=
null
originAttributes
=
{
}
}
)
{
SiteDataTestUtils
.
addToCookies
(
{
host
name
:
getTestCookieName
(
host
topLevelBaseDomain
)
originAttributes
:
getOAWithPartitionKey
(
{
topLevelBaseDomain
}
originAttributes
)
}
)
;
}
function
setTestCookies
(
)
{
setTestCookie
(
{
host
:
"
example
.
net
"
}
)
;
setTestCookie
(
{
host
:
"
test
.
example
.
net
"
}
)
;
setTestCookie
(
{
host
:
"
example
.
org
"
}
)
;
setTestCookie
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
}
)
;
setTestCookie
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
originAttributes
:
{
userContextId
:
1
}
}
)
;
setTestCookie
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
setTestCookie
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
org
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
originAttributes
:
{
userContextId
:
1
}
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
}
function
testCookieExists
(
{
host
topLevelBaseDomain
=
null
expected
=
true
originAttributes
=
{
}
}
)
{
let
exists
=
Services
.
cookies
.
cookieExists
(
host
"
path
"
getTestCookieName
(
host
topLevelBaseDomain
)
getOAWithPartitionKey
(
{
topLevelBaseDomain
}
originAttributes
)
)
;
let
message
=
Cookie
{
expected
?
"
is
set
"
:
"
is
not
set
"
}
for
{
host
}
;
if
(
topLevelBaseDomain
)
{
message
+
=
partitioned
under
{
topLevelBaseDomain
}
;
}
Assert
.
equal
(
exists
expected
message
)
;
return
exists
;
}
add_task
(
async
function
test_baseDomain_cookies
(
)
{
Services
.
cookies
.
removeAll
(
)
;
setTestCookies
(
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromBaseDomain
(
"
example
.
net
"
false
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
aResolve
)
;
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
example
.
org
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
originAttributes
:
{
userContextId
:
1
}
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expected
:
false
}
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_host_cookies
(
)
{
Services
.
cookies
.
removeAll
(
)
;
setTestCookies
(
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromHost
(
"
example
.
net
"
false
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
aResolve
)
;
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
org
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
}
)
;
setTestCookie
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
originAttributes
:
{
userContextId
:
1
}
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_baseDomain_cookies_subdomain
(
)
{
Services
.
cookies
.
removeAll
(
)
;
setTestCookies
(
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromBaseDomain
(
"
test
.
example
.
net
"
false
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
aResolve
)
;
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
example
.
org
"
}
)
;
testCookieExists
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
expected
:
false
}
)
;
setTestCookie
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
originAttributes
:
{
userContextId
:
1
}
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expected
:
false
}
)
;
testCookieExists
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expected
:
false
}
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
