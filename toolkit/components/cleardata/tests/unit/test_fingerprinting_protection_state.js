"
use
strict
"
;
do_get_profile
(
)
;
add_task
(
async
function
test_clear_fingerprinting_protection_state
(
)
{
info
(
"
Enabling
fingerprinting
randomization
"
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
resistFingerprinting
"
true
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
let
channel
=
Services
.
io
.
newChannelFromURI
(
uri
null
principal
null
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
Ci
.
nsIContentPolicy
.
TYPE_DOCUMENT
)
;
let
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channel
)
;
let
keyStr
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channel
)
;
let
keyStrAgain
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
Assert
.
equal
(
keyStr
keyStrAgain
"
The
fingerprinting
randomization
key
remain
the
same
without
clearing
.
"
)
;
info
(
"
Trigger
the
deleteDataFromHost
"
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromHost
(
"
example
.
com
"
true
Ci
.
nsIClearDataService
.
CLEAR_FINGERPRINTING_PROTECTION_STATE
_
=
>
{
resolve
(
)
;
}
)
;
}
)
;
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channel
)
;
let
newKeyStr
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
Assert
.
notEqual
(
keyStr
newKeyStr
"
The
fingerprinting
randomization
key
is
reset
properly
.
"
)
;
keyStr
=
newKeyStr
;
info
(
"
Trigger
the
deleteDataFromBaseDomain
"
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromBaseDomain
(
"
example
.
com
"
true
Ci
.
nsIClearDataService
.
CLEAR_FINGERPRINTING_PROTECTION_STATE
_
=
>
{
resolve
(
)
;
}
)
;
}
)
;
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channel
)
;
newKeyStr
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
Assert
.
notEqual
(
keyStr
newKeyStr
"
The
fingerprinting
randomization
key
is
reset
properly
.
"
)
;
keyStr
=
newKeyStr
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromPrincipal
(
principal
true
Ci
.
nsIClearDataService
.
CLEAR_FINGERPRINTING_PROTECTION_STATE
_
=
>
{
resolve
(
)
;
}
)
;
}
)
;
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channel
)
;
newKeyStr
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
Assert
.
notEqual
(
keyStr
newKeyStr
"
The
fingerprinting
randomization
key
is
reset
properly
.
"
)
;
keyStr
=
newKeyStr
;
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
let
channelAnother
=
Services
.
io
.
newChannelFromURI
(
uri
null
principal
null
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
Ci
.
nsIContentPolicy
.
TYPE_DOCUMENT
)
;
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channelAnother
)
;
let
keyStrAnother
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
info
(
"
Trigger
the
deleteData
"
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_FINGERPRINTING_PROTECTION_STATE
_
=
>
{
resolve
(
)
;
}
)
;
}
)
;
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channel
)
;
newKeyStr
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
Assert
.
notEqual
(
keyStr
newKeyStr
"
The
fingerprinting
randomization
key
is
reset
properly
.
"
)
;
key
=
Services
.
rfp
.
testGenerateRandomKey
(
channelAnother
)
;
newKeyStr
=
key
.
map
(
bytes
=
>
bytes
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
Assert
.
notEqual
(
keyStrAnother
newKeyStr
"
The
fingerprinting
randomization
key
is
reset
properly
for
another
site
.
"
)
;
Services
.
prefs
.
clearUserPref
(
"
privacy
.
resistFingerprinting
"
)
;
}
)
;
