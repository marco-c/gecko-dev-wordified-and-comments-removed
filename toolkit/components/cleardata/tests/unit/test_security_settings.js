"
use
strict
"
;
let
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
cars
=
Cc
[
"
mozilla
.
org
/
security
/
clientAuthRememberService
;
1
"
]
.
getService
(
Ci
.
nsIClientAuthRememberService
)
;
let
certDB
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
let
[
serverCert
clientCert
]
=
certDB
.
getCerts
(
)
;
function
addSecurityInfo
(
{
host
topLevelBaseDomain
originAttributes
=
{
}
}
)
{
let
attrs
=
getOAWithPartitionKey
(
{
topLevelBaseDomain
}
originAttributes
)
let
uri
=
Services
.
io
.
newURI
(
https
:
/
/
{
host
}
)
;
let
secInfo
=
Cc
[
"
mozilla
.
org
/
security
/
transportsecurityinfo
;
1
"
]
.
createInstance
(
Ci
.
nsITransportSecurityInfo
)
;
gSSService
.
processHeader
(
uri
"
max
-
age
=
1000
;
"
secInfo
0
Ci
.
nsISiteSecurityService
.
SOURCE_ORGANIC_REQUEST
attrs
)
;
cars
.
rememberDecisionScriptable
(
host
attrs
serverCert
clientCert
)
;
}
function
addTestSecurityInfo
(
)
{
addSecurityInfo
(
{
host
:
"
example
.
net
"
}
)
;
addSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
}
)
;
addSecurityInfo
(
{
host
:
"
example
.
org
"
}
)
;
addSecurityInfo
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
}
)
;
addSecurityInfo
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
addSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
net
"
}
)
;
testSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
org
"
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
testSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
}
)
;
}
function
testSecurityInfo
(
{
host
topLevelBaseDomain
expectedHSTS
=
true
expectedCARS
=
true
originAttributes
=
{
}
}
)
{
let
attrs
=
getOAWithPartitionKey
(
{
topLevelBaseDomain
}
originAttributes
)
;
let
messageSuffix
=
for
{
host
}
;
if
(
topLevelBaseDomain
)
{
messageSuffix
+
=
partitioned
under
{
topLevelBaseDomain
}
;
}
let
uri
=
Services
.
io
.
newURI
(
https
:
/
/
{
host
}
)
;
let
isSecure
=
gSSService
.
isSecureURI
(
uri
0
attrs
)
;
Assert
.
equal
(
isSecure
expectedHSTS
HSTS
{
expectedHSTS
?
"
is
set
"
:
"
is
not
set
"
}
{
messageSuffix
}
)
;
let
hasRemembered
=
cars
.
hasRememberedDecisionScriptable
(
host
attrs
serverCert
{
}
)
;
Assert
.
equal
(
hasRemembered
expectedCARS
CAR
{
expectedCARS
?
"
is
set
"
:
"
is
not
set
"
}
{
messageSuffix
}
)
;
}
add_task
(
async
function
test_baseDomain
(
)
{
gSSService
.
clearAll
(
)
;
addTestSecurityInfo
(
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromBaseDomain
(
"
example
.
net
"
false
Ci
.
nsIClearDataService
.
CLEAR_SECURITY_SETTINGS
aResolve
)
;
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
net
"
expectedHSTS
:
false
expectedCARS
:
false
}
)
;
testSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
expectedHSTS
:
false
expectedCARS
:
false
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
org
"
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
expectedHSTS
:
false
expectedCARS
:
false
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expectedHSTS
:
false
expectedCARS
:
false
}
)
;
testSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expectedHSTS
:
false
expectedCARS
:
false
}
)
;
gSSService
.
clearAll
(
)
;
}
)
;
add_task
(
async
function
test_host
(
)
{
gSSService
.
clearAll
(
)
;
addTestSecurityInfo
(
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromHost
(
"
example
.
net
"
false
Ci
.
nsIClearDataService
.
CLEAR_SECURITY_SETTINGS
aResolve
)
;
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
net
"
expectedHSTS
:
false
expectedCARS
:
false
}
)
;
testSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
expectedHSTS
:
false
expectedCARS
:
true
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
org
"
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
com
"
topLevelBaseDomain
:
"
example
.
net
"
}
)
;
testSecurityInfo
(
{
host
:
"
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expectedHSTS
:
false
expectedCARS
:
false
}
)
;
testSecurityInfo
(
{
host
:
"
test
.
example
.
net
"
topLevelBaseDomain
:
"
example
.
org
"
expectedHSTS
:
false
expectedCARS
:
true
}
)
;
gSSService
.
clearAll
(
)
;
}
)
;
