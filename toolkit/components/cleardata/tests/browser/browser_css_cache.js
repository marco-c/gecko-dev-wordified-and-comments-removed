"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
BASE_DOMAIN_A
=
"
example
.
com
"
;
const
ORIGIN_A
=
https
:
/
/
{
BASE_DOMAIN_A
}
;
const
ORIGIN_A_HTTP
=
http
:
/
/
{
BASE_DOMAIN_A
}
;
const
ORIGIN_A_SUB
=
https
:
/
/
test1
.
{
BASE_DOMAIN_A
}
;
const
CONTAINER_PRINCIPAL_A
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
ORIGIN_A
)
{
userContextId
:
2
}
)
;
const
CONTAINER_PRINCIPAL_A_SUB
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
ORIGIN_A_SUB
)
{
userContextId
:
2
}
)
;
const
BASE_DOMAIN_B
=
"
example
.
org
"
;
const
ORIGIN_B
=
https
:
/
/
{
BASE_DOMAIN_B
}
;
const
ORIGIN_B_HTTP
=
http
:
/
/
{
BASE_DOMAIN_B
}
;
const
ORIGIN_B_SUB
=
https
:
/
/
test1
.
{
BASE_DOMAIN_B
}
;
const
TEST_ROOT_DIR
=
getRootDirectory
(
gTestPath
)
;
let
tabs
=
{
}
;
function
getTestURLForOrigin
(
origin
)
{
return
(
TEST_ROOT_DIR
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
origin
)
+
"
file_css_cache
.
html
"
)
;
}
async
function
testCached
(
origin
isCached
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
origin
)
;
let
url
=
getTestURLForOrigin
(
principal
.
originNoSuffix
)
;
let
numParsed
;
let
tab
=
tabs
[
principal
.
origin
]
;
let
loadedPromise
;
if
(
!
tab
)
{
info
(
"
Creating
new
tab
for
"
+
url
)
;
tab
=
gBrowser
.
addTab
(
url
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
userContextId
:
principal
.
originAttributes
.
userContextId
}
)
;
gBrowser
.
selectedTab
=
tab
;
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
tabs
[
principal
.
origin
]
=
tab
;
}
else
{
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
tab
.
linkedBrowser
.
reload
(
)
;
}
await
loadedPromise
;
numParsed
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
return
SpecialPowers
.
getDOMWindowUtils
(
content
)
.
parsedStyleSheets
;
}
)
;
is
(
!
numParsed
isCached
{
origin
}
is
{
isCached
?
"
"
:
"
not
"
}
cached
)
;
}
async
function
addTestTabs
(
)
{
await
testCached
(
ORIGIN_A
false
)
;
await
testCached
(
ORIGIN_A_SUB
false
)
;
await
testCached
(
ORIGIN_A_HTTP
false
)
;
await
testCached
(
ORIGIN_B
false
)
;
await
testCached
(
ORIGIN_B_SUB
false
)
;
await
testCached
(
ORIGIN_B_HTTP
false
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A
.
origin
false
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A_SUB
.
origin
false
)
;
await
testCached
(
ORIGIN_A
true
)
;
await
testCached
(
ORIGIN_A_SUB
true
)
;
await
testCached
(
ORIGIN_A_HTTP
true
)
;
await
testCached
(
ORIGIN_B
true
)
;
await
testCached
(
ORIGIN_B_SUB
true
)
;
await
testCached
(
ORIGIN_B_HTTP
true
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A
.
origin
true
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A_SUB
.
origin
true
)
;
}
async
function
cleanupTestTabs
(
)
{
Object
.
values
(
tabs
)
.
forEach
(
BrowserTestUtils
.
removeTab
)
;
tabs
=
{
}
;
}
add_task
(
async
function
test_deleteByPrincipal
(
)
{
await
SpecialPowers
.
setBoolPref
(
"
dom
.
security
.
https_first
"
false
)
;
await
addTestTabs
(
)
;
info
(
"
Clearing
cache
for
principal
"
+
ORIGIN_A
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromPrincipal
(
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
ORIGIN_A
)
false
Ci
.
nsIClearDataService
.
CLEAR_CSS_CACHE
resolve
)
;
}
)
;
await
testCached
(
ORIGIN_A
false
)
;
await
testCached
(
ORIGIN_A_SUB
true
)
;
await
testCached
(
ORIGIN_A_HTTP
true
)
;
await
testCached
(
ORIGIN_B
true
)
;
await
testCached
(
ORIGIN_B_SUB
true
)
;
await
testCached
(
ORIGIN_B_HTTP
true
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A
.
origin
true
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A_SUB
.
origin
true
)
;
cleanupTestTabs
(
)
;
ChromeUtils
.
clearResourceCache
(
{
types
:
[
"
stylesheet
"
]
}
)
;
}
)
;
add_task
(
async
function
test_deleteBySite
(
)
{
await
addTestTabs
(
)
;
info
(
"
Clearing
cache
for
(
schemeless
)
site
"
+
BASE_DOMAIN_A
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromSite
(
BASE_DOMAIN_A
{
}
false
Ci
.
nsIClearDataService
.
CLEAR_CSS_CACHE
resolve
)
;
}
)
;
await
testCached
(
ORIGIN_A
false
)
;
await
testCached
(
ORIGIN_A_SUB
false
)
;
await
testCached
(
ORIGIN_A_HTTP
false
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A
.
origin
false
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A_SUB
.
origin
false
)
;
await
testCached
(
ORIGIN_B
true
)
;
await
testCached
(
ORIGIN_B_SUB
true
)
;
await
testCached
(
ORIGIN_B_HTTP
true
)
;
cleanupTestTabs
(
)
;
ChromeUtils
.
clearResourceCache
(
[
"
stylesheet
"
]
)
;
}
)
;
add_task
(
async
function
test_deleteBySite_oa_pattern
(
)
{
await
addTestTabs
(
)
;
info
(
"
Clearing
cache
for
(
schemeless
)
site
+
pattern
"
+
BASE_DOMAIN_A
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromSite
(
BASE_DOMAIN_A
{
userContextId
:
CONTAINER_PRINCIPAL_A
.
originAttributes
.
userContextId
}
false
Ci
.
nsIClearDataService
.
CLEAR_CSS_CACHE
resolve
)
;
}
)
;
await
testCached
(
ORIGIN_A
true
)
;
await
testCached
(
ORIGIN_A_SUB
true
)
;
await
testCached
(
ORIGIN_A_HTTP
true
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A
.
origin
false
)
;
await
testCached
(
CONTAINER_PRINCIPAL_A_SUB
.
origin
false
)
;
await
testCached
(
ORIGIN_B
true
)
;
await
testCached
(
ORIGIN_B_SUB
true
)
;
await
testCached
(
ORIGIN_B_HTTP
true
)
;
cleanupTestTabs
(
)
;
ChromeUtils
.
clearResourceCache
(
[
"
stylesheet
"
]
)
;
}
)
;
