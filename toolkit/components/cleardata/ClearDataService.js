"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
)
;
const
CookieCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cookies
.
removeCookiesWithOriginAttributes
(
JSON
.
stringify
(
aOriginAttributes
)
aHost
)
;
aResolve
(
)
;
}
)
;
}
deleteByRange
(
aFrom
aTo
)
{
let
enumerator
=
Services
.
cookies
.
enumerator
;
return
this
.
_deleteInternal
(
enumerator
aCookie
=
>
aCookie
.
creationTime
>
aFrom
)
;
}
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cookies
.
removeAll
(
)
;
aResolve
(
)
;
}
)
;
}
_deleteInternal
(
aEnumerator
aCb
)
{
const
YIELD_PERIOD
=
10
;
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
count
=
0
;
while
(
aEnumerator
.
hasMoreElements
(
)
)
{
let
cookie
=
aEnumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
if
(
aCb
(
cookie
)
)
{
Services
.
cookies
.
remove
(
cookie
.
host
cookie
.
name
cookie
.
path
false
cookie
.
originAttributes
)
;
if
(
+
+
count
%
YIELD_PERIOD
=
=
0
)
{
setTimeout
(
(
)
=
>
{
this
.
_deleteInternal
(
aEnumerator
aCb
)
.
then
(
aResolve
aReject
)
;
}
0
)
;
return
;
}
}
}
aResolve
(
)
;
}
)
;
}
}
;
const
NetworkCacheCleaner
=
{
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
Services
.
cache2
.
clear
(
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
ImageCacheCleaner
=
{
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
let
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
imageCache
.
clearCache
(
false
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
PluginDataCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
return
this
.
_deleteInternal
(
(
aPh
aTag
)
=
>
{
return
new
Promise
(
aResolve
=
>
{
try
{
aPh
.
clearSiteData
(
aTag
aHost
Ci
.
nsIPluginHost
.
FLAG_CLEAR_ALL
-
1
aResolve
)
;
}
catch
(
e
)
{
aResolve
(
)
;
}
}
)
;
}
)
;
}
deleteByRange
(
aFrom
aTo
)
{
let
age
=
Date
.
now
(
)
/
1000
-
aFrom
/
1000000
;
return
this
.
_deleteInternal
(
(
aPh
aTag
)
=
>
{
return
new
Promise
(
aResolve
=
>
{
try
{
aPh
.
clearSiteData
(
aTag
null
Ci
.
nsIPluginHost
.
FLAG_CLEAR_ALL
age
aResolve
)
;
}
catch
(
e
)
{
aResolve
(
Cr
.
NS_ERROR_PLUGIN_TIME_RANGE_NOT_SUPPORTED
)
;
}
}
)
.
then
(
aRv
=
>
{
if
(
aRv
=
=
Cr
.
NS_ERROR_PLUGIN_TIME_RANGE_NOT_SUPPORTED
)
{
return
new
Promise
(
aResolve
=
>
{
try
{
aPh
.
clearSiteData
(
aTag
null
Ci
.
nsIPluginHost
.
FLAG_CLEAR_ALL
-
1
aResolve
)
;
}
catch
(
e
)
{
aResolve
(
)
;
}
}
)
;
}
return
true
;
}
)
;
}
)
;
}
deleteAll
(
)
{
return
this
.
_deleteInternal
(
(
aPh
aTag
)
=
>
{
return
new
Promise
(
aResolve
=
>
{
try
{
aPh
.
clearSiteData
(
aTag
null
Ci
.
nsIPluginHost
.
FLAG_CLEAR_ALL
-
1
aResolve
)
;
}
catch
(
e
)
{
aResolve
(
)
;
}
}
)
;
}
)
;
}
_deleteInternal
(
aCb
)
{
let
ph
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
let
promises
=
[
]
;
let
tags
=
ph
.
getPluginTags
(
)
;
for
(
let
tag
of
tags
)
{
promises
.
push
(
aCb
(
ph
tag
)
)
;
}
return
Promise
.
race
(
[
Promise
.
all
(
promises
)
new
Promise
(
aResolve
=
>
setTimeout
(
aResolve
10000
)
)
]
)
;
}
}
;
const
DownloadsCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
return
Downloads
.
getList
(
Downloads
.
ALL
)
.
then
(
aList
=
>
{
aList
.
removeFinished
(
aDownload
=
>
hasRootDomain
(
Services
.
io
.
newURI
(
aDownload
.
source
.
url
)
.
host
aHost
)
)
;
}
)
;
}
deleteByRange
(
aFrom
aTo
)
{
let
rangeBeginMs
=
aFrom
/
1000
;
let
rangeEndMs
=
aTo
/
1000
;
return
Downloads
.
getList
(
Downloads
.
ALL
)
.
then
(
aList
=
>
{
aList
.
removeFinished
(
aDownload
=
>
aDownload
.
startTime
>
=
rangeBeginMs
&
&
aDownload
.
startTime
<
=
rangeEndMs
)
;
}
)
;
}
deleteAll
(
)
{
return
Downloads
.
getList
(
Downloads
.
ALL
)
.
then
(
aList
=
>
{
aList
.
removeFinished
(
null
)
;
}
)
;
}
}
;
const
PasswordsCleaner
=
{
deleteByHost
(
aHost
aOriginAttributes
)
{
return
this
.
_deleteInternal
(
aLogin
=
>
hasRootDomain
(
aLogin
.
hostname
aHost
)
)
;
}
deleteAll
(
)
{
return
this
.
_deleteInternal
(
(
)
=
>
true
)
;
}
_deleteInternal
(
aCb
)
{
return
new
Promise
(
aResolve
=
>
{
try
{
let
logins
=
Services
.
logins
.
getAllLogins
(
)
;
for
(
let
login
of
logins
)
{
if
(
aCb
(
login
)
)
{
Services
.
logins
.
removeLogin
(
login
)
;
}
}
}
catch
(
ex
)
{
if
(
!
ex
.
message
.
includes
(
"
User
canceled
Master
Password
entry
"
)
)
{
throw
new
Error
(
"
Exception
occured
in
clearing
passwords
:
"
+
ex
)
;
}
}
aResolve
(
)
;
}
)
;
}
}
;
const
MediaDevicesCleaner
=
{
deleteByRange
(
aFrom
aTo
)
{
return
new
Promise
(
aResolve
=
>
{
let
mediaMgr
=
Cc
[
"
mozilla
.
org
/
mediaManagerService
;
1
"
]
.
getService
(
Ci
.
nsIMediaManagerService
)
;
mediaMgr
.
sanitizeDeviceIds
(
aFrom
)
;
aResolve
(
)
;
}
)
;
}
deleteAll
(
)
{
return
new
Promise
(
aResolve
=
>
{
let
mediaMgr
=
Cc
[
"
mozilla
.
org
/
mediaManagerService
;
1
"
]
.
getService
(
Ci
.
nsIMediaManagerService
)
;
mediaMgr
.
sanitizeDeviceIds
(
null
)
;
aResolve
(
)
;
}
)
;
}
}
;
const
FLAGS_MAP
=
[
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
cleaner
:
CookieCleaner
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_NETWORK_CACHE
cleaner
:
NetworkCacheCleaner
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_IMAGE_CACHE
cleaner
:
ImageCacheCleaner
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_PLUGIN_DATA
cleaner
:
PluginDataCleaner
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_DOWNLOADS
cleaner
:
DownloadsCleaner
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_PASSWORDS
cleaner
:
PasswordsCleaner
}
{
flag
:
Ci
.
nsIClearDataService
.
CLEAR_MEDIA_DEVICES
cleaner
:
MediaDevicesCleaner
}
]
;
this
.
ClearDataService
=
function
(
)
{
}
;
ClearDataService
.
prototype
=
Object
.
freeze
(
{
classID
:
Components
.
ID
(
"
{
0c06583d
-
7dd8
-
4293
-
b1a5
-
912205f779aa
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIClearDataService
]
)
_xpcom_factory
:
XPCOMUtils
.
generateSingletonFactory
(
ClearDataService
)
deleteDataFromHost
(
aHost
aIsUserRequest
aFlags
aCallback
)
{
if
(
!
aHost
|
|
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
if
(
aCleaner
.
deleteByHost
)
{
return
aCleaner
.
deleteByHost
(
aHost
{
}
)
;
}
if
(
aIsUserRequest
)
{
return
aCleaner
.
deleteAll
(
)
;
}
return
Promise
.
resolve
(
)
;
}
)
;
}
deleteDataFromPrincipal
(
aPrincipal
aIsUserRequest
aFlags
aCallback
)
{
if
(
!
aPrincipal
|
|
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
if
(
aCleaner
.
deleteByHost
)
{
return
aCleaner
.
deleteByHost
(
aPrincipal
.
URI
.
host
aPrincipal
.
originAttributes
)
;
}
if
(
aIsUserRequest
)
{
return
aCleaner
.
deleteAll
(
)
;
}
return
Promise
.
resolve
(
)
;
}
)
;
}
deleteDataInTimeRange
(
aFrom
aTo
aIsUserRequest
aFlags
aCallback
)
{
if
(
aFrom
>
aTo
|
|
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
if
(
aCleaner
.
deleteByRange
)
{
return
aCleaner
.
deleteByRange
(
aFrom
aTo
)
;
}
if
(
aIsUserRequest
)
{
return
aCleaner
.
deleteAll
(
)
;
}
return
Promise
.
resolve
(
)
;
}
)
;
}
deleteData
(
aFlags
aCallback
)
{
if
(
!
aCallback
)
{
return
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
this
.
_deleteInternal
(
aFlags
aCallback
aCleaner
=
>
{
return
aCleaner
.
deleteAll
(
)
;
}
)
;
}
_deleteInternal
(
aFlags
aCallback
aHelper
)
{
let
resultFlags
=
0
;
let
promises
=
FLAGS_MAP
.
filter
(
c
=
>
aFlags
&
c
.
flag
)
.
map
(
c
=
>
{
return
aHelper
(
c
.
cleaner
)
.
catch
(
(
)
=
>
{
resultFlags
|
=
c
.
flag
;
}
)
;
}
)
;
Promise
.
all
(
promises
)
.
then
(
(
)
=
>
{
aCallback
.
onDataDeleted
(
resultFlags
)
;
}
)
;
return
Cr
.
NS_OK
;
}
}
)
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
ClearDataService
]
)
;
function
hasRootDomain
(
str
aDomain
)
{
let
index
=
str
.
indexOf
(
aDomain
)
;
if
(
index
=
=
-
1
)
return
false
;
if
(
str
=
=
aDomain
)
return
true
;
let
prevChar
=
str
[
index
-
1
]
;
return
(
index
=
=
(
str
.
length
-
aDomain
.
length
)
)
&
&
(
prevChar
=
=
"
.
"
|
|
prevChar
=
=
"
/
"
)
;
}
