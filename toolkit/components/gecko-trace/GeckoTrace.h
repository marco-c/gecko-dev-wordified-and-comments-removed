#
ifndef
GECKO_TRACE_H
#
define
GECKO_TRACE_H
#
include
"
mozilla
/
Logging
.
h
"
#
include
<
memory
>
#
include
<
string_view
>
#
include
"
mozilla
/
GeckoTraceEvents
.
h
"
#
define
GECKO_TRACE_SCOPE
(
component
span_name
)
\
auto
GECKO_TRACE_SCOPE_
#
#
__COUNTER__
=
\
mozilla
:
:
gecko_trace
:
:
TracerProvider
:
:
GetTracer
(
component
)
\
-
>
StartSpan
(
span_name
)
\
-
>
Enter
(
)
;
namespace
mozilla
:
:
gecko_trace
{
using
string_view
=
std
:
:
string_view
;
#
ifdef
GECKO_TRACE_ENABLE
class
Scope
{
public
:
virtual
~
Scope
(
)
=
default
;
}
;
class
Span
{
public
:
virtual
~
Span
(
)
=
default
;
virtual
void
AddEvent
(
const
SpanEvent
&
aEvent
)
=
0
;
[
[
nodiscard
]
]
virtual
std
:
:
shared_ptr
<
Scope
>
Enter
(
)
=
0
;
}
;
class
Tracer
{
public
:
virtual
~
Tracer
(
)
=
default
;
[
[
nodiscard
]
]
virtual
std
:
:
shared_ptr
<
Span
>
StartSpan
(
string_view
aName
)
=
0
;
[
[
nodiscard
]
]
static
std
:
:
shared_ptr
<
Span
>
GetCurrentSpan
(
)
;
}
;
class
TracerProvider
{
public
:
[
[
nodiscard
]
]
static
std
:
:
shared_ptr
<
Tracer
>
GetTracer
(
string_view
)
;
}
;
void
SetOpenTelemetryInternalLogLevel
(
LogLevel
aLogLevel
)
;
void
Init
(
)
;
#
else
class
Scope
{
public
:
constexpr
Scope
(
)
=
default
;
}
;
class
Span
{
public
:
constexpr
Span
(
)
=
default
;
constexpr
void
AddEvent
(
const
SpanEvent
&
)
const
{
}
[
[
nodiscard
]
]
inline
std
:
:
shared_ptr
<
Scope
>
Enter
(
)
const
{
static
thread_local
auto
sNoopScope
=
std
:
:
make_shared
<
Scope
>
(
)
;
return
sNoopScope
;
}
}
;
class
Tracer
{
public
:
constexpr
Tracer
(
)
=
default
;
[
[
nodiscard
]
]
inline
std
:
:
shared_ptr
<
Span
>
StartSpan
(
string_view
)
const
{
return
GetNoopSpan
(
)
;
}
[
[
nodiscard
]
]
inline
std
:
:
shared_ptr
<
Span
>
GetCurrentSpan
(
)
const
{
return
GetNoopSpan
(
)
;
}
private
:
static
std
:
:
shared_ptr
<
Span
>
GetNoopSpan
(
)
{
static
thread_local
auto
sNoopSpan
=
std
:
:
make_shared
<
Span
>
(
)
;
return
sNoopSpan
;
}
}
;
class
TracerProvider
{
public
:
[
[
nodiscard
]
]
static
inline
std
:
:
shared_ptr
<
Tracer
>
GetTracer
(
string_view
)
{
static
thread_local
auto
sNoopTracer
=
std
:
:
make_shared
<
Tracer
>
(
)
;
return
sNoopTracer
;
}
}
;
constexpr
void
SetOpenTelemetryInternalLogLevel
(
LogLevel
)
{
}
constexpr
void
Init
(
)
{
}
#
endif
}
#
ifdef
GECKO_TRACE_ENABLE
extern
"
C
"
{
void
recv_gecko_trace_export
(
const
uint8_t
*
buffer
uintptr_t
length
)
;
}
#
else
inline
constexpr
void
recv_gecko_trace_export
(
const
uint8_t
*
uintptr_t
)
{
}
#
endif
#
endif
