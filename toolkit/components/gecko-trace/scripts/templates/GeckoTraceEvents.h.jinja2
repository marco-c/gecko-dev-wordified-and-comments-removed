#
ifndef
GECKO_TRACE_EVENTS_H
#
define
GECKO_TRACE_EVENTS_H
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gecko_trace
/
SpanEvent
.
h
"
{
%
macro
cpp_type
(
attr
)
-
%
}
{
%
-
if
attr
.
type
=
=
'
boolean
'
-
%
}
bool
{
%
-
elif
attr
.
type
=
=
'
integer
'
-
%
}
int64_t
{
%
-
elif
attr
.
type
=
=
'
string
'
-
%
}
std
:
:
string_view
{
%
-
elif
attr
.
type
=
=
'
array
'
-
%
}
mozilla
:
:
Span
<
{
{
cpp_type
(
{
'
type
'
:
attr
.
items
}
)
}
}
>
{
%
-
else
-
%
}
{
%
raise
"
Unsupported
attribute
type
:
%
s
"
%
attr
.
type
%
}
{
%
-
endif
-
%
}
{
%
-
endmacro
-
%
}
{
%
-
macro
class_name
(
event_name
)
-
%
}
{
{
event_name
|
camelize
}
}
Event
{
%
-
endmacro
-
%
}
{
%
-
macro
param_name
(
attr_key
)
-
%
}
a
{
{
attr_key
|
camelize
}
}
{
%
-
endmacro
-
%
}
{
%
-
macro
member_name
(
attr_key
)
-
%
}
m
{
{
attr_key
|
camelize
}
}
{
%
-
endmacro
%
}
namespace
mozilla
:
:
gecko_trace
{
namespace
events
{
{
%
for
event_name
event
in
events
.
items
(
)
%
}
template
<
class
T
>
class
{
{
class_name
(
event_name
)
}
}
Base
:
{
%
-
if
event
.
inherits_from
-
%
}
{
%
-
for
parent_event
in
event
.
inherits_from
-
%
}
{
{
"
public
"
~
class_name
(
parent_event
)
}
}
Base
<
T
>
{
{
-
"
"
if
not
loop
.
last
}
}
{
%
-
endfor
%
}
{
%
-
else
-
%
}
{
{
"
public
virtual
SpanEvent
"
}
}
{
%
-
endif
%
}
{
public
:
{
%
for
attr_key
attr
in
event
.
attributes
.
items
(
)
%
}
T
&
With
{
{
attr_key
|
camelize
-
}
}
(
{
{
cpp_type
(
attr
)
}
}
{
{
param_name
(
attr_key
)
}
}
)
{
{
%
if
enabled
%
}
{
{
member_name
(
attr_key
)
}
}
=
mozilla
:
:
Some
(
{
{
param_name
(
attr_key
)
}
}
)
;
{
%
endif
%
}
return
static_cast
<
T
&
>
(
*
this
)
;
}
{
%
endfor
%
}
bool
ForEachKeyValue
(
std
:
:
function
<
bool
(
std
:
:
string_view
AttributeValue
)
>
aCallback
)
const
override
{
{
%
if
enabled
%
}
{
%
if
event
.
inherits_from
%
}
{
%
for
parent_event
in
event
.
inherits_from
%
}
if
(
!
{
{
class_name
(
parent_event
)
}
}
Base
<
T
>
:
:
ForEachKeyValue
(
aCallback
)
)
{
return
false
;
}
{
%
endfor
%
}
{
%
endif
%
}
{
%
if
event
.
attributes
|
length
>
1
%
}
{
%
for
attr_key
attr_def
in
event
.
attributes
.
items
(
)
%
}
if
(
{
{
member_name
(
attr_key
)
}
}
.
isSome
(
)
&
&
!
aCallback
(
"
{
{
attr_key
}
}
"
AttributeValue
(
{
{
member_name
(
attr_key
)
}
}
.
value
(
)
)
)
)
{
return
false
;
}
{
%
endfor
%
}
return
true
;
{
%
else
%
}
return
!
(
(
{
{
member_name
(
event
.
attributes
|
first
)
}
}
.
isSome
(
)
&
&
!
aCallback
(
"
{
{
event
.
attributes
|
first
}
}
"
AttributeValue
(
{
{
-
member_name
(
event
.
attributes
|
first
)
-
}
}
.
value
(
)
)
)
)
)
;
{
%
endif
%
}
{
%
else
%
}
return
true
;
{
%
endif
%
}
}
std
:
:
string_view
GetEventName
(
)
const
override
{
return
"
{
{
event_name
}
}
"
;
}
size_t
Size
(
)
const
override
{
{
%
if
enabled
%
}
size_t
size
=
{
{
event
.
attributes
|
length
}
}
;
{
%
for
parent_event
in
event
.
inherits_from
%
}
size
+
=
{
{
class_name
(
parent_event
)
}
}
Base
<
T
>
:
:
Size
(
)
;
{
%
endfor
%
}
return
size
;
{
%
else
%
}
return
0
;
{
%
endif
%
}
}
{
%
if
enabled
%
}
private
:
{
%
for
attr_key
attr_def
in
event
.
attributes
.
items
(
)
%
}
mozilla
:
:
Maybe
<
{
{
cpp_type
(
attr_def
)
}
}
>
{
{
member_name
(
attr_key
)
}
}
;
{
%
endfor
%
}
{
%
endif
%
}
}
;
class
{
{
class_name
(
event_name
)
}
}
:
public
{
{
-
"
"
~
class_name
(
event_name
)
}
}
Base
<
{
{
class_name
(
event_name
)
}
}
>
{
}
;
{
%
endfor
%
}
}
namespace
event
{
{
%
for
event_name
event
in
events
.
items
(
)
%
}
inline
events
:
:
{
{
class_name
(
event_name
)
}
}
{
{
event_name
|
camelize
}
}
(
)
{
return
events
:
:
{
{
class_name
(
event_name
)
}
}
{
}
;
}
{
%
endfor
%
}
}
}
#
endif
