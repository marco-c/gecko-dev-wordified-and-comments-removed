#
include
"
nsISupports
.
idl
"
interface
nsIURI
;
interface
nsIPrincipal
;
interface
mozIPlacesPendingOperation
;
interface
nsIFaviconDataCallback
;
[
scriptable
uuid
(
e81e0b0c
-
b9f1
-
4c2e
-
8f3c
-
b809933cf73c
)
]
interface
nsIFaviconService
:
nsISupports
{
const
unsigned
long
FAVICON_LOAD_PRIVATE
=
1
;
const
unsigned
long
FAVICON_LOAD_NON_PRIVATE
=
2
;
const
unsigned
short
ICONDATA_FLAGS_RICH
=
1
<
<
0
;
const
unsigned
long
MAX_FAVICON_BUFFER_SIZE
=
65536
;
nsIURI
getFaviconLinkForIcon
(
in
nsIURI
aFaviconURI
)
;
void
expireAllFavicons
(
)
;
void
setDefaultIconURIPreferredSize
(
in
unsigned
short
aDefaultSize
)
;
unsigned
short
preferredSizeFromURI
(
in
nsIURI
aURI
)
;
readonly
attribute
nsIURI
defaultFavicon
;
readonly
attribute
AUTF8String
defaultFaviconMimeType
;
[
implicit_jscontext
must_use
]
Promise
setFaviconForPage
(
in
nsIURI
aPageURI
in
nsIURI
aFaviconURI
in
nsIURI
aDataURL
[
optional
]
in
PRTime
aExpiration
[
optional
]
in
boolean
isRichIcon
)
;
void
getFaviconURLForPage
(
in
nsIURI
aPageURI
in
nsIFaviconDataCallback
aCallback
[
optional
]
in
unsigned
short
aPreferredWidth
)
;
void
getFaviconDataForPage
(
in
nsIURI
aPageURI
in
nsIFaviconDataCallback
aCallback
[
optional
]
in
unsigned
short
aPreferredWidth
)
;
[
implicit_jscontext
must_use
]
Promise
getFaviconForPage
(
in
nsIURI
aPageURI
[
optional
]
in
unsigned
short
aPreferredWidth
)
;
void
copyFavicons
(
in
nsIURI
aFromPageURI
in
nsIURI
aToPageURI
in
unsigned
long
aFaviconLoadType
[
optional
]
in
nsIFaviconDataCallback
aCallback
)
;
}
;
[
scriptable
function
uuid
(
c85e5c82
-
b70f
-
4621
-
9528
-
beb2aa47fb44
)
]
interface
nsIFaviconDataCallback
:
nsISupports
{
void
onComplete
(
in
nsIURI
aFaviconURI
in
unsigned
long
aDataLen
[
const
array
size_is
(
aDataLen
)
]
in
octet
aData
in
AUTF8String
aMimeType
in
unsigned
short
aWidth
)
;
}
;
[
scriptable
uuid
(
c23c74d6
-
9c36
-
4223
-
a9c4
-
c8b95526f4d3
)
]
interface
nsIFavicon
:
nsISupports
{
readonly
attribute
nsIURI
uri
;
readonly
attribute
nsIURI
dataURI
;
readonly
attribute
Array
<
octet
>
rawData
;
readonly
attribute
ACString
mimeType
;
readonly
attribute
unsigned
short
width
;
}
;
%
{
C
+
+
#
define
NS_PLACES_FAVICONS_EXPIRED_TOPIC_ID
"
places
-
favicons
-
expired
"
#
define
FAVICON_DEFAULT_URL
"
chrome
:
/
/
global
/
skin
/
icons
/
defaultFavicon
.
svg
"
#
define
FAVICON_DEFAULT_MIMETYPE
"
image
/
svg
+
xml
"
#
define
FAVICON_ERRORPAGE_URL
"
chrome
:
/
/
global
/
skin
/
icons
/
info
.
svg
"
#
define
FAVICON_CERTERRORPAGE_URL
"
chrome
:
/
/
global
/
skin
/
icons
/
warning
.
svg
"
%
}
