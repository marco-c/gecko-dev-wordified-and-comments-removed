#
ifndef
mozilla_places_Shutdown_h_
#
define
mozilla_places_Shutdown_h_
#
include
"
mozIStorageCompletionCallback
.
h
"
#
include
"
nsIAsyncShutdown
.
h
"
#
include
"
nsProxyRelease
.
h
"
namespace
mozilla
{
namespace
places
{
class
Database
;
class
PlacesShutdownBlocker
:
public
nsIAsyncShutdownBlocker
public
nsIAsyncShutdownCompletionCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIASYNCSHUTDOWNBLOCKER
NS_DECL_NSIASYNCSHUTDOWNCOMPLETIONCALLBACK
explicit
PlacesShutdownBlocker
(
const
nsString
&
aName
)
;
already_AddRefed
<
nsIAsyncShutdownClient
>
GetClient
(
)
;
static
bool
IsStarted
(
)
{
return
sIsStarted
;
}
enum
States
{
NOT_STARTED
RECEIVED_BLOCK_SHUTDOWN
CALLED_WAIT_CLIENTS
RECEIVED_DONE
NOTIFIED_OBSERVERS_PLACES_WILL_CLOSE_CONNECTION
CALLED_STORAGESHUTDOWN
RECEIVED_STORAGESHUTDOWN_COMPLETE
NOTIFIED_OBSERVERS_PLACES_CONNECTION_CLOSED
}
;
States
State
(
)
{
return
mState
;
}
protected
:
nsString
mName
;
States
mState
;
nsMainThreadPtrHandle
<
nsIAsyncShutdownBarrier
>
mBarrier
;
nsMainThreadPtrHandle
<
nsIAsyncShutdownClient
>
mParentClient
;
uint16_t
mCounter
;
static
uint16_t
sCounter
;
static
Atomic
<
bool
>
sIsStarted
;
virtual
~
PlacesShutdownBlocker
(
)
=
default
;
}
;
class
ClientsShutdownBlocker
final
:
public
PlacesShutdownBlocker
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
ClientsShutdownBlocker
PlacesShutdownBlocker
)
explicit
ClientsShutdownBlocker
(
)
;
NS_IMETHOD
Done
(
)
override
;
private
:
~
ClientsShutdownBlocker
(
)
=
default
;
}
;
class
ConnectionShutdownBlocker
final
:
public
PlacesShutdownBlocker
public
mozIStorageCompletionCallback
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_MOZISTORAGECOMPLETIONCALLBACK
explicit
ConnectionShutdownBlocker
(
mozilla
:
:
places
:
:
Database
*
aDatabase
)
;
NS_IMETHOD
Done
(
)
override
;
private
:
~
ConnectionShutdownBlocker
(
)
=
default
;
RefPtr
<
mozilla
:
:
places
:
:
Database
>
mDatabase
;
}
;
}
}
#
endif
