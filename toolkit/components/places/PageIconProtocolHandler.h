#
ifndef
mozilla_places_PageIconProtocolHandler_h
#
define
mozilla_places_PageIconProtocolHandler_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
net
/
RemoteStreamGetter
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsWeakReference
.
h
"
namespace
mozilla
:
:
places
{
struct
FaviconMetadata
;
using
FaviconMetadataPromise
=
mozilla
:
:
MozPromise
<
FaviconMetadata
nsresult
false
>
;
using
net
:
:
RemoteStreamPromise
;
class
PageIconProtocolHandler
final
:
public
nsIProtocolHandler
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPROTOCOLHANDLER
static
already_AddRefed
<
PageIconProtocolHandler
>
GetSingleton
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
MOZ_UNLIKELY
(
!
sSingleton
)
)
{
sSingleton
=
new
PageIconProtocolHandler
(
)
;
ClearOnShutdown
(
&
sSingleton
)
;
}
return
do_AddRef
(
sSingleton
)
;
}
RefPtr
<
RemoteStreamPromise
>
NewStream
(
nsIURI
*
aChildURI
nsILoadInfo
*
aLoadInfo
bool
*
aTerminateSender
)
;
private
:
~
PageIconProtocolHandler
(
)
=
default
;
Result
<
Ok
nsresult
>
SubstituteRemoteChannel
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
nsIChannel
*
*
aRetVal
)
;
RefPtr
<
FaviconMetadataPromise
>
GetFaviconData
(
nsIURI
*
aPageIconURI
nsILoadInfo
*
aLoadInfo
)
;
nsresult
NewChannelInternal
(
nsIURI
*
nsILoadInfo
*
nsIChannel
*
*
)
;
void
GetStreams
(
nsIAsyncInputStream
*
*
inStream
nsIAsyncOutputStream
*
*
outStream
)
;
static
void
NewSimpleChannel
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadinfo
mozilla
:
:
net
:
:
RemoteStreamGetter
*
aStreamGetter
nsIChannel
*
*
aRetVal
)
;
static
StaticRefPtr
<
PageIconProtocolHandler
>
sSingleton
;
}
;
}
#
endif
