#
ifndef
nsNavBookmarks_h_
#
define
nsNavBookmarks_h_
#
include
"
nsINavBookmarksService
.
h
"
#
include
"
nsNavHistory
.
h
"
#
include
"
nsToolkitCompsCID
.
h
"
#
include
"
nsCategoryCache
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
prtime
.
h
"
class
nsNavBookmarks
;
namespace
mozilla
{
namespace
places
{
enum
BookmarkStatementId
{
DB_FIND_REDIRECTED_BOOKMARK
=
0
DB_GET_BOOKMARKS_FOR_URI
}
;
struct
BookmarkData
{
int64_t
id
=
-
1
;
nsCString
url
;
nsCString
title
;
int32_t
position
=
-
1
;
int64_t
placeId
=
-
1
;
int64_t
parentId
=
-
1
;
int64_t
grandParentId
=
-
1
;
int32_t
type
=
0
;
int32_t
syncStatus
=
nsINavBookmarksService
:
:
SYNC_STATUS_UNKNOWN
;
nsCString
serviceCID
;
PRTime
dateAdded
=
0
;
PRTime
lastModified
=
0
;
nsCString
guid
;
nsCString
parentGuid
;
}
;
struct
ItemVisitData
{
BookmarkData
bookmark
;
int64_t
visitId
;
uint32_t
transitionType
;
PRTime
time
;
}
;
struct
ItemChangeData
{
BookmarkData
bookmark
;
bool
isAnnotation
=
false
;
bool
updateLastModified
=
false
;
uint16_t
source
=
nsINavBookmarksService
:
:
SOURCE_DEFAULT
;
nsCString
property
;
nsCString
newValue
;
nsCString
oldValue
;
}
;
struct
TombstoneData
{
nsCString
guid
;
PRTime
dateRemoved
;
}
;
typedef
void
(
nsNavBookmarks
:
:
*
ItemVisitMethod
)
(
const
ItemVisitData
&
)
;
typedef
void
(
nsNavBookmarks
:
:
*
ItemChangeMethod
)
(
const
ItemChangeData
&
)
;
enum
BookmarkDate
{
LAST_MODIFIED
}
;
}
}
class
nsNavBookmarks
final
:
public
nsINavBookmarksService
public
nsINavHistoryObserver
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSINAVBOOKMARKSSERVICE
NS_DECL_NSINAVHISTORYOBSERVER
NS_DECL_NSIOBSERVER
nsNavBookmarks
(
)
;
static
already_AddRefed
<
nsNavBookmarks
>
GetSingleton
(
)
;
nsresult
Init
(
)
;
static
nsNavBookmarks
*
GetBookmarksService
(
)
{
if
(
!
gBookmarksService
)
{
nsCOMPtr
<
nsINavBookmarksService
>
serv
=
do_GetService
(
NS_NAVBOOKMARKSSERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
serv
nullptr
)
;
NS_ASSERTION
(
gBookmarksService
"
Should
have
static
instance
pointer
now
"
)
;
}
return
gBookmarksService
;
}
typedef
mozilla
:
:
places
:
:
BookmarkData
BookmarkData
;
typedef
mozilla
:
:
places
:
:
ItemVisitData
ItemVisitData
;
typedef
mozilla
:
:
places
:
:
ItemChangeData
ItemChangeData
;
typedef
mozilla
:
:
places
:
:
BookmarkStatementId
BookmarkStatementId
;
nsresult
OnVisit
(
nsIURI
*
aURI
int64_t
aVisitId
PRTime
aTime
int64_t
aSessionId
int64_t
aReferringId
uint32_t
aTransitionType
const
nsACString
&
aGUID
bool
aHidden
uint32_t
aVisitCount
uint32_t
aTyped
const
nsAString
&
aLastKnownTitle
)
;
nsresult
GetBookmarkURI
(
int64_t
aItemId
nsIURI
*
*
_URI
)
;
nsresult
ResultNodeForContainer
(
int64_t
aID
nsNavHistoryQueryOptions
*
aOptions
nsNavHistoryResultNode
*
*
aNode
)
;
nsresult
QueryFolderChildren
(
int64_t
aFolderId
nsNavHistoryQueryOptions
*
aOptions
nsCOMArray
<
nsNavHistoryResultNode
>
*
children
)
;
nsresult
ProcessFolderNodeRow
(
mozIStorageValueArray
*
aRow
nsNavHistoryQueryOptions
*
aOptions
nsCOMArray
<
nsNavHistoryResultNode
>
*
aChildren
int32_t
&
aCurrentIndex
)
;
nsresult
QueryFolderChildrenAsync
(
nsNavHistoryFolderResultNode
*
aNode
mozIStoragePendingStatement
*
*
_pendingStmt
)
;
nsresult
FetchItemInfo
(
int64_t
aItemId
BookmarkData
&
_bookmark
)
;
void
NotifyItemVisited
(
const
ItemVisitData
&
aData
)
;
void
NotifyItemChanged
(
const
ItemChangeData
&
aData
)
;
static
const
int32_t
kGetChildrenIndex_Guid
;
static
const
int32_t
kGetChildrenIndex_Position
;
static
const
int32_t
kGetChildrenIndex_Type
;
static
const
int32_t
kGetChildrenIndex_PlaceID
;
static
const
int32_t
kGetChildrenIndex_SyncStatus
;
static
mozilla
:
:
Atomic
<
int64_t
>
sLastInsertedItemId
;
static
void
StoreLastInsertedId
(
const
nsACString
&
aTable
const
int64_t
aLastInsertedId
)
;
private
:
static
nsNavBookmarks
*
gBookmarksService
;
~
nsNavBookmarks
(
)
;
bool
IsLivemark
(
int64_t
aFolderId
)
;
nsresult
AdjustIndices
(
int64_t
aFolder
int32_t
aStartIndex
int32_t
aEndIndex
int32_t
aDelta
)
;
nsresult
AdjustSeparatorsSyncCounter
(
int64_t
aFolderId
int32_t
aStartIndex
int64_t
aSyncChangeDelta
)
;
nsresult
FetchFolderInfo
(
int64_t
aFolderId
int32_t
*
_folderCount
nsACString
&
_guid
int64_t
*
_parentId
)
;
nsresult
AddSyncChangesForBookmarksWithURL
(
const
nsACString
&
aURL
int64_t
aSyncChangeDelta
)
;
nsresult
AddSyncChangesForBookmarksWithURI
(
nsIURI
*
aURI
int64_t
aSyncChangeDelta
)
;
nsresult
AddSyncChangesForBookmarksInFolder
(
int64_t
aFolderId
int64_t
aSyncChangeDelta
)
;
nsresult
InsertTombstone
(
const
BookmarkData
&
aBookmark
)
;
nsresult
InsertTombstones
(
const
nsTArray
<
mozilla
:
:
places
:
:
TombstoneData
>
&
aTombstones
)
;
nsresult
RemoveTombstone
(
const
nsACString
&
aGUID
)
;
nsresult
SetItemTitleInternal
(
BookmarkData
&
aBookmark
const
nsACString
&
aTitle
int64_t
aSyncChangeDelta
)
;
RefPtr
<
mozilla
:
:
places
:
:
Database
>
mDB
;
nsMaybeWeakPtrArray
<
nsINavBookmarkObserver
>
mObservers
;
int64_t
TagsRootId
(
)
{
return
mDB
-
>
GetTagsFolderId
(
)
;
}
inline
bool
IsRoot
(
int64_t
aFolderId
)
{
return
aFolderId
=
=
mDB
-
>
GetRootFolderId
(
)
|
|
aFolderId
=
=
mDB
-
>
GetMenuFolderId
(
)
|
|
aFolderId
=
=
mDB
-
>
GetTagsFolderId
(
)
|
|
aFolderId
=
=
mDB
-
>
GetUnfiledFolderId
(
)
|
|
aFolderId
=
=
mDB
-
>
GetToolbarFolderId
(
)
|
|
aFolderId
=
=
mDB
-
>
GetMobileFolderId
(
)
;
}
nsresult
SetItemDateInternal
(
enum
mozilla
:
:
places
:
:
BookmarkDate
aDateType
int64_t
aSyncChangeDelta
int64_t
aItemId
PRTime
aValue
)
;
nsresult
RemoveFolderChildren
(
int64_t
aFolderId
uint16_t
aSource
)
;
nsresult
GetDescendantChildren
(
int64_t
aFolderId
const
nsACString
&
aFolderGuid
int64_t
aGrandParentId
nsTArray
<
BookmarkData
>
&
aFolderChildrenArray
)
;
enum
ItemType
{
BOOKMARK
=
TYPE_BOOKMARK
FOLDER
=
TYPE_FOLDER
SEPARATOR
=
TYPE_SEPARATOR
}
;
nsresult
InsertBookmarkInDB
(
int64_t
aPlaceId
enum
ItemType
aItemType
int64_t
aParentId
int32_t
aIndex
const
nsACString
&
aTitle
PRTime
aDateAdded
PRTime
aLastModified
const
nsACString
&
aParentGuid
int64_t
aGrandParentId
nsIURI
*
aURI
uint16_t
aSource
int64_t
*
_itemId
nsACString
&
_guid
)
;
nsresult
GetBookmarksForURI
(
nsIURI
*
aURI
nsTArray
<
BookmarkData
>
&
_bookmarks
)
;
bool
mCanNotify
;
}
;
#
endif
