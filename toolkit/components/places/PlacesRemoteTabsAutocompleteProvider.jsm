"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
PlacesRemoteTabsAutocompleteProvider
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
weaveXPCService
"
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
}
)
;
function
escapeRegExp
(
string
)
{
return
string
.
replace
(
/
[
.
*
+
?
^
{
}
(
)
|
[
\
]
\
\
]
/
g
"
\
\
&
"
)
;
}
function
buildItems
(
)
{
let
clients
=
new
Map
(
)
;
let
tabs
=
new
Map
(
)
;
if
(
weaveXPCService
.
ready
)
{
let
engine
=
Weave
.
Service
.
engineManager
.
get
(
"
tabs
"
)
;
for
(
let
[
guid
client
]
in
Iterator
(
engine
.
getAllClients
(
)
)
)
{
clients
.
set
(
guid
client
)
;
for
(
let
tab
of
client
.
tabs
)
{
let
url
=
tab
.
urlHistory
[
0
]
;
tabs
.
set
(
url
{
clientId
:
guid
tab
}
)
;
}
}
}
return
{
clients
tabs
}
;
}
let
_items
=
null
;
function
ensureItems
(
)
{
if
(
!
_items
)
{
_items
=
buildItems
(
)
;
}
return
_items
;
}
function
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
weave
:
engine
:
sync
:
finish
"
:
if
(
data
=
=
"
tabs
"
)
{
_items
=
null
;
}
break
;
case
"
weave
:
service
:
start
-
over
"
:
_items
=
null
;
break
;
default
:
break
;
}
}
Services
.
obs
.
addObserver
(
observe
"
weave
:
engine
:
sync
:
finish
"
false
)
;
Services
.
obs
.
addObserver
(
observe
"
weave
:
service
:
start
-
over
"
false
)
;
this
.
PlacesRemoteTabsAutocompleteProvider
=
{
getMatches
(
searchString
)
{
if
(
!
Services
.
prefs
.
prefHasUserValue
(
"
services
.
sync
.
username
"
)
)
{
return
Promise
.
resolve
(
[
]
)
;
}
let
re
=
new
RegExp
(
escapeRegExp
(
searchString
)
"
i
"
)
;
let
matches
=
[
]
;
let
{
tabs
clients
}
=
ensureItems
(
)
;
for
(
let
[
url
{
clientId
tab
}
]
of
tabs
)
{
let
title
=
tab
.
title
;
if
(
url
.
match
(
re
)
|
|
(
title
&
&
title
.
match
(
re
)
)
)
{
let
client
=
clients
.
get
(
clientId
)
;
let
record
=
{
url
title
icon
:
tab
.
icon
deviceClass
:
Weave
.
Service
.
clientsEngine
.
isMobile
(
clientId
)
?
"
mobile
"
:
"
desktop
"
deviceName
:
client
.
clientName
}
;
matches
.
push
(
record
)
;
}
}
return
Promise
.
resolve
(
matches
)
;
}
}
