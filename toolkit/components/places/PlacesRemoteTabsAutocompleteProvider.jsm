"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PlacesRemoteTabsAutocompleteProvider
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SyncedTabs
"
"
resource
:
/
/
services
-
sync
/
SyncedTabs
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
weaveXPCService
"
function
(
)
{
try
{
return
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
}
catch
(
ex
)
{
}
return
null
;
}
)
;
function
escapeRegExp
(
string
)
{
return
string
.
replace
(
/
[
.
*
+
?
^
{
}
(
)
|
[
\
]
\
\
]
/
g
"
\
\
&
"
)
;
}
async
function
buildItems
(
)
{
let
tabsData
=
[
]
;
if
(
weaveXPCService
.
ready
)
{
let
clients
=
await
SyncedTabs
.
getTabClients
(
)
;
SyncedTabs
.
sortTabClientsByLastUsed
(
clients
)
;
for
(
let
client
of
clients
)
{
for
(
let
tab
of
client
.
tabs
)
{
tabsData
.
push
(
{
tab
client
}
)
;
}
}
}
return
tabsData
;
}
let
_items
=
null
;
async
function
ensureItems
(
)
{
if
(
!
_items
)
{
_items
=
await
buildItems
(
)
;
}
return
_items
;
}
const
PREF_SHOW_REMOTE_ICONS
=
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
;
let
showRemoteIcons
;
const
PREF_SHOW_REMOTE_TABS
=
"
services
.
sync
.
syncedTabs
.
showRemoteTabs
"
;
let
showRemoteTabs
;
function
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
weave
:
engine
:
sync
:
finish
"
:
if
(
data
=
=
"
tabs
"
)
{
_items
=
null
;
}
break
;
case
"
weave
:
service
:
start
-
over
"
:
_items
=
null
;
break
;
case
"
nsPref
:
changed
"
:
if
(
data
=
=
PREF_SHOW_REMOTE_ICONS
)
{
showRemoteIcons
=
Services
.
prefs
.
getBoolPref
(
PREF_SHOW_REMOTE_ICONS
true
)
;
}
else
if
(
data
=
=
PREF_SHOW_REMOTE_TABS
)
{
showRemoteTabs
=
Services
.
prefs
.
getBoolPref
(
PREF_SHOW_REMOTE_TABS
true
)
;
}
break
;
default
:
break
;
}
}
Services
.
obs
.
addObserver
(
observe
"
weave
:
engine
:
sync
:
finish
"
)
;
Services
.
obs
.
addObserver
(
observe
"
weave
:
service
:
start
-
over
"
)
;
Services
.
prefs
.
addObserver
(
PREF_SHOW_REMOTE_ICONS
observe
)
;
Services
.
prefs
.
addObserver
(
PREF_SHOW_REMOTE_TABS
observe
)
;
observe
(
null
"
nsPref
:
changed
"
PREF_SHOW_REMOTE_ICONS
)
;
observe
(
null
"
nsPref
:
changed
"
PREF_SHOW_REMOTE_TABS
)
;
var
PlacesRemoteTabsAutocompleteProvider
=
{
async
getMatches
(
searchString
)
{
if
(
!
weaveXPCService
|
|
!
weaveXPCService
.
ready
|
|
!
weaveXPCService
.
enabled
)
{
return
[
]
;
}
if
(
!
showRemoteTabs
)
{
return
[
]
;
}
let
re
=
new
RegExp
(
escapeRegExp
(
searchString
)
"
i
"
)
;
let
matches
=
[
]
;
let
tabsData
=
await
ensureItems
(
)
;
for
(
let
{
tab
client
}
of
tabsData
)
{
let
url
=
tab
.
url
;
let
title
=
tab
.
title
;
if
(
url
.
match
(
re
)
|
|
(
title
&
&
title
.
match
(
re
)
)
)
{
let
icon
=
showRemoteIcons
?
tab
.
icon
:
null
;
let
record
=
{
url
title
icon
deviceName
:
client
.
name
lastUsed
:
tab
.
lastUsed
*
1000
}
;
matches
.
push
(
record
)
;
}
}
return
matches
;
}
}
;
