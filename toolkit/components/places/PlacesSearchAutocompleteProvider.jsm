"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PlacesSearchAutocompleteProvider
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SearchSuggestionController
"
"
resource
:
/
/
gre
/
modules
/
SearchSuggestionController
.
jsm
"
)
;
const
SEARCH_ENGINE_TOPIC
=
"
browser
-
search
-
engine
-
modified
"
;
const
SearchAutocompleteProviderInternal
=
{
enginesByDomain
:
new
Map
(
)
enginesByAlias
:
new
Map
(
)
tokenAliasEngines
:
[
]
initialize
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
search
.
init
(
status
=
>
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
reject
(
new
Error
(
"
Unable
to
initialize
search
service
.
"
)
)
;
}
try
{
this
.
_refresh
(
)
;
Services
.
obs
.
addObserver
(
this
SEARCH_ENGINE_TOPIC
true
)
;
this
.
initialized
=
true
;
resolve
(
)
;
}
catch
(
ex
)
{
reject
(
ex
)
;
}
}
)
;
}
)
;
}
initialized
:
false
observe
(
subject
topic
data
)
{
switch
(
data
)
{
case
"
engine
-
added
"
:
case
"
engine
-
changed
"
:
case
"
engine
-
removed
"
:
case
"
engine
-
current
"
:
this
.
_refresh
(
)
;
}
}
_refresh
(
)
{
this
.
enginesByDomain
.
clear
(
)
;
this
.
enginesByAlias
.
clear
(
)
;
this
.
tokenAliasEngines
=
[
]
;
Services
.
search
.
getEngines
(
)
.
forEach
(
e
=
>
this
.
_addEngine
(
e
)
)
;
}
_addEngine
(
engine
)
{
let
domain
=
engine
.
getResultDomain
(
)
;
if
(
domain
&
&
!
engine
.
hidden
)
{
this
.
enginesByDomain
.
set
(
domain
engine
)
;
}
let
aliases
=
[
]
;
if
(
engine
.
alias
)
{
aliases
.
push
(
engine
.
alias
)
;
}
aliases
.
push
(
.
.
.
engine
.
wrappedJSObject
.
_internalAliases
)
;
for
(
let
alias
of
aliases
)
{
this
.
enginesByAlias
.
set
(
alias
.
toLocaleLowerCase
(
)
engine
)
;
}
let
tokenAliases
=
aliases
.
filter
(
a
=
>
a
.
startsWith
(
"
"
)
)
;
if
(
tokenAliases
.
length
)
{
this
.
tokenAliasEngines
.
push
(
{
engine
tokenAliases
}
)
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
class
SuggestionsFetch
{
constructor
(
engine
searchString
inPrivateContext
maxLocalResults
maxRemoteResults
userContextId
)
{
this
.
_controller
=
new
SearchSuggestionController
(
)
;
this
.
_controller
.
maxLocalResults
=
maxLocalResults
;
this
.
_controller
.
maxRemoteResults
=
maxRemoteResults
;
this
.
_engine
=
engine
;
this
.
_suggestions
=
[
]
;
this
.
_success
=
false
;
this
.
_promise
=
this
.
_controller
.
fetch
(
searchString
engine
userContextId
)
.
then
(
results
=
>
{
this
.
_success
=
true
;
if
(
results
)
{
this
.
_suggestions
.
push
(
.
.
.
results
.
local
.
map
(
r
=
>
(
{
suggestion
:
r
historical
:
true
}
)
)
.
.
.
results
.
remote
.
map
(
r
=
>
(
{
suggestion
:
r
historical
:
false
}
)
)
)
;
}
}
)
.
catch
(
err
=
>
{
}
)
;
}
get
engine
(
)
{
return
this
.
_engine
;
}
get
fetchCompletePromise
(
)
{
return
this
.
_promise
;
}
consume
(
)
{
return
this
.
_suggestions
.
shift
(
)
|
|
null
;
}
get
resultsCount
(
)
{
return
this
.
_success
?
this
.
_suggestions
.
length
:
-
1
;
}
stop
(
)
{
this
.
_controller
.
stop
(
)
;
}
}
var
gInitializationPromise
=
null
;
var
PlacesSearchAutocompleteProvider
=
Object
.
freeze
(
{
ensureInitialized
(
)
{
if
(
!
gInitializationPromise
)
{
gInitializationPromise
=
SearchAutocompleteProviderInternal
.
initialize
(
)
;
}
return
gInitializationPromise
;
}
async
engineForDomainPrefix
(
prefix
)
{
await
this
.
ensureInitialized
(
)
;
let
tuples
=
SearchAutocompleteProviderInternal
.
enginesByDomain
.
entries
(
)
;
for
(
let
[
domain
engine
]
of
tuples
)
{
if
(
domain
.
startsWith
(
prefix
)
|
|
domain
.
startsWith
(
"
www
.
"
+
prefix
)
)
{
return
engine
;
}
}
return
null
;
}
async
engineForAlias
(
alias
)
{
await
this
.
ensureInitialized
(
)
;
return
SearchAutocompleteProviderInternal
.
enginesByAlias
.
get
(
alias
.
toLocaleLowerCase
(
)
)
|
|
null
;
}
async
tokenAliasEngines
(
)
{
await
this
.
ensureInitialized
(
)
;
return
SearchAutocompleteProviderInternal
.
tokenAliasEngines
.
slice
(
)
;
}
async
currentEngine
(
)
{
await
this
.
ensureInitialized
(
)
;
return
Services
.
search
.
currentEngine
;
}
parseSubmissionURL
(
url
)
{
if
(
!
SearchAutocompleteProviderInternal
.
initialized
)
{
throw
new
Error
(
"
The
component
has
not
been
initialized
.
"
)
;
}
let
parseUrlResult
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
return
parseUrlResult
.
engine
&
&
{
engineName
:
parseUrlResult
.
engine
.
name
terms
:
parseUrlResult
.
terms
}
;
}
newSuggestionsFetch
(
engine
searchString
inPrivateContext
maxLocalResults
maxRemoteResults
userContextId
)
{
if
(
!
SearchAutocompleteProviderInternal
.
initialized
)
{
throw
new
Error
(
"
The
component
has
not
been
initialized
.
"
)
;
}
if
(
!
engine
)
{
throw
new
Error
(
"
engine
is
null
"
)
;
}
return
new
SuggestionsFetch
(
engine
searchString
inPrivateContext
maxLocalResults
maxRemoteResults
userContextId
)
;
}
}
)
;
