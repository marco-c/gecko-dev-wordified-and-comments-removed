const
TOPIC_GATHER_TELEMETRY
=
"
gather
-
places
-
telemetry
"
;
const
MAINTENANCE_INTERVAL_SECONDS
=
7
*
86400
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PlacesDBUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesDBUtils
.
jsm
"
)
;
function
PlacesCategoriesStarter
(
)
{
Services
.
obs
.
addObserver
(
this
TOPIC_GATHER_TELEMETRY
)
;
Services
.
obs
.
addObserver
(
this
PlacesUtils
.
TOPIC_SHUTDOWN
)
;
}
PlacesCategoriesStarter
.
prototype
=
{
observe
:
function
PCS_observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
PlacesUtils
.
TOPIC_SHUTDOWN
:
Services
.
obs
.
removeObserver
(
this
PlacesUtils
.
TOPIC_SHUTDOWN
)
;
Services
.
obs
.
removeObserver
(
this
TOPIC_GATHER_TELEMETRY
)
;
if
(
Cu
.
isModuleLoaded
(
"
resource
:
/
/
gre
/
modules
/
PlacesDBUtils
.
jsm
"
)
)
{
PlacesDBUtils
.
shutdown
(
)
;
}
break
;
case
TOPIC_GATHER_TELEMETRY
:
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
{
PlacesDBUtils
.
telemetry
(
)
;
}
)
;
break
;
case
"
idle
-
daily
"
:
let
lastMaintenance
=
Services
.
prefs
.
getIntPref
(
"
places
.
database
.
lastMaintenance
"
0
)
;
let
nowSeconds
=
parseInt
(
Date
.
now
(
)
/
1000
)
;
if
(
lastMaintenance
<
nowSeconds
-
MAINTENANCE_INTERVAL_SECONDS
)
{
PlacesDBUtils
.
maintenanceOnIdle
(
)
;
}
break
;
default
:
throw
new
Error
(
"
Trying
to
handle
an
unknown
category
.
"
)
;
}
}
classID
:
Components
.
ID
(
"
803938d5
-
e26d
-
4453
-
bf46
-
ad4b26e41114
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
}
;
var
EXPORTED_SYMBOLS
=
[
"
PlacesCategoriesStarter
"
]
;
