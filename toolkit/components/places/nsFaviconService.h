#
ifndef
nsFaviconService_h_
#
define
nsFaviconService_h_
#
include
"
nsIFaviconService
.
h
"
#
include
"
mozIAsyncFavicons
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsToolkitCompsCID
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
Database
.
h
"
#
include
"
imgITools
.
h
"
#
include
"
mozilla
/
storage
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
FaviconHelpers
.
h
"
static
uint16_t
sFaviconSizes
[
8
]
=
{
256
192
144
96
64
48
32
16
}
;
#
define
DEFAULT_FAVICON_SIZE
32
#
define
MAX_FAVICON_FILESIZE
3072
/
*
3
KiB
*
/
class
mozIStorageStatementCallback
;
class
UnassociatedIconHashKey
:
public
nsURIHashKey
{
public
:
explicit
UnassociatedIconHashKey
(
const
nsIURI
*
aURI
)
:
nsURIHashKey
(
aURI
)
{
}
UnassociatedIconHashKey
(
const
UnassociatedIconHashKey
&
aOther
)
:
nsURIHashKey
(
aOther
)
{
NS_NOTREACHED
(
"
Do
not
call
me
!
"
)
;
}
mozilla
:
:
places
:
:
IconData
iconData
;
PRTime
created
;
}
;
class
nsFaviconService
final
:
public
nsIFaviconService
public
mozIAsyncFavicons
public
nsITimerCallback
{
public
:
nsFaviconService
(
)
;
static
already_AddRefed
<
nsFaviconService
>
GetSingleton
(
)
;
nsresult
Init
(
)
;
static
nsFaviconService
*
GetFaviconService
(
)
{
if
(
!
gFaviconService
)
{
nsCOMPtr
<
nsIFaviconService
>
serv
=
do_GetService
(
NS_FAVICONSERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
serv
nullptr
)
;
NS_ASSERTION
(
gFaviconService
"
Should
have
static
instance
pointer
now
"
)
;
}
return
gFaviconService
;
}
static
void
ConvertUnsupportedPayloads
(
mozIStorageConnection
*
aDBConn
)
;
nsresult
GetFaviconLinkForIconString
(
const
nsCString
&
aIcon
nsIURI
*
*
aOutput
)
;
void
GetFaviconSpecForIconString
(
const
nsCString
&
aIcon
nsACString
&
aOutput
)
;
nsresult
OptimizeFaviconImage
(
const
uint8_t
*
aData
uint32_t
aDataLen
const
nsACString
&
aMimeType
nsACString
&
aNewData
nsACString
&
aNewMimeType
)
;
nsresult
GetFaviconDataAsync
(
nsIURI
*
aFaviconURI
mozIStorageStatementCallback
*
aCallback
)
;
void
SendFaviconNotifications
(
nsIURI
*
aPageURI
nsIURI
*
aFaviconURI
const
nsACString
&
aGUID
)
;
static
mozilla
:
:
Atomic
<
int64_t
>
sLastInsertedIconId
;
static
void
StoreLastInsertedId
(
const
nsACString
&
aTable
const
int64_t
aLastInsertedId
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIFAVICONSERVICE
NS_DECL_MOZIASYNCFAVICONS
NS_DECL_NSITIMERCALLBACK
private
:
imgITools
*
GetImgTools
(
)
{
if
(
!
mImgTools
)
{
mImgTools
=
do_CreateInstance
(
"
mozilla
.
org
/
image
/
tools
;
1
"
)
;
}
return
mImgTools
;
}
~
nsFaviconService
(
)
;
RefPtr
<
mozilla
:
:
places
:
:
Database
>
mDB
;
nsCOMPtr
<
nsITimer
>
mExpireUnassociatedIconsTimer
;
nsCOMPtr
<
imgITools
>
mImgTools
;
static
nsFaviconService
*
gFaviconService
;
nsCOMPtr
<
nsIURI
>
mDefaultIcon
;
uint32_t
mFailedFaviconSerial
;
nsDataHashtable
<
nsCStringHashKey
uint32_t
>
mFailedFavicons
;
friend
class
mozilla
:
:
places
:
:
AsyncReplaceFaviconData
;
nsTHashtable
<
UnassociatedIconHashKey
>
mUnassociatedIcons
;
}
;
#
define
FAVICON_ANNOTATION_NAME
"
favicon
"
#
endif
