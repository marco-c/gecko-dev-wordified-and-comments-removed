this
.
EXPORTED_SYMBOLS
=
[
"
PlacesUtils
"
"
PlacesAggregatedTransaction
"
"
PlacesCreateFolderTransaction
"
"
PlacesCreateBookmarkTransaction
"
"
PlacesCreateSeparatorTransaction
"
"
PlacesCreateLivemarkTransaction
"
"
PlacesMoveItemTransaction
"
"
PlacesRemoveItemTransaction
"
"
PlacesEditItemTitleTransaction
"
"
PlacesEditBookmarkURITransaction
"
"
PlacesSetItemAnnotationTransaction
"
"
PlacesSetPageAnnotationTransaction
"
"
PlacesEditBookmarkKeywordTransaction
"
"
PlacesEditBookmarkPostDataTransaction
"
"
PlacesEditItemDateAddedTransaction
"
"
PlacesEditItemLastModifiedTransaction
"
"
PlacesSortFolderByNameTransaction
"
"
PlacesTagURITransaction
"
"
PlacesUntagURITransaction
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
importGlobalProperties
(
[
"
URL
"
]
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Sqlite
"
"
resource
:
/
/
gre
/
modules
/
Sqlite
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Deprecated
"
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Bookmarks
"
"
resource
:
/
/
gre
/
modules
/
Bookmarks
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
History
"
"
resource
:
/
/
gre
/
modules
/
History
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AsyncShutdown
"
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesSyncUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesSyncUtils
.
jsm
"
)
;
const
MIN_TRANSACTIONS_FOR_BATCH
=
5
;
const
NEWLINE
=
AppConstants
.
platform
=
=
"
macosx
"
?
"
\
n
"
:
"
\
r
\
n
"
;
const
TIMERS_RESOLUTION_SKEW_MS
=
16
;
function
QI_node
(
aNode
aIID
)
{
var
result
=
null
;
try
{
result
=
aNode
.
QueryInterface
(
aIID
)
;
}
catch
(
e
)
{
}
return
result
;
}
function
asContainer
(
aNode
)
{
return
QI_node
(
aNode
Ci
.
nsINavHistoryContainerResultNode
)
;
}
function
asQuery
(
aNode
)
{
return
QI_node
(
aNode
Ci
.
nsINavHistoryQueryResultNode
)
;
}
function
notify
(
observers
notification
args
)
{
for
(
let
observer
of
observers
)
{
try
{
observer
[
notification
]
(
.
.
.
args
)
;
}
catch
(
ex
)
{
}
}
}
async
function
notifyKeywordChange
(
url
keyword
source
)
{
let
bookmarks
=
[
]
;
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
b
=
>
bookmarks
.
push
(
b
)
)
;
for
(
let
bookmark
of
bookmarks
)
{
bookmark
.
id
=
await
PlacesUtils
.
promiseItemId
(
bookmark
.
guid
)
;
bookmark
.
parentId
=
await
PlacesUtils
.
promiseItemId
(
bookmark
.
parentGuid
)
;
}
let
observers
=
PlacesUtils
.
bookmarks
.
getObservers
(
)
;
gIgnoreKeywordNotifications
=
true
;
for
(
let
bookmark
of
bookmarks
)
{
notify
(
observers
"
onItemChanged
"
[
bookmark
.
id
"
keyword
"
false
keyword
bookmark
.
lastModified
*
1000
bookmark
.
type
bookmark
.
parentId
bookmark
.
guid
bookmark
.
parentGuid
"
"
source
]
)
;
}
gIgnoreKeywordNotifications
=
false
;
}
function
serializeNode
(
aNode
aIsLivemark
)
{
let
data
=
{
}
;
data
.
title
=
aNode
.
title
;
data
.
id
=
aNode
.
itemId
;
data
.
livemark
=
aIsLivemark
;
let
guid
=
aNode
.
bookmarkGuid
;
if
(
guid
)
{
data
.
itemGuid
=
guid
;
if
(
aNode
.
parent
)
data
.
parent
=
aNode
.
parent
.
itemId
;
let
grandParent
=
aNode
.
parent
&
&
aNode
.
parent
.
parent
;
if
(
grandParent
)
data
.
grandParentId
=
grandParent
.
itemId
;
data
.
dateAdded
=
aNode
.
dateAdded
;
data
.
lastModified
=
aNode
.
lastModified
;
let
annos
=
PlacesUtils
.
getAnnotationsForItem
(
data
.
id
)
;
if
(
annos
.
length
>
0
)
data
.
annos
=
annos
;
}
if
(
PlacesUtils
.
nodeIsURI
(
aNode
)
)
{
NetUtil
.
newURI
(
aNode
.
uri
)
;
if
(
data
.
parent
=
=
PlacesUtils
.
tagsFolderId
)
throw
new
Error
(
"
Unexpected
node
type
"
)
;
data
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE
;
data
.
uri
=
aNode
.
uri
;
if
(
aNode
.
tags
)
data
.
tags
=
aNode
.
tags
;
}
else
if
(
PlacesUtils
.
nodeIsContainer
(
aNode
)
)
{
if
(
data
.
grandParentId
=
=
PlacesUtils
.
tagsFolderId
)
throw
new
Error
(
"
Unexpected
node
type
"
)
;
let
concreteId
=
PlacesUtils
.
getConcreteItemId
(
aNode
)
;
if
(
concreteId
!
=
-
1
)
{
if
(
PlacesUtils
.
nodeIsQuery
(
aNode
)
|
|
concreteId
!
=
aNode
.
itemId
)
{
data
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE
;
data
.
uri
=
aNode
.
uri
;
data
.
concreteId
=
concreteId
;
}
else
{
data
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE_CONTAINER
;
}
}
else
{
data
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE
;
data
.
uri
=
aNode
.
uri
;
}
}
else
if
(
PlacesUtils
.
nodeIsSeparator
(
aNode
)
)
{
if
(
data
.
parent
=
=
PlacesUtils
.
tagsFolderId
|
|
data
.
grandParentId
=
=
PlacesUtils
.
tagsFolderId
)
throw
new
Error
(
"
Unexpected
node
type
"
)
;
data
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE_SEPARATOR
;
}
return
JSON
.
stringify
(
data
)
;
}
const
DB_URL_LENGTH_MAX
=
65536
;
const
DB_TITLE_LENGTH_MAX
=
4096
;
const
DB_DESCRIPTION_LENGTH_MAX
=
1024
;
const
BOOKMARK_VALIDATORS
=
Object
.
freeze
(
{
guid
:
simpleValidateFunc
(
v
=
>
PlacesUtils
.
isValidGuid
(
v
)
)
parentGuid
:
simpleValidateFunc
(
v
=
>
typeof
(
v
)
=
=
"
string
"
&
&
/
^
[
a
-
zA
-
Z0
-
9
\
-
_
]
{
12
}
/
.
test
(
v
)
)
index
:
simpleValidateFunc
(
v
=
>
Number
.
isInteger
(
v
)
&
&
v
>
=
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
dateAdded
:
simpleValidateFunc
(
v
=
>
v
.
constructor
.
name
=
=
"
Date
"
)
lastModified
:
simpleValidateFunc
(
v
=
>
v
.
constructor
.
name
=
=
"
Date
"
)
type
:
simpleValidateFunc
(
v
=
>
Number
.
isInteger
(
v
)
&
&
[
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
PlacesUtils
.
bookmarks
.
TYPE_SEPARATOR
]
.
includes
(
v
)
)
title
:
v
=
>
{
if
(
v
=
=
=
null
)
{
return
"
"
;
}
if
(
typeof
(
v
)
=
=
"
string
"
)
{
return
v
.
slice
(
0
DB_TITLE_LENGTH_MAX
)
;
}
throw
new
Error
(
"
Invalid
title
"
)
;
}
url
:
v
=
>
{
simpleValidateFunc
(
val
=
>
(
typeof
(
val
)
=
=
"
string
"
&
&
val
.
length
<
=
DB_URL_LENGTH_MAX
)
|
|
(
val
instanceof
Ci
.
nsIURI
&
&
val
.
spec
.
length
<
=
DB_URL_LENGTH_MAX
)
|
|
(
val
instanceof
URL
&
&
val
.
href
.
length
<
=
DB_URL_LENGTH_MAX
)
)
.
call
(
this
v
)
;
if
(
typeof
(
v
)
=
=
=
"
string
"
)
return
new
URL
(
v
)
;
if
(
v
instanceof
Ci
.
nsIURI
)
return
new
URL
(
v
.
spec
)
;
return
v
;
}
source
:
simpleValidateFunc
(
v
=
>
Number
.
isInteger
(
v
)
&
&
Object
.
values
(
PlacesUtils
.
bookmarks
.
SOURCES
)
.
includes
(
v
)
)
annos
:
simpleValidateFunc
(
v
=
>
Array
.
isArray
(
v
)
&
&
v
.
length
)
keyword
:
simpleValidateFunc
(
v
=
>
(
typeof
(
v
)
=
=
"
string
"
)
&
&
v
.
length
)
charset
:
simpleValidateFunc
(
v
=
>
(
typeof
(
v
)
=
=
"
string
"
)
&
&
v
.
length
)
postData
:
simpleValidateFunc
(
v
=
>
(
typeof
(
v
)
=
=
"
string
"
)
&
&
v
.
length
)
tags
:
simpleValidateFunc
(
v
=
>
Array
.
isArray
(
v
)
&
&
v
.
length
)
}
)
;
const
SYNC_BOOKMARK_VALIDATORS
=
Object
.
freeze
(
{
syncId
:
simpleValidateFunc
(
v
=
>
typeof
v
=
=
"
string
"
&
&
(
(
PlacesSyncUtils
.
bookmarks
.
ROOTS
.
includes
(
v
)
|
|
PlacesUtils
.
isValidGuid
(
v
)
)
)
)
parentSyncId
:
v
=
>
SYNC_BOOKMARK_VALIDATORS
.
syncId
(
v
)
kind
:
simpleValidateFunc
(
v
=
>
typeof
v
=
=
"
string
"
&
&
Object
.
values
(
PlacesSyncUtils
.
bookmarks
.
KINDS
)
.
includes
(
v
)
)
query
:
simpleValidateFunc
(
v
=
>
v
=
=
=
null
|
|
(
typeof
v
=
=
"
string
"
&
&
v
)
)
folder
:
simpleValidateFunc
(
v
=
>
typeof
v
=
=
"
string
"
&
&
v
&
&
v
.
length
<
=
Ci
.
nsITaggingService
.
MAX_TAG_LENGTH
)
tags
:
v
=
>
{
if
(
v
=
=
=
null
)
{
return
[
]
;
}
if
(
!
Array
.
isArray
(
v
)
)
{
throw
new
Error
(
"
Invalid
tag
array
"
)
;
}
for
(
let
tag
of
v
)
{
if
(
typeof
tag
!
=
"
string
"
|
|
!
tag
|
|
tag
.
length
>
Ci
.
nsITaggingService
.
MAX_TAG_LENGTH
)
{
throw
new
Error
(
Invalid
tag
:
{
tag
}
)
;
}
}
return
v
;
}
keyword
:
simpleValidateFunc
(
v
=
>
v
=
=
=
null
|
|
typeof
v
=
=
"
string
"
)
description
:
simpleValidateFunc
(
v
=
>
v
=
=
=
null
|
|
typeof
v
=
=
"
string
"
)
loadInSidebar
:
simpleValidateFunc
(
v
=
>
v
=
=
=
true
|
|
v
=
=
=
false
)
dateAdded
:
simpleValidateFunc
(
v
=
>
typeof
v
=
=
=
"
number
"
&
&
v
>
PlacesSyncUtils
.
bookmarks
.
EARLIEST_BOOKMARK_TIMESTAMP
)
feed
:
v
=
>
v
=
=
=
null
?
v
:
BOOKMARK_VALIDATORS
.
url
(
v
)
site
:
v
=
>
v
=
=
=
null
?
v
:
BOOKMARK_VALIDATORS
.
url
(
v
)
title
:
BOOKMARK_VALIDATORS
.
title
url
:
BOOKMARK_VALIDATORS
.
url
}
)
;
const
SYNC_CHANGE_RECORD_VALIDATORS
=
Object
.
freeze
(
{
modified
:
simpleValidateFunc
(
v
=
>
typeof
v
=
=
"
number
"
&
&
v
>
=
0
)
counter
:
simpleValidateFunc
(
v
=
>
typeof
v
=
=
"
number
"
&
&
v
>
=
0
)
status
:
simpleValidateFunc
(
v
=
>
typeof
v
=
=
"
number
"
&
&
Object
.
values
(
PlacesUtils
.
bookmarks
.
SYNC_STATUS
)
.
includes
(
v
)
)
tombstone
:
simpleValidateFunc
(
v
=
>
v
=
=
=
true
|
|
v
=
=
=
false
)
synced
:
simpleValidateFunc
(
v
=
>
v
=
=
=
true
|
|
v
=
=
=
false
)
}
)
;
this
.
PlacesUtils
=
{
TYPE_X_MOZ_PLACE_CONTAINER
:
"
text
/
x
-
moz
-
place
-
container
"
TYPE_X_MOZ_PLACE_SEPARATOR
:
"
text
/
x
-
moz
-
place
-
separator
"
TYPE_X_MOZ_PLACE
:
"
text
/
x
-
moz
-
place
"
TYPE_X_MOZ_URL
:
"
text
/
x
-
moz
-
url
"
TYPE_HTML
:
"
text
/
html
"
TYPE_UNICODE
:
"
text
/
unicode
"
TYPE_X_MOZ_PLACE_ACTION
:
"
text
/
x
-
moz
-
place
-
action
"
EXCLUDE_FROM_BACKUP_ANNO
:
"
places
/
excludeFromBackup
"
LMANNO_FEEDURI
:
"
livemark
/
feedURI
"
LMANNO_SITEURI
:
"
livemark
/
siteURI
"
POST_DATA_ANNO
:
"
bookmarkProperties
/
POSTData
"
READ_ONLY_ANNO
:
"
placesInternal
/
READ_ONLY
"
CHARSET_ANNO
:
"
URIProperties
/
characterSet
"
MOBILE_ROOT_ANNO
:
"
mobile
/
bookmarksRoot
"
TOPIC_SHUTDOWN
:
"
places
-
shutdown
"
TOPIC_INIT_COMPLETE
:
"
places
-
init
-
complete
"
TOPIC_DATABASE_LOCKED
:
"
places
-
database
-
locked
"
TOPIC_EXPIRATION_FINISHED
:
"
places
-
expiration
-
finished
"
TOPIC_FEEDBACK_UPDATED
:
"
places
-
autocomplete
-
feedback
-
updated
"
TOPIC_FAVICONS_EXPIRED
:
"
places
-
favicons
-
expired
"
TOPIC_VACUUM_STARTING
:
"
places
-
vacuum
-
starting
"
TOPIC_BOOKMARKS_RESTORE_BEGIN
:
"
bookmarks
-
restore
-
begin
"
TOPIC_BOOKMARKS_RESTORE_SUCCESS
:
"
bookmarks
-
restore
-
success
"
TOPIC_BOOKMARKS_RESTORE_FAILED
:
"
bookmarks
-
restore
-
failed
"
asContainer
:
aNode
=
>
asContainer
(
aNode
)
asQuery
:
aNode
=
>
asQuery
(
aNode
)
endl
:
NEWLINE
_uri
:
function
PU__uri
(
aSpec
)
{
return
NetUtil
.
newURI
(
aSpec
)
;
}
isValidGuid
(
guid
)
{
return
typeof
guid
=
=
"
string
"
&
&
guid
&
&
(
/
^
[
a
-
zA
-
Z0
-
9
\
-
_
]
{
12
}
/
.
test
(
guid
)
)
;
}
toURI
(
url
)
{
url
=
(
url
instanceof
URL
)
?
url
.
href
:
url
;
return
NetUtil
.
newURI
(
url
)
;
}
toPRTime
(
date
)
{
if
(
typeof
date
!
=
"
number
"
&
&
date
.
constructor
.
name
!
=
"
Date
"
)
throw
new
Error
(
"
Invalid
value
passed
to
toPRTime
"
)
;
return
date
*
1000
;
}
toDate
(
time
)
{
if
(
typeof
time
!
=
"
number
"
)
throw
new
Error
(
"
Invalid
value
passed
to
toDate
"
)
;
return
new
Date
(
parseInt
(
time
/
1000
)
)
;
}
toISupportsString
:
function
PU_toISupportsString
(
aString
)
{
let
s
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
s
.
data
=
aString
;
return
s
;
}
getFormattedString
:
function
PU_getFormattedString
(
key
params
)
{
return
bundle
.
formatStringFromName
(
key
params
params
.
length
)
;
}
getString
:
function
PU_getString
(
key
)
{
return
bundle
.
GetStringFromName
(
key
)
;
}
mozActionURI
(
type
params
)
{
let
encodedParams
=
{
}
;
for
(
let
key
in
params
)
{
if
(
params
[
key
]
=
=
=
null
|
|
params
[
key
]
=
=
=
undefined
)
{
continue
;
}
encodedParams
[
key
]
=
encodeURIComponent
(
params
[
key
]
)
;
}
return
"
moz
-
action
:
"
+
type
+
"
"
+
JSON
.
stringify
(
encodedParams
)
;
}
nodeIsFolder
:
function
PU_nodeIsFolder
(
aNode
)
{
return
(
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER
|
|
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER_SHORTCUT
)
;
}
nodeIsBookmark
:
function
PU_nodeIsBookmark
(
aNode
)
{
return
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_URI
&
&
aNode
.
itemId
!
=
-
1
;
}
nodeIsSeparator
:
function
PU_nodeIsSeparator
(
aNode
)
{
return
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_SEPARATOR
;
}
nodeIsURI
:
function
PU_nodeIsURI
(
aNode
)
{
return
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_URI
;
}
nodeIsQuery
:
function
PU_nodeIsQuery
(
aNode
)
{
return
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_QUERY
;
}
nodeAncestors
:
function
*
PU_nodeAncestors
(
aNode
)
{
let
node
=
aNode
.
parent
;
while
(
node
)
{
yield
node
;
node
=
node
.
parent
;
}
}
validateItemProperties
(
name
validators
props
behavior
=
{
}
)
{
if
(
!
props
)
throw
new
Error
(
{
name
}
:
Input
should
be
a
valid
object
)
;
let
input
=
Object
.
assign
(
{
}
props
)
;
let
normalizedInput
=
{
}
;
let
required
=
new
Set
(
)
;
for
(
let
prop
in
behavior
)
{
if
(
behavior
[
prop
]
.
hasOwnProperty
(
"
required
"
)
&
&
behavior
[
prop
]
.
required
)
{
required
.
add
(
prop
)
;
}
if
(
behavior
[
prop
]
.
hasOwnProperty
(
"
requiredIf
"
)
&
&
behavior
[
prop
]
.
requiredIf
(
input
)
)
{
required
.
add
(
prop
)
;
}
if
(
behavior
[
prop
]
.
hasOwnProperty
(
"
validIf
"
)
&
&
input
[
prop
]
!
=
=
undefined
&
&
!
behavior
[
prop
]
.
validIf
(
input
)
)
{
throw
new
Error
(
{
name
}
:
Invalid
value
for
property
'
{
prop
}
'
:
{
JSON
.
stringify
(
input
[
prop
]
)
}
)
;
}
if
(
behavior
[
prop
]
.
hasOwnProperty
(
"
defaultValue
"
)
&
&
input
[
prop
]
=
=
=
undefined
)
{
input
[
prop
]
=
behavior
[
prop
]
.
defaultValue
;
}
if
(
behavior
[
prop
]
.
hasOwnProperty
(
"
replaceWith
"
)
)
{
input
[
prop
]
=
behavior
[
prop
]
.
replaceWith
;
}
}
for
(
let
prop
in
input
)
{
if
(
required
.
has
(
prop
)
)
{
required
.
delete
(
prop
)
;
}
else
if
(
input
[
prop
]
=
=
=
undefined
)
{
continue
;
}
if
(
validators
.
hasOwnProperty
(
prop
)
)
{
try
{
normalizedInput
[
prop
]
=
validators
[
prop
]
(
input
[
prop
]
input
)
;
}
catch
(
ex
)
{
throw
new
Error
(
{
name
}
:
Invalid
value
for
property
'
{
prop
}
'
:
{
JSON
.
stringify
(
input
[
prop
]
)
}
)
;
}
}
}
if
(
required
.
size
>
0
)
throw
new
Error
(
{
name
}
:
The
following
properties
were
expected
:
{
[
.
.
.
required
]
.
join
(
"
"
)
}
)
;
return
normalizedInput
;
}
BOOKMARK_VALIDATORS
SYNC_BOOKMARK_VALIDATORS
SYNC_CHANGE_RECORD_VALIDATORS
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsITransactionListener
]
)
_shutdownFunctions
:
[
]
registerShutdownFunction
:
function
PU_registerShutdownFunction
(
aFunc
)
{
if
(
this
.
_shutdownFunctions
.
length
=
=
0
)
{
Services
.
obs
.
addObserver
(
this
this
.
TOPIC_SHUTDOWN
)
;
}
this
.
_shutdownFunctions
.
push
(
aFunc
)
;
}
observe
:
function
PU_observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
this
.
TOPIC_SHUTDOWN
:
Services
.
obs
.
removeObserver
(
this
this
.
TOPIC_SHUTDOWN
)
;
while
(
this
.
_shutdownFunctions
.
length
>
0
)
{
this
.
_shutdownFunctions
.
shift
(
)
.
apply
(
this
)
;
}
break
;
}
}
onPageAnnotationSet
(
)
{
}
onPageAnnotationRemoved
(
)
{
}
didDo
:
function
PU_didDo
(
aManager
aTransaction
aDoResult
)
{
updateCommandsOnActiveWindow
(
)
;
}
didUndo
:
function
PU_didUndo
(
aManager
aTransaction
aUndoResult
)
{
updateCommandsOnActiveWindow
(
)
;
}
didRedo
:
function
PU_didRedo
(
aManager
aTransaction
aRedoResult
)
{
updateCommandsOnActiveWindow
(
)
;
}
didBeginBatch
:
function
PU_didBeginBatch
(
aManager
aResult
)
{
this
.
transactionManager
.
doTransaction
(
{
doTransaction
(
)
{
}
undoTransaction
(
)
{
}
redoTransaction
(
)
{
}
isTransient
:
false
merge
(
)
{
return
false
;
}
}
)
;
}
willDo
:
function
PU_willDo
(
)
{
}
willUndo
:
function
PU_willUndo
(
)
{
}
willRedo
:
function
PU_willRedo
(
)
{
}
willBeginBatch
:
function
PU_willBeginBatch
(
)
{
}
willEndBatch
:
function
PU_willEndBatch
(
)
{
}
didEndBatch
:
function
PU_didEndBatch
(
)
{
}
willMerge
:
function
PU_willMerge
(
)
{
}
didMerge
:
function
PU_didMerge
(
)
{
}
nodeIsHost
:
function
PU_nodeIsHost
(
aNode
)
{
return
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_QUERY
&
&
aNode
.
parent
&
&
asQuery
(
aNode
.
parent
)
.
queryOptions
.
resultType
=
=
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_SITE_QUERY
;
}
nodeIsDay
:
function
PU_nodeIsDay
(
aNode
)
{
var
resultType
;
return
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_QUERY
&
&
aNode
.
parent
&
&
(
(
resultType
=
asQuery
(
aNode
.
parent
)
.
queryOptions
.
resultType
)
=
=
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_QUERY
|
|
resultType
=
=
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_SITE_QUERY
)
;
}
nodeIsTagQuery
:
function
PU_nodeIsTagQuery
(
aNode
)
{
return
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_QUERY
&
&
asQuery
(
aNode
)
.
queryOptions
.
resultType
=
=
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_TAG_CONTENTS
;
}
containerTypes
:
[
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER_SHORTCUT
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_QUERY
]
nodeIsContainer
:
function
PU_nodeIsContainer
(
aNode
)
{
return
this
.
containerTypes
.
includes
(
aNode
.
type
)
;
}
nodeIsHistoryContainer
:
function
PU_nodeIsHistoryContainer
(
aNode
)
{
var
resultType
;
return
this
.
nodeIsQuery
(
aNode
)
&
&
(
(
resultType
=
asQuery
(
aNode
)
.
queryOptions
.
resultType
)
=
=
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_SITE_QUERY
|
|
resultType
=
=
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_QUERY
|
|
resultType
=
=
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_SITE_QUERY
|
|
this
.
nodeIsDay
(
aNode
)
|
|
this
.
nodeIsHost
(
aNode
)
)
;
}
getConcreteItemId
:
function
PU_getConcreteItemId
(
aNode
)
{
if
(
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER_SHORTCUT
)
return
asQuery
(
aNode
)
.
folderItemId
;
else
if
(
PlacesUtils
.
nodeIsTagQuery
(
aNode
)
)
{
var
queries
=
aNode
.
getQueries
(
)
;
var
folders
=
queries
[
0
]
.
getFolders
(
)
;
return
folders
[
0
]
;
}
return
aNode
.
itemId
;
}
getConcreteItemGuid
(
aNode
)
{
if
(
aNode
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER_SHORTCUT
)
return
asQuery
(
aNode
)
.
targetFolderGuid
;
return
aNode
.
bookmarkGuid
;
}
getReversedHost
(
url
)
{
return
url
.
host
.
split
(
"
"
)
.
reverse
(
)
.
join
(
"
"
)
+
"
.
"
;
}
wrapNode
(
aNode
aType
aFeedURI
)
{
function
gatherDataFromNode
(
node
gatherDataFunc
)
{
if
(
PlacesUtils
.
nodeIsFolder
(
node
)
&
&
node
.
type
!
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER_SHORTCUT
&
&
asQuery
(
node
)
.
queryOptions
.
excludeItems
)
{
let
folderRoot
=
PlacesUtils
.
getFolderContents
(
node
.
itemId
false
true
)
.
root
;
try
{
return
gatherDataFunc
(
folderRoot
)
;
}
finally
{
folderRoot
.
containerOpen
=
false
;
}
}
return
gatherDataFunc
(
node
)
;
}
function
gatherDataHtml
(
node
)
{
let
htmlEscape
=
s
=
>
s
.
replace
(
/
&
/
g
"
&
amp
;
"
)
.
replace
(
/
>
/
g
"
&
gt
;
"
)
.
replace
(
/
<
/
g
"
&
lt
;
"
)
.
replace
(
/
"
/
g
"
&
quot
;
"
)
.
replace
(
/
'
/
g
"
&
apos
;
"
)
;
let
escapedTitle
=
node
.
title
?
htmlEscape
(
node
.
title
)
:
"
"
;
if
(
aFeedURI
)
{
return
<
A
HREF
=
"
{
aFeedURI
}
"
>
{
escapedTitle
}
<
/
A
>
{
NEWLINE
}
;
}
if
(
PlacesUtils
.
nodeIsContainer
(
node
)
)
{
asContainer
(
node
)
;
let
wasOpen
=
node
.
containerOpen
;
if
(
!
wasOpen
)
node
.
containerOpen
=
true
;
let
childString
=
"
<
DL
>
<
DT
>
"
+
escapedTitle
+
"
<
/
DT
>
"
+
NEWLINE
;
let
cc
=
node
.
childCount
;
for
(
let
i
=
0
;
i
<
cc
;
+
+
i
)
{
childString
+
=
"
<
DD
>
"
+
NEWLINE
+
gatherDataHtml
(
node
.
getChild
(
i
)
)
+
"
<
/
DD
>
"
+
NEWLINE
;
}
node
.
containerOpen
=
wasOpen
;
return
childString
+
"
<
/
DL
>
"
+
NEWLINE
;
}
if
(
PlacesUtils
.
nodeIsURI
(
node
)
)
return
<
A
HREF
=
"
{
node
.
uri
}
"
>
{
escapedTitle
}
<
/
A
>
{
NEWLINE
}
;
if
(
PlacesUtils
.
nodeIsSeparator
(
node
)
)
return
"
<
HR
>
"
+
NEWLINE
;
return
"
"
;
}
function
gatherDataText
(
node
)
{
if
(
aFeedURI
)
{
return
aFeedURI
;
}
if
(
PlacesUtils
.
nodeIsContainer
(
node
)
)
{
asContainer
(
node
)
;
let
wasOpen
=
node
.
containerOpen
;
if
(
!
wasOpen
)
node
.
containerOpen
=
true
;
let
childString
=
node
.
title
+
NEWLINE
;
let
cc
=
node
.
childCount
;
for
(
let
i
=
0
;
i
<
cc
;
+
+
i
)
{
let
child
=
node
.
getChild
(
i
)
;
let
suffix
=
i
<
(
cc
-
1
)
?
NEWLINE
:
"
"
;
childString
+
=
gatherDataText
(
child
)
+
suffix
;
}
node
.
containerOpen
=
wasOpen
;
return
childString
;
}
if
(
PlacesUtils
.
nodeIsURI
(
node
)
)
return
node
.
uri
;
if
(
PlacesUtils
.
nodeIsSeparator
(
node
)
)
return
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
"
;
return
"
"
;
}
switch
(
aType
)
{
case
this
.
TYPE_X_MOZ_PLACE
:
case
this
.
TYPE_X_MOZ_PLACE_SEPARATOR
:
case
this
.
TYPE_X_MOZ_PLACE_CONTAINER
:
{
return
serializeNode
(
aNode
aFeedURI
)
;
}
case
this
.
TYPE_X_MOZ_URL
:
{
if
(
aFeedURI
|
|
PlacesUtils
.
nodeIsURI
(
aNode
)
)
return
(
aFeedURI
|
|
aNode
.
uri
)
+
NEWLINE
+
aNode
.
title
;
return
"
"
;
}
case
this
.
TYPE_HTML
:
{
return
gatherDataFromNode
(
aNode
gatherDataHtml
)
;
}
}
return
gatherDataFromNode
(
aNode
gatherDataText
)
;
}
unwrapNodes
:
function
PU_unwrapNodes
(
blob
type
)
{
var
nodes
=
[
]
;
switch
(
type
)
{
case
this
.
TYPE_X_MOZ_PLACE
:
case
this
.
TYPE_X_MOZ_PLACE_SEPARATOR
:
case
this
.
TYPE_X_MOZ_PLACE_CONTAINER
:
nodes
=
JSON
.
parse
(
"
[
"
+
blob
+
"
]
"
)
;
break
;
case
this
.
TYPE_X_MOZ_URL
:
{
let
parts
=
blob
.
split
(
"
\
n
"
)
;
if
(
parts
.
length
!
=
1
&
&
parts
.
length
%
2
)
break
;
for
(
let
i
=
0
;
i
<
parts
.
length
;
i
=
i
+
2
)
{
let
uriString
=
parts
[
i
]
;
let
titleString
=
"
"
;
if
(
parts
.
length
>
i
+
1
)
titleString
=
parts
[
i
+
1
]
;
else
{
try
{
titleString
=
this
.
_uri
(
uriString
)
.
QueryInterface
(
Ci
.
nsIURL
)
.
fileName
;
}
catch
(
e
)
{
}
}
if
(
this
.
_uri
(
uriString
)
)
{
nodes
.
push
(
{
uri
:
uriString
title
:
titleString
?
titleString
:
uriString
type
:
this
.
TYPE_X_MOZ_URL
}
)
;
}
}
break
;
}
case
this
.
TYPE_UNICODE
:
{
let
parts
=
blob
.
split
(
"
\
n
"
)
;
for
(
let
i
=
0
;
i
<
parts
.
length
;
i
+
+
)
{
let
uriString
=
parts
[
i
]
;
if
(
uriString
.
substr
(
0
1
)
=
=
"
\
x23
"
)
continue
;
if
(
uriString
!
=
"
"
&
&
this
.
_uri
(
uriString
)
)
nodes
.
push
(
{
uri
:
uriString
title
:
uriString
type
:
this
.
TYPE_X_MOZ_URL
}
)
;
}
break
;
}
default
:
throw
Cr
.
NS_ERROR_INVALID_ARG
;
}
return
nodes
;
}
validatePageInfo
(
pageInfo
validateVisits
=
true
)
{
let
info
=
{
visits
:
[
]
}
;
if
(
typeof
pageInfo
!
=
"
object
"
|
|
!
pageInfo
)
{
throw
new
TypeError
(
"
pageInfo
must
be
an
object
"
)
;
}
if
(
!
pageInfo
.
url
)
{
throw
new
TypeError
(
"
PageInfo
object
must
have
a
url
property
"
)
;
}
info
.
url
=
this
.
normalizeToURLOrGUID
(
pageInfo
.
url
)
;
if
(
typeof
pageInfo
.
guid
=
=
=
"
string
"
&
&
this
.
isValidGuid
(
pageInfo
.
guid
)
)
{
info
.
guid
=
pageInfo
.
guid
;
}
else
if
(
pageInfo
.
guid
)
{
throw
new
TypeError
(
guid
property
of
PageInfo
object
:
{
pageInfo
.
guid
}
is
invalid
)
;
}
if
(
typeof
pageInfo
.
title
=
=
=
"
string
"
)
{
info
.
title
=
pageInfo
.
title
;
}
else
if
(
pageInfo
.
title
!
=
null
&
&
pageInfo
.
title
!
=
undefined
)
{
throw
new
TypeError
(
title
property
of
PageInfo
object
:
{
pageInfo
.
title
}
must
be
a
string
if
provided
)
;
}
if
(
typeof
pageInfo
.
description
=
=
=
"
string
"
|
|
pageInfo
.
description
=
=
=
null
)
{
info
.
description
=
pageInfo
.
description
?
pageInfo
.
description
.
slice
(
0
DB_DESCRIPTION_LENGTH_MAX
)
:
null
;
}
else
if
(
pageInfo
.
description
!
=
=
undefined
)
{
throw
new
TypeError
(
description
property
of
pageInfo
object
:
{
pageInfo
.
description
}
must
be
either
a
string
or
null
if
provided
)
;
}
if
(
pageInfo
.
previewImageURL
|
|
pageInfo
.
previewImageURL
=
=
=
null
)
{
let
previewImageURL
=
pageInfo
.
previewImageURL
;
if
(
previewImageURL
=
=
=
null
)
{
info
.
previewImageURL
=
null
;
}
else
if
(
typeof
(
previewImageURL
)
=
=
=
"
string
"
&
&
previewImageURL
.
length
<
=
DB_URL_LENGTH_MAX
)
{
info
.
previewImageURL
=
new
URL
(
previewImageURL
)
;
}
else
if
(
previewImageURL
instanceof
Ci
.
nsIURI
&
&
previewImageURL
.
spec
.
length
<
=
DB_URL_LENGTH_MAX
)
{
info
.
previewImageURL
=
new
URL
(
previewImageURL
.
spec
)
;
}
else
if
(
previewImageURL
instanceof
URL
&
&
previewImageURL
.
href
.
length
<
=
DB_URL_LENGTH_MAX
)
{
info
.
previewImageURL
=
previewImageURL
;
}
else
{
throw
new
TypeError
(
"
previewImageURL
property
of
pageInfo
object
:
{
previewImageURL
}
is
invalid
"
)
;
}
}
if
(
!
validateVisits
)
{
return
info
;
}
if
(
!
pageInfo
.
visits
|
|
!
Array
.
isArray
(
pageInfo
.
visits
)
|
|
!
pageInfo
.
visits
.
length
)
{
throw
new
TypeError
(
"
PageInfo
object
must
have
an
array
of
visits
"
)
;
}
for
(
let
inVisit
of
pageInfo
.
visits
)
{
let
visit
=
{
date
:
new
Date
(
)
transition
:
inVisit
.
transition
|
|
History
.
TRANSITIONS
.
LINK
}
;
if
(
!
PlacesUtils
.
history
.
isValidTransition
(
visit
.
transition
)
)
{
throw
new
TypeError
(
transition
:
{
visit
.
transition
}
is
not
a
valid
transition
type
)
;
}
if
(
inVisit
.
date
)
{
PlacesUtils
.
history
.
ensureDate
(
inVisit
.
date
)
;
if
(
inVisit
.
date
>
(
Date
.
now
(
)
+
TIMERS_RESOLUTION_SKEW_MS
)
)
{
throw
new
TypeError
(
date
:
{
inVisit
.
date
}
cannot
be
a
future
date
)
;
}
visit
.
date
=
inVisit
.
date
;
}
if
(
inVisit
.
referrer
)
{
visit
.
referrer
=
this
.
normalizeToURLOrGUID
(
inVisit
.
referrer
)
;
}
info
.
visits
.
push
(
visit
)
;
}
return
info
;
}
normalizeToURLOrGUID
(
key
)
{
if
(
typeof
key
=
=
=
"
string
"
)
{
if
(
this
.
isValidGuid
(
key
)
)
{
return
key
;
}
return
new
URL
(
key
)
;
}
if
(
key
instanceof
URL
)
{
return
key
;
}
if
(
key
instanceof
Ci
.
nsIURI
)
{
return
new
URL
(
key
.
spec
)
;
}
throw
new
TypeError
(
"
Invalid
url
or
guid
:
"
+
key
)
;
}
getFolderContents
:
function
PU_getFolderContents
(
aFolderId
aExcludeItems
aExpandQueries
)
{
if
(
typeof
aFolderId
!
=
=
"
number
"
)
{
throw
new
Error
(
"
aFolderId
should
be
a
number
.
"
)
;
}
var
query
=
this
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
aFolderId
]
1
)
;
var
options
=
this
.
history
.
getNewQueryOptions
(
)
;
options
.
excludeItems
=
aExcludeItems
;
options
.
expandQueries
=
aExpandQueries
;
var
result
=
this
.
history
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
return
result
;
}
getAnnotationsForURI
:
function
PU_getAnnotationsForURI
(
aURI
)
{
var
annosvc
=
this
.
annotations
;
var
annos
=
[
]
val
=
null
;
var
annoNames
=
annosvc
.
getPageAnnotationNames
(
aURI
)
;
for
(
var
i
=
0
;
i
<
annoNames
.
length
;
i
+
+
)
{
var
flags
=
{
}
exp
=
{
}
storageType
=
{
}
;
annosvc
.
getPageAnnotationInfo
(
aURI
annoNames
[
i
]
flags
exp
storageType
)
;
val
=
annosvc
.
getPageAnnotation
(
aURI
annoNames
[
i
]
)
;
annos
.
push
(
{
name
:
annoNames
[
i
]
flags
:
flags
.
value
expires
:
exp
.
value
value
:
val
}
)
;
}
return
annos
;
}
getAnnotationsForItem
:
function
PU_getAnnotationsForItem
(
aItemId
)
{
var
annosvc
=
this
.
annotations
;
var
annos
=
[
]
val
=
null
;
var
annoNames
=
annosvc
.
getItemAnnotationNames
(
aItemId
)
;
for
(
var
i
=
0
;
i
<
annoNames
.
length
;
i
+
+
)
{
var
flags
=
{
}
exp
=
{
}
storageType
=
{
}
;
annosvc
.
getItemAnnotationInfo
(
aItemId
annoNames
[
i
]
flags
exp
storageType
)
;
val
=
annosvc
.
getItemAnnotation
(
aItemId
annoNames
[
i
]
)
;
annos
.
push
(
{
name
:
annoNames
[
i
]
flags
:
flags
.
value
expires
:
exp
.
value
value
:
val
}
)
;
}
return
annos
;
}
setAnnotationsForURI
:
function
PU_setAnnotationsForURI
(
aURI
aAnnos
)
{
var
annosvc
=
this
.
annotations
;
aAnnos
.
forEach
(
function
(
anno
)
{
if
(
anno
.
value
=
=
=
undefined
|
|
anno
.
value
=
=
=
null
)
{
annosvc
.
removePageAnnotation
(
aURI
anno
.
name
)
;
}
else
{
let
flags
=
(
"
flags
"
in
anno
)
?
anno
.
flags
:
0
;
let
expires
=
(
"
expires
"
in
anno
)
?
anno
.
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
;
annosvc
.
setPageAnnotation
(
aURI
anno
.
name
anno
.
value
flags
expires
)
;
}
}
)
;
}
setAnnotationsForItem
:
function
PU_setAnnotationsForItem
(
aItemId
aAnnos
aSource
)
{
var
annosvc
=
this
.
annotations
;
aAnnos
.
forEach
(
function
(
anno
)
{
if
(
anno
.
value
=
=
=
undefined
|
|
anno
.
value
=
=
=
null
)
{
annosvc
.
removeItemAnnotation
(
aItemId
anno
.
name
aSource
)
;
}
else
{
let
flags
=
(
"
flags
"
in
anno
)
?
anno
.
flags
:
0
;
let
expires
=
(
"
expires
"
in
anno
)
?
anno
.
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
;
annosvc
.
setItemAnnotation
(
aItemId
anno
.
name
anno
.
value
flags
expires
aSource
)
;
}
}
)
;
}
get
placesRootId
(
)
{
delete
this
.
placesRootId
;
return
this
.
placesRootId
=
this
.
bookmarks
.
placesRoot
;
}
get
bookmarksMenuFolderId
(
)
{
delete
this
.
bookmarksMenuFolderId
;
return
this
.
bookmarksMenuFolderId
=
this
.
bookmarks
.
bookmarksMenuFolder
;
}
get
toolbarFolderId
(
)
{
delete
this
.
toolbarFolderId
;
return
this
.
toolbarFolderId
=
this
.
bookmarks
.
toolbarFolder
;
}
get
tagsFolderId
(
)
{
delete
this
.
tagsFolderId
;
return
this
.
tagsFolderId
=
this
.
bookmarks
.
tagsFolder
;
}
get
unfiledBookmarksFolderId
(
)
{
delete
this
.
unfiledBookmarksFolderId
;
return
this
.
unfiledBookmarksFolderId
=
this
.
bookmarks
.
unfiledBookmarksFolder
;
}
get
mobileFolderId
(
)
{
delete
this
.
mobileFolderId
;
return
this
.
mobileFolderId
=
this
.
bookmarks
.
mobileFolder
;
}
isRootItem
:
function
PU_isRootItem
(
aItemId
)
{
return
aItemId
=
=
PlacesUtils
.
bookmarksMenuFolderId
|
|
aItemId
=
=
PlacesUtils
.
toolbarFolderId
|
|
aItemId
=
=
PlacesUtils
.
unfiledBookmarksFolderId
|
|
aItemId
=
=
PlacesUtils
.
tagsFolderId
|
|
aItemId
=
=
PlacesUtils
.
placesRootId
|
|
aItemId
=
=
PlacesUtils
.
mobileFolderId
;
}
setPostDataForBookmark
(
aBookmarkId
aPostData
)
{
if
(
!
aPostData
)
throw
new
Error
(
"
Must
provide
valid
POST
data
"
)
;
let
stmt
=
PlacesUtils
.
history
.
DBConnection
.
createStatement
(
UPDATE
moz_keywords
SET
post_data
=
:
post_data
WHERE
id
=
(
SELECT
k
.
id
FROM
moz_keywords
k
JOIN
moz_bookmarks
b
ON
b
.
fk
=
k
.
place_id
WHERE
b
.
id
=
:
item_id
AND
post_data
ISNULL
LIMIT
1
)
)
;
stmt
.
params
.
item_id
=
aBookmarkId
;
stmt
.
params
.
post_data
=
aPostData
;
try
{
stmt
.
execute
(
)
;
}
finally
{
stmt
.
finalize
(
)
;
}
return
(
async
function
(
)
{
let
guid
=
await
PlacesUtils
.
promiseItemGuid
(
aBookmarkId
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
let
cache
=
await
gKeywordsCachePromise
;
for
(
let
[
entry
]
of
cache
)
{
if
(
entry
.
url
.
href
=
=
bm
.
url
.
href
&
&
!
entry
.
postData
)
{
entry
.
postData
=
aPostData
;
}
}
}
)
(
)
.
catch
(
Cu
.
reportError
)
;
}
getPostDataForBookmark
(
aBookmarkId
)
{
let
stmt
=
PlacesUtils
.
history
.
DBConnection
.
createStatement
(
SELECT
k
.
post_data
FROM
moz_keywords
k
JOIN
moz_places
h
ON
h
.
id
=
k
.
place_id
JOIN
moz_bookmarks
b
ON
b
.
fk
=
h
.
id
WHERE
b
.
id
=
:
item_id
)
;
stmt
.
params
.
item_id
=
aBookmarkId
;
try
{
if
(
!
stmt
.
executeStep
(
)
)
return
null
;
return
stmt
.
row
.
post_data
;
}
finally
{
stmt
.
finalize
(
)
;
}
}
getURLAndPostDataForKeyword
(
aKeyword
)
{
Deprecated
.
warning
(
"
getURLAndPostDataForKeyword
(
)
is
deprecated
please
"
+
"
use
PlacesUtils
.
keywords
.
fetch
(
)
instead
"
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1100294
"
)
;
let
stmt
=
PlacesUtils
.
history
.
DBConnection
.
createStatement
(
SELECT
h
.
url
k
.
post_data
FROM
moz_keywords
k
JOIN
moz_places
h
ON
h
.
id
=
k
.
place_id
WHERE
k
.
keyword
=
:
keyword
)
;
stmt
.
params
.
keyword
=
aKeyword
.
toLowerCase
(
)
;
try
{
if
(
!
stmt
.
executeStep
(
)
)
return
[
null
null
]
;
return
[
stmt
.
row
.
url
stmt
.
row
.
post_data
]
;
}
finally
{
stmt
.
finalize
(
)
;
}
}
getBookmarksForURI
:
function
PU_getBookmarksForURI
(
aURI
)
{
return
this
.
bookmarks
.
getBookmarkIdsForURI
(
aURI
)
;
}
getMostRecentBookmarkForURI
:
function
PU_getMostRecentBookmarkForURI
(
aURI
)
{
let
bmkIds
=
this
.
bookmarks
.
getBookmarkIdsForURI
(
aURI
)
;
return
bmkIds
.
length
?
bmkIds
[
0
]
:
-
1
;
}
getContainerNodeWithOptions
:
function
PU_getContainerNodeWithOptions
(
aNode
aExcludeItems
aExpandQueries
)
{
if
(
!
this
.
nodeIsContainer
(
aNode
)
)
throw
Cr
.
NS_ERROR_INVALID_ARG
;
var
excludeItems
=
asQuery
(
aNode
)
.
queryOptions
.
excludeItems
|
|
asQuery
(
aNode
.
parentResult
.
root
)
.
queryOptions
.
excludeItems
;
var
expandQueries
=
asQuery
(
aNode
)
.
queryOptions
.
expandQueries
&
&
asQuery
(
aNode
.
parentResult
.
root
)
.
queryOptions
.
expandQueries
;
if
(
excludeItems
=
=
aExcludeItems
&
&
expandQueries
=
=
aExpandQueries
)
return
aNode
;
var
queries
=
{
}
options
=
{
}
;
this
.
history
.
queryStringToQueries
(
aNode
.
uri
queries
{
}
options
)
;
options
.
value
.
excludeItems
=
aExcludeItems
;
options
.
value
.
expandQueries
=
aExpandQueries
;
return
this
.
history
.
executeQueries
(
queries
.
value
queries
.
value
.
length
options
.
value
)
.
root
;
}
hasChildURIs
:
function
PU_hasChildURIs
(
aNode
)
{
if
(
!
this
.
nodeIsContainer
(
aNode
)
)
return
false
;
let
root
=
this
.
getContainerNodeWithOptions
(
aNode
false
true
)
;
let
result
=
root
.
parentResult
;
let
didSuppressNotifications
=
false
;
let
wasOpen
=
root
.
containerOpen
;
if
(
!
wasOpen
)
{
didSuppressNotifications
=
result
.
suppressNotifications
;
if
(
!
didSuppressNotifications
)
result
.
suppressNotifications
=
true
;
root
.
containerOpen
=
true
;
}
let
found
=
false
;
for
(
let
i
=
0
;
i
<
root
.
childCount
&
&
!
found
;
i
+
+
)
{
let
child
=
root
.
getChild
(
i
)
;
if
(
this
.
nodeIsURI
(
child
)
)
found
=
true
;
}
if
(
!
wasOpen
)
{
root
.
containerOpen
=
false
;
if
(
!
didSuppressNotifications
)
result
.
suppressNotifications
=
false
;
}
return
found
;
}
getURLsForContainerNode
:
function
PU_getURLsForContainerNode
(
aNode
)
{
let
urls
=
[
]
;
if
(
!
this
.
nodeIsContainer
(
aNode
)
)
return
urls
;
let
root
=
this
.
getContainerNodeWithOptions
(
aNode
false
true
)
;
let
result
=
root
.
parentResult
;
let
wasOpen
=
root
.
containerOpen
;
let
didSuppressNotifications
=
false
;
if
(
!
wasOpen
)
{
didSuppressNotifications
=
result
.
suppressNotifications
;
if
(
!
didSuppressNotifications
)
result
.
suppressNotifications
=
true
;
root
.
containerOpen
=
true
;
}
for
(
let
i
=
0
;
i
<
root
.
childCount
;
+
+
i
)
{
let
child
=
root
.
getChild
(
i
)
;
if
(
this
.
nodeIsURI
(
child
)
)
urls
.
push
(
{
uri
:
child
.
uri
isBookmark
:
this
.
nodeIsBookmark
(
child
)
}
)
;
}
if
(
!
wasOpen
)
{
root
.
containerOpen
=
false
;
if
(
!
didSuppressNotifications
)
result
.
suppressNotifications
=
false
;
}
return
urls
;
}
promiseDBConnection
:
(
)
=
>
gAsyncDBConnPromised
async
withConnectionWrapper
(
name
task
)
{
if
(
!
name
)
{
throw
new
TypeError
(
"
Expecting
a
user
-
readable
name
"
)
;
}
let
db
=
await
gAsyncDBWrapperPromised
;
return
db
.
executeBeforeShutdown
(
name
task
)
;
}
addLazyBookmarkObserver
(
aObserver
aWeakOwner
)
{
Deprecated
.
warning
(
PlacesUtils
.
addLazyBookmarkObserver
(
)
is
deprecated
.
Please
use
PlacesUtils
.
bookmarks
.
addObserver
(
)
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1371677
"
)
;
this
.
bookmarks
.
addObserver
(
aObserver
aWeakOwner
=
=
=
true
)
;
}
removeLazyBookmarkObserver
(
aObserver
)
{
Deprecated
.
warning
(
PlacesUtils
.
removeLazyBookmarkObserver
(
)
is
deprecated
.
Please
use
PlacesUtils
.
bookmarks
.
removeObserver
(
)
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1371677
"
)
;
this
.
bookmarks
.
removeObserver
(
aObserver
)
;
}
setCharsetForURI
:
function
PU_setCharsetForURI
(
aURI
aCharset
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
tm
.
dispatchToMainThread
(
function
(
)
{
if
(
aCharset
&
&
aCharset
.
length
>
0
)
{
PlacesUtils
.
annotations
.
setPageAnnotation
(
aURI
PlacesUtils
.
CHARSET_ANNO
aCharset
0
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
)
;
}
else
{
PlacesUtils
.
annotations
.
removePageAnnotation
(
aURI
PlacesUtils
.
CHARSET_ANNO
)
;
}
resolve
(
)
;
}
)
;
}
)
;
}
getCharsetForURI
:
function
PU_getCharsetForURI
(
aURI
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
tm
.
dispatchToMainThread
(
function
(
)
{
let
charset
=
null
;
try
{
charset
=
PlacesUtils
.
annotations
.
getPageAnnotation
(
aURI
PlacesUtils
.
CHARSET_ANNO
)
;
}
catch
(
ex
)
{
}
resolve
(
charset
)
;
}
)
;
}
)
;
}
promisePlaceInfo
(
aPlaceIdentifier
)
{
Deprecated
.
warning
(
PlacesUtils
.
promisePlaceInfo
(
)
is
deprecated
.
Please
use
PlacesUtils
.
history
.
fetch
(
)
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1350377
"
)
;
return
PlacesUtils
.
history
.
fetch
(
aPlaceIdentifier
)
;
}
promiseFaviconData
(
aPageUrl
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
PlacesUtils
.
favicons
.
getFaviconDataForPage
(
NetUtil
.
newURI
(
aPageUrl
)
function
(
aURI
aDataLen
aData
aMimeType
)
{
if
(
aURI
)
{
resolve
(
{
uri
:
aURI
dataLen
:
aDataLen
data
:
aData
mimeType
:
aMimeType
}
)
;
}
else
{
reject
(
)
;
}
}
)
;
}
)
;
}
promiseFaviconLinkUrl
(
aPageUrl
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
!
(
aPageUrl
instanceof
Ci
.
nsIURI
)
)
aPageUrl
=
NetUtil
.
newURI
(
aPageUrl
)
;
PlacesUtils
.
favicons
.
getFaviconURLForPage
(
aPageUrl
uri
=
>
{
if
(
uri
)
{
uri
=
PlacesUtils
.
favicons
.
getFaviconLinkForIcon
(
uri
)
;
resolve
(
uri
)
;
}
else
{
reject
(
"
favicon
not
found
for
uri
"
)
;
}
}
)
;
}
)
;
}
urlWithSizeRef
(
window
href
size
)
{
return
href
+
(
href
.
includes
(
"
#
"
)
?
"
&
"
:
"
#
"
)
+
"
size
=
"
+
(
Math
.
round
(
size
)
*
window
.
devicePixelRatio
)
;
}
promiseItemGuid
(
aItemId
)
{
return
GuidHelper
.
getItemGuid
(
aItemId
)
}
promiseItemId
(
aGuid
)
{
return
GuidHelper
.
getItemId
(
aGuid
)
}
promiseManyItemIds
(
aGuids
)
{
return
GuidHelper
.
getManyItemIds
(
aGuids
)
;
}
invalidateCachedGuidFor
(
aItemId
)
{
GuidHelper
.
invalidateCacheForItemId
(
aItemId
)
}
async
promiseBookmarksTree
(
aItemGuid
=
"
"
aOptions
=
{
}
)
{
let
createItemInfoObject
=
async
function
(
aRow
aIncludeParentGuid
)
{
let
item
=
{
}
;
let
copyProps
=
(
.
.
.
props
)
=
>
{
for
(
let
prop
of
props
)
{
let
val
=
aRow
.
getResultByName
(
prop
)
;
if
(
val
!
=
=
null
)
item
[
prop
]
=
val
;
}
}
;
copyProps
(
"
guid
"
"
title
"
"
index
"
"
dateAdded
"
"
lastModified
"
)
;
if
(
aIncludeParentGuid
)
copyProps
(
"
parentGuid
"
)
;
let
itemId
=
aRow
.
getResultByName
(
"
id
"
)
;
if
(
aOptions
.
includeItemIds
)
item
.
id
=
itemId
;
GuidHelper
.
updateCache
(
itemId
item
.
guid
)
;
let
type
=
aRow
.
getResultByName
(
"
type
"
)
;
if
(
type
=
=
Ci
.
nsINavBookmarksService
.
TYPE_BOOKMARK
)
copyProps
(
"
charset
"
"
tags
"
"
iconuri
"
)
;
if
(
aRow
.
getResultByName
(
"
has_annos
"
)
)
{
try
{
item
.
annos
=
PlacesUtils
.
getAnnotationsForItem
(
itemId
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
Unexpected
error
while
reading
annotations
"
+
e
)
;
}
}
switch
(
type
)
{
case
Ci
.
nsINavBookmarksService
.
TYPE_BOOKMARK
:
item
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE
;
item
.
uri
=
NetUtil
.
newURI
(
aRow
.
getResultByName
(
"
url
"
)
)
.
spec
;
let
entry
=
await
PlacesUtils
.
keywords
.
fetch
(
{
url
:
item
.
uri
}
)
;
if
(
entry
)
{
item
.
keyword
=
entry
.
keyword
;
item
.
postData
=
entry
.
postData
;
}
break
;
case
Ci
.
nsINavBookmarksService
.
TYPE_FOLDER
:
item
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE_CONTAINER
;
if
(
itemId
=
=
PlacesUtils
.
placesRootId
)
item
.
root
=
"
placesRoot
"
;
else
if
(
itemId
=
=
PlacesUtils
.
bookmarksMenuFolderId
)
item
.
root
=
"
bookmarksMenuFolder
"
;
else
if
(
itemId
=
=
PlacesUtils
.
unfiledBookmarksFolderId
)
item
.
root
=
"
unfiledBookmarksFolder
"
;
else
if
(
itemId
=
=
PlacesUtils
.
toolbarFolderId
)
item
.
root
=
"
toolbarFolder
"
;
else
if
(
itemId
=
=
PlacesUtils
.
mobileFolderId
)
item
.
root
=
"
mobileFolder
"
;
break
;
case
Ci
.
nsINavBookmarksService
.
TYPE_SEPARATOR
:
item
.
type
=
PlacesUtils
.
TYPE_X_MOZ_PLACE_SEPARATOR
;
break
;
default
:
Cu
.
reportError
(
"
Unexpected
bookmark
type
"
)
;
break
;
}
return
item
;
}
;
const
QUERY_STR
=
/
*
do
not
warn
(
bug
no
)
:
cannot
use
an
index
*
/
WITH
RECURSIVE
descendants
(
fk
level
type
id
guid
parent
parentGuid
position
title
dateAdded
lastModified
)
AS
(
SELECT
b1
.
fk
0
b1
.
type
b1
.
id
b1
.
guid
b1
.
parent
(
SELECT
guid
FROM
moz_bookmarks
WHERE
id
=
b1
.
parent
)
b1
.
position
b1
.
title
b1
.
dateAdded
b1
.
lastModified
FROM
moz_bookmarks
b1
WHERE
b1
.
guid
=
:
item_guid
UNION
ALL
SELECT
b2
.
fk
level
+
1
b2
.
type
b2
.
id
b2
.
guid
b2
.
parent
descendants
.
guid
b2
.
position
b2
.
title
b2
.
dateAdded
b2
.
lastModified
FROM
moz_bookmarks
b2
JOIN
descendants
ON
b2
.
parent
=
descendants
.
id
AND
b2
.
id
<
>
:
tags_folder
)
SELECT
d
.
level
d
.
id
d
.
guid
d
.
parent
d
.
parentGuid
d
.
type
d
.
position
AS
[
index
]
IFNULL
(
d
.
title
"
"
)
AS
title
d
.
dateAdded
d
.
lastModified
h
.
url
(
SELECT
icon_url
FROM
moz_icons
i
JOIN
moz_icons_to_pages
ON
icon_id
=
i
.
id
JOIN
moz_pages_w_icons
pi
ON
page_id
=
pi
.
id
WHERE
pi
.
page_url_hash
=
hash
(
h
.
url
)
AND
pi
.
page_url
=
h
.
url
ORDER
BY
width
DESC
LIMIT
1
)
AS
iconuri
(
SELECT
GROUP_CONCAT
(
t
.
title
'
'
)
FROM
moz_bookmarks
b2
JOIN
moz_bookmarks
t
ON
t
.
id
=
+
b2
.
parent
AND
t
.
parent
=
:
tags_folder
WHERE
b2
.
fk
=
h
.
id
)
AS
tags
EXISTS
(
SELECT
1
FROM
moz_items_annos
WHERE
item_id
=
d
.
id
LIMIT
1
)
AS
has_annos
(
SELECT
a
.
content
FROM
moz_annos
a
JOIN
moz_anno_attributes
n
ON
a
.
anno_attribute_id
=
n
.
id
WHERE
place_id
=
h
.
id
AND
n
.
name
=
:
charset_anno
)
AS
charset
FROM
descendants
d
LEFT
JOIN
moz_bookmarks
b3
ON
b3
.
id
=
d
.
parent
LEFT
JOIN
moz_places
h
ON
h
.
id
=
d
.
fk
ORDER
BY
d
.
level
d
.
parent
d
.
position
;
if
(
!
aItemGuid
)
aItemGuid
=
this
.
bookmarks
.
rootGuid
;
let
hasExcludeItemsCallback
=
aOptions
.
hasOwnProperty
(
"
excludeItemsCallback
"
)
;
let
excludedParents
=
new
Set
(
)
;
let
shouldExcludeItem
=
(
aItem
aParentGuid
)
=
>
{
let
exclude
=
excludedParents
.
has
(
aParentGuid
)
|
|
aOptions
.
excludeItemsCallback
(
aItem
)
;
if
(
exclude
)
{
if
(
aItem
.
type
=
=
this
.
TYPE_X_MOZ_PLACE_CONTAINER
)
excludedParents
.
add
(
aItem
.
guid
)
;
}
return
exclude
;
}
;
let
rootItem
=
null
;
let
parentsMap
=
new
Map
(
)
;
let
conn
=
await
this
.
promiseDBConnection
(
)
;
let
rows
=
await
conn
.
executeCached
(
QUERY_STR
{
tags_folder
:
PlacesUtils
.
tagsFolderId
charset_anno
:
PlacesUtils
.
CHARSET_ANNO
item_guid
:
aItemGuid
}
)
;
let
yieldCounter
=
0
;
for
(
let
row
of
rows
)
{
let
item
;
if
(
!
rootItem
)
{
try
{
rootItem
=
item
=
await
createItemInfoObject
(
row
true
)
;
Object
.
defineProperty
(
rootItem
"
itemsCount
"
{
value
:
1
writable
:
true
enumerable
:
false
configurable
:
false
}
)
;
}
catch
(
ex
)
{
throw
new
Error
(
"
Failed
to
fetch
the
data
for
the
root
item
"
+
ex
)
;
}
}
else
{
try
{
item
=
await
createItemInfoObject
(
row
false
)
;
let
parentGuid
=
row
.
getResultByName
(
"
parentGuid
"
)
;
if
(
hasExcludeItemsCallback
&
&
shouldExcludeItem
(
item
parentGuid
)
)
continue
;
let
parentItem
=
parentsMap
.
get
(
parentGuid
)
;
if
(
"
children
"
in
parentItem
)
parentItem
.
children
.
push
(
item
)
;
else
parentItem
.
children
=
[
item
]
;
rootItem
.
itemsCount
+
+
;
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Failed
to
fetch
the
data
for
an
item
"
+
ex
)
;
continue
;
}
}
if
(
item
.
type
=
=
this
.
TYPE_X_MOZ_PLACE_CONTAINER
)
parentsMap
.
set
(
item
.
guid
item
)
;
if
(
+
+
yieldCounter
%
50
=
=
0
)
{
await
new
Promise
(
resolve
=
>
{
Services
.
tm
.
dispatchToMainThread
(
resolve
)
;
}
)
;
}
}
return
rootItem
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
PlacesUtils
"
history
"
function
(
)
{
let
hs
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Ci
.
nsINavHistoryService
)
.
QueryInterface
(
Ci
.
nsIBrowserHistory
)
.
QueryInterface
(
Ci
.
nsPIPlacesDatabase
)
;
return
Object
.
freeze
(
new
Proxy
(
hs
{
get
(
target
name
)
{
let
property
object
;
if
(
name
in
target
)
{
property
=
target
[
name
]
;
object
=
target
;
}
else
{
property
=
History
[
name
]
;
object
=
History
;
}
if
(
typeof
property
=
=
"
function
"
)
{
return
property
.
bind
(
object
)
;
}
return
property
;
}
}
)
)
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
PlacesUtils
"
asyncHistory
"
"
mozilla
.
org
/
browser
/
history
;
1
"
"
mozIAsyncHistory
"
)
;
XPCOMUtils
.
defineLazyGetter
(
PlacesUtils
"
bhistory
"
function
(
)
{
return
PlacesUtils
.
history
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
PlacesUtils
"
favicons
"
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
"
mozIAsyncFavicons
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
bmsvc
"
"
mozilla
.
org
/
browser
/
nav
-
bookmarks
-
service
;
1
"
"
nsINavBookmarksService
"
)
;
XPCOMUtils
.
defineLazyGetter
(
PlacesUtils
"
bookmarks
"
(
)
=
>
{
return
Object
.
freeze
(
new
Proxy
(
Bookmarks
{
get
:
(
target
name
)
=
>
Bookmarks
.
hasOwnProperty
(
name
)
?
Bookmarks
[
name
]
:
bmsvc
[
name
]
}
)
)
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
PlacesUtils
"
annotations
"
"
mozilla
.
org
/
browser
/
annotation
-
service
;
1
"
"
nsIAnnotationService
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
PlacesUtils
"
tagging
"
"
mozilla
.
org
/
browser
/
tagging
-
service
;
1
"
"
nsITaggingService
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
PlacesUtils
"
livemarks
"
"
mozilla
.
org
/
browser
/
livemark
-
service
;
2
"
"
mozIAsyncLivemarks
"
)
;
XPCOMUtils
.
defineLazyGetter
(
PlacesUtils
"
keywords
"
(
)
=
>
{
gKeywordsCachePromise
.
catch
(
Cu
.
reportError
)
;
return
Keywords
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
PlacesUtils
"
transactionManager
"
function
(
)
{
let
tm
=
Cc
[
"
mozilla
.
org
/
transactionmanager
;
1
"
]
.
createInstance
(
Ci
.
nsITransactionManager
)
;
tm
.
AddListener
(
PlacesUtils
)
;
this
.
registerShutdownFunction
(
function
(
)
{
this
.
transactionManager
.
RemoveListener
(
this
)
;
this
.
transactionManager
.
clear
(
)
;
}
)
;
return
Object
.
create
(
tm
{
"
doTransaction
"
:
{
value
(
aTransaction
)
{
tm
.
doTransaction
(
aTransaction
)
;
}
}
}
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
bundle
"
function
(
)
{
const
PLACES_STRING_BUNDLE_URI
=
"
chrome
:
/
/
places
/
locale
/
places
.
properties
"
;
return
Cc
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Ci
.
nsIStringBundleService
)
.
createBundle
(
PLACES_STRING_BUNDLE_URI
)
;
}
)
;
function
setupDbForShutdown
(
conn
name
)
{
try
{
let
state
=
"
0
.
Not
started
.
"
;
let
promiseClosed
=
new
Promise
(
(
resolve
reject
)
=
>
{
try
{
PlacesUtils
.
history
.
connectionShutdownClient
.
jsclient
.
addBlocker
(
{
name
}
closing
as
part
of
Places
shutdown
async
function
(
)
{
state
=
"
1
.
Service
has
initiated
shutdown
"
;
await
conn
.
close
(
)
;
state
=
"
2
.
Closed
Sqlite
.
jsm
connection
.
"
;
resolve
(
)
;
}
(
)
=
>
state
)
;
}
catch
(
ex
)
{
conn
.
close
(
)
;
reject
(
ex
)
;
}
}
)
;
Sqlite
.
shutdown
.
addBlocker
(
{
name
}
must
be
closed
before
Sqlite
.
jsm
(
)
=
>
promiseClosed
.
catch
(
Cu
.
reportError
)
(
)
=
>
state
)
;
}
catch
(
ex
)
{
conn
.
close
(
)
;
throw
ex
;
}
}
XPCOMUtils
.
defineLazyGetter
(
this
"
gAsyncDBConnPromised
"
(
)
=
>
Sqlite
.
cloneStorageConnection
(
{
connection
:
PlacesUtils
.
history
.
DBConnection
readOnly
:
true
}
)
.
then
(
conn
=
>
{
setupDbForShutdown
(
conn
"
PlacesUtils
read
-
only
connection
"
)
;
return
conn
;
}
)
.
catch
(
Cu
.
reportError
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gAsyncDBWrapperPromised
"
(
)
=
>
Sqlite
.
wrapStorageConnection
(
{
connection
:
PlacesUtils
.
history
.
DBConnection
}
)
.
then
(
conn
=
>
{
setupDbForShutdown
(
conn
"
PlacesUtils
wrapped
connection
"
)
;
return
conn
;
}
)
.
catch
(
Cu
.
reportError
)
)
;
var
Keywords
=
{
fetch
(
keywordOrEntry
onResult
=
null
)
{
if
(
typeof
(
keywordOrEntry
)
=
=
"
string
"
)
keywordOrEntry
=
{
keyword
:
keywordOrEntry
}
;
if
(
keywordOrEntry
=
=
=
null
|
|
typeof
(
keywordOrEntry
)
!
=
"
object
"
|
|
(
(
"
keyword
"
in
keywordOrEntry
)
&
&
typeof
(
keywordOrEntry
.
keyword
)
!
=
"
string
"
)
)
throw
new
Error
(
"
Invalid
keyword
"
)
;
let
hasKeyword
=
"
keyword
"
in
keywordOrEntry
;
let
hasUrl
=
"
url
"
in
keywordOrEntry
;
if
(
!
hasKeyword
&
&
!
hasUrl
)
throw
new
Error
(
"
At
least
keyword
or
url
must
be
provided
"
)
;
if
(
onResult
&
&
typeof
onResult
!
=
"
function
"
)
throw
new
Error
(
"
onResult
callback
must
be
a
valid
function
"
)
;
if
(
hasUrl
)
keywordOrEntry
.
url
=
new
URL
(
keywordOrEntry
.
url
)
;
if
(
hasKeyword
)
keywordOrEntry
.
keyword
=
keywordOrEntry
.
keyword
.
trim
(
)
.
toLowerCase
(
)
;
let
safeOnResult
=
entry
=
>
{
if
(
onResult
)
{
try
{
onResult
(
entry
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
;
return
gKeywordsCachePromise
.
then
(
cache
=
>
{
let
entries
=
[
]
;
if
(
hasKeyword
)
{
let
entry
=
cache
.
get
(
keywordOrEntry
.
keyword
)
;
if
(
entry
)
entries
.
push
(
entry
)
;
}
if
(
hasUrl
)
{
for
(
let
entry
of
cache
.
values
(
)
)
{
if
(
entry
.
url
.
href
=
=
keywordOrEntry
.
url
.
href
)
entries
.
push
(
entry
)
;
}
}
entries
=
entries
.
filter
(
e
=
>
{
return
(
!
hasUrl
|
|
e
.
url
.
href
=
=
keywordOrEntry
.
url
.
href
)
&
&
(
!
hasKeyword
|
|
e
.
keyword
=
=
keywordOrEntry
.
keyword
)
;
}
)
;
entries
.
forEach
(
safeOnResult
)
;
return
entries
.
length
?
entries
[
0
]
:
null
;
}
)
;
}
insert
(
keywordEntry
)
{
if
(
!
keywordEntry
|
|
typeof
keywordEntry
!
=
"
object
"
)
throw
new
Error
(
"
Input
should
be
a
valid
object
"
)
;
if
(
!
(
"
keyword
"
in
keywordEntry
)
|
|
!
keywordEntry
.
keyword
|
|
typeof
(
keywordEntry
.
keyword
)
!
=
"
string
"
)
throw
new
Error
(
"
Invalid
keyword
"
)
;
if
(
(
"
postData
"
in
keywordEntry
)
&
&
keywordEntry
.
postData
&
&
typeof
(
keywordEntry
.
postData
)
!
=
"
string
"
)
throw
new
Error
(
"
Invalid
POST
data
"
)
;
if
(
!
(
"
url
"
in
keywordEntry
)
)
throw
new
Error
(
"
undefined
is
not
a
valid
URL
"
)
;
if
(
!
(
"
source
"
in
keywordEntry
)
)
{
keywordEntry
.
source
=
PlacesUtils
.
bookmarks
.
SOURCES
.
DEFAULT
;
}
let
{
keyword
url
source
}
=
keywordEntry
;
keyword
=
keyword
.
trim
(
)
.
toLowerCase
(
)
;
let
postData
=
keywordEntry
.
postData
|
|
null
;
url
=
new
URL
(
url
)
;
return
PlacesUtils
.
withConnectionWrapper
(
"
Keywords
.
insert
"
async
function
(
db
)
{
let
cache
=
await
gKeywordsCachePromise
;
let
oldEntry
=
cache
.
get
(
keyword
)
;
if
(
oldEntry
&
&
oldEntry
.
url
.
href
=
=
url
.
href
&
&
oldEntry
.
postData
=
=
keywordEntry
.
postData
)
{
return
;
}
if
(
oldEntry
)
{
await
db
.
executeCached
(
UPDATE
moz_keywords
SET
place_id
=
(
SELECT
id
FROM
moz_places
WHERE
url_hash
=
hash
(
:
url
)
AND
url
=
:
url
)
post_data
=
:
post_data
WHERE
keyword
=
:
keyword
{
url
:
url
.
href
keyword
post_data
:
postData
}
)
;
await
notifyKeywordChange
(
oldEntry
.
url
.
href
"
"
source
)
;
}
else
{
await
db
.
executeCached
(
INSERT
OR
IGNORE
INTO
moz_places
(
url
url_hash
rev_host
hidden
frecency
guid
)
VALUES
(
:
url
hash
(
:
url
)
:
rev_host
0
:
frecency
IFNULL
(
(
SELECT
guid
FROM
moz_places
WHERE
url_hash
=
hash
(
:
url
)
AND
url
=
:
url
)
GENERATE_GUID
(
)
)
)
{
url
:
url
.
href
rev_host
:
PlacesUtils
.
getReversedHost
(
url
)
frecency
:
url
.
protocol
=
=
"
place
:
"
?
0
:
-
1
}
)
;
await
db
.
executeCached
(
INSERT
INTO
moz_keywords
(
keyword
place_id
post_data
)
VALUES
(
:
keyword
(
SELECT
id
FROM
moz_places
WHERE
url_hash
=
hash
(
:
url
)
AND
url
=
:
url
)
:
post_data
)
{
url
:
url
.
href
keyword
post_data
:
postData
}
)
;
}
await
PlacesSyncUtils
.
bookmarks
.
addSyncChangesForBookmarksWithURL
(
db
url
PlacesSyncUtils
.
bookmarks
.
determineSyncChangeDelta
(
source
)
)
;
cache
.
set
(
keyword
{
keyword
url
postData
}
)
;
await
notifyKeywordChange
(
url
.
href
keyword
source
)
;
}
)
;
}
remove
(
keywordOrEntry
)
{
if
(
typeof
(
keywordOrEntry
)
=
=
"
string
"
)
{
keywordOrEntry
=
{
keyword
:
keywordOrEntry
source
:
Ci
.
nsINavBookmarksService
.
SOURCE_DEFAULT
}
;
}
if
(
keywordOrEntry
=
=
=
null
|
|
typeof
(
keywordOrEntry
)
!
=
"
object
"
|
|
!
keywordOrEntry
.
keyword
|
|
typeof
keywordOrEntry
.
keyword
!
=
"
string
"
)
throw
new
Error
(
"
Invalid
keyword
"
)
;
let
{
keyword
source
=
Ci
.
nsINavBookmarksService
.
SOURCE_DEFAULT
}
=
keywordOrEntry
;
keyword
=
keywordOrEntry
.
keyword
.
trim
(
)
.
toLowerCase
(
)
;
return
PlacesUtils
.
withConnectionWrapper
(
"
Keywords
.
remove
"
async
function
(
db
)
{
let
cache
=
await
gKeywordsCachePromise
;
if
(
!
cache
.
has
(
keyword
)
)
return
;
let
{
url
}
=
cache
.
get
(
keyword
)
;
cache
.
delete
(
keyword
)
;
await
db
.
execute
(
DELETE
FROM
moz_keywords
WHERE
keyword
=
:
keyword
{
keyword
}
)
;
await
PlacesSyncUtils
.
bookmarks
.
addSyncChangesForBookmarksWithURL
(
db
url
PlacesSyncUtils
.
bookmarks
.
determineSyncChangeDelta
(
source
)
)
;
await
notifyKeywordChange
(
url
.
href
"
"
source
)
;
}
)
;
}
}
;
var
gIgnoreKeywordNotifications
=
false
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gKeywordsCachePromise
"
(
)
=
>
PlacesUtils
.
withConnectionWrapper
(
"
PlacesUtils
:
gKeywordsCachePromise
"
async
function
(
db
)
{
let
cache
=
new
Map
(
)
;
let
observer
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
Ci
.
nsINavBookmarkObserver
)
onBeginUpdateBatch
(
)
{
}
onEndUpdateBatch
(
)
{
}
onItemAdded
(
)
{
}
onItemVisited
(
)
{
}
onItemMoved
(
)
{
}
onItemRemoved
(
id
parentId
index
itemType
uri
guid
parentGuid
)
{
if
(
itemType
!
=
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
)
return
;
let
keywords
=
keywordsForHref
(
uri
.
spec
)
;
if
(
keywords
.
length
=
=
0
)
return
;
(
async
function
(
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
:
uri
}
)
;
if
(
!
bookmark
)
{
for
(
let
keyword
of
keywords
)
{
await
PlacesUtils
.
keywords
.
remove
(
keyword
)
;
}
}
}
)
(
)
.
catch
(
Cu
.
reportError
)
;
}
onItemChanged
(
id
prop
isAnno
val
lastMod
itemType
parentId
guid
parentGuid
oldVal
)
{
if
(
gIgnoreKeywordNotifications
)
{
return
;
}
if
(
prop
=
=
"
keyword
"
)
{
this
.
_onKeywordChanged
(
guid
val
oldVal
)
;
}
else
if
(
prop
=
=
"
uri
"
)
{
this
.
_onUrlChanged
(
guid
val
oldVal
)
.
catch
(
Cu
.
reportError
)
;
}
}
_onKeywordChanged
(
guid
keyword
href
)
{
if
(
keyword
.
length
=
=
0
)
{
let
keywords
=
keywordsForHref
(
href
)
for
(
let
kw
of
keywords
)
{
cache
.
delete
(
kw
)
;
}
}
else
{
cache
.
set
(
keyword
{
keyword
url
:
new
URL
(
href
)
}
)
;
}
}
async
_onUrlChanged
(
guid
url
oldUrl
)
{
let
entries
=
[
]
;
await
PlacesUtils
.
keywords
.
fetch
(
{
url
:
oldUrl
}
e
=
>
entries
.
push
(
e
)
)
;
if
(
entries
.
length
=
=
0
)
{
return
;
}
for
(
let
entry
of
entries
)
{
await
PlacesUtils
.
keywords
.
remove
(
entry
.
keyword
)
;
entry
.
url
=
new
URL
(
url
)
;
await
PlacesUtils
.
keywords
.
insert
(
entry
)
;
}
}
}
;
PlacesUtils
.
bookmarks
.
addObserver
(
observer
)
;
PlacesUtils
.
registerShutdownFunction
(
(
)
=
>
{
PlacesUtils
.
bookmarks
.
removeObserver
(
observer
)
;
}
)
;
let
rows
=
await
db
.
execute
(
SELECT
keyword
url
post_data
FROM
moz_keywords
k
JOIN
moz_places
h
ON
h
.
id
=
k
.
place_id
)
;
let
brokenKeywords
=
[
]
;
for
(
let
row
of
rows
)
{
let
keyword
=
row
.
getResultByName
(
"
keyword
"
)
;
try
{
let
entry
=
{
keyword
url
:
new
URL
(
row
.
getResultByName
(
"
url
"
)
)
postData
:
row
.
getResultByName
(
"
post_data
"
)
}
;
cache
.
set
(
keyword
entry
)
;
}
catch
(
ex
)
{
brokenKeywords
.
push
(
keyword
)
;
}
}
if
(
brokenKeywords
.
length
)
{
await
db
.
execute
(
DELETE
FROM
moz_keywords
WHERE
keyword
IN
(
{
brokenKeywords
.
map
(
JSON
.
stringify
)
.
join
(
"
"
)
}
)
)
;
}
function
keywordsForHref
(
href
)
{
let
keywords
=
[
]
;
for
(
let
[
key
val
]
of
cache
)
{
if
(
val
.
url
.
href
=
=
href
)
keywords
.
push
(
key
)
;
}
return
keywords
;
}
return
cache
;
}
)
)
;
var
GuidHelper
=
{
guidsForIds
:
new
Map
(
)
idsForGuids
:
new
Map
(
)
async
getItemId
(
aGuid
)
{
let
cached
=
this
.
idsForGuids
.
get
(
aGuid
)
;
if
(
cached
!
=
=
undefined
)
return
cached
;
let
itemId
=
await
PlacesUtils
.
withConnectionWrapper
(
"
GuidHelper
.
getItemId
"
async
function
(
db
)
{
let
rows
=
await
db
.
executeCached
(
"
SELECT
b
.
id
b
.
guid
from
moz_bookmarks
b
WHERE
b
.
guid
=
:
guid
LIMIT
1
"
{
guid
:
aGuid
}
)
;
if
(
rows
.
length
=
=
0
)
throw
new
Error
(
"
no
item
found
for
the
given
GUID
"
)
;
return
rows
[
0
]
.
getResultByName
(
"
id
"
)
;
}
)
;
this
.
updateCache
(
itemId
aGuid
)
;
return
itemId
;
}
async
getManyItemIds
(
aGuids
)
{
let
uncachedGuids
=
aGuids
.
filter
(
guid
=
>
!
this
.
idsForGuids
.
has
(
guid
)
)
;
if
(
uncachedGuids
.
length
)
{
await
PlacesUtils
.
withConnectionWrapper
(
"
GuidHelper
.
getItemId
"
async
db
=
>
{
while
(
uncachedGuids
.
length
)
{
let
chunk
=
uncachedGuids
.
splice
(
0
100
)
;
let
rows
=
await
db
.
executeCached
(
SELECT
b
.
id
b
.
guid
from
moz_bookmarks
b
WHERE
b
.
guid
IN
(
{
"
?
"
.
repeat
(
chunk
.
length
-
1
)
+
"
?
"
}
)
LIMIT
{
chunk
.
length
}
chunk
)
;
if
(
rows
.
length
<
chunk
.
length
)
throw
new
Error
(
"
Not
all
items
were
found
!
"
)
;
for
(
let
row
of
rows
)
{
this
.
updateCache
(
row
.
getResultByIndex
(
0
)
row
.
getResultByIndex
(
1
)
)
;
}
}
}
)
;
}
return
new
Map
(
aGuids
.
map
(
guid
=
>
[
guid
this
.
idsForGuids
.
get
(
guid
)
]
)
)
;
}
async
getItemGuid
(
aItemId
)
{
let
cached
=
this
.
guidsForIds
.
get
(
aItemId
)
;
if
(
cached
!
=
=
undefined
)
return
cached
;
let
guid
=
await
PlacesUtils
.
withConnectionWrapper
(
"
GuidHelper
.
getItemGuid
"
async
function
(
db
)
{
let
rows
=
await
db
.
executeCached
(
"
SELECT
b
.
id
b
.
guid
from
moz_bookmarks
b
WHERE
b
.
id
=
:
id
LIMIT
1
"
{
id
:
aItemId
}
)
;
if
(
rows
.
length
=
=
0
)
throw
new
Error
(
"
no
item
found
for
the
given
itemId
"
)
;
return
rows
[
0
]
.
getResultByName
(
"
guid
"
)
;
}
)
;
this
.
updateCache
(
aItemId
guid
)
;
return
guid
;
}
updateCache
(
aItemId
aGuid
)
{
if
(
typeof
(
aItemId
)
!
=
"
number
"
|
|
aItemId
<
=
0
)
throw
new
Error
(
"
Trying
to
update
the
GUIDs
cache
with
an
invalid
itemId
"
)
;
if
(
typeof
(
aGuid
)
!
=
"
string
"
|
|
!
/
^
[
a
-
zA
-
Z0
-
9
\
-
_
]
{
12
}
/
.
test
(
aGuid
)
)
throw
new
Error
(
"
Trying
to
update
the
GUIDs
cache
with
an
invalid
GUID
"
)
;
this
.
ensureObservingRemovedItems
(
)
;
this
.
guidsForIds
.
set
(
aItemId
aGuid
)
;
this
.
idsForGuids
.
set
(
aGuid
aItemId
)
;
}
invalidateCacheForItemId
(
aItemId
)
{
let
guid
=
this
.
guidsForIds
.
get
(
aItemId
)
;
this
.
guidsForIds
.
delete
(
aItemId
)
;
this
.
idsForGuids
.
delete
(
guid
)
;
}
ensureObservingRemovedItems
(
)
{
if
(
!
(
"
observer
"
in
this
)
)
{
this
.
observer
=
{
onItemAdded
:
(
aItemId
aParentId
aIndex
aItemType
aURI
aTitle
aDateAdded
aGuid
aParentGuid
)
=
>
{
this
.
updateCache
(
aItemId
aGuid
)
;
this
.
updateCache
(
aParentId
aParentGuid
)
;
}
onItemRemoved
:
(
aItemId
aParentId
aIndex
aItemTyep
aURI
aGuid
aParentGuid
)
=
>
{
this
.
guidsForIds
.
delete
(
aItemId
)
;
this
.
idsForGuids
.
delete
(
aGuid
)
;
this
.
updateCache
(
aParentId
aParentGuid
)
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
Ci
.
nsINavBookmarkObserver
)
onBeginUpdateBatch
(
)
{
}
onEndUpdateBatch
(
)
{
}
onItemChanged
(
)
{
}
onItemVisited
(
)
{
}
onItemMoved
(
)
{
}
}
;
PlacesUtils
.
bookmarks
.
addObserver
(
this
.
observer
)
;
PlacesUtils
.
registerShutdownFunction
(
(
)
=
>
{
PlacesUtils
.
bookmarks
.
removeObserver
(
this
.
observer
)
;
}
)
;
}
}
}
;
function
updateCommandsOnActiveWindow
(
)
{
let
win
=
Services
.
focus
.
activeWindow
;
if
(
win
&
&
win
instanceof
Ci
.
nsIDOMWindow
)
{
win
.
updateCommands
(
"
undo
"
)
;
}
}
function
TransactionItemCache
(
)
{
}
TransactionItemCache
.
prototype
=
{
set
id
(
v
)
{
this
.
_id
=
(
parseInt
(
v
)
>
0
?
v
:
null
)
;
}
get
id
(
)
{
return
this
.
_id
|
|
-
1
;
}
set
parentId
(
v
)
{
this
.
_parentId
=
(
parseInt
(
v
)
>
0
?
v
:
null
)
;
}
get
parentId
(
)
{
return
this
.
_parentId
|
|
-
1
;
}
keyword
:
null
title
:
null
dateAdded
:
null
lastModified
:
null
postData
:
null
itemType
:
null
set
uri
(
v
)
{
this
.
_uri
=
(
v
instanceof
Ci
.
nsIURI
?
v
.
clone
(
)
:
null
)
;
}
get
uri
(
)
{
return
this
.
_uri
|
|
null
;
}
set
feedURI
(
v
)
{
this
.
_feedURI
=
(
v
instanceof
Ci
.
nsIURI
?
v
.
clone
(
)
:
null
)
;
}
get
feedURI
(
)
{
return
this
.
_feedURI
|
|
null
;
}
set
siteURI
(
v
)
{
this
.
_siteURI
=
(
v
instanceof
Ci
.
nsIURI
?
v
.
clone
(
)
:
null
)
;
}
get
siteURI
(
)
{
return
this
.
_siteURI
|
|
null
;
}
set
index
(
v
)
{
this
.
_index
=
(
parseInt
(
v
)
>
=
0
?
v
:
null
)
;
}
get
index
(
)
{
return
this
.
_index
!
=
null
?
this
.
_index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
;
}
set
annotations
(
v
)
{
this
.
_annotations
=
Array
.
isArray
(
v
)
?
Cu
.
cloneInto
(
v
{
}
)
:
null
;
}
get
annotations
(
)
{
return
this
.
_annotations
|
|
null
;
}
set
tags
(
v
)
{
this
.
_tags
=
(
v
&
&
Array
.
isArray
(
v
)
?
Array
.
prototype
.
slice
.
call
(
v
)
:
null
)
;
}
get
tags
(
)
{
return
this
.
_tags
|
|
null
;
}
}
;
function
BaseTransaction
(
)
{
}
BaseTransaction
.
prototype
=
{
name
:
null
set
childTransactions
(
v
)
{
this
.
_childTransactions
=
(
Array
.
isArray
(
v
)
?
Array
.
prototype
.
slice
.
call
(
v
)
:
null
)
;
}
get
childTransactions
(
)
{
return
this
.
_childTransactions
|
|
null
;
}
doTransaction
:
function
BTXN_doTransaction
(
)
{
}
redoTransaction
:
function
BTXN_redoTransaction
(
)
{
return
this
.
doTransaction
(
)
;
}
undoTransaction
:
function
BTXN_undoTransaction
(
)
{
}
merge
:
function
BTXN_merge
(
)
{
return
false
;
}
get
isTransient
(
)
{
return
false
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsITransaction
]
)
}
;
this
.
PlacesAggregatedTransaction
=
function
PlacesAggregatedTransaction
(
aName
aTransactions
)
{
this
.
childTransactions
=
aTransactions
;
this
.
name
=
aName
;
this
.
item
=
new
TransactionItemCache
(
)
;
let
countTransactions
=
function
(
aTransactions
aTxnCount
)
{
for
(
let
i
=
0
;
i
<
aTransactions
.
length
&
&
aTxnCount
<
MIN_TRANSACTIONS_FOR_BATCH
;
+
+
i
+
+
aTxnCount
)
{
let
txn
=
aTransactions
[
i
]
;
if
(
txn
.
childTransactions
&
&
txn
.
childTransactions
.
length
>
0
)
aTxnCount
=
countTransactions
(
txn
.
childTransactions
aTxnCount
)
;
}
return
aTxnCount
;
}
let
txnCount
=
countTransactions
(
this
.
childTransactions
0
)
;
this
.
_useBatch
=
txnCount
>
=
MIN_TRANSACTIONS_FOR_BATCH
;
}
PlacesAggregatedTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
ATXN_doTransaction
(
)
{
this
.
_isUndo
=
false
;
if
(
this
.
_useBatch
)
PlacesUtils
.
bookmarks
.
runInBatchMode
(
this
null
)
;
else
this
.
runBatched
(
false
)
;
}
undoTransaction
:
function
ATXN_undoTransaction
(
)
{
this
.
_isUndo
=
true
;
if
(
this
.
_useBatch
)
PlacesUtils
.
bookmarks
.
runInBatchMode
(
this
null
)
;
else
this
.
runBatched
(
true
)
;
}
runBatched
:
function
ATXN_runBatched
(
)
{
let
transactions
=
this
.
childTransactions
.
slice
(
0
)
;
if
(
this
.
_isUndo
)
transactions
.
reverse
(
)
;
for
(
let
i
=
0
;
i
<
transactions
.
length
;
+
+
i
)
{
let
txn
=
transactions
[
i
]
;
if
(
this
.
item
.
parentId
!
=
-
1
)
txn
.
item
.
parentId
=
this
.
item
.
parentId
;
if
(
this
.
_isUndo
)
txn
.
undoTransaction
(
)
;
else
txn
.
doTransaction
(
)
;
}
}
}
;
this
.
PlacesCreateFolderTransaction
=
function
PlacesCreateFolderTransaction
(
aTitle
aParentId
aIndex
aAnnotations
aChildTransactions
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
title
=
aTitle
;
this
.
item
.
parentId
=
aParentId
;
this
.
item
.
index
=
aIndex
;
this
.
item
.
annotations
=
aAnnotations
;
this
.
childTransactions
=
aChildTransactions
;
}
PlacesCreateFolderTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
CFTXN_doTransaction
(
)
{
this
.
item
.
id
=
PlacesUtils
.
bookmarks
.
createFolder
(
this
.
item
.
parentId
this
.
item
.
title
this
.
item
.
index
)
;
if
(
this
.
item
.
annotations
&
&
this
.
item
.
annotations
.
length
>
0
)
PlacesUtils
.
setAnnotationsForItem
(
this
.
item
.
id
this
.
item
.
annotations
)
;
if
(
this
.
childTransactions
&
&
this
.
childTransactions
.
length
>
0
)
{
for
(
let
i
=
0
;
i
<
this
.
childTransactions
.
length
;
+
+
i
)
{
this
.
childTransactions
[
i
]
.
item
.
parentId
=
this
.
item
.
id
;
}
let
txn
=
new
PlacesAggregatedTransaction
(
"
Create
folder
childTxn
"
this
.
childTransactions
)
;
txn
.
doTransaction
(
)
;
}
}
undoTransaction
:
function
CFTXN_undoTransaction
(
)
{
if
(
this
.
childTransactions
&
&
this
.
childTransactions
.
length
>
0
)
{
let
txn
=
new
PlacesAggregatedTransaction
(
"
Create
folder
childTxn
"
this
.
childTransactions
)
;
txn
.
undoTransaction
(
)
;
}
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
item
.
id
)
;
}
}
;
this
.
PlacesCreateBookmarkTransaction
=
function
PlacesCreateBookmarkTransaction
(
aURI
aParentId
aIndex
aTitle
aKeyword
aAnnotations
aChildTransactions
aPostData
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
uri
=
aURI
;
this
.
item
.
parentId
=
aParentId
;
this
.
item
.
index
=
aIndex
;
this
.
item
.
title
=
aTitle
;
this
.
item
.
keyword
=
aKeyword
;
this
.
item
.
postData
=
aPostData
;
this
.
item
.
annotations
=
aAnnotations
;
this
.
childTransactions
=
aChildTransactions
;
}
PlacesCreateBookmarkTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
CITXN_doTransaction
(
)
{
this
.
item
.
id
=
PlacesUtils
.
bookmarks
.
insertBookmark
(
this
.
item
.
parentId
this
.
item
.
uri
this
.
item
.
index
this
.
item
.
title
)
;
if
(
this
.
item
.
keyword
)
{
PlacesUtils
.
bookmarks
.
setKeywordForBookmark
(
this
.
item
.
id
this
.
item
.
keyword
)
;
if
(
this
.
item
.
postData
)
{
PlacesUtils
.
setPostDataForBookmark
(
this
.
item
.
id
this
.
item
.
postData
)
;
}
}
if
(
this
.
item
.
annotations
&
&
this
.
item
.
annotations
.
length
>
0
)
PlacesUtils
.
setAnnotationsForItem
(
this
.
item
.
id
this
.
item
.
annotations
)
;
if
(
this
.
childTransactions
&
&
this
.
childTransactions
.
length
>
0
)
{
for
(
let
i
=
0
;
i
<
this
.
childTransactions
.
length
;
+
+
i
)
{
this
.
childTransactions
[
i
]
.
item
.
id
=
this
.
item
.
id
;
}
let
txn
=
new
PlacesAggregatedTransaction
(
"
Create
item
childTxn
"
this
.
childTransactions
)
;
txn
.
doTransaction
(
)
;
}
}
undoTransaction
:
function
CITXN_undoTransaction
(
)
{
if
(
this
.
childTransactions
&
&
this
.
childTransactions
.
length
>
0
)
{
let
txn
=
new
PlacesAggregatedTransaction
(
"
Create
item
childTxn
"
this
.
childTransactions
)
;
txn
.
undoTransaction
(
)
;
}
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
item
.
id
)
;
}
}
;
this
.
PlacesCreateSeparatorTransaction
=
function
PlacesCreateSeparatorTransaction
(
aParentId
aIndex
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
parentId
=
aParentId
;
this
.
item
.
index
=
aIndex
;
}
PlacesCreateSeparatorTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
CSTXN_doTransaction
(
)
{
this
.
item
.
id
=
PlacesUtils
.
bookmarks
.
insertSeparator
(
this
.
item
.
parentId
this
.
item
.
index
)
;
}
undoTransaction
:
function
CSTXN_undoTransaction
(
)
{
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
item
.
id
)
;
}
}
;
this
.
PlacesCreateLivemarkTransaction
=
function
PlacesCreateLivemarkTransaction
(
aFeedURI
aSiteURI
aTitle
aParentId
aIndex
aAnnotations
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
feedURI
=
aFeedURI
;
this
.
item
.
siteURI
=
aSiteURI
;
this
.
item
.
title
=
aTitle
;
this
.
item
.
parentId
=
aParentId
;
this
.
item
.
index
=
aIndex
;
this
.
item
.
annotations
=
aAnnotations
;
}
PlacesCreateLivemarkTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
CLTXN_doTransaction
(
)
{
this
.
_promise
=
PlacesUtils
.
livemarks
.
addLivemark
(
{
title
:
this
.
item
.
title
feedURI
:
this
.
item
.
feedURI
parentId
:
this
.
item
.
parentId
index
:
this
.
item
.
index
siteURI
:
this
.
item
.
siteURI
}
)
.
then
(
aLivemark
=
>
{
this
.
item
.
id
=
aLivemark
.
id
;
if
(
this
.
item
.
annotations
&
&
this
.
item
.
annotations
.
length
>
0
)
{
PlacesUtils
.
setAnnotationsForItem
(
this
.
item
.
id
this
.
item
.
annotations
)
;
}
}
Cu
.
reportError
)
;
}
undoTransaction
:
function
CLTXN_undoTransaction
(
)
{
this
.
_promise
=
PlacesUtils
.
livemarks
.
getLivemark
(
{
id
:
this
.
item
.
id
}
)
.
catch
(
(
)
=
>
{
}
)
.
then
(
(
)
=
>
{
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
item
.
id
)
;
}
)
;
}
}
;
function
PlacesRemoveLivemarkTransaction
(
aLivemarkId
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aLivemarkId
;
this
.
item
.
title
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
this
.
item
.
id
)
;
this
.
item
.
parentId
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
this
.
item
.
id
)
;
let
annos
=
PlacesUtils
.
getAnnotationsForItem
(
this
.
item
.
id
)
;
let
annosToExclude
=
[
PlacesUtils
.
LMANNO_FEEDURI
PlacesUtils
.
LMANNO_SITEURI
]
;
this
.
item
.
annotations
=
annos
.
filter
(
function
(
aValue
aIndex
aArray
)
{
return
!
annosToExclude
.
includes
(
aValue
.
name
)
;
}
)
;
this
.
item
.
dateAdded
=
PlacesUtils
.
bookmarks
.
getItemDateAdded
(
this
.
item
.
id
)
;
this
.
item
.
lastModified
=
PlacesUtils
.
bookmarks
.
getItemLastModified
(
this
.
item
.
id
)
;
}
PlacesRemoveLivemarkTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
RLTXN_doTransaction
(
)
{
PlacesUtils
.
livemarks
.
getLivemark
(
{
id
:
this
.
item
.
id
}
)
.
then
(
aLivemark
=
>
{
this
.
item
.
feedURI
=
aLivemark
.
feedURI
;
this
.
item
.
siteURI
=
aLivemark
.
siteURI
;
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
item
.
id
)
;
}
Cu
.
reportError
)
;
}
undoTransaction
:
function
RLTXN_undoTransaction
(
)
{
PlacesUtils
.
livemarks
.
getLivemark
(
{
id
:
this
.
item
.
id
}
)
.
catch
(
(
)
=
>
{
PlacesUtils
.
livemarks
.
addLivemark
(
{
parentId
:
this
.
item
.
parentId
title
:
this
.
item
.
title
siteURI
:
this
.
item
.
siteURI
feedURI
:
this
.
item
.
feedURI
index
:
this
.
item
.
index
lastModified
:
this
.
item
.
lastModified
}
)
.
then
(
aLivemark
=
>
{
let
itemId
=
aLivemark
.
id
;
PlacesUtils
.
bookmarks
.
setItemDateAdded
(
itemId
this
.
item
.
dateAdded
)
;
PlacesUtils
.
setAnnotationsForItem
(
itemId
this
.
item
.
annotations
)
;
}
Cu
.
reportError
)
;
}
)
;
}
}
;
this
.
PlacesMoveItemTransaction
=
function
PlacesMoveItemTransaction
(
aItemId
aNewParentId
aNewIndex
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
item
.
parentId
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
this
.
item
.
id
)
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
parentId
=
aNewParentId
;
this
.
new
.
index
=
aNewIndex
;
}
PlacesMoveItemTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
MITXN_doTransaction
(
)
{
this
.
item
.
index
=
PlacesUtils
.
bookmarks
.
getItemIndex
(
this
.
item
.
id
)
;
PlacesUtils
.
bookmarks
.
moveItem
(
this
.
item
.
id
this
.
new
.
parentId
this
.
new
.
index
)
;
this
.
_undoIndex
=
PlacesUtils
.
bookmarks
.
getItemIndex
(
this
.
item
.
id
)
;
}
undoTransaction
:
function
MITXN_undoTransaction
(
)
{
if
(
this
.
new
.
parentId
=
=
this
.
item
.
parentId
&
&
this
.
item
.
index
>
this
.
_undoIndex
)
{
PlacesUtils
.
bookmarks
.
moveItem
(
this
.
item
.
id
this
.
item
.
parentId
this
.
item
.
index
+
1
)
;
}
else
{
PlacesUtils
.
bookmarks
.
moveItem
(
this
.
item
.
id
this
.
item
.
parentId
this
.
item
.
index
)
;
}
}
}
;
this
.
PlacesRemoveItemTransaction
=
function
PlacesRemoveItemTransaction
(
aItemId
)
{
if
(
PlacesUtils
.
isRootItem
(
aItemId
)
)
throw
Cr
.
NS_ERROR_INVALID_ARG
;
let
parent
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
aItemId
)
;
let
grandparent
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
parent
)
;
if
(
grandparent
=
=
PlacesUtils
.
tagsFolderId
)
{
let
uri
=
PlacesUtils
.
bookmarks
.
getBookmarkURI
(
aItemId
)
;
return
new
PlacesUntagURITransaction
(
uri
[
parent
]
)
;
}
if
(
PlacesUtils
.
annotations
.
itemHasAnnotation
(
aItemId
PlacesUtils
.
LMANNO_FEEDURI
)
)
return
new
PlacesRemoveLivemarkTransaction
(
aItemId
)
;
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
item
.
itemType
=
PlacesUtils
.
bookmarks
.
getItemType
(
this
.
item
.
id
)
;
if
(
this
.
item
.
itemType
=
=
Ci
.
nsINavBookmarksService
.
TYPE_FOLDER
)
{
this
.
childTransactions
=
this
.
_getFolderContentsTransactions
(
)
;
let
txn
=
PlacesUtils
.
bookmarks
.
getRemoveFolderTransaction
(
this
.
item
.
id
)
;
this
.
childTransactions
.
push
(
txn
)
;
}
else
if
(
this
.
item
.
itemType
=
=
Ci
.
nsINavBookmarksService
.
TYPE_BOOKMARK
)
{
this
.
item
.
uri
=
PlacesUtils
.
bookmarks
.
getBookmarkURI
(
this
.
item
.
id
)
;
this
.
item
.
keyword
=
PlacesUtils
.
bookmarks
.
getKeywordForBookmark
(
this
.
item
.
id
)
;
if
(
this
.
item
.
keyword
)
this
.
item
.
postData
=
PlacesUtils
.
getPostDataForBookmark
(
this
.
item
.
id
)
;
}
if
(
this
.
item
.
itemType
!
=
Ci
.
nsINavBookmarksService
.
TYPE_SEPARATOR
)
this
.
item
.
title
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
this
.
item
.
id
)
;
this
.
item
.
parentId
=
PlacesUtils
.
bookmarks
.
getFolderIdForItem
(
this
.
item
.
id
)
;
this
.
item
.
annotations
=
PlacesUtils
.
getAnnotationsForItem
(
this
.
item
.
id
)
;
this
.
item
.
dateAdded
=
PlacesUtils
.
bookmarks
.
getItemDateAdded
(
this
.
item
.
id
)
;
this
.
item
.
lastModified
=
PlacesUtils
.
bookmarks
.
getItemLastModified
(
this
.
item
.
id
)
;
}
PlacesRemoveItemTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
RITXN_doTransaction
(
)
{
this
.
item
.
index
=
PlacesUtils
.
bookmarks
.
getItemIndex
(
this
.
item
.
id
)
;
if
(
this
.
item
.
itemType
=
=
Ci
.
nsINavBookmarksService
.
TYPE_FOLDER
)
{
let
txn
=
new
PlacesAggregatedTransaction
(
"
Remove
item
childTxn
"
this
.
childTransactions
)
;
txn
.
doTransaction
(
)
;
}
else
{
let
tags
=
this
.
item
.
uri
?
PlacesUtils
.
tagging
.
getTagsForURI
(
this
.
item
.
uri
)
:
null
;
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
item
.
id
)
;
if
(
tags
&
&
PlacesUtils
.
getMostRecentBookmarkForURI
(
this
.
item
.
uri
)
=
=
-
1
)
{
this
.
item
.
tags
=
tags
;
}
}
}
undoTransaction
:
function
RITXN_undoTransaction
(
)
{
if
(
this
.
item
.
itemType
=
=
Ci
.
nsINavBookmarksService
.
TYPE_BOOKMARK
)
{
this
.
item
.
id
=
PlacesUtils
.
bookmarks
.
insertBookmark
(
this
.
item
.
parentId
this
.
item
.
uri
this
.
item
.
index
this
.
item
.
title
)
;
if
(
this
.
item
.
tags
&
&
this
.
item
.
tags
.
length
>
0
)
PlacesUtils
.
tagging
.
tagURI
(
this
.
item
.
uri
this
.
item
.
tags
)
;
if
(
this
.
item
.
keyword
)
{
PlacesUtils
.
bookmarks
.
setKeywordForBookmark
(
this
.
item
.
id
this
.
item
.
keyword
)
;
if
(
this
.
item
.
postData
)
{
PlacesUtils
.
bookmarks
.
setPostDataForBookmark
(
this
.
item
.
id
)
;
}
}
}
else
if
(
this
.
item
.
itemType
=
=
Ci
.
nsINavBookmarksService
.
TYPE_FOLDER
)
{
let
txn
=
new
PlacesAggregatedTransaction
(
"
Remove
item
childTxn
"
this
.
childTransactions
)
;
txn
.
undoTransaction
(
)
;
}
else
{
this
.
item
.
id
=
PlacesUtils
.
bookmarks
.
insertSeparator
(
this
.
item
.
parentId
this
.
item
.
index
)
;
}
if
(
this
.
item
.
annotations
&
&
this
.
item
.
annotations
.
length
>
0
)
PlacesUtils
.
setAnnotationsForItem
(
this
.
item
.
id
this
.
item
.
annotations
)
;
PlacesUtils
.
bookmarks
.
setItemDateAdded
(
this
.
item
.
id
this
.
item
.
dateAdded
)
;
PlacesUtils
.
bookmarks
.
setItemLastModified
(
this
.
item
.
id
this
.
item
.
lastModified
)
;
}
_getFolderContentsTransactions
:
function
RITXN__getFolderContentsTransactions
(
)
{
let
transactions
=
[
]
;
let
contents
=
PlacesUtils
.
getFolderContents
(
this
.
item
.
id
false
false
)
.
root
;
for
(
let
i
=
0
;
i
<
contents
.
childCount
;
+
+
i
)
{
let
txn
=
new
PlacesRemoveItemTransaction
(
contents
.
getChild
(
i
)
.
itemId
)
;
transactions
.
push
(
txn
)
;
}
contents
.
containerOpen
=
false
;
return
transactions
.
reverse
(
)
;
}
}
;
this
.
PlacesEditItemTitleTransaction
=
function
PlacesEditItemTitleTransaction
(
aItemId
aNewTitle
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
title
=
aNewTitle
;
}
PlacesEditItemTitleTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
EITTXN_doTransaction
(
)
{
this
.
item
.
title
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
this
.
item
.
id
)
;
PlacesUtils
.
bookmarks
.
setItemTitle
(
this
.
item
.
id
this
.
new
.
title
)
;
}
undoTransaction
:
function
EITTXN_undoTransaction
(
)
{
PlacesUtils
.
bookmarks
.
setItemTitle
(
this
.
item
.
id
this
.
item
.
title
)
;
}
}
;
this
.
PlacesEditBookmarkURITransaction
=
function
PlacesEditBookmarkURITransaction
(
aItemId
aNewURI
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
uri
=
aNewURI
;
}
PlacesEditBookmarkURITransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
EBUTXN_doTransaction
(
)
{
this
.
item
.
uri
=
PlacesUtils
.
bookmarks
.
getBookmarkURI
(
this
.
item
.
id
)
;
PlacesUtils
.
bookmarks
.
changeBookmarkURI
(
this
.
item
.
id
this
.
new
.
uri
)
;
this
.
item
.
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
this
.
item
.
uri
)
;
if
(
this
.
item
.
tags
.
length
>
0
)
{
if
(
PlacesUtils
.
getBookmarksForURI
(
this
.
item
.
uri
{
}
)
.
length
=
=
0
)
PlacesUtils
.
tagging
.
untagURI
(
this
.
item
.
uri
this
.
item
.
tags
)
;
PlacesUtils
.
tagging
.
tagURI
(
this
.
new
.
uri
this
.
item
.
tags
)
;
}
}
undoTransaction
:
function
EBUTXN_undoTransaction
(
)
{
PlacesUtils
.
bookmarks
.
changeBookmarkURI
(
this
.
item
.
id
this
.
item
.
uri
)
;
if
(
this
.
item
.
tags
.
length
>
0
)
{
if
(
PlacesUtils
.
getBookmarksForURI
(
this
.
new
.
uri
{
}
)
.
length
=
=
0
)
PlacesUtils
.
tagging
.
untagURI
(
this
.
new
.
uri
this
.
item
.
tags
)
;
PlacesUtils
.
tagging
.
tagURI
(
this
.
item
.
uri
this
.
item
.
tags
)
;
}
}
}
;
this
.
PlacesSetItemAnnotationTransaction
=
function
PlacesSetItemAnnotationTransaction
(
aItemId
aAnnotationObject
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
annotations
=
[
aAnnotationObject
]
;
}
PlacesSetItemAnnotationTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
SIATXN_doTransaction
(
)
{
let
annoName
=
this
.
new
.
annotations
[
0
]
.
name
;
if
(
PlacesUtils
.
annotations
.
itemHasAnnotation
(
this
.
item
.
id
annoName
)
)
{
let
flags
=
{
}
expires
=
{
}
type
=
{
}
;
PlacesUtils
.
annotations
.
getItemAnnotationInfo
(
this
.
item
.
id
annoName
flags
expires
type
)
;
let
value
=
PlacesUtils
.
annotations
.
getItemAnnotation
(
this
.
item
.
id
annoName
)
;
this
.
item
.
annotations
=
[
{
name
:
annoName
type
:
type
.
value
flags
:
flags
.
value
value
expires
:
expires
.
value
}
]
;
}
else
{
this
.
item
.
annotations
=
[
{
name
:
annoName
flags
:
0
value
:
null
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
}
]
;
}
PlacesUtils
.
setAnnotationsForItem
(
this
.
item
.
id
this
.
new
.
annotations
)
;
}
undoTransaction
:
function
SIATXN_undoTransaction
(
)
{
PlacesUtils
.
setAnnotationsForItem
(
this
.
item
.
id
this
.
item
.
annotations
)
;
}
}
;
this
.
PlacesSetPageAnnotationTransaction
=
function
PlacesSetPageAnnotationTransaction
(
aURI
aAnnotationObject
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
uri
=
aURI
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
annotations
=
[
aAnnotationObject
]
;
}
PlacesSetPageAnnotationTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
SPATXN_doTransaction
(
)
{
let
annoName
=
this
.
new
.
annotations
[
0
]
.
name
;
if
(
PlacesUtils
.
annotations
.
pageHasAnnotation
(
this
.
item
.
uri
annoName
)
)
{
let
flags
=
{
}
expires
=
{
}
type
=
{
}
;
PlacesUtils
.
annotations
.
getPageAnnotationInfo
(
this
.
item
.
uri
annoName
flags
expires
type
)
;
let
value
=
PlacesUtils
.
annotations
.
getPageAnnotation
(
this
.
item
.
uri
annoName
)
;
this
.
item
.
annotations
=
[
{
name
:
annoName
flags
:
flags
.
value
value
expires
:
expires
.
value
}
]
;
}
else
{
this
.
item
.
annotations
=
[
{
name
:
annoName
type
:
Ci
.
nsIAnnotationService
.
TYPE_STRING
flags
:
0
value
:
null
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
}
]
;
}
PlacesUtils
.
setAnnotationsForURI
(
this
.
item
.
uri
this
.
new
.
annotations
)
;
}
undoTransaction
:
function
SPATXN_undoTransaction
(
)
{
PlacesUtils
.
setAnnotationsForURI
(
this
.
item
.
uri
this
.
item
.
annotations
)
;
}
}
;
this
.
PlacesEditBookmarkKeywordTransaction
=
function
PlacesEditBookmarkKeywordTransaction
(
aItemId
aNewKeyword
aNewPostData
aOldKeyword
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
item
.
keyword
=
aOldKeyword
;
this
.
item
.
href
=
(
PlacesUtils
.
bookmarks
.
getBookmarkURI
(
aItemId
)
)
.
spec
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
keyword
=
aNewKeyword
;
this
.
new
.
postData
=
aNewPostData
}
PlacesEditBookmarkKeywordTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
EBKTXN_doTransaction
(
)
{
let
done
=
false
;
(
async
(
)
=
>
{
if
(
this
.
item
.
keyword
)
{
let
oldEntry
=
await
PlacesUtils
.
keywords
.
fetch
(
this
.
item
.
keyword
)
;
this
.
item
.
postData
=
oldEntry
.
postData
;
await
PlacesUtils
.
keywords
.
remove
(
this
.
item
.
keyword
)
;
}
if
(
this
.
new
.
keyword
)
{
await
PlacesUtils
.
keywords
.
insert
(
{
url
:
this
.
item
.
href
keyword
:
this
.
new
.
keyword
postData
:
this
.
new
.
postData
|
|
this
.
item
.
postData
}
)
;
}
}
)
(
)
.
catch
(
Cu
.
reportError
)
.
then
(
(
)
=
>
done
=
true
)
;
Services
.
tm
.
spinEventLoopUntil
(
(
)
=
>
done
)
;
}
undoTransaction
:
function
EBKTXN_undoTransaction
(
)
{
let
done
=
false
;
(
async
(
)
=
>
{
if
(
this
.
new
.
keyword
)
{
await
PlacesUtils
.
keywords
.
remove
(
this
.
new
.
keyword
)
;
}
if
(
this
.
item
.
keyword
)
{
await
PlacesUtils
.
keywords
.
insert
(
{
url
:
this
.
item
.
href
keyword
:
this
.
item
.
keyword
postData
:
this
.
item
.
postData
}
)
;
}
}
)
(
)
.
catch
(
Cu
.
reportError
)
.
then
(
(
)
=
>
done
=
true
)
;
Services
.
tm
.
spinEventLoopUntil
(
(
)
=
>
{
return
done
;
}
)
;
}
}
;
this
.
PlacesEditBookmarkPostDataTransaction
=
function
PlacesEditBookmarkPostDataTransaction
(
aItemId
aPostData
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
postData
=
aPostData
;
}
PlacesEditBookmarkPostDataTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
(
)
{
if
(
this
.
new
.
postData
)
{
this
.
item
.
postData
=
PlacesUtils
.
getPostDataForBookmark
(
this
.
item
.
id
)
;
PlacesUtils
.
setPostDataForBookmark
(
this
.
item
.
id
this
.
new
.
postData
)
;
}
}
undoTransaction
(
)
{
if
(
this
.
item
.
postData
)
{
PlacesUtils
.
setPostDataForBookmark
(
this
.
item
.
id
this
.
item
.
postData
)
;
}
}
}
;
this
.
PlacesEditItemDateAddedTransaction
=
function
PlacesEditItemDateAddedTransaction
(
aItemId
aNewDateAdded
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
dateAdded
=
aNewDateAdded
;
}
PlacesEditItemDateAddedTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
EIDATXN_doTransaction
(
)
{
if
(
this
.
item
.
id
=
=
-
1
&
&
this
.
item
.
parentId
!
=
-
1
)
this
.
item
.
id
=
this
.
item
.
parentId
;
this
.
item
.
dateAdded
=
PlacesUtils
.
bookmarks
.
getItemDateAdded
(
this
.
item
.
id
)
;
PlacesUtils
.
bookmarks
.
setItemDateAdded
(
this
.
item
.
id
this
.
new
.
dateAdded
)
;
}
undoTransaction
:
function
EIDATXN_undoTransaction
(
)
{
PlacesUtils
.
bookmarks
.
setItemDateAdded
(
this
.
item
.
id
this
.
item
.
dateAdded
)
;
}
}
;
this
.
PlacesEditItemLastModifiedTransaction
=
function
PlacesEditItemLastModifiedTransaction
(
aItemId
aNewLastModified
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aItemId
;
this
.
new
=
new
TransactionItemCache
(
)
;
this
.
new
.
lastModified
=
aNewLastModified
;
}
PlacesEditItemLastModifiedTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
EILMTXN_doTransaction
(
)
{
if
(
this
.
item
.
id
=
=
-
1
&
&
this
.
item
.
parentId
!
=
-
1
)
this
.
item
.
id
=
this
.
item
.
parentId
;
this
.
item
.
lastModified
=
PlacesUtils
.
bookmarks
.
getItemLastModified
(
this
.
item
.
id
)
;
PlacesUtils
.
bookmarks
.
setItemLastModified
(
this
.
item
.
id
this
.
new
.
lastModified
)
;
}
undoTransaction
:
function
EILMTXN_undoTransaction
(
)
{
PlacesUtils
.
bookmarks
.
setItemLastModified
(
this
.
item
.
id
this
.
item
.
lastModified
)
;
}
}
;
this
.
PlacesSortFolderByNameTransaction
=
function
PlacesSortFolderByNameTransaction
(
aFolderId
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
id
=
aFolderId
;
}
PlacesSortFolderByNameTransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
SFBNTXN_doTransaction
(
)
{
this
.
_oldOrder
=
[
]
;
let
contents
=
PlacesUtils
.
getFolderContents
(
this
.
item
.
id
false
false
)
.
root
;
let
count
=
contents
.
childCount
;
let
newOrder
=
[
]
;
let
preSep
=
[
]
;
let
sortingMethod
=
function
(
a
b
)
{
if
(
PlacesUtils
.
nodeIsContainer
(
a
)
&
&
!
PlacesUtils
.
nodeIsContainer
(
b
)
)
return
-
1
;
if
(
!
PlacesUtils
.
nodeIsContainer
(
a
)
&
&
PlacesUtils
.
nodeIsContainer
(
b
)
)
return
1
;
return
a
.
title
.
localeCompare
(
b
.
title
)
;
}
;
for
(
let
i
=
0
;
i
<
count
;
+
+
i
)
{
let
item
=
contents
.
getChild
(
i
)
;
this
.
_oldOrder
[
item
.
itemId
]
=
i
;
if
(
PlacesUtils
.
nodeIsSeparator
(
item
)
)
{
if
(
preSep
.
length
>
0
)
{
preSep
.
sort
(
sortingMethod
)
;
newOrder
=
newOrder
.
concat
(
preSep
)
;
preSep
.
splice
(
0
preSep
.
length
)
;
}
newOrder
.
push
(
item
)
;
}
else
preSep
.
push
(
item
)
;
}
contents
.
containerOpen
=
false
;
if
(
preSep
.
length
>
0
)
{
preSep
.
sort
(
sortingMethod
)
;
newOrder
=
newOrder
.
concat
(
preSep
)
;
}
let
callback
=
{
runBatched
(
)
{
for
(
let
i
=
0
;
i
<
newOrder
.
length
;
+
+
i
)
{
PlacesUtils
.
bookmarks
.
setItemIndex
(
newOrder
[
i
]
.
itemId
i
)
;
}
}
}
;
PlacesUtils
.
bookmarks
.
runInBatchMode
(
callback
null
)
;
}
undoTransaction
:
function
SFBNTXN_undoTransaction
(
)
{
let
callback
=
{
_self
:
this
runBatched
(
)
{
for
(
let
item
in
this
.
_self
.
_oldOrder
)
PlacesUtils
.
bookmarks
.
setItemIndex
(
item
this
.
_self
.
_oldOrder
[
item
]
)
;
}
}
;
PlacesUtils
.
bookmarks
.
runInBatchMode
(
callback
null
)
;
}
}
;
this
.
PlacesTagURITransaction
=
function
PlacesTagURITransaction
(
aURI
aTags
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
uri
=
aURI
;
this
.
item
.
tags
=
aTags
;
}
PlacesTagURITransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
TUTXN_doTransaction
(
)
{
if
(
PlacesUtils
.
getMostRecentBookmarkForURI
(
this
.
item
.
uri
)
=
=
-
1
)
{
this
.
item
.
id
=
PlacesUtils
.
bookmarks
.
insertBookmark
(
PlacesUtils
.
unfiledBookmarksFolderId
this
.
item
.
uri
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
PlacesUtils
.
history
.
getPageTitle
(
this
.
item
.
uri
)
)
;
}
PlacesUtils
.
tagging
.
tagURI
(
this
.
item
.
uri
this
.
item
.
tags
)
;
}
undoTransaction
:
function
TUTXN_undoTransaction
(
)
{
if
(
this
.
item
.
id
!
=
-
1
)
{
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
item
.
id
)
;
this
.
item
.
id
=
-
1
;
}
PlacesUtils
.
tagging
.
untagURI
(
this
.
item
.
uri
this
.
item
.
tags
)
;
}
}
;
this
.
PlacesUntagURITransaction
=
function
PlacesUntagURITransaction
(
aURI
aTags
)
{
this
.
item
=
new
TransactionItemCache
(
)
;
this
.
item
.
uri
=
aURI
;
if
(
aTags
)
{
let
tags
=
[
]
;
for
(
let
i
=
0
;
i
<
aTags
.
length
;
+
+
i
)
{
if
(
typeof
(
aTags
[
i
]
)
=
=
"
number
"
)
tags
.
push
(
PlacesUtils
.
bookmarks
.
getItemTitle
(
aTags
[
i
]
)
)
;
else
tags
.
push
(
aTags
[
i
]
)
;
}
this
.
item
.
tags
=
tags
;
}
}
PlacesUntagURITransaction
.
prototype
=
{
__proto__
:
BaseTransaction
.
prototype
doTransaction
:
function
UTUTXN_doTransaction
(
)
{
let
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
this
.
item
.
uri
)
;
this
.
item
.
tags
=
this
.
item
.
tags
.
filter
(
function
(
aTag
)
{
return
tags
.
includes
(
aTag
)
;
}
)
;
PlacesUtils
.
tagging
.
untagURI
(
this
.
item
.
uri
this
.
item
.
tags
)
;
}
undoTransaction
:
function
UTUTXN_undoTransaction
(
)
{
PlacesUtils
.
tagging
.
tagURI
(
this
.
item
.
uri
this
.
item
.
tags
)
;
}
}
;
function
simpleValidateFunc
(
boolValidateFn
)
{
return
(
v
input
)
=
>
{
if
(
!
boolValidateFn
(
v
input
)
)
throw
new
Error
(
"
Invalid
value
"
)
;
return
v
;
}
;
}
