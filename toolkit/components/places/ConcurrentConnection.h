#
ifndef
mozilla_places_ConcurrentConnection_h_
#
define
mozilla_places_ConcurrentConnection_h_
#
include
"
mozilla
/
storage
/
StatementCache
.
h
"
#
include
"
mozIStorageCompletionCallback
.
h
"
#
include
"
mozIStorageStatementCallback
.
h
"
#
include
"
Helpers
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
nsIAsyncShutdown
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
:
:
places
{
struct
PendingQuery
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PendingQuery
)
;
PendingQuery
(
const
nsCString
&
aSQL
PendingStatementCallback
*
aCallback
)
:
mSQL
(
aSQL
)
mCallback
(
aCallback
)
{
}
nsCString
mSQL
;
RefPtr
<
PendingStatementCallback
>
mCallback
;
private
:
~
PendingQuery
(
)
=
default
;
}
;
class
ConcurrentConnection
final
:
public
nsIObserver
public
nsSupportsWeakReference
public
nsIAsyncShutdownBlocker
public
mozIStorageCompletionCallback
public
mozIStorageStatementCallback
public
SupportsWeakPtr
{
using
StatementCache
=
mozilla
:
:
storage
:
:
StatementCache
<
mozIStorageStatement
>
;
using
AsyncStatementCache
=
mozilla
:
:
storage
:
:
StatementCache
<
mozIStorageAsyncStatement
>
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIASYNCSHUTDOWNBLOCKER
NS_DECL_MOZISTORAGECOMPLETIONCALLBACK
NS_DECL_MOZISTORAGESTATEMENTCALLBACK
ConcurrentConnection
(
)
;
static
Maybe
<
ConcurrentConnection
*
>
GetInstance
(
)
;
void
Queue
(
const
nsCString
&
aSQL
PendingStatementCallback
*
aCallback
)
;
void
Queue
(
Runnable
*
aRunnable
)
;
already_AddRefed
<
mozIStorageStatement
>
GetStatementOnHelperThread
(
const
nsCString
&
aQuery
)
;
private
:
already_AddRefed
<
mozIStorageAsyncStatement
>
GetStatement
(
const
nsCString
&
aQuery
)
;
void
TryToConsumeQueues
(
)
;
void
TryToOpenConnection
(
)
;
void
SetupConnection
(
)
;
void
CloseConnection
(
)
;
void
CloseConnectionComplete
(
nsresult
rv
)
;
void
Shutdown
(
)
;
nsresult
AttachDatabase
(
const
nsString
&
aFileName
const
nsCString
&
aSchemaName
)
;
static
ConcurrentConnection
*
gConcurrentConnection
;
~
ConcurrentConnection
(
)
=
default
;
enum
States
{
NOT_STARTED
=
0
AWAITING_DATABASE_READY
=
1
READY
=
2
SHUTTING_DOWN
=
3
AWAITING_DATABASE_CLOSED
=
4
CLOSED
=
5
}
;
States
mState
=
NOT_STARTED
;
bool
mIsOpening
=
false
;
bool
mPlacesIsInitialized
=
false
;
bool
mRetryOpening
=
true
;
bool
mIsShuttingDown
=
false
;
bool
mIsConnectionReady
=
false
;
int32_t
mSchemaVersion
=
-
1
;
nsCOMPtr
<
mozIStorageConnection
>
mConn
;
nsCOMPtr
<
nsIAsyncShutdownClient
>
mShutdownBarrierClient
;
nsRefPtrDeque
<
PendingQuery
>
mPendingQueries
;
nsRefPtrDeque
<
Runnable
>
mPendingRunnables
;
UniquePtr
<
AsyncStatementCache
>
mAsyncStatements
;
UniquePtr
<
StatementCache
>
mHelperThreadStatements
;
}
;
}
#
endif
