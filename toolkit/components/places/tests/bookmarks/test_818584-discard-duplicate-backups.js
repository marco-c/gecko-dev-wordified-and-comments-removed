add_task
(
async
function
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
let
dateObj
=
new
Date
(
)
;
dateObj
.
setDate
(
dateObj
.
getDate
(
)
-
1
)
;
let
oldBackupName
=
PlacesBackups
.
getFilenameForDate
(
dateObj
)
;
let
oldBackup
=
OS
.
Path
.
join
(
backupFolder
oldBackupName
)
;
let
{
count
:
count
hash
:
hash
}
=
await
BookmarkJSONUtils
.
exportToFile
(
oldBackup
)
;
do_check_true
(
count
>
0
)
;
do_check_eq
(
hash
.
length
24
)
;
oldBackupName
=
oldBackupName
.
replace
(
/
\
.
json
/
"
_
"
+
count
+
"
_
"
+
hash
+
"
.
json
"
)
;
await
OS
.
File
.
move
(
oldBackup
OS
.
Path
.
join
(
backupFolder
oldBackupName
)
)
;
await
PlacesBackups
.
create
(
)
;
let
backupFiles
=
await
PlacesBackups
.
getBackupFiles
(
)
;
do_check_eq
(
backupFiles
.
length
1
)
;
let
matches
=
OS
.
Path
.
basename
(
backupFiles
[
0
]
)
.
match
(
PlacesBackups
.
filenamesRegex
)
;
do_check_eq
(
matches
[
1
]
PlacesBackups
.
toISODateString
(
new
Date
(
)
)
)
;
do_check_eq
(
matches
[
2
]
count
)
;
do_check_eq
(
matches
[
3
]
hash
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
foo
"
url
:
"
http
:
/
/
foo
.
com
"
}
)
;
await
PlacesBackups
.
create
(
undefined
true
)
;
do_check_eq
(
backupFiles
.
length
1
)
;
let
recentBackup
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
do_check_neq
(
recentBackup
OS
.
Path
.
join
(
backupFolder
oldBackupName
)
)
;
matches
=
OS
.
Path
.
basename
(
recentBackup
)
.
match
(
PlacesBackups
.
filenamesRegex
)
;
do_check_eq
(
matches
[
1
]
PlacesBackups
.
toISODateString
(
new
Date
(
)
)
)
;
do_check_eq
(
matches
[
2
]
count
+
1
)
;
do_check_neq
(
matches
[
3
]
hash
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
;
await
PlacesBackups
.
create
(
0
)
;
}
)
;
