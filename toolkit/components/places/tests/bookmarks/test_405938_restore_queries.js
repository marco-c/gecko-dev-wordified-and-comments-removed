var
tests
=
[
]
;
const
DEFAULT_INDEX
=
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
;
var
test
=
{
_testRootId
:
null
_testRootTitle
:
"
test
root
"
_folderGuids
:
[
]
_bookmarkURIs
:
[
]
_count
:
3
_extraBookmarksCount
:
10
populate
:
async
function
populate
(
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
let
testFolderItems
=
[
]
;
let
dateAdded
=
new
Date
(
new
Date
(
)
-
60000
)
;
for
(
let
i
=
0
;
i
<
this
.
_count
;
i
+
+
)
{
this
.
_folderGuids
.
push
(
PlacesUtils
.
history
.
makeGuid
(
)
)
;
testFolderItems
.
push
(
{
guid
:
this
.
_folderGuids
[
i
]
title
:
folder
{
i
}
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
dateAdded
children
:
[
{
dateAdded
url
:
http
:
/
/
{
i
}
title
:
bookmark
{
i
}
}
]
}
)
;
}
let
bookmarksTree
=
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
:
[
{
dateAdded
title
:
this
.
_testRootTitle
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
testFolderItems
}
]
}
;
let
insertedBookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
bookmarksTree
)
;
this
.
_queryURI1
=
place
:
parent
=
{
this
.
_folderGuids
[
0
]
}
&
queryType
=
1
;
this
.
_queryTitle1
=
"
query1
"
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
insertedBookmarks
[
0
]
.
guid
dateAdded
url
:
this
.
_queryURI1
title
:
this
.
_queryTitle1
}
)
;
this
.
_queryURI2
=
place
:
parent
=
{
this
.
_folderGuids
.
join
(
"
&
parent
=
"
)
}
&
queryType
=
1
;
this
.
_queryTitle2
=
"
query2
"
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
insertedBookmarks
[
0
]
.
guid
dateAdded
url
:
this
.
_queryURI2
title
:
this
.
_queryTitle2
}
)
;
this
.
_queryURI3
=
"
place
:
queryType
=
1
&
sort
=
12
&
maxResults
=
10
&
excludeQueries
=
1
"
;
this
.
_queryTitle3
=
"
query3
"
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
insertedBookmarks
[
0
]
.
guid
dateAdded
url
:
this
.
_queryURI3
title
:
this
.
_queryTitle3
}
)
;
}
clean
(
)
{
}
validate
:
async
function
validate
(
addExtras
)
{
if
(
addExtras
)
{
let
date
=
new
Date
(
)
-
this
.
_extraBookmarksCount
*
1000
;
for
(
let
i
=
0
;
i
<
this
.
_extraBookmarksCount
;
i
+
+
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
uri
(
"
http
:
/
/
aaaa
"
+
i
)
dateAdded
:
new
Date
(
date
+
(
this
.
_extraBookmarksCount
-
i
)
*
1000
)
}
)
;
}
}
var
toolbar
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
.
toolbarGuid
false
true
)
.
root
;
Assert
.
equal
(
toolbar
.
childCount
1
)
;
var
folderNode
=
toolbar
.
getChild
(
0
)
;
Assert
.
equal
(
folderNode
.
type
folderNode
.
RESULT_TYPE_FOLDER
)
;
Assert
.
equal
(
folderNode
.
title
this
.
_testRootTitle
)
;
folderNode
.
QueryInterface
(
Ci
.
nsINavHistoryQueryResultNode
)
;
folderNode
.
containerOpen
=
true
;
Assert
.
equal
(
folderNode
.
childCount
this
.
_count
+
3
)
;
for
(
let
i
=
0
;
i
<
this
.
_count
;
i
+
+
)
{
var
subFolder
=
folderNode
.
getChild
(
i
)
;
Assert
.
equal
(
subFolder
.
title
"
folder
"
+
i
)
;
subFolder
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
subFolder
.
containerOpen
=
true
;
Assert
.
equal
(
subFolder
.
childCount
1
)
;
var
child
=
subFolder
.
getChild
(
0
)
;
Assert
.
equal
(
child
.
title
"
bookmark
"
+
i
)
;
Assert
.
ok
(
uri
(
child
.
uri
)
.
equals
(
uri
(
"
http
:
/
/
"
+
i
)
)
)
;
}
this
.
validateQueryNode1
(
folderNode
.
getChild
(
this
.
_count
)
)
;
this
.
validateQueryNode2
(
folderNode
.
getChild
(
this
.
_count
+
1
)
)
;
this
.
validateQueryNode3
(
folderNode
.
getChild
(
this
.
_count
+
2
)
)
;
folderNode
.
containerOpen
=
false
;
toolbar
.
containerOpen
=
false
;
}
validateQueryNode1
:
function
validateQueryNode1
(
aNode
)
{
Assert
.
equal
(
aNode
.
title
this
.
_queryTitle1
)
;
Assert
.
ok
(
PlacesUtils
.
nodeIsFolder
(
aNode
)
)
;
aNode
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
aNode
.
containerOpen
=
true
;
Assert
.
equal
(
aNode
.
childCount
1
)
;
var
child
=
aNode
.
getChild
(
0
)
;
Assert
.
ok
(
uri
(
child
.
uri
)
.
equals
(
uri
(
"
http
:
/
/
0
"
)
)
)
;
Assert
.
equal
(
child
.
title
"
bookmark0
"
)
;
aNode
.
containerOpen
=
false
;
}
validateQueryNode2
:
function
validateQueryNode2
(
aNode
)
{
Assert
.
equal
(
aNode
.
title
this
.
_queryTitle2
)
;
Assert
.
ok
(
PlacesUtils
.
nodeIsQuery
(
aNode
)
)
;
aNode
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
aNode
.
containerOpen
=
true
;
Assert
.
equal
(
aNode
.
childCount
this
.
_count
)
;
for
(
var
i
=
0
;
i
<
aNode
.
childCount
;
i
+
+
)
{
var
child
=
aNode
.
getChild
(
i
)
;
Assert
.
ok
(
uri
(
child
.
uri
)
.
equals
(
uri
(
"
http
:
/
/
"
+
i
)
)
)
;
Assert
.
equal
(
child
.
title
"
bookmark
"
+
i
)
;
}
aNode
.
containerOpen
=
false
;
}
validateQueryNode3
(
aNode
)
{
Assert
.
equal
(
aNode
.
title
this
.
_queryTitle3
)
;
Assert
.
ok
(
PlacesUtils
.
nodeIsQuery
(
aNode
)
)
;
aNode
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
aNode
.
containerOpen
=
true
;
Assert
.
equal
(
aNode
.
childCount
this
.
_extraBookmarksCount
)
;
for
(
var
i
=
0
;
i
<
aNode
.
childCount
;
i
+
+
)
{
var
child
=
aNode
.
getChild
(
i
)
;
Assert
.
equal
(
child
.
uri
http
:
/
/
aaaa
{
i
}
/
)
;
}
aNode
.
containerOpen
=
false
;
}
}
;
tests
.
push
(
test
)
;
add_task
(
async
function
(
)
{
let
jsonFile
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bookmarks
.
json
"
)
;
for
(
let
singleTest
of
tests
)
{
await
singleTest
.
populate
(
)
;
await
singleTest
.
validate
(
true
)
;
}
await
BookmarkJSONUtils
.
exportToFile
(
jsonFile
)
;
for
(
let
singleTest
of
tests
)
{
singleTest
.
clean
(
)
;
}
await
BookmarkJSONUtils
.
importFromFile
(
jsonFile
{
replace
:
true
}
)
;
for
(
let
singleTest
of
tests
)
{
await
singleTest
.
validate
(
false
)
;
}
await
IOUtils
.
remove
(
jsonFile
)
;
}
)
;
