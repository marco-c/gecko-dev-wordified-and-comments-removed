var
Ci
=
Components
.
interfaces
;
var
Cc
=
Components
.
classes
;
var
Cr
=
Components
.
results
;
var
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
{
let
commonFile
=
do_get_file
(
"
.
.
/
head_common
.
js
"
false
)
;
let
uri
=
Services
.
io
.
newFileURI
(
commonFile
)
;
Services
.
scriptloader
.
loadSubScript
(
uri
.
spec
this
)
;
}
function
expectNotifications
(
skipDescendants
)
{
let
notifications
=
[
]
;
let
observer
=
new
Proxy
(
NavBookmarkObserver
{
get
(
target
name
)
{
if
(
name
=
=
"
skipDescendantsOnItemRemoval
"
)
{
return
skipDescendants
;
}
if
(
name
=
=
"
check
"
)
{
PlacesUtils
.
bookmarks
.
removeObserver
(
observer
)
;
return
expectedNotifications
=
>
Assert
.
deepEqual
(
notifications
expectedNotifications
)
;
}
if
(
name
.
startsWith
(
"
onItem
"
)
)
{
return
(
.
.
.
origArgs
)
=
>
{
let
args
=
Array
.
from
(
origArgs
arg
=
>
{
if
(
arg
&
&
arg
instanceof
Ci
.
nsIURI
)
return
new
URL
(
arg
.
spec
)
;
return
arg
;
}
)
;
notifications
.
push
(
{
name
arguments
:
{
guid
:
args
[
5
]
}
}
)
;
}
;
}
if
(
name
in
target
)
return
target
[
name
]
;
return
undefined
;
}
}
)
;
PlacesUtils
.
bookmarks
.
addObserver
(
observer
)
;
return
observer
;
}
