var
tests
=
[
]
;
tests
.
push
(
{
_litterTitle
:
"
"
populate
:
function
populate
(
)
{
var
rootNode
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
placesRootId
false
false
)
.
root
;
Assert
.
equal
(
rootNode
.
childCount
5
)
;
this
.
_folderTitle
=
"
test
folder
"
;
this
.
_folderId
=
PlacesUtils
.
bookmarks
.
createFolder
(
PlacesUtils
.
placesRootId
this
.
_folderTitle
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
Assert
.
equal
(
rootNode
.
childCount
6
)
;
this
.
_testURI
=
PlacesUtils
.
_uri
(
"
http
:
/
/
test
"
)
;
this
.
_tags
=
[
"
a
"
"
b
"
]
;
PlacesUtils
.
tagging
.
tagURI
(
this
.
_testURI
this
.
_tags
)
;
this
.
_roots
=
[
PlacesUtils
.
bookmarksMenuFolderId
PlacesUtils
.
toolbarFolderId
PlacesUtils
.
unfiledBookmarksFolderId
PlacesUtils
.
mobileFolderId
this
.
_folderId
]
;
this
.
_roots
.
forEach
(
function
(
aRootId
)
{
PlacesUtils
.
bookmarks
.
removeFolderChildren
(
aRootId
)
;
PlacesUtils
.
bookmarks
.
insertBookmark
(
aRootId
this
.
_testURI
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
test
"
)
;
}
this
)
;
var
excludedFolderId
=
PlacesUtils
.
bookmarks
.
createFolder
(
PlacesUtils
.
placesRootId
"
excluded
"
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
Assert
.
equal
(
rootNode
.
childCount
7
)
;
PlacesUtils
.
bookmarks
.
insertBookmark
(
excludedFolderId
this
.
_testURI
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
test
"
)
;
}
inbetween
:
function
inbetween
(
)
{
this
.
_litterTitle
=
"
otter
"
;
PlacesUtils
.
bookmarks
.
createFolder
(
PlacesUtils
.
placesRootId
this
.
_litterTitle
0
)
;
PlacesUtils
.
tagging
.
tagURI
(
this
.
_testURI
[
"
c
"
"
d
"
]
)
;
}
validate
:
function
validate
(
)
{
var
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
this
.
_testURI
)
;
Assert
.
equal
(
this
.
_tags
.
toString
(
)
tags
.
toString
(
)
)
;
var
rootNode
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
placesRootId
false
false
)
.
root
;
Assert
.
notEqual
(
rootNode
.
getChild
(
0
)
.
title
this
.
_litterTitle
)
;
Assert
.
equal
(
rootNode
.
childCount
7
)
;
var
foundTestFolder
=
0
;
for
(
var
i
=
0
;
i
<
rootNode
.
childCount
;
i
+
+
)
{
var
node
=
rootNode
.
getChild
(
i
)
;
do_print
(
"
validating
"
+
node
.
title
)
;
if
(
node
.
itemId
!
=
PlacesUtils
.
tagsFolderId
)
{
if
(
node
.
title
=
=
this
.
_folderTitle
)
{
Assert
.
equal
(
node
.
type
node
.
RESULT_TYPE_FOLDER
)
;
Assert
.
equal
(
node
.
title
this
.
_folderTitle
)
;
foundTestFolder
+
+
;
}
node
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
.
containerOpen
=
true
;
Assert
.
equal
(
node
.
childCount
1
)
;
var
child
=
node
.
getChild
(
0
)
;
Assert
.
ok
(
PlacesUtils
.
_uri
(
child
.
uri
)
.
equals
(
this
.
_testURI
)
)
;
node
.
containerOpen
=
false
;
}
}
Assert
.
equal
(
foundTestFolder
1
)
;
rootNode
.
containerOpen
=
false
;
}
}
)
;
add_task
(
async
function
(
)
{
let
jsonFile
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bookmarks
.
json
"
)
;
tests
.
forEach
(
function
(
aTest
)
{
aTest
.
populate
(
)
;
aTest
.
validate
(
)
;
}
)
;
await
BookmarkJSONUtils
.
exportToFile
(
jsonFile
)
;
tests
.
forEach
(
function
(
aTest
)
{
aTest
.
inbetween
(
)
;
}
)
;
await
BookmarkJSONUtils
.
importFromFile
(
jsonFile
true
)
;
tests
.
forEach
(
function
(
aTest
)
{
aTest
.
validate
(
)
;
}
)
;
await
OS
.
File
.
remove
(
jsonFile
)
;
}
)
;
