add_task
(
async
function
test_same_date_same_hash
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
let
tempPath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bug10169583_bookmarks
.
json
"
)
;
let
{
count
hash
}
=
await
BookmarkJSONUtils
.
exportToFile
(
tempPath
)
;
let
dateObj
=
new
Date
(
)
;
let
filename
=
"
bookmarks
-
"
+
PlacesBackups
.
toISODateString
(
dateObj
)
+
"
_
"
+
count
+
"
_
"
+
hash
+
"
.
json
"
;
let
backupFile
=
OS
.
Path
.
join
(
backupFolder
filename
)
;
await
IOUtils
.
move
(
tempPath
backupFile
)
;
await
PlacesBackups
.
create
(
)
;
let
mostRecentBackupFile
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
Assert
.
equal
(
mostRecentBackupFile
backupFile
)
;
info
(
"
Check
is
valid
JSON
"
)
;
await
IOUtils
.
readJSON
(
mostRecentBackupFile
)
;
await
IOUtils
.
remove
(
backupFile
)
;
await
IOUtils
.
remove
(
tempPath
)
;
PlacesBackups
.
_backupFiles
=
null
;
}
)
;
add_task
(
async
function
test_same_date_diff_hash
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
let
tempPath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bug10169583_bookmarks
.
json
"
)
;
let
{
count
}
=
await
BookmarkJSONUtils
.
exportToFile
(
tempPath
)
;
let
dateObj
=
new
Date
(
)
;
let
filename
=
"
bookmarks
-
"
+
PlacesBackups
.
toISODateString
(
dateObj
)
+
"
_
"
+
count
+
"
_differentHash
=
=
.
json
"
;
let
backupFile
=
OS
.
Path
.
join
(
backupFolder
filename
)
;
await
IOUtils
.
move
(
tempPath
backupFile
)
;
await
PlacesBackups
.
create
(
)
;
let
mostRecentBackupFile
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
info
(
"
Check
is
valid
JSON
"
)
;
await
IOUtils
.
readJSON
(
mostRecentBackupFile
{
decompress
:
true
}
)
;
await
IOUtils
.
remove
(
mostRecentBackupFile
)
;
await
IOUtils
.
remove
(
tempPath
)
;
PlacesBackups
.
_backupFiles
=
null
;
}
)
;
add_task
(
async
function
test_diff_date_same_hash
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
let
tempPath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bug10169583_bookmarks
.
json
"
)
;
let
{
count
hash
}
=
await
BookmarkJSONUtils
.
exportToFile
(
tempPath
)
;
let
oldDate
=
new
Date
(
2014
1
1
)
;
let
curDate
=
new
Date
(
)
;
let
oldFilename
=
"
bookmarks
-
"
+
PlacesBackups
.
toISODateString
(
oldDate
)
+
"
_
"
+
count
+
"
_
"
+
hash
+
"
.
json
"
;
let
newFilename
=
"
bookmarks
-
"
+
PlacesBackups
.
toISODateString
(
curDate
)
+
"
_
"
+
count
+
"
_
"
+
hash
+
"
.
json
"
;
let
backupFile
=
OS
.
Path
.
join
(
backupFolder
oldFilename
)
;
let
newBackupFile
=
OS
.
Path
.
join
(
backupFolder
newFilename
)
;
await
IOUtils
.
move
(
tempPath
backupFile
)
;
await
PlacesBackups
.
create
(
)
;
let
mostRecentBackupFile
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
Assert
.
equal
(
mostRecentBackupFile
newBackupFile
)
;
await
IOUtils
.
remove
(
mostRecentBackupFile
)
;
await
IOUtils
.
remove
(
tempPath
)
;
}
)
;
