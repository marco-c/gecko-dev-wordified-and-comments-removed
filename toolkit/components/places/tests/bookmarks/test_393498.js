var
observer
=
{
__proto__
:
NavBookmarkObserver
.
prototype
onItemAdded
(
id
folder
index
)
{
this
.
_itemAddedId
=
id
;
this
.
_itemAddedParent
=
folder
;
this
.
_itemAddedIndex
=
index
;
}
onItemChanged
(
id
property
isAnnotationProperty
value
)
{
this
.
_itemChangedId
=
id
;
this
.
_itemChangedProperty
=
property
;
this
.
_itemChanged_isAnnotationProperty
=
isAnnotationProperty
;
this
.
_itemChangedValue
=
value
;
}
}
;
PlacesUtils
.
bookmarks
.
addObserver
(
observer
)
;
registerCleanupFunction
(
function
(
)
{
PlacesUtils
.
bookmarks
.
removeObserver
(
observer
)
;
}
)
;
function
do_check_date_eq
(
t1
t2
)
{
return
Assert
.
equal
(
t1
.
getTime
(
)
t2
.
getTime
(
)
)
;
}
add_task
(
async
function
test_bookmark_update_notifications
(
)
{
const
PAST_DATE
=
new
Date
(
Date
.
now
(
)
-
86400000
)
;
let
testFolder
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
title
:
"
test
Folder
"
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
}
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
testFolder
.
guid
type
:
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
url
:
"
http
:
/
/
google
.
com
/
"
title
:
"
a
bookmark
"
}
)
;
Assert
.
ok
(
observer
.
itemChangedProperty
=
=
=
undefined
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
dateAdded
:
PAST_DATE
}
)
;
Assert
.
equal
(
observer
.
_itemChangedProperty
"
dateAdded
"
)
;
Assert
.
equal
(
observer
.
_itemChangedValue
PlacesUtils
.
toPRTime
(
PAST_DATE
)
)
;
do_check_date_eq
(
bookmark
.
lastModified
bookmark
.
dateAdded
)
;
let
updatedBookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
guid
:
bookmark
.
guid
}
)
;
do_check_date_eq
(
updatedBookmark
.
dateAdded
PAST_DATE
)
;
updatedBookmark
=
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
lastModified
:
PAST_DATE
}
)
;
Assert
.
equal
(
observer
.
_itemChangedProperty
"
lastModified
"
)
;
Assert
.
equal
(
observer
.
_itemChangedValue
PlacesUtils
.
toPRTime
(
PAST_DATE
)
)
;
do_check_date_eq
(
updatedBookmark
.
lastModified
PAST_DATE
)
;
updatedBookmark
=
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
title
:
"
Google
"
}
)
;
Assert
.
equal
(
observer
.
_itemChangedId
await
PlacesUtils
.
promiseItemId
(
bookmark
.
guid
)
)
;
Assert
.
equal
(
observer
.
_itemChangedProperty
"
title
"
)
;
Assert
.
equal
(
observer
.
_itemChangedValue
"
Google
"
)
;
Assert
.
ok
(
is_time_ordered
(
PAST_DATE
updatedBookmark
.
lastModified
.
getTime
(
)
)
)
;
let
testFolderId
=
await
PlacesUtils
.
promiseItemId
(
testFolder
.
guid
)
;
let
root
=
PlacesUtils
.
getFolderContents
(
testFolderId
)
.
root
;
Assert
.
equal
(
root
.
childCount
1
)
;
let
childNode
=
root
.
getChild
(
0
)
;
Assert
.
equal
(
PlacesUtils
.
toPRTime
(
updatedBookmark
.
dateAdded
)
childNode
.
dateAdded
)
;
Assert
.
equal
(
PlacesUtils
.
toPRTime
(
updatedBookmark
.
lastModified
)
childNode
.
lastModified
)
;
updatedBookmark
=
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
lastModified
:
PAST_DATE
title
:
"
Google
"
}
)
;
Assert
.
ok
(
is_time_ordered
(
PAST_DATE
childNode
.
lastModified
)
)
;
Assert
.
equal
(
PlacesUtils
.
toPRTime
(
updatedBookmark
.
lastModified
)
childNode
.
lastModified
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
dateAdded
:
PAST_DATE
}
)
;
Assert
.
equal
(
childNode
.
dateAdded
PlacesUtils
.
toPRTime
(
PAST_DATE
)
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
lastModified
:
PAST_DATE
}
)
;
Assert
.
equal
(
childNode
.
lastModified
PlacesUtils
.
toPRTime
(
PAST_DATE
)
)
;
root
.
containerOpen
=
false
;
}
)
;
