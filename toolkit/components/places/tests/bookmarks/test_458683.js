const
ITEM_TITLE
=
"
invalid
uri
"
;
const
ITEM_URL
=
"
http
:
/
/
test
.
mozilla
.
org
/
"
;
const
TAG_NAME
=
"
testTag
"
;
function
validateResults
(
)
{
var
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
PlacesUtils
.
bookmarks
.
toolbarFolder
]
1
)
;
var
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
var
result
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
;
var
toolbar
=
result
.
root
;
toolbar
.
containerOpen
=
true
;
Assert
.
equal
(
toolbar
.
childCount
1
)
;
for
(
var
i
=
0
;
i
<
toolbar
.
childCount
;
i
+
+
)
{
var
folderNode
=
toolbar
.
getChild
(
0
)
;
Assert
.
equal
(
folderNode
.
type
folderNode
.
RESULT_TYPE_URI
)
;
Assert
.
equal
(
folderNode
.
title
ITEM_TITLE
)
;
}
toolbar
.
containerOpen
=
false
;
var
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
PlacesUtils
.
_uri
(
ITEM_URL
)
)
;
Assert
.
equal
(
tags
.
length
1
)
;
Assert
.
equal
(
tags
[
0
]
TAG_NAME
)
;
}
add_task
(
async
function
(
)
{
let
jsonFile
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bookmarks
.
json
"
)
;
let
item
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
ITEM_TITLE
url
:
ITEM_URL
}
)
;
PlacesUtils
.
tagging
.
tagURI
(
PlacesUtils
.
_uri
(
ITEM_URL
)
[
TAG_NAME
]
)
;
var
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
var
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
PlacesUtils
.
bookmarks
.
tagsFolder
]
1
)
;
var
result
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
;
var
tagRoot
=
result
.
root
;
tagRoot
.
containerOpen
=
true
;
Assert
.
equal
(
tagRoot
.
childCount
1
)
;
var
tagNode
=
tagRoot
.
getChild
(
0
)
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
let
tagItemId
=
tagNode
.
itemId
;
tagRoot
.
containerOpen
=
false
;
PlacesUtils
.
bookmarks
.
insertSeparator
(
tagItemId
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
PlacesUtils
.
bookmarks
.
createFolder
(
tagItemId
"
test
folder
"
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
PlacesUtils
.
bookmarks
.
insertSeparator
(
PlacesUtils
.
bookmarks
.
tagsFolder
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
PlacesUtils
.
bookmarks
.
createFolder
(
PlacesUtils
.
bookmarks
.
tagsFolder
"
test
tags
root
folder
"
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
validateResults
(
)
;
await
BookmarkJSONUtils
.
exportToFile
(
jsonFile
)
;
PlacesUtils
.
tagging
.
untagURI
(
PlacesUtils
.
_uri
(
ITEM_URL
)
[
TAG_NAME
]
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
item
)
;
await
BookmarkJSONUtils
.
importFromFile
(
jsonFile
true
)
;
validateResults
(
)
;
await
OS
.
File
.
remove
(
jsonFile
)
;
}
)
;
