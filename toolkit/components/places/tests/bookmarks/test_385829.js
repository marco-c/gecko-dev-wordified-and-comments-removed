add_task
(
async
function
search_bookmark_by_lastModified_dateDated
(
)
{
let
folder
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
title
:
"
bug
385829
test
"
}
)
;
let
now
=
new
Date
(
)
;
let
b1
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
folder
.
guid
url
:
"
http
:
/
/
a1
.
com
/
"
title
:
"
1
title
"
dateAdded
:
new
Date
(
now
.
getTime
(
)
+
1000
)
}
)
;
let
b2
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
folder
.
guid
url
:
"
http
:
/
/
a2
.
com
/
"
title
:
"
2
title
"
dateAdded
:
new
Date
(
now
.
getTime
(
)
+
2000
)
}
)
;
let
b3
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
folder
.
guid
url
:
"
http
:
/
/
a3
.
com
/
"
title
:
"
3
title
"
dateAdded
:
new
Date
(
now
.
getTime
(
)
+
3000
)
}
)
;
let
b4
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
folder
.
guid
url
:
"
http
:
/
/
a4
.
com
/
"
title
:
"
4
title
"
dateAdded
:
new
Date
(
now
.
getTime
(
)
+
4000
)
}
)
;
let
modifiedTime
=
new
Date
(
now
.
getTime
(
)
+
5000
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
b1
.
guid
lastModified
:
new
Date
(
modifiedTime
.
getTime
(
)
+
4000
)
}
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
b2
.
guid
lastModified
:
new
Date
(
modifiedTime
.
getTime
(
)
+
3000
)
}
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
b3
.
guid
lastModified
:
new
Date
(
modifiedTime
.
getTime
(
)
+
2000
)
}
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
b4
.
guid
lastModified
:
new
Date
(
modifiedTime
.
getTime
(
)
+
1000
)
}
)
;
let
hs
=
PlacesUtils
.
history
;
let
options
=
hs
.
getNewQueryOptions
(
)
;
let
query
=
hs
.
getNewQuery
(
)
;
options
.
queryType
=
options
.
QUERY_TYPE_BOOKMARKS
;
options
.
maxResults
=
3
;
query
.
setParents
(
[
folder
.
guid
]
)
;
let
result
=
hs
.
executeQuery
(
query
options
)
;
let
rootNode
=
result
.
root
;
rootNode
.
containerOpen
=
true
;
result
.
sortingMode
=
options
.
SORT_BY_DATEADDED_ASCENDING
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b1
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
dateAdded
<
rootNode
.
getChild
(
1
)
.
dateAdded
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
dateAdded
<
rootNode
.
getChild
(
2
)
.
dateAdded
)
;
result
.
sortingMode
=
options
.
SORT_BY_DATEADDED_DESCENDING
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b1
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
dateAdded
>
rootNode
.
getChild
(
1
)
.
dateAdded
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
dateAdded
>
rootNode
.
getChild
(
2
)
.
dateAdded
)
;
result
.
sortingMode
=
options
.
SORT_BY_LASTMODIFIED_ASCENDING
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b1
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
lastModified
<
rootNode
.
getChild
(
1
)
.
lastModified
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
lastModified
<
rootNode
.
getChild
(
2
)
.
lastModified
)
;
result
.
sortingMode
=
options
.
SORT_BY_LASTMODIFIED_DESCENDING
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b1
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
lastModified
>
rootNode
.
getChild
(
1
)
.
lastModified
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
lastModified
>
rootNode
.
getChild
(
2
)
.
lastModified
)
;
rootNode
.
containerOpen
=
false
;
options
.
sortingMode
=
options
.
SORT_BY_DATEADDED_ASCENDING
;
result
=
hs
.
executeQuery
(
query
options
)
;
rootNode
=
result
.
root
;
rootNode
.
containerOpen
=
true
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b1
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
dateAdded
<
rootNode
.
getChild
(
1
)
.
dateAdded
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
dateAdded
<
rootNode
.
getChild
(
2
)
.
dateAdded
)
;
rootNode
.
containerOpen
=
false
;
options
.
sortingMode
=
options
.
SORT_BY_DATEADDED_DESCENDING
;
result
=
hs
.
executeQuery
(
query
options
)
;
rootNode
=
result
.
root
;
rootNode
.
containerOpen
=
true
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b4
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
dateAdded
>
rootNode
.
getChild
(
1
)
.
dateAdded
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
dateAdded
>
rootNode
.
getChild
(
2
)
.
dateAdded
)
;
rootNode
.
containerOpen
=
false
;
options
.
sortingMode
=
options
.
SORT_BY_LASTMODIFIED_ASCENDING
;
result
=
hs
.
executeQuery
(
query
options
)
;
rootNode
=
result
.
root
;
rootNode
.
containerOpen
=
true
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b4
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
lastModified
<
rootNode
.
getChild
(
1
)
.
lastModified
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
lastModified
<
rootNode
.
getChild
(
2
)
.
lastModified
)
;
rootNode
.
containerOpen
=
false
;
options
.
sortingMode
=
options
.
SORT_BY_LASTMODIFIED_DESCENDING
;
result
=
hs
.
executeQuery
(
query
options
)
;
rootNode
=
result
.
root
;
rootNode
.
containerOpen
=
true
;
Assert
.
equal
(
rootNode
.
childCount
3
)
;
Assert
.
equal
(
rootNode
.
getChild
(
0
)
.
bookmarkGuid
b1
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
1
)
.
bookmarkGuid
b2
.
guid
)
;
Assert
.
equal
(
rootNode
.
getChild
(
2
)
.
bookmarkGuid
b3
.
guid
)
;
Assert
.
ok
(
rootNode
.
getChild
(
0
)
.
lastModified
>
rootNode
.
getChild
(
1
)
.
lastModified
)
;
Assert
.
ok
(
rootNode
.
getChild
(
1
)
.
lastModified
>
rootNode
.
getChild
(
2
)
.
lastModified
)
;
rootNode
.
containerOpen
=
false
;
}
)
;
