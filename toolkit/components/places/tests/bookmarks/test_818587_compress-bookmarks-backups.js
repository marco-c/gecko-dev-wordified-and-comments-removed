add_task
(
async
function
compress_bookmark_backups_test
(
)
{
let
todayFilename
=
PlacesBackups
.
getFilenameForDate
(
new
Date
(
2014
4
15
)
true
)
;
Assert
.
equal
(
todayFilename
"
bookmarks
-
2014
-
05
-
15
.
jsonlz4
"
)
;
await
PlacesBackups
.
create
(
)
;
Assert
.
equal
(
(
await
PlacesBackups
.
getBackupFiles
(
)
)
.
length
1
)
;
let
mostRecentBackupFile
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
Assert
.
notEqual
(
mostRecentBackupFile
null
)
;
Assert
.
ok
(
PlacesBackups
.
filenamesRegex
.
test
(
OS
.
Path
.
basename
(
mostRecentBackupFile
)
)
)
;
await
IOUtils
.
remove
(
mostRecentBackupFile
)
;
Assert
.
equal
(
false
await
IOUtils
.
exists
(
mostRecentBackupFile
)
)
;
let
jsonFile
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bookmarks
.
json
"
)
;
await
PlacesBackups
.
saveBookmarksToJSONFile
(
jsonFile
)
;
Assert
.
equal
(
(
await
PlacesBackups
.
getBackupFiles
(
)
)
.
length
1
)
;
let
url
=
"
http
:
/
/
www
.
mozilla
.
org
/
en
-
US
/
"
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
bookmark
"
url
}
)
;
await
PlacesBackups
.
create
(
undefined
true
)
;
let
recentBackup
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
await
BookmarkJSONUtils
.
importFromFile
(
recentBackup
{
replace
:
true
}
)
;
let
root
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
.
unfiledGuid
)
.
root
;
let
node
=
root
.
getChild
(
0
)
;
Assert
.
equal
(
node
.
uri
url
)
;
root
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
IOUtils
.
remove
(
jsonFile
)
;
}
)
;
