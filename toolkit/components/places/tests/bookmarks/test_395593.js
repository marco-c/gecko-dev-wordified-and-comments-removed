function
check_queries_results
(
aQueries
aOptions
aExpectedBookmarks
)
{
var
result
=
PlacesUtils
.
history
.
executeQueries
(
aQueries
aQueries
.
length
aOptions
)
;
var
root
=
result
.
root
;
root
.
containerOpen
=
true
;
for
(
let
i
=
0
;
i
<
root
.
childCount
;
i
+
+
)
{
dump
(
"
nodes
[
"
+
i
+
"
]
:
"
+
root
.
getChild
(
0
)
.
title
+
"
\
n
"
)
;
}
do_check_eq
(
root
.
childCount
aExpectedBookmarks
.
length
)
;
for
(
let
i
=
0
;
i
<
root
.
childCount
;
i
+
+
)
{
do_check_eq
(
root
.
getChild
(
i
)
.
bookmarkGuid
aExpectedBookmarks
[
i
]
.
guid
)
;
}
root
.
containerOpen
=
false
;
}
add_task
(
async
function
run_test
(
)
{
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
menuGuid
children
:
[
{
title
:
"
123
0
"
url
:
"
http
:
/
/
foo
.
tld
"
}
{
title
:
"
456
"
url
:
"
http
:
/
/
foo
.
tld
"
}
{
title
:
"
123
456
"
url
:
"
http
:
/
/
foo
.
tld
"
}
{
title
:
"
789
456
"
url
:
"
http
:
/
/
foo
.
tld
"
}
]
}
)
;
var
queries
=
[
]
;
queries
.
push
(
PlacesUtils
.
history
.
getNewQuery
(
)
)
;
queries
.
push
(
PlacesUtils
.
history
.
getNewQuery
(
)
)
;
var
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
options
.
queryType
=
Ci
.
nsINavHistoryQueryOptions
.
QUERY_TYPE_BOOKMARKS
;
dump
(
"
Test
searching
for
123
OR
789
\
n
"
)
;
queries
[
0
]
.
searchTerms
=
"
123
"
;
queries
[
1
]
.
searchTerms
=
"
789
"
;
check_queries_results
(
queries
options
[
bookmarks
[
0
]
bookmarks
[
2
]
bookmarks
[
3
]
]
)
;
dump
(
"
Test
searching
for
123
OR
456
\
n
"
)
;
queries
[
0
]
.
searchTerms
=
"
123
"
;
queries
[
1
]
.
searchTerms
=
"
456
"
;
check_queries_results
(
queries
options
bookmarks
)
;
dump
(
"
Test
searching
for
00
OR
789
\
n
"
)
;
queries
[
0
]
.
searchTerms
=
"
00
"
;
queries
[
1
]
.
searchTerms
=
"
789
"
;
check_queries_results
(
queries
options
[
bookmarks
[
3
]
]
)
;
}
)
;
