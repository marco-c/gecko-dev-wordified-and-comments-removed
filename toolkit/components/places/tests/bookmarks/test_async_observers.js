let
gBookmarkGuids
=
[
]
;
add_task
(
async
function
setup
(
)
{
gBookmarkGuids
.
push
(
(
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
http
:
/
/
book
.
ma
.
rk
/
"
}
)
)
.
guid
)
;
gBookmarkGuids
.
push
(
(
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
url
:
"
http
:
/
/
book
.
ma
.
rk
/
"
}
)
)
.
guid
)
;
Assert
.
equal
(
gBookmarkGuids
.
length
2
)
;
}
)
;
add_task
(
async
function
test_add_icon
(
)
{
let
guids
=
new
Set
(
gBookmarkGuids
)
;
Assert
.
equal
(
guids
.
size
2
)
;
let
promiseNotifications
=
PlacesTestUtils
.
waitForNotification
(
"
favicon
-
changed
"
events
=
>
events
.
some
(
event
=
>
event
.
url
=
=
"
http
:
/
/
book
.
ma
.
rk
/
"
&
&
event
.
faviconUrl
.
startsWith
(
"
data
:
image
/
png
;
base64
"
)
)
)
;
PlacesUtils
.
favicons
.
setFaviconForPage
(
NetUtil
.
newURI
(
"
http
:
/
/
book
.
ma
.
rk
/
"
)
SMALLPNG_DATA_URI
SMALLPNG_DATA_URI
)
;
await
promiseNotifications
;
}
)
;
add_task
(
async
function
test_remove_page
(
)
{
let
guids
=
new
Set
(
gBookmarkGuids
)
;
Assert
.
equal
(
guids
.
size
2
)
;
let
promiseNotifications
=
PlacesTestUtils
.
waitForNotification
(
"
page
-
removed
"
events
=
>
events
.
some
(
event
=
>
event
.
url
=
=
=
"
http
:
/
/
book
.
ma
.
rk
/
"
&
&
!
event
.
isRemovedFromStore
&
&
!
event
.
isPartialVisistsRemoval
)
)
;
await
PlacesUtils
.
history
.
remove
(
"
http
:
/
/
book
.
ma
.
rk
/
"
)
;
await
promiseNotifications
;
}
)
;
