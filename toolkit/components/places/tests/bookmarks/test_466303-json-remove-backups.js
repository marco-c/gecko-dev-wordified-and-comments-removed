async
function
countChildren
(
path
)
{
let
children
=
await
IOUtils
.
getChildren
(
path
)
;
let
count
=
0
;
let
lastBackupPath
=
null
;
for
(
let
entry
of
children
)
{
count
+
+
;
if
(
PlacesBackups
.
filenamesRegex
.
test
(
OS
.
Path
.
basename
(
entry
)
)
)
{
lastBackupPath
=
entry
;
}
}
return
{
count
lastBackupPath
}
;
}
add_task
(
async
function
check_max_backups_is_respected
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
let
oldJsonPath
=
OS
.
Path
.
join
(
backupFolder
"
bookmarks
-
2008
-
01
-
01
.
json
"
)
;
await
IOUtils
.
writeUTF8
(
oldJsonPath
"
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
oldJsonPath
)
)
;
let
jsonPath
=
OS
.
Path
.
join
(
backupFolder
"
bookmarks
-
2008
-
01
-
31
.
json
"
)
;
await
IOUtils
.
writeUTF8
(
jsonPath
"
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
jsonPath
)
)
;
await
PlacesBackups
.
create
(
2
)
;
let
{
count
lastBackupPath
}
=
await
countChildren
(
backupFolder
)
;
Assert
.
equal
(
count
2
)
;
Assert
.
notEqual
(
lastBackupPath
null
)
;
Assert
.
equal
(
false
await
IOUtils
.
exists
(
oldJsonPath
)
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
jsonPath
)
)
;
}
)
;
add_task
(
async
function
check_max_backups_greater_than_backups
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
await
PlacesBackups
.
create
(
3
)
;
let
{
count
lastBackupPath
}
=
await
countChildren
(
backupFolder
)
;
Assert
.
equal
(
count
2
)
;
Assert
.
notEqual
(
lastBackupPath
null
)
;
}
)
;
add_task
(
async
function
check_max_backups_null
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
await
PlacesBackups
.
create
(
null
)
;
let
{
count
lastBackupPath
}
=
await
countChildren
(
backupFolder
)
;
Assert
.
equal
(
count
2
)
;
Assert
.
notEqual
(
lastBackupPath
null
)
;
}
)
;
add_task
(
async
function
check_max_backups_undefined
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
await
PlacesBackups
.
create
(
)
;
let
{
count
lastBackupPath
}
=
await
countChildren
(
backupFolder
)
;
Assert
.
equal
(
count
2
)
;
Assert
.
notEqual
(
lastBackupPath
null
)
;
}
)
;
