add_task
(
async
function
check_max_backups_is_respected
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
let
oldJsonPath
=
OS
.
Path
.
join
(
backupFolder
"
bookmarks
-
2008
-
01
-
01
.
json
"
)
;
let
oldJsonFile
=
await
OS
.
File
.
open
(
oldJsonPath
{
truncate
:
true
}
)
;
oldJsonFile
.
close
(
)
;
do_check_true
(
await
OS
.
File
.
exists
(
oldJsonPath
)
)
;
let
jsonPath
=
OS
.
Path
.
join
(
backupFolder
"
bookmarks
-
2008
-
01
-
31
.
json
"
)
;
let
jsonFile
=
await
OS
.
File
.
open
(
jsonPath
{
truncate
:
true
}
)
;
jsonFile
.
close
(
)
;
do_check_true
(
await
OS
.
File
.
exists
(
jsonPath
)
)
;
await
PlacesBackups
.
create
(
2
)
;
let
count
=
0
;
let
lastBackupPath
=
null
;
let
iterator
=
new
OS
.
File
.
DirectoryIterator
(
backupFolder
)
;
try
{
await
iterator
.
forEach
(
aEntry
=
>
{
count
+
+
;
if
(
PlacesBackups
.
filenamesRegex
.
test
(
aEntry
.
name
)
)
lastBackupPath
=
aEntry
.
path
;
}
)
;
}
finally
{
iterator
.
close
(
)
;
}
do_check_eq
(
count
2
)
;
do_check_neq
(
lastBackupPath
null
)
;
do_check_false
(
await
OS
.
File
.
exists
(
oldJsonPath
)
)
;
do_check_true
(
await
OS
.
File
.
exists
(
jsonPath
)
)
;
}
)
;
add_task
(
async
function
check_max_backups_greater_than_backups
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
await
PlacesBackups
.
create
(
3
)
;
let
count
=
0
;
let
lastBackupPath
=
null
;
let
iterator
=
new
OS
.
File
.
DirectoryIterator
(
backupFolder
)
;
try
{
await
iterator
.
forEach
(
aEntry
=
>
{
count
+
+
;
if
(
PlacesBackups
.
filenamesRegex
.
test
(
aEntry
.
name
)
)
lastBackupPath
=
aEntry
.
path
;
}
)
;
}
finally
{
iterator
.
close
(
)
;
}
do_check_eq
(
count
2
)
;
do_check_neq
(
lastBackupPath
null
)
;
}
)
;
add_task
(
async
function
check_max_backups_null
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
await
PlacesBackups
.
create
(
null
)
;
let
count
=
0
;
let
lastBackupPath
=
null
;
let
iterator
=
new
OS
.
File
.
DirectoryIterator
(
backupFolder
)
;
try
{
await
iterator
.
forEach
(
aEntry
=
>
{
count
+
+
;
if
(
PlacesBackups
.
filenamesRegex
.
test
(
aEntry
.
name
)
)
lastBackupPath
=
aEntry
.
path
;
}
)
;
}
finally
{
iterator
.
close
(
)
;
}
do_check_eq
(
count
2
)
;
do_check_neq
(
lastBackupPath
null
)
;
}
)
;
add_task
(
async
function
check_max_backups_undefined
(
)
{
let
backupFolder
=
await
PlacesBackups
.
getBackupFolder
(
)
;
await
PlacesBackups
.
create
(
)
;
let
count
=
0
;
let
lastBackupPath
=
null
;
let
iterator
=
new
OS
.
File
.
DirectoryIterator
(
backupFolder
)
;
try
{
await
iterator
.
forEach
(
aEntry
=
>
{
count
+
+
;
if
(
PlacesBackups
.
filenamesRegex
.
test
(
aEntry
.
name
)
)
lastBackupPath
=
aEntry
.
path
;
}
)
;
}
finally
{
iterator
.
close
(
)
;
}
do_check_eq
(
count
2
)
;
do_check_neq
(
lastBackupPath
null
)
;
}
)
;
