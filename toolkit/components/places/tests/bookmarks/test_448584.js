try
{
var
mDBConn
=
PlacesUtils
.
history
.
DBConnection
;
}
catch
(
ex
)
{
do_throw
(
"
Could
not
get
database
connection
\
n
"
)
;
}
const
ITEM_TITLE
=
"
invalid
uri
"
;
const
ITEM_URL
=
"
http
:
/
/
test
.
mozilla
.
org
"
;
function
validateResults
(
expectedValidItemsCount
)
{
var
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
toolbarGuid
]
)
;
var
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
var
result
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
;
var
toolbar
=
result
.
root
;
toolbar
.
containerOpen
=
true
;
Assert
.
equal
(
toolbar
.
childCount
expectedValidItemsCount
)
;
for
(
var
i
=
0
;
i
<
toolbar
.
childCount
;
i
+
+
)
{
var
folderNode
=
toolbar
.
getChild
(
0
)
;
Assert
.
equal
(
folderNode
.
type
folderNode
.
RESULT_TYPE_URI
)
;
Assert
.
equal
(
folderNode
.
title
ITEM_TITLE
)
;
}
toolbar
.
containerOpen
=
false
;
}
add_task
(
async
function
(
)
{
let
jsonFile
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
bookmarks
.
json
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
ITEM_TITLE
url
:
ITEM_URL
}
)
;
let
badBookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
ITEM_TITLE
url
:
ITEM_URL
}
)
;
validateResults
(
2
)
;
var
sql
=
"
UPDATE
moz_bookmarks
SET
fk
=
1337
WHERE
guid
=
?
1
"
;
var
stmt
=
mDBConn
.
createStatement
(
sql
)
;
stmt
.
bindByIndex
(
0
badBookmark
.
guid
)
;
try
{
stmt
.
execute
(
)
;
}
finally
{
stmt
.
finalize
(
)
;
}
await
BookmarkJSONUtils
.
exportToFile
(
jsonFile
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
badBookmark
)
;
try
{
await
BookmarkJSONUtils
.
importFromFile
(
jsonFile
{
replace
:
true
}
)
;
}
catch
(
ex
)
{
do_throw
(
"
couldn
'
t
import
the
exported
file
:
"
+
ex
)
;
}
validateResults
(
1
)
;
await
IOUtils
.
remove
(
jsonFile
)
;
}
)
;
