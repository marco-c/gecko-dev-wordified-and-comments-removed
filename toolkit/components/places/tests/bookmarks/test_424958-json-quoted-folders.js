var
tests
=
[
]
;
var
quotesTest
=
{
_folderTitle
:
'
"
quoted
folder
"
'
_folderId
:
null
populate
(
)
{
this
.
_folderId
=
PlacesUtils
.
bookmarks
.
createFolder
(
PlacesUtils
.
toolbarFolderId
this
.
_folderTitle
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
}
clean
(
)
{
PlacesUtils
.
bookmarks
.
removeItem
(
this
.
_folderId
)
;
}
validate
(
)
{
var
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
PlacesUtils
.
bookmarks
.
toolbarFolder
]
1
)
;
var
result
=
PlacesUtils
.
history
.
executeQuery
(
query
PlacesUtils
.
history
.
getNewQueryOptions
(
)
)
;
var
toolbar
=
result
.
root
;
toolbar
.
containerOpen
=
true
;
do_check_true
(
toolbar
.
childCount
1
)
;
var
folderNode
=
toolbar
.
getChild
(
0
)
;
do_check_eq
(
folderNode
.
type
folderNode
.
RESULT_TYPE_FOLDER
)
;
do_check_eq
(
folderNode
.
title
this
.
_folderTitle
)
;
toolbar
.
containerOpen
=
false
;
}
}
tests
.
push
(
quotesTest
)
;
add_task
(
async
function
(
)
{
let
jsonFile
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bookmarks
.
json
"
)
;
tests
.
forEach
(
function
(
aTest
)
{
aTest
.
populate
(
)
;
aTest
.
validate
(
)
;
}
)
;
await
BookmarkJSONUtils
.
exportToFile
(
jsonFile
)
;
tests
.
forEach
(
function
(
aTest
)
{
aTest
.
clean
(
)
;
}
)
;
await
BookmarkJSONUtils
.
importFromFile
(
jsonFile
true
)
;
tests
.
forEach
(
function
(
aTest
)
{
aTest
.
validate
(
)
;
}
)
;
await
OS
.
File
.
remove
(
jsonFile
)
;
}
)
;
