const
T_URI
=
Services
.
io
.
newURI
(
"
https
:
/
/
www
.
mozilla
.
org
/
firefox
/
nightly
/
firstrun
/
"
)
;
async
function
getForeignCountForURL
(
conn
url
)
{
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
url
=
url
instanceof
Ci
.
nsIURI
?
url
.
spec
:
url
;
let
rows
=
await
conn
.
executeCached
(
SELECT
foreign_count
FROM
moz_places
WHERE
url_hash
=
hash
(
:
t_url
)
AND
url
=
:
t_url
{
t_url
:
url
}
)
;
return
rows
[
0
]
.
getResultByName
(
"
foreign_count
"
)
;
}
add_task
(
async
function
add_remove_change_bookmark_test
(
)
{
let
conn
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
await
PlacesTestUtils
.
addVisits
(
T_URI
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
0
)
;
let
bm1
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
First
Run
"
url
:
T_URI
}
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
1
)
;
let
bm2
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
First
Run
"
url
:
T_URI
}
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
2
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm2
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
1
)
;
const
URI2
=
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
mozilla
.
org
"
)
;
bm1
.
url
=
URI2
;
bm1
=
await
PlacesUtils
.
bookmarks
.
update
(
bm1
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
0
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
URI2
)
)
1
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm1
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
URI2
)
)
0
)
;
}
)
;
add_task
(
async
function
maintenance_foreign_count_test
(
)
{
let
conn
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
await
PlacesTestUtils
.
addVisits
(
T_URI
)
;
await
new
Promise
(
resolve
=
>
{
let
stmt
=
DBConn
(
)
.
createAsyncStatement
(
UPDATE
moz_places
SET
foreign_count
=
10
WHERE
url_hash
=
hash
(
:
t_url
)
AND
url
=
:
t_url
)
;
stmt
.
params
.
t_url
=
T_URI
.
spec
;
stmt
.
executeAsync
(
{
handleCompletion
(
)
{
resolve
(
)
;
}
}
)
;
stmt
.
finalize
(
)
;
}
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
10
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesDBUtils
.
jsm
"
)
;
await
PlacesDBUtils
.
maintenanceOnIdle
(
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
0
)
;
}
)
;
add_task
(
async
function
add_remove_tags_test
(
)
{
let
conn
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
await
PlacesTestUtils
.
addVisits
(
T_URI
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
0
)
;
PlacesUtils
.
tagging
.
tagURI
(
T_URI
[
"
test
tag
"
]
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
1
)
;
PlacesUtils
.
tagging
.
tagURI
(
T_URI
[
"
one
"
"
two
"
]
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
3
)
;
PlacesUtils
.
tagging
.
untagURI
(
T_URI
[
"
test
tag
"
"
one
"
"
two
"
]
)
;
Assert
.
equal
(
(
await
getForeignCountForURL
(
conn
T_URI
)
)
0
)
;
}
)
;
