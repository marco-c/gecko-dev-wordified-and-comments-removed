function
run_test
(
)
{
run_next_test
(
)
;
}
add_task
(
async
function
test_saveBookmarksToJSONFile_and_create
(
)
{
let
uri
=
NetUtil
.
newURI
(
"
http
:
/
/
getfirefox
.
com
/
"
)
;
let
bookmarkId
=
PlacesUtils
.
bookmarks
.
insertBookmark
(
PlacesUtils
.
unfiledBookmarksFolderId
uri
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
Get
Firefox
!
"
)
;
let
backupFile
=
FileUtils
.
getFile
(
"
TmpD
"
[
"
bookmarks
.
json
"
]
)
;
backupFile
.
create
(
Ci
.
nsILocalFile
.
NORMAL_FILE_TYPE
parseInt
(
"
0600
"
8
)
)
;
let
nodeCount
=
await
PlacesBackups
.
saveBookmarksToJSONFile
(
backupFile
true
)
;
do_check_true
(
nodeCount
>
0
)
;
do_check_true
(
backupFile
.
exists
(
)
)
;
do_check_eq
(
backupFile
.
leafName
"
bookmarks
.
json
"
)
;
let
recentBackup
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
let
matches
=
OS
.
Path
.
basename
(
recentBackup
)
.
match
(
PlacesBackups
.
filenamesRegex
)
;
do_check_eq
(
matches
[
2
]
nodeCount
)
;
do_check_eq
(
matches
[
3
]
.
length
24
)
;
await
PlacesBackups
.
create
(
0
)
;
do_check_eq
(
(
await
PlacesBackups
.
getBackupFiles
(
)
)
.
length
0
)
;
await
PlacesBackups
.
create
(
)
;
do_check_eq
(
(
await
PlacesBackups
.
getBackupFiles
(
)
)
.
length
1
)
;
let
mostRecentBackupFile
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
do_check_neq
(
mostRecentBackupFile
null
)
;
matches
=
OS
.
Path
.
basename
(
recentBackup
)
.
match
(
PlacesBackups
.
filenamesRegex
)
;
do_check_eq
(
matches
[
2
]
nodeCount
)
;
do_check_eq
(
matches
[
3
]
.
length
24
)
;
backupFile
.
remove
(
false
)
;
await
PlacesBackups
.
create
(
0
)
;
PlacesUtils
.
bookmarks
.
removeItem
(
bookmarkId
)
;
}
)
;
