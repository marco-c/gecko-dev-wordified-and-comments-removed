add_task
(
async
function
test_saveBookmarksToJSONFile_and_create
(
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
Get
Firefox
!
"
url
:
"
http
:
/
/
getfirefox
.
com
/
"
}
)
;
let
backupFile
=
PathUtils
.
join
(
PathUtils
.
tempDir
"
bookmarks
.
json
"
)
;
let
nodeCount
=
await
PlacesBackups
.
saveBookmarksToJSONFile
(
backupFile
true
)
;
Assert
.
ok
(
nodeCount
>
0
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
backupFile
)
)
;
let
recentBackup
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
let
matches
=
PathUtils
.
filename
(
recentBackup
)
.
match
(
PlacesBackups
.
filenamesRegex
)
;
Assert
.
equal
(
matches
[
2
]
nodeCount
)
;
Assert
.
equal
(
matches
[
3
]
.
length
24
)
;
await
PlacesBackups
.
create
(
0
)
;
Assert
.
equal
(
(
await
PlacesBackups
.
getBackupFiles
(
)
)
.
length
0
)
;
await
PlacesBackups
.
create
(
)
;
Assert
.
equal
(
(
await
PlacesBackups
.
getBackupFiles
(
)
)
.
length
1
)
;
let
mostRecentBackupFile
=
await
PlacesBackups
.
getMostRecentBackup
(
)
;
Assert
.
notEqual
(
mostRecentBackupFile
null
)
;
matches
=
PathUtils
.
filename
(
recentBackup
)
.
match
(
PlacesBackups
.
filenamesRegex
)
;
Assert
.
equal
(
matches
[
2
]
nodeCount
)
;
Assert
.
equal
(
matches
[
3
]
.
length
24
)
;
await
IOUtils
.
remove
(
backupFile
)
;
await
PlacesBackups
.
create
(
0
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
;
}
)
;
