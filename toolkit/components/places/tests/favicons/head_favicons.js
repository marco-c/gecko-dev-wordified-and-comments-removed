var
Ci
=
Components
.
interfaces
;
var
Cc
=
Components
.
classes
;
var
Cr
=
Components
.
results
;
var
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
{
let
commonFile
=
do_get_file
(
"
.
.
/
head_common
.
js
"
false
)
;
let
uri
=
Services
.
io
.
newFileURI
(
commonFile
)
;
Services
.
scriptloader
.
loadSubScript
(
uri
.
spec
this
)
;
}
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
FAVICON_ERRORPAGE_URI
=
Services
.
io
.
newURI
(
"
chrome
:
/
/
global
/
skin
/
icons
/
warning
-
16
.
png
"
)
;
function
waitForFaviconChanged
(
aExpectedPageURI
aExpectedFaviconURI
aCallback
)
{
let
historyObserver
=
{
__proto__
:
NavHistoryObserver
.
prototype
onPageChanged
:
function
WFFC_onPageChanged
(
aURI
aWhat
aValue
aGUID
)
{
if
(
aWhat
!
=
Ci
.
nsINavHistoryObserver
.
ATTRIBUTE_FAVICON
)
{
return
;
}
PlacesUtils
.
history
.
removeObserver
(
this
)
;
Assert
.
ok
(
aURI
.
equals
(
aExpectedPageURI
)
)
;
Assert
.
equal
(
aValue
aExpectedFaviconURI
.
spec
)
;
do_check_guid_for_uri
(
aURI
aGUID
)
;
aCallback
(
)
;
}
}
;
PlacesUtils
.
history
.
addObserver
(
historyObserver
)
;
}
function
checkFaviconDataForPage
(
aPageURI
aExpectedMimeType
aExpectedData
aCallback
)
{
PlacesUtils
.
favicons
.
getFaviconDataForPage
(
aPageURI
function
(
aURI
aDataLen
aData
aMimeType
)
{
Assert
.
equal
(
aExpectedMimeType
aMimeType
)
;
Assert
.
ok
(
compareArrays
(
aExpectedData
aData
)
)
;
do_check_guid_for_uri
(
aPageURI
)
;
aCallback
(
)
;
}
)
;
}
function
checkFaviconMissingForPage
(
aPageURI
aCallback
)
{
PlacesUtils
.
favicons
.
getFaviconURLForPage
(
aPageURI
function
(
aURI
aDataLen
aData
aMimeType
)
{
Assert
.
ok
(
aURI
=
=
=
null
)
;
aCallback
(
)
;
}
)
;
}
function
promiseFaviconMissingForPage
(
aPageURI
)
{
return
new
Promise
(
resolve
=
>
checkFaviconMissingForPage
(
aPageURI
resolve
)
)
;
}
function
promiseFaviconChanged
(
aExpectedPageURI
aExpectedFaviconURI
)
{
return
new
Promise
(
resolve
=
>
waitForFaviconChanged
(
aExpectedPageURI
aExpectedFaviconURI
resolve
)
)
;
}
