var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
{
let
commonFile
=
do_get_file
(
"
.
.
/
head_common
.
js
"
false
)
;
let
uri
=
Services
.
io
.
newFileURI
(
commonFile
)
;
Services
.
scriptloader
.
loadSubScript
(
uri
.
spec
this
)
;
}
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
FAVICON_ERRORPAGE_URI
=
Services
.
io
.
newURI
(
"
chrome
:
/
/
global
/
skin
/
icons
/
info
.
svg
"
)
;
function
checkFaviconDataForPage
(
aPageURI
aExpectedMimeType
aExpectedData
aCallback
)
{
PlacesUtils
.
favicons
.
getFaviconDataForPage
(
aPageURI
function
(
aURI
aDataLen
aData
aMimeType
)
{
Assert
.
equal
(
aExpectedMimeType
aMimeType
)
;
Assert
.
ok
(
compareArrays
(
aExpectedData
aData
)
)
;
do_check_guid_for_uri
(
aPageURI
)
;
aCallback
(
)
;
}
)
;
}
function
checkFaviconMissingForPage
(
aPageURI
aCallback
)
{
PlacesUtils
.
favicons
.
getFaviconURLForPage
(
aPageURI
function
(
aURI
aDataLen
aData
aMimeType
)
{
Assert
.
ok
(
aURI
=
=
=
null
)
;
aCallback
(
)
;
}
)
;
}
function
promiseFaviconMissingForPage
(
aPageURI
)
{
return
new
Promise
(
resolve
=
>
checkFaviconMissingForPage
(
aPageURI
resolve
)
)
;
}
function
promiseFaviconChanged
(
aExpectedPageURI
aExpectedFaviconURI
)
{
return
PlacesTestUtils
.
waitForNotification
(
"
favicon
-
changed
"
events
=
>
events
.
some
(
e
=
>
{
if
(
e
.
url
=
=
aExpectedPageURI
.
spec
)
{
Assert
.
equal
(
e
.
faviconUrl
aExpectedFaviconURI
.
spec
)
;
do_check_guid_for_uri
(
aExpectedPageURI
e
.
pageGuid
)
;
return
true
;
}
return
false
;
}
)
"
places
"
)
;
}
