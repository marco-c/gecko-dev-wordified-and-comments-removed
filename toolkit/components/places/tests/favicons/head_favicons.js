{
let
commonFile
=
do_get_file
(
"
.
.
/
head_common
.
js
"
false
)
;
let
uri
=
Services
.
io
.
newFileURI
(
commonFile
)
;
Services
.
scriptloader
.
loadSubScript
(
uri
.
spec
this
)
;
}
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
let
uniqueFaviconId
=
0
;
async
function
checkFaviconDataForPage
(
aPageURI
aExpectedMimeType
aExpectedData
)
{
let
favicon
=
await
PlacesTestUtils
.
getFaviconForPage
(
aPageURI
)
;
Assert
.
equal
(
aExpectedMimeType
favicon
.
mimeType
)
;
if
(
aExpectedData
)
{
Assert
.
ok
(
compareArrays
(
aExpectedData
favicon
.
rawData
)
)
;
}
await
check_guid_for_uri
(
aPageURI
)
;
}
async
function
checkFaviconMissingForPage
(
aPageURI
)
{
let
favicon
=
await
PlacesTestUtils
.
getFaviconForPage
(
aPageURI
)
;
Assert
.
ok
(
!
favicon
)
;
}
function
promiseFaviconChanged
(
aExpectedPageURI
aExpectedFaviconURI
)
{
return
new
Promise
(
resolve
=
>
{
PlacesTestUtils
.
waitForNotification
(
"
favicon
-
changed
"
async
events
=
>
{
for
(
let
e
of
events
)
{
if
(
e
.
url
=
=
aExpectedPageURI
.
spec
)
{
Assert
.
equal
(
e
.
faviconUrl
aExpectedFaviconURI
.
spec
)
;
await
check_guid_for_uri
(
aExpectedPageURI
e
.
pageGuid
)
;
resolve
(
)
;
}
}
}
)
;
}
)
;
}
async
function
createFavicon
(
aFileName
)
{
let
originalFaviconFile
=
do_get_file
(
"
favicon
-
normal16
.
png
"
)
;
let
tempDir
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
let
faviconFile
=
tempDir
.
clone
(
)
;
faviconFile
.
append
(
aFileName
)
;
await
IOUtils
.
copy
(
originalFaviconFile
.
path
faviconFile
.
path
)
;
let
stream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
const
WRONLY_PERMISSION
=
0o600
;
stream
.
init
(
faviconFile
FileUtils
.
MODE_WRONLY
|
FileUtils
.
MODE_APPEND
WRONLY_PERMISSION
0
)
;
uniqueFaviconId
+
+
;
let
uniqueStr
=
"
uid
:
"
+
uniqueFaviconId
;
stream
.
write
(
uniqueStr
uniqueStr
.
length
)
;
stream
.
close
(
)
;
Assert
.
equal
(
faviconFile
.
leafName
.
substr
(
0
aFileName
.
length
)
aFileName
)
;
return
{
file
:
faviconFile
uri
:
uri
(
faviconFile
)
data
:
readFileData
(
faviconFile
)
mimeType
:
"
image
/
png
"
}
;
}
async
function
createDataURLForFavicon
(
aFavicon
)
{
let
dataURL
=
await
toDataURL
(
aFavicon
.
data
aFavicon
.
mimeType
)
;
return
uri
(
dataURL
)
;
}
function
toDataURL
(
data
type
)
{
let
blob
=
new
Blob
(
[
new
Uint8Array
(
data
)
]
{
type
}
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
reader
=
new
FileReader
(
)
;
reader
.
addEventListener
(
"
load
"
(
)
=
>
resolve
(
reader
.
result
)
)
;
reader
.
addEventListener
(
"
error
"
reject
)
;
reader
.
readAsDataURL
(
blob
)
;
}
)
;
}
