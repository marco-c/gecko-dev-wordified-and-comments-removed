"
use
strict
"
;
add_task
(
async
function
test_query_result_favicon_changed_on_child
(
)
{
const
PAGE_URI
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
test_query_result
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
test_bookmark
"
url
:
PAGE_URI
}
)
;
let
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
menuGuid
PlacesUtils
.
bookmarks
.
toolbarGuid
]
)
;
let
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
options
.
queryType
=
Ci
.
nsINavHistoryQueryOptions
.
QUERY_TYPE_BOOKMARKS
;
options
.
maxResults
=
10
;
options
.
excludeQueries
=
1
;
options
.
sortingMode
=
options
.
SORT_BY_DATE_DESCENDING
;
let
result
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
;
let
resultObserver
=
{
__proto__
:
NavHistoryResultObserver
.
prototype
containerStateChanged
(
aContainerNode
aOldState
aNewState
)
{
if
(
aNewState
=
=
Ci
.
nsINavHistoryContainerResultNode
.
STATE_OPENED
)
{
PlacesUtils
.
favicons
.
setAndFetchFaviconForPage
(
PAGE_URI
SMALLPNG_DATA_URI
false
PlacesUtils
.
favicons
.
FAVICON_LOAD_NON_PRIVATE
null
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
}
nodeIconChanged
(
aNode
)
{
if
(
PlacesUtils
.
nodeIsContainer
(
aNode
)
)
{
do_throw
(
"
The
icon
should
be
set
only
for
the
page
"
+
"
not
for
the
containing
query
.
"
)
;
}
}
}
;
result
.
addObserver
(
resultObserver
)
;
let
promise
=
promiseFaviconChanged
(
PAGE_URI
SMALLPNG_DATA_URI
)
;
result
.
root
.
containerOpen
=
true
;
await
promise
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
result
.
removeObserver
(
resultObserver
)
;
result
.
root
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_query_result_favicon_changed_not_affect_lastmodified
(
)
{
const
PAGE_URI2
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
test_query_result
"
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
test_bookmark
"
url
:
PAGE_URI2
}
)
;
let
result
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
.
menuGuid
)
;
Assert
.
equal
(
result
.
root
.
childCount
1
"
Should
have
only
one
item
in
the
query
"
)
;
Assert
.
equal
(
result
.
root
.
getChild
(
0
)
.
uri
PAGE_URI2
.
spec
"
Should
have
the
correct
child
"
)
;
Assert
.
equal
(
result
.
root
.
getChild
(
0
)
.
lastModified
PlacesUtils
.
toPRTime
(
bm
.
lastModified
)
"
Should
have
the
expected
last
modified
date
.
"
)
;
let
promise
=
promiseFaviconChanged
(
PAGE_URI2
SMALLPNG_DATA_URI
)
;
PlacesUtils
.
favicons
.
setAndFetchFaviconForPage
(
PAGE_URI2
SMALLPNG_DATA_URI
false
PlacesUtils
.
favicons
.
FAVICON_LOAD_NON_PRIVATE
null
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
await
promise
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
Assert
.
equal
(
result
.
root
.
childCount
1
"
Should
have
only
one
item
in
the
query
"
)
;
Assert
.
equal
(
result
.
root
.
getChild
(
0
)
.
uri
PAGE_URI2
.
spec
"
Should
have
the
correct
child
"
)
;
Assert
.
equal
(
result
.
root
.
getChild
(
0
)
.
lastModified
PlacesUtils
.
toPRTime
(
bm
.
lastModified
)
"
Should
not
have
changed
the
last
modified
date
.
"
)
;
result
.
root
.
containerOpen
=
false
;
}
)
;
