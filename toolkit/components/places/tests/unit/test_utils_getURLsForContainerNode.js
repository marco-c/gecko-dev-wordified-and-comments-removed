var
PU
=
PlacesUtils
;
var
hs
=
PU
.
history
;
add_task
(
async
function
test_getURLsForContainerNode_folder
(
)
{
info
(
"
*
*
*
TEST
:
folder
"
)
;
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
:
[
{
title
:
"
folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
[
{
title
:
"
inside
folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
[
{
url
:
"
place
:
sort
=
1
"
title
:
"
inside
query
"
}
]
}
]
}
]
}
)
;
var
query
=
hs
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
toolbarGuid
]
1
)
;
var
options
=
hs
.
getNewQueryOptions
(
)
;
info
(
"
Check
folder
without
uri
nodes
"
)
;
check_uri_nodes
(
query
options
0
)
;
info
(
"
Check
folder
with
uri
nodes
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
bookmarks
[
0
]
.
guid
url
:
"
http
:
/
/
www
.
mozilla
.
org
/
"
title
:
"
bookmark
"
}
)
;
check_uri_nodes
(
query
options
1
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_getURLsForContainerNode_folder_excludeItems
(
)
{
info
(
"
*
*
*
TEST
:
folder
in
an
excludeItems
root
"
)
;
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
:
[
{
title
:
"
folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
[
{
title
:
"
inside
folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
[
{
url
:
"
place
:
sort
=
1
"
title
:
"
inside
query
"
}
]
}
]
}
]
}
)
;
var
query
=
hs
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
toolbarGuid
]
1
)
;
var
options
=
hs
.
getNewQueryOptions
(
)
;
options
.
excludeItems
=
true
;
info
(
"
Check
folder
without
uri
nodes
"
)
;
check_uri_nodes
(
query
options
0
)
;
info
(
"
Check
folder
with
uri
nodes
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
bookmarks
[
0
]
.
guid
url
:
"
http
:
/
/
www
.
mozilla
.
org
/
"
title
:
"
bookmark
"
}
)
;
check_uri_nodes
(
query
options
1
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_getURLsForContainerNode_query
(
)
{
info
(
"
*
*
*
TEST
:
query
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
inside
query
"
url
:
place
:
parent
=
{
PlacesUtils
.
bookmarks
.
menuGuid
}
&
sort
=
1
}
)
;
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
menuGuid
children
:
[
{
title
:
"
inside
folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
[
{
url
:
"
place
:
sort
=
1
"
title
:
"
inside
query
"
}
]
}
]
}
)
;
var
query
=
hs
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
toolbarGuid
]
1
)
;
var
options
=
hs
.
getNewQueryOptions
(
)
;
info
(
"
Check
query
without
uri
nodes
"
)
;
check_uri_nodes
(
query
options
0
)
;
info
(
"
Check
query
with
uri
nodes
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
"
http
:
/
/
www
.
mozilla
.
org
/
"
title
:
"
bookmark
"
}
)
;
check_uri_nodes
(
query
options
1
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_getURLsForContainerNode_query_excludeItems
(
)
{
info
(
"
*
*
*
TEST
:
excludeItems
Query
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
inside
query
"
url
:
place
:
parent
=
{
PlacesUtils
.
bookmarks
.
menuGuid
}
&
sort
=
1
}
)
;
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
menuGuid
children
:
[
{
title
:
"
inside
folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
[
{
url
:
"
place
:
sort
=
1
"
title
:
"
inside
query
"
}
]
}
]
}
)
;
var
query
=
hs
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
toolbarGuid
]
1
)
;
var
options
=
hs
.
getNewQueryOptions
(
)
;
options
.
excludeItems
=
true
;
info
(
"
Check
folder
without
uri
nodes
"
)
;
check_uri_nodes
(
query
options
0
)
;
info
(
"
Check
folder
with
uri
nodes
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
"
http
:
/
/
www
.
mozilla
.
org
/
"
title
:
"
bookmark
"
}
)
;
check_uri_nodes
(
query
options
1
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_getURLsForContainerNode_query_excludeQueries
(
)
{
info
(
"
*
*
*
TEST
:
!
expandQueries
Query
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
inside
query
"
url
:
place
:
parent
=
{
PlacesUtils
.
bookmarks
.
menuGuid
}
&
sort
=
1
}
)
;
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
menuGuid
children
:
[
{
title
:
"
inside
folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
:
[
{
url
:
"
place
:
sort
=
1
"
title
:
"
inside
query
"
}
]
}
]
}
)
;
var
query
=
hs
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
toolbarGuid
]
1
)
;
var
options
=
hs
.
getNewQueryOptions
(
)
;
options
.
expandQueries
=
false
;
info
(
"
Check
folder
without
uri
nodes
"
)
;
check_uri_nodes
(
query
options
0
)
;
info
(
"
Check
folder
with
uri
nodes
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
"
http
:
/
/
www
.
mozilla
.
org
/
"
title
:
"
bookmark
"
}
)
;
check_uri_nodes
(
query
options
1
)
;
}
)
;
function
check_uri_nodes
(
aQuery
aOptions
aExpectedURINodes
)
{
var
result
=
hs
.
executeQuery
(
aQuery
aOptions
)
;
var
root
=
result
.
root
;
root
.
containerOpen
=
true
;
var
node
=
root
.
getChild
(
0
)
;
Assert
.
equal
(
PU
.
hasChildURIs
(
node
)
aExpectedURINodes
>
0
)
;
Assert
.
equal
(
PU
.
getURLsForContainerNode
(
node
)
.
length
aExpectedURINodes
)
;
root
.
containerOpen
=
false
;
}
