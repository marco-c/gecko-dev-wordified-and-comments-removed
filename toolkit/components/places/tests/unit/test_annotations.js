try
{
var
annosvc
=
Cc
[
"
mozilla
.
org
/
browser
/
annotation
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAnnotationService
)
;
}
catch
(
ex
)
{
do_throw
(
"
Could
not
get
annotation
service
\
n
"
)
;
}
add_task
(
async
function
test_execute
(
)
{
let
testURI
=
uri
(
"
http
:
/
/
mozilla
.
com
/
"
)
;
let
testItem
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
"
url
:
testURI
}
)
;
let
testItemId
=
await
PlacesUtils
.
promiseItemId
(
testItem
.
guid
)
;
let
testAnnoName
=
"
moz
-
test
-
places
/
annotations
"
;
let
testAnnoVal
=
"
test
"
;
let
earlierDate
=
new
Date
(
Date
.
now
(
)
-
1000
)
;
try
{
annosvc
.
setPageAnnotation
(
testURI
testAnnoName
testAnnoVal
0
annosvc
.
EXPIRE_NEVER
)
;
}
catch
(
ex
)
{
do_throw
(
"
unable
to
add
page
-
annotation
"
)
;
}
var
storedAnnoVal
=
annosvc
.
getPageAnnotation
(
testURI
testAnnoName
)
;
Assert
.
ok
(
testAnnoVal
=
=
=
storedAnnoVal
)
;
let
item
=
await
PlacesUtils
.
bookmarks
.
fetch
(
testItem
.
guid
)
;
Assert
.
equal
(
item
.
lastModified
.
getTime
(
)
item
.
dateAdded
.
getTime
(
)
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
item
.
guid
dateAdded
:
earlierDate
lastModified
:
earlierDate
}
)
;
try
{
annosvc
.
setItemAnnotation
(
testItemId
testAnnoName
testAnnoVal
0
annosvc
.
EXPIRE_NEVER
)
;
}
catch
(
ex
)
{
do_throw
(
"
unable
to
add
item
annotation
"
+
ex
)
;
}
let
updatedItem
=
await
PlacesUtils
.
bookmarks
.
fetch
(
testItem
.
guid
)
;
Assert
.
ok
(
updatedItem
.
lastModified
>
item
.
lastModified
)
;
try
{
var
annoVal
=
annosvc
.
getItemAnnotation
(
testItemId
testAnnoName
)
;
Assert
.
ok
(
testAnnoVal
=
=
=
annoVal
)
;
}
catch
(
ex
)
{
do_throw
(
"
unable
to
get
item
annotation
"
)
;
}
try
{
annosvc
.
getPageAnnotation
(
testURI
"
blah
"
)
;
do_throw
(
"
fetching
page
-
annotation
that
doesn
'
t
exist
should
'
ve
thrown
"
)
;
}
catch
(
ex
)
{
}
try
{
annosvc
.
getItemAnnotation
(
testURI
"
blah
"
)
;
do_throw
(
"
fetching
item
-
annotation
that
doesn
'
t
exist
should
'
ve
thrown
"
)
;
}
catch
(
ex
)
{
}
var
value
=
{
}
flags
=
{
}
exp
=
{
}
storageType
=
{
}
;
annosvc
.
getItemAnnotationInfo
(
testItemId
testAnnoName
value
flags
exp
storageType
)
;
Assert
.
equal
(
value
.
value
testAnnoVal
)
;
Assert
.
equal
(
storageType
.
value
Ci
.
nsIAnnotationService
.
TYPE_STRING
)
;
let
annoNames
=
annosvc
.
getItemAnnotationNames
(
testItemId
)
;
Assert
.
equal
(
annoNames
.
length
1
)
;
Assert
.
equal
(
annoNames
[
0
]
"
moz
-
test
-
places
/
annotations
"
)
;
var
int32Key
=
testAnnoName
+
"
/
types
/
Int32
"
;
var
int32Val
=
23
;
annosvc
.
setPageAnnotation
(
testURI
int32Key
int32Val
0
annosvc
.
EXPIRE_NEVER
)
;
value
=
{
}
flags
=
{
}
exp
=
{
}
storageType
=
{
}
;
var
storedVal
=
annosvc
.
getPageAnnotation
(
testURI
int32Key
)
;
Assert
.
ok
(
int32Val
=
=
=
storedVal
)
;
annosvc
.
setItemAnnotation
(
testItemId
int32Key
int32Val
0
annosvc
.
EXPIRE_NEVER
)
;
Assert
.
ok
(
annosvc
.
itemHasAnnotation
(
testItemId
int32Key
)
)
;
annosvc
.
getItemAnnotationInfo
(
testItemId
int32Key
value
flags
exp
storageType
)
;
Assert
.
equal
(
value
.
value
int32Val
)
;
storedVal
=
annosvc
.
getItemAnnotation
(
testItemId
int32Key
)
;
Assert
.
ok
(
int32Val
=
=
=
storedVal
)
;
var
int64Key
=
testAnnoName
+
"
/
types
/
Int64
"
;
var
int64Val
=
4294967296
;
annosvc
.
setPageAnnotation
(
testURI
int64Key
int64Val
0
annosvc
.
EXPIRE_NEVER
)
;
storedVal
=
annosvc
.
getPageAnnotation
(
testURI
int64Key
)
;
Assert
.
ok
(
int64Val
=
=
=
storedVal
)
;
annosvc
.
setItemAnnotation
(
testItemId
int64Key
int64Val
0
annosvc
.
EXPIRE_NEVER
)
;
Assert
.
ok
(
annosvc
.
itemHasAnnotation
(
testItemId
int64Key
)
)
;
annosvc
.
getItemAnnotationInfo
(
testItemId
int64Key
value
flags
exp
storageType
)
;
Assert
.
equal
(
value
.
value
int64Val
)
;
storedVal
=
annosvc
.
getItemAnnotation
(
testItemId
int64Key
)
;
Assert
.
ok
(
int64Val
=
=
=
storedVal
)
;
var
doubleKey
=
testAnnoName
+
"
/
types
/
Double
"
;
var
doubleVal
=
0
.
000002342
;
annosvc
.
setPageAnnotation
(
testURI
doubleKey
doubleVal
0
annosvc
.
EXPIRE_NEVER
)
;
storedVal
=
annosvc
.
getPageAnnotation
(
testURI
doubleKey
)
;
Assert
.
ok
(
doubleVal
=
=
=
storedVal
)
;
annosvc
.
setItemAnnotation
(
testItemId
doubleKey
doubleVal
0
annosvc
.
EXPIRE_NEVER
)
;
Assert
.
ok
(
annosvc
.
itemHasAnnotation
(
testItemId
doubleKey
)
)
;
annosvc
.
getItemAnnotationInfo
(
testItemId
doubleKey
value
flags
exp
storageType
)
;
Assert
.
equal
(
value
.
value
doubleVal
)
;
Assert
.
equal
(
storageType
.
value
Ci
.
nsIAnnotationService
.
TYPE_DOUBLE
)
;
storedVal
=
annosvc
.
getItemAnnotation
(
testItemId
doubleKey
)
;
Assert
.
ok
(
doubleVal
=
=
=
storedVal
)
;
annosvc
.
removePageAnnotation
(
testURI
int32Key
)
;
annosvc
.
setItemAnnotation
(
testItemId
testAnnoName
testAnnoVal
0
annosvc
.
EXPIRE_NEVER
)
;
testItem
=
await
PlacesUtils
.
bookmarks
.
fetch
(
testItem
.
guid
)
;
var
lastModified3
=
testItem
.
lastModified
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
testItem
.
guid
dateAdded
:
earlierDate
lastModified
:
earlierDate
}
)
;
annosvc
.
removeItemAnnotation
(
testItemId
int32Key
)
;
testItem
=
await
PlacesUtils
.
bookmarks
.
fetch
(
testItem
.
guid
)
;
var
lastModified4
=
testItem
.
lastModified
;
info
(
"
verify
that
removing
an
annotation
updates
the
last
modified
date
"
)
;
info
(
"
lastModified3
=
"
+
lastModified3
)
;
info
(
"
lastModified4
=
"
+
lastModified4
)
;
Assert
.
ok
(
is_time_ordered
(
lastModified3
lastModified4
)
)
;
Assert
.
equal
(
(
await
getItemsWithAnnotation
(
int32Key
)
)
.
length
0
)
;
Assert
.
equal
(
(
await
getPagesWithAnnotation
(
int32Key
)
)
.
length
0
)
;
var
invalidIds
=
[
-
1
0
37643
]
;
for
(
var
id
of
invalidIds
)
{
try
{
annosvc
.
setItemAnnotation
(
id
"
foo
"
"
bar
"
0
annosvc
.
EXPIRE_NEVER
)
;
do_throw
(
"
setItemAnnotation
*
should
throw
for
invalid
item
id
:
"
+
id
)
;
}
catch
(
ex
)
{
}
}
item
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
"
url
:
testURI
}
)
;
}
)
;
add_task
(
async
function
test_getAnnotationsHavingName
(
)
{
let
url
=
uri
(
"
http
:
/
/
cat
.
mozilla
.
org
"
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
cat
"
url
}
)
;
let
id
=
await
PlacesUtils
.
promiseItemId
(
bookmark
.
guid
)
;
let
folder
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
pillow
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
}
)
;
let
fid
=
await
PlacesUtils
.
promiseItemId
(
folder
.
guid
)
;
const
ANNOS
=
{
"
int
"
:
7
"
double
"
:
7
.
7
"
string
"
:
"
seven
"
}
;
for
(
let
name
in
ANNOS
)
{
PlacesUtils
.
annotations
.
setPageAnnotation
(
url
name
ANNOS
[
name
]
0
PlacesUtils
.
annotations
.
EXPIRE_NEVER
)
;
PlacesUtils
.
annotations
.
setItemAnnotation
(
id
name
ANNOS
[
name
]
0
PlacesUtils
.
annotations
.
EXPIRE_NEVER
)
;
PlacesUtils
.
annotations
.
setItemAnnotation
(
fid
name
ANNOS
[
name
]
0
PlacesUtils
.
annotations
.
EXPIRE_NEVER
)
;
}
for
(
let
name
in
ANNOS
)
{
let
results
=
PlacesUtils
.
annotations
.
getAnnotationsWithName
(
name
)
;
Assert
.
equal
(
results
.
length
3
)
;
for
(
let
result
of
results
)
{
Assert
.
equal
(
result
.
annotationName
name
)
;
Assert
.
equal
(
result
.
annotationValue
ANNOS
[
name
]
)
;
if
(
result
.
uri
)
Assert
.
ok
(
result
.
uri
.
equals
(
url
)
)
;
else
Assert
.
ok
(
result
.
itemId
>
0
)
;
if
(
result
.
itemId
!
=
-
1
)
{
if
(
result
.
uri
)
Assert
.
equal
(
result
.
itemId
id
)
;
else
Assert
.
equal
(
result
.
itemId
fid
)
;
do_check_guid_for_bookmark
(
result
.
itemId
result
.
guid
)
;
}
else
{
do_check_guid_for_uri
(
result
.
uri
result
.
guid
)
;
}
}
}
}
)
;
