const
NS_PLACES_INIT_COMPLETE_TOPIC
=
"
places
-
init
-
complete
"
;
let
gLockedConn
;
add_task
(
async
function
setup
(
)
{
let
db
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
db
.
append
(
"
places
.
sqlite
"
)
;
gLockedConn
=
Services
.
storage
.
openUnsharedDatabase
(
db
)
;
Assert
.
ok
(
db
.
exists
(
)
"
The
database
should
have
been
created
"
)
;
gLockedConn
.
executeSimpleSQL
(
"
PRAGMA
locking_mode
=
EXCLUSIVE
"
)
;
gLockedConn
.
executeSimpleSQL
(
"
PRAGMA
USER_VERSION
=
1
"
)
;
}
)
;
add_task
(
async
function
locked
(
)
{
let
resolved
=
false
;
let
promiseComplete
=
promiseTopicObserved
(
NS_PLACES_INIT_COMPLETE_TOPIC
)
.
then
(
(
)
=
>
resolved
=
true
)
;
let
history
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
createInstance
(
Ci
.
nsINavHistoryService
)
;
await
new
Promise
(
resolve
=
>
do_timeout
(
100
resolve
)
)
;
Assert
.
equal
(
resolved
false
"
The
notification
should
not
have
been
fired
yet
"
)
;
Assert
.
equal
(
history
.
databaseStatus
history
.
DATABASE_STATUS_LOCKED
)
;
await
promiseComplete
;
gLockedConn
.
close
(
)
;
let
db
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
db
.
append
(
"
places
.
sqlite
"
)
;
if
(
db
.
exists
(
)
)
{
try
{
db
.
remove
(
false
)
;
}
catch
(
e
)
{
do_print
(
"
Unable
to
remove
dummy
places
.
sqlite
"
)
;
}
}
}
)
;
