function
AutoCompleteInput
(
aSearches
)
{
this
.
searches
=
aSearches
;
}
AutoCompleteInput
.
prototype
=
{
constructor
:
AutoCompleteInput
searches
:
null
minResultsForPopup
:
0
timeout
:
10
searchParam
:
"
"
textValue
:
"
"
disableAutoComplete
:
false
completeDefaultIndex
:
false
get
searchCount
(
)
{
return
this
.
searches
.
length
;
}
getSearchAt
(
aIndex
)
{
return
this
.
searches
[
aIndex
]
;
}
onSearchBegin
(
)
{
}
onSearchComplete
(
)
{
}
popupOpen
:
false
popup
:
{
setSelectedIndex
(
aIndex
)
{
}
invalidate
(
)
{
}
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsISupports
)
|
|
iid
.
equals
(
Ci
.
nsIAutoCompletePopup
)
)
return
this
;
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
}
}
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsISupports
)
|
|
iid
.
equals
(
Ci
.
nsIAutoCompleteInput
)
)
return
this
;
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
}
}
;
async
function
ensure_results
(
uris
searchTerm
)
{
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
ensure_results_internal
(
uris
searchTerm
)
;
}
async
function
ensure_results_internal
(
uris
searchTerm
)
{
var
controller
=
Components
.
classes
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIAutoCompleteController
)
;
var
input
=
new
AutoCompleteInput
(
[
"
unifiedcomplete
"
]
)
;
controller
.
input
=
input
;
var
numSearchesStarted
=
0
;
input
.
onSearchBegin
=
function
(
)
{
numSearchesStarted
+
+
;
do_check_eq
(
numSearchesStarted
1
)
;
}
;
let
promise
=
new
Promise
(
resolve
=
>
{
input
.
onSearchComplete
=
function
(
)
{
do_check_eq
(
numSearchesStarted
1
)
;
do_check_eq
(
controller
.
searchStatus
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_MATCH
)
;
do_check_eq
(
controller
.
matchCount
uris
.
length
)
;
for
(
var
i
=
0
;
i
<
controller
.
matchCount
;
i
+
+
)
{
do_check_eq
(
controller
.
getValueAt
(
i
)
uris
[
i
]
.
spec
)
;
}
resolve
(
)
;
}
;
}
)
;
controller
.
startSearch
(
searchTerm
)
;
await
promise
;
}
try
{
var
tagssvc
=
Cc
[
"
mozilla
.
org
/
browser
/
tagging
-
service
;
1
"
]
.
getService
(
Ci
.
nsITaggingService
)
;
}
catch
(
ex
)
{
do_throw
(
"
Could
not
get
history
service
\
n
"
)
;
}
async
function
task_setCountDate
(
aURI
aCount
aDate
)
{
let
visits
=
[
]
;
for
(
let
i
=
0
;
i
<
aCount
;
i
+
+
)
{
visits
.
push
(
{
uri
:
aURI
visitDate
:
aDate
transition
:
TRANSITION_TYPED
}
)
;
}
await
PlacesTestUtils
.
addVisits
(
visits
)
;
}
async
function
setBookmark
(
aURI
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
aURI
title
:
"
bleh
"
}
)
;
}
async
function
tagURI
(
aURI
aTags
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
aURI
title
:
"
bleh
"
}
)
;
tagssvc
.
tagURI
(
aURI
aTags
)
;
}
var
uri1
=
uri
(
"
http
:
/
/
site
.
tld
/
1
"
)
;
var
uri2
=
uri
(
"
http
:
/
/
site
.
tld
/
2
"
)
;
var
uri3
=
uri
(
"
http
:
/
/
aaaaaaaaaa
/
1
"
)
;
var
uri4
=
uri
(
"
http
:
/
/
aaaaaaaaaa
/
2
"
)
;
var
d1
=
new
Date
(
Date
.
now
(
)
-
1000
*
60
*
60
)
*
1000
;
var
d2
=
new
Date
(
Date
.
now
(
)
-
1000
*
60
*
60
*
24
*
10
)
*
1000
;
var
c1
=
10
;
var
c2
=
1
;
var
tests
=
[
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
0
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c1
d2
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri1
uri2
]
"
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
1
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d2
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri2
uri1
]
"
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
2
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c2
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri1
uri2
]
"
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
3
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c2
d1
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri2
uri1
]
"
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
4
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c1
d2
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri1
uri2
]
"
site
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
5
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d2
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri2
uri1
]
"
site
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
6
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c2
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri1
uri2
]
"
site
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
7
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c2
d1
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
await
ensure_results
(
[
uri2
uri1
]
"
site
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
8
.
1a
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
await
ensure_results
(
[
uri4
uri3
]
"
a
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
8
.
1b
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
await
ensure_results
(
[
uri4
uri3
]
"
aa
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
8
.
2
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
await
ensure_results
(
[
uri4
uri3
]
"
aaa
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
8
.
3
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
await
ensure_results
(
[
uri4
uri3
]
"
aaaa
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
8
.
4
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
await
ensure_results
(
[
uri4
uri3
]
"
aaa
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
8
.
5
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
await
ensure_results
(
[
uri4
uri3
]
"
aa
"
)
;
}
async
function
(
)
{
print
(
"
TEST
-
INFO
|
Test
8
.
6
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
await
ensure_results
(
[
uri4
uri3
]
"
a
"
)
;
}
]
;
add_task
(
async
function
test_frecency
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
autoFill
"
false
)
;
do_register_cleanup
(
(
)
=
>
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
"
)
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
openpage
"
false
)
;
for
(
let
test
of
tests
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
await
test
(
)
;
}
for
(
let
type
of
[
"
history
"
"
bookmark
"
"
openpage
"
]
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
"
+
type
)
;
}
}
)
;
