function
AutoCompleteInput
(
aSearches
)
{
this
.
searches
=
aSearches
;
}
AutoCompleteInput
.
prototype
=
{
constructor
:
AutoCompleteInput
get
minResultsForPopup
(
)
{
return
0
;
}
get
timeout
(
)
{
return
10
;
}
get
searchParam
(
)
{
return
"
"
;
}
get
textValue
(
)
{
return
"
"
;
}
get
disableAutoComplete
(
)
{
return
false
;
}
get
completeDefaultIndex
(
)
{
return
false
;
}
get
searchCount
(
)
{
return
this
.
searches
.
length
;
}
getSearchAt
(
aIndex
)
{
return
this
.
searches
[
aIndex
]
;
}
onSearchBegin
(
)
{
}
onSearchComplete
(
)
{
}
get
popupOpen
(
)
{
return
false
;
}
popup
:
{
set
selectedIndex
(
aIndex
)
{
}
invalidate
(
)
{
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAutoCompletePopup
]
)
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteInput
]
)
}
;
function
ensure_results
(
expected
searchTerm
callback
)
{
let
controller
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Ci
.
nsIAutoCompleteController
)
;
let
input
=
new
AutoCompleteInput
(
[
"
unifiedcomplete
"
]
)
;
controller
.
input
=
input
;
input
.
onSearchComplete
=
function
(
)
{
Assert
.
equal
(
controller
.
searchStatus
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_MATCH
)
;
Assert
.
equal
(
controller
.
matchCount
expected
.
length
)
;
for
(
let
i
=
0
;
i
<
controller
.
matchCount
;
i
+
+
)
{
print
(
"
Testing
for
'
"
+
expected
[
i
]
.
uri
.
spec
+
"
'
got
'
"
+
controller
.
getValueAt
(
i
)
+
"
'
"
)
;
Assert
.
equal
(
controller
.
getValueAt
(
i
)
expected
[
i
]
.
uri
.
spec
)
;
Assert
.
equal
(
controller
.
getStyleAt
(
i
)
expected
[
i
]
.
style
)
;
}
callback
(
)
;
}
;
controller
.
startSearch
(
searchTerm
)
;
}
async
function
task_setCountRank
(
aURI
aCount
aRank
aSearch
aBookmark
)
{
let
visits
=
[
]
;
for
(
let
i
=
0
;
i
<
aCount
;
i
+
+
)
{
visits
.
push
(
{
uri
:
aURI
visitDate
:
d1
transition
:
TRANSITION_TYPED
}
)
;
}
await
PlacesTestUtils
.
addVisits
(
visits
)
;
let
thing
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteInput
Ci
.
nsIAutoCompletePopup
Ci
.
nsIAutoCompleteController
]
)
get
popup
(
)
{
return
thing
;
}
get
controller
(
)
{
return
thing
;
}
popupOpen
:
true
selectedIndex
:
0
getValueAt
(
)
{
return
aURI
.
spec
;
}
searchString
:
aSearch
}
;
for
(
let
i
=
0
;
i
<
aRank
;
i
+
+
)
{
Services
.
obs
.
notifyObservers
(
thing
"
autocomplete
-
will
-
enter
-
text
"
)
;
}
if
(
aBookmark
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
test_book
"
url
:
aURI
}
)
;
if
(
aBookmark
=
=
"
tag
"
)
{
PlacesUtils
.
tagging
.
tagURI
(
aURI
[
"
test_tag
"
]
)
;
}
}
}
function
doAdaptiveDecay
(
)
{
PlacesUtils
.
history
.
runInBatchMode
(
{
runBatched
(
)
{
for
(
let
i
=
0
;
i
<
10
;
i
+
+
)
{
PlacesUtils
.
history
.
QueryInterface
(
Ci
.
nsIObserver
)
.
observe
(
null
"
idle
-
daily
"
null
)
;
}
}
}
this
)
;
}
var
uri1
=
uri
(
"
http
:
/
/
site
.
tld
/
1
"
)
;
var
uri2
=
uri
(
"
http
:
/
/
site
.
tld
/
2
"
)
;
var
d1
=
new
Date
(
Date
.
now
(
)
-
1000
*
60
*
60
)
*
1000
;
var
c1
=
10
;
var
c2
=
1
;
var
s0
=
"
"
;
var
s1
=
"
si
"
;
var
s2
=
"
site
"
;
var
observer
;
function
promiseResultsCompleted
(
)
{
return
new
Promise
(
resolve
=
>
{
observer
=
{
results
:
null
search
:
null
runCount
:
-
1
observe
(
aSubject
aTopic
aData
)
{
if
(
-
-
this
.
runCount
>
0
)
return
;
ensure_results
(
this
.
results
this
.
search
resolve
)
;
Services
.
obs
.
removeObserver
(
observer
PlacesUtils
.
TOPIC_FEEDBACK_UPDATED
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
PlacesUtils
.
TOPIC_FEEDBACK_UPDATED
)
;
}
)
;
}
function
makeResult
(
aURI
aStyle
=
"
favicon
"
)
{
return
{
uri
:
aURI
style
:
aStyle
}
;
}
var
tests
=
[
async
function
(
)
{
print
(
"
Test
0
same
count
diff
rank
same
term
;
no
search
"
)
;
observer
.
results
=
[
makeResult
(
uri1
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s0
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c1
s2
)
;
await
task_setCountRank
(
uri2
c1
c2
s2
)
;
}
async
function
(
)
{
print
(
"
Test
1
same
count
diff
rank
same
term
;
no
search
"
)
;
observer
.
results
=
[
makeResult
(
uri2
)
makeResult
(
uri1
)
]
;
observer
.
search
=
s0
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c2
s2
)
;
await
task_setCountRank
(
uri2
c1
c1
s2
)
;
}
async
function
(
)
{
print
(
"
Test
2
diff
count
same
rank
same
term
;
no
search
"
)
;
observer
.
results
=
[
makeResult
(
uri1
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s0
;
observer
.
runCount
=
c1
+
c1
;
await
task_setCountRank
(
uri1
c1
c1
s2
)
;
await
task_setCountRank
(
uri2
c2
c1
s2
)
;
}
async
function
(
)
{
print
(
"
Test
3
diff
count
same
rank
same
term
;
no
search
"
)
;
observer
.
results
=
[
makeResult
(
uri2
)
makeResult
(
uri1
)
]
;
observer
.
search
=
s0
;
observer
.
runCount
=
c1
+
c1
;
await
task_setCountRank
(
uri1
c2
c1
s2
)
;
await
task_setCountRank
(
uri2
c1
c1
s2
)
;
}
async
function
(
)
{
print
(
"
Test
4
same
count
same
rank
diff
term
;
one
exact
/
one
partial
search
"
)
;
observer
.
results
=
[
makeResult
(
uri1
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c1
;
await
task_setCountRank
(
uri1
c1
c1
s1
)
;
await
task_setCountRank
(
uri2
c1
c1
s2
)
;
}
async
function
(
)
{
print
(
"
Test
5
same
count
same
rank
diff
term
;
one
exact
/
one
partial
search
"
)
;
observer
.
results
=
[
makeResult
(
uri2
)
makeResult
(
uri1
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c1
;
await
task_setCountRank
(
uri1
c1
c1
s2
)
;
await
task_setCountRank
(
uri2
c1
c1
s1
)
;
}
async
function
(
)
{
print
(
"
Test
6
same
count
diff
rank
same
term
;
both
exact
search
"
)
;
observer
.
results
=
[
makeResult
(
uri1
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c1
s1
)
;
await
task_setCountRank
(
uri2
c1
c2
s1
)
;
}
async
function
(
)
{
print
(
"
Test
7
same
count
diff
rank
same
term
;
both
exact
search
"
)
;
observer
.
results
=
[
makeResult
(
uri2
)
makeResult
(
uri1
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c2
s1
)
;
await
task_setCountRank
(
uri2
c1
c1
s1
)
;
}
async
function
(
)
{
print
(
"
Test
8
same
count
diff
rank
same
term
;
both
partial
search
"
)
;
observer
.
results
=
[
makeResult
(
uri1
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c1
s2
)
;
await
task_setCountRank
(
uri2
c1
c2
s2
)
;
}
async
function
(
)
{
print
(
"
Test
9
same
count
diff
rank
same
term
;
both
partial
search
"
)
;
observer
.
results
=
[
makeResult
(
uri2
)
makeResult
(
uri1
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c2
s2
)
;
await
task_setCountRank
(
uri2
c1
c1
s2
)
;
}
async
function
(
)
{
print
(
"
Test
10
same
count
same
rank
same
term
decay
first
;
exact
match
"
)
;
observer
.
results
=
[
makeResult
(
uri2
)
makeResult
(
uri1
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c1
;
await
task_setCountRank
(
uri1
c1
c1
s1
)
;
doAdaptiveDecay
(
)
;
await
task_setCountRank
(
uri2
c1
c1
s1
)
;
}
async
function
(
)
{
print
(
"
Test
11
same
count
same
rank
same
term
decay
second
;
exact
match
"
)
;
observer
.
results
=
[
makeResult
(
uri1
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s1
;
observer
.
runCount
=
c1
+
c1
;
await
task_setCountRank
(
uri2
c1
c1
s1
)
;
doAdaptiveDecay
(
)
;
await
task_setCountRank
(
uri1
c1
c1
s1
)
;
}
async
function
(
)
{
print
(
"
Test
12
same
count
diff
rank
same
term
;
no
search
;
history
only
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
openpage
"
false
)
;
observer
.
results
=
[
makeResult
(
uri1
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s0
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c1
s2
"
bookmark
"
)
;
await
task_setCountRank
(
uri2
c1
c2
s2
)
;
}
async
function
(
)
{
print
(
"
Test
13
same
count
diff
rank
same
term
;
no
search
;
history
only
with
tag
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
openpage
"
false
)
;
observer
.
results
=
[
makeResult
(
uri1
"
tag
"
)
makeResult
(
uri2
)
]
;
observer
.
search
=
s0
;
observer
.
runCount
=
c1
+
c2
;
await
task_setCountRank
(
uri1
c1
c1
s2
"
tag
"
)
;
await
task_setCountRank
(
uri2
c1
c2
s2
)
;
}
]
;
add_task
(
async
function
test_adaptive
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
autoFill
"
false
)
;
do_register_cleanup
(
(
)
=
>
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
"
)
)
;
for
(
let
test
of
tests
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
let
types
=
[
"
history
"
"
bookmark
"
"
openpage
"
]
;
for
(
let
type
of
types
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
"
+
type
)
;
}
await
PlacesTestUtils
.
clearHistory
(
)
;
let
resultsCompletedPromise
=
promiseResultsCompleted
(
)
;
await
test
(
)
;
await
resultsCompletedPromise
;
}
}
)
;
