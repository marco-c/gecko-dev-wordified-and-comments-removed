add_task
(
async
function
test_lazyBookmarksObservers
(
)
{
const
TEST_URI
=
Services
.
io
.
newURI
(
"
http
:
/
/
moz
.
org
/
"
)
;
let
promise
=
PromiseUtils
.
defer
(
)
;
let
observer
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsINavBookmarkObserver
]
)
onBeginUpdateBatch
(
)
{
}
onEndUpdateBatch
(
)
{
}
onItemAdded
(
aItemId
aParentId
aIndex
aItemType
aURI
)
{
do_check_true
(
aURI
.
equals
(
TEST_URI
)
)
;
PlacesUtils
.
removeLazyBookmarkObserver
(
this
)
;
promise
.
resolve
(
)
;
}
onItemRemoved
(
)
{
}
onItemChanged
(
)
{
}
onItemVisited
(
)
{
}
onItemMoved
(
)
{
}
}
;
PlacesUtils
.
addLazyBookmarkObserver
(
observer
)
;
PlacesUtils
.
removeLazyBookmarkObserver
(
observer
)
;
PlacesUtils
.
addLazyBookmarkObserver
(
observer
)
;
PlacesUtils
.
bookmarks
;
PlacesUtils
.
addLazyBookmarkObserver
(
observer
)
;
PlacesUtils
.
removeLazyBookmarkObserver
(
observer
)
;
try
{
PlacesUtils
.
bookmarks
.
removeObserver
(
observer
)
;
do_throw
(
"
Trying
to
remove
a
nonexisting
observer
should
throw
!
"
)
;
}
catch
(
ex
)
{
}
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
TEST_URI
title
:
"
Bookmark
title
"
}
)
;
await
promise
;
}
)
;
