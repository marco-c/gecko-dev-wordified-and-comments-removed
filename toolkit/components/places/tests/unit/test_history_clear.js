var
mDBConn
=
DBConn
(
)
;
function
promiseOnClearHistoryObserved
(
)
{
return
new
Promise
(
resolve
=
>
{
let
historyObserver
=
{
onBeginUpdateBatch
(
)
{
}
onEndUpdateBatch
(
)
{
}
onVisit
(
)
{
}
onTitleChanged
(
)
{
}
onDeleteURI
(
aURI
)
{
}
onPageChanged
(
)
{
}
onDeleteVisits
(
)
{
}
onClearHistory
(
)
{
PlacesUtils
.
history
.
removeObserver
(
this
false
)
;
resolve
(
)
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsINavHistoryObserver
]
)
}
PlacesUtils
.
history
.
addObserver
(
historyObserver
)
;
}
)
;
}
var
promiseInit
;
function
run_test
(
)
{
promiseInit
=
promiseTopicObserved
(
PlacesUtils
.
TOPIC_INIT_COMPLETE
)
;
run_next_test
(
)
;
}
add_task
(
async
function
test_history_clear
(
)
{
await
promiseInit
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
uri
(
"
http
:
/
/
typed
.
mozilla
.
org
/
"
)
transition
:
TRANSITION_TYPED
}
{
uri
:
uri
(
"
http
:
/
/
link
.
mozilla
.
org
/
"
)
transition
:
TRANSITION_LINK
}
{
uri
:
uri
(
"
http
:
/
/
download
.
mozilla
.
org
/
"
)
transition
:
TRANSITION_DOWNLOAD
}
{
uri
:
uri
(
"
http
:
/
/
redir_temp
.
mozilla
.
org
/
"
)
transition
:
TRANSITION_REDIRECT_TEMPORARY
referrer
:
"
http
:
/
/
link
.
mozilla
.
org
/
"
}
{
uri
:
uri
(
"
http
:
/
/
redir_perm
.
mozilla
.
org
/
"
)
transition
:
TRANSITION_REDIRECT_PERMANENT
referrer
:
"
http
:
/
/
link
.
mozilla
.
org
/
"
}
]
)
;
PlacesUtils
.
bookmarks
.
insertBookmark
(
PlacesUtils
.
unfiledBookmarksFolderId
uri
(
"
place
:
folder
=
4
"
)
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
shortcut
"
)
;
PlacesUtils
.
annotations
.
setPageAnnotation
(
uri
(
"
http
:
/
/
download
.
mozilla
.
org
/
"
)
"
never
"
"
never
"
0
PlacesUtils
.
annotations
.
EXPIRE_NEVER
)
;
PlacesUtils
.
bookmarks
.
insertBookmark
(
PlacesUtils
.
unfiledBookmarksFolderId
uri
(
"
http
:
/
/
typed
.
mozilla
.
org
/
"
)
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
bookmark
"
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
uri
(
"
http
:
/
/
typed
.
mozilla
.
org
/
"
)
transition
:
TRANSITION_BOOKMARK
}
{
uri
:
uri
(
"
http
:
/
/
frecency
.
mozilla
.
org
/
"
)
transition
:
TRANSITION_LINK
}
]
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
let
promiseWaitClearHistory
=
promiseOnClearHistoryObserved
(
)
;
PlacesUtils
.
history
.
clear
(
)
;
await
promiseWaitClearHistory
;
do_check_eq
(
0
PlacesUtils
.
history
.
hasHistoryEntries
)
;
await
promiseTopicObserved
(
PlacesUtils
.
TOPIC_EXPIRATION_FINISHED
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
let
stmt
=
mDBConn
.
createStatement
(
"
SELECT
h
.
id
FROM
moz_places
h
WHERE
h
.
frecency
>
0
"
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
SELECT
h
.
id
FROM
moz_places
h
WHERE
h
.
frecency
<
0
AND
EXISTS
(
SELECT
id
FROM
moz_bookmarks
WHERE
fk
=
h
.
id
)
LIMIT
1
)
;
do_check_true
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
"
SELECT
id
FROM
moz_places
WHERE
visit_count
<
>
0
LIMIT
1
"
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
"
SELECT
*
FROM
(
SELECT
id
FROM
moz_historyvisits
LIMIT
1
)
"
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
SELECT
h
.
id
FROM
moz_places
h
WHERE
url_hash
NOT
BETWEEN
hash
(
'
place
'
'
prefix_lo
'
)
AND
hash
(
'
place
'
'
prefix_hi
'
)
AND
NOT
EXISTS
(
SELECT
id
FROM
moz_bookmarks
WHERE
fk
=
h
.
id
)
LIMIT
1
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
SELECT
1
FROM
moz_pages_w_icons
LEFT
JOIN
moz_places
h
ON
url_hash
=
page_url_hash
AND
url
=
page_url
WHERE
h
.
id
ISNULL
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
SELECT
1
FROM
moz_icons
WHERE
id
NOT
IN
(
SELECT
icon_id
FROM
moz_icons_to_pages
)
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
SELECT
a
.
id
FROM
moz_annos
a
WHERE
NOT
EXISTS
(
SELECT
id
FROM
moz_places
WHERE
id
=
a
.
place_id
)
LIMIT
1
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
SELECT
i
.
place_id
FROM
moz_inputhistory
i
WHERE
NOT
EXISTS
(
SELECT
id
FROM
moz_places
WHERE
id
=
i
.
place_id
)
LIMIT
1
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
stmt
=
mDBConn
.
createStatement
(
SELECT
h
.
id
FROM
moz_places
h
WHERE
url_hash
BETWEEN
hash
(
'
place
'
'
prefix_lo
'
)
AND
hash
(
'
place
'
'
prefix_hi
'
)
AND
h
.
frecency
<
>
0
LIMIT
1
)
;
do_check_false
(
stmt
.
executeStep
(
)
)
;
stmt
.
finalize
(
)
;
}
)
;
