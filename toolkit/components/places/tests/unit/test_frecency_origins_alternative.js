let
altFrecency
=
PlacesFrecencyRecalculator
.
originsAlternativeFrecencyInfo
;
async
function
restartRecalculator
(
)
{
let
subject
=
{
}
;
PlacesFrecencyRecalculator
.
observe
(
subject
"
test
-
alternative
-
frecency
-
init
"
"
"
)
;
await
subject
.
promise
;
}
async
function
getAllOrigins
(
)
{
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
execute
(
SELECT
*
FROM
moz_origins
)
;
Assert
.
greater
(
rows
.
length
0
)
;
return
rows
.
map
(
r
=
>
(
{
host
:
r
.
getResultByName
(
"
host
"
)
frecency
:
r
.
getResultByName
(
"
frecency
"
)
recalc_frecency
:
r
.
getResultByName
(
"
recalc_frecency
"
)
alt_frecency
:
r
.
getResultByName
(
"
alt_frecency
"
)
recalc_alt_frecency
:
r
.
getResultByName
(
"
recalc_alt_frecency
"
)
}
)
)
;
}
add_setup
(
async
function
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
"
https
:
/
/
testdomain1
.
moz
.
org
"
"
https
:
/
/
testdomain2
.
moz
.
org
"
"
https
:
/
/
testdomain3
.
moz
.
org
"
]
)
;
registerCleanupFunction
(
PlacesUtils
.
history
.
clear
)
;
}
)
;
add_task
(
async
function
test_normal_init
(
)
{
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
altFrecency
.
pref
)
"
Check
the
pref
is
disabled
by
default
"
)
;
Assert
.
ok
(
ObjectUtils
.
isEmpty
(
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
)
"
Check
there
'
s
no
variables
stored
"
)
;
}
)
;
add_task
(
{
pref_set
:
[
[
altFrecency
.
pref
true
]
]
}
async
function
test_enable_init
(
)
{
await
PlacesUtils
.
withConnectionWrapper
(
"
Set
recalc_alt_frecency
to
0
"
async
db
=
>
{
await
db
.
execute
(
UPDATE
moz_origins
SET
recalc_alt_frecency
=
0
)
;
}
)
;
let
promiseInitialRecalc
=
TestUtils
.
topicObserved
(
"
test
-
origins
-
alternative
-
frecency
-
first
-
recalc
"
)
;
await
restartRecalculator
(
)
;
let
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
1
)
"
All
the
entries
have
been
marked
for
recalc
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
altFrecency
.
pref
)
"
Check
the
pref
is
enabled
"
)
;
Assert
.
equal
(
(
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
)
.
version
altFrecency
.
version
"
Check
the
algorithm
version
has
been
stored
"
)
;
await
promiseInitialRecalc
;
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
0
)
"
All
the
entries
have
been
recalculated
"
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
alt_frecency
>
0
)
"
All
the
entries
have
been
recalculated
"
)
;
Assert
.
ok
(
PlacesFrecencyRecalculator
.
isRecalculationPending
"
Recalculation
should
be
pending
"
)
;
}
)
;
add_task
(
{
pref_set
:
[
[
altFrecency
.
pref
true
]
]
}
async
function
test_different_version
(
)
{
let
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
0
)
"
All
the
entries
should
not
need
recalculation
"
)
;
let
variables
=
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
;
variables
.
version
=
999
;
await
PlacesUtils
.
metadata
.
set
(
altFrecency
.
key
variables
)
;
let
promiseInitialRecalc
=
TestUtils
.
topicObserved
(
"
test
-
origins
-
alternative
-
frecency
-
first
-
recalc
"
)
;
await
restartRecalculator
(
)
;
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
1
)
"
All
the
entries
have
been
marked
for
recalc
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
altFrecency
.
pref
)
"
Check
the
pref
is
enabled
"
)
;
Assert
.
deepEqual
(
(
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
)
.
version
altFrecency
.
version
"
Check
the
algorithm
version
has
been
stored
"
)
;
await
promiseInitialRecalc
;
}
)
;
add_task
(
{
pref_set
:
[
[
altFrecency
.
pref
true
]
]
}
async
function
test_different_variables
(
)
{
let
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
0
)
"
All
the
entries
should
not
need
recalculation
"
)
;
let
variables
=
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
;
Assert
.
greater
(
Object
.
keys
(
variables
)
.
length
1
)
;
Assert
.
ok
(
"
version
"
in
variables
"
At
least
the
version
is
always
present
"
)
;
await
PlacesUtils
.
metadata
.
set
(
altFrecency
.
key
{
version
:
altFrecency
.
version
someVar
:
1
}
)
;
let
promiseInitialRecalc
=
TestUtils
.
topicObserved
(
"
test
-
origins
-
alternative
-
frecency
-
first
-
recalc
"
)
;
await
restartRecalculator
(
)
;
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
1
)
"
All
the
entries
have
been
marked
for
recalc
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
altFrecency
.
pref
)
"
Check
the
pref
is
enabled
"
)
;
Assert
.
deepEqual
(
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
variables
"
Check
the
algorithm
variables
have
been
stored
"
)
;
await
promiseInitialRecalc
;
}
)
;
add_task
(
async
function
test_disable
(
)
{
let
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
0
)
"
All
the
entries
should
not
need
recalculation
"
)
;
Assert
.
equal
(
(
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
)
.
version
altFrecency
.
version
"
Check
the
algorithm
version
has
been
stored
"
)
;
await
restartRecalculator
(
)
;
origins
=
await
getAllOrigins
(
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
recalc_alt_frecency
=
=
0
)
"
The
entries
not
have
been
marked
for
recalc
"
)
;
Assert
.
ok
(
origins
.
every
(
o
=
>
o
.
alt_frecency
=
=
=
null
)
"
All
the
alt_frecency
values
should
have
been
nullified
"
)
;
Assert
.
ok
(
ObjectUtils
.
isEmpty
(
await
PlacesUtils
.
metadata
.
get
(
altFrecency
.
key
Object
.
create
(
null
)
)
)
"
Check
the
algorithm
variables
has
been
removed
"
)
;
}
)
;
