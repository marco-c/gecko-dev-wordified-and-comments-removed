add_task
(
async
function
test_get_child_index
(
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
"
http
:
/
/
test
.
mozilla
.
org
/
bookmark
/
"
title
:
"
Test
bookmark
"
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
http
:
/
/
test
.
mozilla
.
org
/
unfiled
/
"
title
:
"
Unfiled
bookmark
"
}
)
;
let
unfiledNode
=
getNodeAt
(
PlacesUtils
.
bookmarks
.
unfiledGuid
0
)
;
if
(
!
unfiledNode
)
do_throw
(
"
Unable
to
find
bookmark
in
hierarchy
!
"
)
;
Assert
.
equal
(
unfiledNode
.
title
"
Unfiled
bookmark
"
)
;
let
hs
=
PlacesUtils
.
history
;
let
query
=
hs
.
getNewQuery
(
)
;
query
.
setParents
(
[
PlacesUtils
.
bookmarks
.
menuGuid
]
)
;
let
options
=
hs
.
getNewQueryOptions
(
)
;
options
.
queryType
=
options
.
QUERY_TYPE_BOOKMARKS
;
let
root
=
hs
.
executeQuery
(
query
options
)
.
root
;
root
.
containerOpen
=
true
;
for
(
let
i
=
0
;
i
<
root
.
childCount
;
i
+
+
)
{
let
node
=
root
.
getChild
(
i
)
;
print
(
"
Now
testing
:
"
+
node
.
title
)
;
Assert
.
equal
(
root
.
getChildIndex
(
node
)
i
)
;
}
try
{
root
.
getChildIndex
(
unfiledNode
)
;
do_throw
(
"
Searching
for
an
invalid
node
should
have
thrown
.
"
)
;
}
catch
(
ex
)
{
print
(
"
We
correctly
got
an
exception
.
"
)
;
}
root
.
containerOpen
=
false
;
}
)
;
function
getNodeAt
(
aFolderGuid
aIndex
)
{
let
hs
=
PlacesUtils
.
history
;
let
query
=
hs
.
getNewQuery
(
)
;
query
.
setParents
(
[
aFolderGuid
]
)
;
let
options
=
hs
.
getNewQueryOptions
(
)
;
options
.
queryType
=
options
.
QUERY_TYPE_BOOKMARKS
;
let
root
=
hs
.
executeQuery
(
query
options
)
.
root
;
root
.
containerOpen
=
true
;
if
(
root
.
childCount
<
aIndex
)
do_throw
(
"
Not
enough
children
to
find
bookmark
!
"
)
;
let
node
=
root
.
getChild
(
aIndex
)
;
root
.
containerOpen
=
false
;
return
node
;
}
