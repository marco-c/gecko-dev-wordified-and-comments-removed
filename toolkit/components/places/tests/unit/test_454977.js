var
visit_count
=
0
;
async
function
task_add_visit
(
aURI
aVisitType
)
{
let
visitId
;
let
visitsPromise
=
PlacesTestUtils
.
waitForNotification
(
"
onVisits
"
visits
=
>
{
visitId
=
visits
[
0
]
.
visitId
;
let
{
uri
}
=
visits
[
0
]
;
return
uri
.
equals
(
aURI
)
;
}
"
history
"
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
aURI
transition
:
aVisitType
}
]
)
;
if
(
aVisitType
!
=
TRANSITION_EMBED
)
{
await
visitsPromise
;
}
if
(
aVisitType
!
=
0
&
&
aVisitType
!
=
TRANSITION_EMBED
&
&
aVisitType
!
=
TRANSITION_FRAMED_LINK
&
&
aVisitType
!
=
TRANSITION_DOWNLOAD
&
&
aVisitType
!
=
TRANSITION_RELOAD
)
{
visit_count
+
+
;
}
if
(
visitId
>
0
)
{
let
sql
=
"
SELECT
place_id
FROM
moz_historyvisits
WHERE
id
=
?
1
"
;
let
stmt
=
DBConn
(
)
.
createStatement
(
sql
)
;
stmt
.
bindByIndex
(
0
visitId
)
;
Assert
.
ok
(
stmt
.
executeStep
(
)
)
;
let
placeId
=
stmt
.
getInt64
(
0
)
;
stmt
.
finalize
(
)
;
Assert
.
ok
(
placeId
>
0
)
;
return
placeId
;
}
return
0
;
}
function
check_results
(
aExpectedCount
aExpectedCountWithHidden
)
{
let
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
minVisits
=
visit_count
;
query
.
maxVisits
=
visit_count
;
let
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
options
.
queryType
=
Ci
.
nsINavHistoryQueryOptions
.
QUERY_TYPE_HISTORY
;
let
root
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
.
root
;
root
.
containerOpen
=
true
;
Assert
.
equal
(
root
.
childCount
aExpectedCount
)
;
root
.
containerOpen
=
false
;
options
.
includeHidden
=
true
;
root
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
.
root
;
root
.
containerOpen
=
true
;
Assert
.
equal
(
root
.
childCount
aExpectedCountWithHidden
)
;
root
.
containerOpen
=
false
;
}
add_task
(
async
function
test_execute
(
)
{
const
TEST_URI
=
uri
(
"
http
:
/
/
test
.
mozilla
.
org
/
"
)
;
await
task_add_visit
(
TEST_URI
TRANSITION_EMBED
)
;
check_results
(
0
0
)
;
let
placeId
=
await
task_add_visit
(
TEST_URI
TRANSITION_FRAMED_LINK
)
;
check_results
(
0
1
)
;
Assert
.
equal
(
(
await
task_add_visit
(
TEST_URI
TRANSITION_TYPED
)
)
placeId
)
;
check_results
(
1
1
)
;
Assert
.
equal
(
(
await
task_add_visit
(
TEST_URI
TRANSITION_RELOAD
)
)
placeId
)
;
check_results
(
1
1
)
;
Assert
.
equal
(
(
await
task_add_visit
(
TEST_URI
TRANSITION_DOWNLOAD
)
)
placeId
)
;
check_results
(
1
1
)
;
await
task_add_visit
(
TEST_URI
TRANSITION_EMBED
)
;
check_results
(
1
1
)
;
}
)
;
