var
histsvc
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Ci
.
nsINavHistoryService
)
;
var
bmsvc
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
bookmarks
-
service
;
1
"
]
.
getService
(
Ci
.
nsINavBookmarksService
)
;
var
searchTerm
=
"
"
;
var
decoded
=
"
http
:
/
/
www
.
foobar
.
com
/
"
+
searchTerm
+
"
/
"
;
var
url
=
uri
(
decoded
)
;
function
AutoCompleteInput
(
aSearches
)
{
this
.
searches
=
aSearches
;
}
AutoCompleteInput
.
prototype
=
{
constructor
:
AutoCompleteInput
searches
:
null
minResultsForPopup
:
0
timeout
:
10
searchParam
:
"
"
textValue
:
"
"
disableAutoComplete
:
false
completeDefaultIndex
:
false
get
searchCount
(
)
{
return
this
.
searches
.
length
;
}
getSearchAt
(
aIndex
)
{
return
this
.
searches
[
aIndex
]
;
}
onSearchBegin
(
)
{
}
onSearchComplete
(
)
{
}
popupOpen
:
false
popup
:
{
setSelectedIndex
(
aIndex
)
{
}
invalidate
(
)
{
}
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsISupports
)
|
|
iid
.
equals
(
Ci
.
nsIAutoCompletePopup
)
)
return
this
;
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
}
}
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsISupports
)
|
|
iid
.
equals
(
Ci
.
nsIAutoCompleteInput
)
)
return
this
;
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
}
}
function
run_test
(
)
{
do_test_pending
(
)
;
PlacesTestUtils
.
addVisits
(
url
)
.
then
(
continue_test
)
;
}
function
continue_test
(
)
{
var
controller
=
Components
.
classes
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIAutoCompleteController
)
;
var
input
=
new
AutoCompleteInput
(
[
"
unifiedcomplete
"
]
)
;
controller
.
input
=
input
;
var
numSearchesStarted
=
0
;
input
.
onSearchBegin
=
function
(
)
{
numSearchesStarted
+
+
;
do_check_eq
(
numSearchesStarted
1
)
;
}
;
input
.
onSearchComplete
=
function
(
)
{
do_check_eq
(
numSearchesStarted
1
)
;
do_check_eq
(
controller
.
searchStatus
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_MATCH
)
;
do_check_eq
(
controller
.
matchCount
1
)
;
do_check_eq
(
controller
.
getValueAt
(
0
)
url
.
spec
)
;
do_test_finished
(
)
;
}
;
controller
.
startSearch
(
searchTerm
)
;
}
