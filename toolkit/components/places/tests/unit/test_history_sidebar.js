let
nowObj
=
new
Date
(
)
;
function
toMidnight
(
inputDate
)
{
let
date
=
new
Date
(
inputDate
)
;
date
.
setHours
(
0
)
;
date
.
setMinutes
(
0
)
;
date
.
setSeconds
(
0
)
;
date
.
setMilliseconds
(
0
)
;
return
date
;
}
async
function
addNormalizedVisit
(
aURI
aTime
aDayOffset
)
{
let
dateObj
=
toMidnight
(
aTime
)
;
let
previousDateObj
=
new
Date
(
dateObj
.
getTime
(
)
+
aDayOffset
*
86400000
)
;
let
DSTCorrection
=
(
dateObj
.
getTimezoneOffset
(
)
-
previousDateObj
.
getTimezoneOffset
(
)
)
*
60
*
1000
;
let
PRTimeWithOffset
=
(
previousDateObj
.
getTime
(
)
-
DSTCorrection
)
*
1000
;
info
(
"
Adding
visit
to
"
+
aURI
.
spec
+
"
at
"
+
PlacesUtils
.
toDate
(
PRTimeWithOffset
)
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
aURI
visitDate
:
PRTimeWithOffset
}
)
;
}
function
openRootForResultType
(
resultType
)
{
let
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
options
.
resultType
=
resultType
;
let
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
let
result
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
;
let
root
=
result
.
root
;
root
.
containerOpen
=
true
;
return
result
;
}
function
daysForMonthsAgo
(
months
)
{
let
oldTime
=
toMidnight
(
new
Date
(
)
)
;
oldTime
.
setDate
(
1
)
;
oldTime
.
setMonth
(
nowObj
.
getMonth
(
)
-
months
)
;
return
parseInt
(
(
nowObj
-
oldTime
)
/
(
1000
*
60
*
60
*
24
)
)
+
2
;
}
let
containers
=
[
{
label
:
"
Today
"
offset
:
0
visible
:
true
}
{
label
:
"
Yesterday
"
offset
:
-
1
visible
:
true
}
{
label
:
"
Last
7
days
"
offset
:
-
2
visible
:
true
}
{
label
:
"
This
month
"
offset
:
-
8
visible
:
nowObj
.
getDate
(
)
>
8
}
{
label
:
"
"
offset
:
-
daysForMonthsAgo
(
0
)
visible
:
true
}
{
label
:
"
"
offset
:
-
daysForMonthsAgo
(
1
)
visible
:
true
}
{
label
:
"
"
offset
:
-
daysForMonthsAgo
(
2
)
visible
:
true
}
{
label
:
"
"
offset
:
-
daysForMonthsAgo
(
3
)
visible
:
true
}
{
label
:
"
"
offset
:
-
daysForMonthsAgo
(
4
)
visible
:
true
}
{
label
:
"
Older
than
6
months
"
offset
:
-
daysForMonthsAgo
(
5
)
visible
:
true
}
]
;
let
visibleContainers
=
containers
.
filter
(
container
=
>
container
.
visible
)
;
add_task
(
async
function
task_fill_history
(
)
{
info
(
"
*
*
*
TEST
Fill
History
"
)
;
for
(
let
i
=
0
;
i
<
containers
.
length
;
i
+
+
)
{
let
container
=
containers
[
i
]
;
let
testURI
=
uri
(
"
http
:
/
/
mirror
"
+
i
+
"
.
mozilla
.
com
/
b
"
)
;
await
addNormalizedVisit
(
testURI
nowObj
container
.
offset
)
;
testURI
=
uri
(
"
http
:
/
/
mirror
"
+
i
+
"
.
mozilla
.
com
/
a
"
)
;
await
addNormalizedVisit
(
testURI
nowObj
container
.
offset
)
;
testURI
=
uri
(
"
http
:
/
/
mirror
"
+
i
+
"
.
google
.
com
/
b
"
)
;
await
addNormalizedVisit
(
testURI
nowObj
container
.
offset
)
;
testURI
=
uri
(
"
http
:
/
/
mirror
"
+
i
+
"
.
google
.
com
/
a
"
)
;
await
addNormalizedVisit
(
testURI
nowObj
container
.
offset
)
;
check_visit
(
container
.
offset
)
;
}
let
root
=
openRootForResultType
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_SITE_QUERY
)
.
root
;
let
cc
=
root
.
childCount
;
info
(
"
Found
containers
:
"
)
;
let
previousLabels
=
[
]
;
for
(
let
i
=
0
;
i
<
cc
;
i
+
+
)
{
let
container
=
visibleContainers
[
i
]
;
let
node
=
root
.
getChild
(
i
)
;
info
(
node
.
title
)
;
if
(
container
.
label
)
Assert
.
equal
(
node
.
title
container
.
label
)
;
Assert
.
ok
(
!
previousLabels
.
includes
(
node
.
title
)
)
;
previousLabels
.
push
(
node
.
title
)
;
}
Assert
.
equal
(
cc
visibleContainers
.
length
)
;
root
.
containerOpen
=
false
;
}
)
;
function
check_visit
(
aOffset
)
{
let
root
=
openRootForResultType
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_SITE_QUERY
)
.
root
;
let
unexpected
=
[
]
;
switch
(
aOffset
)
{
case
0
:
unexpected
=
[
"
Yesterday
"
"
Last
7
days
"
"
This
month
"
]
;
break
;
case
-
1
:
unexpected
=
[
"
Last
7
days
"
"
This
month
"
]
;
break
;
case
-
2
:
unexpected
=
[
"
This
month
"
]
;
break
;
default
:
}
info
(
"
Found
containers
:
"
)
;
let
cc
=
root
.
childCount
;
for
(
let
i
=
0
;
i
<
cc
;
i
+
+
)
{
let
node
=
root
.
getChild
(
i
)
;
info
(
node
.
title
)
;
Assert
.
ok
(
!
unexpected
.
includes
(
node
.
title
)
)
;
}
root
.
containerOpen
=
false
;
}
add_task
(
async
function
test_RESULTS_AS_DATE_SITE_QUERY
(
)
{
info
(
"
*
*
*
TEST
RESULTS_AS_DATE_SITE_QUERY
"
)
;
let
result
=
openRootForResultType
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_SITE_QUERY
)
;
let
root
=
result
.
root
;
let
dayNode
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
0
)
)
;
dayNode
.
containerOpen
=
true
;
Assert
.
equal
(
dayNode
.
childCount
2
)
;
let
site1
=
PlacesUtils
.
asContainer
(
dayNode
.
getChild
(
0
)
)
;
Assert
.
equal
(
site1
.
title
"
mirror0
.
google
.
com
"
)
;
let
site2
=
PlacesUtils
.
asContainer
(
dayNode
.
getChild
(
1
)
)
;
Assert
.
equal
(
site2
.
title
"
mirror0
.
mozilla
.
com
"
)
;
site1
.
containerOpen
=
true
;
Assert
.
equal
(
site1
.
childCount
2
)
;
let
site1visit
=
site1
.
getChild
(
0
)
;
Assert
.
equal
(
site1visit
.
uri
"
http
:
/
/
mirror0
.
google
.
com
/
a
"
)
;
result
.
sortingMode
=
Ci
.
nsINavHistoryQueryOptions
.
SORT_BY_TITLE_DESCENDING
;
dayNode
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
0
)
)
;
dayNode
.
containerOpen
=
true
;
Assert
.
equal
(
dayNode
.
childCount
2
)
;
site1
=
PlacesUtils
.
asContainer
(
dayNode
.
getChild
(
0
)
)
;
Assert
.
equal
(
site1
.
title
"
mirror0
.
google
.
com
"
)
;
site2
=
PlacesUtils
.
asContainer
(
dayNode
.
getChild
(
1
)
)
;
Assert
.
equal
(
site2
.
title
"
mirror0
.
mozilla
.
com
"
)
;
site1
.
containerOpen
=
true
;
Assert
.
equal
(
site1
.
childCount
2
)
;
site1visit
=
site1
.
getChild
(
0
)
;
Assert
.
equal
(
site1visit
.
uri
"
http
:
/
/
mirror0
.
google
.
com
/
b
"
)
;
site1
.
containerOpen
=
false
;
dayNode
.
containerOpen
=
false
;
root
.
containerOpen
=
false
;
}
)
;
add_task
(
async
function
test_RESULTS_AS_DATE_QUERY
(
)
{
info
(
"
*
*
*
TEST
RESULTS_AS_DATE_QUERY
"
)
;
let
result
=
openRootForResultType
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_QUERY
)
;
let
root
=
result
.
root
;
let
cc
=
root
.
childCount
;
Assert
.
equal
(
cc
visibleContainers
.
length
)
;
info
(
"
Found
containers
:
"
)
;
for
(
let
i
=
0
;
i
<
cc
;
i
+
+
)
{
let
container
=
visibleContainers
[
i
]
;
let
node
=
root
.
getChild
(
i
)
;
info
(
node
.
title
)
;
if
(
container
.
label
)
Assert
.
equal
(
node
.
title
container
.
label
)
;
}
let
dayNode
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
0
)
)
;
dayNode
.
containerOpen
=
true
;
Assert
.
equal
(
dayNode
.
childCount
4
)
;
let
visit1
=
dayNode
.
getChild
(
0
)
;
Assert
.
equal
(
visit1
.
uri
"
http
:
/
/
mirror0
.
google
.
com
/
a
"
)
;
let
visit2
=
dayNode
.
getChild
(
3
)
;
Assert
.
equal
(
visit2
.
uri
"
http
:
/
/
mirror0
.
mozilla
.
com
/
b
"
)
;
result
.
sortingMode
=
Ci
.
nsINavHistoryQueryOptions
.
SORT_BY_TITLE_DESCENDING
;
dayNode
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
0
)
)
;
dayNode
.
containerOpen
=
true
;
Assert
.
equal
(
dayNode
.
childCount
4
)
;
visit1
=
dayNode
.
getChild
(
0
)
;
Assert
.
equal
(
visit1
.
uri
"
http
:
/
/
mirror0
.
mozilla
.
com
/
b
"
)
;
visit2
=
dayNode
.
getChild
(
3
)
;
Assert
.
equal
(
visit2
.
uri
"
http
:
/
/
mirror0
.
google
.
com
/
a
"
)
;
dayNode
.
containerOpen
=
false
;
root
.
containerOpen
=
false
;
}
)
;
add_task
(
async
function
test_RESULTS_AS_SITE_QUERY
(
)
{
info
(
"
*
*
*
TEST
RESULTS_AS_SITE_QUERY
"
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
url
:
"
http
:
/
/
foobar
"
title
:
"
"
}
)
;
let
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
options
.
resultType
=
options
.
RESULTS_AS_SITE_QUERY
;
options
.
sortingMode
=
options
.
SORT_BY_TITLE_ASCENDING
;
let
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
let
result
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
;
let
root
=
result
.
root
;
root
.
containerOpen
=
true
;
Assert
.
equal
(
root
.
childCount
containers
.
length
*
2
)
;
let
siteNode
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
6
)
)
;
Assert
.
equal
(
siteNode
.
title
"
mirror3
.
google
.
com
"
)
;
siteNode
.
containerOpen
=
true
;
Assert
.
equal
(
siteNode
.
childCount
2
)
;
let
visitNode
=
siteNode
.
getChild
(
0
)
;
Assert
.
equal
(
visitNode
.
uri
"
http
:
/
/
mirror3
.
google
.
com
/
a
"
)
;
result
.
sortingMode
=
options
.
SORT_BY_TITLE_DESCENDING
;
siteNode
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
6
)
)
;
Assert
.
equal
(
siteNode
.
title
"
mirror3
.
google
.
com
"
)
;
siteNode
.
containerOpen
=
true
;
Assert
.
equal
(
siteNode
.
childCount
2
)
;
let
visit
=
siteNode
.
getChild
(
0
)
;
Assert
.
equal
(
visit
.
uri
"
http
:
/
/
mirror3
.
google
.
com
/
b
"
)
;
siteNode
.
containerOpen
=
false
;
root
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
.
guid
)
;
}
)
;
async
function
test_date_liveupdate
(
aResultType
)
{
let
midnight
=
toMidnight
(
nowObj
)
;
let
root
=
openRootForResultType
(
aResultType
)
.
root
;
Assert
.
equal
(
root
.
childCount
visibleContainers
.
length
)
;
await
PlacesUtils
.
history
.
removeByFilter
(
{
beginDate
:
new
Date
(
midnight
.
getTime
(
)
)
endDate
:
new
Date
(
Date
.
now
(
)
)
}
)
;
Assert
.
equal
(
root
.
childCount
visibleContainers
.
length
-
1
)
;
let
last7Days
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
1
)
)
;
last7Days
.
containerOpen
=
true
;
await
addNormalizedVisit
(
uri
(
"
http
:
/
/
www
.
mozilla
.
org
/
"
)
nowObj
0
)
;
Assert
.
equal
(
root
.
childCount
visibleContainers
.
length
)
;
last7Days
.
containerOpen
=
false
;
root
.
containerOpen
=
false
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
url
:
"
place
:
type
=
"
+
aResultType
title
:
"
"
}
)
;
root
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
.
toolbarGuid
)
.
root
;
Assert
.
equal
(
root
.
childCount
1
)
;
let
dateContainer
=
PlacesUtils
.
asContainer
(
root
.
getChild
(
0
)
)
;
dateContainer
.
containerOpen
=
true
;
Assert
.
equal
(
dateContainer
.
childCount
visibleContainers
.
length
)
;
await
PlacesUtils
.
history
.
removeByFilter
(
{
beginDate
:
new
Date
(
midnight
.
getTime
(
)
)
endDate
:
new
Date
(
Date
.
now
(
)
)
}
)
;
Assert
.
equal
(
dateContainer
.
childCount
visibleContainers
.
length
-
1
)
;
await
addNormalizedVisit
(
uri
(
"
http
:
/
/
www
.
mozilla
.
org
/
"
)
nowObj
0
)
;
Assert
.
equal
(
dateContainer
.
childCount
visibleContainers
.
length
)
;
dateContainer
.
containerOpen
=
false
;
root
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
.
guid
)
;
}
add_task
(
async
function
test_history_sidebar
(
)
{
await
test_date_liveupdate
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_SITE_QUERY
)
;
await
test_date_liveupdate
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_DATE_QUERY
)
;
}
)
;
