function
assert_date_eq
(
a
b
)
{
if
(
typeof
a
!
=
"
number
"
)
{
a
=
PlacesUtils
.
toPRTime
(
a
)
;
}
if
(
typeof
b
!
=
"
number
"
)
{
b
=
PlacesUtils
.
toPRTime
(
b
)
;
}
Assert
.
equal
(
a
b
"
The
dates
should
match
"
)
;
}
add_task
(
async
function
test_bookmarkLastModified
(
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
"
http
:
/
/
www
.
mozilla
.
org
/
"
title
:
"
itemTitle
"
}
)
;
let
guid
=
bookmark
.
guid
;
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
let
dateAdded
=
PlacesUtils
.
toPRTime
(
bookmark
.
dateAdded
)
;
assert_date_eq
(
dateAdded
bookmark
.
lastModified
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
lastModified
:
PlacesUtils
.
toDate
(
dateAdded
+
1000
)
}
)
;
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
assert_date_eq
(
bookmark
.
lastModified
dateAdded
+
1000
)
;
Assert
.
ok
(
bookmark
.
dateAdded
<
bookmark
.
lastModified
"
Date
added
should
be
earlier
than
last
modified
.
"
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
dateAdded
:
PlacesUtils
.
toDate
(
dateAdded
+
2000
)
}
)
;
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
assert_date_eq
(
bookmark
.
dateAdded
dateAdded
+
2000
)
;
assert_date_eq
(
bookmark
.
dateAdded
bookmark
.
lastModified
)
;
let
origLastModified
=
bookmark
.
lastModified
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
dateAdded
:
PlacesUtils
.
toDate
(
dateAdded
-
10000
)
}
)
;
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
assert_date_eq
(
bookmark
.
dateAdded
dateAdded
-
10000
)
;
assert_date_eq
(
bookmark
.
lastModified
origLastModified
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
guid
)
;
}
)
;
