function
folder_id
(
aQuery
)
{
var
hs
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Ci
.
nsINavHistoryService
)
;
dump
(
"
Checking
query
'
"
+
aQuery
+
"
'
\
n
"
)
;
var
options
=
{
}
;
var
queries
=
{
}
;
var
size
=
{
}
;
hs
.
queryStringToQueries
(
aQuery
queries
size
options
)
;
var
result
=
hs
.
executeQueries
(
queries
.
value
size
.
value
options
.
value
)
;
var
root
=
result
.
root
;
root
.
containerOpen
=
true
;
Assert
.
ok
(
root
.
hasChildren
)
;
var
folderID
=
root
.
getChild
(
0
)
.
parent
.
itemId
;
root
.
containerOpen
=
false
;
return
folderID
;
}
add_task
(
async
function
test_history_string_to_query
(
)
{
const
QUERIES
=
[
"
place
:
folder
=
PLACES_ROOT
"
"
place
:
folder
=
BOOKMARKS_MENU
"
"
place
:
folder
=
TAGS
"
"
place
:
folder
=
UNFILED_BOOKMARKS
"
"
place
:
folder
=
TOOLBAR
"
]
;
const
FOLDER_IDS
=
[
PlacesUtils
.
placesRootId
PlacesUtils
.
bookmarksMenuFolderId
PlacesUtils
.
tagsFolderId
PlacesUtils
.
unfiledBookmarksFolderId
PlacesUtils
.
toolbarFolderId
]
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
bmf
"
url
:
"
http
:
/
/
example
.
com
/
bmf
/
"
}
)
;
var
ts
=
Cc
[
"
mozilla
.
org
/
browser
/
tagging
-
service
;
1
"
]
.
getService
(
Ci
.
nsITaggingService
)
;
ts
.
tagURI
(
uri
(
"
http
:
/
/
www
.
example
.
com
/
"
)
[
"
tag
"
]
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
ubf
"
url
:
"
http
:
/
/
example
.
com
/
ubf
/
"
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
tf
"
url
:
"
http
:
/
/
example
.
com
/
tf
/
"
}
)
;
for
(
var
i
=
0
;
i
<
QUERIES
.
length
;
i
+
+
)
{
var
result
=
folder_id
(
QUERIES
[
i
]
)
;
dump
(
"
expected
"
+
FOLDER_IDS
[
i
]
+
"
got
"
+
result
+
"
\
n
"
)
;
Assert
.
equal
(
FOLDER_IDS
[
i
]
result
)
;
}
}
)
;
