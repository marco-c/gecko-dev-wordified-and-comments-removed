function
folder_id
(
aQuery
)
{
info
(
"
Checking
query
'
"
+
aQuery
+
"
'
\
n
"
)
;
let
query
=
{
}
options
=
{
}
;
PlacesUtils
.
history
.
queryStringToQuery
(
aQuery
query
options
)
;
var
result
=
PlacesUtils
.
history
.
executeQuery
(
query
.
value
options
.
value
)
;
var
root
=
result
.
root
;
root
.
containerOpen
=
true
;
Assert
.
ok
(
root
.
hasChildren
)
;
var
folderID
=
root
.
getChild
(
0
)
.
parent
.
itemId
;
root
.
containerOpen
=
false
;
return
folderID
;
}
add_task
(
async
function
test_history_string_to_query
(
)
{
const
QUERIES
=
[
"
place
:
folder
=
PLACES_ROOT
"
"
place
:
folder
=
BOOKMARKS_MENU
"
"
place
:
folder
=
TAGS
"
"
place
:
folder
=
UNFILED_BOOKMARKS
"
"
place
:
folder
=
TOOLBAR
"
]
;
const
FOLDER_IDS
=
[
PlacesUtils
.
placesRootId
PlacesUtils
.
bookmarksMenuFolderId
PlacesUtils
.
tagsFolderId
PlacesUtils
.
unfiledBookmarksFolderId
PlacesUtils
.
toolbarFolderId
]
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
title
:
"
bmf
"
url
:
"
http
:
/
/
example
.
com
/
bmf
/
"
}
)
;
PlacesUtils
.
tagging
.
tagURI
(
uri
(
"
http
:
/
/
www
.
example
.
com
/
"
)
[
"
tag
"
]
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
ubf
"
url
:
"
http
:
/
/
example
.
com
/
ubf
/
"
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
tf
"
url
:
"
http
:
/
/
example
.
com
/
tf
/
"
}
)
;
for
(
let
i
=
0
;
i
<
QUERIES
.
length
;
i
+
+
)
{
let
result
=
folder_id
(
QUERIES
[
i
]
)
;
Assert
.
equal
(
FOLDER_IDS
[
i
]
result
)
;
}
}
)
;
