var
as
=
PlacesUtils
.
annotations
;
const
TEST_URL
=
"
http
:
/
/
test
.
mozilla
.
org
/
"
;
add_task
(
async
function
test_setAnnotationsFor
(
)
{
let
testURI
=
uri
(
TEST_URL
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
test
"
url
:
testURI
}
)
;
let
itemId
=
await
PlacesUtils
.
promiseItemId
(
bookmark
.
guid
)
;
var
testAnnos
=
[
{
name
:
"
testAnno
/
test0
"
flags
:
0
value
:
"
test0
"
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
}
{
name
:
"
testAnno
/
test1
"
flags
:
0
value
:
"
test1
"
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
}
{
name
:
"
testAnno
/
test2
"
flags
:
0
value
:
"
test2
"
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
}
{
name
:
"
testAnno
/
test3
"
flags
:
0
value
:
0
expires
:
Ci
.
nsIAnnotationService
.
EXPIRE_NEVER
}
]
;
PlacesUtils
.
setAnnotationsForItem
(
itemId
testAnnos
)
;
testAnnos
.
forEach
(
function
(
anno
)
{
Assert
.
ok
(
as
.
itemHasAnnotation
(
itemId
anno
.
name
)
)
;
Assert
.
equal
(
as
.
getItemAnnotation
(
itemId
anno
.
name
)
anno
.
value
)
;
}
)
;
PlacesUtils
.
setAnnotationsForURI
(
testURI
testAnnos
)
;
testAnnos
.
forEach
(
function
(
anno
)
{
Assert
.
ok
(
as
.
pageHasAnnotation
(
testURI
anno
.
name
)
)
;
Assert
.
equal
(
as
.
getPageAnnotation
(
testURI
anno
.
name
)
anno
.
value
)
;
}
)
;
testAnnos
[
0
]
.
value
=
null
;
testAnnos
[
1
]
.
value
=
undefined
;
delete
testAnnos
[
2
]
.
value
;
delete
testAnnos
[
3
]
.
value
;
PlacesUtils
.
setAnnotationsForItem
(
itemId
testAnnos
)
;
testAnnos
.
forEach
(
function
(
anno
)
{
Assert
.
ok
(
!
as
.
itemHasAnnotation
(
itemId
anno
.
name
)
)
;
Assert
.
ok
(
as
.
pageHasAnnotation
(
testURI
anno
.
name
)
)
;
}
)
;
PlacesUtils
.
setAnnotationsForURI
(
testURI
testAnnos
)
;
testAnnos
.
forEach
(
function
(
anno
)
{
Assert
.
ok
(
!
as
.
pageHasAnnotation
(
testURI
anno
.
name
)
)
;
}
)
;
}
)
;
