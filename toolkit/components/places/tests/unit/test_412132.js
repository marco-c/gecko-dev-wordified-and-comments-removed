const
TEST_URL0
=
"
http
:
/
/
example
.
com
/
"
;
const
TEST_URL1
=
"
http
:
/
/
example
.
com
/
1
"
;
const
TEST_URL2
=
"
http
:
/
/
example
.
com
/
2
"
;
add_task
(
async
function
changeuri_unvisited_bookmark
(
)
{
do_print
(
"
After
changing
URI
of
bookmark
frecency
of
bookmark
'
s
"
+
"
original
URI
should
be
zero
if
original
URI
is
unvisited
and
"
+
"
no
longer
bookmarked
.
"
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
bookmark
title
"
url
:
TEST_URL1
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
Assert
.
notEqual
(
frecencyForUrl
(
TEST_URL1
)
0
"
Bookmarked
=
>
frecency
of
URI
should
be
!
=
0
"
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
url
:
TEST_URL2
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
Assert
.
equal
(
frecencyForUrl
(
TEST_URL1
)
0
"
Unvisited
URI
no
longer
bookmarked
=
>
frecency
should
=
0
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
add_task
(
async
function
changeuri_visited_bookmark
(
)
{
do_print
(
"
After
changing
URI
of
bookmark
frecency
of
bookmark
'
s
"
+
"
original
URI
should
not
be
zero
if
original
URI
is
visited
.
"
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
bookmark
title
"
url
:
TEST_URL1
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
Assert
.
notEqual
(
frecencyForUrl
(
TEST_URL1
)
0
"
Bookmarked
=
>
frecency
of
URI
should
be
!
=
0
"
)
;
await
PlacesTestUtils
.
addVisits
(
TEST_URL1
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
url
:
TEST_URL2
}
)
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
Assert
.
notEqual
(
frecencyForUrl
(
TEST_URL1
)
0
"
*
Visited
*
URI
no
longer
bookmarked
=
>
frecency
should
!
=
0
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
add_task
(
async
function
changeuri_bookmark_still_bookmarked
(
)
{
do_print
(
"
After
changing
URI
of
bookmark
frecency
of
bookmark
'
s
"
+
"
original
URI
should
not
be
zero
if
original
URI
is
still
"
+
"
bookmarked
.
"
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
bookmark
1
title
"
url
:
TEST_URL1
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
bookmark
2
title
"
url
:
TEST_URL1
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
Assert
.
notEqual
(
frecencyForUrl
(
TEST_URL1
)
0
"
Bookmarked
=
>
frecency
of
URI
should
be
!
=
0
"
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
url
:
TEST_URL2
}
)
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
do_print
(
"
URI
still
bookmarked
=
>
frecency
should
!
=
0
"
)
;
do_check_neq
(
frecencyForUrl
(
TEST_URL2
)
0
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
add_task
(
async
function
changeuri_nonexistent_bookmark
(
)
{
await
Assert
.
rejects
(
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
"
ABCDEDFGHIJK
"
url
:
TEST_URL2
}
)
/
No
bookmarks
found
for
the
provided
GUID
/
"
Changing
the
URI
of
a
non
-
existent
bookmark
should
fail
.
"
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
bookmark
title
"
url
:
TEST_URL0
}
)
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
.
guid
)
;
await
Assert
.
rejects
(
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bookmark
.
guid
url
:
TEST_URL2
}
)
/
No
bookmarks
found
for
the
provided
GUID
/
"
Changing
the
URI
of
a
non
-
existent
bookmark
should
fail
.
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
