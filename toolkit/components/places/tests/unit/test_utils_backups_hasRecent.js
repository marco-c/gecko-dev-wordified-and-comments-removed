const
NUMBER_OF_BACKUPS
=
10
;
async
function
createFakeBackup
(
date
backupsFolderPath
)
{
let
backupFilePath
=
PathUtils
.
join
(
backupsFolderPath
PlacesBackups
.
getFilenameForDate
(
date
)
)
;
await
IOUtils
.
write
(
backupFilePath
new
Uint8Array
(
)
)
;
return
backupFilePath
;
}
add_task
(
async
function
test_hasRecentBackup
(
)
{
let
backupFolderPath
=
await
PlacesBackups
.
getBackupFolder
(
)
;
Assert
.
ok
(
!
(
await
PlacesBackups
.
hasRecentBackup
(
)
)
"
Check
no
recent
backup
"
)
;
await
createFakeBackup
(
new
Date
(
Date
.
now
(
)
-
4
*
86400
)
backupFolderPath
)
;
Assert
.
ok
(
!
(
await
PlacesBackups
.
hasRecentBackup
(
)
)
"
Check
no
recent
backup
"
)
;
PlacesBackups
.
invalidateCache
(
)
;
await
createFakeBackup
(
new
Date
(
Date
.
now
(
)
-
2
*
86400
)
backupFolderPath
)
;
Assert
.
ok
(
await
PlacesBackups
.
hasRecentBackup
(
)
"
Check
has
recent
backup
"
)
;
PlacesBackups
.
invalidateCache
(
)
;
try
{
await
IOUtils
.
remove
(
backupFolderPath
{
recursive
:
true
}
)
;
}
catch
(
ex
)
{
info
(
"
Unable
to
cleanup
the
backups
test
folder
"
)
;
}
}
)
;
