add_task
(
async
function
test_brokenFolderShortcut
(
)
{
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
[
{
url
:
"
http
:
/
/
1
.
moz
.
org
/
"
title
:
"
Bookmark
1
"
}
{
url
:
"
place
:
folder
=
1234
"
title
:
"
Shortcut
1
"
}
{
url
:
"
place
:
folder
=
-
1
"
title
:
"
Shortcut
2
"
}
{
url
:
"
http
:
/
/
2
.
moz
.
org
/
"
title
:
"
Bookmark
2
"
}
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
uri
(
(
"
http
:
/
/
3
.
moz
.
org
/
"
)
)
)
;
let
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
PlacesUtils
.
unfiledBookmarksFolderId
]
1
)
;
let
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
let
root
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
.
root
;
root
.
containerOpen
=
true
;
do_check_eq
(
root
.
childCount
4
)
;
let
shortcut
=
root
.
getChild
(
1
)
;
do_check_eq
(
shortcut
.
uri
"
place
:
folder
=
1234
"
)
;
PlacesUtils
.
asContainer
(
shortcut
)
;
shortcut
.
containerOpen
=
true
;
do_check_eq
(
shortcut
.
childCount
0
)
;
shortcut
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmarks
[
1
]
)
;
do_check_eq
(
root
.
childCount
3
)
;
shortcut
=
root
.
getChild
(
1
)
;
do_check_eq
(
shortcut
.
uri
"
place
:
folder
=
-
1
"
)
;
PlacesUtils
.
asContainer
(
shortcut
)
;
shortcut
.
containerOpen
=
true
;
do_check_eq
(
shortcut
.
childCount
0
)
;
shortcut
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmarks
[
2
]
)
;
do_check_eq
(
root
.
childCount
2
)
;
root
.
containerOpen
=
false
;
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
1234
]
1
)
;
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
root
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
.
root
;
root
.
containerOpen
=
true
;
do_check_eq
(
root
.
childCount
0
)
;
root
.
containerOpen
=
false
;
query
=
PlacesUtils
.
history
.
getNewQuery
(
)
;
query
.
setFolders
(
[
-
1
]
1
)
;
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
root
=
PlacesUtils
.
history
.
executeQuery
(
query
options
)
.
root
;
root
.
containerOpen
=
true
;
do_check_eq
(
root
.
childCount
0
)
;
root
.
containerOpen
=
false
;
}
)
;
