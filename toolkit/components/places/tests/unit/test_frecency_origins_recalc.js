add_task
(
async
function
test
(
)
{
const
now
=
new
Date
(
)
;
const
host
=
"
mozilla
.
org
"
;
const
url
=
https
:
/
/
{
host
}
/
test
/
;
await
PlacesTestUtils
.
addVisits
(
[
{
url
visitDate
:
now
}
{
url
visitDate
:
new
Date
(
new
Date
(
)
.
setDate
(
now
.
getDate
(
)
-
30
)
)
}
]
)
;
Assert
.
equal
(
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
recalc_frecency
"
{
host
}
)
1
"
Frecency
should
be
calculated
"
)
;
await
TestUtils
.
waitForCondition
(
async
(
)
=
>
(
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
recalc_alt_frecency
"
{
host
}
)
)
=
=
1
"
Alt
frecency
should
be
calculated
"
)
;
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
let
alt_frecency
=
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
alt_frecency
"
{
host
}
)
;
let
frecency
=
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
frecency
"
{
host
}
)
;
await
PlacesUtils
.
history
.
removeVisitsByFilter
(
{
beginDate
:
new
Date
(
now
.
valueOf
(
)
-
10000
)
endDate
:
new
Date
(
now
.
valueOf
(
)
+
10000
)
}
)
;
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
Assert
.
equal
(
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
recalc_frecency
"
{
host
}
)
0
"
Should
have
been
calculated
"
)
;
Assert
.
greater
(
frecency
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
frecency
"
{
host
}
)
"
frecency
should
have
decreased
"
)
;
Assert
.
equal
(
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
recalc_alt_frecency
"
{
host
}
)
0
"
Should
have
been
calculated
"
)
;
Assert
.
greater
(
alt_frecency
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
alt_frecency
"
{
host
}
)
"
alternative
frecency
should
have
decreased
"
)
;
const
url2
=
https
:
/
/
{
host
}
/
second
/
;
await
PlacesTestUtils
.
addVisits
(
url2
)
;
await
PlacesUtils
.
history
.
remove
(
url
)
;
Assert
.
equal
(
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
recalc_frecency
"
{
host
}
)
1
"
Frecency
should
be
calculated
"
)
;
Assert
.
equal
(
await
PlacesTestUtils
.
getDatabaseValue
(
"
moz_origins
"
"
recalc_alt_frecency
"
{
host
}
)
1
"
Alt
frecency
should
be
calculated
"
)
;
}
)
;
