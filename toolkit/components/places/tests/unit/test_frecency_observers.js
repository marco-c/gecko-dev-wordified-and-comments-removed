add_task
(
async
function
test_InsertVisitedURIs_UpdateFrecency_and_History_InsertPlace
(
)
{
let
url
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
a
"
)
;
Cc
[
"
mozilla
.
org
/
browser
/
download
-
history
;
1
"
]
.
getService
(
Ci
.
nsIDownloadHistory
)
.
addDownload
(
url
)
;
await
Promise
.
all
(
[
onFrecencyChanged
(
url
)
onFrecencyChanged
(
url
)
]
)
;
}
)
;
add_task
(
async
function
test_nsNavHistory_UpdateFrecency
(
)
{
let
url
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
b
"
)
;
let
promise
=
onFrecencyChanged
(
url
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
title
:
"
test
"
}
)
;
await
promise
;
}
)
;
add_task
(
async
function
test_nsNavHistory_invalidateFrecencies_somePages
(
)
{
let
url
=
Services
.
io
.
newURI
(
"
http
:
/
/
test
-
nsNavHistory
-
invalidateFrecencies
-
somePages
.
com
/
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
title
:
"
test
"
}
)
;
PlacesUtils
.
history
.
removePagesFromHost
(
url
.
host
false
)
;
await
onFrecencyChanged
(
url
)
;
}
)
;
add_task
(
async
function
test_nsNavHistory_invalidateFrecencies_allPages
(
)
{
await
Promise
.
all
(
[
onManyFrecenciesChanged
(
)
PlacesTestUtils
.
clearHistory
(
)
]
)
;
}
)
;
add_task
(
async
function
test_nsNavHistory_DecayFrecency_and_nsNavHistory_FixInvalidFrecencies
(
)
{
PlacesUtils
.
history
.
QueryInterface
(
Ci
.
nsIObserver
)
.
observe
(
null
"
idle
-
daily
"
"
"
)
;
await
Promise
.
all
(
[
onManyFrecenciesChanged
(
)
onManyFrecenciesChanged
(
)
]
)
;
}
)
;
function
onFrecencyChanged
(
expectedURI
)
{
return
new
Promise
(
resolve
=
>
{
let
obs
=
new
NavHistoryObserver
(
)
;
obs
.
onFrecencyChanged
=
(
uri
newFrecency
guid
hidden
visitDate
)
=
>
{
PlacesUtils
.
history
.
removeObserver
(
obs
)
;
Assert
.
ok
(
!
!
uri
)
;
Assert
.
ok
(
uri
.
equals
(
expectedURI
)
)
;
resolve
(
)
;
}
;
PlacesUtils
.
history
.
addObserver
(
obs
)
;
}
)
;
}
function
onManyFrecenciesChanged
(
)
{
return
new
Promise
(
resolve
=
>
{
let
obs
=
new
NavHistoryObserver
(
)
;
obs
.
onManyFrecenciesChanged
=
(
)
=
>
{
PlacesUtils
.
history
.
removeObserver
(
obs
)
;
Assert
.
ok
(
true
)
;
resolve
(
)
;
}
;
PlacesUtils
.
history
.
addObserver
(
obs
)
;
}
)
;
}
