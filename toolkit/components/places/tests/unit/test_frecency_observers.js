add_task
(
async
function
test_InsertVisitedURIs_UpdateFrecency_and_History_InsertPlace
(
)
{
let
url
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
a
"
)
;
let
promise
=
onRankingChanged
(
)
;
await
PlacesUtils
.
history
.
insert
(
{
url
visits
:
[
{
transition
:
PlacesUtils
.
history
.
TRANSITIONS
.
DOWNLOAD
}
]
}
)
;
await
promise
;
}
)
;
add_task
(
async
function
test_nsNavHistory_UpdateFrecency
(
)
{
let
url
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
b
"
)
;
let
promise
=
onRankingChanged
(
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
title
:
"
test
"
}
)
;
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
await
promise
;
}
)
;
add_task
(
async
function
test_invalidateFrecencies
(
)
{
let
url
=
Services
.
io
.
newURI
(
"
http
:
/
/
test
-
invalidateFrecencies
.
com
/
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
title
:
"
test
"
}
)
;
let
promise
=
onRankingChanged
(
)
;
await
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
url
.
host
}
)
;
await
promise
;
}
)
;
add_task
(
async
function
test_clear
(
)
{
await
Promise
.
all
(
[
onRankingChanged
(
)
PlacesUtils
.
history
.
clear
(
)
]
)
;
}
)
;
add_task
(
async
function
test_nsNavHistory_decayFrecency
(
)
{
PlacesFrecencyRecalculator
.
observe
(
null
"
idle
-
daily
"
"
"
)
;
await
Promise
.
all
(
[
onRankingChanged
(
)
]
)
;
}
)
;
add_task
(
async
function
test_nsNavHistory_decayFrecency
(
)
{
await
Promise
.
all
(
[
onRankingChanged
(
)
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
]
)
;
}
)
;
function
onRankingChanged
(
)
{
return
PlacesTestUtils
.
waitForNotification
(
"
pages
-
rank
-
changed
"
(
)
=
>
true
"
places
"
)
;
}
