var
transitions
=
[
TRANSITION_LINK
TRANSITION_TYPED
TRANSITION_BOOKMARK
TRANSITION_EMBED
TRANSITION_FRAMED_LINK
TRANSITION_REDIRECT_PERMANENT
TRANSITION_REDIRECT_TEMPORARY
TRANSITION_DOWNLOAD
]
;
function
runQuery
(
aResultType
)
{
let
options
=
PlacesUtils
.
history
.
getNewQueryOptions
(
)
;
options
.
resultType
=
aResultType
;
let
root
=
PlacesUtils
.
history
.
executeQuery
(
PlacesUtils
.
history
.
getNewQuery
(
)
options
)
.
root
;
root
.
containerOpen
=
true
;
let
cc
=
root
.
childCount
;
Assert
.
equal
(
cc
transitions
.
length
-
2
)
;
for
(
let
i
=
0
;
i
<
cc
;
i
+
+
)
{
let
node
=
root
.
getChild
(
i
)
;
Assert
.
notEqual
(
node
.
uri
.
substr
(
6
1
)
TRANSITION_EMBED
)
;
Assert
.
notEqual
(
node
.
uri
.
substr
(
6
1
)
TRANSITION_FRAMED_LINK
)
;
}
root
.
containerOpen
=
false
;
}
add_task
(
async
function
test_execute
(
)
{
for
(
let
transition
of
transitions
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
"
+
transition
+
"
.
mozilla
.
org
/
"
)
transition
}
)
;
}
runQuery
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_VISIT
)
;
runQuery
(
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_URI
)
;
}
)
;
