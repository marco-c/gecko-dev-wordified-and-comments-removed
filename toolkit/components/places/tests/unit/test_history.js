var
histsvc
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Ci
.
nsINavHistoryService
)
;
function
uri_in_db
(
aURI
)
{
var
options
=
histsvc
.
getNewQueryOptions
(
)
;
options
.
maxResults
=
1
;
options
.
resultType
=
options
.
RESULTS_AS_URI
;
var
query
=
histsvc
.
getNewQuery
(
)
;
query
.
uri
=
aURI
;
var
result
=
histsvc
.
executeQuery
(
query
options
)
;
var
root
=
result
.
root
;
root
.
containerOpen
=
true
;
var
cc
=
root
.
childCount
;
root
.
containerOpen
=
false
;
return
cc
=
=
1
;
}
add_task
(
async
function
test_execute
(
)
{
Assert
.
equal
(
histsvc
.
databaseStatus
histsvc
.
DATABASE_STATUS_CREATE
)
;
var
testURI
=
uri
(
"
http
:
/
/
mozilla
.
com
"
)
;
await
PlacesTestUtils
.
addVisits
(
testURI
)
;
var
options
=
histsvc
.
getNewQueryOptions
(
)
;
options
.
sortingMode
=
options
.
SORT_BY_DATE_DESCENDING
;
options
.
maxResults
=
1
;
options
.
resultType
=
options
.
RESULTS_AS_VISIT
;
var
query
=
histsvc
.
getNewQuery
(
)
;
var
result
=
histsvc
.
executeQuery
(
query
options
)
;
var
root
=
result
.
root
;
root
.
containerOpen
=
true
;
var
cc
=
root
.
childCount
;
for
(
var
i
=
0
;
i
<
cc
;
+
+
i
)
{
var
node
=
root
.
getChild
(
i
)
;
Assert
.
equal
(
node
.
uri
testURI
.
spec
)
;
Assert
.
equal
(
node
.
type
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_URI
)
;
}
root
.
containerOpen
=
false
;
var
testURI2
=
uri
(
"
http
:
/
/
google
.
com
/
"
)
;
await
PlacesTestUtils
.
addVisits
(
testURI
)
;
await
PlacesTestUtils
.
addVisits
(
testURI2
)
;
options
.
maxResults
=
5
;
options
.
resultType
=
options
.
RESULTS_AS_URI
;
query
.
minVisits
=
0
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
2
)
;
result
.
root
.
containerOpen
=
false
;
query
.
minVisits
=
1
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
2
)
;
result
.
root
.
containerOpen
=
false
;
query
.
minVisits
=
2
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
1
)
;
query
.
minVisits
=
3
;
result
.
root
.
containerOpen
=
false
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
0
)
;
result
.
root
.
containerOpen
=
false
;
query
.
minVisits
=
-
1
;
query
.
maxVisits
=
-
1
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
2
)
;
result
.
root
.
containerOpen
=
false
;
query
.
maxVisits
=
0
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
0
)
;
result
.
root
.
containerOpen
=
false
;
query
.
maxVisits
=
1
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
1
)
;
result
.
root
.
containerOpen
=
false
;
query
.
maxVisits
=
2
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
2
)
;
result
.
root
.
containerOpen
=
false
;
query
.
maxVisits
=
3
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
Assert
.
equal
(
result
.
root
.
childCount
2
)
;
result
.
root
.
containerOpen
=
false
;
Assert
.
ok
(
!
histsvc
.
historyDisabled
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
example
.
com
"
)
title
:
"
title
"
}
)
;
let
placeInfo
=
await
PlacesUtils
.
history
.
fetch
(
"
http
:
/
/
example
.
com
"
)
;
Assert
.
equal
(
placeInfo
.
title
"
title
"
)
;
Assert
.
ok
(
uri_in_db
(
testURI
)
)
;
var
db
=
histsvc
.
DBConnection
;
var
q
=
"
SELECT
id
FROM
moz_bookmarks
"
;
var
statement
;
try
{
statement
=
db
.
createStatement
(
q
)
;
}
catch
(
ex
)
{
do_throw
(
"
bookmarks
table
does
not
have
id
field
schema
is
too
old
!
"
)
;
}
finally
{
statement
.
finalize
(
)
;
}
await
PlacesTestUtils
.
addVisits
(
uri
(
"
http
:
/
/
mozilla
.
com
"
)
)
;
options
=
histsvc
.
getNewQueryOptions
(
)
;
query
=
histsvc
.
getNewQuery
(
)
;
query
.
searchTerms
=
"
moz
"
;
result
=
histsvc
.
executeQuery
(
query
options
)
;
root
=
result
.
root
;
root
.
containerOpen
=
true
;
Assert
.
ok
(
root
.
childCount
>
0
)
;
root
.
containerOpen
=
false
;
}
)
;
