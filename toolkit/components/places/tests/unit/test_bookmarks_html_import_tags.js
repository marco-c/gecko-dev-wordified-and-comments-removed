var
bookmarkData
=
[
{
uri
:
uri
(
"
http
:
/
/
www
.
toastytech
.
com
"
)
title
:
"
Nathan
'
s
Toasty
Technology
Page
"
tags
:
[
"
technology
"
"
personal
"
"
retro
"
]
}
{
uri
:
uri
(
"
http
:
/
/
www
.
reddit
.
com
"
)
title
:
"
reddit
:
the
front
page
of
the
internet
"
tags
:
[
"
social
media
"
"
news
"
"
humour
"
]
}
{
uri
:
uri
(
"
http
:
/
/
www
.
4chan
.
org
"
)
title
:
"
4chan
"
tags
:
[
"
discussion
"
"
imageboard
"
"
anime
"
]
}
]
;
add_task
(
function
*
test_import_tags
(
)
{
let
HTMLFile
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bookmarks
.
html
"
)
;
if
(
(
yield
OS
.
File
.
exists
(
HTMLFile
)
)
)
yield
OS
.
File
.
remove
(
HTMLFile
)
;
let
bookmarkList
=
new
Set
(
)
;
for
(
let
{
uri
title
tags
}
of
bookmarkData
)
{
bookmarkList
.
add
(
yield
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
uri
title
}
)
)
;
PlacesUtils
.
tagging
.
tagURI
(
uri
tags
)
;
}
yield
BookmarkHTMLUtils
.
exportToFile
(
HTMLFile
)
;
for
(
let
bookmark
of
bookmarkList
)
{
yield
PlacesUtils
.
bookmarks
.
remove
(
bookmark
.
guid
)
;
}
yield
BookmarkHTMLUtils
.
importFromFile
(
HTMLFile
true
)
;
for
(
let
{
uri
tags
}
of
bookmarkData
)
{
do_print
(
"
Test
tags
for
"
+
uri
.
spec
+
"
:
"
+
tags
+
"
\
n
"
)
;
let
foundTags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
uri
)
;
Assert
.
equal
(
foundTags
.
length
tags
.
length
)
;
Assert
.
ok
(
tags
.
every
(
tag
=
>
foundTags
.
includes
(
tag
)
)
)
;
}
}
)
;
