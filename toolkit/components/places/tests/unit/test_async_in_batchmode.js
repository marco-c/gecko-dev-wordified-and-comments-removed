ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
function
waitForPromise
(
promise
)
{
let
tm
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
let
finalResult
finalException
;
promise
.
then
(
result
=
>
{
finalResult
=
result
;
}
err
=
>
{
finalException
=
err
;
}
)
;
tm
.
spinEventLoopUntil
(
(
)
=
>
finalResult
|
|
finalException
)
;
if
(
finalException
)
{
throw
finalException
;
}
return
finalResult
;
}
add_test
(
function
(
)
{
let
testCompleted
=
false
;
PlacesUtils
.
bookmarks
.
runInBatchMode
(
{
runBatched
(
)
{
let
info
=
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
type
:
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
url
:
"
http
:
/
/
example
.
com
/
"
}
;
let
insertPromise
=
PlacesUtils
.
bookmarks
.
insert
(
info
)
;
let
bookmark
=
waitForPromise
(
insertPromise
)
;
equal
(
bookmark
.
url
info
.
url
)
;
let
id
=
waitForPromise
(
PlacesUtils
.
promiseItemId
(
bookmark
.
guid
)
)
;
let
guid
=
waitForPromise
(
PlacesUtils
.
promiseItemGuid
(
id
)
)
;
equal
(
guid
bookmark
.
guid
"
id
and
guid
round
-
tripped
correctly
"
)
;
testCompleted
=
true
;
}
}
null
)
;
ok
(
testCompleted
)
;
run_next_test
(
)
;
}
)
;
