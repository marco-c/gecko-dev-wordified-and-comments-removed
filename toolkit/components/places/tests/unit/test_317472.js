const
charset
=
"
UTF
-
8
"
;
const
CHARSET_ANNO
=
"
URIProperties
/
characterSet
"
;
const
TEST_URI
=
uri
(
"
http
:
/
/
foo
.
com
"
)
;
const
TEST_BOOKMARKED_URI
=
uri
(
"
http
:
/
/
bar
.
com
"
)
;
add_task
(
async
function
test_execute
(
)
{
await
PlacesTestUtils
.
addVisits
(
TEST_URI
)
;
await
PlacesTestUtils
.
addVisits
(
TEST_BOOKMARKED_URI
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
TEST_BOOKMARKED_URI
title
:
TEST_BOOKMARKED_URI
.
spec
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
url
:
TEST_BOOKMARKED_URI
title
:
TEST_BOOKMARKED_URI
.
spec
}
)
;
await
PlacesUtils
.
setCharsetForURI
(
TEST_URI
charset
)
;
await
PlacesUtils
.
setCharsetForURI
(
TEST_BOOKMARKED_URI
charset
)
;
Assert
.
equal
(
PlacesUtils
.
annotations
.
getPageAnnotation
(
TEST_URI
CHARSET_ANNO
)
charset
)
;
Assert
.
equal
(
(
await
PlacesUtils
.
getCharsetForURI
(
TEST_URI
)
)
charset
)
;
Assert
.
equal
(
(
await
PlacesUtils
.
getCharsetForURI
(
TEST_BOOKMARKED_URI
)
)
charset
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
Assert
.
notEqual
(
(
await
PlacesUtils
.
getCharsetForURI
(
TEST_URI
)
)
charset
)
;
try
{
PlacesUtils
.
annotations
.
getPageAnnotation
(
TEST_URI
CHARSET_ANNO
)
;
do_throw
(
"
Charset
page
annotation
has
not
been
removed
correctly
"
)
;
}
catch
(
e
)
{
}
Assert
.
equal
(
(
await
PlacesUtils
.
getCharsetForURI
(
TEST_BOOKMARKED_URI
)
)
charset
)
;
await
PlacesUtils
.
setCharsetForURI
(
TEST_BOOKMARKED_URI
"
"
)
;
Assert
.
notEqual
(
(
await
PlacesUtils
.
getCharsetForURI
(
TEST_BOOKMARKED_URI
)
)
charset
)
;
}
)
;
