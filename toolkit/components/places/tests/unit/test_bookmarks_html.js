var
test_bookmarks
=
{
menu
:
[
{
title
:
"
Mozilla
Firefox
"
children
:
[
{
title
:
"
Help
and
Tutorials
"
url
:
"
http
:
/
/
en
-
us
.
www
.
mozilla
.
com
/
en
-
US
/
firefox
/
help
/
"
icon
:
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8
/
9hAAAABGdBTUEAAK
/
INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVHjaYvz
/
/
z8DJQAggJiQOe
/
fv2fv7Oz8rays
/
N
+
VkfG
/
iYnJfyD
/
1
+
rVq7ffu3dPFpsBAAHEAHIBCJ85c8bN2Nj4vwsDw
/
8zQLwKiO8CcRoQu0DxqlWrdsHUwzBAAIGJmTNnPgYa9j8UqhFElwPxf2MIDeIrKSn9FwSJoRkAEEAM0DD4DzMAyPi
/
G
+
QKY4hh5WAXGf8PDQ0FGwJ22d27CjADAAIIrLmjo
+
MXA9R2kAHvGBA2wwx6B8W7od6CeQcggKCmCEL8bgwxYCbUIGTDVkHDBia
+
CuotgACCueD3TDQN75D4xmAvCoK9ARMHBzAw0AECiBHkAlC0Mdy7x9ABNA3obAZXIAa6iKEcGlMVQHwWyjYuL2d4v2cPg8vZswx7gHyAAAK7AOif7SAbOqCmn4Ha3AHFsIDtgPq
/
vLz8P4MSkJ2W9h8ggBjevXvHDo4FQUQg
/
kdypqCg4H8lUIACnQ
/
SOBMYI8bAsAJFPcj1AAEEjwVQqLpAbXmH5BJjqI0gi9DTAAgDBBCcAVLkgmQ7yKCZxpCQxqUZhAECCJ4XgMl493ug21ZD
+
aDAXH0WLM4A9MZPXJkJIIAwTAR5pQMalaCABQUULttBGCCAGCnNzgABBgAMJ5THwGvJLAAAAABJRU5ErkJggg
=
=
"
}
{
title
:
"
Customize
Firefox
"
url
:
"
http
:
/
/
en
-
us
.
www
.
mozilla
.
com
/
en
-
US
/
firefox
/
customize
/
"
icon
:
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8
/
9hAAAABGdBTUEAAK
/
INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVHjaYvz
/
/
z8DJQAggJiQOe
/
fv2fv7Oz8rays
/
N
+
VkfG
/
iYnJfyD
/
1
+
rVq7ffu3dPFpsBAAHEAHIBCJ85c8bN2Nj4vwsDw
/
8zQLwKiO8CcRoQu0DxqlWrdsHUwzBAAIGJmTNnPgYa9j8UqhFElwPxf2MIDeIrKSn9FwSJoRkAEEAM0DD4DzMAyPi
/
G
+
QKY4hh5WAXGf8PDQ0FGwJ22d27CjADAAIIrLmjo
+
MXA9R2kAHvGBA2wwx6B8W7od6CeQcggKCmCEL8bgwxYCbUIGTDVkHDBia
+
CuotgACCueD3TDQN75D4xmAvCoK9ARMHBzAw0AECiBHkAlC0Mdy7x9ABNA3obAZXIAa6iKEcGlMVQHwWyjYuL2d4v2cPg8vZswx7gHyAAAK7AOif7SAbOqCmn4Ha3AHFsIDtgPq
/
vLz8P4MSkJ2W9h8ggBjevXvHDo4FQUQg
/
kdypqCg4H8lUIACnQ
/
SOBMYI8bAsAJFPcj1AAEEjwVQqLpAbXmH5BJjqI0gi9DTAAgDBBCcAVLkgmQ7yKCZxpCQxqUZhAECCJ4XgMl493ug21ZD
+
aDAXH0WLM4A9MZPXJkJIIAwTAR5pQMalaCABQUULttBGCCAGCnNzgABBgAMJ5THwGvJLAAAAABJRU5ErkJggg
=
=
"
}
{
title
:
"
Get
Involved
"
url
:
"
http
:
/
/
en
-
us
.
www
.
mozilla
.
com
/
en
-
US
/
firefox
/
community
/
"
icon
:
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8
/
9hAAAABGdBTUEAAK
/
INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVHjaYvz
/
/
z8DJQAggJiQOe
/
fv2fv7Oz8rays
/
N
+
VkfG
/
iYnJfyD
/
1
+
rVq7ffu3dPFpsBAAHEAHIBCJ85c8bN2Nj4vwsDw
/
8zQLwKiO8CcRoQu0DxqlWrdsHUwzBAAIGJmTNnPgYa9j8UqhFElwPxf2MIDeIrKSn9FwSJoRkAEEAM0DD4DzMAyPi
/
G
+
QKY4hh5WAXGf8PDQ0FGwJ22d27CjADAAIIrLmjo
+
MXA9R2kAHvGBA2wwx6B8W7od6CeQcggKCmCEL8bgwxYCbUIGTDVkHDBia
+
CuotgACCueD3TDQN75D4xmAvCoK9ARMHBzAw0AECiBHkAlC0Mdy7x9ABNA3obAZXIAa6iKEcGlMVQHwWyjYuL2d4v2cPg8vZswx7gHyAAAK7AOif7SAbOqCmn4Ha3AHFsIDtgPq
/
vLz8P4MSkJ2W9h8ggBjevXvHDo4FQUQg
/
kdypqCg4H8lUIACnQ
/
SOBMYI8bAsAJFPcj1AAEEjwVQqLpAbXmH5BJjqI0gi9DTAAgDBBCcAVLkgmQ7yKCZxpCQxqUZhAECCJ4XgMl493ug21ZD
+
aDAXH0WLM4A9MZPXJkJIIAwTAR5pQMalaCABQUULttBGCCAGCnNzgABBgAMJ5THwGvJLAAAAABJRU5ErkJggg
=
=
"
}
{
title
:
"
About
Us
"
url
:
"
http
:
/
/
en
-
us
.
www
.
mozilla
.
com
/
en
-
US
/
about
/
"
icon
:
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8
/
9hAAAABGdBTUEAAK
/
INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVHjaYvz
/
/
z8DJQAggJiQOe
/
fv2fv7Oz8rays
/
N
+
VkfG
/
iYnJfyD
/
1
+
rVq7ffu3dPFpsBAAHEAHIBCJ85c8bN2Nj4vwsDw
/
8zQLwKiO8CcRoQu0DxqlWrdsHUwzBAAIGJmTNnPgYa9j8UqhFElwPxf2MIDeIrKSn9FwSJoRkAEEAM0DD4DzMAyPi
/
G
+
QKY4hh5WAXGf8PDQ0FGwJ22d27CjADAAIIrLmjo
+
MXA9R2kAHvGBA2wwx6B8W7od6CeQcggKCmCEL8bgwxYCbUIGTDVkHDBia
+
CuotgACCueD3TDQN75D4xmAvCoK9ARMHBzAw0AECiBHkAlC0Mdy7x9ABNA3obAZXIAa6iKEcGlMVQHwWyjYuL2d4v2cPg8vZswx7gHyAAAK7AOif7SAbOqCmn4Ha3AHFsIDtgPq
/
vLz8P4MSkJ2W9h8ggBjevXvHDo4FQUQg
/
kdypqCg4H8lUIACnQ
/
SOBMYI8bAsAJFPcj1AAEEjwVQqLpAbXmH5BJjqI0gi9DTAAgDBBCcAVLkgmQ7yKCZxpCQxqUZhAECCJ4XgMl493ug21ZD
+
aDAXH0WLM4A9MZPXJkJIIAwTAR5pQMalaCABQUULttBGCCAGCnNzgABBgAMJ5THwGvJLAAAAABJRU5ErkJggg
=
=
"
}
]
}
{
type
:
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_SEPARATOR
}
{
title
:
"
test
"
dateAdded
:
1177541020000000
lastModified
:
1177541050000000
children
:
[
{
title
:
"
test
post
keyword
"
dateAdded
:
1177375336000000
lastModified
:
1177375423000000
keyword
:
"
test
"
postData
:
"
hidden1
%
3Dbar
&
text1
%
3D
%
25s
"
charset
:
"
ISO
-
8859
-
1
"
url
:
"
http
:
/
/
test
/
post
"
}
]
}
]
toolbar
:
[
{
title
:
"
Getting
Started
"
url
:
"
http
:
/
/
en
-
us
.
www
.
mozilla
.
com
/
en
-
US
/
firefox
/
central
/
"
icon
:
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8
/
9hAAAABGdBTUEAAK
/
INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVHjaYvz
/
/
z8DJQAggJiQOe
/
fv2fv7Oz8rays
/
N
+
VkfG
/
iYnJfyD
/
1
+
rVq7ffu3dPFpsBAAHEAHIBCJ85c8bN2Nj4vwsDw
/
8zQLwKiO8CcRoQu0DxqlWrdsHUwzBAAIGJmTNnPgYa9j8UqhFElwPxf2MIDeIrKSn9FwSJoRkAEEAM0DD4DzMAyPi
/
G
+
QKY4hh5WAXGf8PDQ0FGwJ22d27CjADAAIIrLmjo
+
MXA9R2kAHvGBA2wwx6B8W7od6CeQcggKCmCEL8bgwxYCbUIGTDVkHDBia
+
CuotgACCueD3TDQN75D4xmAvCoK9ARMHBzAw0AECiBHkAlC0Mdy7x9ABNA3obAZXIAa6iKEcGlMVQHwWyjYuL2d4v2cPg8vZswx7gHyAAAK7AOif7SAbOqCmn4Ha3AHFsIDtgPq
/
vLz8P4MSkJ2W9h8ggBjevXvHDo4FQUQg
/
kdypqCg4H8lUIACnQ
/
SOBMYI8bAsAJFPcj1AAEEjwVQqLpAbXmH5BJjqI0gi9DTAAgDBBCcAVLkgmQ7yKCZxpCQxqUZhAECCJ4XgMl493ug21ZD
+
aDAXH0WLM4A9MZPXJkJIIAwTAR5pQMalaCABQUULttBGCCAGCnNzgABBgAMJ5THwGvJLAAAAABJRU5ErkJggg
=
=
"
}
{
title
:
"
Latest
Headlines
"
url
:
"
http
:
/
/
en
-
us
.
fxfeeds
.
mozilla
.
com
/
en
-
US
/
firefox
/
livebookmarks
/
"
feedUrl
:
"
http
:
/
/
en
-
us
.
fxfeeds
.
mozilla
.
com
/
en
-
US
/
firefox
/
headlines
.
xml
"
}
{
title
:
"
Latest
Headlines
No
Site
"
feedUrl
:
"
http
:
/
/
en
-
us
.
fxfeeds
.
mozilla
.
com
/
en
-
US
/
firefox
/
headlines
.
xml
"
ignore
:
true
}
]
unfiled
:
[
{
title
:
"
Example
.
tld
"
url
:
"
http
:
/
/
example
.
tld
/
"
}
]
}
;
var
gBookmarksFileOld
;
var
gBookmarksFileNew
;
add_task
(
async
function
setup
(
)
{
gBookmarksFileOld
=
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
bookmarks
.
preplaces
.
html
"
)
;
gBookmarksFileNew
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
bookmarks
.
exported
.
html
"
)
;
await
IOUtils
.
remove
(
gBookmarksFileNew
{
ignoreAbsent
:
true
}
)
;
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileOld
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
testImportedBookmarks
(
)
;
await
BookmarkHTMLUtils
.
exportToFile
(
gBookmarksFileNew
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_import_new
(
)
{
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileNew
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
testImportedBookmarks
(
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_emptytitle_export
(
)
{
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileNew
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
const
NOTITLE_URL
=
"
http
:
/
/
notitle
.
mozilla
.
org
/
"
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
NOTITLE_URL
}
)
;
test_bookmarks
.
unfiled
.
push
(
{
title
:
"
"
url
:
NOTITLE_URL
}
)
;
await
BookmarkHTMLUtils
.
exportToFile
(
gBookmarksFileNew
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileNew
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
testImportedBookmarks
(
)
;
test_bookmarks
.
unfiled
.
pop
(
)
;
let
reimportedBookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
}
)
;
Assert
.
equal
(
reimportedBookmark
.
url
.
href
bookmark
.
url
.
href
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
reimportedBookmark
)
;
await
BookmarkHTMLUtils
.
exportToFile
(
gBookmarksFileNew
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_import_chromefavicon
(
)
{
const
PAGE_URI
=
NetUtil
.
newURI
(
"
http
:
/
/
example
.
com
/
chromefavicon_page
"
)
;
const
CHROME_FAVICON_URI
=
NetUtil
.
newURI
(
"
chrome
:
/
/
global
/
skin
/
icons
/
delete
.
svg
"
)
;
const
CHROME_FAVICON_URI_2
=
NetUtil
.
newURI
(
"
chrome
:
/
/
global
/
skin
/
icons
/
error
.
svg
"
)
;
info
(
"
Importing
from
html
"
)
;
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileNew
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
info
(
"
Insert
bookmark
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
PAGE_URI
title
:
"
Test
"
}
)
;
info
(
"
Set
favicon
"
)
;
await
new
Promise
(
resolve
=
>
{
PlacesUtils
.
favicons
.
setAndFetchFaviconForPage
(
PAGE_URI
CHROME_FAVICON_URI
true
PlacesUtils
.
favicons
.
FAVICON_LOAD_NON_PRIVATE
resolve
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
)
;
let
data
=
await
new
Promise
(
resolve
=
>
{
PlacesUtils
.
favicons
.
getFaviconDataForPage
(
PAGE_URI
(
uri
dataLen
faviconData
mimeType
)
=
>
resolve
(
faviconData
)
)
;
}
)
;
let
base64Icon
=
"
data
:
image
/
png
;
base64
"
+
base64EncodeString
(
String
.
fromCharCode
.
apply
(
String
data
)
)
;
test_bookmarks
.
unfiled
.
push
(
{
title
:
"
Test
"
url
:
PAGE_URI
.
spec
icon
:
base64Icon
}
)
;
info
(
"
Export
to
html
"
)
;
await
BookmarkHTMLUtils
.
exportToFile
(
gBookmarksFileNew
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
info
(
"
Set
favicon
"
)
;
await
new
Promise
(
resolve
=
>
{
PlacesUtils
.
favicons
.
setAndFetchFaviconForPage
(
PAGE_URI
CHROME_FAVICON_URI_2
true
PlacesUtils
.
favicons
.
FAVICON_LOAD_NON_PRIVATE
resolve
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
)
;
info
(
"
import
from
html
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileNew
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
info
(
"
Test
imported
bookmarks
"
)
;
await
testImportedBookmarks
(
)
;
test_bookmarks
.
unfiled
.
pop
(
)
;
let
reimportedBookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
}
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
reimportedBookmark
)
;
await
BookmarkHTMLUtils
.
exportToFile
(
gBookmarksFileNew
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_import_ontop
(
)
{
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileNew
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
BookmarkHTMLUtils
.
exportToFile
(
gBookmarksFileNew
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
BookmarkHTMLUtils
.
importFromFile
(
gBookmarksFileNew
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
testImportedBookmarks
(
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
async
function
testImportedBookmarks
(
)
{
for
(
let
group
in
test_bookmarks
)
{
info
(
"
[
testImportedBookmarks
(
)
]
Checking
group
'
"
+
group
+
"
'
"
)
;
let
root
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
[
{
group
}
Guid
]
)
.
root
;
let
items
=
test_bookmarks
[
group
]
.
filter
(
b
=
>
!
b
.
ignore
)
;
Assert
.
equal
(
root
.
childCount
items
.
length
)
;
for
(
let
key
in
items
)
{
await
checkItem
(
items
[
key
]
root
.
getChild
(
key
)
)
;
}
root
.
containerOpen
=
false
;
}
}
function
checkItem
(
aExpected
aNode
)
{
return
(
async
function
(
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
aNode
.
bookmarkGuid
)
;
for
(
let
prop
in
aExpected
)
{
switch
(
prop
)
{
case
"
type
"
:
Assert
.
equal
(
aNode
.
type
aExpected
.
type
)
;
break
;
case
"
title
"
:
Assert
.
equal
(
aNode
.
title
aExpected
.
title
)
;
break
;
case
"
dateAdded
"
:
Assert
.
equal
(
PlacesUtils
.
toPRTime
(
bookmark
.
dateAdded
)
aExpected
.
dateAdded
)
;
break
;
case
"
lastModified
"
:
Assert
.
equal
(
PlacesUtils
.
toPRTime
(
bookmark
.
lastModified
)
aExpected
.
lastModified
)
;
break
;
case
"
url
"
:
Assert
.
equal
(
aNode
.
uri
aExpected
.
url
)
;
break
;
case
"
icon
"
:
let
{
data
}
=
await
getFaviconDataForPage
(
aExpected
.
url
)
;
let
base64Icon
=
"
data
:
image
/
png
;
base64
"
+
base64EncodeString
(
String
.
fromCharCode
.
apply
(
String
data
)
)
;
Assert
.
ok
(
base64Icon
=
=
aExpected
.
icon
)
;
break
;
case
"
keyword
"
:
{
let
entry
=
await
PlacesUtils
.
keywords
.
fetch
(
{
url
:
aNode
.
uri
}
)
;
Assert
.
equal
(
entry
.
keyword
aExpected
.
keyword
)
;
break
;
}
case
"
postData
"
:
{
let
entry
=
await
PlacesUtils
.
keywords
.
fetch
(
{
url
:
aNode
.
uri
}
)
;
Assert
.
equal
(
entry
.
postData
aExpected
.
postData
)
;
break
;
}
case
"
charset
"
:
let
pageInfo
=
await
PlacesUtils
.
history
.
fetch
(
aNode
.
uri
{
includeAnnotations
:
true
}
)
;
Assert
.
equal
(
pageInfo
.
annotations
.
get
(
PlacesUtils
.
CHARSET_ANNO
)
aExpected
.
charset
)
;
break
;
case
"
feedUrl
"
:
break
;
case
"
children
"
:
let
folder
=
aNode
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
Assert
.
equal
(
folder
.
hasChildren
!
!
aExpected
.
children
.
length
)
;
folder
.
containerOpen
=
true
;
Assert
.
equal
(
folder
.
childCount
aExpected
.
children
.
length
)
;
for
(
let
index
=
0
;
index
<
aExpected
.
children
.
length
;
index
+
+
)
{
await
checkItem
(
aExpected
.
children
[
index
]
folder
.
getChild
(
index
)
)
;
}
folder
.
containerOpen
=
false
;
break
;
default
:
throw
new
Error
(
"
Unknown
property
"
)
;
}
}
}
)
(
)
;
}
