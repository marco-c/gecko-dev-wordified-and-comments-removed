add_task
(
async
function
(
)
{
const
addRoot
=
new
Observer
(
)
;
const
addRootRemoveFirst
=
new
Observer
(
)
;
const
addRootRemoveSecond
=
new
Observer
(
)
;
const
addFirst
=
new
Observer
(
)
;
const
addFirstRemoveSecond
=
new
Observer
(
)
;
const
addSecond
=
new
Observer
(
)
;
const
firstNestOperator
=
(
)
=
>
{
info
(
"
Start
to
operate
at
first
nest
"
)
;
removePlacesListener
(
firstNestOperator
)
;
info
(
"
Add
/
Remove
test
listeners
at
first
nest
"
)
;
removePlacesListener
(
addRootRemoveFirst
.
handle
)
;
addPlacesListener
(
addFirst
.
handle
)
;
addPlacesListener
(
addFirstRemoveSecond
.
handle
)
;
addPlacesListener
(
secondNestOperator
)
;
info
(
"
Send
notification
at
first
nest
"
)
;
notifyPlacesEvent
(
"
first
"
)
;
}
;
const
secondNestOperator
=
(
)
=
>
{
info
(
"
Start
to
operate
at
second
nest
"
)
;
removePlacesListener
(
secondNestOperator
)
;
info
(
"
Add
/
Remove
test
listeners
at
second
nest
"
)
;
removePlacesListener
(
addRootRemoveSecond
.
handle
)
;
removePlacesListener
(
addFirstRemoveSecond
.
handle
)
;
addPlacesListener
(
addSecond
.
handle
)
;
info
(
"
Send
notification
at
second
nest
"
)
;
notifyPlacesEvent
(
"
second
"
)
;
}
;
info
(
"
Add
test
listeners
that
handle
notification
sent
at
root
"
)
;
addPlacesListener
(
addRoot
.
handle
)
;
addPlacesListener
(
addRootRemoveFirst
.
handle
)
;
addPlacesListener
(
addRootRemoveSecond
.
handle
)
;
addPlacesListener
(
firstNestOperator
)
;
info
(
"
Send
notification
at
root
"
)
;
notifyPlacesEvent
(
"
root
"
)
;
info
(
"
Check
whether
or
not
test
listeners
could
get
expected
notifications
"
)
;
assertNotifications
(
addRoot
.
notifications
[
[
{
guid
:
"
root
"
}
]
[
{
guid
:
"
first
"
}
]
[
{
guid
:
"
second
"
}
]
]
)
;
assertNotifications
(
addRootRemoveFirst
.
notifications
[
[
{
guid
:
"
root
"
}
]
]
)
;
assertNotifications
(
addRootRemoveSecond
.
notifications
[
[
{
guid
:
"
root
"
}
]
[
{
guid
:
"
first
"
}
]
]
)
;
assertNotifications
(
addFirst
.
notifications
[
[
{
guid
:
"
first
"
}
]
[
{
guid
:
"
second
"
}
]
]
)
;
assertNotifications
(
addFirstRemoveSecond
.
notifications
[
[
{
guid
:
"
first
"
}
]
]
)
;
assertNotifications
(
addSecond
.
notifications
[
[
{
guid
:
"
second
"
}
]
]
)
;
}
)
;
function
addPlacesListener
(
listener
)
{
PlacesObservers
.
addListener
(
[
"
bookmark
-
added
"
]
listener
)
;
}
function
removePlacesListener
(
listener
)
{
PlacesObservers
.
removeListener
(
[
"
bookmark
-
added
"
]
listener
)
;
}
function
notifyPlacesEvent
(
guid
)
{
PlacesObservers
.
notifyListeners
(
[
new
PlacesBookmarkAddition
(
{
dateAdded
:
0
guid
id
:
-
1
index
:
0
isTagging
:
false
itemType
:
1
parentGuid
:
"
fake
"
parentId
:
-
2
source
:
0
title
:
guid
url
:
http
:
/
/
example
.
com
/
{
guid
}
}
)
]
)
;
}
class
Observer
{
constructor
(
)
{
this
.
notifications
=
[
]
;
this
.
handle
=
this
.
handle
.
bind
(
this
)
;
}
handle
(
events
)
{
this
.
notifications
.
push
(
events
)
;
}
}
function
assertNotifications
(
notifications
expectedNotifications
)
{
Assert
.
equal
(
notifications
.
length
expectedNotifications
.
length
"
Number
of
notifications
is
correct
"
)
;
for
(
let
i
=
0
;
i
<
notifications
.
length
;
i
+
+
)
{
info
(
Check
notifications
[
{
i
}
]
)
;
const
placesEvents
=
notifications
[
i
]
;
const
expectedPlacesEvents
=
expectedNotifications
[
i
]
;
assertPlacesEvents
(
placesEvents
expectedPlacesEvents
)
;
}
}
function
assertPlacesEvents
(
events
expectedEvents
)
{
Assert
.
equal
(
events
.
length
expectedEvents
.
length
"
Number
of
Places
events
is
correct
"
)
;
for
(
let
i
=
0
;
i
<
events
.
length
;
i
+
+
)
{
info
(
Check
Places
events
[
{
i
}
]
)
;
const
event
=
events
[
i
]
;
const
expectedEvent
=
expectedEvents
[
i
]
;
for
(
let
field
in
expectedEvent
)
{
Assert
.
equal
(
event
[
field
]
expectedEvent
[
field
]
{
field
}
is
correct
)
;
}
}
}
