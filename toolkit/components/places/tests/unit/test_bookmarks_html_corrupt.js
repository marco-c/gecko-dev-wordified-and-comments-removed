const
TEST_FAVICON_PAGE_URL
=
"
http
:
/
/
en
-
US
.
www
.
mozilla
.
com
/
en
-
US
/
firefox
/
central
/
"
;
const
TEST_FAVICON_DATA_SIZE
=
580
;
add_task
(
async
function
test_corrupt_file
(
)
{
let
corruptHtml
=
OS
.
Path
.
join
(
do_get_cwd
(
)
.
path
"
bookmarks
.
corrupt
.
html
"
)
;
await
BookmarkHTMLUtils
.
importFromFile
(
corruptHtml
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
database_check
(
)
;
}
)
;
add_task
(
async
function
test_corrupt_database
(
)
{
let
corruptBookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
url
:
"
http
:
/
/
test
.
mozilla
.
org
"
title
:
"
We
love
belugas
"
}
)
;
await
PlacesUtils
.
withConnectionWrapper
(
"
test
"
async
function
(
db
)
{
await
db
.
execute
(
"
UPDATE
moz_bookmarks
SET
fk
=
NULL
WHERE
guid
=
:
guid
"
{
guid
:
corruptBookmark
.
guid
}
)
;
}
)
;
let
bookmarksFile
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
bookmarks
.
exported
.
html
"
)
;
if
(
await
OS
.
File
.
exists
(
bookmarksFile
)
)
{
await
OS
.
File
.
remove
(
bookmarksFile
)
;
}
await
BookmarkHTMLUtils
.
exportToFile
(
bookmarksFile
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
BookmarkHTMLUtils
.
importFromFile
(
bookmarksFile
{
replace
:
true
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
database_check
(
)
;
}
)
;
var
database_check
=
async
function
(
)
{
let
root
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
.
menuGuid
)
.
root
;
Assert
.
equal
(
root
.
childCount
2
)
;
let
folderNode
=
root
.
getChild
(
1
)
;
Assert
.
equal
(
folderNode
.
type
folderNode
.
RESULT_TYPE_FOLDER
)
;
Assert
.
equal
(
folderNode
.
title
"
test
"
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
guid
:
folderNode
.
bookmarkGuid
}
)
;
Assert
.
equal
(
PlacesUtils
.
toPRTime
(
bookmark
.
dateAdded
)
1177541020000000
)
;
Assert
.
equal
(
PlacesUtils
.
toPRTime
(
bookmark
.
lastModified
)
1177541050000000
)
;
PlacesUtils
.
asQuery
(
folderNode
)
;
Assert
.
equal
(
folderNode
.
hasChildren
true
)
;
folderNode
.
containerOpen
=
true
;
Assert
.
equal
(
folderNode
.
childCount
1
)
;
let
bookmarkNode
=
folderNode
.
getChild
(
0
)
;
Assert
.
equal
(
"
http
:
/
/
test
/
post
"
bookmarkNode
.
uri
)
;
Assert
.
equal
(
"
test
post
keyword
"
bookmarkNode
.
title
)
;
let
entry
=
await
PlacesUtils
.
keywords
.
fetch
(
{
url
:
bookmarkNode
.
uri
}
)
;
Assert
.
equal
(
"
test
"
entry
.
keyword
)
;
Assert
.
equal
(
"
hidden1
%
3Dbar
&
text1
%
3D
%
25s
"
entry
.
postData
)
;
Assert
.
equal
(
bookmarkNode
.
dateAdded
1177375336000000
)
;
Assert
.
equal
(
bookmarkNode
.
lastModified
1177375423000000
)
;
let
pageInfo
=
await
PlacesUtils
.
history
.
fetch
(
bookmarkNode
.
uri
{
includeAnnotations
:
true
}
)
;
Assert
.
equal
(
pageInfo
.
annotations
.
get
(
PlacesUtils
.
CHARSET_ANNO
)
"
ISO
-
8859
-
1
"
"
Should
have
the
correct
charset
"
)
;
folderNode
.
containerOpen
=
false
;
root
.
containerOpen
=
false
;
root
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
.
toolbarGuid
)
.
root
;
Assert
.
equal
(
root
.
childCount
3
)
;
root
.
containerOpen
=
false
;
root
=
PlacesUtils
.
getFolderContents
(
PlacesUtils
.
bookmarks
.
unfiledGuid
)
.
root
;
Assert
.
equal
(
root
.
childCount
1
)
;
root
.
containerOpen
=
false
;
await
new
Promise
(
resolve
=
>
{
PlacesUtils
.
favicons
.
getFaviconDataForPage
(
uri
(
TEST_FAVICON_PAGE_URL
)
(
aURI
aDataLen
aData
aMimeType
)
=
>
{
Assert
.
notEqual
(
aURI
null
)
;
Assert
.
equal
(
TEST_FAVICON_DATA_SIZE
aDataLen
)
;
resolve
(
)
;
}
)
;
}
)
;
}
;
