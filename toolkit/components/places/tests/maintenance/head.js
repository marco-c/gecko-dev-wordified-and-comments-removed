{
let
commonFile
=
do_get_file
(
"
.
.
/
head_common
.
js
"
false
)
;
let
uri
=
Services
.
io
.
newFileURI
(
commonFile
)
;
Services
.
scriptloader
.
loadSubScript
(
uri
.
spec
this
)
;
}
ChromeUtils
.
defineESModuleGetters
(
this
{
PlacesDBUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesDBUtils
.
sys
.
mjs
"
}
)
;
async
function
createCorruptDb
(
filename
)
{
let
path
=
PathUtils
.
join
(
PathUtils
.
profileDir
filename
)
;
await
IOUtils
.
remove
(
path
{
ignoreAbsent
:
true
}
)
;
let
dir
=
do_get_cwd
(
)
.
path
;
let
src
=
PathUtils
.
join
(
dir
"
corruptDB
.
sqlite
"
)
;
await
IOUtils
.
copy
(
src
path
)
;
}
async
function
test_database_replacement
(
src
filename
shouldClone
dbStatus
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
places
.
database
.
cloneOnCorruption
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
places
.
database
.
cloneOnCorruption
"
shouldClone
)
;
let
willClone
=
shouldClone
&
&
filename
=
=
DB_FILENAME
;
let
dest
=
PathUtils
.
join
(
PathUtils
.
profileDir
filename
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
dest
)
)
"
{
filename
}
should
not
exist
initially
)
;
let
corrupt
=
PathUtils
.
join
(
PathUtils
.
profileDir
{
filename
}
.
corrupt
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
corrupt
)
)
{
filename
}
.
corrupt
should
not
exist
initially
)
;
let
dir
=
PathUtils
.
parent
(
do_get_cwd
(
)
.
path
)
;
src
=
PathUtils
.
join
(
dir
.
.
.
src
)
;
await
IOUtils
.
copy
(
src
dest
)
;
let
db
=
await
Sqlite
.
openConnection
(
{
path
:
dest
}
)
;
await
db
.
execute
(
CREATE
TABLE
moz_cloned
(
id
INTEGER
PRIMARY
KEY
)
)
;
await
db
.
execute
(
CREATE
TABLE
not_cloned
(
id
INTEGER
PRIMARY
KEY
)
)
;
await
db
.
execute
(
DELETE
FROM
moz_cloned
)
;
await
db
.
close
(
)
;
Services
.
prefs
.
setCharPref
(
"
places
.
database
.
replaceDatabaseOnStartup
"
filename
)
;
Assert
.
equal
(
PlacesUtils
.
history
.
databaseStatus
dbStatus
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
dest
)
"
The
database
should
exist
"
)
;
db
=
await
Sqlite
.
openConnection
(
{
path
:
dest
}
)
;
if
(
willClone
)
{
await
db
.
execute
(
DELETE
FROM
moz_cloned
)
;
}
await
Assert
.
rejects
(
db
.
execute
(
DELETE
FROM
not_cloned
)
/
no
such
table
/
"
The
database
should
have
been
replaced
"
)
;
await
db
.
close
(
)
;
if
(
willClone
)
{
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
corrupt
)
)
"
The
corrupt
db
should
not
exist
"
)
;
}
else
{
Assert
.
ok
(
await
IOUtils
.
exists
(
corrupt
)
"
The
corrupt
db
should
exist
"
)
;
}
}
