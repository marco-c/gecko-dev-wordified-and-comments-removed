"
use
strict
"
;
add_task
(
function
*
test_removeByFilter
(
)
{
yield
PlacesTestUtils
.
clearHistory
(
)
;
yield
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
let
witnessURI
=
NetUtil
.
newURI
(
"
http
:
/
/
witnessmozilla
.
org
/
test_browserhistory
/
test_removeByFilter
"
+
Math
.
random
(
)
)
;
yield
PlacesTestUtils
.
addVisits
(
witnessURI
)
;
Assert
.
ok
(
(
yield
PlacesTestUtils
.
isPageInDB
(
witnessURI
)
)
"
Witness
URI
is
in
database
"
)
;
let
removeByFilterTester
=
Task
.
async
(
function
*
(
visits
filter
checkBeforeRemove
checkAfterRemove
useCallback
bookmarkedUri
)
{
yield
PlacesTestUtils
.
addVisits
(
visits
)
;
if
(
bookmarkedUri
!
=
=
null
&
&
visits
.
map
(
v
=
>
v
.
uri
)
.
includes
(
bookmarkedUri
)
)
{
yield
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
bookmarkedUri
title
:
"
test
bookmark
"
}
)
;
}
checkBeforeRemove
(
)
;
let
{
observer
promiseObserved
}
=
getObserverPromise
(
bookmarkedUri
)
;
if
(
observer
)
{
PlacesUtils
.
history
.
addObserver
(
observer
false
)
;
}
let
removed
=
false
;
if
(
useCallback
)
{
let
netCallbacksRequired
=
(
new
Set
(
visits
.
map
(
v
=
>
v
.
uri
)
)
)
.
size
;
removed
=
yield
PlacesUtils
.
history
.
removeByFilter
(
filter
pageInfo
=
>
{
Assert
.
ok
(
PlacesUtils
.
validatePageInfo
(
pageInfo
false
)
"
pageInfo
should
follow
a
basic
format
"
)
;
Assert
.
ok
(
netCallbacksRequired
>
0
"
Callback
called
as
many
times
as
required
"
)
;
netCallbacksRequired
-
-
;
}
)
;
}
else
{
removed
=
yield
PlacesUtils
.
history
.
removeByFilter
(
filter
)
;
}
checkAfterRemove
(
)
;
yield
promiseObserved
;
if
(
observer
)
{
PlacesUtils
.
history
.
removeObserver
(
observer
)
;
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
Assert
.
ok
(
(
yield
PlacesTestUtils
.
isPageInDB
(
witnessURI
)
)
"
Witness
URI
is
still
in
database
"
)
;
return
removed
;
}
)
;
const
remoteUriList
=
[
"
http
:
/
/
mozilla
.
org
/
test_browserhistory
/
test_removeByFilter
/
"
+
Math
.
random
(
)
"
http
:
/
/
subdomain1
.
mozilla
.
org
/
test_browserhistory
/
test_removeByFilter
/
"
+
Math
.
random
(
)
"
http
:
/
/
subdomain2
.
mozilla
.
org
/
test_browserhistory
/
test_removeByFilter
/
"
+
Math
.
random
(
)
]
;
const
localhostUriList
=
[
"
http
:
/
/
localhost
:
4500
/
"
+
Math
.
random
(
)
"
http
:
/
/
localhost
/
"
+
Math
.
random
(
)
]
;
const
fileUriList
=
[
"
file
:
/
/
/
home
/
user
/
files
"
+
Math
.
random
(
)
]
;
const
title
=
"
Title
"
+
Math
.
random
(
)
;
let
sameHostVisits
=
[
{
uri
:
remoteUriList
[
0
]
title
visitDate
:
new
Date
(
2005
1
1
)
*
1000
}
{
uri
:
remoteUriList
[
0
]
title
visitDate
:
new
Date
(
2005
3
3
)
*
1000
}
{
uri
:
remoteUriList
[
0
]
title
visitDate
:
new
Date
(
2007
1
1
)
*
1000
}
]
;
let
randomHostVisits
=
[
{
uri
:
remoteUriList
[
0
]
title
visitDate
:
new
Date
(
2005
1
1
)
*
1000
}
{
uri
:
remoteUriList
[
1
]
title
visitDate
:
new
Date
(
2005
3
3
)
*
1000
}
{
uri
:
remoteUriList
[
2
]
title
visitDate
:
new
Date
(
2007
1
1
)
*
1000
}
]
;
let
localhostVisits
=
[
{
uri
:
localhostUriList
[
0
]
title
}
{
uri
:
localhostUriList
[
1
]
title
}
]
;
let
fileVisits
=
[
{
uri
:
fileUriList
[
0
]
title
}
]
;
let
assertInDB
=
function
*
(
aUri
)
{
Assert
.
ok
(
(
yield
PlacesTestUtils
.
isPageInDB
(
aUri
)
)
)
;
}
;
let
assertNotInDB
=
function
*
(
aUri
)
{
Assert
.
ok
(
!
(
yield
PlacesTestUtils
.
isPageInDB
(
aUri
)
)
)
;
}
;
for
(
let
callbackUse
of
[
true
false
]
)
{
for
(
let
bookmarkUse
of
[
true
false
]
)
{
let
bookmarkedUri
=
(
arr
)
=
>
undefined
;
let
checkableArray
=
(
arr
)
=
>
arr
;
let
checkClosure
=
assertNotInDB
;
if
(
bookmarkUse
)
{
bookmarkedUri
=
(
arr
)
=
>
arr
[
0
]
;
checkableArray
=
(
arr
)
=
>
arr
.
slice
(
1
)
;
checkClosure
=
function
(
aUri
)
{
}
;
}
yield
removeByFilterTester
(
sameHostVisits
{
beginDate
:
new
Date
(
2004
1
1
)
endDate
:
new
Date
(
2006
1
1
)
}
(
)
=
>
assertInDB
(
remoteUriList
[
0
]
)
(
)
=
>
checkClosure
(
remoteUriList
[
0
]
)
callbackUse
bookmarkedUri
(
remoteUriList
)
)
;
yield
removeByFilterTester
(
sameHostVisits
{
host
:
"
mozilla
.
org
"
}
(
)
=
>
assertInDB
(
remoteUriList
[
0
]
)
(
)
=
>
checkClosure
(
remoteUriList
[
0
]
)
callbackUse
bookmarkedUri
(
remoteUriList
)
)
;
yield
removeByFilterTester
(
randomHostVisits
{
host
:
"
*
.
mozilla
.
org
"
}
(
)
=
>
remoteUriList
.
forEach
(
assertInDB
)
(
)
=
>
checkableArray
(
remoteUriList
)
.
forEach
(
checkClosure
)
callbackUse
bookmarkedUri
(
remoteUriList
)
)
;
}
yield
removeByFilterTester
(
localhostVisits
{
host
:
"
localhost
"
}
(
)
=
>
localhostUriList
.
forEach
(
assertInDB
)
(
)
=
>
localhostUriList
.
forEach
(
assertNotInDB
)
callbackUse
)
;
yield
removeByFilterTester
(
fileVisits
{
host
:
"
"
}
(
)
=
>
fileUriList
.
forEach
(
assertInDB
)
(
)
=
>
fileUriList
.
forEach
(
assertNotInDB
)
callbackUse
)
;
yield
removeByFilterTester
(
sameHostVisits
{
beginDate
:
new
Date
(
2001
1
1
)
endDate
:
new
Date
(
2002
1
1
)
}
(
)
=
>
assertInDB
(
remoteUriList
[
0
]
)
(
)
=
>
assertInDB
(
remoteUriList
[
0
]
)
callbackUse
)
;
yield
removeByFilterTester
(
sameHostVisits
{
host
:
"
notthere
.
org
"
}
(
)
=
>
assertInDB
(
remoteUriList
[
0
]
)
(
)
=
>
assertInDB
(
remoteUriList
[
0
]
)
callbackUse
)
;
yield
removeByFilterTester
(
randomHostVisits
{
host
:
"
*
.
notthere
.
org
"
}
(
)
=
>
remoteUriList
.
forEach
(
assertInDB
)
(
)
=
>
remoteUriList
.
forEach
(
assertInDB
)
callbackUse
)
;
yield
removeByFilterTester
(
sameHostVisits
{
host
:
"
mozilla
.
org
"
beginDate
:
new
Date
(
2004
1
1
)
endDate
:
new
Date
(
2006
1
1
)
}
(
)
=
>
assertInDB
(
remoteUriList
[
0
]
)
(
)
=
>
assertNotInDB
(
remoteUriList
[
0
]
)
callbackUse
)
;
yield
removeByFilterTester
(
randomHostVisits
{
host
:
"
*
.
mozilla
.
org
"
beginDate
:
new
Date
(
2005
1
1
)
endDate
:
new
Date
(
2017
1
1
)
}
(
)
=
>
remoteUriList
.
forEach
(
assertInDB
)
(
)
=
>
remoteUriList
.
forEach
(
assertNotInDB
)
callbackUse
)
;
}
}
)
;
add_task
(
function
*
test_error_cases
(
)
{
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
)
/
TypeError
:
Expected
a
filter
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
"
obviously
not
a
filter
"
)
/
TypeError
:
Expected
a
filter
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
}
)
/
TypeError
:
Expected
a
non
-
empty
filter
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeVisitsByFilter
(
{
beginDate
:
"
now
"
}
)
/
TypeError
:
Expected
a
Date
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
beginDate
:
Date
.
now
(
)
}
)
/
TypeError
:
Expected
a
Date
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
beginDate
:
new
Date
(
)
}
"
obviously
not
a
callback
"
)
/
TypeError
:
Invalid
function
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
beginDate
:
new
Date
(
1000
)
endDate
:
new
Date
(
0
)
}
)
/
TypeError
:
beginDate
should
be
at
least
as
old
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
#
"
}
)
/
TypeError
:
Expected
well
formed
hostname
string
for
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
*
.
org
"
}
)
/
TypeError
:
Expected
well
formed
hostname
string
for
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
www
.
*
.
org
"
}
)
/
TypeError
:
Expected
well
formed
hostname
string
for
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
{
}
}
)
/
TypeError
:
host
should
be
a
string
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
.
mozilla
.
org
"
}
)
/
TypeError
:
Expected
well
formed
hostname
string
for
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
*
"
}
)
/
TypeError
:
Expected
well
formed
hostname
string
for
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
local
.
host
.
"
}
)
/
TypeError
:
Expected
well
formed
hostname
string
for
/
)
;
Assert
.
throws
(
(
)
=
>
PlacesUtils
.
history
.
removeByFilter
(
{
host
:
"
(
local
files
)
"
}
)
/
TypeError
:
Expected
well
formed
hostname
string
for
/
)
;
}
)
;
function
getObserverPromise
(
bookmarkedUri
)
{
if
(
!
bookmarkedUri
)
{
return
{
observer
:
null
promiseObserved
:
Promise
.
resolve
(
)
}
;
}
let
observer
;
let
promiseObserved
=
new
Promise
(
(
resolve
reject
)
=
>
{
observer
=
{
onBeginUpdateBatch
(
)
{
}
onEndUpdateBatch
(
)
{
}
onVisit
(
aUri
)
{
reject
(
new
Error
(
"
Unexpected
call
to
onVisit
"
)
)
;
}
onTitleChanged
(
aUri
)
{
reject
(
new
Error
(
"
Unexpected
call
to
onTitleChanged
"
)
)
;
}
onClearHistory
(
)
{
reject
(
new
Error
(
"
Unexpected
call
to
onClearHistory
"
)
)
;
}
onPageChanged
(
aUri
)
{
reject
(
new
Error
(
"
Unexpected
call
to
onPageChanged
"
)
)
;
}
onFrecencyChanged
(
aURI
)
{
}
onManyFrecenciesChanged
(
)
{
}
onDeleteURI
(
aURI
)
{
try
{
Assert
.
notEqual
(
aURI
.
spec
bookmarkedUri
"
Bookmarked
URI
should
not
be
deleted
"
)
;
}
finally
{
resolve
(
)
;
}
}
onDeleteVisits
(
aURI
aVisitTime
)
{
try
{
Assert
.
equal
(
aVisitTime
PlacesUtils
.
toPRTime
(
new
Date
(
0
)
)
"
Observing
onDeleteVisits
deletes
all
visits
"
)
;
Assert
.
equal
(
aURI
.
spec
bookmarkedUri
"
Bookmarked
URI
should
have
all
visits
removed
but
not
the
page
itself
"
)
;
}
finally
{
resolve
(
)
;
}
}
}
;
}
)
;
return
{
observer
promiseObserved
}
;
}
