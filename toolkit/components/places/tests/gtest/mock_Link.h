#
ifndef
mock_Link_h__
#
define
mock_Link_h__
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
dom
/
Link
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
class
mock_Link
:
public
mozilla
:
:
dom
:
:
Link
{
public
:
NS_DECL_ISUPPORTS
typedef
void
(
*
Handler
)
(
State
)
;
explicit
mock_Link
(
Handler
aHandlerFunction
bool
aRunNextTest
=
true
)
:
mozilla
:
:
dom
:
:
Link
(
)
mRunNextTest
(
aRunNextTest
)
{
AwaitNewNotification
(
aHandlerFunction
)
;
}
void
VisitedQueryFinished
(
bool
aVisited
)
final
{
mHandler
(
aVisited
?
State
:
:
Visited
:
State
:
:
Unvisited
)
;
mDeathGrip
=
nullptr
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
SizeOfState
&
aState
)
const
final
{
return
0
;
}
void
NodeInfoChanged
(
mozilla
:
:
dom
:
:
Document
*
aOldDoc
)
final
{
}
bool
GotNotified
(
)
const
{
return
!
mDeathGrip
;
}
void
AwaitNewNotification
(
Handler
aNewHandler
)
{
MOZ_ASSERT
(
!
mDeathGrip
|
|
!
mozilla
:
:
StaticPrefs
:
:
layout_css_notify_of_unvisited
(
)
"
Still
waiting
for
a
notification
"
)
;
mDeathGrip
=
this
;
mHandler
=
aNewHandler
;
}
protected
:
~
mock_Link
(
)
{
if
(
mRunNextTest
)
{
run_next_test
(
)
;
}
}
private
:
Handler
mHandler
=
nullptr
;
bool
mRunNextTest
;
RefPtr
<
Link
>
mDeathGrip
;
}
;
NS_IMPL_ISUPPORTS
(
mock_Link
mozilla
:
:
dom
:
:
Link
)
#
endif
