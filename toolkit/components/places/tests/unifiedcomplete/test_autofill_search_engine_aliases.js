"
use
strict
"
;
const
TEST_ENGINE_NAME
=
"
test
autofill
aliases
"
;
const
TEST_ENGINE_ALIAS
=
"
autofilltest
"
;
add_task
(
async
function
init
(
)
{
await
Services
.
search
.
addEngineWithDetails
(
TEST_ENGINE_NAME
{
alias
:
TEST_ENGINE_ALIAS
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
let
engine
=
Services
.
search
.
getEngineByName
(
TEST_ENGINE_NAME
)
;
Assert
.
ok
(
engine
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
}
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
example
.
com
/
"
title
:
TEST_ENGINE_ALIAS
}
)
;
let
autofilledValue
=
TEST_ENGINE_ALIAS
+
"
"
;
let
completedURL
=
makeActionURI
(
"
searchengine
"
{
engineName
:
TEST_ENGINE_NAME
alias
:
TEST_ENGINE_ALIAS
input
:
autofilledValue
searchQuery
:
"
"
}
)
.
spec
;
await
check_autocomplete
(
{
search
:
TEST_ENGINE_ALIAS
.
substr
(
0
Math
.
round
(
TEST_ENGINE_ALIAS
.
length
/
2
)
)
autofilled
:
autofilledValue
completed
:
completedURL
matches
:
[
{
value
:
autofilledValue
comment
:
TEST_ENGINE_NAME
uri
:
completedURL
style
:
[
"
autofill
"
"
action
"
"
searchengine
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
preserveCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
example
.
com
/
"
title
:
TEST_ENGINE_ALIAS
}
)
;
let
search
=
TEST_ENGINE_ALIAS
.
toUpperCase
(
)
.
substr
(
0
Math
.
round
(
TEST_ENGINE_ALIAS
.
length
/
2
)
)
;
let
alias
=
search
+
TEST_ENGINE_ALIAS
.
substr
(
search
.
length
)
;
let
autofilledValue
=
alias
+
"
"
;
let
completedURL
=
makeActionURI
(
"
searchengine
"
{
engineName
:
TEST_ENGINE_NAME
alias
input
:
autofilledValue
searchQuery
:
"
"
}
)
.
spec
;
await
check_autocomplete
(
{
search
autofilled
:
autofilledValue
completed
:
completedURL
matches
:
[
{
value
:
autofilledValue
comment
:
TEST_ENGINE_NAME
uri
:
completedURL
style
:
[
"
autofill
"
"
action
"
"
searchengine
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
