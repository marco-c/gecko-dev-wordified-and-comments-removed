function
addAutofillTasks
(
origins
)
{
let
path
;
let
search
;
let
searchCase
;
let
comment
;
if
(
origins
)
{
path
=
"
/
"
;
search
=
"
ex
"
;
searchCase
=
"
EX
"
;
comment
=
"
example
.
com
"
;
}
else
{
path
=
"
/
foo
"
;
search
=
"
example
.
com
/
f
"
;
searchCase
=
"
EXAMPLE
.
COM
/
f
"
;
comment
=
"
example
.
com
/
foo
"
;
}
let
host
=
"
example
.
com
"
;
let
url
=
host
+
path
;
add_task
(
async
function
init
(
)
{
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
basicCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
searchCase
autofilled
:
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
noWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
noWWWShouldMatchWWWCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
searchCase
autofilled
:
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
wwwShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefix
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
HTTP
:
/
/
"
+
searchCase
autofilled
:
"
HTTP
:
/
/
"
+
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixNoWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixNoWWWShouldMatchWWWCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
HTTP
:
/
/
"
+
searchCase
autofilled
:
"
HTTP
:
/
/
"
+
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixWWWShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpPrefixShouldNotMatchHTTPS
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsBasic
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsNoWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsWWWShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefix
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
"
+
search
autofilled
:
"
https
:
/
/
"
+
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefixNoWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
"
+
search
autofilled
:
"
https
:
/
/
"
+
url
completed
:
"
https
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
https
:
/
/
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefixWWWShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefixShouldNotMatchHTTP
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
"
+
search
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
test
visit
for
http
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
frecency
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
}
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
test
visit
for
http
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
}
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
4
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
www
.
"
+
url
}
]
)
;
}
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
test
visit
for
http
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
PlacesUtils
.
history
.
remove
(
[
"
https
:
/
/
www
.
"
+
url
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
PlacesUtils
.
history
.
remove
(
[
"
http
:
/
/
"
+
url
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
not
-
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
https
:
/
/
not
-
"
+
url
comment
:
"
test
visit
for
https
:
/
/
not
-
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
10
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
not
-
"
+
url
}
]
)
;
}
await
check_autocomplete
(
{
search
searchParam
:
"
enable
-
actions
"
matches
:
[
origins
?
makeSearchMatch
(
search
{
style
:
[
"
heuristic
"
]
}
)
:
makeVisitMatch
(
search
"
http
:
/
/
"
+
search
{
heuristic
:
true
}
)
{
value
:
"
https
:
/
/
not
-
"
+
url
comment
:
"
test
visit
for
https
:
/
/
not
-
"
+
url
style
:
[
"
favicon
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
PlacesUtils
.
history
.
remove
(
[
"
https
:
/
/
not
-
"
+
url
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
PlacesUtils
.
history
.
remove
(
[
"
https
:
/
/
"
+
url
]
)
;
await
check_autocomplete
(
{
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
bookmarked
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
matches
:
[
]
}
)
;
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
bookmarkedPrefix
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
]
}
)
;
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
}
