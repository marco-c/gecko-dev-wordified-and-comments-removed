function
addAutofillTasks
(
origins
)
{
let
path
;
let
search
;
let
searchCase
;
let
comment
;
if
(
origins
)
{
path
=
"
/
"
;
search
=
"
ex
"
;
searchCase
=
"
EX
"
;
comment
=
"
example
.
com
"
;
}
else
{
path
=
"
/
foo
"
;
search
=
"
example
.
com
/
f
"
;
searchCase
=
"
EXAMPLE
.
COM
/
f
"
;
comment
=
"
example
.
com
/
foo
"
;
}
let
host
=
"
example
.
com
"
;
let
url
=
host
+
path
;
add_task
(
async
function
init
(
)
{
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
basicCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
searchCase
autofilled
:
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
noWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
noWWWShouldMatchWWWCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
searchCase
autofilled
:
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
wwwShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefix
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
HTTP
:
/
/
"
+
searchCase
autofilled
:
"
HTTP
:
/
/
"
+
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixNoWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixNoWWWShouldMatchWWWCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
HTTP
:
/
/
"
+
searchCase
autofilled
:
"
HTTP
:
/
/
"
+
searchCase
+
url
.
substr
(
searchCase
.
length
)
completed
:
"
http
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
prefixWWWShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpPrefixShouldNotMatchHTTPS
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsBasic
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsNoWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsWWWShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefix
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
"
+
search
autofilled
:
"
https
:
/
/
"
+
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefixNoWWWShouldMatchWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
www
.
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
"
+
search
autofilled
:
"
https
:
/
/
"
+
url
completed
:
"
https
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
https
:
/
/
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefixWWWShouldNotMatchNoWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
www
.
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefixShouldNotMatchHTTP
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
"
+
search
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
test
visit
for
http
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
httpsPrefixShouldNotMatchMoreFrecentHTTP
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
transition
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
{
uri
:
"
http
:
/
/
"
+
url
}
{
uri
:
"
https
:
/
/
"
+
url
transition
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
{
uri
:
"
http
:
/
/
otherpage
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
https
:
/
/
"
+
search
autofilled
:
"
https
:
/
/
"
+
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
test
visit
for
http
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
frecency
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
"
+
url
}
]
)
;
}
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
test
visit
for
http
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
"
+
url
}
]
)
;
}
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
4
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
www
.
"
+
url
}
]
)
;
}
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
www
.
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
www
.
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
"
+
url
comment
:
"
test
visit
for
http
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
PlacesUtils
.
history
.
remove
(
[
"
https
:
/
/
www
.
"
+
url
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
PlacesUtils
.
history
.
remove
(
[
"
http
:
/
/
"
+
url
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
not
-
"
+
url
}
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
https
:
/
/
not
-
"
+
url
comment
:
"
test
visit
for
https
:
/
/
not
-
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
for
(
let
i
=
0
;
i
<
10
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
https
:
/
/
not
-
"
+
url
}
]
)
;
}
if
(
origins
)
{
await
check_autocomplete
(
{
search
searchParam
:
"
enable
-
actions
"
matches
:
[
makeSearchMatch
(
search
{
style
:
[
"
heuristic
"
]
}
)
{
value
:
"
https
:
/
/
not
-
"
+
url
comment
:
"
test
visit
for
https
:
/
/
not
-
"
+
url
style
:
[
"
favicon
"
]
}
{
value
:
"
https
:
/
/
"
+
url
comment
:
"
test
visit
for
https
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
}
else
{
await
check_autocomplete
(
{
search
searchParam
:
"
enable
-
actions
"
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
https
:
/
/
not
-
"
+
url
comment
:
"
test
visit
for
https
:
/
/
not
-
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
}
await
PlacesUtils
.
history
.
remove
(
[
"
https
:
/
/
not
-
"
+
url
]
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
https
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
:
"
https
:
/
/
"
+
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
PlacesUtils
.
history
.
remove
(
[
"
https
:
/
/
"
+
url
]
)
;
await
check_autocomplete
(
{
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
bookmarkBelowThreshold
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
not
-
"
+
url
}
]
)
;
}
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
let
placeFrecency
=
await
PlacesTestUtils
.
fieldInDB
(
"
http
:
/
/
"
+
url
"
frecency
"
)
;
let
originFrecency
=
await
getOriginFrecency
(
"
http
:
/
/
"
host
)
;
let
threshold
=
await
getOriginAutofillThreshold
(
)
;
Assert
.
ok
(
placeFrecency
<
threshold
Place
frecency
should
be
below
the
threshold
:
+
placeFrecency
=
{
placeFrecency
}
threshold
=
{
threshold
}
)
;
Assert
.
ok
(
originFrecency
<
threshold
Origin
frecency
should
be
below
the
threshold
:
+
originFrecency
=
{
originFrecency
}
threshold
=
{
threshold
}
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
not
-
"
+
url
comment
:
"
test
visit
for
http
:
/
/
not
-
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
bookmarkAboveThreshold
(
)
{
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
let
placeFrecency
=
await
PlacesTestUtils
.
fieldInDB
(
"
http
:
/
/
"
+
url
"
frecency
"
)
;
let
originFrecency
=
await
getOriginFrecency
(
"
http
:
/
/
"
host
)
;
let
threshold
=
await
getOriginAutofillThreshold
(
)
;
Assert
.
equal
(
placeFrecency
threshold
)
;
Assert
.
equal
(
originFrecency
threshold
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
zeroThreshold
(
)
{
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
let
placeFrecency
=
await
PlacesTestUtils
.
fieldInDB
(
"
http
:
/
/
"
+
url
"
frecency
"
)
;
Assert
.
ok
(
placeFrecency
<
=
0
)
;
let
originFrecency
=
await
getOriginFrecency
(
"
http
:
/
/
"
host
)
;
Assert
.
equal
(
originFrecency
0
)
;
let
threshold
=
await
getOriginAutofillThreshold
(
)
;
Assert
.
equal
(
threshold
0
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_visit
(
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
"
+
url
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
check_autocomplete
(
{
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_visit_prefix
(
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
"
+
url
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_bookmark_0
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_bookmark_1
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
addBookmark
(
{
uri
:
"
http
:
/
/
non
-
matching
-
"
+
url
}
)
;
await
check_autocomplete
(
{
search
matches
:
[
{
value
:
"
http
:
/
/
non
-
matching
-
"
+
url
comment
:
"
A
bookmark
"
style
:
[
"
bookmark
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_bookmark_prefix_0
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_bookmark_prefix_1
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
addBookmark
(
{
uri
:
"
ftp
:
/
/
"
+
url
}
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
ftp
:
/
/
"
+
url
comment
:
"
A
bookmark
"
style
:
[
"
bookmark
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_bookmark_prefix_2
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
addBookmark
(
{
uri
:
"
http
:
/
/
non
-
matching
-
"
+
url
}
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
http
:
/
/
non
-
matching
-
"
+
url
comment
:
"
A
bookmark
"
style
:
[
"
bookmark
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestHistoryFalse_bookmark_prefix_3
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
false
)
;
await
addBookmark
(
{
uri
:
"
ftp
:
/
/
non
-
matching
-
"
+
url
}
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
ftp
:
/
/
non
-
matching
-
"
+
url
comment
:
"
A
bookmark
"
style
:
[
"
bookmark
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_visit_0
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
"
+
url
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_visit_1
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
non
-
matching
-
"
+
url
)
;
await
check_autocomplete
(
{
search
matches
:
[
{
value
:
"
http
:
/
/
non
-
matching
-
"
+
url
comment
:
"
test
visit
for
http
:
/
/
non
-
matching
-
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_visit_prefix_0
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
"
+
url
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_visit_prefix_1
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
"
ftp
:
/
/
"
+
url
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
ftp
:
/
/
"
+
url
comment
:
"
test
visit
for
ftp
:
/
/
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_visit_prefix_2
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
non
-
matching
-
"
+
url
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
http
:
/
/
non
-
matching
-
"
+
url
comment
:
"
test
visit
for
http
:
/
/
non
-
matching
-
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_visit_prefix_3
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
PlacesTestUtils
.
addVisits
(
"
ftp
:
/
/
non
-
matching
-
"
+
url
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
{
value
:
"
ftp
:
/
/
non
-
matching
-
"
+
url
comment
:
"
test
visit
for
ftp
:
/
/
non
-
matching
-
"
+
url
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_bookmark
(
)
{
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
await
check_autocomplete
(
{
search
autofilled
:
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
suggestBookmarkFalse_bookmark_prefix
(
)
{
await
addBookmark
(
{
uri
:
"
http
:
/
/
"
+
url
}
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
autofilled
:
"
http
:
/
/
"
+
url
completed
:
"
http
:
/
/
"
+
url
matches
:
[
{
value
:
"
http
:
/
/
"
+
url
comment
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
false
)
;
await
check_autocomplete
(
{
search
:
"
http
:
/
/
"
+
search
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
}
async
function
getOriginFrecency
(
prefix
host
)
{
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
execute
(
SELECT
frecency
FROM
moz_origins
WHERE
prefix
=
:
prefix
AND
host
=
:
host
{
prefix
host
}
)
;
Assert
.
equal
(
rows
.
length
1
)
;
return
rows
[
0
]
.
getResultByIndex
(
0
)
;
}
async
function
getOriginFrecencyStats
(
)
{
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
execute
(
SELECT
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
'
origin_frecency_count
'
)
0
)
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
'
origin_frecency_sum
'
)
0
)
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
'
origin_frecency_sum_of_squares
'
)
0
)
)
;
let
count
=
rows
[
0
]
.
getResultByIndex
(
0
)
;
let
sum
=
rows
[
0
]
.
getResultByIndex
(
1
)
;
let
squares
=
rows
[
0
]
.
getResultByIndex
(
2
)
;
return
{
count
sum
squares
}
;
}
async
function
getOriginAutofillThreshold
(
)
{
let
{
count
sum
squares
}
=
await
getOriginFrecencyStats
(
)
;
if
(
!
count
)
{
return
0
;
}
if
(
count
=
=
1
)
{
return
sum
;
}
let
stddevMultiplier
=
UrlbarPrefs
.
get
(
"
autoFill
.
stddevMultiplier
"
)
;
return
(
sum
/
count
+
stddevMultiplier
*
Math
.
sqrt
(
(
squares
-
(
sum
*
sum
)
/
count
)
/
count
)
)
;
}
