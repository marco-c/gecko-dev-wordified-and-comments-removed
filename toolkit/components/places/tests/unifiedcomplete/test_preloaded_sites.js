const
PREF_FEATURE_ENABLED
=
"
browser
.
urlbar
.
usepreloadedtopurls
.
enabled
"
;
const
PREF_FEATURE_EXPIRE_DAYS
=
"
browser
.
urlbar
.
usepreloadedtopurls
.
expire_days
"
;
const
autocompleteObject
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
unifiedcomplete
"
]
.
getService
(
Ci
.
mozIPlacesAutoComplete
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
let
yahoooURI
=
NetUtil
.
newURI
(
"
https
:
/
/
yahooo
.
com
/
"
)
;
let
gooogleURI
=
NetUtil
.
newURI
(
"
https
:
/
/
gooogle
.
com
/
"
)
;
autocompleteObject
.
populatePreloadedSiteStorage
(
[
[
yahoooURI
.
spec
"
Yahooo
"
]
[
gooogleURI
.
spec
"
Gooogle
"
]
]
)
;
async
function
assert_feature_works
(
condition
)
{
info
(
"
List
Results
do
appear
"
+
condition
)
;
await
check_autocomplete
(
{
search
:
"
ooo
"
matches
:
[
{
uri
:
yahoooURI
title
:
"
Yahooo
"
style
:
[
"
preloaded
-
top
-
site
"
]
}
{
uri
:
gooogleURI
title
:
"
Gooogle
"
style
:
[
"
preloaded
-
top
-
site
"
]
}
]
}
)
;
info
(
"
Autofill
does
appear
"
+
condition
)
;
await
check_autocomplete
(
{
search
:
"
gooo
"
autofilled
:
"
gooogle
.
com
/
"
completed
:
"
https
:
/
/
gooogle
.
com
/
"
}
)
;
}
async
function
assert_feature_does_not_appear
(
condition
)
{
info
(
"
List
Results
don
'
t
appear
"
+
condition
)
;
await
check_autocomplete
(
{
search
:
"
ooo
"
matches
:
[
]
}
)
;
info
(
"
Autofill
doesn
'
t
appear
"
+
condition
)
;
await
check_autocomplete
(
{
search
:
"
gooo
"
autofilled
:
"
gooo
"
completed
:
"
gooo
"
}
)
;
}
add_task
(
async
function
test_it_works
(
)
{
Services
.
prefs
.
setIntPref
(
PREF_FEATURE_EXPIRE_DAYS
14
)
;
Services
.
prefs
.
setBoolPref
(
PREF_FEATURE_ENABLED
false
)
;
await
assert_feature_does_not_appear
(
"
when
OFF
by
prefs
"
)
;
Services
.
prefs
.
setBoolPref
(
PREF_FEATURE_ENABLED
true
)
;
await
assert_feature_works
(
"
when
ON
by
prefs
"
)
;
Services
.
prefs
.
setIntPref
(
PREF_FEATURE_EXPIRE_DAYS
0
)
;
await
assert_feature_does_not_appear
(
"
when
expired
"
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_sorting_against_bookmark
(
)
{
let
boookmarkURI
=
NetUtil
.
newURI
(
"
https
:
/
/
boookmark
.
com
"
)
;
await
addBookmark
(
{
uri
:
boookmarkURI
title
:
"
Boookmark
"
}
)
;
Services
.
prefs
.
setBoolPref
(
PREF_FEATURE_ENABLED
true
)
;
Services
.
prefs
.
setIntPref
(
PREF_FEATURE_EXPIRE_DAYS
14
)
;
info
(
"
Preloaded
Top
Sites
are
placed
lower
than
Bookmarks
"
)
;
await
check_autocomplete
(
{
checkSorting
:
true
search
:
"
ooo
"
matches
:
[
{
uri
:
boookmarkURI
title
:
"
Boookmark
"
style
:
[
"
bookmark
"
]
}
{
uri
:
yahoooURI
title
:
"
Yahooo
"
style
:
[
"
preloaded
-
top
-
site
"
]
}
{
uri
:
gooogleURI
title
:
"
Gooogle
"
style
:
[
"
preloaded
-
top
-
site
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_sorting_against_history
(
)
{
let
histoooryURI
=
NetUtil
.
newURI
(
"
https
:
/
/
histooory
.
com
"
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
histoooryURI
title
:
"
Histooory
"
}
)
;
Services
.
prefs
.
setBoolPref
(
PREF_FEATURE_ENABLED
true
)
;
Services
.
prefs
.
setIntPref
(
PREF_FEATURE_EXPIRE_DAYS
14
)
;
info
(
"
Preloaded
Top
Sites
are
placed
lower
than
History
entries
"
)
;
await
check_autocomplete
(
{
checkSorting
:
true
search
:
"
ooo
"
matches
:
[
{
uri
:
histoooryURI
title
:
"
Histooory
"
}
{
uri
:
yahoooURI
title
:
"
Yahooo
"
style
:
[
"
preloaded
-
top
-
site
"
]
}
{
uri
:
gooogleURI
title
:
"
Gooogle
"
style
:
[
"
preloaded
-
top
-
site
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_scheme_and_www
(
)
{
let
sites
=
[
[
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
"
Ooops
"
]
[
"
https
:
/
/
ooops
-
https
.
com
/
"
"
Ooops
"
]
[
"
HTTP
:
/
/
ooops
-
HTTP
.
com
/
"
"
Ooops
"
]
[
"
HTTP
:
/
/
www
.
ooops
-
HTTP
-
www
.
com
/
"
"
Ooops
"
]
[
"
https
:
/
/
foo
.
com
/
"
"
Title
with
www
"
]
[
"
https
:
/
/
www
.
bar
.
com
/
"
"
Tile
"
]
]
;
let
titlesMap
=
new
Map
(
sites
)
;
autocompleteObject
.
populatePreloadedSiteStorage
(
sites
)
;
let
tests
=
[
[
"
https
:
/
/
"
"
https
:
/
/
"
"
https
:
/
/
"
[
]
]
[
"
www
.
"
"
www
.
"
"
www
.
"
[
]
]
[
"
http
:
/
/
www
.
"
"
http
:
/
/
www
.
"
"
http
:
/
/
www
.
"
[
]
]
[
"
ftp
:
/
/
ooops
"
"
ftp
:
/
/
ooops
"
"
ftp
:
/
/
ooops
"
[
]
]
[
"
ww
"
"
www
.
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
[
[
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
"
]
"
HTTP
:
/
/
www
.
ooops
-
HTTP
-
www
.
com
/
"
[
"
https
:
/
/
foo
.
com
/
"
"
Title
with
www
"
[
"
preloaded
-
top
-
site
"
]
]
"
https
:
/
/
www
.
bar
.
com
/
"
]
]
[
"
ooops
"
"
ooops
-
https
.
com
/
"
"
https
:
/
/
ooops
-
https
.
com
/
"
[
[
"
https
:
/
/
ooops
-
https
.
com
/
"
"
https
:
/
/
ooops
-
https
.
com
"
]
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
"
HTTP
:
/
/
ooops
-
HTTP
.
com
/
"
"
HTTP
:
/
/
www
.
ooops
-
HTTP
-
www
.
com
/
"
]
]
[
"
www
.
ooops
"
"
www
.
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
[
[
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
"
]
"
HTTP
:
/
/
www
.
ooops
-
HTTP
-
www
.
com
/
"
"
https
:
/
/
ooops
-
https
.
com
/
"
"
HTTP
:
/
/
ooops
-
HTTP
.
com
/
"
]
]
[
"
ooops
-
https
-
www
"
"
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
[
[
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
"
]
]
]
[
"
www
.
ooops
-
https
.
"
"
www
.
ooops
-
https
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
.
com
/
"
[
[
"
https
:
/
/
www
.
ooops
-
https
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
.
com
"
]
"
https
:
/
/
ooops
-
https
.
com
/
"
]
]
[
"
https
:
/
/
ooops
"
"
https
:
/
/
ooops
-
https
.
com
/
"
"
https
:
/
/
ooops
-
https
.
com
/
"
[
[
"
https
:
/
/
ooops
-
https
.
com
/
"
"
https
:
/
/
ooops
-
https
.
com
"
]
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
]
]
[
"
https
:
/
/
www
.
ooops
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
[
[
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
/
"
"
https
:
/
/
www
.
ooops
-
https
-
www
.
com
"
]
"
https
:
/
/
ooops
-
https
.
com
/
"
]
]
[
"
http
:
/
/
www
.
ooops
-
http
.
"
"
http
:
/
/
www
.
ooops
-
http
.
com
/
"
"
http
:
/
/
www
.
ooops
-
http
.
com
/
"
[
[
"
HTTP
:
/
/
www
.
ooops
-
HTTP
.
com
/
"
"
www
.
ooops
-
http
.
com
"
]
"
HTTP
:
/
/
ooops
-
HTTP
.
com
/
"
]
]
[
"
http
:
/
/
ooops
-
https
"
"
http
:
/
/
ooops
-
https
"
"
http
:
/
/
ooops
-
https
"
[
]
]
]
;
function
toMatch
(
entry
index
)
{
if
(
Array
.
isArray
(
entry
)
)
{
return
{
uri
:
NetUtil
.
newURI
(
entry
[
0
]
)
title
:
entry
[
1
]
style
:
entry
[
2
]
|
|
[
"
autofill
"
"
heuristic
"
"
preloaded
-
top
-
site
"
]
}
;
}
return
{
uri
:
NetUtil
.
newURI
(
entry
)
title
:
titlesMap
.
get
(
entry
)
style
:
[
"
preloaded
-
top
-
site
"
]
}
;
}
for
(
let
test
of
tests
)
{
let
matches
=
test
[
3
]
?
test
[
3
]
.
map
(
toMatch
)
:
null
;
info
(
"
User
types
:
"
+
test
[
0
]
)
;
await
check_autocomplete
(
{
checkSorting
:
true
search
:
test
[
0
]
autofilled
:
test
[
1
]
.
toLowerCase
(
)
completed
:
test
[
2
]
.
toLowerCase
(
)
matches
}
)
;
}
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_data_file
(
)
{
let
response
=
await
fetch
(
"
chrome
:
/
/
global
/
content
/
unifiedcomplete
-
top
-
urls
.
json
"
)
;
info
(
"
Source
file
is
supplied
and
fetched
OK
"
)
;
Assert
.
ok
(
response
.
ok
)
;
info
(
"
The
JSON
is
parsed
"
)
;
let
sites
=
await
response
.
json
(
)
;
info
(
"
Storage
is
populated
"
)
;
autocompleteObject
.
populatePreloadedSiteStorage
(
sites
)
;
let
lastSite
=
sites
.
pop
(
)
;
let
uri
=
NetUtil
.
newURI
(
lastSite
[
0
]
)
;
info
(
"
Storage
is
populated
from
JSON
correctly
"
)
;
await
check_autocomplete
(
{
search
:
uri
.
host
autofilled
:
uri
.
host
+
"
/
"
completed
:
uri
.
spec
}
)
;
await
cleanup
(
)
;
}
)
;
