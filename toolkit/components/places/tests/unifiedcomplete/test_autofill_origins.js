"
use
strict
"
;
addAutofillTasks
(
true
)
;
add_task
(
async
function
trailingSlash
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
example
.
com
/
"
autofilled
:
"
example
.
com
/
"
completed
:
"
http
:
/
/
example
.
com
/
"
matches
:
[
{
value
:
"
example
.
com
/
"
comment
:
"
example
.
com
/
"
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
trailingSlashWWW
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
example
.
com
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
example
.
com
/
"
autofilled
:
"
example
.
com
/
"
completed
:
"
http
:
/
/
www
.
example
.
com
/
"
matches
:
[
{
value
:
"
example
.
com
/
"
comment
:
"
www
.
example
.
com
/
"
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
port
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
:
8888
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
autofilled
:
"
example
.
com
:
8888
/
"
completed
:
"
http
:
/
/
example
.
com
:
8888
/
"
matches
:
[
{
value
:
"
example
.
com
:
8888
/
"
comment
:
"
example
.
com
:
8888
"
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
portPartial
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
:
8888
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
example
.
com
:
8
"
autofilled
:
"
example
.
com
:
8888
/
"
completed
:
"
http
:
/
/
example
.
com
:
8888
/
"
matches
:
[
{
value
:
"
example
.
com
:
8888
/
"
comment
:
"
example
.
com
:
8888
"
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
portNoMatch1
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
:
8888
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
example
.
com
:
89
"
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
portNoMatch2
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
:
8888
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
example
.
com
:
9
"
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
trailingSlash
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
example
/
"
matches
:
[
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
multidotted
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
www
.
example
.
co
.
jp
:
8888
/
"
}
]
)
;
await
check_autocomplete
(
{
search
:
"
www
.
example
.
co
.
"
completed
:
"
http
:
/
/
www
.
example
.
co
.
jp
:
8888
/
"
matches
:
[
{
value
:
"
www
.
example
.
co
.
jp
:
8888
/
"
comment
:
"
www
.
example
.
co
.
jp
:
8888
"
style
:
[
"
autofill
"
"
heuristic
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
groupByHost
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
/
"
}
{
uri
:
"
https
:
/
/
example
.
com
/
"
}
{
uri
:
"
https
:
/
/
example
.
com
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
]
)
;
let
httpFrec
=
frecencyForUrl
(
"
http
:
/
/
example
.
com
/
"
)
;
let
httpsFrec
=
frecencyForUrl
(
"
https
:
/
/
example
.
com
/
"
)
;
let
otherFrec
=
frecencyForUrl
(
"
https
:
/
/
mozilla
.
org
/
"
)
;
Assert
.
ok
(
httpFrec
<
httpsFrec
"
Sanity
check
"
)
;
Assert
.
ok
(
httpsFrec
<
otherFrec
"
Sanity
check
"
)
;
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
execute
(
SELECT
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
"
origin_frecency_count
"
)
0
)
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
"
origin_frecency_sum
"
)
0
)
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
"
origin_frecency_sum_of_squares
"
)
0
)
)
;
let
count
=
rows
[
0
]
.
getResultByIndex
(
0
)
;
let
sum
=
rows
[
0
]
.
getResultByIndex
(
1
)
;
let
squares
=
rows
[
0
]
.
getResultByIndex
(
2
)
;
let
stddevMultiplier
=
Services
.
prefs
.
getFloatPref
(
"
browser
.
urlbar
.
autoFill
.
stddevMultiplier
"
0
.
0
)
;
let
threshold
=
(
sum
/
count
)
+
(
stddevMultiplier
*
Math
.
sqrt
(
(
squares
-
(
(
sum
*
sum
)
/
count
)
)
/
count
)
)
;
Assert
.
ok
(
httpFrec
<
threshold
"
http
origin
should
be
<
threshold
"
)
;
Assert
.
ok
(
httpsFrec
<
threshold
"
https
origin
should
be
<
threshold
"
)
;
Assert
.
ok
(
threshold
<
=
otherFrec
"
Other
origin
should
cross
threshold
"
)
;
Assert
.
ok
(
threshold
<
=
httpFrec
+
httpsFrec
"
http
and
https
origin
added
together
should
cross
threshold
"
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
autofilled
:
"
example
.
com
/
"
completed
:
"
https
:
/
/
example
.
com
/
"
matches
:
[
{
value
:
"
example
.
com
/
"
comment
:
"
https
:
/
/
example
.
com
"
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
example
.
com
/
"
comment
:
"
test
visit
for
http
:
/
/
example
.
com
/
"
style
:
[
"
favicon
"
]
}
]
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
groupByHostNonDefaultStddevMultiplier
(
)
{
let
stddevMultiplier
=
1
.
5
;
Services
.
prefs
.
setCharPref
(
"
browser
.
urlbar
.
autoFill
.
stddevMultiplier
"
Number
(
stddevMultiplier
)
.
toFixed
(
1
)
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
/
"
}
{
uri
:
"
http
:
/
/
example
.
com
/
"
}
{
uri
:
"
https
:
/
/
example
.
com
/
"
}
{
uri
:
"
https
:
/
/
example
.
com
/
"
}
{
uri
:
"
https
:
/
/
example
.
com
/
"
}
{
uri
:
"
https
:
/
/
foo
.
com
/
"
}
{
uri
:
"
https
:
/
/
foo
.
com
/
"
}
{
uri
:
"
https
:
/
/
foo
.
com
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
{
uri
:
"
https
:
/
/
mozilla
.
org
/
"
}
]
)
;
let
httpFrec
=
frecencyForUrl
(
"
http
:
/
/
example
.
com
/
"
)
;
let
httpsFrec
=
frecencyForUrl
(
"
https
:
/
/
example
.
com
/
"
)
;
let
otherFrec
=
frecencyForUrl
(
"
https
:
/
/
mozilla
.
org
/
"
)
;
Assert
.
ok
(
httpFrec
<
httpsFrec
"
Sanity
check
"
)
;
Assert
.
ok
(
httpsFrec
<
otherFrec
"
Sanity
check
"
)
;
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
execute
(
SELECT
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
"
origin_frecency_count
"
)
0
)
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
"
origin_frecency_sum
"
)
0
)
IFNULL
(
(
SELECT
value
FROM
moz_meta
WHERE
key
=
"
origin_frecency_sum_of_squares
"
)
0
)
)
;
let
count
=
rows
[
0
]
.
getResultByIndex
(
0
)
;
let
sum
=
rows
[
0
]
.
getResultByIndex
(
1
)
;
let
squares
=
rows
[
0
]
.
getResultByIndex
(
2
)
;
let
threshold
=
(
sum
/
count
)
+
(
stddevMultiplier
*
Math
.
sqrt
(
(
squares
-
(
(
sum
*
sum
)
/
count
)
)
/
count
)
)
;
Assert
.
ok
(
httpFrec
<
threshold
"
http
origin
should
be
<
threshold
"
)
;
Assert
.
ok
(
httpsFrec
<
threshold
"
https
origin
should
be
<
threshold
"
)
;
Assert
.
ok
(
threshold
<
=
otherFrec
"
Other
origin
should
cross
threshold
"
)
;
Assert
.
ok
(
threshold
<
=
httpFrec
+
httpsFrec
"
http
and
https
origin
added
together
should
cross
threshold
"
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
autofilled
:
"
example
.
com
/
"
completed
:
"
https
:
/
/
example
.
com
/
"
matches
:
[
{
value
:
"
example
.
com
/
"
comment
:
"
https
:
/
/
example
.
com
"
style
:
[
"
autofill
"
"
heuristic
"
]
}
{
value
:
"
http
:
/
/
example
.
com
/
"
comment
:
"
test
visit
for
http
:
/
/
example
.
com
/
"
style
:
[
"
favicon
"
]
}
]
}
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
.
stddevMultiplier
"
)
;
await
cleanup
(
)
;
}
)
;
