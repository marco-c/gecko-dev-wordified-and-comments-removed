"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
username
"
"
someone
somewhere
.
com
"
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
registerEngines
"
"
"
)
;
function
MockTabsEngine
(
)
{
this
.
clients
=
null
;
}
MockTabsEngine
.
prototype
=
{
name
:
"
tabs
"
getAllClients
(
)
{
return
this
.
clients
;
}
}
;
let
MockClientsEngine
=
{
isMobile
(
guid
)
{
Assert
.
ok
(
guid
.
endsWith
(
"
desktop
"
)
|
|
guid
.
endsWith
(
"
mobile
"
)
)
;
return
guid
.
endsWith
(
"
mobile
"
)
;
}
}
;
Weave
.
Service
.
engineManager
.
register
(
MockTabsEngine
)
;
Weave
.
Service
.
clientsEngine
=
MockClientsEngine
;
let
weaveXPCService
=
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
weaveXPCService
.
ready
=
true
;
function
configureEngine
(
clients
)
{
let
engine
=
Weave
.
Service
.
engineManager
.
get
(
"
tabs
"
)
;
engine
.
clients
=
clients
;
Services
.
obs
.
notifyObservers
(
null
"
weave
:
engine
:
sync
:
finish
"
"
tabs
"
)
;
}
function
makeRemoteTabMatch
(
url
deviceName
extra
=
{
}
)
{
return
{
uri
:
makeActionURI
(
"
remotetab
"
{
url
deviceName
}
)
title
:
extra
.
title
|
|
url
style
:
[
"
action
"
"
remotetab
"
]
icon
:
extra
.
icon
}
;
}
add_task
(
async
function
test_nomatch
(
)
{
configureEngine
(
{
guid_desktop
:
{
clientName
:
"
My
Desktop
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
}
]
}
}
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
searchParam
:
"
enable
-
actions
"
matches
:
[
makeSearchMatch
(
"
ex
"
{
heuristic
:
true
}
)
]
}
)
;
}
)
;
add_task
(
async
function
test_minimal
(
)
{
configureEngine
(
{
guid_desktop
:
{
clientName
:
"
My
Desktop
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
}
]
}
}
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
searchParam
:
"
enable
-
actions
"
matches
:
[
makeSearchMatch
(
"
ex
"
{
heuristic
:
true
}
)
makeRemoteTabMatch
(
"
http
:
/
/
example
.
com
/
"
"
My
Desktop
"
)
]
}
)
;
}
)
;
add_task
(
async
function
test_maximal
(
)
{
configureEngine
(
{
guid_mobile
:
{
clientName
:
"
My
Phone
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
title
:
"
An
Example
"
icon
:
"
http
:
/
/
favicon
"
}
]
}
}
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
searchParam
:
"
enable
-
actions
"
matches
:
[
makeSearchMatch
(
"
ex
"
{
heuristic
:
true
}
)
makeRemoteTabMatch
(
"
http
:
/
/
example
.
com
/
"
"
My
Phone
"
{
title
:
"
An
Example
"
icon
:
"
moz
-
anno
:
favicon
:
http
:
/
/
favicon
/
"
}
)
]
}
)
;
}
)
;
add_task
(
async
function
test_noShowIcons
(
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
false
)
;
configureEngine
(
{
guid_mobile
:
{
clientName
:
"
My
Phone
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
title
:
"
An
Example
"
icon
:
"
http
:
/
/
favicon
"
}
]
}
}
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
searchParam
:
"
enable
-
actions
"
matches
:
[
makeSearchMatch
(
"
ex
"
{
heuristic
:
true
}
)
makeRemoteTabMatch
(
"
http
:
/
/
example
.
com
/
"
"
My
Phone
"
{
title
:
"
An
Example
"
icon
:
"
"
}
)
]
}
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
)
;
}
)
;
add_task
(
async
function
test_matches_title
(
)
{
configureEngine
(
{
guid_mobile
:
{
clientName
:
"
My
Phone
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
title
:
"
An
Example
"
}
]
}
}
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
searchParam
:
"
enable
-
actions
"
matches
:
[
makeSearchMatch
(
"
ex
"
{
heuristic
:
true
}
)
makeRemoteTabMatch
(
"
http
:
/
/
foo
.
com
/
"
"
My
Phone
"
{
title
:
"
An
Example
"
}
)
]
}
)
;
}
)
;
add_task
(
async
function
test_localtab_matches_override
(
)
{
configureEngine
(
{
guid_mobile
:
{
clientName
:
"
My
Phone
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
title
:
"
An
Example
"
}
]
}
}
)
;
let
uri
=
NetUtil
.
newURI
(
"
http
:
/
/
foo
.
com
/
"
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
title
:
"
An
Example
"
}
]
)
;
addOpenPages
(
uri
1
)
;
await
check_autocomplete
(
{
search
:
"
ex
"
searchParam
:
"
enable
-
actions
"
matches
:
[
makeSearchMatch
(
"
ex
"
{
heuristic
:
true
}
)
makeSwitchToTabMatch
(
"
http
:
/
/
foo
.
com
/
"
{
title
:
"
An
Example
"
}
)
]
}
)
;
}
)
;
