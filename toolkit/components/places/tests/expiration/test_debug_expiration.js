var
gNow
=
getExpirablePRTime
(
60
)
;
add_task
(
async
function
test_expire_orphans
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
http
:
/
/
page3
.
mozilla
.
org
/
"
title
:
"
"
}
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
await
promiseForceExpirationStep
(
0
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
page3
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_orphans_optionalarg
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
http
:
/
/
page3
.
mozilla
.
org
/
"
title
:
"
"
}
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
await
promiseForceExpirationStep
(
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
page3
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_limited
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
new
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
]
)
;
await
promiseForceExpirationStep
(
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
new
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_limited_longurl
(
)
{
let
longurl
=
"
http
:
/
/
long
.
mozilla
.
org
/
"
+
"
a
"
.
repeat
(
232
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
longurl
visitDate
:
gNow
+
+
}
{
uri
:
longurl
visitDate
:
getExpirablePRTime
(
58
)
}
]
)
;
await
promiseForceExpirationStep
(
1
)
;
Assert
.
equal
(
visits_in_database
(
longurl
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_limited_exoticurl
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
download
.
mozilla
.
org
"
visitDate
:
gNow
+
+
transition
:
7
}
{
uri
:
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
"
visitDate
:
getExpirablePRTime
(
58
)
transition
:
7
}
]
)
;
await
promiseForceExpirationStep
(
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
download
.
mozilla
.
org
/
"
)
0
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_unlimited
(
)
{
let
longurl
=
"
http
:
/
/
long
.
mozilla
.
org
/
"
+
"
a
"
.
repeat
(
232
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
new
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
download
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
transition
:
PlacesUtils
.
history
.
TRANSITION_DOWNLOAD
}
{
uri
:
longurl
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
nonexpirable
.
mozilla
.
org
/
"
visitDate
:
getExpirablePRTime
(
5
)
}
{
uri
:
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
/
"
visitDate
:
getExpirablePRTime
(
5
)
transition
:
PlacesUtils
.
history
.
TRANSITION_DOWNLOAD
}
{
uri
:
longurl
visitDate
:
getExpirablePRTime
(
5
)
}
]
)
;
await
promiseForceExpirationStep
(
-
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
nonexpirable
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
longurl
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
download
.
mozilla
.
org
/
"
)
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
new
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_icons
(
)
{
const
dataUrl
=
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAA
"
+
"
AAAA6fptVAAAACklEQVQI12NgAAAAAgAB4iG8MwAAAABJRU5ErkJggg
=
=
"
;
const
entries
=
[
{
desc
:
"
Not
expired
because
recent
"
page
:
"
https
:
/
/
recent
.
notexpired
.
org
/
"
icon
:
"
https
:
/
/
recent
.
notexpired
.
org
/
test_icon
.
png
"
root
:
"
https
:
/
/
recent
.
notexpired
.
org
/
favicon
.
ico
"
iconExpired
:
false
removed
:
false
}
{
desc
:
"
Not
expired
because
recent
no
root
"
page
:
"
https
:
/
/
recentnoroot
.
notexpired
.
org
/
"
icon
:
"
https
:
/
/
recentnoroot
.
notexpired
.
org
/
test_icon
.
png
"
iconExpired
:
false
removed
:
false
}
{
desc
:
"
Expired
because
old
with
root
"
page
:
"
https
:
/
/
oldroot
.
expired
.
org
/
"
icon
:
"
https
:
/
/
oldroot
.
expired
.
org
/
test_icon
.
png
"
root
:
"
https
:
/
/
oldroot
.
expired
.
org
/
favicon
.
ico
"
iconExpired
:
true
removed
:
true
}
{
desc
:
"
Not
expired
because
bookmarked
even
if
old
with
root
"
page
:
"
https
:
/
/
oldrootbm
.
notexpired
.
org
/
"
icon
:
"
https
:
/
/
oldrootbm
.
notexpired
.
org
/
test_icon
.
png
"
root
:
"
https
:
/
/
oldrootbm
.
notexpired
.
org
/
favicon
.
ico
"
bookmarked
:
true
iconExpired
:
true
removed
:
false
}
{
desc
:
"
Not
Expired
because
old
but
has
no
root
"
page
:
"
https
:
/
/
old
.
notexpired
.
org
/
"
icon
:
"
https
:
/
/
old
.
notexpired
.
org
/
test_icon
.
png
"
iconExpired
:
true
removed
:
false
}
{
desc
:
"
Expired
because
it
'
s
an
orphan
page
"
page
:
"
http
:
/
/
root
.
ref
.
org
/
#
test
"
icon
:
undefined
iconExpired
:
false
removed
:
true
}
{
desc
:
"
Expired
because
it
'
s
an
orphan
page
"
page
:
"
http
:
/
/
root
.
ref
.
org
/
#
test
"
icon
:
undefined
skipHistory
:
true
iconExpired
:
false
removed
:
true
}
]
;
for
(
let
entry
of
entries
)
{
if
(
!
entry
.
skipHistory
)
{
await
PlacesTestUtils
.
addVisits
(
entry
.
page
)
;
}
if
(
entry
.
bookmarked
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
url
:
entry
.
page
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
}
)
;
}
if
(
entry
.
icon
)
{
PlacesUtils
.
favicons
.
replaceFaviconDataFromDataURL
(
Services
.
io
.
newURI
(
entry
.
icon
)
dataUrl
0
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
await
PlacesTestUtils
.
addFavicons
(
new
Map
(
[
[
entry
.
page
entry
.
icon
]
]
)
)
;
Assert
.
equal
(
await
getFaviconUrlForPage
(
entry
.
page
)
entry
.
icon
"
Sanity
check
the
icon
exists
"
)
;
}
else
{
await
PlacesUtils
.
withConnectionWrapper
(
"
addOrphanPage
"
async
db
=
>
{
await
db
.
execute
(
INSERT
INTO
moz_pages_w_icons
(
page_url
page_url_hash
)
VALUES
(
:
url
hash
(
:
url
)
)
{
url
:
entry
.
page
}
)
;
}
)
;
}
if
(
entry
.
root
)
{
PlacesUtils
.
favicons
.
replaceFaviconDataFromDataURL
(
Services
.
io
.
newURI
(
entry
.
root
)
dataUrl
0
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
await
PlacesTestUtils
.
addFavicons
(
new
Map
(
[
[
entry
.
page
entry
.
root
]
]
)
)
;
}
if
(
entry
.
iconExpired
)
{
await
PlacesUtils
.
withConnectionWrapper
(
"
expireFavicon
"
async
db
=
>
{
await
db
.
execute
(
UPDATE
moz_icons_to_pages
SET
expire_ms
=
1
WHERE
icon_id
=
(
SELECT
id
FROM
moz_icons
WHERE
icon_url
=
:
url
)
{
url
:
entry
.
icon
}
)
;
if
(
entry
.
root
)
{
await
db
.
execute
(
UPDATE
moz_icons
SET
expire_ms
=
1
WHERE
icon_url
=
:
url
{
url
:
entry
.
root
}
)
;
}
}
)
;
}
if
(
entry
.
icon
)
{
Assert
.
equal
(
await
getFaviconUrlForPage
(
entry
.
page
)
entry
.
icon
"
Sanity
check
the
initial
icon
value
"
)
;
}
}
info
(
"
Run
expiration
"
)
;
await
promiseForceExpirationStep
(
-
1
)
;
info
(
"
Check
expiration
"
)
;
for
(
let
entry
of
entries
)
{
Assert
.
ok
(
page_in_database
(
entry
.
page
)
)
;
if
(
!
entry
.
removed
)
{
Assert
.
equal
(
await
getFaviconUrlForPage
(
entry
.
page
)
entry
.
icon
entry
.
desc
)
;
continue
;
}
if
(
entry
.
root
)
{
Assert
.
equal
(
await
getFaviconUrlForPage
(
entry
.
page
)
entry
.
root
entry
.
desc
)
;
continue
;
}
if
(
entry
.
icon
)
{
await
Assert
.
rejects
(
getFaviconUrlForPage
(
entry
.
page
)
/
Unable
to
find
an
icon
/
entry
.
desc
)
;
continue
;
}
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
execute
(
SELECT
count
(
*
)
FROM
moz_pages_w_icons
WHERE
page_url_hash
=
hash
(
:
url
)
{
url
:
entry
.
page
}
)
;
Assert
.
equal
(
rows
[
0
]
.
getResultByIndex
(
0
)
0
"
Orphan
page
was
removed
"
)
;
}
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
function
run_test
(
)
{
setInterval
(
3600
)
;
setMaxPages
(
1
)
;
run_next_test
(
)
;
}
