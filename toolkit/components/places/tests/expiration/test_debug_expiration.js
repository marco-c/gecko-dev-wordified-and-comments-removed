var
gNow
=
getExpirablePRTime
(
60
)
;
add_task
(
async
function
test_expire_orphans
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
http
:
/
/
page3
.
mozilla
.
org
/
"
title
:
"
"
}
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
await
promiseForceExpirationStep
(
0
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
page3
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_orphans_optionalarg
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
visitDate
:
gNow
+
+
}
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
http
:
/
/
page3
.
mozilla
.
org
/
"
title
:
"
"
}
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
await
promiseForceExpirationStep
(
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page1
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
page2
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
page3
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_limited
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
new
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
]
)
;
await
promiseForceExpirationStep
(
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
new
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_limited_longurl
(
)
{
let
longurl
=
"
http
:
/
/
long
.
mozilla
.
org
/
"
+
"
a
"
.
repeat
(
232
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
longurl
visitDate
:
gNow
+
+
}
{
uri
:
longurl
visitDate
:
getExpirablePRTime
(
58
)
}
]
)
;
await
promiseForceExpirationStep
(
1
)
;
Assert
.
equal
(
visits_in_database
(
longurl
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_limited_exoticurl
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
download
.
mozilla
.
org
"
visitDate
:
gNow
+
+
transition
:
7
}
{
uri
:
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
"
visitDate
:
getExpirablePRTime
(
58
)
transition
:
7
}
]
)
;
await
promiseForceExpirationStep
(
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
download
.
mozilla
.
org
/
"
)
0
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_expire_unlimited
(
)
{
let
longurl
=
"
http
:
/
/
long
.
mozilla
.
org
/
"
+
"
a
"
.
repeat
(
232
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
old
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
new
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
download
.
mozilla
.
org
/
"
visitDate
:
gNow
+
+
transition
:
PlacesUtils
.
history
.
TRANSITION_DOWNLOAD
}
{
uri
:
longurl
visitDate
:
gNow
+
+
}
{
uri
:
"
http
:
/
/
nonexpirable
.
mozilla
.
org
/
"
visitDate
:
getExpirablePRTime
(
5
)
}
{
uri
:
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
/
"
visitDate
:
getExpirablePRTime
(
5
)
transition
:
PlacesUtils
.
history
.
TRANSITION_DOWNLOAD
}
{
uri
:
longurl
visitDate
:
getExpirablePRTime
(
5
)
}
]
)
;
await
promiseForceExpirationStep
(
-
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
nonexpirable
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
"
http
:
/
/
nonexpirable
-
download
.
mozilla
.
org
/
"
)
1
)
;
Assert
.
equal
(
visits_in_database
(
longurl
)
1
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
old
.
mozilla
.
org
/
"
)
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
download
.
mozilla
.
org
/
"
)
)
;
Assert
.
ok
(
!
page_in_database
(
"
http
:
/
/
new
.
mozilla
.
org
/
"
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
function
run_test
(
)
{
setInterval
(
3600
)
;
setMaxPages
(
1
)
;
run_next_test
(
)
;
}
