var
as
=
Cc
[
"
mozilla
.
org
/
browser
/
annotation
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAnnotationService
)
;
add_task
(
async
function
test_annos_expire_session
(
)
{
setInterval
(
3600
)
;
let
now
=
Date
.
now
(
)
*
1000
;
for
(
let
i
=
0
;
i
<
10
;
i
+
+
)
{
let
pageURI
=
uri
(
"
http
:
/
/
session_page_anno
.
"
+
i
+
"
.
mozilla
.
org
/
"
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
pageURI
visitDate
:
now
+
+
}
)
;
as
.
setPageAnnotation
(
pageURI
"
test1
"
"
test
"
0
as
.
EXPIRE_SESSION
)
;
as
.
setPageAnnotation
(
pageURI
"
test2
"
"
test
"
0
as
.
EXPIRE_SESSION
)
;
}
for
(
let
i
=
0
;
i
<
10
;
i
+
+
)
{
let
pageURI
=
uri
(
"
http
:
/
/
session_item_anno
.
"
+
i
+
"
.
mozilla
.
org
/
"
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
pageURI
title
:
null
}
)
;
let
id
=
await
PlacesUtils
.
promiseItemId
(
bm
.
guid
)
;
as
.
setItemAnnotation
(
id
"
test1
"
"
test
"
0
as
.
EXPIRE_SESSION
)
;
as
.
setItemAnnotation
(
id
"
test2
"
"
test
"
0
as
.
EXPIRE_SESSION
)
;
}
let
pages
=
as
.
getPagesWithAnnotation
(
"
test1
"
)
;
Assert
.
equal
(
pages
.
length
10
)
;
pages
=
as
.
getPagesWithAnnotation
(
"
test2
"
)
;
Assert
.
equal
(
pages
.
length
10
)
;
let
items
=
as
.
getItemsWithAnnotation
(
"
test1
"
)
;
Assert
.
equal
(
items
.
length
10
)
;
items
=
as
.
getItemsWithAnnotation
(
"
test2
"
)
;
Assert
.
equal
(
items
.
length
10
)
;
await
new
Promise
(
resolve
=
>
{
waitForConnectionClosed
(
function
(
)
{
let
stmt
=
DBConn
(
true
)
.
createAsyncStatement
(
SELECT
id
FROM
moz_annos
UNION
ALL
SELECT
id
FROM
moz_items_annos
WHERE
expiration
=
:
expiration
)
;
stmt
.
params
.
expiration
=
as
.
EXPIRE_SESSION
;
stmt
.
executeAsync
(
{
handleResult
(
aResultSet
)
{
dump_table
(
"
moz_annos
"
)
;
dump_table
(
"
moz_items_annos
"
)
;
do_throw
(
"
Should
not
find
any
leftover
session
annotations
"
)
;
}
handleError
(
aError
)
{
do_throw
(
"
Error
code
"
+
aError
.
result
+
"
with
message
'
"
+
aError
.
message
+
"
'
returned
.
"
)
;
}
handleCompletion
(
aReason
)
{
Assert
.
equal
(
aReason
Ci
.
mozIStorageStatementCallback
.
REASON_FINISHED
)
;
resolve
(
)
;
}
}
)
;
stmt
.
finalize
(
)
;
}
)
;
}
)
;
}
)
;
