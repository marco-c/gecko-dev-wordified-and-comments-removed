var
tests
=
[
{
desc
:
"
Add
1
bookmarked
page
.
"
addPages
:
1
visitsPerPage
:
1
addBookmarks
:
1
limitExpiration
:
-
1
expectedNotifications
:
1
expectedIsPartialRemoval
:
true
}
{
desc
:
"
Add
2
pages
1
bookmarked
.
"
addPages
:
2
visitsPerPage
:
1
addBookmarks
:
1
limitExpiration
:
-
1
expectedNotifications
:
1
expectedIsPartialRemoval
:
true
}
{
desc
:
"
Add
10
pages
none
bookmarked
.
"
addPages
:
10
visitsPerPage
:
1
addBookmarks
:
0
limitExpiration
:
-
1
expectedNotifications
:
0
expectedIsPartialRemoval
:
false
}
{
desc
:
"
Add
10
pages
all
bookmarked
.
"
addPages
:
10
visitsPerPage
:
1
addBookmarks
:
10
limitExpiration
:
-
1
expectedNotifications
:
10
expectedIsPartialRemoval
:
true
}
{
desc
:
"
Add
10
pages
with
lot
of
visits
none
bookmarked
.
"
addPages
:
10
visitsPerPage
:
10
addBookmarks
:
0
limitExpiration
:
10
expectedNotifications
:
10
expectedIsPartialRemoval
:
true
}
]
;
add_task
(
async
(
)
=
>
{
setInterval
(
3600
)
;
setMaxPages
(
0
)
;
for
(
let
testIndex
=
1
;
testIndex
<
=
tests
.
length
;
testIndex
+
+
)
{
let
currentTest
=
tests
[
testIndex
-
1
]
;
print
(
"
\
nTEST
"
+
testIndex
+
"
:
"
+
currentTest
.
desc
)
;
currentTest
.
receivedNotifications
=
0
;
let
timeInMicroseconds
=
getExpirablePRTime
(
8
)
;
function
newTimeInMicroseconds
(
)
{
timeInMicroseconds
=
timeInMicroseconds
+
1000
;
return
timeInMicroseconds
;
}
for
(
let
j
=
0
;
j
<
currentTest
.
visitsPerPage
;
j
+
+
)
{
for
(
let
i
=
0
;
i
<
currentTest
.
addPages
;
i
+
+
)
{
let
page
=
"
http
:
/
/
"
+
testIndex
+
"
.
"
+
i
+
"
.
mozilla
.
org
/
"
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
page
)
visitDate
:
newTimeInMicroseconds
(
)
}
)
;
}
}
currentTest
.
bookmarks
=
[
]
;
for
(
let
i
=
0
;
i
<
currentTest
.
addBookmarks
;
i
+
+
)
{
let
page
=
"
http
:
/
/
"
+
testIndex
+
"
.
"
+
i
+
"
.
mozilla
.
org
/
"
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
null
url
:
page
}
)
;
currentTest
.
bookmarks
.
push
(
page
)
;
}
const
listener
=
events
=
>
{
for
(
const
event
of
events
)
{
Assert
.
equal
(
event
.
type
"
page
-
removed
"
)
;
Assert
.
equal
(
event
.
reason
PlacesVisitRemoved
.
REASON_EXPIRED
)
;
if
(
event
.
isRemovedFromStore
)
{
Assert
.
equal
(
currentTest
.
bookmarks
.
indexOf
(
event
.
url
)
-
1
)
;
do_check_valid_places_guid
(
event
.
pageGuid
)
;
}
else
{
currentTest
.
receivedNotifications
+
+
;
do_check_guid_for_uri
(
Services
.
io
.
newURI
(
event
.
url
)
event
.
pageGuid
)
;
Assert
.
equal
(
event
.
isPartialVisistsRemoval
currentTest
.
expectedIsPartialRemoval
"
Should
have
the
correct
flag
setting
for
partial
removal
"
)
;
}
}
}
;
PlacesObservers
.
addListener
(
[
"
page
-
removed
"
]
listener
)
;
await
promiseForceExpirationStep
(
currentTest
.
limitExpiration
)
;
PlacesObservers
.
removeListener
(
[
"
page
-
removed
"
]
listener
)
;
Assert
.
equal
(
currentTest
.
receivedNotifications
currentTest
.
expectedNotifications
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
clearMaxPages
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
