var
tests
=
[
{
desc
:
"
Set
max_pages
to
a
negative
value
with
1
page
.
"
maxPages
:
-
1
addPages
:
1
expectedNotifications
:
0
}
{
desc
:
"
Set
max_pages
to
0
.
"
maxPages
:
0
addPages
:
1
expectedNotifications
:
1
}
{
desc
:
"
Set
max_pages
to
0
with
2
pages
.
"
maxPages
:
0
addPages
:
2
expectedNotifications
:
2
}
{
desc
:
"
Set
max_pages
to
1
with
2
pages
.
"
maxPages
:
1
addPages
:
2
expectedNotifications
:
2
}
{
desc
:
"
Set
max_pages
to
10
with
9
pages
.
"
maxPages
:
10
addPages
:
9
expectedNotifications
:
0
}
{
desc
:
"
Set
max_pages
to
10
with
10
pages
.
"
maxPages
:
10
addPages
:
10
expectedNotifications
:
0
}
]
;
add_task
(
async
function
test_pref_maxpages
(
)
{
try
{
getMaxPages
(
)
;
do_throw
(
"
interval
pref
should
not
exist
by
default
"
)
;
}
catch
(
ex
)
{
}
setInterval
(
3600
)
;
for
(
let
testIndex
=
1
;
testIndex
<
=
tests
.
length
;
testIndex
+
+
)
{
let
currentTest
=
tests
[
testIndex
-
1
]
;
print
(
"
\
nTEST
"
+
testIndex
+
"
:
"
+
currentTest
.
desc
)
;
currentTest
.
receivedNotifications
=
0
;
let
now
=
getExpirablePRTime
(
)
;
for
(
let
i
=
0
;
i
<
currentTest
.
addPages
;
i
+
+
)
{
let
page
=
"
http
:
/
/
"
+
testIndex
+
"
.
"
+
i
+
"
.
mozilla
.
org
/
"
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
page
)
visitDate
:
now
-
-
}
)
;
}
let
historyObserver
=
new
NavHistoryObserver
(
)
;
historyObserver
.
onDeleteURI
=
aURI
=
>
{
print
(
"
onDeleteURI
"
+
aURI
.
spec
)
;
currentTest
.
receivedNotifications
+
+
;
}
;
historyObserver
.
onDeleteVisits
=
(
aURI
aTime
)
=
>
{
print
(
"
onDeleteVisits
"
+
aURI
.
spec
+
"
"
+
aTime
)
;
}
;
PlacesUtils
.
history
.
addObserver
(
historyObserver
)
;
setMaxPages
(
currentTest
.
maxPages
)
;
await
promiseForceExpirationStep
(
-
1
)
;
PlacesUtils
.
history
.
removeObserver
(
historyObserver
false
)
;
do_check_eq
(
currentTest
.
receivedNotifications
currentTest
.
expectedNotifications
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
clearMaxPages
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
