var
hs
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Ci
.
nsINavHistoryService
)
;
var
tests
=
[
{
desc
:
"
Add
1
bookmarked
page
.
"
addPages
:
1
addBookmarks
:
1
expectedNotifications
:
0
}
{
desc
:
"
Add
2
pages
1
bookmarked
.
"
addPages
:
2
addBookmarks
:
1
expectedNotifications
:
1
}
{
desc
:
"
Add
10
pages
none
bookmarked
.
"
addPages
:
10
addBookmarks
:
0
expectedNotifications
:
10
}
{
desc
:
"
Add
10
pages
all
bookmarked
.
"
addPages
:
10
addBookmarks
:
10
expectedNotifications
:
0
}
]
;
add_task
(
async
function
test_notifications_onDeleteURI
(
)
{
setInterval
(
3600
)
;
setMaxPages
(
0
)
;
for
(
let
testIndex
=
1
;
testIndex
<
=
tests
.
length
;
testIndex
+
+
)
{
let
currentTest
=
tests
[
testIndex
-
1
]
;
print
(
"
\
nTEST
"
+
testIndex
+
"
:
"
+
currentTest
.
desc
)
;
currentTest
.
receivedNotifications
=
0
;
let
now
=
getExpirablePRTime
(
)
;
for
(
let
i
=
0
;
i
<
currentTest
.
addPages
;
i
+
+
)
{
let
page
=
"
http
:
/
/
"
+
testIndex
+
"
.
"
+
i
+
"
.
mozilla
.
org
/
"
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
uri
(
page
)
visitDate
:
now
+
+
}
)
;
}
currentTest
.
bookmarks
=
[
]
;
for
(
let
i
=
0
;
i
<
currentTest
.
addBookmarks
;
i
+
+
)
{
let
page
=
"
http
:
/
/
"
+
testIndex
+
"
.
"
+
i
+
"
.
mozilla
.
org
/
"
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
null
url
:
page
}
)
;
currentTest
.
bookmarks
.
push
(
page
)
;
}
let
historyObserver
=
{
onBeginUpdateBatch
:
function
PEX_onBeginUpdateBatch
(
)
{
}
onEndUpdateBatch
:
function
PEX_onEndUpdateBatch
(
)
{
}
onClearHistory
(
)
{
}
onVisits
(
)
{
}
onTitleChanged
(
)
{
}
onDeleteURI
(
aURI
aGUID
aReason
)
{
currentTest
.
receivedNotifications
+
+
;
Assert
.
equal
(
currentTest
.
bookmarks
.
indexOf
(
aURI
.
spec
)
-
1
)
;
do_check_valid_places_guid
(
aGUID
)
;
Assert
.
equal
(
aReason
Ci
.
nsINavHistoryObserver
.
REASON_EXPIRED
)
;
}
onPageChanged
(
)
{
}
onDeleteVisits
(
aURI
aTime
)
{
}
}
;
hs
.
addObserver
(
historyObserver
)
;
await
promiseForceExpirationStep
(
-
1
)
;
hs
.
removeObserver
(
historyObserver
false
)
;
Assert
.
equal
(
currentTest
.
receivedNotifications
currentTest
.
expectedNotifications
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
clearMaxPages
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
