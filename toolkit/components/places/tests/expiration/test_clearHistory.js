add_task
(
async
function
test_historyClear
(
)
{
let
as
=
PlacesUtils
.
annotations
;
setInterval
(
3600
)
;
setMaxPages
(
0
)
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
let
pageURI
=
uri
(
"
http
:
/
/
item_anno
.
"
+
i
+
"
.
mozilla
.
org
/
"
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
pageURI
}
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
pageURI
title
:
null
}
)
;
let
id
=
await
PlacesUtils
.
promiseItemId
(
bm
.
guid
)
;
as
.
setItemAnnotation
(
id
"
persist
"
"
test
"
0
as
.
EXPIRE_NEVER
)
;
as
.
setPageAnnotation
(
pageURI
"
persist
"
"
test
"
0
as
.
EXPIRE_NEVER
)
;
as
.
setItemAnnotation
(
id
"
expire_session
"
"
test
"
0
as
.
EXPIRE_SESSION
)
;
as
.
setPageAnnotation
(
pageURI
"
expire_session
"
"
test
"
0
as
.
EXPIRE_SESSION
)
;
}
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
let
pageURI
=
uri
(
"
http
:
/
/
page_anno
.
"
+
i
+
"
.
mozilla
.
org
/
"
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
pageURI
}
)
;
as
.
setPageAnnotation
(
pageURI
"
expire
"
"
test
"
0
as
.
EXPIRE_NEVER
)
;
as
.
setPageAnnotation
(
pageURI
"
expire_session
"
"
test
"
0
as
.
EXPIRE_SESSION
)
;
}
await
PlacesUtils
.
history
.
clear
(
)
;
for
(
let
anno
of
[
"
expire_session
"
"
expire
"
]
)
{
let
pages
=
await
getPagesWithAnnotation
(
anno
)
;
Assert
.
equal
(
pages
.
length
0
)
;
}
for
(
let
anno
of
[
"
expire_session
"
"
expire
"
]
)
{
let
items
=
await
getItemsWithAnnotation
(
anno
)
;
Assert
.
equal
(
items
.
length
0
)
;
}
let
pages
=
await
getPagesWithAnnotation
(
"
persist
"
)
;
Assert
.
equal
(
pages
.
length
5
)
;
let
items
=
await
getItemsWithAnnotation
(
"
persist
"
)
;
Assert
.
equal
(
items
.
length
5
)
;
for
(
let
guid
of
items
)
{
Assert
.
ok
(
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
guid
}
)
)
"
item
exists
"
)
;
}
}
)
;
