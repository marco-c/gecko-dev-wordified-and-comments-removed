const
DEFAULT_TIMER_DELAY_SECONDS
=
3
*
60
;
const
EXPIRE_AGGRESSIVITY_MULTIPLIER
=
3
;
var
tests
=
[
{
desc
:
"
Set
interval
to
1s
.
"
interval
:
1
expectedTimerDelay
:
1
}
{
desc
:
"
Set
interval
to
a
negative
value
.
"
interval
:
-
1
expectedTimerDelay
:
DEFAULT_TIMER_DELAY_SECONDS
}
{
desc
:
"
Set
interval
to
0
.
"
interval
:
0
expectedTimerDelay
:
DEFAULT_TIMER_DELAY_SECONDS
}
{
desc
:
"
Set
interval
to
a
large
value
.
"
interval
:
100
expectedTimerDelay
:
100
}
]
;
add_task
(
async
function
test
(
)
{
Assert
.
throws
(
(
)
=
>
getInterval
(
)
)
;
force_expiration_start
(
)
;
for
(
let
currentTest
of
tests
)
{
print
(
currentTest
.
desc
)
;
let
promise
=
promiseTopicObserved
(
"
test
-
interval
-
changed
"
)
;
setInterval
(
currentTest
.
interval
)
;
let
[
data
]
=
await
promise
;
Assert
.
equal
(
data
currentTest
.
expectedTimerDelay
*
EXPIRE_AGGRESSIVITY_MULTIPLIER
)
;
}
clearInterval
(
)
;
}
)
;
