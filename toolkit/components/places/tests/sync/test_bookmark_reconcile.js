async
function
getBookmarksNotMarkedAsSynced
(
)
{
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
executeCached
(
SELECT
guid
syncStatus
syncChangeCounter
FROM
moz_bookmarks
WHERE
syncChangeCounter
>
1
OR
syncStatus
!
=
:
syncStatus
ORDER
BY
guid
{
syncStatus
:
PlacesUtils
.
bookmarks
.
SYNC_STATUS
.
NORMAL
}
)
;
return
rows
.
map
(
row
=
>
{
return
{
guid
:
row
.
getResultByName
(
"
guid
"
)
syncStatus
:
row
.
getResultByName
(
"
syncStatus
"
)
syncChangeCounter
:
row
.
getResultByName
(
"
syncChangeCounter
"
)
}
;
}
)
;
}
add_task
(
async
function
test_reconcile_metadata
(
)
{
let
buf
=
await
openMirror
(
"
test_reconcile_metadata
"
)
;
let
olderDate
=
new
Date
(
Date
.
now
(
)
-
100000
)
;
info
(
"
Set
up
local
tree
"
)
;
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
menuGuid
children
:
[
{
guid
:
"
folderAAAAAA
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
title
:
"
A
"
children
:
[
{
guid
:
"
bookmarkBBBB
"
url
:
"
http
:
/
/
example
.
com
/
b
"
title
:
"
B
"
}
]
}
{
guid
:
"
folderCCCCCC
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
title
:
"
C
"
children
:
[
{
guid
:
"
bookmarkEEEE
"
url
:
"
http
:
/
/
example
.
com
/
e
"
title
:
"
E
"
}
]
}
{
guid
:
"
bookmarkFFFF
"
url
:
"
http
:
/
/
example
.
com
/
f
"
title
:
"
f
"
dateAdded
:
olderDate
lastModified
:
olderDate
}
]
}
)
;
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
:
[
{
guid
:
"
bookmarkTTTT
"
url
:
"
http
:
/
/
example
.
com
/
t
"
title
:
"
in
the
toolbar
"
dateAdded
:
olderDate
lastModified
:
olderDate
}
]
}
)
;
await
PlacesSyncUtils
.
bookmarks
.
reset
(
)
;
await
storeRecords
(
buf
shuffle
(
[
{
id
:
"
menu
"
parentid
:
"
places
"
type
:
"
folder
"
children
:
[
"
folderAAAAAA
"
"
folderCCCCCC
"
"
bookmarkFFFF
"
]
modified
:
Date
.
now
(
)
/
1000
-
60
}
{
id
:
"
folderAAAAAA
"
parentid
:
"
menu
"
type
:
"
folder
"
title
:
"
A
"
children
:
[
"
bookmarkBBBB
"
]
modified
:
Date
.
now
(
)
/
1000
-
60
}
{
id
:
"
bookmarkBBBB
"
parentid
:
"
folderAAAAAA
"
type
:
"
bookmark
"
title
:
"
B
"
bmkUri
:
"
http
:
/
/
example
.
com
/
b
"
modified
:
Date
.
now
(
)
/
1000
-
60
}
{
id
:
"
folderCCCCCC
"
parentid
:
"
menu
"
type
:
"
folder
"
title
:
"
C
"
children
:
[
"
bookmarkDDDD
"
]
modified
:
Date
.
now
(
)
/
1000
-
60
}
{
id
:
"
bookmarkDDDD
"
parentid
:
"
folderCCCCCC
"
type
:
"
bookmark
"
title
:
"
D
"
bmkUri
:
"
http
:
/
/
example
.
com
/
d
"
modified
:
Date
.
now
(
)
/
1000
-
60
}
{
id
:
"
bookmarkFFFF
"
parentid
:
"
menu
"
type
:
"
bookmark
"
title
:
"
F
"
bmkUri
:
"
http
:
/
/
example
.
com
/
f
"
dateAdded
:
olderDate
modified
:
Date
.
now
(
)
/
1000
+
60
}
{
id
:
"
toolbar
"
parentid
:
"
places
"
type
:
"
folder
"
children
:
[
]
index
:
1
}
{
id
:
"
unfiled
"
parentid
:
"
places
"
type
:
"
folder
"
children
:
[
]
index
:
3
}
]
)
)
;
info
(
"
Applying
"
)
;
let
changesToUpload
=
await
buf
.
apply
(
)
;
let
idsToUpload
=
inspectChangeRecords
(
changesToUpload
)
;
deepEqual
(
idsToUpload
{
updated
:
[
"
bookmarkEEEE
"
"
bookmarkTTTT
"
"
folderCCCCCC
"
"
menu
"
"
mobile
"
"
toolbar
"
"
unfiled
"
]
deleted
:
[
]
}
"
Should
upload
the
2
local
-
only
bookmarks
and
their
parents
"
)
;
Assert
.
equal
(
(
await
PlacesUtils
.
bookmarks
.
fetch
(
"
bookmarkFFFF
"
)
)
.
title
"
F
"
)
;
let
badGuids
=
await
getBookmarksNotMarkedAsSynced
(
)
;
Assert
.
deepEqual
(
badGuids
[
{
guid
:
"
bookmarkEEEE
"
syncStatus
:
PlacesUtils
.
bookmarks
.
SYNC_STATUS
.
NEW
syncChangeCounter
:
1
}
{
guid
:
"
bookmarkTTTT
"
syncStatus
:
PlacesUtils
.
bookmarks
.
SYNC_STATUS
.
NEW
syncChangeCounter
:
1
}
]
)
;
}
)
;
