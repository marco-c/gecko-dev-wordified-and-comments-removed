add_task
(
function
*
(
)
{
const
TEST_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
notFoundPage
.
html
"
;
PlacesUtils
.
history
.
markPageAsTyped
(
NetUtil
.
newURI
(
TEST_URL
)
)
;
let
visitedPromise
=
new
Promise
(
resolve
=
>
{
let
historyObserver
=
{
onVisit
:
function
(
aURI
aVisitID
aTime
aSessionID
aReferringID
aTransitionType
)
{
PlacesUtils
.
history
.
removeObserver
(
historyObserver
)
;
info
(
"
Received
onVisit
:
"
+
aURI
.
spec
)
;
fieldForUrl
(
aURI
"
frecency
"
function
(
aFrecency
)
{
is
(
aFrecency
0
"
Frecency
should
be
0
"
)
;
fieldForUrl
(
aURI
"
hidden
"
function
(
aHidden
)
{
is
(
aHidden
0
"
Page
should
not
be
hidden
"
)
;
fieldForUrl
(
aURI
"
typed
"
function
(
aTyped
)
{
is
(
aTyped
0
"
page
should
not
be
marked
as
typed
"
)
;
resolve
(
)
;
}
)
;
}
)
;
}
)
;
}
onBeginUpdateBatch
:
function
(
)
{
}
onEndUpdateBatch
:
function
(
)
{
}
onTitleChanged
:
function
(
)
{
}
onDeleteURI
:
function
(
)
{
}
onClearHistory
:
function
(
)
{
}
onPageChanged
:
function
(
)
{
}
onDeleteVisits
:
function
(
)
{
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsINavHistoryObserver
]
)
}
;
PlacesUtils
.
history
.
addObserver
(
historyObserver
false
)
;
}
)
;
let
newTabPromise
=
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
yield
Promise
.
all
(
[
visitedPromise
newTabPromise
]
)
;
yield
PlacesTestUtils
.
clearHistory
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
