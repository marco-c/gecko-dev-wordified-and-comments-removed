add_task
(
async
function
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
"
)
;
let
newTitlePromise
=
new
Promise
(
resolve
=
>
{
let
observer
=
{
onTitleChanged
(
uri
title
)
{
if
(
/
new_page
/
.
test
(
uri
.
spec
)
)
{
resolve
(
title
)
;
PlacesUtils
.
history
.
removeObserver
(
observer
)
;
}
}
onBeginUpdateBatch
(
)
{
}
onEndUpdateBatch
(
)
{
}
onDeleteURI
(
)
{
}
onClearHistory
(
)
{
}
onPageChanged
(
)
{
}
onDeleteVisits
(
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsINavHistoryObserver
"
]
)
}
;
PlacesUtils
.
history
.
addObserver
(
observer
)
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
let
title
=
content
.
document
.
title
;
content
.
history
.
pushState
(
"
"
"
"
"
new_page
"
)
;
Assert
.
ok
(
title
"
Content
window
should
initially
have
a
title
.
"
)
;
}
)
;
let
newtitle
=
await
newTitlePromise
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
newtitle
}
]
async
function
(
args
)
{
Assert
.
equal
(
args
.
newtitle
content
.
document
.
title
"
Title
after
pushstate
.
"
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
