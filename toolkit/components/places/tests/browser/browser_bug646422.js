add_task
(
function
*
(
)
{
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
'
http
:
/
/
example
.
com
'
)
;
let
newTitlePromise
=
new
Promise
(
resolve
=
>
{
let
observer
=
{
onTitleChanged
:
function
(
uri
title
)
{
if
(
/
new_page
/
.
test
(
uri
.
spec
)
)
{
resolve
(
title
)
;
PlacesUtils
.
history
.
removeObserver
(
observer
)
;
}
}
onBeginUpdateBatch
:
function
(
)
{
}
onEndUpdateBatch
:
function
(
)
{
}
onVisit
:
function
(
)
{
}
onDeleteURI
:
function
(
)
{
}
onClearHistory
:
function
(
)
{
}
onPageChanged
:
function
(
)
{
}
onDeleteVisits
:
function
(
)
{
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsINavHistoryObserver
]
)
}
;
PlacesUtils
.
history
.
addObserver
(
observer
false
)
;
}
)
;
let
title
=
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
*
(
)
{
let
title
=
content
.
document
.
title
;
content
.
history
.
pushState
(
'
'
'
'
'
new_page
'
)
;
return
title
;
}
)
;
ok
(
title
'
Content
window
should
initially
have
a
title
.
'
)
;
let
newtitle
=
yield
newTitlePromise
;
title
=
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
function
*
(
)
{
return
content
.
document
.
title
;
}
)
;
is
(
newtitle
title
'
Title
after
pushstate
.
'
)
;
yield
PlacesTestUtils
.
clearHistory
(
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
