const
kUniqueURI
=
Services
.
io
.
newURI
(
"
http
:
/
/
mochi
.
test
:
8888
/
#
bug_680727
"
)
;
var
proxyPrefValue
;
var
ourTab
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
proxyPrefValue
=
Services
.
prefs
.
getIntPref
(
"
network
.
proxy
.
type
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
0
)
;
Services
.
cache2
.
clear
(
)
;
Services
.
io
.
offline
=
true
;
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
.
then
(
tab
=
>
{
ourTab
=
tab
;
BrowserTestUtils
.
browserLoaded
(
ourTab
.
linkedBrowser
false
null
true
)
.
then
(
errorListener
)
;
BrowserTestUtils
.
loadURIString
(
ourTab
.
linkedBrowser
kUniqueURI
.
spec
)
;
}
)
;
}
function
errorListener
(
)
{
ok
(
Services
.
io
.
offline
"
Services
.
io
.
offline
is
true
.
"
)
;
SpecialPowers
.
spawn
(
ourTab
.
linkedBrowser
[
kUniqueURI
.
spec
]
function
(
uri
)
{
Assert
.
equal
(
content
.
document
.
documentURI
.
substring
(
0
27
)
"
about
:
neterror
?
e
=
netOffline
"
"
Document
URI
is
the
error
page
.
"
)
;
Assert
.
equal
(
content
.
location
.
href
uri
"
Docshell
URI
is
the
original
URI
.
"
)
;
}
)
.
then
(
(
)
=
>
{
PlacesTestUtils
.
promiseAsyncUpdates
(
)
.
then
(
(
)
=
>
{
PlacesUtils
.
history
.
hasVisits
(
kUniqueURI
)
.
then
(
isVisited
=
>
{
errorAsyncListener
(
kUniqueURI
isVisited
)
;
}
)
;
}
)
;
}
)
;
}
function
errorAsyncListener
(
aURI
aIsVisited
)
{
ok
(
kUniqueURI
.
equals
(
aURI
)
&
&
!
aIsVisited
"
The
neterror
page
is
not
listed
in
global
history
.
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
proxyPrefValue
)
;
Services
.
io
.
offline
=
false
;
BrowserTestUtils
.
browserLoaded
(
ourTab
.
linkedBrowser
false
null
true
)
.
then
(
reloadListener
)
;
SpecialPowers
.
spawn
(
ourTab
.
linkedBrowser
[
]
function
(
)
{
Assert
.
ok
(
content
.
document
.
querySelector
(
"
#
netErrorButtonContainer
>
.
try
-
again
"
)
"
The
error
page
has
got
a
.
try
-
again
element
"
)
;
content
.
document
.
querySelector
(
"
#
netErrorButtonContainer
>
.
try
-
again
"
)
.
click
(
)
;
}
)
;
}
function
reloadListener
(
)
{
ok
(
!
Services
.
io
.
offline
"
Services
.
io
.
offline
is
false
.
"
)
;
SpecialPowers
.
spawn
(
ourTab
.
linkedBrowser
[
kUniqueURI
.
spec
]
function
(
uri
)
{
Assert
.
equal
(
content
.
document
.
documentURI
uri
"
Document
URI
is
not
the
offline
-
error
page
but
the
original
URI
.
"
)
;
}
)
.
then
(
(
)
=
>
{
PlacesTestUtils
.
promiseAsyncUpdates
(
)
.
then
(
(
)
=
>
{
PlacesUtils
.
history
.
hasVisits
(
kUniqueURI
)
.
then
(
isVisited
=
>
{
reloadAsyncListener
(
kUniqueURI
isVisited
)
;
}
)
;
}
)
;
}
)
;
}
function
reloadAsyncListener
(
aURI
aIsVisited
)
{
ok
(
kUniqueURI
.
equals
(
aURI
)
&
&
aIsVisited
"
We
have
visited
the
URI
.
"
)
;
PlacesUtils
.
history
.
clear
(
)
.
then
(
finish
)
;
}
registerCleanupFunction
(
async
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
proxyPrefValue
)
;
Services
.
io
.
offline
=
false
;
BrowserTestUtils
.
removeTab
(
ourTab
)
;
}
)
;
