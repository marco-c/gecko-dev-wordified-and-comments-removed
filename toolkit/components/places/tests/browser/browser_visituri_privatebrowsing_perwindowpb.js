const
initialURL
=
"
http
:
/
/
example
.
com
/
tests
/
toolkit
/
components
/
places
/
tests
/
browser
/
begin
.
html
"
;
const
finalURL
=
"
http
:
/
/
test1
.
example
.
com
/
tests
/
toolkit
/
components
/
places
/
tests
/
browser
/
final
.
html
"
;
var
observer
;
var
visitSavedPromise
;
add_setup
(
async
function
(
)
{
visitSavedPromise
=
new
Promise
(
resolve
=
>
{
observer
=
{
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
uri
-
visit
-
saved
"
)
{
Services
.
obs
.
removeObserver
(
observer
"
uri
-
visit
-
saved
"
)
;
let
uri
=
subject
.
QueryInterface
(
Ci
.
nsIURI
)
;
resolve
(
uri
.
spec
)
;
}
}
}
;
}
)
;
Services
.
obs
.
addObserver
(
observer
"
uri
-
visit
-
saved
"
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_private_browsing_window
(
)
{
await
testLoadInWindow
(
{
private
:
true
}
initialURL
)
;
}
)
;
add_task
(
async
function
test_normal_window
(
)
{
await
testLoadInWindow
(
{
private
:
false
}
finalURL
)
;
let
url
=
await
visitSavedPromise
;
Assert
.
equal
(
url
finalURL
"
Check
received
expected
visit
"
)
;
}
)
;
async
function
testLoadInWindow
(
options
url
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
options
)
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
let
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
win
.
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
loadURI
(
win
.
gBrowser
.
selectedBrowser
url
)
;
await
loadedPromise
;
}
