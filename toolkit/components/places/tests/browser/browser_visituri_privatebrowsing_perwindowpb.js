function
test
(
)
{
waitForExplicitFinish
(
)
;
let
windowsToClose
=
[
]
;
let
initialURL
=
"
http
:
/
/
example
.
com
/
tests
/
toolkit
/
components
/
places
/
tests
/
browser
/
begin
.
html
"
;
let
finalURL
=
"
http
:
/
/
example
.
com
/
tests
/
toolkit
/
components
/
places
/
tests
/
browser
/
final
.
html
"
;
let
observer
=
null
;
let
enumerator
=
null
;
let
currentObserver
=
null
;
let
uri
=
null
;
function
doTest
(
aIsPrivateMode
aWindow
aTestURI
aCallback
)
{
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
uri
-
visit
-
saved
"
)
{
enumerator
=
aWindow
.
Services
.
obs
.
enumerateObservers
(
"
uri
-
visit
-
saved
"
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
currentObserver
=
enumerator
.
getNext
(
)
;
aWindow
.
Services
.
obs
.
removeObserver
(
currentObserver
"
uri
-
visit
-
saved
"
)
;
}
uri
=
aSubject
.
QueryInterface
(
Ci
.
nsIURI
)
;
is
(
uri
.
spec
finalURL
"
Check
received
expected
visit
"
)
;
}
}
}
;
aWindow
.
Services
.
obs
.
addObserver
(
observer
"
uri
-
visit
-
saved
"
false
)
;
BrowserTestUtils
.
browserLoaded
(
aWindow
.
gBrowser
.
selectedBrowser
)
.
then
(
aCallback
)
;
aWindow
.
gBrowser
.
selectedBrowser
.
loadURI
(
aTestURI
)
;
}
function
testOnWindow
(
aOptions
aCallback
)
{
whenNewWindowLoaded
(
aOptions
function
(
aWin
)
{
windowsToClose
.
push
(
aWin
)
;
executeSoon
(
(
)
=
>
aCallback
(
aWin
)
)
;
}
)
;
}
registerCleanupFunction
(
function
(
)
{
windowsToClose
.
forEach
(
function
(
aWin
)
{
aWin
.
close
(
)
;
}
)
;
}
)
;
testOnWindow
(
{
private
:
true
}
function
(
aWin
)
{
doTest
(
true
aWin
initialURL
function
(
)
{
testOnWindow
(
{
}
function
(
aWin2
)
{
doTest
(
false
aWin2
finalURL
function
(
)
{
PlacesTestUtils
.
clearHistory
(
)
.
then
(
finish
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
