Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
components
/
ml
/
tests
/
browser
/
head
.
js
"
this
)
;
async
function
setupRemoteClient
(
)
{
const
{
removeMocks
remoteClients
}
=
await
createAndMockMLRemoteSettings
(
{
autoDownloadFromRemoteSettings
:
false
}
)
;
return
{
remoteClients
async
cleanup
(
)
{
await
removeMocks
(
)
;
await
waitForCondition
(
(
)
=
>
EngineProcess
.
areAllEnginesTerminated
(
)
"
Waiting
for
all
of
the
engines
to
be
terminated
.
"
100
200
)
;
}
}
;
}
async
function
runInferenceProcess
(
remoteClients
)
{
info
(
"
Building
the
egnine
process
"
)
;
const
{
PipelineOptions
EngineProcess
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
global
/
content
/
ml
/
EngineProcess
.
sys
.
mjs
"
)
;
const
options
=
new
PipelineOptions
(
{
taskName
:
"
moz
-
echo
"
}
)
;
const
engineParent
=
await
EngineProcess
.
getMLEngineParent
(
)
;
const
engine
=
engineParent
.
getEngine
(
options
)
;
const
inferencePromise
=
engine
.
run
(
{
data
:
"
This
gets
echoed
.
"
}
)
;
await
remoteClients
[
"
ml
-
onnx
-
runtime
"
]
.
resolvePendingDownloads
(
1
)
;
Assert
.
equal
(
(
await
inferencePromise
)
.
output
"
This
gets
echoed
.
"
"
The
text
get
echoed
exercising
the
whole
flow
.
"
)
;
}
async
function
openAboutInference
(
{
disabled
runInPage
prefs
runInference
=
false
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
enable
"
!
disabled
]
[
"
browser
.
ml
.
logLevel
"
"
Debug
"
]
.
.
.
(
prefs
?
?
[
]
)
]
}
)
;
let
cleanup
;
let
remoteClients
;
if
(
runInference
)
{
let
set
=
await
setupRemoteClient
(
)
;
cleanup
=
set
.
cleanup
;
remoteClients
=
set
.
remoteClients
;
await
runInferenceProcess
(
remoteClients
)
;
}
const
selectors
=
{
pageHeader
:
'
[
data
-
l10n
-
id
=
"
about
-
inference
-
header
"
]
'
warning
:
"
div
#
warning
"
processes
:
"
div
#
runningInference
"
}
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
BLANK_PAGE
true
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
"
about
:
inference
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
selectors
}
runInPage
)
;
await
loadBlankPage
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
if
(
runInference
)
{
await
EngineProcess
.
destroyMLEngine
(
)
;
await
cleanup
(
)
;
}
}
async
function
loadBlankPage
(
)
{
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
BLANK_PAGE
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
}
