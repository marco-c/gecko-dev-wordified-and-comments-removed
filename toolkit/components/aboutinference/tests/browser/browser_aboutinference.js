requestLongerTimeout
(
2
)
;
add_task
(
async
function
test_about_inference_enabled
(
)
{
await
openAboutInference
(
{
runInPage
:
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
function
checkElementIsVisible
(
expectVisible
name
)
{
const
expected
=
expectVisible
?
"
visible
"
:
"
hidden
"
;
const
element
=
document
.
querySelector
(
selectors
[
name
]
)
;
ok
(
Boolean
(
element
)
Element
{
name
}
was
found
.
)
;
const
{
visibility
}
=
window
.
getComputedStyle
(
element
)
;
is
(
visibility
expected
Element
{
name
}
was
not
{
expected
}
but
should
be
.
)
;
}
checkElementIsVisible
(
true
"
pageHeader
"
)
;
const
element
=
document
.
querySelector
(
selectors
.
warning
)
;
const
{
display
}
=
window
.
getComputedStyle
(
element
)
;
is
(
display
"
none
"
"
The
warning
should
be
hidden
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_about_inference_disabled
(
)
{
await
openAboutInference
(
{
prefs
:
[
[
"
browser
.
ml
.
enable
"
false
]
]
runInPage
:
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
const
element
=
document
.
querySelector
(
selectors
.
warning
)
;
const
{
display
}
=
window
.
getComputedStyle
(
element
)
;
is
(
display
"
block
"
"
The
warning
should
be
visible
"
)
;
Assert
.
equal
(
element
.
textContent
"
browser
.
ml
.
enable
is
set
to
False
!
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_about_inference_process
(
)
{
await
openAboutInference
(
{
runInference
:
true
runInPage
:
async
(
{
selectors
}
)
=
>
{
function
waitForInnerHTML
(
selector
substring
interval
=
100
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
{
document
}
=
content
;
const
element
=
document
.
querySelector
(
selector
)
;
if
(
!
element
)
{
reject
(
new
Error
(
No
element
found
with
selector
:
{
selector
}
)
)
;
return
;
}
const
checkInnerHTML
=
(
)
=
>
{
console
.
log
(
Checking
innerHTML
of
element
with
selector
:
{
selector
}
)
;
if
(
element
.
innerHTML
.
includes
(
substring
)
)
{
console
.
log
(
Substring
"
{
substring
}
"
found
in
element
with
selector
:
{
selector
}
)
;
resolve
(
)
;
}
else
{
setTimeout
(
checkInnerHTML
interval
)
;
}
}
;
checkInnerHTML
(
)
;
}
)
;
}
await
waitForInnerHTML
(
selectors
.
processes
"
MB
"
)
;
}
}
)
;
}
)
;
