use
super
:
:
*
;
use
crate
:
:
Config
;
use
std
:
:
collections
:
:
{
HashMap
HashSet
}
;
pub
fn
pass
(
mut
config_map
:
HashMap
<
String
Config
>
)
-
>
impl
FnMut
(
&
mut
Module
)
-
>
Result
<
(
)
>
{
move
|
module
:
&
mut
Module
|
{
module
.
config
=
config_map
.
remove
(
&
module
.
crate_name
)
.
unwrap_or_default
(
)
;
if
module
.
name
.
starts_with
(
"
uniffi_bindings_tests
"
)
{
module
.
fixture
=
true
;
}
module
.
string_type_node
=
TypeNode
{
ty
:
Type
:
:
String
canonical_name
:
"
String
"
.
to_string
(
)
.
.
TypeNode
:
:
default
(
)
}
;
let
config
=
module
.
config
.
clone
(
)
;
let
mut
all_imports
=
HashSet
:
:
new
(
)
;
module
.
try_visit_mut
(
|
custom
:
&
mut
CustomType
|
{
if
let
Some
(
custom_config
)
=
config
.
custom_types
.
get
(
&
custom
.
name
)
{
custom
.
type_name
=
custom_config
.
type_name
.
clone
(
)
;
custom
.
lift_expr
=
Some
(
custom_config
.
lift
.
clone
(
)
)
;
custom
.
lower_expr
=
Some
(
custom_config
.
lower
.
clone
(
)
)
;
custom
.
lift_expr
=
Some
(
custom_config
.
lift
.
replace
(
"
{
}
"
"
builtinVal
"
)
)
;
custom
.
lower_expr
=
Some
(
custom_config
.
lower
.
replace
(
"
{
}
"
"
value
"
)
)
;
all_imports
.
extend
(
custom_config
.
imports
.
iter
(
)
.
cloned
(
)
)
;
}
Ok
(
(
)
)
}
)
?
;
let
mut
imports_vec
:
Vec
<
String
>
=
all_imports
.
into_iter
(
)
.
collect
(
)
;
imports_vec
.
sort
(
)
;
module
.
imports
=
imports_vec
;
Ok
(
(
)
)
}
}
