use
super
:
:
*
;
pub
fn
pass
(
en
:
&
mut
Enum
)
-
>
Result
<
(
)
>
{
en
.
resolved_discr_type
=
match
&
en
.
discr_type
{
Some
(
type_node
)
=
>
type_node
.
clone
(
)
None
=
>
TypeNode
{
ty
:
Type
:
:
UInt8
canonical_name
:
"
UInt8
"
.
to_string
(
)
ffi_converter
:
"
FfiConverterUInt8
"
.
to_string
(
)
is_used_as_error
:
false
ffi_type
:
FfiTypeNode
{
ty
:
FfiType
:
:
UInt8
type_name
:
"
uint8_t
"
.
to_string
(
)
}
.
.
TypeNode
:
:
default
(
)
}
}
;
let
discr_type
=
&
en
.
resolved_discr_type
;
let
mut
last_variant
:
Option
<
&
Variant
>
=
None
;
for
variant
in
en
.
variants
.
iter_mut
(
)
{
match
&
variant
.
discr
{
None
=
>
{
let
lit
=
match
last_variant
{
None
=
>
match
&
discr_type
.
ty
{
Type
:
:
UInt8
|
Type
:
:
UInt16
|
Type
:
:
UInt32
|
Type
:
:
UInt64
=
>
{
Literal
:
:
UInt
(
0
Radix
:
:
Decimal
discr_type
.
clone
(
)
)
}
Type
:
:
Int8
|
Type
:
:
Int16
|
Type
:
:
Int32
|
Type
:
:
Int64
=
>
{
Literal
:
:
Int
(
0
Radix
:
:
Decimal
discr_type
.
clone
(
)
)
}
ty
=
>
bail
!
(
"
Invalid
enum
discriminant
type
:
{
ty
:
?
}
"
)
}
Some
(
variant
)
=
>
match
&
variant
.
resolved_discr
.
lit
{
Literal
:
:
UInt
(
val
_
_
)
=
>
{
Literal
:
:
UInt
(
val
+
1
Radix
:
:
Decimal
discr_type
.
clone
(
)
)
}
Literal
:
:
Int
(
val
_
_
)
=
>
{
Literal
:
:
Int
(
val
+
1
Radix
:
:
Decimal
discr_type
.
clone
(
)
)
}
lit
=
>
bail
!
(
"
Invalid
enum
discriminant
literal
:
{
lit
:
?
}
"
)
}
}
;
variant
.
resolved_discr
=
LiteralNode
{
lit
.
.
LiteralNode
:
:
default
(
)
}
;
}
Some
(
lit_node
)
=
>
{
variant
.
resolved_discr
=
lit_node
.
clone
(
)
;
}
}
last_variant
=
Some
(
variant
)
;
}
Ok
(
(
)
)
}
