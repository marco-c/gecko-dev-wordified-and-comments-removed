{
%
-
for
(
preprocessor_condition
callback_interfaces
preprocessor_condition_end
)
in
callback_interfaces
.
iter
(
)
%
}
{
{
preprocessor_condition
}
}
{
%
for
cbi
in
callback_interfaces
%
}
extern
"
C
"
void
{
{
cbi
.
free_fn
}
}
(
uint64_t
uniffiHandle
)
;
class
{
{
cbi
.
ffi_value_class
}
}
{
private
:
bool
mLowered
=
false
;
uint64_t
mValue
=
0
;
public
:
{
{
cbi
.
ffi_value_class
}
}
(
)
=
default
;
explicit
{
{
cbi
.
ffi_value_class
}
}
(
uint64_t
aValue
)
:
mValue
(
aValue
)
{
}
void
Lower
(
const
dom
:
:
OwningUniFFIScaffoldingValue
&
aValue
ErrorResult
&
aError
)
{
if
(
!
aValue
.
IsDouble
(
)
)
{
aError
.
ThrowTypeError
(
"
Bad
argument
type
"
_ns
)
;
return
;
}
double
floatValue
=
aValue
.
GetAsDouble
(
)
;
uint64_t
intValue
=
static_cast
<
uint64_t
>
(
floatValue
)
;
if
(
intValue
!
=
floatValue
)
{
aError
.
ThrowTypeError
(
"
Not
an
integer
"
_ns
)
;
return
;
}
ReleaseHandleIfSet
(
)
;
mValue
=
intValue
;
mLowered
=
true
;
}
void
Lift
(
JSContext
*
aContext
dom
:
:
OwningUniFFIScaffoldingValue
*
aDest
ErrorResult
&
aError
)
{
aDest
-
>
SetAsDouble
(
)
=
mValue
;
mValue
=
0
;
mLowered
=
false
;
}
uint64_t
IntoRust
(
)
{
auto
handle
=
mValue
;
mValue
=
0
;
mLowered
=
false
;
return
handle
;
}
static
{
{
cbi
.
ffi_value_class
}
}
FromRust
(
uint64_t
aValue
)
{
return
{
{
cbi
.
ffi_value_class
}
}
(
aValue
)
;
}
;
void
ReleaseHandleIfSet
(
)
{
if
(
mValue
!
=
0
&
&
mLowered
)
{
{
{
cbi
.
free_fn
}
}
(
mValue
)
;
mValue
=
0
;
mLowered
=
false
;
}
}
~
{
{
cbi
.
ffi_value_class
}
}
(
)
{
ReleaseHandleIfSet
(
)
;
}
}
;
{
%
-
endfor
%
}
{
{
preprocessor_condition_end
}
}
{
%
-
endfor
%
}
