use
crate
:
:
Config
;
use
extend
:
:
ext
;
use
uniffi_bindgen
:
:
interface
:
:
{
Callable
Constructor
Function
Method
Object
}
;
pub
enum
CallStyle
{
Sync
Async
AsyncWrapper
}
impl
CallStyle
{
pub
fn
is_js_async
(
&
self
)
-
>
bool
{
matches
!
(
self
Self
:
:
Async
|
Self
:
:
AsyncWrapper
)
}
}
fn
call_style
(
callable
:
impl
Callable
config
:
&
Config
spec
:
&
str
)
-
>
CallStyle
{
if
callable
.
is_async
(
)
{
CallStyle
:
:
Async
}
else
if
config
.
async_wrappers
.
enable
&
&
!
config
.
async_wrappers
.
main_thread
.
contains
(
spec
)
{
CallStyle
:
:
AsyncWrapper
}
else
{
CallStyle
:
:
Sync
}
}
pub
fn
crate_name_to_namespace
(
crate_name
:
&
str
)
-
>
&
str
{
match
crate_name
{
"
uniffi_geometry
"
=
>
"
geometry
"
"
uniffi_sprites
"
=
>
"
sprites
"
s
=
>
s
}
}
#
[
ext
]
pub
impl
Function
{
fn
call_style
(
&
self
config
:
&
Config
)
-
>
CallStyle
{
call_style
(
self
config
self
.
name
(
)
)
}
}
#
[
ext
]
pub
impl
Object
{
fn
call_style_for_constructor
(
&
self
cons
:
&
Constructor
config
:
&
Config
)
-
>
CallStyle
{
call_style
(
cons
config
&
format
!
(
"
{
}
.
{
}
"
self
.
name
(
)
cons
.
name
(
)
)
)
}
fn
call_style_for_method
(
&
self
method
:
&
Method
config
:
&
Config
)
-
>
CallStyle
{
call_style
(
method
config
&
format
!
(
"
{
}
.
{
}
"
self
.
name
(
)
method
.
name
(
)
)
)
}
}
