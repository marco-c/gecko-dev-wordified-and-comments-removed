use
std
:
:
io
;
#
[
derive
(
uniffi
:
:
Error
thiserror
:
:
Error
Debug
)
]
pub
enum
TestError
{
#
[
error
(
"
Failure1
"
)
]
Failure1
#
[
error
(
"
Failure2
(
data
=
{
data
}
)
"
)
]
Failure2
{
data
:
String
}
}
#
[
derive
(
uniffi
:
:
Error
thiserror
:
:
Error
Debug
)
]
#
[
uniffi
(
flat_error
)
]
pub
enum
TestFlatError
{
#
[
error
(
"
Failure1
"
)
]
IoError
(
io
:
:
Error
)
}
#
[
uniffi
:
:
export
]
pub
fn
func_with_error
(
input
:
u32
)
-
>
Result
<
(
)
TestError
>
{
match
input
{
0
=
>
Err
(
TestError
:
:
Failure1
)
1
=
>
Err
(
TestError
:
:
Failure2
{
data
:
"
DATA
"
.
to_string
(
)
}
)
_
=
>
Ok
(
(
)
)
}
}
#
[
uniffi
:
:
export
]
pub
fn
func_with_flat_error
(
input
:
u32
)
-
>
Result
<
(
)
TestFlatError
>
{
match
input
{
0
=
>
Err
(
TestFlatError
:
:
IoError
(
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
NotFound
"
NotFound
"
.
to_string
(
)
)
)
)
_
=
>
Ok
(
(
)
)
}
}
