use
std
:
:
sync
:
:
{
atomic
:
:
{
AtomicU32
Ordering
}
Arc
}
;
use
crate
:
:
callback_interfaces
:
:
CallbackInterfaceNumbers
;
use
crate
:
:
errors
:
:
TestError
;
#
[
uniffi
:
:
export
(
with_foreign
)
]
pub
trait
TestTraitInterface
:
Send
+
Sync
{
fn
noop
(
&
self
)
;
fn
get_value
(
&
self
)
-
>
u32
;
fn
set_value
(
&
self
value
:
u32
)
;
fn
throw_if_equal
(
&
self
numbers
:
CallbackInterfaceNumbers
)
-
>
Result
<
CallbackInterfaceNumbers
TestError
>
;
}
#
[
uniffi
:
:
export
]
fn
invoke_test_trait_interface_noop
(
int
:
Arc
<
dyn
TestTraitInterface
>
)
{
int
.
noop
(
)
}
#
[
uniffi
:
:
export
]
fn
invoke_test_trait_interface_get_value
(
int
:
Arc
<
dyn
TestTraitInterface
>
)
-
>
u32
{
int
.
get_value
(
)
}
#
[
uniffi
:
:
export
]
fn
invoke_test_trait_interface_set_value
(
int
:
Arc
<
dyn
TestTraitInterface
>
value
:
u32
)
{
int
.
set_value
(
value
)
}
#
[
uniffi
:
:
export
]
fn
invoke_test_trait_interface_throw_if_equal
(
int
:
Arc
<
dyn
TestTraitInterface
>
numbers
:
CallbackInterfaceNumbers
)
-
>
Result
<
CallbackInterfaceNumbers
TestError
>
{
int
.
throw_if_equal
(
numbers
)
}
#
[
uniffi
:
:
export
]
fn
create_test_trait_interface
(
value
:
u32
)
-
>
Arc
<
dyn
TestTraitInterface
>
{
Arc
:
:
new
(
TestTraitInterfaceImpl
{
value
:
AtomicU32
:
:
new
(
value
)
}
)
}
struct
TestTraitInterfaceImpl
{
value
:
AtomicU32
}
impl
TestTraitInterface
for
TestTraitInterfaceImpl
{
fn
noop
(
&
self
)
{
}
fn
get_value
(
&
self
)
-
>
u32
{
self
.
value
.
load
(
Ordering
:
:
Relaxed
)
}
fn
set_value
(
&
self
value
:
u32
)
{
self
.
value
.
store
(
value
Ordering
:
:
Relaxed
)
;
}
fn
throw_if_equal
(
&
self
numbers
:
CallbackInterfaceNumbers
)
-
>
Result
<
CallbackInterfaceNumbers
TestError
>
{
if
numbers
.
a
=
=
numbers
.
b
{
Err
(
TestError
:
:
Failure1
)
}
else
{
Ok
(
numbers
)
}
}
}
#
[
uniffi
:
:
export
(
with_foreign
)
]
#
[
async_trait
:
:
async_trait
]
pub
trait
AsyncTestTraitInterface
:
Send
+
Sync
{
async
fn
noop
(
&
self
)
;
async
fn
get_value
(
&
self
)
-
>
u32
;
async
fn
set_value
(
&
self
value
:
u32
)
;
async
fn
throw_if_equal
(
&
self
numbers
:
CallbackInterfaceNumbers
)
-
>
Result
<
CallbackInterfaceNumbers
TestError
>
;
}
#
[
uniffi
:
:
export
]
fn
create_async_test_trait_interface
(
value
:
u32
)
-
>
Arc
<
dyn
AsyncTestTraitInterface
>
{
Arc
:
:
new
(
TestTraitInterfaceImpl
{
value
:
AtomicU32
:
:
new
(
value
)
}
)
}
#
[
uniffi
:
:
export
]
async
fn
invoke_async_test_trait_interface_noop
(
int
:
Arc
<
dyn
AsyncTestTraitInterface
>
)
{
int
.
noop
(
)
.
await
}
#
[
uniffi
:
:
export
]
async
fn
invoke_async_test_trait_interface_get_value
(
int
:
Arc
<
dyn
AsyncTestTraitInterface
>
)
-
>
u32
{
int
.
get_value
(
)
.
await
}
#
[
uniffi
:
:
export
]
async
fn
invoke_async_test_trait_interface_set_value
(
int
:
Arc
<
dyn
AsyncTestTraitInterface
>
value
:
u32
)
{
println
!
(
"
*
*
*
*
invoke_async_test_trait_interface_set_value
{
value
}
"
)
;
int
.
set_value
(
value
)
.
await
}
#
[
uniffi
:
:
export
]
async
fn
invoke_async_test_trait_interface_throw_if_equal
(
int
:
Arc
<
dyn
AsyncTestTraitInterface
>
numbers
:
CallbackInterfaceNumbers
)
-
>
Result
<
CallbackInterfaceNumbers
TestError
>
{
int
.
throw_if_equal
(
numbers
)
.
await
}
#
[
async_trait
:
:
async_trait
]
impl
AsyncTestTraitInterface
for
TestTraitInterfaceImpl
{
async
fn
noop
(
&
self
)
{
}
async
fn
get_value
(
&
self
)
-
>
u32
{
self
.
value
.
load
(
Ordering
:
:
Relaxed
)
}
async
fn
set_value
(
&
self
value
:
u32
)
{
self
.
value
.
store
(
value
Ordering
:
:
Relaxed
)
;
}
async
fn
throw_if_equal
(
&
self
numbers
:
CallbackInterfaceNumbers
)
-
>
Result
<
CallbackInterfaceNumbers
TestError
>
{
if
numbers
.
a
=
=
numbers
.
b
{
Err
(
TestError
:
:
Failure1
)
}
else
{
Ok
(
numbers
)
}
}
}
