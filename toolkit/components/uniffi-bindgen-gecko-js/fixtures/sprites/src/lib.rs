use
std
:
:
sync
:
:
RwLock
;
#
[
derive
(
Debug
Clone
uniffi
:
:
Record
)
]
pub
struct
Point
{
pub
x
:
f64
pub
y
:
f64
}
#
[
derive
(
Debug
Clone
uniffi
:
:
Record
)
]
pub
struct
Vector
{
pub
dx
:
f64
pub
dy
:
f64
}
#
[
uniffi
:
:
export
]
pub
fn
translate
(
p
:
&
Point
v
:
Vector
)
-
>
Point
{
Point
{
x
:
p
.
x
+
v
.
dx
y
:
p
.
y
+
v
.
dy
}
}
#
[
derive
(
Debug
uniffi
:
:
Object
)
]
pub
struct
Sprite
{
current_position
:
RwLock
<
Point
>
}
#
[
uniffi
:
:
export
]
impl
Sprite
{
#
[
uniffi
:
:
constructor
]
pub
fn
new
(
initial_position
:
Option
<
Point
>
)
-
>
Sprite
{
Sprite
{
current_position
:
RwLock
:
:
new
(
initial_position
.
unwrap_or
(
Point
{
x
:
0
.
0
y
:
0
.
0
}
)
)
}
}
#
[
uniffi
:
:
constructor
]
pub
fn
new_relative_to
(
reference
:
Point
direction
:
Vector
)
-
>
Sprite
{
Sprite
{
current_position
:
RwLock
:
:
new
(
translate
(
&
reference
direction
)
)
}
}
pub
fn
get_position
(
&
self
)
-
>
Point
{
self
.
current_position
.
read
(
)
.
unwrap
(
)
.
clone
(
)
}
pub
fn
move_to
(
&
self
position
:
Point
)
{
*
self
.
current_position
.
write
(
)
.
unwrap
(
)
=
position
;
}
pub
fn
move_by
(
&
self
direction
:
Vector
)
{
let
mut
current_position
=
self
.
current_position
.
write
(
)
.
unwrap
(
)
;
*
current_position
=
translate
(
&
current_position
direction
)
}
}
uniffi
:
:
setup_scaffolding
!
(
"
sprites
"
)
;
