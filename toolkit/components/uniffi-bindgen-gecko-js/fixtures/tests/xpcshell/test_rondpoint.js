const
Rondpoint
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
RustRondpoint
.
sys
.
mjs
"
)
;
const
{
Dictionnaire
Enumeration
copieDictionnaire
copieEnumeration
copieEnumerations
copieCarte
EnumerationAvecDonnees
switcheroo
Retourneur
DictionnaireNombresSignes
DictionnaireNombres
Stringifier
Optionneur
OptionneurDictionnaire
}
=
Rondpoint
;
add_task
(
async
function
(
)
{
const
dico
=
new
Dictionnaire
(
Enumeration
.
DEUX
true
0
1235
)
;
const
copyDico
=
await
copieDictionnaire
(
dico
)
;
Assert
.
deepEqual
(
dico
copyDico
)
;
Assert
.
equal
(
await
copieEnumeration
(
Enumeration
.
DEUX
)
Enumeration
.
DEUX
)
;
Assert
.
deepEqual
(
await
copieEnumerations
(
[
Enumeration
.
UN
Enumeration
.
DEUX
]
)
[
Enumeration
.
UN
Enumeration
.
DEUX
]
)
;
const
obj
=
{
0
:
new
EnumerationAvecDonnees
.
Zero
(
)
1
:
new
EnumerationAvecDonnees
.
Un
(
1
)
2
:
new
EnumerationAvecDonnees
.
Deux
(
2
"
deux
"
)
}
;
Assert
.
deepEqual
(
await
copieCarte
(
obj
)
obj
)
;
const
zero
=
new
EnumerationAvecDonnees
.
Zero
(
)
;
const
one
=
new
EnumerationAvecDonnees
.
Un
(
1
)
;
const
two
=
new
EnumerationAvecDonnees
.
Deux
(
2
)
;
Assert
.
notEqual
(
zero
one
)
;
Assert
.
notEqual
(
one
two
)
;
Assert
.
deepEqual
(
zero
new
EnumerationAvecDonnees
.
Zero
(
)
)
;
Assert
.
deepEqual
(
one
new
EnumerationAvecDonnees
.
Un
(
1
)
)
;
Assert
.
notDeepEqual
(
one
new
EnumerationAvecDonnees
.
Un
(
4
)
)
;
Assert
.
ok
(
await
switcheroo
(
false
)
)
;
const
rt
=
await
Retourneur
.
init
(
)
;
const
affirmAllerRetour
=
async
(
arr
fn
equalFn
)
=
>
{
for
(
const
member
of
arr
)
{
if
(
equalFn
)
{
equalFn
(
await
fn
(
member
)
member
)
;
}
else
{
Assert
.
equal
(
await
fn
(
member
)
member
)
;
}
}
}
;
await
affirmAllerRetour
(
[
true
false
]
rt
.
identiqueBoolean
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
-
128
127
]
rt
.
identiqueI8
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
0
0xff
]
rt
.
identiqueU8
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
-
32768
32767
]
rt
.
identiqueI16
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
0
0xffff
]
rt
.
identiqueU16
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
0
1
-
1
-
2147483648
2147483647
]
rt
.
identiqueI32
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
0
0xffffffff
]
rt
.
identiqueU32
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
0
1
-
1
Number
.
MAX_SAFE_INTEGER
Number
.
MIN_SAFE_INTEGER
]
rt
.
identiqueI64
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
0
Number
.
MAX_SAFE_INTEGER
]
rt
.
identiqueU64
.
bind
(
rt
)
)
;
const
equalFloats
=
(
a
b
)
=
>
Assert
.
ok
(
Math
.
abs
(
a
-
b
)
<
=
Number
.
EPSILON
)
;
await
affirmAllerRetour
(
[
0
.
0
0
.
5
0
.
25
1
.
5
]
rt
.
identiqueFloat
.
bind
(
rt
)
equalFloats
)
;
await
affirmAllerRetour
(
[
0
.
0
0
.
5
0
.
25
1
.
5
]
rt
.
identiqueDouble
.
bind
(
rt
)
equalFloats
)
;
await
affirmAllerRetour
(
[
"
"
"
abc
"
"
null
\
u0000byte
"
"
t
"
"
"
"
emoji
multi
-
emoji
a
flag
a
canal
panama
"
]
rt
.
identiqueString
.
bind
(
rt
)
)
;
await
affirmAllerRetour
(
[
-
1
0
1
]
.
map
(
n
=
>
new
DictionnaireNombresSignes
(
n
n
n
n
)
)
rt
.
identiqueNombresSignes
.
bind
(
rt
)
(
a
b
)
=
>
Assert
.
deepEqual
(
a
b
)
)
;
await
affirmAllerRetour
(
[
0
1
]
.
map
(
n
=
>
new
DictionnaireNombres
(
n
n
n
n
)
)
rt
.
identiqueNombres
.
bind
(
rt
)
(
a
b
)
=
>
Assert
.
deepEqual
(
a
b
)
)
;
const
st
=
await
Stringifier
.
init
(
)
;
const
affirmEnchaine
=
async
(
arr
fn
)
=
>
{
for
(
const
member
of
arr
)
{
Assert
.
equal
(
await
fn
(
member
)
String
(
member
)
)
;
}
}
;
await
affirmEnchaine
(
[
true
false
]
st
.
toStringBoolean
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
-
128
127
]
st
.
toStringI8
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
0xff
]
st
.
toStringU8
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
-
32768
32767
]
st
.
toStringI16
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
0xffff
]
st
.
toStringU16
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
1
-
1
-
2147483648
2147483647
]
st
.
toStringI32
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
0xffffffff
]
st
.
toStringU32
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
1
-
1
Number
.
MAX_SAFE_INTEGER
Number
.
MIN_SAFE_INTEGER
]
st
.
toStringI64
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
Number
.
MAX_SAFE_INTEGER
]
st
.
toStringU64
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
.
0
0
.
5
0
.
25
1
.
5
]
st
.
toStringFloat
.
bind
(
st
)
)
;
await
affirmEnchaine
(
[
0
.
0
0
.
5
0
.
25
1
.
5
]
st
.
toStringDouble
.
bind
(
st
)
)
;
const
op
=
await
Optionneur
.
init
(
)
;
Assert
.
equal
(
await
op
.
sinonString
(
)
"
default
"
)
;
Assert
.
ok
(
!
(
await
op
.
sinonBoolean
(
)
)
)
;
Assert
.
deepEqual
(
await
op
.
sinonSequence
(
)
[
]
)
;
Assert
.
equal
(
await
op
.
sinonNull
(
)
null
)
;
Assert
.
equal
(
await
op
.
sinonZero
(
)
0
)
;
Assert
.
equal
(
await
op
.
sinonI8Dec
(
)
-
42
)
;
Assert
.
equal
(
await
op
.
sinonU8Dec
(
)
42
)
;
Assert
.
equal
(
await
op
.
sinonI16Dec
(
)
42
)
;
Assert
.
equal
(
await
op
.
sinonU16Dec
(
)
42
)
;
Assert
.
equal
(
await
op
.
sinonI32Dec
(
)
42
)
;
Assert
.
equal
(
await
op
.
sinonU32Dec
(
)
42
)
;
Assert
.
equal
(
await
op
.
sinonI64Dec
(
)
42
)
;
Assert
.
equal
(
await
op
.
sinonU64Dec
(
)
42
)
;
Assert
.
equal
(
await
op
.
sinonI8Hex
(
)
-
0x7f
)
;
Assert
.
equal
(
await
op
.
sinonU8Hex
(
)
0xff
)
;
Assert
.
equal
(
await
op
.
sinonI16Hex
(
)
0x7f
)
;
Assert
.
equal
(
await
op
.
sinonU16Hex
(
)
0xffff
)
;
Assert
.
equal
(
await
op
.
sinonI32Hex
(
)
0x7fffffff
)
;
Assert
.
equal
(
await
op
.
sinonU32Hex
(
)
0xffffffff
)
;
Assert
.
equal
(
await
op
.
sinonU32Oct
(
)
0o755
)
;
Assert
.
equal
(
await
op
.
sinonF32
(
)
42
.
0
)
;
Assert
.
equal
(
await
op
.
sinonF64
(
)
42
.
1
)
;
Assert
.
equal
(
await
op
.
sinonEnum
(
)
Enumeration
.
TROIS
)
;
await
affirmAllerRetour
(
[
"
foo
"
"
bar
"
]
op
.
sinonString
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
true
false
]
op
.
sinonBoolean
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
[
"
a
"
"
b
"
]
[
]
]
op
.
sinonSequence
.
bind
(
op
)
(
a
b
)
=
>
Assert
.
deepEqual
(
a
b
)
)
;
await
affirmAllerRetour
(
[
"
0
"
"
1
"
]
op
.
sinonNull
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonZero
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU8Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI8Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU16Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI16Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU32Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI32Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU64Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI64Dec
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU8Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI8Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU16Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI16Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU32Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI32Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU64Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonI64Hex
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
1
]
op
.
sinonU32Oct
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
.
0
1
.
0
]
op
.
sinonF32
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
0
.
0
1
.
0
]
op
.
sinonF64
.
bind
(
op
)
)
;
await
affirmAllerRetour
(
[
Enumeration
.
UN
Enumeration
.
DEUX
Enumeration
.
TROIS
]
op
.
sinonEnum
.
bind
(
op
)
)
;
const
defaultes
=
new
OptionneurDictionnaire
(
)
;
const
explicite
=
new
OptionneurDictionnaire
(
-
8
8
-
16
0x10
-
32
32
-
64
64
4
.
0
8
.
0
true
"
default
"
[
]
Enumeration
.
DEUX
null
)
;
Assert
.
deepEqual
(
defaultes
explicite
)
;
await
affirmAllerRetour
(
[
defaultes
explicite
]
rt
.
identiqueOptionneurDictionnaire
.
bind
(
rt
)
(
a
b
)
=
>
Assert
.
deepEqual
(
a
b
)
)
;
}
)
;
