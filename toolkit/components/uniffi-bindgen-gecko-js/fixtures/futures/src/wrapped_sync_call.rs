use
std
:
:
{
sync
:
:
{
Arc
Mutex
OnceLock
}
thread
:
:
sleep
time
:
:
Duration
}
;
use
crate
:
:
oneshot
;
#
[
uniffi
:
:
export
]
pub
trait
WorkerQueue
:
Send
+
Sync
{
fn
add_task
(
&
self
task
:
Arc
<
dyn
RustTask
>
)
;
}
#
[
uniffi
:
:
export
]
pub
trait
RustTask
:
Send
+
Sync
{
fn
run
(
&
self
)
;
}
#
[
uniffi
:
:
export
]
pub
fn
initialize_global_worker_queue
(
worker_queue
:
Arc
<
dyn
WorkerQueue
>
)
{
GLOBAL_WORKER_QUEUE
.
set
(
worker_queue
)
.
unwrap_or_else
(
|
_
|
panic
!
(
"
init_global_worker_queue
called
twice
"
)
)
;
}
static
GLOBAL_WORKER_QUEUE
:
OnceLock
<
Arc
<
dyn
WorkerQueue
>
>
=
OnceLock
:
:
new
(
)
;
pub
async
fn
run_in_background
<
T
:
Send
+
Sync
+
'
static
>
(
task
:
impl
FnOnce
(
)
-
>
T
+
Send
+
Sync
+
'
static
)
-
>
T
{
let
(
tx
rx
)
=
oneshot
:
:
channel
(
)
;
GLOBAL_WORKER_QUEUE
.
get
(
)
.
unwrap_or_else
(
|
|
panic
!
(
"
init_global_worker_queue
never
called
"
)
)
.
add_task
(
RustTaskContainer
:
:
new_arc
(
move
|
|
{
tx
.
send
(
task
(
)
)
}
)
)
;
rx
.
await
}
struct
RustTaskContainer
<
T
:
FnOnce
(
)
+
Send
+
Sync
>
(
Mutex
<
Option
<
T
>
>
)
;
impl
<
T
:
FnOnce
(
)
+
Send
+
Sync
>
RustTaskContainer
<
T
>
{
fn
new_arc
(
task
:
T
)
-
>
Arc
<
Self
>
{
Arc
:
:
new
(
Self
(
Mutex
:
:
new
(
Some
(
task
)
)
)
)
}
}
impl
<
T
:
FnOnce
(
)
+
Send
+
Sync
>
RustTask
for
RustTaskContainer
<
T
>
{
fn
run
(
&
self
)
{
if
let
Some
(
f
)
=
self
.
0
.
lock
(
)
.
unwrap
(
)
.
take
(
)
{
f
(
)
}
}
}
#
[
uniffi
:
:
export
]
pub
fn
initialize_gecko_global_worker_queue
(
)
{
initialize_global_worker_queue
(
Arc
:
:
new
(
GeckoWorkerQueue
)
)
;
}
struct
GeckoWorkerQueue
;
impl
WorkerQueue
for
GeckoWorkerQueue
{
#
[
cfg
(
feature
=
"
moz_task
"
)
]
fn
add_task
(
&
self
task
:
Arc
<
dyn
RustTask
>
)
{
if
let
Err
(
e
)
=
moz_task
:
:
dispatch_background_task
(
"
UniFFI
task
"
move
|
|
task
.
run
(
)
)
{
log
:
:
error
!
(
"
Failed
to
dispatch
background
task
:
{
e
}
"
)
;
}
}
#
[
cfg
(
not
(
feature
=
"
moz_task
"
)
)
]
fn
add_task
(
&
self
_task
:
Arc
<
dyn
RustTask
>
)
{
panic
!
(
"
moz_task
not
enabled
"
)
;
}
}
#
[
uniffi
:
:
export
]
pub
async
fn
expensive_computation
(
)
-
>
u32
{
run_in_background
(
|
|
{
sleep
(
Duration
:
:
from_millis
(
1
)
)
;
1000
}
)
.
await
}
