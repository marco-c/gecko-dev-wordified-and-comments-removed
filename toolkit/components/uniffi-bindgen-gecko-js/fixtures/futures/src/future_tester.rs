use
std
:
:
sync
:
:
Mutex
;
use
crate
:
:
oneshot
;
#
[
derive
(
uniffi
:
:
Object
Default
)
]
pub
struct
FutureTester
{
inner
:
Mutex
<
Vec
<
oneshot
:
:
Sender
<
u8
>
>
>
}
#
[
uniffi
:
:
export
]
impl
FutureTester
{
#
[
uniffi
:
:
constructor
]
pub
fn
init
(
)
-
>
Self
{
Self
:
:
default
(
)
}
async
fn
make_future
(
&
self
)
-
>
u8
{
let
(
tx
rx
)
=
oneshot
:
:
channel
(
)
;
self
.
inner
.
lock
(
)
.
unwrap
(
)
.
push
(
tx
)
;
rx
.
await
}
fn
complete_futures
(
&
self
value
:
u8
)
-
>
u32
{
let
mut
count
=
0
;
for
sender
in
self
.
inner
.
lock
(
)
.
unwrap
(
)
.
drain
(
.
.
)
{
sender
.
send
(
value
)
;
count
+
=
1
;
}
count
}
fn
wake_futures
(
&
self
)
{
for
sender
in
self
.
inner
.
lock
(
)
.
unwrap
(
)
.
iter
(
)
{
sender
.
wake
(
)
}
}
}
