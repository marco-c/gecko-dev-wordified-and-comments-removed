const
{
roundtripCustomType
roundtripUrl
roundtripTimeIntervalMs
roundtripTimeIntervalSecDbl
roundtripTimeIntervalSecFlt
getCustomTypesDemo
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
toolkit
/
components
/
uniffi
-
bindgen
-
gecko
-
js
/
tests
/
generated
/
RustUniffiBindingsTests
.
sys
.
mjs
"
)
;
Assert
.
equal
(
roundtripCustomType
(
100
)
100
)
;
add_task
(
async
function
testUrlCustomType
(
)
{
const
testUrl
=
new
URL
(
"
https
:
/
/
example
.
com
/
path
?
query
=
value
#
fragment
"
)
;
const
result
=
await
roundtripUrl
(
testUrl
)
;
Assert
.
equal
(
result
.
href
testUrl
.
href
"
Round
-
tripped
URL
should
match
"
)
;
Assert
.
equal
(
result
.
toString
(
)
testUrl
.
toString
(
)
)
;
Assert
.
equal
(
result
.
hostname
"
example
.
com
"
)
;
Assert
.
equal
(
result
.
pathname
"
/
path
"
)
;
Assert
.
equal
(
result
.
search
"
?
query
=
value
"
)
;
Assert
.
equal
(
result
.
hash
"
#
fragment
"
)
;
}
)
;
add_task
(
async
function
testTimeIntervalMsCustomType
(
)
{
const
now
=
new
Date
(
)
;
const
result
=
await
roundtripTimeIntervalMs
(
now
)
;
Assert
.
equal
(
Object
.
prototype
.
toString
.
call
(
result
)
"
[
object
Date
]
"
"
Result
should
be
a
Date
instance
"
)
;
Assert
.
equal
(
result
.
getTime
(
)
now
.
getTime
(
)
)
;
}
)
;
add_task
(
async
function
testTimeIntervalSecDblCustomType
(
)
{
const
now
=
new
Date
(
)
;
const
result
=
await
roundtripTimeIntervalSecDbl
(
now
)
;
Assert
.
equal
(
Object
.
prototype
.
toString
.
call
(
result
)
"
[
object
Date
]
"
"
Result
should
be
a
Date
instance
"
)
;
Assert
.
less
(
Math
.
abs
(
result
.
getTime
(
)
-
now
.
getTime
(
)
)
1
"
Times
should
be
very
close
"
)
;
}
)
;
add_task
(
async
function
testCustomTypesDemo
(
)
{
const
demo
=
await
getCustomTypesDemo
(
)
;
Assert
.
equal
(
demo
.
url
.
toString
(
)
"
https
:
/
/
example
.
com
/
"
)
;
Assert
.
equal
(
typeof
demo
.
handle
"
number
"
)
;
Assert
.
equal
(
demo
.
handle
123
)
;
Assert
.
equal
(
Object
.
prototype
.
toString
.
call
(
demo
.
timeIntervalMs
)
"
[
object
Date
]
"
"
timeIntervalMs
should
be
a
Date
instance
"
)
;
Assert
.
equal
(
demo
.
timeIntervalMs
.
getTime
(
)
456000
)
;
Assert
.
equal
(
Object
.
prototype
.
toString
.
call
(
demo
.
timeIntervalSecDbl
)
"
[
object
Date
]
"
"
timeIntervalSecDbl
should
be
a
Date
instance
"
)
;
Assert
.
equal
(
demo
.
timeIntervalSecDbl
.
getTime
(
)
456000
)
;
}
)
;
add_task
(
async
function
testInvalidUrl
(
)
{
await
Assert
.
rejects
(
roundtripUrl
(
"
not
a
valid
url
"
)
/
TypeError
/
"
Should
throw
TypeError
for
invalid
URL
strings
"
)
;
}
)
;
add_task
(
async
function
testDateEdgeCases
(
)
{
const
epoch
=
new
Date
(
0
)
;
Assert
.
equal
(
(
await
roundtripTimeIntervalMs
(
epoch
)
)
.
getTime
(
)
0
)
;
const
beforeEpoch
=
new
Date
(
-
1000
)
;
Assert
.
equal
(
(
await
roundtripTimeIntervalMs
(
beforeEpoch
)
)
.
getTime
(
)
-
1000
)
;
const
farFuture
=
new
Date
(
2147483647000
)
;
Assert
.
equal
(
(
await
roundtripTimeIntervalMs
(
farFuture
)
)
.
getTime
(
)
2147483647000
)
;
}
)
;
add_task
(
async
function
testConfigPresenceComparison
(
)
{
const
testDate
=
new
Date
(
2024
0
1
)
;
const
dblResult
=
await
roundtripTimeIntervalSecDbl
(
testDate
)
;
Assert
.
equal
(
Object
.
prototype
.
toString
.
call
(
dblResult
)
"
[
object
Date
]
"
"
Result
should
be
a
Date
instance
"
)
;
await
Assert
.
rejects
(
roundtripTimeIntervalSecDbl
(
"
NOT
A
DATE
"
)
/
TypeError
/
"
Passing
Date
to
sconfig
type
should
fail
"
)
;
const
testSeconds
=
testDate
.
getTime
(
)
/
1000
;
const
fltResult
=
await
roundtripTimeIntervalSecFlt
(
testSeconds
)
;
Assert
.
equal
(
typeof
fltResult
"
number
"
"
TimeIntervalSecFlt
(
without
config
)
should
return
numbers
"
)
;
}
)
;
