"
use
strict
"
;
let
AboutWebauthnService
=
null
;
var
AboutWebauthnManagerJS
=
{
_topic
:
"
about
-
webauthn
-
prompt
"
_initialized
:
false
_l10n
:
null
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
_l10n
=
new
Localization
(
[
"
toolkit
/
about
/
aboutWebauthn
.
ftl
"
]
true
)
;
Services
.
obs
.
addObserver
(
this
this
.
_topic
)
;
this
.
_initialized
=
true
;
reset_page
(
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
this
.
_topic
)
;
}
observe
(
aSubject
aTopic
aData
)
{
let
data
=
JSON
.
parse
(
aData
)
;
if
(
data
.
type
=
=
"
selected
-
device
"
)
{
this
.
_curr_data
=
data
.
auth_info
;
document
.
getElementById
(
"
token
-
info
-
section
"
)
.
style
.
display
=
"
block
"
;
this
.
show_ui_based_on_authenticator_info
(
data
)
;
}
else
if
(
data
.
type
=
=
"
select
-
device
"
)
{
set_info_text
(
"
about
-
webauthn
-
text
-
select
-
device
"
)
;
}
else
if
(
data
.
type
=
=
"
listen
-
success
"
|
|
data
.
type
=
=
"
listen
-
error
"
)
{
reset_page
(
)
;
AboutWebauthnService
.
listen
(
)
;
}
}
show_authenticator_options
(
options
element
l10n_base
)
{
let
table
=
document
.
getElementById
(
element
)
;
var
empty_table
=
document
.
createElement
(
"
table
"
)
;
empty_table
.
id
=
element
;
table
.
parentNode
.
replaceChild
(
empty_table
table
)
;
table
=
document
.
getElementById
(
element
)
;
for
(
let
key
in
options
)
{
if
(
key
=
=
"
options
"
)
{
continue
;
}
var
row
=
table
.
insertRow
(
0
)
;
var
cell1
=
row
.
insertCell
(
0
)
;
var
cell2
=
row
.
insertCell
(
1
)
;
let
key_text
=
this
.
_l10n
.
formatValueSync
(
l10n_base
+
"
-
"
+
key
.
toLowerCase
(
)
.
replace
(
/
_
/
g
"
-
"
)
)
;
var
key_node
=
document
.
createTextNode
(
key_text
)
;
cell1
.
appendChild
(
key_node
)
;
var
raw_value
=
JSON
.
stringify
(
options
[
key
]
)
;
var
value
=
raw_value
;
if
(
[
"
true
"
"
false
"
"
null
"
]
.
includes
(
raw_value
)
)
{
value
=
this
.
_l10n
.
formatValueSync
(
l10n_base
+
"
-
"
+
raw_value
)
;
}
var
value_node
=
document
.
createTextNode
(
value
)
;
cell2
.
appendChild
(
value_node
)
;
}
}
show_ui_based_on_authenticator_info
(
data
)
{
document
.
getElementById
(
"
info
-
text
-
div
"
)
.
hidden
=
true
;
if
(
data
.
auth_info
)
{
document
.
getElementById
(
"
main
-
content
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
categories
"
)
.
hidden
=
false
;
this
.
show_authenticator_options
(
data
.
auth_info
.
options
"
authenticator
-
options
"
"
about
-
webauthn
-
auth
-
option
"
)
;
this
.
show_authenticator_options
(
data
.
auth_info
"
authenticator
-
info
"
"
about
-
webauthn
-
auth
-
info
"
)
;
}
else
{
set_info_text
(
"
about
-
webauthn
-
text
-
non
-
ctap2
-
device
"
)
;
}
}
}
;
function
set_info_text
(
l10nId
)
{
document
.
getElementById
(
"
info
-
text
-
div
"
)
.
hidden
=
false
;
let
field
=
document
.
getElementById
(
"
info
-
text
-
field
"
)
;
field
.
setAttribute
(
"
data
-
l10n
-
id
"
l10nId
)
;
}
function
reset_page
(
)
{
document
.
getElementById
(
"
main
-
content
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
categories
"
)
.
hidden
=
true
;
set_info_text
(
"
about
-
webauthn
-
text
-
connect
-
device
"
)
;
}
async
function
onLoad
(
)
{
AboutWebauthnManagerJS
.
init
(
)
;
try
{
AboutWebauthnService
.
listen
(
)
;
}
catch
(
ex
)
{
set_info_text
(
"
about
-
webauthn
-
text
-
not
-
available
"
)
;
AboutWebauthnManagerJS
.
uninit
(
)
;
}
}
try
{
AboutWebauthnService
=
Cc
[
"
mozilla
.
org
/
webauthn
/
service
;
1
"
]
.
getService
(
Ci
.
nsIWebAuthnService
)
;
document
.
addEventListener
(
"
DOMContentLoaded
"
onLoad
)
;
window
.
addEventListener
(
"
beforeunload
"
event
=
>
{
AboutWebauthnManagerJS
.
uninit
(
)
;
if
(
AboutWebauthnService
)
{
AboutWebauthnService
.
cancel
(
0
)
;
}
}
)
;
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
}
