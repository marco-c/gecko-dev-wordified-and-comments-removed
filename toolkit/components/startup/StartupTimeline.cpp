#
include
"
StartupTimeline
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
TimeStamp
StartupTimeline
:
:
sStartupTimeline
[
StartupTimeline
:
:
MAX_EVENT_ID
]
;
const
char
*
StartupTimeline
:
:
sStartupTimelineDesc
[
StartupTimeline
:
:
MAX_EVENT_ID
]
=
{
#
define
mozilla_StartupTimeline_Event
(
ev
desc
)
desc
#
include
"
StartupTimeline
.
h
"
#
undef
mozilla_StartupTimeline_Event
}
;
}
using
mozilla
:
:
StartupTimeline
;
using
mozilla
:
:
TimeStamp
;
void
XRE_StartupTimelineRecord
(
int
aEvent
TimeStamp
aWhen
)
{
StartupTimeline
:
:
Record
(
(
StartupTimeline
:
:
Event
)
aEvent
aWhen
)
;
}
void
StartupTimeline
:
:
RecordOnce
(
Event
ev
)
{
RecordOnce
(
ev
TimeStamp
:
:
Now
(
)
)
;
}
void
StartupTimeline
:
:
RecordOnce
(
Event
ev
const
TimeStamp
&
aWhen
)
{
if
(
HasRecord
(
ev
)
)
{
return
;
}
Record
(
ev
aWhen
)
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
if
(
ev
=
=
FIRST_PAINT
|
|
ev
=
=
FIRST_PAINT2
)
{
uint32_t
firstPaintTime
=
(
uint32_t
)
(
aWhen
-
TimeStamp
:
:
ProcessCreation
(
)
)
.
ToMilliseconds
(
)
;
Telemetry
:
:
ScalarSet
(
ev
=
=
FIRST_PAINT
?
Telemetry
:
:
ScalarID
:
:
TIMESTAMPS_FIRST_PAINT
:
Telemetry
:
:
ScalarID
:
:
TIMESTAMPS_FIRST_PAINT_TWO
firstPaintTime
)
;
}
}
