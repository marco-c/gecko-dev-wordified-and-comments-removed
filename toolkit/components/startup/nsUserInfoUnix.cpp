#
include
"
nsUserInfo
.
h
"
#
include
"
nsCRT
.
h
"
#
include
<
pwd
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
unistd
.
h
>
#
include
<
sys
/
utsname
.
h
>
#
include
"
nsString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsNativeCharsetUtils
.
h
"
#
if
defined
(
NO_PW_GECOS
)
#
define
PW_GECOS
pw_name
#
else
#
define
PW_GECOS
pw_gecos
#
endif
nsUserInfo
:
:
nsUserInfo
(
)
{
}
nsUserInfo
:
:
~
nsUserInfo
(
)
{
}
NS_IMPL_ISUPPORTS
(
nsUserInfo
nsIUserInfo
)
NS_IMETHODIMP
nsUserInfo
:
:
GetFullname
(
nsAString
&
aFullname
)
{
struct
passwd
*
pw
=
nullptr
;
pw
=
getpwuid
(
geteuid
(
)
)
;
if
(
!
pw
|
|
!
pw
-
>
PW_GECOS
)
return
NS_ERROR_FAILURE
;
#
ifdef
DEBUG_sspitzer
printf
(
"
fullname
=
%
s
\
n
"
pw
-
>
PW_GECOS
)
;
#
endif
nsAutoCString
fullname
(
pw
-
>
PW_GECOS
)
;
int32_t
index
;
if
(
(
index
=
fullname
.
Find
(
"
"
)
)
!
=
kNotFound
)
fullname
.
Truncate
(
index
)
;
if
(
pw
-
>
pw_name
)
{
nsAutoCString
username
(
pw
-
>
pw_name
)
;
if
(
!
username
.
IsEmpty
(
)
&
&
nsCRT
:
:
IsLower
(
username
.
CharAt
(
0
)
)
)
username
.
SetCharAt
(
nsCRT
:
:
ToUpper
(
username
.
CharAt
(
0
)
)
0
)
;
fullname
.
ReplaceSubstring
(
"
&
"
username
.
get
(
)
)
;
}
NS_CopyNativeToUnicode
(
fullname
aFullname
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsUserInfo
:
:
GetUsername
(
nsACString
&
aUsername
)
{
struct
passwd
*
pw
=
nullptr
;
pw
=
getpwuid
(
geteuid
(
)
)
;
if
(
!
pw
|
|
!
pw
-
>
pw_name
)
return
NS_ERROR_FAILURE
;
#
ifdef
DEBUG_sspitzer
printf
(
"
username
=
%
s
\
n
"
pw
-
>
pw_name
)
;
#
endif
aUsername
.
Assign
(
pw
-
>
pw_name
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsUserInfo
:
:
GetDomain
(
nsACString
&
aDomain
)
{
nsresult
rv
=
NS_ERROR_FAILURE
;
struct
utsname
buf
;
char
*
domainname
=
nullptr
;
if
(
uname
(
&
buf
)
<
0
)
{
return
rv
;
}
#
if
defined
(
__linux__
)
domainname
=
buf
.
domainname
;
#
endif
if
(
domainname
&
&
domainname
[
0
]
)
{
aDomain
.
Assign
(
domainname
)
;
rv
=
NS_OK
;
}
else
{
if
(
buf
.
nodename
[
0
]
)
{
char
*
pos
=
strchr
(
buf
.
nodename
'
.
'
)
;
if
(
pos
)
{
aDomain
.
Assign
(
pos
+
1
)
;
rv
=
NS_OK
;
}
}
}
return
rv
;
}
NS_IMETHODIMP
nsUserInfo
:
:
GetEmailAddress
(
nsACString
&
aEmailAddress
)
{
nsresult
rv
;
nsCString
username
;
nsCString
domain
;
rv
=
GetUsername
(
username
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
rv
=
GetDomain
(
domain
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
username
.
IsEmpty
(
)
|
|
domain
.
IsEmpty
(
)
)
{
return
NS_ERROR_FAILURE
;
}
aEmailAddress
=
username
+
NS_LITERAL_CSTRING
(
"
"
)
+
domain
;
return
NS_OK
;
}
