var
EXPORTED_SYMBOLS
=
[
"
CrashMonitor
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
const
NOTIFICATIONS
=
[
"
final
-
ui
-
startup
"
"
sessionstore
-
windows
-
restored
"
"
quit
-
application
-
granted
"
"
quit
-
application
"
"
profile
-
change
-
net
-
teardown
"
"
profile
-
change
-
teardown
"
"
profile
-
before
-
change
"
"
sessionstore
-
final
-
state
-
write
-
complete
"
]
;
var
CrashMonitorInternal
=
{
checkpoints
:
{
}
previousCheckpoints
:
null
profileBeforeChangeDeferred
:
PromiseUtils
.
defer
(
)
path
:
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
sessionCheckpoints
.
json
"
)
loadPreviousCheckpoints
(
)
{
this
.
previousCheckpoints
=
(
async
function
(
)
{
let
data
;
try
{
data
=
await
OS
.
File
.
read
(
CrashMonitorInternal
.
path
{
encoding
:
"
utf
-
8
"
}
)
;
}
catch
(
ex
)
{
if
(
!
(
ex
instanceof
OS
.
File
.
Error
)
)
{
throw
ex
;
}
if
(
!
ex
.
becauseNoSuchFile
)
{
Cu
.
reportError
(
"
Error
while
loading
crash
monitor
data
:
"
+
ex
.
toString
(
)
)
;
}
return
null
;
}
let
notifications
;
try
{
notifications
=
JSON
.
parse
(
data
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Error
while
parsing
crash
monitor
data
:
"
+
ex
)
;
return
null
;
}
if
(
Object
(
notifications
)
!
=
=
notifications
)
{
Cu
.
reportError
(
"
Error
while
parsing
crash
monitor
data
:
invalid
monitor
data
"
)
;
return
null
;
}
return
Object
.
freeze
(
notifications
)
;
}
)
(
)
;
return
this
.
previousCheckpoints
;
}
}
;
var
CrashMonitor
=
{
get
previousCheckpoints
(
)
{
if
(
!
CrashMonitorInternal
.
initialized
)
{
throw
new
Error
(
"
CrashMonitor
must
be
initialized
before
getting
previous
checkpoints
"
)
;
}
return
CrashMonitorInternal
.
previousCheckpoints
;
}
init
(
)
{
if
(
CrashMonitorInternal
.
initialized
)
{
throw
new
Error
(
"
CrashMonitor
.
init
(
)
must
only
be
called
once
!
"
)
;
}
let
promise
=
CrashMonitorInternal
.
loadPreviousCheckpoints
(
)
;
CrashMonitorInternal
.
checkpoints
[
"
profile
-
after
-
change
"
]
=
true
;
NOTIFICATIONS
.
forEach
(
function
(
aTopic
)
{
Services
.
obs
.
addObserver
(
this
aTopic
)
;
}
this
)
;
OS
.
File
.
profileBeforeChange
.
addBlocker
(
"
CrashMonitor
:
Writing
notifications
to
file
after
receiving
profile
-
before
-
change
"
CrashMonitorInternal
.
profileBeforeChangeDeferred
.
promise
(
)
=
>
this
.
checkpoints
)
;
CrashMonitorInternal
.
initialized
=
true
;
return
promise
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
!
(
aTopic
in
CrashMonitorInternal
.
checkpoints
)
)
{
CrashMonitorInternal
.
checkpoints
[
aTopic
]
=
true
;
(
async
function
(
)
{
try
{
let
data
=
JSON
.
stringify
(
CrashMonitorInternal
.
checkpoints
)
;
await
OS
.
File
.
writeAtomic
(
CrashMonitorInternal
.
path
data
{
tmpPath
:
CrashMonitorInternal
.
path
+
"
.
tmp
"
}
)
;
}
finally
{
if
(
aTopic
=
=
"
profile
-
before
-
change
"
)
{
CrashMonitorInternal
.
profileBeforeChangeDeferred
.
resolve
(
)
;
}
}
}
)
(
)
;
}
if
(
NOTIFICATIONS
.
every
(
elem
=
>
elem
in
CrashMonitorInternal
.
checkpoints
)
)
{
NOTIFICATIONS
.
forEach
(
function
(
aTopic
)
{
Services
.
obs
.
removeObserver
(
this
aTopic
)
;
}
this
)
;
}
}
}
;
Object
.
freeze
(
CrashMonitor
)
;
