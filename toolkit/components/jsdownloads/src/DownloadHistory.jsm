"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
DownloadHistory
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
const
METADATA_ANNO
=
"
downloads
/
metaData
"
;
const
METADATA_STATE_FINISHED
=
1
;
const
METADATA_STATE_FAILED
=
2
;
const
METADATA_STATE_CANCELED
=
3
;
const
METADATA_STATE_BLOCKED_PARENTAL
=
6
;
const
METADATA_STATE_DIRTY
=
8
;
this
.
DownloadHistory
=
{
updateMetaData
(
download
)
{
if
(
download
.
source
.
isPrivate
|
|
!
download
.
stopped
)
{
return
;
}
let
state
=
METADATA_STATE_CANCELED
;
if
(
download
.
succeeded
)
{
state
=
METADATA_STATE_FINISHED
;
}
else
if
(
download
.
error
)
{
if
(
download
.
error
.
becauseBlockedByParentalControls
)
{
state
=
METADATA_STATE_BLOCKED_PARENTAL
;
}
else
if
(
download
.
error
.
becauseBlockedByReputationCheck
)
{
state
=
METADATA_STATE_DIRTY
;
}
else
{
state
=
METADATA_STATE_FAILED
;
}
}
let
metaData
=
{
state
endTime
:
download
.
endTime
}
;
if
(
download
.
succeeded
)
{
metaData
.
fileSize
=
download
.
target
.
size
;
}
if
(
download
.
error
&
&
download
.
error
.
reputationCheckVerdict
)
{
metaData
.
reputationCheckVerdict
=
download
.
error
.
reputationCheckVerdict
;
}
try
{
PlacesUtils
.
annotations
.
setPageAnnotation
(
Services
.
io
.
newURI
(
download
.
source
.
url
)
METADATA_ANNO
JSON
.
stringify
(
metaData
)
0
PlacesUtils
.
annotations
.
EXPIRE_WITH_HISTORY
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
;
