#
include
"
nsISupports
.
idl
"
[
scriptable
uuid
(
063813a0
-
85d8
-
4e77
-
80ea
-
b61292c0493d
)
]
interface
nsIInstalledApplication
:
nsISupports
{
readonly
attribute
AString
name
;
readonly
attribute
AString
publisher
;
}
;
[
scriptable
uuid
(
d33ff086
-
b328
-
4ae6
-
aaf5
-
52d41aa5df38
)
]
interface
nsIAboutThirdParty
:
nsISupports
{
const
unsigned
long
ModuleType_Unknown
=
1
<
<
0
;
const
unsigned
long
ModuleType_IME
=
1
<
<
1
;
const
unsigned
long
ModuleType_ShellExtension
=
1
<
<
2
;
const
unsigned
long
ModuleType_BlockedByUser
=
1
<
<
3
;
unsigned
long
lookupModuleType
(
in
AString
aLeafName
)
;
nsIInstalledApplication
lookupApplication
(
in
AString
aModulePath
)
;
void
getBlockedModuleNames
(
in
Array
<
AString
>
aLoadedModuleNames
out
Array
<
AString
>
aBlockedModuleNames
)
;
readonly
attribute
bool
isDynamicBlocklistAvailable
;
readonly
attribute
bool
isDynamicBlocklistDisabled
;
[
implicit_jscontext
]
Promise
updateBlocklist
(
in
AString
aLeafName
in
boolean
aNewBlockStatus
)
;
[
implicit_jscontext
]
Promise
collectSystemInfo
(
)
;
void
openAndCloseFileDialogForTesting
(
in
AString
aModuleName
in
AString
aInitialDir
in
AString
aFilter
)
;
}
;
