#
include
"
MsiDatabase
.
h
"
#
ifdef
UNICODE
#
define
MSIDBOPEN_READONLY_W
MSIDBOPEN_READONLY
#
define
INSTALLPROPERTY_LOCALPACKAGE_W
INSTALLPROPERTY_LOCALPACKAGE
#
else
#
define
MSIDBOPEN_READONLY_W
reinterpret_cast
<
LPCWSTR
>
(
MSIDBOPEN_READONLY
)
#
define
INSTALLPROPERTY_LOCALPACKAGE_W
L
"
LocalPackage
"
#
endif
namespace
mozilla
{
UniquePtr
<
wchar_t
[
]
>
MsiDatabase
:
:
GetRecordString
(
MSIHANDLE
aRecord
UINT
aFieldIndex
)
{
wchar_t
kEmptyString
[
]
=
L
"
"
;
DWORD
len
=
0
;
UINT
ret
=
:
:
MsiRecordGetStringW
(
aRecord
aFieldIndex
kEmptyString
&
len
)
;
if
(
ret
!
=
ERROR_MORE_DATA
)
{
return
nullptr
;
}
+
+
len
;
auto
buf
=
MakeUnique
<
wchar_t
[
]
>
(
len
)
;
ret
=
:
:
MsiRecordGetStringW
(
aRecord
aFieldIndex
buf
.
get
(
)
&
len
)
;
if
(
ret
!
=
ERROR_SUCCESS
)
{
return
nullptr
;
}
return
buf
;
}
MsiDatabase
:
:
MsiDatabase
(
const
wchar_t
*
aDatabasePath
)
{
MSIHANDLE
handle
=
0
;
UINT
ret
=
:
:
MsiOpenDatabaseW
(
aDatabasePath
MSIDBOPEN_READONLY_W
&
handle
)
;
if
(
ret
!
=
ERROR_SUCCESS
)
{
return
;
}
mDatabase
.
own
(
handle
)
;
}
Maybe
<
MsiDatabase
>
MsiDatabase
:
:
FromProductId
(
const
wchar_t
*
aProductId
)
{
DWORD
len
=
MAX_PATH
;
wchar_t
bufStack
[
MAX_PATH
]
;
UINT
ret
=
:
:
MsiGetProductInfoW
(
aProductId
INSTALLPROPERTY_LOCALPACKAGE_W
bufStack
&
len
)
;
if
(
ret
=
=
ERROR_SUCCESS
)
{
return
Some
(
MsiDatabase
(
bufStack
)
)
;
}
if
(
ret
!
=
ERROR_MORE_DATA
)
{
return
Nothing
(
)
;
}
+
+
len
;
std
:
:
unique_ptr
<
wchar_t
[
]
>
bufHeap
(
new
wchar_t
[
len
]
)
;
ret
=
:
:
MsiGetProductInfoW
(
aProductId
INSTALLPROPERTY_LOCALPACKAGE_W
bufHeap
.
get
(
)
&
len
)
;
if
(
ret
=
=
ERROR_SUCCESS
)
{
return
Some
(
MsiDatabase
(
bufHeap
.
get
(
)
)
)
;
}
return
Nothing
(
)
;
}
MsiDatabase
:
:
operator
bool
(
)
const
{
return
!
!
mDatabase
;
}
}
