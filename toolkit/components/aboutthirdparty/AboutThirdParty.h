#
ifndef
__AboutThirdParty_h__
#
define
__AboutThirdParty_h__
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsIAboutThirdParty
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
class
DynamicBlocklistWriter
;
using
InstallLocationT
=
CompactPair
<
nsString
nsCOMPtr
<
nsIInstalledApplication
>
>
;
using
ComponentPathMapT
=
nsInterfaceHashtable
<
nsStringCaseInsensitiveHashKey
nsIInstalledApplication
>
;
enum
class
KnownModuleType
:
uint32_t
{
Ime
=
0
IconOverlay
ContextMenuHandler
CopyHookHandler
DragDropHandler
PropertySheetHandler
DataHandler
DropHandler
IconHandler
InfotipHandler
PropertyHandler
Last
}
;
struct
InstallLocationComparator
{
const
nsAString
&
mFilePath
;
explicit
InstallLocationComparator
(
const
nsAString
&
aFilePath
)
;
int
operator
(
)
(
const
InstallLocationT
&
aLocation
)
const
;
}
;
class
InstalledApplication
final
:
public
nsIInstalledApplication
{
nsString
mName
;
nsString
mPublisher
;
~
InstalledApplication
(
)
=
default
;
public
:
InstalledApplication
(
)
=
default
;
InstalledApplication
(
nsString
&
&
aAppName
nsString
&
&
aPublisher
)
;
InstalledApplication
(
InstalledApplication
&
&
)
=
delete
;
InstalledApplication
&
operator
=
(
InstalledApplication
&
&
)
=
delete
;
InstalledApplication
(
const
InstalledApplication
&
)
=
delete
;
InstalledApplication
&
operator
=
(
const
InstalledApplication
&
)
=
delete
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINSTALLEDAPPLICATION
}
;
using
BackgroundThreadPromise
=
MozPromise
<
bool
nsresult
false
>
;
class
AboutThirdParty
final
:
public
nsIAboutThirdParty
{
enum
class
WorkerState
:
uint32_t
{
Init
Running
Done
}
;
Atomic
<
WorkerState
SequentiallyConsistent
>
mWorkerState
;
RefPtr
<
BackgroundThreadPromise
:
:
Private
>
mPromise
;
nsTHashMap
<
nsStringCaseInsensitiveHashKey
uint32_t
>
mKnownModules
;
ComponentPathMapT
mComponentPaths
;
nsTArray
<
InstallLocationT
>
mLocations
;
#
if
defined
(
MOZ_LAUNCHER_PROCESS
)
Atomic
<
DynamicBlocklistWriter
*
>
mPendingWriter
;
nsTHashSet
<
nsStringCaseInsensitiveHashKey
>
mDynamicBlocklist
;
#
endif
~
AboutThirdParty
(
)
=
default
;
void
BackgroundThread
(
)
;
void
AddKnownModule
(
const
nsString
&
aPath
KnownModuleType
aType
)
;
public
:
static
already_AddRefed
<
AboutThirdParty
>
GetSingleton
(
)
;
AboutThirdParty
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIABOUTTHIRDPARTY
RefPtr
<
BackgroundThreadPromise
>
CollectSystemInfoAsync
(
)
;
}
;
}
#
endif
