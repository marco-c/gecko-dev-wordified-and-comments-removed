#
include
"
AboutThirdParty
.
h
"
#
include
<
windows
.
h
>
#
include
<
shlobj
.
h
>
#
include
<
shobjidl
.
h
>
namespace
{
class
FileDialogEventsForTesting
final
:
public
IFileDialogEvents
{
mozilla
:
:
Atomic
<
uint32_t
>
mRefCnt
;
const
nsString
mTargetName
;
RefPtr
<
IShellItem
>
mTargetDir
;
~
FileDialogEventsForTesting
(
)
=
default
;
public
:
FileDialogEventsForTesting
(
const
nsAString
&
aTargetName
IShellItem
*
aTargetDir
)
:
mRefCnt
(
0
)
mTargetName
(
PromiseFlatString
(
aTargetName
)
)
mTargetDir
(
aTargetDir
)
{
}
STDMETHODIMP
QueryInterface
(
REFIID
aRefIID
void
*
*
aResult
)
{
if
(
!
aResult
)
{
return
E_INVALIDARG
;
}
if
(
aRefIID
=
=
IID_IFileDialogEvents
)
{
RefPtr
ref
(
static_cast
<
IFileDialogEvents
*
>
(
this
)
)
;
ref
.
forget
(
aResult
)
;
return
S_OK
;
}
return
E_NOINTERFACE
;
}
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
{
return
+
+
mRefCnt
;
}
STDMETHODIMP_
(
ULONG
)
Release
(
)
{
ULONG
result
=
-
-
mRefCnt
;
if
(
!
result
)
{
delete
this
;
}
return
result
;
}
STDMETHODIMP
OnFileOk
(
IFileDialog
*
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
OnFolderChanging
(
IFileDialog
*
IShellItem
*
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
OnShareViolation
(
IFileDialog
*
IShellItem
*
FDE_SHAREVIOLATION_RESPONSE
*
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
OnTypeChange
(
IFileDialog
*
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
OnOverwrite
(
IFileDialog
*
IShellItem
*
FDE_OVERWRITE_RESPONSE
*
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
OnFolderChange
(
IFileDialog
*
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
OnSelectionChange
(
IFileDialog
*
aDialog
)
{
if
(
:
:
GetModuleHandleW
(
mTargetName
.
get
(
)
)
)
{
aDialog
-
>
Close
(
S_OK
)
;
}
else
{
aDialog
-
>
SetFolder
(
mTargetDir
)
;
}
return
E_NOTIMPL
;
}
}
;
}
namespace
mozilla
{
NS_IMETHODIMP
AboutThirdParty
:
:
OpenAndCloseFileDialogForTesting
(
const
nsAString
&
aModuleName
const
nsAString
&
aInitialDir
const
nsAString
&
aFilter
)
{
:
:
SHChangeNotify
(
SHCNE_ASSOCCHANGED
SHCNF_IDLIST
nullptr
nullptr
)
;
RefPtr
<
IFileOpenDialog
>
dialog
;
if
(
FAILED
(
:
:
CoCreateInstance
(
CLSID_FileOpenDialog
nullptr
CLSCTX_INPROC_SERVER
IID_IFileOpenDialog
getter_AddRefs
(
dialog
)
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
const
nsString
&
filter
=
PromiseFlatString
(
aFilter
)
;
COMDLG_FILTERSPEC
fileFilter
=
{
L
"
Test
Target
"
filter
.
get
(
)
}
;
if
(
FAILED
(
dialog
-
>
SetFileTypes
(
1
&
fileFilter
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
<
IShellItem
>
folder
;
if
(
FAILED
(
:
:
SHCreateItemFromParsingName
(
PromiseFlatString
(
aInitialDir
)
.
get
(
)
nullptr
IID_IShellItem
getter_AddRefs
(
folder
)
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
FAILED
(
dialog
-
>
SetFolder
(
folder
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
events
(
new
FileDialogEventsForTesting
(
aModuleName
folder
)
)
;
DWORD
cookie
;
if
(
FAILED
(
dialog
-
>
Advise
(
events
&
cookie
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
FAILED
(
dialog
-
>
Show
(
nullptr
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
FAILED
(
dialog
-
>
Unadvise
(
cookie
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
return
NS_OK
;
}
}
