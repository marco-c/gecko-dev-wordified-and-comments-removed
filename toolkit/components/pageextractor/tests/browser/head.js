async
function
html
(
strings
.
.
.
values
)
{
let
markup
=
"
"
;
for
(
let
i
=
0
;
i
<
strings
.
length
;
i
+
+
)
{
markup
+
=
strings
[
i
]
;
if
(
i
<
values
.
length
)
{
markup
+
=
values
[
i
]
;
}
}
markup
=
<
!
DOCTYPE
html
>
<
body
>
{
markup
}
<
/
body
>
;
const
{
url
serverClosed
}
=
serveOnce
(
markup
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
true
)
;
const
actor
=
tab
.
linkedBrowser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
PageExtractor
"
)
;
return
{
actor
async
cleanup
(
)
{
info
(
"
Cleaning
up
"
)
;
await
serverClosed
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
;
}
function
serveOnce
(
html
)
{
const
{
HttpServer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
)
;
info
(
"
Create
server
"
)
;
const
server
=
new
HttpServer
(
)
;
const
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
server
.
registerPathHandler
(
"
/
page
.
html
"
(
_request
response
)
=
>
{
info
(
"
Request
received
for
:
"
+
url
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
)
;
response
.
write
(
html
)
;
resolve
(
server
.
stop
(
)
)
;
}
)
;
server
.
start
(
-
1
)
;
let
{
primaryHost
primaryPort
}
=
server
.
identity
;
const
url
=
http
:
/
/
{
primaryHost
}
:
{
primaryPort
}
/
page
.
html
;
info
(
"
Server
listening
for
:
"
+
url
)
;
return
{
url
serverClosed
:
promise
}
;
}
