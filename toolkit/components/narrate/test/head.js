"
use
strict
"
;
const
TEST_ARTICLE
=
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
narrate
/
test
/
moby_dick
.
html
"
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
const
TEST_PREFS
=
[
[
"
reader
.
parse
-
on
-
load
.
enabled
"
true
]
[
"
media
.
webspeech
.
synth
.
enabled
"
true
]
[
"
media
.
webspeech
.
synth
.
test
"
true
]
[
"
narrate
.
enabled
"
true
]
[
"
narrate
.
test
"
true
]
]
;
function
setup
(
voiceUri
)
{
TEST_PREFS
.
forEach
(
(
[
name
value
]
)
=
>
{
setBoolPref
(
name
value
)
;
}
)
;
if
(
voiceUri
)
{
Services
.
prefs
.
setCharPref
(
"
narrate
.
voice
"
voiceUri
)
;
}
}
function
teardown
(
)
{
TEST_PREFS
.
forEach
(
pref
=
>
{
clearUserPref
(
pref
[
0
]
)
;
}
)
;
}
function
spawnInNewReaderTab
(
url
func
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
about
:
reader
?
url
=
{
encodeURIComponent
(
url
)
}
}
function
*
(
browser
)
{
yield
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
Components
.
utils
.
import
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
"
+
"
toolkit
/
components
/
narrate
/
test
/
NarrateTestUtils
.
jsm
"
)
;
yield
NarrateTestUtils
.
getReaderReadyPromise
(
content
)
;
}
)
;
yield
ContentTask
.
spawn
(
browser
null
func
)
;
}
)
;
}
function
setBoolPref
(
name
value
)
{
Services
.
prefs
.
setBoolPref
(
name
value
)
;
}
function
clearUserPref
(
name
)
{
Services
.
prefs
.
clearUserPref
(
name
)
;
}
