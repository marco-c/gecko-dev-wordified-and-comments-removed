"
use
strict
"
;
const
{
_ExperimentManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
messaging
-
system
/
experiments
/
ExperimentManager
.
jsm
"
)
;
const
{
ExperimentStore
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
messaging
-
system
/
experiments
/
ExperimentStore
.
jsm
"
)
;
const
{
ExperimentFakes
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MSTestUtils
.
jsm
"
)
;
add_task
(
async
function
test_onStartup_setExperimentActive_called
(
)
{
const
manager
=
ExperimentFakes
.
manager
(
)
;
const
sandbox
=
sinon
.
sandbox
.
create
(
)
;
sandbox
.
stub
(
manager
"
setExperimentActive
"
)
;
const
active
=
[
"
foo
"
"
bar
"
]
.
map
(
ExperimentFakes
.
experiment
)
;
const
inactive
=
[
"
baz
"
"
qux
"
]
.
map
(
slug
=
>
ExperimentFakes
.
experiment
(
slug
{
active
:
false
}
)
)
;
[
.
.
.
active
.
.
.
inactive
]
.
forEach
(
exp
=
>
manager
.
store
.
addExperiment
(
exp
)
)
;
await
manager
.
onStartup
(
)
;
active
.
forEach
(
exp
=
>
Assert
.
equal
(
manager
.
setExperimentActive
.
calledWith
(
exp
)
true
should
call
setExperimentActive
for
active
experiment
:
{
exp
.
slug
}
)
)
;
inactive
.
forEach
(
exp
=
>
Assert
.
equal
(
manager
.
setExperimentActive
.
calledWith
(
exp
)
false
should
not
call
setExperimentActive
for
inactive
experiment
:
{
exp
.
slug
}
)
)
;
}
)
;
add_task
(
async
function
test_onRecipe_track_slug
(
)
{
const
manager
=
ExperimentFakes
.
manager
(
)
;
const
sandbox
=
sinon
.
sandbox
.
create
(
)
;
sandbox
.
spy
(
manager
"
enroll
"
)
;
sandbox
.
spy
(
manager
"
updateEnrollment
"
)
;
const
fooRecipe
=
ExperimentFakes
.
recipe
(
"
foo
"
)
;
await
manager
.
onRecipe
(
fooRecipe
)
;
Assert
.
equal
(
manager
.
slugsSeenInThisSession
.
has
(
"
foo
"
)
true
"
should
add
slug
to
slugsSeenInThisSession
"
)
;
}
)
;
add_task
(
async
function
test_onRecipe_enroll
(
)
{
const
manager
=
ExperimentFakes
.
manager
(
)
;
const
sandbox
=
sinon
.
sandbox
.
create
(
)
;
sandbox
.
spy
(
manager
"
enroll
"
)
;
sandbox
.
spy
(
manager
"
updateEnrollment
"
)
;
const
fooRecipe
=
ExperimentFakes
.
recipe
(
"
foo
"
)
;
await
manager
.
onRecipe
(
fooRecipe
)
;
Assert
.
equal
(
manager
.
enroll
.
calledWith
(
fooRecipe
)
true
"
should
call
.
enroll
(
)
the
first
time
a
recipe
is
seen
"
)
;
Assert
.
equal
(
manager
.
store
.
has
(
"
foo
"
)
true
"
should
add
recipe
to
the
store
"
)
;
}
)
;
add_task
(
async
function
test_onRecipe_update
(
)
{
const
manager
=
ExperimentFakes
.
manager
(
)
;
const
sandbox
=
sinon
.
sandbox
.
create
(
)
;
sandbox
.
spy
(
manager
"
enroll
"
)
;
sandbox
.
spy
(
manager
"
updateEnrollment
"
)
;
const
fooRecipe
=
ExperimentFakes
.
recipe
(
"
foo
"
)
;
await
manager
.
onRecipe
(
fooRecipe
)
;
await
manager
.
onRecipe
(
fooRecipe
)
;
Assert
.
equal
(
manager
.
updateEnrollment
.
calledWith
(
fooRecipe
)
true
"
should
call
.
updateEnrollment
(
)
if
the
recipe
has
already
been
enrolled
"
)
;
}
)
;
add_task
(
async
function
test_onRecipe_isEnrollmentPaused
(
)
{
const
manager
=
ExperimentFakes
.
manager
(
)
;
const
sandbox
=
sinon
.
sandbox
.
create
(
)
;
sandbox
.
spy
(
manager
"
enroll
"
)
;
sandbox
.
spy
(
manager
"
updateEnrollment
"
)
;
const
pausedRecipe
=
ExperimentFakes
.
recipe
(
"
xyz
"
{
isEnrollmentPaused
:
true
}
)
;
await
manager
.
onRecipe
(
pausedRecipe
)
;
Assert
.
equal
(
manager
.
enroll
.
calledWith
(
pausedRecipe
)
false
"
should
skip
enrollment
for
recipes
that
are
paused
"
)
;
Assert
.
equal
(
manager
.
store
.
has
(
"
xyz
"
)
false
"
should
not
add
recipe
to
the
store
"
)
;
const
fooRecipe
=
ExperimentFakes
.
recipe
(
"
foo
"
)
;
const
updatedRecipe
=
ExperimentFakes
.
recipe
(
"
foo
"
{
isEnrollmentPaused
:
true
}
)
;
await
manager
.
enroll
(
fooRecipe
)
;
await
manager
.
onRecipe
(
updatedRecipe
)
;
Assert
.
equal
(
manager
.
updateEnrollment
.
calledWith
(
updatedRecipe
)
true
"
should
still
update
existing
recipes
even
if
enrollment
is
paused
"
)
;
}
)
;
add_task
(
async
function
test_onFinalize_unenroll
(
)
{
const
manager
=
ExperimentFakes
.
manager
(
)
;
const
sandbox
=
sinon
.
sandbox
.
create
(
)
;
sandbox
.
spy
(
manager
"
unenroll
"
)
;
manager
.
store
.
addExperiment
(
ExperimentFakes
.
experiment
(
"
foo
"
)
)
;
await
manager
.
onStartup
(
)
;
await
manager
.
onRecipe
(
ExperimentFakes
.
recipe
(
"
bar
"
)
)
;
await
manager
.
onRecipe
(
ExperimentFakes
.
recipe
(
"
baz
"
)
)
;
manager
.
onFinalize
(
)
;
Assert
.
equal
(
manager
.
unenroll
.
callCount
1
"
should
only
call
unenroll
for
the
unseen
recipe
"
)
;
Assert
.
equal
(
manager
.
unenroll
.
calledWith
(
"
foo
"
"
recipe
-
not
-
seen
"
)
true
"
should
unenroll
a
experiment
whose
recipe
wasn
'
t
seen
in
the
current
session
"
)
;
Assert
.
equal
(
manager
.
slugsSeenInThisSession
.
size
0
"
should
clear
slugsSeenInThisSession
"
)
;
}
)
;
