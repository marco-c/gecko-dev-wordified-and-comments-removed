"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ExperimentStore
"
]
;
const
{
SharedDataMap
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
messaging
-
system
/
lib
/
SharedDataMap
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
IS_MAIN_PROCESS
=
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
;
const
SYNC_DATA_PREF
=
"
messaging
-
system
.
syncdatastore
.
data
"
;
let
tryJSONParse
=
data
=
>
{
try
{
return
JSON
.
parse
(
data
)
;
}
catch
(
e
)
{
}
return
{
}
;
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
syncDataStore
"
SYNC_DATA_PREF
{
}
(
data
prev
latest
)
=
>
tryJSONParse
(
latest
)
tryJSONParse
)
;
const
DEFAULT_STORE_ID
=
"
ExperimentStoreData
"
;
const
SYNC_ACCESS_FEATURES
=
[
"
newtab
"
"
aboutwelcome
"
]
;
class
ExperimentStore
extends
SharedDataMap
{
constructor
(
sharedDataKey
options
=
{
isParent
:
IS_MAIN_PROCESS
}
)
{
if
(
!
options
.
path
)
{
Object
.
defineProperty
(
options
"
path
"
{
get
:
(
)
=
>
{
try
{
const
profileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
path
;
return
PathUtils
.
join
(
profileDir
{
sharedDataKey
}
.
json
)
;
}
catch
(
e
)
{
return
null
;
}
}
}
)
;
}
super
(
sharedDataKey
|
|
DEFAULT_STORE_ID
options
)
;
}
getExperimentForFeature
(
featureId
)
{
return
this
.
getAllActive
(
)
.
find
(
experiment
=
>
experiment
.
featureIds
?
.
includes
(
featureId
)
|
|
experiment
.
branch
?
.
feature
?
.
featureId
=
=
=
featureId
)
;
}
hasExperimentForFeature
(
featureId
)
{
if
(
!
featureId
)
{
return
false
;
}
return
!
!
this
.
getExperimentForFeature
(
featureId
)
;
}
getAll
(
)
{
let
data
=
[
]
;
try
{
data
=
Object
.
values
(
this
.
_data
|
|
syncDataStore
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
data
;
}
getAllActive
(
)
{
return
this
.
getAll
(
)
.
filter
(
experiment
=
>
experiment
.
active
)
;
}
_emitExperimentUpdates
(
experiment
)
{
this
.
emit
(
update
:
{
experiment
.
slug
}
experiment
)
;
if
(
experiment
.
branch
.
feature
)
{
this
.
emit
(
update
:
{
experiment
.
branch
.
feature
.
featureId
}
experiment
)
;
}
}
_emitExperimentExposure
(
experimentData
)
{
this
.
emit
(
"
exposure
"
experimentData
)
;
}
_updateSyncStore
(
experiment
)
{
if
(
SYNC_ACCESS_FEATURES
.
includes
(
experiment
.
branch
.
feature
?
.
featureId
)
)
{
if
(
!
experiment
.
active
)
{
if
(
syncDataStore
[
experiment
.
slug
]
)
{
delete
syncDataStore
[
experiment
.
slug
]
;
}
}
else
{
syncDataStore
[
experiment
.
slug
]
=
experiment
;
}
Services
.
prefs
.
setStringPref
(
SYNC_DATA_PREF
JSON
.
stringify
(
syncDataStore
)
)
;
}
}
addExperiment
(
experiment
)
{
if
(
!
experiment
|
|
!
experiment
.
slug
)
{
throw
new
Error
(
Tried
to
add
an
experiment
but
it
didn
'
t
have
a
.
slug
property
.
)
;
}
this
.
set
(
experiment
.
slug
experiment
)
;
this
.
_emitExperimentUpdates
(
experiment
)
;
this
.
_updateSyncStore
(
experiment
)
;
}
updateExperiment
(
slug
newProperties
)
{
const
oldProperties
=
this
.
get
(
slug
)
;
if
(
!
oldProperties
)
{
throw
new
Error
(
Tried
to
update
experiment
{
slug
}
bug
it
doesn
'
t
exist
)
;
}
const
updatedExperiment
=
{
.
.
.
oldProperties
.
.
.
newProperties
}
;
this
.
set
(
slug
updatedExperiment
)
;
this
.
_emitExperimentUpdates
(
updatedExperiment
)
;
this
.
_updateSyncStore
(
updatedExperiment
)
;
}
}
