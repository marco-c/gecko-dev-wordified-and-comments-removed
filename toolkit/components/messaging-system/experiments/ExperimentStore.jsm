"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ExperimentStore
"
]
;
const
{
SharedDataMap
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
messaging
-
system
/
lib
/
SharedDataMap
.
jsm
"
)
;
const
DEFAULT_STORE_ID
=
"
ExperimentStoreData
"
;
class
ExperimentStore
extends
SharedDataMap
{
constructor
(
sharedDataKey
options
)
{
super
(
sharedDataKey
|
|
DEFAULT_STORE_ID
options
)
;
}
getExperimentForFeature
(
featureId
)
{
return
this
.
getAllActive
(
)
.
find
(
experiment
=
>
experiment
.
branch
.
feature
?
.
featureId
=
=
=
featureId
)
;
}
getFeature
(
featureId
)
{
for
(
let
{
branch
}
of
this
.
getAllActive
(
)
)
{
if
(
branch
.
feature
?
.
featureId
=
=
=
featureId
)
{
return
branch
.
feature
;
}
}
return
null
;
}
hasExperimentForFeature
(
featureId
)
{
if
(
!
featureId
)
{
return
false
;
}
for
(
const
{
branch
}
of
this
.
getAllActive
(
)
)
{
if
(
branch
.
feature
?
.
featureId
=
=
=
featureId
)
{
return
true
;
}
}
return
false
;
}
getAll
(
)
{
try
{
return
Object
.
values
(
this
.
_data
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
[
]
;
}
getAllActive
(
)
{
return
this
.
getAll
(
)
.
filter
(
experiment
=
>
experiment
.
active
)
;
}
addExperiment
(
experiment
)
{
if
(
!
experiment
|
|
!
experiment
.
slug
)
{
throw
new
Error
(
Tried
to
add
an
experiment
but
it
didn
'
t
have
a
.
slug
property
.
)
;
}
this
.
set
(
experiment
.
slug
experiment
)
;
}
updateExperiment
(
slug
newProperties
)
{
const
oldProperties
=
this
.
get
(
slug
)
;
if
(
!
oldProperties
)
{
throw
new
Error
(
Tried
to
update
experiment
{
slug
}
bug
it
doesn
'
t
exist
)
;
}
this
.
set
(
slug
{
.
.
.
oldProperties
.
.
.
newProperties
}
)
;
}
}
