"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ExperimentManager
"
"
_ExperimentManager
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ClientEnvironment
:
"
resource
:
/
/
normandy
/
lib
/
ClientEnvironment
.
jsm
"
ExperimentStore
:
"
resource
:
/
/
messaging
-
system
/
experiments
/
ExperimentStore
.
jsm
"
NormandyUtils
:
"
resource
:
/
/
normandy
/
lib
/
NormandyUtils
.
jsm
"
Sampling
:
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
Sampling
.
jsm
"
TelemetryEvents
:
"
resource
:
/
/
normandy
/
lib
/
TelemetryEvents
.
jsm
"
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
requestIdleCallback
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
ASRouterTargeting
:
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterTargeting
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
const
{
Logger
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
messaging
-
system
/
lib
/
Logger
.
jsm
"
)
;
return
new
Logger
(
"
ExperimentManager
"
)
;
}
)
;
const
EVENT_TELEMETRY_STUDY_TYPE
=
"
preference_study
"
;
const
TELEMETRY_EXPERIMENT_TYPE_PREFIX
=
"
normandy
-
"
;
const
DEFAULT_EXPERIMENT_TYPE
=
"
messaging_experiment
"
;
const
REACH_EVENT_GROUPS
=
[
"
cfr
"
]
;
const
REACH_EVENT_CATEGORY
=
"
messaging_experiments
"
;
const
REACH_EVENT_METHOD
=
"
reach
"
;
const
COLLECTION_ID
=
"
messaging
-
experiments
"
;
class
_ExperimentManager
{
constructor
(
{
id
=
"
experimentmanager
"
store
}
=
{
}
)
{
this
.
id
=
id
;
this
.
store
=
store
|
|
new
ExperimentStore
(
)
;
this
.
sessions
=
new
Map
(
)
;
this
.
filterContext
=
{
}
;
Object
.
defineProperty
(
this
.
filterContext
"
activeExperiments
"
{
get
:
async
(
)
=
>
{
await
this
.
store
.
ready
(
)
;
return
this
.
store
.
getAllActive
(
)
.
map
(
exp
=
>
exp
.
slug
)
;
}
}
)
;
}
async
onStartup
(
)
{
await
this
.
store
.
init
(
)
;
const
restoredExperiments
=
this
.
store
.
getAllActive
(
)
;
for
(
const
experiment
of
restoredExperiments
)
{
this
.
setExperimentActive
(
experiment
)
;
}
}
async
onRecipe
(
recipe
source
)
{
const
{
slug
isEnrollmentPaused
}
=
recipe
;
if
(
!
source
)
{
throw
new
Error
(
"
When
calling
onRecipe
you
must
specify
a
source
.
"
)
;
}
if
(
!
this
.
sessions
.
has
(
source
)
)
{
this
.
sessions
.
set
(
source
new
Set
(
)
)
;
}
this
.
sessions
.
get
(
source
)
.
add
(
slug
)
;
if
(
this
.
store
.
has
(
slug
)
)
{
this
.
updateEnrollment
(
recipe
)
;
}
else
if
(
isEnrollmentPaused
)
{
log
.
debug
(
Enrollment
is
paused
for
"
{
slug
}
"
)
;
}
else
{
await
this
.
enroll
(
recipe
source
)
;
}
}
onFinalize
(
sourceToCheck
)
{
if
(
!
sourceToCheck
)
{
throw
new
Error
(
"
When
calling
onFinalize
you
must
specify
a
source
.
"
)
;
}
const
activeExperiments
=
this
.
store
.
getAllActive
(
)
;
for
(
const
experiment
of
activeExperiments
)
{
const
{
slug
source
}
=
experiment
;
if
(
sourceToCheck
!
=
=
source
)
{
continue
;
}
if
(
!
this
.
sessions
.
get
(
source
)
?
.
has
(
slug
)
)
{
log
.
debug
(
Stopping
study
for
recipe
{
slug
}
)
;
try
{
this
.
unenroll
(
slug
"
recipe
-
not
-
seen
"
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
}
if
(
activeExperiments
.
length
)
{
requestIdleCallback
(
(
)
=
>
this
.
sendReachEvents
(
)
)
;
}
this
.
sessions
.
delete
(
sourceToCheck
)
;
}
async
enroll
(
{
slug
branches
experimentType
=
DEFAULT_EXPERIMENT_TYPE
}
source
)
{
if
(
this
.
store
.
has
(
slug
)
)
{
this
.
sendFailureTelemetry
(
"
enrollFailed
"
slug
"
name
-
conflict
"
)
;
throw
new
Error
(
An
experiment
with
the
slug
"
{
slug
}
"
already
exists
.
)
;
}
const
enrollmentId
=
NormandyUtils
.
generateUuid
(
)
;
const
branch
=
await
this
.
chooseBranch
(
slug
branches
)
;
if
(
branch
.
groups
&
&
this
.
store
.
hasExperimentForGroups
(
branch
.
groups
)
)
{
log
.
debug
(
Skipping
enrollment
for
"
{
slug
}
"
because
there
is
an
existing
experiment
for
one
of
its
groups
.
)
;
this
.
sendFailureTelemetry
(
"
enrollFailed
"
slug
"
group
-
conflict
"
)
;
throw
new
Error
(
An
experiment
with
a
conflicting
group
already
exists
.
)
;
}
const
experiment
=
{
slug
branch
active
:
true
enrollmentId
experimentType
source
}
;
this
.
store
.
addExperiment
(
experiment
)
;
this
.
setExperimentActive
(
experiment
)
;
this
.
sendEnrollmentTelemetry
(
experiment
)
;
log
.
debug
(
New
experiment
started
:
{
slug
}
{
branch
.
slug
}
)
;
return
experiment
;
}
updateEnrollment
(
recipe
)
{
const
experiment
=
this
.
store
.
get
(
recipe
.
slug
)
;
if
(
experiment
.
active
=
=
=
false
)
{
log
.
debug
(
Enrollment
{
recipe
.
slug
}
has
expired
aborting
.
)
;
return
;
}
const
branch
=
recipe
.
branches
.
find
(
branch
=
>
branch
.
slug
=
=
=
experiment
.
branch
.
slug
)
;
if
(
!
branch
)
{
this
.
unenroll
(
recipe
.
slug
"
branch
-
removed
"
)
;
}
}
unenroll
(
slug
reason
=
"
unknown
"
)
{
const
experiment
=
this
.
store
.
get
(
slug
)
;
if
(
!
experiment
)
{
this
.
sendFailureTelemetry
(
"
unenrollFailed
"
slug
"
does
-
not
-
exist
"
)
;
throw
new
Error
(
Could
not
find
an
experiment
with
the
slug
"
{
slug
}
"
)
;
}
if
(
!
experiment
.
active
)
{
this
.
sendFailureTelemetry
(
"
unenrollFailed
"
slug
"
already
-
unenrolled
"
)
;
throw
new
Error
(
Cannot
stop
experiment
"
{
slug
}
"
because
it
is
already
expired
)
;
}
this
.
store
.
updateExperiment
(
slug
{
active
:
false
}
)
;
TelemetryEnvironment
.
setExperimentInactive
(
slug
)
;
TelemetryEvents
.
sendEvent
(
"
unenroll
"
EVENT_TELEMETRY_STUDY_TYPE
slug
{
reason
branch
:
experiment
.
branch
.
slug
enrollmentId
:
experiment
.
enrollmentId
|
|
TelemetryEvents
.
NO_ENROLLMENT_ID_MARKER
}
)
;
log
.
debug
(
Experiment
unenrolled
:
{
slug
}
}
)
;
}
sendFailureTelemetry
(
eventName
slug
reason
)
{
TelemetryEvents
.
sendEvent
(
eventName
EVENT_TELEMETRY_STUDY_TYPE
slug
{
reason
}
)
;
}
sendEnrollmentTelemetry
(
{
slug
branch
experimentType
enrollmentId
}
)
{
TelemetryEvents
.
sendEvent
(
"
enroll
"
EVENT_TELEMETRY_STUDY_TYPE
slug
{
experimentType
branch
:
branch
.
slug
enrollmentId
:
enrollmentId
|
|
TelemetryEvents
.
NO_ENROLLMENT_ID_MARKER
}
)
;
}
setExperimentActive
(
experiment
)
{
TelemetryEnvironment
.
setExperimentActive
(
experiment
.
slug
experiment
.
branch
.
slug
{
type
:
{
TELEMETRY_EXPERIMENT_TYPE_PREFIX
}
{
experiment
.
experimentType
}
enrollmentId
:
experiment
.
enrollmentId
|
|
TelemetryEvents
.
NO_ENROLLMENT_ID_MARKER
}
)
;
}
async
chooseBranch
(
slug
branches
)
{
const
ratios
=
branches
.
map
(
(
{
ratio
=
1
}
)
=
>
ratio
)
;
const
userId
=
ClientEnvironment
.
userId
;
const
input
=
{
this
.
id
}
-
{
userId
}
-
{
slug
}
-
branch
;
const
index
=
await
Sampling
.
ratioSample
(
input
ratios
)
;
return
branches
[
index
]
;
}
async
sendReachEvents
(
remoteSettingsClient
)
{
let
recipes
;
for
(
const
group
of
REACH_EVENT_GROUPS
)
{
const
experiment
=
this
.
store
.
getExperimentForGroup
(
group
)
;
if
(
!
experiment
)
{
log
.
debug
(
"
Skipping
sending
Reach
events
for
no
active
experiment
"
)
;
continue
;
}
if
(
!
recipes
)
{
try
{
const
client
=
remoteSettingsClient
|
|
RemoteSettings
(
COLLECTION_ID
)
;
recipes
=
await
client
.
get
(
{
syncIfEmpty
:
false
}
)
;
}
catch
(
e
)
{
log
.
debug
(
"
Reach
events
not
recorded
error
getting
recipes
from
remote
settings
"
)
;
return
;
}
}
const
recipe
=
recipes
.
find
(
recipe
=
>
recipe
.
arguments
.
slug
=
=
=
experiment
.
slug
)
;
if
(
!
recipe
)
{
log
.
debug
(
"
Can
'
t
find
experiment
recipe
skipping
sending
Reach
events
"
)
;
continue
;
}
let
qualifiedBranches
=
[
]
;
for
(
const
branch
of
recipe
.
arguments
.
branches
)
{
if
(
branch
.
value
?
.
content
?
.
targeting
&
&
Boolean
(
await
ASRouterTargeting
.
isMatch
(
branch
.
value
.
content
.
targeting
this
.
filterContext
err
=
>
{
log
.
debug
(
"
Targeting
failed
because
of
an
error
"
)
;
Cu
.
reportError
(
err
)
;
}
)
)
)
{
qualifiedBranches
.
push
(
branch
.
slug
)
;
}
}
if
(
qualifiedBranches
.
length
)
{
const
underscored
=
group
.
split
(
"
-
"
)
.
join
(
"
_
"
)
;
const
extra
=
{
branches
:
qualifiedBranches
.
join
(
"
;
"
)
}
;
Services
.
telemetry
.
recordEvent
(
REACH_EVENT_CATEGORY
REACH_EVENT_METHOD
underscored
experiment
.
slug
extra
)
;
}
}
}
}
const
ExperimentManager
=
new
_ExperimentManager
(
)
;
