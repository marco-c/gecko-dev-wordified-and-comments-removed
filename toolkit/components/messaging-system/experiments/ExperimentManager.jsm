"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ExperimentManager
"
"
_ExperimentManager
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ClientEnvironment
:
"
resource
:
/
/
normandy
/
lib
/
ClientEnvironment
.
jsm
"
ExperimentStore
:
"
resource
:
/
/
messaging
-
system
/
experiments
/
ExperimentStore
.
jsm
"
LogManager
:
"
resource
:
/
/
normandy
/
lib
/
LogManager
.
jsm
"
NormandyUtils
:
"
resource
:
/
/
normandy
/
lib
/
NormandyUtils
.
jsm
"
Sampling
:
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
Sampling
.
jsm
"
TelemetryEvents
:
"
resource
:
/
/
normandy
/
lib
/
TelemetryEvents
.
jsm
"
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
}
)
;
const
EVENT_TELEMETRY_STUDY_TYPE
=
"
preference_study
"
;
const
TELEMETRY_EXPERIMENT_TYPE_PREFIX
=
"
normandy
-
"
;
const
DEFAULT_EXPERIMENT_TYPE
=
"
messaging_experiment
"
;
class
_ExperimentManager
{
constructor
(
{
id
=
"
experimentmanager
"
storeId
}
=
{
}
)
{
this
.
id
=
id
;
this
.
store
=
new
ExperimentStore
(
storeId
)
;
this
.
slugsSeenInThisSession
=
new
Set
(
)
;
this
.
log
=
LogManager
.
getLogger
(
"
ExperimentManager
"
)
;
}
async
onStartup
(
)
{
const
restoredExperiments
=
this
.
store
.
getAllActive
(
)
;
for
(
const
experiment
of
restoredExperiments
)
{
this
.
setExperimentActive
(
experiment
)
;
}
}
async
onRecipe
(
recipe
)
{
const
{
slug
isEnrollmentPaused
}
=
recipe
;
this
.
slugsSeenInThisSession
.
add
(
slug
)
;
if
(
this
.
store
.
has
(
slug
)
)
{
this
.
updateEnrollment
(
recipe
)
;
}
else
if
(
isEnrollmentPaused
)
{
this
.
log
.
debug
(
Enrollment
is
paused
for
"
{
slug
}
"
)
;
}
else
{
await
this
.
enroll
(
recipe
)
;
}
}
onFinalize
(
)
{
const
activeExperiments
=
this
.
store
.
getAllActive
(
)
;
for
(
const
experiment
of
activeExperiments
)
{
const
{
slug
}
=
experiment
;
if
(
!
this
.
slugsSeenInThisSession
.
has
(
slug
)
)
{
this
.
log
.
debug
(
Stopping
study
for
recipe
{
slug
}
)
;
try
{
this
.
unenroll
(
slug
"
recipe
-
not
-
seen
"
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
}
this
.
slugsSeenInThisSession
.
clear
(
)
;
}
async
enroll
(
{
slug
branches
experimentType
=
DEFAULT_EXPERIMENT_TYPE
}
)
{
if
(
this
.
store
.
has
(
slug
)
)
{
this
.
sendFailureTelemetry
(
"
enrollFailed
"
slug
"
name
-
conflict
"
)
;
throw
new
Error
(
An
experiment
with
the
slug
"
{
slug
}
"
already
exists
.
)
;
}
const
enrollmentId
=
NormandyUtils
.
generateUuid
(
)
;
const
branch
=
await
this
.
chooseBranch
(
slug
branches
)
;
if
(
branch
.
groups
&
&
this
.
store
.
hasExperimentForGroups
(
branch
.
groups
)
)
{
this
.
log
.
debug
(
Skipping
enrollment
for
"
{
slug
}
"
because
there
is
an
existing
experiment
for
one
of
its
groups
.
)
;
this
.
sendFailureTelemetry
(
"
enrollFailed
"
slug
"
group
-
conflict
"
)
;
throw
new
Error
(
An
experiment
with
a
conflicting
group
already
exists
.
)
;
}
const
experiment
=
{
slug
branch
active
:
true
enrollmentId
experimentType
}
;
this
.
store
.
addExperiment
(
experiment
)
;
this
.
setExperimentActive
(
experiment
)
;
this
.
sendEnrollmentTelemetry
(
experiment
)
;
this
.
log
.
debug
(
New
experiment
started
:
{
slug
}
{
branch
.
slug
}
)
;
return
experiment
;
}
updateEnrollment
(
recipe
)
{
const
experiment
=
this
.
store
.
get
(
recipe
.
slug
)
;
if
(
experiment
.
active
=
=
=
false
)
{
this
.
log
.
debug
(
Enrollment
{
recipe
.
slug
}
has
expired
aborting
.
)
;
return
;
}
const
branch
=
recipe
.
branches
.
find
(
branch
=
>
branch
.
slug
=
=
=
experiment
.
branch
)
;
if
(
!
branch
)
{
this
.
unenroll
(
recipe
.
slug
"
branch
-
removed
"
)
;
}
}
unenroll
(
slug
{
reason
=
"
unknown
"
}
=
{
}
)
{
const
experiment
=
this
.
store
.
get
(
slug
)
;
if
(
!
experiment
)
{
this
.
sendFailureTelemetry
(
"
unenrollFailed
"
slug
"
does
-
not
-
exist
"
)
;
throw
new
Error
(
Could
not
find
an
experiment
with
the
slug
"
{
slug
}
"
)
;
}
if
(
!
experiment
.
active
)
{
this
.
sendFailureTelemetry
(
"
unenrollFailed
"
slug
"
already
-
unenrolled
"
)
;
throw
new
Error
(
Cannot
stop
experiment
"
{
slug
}
"
because
it
is
already
expired
)
;
}
this
.
store
.
updateExperiment
(
slug
{
active
:
false
}
)
;
TelemetryEnvironment
.
setExperimentInactive
(
slug
)
;
TelemetryEvents
.
sendEvent
(
"
unenroll
"
EVENT_TELEMETRY_STUDY_TYPE
slug
{
reason
branch
:
experiment
.
branch
.
slug
enrollmentId
:
experiment
.
enrollmentId
|
|
TelemetryEvents
.
NO_ENROLLMENT_ID_MARKER
}
)
;
this
.
log
.
debug
(
Experiment
unenrolled
:
{
slug
}
}
)
;
}
sendFailureTelemetry
(
eventName
slug
reason
)
{
TelemetryEvents
.
sendEvent
(
eventName
EVENT_TELEMETRY_STUDY_TYPE
slug
{
reason
}
)
;
}
sendEnrollmentTelemetry
(
{
slug
branch
experimentType
enrollmentId
}
)
{
TelemetryEvents
.
sendEvent
(
"
enroll
"
EVENT_TELEMETRY_STUDY_TYPE
slug
{
experimentType
branch
:
branch
.
slug
enrollmentId
:
enrollmentId
|
|
TelemetryEvents
.
NO_ENROLLMENT_ID_MARKER
}
)
;
}
setExperimentActive
(
experiment
)
{
TelemetryEnvironment
.
setExperimentActive
(
experiment
.
slug
experiment
.
branch
.
slug
{
type
:
{
TELEMETRY_EXPERIMENT_TYPE_PREFIX
}
{
experiment
.
experimentType
}
enrollmentId
:
experiment
.
enrollmentId
|
|
TelemetryEvents
.
NO_ENROLLMENT_ID_MARKER
}
)
;
}
async
chooseBranch
(
slug
branches
)
{
const
ratios
=
branches
.
map
(
(
{
ratio
=
1
}
)
=
>
ratio
)
;
const
userId
=
ClientEnvironment
.
userId
;
const
input
=
{
this
.
id
}
-
{
userId
}
-
{
slug
}
-
branch
;
const
index
=
await
Sampling
.
ratioSample
(
input
ratios
)
;
return
branches
[
index
]
;
}
}
const
ExperimentManager
=
new
_ExperimentManager
(
)
;
