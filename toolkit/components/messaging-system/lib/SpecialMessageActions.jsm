"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
SpecialMessageActions
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
UITour
:
"
resource
:
/
/
/
modules
/
UITour
.
jsm
"
FxAccounts
:
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
MigrationUtils
:
"
resource
:
/
/
/
modules
/
MigrationUtils
.
jsm
"
}
)
;
const
SpecialMessageActions
=
{
loadAddonIconInURLBar
(
browser
)
{
if
(
!
browser
)
{
return
;
}
const
chromeDoc
=
browser
.
ownerDocument
;
let
notificationPopupBox
=
chromeDoc
.
getElementById
(
"
notification
-
popup
-
box
"
)
;
if
(
!
notificationPopupBox
)
{
return
;
}
if
(
notificationPopupBox
.
style
.
display
=
=
=
"
none
"
|
|
notificationPopupBox
.
style
.
display
=
=
=
"
"
)
{
notificationPopupBox
.
style
.
display
=
"
block
"
;
}
}
async
installAddonFromURL
(
browser
url
telemetrySource
=
"
amo
"
)
{
try
{
this
.
loadAddonIconInURLBar
(
browser
)
;
const
aUri
=
Services
.
io
.
newURI
(
url
)
;
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
telemetryInfo
=
{
source
:
telemetrySource
}
;
const
install
=
await
AddonManager
.
getInstallForURL
(
aUri
.
spec
{
telemetryInfo
}
)
;
await
AddonManager
.
installAddonFromWebpage
(
"
application
/
x
-
xpinstall
"
browser
systemPrincipal
install
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
async
handleAction
(
action
browser
)
{
const
window
=
browser
.
ownerGlobal
;
switch
(
action
.
type
)
{
case
"
SHOW_MIGRATION_WIZARD
"
:
MigrationUtils
.
showMigrationWizard
(
window
[
MigrationUtils
.
MIGRATION_ENTRYPOINT_NEWTAB
]
)
;
break
;
case
"
OPEN_PRIVATE_BROWSER_WINDOW
"
:
window
.
OpenBrowserWindow
(
{
private
:
true
}
)
;
break
;
case
"
OPEN_URL
"
:
window
.
openLinkIn
(
Services
.
urlFormatter
.
formatURL
(
action
.
data
.
args
)
action
.
data
.
where
|
|
"
current
"
{
private
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
csp
:
null
}
)
;
break
;
case
"
OPEN_ABOUT_PAGE
"
:
let
aboutPageURL
=
new
URL
(
about
:
{
action
.
data
.
args
}
)
;
if
(
action
.
data
.
entrypoint
)
{
aboutPageURL
.
search
=
action
.
data
.
entrypoint
;
}
window
.
openTrustedLinkIn
(
aboutPageURL
.
toString
(
)
action
.
data
.
where
|
|
"
tab
"
)
;
break
;
case
"
OPEN_PREFERENCES_PAGE
"
:
window
.
openPreferences
(
action
.
data
.
category
|
|
action
.
data
.
args
action
.
data
.
entrypoint
&
&
{
urlParams
:
{
entrypoint
:
action
.
data
.
entrypoint
}
}
)
;
break
;
case
"
OPEN_APPLICATIONS_MENU
"
:
UITour
.
showMenu
(
window
action
.
data
.
args
)
;
break
;
case
"
HIGHLIGHT_FEATURE
"
:
const
highlight
=
await
UITour
.
getTarget
(
window
action
.
data
.
args
)
;
if
(
highlight
)
{
await
UITour
.
showHighlight
(
window
highlight
"
none
"
{
autohide
:
true
}
)
;
}
break
;
case
"
INSTALL_ADDON_FROM_URL
"
:
await
this
.
installAddonFromURL
(
browser
action
.
data
.
url
action
.
data
.
telemetrySource
)
;
break
;
case
"
PIN_CURRENT_TAB
"
:
let
tab
=
browser
.
selectedTab
;
browser
.
pinTab
(
tab
)
;
window
.
ConfirmationHint
.
show
(
tab
"
pinTab
"
{
showDescription
:
true
}
)
;
break
;
case
"
SHOW_FIREFOX_ACCOUNTS
"
:
const
url
=
await
FxAccounts
.
config
.
promiseConnectAccountURI
(
(
action
.
data
&
&
action
.
data
.
entrypoint
)
|
|
"
snippets
"
)
;
window
.
openLinkIn
(
url
"
current
"
{
private
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
csp
:
null
}
)
;
break
;
case
"
OPEN_PROTECTION_PANEL
"
:
let
{
gProtectionsHandler
}
=
window
;
gProtectionsHandler
.
showProtectionsPopup
(
{
}
)
;
break
;
case
"
OPEN_PROTECTION_REPORT
"
:
window
.
gProtectionsHandler
.
openProtections
(
)
;
break
;
case
"
OPEN_AWESOME_BAR
"
:
window
.
gURLBar
.
search
(
"
"
)
;
break
;
default
:
throw
new
Error
(
Special
message
action
with
type
{
action
.
type
}
is
unsupported
.
)
;
}
}
}
;
