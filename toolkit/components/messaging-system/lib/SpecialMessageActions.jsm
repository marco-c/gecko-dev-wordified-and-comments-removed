"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
SpecialMessageActions
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
DOH_DOORHANGER_DECISION_PREF
=
"
doh
-
rollout
.
doorhanger
-
decision
"
;
const
NETWORK_TRR_MODE_PREF
=
"
network
.
trr
.
mode
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
UITour
:
"
resource
:
/
/
/
modules
/
UITour
.
jsm
"
FxAccounts
:
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
MigrationUtils
:
"
resource
:
/
/
/
modules
/
MigrationUtils
.
jsm
"
Spotlight
:
"
resource
:
/
/
activity
-
stream
/
lib
/
Spotlight
.
jsm
"
}
)
;
const
SpecialMessageActions
=
{
blockMessageById
(
)
{
throw
new
Error
(
"
ASRouter
not
intialized
yet
"
)
;
}
loadAddonIconInURLBar
(
browser
)
{
if
(
!
browser
)
{
return
;
}
const
chromeDoc
=
browser
.
ownerDocument
;
let
notificationPopupBox
=
chromeDoc
.
getElementById
(
"
notification
-
popup
-
box
"
)
;
if
(
!
notificationPopupBox
)
{
return
;
}
if
(
notificationPopupBox
.
style
.
display
=
=
=
"
none
"
|
|
notificationPopupBox
.
style
.
display
=
=
=
"
"
)
{
notificationPopupBox
.
style
.
display
=
"
block
"
;
}
}
async
installAddonFromURL
(
browser
url
telemetrySource
=
"
amo
"
)
{
try
{
this
.
loadAddonIconInURLBar
(
browser
)
;
const
aUri
=
Services
.
io
.
newURI
(
url
)
;
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
telemetryInfo
=
{
source
:
telemetrySource
}
;
const
install
=
await
AddonManager
.
getInstallForURL
(
aUri
.
spec
{
telemetryInfo
}
)
;
await
AddonManager
.
installAddonFromWebpage
(
"
application
/
x
-
xpinstall
"
browser
systemPrincipal
install
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
pinFirefoxToTaskbar
(
window
)
{
window
.
getShellService
(
)
.
pinToTaskbar
(
)
;
}
setDefaultBrowser
(
window
)
{
window
.
getShellService
(
)
.
setAsDefault
(
)
;
}
configureHomepage
(
{
homePage
=
null
newtab
=
null
layout
=
null
}
)
{
if
(
homePage
=
=
=
"
default
"
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
startup
.
homepage
"
)
;
}
if
(
newtab
=
=
=
"
default
"
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
newtabpage
.
enabled
"
)
;
}
if
(
layout
)
{
let
newtabConfigurations
=
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
showSearch
"
layout
.
search
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
topsites
"
layout
.
topsites
[
"
browser
.
newtabpage
.
activity
-
stream
.
topSitesRows
"
]
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
section
.
highlights
"
layout
.
highlights
[
"
browser
.
newtabpage
.
activity
-
stream
.
section
.
highlights
.
rows
"
"
browser
.
newtabpage
.
activity
-
stream
.
section
.
highlights
.
includeVisited
"
"
browser
.
newtabpage
.
activity
-
stream
.
section
.
highlights
.
includePocket
"
"
browser
.
newtabpage
.
activity
-
stream
.
section
.
highlights
.
includeDownloads
"
"
browser
.
newtabpage
.
activity
-
stream
.
section
.
highlights
.
includeBookmarks
"
]
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
snippets
"
layout
.
snippets
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topstories
"
layout
.
topstories
]
]
.
filter
(
(
[
sectionConfigs
]
)
=
>
!
sectionConfigs
|
|
sectionConfigs
.
every
(
prefName
=
>
!
Services
.
prefs
.
prefHasUserValue
(
prefName
)
)
)
;
for
(
let
[
prefName
prefValue
]
of
newtabConfigurations
)
{
Services
.
prefs
.
setBoolPref
(
prefName
prefValue
)
;
}
}
}
async
handleAction
(
action
browser
)
{
const
window
=
browser
.
ownerGlobal
;
switch
(
action
.
type
)
{
case
"
SHOW_MIGRATION_WIZARD
"
:
MigrationUtils
.
showMigrationWizard
(
window
[
MigrationUtils
.
MIGRATION_ENTRYPOINT_NEWTAB
action
.
data
?
.
source
]
)
;
break
;
case
"
OPEN_PRIVATE_BROWSER_WINDOW
"
:
window
.
OpenBrowserWindow
(
{
private
:
true
}
)
;
break
;
case
"
OPEN_URL
"
:
window
.
openLinkIn
(
Services
.
urlFormatter
.
formatURL
(
action
.
data
.
args
)
action
.
data
.
where
|
|
"
current
"
{
private
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
csp
:
null
}
)
;
break
;
case
"
OPEN_ABOUT_PAGE
"
:
let
aboutPageURL
=
new
URL
(
about
:
{
action
.
data
.
args
}
)
;
if
(
action
.
data
.
entrypoint
)
{
aboutPageURL
.
search
=
action
.
data
.
entrypoint
;
}
window
.
openTrustedLinkIn
(
aboutPageURL
.
toString
(
)
action
.
data
.
where
|
|
"
tab
"
)
;
break
;
case
"
OPEN_PREFERENCES_PAGE
"
:
window
.
openPreferences
(
action
.
data
.
category
|
|
action
.
data
.
args
action
.
data
.
entrypoint
&
&
{
urlParams
:
{
entrypoint
:
action
.
data
.
entrypoint
}
}
)
;
break
;
case
"
OPEN_APPLICATIONS_MENU
"
:
UITour
.
showMenu
(
window
action
.
data
.
args
)
;
break
;
case
"
HIGHLIGHT_FEATURE
"
:
const
highlight
=
await
UITour
.
getTarget
(
window
action
.
data
.
args
)
;
if
(
highlight
)
{
await
UITour
.
showHighlight
(
window
highlight
"
none
"
{
autohide
:
true
}
)
;
}
break
;
case
"
INSTALL_ADDON_FROM_URL
"
:
await
this
.
installAddonFromURL
(
browser
action
.
data
.
url
action
.
data
.
telemetrySource
)
;
break
;
case
"
PIN_FIREFOX_TO_TASKBAR
"
:
this
.
pinFirefoxToTaskbar
(
window
)
;
break
;
case
"
PIN_AND_DEFAULT
"
:
this
.
pinFirefoxToTaskbar
(
window
)
;
this
.
setDefaultBrowser
(
window
)
;
break
;
case
"
SET_DEFAULT_BROWSER
"
:
this
.
setDefaultBrowser
(
window
)
;
break
;
case
"
PIN_CURRENT_TAB
"
:
let
tab
=
window
.
gBrowser
.
selectedTab
;
window
.
gBrowser
.
pinTab
(
tab
)
;
window
.
ConfirmationHint
.
show
(
tab
"
pinTab
"
{
showDescription
:
true
}
)
;
break
;
case
"
SHOW_FIREFOX_ACCOUNTS
"
:
const
data
=
action
.
data
;
const
url
=
await
FxAccounts
.
config
.
promiseConnectAccountURI
(
(
data
&
&
data
.
entrypoint
)
|
|
"
snippets
"
(
data
&
&
data
.
extraParams
)
|
|
{
}
)
;
window
.
openLinkIn
(
url
"
current
"
{
private
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
csp
:
null
}
)
;
break
;
case
"
OPEN_PROTECTION_PANEL
"
:
let
{
gProtectionsHandler
}
=
window
;
gProtectionsHandler
.
showProtectionsPopup
(
{
}
)
;
break
;
case
"
OPEN_PROTECTION_REPORT
"
:
window
.
gProtectionsHandler
.
openProtections
(
)
;
break
;
case
"
OPEN_AWESOME_BAR
"
:
window
.
gURLBar
.
search
(
"
"
)
;
break
;
case
"
DISABLE_STP_DOORHANGERS
"
:
await
this
.
blockMessageById
(
[
"
SOCIAL_TRACKING_PROTECTION
"
"
FINGERPRINTERS_PROTECTION
"
"
CRYPTOMINERS_PROTECTION
"
]
)
;
break
;
case
"
DISABLE_DOH
"
:
Services
.
prefs
.
setStringPref
(
DOH_DOORHANGER_DECISION_PREF
"
UIDisabled
"
)
;
Services
.
prefs
.
setIntPref
(
NETWORK_TRR_MODE_PREF
5
)
;
break
;
case
"
ACCEPT_DOH
"
:
Services
.
prefs
.
setStringPref
(
DOH_DOORHANGER_DECISION_PREF
"
UIOk
"
)
;
break
;
case
"
CANCEL
"
:
break
;
case
"
CONFIGURE_HOMEPAGE
"
:
this
.
configureHomepage
(
action
.
data
)
;
const
topWindow
=
browser
.
ownerGlobal
.
window
.
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
topWindow
)
{
topWindow
.
BrowserHome
(
)
;
}
break
;
case
"
ENABLE_TOTAL_COOKIE_PROTECTION
"
:
Services
.
prefs
.
setBoolPref
(
"
privacy
.
restrict3rdpartystorage
.
rollout
.
enabledByDefault
"
true
)
;
break
;
case
"
ENABLE_TOTAL_COOKIE_PROTECTION_SECTION_AND_OPT_OUT
"
:
Services
.
prefs
.
setBoolPref
(
"
privacy
.
restrict3rdpartystorage
.
rollout
.
enabledByDefault
"
false
)
;
break
;
case
"
SHOW_SPOTLIGHT
"
:
Spotlight
.
showSpotlightDialog
(
browser
action
.
data
)
;
break
;
default
:
throw
new
Error
(
Special
message
action
with
type
{
action
.
type
}
is
unsupported
.
)
;
}
}
}
;
