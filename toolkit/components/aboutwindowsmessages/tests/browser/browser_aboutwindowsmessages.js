async
function
resizeWindow
(
windowToResize
width
height
)
{
let
resizePromise
=
BrowserTestUtils
.
waitForEvent
(
windowToResize
"
resize
"
false
)
;
windowToResize
.
resizeTo
(
width
height
)
;
await
resizePromise
;
}
add_task
(
async
(
)
=
>
{
const
TEST_LINK
=
"
https
:
/
/
example
.
com
/
"
;
let
originalBrowserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
originalBrowser
=
originalBrowserWindow
.
gBrowser
;
await
resizeWindow
(
originalBrowserWindow
500
400
)
;
await
resizeWindow
(
originalBrowserWindow
600
500
)
;
await
resizeWindow
(
originalBrowserWindow
700
600
)
;
let
newWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
url
:
TEST_LINK
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
originalBrowser
url
:
"
about
:
windows
-
messages
"
}
async
browser
=
>
{
let
messagesList
=
content
.
document
.
getElementById
(
"
windows
-
div
"
)
;
Assert
.
greaterOrEqual
(
messagesList
.
childNodes
.
length
2
"
should
have
enough
window
entries
"
)
;
let
firstList
=
true
;
for
(
let
sublist
of
messagesList
.
childNodes
)
{
const
messages
=
Array
.
from
(
sublist
.
querySelectorAll
(
"
li
.
message
"
)
)
;
const
numberOfMessages
=
messages
.
length
;
Assert
.
greaterOrEqual
(
numberOfMessages
3
"
should
have
enough
messages
for
the
current
window
"
)
;
if
(
firstList
)
{
Assert
.
greaterOrEqual
(
messages
.
filter
(
messageLi
=
>
messageLi
.
innerHTML
.
includes
(
"
WM_NCCALCSIZE
"
)
)
.
length
5
"
active
window
should
have
enough
WM_NCCALCSIZE
events
"
)
;
firstList
=
false
;
}
let
buttons
=
sublist
.
querySelectorAll
(
"
button
"
)
;
Assert
.
equal
(
buttons
.
length
1
"
should
have
only
one
button
"
)
;
let
clipboardButton
=
buttons
[
0
]
;
clipboardButton
.
click
(
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
clipboardButton
{
attributes
:
true
}
(
)
=
>
!
clipboardButton
.
disabled
)
;
const
clipboardText
=
await
navigator
.
clipboard
.
readText
(
)
;
const
numberOfLines
=
Array
.
from
(
clipboardText
.
matchAll
(
"
\
n
"
)
)
.
length
;
Assert
.
equal
(
numberOfLines
numberOfMessages
"
should
copy
the
right
number
of
lines
to
the
clipboard
"
)
;
}
}
)
;
}
)
;
