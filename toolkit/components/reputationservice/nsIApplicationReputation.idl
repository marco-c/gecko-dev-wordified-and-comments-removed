#
include
"
nsISupports
.
idl
"
interface
nsIApplicationReputationCallback
;
interface
nsIApplicationReputationQuery
;
interface
nsIArray
;
interface
nsIURI
;
interface
nsIReferrerInfo
;
[
scriptable
uuid
(
c9f03479
-
fd68
-
4393
-
acb2
-
c88d4f563174
)
]
interface
nsIApplicationReputationService
:
nsISupports
{
const
unsigned
long
VERDICT_SAFE
=
0
;
const
unsigned
long
VERDICT_DANGEROUS
=
1
;
const
unsigned
long
VERDICT_UNCOMMON
=
2
;
const
unsigned
long
VERDICT_POTENTIALLY_UNWANTED
=
3
;
const
unsigned
long
VERDICT_DANGEROUS_HOST
=
4
;
void
queryReputation
(
in
nsIApplicationReputationQuery
aQuery
in
nsIApplicationReputationCallback
aCallback
)
;
boolean
isBinary
(
in
AUTF8String
aFilename
)
;
boolean
isExecutable
(
in
AUTF8String
aFilename
)
;
}
;
[
scriptable
uuid
(
812d7509
-
a9a3
-
446e
-
a66f
-
3ed8cc91ebd0
)
]
interface
nsIApplicationReputationQuery
:
nsISupports
{
readonly
attribute
nsIURI
sourceURI
;
readonly
attribute
nsIReferrerInfo
referrerInfo
;
readonly
attribute
AUTF8String
suggestedFileName
;
readonly
attribute
unsigned
long
fileSize
;
readonly
attribute
ACString
sha256Hash
;
readonly
attribute
Array
<
Array
<
Array
<
uint8_t
>
>
>
signatureInfo
;
readonly
attribute
nsIArray
redirects
;
}
;
[
scriptable
function
uuid
(
9a228470
-
cfe5
-
11e2
-
8b8b
-
0800200c9a66
)
]
interface
nsIApplicationReputationCallback
:
nsISupports
{
void
onComplete
(
in
boolean
aShouldBlock
in
nsresult
aStatus
in
unsigned
long
aVerdict
)
;
}
;
