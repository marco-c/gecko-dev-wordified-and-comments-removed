#
include
"
ApplicationReputationTelemetryUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
using
ServerLabel
=
mozilla
:
:
Telemetry
:
:
LABELS_APPLICATION_REPUTATION_SERVER_2
;
using
ServerVerdictLabel
=
mozilla
:
:
Telemetry
:
:
LABELS_APPLICATION_REPUTATION_SERVER_VERDICT_2
;
struct
NSErrorTelemetryResult
{
nsresult
mValue
;
ServerLabel
mLabel
;
}
;
static
const
NSErrorTelemetryResult
sResult
[
]
=
{
{
NS_ERROR_ALREADY_CONNECTED
ServerLabel
:
:
ErrAlreadyConnected
}
{
NS_ERROR_NOT_CONNECTED
ServerLabel
:
:
ErrNotConnected
}
{
NS_ERROR_CONNECTION_REFUSED
ServerLabel
:
:
ErrConnectionRefused
}
{
NS_ERROR_NET_TIMEOUT
ServerLabel
:
:
ErrNetTimeout
}
{
NS_ERROR_OFFLINE
ServerLabel
:
:
ErrOffline
}
{
NS_ERROR_PORT_ACCESS_NOT_ALLOWED
ServerLabel
:
:
ErrPortAccess
}
{
NS_ERROR_NET_RESET
ServerLabel
:
:
ErrNetReset
}
{
NS_ERROR_NET_INTERRUPT
ServerLabel
:
:
ErrNetInterrupt
}
{
NS_ERROR_PROXY_CONNECTION_REFUSED
ServerLabel
:
:
ErrProxyConnection
}
{
NS_ERROR_NET_PARTIAL_TRANSFER
ServerLabel
:
:
ErrNetPartial
}
{
NS_ERROR_NET_INADEQUATE_SECURITY
ServerLabel
:
:
ErrNetInadequate
}
{
NS_ERROR_UNKNOWN_HOST
ServerLabel
:
:
ErrUnknownHost
}
{
NS_ERROR_DNS_LOOKUP_QUEUE_FULL
ServerLabel
:
:
ErrDNSLookupQueue
}
{
NS_ERROR_UNKNOWN_PROXY_HOST
ServerLabel
:
:
ErrUnknownProxyHost
}
}
;
mozilla
:
:
Telemetry
:
:
LABELS_APPLICATION_REPUTATION_SERVER_2
NSErrorToLabel
(
nsresult
aRv
)
{
MOZ_ASSERT
(
aRv
!
=
NS_OK
)
;
for
(
const
auto
&
p
:
sResult
)
{
if
(
p
.
mValue
=
=
aRv
)
{
return
p
.
mLabel
;
}
}
return
ServerLabel
:
:
ErrOthers
;
}
mozilla
:
:
Telemetry
:
:
LABELS_APPLICATION_REPUTATION_SERVER_2
HTTPStatusToLabel
(
uint32_t
aStatus
)
{
MOZ_ASSERT
(
aStatus
!
=
200
)
;
switch
(
aStatus
)
{
case
100
:
case
101
:
return
ServerLabel
:
:
HTTP1xx
;
case
201
:
case
202
:
case
203
:
case
205
:
case
206
:
return
ServerLabel
:
:
HTTP2xx
;
case
204
:
return
ServerLabel
:
:
HTTP204
;
case
300
:
case
301
:
case
302
:
case
303
:
case
304
:
case
305
:
case
307
:
case
308
:
return
ServerLabel
:
:
HTTP3xx
;
case
400
:
return
ServerLabel
:
:
HTTP400
;
case
401
:
case
402
:
case
405
:
case
406
:
case
407
:
case
409
:
case
410
:
case
411
:
case
412
:
case
414
:
case
415
:
case
416
:
case
417
:
case
421
:
case
426
:
case
428
:
case
429
:
case
431
:
case
451
:
return
ServerLabel
:
:
HTTP4xx
;
case
403
:
return
ServerLabel
:
:
HTTP403
;
case
404
:
return
ServerLabel
:
:
HTTP404
;
case
408
:
return
ServerLabel
:
:
HTTP408
;
case
413
:
return
ServerLabel
:
:
HTTP413
;
case
500
:
case
501
:
case
510
:
return
ServerLabel
:
:
HTTP5xx
;
case
502
:
case
504
:
case
511
:
return
ServerLabel
:
:
HTTP502_504_511
;
case
503
:
return
ServerLabel
:
:
HTTP503
;
case
505
:
return
ServerLabel
:
:
HTTP505
;
default
:
return
ServerLabel
:
:
HTTPOthers
;
}
}
mozilla
:
:
Telemetry
:
:
LABELS_APPLICATION_REPUTATION_SERVER_VERDICT_2
VerdictToLabel
(
uint32_t
aVerdict
)
{
switch
(
aVerdict
)
{
case
safe_browsing
:
:
ClientDownloadResponse
:
:
DANGEROUS
:
return
ServerVerdictLabel
:
:
Dangerous
;
case
safe_browsing
:
:
ClientDownloadResponse
:
:
DANGEROUS_HOST
:
return
ServerVerdictLabel
:
:
DangerousHost
;
case
safe_browsing
:
:
ClientDownloadResponse
:
:
POTENTIALLY_UNWANTED
:
return
ServerVerdictLabel
:
:
PotentiallyUnwanted
;
case
safe_browsing
:
:
ClientDownloadResponse
:
:
UNCOMMON
:
return
ServerVerdictLabel
:
:
Uncommon
;
case
safe_browsing
:
:
ClientDownloadResponse
:
:
UNKNOWN
:
return
ServerVerdictLabel
:
:
Unknown
;
default
:
return
ServerVerdictLabel
:
:
Safe
;
}
}
