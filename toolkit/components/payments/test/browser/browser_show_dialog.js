"
use
strict
"
;
const
methodData
=
[
{
supportedMethods
:
[
"
basic
-
card
"
]
}
]
;
const
details
=
{
total
:
{
label
:
"
Total
due
"
amount
:
{
currency
:
"
USD
"
value
:
"
60
.
00
"
}
}
}
;
add_task
(
async
function
test_show_abort_dialog
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
BLANK_PAGE_URL
}
async
browser
=
>
{
await
ContentTask
.
spawn
(
browser
{
methodData
details
}
ContentTasks
.
createAndShowRequest
)
;
let
win
=
await
getPaymentWidget
(
)
;
let
requestId
=
paymentUISrv
.
requestIdForWindow
(
win
)
;
ok
(
requestId
"
requestId
should
be
defined
"
)
;
is
(
win
.
closed
false
"
dialog
should
not
be
closed
"
)
;
ContentTask
.
spawn
(
browser
null
async
(
)
=
>
content
.
rq
.
abort
(
)
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
win
.
closed
"
dialog
should
be
closed
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_show_manualAbort_dialog
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
BLANK_PAGE_URL
}
async
browser
=
>
{
let
dialogReadyPromise
=
waitForWidgetReady
(
)
;
await
ContentTask
.
spawn
(
browser
{
methodData
details
}
ContentTasks
.
createAndShowRequest
)
;
let
[
win
]
=
await
Promise
.
all
(
[
getPaymentWidget
(
)
dialogReadyPromise
]
)
;
ok
(
win
"
Got
payment
widget
"
)
;
let
requestId
=
paymentUISrv
.
requestIdForWindow
(
win
)
;
ok
(
requestId
"
requestId
should
be
defined
"
)
;
is
(
win
.
closed
false
"
dialog
should
not
be
closed
"
)
;
let
frame
=
await
getPaymentFrame
(
win
)
;
ok
(
frame
"
Got
payment
frame
"
)
;
await
dialogReadyPromise
;
info
(
"
dialog
ready
"
)
;
spawnPaymentDialogTask
(
frame
ContentTasks
.
manuallyClickCancel
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
win
.
closed
"
dialog
should
be
closed
"
)
;
}
)
;
}
)
;
