"
use
strict
"
;
let
requestStore
=
new
PaymentsStore
(
{
orderDetailsShowing
:
false
request
:
{
tabId
:
null
topLevelPrincipal
:
{
URI
:
{
displayHost
:
null
}
}
requestId
:
null
paymentMethods
:
[
]
paymentDetails
:
{
id
:
null
totalItem
:
{
label
:
null
amount
:
{
currency
:
null
value
:
0
}
}
displayItems
:
[
]
shippingOptions
:
[
]
modifiers
:
null
error
:
"
"
}
paymentOptions
:
{
requestPayerName
:
false
requestPayerEmail
:
false
requestPayerPhone
:
false
requestShipping
:
false
shippingType
:
"
shipping
"
}
}
selectedPaymentCard
:
null
selectedPaymentCardSecurityCode
:
null
selectedShippingAddress
:
null
selectedShippingOption
:
null
savedAddresses
:
{
}
savedBasicCards
:
{
}
}
)
;
function
PaymentStateSubscriberMixin
(
superClass
)
{
return
class
PaymentStateSubscriber
extends
superClass
{
constructor
(
)
{
super
(
)
;
this
.
requestStore
=
requestStore
;
}
connectedCallback
(
)
{
this
.
requestStore
.
subscribe
(
this
)
;
this
.
render
(
this
.
requestStore
.
getState
(
)
)
;
if
(
super
.
connectedCallback
)
{
super
.
connectedCallback
(
)
;
}
}
disconnectedCallback
(
)
{
this
.
requestStore
.
unsubscribe
(
this
)
;
if
(
super
.
disconnectedCallback
)
{
super
.
disconnectedCallback
(
)
;
}
}
stateChangeCallback
(
state
)
{
this
.
render
(
state
)
;
}
}
;
}
