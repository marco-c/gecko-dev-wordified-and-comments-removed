"
use
strict
"
;
var
paymentRequest
=
{
domReadyPromise
:
null
init
(
)
{
window
.
addEventListener
(
"
paymentChromeToContent
"
this
)
;
window
.
addEventListener
(
"
keydown
"
this
)
;
this
.
domReadyPromise
=
new
Promise
(
function
dcl
(
resolve
)
{
window
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
}
)
;
}
)
.
then
(
this
.
handleEvent
.
bind
(
this
)
)
;
this
.
sendMessageToChrome
(
"
initializeRequest
"
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
onPaymentRequestLoad
(
)
;
break
;
}
case
"
keydown
"
:
{
if
(
event
.
code
!
=
"
KeyD
"
|
|
!
event
.
altKey
|
|
!
event
.
ctrlKey
)
{
break
;
}
let
debuggingConsole
=
document
.
getElementById
(
"
debugging
-
console
"
)
;
debuggingConsole
.
hidden
=
!
debuggingConsole
.
hidden
;
break
;
}
case
"
unload
"
:
{
this
.
onPaymentRequestUnload
(
)
;
break
;
}
case
"
paymentChromeToContent
"
:
{
this
.
onChromeToContent
(
event
)
;
break
;
}
default
:
{
throw
new
Error
(
"
Unexpected
event
type
"
)
;
}
}
}
sendMessageToChrome
(
messageType
detail
=
{
}
)
{
log
.
debug
(
"
sendMessageToChrome
:
"
messageType
detail
)
;
let
event
=
new
CustomEvent
(
"
paymentContentToChrome
"
{
bubbles
:
true
detail
:
Object
.
assign
(
{
messageType
}
detail
)
}
)
;
document
.
dispatchEvent
(
event
)
;
}
onChromeToContent
(
{
detail
}
)
{
let
{
messageType
}
=
detail
;
log
.
debug
(
"
onChromeToContent
:
"
messageType
)
;
switch
(
messageType
)
{
case
"
responseSent
"
:
{
document
.
querySelector
(
"
payment
-
dialog
"
)
.
requestStore
.
setState
(
{
changesPrevented
:
true
completionState
:
"
processing
"
}
)
;
break
;
}
case
"
showPaymentRequest
"
:
{
this
.
onShowPaymentRequest
(
detail
)
;
break
;
}
case
"
updateState
"
:
{
document
.
querySelector
(
"
payment
-
dialog
"
)
.
setStateFromParent
(
detail
)
;
break
;
}
}
}
onPaymentRequestLoad
(
requestId
)
{
log
.
debug
(
"
onPaymentRequestLoad
:
"
requestId
)
;
window
.
addEventListener
(
"
unload
"
this
{
once
:
true
}
)
;
this
.
sendMessageToChrome
(
"
paymentDialogReady
"
)
;
if
(
new
URLSearchParams
(
location
.
search
)
.
get
(
"
debug
"
)
)
{
document
.
getElementById
(
"
debugging
-
console
"
)
.
hidden
=
false
;
}
}
async
onShowPaymentRequest
(
detail
)
{
log
.
debug
(
"
onShowPaymentRequest
:
"
detail
)
;
await
this
.
domReadyPromise
;
log
.
debug
(
"
onShowPaymentRequest
:
domReadyPromise
resolved
"
)
;
document
.
querySelector
(
"
payment
-
dialog
"
)
.
setStateFromParent
(
{
request
:
detail
.
request
savedAddresses
:
detail
.
savedAddresses
savedBasicCards
:
detail
.
savedBasicCards
}
)
;
}
cancel
(
)
{
this
.
sendMessageToChrome
(
"
paymentCancel
"
)
;
}
pay
(
data
)
{
this
.
sendMessageToChrome
(
"
pay
"
data
)
;
}
changeShippingAddress
(
data
)
{
this
.
sendMessageToChrome
(
"
changeShippingAddress
"
data
)
;
}
changeShippingOption
(
data
)
{
this
.
sendMessageToChrome
(
"
changeShippingOption
"
data
)
;
}
updateAutofillRecord
(
collectionName
record
guid
{
errorStateChange
preserveOldProperties
selectedStateKey
successStateChange
}
)
{
this
.
sendMessageToChrome
(
"
updateAutofillRecord
"
{
collectionName
guid
record
errorStateChange
preserveOldProperties
selectedStateKey
successStateChange
}
)
;
}
onPaymentRequestUnload
(
)
{
window
.
removeEventListener
(
"
paymentChromeToContent
"
this
)
;
}
}
;
paymentRequest
.
init
(
)
;
