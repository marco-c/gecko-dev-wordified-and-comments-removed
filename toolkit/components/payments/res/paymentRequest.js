"
use
strict
"
;
let
PaymentRequest
=
{
request
:
null
domReadyPromise
:
null
init
(
)
{
window
.
addEventListener
(
"
paymentChromeToContent
"
this
)
;
window
.
addEventListener
(
"
keypress
"
this
)
;
this
.
domReadyPromise
=
new
Promise
(
function
dcl
(
resolve
)
{
window
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
}
)
;
}
)
.
then
(
this
.
handleEvent
.
bind
(
this
)
)
;
this
.
sendMessageToChrome
(
"
initializeRequest
"
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
onPaymentRequestLoad
(
)
;
break
;
}
case
"
click
"
:
{
switch
(
event
.
target
.
id
)
{
case
"
cancel
"
:
{
this
.
onCancel
(
)
;
break
;
}
}
break
;
}
case
"
keypress
"
:
{
if
(
event
.
code
!
=
"
KeyD
"
|
|
!
event
.
altKey
|
|
!
event
.
ctrlKey
)
{
break
;
}
let
debuggingConsole
=
document
.
getElementById
(
"
debugging
-
console
"
)
;
debuggingConsole
.
hidden
=
!
debuggingConsole
.
hidden
;
break
;
}
case
"
unload
"
:
{
this
.
onPaymentRequestUnload
(
)
;
break
;
}
case
"
paymentChromeToContent
"
:
{
this
.
onChromeToContent
(
event
)
;
break
;
}
default
:
{
throw
new
Error
(
"
Unexpected
event
type
"
)
;
}
}
}
sendMessageToChrome
(
messageType
detail
=
{
}
)
{
let
event
=
new
CustomEvent
(
"
paymentContentToChrome
"
{
bubbles
:
true
detail
:
Object
.
assign
(
{
messageType
}
detail
)
}
)
;
document
.
dispatchEvent
(
event
)
;
}
onChromeToContent
(
{
detail
}
)
{
let
{
messageType
}
=
detail
;
switch
(
messageType
)
{
case
"
showPaymentRequest
"
:
{
this
.
request
=
detail
.
request
;
this
.
onShowPaymentRequest
(
)
;
break
;
}
}
}
onPaymentRequestLoad
(
requestId
)
{
let
cancelBtn
=
document
.
getElementById
(
"
cancel
"
)
;
cancelBtn
.
addEventListener
(
"
click
"
this
{
once
:
true
}
)
;
window
.
addEventListener
(
"
unload
"
this
{
once
:
true
}
)
;
this
.
sendMessageToChrome
(
"
paymentDialogReady
"
)
;
}
async
onShowPaymentRequest
(
)
{
await
this
.
domReadyPromise
;
let
hostNameEl
=
document
.
getElementById
(
"
host
-
name
"
)
;
hostNameEl
.
textContent
=
this
.
request
.
topLevelPrincipal
.
URI
.
displayHost
;
let
totalItem
=
this
.
request
.
paymentDetails
.
totalItem
;
let
totalEl
=
document
.
getElementById
(
"
total
"
)
;
let
currencyEl
=
totalEl
.
querySelector
(
"
currency
-
amount
"
)
;
currencyEl
.
value
=
totalItem
.
amount
.
value
;
currencyEl
.
currency
=
totalItem
.
amount
.
currency
;
totalEl
.
querySelector
(
"
.
label
"
)
.
textContent
=
totalItem
.
label
;
}
onCancel
(
)
{
this
.
sendMessageToChrome
(
"
paymentCancel
"
)
;
}
onPaymentRequestUnload
(
)
{
window
.
removeEventListener
(
"
paymentChromeToContent
"
this
)
;
}
}
;
PaymentRequest
.
init
(
)
;
