export
default
class
PaymentsStore
{
constructor
(
defaultState
=
{
}
)
{
this
.
_state
=
defaultState
;
this
.
_nextNotifification
=
0
;
this
.
_subscribers
=
new
Set
(
)
;
}
getState
(
)
{
return
Object
.
freeze
(
Object
.
assign
(
{
}
this
.
_state
)
)
;
}
async
setState
(
obj
)
{
Object
.
assign
(
this
.
_state
obj
)
;
let
thisChangeNum
=
+
+
this
.
_nextNotifification
;
await
Promise
.
resolve
(
)
;
if
(
thisChangeNum
!
=
=
this
.
_nextNotifification
)
{
return
;
}
for
(
let
subscriber
of
this
.
_subscribers
)
{
try
{
subscriber
.
stateChangeCallback
(
this
.
getState
(
)
)
;
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
}
}
}
subscribe
(
component
)
{
if
(
this
.
_subscribers
.
has
(
component
)
)
{
return
;
}
this
.
_subscribers
.
add
(
component
)
;
}
unsubscribe
(
component
)
{
this
.
_subscribers
.
delete
(
component
)
;
}
}
