"
use
strict
"
;
class
PaymentMethodPicker
extends
PaymentStateSubscriberMixin
(
HTMLElement
)
{
constructor
(
)
{
super
(
)
;
this
.
dropdown
=
document
.
createElement
(
"
rich
-
select
"
)
;
this
.
dropdown
.
addEventListener
(
"
change
"
this
)
;
this
.
spacerText
=
document
.
createTextNode
(
"
"
)
;
this
.
securityCodeInput
=
document
.
createElement
(
"
input
"
)
;
this
.
securityCodeInput
.
autocomplete
=
"
off
"
;
this
.
securityCodeInput
.
size
=
3
;
this
.
securityCodeInput
.
addEventListener
(
"
change
"
this
)
;
}
connectedCallback
(
)
{
this
.
appendChild
(
this
.
dropdown
)
;
this
.
appendChild
(
this
.
spacerText
)
;
this
.
appendChild
(
this
.
securityCodeInput
)
;
super
.
connectedCallback
(
)
;
}
render
(
state
)
{
let
{
savedBasicCards
}
=
state
;
let
desiredOptions
=
[
]
;
for
(
let
[
guid
basicCard
]
of
Object
.
entries
(
savedBasicCards
)
)
{
let
optionEl
=
this
.
dropdown
.
getOptionByValue
(
guid
)
;
if
(
!
optionEl
)
{
optionEl
=
document
.
createElement
(
"
basic
-
card
-
option
"
)
;
optionEl
.
value
=
guid
;
}
for
(
let
[
key
val
]
of
Object
.
entries
(
basicCard
)
)
{
optionEl
.
setAttribute
(
key
val
)
;
}
desiredOptions
.
push
(
optionEl
)
;
}
let
el
=
null
;
while
(
(
el
=
this
.
dropdown
.
popupBox
.
querySelector
(
"
:
scope
>
basic
-
card
-
option
"
)
)
)
{
el
.
remove
(
)
;
}
for
(
let
option
of
desiredOptions
)
{
this
.
dropdown
.
popupBox
.
appendChild
(
option
)
;
}
let
selectedPaymentCardGUID
=
state
[
this
.
selectedStateKey
]
;
let
optionWithGUID
=
this
.
dropdown
.
getOptionByValue
(
selectedPaymentCardGUID
)
;
this
.
dropdown
.
selectedOption
=
optionWithGUID
;
if
(
selectedPaymentCardGUID
&
&
!
optionWithGUID
)
{
throw
new
Error
(
{
this
.
selectedStateKey
}
option
{
selectedPaymentCardGUID
}
+
does
not
exist
in
options
)
;
}
}
get
selectedStateKey
(
)
{
return
this
.
getAttribute
(
"
selected
-
state
-
key
"
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
change
"
:
{
this
.
onChange
(
event
)
;
break
;
}
}
}
onChange
(
{
target
}
)
{
let
selectedKey
=
this
.
selectedStateKey
;
let
stateChange
=
{
}
;
if
(
!
selectedKey
)
{
return
;
}
switch
(
target
)
{
case
this
.
dropdown
:
{
stateChange
[
selectedKey
]
=
target
.
selectedOption
&
&
target
.
selectedOption
.
guid
;
this
.
securityCodeInput
.
select
(
)
;
break
;
}
case
this
.
securityCodeInput
:
{
stateChange
[
selectedKey
+
"
SecurityCode
"
]
=
this
.
securityCodeInput
.
value
;
break
;
}
default
:
{
return
;
}
}
this
.
requestStore
.
setState
(
stateChange
)
;
}
}
customElements
.
define
(
"
payment
-
method
-
picker
"
PaymentMethodPicker
)
;
