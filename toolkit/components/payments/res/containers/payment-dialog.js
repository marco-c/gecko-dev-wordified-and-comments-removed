"
use
strict
"
;
class
PaymentDialog
extends
PaymentStateSubscriberMixin
(
HTMLElement
)
{
constructor
(
)
{
super
(
)
;
this
.
_template
=
document
.
getElementById
(
"
payment
-
dialog
-
template
"
)
;
this
.
_cachedState
=
{
}
;
}
connectedCallback
(
)
{
let
contents
=
document
.
importNode
(
this
.
_template
.
content
true
)
;
this
.
_hostNameEl
=
contents
.
querySelector
(
"
#
host
-
name
"
)
;
this
.
_cancelButton
=
contents
.
querySelector
(
"
#
cancel
"
)
;
this
.
_cancelButton
.
addEventListener
(
"
click
"
this
.
cancelRequest
)
;
this
.
_payButton
=
contents
.
querySelector
(
"
#
pay
"
)
;
this
.
_payButton
.
addEventListener
(
"
click
"
this
)
;
this
.
_viewAllButton
=
contents
.
querySelector
(
"
#
view
-
all
"
)
;
this
.
_viewAllButton
.
addEventListener
(
"
click
"
this
)
;
this
.
_orderDetailsOverlay
=
contents
.
querySelector
(
"
#
order
-
details
-
overlay
"
)
;
this
.
appendChild
(
contents
)
;
super
.
connectedCallback
(
)
;
}
disconnectedCallback
(
)
{
this
.
_cancelButton
.
removeEventListener
(
"
click
"
this
.
cancelRequest
)
;
this
.
_payButton
.
removeEventListener
(
"
click
"
this
.
pay
)
;
this
.
_viewAllButton
.
removeEventListener
(
"
click
"
this
)
;
super
.
disconnectedCallback
(
)
;
}
handleEvent
(
event
)
{
if
(
event
.
type
=
=
"
click
"
)
{
switch
(
event
.
target
)
{
case
this
.
_viewAllButton
:
let
orderDetailsShowing
=
!
this
.
requestStore
.
getState
(
)
.
orderDetailsShowing
;
this
.
requestStore
.
setState
(
{
orderDetailsShowing
}
)
;
break
;
case
this
.
_payButton
:
this
.
pay
(
)
;
break
;
}
}
}
cancelRequest
(
)
{
paymentRequest
.
cancel
(
)
;
}
pay
(
)
{
paymentRequest
.
pay
(
{
methodName
:
"
basic
-
card
"
methodData
:
{
cardholderName
:
"
John
Doe
"
cardNumber
:
"
9999999999
"
expiryMonth
:
"
01
"
expiryYear
:
"
9999
"
cardSecurityCode
:
"
999
"
}
}
)
;
}
changeShippingAddress
(
shippingAddressGUID
)
{
paymentRequest
.
changeShippingAddress
(
{
shippingAddressGUID
}
)
;
}
setStateFromParent
(
state
)
{
this
.
requestStore
.
setState
(
state
)
;
let
{
savedAddresses
savedBasicCards
selectedPaymentCard
selectedShippingAddress
}
=
this
.
requestStore
.
getState
(
)
;
if
(
!
savedAddresses
[
selectedShippingAddress
]
)
{
this
.
requestStore
.
setState
(
{
selectedShippingAddress
:
Object
.
keys
(
savedAddresses
)
[
0
]
|
|
null
}
)
;
}
if
(
!
savedBasicCards
[
selectedPaymentCard
]
)
{
this
.
requestStore
.
setState
(
{
selectedPaymentCard
:
Object
.
keys
(
savedBasicCards
)
[
0
]
|
|
null
}
)
;
}
}
stateChangeCallback
(
state
)
{
super
.
stateChangeCallback
(
state
)
;
if
(
state
.
selectedShippingAddress
!
=
this
.
_cachedState
.
selectedShippingAddress
)
{
this
.
changeShippingAddress
(
state
.
selectedShippingAddress
)
;
}
this
.
_cachedState
.
selectedShippingAddress
=
state
.
selectedShippingAddress
;
}
render
(
state
)
{
let
request
=
state
.
request
;
this
.
_hostNameEl
.
textContent
=
request
.
topLevelPrincipal
.
URI
.
displayHost
;
let
totalItem
=
request
.
paymentDetails
.
totalItem
;
let
totalAmountEl
=
this
.
querySelector
(
"
#
total
>
currency
-
amount
"
)
;
totalAmountEl
.
value
=
totalItem
.
amount
.
value
;
totalAmountEl
.
currency
=
totalItem
.
amount
.
currency
;
this
.
_orderDetailsOverlay
.
hidden
=
!
state
.
orderDetailsShowing
;
}
}
customElements
.
define
(
"
payment
-
dialog
"
PaymentDialog
)
;
