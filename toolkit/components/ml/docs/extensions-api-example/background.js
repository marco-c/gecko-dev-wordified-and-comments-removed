async
function
generateAltText
(
targetElementId
)
{
const
modal
=
getModal
(
)
;
try
{
const
imageUrl
=
browser
.
menus
.
getTargetElement
(
targetElementId
)
.
src
;
modal
.
updateText
(
"
Running
inference
.
.
.
"
)
;
const
res
=
await
browser
.
trial
.
ml
.
runEngine
(
{
args
:
[
imageUrl
]
}
)
;
modal
.
updateText
(
res
[
0
]
.
generated_text
)
;
}
catch
(
err
)
{
modal
.
updateText
(
{
err
}
)
;
}
}
async
function
_displayMessage
(
message
)
{
getModal
(
)
.
updateText
(
message
)
;
}
async
function
displayMessage
(
tab
message
)
{
await
browser
.
scripting
.
executeScript
(
{
target
:
{
tabId
:
tab
.
id
}
func
:
_displayMessage
.
bind
(
null
message
)
}
)
;
}
const
firstRunOnTab
=
new
Map
(
)
;
function
setFirstRun
(
tabId
isFirstRun
)
{
firstRunOnTab
.
set
(
tabId
isFirstRun
)
;
}
function
isFirstRun
(
tabId
)
{
return
firstRunOnTab
.
get
(
tabId
)
!
=
=
false
;
}
function
clearFirstRun
(
tabId
)
{
firstRunOnTab
.
delete
(
tabId
)
;
}
async
function
onclick
(
info
tab
)
{
if
(
isFirstRun
(
tab
.
id
)
)
{
browser
.
tabs
.
insertCSS
(
tab
.
id
{
file
:
"
.
/
alt
-
text
-
modal
.
css
"
}
)
;
}
const
listener
=
progressData
=
>
{
browser
.
tabs
.
sendMessage
(
tab
.
id
progressData
)
;
}
;
browser
.
trial
.
ml
.
onProgress
.
addListener
(
listener
)
;
try
{
if
(
isFirstRun
(
tab
.
id
)
)
{
await
browser
.
scripting
.
executeScript
(
{
target
:
{
tabId
:
tab
.
id
}
files
:
[
"
.
/
content
-
script
.
js
"
]
}
)
;
await
displayMessage
(
tab
"
Initializing
.
.
.
"
)
;
try
{
await
browser
.
trial
.
ml
.
createEngine
(
{
modelHub
:
"
mozilla
"
taskName
:
"
image
-
to
-
text
"
}
)
;
}
catch
(
err
)
{
await
displayMessage
(
tab
{
err
}
)
;
return
;
}
}
await
browser
.
scripting
.
executeScript
(
{
target
:
{
tabId
:
tab
.
id
}
func
:
generateAltText
args
:
[
info
.
targetElementId
]
}
)
;
}
finally
{
browser
.
trial
.
ml
.
onProgress
.
removeListener
(
listener
)
;
setFirstRun
(
tab
.
id
false
)
;
}
}
browser
.
menus
.
create
(
{
title
:
"
Generate
Alt
Text
"
documentUrlPatterns
:
[
"
*
:
/
/
*
/
*
"
]
contexts
:
[
"
image
"
]
onclick
}
)
;
browser
.
permissions
.
contains
(
{
permissions
:
[
"
trialML
"
]
}
)
.
then
(
granted
=
>
{
if
(
!
granted
)
{
browser
.
tabs
.
create
(
{
url
:
browser
.
runtime
.
getURL
(
"
settings
.
html
"
)
}
)
;
}
}
)
;
