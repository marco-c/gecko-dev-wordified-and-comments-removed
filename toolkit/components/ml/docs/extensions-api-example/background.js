"
use
strict
"
;
const
displayMessage
=
async
(
tabId
message
)
=
>
{
await
browser
.
scripting
.
executeScript
(
{
target
:
{
tabId
}
func
:
message
=
>
{
const
{
altTextModal
}
=
window
;
altTextModal
.
updateText
(
message
)
;
}
args
:
[
message
]
}
)
;
}
;
const
ensureEngineIsReady
=
async
tabId
=
>
{
const
{
engineCreated
}
=
await
browser
.
storage
.
session
.
get
(
{
engineCreated
:
false
}
)
;
if
(
engineCreated
)
{
return
;
}
const
listener
=
progressData
=
>
{
browser
.
tabs
.
sendMessage
(
tabId
progressData
)
;
}
;
browser
.
trial
.
ml
.
onProgress
.
addListener
(
listener
)
;
try
{
await
displayMessage
(
tabId
"
Initializing
.
.
.
"
)
;
await
browser
.
trial
.
ml
.
createEngine
(
{
modelHub
:
"
mozilla
"
taskName
:
"
image
-
to
-
text
"
}
)
;
browser
.
storage
.
session
.
set
(
{
engineCreated
:
true
}
)
;
}
catch
(
err
)
{
await
displayMessage
(
tabId
{
err
}
)
;
}
finally
{
browser
.
trial
.
ml
.
onProgress
.
removeListener
(
listener
)
;
}
}
;
const
generateAltText
=
async
(
tabId
imageUrl
)
=
>
{
const
[
{
result
:
hasAltTextModal
}
]
=
await
browser
.
scripting
.
executeScript
(
{
target
:
{
tabId
}
func
:
(
)
=
>
{
return
typeof
window
.
altTextModal
!
=
=
"
undefined
"
;
}
}
)
;
if
(
!
hasAltTextModal
)
{
await
browser
.
scripting
.
insertCSS
(
{
target
:
{
tabId
}
files
:
[
"
.
/
alt
-
text
-
modal
.
css
"
]
}
)
;
await
browser
.
scripting
.
executeScript
(
{
target
:
{
tabId
}
files
:
[
"
.
/
alt
-
text
-
modal
.
js
"
]
}
)
;
}
try
{
await
ensureEngineIsReady
(
tabId
)
;
await
browser
.
scripting
.
executeScript
(
{
target
:
{
tabId
}
func
:
async
imageUrl
=
>
{
const
{
altTextModal
}
=
window
;
try
{
altTextModal
.
updateText
(
"
Running
inference
.
.
.
"
)
;
const
res
=
await
browser
.
trial
.
ml
.
runEngine
(
{
args
:
[
imageUrl
]
}
)
;
altTextModal
.
updateText
(
res
[
0
]
.
generated_text
)
;
}
catch
(
err
)
{
altTextModal
.
updateText
(
{
err
}
)
;
}
}
args
:
[
imageUrl
]
}
)
;
}
catch
(
err
)
{
console
.
warn
(
err
)
;
}
}
;
if
(
"
menus
"
in
browser
)
{
browser
.
menus
.
onClicked
.
addListener
(
(
info
tab
)
=
>
{
if
(
info
.
menuItemId
!
=
=
"
generate
-
alt
-
text
"
|
|
!
info
.
srcUrl
)
{
return
;
}
generateAltText
(
tab
.
id
info
.
srcUrl
)
;
}
)
;
}
else
{
browser
.
runtime
.
onMessage
.
addListener
(
(
msg
sender
)
=
>
{
if
(
msg
.
type
!
=
=
"
generate
-
alt
-
text
"
)
{
return
;
}
generateAltText
(
sender
.
tab
.
id
msg
.
data
.
url
)
;
}
)
;
}
browser
.
runtime
.
onInstalled
.
addListener
(
async
(
)
=
>
{
if
(
"
menus
"
in
browser
)
{
await
browser
.
menus
.
create
(
{
id
:
"
generate
-
alt
-
text
"
title
:
"
Generate
Alt
Text
"
contexts
:
[
"
image
"
]
}
)
;
}
else
{
const
scripts
=
await
browser
.
scripting
.
getRegisteredContentScripts
(
)
;
if
(
!
scripts
.
some
(
script
=
>
script
.
id
=
=
=
"
contextmenu
-
shim
"
)
)
{
await
browser
.
scripting
.
registerContentScripts
(
[
{
id
:
"
contextmenu
-
shim
"
js
:
[
"
.
/
contextmenu
-
shim
.
js
"
]
matches
:
[
"
<
all_urls
>
"
]
}
]
)
;
}
}
const
granted
=
await
browser
.
permissions
.
contains
(
{
permissions
:
[
"
trialML
"
]
}
)
;
if
(
!
granted
)
{
browser
.
tabs
.
create
(
{
url
:
browser
.
runtime
.
getURL
(
"
settings
.
html
"
)
}
)
;
}
}
)
;
