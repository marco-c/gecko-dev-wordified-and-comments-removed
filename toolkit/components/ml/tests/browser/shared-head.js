function
numberLooseEquals
(
a
b
decimalPoints
=
2
)
{
return
a
.
toFixed
(
decimalPoints
)
=
=
=
b
.
toFixed
(
decimalPoints
)
;
}
function
vectorLooseEquals
(
a
b
decimalPoints
=
2
)
{
return
a
.
every
(
(
item
index
)
=
>
item
.
toFixed
(
decimalPoints
)
=
=
=
b
[
index
]
.
toFixed
(
decimalPoints
)
)
;
}
function
simpleNumberSequence
(
seed
=
0
)
{
const
values
=
[
0
.
42
0
.
145
0
.
5
0
.
9234
0
.
343
0
.
1324
0
.
8343
0
.
534
0
.
634
0
.
3233
]
;
let
counter
=
Math
.
floor
(
seed
)
%
values
.
length
;
return
(
)
=
>
{
counter
=
(
counter
+
1
)
%
values
.
length
;
return
values
[
counter
]
;
}
;
}
function
shuffleArray
(
array
randFunc
)
{
randFunc
=
randFunc
?
?
Math
.
random
;
for
(
let
i
=
array
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
const
j
=
Math
.
floor
(
randFunc
(
)
*
(
i
+
1
)
)
;
[
array
[
i
]
array
[
j
]
]
=
[
array
[
j
]
array
[
i
]
]
;
}
}
function
averageStatsValues
(
itemArray
)
{
const
result
=
{
}
;
if
(
itemArray
.
length
=
=
=
0
)
{
return
result
;
}
for
(
const
key
of
Object
.
keys
(
itemArray
[
0
]
)
)
{
let
total
=
0
.
0
;
itemArray
.
forEach
(
a
=
>
(
total
+
=
a
[
key
]
)
)
;
result
[
key
]
=
total
/
itemArray
.
length
;
}
return
result
;
}
