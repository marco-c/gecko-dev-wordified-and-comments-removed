ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
AppPicker
(
)
{
}
AppPicker
.
prototype
=
{
_incomingParams
:
null
appPickerLoad
:
function
appPickerLoad
(
)
{
const
nsILocalHandlerApp
=
Ci
.
nsILocalHandlerApp
;
this
.
_incomingParams
=
window
.
arguments
[
0
]
;
this
.
_incomingParams
.
handlerApp
=
null
;
document
.
title
=
this
.
_incomingParams
.
title
;
var
mimeInfo
=
this
.
_incomingParams
.
mimeInfo
;
var
filename
=
this
.
_incomingParams
.
filename
;
if
(
!
filename
)
{
filename
=
mimeInfo
.
MIMEType
;
}
var
description
=
this
.
_incomingParams
.
description
;
if
(
!
description
)
{
description
=
filename
;
filename
=
"
"
;
}
document
.
getElementById
(
"
content
-
description
"
)
.
setAttribute
(
"
value
"
description
)
;
document
.
getElementById
(
"
suggested
-
filename
"
)
.
setAttribute
(
"
value
"
filename
)
;
document
.
getElementById
(
"
content
-
icon
"
)
.
setAttribute
(
"
src
"
"
moz
-
icon
:
/
/
"
+
filename
+
"
?
size
=
32
&
contentType
=
"
+
mimeInfo
.
MIMEType
)
;
var
fileList
=
mimeInfo
.
possibleLocalHandlers
;
var
list
=
document
.
getElementById
(
"
app
-
picker
-
listbox
"
)
;
var
primaryCount
=
0
;
if
(
!
fileList
|
|
fileList
.
length
=
=
0
)
{
document
.
getElementById
(
"
app
-
picker
-
notfound
"
)
.
removeAttribute
(
"
hidden
"
)
;
return
;
}
for
(
var
idx
=
0
;
idx
<
fileList
.
length
;
idx
+
+
)
{
var
file
=
fileList
.
queryElementAt
(
idx
nsILocalHandlerApp
)
;
try
{
if
(
!
file
.
executable
|
|
!
file
.
executable
.
isFile
(
)
)
continue
;
}
catch
(
err
)
{
continue
;
}
var
item
=
document
.
createElement
(
"
richlistitem
"
)
;
item
.
handlerApp
=
file
;
list
.
appendChild
(
item
)
;
var
image
=
document
.
createElement
(
"
image
"
)
;
image
.
setAttribute
(
"
src
"
this
.
getFileIconURL
(
file
.
executable
)
)
;
item
.
appendChild
(
image
)
;
var
label
=
document
.
createElement
(
"
label
"
)
;
label
.
setAttribute
(
"
value
"
this
.
getFileDisplayName
(
file
.
executable
)
)
;
item
.
appendChild
(
label
)
;
primaryCount
+
+
;
}
if
(
primaryCount
=
=
0
)
{
document
.
getElementById
(
"
app
-
picker
-
notfound
"
)
.
removeAttribute
(
"
hidden
"
)
;
}
}
getFileIconURL
:
function
getFileIconURL
(
file
)
{
const
nsIFileProtocolHandler
=
Ci
.
nsIFileProtocolHandler
;
var
fph
=
Services
.
io
.
getProtocolHandler
(
"
file
"
)
.
QueryInterface
(
nsIFileProtocolHandler
)
;
if
(
!
fph
)
return
"
"
;
var
urlSpec
=
fph
.
getURLSpecFromFile
(
file
)
;
return
"
moz
-
icon
:
/
/
"
+
urlSpec
+
"
?
size
=
32
"
;
}
getFileDisplayName
:
function
getFileDisplayName
(
file
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
if
(
file
instanceof
Ci
.
nsILocalFileWin
)
{
try
{
return
file
.
getVersionInfoField
(
"
FileDescription
"
)
;
}
catch
(
e
)
{
}
}
}
else
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
if
(
file
instanceof
Ci
.
nsILocalFileMac
)
{
try
{
return
file
.
bundleDisplayName
;
}
catch
(
e
)
{
}
}
}
return
file
.
leafName
;
}
appDoubleClick
:
function
appDoubleClick
(
)
{
var
list
=
document
.
getElementById
(
"
app
-
picker
-
listbox
"
)
;
var
selItem
=
list
.
selectedItem
;
if
(
!
selItem
)
{
this
.
_incomingParams
.
handlerApp
=
null
;
return
true
;
}
this
.
_incomingParams
.
handlerApp
=
selItem
.
handlerApp
;
window
.
close
(
)
;
return
true
;
}
appPickerOK
:
function
appPickerOK
(
)
{
if
(
this
.
_incomingParams
.
handlerApp
)
return
true
;
var
list
=
document
.
getElementById
(
"
app
-
picker
-
listbox
"
)
;
var
selItem
=
list
.
selectedItem
;
if
(
!
selItem
)
{
this
.
_incomingParams
.
handlerApp
=
null
;
return
true
;
}
this
.
_incomingParams
.
handlerApp
=
selItem
.
handlerApp
;
return
true
;
}
appPickerCancel
:
function
appPickerCancel
(
)
{
this
.
_incomingParams
.
handlerApp
=
null
;
return
true
;
}
appPickerBrowse
:
function
appPickerBrowse
(
)
{
var
nsIFilePicker
=
Ci
.
nsIFilePicker
;
var
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
nsIFilePicker
)
;
fp
.
init
(
window
this
.
_incomingParams
.
title
nsIFilePicker
.
modeOpen
)
;
fp
.
appendFilters
(
nsIFilePicker
.
filterApps
)
;
var
startLocation
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
startLocation
=
"
ProgF
"
;
}
else
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
startLocation
=
"
LocApp
"
;
}
else
{
startLocation
=
"
Home
"
;
}
fp
.
displayDirectory
=
Services
.
dirsvc
.
get
(
startLocation
Ci
.
nsIFile
)
;
fp
.
open
(
rv
=
>
{
if
(
rv
=
=
nsIFilePicker
.
returnOK
&
&
fp
.
file
)
{
var
localHandlerApp
=
Cc
[
"
mozilla
.
org
/
uriloader
/
local
-
handler
-
app
;
1
"
]
.
createInstance
(
Ci
.
nsILocalHandlerApp
)
;
localHandlerApp
.
executable
=
fp
.
file
;
this
.
_incomingParams
.
handlerApp
=
localHandlerApp
;
window
.
close
(
)
;
}
}
)
;
return
true
;
}
}
;
var
g_dialog
=
new
AppPicker
(
)
;
