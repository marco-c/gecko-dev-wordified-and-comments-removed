extern
crate
bits
;
extern
crate
comedy
;
extern
crate
guid_win
;
extern
crate
thiserror
;
pub
mod
bits_protocol
;
mod
in_process
;
use
std
:
:
ffi
;
use
bits_protocol
:
:
*
;
use
thiserror
:
:
Error
;
pub
use
bits
:
:
status
:
:
{
BitsErrorContext
BitsJobState
BitsJobTimes
}
;
pub
use
bits
:
:
{
BitsJobProgress
BitsJobStatus
BitsProxyUsage
}
;
pub
use
bits_protocol
:
:
{
JobError
JobStatus
}
;
pub
use
comedy
:
:
HResult
;
pub
use
guid_win
:
:
Guid
;
#
[
derive
(
Clone
Debug
Eq
Error
PartialEq
)
]
pub
enum
PipeError
{
#
[
error
(
"
Pipe
is
not
connected
"
)
]
NotConnected
#
[
error
(
"
Operation
timed
out
"
)
]
Timeout
#
[
error
(
"
Should
have
written
{
0
}
bytes
wrote
{
1
}
"
)
]
WriteCount
(
usize
u32
)
#
[
error
(
"
Windows
API
error
"
)
]
Api
(
#
[
from
]
HResult
)
}
pub
use
PipeError
as
Error
;
pub
enum
BitsClient
{
#
[
doc
(
hidden
)
]
InProcess
(
in_process
:
:
InProcessClient
)
}
use
BitsClient
:
:
InProcess
;
impl
BitsClient
{
pub
fn
new
(
job_name
:
ffi
:
:
OsString
save_path_prefix
:
ffi
:
:
OsString
)
-
>
Result
<
BitsClient
Error
>
{
Ok
(
InProcess
(
in_process
:
:
InProcessClient
:
:
new
(
job_name
save_path_prefix
)
?
)
)
}
pub
fn
start_job
(
&
mut
self
url
:
ffi
:
:
OsString
save_path
:
ffi
:
:
OsString
proxy_usage
:
BitsProxyUsage
no_progress_timeout_secs
:
u32
monitor_interval_millis
:
u32
)
-
>
Result
<
Result
<
(
StartJobSuccess
BitsMonitorClient
)
StartJobFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
start_job
(
url
save_path
proxy_usage
no_progress_timeout_secs
monitor_interval_millis
)
.
map
(
|
(
success
monitor
)
|
(
success
BitsMonitorClient
:
:
InProcess
(
monitor
)
)
)
)
}
}
pub
fn
monitor_job
(
&
mut
self
guid
:
Guid
interval_millis
:
u32
)
-
>
Result
<
Result
<
BitsMonitorClient
MonitorJobFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
monitor_job
(
guid
interval_millis
)
.
map
(
BitsMonitorClient
:
:
InProcess
)
)
}
}
pub
fn
suspend_job
(
&
mut
self
guid
:
Guid
)
-
>
Result
<
Result
<
(
)
SuspendJobFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
suspend_job
(
guid
)
)
}
}
pub
fn
resume_job
(
&
mut
self
guid
:
Guid
)
-
>
Result
<
Result
<
(
)
ResumeJobFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
resume_job
(
guid
)
)
}
}
pub
fn
set_job_priority
(
&
mut
self
guid
:
Guid
foreground
:
bool
)
-
>
Result
<
Result
<
(
)
SetJobPriorityFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
set_job_priority
(
guid
foreground
)
)
}
}
pub
fn
set_no_progress_timeout
(
&
mut
self
guid
:
Guid
timeout_secs
:
u32
)
-
>
Result
<
Result
<
(
)
SetNoProgressTimeoutFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
set_no_progress_timeout
(
guid
timeout_secs
)
)
}
}
pub
fn
set_update_interval
(
&
mut
self
guid
:
Guid
interval_millis
:
u32
)
-
>
Result
<
Result
<
(
)
SetUpdateIntervalFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
set_update_interval
(
guid
interval_millis
)
)
}
}
pub
fn
stop_update
(
&
mut
self
guid
:
Guid
)
-
>
Result
<
Result
<
(
)
SetUpdateIntervalFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
stop_update
(
guid
)
)
}
}
pub
fn
complete_job
(
&
mut
self
guid
:
Guid
)
-
>
Result
<
Result
<
(
)
CompleteJobFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
complete_job
(
guid
)
)
}
}
pub
fn
cancel_job
(
&
mut
self
guid
:
Guid
)
-
>
Result
<
Result
<
(
)
CancelJobFailure
>
Error
>
{
match
self
{
InProcess
(
client
)
=
>
Ok
(
client
.
cancel_job
(
guid
)
)
}
}
}
pub
enum
BitsMonitorClient
{
InProcess
(
in_process
:
:
InProcessMonitor
)
}
impl
BitsMonitorClient
{
pub
fn
get_status
(
&
mut
self
timeout_millis
:
u32
)
-
>
Result
<
Result
<
JobStatus
HResultMessage
>
Error
>
{
match
self
{
BitsMonitorClient
:
:
InProcess
(
client
)
=
>
client
.
get_status
(
timeout_millis
)
}
}
}
