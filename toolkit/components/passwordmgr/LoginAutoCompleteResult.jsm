"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
LoginAutoComplete
"
"
LoginAutoCompleteResult
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
InsecurePasswordUtils
"
"
resource
:
/
/
gre
/
modules
/
InsecurePasswordUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginFormFactory
"
"
resource
:
/
/
gre
/
modules
/
LoginFormFactory
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginManagerContent
"
"
resource
:
/
/
gre
/
modules
/
LoginManagerContent
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
formFillController
"
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
Ci
.
nsIFormFillController
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
SHOULD_SHOW_ORIGIN
"
"
signon
.
showAutoCompleteOrigins
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
return
LoginHelper
.
createLogger
(
"
LoginAutoCompleteResult
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
passwordMgrBundle
"
(
)
=
>
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
passwordmgr
/
locale
/
passwordmgr
.
properties
"
)
;
}
)
;
function
loginSort
(
a
b
)
{
let
userA
=
a
.
username
.
toLowerCase
(
)
;
let
userB
=
b
.
username
.
toLowerCase
(
)
;
if
(
userA
<
userB
)
{
return
-
1
;
}
if
(
userA
>
userB
)
{
return
1
;
}
return
0
;
}
function
findDuplicates
(
loginList
)
{
let
seen
=
new
Set
(
)
;
let
duplicates
=
new
Set
(
)
;
for
(
let
login
of
loginList
)
{
if
(
seen
.
has
(
login
.
username
)
)
{
duplicates
.
add
(
login
.
username
)
;
}
seen
.
add
(
login
.
username
)
;
}
return
duplicates
;
}
function
getLocalizedString
(
key
formatArgs
=
null
)
{
if
(
formatArgs
)
{
return
passwordMgrBundle
.
formatStringFromName
(
key
formatArgs
formatArgs
.
length
)
;
}
return
passwordMgrBundle
.
GetStringFromName
(
key
)
;
}
class
AutocompleteItem
{
constructor
(
style
)
{
this
.
style
=
style
;
this
.
value
=
"
"
;
}
}
class
InsecureLoginFormAutocompleteItem
extends
AutocompleteItem
{
constructor
(
)
{
super
(
"
insecureWarning
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
label
"
(
)
=
>
{
let
learnMoreString
=
getLocalizedString
(
"
insecureFieldWarningLearnMore
"
)
;
return
getLocalizedString
(
"
insecureFieldWarningDescription2
"
[
learnMoreString
]
)
;
}
)
;
}
}
class
LoginAutocompleteItem
extends
AutocompleteItem
{
constructor
(
login
isPasswordField
dateAndTimeFormatter
duplicateUsernames
)
{
super
(
SHOULD_SHOW_ORIGIN
?
"
loginWithOrigin
"
:
"
login
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
label
"
(
)
=
>
{
let
username
=
login
.
username
;
if
(
!
username
|
|
duplicateUsernames
.
has
(
username
)
)
{
if
(
!
username
)
{
username
=
getLocalizedString
(
"
noUsername
"
)
;
}
let
meta
=
login
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
let
time
=
dateAndTimeFormatter
.
format
(
new
Date
(
meta
.
timePasswordChanged
)
)
;
username
=
getLocalizedString
(
"
loginHostAge
"
[
username
time
]
)
;
}
return
username
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
value
"
(
)
=
>
{
return
isPasswordField
?
login
.
password
:
login
.
username
;
}
)
;
}
}
class
LoginsFooterAutocompleteItem
extends
AutocompleteItem
{
constructor
(
hostname
)
{
super
(
"
loginsFooter
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
label
"
(
)
=
>
{
return
JSON
.
stringify
(
{
label
:
getLocalizedString
(
"
viewSavedLogins
.
label
"
)
hostname
}
)
;
}
)
;
}
}
function
LoginAutoCompleteResult
(
aSearchString
matchingLogins
{
isSecure
messageManager
isPasswordField
hostname
}
)
{
let
hidingFooterOnPWFieldAutoOpened
=
false
;
function
isFooterEnabled
(
)
{
if
(
!
LoginHelper
.
showAutoCompleteFooter
|
|
!
LoginHelper
.
enabled
)
{
return
false
;
}
if
(
isPasswordField
&
&
aSearchString
)
{
log
.
debug
(
"
Hiding
footer
:
non
-
empty
password
field
"
)
;
return
false
;
}
if
(
!
matchingLogins
.
length
&
&
isPasswordField
&
&
formFillController
.
passwordPopupAutomaticallyOpened
)
{
hidingFooterOnPWFieldAutoOpened
=
true
;
log
.
debug
(
"
Hiding
footer
:
no
logins
and
the
popup
was
opened
upon
focus
of
the
pw
.
field
"
)
;
return
false
;
}
return
true
;
}
this
.
_showInsecureFieldWarning
=
(
!
isSecure
&
&
LoginHelper
.
showInsecureFieldWarning
)
?
1
:
0
;
this
.
_showAutoCompleteFooter
=
isFooterEnabled
(
)
?
1
:
0
;
this
.
logins
=
matchingLogins
.
sort
(
loginSort
)
;
this
.
searchString
=
aSearchString
;
this
.
_messageManager
=
messageManager
;
let
dateAndTimeFormatter
=
new
Services
.
intl
.
DateTimeFormat
(
undefined
{
dateStyle
:
"
medium
"
}
)
;
let
duplicateUsernames
=
findDuplicates
(
matchingLogins
)
;
this
.
results
=
[
]
;
if
(
this
.
_showInsecureFieldWarning
)
{
this
.
results
.
push
(
new
InsecureLoginFormAutocompleteItem
(
)
)
;
}
for
(
let
login
of
this
.
logins
)
{
this
.
results
.
push
(
new
LoginAutocompleteItem
(
login
isPasswordField
dateAndTimeFormatter
duplicateUsernames
)
)
;
}
if
(
this
.
_showAutoCompleteFooter
)
{
this
.
results
.
push
(
new
LoginsFooterAutocompleteItem
(
hostname
)
)
;
}
if
(
this
.
matchCount
>
0
)
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
;
this
.
defaultIndex
=
0
;
}
else
if
(
hidingFooterOnPWFieldAutoOpened
)
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_FAILURE
;
this
.
defaultIndex
=
-
1
;
}
}
LoginAutoCompleteResult
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteResult
Ci
.
nsISupportsWeakReference
]
)
logins
:
null
get
wrappedJSObject
(
)
{
return
this
;
}
searchString
:
null
searchResult
:
Ci
.
nsIAutoCompleteResult
.
RESULT_NOMATCH
defaultIndex
:
-
1
errorDescription
:
"
"
get
matchCount
(
)
{
return
this
.
results
.
length
;
}
getValueAt
(
index
)
{
if
(
index
<
0
|
|
index
>
=
this
.
matchCount
)
{
throw
new
Error
(
"
Index
out
of
range
.
"
)
;
}
return
this
.
results
[
index
]
.
value
;
}
getLabelAt
(
index
)
{
if
(
index
<
0
|
|
index
>
=
this
.
matchCount
)
{
throw
new
Error
(
"
Index
out
of
range
.
"
)
;
}
return
this
.
results
[
index
]
.
label
;
}
getCommentAt
(
index
)
{
if
(
this
.
_showInsecureFieldWarning
&
&
index
=
=
=
0
)
{
return
"
"
;
}
if
(
this
.
_showAutoCompleteFooter
&
&
index
=
=
=
this
.
matchCount
-
1
)
{
return
"
"
;
}
let
login
=
this
.
logins
[
index
-
this
.
_showInsecureFieldWarning
]
;
return
JSON
.
stringify
(
{
loginOrigin
:
login
.
hostname
}
)
;
}
getStyleAt
(
index
)
{
return
this
.
results
[
index
]
.
style
;
}
getImageAt
(
index
)
{
return
"
"
;
}
getFinalCompleteValueAt
(
index
)
{
return
this
.
getValueAt
(
index
)
;
}
removeValueAt
(
index
removeFromDB
)
{
if
(
index
<
0
|
|
index
>
=
this
.
matchCount
)
{
throw
new
Error
(
"
Index
out
of
range
.
"
)
;
}
if
(
this
.
_showInsecureFieldWarning
&
&
index
=
=
=
0
)
{
return
;
}
if
(
this
.
_showInsecureFieldWarning
)
{
index
-
-
;
}
if
(
this
.
_showAutoCompleteFooter
&
&
index
=
=
=
this
.
matchCount
-
1
)
{
return
;
}
let
[
removedLogin
]
=
this
.
logins
.
splice
(
index
1
)
;
this
.
matchCount
-
-
;
if
(
this
.
defaultIndex
>
this
.
logins
.
length
)
{
this
.
defaultIndex
-
-
;
}
if
(
removeFromDB
)
{
if
(
this
.
_messageManager
)
{
let
vanilla
=
LoginHelper
.
loginToVanillaObject
(
removedLogin
)
;
this
.
_messageManager
.
sendAsyncMessage
(
"
PasswordManager
:
removeLogin
"
{
login
:
vanilla
}
)
;
}
else
{
Services
.
logins
.
removeLogin
(
removedLogin
)
;
}
}
}
}
;
function
LoginAutoComplete
(
)
{
}
LoginAutoComplete
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
2bdac17c
-
53f1
-
4896
-
a521
-
682ccdeef3a8
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsILoginAutoCompleteSearch
]
)
_autoCompleteLookupPromise
:
null
startSearch
(
aSearchString
aPreviousResult
aElement
aCallback
)
{
let
{
isNullPrincipal
}
=
aElement
.
nodePrincipal
;
let
isSecure
=
!
isNullPrincipal
;
if
(
isSecure
)
{
let
form
=
LoginFormFactory
.
createFromField
(
aElement
)
;
isSecure
=
InsecurePasswordUtils
.
isFormSecure
(
form
)
;
}
let
isPasswordField
=
aElement
.
type
=
=
"
password
"
;
let
hostname
=
aElement
.
ownerDocument
.
documentURIObject
.
host
;
let
completeSearch
=
(
autoCompleteLookupPromise
{
logins
messageManager
}
)
=
>
{
if
(
this
.
_autoCompleteLookupPromise
!
=
=
autoCompleteLookupPromise
)
{
return
;
}
this
.
_autoCompleteLookupPromise
=
null
;
let
results
=
new
LoginAutoCompleteResult
(
aSearchString
logins
{
messageManager
isSecure
isPasswordField
hostname
}
)
;
aCallback
.
onSearchCompletion
(
results
)
;
}
;
if
(
isNullPrincipal
)
{
let
acLookupPromise
=
this
.
_autoCompleteLookupPromise
=
Promise
.
resolve
(
{
logins
:
[
]
}
)
;
acLookupPromise
.
then
(
completeSearch
.
bind
(
this
acLookupPromise
)
)
;
return
;
}
if
(
isPasswordField
&
&
aSearchString
)
{
let
acLookupPromise
=
this
.
_autoCompleteLookupPromise
=
Promise
.
resolve
(
{
logins
:
[
]
}
)
;
acLookupPromise
.
then
(
completeSearch
.
bind
(
this
acLookupPromise
)
)
;
return
;
}
if
(
!
LoginHelper
.
enabled
)
{
let
acLookupPromise
=
this
.
_autoCompleteLookupPromise
=
Promise
.
resolve
(
{
logins
:
[
]
}
)
;
acLookupPromise
.
then
(
completeSearch
.
bind
(
this
acLookupPromise
)
)
;
return
;
}
log
.
debug
(
"
AutoCompleteSearch
invoked
.
Search
is
:
"
aSearchString
)
;
let
previousResult
;
if
(
aPreviousResult
)
{
previousResult
=
{
searchString
:
aPreviousResult
.
searchString
logins
:
aPreviousResult
.
wrappedJSObject
.
logins
}
;
}
else
{
previousResult
=
null
;
}
let
rect
=
BrowserUtils
.
getElementBoundingScreenRect
(
aElement
)
;
let
acLookupPromise
=
this
.
_autoCompleteLookupPromise
=
LoginManagerContent
.
_autoCompleteSearchAsync
(
aSearchString
previousResult
aElement
rect
)
;
acLookupPromise
.
then
(
completeSearch
.
bind
(
this
acLookupPromise
)
)
.
catch
(
log
.
error
)
;
}
stopSearch
(
)
{
this
.
_autoCompleteLookupPromise
=
null
;
}
}
;
