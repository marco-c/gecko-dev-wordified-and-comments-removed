"
use
strict
"
;
add_task
(
async
function
test_addLogin_invalid_characters_legacy
(
)
{
for
(
let
testValue
of
[
"
http
:
/
/
newline
\
n
.
example
.
com
"
"
http
:
/
/
carriagereturn
.
example
.
com
\
r
"
]
)
{
let
loginInfo
=
TestData
.
formLogin
(
{
origin
:
testValue
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
login
values
can
'
t
contain
newlines
/
)
;
loginInfo
=
TestData
.
formLogin
(
{
formActionOrigin
:
testValue
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
login
values
can
'
t
contain
newlines
/
)
;
loginInfo
=
TestData
.
authLogin
(
{
httpRealm
:
testValue
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
login
values
can
'
t
contain
newlines
/
)
;
}
for
(
let
testValue
of
[
"
newline_field
\
n
"
"
carriagereturn
\
r_field
"
]
)
{
let
loginInfo
=
TestData
.
formLogin
(
{
usernameField
:
testValue
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
login
values
can
'
t
contain
newlines
/
)
;
loginInfo
=
TestData
.
formLogin
(
{
passwordField
:
testValue
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
login
values
can
'
t
contain
newlines
/
)
;
}
let
loginInfo
=
TestData
.
formLogin
(
{
usernameField
:
"
.
"
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
login
values
can
'
t
be
periods
/
)
;
loginInfo
=
TestData
.
formLogin
(
{
formActionOrigin
:
"
.
"
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
login
values
can
'
t
be
periods
/
)
;
loginInfo
=
TestData
.
formLogin
(
{
origin
:
"
http
:
/
/
parens
(
.
example
.
com
"
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
bad
parens
in
origin
/
)
;
}
)
;
add_task
(
function
test_setLoginSavingEnabled_invalid_characters_legacy
(
)
{
for
(
let
origin
of
[
"
http
:
/
/
newline
\
n
.
example
.
com
"
"
http
:
/
/
carriagereturn
.
example
.
com
\
r
"
"
.
"
]
)
{
Assert
.
throws
(
(
)
=
>
Services
.
logins
.
setLoginSavingEnabled
(
origin
false
)
/
Invalid
origin
/
)
;
}
}
)
;
