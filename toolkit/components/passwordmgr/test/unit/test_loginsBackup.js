"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginStore
"
"
resource
:
/
/
gre
/
modules
/
LoginStore
.
jsm
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
)
;
const
rawLogin1
=
{
id
:
1
hostname
:
"
http
:
/
/
www
.
example
.
com
"
httpRealm
:
null
formSubmitURL
:
"
http
:
/
/
www
.
example
.
com
"
usernameField
:
"
field_
"
+
String
.
fromCharCode
(
533
537
7570
345
)
passwordField
:
"
field_
"
+
String
.
fromCharCode
(
421
259
349
537
)
encryptedUsername
:
"
(
test
)
"
encryptedPassword
:
"
(
test
)
"
guid
:
"
(
test
)
"
encType
:
Ci
.
nsILoginManagerCrypto
.
ENCTYPE_SDR
timeCreated
:
Date
.
now
(
)
timeLastUsed
:
Date
.
now
(
)
timePasswordChanged
:
Date
.
now
(
)
timesUsed
:
1
}
;
const
rawLogin2
=
{
id
:
2
hostname
:
"
http
:
/
/
www
.
example2
.
com
"
httpRealm
:
null
formSubmitURL
:
"
http
:
/
/
www
.
example2
.
com
"
usernameField
:
"
field_2
"
+
String
.
fromCharCode
(
533
537
7570
345
)
passwordField
:
"
field_2
"
+
String
.
fromCharCode
(
421
259
349
537
)
encryptedUsername
:
"
(
test2
)
"
encryptedPassword
:
"
(
test2
)
"
guid
:
"
(
test2
)
"
encType
:
Ci
.
nsILoginManagerCrypto
.
ENCTYPE_SDR
timeCreated
:
Date
.
now
(
)
timeLastUsed
:
Date
.
now
(
)
timePasswordChanged
:
Date
.
now
(
)
timesUsed
:
1
}
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
telemetry
.
testing
.
overrideProductsCheck
"
true
)
;
add_task
(
async
function
test_logins_store_missing_or_corrupt_with_backup
(
)
{
const
loginsStorePath
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
logins
.
json
"
)
;
const
loginsStoreBackup
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
logins
-
backup
.
json
"
)
;
let
store
=
new
LoginStore
(
loginsStorePath
loginsStoreBackup
)
;
await
store
.
load
(
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
store
.
path
)
)
"
No
store
file
at
start
up
"
)
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
"
No
backup
file
at
start
up
"
)
;
store
.
data
.
logins
.
push
(
rawLogin1
)
;
await
store
.
_save
(
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
path
)
)
;
store
.
data
.
logins
.
push
(
rawLogin2
)
;
await
store
.
_save
(
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
;
await
IOUtils
.
remove
(
store
.
path
)
;
store
.
data
.
logins
=
[
]
;
store
.
dataReady
=
false
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
store
.
path
)
)
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
;
Services
.
telemetry
.
clearEvents
(
)
;
await
store
.
load
(
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
path
)
"
logins
.
json
is
restored
as
expected
after
it
went
missing
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
;
Assert
.
equal
(
store
.
data
.
logins
.
length
1
"
Logins
backup
was
used
successfully
when
logins
.
json
was
missing
"
)
;
TelemetryTestUtils
.
assertEvents
(
[
[
"
jsonfile
"
"
load
"
"
logins
"
]
[
"
jsonfile
"
"
load
"
"
logins
"
"
used_backup
"
]
]
{
}
{
clear
:
true
}
)
;
info
(
"
Telemetry
was
recorded
accurately
when
logins
-
backup
.
json
is
used
when
logins
.
json
was
missing
"
)
;
let
string
=
'
{
"
logins
"
:
[
{
"
hostname
"
:
"
http
:
/
/
www
.
example
.
com
"
"
id
"
:
1
'
;
await
IOUtils
.
writeUTF8
(
store
.
path
string
{
tmpPath
:
{
store
.
path
}
.
tmp
}
)
;
Services
.
telemetry
.
clearEvents
(
)
;
store
.
data
.
logins
=
[
]
;
store
.
dataReady
=
false
;
await
store
.
load
(
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
{
store
.
path
}
.
corrupt
)
"
logins
.
json
.
corrupt
created
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
path
)
"
logins
.
json
is
restored
after
it
was
corrupted
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
;
Assert
.
equal
(
store
.
data
.
logins
.
length
1
"
Logins
backup
was
used
successfully
when
logins
.
json
was
corrupt
"
)
;
TelemetryTestUtils
.
assertEvents
(
[
[
"
jsonfile
"
"
load
"
"
logins
"
"
"
]
[
"
jsonfile
"
"
load
"
"
logins
"
"
invalid_json
"
]
[
"
jsonfile
"
"
load
"
"
logins
"
"
used_backup
"
]
]
{
}
{
clear
:
true
}
)
;
info
(
"
Telemetry
was
recorded
accurately
when
logins
-
backup
.
json
is
used
when
logins
.
json
was
corrupt
"
)
;
await
IOUtils
.
remove
(
{
store
.
path
}
.
corrupt
)
;
await
IOUtils
.
remove
(
store
.
path
)
;
store
.
data
.
logins
=
[
]
;
store
.
dataReady
=
false
;
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
store
.
path
)
)
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
;
store
.
ensureDataReady
(
)
;
await
IOUtils
.
exists
(
store
.
path
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
store
.
data
.
logins
.
length
=
=
1
;
}
)
;
await
IOUtils
.
writeUTF8
(
store
.
path
string
{
tmpPath
:
{
store
.
path
}
.
tmp
}
)
;
store
.
data
.
logins
=
[
]
;
store
.
dataReady
=
false
;
store
.
ensureDataReady
(
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
{
store
.
path
}
.
corrupt
)
"
logins
.
json
.
corrupt
created
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
path
)
"
logins
.
json
is
restored
after
it
was
corrupted
"
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
store
.
_options
.
backupTo
)
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
store
.
data
.
logins
.
length
=
=
1
;
}
)
;
}
)
;
