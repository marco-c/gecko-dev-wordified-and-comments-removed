"
use
strict
"
;
const
MS_PER_DAY
=
24
*
60
*
60
*
1000
;
const
gReferenceTimeMs
=
new
Date
(
"
2000
-
01
-
01T00
:
00
:
00
"
)
.
getTime
(
)
;
const
daysBeforeMs
=
days
=
>
gReferenceTimeMs
-
(
days
+
0
.
5
)
*
MS_PER_DAY
;
const
StatisticsTestData
=
[
{
timeLastUsed
:
daysBeforeMs
(
0
)
}
{
timeLastUsed
:
daysBeforeMs
(
1
)
}
{
timeLastUsed
:
daysBeforeMs
(
7
)
formActionOrigin
:
null
httpRealm
:
"
The
HTTP
Realm
"
}
{
username
:
"
"
timeLastUsed
:
daysBeforeMs
(
7
)
}
{
username
:
"
"
timeLastUsed
:
daysBeforeMs
(
30
)
}
{
username
:
"
"
timeLastUsed
:
daysBeforeMs
(
31
)
}
{
timeLastUsed
:
daysBeforeMs
(
365
)
}
{
username
:
"
"
timeLastUsed
:
daysBeforeMs
(
366
)
}
{
timeLastUsed
:
daysBeforeMs
(
-
1
)
}
{
timeLastUsed
:
daysBeforeMs
(
1000
)
}
]
;
add_setup
(
async
(
)
=
>
{
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
let
uniqueNumber
=
1
;
let
logins
=
[
]
;
for
(
let
loginModifications
of
StatisticsTestData
)
{
loginModifications
.
origin
=
http
:
/
/
{
uniqueNumber
+
+
}
.
example
.
com
;
if
(
typeof
loginModifications
.
httpRealm
!
=
"
undefined
"
)
{
logins
.
push
(
TestData
.
authLogin
(
loginModifications
)
)
;
}
else
{
logins
.
push
(
TestData
.
formLogin
(
loginModifications
)
)
;
}
}
await
Services
.
logins
.
addLogins
(
logins
)
;
}
)
;
add_task
(
function
test_logins_count
(
)
{
Assert
.
equal
(
Glean
.
pwmgr
.
numSavedPasswords
.
testGetValue
(
)
StatisticsTestData
.
length
"
We
'
ve
appropriately
counted
all
the
logins
"
)
;
}
)
;
add_task
(
function
test_settings_statistics
(
)
{
let
oldRememberSignons
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
rememberSignons
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
rememberSignons
"
oldRememberSignons
)
;
}
)
;
for
(
let
remember
of
[
false
true
]
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
rememberSignons
"
remember
)
;
Assert
.
equal
(
Glean
.
pwmgr
.
savingEnabled
.
testGetValue
(
)
remember
"
The
pref
is
correctly
recorded
.
"
)
;
}
}
)
;
