ChromeUtils
.
defineModuleGetter
(
this
"
LoginStore
"
"
resource
:
/
/
gre
/
modules
/
LoginStore
.
jsm
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
add_task
(
async
function
test_login_store_missing_telemetry
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
loginsStorePath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
logins
.
json
"
)
;
Assert
.
equal
(
false
await
OS
.
File
.
exists
(
loginsStorePath
)
)
;
let
store
=
new
LoginStore
(
loginsStorePath
)
;
await
store
.
load
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
[
"
jsonfile
"
"
load
"
"
logins
"
]
]
{
}
{
clear
:
true
}
)
;
}
)
;
add_task
(
async
function
test_login_store_corrupt_telemetry
(
)
{
let
loginsStorePath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
logins
.
json
"
)
;
let
store
=
new
LoginStore
(
loginsStorePath
)
;
let
string
=
'
{
"
logins
"
:
[
{
"
hostname
"
:
"
http
:
/
/
www
.
example
.
com
"
"
id
"
:
1
'
;
await
OS
.
File
.
writeAtomic
(
store
.
path
new
TextEncoder
(
)
.
encode
(
string
)
)
;
await
store
.
load
(
)
;
Assert
.
ok
(
await
OS
.
File
.
exists
(
store
.
path
+
"
.
corrupt
"
)
)
;
TelemetryTestUtils
.
assertEvents
(
[
[
"
jsonfile
"
"
load
"
"
logins
"
"
"
]
[
"
jsonfile
"
"
load
"
"
logins
"
"
invalid_json
"
]
]
{
}
{
clear
:
true
}
)
;
await
OS
.
File
.
remove
(
store
.
path
+
"
.
corrupt
"
)
;
await
OS
.
File
.
remove
(
store
.
path
)
;
}
)
;
