"
use
strict
"
;
async
function
reloadAndCheckLoginsGen
(
aExpectedLogins
)
{
await
LoginTestUtils
.
reloadData
(
)
;
LoginTestUtils
.
checkLogins
(
aExpectedLogins
)
;
LoginTestUtils
.
clearData
(
)
;
}
add_task
(
async
function
test_storage_addLogin_nonascii
(
)
{
let
origin
=
"
http
:
/
/
"
+
String
.
fromCharCode
(
355
)
+
"
.
example
.
com
"
;
let
loginInfo
=
TestData
.
formLogin
(
{
origin
formActionOrigin
:
origin
username
:
String
.
fromCharCode
(
533
537
7570
345
)
password
:
String
.
fromCharCode
(
421
259
349
537
)
usernameField
:
"
field_
"
+
String
.
fromCharCode
(
533
537
7570
345
)
passwordField
:
"
field_
"
+
String
.
fromCharCode
(
421
259
349
537
)
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
await
reloadAndCheckLoginsGen
(
[
loginInfo
]
)
;
loginInfo
=
TestData
.
authLogin
(
{
httpRealm
:
String
.
fromCharCode
(
355
277
349
357
)
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
await
reloadAndCheckLoginsGen
(
[
loginInfo
]
)
;
}
)
;
add_task
(
async
function
test_storage_addLogin_newlines
(
)
{
let
loginInfo
=
TestData
.
formLogin
(
{
username
:
"
user
\
r
\
nname
"
password
:
"
password
\
r
\
n
"
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
await
reloadAndCheckLoginsGen
(
[
loginInfo
]
)
;
}
)
;
add_task
(
async
function
test_storage_addLogin_dot
(
)
{
let
loginInfo
=
TestData
.
formLogin
(
{
origin
:
"
.
"
passwordField
:
"
.
"
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
await
reloadAndCheckLoginsGen
(
[
loginInfo
]
)
;
loginInfo
=
TestData
.
authLogin
(
{
httpRealm
:
"
.
"
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
await
reloadAndCheckLoginsGen
(
[
loginInfo
]
)
;
}
)
;
add_task
(
async
function
test_storage_addLogin_parentheses
(
)
{
let
loginList
=
[
TestData
.
authLogin
(
{
httpRealm
:
"
(
realm
"
}
)
TestData
.
authLogin
(
{
httpRealm
:
"
realm
)
"
}
)
TestData
.
authLogin
(
{
httpRealm
:
"
(
realm
)
"
}
)
TestData
.
authLogin
(
{
httpRealm
:
"
)
realm
(
"
}
)
TestData
.
authLogin
(
{
origin
:
"
http
:
/
/
parens
(
.
example
.
com
"
}
)
TestData
.
authLogin
(
{
origin
:
"
http
:
/
/
parens
)
.
example
.
com
"
}
)
TestData
.
authLogin
(
{
origin
:
"
http
:
/
/
parens
(
example
)
.
example
.
com
"
}
)
TestData
.
authLogin
(
{
origin
:
"
http
:
/
/
parens
)
example
(
.
example
.
com
"
}
)
]
;
await
Services
.
logins
.
addLogins
(
loginList
)
;
await
reloadAndCheckLoginsGen
(
loginList
)
;
}
)
;
