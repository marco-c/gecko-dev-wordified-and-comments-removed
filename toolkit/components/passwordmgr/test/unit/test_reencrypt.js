"
use
strict
"
;
const
EXPECTED_LOGINS
=
LoginTestUtils
.
testData
.
loginList
(
)
;
add_setup
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
sdr
.
mechanism
"
)
;
Services
.
logins
.
removeAllLogins
(
)
;
}
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
sdr
.
mechanism
"
0
)
;
Services
.
logins
.
removeAllLogins
(
)
;
await
Services
.
logins
.
addLogins
(
EXPECTED_LOGINS
)
;
}
)
;
add_task
(
async
function
test_before_reencrypt
(
)
{
await
LoginTestUtils
.
checkLogins
(
EXPECTED_LOGINS
"
Logins
should
have
the
expected
value
before
any
reencryption
"
)
;
}
)
;
add_task
(
async
function
test_reencrypt_same_mechanism
(
)
{
await
Services
.
logins
.
reencryptAllLogins
(
)
;
await
LoginTestUtils
.
checkLogins
(
EXPECTED_LOGINS
"
Logins
should
stay
the
same
after
regular
migration
"
)
;
}
)
;
add_task
(
async
function
test_reencrypt_new_mechanism
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
sdr
.
mechanism
"
1
)
;
await
Services
.
logins
.
reencryptAllLogins
(
)
;
await
LoginTestUtils
.
checkLogins
(
EXPECTED_LOGINS
"
Logins
should
stay
the
same
after
regular
migration
"
)
;
}
)
;
add_task
(
async
function
test_reencrypt_mixed_mechanism
(
)
{
Services
.
prefs
.
setIntPref
(
"
security
.
sdr
.
mechanism
"
0
)
;
Services
.
logins
.
modifyLogin
(
EXPECTED_LOGINS
[
0
]
EXPECTED_LOGINS
[
0
]
.
clone
(
)
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
sdr
.
mechanism
"
1
)
;
await
Services
.
logins
.
reencryptAllLogins
(
)
;
await
LoginTestUtils
.
checkLogins
(
EXPECTED_LOGINS
"
Logins
should
stay
the
same
after
mixed
migration
"
)
;
}
)
;
add_task
(
async
function
test_reencrypt_race
(
)
{
const
reencryptionPromise
=
Services
.
logins
.
reencryptAllLogins
(
)
;
const
newLogins
=
EXPECTED_LOGINS
.
slice
(
)
;
newLogins
.
splice
(
0
1
)
;
Services
.
logins
.
removeLogin
(
EXPECTED_LOGINS
[
0
]
)
;
newLogins
[
0
]
=
EXPECTED_LOGINS
[
1
]
.
clone
(
)
;
newLogins
[
0
]
.
password
=
"
different
password
"
;
await
Services
.
logins
.
modifyLogin
(
EXPECTED_LOGINS
[
1
]
newLogins
[
0
]
)
;
await
reencryptionPromise
;
await
LoginTestUtils
.
checkLogins
(
newLogins
"
In
case
of
other
racing
login
modifications
they
should
prevail
"
)
;
}
)
;
