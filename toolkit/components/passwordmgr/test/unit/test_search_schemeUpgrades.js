const
HTTP3_ORIGIN
=
"
http
:
/
/
www3
.
example
.
com
"
;
const
HTTPS_ORIGIN
=
"
https
:
/
/
www
.
example
.
com
"
;
const
HTTP_ORIGIN
=
"
http
:
/
/
www
.
example
.
com
"
;
function
buildExpectedLogins
(
aQuery
)
{
return
TestData
.
loginList
(
)
.
filter
(
entry
=
>
Object
.
keys
(
aQuery
)
.
every
(
name
=
>
{
if
(
name
=
=
"
schemeUpgrades
"
)
{
return
true
;
}
if
(
[
"
origin
"
"
formActionOrigin
"
]
.
includes
(
name
)
)
{
return
LoginHelper
.
isOriginMatching
(
entry
[
name
]
aQuery
[
name
]
{
schemeUpgrades
:
aQuery
.
schemeUpgrades
}
)
;
}
return
entry
[
name
]
=
=
=
aQuery
[
name
]
;
}
)
)
;
}
function
checkSearch
(
aQuery
aExpectedCount
)
{
info
(
"
Testing
searchLogins
for
"
+
JSON
.
stringify
(
aQuery
)
)
;
let
expectedLogins
=
buildExpectedLogins
(
aQuery
)
;
Assert
.
equal
(
expectedLogins
.
length
aExpectedCount
)
;
let
logins
=
Services
.
logins
.
searchLogins
(
newPropertyBag
(
aQuery
)
)
;
LoginTestUtils
.
assertLoginListsEqual
(
logins
expectedLogins
)
;
}
add_setup
(
async
(
)
=
>
{
await
Services
.
logins
.
addLogins
(
TestData
.
loginList
(
)
)
;
}
)
;
add_task
(
function
test_search_schemeUpgrades_origin
(
)
{
checkSearch
(
{
origin
:
HTTPS_ORIGIN
}
1
)
;
checkSearch
(
{
origin
:
HTTPS_ORIGIN
schemeUpgrades
:
false
}
1
)
;
checkSearch
(
{
origin
:
HTTPS_ORIGIN
schemeUpgrades
:
undefined
}
1
)
;
checkSearch
(
{
origin
:
HTTPS_ORIGIN
schemeUpgrades
:
true
}
2
)
;
}
)
;
add_task
(
function
test_search_schemeUpgrades_formActionOrigin
(
)
{
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
}
2
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
schemeUpgrades
:
false
}
2
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
schemeUpgrades
:
undefined
}
2
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
schemeUpgrades
:
true
}
4
)
;
}
)
;
add_task
(
function
test_search_schemeUpgrades_origin_formActionOrigin
(
)
{
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTPS_ORIGIN
}
1
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTPS_ORIGIN
schemeUpgrades
:
false
}
1
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTPS_ORIGIN
schemeUpgrades
:
undefined
}
1
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTPS_ORIGIN
schemeUpgrades
:
true
}
2
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTPS_ORIGIN
schemeUpgrades
:
true
usernameField
:
"
form_field_username
"
}
2
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTPS_ORIGIN
passwordField
:
"
form_field_password
"
schemeUpgrades
:
true
usernameField
:
"
form_field_username
"
}
2
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTPS_ORIGIN
httpRealm
:
null
passwordField
:
"
form_field_password
"
schemeUpgrades
:
true
usernameField
:
"
form_field_username
"
}
2
)
;
}
)
;
add_task
(
function
test_http_to_https
(
)
{
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTP3_ORIGIN
httpRealm
:
null
schemeUpgrades
:
false
}
1
)
;
checkSearch
(
{
formActionOrigin
:
HTTPS_ORIGIN
origin
:
HTTP3_ORIGIN
httpRealm
:
null
schemeUpgrades
:
true
}
2
)
;
}
)
;
add_task
(
function
test_search_schemeUpgrades_downgrade
(
)
{
checkSearch
(
{
formActionOrigin
:
HTTP_ORIGIN
origin
:
HTTP_ORIGIN
}
1
)
;
info
(
"
The
same
number
should
be
found
with
schemeUpgrades
since
we
'
re
searching
for
HTTP
"
)
;
checkSearch
(
{
formActionOrigin
:
HTTP_ORIGIN
origin
:
HTTP_ORIGIN
schemeUpgrades
:
true
}
1
)
;
}
)
;
