"
use
strict
"
;
add_task
(
function
test_setLoginSavingEnabled_getAllDisabledHosts
(
)
{
let
origin1
=
"
http
:
/
/
disabled1
.
example
.
com
"
;
let
origin2
=
"
http
:
/
/
disabled2
.
example
.
com
"
;
let
origin3
=
"
https
:
/
/
disabled2
.
example
.
com
"
;
Services
.
logins
.
setLoginSavingEnabled
(
origin1
false
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
false
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin3
false
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
origin1
origin2
origin3
]
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
false
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
origin1
origin2
origin3
]
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
true
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
origin1
origin3
]
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin1
true
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin3
true
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
]
)
;
}
)
;
add_task
(
function
test_setLoginSavingEnabled_getLoginSavingEnabled
(
)
{
let
origin1
=
"
http
:
/
/
disabled
.
example
.
com
"
;
let
origin2
=
"
https
:
/
/
disabled
.
example
.
com
"
;
Assert
.
ok
(
Services
.
logins
.
getLoginSavingEnabled
(
origin1
)
)
;
Assert
.
ok
(
Services
.
logins
.
getLoginSavingEnabled
(
origin2
)
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin1
false
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
true
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin1
)
)
;
Assert
.
ok
(
Services
.
logins
.
getLoginSavingEnabled
(
origin2
)
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin1
true
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
false
)
;
Assert
.
ok
(
Services
.
logins
.
getLoginSavingEnabled
(
origin1
)
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin2
)
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
true
)
;
}
)
;
add_task
(
function
test_setLoginSavingEnabled_invalid_characters
(
)
{
let
origin
=
"
http
:
/
/
null
\
0X
.
example
.
com
"
;
Assert
.
throws
(
(
)
=
>
Services
.
logins
.
setLoginSavingEnabled
(
origin
false
)
/
Invalid
origin
/
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
]
)
;
}
)
;
add_task
(
function
test_rememberSignons
(
)
{
let
origin1
=
"
http
:
/
/
example
.
com
"
;
let
origin2
=
"
http
:
/
/
localhost
"
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
"
signon
.
rememberSignons
"
)
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin1
false
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin1
)
)
;
Assert
.
ok
(
Services
.
logins
.
getLoginSavingEnabled
(
origin2
)
)
;
Services
.
prefs
.
setBoolPref
(
"
signon
.
rememberSignons
"
false
)
;
registerCleanupFunction
(
(
)
=
>
Services
.
prefs
.
clearUserPref
(
"
signon
.
rememberSignons
"
)
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin1
)
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin2
)
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
origin1
]
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin1
true
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
false
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin1
)
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin2
)
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
origin2
]
)
;
Services
.
prefs
.
setBoolPref
(
"
signon
.
rememberSignons
"
true
)
;
Assert
.
ok
(
Services
.
logins
.
getLoginSavingEnabled
(
origin1
)
)
;
Assert
.
ok
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin2
)
)
;
Services
.
logins
.
setLoginSavingEnabled
(
origin2
true
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
]
)
;
}
)
;
add_task
(
async
function
test_storage_setLoginSavingEnabled_nonascii_IDN_is_supported
(
)
{
let
origin
=
"
http
:
/
/
.
net
"
;
let
encoding
=
"
http
:
/
/
xn
-
-
pss
.
net
"
;
Services
.
logins
.
setLoginSavingEnabled
(
origin
false
)
;
await
LoginTestUtils
.
reloadData
(
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
origin
)
false
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
encoding
)
false
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
origin
]
)
;
LoginTestUtils
.
clearData
(
)
;
Services
.
logins
.
setLoginSavingEnabled
(
encoding
false
)
;
await
LoginTestUtils
.
reloadData
(
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
origin
)
false
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
encoding
)
false
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
origin
]
)
;
LoginTestUtils
.
clearData
(
)
;
}
)
;
add_task
(
async
function
test_storage_setLoginSavingEnabled_nonascii_IDN_not_supported
(
)
{
let
origin
=
"
http
:
/
/
.
com
"
;
let
encoding
=
"
http
:
/
/
xn
-
-
19g
.
com
"
;
Services
.
logins
.
setLoginSavingEnabled
(
origin
false
)
;
await
LoginTestUtils
.
reloadData
(
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
origin
)
false
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
encoding
)
false
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
encoding
]
)
;
LoginTestUtils
.
clearData
(
)
;
Services
.
logins
.
setLoginSavingEnabled
(
encoding
false
)
;
await
LoginTestUtils
.
reloadData
(
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
origin
)
false
)
;
Assert
.
equal
(
Services
.
logins
.
getLoginSavingEnabled
(
encoding
)
false
)
;
LoginTestUtils
.
assertDisabledHostsEqual
(
Services
.
logins
.
getAllDisabledHosts
(
)
[
encoding
]
)
;
LoginTestUtils
.
clearData
(
)
;
}
)
;
