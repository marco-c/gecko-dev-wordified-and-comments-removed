"
use
strict
"
;
add_task
(
async
function
test_addLogin_wildcard
(
)
{
let
loginInfo
=
TestData
.
formLogin
(
{
origin
:
"
http
:
/
/
any
.
example
.
com
"
formActionOrigin
:
"
"
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
loginInfo
=
TestData
.
formLogin
(
{
origin
:
"
http
:
/
/
any
.
example
.
com
"
}
)
;
await
Assert
.
rejects
(
Services
.
logins
.
addLoginAsync
(
loginInfo
)
/
already
exists
/
)
;
loginInfo
=
TestData
.
authLogin
(
{
origin
:
"
http
:
/
/
any
.
example
.
com
"
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
loginInfo
=
TestData
.
formLogin
(
{
origin
:
"
http
:
/
/
other
.
example
.
com
"
}
)
;
await
Services
.
logins
.
addLoginAsync
(
loginInfo
)
;
}
)
;
add_task
(
function
test_search_all_wildcard
(
)
{
let
matchData
=
newPropertyBag
(
{
formActionOrigin
:
"
http
:
/
/
www
.
example
.
com
"
}
)
;
Assert
.
equal
(
Services
.
logins
.
searchLogins
(
matchData
)
.
length
2
)
;
Assert
.
equal
(
Services
.
logins
.
findLogins
(
"
"
"
http
:
/
/
www
.
example
.
com
"
null
)
.
length
2
)
;
Assert
.
equal
(
Services
.
logins
.
countLogins
(
"
"
"
http
:
/
/
www
.
example
.
com
"
null
)
2
)
;
matchData
.
setProperty
(
"
origin
"
"
http
:
/
/
any
.
example
.
com
"
)
;
Assert
.
equal
(
Services
.
logins
.
searchLogins
(
matchData
)
.
length
1
)
;
Assert
.
equal
(
Services
.
logins
.
findLogins
(
"
http
:
/
/
any
.
example
.
com
"
"
http
:
/
/
www
.
example
.
com
"
null
)
.
length
1
)
;
Assert
.
equal
(
Services
.
logins
.
countLogins
(
"
http
:
/
/
any
.
example
.
com
"
"
http
:
/
/
www
.
example
.
com
"
null
)
1
)
;
}
)
;
add_task
(
function
test_searchLogins_wildcard
(
)
{
let
logins
=
Services
.
logins
.
searchLogins
(
newPropertyBag
(
{
formActionOrigin
:
"
"
}
)
)
;
let
loginInfo
=
TestData
.
formLogin
(
{
origin
:
"
http
:
/
/
any
.
example
.
com
"
formActionOrigin
:
"
"
}
)
;
LoginTestUtils
.
assertLoginListsEqual
(
logins
[
loginInfo
]
)
;
}
)
;
