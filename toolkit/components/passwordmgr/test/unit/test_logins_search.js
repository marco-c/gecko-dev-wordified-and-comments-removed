"
use
strict
"
;
function
buildExpectedLogins
(
aQuery
)
{
return
TestData
.
loginList
(
)
.
filter
(
entry
=
>
Object
.
keys
(
aQuery
)
.
every
(
name
=
>
entry
[
name
]
=
=
=
aQuery
[
name
]
)
)
;
}
function
checkSearchLogins
(
aQuery
aExpectedCount
)
{
info
(
"
Testing
searchLogins
for
"
+
JSON
.
stringify
(
aQuery
)
)
;
let
expectedLogins
=
buildExpectedLogins
(
aQuery
)
;
Assert
.
equal
(
expectedLogins
.
length
aExpectedCount
)
;
let
logins
=
Services
.
logins
.
searchLogins
(
newPropertyBag
(
aQuery
)
)
;
LoginTestUtils
.
assertLoginListsEqual
(
logins
expectedLogins
)
;
}
function
checkAllSearches
(
aQuery
aExpectedCount
)
{
info
(
"
Testing
all
search
functions
for
"
+
JSON
.
stringify
(
aQuery
)
)
;
let
expectedLogins
=
buildExpectedLogins
(
aQuery
)
;
Assert
.
equal
(
expectedLogins
.
length
aExpectedCount
)
;
let
origin
=
(
"
origin
"
in
aQuery
)
?
aQuery
.
origin
:
"
"
;
let
formActionOrigin
=
(
"
formActionOrigin
"
in
aQuery
)
?
aQuery
.
formActionOrigin
:
"
"
;
let
httpRealm
=
(
"
httpRealm
"
in
aQuery
)
?
aQuery
.
httpRealm
:
"
"
;
let
logins
=
Services
.
logins
.
findLogins
(
origin
formActionOrigin
httpRealm
)
;
LoginTestUtils
.
assertLoginListsEqual
(
logins
expectedLogins
)
;
let
count
=
Services
.
logins
.
countLogins
(
origin
formActionOrigin
httpRealm
)
;
Assert
.
equal
(
count
expectedLogins
.
length
)
;
checkSearchLogins
(
aQuery
aExpectedCount
)
;
}
add_task
(
function
test_initialize
(
)
{
for
(
let
login
of
TestData
.
loginList
(
)
)
{
Services
.
logins
.
addLogin
(
login
)
;
}
}
)
;
add_task
(
function
test_search_all_basic
(
)
{
checkAllSearches
(
{
}
23
)
;
checkAllSearches
(
{
httpRealm
:
null
}
14
)
;
checkAllSearches
(
{
formActionOrigin
:
null
}
9
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www4
.
example
.
com
"
httpRealm
:
null
}
3
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www2
.
example
.
org
"
formActionOrigin
:
null
}
2
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www
.
example
.
com
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
https
:
/
/
www
.
example
.
com
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
https
:
/
/
example
.
com
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www3
.
example
.
com
"
}
3
)
;
checkAllSearches
(
{
formActionOrigin
:
"
http
:
/
/
www
.
example
.
com
"
}
2
)
;
checkAllSearches
(
{
formActionOrigin
:
"
https
:
/
/
www
.
example
.
com
"
}
2
)
;
checkAllSearches
(
{
formActionOrigin
:
"
http
:
/
/
example
.
com
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www3
.
example
.
com
"
formActionOrigin
:
"
http
:
/
/
www
.
example
.
com
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www3
.
example
.
com
"
formActionOrigin
:
"
https
:
/
/
www
.
example
.
com
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www3
.
example
.
com
"
formActionOrigin
:
"
http
:
/
/
example
.
com
"
}
1
)
;
checkAllSearches
(
{
httpRealm
:
"
The
HTTP
Realm
"
}
3
)
;
checkAllSearches
(
{
httpRealm
:
"
ftp
:
/
/
ftp
.
example
.
org
"
}
1
)
;
checkAllSearches
(
{
httpRealm
:
"
The
HTTP
Realm
Other
"
}
2
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
example
.
net
"
httpRealm
:
"
The
HTTP
Realm
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
example
.
net
"
httpRealm
:
"
The
HTTP
Realm
Other
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
ftp
:
/
/
example
.
net
"
httpRealm
:
"
ftp
:
/
/
example
.
net
"
}
1
)
;
}
)
;
add_task
(
function
test_searchLogins
(
)
{
checkSearchLogins
(
{
usernameField
:
"
form_field_username
"
}
12
)
;
checkSearchLogins
(
{
passwordField
:
"
form_field_password
"
}
13
)
;
checkSearchLogins
(
{
usernameField
:
"
"
}
11
)
;
checkSearchLogins
(
{
httpRealm
:
null
usernameField
:
"
"
}
2
)
;
checkSearchLogins
(
{
origin
:
"
http
:
/
/
www6
.
example
.
com
"
usernameField
:
"
"
}
1
)
;
}
)
;
add_task
(
function
test_searchLogins_invalid
(
)
{
Assert
.
throws
(
(
)
=
>
Services
.
logins
.
searchLogins
(
newPropertyBag
(
{
username
:
"
value
"
}
)
)
/
Unexpected
field
/
)
;
}
)
;
add_task
(
function
test_search_all_full_case_sensitive
(
)
{
checkAllSearches
(
{
origin
:
"
http
:
/
/
www
.
example
.
com
"
}
1
)
;
checkAllSearches
(
{
origin
:
"
http
:
/
/
www
.
example
.
com
/
"
}
0
)
;
checkAllSearches
(
{
origin
:
"
example
.
com
"
}
0
)
;
checkAllSearches
(
{
formActionOrigin
:
"
http
:
/
/
www
.
example
.
com
"
}
2
)
;
checkAllSearches
(
{
formActionOrigin
:
"
http
:
/
/
www
.
example
.
com
/
"
}
0
)
;
checkAllSearches
(
{
formActionOrigin
:
"
http
:
/
/
"
}
0
)
;
checkAllSearches
(
{
formActionOrigin
:
"
example
.
com
"
}
0
)
;
checkAllSearches
(
{
httpRealm
:
"
The
HTTP
Realm
"
}
3
)
;
checkAllSearches
(
{
httpRealm
:
"
The
http
Realm
"
}
0
)
;
checkAllSearches
(
{
httpRealm
:
"
The
HTTP
"
}
0
)
;
checkAllSearches
(
{
httpRealm
:
"
Realm
"
}
0
)
;
}
)
;
add_task
(
function
test_search_all_empty
(
)
{
checkAllSearches
(
{
origin
:
"
http
:
/
/
nonexistent
.
example
.
com
"
}
0
)
;
checkAllSearches
(
{
formActionOrigin
:
"
http
:
/
/
www
.
example
.
com
"
httpRealm
:
"
The
HTTP
Realm
"
}
0
)
;
checkSearchLogins
(
{
origin
:
"
"
}
0
)
;
checkSearchLogins
(
{
id
:
"
1000
"
}
0
)
;
}
)
;
