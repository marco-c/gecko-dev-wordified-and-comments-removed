const
testCases
=
[
{
name
:
"
No
saved
logins
username
and
password
"
username
:
"
username
"
password
:
"
password
"
expectOutcome
:
[
{
username
:
"
username
"
password
:
"
password
"
}
]
}
{
name
:
"
No
saved
logins
password
with
empty
username
"
username
:
"
"
password
:
"
password
"
expectOutcome
:
[
{
username
:
"
"
password
:
"
password
"
}
]
}
{
name
:
"
Saved
login
with
username
update
password
"
username
:
"
username
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
expectOutcome
:
[
{
username
:
"
username
"
password
:
"
newPassword
"
}
]
}
{
name
:
"
Saved
login
with
no
username
update
password
"
username
:
"
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
expectOutcome
:
[
{
username
:
"
"
password
:
"
newPassword
"
}
]
}
{
name
:
"
Saved
login
with
no
username
add
username
and
different
password
"
oldUsername
:
"
"
username
:
"
username
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
expectOutcome
:
[
{
username
:
"
"
password
:
"
password
"
}
{
username
:
"
username
"
password
:
"
newPassword
"
}
]
}
]
;
for
(
let
testData
of
testCases
)
{
let
tmp
=
{
async
[
testData
.
name
]
(
)
{
info
(
"
testing
with
:
"
+
JSON
.
stringify
(
testData
)
)
;
await
test_save_change
(
testData
)
;
}
}
;
add_task
(
tmp
[
testData
.
name
]
)
;
}
async
function
test_save_change
(
testData
)
{
let
{
oldUsername
username
oldPassword
password
expectOutcome
}
=
testData
;
if
(
oldPassword
)
{
Services
.
logins
.
addLogin
(
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
typeof
oldUsername
!
=
=
"
undefined
"
?
oldUsername
:
username
password
:
oldPassword
}
)
)
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
"
+
"
passwordmgr
/
test
/
browser
/
form_basic
.
html
"
}
async
function
(
browser
)
{
await
SimpleTest
.
promiseFocus
(
browser
.
ownerGlobal
)
;
info
(
update
form
with
username
:
{
username
}
password
:
{
password
}
)
;
await
changeContentFormValues
(
browser
{
"
#
form
-
basic
-
username
"
:
username
"
#
form
-
basic
-
password
"
:
password
}
)
;
let
formSubmittedPromise
=
listenForTestNotification
(
"
FormSubmit
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
doc
=
this
.
content
.
document
;
doc
.
getElementById
(
"
form
-
basic
"
)
.
submit
(
)
;
}
)
;
await
formSubmittedPromise
;
let
expectedNotification
expectedDoorhanger
;
if
(
oldPassword
!
=
=
undefined
&
&
oldUsername
!
=
=
undefined
)
{
expectedNotification
=
"
addLogin
"
;
expectedDoorhanger
=
"
password
-
save
"
;
}
else
if
(
oldPassword
!
=
=
undefined
)
{
expectedNotification
=
"
modifyLogin
"
;
expectedDoorhanger
=
"
password
-
change
"
;
}
else
{
expectedNotification
=
"
addLogin
"
;
expectedDoorhanger
=
"
password
-
save
"
;
}
info
(
"
Waiting
for
doorhanger
of
type
:
"
+
expectedDoorhanger
)
;
let
notif
=
await
waitForDoorhanger
(
browser
expectedDoorhanger
)
;
await
checkDoorhangerUsernamePassword
(
username
password
)
;
let
promiseLogin
=
TestUtils
.
topicObserved
(
"
passwordmgr
-
storage
-
changed
"
(
_
data
)
=
>
data
=
=
expectedNotification
)
;
await
clickDoorhangerButton
(
notif
REMEMBER_BUTTON
)
;
await
promiseLogin
;
await
cleanupDoorhanger
(
notif
)
;
verifyLogins
(
expectOutcome
)
;
}
)
;
Services
.
logins
.
removeAllLogins
(
)
;
}
