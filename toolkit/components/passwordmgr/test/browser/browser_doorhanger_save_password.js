add_task
(
async
function
test_save_change
(
)
{
let
testCases
=
[
{
username
:
"
username
"
password
:
"
password
"
expectOutcome
:
[
{
username
:
"
username
"
password
:
"
password
"
}
]
}
{
username
:
"
"
password
:
"
password
"
expectOutcome
:
[
{
username
:
"
"
password
:
"
password
"
}
]
}
{
username
:
"
username
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
expectOutcome
:
[
{
username
:
"
username
"
password
:
"
newPassword
"
}
]
}
{
username
:
"
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
expectOutcome
:
[
{
username
:
"
"
password
:
"
newPassword
"
}
]
}
{
oldUsername
:
"
"
username
:
"
username
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
expectOutcome
:
[
{
username
:
"
"
password
:
"
password
"
}
{
username
:
"
username
"
password
:
"
newPassword
"
}
]
}
]
;
for
(
let
{
oldUsername
username
oldPassword
password
expectOutcome
}
of
testCases
)
{
if
(
oldPassword
)
{
Services
.
logins
.
addLogin
(
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
typeof
oldUsername
!
=
=
"
undefined
"
?
oldUsername
:
username
password
:
oldPassword
}
)
)
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
"
+
"
passwordmgr
/
test
/
browser
/
form_basic
.
html
"
}
async
function
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
[
username
password
]
]
async
function
(
[
contentUsername
contentPassword
]
)
{
let
doc
=
content
.
document
;
doc
.
getElementById
(
"
form
-
basic
-
username
"
)
.
setUserInput
(
contentUsername
)
;
doc
.
getElementById
(
"
form
-
basic
-
password
"
)
.
setUserInput
(
contentPassword
)
;
doc
.
getElementById
(
"
form
-
basic
"
)
.
submit
(
)
;
}
)
;
let
expectedNotification
expectedDoorhanger
;
if
(
oldPassword
!
=
=
undefined
&
&
oldUsername
!
=
=
undefined
)
{
expectedNotification
=
"
addLogin
"
;
expectedDoorhanger
=
"
password
-
save
"
;
}
else
if
(
oldPassword
!
=
=
undefined
)
{
expectedNotification
=
"
modifyLogin
"
;
expectedDoorhanger
=
"
password
-
change
"
;
}
else
{
expectedNotification
=
"
addLogin
"
;
expectedDoorhanger
=
"
password
-
save
"
;
}
let
notif
=
getCaptureDoorhanger
(
expectedDoorhanger
PopupNotifications
browser
)
;
await
checkDoorhangerUsernamePassword
(
username
password
)
;
let
promiseLogin
=
TestUtils
.
topicObserved
(
"
passwordmgr
-
storage
-
changed
"
(
_
data
)
=
>
data
=
=
expectedNotification
)
;
await
clickDoorhangerButton
(
notif
REMEMBER_BUTTON
)
;
await
promiseLogin
;
await
cleanupDoorhanger
(
notif
)
;
verifyLogins
(
expectOutcome
)
;
}
)
;
Services
.
logins
.
removeAllLogins
(
)
;
}
}
)
;
