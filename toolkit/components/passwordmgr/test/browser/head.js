const
DIRECTORY_PATH
=
"
/
browser
/
toolkit
/
components
/
passwordmgr
/
test
/
browser
/
"
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
LoginTestUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
ContentTaskUtils
.
jsm
"
this
)
;
add_task
(
function
*
common_initialize
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
signon
.
rememberSignons
"
true
]
]
}
)
;
}
)
;
registerCleanupFunction
(
function
*
cleanup_removeAllLoginsAndResetRecipes
(
)
{
yield
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
logins
.
removeAllLogins
(
)
;
let
recipeParent
=
LoginTestUtils
.
recipes
.
getRecipeParent
(
)
;
if
(
!
recipeParent
)
{
return
;
}
yield
recipeParent
.
then
(
recipeParentResult
=
>
recipeParentResult
.
reset
(
)
)
;
}
)
;
function
testSubmittingLoginForm
(
aPageFile
aTaskFn
aOrigin
=
"
http
:
/
/
example
.
com
"
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
aOrigin
+
DIRECTORY_PATH
+
aPageFile
}
function
*
(
browser
)
{
ok
(
true
"
loaded
"
+
aPageFile
)
;
let
fieldValues
=
yield
ContentTask
.
spawn
(
browser
undefined
function
*
(
)
{
yield
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
content
.
location
.
pathname
.
endsWith
(
"
/
formsubmit
.
sjs
"
)
&
&
content
.
document
.
readyState
=
=
"
complete
"
;
}
"
Wait
for
form
submission
load
(
formsubmit
.
sjs
)
"
)
;
let
username
=
content
.
document
.
getElementById
(
"
user
"
)
.
textContent
;
let
password
=
content
.
document
.
getElementById
(
"
pass
"
)
.
textContent
;
return
{
username
password
}
;
}
)
;
ok
(
true
"
form
submission
loaded
"
)
;
if
(
aTaskFn
)
{
yield
*
aTaskFn
(
fieldValues
)
;
}
return
fieldValues
;
}
)
;
}
function
checkOnlyLoginWasUsedTwice
(
{
justChanged
}
)
{
let
logins
=
Services
.
logins
.
getAllLogins
(
)
;
is
(
logins
.
length
1
"
Should
only
have
1
login
"
)
;
ok
(
logins
[
0
]
instanceof
Ci
.
nsILoginMetaInfo
"
metainfo
QI
"
)
;
is
(
logins
[
0
]
.
timesUsed
2
"
check
.
timesUsed
for
existing
login
submission
"
)
;
ok
(
logins
[
0
]
.
timeCreated
<
logins
[
0
]
.
timeLastUsed
"
timeLastUsed
bumped
"
)
;
if
(
justChanged
)
{
is
(
logins
[
0
]
.
timeLastUsed
logins
[
0
]
.
timePasswordChanged
"
timeLastUsed
=
=
timePasswordChanged
"
)
;
}
else
{
is
(
logins
[
0
]
.
timeCreated
logins
[
0
]
.
timePasswordChanged
"
timeChanged
not
updated
"
)
;
}
}
const
REMEMBER_BUTTON
=
0
;
const
NEVER_BUTTON
=
2
;
const
CHANGE_BUTTON
=
0
;
const
DONT_CHANGE_BUTTON
=
1
;
function
getCaptureDoorhanger
(
aKind
popupNotifications
=
PopupNotifications
)
{
ok
(
true
"
Looking
for
"
+
aKind
+
"
popup
notification
"
)
;
let
notification
=
popupNotifications
.
getNotification
(
"
password
"
)
;
if
(
notification
)
{
is
(
notification
.
options
.
passwordNotificationType
aKind
"
Notification
type
matches
.
"
)
;
if
(
aKind
=
=
"
password
-
change
"
)
{
is
(
notification
.
mainAction
.
label
"
Update
"
"
Main
action
label
matches
update
doorhanger
.
"
)
;
}
else
if
(
aKind
=
=
"
password
-
save
"
)
{
is
(
notification
.
mainAction
.
label
"
Save
"
"
Main
action
label
matches
save
doorhanger
.
"
)
;
}
}
return
notification
;
}
function
clickDoorhangerButton
(
aPopup
aButtonIndex
)
{
ok
(
true
"
Looking
for
action
at
index
"
+
aButtonIndex
)
;
let
notifications
=
aPopup
.
owner
.
panel
.
childNodes
;
ok
(
notifications
.
length
>
0
"
at
least
one
notification
displayed
"
)
;
ok
(
true
notifications
.
length
+
"
notification
(
s
)
"
)
;
let
notification
=
notifications
[
0
]
;
if
(
aButtonIndex
=
=
0
)
{
ok
(
true
"
Triggering
main
action
"
)
;
notification
.
button
.
doCommand
(
)
;
}
else
if
(
aButtonIndex
=
=
1
)
{
ok
(
true
"
Triggering
secondary
action
"
)
;
notification
.
secondaryButton
.
doCommand
(
)
;
}
else
if
(
aButtonIndex
<
=
aPopup
.
secondaryActions
.
length
)
{
ok
(
true
"
Triggering
secondary
action
"
+
aButtonIndex
)
;
notification
.
childNodes
[
aButtonIndex
-
1
]
.
doCommand
(
)
;
}
}
function
*
checkDoorhangerUsernamePassword
(
username
password
)
{
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
document
.
getElementById
(
"
password
-
notification
-
username
"
)
.
value
=
=
username
;
}
"
Wait
for
nsLoginManagerPrompter
writeDataToUI
(
)
"
)
;
is
(
document
.
getElementById
(
"
password
-
notification
-
username
"
)
.
value
username
"
Check
doorhanger
username
"
)
;
is
(
document
.
getElementById
(
"
password
-
notification
-
password
"
)
.
value
password
"
Check
doorhanger
password
"
)
;
}
