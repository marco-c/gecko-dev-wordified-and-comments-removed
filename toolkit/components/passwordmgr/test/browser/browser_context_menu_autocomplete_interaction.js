"
use
strict
"
;
const
TEST_ORIGIN
=
"
https
:
/
/
example
.
com
"
;
const
BASIC_FORM_PAGE_PATH
=
DIRECTORY_PATH
+
"
form_basic
.
html
"
;
add_task
(
async
function
test_initialize
(
)
{
let
autocompletePopup
=
document
.
getElementById
(
"
PopupAutoComplete
"
)
;
Services
.
prefs
.
setBoolPref
(
"
signon
.
autofillForms
"
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
signon
.
autofillForms
"
)
;
autocompletePopup
.
removeEventListener
(
"
popupshowing
"
autocompleteUnexpectedPopupShowing
)
;
}
)
;
for
(
let
login
of
loginList
(
)
)
{
Services
.
logins
.
addLogin
(
login
)
;
}
autocompletePopup
.
addEventListener
(
"
popupshowing
"
autocompleteUnexpectedPopupShowing
)
;
}
)
;
add_task
(
async
function
test_context_menu_username
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
BASIC_FORM_PAGE_PATH
}
async
function
(
browser
)
{
await
openContextMenu
(
browser
"
#
form
-
basic
-
username
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
Assert
.
equal
(
contextMenu
.
state
"
open
"
"
Context
menu
opened
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_context_menu_password
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
BASIC_FORM_PAGE_PATH
}
async
function
(
browser
)
{
await
openContextMenu
(
browser
"
#
form
-
basic
-
password
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
Assert
.
equal
(
contextMenu
.
state
"
open
"
"
Context
menu
opened
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
function
autocompleteUnexpectedPopupShowing
(
event
)
{
Assert
.
ok
(
false
"
Autocomplete
shouldn
'
t
appear
"
)
;
event
.
target
.
hidePopup
(
)
;
}
async
function
openContextMenu
(
browser
loginInput
)
{
let
eventDetails1
=
{
type
:
"
mousedown
"
button
:
2
}
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
loginInput
eventDetails1
browser
)
;
let
contextMenuShownPromise
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
)
;
let
eventDetails
=
{
type
:
"
contextmenu
"
button
:
2
}
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
loginInput
eventDetails
browser
)
;
await
contextMenuShownPromise
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
}
function
loginList
(
)
{
return
[
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
"
username
"
password
:
"
password
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
"
username2
"
password
:
"
password2
"
}
)
]
;
}
