ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginManagerParent
.
jsm
"
this
)
;
const
testUrlPath
=
"
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
passwordmgr
/
test
/
browser
/
"
;
function
waitForInsecureLoginFormsStateChange
(
browser
count
)
{
return
BrowserTestUtils
.
waitForEvent
(
browser
"
InsecureLoginFormsStateChange
"
false
(
)
=
>
-
-
count
=
=
0
)
;
}
add_task
(
async
function
test_simple
(
)
{
for
(
let
scheme
of
[
"
http
"
"
https
"
]
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
scheme
+
testUrlPath
+
"
form_basic
.
html
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
Promise
.
all
(
[
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
BrowserTestUtils
.
browserLoaded
(
browser
)
waitForInsecureLoginFormsStateChange
(
browser
2
)
]
)
;
Assert
.
equal
(
LoginManagerParent
.
hasInsecureLoginForms
(
browser
)
scheme
=
=
"
http
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
test_subframe_navigation
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
mixed_content
.
block_active_content
"
false
]
]
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
https
"
+
testUrlPath
+
"
insecure_test
.
html
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
Promise
.
all
(
[
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
BrowserTestUtils
.
browserLoaded
(
browser
)
waitForInsecureLoginFormsStateChange
(
browser
3
)
]
)
;
Assert
.
ok
(
LoginManagerParent
.
hasInsecureLoginForms
(
browser
)
)
;
let
promiseSubframeReady
=
Promise
.
all
(
[
BrowserTestUtils
.
browserLoaded
(
browser
true
)
waitForInsecureLoginFormsStateChange
(
browser
2
)
]
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
content
.
document
.
getElementById
(
"
test
-
iframe
"
)
.
contentDocument
.
getElementById
(
"
test
-
link
"
)
.
click
(
)
;
}
)
;
await
promiseSubframeReady
;
Assert
.
ok
(
!
LoginManagerParent
.
hasInsecureLoginForms
(
browser
)
)
;
let
promise
=
waitForInsecureLoginFormsStateChange
(
browser
1
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
content
.
document
.
getElementById
(
"
test
-
iframe
"
)
.
contentWindow
.
history
.
back
(
)
;
}
)
;
await
promise
;
Assert
.
ok
(
LoginManagerParent
.
hasInsecureLoginForms
(
browser
)
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
