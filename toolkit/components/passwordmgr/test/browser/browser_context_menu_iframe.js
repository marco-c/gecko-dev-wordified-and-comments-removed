"
use
strict
"
;
const
TEST_ORIGIN
=
"
https
:
/
/
example
.
com
"
;
const
IFRAME_PAGE_PATH
=
"
/
browser
/
toolkit
/
components
/
passwordmgr
/
test
/
browser
/
form_basic_iframe
.
html
"
;
add_task
(
async
function
test_initialize
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
autofillForms
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
signon
.
schemeUpgrades
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
signon
.
autofillForms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
signon
.
schemeUpgrades
"
)
;
}
)
;
for
(
let
login
of
loginList
(
)
)
{
Services
.
logins
.
addLogin
(
login
)
;
}
}
)
;
add_task
(
async
function
test_context_menu_iframe_fill
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
IFRAME_PAGE_PATH
}
async
function
(
browser
)
{
await
openPasswordContextMenu
(
browser
"
#
form
-
basic
-
password
"
null
browser
.
browsingContext
.
getChildren
(
)
[
0
]
)
;
let
popupMenu
=
document
.
getElementById
(
"
fill
-
login
-
popup
"
)
;
function
promiseFrameInputValue
(
name
)
{
return
SpecialPowers
.
spawn
(
browser
.
browsingContext
.
getChildren
(
)
[
0
]
[
name
]
function
(
inputname
)
{
return
content
.
document
.
getElementById
(
inputname
)
.
value
;
}
)
;
}
let
usernameOriginalValue
=
await
promiseFrameInputValue
(
"
form
-
basic
-
username
"
)
;
let
passwordChangedPromise
=
SpecialPowers
.
spawn
(
browser
.
browsingContext
.
getChildren
(
)
[
0
]
[
]
function
(
inputname
)
{
return
new
Promise
(
resolve
=
>
{
let
passwordInput
=
content
.
document
.
getElementById
(
"
form
-
basic
-
password
"
)
;
passwordInput
.
addEventListener
(
"
input
"
(
)
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
}
)
;
await
new
Promise
(
resolve
=
>
{
SimpleTest
.
executeSoon
(
resolve
)
;
}
)
;
let
firstLoginItem
=
popupMenu
.
getElementsByClassName
(
"
context
-
login
-
item
"
)
[
0
]
;
firstLoginItem
.
doCommand
(
)
;
await
passwordChangedPromise
;
let
login
=
getLoginFromUsername
(
firstLoginItem
.
label
)
;
let
passwordValue
=
await
promiseFrameInputValue
(
"
form
-
basic
-
password
"
)
;
is
(
login
.
password
passwordValue
"
Password
filled
and
correct
.
"
)
;
let
usernameNewValue
=
await
promiseFrameInputValue
(
"
form
-
basic
-
username
"
)
;
is
(
usernameOriginalValue
usernameNewValue
"
Username
value
was
not
changed
.
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_context_menu_iframe_sandbox
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
IFRAME_PAGE_PATH
}
async
function
(
browser
)
{
await
openPasswordContextMenu
(
browser
"
#
form
-
basic
-
password
"
function
checkDisabled
(
)
{
let
popupHeader
=
document
.
getElementById
(
"
fill
-
login
"
)
;
ok
(
popupHeader
.
hidden
"
Check
that
the
Fill
Login
menu
item
is
hidden
"
)
;
return
false
;
}
browser
.
browsingContext
.
getChildren
(
)
[
1
]
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_context_menu_iframe_sandbox_same_origin
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
IFRAME_PAGE_PATH
}
async
function
(
browser
)
{
await
openPasswordContextMenu
(
browser
"
#
form
-
basic
-
password
"
function
checkDisabled
(
)
{
let
popupHeader
=
document
.
getElementById
(
"
fill
-
login
"
)
;
ok
(
!
popupHeader
.
hidden
"
Check
that
the
Fill
Login
menu
item
is
visible
"
)
;
ok
(
!
popupHeader
.
disabled
"
Check
that
the
Fill
Login
menu
item
is
disabled
"
)
;
return
false
;
}
browser
.
browsingContext
.
getChildren
(
)
[
2
]
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
function
getLoginFromUsername
(
username
)
{
return
loginList
(
)
.
find
(
login
=
>
login
.
username
=
=
username
)
;
}
function
loginList
(
)
{
return
[
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
"
username
"
password
:
"
password
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
http
:
/
/
example
.
com
"
formActionOrigin
:
"
http
:
/
/
example
.
com
"
username
:
"
username
"
password
:
"
password
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
http
:
/
/
example
.
com
"
formActionOrigin
:
"
http
:
/
/
example
.
com
"
username
:
"
username1
"
password
:
"
password1
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
"
username2
"
password
:
"
password2
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
http
:
/
/
example
.
org
"
formActionOrigin
:
"
http
:
/
/
example
.
org
"
username
:
"
username
-
cross
-
origin
"
password
:
"
password
-
cross
-
origin
"
}
)
]
;
}
