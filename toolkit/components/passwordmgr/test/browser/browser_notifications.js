add_task
(
function
*
test_save_change
(
)
{
let
testCases
=
[
{
username
:
"
username
"
password
:
"
password
"
}
{
username
:
"
"
password
:
"
password
"
}
{
username
:
"
username
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
}
{
username
:
"
"
oldPassword
:
"
password
"
password
:
"
newPassword
"
}
]
;
for
(
let
{
username
oldPassword
password
}
of
testCases
)
{
if
(
oldPassword
)
{
Services
.
logins
.
addLogin
(
LoginTestUtils
.
testData
.
formLogin
(
{
hostname
:
"
https
:
/
/
example
.
com
"
formSubmitURL
:
"
https
:
/
/
example
.
com
"
username
password
:
oldPassword
}
)
)
;
}
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
"
+
"
passwordmgr
/
test
/
browser
/
form_basic
.
html
"
}
function
*
(
browser
)
{
let
promiseShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
(
event
)
=
>
event
.
target
=
=
PopupNotifications
.
panel
)
;
yield
ContentTask
.
spawn
(
browser
{
username
password
}
function
*
(
{
username
password
}
)
{
let
doc
=
content
.
document
;
doc
.
getElementById
(
"
form
-
basic
-
username
"
)
.
value
=
username
;
doc
.
getElementById
(
"
form
-
basic
-
password
"
)
.
value
=
password
;
doc
.
getElementById
(
"
form
-
basic
"
)
.
submit
(
)
;
}
)
;
yield
promiseShown
;
let
notificationElement
=
PopupNotifications
.
panel
.
childNodes
[
0
]
;
notificationElement
.
querySelector
(
"
#
password
-
notification
-
password
"
)
.
clientTop
;
Assert
.
equal
(
notificationElement
.
querySelector
(
"
#
password
-
notification
-
username
"
)
.
value
username
)
;
Assert
.
equal
(
notificationElement
.
querySelector
(
"
#
password
-
notification
-
password
"
)
.
value
password
)
;
let
expectedNotification
=
oldPassword
?
"
modifyLogin
"
:
"
addLogin
"
;
let
promiseLogin
=
TestUtils
.
topicObserved
(
"
passwordmgr
-
storage
-
changed
"
(
_
data
)
=
>
data
=
=
expectedNotification
)
;
notificationElement
.
button
.
doCommand
(
)
;
let
[
result
]
=
yield
promiseLogin
;
let
login
=
oldPassword
?
result
.
QueryInterface
(
Ci
.
nsIArray
)
.
queryElementAt
(
1
Ci
.
nsILoginInfo
)
:
result
.
QueryInterface
(
Ci
.
nsILoginInfo
)
;
Assert
.
equal
(
login
.
username
username
)
;
Assert
.
equal
(
login
.
password
password
)
;
}
)
;
Services
.
logins
.
removeAllLogins
(
)
;
}
}
)
;
