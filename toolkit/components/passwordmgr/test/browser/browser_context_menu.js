"
use
strict
"
;
const
TEST_HOSTNAME
=
"
https
:
/
/
example
.
com
"
;
const
MULTIPLE_FORMS_PAGE_PATH
=
"
/
browser
/
toolkit
/
components
/
passwordmgr
/
test
/
browser
/
multiple_forms
.
html
"
;
add_task
(
function
*
test_initialize
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
autofillForms
"
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
signon
.
autofillForms
"
)
;
Services
.
prefs
.
clearUserPref
(
"
signon
.
schemeUpgrades
"
)
;
}
)
;
for
(
let
login
of
loginList
(
)
)
{
Services
.
logins
.
addLogin
(
login
)
;
}
}
)
;
add_task
(
function
*
test_context_menu_populate_password_noSchemeUpgrades
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
schemeUpgrades
"
false
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_HOSTNAME
+
MULTIPLE_FORMS_PAGE_PATH
}
function
*
(
browser
)
{
let
passwordInput
=
browser
.
contentWindow
.
document
.
getElementById
(
"
test
-
password
-
1
"
)
;
yield
openPasswordContextMenu
(
browser
passwordInput
)
;
let
popupMenu
=
document
.
getElementById
(
"
fill
-
login
-
popup
"
)
;
checkMenu
(
popupMenu
2
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
add_task
(
function
*
test_context_menu_populate_password_schemeUpgrades
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
schemeUpgrades
"
true
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_HOSTNAME
+
MULTIPLE_FORMS_PAGE_PATH
}
function
*
(
browser
)
{
let
passwordInput
=
browser
.
contentWindow
.
document
.
getElementById
(
"
test
-
password
-
1
"
)
;
yield
openPasswordContextMenu
(
browser
passwordInput
)
;
let
popupMenu
=
document
.
getElementById
(
"
fill
-
login
-
popup
"
)
;
checkMenu
(
popupMenu
3
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
add_task
(
function
*
test_context_menu_populate_username_with_password_noSchemeUpgrades
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
schemeUpgrades
"
false
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_HOSTNAME
+
"
/
browser
/
toolkit
/
components
/
"
+
"
passwordmgr
/
test
/
browser
/
multiple_forms
.
html
"
}
function
*
(
browser
)
{
let
passwordInput
=
browser
.
contentWindow
.
document
.
getElementById
(
"
test
-
username
-
2
"
)
;
yield
openPasswordContextMenu
(
browser
passwordInput
)
;
let
popupMenu
=
document
.
getElementById
(
"
fill
-
login
-
popup
"
)
;
checkMenu
(
popupMenu
2
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
add_task
(
function
*
test_context_menu_populate_username_with_password_schemeUpgrades
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
schemeUpgrades
"
true
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_HOSTNAME
+
"
/
browser
/
toolkit
/
components
/
"
+
"
passwordmgr
/
test
/
browser
/
multiple_forms
.
html
"
}
function
*
(
browser
)
{
let
passwordInput
=
browser
.
contentWindow
.
document
.
getElementById
(
"
test
-
username
-
2
"
)
;
yield
openPasswordContextMenu
(
browser
passwordInput
)
;
let
popupMenu
=
document
.
getElementById
(
"
fill
-
login
-
popup
"
)
;
checkMenu
(
popupMenu
3
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
}
)
;
}
)
;
add_task
(
function
*
test_context_menu_password_fill
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
schemeUpgrades
"
true
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_HOSTNAME
+
MULTIPLE_FORMS_PAGE_PATH
}
function
*
(
browser
)
{
let
testForms
=
browser
.
contentWindow
.
document
.
getElementsByClassName
(
"
test
-
form
"
)
;
for
(
let
form
of
testForms
)
{
let
usernameInputList
=
form
.
querySelectorAll
(
"
input
[
type
=
'
password
'
]
"
)
;
info
(
"
Testing
form
:
"
+
form
.
getAttribute
(
"
description
"
)
)
;
for
(
let
passwordField
of
usernameInputList
)
{
info
(
"
Testing
password
field
:
"
+
passwordField
.
id
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
menuItemStatus
=
form
.
getAttribute
(
"
menuitemStatus
"
)
;
yield
openPasswordContextMenu
(
browser
passwordField
(
)
=
>
{
let
popupHeader
=
document
.
getElementById
(
"
fill
-
login
"
)
;
if
(
passwordField
.
disabled
|
|
passwordField
.
readOnly
)
{
Assert
.
ok
(
!
popupHeader
.
hidden
"
Popup
menu
is
not
hidden
.
"
)
;
Assert
.
ok
(
popupHeader
.
disabled
"
Popup
menu
is
disabled
.
"
)
;
contextMenu
.
hidePopup
(
)
;
return
false
;
}
return
true
;
}
)
;
if
(
contextMenu
.
state
!
=
"
open
"
)
{
continue
;
}
let
unchangedFields
=
form
.
querySelectorAll
(
'
input
:
not
(
#
'
+
passwordField
.
id
+
'
)
'
)
;
yield
assertContextMenuFill
(
form
null
passwordField
unchangedFields
1
)
;
Assert
.
equal
(
passwordField
.
value
"
password1
"
"
Check
upgraded
login
was
actually
used
"
)
;
contextMenu
.
hidePopup
(
)
;
}
}
}
)
;
}
)
;
add_task
(
function
*
test_context_menu_username_login_fill
(
)
{
Services
.
prefs
.
setBoolPref
(
"
signon
.
schemeUpgrades
"
true
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_HOSTNAME
+
MULTIPLE_FORMS_PAGE_PATH
}
function
*
(
browser
)
{
let
testForms
=
browser
.
contentWindow
.
document
.
getElementsByClassName
(
"
test
-
form
"
)
;
for
(
let
form
of
testForms
)
{
let
usernameInputList
=
form
.
querySelectorAll
(
"
input
[
type
=
'
text
'
]
"
)
;
info
(
"
Testing
form
:
"
+
form
.
getAttribute
(
"
description
"
)
)
;
for
(
let
usernameField
of
usernameInputList
)
{
info
(
"
Testing
username
field
:
"
+
usernameField
.
id
)
;
let
passwordField
=
form
.
querySelector
(
"
input
[
type
=
'
password
'
]
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
menuItemStatus
=
form
.
getAttribute
(
"
menuitemStatus
"
)
;
yield
openPasswordContextMenu
(
browser
usernameField
(
)
=
>
{
let
popupHeader
=
document
.
getElementById
(
"
fill
-
login
"
)
;
if
(
!
passwordField
|
|
usernameField
.
disabled
|
|
usernameField
.
readOnly
|
|
passwordField
.
disabled
|
|
passwordField
.
readOnly
)
{
if
(
!
passwordField
)
{
Assert
.
ok
(
popupHeader
.
hidden
"
Popup
menu
is
hidden
.
"
)
;
}
else
{
Assert
.
ok
(
!
popupHeader
.
hidden
"
Popup
menu
is
not
hidden
.
"
)
;
Assert
.
ok
(
popupHeader
.
disabled
"
Popup
menu
is
disabled
.
"
)
;
}
contextMenu
.
hidePopup
(
)
;
return
false
;
}
return
true
;
}
)
;
if
(
contextMenu
.
state
!
=
"
open
"
)
{
continue
;
}
let
unchangedFields
=
form
.
querySelectorAll
(
'
input
:
not
(
#
'
+
usernameField
.
id
+
'
)
:
not
(
#
'
+
passwordField
.
id
+
'
)
'
)
;
yield
assertContextMenuFill
(
form
usernameField
passwordField
unchangedFields
1
)
;
if
(
!
passwordField
.
hasAttribute
(
"
expectedFail
"
)
)
{
Assert
.
equal
(
passwordField
.
value
"
password1
"
"
Check
upgraded
login
was
actually
used
"
)
;
}
contextMenu
.
hidePopup
(
)
;
}
}
}
)
;
}
)
;
function
*
openPasswordContextMenu
(
browser
passwordInput
assertCallback
=
null
)
{
let
contextMenuShownPromise
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
)
;
let
eventDetails
=
{
type
:
"
contextmenu
"
button
:
2
}
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
passwordInput
eventDetails
browser
)
;
yield
contextMenuShownPromise
;
if
(
assertCallback
)
{
if
(
!
assertCallback
.
call
(
)
)
{
return
;
}
}
let
popupHeader
=
document
.
getElementById
(
"
fill
-
login
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
popupHeader
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
popupHeader
{
}
)
;
yield
popupShownPromise
;
}
function
*
assertContextMenuFill
(
form
usernameField
passwordField
unchangedFields
loginIndex
)
{
let
popupMenu
=
document
.
getElementById
(
"
fill
-
login
-
popup
"
)
;
if
(
unchangedFields
.
length
)
{
for
(
let
field
of
unchangedFields
)
{
field
.
setAttribute
(
"
original
-
value
"
field
.
value
)
;
}
}
let
loginItem
=
popupMenu
.
getElementsByClassName
(
"
context
-
login
-
item
"
)
[
loginIndex
]
;
loginItem
.
doCommand
(
)
;
yield
BrowserTestUtils
.
waitForEvent
(
form
"
input
"
"
Username
input
value
changed
"
)
;
let
login
=
getLoginFromUsername
(
loginItem
.
label
)
;
if
(
usernameField
&
&
usernameField
.
getAttribute
(
"
expectedFail
"
)
=
=
null
)
{
Assert
.
equal
(
login
.
username
usernameField
.
value
"
Username
filled
and
correct
.
"
)
;
}
if
(
passwordField
&
&
passwordField
.
getAttribute
(
"
expectedFail
"
)
=
=
null
)
{
Assert
.
equal
(
passwordField
.
value
login
.
password
"
Password
filled
and
correct
.
"
)
;
}
if
(
unchangedFields
.
length
)
{
Assert
.
ok
(
(
)
=
>
{
for
(
let
field
of
unchangedFields
)
{
if
(
field
.
value
!
=
field
.
getAttribute
(
"
original
-
value
"
)
)
{
return
false
;
}
}
return
true
;
}
"
Other
fields
were
not
changed
.
"
)
;
}
}
function
checkMenu
(
contextMenu
expectedCount
)
{
let
logins
=
loginList
(
)
.
filter
(
login
=
>
{
return
LoginHelper
.
isOriginMatching
(
login
.
hostname
TEST_HOSTNAME
{
schemeUpgrades
:
Services
.
prefs
.
getBoolPref
(
"
signon
.
schemeUpgrades
"
)
}
)
;
}
)
;
let
menuitems
=
[
.
.
.
contextMenu
.
getElementsByClassName
(
"
context
-
login
-
item
"
)
]
;
Assert
.
equal
(
menuitems
.
length
expectedCount
"
Expected
number
of
menu
items
"
)
;
Assert
.
ok
(
logins
.
every
(
l
=
>
menuitems
.
some
(
m
=
>
l
.
username
=
=
m
.
label
)
)
"
Every
login
have
an
item
at
the
menu
.
"
)
;
}
function
getLoginFromUsername
(
username
)
{
return
loginList
(
)
.
find
(
login
=
>
login
.
username
=
=
username
)
;
}
function
loginList
(
)
{
return
[
LoginTestUtils
.
testData
.
formLogin
(
{
hostname
:
"
https
:
/
/
example
.
com
"
formSubmitURL
:
"
https
:
/
/
example
.
com
"
username
:
"
username
"
password
:
"
password
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
hostname
:
"
http
:
/
/
example
.
com
"
formSubmitURL
:
"
http
:
/
/
example
.
com
"
username
:
"
username
"
password
:
"
password
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
hostname
:
"
http
:
/
/
example
.
com
"
formSubmitURL
:
"
http
:
/
/
example
.
com
"
username
:
"
username1
"
password
:
"
password1
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
hostname
:
"
https
:
/
/
example
.
com
"
formSubmitURL
:
"
https
:
/
/
example
.
com
"
username
:
"
username2
"
password
:
"
password2
"
}
)
LoginTestUtils
.
testData
.
formLogin
(
{
hostname
:
"
http
:
/
/
example
.
org
"
formSubmitURL
:
"
http
:
/
/
example
.
org
"
username
:
"
username
-
cross
-
origin
"
password
:
"
password
-
cross
-
origin
"
}
)
]
;
}
