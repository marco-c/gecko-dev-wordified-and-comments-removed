ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginManagerParent
.
jsm
"
this
)
;
function
registerConverter
(
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
this
)
;
function
TestStreamConverter
(
)
{
}
TestStreamConverter
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
5f01d6ef
-
c090
-
45a4
-
b3e5
-
940d64713eb7
}
"
)
contractID
:
"
mozilla
.
org
/
streamconv
;
1
?
from
=
test
/
content
&
to
=
*
/
*
"
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIRequestObserver
Ci
.
nsIStreamListener
Ci
.
nsIStreamConverter
]
)
convert
(
)
{
}
asyncConvertData
(
aFromType
aToType
aListener
aCtxt
)
{
this
.
listener
=
aListener
;
}
onStartRequest
(
aRequest
aContext
)
{
let
channel
=
NetUtil
.
newChannel
(
{
uri
:
"
resource
:
/
/
testing
-
common
/
form_basic
.
html
"
loadUsingSystemPrincipal
:
true
}
)
;
channel
.
originalURI
=
aRequest
.
QueryInterface
(
Ci
.
nsIChannel
)
.
URI
;
channel
.
loadGroup
=
aRequest
.
loadGroup
;
channel
.
owner
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
channel
.
URI
{
}
)
;
channel
.
asyncOpen2
(
this
.
listener
)
;
}
onStopRequest
(
)
{
}
onDataAvailable
(
)
{
}
}
;
let
factory
=
XPCOMUtils
.
_getFactory
(
TestStreamConverter
)
;
let
registrar
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
TestStreamConverter
.
prototype
.
classID
"
"
TestStreamConverter
.
prototype
.
contractID
factory
)
;
this
.
cleanupFunction
=
function
(
)
{
registrar
.
unregisterFactory
(
TestStreamConverter
.
prototype
.
classID
factory
)
;
}
;
}
function
waitForInsecureLoginFormsStateChange
(
browser
count
)
{
return
BrowserTestUtils
.
waitForEvent
(
browser
"
InsecureLoginFormsStateChange
"
false
(
)
=
>
-
-
count
=
=
0
)
;
}
add_task
(
async
function
test_streamConverter
(
)
{
let
originalBrowser
=
gBrowser
.
selectedTab
.
linkedBrowser
;
await
ContentTask
.
spawn
(
originalBrowser
null
registerConverter
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
"
+
"
passwordmgr
/
test
/
browser
/
streamConverter_content
.
sjs
"
{
sameProcessAsFrameLoader
:
originalBrowser
.
frameLoader
}
)
;
let
browser
=
tab
.
linkedBrowser
;
await
Promise
.
all
(
[
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
BrowserTestUtils
.
browserLoaded
(
browser
)
waitForInsecureLoginFormsStateChange
(
browser
2
)
]
)
;
Assert
.
ok
(
!
LoginManagerParent
.
hasInsecureLoginForms
(
browser
)
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
ContentTask
.
spawn
(
originalBrowser
null
async
function
(
)
{
this
.
cleanupFunction
(
)
;
}
)
;
}
)
;
