"
use
strict
"
;
const
TEST_ORIGIN
=
"
https
:
/
/
example
.
com
"
;
const
BASIC_FORM_PAGE_PATH
=
DIRECTORY_PATH
+
"
form_basic
.
html
"
;
add_task
(
async
function
test_doorhanger_dismissal_un
(
)
{
let
url
=
TEST_ORIGIN
+
BASIC_FORM_PAGE_PATH
;
const
formProcessedPromise
=
listenForTestNotification
(
"
FormProcessed
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
test_un_value_as_ccnumber
(
browser
)
{
await
formProcessedPromise
;
let
passwordFilledPromise
=
listenForTestNotification
(
"
PasswordEditedOrGenerated
"
)
;
await
changeContentFormValues
(
browser
{
"
#
form
-
basic
-
password
"
:
"
123
"
"
#
form
-
basic
-
username
"
:
"
4111111111111111
"
}
)
;
info
(
"
Waiting
for
passwordFilledPromise
"
)
;
await
passwordFilledPromise
;
await
cleanupDoorhanger
(
)
;
await
cleanupPasswordNotifications
(
)
;
await
clearMessageCache
(
browser
)
;
let
processedPromise
=
listenForTestNotification
(
"
ShowDoorhanger
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
form
-
basic
-
submit
"
)
.
click
(
)
;
}
)
;
info
(
"
Waiting
for
FormSubmit
"
)
;
await
processedPromise
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
save
"
)
;
Assert
.
ok
(
notif
"
got
notification
popup
"
)
;
Assert
.
ok
(
notif
.
dismissed
"
notification
popup
was
automatically
dismissed
"
)
;
await
cleanupDoorhanger
(
notif
)
;
}
)
;
}
)
;
add_task
(
async
function
test_doorhanger_dismissal_pw
(
)
{
let
url
=
TEST_ORIGIN
+
BASIC_FORM_PAGE_PATH
;
const
formProcessedPromise
=
listenForTestNotification
(
"
FormProcessed
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
test_pw_value_as_ccnumber
(
browser
)
{
await
formProcessedPromise
;
let
passwordFilledPromise
=
listenForTestNotification
(
"
PasswordEditedOrGenerated
"
)
;
await
changeContentFormValues
(
browser
{
"
#
form
-
basic
-
password
"
:
"
4111111111111111
"
"
#
form
-
basic
-
username
"
:
"
aaa
"
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
form
-
basic
-
password
"
)
.
setAttribute
(
"
autocomplete
"
"
cc
-
number
"
)
;
}
)
;
await
passwordFilledPromise
;
await
cleanupDoorhanger
(
)
;
await
cleanupPasswordNotifications
(
)
;
await
clearMessageCache
(
browser
)
;
let
processedPromise
=
listenForTestNotification
(
"
ShowDoorhanger
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
form
-
basic
-
submit
"
)
.
click
(
)
;
}
)
;
await
processedPromise
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
save
"
)
;
Assert
.
ok
(
notif
"
got
notification
popup
"
)
;
Assert
.
ok
(
notif
.
dismissed
"
notification
popup
was
automatically
dismissed
"
)
;
await
cleanupDoorhanger
(
notif
)
;
}
)
;
}
)
;
add_task
(
async
function
test_doorhanger_shown_on_un_with_invalid_ccnumber
(
)
{
let
url
=
TEST_ORIGIN
+
BASIC_FORM_PAGE_PATH
;
const
formProcessedPromise
=
listenForTestNotification
(
"
FormProcessed
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
test_un_with_invalid_cc_number
(
browser
)
{
await
formProcessedPromise
;
let
passwordFilledPromise
=
listenForTestNotification
(
"
PasswordEditedOrGenerated
"
)
;
await
changeContentFormValues
(
browser
{
"
#
form
-
basic
-
password
"
:
"
411
"
"
#
form
-
basic
-
username
"
:
"
1234123412341234
"
}
)
;
await
passwordFilledPromise
;
await
cleanupDoorhanger
(
)
;
await
cleanupPasswordNotifications
(
)
;
await
clearMessageCache
(
browser
)
;
let
processedPromise
=
listenForTestNotification
(
"
ShowDoorhanger
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
form
-
basic
-
submit
"
)
.
click
(
)
;
}
)
;
await
processedPromise
;
let
notif
=
await
getCaptureDoorhangerThatMayOpen
(
"
password
-
save
"
)
;
Assert
.
ok
(
notif
"
got
notification
popup
"
)
;
Assert
.
ok
(
!
notif
.
dismissed
"
notification
popup
was
not
automatically
dismissed
"
)
;
await
cleanupDoorhanger
(
notif
)
;
}
)
;
}
)
;
add_task
(
async
function
test_doorhanger_dismissal_on_change
(
)
{
let
url
=
TEST_ORIGIN
+
BASIC_FORM_PAGE_PATH
;
const
formProcessedPromise
=
listenForTestNotification
(
"
FormProcessed
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
test_change_in_pw
(
browser
)
{
await
formProcessedPromise
;
let
nsLoginInfo
=
new
Components
.
Constructor
(
"
mozilla
.
org
/
login
-
manager
/
loginInfo
;
1
"
Ci
.
nsILoginInfo
"
init
"
)
;
let
login
=
new
nsLoginInfo
(
TEST_ORIGIN
TEST_ORIGIN
null
"
4111111111111111
"
"
111
"
"
form
-
basic
-
username
"
"
form
-
basic
-
password
"
)
;
await
Services
.
logins
.
addLoginAsync
(
login
)
;
let
passwordFilledPromise
=
listenForTestNotification
(
"
PasswordEditedOrGenerated
"
)
;
await
changeContentFormValues
(
browser
{
"
#
form
-
basic
-
password
"
:
"
222
"
"
#
form
-
basic
-
username
"
:
"
4111111111111111
"
}
)
;
await
passwordFilledPromise
;
await
cleanupDoorhanger
(
)
;
await
cleanupPasswordNotifications
(
)
;
await
clearMessageCache
(
browser
)
;
let
processedPromise
=
listenForTestNotification
(
"
ShowDoorhanger
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
form
-
basic
-
submit
"
)
.
click
(
)
;
}
)
;
await
processedPromise
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
change
"
)
;
Assert
.
ok
(
notif
"
got
notification
popup
"
)
;
Assert
.
ok
(
notif
.
dismissed
"
notification
popup
was
automatically
dismissed
"
)
;
await
cleanupDoorhanger
(
notif
)
;
}
)
;
}
)
;
