"
use
strict
"
;
function
*
fillTestPage
(
aBrowser
)
{
yield
ContentTask
.
spawn
(
aBrowser
null
function
*
(
)
{
content
.
document
.
getElementById
(
"
form
-
basic
-
username
"
)
.
value
=
"
my_username
"
;
content
.
document
.
getElementById
(
"
form
-
basic
-
password
"
)
.
value
=
"
my_password
"
;
}
)
;
info
(
"
fields
filled
"
)
;
}
function
*
withTestPage
(
aTaskFn
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
"
+
DIRECTORY_PATH
+
"
formless_basic
.
html
"
}
function
*
(
aBrowser
)
{
info
(
"
tab
opened
"
)
;
yield
fillTestPage
(
aBrowser
)
;
yield
*
aTaskFn
(
aBrowser
)
;
yield
new
Promise
(
resolve
=
>
SimpleTest
.
executeSoon
(
resolve
)
)
;
ok
(
!
getCaptureDoorhanger
(
"
any
"
)
"
No
doorhanger
should
be
present
"
)
;
}
)
;
}
add_task
(
function
*
setup
(
)
{
yield
SimpleTest
.
promiseFocus
(
window
)
;
}
)
;
add_task
(
function
*
test_urlbar_new_URL
(
)
{
yield
withTestPage
(
function
*
(
aBrowser
)
{
gURLBar
.
value
=
"
"
;
let
focusPromise
=
BrowserTestUtils
.
waitForEvent
(
gURLBar
"
focus
"
)
;
gURLBar
.
focus
(
)
;
yield
focusPromise
;
info
(
"
focused
"
)
;
EventUtils
.
sendString
(
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
yield
BrowserTestUtils
.
browserLoaded
(
aBrowser
false
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
}
)
;
}
)
;
add_task
(
function
*
test_urlbar_fragment_enter
(
)
{
yield
withTestPage
(
function
*
(
aBrowser
)
{
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_RIGHT
"
{
}
)
;
EventUtils
.
sendString
(
"
#
fragment
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
}
)
;
}
)
;
add_task
(
function
*
test_backButton_forwardButton
(
)
{
yield
withTestPage
(
function
*
(
aBrowser
)
{
aBrowser
.
loadURI
(
"
https
:
/
/
example
.
com
"
+
DIRECTORY_PATH
+
"
formless_basic
.
html
?
second
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
aBrowser
false
"
https
:
/
/
example
.
com
"
+
DIRECTORY_PATH
+
"
formless_basic
.
html
?
second
"
)
;
yield
fillTestPage
(
aBrowser
)
;
let
backPromise
=
BrowserTestUtils
.
browserStopped
(
aBrowser
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementById
(
"
back
-
button
"
)
{
}
)
;
yield
backPromise
;
yield
new
Promise
(
resolve
=
>
SimpleTest
.
executeSoon
(
resolve
)
)
;
ok
(
!
getCaptureDoorhanger
(
"
any
"
)
"
No
doorhanger
should
be
present
"
)
;
yield
fillTestPage
(
aBrowser
)
;
let
forwardButton
=
document
.
getElementById
(
"
forward
-
button
"
)
;
yield
BrowserTestUtils
.
waitForEvent
(
forwardButton
"
transitionend
"
)
;
info
(
"
transition
done
"
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
forwardButton
.
disabled
=
=
false
;
}
)
;
let
forwardPromise
=
BrowserTestUtils
.
browserStopped
(
aBrowser
)
;
info
(
"
click
the
forward
button
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
forwardButton
{
}
)
;
yield
forwardPromise
;
}
)
;
}
)
;
add_task
(
function
*
test_reloadButton
(
)
{
yield
withTestPage
(
function
*
(
aBrowser
)
{
let
reloadButton
=
document
.
getElementById
(
"
urlbar
-
reload
-
button
"
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
aBrowser
false
"
https
:
/
/
example
.
com
"
+
DIRECTORY_PATH
+
"
formless_basic
.
html
"
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
reloadButton
.
disabled
=
=
false
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
reloadButton
{
}
)
;
yield
loadPromise
;
}
)
;
}
)
;
add_task
(
function
*
test_back_keyboard_shortcut
(
)
{
if
(
Services
.
prefs
.
getIntPref
(
"
browser
.
backspace_action
"
)
!
=
0
)
{
ok
(
true
"
Skipped
testing
backspace
to
go
back
since
it
'
s
disabled
"
)
;
return
;
}
yield
withTestPage
(
function
*
(
aBrowser
)
{
aBrowser
.
loadURI
(
"
https
:
/
/
example
.
com
"
+
DIRECTORY_PATH
+
"
formless_basic
.
html
?
second
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
aBrowser
false
"
https
:
/
/
example
.
com
"
+
DIRECTORY_PATH
+
"
formless_basic
.
html
?
second
"
)
;
yield
fillTestPage
(
aBrowser
)
;
let
backPromise
=
BrowserTestUtils
.
browserStopped
(
aBrowser
)
;
EventUtils
.
synthesizeKey
(
"
VK_BACK_SPACE
"
{
}
)
;
yield
backPromise
;
}
)
;
}
)
;
