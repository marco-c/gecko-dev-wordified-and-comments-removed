"
use
strict
"
;
const
TEST_ORIGIN
=
"
https
:
/
/
example
.
com
"
;
const
FORM_PAGE_PATH
=
"
/
browser
/
toolkit
/
components
/
passwordmgr
/
test
/
browser
/
form_basic
.
html
"
;
const
passwordInputSelector
=
"
#
form
-
basic
-
password
"
;
const
usernameInputSelector
=
"
#
form
-
basic
-
username
"
;
let
login1
;
function
addOneLogin
(
)
{
login1
=
LoginTestUtils
.
addLogin
(
{
username
:
"
username
"
password
:
"
pass1
"
}
)
;
}
async
function
fillGeneratedPasswordFromACPopup
(
browser
passwordInputSelector
)
{
let
popup
=
document
.
getElementById
(
"
PopupAutoComplete
"
)
;
ok
(
popup
"
Got
popup
"
)
;
await
openACPopup
(
popup
browser
passwordInputSelector
)
;
let
item
=
popup
.
querySelector
(
[
originaltype
=
"
generatedPassword
"
]
)
;
ok
(
item
"
Got
generated
password
richlistitem
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
EventUtils
.
isHidden
(
item
)
;
}
"
Waiting
for
item
to
become
visible
"
)
;
let
inputEventPromise
=
ContentTask
.
spawn
(
browser
[
passwordInputSelector
]
async
function
waitForInput
(
inputSelector
)
{
let
passwordInput
=
content
.
document
.
querySelector
(
inputSelector
)
;
await
ContentTaskUtils
.
waitForEvent
(
passwordInput
"
input
"
"
Password
input
value
changed
"
)
;
}
)
;
info
(
"
Clicking
the
generated
password
AC
item
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
)
;
info
(
"
Waiting
for
the
content
input
value
to
change
"
)
;
await
inputEventPromise
;
}
async
function
checkPromptContents
(
anchorElement
browser
)
{
let
{
panel
}
=
PopupNotifications
;
let
promiseShown
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
await
SimpleTest
.
promiseFocus
(
browser
)
;
info
(
"
Clicking
on
anchor
to
show
popup
.
"
)
;
anchorElement
.
click
(
)
;
await
promiseShown
;
let
notificationElement
=
panel
.
childNodes
[
0
]
;
return
{
passwordValue
:
notificationElement
.
querySelector
(
"
#
password
-
notification
-
password
"
)
.
value
usernameValue
:
notificationElement
.
querySelector
(
"
#
password
-
notification
-
username
"
)
.
value
}
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
signon
.
generation
.
available
"
true
]
[
"
signon
.
generation
.
enabled
"
true
]
]
}
)
;
let
logins
=
Services
.
logins
.
getAllLogins
(
)
;
is
(
logins
.
length
0
"
There
are
no
logins
"
)
;
}
)
;
add_task
(
async
function
autocomplete_generated_password_auto_saved
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
FORM_PAGE_PATH
}
async
function
(
browser
)
{
await
SimpleTest
.
promiseFocus
(
browser
.
ownerGlobal
)
;
await
ContentTask
.
spawn
(
browser
[
passwordInputSelector
usernameInputSelector
]
function
prepareAndCheckForm
(
[
passwordSelector
usernameSelector
]
)
{
let
passwordInput
=
content
.
document
.
querySelector
(
passwordSelector
)
;
passwordInput
.
setAttribute
(
"
autocomplete
"
"
new
-
password
"
)
;
passwordInput
.
value
=
"
"
;
let
usernameInput
=
content
.
document
.
querySelector
(
usernameSelector
)
;
usernameInput
.
setUserInput
(
"
user1
"
)
;
}
)
;
let
storageChangedPromise
=
TestUtils
.
topicObserved
(
"
passwordmgr
-
storage
-
changed
"
(
_
data
)
=
>
data
=
=
"
addLogin
"
)
;
let
confirmationHint
=
document
.
getElementById
(
"
confirmation
-
hint
"
)
;
let
hintPromiseShown
=
BrowserTestUtils
.
waitForEvent
(
confirmationHint
"
popupshown
"
)
;
await
fillGeneratedPasswordFromACPopup
(
browser
passwordInputSelector
)
;
await
ContentTask
.
spawn
(
browser
[
passwordInputSelector
]
function
checkFinalFieldValue
(
inputSelector
)
{
let
passwordInput
=
content
.
document
.
querySelector
(
inputSelector
)
;
is
(
passwordInput
.
value
.
length
15
"
Password
field
was
filled
with
generated
password
"
)
;
}
)
;
let
[
{
username
password
}
]
=
await
storageChangedPromise
;
await
hintPromiseShown
;
Assert
.
equal
(
confirmationHint
.
anchorNode
.
id
"
password
-
notification
-
icon
"
"
Hint
should
be
anchored
on
the
password
notification
icon
"
)
;
let
hintPromiseHidden
=
BrowserTestUtils
.
waitForEvent
(
confirmationHint
"
popuphidden
"
)
;
await
hintPromiseHidden
;
is
(
username
"
"
"
Saved
login
should
have
no
username
"
)
;
is
(
password
.
length
15
"
Saved
login
should
have
generated
password
"
)
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
change
"
)
;
ok
(
notif
&
&
notif
.
dismissed
"
Dismissed
notification
was
created
"
)
;
is
(
notif
.
anchorElement
.
getAttribute
(
"
extraAttr
"
)
"
attention
"
"
Check
if
icon
has
the
extraAttr
attribute
"
)
;
let
{
passwordValue
usernameValue
}
=
await
checkPromptContents
(
notif
.
anchorElement
browser
)
;
is
(
passwordValue
.
length
15
"
Doorhanger
password
field
has
generated
15
-
char
value
"
)
;
is
(
usernameValue
"
user1
"
"
Doorhanger
username
field
was
popuplated
"
)
;
info
(
"
Hiding
popup
.
"
)
;
let
{
panel
}
=
PopupNotifications
;
let
promiseHidden
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
panel
.
hidePopup
(
)
;
await
promiseHidden
;
ok
(
!
notif
.
anchorElement
.
hasAttribute
(
"
extraAttr
"
)
"
Check
if
the
extraAttr
attribute
was
removed
"
)
;
notif
.
remove
(
)
;
}
)
;
}
)
;
add_task
(
async
function
setup_logins
(
)
{
Services
.
logins
.
removeAllLogins
(
)
;
await
addOneLogin
(
)
;
}
)
;
add_task
(
async
function
contextfill_generated_password_with_matching_logins
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
FORM_PAGE_PATH
}
async
function
(
browser
)
{
await
SimpleTest
.
promiseFocus
(
browser
.
ownerGlobal
)
;
await
ContentTask
.
spawn
(
browser
[
passwordInputSelector
]
async
function
waitForFilledFieldValue
(
inputSelector
)
{
let
passwordInput
=
content
.
document
.
querySelector
(
inputSelector
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
passwordInput
.
value
=
=
"
pass1
"
"
Password
field
got
autofilled
value
"
)
;
}
)
;
await
doFillGeneratedPasswordContextMenuItem
(
browser
passwordInputSelector
)
;
await
ContentTask
.
spawn
(
browser
[
passwordInputSelector
]
function
checkFinalFieldValue
(
inputSelector
)
{
is
(
content
.
document
.
querySelector
(
inputSelector
)
.
value
.
length
15
"
Password
field
was
filled
with
generated
password
"
)
;
}
)
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
save
"
)
;
ok
(
notif
&
&
notif
.
dismissed
"
Dismissed
notification
was
created
"
)
;
let
{
passwordValue
}
=
await
checkPromptContents
(
notif
.
anchorElement
browser
)
;
is
(
passwordValue
.
length
15
"
Doorhanger
password
field
has
generated
15
-
char
value
"
)
;
ok
(
!
notif
.
anchorElement
.
hasAttribute
(
"
extraAttr
"
)
"
Check
if
icon
has
the
extraAttr
attribute
"
)
;
notif
.
remove
(
)
;
}
)
;
}
)
;
add_task
(
async
function
contextfill_generated_password_with_username
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
FORM_PAGE_PATH
}
async
function
(
browser
)
{
await
SimpleTest
.
promiseFocus
(
browser
.
ownerGlobal
)
;
await
ContentTask
.
spawn
(
browser
[
passwordInputSelector
usernameInputSelector
]
function
checkAndSetFieldValue
(
[
passwordSelector
usernameSelector
]
)
{
is
(
content
.
document
.
querySelector
(
passwordSelector
)
.
value
"
pass1
"
"
Password
field
has
initial
autofilled
value
"
)
;
content
.
document
.
querySelector
(
usernameSelector
)
.
setUserInput
(
"
user1
"
)
;
}
)
;
await
doFillGeneratedPasswordContextMenuItem
(
browser
passwordInputSelector
)
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
save
"
)
;
ok
(
notif
&
&
notif
.
dismissed
"
Dismissed
notification
was
created
"
)
;
let
{
passwordValue
usernameValue
}
=
await
checkPromptContents
(
notif
.
anchorElement
)
;
is
(
passwordValue
.
length
15
"
Doorhanger
password
field
has
generated
15
-
char
value
"
)
;
is
(
usernameValue
"
user1
"
"
Doorhanger
username
field
has
the
username
field
value
"
)
;
ok
(
!
notif
.
anchorElement
.
hasAttribute
(
"
extraAttr
"
)
"
Check
if
icon
has
the
extraAttr
attribute
"
)
;
notif
.
remove
(
)
;
}
)
;
}
)
;
add_task
(
async
function
autocomplete_generated_password
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
FORM_PAGE_PATH
}
async
function
(
browser
)
{
await
SimpleTest
.
promiseFocus
(
browser
.
ownerGlobal
)
;
await
ContentTask
.
spawn
(
browser
[
passwordInputSelector
usernameInputSelector
]
function
prepareAndCheckForm
(
[
passwordSelector
usernameSelector
]
)
{
let
passwordInput
=
content
.
document
.
querySelector
(
passwordSelector
)
;
passwordInput
.
setAttribute
(
"
autocomplete
"
"
new
-
password
"
)
;
passwordInput
.
value
=
"
"
;
let
usernameInput
=
content
.
document
.
querySelector
(
usernameSelector
)
;
usernameInput
.
setUserInput
(
"
user1
"
)
;
}
)
;
await
fillGeneratedPasswordFromACPopup
(
browser
passwordInputSelector
)
;
await
ContentTask
.
spawn
(
browser
[
passwordInputSelector
]
function
checkFinalFieldValue
(
inputSelector
)
{
let
passwordInput
=
content
.
document
.
querySelector
(
inputSelector
)
;
is
(
passwordInput
.
value
.
length
15
"
Password
field
was
filled
with
generated
password
"
)
;
}
)
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
save
"
)
;
ok
(
notif
&
&
notif
.
dismissed
"
Dismissed
notification
was
created
"
)
;
ok
(
!
notif
.
anchorElement
.
hasAttribute
(
"
extraAttr
"
)
"
Check
if
icon
has
the
extraAttr
attribute
"
)
;
let
{
passwordValue
usernameValue
}
=
await
checkPromptContents
(
notif
.
anchorElement
browser
)
;
is
(
passwordValue
.
length
15
"
Doorhanger
password
field
has
generated
15
-
char
value
"
)
;
is
(
usernameValue
"
user1
"
"
Doorhanger
username
field
was
popuplated
"
)
;
notif
.
remove
(
)
;
}
)
;
}
)
;
add_task
(
async
function
password_change_without_username
(
)
{
const
CHANGE_FORM_PATH
=
"
/
browser
/
toolkit
/
components
/
passwordmgr
/
test
/
browser
/
form_password_change
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ORIGIN
+
CHANGE_FORM_PATH
}
async
function
(
browser
)
{
await
SimpleTest
.
promiseFocus
(
browser
.
ownerGlobal
)
;
LoginTestUtils
.
addLogin
(
{
username
:
"
username2
"
password
:
"
pass2
"
}
)
;
await
doFillGeneratedPasswordContextMenuItem
(
browser
"
#
newpass
"
)
;
let
notif
=
getCaptureDoorhanger
(
"
password
-
save
"
)
;
ok
(
notif
&
&
notif
.
dismissed
"
Dismissed
notification
was
created
"
)
;
let
{
passwordValue
usernameValue
}
=
await
checkPromptContents
(
notif
.
anchorElement
)
;
is
(
passwordValue
.
length
15
"
Doorhanger
password
field
has
generated
15
-
char
value
"
)
;
is
(
usernameValue
"
"
"
Doorhanger
username
field
has
the
username
field
value
"
)
;
ok
(
!
notif
.
anchorElement
.
hasAttribute
(
"
extraAttr
"
)
"
Check
if
icon
has
the
extraAttr
attribute
"
)
;
notif
.
remove
(
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
content
.
document
.
querySelector
(
"
#
form
"
)
.
submit
(
)
;
}
)
;
notif
=
getCaptureDoorhanger
(
"
password
-
save
"
)
;
ok
(
notif
&
&
!
notif
.
dismissed
"
Non
-
dismissed
notification
was
created
"
)
;
ok
(
!
EventUtils
.
isHidden
(
notif
.
anchorElement
)
"
Anchor
should
be
shown
"
)
;
let
{
passwordValue
:
passwordValue2
usernameValue
:
usernameValue2
}
=
await
checkPromptContents
(
notif
.
anchorElement
)
;
is
(
passwordValue2
.
length
15
"
Doorhanger
password
field
has
generated
15
-
char
value
"
)
;
is
(
usernameValue2
"
"
"
Doorhanger
username
field
has
no
value
"
)
;
notif
.
remove
(
)
;
}
)
;
}
)
;
