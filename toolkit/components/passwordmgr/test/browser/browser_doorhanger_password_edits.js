add_task
(
async
function
test_edit_password
(
)
{
let
testCases
=
[
{
description
:
"
No
saved
logins
update
password
in
doorhanger
"
usernameInPage
:
"
username
"
passwordInPage
:
"
password
"
passwordChangedTo
:
"
newPassword
"
timesUsed
:
1
}
{
description
:
"
Login
is
saved
update
password
in
doorhanger
"
usernameInPage
:
"
username
"
usernameInPageExists
:
true
passwordInPage
:
"
password
"
passwordInStorage
:
"
oldPassword
"
passwordChangedTo
:
"
newPassword
"
timesUsed
:
2
}
{
description
:
"
Change
username
in
doorhanger
to
match
saved
login
update
password
in
doorhanger
"
usernameInPage
:
"
username
"
usernameChangedTo
:
"
newUsername
"
usernameChangedToExists
:
true
passwordInPage
:
"
password
"
passwordChangedTo
:
"
newPassword
"
timesUsed
:
2
}
{
description
:
"
Change
username
in
doorhanger
to
match
saved
login
dont
update
password
in
doorhanger
"
usernameInPage
:
"
username
"
usernameChangedTo
:
"
newUsername
"
usernameChangedToExists
:
true
passwordInPage
:
"
password
"
passwordChangedTo
:
"
password
"
timesUsed
:
2
checkPasswordNotUpdated
:
true
}
{
description
:
"
Change
username
and
password
in
doorhanger
to
match
saved
empty
-
username
login
"
usernameInPage
:
"
newUsername
"
usernameChangedTo
:
"
"
usernameChangedToExists
:
true
passwordInPage
:
"
password
"
passwordChangedTo
:
"
newPassword
"
timesUsed
:
2
}
]
;
for
(
let
testCase
of
testCases
)
{
info
(
"
Test
case
:
"
+
JSON
.
stringify
(
testCase
)
)
;
if
(
testCase
.
usernameInPageExists
)
{
Services
.
logins
.
addLogin
(
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
testCase
.
usernameInPage
password
:
testCase
.
passwordInStorage
}
)
)
;
}
if
(
testCase
.
usernameChangedToExists
)
{
Services
.
logins
.
addLogin
(
LoginTestUtils
.
testData
.
formLogin
(
{
origin
:
"
https
:
/
/
example
.
com
"
formActionOrigin
:
"
https
:
/
/
example
.
com
"
username
:
testCase
.
usernameChangedTo
password
:
testCase
.
passwordChangedTo
}
)
)
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
"
+
"
passwordmgr
/
test
/
browser
/
form_basic
.
html
"
}
async
function
(
browser
)
{
let
promiseShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
event
=
>
event
.
target
=
=
PopupNotifications
.
panel
)
;
let
formSubmittedPromise
=
listenForTestNotification
(
"
FormSubmit
"
)
;
await
changeContentFormValues
(
browser
{
"
#
form
-
basic
-
username
"
:
testCase
.
usernameInPage
"
#
form
-
basic
-
password
"
:
testCase
.
passwordInPage
}
)
;
await
TestUtils
.
waitForTick
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
document
.
getElementById
(
"
form
-
basic
"
)
.
submit
(
)
;
}
)
;
await
formSubmittedPromise
;
let
notif
=
await
waitForDoorhanger
(
browser
"
any
"
)
;
await
promiseShown
;
await
updateDoorhangerInputValues
(
{
username
:
testCase
.
usernameChangedTo
password
:
testCase
.
passwordChangedTo
}
)
;
let
expectModifyLogin
=
typeof
testCase
.
usernameChangedTo
!
=
=
"
undefined
"
?
testCase
.
usernameChangedToExists
:
testCase
.
usernameInPageExists
;
let
expectedNotification
=
expectModifyLogin
?
"
modifyLogin
"
:
"
addLogin
"
;
let
promiseLogin
=
TestUtils
.
topicObserved
(
"
passwordmgr
-
storage
-
changed
"
(
_
data
)
=
>
data
=
=
expectedNotification
)
;
let
promiseHidden
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
clickDoorhangerButton
(
notif
CHANGE_BUTTON
)
;
let
[
result
]
=
await
promiseLogin
;
await
promiseHidden
;
let
login
=
expectModifyLogin
?
result
.
QueryInterface
(
Ci
.
nsIArray
)
.
queryElementAt
(
1
Ci
.
nsILoginInfo
)
:
result
.
QueryInterface
(
Ci
.
nsILoginInfo
)
;
let
meta
=
login
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
let
expectedLogin
=
{
username
:
"
usernameChangedTo
"
in
testCase
?
testCase
.
usernameChangedTo
:
testCase
.
usernameInPage
password
:
"
passwordChangedTo
"
in
testCase
?
testCase
.
passwordChangedTo
:
testCase
.
passwordInPage
timesUsed
:
testCase
.
timesUsed
}
;
if
(
testCase
.
checkPasswordNotUpdated
)
{
expectedLogin
.
usedSince
=
meta
.
timeCreated
;
expectedLogin
.
timeCreated
=
meta
.
timePasswordChanged
;
}
verifyLogins
(
[
expectedLogin
]
)
;
await
cleanupDoorhanger
(
)
;
}
)
;
Services
.
logins
.
removeAllLogins
(
)
;
}
}
)
;
