const
{
LoginTestUtils
}
=
SpecialPowers
.
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
LoginTestUtils
.
jsm
"
{
}
)
;
LoginTestUtils
.
setAssertReporter
(
SpecialPowers
.
wrapCallback
(
(
err
message
stack
)
=
>
{
SimpleTest
.
record
(
!
err
err
?
err
.
message
:
message
null
stack
)
;
}
)
)
;
const
{
LoginHelper
}
=
SpecialPowers
.
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
{
}
)
;
const
{
Services
}
=
SpecialPowers
.
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
{
LENGTH
:
GENERATED_PASSWORD_LENGTH
REGEX
:
GENERATED_PASSWORD_REGEX
}
=
LoginTestUtils
.
generation
;
const
LOGIN_FIELD_UTILS
=
LoginTestUtils
.
loginField
;
const
TESTS_DIR
=
"
/
tests
/
toolkit
/
components
/
passwordmgr
/
test
/
"
;
let
authPromptModalType
=
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
prompts
.
modalType
.
httpAuth
"
)
;
let
authPromptIsCommonDialog
=
authPromptModalType
=
=
=
SpecialPowers
.
Services
.
prompt
.
MODAL_TYPE_WINDOW
|
|
(
authPromptModalType
=
=
=
SpecialPowers
.
Services
.
prompt
.
MODAL_TYPE_TAB
&
&
SpecialPowers
.
Services
.
prefs
.
getBoolPref
(
"
prompts
.
tabChromePromptSubDialog
"
false
)
)
;
function
_
(
formNum
name
)
{
var
form
=
document
.
getElementById
(
"
form
"
+
formNum
)
;
if
(
!
form
)
{
ok
(
false
"
_
couldn
'
t
find
requested
form
"
+
formNum
)
;
return
null
;
}
var
element
=
form
.
children
.
namedItem
(
name
)
;
if
(
!
element
)
{
ok
(
false
"
_
couldn
'
t
find
requested
element
"
+
name
)
;
return
null
;
}
if
(
element
.
getAttribute
(
"
name
"
)
!
=
name
)
{
ok
(
false
"
_
got
confused
.
"
)
;
return
null
;
}
return
element
;
}
function
recreateTree
(
element
)
{
element
.
outerHTML
=
element
.
outerHTML
;
}
function
checkAutoCompleteResults
(
actualValues
expectedValues
hostname
msg
)
{
if
(
hostname
=
=
=
null
)
{
checkArrayValues
(
actualValues
expectedValues
msg
)
;
return
;
}
is
(
typeof
hostname
"
string
"
"
checkAutoCompleteResults
:
hostname
must
be
a
string
"
)
;
isnot
(
actualValues
.
length
0
"
There
should
be
items
in
the
autocomplete
popup
:
"
+
JSON
.
stringify
(
actualValues
)
)
;
let
footerResult
=
actualValues
[
actualValues
.
length
-
1
]
;
is
(
footerResult
"
View
Saved
Logins
"
"
the
footer
text
is
shown
correctly
"
)
;
if
(
actualValues
.
length
=
=
1
)
{
is
(
expectedValues
.
length
0
"
If
only
the
footer
is
present
then
there
should
be
no
expectedValues
"
)
;
info
(
"
Only
the
footer
is
present
in
the
popup
"
)
;
return
;
}
checkArrayValues
(
actualValues
.
slice
(
0
-
1
)
expectedValues
msg
)
;
}
function
getIframeBrowsingContext
(
window
iframeNumber
=
0
)
{
let
bc
=
SpecialPowers
.
wrap
(
window
)
.
windowGlobalChild
.
browsingContext
;
return
SpecialPowers
.
unwrap
(
bc
.
children
[
iframeNumber
]
)
;
}
function
setUserInputValues
(
parentNode
selectorValues
userInput
=
true
)
{
for
(
let
[
selector
newValue
]
of
Object
.
entries
(
selectorValues
)
)
{
info
(
setUserInputValues
selector
:
{
selector
}
)
;
try
{
let
field
=
SpecialPowers
.
wrap
(
parentNode
.
querySelector
(
selector
)
)
;
if
(
field
.
value
=
=
newValue
)
{
field
.
value
+
=
"
#
"
;
}
if
(
userInput
)
{
field
.
setUserInput
(
newValue
)
;
}
else
{
field
.
value
=
newValue
;
}
}
catch
(
ex
)
{
info
(
ex
.
message
)
;
info
(
ex
.
stack
)
;
ok
(
false
setUserInputValues
:
Couldn
'
t
set
value
of
field
:
{
ex
.
message
}
)
;
}
}
}
function
getSubmitMessage
(
aFilterFn
=
undefined
)
{
info
(
"
getSubmitMessage
"
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
formSubmissionProcessed
"
function
processed
(
.
.
.
args
)
{
if
(
aFilterFn
&
&
!
aFilterFn
(
.
.
.
args
)
)
{
return
;
}
info
(
"
got
formSubmissionProcessed
"
)
;
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
formSubmissionProcessed
"
processed
)
;
resolve
(
args
[
0
]
)
;
}
)
;
}
)
;
}
function
getPasswordEditedMessage
(
)
{
info
(
"
getPasswordEditedMessage
"
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
passwordEditedOrGenerated
"
function
listener
(
.
.
.
args
)
{
info
(
"
got
passwordEditedOrGenerated
"
)
;
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
passwordEditedOrGenerated
"
listener
)
;
resolve
(
args
[
0
]
)
;
}
)
;
}
)
;
}
function
checkLoginForm
(
usernameField
expectedUsername
passwordField
expectedPassword
)
{
let
formID
=
usernameField
.
parentNode
.
id
;
is
(
usernameField
.
value
expectedUsername
"
Checking
"
+
formID
+
"
username
is
:
"
+
expectedUsername
)
;
is
(
passwordField
.
value
expectedPassword
"
Checking
"
+
formID
+
"
password
is
:
"
+
expectedPassword
)
;
}
function
checkLoginFormInFrame
(
iframeBC
usernameFieldId
expectedUsername
passwordFieldId
expectedPassword
)
{
return
SpecialPowers
.
spawn
(
iframeBC
[
usernameFieldId
expectedUsername
passwordFieldId
expectedPassword
]
(
usernameFieldIdF
expectedUsernameF
passwordFieldIdF
expectedPasswordF
)
=
>
{
let
usernameField
=
this
.
content
.
document
.
getElementById
(
usernameFieldIdF
)
;
let
passwordField
=
this
.
content
.
document
.
getElementById
(
passwordFieldIdF
)
;
let
formID
=
usernameField
.
parentNode
.
id
;
Assert
.
equal
(
usernameField
.
value
expectedUsernameF
"
Checking
"
+
formID
+
"
username
is
:
"
+
expectedUsernameF
)
;
Assert
.
equal
(
passwordField
.
value
expectedPasswordF
"
Checking
"
+
formID
+
"
password
is
:
"
+
expectedPasswordF
)
;
}
)
;
}
async
function
checkUnmodifiedFormInFrame
(
bc
formNum
)
{
return
SpecialPowers
.
spawn
(
bc
[
formNum
]
formNumF
=
>
{
let
form
=
this
.
content
.
document
.
getElementById
(
form
{
formNumF
}
)
;
ok
(
form
"
Locating
form
"
+
formNumF
)
;
for
(
var
i
=
0
;
i
<
form
.
elements
.
length
;
i
+
+
)
{
var
ele
=
form
.
elements
[
i
]
;
if
(
ele
.
type
=
=
"
submit
"
|
|
ele
.
type
=
=
"
reset
"
)
{
continue
;
}
is
(
ele
.
value
ele
.
defaultValue
"
Test
to
default
value
of
field
"
+
ele
.
name
+
"
in
form
"
+
formNumF
)
;
}
}
)
;
}
async
function
checkLoginFormInFrameWithElementValues
(
browsingContext
formNum
.
.
.
values
)
{
return
SpecialPowers
.
spawn
(
browsingContext
[
formNum
values
]
function
checkFormWithElementValues
(
formNumF
valuesF
)
{
let
[
val1F
val2F
val3F
]
=
valuesF
;
let
doc
=
this
.
content
.
document
;
let
e
;
let
form
=
doc
.
getElementById
(
"
form
"
+
formNumF
)
;
ok
(
form
"
Locating
form
"
+
formNumF
)
;
let
numToCheck
=
arguments
.
length
-
1
;
if
(
!
numToCheck
-
-
)
{
return
;
}
e
=
form
.
elements
[
0
]
;
if
(
val1F
=
=
null
)
{
is
(
e
.
value
e
.
defaultValue
"
Test
default
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNumF
)
;
}
else
{
is
(
e
.
value
val1F
"
Test
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNumF
)
;
}
if
(
!
numToCheck
-
-
)
{
return
;
}
e
=
form
.
elements
[
1
]
;
if
(
val2F
=
=
null
)
{
is
(
e
.
value
e
.
defaultValue
"
Test
default
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNumF
)
;
}
else
{
is
(
e
.
value
val2F
"
Test
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNumF
)
;
}
if
(
!
numToCheck
-
-
)
{
return
;
}
e
=
form
.
elements
[
2
]
;
if
(
val3F
=
=
null
)
{
is
(
e
.
value
e
.
defaultValue
"
Test
default
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNumF
)
;
}
else
{
is
(
e
.
value
val3F
"
Test
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNumF
)
;
}
}
)
;
}
function
checkForm
(
formNum
val1
val2
val3
)
{
var
e
form
=
document
.
getElementById
(
"
form
"
+
formNum
)
;
ok
(
form
"
Locating
form
"
+
formNum
)
;
var
numToCheck
=
arguments
.
length
-
1
;
if
(
!
numToCheck
-
-
)
{
return
;
}
e
=
form
.
elements
[
0
]
;
if
(
val1
=
=
null
)
{
is
(
e
.
value
e
.
defaultValue
"
Test
default
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNum
)
;
}
else
{
is
(
e
.
value
val1
"
Test
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNum
)
;
}
if
(
!
numToCheck
-
-
)
{
return
;
}
e
=
form
.
elements
[
1
]
;
if
(
val2
=
=
null
)
{
is
(
e
.
value
e
.
defaultValue
"
Test
default
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNum
)
;
}
else
{
is
(
e
.
value
val2
"
Test
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNum
)
;
}
if
(
!
numToCheck
-
-
)
{
return
;
}
e
=
form
.
elements
[
2
]
;
if
(
val3
=
=
null
)
{
is
(
e
.
value
e
.
defaultValue
"
Test
default
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNum
)
;
}
else
{
is
(
e
.
value
val3
"
Test
value
of
field
"
+
e
.
name
+
"
in
form
"
+
formNum
)
;
}
}
function
checkUnmodifiedForm
(
formNum
)
{
var
form
=
document
.
getElementById
(
"
form
"
+
formNum
)
;
ok
(
form
"
Locating
form
"
+
formNum
)
;
for
(
var
i
=
0
;
i
<
form
.
elements
.
length
;
i
+
+
)
{
var
ele
=
form
.
elements
[
i
]
;
if
(
ele
.
type
=
=
"
submit
"
|
|
ele
.
type
=
=
"
reset
"
)
{
continue
;
}
is
(
ele
.
value
ele
.
defaultValue
"
Test
to
default
value
of
field
"
+
ele
.
name
+
"
in
form
"
+
formNum
)
;
}
}
function
registerRunTests
(
existingPasswordFieldsCount
=
0
)
{
return
new
Promise
(
resolve
=
>
{
function
onDOMContentLoaded
(
)
{
var
form
=
document
.
createElement
(
"
form
"
)
;
form
.
id
=
"
observerforcer
"
;
var
username
=
document
.
createElement
(
"
input
"
)
;
username
.
name
=
"
testuser
"
;
form
.
appendChild
(
username
)
;
var
password
=
document
.
createElement
(
"
input
"
)
;
password
.
name
=
"
testpass
"
;
password
.
type
=
"
password
"
;
form
.
appendChild
(
password
)
;
let
foundForcer
=
false
;
var
observer
=
SpecialPowers
.
wrapCallback
(
function
(
subject
topic
data
)
{
if
(
data
=
=
=
"
observerforcer
"
)
{
foundForcer
=
true
;
}
else
{
existingPasswordFieldsCount
-
-
;
}
if
(
!
foundForcer
|
|
existingPasswordFieldsCount
>
0
)
{
return
;
}
SpecialPowers
.
removeObserver
(
observer
"
passwordmgr
-
processed
-
form
"
)
;
form
.
remove
(
)
;
SimpleTest
.
executeSoon
(
(
)
=
>
{
var
runTestEvent
=
new
Event
(
"
runTests
"
)
;
window
.
dispatchEvent
(
runTestEvent
)
;
resolve
(
)
;
}
)
;
}
)
;
SpecialPowers
.
addObserver
(
observer
"
passwordmgr
-
processed
-
form
"
)
;
document
.
body
.
appendChild
(
form
)
;
}
if
(
document
.
readyState
=
=
"
complete
"
|
|
document
.
readyState
=
=
"
interactive
"
)
{
onDOMContentLoaded
(
)
;
}
else
{
window
.
addEventListener
(
"
DOMContentLoaded
"
onDOMContentLoaded
)
;
}
}
)
;
}
function
enablePrimaryPassword
(
)
{
setPrimaryPassword
(
true
)
;
}
function
disablePrimaryPassword
(
)
{
setPrimaryPassword
(
false
)
;
}
function
setPrimaryPassword
(
enable
)
{
PWMGR_COMMON_PARENT
.
sendAsyncMessage
(
"
setPrimaryPassword
"
{
enable
}
)
;
}
function
isLoggedIn
(
)
{
return
PWMGR_COMMON_PARENT
.
sendQuery
(
"
isLoggedIn
"
)
;
}
function
logoutPrimaryPassword
(
)
{
runInParent
(
function
parent_logoutPrimaryPassword
(
)
{
var
sdr
=
Cc
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Ci
.
nsISecretDecoderRing
)
;
sdr
.
logoutAndTeardown
(
)
;
}
)
;
}
function
promiseFormsProcessedInSameProcess
(
expectedCount
=
1
)
{
var
processedCount
=
0
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
onProcessedForm
(
subject
topic
data
)
{
processedCount
+
+
;
if
(
processedCount
=
=
expectedCount
)
{
info
(
{
processedCount
}
form
(
s
)
processed
)
;
SpecialPowers
.
removeObserver
(
onProcessedForm
"
passwordmgr
-
processed
-
form
"
)
;
resolve
(
SpecialPowers
.
Cu
.
waiveXrays
(
subject
)
data
)
;
}
}
SpecialPowers
.
addObserver
(
onProcessedForm
"
passwordmgr
-
processed
-
form
"
)
;
}
)
;
}
async
function
promiseFormsProcessed
(
expectedCount
=
1
)
{
var
processedCount
=
0
;
return
new
Promise
(
resolve
=
>
{
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
formProcessed
"
function
formProcessed
(
)
{
processedCount
+
+
;
if
(
processedCount
=
=
expectedCount
)
{
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
formProcessed
"
formProcessed
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
async
function
loadFormIntoWindow
(
origin
html
win
task
)
{
let
loadedPromise
=
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
load
"
function
(
event
)
{
if
(
event
.
target
.
location
.
href
.
endsWith
(
"
blank
.
html
"
)
)
{
resolve
(
)
;
}
}
{
once
:
true
}
)
;
}
)
;
let
processedPromise
=
promiseFormsProcessed
(
)
;
win
.
location
=
origin
+
"
/
tests
/
toolkit
/
components
/
passwordmgr
/
test
/
mochitest
/
blank
.
html
"
;
info
(
Waiting
for
window
to
load
for
origin
:
{
origin
}
)
;
await
loadedPromise
;
await
SpecialPowers
.
spawn
(
win
[
html
task
?
.
toString
(
)
]
function
(
contentHtml
contentTask
=
null
)
{
this
.
content
.
document
.
documentElement
.
innerHTML
=
contentHtml
;
if
(
contentTask
)
{
const
runnableTask
=
eval
(
(
(
)
=
>
{
return
(
{
contentTask
}
)
;
}
)
(
)
;
)
;
runnableTask
.
call
(
this
)
;
}
}
)
;
info
(
"
Waiting
for
the
form
to
be
processed
"
)
;
await
processedPromise
;
}
function
getTelemetryEvents
(
options
)
{
return
new
Promise
(
resolve
=
>
{
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
getTelemetryEvents
"
function
gotResult
(
events
)
{
info
(
"
CONTENT
:
getTelemetryEvents
gotResult
:
"
+
JSON
.
stringify
(
events
)
)
;
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
getTelemetryEvents
"
gotResult
)
;
resolve
(
events
)
;
}
)
;
PWMGR_COMMON_PARENT
.
sendAsyncMessage
(
"
getTelemetryEvents
"
options
)
;
}
)
;
}
function
loadRecipes
(
recipes
)
{
info
(
"
Loading
recipes
"
)
;
return
new
Promise
(
resolve
=
>
{
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
loadedRecipes
"
function
loaded
(
)
{
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
loadedRecipes
"
loaded
)
;
resolve
(
recipes
)
;
}
)
;
PWMGR_COMMON_PARENT
.
sendAsyncMessage
(
"
loadRecipes
"
recipes
)
;
}
)
;
}
function
resetRecipes
(
)
{
info
(
"
Resetting
recipes
"
)
;
return
new
Promise
(
resolve
=
>
{
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
recipesReset
"
function
reset
(
)
{
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
recipesReset
"
reset
)
;
resolve
(
)
;
}
)
;
PWMGR_COMMON_PARENT
.
sendAsyncMessage
(
"
resetRecipes
"
)
;
}
)
;
}
function
resetWebsitesWithSharedCredential
(
)
{
info
(
"
Resetting
the
'
websites
-
with
-
shared
-
credential
-
backend
'
collection
"
)
;
return
new
Promise
(
resolve
=
>
{
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
resetWebsitesWithSharedCredential
"
function
reset
(
)
{
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
resetWebsitesWithSharedCredential
"
reset
)
;
resolve
(
)
;
}
)
;
PWMGR_COMMON_PARENT
.
sendAsyncMessage
(
"
resetWebsitesWithSharedCredential
"
)
;
}
)
;
}
function
promiseStorageChanged
(
expectedChangeTypes
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
onStorageChanged
(
{
topic
data
}
)
{
let
changeType
=
expectedChangeTypes
.
shift
(
)
;
is
(
data
changeType
"
Check
expected
passwordmgr
-
storage
-
changed
type
"
)
;
if
(
expectedChangeTypes
.
length
=
=
=
0
)
{
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
storageChanged
"
onStorageChanged
)
;
resolve
(
)
;
}
}
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
storageChanged
"
onStorageChanged
)
;
}
)
;
}
function
promisePromptShown
(
expectedTopic
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
onPromptShown
(
{
topic
data
}
)
{
is
(
topic
expectedTopic
"
Check
expected
prompt
topic
"
)
;
PWMGR_COMMON_PARENT
.
removeMessageListener
(
"
promptShown
"
onPromptShown
)
;
resolve
(
)
;
}
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
promptShown
"
onPromptShown
)
;
}
)
;
}
function
runInParent
(
aFunctionOrURL
)
{
let
chromeScript
=
SpecialPowers
.
loadChromeScript
(
aFunctionOrURL
)
;
SimpleTest
.
registerCleanupFunction
(
(
)
=
>
{
chromeScript
.
destroy
(
)
;
}
)
;
return
chromeScript
;
}
function
addLoginsInParent
(
.
.
.
aLogins
)
{
let
script
=
runInParent
(
function
addLoginsInParentInner
(
)
{
addMessageListener
(
"
addLogins
"
logins
=
>
{
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
nsLoginInfo
=
Components
.
Constructor
(
"
mozilla
.
org
/
login
-
manager
/
loginInfo
;
1
"
Ci
.
nsILoginInfo
"
init
"
)
;
for
(
let
login
of
logins
)
{
let
loginInfo
=
new
nsLoginInfo
(
.
.
.
login
)
;
try
{
Services
.
logins
.
addLogin
(
loginInfo
)
;
}
catch
(
e
)
{
assert
.
ok
(
false
"
addLogin
threw
:
"
+
e
)
;
}
}
}
)
;
}
)
;
script
.
sendQuery
(
"
addLogins
"
aLogins
)
;
return
script
;
}
var
gTestDependsOnDeprecatedLogin
=
false
;
function
setFormAndWaitForFieldFilled
(
form
{
fieldSelector
fieldValue
formId
}
)
{
document
.
querySelector
(
"
#
content
"
)
.
innerHTML
=
form
;
return
SimpleTest
.
promiseWaitForCondition
(
(
)
=
>
{
let
ancestor
=
formId
?
document
.
querySelector
(
"
#
"
+
formId
)
:
document
.
documentElement
;
return
ancestor
.
querySelector
(
fieldSelector
)
.
value
=
=
fieldValue
;
}
"
Wait
for
password
manager
to
fill
form
"
)
;
}
function
runChecksAfterCommonInit
(
aFunction
=
null
)
{
SimpleTest
.
waitForExplicitFinish
(
)
;
if
(
aFunction
)
{
window
.
addEventListener
(
"
runTests
"
aFunction
)
;
PWMGR_COMMON_PARENT
.
addMessageListener
(
"
registerRunTests
"
(
)
=
>
registerRunTests
(
)
)
;
}
PWMGR_COMMON_PARENT
.
sendAsyncMessage
(
"
setupParent
"
{
testDependsOnDeprecatedLogin
:
gTestDependsOnDeprecatedLogin
}
)
;
return
PWMGR_COMMON_PARENT
;
}
const
PWMGR_COMMON_PARENT
=
runInParent
(
SimpleTest
.
getTestFileURL
(
"
pwmgr_common_parent
.
js
"
)
)
;
SimpleTest
.
registerCleanupFunction
(
(
)
=
>
{
SpecialPowers
.
flushPrefEnv
(
)
;
PWMGR_COMMON_PARENT
.
sendAsyncMessage
(
"
cleanup
"
)
;
runInParent
(
function
cleanupParent
(
)
{
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
LoginManagerParent
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginManagerParent
.
jsm
"
)
;
Services
.
logins
.
removeAllUserFacingLogins
(
)
;
let
disabledHosts
=
Services
.
logins
.
getAllDisabledHosts
(
)
;
disabledHosts
.
forEach
(
host
=
>
Services
.
logins
.
setLoginSavingEnabled
(
host
true
)
)
;
let
authMgr
=
Cc
[
"
mozilla
.
org
/
network
/
http
-
auth
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIHttpAuthManager
)
;
authMgr
.
clearAll
(
)
;
if
(
LoginManagerParent
.
_recipeManager
!
=
=
null
)
{
LoginManagerParent
.
_recipeManager
.
reset
(
)
;
}
let
chromeWin
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
chromeWin
&
&
chromeWin
.
PopupNotifications
)
{
let
notes
=
chromeWin
.
PopupNotifications
.
_currentNotifications
;
if
(
notes
.
length
)
{
dump
(
"
Removing
"
+
notes
.
length
+
"
popup
notifications
.
\
n
"
)
;
}
for
(
let
note
of
notes
)
{
note
.
remove
(
)
;
}
}
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
}
)
;
this
.
LoginManager
=
new
Proxy
(
{
}
{
get
(
target
prop
receiver
)
{
return
(
.
.
.
args
)
=
>
{
let
loginInfoIndices
=
[
]
;
let
cloneableArgs
=
args
.
map
(
(
val
index
)
=
>
{
if
(
SpecialPowers
.
call_Instanceof
(
val
SpecialPowers
.
Ci
.
nsILoginInfo
)
)
{
loginInfoIndices
.
push
(
index
)
;
return
LoginHelper
.
loginToVanillaObject
(
val
)
;
}
return
val
;
}
)
;
return
PWMGR_COMMON_PARENT
.
sendQuery
(
"
proxyLoginManager
"
{
args
:
cloneableArgs
loginInfoIndices
methodName
:
prop
}
)
;
}
;
}
}
)
;
