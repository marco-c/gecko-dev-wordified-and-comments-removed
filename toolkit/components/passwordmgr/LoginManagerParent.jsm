"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
LoginInfo
=
new
Components
.
Constructor
(
"
mozilla
.
org
/
login
-
manager
/
loginInfo
;
1
"
Ci
.
nsILoginInfo
"
init
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
URL
"
]
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AutoCompletePopup
"
"
resource
:
/
/
gre
/
modules
/
AutoCompletePopup
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DeferredTask
"
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PasswordGenerator
"
"
resource
:
/
/
gre
/
modules
/
PasswordGenerator
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
logger
=
LoginHelper
.
createLogger
(
"
LoginManagerParent
"
)
;
return
logger
.
log
.
bind
(
logger
)
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
INCLUDE_OTHER_SUBDOMAINS_IN_LOOKUP
"
"
signon
.
includeOtherSubdomainsInLookup
"
false
)
;
const
EXPORTED_SYMBOLS
=
[
"
LoginManagerParent
"
]
;
this
.
LoginManagerParent
=
{
_generatedPasswordsByPrincipalOrigin
:
new
Map
(
)
_recipeManager
:
null
_lastMPLoginCancelled
:
Math
.
NEGATIVE_INFINITY
_searchAndDedupeLogins
(
formOrigin
{
acceptDifferentSubdomains
formActionOrigin
httpRealm
ignoreActionAndRealm
}
=
{
}
)
{
let
logins
;
let
matchData
=
{
origin
:
formOrigin
schemeUpgrades
:
LoginHelper
.
schemeUpgrades
acceptDifferentSubdomains
}
;
if
(
!
ignoreActionAndRealm
)
{
if
(
typeof
formActionOrigin
!
=
"
undefined
"
)
{
matchData
.
formActionOrigin
=
formActionOrigin
;
}
else
if
(
typeof
httpRealm
!
=
"
undefined
"
)
{
matchData
.
httpRealm
=
httpRealm
;
}
}
try
{
logins
=
LoginHelper
.
searchLoginsWithObject
(
matchData
)
;
}
catch
(
e
)
{
if
(
e
.
result
=
=
Cr
.
NS_ERROR_ABORT
)
{
log
(
"
User
cancelled
master
password
prompt
.
"
)
;
this
.
_lastMPLoginCancelled
=
Date
.
now
(
)
;
return
[
]
;
}
throw
e
;
}
logins
=
LoginHelper
.
shadowHTTPLogins
(
logins
)
;
let
resolveBy
=
[
"
actionOrigin
"
"
scheme
"
"
subdomain
"
"
timePasswordChanged
"
]
;
return
LoginHelper
.
dedupeLogins
(
logins
[
"
username
"
"
password
"
]
resolveBy
formOrigin
formActionOrigin
)
;
}
receiveMessage
(
msg
)
{
let
data
=
msg
.
data
;
switch
(
msg
.
name
)
{
case
"
PasswordManager
:
findLogins
"
:
{
this
.
sendLoginDataToChild
(
data
.
formOrigin
data
.
actionOrigin
data
.
requestId
msg
.
target
.
messageManager
data
.
options
)
;
break
;
}
case
"
PasswordManager
:
findRecipes
"
:
{
let
formHost
=
new
URL
(
data
.
formOrigin
)
.
host
;
return
this
.
_recipeManager
.
getRecipesForHost
(
formHost
)
;
}
case
"
PasswordManager
:
onFormSubmit
"
:
{
this
.
onFormSubmit
(
msg
.
target
data
)
;
break
;
}
case
"
PasswordManager
:
onGeneratedPasswordFilledOrEdited
"
:
{
this
.
_onGeneratedPasswordFilledOrEdited
(
data
)
;
break
;
}
case
"
PasswordManager
:
insecureLoginFormPresent
"
:
{
this
.
setHasInsecureLoginForms
(
msg
.
target
data
.
hasInsecureLoginForms
)
;
break
;
}
case
"
PasswordManager
:
autoCompleteLogins
"
:
{
this
.
doAutocompleteSearch
(
data
msg
.
target
)
;
break
;
}
case
"
PasswordManager
:
removeLogin
"
:
{
let
login
=
LoginHelper
.
vanillaObjectToLogin
(
data
.
login
)
;
AutoCompletePopup
.
removeLogin
(
login
)
;
break
;
}
case
"
PasswordManager
:
OpenPreferences
"
:
{
LoginHelper
.
openPasswordManager
(
msg
.
target
.
ownerGlobal
{
filterString
:
msg
.
data
.
hostname
entryPoint
:
msg
.
data
.
entryPoint
}
)
;
break
;
}
}
return
undefined
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
passwordmgr
-
autosaved
-
login
-
merged
"
|
|
(
topic
=
=
"
passwordmgr
-
storage
-
changed
"
&
&
data
=
=
"
removeLogin
"
)
)
{
let
{
origin
guid
}
=
subject
;
let
generatedPW
=
this
.
_generatedPasswordsByPrincipalOrigin
.
get
(
origin
)
;
if
(
generatedPW
&
&
(
guid
=
=
generatedPW
.
storageGUID
|
|
topic
=
=
"
passwordmgr
-
autosaved
-
login
-
merged
"
)
)
{
log
(
"
Removing
storageGUID
for
generated
-
password
cache
entry
on
origin
:
"
origin
)
;
generatedPW
.
storageGUID
=
null
;
}
}
}
async
fillForm
(
{
browser
loginFormOrigin
login
inputElementIdentifier
}
)
{
let
recipes
=
[
]
;
if
(
loginFormOrigin
)
{
let
formHost
;
try
{
formHost
=
new
URL
(
loginFormOrigin
)
.
host
;
let
recipeManager
=
await
this
.
recipeParentPromise
;
recipes
=
recipeManager
.
getRecipesForHost
(
formHost
)
;
}
catch
(
ex
)
{
}
}
let
jsLogins
=
[
LoginHelper
.
loginToVanillaObject
(
login
)
]
;
browser
.
messageManager
.
sendAsyncMessage
(
"
PasswordManager
:
fillForm
"
{
inputElementIdentifier
loginFormOrigin
logins
:
jsLogins
recipes
}
)
;
}
async
sendLoginDataToChild
(
formOrigin
actionOrigin
requestId
target
{
guid
showMasterPassword
}
)
{
let
recipes
=
[
]
;
if
(
formOrigin
)
{
let
formHost
;
try
{
formHost
=
new
URL
(
formOrigin
)
.
host
;
let
recipeManager
=
await
this
.
recipeParentPromise
;
recipes
=
recipeManager
.
getRecipesForHost
(
formHost
)
;
}
catch
(
ex
)
{
}
}
if
(
!
showMasterPassword
&
&
!
Services
.
logins
.
isLoggedIn
)
{
try
{
target
.
sendAsyncMessage
(
"
PasswordManager
:
loginsFound
"
{
requestId
logins
:
[
]
recipes
}
)
;
}
catch
(
e
)
{
log
(
"
error
sending
message
to
target
"
e
)
;
}
return
;
}
if
(
Services
.
logins
.
uiBusy
)
{
log
(
"
deferring
sendLoginDataToChild
for
"
formOrigin
)
;
let
self
=
this
;
let
observer
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
observe
(
subject
topic
data
)
{
log
(
"
Got
deferred
sendLoginDataToChild
notification
:
"
topic
)
;
Services
.
obs
.
removeObserver
(
this
"
passwordmgr
-
crypto
-
login
"
)
;
Services
.
obs
.
removeObserver
(
this
"
passwordmgr
-
crypto
-
loginCanceled
"
)
;
if
(
topic
=
=
"
passwordmgr
-
crypto
-
loginCanceled
"
)
{
target
.
sendAsyncMessage
(
"
PasswordManager
:
loginsFound
"
{
requestId
logins
:
[
]
recipes
}
)
;
return
;
}
self
.
sendLoginDataToChild
(
formOrigin
actionOrigin
requestId
target
{
showMasterPassword
}
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
"
passwordmgr
-
crypto
-
login
"
)
;
Services
.
obs
.
addObserver
(
observer
"
passwordmgr
-
crypto
-
loginCanceled
"
)
;
return
;
}
let
logins
=
null
;
if
(
guid
)
{
logins
=
LoginHelper
.
searchLoginsWithObject
(
{
guid
}
)
;
}
else
{
logins
=
this
.
_searchAndDedupeLogins
(
formOrigin
{
formActionOrigin
:
actionOrigin
ignoreActionAndRealm
:
true
acceptDifferentSubdomains
:
INCLUDE_OTHER_SUBDOMAINS_IN_LOOKUP
}
)
;
}
log
(
"
sendLoginDataToChild
:
"
logins
.
length
"
deduped
logins
"
)
;
let
jsLogins
=
LoginHelper
.
loginsToVanillaObjects
(
logins
)
;
target
.
sendAsyncMessage
(
"
PasswordManager
:
loginsFound
"
{
requestId
logins
:
jsLogins
recipes
}
)
;
}
doAutocompleteSearch
(
{
autocompleteInfo
browsingContextId
formOrigin
actionOrigin
searchString
previousResult
requestId
isSecure
isPasswordField
}
target
)
{
if
(
!
Services
.
logins
.
isLoggedIn
)
{
let
timeDiff
=
Date
.
now
(
)
-
this
.
_lastMPLoginCancelled
;
if
(
timeDiff
<
this
.
_repromptTimeout
)
{
log
(
"
Not
searching
logins
for
autocomplete
since
the
master
password
"
+
prompt
was
last
cancelled
{
Math
.
round
(
timeDiff
/
1000
)
}
seconds
ago
.
)
;
target
.
messageManager
.
sendAsyncMessage
(
"
PasswordManager
:
loginsAutoCompleted
"
{
requestId
logins
:
[
]
}
)
;
return
;
}
}
let
searchStringLower
=
searchString
.
toLowerCase
(
)
;
let
logins
;
if
(
previousResult
&
&
searchStringLower
.
startsWith
(
previousResult
.
searchString
.
toLowerCase
(
)
)
)
{
log
(
"
Using
previous
autocomplete
result
"
)
;
logins
=
LoginHelper
.
vanillaObjectsToLogins
(
previousResult
.
logins
)
;
}
else
{
log
(
"
Creating
new
autocomplete
search
result
.
"
)
;
logins
=
this
.
_searchAndDedupeLogins
(
formOrigin
{
formActionOrigin
:
actionOrigin
ignoreActionAndRealm
:
true
acceptDifferentSubdomains
:
INCLUDE_OTHER_SUBDOMAINS_IN_LOOKUP
}
)
;
}
let
matchingLogins
=
logins
.
filter
(
function
(
fullMatch
)
{
let
match
=
fullMatch
.
username
;
if
(
isPasswordField
)
{
return
true
;
}
return
match
&
&
match
.
toLowerCase
(
)
.
startsWith
(
searchStringLower
)
;
}
)
;
let
generatedPassword
=
null
;
if
(
isPasswordField
&
&
autocompleteInfo
.
fieldName
=
=
"
new
-
password
"
&
&
Services
.
logins
.
getLoginSavingEnabled
(
formOrigin
)
&
&
!
PrivateBrowsingUtils
.
isWindowPrivate
(
target
.
ownerGlobal
)
)
{
generatedPassword
=
this
.
getGeneratedPassword
(
browsingContextId
)
;
}
let
jsLogins
=
LoginHelper
.
loginsToVanillaObjects
(
matchingLogins
)
;
target
.
messageManager
.
sendAsyncMessage
(
"
PasswordManager
:
loginsAutoCompleted
"
{
requestId
generatedPassword
logins
:
jsLogins
}
)
;
}
get
_browsingContextGlobal
(
)
{
return
BrowsingContext
;
}
getGeneratedPassword
(
browsingContextId
)
{
if
(
!
LoginHelper
.
enabled
|
|
!
LoginHelper
.
generationAvailable
|
|
!
LoginHelper
.
generationEnabled
)
{
return
null
;
}
let
browsingContext
=
BrowsingContext
.
get
(
browsingContextId
)
;
if
(
!
browsingContext
)
{
return
null
;
}
let
framePrincipalOrigin
=
browsingContext
.
currentWindowGlobal
.
documentPrincipal
.
origin
;
let
generatedPW
=
this
.
_generatedPasswordsByPrincipalOrigin
.
get
(
framePrincipalOrigin
)
;
if
(
generatedPW
)
{
return
generatedPW
.
value
;
}
generatedPW
=
{
edited
:
false
filled
:
false
storageGUID
:
null
value
:
PasswordGenerator
.
generatePassword
(
)
}
;
this
.
_generatedPasswordsByPrincipalOrigin
.
set
(
framePrincipalOrigin
generatedPW
)
;
return
generatedPW
.
value
;
}
_getPrompter
(
browser
openerTopWindowID
)
{
let
prompterSvc
=
Cc
[
"
mozilla
.
org
/
login
-
manager
/
prompter
;
1
"
]
.
createInstance
(
Ci
.
nsILoginManagerPrompter
)
;
prompterSvc
.
init
(
browser
.
ownerGlobal
)
;
prompterSvc
.
browser
=
browser
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
null
)
)
{
let
tabbrowser
=
win
.
gBrowser
;
if
(
tabbrowser
)
{
let
browser
=
tabbrowser
.
getBrowserForOuterWindowID
(
openerTopWindowID
)
;
if
(
browser
)
{
prompterSvc
.
openerBrowser
=
browser
;
break
;
}
}
}
return
prompterSvc
;
}
onFormSubmit
(
browser
{
origin
formActionOrigin
autoFilledLoginGuid
usernameField
newPasswordField
oldPasswordField
openerTopWindowID
dismissedPrompt
}
)
{
function
recordLoginUse
(
login
)
{
if
(
!
browser
|
|
PrivateBrowsingUtils
.
isBrowserPrivate
(
browser
)
)
{
return
;
}
let
propBag
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag
)
;
propBag
.
setProperty
(
"
timeLastUsed
"
Date
.
now
(
)
)
;
propBag
.
setProperty
(
"
timesUsedIncrement
"
1
)
;
Services
.
logins
.
modifyLogin
(
login
propBag
)
;
}
if
(
!
Services
.
logins
.
getLoginSavingEnabled
(
origin
)
)
{
log
(
"
(
form
submission
ignored
-
-
saving
is
disabled
for
:
"
origin
"
)
"
)
;
return
;
}
let
formLogin
=
new
LoginInfo
(
origin
formActionOrigin
null
usernameField
?
usernameField
.
value
:
"
"
newPasswordField
.
value
usernameField
?
usernameField
.
name
:
"
"
newPasswordField
.
name
)
;
if
(
autoFilledLoginGuid
)
{
let
loginsForGuid
=
LoginHelper
.
searchLoginsWithObject
(
{
guid
:
autoFilledLoginGuid
}
)
;
if
(
loginsForGuid
.
length
=
=
1
&
&
loginsForGuid
[
0
]
.
password
=
=
formLogin
.
password
&
&
(
!
formLogin
.
username
|
|
loginsForGuid
[
0
]
.
username
=
=
formLogin
.
username
)
)
{
log
(
"
The
filled
login
matches
the
form
submission
.
Nothing
to
change
.
"
)
;
recordLoginUse
(
loginsForGuid
[
0
]
)
;
return
;
}
}
let
logins
=
this
.
_searchAndDedupeLogins
(
origin
{
formActionOrigin
}
)
;
let
generatedPW
=
this
.
_generatedPasswordsByPrincipalOrigin
.
get
(
origin
)
;
let
autoSavedStorageGUID
=
"
"
;
if
(
generatedPW
&
&
generatedPW
.
storageGUID
)
{
autoSavedStorageGUID
=
generatedPW
.
storageGUID
;
}
if
(
!
usernameField
&
&
oldPasswordField
&
&
logins
.
length
)
{
let
prompter
=
this
.
_getPrompter
(
browser
openerTopWindowID
)
;
if
(
logins
.
length
=
=
1
)
{
let
oldLogin
=
logins
[
0
]
;
if
(
oldLogin
.
password
=
=
formLogin
.
password
)
{
recordLoginUse
(
oldLogin
)
;
log
(
"
(
Not
prompting
to
save
/
change
since
we
have
no
username
and
the
"
+
"
only
saved
password
matches
the
new
password
)
"
)
;
return
;
}
formLogin
.
username
=
oldLogin
.
username
;
formLogin
.
usernameField
=
oldLogin
.
usernameField
;
prompter
.
promptToChangePassword
(
oldLogin
formLogin
dismissedPrompt
false
autoSavedStorageGUID
)
;
return
;
}
else
if
(
!
generatedPW
|
|
generatedPW
.
value
!
=
newPasswordField
.
value
)
{
prompter
.
promptToChangePasswordWithUsernames
(
logins
formLogin
)
;
return
;
}
}
let
existingLogin
=
null
;
for
(
let
login
of
logins
)
{
let
same
;
if
(
!
login
.
username
&
&
formLogin
.
username
)
{
let
restoreMe
=
formLogin
.
username
;
formLogin
.
username
=
"
"
;
same
=
LoginHelper
.
doLoginsMatch
(
formLogin
login
{
ignorePassword
:
false
ignoreSchemes
:
LoginHelper
.
schemeUpgrades
}
)
;
formLogin
.
username
=
restoreMe
;
}
else
if
(
!
formLogin
.
username
&
&
login
.
username
)
{
formLogin
.
username
=
login
.
username
;
same
=
LoginHelper
.
doLoginsMatch
(
formLogin
login
{
ignorePassword
:
false
ignoreSchemes
:
LoginHelper
.
schemeUpgrades
}
)
;
formLogin
.
username
=
"
"
;
}
else
{
same
=
LoginHelper
.
doLoginsMatch
(
formLogin
login
{
ignorePassword
:
true
ignoreSchemes
:
LoginHelper
.
schemeUpgrades
}
)
;
}
if
(
same
)
{
existingLogin
=
login
;
break
;
}
}
if
(
existingLogin
)
{
log
(
"
Found
an
existing
login
matching
this
form
submission
"
)
;
if
(
existingLogin
.
password
!
=
formLogin
.
password
)
{
log
(
"
.
.
.
passwords
differ
prompting
to
change
.
"
)
;
let
prompter
=
this
.
_getPrompter
(
browser
openerTopWindowID
)
;
prompter
.
promptToChangePassword
(
existingLogin
formLogin
dismissedPrompt
false
autoSavedStorageGUID
)
;
}
else
if
(
!
existingLogin
.
username
&
&
formLogin
.
username
)
{
log
(
"
.
.
.
empty
username
update
prompting
to
change
.
"
)
;
let
prompter
=
this
.
_getPrompter
(
browser
openerTopWindowID
)
;
prompter
.
promptToChangePassword
(
existingLogin
formLogin
dismissedPrompt
false
autoSavedStorageGUID
)
;
}
else
{
recordLoginUse
(
existingLogin
)
;
}
return
;
}
let
prompter
=
this
.
_getPrompter
(
browser
openerTopWindowID
)
;
prompter
.
promptToSavePassword
(
formLogin
dismissedPrompt
)
;
}
_onGeneratedPasswordFilledOrEdited
(
{
browsingContextId
formActionOrigin
openerTopWindowID
password
username
=
"
"
}
)
{
log
(
"
_onGeneratedPasswordFilledOrEdited
"
)
;
if
(
!
password
)
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
The
password
field
is
empty
"
)
;
return
;
}
let
browsingContext
=
BrowsingContext
.
get
(
browsingContextId
)
;
let
{
originNoSuffix
}
=
browsingContext
.
currentWindowGlobal
.
documentPrincipal
;
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
originNoSuffix
)
;
if
(
!
formOrigin
)
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
Invalid
form
origin
:
"
browsingContext
.
currentWindowGlobal
.
documentPrincipal
)
;
return
;
}
if
(
!
Services
.
logins
.
getLoginSavingEnabled
(
formOrigin
)
)
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
saving
is
disabled
for
:
"
formOrigin
)
;
return
;
}
let
framePrincipalOrigin
=
browsingContext
.
currentWindowGlobal
.
documentPrincipal
.
origin
;
let
generatedPW
=
this
.
_generatedPasswordsByPrincipalOrigin
.
get
(
framePrincipalOrigin
)
;
let
shouldAutoSaveLogin
=
true
;
let
loginToChange
=
null
;
let
autoSavedLogin
=
null
;
if
(
password
!
=
generatedPW
.
value
)
{
log
(
"
The
field
containing
the
generated
password
has
changed
"
)
;
if
(
!
generatedPW
.
edited
)
{
Services
.
telemetry
.
recordEvent
(
"
pwmgr
"
"
filled_field_edited
"
"
generatedpassword
"
)
;
log
(
"
filled_field_edited
telemetry
event
recorded
"
)
;
generatedPW
.
edited
=
true
;
}
if
(
generatedPW
.
storageGUID
)
{
let
existingLogins
=
LoginHelper
.
searchLoginsWithObject
(
{
guid
:
generatedPW
.
storageGUID
}
)
;
if
(
existingLogins
.
length
)
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
login
to
change
is
the
auto
-
saved
login
"
)
;
loginToChange
=
existingLogins
[
0
]
;
autoSavedLogin
=
loginToChange
;
}
}
generatedPW
.
value
=
password
;
}
let
formLogin
=
new
LoginInfo
(
formOrigin
formActionOrigin
null
username
generatedPW
.
value
)
;
let
formLoginWithoutUsername
=
new
LoginInfo
(
formOrigin
formActionOrigin
null
"
"
generatedPW
.
value
)
;
if
(
!
generatedPW
.
filled
)
{
if
(
generatedPW
.
storageGUID
)
{
throw
new
Error
(
"
Generated
password
was
saved
in
storage
without
being
filled
first
"
)
;
}
Services
.
telemetry
.
recordEvent
(
"
pwmgr
"
"
autocomplete_field
"
"
generatedpassword
"
)
;
log
(
"
autocomplete_field
telemetry
event
recorded
"
)
;
generatedPW
.
filled
=
true
;
}
if
(
!
loginToChange
)
{
let
logins
=
this
.
_searchAndDedupeLogins
(
formOrigin
{
acceptDifferentSubdomains
:
false
httpRealm
:
null
ignoreActionAndRealm
:
false
}
)
;
let
matchedLogin
=
logins
.
find
(
login
=
>
formLoginWithoutUsername
.
matches
(
login
true
)
)
;
if
(
matchedLogin
)
{
shouldAutoSaveLogin
=
false
;
if
(
matchedLogin
.
password
=
=
formLoginWithoutUsername
.
password
)
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
Matching
login
already
saved
"
)
;
return
;
}
log
(
"
_onGeneratedPasswordFilledOrEdited
:
Login
with
empty
username
already
saved
for
this
site
"
)
;
}
if
(
(
matchedLogin
=
logins
.
find
(
login
=
>
formLogin
.
matches
(
login
true
)
)
)
)
{
loginToChange
=
matchedLogin
;
}
}
if
(
shouldAutoSaveLogin
)
{
if
(
loginToChange
&
&
loginToChange
=
=
autoSavedLogin
)
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
updating
auto
-
saved
login
with
changed
password
"
)
;
Services
.
logins
.
modifyLogin
(
loginToChange
LoginHelper
.
newPropertyBag
(
{
password
}
)
)
;
loginToChange
.
password
=
password
;
}
else
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
auto
-
saving
new
login
with
empty
username
"
)
;
loginToChange
=
Services
.
logins
.
addLogin
(
formLoginWithoutUsername
)
;
generatedPW
.
storageGUID
=
loginToChange
.
guid
;
}
}
else
{
log
(
"
_onGeneratedPasswordFilledOrEdited
:
not
auto
-
saving
/
updating
this
login
"
)
;
}
let
browser
=
browsingContext
.
top
.
embedderElement
;
let
prompter
=
this
.
_getPrompter
(
browser
openerTopWindowID
)
;
if
(
loginToChange
)
{
let
autoSavedStorageGUID
=
"
"
;
if
(
generatedPW
.
value
=
=
loginToChange
.
password
&
&
generatedPW
.
storageGUID
=
=
loginToChange
.
guid
)
{
autoSavedStorageGUID
=
generatedPW
.
storageGUID
;
}
log
(
"
_onGeneratedPasswordFilledOrEdited
:
promptToChangePassword
with
autoSavedStorageGUID
:
"
+
autoSavedStorageGUID
)
;
prompter
.
promptToChangePassword
(
loginToChange
formLogin
true
shouldAutoSaveLogin
autoSavedStorageGUID
)
;
return
;
}
log
(
"
_onGeneratedPasswordFilledOrEdited
:
no
matching
login
to
save
/
update
"
)
;
prompter
.
promptToSavePassword
(
formLogin
true
shouldAutoSaveLogin
)
;
}
loginFormStateByBrowser
:
new
WeakMap
(
)
stateForBrowser
(
browser
)
{
let
loginFormState
=
this
.
loginFormStateByBrowser
.
get
(
browser
)
;
if
(
!
loginFormState
)
{
loginFormState
=
{
}
;
this
.
loginFormStateByBrowser
.
set
(
browser
loginFormState
)
;
}
return
loginFormState
;
}
hasInsecureLoginForms
(
browser
)
{
return
!
!
this
.
stateForBrowser
(
browser
)
.
hasInsecureLoginForms
;
}
setHasInsecureLoginForms
(
browser
hasInsecureLoginForms
)
{
let
state
=
this
.
stateForBrowser
(
browser
)
;
state
.
hasInsecureLoginForms
=
hasInsecureLoginForms
;
browser
.
dispatchEvent
(
new
browser
.
ownerGlobal
.
CustomEvent
(
"
InsecureLoginFormsStateChange
"
)
)
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
LoginManagerParent
"
recipeParentPromise
"
function
(
)
{
const
{
LoginRecipesParent
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginRecipes
.
jsm
"
)
;
this
.
_recipeManager
=
new
LoginRecipesParent
(
{
defaults
:
Services
.
prefs
.
getStringPref
(
"
signon
.
recipes
.
path
"
)
}
)
;
return
this
.
_recipeManager
.
initializationPromise
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
LoginManagerParent
"
_repromptTimeout
"
"
signon
.
masterPasswordReprompt
.
timeout_ms
"
900000
)
;
