"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginImport
"
]
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Sqlite
"
"
resource
:
/
/
gre
/
modules
/
Sqlite
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
this
.
LoginImport
=
function
(
aStore
aPath
)
{
this
.
store
=
aStore
;
this
.
path
=
aPath
;
}
;
this
.
LoginImport
.
prototype
=
{
store
:
null
path
:
null
async
import
(
)
{
if
(
this
.
store
.
data
.
logins
.
length
)
{
throw
new
Error
(
"
Unable
to
import
saved
passwords
because
some
data
"
+
"
has
already
been
imported
or
saved
.
"
)
;
}
let
referenceTimeMs
=
Date
.
now
(
)
;
let
connection
=
await
Sqlite
.
openConnection
(
{
path
:
this
.
path
}
)
;
try
{
let
schemaVersion
=
await
connection
.
getSchemaVersion
(
)
;
if
(
schemaVersion
<
3
)
{
throw
new
Error
(
"
Unable
to
import
saved
passwords
because
"
+
"
the
existing
profile
is
too
old
.
"
)
;
}
let
rows
=
await
connection
.
execute
(
"
SELECT
*
FROM
moz_logins
"
)
;
for
(
let
row
of
rows
)
{
try
{
let
hostname
=
row
.
getResultByName
(
"
hostname
"
)
;
let
httpRealm
=
row
.
getResultByName
(
"
httpRealm
"
)
;
let
formSubmitURL
=
row
.
getResultByName
(
"
formSubmitURL
"
)
;
let
usernameField
=
row
.
getResultByName
(
"
usernameField
"
)
;
let
passwordField
=
row
.
getResultByName
(
"
passwordField
"
)
;
let
encryptedUsername
=
row
.
getResultByName
(
"
encryptedUsername
"
)
;
let
encryptedPassword
=
row
.
getResultByName
(
"
encryptedPassword
"
)
;
let
guid
=
row
.
getResultByName
(
"
guid
"
)
;
let
encType
=
row
.
getResultByName
(
"
encType
"
)
;
let
timeCreated
=
null
;
let
timeLastUsed
=
null
;
let
timePasswordChanged
=
null
;
let
timesUsed
=
null
;
try
{
timeCreated
=
row
.
getResultByName
(
"
timeCreated
"
)
;
timeLastUsed
=
row
.
getResultByName
(
"
timeLastUsed
"
)
;
timePasswordChanged
=
row
.
getResultByName
(
"
timePasswordChanged
"
)
;
timesUsed
=
row
.
getResultByName
(
"
timesUsed
"
)
;
}
catch
(
ex
)
{
}
if
(
!
timeCreated
)
{
timeCreated
=
referenceTimeMs
;
}
if
(
!
timeLastUsed
)
{
timeLastUsed
=
referenceTimeMs
;
}
if
(
!
timePasswordChanged
)
{
timePasswordChanged
=
referenceTimeMs
;
}
if
(
!
timesUsed
)
{
timesUsed
=
1
;
}
this
.
store
.
data
.
logins
.
push
(
{
id
:
this
.
store
.
data
.
nextId
+
+
hostname
httpRealm
formSubmitURL
usernameField
passwordField
encryptedUsername
encryptedPassword
guid
encType
timeCreated
timeLastUsed
timePasswordChanged
timesUsed
}
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Error
importing
login
:
"
+
ex
)
;
}
}
}
finally
{
await
connection
.
close
(
)
;
}
}
}
;
