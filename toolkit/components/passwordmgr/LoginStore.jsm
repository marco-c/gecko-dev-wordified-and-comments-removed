"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginStore
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
JSONFile
"
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
const
kDataVersion
=
3
;
const
PERMISSION_SAVE_LOGINS
=
"
login
-
saving
"
;
const
MAX_DATE_MS
=
8640000000000000
;
function
LoginStore
(
aPath
)
{
JSONFile
.
call
(
this
{
path
:
aPath
dataPostProcessor
:
this
.
_dataPostProcessor
.
bind
(
this
)
}
)
;
}
LoginStore
.
prototype
=
Object
.
create
(
JSONFile
.
prototype
)
;
LoginStore
.
prototype
.
constructor
=
LoginStore
;
LoginStore
.
prototype
.
_dataPostProcessor
=
function
(
data
)
{
if
(
data
.
nextId
=
=
=
undefined
)
{
data
.
nextId
=
1
;
}
if
(
!
data
.
logins
)
{
data
.
logins
=
[
]
;
}
if
(
!
data
.
potentiallyVulnerablePasswords
)
{
data
.
potentiallyVulnerablePasswords
=
[
]
;
}
if
(
!
data
.
dismissedBreachAlertsByLoginGUID
)
{
data
.
dismissedBreachAlertsByLoginGUID
=
{
}
;
}
if
(
!
(
"
version
"
in
data
)
|
|
data
.
version
<
3
)
{
let
dateProperties
=
[
"
timeCreated
"
"
timeLastUsed
"
"
timePasswordChanged
"
]
;
let
now
=
Date
.
now
(
)
;
function
getEarliestDate
(
login
defaultDate
)
{
let
earliestDate
=
dateProperties
.
reduce
(
(
earliest
pname
)
=
>
{
let
ts
=
login
[
pname
]
;
return
!
ts
?
earliest
:
Math
.
min
(
ts
earliest
)
;
}
defaultDate
)
;
return
earliestDate
;
}
for
(
let
login
of
data
.
logins
)
{
for
(
let
pname
of
dateProperties
)
{
let
earliestDate
;
if
(
!
login
[
pname
]
|
|
login
[
pname
]
>
MAX_DATE_MS
)
{
login
[
pname
]
=
earliestDate
|
|
(
earliestDate
=
getEarliestDate
(
login
now
)
)
;
}
}
}
}
data
.
version
=
kDataVersion
;
return
data
;
}
;
