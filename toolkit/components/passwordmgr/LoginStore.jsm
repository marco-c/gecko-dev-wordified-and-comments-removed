"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginStore
"
]
;
const
{
JSONFile
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
FXA_PWDMGR_HOST
:
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
FXA_PWDMGR_REALM
:
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
}
)
;
const
kDataVersion
=
3
;
const
MAX_DATE_MS
=
8640000000000000
;
function
LoginStore
(
aPath
aBackupPath
=
"
"
)
{
JSONFile
.
call
(
this
{
path
:
aPath
dataPostProcessor
:
this
.
_dataPostProcessor
.
bind
(
this
)
backupTo
:
aBackupPath
}
)
;
}
LoginStore
.
prototype
=
Object
.
create
(
JSONFile
.
prototype
)
;
LoginStore
.
prototype
.
constructor
=
LoginStore
;
LoginStore
.
prototype
.
_save
=
async
function
(
)
{
await
JSONFile
.
prototype
.
_save
.
call
(
this
)
;
Services
.
obs
.
notifyObservers
(
null
"
password
-
storage
-
updated
"
)
;
if
(
this
.
_options
.
backupTo
)
{
await
this
.
_backupHandler
(
)
;
}
}
;
LoginStore
.
prototype
.
_backupHandler
=
async
function
(
)
{
const
logins
=
this
.
_data
.
logins
;
if
(
logins
.
length
>
1
)
{
return
;
}
if
(
logins
.
length
&
&
logins
[
0
]
.
hostname
=
=
lazy
.
FXA_PWDMGR_HOST
&
&
logins
[
0
]
.
httpRealm
=
=
lazy
.
FXA_PWDMGR_REALM
)
{
try
{
await
IOUtils
.
copy
(
this
.
path
this
.
_options
.
backupTo
)
;
Services
.
obs
.
notifyObservers
(
null
"
logins
-
backup
-
updated
"
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
else
if
(
!
logins
.
length
)
{
await
IOUtils
.
remove
(
this
.
_options
.
backupTo
{
ignoreAbsent
:
true
}
)
;
}
}
;
LoginStore
.
prototype
.
_dataPostProcessor
=
function
(
data
)
{
if
(
data
.
nextId
=
=
=
undefined
)
{
data
.
nextId
=
1
;
}
if
(
!
data
.
logins
)
{
data
.
logins
=
[
]
;
}
if
(
!
data
.
potentiallyVulnerablePasswords
)
{
data
.
potentiallyVulnerablePasswords
=
[
]
;
}
if
(
!
data
.
dismissedBreachAlertsByLoginGUID
)
{
data
.
dismissedBreachAlertsByLoginGUID
=
{
}
;
}
if
(
!
(
"
version
"
in
data
)
|
|
data
.
version
<
3
)
{
let
dateProperties
=
[
"
timeCreated
"
"
timeLastUsed
"
"
timePasswordChanged
"
]
;
let
now
=
Date
.
now
(
)
;
function
getEarliestDate
(
login
defaultDate
)
{
let
earliestDate
=
dateProperties
.
reduce
(
(
earliest
pname
)
=
>
{
let
ts
=
login
[
pname
]
;
return
!
ts
?
earliest
:
Math
.
min
(
ts
earliest
)
;
}
defaultDate
)
;
return
earliestDate
;
}
for
(
let
login
of
data
.
logins
)
{
for
(
let
pname
of
dateProperties
)
{
let
earliestDate
;
if
(
!
login
[
pname
]
|
|
login
[
pname
]
>
MAX_DATE_MS
)
{
login
[
pname
]
=
earliestDate
|
|
(
earliestDate
=
getEarliestDate
(
login
now
)
)
;
}
}
}
}
data
.
version
=
kDataVersion
;
return
data
;
}
;
