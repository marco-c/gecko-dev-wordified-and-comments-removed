"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
LoginManagerStorage_json
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
storage
-
json
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
class
LoginManagerStorage_geckoview
extends
LoginManagerStorage_json
{
get
classID
(
)
{
return
Components
.
ID
(
"
{
337f317f
-
f713
-
452a
-
962d
-
db831c785fec
}
"
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
Ci
.
nsILoginManagerStorage
]
)
;
}
get
_xpcom_factory
(
)
{
return
XPCOMUtils
.
generateSingletonFactory
(
this
.
LoginManagerStorage_geckoview
)
;
}
get
_crypto
(
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
initialize
(
)
{
try
{
return
Promise
.
resolve
(
)
;
}
catch
(
e
)
{
this
.
log
(
"
Initialization
failed
:
"
e
)
;
throw
new
Error
(
"
Initialization
failed
"
)
;
}
}
terminate
(
)
{
}
addLogin
(
login
preEncrypted
=
false
plaintextUsername
=
null
plaintextPassword
=
null
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
removeLogin
(
login
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
modifyLogin
(
oldLogin
newLoginData
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
getAllLogins
(
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
async
getAllLoginsAsync
(
)
{
let
[
logins
ids
]
=
this
.
_searchLogins
(
{
}
)
;
if
(
!
logins
.
length
)
{
return
[
]
;
}
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
async
searchLoginsAsync
(
matchData
)
{
this
.
log
(
"
searchLoginsAsync
:
"
matchData
)
;
await
Promise
.
resolve
(
)
;
let
realMatchData
=
{
}
;
let
options
=
{
}
;
for
(
let
[
name
value
]
of
Object
.
entries
(
matchData
)
)
{
switch
(
name
)
{
case
"
acceptDifferentSubdomains
"
:
case
"
schemeUpgrades
"
:
{
options
[
name
]
=
value
;
break
;
}
default
:
{
realMatchData
[
name
]
=
value
;
break
;
}
}
}
let
candidateLogins
=
[
]
;
let
[
logins
ids
]
=
this
.
_searchLogins
(
realMatchData
options
candidateLogins
)
;
return
logins
;
}
searchLogins
(
matchData
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
removeAllLogins
(
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
get
uiBusy
(
)
{
return
false
;
}
get
isLoggedIn
(
)
{
return
true
;
}
_encryptLogin
(
login
)
{
return
login
;
}
_decryptLogins
(
logins
)
{
return
logins
;
}
}
XPCOMUtils
.
defineLazyGetter
(
LoginManagerStorage_geckoview
.
prototype
"
log
"
(
)
=
>
{
let
logger
=
LoginHelper
.
createLogger
(
"
Login
storage
"
)
;
return
logger
.
log
.
bind
(
logger
)
;
}
)
;
const
EXPORTED_SYMBOLS
=
[
"
LoginManagerStorage_geckoview
"
]
;
