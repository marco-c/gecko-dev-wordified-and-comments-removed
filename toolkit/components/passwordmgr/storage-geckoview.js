"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
LoginManagerStorage_json
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
storage
-
json
.
js
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
GeckoViewAutocomplete
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutocomplete
.
jsm
"
LoginHelper
:
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
LoginEntry
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutocomplete
.
jsm
"
}
)
;
class
LoginManagerStorage_geckoview
extends
LoginManagerStorage_json
{
get
classID
(
)
{
return
Components
.
ID
(
"
{
337f317f
-
f713
-
452a
-
962d
-
db831c785fec
}
"
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsILoginManagerStorage
"
]
)
;
}
get
_crypto
(
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
initialize
(
)
{
try
{
return
Promise
.
resolve
(
)
;
}
catch
(
e
)
{
this
.
log
(
"
Initialization
failed
:
"
e
)
;
throw
new
Error
(
"
Initialization
failed
"
)
;
}
}
terminate
(
)
{
}
addLogin
(
login
preEncrypted
=
false
plaintextUsername
=
null
plaintextPassword
=
null
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
removeLogin
(
login
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
modifyLogin
(
oldLogin
newLoginData
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
recordPasswordUse
(
login
)
{
lazy
.
GeckoViewAutocomplete
.
onLoginPasswordUsed
(
lazy
.
LoginEntry
.
fromLoginInfo
(
login
)
)
;
}
getAllLogins
(
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
getAllLoginsAsync
(
)
{
return
this
.
_getLoginsAsync
(
{
}
)
;
}
async
searchLoginsAsync
(
matchData
)
{
this
.
log
(
"
searchLoginsAsync
:
"
matchData
)
;
return
this
.
_getLoginsAsync
(
matchData
)
;
}
_baseHostnameFromOrigin
(
origin
)
{
if
(
!
origin
)
{
return
null
;
}
let
originURI
=
Services
.
io
.
newURI
(
origin
)
;
try
{
return
Services
.
eTLD
.
getBaseDomain
(
originURI
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
=
=
Cr
.
NS_ERROR_HOST_IS_IP_ADDRESS
)
{
return
new
URL
(
origin
)
.
hostname
;
}
else
if
(
ex
.
result
=
=
Cr
.
NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS
)
{
return
originURI
.
asciiHost
;
}
throw
ex
;
}
}
async
_getLoginsAsync
(
matchData
)
{
let
baseHostname
=
this
.
_baseHostnameFromOrigin
(
matchData
.
origin
)
;
let
candidateLogins
=
await
lazy
.
GeckoViewAutocomplete
.
fetchLogins
(
baseHostname
)
.
catch
(
_
=
>
{
}
)
;
if
(
!
candidateLogins
)
{
return
[
]
;
}
let
realMatchData
=
{
}
;
let
options
=
{
}
;
if
(
matchData
.
guid
)
{
realMatchData
=
{
guid
:
matchData
.
guid
}
;
}
else
{
for
(
let
[
name
value
]
of
Object
.
entries
(
matchData
)
)
{
switch
(
name
)
{
case
"
acceptDifferentSubdomains
"
:
case
"
schemeUpgrades
"
:
{
options
[
name
]
=
value
;
break
;
}
default
:
{
realMatchData
[
name
]
=
value
;
break
;
}
}
}
}
const
[
logins
]
=
this
.
_searchLogins
(
realMatchData
options
candidateLogins
.
map
(
this
.
_vanillaLoginToStorageLogin
)
)
;
return
logins
;
}
_vanillaLoginToStorageLogin
(
vanillaLogin
)
{
return
{
.
.
.
vanillaLogin
hostname
:
vanillaLogin
.
origin
formSubmitURL
:
vanillaLogin
.
formActionOrigin
encryptedUsername
:
vanillaLogin
.
username
encryptedPassword
:
vanillaLogin
.
password
}
;
}
searchLogins
(
matchData
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
removeAllLogins
(
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
countLogins
(
origin
formActionOrigin
httpRealm
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
get
uiBusy
(
)
{
return
false
;
}
get
isLoggedIn
(
)
{
return
true
;
}
_encryptLogin
(
login
)
{
return
login
;
}
_decryptLogins
(
logins
)
{
return
logins
;
}
async
getSyncID
(
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
setSyncID
(
syncID
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
getLastSync
(
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
setLastSync
(
timestamp
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
XPCOMUtils
.
defineLazyGetter
(
LoginManagerStorage_geckoview
.
prototype
"
log
"
(
)
=
>
{
let
logger
=
lazy
.
LoginHelper
.
createLogger
(
"
Login
storage
"
)
;
return
logger
.
log
.
bind
(
logger
)
;
}
)
;
const
EXPORTED_SYMBOLS
=
[
"
LoginManagerStorage_geckoview
"
]
;
