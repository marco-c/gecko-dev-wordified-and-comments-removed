this
.
EXPORTED_SYMBOLS
=
[
"
InsecurePasswordUtils
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
const
STRINGS_URI
=
"
chrome
:
/
/
global
/
locale
/
security
/
security
.
properties
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
devtools
"
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LoginManagerContent
"
"
resource
:
/
/
gre
/
modules
/
LoginManagerContent
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
WebConsoleUtils
"
(
)
=
>
{
return
this
.
devtools
.
require
(
"
devtools
/
shared
/
webconsole
/
utils
"
)
.
Utils
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
l10n
"
(
)
=
>
{
return
new
this
.
WebConsoleUtils
.
L10n
(
STRINGS_URI
)
;
}
)
;
this
.
InsecurePasswordUtils
=
{
_formRootsWarned
:
new
WeakMap
(
)
_sendWebConsoleMessage
(
messageTag
domDoc
)
{
let
windowId
=
WebConsoleUtils
.
getInnerWindowId
(
domDoc
.
defaultView
)
;
let
category
=
"
Insecure
Password
Field
"
;
let
flag
=
Ci
.
nsIScriptError
.
warningFlag
;
let
message
=
l10n
.
getStr
(
messageTag
)
;
let
consoleMsg
=
Cc
[
"
mozilla
.
org
/
scripterror
;
1
"
]
.
createInstance
(
Ci
.
nsIScriptError
)
;
consoleMsg
.
initWithWindowID
(
message
domDoc
.
location
.
href
0
0
0
flag
category
windowId
)
;
Services
.
console
.
logMessage
(
consoleMsg
)
;
}
_checkForInsecureNestedDocuments
(
domDoc
)
{
if
(
domDoc
.
defaultView
=
=
domDoc
.
defaultView
.
parent
)
{
return
false
;
}
if
(
!
LoginManagerContent
.
isDocumentSecure
(
domDoc
)
)
{
return
true
;
}
return
this
.
_checkForInsecureNestedDocuments
(
domDoc
.
defaultView
.
parent
.
document
)
;
}
checkForInsecurePasswords
(
aForm
)
{
if
(
this
.
_formRootsWarned
.
has
(
aForm
.
rootElement
)
|
|
this
.
_formRootsWarned
.
get
(
aForm
.
rootElement
)
)
{
return
;
}
let
domDoc
=
aForm
.
ownerDocument
;
let
topDocument
=
domDoc
.
defaultView
.
top
.
document
;
let
isSafePage
=
LoginManagerContent
.
isDocumentSecure
(
topDocument
)
;
if
(
!
isSafePage
)
{
this
.
_sendWebConsoleMessage
(
"
InsecurePasswordsPresentOnPage
"
domDoc
)
;
this
.
_formRootsWarned
.
set
(
aForm
.
rootElement
true
)
;
}
if
(
this
.
_checkForInsecureNestedDocuments
(
domDoc
)
)
{
this
.
_sendWebConsoleMessage
(
"
InsecurePasswordsPresentOnIframe
"
domDoc
)
;
this
.
_formRootsWarned
.
set
(
aForm
.
rootElement
true
)
;
isSafePage
=
false
;
}
let
isFormSubmitHTTP
=
false
isFormSubmitHTTPS
=
false
;
if
(
aForm
.
rootElement
instanceof
Ci
.
nsIDOMHTMLFormElement
)
{
if
(
aForm
.
action
.
match
(
/
^
http
:
\
/
\
/
/
)
)
{
this
.
_sendWebConsoleMessage
(
"
InsecureFormActionPasswordsPresent
"
domDoc
)
;
this
.
_formRootsWarned
.
set
(
aForm
.
rootElement
true
)
;
isFormSubmitHTTP
=
true
;
}
else
if
(
aForm
.
action
.
match
(
/
^
https
:
\
/
\
/
/
)
)
{
isFormSubmitHTTPS
=
true
;
}
}
let
passwordSafety
;
if
(
isSafePage
)
{
if
(
isFormSubmitHTTPS
)
{
passwordSafety
=
0
;
}
else
if
(
isFormSubmitHTTP
)
{
passwordSafety
=
1
;
}
else
{
passwordSafety
=
2
;
}
}
else
{
if
(
isFormSubmitHTTPS
)
{
passwordSafety
=
3
;
}
else
if
(
isFormSubmitHTTP
)
{
passwordSafety
=
4
;
}
else
{
passwordSafety
=
5
;
}
}
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_LOGIN_PAGE_SAFETY
"
)
.
add
(
passwordSafety
)
;
}
}
;
