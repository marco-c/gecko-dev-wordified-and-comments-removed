this
.
EXPORTED_SYMBOLS
=
[
"
InsecurePasswordUtils
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
const
STRINGS_URI
=
"
chrome
:
/
/
global
/
locale
/
security
/
security
.
properties
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gContentSecurityManager
"
"
mozilla
.
org
/
contentsecuritymanager
;
1
"
"
nsIContentSecurityManager
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gScriptSecurityManager
"
"
mozilla
.
org
/
scriptsecuritymanager
;
1
"
"
nsIScriptSecurityManager
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
return
LoginHelper
.
createLogger
(
"
InsecurePasswordUtils
"
)
;
}
)
;
this
.
InsecurePasswordUtils
=
{
_formRootsWarned
:
new
WeakMap
(
)
_getInnerWindowId
(
window
)
{
return
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
currentInnerWindowID
;
}
_sendWebConsoleMessage
(
messageTag
domDoc
)
{
let
windowId
=
this
.
_getInnerWindowId
(
domDoc
.
defaultView
)
;
let
category
=
"
Insecure
Password
Field
"
;
let
flag
=
Ci
.
nsIScriptError
.
warningFlag
;
let
bundle
=
Services
.
strings
.
createBundle
(
STRINGS_URI
)
;
let
message
=
bundle
.
GetStringFromName
(
messageTag
)
;
let
consoleMsg
=
Cc
[
"
mozilla
.
org
/
scripterror
;
1
"
]
.
createInstance
(
Ci
.
nsIScriptError
)
;
consoleMsg
.
initWithWindowID
(
message
domDoc
.
location
.
href
0
0
0
flag
category
windowId
)
;
Services
.
console
.
logMessage
(
consoleMsg
)
;
}
_checkFormSecurity
(
aForm
)
{
let
isFormSubmitHTTP
=
false
isFormSubmitSecure
=
false
;
if
(
aForm
.
rootElement
instanceof
Ci
.
nsIDOMHTMLFormElement
)
{
let
uri
=
Services
.
io
.
newURI
(
aForm
.
rootElement
.
action
|
|
aForm
.
rootElement
.
baseURI
)
;
let
principal
=
gScriptSecurityManager
.
createCodebasePrincipal
(
uri
{
}
)
;
if
(
uri
.
schemeIs
(
"
http
"
)
)
{
isFormSubmitHTTP
=
true
;
if
(
gContentSecurityManager
.
isOriginPotentiallyTrustworthy
(
principal
)
|
|
(
this
.
_isPrincipalForLocalIPAddress
(
aForm
.
rootElement
.
nodePrincipal
)
&
&
this
.
_isPrincipalForLocalIPAddress
(
principal
)
)
)
{
isFormSubmitSecure
=
true
;
}
}
else
{
isFormSubmitSecure
=
true
;
}
}
return
{
isFormSubmitHTTP
isFormSubmitSecure
}
;
}
_isPrincipalForLocalIPAddress
(
aPrincipal
)
{
try
{
let
uri
=
aPrincipal
.
URI
;
if
(
Services
.
io
.
hostnameIsLocalIPAddress
(
uri
)
)
{
log
.
debug
(
"
hasInsecureLoginForms
:
detected
local
IP
address
:
"
uri
)
;
return
true
;
}
}
catch
(
e
)
{
log
.
debug
(
"
hasInsecureLoginForms
:
unable
to
check
for
local
IP
address
:
"
e
)
;
}
return
false
;
}
isFormSecure
(
aForm
)
{
let
isSafePage
=
aForm
.
ownerDocument
.
defaultView
.
isSecureContext
;
if
(
!
isSafePage
&
&
this
.
_ignoreLocalIPAddress
)
{
let
isLocalIP
=
this
.
_isPrincipalForLocalIPAddress
(
aForm
.
rootElement
.
nodePrincipal
)
;
let
topWindow
=
aForm
.
ownerDocument
.
defaultView
.
top
;
let
topIsLocalIP
=
this
.
_isPrincipalForLocalIPAddress
(
topWindow
.
document
.
nodePrincipal
)
;
if
(
isLocalIP
&
&
topIsLocalIP
)
{
isSafePage
=
true
;
}
}
let
{
isFormSubmitSecure
isFormSubmitHTTP
}
=
this
.
_checkFormSecurity
(
aForm
)
;
return
isSafePage
&
&
(
isFormSubmitSecure
|
|
!
isFormSubmitHTTP
)
;
}
reportInsecurePasswords
(
aForm
)
{
if
(
this
.
_formRootsWarned
.
has
(
aForm
.
rootElement
)
|
|
this
.
_formRootsWarned
.
get
(
aForm
.
rootElement
)
)
{
return
;
}
let
domDoc
=
aForm
.
ownerDocument
;
let
isSafePage
=
domDoc
.
defaultView
.
isSecureContext
;
let
{
isFormSubmitHTTP
isFormSubmitSecure
}
=
this
.
_checkFormSecurity
(
aForm
)
;
if
(
!
isSafePage
)
{
if
(
domDoc
.
defaultView
=
=
domDoc
.
defaultView
.
parent
)
{
this
.
_sendWebConsoleMessage
(
"
InsecurePasswordsPresentOnPage
"
domDoc
)
;
}
else
{
this
.
_sendWebConsoleMessage
(
"
InsecurePasswordsPresentOnIframe
"
domDoc
)
;
}
this
.
_formRootsWarned
.
set
(
aForm
.
rootElement
true
)
;
}
else
if
(
isFormSubmitHTTP
&
&
!
isFormSubmitSecure
)
{
this
.
_sendWebConsoleMessage
(
"
InsecureFormActionPasswordsPresent
"
domDoc
)
;
this
.
_formRootsWarned
.
set
(
aForm
.
rootElement
true
)
;
}
let
passwordSafety
;
if
(
isSafePage
)
{
if
(
isFormSubmitSecure
)
{
passwordSafety
=
0
;
}
else
if
(
isFormSubmitHTTP
)
{
passwordSafety
=
1
;
}
else
{
passwordSafety
=
2
;
}
}
else
if
(
isFormSubmitSecure
)
{
passwordSafety
=
3
;
}
else
if
(
isFormSubmitHTTP
)
{
passwordSafety
=
4
;
}
else
{
passwordSafety
=
5
;
}
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_LOGIN_PAGE_SAFETY
"
)
.
add
(
passwordSafety
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
.
InsecurePasswordUtils
"
_ignoreLocalIPAddress
"
"
security
.
insecure_field_warning
.
ignore_local_ip_address
"
true
)
;
