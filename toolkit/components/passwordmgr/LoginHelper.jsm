"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginHelper
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
RemoteSettings
"
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
this
.
LoginHelper
=
{
debug
:
null
enabled
:
null
formlessCaptureEnabled
:
null
generationAvailable
:
null
generationEnabled
:
null
insecureAutofill
:
null
managementURI
:
null
privateBrowsingCaptureEnabled
:
null
schemeUpgrades
:
null
showAutoCompleteFooter
:
null
init
(
)
{
Services
.
prefs
.
addObserver
(
"
signon
.
"
(
)
=
>
this
.
updateSignonPrefs
(
)
)
;
this
.
updateSignonPrefs
(
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
pwmgr
"
true
)
;
}
updateSignonPrefs
(
)
{
this
.
autofillForms
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
autofillForms
"
)
;
this
.
autofillAutocompleteOff
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
autofillForms
.
autocompleteOff
"
)
;
this
.
debug
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
debug
"
)
;
this
.
enabled
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
rememberSignons
"
)
;
this
.
formlessCaptureEnabled
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
formlessCapture
.
enabled
"
)
;
this
.
generationAvailable
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
generation
.
available
"
)
;
this
.
generationEnabled
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
generation
.
enabled
"
)
;
this
.
insecureAutofill
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
autofillForms
.
http
"
)
;
this
.
managementURI
=
Services
.
prefs
.
getStringPref
(
"
signon
.
management
.
overrideURI
"
null
)
;
this
.
privateBrowsingCaptureEnabled
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
privateBrowsingCapture
.
enabled
"
)
;
this
.
schemeUpgrades
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
schemeUpgrades
"
)
;
this
.
showAutoCompleteFooter
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
showAutoCompleteFooter
"
)
;
this
.
storeWhenAutocompleteOff
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
storeWhenAutocompleteOff
"
)
;
}
createLogger
(
aLogPrefix
)
{
let
getMaxLogLevel
=
(
)
=
>
{
return
this
.
debug
?
"
Debug
"
:
"
Warn
"
;
}
;
let
consoleOptions
=
{
maxLogLevel
:
getMaxLogLevel
(
)
prefix
:
aLogPrefix
}
;
let
logger
=
console
.
createInstance
(
consoleOptions
)
;
Services
.
prefs
.
addObserver
(
"
signon
.
debug
"
(
)
=
>
{
this
.
debug
=
Services
.
prefs
.
getBoolPref
(
"
signon
.
debug
"
)
;
if
(
logger
)
{
logger
.
maxLogLevel
=
getMaxLogLevel
(
)
;
}
}
)
;
return
logger
;
}
checkOriginValue
(
aOrigin
)
{
if
(
aOrigin
=
=
"
.
"
|
|
aOrigin
.
includes
(
"
\
r
"
)
|
|
aOrigin
.
includes
(
"
\
n
"
)
|
|
aOrigin
.
includes
(
"
\
0
"
)
)
{
throw
new
Error
(
"
Invalid
origin
"
)
;
}
}
checkLoginValues
(
aLogin
)
{
function
badCharacterPresent
(
l
c
)
{
return
(
(
l
.
formActionOrigin
&
&
l
.
formActionOrigin
.
includes
(
c
)
)
|
|
(
l
.
httpRealm
&
&
l
.
httpRealm
.
includes
(
c
)
)
|
|
l
.
origin
.
includes
(
c
)
|
|
l
.
usernameField
.
includes
(
c
)
|
|
l
.
passwordField
.
includes
(
c
)
)
;
}
if
(
badCharacterPresent
(
aLogin
"
\
0
"
)
)
{
throw
new
Error
(
"
login
values
can
'
t
contain
nulls
"
)
;
}
if
(
aLogin
.
username
.
includes
(
"
\
0
"
)
|
|
aLogin
.
password
.
includes
(
"
\
0
"
)
)
{
throw
new
Error
(
"
login
values
can
'
t
contain
nulls
"
)
;
}
if
(
badCharacterPresent
(
aLogin
"
\
r
"
)
|
|
badCharacterPresent
(
aLogin
"
\
n
"
)
)
{
throw
new
Error
(
"
login
values
can
'
t
contain
newlines
"
)
;
}
if
(
aLogin
.
usernameField
=
=
"
.
"
|
|
aLogin
.
formActionOrigin
=
=
"
.
"
)
{
throw
new
Error
(
"
login
values
can
'
t
be
periods
"
)
;
}
if
(
aLogin
.
origin
.
includes
(
"
(
"
)
)
{
throw
new
Error
(
"
bad
parens
in
origin
"
)
;
}
}
newPropertyBag
(
aProperties
)
{
let
propertyBag
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag
)
;
if
(
aProperties
)
{
for
(
let
[
name
value
]
of
Object
.
entries
(
aProperties
)
)
{
propertyBag
.
setProperty
(
name
value
)
;
}
}
return
propertyBag
.
QueryInterface
(
Ci
.
nsIPropertyBag
)
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag2
)
;
}
searchLoginsWithObject
(
aSearchOptions
)
{
return
Services
.
logins
.
searchLogins
(
this
.
newPropertyBag
(
aSearchOptions
)
)
;
}
maybeGetHostPortForURL
(
aURL
)
{
try
{
let
uri
=
Services
.
io
.
newURI
(
aURL
)
;
return
uri
.
hostPort
;
}
catch
(
ex
)
{
}
return
aURL
;
}
getLoginOrigin
(
uriString
allowJS
)
{
let
realm
=
"
"
;
try
{
let
uri
=
Services
.
io
.
newURI
(
uriString
)
;
if
(
allowJS
&
&
uri
.
scheme
=
=
"
javascript
"
)
{
return
"
javascript
:
"
;
}
realm
=
uri
.
scheme
+
"
:
/
/
"
+
uri
.
displayHostPort
;
}
catch
(
e
)
{
log
.
warn
(
"
Couldn
'
t
parse
origin
for
"
uriString
e
)
;
realm
=
null
;
}
return
realm
;
}
getFormActionOrigin
(
form
)
{
let
uriString
=
form
.
action
;
if
(
uriString
=
=
"
"
)
{
uriString
=
form
.
baseURI
;
}
return
this
.
getLoginOrigin
(
uriString
true
)
;
}
isOriginMatching
(
aLoginOrigin
aSearchOrigin
aOptions
=
{
schemeUpgrades
:
false
acceptWildcardMatch
:
false
acceptDifferentSubdomains
:
false
}
)
{
if
(
aLoginOrigin
=
=
aSearchOrigin
)
{
return
true
;
}
if
(
!
aOptions
)
{
return
false
;
}
if
(
aOptions
.
acceptWildcardMatch
&
&
aLoginOrigin
=
=
"
"
)
{
return
true
;
}
try
{
let
loginURI
=
Services
.
io
.
newURI
(
aLoginOrigin
)
;
let
searchURI
=
Services
.
io
.
newURI
(
aSearchOrigin
)
;
let
schemeMatches
=
loginURI
.
scheme
=
=
"
http
"
&
&
searchURI
.
scheme
=
=
"
https
"
;
if
(
aOptions
.
acceptDifferentSubdomains
)
{
let
loginBaseDomain
=
Services
.
eTLD
.
getBaseDomain
(
loginURI
)
;
let
searchBaseDomain
=
Services
.
eTLD
.
getBaseDomain
(
searchURI
)
;
if
(
loginBaseDomain
=
=
searchBaseDomain
&
&
(
loginURI
.
scheme
=
=
searchURI
.
scheme
|
|
(
aOptions
.
schemeUpgrades
&
&
schemeMatches
)
)
)
{
return
true
;
}
}
if
(
aOptions
.
schemeUpgrades
&
&
loginURI
.
host
=
=
searchURI
.
host
&
&
schemeMatches
&
&
loginURI
.
port
=
=
searchURI
.
port
)
{
return
true
;
}
}
catch
(
ex
)
{
return
false
;
}
return
false
;
}
doLoginsMatch
(
aLogin1
aLogin2
{
ignorePassword
=
false
ignoreSchemes
=
false
}
)
{
if
(
aLogin1
.
httpRealm
!
=
aLogin2
.
httpRealm
|
|
aLogin1
.
username
!
=
aLogin2
.
username
)
{
return
false
;
}
if
(
!
ignorePassword
&
&
aLogin1
.
password
!
=
aLogin2
.
password
)
{
return
false
;
}
if
(
ignoreSchemes
)
{
let
login1HostPort
=
this
.
maybeGetHostPortForURL
(
aLogin1
.
origin
)
;
let
login2HostPort
=
this
.
maybeGetHostPortForURL
(
aLogin2
.
origin
)
;
if
(
login1HostPort
!
=
login2HostPort
)
{
return
false
;
}
if
(
aLogin1
.
formActionOrigin
!
=
"
"
&
&
aLogin2
.
formActionOrigin
!
=
"
"
&
&
this
.
maybeGetHostPortForURL
(
aLogin1
.
formActionOrigin
)
!
=
this
.
maybeGetHostPortForURL
(
aLogin2
.
formActionOrigin
)
)
{
return
false
;
}
}
else
{
if
(
aLogin1
.
origin
!
=
aLogin2
.
origin
)
{
return
false
;
}
if
(
aLogin1
.
formActionOrigin
!
=
"
"
&
&
aLogin2
.
formActionOrigin
!
=
"
"
&
&
aLogin1
.
formActionOrigin
!
=
aLogin2
.
formActionOrigin
)
{
return
false
;
}
}
return
true
;
}
buildModifiedLogin
(
aOldStoredLogin
aNewLoginData
)
{
function
bagHasProperty
(
aPropName
)
{
try
{
aNewLoginData
.
getProperty
(
aPropName
)
;
return
true
;
}
catch
(
ex
)
{
}
return
false
;
}
aOldStoredLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
let
newLogin
;
if
(
aNewLoginData
instanceof
Ci
.
nsILoginInfo
)
{
newLogin
=
aOldStoredLogin
.
clone
(
)
;
newLogin
.
init
(
aNewLoginData
.
origin
aNewLoginData
.
formActionOrigin
aNewLoginData
.
httpRealm
aNewLoginData
.
username
aNewLoginData
.
password
aNewLoginData
.
usernameField
aNewLoginData
.
passwordField
)
;
newLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
if
(
newLogin
.
password
!
=
aOldStoredLogin
.
password
)
{
newLogin
.
timePasswordChanged
=
Date
.
now
(
)
;
}
}
else
if
(
aNewLoginData
instanceof
Ci
.
nsIPropertyBag
)
{
newLogin
=
aOldStoredLogin
.
clone
(
)
;
newLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
if
(
bagHasProperty
(
"
password
"
)
)
{
let
newPassword
=
aNewLoginData
.
getProperty
(
"
password
"
)
;
if
(
newPassword
!
=
aOldStoredLogin
.
password
)
{
newLogin
.
timePasswordChanged
=
Date
.
now
(
)
;
}
}
for
(
let
prop
of
aNewLoginData
.
enumerator
)
{
switch
(
prop
.
name
)
{
case
"
origin
"
:
case
"
httpRealm
"
:
case
"
formActionOrigin
"
:
case
"
username
"
:
case
"
password
"
:
case
"
usernameField
"
:
case
"
passwordField
"
:
case
"
guid
"
:
case
"
timeCreated
"
:
case
"
timeLastUsed
"
:
case
"
timePasswordChanged
"
:
case
"
timesUsed
"
:
newLogin
[
prop
.
name
]
=
prop
.
value
;
break
;
case
"
timesUsedIncrement
"
:
newLogin
.
timesUsed
+
=
prop
.
value
;
break
;
default
:
throw
new
Error
(
"
Unexpected
propertybag
item
:
"
+
prop
.
name
)
;
}
}
}
else
{
throw
new
Error
(
"
newLoginData
needs
an
expected
interface
!
"
)
;
}
if
(
newLogin
.
origin
=
=
null
|
|
newLogin
.
origin
.
length
=
=
0
)
{
throw
new
Error
(
"
Can
'
t
add
a
login
with
a
null
or
empty
origin
.
"
)
;
}
if
(
newLogin
.
username
=
=
null
)
{
throw
new
Error
(
"
Can
'
t
add
a
login
with
a
null
username
.
"
)
;
}
if
(
newLogin
.
password
=
=
null
|
|
newLogin
.
password
.
length
=
=
0
)
{
throw
new
Error
(
"
Can
'
t
add
a
login
with
a
null
or
empty
password
.
"
)
;
}
if
(
newLogin
.
formActionOrigin
|
|
newLogin
.
formActionOrigin
=
=
"
"
)
{
if
(
newLogin
.
httpRealm
!
=
null
)
{
throw
new
Error
(
"
Can
'
t
add
a
login
with
both
a
httpRealm
and
formActionOrigin
.
"
)
;
}
}
else
if
(
newLogin
.
httpRealm
)
{
if
(
newLogin
.
formActionOrigin
!
=
null
)
{
throw
new
Error
(
"
Can
'
t
add
a
login
with
both
a
httpRealm
and
formActionOrigin
.
"
)
;
}
}
else
{
throw
new
Error
(
"
Can
'
t
add
a
login
without
a
httpRealm
or
formActionOrigin
.
"
)
;
}
this
.
checkLoginValues
(
newLogin
)
;
return
newLogin
;
}
shadowHTTPLogins
(
logins
)
{
let
hasHTTPSByHostPortUsername
=
new
Map
(
)
;
for
(
let
login
of
logins
)
{
let
key
=
this
.
getUniqueKeyForLogin
(
login
[
"
hostPort
"
"
username
"
]
)
;
let
hasHTTPSlogin
=
hasHTTPSByHostPortUsername
.
get
(
key
)
|
|
false
;
let
loginURI
=
Services
.
io
.
newURI
(
login
.
origin
)
;
hasHTTPSByHostPortUsername
.
set
(
key
loginURI
.
scheme
=
=
"
https
"
|
|
hasHTTPSlogin
)
;
}
return
logins
.
filter
(
login
=
>
{
let
key
=
this
.
getUniqueKeyForLogin
(
login
[
"
hostPort
"
"
username
"
]
)
;
let
loginURI
=
Services
.
io
.
newURI
(
login
.
origin
)
;
if
(
loginURI
.
scheme
=
=
"
http
"
&
&
hasHTTPSByHostPortUsername
.
get
(
key
)
)
{
return
false
;
}
return
true
;
}
)
;
}
getUniqueKeyForLogin
(
login
uniqueKeys
)
{
const
KEY_DELIMITER
=
"
:
"
;
return
uniqueKeys
.
reduce
(
(
prev
key
)
=
>
{
let
val
=
null
;
if
(
key
=
=
"
hostPort
"
)
{
val
=
Services
.
io
.
newURI
(
login
.
origin
)
.
hostPort
;
}
else
{
val
=
login
[
key
]
;
}
return
prev
+
KEY_DELIMITER
+
val
;
}
"
"
)
;
}
dedupeLogins
(
logins
uniqueKeys
=
[
"
username
"
"
password
"
]
resolveBy
=
[
"
timeLastUsed
"
]
preferredOrigin
=
undefined
preferredFormActionOrigin
=
undefined
)
{
if
(
!
preferredOrigin
)
{
if
(
resolveBy
.
includes
(
"
scheme
"
)
)
{
throw
new
Error
(
"
dedupeLogins
:
preferredOrigin
is
required
in
order
to
"
+
"
prefer
schemes
which
match
it
.
"
)
;
}
if
(
resolveBy
.
includes
(
"
subdomain
"
)
)
{
throw
new
Error
(
"
dedupeLogins
:
preferredOrigin
is
required
in
order
to
"
+
"
prefer
subdomains
which
match
it
.
"
)
;
}
}
let
preferredOriginScheme
;
if
(
preferredOrigin
)
{
try
{
preferredOriginScheme
=
Services
.
io
.
newURI
(
preferredOrigin
)
.
scheme
;
}
catch
(
ex
)
{
}
}
if
(
!
preferredOriginScheme
&
&
resolveBy
.
includes
(
"
scheme
"
)
)
{
log
.
warn
(
"
dedupeLogins
:
Deduping
with
a
scheme
preference
but
couldn
'
t
"
+
"
get
the
preferred
origin
scheme
.
"
)
;
}
let
loginsByKeys
=
new
Map
(
)
;
function
isLoginPreferred
(
existingLogin
login
)
{
if
(
!
resolveBy
|
|
resolveBy
.
length
=
=
0
)
{
return
false
;
}
for
(
let
preference
of
resolveBy
)
{
switch
(
preference
)
{
case
"
actionOrigin
"
:
{
if
(
!
preferredFormActionOrigin
)
{
break
;
}
if
(
LoginHelper
.
isOriginMatching
(
existingLogin
.
formActionOrigin
preferredFormActionOrigin
{
schemeUpgrades
:
LoginHelper
.
schemeUpgrades
}
)
&
&
!
LoginHelper
.
isOriginMatching
(
login
.
formActionOrigin
preferredFormActionOrigin
{
schemeUpgrades
:
LoginHelper
.
schemeUpgrades
}
)
)
{
return
false
;
}
break
;
}
case
"
scheme
"
:
{
if
(
!
preferredOriginScheme
)
{
break
;
}
try
{
let
existingLoginURI
=
Services
.
io
.
newURI
(
existingLogin
.
origin
)
;
let
loginURI
=
Services
.
io
.
newURI
(
login
.
origin
)
;
if
(
loginURI
.
scheme
=
=
existingLoginURI
.
scheme
|
|
(
loginURI
.
scheme
!
=
preferredOriginScheme
&
&
existingLoginURI
.
scheme
!
=
preferredOriginScheme
)
)
{
break
;
}
return
loginURI
.
scheme
=
=
preferredOriginScheme
;
}
catch
(
ex
)
{
log
.
debug
(
"
dedupeLogins
/
shouldReplaceExisting
:
Error
comparing
schemes
:
"
existingLogin
.
origin
login
.
origin
"
preferredOrigin
:
"
preferredOrigin
ex
)
;
}
break
;
}
case
"
subdomain
"
:
{
let
existingLoginURI
=
Services
.
io
.
newURI
(
existingLogin
.
origin
)
;
let
newLoginURI
=
Services
.
io
.
newURI
(
login
.
origin
)
;
let
preferredOriginURI
=
Services
.
io
.
newURI
(
preferredOrigin
)
;
if
(
existingLoginURI
.
hostPort
!
=
preferredOriginURI
.
hostPort
&
&
newLoginURI
.
hostPort
=
=
preferredOriginURI
.
hostPort
)
{
return
true
;
}
if
(
existingLoginURI
.
host
!
=
preferredOriginURI
.
host
&
&
newLoginURI
.
host
=
=
preferredOriginURI
.
host
)
{
return
true
;
}
break
;
}
case
"
timeLastUsed
"
:
case
"
timePasswordChanged
"
:
{
let
loginDate
=
login
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
[
preference
]
;
let
storedLoginDate
=
existingLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
[
preference
]
;
if
(
loginDate
=
=
storedLoginDate
)
{
break
;
}
return
loginDate
>
storedLoginDate
;
}
default
:
{
throw
new
Error
(
"
dedupeLogins
:
Invalid
resolveBy
preference
:
"
+
preference
)
;
}
}
}
return
false
;
}
for
(
let
login
of
logins
)
{
let
key
=
this
.
getUniqueKeyForLogin
(
login
uniqueKeys
)
;
if
(
loginsByKeys
.
has
(
key
)
)
{
if
(
!
isLoginPreferred
(
loginsByKeys
.
get
(
key
)
login
)
)
{
continue
;
}
}
loginsByKeys
.
set
(
key
login
)
;
}
return
[
.
.
.
loginsByKeys
.
values
(
)
]
;
}
openPasswordManager
(
window
{
filterString
=
"
"
entryPoint
=
"
"
}
=
{
}
)
{
Services
.
telemetry
.
recordEvent
(
"
pwmgr
"
"
open_management
"
entryPoint
)
;
if
(
this
.
managementURI
&
&
window
.
openTrustedLinkIn
)
{
let
managementURL
=
this
.
managementURI
.
replace
(
"
%
DOMAIN
%
"
window
.
encodeURIComponent
(
filterString
)
)
;
window
.
openTrustedLinkIn
(
managementURL
"
tab
"
)
;
return
;
}
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
Toolkit
:
PasswordManager
"
)
;
if
(
win
)
{
win
.
setFilter
(
filterString
)
;
win
.
focus
(
)
;
}
else
{
window
.
openDialog
(
"
chrome
:
/
/
passwordmgr
/
content
/
passwordManager
.
xul
"
"
Toolkit
:
PasswordManager
"
"
"
{
filterString
}
)
;
}
}
isUsernameFieldType
(
element
)
{
if
(
ChromeUtils
.
getClassName
(
element
)
!
=
=
"
HTMLInputElement
"
)
{
return
false
;
}
if
(
!
element
.
isConnected
)
{
return
false
;
}
let
fieldType
=
element
.
hasAttribute
(
"
type
"
)
?
element
.
getAttribute
(
"
type
"
)
.
toLowerCase
(
)
:
element
.
type
;
if
(
!
(
fieldType
=
=
"
text
"
|
|
fieldType
=
=
"
email
"
|
|
fieldType
=
=
"
url
"
|
|
fieldType
=
=
"
tel
"
|
|
fieldType
=
=
"
number
"
)
)
{
return
false
;
}
let
acFieldName
=
element
.
getAutocompleteInfo
(
)
.
fieldName
;
if
(
!
(
acFieldName
=
=
"
username
"
|
|
acFieldName
=
=
"
email
"
|
|
acFieldName
=
=
"
tel
"
|
|
acFieldName
=
=
"
tel
-
national
"
|
|
acFieldName
=
=
"
off
"
|
|
acFieldName
=
=
"
on
"
|
|
acFieldName
=
=
"
"
)
)
{
return
false
;
}
return
true
;
}
async
maybeImportLogins
(
loginDatas
)
{
let
loginsToAdd
=
[
]
;
let
loginMap
=
new
Map
(
)
;
for
(
let
loginData
of
loginDatas
)
{
let
login
=
Cc
[
"
mozilla
.
org
/
login
-
manager
/
loginInfo
;
1
"
]
.
createInstance
(
Ci
.
nsILoginInfo
)
;
login
.
init
(
loginData
.
origin
loginData
.
formActionOrigin
|
|
(
typeof
loginData
.
httpRealm
=
=
"
string
"
?
null
:
"
"
)
typeof
loginData
.
httpRealm
=
=
"
string
"
?
loginData
.
httpRealm
:
null
loginData
.
username
loginData
.
password
loginData
.
usernameElement
|
|
"
"
loginData
.
passwordElement
|
|
"
"
)
;
login
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
login
.
timeCreated
=
loginData
.
timeCreated
;
login
.
timeLastUsed
=
loginData
.
timeLastUsed
|
|
loginData
.
timeCreated
;
login
.
timePasswordChanged
=
loginData
.
timePasswordChanged
|
|
loginData
.
timeCreated
;
login
.
timesUsed
=
loginData
.
timesUsed
|
|
1
;
try
{
this
.
checkLoginValues
(
login
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
continue
;
}
let
newLogins
=
loginMap
.
get
(
login
.
origin
)
|
|
[
]
;
if
(
!
newLogins
)
{
loginMap
.
set
(
login
.
origin
newLogins
)
;
}
else
{
if
(
newLogins
.
some
(
l
=
>
login
.
matches
(
l
false
)
)
)
{
continue
;
}
let
foundMatchingNewLogin
=
false
;
for
(
let
newLogin
of
newLogins
)
{
if
(
login
.
username
=
=
newLogin
.
username
)
{
foundMatchingNewLogin
=
true
;
newLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
if
(
(
login
.
password
!
=
newLogin
.
password
)
&
(
login
.
timePasswordChanged
>
newLogin
.
timePasswordChanged
)
)
{
newLogin
.
password
=
login
.
password
;
newLogin
.
timePasswordChanged
=
login
.
timePasswordChanged
;
}
}
}
if
(
foundMatchingNewLogin
)
{
continue
;
}
}
let
existingLogins
=
Services
.
logins
.
findLogins
(
login
.
origin
login
.
formActionOrigin
login
.
httpRealm
)
;
if
(
existingLogins
.
some
(
l
=
>
login
.
matches
(
l
false
)
)
)
{
continue
;
}
let
foundMatchingLogin
=
false
;
for
(
let
existingLogin
of
existingLogins
)
{
if
(
login
.
username
=
=
existingLogin
.
username
)
{
foundMatchingLogin
=
true
;
existingLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
if
(
(
login
.
password
!
=
existingLogin
.
password
)
&
(
login
.
timePasswordChanged
>
existingLogin
.
timePasswordChanged
)
)
{
let
propBag
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag
)
;
propBag
.
setProperty
(
"
password
"
login
.
password
)
;
propBag
.
setProperty
(
"
timePasswordChanged
"
login
.
timePasswordChanged
)
;
Services
.
logins
.
modifyLogin
(
existingLogin
propBag
)
;
}
}
}
if
(
foundMatchingLogin
)
{
continue
;
}
newLogins
.
push
(
login
)
;
loginsToAdd
.
push
(
login
)
;
}
if
(
!
loginsToAdd
.
length
)
{
return
[
]
;
}
return
Services
.
logins
.
addLogins
(
loginsToAdd
)
;
}
loginsToVanillaObjects
(
logins
)
{
return
logins
.
map
(
this
.
loginToVanillaObject
)
;
}
loginToVanillaObject
(
login
)
{
let
obj
=
{
}
;
for
(
let
i
in
login
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
)
{
if
(
typeof
login
[
i
]
!
=
=
"
function
"
)
{
obj
[
i
]
=
login
[
i
]
;
}
}
return
obj
;
}
vanillaObjectToLogin
(
login
)
{
let
formLogin
=
Cc
[
"
mozilla
.
org
/
login
-
manager
/
loginInfo
;
1
"
]
.
createInstance
(
Ci
.
nsILoginInfo
)
;
formLogin
.
init
(
login
.
origin
|
|
login
.
hostname
"
formSubmitURL
"
in
login
?
login
.
formSubmitURL
:
login
.
formActionOrigin
login
.
httpRealm
login
.
username
login
.
password
login
.
usernameField
login
.
passwordField
)
;
formLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
for
(
let
prop
of
[
"
guid
"
"
timeCreated
"
"
timeLastUsed
"
"
timePasswordChanged
"
"
timesUsed
"
]
)
{
formLogin
[
prop
]
=
login
[
prop
]
;
}
return
formLogin
;
}
vanillaObjectsToLogins
(
logins
)
{
return
logins
.
map
(
this
.
vanillaObjectToLogin
)
;
}
isMasterPasswordSet
(
)
{
let
tokenDB
=
Cc
[
"
mozilla
.
org
/
security
/
pk11tokendb
;
1
"
]
.
getService
(
Ci
.
nsIPK11TokenDB
)
;
let
token
=
tokenDB
.
getInternalKeyToken
(
)
;
return
token
.
hasPassword
;
}
notifyStorageChanged
(
changeType
data
)
{
let
dataObject
=
data
;
if
(
Array
.
isArray
(
data
)
)
{
dataObject
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
for
(
let
i
=
0
;
i
<
data
.
length
;
i
+
+
)
{
dataObject
.
appendElement
(
data
[
i
]
)
;
}
}
else
if
(
typeof
data
=
=
"
string
"
)
{
dataObject
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
dataObject
.
data
=
data
;
}
Services
.
obs
.
notifyObservers
(
dataObject
"
passwordmgr
-
storage
-
changed
"
changeType
)
;
}
isUserFacingLogin
(
login
)
{
return
!
login
.
origin
.
startsWith
(
"
chrome
:
/
/
"
)
;
}
async
getAllUserFacingLogins
(
)
{
try
{
let
logins
=
await
Services
.
logins
.
getAllLoginsAsync
(
)
;
return
logins
.
filter
(
this
.
isUserFacingLogin
)
;
}
catch
(
e
)
{
if
(
e
.
result
=
=
Cr
.
NS_ERROR_ABORT
)
{
return
[
]
;
}
throw
e
;
}
}
async
getBreachesForLogins
(
logins
breaches
=
null
)
{
if
(
!
breaches
)
{
breaches
=
await
RemoteSettings
(
"
fxmonitor
-
breaches
"
)
.
get
(
)
;
}
const
breachesByLoginGUID
=
new
Map
(
)
;
for
(
const
login
of
logins
)
{
const
loginURI
=
Services
.
io
.
newURI
(
login
.
origin
)
;
for
(
const
breach
of
breaches
)
{
if
(
!
breach
.
Domain
)
{
continue
;
}
if
(
Services
.
eTLD
.
hasRootDomain
(
loginURI
.
host
breach
.
Domain
)
&
&
login
.
timePasswordChanged
<
new
Date
(
breach
.
BreachDate
)
.
getTime
(
)
)
{
breachesByLoginGUID
.
set
(
login
.
guid
breach
)
;
}
}
}
return
breachesByLoginGUID
;
}
}
;
LoginHelper
.
init
(
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
LoginHelper
"
showInsecureFieldWarning
"
"
security
.
insecure_field_warning
.
contextual
.
enabled
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
logger
=
LoginHelper
.
createLogger
(
"
LoginHelper
"
)
;
return
logger
;
}
)
;
