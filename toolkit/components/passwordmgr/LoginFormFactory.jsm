"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginFormFactory
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormLikeFactory
"
"
resource
:
/
/
gre
/
modules
/
FormLikeFactory
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
return
LoginHelper
.
createLogger
(
"
LoginFormFactory
"
)
;
}
)
;
this
.
LoginFormFactory
=
{
_loginFormsByRootElement
:
new
WeakMap
(
)
_loginFormRootElementsByDocument
:
new
WeakMap
(
)
createFromForm
(
aForm
)
{
let
formLike
=
FormLikeFactory
.
createFromForm
(
aForm
)
;
formLike
.
action
=
LoginHelper
.
getFormActionOrigin
(
aForm
)
;
let
rootElementsSet
=
this
.
getRootElementsWeakSetForDocument
(
formLike
.
ownerDocument
)
;
rootElementsSet
.
add
(
formLike
.
rootElement
)
;
log
.
debug
(
"
adding
"
formLike
.
rootElement
"
to
root
elements
for
"
formLike
.
ownerDocument
)
;
this
.
_loginFormsByRootElement
.
set
(
formLike
.
rootElement
formLike
)
;
return
formLike
;
}
createFromField
(
aField
)
{
if
(
ChromeUtils
.
getClassName
(
aField
)
!
=
=
"
HTMLInputElement
"
|
|
(
!
aField
.
hasBeenTypePassword
&
&
!
LoginHelper
.
isUsernameFieldType
(
aField
)
)
|
|
!
aField
.
ownerDocument
)
{
throw
new
Error
(
"
createFromField
requires
a
password
or
username
field
in
a
document
"
)
;
}
let
form
=
aField
.
form
|
|
FormLikeFactory
.
closestFormIgnoringShadowRoots
(
aField
)
;
if
(
form
)
{
return
this
.
createFromForm
(
form
)
;
}
else
if
(
aField
.
hasAttribute
(
"
form
"
)
)
{
log
.
debug
(
"
createFromField
:
field
has
form
attribute
but
no
form
:
"
aField
.
getAttribute
(
"
form
"
)
)
;
}
let
formLike
=
FormLikeFactory
.
createFromField
(
aField
)
;
formLike
.
action
=
LoginHelper
.
getLoginOrigin
(
aField
.
ownerDocument
.
baseURI
)
;
log
.
debug
(
"
Created
non
-
form
LoginForm
for
rootElement
:
"
aField
.
ownerDocument
.
documentElement
)
;
let
rootElementsSet
=
this
.
getRootElementsWeakSetForDocument
(
formLike
.
ownerDocument
)
;
rootElementsSet
.
add
(
formLike
.
rootElement
)
;
log
.
debug
(
"
adding
"
formLike
.
rootElement
"
to
root
elements
for
"
formLike
.
ownerDocument
)
;
this
.
_loginFormsByRootElement
.
set
(
formLike
.
rootElement
formLike
)
;
return
formLike
;
}
getRootElementsWeakSetForDocument
(
aDocument
)
{
let
rootElementsSet
=
this
.
_loginFormRootElementsByDocument
.
get
(
aDocument
)
;
if
(
!
rootElementsSet
)
{
rootElementsSet
=
new
WeakSet
(
)
;
this
.
_loginFormRootElementsByDocument
.
set
(
aDocument
rootElementsSet
)
;
}
return
rootElementsSet
;
}
getForRootElement
(
aRootElement
)
{
return
this
.
_loginFormsByRootElement
.
get
(
aRootElement
)
;
}
setForRootElement
(
aRootElement
aLoginForm
)
{
return
this
.
_loginFormsByRootElement
.
set
(
aRootElement
aLoginForm
)
;
}
}
;
