"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginCSVImport
"
"
ImportFailedException
"
"
ImportFailedErrorType
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
ResponsivenessMonitor
:
"
resource
:
/
/
gre
/
modules
/
ResponsivenessMonitor
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
LoginHelper
:
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
CSV
:
"
resource
:
/
/
gre
/
modules
/
CSV
.
js
"
}
)
;
const
FIELD_TO_CSV_COLUMNS
=
{
origin
:
[
"
url
"
"
login_uri
"
]
username
:
[
"
username
"
"
login_username
"
]
password
:
[
"
password
"
"
login_password
"
]
httpRealm
:
[
"
httprealm
"
]
formActionOrigin
:
[
"
formactionorigin
"
]
guid
:
[
"
guid
"
]
timeCreated
:
[
"
timecreated
"
]
timeLastUsed
:
[
"
timelastused
"
]
timePasswordChanged
:
[
"
timepasswordchanged
"
]
}
;
const
ImportFailedErrorType
=
Object
.
freeze
(
{
CONFLICTING_VALUES_ERROR
:
"
CONFLICTING_VALUES_ERROR
"
FILE_FORMAT_ERROR
:
"
FILE_FORMAT_ERROR
"
FILE_PERMISSIONS_ERROR
:
"
FILE_PERMISSIONS_ERROR
"
UNABLE_TO_READ_ERROR
:
"
UNABLE_TO_READ_ERROR
"
}
)
;
class
ImportFailedException
extends
Error
{
constructor
(
errorType
message
)
{
super
(
message
!
=
null
?
message
:
errorType
)
;
this
.
errorType
=
errorType
;
}
}
class
LoginCSVImport
{
static
_getCSVColumnToFieldMap
(
)
{
let
csvColumnToField
=
new
Map
(
)
;
for
(
let
[
field
columns
]
of
Object
.
entries
(
FIELD_TO_CSV_COLUMNS
)
)
{
for
(
let
column
of
columns
)
{
csvColumnToField
.
set
(
column
.
toLowerCase
(
)
field
)
;
}
}
return
csvColumnToField
;
}
static
_getVanillaLoginFromCSVObject
(
csvObject
csvColumnToFieldMap
)
{
let
vanillaLogin
=
Object
.
create
(
null
)
;
for
(
let
columnName
of
Object
.
keys
(
csvObject
)
)
{
let
fieldName
=
csvColumnToFieldMap
.
get
(
columnName
.
toLowerCase
(
)
)
;
if
(
!
fieldName
)
{
continue
;
}
if
(
typeof
vanillaLogin
[
fieldName
]
!
=
"
undefined
"
&
&
vanillaLogin
[
fieldName
]
!
=
=
csvObject
[
columnName
]
)
{
return
{
}
;
}
vanillaLogin
[
fieldName
]
=
csvObject
[
columnName
]
;
}
if
(
vanillaLogin
.
httpRealm
=
=
=
"
"
)
{
vanillaLogin
.
httpRealm
=
null
;
}
return
vanillaLogin
;
}
static
_recordHistogramTelemetry
(
histogram
report
)
{
for
(
let
reportRow
of
report
)
{
let
{
result
}
=
reportRow
;
if
(
result
.
includes
(
"
error
"
)
)
{
histogram
.
add
(
"
error
"
)
;
}
else
{
histogram
.
add
(
result
)
;
}
}
}
static
async
importFromCSV
(
filePath
)
{
TelemetryStopwatch
.
start
(
"
PWMGR_IMPORT_LOGINS_FROM_FILE_MS
"
)
;
try
{
let
responsivenessMonitor
=
new
lazy
.
ResponsivenessMonitor
(
)
;
let
csvColumnToFieldMap
=
LoginCSVImport
.
_getCSVColumnToFieldMap
(
)
;
let
csvFieldToColumnMap
=
new
Map
(
)
;
let
csvString
;
try
{
csvString
=
await
IOUtils
.
readUTF8
(
filePath
{
encoding
:
"
utf
-
8
"
}
)
;
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
throw
new
ImportFailedException
(
ImportFailedErrorType
.
FILE_PERMISSIONS_ERROR
)
;
}
let
headerLine
;
let
parsedLines
;
try
{
let
delimiter
=
filePath
.
toUpperCase
(
)
.
endsWith
(
"
.
CSV
"
)
?
"
"
:
"
\
t
"
;
[
headerLine
parsedLines
]
=
lazy
.
CSV
.
parse
(
csvString
delimiter
)
;
}
catch
{
throw
new
ImportFailedException
(
ImportFailedErrorType
.
FILE_FORMAT_ERROR
)
;
}
if
(
parsedLines
&
&
headerLine
)
{
for
(
const
columnName
of
headerLine
)
{
const
fieldName
=
csvColumnToFieldMap
.
get
(
columnName
.
toLocaleLowerCase
(
)
)
;
if
(
fieldName
)
{
if
(
!
csvFieldToColumnMap
.
has
(
fieldName
)
)
{
csvFieldToColumnMap
.
set
(
fieldName
columnName
)
;
}
else
{
throw
new
ImportFailedException
(
ImportFailedErrorType
.
CONFLICTING_VALUES_ERROR
)
;
}
}
}
}
if
(
csvFieldToColumnMap
.
size
=
=
=
0
)
{
throw
new
ImportFailedException
(
ImportFailedErrorType
.
FILE_FORMAT_ERROR
)
;
}
if
(
parsedLines
[
0
]
&
&
(
!
csvFieldToColumnMap
.
has
(
"
origin
"
)
|
|
!
csvFieldToColumnMap
.
has
(
"
username
"
)
|
|
!
csvFieldToColumnMap
.
has
(
"
password
"
)
)
)
{
throw
new
ImportFailedException
(
ImportFailedErrorType
.
FILE_FORMAT_ERROR
)
;
}
let
loginsToImport
=
parsedLines
.
map
(
csvObject
=
>
{
return
LoginCSVImport
.
_getVanillaLoginFromCSVObject
(
csvObject
csvColumnToFieldMap
)
;
}
)
;
let
report
=
await
lazy
.
LoginHelper
.
maybeImportLogins
(
loginsToImport
)
;
for
(
const
reportRow
of
report
)
{
if
(
reportRow
.
result
=
=
=
"
error_missing_field
"
)
{
reportRow
.
field_name
=
csvFieldToColumnMap
.
get
(
reportRow
.
field_name
)
;
}
}
try
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_IMPORT_LOGINS_FROM_FILE_CATEGORICAL
"
)
;
this
.
_recordHistogramTelemetry
(
histogram
report
)
;
let
accumulatedDelay
=
responsivenessMonitor
.
finish
(
)
;
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_IMPORT_LOGINS_FROM_FILE_JANK_MS
"
)
.
add
(
accumulatedDelay
)
;
TelemetryStopwatch
.
finish
(
"
PWMGR_IMPORT_LOGINS_FROM_FILE_MS
"
)
;
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
}
LoginCSVImport
.
lastImportReport
=
report
;
return
report
;
}
finally
{
if
(
TelemetryStopwatch
.
running
(
"
PWMGR_IMPORT_LOGINS_FROM_FILE_MS
"
)
)
{
TelemetryStopwatch
.
cancel
(
"
PWMGR_IMPORT_LOGINS_FROM_FILE_MS
"
)
;
}
}
}
}
