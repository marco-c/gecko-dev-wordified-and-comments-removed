"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginAutoComplete
"
"
LoginAutoCompleteResult
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AutoCompleteChild
"
"
resource
:
/
/
gre
/
actors
/
AutoCompleteChild
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
InsecurePasswordUtils
"
"
resource
:
/
/
gre
/
modules
/
InsecurePasswordUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginFormFactory
"
"
resource
:
/
/
gre
/
modules
/
LoginFormFactory
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginManagerChild
"
"
resource
:
/
/
gre
/
modules
/
LoginManagerChild
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
formFillController
"
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
Ci
.
nsIFormFillController
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
SHOULD_SHOW_ORIGIN
"
"
signon
.
showAutoCompleteOrigins
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
return
LoginHelper
.
createLogger
(
"
LoginAutoCompleteResult
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
passwordMgrBundle
"
(
)
=
>
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
passwordmgr
/
locale
/
passwordmgr
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
dateAndTimeFormatter
"
(
)
=
>
{
return
new
Services
.
intl
.
DateTimeFormat
(
undefined
{
dateStyle
:
"
medium
"
}
)
;
}
)
;
function
loginSort
(
formHostPort
a
b
)
{
let
maybeHostPortA
=
LoginHelper
.
maybeGetHostPortForURL
(
a
.
origin
)
;
let
maybeHostPortB
=
LoginHelper
.
maybeGetHostPortForURL
(
b
.
origin
)
;
if
(
formHostPort
=
=
maybeHostPortA
&
&
formHostPort
!
=
maybeHostPortB
)
{
return
-
1
;
}
if
(
formHostPort
!
=
maybeHostPortA
&
&
formHostPort
=
=
maybeHostPortB
)
{
return
1
;
}
if
(
a
.
httpRealm
!
=
=
b
.
httpRealm
)
{
if
(
b
.
httpRealm
=
=
=
null
)
{
return
1
;
}
if
(
a
.
httpRealm
=
=
=
null
)
{
return
-
1
;
}
}
let
userA
=
a
.
username
.
toLowerCase
(
)
;
let
userB
=
b
.
username
.
toLowerCase
(
)
;
if
(
userA
<
userB
)
{
return
-
1
;
}
if
(
userA
>
userB
)
{
return
1
;
}
return
0
;
}
function
findDuplicates
(
loginList
)
{
let
seen
=
new
Set
(
)
;
let
duplicates
=
new
Set
(
)
;
for
(
let
login
of
loginList
)
{
if
(
seen
.
has
(
login
.
username
)
)
{
duplicates
.
add
(
login
.
username
)
;
}
seen
.
add
(
login
.
username
)
;
}
return
duplicates
;
}
function
getLocalizedString
(
key
formatArgs
=
null
)
{
if
(
formatArgs
)
{
return
passwordMgrBundle
.
formatStringFromName
(
key
formatArgs
)
;
}
return
passwordMgrBundle
.
GetStringFromName
(
key
)
;
}
class
AutocompleteItem
{
constructor
(
style
)
{
this
.
comment
=
"
"
;
this
.
style
=
style
;
this
.
value
=
"
"
;
}
removeFromStorage
(
)
{
}
}
class
InsecureLoginFormAutocompleteItem
extends
AutocompleteItem
{
constructor
(
)
{
super
(
"
insecureWarning
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
label
"
(
)
=
>
{
let
learnMoreString
=
getLocalizedString
(
"
insecureFieldWarningLearnMore
"
)
;
return
getLocalizedString
(
"
insecureFieldWarningDescription2
"
[
learnMoreString
]
)
;
}
)
;
}
}
class
LoginAutocompleteItem
extends
AutocompleteItem
{
constructor
(
login
isPasswordField
duplicateUsernames
actor
isOriginMatched
)
{
super
(
SHOULD_SHOW_ORIGIN
?
"
loginWithOrigin
"
:
"
login
"
)
;
this
.
_login
=
login
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
;
this
.
_actor
=
actor
;
XPCOMUtils
.
defineLazyGetter
(
this
"
label
"
(
)
=
>
{
let
username
=
login
.
username
;
if
(
!
username
|
|
duplicateUsernames
.
has
(
username
)
)
{
if
(
!
username
)
{
username
=
getLocalizedString
(
"
noUsername
"
)
;
}
let
time
=
dateAndTimeFormatter
.
format
(
new
Date
(
login
.
timePasswordChanged
)
)
;
username
=
getLocalizedString
(
"
loginHostAge
"
[
username
time
]
)
;
}
return
username
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
value
"
(
)
=
>
{
return
isPasswordField
?
login
.
password
:
login
.
username
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
comment
"
(
)
=
>
{
return
JSON
.
stringify
(
{
guid
:
login
.
guid
comment
:
isOriginMatched
&
&
login
.
httpRealm
=
=
=
null
?
getLocalizedString
(
"
displaySameOrigin
"
)
:
login
.
displayOrigin
}
)
;
}
)
;
}
removeFromStorage
(
)
{
if
(
this
.
_actor
)
{
let
vanilla
=
LoginHelper
.
loginToVanillaObject
(
this
.
_login
)
;
this
.
_actor
.
sendAsyncMessage
(
"
PasswordManager
:
removeLogin
"
{
login
:
vanilla
}
)
;
}
else
{
Services
.
logins
.
removeLogin
(
this
.
_login
)
;
}
}
}
class
GeneratedPasswordAutocompleteItem
extends
AutocompleteItem
{
constructor
(
generatedPassword
willAutoSaveGeneratedPassword
)
{
super
(
"
generatedPassword
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
comment
"
(
)
=
>
{
return
JSON
.
stringify
(
{
generatedPassword
willAutoSaveGeneratedPassword
}
)
;
}
)
;
this
.
value
=
generatedPassword
;
XPCOMUtils
.
defineLazyGetter
(
this
"
label
"
(
)
=
>
{
return
getLocalizedString
(
"
useASecurelyGeneratedPassword
"
)
;
}
)
;
}
}
class
LoginsFooterAutocompleteItem
extends
AutocompleteItem
{
constructor
(
hostname
)
{
super
(
"
loginsFooter
"
)
;
this
.
comment
=
hostname
;
XPCOMUtils
.
defineLazyGetter
(
this
"
label
"
(
)
=
>
{
return
getLocalizedString
(
"
viewSavedLogins
.
label
"
)
;
}
)
;
}
}
function
LoginAutoCompleteResult
(
aSearchString
matchingLogins
formOrigin
{
generatedPassword
willAutoSaveGeneratedPassword
isSecure
actor
isPasswordField
hostname
}
)
{
let
hidingFooterOnPWFieldAutoOpened
=
false
;
function
isFooterEnabled
(
)
{
if
(
!
LoginHelper
.
showAutoCompleteFooter
|
|
!
LoginHelper
.
enabled
)
{
return
false
;
}
if
(
isPasswordField
&
&
aSearchString
&
&
!
generatedPassword
)
{
log
.
debug
(
"
Hiding
footer
:
non
-
empty
password
field
"
)
;
return
false
;
}
if
(
!
matchingLogins
.
length
&
&
!
generatedPassword
&
&
isPasswordField
&
&
formFillController
.
passwordPopupAutomaticallyOpened
)
{
hidingFooterOnPWFieldAutoOpened
=
true
;
log
.
debug
(
"
Hiding
footer
:
no
logins
and
the
popup
was
opened
upon
focus
of
the
pw
.
field
"
)
;
return
false
;
}
return
true
;
}
this
.
searchString
=
aSearchString
;
this
.
_rows
=
[
]
;
if
(
!
isSecure
&
&
LoginHelper
.
showInsecureFieldWarning
)
{
this
.
_rows
.
push
(
new
InsecureLoginFormAutocompleteItem
(
)
)
;
}
let
formHostPort
=
LoginHelper
.
maybeGetHostPortForURL
(
formOrigin
)
;
let
logins
=
matchingLogins
.
sort
(
loginSort
.
bind
(
null
formHostPort
)
)
;
let
duplicateUsernames
=
findDuplicates
(
matchingLogins
)
;
for
(
let
login
of
logins
)
{
let
item
=
new
LoginAutocompleteItem
(
login
isPasswordField
duplicateUsernames
actor
LoginHelper
.
isOriginMatching
(
login
.
origin
formOrigin
{
schemeUpgrades
:
LoginHelper
.
schemeUpgrades
}
)
)
;
this
.
_rows
.
push
(
item
)
;
}
if
(
isFooterEnabled
(
)
)
{
if
(
generatedPassword
)
{
this
.
_rows
.
push
(
new
GeneratedPasswordAutocompleteItem
(
generatedPassword
willAutoSaveGeneratedPassword
)
)
;
}
this
.
_rows
.
push
(
new
LoginsFooterAutocompleteItem
(
hostname
)
)
;
}
if
(
this
.
matchCount
>
0
)
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
;
this
.
defaultIndex
=
0
;
}
else
if
(
hidingFooterOnPWFieldAutoOpened
)
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_FAILURE
;
this
.
defaultIndex
=
-
1
;
}
}
LoginAutoCompleteResult
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteResult
Ci
.
nsISupportsWeakReference
]
)
get
logins
(
)
{
return
this
.
_rows
.
filter
(
item
=
>
{
return
item
.
constructor
=
=
=
LoginAutocompleteItem
;
}
)
.
map
(
item
=
>
item
.
_login
)
;
}
get
wrappedJSObject
(
)
{
return
this
;
}
searchString
:
null
searchResult
:
Ci
.
nsIAutoCompleteResult
.
RESULT_NOMATCH
defaultIndex
:
-
1
errorDescription
:
"
"
get
matchCount
(
)
{
return
this
.
_rows
.
length
;
}
getValueAt
(
index
)
{
if
(
index
<
0
|
|
index
>
=
this
.
matchCount
)
{
throw
new
Error
(
"
Index
out
of
range
.
"
)
;
}
return
this
.
_rows
[
index
]
.
value
;
}
getLabelAt
(
index
)
{
if
(
index
<
0
|
|
index
>
=
this
.
matchCount
)
{
throw
new
Error
(
"
Index
out
of
range
.
"
)
;
}
return
this
.
_rows
[
index
]
.
label
;
}
getCommentAt
(
index
)
{
if
(
index
<
0
|
|
index
>
=
this
.
matchCount
)
{
throw
new
Error
(
"
Index
out
of
range
.
"
)
;
}
return
this
.
_rows
[
index
]
.
comment
;
}
getStyleAt
(
index
)
{
return
this
.
_rows
[
index
]
.
style
;
}
getImageAt
(
index
)
{
return
"
"
;
}
getFinalCompleteValueAt
(
index
)
{
return
this
.
getValueAt
(
index
)
;
}
removeValueAt
(
index
removeFromDB
)
{
if
(
index
<
0
|
|
index
>
=
this
.
matchCount
)
{
throw
new
Error
(
"
Index
out
of
range
.
"
)
;
}
let
[
removedItem
]
=
this
.
_rows
.
splice
(
index
1
)
;
if
(
this
.
defaultIndex
>
this
.
_rows
.
length
)
{
this
.
defaultIndex
-
-
;
}
if
(
removeFromDB
)
{
removedItem
.
removeFromStorage
(
)
;
}
}
}
;
function
LoginAutoComplete
(
)
{
}
LoginAutoComplete
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
2bdac17c
-
53f1
-
4896
-
a521
-
682ccdeef3a8
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsILoginAutoCompleteSearch
]
)
_autoCompleteLookupPromise
:
null
startSearch
(
aSearchString
aPreviousResult
aElement
aCallback
)
{
let
{
isNullPrincipal
}
=
aElement
.
nodePrincipal
;
if
(
aElement
.
nodePrincipal
.
schemeIs
(
"
about
"
)
)
{
return
;
}
let
isSecure
=
!
isNullPrincipal
;
if
(
isSecure
)
{
let
form
=
LoginFormFactory
.
createFromField
(
aElement
)
;
isSecure
=
InsecurePasswordUtils
.
isFormSecure
(
form
)
;
}
let
isPasswordField
=
aElement
.
type
=
=
"
password
"
;
let
hostname
=
aElement
.
ownerDocument
.
documentURIObject
.
host
;
let
loginManagerActor
=
LoginManagerChild
.
forWindow
(
aElement
.
ownerGlobal
)
;
let
completeSearch
=
async
autoCompleteLookupPromise
=
>
{
this
.
_autoCompleteLookupPromise
=
autoCompleteLookupPromise
;
let
{
generatedPassword
logins
willAutoSaveGeneratedPassword
}
=
await
autoCompleteLookupPromise
;
if
(
this
.
_autoCompleteLookupPromise
!
=
=
autoCompleteLookupPromise
)
{
log
.
debug
(
"
ignoring
result
from
previous
search
"
)
;
return
;
}
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
aElement
.
ownerDocument
.
documentURI
)
;
this
.
_autoCompleteLookupPromise
=
null
;
let
results
=
new
LoginAutoCompleteResult
(
aSearchString
logins
formOrigin
{
generatedPassword
willAutoSaveGeneratedPassword
actor
:
loginManagerActor
isSecure
isPasswordField
hostname
}
)
;
aCallback
.
onSearchCompletion
(
results
)
;
}
;
if
(
isNullPrincipal
)
{
completeSearch
(
Promise
.
resolve
(
{
logins
:
[
]
}
)
)
;
return
;
}
if
(
isPasswordField
&
&
aSearchString
&
&
!
loginManagerActor
.
isPasswordGenerationForcedOn
(
aElement
)
)
{
completeSearch
(
Promise
.
resolve
(
{
logins
:
[
]
}
)
)
;
return
;
}
if
(
!
LoginHelper
.
enabled
)
{
completeSearch
(
Promise
.
resolve
(
{
logins
:
[
]
}
)
)
;
return
;
}
log
.
debug
(
"
AutoCompleteSearch
invoked
.
Search
is
:
"
aSearchString
)
;
let
previousResult
;
if
(
aPreviousResult
)
{
previousResult
=
{
searchString
:
aPreviousResult
.
searchString
logins
:
LoginHelper
.
loginsToVanillaObjects
(
aPreviousResult
.
wrappedJSObject
.
logins
)
}
;
}
else
{
previousResult
=
null
;
}
let
acLookupPromise
=
this
.
_requestAutoCompleteResultsFromParent
(
aSearchString
previousResult
aElement
)
;
completeSearch
(
acLookupPromise
)
.
catch
(
log
.
error
.
bind
(
log
)
)
;
}
stopSearch
(
)
{
this
.
_autoCompleteLookupPromise
=
null
;
}
async
_requestAutoCompleteResultsFromParent
(
aSearchString
aPreviousResult
aElement
)
{
let
doc
=
aElement
.
ownerDocument
;
let
form
=
LoginFormFactory
.
createFromField
(
aElement
)
;
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
doc
.
documentURI
)
;
let
actionOrigin
=
LoginHelper
.
getFormActionOrigin
(
form
)
;
let
autocompleteInfo
=
aElement
.
getAutocompleteInfo
(
)
;
let
loginManagerActor
=
LoginManagerChild
.
forWindow
(
aElement
.
ownerGlobal
)
;
let
isPasswordField
=
aElement
.
type
=
=
"
password
"
;
let
forcePasswordGeneration
=
false
;
if
(
isPasswordField
)
{
forcePasswordGeneration
=
loginManagerActor
.
isPasswordGenerationForcedOn
(
aElement
)
;
}
let
messageData
=
{
autocompleteInfo
formOrigin
actionOrigin
searchString
:
aSearchString
previousResult
:
aPreviousResult
forcePasswordGeneration
isSecure
:
InsecurePasswordUtils
.
isFormSecure
(
form
)
isPasswordField
}
;
if
(
LoginHelper
.
showAutoCompleteFooter
)
{
gAutoCompleteListener
.
init
(
)
;
}
let
result
=
await
loginManagerActor
.
sendQuery
(
"
PasswordManager
:
autoCompleteLogins
"
messageData
)
;
return
{
generatedPassword
:
result
.
generatedPassword
logins
:
LoginHelper
.
vanillaObjectsToLogins
(
result
.
logins
)
willAutoSaveGeneratedPassword
:
result
.
willAutoSaveGeneratedPassword
}
;
}
}
;
let
gAutoCompleteListener
=
{
keyDownEnterForInput
:
null
added
:
false
init
(
)
{
if
(
!
this
.
added
)
{
AutoCompleteChild
.
addPopupStateListener
(
this
)
;
this
.
added
=
true
;
}
}
popupStateChanged
(
messageName
data
target
)
{
switch
(
messageName
)
{
case
"
FormAutoComplete
:
PopupOpened
"
:
{
let
{
chromeEventHandler
}
=
target
.
docShell
;
chromeEventHandler
.
addEventListener
(
"
keydown
"
this
true
)
;
break
;
}
case
"
FormAutoComplete
:
PopupClosed
"
:
{
this
.
onPopupClosed
(
data
.
selectedRowStyle
target
)
;
let
{
chromeEventHandler
}
=
target
.
docShell
;
chromeEventHandler
.
removeEventListener
(
"
keydown
"
this
true
)
;
break
;
}
}
}
handleEvent
(
event
)
{
if
(
event
.
type
!
=
"
keydown
"
)
{
return
;
}
let
focusedElement
=
formFillController
.
focusedInput
;
if
(
event
.
keyCode
!
=
event
.
DOM_VK_RETURN
|
|
focusedElement
!
=
event
.
target
)
{
this
.
keyDownEnterForInput
=
null
;
return
;
}
this
.
keyDownEnterForInput
=
focusedElement
;
}
onPopupClosed
(
selectedRowStyle
window
)
{
let
focusedElement
=
formFillController
.
focusedInput
;
let
eventTarget
=
this
.
keyDownEnterForInput
;
if
(
!
eventTarget
|
|
eventTarget
!
=
=
focusedElement
|
|
selectedRowStyle
!
=
"
loginsFooter
"
)
{
this
.
keyDownEnterForInput
=
null
;
return
;
}
let
loginManager
=
window
.
windowGlobalChild
.
getActor
(
"
LoginManager
"
)
;
let
hostname
=
eventTarget
.
ownerDocument
.
documentURIObject
.
host
;
loginManager
.
sendAsyncMessage
(
"
PasswordManager
:
OpenPreferences
"
{
hostname
entryPoint
:
"
autocomplete
"
}
)
;
}
}
;
