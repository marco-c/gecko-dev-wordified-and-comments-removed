"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
LoginManagerContent
"
]
;
const
PASSWORD_INPUT_ADDED_COALESCING_THRESHOLD_MS
=
1
;
const
AUTOCOMPLETE_AFTER_RIGHT_CLICK_THRESHOLD_MS
=
400
;
const
AUTOFILL_STATE
=
"
-
moz
-
autofill
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
PrivateBrowsingUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
const
{
CreditCard
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
CreditCard
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DeferredTask
"
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormLikeFactory
"
"
resource
:
/
/
gre
/
modules
/
FormLikeFactory
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginFormFactory
"
"
resource
:
/
/
gre
/
modules
/
LoginFormFactory
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginRecipesContent
"
"
resource
:
/
/
gre
/
modules
/
LoginRecipes
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
InsecurePasswordUtils
"
"
resource
:
/
/
gre
/
modules
/
InsecurePasswordUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gNetUtil
"
"
mozilla
.
org
/
network
/
util
;
1
"
"
nsINetUtil
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
logger
=
LoginHelper
.
createLogger
(
"
LoginManagerContent
"
)
;
return
logger
.
log
.
bind
(
logger
)
;
}
)
;
Services
.
cpmm
.
addMessageListener
(
"
clearRecipeCache
"
(
)
=
>
{
LoginRecipesContent
.
_clearRecipeCache
(
)
;
}
)
;
let
gLastRightClickTimeStamp
=
Number
.
NEGATIVE_INFINITY
;
const
observer
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
onLocationChange
(
aWebProgress
aRequest
aLocation
aFlags
)
{
if
(
!
(
aFlags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
|
|
!
(
aWebProgress
.
loadType
&
Ci
.
nsIDocShell
.
LOAD_CMD_PUSHSTATE
)
)
{
return
;
}
log
(
"
onLocationChange
handled
:
"
aLocation
.
displaySpec
aWebProgress
.
DOMWindow
.
document
)
;
LoginManagerContent
.
_onNavigation
(
aWebProgress
.
DOMWindow
.
document
)
;
}
onStateChange
(
aWebProgress
aRequest
aState
aStatus
)
{
if
(
(
aState
&
Ci
.
nsIWebProgressListener
.
STATE_RESTORING
)
&
&
(
aState
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
)
)
{
LoginManagerContent
.
_onDocumentRestored
(
aWebProgress
.
DOMWindow
.
document
)
;
return
;
}
if
(
!
(
aState
&
Ci
.
nsIWebProgressListener
.
STATE_START
)
)
{
return
;
}
let
channel
=
aRequest
.
QueryInterface
(
Ci
.
nsIChannel
)
;
let
triggeringPrincipal
=
channel
.
loadInfo
.
triggeringPrincipal
;
if
(
triggeringPrincipal
.
isNullPrincipal
|
|
triggeringPrincipal
.
equals
(
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
)
{
return
;
}
if
(
!
(
aWebProgress
.
loadType
&
Ci
.
nsIDocShell
.
LOAD_CMD_NORMAL
)
)
{
log
(
"
onStateChange
:
loadType
isn
'
t
LOAD_CMD_NORMAL
:
"
aWebProgress
.
loadType
)
;
return
;
}
log
(
"
onStateChange
handled
:
"
channel
)
;
LoginManagerContent
.
_onNavigation
(
aWebProgress
.
DOMWindow
.
document
)
;
}
handleEvent
(
aEvent
)
{
if
(
!
aEvent
.
isTrusted
)
{
return
;
}
if
(
!
LoginHelper
.
enabled
)
{
return
;
}
switch
(
aEvent
.
type
)
{
case
"
keydown
"
:
{
if
(
aEvent
.
keyCode
=
=
aEvent
.
DOM_VK_TAB
|
|
aEvent
.
keyCode
=
=
aEvent
.
DOM_VK_RETURN
)
{
LoginManagerContent
.
onUsernameInput
(
aEvent
)
;
}
break
;
}
case
"
focus
"
:
{
LoginManagerContent
.
_onUsernameFocus
(
aEvent
)
;
break
;
}
case
"
mousedown
"
:
{
if
(
aEvent
.
button
=
=
2
)
{
gLastRightClickTimeStamp
=
Date
.
now
(
)
;
}
break
;
}
default
:
{
throw
new
Error
(
"
Unexpected
event
"
)
;
}
}
}
}
;
this
.
LoginManagerContent
=
{
__formFillService
:
null
get
_formFillService
(
)
{
if
(
!
this
.
__formFillService
)
{
this
.
__formFillService
=
Cc
[
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
]
.
getService
(
Ci
.
nsIFormFillController
)
;
}
return
this
.
__formFillService
;
}
_getRandomId
(
)
{
return
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
.
generateUUID
(
)
.
toString
(
)
;
}
_messages
:
[
"
PasswordManager
:
loginsFound
"
"
PasswordManager
:
loginsAutoCompleted
"
]
_deferredPasswordAddedTasksByRootElement
:
new
WeakMap
(
)
_onVisibleTasksByDocument
:
new
WeakMap
(
)
_requests
:
new
Map
(
)
_managers
:
new
Map
(
)
_keyDownEnterForInput
:
null
_takeRequest
(
msg
)
{
let
data
=
msg
.
data
;
let
request
=
this
.
_requests
.
get
(
data
.
requestId
)
;
this
.
_requests
.
delete
(
data
.
requestId
)
;
let
count
=
this
.
_managers
.
get
(
msg
.
target
)
;
if
(
-
-
count
=
=
=
0
)
{
this
.
_managers
.
delete
(
msg
.
target
)
;
for
(
let
message
of
this
.
_messages
)
{
msg
.
target
.
removeMessageListener
(
message
this
)
;
}
}
else
{
this
.
_managers
.
set
(
msg
.
target
count
)
;
}
return
request
;
}
_sendRequest
(
messageManager
requestData
name
messageData
)
{
let
count
;
if
(
!
(
count
=
this
.
_managers
.
get
(
messageManager
)
)
)
{
this
.
_managers
.
set
(
messageManager
1
)
;
for
(
let
message
of
this
.
_messages
)
{
messageManager
.
addMessageListener
(
message
this
)
;
}
}
else
{
this
.
_managers
.
set
(
messageManager
+
+
count
)
;
}
let
requestId
=
this
.
_getRandomId
(
)
;
messageData
.
requestId
=
requestId
;
messageManager
.
sendAsyncMessage
(
name
messageData
)
;
let
deferred
=
PromiseUtils
.
defer
(
)
;
requestData
.
promise
=
deferred
;
this
.
_requests
.
set
(
requestId
requestData
)
;
return
deferred
.
promise
;
}
_onKeyDown
(
event
)
{
let
focusedElement
=
LoginManagerContent
.
_formFillService
.
focusedInput
;
if
(
event
.
keyCode
!
=
event
.
DOM_VK_RETURN
|
|
focusedElement
!
=
event
.
target
)
{
this
.
_keyDownEnterForInput
=
null
;
return
;
}
LoginManagerContent
.
_keyDownEnterForInput
=
focusedElement
;
}
_onPopupClosed
(
selectedRowStyle
mm
)
{
let
focusedElement
=
LoginManagerContent
.
_formFillService
.
focusedInput
;
let
eventTarget
=
LoginManagerContent
.
_keyDownEnterForInput
;
if
(
!
eventTarget
|
|
eventTarget
!
=
=
focusedElement
|
|
selectedRowStyle
!
=
"
loginsFooter
"
)
{
this
.
_keyDownEnterForInput
=
null
;
return
;
}
let
hostname
=
eventTarget
.
ownerDocument
.
documentURIObject
.
host
;
mm
.
sendAsyncMessage
(
"
PasswordManager
:
OpenPreferences
"
{
hostname
entryPoint
:
"
autocomplete
"
}
)
;
}
receiveMessage
(
msg
topWindow
)
{
if
(
msg
.
name
=
=
"
PasswordManager
:
fillForm
"
)
{
this
.
fillForm
(
{
topDocument
:
topWindow
.
document
loginFormOrigin
:
msg
.
data
.
loginFormOrigin
loginsFound
:
LoginHelper
.
vanillaObjectsToLogins
(
msg
.
data
.
logins
)
recipes
:
msg
.
data
.
recipes
inputElement
:
msg
.
objects
.
inputElement
}
)
;
return
;
}
switch
(
msg
.
name
)
{
case
"
PasswordManager
:
loginsFound
"
:
{
let
loginsFound
=
LoginHelper
.
vanillaObjectsToLogins
(
msg
.
data
.
logins
)
;
let
request
=
this
.
_takeRequest
(
msg
)
;
request
.
promise
.
resolve
(
{
form
:
request
.
form
loginsFound
recipes
:
msg
.
data
.
recipes
}
)
;
break
;
}
case
"
PasswordManager
:
loginsAutoCompleted
"
:
{
let
loginsFound
=
LoginHelper
.
vanillaObjectsToLogins
(
msg
.
data
.
logins
)
;
let
messageManager
=
msg
.
target
;
let
request
=
this
.
_takeRequest
(
msg
)
;
request
.
promise
.
resolve
(
{
generatedPassword
:
msg
.
data
.
generatedPassword
logins
:
loginsFound
messageManager
}
)
;
break
;
}
case
"
FormAutoComplete
:
PopupOpened
"
:
{
let
{
chromeEventHandler
}
=
msg
.
target
.
docShell
;
chromeEventHandler
.
addEventListener
(
"
keydown
"
this
.
_onKeyDown
true
)
;
break
;
}
case
"
FormAutoComplete
:
PopupClosed
"
:
{
this
.
_onPopupClosed
(
msg
.
data
.
selectedRowStyle
msg
.
target
)
;
let
{
chromeEventHandler
}
=
msg
.
target
.
docShell
;
chromeEventHandler
.
removeEventListener
(
"
keydown
"
this
.
_onKeyDown
true
)
;
break
;
}
}
}
_getLoginDataFromParent
(
form
options
)
{
let
doc
=
form
.
ownerDocument
;
let
win
=
doc
.
defaultView
;
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
doc
.
documentURI
)
;
if
(
!
formOrigin
)
{
return
Promise
.
reject
(
"
_getLoginDataFromParent
:
A
form
origin
is
required
"
)
;
}
let
actionOrigin
=
LoginHelper
.
getFormActionOrigin
(
form
)
;
let
messageManager
=
win
.
docShell
.
messageManager
;
let
requestData
=
{
form
}
;
let
messageData
=
{
formOrigin
actionOrigin
options
}
;
return
this
.
_sendRequest
(
messageManager
requestData
"
PasswordManager
:
findLogins
"
messageData
)
;
}
_autoCompleteSearchAsync
(
aSearchString
aPreviousResult
aElement
)
{
let
doc
=
aElement
.
ownerDocument
;
let
form
=
LoginFormFactory
.
createFromField
(
aElement
)
;
let
win
=
doc
.
defaultView
;
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
doc
.
documentURI
)
;
let
actionOrigin
=
LoginHelper
.
getFormActionOrigin
(
form
)
;
let
autocompleteInfo
=
aElement
.
getAutocompleteInfo
(
)
;
let
messageManager
=
win
.
docShell
.
messageManager
;
let
previousResult
=
aPreviousResult
?
{
searchString
:
aPreviousResult
.
searchString
logins
:
LoginHelper
.
loginsToVanillaObjects
(
aPreviousResult
.
logins
)
}
:
null
;
let
requestData
=
{
}
;
let
messageData
=
{
autocompleteInfo
browsingContextId
:
win
.
docShell
.
browsingContext
.
id
formOrigin
actionOrigin
searchString
:
aSearchString
previousResult
isSecure
:
InsecurePasswordUtils
.
isFormSecure
(
form
)
isPasswordField
:
aElement
.
type
=
=
"
password
"
}
;
if
(
LoginHelper
.
showAutoCompleteFooter
)
{
messageManager
.
addMessageListener
(
"
FormAutoComplete
:
PopupOpened
"
this
)
;
messageManager
.
addMessageListener
(
"
FormAutoComplete
:
PopupClosed
"
this
)
;
}
return
this
.
_sendRequest
(
messageManager
requestData
"
PasswordManager
:
autoCompleteLogins
"
messageData
)
;
}
setupEventListeners
(
global
)
{
global
.
addEventListener
(
"
pageshow
"
(
event
)
=
>
{
this
.
onPageShow
(
event
)
;
}
)
;
}
setupProgressListener
(
window
)
{
if
(
!
LoginHelper
.
formlessCaptureEnabled
)
{
return
;
}
try
{
let
webProgress
=
window
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
webProgress
.
addProgressListener
(
observer
Ci
.
nsIWebProgress
.
NOTIFY_STATE_DOCUMENT
|
Ci
.
nsIWebProgress
.
NOTIFY_LOCATION
)
;
}
catch
(
ex
)
{
}
}
onDOMFormBeforeSubmit
(
event
)
{
if
(
!
event
.
isTrusted
)
{
return
;
}
log
(
"
notified
before
form
submission
"
)
;
let
formLike
=
LoginFormFactory
.
createFromForm
(
event
.
target
)
;
LoginManagerContent
.
_onFormSubmit
(
formLike
)
;
}
onDocumentVisibilityChange
(
event
)
{
if
(
!
event
.
isTrusted
)
{
return
;
}
let
document
=
event
.
target
;
let
onVisibleTasks
=
this
.
_onVisibleTasksByDocument
.
get
(
document
)
;
if
(
!
onVisibleTasks
)
{
return
;
}
for
(
let
task
of
onVisibleTasks
)
{
log
(
"
onDocumentVisibilityChange
executing
queued
task
"
)
;
task
(
)
;
}
this
.
_onVisibleTasksByDocument
.
delete
(
document
)
;
}
_deferHandlingEventUntilDocumentVisible
(
event
document
fn
)
{
log
(
document
.
visibilityState
:
{
document
.
visibilityState
}
defer
handling
{
event
.
type
}
)
;
let
onVisibleTasks
=
this
.
_onVisibleTasksByDocument
.
get
(
document
)
;
if
(
!
onVisibleTasks
)
{
log
(
deferHandling
first
queued
event
register
the
visibilitychange
handler
)
;
onVisibleTasks
=
[
]
;
this
.
_onVisibleTasksByDocument
.
set
(
document
onVisibleTasks
)
;
document
.
addEventListener
(
"
visibilitychange
"
event
=
>
{
this
.
onDocumentVisibilityChange
(
event
)
;
}
{
once
:
true
}
)
;
}
onVisibleTasks
.
push
(
fn
)
;
}
onDOMFormHasPassword
(
event
)
{
if
(
!
event
.
isTrusted
)
{
return
;
}
let
isMasterPasswordSet
=
Services
.
cpmm
.
sharedData
.
get
(
"
isMasterPasswordSet
"
)
;
let
document
=
event
.
target
.
ownerDocument
;
log
(
"
onDOMFormHasPassword
visibilityState
:
"
document
.
visibilityState
"
isMasterPasswordSet
:
"
isMasterPasswordSet
)
;
if
(
document
.
visibilityState
=
=
"
visible
"
|
|
isMasterPasswordSet
)
{
this
.
_processDOMFormHasPasswordEvent
(
event
)
;
}
else
{
this
.
_deferHandlingEventUntilDocumentVisible
(
event
document
(
)
=
>
{
this
.
_processDOMFormHasPasswordEvent
(
event
)
;
}
)
;
}
}
_processDOMFormHasPasswordEvent
(
event
)
{
let
form
=
event
.
target
;
let
formLike
=
LoginFormFactory
.
createFromForm
(
form
)
;
log
(
"
_processDOMFormHasPasswordEvent
:
"
form
formLike
)
;
this
.
_fetchLoginsFromParentAndFillForm
(
formLike
)
;
}
onDOMInputPasswordAdded
(
event
topWindow
)
{
if
(
!
event
.
isTrusted
)
{
return
;
}
this
.
setupProgressListener
(
topWindow
)
;
let
pwField
=
event
.
originalTarget
;
if
(
pwField
.
form
)
{
return
;
}
let
document
=
pwField
.
ownerDocument
;
let
isMasterPasswordSet
=
Services
.
cpmm
.
sharedData
.
get
(
"
isMasterPasswordSet
"
)
;
log
(
"
onDOMInputPasswordAdded
visibilityState
:
"
document
.
visibilityState
"
isMasterPasswordSet
:
"
isMasterPasswordSet
)
;
if
(
document
.
visibilityState
=
=
"
visible
"
|
|
isMasterPasswordSet
)
{
this
.
_processDOMInputPasswordAddedEvent
(
event
topWindow
)
;
}
else
{
this
.
_deferHandlingEventUntilDocumentVisible
(
event
document
(
)
=
>
{
this
.
_processDOMInputPasswordAddedEvent
(
event
topWindow
)
;
}
)
;
}
}
_processDOMInputPasswordAddedEvent
(
event
topWindow
)
{
let
pwField
=
event
.
originalTarget
;
let
formLike
=
LoginFormFactory
.
createFromField
(
pwField
)
;
log
(
"
_processDOMInputPasswordAddedEvent
:
"
pwField
formLike
)
;
let
deferredTask
=
this
.
_deferredPasswordAddedTasksByRootElement
.
get
(
formLike
.
rootElement
)
;
if
(
!
deferredTask
)
{
log
(
"
Creating
a
DeferredTask
to
call
_fetchLoginsFromParentAndFillForm
soon
"
)
;
LoginFormFactory
.
setForRootElement
(
formLike
.
rootElement
formLike
)
;
deferredTask
=
new
DeferredTask
(
(
)
=
>
{
let
formLike2
=
LoginFormFactory
.
getForRootElement
(
formLike
.
rootElement
)
;
log
(
"
Running
deferred
processing
of
onDOMInputPasswordAdded
"
formLike2
)
;
this
.
_deferredPasswordAddedTasksByRootElement
.
delete
(
formLike2
.
rootElement
)
;
this
.
_fetchLoginsFromParentAndFillForm
(
formLike2
)
;
}
PASSWORD_INPUT_ADDED_COALESCING_THRESHOLD_MS
0
)
;
this
.
_deferredPasswordAddedTasksByRootElement
.
set
(
formLike
.
rootElement
deferredTask
)
;
}
let
window
=
pwField
.
ownerGlobal
;
if
(
deferredTask
.
isArmed
)
{
log
(
"
DeferredTask
is
already
armed
so
just
updating
the
LoginForm
"
)
;
LoginFormFactory
.
setForRootElement
(
formLike
.
rootElement
formLike
)
;
}
else
if
(
window
.
document
.
readyState
=
=
"
complete
"
)
{
log
(
"
Arming
the
DeferredTask
we
just
created
since
document
.
readyState
=
=
'
complete
'
"
)
;
deferredTask
.
arm
(
)
;
}
else
{
window
.
addEventListener
(
"
DOMContentLoaded
"
function
(
)
{
log
(
"
Arming
the
onDOMInputPasswordAdded
DeferredTask
due
to
DOMContentLoaded
"
)
;
deferredTask
.
arm
(
)
;
}
{
once
:
true
}
)
;
}
}
_fetchLoginsFromParentAndFillForm
(
form
)
{
let
window
=
form
.
ownerDocument
.
defaultView
;
this
.
_detectInsecureFormLikes
(
window
.
top
)
;
let
messageManager
=
window
.
docShell
.
messageManager
;
messageManager
.
sendAsyncMessage
(
"
LoginStats
:
LoginEncountered
"
)
;
if
(
!
LoginHelper
.
enabled
)
{
return
;
}
this
.
_getLoginDataFromParent
(
form
{
showMasterPassword
:
true
}
)
.
then
(
this
.
loginsFound
.
bind
(
this
)
)
.
catch
(
Cu
.
reportError
)
;
}
onPageShow
(
event
)
{
let
window
=
event
.
target
.
ownerGlobal
;
this
.
_detectInsecureFormLikes
(
window
)
;
}
loginFormStateByDocument
:
new
WeakMap
(
)
stateForDocument
(
document
)
{
let
loginFormState
=
this
.
loginFormStateByDocument
.
get
(
document
)
;
if
(
!
loginFormState
)
{
loginFormState
=
{
fillsByRootElement
:
new
WeakMap
(
)
lastSubmittedValuesByRootElement
:
new
WeakMap
(
)
loginFormRootElements
:
new
WeakSet
(
)
}
;
this
.
loginFormStateByDocument
.
set
(
document
loginFormState
)
;
}
return
loginFormState
;
}
_detectInsecureFormLikes
(
topWindow
)
{
log
(
"
_detectInsecureFormLikes
"
topWindow
.
location
.
href
)
;
let
hasInsecureLoginForms
=
(
thisWindow
)
=
>
{
let
doc
=
thisWindow
.
document
;
let
rootElsWeakSet
=
LoginFormFactory
.
getRootElementsWeakSetForDocument
(
doc
)
;
let
hasLoginForm
=
ChromeUtils
.
nondeterministicGetWeakSetKeys
(
rootElsWeakSet
)
.
filter
(
el
=
>
el
.
isConnected
)
.
length
>
0
;
return
(
hasLoginForm
&
&
!
thisWindow
.
isSecureContext
)
|
|
Array
.
prototype
.
some
.
call
(
thisWindow
.
frames
frame
=
>
hasInsecureLoginForms
(
frame
)
)
;
}
;
let
messageManager
=
topWindow
.
docShell
.
messageManager
;
messageManager
.
sendAsyncMessage
(
"
PasswordManager
:
insecureLoginFormPresent
"
{
hasInsecureLoginForms
:
hasInsecureLoginForms
(
topWindow
)
}
)
;
}
fillForm
(
{
topDocument
loginFormOrigin
loginsFound
recipes
inputElement
}
)
{
if
(
!
inputElement
)
{
log
(
"
fillForm
:
No
input
element
specified
"
)
;
return
;
}
if
(
LoginHelper
.
getLoginOrigin
(
topDocument
.
documentURI
)
!
=
loginFormOrigin
)
{
if
(
!
inputElement
|
|
LoginHelper
.
getLoginOrigin
(
inputElement
.
ownerDocument
.
documentURI
)
!
=
loginFormOrigin
)
{
log
(
"
fillForm
:
The
requested
origin
doesn
'
t
match
the
one
from
the
"
"
document
.
This
may
mean
we
navigated
to
a
document
from
a
different
"
"
site
before
we
had
a
chance
to
indicate
this
change
in
the
user
"
"
interface
.
"
)
;
return
;
}
}
let
clobberUsername
=
true
;
let
form
=
LoginFormFactory
.
createFromField
(
inputElement
)
;
if
(
inputElement
.
type
=
=
"
password
"
)
{
clobberUsername
=
false
;
}
this
.
_fillForm
(
form
loginsFound
recipes
{
inputElement
autofillForm
:
true
clobberUsername
clobberPassword
:
true
userTriggered
:
true
}
)
;
}
loginsFound
(
{
form
loginsFound
recipes
}
)
{
let
doc
=
form
.
ownerDocument
;
let
autofillForm
=
LoginHelper
.
autofillForms
&
&
!
PrivateBrowsingUtils
.
isContentWindowPrivate
(
doc
.
defaultView
)
;
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
doc
.
documentURI
)
;
LoginRecipesContent
.
cacheRecipes
(
formOrigin
doc
.
defaultView
recipes
)
;
this
.
_fillForm
(
form
loginsFound
recipes
{
autofillForm
}
)
;
}
_onUsernameFocus
(
event
)
{
let
focusedField
=
event
.
target
;
if
(
!
focusedField
.
mozIsTextField
(
true
)
|
|
focusedField
.
readOnly
)
{
return
;
}
if
(
this
.
_isLoginAlreadyFilled
(
focusedField
)
)
{
log
(
"
_onUsernameFocus
:
Already
filled
"
)
;
return
;
}
let
timeDiff
=
Date
.
now
(
)
-
gLastRightClickTimeStamp
;
if
(
timeDiff
<
AUTOCOMPLETE_AFTER_RIGHT_CLICK_THRESHOLD_MS
)
{
log
(
"
Not
opening
autocomplete
after
focus
since
a
context
menu
was
opened
within
"
timeDiff
"
ms
"
)
;
return
;
}
log
(
"
maybeOpenAutocompleteAfterFocus
:
Opening
the
autocomplete
popup
"
)
;
this
.
_formFillService
.
showPopup
(
)
;
}
onDOMAutoComplete
(
event
)
{
if
(
!
event
.
isTrusted
)
{
return
;
}
if
(
!
LoginHelper
.
enabled
)
{
return
;
}
let
acInputField
=
event
.
target
;
if
(
ChromeUtils
.
getClassName
(
acInputField
.
ownerDocument
)
!
=
"
HTMLDocument
"
)
{
return
;
}
if
(
!
LoginFormFactory
.
createFromField
(
acInputField
)
)
{
return
;
}
if
(
LoginHelper
.
isUsernameFieldType
(
acInputField
)
)
{
this
.
onUsernameInput
(
event
)
;
}
else
if
(
acInputField
.
hasBeenTypePassword
)
{
this
.
_highlightFilledField
(
event
.
target
)
;
}
}
onUsernameInput
(
event
)
{
let
acInputField
=
event
.
target
;
if
(
!
acInputField
.
value
)
{
return
;
}
log
(
"
onUsernameInput
from
"
event
.
type
)
;
let
acForm
=
LoginFormFactory
.
createFromField
(
acInputField
)
;
let
doc
=
acForm
.
ownerDocument
;
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
doc
.
documentURI
)
;
let
recipes
=
LoginRecipesContent
.
getRecipes
(
formOrigin
doc
.
defaultView
)
;
let
[
usernameField
passwordField
ignored
]
=
this
.
_getFormFields
(
acForm
false
recipes
)
;
if
(
usernameField
=
=
acInputField
&
&
passwordField
)
{
this
.
_getLoginDataFromParent
(
acForm
{
showMasterPassword
:
false
}
)
.
then
(
(
{
form
loginsFound
recipes
}
)
=
>
{
this
.
_fillForm
(
form
loginsFound
recipes
{
autofillForm
:
true
clobberPassword
:
true
userTriggered
:
true
}
)
;
}
)
.
catch
(
Cu
.
reportError
)
;
}
else
{
}
}
_getPasswordFields
(
form
{
fieldOverrideRecipe
=
null
minPasswordLength
=
0
}
=
{
}
)
{
let
pwFields
=
[
]
;
for
(
let
i
=
0
;
i
<
form
.
elements
.
length
;
i
+
+
)
{
let
element
=
form
.
elements
[
i
]
;
if
(
ChromeUtils
.
getClassName
(
element
)
!
=
=
"
HTMLInputElement
"
|
|
element
.
type
!
=
"
password
"
|
|
!
element
.
isConnected
)
{
continue
;
}
if
(
fieldOverrideRecipe
&
&
fieldOverrideRecipe
.
notPasswordSelector
&
&
element
.
matches
(
fieldOverrideRecipe
.
notPasswordSelector
)
)
{
log
(
"
skipping
password
field
(
id
/
name
is
"
element
.
id
"
/
"
element
.
name
+
"
)
due
to
recipe
:
"
fieldOverrideRecipe
)
;
continue
;
}
if
(
minPasswordLength
&
&
element
.
value
.
trim
(
)
.
length
<
minPasswordLength
)
{
log
(
"
skipping
password
field
(
id
/
name
is
"
element
.
id
"
/
"
element
.
name
+
"
)
as
value
is
too
short
:
"
element
.
value
.
trim
(
)
.
length
)
;
continue
;
}
pwFields
[
pwFields
.
length
]
=
{
index
:
i
element
}
;
}
if
(
pwFields
.
length
=
=
0
)
{
log
(
"
(
form
ignored
-
-
no
password
fields
.
)
"
)
;
return
null
;
}
else
if
(
pwFields
.
length
>
3
)
{
log
(
"
(
form
ignored
-
-
too
many
password
fields
.
[
got
"
pwFields
.
length
"
]
)
"
)
;
return
null
;
}
return
pwFields
;
}
_getFormFields
(
form
isSubmission
recipes
)
{
let
usernameField
=
null
;
let
pwFields
=
null
;
let
fieldOverrideRecipe
=
LoginRecipesContent
.
getFieldOverrides
(
recipes
form
)
;
if
(
fieldOverrideRecipe
)
{
let
pwOverrideField
=
LoginRecipesContent
.
queryLoginField
(
form
fieldOverrideRecipe
.
passwordSelector
)
;
if
(
pwOverrideField
)
{
let
formLike
=
LoginFormFactory
.
createFromField
(
pwOverrideField
)
;
pwFields
=
[
{
index
:
[
.
.
.
formLike
.
elements
]
.
indexOf
(
pwOverrideField
)
element
:
pwOverrideField
}
]
;
}
let
usernameOverrideField
=
LoginRecipesContent
.
queryLoginField
(
form
fieldOverrideRecipe
.
usernameSelector
)
;
if
(
usernameOverrideField
)
{
usernameField
=
usernameOverrideField
;
}
}
if
(
!
pwFields
)
{
const
minSubmitPasswordLength
=
2
;
pwFields
=
this
.
_getPasswordFields
(
form
{
fieldOverrideRecipe
minPasswordLength
:
isSubmission
?
minSubmitPasswordLength
:
0
}
)
;
}
if
(
!
pwFields
)
{
return
[
null
null
null
]
;
}
if
(
!
usernameField
)
{
for
(
let
i
=
pwFields
[
0
]
.
index
-
1
;
i
>
=
0
;
i
-
-
)
{
let
element
=
form
.
elements
[
i
]
;
if
(
!
LoginHelper
.
isUsernameFieldType
(
element
)
)
{
continue
;
}
if
(
fieldOverrideRecipe
&
&
fieldOverrideRecipe
.
notUsernameSelector
&
&
element
.
matches
(
fieldOverrideRecipe
.
notUsernameSelector
)
)
{
continue
;
}
usernameField
=
element
;
break
;
}
}
if
(
!
usernameField
)
{
log
(
"
(
form
-
-
no
username
field
found
)
"
)
;
}
else
{
let
acFieldName
=
usernameField
.
getAutocompleteInfo
(
)
.
fieldName
;
log
(
"
Username
field
"
usernameField
"
has
name
/
value
/
autocomplete
:
"
usernameField
.
name
"
/
"
usernameField
.
value
"
/
"
acFieldName
)
;
}
if
(
!
isSubmission
|
|
pwFields
.
length
=
=
1
)
{
let
passwordField
=
pwFields
[
0
]
.
element
;
log
(
"
Password
field
"
passwordField
"
has
name
:
"
passwordField
.
name
)
;
return
[
usernameField
passwordField
null
]
;
}
let
oldPasswordField
newPasswordField
;
let
pw1
=
pwFields
[
0
]
.
element
.
value
;
let
pw2
=
pwFields
[
1
]
.
element
.
value
;
let
pw3
=
(
pwFields
[
2
]
?
pwFields
[
2
]
.
element
.
value
:
null
)
;
if
(
pwFields
.
length
=
=
3
)
{
if
(
pw1
=
=
pw2
&
&
pw2
=
=
pw3
)
{
newPasswordField
=
pwFields
[
0
]
.
element
;
oldPasswordField
=
null
;
}
else
if
(
pw1
=
=
pw2
)
{
newPasswordField
=
pwFields
[
0
]
.
element
;
oldPasswordField
=
pwFields
[
2
]
.
element
;
}
else
if
(
pw2
=
=
pw3
)
{
oldPasswordField
=
pwFields
[
0
]
.
element
;
newPasswordField
=
pwFields
[
2
]
.
element
;
}
else
if
(
pw1
=
=
pw3
)
{
newPasswordField
=
pwFields
[
0
]
.
element
;
oldPasswordField
=
pwFields
[
1
]
.
element
;
}
else
{
log
(
"
(
form
ignored
-
-
all
3
pw
fields
differ
)
"
)
;
return
[
null
null
null
]
;
}
}
else
if
(
pw1
=
=
pw2
)
{
newPasswordField
=
pwFields
[
0
]
.
element
;
oldPasswordField
=
null
;
}
else
{
oldPasswordField
=
pwFields
[
0
]
.
element
;
newPasswordField
=
pwFields
[
1
]
.
element
;
}
log
(
"
Password
field
(
new
)
id
/
name
is
:
"
newPasswordField
.
id
"
/
"
newPasswordField
.
name
)
;
if
(
oldPasswordField
)
{
log
(
"
Password
field
(
old
)
id
/
name
is
:
"
oldPasswordField
.
id
"
/
"
oldPasswordField
.
name
)
;
}
else
{
log
(
"
Password
field
(
old
)
:
"
oldPasswordField
)
;
}
return
[
usernameField
newPasswordField
oldPasswordField
]
;
}
_isAutocompleteDisabled
(
element
)
{
return
element
&
&
element
.
autocomplete
=
=
"
off
"
;
}
_onDocumentRestored
(
aDocument
)
{
let
rootElsWeakSet
=
LoginFormFactory
.
getRootElementsWeakSetForDocument
(
aDocument
)
;
let
weakLoginFormRootElements
=
ChromeUtils
.
nondeterministicGetWeakSetKeys
(
rootElsWeakSet
)
;
log
(
"
_onDocumentRestored
:
loginFormRootElements
approx
size
:
"
weakLoginFormRootElements
.
length
"
document
:
"
aDocument
)
;
for
(
let
formRoot
of
weakLoginFormRootElements
)
{
if
(
!
formRoot
.
isConnected
)
{
continue
;
}
let
formLike
=
LoginFormFactory
.
getForRootElement
(
formRoot
)
;
this
.
_fetchLoginsFromParentAndFillForm
(
formLike
)
;
}
}
_onNavigation
(
aDocument
)
{
let
rootElsWeakSet
=
LoginFormFactory
.
getRootElementsWeakSetForDocument
(
aDocument
)
;
let
weakLoginFormRootElements
=
ChromeUtils
.
nondeterministicGetWeakSetKeys
(
rootElsWeakSet
)
;
log
(
"
_onNavigation
:
root
elements
approx
size
:
"
weakLoginFormRootElements
.
length
"
document
:
"
aDocument
)
;
for
(
let
formRoot
of
weakLoginFormRootElements
)
{
if
(
!
formRoot
.
isConnected
)
{
continue
;
}
let
formLike
=
LoginFormFactory
.
getForRootElement
(
formRoot
)
;
this
.
_onFormSubmit
(
formLike
)
;
}
}
_onFormSubmit
(
form
)
{
log
(
"
_onFormSubmit
"
form
)
;
let
doc
=
form
.
ownerDocument
;
let
win
=
doc
.
defaultView
;
if
(
PrivateBrowsingUtils
.
isContentWindowPrivate
(
win
)
&
&
!
LoginHelper
.
privateBrowsingCaptureEnabled
)
{
log
(
"
(
form
submission
ignored
in
private
browsing
mode
)
"
)
;
return
;
}
if
(
!
LoginHelper
.
enabled
)
{
return
;
}
let
hostname
=
LoginHelper
.
getLoginOrigin
(
doc
.
documentURI
)
;
if
(
!
hostname
)
{
log
(
"
(
form
submission
ignored
-
-
invalid
hostname
)
"
)
;
return
;
}
let
formSubmitURL
=
LoginHelper
.
getFormActionOrigin
(
form
)
;
let
messageManager
=
win
.
docShell
.
messageManager
;
let
recipes
=
LoginRecipesContent
.
getRecipes
(
hostname
win
)
;
let
[
usernameField
newPasswordField
oldPasswordField
]
=
this
.
_getFormFields
(
form
true
recipes
)
;
if
(
newPasswordField
=
=
null
)
{
return
;
}
if
(
usernameField
&
&
usernameField
.
value
.
match
(
/
[
\
*
]
{
3
}
/
)
)
{
log
(
usernameField
.
value
"
{
usernameField
.
value
}
"
looks
munged
setting
to
null
)
;
usernameField
=
null
;
}
if
(
(
this
.
_isAutocompleteDisabled
(
form
)
|
|
this
.
_isAutocompleteDisabled
(
usernameField
)
|
|
this
.
_isAutocompleteDisabled
(
newPasswordField
)
|
|
this
.
_isAutocompleteDisabled
(
oldPasswordField
)
)
&
&
!
LoginHelper
.
storeWhenAutocompleteOff
)
{
log
(
"
(
form
submission
ignored
-
-
autocomplete
=
off
found
)
"
)
;
return
;
}
let
mockUsername
=
usernameField
?
{
name
:
usernameField
.
name
value
:
usernameField
.
value
}
:
null
;
let
mockPassword
=
{
name
:
newPasswordField
.
name
value
:
newPasswordField
.
value
}
;
let
mockOldPassword
=
oldPasswordField
?
{
name
:
oldPasswordField
.
name
value
:
oldPasswordField
.
value
}
:
null
;
let
usernameValue
=
usernameField
?
usernameField
.
value
:
null
;
let
formLikeRoot
=
FormLikeFactory
.
findRootForField
(
newPasswordField
)
;
let
state
=
this
.
stateForDocument
(
doc
)
;
let
lastSubmittedValues
=
state
.
lastSubmittedValuesByRootElement
.
get
(
formLikeRoot
)
;
if
(
lastSubmittedValues
)
{
if
(
lastSubmittedValues
.
username
=
=
usernameValue
&
&
lastSubmittedValues
.
password
=
=
newPasswordField
.
value
)
{
log
(
"
(
form
submission
ignored
-
-
already
submitted
with
the
same
username
and
password
)
"
)
;
return
;
}
}
state
.
lastSubmittedValuesByRootElement
.
set
(
formLikeRoot
{
username
:
usernameValue
password
:
newPasswordField
.
value
}
)
;
let
openerTopWindowID
=
null
;
if
(
win
.
opener
)
{
openerTopWindowID
=
win
.
opener
.
top
.
windowUtils
.
outerWindowID
;
}
let
dismissedPrompt
=
false
;
let
newPasswordFieldValue
=
newPasswordField
.
value
;
if
(
(
CreditCard
.
isValidNumber
(
usernameValue
)
&
&
newPasswordFieldValue
.
trim
(
)
.
match
(
/
^
[
0
-
9
]
{
3
}
/
)
)
|
|
(
CreditCard
.
isValidNumber
(
newPasswordFieldValue
)
&
&
newPasswordField
.
getAutocompleteInfo
(
)
.
fieldName
=
=
"
cc
-
number
"
)
)
{
dismissedPrompt
=
true
;
}
let
autoFilledLogin
=
this
.
stateForDocument
(
doc
)
.
fillsByRootElement
.
get
(
form
.
rootElement
)
;
messageManager
.
sendAsyncMessage
(
"
PasswordManager
:
onFormSubmit
"
{
hostname
formSubmitURL
autoFilledLoginGuid
:
autoFilledLogin
&
&
autoFilledLogin
.
guid
usernameField
:
mockUsername
newPasswordField
:
mockPassword
oldPasswordField
:
mockOldPassword
openerTopWindowID
dismissedPrompt
}
)
;
}
_removeFillFieldHighlight
(
event
)
{
let
winUtils
=
event
.
target
.
ownerGlobal
.
windowUtils
;
winUtils
.
removeManuallyManagedState
(
event
.
target
AUTOFILL_STATE
)
;
}
_highlightFilledField
(
element
)
{
let
winUtils
=
element
.
ownerGlobal
.
windowUtils
;
winUtils
.
addManuallyManagedState
(
element
AUTOFILL_STATE
)
;
element
.
addEventListener
(
"
input
"
this
.
_removeFillFieldHighlight
{
mozSystemGroup
:
true
once
:
true
}
)
;
}
_fillForm
(
form
foundLogins
recipes
{
inputElement
=
null
autofillForm
=
false
clobberUsername
=
false
clobberPassword
=
false
userTriggered
=
false
}
=
{
}
)
{
if
(
ChromeUtils
.
getClassName
(
form
)
=
=
=
"
HTMLFormElement
"
)
{
throw
new
Error
(
"
_fillForm
should
only
be
called
with
LoginForm
objects
"
)
;
}
log
(
"
_fillForm
"
form
.
elements
)
;
let
usernameField
;
let
autofillResult
=
-
1
;
const
AUTOFILL_RESULT
=
{
FILLED
:
0
NO_PASSWORD_FIELD
:
1
PASSWORD_DISABLED_READONLY
:
2
NO_LOGINS_FIT
:
3
NO_SAVED_LOGINS
:
4
EXISTING_PASSWORD
:
5
EXISTING_USERNAME
:
6
MULTIPLE_LOGINS
:
7
NO_AUTOFILL_FORMS
:
8
AUTOCOMPLETE_OFF
:
9
INSECURE
:
10
PASSWORD_AUTOCOMPLETE_NEW_PASSWORD
:
11
}
;
try
{
if
(
foundLogins
.
length
=
=
0
&
&
(
InsecurePasswordUtils
.
isFormSecure
(
form
)
|
|
!
LoginHelper
.
showInsecureFieldWarning
)
)
{
autofillResult
=
AUTOFILL_RESULT
.
NO_SAVED_LOGINS
;
return
;
}
let
passwordField
;
[
usernameField
passwordField
]
=
this
.
_getFormFields
(
form
false
recipes
)
;
if
(
inputElement
)
{
if
(
inputElement
.
type
=
=
"
password
"
)
{
passwordField
=
inputElement
;
if
(
!
clobberUsername
)
{
usernameField
=
null
;
}
}
else
if
(
LoginHelper
.
isUsernameFieldType
(
inputElement
)
)
{
usernameField
=
inputElement
;
}
else
{
throw
new
Error
(
"
Unexpected
input
element
type
.
"
)
;
}
}
if
(
passwordField
=
=
null
)
{
log
(
"
not
filling
form
no
password
field
found
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
NO_PASSWORD_FIELD
;
return
;
}
if
(
passwordField
.
disabled
|
|
passwordField
.
readOnly
)
{
log
(
"
not
filling
form
password
field
disabled
or
read
-
only
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
PASSWORD_DISABLED_READONLY
;
return
;
}
if
(
usernameField
)
{
this
.
_formFillService
.
markAsLoginManagerField
(
usernameField
)
;
usernameField
.
addEventListener
(
"
keydown
"
observer
)
;
}
if
(
!
userTriggered
)
{
let
loginOrigin
=
LoginHelper
.
getLoginOrigin
(
form
.
ownerDocument
.
documentURI
)
;
let
formActionOrigin
=
LoginHelper
.
getFormActionOrigin
(
form
)
;
foundLogins
=
foundLogins
.
filter
(
l
=
>
{
let
formActionMatches
=
LoginHelper
.
isOriginMatching
(
l
.
formSubmitURL
formActionOrigin
{
schemeUpgrades
:
LoginHelper
.
schemeUpgrades
acceptWildcardMatch
:
true
acceptDifferentSubdomains
:
false
}
)
;
let
formOriginMatches
=
LoginHelper
.
isOriginMatching
(
l
.
hostname
loginOrigin
{
schemeUpgrades
:
LoginHelper
.
schemeUpgrades
acceptWildcardMatch
:
true
acceptDifferentSubdomains
:
false
}
)
;
return
formActionMatches
&
&
formOriginMatches
;
}
)
;
foundLogins
=
LoginHelper
.
dedupeLogins
(
foundLogins
[
"
username
"
]
[
"
scheme
"
"
timePasswordChanged
"
]
loginOrigin
formActionOrigin
)
;
}
if
(
foundLogins
.
length
=
=
0
)
{
autofillResult
=
AUTOFILL_RESULT
.
NO_SAVED_LOGINS
;
return
;
}
if
(
!
userTriggered
&
&
!
LoginHelper
.
insecureAutofill
&
&
!
InsecurePasswordUtils
.
isFormSecure
(
form
)
)
{
log
(
"
not
filling
form
since
it
'
s
insecure
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
INSECURE
;
return
;
}
let
maxUsernameLen
=
Number
.
MAX_VALUE
;
let
maxPasswordLen
=
Number
.
MAX_VALUE
;
if
(
usernameField
&
&
usernameField
.
maxLength
>
=
0
)
{
maxUsernameLen
=
usernameField
.
maxLength
;
}
if
(
passwordField
.
maxLength
>
=
0
)
{
maxPasswordLen
=
passwordField
.
maxLength
;
}
let
logins
=
foundLogins
.
filter
(
function
(
l
)
{
let
fit
=
(
l
.
username
.
length
<
=
maxUsernameLen
&
&
l
.
password
.
length
<
=
maxPasswordLen
)
;
if
(
!
fit
)
{
log
(
"
Ignored
"
l
.
username
"
login
:
won
'
t
fit
"
)
;
}
return
fit
;
}
this
)
;
if
(
logins
.
length
=
=
0
)
{
log
(
"
form
not
filled
none
of
the
logins
fit
in
the
field
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
NO_LOGINS_FIT
;
return
;
}
const
passwordACFieldName
=
passwordField
.
getAutocompleteInfo
(
)
.
fieldName
;
if
(
!
userTriggered
&
&
passwordACFieldName
=
=
"
new
-
password
"
)
{
log
(
"
not
filling
form
password
field
has
the
autocomplete
new
-
password
value
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
PASSWORD_AUTOCOMPLETE_NEW_PASSWORD
;
return
;
}
if
(
passwordField
.
value
&
&
!
clobberPassword
)
{
log
(
"
form
not
filled
the
password
field
was
already
filled
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
EXISTING_PASSWORD
;
return
;
}
let
selectedLogin
;
if
(
!
clobberUsername
&
&
usernameField
&
&
(
usernameField
.
value
|
|
usernameField
.
disabled
|
|
usernameField
.
readOnly
)
)
{
let
username
=
usernameField
.
value
.
toLowerCase
(
)
;
let
matchingLogins
=
logins
.
filter
(
l
=
>
l
.
username
.
toLowerCase
(
)
=
=
username
)
;
if
(
matchingLogins
.
length
=
=
0
)
{
log
(
"
Password
not
filled
.
None
of
the
stored
logins
match
the
username
already
present
.
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
EXISTING_USERNAME
;
return
;
}
for
(
let
l
of
matchingLogins
)
{
if
(
l
.
username
=
=
usernameField
.
value
)
{
selectedLogin
=
l
;
}
}
if
(
!
selectedLogin
)
{
selectedLogin
=
matchingLogins
[
0
]
;
}
}
else
if
(
logins
.
length
=
=
1
)
{
selectedLogin
=
logins
[
0
]
;
}
else
{
let
matchingLogins
;
if
(
usernameField
)
{
matchingLogins
=
logins
.
filter
(
l
=
>
l
.
username
)
;
}
else
{
matchingLogins
=
logins
.
filter
(
l
=
>
!
l
.
username
)
;
}
if
(
matchingLogins
.
length
!
=
1
)
{
log
(
"
Multiple
logins
for
form
so
not
filling
any
.
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
MULTIPLE_LOGINS
;
return
;
}
selectedLogin
=
matchingLogins
[
0
]
;
}
if
(
!
autofillForm
)
{
log
(
"
autofillForms
=
false
but
form
can
be
filled
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
NO_AUTOFILL_FORMS
;
return
;
}
if
(
!
userTriggered
&
&
passwordACFieldName
=
=
"
off
"
&
&
!
LoginHelper
.
autofillAutocompleteOff
)
{
log
(
"
Not
autofilling
the
login
because
we
'
re
respecting
autocomplete
=
off
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
AUTOCOMPLETE_OFF
;
return
;
}
if
(
usernameField
)
{
let
disabledOrReadOnly
=
usernameField
.
disabled
|
|
usernameField
.
readOnly
;
let
userNameDiffers
=
selectedLogin
.
username
!
=
usernameField
.
value
;
let
userEnteredDifferentCase
=
userTriggered
&
&
userNameDiffers
&
&
usernameField
.
value
.
toLowerCase
(
)
=
=
selectedLogin
.
username
.
toLowerCase
(
)
;
if
(
!
disabledOrReadOnly
)
{
if
(
!
userEnteredDifferentCase
&
&
userNameDiffers
)
{
usernameField
.
setUserInput
(
selectedLogin
.
username
)
;
}
this
.
_highlightFilledField
(
usernameField
)
;
}
}
let
doc
=
form
.
ownerDocument
;
if
(
passwordField
.
value
!
=
selectedLogin
.
password
)
{
passwordField
.
setUserInput
(
selectedLogin
.
password
)
;
let
autoFilledLogin
=
{
guid
:
selectedLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
.
guid
username
:
selectedLogin
.
username
usernameField
:
usernameField
?
Cu
.
getWeakReference
(
usernameField
)
:
null
password
:
selectedLogin
.
password
passwordField
:
Cu
.
getWeakReference
(
passwordField
)
}
;
log
(
"
Saving
autoFilledLogin
"
autoFilledLogin
.
guid
"
for
"
form
.
rootElement
)
;
this
.
stateForDocument
(
doc
)
.
fillsByRootElement
.
set
(
form
.
rootElement
autoFilledLogin
)
;
}
this
.
_highlightFilledField
(
passwordField
)
;
log
(
"
_fillForm
succeeded
"
)
;
autofillResult
=
AUTOFILL_RESULT
.
FILLED
;
let
win
=
doc
.
defaultView
;
let
messageManager
=
win
.
docShell
.
messageManager
;
messageManager
.
sendAsyncMessage
(
"
LoginStats
:
LoginFillSuccessful
"
)
;
}
finally
{
if
(
autofillResult
=
=
-
1
)
{
throw
new
Error
(
"
_fillForm
:
autofillResult
must
be
specified
"
)
;
}
if
(
!
userTriggered
)
{
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_FORM_AUTOFILL_RESULT
"
)
.
add
(
autofillResult
)
;
if
(
usernameField
)
{
let
focusedElement
=
this
.
_formFillService
.
focusedInput
;
if
(
usernameField
=
=
focusedElement
&
&
autofillResult
!
=
=
AUTOFILL_RESULT
.
FILLED
)
{
log
(
"
_fillForm
:
Opening
username
autocomplete
popup
since
the
form
wasn
'
t
autofilled
"
)
;
this
.
_formFillService
.
showPopup
(
)
;
}
}
}
if
(
usernameField
)
{
log
(
"
_fillForm
:
Attaching
event
listeners
to
usernameField
"
)
;
usernameField
.
addEventListener
(
"
focus
"
observer
)
;
usernameField
.
addEventListener
(
"
mousedown
"
observer
)
;
}
Services
.
obs
.
notifyObservers
(
form
.
rootElement
"
passwordmgr
-
processed
-
form
"
)
;
}
}
_isLoginAlreadyFilled
(
aUsernameField
)
{
let
formLikeRoot
=
FormLikeFactory
.
findRootForField
(
aUsernameField
)
;
let
existingLoginForm
=
LoginFormFactory
.
getForRootElement
(
formLikeRoot
)
;
if
(
!
existingLoginForm
)
{
throw
new
Error
(
"
_isLoginAlreadyFilled
called
with
a
username
field
with
"
+
"
no
rootElement
LoginForm
"
)
;
}
log
(
"
_isLoginAlreadyFilled
:
existingLoginForm
"
existingLoginForm
)
;
let
filledLogin
=
this
.
stateForDocument
(
aUsernameField
.
ownerDocument
)
.
fillsByRootElement
.
get
(
formLikeRoot
)
;
if
(
!
filledLogin
)
{
return
false
;
}
let
autoFilledUsernameField
=
filledLogin
.
usernameField
?
filledLogin
.
usernameField
.
get
(
)
:
null
;
let
autoFilledPasswordField
=
filledLogin
.
passwordField
.
get
(
)
;
if
(
!
autoFilledUsernameField
|
|
autoFilledUsernameField
!
=
aUsernameField
|
|
autoFilledUsernameField
.
value
!
=
filledLogin
.
username
|
|
!
autoFilledPasswordField
|
|
autoFilledPasswordField
.
value
!
=
filledLogin
.
password
)
{
return
false
;
}
return
true
;
}
getUserNameAndPasswordFields
(
aField
)
{
if
(
ChromeUtils
.
getClassName
(
aField
)
!
=
=
"
HTMLInputElement
"
|
|
(
aField
.
type
!
=
"
password
"
&
&
!
LoginHelper
.
isUsernameFieldType
(
aField
)
)
|
|
aField
.
nodePrincipal
.
isNullPrincipal
|
|
!
aField
.
ownerDocument
)
{
return
[
null
null
null
]
;
}
let
form
=
LoginFormFactory
.
createFromField
(
aField
)
;
let
doc
=
aField
.
ownerDocument
;
let
formOrigin
=
LoginHelper
.
getLoginOrigin
(
doc
.
documentURI
)
;
let
recipes
=
LoginRecipesContent
.
getRecipes
(
formOrigin
doc
.
defaultView
)
;
return
this
.
_getFormFields
(
form
false
recipes
)
;
}
getFieldContext
(
aField
)
{
if
(
ChromeUtils
.
getClassName
(
aField
)
!
=
=
"
HTMLInputElement
"
|
|
(
aField
.
type
!
=
"
password
"
&
&
!
LoginHelper
.
isUsernameFieldType
(
aField
)
)
|
|
aField
.
nodePrincipal
.
isNullPrincipal
|
|
!
aField
.
ownerDocument
)
{
return
null
;
}
let
[
usernameField
newPasswordField
]
=
this
.
getUserNameAndPasswordFields
(
aField
)
;
if
(
aField
.
type
!
=
"
password
"
)
{
usernameField
=
aField
;
}
return
{
usernameField
:
{
found
:
!
!
usernameField
disabled
:
usernameField
&
&
(
usernameField
.
disabled
|
|
usernameField
.
readOnly
)
}
passwordField
:
{
found
:
!
!
newPasswordField
disabled
:
newPasswordField
&
&
(
newPasswordField
.
disabled
|
|
newPasswordField
.
readOnly
)
}
}
;
}
}
;
