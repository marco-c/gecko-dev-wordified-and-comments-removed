use
std
:
:
ptr
;
use
crate
:
:
ole_utils
:
:
to_u16_nul
;
use
log
:
:
{
Level
Metadata
Record
}
;
use
winapi
:
:
shared
:
:
minwindef
:
:
WORD
;
use
winapi
:
:
um
:
:
{
winbase
winnt
}
;
pub
struct
EventLogger
;
impl
log
:
:
Log
for
EventLogger
{
fn
enabled
(
&
self
metadata
:
&
Metadata
)
-
>
bool
{
metadata
.
level
(
)
<
=
log
:
:
max_level
(
)
}
fn
log
(
&
self
record
:
&
Record
)
{
if
!
self
.
enabled
(
record
.
metadata
(
)
)
{
return
;
}
let
name
=
to_u16_nul
(
crate
:
:
DESCRIPTION
)
;
let
msg
=
to_u16_nul
(
format
!
(
"
{
}
-
{
}
"
record
.
level
(
)
record
.
args
(
)
)
)
;
let
event_log
;
unsafe
{
event_log
=
winbase
:
:
RegisterEventSourceW
(
ptr
:
:
null
(
)
name
.
as_ptr
(
)
)
;
if
event_log
.
is_null
(
)
{
return
;
}
}
let
level
=
match
record
.
level
(
)
{
Level
:
:
Error
=
>
winnt
:
:
EVENTLOG_ERROR_TYPE
Level
:
:
Warn
=
>
winnt
:
:
EVENTLOG_WARNING_TYPE
Level
:
:
Info
|
Level
:
:
Debug
|
Level
:
:
Trace
=
>
winnt
:
:
EVENTLOG_INFORMATION_TYPE
}
;
unsafe
{
let
mut
msg_array
:
[
*
const
u16
;
1
]
=
[
msg
.
as_ptr
(
)
]
;
let
_
=
winbase
:
:
ReportEventW
(
event_log
level
0
0
ptr
:
:
null_mut
(
)
msg_array
.
len
(
)
as
WORD
0
msg_array
.
as_mut_ptr
(
)
ptr
:
:
null_mut
(
)
)
;
let
_
=
winbase
:
:
DeregisterEventSource
(
event_log
)
;
}
}
fn
flush
(
&
self
)
{
}
}
