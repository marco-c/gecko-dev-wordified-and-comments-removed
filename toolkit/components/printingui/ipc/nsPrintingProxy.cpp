#
include
"
nsPrintingProxy
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowserChild
.
h
"
#
include
"
mozilla
/
layout
/
RemotePrintJobChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIPrintingPromptService
.
h
"
#
include
"
nsIPrintSession
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPrintSettingsService
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
PrintProgressDialogChild
.
h
"
#
include
"
PrintSettingsDialogChild
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
embedding
;
using
namespace
mozilla
:
:
layout
;
static
StaticRefPtr
<
nsPrintingProxy
>
sPrintingProxyInstance
;
NS_IMPL_ISUPPORTS
(
nsPrintingProxy
nsIPrintingPromptService
)
nsPrintingProxy
:
:
nsPrintingProxy
(
)
=
default
;
nsPrintingProxy
:
:
~
nsPrintingProxy
(
)
=
default
;
already_AddRefed
<
nsPrintingProxy
>
nsPrintingProxy
:
:
GetInstance
(
)
{
if
(
!
sPrintingProxyInstance
)
{
sPrintingProxyInstance
=
new
nsPrintingProxy
(
)
;
if
(
!
sPrintingProxyInstance
)
{
return
nullptr
;
}
nsresult
rv
=
sPrintingProxyInstance
-
>
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
sPrintingProxyInstance
=
nullptr
;
return
nullptr
;
}
ClearOnShutdown
(
&
sPrintingProxyInstance
)
;
}
RefPtr
<
nsPrintingProxy
>
inst
=
sPrintingProxyInstance
.
get
(
)
;
return
inst
.
forget
(
)
;
}
nsresult
nsPrintingProxy
:
:
Init
(
)
{
mozilla
:
:
Unused
<
<
ContentChild
:
:
GetSingleton
(
)
-
>
SendPPrintingConstructor
(
this
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintingProxy
:
:
ShowPrintDialog
(
mozIDOMWindowProxy
*
parent
nsIPrintSettings
*
printSettings
)
{
NS_ENSURE_ARG
(
printSettings
)
;
BrowserChild
*
pBrowser
=
nullptr
;
if
(
parent
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
pwin
=
nsPIDOMWindowOuter
:
:
From
(
parent
)
;
NS_ENSURE_STATE
(
pwin
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
pwin
-
>
GetDocShell
(
)
;
NS_ENSURE_STATE
(
docShell
)
;
nsCOMPtr
<
nsIBrowserChild
>
tabchild
=
docShell
-
>
GetBrowserChild
(
)
;
NS_ENSURE_STATE
(
tabchild
)
;
pBrowser
=
static_cast
<
BrowserChild
*
>
(
tabchild
.
get
(
)
)
;
}
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIPrintSettingsService
>
printSettingsSvc
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
PrintData
inSettings
;
rv
=
printSettingsSvc
-
>
SerializeToPrintData
(
printSettings
&
inSettings
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
PrintSettingsDialogChild
>
dialog
=
new
PrintSettingsDialogChild
(
)
;
SendPPrintSettingsDialogConstructor
(
dialog
)
;
mozilla
:
:
Unused
<
<
SendShowPrintDialog
(
dialog
pBrowser
inSettings
)
;
SpinEventLoopUntil
(
[
&
dialog
]
(
)
{
return
dialog
-
>
returned
(
)
;
}
)
;
rv
=
dialog
-
>
result
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
printSettingsSvc
-
>
DeserializeToPrintSettings
(
dialog
-
>
data
(
)
printSettings
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintingProxy
:
:
ShowPrintProgressDialog
(
mozIDOMWindowProxy
*
parent
nsIPrintSettings
*
printSettings
nsIObserver
*
openDialogObserver
bool
isForPrinting
nsIWebProgressListener
*
*
webProgressListener
nsIPrintProgressParams
*
*
printProgressParams
bool
*
notifyOnOpen
)
{
NS_ENSURE_ARG
(
parent
)
;
NS_ENSURE_ARG
(
webProgressListener
)
;
NS_ENSURE_ARG
(
printProgressParams
)
;
NS_ENSURE_ARG
(
notifyOnOpen
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
pwin
=
nsPIDOMWindowOuter
:
:
From
(
parent
)
;
NS_ENSURE_STATE
(
pwin
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
pwin
-
>
GetDocShell
(
)
;
NS_ENSURE_STATE
(
docShell
)
;
nsCOMPtr
<
nsIBrowserChild
>
tabchild
=
docShell
-
>
GetBrowserChild
(
)
;
BrowserChild
*
pBrowser
=
static_cast
<
BrowserChild
*
>
(
tabchild
.
get
(
)
)
;
RefPtr
<
PrintProgressDialogChild
>
dialogChild
=
new
PrintProgressDialogChild
(
openDialogObserver
printSettings
)
;
SendPPrintProgressDialogConstructor
(
dialogChild
)
;
RefPtr
<
RemotePrintJobChild
>
remotePrintJob
;
if
(
printSettings
)
{
nsCOMPtr
<
nsIPrintSession
>
printSession
;
nsresult
rv
=
printSettings
-
>
GetPrintSession
(
getter_AddRefs
(
printSession
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
printSession
)
{
remotePrintJob
=
printSession
-
>
GetRemotePrintJob
(
)
;
}
}
*
notifyOnOpen
=
true
;
mozilla
:
:
Unused
<
<
SendShowProgress
(
pBrowser
dialogChild
remotePrintJob
isForPrinting
)
;
if
(
!
remotePrintJob
)
{
NS_ADDREF
(
*
webProgressListener
=
dialogChild
)
;
}
NS_ADDREF
(
*
printProgressParams
=
dialogChild
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintingProxy
:
:
ShowPageSetupDialog
(
mozIDOMWindowProxy
*
parent
nsIPrintSettings
*
printSettings
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsresult
nsPrintingProxy
:
:
SavePrintSettings
(
nsIPrintSettings
*
aPS
bool
aUsePrinterNamePrefix
uint32_t
aFlags
)
{
nsresult
rv
;
nsCOMPtr
<
nsIPrintSettingsService
>
printSettingsSvc
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
PrintData
settings
;
rv
=
printSettingsSvc
-
>
SerializeToPrintData
(
aPS
&
settings
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
Unused
<
<
SendSavePrintSettings
(
settings
aUsePrinterNamePrefix
aFlags
&
rv
)
;
return
rv
;
}
PPrintProgressDialogChild
*
nsPrintingProxy
:
:
AllocPPrintProgressDialogChild
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Allocator
for
PPrintProgressDialogChild
should
not
"
"
be
called
on
nsPrintingProxy
.
"
)
;
return
nullptr
;
}
bool
nsPrintingProxy
:
:
DeallocPPrintProgressDialogChild
(
PPrintProgressDialogChild
*
aActor
)
{
return
true
;
}
PPrintSettingsDialogChild
*
nsPrintingProxy
:
:
AllocPPrintSettingsDialogChild
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Allocator
for
PPrintSettingsDialogChild
should
not
"
"
be
called
on
nsPrintingProxy
.
"
)
;
return
nullptr
;
}
bool
nsPrintingProxy
:
:
DeallocPPrintSettingsDialogChild
(
PPrintSettingsDialogChild
*
aActor
)
{
return
true
;
}
PRemotePrintJobChild
*
nsPrintingProxy
:
:
AllocPRemotePrintJobChild
(
)
{
RefPtr
<
RemotePrintJobChild
>
remotePrintJob
=
new
RemotePrintJobChild
(
)
;
return
remotePrintJob
.
forget
(
)
.
take
(
)
;
}
bool
nsPrintingProxy
:
:
DeallocPRemotePrintJobChild
(
PRemotePrintJobChild
*
aDoomed
)
{
RemotePrintJobChild
*
remotePrintJob
=
static_cast
<
RemotePrintJobChild
*
>
(
aDoomed
)
;
NS_RELEASE
(
remotePrintJob
)
;
return
true
;
}
