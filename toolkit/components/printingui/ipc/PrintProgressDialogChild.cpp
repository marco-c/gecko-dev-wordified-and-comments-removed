#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
PrintProgressDialogChild
.
h
"
class
nsIWebProgress
;
class
nsIRequest
;
using
mozilla
:
:
Unused
;
namespace
mozilla
{
namespace
embedding
{
NS_IMPL_ISUPPORTS
(
PrintProgressDialogChild
nsIWebProgressListener
nsIPrintProgressParams
)
PrintProgressDialogChild
:
:
PrintProgressDialogChild
(
nsIObserver
*
aOpenObserver
)
:
mOpenObserver
(
aOpenObserver
)
{
}
PrintProgressDialogChild
:
:
~
PrintProgressDialogChild
(
)
{
Unused
<
<
Send__delete__
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PrintProgressDialogChild
:
:
RecvDialogOpened
(
)
{
mOpenObserver
-
>
Observe
(
nullptr
nullptr
nullptr
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PrintProgressDialogChild
:
:
RecvCancelledCurrentJob
(
)
{
return
IPC_OK
(
)
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
OnStateChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
uint32_t
aStateFlags
nsresult
aStatus
)
{
Unused
<
<
SendStateChange
(
aStateFlags
aStatus
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
OnProgressChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
int32_t
aCurSelfProgress
int32_t
aMaxSelfProgress
int32_t
aCurTotalProgress
int32_t
aMaxTotalProgress
)
{
Unused
<
<
SendProgressChange
(
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
OnLocationChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
nsIURI
*
aURI
uint32_t
aFlags
)
{
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
OnStatusChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
nsresult
aStatus
const
char16_t
*
aMessage
)
{
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
OnSecurityChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
uint32_t
aState
)
{
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
GetDocTitle
(
nsAString
&
aDocTitle
)
{
aDocTitle
=
mDocTitle
;
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
SetDocTitle
(
const
nsAString
&
aDocTitle
)
{
mDocTitle
=
aDocTitle
;
Unused
<
<
SendDocTitleChange
(
PromiseFlatString
(
aDocTitle
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
GetDocURL
(
nsAString
&
aDocURL
)
{
aDocURL
=
mDocURL
;
return
NS_OK
;
}
NS_IMETHODIMP
PrintProgressDialogChild
:
:
SetDocURL
(
const
nsAString
&
aDocURL
)
{
mDocURL
=
aDocURL
;
Unused
<
<
SendDocURLChange
(
PromiseFlatString
(
aDocURL
)
)
;
return
NS_OK
;
}
}
}
