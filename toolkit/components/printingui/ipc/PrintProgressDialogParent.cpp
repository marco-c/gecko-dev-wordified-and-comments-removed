#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
PrintProgressDialogParent
.
h
"
using
mozilla
:
:
Unused
;
namespace
mozilla
{
namespace
embedding
{
NS_IMPL_ISUPPORTS
(
PrintProgressDialogParent
nsIObserver
)
PrintProgressDialogParent
:
:
PrintProgressDialogParent
(
)
:
mActive
(
true
)
{
}
PrintProgressDialogParent
:
:
~
PrintProgressDialogParent
(
)
=
default
;
void
PrintProgressDialogParent
:
:
SetWebProgressListener
(
nsIWebProgressListener
*
aListener
)
{
mWebProgressListener
=
aListener
;
}
void
PrintProgressDialogParent
:
:
SetPrintProgressParams
(
nsIPrintProgressParams
*
aParams
)
{
mPrintProgressParams
=
aParams
;
}
mozilla
:
:
ipc
:
:
IPCResult
PrintProgressDialogParent
:
:
RecvStateChange
(
const
long
&
stateFlags
const
nsresult
&
status
)
{
if
(
mWebProgressListener
)
{
mWebProgressListener
-
>
OnStateChange
(
nullptr
nullptr
stateFlags
status
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PrintProgressDialogParent
:
:
RecvProgressChange
(
const
long
&
curSelfProgress
const
long
&
maxSelfProgress
const
long
&
curTotalProgress
const
long
&
maxTotalProgress
)
{
if
(
mWebProgressListener
)
{
mWebProgressListener
-
>
OnProgressChange
(
nullptr
nullptr
curSelfProgress
maxSelfProgress
curTotalProgress
maxTotalProgress
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PrintProgressDialogParent
:
:
RecvDocTitleChange
(
const
nsString
&
newTitle
)
{
if
(
mPrintProgressParams
)
{
mPrintProgressParams
-
>
SetDocTitle
(
newTitle
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PrintProgressDialogParent
:
:
RecvDocURLChange
(
const
nsString
&
newURL
)
{
if
(
mPrintProgressParams
)
{
mPrintProgressParams
-
>
SetDocURL
(
newURL
)
;
}
return
IPC_OK
(
)
;
}
void
PrintProgressDialogParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mActive
=
false
;
}
mozilla
:
:
ipc
:
:
IPCResult
PrintProgressDialogParent
:
:
Recv__delete__
(
)
{
mActive
=
false
;
return
IPC_OK
(
)
;
}
NS_IMETHODIMP
PrintProgressDialogParent
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
mActive
)
{
if
(
aTopic
)
{
if
(
!
strcmp
(
aTopic
"
cancelled
"
)
)
{
Unused
<
<
SendCancelledCurrentJob
(
)
;
if
(
!
mDialogOpenedSent
)
{
Unused
<
<
SendDialogOpened
(
)
;
mActive
=
false
;
}
}
else
if
(
!
strcmp
(
aTopic
"
completed
"
)
)
{
mActive
=
false
;
}
}
else
{
Unused
<
<
SendDialogOpened
(
)
;
mDialogOpenedSent
=
true
;
}
}
else
{
NS_WARNING
(
"
The
print
progress
dialog
finished
opening
but
communications
"
"
with
the
child
have
been
closed
.
"
)
;
}
return
NS_OK
;
}
}
}
