#
ifndef
__nsWindowWatcher_h__
#
define
__nsWindowWatcher_h__
#
define
NS_WINDOWWATCHER_CID
\
{
\
0xa21bfa01
0xf349
0x4394
{
\
0xa8
0x4c
0x8d
0xe5
0xcf
0x7
0x37
0xd0
\
}
\
}
#
include
"
nsCOMPtr
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIWindowCreator
.
h
"
#
include
"
nsIWindowWatcher
.
h
"
#
include
"
nsIOpenWindowInfo
.
h
"
#
include
"
nsIPromptFactory
.
h
"
#
include
"
nsIRemoteTab
.
h
"
#
include
"
nsPIWindowWatcher
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
WindowFeatures
.
h
"
class
nsIURI
;
class
nsIDocShellTreeItem
;
class
nsIDocShellTreeOwner
;
class
nsPIDOMWindowOuter
;
class
nsWatcherWindowEnumerator
;
class
nsPromptService
;
struct
nsWatcherWindowEntry
;
class
nsWindowWatcher
:
public
nsIWindowWatcher
public
nsPIWindowWatcher
public
nsIPromptFactory
{
friend
class
nsWatcherWindowEnumerator
;
public
:
nsWindowWatcher
(
)
;
nsresult
Init
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIWINDOWWATCHER
NS_DECL_NSPIWINDOWWATCHER
NS_DECL_NSIPROMPTFACTORY
static
int32_t
GetWindowOpenLocation
(
nsPIDOMWindowOuter
*
aParent
uint32_t
aChromeFlags
bool
aCalledFromJS
bool
aIsForPrinting
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
BrowsingContext
>
GetBrowsingContextByName
(
const
nsAString
&
aName
bool
aForceNoOpener
mozilla
:
:
dom
:
:
BrowsingContext
*
aCurrentContext
)
;
static
bool
HaveSpecifiedSize
(
const
mozilla
:
:
dom
:
:
WindowFeatures
&
features
)
;
protected
:
virtual
~
nsWindowWatcher
(
)
;
friend
class
nsPromptService
;
bool
AddEnumerator
(
nsWatcherWindowEnumerator
*
aEnumerator
)
;
bool
RemoveEnumerator
(
nsWatcherWindowEnumerator
*
aEnumerator
)
;
nsWatcherWindowEntry
*
FindWindowEntry
(
mozIDOMWindowProxy
*
aWindow
)
;
nsresult
RemoveWindow
(
nsWatcherWindowEntry
*
aInfo
)
;
nsresult
OpenWindowInternal
(
mozIDOMWindowProxy
*
aParent
const
nsACString
&
aUrl
const
nsACString
&
aName
const
nsACString
&
aFeatures
bool
aCalledFromJS
bool
aDialog
bool
aNavigate
nsIArray
*
aArgv
bool
aIsPopupSpam
bool
aForceNoOpener
bool
aForceNoReferrer
PrintKind
nsDocShellLoadState
*
aLoadState
mozilla
:
:
dom
:
:
BrowsingContext
*
*
aResult
)
;
static
nsresult
URIfromURL
(
const
nsACString
&
aURL
mozIDOMWindowProxy
*
aParent
nsIURI
*
*
aURI
)
;
static
bool
ShouldOpenPopup
(
const
mozilla
:
:
dom
:
:
WindowFeatures
&
aFeatures
)
;
static
uint32_t
CalculateChromeFlagsForContent
(
const
mozilla
:
:
dom
:
:
WindowFeatures
&
aFeatures
bool
*
aIsPopupRequested
)
;
static
uint32_t
CalculateChromeFlagsForSystem
(
const
mozilla
:
:
dom
:
:
WindowFeatures
&
aFeatures
bool
aDialog
bool
aChromeURL
)
;
private
:
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
CreateChromeWindow
(
nsIWebBrowserChrome
*
aParentChrome
uint32_t
aChromeFlags
nsIOpenWindowInfo
*
aOpenWindowInfo
nsIWebBrowserChrome
*
*
aResult
)
;
static
uint32_t
CalculateChromeFlagsHelper
(
uint32_t
aInitialFlags
const
mozilla
:
:
dom
:
:
WindowFeatures
&
aFeatures
bool
*
presenceFlag
=
nullptr
)
;
protected
:
nsTArray
<
nsWatcherWindowEnumerator
*
>
mEnumeratorList
;
nsWatcherWindowEntry
*
mOldestWindow
;
mozilla
:
:
Mutex
mListLock
MOZ_UNANNOTATED
;
nsCOMPtr
<
nsIWindowCreator
>
mWindowCreator
;
}
;
#
endif
