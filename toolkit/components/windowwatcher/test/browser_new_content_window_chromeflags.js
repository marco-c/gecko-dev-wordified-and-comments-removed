const
ALLOWED
=
{
"
toolbar
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_TOOLBAR
defaults_to
:
true
}
"
personalbar
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_PERSONAL_TOOLBAR
defaults_to
:
true
}
"
menubar
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_MENUBAR
defaults_to
:
true
}
"
scrollbars
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_SCROLLBARS
defaults_to
:
false
}
"
minimizable
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_WINDOW_MIN
defaults_to
:
true
}
}
;
const
ALLOWED_STRING
=
Object
.
keys
(
ALLOWED
)
.
map
(
feature
=
>
{
let
toValue
=
ALLOWED
[
feature
]
.
defaults_to
?
"
no
"
:
"
yes
"
;
return
{
feature
}
=
{
toValue
}
;
}
)
.
join
(
"
"
)
;
const
DISALLOWED
=
{
"
location
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_LOCATIONBAR
defaults_to
:
true
}
"
chrome
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_OPENAS_CHROME
defaults_to
:
false
}
"
dialog
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_OPENAS_DIALOG
defaults_to
:
false
}
"
private
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_PRIVATE_WINDOW
defaults_to
:
false
}
"
non
-
private
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_NON_PRIVATE_WINDOW
defaults_to
:
false
}
"
popup
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_WINDOW_POPUP
defaults_to
:
false
}
"
alwaysLowered
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_WINDOW_LOWERED
defaults_to
:
false
}
"
z
-
lock
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_WINDOW_LOWERED
defaults_to
:
false
}
"
alwaysRaised
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_WINDOW_RAISED
defaults_to
:
false
}
"
suppressanimation
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_MAC_SUPPRESS_ANIMATION
defaults_to
:
false
}
"
extrachrome
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_EXTRA
defaults_to
:
false
}
"
centerscreen
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_CENTER_SCREEN
defaults_to
:
false
}
"
dependent
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_DEPENDENT
defaults_to
:
false
}
"
modal
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_MODAL
defaults_to
:
false
}
"
titlebar
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_TITLEBAR
defaults_to
:
true
}
"
close
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_WINDOW_CLOSE
defaults_to
:
true
}
"
resizable
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_WINDOW_RESIZE
defaults_to
:
true
}
"
status
"
:
{
flag
:
Ci
.
nsIWebBrowserChrome
.
CHROME_STATUSBAR
defaults_to
:
true
}
}
;
const
DISALLOWED_STRING
=
Object
.
keys
(
DISALLOWED
)
.
map
(
feature
=
>
{
let
toValue
=
DISALLOWED
[
feature
]
.
defaults_to
?
"
no
"
:
"
yes
"
;
return
{
feature
}
=
{
toValue
}
;
}
)
.
join
(
"
"
)
;
const
FEATURES
=
[
ALLOWED_STRING
DISALLOWED_STRING
]
.
join
(
"
"
)
;
const
SCRIPT_PAGE
=
data
:
text
/
html
<
script
>
window
.
open
(
"
about
:
blank
"
"
_blank
"
"
{
FEATURES
}
"
)
;
<
/
script
>
;
const
SCRIPT_PAGE_FOR_CHROME_ALL
=
data
:
text
/
html
<
script
>
window
.
open
(
"
about
:
blank
"
"
_blank
"
"
all
"
)
;
<
/
script
>
;
Services
.
prefs
.
setIntPref
(
"
browser
.
link
.
open_newwindow
"
2
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
)
;
function
getParentChromeFlags
(
win
)
{
return
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
treeOwner
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIXULWindow
)
.
chromeFlags
;
}
function
assertContentFlags
(
chromeFlags
)
{
for
(
let
feature
in
ALLOWED
)
{
let
flag
=
ALLOWED
[
feature
]
.
flag
;
if
(
ALLOWED
[
feature
]
.
defaults_to
)
{
Assert
.
ok
(
!
(
chromeFlags
&
flag
)
Expected
feature
{
feature
}
to
be
disabled
)
;
}
else
{
Assert
.
ok
(
(
chromeFlags
&
flag
)
Expected
feature
{
feature
}
to
be
enabled
)
;
}
}
for
(
let
feature
in
DISALLOWED
)
{
let
flag
=
DISALLOWED
[
feature
]
.
flag
;
if
(
DISALLOWED
[
feature
]
.
defaults_to
)
{
Assert
.
ok
(
(
chromeFlags
&
flag
)
Expected
feature
{
feature
}
to
be
unchanged
)
;
}
else
{
Assert
.
ok
(
!
(
chromeFlags
&
flag
)
Expected
feature
{
feature
}
to
be
unchanged
)
;
}
}
}
add_task
(
function
*
test_new_remote_window_flags
(
)
{
let
newWinPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
SCRIPT_PAGE
}
function
*
(
browser
)
{
let
win
=
yield
newWinPromise
;
let
parentChromeFlags
=
getParentChromeFlags
(
win
)
;
assertContentFlags
(
parentChromeFlags
)
;
if
(
win
.
gMultiProcessBrowser
)
{
Assert
.
ok
(
parentChromeFlags
&
Ci
.
nsIWebBrowserChrome
.
CHROME_REMOTE_WINDOW
"
Should
be
remote
by
default
"
)
;
}
else
{
Assert
.
ok
(
!
(
parentChromeFlags
&
Ci
.
nsIWebBrowserChrome
.
CHROME_REMOTE_WINDOW
)
"
Should
not
be
remote
by
default
"
)
;
}
let
b
=
win
.
gBrowser
.
selectedBrowser
;
let
contentChromeFlags
=
yield
ContentTask
.
spawn
(
b
null
function
*
(
)
{
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
;
try
{
return
docShell
.
getInterface
(
Ci
.
nsITabChild
)
.
QueryInterface
(
Ci
.
nsIWebBrowserChrome
)
.
chromeFlags
;
}
catch
(
e
)
{
return
docShell
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
treeOwner
.
QueryInterface
(
Ci
.
nsIWebBrowserChrome
)
.
chromeFlags
;
}
}
)
;
assertContentFlags
(
contentChromeFlags
)
;
Assert
.
ok
(
!
(
contentChromeFlags
&
Ci
.
nsIWebBrowserChrome
.
CHROME_REMOTE_WINDOW
)
"
Should
not
be
remote
in
the
content
process
.
"
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
newWinPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
SCRIPT_PAGE_FOR_CHROME_ALL
}
function
*
(
browser
)
{
let
win
=
yield
newWinPromise
;
let
parentChromeFlags
=
getParentChromeFlags
(
win
)
;
Assert
.
notEqual
(
(
parentChromeFlags
&
Ci
.
nsIWebBrowserChrome
.
CHROME_ALL
)
Ci
.
nsIWebBrowserChrome
.
CHROME_ALL
"
Should
not
have
been
able
to
set
CHROME_ALL
"
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
}
)
;
