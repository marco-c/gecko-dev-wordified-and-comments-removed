"
use
strict
"
;
requestLongerTimeout
(
5
)
;
add_task
(
async
function
test_popup_conditions
(
)
{
const
PATTERNS
=
[
{
features
:
"
"
popup
:
false
}
{
features
:
"
location
menubar
resizable
scrollbars
status
"
popup
:
false
}
{
features
:
"
toolbar
menubar
resizable
scrollbars
status
"
popup
:
false
}
{
features
:
"
location
menubar
scrollbars
status
"
popup
:
false
}
{
features
:
"
toolbar
menubar
resizable
scrollbars
status
"
popup
:
false
}
{
features
:
"
location
menubar
resizable
scrollbars
status
"
popup
:
false
}
{
features
:
"
menubar
scrollbars
status
"
popup
:
true
}
{
features
:
"
location
resizable
scrollbars
status
"
popup
:
true
}
{
features
:
"
location
menubar
resizable
=
yes
scrollbars
status
"
popup
:
false
}
{
features
:
"
location
menubar
resizable
=
0
scrollbars
status
"
popup
:
true
}
{
features
:
"
location
menubar
resizable
status
"
popup
:
true
}
{
features
:
"
location
menubar
resizable
scrollbars
"
popup
:
true
}
{
features
:
"
location
menubar
scrollbars
status
"
+
"
left
=
100
screenX
=
100
top
=
100
screenY
=
100
"
+
"
width
=
100
innerWidth
=
100
outerWidth
=
100
"
+
"
height
=
100
innerHeight
=
100
outerHeight
=
100
"
popup
:
false
}
{
features
:
"
location
toolbar
menubar
"
popup
:
true
}
{
features
:
"
resizable
scrollbars
status
"
popup
:
true
}
{
features
:
"
someunknownfeature
"
popup
:
true
}
{
features
:
"
noopener
noreferrer
"
popup
:
false
}
]
;
const
WINDOW_FLAGS
=
{
CHROME_WINDOW_BORDERS
:
true
CHROME_WINDOW_CLOSE
:
true
CHROME_WINDOW_RESIZE
:
true
CHROME_LOCATIONBAR
:
true
CHROME_STATUSBAR
:
true
CHROME_SCROLLBARS
:
true
CHROME_TITLEBAR
:
true
CHROME_MENUBAR
:
true
CHROME_TOOLBAR
:
true
CHROME_PERSONAL_TOOLBAR
:
true
}
;
const
POPUP_FLAGS
=
{
CHROME_WINDOW_BORDERS
:
true
CHROME_WINDOW_CLOSE
:
true
CHROME_WINDOW_RESIZE
:
true
CHROME_LOCATIONBAR
:
true
CHROME_STATUSBAR
:
true
CHROME_SCROLLBARS
:
true
CHROME_TITLEBAR
:
true
CHROME_MENUBAR
:
false
CHROME_TOOLBAR
:
false
CHROME_PERSONAL_TOOLBAR
:
false
}
;
async
function
test_patterns
(
{
nonPopup
}
)
{
for
(
const
{
features
popup
}
of
PATTERNS
)
{
const
BLANK_PAGE
=
"
data
:
text
/
html
"
;
const
OPEN_PAGE
=
"
data
:
text
/
plain
hello
"
;
const
SCRIPT_PAGE
=
data
:
text
/
html
<
script
>
window
.
open
(
"
{
OPEN_PAGE
}
"
"
"
"
{
features
}
"
)
;
<
/
script
>
;
async
function
testNewWindow
(
flags
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
BLANK_PAGE
}
async
function
(
browser
)
{
const
newWinPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
SCRIPT_PAGE
)
;
const
win
=
await
newWinPromise
;
const
parentChromeFlags
=
getParentChromeFlags
(
win
)
;
for
(
const
[
name
visible
]
of
Object
.
entries
(
flags
)
)
{
if
(
visible
)
{
Assert
.
equal
(
!
!
(
parentChromeFlags
&
Ci
.
nsIWebBrowserChrome
[
name
]
)
true
{
name
}
should
be
present
for
features
"
{
features
}
"
)
;
}
else
{
Assert
.
equal
(
!
!
(
parentChromeFlags
&
Ci
.
nsIWebBrowserChrome
[
name
]
)
false
{
name
}
should
not
be
present
for
features
"
{
features
}
"
)
;
}
}
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
}
async
function
testNewTab
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
BLANK_PAGE
}
async
function
(
browser
)
{
const
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
OPEN_PAGE
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
SCRIPT_PAGE
)
;
let
tab
=
await
newTabPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
async
function
testCurrentTab
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
BLANK_PAGE
}
async
function
(
browser
)
{
const
pagePromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
OPEN_PAGE
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
SCRIPT_PAGE
)
;
await
pagePromise
;
}
)
;
}
if
(
!
popup
)
{
if
(
nonPopup
=
=
"
window
"
)
{
await
testNewWindow
(
WINDOW_FLAGS
)
;
}
else
if
(
nonPopup
=
=
"
tab
"
)
{
await
testNewTab
(
)
;
}
else
{
await
testCurrentTab
(
)
;
}
}
else
{
await
testNewWindow
(
POPUP_FLAGS
)
;
}
}
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
link
.
open_newwindow
"
3
]
]
}
)
;
await
test_patterns
(
{
nonPopup
:
"
tab
"
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
link
.
open_newwindow
"
1
]
]
}
)
;
await
test_patterns
(
{
nonPopup
:
"
current
"
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
link
.
open_newwindow
"
2
]
]
}
)
;
await
test_patterns
(
{
nonPopup
:
"
window
"
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
