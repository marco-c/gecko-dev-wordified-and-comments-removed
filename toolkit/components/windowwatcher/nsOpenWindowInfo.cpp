#
include
"
nsOpenWindowInfo
.
h
"
#
include
"
mozilla
/
OriginAttributes
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
NS_IMPL_ISUPPORTS
(
nsOpenWindowInfo
nsIOpenWindowInfo
)
NS_IMETHODIMP
nsOpenWindowInfo
:
:
GetParent
(
mozilla
:
:
dom
:
:
BrowsingContext
*
*
aParent
)
{
*
aParent
=
do_AddRef
(
mParent
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsOpenWindowInfo
:
:
GetIsRemote
(
bool
*
aIsRemote
)
{
*
aIsRemote
=
mIsRemote
;
return
NS_OK
;
}
NS_IMETHODIMP
nsOpenWindowInfo
:
:
GetIsForPrintPreview
(
bool
*
aIsForPrinPreview
)
{
*
aIsForPrinPreview
=
mIsForPrintPreview
;
return
NS_OK
;
}
NS_IMETHODIMP
nsOpenWindowInfo
:
:
GetIsForPrinting
(
bool
*
aIsForPrinting
)
{
*
aIsForPrinting
=
mIsForPrinting
;
return
NS_OK
;
}
NS_IMETHODIMP
nsOpenWindowInfo
:
:
GetForceNoOpener
(
bool
*
aForceNoOpener
)
{
*
aForceNoOpener
=
mForceNoOpener
;
return
NS_OK
;
}
NS_IMETHODIMP
nsOpenWindowInfo
:
:
GetScriptableOriginAttributes
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aAttrs
)
{
bool
ok
=
ToJSValue
(
aCx
mOriginAttributes
aAttrs
)
;
NS_ENSURE_TRUE
(
ok
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
const
OriginAttributes
&
nsOpenWindowInfo
:
:
GetOriginAttributes
(
)
{
return
mOriginAttributes
;
}
BrowserParent
*
nsOpenWindowInfo
:
:
GetNextRemoteBrowser
(
)
{
return
mNextRemoteBrowser
;
}
nsIBrowsingContextReadyCallback
*
nsOpenWindowInfo
:
:
BrowsingContextReadyCallback
(
)
{
return
mBrowsingContextReadyCallback
;
}
NS_IMPL_ISUPPORTS
(
nsBrowsingContextReadyCallback
nsIBrowsingContextReadyCallback
)
nsBrowsingContextReadyCallback
:
:
nsBrowsingContextReadyCallback
(
RefPtr
<
BrowsingContextCallbackReceivedPromise
:
:
Private
>
aPromise
)
:
mPromise
(
std
:
:
move
(
aPromise
)
)
{
}
nsBrowsingContextReadyCallback
:
:
~
nsBrowsingContextReadyCallback
(
)
{
if
(
mPromise
)
{
mPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
}
mPromise
=
nullptr
;
}
NS_IMETHODIMP
nsBrowsingContextReadyCallback
:
:
BrowsingContextReady
(
BrowsingContext
*
aBC
)
{
if
(
aBC
)
{
mPromise
-
>
Resolve
(
aBC
__func__
)
;
}
else
{
mPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
}
mPromise
=
nullptr
;
return
NS_OK
;
}
