"
use
strict
"
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
function
run_test
(
)
{
do_test_pending
(
)
;
run_next_test
(
)
;
}
var
EXISTING_FILE
=
"
test_osfile_async_copy
.
js
"
;
var
reference_fetch_file
=
function
reference_fetch_file
(
path
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
file
=
new
FileUtils
.
File
(
path
)
;
NetUtil
.
asyncFetch
(
{
uri
:
NetUtil
.
newURI
(
file
)
loadUsingSystemPrincipal
:
true
}
function
(
stream
status
)
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
reject
(
status
)
;
return
;
}
let
result
reject
;
try
{
result
=
NetUtil
.
readInputStreamToString
(
stream
stream
.
available
(
)
)
;
}
catch
(
x
)
{
reject
=
x
;
}
stream
.
close
(
)
;
if
(
reject
)
{
reject
(
reject
)
;
}
else
{
resolve
(
result
)
;
}
}
)
;
}
)
;
}
;
var
reference_compare_files
=
async
function
reference_compare_files
(
a
b
)
{
let
a_contents
=
await
reference_fetch_file
(
a
)
;
let
b_contents
=
await
reference_fetch_file
(
b
)
;
Assert
.
ok
(
a_contents
=
=
=
b_contents
)
;
}
;
async
function
test_copymove
(
options
=
{
}
)
{
let
source
=
OS
.
Path
.
join
(
await
OS
.
File
.
getCurrentDirectory
(
)
EXISTING_FILE
)
;
let
dest
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_async_copy_dest
.
tmp
"
)
;
let
dest2
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_async_copy_dest2
.
tmp
"
)
;
try
{
await
OS
.
File
.
copy
(
source
dest
options
)
;
await
reference_compare_files
(
source
dest
)
;
await
OS
.
File
.
move
(
dest
dest2
)
;
await
reference_compare_files
(
source
dest2
)
;
Assert
.
equal
(
await
OS
.
File
.
exists
(
dest
)
false
)
;
}
finally
{
await
removeTestFile
(
dest
)
;
await
removeTestFile
(
dest2
)
;
}
}
add_task
(
test_copymove
)
;
add_task
(
test_copymove
.
bind
(
null
{
unixUserland
:
true
}
)
)
;
add_task
(
do_test_finished
)
;
