var
{
OS
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
{
}
)
;
var
{
Services
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
add_task
(
async
function
duration
(
)
{
const
availableDurations
=
[
"
outSerializationDuration
"
"
outExecutionDuration
"
]
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
log
"
true
)
;
let
copyOptions
=
{
outSerializationDuration
:
null
outExecutionDuration
:
null
}
;
let
currentDir
=
await
OS
.
File
.
getCurrentDirectory
(
)
;
let
pathSource
=
OS
.
Path
.
join
(
currentDir
"
test_duration
.
js
"
)
;
let
copyFile
=
pathSource
+
"
.
bak
"
;
function
testOptions
(
options
name
durations
=
availableDurations
)
{
for
(
let
duration
of
durations
)
{
do_print
(
Checking
{
duration
}
for
operation
:
{
name
}
)
;
do_print
(
{
name
}
:
Gathered
method
duration
time
:
{
options
[
duration
]
}
ms
)
;
do_check_eq
(
typeof
options
[
duration
]
"
number
"
)
;
do_check_true
(
options
[
duration
]
>
=
0
)
;
}
}
function
testOptionIncrements
(
options
name
backupDuration
durations
=
availableDurations
)
{
for
(
let
duration
of
durations
)
{
do_print
(
Checking
{
duration
}
increment
for
operation
:
{
name
}
)
;
do_print
(
{
name
}
:
Gathered
method
duration
time
:
{
options
[
duration
]
}
ms
)
;
do_print
(
{
name
}
:
Previous
duration
:
{
backupDuration
[
duration
]
}
ms
)
;
do_check_true
(
options
[
duration
]
>
=
backupDuration
[
duration
]
)
;
}
}
await
OS
.
File
.
copy
(
pathSource
copyFile
copyOptions
)
;
testOptions
(
copyOptions
"
OS
.
File
.
copy
"
)
;
await
OS
.
File
.
remove
(
copyFile
)
;
let
pathDest
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
osfile
async
test
read
writeAtomic
.
tmp
"
)
;
let
tmpPath
=
pathDest
+
"
.
tmp
"
;
let
readOptions
=
{
outExecutionDuration
:
null
}
;
let
contents
=
await
OS
.
File
.
read
(
pathSource
undefined
readOptions
)
;
testOptions
(
readOptions
"
OS
.
File
.
read
"
[
"
outExecutionDuration
"
]
)
;
let
writeAtomicOptions
=
{
outExecutionDuration
:
null
tmpPath
}
;
await
OS
.
File
.
writeAtomic
(
pathDest
contents
writeAtomicOptions
)
;
testOptions
(
writeAtomicOptions
"
OS
.
File
.
writeAtomic
"
[
"
outExecutionDuration
"
]
)
;
await
OS
.
File
.
remove
(
pathDest
)
;
do_print
(
Ensuring
that
we
can
use
{
availableDurations
.
join
(
"
"
)
}
to
accumulate
durations
)
;
let
ARBITRARY_BASE_DURATION
=
5
;
copyOptions
=
{
outSerializationDuration
:
ARBITRARY_BASE_DURATION
outExecutionDuration
:
ARBITRARY_BASE_DURATION
}
;
let
backupDuration
=
Object
.
assign
(
{
}
copyOptions
)
;
await
OS
.
File
.
copy
(
pathSource
copyFile
copyOptions
)
;
testOptionIncrements
(
copyOptions
"
copy
"
backupDuration
)
;
backupDuration
=
Object
.
assign
(
{
}
copyOptions
)
;
await
OS
.
File
.
remove
(
copyFile
copyOptions
)
;
testOptionIncrements
(
copyOptions
"
remove
"
backupDuration
)
;
writeAtomicOptions
=
{
outExecutionDuration
:
ARBITRARY_BASE_DURATION
}
;
writeAtomicOptions
.
tmpPath
=
tmpPath
;
backupDuration
=
Object
.
assign
(
{
}
writeAtomicOptions
)
;
contents
=
await
OS
.
File
.
read
(
pathSource
undefined
readOptions
)
;
await
OS
.
File
.
writeAtomic
(
pathDest
contents
writeAtomicOptions
)
;
testOptionIncrements
(
writeAtomicOptions
"
writeAtomicOptions
"
backupDuration
[
"
outExecutionDuration
"
]
)
;
OS
.
File
.
remove
(
pathDest
)
;
let
file
=
await
OS
.
File
.
open
(
pathSource
)
;
await
file
.
stat
(
)
;
await
file
.
close
(
)
;
}
)
;
