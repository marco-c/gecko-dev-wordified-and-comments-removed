"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
ctypes
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
const
{
makeFakeAppDir
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AppData
.
jsm
"
)
;
function
compare_paths
(
ospath
key
)
{
let
file
;
try
{
file
=
Services
.
dirsvc
.
get
(
key
Ci
.
nsIFile
)
;
}
catch
(
ex
)
{
}
if
(
file
)
{
Assert
.
ok
(
!
!
ospath
)
;
Assert
.
equal
(
ospath
file
.
path
)
;
}
else
{
info
(
"
WARNING
:
"
+
key
+
"
is
not
defined
.
Test
may
not
be
testing
anything
!
"
)
;
Assert
.
ok
(
!
ospath
)
;
}
}
add_task
(
async
function
test_simple_paths
(
)
{
Assert
.
ok
(
!
!
OS
.
Constants
.
Path
.
tmpDir
)
;
compare_paths
(
OS
.
Constants
.
Path
.
tmpDir
"
TmpD
"
)
;
}
)
;
add_task
(
async
function
test_before_after_profile
(
)
{
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
null
OS
.
Constants
.
Path
.
profileDir
)
;
Assert
.
equal
(
null
OS
.
Constants
.
Path
.
localProfileDir
)
;
Assert
.
equal
(
null
OS
.
Constants
.
Path
.
userApplicationDataDir
)
;
}
do_get_profile
(
)
;
Assert
.
ok
(
!
!
OS
.
Constants
.
Path
.
profileDir
)
;
Assert
.
ok
(
!
!
OS
.
Constants
.
Path
.
localProfileDir
)
;
Assert
.
equal
(
null
OS
.
Constants
.
Path
.
userApplicationDataDir
)
;
await
makeFakeAppDir
(
)
;
Assert
.
ok
(
!
!
OS
.
Constants
.
Path
.
userApplicationDataDir
)
;
}
)
;
add_task
(
async
function
test_desktop_paths
(
)
{
if
(
OS
.
Constants
.
Sys
.
Name
=
=
"
Android
"
)
{
return
;
}
Assert
.
ok
(
!
!
OS
.
Constants
.
Path
.
homeDir
)
;
compare_paths
(
OS
.
Constants
.
Path
.
homeDir
"
Home
"
)
;
compare_paths
(
OS
.
Constants
.
Path
.
userApplicationDataDir
"
UAppData
"
)
;
compare_paths
(
OS
.
Constants
.
Path
.
macUserLibDir
"
ULibDir
"
)
;
}
)
;
add_task
(
async
function
test_libxul
(
)
{
ctypes
.
open
(
OS
.
Constants
.
Path
.
libxul
)
;
info
(
"
Linked
to
libxul
"
)
;
}
)
;
