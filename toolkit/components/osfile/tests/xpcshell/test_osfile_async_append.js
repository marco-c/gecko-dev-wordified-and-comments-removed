"
use
strict
"
;
do_print
(
"
starting
tests
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
function
setup_mode
(
mode
)
{
let
realMode
=
{
read
:
true
write
:
true
}
;
for
(
let
k
in
mode
)
{
realMode
[
k
]
=
mode
[
k
]
;
}
return
realMode
;
}
async
function
test_append
(
mode
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_async_append
.
tmp
"
)
;
await
removeTestFile
(
path
)
try
{
mode
=
setup_mode
(
mode
)
;
mode
.
append
=
true
;
if
(
mode
.
trunc
)
{
await
OS
.
File
.
writeAtomic
(
path
new
Uint8Array
(
500
)
)
;
}
let
file
=
await
OS
.
File
.
open
(
path
mode
)
;
try
{
await
file
.
write
(
new
Uint8Array
(
1000
)
)
;
await
file
.
setPosition
(
0
OS
.
File
.
POS_START
)
;
await
file
.
read
(
100
)
;
await
file
.
write
(
new
Uint8Array
(
100
)
)
;
let
stat
=
await
file
.
stat
(
)
;
do_check_eq
(
1100
stat
.
size
)
;
}
finally
{
await
file
.
close
(
)
;
}
}
catch
(
ex
)
{
await
removeTestFile
(
path
)
}
}
async
function
test_no_append
(
mode
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_async_noappend
.
tmp
"
)
;
await
removeTestFile
(
path
)
try
{
mode
=
setup_mode
(
mode
)
;
mode
.
append
=
false
;
if
(
mode
.
trunc
)
{
await
OS
.
File
.
writeAtomic
(
path
new
Uint8Array
(
500
)
)
;
}
let
file
=
await
OS
.
File
.
open
(
path
mode
)
;
try
{
await
file
.
write
(
new
Uint8Array
(
1000
)
)
;
await
file
.
setPosition
(
0
OS
.
File
.
POS_START
)
;
await
file
.
read
(
100
)
;
await
file
.
write
(
new
Uint8Array
(
100
)
)
;
let
stat
=
await
file
.
stat
(
)
;
do_check_eq
(
1000
stat
.
size
)
;
}
finally
{
await
file
.
close
(
)
;
}
}
finally
{
await
removeTestFile
(
path
)
}
}
var
test_flags
=
[
{
}
{
create
:
true
}
{
trunc
:
true
}
]
;
function
run_test
(
)
{
do_test_pending
(
)
;
for
(
let
t
of
test_flags
)
{
add_task
(
test_append
.
bind
(
null
t
)
)
;
add_task
(
test_no_append
.
bind
(
null
t
)
)
;
}
add_task
(
do_test_finished
)
;
run_next_test
(
)
;
}
