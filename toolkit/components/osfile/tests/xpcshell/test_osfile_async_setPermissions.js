"
use
strict
"
;
function
format_mode
(
mode
)
{
if
(
mode
<
=
0o777
)
{
return
(
"
0000
"
+
mode
.
toString
(
8
)
)
.
slice
(
-
4
)
;
}
else
{
return
"
0
"
+
mode
.
toString
(
8
)
;
}
}
const
_umask
=
OS
.
Constants
.
Sys
.
umask
;
do_print
(
"
umask
:
"
+
format_mode
(
_umask
)
)
;
function
apply_umask
(
mode
)
{
return
mode
&
~
_umask
;
}
var
testSequence
=
[
[
null
apply_umask
(
0o600
)
]
[
{
unixMode
:
0o4777
}
apply_umask
(
0o4777
)
]
[
{
unixMode
:
0o4777
unixHonorUmask
:
false
}
0o4777
]
[
{
unixMode
:
0o4777
unixHonorUmask
:
true
}
apply_umask
(
0o4777
)
]
[
undefined
apply_umask
(
0o600
)
]
[
{
unixMode
:
0o666
}
apply_umask
(
0o666
)
]
[
{
unixMode
:
0o600
}
apply_umask
(
0o600
)
]
[
{
unixMode
:
0
}
0
]
[
{
}
apply_umask
(
0o600
)
]
]
;
add_task
(
async
function
test_path_setPermissions
(
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_async_setPermissions_path
.
tmp
"
)
;
await
OS
.
File
.
writeAtomic
(
path
new
Uint8Array
(
1
)
)
;
try
{
for
(
let
[
options
expectedMode
]
of
testSequence
)
{
if
(
options
!
=
=
null
)
{
do_print
(
"
Setting
permissions
to
"
+
JSON
.
stringify
(
options
)
)
;
await
OS
.
File
.
setPermissions
(
path
options
)
;
}
let
stat
=
await
OS
.
File
.
stat
(
path
)
;
do_check_eq
(
format_mode
(
stat
.
unixMode
)
format_mode
(
expectedMode
)
)
;
}
}
finally
{
await
OS
.
File
.
remove
(
path
)
;
}
}
)
;
add_task
(
async
function
test_file_setPermissions
(
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_async_setPermissions_file
.
tmp
"
)
;
await
OS
.
File
.
writeAtomic
(
path
new
Uint8Array
(
1
)
)
;
try
{
let
fd
=
await
OS
.
File
.
open
(
path
{
write
:
true
}
)
;
try
{
for
(
let
[
options
expectedMode
]
of
testSequence
)
{
if
(
options
!
=
=
null
)
{
do_print
(
"
Setting
permissions
to
"
+
JSON
.
stringify
(
options
)
)
;
await
fd
.
setPermissions
(
options
)
;
}
let
stat
=
await
fd
.
stat
(
)
;
do_check_eq
(
format_mode
(
stat
.
unixMode
)
format_mode
(
expectedMode
)
)
;
}
}
finally
{
await
fd
.
close
(
)
;
}
}
finally
{
await
OS
.
File
.
remove
(
path
)
;
}
}
)
;
function
run_test
(
)
{
run_next_test
(
)
;
}
