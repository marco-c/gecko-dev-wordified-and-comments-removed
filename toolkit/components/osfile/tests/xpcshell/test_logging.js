"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
run_test
(
)
{
do_test_pending
(
)
;
let
messageCount
=
0
;
info
(
"
Test
starting
"
)
;
let
consoleListener
=
{
observe
(
aMessage
)
{
if
(
!
(
aMessage
instanceof
Ci
.
nsIConsoleMessage
)
)
{
return
;
}
executeSoon
(
function
(
)
{
info
(
"
Observing
message
"
+
aMessage
.
message
)
;
if
(
!
aMessage
.
message
.
includes
(
"
TEST
OS
"
)
)
{
return
;
}
+
+
messageCount
;
if
(
messageCount
=
=
1
)
{
Assert
.
equal
(
aMessage
.
message
"
TEST
OS
{
\
"
name
\
"
:
\
"
test
\
"
}
\
n
"
)
;
}
if
(
messageCount
=
=
2
)
{
Assert
.
equal
(
aMessage
.
message
"
TEST
OS
name
is
test
\
n
"
)
;
toggleConsoleListener
(
false
)
;
do_test_finished
(
)
;
}
}
)
;
}
}
;
function
toggleConsoleListener
(
pref
)
{
info
(
"
Setting
console
listener
:
"
+
pref
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
log
"
pref
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
log
.
redirect
"
pref
)
;
Services
.
console
[
pref
?
"
registerListener
"
:
"
unregisterListener
"
]
(
consoleListener
)
;
}
toggleConsoleListener
(
true
)
;
let
objectDefault
=
{
name
:
"
test
"
}
;
let
CustomToString
=
function
(
)
{
this
.
name
=
"
test
"
;
}
;
CustomToString
.
prototype
.
toString
=
function
(
)
{
return
"
name
is
"
+
this
.
name
;
}
;
let
objectCustom
=
new
CustomToString
(
)
;
info
(
OS
.
Shared
.
LOG
.
toSource
(
)
)
;
info
(
"
Logging
1
"
)
;
OS
.
Shared
.
LOG
(
objectDefault
)
;
info
(
"
Logging
2
"
)
;
OS
.
Shared
.
LOG
(
objectCustom
)
;
}
