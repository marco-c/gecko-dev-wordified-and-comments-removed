"
use
strict
"
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
Path
=
OS
.
Path
;
var
profileDir
;
do_register_cleanup
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
log
"
false
)
;
}
)
;
add_task
(
function
init
(
)
{
do_get_profile
(
)
;
profileDir
=
OS
.
Constants
.
Path
.
profileDir
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
log
"
true
)
;
}
)
;
add_task
(
async
function
test_basic
(
)
{
let
dir
=
Path
.
join
(
profileDir
"
directory
"
)
;
Assert
.
equal
(
false
(
await
OS
.
File
.
exists
(
dir
)
)
)
;
await
OS
.
File
.
makeDir
(
dir
)
;
await
OS
.
File
.
stat
(
dir
)
;
await
OS
.
File
.
makeDir
(
dir
)
;
await
OS
.
File
.
makeDir
(
dir
{
ignoreExisting
:
true
}
)
;
let
exception
=
null
;
try
{
await
OS
.
File
.
makeDir
(
dir
{
ignoreExisting
:
false
}
)
;
}
catch
(
ex
)
{
exception
=
ex
;
}
Assert
.
ok
(
!
!
exception
)
;
Assert
.
ok
(
exception
instanceof
OS
.
File
.
Error
)
;
Assert
.
ok
(
exception
.
becauseExists
)
;
}
)
;
add_task
(
async
function
test_root
(
)
{
if
(
OS
.
Constants
.
Win
)
{
await
OS
.
File
.
makeDir
(
"
C
:
"
)
;
await
OS
.
File
.
makeDir
(
"
C
:
\
\
"
)
;
}
else
{
await
OS
.
File
.
makeDir
(
"
/
"
)
;
}
}
)
;
add_task
(
async
function
test_option_from
(
)
{
let
dir
=
Path
.
join
(
profileDir
"
a
"
"
b
"
"
c
"
)
;
Assert
.
equal
(
false
(
await
OS
.
File
.
exists
(
dir
)
)
)
;
await
OS
.
File
.
makeDir
(
dir
{
from
:
profileDir
}
)
;
await
OS
.
File
.
stat
(
dir
)
;
await
OS
.
File
.
makeDir
(
dir
)
;
await
OS
.
File
.
makeDir
(
dir
{
ignoreExisting
:
true
}
)
;
let
exception
=
null
;
try
{
await
OS
.
File
.
makeDir
(
dir
{
ignoreExisting
:
false
}
)
;
}
catch
(
ex
)
{
exception
=
ex
;
}
Assert
.
ok
(
!
!
exception
)
;
Assert
.
ok
(
exception
instanceof
OS
.
File
.
Error
)
;
Assert
.
ok
(
exception
.
becauseExists
)
;
let
dir2
=
Path
.
join
(
profileDir
"
g
"
"
h
"
"
i
"
)
;
exception
=
null
;
try
{
await
OS
.
File
.
makeDir
(
dir2
)
;
}
catch
(
ex
)
{
exception
=
ex
;
}
Assert
.
ok
(
!
!
exception
)
;
Assert
.
ok
(
exception
instanceof
OS
.
File
.
Error
)
;
Assert
.
ok
(
exception
.
becauseNoSuchFile
)
;
let
dir3
=
Path
.
join
(
profileDir
"
d
"
"
"
"
e
"
"
f
"
)
;
Assert
.
equal
(
false
(
await
OS
.
File
.
exists
(
dir3
)
)
)
;
await
OS
.
File
.
makeDir
(
dir3
{
from
:
profileDir
}
)
;
Assert
.
ok
(
(
await
OS
.
File
.
exists
(
dir3
)
)
)
;
let
dir4
;
if
(
OS
.
Constants
.
Win
)
{
dir4
=
profileDir
+
"
\
\
\
\
g
"
;
}
else
{
dir4
=
profileDir
+
"
/
/
/
/
g
"
;
}
Assert
.
equal
(
false
(
await
OS
.
File
.
exists
(
dir4
)
)
)
;
await
OS
.
File
.
makeDir
(
dir4
{
from
:
profileDir
}
)
;
Assert
.
ok
(
(
await
OS
.
File
.
exists
(
dir4
)
)
)
;
}
)
;
