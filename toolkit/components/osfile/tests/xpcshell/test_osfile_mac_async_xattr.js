"
use
strict
"
;
add_task
(
async
function
test_mac_xattr
(
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_mac_xattr
.
tmp
"
)
;
await
OS
.
File
.
writeAtomic
(
path
new
Uint8Array
(
1
)
)
;
try
{
let
expected_size
=
2
;
let
xattr_value
=
new
Uint8Array
(
expected_size
)
;
let
expected_value
=
new
Uint8Array
(
expected_size
)
;
for
(
let
i
=
0
;
i
<
expected_size
;
i
+
+
)
{
let
num
=
Math
.
floor
(
Math
.
random
(
)
*
0xff
)
;
xattr_value
[
i
]
=
num
;
expected_value
[
i
]
=
num
;
}
await
OS
.
File
.
macSetXAttr
(
path
"
user
.
foo
"
xattr_value
)
;
let
xattr_readback
=
await
OS
.
File
.
macGetXAttr
(
path
"
user
.
foo
"
)
;
Assert
.
equal
(
xattr_readback
.
length
expected_size
)
;
for
(
let
i
=
0
;
i
<
expected_size
;
i
+
+
)
{
Assert
.
equal
(
xattr_readback
[
i
]
expected_value
[
i
]
)
;
}
await
OS
.
File
.
macRemoveXAttr
(
path
"
user
.
foo
"
)
;
let
got_error
=
false
;
try
{
await
OS
.
File
.
macGetXAttr
(
path
"
user
.
foo
"
)
;
}
catch
(
e
)
{
Assert
.
ok
(
e
instanceof
OS
.
File
.
Error
)
;
Assert
.
ok
(
e
.
toString
(
)
.
includes
(
"
getxattr
"
)
)
;
got_error
=
true
;
}
Assert
.
ok
(
got_error
)
;
}
finally
{
await
removeTestFile
(
path
)
;
}
}
)
;
add_task
(
async
function
test_mac_xattr_missing_file
(
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
tmpDir
"
test_osfile_mac_xattr_missing_file
.
tmp
"
)
;
let
exists
=
await
OS
.
File
.
exists
(
path
)
;
Assert
.
equal
(
false
exists
)
;
let
got_first_error
=
false
;
try
{
let
xattr_value
=
new
Uint8Array
(
1
)
;
await
OS
.
File
.
macSetXAttr
(
path
"
user
.
foo
"
xattr_value
)
;
}
catch
(
e
)
{
Assert
.
ok
(
e
instanceof
OS
.
File
.
Error
)
;
Assert
.
ok
(
e
.
toString
(
)
.
includes
(
"
setxattr
"
)
)
;
got_first_error
=
true
;
}
Assert
.
ok
(
got_first_error
)
;
let
got_second_error
=
false
;
try
{
await
OS
.
File
.
macGetXAttr
(
path
"
user
.
foo
"
)
;
}
catch
(
e
)
{
Assert
.
ok
(
e
instanceof
OS
.
File
.
Error
)
;
Assert
.
ok
(
e
.
toString
(
)
.
includes
(
"
getxattr
"
)
)
;
got_second_error
=
true
;
}
Assert
.
ok
(
got_second_error
)
;
let
got_third_error
=
false
;
try
{
await
OS
.
File
.
macRemoveXAttr
(
path
"
user
.
foo
"
)
;
}
catch
(
e
)
{
Assert
.
ok
(
e
instanceof
OS
.
File
.
Error
)
;
Assert
.
ok
(
e
.
toString
(
)
.
includes
(
"
removexattr
"
)
)
;
got_third_error
=
true
;
}
Assert
.
ok
(
got_third_error
)
;
}
)
;
