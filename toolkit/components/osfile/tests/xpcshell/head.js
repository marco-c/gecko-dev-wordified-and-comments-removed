"
use
strict
"
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
log
"
true
)
;
function
add_test_pair
(
generator
)
{
add_task
(
async
function
(
)
{
info
(
"
Executing
test
"
+
generator
.
name
+
"
with
native
operations
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
native
"
true
)
;
return
generator
(
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
Executing
test
"
+
generator
.
name
+
"
without
native
operations
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
osfile
.
native
"
false
)
;
return
generator
(
)
;
}
)
;
}
function
reference_fetch_file
(
path
test
)
{
info
(
"
Fetching
file
"
+
path
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
file
=
new
FileUtils
.
File
(
path
)
;
NetUtil
.
asyncFetch
(
{
uri
:
NetUtil
.
newURI
(
file
)
loadUsingSystemPrincipal
:
true
}
function
(
stream
status
)
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
reject
(
status
)
;
return
;
}
let
result
reject
;
try
{
result
=
NetUtil
.
readInputStreamToString
(
stream
stream
.
available
(
)
)
;
}
catch
(
x
)
{
reject
=
x
;
}
stream
.
close
(
)
;
if
(
reject
)
{
reject
(
reject
)
;
}
else
{
resolve
(
result
)
;
}
}
)
;
}
)
;
}
function
reference_compare_files
(
a
b
test
)
{
return
(
async
function
(
)
{
info
(
"
Comparing
files
"
+
a
+
"
and
"
+
b
)
;
let
a_contents
=
await
reference_fetch_file
(
a
test
)
;
let
b_contents
=
await
reference_fetch_file
(
b
test
)
;
Assert
.
equal
(
a_contents
b_contents
)
;
}
)
(
)
;
}
async
function
removeTestFile
(
filePath
ignoreNoSuchFile
=
true
)
{
try
{
await
OS
.
File
.
remove
(
filePath
)
;
}
catch
(
ex
)
{
if
(
!
ignoreNoSuchFile
|
|
!
ex
.
becauseNoSuchFile
)
{
do_throw
(
ex
)
;
}
}
}
