"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SearchSuggestionController
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
}
)
;
const
DEFAULT_FORM_HISTORY_PARAM
=
"
searchbar
-
history
"
;
const
HTTP_OK
=
200
;
const
BROWSER_SUGGEST_PREF
=
"
browser
.
search
.
suggest
.
enabled
"
;
const
BROWSER_SUGGEST_PRIVATE_PREF
=
"
browser
.
search
.
suggest
.
enabled
.
private
"
;
const
REMOTE_TIMEOUT_PREF
=
"
browser
.
search
.
suggest
.
timeout
"
;
const
REMOTE_TIMEOUT_DEFAULT
=
500
;
const
SEARCH_DATA_TRANSFERRED_SCALAR
=
"
browser
.
search
.
data_transferred
"
;
const
SEARCH_TELEMETRY_KEY_PREFIX
=
"
sggt
"
;
const
SEARCH_TELEMETRY_PRIVATE_BROWSING_KEY_SUFFIX
=
"
pb
"
;
const
SEARCH_TELEMETRY_LATENCY
=
"
SEARCH_SUGGESTIONS_LATENCY_MS
"
;
function
uuid
(
)
{
let
uuid
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
;
return
uuid
.
slice
(
1
uuid
.
length
-
1
)
;
}
class
SearchSuggestionEntry
{
constructor
(
value
{
matchPrefix
tail
}
=
{
}
)
{
this
.
_value
=
value
;
this
.
_matchPrefix
=
matchPrefix
;
this
.
_tail
=
tail
;
}
equals
(
otherEntry
)
{
return
otherEntry
.
value
=
=
this
.
value
;
}
get
value
(
)
{
return
this
.
_value
;
}
get
matchPrefix
(
)
{
return
this
.
_matchPrefix
;
}
get
tail
(
)
{
return
this
.
_tail
;
}
get
tailOffsetIndex
(
)
{
if
(
!
this
.
_tail
)
{
return
-
1
;
}
let
offsetIndex
=
this
.
_value
.
lastIndexOf
(
this
.
_tail
)
;
if
(
offsetIndex
+
this
.
_tail
.
length
<
this
.
_value
.
length
)
{
let
lastWordIndex
=
this
.
_value
.
lastIndexOf
(
"
"
)
;
if
(
this
.
_tail
.
startsWith
(
this
.
_value
.
substring
(
lastWordIndex
)
)
)
{
offsetIndex
=
lastWordIndex
;
}
else
{
offsetIndex
=
-
1
;
}
}
return
offsetIndex
;
}
}
var
gFirstPartyDomains
=
new
Map
(
)
;
function
SearchSuggestionController
(
callback
=
null
)
{
this
.
_callback
=
callback
;
}
SearchSuggestionController
.
prototype
=
{
maxLocalResults
:
5
maxRemoteResults
:
10
formHistoryParam
:
DEFAULT_FORM_HISTORY_PARAM
_formHistoryResult
:
null
_remoteResultTimer
:
null
_deferredRemoteResult
:
null
_callback
:
null
_request
:
null
get
firstPartyDomains
(
)
{
return
gFirstPartyDomains
;
}
fetch
(
searchTerm
privateMode
engine
userContextId
=
0
restrictToEngine
=
false
dedupeRemoteAndLocal
=
true
)
{
this
.
stop
(
)
;
if
(
!
Services
.
search
.
isInitialized
)
{
throw
new
Error
(
"
Search
not
initialized
yet
(
how
did
you
get
here
?
)
"
)
;
}
if
(
typeof
privateMode
=
=
=
"
undefined
"
)
{
throw
new
Error
(
"
The
privateMode
argument
is
required
to
avoid
unintentional
privacy
leaks
"
)
;
}
if
(
!
engine
.
getSubmission
)
{
throw
new
Error
(
"
Invalid
search
engine
"
)
;
}
if
(
!
this
.
maxLocalResults
&
&
!
this
.
maxRemoteResults
)
{
throw
new
Error
(
"
Zero
results
expected
what
are
you
trying
to
do
?
"
)
;
}
if
(
this
.
maxLocalResults
<
0
|
|
this
.
maxRemoteResults
<
0
)
{
throw
new
Error
(
"
Number
of
requested
results
must
be
positive
"
)
;
}
let
promises
=
[
]
;
this
.
_searchString
=
searchTerm
;
if
(
searchTerm
&
&
this
.
suggestionsEnabled
&
&
(
!
privateMode
|
|
this
.
suggestionsInPrivateBrowsingEnabled
)
&
&
this
.
maxRemoteResults
&
&
engine
.
supportsResponseType
(
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
)
{
this
.
_deferredRemoteResult
=
this
.
_fetchRemote
(
searchTerm
engine
privateMode
userContextId
)
;
promises
.
push
(
this
.
_deferredRemoteResult
.
promise
)
;
}
if
(
this
.
maxLocalResults
)
{
promises
.
push
(
this
.
_fetchFormHistory
(
searchTerm
restrictToEngine
?
engine
.
name
:
null
)
)
;
}
function
handleRejection
(
reason
)
{
if
(
reason
=
=
"
HTTP
request
aborted
"
)
{
return
null
;
}
Cu
.
reportError
(
"
SearchSuggestionController
rejection
:
"
+
reason
)
;
return
null
;
}
return
Promise
.
all
(
promises
)
.
then
(
results
=
>
this
.
_dedupeAndReturnResults
(
results
dedupeRemoteAndLocal
)
handleRejection
)
;
}
stop
(
)
{
if
(
this
.
_request
)
{
this
.
_request
.
abort
(
)
;
}
this
.
_reset
(
)
;
}
_fetchFormHistory
(
searchTerm
source
)
{
return
new
Promise
(
resolve
=
>
{
let
acSearchObserver
=
{
onSearchResult
:
(
search
result
)
=
>
{
this
.
_formHistoryResult
=
result
;
if
(
this
.
_request
)
{
this
.
_remoteResultTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
this
.
_remoteResultTimer
.
initWithCallback
(
this
.
_onRemoteTimeout
.
bind
(
this
)
this
.
remoteTimeout
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
switch
(
result
.
searchResult
)
{
case
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
:
case
Ci
.
nsIAutoCompleteResult
.
RESULT_NOMATCH
:
if
(
result
.
searchString
!
=
=
this
.
_searchString
)
{
resolve
(
"
Unexpected
response
this
.
_searchString
does
not
match
form
history
response
"
)
;
return
;
}
let
fhEntries
=
[
]
;
for
(
let
i
=
0
;
i
<
result
.
matchCount
;
+
+
i
)
{
fhEntries
.
push
(
result
.
getValueAt
(
i
)
)
;
}
resolve
(
{
result
:
fhEntries
formHistoryResult
:
result
}
)
;
break
;
case
Ci
.
nsIAutoCompleteResult
.
RESULT_FAILURE
:
case
Ci
.
nsIAutoCompleteResult
.
RESULT_IGNORED
:
resolve
(
"
Form
History
returned
RESULT_FAILURE
or
RESULT_IGNORED
"
)
;
break
;
}
}
}
;
let
formHistory
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
form
-
history
"
]
.
createInstance
(
Ci
.
nsIAutoCompleteSearch
)
;
let
params
=
this
.
formHistoryParam
|
|
DEFAULT_FORM_HISTORY_PARAM
;
let
options
=
null
;
if
(
source
)
{
options
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag2
)
;
options
.
setPropertyAsAUTF8String
(
"
source
"
source
)
;
}
formHistory
.
startSearch
(
searchTerm
params
this
.
_formHistoryResult
acSearchObserver
options
)
;
}
)
;
}
_reportTelemetryForEngine
(
engineId
privateMode
aborted
=
false
)
{
this
.
_reportBandwidthForEngine
(
engineId
privateMode
)
;
if
(
this
.
_requestStopwatchToken
)
{
if
(
aborted
)
{
TelemetryStopwatch
.
cancelKeyed
(
SEARCH_TELEMETRY_LATENCY
engineId
this
.
_requestStopwatchToken
)
;
}
else
{
TelemetryStopwatch
.
finishKeyed
(
SEARCH_TELEMETRY_LATENCY
engineId
this
.
_requestStopwatchToken
)
;
}
this
.
_requestStopwatchToken
=
null
;
}
}
_reportBandwidthForEngine
(
engineId
privateMode
)
{
if
(
!
this
.
_request
|
|
!
this
.
_request
.
channel
)
{
return
;
}
let
channel
=
ChannelWrapper
.
get
(
this
.
_request
.
channel
)
;
let
bytesTransferred
=
channel
.
requestSize
+
channel
.
responseSize
;
if
(
bytesTransferred
=
=
0
)
{
return
;
}
let
telemetryKey
=
{
SEARCH_TELEMETRY_KEY_PREFIX
}
-
{
engineId
}
;
if
(
privateMode
)
{
telemetryKey
+
=
-
{
SEARCH_TELEMETRY_PRIVATE_BROWSING_KEY_SUFFIX
}
;
}
Services
.
telemetry
.
keyedScalarAdd
(
SEARCH_DATA_TRANSFERRED_SCALAR
telemetryKey
bytesTransferred
)
;
}
_fetchRemote
(
searchTerm
engine
privateMode
userContextId
)
{
let
deferredResponse
=
PromiseUtils
.
defer
(
)
;
this
.
_request
=
new
XMLHttpRequest
(
)
;
let
submission
=
engine
.
getSubmission
(
searchTerm
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
;
let
method
=
submission
.
postData
?
"
POST
"
:
"
GET
"
;
this
.
_request
.
open
(
method
submission
.
uri
.
spec
true
)
;
this
.
_request
.
channel
.
loadFlags
=
Ci
.
nsIChannel
.
LOAD_ANONYMOUS
|
Ci
.
nsIChannel
.
INHIBIT_PERSISTENT_CACHING
;
if
(
!
gFirstPartyDomains
.
has
(
engine
.
name
)
)
{
gFirstPartyDomains
.
set
(
engine
.
name
{
engine
.
identifier
|
|
uuid
(
)
}
.
search
.
suggestions
.
mozilla
)
;
}
let
firstPartyDomain
=
gFirstPartyDomains
.
get
(
engine
.
name
)
;
this
.
_request
.
setOriginAttributes
(
{
userContextId
privateBrowsingId
:
privateMode
?
1
:
0
firstPartyDomain
}
)
;
this
.
_request
.
mozBackgroundRequest
=
true
;
let
engineId
=
engine
.
identifier
|
|
"
other
"
;
this
.
_request
.
addEventListener
(
"
load
"
this
.
_onRemoteLoaded
.
bind
(
this
deferredResponse
engineId
privateMode
)
)
;
this
.
_request
.
addEventListener
(
"
error
"
evt
=
>
{
this
.
_reportTelemetryForEngine
(
engineId
privateMode
)
;
deferredResponse
.
resolve
(
"
HTTP
error
"
)
;
}
)
;
this
.
_request
.
addEventListener
(
"
abort
"
evt
=
>
{
this
.
_reportTelemetryForEngine
(
engineId
privateMode
true
)
;
deferredResponse
.
reject
(
"
HTTP
request
aborted
"
)
;
}
)
;
if
(
submission
.
postData
)
{
this
.
_request
.
sendInputStream
(
submission
.
postData
)
;
}
else
{
this
.
_request
.
send
(
)
;
}
if
(
this
.
_requestStopwatchToken
)
{
TelemetryStopwatch
.
cancelKeyed
(
SEARCH_TELEMETRY_LATENCY
this
.
_requestStopwatchToken
.
engineId
this
.
_requestStopwatchToken
)
;
}
this
.
_requestStopwatchToken
=
{
engineId
}
;
TelemetryStopwatch
.
startKeyed
(
SEARCH_TELEMETRY_LATENCY
engineId
this
.
_requestStopwatchToken
)
;
return
deferredResponse
;
}
_onRemoteLoaded
(
deferredResponse
engineId
privateMode
)
{
this
.
_reportTelemetryForEngine
(
engineId
privateMode
)
;
if
(
!
this
.
_request
)
{
deferredResponse
.
resolve
(
"
Got
HTTP
response
after
the
request
was
cancelled
"
)
;
return
;
}
let
status
serverResults
;
try
{
status
=
this
.
_request
.
status
;
}
catch
(
e
)
{
deferredResponse
.
resolve
(
"
Unknown
HTTP
status
:
"
+
e
)
;
return
;
}
if
(
status
!
=
HTTP_OK
|
|
this
.
_request
.
responseText
=
=
"
"
)
{
deferredResponse
.
resolve
(
"
Non
-
200
status
or
empty
HTTP
response
:
"
+
status
)
;
return
;
}
try
{
serverResults
=
JSON
.
parse
(
this
.
_request
.
responseText
)
;
}
catch
(
ex
)
{
deferredResponse
.
resolve
(
"
Failed
to
parse
suggestion
JSON
:
"
+
ex
)
;
return
;
}
try
{
if
(
!
Array
.
isArray
(
serverResults
)
|
|
!
serverResults
[
0
]
|
|
(
this
.
_searchString
.
localeCompare
(
serverResults
[
0
]
undefined
{
sensitivity
:
"
base
"
}
)
&
&
this
.
_searchString
.
localeCompare
(
decodeURIComponent
(
JSON
.
parse
(
'
"
'
+
serverResults
[
0
]
.
replace
(
/
\
"
/
g
'
\
\
"
'
)
+
'
"
'
)
)
undefined
{
sensitivity
:
"
base
"
}
)
)
)
{
deferredResponse
.
resolve
(
"
Unexpected
response
this
.
_searchString
does
not
match
remote
response
"
)
;
return
;
}
}
catch
(
ex
)
{
deferredResponse
.
resolve
(
Failed
to
parse
the
remote
response
string
:
{
ex
}
)
;
return
;
}
let
results
=
serverResults
.
slice
(
1
)
|
|
[
]
;
deferredResponse
.
resolve
(
{
result
:
results
}
)
;
}
_onRemoteTimeout
(
)
{
this
.
_request
=
null
;
this
.
_remoteResultTimer
=
null
;
if
(
this
.
_deferredRemoteResult
)
{
this
.
_deferredRemoteResult
.
resolve
(
"
HTTP
Timeout
"
)
;
this
.
_deferredRemoteResult
=
null
;
}
}
_dedupeAndReturnResults
(
suggestResults
dedupeRemoteAndLocal
)
{
if
(
this
.
_searchString
=
=
=
null
)
{
return
null
;
}
let
results
=
{
term
:
this
.
_searchString
remote
:
[
]
local
:
[
]
formHistoryResult
:
null
}
;
for
(
let
resultData
of
suggestResults
)
{
if
(
typeof
result
=
=
=
"
string
"
)
{
Cu
.
reportError
(
"
SearchSuggestionController
found
an
unexpected
string
value
:
"
+
resultData
)
;
}
else
if
(
resultData
.
formHistoryResult
)
{
results
.
formHistoryResult
=
resultData
.
formHistoryResult
;
if
(
resultData
.
result
)
{
results
.
local
=
resultData
.
result
.
map
(
s
=
>
new
SearchSuggestionEntry
(
s
)
)
;
}
}
else
if
(
resultData
.
result
)
{
let
richSuggestionData
=
this
.
_getRichSuggestionData
(
resultData
.
result
)
;
let
fullTextSuggestions
=
resultData
.
result
[
0
]
;
for
(
let
i
=
0
;
i
<
fullTextSuggestions
.
length
;
+
+
i
)
{
results
.
remote
.
push
(
this
.
_newSearchSuggestionEntry
(
fullTextSuggestions
[
i
]
richSuggestionData
?
.
[
i
]
)
)
;
}
}
}
if
(
results
.
remote
.
length
)
{
results
.
local
=
results
.
local
.
slice
(
0
this
.
maxLocalResults
)
;
}
if
(
results
.
remote
.
length
&
&
results
.
local
.
length
&
&
dedupeRemoteAndLocal
)
{
for
(
let
i
=
0
;
i
<
results
.
local
.
length
;
+
+
i
)
{
let
dupIndex
=
results
.
remote
.
findIndex
(
e
=
>
e
.
equals
(
results
.
local
[
i
]
)
)
;
if
(
dupIndex
!
=
-
1
)
{
results
.
remote
.
splice
(
dupIndex
1
)
;
}
}
}
let
maxRemoteCount
=
this
.
maxRemoteResults
;
if
(
dedupeRemoteAndLocal
)
{
maxRemoteCount
-
=
results
.
local
.
length
;
}
results
.
remote
=
results
.
remote
.
slice
(
0
maxRemoteCount
)
;
if
(
this
.
_callback
)
{
this
.
_callback
(
results
)
;
}
this
.
_reset
(
)
;
return
results
;
}
_getRichSuggestionData
(
remoteResultData
)
{
if
(
!
remoteResultData
|
|
!
Array
.
isArray
(
remoteResultData
)
)
{
return
undefined
;
}
for
(
let
entry
of
remoteResultData
)
{
if
(
typeof
entry
=
=
"
object
"
&
&
entry
.
hasOwnProperty
(
"
google
:
suggestdetail
"
)
)
{
let
richData
=
entry
[
"
google
:
suggestdetail
"
]
;
if
(
Array
.
isArray
(
richData
)
&
&
richData
.
length
=
=
remoteResultData
[
0
]
.
length
)
{
return
richData
;
}
}
}
return
undefined
;
}
_newSearchSuggestionEntry
(
suggestion
richSuggestionData
)
{
if
(
richSuggestionData
)
{
return
new
SearchSuggestionEntry
(
suggestion
{
matchPrefix
:
richSuggestionData
?
.
mp
tail
:
richSuggestionData
?
.
t
}
)
;
}
return
new
SearchSuggestionEntry
(
suggestion
)
;
}
_reset
(
)
{
this
.
_request
=
null
;
if
(
this
.
_remoteResultTimer
)
{
this
.
_remoteResultTimer
.
cancel
(
)
;
this
.
_remoteResultTimer
=
null
;
}
this
.
_deferredRemoteResult
=
null
;
this
.
_searchString
=
null
;
}
}
;
SearchSuggestionController
.
engineOffersSuggestions
=
function
(
engine
)
{
return
engine
.
supportsResponseType
(
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
;
}
;
SearchSuggestionController
.
SEARCH_HISTORY_MAX_VALUE_LENGTH
=
255
;
SearchSuggestionController
.
REMOTE_TIMEOUT_DEFAULT
=
REMOTE_TIMEOUT_DEFAULT
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SearchSuggestionController
.
prototype
"
remoteTimeout
"
REMOTE_TIMEOUT_PREF
REMOTE_TIMEOUT_DEFAULT
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SearchSuggestionController
.
prototype
"
suggestionsEnabled
"
BROWSER_SUGGEST_PREF
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SearchSuggestionController
.
prototype
"
suggestionsInPrivateBrowsingEnabled
"
BROWSER_SUGGEST_PRIVATE_PREF
false
)
;
