var
EXPORTED_SYMBOLS
=
[
"
SearchSettings
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
DeferredTask
:
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logConsole
"
(
)
=
>
{
return
console
.
createInstance
(
{
prefix
:
"
SearchSettings
"
maxLogLevel
:
lazy
.
SearchUtils
.
loggingEnabled
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
const
SETTINGS_FILENAME
=
"
search
.
json
.
mozlz4
"
;
class
SearchSettings
{
constructor
(
searchService
)
{
this
.
_searchService
=
searchService
;
}
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
;
static
SETTINGS_INVALIDATION_DELAY
=
1000
;
_batchTask
=
null
;
_metaData
=
{
}
;
_searchService
=
null
;
_currentSettings
=
null
;
addObservers
(
)
{
Services
.
obs
.
addObserver
(
this
lazy
.
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
Services
.
obs
.
addObserver
(
this
lazy
.
SearchUtils
.
TOPIC_SEARCH_SERVICE
)
;
}
removeObservers
(
)
{
Services
.
obs
.
removeObserver
(
this
lazy
.
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
Services
.
obs
.
removeObserver
(
this
lazy
.
SearchUtils
.
TOPIC_SEARCH_SERVICE
)
;
}
async
get
(
origin
=
"
"
)
{
let
json
;
await
this
.
_ensurePendingWritesCompleted
(
origin
)
;
try
{
let
settingsFilePath
=
PathUtils
.
join
(
PathUtils
.
profileDir
SETTINGS_FILENAME
)
;
json
=
await
IOUtils
.
readJSON
(
settingsFilePath
{
decompress
:
true
}
)
;
if
(
!
json
.
engines
|
|
!
json
.
engines
.
length
)
{
throw
new
Error
(
"
no
engine
in
the
file
"
)
;
}
}
catch
(
ex
)
{
lazy
.
logConsole
.
warn
(
"
get
:
No
settings
file
exists
new
profile
?
"
ex
)
;
json
=
{
}
;
}
if
(
json
.
metaData
)
{
this
.
_metaData
=
json
.
metaData
;
}
if
(
json
.
version
<
6
|
|
!
(
"
useSavedOrder
"
in
this
.
_metaData
)
)
{
const
prefName
=
lazy
.
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
useDBForOrder
"
;
let
useSavedOrder
=
Services
.
prefs
.
getBoolPref
(
prefName
false
)
;
this
.
setAttribute
(
"
useSavedOrder
"
useSavedOrder
)
;
Services
.
prefs
.
clearUserPref
(
prefName
)
;
}
this
.
_currentSettings
=
json
;
return
json
;
}
_delayedWrite
(
)
{
if
(
this
.
_batchTask
)
{
this
.
_batchTask
.
disarm
(
)
;
}
else
{
let
task
=
async
(
)
=
>
{
if
(
!
this
.
_searchService
.
isInitialized
|
|
this
.
_searchService
.
_reloadingEngines
)
{
this
.
_batchTask
.
arm
(
)
;
return
;
}
lazy
.
logConsole
.
debug
(
"
batchTask
:
Invalidating
engine
settings
"
)
;
await
this
.
_write
(
)
;
}
;
this
.
_batchTask
=
new
lazy
.
DeferredTask
(
task
SearchSettings
.
SETTINGS_INVALIDATION_DELAY
)
;
}
this
.
_batchTask
.
arm
(
)
;
}
async
_ensurePendingWritesCompleted
(
origin
=
"
"
)
{
if
(
!
this
.
_batchTask
)
{
return
;
}
lazy
.
logConsole
.
debug
(
"
finalizing
batch
task
"
)
;
let
task
=
this
.
_batchTask
;
this
.
_batchTask
=
null
;
if
(
origin
=
=
"
test
"
)
{
task
.
disarm
(
)
;
}
else
{
await
task
.
finalize
(
)
;
}
}
async
_write
(
)
{
if
(
this
.
_batchTask
)
{
this
.
_batchTask
.
disarm
(
)
;
}
let
settings
=
{
}
;
settings
.
version
=
lazy
.
SearchUtils
.
SETTINGS_VERSION
;
settings
.
engines
=
[
.
.
.
this
.
_searchService
.
_engines
.
values
(
)
]
;
settings
.
metaData
=
this
.
_metaData
;
if
(
this
.
_currentSettings
?
.
engines
)
{
for
(
let
engine
of
this
.
_currentSettings
.
engines
)
{
let
included
=
settings
.
engines
.
some
(
e
=
>
e
.
_name
=
=
engine
.
_name
)
;
if
(
engine
.
_isAppProvided
&
&
!
included
)
{
settings
.
engines
.
push
(
engine
)
;
}
}
}
this
.
_currentSettings
=
settings
;
try
{
if
(
!
settings
.
engines
.
length
)
{
throw
new
Error
(
"
cannot
write
without
any
engine
.
"
)
;
}
lazy
.
logConsole
.
debug
(
"
_write
:
Writing
to
settings
file
.
"
)
;
let
path
=
PathUtils
.
join
(
PathUtils
.
profileDir
SETTINGS_FILENAME
)
;
await
IOUtils
.
writeJSON
(
path
settings
{
compress
:
true
tmpPath
:
path
+
"
.
tmp
"
}
)
;
lazy
.
logConsole
.
debug
(
"
_write
:
settings
file
written
to
disk
.
"
)
;
Services
.
obs
.
notifyObservers
(
null
lazy
.
SearchUtils
.
TOPIC_SEARCH_SERVICE
"
write
-
settings
-
to
-
disk
-
complete
"
)
;
}
catch
(
ex
)
{
lazy
.
logConsole
.
error
(
"
_write
:
Could
not
write
to
settings
file
:
"
ex
)
;
}
}
setAttribute
(
name
val
)
{
this
.
_metaData
[
name
]
=
val
;
this
.
_delayedWrite
(
)
;
}
setVerifiedAttribute
(
name
val
)
{
this
.
_metaData
[
name
]
=
val
;
this
.
_metaData
[
this
.
getHashName
(
name
)
]
=
lazy
.
SearchUtils
.
getVerificationHash
(
val
)
;
this
.
_delayedWrite
(
)
;
}
getAttribute
(
name
)
{
return
this
.
_metaData
[
name
]
?
?
undefined
;
}
getVerifiedAttribute
(
name
)
{
let
val
=
this
.
getAttribute
(
name
)
;
if
(
val
&
&
this
.
getAttribute
(
this
.
getHashName
(
name
)
)
!
=
lazy
.
SearchUtils
.
getVerificationHash
(
val
)
)
{
lazy
.
logConsole
.
warn
(
"
getVerifiedGlobalAttr
invalid
hash
for
"
name
)
;
return
undefined
;
}
return
val
;
}
getHashName
(
name
)
{
if
(
name
=
=
"
current
"
)
{
return
"
hash
"
;
}
return
name
+
"
Hash
"
;
}
async
shutdown
(
state
)
{
if
(
!
this
.
_batchTask
)
{
return
;
}
state
.
step
=
"
Finalizing
batched
task
"
;
try
{
await
this
.
_batchTask
.
finalize
(
)
;
state
.
step
=
"
Batched
task
finalized
"
;
}
catch
(
ex
)
{
state
.
step
=
"
Batched
task
failed
to
finalize
"
;
state
.
latestError
.
message
=
"
"
+
ex
;
if
(
ex
&
&
typeof
ex
=
=
"
object
"
)
{
state
.
latestError
.
stack
=
ex
.
stack
|
|
undefined
;
}
}
}
observe
(
engine
topic
verb
)
{
switch
(
topic
)
{
case
lazy
.
SearchUtils
.
TOPIC_ENGINE_MODIFIED
:
switch
(
verb
)
{
case
lazy
.
SearchUtils
.
MODIFIED_TYPE
.
ADDED
:
case
lazy
.
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
:
case
lazy
.
SearchUtils
.
MODIFIED_TYPE
.
REMOVED
:
this
.
_delayedWrite
(
)
;
break
;
}
break
;
case
lazy
.
SearchUtils
.
TOPIC_SEARCH_SERVICE
:
switch
(
verb
)
{
case
"
init
-
complete
"
:
case
"
engines
-
reloaded
"
:
this
.
_delayedWrite
(
)
;
break
;
}
break
;
}
}
}
