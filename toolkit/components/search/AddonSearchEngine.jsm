const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
SearchEngine
:
"
resource
:
/
/
gre
/
modules
/
SearchEngine
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
}
)
;
class
AddonSearchEngine
extends
lazy
.
SearchEngine
{
constructor
(
{
isAppProvided
details
json
}
=
{
}
)
{
super
(
{
loadPath
:
"
[
other
]
addEngineWithDetails
:
"
+
(
details
?
.
extensionID
?
?
json
.
extensionID
?
?
json
.
_extensionID
?
?
null
)
isAppProvided
}
)
;
if
(
details
)
{
if
(
!
details
.
extensionID
)
{
throw
Components
.
Exception
(
"
Empty
extensionID
passed
to
_createAndAddEngine
!
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
this
.
_initFromManifest
(
details
.
extensionID
details
.
extensionBaseURI
details
.
manifest
details
.
locale
details
.
config
)
;
}
else
{
this
.
_initWithJSON
(
json
)
;
}
}
}
var
EXPORTED_SYMBOLS
=
[
"
AddonSearchEngine
"
]
;
