const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
RemoteSettingsClient
:
"
resource
:
/
/
services
-
settings
/
RemoteSettingsClient
.
jsm
"
SearchCache
:
"
resource
:
/
/
gre
/
modules
/
SearchCache
.
jsm
"
SearchEngineSelector
:
"
resource
:
/
/
gre
/
modules
/
SearchEngineSelector
.
jsm
"
SearchTestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
}
)
;
var
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
var
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
var
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
ExtensionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
SearchTestUtils
.
init
(
Assert
registerCleanupFunction
)
;
const
CACHE_FILENAME
=
"
search
.
json
.
mozlz4
"
;
var
XULRuntime
=
Cc
[
"
mozilla
.
org
/
xre
/
runtime
;
1
"
]
.
getService
(
Ci
.
nsIXULRuntime
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
log
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
region
.
log
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
modernConfig
"
true
)
;
AddonTestUtils
.
init
(
this
false
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
telemetry
.
testing
.
overrideProductsCheck
"
true
)
;
SearchCache
.
CACHE_INVALIDATION_DELAY
=
250
;
async
function
useTestEngines
(
folder
=
"
data
"
subFolder
=
null
config
=
null
)
{
let
url
=
resource
:
/
/
test
/
{
folder
}
/
;
if
(
subFolder
)
{
url
+
=
{
subFolder
}
/
;
}
let
resProt
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
resProt
.
setSubstitution
(
"
search
-
extensions
"
Services
.
io
.
newURI
(
url
)
)
;
const
settings
=
await
RemoteSettings
(
SearchUtils
.
SETTINGS_KEY
)
;
if
(
config
)
{
return
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
config
)
;
}
let
chan
=
NetUtil
.
newChannel
(
{
uri
:
"
resource
:
/
/
search
-
extensions
/
engines
.
json
"
loadUsingSystemPrincipal
:
true
}
)
;
let
json
=
parseJsonFromStream
(
chan
.
open
(
)
)
;
return
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
json
.
data
)
;
}
async
function
promiseCacheData
(
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
CACHE_FILENAME
)
;
let
bytes
=
await
OS
.
File
.
read
(
path
{
compression
:
"
lz4
"
}
)
;
return
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
bytes
)
)
;
}
function
promiseSaveCacheData
(
data
)
{
return
OS
.
File
.
writeAtomic
(
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
CACHE_FILENAME
)
new
TextEncoder
(
)
.
encode
(
JSON
.
stringify
(
data
)
)
{
compression
:
"
lz4
"
}
)
;
}
async
function
promiseEngineMetadata
(
)
{
let
cache
=
await
promiseCacheData
(
)
;
let
data
=
{
}
;
for
(
let
engine
of
cache
.
engines
)
{
data
[
engine
.
_shortName
]
=
engine
.
_metaData
;
}
return
data
;
}
async
function
promiseGlobalMetadata
(
)
{
return
(
await
promiseCacheData
(
)
)
.
metaData
;
}
async
function
promiseSaveGlobalMetadata
(
globalData
)
{
let
data
=
await
promiseCacheData
(
)
;
data
.
metaData
=
globalData
;
await
promiseSaveCacheData
(
data
)
;
}
function
promiseDefaultNotification
(
type
=
"
normal
"
)
{
return
SearchTestUtils
.
promiseSearchNotification
(
SearchUtils
.
MODIFIED_TYPE
[
type
=
=
"
private
"
?
"
DEFAULT_PRIVATE
"
:
"
DEFAULT
"
]
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
}
function
removeCacheFile
(
)
{
let
file
=
do_get_profile
(
)
.
clone
(
)
;
file
.
append
(
CACHE_FILENAME
)
;
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
return
true
;
}
return
false
;
}
function
isUSTimezone
(
)
{
let
UTCOffset
=
new
Date
(
)
.
getTimezoneOffset
(
)
;
return
UTCOffset
>
=
150
&
&
UTCOffset
<
=
600
;
}
const
kTestEngineName
=
"
Test
search
engine
"
;
function
promiseAfterCache
(
)
{
return
SearchTestUtils
.
promiseSearchNotification
(
"
write
-
cache
-
to
-
disk
-
complete
"
)
;
}
function
parseJsonFromStream
(
aInputStream
)
{
let
bytes
=
NetUtil
.
readInputStream
(
aInputStream
aInputStream
.
available
(
)
)
;
return
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
bytes
)
)
;
}
function
readJSONFile
(
aFile
)
{
let
stream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
try
{
stream
.
init
(
aFile
FileUtils
.
MODE_RDONLY
FileUtils
.
PERMS_FILE
0
)
;
return
parseJsonFromStream
(
stream
stream
.
available
(
)
)
;
}
catch
(
ex
)
{
dump
(
"
search
test
:
readJSONFile
:
Error
reading
JSON
file
:
"
+
ex
+
"
\
n
"
)
;
}
finally
{
stream
.
close
(
)
;
}
return
false
;
}
function
isSubObjectOf
(
expectedObj
actualObj
skipProp
)
{
for
(
let
prop
in
expectedObj
)
{
if
(
skipProp
&
&
skipProp
(
prop
expectedObj
[
prop
]
)
)
{
continue
;
}
if
(
expectedObj
[
prop
]
instanceof
Object
)
{
Assert
.
equal
(
actualObj
[
prop
]
?
.
length
expectedObj
[
prop
]
.
length
Should
have
the
correct
length
for
property
{
prop
}
)
;
isSubObjectOf
(
expectedObj
[
prop
]
actualObj
[
prop
]
skipProp
)
;
}
else
{
Assert
.
equal
(
actualObj
[
prop
]
expectedObj
[
prop
]
Should
have
the
correct
value
for
property
{
prop
}
)
;
}
}
}
var
gDataUrl
;
function
useHttpServer
(
dir
=
"
data
"
)
{
let
httpServer
=
new
HttpServer
(
)
;
httpServer
.
start
(
-
1
)
;
httpServer
.
registerDirectory
(
"
/
"
do_get_cwd
(
)
)
;
gDataUrl
=
http
:
/
/
localhost
:
{
httpServer
.
identity
.
primaryPort
}
/
{
dir
}
/
;
registerCleanupFunction
(
async
function
cleanup_httpServer
(
)
{
await
new
Promise
(
resolve
=
>
{
httpServer
.
stop
(
resolve
)
;
}
)
;
}
)
;
return
httpServer
;
}
var
addTestEngines
=
async
function
(
aItems
)
{
if
(
!
gDataUrl
)
{
do_throw
(
"
useHttpServer
must
be
called
before
addTestEngines
.
"
)
;
}
let
engines
=
[
]
;
for
(
let
item
of
aItems
)
{
info
(
"
Adding
engine
:
"
+
item
.
name
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
obs
.
addObserver
(
function
obs
(
subject
topic
data
)
{
try
{
let
engine
=
subject
.
QueryInterface
(
Ci
.
nsISearchEngine
)
;
info
(
"
Observed
"
+
data
+
"
for
"
+
engine
.
name
)
;
if
(
data
!
=
"
engine
-
added
"
|
|
engine
.
name
!
=
item
.
name
)
{
return
;
}
Services
.
obs
.
removeObserver
(
obs
"
browser
-
search
-
engine
-
modified
"
)
;
engines
.
push
(
engine
)
;
resolve
(
)
;
}
catch
(
ex
)
{
reject
(
ex
)
;
}
}
"
browser
-
search
-
engine
-
modified
"
)
;
if
(
item
.
xmlFileName
)
{
Services
.
search
.
addOpenSearchEngine
(
gDataUrl
+
item
.
xmlFileName
null
)
;
}
else
{
Services
.
search
.
addEngineWithDetails
(
item
.
name
item
.
details
)
;
}
}
)
;
}
return
engines
;
}
;
function
installTestEngine
(
)
{
useHttpServer
(
)
;
return
addTestEngines
(
[
{
name
:
kTestEngineName
xmlFileName
:
"
engine
.
xml
"
}
]
)
;
}
async
function
asyncReInit
(
{
awaitRegionFetch
=
false
}
=
{
}
)
{
let
promise
=
SearchTestUtils
.
promiseSearchNotification
(
"
reinit
-
complete
"
)
;
Services
.
search
.
reInit
(
)
;
return
promise
;
}
const
TELEMETRY_RESULT_ENUM
=
{
SUCCESS
:
0
SUCCESS_WITHOUT_DATA
:
1
TIMEOUT
:
2
ERROR
:
3
}
;
function
checkCountryResultTelemetry
(
aExpectedValue
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
SEARCH_SERVICE_COUNTRY_FETCH_RESULT
"
)
;
let
snapshot
=
histogram
.
snapshot
(
)
;
if
(
aExpectedValue
!
=
null
)
{
equal
(
snapshot
.
values
[
aExpectedValue
]
1
)
;
}
else
{
deepEqual
(
snapshot
.
values
{
}
)
;
}
}
async
function
setupRemoteSettings
(
)
{
const
settings
=
await
RemoteSettings
(
"
hijack
-
blocklists
"
)
;
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
[
{
id
:
"
load
-
paths
"
matches
:
[
"
[
other
]
addEngineWithDetails
:
searchignore
mozilla
.
com
"
]
_status
:
"
synced
"
}
{
id
:
"
submission
-
urls
"
matches
:
[
"
ignore
=
true
"
]
_status
:
"
synced
"
}
]
)
;
}
function
useCustomGeoServer
(
region
waitToRespond
=
Promise
.
resolve
(
)
)
{
let
srv
=
useHttpServer
(
)
;
srv
.
registerPathHandler
(
"
/
fetch_region
"
async
(
req
res
)
=
>
{
res
.
processAsync
(
)
;
await
waitToRespond
;
res
.
setStatusLine
(
"
1
.
1
"
200
"
OK
"
)
;
res
.
write
(
JSON
.
stringify
(
{
country_code
:
region
}
)
)
;
res
.
finish
(
)
;
}
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
region
.
network
.
url
"
http
:
/
/
localhost
:
{
srv
.
identity
.
primaryPort
}
/
fetch_region
)
;
}
let
updatePromise
=
SearchTestUtils
.
promiseSearchNotification
(
"
settings
-
update
-
complete
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
if
(
Services
.
search
.
isInitialized
)
{
await
updatePromise
;
}
}
)
;
