const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
clearTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
RemoteSettingsClient
:
"
resource
:
/
/
services
-
settings
/
RemoteSettingsClient
.
jsm
"
SearchSettings
:
"
resource
:
/
/
gre
/
modules
/
SearchSettings
.
jsm
"
SearchEngineSelector
:
"
resource
:
/
/
gre
/
modules
/
SearchEngineSelector
.
jsm
"
SearchService
:
"
resource
:
/
/
gre
/
modules
/
SearchService
.
jsm
"
SearchTestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
}
)
;
var
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
var
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
var
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
ExtensionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
SearchTestUtils
.
init
(
this
)
;
const
SETTINGS_FILENAME
=
"
search
.
json
.
mozlz4
"
;
var
XULRuntime
=
Cc
[
"
mozilla
.
org
/
xre
/
runtime
;
1
"
]
.
getService
(
Ci
.
nsIXULRuntime
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
log
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
region
.
log
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
modernConfig
"
true
)
;
AddonTestUtils
.
init
(
this
false
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
telemetry
.
testing
.
overrideProductsCheck
"
true
)
;
SearchSettings
.
SETTNGS_INVALIDATION_DELAY
=
250
;
async
function
promiseSettingsData
(
)
{
let
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
SETTINGS_FILENAME
)
;
let
bytes
=
await
OS
.
File
.
read
(
path
{
compression
:
"
lz4
"
}
)
;
return
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
bytes
)
)
;
}
function
promiseSaveSettingsData
(
data
)
{
return
OS
.
File
.
writeAtomic
(
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
SETTINGS_FILENAME
)
new
TextEncoder
(
)
.
encode
(
JSON
.
stringify
(
data
)
)
{
compression
:
"
lz4
"
}
)
;
}
async
function
promiseEngineMetadata
(
)
{
let
settings
=
await
promiseSettingsData
(
)
;
let
data
=
{
}
;
for
(
let
engine
of
settings
.
engines
)
{
data
[
engine
.
_name
]
=
engine
.
_metaData
;
}
return
data
;
}
async
function
promiseGlobalMetadata
(
)
{
return
(
await
promiseSettingsData
(
)
)
.
metaData
;
}
async
function
promiseSaveGlobalMetadata
(
globalData
)
{
let
data
=
await
promiseSettingsData
(
)
;
data
.
metaData
=
globalData
;
await
promiseSaveSettingsData
(
data
)
;
}
function
promiseDefaultNotification
(
type
=
"
normal
"
)
{
return
SearchTestUtils
.
promiseSearchNotification
(
SearchUtils
.
MODIFIED_TYPE
[
type
=
=
"
private
"
?
"
DEFAULT_PRIVATE
"
:
"
DEFAULT
"
]
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
}
function
removeSettingsFile
(
)
{
let
file
=
do_get_profile
(
)
.
clone
(
)
;
file
.
append
(
SETTINGS_FILENAME
)
;
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
return
true
;
}
return
false
;
}
function
isUSTimezone
(
)
{
let
UTCOffset
=
new
Date
(
)
.
getTimezoneOffset
(
)
;
return
UTCOffset
>
=
150
&
&
UTCOffset
<
=
600
;
}
const
kTestEngineName
=
"
Test
search
engine
"
;
function
promiseAfterSettings
(
)
{
return
SearchTestUtils
.
promiseSearchNotification
(
"
write
-
settings
-
to
-
disk
-
complete
"
)
;
}
async
function
promiseSetHomeRegion
(
region
)
{
let
promise
=
SearchTestUtils
.
promiseSearchNotification
(
"
engines
-
reloaded
"
)
;
Region
.
_setHomeRegion
(
region
)
;
await
promise
;
}
async
function
promiseSetLocale
(
locale
)
{
if
(
!
Services
.
locale
.
availableLocales
.
includes
(
locale
)
)
{
throw
new
Error
(
"
{
locale
}
"
needs
to
be
included
in
Services
.
locales
.
availableLocales
at
the
start
of
the
test
.
)
;
}
let
promise
=
SearchTestUtils
.
promiseSearchNotification
(
"
engines
-
reloaded
"
)
;
Services
.
locale
.
requestedLocales
=
[
locale
]
;
await
promise
;
}
async
function
readJSONFile
(
file
)
{
let
bytes
=
await
OS
.
File
.
read
(
file
.
path
)
;
return
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
bytes
)
)
;
}
function
isSubObjectOf
(
expectedObj
actualObj
skipProp
)
{
for
(
let
prop
in
expectedObj
)
{
if
(
skipProp
&
&
skipProp
(
prop
expectedObj
[
prop
]
)
)
{
continue
;
}
if
(
expectedObj
[
prop
]
instanceof
Object
)
{
Assert
.
equal
(
actualObj
[
prop
]
?
.
length
expectedObj
[
prop
]
.
length
Should
have
the
correct
length
for
property
{
prop
}
)
;
isSubObjectOf
(
expectedObj
[
prop
]
actualObj
[
prop
]
skipProp
)
;
}
else
{
Assert
.
equal
(
actualObj
[
prop
]
expectedObj
[
prop
]
Should
have
the
correct
value
for
property
{
prop
}
)
;
}
}
}
var
gDataUrl
;
function
useHttpServer
(
dir
=
"
data
"
)
{
let
httpServer
=
new
HttpServer
(
)
;
httpServer
.
start
(
-
1
)
;
httpServer
.
registerDirectory
(
"
/
"
do_get_cwd
(
)
)
;
gDataUrl
=
http
:
/
/
localhost
:
{
httpServer
.
identity
.
primaryPort
}
/
{
dir
}
/
;
registerCleanupFunction
(
async
function
cleanup_httpServer
(
)
{
await
new
Promise
(
resolve
=
>
{
httpServer
.
stop
(
resolve
)
;
}
)
;
}
)
;
return
httpServer
;
}
const
TELEMETRY_RESULT_ENUM
=
{
SUCCESS
:
0
SUCCESS_WITHOUT_DATA
:
1
TIMEOUT
:
2
ERROR
:
3
}
;
function
checkCountryResultTelemetry
(
aExpectedValue
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
SEARCH_SERVICE_COUNTRY_FETCH_RESULT
"
)
;
let
snapshot
=
histogram
.
snapshot
(
)
;
if
(
aExpectedValue
!
=
null
)
{
equal
(
snapshot
.
values
[
aExpectedValue
]
1
)
;
}
else
{
deepEqual
(
snapshot
.
values
{
}
)
;
}
}
async
function
setupRemoteSettings
(
)
{
const
settings
=
await
RemoteSettings
(
"
hijack
-
blocklists
"
)
;
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
[
{
id
:
"
load
-
paths
"
matches
:
[
"
[
other
]
addEngineWithDetails
:
searchignore
mozilla
.
com
"
]
_status
:
"
synced
"
}
{
id
:
"
submission
-
urls
"
matches
:
[
"
ignore
=
true
"
]
_status
:
"
synced
"
}
]
)
;
}
function
useCustomGeoServer
(
region
waitToRespond
=
Promise
.
resolve
(
)
)
{
let
srv
=
useHttpServer
(
)
;
srv
.
registerPathHandler
(
"
/
fetch_region
"
async
(
req
res
)
=
>
{
res
.
processAsync
(
)
;
await
waitToRespond
;
res
.
setStatusLine
(
"
1
.
1
"
200
"
OK
"
)
;
res
.
write
(
JSON
.
stringify
(
{
country_code
:
region
}
)
)
;
res
.
finish
(
)
;
}
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
region
.
network
.
url
"
http
:
/
/
localhost
:
{
srv
.
identity
.
primaryPort
}
/
fetch_region
)
;
}
class
SearchObserver
{
constructor
(
expectedNotifications
returnEngineForNotification
=
false
)
{
this
.
observer
=
this
.
observer
.
bind
(
this
)
;
this
.
deferred
=
PromiseUtils
.
defer
(
)
;
this
.
expectedNotifications
=
expectedNotifications
;
this
.
returnEngineForNotification
=
returnEngineForNotification
;
Services
.
obs
.
addObserver
(
this
.
observer
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
this
.
timeout
=
setTimeout
(
this
.
handleTimeout
.
bind
(
this
)
1000
)
;
}
get
promise
(
)
{
return
this
.
deferred
.
promise
;
}
handleTimeout
(
)
{
this
.
deferred
.
reject
(
new
Error
(
"
Waiting
for
Notifications
timed
out
only
received
:
"
+
this
.
expectedNotifications
.
join
(
"
"
)
)
)
;
}
observer
(
subject
topic
data
)
{
Assert
.
greater
(
this
.
expectedNotifications
.
length
0
"
Should
be
expecting
a
notification
"
)
;
Assert
.
equal
(
data
this
.
expectedNotifications
[
0
]
"
Should
have
received
the
next
expected
notification
"
)
;
if
(
this
.
returnEngineForNotification
&
&
data
=
=
this
.
returnEngineForNotification
)
{
this
.
engineToReturn
=
subject
.
QueryInterface
(
Ci
.
nsISearchEngine
)
;
}
this
.
expectedNotifications
.
shift
(
)
;
if
(
!
this
.
expectedNotifications
.
length
)
{
clearTimeout
(
this
.
timeout
)
;
delete
this
.
timeout
;
this
.
deferred
.
resolve
(
this
.
engineToReturn
)
;
Services
.
obs
.
removeObserver
(
this
.
observer
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
}
}
}
let
updatePromise
=
SearchTestUtils
.
promiseSearchNotification
(
"
settings
-
update
-
complete
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
if
(
Services
.
search
.
isInitialized
)
{
await
updatePromise
;
}
}
)
;
let
consoleAllowList
=
[
'
property
"
localProfileDir
"
is
non
-
configurable
and
can
\
'
t
be
deleted
'
'
property
"
profileDir
"
is
non
-
configurable
and
can
\
'
t
be
deleted
'
]
;
let
consoleListener
=
{
observe
(
subject
topic
data
)
{
let
msg
=
subject
.
wrappedJSObject
;
let
messageContents
=
msg
.
arguments
[
0
]
?
.
message
|
|
msg
.
arguments
[
0
]
;
if
(
msg
.
level
=
=
"
error
"
&
&
!
consoleAllowList
.
some
(
e
=
>
messageContents
.
includes
(
e
)
)
)
{
Assert
.
ok
(
false
"
Unexpected
console
message
:
"
+
messageContents
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
consoleListener
"
console
-
api
-
log
-
event
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
obs
.
removeObserver
(
consoleListener
"
console
-
api
-
log
-
event
"
)
;
}
)
;
