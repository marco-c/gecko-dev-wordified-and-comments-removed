"
use
strict
"
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
{
promiseShutdownManager
promiseStartupManager
}
=
AddonTestUtils
;
let
extension
;
let
oldRemoveEngineFunc
;
add_task
(
async
function
setup
(
)
{
await
SearchTestUtils
.
useTestEngines
(
"
simple
-
engines
"
)
;
await
promiseStartupManager
(
)
;
Services
.
telemetry
.
canRecordExtended
=
true
;
await
Services
.
search
.
init
(
)
;
await
promiseAfterSettings
(
)
;
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
skipUnload
:
true
}
)
;
await
extension
.
awaitStartup
(
)
;
oldRemoveEngineFunc
=
Services
.
search
.
wrappedJSObject
.
removeEngine
.
bind
(
Services
.
search
.
wrappedJSObject
)
;
Services
.
search
.
wrappedJSObject
.
removeEngine
=
(
)
=
>
{
}
;
registerCleanupFunction
(
async
(
)
=
>
{
await
promiseShutdownManager
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_valid_extensions_do_nothing
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Assert
.
ok
(
Services
.
search
.
getEngineByName
(
"
Example
"
)
"
Should
have
installed
the
engine
"
)
;
await
Services
.
search
.
runBackgroundChecks
(
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
;
Assert
.
deepEqual
(
scalars
{
}
"
Should
not
have
recorded
any
issues
"
)
;
}
)
;
add_task
(
async
function
test_different_name
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
engine
.
wrappedJSObject
.
_name
=
"
Example
Test
"
;
await
Services
.
search
.
runBackgroundChecks
(
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
searchinit
.
engine_invalid_webextension
"
extension
.
id
5
)
;
engine
.
wrappedJSObject
.
_name
=
"
Example
"
;
}
)
;
add_task
(
async
function
test_different_url
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
engine
.
wrappedJSObject
.
_urls
=
[
]
;
engine
.
wrappedJSObject
.
_setUrls
(
{
search_url
:
"
https
:
/
/
example
.
com
/
123
"
search_url_get_params
:
"
?
q
=
{
searchTerms
}
"
}
)
;
await
Services
.
search
.
runBackgroundChecks
(
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
searchinit
.
engine_invalid_webextension
"
extension
.
id
6
)
;
}
)
;
add_task
(
async
function
test_extension_no_longer_specifies_engine
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
extensionInfo
=
{
useAddonManager
:
"
permanent
"
manifest
:
{
version
:
"
2
.
0
"
browser_specific_settings
:
{
gecko
:
{
id
:
"
example
tests
.
mozilla
.
org
"
}
}
}
}
;
await
extension
.
upgrade
(
extensionInfo
)
;
await
Services
.
search
.
runBackgroundChecks
(
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
searchinit
.
engine_invalid_webextension
"
extension
.
id
4
)
;
}
)
;
add_task
(
async
function
test_disabled_extension
(
)
{
await
extension
.
addon
.
disable
(
)
;
await
Services
.
search
.
runBackgroundChecks
(
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
searchinit
.
engine_invalid_webextension
"
extension
.
id
2
)
;
extension
.
addon
.
enable
(
)
;
await
extension
.
awaitStartup
(
)
;
}
)
;
add_task
(
async
function
test_missing_extension
(
)
{
let
extensionId
=
extension
.
id
;
await
extension
.
unload
(
)
;
await
Services
.
search
.
runBackgroundChecks
(
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
searchinit
.
engine_invalid_webextension
"
extensionId
1
)
;
await
oldRemoveEngineFunc
(
Services
.
search
.
getEngineByName
(
"
Example
"
)
)
;
}
)
;
