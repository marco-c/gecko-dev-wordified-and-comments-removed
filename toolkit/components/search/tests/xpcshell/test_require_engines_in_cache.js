function
run_test
(
)
{
removeMetadata
(
)
;
removeCacheFile
(
)
;
do_load_manifest
(
"
data
/
chrome
.
manifest
"
)
;
configureToLoadJarEngines
(
)
;
do_check_false
(
Services
.
search
.
isInitialized
)
;
run_next_test
(
)
;
}
add_task
(
function
*
ignore_cache_files_without_engines
(
)
{
let
commitPromise
=
promiseAfterCache
(
)
yield
asyncInit
(
)
;
let
engineCount
=
Services
.
search
.
getEngines
(
)
.
length
;
do_check_eq
(
engineCount
1
)
;
yield
commitPromise
;
let
cache
=
yield
promiseCacheData
(
)
;
cache
.
engines
=
[
]
;
yield
promiseSaveCacheData
(
cache
)
;
commitPromise
=
promiseAfterCache
(
)
yield
asyncReInit
(
)
;
do_check_eq
(
engineCount
Services
.
search
.
getEngines
(
)
.
length
)
;
yield
commitPromise
;
yield
promiseSaveCacheData
(
cache
)
;
let
unInitPromise
=
waitForSearchNotification
(
"
uninit
-
complete
"
)
;
let
reInitPromise
=
asyncReInit
(
)
;
yield
unInitPromise
;
do_check_false
(
Services
.
search
.
isInitialized
)
;
do_check_eq
(
engineCount
Services
.
search
.
getEngines
(
)
.
length
)
;
do_check_true
(
Services
.
search
.
isInitialized
)
;
yield
reInitPromise
;
}
)
;
add_task
(
function
*
skip_writing_cache_without_engines
(
)
{
let
unInitPromise
=
waitForSearchNotification
(
"
uninit
-
complete
"
)
;
let
reInitPromise
=
asyncReInit
(
)
;
yield
unInitPromise
;
do_check_true
(
removeCacheFile
(
)
)
;
let
resProt
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
resProt
.
setSubstitution
(
"
search
-
plugins
"
Services
.
io
.
newURI
(
"
about
:
blank
"
)
)
;
yield
reInitPromise
;
do_check_eq
(
0
Services
.
search
.
getEngines
(
)
.
length
)
;
unInitPromise
=
waitForSearchNotification
(
"
uninit
-
complete
"
)
;
reInitPromise
=
asyncReInit
(
)
;
yield
unInitPromise
;
do_check_false
(
removeCacheFile
(
)
)
;
yield
reInitPromise
;
}
)
;
