"
use
strict
"
;
var
gServerCohort
=
"
"
;
const
kUrlPref
=
"
geoSpecificDefaults
.
url
"
;
const
kDayInSeconds
=
86400
;
const
kYearInSeconds
=
kDayInSeconds
*
365
;
add_task
(
async
function
no_request_if_prefed_off
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
geoSpecificDefaults
"
false
)
;
await
Promise
.
all
(
[
asyncInit
(
)
promiseAfterCache
(
)
]
)
;
checkNoRequest
(
requests
)
;
await
Promise
.
all
(
[
installTestEngine
(
)
promiseAfterCache
(
)
]
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
getDefaultEngineName
(
false
)
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefaultExpir
"
undefined
"
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefault
"
undefined
"
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefaultHash
"
undefined
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
geoSpecificDefaults
"
true
)
;
}
)
;
}
)
;
add_task
(
async
function
should_get_geo_defaults_only_once
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
Assert
.
ok
(
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
search
.
region
"
)
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
"
browser
.
search
.
region
"
)
"
FR
"
)
;
await
Promise
.
all
(
[
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
promiseAfterCache
(
)
]
)
;
checkRequest
(
requests
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
kTestEngineName
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefaultExpir
"
number
"
)
;
Assert
.
ok
(
metadata
.
searchDefaultExpir
>
Date
.
now
(
)
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefault
"
string
"
)
;
Assert
.
equal
(
metadata
.
searchDefault
"
Test
search
engine
"
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefaultHash
"
string
"
)
;
Assert
.
equal
(
metadata
.
searchDefaultHash
.
length
44
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
checkNoRequest
(
requests
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
kTestEngineName
)
;
}
)
;
}
)
;
add_task
(
async
function
should_request_when_region_not_set
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
search
.
region
"
)
;
await
Promise
.
all
(
[
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
promiseAfterCache
(
)
]
)
;
checkRequest
(
requests
)
;
}
)
;
}
)
;
add_task
(
async
function
should_recheck_if_interval_expired
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
await
forceExpiration
(
)
;
let
date
=
Date
.
now
(
)
;
await
Promise
.
all
(
[
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
promiseAfterCache
(
)
]
)
;
checkRequest
(
requests
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefaultExpir
"
number
"
)
;
Assert
.
ok
(
metadata
.
searchDefaultExpir
>
=
date
+
kYearInSeconds
*
1000
)
;
Assert
.
ok
(
metadata
.
searchDefaultExpir
<
date
+
(
kYearInSeconds
+
3600
)
*
1000
)
;
}
)
;
}
)
;
add_task
(
async
function
should_recheck_if_appversion_changed
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
let
data
=
await
promiseCacheData
(
)
;
Assert
.
equal
(
data
.
appVersion
Services
.
appinfo
.
version
)
;
data
.
appVersion
=
"
1
"
;
await
promiseSaveCacheData
(
data
)
;
await
Promise
.
all
(
[
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
promiseAfterCache
(
)
]
)
;
checkRequest
(
requests
)
;
data
=
await
promiseCacheData
(
)
;
Assert
.
equal
(
data
.
appVersion
Services
.
appinfo
.
version
)
;
}
)
;
}
)
;
add_task
(
async
function
should_recheck_when_broken_hash
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
let
metadata
=
await
promiseGlobalMetadata
(
)
;
let
hash
=
metadata
.
searchDefaultHash
;
metadata
.
searchDefaultHash
=
"
broken
"
;
await
promiseSaveGlobalMetadata
(
metadata
)
;
let
commitPromise
=
promiseAfterCache
(
)
;
let
unInitPromise
=
waitForSearchNotification
(
"
uninit
-
complete
"
)
;
let
reInitPromise
=
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
await
unInitPromise
;
await
reInitPromise
;
checkRequest
(
requests
)
;
await
commitPromise
;
metadata
=
await
promiseGlobalMetadata
(
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefaultHash
"
string
"
)
;
if
(
metadata
.
searchDefaultHash
=
=
"
broken
"
)
{
info
(
"
waiting
for
the
cache
to
be
saved
a
second
time
"
)
;
await
promiseAfterCache
(
)
;
metadata
=
await
promiseGlobalMetadata
(
)
;
}
Assert
.
equal
(
metadata
.
searchDefaultHash
hash
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
checkNoRequest
(
requests
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
kTestEngineName
)
;
}
)
;
}
)
;
add_task
(
async
function
should_remember_cohort_id
(
)
{
const
cohortPref
=
"
browser
.
search
.
cohort
"
;
const
cohort
=
"
xpcshell
"
;
await
withGeoServer
(
async
function
cont
(
requests
)
{
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
cohortPref
)
Services
.
prefs
.
PREF_INVALID
)
;
await
forceExpiration
(
)
;
let
commitPromise
=
promiseAfterCache
(
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
checkRequest
(
requests
)
;
await
commitPromise
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
cohortPref
)
Services
.
prefs
.
PREF_STRING
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
cohortPref
)
cohort
)
;
}
{
cohort
}
)
;
await
withGeoServer
(
async
function
cont
(
requests
)
{
await
forceExpiration
(
)
;
let
commitPromise
=
promiseAfterCache
(
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
checkRequest
(
requests
cohort
)
;
await
commitPromise
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
cohortPref
)
Services
.
prefs
.
PREF_INVALID
)
;
}
)
;
}
)
;
add_task
(
async
function
should_retry_after_failure
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
await
forceExpiration
(
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
checkRequest
(
requests
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
checkRequest
(
requests
)
;
}
{
path
:
"
lookup_fail
"
}
)
;
}
)
;
add_task
(
async
function
should_honor_retry_after_header
(
)
{
await
withGeoServer
(
async
function
cont
(
requests
)
{
await
forceExpiration
(
)
;
let
date
=
Date
.
now
(
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
await
promiseAfterCache
(
)
;
checkRequest
(
requests
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
Assert
.
equal
(
typeof
metadata
.
searchDefaultExpir
"
number
"
)
;
Assert
.
ok
(
metadata
.
searchDefaultExpir
>
=
date
+
kDayInSeconds
*
1000
)
;
Assert
.
ok
(
metadata
.
searchDefaultExpir
<
date
+
(
kDayInSeconds
+
3600
)
*
1000
)
;
await
asyncReInit
(
{
waitForRegionFetch
:
true
}
)
;
checkNoRequest
(
requests
)
;
}
{
path
:
"
lookup_unavailable
"
}
)
;
}
)
;
