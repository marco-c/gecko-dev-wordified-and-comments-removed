"
use
strict
"
;
async
function
loadSettingsFile
(
settingsFile
name
)
{
let
settings
=
await
readJSONFile
(
do_get_file
(
settingsFile
)
)
;
settings
.
metaData
.
current
=
name
;
settings
.
metaData
.
hash
=
SearchUtils
.
getVerificationHash
(
name
)
;
await
promiseSaveSettingsData
(
settings
)
;
}
async
function
checkLoadSettingProperties
(
settingsFile
engineName
)
{
await
loadSettingsFile
(
settingsFile
engineName
)
;
const
settingsFileWritten
=
promiseAfterSettings
(
)
;
let
ss
=
new
SearchService
(
)
;
let
result
=
await
ss
.
init
(
)
;
Assert
.
ok
(
Components
.
isSuccessCode
(
result
)
"
Should
have
successfully
initialized
the
search
service
"
)
;
await
settingsFileWritten
;
let
engines
=
await
ss
.
getEngines
(
)
;
Assert
.
deepEqual
(
engines
.
map
(
e
=
>
e
.
name
)
[
"
engine1
"
"
engine2
"
]
"
Should
have
only
loaded
the
app
-
provided
engines
"
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
engine1
"
"
Should
have
used
the
configured
default
engine
"
)
;
removeSettingsFile
(
)
;
ss
.
_removeObservers
(
)
;
}
add_setup
(
async
function
(
)
{
SearchTestUtils
.
setRemoteSettingsConfig
(
[
{
identifier
:
"
engine1
"
}
{
identifier
:
"
engine2
"
}
]
)
;
}
)
;
add_task
(
async
function
test_obsolete_distribution_engine
(
)
{
await
checkLoadSettingProperties
(
"
settings
/
v1
-
obsolete
-
distribution
.
json
"
"
Distribution
"
)
;
}
)
;
add_task
(
async
function
test_obsolete_langpack_engine
(
)
{
await
checkLoadSettingProperties
(
"
settings
/
v1
-
obsolete
-
langpack
.
json
"
"
Langpack
"
)
;
}
)
;
add_task
(
async
function
test_obsolete_app_engine
(
)
{
await
checkLoadSettingProperties
(
"
settings
/
v1
-
obsolete
-
app
.
json
"
"
App
"
)
;
}
)
;
