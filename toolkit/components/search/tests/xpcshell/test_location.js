const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
add_task
(
async
function
setup
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
geoSpecificDefaults
"
true
)
;
Services
.
prefs
.
getDefaultBranch
(
SearchUtils
.
BROWSER_SEARCH_PREF
)
.
setCharPref
(
"
geoSpecificDefaults
.
url
"
"
"
)
;
}
)
;
add_task
(
async
function
test_location
(
)
{
Services
.
prefs
.
setCharPref
(
"
geo
.
provider
-
country
.
network
.
url
"
'
data
:
application
/
json
{
"
country_code
"
:
"
AU
"
}
'
)
;
await
Services
.
search
.
init
(
true
)
;
equal
(
Services
.
prefs
.
getCharPref
(
"
browser
.
search
.
region
"
)
"
AU
"
"
got
the
correct
region
.
"
)
;
checkCountryResultTelemetry
(
TELEMETRY_RESULT_ENUM
.
SUCCESS
)
;
let
probeUSMismatched
probeNonUSMismatched
;
switch
(
AppConstants
.
platform
)
{
case
"
macosx
"
:
probeUSMismatched
=
"
SEARCH_SERVICE_US_COUNTRY_MISMATCHED_PLATFORM_OSX
"
;
probeNonUSMismatched
=
"
SEARCH_SERVICE_NONUS_COUNTRY_MISMATCHED_PLATFORM_OSX
"
;
break
;
case
"
win
"
:
probeUSMismatched
=
"
SEARCH_SERVICE_US_COUNTRY_MISMATCHED_PLATFORM_WIN
"
;
probeNonUSMismatched
=
"
SEARCH_SERVICE_NONUS_COUNTRY_MISMATCHED_PLATFORM_WIN
"
;
break
;
default
:
break
;
}
if
(
probeUSMismatched
&
&
probeNonUSMismatched
)
{
let
countryCode
=
await
Services
.
sysinfo
.
countryCode
;
print
(
"
Platform
says
the
country
-
code
is
"
countryCode
)
;
if
(
!
countryCode
)
{
info
(
"
No
country
code
set
on
this
machine
skipping
rest
of
test
"
)
;
return
;
}
let
expectedResult
;
let
hid
;
if
(
countryCode
=
=
"
US
"
)
{
hid
=
probeUSMismatched
;
expectedResult
=
{
0
:
0
1
:
1
2
:
0
}
;
}
else
{
hid
=
probeNonUSMismatched
;
expectedResult
=
countryCode
=
=
"
AU
"
?
{
0
:
1
1
:
0
}
:
{
0
:
0
1
:
1
2
:
0
}
;
}
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
hid
)
;
let
snapshot
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
snapshot
=
histogram
.
snapshot
(
)
;
return
snapshot
.
sum
=
=
1
;
}
)
;
deepEqual
(
snapshot
.
values
expectedResult
)
;
}
}
)
;
