"
use
strict
"
;
function
run_test
(
)
{
useHttpServer
(
)
;
run_next_test
(
)
;
}
add_task
(
function
*
test_paramSubstitution
(
)
{
yield
asyncInit
(
)
;
let
prefix
=
"
http
:
/
/
test
.
moz
/
search
?
q
=
"
;
let
[
engine
]
=
yield
addTestEngines
(
[
{
name
:
"
test
"
details
:
[
"
"
"
test
"
"
Search
Test
"
"
GET
"
prefix
+
"
{
searchTerms
}
"
]
}
]
)
;
let
url
=
engine
.
wrappedJSObject
.
_getURLOfType
(
"
text
/
html
"
)
;
equal
(
url
.
template
prefix
+
"
{
searchTerms
}
"
)
;
let
searchTerms
=
"
fxsearch
"
;
function
check
(
template
expected
)
{
url
.
template
=
prefix
+
template
;
equal
(
engine
.
getSubmission
(
searchTerms
)
.
uri
.
spec
prefix
+
expected
)
;
}
check
(
"
{
searchTerms
}
/
{
searchTerms
}
"
searchTerms
+
"
/
"
+
searchTerms
)
;
check
(
"
{
searchTerms
?
}
"
searchTerms
)
;
check
(
"
{
unknownOptional
?
}
"
"
"
)
;
check
(
"
{
unknownRequired
}
"
"
{
unknownRequired
}
"
)
;
check
(
"
{
language
}
"
Services
.
locale
.
getRequestedLocale
(
)
)
;
check
(
"
{
language
?
}
"
Services
.
locale
.
getRequestedLocale
(
)
)
;
engine
.
wrappedJSObject
.
_queryCharset
=
"
UTF
-
8
"
;
check
(
"
{
inputEncoding
}
"
"
UTF
-
8
"
)
;
check
(
"
{
inputEncoding
?
}
"
"
UTF
-
8
"
)
;
check
(
"
{
outputEncoding
}
"
"
UTF
-
8
"
)
;
check
(
"
{
outputEncoding
?
}
"
"
UTF
-
8
"
)
;
check
(
"
{
count
}
"
"
20
"
)
;
check
(
"
{
count
?
}
"
"
"
)
;
check
(
"
{
startIndex
}
"
"
1
"
)
;
check
(
"
{
startIndex
?
}
"
"
"
)
;
check
(
"
{
startPage
}
"
"
1
"
)
;
check
(
"
{
startPage
?
}
"
"
"
)
;
check
(
"
{
moz
:
distributionID
}
"
"
{
moz
:
distributionID
}
"
)
;
check
(
"
{
moz
:
official
}
"
"
{
moz
:
official
}
"
)
;
check
(
"
{
moz
:
locale
}
"
"
{
moz
:
locale
}
"
)
;
engine
.
wrappedJSObject
.
_loadPath
=
"
[
app
]
"
;
check
(
"
{
moz
:
distributionID
}
"
"
"
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
search
.
distributionID
"
"
xpcshell
"
)
;
check
(
"
{
moz
:
distributionID
}
"
"
xpcshell
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
official
"
true
)
;
check
(
"
{
moz
:
official
}
"
"
official
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
official
"
false
)
;
check
(
"
{
moz
:
official
}
"
"
unofficial
"
)
;
check
(
"
{
moz
:
locale
}
"
Services
.
locale
.
getRequestedLocale
(
)
)
;
}
)
;
