"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SearchEngineSelector
:
"
resource
:
/
/
gre
/
modules
/
SearchEngineSelector
.
jsm
"
}
)
;
const
TESTS
=
[
{
input
:
[
[
"
A
"
750
"
no
"
"
no
"
]
[
"
B
"
3000
"
no
"
"
no
"
]
[
"
C
"
2000
"
yes
"
"
no
"
]
[
"
D
"
1000
"
yes
-
if
-
no
-
other
"
"
no
"
]
[
"
E
"
500
"
no
"
"
no
"
]
]
expected
:
[
"
C
"
"
B
"
"
D
"
"
A
"
"
E
"
]
expectedPrivate
:
undefined
}
{
input
:
[
[
"
A
"
750
"
no
"
"
no
"
]
[
"
B
"
3000
"
no
"
"
no
"
]
[
"
C
"
2000
"
yes
-
if
-
no
-
other
"
"
no
"
]
[
"
D
"
1000
"
yes
"
"
no
"
]
[
"
E
"
500
"
no
"
"
no
"
]
]
expected
:
[
"
D
"
"
B
"
"
C
"
"
A
"
"
E
"
]
expectedPrivate
:
undefined
}
{
input
:
[
[
"
A
"
750
"
no
"
"
no
"
]
[
"
B
"
3000
"
no
"
"
no
"
]
[
"
C
"
2000
"
no
"
"
no
"
]
[
"
D
"
1000
"
yes
-
if
-
no
-
other
"
"
no
"
]
[
"
E
"
500
"
no
"
"
no
"
]
]
expected
:
[
"
D
"
"
B
"
"
C
"
"
A
"
"
E
"
]
expectedPrivate
:
undefined
}
{
input
:
[
[
"
A
"
750
"
no
"
"
no
"
]
[
"
B
"
3000
"
yes
-
if
-
no
-
other
"
"
no
"
]
[
"
C
"
2000
"
no
"
"
yes
"
]
[
"
D
"
1000
"
yes
"
"
yes
-
if
-
no
-
other
"
]
[
"
E
"
500
"
no
"
"
no
"
]
]
expected
:
[
"
D
"
"
C
"
"
B
"
"
A
"
"
E
"
]
expectedPrivate
:
"
C
"
}
{
input
:
[
[
"
A
"
750
"
no
"
"
yes
-
if
-
no
-
other
"
]
[
"
B
"
3000
"
yes
-
if
-
no
-
other
"
"
no
"
]
[
"
C
"
2000
"
no
"
"
yes
"
]
[
"
D
"
1000
"
yes
"
"
no
"
]
[
"
E
"
500
"
no
"
"
no
"
]
]
expected
:
[
"
D
"
"
C
"
"
B
"
"
A
"
"
E
"
]
expectedPrivate
:
"
C
"
}
{
input
:
[
[
"
A
"
750
"
no
"
"
yes
-
if
-
no
-
other
"
]
[
"
B
"
3000
"
yes
-
if
-
no
-
other
"
"
no
"
]
[
"
C
"
2000
"
no
"
"
no
"
]
[
"
D
"
1000
"
yes
"
"
no
"
]
[
"
E
"
500
"
no
"
"
no
"
]
]
expected
:
[
"
D
"
"
A
"
"
B
"
"
C
"
"
E
"
]
expectedPrivate
:
"
A
"
}
]
;
function
getConfigUrl
(
testInput
)
{
return
(
"
data
:
application
/
json
"
+
JSON
.
stringify
(
{
data
:
testInput
.
map
(
info
=
>
(
{
engineName
:
info
[
0
]
orderHint
:
info
[
1
]
default
:
info
[
2
]
defaultPrivate
:
info
[
3
]
appliesTo
:
[
{
included
:
{
everywhere
:
true
}
}
]
}
)
)
}
)
)
;
}
const
engineSelector
=
new
SearchEngineSelector
(
)
;
add_task
(
async
function
(
)
{
let
i
=
0
;
for
(
const
test
of
TESTS
)
{
await
engineSelector
.
init
(
getConfigUrl
(
test
.
input
)
)
;
const
{
engines
privateDefault
}
=
engineSelector
.
fetchEngineConfiguration
(
"
us
"
"
en
-
US
"
)
;
let
names
=
engines
.
map
(
obj
=
>
obj
.
engineName
)
;
Assert
.
deepEqual
(
names
test
.
expected
Should
have
the
correct
order
for
the
engines
:
test
{
i
}
)
;
Assert
.
equal
(
privateDefault
test
.
expectedPrivate
Should
have
the
correct
selection
for
the
private
engine
:
test
{
i
+
+
}
)
;
}
}
)
;
