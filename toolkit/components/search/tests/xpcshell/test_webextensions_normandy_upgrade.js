"
use
strict
"
;
SearchTestUtils
.
initXPCShellAddonManager
(
this
"
system
"
)
;
async
function
restart
(
)
{
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
await
Services
.
search
.
init
(
false
)
;
}
const
CONFIG_DEFAULT
=
[
{
webExtension
:
{
id
:
"
plainengine
search
.
mozilla
.
org
"
}
appliesTo
:
[
{
included
:
{
everywhere
:
true
}
}
]
}
]
;
const
CONFIG_UPDATED
=
[
{
webExtension
:
{
id
:
"
plainengine
search
.
mozilla
.
org
"
}
appliesTo
:
[
{
included
:
{
everywhere
:
true
}
}
]
}
{
webExtension
:
{
id
:
"
example
search
.
mozilla
.
org
"
}
appliesTo
:
[
{
included
:
{
everywhere
:
true
}
}
]
}
]
;
async
function
getEngineNames
(
)
{
let
engines
=
await
Services
.
search
.
getDefaultEngines
(
)
;
return
engines
.
map
(
engine
=
>
engine
.
_name
)
;
}
add_task
(
async
function
setup
(
)
{
await
useTestEngines
(
"
test
-
extensions
"
null
CONFIG_DEFAULT
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
registerCleanupFunction
(
AddonTestUtils
.
promiseShutdownManager
)
;
SearchTestUtils
.
useMockIdleService
(
)
;
await
Services
.
search
.
init
(
)
;
}
)
;
add_task
(
async
function
test_config_before_normandy
(
)
{
await
SearchTestUtils
.
updateRemoteSettingsConfig
(
CONFIG_DEFAULT
)
;
await
restart
(
)
;
Assert
.
deepEqual
(
await
getEngineNames
(
)
[
"
Plain
"
]
)
;
await
SearchTestUtils
.
updateRemoteSettingsConfig
(
CONFIG_UPDATED
)
;
Assert
.
deepEqual
(
await
getEngineNames
(
)
[
"
Plain
"
]
"
Updated
engine
hasnt
been
installed
yet
"
)
;
let
addon
=
await
SearchTestUtils
.
installSystemSearchExtension
(
)
;
Assert
.
deepEqual
(
await
getEngineNames
(
)
[
"
Plain
"
"
Example
"
]
"
Both
engines
are
now
enabled
"
)
;
await
addon
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_normandy_before_config
(
)
{
await
SearchTestUtils
.
updateRemoteSettingsConfig
(
CONFIG_DEFAULT
)
;
await
restart
(
)
;
Assert
.
deepEqual
(
await
getEngineNames
(
)
[
"
Plain
"
]
)
;
let
addon
=
await
SearchTestUtils
.
installSystemSearchExtension
(
)
;
Assert
.
deepEqual
(
await
getEngineNames
(
)
[
"
Plain
"
]
"
Normandy
engine
ignored
as
not
in
config
yet
"
)
;
await
SearchTestUtils
.
updateRemoteSettingsConfig
(
CONFIG_UPDATED
)
;
Assert
.
deepEqual
(
await
getEngineNames
(
)
[
"
Plain
"
"
Example
"
]
"
Both
engines
are
now
enabled
"
)
;
await
addon
.
unload
(
)
;
}
)
;
