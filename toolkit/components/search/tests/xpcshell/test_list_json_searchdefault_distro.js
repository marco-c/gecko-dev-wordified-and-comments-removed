"
use
strict
"
;
add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
getDefaultBranch
(
null
)
.
setCharPref
(
"
distribution
.
id
"
"
partner
-
test
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
}
)
;
add_task
(
async
function
test_defaultEngineNamePref
(
)
{
let
defaultEngineName
=
getDefaultEngineName
(
)
;
Services
.
prefs
.
setCharPref
(
kDefaultenginenamePref
"
Bing
"
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
"
expected
default
search
engine
after
pref
set
"
)
;
Services
.
prefs
.
clearUserPref
(
kDefaultenginenamePref
)
;
}
)
;
add_task
(
async
function
test_defaultEngineNameUserPrefUS
(
)
{
let
defaultEngineName
=
getDefaultEngineName
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
search
.
region
"
"
US
"
)
;
Services
.
prefs
.
setCharPref
(
kDefaultenginenamePref
"
Bing
"
)
;
await
asyncReInit
(
{
skipReset
:
true
}
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
"
expected
US
default
search
engine
after
pref
set
"
)
;
Services
.
prefs
.
clearUserPref
(
kDefaultenginenamePref
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
search
.
region
"
)
;
}
)
;
add_task
(
async
function
test_defaultEngineNameDefaultPrefUS
(
)
{
Services
.
prefs
.
setCharPref
(
"
browser
.
search
.
region
"
"
US
"
)
;
let
defaultBranch
=
Services
.
prefs
.
getDefaultBranch
(
null
)
;
defaultBranch
.
setCharPref
(
kDefaultenginenamePref
"
data
:
text
/
plain
browser
.
search
.
defaultenginename
=
Bing
"
)
;
await
asyncReInit
(
{
skipReset
:
true
}
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Bing
"
"
expected
new
default
search
engine
after
pref
set
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
search
.
region
"
)
;
}
)
;
