"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonTestUtils
:
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
SearchTestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
const
GLOBAL_SCOPE
=
this
;
class
SearchConfigTest
{
constructor
(
config
=
{
}
)
{
this
.
_config
=
config
;
this
.
_testDebug
=
false
;
}
async
setup
(
)
{
AddonTestUtils
.
init
(
GLOBAL_SCOPE
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
geoSpecificDefaults
"
false
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
search
.
geoip
.
url
"
"
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
Services
.
search
.
init
(
)
;
Assert
.
ok
(
Services
.
search
.
isInitialized
"
Should
have
correctly
initialized
the
search
service
"
)
;
}
async
run
(
)
{
const
locales
=
await
this
.
_getLocales
(
)
;
const
regions
=
this
.
_regions
;
for
(
let
region
of
regions
)
{
for
(
let
locale
of
locales
)
{
const
infoString
=
region
:
"
{
region
}
"
locale
:
"
{
locale
}
"
;
info
(
Checking
{
infoString
}
)
;
await
this
.
_reinit
(
region
locale
)
;
this
.
_assertDefaultEngines
(
region
locale
infoString
)
;
}
}
Assert
.
ok
(
!
this
.
_testDebug
"
Should
not
have
test
debug
turned
on
in
production
"
)
;
}
async
_reinit
(
region
locale
)
{
Services
.
prefs
.
setStringPref
(
"
browser
.
search
.
region
"
region
.
toUpperCase
(
)
)
;
const
reinitCompletePromise
=
SearchTestUtils
.
promiseSearchNotification
(
"
reinit
-
complete
"
)
;
Services
.
locale
.
availableLocales
=
[
locale
]
;
Services
.
locale
.
requestedLocales
=
[
locale
]
;
Services
.
search
.
reInit
(
)
;
await
reinitCompletePromise
;
Assert
.
ok
(
Services
.
search
.
isInitialized
"
Should
have
completely
re
-
initialization
if
it
fails
check
logs
for
if
reinit
was
successful
"
)
;
}
get
_regions
(
)
{
if
(
this
.
_testDebug
)
{
return
new
Set
(
[
"
by
"
"
cn
"
"
kz
"
"
us
"
"
ru
"
"
tr
"
]
)
;
}
return
Services
.
intl
.
getAvailableLocaleDisplayNames
(
"
region
"
)
;
}
async
_getLocales
(
)
{
if
(
this
.
_testDebug
)
{
return
[
"
be
"
"
en
-
US
"
"
kk
"
"
tr
"
"
ru
"
"
zh
-
CN
"
]
;
}
const
data
=
await
OS
.
File
.
read
(
do_get_file
(
"
all
-
locales
"
)
.
path
{
encoding
:
"
utf
-
8
"
}
)
;
return
data
.
split
(
"
\
n
"
)
.
filter
(
e
=
>
e
!
=
"
"
)
;
}
_localeIncludes
(
locales
locale
)
{
if
(
"
matches
"
in
locales
&
&
locales
.
matches
.
includes
(
locale
)
)
{
return
true
;
}
if
(
"
startsWith
"
in
locales
)
{
return
locales
.
startsWith
.
find
(
element
=
>
element
.
startsWith
(
locale
)
)
;
}
return
false
;
}
_localeRegionInSection
(
section
region
locale
)
{
for
(
const
{
regions
locales
}
of
section
)
{
if
(
regions
.
includes
(
region
)
&
&
this
.
_localeIncludes
(
locales
locale
)
)
{
return
true
;
}
}
return
false
;
}
_assertDefaultEngines
(
region
locale
infoString
)
{
const
identifier
=
Services
.
search
.
originalDefaultEngine
.
identifier
;
if
(
!
(
"
included
"
in
this
.
_config
.
default
)
&
&
!
(
"
excluded
"
in
this
.
_config
.
default
)
)
{
Assert
.
notEqual
(
identifier
this
.
_config
.
identifier
Should
not
be
set
as
the
default
engine
for
any
locale
/
region
currently
set
for
{
infoString
}
)
;
return
;
}
if
(
(
"
included
"
in
this
.
_config
.
default
&
&
this
.
_localeRegionInSection
(
this
.
_config
.
default
.
included
region
locale
)
)
|
|
(
"
excluded
"
in
this
.
_config
.
default
&
&
!
this
.
_localeRegionInSection
(
this
.
_config
.
default
.
excluded
region
locale
)
)
)
{
Assert
.
equal
(
identifier
this
.
_config
.
identifier
Should
be
set
as
the
default
engine
for
{
infoString
}
)
;
return
;
}
Assert
.
notEqual
(
identifier
this
.
_config
.
identifier
Should
not
be
set
as
the
default
engine
for
{
infoString
}
)
;
}
}
