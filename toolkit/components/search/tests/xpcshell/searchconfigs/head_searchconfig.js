"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AddonTestUtils
:
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
sys
.
mjs
"
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
sys
.
mjs
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
SearchEngine
:
"
resource
:
/
/
gre
/
modules
/
SearchEngine
.
sys
.
mjs
"
SearchEngineSelector
:
"
resource
:
/
/
gre
/
modules
/
SearchEngineSelector
.
sys
.
mjs
"
SearchTestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
sys
.
mjs
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
SearchEngineSelectorOld
:
"
resource
:
/
/
gre
/
modules
/
SearchEngineSelectorOld
.
sys
.
mjs
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
updateAppInfo
:
"
resource
:
/
/
testing
-
common
/
AppInfo
.
sys
.
mjs
"
}
)
;
const
GLOBAL_SCOPE
=
this
;
const
TEST_DEBUG
=
Services
.
env
.
get
(
"
TEST_DEBUG
"
)
;
const
URLTYPE_SUGGEST_JSON
=
"
application
/
x
-
suggestions
+
json
"
;
const
URLTYPE_SEARCH_HTML
=
"
text
/
html
"
;
const
SUBMISSION_PURPOSES
=
[
"
searchbar
"
"
keyword
"
"
contextmenu
"
"
homepage
"
"
newtab
"
]
;
let
engineSelector
;
async
function
maybeSetupConfig
(
)
{
const
SEARCH_CONFIG
=
Services
.
env
.
get
(
"
SEARCH_CONFIG
"
)
;
if
(
SEARCH_CONFIG
)
{
if
(
!
(
SEARCH_CONFIG
in
SearchUtils
.
ENGINES_URLS
)
)
{
throw
new
Error
(
Invalid
value
for
SEARCH_CONFIG
)
;
}
const
url
=
SearchUtils
.
ENGINES_URLS
[
SEARCH_CONFIG
]
;
const
response
=
await
fetch
(
url
)
;
const
config
=
await
response
.
json
(
)
;
const
settings
=
await
RemoteSettings
(
SearchUtils
.
SETTINGS_KEY
)
;
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
config
.
data
)
;
}
}
class
SearchConfigTest
{
constructor
(
config
=
{
}
)
{
this
.
_config
=
config
;
}
async
setup
(
version
=
"
42
.
0
"
)
{
if
(
SearchUtils
.
newSearchConfigEnabled
)
{
updateAppInfo
(
{
name
:
"
XPCShell
"
ID
:
"
xpcshell
tests
.
mozilla
.
org
"
version
platformVersion
:
version
}
)
;
}
else
{
AddonTestUtils
.
init
(
GLOBAL_SCOPE
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
version
version
)
;
}
await
maybeSetupConfig
(
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
geoSpecificDefaults
"
false
)
;
Services
.
prefs
.
setBoolPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
separatePrivateDefault
.
ui
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
separatePrivateDefault
"
true
)
;
if
(
!
SearchUtils
.
newSearchConfigEnabled
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
}
await
Services
.
search
.
init
(
)
;
engineSelector
=
Services
.
search
.
wrappedJSObject
.
_engineSelector
|
|
SearchUtils
.
newSearchConfigEnabled
?
new
SearchEngineSelector
(
)
:
new
SearchEngineSelectorOld
(
)
;
Assert
.
ok
(
Services
.
search
.
isInitialized
"
Should
have
correctly
initialized
the
search
service
"
)
;
}
async
run
(
)
{
const
locales
=
await
this
.
getLocales
(
)
;
const
regions
=
this
.
_regions
;
for
(
let
region
of
regions
)
{
for
(
let
locale
of
locales
)
{
const
engines
=
await
this
.
_getEngines
(
region
locale
)
;
this
.
_assertEngineRules
(
[
engines
[
0
]
]
region
locale
"
default
"
)
;
const
isPresent
=
this
.
_assertAvailableEngines
(
region
locale
engines
)
;
if
(
isPresent
)
{
this
.
_assertEngineDetails
(
region
locale
engines
)
;
}
}
}
}
async
_getEngines
(
region
locale
)
{
let
configs
=
await
engineSelector
.
fetchEngineConfiguration
(
{
locale
region
:
region
|
|
"
default
"
channel
:
SearchUtils
.
MODIFIED_APP_CHANNEL
}
)
;
return
SearchTestUtils
.
searchConfigToEngines
(
configs
.
engines
)
;
}
get
_regions
(
)
{
if
(
TEST_DEBUG
)
{
return
new
Set
(
[
"
by
"
"
cn
"
"
kz
"
"
us
"
"
ru
"
"
tr
"
null
]
)
;
}
return
[
.
.
.
Services
.
intl
.
getAvailableLocaleDisplayNames
(
"
region
"
)
null
]
;
}
async
getLocales
(
)
{
if
(
TEST_DEBUG
)
{
return
[
"
be
"
"
en
-
US
"
"
kk
"
"
tr
"
"
ru
"
"
zh
-
CN
"
"
ach
"
"
unknown
"
]
;
}
const
data
=
await
IOUtils
.
readUTF8
(
do_get_file
(
"
all
-
locales
"
)
.
path
)
;
let
locales
=
[
.
.
.
data
.
split
(
"
\
n
"
)
.
filter
(
e
=
>
e
!
=
"
"
)
"
en
-
US
"
]
;
locales
=
locales
.
map
(
l
=
>
(
l
=
=
"
ja
-
JP
-
mac
"
?
"
ja
-
JP
-
macos
"
:
l
)
)
;
locales
.
push
(
"
unknown
"
)
;
return
locales
;
}
_localeRegionInSection
(
section
region
locale
)
{
for
(
const
{
regions
locales
}
of
section
)
{
const
inRegions
=
!
regions
|
|
regions
.
includes
(
region
)
;
const
inLocales
=
!
locales
|
|
locales
.
includes
(
locale
)
;
if
(
inRegions
&
&
inLocales
)
{
return
true
;
}
}
return
false
;
}
_findEngine
(
engines
identifier
exactMatch
)
{
return
engines
.
find
(
engine
=
>
exactMatch
?
engine
.
identifier
=
=
identifier
:
engine
.
identifier
.
startsWith
(
identifier
)
)
;
}
_assertEngineRules
(
engines
region
locale
section
)
{
const
infoString
=
region
:
"
{
region
}
"
locale
:
"
{
locale
}
"
;
const
config
=
this
.
_config
[
section
]
;
const
hasIncluded
=
"
included
"
in
config
;
const
hasExcluded
=
"
excluded
"
in
config
;
const
identifierIncluded
=
!
!
this
.
_findEngine
(
engines
this
.
_config
.
identifier
this
.
_config
.
identifierExactMatch
?
?
false
)
;
if
(
section
=
=
"
default
"
&
&
!
hasIncluded
&
&
!
hasExcluded
)
{
this
.
assertOk
(
!
identifierIncluded
Should
not
be
{
section
}
for
any
locale
/
region
currently
set
for
{
infoString
}
)
;
return
false
;
}
let
included
=
hasIncluded
&
&
this
.
_localeRegionInSection
(
config
.
included
region
locale
)
;
let
excluded
=
hasExcluded
&
&
this
.
_localeRegionInSection
(
config
.
excluded
region
locale
)
;
if
(
(
included
&
&
(
!
hasExcluded
|
|
!
excluded
)
)
|
|
(
!
hasIncluded
&
&
hasExcluded
&
&
!
excluded
)
)
{
this
.
assertOk
(
identifierIncluded
Should
be
{
section
}
for
{
infoString
}
)
;
return
true
;
}
this
.
assertOk
(
!
identifierIncluded
Should
not
be
{
section
}
for
{
infoString
}
)
;
return
false
;
}
_assertDefaultEngines
(
region
locale
)
{
this
.
_assertEngineRules
(
[
Services
.
search
.
appDefaultEngine
]
region
locale
"
default
"
)
;
this
.
_assertEngineRules
(
[
Services
.
search
.
appPrivateDefaultEngine
]
region
locale
"
default
"
)
;
}
_assertAvailableEngines
(
region
locale
engines
)
{
return
this
.
_assertEngineRules
(
engines
region
locale
"
available
"
)
;
}
_assertEngineDetails
(
region
locale
engines
)
{
const
details
=
this
.
_config
.
details
.
filter
(
value
=
>
{
const
included
=
this
.
_localeRegionInSection
(
value
.
included
region
locale
)
;
const
excluded
=
value
.
excluded
&
&
this
.
_localeRegionInSection
(
value
.
excluded
region
locale
)
;
return
included
&
&
!
excluded
;
}
)
;
this
.
assertEqual
(
details
.
length
1
Should
have
just
one
details
section
for
region
:
{
region
}
locale
:
{
locale
}
)
;
const
engine
=
this
.
_findEngine
(
engines
this
.
_config
.
identifier
this
.
_config
.
identifierExactMatch
?
?
false
)
;
this
.
assertOk
(
engine
"
Should
have
an
engine
present
"
)
;
if
(
this
.
_config
.
aliases
)
{
this
.
assertDeepEqual
(
engine
.
aliases
this
.
_config
.
aliases
"
Should
have
the
correct
aliases
for
the
engine
"
)
;
}
const
location
=
in
region
:
{
region
}
locale
:
{
locale
}
;
for
(
const
rule
of
details
)
{
this
.
_assertCorrectDomains
(
location
engine
rule
)
;
if
(
rule
.
codes
)
{
this
.
_assertCorrectCodes
(
location
engine
rule
)
;
}
if
(
rule
.
searchUrlCode
|
|
rule
.
suggestUrlCode
)
{
this
.
_assertCorrectUrlCode
(
location
engine
rule
)
;
}
if
(
rule
.
aliases
)
{
this
.
assertDeepEqual
(
engine
.
aliases
rule
.
aliases
"
Should
have
the
correct
aliases
for
the
engine
"
)
;
}
if
(
rule
.
telemetryId
)
{
this
.
assertEqual
(
engine
.
telemetryId
rule
.
telemetryId
Should
have
the
correct
telemetryId
{
location
}
.
)
;
}
}
}
_assertCorrectDomains
(
location
engine
rules
)
{
this
.
assertOk
(
rules
.
domain
Should
have
an
expectedDomain
for
the
engine
{
location
}
)
;
const
searchForm
=
new
URL
(
engine
.
searchForm
)
;
this
.
assertOk
(
searchForm
.
host
.
endsWith
(
rules
.
domain
)
Should
have
the
correct
search
form
domain
{
location
}
.
Got
"
{
searchForm
.
host
}
"
expected
to
end
with
"
{
rules
.
domain
}
"
.
)
;
let
submission
=
engine
.
getSubmission
(
"
test
"
URLTYPE_SEARCH_HTML
)
;
this
.
assertOk
(
submission
.
uri
.
host
.
endsWith
(
rules
.
domain
)
Should
have
the
correct
domain
for
type
:
{
URLTYPE_SEARCH_HTML
}
{
location
}
.
Got
"
{
submission
.
uri
.
host
}
"
expected
to
end
with
"
{
rules
.
domain
}
"
.
)
;
submission
=
engine
.
getSubmission
(
"
test
"
URLTYPE_SUGGEST_JSON
)
;
if
(
this
.
_config
.
noSuggestionsURL
|
|
rules
.
noSuggestionsURL
)
{
this
.
assertOk
(
!
submission
"
Should
not
have
a
submission
url
"
)
;
}
else
if
(
this
.
_config
.
suggestionUrlBase
)
{
this
.
assertEqual
(
submission
.
uri
.
prePath
+
submission
.
uri
.
filePath
this
.
_config
.
suggestionUrlBase
Should
have
the
correct
domain
for
type
:
{
URLTYPE_SUGGEST_JSON
}
{
location
}
.
)
;
this
.
assertOk
(
submission
.
uri
.
query
.
includes
(
rules
.
suggestUrlCode
)
Should
have
the
code
in
the
uri
)
;
}
}
_assertCorrectCodes
(
location
engine
rules
)
{
for
(
const
purpose
of
SUBMISSION_PURPOSES
)
{
const
code
=
typeof
rules
.
codes
=
=
=
"
string
"
?
rules
.
codes
:
rules
.
codes
[
purpose
]
;
const
submission
=
engine
.
getSubmission
(
"
test
"
"
text
/
html
"
purpose
)
;
const
submissionQueryParams
=
submission
.
uri
.
query
.
split
(
"
&
"
)
;
this
.
assertOk
(
submissionQueryParams
.
includes
(
code
)
Expected
"
{
code
}
"
in
url
"
{
submission
.
uri
.
spec
}
"
from
purpose
"
{
purpose
}
"
{
location
}
)
;
const
paramName
=
code
.
split
(
"
=
"
)
[
0
]
;
this
.
assertOk
(
submissionQueryParams
.
filter
(
param
=
>
param
.
startsWith
(
paramName
)
)
.
length
=
=
1
Expected
only
one
"
{
paramName
}
"
parameter
in
"
{
submission
.
uri
.
spec
}
"
from
purpose
"
{
purpose
}
"
{
location
}
)
;
}
}
_assertCorrectUrlCode
(
location
engine
rule
)
{
if
(
rule
.
searchUrlCode
)
{
const
submission
=
engine
.
getSubmission
(
"
test
"
URLTYPE_SEARCH_HTML
)
;
this
.
assertOk
(
submission
.
uri
.
query
.
split
(
"
&
"
)
.
includes
(
rule
.
searchUrlCode
)
Expected
"
{
rule
.
searchUrlCode
}
"
in
search
url
"
{
submission
.
uri
.
spec
}
"
)
;
let
uri
=
engine
.
searchForm
;
this
.
assertOk
(
!
uri
.
includes
(
rule
.
searchUrlCode
)
"
{
rule
.
searchUrlCode
}
"
should
not
be
in
the
search
form
URL
.
)
;
}
if
(
rule
.
searchUrlCodeNotInQuery
)
{
const
submission
=
engine
.
getSubmission
(
"
test
"
URLTYPE_SEARCH_HTML
)
;
this
.
assertOk
(
submission
.
uri
.
includes
(
rule
.
searchUrlCodeNotInQuery
)
Expected
"
{
rule
.
searchUrlCodeNotInQuery
}
"
in
search
url
"
{
submission
.
uri
.
spec
}
"
)
;
}
if
(
rule
.
suggestUrlCode
)
{
const
submission
=
engine
.
getSubmission
(
"
test
"
URLTYPE_SUGGEST_JSON
)
;
this
.
assertOk
(
submission
.
uri
.
query
.
split
(
"
&
"
)
.
includes
(
rule
.
suggestUrlCode
)
Expected
"
{
rule
.
suggestUrlCode
}
"
in
suggestion
url
"
{
submission
.
uri
.
spec
}
"
)
;
}
}
assertOk
(
value
message
)
{
if
(
!
value
|
|
TEST_DEBUG
)
{
Assert
.
ok
(
value
message
)
;
}
}
assertEqual
(
actual
expected
message
)
{
if
(
actual
!
=
expected
|
|
TEST_DEBUG
)
{
Assert
.
equal
(
actual
expected
message
)
;
}
}
assertDeepEqual
(
actual
expected
message
)
{
if
(
!
ObjectUtils
.
deepEqual
(
actual
expected
)
)
{
Assert
.
deepEqual
(
actual
expected
message
)
;
}
}
}
async
function
checkUISchemaValid
(
configSchema
uiSchema
)
{
for
(
let
key
of
Object
.
keys
(
configSchema
.
properties
)
)
{
Assert
.
ok
(
uiSchema
[
"
ui
:
order
"
]
.
includes
(
key
)
Should
have
{
key
}
listed
at
the
top
-
level
of
the
ui
schema
)
;
}
}
