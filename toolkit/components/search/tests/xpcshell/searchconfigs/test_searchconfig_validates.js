"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
JsonSchema
:
"
resource
:
/
/
gre
/
modules
/
JsonSchema
.
sys
.
mjs
"
}
)
;
function
isObject
(
value
)
{
return
value
!
=
null
&
&
typeof
value
=
=
"
object
"
&
&
!
Array
.
isArray
(
value
)
;
}
function
disallowAdditionalProperties
(
section
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
)
{
return
;
}
if
(
isObject
(
section
)
)
{
if
(
section
.
properties
&
&
!
(
"
recordType
"
in
section
.
properties
)
)
{
section
.
additionalProperties
=
false
;
}
if
(
"
then
"
in
section
)
{
section
.
then
.
additionalProperties
=
false
;
}
}
for
(
let
value
of
Object
.
values
(
section
)
)
{
if
(
isObject
(
value
)
)
{
disallowAdditionalProperties
(
value
)
;
}
else
if
(
Array
.
isArray
(
value
)
)
{
for
(
let
item
of
value
)
{
disallowAdditionalProperties
(
item
)
;
}
}
}
}
async
function
assertSearchConfigValidates
(
{
collectionName
collectionData
ignoreFields
=
[
]
extraAssertsFn
getEntryId
}
)
{
let
schema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
{
collectionName
}
-
schema
.
json
)
)
;
disallowAdditionalProperties
(
schema
)
;
let
validator
=
new
JsonSchema
.
Validator
(
schema
)
;
for
(
let
entry
of
collectionData
)
{
for
(
let
field
of
[
.
.
.
ignoreFields
"
schema
"
"
id
"
"
last_modified
"
]
)
{
delete
entry
[
field
]
;
}
let
result
=
validator
.
validate
(
entry
)
;
let
message
=
Should
validate
{
getEntryId
(
entry
)
}
;
if
(
!
result
.
valid
)
{
message
+
=
:
\
n
{
JSON
.
stringify
(
result
.
errors
null
2
)
}
;
}
Assert
.
ok
(
result
.
valid
message
)
;
extraAssertsFn
?
.
(
entry
)
;
}
}
add_setup
(
async
function
(
)
{
updateAppInfo
(
{
ID
:
"
{
ec8030f7
-
c20a
-
464f
-
9b0e
-
13a3a9e97384
}
"
}
)
;
}
)
;
add_task
(
async
function
test_search_config_validates_to_schema
(
)
{
let
selector
=
new
SearchEngineSelector
(
(
)
=
>
{
}
)
;
await
assertSearchConfigValidates
(
{
collectionName
:
"
search
-
config
-
v2
"
collectionData
:
await
selector
.
getEngineConfiguration
(
)
getEntryId
:
entry
=
>
entry
.
identifier
extraAssertsFn
:
entry
=
>
{
if
(
entry
.
recordType
=
=
"
engine
"
)
{
for
(
let
urlEntry
of
Object
.
values
(
entry
.
base
.
urls
)
)
{
Assert
.
ok
(
urlEntry
.
base
"
Should
have
a
base
url
for
every
URL
defined
on
the
top
-
level
base
object
.
"
)
;
}
}
}
}
)
;
}
)
;
add_task
(
async
function
test_search_config_valid_partner_codes
(
)
{
let
selector
=
new
SearchEngineSelector
(
(
)
=
>
{
}
)
;
for
(
let
entry
of
await
selector
.
getEngineConfiguration
(
)
)
{
if
(
entry
.
recordType
=
=
"
engine
"
)
{
for
(
let
variant
of
entry
.
variants
)
{
if
(
"
partnerCode
"
in
variant
&
&
"
distributions
"
in
variant
.
environment
)
{
Assert
.
ok
(
variant
.
telemetrySuffix
{
entry
.
identifier
}
variant
should
have
a
telemetrySuffix
when
a
distribution
is
specified
with
a
partnerCode
.
)
;
}
for
(
let
subVariant
of
variant
.
subVariants
?
?
[
]
)
{
if
(
"
partnerCode
"
in
subVariant
&
&
"
distributions
"
in
subVariant
.
environment
)
{
Assert
.
ok
(
subVariant
.
telemetrySuffix
{
entry
.
identifier
}
sub
-
variant
should
have
a
telemetrySuffix
when
a
distribution
is
specified
with
a
partnerCode
.
)
;
}
}
}
}
}
}
)
;
add_task
(
async
function
test_search_config_all_locales_are_in_available_locales
(
)
{
let
selector
=
new
SearchEngineSelector
(
(
)
=
>
{
}
)
;
let
config
=
await
selector
.
getEngineConfiguration
(
)
;
let
availableLocales
=
new
Set
(
config
.
find
(
entry
=
>
entry
.
recordType
=
=
"
availableLocales
"
)
.
locales
)
;
let
localesInConfig
=
SearchTestUtils
.
extractAvailableLocales
(
config
)
;
Assert
.
deepEqual
(
Array
.
from
(
localesInConfig
.
difference
(
availableLocales
)
)
[
]
"
Available
locales
should
have
all
the
locales
listed
in
other
parts
of
the
configuration
"
)
;
Assert
.
deepEqual
(
Array
.
from
(
availableLocales
.
difference
(
localesInConfig
)
)
[
]
"
Available
locales
should
not
have
any
locales
not
listed
in
other
parts
of
the
configuration
"
)
;
}
)
;
add_task
(
async
function
test_search_config_override_validates_to_schema
(
)
{
let
collectionData
=
await
RemoteSettings
(
SearchUtils
.
SETTINGS_OVERRIDES_KEY
)
.
get
(
)
;
await
assertSearchConfigValidates
(
{
collectionName
:
"
search
-
config
-
overrides
-
v2
"
collectionData
getEntryId
:
entry
=
>
entry
.
identifier
}
)
;
}
)
;
add_task
(
async
function
test_search_config_icons_validates_to_schema
(
)
{
let
searchIcons
=
RemoteSettings
(
"
search
-
config
-
icons
"
)
;
await
assertSearchConfigValidates
(
{
collectionName
:
"
search
-
config
-
icons
"
collectionData
:
await
searchIcons
.
get
(
)
ignoreFields
:
[
"
attachment
"
]
getEntryId
:
entry
=
>
entry
.
engineIdentifiers
[
0
]
}
)
;
}
)
;
add_task
(
async
function
test_search_default_override_allowlist_validates
(
)
{
let
allowlist
=
RemoteSettings
(
"
search
-
default
-
override
-
allowlist
"
)
;
await
assertSearchConfigValidates
(
{
collectionName
:
"
search
-
default
-
override
-
allowlist
"
collectionData
:
await
allowlist
.
get
(
)
ignoreFields
:
[
"
attachment
"
]
getEntryId
:
entry
=
>
entry
.
engineName
|
|
entry
.
thirdPartyId
}
)
;
}
)
;
