"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
JsonSchema
:
"
resource
:
/
/
gre
/
modules
/
JsonSchema
.
sys
.
mjs
"
}
)
;
function
isObject
(
value
)
{
return
value
!
=
null
&
&
typeof
value
=
=
"
object
"
&
&
!
Array
.
isArray
(
value
)
;
}
function
disallowAdditionalProperties
(
section
)
{
if
(
section
.
type
=
=
"
object
"
)
{
section
.
additionalProperties
=
false
;
}
for
(
let
value
of
Object
.
values
(
section
)
)
{
if
(
isObject
(
value
)
)
{
disallowAdditionalProperties
(
value
)
;
}
}
}
let
searchConfigSchema
;
add_setup
(
async
function
(
)
{
searchConfigSchema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
engine
-
config
-
schema
.
json
"
)
)
;
}
)
;
add_task
(
async
function
test_search_config_validates_to_schema
(
)
{
disallowAdditionalProperties
(
searchConfigSchema
)
;
let
selector
=
new
SearchEngineSelector
(
(
)
=
>
{
}
)
;
let
searchConfig
=
await
selector
.
getEngineConfiguration
(
)
;
let
validator
=
new
JsonSchema
.
Validator
(
searchConfigSchema
)
;
for
(
let
entry
of
searchConfig
)
{
delete
entry
.
schema
;
delete
entry
.
id
;
delete
entry
.
last_modified
;
let
result
=
validator
.
validate
(
entry
)
;
let
message
=
Should
validate
{
entry
.
webExtension
?
.
id
}
;
if
(
!
result
.
valid
)
{
message
+
=
:
\
n
{
JSON
.
stringify
(
result
.
errors
null
2
)
}
;
}
Assert
.
ok
(
result
.
valid
message
)
;
}
}
)
;
add_task
(
async
function
test_ui_schema_valid
(
)
{
let
uiSchema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
engine
-
config
-
ui
-
schema
.
json
"
)
)
;
for
(
let
key
of
Object
.
keys
(
searchConfigSchema
.
properties
)
)
{
Assert
.
ok
(
uiSchema
[
"
ui
:
order
"
]
.
includes
(
key
)
Should
have
{
key
}
listed
at
the
top
-
level
of
the
ui
schema
)
;
}
}
)
;
