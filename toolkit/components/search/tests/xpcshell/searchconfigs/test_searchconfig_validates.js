"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
JsonSchema
:
"
resource
:
/
/
gre
/
modules
/
JsonSchema
.
sys
.
mjs
"
SearchEngineSelectorOld
:
"
resource
:
/
/
gre
/
modules
/
SearchEngineSelectorOld
.
sys
.
mjs
"
}
)
;
function
isObject
(
value
)
{
return
value
!
=
null
&
&
typeof
value
=
=
"
object
"
&
&
!
Array
.
isArray
(
value
)
;
}
function
disallowAdditionalProperties
(
section
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
)
{
return
;
}
if
(
isObject
(
section
)
)
{
if
(
section
.
properties
&
&
!
(
"
recordType
"
in
section
.
properties
)
)
{
section
.
additionalProperties
=
false
;
}
if
(
"
then
"
in
section
)
{
section
.
then
.
additionalProperties
=
false
;
}
}
for
(
let
value
of
Object
.
values
(
section
)
)
{
if
(
isObject
(
value
)
)
{
disallowAdditionalProperties
(
value
)
;
}
else
if
(
Array
.
isArray
(
value
)
)
{
for
(
let
item
of
value
)
{
disallowAdditionalProperties
(
item
)
;
}
}
}
}
let
searchConfigSchemaV1
;
let
searchConfigSchema
;
add_setup
(
async
function
(
)
{
searchConfigSchemaV1
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
config
-
schema
.
json
"
)
)
;
searchConfigSchema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
config
-
v2
-
schema
.
json
"
)
)
;
}
)
;
async
function
checkSearchConfigValidates
(
schema
searchConfig
)
{
disallowAdditionalProperties
(
schema
)
;
let
validator
=
new
JsonSchema
.
Validator
(
schema
)
;
for
(
let
entry
of
searchConfig
)
{
delete
entry
.
schema
;
delete
entry
.
id
;
delete
entry
.
last_modified
;
let
result
=
validator
.
validate
(
entry
)
;
let
message
=
Should
validate
{
entry
.
identifier
?
?
entry
.
recordType
?
?
entry
.
webExtension
.
id
}
;
if
(
!
result
.
valid
)
{
message
+
=
:
\
n
{
JSON
.
stringify
(
result
.
errors
null
2
)
}
;
}
Assert
.
ok
(
result
.
valid
message
)
;
if
(
entry
.
recordType
=
=
"
engine
"
)
{
for
(
let
urlEntry
of
Object
.
values
(
entry
.
base
.
urls
)
)
{
Assert
.
ok
(
urlEntry
.
base
"
Should
have
a
base
url
for
every
URL
defined
on
the
top
-
level
base
object
.
"
)
;
}
}
}
}
async
function
checkSearchConfigOverrideValidates
(
schema
searchConfigOverride
)
{
let
validator
=
new
JsonSchema
.
Validator
(
schema
)
;
for
(
let
entry
of
searchConfigOverride
)
{
delete
entry
.
schema
;
delete
entry
.
id
;
delete
entry
.
last_modified
;
let
result
=
validator
.
validate
(
entry
)
;
let
message
=
Should
validate
{
entry
.
identifier
?
?
entry
.
telemetryId
}
;
if
(
!
result
.
valid
)
{
message
+
=
:
\
n
{
JSON
.
stringify
(
result
.
errors
null
2
)
}
;
}
Assert
.
ok
(
result
.
valid
message
)
;
}
}
add_task
(
async
function
test_search_config_validates_to_schema_v1
(
)
{
let
selector
=
new
SearchEngineSelectorOld
(
(
)
=
>
{
}
)
;
let
searchConfig
=
await
selector
.
getEngineConfiguration
(
)
;
await
checkSearchConfigValidates
(
searchConfigSchemaV1
searchConfig
)
;
}
)
;
add_task
(
async
function
test_ui_schema_valid_v1
(
)
{
let
uiSchema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
config
-
ui
-
schema
.
json
"
)
)
;
await
checkUISchemaValid
(
searchConfigSchemaV1
uiSchema
)
;
}
)
;
add_task
(
async
function
test_search_config_override_validates_to_schema_v1
(
)
{
let
selector
=
new
SearchEngineSelectorOld
(
(
)
=
>
{
}
)
;
let
searchConfigOverrides
=
await
selector
.
getEngineConfigurationOverrides
(
)
;
let
overrideSchema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
config
-
overrides
-
schema
.
json
"
)
)
;
await
checkSearchConfigOverrideValidates
(
overrideSchema
searchConfigOverrides
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
SearchUtils
.
newSearchConfigEnabled
}
async
function
test_search_config_validates_to_schema
(
)
{
delete
SearchUtils
.
newSearchConfigEnabled
;
SearchUtils
.
newSearchConfigEnabled
=
true
;
let
selector
=
new
SearchEngineSelector
(
(
)
=
>
{
}
)
;
let
searchConfig
=
await
selector
.
getEngineConfiguration
(
)
;
await
checkSearchConfigValidates
(
searchConfigSchema
searchConfig
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
SearchUtils
.
newSearchConfigEnabled
}
async
function
test_ui_schema_valid
(
)
{
let
uiSchema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
config
-
v2
-
ui
-
schema
.
json
"
)
)
;
await
checkUISchemaValid
(
searchConfigSchema
uiSchema
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
SearchUtils
.
newSearchConfigEnabled
}
async
function
test_search_config_override_validates_to_schema
(
)
{
let
selector
=
new
SearchEngineSelector
(
(
)
=
>
{
}
)
;
let
searchConfigOverrides
=
await
selector
.
getEngineConfigurationOverrides
(
)
;
let
overrideSchema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
config
-
overrides
-
v2
-
schema
.
json
"
)
)
;
await
checkSearchConfigOverrideValidates
(
overrideSchema
searchConfigOverrides
)
;
}
)
;
