"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
ExtensionTestUtils
:
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
sys
.
mjs
"
}
)
;
const
{
promiseShutdownManager
promiseStartupManager
}
=
AddonTestUtils
;
let
extension
;
add_setup
(
async
function
(
)
{
let
server
=
useHttpServer
(
)
;
server
.
registerContentType
(
"
sjs
"
"
sjs
"
)
;
await
SearchTestUtils
.
useTestEngines
(
"
test
-
extensions
"
)
;
await
promiseStartupManager
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
promiseShutdownManager
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_startup_with_new_addon
(
)
{
let
extensionInfo
=
{
useAddonManager
:
"
permanent
"
files
:
{
}
manifest
:
SearchTestUtils
.
createEngineManifest
(
{
name
:
"
startup
"
search_url
:
"
https
:
/
/
example
.
com
/
"
}
)
}
;
extension
=
lazy
.
ExtensionTestUtils
.
loadExtension
(
extensionInfo
)
;
await
extension
.
startup
(
)
;
let
settingsWritten
=
promiseAfterSettings
(
)
;
await
Services
.
search
.
init
(
)
;
await
AddonTestUtils
.
waitForSearchProviderStartup
(
extension
)
;
await
settingsWritten
;
let
engine
=
await
Services
.
search
.
getEngineByName
(
"
startup
"
)
;
Assert
.
ok
(
engine
"
Should
have
loaded
the
engine
"
)
;
let
submission
=
engine
.
getSubmission
(
"
foo
"
)
;
Assert
.
equal
(
submission
.
uri
.
spec
"
https
:
/
/
example
.
com
/
?
q
=
foo
"
"
Should
have
the
expected
search
url
.
"
)
;
}
)
;
add_task
(
async
function
test_startup_with_existing_addon_from_settings
(
)
{
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
let
settingsWritten
=
promiseAfterSettings
(
)
;
await
Services
.
search
.
init
(
)
;
await
settingsWritten
;
let
engine
=
await
Services
.
search
.
getEngineByName
(
"
startup
"
)
;
Assert
.
ok
(
engine
"
Should
have
loaded
the
engine
"
)
;
let
submission
=
engine
.
getSubmission
(
"
foo
"
)
;
Assert
.
equal
(
submission
.
uri
.
spec
"
https
:
/
/
example
.
com
/
?
q
=
foo
"
"
Should
have
the
expected
search
url
.
"
)
;
}
)
;
add_task
(
async
function
test_startup_with_existing_addon_with_startup_notification
(
)
{
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
await
Services
.
search
.
addEnginesFromExtension
(
extension
.
extension
)
;
let
settingsWritten
=
promiseAfterSettings
(
)
;
await
Services
.
search
.
init
(
)
;
await
settingsWritten
;
let
engine
=
await
Services
.
search
.
getEngineByName
(
"
startup
"
)
;
Assert
.
ok
(
engine
"
Should
have
loaded
the
engine
"
)
;
let
submission
=
engine
.
getSubmission
(
"
foo
"
)
;
Assert
.
equal
(
submission
.
uri
.
spec
"
https
:
/
/
example
.
com
/
?
q
=
foo
"
"
Should
have
the
expected
search
url
.
"
)
;
await
extension
.
unload
(
)
;
}
)
;
