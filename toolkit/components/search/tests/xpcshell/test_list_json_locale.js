"
use
strict
"
;
function
run_test
(
)
{
Assert
.
ok
(
!
Services
.
search
.
isInitialized
"
search
isn
'
t
initialized
yet
"
)
;
run_next_test
(
)
;
}
add_task
(
async
function
test_listJSONlocale
(
)
{
let
url
=
"
resource
:
/
/
test
/
data
/
"
;
let
resProt
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
resProt
.
setSubstitution
(
"
search
-
plugins
"
Services
.
io
.
newURI
(
url
)
)
;
Services
.
locale
.
setAvailableLocales
(
[
"
de
"
]
)
;
Services
.
locale
.
setRequestedLocales
(
[
"
de
"
]
)
;
await
asyncInit
(
)
;
Assert
.
ok
(
Services
.
search
.
isInitialized
"
search
initialized
"
)
;
let
sortedEngines
=
Services
.
search
.
getEngines
(
)
;
Assert
.
equal
(
sortedEngines
.
length
1
"
Should
have
only
one
engine
"
)
;
}
)
;
add_task
(
async
function
test_listJSONlocaleSwitch
(
)
{
let
promise
=
waitForSearchNotification
(
"
reinit
-
complete
"
)
;
Services
.
locale
.
setAvailableLocales
(
[
"
fr
"
]
)
;
Services
.
locale
.
setRequestedLocales
(
[
"
fr
"
]
)
;
await
promise
;
Assert
.
ok
(
Services
.
search
.
isInitialized
"
search
initialized
"
)
;
let
sortedEngines
=
Services
.
search
.
getEngines
(
)
;
Assert
.
equal
(
sortedEngines
.
length
2
"
Should
have
two
engines
"
)
;
}
)
;
add_task
(
async
function
test_listJSONRegionOverride
(
)
{
Services
.
prefs
.
setCharPref
(
"
browser
.
search
.
region
"
"
RU
"
)
;
await
asyncReInit
(
)
;
Assert
.
ok
(
Services
.
search
.
isInitialized
"
search
initialized
"
)
;
let
sortedEngines
=
Services
.
search
.
getEngines
(
)
;
Assert
.
equal
(
sortedEngines
.
length
2
"
Should
have
two
engines
"
)
;
Assert
.
equal
(
sortedEngines
[
0
]
.
identifier
"
engine
-
chromeicon
"
"
Engine
should
have
been
overridden
by
engine
-
chromeicon
"
)
;
}
)
;
