"
use
strict
"
;
const
kExtensionID
=
"
simple
tests
.
mozilla
.
org
"
;
add_task
(
async
function
setup
(
)
{
useHttpServer
(
"
opensearch
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
SearchTestUtils
.
useTestEngines
(
"
data1
"
)
;
await
Services
.
search
.
init
(
)
;
}
)
;
add_task
(
async
function
test_migrateLegacyEngine
(
)
{
await
Services
.
search
.
addOpenSearchEngine
(
gDataUrl
+
"
simple
.
xml
"
null
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
simple
"
)
;
engine
.
wrappedJSObject
.
_loadPath
=
jar
:
[
profile
]
/
extensions
/
{
kExtensionID
}
.
xpi
!
/
simple
.
xml
;
engine
.
wrappedJSObject
.
_extensionID
=
null
;
await
Services
.
search
.
setDefault
(
engine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
id
:
"
simple
"
name
:
"
simple
"
search_url
:
"
https
:
/
/
example
.
com
/
"
}
{
skipUnload
:
true
}
)
;
engine
=
Services
.
search
.
getEngineByName
(
"
simple
"
)
;
Assert
.
equal
(
engine
.
wrappedJSObject
.
_loadPath
"
[
addon
]
"
+
kExtensionID
)
;
Assert
.
equal
(
engine
.
wrappedJSObject
.
_extensionID
kExtensionID
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
simple
"
"
Should
have
kept
the
default
engine
the
same
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_migrateLegacyEngineDifferentName
(
)
{
await
Services
.
search
.
addOpenSearchEngine
(
gDataUrl
+
"
simple
.
xml
"
null
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
simple
"
)
;
engine
.
wrappedJSObject
.
_loadPath
=
jar
:
[
profile
]
/
extensions
/
{
kExtensionID
}
.
xpi
!
/
simple
.
xml
;
engine
.
wrappedJSObject
.
_extensionID
=
null
;
await
Services
.
search
.
setDefault
(
engine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
id
:
"
simple
"
name
:
"
simple
search
"
search_url
:
"
https
:
/
/
example
.
com
/
"
}
{
skipUnload
:
true
}
)
;
engine
=
Services
.
search
.
getEngineByName
(
"
simple
"
)
;
Assert
.
equal
(
engine
null
"
Should
have
removed
the
old
engine
"
)
;
engine
=
Services
.
search
.
getEngineByName
(
"
simple
search
"
)
;
Assert
.
equal
(
engine
.
wrappedJSObject
.
_loadPath
"
[
addon
]
"
+
kExtensionID
)
;
Assert
.
equal
(
engine
.
wrappedJSObject
.
_extensionID
kExtensionID
)
;
Assert
.
equal
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
simple
search
"
"
Should
have
made
the
new
engine
default
"
)
;
await
extension
.
unload
(
)
;
}
)
;
