"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
SearchTestUtils
.
useTestEngines
(
)
;
await
Services
.
search
.
init
(
)
;
}
)
;
add_task
(
async
function
test_purpose
(
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
"
Test
search
engine
"
)
;
function
check_submission
(
aValue
aSearchTerm
aType
aPurpose
)
{
let
submissionURL
=
engine
.
getSubmission
(
aSearchTerm
aType
aPurpose
)
.
uri
.
spec
;
let
searchParams
=
new
URLSearchParams
(
submissionURL
.
split
(
"
?
"
)
[
1
]
)
;
if
(
aValue
)
{
Assert
.
equal
(
searchParams
.
get
(
"
channel
"
)
aValue
)
;
}
else
{
Assert
.
ok
(
!
searchParams
.
has
(
"
channel
"
)
)
;
}
Assert
.
equal
(
searchParams
.
get
(
"
q
"
)
aSearchTerm
)
;
}
check_submission
(
"
"
"
foo
"
)
;
check_submission
(
"
"
"
foo
"
null
)
;
check_submission
(
"
"
"
foo
"
"
text
/
html
"
)
;
check_submission
(
"
rcs
"
"
foo
"
null
"
contextmenu
"
)
;
check_submission
(
"
rcs
"
"
foo
"
"
text
/
html
"
"
contextmenu
"
)
;
check_submission
(
"
fflb
"
"
foo
"
null
"
keyword
"
)
;
check_submission
(
"
fflb
"
"
foo
"
"
text
/
html
"
"
keyword
"
)
;
check_submission
(
"
"
"
foo
"
"
text
/
html
"
"
invalid
"
)
;
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
rel
-
searchform
-
purpose
"
)
;
check_submission
(
"
sb
"
"
foo
"
"
text
/
html
"
"
system
"
)
;
check_submission
(
"
sb
"
"
foo
"
"
text
/
html
"
"
searchbar
"
)
;
}
)
;
add_task
(
async
function
test_purpose
(
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
"
Test
search
engine
(
Reordered
)
"
)
;
function
check_submission
(
aValue
aSearchTerm
aType
aPurpose
)
{
let
submissionURL
=
engine
.
getSubmission
(
aSearchTerm
aType
aPurpose
)
.
uri
.
spec
;
let
searchParams
=
new
URLSearchParams
(
submissionURL
.
split
(
"
?
"
)
[
1
]
)
;
if
(
aValue
)
{
Assert
.
equal
(
searchParams
.
get
(
"
channel
"
)
aValue
)
;
}
else
{
Assert
.
ok
(
!
searchParams
.
has
(
"
channel
"
)
)
;
}
Assert
.
equal
(
searchParams
.
get
(
"
q
"
)
aSearchTerm
)
;
}
check_submission
(
"
"
"
foo
"
)
;
check_submission
(
"
"
"
foo
"
null
)
;
check_submission
(
"
"
"
foo
"
"
text
/
html
"
)
;
check_submission
(
"
rcs
"
"
foo
"
null
"
contextmenu
"
)
;
check_submission
(
"
rcs
"
"
foo
"
"
text
/
html
"
"
contextmenu
"
)
;
check_submission
(
"
fflb
"
"
foo
"
null
"
keyword
"
)
;
check_submission
(
"
fflb
"
"
foo
"
"
text
/
html
"
"
keyword
"
)
;
check_submission
(
"
"
"
foo
"
"
text
/
html
"
"
invalid
"
)
;
}
)
;
