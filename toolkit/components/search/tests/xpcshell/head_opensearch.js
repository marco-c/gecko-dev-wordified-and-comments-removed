XPCOMUtils
.
defineLazyModuleGetters
(
this
{
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
function
installAddonEngine
(
name
=
"
engine
-
addon
"
)
{
const
XRE_EXTENSIONS_DIR_LIST
=
"
XREExtDL
"
;
const
profD
=
do_get_profile
(
)
.
QueryInterface
(
Ci
.
nsIFile
)
;
let
dir
=
profD
.
clone
(
)
;
dir
.
append
(
"
extensions
"
)
;
if
(
!
dir
.
exists
(
)
)
{
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
dir
.
append
(
"
search
-
engine
tests
.
mozilla
.
org
"
)
;
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
do_get_file
(
"
data
/
install
.
rdf
"
)
.
copyTo
(
dir
"
install
.
rdf
"
)
;
let
addonDir
=
dir
.
clone
(
)
;
dir
.
append
(
"
searchplugins
"
)
;
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
do_get_file
(
"
data
/
"
+
name
+
"
.
xml
"
)
.
copyTo
(
dir
"
bug645970
.
xml
"
)
;
Services
.
dirsvc
.
registerProvider
(
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIDirectoryServiceProvider
Ci
.
nsIDirectoryServiceProvider2
]
)
getFile
(
prop
persistant
)
{
throw
Cr
.
NS_ERROR_FAILURE
;
}
getFiles
(
prop
)
{
if
(
prop
=
=
XRE_EXTENSIONS_DIR_LIST
)
{
return
[
addonDir
]
.
values
(
)
;
}
throw
Cr
.
NS_ERROR_FAILURE
;
}
}
)
;
}
function
installDistributionEngine
(
)
{
const
XRE_APP_DISTRIBUTION_DIR
=
"
XREAppDist
"
;
const
profD
=
do_get_profile
(
)
.
QueryInterface
(
Ci
.
nsIFile
)
;
let
dir
=
profD
.
clone
(
)
;
dir
.
append
(
"
distribution
"
)
;
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
let
distDir
=
dir
.
clone
(
)
;
dir
.
append
(
"
searchplugins
"
)
;
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
dir
.
append
(
"
common
"
)
;
dir
.
create
(
dir
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
do_get_file
(
"
data
/
engine
-
override
.
xml
"
)
.
copyTo
(
dir
"
bug645970
.
xml
"
)
;
Services
.
dirsvc
.
registerProvider
(
{
getFile
(
aProp
aPersistent
)
{
aPersistent
.
value
=
true
;
if
(
aProp
=
=
XRE_APP_DISTRIBUTION_DIR
)
{
return
distDir
.
clone
(
)
;
}
return
null
;
}
}
)
;
}
