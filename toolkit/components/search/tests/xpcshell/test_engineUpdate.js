"
use
strict
"
;
function
run_test
(
)
{
useHttpServer
(
)
;
run_next_test
(
)
;
}
add_task
(
async
function
test_engineUpdate
(
)
{
const
KEYWORD
=
"
keyword
"
;
const
FILENAME
=
"
engine
.
xml
"
;
const
TOPIC
=
"
browser
-
search
-
engine
-
modified
"
;
const
ONE_DAY_IN_MS
=
24
*
60
*
60
*
1000
;
await
asyncInit
(
)
;
let
[
engine
]
=
await
addTestEngines
(
[
{
name
:
"
Test
search
engine
"
xmlFileName
:
FILENAME
}
]
)
;
engine
.
alias
=
KEYWORD
;
Services
.
search
.
moveEngine
(
engine
0
)
;
engine
.
wrappedJSObject
.
_updateURL
=
gDataUrl
+
FILENAME
;
await
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
obs
(
subject
topic
data
)
{
if
(
data
=
=
"
engine
-
loaded
"
)
{
let
loadedEngine
=
subject
.
QueryInterface
(
Ci
.
nsISearchEngine
)
;
let
rawEngine
=
loadedEngine
.
wrappedJSObject
;
equal
(
loadedEngine
.
alias
KEYWORD
"
Keyword
not
cleared
by
update
"
)
;
equal
(
rawEngine
.
getAttr
(
"
order
"
)
1
"
Order
not
cleared
by
update
"
)
;
Services
.
obs
.
removeObserver
(
obs
TOPIC
)
;
resolve
(
)
;
}
}
TOPIC
)
;
engine
.
wrappedJSObject
.
setAttr
(
"
updateexpir
"
Date
.
now
(
)
-
(
ONE_DAY_IN_MS
*
8
)
)
;
Services
.
search
.
QueryInterface
(
Components
.
interfaces
.
nsITimerCallback
)
.
notify
(
null
)
;
}
)
;
}
)
;
