"
use
strict
"
;
const
{
NimbusFeatures
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
)
;
const
baseURL
=
"
https
:
/
/
www
.
google
.
com
/
search
?
q
=
foo
"
;
const
baseURLSearchConfigV2
=
"
https
:
/
/
www
.
google
.
com
/
search
?
"
;
let
getVariableStub
;
let
updateStub
;
add_setup
(
async
function
(
)
{
updateStub
=
sinon
.
stub
(
NimbusFeatures
.
search
"
onUpdate
"
)
;
getVariableStub
=
sinon
.
stub
(
NimbusFeatures
.
search
"
getVariable
"
)
;
sinon
.
stub
(
NimbusFeatures
.
search
"
ready
"
)
.
resolves
(
)
;
await
SearchTestUtils
.
useTestEngines
(
)
;
}
)
;
add_task
(
async
function
test_pref_initial_value
(
)
{
getVariableStub
.
withArgs
(
"
extraParams
"
)
.
returns
(
[
{
key
:
"
code
"
value
:
"
good
&
id
=
unique
"
}
]
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
Services
.
search
.
init
(
)
;
Assert
.
ok
(
updateStub
.
called
"
Should
have
called
onUpdate
to
listen
for
future
updates
"
)
;
const
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
pref
"
)
;
Assert
.
equal
(
engine
.
getSubmission
(
"
foo
"
)
.
uri
.
spec
SearchUtils
.
newSearchConfigEnabled
?
baseURLSearchConfigV2
+
"
code
=
good
%
26id
%
3Dunique
&
q
=
foo
"
:
baseURL
+
"
&
code
=
good
%
26id
%
3Dunique
"
"
Should
have
got
the
submission
URL
with
the
correct
code
"
)
;
}
)
;
add_task
(
async
function
test_pref_updated
(
)
{
getVariableStub
.
withArgs
(
"
extraParams
"
)
.
returns
(
[
{
key
:
"
code
"
value
:
"
supergood
&
id
=
unique123456
"
}
]
)
;
updateStub
.
firstCall
.
args
[
0
]
(
)
;
const
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
pref
"
)
;
Assert
.
equal
(
engine
.
getSubmission
(
"
foo
"
)
.
uri
.
spec
SearchUtils
.
newSearchConfigEnabled
?
baseURLSearchConfigV2
+
"
code
=
supergood
%
26id
%
3Dunique123456
&
q
=
foo
"
:
baseURL
+
"
&
code
=
supergood
%
26id
%
3Dunique123456
"
"
Should
have
got
the
submission
URL
with
the
updated
code
"
)
;
}
)
;
add_task
(
async
function
test_multiple_params
(
)
{
getVariableStub
.
withArgs
(
"
extraParams
"
)
.
returns
(
[
{
key
:
"
code
"
value
:
"
sng
"
}
{
key
:
"
test
"
value
:
"
sup
"
}
]
)
;
updateStub
.
firstCall
.
args
[
0
]
(
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
pref
"
)
;
Assert
.
equal
(
engine
.
getSubmission
(
"
foo
"
)
.
uri
.
spec
SearchUtils
.
newSearchConfigEnabled
?
baseURLSearchConfigV2
+
"
code
=
sng
&
test
=
sup
&
q
=
foo
"
:
baseURL
+
"
&
code
=
sng
&
test
=
sup
"
"
Should
have
got
the
submission
URL
with
both
parameters
"
)
;
getVariableStub
.
withArgs
(
"
extraParams
"
)
.
returns
(
[
{
key
:
"
code
"
value
:
"
sng
"
}
]
)
;
updateStub
.
firstCall
.
args
[
0
]
(
)
;
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
pref
"
)
;
Assert
.
equal
(
engine
.
getSubmission
(
"
foo
"
)
.
uri
.
spec
SearchUtils
.
newSearchConfigEnabled
?
baseURLSearchConfigV2
+
"
code
=
sng
&
q
=
foo
"
:
baseURL
+
"
&
code
=
sng
"
"
Should
have
got
the
submission
URL
with
one
parameter
"
)
;
}
)
;
add_task
(
async
function
test_pref_cleared
(
)
{
getVariableStub
.
withArgs
(
"
extraParams
"
)
.
returns
(
[
]
)
;
updateStub
.
firstCall
.
args
[
0
]
(
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
pref
"
)
;
Assert
.
equal
(
engine
.
getSubmission
(
"
foo
"
)
.
uri
.
spec
baseURL
"
Should
have
just
the
base
URL
after
the
pref
was
cleared
"
)
;
}
)
;
