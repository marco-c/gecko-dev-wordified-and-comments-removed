const
kDefaultEngineName
=
"
engine1
"
;
const
kOtherAppProvidedEngineId
=
"
engine2
"
;
add_setup
(
async
function
(
)
{
useHttpServer
(
)
;
SearchTestUtils
.
setRemoteSettingsConfig
(
[
{
identifier
:
kDefaultEngineName
}
{
identifier
:
kOtherAppProvidedEngineId
}
]
)
;
Assert
.
ok
(
!
Services
.
search
.
isInitialized
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
removeEngineInfobar
.
enabled
"
false
)
;
}
)
;
add_task
(
async
function
test_defaultEngine
(
)
{
await
Services
.
search
.
init
(
)
;
await
SearchTestUtils
.
installOpenSearchEngine
(
{
url
:
{
gDataUrl
}
engine
.
xml
}
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
}
)
;
add_task
(
async
function
test_persistAcrossRestarts
(
)
{
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
kTestEngineName
)
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kTestEngineName
)
;
await
promiseAfterSettings
(
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
Assert
.
equal
(
metadata
.
defaultEngineIdHash
.
length
44
)
;
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
await
Services
.
search
.
init
(
true
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kTestEngineName
)
;
Services
.
search
.
resetToAppDefaultEngine
(
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
}
)
;
add_task
(
async
function
test_ignoreInvalidHash
(
)
{
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
kTestEngineName
)
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kTestEngineName
)
;
await
promiseAfterSettings
(
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
metadata
.
defaultEngineIdHash
=
"
invalid
"
;
await
promiseSaveGlobalMetadata
(
metadata
)
;
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
await
Services
.
search
.
init
(
true
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
}
)
;
add_task
(
async
function
test_settingToDefault
(
)
{
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
kTestEngineName
)
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kTestEngineName
)
;
await
promiseAfterSettings
(
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
let
currentEngine
=
Services
.
search
.
getEngineByName
(
kTestEngineName
)
;
Assert
.
equal
(
metadata
.
defaultEngineId
currentEngine
.
id
)
;
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
kDefaultEngineName
)
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
promiseAfterSettings
(
)
;
metadata
=
await
promiseGlobalMetadata
(
)
;
Assert
.
equal
(
metadata
.
defaultEngineId
"
"
)
;
}
)
;
add_task
(
async
function
test_resetToOriginalDefaultEngine
(
)
{
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
kTestEngineName
)
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kTestEngineName
)
;
await
promiseAfterSettings
(
)
;
Services
.
search
.
resetToAppDefaultEngine
(
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
await
promiseAfterSettings
(
)
;
}
)
;
add_task
(
async
function
test_fallback_kept_after_restart
(
)
{
let
otherAppProvidedEngine
=
Services
.
search
.
getEngineById
(
kOtherAppProvidedEngineId
)
;
await
Services
.
search
.
setDefault
(
otherAppProvidedEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
otherAppProvidedEngine
.
name
)
;
await
promiseAfterSettings
(
)
;
await
Services
.
search
.
removeEngine
(
otherAppProvidedEngine
)
;
Assert
.
ok
(
otherAppProvidedEngine
.
hidden
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
Services
.
search
.
restoreDefaultEngines
(
)
;
Assert
.
ok
(
!
otherAppProvidedEngine
.
hidden
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
await
promiseAfterSettings
(
)
;
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
await
Services
.
search
.
init
(
true
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
kDefaultEngineName
)
;
}
)
;
