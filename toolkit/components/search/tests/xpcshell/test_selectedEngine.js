Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
kSelectedEnginePref
=
"
browser
.
search
.
selectedEngine
"
;
add_task
(
async
function
test_defaultEngine
(
)
{
await
asyncInit
(
)
;
await
installTestEngine
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
getDefaultEngineName
(
)
)
;
}
)
;
add_task
(
async
function
test_selectedEngine
(
)
{
let
defaultEngineName
=
getDefaultEngineName
(
)
;
Services
.
prefs
.
setCharPref
(
kSelectedEnginePref
kTestEngineName
)
;
await
asyncReInit
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
defaultEngineName
)
;
Services
.
prefs
.
clearUserPref
(
kSelectedEnginePref
)
;
Services
.
prefs
.
setCharPref
(
kDefaultenginenamePref
kTestEngineName
)
;
await
asyncReInit
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
defaultEngineName
)
;
Services
.
prefs
.
clearUserPref
(
kDefaultenginenamePref
)
;
}
)
;
add_task
(
async
function
test_persistAcrossRestarts
(
)
{
Services
.
search
.
currentEngine
=
Services
.
search
.
getEngineByName
(
kTestEngineName
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
kTestEngineName
)
;
await
promiseAfterCache
(
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
do_check_eq
(
metadata
.
hash
.
length
44
)
;
await
asyncReInit
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
kTestEngineName
)
;
Services
.
search
.
resetToOriginalDefaultEngine
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
getDefaultEngineName
(
)
)
;
}
)
;
add_task
(
async
function
test_ignoreInvalidHash
(
)
{
Services
.
search
.
currentEngine
=
Services
.
search
.
getEngineByName
(
kTestEngineName
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
kTestEngineName
)
;
await
promiseAfterCache
(
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
metadata
.
hash
=
"
invalid
"
;
await
promiseSaveGlobalMetadata
(
metadata
)
;
await
asyncReInit
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
getDefaultEngineName
(
)
)
;
}
)
;
add_task
(
async
function
test_settingToDefault
(
)
{
Services
.
search
.
currentEngine
=
Services
.
search
.
getEngineByName
(
kTestEngineName
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
kTestEngineName
)
;
await
promiseAfterCache
(
)
;
let
metadata
=
await
promiseGlobalMetadata
(
)
;
do_check_eq
(
metadata
.
current
kTestEngineName
)
;
Services
.
search
.
currentEngine
=
Services
.
search
.
getEngineByName
(
getDefaultEngineName
(
)
)
;
await
promiseAfterCache
(
)
;
metadata
=
await
promiseGlobalMetadata
(
)
;
do_check_eq
(
metadata
.
current
"
"
)
;
}
)
;
add_task
(
async
function
test_resetToOriginalDefaultEngine
(
)
{
let
defaultName
=
getDefaultEngineName
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
defaultName
)
;
Services
.
search
.
currentEngine
=
Services
.
search
.
getEngineByName
(
kTestEngineName
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
kTestEngineName
)
;
await
promiseAfterCache
(
)
;
Services
.
search
.
resetToOriginalDefaultEngine
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
defaultName
)
;
await
promiseAfterCache
(
)
;
}
)
;
add_task
(
async
function
test_fallback_kept_after_restart
(
)
{
let
builtInEngines
=
Services
.
search
.
getDefaultEngines
(
)
;
let
defaultName
=
getDefaultEngineName
(
)
;
let
nonDefaultBuiltInEngine
;
for
(
let
engine
of
builtInEngines
)
{
if
(
engine
.
name
!
=
defaultName
)
{
nonDefaultBuiltInEngine
=
engine
;
break
;
}
}
Services
.
search
.
currentEngine
=
nonDefaultBuiltInEngine
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
nonDefaultBuiltInEngine
.
name
)
;
await
promiseAfterCache
(
)
;
Services
.
search
.
removeEngine
(
nonDefaultBuiltInEngine
)
;
do_check_true
(
nonDefaultBuiltInEngine
.
hidden
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
defaultName
)
;
Services
.
search
.
restoreDefaultEngines
(
)
;
do_check_false
(
nonDefaultBuiltInEngine
.
hidden
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
defaultName
)
;
await
promiseAfterCache
(
)
;
await
asyncReInit
(
)
;
do_check_eq
(
Services
.
search
.
currentEngine
.
name
defaultName
)
;
}
)
;
function
run_test
(
)
{
removeMetadata
(
)
;
removeCacheFile
(
)
;
do_check_false
(
Services
.
search
.
isInitialized
)
;
let
engineDummyFile
=
gProfD
.
clone
(
)
;
engineDummyFile
.
append
(
"
searchplugins
"
)
;
engineDummyFile
.
append
(
"
test
-
search
-
engine
.
xml
"
)
;
let
engineDir
=
engineDummyFile
.
parent
;
engineDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
do_get_file
(
"
data
/
engine
.
xml
"
)
.
copyTo
(
engineDir
"
engine
.
xml
"
)
;
do_register_cleanup
(
function
(
)
{
removeMetadata
(
)
;
removeCacheFile
(
)
;
}
)
;
run_next_test
(
)
;
}
