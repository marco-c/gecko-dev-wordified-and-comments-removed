function
getEngineClone
(
engine
)
{
return
JSON
.
parse
(
JSON
.
stringify
(
engine
)
)
;
}
function
checkEngineState
(
exists
engine
)
{
Assert
.
equal
(
exists
Services
.
search
.
hasEngineWithURL
(
engine
.
method
engine
.
formURL
engine
.
queryParams
)
)
;
}
async
function
addEngineWithParams
(
engine
)
{
await
Services
.
search
.
addEngineWithDetails
(
engine
.
name
null
null
null
engine
.
method
engine
.
formURL
)
;
let
addedEngine
=
Services
.
search
.
getEngineByName
(
engine
.
name
)
;
for
(
let
param
of
engine
.
queryParams
)
{
addedEngine
.
addParam
(
param
.
name
param
.
value
null
)
;
}
}
add_task
(
async
function
test_hasEngineWithURL
(
)
{
info
(
"
Setting
up
test
"
)
;
useHttpServer
(
)
;
info
(
"
Test
starting
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
Services
.
search
.
init
(
)
;
let
UNSORTED_ENGINE
=
{
name
:
"
mySearch
Engine
"
method
:
"
GET
"
formURL
:
"
https
:
/
/
totallyNotRealSearchEngine
.
com
/
"
queryParams
:
[
{
name
:
"
DDs
"
value
:
"
38s
"
}
{
name
:
"
DCs
"
value
:
"
39s
"
}
{
name
:
"
DDs
"
value
:
"
39s
"
}
{
name
:
"
DDs
"
value
:
"
38s
"
}
{
name
:
"
DDs
"
value
:
"
37s
"
}
{
name
:
"
DDs
"
value
:
"
38s
"
}
{
name
:
"
DEs
"
value
:
"
38s
"
}
{
name
:
"
DCs
"
value
:
"
38s
"
}
{
name
:
"
DEs
"
value
:
"
37s
"
}
]
}
;
let
SORTED_ENGINE
=
{
name
:
"
mySearch
Engine
"
method
:
"
GET
"
formURL
:
"
https
:
/
/
totallyNotRealSearchEngine
.
com
/
"
queryParams
:
[
{
name
:
"
DCs
"
value
:
"
38s
"
}
{
name
:
"
DCs
"
value
:
"
39s
"
}
{
name
:
"
DDs
"
value
:
"
37s
"
}
{
name
:
"
DDs
"
value
:
"
38s
"
}
{
name
:
"
DDs
"
value
:
"
38s
"
}
{
name
:
"
DDs
"
value
:
"
38s
"
}
{
name
:
"
DDs
"
value
:
"
39s
"
}
{
name
:
"
DEs
"
value
:
"
37s
"
}
{
name
:
"
DEs
"
value
:
"
38s
"
}
]
}
;
let
SORTED_ENGINE_METHOD_CHANGE
=
getEngineClone
(
SORTED_ENGINE
)
;
SORTED_ENGINE_METHOD_CHANGE
.
method
=
"
PoST
"
;
let
SORTED_ENGINE_FORMURL_CHANGE
=
getEngineClone
(
SORTED_ENGINE
)
;
SORTED_ENGINE_FORMURL_CHANGE
.
formURL
=
"
http
:
/
/
www
.
ahighrpowr
.
com
/
"
;
let
SORTED_ENGINE_QUERYPARM_CHANGE
=
getEngineClone
(
SORTED_ENGINE
)
;
SORTED_ENGINE_QUERYPARM_CHANGE
.
queryParams
=
[
]
;
let
SORTED_ENGINE_NAME_CHANGE
=
getEngineClone
(
SORTED_ENGINE
)
;
SORTED_ENGINE_NAME_CHANGE
.
name
+
=
"
2
"
;
checkEngineState
(
false
UNSORTED_ENGINE
)
;
info
(
"
The
unsorted
version
of
the
test
engine
does
not
exist
.
"
)
;
checkEngineState
(
false
SORTED_ENGINE
)
;
info
(
"
The
sorted
version
of
the
test
engine
does
not
exist
.
"
)
;
checkEngineState
(
false
SORTED_ENGINE_METHOD_CHANGE
)
;
checkEngineState
(
false
SORTED_ENGINE_FORMURL_CHANGE
)
;
checkEngineState
(
false
SORTED_ENGINE_QUERYPARM_CHANGE
)
;
info
(
"
There
are
no
modified
versions
of
the
sorted
test
engine
.
"
)
;
checkEngineState
(
false
SORTED_ENGINE_NAME_CHANGE
)
;
info
(
"
There
is
no
NAME
modified
version
of
the
sorted
test
engine
.
"
)
;
await
addEngineWithParams
(
UNSORTED_ENGINE
)
;
info
(
"
The
unsorted
engine
has
been
added
.
"
)
;
checkEngineState
(
true
UNSORTED_ENGINE
)
;
info
(
"
The
unsorted
version
of
the
test
engine
now
exists
.
"
)
;
checkEngineState
(
true
SORTED_ENGINE
)
;
info
(
"
The
sorted
version
of
the
same
test
engine
also
now
exists
.
"
)
;
checkEngineState
(
false
SORTED_ENGINE_METHOD_CHANGE
)
;
checkEngineState
(
false
SORTED_ENGINE_FORMURL_CHANGE
)
;
checkEngineState
(
false
SORTED_ENGINE_QUERYPARM_CHANGE
)
;
info
(
"
There
are
still
no
modified
versions
of
the
sorted
test
engine
.
"
)
;
checkEngineState
(
true
SORTED_ENGINE_NAME_CHANGE
)
;
info
(
"
There
IS
now
a
NAME
modified
version
of
the
sorted
test
engine
.
"
)
;
}
)
;
