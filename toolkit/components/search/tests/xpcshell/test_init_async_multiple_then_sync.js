function
run_test
(
)
{
info
(
"
Setting
up
test
"
)
;
do_test_pending
(
)
;
info
(
"
Test
starting
"
)
;
let
numberOfInitializers
=
4
;
let
pending
=
[
]
;
let
numberPending
=
numberOfInitializers
;
for
(
let
i
=
0
;
i
<
numberOfInitializers
;
+
+
i
)
{
let
me
=
i
;
pending
[
me
]
=
true
;
Services
.
search
.
init
(
function
search_initialized
(
aStatus
)
{
Assert
.
ok
(
Components
.
isSuccessCode
(
aStatus
)
)
;
init_complete
(
me
)
;
}
)
;
}
let
init_complete
=
function
init_complete
(
i
)
{
info
(
"
init
complete
"
+
i
)
;
Assert
.
ok
(
pending
[
i
]
)
;
pending
[
i
]
=
false
;
numberPending
-
-
;
Assert
.
ok
(
numberPending
>
=
0
)
;
Assert
.
ok
(
Services
.
search
.
isInitialized
)
;
if
(
numberPending
!
=
0
)
{
info
(
"
Still
waiting
for
the
following
initializations
:
"
+
JSON
.
stringify
(
pending
)
)
;
return
;
}
info
(
"
All
initializations
have
completed
"
)
;
let
engines
=
Services
.
search
.
getEngines
(
)
;
Assert
.
notEqual
(
engines
null
)
;
info
(
"
Waiting
a
second
before
quitting
"
)
;
do_timeout
(
1000
function
(
)
{
info
(
"
Test
is
complete
"
)
;
do_test_finished
(
)
;
}
)
;
}
;
let
engines
=
Services
.
search
.
getEngines
(
)
;
Assert
.
notEqual
(
engines
null
)
;
info
(
"
Synchronous
part
of
the
test
complete
"
)
;
}
