"
use
strict
"
;
function
run_test
(
)
{
removeMetadata
(
)
;
updateAppInfo
(
)
;
let
url
=
"
resource
:
/
/
test
/
data
/
"
;
let
resProt
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
resProt
.
setSubstitution
(
"
search
-
plugins
"
Services
.
io
.
newURI
(
url
null
null
)
)
;
run_next_test
(
)
;
}
add_task
(
function
*
test_purpose
(
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
"
Test
search
engine
"
)
;
function
check_submission
(
aExpected
aSearchTerm
aType
aPurpose
)
{
do_check_eq
(
engine
.
getSubmission
(
aSearchTerm
aType
aPurpose
)
.
uri
.
spec
base
+
aExpected
)
;
}
let
base
=
"
http
:
/
/
www
.
google
.
com
/
search
?
q
=
foo
&
ie
=
utf
-
8
&
oe
=
utf
-
8
&
aq
=
t
"
;
check_submission
(
"
"
"
foo
"
)
;
check_submission
(
"
"
"
foo
"
null
)
;
check_submission
(
"
"
"
foo
"
"
text
/
html
"
)
;
check_submission
(
"
&
channel
=
rcs
"
"
foo
"
null
"
contextmenu
"
)
;
check_submission
(
"
&
channel
=
rcs
"
"
foo
"
"
text
/
html
"
"
contextmenu
"
)
;
check_submission
(
"
&
channel
=
fflb
"
"
foo
"
null
"
keyword
"
)
;
check_submission
(
"
&
channel
=
fflb
"
"
foo
"
"
text
/
html
"
"
keyword
"
)
;
check_submission
(
"
"
"
foo
"
"
text
/
html
"
"
invalid
"
)
;
base
=
"
http
:
/
/
www
.
google
.
com
/
search
?
q
=
foo
"
;
check_submission
(
"
&
channel
=
none
"
"
foo
"
"
application
/
x
-
moz
-
default
-
purpose
"
)
;
check_submission
(
"
&
channel
=
none
"
"
foo
"
"
application
/
x
-
moz
-
default
-
purpose
"
null
)
;
check_submission
(
"
&
channel
=
none
"
"
foo
"
"
application
/
x
-
moz
-
default
-
purpose
"
"
"
)
;
check_submission
(
"
&
channel
=
rcs
"
"
foo
"
"
application
/
x
-
moz
-
default
-
purpose
"
"
contextmenu
"
)
;
check_submission
(
"
&
channel
=
fflb
"
"
foo
"
"
application
/
x
-
moz
-
default
-
purpose
"
"
keyword
"
)
;
check_submission
(
"
"
"
foo
"
"
application
/
x
-
moz
-
default
-
purpose
"
"
invalid
"
)
;
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
rel
-
searchform
-
purpose
"
)
;
base
=
"
http
:
/
/
www
.
google
.
com
/
search
?
q
=
"
;
check_submission
(
"
&
channel
=
sb
"
"
"
null
"
searchbar
"
)
;
check_submission
(
"
&
channel
=
sb
"
"
"
"
text
/
html
"
"
searchbar
"
)
;
base
=
"
http
:
/
/
www
.
google
.
com
/
search
?
q
=
foo
"
;
check_submission
(
"
&
channel
=
sb
"
"
foo
"
"
text
/
html
"
"
system
"
)
;
check_submission
(
"
&
channel
=
sb
"
"
foo
"
"
text
/
html
"
"
searchbar
"
)
;
engine
=
Services
.
search
.
getEngineByName
(
"
engine
-
system
-
purpose
"
)
;
check_submission
(
"
&
channel
=
sys
"
"
foo
"
"
text
/
html
"
"
system
"
)
;
do_test_finished
(
)
;
}
)
;
