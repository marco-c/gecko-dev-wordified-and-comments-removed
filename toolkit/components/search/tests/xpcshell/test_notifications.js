"
use
strict
"
;
var
gTestLog
=
[
]
;
var
expectedLog
=
[
"
engine
-
changed
"
"
engine
-
added
"
"
engine
-
default
"
"
engine
-
current
"
"
engine
-
loaded
"
"
engine
-
removed
"
]
;
function
search_observer
(
subject
topic
data
)
{
let
engine
=
subject
.
QueryInterface
(
Ci
.
nsISearchEngine
)
;
gTestLog
.
push
(
data
+
"
for
"
+
engine
.
name
)
;
do_print
(
"
Observer
:
"
+
data
+
"
for
"
+
engine
.
name
)
;
switch
(
data
)
{
case
"
engine
-
added
"
:
let
retrievedEngine
=
Services
.
search
.
getEngineByName
(
"
Test
search
engine
"
)
;
Assert
.
equal
(
engine
retrievedEngine
)
;
Services
.
search
.
defaultEngine
=
engine
;
Services
.
search
.
currentEngine
=
engine
;
do_execute_soon
(
function
(
)
{
Services
.
search
.
removeEngine
(
engine
)
;
}
)
;
break
;
case
"
engine
-
removed
"
:
let
engineNameOutput
=
"
for
Test
search
engine
"
;
expectedLog
=
expectedLog
.
map
(
logLine
=
>
logLine
+
engineNameOutput
)
;
do_print
(
"
expectedLog
:
\
n
"
+
expectedLog
.
join
(
"
\
n
"
)
)
;
do_print
(
"
gTestLog
:
\
n
"
+
gTestLog
.
join
(
"
\
n
"
)
)
;
for
(
let
i
=
0
;
i
<
expectedLog
.
length
;
i
+
+
)
{
Assert
.
equal
(
gTestLog
[
i
]
expectedLog
[
i
]
)
;
}
Assert
.
equal
(
gTestLog
.
length
expectedLog
.
length
)
;
do_test_finished
(
)
;
break
;
}
}
function
run_test
(
)
{
useHttpServer
(
)
;
do_register_cleanup
(
function
cleanup
(
)
{
Services
.
obs
.
removeObserver
(
search_observer
"
browser
-
search
-
engine
-
modified
"
)
;
}
)
;
do_test_pending
(
)
;
Services
.
obs
.
addObserver
(
search_observer
"
browser
-
search
-
engine
-
modified
"
)
;
Services
.
search
.
addEngine
(
gDataUrl
+
"
engine
.
xml
"
null
null
false
)
;
}
