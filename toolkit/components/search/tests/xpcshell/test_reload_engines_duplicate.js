"
use
strict
"
;
const
CONFIG
=
[
{
identifier
:
"
appDefault
"
base
:
{
name
:
"
Application
Default
"
}
}
{
identifier
:
"
notInFR
"
base
:
{
name
:
"
Not
In
FR
"
}
variants
:
[
{
environment
:
{
regions
:
[
"
FR
"
]
}
}
]
}
]
;
add_setup
(
async
(
)
=
>
{
let
server
=
useHttpServer
(
)
;
server
.
registerContentType
(
"
sjs
"
"
sjs
"
)
;
Region
.
_setHomeRegion
(
"
US
"
false
)
;
SearchTestUtils
.
setRemoteSettingsConfig
(
CONFIG
)
;
await
Services
.
search
.
init
(
)
;
}
)
;
add_task
(
async
function
test_reload_engines_with_duplicate
(
)
{
let
engines
=
await
Services
.
search
.
getEngines
(
)
;
Assert
.
deepEqual
(
engines
.
map
(
e
=
>
e
.
identifier
)
[
"
appDefault
"
]
"
Should
have
the
expected
default
engines
"
)
;
let
engine
=
await
SearchTestUtils
.
installOpenSearchEngine
(
{
url
:
{
gHttpURL
}
/
sjs
/
engineMaker
.
sjs
?
{
JSON
.
stringify
(
{
baseURL
:
{
gHttpURL
}
/
data
/
name
:
"
Not
In
FR
"
method
:
"
GET
"
}
)
}
}
)
;
engine
.
alias
=
"
testEngine
"
;
let
engineId
=
engine
.
id
;
Region
.
_setHomeRegion
(
"
FR
"
false
)
;
await
Services
.
search
.
wrappedJSObject
.
_maybeReloadEngines
(
)
;
Assert
.
ok
(
!
(
await
Services
.
search
.
getEngineById
(
engineId
)
)
"
Should
not
have
added
the
duplicate
engine
"
)
;
engines
=
await
Services
.
search
.
getEngines
(
)
;
Assert
.
deepEqual
(
engines
.
map
(
e
=
>
e
.
identifier
)
[
"
appDefault
"
"
notInFR
"
]
"
Should
have
the
expected
default
engines
"
)
;
let
enginePref
=
await
Services
.
search
.
getEngineByName
(
"
Not
In
FR
"
)
;
Assert
.
equal
(
enginePref
.
alias
"
"
"
Should
not
have
copied
the
alias
from
the
duplicate
engine
"
)
;
}
)
;
