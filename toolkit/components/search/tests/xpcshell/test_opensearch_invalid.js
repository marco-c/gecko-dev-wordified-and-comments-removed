const
mockPrompter
=
{
promptCount
:
0
alert
(
)
{
this
.
promptCount
+
+
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPrompt
"
]
)
}
;
add_task
(
async
function
setup
(
)
{
useHttpServer
(
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
Services
.
search
.
init
(
)
;
let
windowWatcher
=
{
getNewPrompter
:
(
)
=
>
mockPrompter
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWindowWatcher
"
]
)
}
;
let
origWindowWatcher
=
Services
.
ww
;
Services
.
ww
=
windowWatcher
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
ww
=
origWindowWatcher
;
}
)
;
}
)
;
add_task
(
async
function
test_invalid_engine_from_dir
(
)
{
console
.
log
(
gDataUrl
+
"
data
/
invalid
-
engine
.
xml
"
)
;
await
Assert
.
rejects
(
Services
.
search
.
addOpenSearchEngine
(
gDataUrl
+
"
data
/
invalid
-
engine
.
xml
"
null
)
error
=
>
{
Assert
.
ok
(
error
.
result
=
=
Ci
.
nsISearchService
.
ERROR_UNKNOWN_FAILURE
)
;
return
true
;
}
"
Should
fail
to
install
an
invalid
engine
.
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
mockPrompter
.
promptCount
=
=
1
"
Should
have
prompted
the
user
"
)
;
}
)
;
