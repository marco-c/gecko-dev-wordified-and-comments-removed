"
use
strict
"
;
const
{
EnterprisePolicyTesting
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
EnterprisePolicyTesting
.
sys
.
mjs
"
)
;
const
enterprisePolicy
=
{
policies
:
{
SearchEngines
:
{
Add
:
[
{
Name
:
"
Policy
"
Encoding
:
"
windows
-
1252
"
URLTemplate
:
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
}
]
}
}
}
;
async
function
loadSettingsFile
(
settingsFile
)
{
let
settingsTemplate
=
await
readJSONFile
(
do_get_file
(
settingsFile
)
)
;
Assert
.
less
(
settingsTemplate
.
version
7
"
Should
be
a
version
older
than
when
indexing
engines
by
id
was
introduced
"
)
;
for
(
let
engine
of
settingsTemplate
.
engines
)
{
Assert
.
ok
(
!
(
"
id
"
in
engine
)
)
;
}
await
promiseSaveSettingsData
(
settingsTemplate
)
;
}
add_setup
(
async
function
(
)
{
let
policies
=
Cc
[
"
mozilla
.
org
/
enterprisepolicies
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
policies
.
observe
(
null
"
policies
-
startup
"
null
)
;
await
SearchTestUtils
.
useTestEngines
(
"
data1
"
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
enterprisePolicy
)
;
await
Services
.
search
.
init
(
)
;
}
)
;
async
function
assertInstalledEngineMatches
(
expectedData
)
{
let
engine
=
await
Services
.
search
.
getEngineByName
(
expectedData
.
name
)
;
Assert
.
ok
(
engine
Should
have
found
the
{
expectedData
.
type
}
engine
)
;
if
(
expectedData
.
idLength
)
{
Assert
.
equal
(
engine
.
id
.
length
expectedData
.
idLength
"
Should
have
been
given
an
id
"
)
;
}
else
{
Assert
.
equal
(
engine
.
id
expectedData
.
id
"
Should
have
the
expected
id
"
)
;
}
Assert
.
equal
(
engine
.
alias
expectedData
.
alias
"
Should
have
kept
the
alias
"
)
;
}
add_task
(
async
function
test_migration_from_pre_ids
(
)
{
await
loadSettingsFile
(
"
data
/
search
-
legacy
-
no
-
ids
.
json
"
)
;
const
settingsFileWritten
=
promiseAfterSettings
(
)
;
await
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
await
Services
.
search
.
init
(
)
;
await
settingsFileWritten
;
await
assertInstalledEngineMatches
(
{
type
:
"
OpenSearch
"
name
:
"
Bugzilla
Mozilla
"
idLength
:
36
alias
:
"
bugzillaAlias
"
}
)
;
await
assertInstalledEngineMatches
(
{
type
:
"
Enterprise
Policy
"
name
:
"
Policy
"
id
:
"
policy
-
Policy
"
alias
:
"
PolicyAlias
"
}
)
;
await
assertInstalledEngineMatches
(
{
type
:
"
User
"
name
:
"
User
"
idLength
:
36
alias
:
"
UserAlias
"
}
)
;
}
)
;
