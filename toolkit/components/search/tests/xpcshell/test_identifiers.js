"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
SearchTestUtils
.
useTestEngines
(
"
simple
-
engines
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
const
result
=
await
Services
.
search
.
init
(
)
;
Assert
.
ok
(
Components
.
isSuccessCode
(
result
)
"
Should
have
initialized
the
service
"
)
;
useHttpServer
(
)
;
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
url
:
{
gDataUrl
}
engine
.
xml
}
)
;
}
)
;
function
checkIdentifier
(
engineName
expectedIdentifier
expectedTelemetryId
)
{
const
engine
=
Services
.
search
.
getEngineByName
(
engineName
)
;
Assert
.
ok
(
engine
instanceof
Ci
.
nsISearchEngine
"
Should
be
derived
from
nsISearchEngine
"
)
;
Assert
.
equal
(
engine
.
identifier
expectedIdentifier
"
Should
have
the
correct
identifier
"
)
;
Assert
.
equal
(
engine
.
telemetryId
expectedTelemetryId
"
Should
have
the
correct
telemetry
Id
"
)
;
}
add_task
(
async
function
test_from_profile
(
)
{
checkIdentifier
(
kTestEngineName
null
other
-
{
kTestEngineName
}
)
;
}
)
;
add_task
(
async
function
test_from_telemetry_id
(
)
{
checkIdentifier
(
"
basic
"
"
telemetry
"
"
telemetry
"
)
;
}
)
;
add_task
(
async
function
test_from_webextension_id
(
)
{
checkIdentifier
(
"
Simple
Engine
"
"
simple
"
"
simple
"
)
;
}
)
;
