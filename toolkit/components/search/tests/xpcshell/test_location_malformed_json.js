function
promiseTimezoneMessage
(
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIConsoleListener
]
)
observe
(
msg
)
{
if
(
msg
.
message
.
startsWith
(
"
getIsUS
(
)
fell
back
to
a
timezone
check
with
the
result
=
"
)
)
{
Services
.
console
.
unregisterListener
(
listener
)
;
resolve
(
msg
)
;
}
}
}
;
Services
.
console
.
registerListener
(
listener
)
;
}
)
;
}
add_task
(
async
function
setup
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
geoSpecificDefaults
"
true
)
;
}
)
;
add_task
(
async
function
test_location_malformed_json
(
)
{
Services
.
prefs
.
setCharPref
(
"
geo
.
provider
-
country
.
network
.
url
"
'
data
:
application
/
json
{
"
country_code
"
'
)
;
await
Services
.
search
.
init
(
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
search
.
region
"
)
"
should
be
no
region
pref
"
)
;
await
Services
.
search
.
getEngines
(
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
search
.
region
"
)
"
should
be
no
region
pref
"
)
;
checkCountryResultTelemetry
(
TELEMETRY_RESULT_ENUM
.
SUCCESS_WITHOUT_DATA
)
;
}
)
;
