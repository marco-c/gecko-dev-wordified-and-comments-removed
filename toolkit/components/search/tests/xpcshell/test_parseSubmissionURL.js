"
use
strict
"
;
add_task
(
async
function
setup
(
)
{
useHttpServer
(
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
}
)
;
add_task
(
async
function
test_parseSubmissionURL
(
)
{
let
engine1
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
gDataUrl
}
engine
.
xml
)
;
let
engine2
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
gDataUrl
}
engine
-
fr
.
xml
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
bacon_addParam
"
keyword
:
"
bacon_addParam
"
encoding
:
"
windows
-
1252
"
search_url
:
"
https
:
/
/
www
.
bacon
.
test
/
find
"
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
idn_addParam
"
keyword
:
"
idn_addParam
"
search_url
:
"
https
:
/
/
www
.
xn
-
-
bcher
-
kva
.
ch
/
search
"
}
)
;
let
engine3
=
Services
.
search
.
getEngineByName
(
"
bacon_addParam
"
)
;
let
engine4
=
Services
.
search
.
getEngineByName
(
"
idn_addParam
"
)
;
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
gDataUrl
}
engine2
.
xml
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
bacon
"
keyword
:
"
bacon
"
search_url
:
"
https
:
/
/
www
.
bacon
.
moz
/
search
?
q
=
"
search_url_get_params
:
"
"
}
)
;
await
Services
.
search
.
setDefault
(
engine1
)
;
for
(
let
engine
of
await
Services
.
search
.
getAppProvidedEngines
(
)
)
{
await
Services
.
search
.
removeEngine
(
engine
)
;
}
let
url
=
"
https
:
/
/
www
.
google
.
com
/
search
?
foo
=
bar
&
q
=
caff
%
C3
%
A8
"
;
let
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
.
wrappedJSObject
engine1
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
C3
%
A8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
C3
%
A8
"
.
length
)
;
url
=
"
https
:
/
/
www
.
google
.
fr
/
search
?
q
=
caff
%
E8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
.
wrappedJSObject
engine2
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
E8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
E8
"
.
length
)
;
url
=
"
https
:
/
/
www
.
google
.
co
.
uk
/
search
?
q
=
caff
%
C3
%
A8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
.
wrappedJSObject
engine1
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
C3
%
A8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
C3
%
A8
"
.
length
)
;
url
=
"
https
:
/
/
www
.
bacon
.
test
/
find
?
q
=
caff
%
E8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine3
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
E8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
E8
"
.
length
)
;
url
=
"
https
:
/
/
www
.
google
.
com
/
search
?
q
=
foo
+
b
\
u00E4r
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
.
wrappedJSObject
engine1
)
;
Assert
.
equal
(
result
.
terms
"
foo
b
\
u00E4r
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
foo
+
b
\
u00E4r
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
foo
+
b
\
u00E4r
"
.
length
)
;
url
=
"
https
:
/
/
www
.
b
\
u00FCcher
.
ch
/
search
?
q
=
foo
+
bar
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine4
)
;
Assert
.
equal
(
result
.
terms
"
foo
bar
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
foo
+
bar
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
foo
+
bar
"
.
length
)
;
url
=
"
https
:
/
/
www
.
xn
-
-
bcher
-
kva
.
ch
/
search
?
q
=
foo
+
bar
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine4
)
;
Assert
.
equal
(
result
.
terms
"
foo
bar
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
foo
+
bar
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
foo
+
bar
"
.
length
)
;
Assert
.
equal
(
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
www
.
bacon
.
moz
/
search
?
q
=
"
)
.
engine
null
)
;
Assert
.
equal
(
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
duckduckgo
.
com
?
q
=
test
"
)
.
engine
null
)
;
Assert
.
equal
(
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
duckduckgo
.
com
/
?
q
=
test
"
)
.
engine
null
)
;
url
=
"
https
:
/
/
www
.
google
.
com
/
search
?
q
=
caff
%
C3
%
A8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
.
wrappedJSObject
engine1
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
C3
%
A8
"
)
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
www
.
google
.
com
/
search
?
q
=
+
with
+
+
spaces
+
"
)
;
Assert
.
equal
(
result
.
engine
.
wrappedJSObject
engine1
)
;
Assert
.
equal
(
result
.
terms
"
with
spaces
"
)
;
url
=
"
https
:
/
/
www
.
google
.
com
/
search
?
q
=
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
.
wrappedJSObject
engine1
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
url
.
length
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
www
.
google
.
com
/
search
/
?
q
=
test
"
)
;
Assert
.
equal
(
result
.
engine
null
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
-
1
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
www
.
google
.
com
/
search
?
q2
=
test
"
)
;
Assert
.
equal
(
result
.
engine
null
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
-
1
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
file
:
/
/
localhost
/
search
?
q
=
test
"
)
;
Assert
.
equal
(
result
.
engine
null
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
-
1
)
;
}
)
;
