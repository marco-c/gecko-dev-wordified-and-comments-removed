"
use
strict
"
;
function
run_test
(
)
{
useHttpServer
(
)
;
run_next_test
(
)
;
}
add_task
(
async
function
test_parseSubmissionURL
(
)
{
for
(
let
engine
of
Services
.
search
.
getEngines
(
)
)
{
Services
.
search
.
removeEngine
(
engine
)
;
}
let
[
engine1
engine2
engine3
engine4
]
=
await
addTestEngines
(
[
{
name
:
"
Test
search
engine
"
xmlFileName
:
"
engine
.
xml
"
}
{
name
:
"
Test
search
engine
(
fr
)
"
xmlFileName
:
"
engine
-
fr
.
xml
"
}
{
name
:
"
bacon_addParam
"
details
:
[
"
"
"
bacon_addParam
"
"
Search
Bacon
"
"
GET
"
"
http
:
/
/
www
.
bacon
.
test
/
find
"
]
}
{
name
:
"
idn_addParam
"
details
:
[
"
"
"
idn_addParam
"
"
Search
IDN
"
"
GET
"
"
http
:
/
/
www
.
xn
-
-
bcher
-
kva
.
ch
/
search
"
]
}
{
name
:
"
A
second
test
engine
"
xmlFileName
:
"
engine2
.
xml
"
}
{
name
:
"
bacon
"
details
:
[
"
"
"
bacon
"
"
Search
Bacon
"
"
GET
"
"
http
:
/
/
www
.
bacon
.
moz
/
search
?
q
=
{
searchTerms
}
"
]
}
]
)
;
engine3
.
addParam
(
"
q
"
"
{
searchTerms
}
"
null
)
;
engine4
.
addParam
(
"
q
"
"
{
searchTerms
}
"
null
)
;
let
url
=
"
http
:
/
/
www
.
google
.
com
/
search
?
foo
=
bar
&
q
=
caff
%
C3
%
A8
"
;
let
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine1
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
C3
%
A8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
C3
%
A8
"
.
length
)
;
url
=
"
http
:
/
/
www
.
google
.
fr
/
search
?
q
=
caff
%
E8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine2
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
E8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
E8
"
.
length
)
;
url
=
"
http
:
/
/
www
.
google
.
co
.
uk
/
search
?
q
=
caff
%
C3
%
A8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine1
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
C3
%
A8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
C3
%
A8
"
.
length
)
;
url
=
"
http
:
/
/
www
.
bacon
.
test
/
find
?
q
=
caff
%
E8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine3
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
E8
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
caff
%
E8
"
.
length
)
;
url
=
"
http
:
/
/
www
.
google
.
com
/
search
?
q
=
foo
+
b
\
u00E4r
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine1
)
;
Assert
.
equal
(
result
.
terms
"
foo
b
\
u00E4r
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
foo
+
b
\
u00E4r
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
foo
+
b
\
u00E4r
"
.
length
)
;
url
=
"
http
:
/
/
www
.
b
\
u00FCcher
.
ch
/
search
?
q
=
foo
+
bar
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine4
)
;
Assert
.
equal
(
result
.
terms
"
foo
bar
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
foo
+
bar
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
foo
+
bar
"
.
length
)
;
url
=
"
http
:
/
/
www
.
xn
-
-
bcher
-
kva
.
ch
/
search
?
q
=
foo
+
bar
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine4
)
;
Assert
.
equal
(
result
.
terms
"
foo
bar
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
foo
+
bar
"
)
)
;
Assert
.
equal
(
result
.
termsLength
"
foo
+
bar
"
.
length
)
;
Assert
.
equal
(
Services
.
search
.
parseSubmissionURL
(
"
http
:
/
/
www
.
bacon
.
moz
/
search
?
q
=
"
)
.
engine
null
)
;
Assert
.
equal
(
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
duckduckgo
.
com
?
q
=
test
"
)
.
engine
null
)
;
Assert
.
equal
(
Services
.
search
.
parseSubmissionURL
(
"
https
:
/
/
duckduckgo
.
com
/
?
q
=
test
"
)
.
engine
null
)
;
url
=
"
https
:
/
/
www
.
google
.
com
/
search
?
q
=
caff
%
C3
%
A8
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine1
)
;
Assert
.
equal
(
result
.
terms
"
caff
\
u00E8
"
)
;
Assert
.
ok
(
url
.
slice
(
result
.
termsOffset
)
.
startsWith
(
"
caff
%
C3
%
A8
"
)
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
http
:
/
/
www
.
google
.
com
/
search
?
q
=
+
with
+
+
spaces
+
"
)
;
Assert
.
equal
(
result
.
engine
engine1
)
;
Assert
.
equal
(
result
.
terms
"
with
spaces
"
)
;
url
=
"
http
:
/
/
www
.
google
.
com
/
search
?
q
=
"
;
result
=
Services
.
search
.
parseSubmissionURL
(
url
)
;
Assert
.
equal
(
result
.
engine
engine1
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
url
.
length
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
http
:
/
/
www
.
google
.
com
/
search
/
?
q
=
test
"
)
;
Assert
.
equal
(
result
.
engine
null
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
-
1
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
http
:
/
/
www
.
google
.
com
/
search
?
q2
=
test
"
)
;
Assert
.
equal
(
result
.
engine
null
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
-
1
)
;
result
=
Services
.
search
.
parseSubmissionURL
(
"
file
:
/
/
localhost
/
search
?
q
=
test
"
)
;
Assert
.
equal
(
result
.
engine
null
)
;
Assert
.
equal
(
result
.
terms
"
"
)
;
Assert
.
equal
(
result
.
termsOffset
-
1
)
;
}
)
;
