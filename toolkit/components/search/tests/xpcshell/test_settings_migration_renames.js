"
use
strict
"
;
const
TEST_CONFIG_V2
=
[
{
recordType
:
"
engine
"
identifier
:
"
example
"
base
:
{
name
:
"
example
"
urls
:
{
search
:
{
base
:
"
https
:
/
/
example
.
com
"
params
:
[
]
searchTermParamName
:
"
search
"
}
}
}
variants
:
[
{
environment
:
{
allRegionsAndLocales
:
true
}
}
]
}
{
recordType
:
"
defaultEngines
"
globalDefault
:
"
example
"
specificDefaults
:
[
]
}
{
recordType
:
"
engineOrders
"
orders
:
[
]
}
]
;
const
ENGINE_NAME_TO_NEW_NAME_MAP
=
new
Map
(
[
[
"
wikipedia
-
hy
"
"
(
hy
)
"
]
[
"
wikipedia
-
kn
"
"
(
kn
)
"
]
[
"
wikipedia
-
lv
"
"
Vikip
dija
(
lv
)
"
]
[
"
wikipedia
-
NO
"
"
Wikipedia
(
nb
)
"
]
[
"
wikipedia
-
el
"
"
(
el
)
"
]
[
"
wikipedia
-
lt
"
"
Vikipedija
(
lt
)
"
]
[
"
wikipedia
-
my
"
"
(
my
)
"
]
[
"
wikipedia
-
pa
"
"
(
pa
)
"
]
[
"
wikipedia
-
pt
"
"
Wikip
dia
(
pt
)
"
]
[
"
wikipedia
-
si
"
"
(
si
)
"
]
[
"
wikipedia
-
tr
"
"
Vikipedi
(
tr
)
"
]
]
)
;
for
(
let
[
identifier
name
]
of
ENGINE_NAME_TO_NEW_NAME_MAP
.
entries
(
)
)
{
TEST_CONFIG_V2
.
push
(
{
recordType
:
"
engine
"
identifier
base
:
{
aliases
:
[
"
config
"
]
name
urls
:
{
search
:
{
base
:
"
https
:
/
/
example
.
com
"
params
:
[
]
searchTermParamName
:
"
search
"
}
}
}
variants
:
[
{
environment
:
{
allRegionsAndLocales
:
true
}
}
]
}
)
;
}
async
function
loadSettingsFile
(
settingsFile
)
{
let
settingsTemplate
=
await
readJSONFile
(
do_get_file
(
settingsFile
)
)
;
Assert
.
less
(
settingsTemplate
.
version
7
"
Should
be
a
version
older
than
when
indexing
engines
by
id
was
introduced
"
)
;
for
(
let
engine
of
settingsTemplate
.
engines
)
{
Assert
.
ok
(
!
(
"
id
"
in
engine
)
)
;
}
await
promiseSaveSettingsData
(
settingsTemplate
)
;
}
add_setup
(
async
function
(
)
{
await
SearchTestUtils
.
useTestEngines
(
"
data1
"
null
TEST_CONFIG_V2
)
;
await
loadSettingsFile
(
"
data
/
search
-
migration
-
renames
.
json
"
)
;
}
)
;
add_task
(
async
function
test_migration_after_renames
(
)
{
await
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
await
Services
.
search
.
init
(
)
;
for
(
let
[
identifier
name
]
of
ENGINE_NAME_TO_NEW_NAME_MAP
.
entries
(
)
)
{
let
engine
=
await
Services
.
search
.
getEngineById
(
identifier
)
;
Assert
.
ok
(
engine
Should
have
loaded
an
engine
for
{
identifier
}
)
;
Assert
.
deepEqual
(
engine
.
aliases
[
identifier
"
config
"
]
Should
have
retained
the
correct
alias
for
{
identifier
}
)
;
Assert
.
equal
(
engine
.
name
name
Should
have
the
new
engine
name
for
{
identifier
}
)
;
}
}
)
;
