"
use
strict
"
;
const
IDS
=
new
Set
(
)
;
function
uniqueId
(
id
)
{
while
(
IDS
.
has
(
id
)
)
{
id
+
=
"
_
"
;
}
IDS
.
add
(
id
)
;
return
id
;
}
function
*
generateSubvariants
(
subVariants
)
{
if
(
!
subVariants
)
{
yield
undefined
;
return
;
}
for
(
let
subVariant
of
subVariants
)
{
yield
[
{
.
.
.
subVariant
optional
:
undefined
environment
:
{
allRegionsAndLocales
:
true
}
}
]
;
}
}
function
*
generateVariants
(
variants
)
{
for
(
let
variant
of
variants
)
{
for
(
let
subVariants
of
generateSubvariants
(
variant
.
subVariants
)
)
{
yield
[
{
.
.
.
variant
optional
:
undefined
environment
:
{
allRegionsAndLocales
:
true
}
subVariants
}
]
;
}
}
}
function
*
generateEngineVariants
(
engine
)
{
for
(
let
variants
of
generateVariants
(
engine
.
variants
)
)
{
let
id
=
uniqueId
(
engine
.
identifier
)
;
yield
{
.
.
.
engine
base
:
{
.
.
.
engine
.
base
name
:
id
}
identifier
:
id
variants
}
;
}
}
add_task
(
async
function
test_validate_all_engines_and_variants
(
)
{
let
settings
=
RemoteSettings
(
SearchUtils
.
SETTINGS_KEY
)
;
let
config
=
await
settings
.
get
(
)
;
config
=
config
.
flatMap
(
obj
=
>
{
if
(
obj
.
recordType
=
=
"
engine
"
)
{
return
[
.
.
.
generateEngineVariants
(
obj
)
]
;
}
return
obj
;
}
)
;
sinon
.
stub
(
settings
"
get
"
)
.
returns
(
config
)
;
await
Services
.
search
.
init
(
)
;
for
(
let
id
of
IDS
)
{
Assert
.
ok
(
!
!
Services
.
search
.
getEngineById
(
id
)
Engine
with
id
'
{
id
}
'
was
found
.
)
;
}
}
)
;
