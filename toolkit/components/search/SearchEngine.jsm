const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
gEnvironment
:
[
"
mozilla
.
org
/
process
/
environment
;
1
"
"
nsIEnvironment
"
]
gChromeReg
:
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
"
nsIChromeRegistry
"
]
}
)
;
const
BinaryInputStream
=
Components
.
Constructor
(
"
mozilla
.
org
/
binaryinputstream
;
1
"
"
nsIBinaryInputStream
"
"
setInputStream
"
)
;
const
SEARCH_BUNDLE
=
"
chrome
:
/
/
global
/
locale
/
search
/
search
.
properties
"
;
const
BRAND_BUNDLE
=
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
;
const
OPENSEARCH_NS_10
=
"
http
:
/
/
a9
.
com
/
-
/
spec
/
opensearch
/
1
.
0
/
"
;
const
OPENSEARCH_NS_11
=
"
http
:
/
/
a9
.
com
/
-
/
spec
/
opensearch
/
1
.
1
/
"
;
const
OPENSEARCH_NAMESPACES
=
[
OPENSEARCH_NS_11
OPENSEARCH_NS_10
"
http
:
/
/
a9
.
com
/
-
/
spec
/
opensearchdescription
/
1
.
1
/
"
"
http
:
/
/
a9
.
com
/
-
/
spec
/
opensearchdescription
/
1
.
0
/
"
]
;
const
OPENSEARCH_LOCALNAME
=
"
OpenSearchDescription
"
;
const
MOZSEARCH_NS_10
=
"
http
:
/
/
www
.
mozilla
.
org
/
2006
/
browser
/
search
/
"
;
const
MOZSEARCH_LOCALNAME
=
"
SearchPlugin
"
;
const
USER_DEFINED
=
"
searchTerms
"
;
const
MOZ_PARAM_LOCALE
=
"
moz
:
locale
"
;
const
MOZ_PARAM_DIST_ID
=
"
moz
:
distributionID
"
;
const
MOZ_PARAM_OFFICIAL
=
"
moz
:
official
"
;
const
OS_PARAM_INPUT_ENCODING
=
"
inputEncoding
"
;
const
OS_PARAM_LANGUAGE
=
"
language
"
;
const
OS_PARAM_OUTPUT_ENCODING
=
"
outputEncoding
"
;
const
OS_PARAM_LANGUAGE_DEF
=
"
*
"
;
const
OS_PARAM_OUTPUT_ENCODING_DEF
=
"
UTF
-
8
"
;
const
OS_PARAM_INPUT_ENCODING_DEF
=
"
UTF
-
8
"
;
const
OS_PARAM_COUNT
=
"
count
"
;
const
OS_PARAM_START_INDEX
=
"
startIndex
"
;
const
OS_PARAM_START_PAGE
=
"
startPage
"
;
const
OS_PARAM_COUNT_DEF
=
"
20
"
;
const
OS_PARAM_START_INDEX_DEF
=
"
1
"
;
const
OS_PARAM_START_PAGE_DEF
=
"
1
"
;
var
OS_UNSUPPORTED_PARAMS
=
[
[
OS_PARAM_COUNT
OS_PARAM_COUNT_DEF
]
[
OS_PARAM_START_INDEX
OS_PARAM_START_INDEX_DEF
]
[
OS_PARAM_START_PAGE
OS_PARAM_START_PAGE_DEF
]
]
;
function
limitURILength
(
str
len
)
{
len
=
len
|
|
140
;
if
(
str
.
length
>
len
)
return
str
.
slice
(
0
len
)
+
"
.
.
.
"
;
return
str
;
}
function
ENSURE_WARN
(
assertion
message
resultCode
)
{
if
(
!
assertion
)
throw
Components
.
Exception
(
message
resultCode
)
;
}
function
loadListener
(
channel
engine
callback
)
{
this
.
_channel
=
channel
;
this
.
_bytes
=
[
]
;
this
.
_engine
=
engine
;
this
.
_callback
=
callback
;
}
loadListener
.
prototype
=
{
_callback
:
null
_channel
:
null
_countRead
:
0
_engine
:
null
_stream
:
null
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIRequestObserver
Ci
.
nsIStreamListener
Ci
.
nsIChannelEventSink
Ci
.
nsIInterfaceRequestor
Ci
.
nsIProgressEventSink
]
)
onStartRequest
(
request
)
{
SearchUtils
.
log
(
"
loadListener
:
Starting
request
:
"
+
request
.
name
)
;
this
.
_stream
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIBinaryInputStream
)
;
}
onStopRequest
(
request
statusCode
)
{
SearchUtils
.
log
(
"
loadListener
:
Stopping
request
:
"
+
request
.
name
)
;
var
requestFailed
=
!
Components
.
isSuccessCode
(
statusCode
)
;
if
(
!
requestFailed
&
&
(
request
instanceof
Ci
.
nsIHttpChannel
)
)
requestFailed
=
!
request
.
requestSucceeded
;
if
(
requestFailed
|
|
this
.
_countRead
=
=
0
)
{
SearchUtils
.
log
(
"
loadListener
:
request
failed
!
"
)
;
this
.
_bytes
=
null
;
}
this
.
_callback
(
this
.
_bytes
this
.
_engine
)
;
this
.
_channel
=
null
;
this
.
_engine
=
null
;
}
onDataAvailable
(
request
inputStream
offset
count
)
{
this
.
_stream
.
setInputStream
(
inputStream
)
;
this
.
_bytes
=
this
.
_bytes
.
concat
(
this
.
_stream
.
readByteArray
(
count
)
)
;
this
.
_countRead
+
=
count
;
}
asyncOnChannelRedirect
(
oldChannel
newChannel
flags
callback
)
{
this
.
_channel
=
newChannel
;
callback
.
onRedirectVerifyCallback
(
Cr
.
NS_OK
)
;
}
getInterface
(
iid
)
{
return
this
.
QueryInterface
(
iid
)
;
}
onProgress
(
request
context
progress
progressMax
)
{
}
onStatus
(
request
context
status
statusArg
)
{
}
}
;
function
rescaleIcon
(
byteArray
contentType
size
=
32
)
{
if
(
contentType
=
=
"
image
/
svg
+
xml
"
)
throw
new
Error
(
"
Cannot
rescale
SVG
image
"
)
;
let
imgTools
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
;
let
arrayBuffer
=
(
new
Int8Array
(
byteArray
)
)
.
buffer
;
let
container
=
imgTools
.
decodeImageFromArrayBuffer
(
arrayBuffer
contentType
)
;
let
stream
=
imgTools
.
encodeScaledImage
(
container
"
image
/
png
"
size
size
)
;
let
streamSize
=
stream
.
available
(
)
;
if
(
streamSize
>
SearchUtils
.
MAX_ICON_SIZE
)
throw
new
Error
(
"
Icon
is
too
big
"
)
;
let
bis
=
new
BinaryInputStream
(
stream
)
;
return
[
bis
.
readByteArray
(
streamSize
)
"
image
/
png
"
]
;
}
function
getVerificationHash
(
name
)
{
let
disclaimer
=
"
By
modifying
this
file
I
agree
that
I
am
doing
so
"
+
"
only
within
appName
itself
using
official
user
-
driven
search
"
+
"
engine
selection
processes
and
in
a
way
which
does
not
circumvent
"
+
"
user
consent
.
I
acknowledge
that
any
attempt
to
change
this
file
"
+
"
from
outside
of
appName
is
a
malicious
act
and
will
be
responded
"
+
"
to
accordingly
.
"
;
let
salt
=
OS
.
Path
.
basename
(
OS
.
Constants
.
Path
.
profileDir
)
+
name
+
disclaimer
.
replace
(
/
\
appName
/
g
Services
.
appinfo
.
name
)
;
let
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
let
data
=
converter
.
convertToByteArray
(
salt
{
}
)
;
let
hasher
=
Cc
[
"
mozilla
.
org
/
security
/
hash
;
1
"
]
.
createInstance
(
Ci
.
nsICryptoHash
)
;
hasher
.
init
(
hasher
.
SHA256
)
;
hasher
.
update
(
data
data
.
length
)
;
return
hasher
.
finish
(
true
)
;
}
function
getDir
(
key
iface
)
{
if
(
!
key
)
SearchUtils
.
fail
(
"
getDir
requires
a
directory
key
!
"
)
;
return
Services
.
dirsvc
.
get
(
key
iface
|
|
Ci
.
nsIFile
)
;
}
function
sanitizeName
(
name
)
{
const
maxLength
=
60
;
const
minLength
=
1
;
var
result
=
name
.
toLowerCase
(
)
;
result
=
result
.
replace
(
/
\
s
+
/
g
"
-
"
)
;
result
=
result
.
replace
(
/
[
^
-
a
-
z0
-
9
]
/
g
"
"
)
;
if
(
result
.
length
<
minLength
)
result
=
Math
.
random
(
)
.
toString
(
36
)
.
replace
(
/
^
.
*
\
.
/
"
"
)
;
return
result
.
substring
(
0
maxLength
)
;
}
function
getMozParamPref
(
prefName
)
{
let
branch
=
Services
.
prefs
.
getDefaultBranch
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
param
.
"
)
;
let
prefValue
=
branch
.
getCharPref
(
prefName
null
)
;
return
prefValue
?
encodeURIComponent
(
prefValue
)
:
null
;
}
function
QueryParameter
(
name
value
purpose
)
{
if
(
!
name
|
|
(
value
=
=
null
)
)
SearchUtils
.
fail
(
"
missing
name
or
value
for
QueryParameter
!
"
)
;
this
.
name
=
name
;
this
.
value
=
value
;
this
.
purpose
=
purpose
;
}
function
ParamSubstitution
(
paramValue
searchTerms
engine
)
{
const
PARAM_REGEXP
=
/
\
{
(
(
?
:
\
w
+
:
)
?
\
w
+
)
(
\
?
?
)
\
}
/
g
;
return
paramValue
.
replace
(
PARAM_REGEXP
function
(
match
name
optional
)
{
if
(
name
=
=
USER_DEFINED
)
return
searchTerms
;
if
(
name
=
=
OS_PARAM_INPUT_ENCODING
)
return
engine
.
queryCharset
;
if
(
name
.
startsWith
(
"
moz
:
"
)
&
&
engine
.
_isDefault
)
{
if
(
name
=
=
MOZ_PARAM_LOCALE
)
return
Services
.
locale
.
requestedLocale
;
if
(
name
=
=
MOZ_PARAM_DIST_ID
)
{
return
Services
.
prefs
.
getCharPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
distributionID
"
Services
.
appinfo
.
distributionID
|
|
"
"
)
;
}
if
(
name
=
=
MOZ_PARAM_OFFICIAL
)
{
if
(
Services
.
prefs
.
getBoolPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
official
"
AppConstants
.
MOZ_OFFICIAL_BRANDING
)
)
return
"
official
"
;
return
"
unofficial
"
;
}
}
if
(
name
=
=
OS_PARAM_LANGUAGE
)
return
Services
.
locale
.
requestedLocale
|
|
OS_PARAM_LANGUAGE_DEF
;
if
(
name
=
=
OS_PARAM_OUTPUT_ENCODING
)
return
OS_PARAM_OUTPUT_ENCODING_DEF
;
if
(
optional
)
return
"
"
;
for
(
let
param
of
OS_UNSUPPORTED_PARAMS
)
{
if
(
name
=
=
param
[
0
]
)
return
param
[
1
]
;
}
return
match
;
}
)
;
}
const
ENGINE_ALIASES
=
new
Map
(
[
[
"
google
"
[
"
google
"
]
]
[
"
amazondotcom
"
[
"
amazon
"
]
]
[
"
amazon
"
[
"
amazon
"
]
]
[
"
twitter
"
[
"
twitter
"
]
]
[
"
wikipedia
"
[
"
wikipedia
"
]
]
[
"
ebay
"
[
"
ebay
"
]
]
[
"
bing
"
[
"
bing
"
]
]
[
"
ddg
"
[
"
duckduckgo
"
"
ddg
"
]
]
[
"
yandex
"
[
"
\
u044F
\
u043D
\
u0434
\
u0435
\
u043A
\
u0441
"
"
yandex
"
]
]
[
"
baidu
"
[
"
\
u767E
\
u5EA6
"
"
baidu
"
]
]
]
)
;
function
getInternalAliases
(
engine
)
{
if
(
!
engine
.
_isDefault
)
{
return
[
]
;
}
for
(
let
[
name
aliases
]
of
ENGINE_ALIASES
)
{
if
(
engine
.
_shortName
=
=
name
)
{
return
aliases
;
}
}
return
[
]
;
}
function
EngineURL
(
mimeType
requestMethod
template
resultDomain
)
{
if
(
!
mimeType
|
|
!
requestMethod
|
|
!
template
)
SearchUtils
.
fail
(
"
missing
mimeType
method
or
template
for
EngineURL
!
"
)
;
var
method
=
requestMethod
.
toUpperCase
(
)
;
var
type
=
mimeType
.
toLowerCase
(
)
;
if
(
method
!
=
"
GET
"
&
&
method
!
=
"
POST
"
)
SearchUtils
.
fail
(
"
method
passed
to
EngineURL
must
be
\
"
GET
\
"
or
\
"
POST
\
"
"
)
;
this
.
type
=
type
;
this
.
method
=
method
;
this
.
params
=
[
]
;
this
.
rels
=
[
]
;
this
.
mozparams
=
{
}
;
var
templateURI
=
SearchUtils
.
makeURI
(
template
)
;
if
(
!
templateURI
)
SearchUtils
.
fail
(
"
new
EngineURL
:
template
is
not
a
valid
URI
!
"
Cr
.
NS_ERROR_FAILURE
)
;
switch
(
templateURI
.
scheme
)
{
case
"
http
"
:
case
"
https
"
:
this
.
template
=
template
;
break
;
default
:
SearchUtils
.
fail
(
"
new
EngineURL
:
template
uses
invalid
scheme
!
"
Cr
.
NS_ERROR_FAILURE
)
;
}
this
.
templateHost
=
templateURI
.
host
;
this
.
resultDomain
=
resultDomain
|
|
this
.
templateHost
;
}
EngineURL
.
prototype
=
{
addParam
(
name
value
purpose
)
{
this
.
params
.
push
(
new
QueryParameter
(
name
value
purpose
)
)
;
}
_addMozParam
(
obj
)
{
obj
.
mozparam
=
true
;
this
.
mozparams
[
obj
.
name
]
=
obj
;
}
getSubmission
(
searchTerms
engine
purpose
)
{
var
url
=
ParamSubstitution
(
this
.
template
searchTerms
engine
)
;
var
requestPurpose
=
purpose
|
|
"
searchbar
"
;
if
(
!
this
.
params
.
some
(
p
=
>
p
.
purpose
!
=
=
undefined
&
&
p
.
purpose
=
=
requestPurpose
)
)
requestPurpose
=
"
searchbar
"
;
let
dataArray
=
[
]
;
for
(
var
i
=
0
;
i
<
this
.
params
.
length
;
+
+
i
)
{
var
param
=
this
.
params
[
i
]
;
if
(
param
.
purpose
!
=
=
undefined
&
&
param
.
purpose
!
=
requestPurpose
)
continue
;
var
value
=
ParamSubstitution
(
param
.
value
searchTerms
engine
)
;
dataArray
.
push
(
param
.
name
+
"
=
"
+
value
)
;
}
let
dataString
=
dataArray
.
join
(
"
&
"
)
;
var
postData
=
null
;
if
(
this
.
method
=
=
"
GET
"
)
{
if
(
dataString
)
{
if
(
url
.
includes
(
"
?
"
)
)
{
url
=
{
url
}
&
{
dataString
}
;
}
else
{
url
=
{
url
}
?
{
dataString
}
;
}
}
}
else
if
(
this
.
method
=
=
"
POST
"
)
{
var
stringStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
stringStream
.
data
=
dataString
;
postData
=
Cc
[
"
mozilla
.
org
/
network
/
mime
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIMIMEInputStream
)
;
postData
.
addHeader
(
"
Content
-
Type
"
"
application
/
x
-
www
-
form
-
urlencoded
"
)
;
postData
.
setData
(
stringStream
)
;
}
return
new
Submission
(
Services
.
io
.
newURI
(
url
)
postData
)
;
}
_getTermsParameterName
(
)
{
let
queryParam
=
this
.
params
.
find
(
p
=
>
p
.
value
=
=
"
{
"
+
USER_DEFINED
+
"
}
"
)
;
return
queryParam
?
queryParam
.
name
:
"
"
;
}
_hasRelation
(
rel
)
{
return
this
.
rels
.
some
(
e
=
>
e
=
=
rel
.
toLowerCase
(
)
)
;
}
_initWithJSON
(
json
)
{
if
(
!
json
.
params
)
return
;
this
.
rels
=
json
.
rels
;
for
(
let
i
=
0
;
i
<
json
.
params
.
length
;
+
+
i
)
{
let
param
=
json
.
params
[
i
]
;
if
(
param
.
mozparam
)
{
if
(
param
.
condition
=
=
"
pref
"
)
{
let
value
=
getMozParamPref
(
param
.
pref
)
;
if
(
value
)
{
this
.
addParam
(
param
.
name
value
)
;
}
}
this
.
_addMozParam
(
param
)
;
}
else
{
this
.
addParam
(
param
.
name
param
.
value
param
.
purpose
|
|
undefined
)
;
}
}
}
toJSON
(
)
{
var
json
=
{
template
:
this
.
template
rels
:
this
.
rels
resultDomain
:
this
.
resultDomain
}
;
if
(
this
.
type
!
=
SearchUtils
.
URL_TYPE
.
SEARCH
)
json
.
type
=
this
.
type
;
if
(
this
.
method
!
=
"
GET
"
)
json
.
method
=
this
.
method
;
function
collapseMozParams
(
param
)
{
return
this
.
mozparams
[
param
.
name
]
|
|
param
;
}
json
.
params
=
this
.
params
.
map
(
collapseMozParams
this
)
;
return
json
;
}
}
;
function
SearchEngine
(
options
=
{
}
)
{
if
(
!
(
"
readOnly
"
in
options
)
)
{
throw
new
Error
(
"
readOnly
missing
from
options
.
"
)
;
}
this
.
_readOnly
=
options
.
readOnly
;
this
.
_urls
=
[
]
;
this
.
_metaData
=
{
}
;
let
file
uri
;
if
(
"
name
"
in
options
)
{
if
(
"
sanitizeName
"
in
options
&
&
options
.
sanitizeName
)
{
this
.
_shortName
=
sanitizeName
(
options
.
name
)
;
}
else
{
this
.
_shortName
=
options
.
name
;
}
}
else
if
(
"
fileURI
"
in
options
&
&
options
.
fileURI
instanceof
Ci
.
nsIFile
)
{
file
=
options
.
fileURI
;
}
else
if
(
"
uri
"
in
options
)
{
let
optionsURI
=
options
.
uri
;
if
(
typeof
optionsURI
=
=
"
string
"
)
{
optionsURI
=
SearchUtils
.
makeURI
(
optionsURI
)
;
}
if
(
!
optionsURI
|
|
!
(
optionsURI
instanceof
Ci
.
nsIURI
)
)
{
throw
new
Components
.
Exception
(
"
options
.
uri
isn
'
t
a
string
nor
an
nsIURI
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
switch
(
optionsURI
.
scheme
)
{
case
"
https
"
:
case
"
http
"
:
case
"
ftp
"
:
case
"
data
"
:
case
"
file
"
:
case
"
resource
"
:
case
"
chrome
"
:
uri
=
optionsURI
;
break
;
default
:
throw
Components
.
Exception
(
"
Invalid
URI
passed
to
SearchEngine
constructor
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
}
else
{
throw
Components
.
Exception
(
"
Invalid
name
/
fileURI
/
uri
options
passed
to
SearchEngine
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
if
(
!
this
.
_shortName
)
{
let
shortName
;
if
(
file
)
{
shortName
=
file
.
leafName
;
}
else
if
(
uri
&
&
uri
instanceof
Ci
.
nsIURL
)
{
if
(
this
.
_readOnly
|
|
(
gEnvironment
.
get
(
"
XPCSHELL_TEST_PROFILE_DIR
"
)
&
&
uri
.
scheme
=
=
"
resource
"
)
)
{
shortName
=
uri
.
fileName
;
}
}
if
(
shortName
&
&
shortName
.
endsWith
(
"
.
xml
"
)
)
{
this
.
_shortName
=
shortName
.
slice
(
0
-
4
)
;
}
this
.
_loadPath
=
this
.
getAnonymizedLoadPath
(
file
uri
)
;
if
(
!
shortName
&
&
!
this
.
_readOnly
)
{
return
;
}
if
(
this
.
_isDefault
|
|
(
uri
&
&
uri
.
spec
.
startsWith
(
SearchUtils
.
APP_SEARCH_PREFIX
)
)
)
{
this
.
_id
=
"
[
app
]
/
"
+
this
.
_shortName
+
"
.
xml
"
;
}
else
if
(
!
this
.
_readOnly
)
{
this
.
_id
=
"
[
profile
]
/
"
+
this
.
_shortName
+
"
.
xml
"
;
}
else
{
SearchUtils
.
log
(
"
Setting
_id
to
full
path
for
engine
from
"
+
this
.
_loadPath
)
;
this
.
_id
=
file
?
file
.
path
:
uri
.
spec
;
}
}
}
SearchEngine
.
prototype
=
{
_metaData
:
null
_data
:
null
_readOnly
:
true
_loadPath
:
null
_description
:
"
"
_engineToUpdate
:
null
_hasPreferredIcon
:
null
_name
:
null
_queryCharset
:
null
__searchForm
:
null
get
_searchForm
(
)
{
return
this
.
__searchForm
;
}
set
_searchForm
(
value
)
{
if
(
/
^
https
?
:
/
i
.
test
(
value
)
)
this
.
__searchForm
=
value
;
else
SearchUtils
.
log
(
"
_searchForm
:
Invalid
URL
dropped
for
"
+
this
.
_name
|
|
"
the
current
engine
"
)
;
}
_confirm
:
false
_useNow
:
false
_installCallback
:
null
_updateInterval
:
null
_updateURL
:
null
_iconUpdateURL
:
null
_extensionID
:
null
_isBuiltin
:
false
async
_initFromFile
(
file
)
{
if
(
!
file
|
|
!
(
await
OS
.
File
.
exists
(
file
.
path
)
)
)
SearchUtils
.
fail
(
"
File
must
exist
before
calling
initFromFile
!
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
let
fileURI
=
Services
.
io
.
newFileURI
(
file
)
;
await
this
.
_retrieveSearchXMLData
(
fileURI
.
spec
)
;
this
.
_initFromData
(
)
;
}
_initFromURIAndLoad
(
uri
)
{
let
loadURI
=
uri
instanceof
Ci
.
nsIURI
?
uri
:
SearchUtils
.
makeURI
(
uri
)
;
ENSURE_WARN
(
loadURI
"
Must
have
URI
when
calling
_initFromURIAndLoad
!
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
SearchUtils
.
log
(
"
_initFromURIAndLoad
:
Downloading
engine
from
:
\
"
"
+
loadURI
.
spec
+
"
\
"
.
"
)
;
var
chan
=
SearchUtils
.
makeChannel
(
loadURI
)
;
if
(
this
.
_engineToUpdate
&
&
(
chan
instanceof
Ci
.
nsIHttpChannel
)
)
{
var
lastModified
=
this
.
_engineToUpdate
.
getAttr
(
"
updatelastmodified
"
)
;
if
(
lastModified
)
chan
.
setRequestHeader
(
"
If
-
Modified
-
Since
"
lastModified
false
)
;
}
this
.
_uri
=
loadURI
;
var
listener
=
new
loadListener
(
chan
this
this
.
_onLoad
)
;
chan
.
notificationCallbacks
=
listener
;
chan
.
asyncOpen
(
listener
)
;
}
async
_initFromURI
(
uri
)
{
SearchUtils
.
log
(
"
_initFromURI
:
Loading
engine
from
:
\
"
"
+
uri
.
spec
+
"
\
"
.
"
)
;
await
this
.
_retrieveSearchXMLData
(
uri
.
spec
)
;
this
.
_initFromData
(
)
;
}
_retrieveSearchXMLData
(
url
)
{
return
new
Promise
(
resolve
=
>
{
let
request
=
new
XMLHttpRequest
(
)
;
request
.
overrideMimeType
(
"
text
/
xml
"
)
;
request
.
onload
=
event
=
>
{
let
responseXML
=
event
.
target
.
responseXML
;
this
.
_data
=
responseXML
.
documentElement
;
resolve
(
)
;
}
;
request
.
onerror
=
function
(
event
)
{
resolve
(
)
;
}
;
request
.
open
(
"
GET
"
url
true
)
;
request
.
send
(
)
;
}
)
;
}
_getURLOfType
(
type
rel
)
{
for
(
let
url
of
this
.
_urls
)
{
if
(
url
.
type
=
=
type
&
&
(
!
rel
|
|
url
.
_hasRelation
(
rel
)
)
)
return
url
;
}
return
null
;
}
_confirmAddEngine
(
)
{
var
stringBundle
=
Services
.
strings
.
createBundle
(
SEARCH_BUNDLE
)
;
var
titleMessage
=
stringBundle
.
GetStringFromName
(
"
addEngineConfirmTitle
"
)
;
var
dialogMessage
=
stringBundle
.
formatStringFromName
(
"
addEngineConfirmation
"
[
this
.
_name
this
.
_uri
.
host
]
2
)
;
var
checkboxMessage
=
null
;
if
(
!
Services
.
prefs
.
getBoolPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
noCurrentEngine
"
false
)
)
checkboxMessage
=
stringBundle
.
GetStringFromName
(
"
addEngineAsCurrentText
"
)
;
var
addButtonLabel
=
stringBundle
.
GetStringFromName
(
"
addEngineAddButtonLabel
"
)
;
var
ps
=
Services
.
prompt
;
var
buttonFlags
=
(
ps
.
BUTTON_TITLE_IS_STRING
*
ps
.
BUTTON_POS_0
)
+
(
ps
.
BUTTON_TITLE_CANCEL
*
ps
.
BUTTON_POS_1
)
+
ps
.
BUTTON_POS_0_DEFAULT
;
var
checked
=
{
value
:
false
}
;
var
confirm
=
!
ps
.
confirmEx
(
null
titleMessage
dialogMessage
buttonFlags
addButtonLabel
null
null
checkboxMessage
checked
)
;
return
{
confirmed
:
confirm
useNow
:
checked
.
value
}
;
}
_onLoad
(
bytes
engine
)
{
function
onError
(
errorCode
=
Ci
.
nsISearchService
.
ERROR_UNKNOWN_FAILURE
)
{
if
(
engine
.
_installCallback
)
{
engine
.
_installCallback
(
errorCode
)
;
}
}
function
promptError
(
strings
=
{
}
error
=
undefined
)
{
onError
(
error
)
;
if
(
engine
.
_engineToUpdate
)
{
SearchUtils
.
log
(
"
updating
"
+
engine
.
_engineToUpdate
.
name
+
"
failed
"
)
;
return
;
}
var
brandBundle
=
Services
.
strings
.
createBundle
(
BRAND_BUNDLE
)
;
var
brandName
=
brandBundle
.
GetStringFromName
(
"
brandShortName
"
)
;
var
searchBundle
=
Services
.
strings
.
createBundle
(
SEARCH_BUNDLE
)
;
var
msgStringName
=
strings
.
error
|
|
"
error_loading_engine_msg2
"
;
var
titleStringName
=
strings
.
title
|
|
"
error_loading_engine_title
"
;
var
title
=
searchBundle
.
GetStringFromName
(
titleStringName
)
;
var
text
=
searchBundle
.
formatStringFromName
(
msgStringName
[
brandName
engine
.
_location
]
2
)
;
Services
.
ww
.
getNewPrompter
(
null
)
.
alert
(
title
text
)
;
}
if
(
!
bytes
)
{
promptError
(
)
;
return
;
}
var
parser
=
new
DOMParser
(
)
;
var
doc
=
parser
.
parseFromBuffer
(
bytes
"
text
/
xml
"
)
;
engine
.
_data
=
doc
.
documentElement
;
try
{
engine
.
_initFromData
(
)
;
}
catch
(
ex
)
{
SearchUtils
.
log
(
"
_onLoad
:
Failed
to
init
engine
!
\
n
"
+
ex
)
;
if
(
ex
.
result
=
=
Cr
.
NS_ERROR_FILE_CORRUPTED
)
{
promptError
(
{
error
:
"
error_invalid_engine_msg2
"
title
:
"
error_invalid_format_title
"
}
)
;
}
else
{
promptError
(
)
;
}
return
;
}
if
(
engine
.
_engineToUpdate
)
{
let
engineToUpdate
=
engine
.
_engineToUpdate
.
wrappedJSObject
;
engine
.
_shortName
=
engineToUpdate
.
_shortName
;
Object
.
keys
(
engineToUpdate
.
_metaData
)
.
forEach
(
key
=
>
{
engine
.
setAttr
(
key
engineToUpdate
.
getAttr
(
key
)
)
;
}
)
;
engine
.
_loadPath
=
engineToUpdate
.
_loadPath
;
engine
.
setAttr
(
"
updatelastmodified
"
(
new
Date
(
)
)
.
toUTCString
(
)
)
;
if
(
!
engine
.
_iconURI
&
&
engineToUpdate
.
_iconURI
)
engine
.
_iconURI
=
engineToUpdate
.
_iconURI
;
}
else
{
if
(
Services
.
search
.
getEngineByName
(
engine
.
name
)
)
{
if
(
engine
.
_confirm
)
{
promptError
(
{
error
:
"
error_duplicate_engine_msg
"
title
:
"
error_invalid_engine_title
"
}
Ci
.
nsISearchService
.
ERROR_DUPLICATE_ENGINE
)
;
}
else
{
onError
(
Ci
.
nsISearchService
.
ERROR_DUPLICATE_ENGINE
)
;
}
SearchUtils
.
log
(
"
_onLoad
:
duplicate
engine
found
bailing
"
)
;
return
;
}
if
(
engine
.
_confirm
)
{
var
confirmation
=
engine
.
_confirmAddEngine
(
)
;
SearchUtils
.
log
(
"
_onLoad
:
confirm
is
"
+
confirmation
.
confirmed
+
"
;
useNow
is
"
+
confirmation
.
useNow
)
;
if
(
!
confirmation
.
confirmed
)
{
onError
(
)
;
return
;
}
engine
.
_useNow
=
confirmation
.
useNow
;
}
engine
.
_shortName
=
sanitizeName
(
engine
.
name
)
;
engine
.
_loadPath
=
engine
.
getAnonymizedLoadPath
(
null
engine
.
_uri
)
;
if
(
engine
.
_extensionID
)
{
engine
.
_loadPath
+
=
"
:
"
+
engine
.
_extensionID
;
}
engine
.
setAttr
(
"
loadPathHash
"
getVerificationHash
(
engine
.
_loadPath
)
)
;
}
SearchUtils
.
notifyAction
(
engine
SearchUtils
.
MODIFIED_TYPE
.
LOADED
)
;
if
(
engine
.
_installCallback
)
{
engine
.
_installCallback
(
)
;
}
}
_getIconKey
(
width
height
)
{
let
keyObj
=
{
width
height
}
;
return
JSON
.
stringify
(
keyObj
)
;
}
_addIconToMap
(
width
height
uriSpec
)
{
if
(
width
=
=
16
&
&
height
=
=
16
)
{
return
;
}
this
.
_iconMapObj
=
this
.
_iconMapObj
|
|
{
}
;
let
key
=
this
.
_getIconKey
(
width
height
)
;
this
.
_iconMapObj
[
key
]
=
uriSpec
;
}
_setIcon
(
iconURL
isPreferred
width
height
)
{
var
uri
=
SearchUtils
.
makeURI
(
iconURL
)
;
if
(
!
uri
)
return
;
SearchUtils
.
log
(
"
_setIcon
:
Setting
icon
url
\
"
"
+
limitURILength
(
uri
.
spec
)
+
"
\
"
for
engine
\
"
"
+
this
.
name
+
"
\
"
.
"
)
;
switch
(
uri
.
scheme
)
{
case
"
resource
"
:
case
"
chrome
"
:
if
(
!
this
.
_isDefault
)
{
return
;
}
case
"
moz
-
extension
"
:
case
"
data
"
:
if
(
!
this
.
_hasPreferredIcon
|
|
isPreferred
)
{
this
.
_iconURI
=
uri
;
SearchUtils
.
notifyAction
(
this
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
)
;
this
.
_hasPreferredIcon
=
isPreferred
;
}
if
(
width
&
&
height
)
{
this
.
_addIconToMap
(
width
height
iconURL
)
;
}
break
;
case
"
http
"
:
case
"
https
"
:
case
"
ftp
"
:
SearchUtils
.
log
(
"
_setIcon
:
Downloading
icon
:
\
"
"
+
uri
.
spec
+
"
\
"
for
engine
:
\
"
"
+
this
.
name
+
"
\
"
"
)
;
var
chan
=
SearchUtils
.
makeChannel
(
uri
)
;
let
iconLoadCallback
=
function
(
byteArray
engine
)
{
if
(
engine
.
_hasPreferredIcon
&
&
!
isPreferred
)
return
;
if
(
!
byteArray
)
{
SearchUtils
.
log
(
"
iconLoadCallback
:
load
failed
"
)
;
return
;
}
let
contentType
=
chan
.
contentType
;
if
(
byteArray
.
length
>
SearchUtils
.
MAX_ICON_SIZE
)
{
try
{
SearchUtils
.
log
(
"
iconLoadCallback
:
rescaling
icon
"
)
;
[
byteArray
contentType
]
=
rescaleIcon
(
byteArray
contentType
)
;
}
catch
(
ex
)
{
SearchUtils
.
log
(
"
iconLoadCallback
:
got
exception
:
"
+
ex
)
;
Cu
.
reportError
(
"
Unable
to
set
an
icon
for
the
search
engine
because
:
"
+
ex
)
;
return
;
}
}
if
(
!
contentType
.
startsWith
(
"
image
/
"
)
)
contentType
=
"
image
/
x
-
icon
"
;
let
dataURL
=
"
data
:
"
+
contentType
+
"
;
base64
"
+
btoa
(
String
.
fromCharCode
.
apply
(
null
byteArray
)
)
;
engine
.
_iconURI
=
SearchUtils
.
makeURI
(
dataURL
)
;
if
(
width
&
&
height
)
{
engine
.
_addIconToMap
(
width
height
dataURL
)
;
}
SearchUtils
.
notifyAction
(
engine
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
)
;
engine
.
_hasPreferredIcon
=
isPreferred
;
}
;
var
engineToSet
=
this
.
_engineToUpdate
|
|
this
;
var
listener
=
new
loadListener
(
chan
engineToSet
iconLoadCallback
)
;
chan
.
notificationCallbacks
=
listener
;
chan
.
asyncOpen
(
listener
)
;
break
;
}
}
_initFromData
(
)
{
ENSURE_WARN
(
this
.
_data
"
Can
'
t
init
an
engine
with
no
data
!
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
let
element
=
this
.
_data
;
if
(
(
element
.
localName
=
=
MOZSEARCH_LOCALNAME
&
&
element
.
namespaceURI
=
=
MOZSEARCH_NS_10
)
|
|
(
element
.
localName
=
=
OPENSEARCH_LOCALNAME
&
&
OPENSEARCH_NAMESPACES
.
includes
(
element
.
namespaceURI
)
)
)
{
SearchUtils
.
log
(
"
_init
:
Initing
search
plugin
from
"
+
this
.
_location
)
;
this
.
_parse
(
)
;
}
else
{
Cu
.
reportError
(
"
Invalid
search
plugin
due
to
namespace
not
matching
.
"
)
;
SearchUtils
.
fail
(
this
.
_location
+
"
is
not
a
valid
search
plugin
.
"
Cr
.
NS_ERROR_FILE_CORRUPTED
)
;
}
this
.
_data
=
null
;
}
_initEngineURLFromMetaData
(
type
params
)
{
let
url
=
new
EngineURL
(
type
params
.
method
|
|
"
GET
"
params
.
template
)
;
if
(
params
.
postParams
)
{
let
queries
=
new
URLSearchParams
(
params
.
postParams
)
;
for
(
let
[
name
value
]
of
queries
)
{
url
.
addParam
(
name
value
)
;
}
}
if
(
params
.
getParams
)
{
let
queries
=
new
URLSearchParams
(
params
.
getParams
)
;
for
(
let
[
name
value
]
of
queries
)
{
url
.
addParam
(
name
value
)
;
}
}
if
(
params
.
mozParams
)
{
for
(
let
p
of
params
.
mozParams
)
{
if
(
(
p
.
condition
|
|
p
.
purpose
)
&
&
!
this
.
_isDefault
)
{
continue
;
}
if
(
p
.
condition
=
=
"
pref
"
)
{
let
value
=
getMozParamPref
(
p
.
pref
)
;
if
(
value
)
{
url
.
addParam
(
p
.
name
value
)
;
}
url
.
_addMozParam
(
p
)
;
}
else
{
url
.
addParam
(
p
.
name
p
.
value
p
.
purpose
|
|
undefined
)
;
}
}
}
this
.
_urls
.
push
(
url
)
;
}
_initFromMetadata
(
engineName
params
)
{
this
.
_extensionID
=
params
.
extensionID
;
this
.
_isBuiltin
=
!
!
params
.
isBuiltin
;
this
.
_initEngineURLFromMetaData
(
SearchUtils
.
URL_TYPE
.
SEARCH
{
method
:
(
params
.
searchPostParams
&
&
"
POST
"
)
|
|
params
.
method
|
|
"
GET
"
template
:
params
.
template
getParams
:
params
.
searchGetParams
postParams
:
params
.
searchPostParams
mozParams
:
params
.
mozParams
}
)
;
if
(
params
.
suggestURL
)
{
this
.
_initEngineURLFromMetaData
(
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
{
method
:
(
params
.
suggestPostParams
&
&
"
POST
"
)
|
|
params
.
method
|
|
"
GET
"
template
:
params
.
suggestURL
getParams
:
params
.
suggestGetParams
postParams
:
params
.
suggestPostParams
}
)
;
}
if
(
params
.
queryCharset
)
{
this
.
_queryCharset
=
params
.
queryCharset
;
}
if
(
params
.
postData
)
{
let
queries
=
new
URLSearchParams
(
params
.
postData
)
;
for
(
let
[
name
value
]
of
queries
)
{
this
.
addParam
(
name
value
)
;
}
}
this
.
_name
=
engineName
;
if
(
params
.
shortName
)
{
this
.
_shortName
=
params
.
shortName
;
}
this
.
alias
=
params
.
alias
;
this
.
_description
=
params
.
description
;
this
.
__searchForm
=
params
.
searchForm
;
if
(
params
.
iconURL
)
{
this
.
_setIcon
(
params
.
iconURL
true
)
;
}
if
(
params
.
icons
)
{
for
(
let
icon
of
params
.
icons
)
{
this
.
_addIconToMap
(
icon
.
size
icon
.
size
icon
.
url
)
;
}
}
}
_parseURL
(
element
)
{
var
type
=
element
.
getAttribute
(
"
type
"
)
;
var
method
=
element
.
getAttribute
(
"
method
"
)
|
|
"
GET
"
;
var
template
=
element
.
getAttribute
(
"
template
"
)
;
var
resultDomain
=
element
.
getAttribute
(
"
resultdomain
"
)
;
let
rels
=
[
]
;
if
(
element
.
hasAttribute
(
"
rel
"
)
)
{
rels
=
element
.
getAttribute
(
"
rel
"
)
.
toLowerCase
(
)
.
split
(
/
\
s
+
/
)
;
}
if
(
type
=
=
"
application
/
json
"
&
&
rels
.
includes
(
"
suggestions
"
)
)
{
type
=
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
;
}
try
{
var
url
=
new
EngineURL
(
type
method
template
resultDomain
)
;
}
catch
(
ex
)
{
SearchUtils
.
fail
(
"
_parseURL
:
failed
to
add
"
+
template
+
"
as
a
URL
"
Cr
.
NS_ERROR_FAILURE
)
;
}
if
(
rels
.
length
)
{
url
.
rels
=
rels
;
}
for
(
var
i
=
0
;
i
<
element
.
children
.
length
;
+
+
i
)
{
var
param
=
element
.
children
[
i
]
;
if
(
param
.
localName
=
=
"
Param
"
)
{
try
{
url
.
addParam
(
param
.
getAttribute
(
"
name
"
)
param
.
getAttribute
(
"
value
"
)
)
;
}
catch
(
ex
)
{
SearchUtils
.
log
(
"
_parseURL
:
Url
element
has
an
invalid
param
"
)
;
}
}
else
if
(
param
.
localName
=
=
"
MozParam
"
&
&
this
.
_isDefault
)
{
var
value
;
let
condition
=
param
.
getAttribute
(
"
condition
"
)
;
if
(
!
condition
)
{
let
engineLoc
=
this
.
_location
;
let
paramName
=
param
.
getAttribute
(
"
name
"
)
;
SearchUtils
.
log
(
"
_parseURL
:
MozParam
(
"
+
paramName
+
"
)
without
a
condition
attribute
found
parsing
engine
:
"
+
engineLoc
)
;
continue
;
}
switch
(
condition
)
{
case
"
purpose
"
:
url
.
addParam
(
param
.
getAttribute
(
"
name
"
)
param
.
getAttribute
(
"
value
"
)
param
.
getAttribute
(
"
purpose
"
)
)
;
break
;
case
"
pref
"
:
value
=
getMozParamPref
(
param
.
getAttribute
(
"
pref
"
)
value
)
;
if
(
value
)
{
url
.
addParam
(
param
.
getAttribute
(
"
name
"
)
value
)
;
}
url
.
_addMozParam
(
{
"
pref
"
:
param
.
getAttribute
(
"
pref
"
)
"
name
"
:
param
.
getAttribute
(
"
name
"
)
"
condition
"
:
"
pref
"
}
)
;
break
;
default
:
let
engineLoc
=
this
.
_location
;
let
paramName
=
param
.
getAttribute
(
"
name
"
)
;
SearchUtils
.
log
(
"
_parseURL
:
MozParam
(
"
+
paramName
+
"
)
has
an
unknown
condition
:
"
+
condition
+
"
.
Found
parsing
engine
:
"
+
engineLoc
)
;
break
;
}
}
}
this
.
_urls
.
push
(
url
)
;
}
_parseImage
(
element
)
{
SearchUtils
.
log
(
"
_parseImage
:
Image
textContent
:
\
"
"
+
limitURILength
(
element
.
textContent
)
+
"
\
"
"
)
;
let
width
=
parseInt
(
element
.
getAttribute
(
"
width
"
)
10
)
;
let
height
=
parseInt
(
element
.
getAttribute
(
"
height
"
)
10
)
;
let
isPrefered
=
width
=
=
16
&
&
height
=
=
16
;
if
(
isNaN
(
width
)
|
|
isNaN
(
height
)
|
|
width
<
=
0
|
|
height
<
=
0
)
{
SearchUtils
.
log
(
"
OpenSearch
image
element
must
have
positive
width
and
height
.
"
)
;
return
;
}
this
.
_setIcon
(
element
.
textContent
isPrefered
width
height
)
;
}
_parse
(
)
{
var
doc
=
this
.
_data
;
this
.
_queryCharset
=
OS_PARAM_INPUT_ENCODING_DEF
;
for
(
var
i
=
0
;
i
<
doc
.
children
.
length
;
+
+
i
)
{
var
child
=
doc
.
children
[
i
]
;
switch
(
child
.
localName
)
{
case
"
ShortName
"
:
this
.
_name
=
child
.
textContent
;
break
;
case
"
Description
"
:
this
.
_description
=
child
.
textContent
;
break
;
case
"
Url
"
:
try
{
this
.
_parseURL
(
child
)
;
}
catch
(
ex
)
{
SearchUtils
.
log
(
"
_parse
:
failed
to
parse
URL
child
:
"
+
ex
)
;
}
break
;
case
"
Image
"
:
this
.
_parseImage
(
child
)
;
break
;
case
"
InputEncoding
"
:
this
.
_queryCharset
=
child
.
textContent
.
toUpperCase
(
)
;
break
;
case
"
SearchForm
"
:
this
.
_searchForm
=
child
.
textContent
;
break
;
case
"
UpdateUrl
"
:
this
.
_updateURL
=
child
.
textContent
;
break
;
case
"
UpdateInterval
"
:
this
.
_updateInterval
=
parseInt
(
child
.
textContent
)
;
break
;
case
"
IconUpdateUrl
"
:
this
.
_iconUpdateURL
=
child
.
textContent
;
break
;
case
"
ExtensionID
"
:
this
.
_extensionID
=
child
.
textContent
;
break
;
}
}
if
(
!
this
.
name
|
|
(
this
.
_urls
.
length
=
=
0
)
)
SearchUtils
.
fail
(
"
_parse
:
No
name
or
missing
URL
!
"
Cr
.
NS_ERROR_FAILURE
)
;
if
(
!
this
.
supportsResponseType
(
SearchUtils
.
URL_TYPE
.
SEARCH
)
)
SearchUtils
.
fail
(
"
_parse
:
No
text
/
html
result
type
!
"
Cr
.
NS_ERROR_FAILURE
)
;
}
_initWithJSON
(
json
)
{
this
.
_name
=
json
.
_name
;
this
.
_shortName
=
json
.
_shortName
;
this
.
_loadPath
=
json
.
_loadPath
;
this
.
_description
=
json
.
description
;
this
.
_hasPreferredIcon
=
json
.
_hasPreferredIcon
=
=
undefined
;
this
.
_queryCharset
=
json
.
queryCharset
|
|
SearchUtils
.
DEFAULT_QUERY_CHARSET
;
this
.
__searchForm
=
json
.
__searchForm
;
this
.
_updateInterval
=
json
.
_updateInterval
|
|
null
;
this
.
_updateURL
=
json
.
_updateURL
|
|
null
;
this
.
_iconUpdateURL
=
json
.
_iconUpdateURL
|
|
null
;
this
.
_readOnly
=
json
.
_readOnly
=
=
undefined
;
this
.
_iconURI
=
SearchUtils
.
makeURI
(
json
.
_iconURL
)
;
this
.
_iconMapObj
=
json
.
_iconMapObj
;
this
.
_metaData
=
json
.
_metaData
|
|
{
}
;
this
.
_isBuiltin
=
json
.
_isBuiltin
;
if
(
json
.
filePath
)
{
this
.
_filePath
=
json
.
filePath
;
}
if
(
json
.
extensionID
)
{
this
.
_extensionID
=
json
.
extensionID
;
}
for
(
let
i
=
0
;
i
<
json
.
_urls
.
length
;
+
+
i
)
{
let
url
=
json
.
_urls
[
i
]
;
let
engineURL
=
new
EngineURL
(
url
.
type
|
|
SearchUtils
.
URL_TYPE
.
SEARCH
url
.
method
|
|
"
GET
"
url
.
template
url
.
resultDomain
|
|
undefined
)
;
engineURL
.
_initWithJSON
(
url
)
;
this
.
_urls
.
push
(
engineURL
)
;
}
}
toJSON
(
)
{
var
json
=
{
_name
:
this
.
_name
_shortName
:
this
.
_shortName
_loadPath
:
this
.
_loadPath
description
:
this
.
description
__searchForm
:
this
.
__searchForm
_iconURL
:
this
.
_iconURL
_iconMapObj
:
this
.
_iconMapObj
_metaData
:
this
.
_metaData
_urls
:
this
.
_urls
_isBuiltin
:
this
.
_isBuiltin
}
;
if
(
this
.
_updateInterval
)
json
.
_updateInterval
=
this
.
_updateInterval
;
if
(
this
.
_updateURL
)
json
.
_updateURL
=
this
.
_updateURL
;
if
(
this
.
_iconUpdateURL
)
json
.
_iconUpdateURL
=
this
.
_iconUpdateURL
;
if
(
!
this
.
_hasPreferredIcon
)
json
.
_hasPreferredIcon
=
this
.
_hasPreferredIcon
;
if
(
this
.
queryCharset
!
=
SearchUtils
.
DEFAULT_QUERY_CHARSET
)
json
.
queryCharset
=
this
.
queryCharset
;
if
(
!
this
.
_readOnly
)
json
.
_readOnly
=
this
.
_readOnly
;
if
(
this
.
_filePath
)
{
json
.
filePath
=
this
.
_filePath
;
}
if
(
this
.
_extensionID
)
{
json
.
extensionID
=
this
.
_extensionID
;
}
return
json
;
}
setAttr
(
name
val
)
{
this
.
_metaData
[
name
]
=
val
;
}
getAttr
(
name
)
{
return
this
.
_metaData
[
name
]
|
|
undefined
;
}
get
alias
(
)
{
return
this
.
getAttr
(
"
alias
"
)
;
}
set
alias
(
val
)
{
var
value
=
val
?
val
.
trim
(
)
:
null
;
this
.
setAttr
(
"
alias
"
value
)
;
SearchUtils
.
notifyAction
(
this
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
)
;
}
get
identifier
(
)
{
return
this
.
_isDefault
?
this
.
_shortName
:
null
;
}
get
description
(
)
{
return
this
.
_description
;
}
get
hidden
(
)
{
return
this
.
getAttr
(
"
hidden
"
)
|
|
false
;
}
set
hidden
(
val
)
{
var
value
=
!
!
val
;
if
(
value
!
=
this
.
hidden
)
{
this
.
setAttr
(
"
hidden
"
value
)
;
SearchUtils
.
notifyAction
(
this
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
)
;
}
}
get
iconURI
(
)
{
if
(
this
.
_iconURI
)
return
this
.
_iconURI
;
return
null
;
}
get
_iconURL
(
)
{
if
(
!
this
.
_iconURI
)
return
"
"
;
return
this
.
_iconURI
.
spec
;
}
get
_location
(
)
{
if
(
this
.
_uri
)
return
this
.
_uri
.
spec
;
return
this
.
_loadPath
;
}
getAnonymizedLoadPath
(
file
uri
)
{
const
NS_XPCOM_CURRENT_PROCESS_DIR
=
"
XCurProcD
"
;
const
NS_APP_USER_PROFILE_50_DIR
=
"
ProfD
"
;
const
XRE_APP_DISTRIBUTION_DIR
=
"
XREAppDist
"
;
const
knownDirs
=
{
app
:
NS_XPCOM_CURRENT_PROCESS_DIR
profile
:
NS_APP_USER_PROFILE_50_DIR
distribution
:
XRE_APP_DISTRIBUTION_DIR
}
;
let
leafName
=
this
.
_shortName
;
if
(
!
leafName
)
return
"
null
"
;
leafName
+
=
"
.
xml
"
;
let
prefix
=
"
"
suffix
=
"
"
;
if
(
!
file
)
{
if
(
uri
.
schemeIs
(
"
resource
"
)
)
{
uri
=
SearchUtils
.
makeURI
(
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsISubstitutingProtocolHandler
)
.
resolveURI
(
uri
)
)
;
}
let
scheme
=
uri
.
scheme
;
let
packageName
=
"
"
;
if
(
scheme
=
=
"
chrome
"
)
{
packageName
=
uri
.
hostPort
;
uri
=
gChromeReg
.
convertChromeURL
(
uri
)
;
}
if
(
AppConstants
.
platform
=
=
"
android
"
)
{
let
appPath
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
.
getSubstitution
(
"
android
"
)
;
if
(
appPath
)
{
appPath
=
appPath
.
spec
;
let
spec
=
uri
.
spec
;
if
(
spec
.
includes
(
appPath
)
)
{
let
appURI
=
Services
.
io
.
newFileURI
(
getDir
(
knownDirs
.
app
)
)
;
uri
=
Services
.
io
.
newURI
(
spec
.
replace
(
appPath
appURI
.
spec
)
)
;
}
}
}
if
(
uri
instanceof
Ci
.
nsINestedURI
)
{
prefix
=
"
jar
:
"
;
suffix
=
"
!
"
+
packageName
+
"
/
"
+
leafName
;
uri
=
uri
.
innermostURI
;
}
if
(
uri
instanceof
Ci
.
nsIFileURL
)
{
file
=
uri
.
file
;
}
else
{
let
path
=
"
[
"
+
scheme
+
"
]
"
;
if
(
/
^
(
?
:
https
?
|
ftp
)
/
.
test
(
scheme
)
)
{
path
+
=
uri
.
host
;
}
return
path
+
"
/
"
+
leafName
;
}
}
let
id
;
let
enginePath
=
file
.
path
;
for
(
let
key
in
knownDirs
)
{
let
path
;
try
{
path
=
getDir
(
knownDirs
[
key
]
)
.
path
;
}
catch
(
e
)
{
continue
;
}
if
(
enginePath
.
startsWith
(
path
)
)
{
id
=
"
[
"
+
key
+
"
]
"
+
enginePath
.
slice
(
path
.
length
)
.
replace
(
/
\
\
/
g
"
/
"
)
;
break
;
}
}
if
(
!
id
)
id
=
"
[
other
]
/
"
+
file
.
leafName
;
return
prefix
+
id
+
suffix
;
}
get
_isDistribution
(
)
{
return
!
!
(
this
.
_extensionID
&
&
Services
.
prefs
.
getCharPref
(
extensions
.
installedDistroAddon
.
{
this
.
_extensionID
}
"
"
)
)
;
}
get
_isDefault
(
)
{
if
(
this
.
_extensionID
)
{
return
this
.
_isBuiltin
|
|
this
.
_isDistribution
;
}
if
(
!
this
.
_shortName
)
return
false
;
if
(
/
^
(
?
:
jar
:
)
?
(
?
:
\
[
app
\
]
|
\
[
distribution
\
]
)
/
.
test
(
this
.
_loadPath
)
)
return
true
;
return
false
;
}
get
_hasUpdates
(
)
{
let
selfURL
=
this
.
_getURLOfType
(
SearchUtils
.
URL_TYPE
.
OPENSEARCH
"
self
"
)
;
return
!
!
(
this
.
_updateURL
|
|
this
.
_iconUpdateURL
|
|
selfURL
)
;
}
get
name
(
)
{
return
this
.
_name
;
}
get
searchForm
(
)
{
return
this
.
_getSearchFormWithPurpose
(
)
;
}
__internalAliases
:
null
get
_internalAliases
(
)
{
if
(
!
this
.
__internalAliases
)
{
this
.
__internalAliases
=
getInternalAliases
(
this
)
;
}
return
this
.
__internalAliases
;
}
_getSearchFormWithPurpose
(
aPurpose
=
"
"
)
{
var
searchFormURL
=
this
.
_getURLOfType
(
SearchUtils
.
URL_TYPE
.
SEARCH
"
searchform
"
)
;
if
(
searchFormURL
)
{
let
submission
=
searchFormURL
.
getSubmission
(
"
"
this
aPurpose
)
;
if
(
!
submission
.
postData
)
return
submission
.
uri
.
spec
;
}
if
(
!
this
.
_searchForm
)
{
var
htmlUrl
=
this
.
_getURLOfType
(
SearchUtils
.
URL_TYPE
.
SEARCH
)
;
ENSURE_WARN
(
htmlUrl
"
Engine
has
no
HTML
URL
!
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
this
.
_searchForm
=
SearchUtils
.
makeURI
(
htmlUrl
.
template
)
.
prePath
;
}
return
ParamSubstitution
(
this
.
_searchForm
"
"
this
)
;
}
get
queryCharset
(
)
{
if
(
this
.
_queryCharset
)
return
this
.
_queryCharset
;
return
this
.
_queryCharset
=
"
windows
-
1252
"
;
}
addParam
(
name
value
responseType
)
{
if
(
!
name
|
|
(
value
=
=
null
)
)
SearchUtils
.
fail
(
"
missing
name
or
value
for
nsISearchEngine
:
:
addParam
!
"
)
;
ENSURE_WARN
(
!
this
.
_readOnly
"
called
nsISearchEngine
:
:
addParam
on
a
read
-
only
engine
!
"
Cr
.
NS_ERROR_FAILURE
)
;
if
(
!
responseType
)
responseType
=
SearchUtils
.
URL_TYPE
.
SEARCH
;
var
url
=
this
.
_getURLOfType
(
responseType
)
;
if
(
!
url
)
SearchUtils
.
fail
(
"
Engine
object
has
no
URL
for
response
type
"
+
responseType
Cr
.
NS_ERROR_FAILURE
)
;
url
.
addParam
(
name
value
)
;
}
get
_defaultMobileResponseType
(
)
{
let
type
=
SearchUtils
.
URL_TYPE
.
SEARCH
;
let
isTablet
=
Services
.
sysinfo
.
get
(
"
tablet
"
)
;
if
(
isTablet
&
&
this
.
supportsResponseType
(
"
application
/
x
-
moz
-
tabletsearch
"
)
)
{
type
=
"
application
/
x
-
moz
-
tabletsearch
"
;
}
else
if
(
!
isTablet
&
&
this
.
supportsResponseType
(
"
application
/
x
-
moz
-
phonesearch
"
)
)
{
type
=
"
application
/
x
-
moz
-
phonesearch
"
;
}
Object
.
defineProperty
(
this
"
_defaultMobileResponseType
"
{
value
:
type
configurable
:
true
}
)
;
return
type
;
}
get
_isWhiteListed
(
)
{
let
url
=
this
.
_getURLOfType
(
SearchUtils
.
URL_TYPE
.
SEARCH
)
.
template
;
let
hostname
=
SearchUtils
.
makeURI
(
url
)
.
host
;
let
whitelist
=
Services
.
prefs
.
getDefaultBranch
(
SearchUtils
.
BROWSER_SEARCH_PREF
)
.
getCharPref
(
"
reset
.
whitelist
"
)
.
split
(
"
"
)
;
if
(
whitelist
.
includes
(
hostname
)
)
{
SearchUtils
.
log
(
"
The
hostname
"
+
hostname
+
"
is
white
listed
"
+
"
we
won
'
t
show
the
search
reset
prompt
"
)
;
return
true
;
}
return
false
;
}
getSubmission
(
data
responseType
purpose
)
{
if
(
!
responseType
)
{
responseType
=
AppConstants
.
platform
=
=
"
android
"
?
this
.
_defaultMobileResponseType
:
SearchUtils
.
URL_TYPE
.
SEARCH
;
}
var
url
=
this
.
_getURLOfType
(
responseType
)
;
if
(
!
url
)
return
null
;
if
(
!
data
)
{
return
new
Submission
(
SearchUtils
.
makeURI
(
this
.
_getSearchFormWithPurpose
(
purpose
)
)
)
;
}
SearchUtils
.
log
(
"
getSubmission
:
In
data
:
\
"
"
+
data
+
"
\
"
;
Purpose
:
\
"
"
+
purpose
+
"
\
"
"
)
;
var
submissionData
=
"
"
;
try
{
submissionData
=
Services
.
textToSubURI
.
ConvertAndEscape
(
this
.
queryCharset
data
)
;
}
catch
(
ex
)
{
SearchUtils
.
log
(
"
getSubmission
:
Falling
back
to
default
queryCharset
!
"
)
;
submissionData
=
Services
.
textToSubURI
.
ConvertAndEscape
(
SearchUtils
.
DEFAULT_QUERY_CHARSET
data
)
;
}
SearchUtils
.
log
(
"
getSubmission
:
Out
data
:
\
"
"
+
submissionData
+
"
\
"
"
)
;
return
url
.
getSubmission
(
submissionData
this
purpose
)
;
}
supportsResponseType
(
type
)
{
return
(
this
.
_getURLOfType
(
type
)
!
=
null
)
;
}
getResultDomain
(
responseType
)
{
if
(
!
responseType
)
{
responseType
=
AppConstants
.
platform
=
=
"
android
"
?
this
.
_defaultMobileResponseType
:
SearchUtils
.
URL_TYPE
.
SEARCH
;
}
SearchUtils
.
log
(
"
getResultDomain
:
responseType
:
\
"
"
+
responseType
+
"
\
"
"
)
;
let
url
=
this
.
_getURLOfType
(
responseType
)
;
if
(
url
)
return
url
.
resultDomain
;
return
"
"
;
}
getURLParsingInfo
(
)
{
let
responseType
=
AppConstants
.
platform
=
=
"
android
"
?
this
.
_defaultMobileResponseType
:
SearchUtils
.
URL_TYPE
.
SEARCH
;
let
url
=
this
.
_getURLOfType
(
responseType
)
;
if
(
!
url
|
|
url
.
method
!
=
"
GET
"
)
{
return
null
;
}
let
termsParameterName
=
url
.
_getTermsParameterName
(
)
;
if
(
!
termsParameterName
)
{
return
null
;
}
let
templateUrl
=
Services
.
io
.
newURI
(
url
.
template
)
.
QueryInterface
(
Ci
.
nsIURL
)
;
return
{
mainDomain
:
templateUrl
.
host
path
:
templateUrl
.
filePath
.
toLowerCase
(
)
termsParameterName
}
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsISearchEngine
]
)
get
wrappedJSObject
(
)
{
return
this
;
}
getIconURLBySize
(
width
height
)
{
if
(
width
=
=
16
&
&
height
=
=
16
)
return
this
.
_iconURL
;
if
(
!
this
.
_iconMapObj
)
return
null
;
let
key
=
this
.
_getIconKey
(
width
height
)
;
if
(
key
in
this
.
_iconMapObj
)
{
return
this
.
_iconMapObj
[
key
]
;
}
return
null
;
}
getIcons
(
)
{
let
result
=
[
]
;
if
(
this
.
_iconURL
)
result
.
push
(
{
width
:
16
height
:
16
url
:
this
.
_iconURL
}
)
;
if
(
!
this
.
_iconMapObj
)
return
result
;
for
(
let
key
of
Object
.
keys
(
this
.
_iconMapObj
)
)
{
let
iconSize
=
JSON
.
parse
(
key
)
;
result
.
push
(
{
width
:
iconSize
.
width
height
:
iconSize
.
height
url
:
this
.
_iconMapObj
[
key
]
}
)
;
}
return
result
;
}
speculativeConnect
(
options
)
{
if
(
!
options
|
|
!
options
.
window
)
{
Cu
.
reportError
(
"
invalid
options
arg
passed
to
nsISearchEngine
.
speculativeConnect
"
)
;
throw
Cr
.
NS_ERROR_INVALID_ARG
;
}
let
connector
=
Services
.
io
.
QueryInterface
(
Ci
.
nsISpeculativeConnect
)
;
let
searchURI
=
this
.
getSubmission
(
"
dummy
"
)
.
uri
;
let
callbacks
=
options
.
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
let
attrs
=
options
.
originAttributes
;
if
(
!
attrs
)
{
attrs
=
options
.
window
.
docShell
.
getOriginAttributes
(
)
;
}
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
searchURI
attrs
)
;
try
{
connector
.
speculativeConnect
(
searchURI
principal
callbacks
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
if
(
this
.
supportsResponseType
(
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
)
{
let
suggestURI
=
this
.
getSubmission
(
"
dummy
"
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
.
uri
;
if
(
suggestURI
.
prePath
!
=
searchURI
.
prePath
)
try
{
connector
.
speculativeConnect
(
suggestURI
principal
callbacks
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
}
;
function
Submission
(
uri
postData
=
null
)
{
this
.
_uri
=
uri
;
this
.
_postData
=
postData
;
}
Submission
.
prototype
=
{
get
uri
(
)
{
return
this
.
_uri
;
}
get
postData
(
)
{
return
this
.
_postData
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsISearchSubmission
]
)
}
;
var
EXPORTED_SYMBOLS
=
[
"
SearchEngine
"
"
getVerificationHash
"
]
;
