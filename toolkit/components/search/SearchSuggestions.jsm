const
{
FormAutoCompleteResult
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
nsFormAutoCompleteResult
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
SearchSuggestionController
"
"
resource
:
/
/
gre
/
modules
/
SearchSuggestionController
.
jsm
"
)
;
class
SuggestAutoComplete
{
constructor
(
)
{
this
.
#
init
(
)
;
}
onResultsReturned
(
results
)
{
let
finalResults
=
[
]
;
for
(
let
i
=
0
;
i
<
results
.
local
.
length
;
+
+
i
)
{
finalResults
.
push
(
results
.
local
[
i
]
.
value
)
;
}
if
(
results
.
remote
.
length
)
{
let
nonTailEntries
=
results
.
remote
.
filter
(
e
=
>
!
e
.
matchPrefix
&
&
!
e
.
tail
)
;
finalResults
=
finalResults
.
concat
(
nonTailEntries
.
map
(
e
=
>
e
.
value
)
)
;
}
this
.
onResultsReady
(
results
.
term
finalResults
results
.
formHistoryResult
)
;
}
onResultsReady
(
searchString
results
formHistoryResult
)
{
if
(
this
.
#
listener
)
{
let
result
=
new
FormAutoCompleteResult
(
searchString
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
0
"
"
results
.
map
(
result
=
>
(
{
value
:
result
label
:
result
comment
:
result
removable
:
true
}
)
)
formHistoryResult
)
;
this
.
#
listener
.
onSearchResult
(
this
result
)
;
this
.
#
listener
=
null
;
}
}
startSearch
(
searchString
searchParam
previousResult
listener
)
{
if
(
!
previousResult
)
{
this
.
#
formHistoryResult
=
null
;
}
var
formHistorySearchParam
=
searchParam
.
split
(
"
|
"
)
[
0
]
;
var
privacyMode
=
searchParam
.
split
(
"
|
"
)
[
1
]
=
=
"
private
"
;
if
(
Services
.
search
.
isInitialized
)
{
this
.
#
triggerSearch
(
searchString
formHistorySearchParam
listener
privacyMode
)
;
return
;
}
Services
.
search
.
init
(
)
.
then
(
(
)
=
>
{
this
.
#
triggerSearch
(
searchString
formHistorySearchParam
listener
privacyMode
)
;
}
)
.
catch
(
result
=
>
Cu
.
reportError
(
"
Could
not
initialize
search
service
bailing
out
:
"
+
result
)
)
;
}
stopSearch
(
)
{
this
.
#
suggestionController
.
stop
(
)
;
}
#
suggestionController
;
#
formHistoryResult
;
#
historyLimit
=
7
;
#
listener
=
null
;
#
init
(
)
{
this
.
#
suggestionController
=
new
lazy
.
SearchSuggestionController
(
obj
=
>
this
.
onResultsReturned
(
obj
)
)
;
this
.
#
suggestionController
.
maxLocalResults
=
this
.
#
historyLimit
;
}
#
triggerSearch
(
searchString
searchParam
listener
privacyMode
)
{
this
.
#
listener
=
listener
;
this
.
#
suggestionController
.
fetch
(
searchString
privacyMode
Services
.
search
.
defaultEngine
)
;
}
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompleteSearch
"
"
nsIAutoCompleteObserver
"
]
)
;
}
class
SearchSuggestAutoComplete
extends
SuggestAutoComplete
{
classID
=
Components
.
ID
(
"
{
aa892eb4
-
ffbf
-
477d
-
9f9a
-
06c995ae9f27
}
"
)
;
serviceURL
=
"
"
;
}
var
EXPORTED_SYMBOLS
=
[
"
SearchSuggestAutoComplete
"
]
;
