const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
IgnoreLists
:
"
resource
:
/
/
gre
/
modules
/
IgnoreLists
.
jsm
"
OpenSearchEngine
:
"
resource
:
/
/
gre
/
modules
/
OpenSearchEngine
.
jsm
"
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
SearchEngine
:
"
resource
:
/
/
gre
/
modules
/
SearchEngine
.
jsm
"
SearchEngineSelector
:
"
resource
:
/
/
gre
/
modules
/
SearchEngineSelector
.
jsm
"
SearchSettings
:
"
resource
:
/
/
gre
/
modules
/
SearchSettings
.
jsm
"
SearchStaticData
:
"
resource
:
/
/
gre
/
modules
/
SearchStaticData
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logConsole
"
(
)
=
>
{
return
console
.
createInstance
(
{
prefix
:
"
SearchService
"
maxLogLevel
:
SearchUtils
.
loggingEnabled
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
const
TOPIC_LOCALES_CHANGE
=
"
intl
:
app
-
locales
-
changed
"
;
const
QUIT_APPLICATION_TOPIC
=
"
quit
-
application
"
;
const
SEARCH_DEFAULT_UPDATE_INTERVAL
=
7
;
const
RECONFIG_IDLE_TIME_SEC
=
5
*
60
;
function
ParseSubmissionResult
(
engine
terms
termsParameterName
termsOffset
termsLength
)
{
this
.
_engine
=
engine
;
this
.
_terms
=
terms
;
this
.
_termsParameterName
=
termsParameterName
;
this
.
_termsOffset
=
termsOffset
;
this
.
_termsLength
=
termsLength
;
}
ParseSubmissionResult
.
prototype
=
{
get
engine
(
)
{
return
this
.
_engine
;
}
get
terms
(
)
{
return
this
.
_terms
;
}
get
termsParameterName
(
)
{
return
this
.
_termsParameterName
;
}
get
termsOffset
(
)
{
return
this
.
_termsOffset
;
}
get
termsLength
(
)
{
return
this
.
_termsLength
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsISearchParseSubmissionResult
"
]
)
}
;
const
gEmptyParseSubmissionResult
=
Object
.
freeze
(
new
ParseSubmissionResult
(
null
"
"
"
"
-
1
0
)
)
;
function
SearchService
(
)
{
this
.
_initObservers
=
PromiseUtils
.
defer
(
)
;
this
.
_engines
=
new
Map
(
)
;
this
.
_settings
=
new
SearchSettings
(
this
)
;
}
SearchService
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
7319788a
-
fe93
-
4db3
-
9f39
-
818cf08f4256
}
"
)
_initRV
:
Cr
.
NS_OK
_initStarted
:
false
_initialized
:
false
_maybeReloadDebounce
:
false
_reloadingEngines
:
false
_engineSelector
:
null
_submissionURLIgnoreList
:
[
]
_loadPathIgnoreList
:
[
]
_engines
:
null
__sortedEngines
:
null
_dontSetUseSavedOrder
:
false
_searchDefault
:
null
_searchPrivateDefault
:
null
_startupExtensions
:
new
Set
(
)
_startupRemovedExtensions
:
new
Set
(
)
_defaultOverrideAllowlist
:
null
get
_separatePrivateDefault
(
)
{
return
(
this
.
_separatePrivateDefaultPrefValue
&
&
this
.
_separatePrivateDefaultEnabledPrefValue
)
;
}
_ensureInitialized
(
)
{
if
(
this
.
_initialized
)
{
if
(
!
Components
.
isSuccessCode
(
this
.
_initRV
)
)
{
logConsole
.
debug
(
"
_ensureInitialized
:
failure
"
)
;
throw
Components
.
Exception
(
"
SearchService
previously
failed
to
initialize
"
this
.
_initRV
)
;
}
return
;
}
let
err
=
new
Error
(
"
Something
tried
to
use
the
search
service
before
it
'
s
been
"
+
"
properly
intialized
.
Please
examine
the
stack
trace
to
figure
out
what
and
"
+
"
where
to
fix
it
:
\
n
"
)
;
err
.
message
+
=
err
.
stack
;
throw
err
;
}
async
_init
(
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_separatePrivateDefaultPrefValue
"
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
separatePrivateDefault
"
false
this
.
_onSeparateDefaultPrefChanged
.
bind
(
this
)
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_separatePrivateDefaultEnabledPrefValue
"
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
separatePrivateDefault
.
ui
.
enabled
"
false
this
.
_onSeparateDefaultPrefChanged
.
bind
(
this
)
)
;
Services
.
obs
.
addObserver
(
this
Region
.
REGION_TOPIC
)
;
try
{
this
.
_engineSelector
=
new
SearchEngineSelector
(
this
.
_handleConfigurationUpdated
.
bind
(
this
)
)
;
let
settings
=
await
this
.
_settings
.
get
(
)
;
this
.
_setupRemoteSettings
(
)
.
catch
(
Cu
.
reportError
)
;
await
this
.
_loadEngines
(
settings
)
;
if
(
Services
.
startup
.
shuttingDown
)
{
logConsole
.
warn
(
"
_init
:
abandoning
init
due
to
shutting
down
"
)
;
this
.
_initRV
=
Cr
.
NS_ERROR_ABORT
;
this
.
_initObservers
.
reject
(
this
.
_initRV
)
;
return
this
.
_initRV
;
}
logConsole
.
debug
(
"
_init
:
engines
loaded
writing
settings
"
)
;
this
.
_addObservers
(
)
;
}
catch
(
ex
)
{
this
.
_initRV
=
ex
.
result
!
=
=
undefined
?
ex
.
result
:
Cr
.
NS_ERROR_FAILURE
;
logConsole
.
error
(
"
_init
:
failure
initializing
search
:
"
ex
.
result
)
;
}
this
.
_initialized
=
true
;
if
(
Components
.
isSuccessCode
(
this
.
_initRV
)
)
{
this
.
_initObservers
.
resolve
(
this
.
_initRV
)
;
}
else
{
this
.
_initObservers
.
reject
(
this
.
_initRV
)
;
}
Services
.
obs
.
notifyObservers
(
null
SearchUtils
.
TOPIC_SEARCH_SERVICE
"
init
-
complete
"
)
;
logConsole
.
debug
(
"
Completed
_init
"
)
;
return
this
.
_initRV
;
}
async
_setupRemoteSettings
(
)
{
let
listener
=
this
.
_handleIgnoreListUpdated
.
bind
(
this
)
;
const
current
=
await
IgnoreLists
.
getAndSubscribe
(
listener
)
;
this
.
_ignoreListListener
=
listener
;
await
this
.
_handleIgnoreListUpdated
(
{
data
:
{
current
}
}
)
;
Services
.
obs
.
notifyObservers
(
null
SearchUtils
.
TOPIC_SEARCH_SERVICE
"
settings
-
update
-
complete
"
)
;
}
async
_handleIgnoreListUpdated
(
eventData
)
{
logConsole
.
debug
(
"
_handleIgnoreListUpdated
"
)
;
const
{
data
:
{
current
}
}
=
eventData
;
for
(
const
entry
of
current
)
{
if
(
entry
.
id
=
=
"
load
-
paths
"
)
{
this
.
_loadPathIgnoreList
=
[
.
.
.
entry
.
matches
]
;
}
else
if
(
entry
.
id
=
=
"
submission
-
urls
"
)
{
this
.
_submissionURLIgnoreList
=
[
.
.
.
entry
.
matches
]
;
}
}
if
(
!
this
.
isInitialized
)
{
await
this
.
_initObservers
;
}
let
engineRemoved
=
false
;
for
(
let
engine
of
this
.
_engines
.
values
(
)
)
{
if
(
this
.
_engineMatchesIgnoreLists
(
engine
)
)
{
await
this
.
removeEngine
(
engine
)
;
engineRemoved
=
true
;
}
}
if
(
engineRemoved
&
&
!
this
.
_engines
.
size
)
{
this
.
_maybeReloadEngines
(
)
.
catch
(
Cu
.
reportError
)
;
}
}
_engineMatchesIgnoreLists
(
engine
)
{
if
(
this
.
_loadPathIgnoreList
.
includes
(
engine
.
_loadPath
)
)
{
return
true
;
}
let
url
=
engine
.
_getURLOfType
(
"
text
/
html
"
)
.
getSubmission
(
"
dummy
"
engine
)
.
uri
.
spec
.
toLowerCase
(
)
;
if
(
this
.
_submissionURLIgnoreList
.
some
(
code
=
>
url
.
includes
(
code
.
toLowerCase
(
)
)
)
)
{
return
true
;
}
return
false
;
}
async
maybeSetAndOverrideDefault
(
extension
)
{
let
searchProvider
=
extension
.
manifest
.
chrome_settings_overrides
.
search_provider
;
let
engine
=
this
.
_engines
.
get
(
searchProvider
.
name
)
;
if
(
!
engine
|
|
!
engine
.
isAppProvided
|
|
engine
.
hidden
)
{
return
{
canChangeToAppProvided
:
false
canInstallEngine
:
!
engine
?
.
hidden
}
;
}
if
(
!
this
.
_defaultOverrideAllowlist
)
{
this
.
_defaultOverrideAllowlist
=
new
SearchDefaultOverrideAllowlistHandler
(
)
;
}
if
(
extension
.
startupReason
=
=
=
"
ADDON_INSTALL
"
|
|
extension
.
startupReason
=
=
=
"
ADDON_ENABLE
"
)
{
if
(
this
.
defaultEngine
.
name
=
=
searchProvider
.
name
)
{
return
{
canChangeToAppProvided
:
false
canInstallEngine
:
false
}
;
}
if
(
!
(
await
this
.
_defaultOverrideAllowlist
.
canOverride
(
extension
engine
.
_extensionID
)
)
)
{
logConsole
.
debug
(
"
Allowing
default
engine
to
be
set
to
app
-
provided
.
"
extension
.
id
)
;
return
{
canChangeToAppProvided
:
true
canInstallEngine
:
false
}
;
}
engine
.
overrideWithExtension
(
extension
.
id
extension
.
manifest
)
;
logConsole
.
debug
(
"
Allowing
default
engine
to
be
set
to
app
-
provided
and
overridden
.
"
extension
.
id
)
;
return
{
canChangeToAppProvided
:
true
canInstallEngine
:
false
}
;
}
if
(
engine
.
getAttr
(
"
overriddenBy
"
)
=
=
extension
.
id
&
&
(
await
this
.
_defaultOverrideAllowlist
.
canOverride
(
extension
engine
.
_extensionID
)
)
)
{
engine
.
overrideWithExtension
(
extension
.
id
extension
.
manifest
)
;
logConsole
.
debug
(
"
Re
-
enabling
overriding
of
core
extension
by
"
extension
.
id
)
;
return
{
canChangeToAppProvided
:
true
canInstallEngine
:
false
}
;
}
return
{
canChangeToAppProvided
:
false
canInstallEngine
:
false
}
;
}
_handleConfigurationUpdated
(
)
{
if
(
this
.
_queuedIdle
)
{
return
;
}
this
.
_queuedIdle
=
true
;
this
.
idleService
.
addIdleObserver
(
this
RECONFIG_IDLE_TIME_SEC
)
;
}
get
_sortedEngines
(
)
{
if
(
!
this
.
__sortedEngines
)
{
return
this
.
_buildSortedEngineList
(
)
;
}
return
this
.
__sortedEngines
;
}
_originalDefaultEngine
(
privateMode
=
false
)
{
let
defaultEngine
=
this
.
_getEngineByWebExtensionDetails
(
privateMode
&
&
this
.
_searchPrivateDefault
?
this
.
_searchPrivateDefault
:
this
.
_searchDefault
)
;
if
(
defaultEngine
)
{
return
defaultEngine
;
}
if
(
privateMode
)
{
return
this
.
_originalDefaultEngine
(
false
)
;
}
return
this
.
_sortedVisibleEngines
[
0
]
;
}
get
originalDefaultEngine
(
)
{
return
this
.
_originalDefaultEngine
(
)
;
}
get
originalPrivateDefaultEngine
(
)
{
return
this
.
_originalDefaultEngine
(
this
.
_separatePrivateDefault
)
;
}
resetToOriginalDefaultEngine
(
)
{
let
originalDefaultEngine
=
this
.
originalDefaultEngine
;
originalDefaultEngine
.
hidden
=
false
;
this
.
defaultEngine
=
originalDefaultEngine
;
}
async
_loadEngines
(
settings
)
{
logConsole
.
debug
(
"
_loadEngines
:
start
"
)
;
let
{
engines
privateDefault
}
=
await
this
.
_fetchEngineSelectorEngines
(
)
;
this
.
_setDefaultAndOrdersFromSelector
(
engines
privateDefault
)
;
let
newEngines
=
await
this
.
_loadEnginesFromConfig
(
engines
)
;
for
(
let
engine
of
newEngines
)
{
this
.
_addEngineToStore
(
engine
)
;
}
logConsole
.
debug
(
"
_loadEngines
:
loading
"
this
.
_startupExtensions
.
size
"
engines
reported
by
AddonManager
startup
"
)
;
for
(
let
extension
of
this
.
_startupExtensions
)
{
await
this
.
_installExtensionEngine
(
extension
[
SearchUtils
.
DEFAULT_TAG
]
true
)
;
}
this
.
_startupExtensions
.
clear
(
)
;
this
.
_loadEnginesFromSettings
(
settings
.
engines
)
;
this
.
_loadEnginesMetadataFromSettings
(
settings
.
engines
)
;
logConsole
.
debug
(
"
_loadEngines
:
done
"
)
;
}
async
_loadEnginesFromConfig
(
engineConfigs
)
{
logConsole
.
debug
(
"
_loadEnginesFromConfig
"
)
;
let
engines
=
[
]
;
for
(
let
config
of
engineConfigs
)
{
try
{
let
engine
=
await
this
.
makeEngineFromConfig
(
config
)
;
engines
.
push
(
engine
)
;
}
catch
(
ex
)
{
console
.
error
(
Could
not
load
engine
{
"
webExtension
"
in
config
?
config
.
webExtension
.
id
:
"
unknown
"
}
:
{
ex
}
)
;
}
}
return
engines
;
}
async
_maybeReloadEngines
(
)
{
if
(
this
.
_maybeReloadDebounce
)
{
logConsole
.
debug
(
"
We
'
re
already
waiting
to
reload
engines
.
"
)
;
return
;
}
if
(
!
this
.
_initialized
|
|
this
.
_reloadingEngines
)
{
this
.
_maybeReloadDebounce
=
true
;
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
{
if
(
!
this
.
_maybeReloadDebounce
)
{
return
;
}
this
.
_maybeReloadDebounce
=
false
;
this
.
_maybeReloadEngines
(
)
.
catch
(
Cu
.
reportError
)
;
}
10000
)
;
logConsole
.
debug
(
"
Post
-
poning
maybeReloadEngines
(
)
as
we
'
re
currently
initializing
.
"
)
;
return
;
}
let
settings
=
await
this
.
_settings
.
get
(
)
;
logConsole
.
debug
(
"
Running
maybeReloadEngines
"
)
;
this
.
_reloadingEngines
=
true
;
try
{
await
this
.
_reloadEngines
(
settings
)
;
}
catch
(
ex
)
{
logConsole
.
error
(
"
maybeReloadEngines
failed
"
ex
)
;
}
this
.
_reloadingEngines
=
false
;
logConsole
.
debug
(
"
maybeReloadEngines
complete
"
)
;
}
async
_reloadEngines
(
settings
)
{
const
prevCurrentEngine
=
this
.
_currentEngine
;
const
prevPrivateEngine
=
this
.
_currentPrivateEngine
;
this
.
_dontSetUseSavedOrder
=
true
;
let
{
engines
:
originalConfigEngines
privateDefault
}
=
await
this
.
_fetchEngineSelectorEngines
(
)
;
let
enginesToRemove
=
[
]
;
let
configEngines
=
[
.
.
.
originalConfigEngines
]
;
let
oldEngineList
=
[
.
.
.
this
.
_engines
.
values
(
)
]
;
for
(
let
engine
of
oldEngineList
)
{
if
(
!
engine
.
isAppProvided
)
{
continue
;
}
let
index
=
configEngines
.
findIndex
(
e
=
>
e
.
webExtension
.
id
=
=
engine
.
_extensionID
&
&
e
.
webExtension
.
locale
=
=
engine
.
_locale
)
;
let
policy
manifest
locale
;
if
(
index
=
=
-
1
)
{
let
replacementEngines
=
configEngines
.
filter
(
e
=
>
e
.
webExtension
.
id
=
=
engine
.
_extensionID
)
;
if
(
replacementEngines
.
length
!
=
1
)
{
enginesToRemove
.
push
(
engine
)
;
continue
;
}
policy
=
await
this
.
_getExtensionPolicy
(
engine
.
_extensionID
)
;
manifest
=
policy
.
extension
.
manifest
;
locale
=
replacementEngines
[
0
]
.
webExtension
.
locale
|
|
SearchUtils
.
DEFAULT_TAG
;
if
(
locale
!
=
SearchUtils
.
DEFAULT_TAG
)
{
manifest
=
await
policy
.
extension
.
getLocalizedManifest
(
locale
)
;
}
if
(
manifest
.
name
!
=
manifest
.
chrome_settings_overrides
.
search_provider
.
name
.
trim
(
)
)
{
enginesToRemove
.
push
(
engine
)
;
continue
;
}
index
=
configEngines
.
findIndex
(
e
=
>
e
.
webExtension
.
id
=
=
replacementEngines
[
0
]
.
webExtension
.
id
&
&
e
.
webExtension
.
locale
=
=
replacementEngines
[
0
]
.
webExtension
.
locale
)
;
}
else
{
policy
=
await
this
.
_getExtensionPolicy
(
engine
.
_extensionID
)
;
manifest
=
policy
.
extension
.
manifest
;
locale
=
engine
.
_locale
|
|
SearchUtils
.
DEFAULT_TAG
;
if
(
locale
!
=
SearchUtils
.
DEFAULT_TAG
)
{
manifest
=
await
policy
.
extension
.
getLocalizedManifest
(
locale
)
;
}
}
engine
.
_updateFromManifest
(
policy
.
extension
.
id
policy
.
extension
.
baseURI
manifest
locale
configEngines
[
index
]
)
;
configEngines
.
splice
(
index
1
)
;
}
for
(
let
engine
of
configEngines
)
{
try
{
let
newEngine
=
await
this
.
makeEngineFromConfig
(
engine
)
;
this
.
_addEngineToStore
(
newEngine
true
)
;
}
catch
(
ex
)
{
logConsole
.
warn
(
Could
not
load
engine
{
"
webExtension
"
in
engine
?
engine
.
webExtension
.
id
:
"
unknown
"
}
:
{
ex
}
)
;
}
}
this
.
_loadEnginesMetadataFromSettings
(
settings
.
engines
)
;
this
.
_currentEngine
=
null
;
this
.
_currentPrivateEngine
=
null
;
this
.
_setDefaultAndOrdersFromSelector
(
originalConfigEngines
privateDefault
)
;
if
(
prevCurrentEngine
&
&
this
.
defaultEngine
!
=
=
prevCurrentEngine
)
{
SearchUtils
.
notifyAction
(
this
.
_currentEngine
SearchUtils
.
MODIFIED_TYPE
.
DEFAULT
)
;
if
(
!
this
.
_separatePrivateDefault
)
{
SearchUtils
.
notifyAction
(
this
.
_currentEngine
SearchUtils
.
MODIFIED_TYPE
.
DEFAULT_PRIVATE
)
;
}
}
if
(
this
.
_separatePrivateDefault
&
&
prevPrivateEngine
&
&
this
.
defaultPrivateEngine
!
=
=
prevPrivateEngine
)
{
SearchUtils
.
notifyAction
(
this
.
_currentPrivateEngine
SearchUtils
.
MODIFIED_TYPE
.
DEFAULT_PRIVATE
)
;
}
for
(
let
engine
of
enginesToRemove
)
{
let
inUseEngines
=
[
.
.
.
this
.
_engines
.
values
(
)
]
.
filter
(
e
=
>
e
.
_extensionID
=
=
engine
.
_extensionID
)
;
if
(
inUseEngines
.
length
<
=
1
)
{
if
(
inUseEngines
.
length
=
=
1
&
&
inUseEngines
[
0
]
=
=
engine
)
{
this
.
_internalRemoveEngine
(
engine
)
;
let
addon
=
await
AddonManager
.
getAddonByID
(
engine
.
_extensionID
)
;
if
(
addon
)
{
await
addon
.
uninstall
(
)
;
}
}
}
else
{
this
.
_internalRemoveEngine
(
engine
)
;
}
SearchUtils
.
notifyAction
(
engine
SearchUtils
.
MODIFIED_TYPE
.
REMOVED
)
;
}
this
.
_dontSetUseSavedOrder
=
false
;
this
.
__sortedEngines
=
null
;
Services
.
obs
.
notifyObservers
(
null
SearchUtils
.
TOPIC_SEARCH_SERVICE
"
engines
-
reloaded
"
)
;
}
reset
(
)
{
this
.
_initialized
=
false
;
this
.
_initObservers
=
PromiseUtils
.
defer
(
)
;
this
.
_initStarted
=
false
;
this
.
_startupExtensions
=
new
Set
(
)
;
this
.
_engines
.
clear
(
)
;
this
.
__sortedEngines
=
null
;
this
.
_currentEngine
=
null
;
this
.
_currentPrivateEngine
=
null
;
this
.
_searchDefault
=
null
;
this
.
_searchPrivateDefault
=
null
;
this
.
_maybeReloadDebounce
=
false
;
}
_addEngineToStore
(
engine
skipDuplicateCheck
=
false
)
{
if
(
this
.
_engineMatchesIgnoreLists
(
engine
)
)
{
logConsole
.
debug
(
"
_addEngineToStore
:
Ignoring
engine
"
)
;
return
;
}
logConsole
.
debug
(
"
_addEngineToStore
:
Adding
engine
:
"
engine
.
name
)
;
var
hasSameNameAsUpdate
=
engine
.
_engineToUpdate
&
&
engine
.
name
=
=
engine
.
_engineToUpdate
.
name
;
if
(
!
skipDuplicateCheck
&
&
this
.
_engines
.
has
(
engine
.
name
)
&
&
!
hasSameNameAsUpdate
)
{
logConsole
.
debug
(
"
_addEngineToStore
:
Duplicate
engine
found
aborting
!
"
)
;
return
;
}
if
(
engine
.
_engineToUpdate
)
{
var
oldEngine
=
engine
.
_engineToUpdate
;
this
.
_engines
.
delete
(
oldEngine
.
name
)
;
for
(
var
p
in
engine
)
{
if
(
!
(
engine
.
__lookupGetter__
(
p
)
|
|
engine
.
__lookupSetter__
(
p
)
)
)
{
oldEngine
[
p
]
=
engine
[
p
]
;
}
}
engine
=
oldEngine
;
engine
.
_engineToUpdate
=
null
;
this
.
_engines
.
set
(
engine
.
name
engine
)
;
SearchUtils
.
notifyAction
(
engine
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
)
;
}
else
{
this
.
_engines
.
set
(
engine
.
name
engine
)
;
if
(
this
.
__sortedEngines
&
&
!
this
.
_dontSetUseSavedOrder
)
{
this
.
__sortedEngines
.
push
(
engine
)
;
this
.
_saveSortedEngineList
(
)
;
}
SearchUtils
.
notifyAction
(
engine
SearchUtils
.
MODIFIED_TYPE
.
ADDED
)
;
}
engine
.
_engineAddedToStore
=
true
;
if
(
engine
.
_hasUpdates
)
{
if
(
!
engine
.
getAttr
(
"
updateexpir
"
)
)
{
engineUpdateService
.
scheduleNextUpdate
(
engine
)
;
}
}
}
_loadEnginesMetadataFromSettings
(
engines
)
{
if
(
!
engines
)
{
return
;
}
for
(
let
engine
of
engines
)
{
let
name
=
engine
.
_name
;
if
(
this
.
_engines
.
has
(
name
)
)
{
logConsole
.
debug
(
"
_loadEnginesMetadataFromSettings
transfering
metadata
for
"
name
engine
.
_metaData
)
;
let
eng
=
this
.
_engines
.
get
(
name
)
;
if
(
eng
.
_alias
=
=
=
engine
?
.
_metaData
?
.
alias
)
{
delete
engine
.
_metaData
.
alias
;
}
eng
.
_metaData
=
engine
.
_metaData
|
|
{
}
;
}
}
}
_loadEnginesFromSettings
(
enginesCache
)
{
if
(
!
enginesCache
)
{
return
;
}
logConsole
.
debug
(
"
_loadEnginesFromSettings
:
Loading
"
enginesCache
.
length
"
engines
from
settings
"
)
;
let
skippedEngines
=
0
;
for
(
let
engineJSON
of
enginesCache
)
{
if
(
engineJSON
.
_isAppProvided
|
|
engineJSON
.
_isBuiltin
)
{
+
+
skippedEngines
;
continue
;
}
let
loadPath
=
engineJSON
.
_loadPath
?
.
toLowerCase
(
)
;
if
(
loadPath
&
&
(
loadPath
.
startsWith
(
"
[
distribution
]
"
)
|
|
loadPath
.
includes
(
"
[
app
]
/
extensions
/
langpack
"
)
|
|
loadPath
.
includes
(
"
[
other
]
/
langpack
"
)
|
|
loadPath
.
includes
(
"
[
profile
]
/
extensions
/
langpack
"
)
|
|
loadPath
.
startsWith
(
"
jar
:
[
app
]
/
omni
.
ja
"
)
)
)
{
continue
;
}
try
{
let
engine
=
new
SearchEngine
(
{
isAppProvided
:
false
loadPath
:
engineJSON
.
_loadPath
}
)
;
engine
.
_initWithJSON
(
engineJSON
)
;
this
.
_addEngineToStore
(
engine
)
;
}
catch
(
ex
)
{
logConsole
.
error
(
"
Failed
to
load
"
engineJSON
.
_name
"
from
settings
:
"
ex
engineJSON
)
;
}
}
if
(
skippedEngines
)
{
logConsole
.
debug
(
"
_loadEnginesFromSettings
:
skipped
"
skippedEngines
"
built
-
in
engines
.
"
)
;
}
}
async
_fetchEngineSelectorEngines
(
)
{
let
locale
=
Services
.
locale
.
appLocaleAsBCP47
;
let
region
=
Region
.
home
|
|
"
default
"
;
let
channel
=
AppConstants
.
MOZ_APP_VERSION_DISPLAY
.
endsWith
(
"
esr
"
)
?
"
esr
"
:
AppConstants
.
MOZ_UPDATE_CHANNEL
;
let
{
engines
privateDefault
}
=
await
this
.
_engineSelector
.
fetchEngineConfiguration
(
{
locale
region
channel
experiment
:
NimbusFeatures
.
search
.
getVariable
(
"
experiment
"
)
distroID
:
SearchUtils
.
distroID
}
)
;
for
(
let
e
of
engines
)
{
if
(
!
e
.
webExtension
)
{
e
.
webExtension
=
{
}
;
}
e
.
webExtension
.
locale
=
e
.
webExtension
?
.
locale
?
?
SearchUtils
.
DEFAULT_TAG
;
}
return
{
engines
privateDefault
}
;
}
_setDefaultAndOrdersFromSelector
(
engines
privateDefault
)
{
const
defaultEngine
=
engines
[
0
]
;
this
.
_searchDefault
=
{
id
:
defaultEngine
.
webExtension
.
id
locale
:
defaultEngine
.
webExtension
.
locale
}
;
if
(
privateDefault
)
{
this
.
_searchPrivateDefault
=
{
id
:
privateDefault
.
webExtension
.
id
locale
:
privateDefault
.
webExtension
.
locale
}
;
}
}
_saveSortedEngineList
(
)
{
logConsole
.
debug
(
"
_saveSortedEngineList
"
)
;
this
.
_settings
.
setAttribute
(
"
useSavedOrder
"
true
)
;
var
engines
=
this
.
_sortedEngines
;
for
(
var
i
=
0
;
i
<
engines
.
length
;
+
+
i
)
{
engines
[
i
]
.
setAttr
(
"
order
"
i
+
1
)
;
}
}
_buildSortedEngineList
(
)
{
this
.
__sortedEngines
=
[
]
;
if
(
this
.
_settings
.
getAttribute
(
"
useSavedOrder
"
)
)
{
logConsole
.
debug
(
"
_buildSortedEngineList
:
using
saved
order
"
)
;
let
addedEngines
=
{
}
;
let
needToSaveEngineList
=
false
;
for
(
let
engine
of
this
.
_engines
.
values
(
)
)
{
var
orderNumber
=
engine
.
getAttr
(
"
order
"
)
;
if
(
orderNumber
&
&
!
this
.
__sortedEngines
[
orderNumber
-
1
]
)
{
this
.
__sortedEngines
[
orderNumber
-
1
]
=
engine
;
addedEngines
[
engine
.
name
]
=
engine
;
}
else
{
needToSaveEngineList
=
true
;
}
}
var
filteredEngines
=
this
.
__sortedEngines
.
filter
(
function
(
a
)
{
return
!
!
a
;
}
)
;
if
(
this
.
__sortedEngines
.
length
!
=
filteredEngines
.
length
)
{
needToSaveEngineList
=
true
;
}
this
.
__sortedEngines
=
filteredEngines
;
if
(
needToSaveEngineList
)
{
this
.
_saveSortedEngineList
(
)
;
}
let
alphaEngines
=
[
]
;
for
(
let
engine
of
this
.
_engines
.
values
(
)
)
{
if
(
!
(
engine
.
name
in
addedEngines
)
)
{
alphaEngines
.
push
(
engine
)
;
}
}
const
collator
=
new
Intl
.
Collator
(
)
;
alphaEngines
.
sort
(
(
a
b
)
=
>
{
return
collator
.
compare
(
a
.
name
b
.
name
)
;
}
)
;
return
(
this
.
__sortedEngines
=
this
.
__sortedEngines
.
concat
(
alphaEngines
)
)
;
}
logConsole
.
debug
(
"
_buildSortedEngineList
:
using
default
orders
"
)
;
return
(
this
.
__sortedEngines
=
this
.
_sortEnginesByDefaults
(
Array
.
from
(
this
.
_engines
.
values
(
)
)
)
)
;
}
_sortEnginesByDefaults
(
engines
)
{
const
sortedEngines
=
[
]
;
const
addedEngines
=
new
Set
(
)
;
function
maybeAddEngineToSort
(
engine
)
{
if
(
!
engine
|
|
addedEngines
.
has
(
engine
.
name
)
)
{
return
;
}
sortedEngines
.
push
(
engine
)
;
addedEngines
.
add
(
engine
.
name
)
;
}
const
originalDefault
=
this
.
originalDefaultEngine
;
maybeAddEngineToSort
(
originalDefault
)
;
const
originalPrivateDefault
=
this
.
originalPrivateDefaultEngine
;
if
(
originalPrivateDefault
&
&
originalPrivateDefault
!
=
originalDefault
)
{
maybeAddEngineToSort
(
originalPrivateDefault
)
;
}
let
remainingEngines
;
const
collator
=
new
Intl
.
Collator
(
)
;
remainingEngines
=
engines
.
filter
(
e
=
>
!
addedEngines
.
has
(
e
.
name
)
)
;
remainingEngines
.
sort
(
(
a
b
)
=
>
{
if
(
a
.
_orderHint
&
&
b
.
_orderHint
)
{
if
(
a
.
_orderHint
=
=
b
.
_orderHint
)
{
return
collator
.
compare
(
a
.
name
b
.
name
)
;
}
return
b
.
_orderHint
-
a
.
_orderHint
;
}
if
(
a
.
_orderHint
)
{
return
-
1
;
}
if
(
b
.
_orderHint
)
{
return
1
;
}
return
collator
.
compare
(
a
.
name
b
.
name
)
;
}
)
;
return
[
.
.
.
sortedEngines
.
.
.
remainingEngines
]
;
}
get
_sortedVisibleEngines
(
)
{
this
.
__sortedVisibleEngines
=
this
.
_sortedEngines
.
filter
(
engine
=
>
!
engine
.
hidden
)
;
return
this
.
__sortedVisibleEngines
;
}
async
init
(
)
{
logConsole
.
debug
(
"
init
"
)
;
if
(
this
.
_initStarted
)
{
return
this
.
_initObservers
.
promise
;
}
TelemetryStopwatch
.
start
(
"
SEARCH_SERVICE_INIT_MS
"
)
;
this
.
_initStarted
=
true
;
try
{
await
this
.
_init
(
)
;
TelemetryStopwatch
.
finish
(
"
SEARCH_SERVICE_INIT_MS
"
)
;
}
catch
(
ex
)
{
TelemetryStopwatch
.
cancel
(
"
SEARCH_SERVICE_INIT_MS
"
)
;
this
.
_initObservers
.
reject
(
ex
.
result
)
;
throw
ex
;
}
if
(
!
Components
.
isSuccessCode
(
this
.
_initRV
)
)
{
throw
Components
.
Exception
(
"
SearchService
initialization
failed
"
this
.
_initRV
)
;
}
else
if
(
this
.
_startupRemovedExtensions
.
size
)
{
Services
.
tm
.
dispatchToMainThread
(
async
(
)
=
>
{
logConsole
.
debug
(
"
Removing
delayed
extension
engines
"
)
;
for
(
let
id
of
this
.
_startupRemovedExtensions
)
{
for
(
let
engine
of
this
.
_getEnginesByExtensionID
(
id
)
)
{
if
(
!
engine
.
isAppProvided
)
{
await
this
.
removeEngine
(
engine
)
;
}
}
}
this
.
_startupRemovedExtensions
.
clear
(
)
;
}
)
;
}
return
this
.
_initRV
;
}
get
isInitialized
(
)
{
return
this
.
_initialized
;
}
async
runBackgroundChecks
(
)
{
await
this
.
init
(
)
;
await
this
.
_migrateLegacyEngines
(
)
;
await
this
.
_checkWebExtensionEngines
(
)
;
}
async
_migrateLegacyEngines
(
)
{
logConsole
.
debug
(
"
Running
migrate
legacy
engines
"
)
;
const
matchRegExp
=
/
extensions
\
/
(
.
*
?
)
\
.
xpi
!
/
i
;
for
(
let
engine
of
this
.
_engines
.
values
(
)
)
{
if
(
!
engine
.
isAppProvided
&
&
!
engine
.
_extensionID
&
&
engine
.
_loadPath
.
includes
(
"
[
profile
]
/
extensions
/
"
)
)
{
let
match
=
engine
.
_loadPath
.
match
(
matchRegExp
)
;
if
(
match
?
.
[
1
]
)
{
let
engines
=
await
this
.
getEnginesByExtensionID
(
match
[
1
]
)
;
if
(
engines
.
length
)
{
logConsole
.
debug
(
Migrating
{
engine
.
name
}
to
WebExtension
install
)
;
if
(
this
.
defaultEngine
=
=
engine
)
{
this
.
defaultEngine
=
engines
[
0
]
;
}
await
this
.
removeEngine
(
engine
)
;
}
}
}
}
logConsole
.
debug
(
"
Migrate
legacy
engines
complete
"
)
;
}
async
_checkWebExtensionEngines
(
)
{
logConsole
.
debug
(
"
Running
check
on
WebExtension
engines
"
)
;
for
(
let
engine
of
this
.
_engines
.
values
(
)
)
{
if
(
engine
.
isAppProvided
|
|
!
engine
.
_extensionID
|
|
engine
.
_extensionID
=
=
"
set
-
via
-
policy
"
|
|
engine
.
_extensionID
=
=
"
set
-
via
-
user
"
)
{
continue
;
}
let
addon
=
await
AddonManager
.
getAddonByID
(
engine
.
_extensionID
)
;
if
(
!
addon
)
{
logConsole
.
debug
(
Add
-
on
{
engine
.
_extensionID
}
for
search
engine
{
engine
.
name
}
is
not
installed
!
)
;
Services
.
telemetry
.
keyedScalarSet
(
"
browser
.
searchinit
.
engine_invalid_webextension
"
engine
.
_extensionID
1
)
;
}
else
if
(
!
addon
.
isActive
)
{
logConsole
.
debug
(
Add
-
on
{
engine
.
_extensionID
}
for
search
engine
{
engine
.
name
}
is
not
active
!
)
;
Services
.
telemetry
.
keyedScalarSet
(
"
browser
.
searchinit
.
engine_invalid_webextension
"
engine
.
_extensionID
2
)
;
}
else
{
let
policy
=
await
this
.
_getExtensionPolicy
(
engine
.
_extensionID
)
;
let
providerSettings
=
policy
.
extension
.
manifest
?
.
chrome_settings_overrides
?
.
search_provider
;
if
(
!
providerSettings
)
{
logConsole
.
debug
(
Add
-
on
{
engine
.
_extensionID
}
for
search
engine
{
engine
.
name
}
no
longer
has
an
engine
defined
)
;
Services
.
telemetry
.
keyedScalarSet
(
"
browser
.
searchinit
.
engine_invalid_webextension
"
engine
.
_extensionID
4
)
;
}
else
if
(
engine
.
name
!
=
providerSettings
.
name
)
{
logConsole
.
debug
(
Add
-
on
{
engine
.
_extensionID
}
for
search
engine
{
engine
.
name
}
has
a
different
name
!
)
;
Services
.
telemetry
.
keyedScalarSet
(
"
browser
.
searchinit
.
engine_invalid_webextension
"
engine
.
_extensionID
5
)
;
}
else
if
(
!
engine
.
checkSearchUrlMatchesManifest
(
providerSettings
)
)
{
logConsole
.
debug
(
Add
-
on
{
engine
.
_extensionID
}
for
search
engine
{
engine
.
name
}
has
out
-
of
-
date
manifest
!
)
;
Services
.
telemetry
.
keyedScalarSet
(
"
browser
.
searchinit
.
engine_invalid_webextension
"
engine
.
_extensionID
6
)
;
}
}
}
logConsole
.
debug
(
"
WebExtension
engine
check
complete
"
)
;
}
async
getEngines
(
)
{
await
this
.
init
(
)
;
logConsole
.
debug
(
"
getEngines
:
getting
all
engines
"
)
;
return
this
.
_sortedEngines
;
}
async
getVisibleEngines
(
)
{
await
this
.
init
(
true
)
;
logConsole
.
debug
(
"
getVisibleEngines
:
getting
all
visible
engines
"
)
;
return
this
.
_sortedVisibleEngines
;
}
async
getAppProvidedEngines
(
)
{
await
this
.
init
(
)
;
return
this
.
_sortEnginesByDefaults
(
this
.
_sortedEngines
.
filter
(
e
=
>
e
.
isAppProvided
)
)
;
}
async
getEnginesByExtensionID
(
extensionID
)
{
await
this
.
init
(
)
;
return
this
.
_getEnginesByExtensionID
(
extensionID
)
;
}
_getEnginesByExtensionID
(
extensionID
)
{
logConsole
.
debug
(
"
getEngines
:
getting
all
engines
for
"
extensionID
)
;
var
engines
=
this
.
_sortedEngines
.
filter
(
function
(
engine
)
{
return
engine
.
_extensionID
=
=
extensionID
;
}
)
;
return
engines
;
}
getEngineByName
(
engineName
)
{
this
.
_ensureInitialized
(
)
;
return
this
.
_engines
.
get
(
engineName
)
|
|
null
;
}
async
getEngineByAlias
(
alias
)
{
await
this
.
init
(
)
;
for
(
var
engine
of
this
.
_engines
.
values
(
)
)
{
if
(
engine
&
&
engine
.
aliases
.
includes
(
alias
)
)
{
return
engine
;
}
}
return
null
;
}
_getEngineByWebExtensionDetails
(
details
)
{
for
(
const
engine
of
this
.
_engines
.
values
(
)
)
{
if
(
engine
.
_extensionID
=
=
details
.
id
&
&
engine
.
_locale
=
=
details
.
locale
)
{
return
engine
;
}
}
return
null
;
}
async
addPolicyEngine
(
details
)
{
await
this
.
_createAndAddEngine
(
{
extensionID
:
"
set
-
via
-
policy
"
extensionBaseURI
:
"
"
isAppProvided
:
false
manifest
:
details
}
)
;
}
async
addUserEngine
(
name
url
alias
)
{
await
this
.
_createAndAddEngine
(
{
extensionID
:
"
set
-
via
-
user
"
extensionBaseURI
:
"
"
isAppProvided
:
false
manifest
:
{
chrome_settings_overrides
:
{
search_provider
:
{
name
search_url
:
encodeURI
(
url
)
keyword
:
alias
}
}
}
}
)
;
}
async
_createAndAddEngine
(
{
extensionID
extensionBaseURI
isAppProvided
manifest
locale
=
SearchUtils
.
DEFAULT_TAG
initEngine
=
false
}
)
{
if
(
!
extensionID
)
{
throw
Components
.
Exception
(
"
Empty
extensionID
passed
to
_createAndAddEngine
!
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
let
searchProvider
=
manifest
.
chrome_settings_overrides
.
search_provider
;
let
name
=
searchProvider
.
name
.
trim
(
)
;
logConsole
.
debug
(
"
_createAndAddEngine
:
Adding
"
name
)
;
let
isCurrent
=
false
;
if
(
!
this
.
_initialized
&
&
!
isAppProvided
&
&
!
initEngine
)
{
await
this
.
init
(
)
;
}
if
(
extensionID
&
&
!
extensionID
.
startsWith
(
"
set
-
via
"
)
)
{
for
(
let
engine
of
this
.
_engines
.
values
(
)
)
{
if
(
!
engine
.
extensionID
&
&
engine
.
_loadPath
.
startsWith
(
jar
:
[
profile
]
/
extensions
/
{
extensionID
}
)
)
{
logConsole
.
debug
(
"
Migrating
existing
engine
"
)
;
isCurrent
=
isCurrent
|
|
this
.
defaultEngine
=
=
engine
;
await
this
.
removeEngine
(
engine
)
;
}
}
}
let
existingEngine
=
this
.
_engines
.
get
(
name
)
;
if
(
existingEngine
)
{
throw
Components
.
Exception
(
"
An
engine
with
that
name
already
exists
!
"
Cr
.
NS_ERROR_FILE_ALREADY_EXISTS
)
;
}
let
newEngine
=
new
SearchEngine
(
{
name
isAppProvided
loadPath
:
[
other
]
addEngineWithDetails
:
{
extensionID
}
}
)
;
newEngine
.
_initFromManifest
(
extensionID
extensionBaseURI
manifest
locale
)
;
this
.
_addEngineToStore
(
newEngine
)
;
if
(
isCurrent
)
{
this
.
defaultEngine
=
newEngine
;
}
return
newEngine
;
}
async
addEnginesFromExtension
(
extension
)
{
logConsole
.
debug
(
"
addEnginesFromExtension
:
"
+
extension
.
id
)
;
if
(
extension
.
startupReason
=
=
"
ADDON_UPGRADE
"
|
|
extension
.
startupReason
=
=
"
ADDON_DOWNGRADE
"
)
{
let
existing
=
await
this
.
_upgradeExtensionEngine
(
extension
)
;
if
(
existing
?
.
length
)
{
return
existing
;
}
}
if
(
extension
.
isAppProvided
)
{
if
(
this
.
_initialized
&
&
!
this
.
_reloadingEngines
)
{
let
{
engines
}
=
await
this
.
_fetchEngineSelectorEngines
(
)
;
let
inConfig
=
engines
.
filter
(
el
=
>
el
.
webExtension
.
id
=
=
extension
.
id
)
;
if
(
inConfig
.
length
)
{
return
this
.
_installExtensionEngine
(
extension
inConfig
.
map
(
el
=
>
el
.
webExtension
.
locale
)
)
;
}
}
logConsole
.
debug
(
"
addEnginesFromExtension
:
Ignoring
builtIn
engine
.
"
)
;
return
[
]
;
}
if
(
!
this
.
_initialized
)
{
this
.
_startupExtensions
.
add
(
extension
)
;
return
[
]
;
}
return
this
.
_installExtensionEngine
(
extension
[
SearchUtils
.
DEFAULT_TAG
]
)
;
}
async
_upgradeExtensionEngine
(
extension
)
{
let
{
engines
}
=
await
this
.
_fetchEngineSelectorEngines
(
)
;
let
extensionEngines
=
await
this
.
getEnginesByExtensionID
(
extension
.
id
)
;
for
(
let
engine
of
extensionEngines
)
{
let
manifest
=
extension
.
manifest
;
let
locale
=
engine
.
_locale
|
|
SearchUtils
.
DEFAULT_TAG
;
if
(
locale
!
=
SearchUtils
.
DEFAULT_TAG
)
{
manifest
=
await
extension
.
getLocalizedManifest
(
locale
)
;
}
let
configuration
=
engines
.
find
(
e
=
>
e
.
webExtension
.
id
=
=
extension
.
id
&
&
e
.
webExtension
.
locale
=
=
locale
)
?
?
{
}
;
let
originalName
=
engine
.
name
;
let
name
=
manifest
.
chrome_settings_overrides
.
search_provider
.
name
.
trim
(
)
;
if
(
originalName
!
=
name
&
&
this
.
_engines
.
has
(
name
)
)
{
throw
new
Error
(
"
Can
'
t
upgrade
to
the
same
name
as
an
existing
engine
"
)
;
}
let
isDefault
=
engine
=
=
this
.
defaultEngine
;
let
isDefaultPrivate
=
engine
=
=
this
.
defaultPrivateEngine
;
engine
.
_updateFromManifest
(
extension
.
id
extension
.
baseURI
manifest
locale
configuration
)
;
if
(
originalName
!
=
engine
.
name
)
{
this
.
_engines
.
delete
(
originalName
)
;
this
.
_engines
.
set
(
engine
.
name
engine
)
;
if
(
isDefault
)
{
this
.
_settings
.
setVerifiedAttribute
(
"
current
"
engine
.
name
)
;
}
if
(
isDefaultPrivate
)
{
this
.
_settings
.
setVerifiedAttribute
(
"
private
"
engine
.
name
)
;
}
this
.
__sortedEngines
=
null
;
}
}
return
extensionEngines
;
}
async
makeEngineFromConfig
(
config
)
{
logConsole
.
debug
(
"
makeEngineFromConfig
:
"
config
)
;
let
policy
=
await
this
.
_getExtensionPolicy
(
config
.
webExtension
.
id
)
;
let
locale
=
"
locale
"
in
config
.
webExtension
?
config
.
webExtension
.
locale
:
SearchUtils
.
DEFAULT_TAG
;
let
manifest
=
policy
.
extension
.
manifest
;
if
(
locale
!
=
SearchUtils
.
DEFAULT_TAG
)
{
manifest
=
await
policy
.
extension
.
getLocalizedManifest
(
locale
)
;
}
let
engine
=
new
SearchEngine
(
{
name
:
manifest
.
chrome_settings_overrides
.
search_provider
.
name
.
trim
(
)
isAppProvided
:
policy
.
extension
.
isAppProvided
loadPath
:
[
other
]
addEngineWithDetails
:
{
policy
.
extension
.
id
}
}
)
;
engine
.
_initFromManifest
(
policy
.
extension
.
id
policy
.
extension
.
baseURI
manifest
locale
config
)
;
return
engine
;
}
async
_installExtensionEngine
(
extension
locales
initEngine
=
false
)
{
logConsole
.
debug
(
"
installExtensionEngine
:
"
extension
.
id
)
;
let
installLocale
=
async
locale
=
>
{
let
manifest
=
locale
=
=
SearchUtils
.
DEFAULT_TAG
?
extension
.
manifest
:
await
extension
.
getLocalizedManifest
(
locale
)
;
return
this
.
_addEngineForManifest
(
extension
manifest
locale
initEngine
)
;
}
;
let
engines
=
[
]
;
for
(
let
locale
of
locales
)
{
logConsole
.
debug
(
"
addEnginesFromExtension
:
installing
:
"
extension
.
id
"
:
"
locale
)
;
engines
.
push
(
await
installLocale
(
locale
)
)
;
}
return
engines
;
}
async
_addEngineForManifest
(
extension
manifest
locale
=
SearchUtils
.
DEFAULT_TAG
initEngine
=
false
)
{
if
(
extension
.
startupReason
=
=
"
APP_STARTUP
"
)
{
let
engine
=
this
.
_getEngineByWebExtensionDetails
(
{
id
:
extension
.
id
locale
}
)
;
if
(
engine
)
{
logConsole
.
debug
(
"
Engine
already
loaded
via
settings
skipping
due
to
APP_STARTUP
:
"
extension
.
id
)
;
return
engine
;
}
}
return
this
.
_createAndAddEngine
(
{
extensionID
:
extension
.
id
extensionBaseURI
:
extension
.
baseURI
isAppProvided
:
extension
.
isAppProvided
manifest
locale
initEngine
}
)
;
}
async
addOpenSearchEngine
(
engineURL
iconURL
)
{
logConsole
.
debug
(
"
addEngine
:
Adding
"
engineURL
)
;
await
this
.
init
(
)
;
let
errCode
;
try
{
var
engine
=
new
OpenSearchEngine
(
)
;
engine
.
_setIcon
(
iconURL
false
)
;
errCode
=
await
new
Promise
(
resolve
=
>
{
engine
.
_install
(
engineURL
errorCode
=
>
{
resolve
(
errorCode
)
;
}
)
;
}
)
;
if
(
errCode
)
{
throw
errCode
;
}
}
catch
(
ex
)
{
throw
Components
.
Exception
(
"
addEngine
:
Error
adding
engine
:
\
n
"
+
ex
errCode
|
|
Cr
.
NS_ERROR_FAILURE
)
;
}
return
engine
;
}
async
removeWebExtensionEngine
(
id
)
{
if
(
!
this
.
isInitialized
)
{
logConsole
.
debug
(
"
Delaying
removing
extension
engine
on
startup
:
"
id
)
;
this
.
_startupRemovedExtensions
.
add
(
id
)
;
return
;
}
logConsole
.
debug
(
"
removeWebExtensionEngine
:
"
id
)
;
for
(
let
engine
of
this
.
_getEnginesByExtensionID
(
id
)
)
{
await
this
.
removeEngine
(
engine
)
;
}
}
async
removeEngine
(
engine
)
{
await
this
.
init
(
)
;
if
(
!
engine
)
{
throw
Components
.
Exception
(
"
no
engine
passed
to
removeEngine
!
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
var
engineToRemove
=
null
;
for
(
var
e
of
this
.
_engines
.
values
(
)
)
{
if
(
engine
.
wrappedJSObject
=
=
e
)
{
engineToRemove
=
e
;
}
}
if
(
!
engineToRemove
)
{
throw
Components
.
Exception
(
"
removeEngine
:
Can
'
t
find
engine
to
remove
!
"
Cr
.
NS_ERROR_FILE_NOT_FOUND
)
;
}
if
(
engineToRemove
=
=
this
.
defaultEngine
)
{
this
.
_findAndSetNewDefaultEngine
(
{
privateMode
:
false
excludeEngineName
:
engineToRemove
.
name
}
)
;
}
if
(
this
.
_separatePrivateDefault
&
&
engineToRemove
=
=
this
.
defaultPrivateEngine
)
{
this
.
_findAndSetNewDefaultEngine
(
{
privateMode
:
true
excludeEngineName
:
engineToRemove
.
name
}
)
;
}
if
(
engineToRemove
.
_isAppProvided
)
{
engineToRemove
.
hidden
=
true
;
engineToRemove
.
alias
=
null
;
}
else
{
if
(
engineToRemove
.
_filePath
)
{
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
persistentDescriptor
=
engineToRemove
.
_filePath
;
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
engineToRemove
.
_filePath
=
null
;
}
this
.
_internalRemoveEngine
(
engineToRemove
)
;
if
(
!
this
.
_dontSetUseSavedOrder
)
{
this
.
_saveSortedEngineList
(
)
;
}
}
SearchUtils
.
notifyAction
(
engineToRemove
SearchUtils
.
MODIFIED_TYPE
.
REMOVED
)
;
}
_internalRemoveEngine
(
engine
)
{
if
(
this
.
__sortedEngines
)
{
var
index
=
this
.
__sortedEngines
.
indexOf
(
engine
)
;
if
(
index
=
=
-
1
)
{
throw
Components
.
Exception
(
"
Can
'
t
find
engine
to
remove
in
_sortedEngines
!
"
Cr
.
NS_ERROR_FAILURE
)
;
}
this
.
__sortedEngines
.
splice
(
index
1
)
;
}
this
.
_engines
.
delete
(
engine
.
name
)
;
}
async
moveEngine
(
engine
newIndex
)
{
await
this
.
init
(
)
;
if
(
newIndex
>
this
.
_sortedEngines
.
length
|
|
newIndex
<
0
)
{
throw
Components
.
Exception
(
"
moveEngine
:
Index
out
of
bounds
!
"
)
;
}
if
(
!
(
engine
instanceof
Ci
.
nsISearchEngine
)
&
&
!
(
engine
instanceof
SearchEngine
)
)
{
throw
Components
.
Exception
(
"
moveEngine
:
Invalid
engine
passed
to
moveEngine
!
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
if
(
engine
.
hidden
)
{
throw
Components
.
Exception
(
"
moveEngine
:
Can
'
t
move
a
hidden
engine
!
"
Cr
.
NS_ERROR_FAILURE
)
;
}
engine
=
engine
.
wrappedJSObject
;
var
currentIndex
=
this
.
_sortedEngines
.
indexOf
(
engine
)
;
if
(
currentIndex
=
=
-
1
)
{
throw
Components
.
Exception
(
"
moveEngine
:
Can
'
t
find
engine
to
move
!
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
var
newIndexEngine
=
this
.
_sortedVisibleEngines
[
newIndex
]
;
if
(
!
newIndexEngine
)
{
throw
Components
.
Exception
(
"
moveEngine
:
Can
'
t
find
engine
to
replace
!
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
for
(
var
i
=
0
;
i
<
this
.
_sortedEngines
.
length
;
+
+
i
)
{
if
(
newIndexEngine
=
=
this
.
_sortedEngines
[
i
]
)
{
break
;
}
if
(
this
.
_sortedEngines
[
i
]
.
hidden
)
{
newIndex
+
+
;
}
}
if
(
currentIndex
=
=
newIndex
)
{
return
;
}
var
movedEngine
=
this
.
__sortedEngines
.
splice
(
currentIndex
1
)
[
0
]
;
this
.
__sortedEngines
.
splice
(
newIndex
0
movedEngine
)
;
SearchUtils
.
notifyAction
(
engine
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
)
;
this
.
_saveSortedEngineList
(
)
;
}
restoreDefaultEngines
(
)
{
this
.
_ensureInitialized
(
)
;
for
(
let
e
of
this
.
_engines
.
values
(
)
)
{
if
(
e
.
hidden
&
&
e
.
isAppProvided
)
{
e
.
hidden
=
false
;
}
}
}
_findAndSetNewDefaultEngine
(
{
privateMode
excludeEngineName
=
"
"
}
)
{
const
currentEngineProp
=
privateMode
?
"
_currentPrivateEngine
"
:
"
_currentEngine
"
;
let
newDefault
=
privateMode
?
this
.
originalPrivateDefaultEngine
:
this
.
originalDefaultEngine
;
if
(
!
newDefault
|
|
newDefault
.
hidden
|
|
newDefault
.
name
=
=
excludeEngineName
)
{
let
sortedEngines
=
this
.
_sortedVisibleEngines
;
let
generalSearchEngines
=
sortedEngines
.
filter
(
e
=
>
e
.
isGeneralPurposeEngine
)
;
let
firstVisible
=
generalSearchEngines
.
find
(
e
=
>
e
.
name
!
=
excludeEngineName
)
;
if
(
firstVisible
)
{
newDefault
=
firstVisible
;
}
else
if
(
newDefault
)
{
if
(
newDefault
.
name
!
=
excludeEngineName
)
{
newDefault
.
hidden
=
false
;
}
else
{
newDefault
=
null
;
}
}
if
(
!
newDefault
)
{
if
(
!
firstVisible
)
{
sortedEngines
=
this
.
_sortedEngines
;
firstVisible
=
sortedEngines
.
find
(
e
=
>
e
.
isGeneralPurposeEngine
)
;
if
(
!
firstVisible
)
{
firstVisible
=
sortedEngines
[
0
]
;
}
}
if
(
firstVisible
)
{
firstVisible
.
hidden
=
false
;
newDefault
=
firstVisible
;
}
}
}
if
(
!
newDefault
)
{
logConsole
.
error
(
"
Could
not
find
a
replacement
default
engine
.
"
)
;
return
null
;
}
if
(
privateMode
)
{
this
.
defaultPrivateEngine
=
newDefault
;
}
else
{
this
.
defaultEngine
=
newDefault
;
}
return
this
[
currentEngineProp
]
;
}
_getEngineDefault
(
privateMode
)
{
this
.
_ensureInitialized
(
)
;
const
currentEngineProp
=
privateMode
?
"
_currentPrivateEngine
"
:
"
_currentEngine
"
;
if
(
this
[
currentEngineProp
]
&
&
!
this
[
currentEngineProp
]
.
hidden
)
{
return
this
[
currentEngineProp
]
;
}
const
attributeName
=
privateMode
?
"
private
"
:
"
current
"
;
let
name
=
this
.
_settings
.
getAttribute
(
attributeName
)
;
let
engine
=
this
.
getEngineByName
(
name
)
;
if
(
engine
&
&
(
engine
.
isAppProvided
|
|
this
.
_settings
.
getVerifiedAttribute
(
attributeName
)
)
)
{
this
[
currentEngineProp
]
=
engine
;
}
if
(
!
name
)
{
this
[
currentEngineProp
]
=
privateMode
?
this
.
originalPrivateDefaultEngine
:
this
.
originalDefaultEngine
;
}
if
(
this
[
currentEngineProp
]
&
&
!
this
[
currentEngineProp
]
.
hidden
)
{
return
this
[
currentEngineProp
]
;
}
return
this
.
_findAndSetNewDefaultEngine
(
{
privateMode
}
)
;
}
_setEngineDefault
(
privateMode
newEngine
)
{
this
.
_ensureInitialized
(
)
;
if
(
!
(
newEngine
instanceof
Ci
.
nsISearchEngine
)
&
&
!
(
newEngine
instanceof
SearchEngine
)
)
{
throw
Components
.
Exception
(
"
Invalid
argument
passed
to
defaultEngine
setter
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
const
newCurrentEngine
=
this
.
getEngineByName
(
newEngine
.
name
)
;
if
(
!
newCurrentEngine
)
{
throw
Components
.
Exception
(
"
Can
'
t
find
engine
in
store
!
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
if
(
!
newCurrentEngine
.
isAppProvided
)
{
if
(
!
newCurrentEngine
.
_loadPath
)
{
newCurrentEngine
.
_loadPath
=
"
[
other
]
unknown
"
;
}
let
loadPathHash
=
SearchUtils
.
getVerificationHash
(
newCurrentEngine
.
_loadPath
)
;
let
currentHash
=
newCurrentEngine
.
getAttr
(
"
loadPathHash
"
)
;
if
(
!
currentHash
|
|
currentHash
!
=
loadPathHash
)
{
newCurrentEngine
.
setAttr
(
"
loadPathHash
"
loadPathHash
)
;
SearchUtils
.
notifyAction
(
newCurrentEngine
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
)
;
}
}
const
currentEngine
=
_current
{
privateMode
?
"
Private
"
:
"
"
}
Engine
;
if
(
newCurrentEngine
=
=
this
[
currentEngine
]
)
{
return
;
}
this
[
currentEngine
]
?
.
removeExtensionOverride
(
)
;
this
[
currentEngine
]
=
newCurrentEngine
;
let
newName
=
this
[
currentEngine
]
.
name
;
const
originalDefault
=
privateMode
?
this
.
originalPrivateDefaultEngine
:
this
.
originalDefaultEngine
;
if
(
this
[
currentEngine
]
=
=
originalDefault
)
{
newName
=
"
"
;
}
this
.
_settings
.
setVerifiedAttribute
(
privateMode
?
"
private
"
:
"
current
"
newName
)
;
SearchUtils
.
notifyAction
(
this
[
currentEngine
]
SearchUtils
.
MODIFIED_TYPE
[
privateMode
?
"
DEFAULT_PRIVATE
"
:
"
DEFAULT
"
]
)
;
if
(
!
privateMode
&
&
!
this
.
_separatePrivateDefault
)
{
SearchUtils
.
notifyAction
(
this
[
currentEngine
]
SearchUtils
.
MODIFIED_TYPE
.
DEFAULT_PRIVATE
)
;
}
}
get
defaultEngine
(
)
{
return
this
.
_getEngineDefault
(
false
)
;
}
set
defaultEngine
(
newEngine
)
{
this
.
_setEngineDefault
(
false
newEngine
)
;
}
get
defaultPrivateEngine
(
)
{
return
this
.
_getEngineDefault
(
this
.
_separatePrivateDefault
)
;
}
set
defaultPrivateEngine
(
newEngine
)
{
if
(
!
this
.
_separatePrivateDefaultPrefValue
)
{
Services
.
prefs
.
setBoolPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
separatePrivateDefault
"
true
)
;
}
this
.
_setEngineDefault
(
this
.
_separatePrivateDefault
newEngine
)
;
}
async
getDefault
(
)
{
await
this
.
init
(
)
;
return
this
.
defaultEngine
;
}
async
setDefault
(
engine
)
{
await
this
.
init
(
)
;
return
(
this
.
defaultEngine
=
engine
)
;
}
async
getDefaultPrivate
(
)
{
await
this
.
init
(
)
;
return
this
.
defaultPrivateEngine
;
}
async
setDefaultPrivate
(
engine
)
{
await
this
.
init
(
)
;
return
(
this
.
defaultPrivateEngine
=
engine
)
;
}
_onSeparateDefaultPrefChanged
(
)
{
this
.
__sortedEngines
=
null
;
if
(
this
.
defaultEngine
!
=
this
.
_getEngineDefault
(
true
)
)
{
SearchUtils
.
notifyAction
(
this
.
defaultPrivateEngine
SearchUtils
.
MODIFIED_TYPE
.
DEFAULT_PRIVATE
)
;
}
}
async
_getEngineInfo
(
engine
)
{
if
(
!
engine
)
{
Cu
.
reportError
(
"
getDefaultEngineInfo
:
No
default
engine
"
)
;
return
[
"
NONE
"
{
name
:
"
NONE
"
}
]
;
}
const
engineData
=
{
loadPath
:
engine
.
_loadPath
name
:
engine
.
name
?
engine
.
name
:
"
"
}
;
if
(
engine
.
isAppProvided
)
{
engineData
.
origin
=
"
default
"
;
}
else
{
let
currentHash
=
engine
.
getAttr
(
"
loadPathHash
"
)
;
if
(
!
currentHash
)
{
engineData
.
origin
=
"
unverified
"
;
}
else
{
let
loadPathHash
=
SearchUtils
.
getVerificationHash
(
engine
.
_loadPath
)
;
engineData
.
origin
=
currentHash
=
=
loadPathHash
?
"
verified
"
:
"
invalid
"
;
}
}
let
sendSubmissionURL
=
engine
.
isAppProvided
;
if
(
!
sendSubmissionURL
)
{
let
engineHost
=
engine
.
_getURLOfType
(
SearchUtils
.
URL_TYPE
.
SEARCH
)
.
templateHost
;
for
(
let
innerEngine
of
this
.
_engines
.
values
(
)
)
{
if
(
!
innerEngine
.
isAppProvided
)
{
continue
;
}
let
innerEngineURL
=
innerEngine
.
_getURLOfType
(
SearchUtils
.
URL_TYPE
.
SEARCH
)
;
if
(
innerEngineURL
.
templateHost
=
=
engineHost
)
{
sendSubmissionURL
=
true
;
break
;
}
}
if
(
!
sendSubmissionURL
)
{
const
urlTest
=
/
^
(
?
:
www
\
.
google
\
.
|
search
\
.
aol
\
.
|
yandex
\
.
)
|
(
?
:
search
\
.
yahoo
|
\
.
ask
|
\
.
bing
|
\
.
startpage
|
\
.
baidu
|
duckduckgo
)
\
.
com
/
;
sendSubmissionURL
=
urlTest
.
test
(
engineHost
)
;
}
}
if
(
sendSubmissionURL
)
{
let
uri
=
engine
.
_getURLOfType
(
"
text
/
html
"
)
.
getSubmission
(
"
"
engine
"
searchbar
"
)
.
uri
;
uri
=
uri
.
mutate
(
)
.
setUserPass
(
"
"
)
.
finalize
(
)
;
engineData
.
submissionURL
=
uri
.
spec
;
}
return
[
engine
.
telemetryId
engineData
]
;
}
async
getDefaultEngineInfo
(
)
{
let
[
telemetryId
defaultSearchEngineData
]
=
await
this
.
_getEngineInfo
(
this
.
defaultEngine
)
;
const
result
=
{
defaultSearchEngine
:
telemetryId
defaultSearchEngineData
}
;
if
(
this
.
_separatePrivateDefault
)
{
let
[
privateTelemetryId
defaultPrivateSearchEngineData
]
=
await
this
.
_getEngineInfo
(
this
.
defaultPrivateEngine
)
;
result
.
defaultPrivateSearchEngine
=
privateTelemetryId
;
result
.
defaultPrivateSearchEngineData
=
defaultPrivateSearchEngineData
;
}
return
result
;
}
_parseSubmissionMap
:
null
_buildParseSubmissionMap
(
)
{
this
.
_parseSubmissionMap
=
new
Map
(
)
;
let
keysOfAlternates
=
new
Set
(
)
;
for
(
let
engine
of
this
.
_sortedEngines
)
{
if
(
engine
.
hidden
)
{
continue
;
}
let
urlParsingInfo
=
engine
.
getURLParsingInfo
(
)
;
if
(
!
urlParsingInfo
)
{
continue
;
}
let
mapValueForEngine
=
{
engine
termsParameterName
:
urlParsingInfo
.
termsParameterName
}
;
let
processDomain
=
(
domain
isAlternate
)
=
>
{
let
key
=
domain
+
urlParsingInfo
.
path
;
let
existingEntry
=
this
.
_parseSubmissionMap
.
get
(
key
)
;
if
(
!
existingEntry
)
{
if
(
isAlternate
)
{
keysOfAlternates
.
add
(
key
)
;
}
}
else
if
(
!
isAlternate
&
&
keysOfAlternates
.
has
(
key
)
)
{
keysOfAlternates
.
delete
(
key
)
;
}
else
{
return
;
}
this
.
_parseSubmissionMap
.
set
(
key
mapValueForEngine
)
;
}
;
processDomain
(
urlParsingInfo
.
mainDomain
false
)
;
SearchStaticData
.
getAlternateDomains
(
urlParsingInfo
.
mainDomain
)
.
forEach
(
d
=
>
processDomain
(
d
true
)
)
;
}
}
parseSubmissionURL
(
url
)
{
if
(
!
this
.
_initialized
)
{
return
gEmptyParseSubmissionResult
;
}
if
(
!
this
.
_parseSubmissionMap
)
{
this
.
_buildParseSubmissionMap
(
)
;
}
let
soughtKey
soughtQuery
;
try
{
let
soughtUrl
=
Services
.
io
.
newURI
(
url
)
.
QueryInterface
(
Ci
.
nsIURL
)
;
if
(
soughtUrl
.
scheme
!
=
"
http
"
&
&
soughtUrl
.
scheme
!
=
"
https
"
)
{
return
gEmptyParseSubmissionResult
;
}
soughtKey
=
soughtUrl
.
host
+
soughtUrl
.
filePath
.
toLowerCase
(
)
;
soughtQuery
=
soughtUrl
.
query
;
}
catch
(
ex
)
{
return
gEmptyParseSubmissionResult
;
}
let
mapEntry
=
this
.
_parseSubmissionMap
.
get
(
soughtKey
)
;
if
(
!
mapEntry
)
{
return
gEmptyParseSubmissionResult
;
}
let
encodedTerms
=
null
;
for
(
let
param
of
soughtQuery
.
split
(
"
&
"
)
)
{
let
equalPos
=
param
.
indexOf
(
"
=
"
)
;
if
(
equalPos
!
=
-
1
&
&
param
.
substr
(
0
equalPos
)
=
=
mapEntry
.
termsParameterName
)
{
encodedTerms
=
param
.
substr
(
equalPos
+
1
)
;
break
;
}
}
if
(
encodedTerms
=
=
=
null
)
{
return
gEmptyParseSubmissionResult
;
}
let
length
=
0
;
let
offset
=
url
.
indexOf
(
"
?
"
)
+
1
;
let
query
=
url
.
slice
(
offset
)
;
for
(
let
param
of
query
.
split
(
"
&
"
)
)
{
let
equalPos
=
param
.
indexOf
(
"
=
"
)
;
if
(
equalPos
!
=
-
1
&
&
param
.
substr
(
0
equalPos
)
=
=
mapEntry
.
termsParameterName
)
{
offset
+
=
equalPos
+
1
;
length
=
param
.
length
-
equalPos
-
1
;
break
;
}
offset
+
=
param
.
length
+
1
;
}
let
terms
;
try
{
terms
=
Services
.
textToSubURI
.
UnEscapeAndConvert
(
mapEntry
.
engine
.
queryCharset
encodedTerms
.
replace
(
/
\
+
/
g
"
"
)
)
;
}
catch
(
ex
)
{
return
gEmptyParseSubmissionResult
;
}
let
submission
=
new
ParseSubmissionResult
(
mapEntry
.
engine
terms
mapEntry
.
termsParameterName
offset
length
)
;
return
submission
;
}
async
_getExtensionPolicy
(
id
)
{
let
policy
=
WebExtensionPolicy
.
getByID
(
id
)
;
if
(
!
policy
)
{
let
idPrefix
=
id
.
split
(
"
"
)
[
0
]
;
let
path
=
resource
:
/
/
search
-
extensions
/
{
idPrefix
}
/
;
await
AddonManager
.
installBuiltinAddon
(
path
)
;
policy
=
WebExtensionPolicy
.
getByID
(
id
)
;
}
await
policy
.
readyPromise
;
return
policy
;
}
observe
(
engine
topic
verb
)
{
switch
(
topic
)
{
case
SearchUtils
.
TOPIC_ENGINE_MODIFIED
:
switch
(
verb
)
{
case
SearchUtils
.
MODIFIED_TYPE
.
LOADED
:
engine
=
engine
.
QueryInterface
(
Ci
.
nsISearchEngine
)
;
logConsole
.
debug
(
"
observe
:
Done
installation
of
"
engine
.
name
)
;
this
.
_addEngineToStore
(
engine
.
wrappedJSObject
)
;
break
;
case
SearchUtils
.
MODIFIED_TYPE
.
ADDED
:
case
SearchUtils
.
MODIFIED_TYPE
.
CHANGED
:
case
SearchUtils
.
MODIFIED_TYPE
.
REMOVED
:
this
.
_parseSubmissionMap
=
null
;
break
;
}
break
;
case
"
idle
"
:
{
this
.
idleService
.
removeIdleObserver
(
this
RECONFIG_IDLE_TIME_SEC
)
;
this
.
_queuedIdle
=
false
;
logConsole
.
debug
(
"
Reloading
engines
after
idle
due
to
configuration
change
"
)
;
this
.
_maybeReloadEngines
(
)
.
catch
(
Cu
.
reportError
)
;
break
;
}
case
QUIT_APPLICATION_TOPIC
:
this
.
_removeObservers
(
)
;
break
;
case
TOPIC_LOCALES_CHANGE
:
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
if
(
!
Services
.
startup
.
shuttingDown
)
{
this
.
_maybeReloadEngines
(
)
.
catch
(
Cu
.
reportError
)
;
}
}
)
;
break
;
case
Region
.
REGION_TOPIC
:
logConsole
.
debug
(
"
Region
updated
:
"
Region
.
home
)
;
this
.
_maybeReloadEngines
(
)
.
catch
(
Cu
.
reportError
)
;
break
;
}
}
notify
(
timer
)
{
logConsole
.
debug
(
"
_notify
:
checking
for
updates
"
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
update
"
true
)
)
{
return
;
}
var
currentTime
=
Date
.
now
(
)
;
logConsole
.
debug
(
"
currentTime
:
"
+
currentTime
)
;
for
(
let
e
of
this
.
_engines
.
values
(
)
)
{
let
engine
=
e
.
wrappedJSObject
;
if
(
!
engine
.
_hasUpdates
)
{
continue
;
}
var
expirTime
=
engine
.
getAttr
(
"
updateexpir
"
)
;
logConsole
.
debug
(
engine
.
name
"
expirTime
:
"
expirTime
"
updateURL
:
"
engine
.
_updateURL
"
iconUpdateURL
:
"
engine
.
_iconUpdateURL
)
;
var
engineExpired
=
expirTime
<
=
currentTime
;
if
(
!
expirTime
|
|
!
engineExpired
)
{
logConsole
.
debug
(
"
skipping
engine
"
)
;
continue
;
}
logConsole
.
debug
(
engine
.
name
"
has
expired
"
)
;
engineUpdateService
.
update
(
engine
)
;
engineUpdateService
.
scheduleNextUpdate
(
engine
)
;
}
}
_addObservers
(
)
{
if
(
this
.
_observersAdded
)
{
return
;
}
this
.
_observersAdded
=
true
;
NimbusFeatures
.
search
.
onUpdate
(
(
)
=
>
Services
.
search
.
wrappedJSObject
.
_maybeReloadEngines
(
)
)
;
Services
.
obs
.
addObserver
(
this
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
Services
.
obs
.
addObserver
(
this
QUIT_APPLICATION_TOPIC
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_LOCALES_CHANGE
)
;
this
.
_settings
.
addObservers
(
)
;
let
shutdownState
=
{
step
:
"
Not
started
"
latestError
:
{
message
:
undefined
stack
:
undefined
}
}
;
IOUtils
.
profileBeforeChange
.
addBlocker
(
"
Search
service
:
shutting
down
"
(
)
=
>
(
async
(
)
=
>
{
if
(
!
this
.
_initialized
)
{
logConsole
.
warn
(
"
not
saving
settings
on
shutdown
due
to
initializing
.
"
)
;
return
;
}
try
{
await
this
.
_settings
.
shutdown
(
shutdownState
)
;
}
catch
(
ex
)
{
Promise
.
reject
(
ex
)
;
}
}
)
(
)
(
)
=
>
shutdownState
)
;
}
_observersAdded
:
false
_removeObservers
(
)
{
if
(
this
.
_ignoreListListener
)
{
IgnoreLists
.
unsubscribe
(
this
.
_ignoreListListener
)
;
delete
this
.
_ignoreListListener
;
}
if
(
this
.
_queuedIdle
)
{
this
.
idleService
.
removeIdleObserver
(
this
RECONFIG_IDLE_TIME_SEC
)
;
this
.
_queuedIdle
=
false
;
}
this
.
_settings
.
removeObservers
(
)
;
NimbusFeatures
.
search
.
off
(
(
)
=
>
Services
.
search
.
wrappedJSObject
.
_maybeReloadEngines
(
)
)
;
Services
.
obs
.
removeObserver
(
this
SearchUtils
.
TOPIC_ENGINE_MODIFIED
)
;
Services
.
obs
.
removeObserver
(
this
QUIT_APPLICATION_TOPIC
)
;
Services
.
obs
.
removeObserver
(
this
TOPIC_LOCALES_CHANGE
)
;
Services
.
obs
.
removeObserver
(
this
Region
.
REGION_TOPIC
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsISearchService
"
"
nsIObserver
"
"
nsITimerCallback
"
]
)
}
;
var
engineUpdateService
=
{
scheduleNextUpdate
(
engine
)
{
var
interval
=
engine
.
_updateInterval
|
|
SEARCH_DEFAULT_UPDATE_INTERVAL
;
var
milliseconds
=
interval
*
86400000
;
engine
.
setAttr
(
"
updateexpir
"
Date
.
now
(
)
+
milliseconds
)
;
}
update
(
engine
)
{
engine
=
engine
.
wrappedJSObject
;
logConsole
.
debug
(
"
update
called
for
"
engine
.
_name
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
update
"
true
)
|
|
!
engine
.
_hasUpdates
)
{
return
;
}
let
testEngine
=
null
;
let
updateURL
=
engine
.
_getURLOfType
(
SearchUtils
.
URL_TYPE
.
OPENSEARCH
)
;
let
updateURI
=
updateURL
&
&
updateURL
.
_hasRelation
(
"
self
"
)
?
updateURL
.
getSubmission
(
"
"
engine
)
.
uri
:
SearchUtils
.
makeURI
(
engine
.
_updateURL
)
;
if
(
updateURI
)
{
if
(
engine
.
isAppProvided
&
&
!
updateURI
.
schemeIs
(
"
https
"
)
)
{
logConsole
.
debug
(
"
Invalid
scheme
for
default
engine
update
"
)
;
return
;
}
logConsole
.
debug
(
"
updating
"
engine
.
name
updateURI
.
spec
)
;
testEngine
=
new
OpenSearchEngine
(
)
;
testEngine
.
_engineToUpdate
=
engine
;
try
{
testEngine
.
_install
(
updateURI
)
;
}
catch
(
ex
)
{
logConsole
.
error
(
"
Failed
to
update
"
engine
.
name
ex
)
;
}
}
else
{
logConsole
.
debug
(
"
invalid
updateURI
"
)
;
}
if
(
engine
.
_iconUpdateURL
)
{
(
testEngine
|
|
engine
)
.
_setIcon
(
engine
.
_iconUpdateURL
true
)
;
}
}
}
;
XPCOMUtils
.
defineLazyServiceGetter
(
SearchService
.
prototype
"
idleService
"
"
mozilla
.
org
/
widget
/
useridleservice
;
1
"
"
nsIUserIdleService
"
)
;
class
SearchDefaultOverrideAllowlistHandler
{
constructor
(
listener
)
{
this
.
_remoteConfig
=
RemoteSettings
(
SearchUtils
.
SETTINGS_ALLOWLIST_KEY
)
;
}
async
canOverride
(
extension
appProvidedExtensionId
)
{
const
overrideTable
=
await
this
.
_getAllowlist
(
)
;
let
entry
=
overrideTable
.
find
(
e
=
>
e
.
thirdPartyId
=
=
extension
.
id
)
;
if
(
!
entry
)
{
return
false
;
}
if
(
appProvidedExtensionId
!
=
entry
.
overridesId
)
{
return
false
;
}
let
searchProvider
=
extension
.
manifest
.
chrome_settings_overrides
.
search_provider
;
return
entry
.
urls
.
some
(
e
=
>
searchProvider
.
search_url
=
=
e
.
search_url
&
&
searchProvider
.
search_form
=
=
e
.
search_form
&
&
searchProvider
.
search_url_get_params
=
=
e
.
search_url_get_params
&
&
searchProvider
.
search_url_post_params
=
=
e
.
search_url_post_params
)
;
}
async
_getAllowlist
(
)
{
let
result
=
[
]
;
try
{
result
=
await
this
.
_remoteConfig
.
get
(
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
logConsole
.
debug
(
"
Allow
list
is
:
"
result
)
;
return
result
;
}
}
var
EXPORTED_SYMBOLS
=
[
"
SearchService
"
]
;
