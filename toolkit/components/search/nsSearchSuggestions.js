ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
nsFormAutoCompleteResult
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SearchSuggestionController
"
"
resource
:
/
/
gre
/
modules
/
SearchSuggestionController
.
jsm
"
)
;
function
SuggestAutoComplete
(
)
{
this
.
_init
(
)
;
}
SuggestAutoComplete
.
prototype
=
{
_init
(
)
{
this
.
_suggestionController
=
new
SearchSuggestionController
(
obj
=
>
this
.
onResultsReturned
(
obj
)
)
;
this
.
_suggestionController
.
maxLocalResults
=
this
.
_historyLimit
;
}
_listener
:
null
_historyLimit
:
7
onResultsReturned
(
results
)
{
let
finalResults
=
[
]
;
let
finalComments
=
[
]
;
for
(
let
i
=
0
;
i
<
results
.
local
.
length
;
+
+
i
)
{
finalResults
.
push
(
results
.
local
[
i
]
)
;
finalComments
.
push
(
"
"
)
;
}
if
(
results
.
remote
.
length
)
{
let
comments
=
new
Array
(
results
.
remote
.
length
)
.
fill
(
"
"
)
;
finalResults
=
finalResults
.
concat
(
results
.
remote
)
;
finalComments
=
finalComments
.
concat
(
comments
)
;
}
this
.
onResultsReady
(
results
.
term
finalResults
finalComments
results
.
formHistoryResult
)
;
}
onResultsReady
(
searchString
results
comments
formHistoryResult
)
{
if
(
this
.
_listener
)
{
let
labels
=
results
.
slice
(
)
;
let
result
=
new
FormAutoCompleteResult
(
searchString
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
0
"
"
results
labels
comments
formHistoryResult
)
;
this
.
_listener
.
onSearchResult
(
this
result
)
;
this
.
_listener
=
null
;
}
}
startSearch
(
searchString
searchParam
previousResult
listener
)
{
if
(
!
previousResult
)
this
.
_formHistoryResult
=
null
;
var
formHistorySearchParam
=
searchParam
.
split
(
"
|
"
)
[
0
]
;
var
privacyMode
=
(
searchParam
.
split
(
"
|
"
)
[
1
]
=
=
"
private
"
)
;
if
(
Services
.
search
.
isInitialized
)
{
this
.
_triggerSearch
(
searchString
formHistorySearchParam
listener
privacyMode
)
;
return
;
}
Services
.
search
.
init
(
aResult
=
>
{
if
(
!
Components
.
isSuccessCode
(
aResult
)
)
{
Cu
.
reportError
(
"
Could
not
initialize
search
service
bailing
out
:
"
+
aResult
)
;
return
;
}
this
.
_triggerSearch
(
searchString
formHistorySearchParam
listener
privacyMode
)
;
}
)
;
}
_triggerSearch
(
searchString
searchParam
listener
privacyMode
)
{
this
.
_listener
=
listener
;
this
.
_suggestionController
.
fetch
(
searchString
privacyMode
Services
.
search
.
defaultEngine
)
;
}
stopSearch
(
)
{
this
.
_suggestionController
.
stop
(
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteSearch
Ci
.
nsIAutoCompleteObserver
]
)
}
;
function
SearchSuggestAutoComplete
(
)
{
this
.
_init
(
)
;
}
SearchSuggestAutoComplete
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
aa892eb4
-
ffbf
-
477d
-
9f9a
-
06c995ae9f27
}
"
)
__proto__
:
SuggestAutoComplete
.
prototype
serviceURL
:
"
"
}
;
var
component
=
[
SearchSuggestAutoComplete
]
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
component
)
;
