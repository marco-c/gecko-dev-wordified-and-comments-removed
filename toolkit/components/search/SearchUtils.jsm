"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SearchUtils
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logConsole
"
(
)
=
>
{
return
console
.
createInstance
(
{
prefix
:
"
SearchUtils
"
maxLogLevel
:
SearchUtils
.
loggingEnabled
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
const
BROWSER_SEARCH_PREF
=
"
browser
.
search
.
"
;
class
LoadListener
{
_bytes
=
[
]
;
_callback
=
null
;
_channel
=
null
;
_countRead
=
0
;
_engine
=
null
;
_stream
=
null
;
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIRequestObserver
Ci
.
nsIStreamListener
Ci
.
nsIChannelEventSink
Ci
.
nsIInterfaceRequestor
Ci
.
nsIProgressEventSink
]
)
;
constructor
(
channel
engine
callback
)
{
this
.
_channel
=
channel
;
this
.
_engine
=
engine
;
this
.
_callback
=
callback
;
}
onStartRequest
(
request
)
{
logConsole
.
debug
(
"
loadListener
:
Starting
request
:
"
request
.
name
)
;
this
.
_stream
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIBinaryInputStream
)
;
}
onStopRequest
(
request
statusCode
)
{
logConsole
.
debug
(
"
loadListener
:
Stopping
request
:
"
request
.
name
)
;
var
requestFailed
=
!
Components
.
isSuccessCode
(
statusCode
)
;
if
(
!
requestFailed
&
&
request
instanceof
Ci
.
nsIHttpChannel
)
{
requestFailed
=
!
request
.
requestSucceeded
;
}
if
(
requestFailed
|
|
this
.
_countRead
=
=
0
)
{
logConsole
.
warn
(
"
loadListener
:
request
failed
!
"
)
;
this
.
_bytes
=
null
;
}
this
.
_callback
(
this
.
_bytes
this
.
_engine
)
;
this
.
_channel
=
null
;
this
.
_engine
=
null
;
}
onDataAvailable
(
request
inputStream
offset
count
)
{
this
.
_stream
.
setInputStream
(
inputStream
)
;
this
.
_bytes
=
this
.
_bytes
.
concat
(
this
.
_stream
.
readByteArray
(
count
)
)
;
this
.
_countRead
+
=
count
;
}
asyncOnChannelRedirect
(
oldChannel
newChannel
flags
callback
)
{
this
.
_channel
=
newChannel
;
callback
.
onRedirectVerifyCallback
(
Cr
.
NS_OK
)
;
}
getInterface
(
iid
)
{
return
this
.
QueryInterface
(
iid
)
;
}
onProgress
(
request
progress
progressMax
)
{
}
onStatus
(
request
status
statusArg
)
{
}
}
var
SearchUtils
=
{
BROWSER_SEARCH_PREF
SETTINGS_KEY
:
"
search
-
config
"
SETTINGS_IGNORELIST_KEY
:
"
hijack
-
blocklists
"
SETTINGS_ALLOWLIST_KEY
:
"
search
-
default
-
override
-
allowlist
"
TOPIC_SEARCH_SERVICE
:
"
browser
-
search
-
service
"
TOPIC_ENGINE_MODIFIED
:
"
browser
-
search
-
engine
-
modified
"
MODIFIED_TYPE
:
{
CHANGED
:
"
engine
-
changed
"
LOADED
:
"
engine
-
loaded
"
REMOVED
:
"
engine
-
removed
"
ADDED
:
"
engine
-
added
"
DEFAULT
:
"
engine
-
default
"
DEFAULT_PRIVATE
:
"
engine
-
default
-
private
"
}
URL_TYPE
:
{
SUGGEST_JSON
:
"
application
/
x
-
suggestions
+
json
"
SEARCH
:
"
text
/
html
"
OPENSEARCH
:
"
application
/
opensearchdescription
+
xml
"
}
ENGINES_URLS
:
{
"
prod
-
main
"
:
"
https
:
/
/
firefox
.
settings
.
services
.
mozilla
.
com
/
v1
/
buckets
/
main
/
collections
/
search
-
config
/
records
"
"
prod
-
preview
"
:
"
https
:
/
/
firefox
.
settings
.
services
.
mozilla
.
com
/
v1
/
buckets
/
main
-
preview
/
collections
/
search
-
config
/
records
"
"
stage
-
main
"
:
"
https
:
/
/
settings
.
stage
.
mozaws
.
net
/
v1
/
buckets
/
main
/
collections
/
search
-
config
/
records
"
"
stage
-
preview
"
:
"
https
:
/
/
settings
.
stage
.
mozaws
.
net
/
v1
/
buckets
/
main
-
preview
/
collections
/
search
-
config
/
records
"
}
MAX_ICON_SIZE
:
20000
DEFAULT_QUERY_CHARSET
:
"
ISO
-
8859
-
1
"
DEFAULT_TAG
:
"
default
"
MOZ_PARAM
:
{
DATE
:
"
moz
:
date
"
DIST_ID
:
"
moz
:
distributionID
"
LOCALE
:
"
moz
:
locale
"
OFFICIAL
:
"
moz
:
official
"
}
LoadListener
notifyAction
(
engine
verb
)
{
if
(
Services
.
search
.
isInitialized
)
{
logConsole
.
debug
(
"
NOTIFY
:
Engine
:
"
engine
.
name
"
Verb
:
"
verb
)
;
Services
.
obs
.
notifyObservers
(
engine
this
.
TOPIC_ENGINE_MODIFIED
verb
)
;
}
}
makeURI
(
urlSpec
)
{
try
{
return
Services
.
io
.
newURI
(
urlSpec
)
;
}
catch
(
ex
)
{
}
return
null
;
}
makeChannel
(
url
)
{
try
{
let
uri
=
typeof
url
=
=
"
string
"
?
Services
.
io
.
newURI
(
url
)
:
url
;
return
Services
.
io
.
newChannelFromURI
(
uri
null
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
null
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
Ci
.
nsIContentPolicy
.
TYPE_OTHER
)
;
}
catch
(
ex
)
{
}
return
null
;
}
isPartnerBuild
(
)
{
return
SearchUtils
.
distroID
&
&
!
SearchUtils
.
distroID
.
startsWith
(
"
mozilla
"
)
;
}
get
CACHE_VERSION
(
)
{
return
this
.
gModernConfig
?
5
:
3
;
}
sanitizeName
(
name
)
{
const
maxLength
=
60
;
const
minLength
=
1
;
var
result
=
name
.
toLowerCase
(
)
;
result
=
result
.
replace
(
/
\
s
+
/
g
"
-
"
)
;
result
=
result
.
replace
(
/
[
^
-
a
-
z0
-
9
]
/
g
"
"
)
;
if
(
result
.
length
<
minLength
)
{
result
=
Math
.
random
(
)
.
toString
(
36
)
.
replace
(
/
^
.
*
\
.
/
"
"
)
;
}
return
result
.
substring
(
0
maxLength
)
;
}
getVerificationHash
(
name
)
{
let
disclaimer
=
"
By
modifying
this
file
I
agree
that
I
am
doing
so
"
+
"
only
within
appName
itself
using
official
user
-
driven
search
"
+
"
engine
selection
processes
and
in
a
way
which
does
not
circumvent
"
+
"
user
consent
.
I
acknowledge
that
any
attempt
to
change
this
file
"
+
"
from
outside
of
appName
is
a
malicious
act
and
will
be
responded
"
+
"
to
accordingly
.
"
;
let
salt
=
OS
.
Path
.
basename
(
OS
.
Constants
.
Path
.
profileDir
)
+
name
+
disclaimer
.
replace
(
/
\
appName
/
g
Services
.
appinfo
.
name
)
;
let
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
let
data
=
converter
.
convertToByteArray
(
salt
{
}
)
;
let
hasher
=
Cc
[
"
mozilla
.
org
/
security
/
hash
;
1
"
]
.
createInstance
(
Ci
.
nsICryptoHash
)
;
hasher
.
init
(
hasher
.
SHA256
)
;
hasher
.
update
(
data
data
.
length
)
;
return
hasher
.
finish
(
true
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SearchUtils
"
gModernConfig
"
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
modernConfig
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SearchUtils
"
loggingEnabled
"
BROWSER_SEARCH_PREF
+
"
log
"
false
)
;
XPCOMUtils
.
defineLazyGetter
(
SearchUtils
"
distroID
"
(
)
=
>
{
return
Services
.
prefs
.
getDefaultBranch
(
"
distribution
.
"
)
.
getCharPref
(
"
id
"
"
"
)
;
}
)
;
