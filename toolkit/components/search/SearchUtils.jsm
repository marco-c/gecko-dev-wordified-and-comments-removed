"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SearchUtils
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
const
BROWSER_SEARCH_PREF
=
"
browser
.
search
.
"
;
var
SearchUtils
=
{
BROWSER_SEARCH_PREF
SETTINGS_KEY
:
"
search
-
config
"
SETTINGS_IGNORELIST_KEY
:
"
hijack
-
blocklists
"
SETTINGS_ALLOWLIST_KEY
:
"
search
-
default
-
override
-
allowlist
"
TOPIC_SEARCH_SERVICE
:
"
browser
-
search
-
service
"
TOPIC_ENGINE_MODIFIED
:
"
browser
-
search
-
engine
-
modified
"
MODIFIED_TYPE
:
{
CHANGED
:
"
engine
-
changed
"
LOADED
:
"
engine
-
loaded
"
REMOVED
:
"
engine
-
removed
"
ADDED
:
"
engine
-
added
"
DEFAULT
:
"
engine
-
default
"
DEFAULT_PRIVATE
:
"
engine
-
default
-
private
"
}
URL_TYPE
:
{
SUGGEST_JSON
:
"
application
/
x
-
suggestions
+
json
"
SEARCH
:
"
text
/
html
"
OPENSEARCH
:
"
application
/
opensearchdescription
+
xml
"
}
ENGINES_URLS
:
{
"
prod
-
main
"
:
"
https
:
/
/
firefox
.
settings
.
services
.
mozilla
.
com
/
v1
/
buckets
/
main
/
collections
/
search
-
config
/
records
"
"
prod
-
preview
"
:
"
https
:
/
/
firefox
.
settings
.
services
.
mozilla
.
com
/
v1
/
buckets
/
main
-
preview
/
collections
/
search
-
config
/
records
"
"
stage
-
main
"
:
"
https
:
/
/
settings
.
stage
.
mozaws
.
net
/
v1
/
buckets
/
main
/
collections
/
search
-
config
/
records
"
"
stage
-
preview
"
:
"
https
:
/
/
settings
.
stage
.
mozaws
.
net
/
v1
/
buckets
/
main
-
preview
/
collections
/
search
-
config
/
records
"
}
MAX_ICON_SIZE
:
20000
DEFAULT_QUERY_CHARSET
:
"
ISO
-
8859
-
1
"
DEFAULT_TAG
:
"
default
"
notifyAction
(
engine
verb
)
{
if
(
Services
.
search
.
isInitialized
)
{
this
.
log
(
'
NOTIFY
:
Engine
:
"
'
+
engine
.
name
+
'
"
;
Verb
:
"
'
+
verb
+
'
"
'
)
;
Services
.
obs
.
notifyObservers
(
engine
this
.
TOPIC_ENGINE_MODIFIED
verb
)
;
}
}
log
(
text
)
{
if
(
SearchUtils
.
loggingEnabled
)
{
Services
.
console
.
logStringMessage
(
text
)
;
}
}
fail
(
message
resultCode
)
{
this
.
log
(
message
)
;
throw
Components
.
Exception
(
message
resultCode
|
|
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
makeURI
(
urlSpec
)
{
try
{
return
Services
.
io
.
newURI
(
urlSpec
)
;
}
catch
(
ex
)
{
}
return
null
;
}
makeChannel
(
url
)
{
try
{
let
uri
=
typeof
url
=
=
"
string
"
?
Services
.
io
.
newURI
(
url
)
:
url
;
return
Services
.
io
.
newChannelFromURI
(
uri
null
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
null
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL
Ci
.
nsIContentPolicy
.
TYPE_OTHER
)
;
}
catch
(
ex
)
{
}
return
null
;
}
isPartnerBuild
(
)
{
return
SearchUtils
.
distroID
&
&
!
SearchUtils
.
distroID
.
startsWith
(
"
mozilla
"
)
;
}
get
CACHE_VERSION
(
)
{
return
this
.
gModernConfig
?
5
:
3
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SearchUtils
"
gModernConfig
"
SearchUtils
.
BROWSER_SEARCH_PREF
+
"
modernConfig
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SearchUtils
"
loggingEnabled
"
BROWSER_SEARCH_PREF
+
"
log
"
false
)
;
XPCOMUtils
.
defineLazyGetter
(
SearchUtils
"
distroID
"
(
)
=
>
{
return
Services
.
prefs
.
getDefaultBranch
(
"
distribution
.
"
)
.
getCharPref
(
"
id
"
"
"
)
;
}
)
;
