"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SearchUtils
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
const
BROWSER_SEARCH_PREF
=
"
browser
.
search
.
"
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
loggingEnabled
"
BROWSER_SEARCH_PREF
+
"
log
"
false
)
;
var
SearchUtils
=
{
APP_SEARCH_PREFIX
:
"
resource
:
/
/
search
-
plugins
/
"
BROWSER_SEARCH_PREF
TOPIC_SEARCH_SERVICE
:
"
browser
-
search
-
service
"
TOPIC_ENGINE_MODIFIED
:
"
browser
-
search
-
engine
-
modified
"
MODIFIED_TYPE
:
{
CHANGED
:
"
engine
-
changed
"
LOADED
:
"
engine
-
loaded
"
REMOVED
:
"
engine
-
removed
"
ADDED
:
"
engine
-
added
"
DEFAULT
:
"
engine
-
default
"
}
URL_TYPE
:
{
SUGGEST_JSON
:
"
application
/
x
-
suggestions
+
json
"
SEARCH
:
"
text
/
html
"
OPENSEARCH
:
"
application
/
opensearchdescription
+
xml
"
}
MAX_ICON_SIZE
:
20000
DEFAULT_QUERY_CHARSET
:
"
ISO
-
8859
-
1
"
SETTINGS_IGNORELIST_KEY
:
"
hijack
-
blocklists
"
notifyAction
(
engine
verb
)
{
if
(
Services
.
search
.
isInitialized
)
{
this
.
log
(
"
NOTIFY
:
Engine
:
\
"
"
+
engine
.
name
+
"
\
"
;
Verb
:
\
"
"
+
verb
+
"
\
"
"
)
;
Services
.
obs
.
notifyObservers
(
engine
this
.
TOPIC_ENGINE_MODIFIED
verb
)
;
}
}
log
(
text
)
{
if
(
loggingEnabled
)
{
dump
(
"
*
*
*
Search
:
"
+
text
+
"
\
n
"
)
;
Services
.
console
.
logStringMessage
(
text
)
;
}
}
fail
(
message
resultCode
)
{
this
.
log
(
message
)
;
throw
Components
.
Exception
(
message
resultCode
|
|
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
makeURI
(
urlSpec
)
{
try
{
return
Services
.
io
.
newURI
(
urlSpec
)
;
}
catch
(
ex
)
{
}
return
null
;
}
makeChannel
(
url
)
{
try
{
let
uri
=
typeof
url
=
=
"
string
"
?
Services
.
io
.
newURI
(
url
)
:
url
;
return
Services
.
io
.
newChannelFromURI
(
uri
null
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
null
Ci
.
nsILoadInfo
.
SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL
Ci
.
nsIContentPolicy
.
TYPE_OTHER
)
;
}
catch
(
ex
)
{
}
return
null
;
}
}
;
