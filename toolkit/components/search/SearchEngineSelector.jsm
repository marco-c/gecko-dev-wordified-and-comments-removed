"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SearchEngineSelector
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
const
EXT_SEARCH_PREFIX
=
"
resource
:
/
/
search
-
extensions
/
"
;
const
ENGINE_CONFIG_URL
=
{
EXT_SEARCH_PREFIX
}
engines
.
json
;
const
USER_LOCALE
=
"
USER_LOCALE
"
;
function
log
(
str
)
{
SearchUtils
.
log
(
"
SearchEngineSelector
"
+
str
+
"
\
n
"
)
;
}
class
SearchEngineSelector
{
async
init
(
url
=
ENGINE_CONFIG_URL
)
{
this
.
configuration
=
await
this
.
getEngineConfiguration
(
url
)
;
}
async
getEngineConfiguration
(
url
)
{
const
response
=
await
fetch
(
url
)
;
return
(
await
response
.
json
(
)
)
.
data
;
}
fetchEngineConfiguration
(
locale
region
=
"
default
"
)
{
log
(
fetchEngineConfiguration
{
region
}
:
{
locale
}
)
;
let
cohort
=
Services
.
prefs
.
getCharPref
(
"
browser
.
search
.
cohort
"
null
)
;
let
engines
=
[
]
;
const
lcLocale
=
locale
.
toLowerCase
(
)
;
const
lcRegion
=
region
.
toLowerCase
(
)
;
for
(
let
config
of
this
.
configuration
)
{
const
appliesTo
=
config
.
appliesTo
|
|
[
]
;
const
applies
=
appliesTo
.
filter
(
section
=
>
{
let
included
=
"
included
"
in
section
&
&
this
.
_isInSection
(
lcRegion
lcLocale
section
.
included
)
;
let
excluded
=
"
excluded
"
in
section
&
&
this
.
_isInSection
(
lcRegion
lcLocale
section
.
excluded
)
;
if
(
"
cohort
"
in
section
&
&
cohort
!
=
section
.
cohort
)
{
return
false
;
}
return
included
&
&
!
excluded
;
}
)
;
let
baseConfig
=
this
.
_copyObject
(
{
}
config
)
;
if
(
applies
.
length
)
{
for
(
let
section
of
applies
)
{
this
.
_copyObject
(
baseConfig
section
)
;
}
if
(
"
webExtensionLocales
"
in
baseConfig
)
{
baseConfig
.
webExtensionLocales
=
baseConfig
.
webExtensionLocales
.
map
(
val
=
>
(
val
=
=
USER_LOCALE
?
locale
:
val
)
)
;
}
engines
.
push
(
baseConfig
)
;
}
}
engines
=
this
.
_filterEngines
(
engines
)
;
let
defaultEngine
;
let
privateEngine
;
function
shouldPrefer
(
setting
hasCurrentDefault
currentDefaultSetting
)
{
if
(
setting
=
=
"
yes
"
&
&
(
!
hasCurrentDefault
|
|
currentDefaultSetting
=
=
"
yes
-
if
-
no
-
other
"
)
)
{
return
true
;
}
return
setting
=
=
"
yes
-
if
-
no
-
other
"
&
&
!
hasCurrentDefault
;
}
for
(
const
engine
of
engines
)
{
if
(
"
default
"
in
engine
&
&
shouldPrefer
(
engine
.
default
!
!
defaultEngine
defaultEngine
&
&
defaultEngine
.
default
)
)
{
defaultEngine
=
engine
;
}
if
(
"
defaultPrivate
"
in
engine
&
&
shouldPrefer
(
engine
.
defaultPrivate
!
!
privateEngine
privateEngine
&
&
privateEngine
.
defaultPrivate
)
)
{
privateEngine
=
engine
;
}
}
engines
.
sort
(
this
.
_sort
.
bind
(
this
defaultEngine
privateEngine
)
)
;
let
result
=
{
engines
}
;
if
(
privateEngine
)
{
result
.
privateDefault
=
privateEngine
.
engineName
;
}
if
(
SearchUtils
.
loggingEnabled
)
{
log
(
"
fetchEngineConfiguration
:
"
+
JSON
.
stringify
(
result
)
)
;
}
return
result
;
}
_sort
(
defaultEngine
privateEngine
a
b
)
{
return
(
this
.
_sortIndex
(
b
defaultEngine
privateEngine
)
-
this
.
_sortIndex
(
a
defaultEngine
privateEngine
)
)
;
}
_sortIndex
(
obj
defaultEngine
privateEngine
)
{
if
(
obj
=
=
defaultEngine
)
{
return
Number
.
MAX_SAFE_INTEGER
;
}
if
(
obj
=
=
privateEngine
)
{
return
Number
.
MAX_SAFE_INTEGER
-
1
;
}
return
obj
.
orderHint
|
|
0
;
}
_filterEngines
(
engines
)
{
let
branch
=
Services
.
prefs
.
getDefaultBranch
(
SearchUtils
.
BROWSER_SEARCH_PREF
)
;
if
(
SearchUtils
.
isPartnerBuild
(
)
&
&
branch
.
getPrefType
(
"
ignoredJAREngines
"
)
=
=
branch
.
PREF_STRING
)
{
let
ignoredJAREngines
=
branch
.
getCharPref
(
"
ignoredJAREngines
"
)
.
split
(
"
"
)
;
let
filteredEngines
=
engines
.
filter
(
engine
=
>
{
let
name
=
engine
.
webExtensionId
.
split
(
"
"
)
[
0
]
;
return
!
ignoredJAREngines
.
includes
(
name
)
;
}
)
;
if
(
filteredEngines
.
length
)
{
engines
=
filteredEngines
;
}
}
return
engines
;
}
_isDefault
(
obj
)
{
return
"
default
"
in
obj
&
&
obj
.
default
=
=
=
"
yes
"
;
}
_copyObject
(
target
source
)
{
for
(
let
key
in
source
)
{
if
(
[
"
included
"
"
excluded
"
"
appliesTo
"
]
.
includes
(
key
)
)
{
continue
;
}
target
[
key
]
=
source
[
key
]
;
}
return
target
;
}
_isInSection
(
region
locale
config
)
{
if
(
!
config
)
{
return
false
;
}
if
(
config
.
everywhere
)
{
return
true
;
}
let
locales
=
config
.
locales
|
|
{
}
;
let
inLocales
=
"
matches
"
in
locales
&
&
!
!
locales
.
matches
.
find
(
e
=
>
e
.
toLowerCase
(
)
=
=
locale
)
;
let
inRegions
=
"
regions
"
in
config
&
&
!
!
config
.
regions
.
find
(
e
=
>
e
.
toLowerCase
(
)
=
=
region
)
;
if
(
locales
.
startsWith
&
&
locales
.
startsWith
.
some
(
key
=
>
locale
.
startsWith
(
key
)
)
)
{
inLocales
=
true
;
}
if
(
config
.
locales
&
&
config
.
regions
)
{
return
inLocales
&
&
inRegions
;
}
return
inLocales
|
|
inRegions
;
}
}
