Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
const
protocolHandler
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
http
"
]
.
getService
(
Ci
.
nsIHttpProtocolHandler
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
TLS_ERROR_REPORT_TELEMETRY_SUCCESS
=
6
;
const
TLS_ERROR_REPORT_TELEMETRY_FAILURE
=
7
;
const
HISTOGRAM_ID
=
"
TLS_ERROR_REPORT_UI
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
UpdateUtils
"
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
function
getDERString
(
cert
)
{
var
length
=
{
}
;
var
derArray
=
cert
.
getRawDER
(
length
)
;
var
derString
=
"
"
;
for
(
var
i
=
0
;
i
<
derArray
.
length
;
i
+
+
)
{
derString
+
=
String
.
fromCharCode
(
derArray
[
i
]
)
;
}
return
derString
;
}
function
SecurityReporter
(
)
{
}
SecurityReporter
.
prototype
=
{
classDescription
:
"
Security
reporter
component
"
classID
:
Components
.
ID
(
"
{
8a997c9a
-
bea1
-
11e5
-
a1fa
-
be6aBc8e7f8b
}
"
)
contractID
:
"
mozilla
.
org
/
securityreporter
;
1
"
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsISecurityReporter
]
)
reportTLSError
(
transportSecurityInfo
hostname
port
)
{
if
(
!
transportSecurityInfo
)
{
return
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
"
security
.
ssl
.
errorReporting
.
enabled
"
)
)
{
return
;
}
let
endpoint
=
Services
.
prefs
.
getCharPref
(
"
security
.
ssl
.
errorReporting
.
url
"
)
;
let
reportURI
=
Services
.
io
.
newURI
(
endpoint
)
;
if
(
reportURI
.
host
=
=
hostname
)
{
return
;
}
let
asciiCertChain
=
[
]
;
if
(
transportSecurityInfo
.
failedCertChain
)
{
let
certs
=
transportSecurityInfo
.
failedCertChain
.
getEnumerator
(
)
;
while
(
certs
.
hasMoreElements
(
)
)
{
let
cert
=
certs
.
getNext
(
)
;
cert
.
QueryInterface
(
Ci
.
nsIX509Cert
)
;
asciiCertChain
.
push
(
btoa
(
getDERString
(
cert
)
)
)
;
}
}
let
report
=
{
hostname
port
timestamp
:
Math
.
round
(
Date
.
now
(
)
/
1000
)
errorCode
:
transportSecurityInfo
.
errorCode
failedCertChain
:
asciiCertChain
userAgent
:
protocolHandler
.
userAgent
version
:
1
build
:
Services
.
appinfo
.
appBuildID
product
:
Services
.
appinfo
.
name
channel
:
UpdateUtils
.
UpdateChannel
}
;
fetch
(
endpoint
{
method
:
"
POST
"
body
:
JSON
.
stringify
(
report
)
headers
:
{
"
Content
-
Type
"
:
"
application
/
json
"
}
}
)
.
then
(
function
(
aResponse
)
{
if
(
!
aResponse
.
ok
)
{
Services
.
telemetry
.
getHistogramById
(
HISTOGRAM_ID
)
.
add
(
TLS_ERROR_REPORT_TELEMETRY_FAILURE
)
;
}
else
{
Services
.
telemetry
.
getHistogramById
(
HISTOGRAM_ID
)
.
add
(
TLS_ERROR_REPORT_TELEMETRY_SUCCESS
)
;
}
}
)
.
catch
(
function
(
e
)
{
Services
.
telemetry
.
getHistogramById
(
HISTOGRAM_ID
)
.
add
(
TLS_ERROR_REPORT_TELEMETRY_FAILURE
)
;
}
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
SecurityReporter
]
)
;
