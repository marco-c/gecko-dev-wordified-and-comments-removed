#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
XULStore
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
namespace
{
extern
"
C
"
{
void
xulstore_new_service
(
nsIXULStore
*
*
result
)
;
nsresult
xulstore_set_value
(
const
nsAString
*
doc
const
nsAString
*
id
const
nsAString
*
attr
const
nsAString
*
value
)
;
nsresult
xulstore_has_value
(
const
nsAString
*
doc
const
nsAString
*
id
const
nsAString
*
attr
bool
*
has_value
)
;
nsresult
xulstore_get_value
(
const
nsAString
*
doc
const
nsAString
*
id
const
nsAString
*
attr
nsAString
*
value
)
;
nsresult
xulstore_remove_value
(
const
nsAString
*
doc
const
nsAString
*
id
const
nsAString
*
attr
)
;
XULStoreIterator
*
xulstore_get_ids
(
const
nsAString
*
doc
nsresult
*
result
)
;
XULStoreIterator
*
xulstore_get_attrs
(
const
nsAString
*
doc
const
nsAString
*
id
nsresult
*
result
)
;
bool
xulstore_iter_has_more
(
const
XULStoreIterator
*
)
;
nsresult
xulstore_iter_get_next
(
XULStoreIterator
*
nsAString
*
value
)
;
void
xulstore_iter_free
(
XULStoreIterator
*
iterator
)
;
}
static
StaticRefPtr
<
nsIXULStore
>
sXULStore
;
}
bool
XULStoreIterator
:
:
HasMore
(
)
const
{
return
xulstore_iter_has_more
(
this
)
;
}
nsresult
XULStoreIterator
:
:
GetNext
(
nsAString
*
item
)
{
return
xulstore_iter_get_next
(
this
item
)
;
}
void
DefaultDelete
<
XULStoreIterator
>
:
:
operator
(
)
(
XULStoreIterator
*
ptr
)
const
{
xulstore_iter_free
(
ptr
)
;
}
namespace
XULStore
{
already_AddRefed
<
nsIXULStore
>
GetService
(
)
{
nsCOMPtr
<
nsIXULStore
>
xulStore
;
if
(
sXULStore
)
{
xulStore
=
sXULStore
;
}
else
{
xulstore_new_service
(
getter_AddRefs
(
xulStore
)
)
;
sXULStore
=
xulStore
;
mozilla
:
:
ClearOnShutdown
(
&
sXULStore
)
;
}
return
xulStore
.
forget
(
)
;
}
nsresult
SetValue
(
const
nsAString
&
doc
const
nsAString
&
id
const
nsAString
&
attr
const
nsAString
&
value
)
{
return
xulstore_set_value
(
&
doc
&
id
&
attr
&
value
)
;
}
nsresult
HasValue
(
const
nsAString
&
doc
const
nsAString
&
id
const
nsAString
&
attr
bool
&
has_value
)
{
return
xulstore_has_value
(
&
doc
&
id
&
attr
&
has_value
)
;
}
nsresult
GetValue
(
const
nsAString
&
doc
const
nsAString
&
id
const
nsAString
&
attr
nsAString
&
value
)
{
return
xulstore_get_value
(
&
doc
&
id
&
attr
&
value
)
;
}
nsresult
RemoveValue
(
const
nsAString
&
doc
const
nsAString
&
id
const
nsAString
&
attr
)
{
return
xulstore_remove_value
(
&
doc
&
id
&
attr
)
;
}
nsresult
GetIDs
(
const
nsAString
&
doc
UniquePtr
<
XULStoreIterator
>
&
iter
)
{
nsresult
result
;
iter
.
reset
(
xulstore_get_ids
(
&
doc
&
result
)
)
;
return
result
;
}
nsresult
GetAttrs
(
const
nsAString
&
doc
const
nsAString
&
id
UniquePtr
<
XULStoreIterator
>
&
iter
)
{
nsresult
result
;
iter
.
reset
(
xulstore_get_attrs
(
&
doc
&
id
&
result
)
)
;
return
result
;
}
}
;
}
;
