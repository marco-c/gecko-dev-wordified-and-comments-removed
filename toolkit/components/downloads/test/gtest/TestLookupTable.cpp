#
include
"
gtest
/
gtest
.
h
"
#
include
"
ApplicationReputation
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsLiteralString
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
downloads
;
TEST
(
PendingLookup
LookupTablesInPrefs
)
{
EXPECT_EQ
(
NS_OK
Preferences
:
:
SetCString
(
"
gtest
.
test
"
"
goog
-
badbinurl
-
proto
goog
-
downloadwhite
-
proto
goog
-
badbinurl
-
shavar
"
)
)
;
bool
result
;
result
=
LookupTablesInPrefs
(
NS_LITERAL_CSTRING
(
"
goog
-
phish
-
proto
adafaf
daf
goog
-
badbinurl
-
proto
"
)
"
gtest
.
test
"
)
;
ASSERT_TRUE
(
result
)
;
result
=
LookupTablesInPrefs
(
NS_LITERAL_CSTRING
(
"
goog
-
phish
-
proto
adafaf
daf
goog
-
downloadwhite
-
proto
"
)
"
gtest
.
test
"
)
;
ASSERT_TRUE
(
result
)
;
result
=
LookupTablesInPrefs
(
NS_LITERAL_CSTRING
(
"
goog
-
phish
-
proto
"
)
"
gtest
.
test
"
)
;
ASSERT_FALSE
(
result
)
;
result
=
LookupTablesInPrefs
(
NS_LITERAL_CSTRING
(
"
goog
-
phish
-
proto
goog
-
badbinurl
-
proto
goog
-
phish
-
shavar
"
)
"
gtest
.
test
"
)
;
ASSERT_TRUE
(
result
)
;
EXPECT_EQ
(
NS_OK
Preferences
:
:
SetCString
(
"
gtest
.
test
"
"
goog
-
badbinurl
-
proto
"
)
)
;
result
=
LookupTablesInPrefs
(
NS_LITERAL_CSTRING
(
"
goog
-
badbinurl
-
proto
"
)
"
gtest
.
test
"
)
;
ASSERT_TRUE
(
result
)
;
result
=
LookupTablesInPrefs
(
NS_LITERAL_CSTRING
(
"
goog
-
phish
-
proto
goog
-
badbinurl
-
proto
goog
-
phish
-
shavar
"
)
"
gtest
.
test
"
)
;
ASSERT_TRUE
(
result
)
;
EXPECT_EQ
(
NS_OK
Preferences
:
:
SetCString
(
"
gtest
.
test
"
"
"
)
)
;
result
=
LookupTablesInPrefs
(
NS_LITERAL_CSTRING
(
"
goog
-
phish
-
proto
goog
-
badbinurl
-
proto
goog
-
phish
-
shavar
"
)
"
gtest
.
test
"
)
;
ASSERT_FALSE
(
result
)
;
Preferences
:
:
ClearUser
(
"
gtest
.
test
"
)
;
}
