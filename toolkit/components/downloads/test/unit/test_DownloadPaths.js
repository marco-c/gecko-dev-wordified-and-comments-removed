function
testSanitize
(
leafName
expectedLeafName
options
=
{
}
)
{
Assert
.
equal
(
DownloadPaths
.
sanitize
(
leafName
options
)
expectedLeafName
)
;
}
function
testSplitBaseNameAndExtension
(
aLeafName
[
aBase
aExt
]
)
{
var
[
base
ext
]
=
DownloadPaths
.
splitBaseNameAndExtension
(
aLeafName
)
;
Assert
.
equal
(
base
aBase
)
;
Assert
.
equal
(
ext
aExt
)
;
[
base
ext
]
=
DownloadPaths
.
splitBaseNameAndExtension
(
"
(
"
+
base
+
"
)
"
+
ext
)
;
Assert
.
equal
(
base
"
(
"
+
aBase
+
"
)
"
)
;
Assert
.
equal
(
ext
aExt
)
;
}
function
testCreateNiceUniqueFile
(
aTempFile
aExpectedLeafName
)
{
var
createdFile
=
DownloadPaths
.
createNiceUniqueFile
(
aTempFile
)
;
Assert
.
equal
(
createdFile
.
leafName
aExpectedLeafName
)
;
}
add_task
(
async
function
test_sanitize
(
)
{
const
kSpecialChars
=
'
A
:
*
?
|
"
"
<
<
>
>
;
+
=
[
]
B
]
[
=
+
;
>
>
<
<
"
"
|
?
*
:
C
'
;
if
(
AppConstants
.
platform
=
=
"
android
"
)
{
testSanitize
(
kSpecialChars
"
A
B
C
"
)
;
testSanitize
(
"
:
:
Website
:
:
"
"
Website
"
)
;
testSanitize
(
"
*
Website
!
"
"
Website
!
"
)
;
testSanitize
(
"
Website
|
Page
!
"
"
Website
Page
!
"
)
;
testSanitize
(
"
Directory
Listing
:
/
a
/
b
/
"
"
Directory
Listing
_a_b_
"
)
;
}
else
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
testSanitize
(
kSpecialChars
"
A
'
'
(
(
)
)
;
+
=
[
]
B
]
[
=
+
;
)
)
(
(
'
'
C
"
)
;
testSanitize
(
"
:
:
Website
:
:
"
"
Website
"
)
;
testSanitize
(
"
*
Website
!
"
"
Website
!
"
)
;
testSanitize
(
"
Website
|
Page
!
"
"
Website
Page
!
"
)
;
testSanitize
(
"
Directory
Listing
:
/
a
/
b
/
"
"
Directory
Listing
_a_b_
"
)
;
}
else
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
testSanitize
(
kSpecialChars
'
A
*
?
|
"
"
<
<
>
>
;
+
=
[
]
B
]
[
=
+
;
>
>
<
<
"
"
|
?
*
C
'
)
;
testSanitize
(
"
:
:
Website
:
:
"
"
Website
"
)
;
testSanitize
(
"
*
Website
!
"
"
*
Website
!
"
)
;
testSanitize
(
"
Website
|
Page
!
"
"
Website
|
Page
!
"
)
;
testSanitize
(
"
Directory
Listing
:
/
a
/
b
/
"
"
Directory
Listing
_a_b_
"
)
;
}
else
{
testSanitize
(
kSpecialChars
kSpecialChars
.
replace
(
/
[
:
]
/
g
"
"
)
)
;
testSanitize
(
"
:
:
Website
:
:
"
"
Website
"
)
;
testSanitize
(
"
*
Website
!
"
"
*
Website
!
"
)
;
testSanitize
(
"
Website
|
Page
!
"
"
Website
|
Page
!
"
)
;
testSanitize
(
"
Directory
Listing
:
/
a
/
b
/
"
"
Directory
Listing
_a_b_
"
)
;
}
testSanitize
(
"
\
\
\
\
\
\
Website
\
\
/
Page
/
/
/
"
"
_
_Website_Page_
_
"
)
;
testSanitize
(
"
Website
"
"
Website
"
)
;
testSanitize
(
"
.
.
Website
.
Page
.
.
"
"
Website
.
Page
"
)
;
testSanitize
(
"
File
.
txt
"
"
File
.
txt
"
)
;
testSanitize
(
"
\
f
\
n
\
r
\
t
\
v
\
x00
\
x1f
\
x7f
\
x80
\
x9f
\
xa0
.
txt
"
"
txt
"
)
;
testSanitize
(
"
\
u1680
\
u180e
\
u2000
\
u2008
\
u200a
.
txt
"
"
txt
"
)
;
testSanitize
(
"
\
u2028
\
u2029
\
u202f
\
u205f
\
u3000
\
ufeff
.
txt
"
"
txt
"
)
;
testSanitize
(
"
.
"
"
"
)
;
testSanitize
(
"
.
.
"
"
"
)
;
testSanitize
(
"
"
"
"
)
;
testSanitize
(
"
.
"
"
"
)
;
testSanitize
(
"
\
u200e
\
u202b
\
u202c
\
u202d
\
u202etest
\
x7f
\
u200f
"
"
test
"
)
;
testSanitize
(
"
AB
\
x7f
\
u202a
\
x7f
\
u202a
\
x7fCD
"
"
AB
CD
"
)
;
testSanitize
(
"
foo
:
bar
"
"
foo
bar
"
)
;
testSanitize
(
"
foo
:
bar
"
"
foo
bar
"
{
compressWhitespaces
:
false
}
)
;
}
)
;
add_task
(
async
function
test_splitBaseNameAndExtension
(
)
{
testSplitBaseNameAndExtension
(
"
base
"
[
"
base
"
"
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
ext
"
[
"
base
"
"
.
ext
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
application
"
[
"
base
"
"
.
application
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
x
.
Z
"
[
"
base
"
"
.
x
.
Z
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
ext
.
Z
"
[
"
base
"
"
.
ext
.
Z
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
ext
.
gz
"
[
"
base
"
"
.
ext
.
gz
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
ext
.
Bz2
"
[
"
base
"
"
.
ext
.
Bz2
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
.
ext
"
[
"
base
.
"
"
.
ext
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
.
Z
"
[
"
base
.
"
"
.
Z
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
.
Z
"
[
"
base
.
"
"
.
Z
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
base
.
Bz2
"
[
"
base
.
base
"
"
.
Bz2
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
ext
"
[
"
base
"
"
.
ext
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
"
[
"
base
"
"
.
"
]
)
;
testSplitBaseNameAndExtension
(
"
.
ext
"
[
"
"
"
.
ext
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
.
"
[
"
base
"
"
.
"
]
)
;
testSplitBaseNameAndExtension
(
"
base
"
[
"
base
"
"
"
]
)
;
testSplitBaseNameAndExtension
(
"
"
[
"
"
"
"
]
)
;
testSplitBaseNameAndExtension
(
"
"
[
"
"
"
"
]
)
;
testSplitBaseNameAndExtension
(
"
.
"
[
"
"
"
.
"
]
)
;
testSplitBaseNameAndExtension
(
"
.
.
"
[
"
.
"
"
.
"
]
)
;
testSplitBaseNameAndExtension
(
"
.
ext
"
[
"
"
"
.
ext
"
]
)
;
testSplitBaseNameAndExtension
(
"
.
ext
.
"
[
"
.
ext
"
"
.
"
]
)
;
testSplitBaseNameAndExtension
(
"
.
ext
.
gz
"
[
"
.
ext
"
"
.
gz
"
]
)
;
}
)
;
add_task
(
async
function
test_createNiceUniqueFile
(
)
{
var
destDir
=
FileTestUtils
.
getTempFile
(
"
destdir
"
)
;
destDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
var
tempFile
=
destDir
.
clone
(
)
;
tempFile
.
append
(
"
test
.
txt
"
)
;
testCreateNiceUniqueFile
(
tempFile
"
test
.
txt
"
)
;
testCreateNiceUniqueFile
(
tempFile
"
test
(
1
)
.
txt
"
)
;
testCreateNiceUniqueFile
(
tempFile
"
test
(
2
)
.
txt
"
)
;
tempFile
.
leafName
=
"
test
.
tar
.
gz
"
;
testCreateNiceUniqueFile
(
tempFile
"
test
.
tar
.
gz
"
)
;
testCreateNiceUniqueFile
(
tempFile
"
test
(
1
)
.
tar
.
gz
"
)
;
testCreateNiceUniqueFile
(
tempFile
"
test
(
2
)
.
tar
.
gz
"
)
;
tempFile
.
leafName
=
new
Array
(
256
)
.
join
(
"
T
"
)
+
"
.
txt
"
;
var
newFile
=
DownloadPaths
.
createNiceUniqueFile
(
tempFile
)
;
Assert
.
ok
(
newFile
.
leafName
.
length
<
tempFile
.
leafName
.
length
)
;
Assert
.
equal
(
newFile
.
leafName
.
slice
(
-
4
)
"
.
txt
"
)
;
tempFile
.
append
(
"
file
-
under
-
long
-
directory
.
txt
"
)
;
try
{
DownloadPaths
.
createNiceUniqueFile
(
tempFile
)
;
do_throw
(
"
Exception
expected
with
a
long
parent
directory
name
.
"
)
;
}
catch
(
e
)
{
}
}
)
;
