"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
DownloadError
"
"
resource
:
/
/
gre
/
modules
/
DownloadCore
.
jsm
"
)
;
var
gUseLegacySaver
=
false
;
var
scriptFile
=
do_get_file
(
"
common_test_Download
.
js
"
)
;
Services
.
scriptloader
.
loadSubScript
(
NetUtil
.
newURI
(
scriptFile
)
.
spec
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookieSettings
.
unblocked_for_testing
"
true
)
;
add_task
(
async
function
test_error_target_downloadingToSameFile
(
)
{
let
targetFile
=
getTempFile
(
TEST_TARGET_FILE_NAME
)
;
targetFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
FileUtils
.
PERMS_FILE
)
;
let
download
=
await
Downloads
.
createDownload
(
{
source
:
NetUtil
.
newURI
(
targetFile
)
target
:
targetFile
}
)
;
await
Assert
.
rejects
(
download
.
start
(
)
ex
=
>
ex
instanceof
Downloads
.
Error
&
&
ex
.
becauseTargetFailed
)
;
Assert
.
ok
(
await
OS
.
File
.
exists
(
download
.
target
.
path
)
"
The
file
should
not
have
been
deleted
.
"
)
;
}
)
;
add_task
(
function
test_DownloadError
(
)
{
let
error
=
new
DownloadError
(
{
result
:
Cr
.
NS_ERROR_NOT_RESUMABLE
message
:
"
Not
resumable
.
"
}
)
;
Assert
.
equal
(
error
.
result
Cr
.
NS_ERROR_NOT_RESUMABLE
)
;
Assert
.
equal
(
error
.
message
"
Not
resumable
.
"
)
;
Assert
.
ok
(
!
error
.
becauseSourceFailed
)
;
Assert
.
ok
(
!
error
.
becauseTargetFailed
)
;
Assert
.
ok
(
!
error
.
becauseBlocked
)
;
Assert
.
ok
(
!
error
.
becauseBlockedByParentalControls
)
;
error
=
new
DownloadError
(
{
message
:
"
Unknown
error
.
"
}
)
;
Assert
.
equal
(
error
.
result
Cr
.
NS_ERROR_FAILURE
)
;
Assert
.
equal
(
error
.
message
"
Unknown
error
.
"
)
;
error
=
new
DownloadError
(
{
result
:
Cr
.
NS_ERROR_NOT_RESUMABLE
}
)
;
Assert
.
equal
(
error
.
result
Cr
.
NS_ERROR_NOT_RESUMABLE
)
;
Assert
.
ok
(
error
.
message
.
indexOf
(
"
Exception
"
)
>
0
)
;
error
=
new
DownloadError
(
{
message
:
"
Unknown
error
.
"
becauseSourceFailed
:
true
becauseUnknown
:
true
}
)
;
Assert
.
ok
(
error
.
becauseSourceFailed
)
;
Assert
.
equal
(
false
"
becauseUnknown
"
in
error
)
;
error
=
new
DownloadError
(
{
result
:
Cr
.
NS_ERROR_MALFORMED_URI
inferCause
:
true
}
)
;
Assert
.
equal
(
error
.
result
Cr
.
NS_ERROR_MALFORMED_URI
)
;
Assert
.
ok
(
error
.
becauseSourceFailed
)
;
Assert
.
ok
(
!
error
.
becauseTargetFailed
)
;
Assert
.
ok
(
!
error
.
becauseBlocked
)
;
Assert
.
ok
(
!
error
.
becauseBlockedByParentalControls
)
;
error
=
new
DownloadError
(
{
result
:
Cr
.
NS_ERROR_MALFORMED_URI
}
)
;
Assert
.
equal
(
error
.
result
Cr
.
NS_ERROR_MALFORMED_URI
)
;
Assert
.
ok
(
!
error
.
becauseSourceFailed
)
;
error
=
new
DownloadError
(
{
result
:
Cr
.
NS_ERROR_FILE_INVALID_PATH
inferCause
:
true
}
)
;
Assert
.
equal
(
error
.
result
Cr
.
NS_ERROR_FILE_INVALID_PATH
)
;
Assert
.
ok
(
!
error
.
becauseSourceFailed
)
;
Assert
.
ok
(
error
.
becauseTargetFailed
)
;
Assert
.
ok
(
!
error
.
becauseBlocked
)
;
Assert
.
ok
(
!
error
.
becauseBlockedByParentalControls
)
;
error
=
new
DownloadError
(
{
becauseBlocked
:
true
}
)
;
Assert
.
equal
(
error
.
message
"
Download
blocked
.
"
)
;
Assert
.
ok
(
!
error
.
becauseSourceFailed
)
;
Assert
.
ok
(
!
error
.
becauseTargetFailed
)
;
Assert
.
ok
(
error
.
becauseBlocked
)
;
Assert
.
ok
(
!
error
.
becauseBlockedByParentalControls
)
;
error
=
new
DownloadError
(
{
becauseBlockedByParentalControls
:
true
}
)
;
Assert
.
equal
(
error
.
message
"
Download
blocked
.
"
)
;
Assert
.
ok
(
!
error
.
becauseSourceFailed
)
;
Assert
.
ok
(
!
error
.
becauseTargetFailed
)
;
Assert
.
ok
(
error
.
becauseBlocked
)
;
Assert
.
ok
(
error
.
becauseBlockedByParentalControls
)
;
}
)
;
