"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DownloadPaths
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gConvertToSpaceRegExp
"
(
)
=
>
{
switch
(
AppConstants
.
platform
)
{
case
"
android
"
:
return
/
[
\
x00
-
\
x1f
\
x7f
-
\
x9f
:
*
?
|
"
<
>
;
+
=
\
[
\
]
]
+
/
g
;
case
"
win
"
:
return
/
[
\
x00
-
\
x1f
\
x7f
-
\
x9f
:
*
?
|
]
+
/
g
;
default
:
return
/
[
\
x00
-
\
x1f
\
x7f
-
\
x9f
:
]
+
/
g
;
}
}
)
;
var
DownloadPaths
=
{
sanitize
(
leafName
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
leafName
=
leafName
.
replace
(
/
<
/
g
"
(
"
)
.
replace
(
/
>
/
g
"
)
"
)
.
replace
(
/
"
/
g
"
'
"
)
;
}
return
leafName
.
replace
(
/
[
\
\
/
]
+
/
g
"
_
"
)
.
replace
(
/
[
\
u200e
\
u200f
\
u202a
-
\
u202e
]
/
g
"
"
)
.
replace
(
gConvertToSpaceRegExp
"
"
)
.
replace
(
/
\
s
{
2
}
/
g
"
"
)
.
replace
(
/
^
[
\
s
\
u180e
.
]
+
|
[
\
s
\
u180e
.
]
+
/
g
"
"
)
;
}
createNiceUniqueFile
(
templateFile
)
{
let
curFile
=
templateFile
.
clone
(
)
.
QueryInterface
(
Ci
.
nsIFile
)
;
let
[
base
ext
]
=
DownloadPaths
.
splitBaseNameAndExtension
(
curFile
.
leafName
)
;
for
(
let
i
=
1
;
i
<
10000
&
&
curFile
.
exists
(
)
;
i
+
+
)
{
curFile
.
leafName
=
base
+
"
(
"
+
i
+
"
)
"
+
ext
;
}
curFile
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o644
)
;
return
curFile
;
}
splitBaseNameAndExtension
(
leafName
)
{
let
[
base
ext
]
=
/
(
.
*
?
)
(
\
.
[
A
-
Z0
-
9
]
{
1
3
}
\
.
(
?
:
gz
|
bz2
|
Z
)
|
\
.
[
^
.
]
*
)
?
/
i
.
exec
(
leafName
)
;
return
[
base
ext
|
|
"
"
]
;
}
}
;
