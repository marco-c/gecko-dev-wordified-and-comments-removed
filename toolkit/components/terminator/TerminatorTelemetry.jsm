"
use
strict
"
;
const
{
ComponentUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ComponentUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
nsTerminatorTelemetry
(
)
{
}
var
HISTOGRAMS
=
{
"
quit
-
application
"
:
"
SHUTDOWN_PHASE_DURATION_TICKS_QUIT_APPLICATION
"
"
profile
-
change
-
net
-
teardown
"
:
"
SHUTDOWN_PHASE_DURATION_TICKS_PROFILE_CHANGE_NET_TEARDOWN
"
"
profile
-
change
-
teardown
"
:
"
SHUTDOWN_PHASE_DURATION_TICKS_PROFILE_CHANGE_TEARDOWN
"
"
profile
-
before
-
change
"
:
"
SHUTDOWN_PHASE_DURATION_TICKS_PROFILE_BEFORE_CHANGE
"
"
profile
-
before
-
change
-
qm
"
:
"
SHUTDOWN_PHASE_DURATION_TICKS_PROFILE_BEFORE_CHANGE_QM
"
"
xpcom
-
will
-
shutdown
"
:
"
SHUTDOWN_PHASE_DURATION_TICKS_XPCOM_WILL_SHUTDOWN
"
"
xpcom
-
shutdown
"
:
"
SHUTDOWN_PHASE_DURATION_TICKS_XPCOM_SHUTDOWN
"
}
;
nsTerminatorTelemetry
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
3f78ada1
-
cba2
-
442a
-
82dd
-
d5fb300ddea7
}
"
)
_xpcom_factory
:
ComponentUtils
.
generateSingletonFactory
(
nsTerminatorTelemetry
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
observe
:
function
DS_observe
(
aSubject
aTopic
aData
)
{
(
async
function
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
3000
)
)
;
let
PATH
=
PathUtils
.
join
(
Services
.
dirsvc
.
get
(
"
ProfLD
"
Ci
.
nsIFile
)
.
path
"
ShutdownDuration
.
json
"
)
;
let
data
;
try
{
data
=
await
IOUtils
.
readJSON
(
PATH
)
;
}
catch
(
ex
)
{
if
(
ex
instanceof
DOMException
&
&
ex
.
name
=
=
"
NotFoundError
"
)
{
return
;
}
throw
ex
;
}
await
IOUtils
.
remove
(
PATH
)
;
await
IOUtils
.
remove
(
PATH
+
"
.
tmp
"
)
;
for
(
let
k
of
Object
.
keys
(
data
)
)
{
let
id
=
HISTOGRAMS
[
k
]
;
try
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
id
)
;
if
(
!
histogram
)
{
throw
new
Error
(
"
Unknown
histogram
"
+
id
)
;
}
histogram
.
add
(
Number
.
parseInt
(
data
[
k
]
)
)
;
}
catch
(
ex
)
{
Promise
.
reject
(
ex
)
;
continue
;
}
}
Services
.
obs
.
notifyObservers
(
null
"
shutdown
-
terminator
-
telemetry
-
updated
"
)
;
}
)
(
)
;
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
nsTerminatorTelemetry
"
]
;
