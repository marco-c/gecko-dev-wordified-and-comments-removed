use
url
:
:
Url
;
pub
struct
Handle
(
pub
i64
)
;
impl
UniffiCustomTypeConverter
for
Handle
{
type
Builtin
=
i64
;
fn
into_custom
(
val
:
Self
:
:
Builtin
)
-
>
uniffi
:
:
Result
<
Self
>
{
Ok
(
Handle
(
val
)
)
}
fn
from_custom
(
obj
:
Self
)
-
>
Self
:
:
Builtin
{
obj
.
0
}
}
impl
UniffiCustomTypeConverter
for
Url
{
type
Builtin
=
String
;
fn
into_custom
(
val
:
Self
:
:
Builtin
)
-
>
uniffi
:
:
Result
<
Self
>
{
Ok
(
Url
:
:
parse
(
&
val
)
?
)
}
fn
from_custom
(
obj
:
Self
)
-
>
Self
:
:
Builtin
{
obj
.
to_string
(
)
}
}
pub
struct
CustomTypesDemo
{
url
:
Url
handle
:
Handle
}
pub
fn
get_custom_types_demo
(
v
:
Option
<
CustomTypesDemo
>
)
-
>
CustomTypesDemo
{
v
.
unwrap_or_else
(
|
|
CustomTypesDemo
{
url
:
Url
:
:
parse
(
"
http
:
/
/
example
.
com
/
"
)
.
unwrap
(
)
handle
:
Handle
(
123
)
}
)
}
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
custom
-
types
.
uniffi
.
rs
"
)
)
;
