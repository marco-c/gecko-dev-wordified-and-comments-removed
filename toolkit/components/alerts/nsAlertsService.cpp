#
include
"
xpcpublic
.
h
"
#
include
"
mozilla
/
StaticPrefs_alerts
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsXULAlerts
.
h
"
#
include
"
nsAlertsService
.
h
"
#
include
"
nsToolkitCompsCID
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
ifdef
MOZ_PLACES
#
include
"
nsIFaviconService
.
h
"
#
endif
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
include
<
shellapi
.
h
>
#
endif
using
namespace
mozilla
;
NS_IMPL_ISUPPORTS
(
nsAlertsService
nsIAlertsService
nsIAlertsDoNotDisturb
)
nsAlertsService
:
:
nsAlertsService
(
)
:
mBackend
(
nullptr
)
{
mBackend
=
do_GetService
(
NS_SYSTEMALERTSERVICE_CONTRACTID
)
;
}
nsAlertsService
:
:
~
nsAlertsService
(
)
=
default
;
bool
nsAlertsService
:
:
ShouldShowAlert
(
)
{
bool
result
=
true
;
#
ifdef
XP_WIN
if
(
!
xpc
:
:
IsInAutomation
(
)
)
{
QUERY_USER_NOTIFICATION_STATE
qstate
;
if
(
SUCCEEDED
(
SHQueryUserNotificationState
(
&
qstate
)
)
)
{
if
(
qstate
!
=
QUNS_ACCEPTS_NOTIFICATIONS
)
{
result
=
false
;
}
}
}
#
endif
nsCOMPtr
<
nsIAlertsDoNotDisturb
>
alertsDND
(
GetDNDBackend
(
)
)
;
if
(
alertsDND
)
{
bool
suppressForScreenSharing
=
false
;
nsresult
rv
=
alertsDND
-
>
GetSuppressForScreenSharing
(
&
suppressForScreenSharing
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
result
&
=
!
suppressForScreenSharing
;
}
}
return
result
;
}
bool
nsAlertsService
:
:
ShouldUseSystemBackend
(
)
{
if
(
!
mBackend
)
{
return
false
;
}
return
StaticPrefs
:
:
alerts_useSystemBackend
(
)
;
}
NS_IMETHODIMP
nsAlertsService
:
:
ShowAlertNotification
(
const
nsAString
&
aImageUrl
const
nsAString
&
aAlertTitle
const
nsAString
&
aAlertText
bool
aAlertTextClickable
const
nsAString
&
aAlertCookie
nsIObserver
*
aAlertListener
const
nsAString
&
aAlertName
const
nsAString
&
aBidi
const
nsAString
&
aLang
const
nsAString
&
aData
nsIPrincipal
*
aPrincipal
bool
aInPrivateBrowsing
bool
aRequireInteraction
)
{
nsCOMPtr
<
nsIAlertNotification
>
alert
=
do_CreateInstance
(
ALERT_NOTIFICATION_CONTRACTID
)
;
NS_ENSURE_TRUE
(
alert
NS_ERROR_FAILURE
)
;
nsTArray
<
uint32_t
>
vibrate
;
nsresult
rv
=
alert
-
>
Init
(
aAlertName
aImageUrl
aAlertTitle
aAlertText
aAlertTextClickable
aAlertCookie
aBidi
aLang
aData
aPrincipal
aInPrivateBrowsing
aRequireInteraction
false
vibrate
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
ShowAlert
(
alert
aAlertListener
)
;
}
static
bool
ShouldFallBackToXUL
(
)
{
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
return
false
;
#
else
return
true
;
#
endif
}
NS_IMETHODIMP
nsAlertsService
:
:
ShowAlert
(
nsIAlertNotification
*
aAlert
nsIObserver
*
aAlertListener
)
{
NS_ENSURE_ARG
(
aAlert
)
;
nsAutoString
cookie
;
nsresult
rv
=
aAlert
-
>
GetCookie
(
cookie
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
ShouldUseSystemBackend
(
)
)
{
rv
=
mBackend
-
>
ShowAlert
(
aAlert
aAlertListener
)
;
if
(
NS_SUCCEEDED
(
rv
)
|
|
!
ShouldFallBackToXUL
(
)
)
{
return
rv
;
}
mBackend
=
nullptr
;
}
if
(
!
ShouldShowAlert
(
)
)
{
if
(
aAlertListener
)
{
aAlertListener
-
>
Observe
(
nullptr
"
alertfinished
"
cookie
.
get
(
)
)
;
}
return
NS_OK
;
}
nsCOMPtr
<
nsIAlertsService
>
xulBackend
(
nsXULAlerts
:
:
GetInstance
(
)
)
;
NS_ENSURE_TRUE
(
xulBackend
NS_ERROR_FAILURE
)
;
return
xulBackend
-
>
ShowAlert
(
aAlert
aAlertListener
)
;
}
NS_IMETHODIMP
nsAlertsService
:
:
CloseAlert
(
const
nsAString
&
aAlertName
bool
aContextClosed
)
{
nsresult
rv
;
if
(
ShouldUseSystemBackend
(
)
)
{
rv
=
mBackend
-
>
CloseAlert
(
aAlertName
aContextClosed
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
&
&
ShouldFallBackToXUL
(
)
)
{
mBackend
=
nullptr
;
}
}
else
{
nsCOMPtr
<
nsIAlertsService
>
xulBackend
(
nsXULAlerts
:
:
GetInstance
(
)
)
;
NS_ENSURE_TRUE
(
xulBackend
NS_ERROR_FAILURE
)
;
rv
=
xulBackend
-
>
CloseAlert
(
aAlertName
aContextClosed
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsAlertsService
:
:
GetManualDoNotDisturb
(
bool
*
aRetVal
)
{
#
ifdef
MOZ_WIDGET_ANDROID
return
NS_ERROR_NOT_IMPLEMENTED
;
#
else
nsCOMPtr
<
nsIAlertsDoNotDisturb
>
alertsDND
(
GetDNDBackend
(
)
)
;
NS_ENSURE_TRUE
(
alertsDND
NS_ERROR_NOT_IMPLEMENTED
)
;
return
alertsDND
-
>
GetManualDoNotDisturb
(
aRetVal
)
;
#
endif
}
NS_IMETHODIMP
nsAlertsService
:
:
SetManualDoNotDisturb
(
bool
aDoNotDisturb
)
{
#
ifdef
MOZ_WIDGET_ANDROID
return
NS_ERROR_NOT_IMPLEMENTED
;
#
else
nsCOMPtr
<
nsIAlertsDoNotDisturb
>
alertsDND
(
GetDNDBackend
(
)
)
;
NS_ENSURE_TRUE
(
alertsDND
NS_ERROR_NOT_IMPLEMENTED
)
;
return
alertsDND
-
>
SetManualDoNotDisturb
(
aDoNotDisturb
)
;
#
endif
}
NS_IMETHODIMP
nsAlertsService
:
:
GetSuppressForScreenSharing
(
bool
*
aRetVal
)
{
#
ifdef
MOZ_WIDGET_ANDROID
return
NS_ERROR_NOT_IMPLEMENTED
;
#
else
nsCOMPtr
<
nsIAlertsDoNotDisturb
>
alertsDND
(
GetDNDBackend
(
)
)
;
NS_ENSURE_TRUE
(
alertsDND
NS_ERROR_NOT_IMPLEMENTED
)
;
return
alertsDND
-
>
GetSuppressForScreenSharing
(
aRetVal
)
;
#
endif
}
NS_IMETHODIMP
nsAlertsService
:
:
SetSuppressForScreenSharing
(
bool
aSuppress
)
{
#
ifdef
MOZ_WIDGET_ANDROID
return
NS_ERROR_NOT_IMPLEMENTED
;
#
else
nsCOMPtr
<
nsIAlertsDoNotDisturb
>
alertsDND
(
GetDNDBackend
(
)
)
;
NS_ENSURE_TRUE
(
alertsDND
NS_ERROR_NOT_IMPLEMENTED
)
;
return
alertsDND
-
>
SetSuppressForScreenSharing
(
aSuppress
)
;
#
endif
}
already_AddRefed
<
nsIAlertsDoNotDisturb
>
nsAlertsService
:
:
GetDNDBackend
(
)
{
nsCOMPtr
<
nsIAlertsService
>
backend
;
if
(
ShouldUseSystemBackend
(
)
)
{
backend
=
mBackend
;
}
if
(
!
backend
)
{
backend
=
nsXULAlerts
:
:
GetInstance
(
)
;
}
nsCOMPtr
<
nsIAlertsDoNotDisturb
>
alertsDND
(
do_QueryInterface
(
backend
)
)
;
return
alertsDND
.
forget
(
)
;
}
