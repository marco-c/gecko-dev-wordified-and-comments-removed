#
ifndef
nsXULAlerts_h__
#
define
nsXULAlerts_h__
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
mozIDOMWindow
.
h
"
#
include
"
nsIAlertsService
.
h
"
#
include
"
nsIObserver
.
h
"
struct
PendingAlert
{
void
Init
(
nsIAlertNotification
*
aAlert
nsIObserver
*
aListener
)
{
mAlert
=
aAlert
;
mListener
=
aListener
;
}
nsCOMPtr
<
nsIAlertNotification
>
mAlert
;
nsCOMPtr
<
nsIObserver
>
mListener
;
}
;
class
nsXULAlerts
:
public
nsIAlertsService
public
nsIAlertsDoNotDisturb
{
friend
class
nsXULAlertObserver
;
public
:
NS_DECL_NSIALERTSDONOTDISTURB
NS_DECL_NSIALERTSSERVICE
NS_DECL_ISUPPORTS
nsXULAlerts
(
)
=
default
;
static
already_AddRefed
<
nsXULAlerts
>
GetInstance
(
)
;
protected
:
virtual
~
nsXULAlerts
(
)
=
default
;
void
PersistentAlertFinished
(
)
;
nsresult
ShowAlertImpl
(
nsIAlertNotification
*
aAlert
nsIObserver
*
aAlertListener
)
;
nsInterfaceHashtable
<
nsStringHashKey
mozIDOMWindowProxy
>
mNamedWindows
;
uint32_t
mPersistentAlertCount
=
0
;
nsTArray
<
PendingAlert
>
mPendingPersistentAlerts
;
bool
mDoNotDisturb
=
false
;
private
:
bool
mSuppressForScreenSharing
=
false
;
}
;
class
nsXULAlertObserver
:
public
nsIObserver
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_CYCLE_COLLECTION_CLASS
(
nsXULAlertObserver
)
nsXULAlertObserver
(
nsXULAlerts
*
aXULAlerts
const
nsAString
&
aAlertName
nsIObserver
*
aObserver
bool
aIsPersistent
)
:
mXULAlerts
(
aXULAlerts
)
mAlertName
(
aAlertName
)
mObserver
(
aObserver
)
mIsPersistent
(
aIsPersistent
)
{
}
void
SetAlertWindow
(
mozIDOMWindowProxy
*
aWindow
)
{
mAlertWindow
=
aWindow
;
}
protected
:
virtual
~
nsXULAlertObserver
(
)
=
default
;
RefPtr
<
nsXULAlerts
>
mXULAlerts
;
nsString
mAlertName
;
nsCOMPtr
<
mozIDOMWindowProxy
>
mAlertWindow
;
nsCOMPtr
<
nsIObserver
>
mObserver
;
bool
mIsPersistent
;
}
;
#
endif
