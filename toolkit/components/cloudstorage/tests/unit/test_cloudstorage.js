"
use
strict
"
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
Cu
=
Components
.
utils
;
var
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CloudStorage
"
"
resource
:
/
/
gre
/
modules
/
CloudStorage
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
const
CLOUD_SERVICES_PREF
=
"
cloud
.
services
.
"
;
const
DROPBOX_DOWNLOAD_FOLDER
=
"
Dropbox
"
;
const
GOOGLE_DRIVE_DOWNLOAD_FOLDER
=
"
Google
Drive
"
;
const
DROPBOX_CONFIG_FOLDER
=
(
AppConstants
.
platform
=
=
=
"
win
"
)
?
"
Dropbox
"
:
"
.
dropbox
"
;
const
DROPBOX_KEY
=
"
Dropbox
"
;
const
GDRIVE_KEY
=
"
GDrive
"
;
var
nsIDropboxFile
nsIGDriveFile
;
function
run_test
(
)
{
initPrefs
(
)
;
registerFakePath
(
"
Home
"
do_get_file
(
"
cloud
/
"
)
)
;
registerFakePath
(
"
LocalAppData
"
do_get_file
(
"
cloud
/
"
)
)
;
do_register_cleanup
(
(
)
=
>
{
cleanupPrefs
(
)
;
}
)
;
run_next_test
(
)
;
}
function
initPrefs
(
)
{
Services
.
prefs
.
setBoolPref
(
CLOUD_SERVICES_PREF
+
"
api
.
enabled
"
true
)
;
}
function
registerFakePath
(
key
file
)
{
let
dirsvc
=
Services
.
dirsvc
.
QueryInterface
(
Ci
.
nsIProperties
)
;
let
originalFile
;
try
{
originalFile
=
dirsvc
.
get
(
key
Ci
.
nsIFile
)
;
dirsvc
.
undefine
(
key
)
;
}
catch
(
e
)
{
originalFile
=
undefined
;
}
dirsvc
.
set
(
key
file
)
;
do_register_cleanup
(
(
)
=
>
{
dirsvc
.
undefine
(
key
)
;
if
(
originalFile
)
{
dirsvc
.
set
(
key
originalFile
)
;
}
}
)
;
}
function
mock_dropbox
(
)
{
let
discoveryFolder
=
null
;
if
(
AppConstants
.
platform
=
=
=
"
win
"
)
{
discoveryFolder
=
FileUtils
.
getFile
(
"
LocalAppData
"
[
DROPBOX_CONFIG_FOLDER
]
)
;
}
else
{
discoveryFolder
=
FileUtils
.
getFile
(
"
Home
"
[
DROPBOX_CONFIG_FOLDER
]
)
;
}
discoveryFolder
.
append
(
"
info
.
json
"
)
;
let
fileDir
=
discoveryFolder
.
parent
;
if
(
!
fileDir
.
exists
(
)
)
{
fileDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
do_get_file
(
"
cloud
/
info
.
json
"
)
.
copyTo
(
fileDir
"
info
.
json
"
)
;
let
exist
=
fileDir
.
exists
(
)
;
Assert
.
ok
(
exist
"
file
exists
on
desktop
"
)
;
let
downloadFolder
=
FileUtils
.
getFile
(
"
Home
"
[
DROPBOX_DOWNLOAD_FOLDER
"
Downloads
"
]
)
;
if
(
!
downloadFolder
.
exists
(
)
)
{
downloadFolder
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
do_register_cleanup
(
(
)
=
>
{
if
(
discoveryFolder
.
exists
(
)
)
{
discoveryFolder
.
remove
(
false
)
;
}
if
(
downloadFolder
.
exists
(
)
)
{
downloadFolder
.
remove
(
false
)
;
}
}
)
;
return
discoveryFolder
;
}
function
mock_gdrive
(
)
{
let
discoveryFolder
=
null
;
if
(
AppConstants
.
platform
=
=
=
"
win
"
)
{
discoveryFolder
=
FileUtils
.
getFile
(
"
LocalAppData
"
[
"
Google
"
"
Drive
"
]
)
;
}
else
{
discoveryFolder
=
FileUtils
.
getFile
(
"
Home
"
[
"
Library
"
"
Application
Support
"
"
Google
"
"
Drive
"
]
)
;
}
if
(
!
discoveryFolder
.
exists
(
)
)
{
discoveryFolder
.
createUnique
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
let
exist
=
discoveryFolder
.
exists
(
)
;
Assert
.
ok
(
exist
"
file
exists
on
desktop
"
)
;
let
downloadFolder
=
FileUtils
.
getFile
(
"
Home
"
[
GOOGLE_DRIVE_DOWNLOAD_FOLDER
"
Downloads
"
]
)
;
if
(
!
downloadFolder
.
exists
(
)
)
{
downloadFolder
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
do_register_cleanup
(
(
)
=
>
{
if
(
discoveryFolder
.
exists
(
)
)
{
discoveryFolder
.
remove
(
false
)
;
}
if
(
downloadFolder
.
exists
(
)
)
{
downloadFolder
.
remove
(
false
)
;
}
}
)
;
return
discoveryFolder
;
}
function
cleanupPrefs
(
)
{
try
{
Services
.
prefs
.
clearUserPref
(
CLOUD_SERVICES_PREF
+
"
lastprompt
"
)
;
Services
.
prefs
.
clearUserPref
(
CLOUD_SERVICES_PREF
+
"
storage
.
key
"
)
;
Services
.
prefs
.
clearUserPref
(
CLOUD_SERVICES_PREF
+
"
rejected
.
key
"
)
;
Services
.
prefs
.
clearUserPref
(
CLOUD_SERVICES_PREF
+
"
interval
.
prompt
"
)
;
Services
.
prefs
.
clearUserPref
(
CLOUD_SERVICES_PREF
+
"
api
.
enabled
"
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
download
.
folderList
"
2
)
;
}
catch
(
e
)
{
do_throw
(
"
Failed
to
cleanup
prefs
:
"
+
e
)
;
}
}
function
promiseGetStorageProviders
(
)
{
return
CloudStorage
.
getStorageProviders
(
)
;
}
function
promisePromptInfo
(
)
{
return
CloudStorage
.
promisePromptInfo
(
)
;
}
async
function
checkScan
(
expectedKey
)
{
let
metadata
=
await
promiseGetStorageProviders
(
)
;
let
scanProvider
=
await
promisePromptInfo
(
)
;
if
(
!
expectedKey
)
{
Assert
.
equal
(
metadata
.
size
0
"
Number
of
storage
providers
"
)
;
Assert
.
ok
(
!
scanProvider
"
No
provider
in
scan
results
"
)
;
}
else
{
Assert
.
ok
(
metadata
.
size
"
Number
of
storage
providers
"
)
;
Assert
.
equal
(
scanProvider
.
key
expectedKey
"
Scanned
provider
key
returned
"
)
;
}
return
metadata
;
}
async
function
checkSavedPromptResponse
(
aKey
metadata
remember
selected
=
false
)
{
CloudStorage
.
savePromptResponse
(
aKey
remember
selected
)
;
if
(
remember
&
&
selected
)
{
let
prefProvider
=
CloudStorage
.
getPreferredProvider
(
)
;
Assert
.
equal
(
prefProvider
aKey
"
Saved
Response
preferred
provider
key
returned
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
"
browser
.
download
.
folderList
"
)
3
"
Default
download
location
set
to
3
"
)
;
let
path
=
await
CloudStorage
.
getDownloadFolder
(
)
;
let
nsIDownloadFolder
=
new
FileUtils
.
File
(
path
)
;
Assert
.
ok
(
nsIDownloadFolder
"
Download
folder
retrieved
"
)
;
Assert
.
equal
(
nsIDownloadFolder
.
parent
.
path
metadata
.
get
(
aKey
)
.
downloadPath
"
Default
download
Folder
Path
"
)
;
}
else
if
(
remember
&
&
!
selected
)
{
let
scanResult
=
await
promisePromptInfo
(
)
;
if
(
scanResult
)
{
Assert
.
notEqual
(
scanResult
.
key
DROPBOX_KEY
"
Scanned
provider
key
returned
is
not
Dropbox
"
)
;
}
else
{
Assert
.
ok
(
!
scanResult
"
No
provider
in
scan
results
"
)
;
}
}
}
add_task
(
async
function
test_checkInit
(
)
{
let
{
CloudStorageInternal
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
CloudStorage
.
jsm
"
{
}
)
;
let
isInitialized
=
await
CloudStorageInternal
.
promiseInit
;
Assert
.
ok
(
isInitialized
"
Providers
Metadata
successfully
initialized
"
)
;
}
)
;
add_task
(
async
function
test_noStorageProvider
(
)
{
await
checkScan
(
)
;
cleanupPrefs
(
)
;
}
)
;
add_task
(
async
function
test_dropboxStorageProvider
(
)
{
nsIDropboxFile
=
mock_dropbox
(
)
;
let
result
=
await
checkScan
(
DROPBOX_KEY
)
;
await
checkSavedPromptResponse
(
DROPBOX_KEY
result
true
true
)
;
cleanupPrefs
(
)
;
await
checkSavedPromptResponse
(
DROPBOX_KEY
result
true
)
;
nsIDropboxFile
.
remove
(
false
)
;
cleanupPrefs
(
)
;
}
)
;
add_task
(
async
function
test_gDriveStorageProvider
(
)
{
nsIGDriveFile
=
mock_gdrive
(
)
;
let
result
;
if
(
AppConstants
.
platform
=
=
=
"
linux
"
)
{
result
=
await
checkScan
(
)
;
}
else
{
result
=
await
checkScan
(
GDRIVE_KEY
)
;
}
if
(
result
.
size
|
|
AppConstants
.
platform
!
=
=
"
linux
"
)
{
await
checkSavedPromptResponse
(
GDRIVE_KEY
result
true
true
)
;
cleanupPrefs
(
)
;
await
checkSavedPromptResponse
(
GDRIVE_KEY
result
true
)
;
}
nsIGDriveFile
.
remove
(
false
)
;
cleanupPrefs
(
)
;
}
)
;
add_task
(
async
function
test_multipleStorageProvider
(
)
{
nsIDropboxFile
=
mock_dropbox
(
)
;
nsIGDriveFile
=
mock_gdrive
(
)
;
let
result
=
await
checkScan
(
DROPBOX_KEY
)
;
await
checkSavedPromptResponse
(
DROPBOX_KEY
result
true
true
)
;
cleanupPrefs
(
)
;
await
checkSavedPromptResponse
(
DROPBOX_KEY
result
true
)
;
nsIDropboxFile
.
remove
(
false
)
;
nsIGDriveFile
.
remove
(
false
)
;
cleanupPrefs
(
)
;
}
)
;
