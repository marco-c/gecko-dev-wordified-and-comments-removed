#
include
"
nsFind
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsITextControlFrame
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsTextFragment
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
TextEditor
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
mozilla
/
dom
/
TreeIterator
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
HTMLOptionElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLSelectElement
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
#
define
CHAR_TO_UNICHAR
(
c
)
(
(
char16_t
)
(
unsigned
char
)
c
)
#
define
CH_QUOTE
(
(
char16_t
)
0x22
)
#
define
CH_APOSTROPHE
(
(
char16_t
)
0x27
)
#
define
CH_LEFT_SINGLE_QUOTE
(
(
char16_t
)
0x2018
)
#
define
CH_RIGHT_SINGLE_QUOTE
(
(
char16_t
)
0x2019
)
#
define
CH_LEFT_DOUBLE_QUOTE
(
(
char16_t
)
0x201C
)
#
define
CH_RIGHT_DOUBLE_QUOTE
(
(
char16_t
)
0x201D
)
#
define
CH_SHY
(
(
char16_t
)
0xAD
)
static_assert
(
CH_SHY
<
=
255
"
CH_SHY
is
not
an
ascii
character
"
)
;
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsFind
)
NS_INTERFACE_MAP_ENTRY
(
nsIFind
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
nsFind
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
nsFind
)
NS_IMPL_CYCLE_COLLECTION
(
nsFind
)
nsFind
:
:
nsFind
(
)
:
mFindBackward
(
false
)
mCaseSensitive
(
false
)
mMatchDiacritics
(
false
)
mWordBreaker
(
nullptr
)
{
}
nsFind
:
:
~
nsFind
(
)
=
default
;
#
ifdef
DEBUG_FIND
#
define
DEBUG_FIND_PRINTF
(
.
.
.
)
printf
(
__VA_ARGS__
)
#
else
#
define
DEBUG_FIND_PRINTF
(
.
.
.
)
#
endif
static
nsIContent
&
AnonymousSubtreeRootParent
(
const
nsINode
&
aNode
)
{
MOZ_ASSERT
(
aNode
.
IsInNativeAnonymousSubtree
(
)
)
;
return
*
aNode
.
GetClosestNativeAnonymousSubtreeRootParent
(
)
;
}
static
void
DumpNode
(
const
nsINode
*
aNode
)
{
#
ifdef
DEBUG_FIND
if
(
!
aNode
)
{
printf
(
"
>
>
>
>
Node
:
NULL
\
n
"
)
;
return
;
}
nsString
nodeName
=
aNode
-
>
NodeName
(
)
;
if
(
aNode
-
>
IsText
(
)
)
{
nsAutoString
newText
;
aNode
-
>
AsText
(
)
-
>
AppendTextTo
(
newText
)
;
printf
(
"
>
>
>
>
Text
node
(
node
name
%
s
)
:
'
%
s
'
\
n
"
NS_LossyConvertUTF16toASCII
(
nodeName
)
.
get
(
)
NS_LossyConvertUTF16toASCII
(
newText
)
.
get
(
)
)
;
}
else
{
printf
(
"
>
>
>
>
Node
:
%
s
\
n
"
NS_LossyConvertUTF16toASCII
(
nodeName
)
.
get
(
)
)
;
}
#
endif
}
static
bool
IsBlockNode
(
const
nsIContent
*
aContent
)
{
if
(
aContent
-
>
IsElement
(
)
&
&
aContent
-
>
AsElement
(
)
-
>
IsDisplayContents
(
)
)
{
return
false
;
}
if
(
aContent
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
img
nsGkAtoms
:
:
hr
nsGkAtoms
:
:
th
nsGkAtoms
:
:
td
)
)
{
return
true
;
}
nsIFrame
*
frame
=
aContent
-
>
GetPrimaryFrame
(
)
;
return
frame
&
&
frame
-
>
StyleDisplay
(
)
-
>
IsBlockOutsideStyle
(
)
;
}
static
bool
IsDisplayedNode
(
const
nsINode
*
aNode
)
{
if
(
!
aNode
-
>
IsContent
(
)
)
{
return
false
;
}
if
(
aNode
-
>
AsContent
(
)
-
>
GetPrimaryFrame
(
)
)
{
return
true
;
}
return
aNode
-
>
IsElement
(
)
&
&
aNode
-
>
AsElement
(
)
-
>
IsDisplayContents
(
)
;
}
static
bool
IsVisibleNode
(
const
nsINode
*
aNode
)
{
if
(
!
IsDisplayedNode
(
aNode
)
)
{
return
false
;
}
nsIFrame
*
frame
=
aNode
-
>
AsContent
(
)
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
return
true
;
}
return
frame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
;
}
static
bool
IsTextFormControl
(
nsIContent
&
aContent
)
{
if
(
!
aContent
.
IsNodeOfType
(
nsINode
:
:
eHTML_FORM_CONTROL
)
)
{
return
false
;
}
nsCOMPtr
<
nsIFormControl
>
formControl
=
do_QueryInterface
(
&
aContent
)
;
return
formControl
-
>
IsTextControl
(
true
)
;
}
static
bool
SkipNode
(
const
nsIContent
*
aContent
)
{
const
nsIContent
*
content
=
aContent
;
while
(
content
)
{
if
(
!
IsDisplayedNode
(
content
)
|
|
content
-
>
IsComment
(
)
|
|
content
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
script
nsGkAtoms
:
:
noframes
nsGkAtoms
:
:
select
)
)
{
DEBUG_FIND_PRINTF
(
"
Skipping
node
:
"
)
;
DumpNode
(
content
)
;
return
true
;
}
if
(
const
auto
*
option
=
HTMLOptionElement
:
:
FromNode
(
content
)
)
{
auto
*
select
=
HTMLSelectElement
:
:
FromNodeOrNull
(
option
-
>
GetParent
(
)
)
;
if
(
!
select
|
|
select
-
>
IsCombobox
(
)
)
{
DEBUG_FIND_PRINTF
(
"
Skipping
node
:
"
)
;
DumpNode
(
content
)
;
return
true
;
}
}
if
(
content
-
>
IsInNativeAnonymousSubtree
(
)
)
{
if
(
!
content
-
>
IsEditable
(
)
|
|
!
IsTextFormControl
(
AnonymousSubtreeRootParent
(
*
content
)
)
)
{
DEBUG_FIND_PRINTF
(
"
Skipping
node
:
"
)
;
DumpNode
(
content
)
;
return
true
;
}
}
if
(
IsBlockNode
(
content
)
)
{
return
false
;
}
content
=
content
-
>
GetFlattenedTreeParent
(
)
;
}
return
false
;
}
static
const
nsIContent
*
GetBlockParent
(
const
Text
&
aNode
)
{
for
(
const
nsIContent
*
current
=
aNode
.
GetFlattenedTreeParent
(
)
;
current
;
current
=
current
-
>
GetFlattenedTreeParent
(
)
)
{
if
(
IsBlockNode
(
current
)
)
{
return
current
;
}
}
return
nullptr
;
}
struct
nsFind
:
:
State
final
{
State
(
bool
aFindBackward
nsIContent
&
aRoot
const
nsRange
&
aStartPoint
)
:
mFindBackward
(
aFindBackward
)
mInitialized
(
false
)
mIterOffset
(
-
1
)
mLastBlockParent
(
nullptr
)
mIterator
(
aRoot
)
mStartPoint
(
aStartPoint
)
{
}
void
PositionAt
(
Text
&
aNode
)
{
mIterator
.
Seek
(
aNode
)
;
}
Text
*
GetCurrentNode
(
)
const
{
MOZ_ASSERT
(
mInitialized
)
;
nsINode
*
node
=
mIterator
.
GetCurrent
(
)
;
MOZ_ASSERT
(
!
node
|
|
node
-
>
IsText
(
)
)
;
return
node
?
node
-
>
GetAsText
(
)
:
nullptr
;
}
Text
*
GetNextNode
(
)
{
if
(
MOZ_UNLIKELY
(
!
mInitialized
)
)
{
Initialize
(
)
;
}
else
{
Advance
(
)
;
mIterOffset
=
-
1
;
}
return
GetCurrentNode
(
)
;
}
const
nsTextFragment
*
GetNextNonEmptyTextFragmentInSameBlock
(
)
;
private
:
void
Advance
(
)
;
void
Initialize
(
)
;
const
bool
mFindBackward
;
bool
mInitialized
;
public
:
int
mIterOffset
;
const
nsIContent
*
mLastBlockParent
;
TreeIterator
<
StyleChildrenIterator
>
mIterator
;
const
nsRange
&
mStartPoint
;
}
;
void
nsFind
:
:
State
:
:
Advance
(
)
{
MOZ_ASSERT
(
mInitialized
)
;
while
(
true
)
{
nsIContent
*
current
=
mFindBackward
?
mIterator
.
GetPrev
(
)
:
mIterator
.
GetNext
(
)
;
if
(
!
current
)
{
return
;
}
if
(
!
current
-
>
IsContent
(
)
|
|
SkipNode
(
current
-
>
AsContent
(
)
)
)
{
continue
;
}
if
(
current
-
>
IsText
(
)
)
{
return
;
}
}
}
void
nsFind
:
:
State
:
:
Initialize
(
)
{
MOZ_ASSERT
(
!
mInitialized
)
;
mInitialized
=
true
;
mIterOffset
=
mFindBackward
?
-
1
:
0
;
nsINode
*
beginning
=
mFindBackward
?
mStartPoint
.
GetEndContainer
(
)
:
mStartPoint
.
GetStartContainer
(
)
;
if
(
beginning
&
&
beginning
-
>
IsContent
(
)
)
{
mIterator
.
Seek
(
*
beginning
-
>
AsContent
(
)
)
;
}
nsINode
*
current
=
mIterator
.
GetCurrent
(
)
;
if
(
!
current
)
{
return
;
}
if
(
!
current
-
>
IsText
(
)
|
|
SkipNode
(
current
-
>
AsText
(
)
)
)
{
Advance
(
)
;
return
;
}
mLastBlockParent
=
GetBlockParent
(
*
current
-
>
AsText
(
)
)
;
if
(
current
!
=
beginning
)
{
return
;
}
mIterOffset
=
mFindBackward
?
mStartPoint
.
EndOffset
(
)
:
mStartPoint
.
StartOffset
(
)
;
}
const
nsTextFragment
*
nsFind
:
:
State
:
:
GetNextNonEmptyTextFragmentInSameBlock
(
)
{
while
(
true
)
{
const
Text
*
current
=
GetNextNode
(
)
;
if
(
!
current
)
{
return
nullptr
;
}
const
nsIContent
*
blockParent
=
GetBlockParent
(
*
current
)
;
if
(
!
blockParent
|
|
blockParent
!
=
mLastBlockParent
)
{
return
nullptr
;
}
const
nsTextFragment
&
frag
=
current
-
>
TextFragment
(
)
;
if
(
frag
.
GetLength
(
)
)
{
return
&
frag
;
}
}
}
class
MOZ_STACK_CLASS
nsFind
:
:
StateRestorer
final
{
public
:
explicit
StateRestorer
(
State
&
aState
)
:
mState
(
aState
)
mIterOffset
(
aState
.
mIterOffset
)
mCurrNode
(
aState
.
GetCurrentNode
(
)
)
mLastBlockParent
(
aState
.
mLastBlockParent
)
{
}
~
StateRestorer
(
)
{
mState
.
mIterOffset
=
mIterOffset
;
if
(
mCurrNode
)
{
mState
.
PositionAt
(
*
mCurrNode
)
;
}
mState
.
mLastBlockParent
=
mLastBlockParent
;
}
private
:
State
&
mState
;
int32_t
mIterOffset
;
Text
*
mCurrNode
;
const
nsIContent
*
mLastBlockParent
;
}
;
NS_IMETHODIMP
nsFind
:
:
GetFindBackwards
(
bool
*
aFindBackward
)
{
if
(
!
aFindBackward
)
{
return
NS_ERROR_NULL_POINTER
;
}
*
aFindBackward
=
mFindBackward
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFind
:
:
SetFindBackwards
(
bool
aFindBackward
)
{
mFindBackward
=
aFindBackward
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFind
:
:
GetCaseSensitive
(
bool
*
aCaseSensitive
)
{
if
(
!
aCaseSensitive
)
{
return
NS_ERROR_NULL_POINTER
;
}
*
aCaseSensitive
=
mCaseSensitive
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFind
:
:
SetCaseSensitive
(
bool
aCaseSensitive
)
{
mCaseSensitive
=
aCaseSensitive
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFind
:
:
GetEntireWord
(
bool
*
aEntireWord
)
{
if
(
!
aEntireWord
)
return
NS_ERROR_NULL_POINTER
;
*
aEntireWord
=
!
!
mWordBreaker
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFind
:
:
SetEntireWord
(
bool
aEntireWord
)
{
mWordBreaker
=
aEntireWord
?
nsContentUtils
:
:
WordBreaker
(
)
:
nullptr
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFind
:
:
GetMatchDiacritics
(
bool
*
aMatchDiacritics
)
{
if
(
!
aMatchDiacritics
)
{
return
NS_ERROR_NULL_POINTER
;
}
*
aMatchDiacritics
=
mMatchDiacritics
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFind
:
:
SetMatchDiacritics
(
bool
aMatchDiacritics
)
{
mMatchDiacritics
=
aMatchDiacritics
;
return
NS_OK
;
}
char32_t
nsFind
:
:
DecodeChar
(
const
char16_t
*
t2b
int32_t
*
index
)
const
{
char32_t
c
=
t2b
[
*
index
]
;
if
(
mFindBackward
)
{
if
(
*
index
>
=
1
&
&
NS_IS_SURROGATE_PAIR
(
t2b
[
*
index
-
1
]
t2b
[
*
index
]
)
)
{
c
=
SURROGATE_TO_UCS4
(
t2b
[
*
index
-
1
]
t2b
[
*
index
]
)
;
(
*
index
)
-
-
;
}
}
else
{
if
(
NS_IS_SURROGATE_PAIR
(
t2b
[
*
index
]
t2b
[
*
index
+
1
]
)
)
{
c
=
SURROGATE_TO_UCS4
(
t2b
[
*
index
]
t2b
[
*
index
+
1
]
)
;
(
*
index
)
+
+
;
}
}
return
c
;
}
bool
nsFind
:
:
BreakInBetween
(
char32_t
x
char32_t
y
)
const
{
char16_t
x16
[
2
]
y16
[
2
]
;
int32_t
x16len
y16len
;
if
(
IS_IN_BMP
(
x
)
)
{
x16
[
0
]
=
(
char16_t
)
x
;
x16len
=
1
;
}
else
{
x16
[
0
]
=
H_SURROGATE
(
x
)
;
x16
[
1
]
=
L_SURROGATE
(
x
)
;
x16len
=
2
;
}
if
(
IS_IN_BMP
(
y
)
)
{
y16
[
0
]
=
(
char16_t
)
y
;
y16len
=
1
;
}
else
{
y16
[
0
]
=
H_SURROGATE
(
y
)
;
y16
[
1
]
=
L_SURROGATE
(
y
)
;
y16len
=
2
;
}
return
mWordBreaker
-
>
BreakInBetween
(
x16
x16len
y16
y16len
)
;
}
char32_t
nsFind
:
:
PeekNextChar
(
State
&
aState
)
const
{
StateRestorer
restorer
(
aState
)
;
const
nsTextFragment
*
frag
=
aState
.
GetNextNonEmptyTextFragmentInSameBlock
(
)
;
if
(
!
frag
)
{
return
L
'
\
0
'
;
}
const
char16_t
*
t2b
=
nullptr
;
const
char
*
t1b
=
nullptr
;
if
(
frag
-
>
Is2b
(
)
)
{
t2b
=
frag
-
>
Get2b
(
)
;
}
else
{
t1b
=
frag
-
>
Get1b
(
)
;
}
uint32_t
len
=
frag
-
>
GetLength
(
)
;
MOZ_ASSERT
(
len
)
;
int32_t
index
=
mFindBackward
?
len
-
1
:
0
;
return
t1b
?
CHAR_TO_UNICHAR
(
t1b
[
index
]
)
:
DecodeChar
(
t2b
&
index
)
;
}
#
define
NBSP_CHARCODE
(
CHAR_TO_UNICHAR
(
160
)
)
#
define
IsSpace
(
c
)
(
nsCRT
:
:
IsAsciiSpace
(
c
)
|
|
(
c
)
=
=
NBSP_CHARCODE
)
#
define
OVERFLOW_PINDEX
(
mFindBackward
?
pindex
<
0
:
pindex
>
patLen
)
#
define
DONE_WITH_PINDEX
(
mFindBackward
?
pindex
<
=
0
:
pindex
>
=
patLen
)
#
define
ALMOST_DONE_WITH_PINDEX
\
(
mFindBackward
?
pindex
<
=
0
:
pindex
>
=
patLen
-
1
)
NS_IMETHODIMP
nsFind
:
:
Find
(
const
nsAString
&
aPatText
nsRange
*
aSearchRange
nsRange
*
aStartPoint
nsRange
*
aEndPoint
nsRange
*
*
aRangeRet
)
{
DEBUG_FIND_PRINTF
(
"
=
=
=
=
=
=
=
=
=
=
=
=
=
=
nsFind
:
:
Find
(
'
%
s
'
%
s
%
p
%
p
%
p
)
\
n
"
NS_LossyConvertUTF16toASCII
(
aPatText
)
.
get
(
)
mFindBackward
?
"
(
backward
)
"
:
"
(
forward
)
"
(
void
*
)
aSearchRange
(
void
*
)
aStartPoint
(
void
*
)
aEndPoint
)
;
NS_ENSURE_ARG
(
aSearchRange
)
;
NS_ENSURE_ARG
(
aStartPoint
)
;
NS_ENSURE_ARG
(
aEndPoint
)
;
NS_ENSURE_ARG_POINTER
(
aRangeRet
)
;
Document
*
document
=
aStartPoint
-
>
GetRoot
(
)
?
aStartPoint
-
>
GetRoot
(
)
-
>
OwnerDoc
(
)
:
nullptr
;
NS_ENSURE_ARG
(
document
)
;
Element
*
root
=
document
-
>
GetRootElement
(
)
;
NS_ENSURE_ARG
(
root
)
;
*
aRangeRet
=
0
;
nsAutoString
patAutoStr
(
aPatText
)
;
if
(
!
mCaseSensitive
)
{
ToFoldedCase
(
patAutoStr
)
;
}
if
(
!
mMatchDiacritics
)
{
ToNaked
(
patAutoStr
)
;
}
static
const
char
kShy
[
]
=
{
char
(
CH_SHY
)
0
}
;
patAutoStr
.
StripChars
(
kShy
)
;
const
char16_t
*
patStr
=
patAutoStr
.
get
(
)
;
int32_t
patLen
=
patAutoStr
.
Length
(
)
-
1
;
if
(
patLen
<
0
)
{
return
NS_OK
;
}
int32_t
pindex
=
(
mFindBackward
?
patLen
:
0
)
;
int32_t
findex
=
0
;
int
incr
=
(
mFindBackward
?
-
1
:
1
)
;
const
nsTextFragment
*
frag
=
nullptr
;
int32_t
fragLen
=
0
;
const
char16_t
*
t2b
=
nullptr
;
const
char
*
t1b
=
nullptr
;
bool
inWhitespace
=
false
;
bool
wordBreakPrev
=
false
;
Text
*
matchAnchorNode
=
nullptr
;
int32_t
matchAnchorOffset
=
0
;
nsINode
*
endNode
=
aEndPoint
-
>
GetEndContainer
(
)
;
uint32_t
endOffset
=
aEndPoint
-
>
EndOffset
(
)
;
char32_t
c
=
0
;
char32_t
patc
=
0
;
char32_t
prevChar
=
0
;
char32_t
prevCharInMatch
=
0
;
State
state
(
mFindBackward
*
root
*
aStartPoint
)
;
Text
*
current
=
nullptr
;
while
(
true
)
{
DEBUG_FIND_PRINTF
(
"
Loop
.
.
.
\
n
"
)
;
if
(
!
frag
)
{
current
=
state
.
GetNextNode
(
)
;
if
(
!
current
)
{
return
NS_OK
;
}
const
nsIContent
*
blockParent
=
GetBlockParent
(
*
current
)
;
DEBUG_FIND_PRINTF
(
"
New
node
:
old
blockparent
=
%
p
new
=
%
p
\
n
"
(
void
*
)
state
.
mLastBlockParent
(
void
*
)
blockParent
)
;
if
(
blockParent
!
=
state
.
mLastBlockParent
)
{
DEBUG_FIND_PRINTF
(
"
Different
block
parent
!
\
n
"
)
;
state
.
mLastBlockParent
=
blockParent
;
matchAnchorNode
=
nullptr
;
matchAnchorOffset
=
0
;
c
=
0
;
prevChar
=
0
;
prevCharInMatch
=
0
;
pindex
=
(
mFindBackward
?
patLen
:
0
)
;
inWhitespace
=
false
;
}
frag
=
&
current
-
>
TextFragment
(
)
;
fragLen
=
frag
-
>
GetLength
(
)
;
if
(
current
=
=
matchAnchorNode
)
{
findex
=
matchAnchorOffset
+
(
mFindBackward
?
1
:
0
)
;
}
else
if
(
state
.
mIterOffset
>
=
0
)
{
findex
=
state
.
mIterOffset
-
(
mFindBackward
?
1
:
0
)
;
}
else
{
findex
=
mFindBackward
?
(
fragLen
-
1
)
:
0
;
}
state
.
mIterOffset
=
-
1
;
DEBUG_FIND_PRINTF
(
"
Starting
from
offset
%
d
of
%
d
\
n
"
findex
fragLen
)
;
if
(
findex
<
0
|
|
findex
>
fragLen
-
1
)
{
DEBUG_FIND_PRINTF
(
"
At
the
end
of
a
text
node
-
-
skipping
to
the
next
\
n
"
)
;
frag
=
nullptr
;
continue
;
}
if
(
frag
-
>
Is2b
(
)
)
{
t2b
=
frag
-
>
Get2b
(
)
;
t1b
=
nullptr
;
#
ifdef
DEBUG_FIND
nsAutoString
str2
(
t2b
fragLen
)
;
DEBUG_FIND_PRINTF
(
"
2
byte
'
%
s
'
\
n
"
NS_LossyConvertUTF16toASCII
(
str2
)
.
get
(
)
)
;
#
endif
}
else
{
t1b
=
frag
-
>
Get1b
(
)
;
t2b
=
nullptr
;
#
ifdef
DEBUG_FIND
nsAutoCString
str1
(
t1b
fragLen
)
;
DEBUG_FIND_PRINTF
(
"
1
byte
'
%
s
'
\
n
"
str1
.
get
(
)
)
;
#
endif
}
}
else
{
findex
+
=
incr
;
DEBUG_FIND_PRINTF
(
"
Same
node
-
-
(
%
d
%
d
)
\
n
"
pindex
findex
)
;
if
(
mFindBackward
?
(
findex
<
0
)
:
(
findex
>
=
fragLen
)
)
{
DEBUG_FIND_PRINTF
(
"
Will
need
to
pull
a
new
node
:
mAO
=
%
d
frag
len
=
%
d
\
n
"
matchAnchorOffset
fragLen
)
;
frag
=
nullptr
;
continue
;
}
}
if
(
state
.
GetCurrentNode
(
)
=
=
endNode
&
&
(
(
mFindBackward
&
&
findex
<
static_cast
<
int32_t
>
(
endOffset
)
)
|
|
(
!
mFindBackward
&
&
findex
>
static_cast
<
int32_t
>
(
endOffset
)
)
)
)
{
return
NS_OK
;
}
prevChar
=
c
;
c
=
(
t2b
?
DecodeChar
(
t2b
&
findex
)
:
CHAR_TO_UNICHAR
(
t1b
[
findex
]
)
)
;
patc
=
DecodeChar
(
patStr
&
pindex
)
;
DEBUG_FIND_PRINTF
(
"
Comparing
'
%
c
'
=
%
#
x
to
'
%
c
'
=
%
#
x
(
%
d
of
%
d
)
findex
=
%
d
%
s
\
n
"
(
char
)
c
(
int
)
c
(
char
)
patc
(
int
)
patc
pindex
patLen
findex
inWhitespace
?
"
(
inWhitespace
)
"
:
"
"
)
;
if
(
inWhitespace
&
&
!
IsSpace
(
c
)
)
{
inWhitespace
=
false
;
pindex
+
=
incr
;
#
ifdef
DEBUG
if
(
OVERFLOW_PINDEX
)
{
NS_ASSERTION
(
false
"
Missed
a
whitespace
match
"
)
;
}
#
endif
patc
=
DecodeChar
(
patStr
&
pindex
)
;
}
if
(
!
inWhitespace
&
&
IsSpace
(
patc
)
)
{
inWhitespace
=
true
;
}
else
if
(
!
inWhitespace
)
{
if
(
!
mCaseSensitive
)
{
c
=
ToFoldedCase
(
c
)
;
}
if
(
!
mMatchDiacritics
)
{
c
=
ToNaked
(
c
)
;
}
}
if
(
c
=
=
CH_SHY
)
{
continue
;
}
if
(
!
mCaseSensitive
)
{
switch
(
c
)
{
case
CH_LEFT_SINGLE_QUOTE
:
case
CH_RIGHT_SINGLE_QUOTE
:
c
=
CH_APOSTROPHE
;
break
;
case
CH_LEFT_DOUBLE_QUOTE
:
case
CH_RIGHT_DOUBLE_QUOTE
:
c
=
CH_QUOTE
;
break
;
}
switch
(
patc
)
{
case
CH_LEFT_SINGLE_QUOTE
:
case
CH_RIGHT_SINGLE_QUOTE
:
patc
=
CH_APOSTROPHE
;
break
;
case
CH_LEFT_DOUBLE_QUOTE
:
case
CH_RIGHT_DOUBLE_QUOTE
:
patc
=
CH_QUOTE
;
break
;
}
}
if
(
pindex
!
=
(
mFindBackward
?
patLen
:
0
)
&
&
c
!
=
patc
&
&
!
inWhitespace
)
{
if
(
c
=
=
'
\
n
'
&
&
t2b
&
&
IS_CJ_CHAR
(
prevCharInMatch
)
)
{
int32_t
nindex
=
findex
+
incr
;
if
(
mFindBackward
?
(
nindex
>
=
0
)
:
(
nindex
<
fragLen
)
)
{
if
(
IS_CJ_CHAR
(
t2b
[
nindex
]
)
)
{
continue
;
}
}
}
}
wordBreakPrev
=
false
;
if
(
mWordBreaker
)
{
if
(
prevChar
=
=
NBSP_CHARCODE
)
prevChar
=
CHAR_TO_UNICHAR
(
'
'
)
;
wordBreakPrev
=
BreakInBetween
(
prevChar
c
)
;
}
if
(
(
c
=
=
patc
&
&
(
!
mWordBreaker
|
|
matchAnchorNode
|
|
wordBreakPrev
)
)
|
|
(
inWhitespace
&
&
IsSpace
(
c
)
)
)
{
prevCharInMatch
=
c
;
if
(
inWhitespace
)
{
DEBUG_FIND_PRINTF
(
"
YES
(
whitespace
)
(
%
d
of
%
d
)
\
n
"
pindex
patLen
)
;
}
else
{
DEBUG_FIND_PRINTF
(
"
YES
!
'
%
c
'
=
=
'
%
c
'
(
%
d
of
%
d
)
\
n
"
c
patc
pindex
patLen
)
;
}
if
(
!
matchAnchorNode
)
{
matchAnchorNode
=
state
.
GetCurrentNode
(
)
;
matchAnchorOffset
=
findex
;
if
(
!
IS_IN_BMP
(
c
)
)
matchAnchorOffset
-
=
incr
;
}
if
(
DONE_WITH_PINDEX
)
{
DEBUG_FIND_PRINTF
(
"
Found
a
match
!
\
n
"
)
;
if
(
mWordBreaker
)
{
int32_t
nextfindex
=
findex
+
incr
;
char16_t
nextChar
;
if
(
mFindBackward
?
(
nextfindex
>
=
0
)
:
(
nextfindex
<
fragLen
)
)
{
if
(
t2b
)
nextChar
=
DecodeChar
(
t2b
&
nextfindex
)
;
else
nextChar
=
CHAR_TO_UNICHAR
(
t1b
[
nextfindex
]
)
;
}
else
{
nextChar
=
PeekNextChar
(
state
)
;
}
if
(
nextChar
=
=
NBSP_CHARCODE
)
nextChar
=
CHAR_TO_UNICHAR
(
'
'
)
;
if
(
!
BreakInBetween
(
c
nextChar
)
)
{
matchAnchorNode
=
nullptr
;
continue
;
}
}
RefPtr
<
nsRange
>
range
=
new
nsRange
(
current
)
;
int32_t
matchStartOffset
;
int32_t
matchEndOffset
;
int32_t
mao
=
matchAnchorOffset
+
(
mFindBackward
?
1
:
0
)
;
Text
*
startParent
;
Text
*
endParent
;
if
(
mFindBackward
)
{
startParent
=
current
;
endParent
=
matchAnchorNode
;
matchStartOffset
=
findex
;
matchEndOffset
=
mao
;
}
else
{
startParent
=
matchAnchorNode
;
endParent
=
current
;
matchStartOffset
=
mao
;
matchEndOffset
=
findex
+
1
;
}
if
(
startParent
&
&
endParent
&
&
IsVisibleNode
(
startParent
)
&
&
IsVisibleNode
(
endParent
)
)
{
IgnoredErrorResult
rv
;
range
-
>
SetStart
(
*
startParent
matchStartOffset
rv
)
;
if
(
!
rv
.
Failed
(
)
)
{
range
-
>
SetEnd
(
*
endParent
matchEndOffset
rv
)
;
}
if
(
!
rv
.
Failed
(
)
)
{
range
.
forget
(
aRangeRet
)
;
return
NS_OK
;
}
}
matchAnchorNode
=
nullptr
;
}
if
(
matchAnchorNode
)
{
if
(
!
inWhitespace
|
|
DONE_WITH_PINDEX
|
|
IsSpace
(
patStr
[
pindex
+
incr
]
)
)
{
pindex
+
=
incr
;
inWhitespace
=
false
;
DEBUG_FIND_PRINTF
(
"
Advancing
pindex
to
%
d
\
n
"
pindex
)
;
}
continue
;
}
}
DEBUG_FIND_PRINTF
(
"
NOT
:
%
c
=
=
%
c
\
n
"
c
patc
)
;
if
(
matchAnchorNode
)
{
findex
=
matchAnchorOffset
;
state
.
mIterOffset
=
matchAnchorOffset
;
if
(
matchAnchorNode
!
=
state
.
GetCurrentNode
(
)
)
{
frag
=
nullptr
;
state
.
PositionAt
(
*
matchAnchorNode
)
;
DEBUG_FIND_PRINTF
(
"
Repositioned
anchor
node
\
n
"
)
;
}
DEBUG_FIND_PRINTF
(
"
Ending
a
partial
match
;
findex
-
>
%
d
mIterOffset
-
>
%
d
\
n
"
findex
state
.
mIterOffset
)
;
}
matchAnchorNode
=
nullptr
;
matchAnchorOffset
=
0
;
inWhitespace
=
false
;
pindex
=
mFindBackward
?
patLen
:
0
;
DEBUG_FIND_PRINTF
(
"
Setting
findex
back
to
%
d
pindex
to
%
d
\
n
"
findex
pindex
)
;
}
return
NS_OK
;
}
