#
include
"
nsWebBrowserFind
.
h
"
#
include
"
nsFind
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsISelection
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsITextControlFrame
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsFind
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
if
DEBUG
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsString
.
h
"
#
endif
using
mozilla
:
:
dom
:
:
Selection
;
using
mozilla
:
:
dom
:
:
Element
;
nsWebBrowserFind
:
:
nsWebBrowserFind
(
)
:
mFindBackwards
(
false
)
mWrapFind
(
false
)
mEntireWord
(
false
)
mMatchCase
(
false
)
mSearchSubFrames
(
true
)
mSearchParentFrames
(
true
)
{
}
nsWebBrowserFind
:
:
~
nsWebBrowserFind
(
)
{
}
NS_IMPL_ISUPPORTS
(
nsWebBrowserFind
nsIWebBrowserFind
nsIWebBrowserFindInFrames
)
NS_IMETHODIMP
nsWebBrowserFind
:
:
FindNext
(
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aResult
)
;
*
aResult
=
false
;
NS_ENSURE_TRUE
(
CanFindNext
(
)
NS_ERROR_NOT_INITIALIZED
)
;
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
searchFrame
=
do_QueryReferent
(
mCurrentSearchFrame
)
;
NS_ENSURE_TRUE
(
searchFrame
NS_ERROR_NOT_INITIALIZED
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootFrame
=
do_QueryReferent
(
mRootSearchFrame
)
;
NS_ENSURE_TRUE
(
rootFrame
NS_ERROR_NOT_INITIALIZED
)
;
nsCOMPtr
<
nsIObserverService
>
observerSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerSvc
)
{
nsCOMPtr
<
nsISupportsInterfacePointer
>
windowSupportsData
=
do_CreateInstance
(
NS_SUPPORTS_INTERFACE_POINTER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsISupports
>
searchWindowSupports
=
do_QueryInterface
(
rootFrame
)
;
windowSupportsData
-
>
SetData
(
searchWindowSupports
)
;
observerSvc
-
>
NotifyObservers
(
windowSupportsData
"
nsWebBrowserFind_FindAgain
"
mFindBackwards
?
u
"
up
"
:
u
"
down
"
)
;
windowSupportsData
-
>
GetData
(
getter_AddRefs
(
searchWindowSupports
)
)
;
*
aResult
=
searchWindowSupports
=
=
nullptr
;
if
(
*
aResult
)
{
return
NS_OK
;
}
}
rv
=
SearchInFrame
(
searchFrame
false
aResult
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
*
aResult
)
{
return
OnFind
(
searchFrame
)
;
}
if
(
!
mSearchSubFrames
&
&
!
mSearchParentFrames
)
{
return
NS_OK
;
}
nsIDocShell
*
rootDocShell
=
rootFrame
-
>
GetDocShell
(
)
;
if
(
!
rootDocShell
)
{
return
NS_ERROR_FAILURE
;
}
int32_t
enumDirection
=
mFindBackwards
?
nsIDocShell
:
:
ENUMERATE_BACKWARDS
:
nsIDocShell
:
:
ENUMERATE_FORWARDS
;
nsCOMPtr
<
nsISimpleEnumerator
>
docShellEnumerator
;
rv
=
rootDocShell
-
>
GetDocShellEnumerator
(
nsIDocShellTreeItem
:
:
typeAll
enumDirection
getter_AddRefs
(
docShellEnumerator
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
startingItem
=
do_QueryInterface
(
searchFrame
-
>
GetDocShell
(
)
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
curItem
;
bool
hasMore
doFind
=
false
;
while
(
NS_SUCCEEDED
(
docShellEnumerator
-
>
HasMoreElements
(
&
hasMore
)
)
&
&
hasMore
)
{
nsCOMPtr
<
nsISupports
>
curSupports
;
rv
=
docShellEnumerator
-
>
GetNext
(
getter_AddRefs
(
curSupports
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
curItem
=
do_QueryInterface
(
curSupports
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
if
(
doFind
)
{
searchFrame
=
curItem
-
>
GetWindow
(
)
;
if
(
!
searchFrame
)
{
break
;
}
OnStartSearchFrame
(
searchFrame
)
;
rv
=
SearchInFrame
(
searchFrame
false
aResult
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
*
aResult
)
{
return
OnFind
(
searchFrame
)
;
}
OnEndSearchFrame
(
searchFrame
)
;
}
if
(
curItem
.
get
(
)
=
=
startingItem
.
get
(
)
)
{
doFind
=
true
;
}
}
if
(
!
mWrapFind
)
{
SetCurrentSearchFrame
(
searchFrame
)
;
return
NS_OK
;
}
docShellEnumerator
=
nullptr
;
rv
=
rootDocShell
-
>
GetDocShellEnumerator
(
nsIDocShellTreeItem
:
:
typeAll
enumDirection
getter_AddRefs
(
docShellEnumerator
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
while
(
NS_SUCCEEDED
(
docShellEnumerator
-
>
HasMoreElements
(
&
hasMore
)
)
&
&
hasMore
)
{
nsCOMPtr
<
nsISupports
>
curSupports
;
rv
=
docShellEnumerator
-
>
GetNext
(
getter_AddRefs
(
curSupports
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
curItem
=
do_QueryInterface
(
curSupports
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
searchFrame
=
curItem
-
>
GetWindow
(
)
;
if
(
!
searchFrame
)
{
rv
=
NS_ERROR_FAILURE
;
break
;
}
if
(
curItem
.
get
(
)
=
=
startingItem
.
get
(
)
)
{
rv
=
SearchInFrame
(
searchFrame
true
aResult
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
*
aResult
)
{
return
OnFind
(
searchFrame
)
;
}
break
;
}
OnStartSearchFrame
(
searchFrame
)
;
rv
=
SearchInFrame
(
searchFrame
false
aResult
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
*
aResult
)
{
return
OnFind
(
searchFrame
)
;
}
OnEndSearchFrame
(
searchFrame
)
;
}
SetCurrentSearchFrame
(
searchFrame
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Something
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetSearchString
(
char16_t
*
*
aSearchString
)
{
NS_ENSURE_ARG_POINTER
(
aSearchString
)
;
*
aSearchString
=
ToNewUnicode
(
mSearchString
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetSearchString
(
const
char16_t
*
aSearchString
)
{
mSearchString
.
Assign
(
aSearchString
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetFindBackwards
(
bool
*
aFindBackwards
)
{
NS_ENSURE_ARG_POINTER
(
aFindBackwards
)
;
*
aFindBackwards
=
mFindBackwards
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetFindBackwards
(
bool
aFindBackwards
)
{
mFindBackwards
=
aFindBackwards
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetWrapFind
(
bool
*
aWrapFind
)
{
NS_ENSURE_ARG_POINTER
(
aWrapFind
)
;
*
aWrapFind
=
mWrapFind
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetWrapFind
(
bool
aWrapFind
)
{
mWrapFind
=
aWrapFind
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetEntireWord
(
bool
*
aEntireWord
)
{
NS_ENSURE_ARG_POINTER
(
aEntireWord
)
;
*
aEntireWord
=
mEntireWord
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetEntireWord
(
bool
aEntireWord
)
{
mEntireWord
=
aEntireWord
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetMatchCase
(
bool
*
aMatchCase
)
{
NS_ENSURE_ARG_POINTER
(
aMatchCase
)
;
*
aMatchCase
=
mMatchCase
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetMatchCase
(
bool
aMatchCase
)
{
mMatchCase
=
aMatchCase
;
return
NS_OK
;
}
static
bool
IsInNativeAnonymousSubtree
(
nsIContent
*
aContent
)
{
while
(
aContent
)
{
nsIContent
*
bindingParent
=
aContent
-
>
GetBindingParent
(
)
;
if
(
bindingParent
=
=
aContent
)
{
return
true
;
}
aContent
=
bindingParent
;
}
return
false
;
}
void
nsWebBrowserFind
:
:
SetSelectionAndScroll
(
nsPIDOMWindowOuter
*
aWindow
nsRange
*
aRange
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
aWindow
-
>
GetDoc
(
)
;
if
(
!
doc
)
{
return
;
}
nsIPresShell
*
presShell
=
doc
-
>
GetShell
(
)
;
if
(
!
presShell
)
{
return
;
}
nsCOMPtr
<
nsINode
>
node
=
aRange
-
>
GetStartContainer
(
)
;
nsCOMPtr
<
nsIContent
>
content
(
do_QueryInterface
(
node
)
)
;
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
return
;
}
nsCOMPtr
<
nsISelectionController
>
selCon
;
frame
-
>
GetSelectionController
(
presShell
-
>
GetPresContext
(
)
getter_AddRefs
(
selCon
)
)
;
nsITextControlFrame
*
tcFrame
=
nullptr
;
for
(
;
content
;
content
=
content
-
>
GetParent
(
)
)
{
if
(
!
IsInNativeAnonymousSubtree
(
content
)
)
{
nsIFrame
*
f
=
content
-
>
GetPrimaryFrame
(
)
;
if
(
!
f
)
{
return
;
}
tcFrame
=
do_QueryFrame
(
f
)
;
break
;
}
}
selCon
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_ON
)
;
RefPtr
<
Selection
>
selection
=
selCon
-
>
GetDOMSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
if
(
selection
)
{
selection
-
>
RemoveAllRanges
(
IgnoreErrors
(
)
)
;
selection
-
>
AddRange
(
*
aRange
IgnoreErrors
(
)
)
;
nsCOMPtr
<
nsIFocusManager
>
fm
=
do_GetService
(
FOCUSMANAGER_CONTRACTID
)
;
if
(
fm
)
{
if
(
tcFrame
)
{
RefPtr
<
Element
>
newFocusedElement
=
content
-
>
IsElement
(
)
?
content
-
>
AsElement
(
)
:
nullptr
;
fm
-
>
SetFocus
(
newFocusedElement
nsIFocusManager
:
:
FLAG_NOSCROLL
)
;
}
else
{
nsCOMPtr
<
nsIDOMElement
>
result
;
fm
-
>
MoveFocus
(
aWindow
nullptr
nsIFocusManager
:
:
MOVEFOCUS_CARET
nsIFocusManager
:
:
FLAG_NOSCROLL
getter_AddRefs
(
result
)
)
;
}
}
selCon
-
>
ScrollSelectionIntoView
(
nsISelectionController
:
:
SELECTION_NORMAL
nsISelectionController
:
:
SELECTION_WHOLE_SELECTION
nsISelectionController
:
:
SCROLL_CENTER_VERTICALLY
|
nsISelectionController
:
:
SCROLL_SYNCHRONOUS
)
;
}
}
nsresult
nsWebBrowserFind
:
:
GetRootNode
(
nsIDOMDocument
*
aDomDoc
nsIDOMNode
*
*
aNode
)
{
NS_ENSURE_ARG_POINTER
(
aNode
)
;
*
aNode
=
0
;
nsCOMPtr
<
nsIDocument
>
doc
=
do_QueryInterface
(
aDomDoc
)
;
NS_ENSURE_ARG_POINTER
(
doc
)
;
if
(
doc
-
>
IsHTMLOrXHTML
(
)
)
{
Element
*
body
=
doc
-
>
GetBody
(
)
;
NS_ENSURE_ARG_POINTER
(
body
)
;
NS_ADDREF
(
*
aNode
=
body
-
>
AsDOMNode
(
)
)
;
return
NS_OK
;
}
Element
*
root
=
doc
-
>
GetDocumentElement
(
)
;
NS_ENSURE_ARG_POINTER
(
root
)
;
NS_ADDREF
(
*
aNode
=
root
-
>
AsDOMNode
(
)
)
;
return
NS_OK
;
}
nsresult
nsWebBrowserFind
:
:
SetRangeAroundDocument
(
nsRange
*
aSearchRange
nsRange
*
aStartPt
nsRange
*
aEndPt
nsIDOMDocument
*
aDoc
)
{
nsCOMPtr
<
nsIDOMNode
>
bodyNode
;
nsresult
rv
=
GetRootNode
(
aDoc
getter_AddRefs
(
bodyNode
)
)
;
nsCOMPtr
<
nsIContent
>
bodyContent
(
do_QueryInterface
(
bodyNode
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_ARG_POINTER
(
bodyContent
)
;
uint32_t
childCount
=
bodyContent
-
>
GetChildCount
(
)
;
aSearchRange
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aSearchRange
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
if
(
mFindBackwards
)
{
aStartPt
-
>
SetStart
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetEnd
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
}
else
{
aStartPt
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetEnd
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetStart
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
}
return
NS_OK
;
}
nsresult
nsWebBrowserFind
:
:
GetSearchLimits
(
nsRange
*
aSearchRange
nsRange
*
aStartPt
nsRange
*
aEndPt
nsIDOMDocument
*
aDoc
nsISelection
*
aSel
bool
aWrap
)
{
NS_ENSURE_ARG_POINTER
(
aSel
)
;
Selection
*
sel
=
aSel
-
>
AsSelection
(
)
;
uint32_t
count
=
sel
-
>
RangeCount
(
)
;
if
(
count
<
1
)
{
return
SetRangeAroundDocument
(
aSearchRange
aStartPt
aEndPt
aDoc
)
;
}
nsCOMPtr
<
nsIDOMNode
>
bodyNode
;
nsresult
rv
=
GetRootNode
(
aDoc
getter_AddRefs
(
bodyNode
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIContent
>
bodyContent
(
do_QueryInterface
(
bodyNode
)
)
;
NS_ENSURE_ARG_POINTER
(
bodyContent
)
;
uint32_t
childCount
=
bodyContent
-
>
GetChildCount
(
)
;
RefPtr
<
nsRange
>
range
;
nsCOMPtr
<
nsINode
>
node
;
uint32_t
offset
;
if
(
!
mFindBackwards
&
&
!
aWrap
)
{
range
=
sel
-
>
GetRangeAt
(
count
-
1
)
;
if
(
!
range
)
{
return
NS_ERROR_UNEXPECTED
;
}
node
=
range
-
>
GetEndContainer
(
)
;
if
(
!
node
)
{
return
NS_ERROR_UNEXPECTED
;
}
offset
=
range
-
>
EndOffset
(
)
;
aSearchRange
-
>
SetStart
(
*
node
offset
IgnoreErrors
(
)
)
;
aSearchRange
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetStart
(
*
node
offset
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetEnd
(
*
node
offset
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetStart
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
}
else
if
(
mFindBackwards
&
&
!
aWrap
)
{
range
=
sel
-
>
GetRangeAt
(
0
)
;
if
(
!
range
)
{
return
NS_ERROR_UNEXPECTED
;
}
node
=
range
-
>
GetStartContainer
(
)
;
if
(
!
node
)
{
return
NS_ERROR_UNEXPECTED
;
}
offset
=
range
-
>
StartOffset
(
)
;
aSearchRange
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aSearchRange
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetStart
(
*
node
offset
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetEnd
(
*
node
offset
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetEnd
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
}
else
if
(
!
mFindBackwards
&
&
aWrap
)
{
range
=
sel
-
>
GetRangeAt
(
count
-
1
)
;
if
(
!
range
)
{
return
NS_ERROR_UNEXPECTED
;
}
node
=
range
-
>
GetEndContainer
(
)
;
if
(
!
node
)
{
return
NS_ERROR_UNEXPECTED
;
}
offset
=
range
-
>
EndOffset
(
)
;
aSearchRange
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aSearchRange
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetEnd
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetStart
(
*
node
offset
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetEnd
(
*
node
offset
IgnoreErrors
(
)
)
;
}
else
if
(
mFindBackwards
&
&
aWrap
)
{
range
=
sel
-
>
GetRangeAt
(
0
)
;
if
(
!
range
)
{
return
NS_ERROR_UNEXPECTED
;
}
node
=
range
-
>
GetStartContainer
(
)
;
if
(
!
node
)
{
return
NS_ERROR_UNEXPECTED
;
}
offset
=
range
-
>
StartOffset
(
)
;
aSearchRange
-
>
SetStart
(
*
bodyContent
0
IgnoreErrors
(
)
)
;
aSearchRange
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetStart
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aStartPt
-
>
SetEnd
(
*
bodyContent
childCount
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetStart
(
*
node
offset
IgnoreErrors
(
)
)
;
aEndPt
-
>
SetEnd
(
*
node
offset
IgnoreErrors
(
)
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetSearchFrames
(
bool
*
aSearchFrames
)
{
NS_ENSURE_ARG_POINTER
(
aSearchFrames
)
;
*
aSearchFrames
=
mSearchSubFrames
&
&
mSearchParentFrames
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetSearchFrames
(
bool
aSearchFrames
)
{
mSearchSubFrames
=
aSearchFrames
;
mSearchParentFrames
=
aSearchFrames
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetCurrentSearchFrame
(
mozIDOMWindowProxy
*
*
aCurrentSearchFrame
)
{
NS_ENSURE_ARG_POINTER
(
aCurrentSearchFrame
)
;
nsCOMPtr
<
mozIDOMWindowProxy
>
searchFrame
=
do_QueryReferent
(
mCurrentSearchFrame
)
;
searchFrame
.
forget
(
aCurrentSearchFrame
)
;
return
(
*
aCurrentSearchFrame
)
?
NS_OK
:
NS_ERROR_NOT_INITIALIZED
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetCurrentSearchFrame
(
mozIDOMWindowProxy
*
aCurrentSearchFrame
)
{
NS_ENSURE_ARG
(
aCurrentSearchFrame
)
;
mCurrentSearchFrame
=
do_GetWeakReference
(
aCurrentSearchFrame
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetRootSearchFrame
(
mozIDOMWindowProxy
*
*
aRootSearchFrame
)
{
NS_ENSURE_ARG_POINTER
(
aRootSearchFrame
)
;
nsCOMPtr
<
mozIDOMWindowProxy
>
searchFrame
=
do_QueryReferent
(
mRootSearchFrame
)
;
searchFrame
.
forget
(
aRootSearchFrame
)
;
return
(
*
aRootSearchFrame
)
?
NS_OK
:
NS_ERROR_NOT_INITIALIZED
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetRootSearchFrame
(
mozIDOMWindowProxy
*
aRootSearchFrame
)
{
NS_ENSURE_ARG
(
aRootSearchFrame
)
;
mRootSearchFrame
=
do_GetWeakReference
(
aRootSearchFrame
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetSearchSubframes
(
bool
*
aSearchSubframes
)
{
NS_ENSURE_ARG_POINTER
(
aSearchSubframes
)
;
*
aSearchSubframes
=
mSearchSubFrames
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetSearchSubframes
(
bool
aSearchSubframes
)
{
mSearchSubFrames
=
aSearchSubframes
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
GetSearchParentFrames
(
bool
*
aSearchParentFrames
)
{
NS_ENSURE_ARG_POINTER
(
aSearchParentFrames
)
;
*
aSearchParentFrames
=
mSearchParentFrames
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebBrowserFind
:
:
SetSearchParentFrames
(
bool
aSearchParentFrames
)
{
mSearchParentFrames
=
aSearchParentFrames
;
return
NS_OK
;
}
nsresult
nsWebBrowserFind
:
:
SearchInFrame
(
nsPIDOMWindowOuter
*
aWindow
bool
aWrapping
bool
*
aDidFind
)
{
NS_ENSURE_ARG
(
aWindow
)
;
NS_ENSURE_ARG_POINTER
(
aDidFind
)
;
*
aDidFind
=
false
;
nsCOMPtr
<
nsIDocument
>
theDoc
=
aWindow
-
>
GetDoc
(
)
;
if
(
!
theDoc
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
nsContentUtils
:
:
SubjectPrincipal
(
)
-
>
Subsumes
(
theDoc
-
>
NodePrincipal
(
)
)
)
{
return
NS_ERROR_DOM_PROP_ACCESS_DENIED
;
}
nsresult
rv
;
nsCOMPtr
<
nsIFind
>
find
=
do_CreateInstance
(
NS_FIND_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
(
void
)
find
-
>
SetCaseSensitive
(
mMatchCase
)
;
(
void
)
find
-
>
SetFindBackwards
(
mFindBackwards
)
;
(
void
)
find
-
>
SetEntireWord
(
mEntireWord
)
;
theDoc
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
RefPtr
<
Selection
>
sel
=
GetFrameSelection
(
aWindow
)
;
NS_ENSURE_ARG_POINTER
(
sel
)
;
RefPtr
<
nsRange
>
searchRange
=
new
nsRange
(
theDoc
)
;
RefPtr
<
nsRange
>
startPt
=
new
nsRange
(
theDoc
)
;
RefPtr
<
nsRange
>
endPt
=
new
nsRange
(
theDoc
)
;
NS_ENSURE_ARG_POINTER
(
endPt
)
;
nsCOMPtr
<
nsIDOMRange
>
foundRange
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
=
do_QueryInterface
(
theDoc
)
;
MOZ_ASSERT
(
domDoc
)
;
if
(
!
aWrapping
)
rv
=
GetSearchLimits
(
searchRange
startPt
endPt
domDoc
sel
false
)
;
else
rv
=
GetSearchLimits
(
searchRange
startPt
endPt
domDoc
sel
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
find
-
>
Find
(
mSearchString
.
get
(
)
searchRange
startPt
endPt
getter_AddRefs
(
foundRange
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
foundRange
)
{
*
aDidFind
=
true
;
sel
-
>
RemoveAllRanges
(
IgnoreErrors
(
)
)
;
SetSelectionAndScroll
(
aWindow
static_cast
<
nsRange
*
>
(
foundRange
.
get
(
)
)
)
;
}
return
rv
;
}
nsresult
nsWebBrowserFind
:
:
OnStartSearchFrame
(
nsPIDOMWindowOuter
*
aWindow
)
{
return
ClearFrameSelection
(
aWindow
)
;
}
nsresult
nsWebBrowserFind
:
:
OnEndSearchFrame
(
nsPIDOMWindowOuter
*
aWindow
)
{
return
NS_OK
;
}
already_AddRefed
<
Selection
>
nsWebBrowserFind
:
:
GetFrameSelection
(
nsPIDOMWindowOuter
*
aWindow
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
aWindow
-
>
GetDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
nsIPresShell
*
presShell
=
doc
-
>
GetShell
(
)
;
if
(
!
presShell
)
{
return
nullptr
;
}
nsPresContext
*
presContext
=
presShell
-
>
GetPresContext
(
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
nsCOMPtr
<
nsIContent
>
focusedContent
=
nsFocusManager
:
:
GetFocusedDescendant
(
aWindow
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
focusedWindow
)
)
;
nsIFrame
*
frame
=
focusedContent
?
focusedContent
-
>
GetPrimaryFrame
(
)
:
nullptr
;
nsCOMPtr
<
nsISelectionController
>
selCon
;
RefPtr
<
Selection
>
sel
;
if
(
frame
)
{
frame
-
>
GetSelectionController
(
presContext
getter_AddRefs
(
selCon
)
)
;
sel
=
selCon
-
>
GetDOMSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
if
(
sel
&
&
sel
-
>
RangeCount
(
)
>
0
)
{
return
sel
.
forget
(
)
;
}
}
selCon
=
do_QueryInterface
(
presShell
)
;
sel
=
selCon
-
>
GetDOMSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
return
sel
.
forget
(
)
;
}
nsresult
nsWebBrowserFind
:
:
ClearFrameSelection
(
nsPIDOMWindowOuter
*
aWindow
)
{
NS_ENSURE_ARG
(
aWindow
)
;
RefPtr
<
Selection
>
selection
=
GetFrameSelection
(
aWindow
)
;
if
(
selection
)
{
selection
-
>
RemoveAllRanges
(
IgnoreErrors
(
)
)
;
}
return
NS_OK
;
}
nsresult
nsWebBrowserFind
:
:
OnFind
(
nsPIDOMWindowOuter
*
aFoundWindow
)
{
SetCurrentSearchFrame
(
aFoundWindow
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
lastFocusedWindow
=
do_QueryReferent
(
mLastFocusedWindow
)
;
if
(
lastFocusedWindow
&
&
lastFocusedWindow
!
=
aFoundWindow
)
{
ClearFrameSelection
(
lastFocusedWindow
)
;
}
nsCOMPtr
<
nsIFocusManager
>
fm
=
do_GetService
(
FOCUSMANAGER_CONTRACTID
)
;
if
(
fm
)
{
RefPtr
<
Element
>
frameElement
=
aFoundWindow
-
>
GetFrameElementInternal
(
)
;
if
(
frameElement
)
{
fm
-
>
SetFocus
(
frameElement
0
)
;
}
mLastFocusedWindow
=
do_GetWeakReference
(
aFoundWindow
)
;
}
return
NS_OK
;
}
