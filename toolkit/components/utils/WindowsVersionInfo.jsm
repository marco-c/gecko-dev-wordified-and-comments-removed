"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
WindowsVersionInfo
"
]
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
ctypes
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
const
BYTE
=
ctypes
.
uint8_t
;
const
WORD
=
ctypes
.
uint16_t
;
const
DWORD
=
ctypes
.
uint32_t
;
const
WCHAR
=
ctypes
.
char16_t
;
const
BOOL
=
ctypes
.
int
;
var
WindowsVersionInfo
=
{
UNKNOWN_VERSION_INFO
:
{
servicePackMajor
:
null
servicePackMinor
:
null
buildNumber
:
null
}
get
(
{
throwOnError
=
true
}
=
{
}
)
{
function
throwOrUnknown
(
err
)
{
if
(
throwOnError
)
{
throw
err
;
}
Cu
.
reportError
(
err
)
;
return
WindowsVersionInfo
.
UNKNOWN_VERSION_INFO
;
}
if
(
AppConstants
.
platform
!
=
=
"
win
"
)
{
return
throwOrUnknown
(
WindowsVersionInfo
.
NotWindowsError
(
Cannot
get
Windows
version
info
on
platform
{
AppConstants
.
platform
}
)
)
;
}
const
SZCSDVERSIONLENGTH
=
128
;
const
OSVERSIONINFOEXW
=
new
ctypes
.
StructType
(
"
OSVERSIONINFOEXW
"
[
{
dwOSVersionInfoSize
:
DWORD
}
{
dwMajorVersion
:
DWORD
}
{
dwMinorVersion
:
DWORD
}
{
dwBuildNumber
:
DWORD
}
{
dwPlatformId
:
DWORD
}
{
szCSDVersion
:
ctypes
.
ArrayType
(
WCHAR
SZCSDVERSIONLENGTH
)
}
{
wServicePackMajor
:
WORD
}
{
wServicePackMinor
:
WORD
}
{
wSuiteMask
:
WORD
}
{
wProductType
:
BYTE
}
{
wReserved
:
BYTE
}
]
)
;
let
kernel32
;
try
{
kernel32
=
ctypes
.
open
(
"
kernel32
"
)
;
}
catch
(
err
)
{
return
throwOrUnknown
(
new
WindowsVersionInfo
.
CannotOpenKernelError
(
Unable
to
open
kernel32
!
{
err
}
)
)
;
}
try
{
let
GetVersionEx
=
kernel32
.
declare
(
"
GetVersionExW
"
ctypes
.
winapi_abi
BOOL
OSVERSIONINFOEXW
.
ptr
)
;
let
winVer
=
OSVERSIONINFOEXW
(
)
;
winVer
.
dwOSVersionInfoSize
=
OSVERSIONINFOEXW
.
size
;
if
(
GetVersionEx
(
winVer
.
address
(
)
)
=
=
=
0
)
{
throw
new
WindowsVersionInfo
.
GetVersionExError
(
"
Failure
in
GetVersionEx
(
returned
0
)
"
)
;
}
return
{
servicePackMajor
:
winVer
.
wServicePackMajor
servicePackMinor
:
winVer
.
wServicePackMinor
buildNumber
:
winVer
.
dwBuildNumber
}
;
}
catch
(
err
)
{
return
throwOrUnknown
(
err
)
;
}
finally
{
if
(
kernel32
)
{
kernel32
.
close
(
)
;
}
}
}
CannotOpenKernelError
:
class
extends
Error
{
}
GetVersionExError
:
class
extends
Error
{
}
NotWindowsError
:
class
extends
Error
{
}
}
;
