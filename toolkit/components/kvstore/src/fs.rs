use
std
:
:
{
io
path
:
:
PathBuf
}
;
use
nsstring
:
:
nsAString
;
pub
fn
canonicalize
(
path
:
&
nsAString
)
-
>
io
:
:
Result
<
PathBuf
>
{
#
[
cfg
(
windows
)
]
{
use
std
:
:
{
ffi
:
:
OsString
os
:
:
windows
:
:
prelude
:
:
*
}
;
std
:
:
fs
:
:
canonicalize
(
OsString
:
:
from_wide
(
&
*
path
)
)
}
#
[
cfg
(
unix
)
]
{
use
std
:
:
{
ffi
:
:
{
CStr
CString
OsString
}
os
:
:
unix
:
:
prelude
:
:
*
}
;
let
path
=
CString
:
:
new
(
String
:
:
from_utf16
(
&
*
path
)
.
map_err
(
io
:
:
Error
:
:
other
)
?
)
?
;
let
mut
bytes
=
[
0
as
libc
:
:
c_char
;
libc
:
:
PATH_MAX
as
usize
]
;
let
ptr
=
unsafe
{
libc
:
:
realpath
(
path
.
as_ptr
(
)
bytes
[
.
.
]
.
as_mut_ptr
(
)
)
}
;
if
ptr
.
is_null
(
)
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
Ok
(
OsString
:
:
from_vec
(
unsafe
{
CStr
:
:
from_ptr
(
ptr
)
}
.
to_bytes
(
)
.
into
(
)
)
.
into
(
)
)
}
#
[
cfg
(
all
(
not
(
unix
)
not
(
windows
)
)
)
]
compile_error
!
(
"
kvstore
:
:
fs
:
:
canonicalize
requires
Windows
or
Unix
"
)
}
