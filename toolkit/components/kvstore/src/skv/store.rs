use
std
:
:
{
borrow
:
:
Cow
mem
ops
:
:
Deref
path
:
:
{
Path
PathBuf
}
sync
:
:
{
atomic
:
:
{
self
AtomicUsize
}
Arc
Condvar
Mutex
}
}
;
use
rusqlite
:
:
OpenFlags
;
use
crate
:
:
skv
:
:
{
connection
:
:
{
Connection
ConnectionPath
ConnectionType
}
schema
:
:
{
Schema
SchemaError
}
}
;
#
[
derive
(
Debug
)
]
pub
struct
Store
{
state
:
Mutex
<
StoreState
>
waiter
:
OperationWaiter
}
impl
Store
{
pub
fn
new
(
path
:
StorePath
)
-
>
Self
{
Self
{
state
:
Mutex
:
:
new
(
StoreState
:
:
Created
(
path
)
)
waiter
:
OperationWaiter
:
:
new
(
)
}
}
fn
open
(
&
self
)
-
>
Result
<
OpenStore
StoreError
>
{
let
mut
state
=
self
.
state
.
lock
(
)
.
unwrap
(
)
;
Ok
(
match
&
*
state
{
StoreState
:
:
Created
(
path
)
=
>
{
let
store
=
OpenStore
:
:
new
(
path
)
?
;
*
state
=
StoreState
:
:
Open
(
store
.
clone
(
)
)
;
store
}
StoreState
:
:
Open
(
store
)
=
>
store
.
clone
(
)
StoreState
:
:
Closed
=
>
Err
(
StoreError
:
:
Closed
)
?
}
)
}
pub
fn
writer
(
&
self
)
-
>
Result
<
ConnectionGuard
<
'
_
>
StoreError
>
{
Ok
(
ConnectionGuard
:
:
new
(
self
.
open
(
)
?
.
writer
&
self
.
waiter
)
)
}
pub
fn
reader
(
&
self
)
-
>
Result
<
ConnectionGuard
<
'
_
>
StoreError
>
{
Ok
(
ConnectionGuard
:
:
new
(
self
.
open
(
)
?
.
reader
&
self
.
waiter
)
)
}
pub
fn
close
(
&
self
)
{
let
store
=
match
mem
:
:
replace
(
&
mut
*
self
.
state
.
lock
(
)
.
unwrap
(
)
StoreState
:
:
Closed
)
{
StoreState
:
:
Created
(
_
)
|
StoreState
:
:
Closed
=
>
return
StoreState
:
:
Open
(
store
)
=
>
store
}
;
store
.
reader
.
interrupt
(
)
;
self
.
waiter
.
wait
(
)
;
let
reader
=
Arc
:
:
into_inner
(
store
.
reader
)
.
expect
(
"
invariant
violation
"
)
;
let
writer
=
Arc
:
:
into_inner
(
store
.
writer
)
.
expect
(
"
invariant
violation
"
)
;
let
_
=
reader
.
into_inner
(
)
.
close
(
)
;
let
_
=
writer
.
into_inner
(
)
.
close
(
)
;
}
}
#
[
derive
(
Clone
Debug
Eq
Hash
Ord
PartialEq
PartialOrd
)
]
pub
enum
StorePath
{
OnDisk
(
PathBuf
)
InMemory
(
usize
)
}
impl
StorePath
{
pub
const
IN_MEMORY_DATABASE_NAME
:
&
'
static
str
=
"
:
memory
:
"
;
const
DEFAULT_DATABASE_FILE_NAME
:
&
'
static
str
=
"
kvstore
.
sqlite
"
;
pub
fn
for_storage_dir
(
dir
:
impl
Into
<
PathBuf
>
)
-
>
Self
{
let
mut
path
=
dir
.
into
(
)
;
path
.
push
(
Self
:
:
DEFAULT_DATABASE_FILE_NAME
)
;
Self
:
:
OnDisk
(
path
)
}
pub
fn
for_in_memory
(
)
-
>
Self
{
static
NEXT_IN_MEMORY_DATABASE_ID
:
AtomicUsize
=
AtomicUsize
:
:
new
(
1
)
;
let
id
=
NEXT_IN_MEMORY_DATABASE_ID
.
fetch_add
(
1
atomic
:
:
Ordering
:
:
Relaxed
)
;
Self
:
:
InMemory
(
id
)
}
}
impl
ConnectionPath
for
StorePath
{
fn
as_path
(
&
self
)
-
>
Cow
<
'
_
Path
>
{
match
self
{
Self
:
:
OnDisk
(
buf
)
=
>
Cow
:
:
Borrowed
(
buf
.
as_path
(
)
)
Self
:
:
InMemory
(
id
)
=
>
{
Cow
:
:
Owned
(
format
!
(
"
file
:
kvstore
-
{
id
}
?
mode
=
memory
&
cache
=
shared
"
)
.
into
(
)
)
}
}
}
fn
flags
(
&
self
)
-
>
OpenFlags
{
match
self
{
Self
:
:
OnDisk
(
_
)
=
>
OpenFlags
:
:
empty
(
)
Self
:
:
InMemory
(
_
)
=
>
{
OpenFlags
:
:
SQLITE_OPEN_URI
}
}
}
}
pub
struct
ConnectionGuard
<
'
a
>
{
conn
:
Arc
<
Connection
>
waiter
:
&
'
a
OperationWaiter
}
impl
<
'
a
>
ConnectionGuard
<
'
a
>
{
fn
new
(
conn
:
Arc
<
Connection
>
waiter
:
&
'
a
OperationWaiter
)
-
>
Self
{
*
waiter
.
count
.
lock
(
)
.
unwrap
(
)
+
=
1
;
Self
{
conn
waiter
}
}
}
impl
<
'
a
>
Deref
for
ConnectionGuard
<
'
a
>
{
type
Target
=
Connection
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
conn
}
}
impl
<
'
a
>
Drop
for
ConnectionGuard
<
'
a
>
{
fn
drop
(
&
mut
self
)
{
let
mut
count
=
self
.
waiter
.
count
.
lock
(
)
.
unwrap
(
)
;
*
count
-
=
1
;
self
.
waiter
.
monitor
.
notify_one
(
)
;
}
}
#
[
derive
(
Debug
)
]
enum
StoreState
{
Created
(
StorePath
)
Open
(
OpenStore
)
Closed
}
#
[
derive
(
Clone
Debug
)
]
struct
OpenStore
{
writer
:
Arc
<
Connection
>
reader
:
Arc
<
Connection
>
}
impl
OpenStore
{
fn
new
(
path
:
&
StorePath
)
-
>
Result
<
Self
StoreError
>
{
let
writer
=
Connection
:
:
new
:
:
<
Schema
_
>
(
path
ConnectionType
:
:
ReadWrite
)
?
;
let
reader
=
Connection
:
:
new
:
:
<
Schema
_
>
(
path
ConnectionType
:
:
ReadOnly
)
?
;
Ok
(
Self
{
writer
:
Arc
:
:
new
(
writer
)
reader
:
Arc
:
:
new
(
reader
)
}
)
}
}
#
[
derive
(
Debug
)
]
struct
OperationWaiter
{
count
:
Mutex
<
usize
>
monitor
:
Condvar
}
impl
OperationWaiter
{
fn
new
(
)
-
>
Self
{
Self
{
count
:
Mutex
:
:
new
(
0
)
monitor
:
Condvar
:
:
new
(
)
}
}
fn
wait
(
&
self
)
{
let
mut
count
=
self
.
count
.
lock
(
)
.
unwrap
(
)
;
while
*
count
>
0
{
count
=
self
.
monitor
.
wait
(
count
)
.
unwrap
(
)
;
}
}
}
#
[
derive
(
thiserror
:
:
Error
Debug
)
]
pub
enum
StoreError
{
#
[
error
(
"
schema
:
{
0
}
"
)
]
Schema
(
#
[
from
]
SchemaError
)
#
[
error
(
"
closed
"
)
]
Closed
#
[
error
(
"
sqlite
:
{
0
}
"
)
]
Sqlite
(
#
[
from
]
rusqlite
:
:
Error
)
}
