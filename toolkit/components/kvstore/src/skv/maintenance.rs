#
[
derive
(
Debug
)
]
pub
struct
Maintenance
<
'
a
>
{
conn
:
&
'
a
rusqlite
:
:
Connection
}
impl
<
'
a
>
Maintenance
<
'
a
>
{
pub
fn
new
(
conn
:
&
'
a
rusqlite
:
:
Connection
)
-
>
Self
{
Self
{
conn
}
}
pub
fn
quick_check
(
&
self
)
-
>
Result
<
(
)
MaintenanceError
>
{
let
ok
=
self
.
conn
.
query_row
(
"
PRAGMA
quick_check
(
1
)
"
[
]
|
row
|
{
Ok
(
row
.
get
:
:
<
_
String
>
(
0
)
?
=
=
"
ok
"
)
}
)
?
;
match
ok
{
true
=
>
Ok
(
(
)
)
false
=
>
Err
(
MaintenanceError
:
:
QuickCheck
)
}
}
pub
fn
integrity_check
(
&
self
)
-
>
Result
<
(
)
MaintenanceError
>
{
let
ok
=
self
.
conn
.
query_row
(
"
PRAGMA
integrity_check
(
1
)
"
[
]
|
row
|
{
Ok
(
row
.
get
:
:
<
_
String
>
(
0
)
?
=
=
"
ok
"
)
}
)
?
;
match
ok
{
true
=
>
Ok
(
(
)
)
false
=
>
Err
(
MaintenanceError
:
:
IntegrityCheck
)
}
}
pub
fn
foreign_key_check
(
&
self
)
-
>
Result
<
(
)
MaintenanceError
>
{
let
ok
=
self
.
conn
.
prepare
(
"
PRAGMA
foreign_key_check
"
)
.
and_then
(
|
mut
statement
|
Ok
(
statement
.
query
(
[
]
)
?
.
next
(
)
?
.
is_none
(
)
)
)
?
;
match
ok
{
true
=
>
Ok
(
(
)
)
false
=
>
Err
(
MaintenanceError
:
:
ForeignKeyCheck
)
}
}
pub
fn
reindex
(
&
self
)
-
>
Result
<
(
)
MaintenanceError
>
{
self
.
conn
.
execute_batch
(
"
REINDEX
"
)
?
;
Ok
(
(
)
)
}
}
#
[
derive
(
thiserror
:
:
Error
Debug
)
]
pub
enum
MaintenanceError
{
#
[
error
(
"
quick
check
"
)
]
QuickCheck
#
[
error
(
"
integrity
check
"
)
]
IntegrityCheck
#
[
error
(
"
foreign
key
check
"
)
]
ForeignKeyCheck
#
[
error
(
"
sqlite
:
{
0
}
"
)
]
Sqlite
(
#
[
from
]
rusqlite
:
:
Error
)
}
