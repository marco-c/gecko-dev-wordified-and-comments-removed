use
rusqlite
:
:
{
functions
:
:
FunctionFlags
types
:
:
ToSqlOutput
ToSql
}
;
pub
fn
register
(
conn
:
&
mut
rusqlite
:
:
Connection
)
-
>
rusqlite
:
:
Result
<
(
)
>
{
conn
.
create_scalar_function
(
"
throw
"
1
FunctionFlags
:
:
SQLITE_UTF8
|
FunctionFlags
:
:
SQLITE_DETERMINISTIC
|
FunctionFlags
:
:
SQLITE_DIRECTONLY
|
context
|
-
>
rusqlite
:
:
Result
<
Never
>
{
Err
(
FunctionError
:
:
Throw
(
context
.
get
(
0
)
?
)
.
into
(
)
)
}
)
?
;
Ok
(
(
)
)
}
enum
Never
{
}
impl
ToSql
for
Never
{
fn
to_sql
(
&
self
)
-
>
rusqlite
:
:
Result
<
ToSqlOutput
<
'
_
>
>
{
unreachable
!
(
)
}
}
#
[
derive
(
thiserror
:
:
Error
Debug
)
]
enum
FunctionError
{
#
[
error
(
"
throw
:
{
0
}
"
)
]
Throw
(
String
)
}
impl
Into
<
rusqlite
:
:
Error
>
for
FunctionError
{
fn
into
(
self
)
-
>
rusqlite
:
:
Error
{
rusqlite
:
:
Error
:
:
UserFunctionError
(
self
.
into
(
)
)
}
}
