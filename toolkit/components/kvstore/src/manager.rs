use
rkv
:
:
{
Rkv
StoreError
}
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
collections
:
:
hash_map
:
:
Entry
;
use
std
:
:
path
:
:
{
Path
PathBuf
}
;
use
std
:
:
sync
:
:
{
Arc
RwLock
}
;
lazy_static
!
{
static
ref
MANAGER
:
RwLock
<
Manager
>
=
RwLock
:
:
new
(
Manager
:
:
new
(
)
)
;
}
pub
(
crate
)
struct
Manager
{
environments
:
HashMap
<
PathBuf
Arc
<
RwLock
<
Rkv
>
>
>
}
impl
Manager
{
fn
new
(
)
-
>
Manager
{
Manager
{
environments
:
Default
:
:
default
(
)
}
}
pub
(
crate
)
fn
singleton
(
)
-
>
&
'
static
RwLock
<
Manager
>
{
&
*
MANAGER
}
pub
fn
get_or_create
<
'
p
F
P
>
(
&
mut
self
path
:
P
f
:
F
)
-
>
Result
<
Arc
<
RwLock
<
Rkv
>
>
StoreError
>
where
F
:
FnOnce
(
&
Path
)
-
>
Result
<
Rkv
StoreError
>
P
:
Into
<
&
'
p
Path
>
{
Ok
(
match
self
.
environments
.
entry
(
path
.
into
(
)
.
to_path_buf
(
)
)
{
Entry
:
:
Occupied
(
e
)
=
>
e
.
get
(
)
.
clone
(
)
Entry
:
:
Vacant
(
e
)
=
>
{
let
k
=
Arc
:
:
new
(
RwLock
:
:
new
(
f
(
e
.
key
(
)
.
as_path
(
)
)
?
)
)
;
e
.
insert
(
k
)
.
clone
(
)
}
}
)
}
}
