use
std
:
:
{
sync
:
:
{
Condvar
Mutex
}
time
:
:
Duration
}
;
pub
struct
CountDownLatch
{
count
:
Mutex
<
usize
>
cvar
:
Condvar
}
impl
CountDownLatch
{
pub
const
fn
new
(
count
:
usize
)
-
>
Self
{
Self
{
count
:
Mutex
:
:
new
(
count
)
cvar
:
Condvar
:
:
new
(
)
}
}
pub
fn
count_down
(
&
self
)
{
let
mut
count
=
self
.
count
.
lock
(
)
.
unwrap
(
)
;
if
*
count
>
0
{
*
count
-
=
1
;
if
*
count
=
=
0
{
self
.
cvar
.
notify_all
(
)
;
}
}
}
pub
fn
wait_timeout
(
&
self
timeout
:
Duration
)
-
>
bool
{
let
mut
count
=
self
.
count
.
lock
(
)
.
unwrap
(
)
;
while
*
count
>
0
{
let
(
guard
result
)
=
self
.
cvar
.
wait_timeout
(
count
timeout
)
.
unwrap
(
)
;
if
result
.
timed_out
(
)
{
return
false
;
}
count
=
guard
;
}
true
}
}
