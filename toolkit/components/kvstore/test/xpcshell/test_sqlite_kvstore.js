"
use
strict
"
;
const
{
KeyValueService
SQLiteKeyValueService
KeyValueImporter
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
kvstore
.
sys
.
mjs
"
)
;
add_setup
(
async
function
setup
(
)
{
do_get_profile
(
)
;
}
)
;
async
function
makeDatabaseDir
(
name
)
{
const
databaseDir
=
PathUtils
.
join
(
PathUtils
.
profileDir
name
)
;
await
IOUtils
.
makeDirectory
(
databaseDir
)
;
return
databaseDir
;
}
async
function
allEntries
(
db
)
{
return
Array
.
from
(
await
db
.
enumerate
(
)
(
{
key
value
}
)
=
>
(
{
key
value
}
)
)
;
}
add_task
(
async
function
getOrCreate
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
getOrCreate
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
Assert
.
ok
(
database
)
;
await
database
.
close
(
)
;
const
nonexistentDir
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
nonexistent
"
)
;
await
Assert
.
rejects
(
SQLiteKeyValueService
.
getOrCreate
(
nonexistentDir
)
/
storage
dir
/
)
;
let
nonNormalizedDir
=
await
makeDatabaseDir
(
"
non
-
normalized
"
)
;
nonNormalizedDir
=
[
nonNormalizedDir
"
.
.
"
"
.
"
"
non
-
normalized
"
]
.
join
(
Services
.
appinfo
.
OS
=
=
=
"
WINNT
"
?
"
\
\
"
:
"
/
"
)
;
const
nonNormalizedRepository
=
await
SQLiteKeyValueService
.
getOrCreate
(
nonNormalizedDir
"
db
"
)
;
Assert
.
ok
(
nonNormalizedRepository
)
;
await
nonNormalizedRepository
.
close
(
)
;
}
)
;
add_task
(
async
function
putGetHasDelete
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
putGetHasDelete
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
1
)
1
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
1
.
1
)
1
.
1
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
"
"
)
"
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
false
)
false
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
put
(
"
int
-
key
"
1234
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
put
(
"
double
-
key
"
56
.
78
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
put
(
"
bool
-
key
"
true
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
1
)
1234
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
1
.
1
)
56
.
78
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
"
"
)
"
H
llo
w
rld
!
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
false
)
true
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
)
1234
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
)
56
.
78
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
)
"
H
llo
w
rld
!
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
)
true
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
int
-
key
"
)
true
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
double
-
key
"
)
true
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
string
-
key
"
)
true
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
bool
-
key
"
)
true
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
nonexistent
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
delete
(
"
int
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
delete
(
"
double
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
delete
(
"
string
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
delete
(
"
bool
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
int
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
double
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
string
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
bool
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
1
)
1
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
1
.
1
)
1
.
1
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
"
"
)
"
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
false
)
false
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
)
undefined
)
;
}
)
;
add_task
(
async
function
putWithResizing
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
putWithResizing
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
const
base
=
"
A
humongous
string
in
32
bytes
!
!
"
;
const
val1M
=
base
.
repeat
(
32768
)
;
const
val2M
=
val1M
.
repeat
(
2
)
;
Assert
.
strictEqual
(
await
database
.
put
(
"
A
-
1M
-
value
"
val1M
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
put
(
"
A
-
2M
-
value
"
val2M
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
put
(
"
A
-
32B
-
value
"
base
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
A
-
1M
-
value
"
)
val1M
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
A
-
2M
-
value
"
)
val2M
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
A
-
32B
-
value
"
)
base
)
;
}
)
;
add_task
(
async
function
largeNumbers
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
largeNumbers
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
const
MAX_INT_VARIANT
=
Math
.
pow
(
2
31
)
-
1
;
const
MIN_DOUBLE_VARIANT
=
Math
.
pow
(
2
31
)
;
await
database
.
put
(
"
max
-
int
-
variant
"
MAX_INT_VARIANT
)
;
await
database
.
put
(
"
min
-
double
-
variant
"
MIN_DOUBLE_VARIANT
)
;
await
database
.
put
(
"
max
-
safe
-
integer
"
Number
.
MAX_SAFE_INTEGER
)
;
await
database
.
put
(
"
min
-
safe
-
integer
"
Number
.
MIN_SAFE_INTEGER
)
;
await
database
.
put
(
"
max
-
value
"
Number
.
MAX_VALUE
)
;
await
database
.
put
(
"
min
-
value
"
Number
.
MIN_VALUE
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
max
-
int
-
variant
"
)
MAX_INT_VARIANT
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
min
-
double
-
variant
"
)
MIN_DOUBLE_VARIANT
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
max
-
safe
-
integer
"
)
Number
.
MAX_SAFE_INTEGER
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
min
-
safe
-
integer
"
)
Number
.
MIN_SAFE_INTEGER
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
max
-
value
"
)
Number
.
MAX_VALUE
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
min
-
value
"
)
Number
.
MIN_VALUE
)
;
}
)
;
add_task
(
async
function
extendedCharacterKey
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
extendedCharacterKey
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
await
database
.
put
(
"
H
llo
w
rld
!
"
1
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
H
llo
w
rld
!
"
)
true
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
H
llo
w
rld
!
"
)
1
)
;
const
enumerator
=
await
database
.
enumerate
(
)
;
const
{
key
}
=
enumerator
.
getNext
(
)
;
Assert
.
strictEqual
(
key
"
H
llo
w
rld
!
"
)
;
await
database
.
delete
(
"
H
llo
w
rld
!
"
)
;
}
)
;
add_task
(
async
function
clear
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
clear
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
await
database
.
put
(
"
int
-
key
"
1234
)
;
await
database
.
put
(
"
double
-
key
"
56
.
78
)
;
await
database
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
await
database
.
put
(
"
bool
-
key
"
true
)
;
Assert
.
strictEqual
(
await
database
.
clear
(
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
int
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
double
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
string
-
key
"
)
false
)
;
Assert
.
strictEqual
(
await
database
.
has
(
"
bool
-
key
"
)
false
)
;
}
)
;
add_task
(
async
function
writeManyFailureCases
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
writeManyFailureCases
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
Assert
.
throws
(
(
)
=
>
database
.
writeMany
(
)
/
unexpected
argument
/
)
;
Assert
.
throws
(
(
)
=
>
database
.
writeMany
(
"
foo
"
)
/
unexpected
argument
/
)
;
Assert
.
throws
(
(
)
=
>
database
.
writeMany
(
[
"
foo
"
]
)
/
unexpected
argument
/
)
;
}
)
;
add_task
(
async
function
writeManyPutOnly
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
writeMany
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
async
function
test_helper
(
pairs
)
{
Assert
.
strictEqual
(
await
database
.
writeMany
(
pairs
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
)
1234
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
)
56
.
78
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
)
"
H
llo
w
rld
!
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
)
true
)
;
await
database
.
clear
(
)
;
}
Assert
.
strictEqual
(
await
database
.
writeMany
(
{
}
)
undefined
)
;
const
pairs
=
{
"
int
-
key
"
:
1234
"
double
-
key
"
:
56
.
78
"
string
-
key
"
:
"
H
llo
w
rld
!
"
"
bool
-
key
"
:
true
}
;
await
test_helper
(
pairs
)
;
const
arrayPairs
=
[
[
"
int
-
key
"
1234
]
[
"
double
-
key
"
56
.
78
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
[
"
bool
-
key
"
true
]
]
;
await
test_helper
(
arrayPairs
)
;
function
*
pairMaker
(
)
{
yield
[
"
int
-
key
"
1234
]
;
yield
[
"
double
-
key
"
56
.
78
]
;
yield
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
;
yield
[
"
bool
-
key
"
true
]
;
}
await
test_helper
(
pairMaker
(
)
)
;
const
mapPairs
=
new
Map
(
arrayPairs
)
;
await
test_helper
(
mapPairs
)
;
}
)
;
add_task
(
async
function
writeManyLargePairsWithResizing
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
writeManyWithResizing
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
const
base
=
"
A
humongous
string
in
32
bytes
!
!
"
;
const
val1M
=
base
.
repeat
(
32768
)
;
const
val2M
=
val1M
.
repeat
(
2
)
;
const
pairs
=
{
"
A
-
1M
-
value
"
:
val1M
"
A
-
32B
-
value
"
:
base
"
A
-
2M
-
value
"
:
val2M
}
;
Assert
.
strictEqual
(
await
database
.
writeMany
(
pairs
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
A
-
1M
-
value
"
)
val1M
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
A
-
2M
-
value
"
)
val2M
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
A
-
32B
-
value
"
)
base
)
;
}
)
;
add_task
(
async
function
writeManySmallPairsWithResizing
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
writeManyWithResizing
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
const
base
=
"
A
humongous
string
in
32
bytes
!
!
"
;
const
val1K
=
base
.
repeat
(
32
)
;
function
*
pairMaker
(
)
{
for
(
let
i
=
0
;
i
<
1024
;
i
+
+
)
{
yield
[
key
-
{
i
}
val1K
]
;
}
}
Assert
.
strictEqual
(
await
database
.
writeMany
(
pairMaker
(
)
)
undefined
)
;
for
(
let
i
=
0
;
i
<
1024
;
i
+
+
)
{
Assert
.
ok
(
await
database
.
has
(
key
-
{
i
}
)
)
;
}
}
)
;
add_task
(
async
function
writeManyDeleteOnly
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
writeManyDeletesOnly
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
const
pairs
=
{
"
int
-
key
"
:
1234
"
double
-
key
"
:
56
.
78
"
string
-
key
"
:
"
H
llo
w
rld
!
"
"
bool
-
key
"
:
true
}
;
async
function
test_helper
(
deletes
)
{
Assert
.
strictEqual
(
await
database
.
writeMany
(
pairs
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
writeMany
(
deletes
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
int
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
double
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
string
-
key
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
bool
-
key
"
)
undefined
)
;
}
Assert
.
strictEqual
(
await
database
.
writeMany
(
{
}
)
undefined
)
;
await
test_helper
(
{
"
int
-
key
"
:
null
"
double
-
key
"
:
null
"
string
-
key
"
:
null
"
bool
-
key
"
:
null
}
)
;
const
arrayPairs
=
[
[
"
int
-
key
"
null
]
[
"
double
-
key
"
null
]
[
"
string
-
key
"
null
]
[
"
bool
-
key
"
null
]
]
;
await
test_helper
(
arrayPairs
)
;
function
*
pairMaker
(
)
{
yield
[
"
int
-
key
"
null
]
;
yield
[
"
double
-
key
"
null
]
;
yield
[
"
string
-
key
"
null
]
;
yield
[
"
bool
-
key
"
null
]
;
}
await
test_helper
(
pairMaker
(
)
)
;
const
mapPairs
=
new
Map
(
arrayPairs
)
;
await
test_helper
(
mapPairs
)
;
}
)
;
add_task
(
async
function
writeManyPutDelete
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
writeManyPutDelete
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
await
database
.
writeMany
(
[
[
"
key1
"
"
val1
"
]
[
"
key3
"
"
val3
"
]
[
"
key4
"
"
val4
"
]
[
"
key5
"
"
val5
"
]
]
)
;
await
database
.
writeMany
(
[
[
"
key2
"
"
val2
"
]
[
"
key4
"
null
]
[
"
key5
"
null
]
]
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
key1
"
)
"
val1
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
key2
"
)
"
val2
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
key3
"
)
"
val3
"
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
key4
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
key5
"
)
undefined
)
;
await
database
.
clear
(
)
;
await
database
.
writeMany
(
[
[
"
key1
"
"
val1
"
]
[
"
key1
"
null
]
[
"
key1
"
"
val11
"
]
[
"
key1
"
null
]
[
"
key2
"
null
]
[
"
key2
"
"
val2
"
]
]
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
key1
"
)
undefined
)
;
Assert
.
strictEqual
(
await
database
.
get
(
"
key2
"
)
"
val2
"
)
;
}
)
;
add_task
(
async
function
getOrCreateNamedDatabases
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
getOrCreateNamedDatabases
"
)
;
let
fooDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
Assert
.
ok
(
fooDB
"
retrieval
of
first
named
database
works
"
)
;
let
barDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
bar
"
)
;
Assert
.
ok
(
barDB
"
retrieval
of
second
named
database
works
"
)
;
let
bazDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
baz
"
)
;
Assert
.
ok
(
bazDB
"
retrieval
of
third
named
database
works
"
)
;
await
bazDB
.
put
(
"
key
"
1
)
;
Assert
.
ok
(
!
(
await
fooDB
.
has
(
"
key
"
)
)
"
the
foo
DB
still
doesn
'
t
have
the
key
"
)
;
await
fooDB
.
put
(
"
key
"
2
)
;
Assert
.
ok
(
!
(
await
barDB
.
has
(
"
key
"
)
)
"
the
bar
DB
still
doesn
'
t
have
the
key
"
)
;
await
barDB
.
put
(
"
key
"
3
)
;
Assert
.
strictEqual
(
await
bazDB
.
get
(
"
key
"
0
)
1
"
the
baz
DB
has
its
KV
pair
"
)
;
Assert
.
strictEqual
(
await
fooDB
.
get
(
"
key
"
0
)
2
"
the
foo
DB
has
its
KV
pair
"
)
;
Assert
.
strictEqual
(
await
barDB
.
get
(
"
key
"
0
)
3
"
the
bar
DB
has
its
KV
pair
"
)
;
await
bazDB
.
delete
(
"
key
"
)
;
Assert
.
strictEqual
(
await
fooDB
.
get
(
"
key
"
0
)
2
"
the
foo
DB
still
has
its
KV
pair
"
)
;
await
fooDB
.
delete
(
"
key
"
)
;
Assert
.
strictEqual
(
await
barDB
.
get
(
"
key
"
0
)
3
"
the
bar
DB
still
has
its
KV
pair
"
)
;
await
barDB
.
delete
(
"
key
"
)
;
}
)
;
add_task
(
async
function
inMemory
(
)
{
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
"
:
memory
:
"
"
db
"
)
;
await
database
.
put
(
"
int
-
key
"
1234
)
;
await
database
.
put
(
"
double
-
key
"
56
.
78
)
;
Assert
.
deepEqual
(
await
allEntries
(
database
)
[
{
key
:
"
double
-
key
"
value
:
56
.
78
}
{
key
:
"
int
-
key
"
value
:
1234
}
]
)
;
const
otherDatabase
=
await
SQLiteKeyValueService
.
getOrCreate
(
"
:
memory
:
"
"
db
"
)
;
await
otherDatabase
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
await
otherDatabase
.
put
(
"
bool
-
key
"
true
)
;
Assert
.
deepEqual
(
await
allEntries
(
otherDatabase
)
[
{
key
:
"
bool
-
key
"
value
:
true
}
{
key
:
"
string
-
key
"
value
:
"
H
llo
w
rld
!
"
}
]
)
;
}
)
;
add_task
(
async
function
enumeration
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
enumeration
"
)
;
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
db
"
)
;
await
database
.
put
(
"
int
-
key
"
1234
)
;
await
database
.
put
(
"
double
-
key
"
56
.
78
)
;
await
database
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
await
database
.
put
(
"
bool
-
key
"
true
)
;
async
function
test
(
fromKey
toKey
pairs
)
{
const
enumerator
=
await
database
.
enumerate
(
fromKey
toKey
)
;
for
(
const
pair
of
pairs
)
{
Assert
.
strictEqual
(
enumerator
.
hasMoreElements
(
)
true
)
;
const
element
=
enumerator
.
getNext
(
)
;
Assert
.
ok
(
element
)
;
Assert
.
strictEqual
(
element
.
key
pair
[
0
]
)
;
Assert
.
strictEqual
(
element
.
value
pair
[
1
]
)
;
}
Assert
.
strictEqual
(
enumerator
.
hasMoreElements
(
)
false
)
;
Assert
.
throws
(
(
)
=
>
enumerator
.
getNext
(
)
/
NS_ERROR_FAILURE
/
)
;
}
await
test
(
null
null
[
[
"
bool
-
key
"
true
]
[
"
double
-
key
"
56
.
78
]
[
"
int
-
key
"
1234
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
]
)
;
await
test
(
undefined
undefined
[
[
"
bool
-
key
"
true
]
[
"
double
-
key
"
56
.
78
]
[
"
int
-
key
"
1234
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
]
)
;
await
test
(
"
"
"
"
[
[
"
bool
-
key
"
true
]
[
"
double
-
key
"
56
.
78
]
[
"
int
-
key
"
1234
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
]
)
;
await
test
(
"
aaaaa
"
null
[
[
"
bool
-
key
"
true
]
[
"
double
-
key
"
56
.
78
]
[
"
int
-
key
"
1234
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
]
)
;
await
test
(
"
ccccc
"
null
[
[
"
double
-
key
"
56
.
78
]
[
"
int
-
key
"
1234
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
]
)
;
await
test
(
"
int
-
key
"
null
[
[
"
int
-
key
"
1234
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
]
)
;
await
test
(
"
zzzzz
"
null
[
]
)
;
await
test
(
null
"
zzzzz
"
[
[
"
bool
-
key
"
true
]
[
"
double
-
key
"
56
.
78
]
[
"
int
-
key
"
1234
]
[
"
string
-
key
"
"
H
llo
w
rld
!
"
]
]
)
;
await
test
(
null
"
ppppp
"
[
[
"
bool
-
key
"
true
]
[
"
double
-
key
"
56
.
78
]
[
"
int
-
key
"
1234
]
]
)
;
await
test
(
null
"
int
-
key
"
[
[
"
bool
-
key
"
true
]
[
"
double
-
key
"
56
.
78
]
]
)
;
await
test
(
null
"
aaaaa
"
[
]
)
;
await
test
(
"
ggggg
"
"
ppppp
"
[
[
"
int
-
key
"
1234
]
]
)
;
await
test
(
"
int
-
key
"
"
int
-
key
"
[
]
)
;
await
test
(
"
ppppp
"
"
ccccc
"
[
]
)
;
await
test
(
"
int
-
key
"
"
ccccc
"
[
]
)
;
await
test
(
"
ppppp
"
"
int
-
key
"
[
]
)
;
const
actual
=
{
}
;
for
(
const
{
key
value
}
of
await
database
.
enumerate
(
)
)
{
actual
[
key
]
=
value
;
}
Assert
.
deepEqual
(
actual
{
"
bool
-
key
"
:
true
"
double
-
key
"
:
56
.
78
"
int
-
key
"
:
1234
"
string
-
key
"
:
"
H
llo
w
rld
!
"
}
)
;
await
database
.
delete
(
"
int
-
key
"
)
;
await
database
.
delete
(
"
double
-
key
"
)
;
await
database
.
delete
(
"
string
-
key
"
)
;
await
database
.
delete
(
"
bool
-
key
"
)
;
}
)
;
add_task
(
async
function
importFromRkv
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
importFromRkv
"
)
;
const
oldFooDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
bool
-
key
"
true
)
;
await
oldFooDB
.
put
(
"
double
-
key
"
56
.
78
)
;
const
oldBarDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
bar
"
)
;
await
oldBarDB
.
put
(
"
int
-
key
"
1234
)
;
await
oldBarDB
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
const
importer
=
SQLiteKeyValueService
.
createImporter
(
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
databaseDir
)
;
Assert
.
strictEqual
(
importer
.
path
databaseDir
)
;
Assert
.
strictEqual
(
importer
.
type
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
)
;
await
importer
.
import
(
"
foo
"
)
;
const
newFooDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
Assert
.
deepEqual
(
await
allEntries
(
newFooDB
)
[
{
key
:
"
bool
-
key
"
value
:
true
}
{
key
:
"
double
-
key
"
value
:
56
.
78
}
]
)
;
const
newBarDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
bar
"
)
;
Assert
.
strictEqual
(
await
newBarDB
.
isEmpty
(
)
true
)
;
await
importer
.
import
(
"
bar
"
)
;
Assert
.
deepEqual
(
await
allEntries
(
newBarDB
)
[
{
key
:
"
int
-
key
"
value
:
1234
}
{
key
:
"
string
-
key
"
value
:
"
H
llo
w
rld
!
"
}
]
)
;
await
newFooDB
.
close
(
)
;
await
newBarDB
.
close
(
)
;
}
)
;
add_task
(
async
function
importAllFromRkv
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
importAllFromRkv
"
)
;
const
oldFooDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
bool
-
key
"
true
)
;
await
oldFooDB
.
put
(
"
double
-
key
"
56
.
78
)
;
const
oldBarDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
bar
"
)
;
await
oldBarDB
.
put
(
"
int
-
key
"
1234
)
;
await
oldBarDB
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
const
importer
=
SQLiteKeyValueService
.
createImporter
(
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
databaseDir
)
;
await
importer
.
importAll
(
)
;
const
newFooDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
Assert
.
deepEqual
(
await
allEntries
(
newFooDB
)
[
{
key
:
"
bool
-
key
"
value
:
true
}
{
key
:
"
double
-
key
"
value
:
56
.
78
}
]
)
;
const
newBarDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
bar
"
)
;
Assert
.
deepEqual
(
await
allEntries
(
newBarDB
)
[
{
key
:
"
int
-
key
"
value
:
1234
}
{
key
:
"
string
-
key
"
value
:
"
H
llo
w
rld
!
"
}
]
)
;
await
newFooDB
.
close
(
)
;
await
newBarDB
.
close
(
)
;
}
)
;
add_task
(
async
function
importOrErrorFromRkv
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
importOrErrorFromRkv
"
)
;
const
oldFooDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
bool
-
key
"
true
)
;
await
oldFooDB
.
put
(
"
int
-
key
"
1234
)
;
const
newFooDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
bool
-
key
"
true
)
;
await
oldFooDB
.
put
(
"
int
-
key
"
1234
)
;
const
importer
=
SQLiteKeyValueService
.
createImporter
(
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
databaseDir
)
;
Assert
.
strictEqual
(
importer
.
conflictPolicy
KeyValueImporter
.
ConflictPolicy
.
ERROR
)
;
await
importer
.
import
(
"
foo
"
)
;
await
newFooDB
.
put
(
"
int
-
key
"
5678
)
;
await
Assert
.
rejects
(
importer
.
import
(
"
foo
"
)
/
conflict
:
'
int
-
key
'
/
)
;
await
newFooDB
.
close
(
)
;
}
)
;
add_task
(
async
function
importOrIgnoreFromRkv
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
importOrIgnoreFromRkv
"
)
;
const
oldFooDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
int
-
key
"
1234
)
;
const
newFooDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
newFooDB
.
put
(
"
int
-
key
"
5678
)
;
const
importer
=
SQLiteKeyValueService
.
createImporter
(
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
databaseDir
)
.
setConflictPolicy
(
KeyValueImporter
.
ConflictPolicy
.
IGNORE
)
;
Assert
.
strictEqual
(
importer
.
conflictPolicy
KeyValueImporter
.
ConflictPolicy
.
IGNORE
)
;
await
importer
.
import
(
"
foo
"
)
;
Assert
.
deepEqual
(
await
allEntries
(
newFooDB
)
[
{
key
:
"
int
-
key
"
value
:
5678
}
]
)
;
await
newFooDB
.
close
(
)
;
}
)
;
add_task
(
async
function
importOrReplaceFromRkv
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
importOrReplaceFromRkv
"
)
;
const
oldFooDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
int
-
key
"
1234
)
;
const
newFooDB
=
await
SQLiteKeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
newFooDB
.
put
(
"
int
-
key
"
5678
)
;
const
importer
=
SQLiteKeyValueService
.
createImporter
(
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
databaseDir
)
.
setConflictPolicy
(
KeyValueImporter
.
ConflictPolicy
.
REPLACE
)
;
Assert
.
strictEqual
(
importer
.
conflictPolicy
KeyValueImporter
.
ConflictPolicy
.
REPLACE
)
;
await
importer
.
import
(
"
foo
"
)
;
Assert
.
deepEqual
(
await
allEntries
(
newFooDB
)
[
{
key
:
"
int
-
key
"
value
:
1234
}
]
)
;
await
newFooDB
.
close
(
)
;
}
)
;
add_task
(
async
function
importFromRkvAndKeep
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
importFromRkvAndKeep
"
)
;
const
oldFooDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
bool
-
key
"
true
)
;
await
oldFooDB
.
put
(
"
double
-
key
"
56
.
78
)
;
const
oldBarDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
bar
"
)
;
await
oldBarDB
.
put
(
"
int
-
key
"
1234
)
;
await
oldBarDB
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
const
importer
=
SQLiteKeyValueService
.
createImporter
(
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
databaseDir
)
.
setCleanupPolicy
(
KeyValueImporter
.
CleanupPolicy
.
KEEP
)
;
Assert
.
strictEqual
(
importer
.
cleanupPolicy
KeyValueImporter
.
CleanupPolicy
.
KEEP
)
;
await
importer
.
importAll
(
)
;
Assert
.
deepEqual
(
await
allEntries
(
oldFooDB
)
[
{
key
:
"
bool
-
key
"
value
:
true
}
{
key
:
"
double
-
key
"
value
:
56
.
78
}
]
)
;
Assert
.
deepEqual
(
await
allEntries
(
oldBarDB
)
[
{
key
:
"
int
-
key
"
value
:
1234
}
{
key
:
"
string
-
key
"
value
:
"
H
llo
w
rld
!
"
}
]
)
;
}
)
;
add_task
(
async
function
importFromRkvAndDelete
(
)
{
const
databaseDir
=
await
makeDatabaseDir
(
"
importFromRkvAndDelete
"
)
;
const
oldFooDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
foo
"
)
;
await
oldFooDB
.
put
(
"
bool
-
key
"
true
)
;
await
oldFooDB
.
put
(
"
double
-
key
"
56
.
78
)
;
const
oldBarDB
=
await
KeyValueService
.
getOrCreate
(
databaseDir
"
bar
"
)
;
await
oldBarDB
.
put
(
"
int
-
key
"
1234
)
;
await
oldBarDB
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
const
importer
=
SQLiteKeyValueService
.
createImporter
(
SQLiteKeyValueService
.
Importer
.
RKV_SAFE_MODE
databaseDir
)
.
setCleanupPolicy
(
KeyValueImporter
.
CleanupPolicy
.
DELETE
)
;
Assert
.
strictEqual
(
importer
.
cleanupPolicy
KeyValueImporter
.
CleanupPolicy
.
DELETE
)
;
await
importer
.
importAll
(
)
;
Assert
.
deepEqual
(
await
allEntries
(
oldFooDB
)
[
]
)
;
Assert
.
deepEqual
(
await
allEntries
(
oldBarDB
)
[
]
)
;
}
)
;
add_task
(
async
function
stats
(
)
{
const
database
=
await
SQLiteKeyValueService
.
getOrCreate
(
"
:
memory
:
"
"
db
"
)
;
Assert
.
strictEqual
(
await
database
.
isEmpty
(
)
true
)
;
Assert
.
strictEqual
(
await
database
.
count
(
)
0
)
;
Assert
.
strictEqual
(
await
database
.
size
(
)
0
)
;
await
database
.
put
(
"
int
-
key
"
1234
)
;
Assert
.
strictEqual
(
await
database
.
isEmpty
(
)
false
)
;
Assert
.
strictEqual
(
await
database
.
count
(
)
1
)
;
Assert
.
strictEqual
(
await
database
.
size
(
)
12
)
;
await
database
.
put
(
"
double
-
key
"
56
.
78
)
;
Assert
.
strictEqual
(
await
database
.
isEmpty
(
)
false
)
;
Assert
.
strictEqual
(
await
database
.
count
(
)
2
)
;
Assert
.
strictEqual
(
await
database
.
size
(
)
28
)
;
await
database
.
put
(
"
string
-
key
"
"
H
llo
w
rld
!
"
)
;
Assert
.
strictEqual
(
await
database
.
isEmpty
(
)
false
)
;
Assert
.
strictEqual
(
await
database
.
count
(
)
3
)
;
Assert
.
strictEqual
(
await
database
.
size
(
)
55
)
;
await
database
.
put
(
"
bool
-
key
"
true
)
;
Assert
.
strictEqual
(
await
database
.
isEmpty
(
)
false
)
;
Assert
.
strictEqual
(
await
database
.
count
(
)
4
)
;
Assert
.
strictEqual
(
await
database
.
size
(
)
64
)
;
}
)
;
