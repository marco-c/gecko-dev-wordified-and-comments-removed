"
use
strict
"
;
const
gKeyValueService
=
Cc
[
"
mozilla
.
org
/
key
-
value
-
service
;
1
"
]
.
getService
(
Ci
.
nsIKeyValueService
)
;
const
EXPORTED_SYMBOLS
=
[
"
KeyValueService
"
]
;
function
promisify
(
fn
.
.
.
args
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
fn
(
{
resolve
reject
}
.
.
.
args
)
;
}
)
;
}
class
KeyValueService
{
static
async
getOrCreate
(
dir
name
)
{
return
new
KeyValueDatabase
(
await
promisify
(
gKeyValueService
.
getOrCreate
dir
name
)
)
;
}
}
class
KeyValueDatabase
{
constructor
(
database
)
{
this
.
database
=
database
;
}
put
(
key
value
)
{
return
promisify
(
this
.
database
.
put
key
value
)
;
}
has
(
key
)
{
return
promisify
(
this
.
database
.
has
key
)
;
}
get
(
key
defaultValue
)
{
return
promisify
(
this
.
database
.
get
key
defaultValue
)
;
}
delete
(
key
)
{
return
promisify
(
this
.
database
.
delete
key
)
;
}
async
enumerate
(
from_key
to_key
)
{
return
new
KeyValueEnumerator
(
await
promisify
(
this
.
database
.
enumerate
from_key
to_key
)
)
;
}
}
class
KeyValueEnumerator
{
constructor
(
enumerator
)
{
this
.
enumerator
=
enumerator
;
}
hasMoreElements
(
)
{
return
this
.
enumerator
.
hasMoreElements
(
)
;
}
getNext
(
)
{
return
this
.
enumerator
.
getNext
(
)
;
}
*
[
Symbol
.
iterator
]
(
)
{
while
(
this
.
enumerator
.
hasMoreElements
(
)
)
{
yield
(
this
.
enumerator
.
getNext
(
)
)
;
}
}
}
