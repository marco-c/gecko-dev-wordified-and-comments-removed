"
use
strict
"
;
function
run_test
(
)
{
do_get_profile
(
)
;
run_next_test
(
)
;
}
add_task
(
async
function
test_fill_notification_buffer
(
)
{
let
watchedDir
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
filewatcher_playground
"
)
;
await
OS
.
File
.
makeDir
(
watchedDir
)
;
let
numberOfFiles
=
100
;
let
fileNameBase
=
"
testFile
"
;
let
detectedChanges
=
0
;
let
expectedChanges
=
numberOfFiles
*
2
;
let
watcher
=
makeWatcher
(
)
;
let
deferred
=
Promise
.
defer
(
)
;
let
changeCallback
=
function
(
changed
)
{
info
(
changed
+
"
has
changed
.
"
)
;
detectedChanges
+
=
1
;
if
(
detectedChanges
>
=
expectedChanges
)
{
deferred
.
resolve
(
)
;
}
}
;
await
promiseAddPath
(
watcher
watchedDir
changeCallback
deferred
.
reject
)
;
for
(
let
i
=
0
;
i
<
numberOfFiles
;
i
+
+
)
{
let
tmpFilePath
=
OS
.
Path
.
join
(
watchedDir
fileNameBase
+
i
)
;
await
OS
.
File
.
writeAtomic
(
tmpFilePath
"
test
content
"
)
;
await
OS
.
File
.
remove
(
tmpFilePath
)
;
}
await
deferred
.
promise
;
await
promiseRemovePath
(
watcher
watchedDir
changeCallback
deferred
.
reject
)
;
}
)
;
