"
use
strict
"
;
function
run_test
(
)
{
do_get_profile
(
)
;
run_next_test
(
)
;
}
add_task
(
async
function
test_watch_multi_paths
(
)
{
let
resourcesToWatch
=
5
;
let
watchedDir
=
OS
.
Constants
.
Path
.
profileDir
;
let
tempDirNameBase
=
"
FileWatcher_Test_
"
;
let
tempFileName
=
"
test
.
tmp
"
;
let
watcher
=
makeWatcher
(
)
;
let
detectedChanges
=
0
;
let
watchedResources
=
0
;
let
unwatchedResources
=
0
;
let
deferredChanges
=
PromiseUtils
.
defer
(
)
;
let
deferredSuccesses
=
PromiseUtils
.
defer
(
)
;
let
deferredShutdown
=
PromiseUtils
.
defer
(
)
;
let
changeCallback
=
function
(
changed
)
{
info
(
changed
+
"
has
changed
.
"
)
;
detectedChanges
+
=
1
;
if
(
detectedChanges
=
=
=
resourcesToWatch
)
{
deferredChanges
.
resolve
(
)
;
}
}
;
let
watchSuccessCallback
=
function
(
resourcePath
)
{
info
(
resourcePath
+
"
is
being
watched
.
"
)
;
watchedResources
+
=
1
;
if
(
watchedResources
=
=
=
resourcesToWatch
)
{
deferredSuccesses
.
resolve
(
)
;
}
}
;
let
unwatchSuccessCallback
=
function
(
resourcePath
)
{
info
(
resourcePath
+
"
is
being
un
-
watched
.
"
)
;
unwatchedResources
+
=
1
;
if
(
unwatchedResources
=
=
=
resourcesToWatch
)
{
deferredShutdown
.
resolve
(
)
;
}
}
;
for
(
let
i
=
0
;
i
<
resourcesToWatch
;
i
+
+
)
{
let
tmpSubDirPath
=
OS
.
Path
.
join
(
watchedDir
tempDirNameBase
+
i
)
;
info
(
"
Creating
the
"
+
tmpSubDirPath
+
"
directory
.
"
)
;
await
OS
.
File
.
makeDir
(
tmpSubDirPath
)
;
watcher
.
addPath
(
tmpSubDirPath
changeCallback
deferredChanges
.
reject
watchSuccessCallback
)
;
}
await
deferredSuccesses
.
promise
;
for
(
let
i
=
0
;
i
<
resourcesToWatch
;
i
+
+
)
{
let
tmpFilePath
=
OS
.
Path
.
join
(
watchedDir
tempDirNameBase
+
i
tempFileName
)
;
await
OS
.
File
.
writeAtomic
(
tmpFilePath
"
test
content
"
)
;
}
await
deferredChanges
.
promise
;
for
(
let
i
=
0
;
i
<
resourcesToWatch
;
i
+
+
)
{
let
tmpSubDirPath
=
OS
.
Path
.
join
(
watchedDir
tempDirNameBase
+
i
)
;
watcher
.
removePath
(
tmpSubDirPath
changeCallback
deferredChanges
.
reject
unwatchSuccessCallback
)
;
}
await
deferredShutdown
.
promise
;
}
)
;
