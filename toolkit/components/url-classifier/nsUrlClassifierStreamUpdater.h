#
ifndef
nsUrlClassifierStreamUpdater_h_
#
define
nsUrlClassifierStreamUpdater_h_
#
include
<
nsISupportsUtils
.
h
>
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIUrlClassifierStreamUpdater
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsIURI
;
class
nsUrlClassifierStreamUpdater
final
:
public
nsIUrlClassifierStreamUpdater
public
nsIUrlClassifierUpdateObserver
public
nsIStreamListener
public
nsIObserver
public
nsIInterfaceRequestor
public
nsITimerCallback
public
nsINamed
{
public
:
nsUrlClassifierStreamUpdater
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIURLCLASSIFIERSTREAMUPDATER
NS_DECL_NSIURLCLASSIFIERUPDATEOBSERVER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIOBSERVER
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
private
:
~
nsUrlClassifierStreamUpdater
(
)
=
default
;
void
DownloadDone
(
)
;
nsUrlClassifierStreamUpdater
(
nsUrlClassifierStreamUpdater
&
)
;
nsresult
AddRequestBody
(
const
nsACString
&
aRequestBody
)
;
nsresult
FetchUpdate
(
nsIURI
*
aURI
const
nsACString
&
aRequest
bool
aIsPostRequest
const
nsACString
&
aTable
)
;
nsresult
FetchUpdate
(
const
nsACString
&
aURI
const
nsACString
&
aRequest
bool
aIsPostRequest
const
nsACString
&
aTable
)
;
nsresult
FetchNext
(
)
;
nsresult
FetchNextRequest
(
)
;
struct
UpdateRequest
{
nsCString
mTables
;
nsCString
mRequestPayload
;
bool
mIsPostRequest
;
nsCString
mUrl
;
nsCOMPtr
<
nsIUrlClassifierCallback
>
mSuccessCallback
;
nsCOMPtr
<
nsIUrlClassifierCallback
>
mUpdateErrorCallback
;
nsCOMPtr
<
nsIUrlClassifierCallback
>
mDownloadErrorCallback
;
}
;
void
BuildUpdateRequest
(
const
nsACString
&
aRequestTables
const
nsACString
&
aRequestPayload
bool
aIsPostRequest
const
nsACString
&
aUpdateUrl
nsIUrlClassifierCallback
*
aSuccessCallback
nsIUrlClassifierCallback
*
aUpdateErrorCallback
nsIUrlClassifierCallback
*
aDownloadErrorCallback
UpdateRequest
*
aRequest
)
;
bool
mIsUpdating
;
bool
mInitialized
;
bool
mDownloadError
;
bool
mBeganStream
;
nsCString
mDownloadErrorStatusStr
;
nsCString
mStreamTable
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIUrlClassifierDBService
>
mDBService
;
nsCOMPtr
<
nsITimer
>
mFetchIndirectUpdatesTimer
;
nsCOMPtr
<
nsITimer
>
mFetchNextRequestTimer
;
nsCOMPtr
<
nsITimer
>
mResponseTimeoutTimer
;
nsCOMPtr
<
nsITimer
>
mTimeoutTimer
;
mozilla
:
:
UniquePtr
<
UpdateRequest
>
mCurrentRequest
;
nsTArray
<
UpdateRequest
>
mPendingRequests
;
struct
PendingUpdate
{
nsCString
mUrl
;
nsCString
mTable
;
}
;
nsTArray
<
PendingUpdate
>
mPendingUpdates
;
nsCString
mTelemetryProvider
;
PRIntervalTime
mTelemetryClockStart
;
}
;
#
endif
