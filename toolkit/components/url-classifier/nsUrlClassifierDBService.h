#
ifndef
nsUrlClassifierDBService_h_
#
define
nsUrlClassifierDBService_h_
#
include
<
nsISupportsUtils
.
h
>
#
include
"
nsID
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsUrlClassifierPrefixSet
.
h
"
#
include
"
nsIUrlClassifierHashCompleter
.
h
"
#
include
"
nsIUrlListManager
.
h
"
#
include
"
nsIUrlClassifierDBService
.
h
"
#
include
"
nsIUrlClassifierInfo
.
h
"
#
include
"
nsIURIClassifier
.
h
"
#
include
"
nsToolkitCompsCID
.
h
"
#
include
"
nsICryptoHMAC
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
Entries
.
h
"
#
include
"
LookupCache
.
h
"
#
include
"
HashStore
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
__MINGW32__
)
#
define
GCC_MANGLING_WORKAROUND
__stdcall
#
else
#
define
GCC_MANGLING_WORKAROUND
#
endif
#
define
DOMAIN_LENGTH
4
#
define
PARTIAL_LENGTH
4
#
define
COMPLETE_LENGTH
32
#
define
CHECK_MALWARE_PREF
"
browser
.
safebrowsing
.
malware
.
enabled
"
#
define
CHECK_MALWARE_DEFAULT
false
#
define
CHECK_PHISHING_PREF
"
browser
.
safebrowsing
.
phishing
.
enabled
"
#
define
CHECK_PHISHING_DEFAULT
false
#
define
CHECK_BLOCKED_PREF
"
browser
.
safebrowsing
.
blockedURIs
.
enabled
"
#
define
CHECK_BLOCKED_DEFAULT
false
#
define
MALWARE_TABLE_PREF
"
urlclassifier
.
malwareTable
"
#
define
PHISH_TABLE_PREF
"
urlclassifier
.
phishTable
"
#
define
TRACKING_TABLE_PREF
"
urlclassifier
.
trackingTable
"
#
define
TRACKING_TABLE_TEST_ENTRIES_PREF
\
"
urlclassifier
.
trackingTable
.
testEntries
"
#
define
TRACKING_WHITELIST_TABLE_PREF
"
urlclassifier
.
trackingWhitelistTable
"
#
define
TRACKING_WHITELIST_TABLE_TEST_ENTRIES_PREF
\
"
urlclassifier
.
trackingWhitelistTable
.
testEntries
"
#
define
BLOCKED_TABLE_PREF
"
urlclassifier
.
blockedTable
"
#
define
DOWNLOAD_BLOCK_TABLE_PREF
"
urlclassifier
.
downloadBlockTable
"
#
define
DOWNLOAD_ALLOW_TABLE_PREF
"
urlclassifier
.
downloadAllowTable
"
#
define
DISALLOW_COMPLETION_TABLE_PREF
"
urlclassifier
.
disallow_completions
"
#
define
PASSWORD_ALLOW_TABLE_PREF
"
urlclassifier
.
passwordAllowTable
"
using
namespace
mozilla
:
:
safebrowsing
;
class
nsUrlClassifierDBServiceWorker
;
class
nsIThread
;
class
nsIURI
;
class
UrlClassifierDBServiceWorkerProxy
;
namespace
mozilla
{
namespace
safebrowsing
{
class
Classifier
;
class
ProtocolParser
;
nsresult
TablesToResponse
(
const
nsACString
&
tables
)
;
}
}
class
nsUrlClassifierDBService
final
:
public
nsIUrlClassifierDBService
public
nsIURIClassifier
public
nsIUrlClassifierInfo
public
nsIObserver
{
public
:
nsUrlClassifierDBService
(
)
;
nsresult
Init
(
)
;
static
nsUrlClassifierDBService
*
GetInstance
(
nsresult
*
result
)
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_URLCLASSIFIERDBSERVICE_CID
)
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIURLCLASSIFIERDBSERVICE
NS_DECL_NSIURICLASSIFIER
NS_DECL_NSIURLCLASSIFIERINFO
NS_DECL_NSIOBSERVER
bool
CanComplete
(
const
nsACString
&
tableName
)
;
bool
GetCompleter
(
const
nsACString
&
tableName
nsIUrlClassifierHashCompleter
*
*
completer
)
;
nsresult
CacheCompletions
(
const
mozilla
:
:
safebrowsing
:
:
ConstCacheResultArray
&
results
)
;
static
nsIThread
*
BackgroundThread
(
)
;
static
bool
ShutdownHasStarted
(
)
;
private
:
const
nsTArray
<
nsCString
>
kObservedPrefs
=
{
NS_LITERAL_CSTRING
(
CHECK_MALWARE_PREF
)
NS_LITERAL_CSTRING
(
CHECK_PHISHING_PREF
)
NS_LITERAL_CSTRING
(
CHECK_BLOCKED_PREF
)
NS_LITERAL_CSTRING
(
MALWARE_TABLE_PREF
)
NS_LITERAL_CSTRING
(
PHISH_TABLE_PREF
)
NS_LITERAL_CSTRING
(
TRACKING_TABLE_PREF
)
NS_LITERAL_CSTRING
(
TRACKING_TABLE_TEST_ENTRIES_PREF
)
NS_LITERAL_CSTRING
(
TRACKING_WHITELIST_TABLE_PREF
)
NS_LITERAL_CSTRING
(
TRACKING_WHITELIST_TABLE_TEST_ENTRIES_PREF
)
NS_LITERAL_CSTRING
(
BLOCKED_TABLE_PREF
)
NS_LITERAL_CSTRING
(
DOWNLOAD_BLOCK_TABLE_PREF
)
NS_LITERAL_CSTRING
(
DOWNLOAD_ALLOW_TABLE_PREF
)
NS_LITERAL_CSTRING
(
DISALLOW_COMPLETION_TABLE_PREF
)
}
;
~
nsUrlClassifierDBService
(
)
;
nsUrlClassifierDBService
(
nsUrlClassifierDBService
&
)
;
nsresult
LookupURI
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
tables
const
nsTArray
<
nsCString
>
&
extraTablesByPrefs
const
nsTArray
<
nsCString
>
&
extraEntriesByPrefs
nsIUrlClassifierCallback
*
c
bool
forceCheck
bool
*
didCheck
)
;
nsresult
PreShutdown
(
)
;
nsresult
Shutdown
(
)
;
nsresult
ReadTablesFromPrefs
(
)
;
RefPtr
<
nsUrlClassifierDBServiceWorker
>
mWorker
;
RefPtr
<
UrlClassifierDBServiceWorkerProxy
>
mWorkerProxy
;
nsInterfaceHashtable
<
nsCStringHashKey
nsIUrlClassifierHashCompleter
>
mCompleters
;
bool
mCheckMalware
;
bool
mCheckPhishing
;
bool
mCheckBlockedURIs
;
bool
mInUpdate
;
nsTArray
<
nsCString
>
mGethashTables
;
nsTArray
<
nsCString
>
mDisallowCompletionsTables
;
nsCString
mTrackingProtectionTables
;
nsCString
mBaseTables
;
nsCString
mTrackingProtectionWhitelistExtraEntriesByPrefs
;
nsCString
mTrackingProtectionBlacklistExtraEntriesByPrefs
;
static
nsIThread
*
gDbBackgroundThread
;
}
;
class
nsUrlClassifierDBServiceWorker
final
:
public
nsIUrlClassifierDBService
{
public
:
nsUrlClassifierDBServiceWorker
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIURLCLASSIFIERDBSERVICE
nsresult
Init
(
uint32_t
aGethashNoise
nsCOMPtr
<
nsIFile
>
aCacheDir
nsUrlClassifierDBService
*
aDBService
)
;
nsresult
QueueLookup
(
const
nsACString
&
lookupKey
const
nsACString
&
tables
nsIUrlClassifierLookupCallback
*
callback
)
;
nsresult
HandlePendingLookups
(
)
;
nsresult
DoLocalLookup
(
const
nsACString
&
spec
const
nsACString
&
tables
LookupResultArray
&
results
)
;
nsresult
GCC_MANGLING_WORKAROUND
OpenDb
(
)
;
nsresult
GCC_MANGLING_WORKAROUND
CloseDb
(
)
;
nsresult
GCC_MANGLING_WORKAROUND
PreShutdown
(
)
;
nsresult
CacheCompletions
(
const
ConstCacheResultArray
&
aEntries
)
;
bool
IsBusyUpdating
(
)
const
{
return
!
!
mUpdateObserver
;
}
bool
IsDBOpened
(
)
const
{
return
!
!
mClassifier
;
}
void
FlushAndDisableAsyncUpdate
(
)
;
nsresult
GetCacheInfo
(
const
nsACString
&
aTable
nsIUrlClassifierCacheInfo
*
*
aCache
)
;
private
:
~
nsUrlClassifierDBServiceWorker
(
)
;
nsUrlClassifierDBServiceWorker
(
nsUrlClassifierDBServiceWorker
&
)
;
nsresult
NotifyUpdateObserver
(
nsresult
aUpdateStatus
)
;
void
ResetStream
(
)
;
void
ResetUpdate
(
)
;
nsresult
DoLookup
(
const
nsACString
&
spec
const
nsACString
&
tables
nsIUrlClassifierLookupCallback
*
c
)
;
nsresult
AddNoise
(
const
Prefix
aPrefix
const
nsCString
tableName
uint32_t
aCount
LookupResultArray
&
results
)
;
nsresult
CacheResultToTableUpdate
(
RefPtr
<
const
CacheResult
>
aCacheResult
RefPtr
<
TableUpdate
>
aUpdate
)
;
bool
IsSameAsLastResults
(
const
ConstCacheResultArray
&
aResult
)
const
;
RefPtr
<
mozilla
:
:
safebrowsing
:
:
Classifier
>
mClassifier
;
mozilla
:
:
UniquePtr
<
ProtocolParser
>
mProtocolParser
;
nsCOMPtr
<
nsIFile
>
mCacheDir
;
RefPtr
<
nsUrlClassifierDBService
>
mDBService
;
TableUpdateArray
mTableUpdates
;
uint32_t
mUpdateWaitSec
;
ConstCacheResultArray
mLastResults
;
nsresult
mUpdateStatus
;
nsTArray
<
nsCString
>
mUpdateTables
;
nsCOMPtr
<
nsIUrlClassifierUpdateObserver
>
mUpdateObserver
;
bool
mInStream
;
uint32_t
mGethashNoise
;
mozilla
:
:
Mutex
mPendingLookupLock
;
class
PendingLookup
{
public
:
mozilla
:
:
TimeStamp
mStartTime
;
nsCString
mKey
;
nsCString
mTables
;
nsCOMPtr
<
nsIUrlClassifierLookupCallback
>
mCallback
;
}
;
nsTArray
<
PendingLookup
>
mPendingLookups
;
#
ifdef
MOZ_SAFEBROWSING_DUMP_FAILED_UPDATES
nsCString
mRawTableUpdates
;
#
endif
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsUrlClassifierDBService
NS_URLCLASSIFIERDBSERVICE_CID
)
#
endif
