#
ifndef
nsUrlClassifierUtils_h_
#
define
nsUrlClassifierUtils_h_
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Base64
.
h
"
#
include
"
nsIUrlClassifierUtils
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsIObserver
.
h
"
#
define
TESTING_TABLE_PROVIDER_NAME
"
test
"
class
nsUrlClassifierUtils
final
:
public
nsIUrlClassifierUtils
public
nsIObserver
{
public
:
typedef
nsClassHashtable
<
nsCStringHashKey
nsCString
>
ProviderDictType
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIURLCLASSIFIERUTILS
NS_DECL_NSIOBSERVER
static
already_AddRefed
<
nsUrlClassifierUtils
>
GetXPCOMSingleton
(
)
;
static
nsUrlClassifierUtils
*
GetInstance
(
)
;
nsresult
CanonicalizeHostname
(
const
nsACString
&
hostname
nsACString
&
_retval
)
;
nsresult
CanonicalizePath
(
const
nsACString
&
url
nsACString
&
_retval
)
;
bool
SpecialEncode
(
const
nsACString
&
url
bool
foldSlashes
nsACString
&
_retval
)
;
void
ParseIPAddress
(
const
nsACString
&
host
nsACString
&
_retval
)
;
void
CanonicalNum
(
const
nsACString
&
num
uint32_t
bytes
bool
allowOctal
nsACString
&
_retval
)
;
private
:
nsUrlClassifierUtils
(
)
;
~
nsUrlClassifierUtils
(
)
;
nsresult
Init
(
)
;
nsUrlClassifierUtils
(
const
nsUrlClassifierUtils
&
)
;
bool
ShouldURLEscape
(
const
unsigned
char
c
)
const
;
void
CleanupHostname
(
const
nsACString
&
host
nsACString
&
_retval
)
;
nsresult
ReadProvidersFromPrefs
(
ProviderDictType
&
aDict
)
;
ProviderDictType
mProviderDict
;
mozilla
:
:
Mutex
mProviderDictLock
;
}
;
#
endif
