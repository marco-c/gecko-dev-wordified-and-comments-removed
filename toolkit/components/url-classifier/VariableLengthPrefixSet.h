#
ifndef
VariableLengthPrefixSet_h
#
define
VariableLengthPrefixSet_h
#
include
"
nsISupports
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
Entries
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
class
nsUrlClassifierPrefixSet
;
namespace
mozilla
{
namespace
safebrowsing
{
class
VariableLengthPrefixSet
final
:
public
nsIMemoryReporter
{
public
:
VariableLengthPrefixSet
(
)
;
nsresult
Init
(
const
nsACString
&
aName
)
;
nsresult
SetPrefixes
(
const
mozilla
:
:
safebrowsing
:
:
PrefixStringMap
&
aPrefixMap
)
;
nsresult
GetPrefixes
(
mozilla
:
:
safebrowsing
:
:
PrefixStringMap
&
aPrefixMap
)
;
nsresult
GetFixedLengthPrefixes
(
FallibleTArray
<
uint32_t
>
&
aPrefixes
)
;
nsresult
Matches
(
const
nsACString
&
aFullHash
uint32_t
*
aLength
)
const
;
nsresult
IsEmpty
(
bool
*
aEmpty
)
const
;
nsresult
WritePrefixes
(
nsCOMPtr
<
nsIOutputStream
>
&
out
)
const
;
nsresult
LoadPrefixes
(
nsCOMPtr
<
nsIInputStream
>
&
in
)
;
uint32_t
CalculatePreallocateSize
(
)
const
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
private
:
virtual
~
VariableLengthPrefixSet
(
)
;
static
const
uint32_t
PREFIXSET_VERSION_MAGIC
=
1
;
bool
BinarySearch
(
const
nsACString
&
aFullHash
const
nsACString
&
aPrefixes
uint32_t
aPrefixSize
)
const
;
mutable
mozilla
:
:
Mutex
mLock
;
const
RefPtr
<
nsUrlClassifierPrefixSet
>
mFixedPrefixSet
;
mozilla
:
:
safebrowsing
:
:
PrefixStringMap
mVLPrefixSet
;
nsCString
mName
;
nsCString
mMemoryReportPath
;
}
;
}
}
#
endif
