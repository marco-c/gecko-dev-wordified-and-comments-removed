#
include
"
RiceDeltaDecoder
.
h
"
namespace
{
class
BitBuffer
{
public
:
BitBuffer
(
const
uint8_t
*
bytes
size_t
byte_count
)
;
void
GetCurrentOffset
(
size_t
*
out_byte_offset
size_t
*
out_bit_offset
)
;
uint64_t
RemainingBitCount
(
)
const
;
bool
ReadUInt8
(
uint8_t
*
val
)
;
bool
ReadUInt16
(
uint16_t
*
val
)
;
bool
ReadUInt32
(
uint32_t
*
val
)
;
bool
ReadBits
(
uint32_t
*
val
size_t
bit_count
)
;
bool
PeekBits
(
uint32_t
*
val
size_t
bit_count
)
;
bool
ReadExponentialGolomb
(
uint32_t
*
val
)
;
bool
ReadSignedExponentialGolomb
(
int32_t
*
val
)
;
bool
ConsumeBytes
(
size_t
byte_count
)
;
bool
ConsumeBits
(
size_t
bit_count
)
;
bool
Seek
(
size_t
byte_offset
size_t
bit_offset
)
;
protected
:
const
uint8_t
*
const
bytes_
;
size_t
byte_count_
;
size_t
byte_offset_
;
size_t
bit_offset_
;
}
;
}
static
void
ReverseByte
(
uint8_t
&
b
)
{
b
=
(
b
&
0xF0
)
>
>
4
|
(
b
&
0x0F
)
<
<
4
;
b
=
(
b
&
0xCC
)
>
>
2
|
(
b
&
0x33
)
<
<
2
;
b
=
(
b
&
0xAA
)
>
>
1
|
(
b
&
0x55
)
<
<
1
;
}
namespace
mozilla
{
namespace
safebrowsing
{
RiceDeltaDecoder
:
:
RiceDeltaDecoder
(
uint8_t
*
aEncodedData
size_t
aEncodedDataSize
)
:
mEncodedData
(
aEncodedData
)
mEncodedDataSize
(
aEncodedDataSize
)
{
}
bool
RiceDeltaDecoder
:
:
Decode
(
uint32_t
aRiceParameter
uint32_t
aFirstValue
uint32_t
aNumEntries
uint32_t
*
aDecodedData
)
{
for
(
size_t
i
=
0
;
i
<
mEncodedDataSize
;
i
+
+
)
{
ReverseByte
(
mEncodedData
[
i
]
)
;
}
BitBuffer
bitBuffer
(
mEncodedData
mEncodedDataSize
)
;
const
uint32_t
k
=
aRiceParameter
;
uint32_t
previous
=
aFirstValue
;
for
(
uint32_t
i
=
0
;
i
<
aNumEntries
;
i
+
+
)
{
uint32_t
q
;
if
(
!
bitBuffer
.
ReadExponentialGolomb
(
&
q
)
)
{
LOG
(
(
"
Encoded
data
underflow
!
"
)
)
;
return
false
;
}
uint32_t
r
=
0
;
for
(
uint32_t
j
=
0
;
j
<
k
;
j
+
+
)
{
uint32_t
b
=
0
;
if
(
!
bitBuffer
.
ReadBits
(
&
b
1
)
)
{
break
;
}
r
|
=
b
<
<
j
;
}
aDecodedData
[
i
]
=
(
(
q
<
<
k
)
+
r
)
+
previous
;
previous
=
aDecodedData
[
i
]
;
}
return
true
;
}
}
}
namespace
{
uint8_t
LowestBits
(
uint8_t
byte
size_t
bit_count
)
{
return
byte
&
(
(
1
<
<
bit_count
)
-
1
)
;
}
uint8_t
HighestBits
(
uint8_t
byte
size_t
bit_count
)
{
MOZ_ASSERT
(
bit_count
<
8u
)
;
uint8_t
shift
=
8
-
static_cast
<
uint8_t
>
(
bit_count
)
;
uint8_t
mask
=
0xFF
<
<
shift
;
return
(
byte
&
mask
)
>
>
shift
;
}
BitBuffer
:
:
BitBuffer
(
const
uint8_t
*
bytes
size_t
byte_count
)
:
bytes_
(
bytes
)
byte_count_
(
byte_count
)
byte_offset_
(
)
bit_offset_
(
)
{
MOZ_ASSERT
(
static_cast
<
uint64_t
>
(
byte_count_
)
<
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
;
}
uint64_t
BitBuffer
:
:
RemainingBitCount
(
)
const
{
return
(
static_cast
<
uint64_t
>
(
byte_count_
)
-
byte_offset_
)
*
8
-
bit_offset_
;
}
bool
BitBuffer
:
:
ReadUInt8
(
uint8_t
*
val
)
{
uint32_t
bit_val
;
if
(
!
ReadBits
(
&
bit_val
sizeof
(
uint8_t
)
*
8
)
)
{
return
false
;
}
MOZ_ASSERT
(
bit_val
<
=
std
:
:
numeric_limits
<
uint8_t
>
:
:
max
(
)
)
;
*
val
=
static_cast
<
uint8_t
>
(
bit_val
)
;
return
true
;
}
bool
BitBuffer
:
:
ReadUInt16
(
uint16_t
*
val
)
{
uint32_t
bit_val
;
if
(
!
ReadBits
(
&
bit_val
sizeof
(
uint16_t
)
*
8
)
)
{
return
false
;
}
MOZ_ASSERT
(
bit_val
<
=
std
:
:
numeric_limits
<
uint16_t
>
:
:
max
(
)
)
;
*
val
=
static_cast
<
uint16_t
>
(
bit_val
)
;
return
true
;
}
bool
BitBuffer
:
:
ReadUInt32
(
uint32_t
*
val
)
{
return
ReadBits
(
val
sizeof
(
uint32_t
)
*
8
)
;
}
bool
BitBuffer
:
:
PeekBits
(
uint32_t
*
val
size_t
bit_count
)
{
if
(
!
val
|
|
bit_count
>
RemainingBitCount
(
)
|
|
bit_count
>
32
)
{
return
false
;
}
const
uint8_t
*
bytes
=
bytes_
+
byte_offset_
;
size_t
remaining_bits_in_current_byte
=
8
-
bit_offset_
;
uint32_t
bits
=
LowestBits
(
*
bytes
+
+
remaining_bits_in_current_byte
)
;
if
(
bit_count
<
remaining_bits_in_current_byte
)
{
*
val
=
HighestBits
(
bits
bit_offset_
+
bit_count
)
;
return
true
;
}
bit_count
-
=
remaining_bits_in_current_byte
;
while
(
bit_count
>
=
8
)
{
bits
=
(
bits
<
<
8
)
|
*
bytes
+
+
;
bit_count
-
=
8
;
}
if
(
bit_count
>
0
)
{
bits
<
<
=
bit_count
;
bits
|
=
HighestBits
(
*
bytes
bit_count
)
;
}
*
val
=
bits
;
return
true
;
}
bool
BitBuffer
:
:
ReadBits
(
uint32_t
*
val
size_t
bit_count
)
{
return
PeekBits
(
val
bit_count
)
&
&
ConsumeBits
(
bit_count
)
;
}
bool
BitBuffer
:
:
ConsumeBytes
(
size_t
byte_count
)
{
return
ConsumeBits
(
byte_count
*
8
)
;
}
bool
BitBuffer
:
:
ConsumeBits
(
size_t
bit_count
)
{
if
(
bit_count
>
RemainingBitCount
(
)
)
{
return
false
;
}
byte_offset_
+
=
(
bit_offset_
+
bit_count
)
/
8
;
bit_offset_
=
(
bit_offset_
+
bit_count
)
%
8
;
return
true
;
}
bool
BitBuffer
:
:
ReadExponentialGolomb
(
uint32_t
*
val
)
{
if
(
!
val
)
{
return
false
;
}
*
val
=
0
;
size_t
one_bit_count
=
0
;
uint32_t
peeked_bit
;
while
(
PeekBits
(
&
peeked_bit
1
)
&
&
peeked_bit
=
=
1
)
{
one_bit_count
+
+
;
ConsumeBits
(
1
)
;
}
if
(
!
ConsumeBits
(
1
)
)
{
return
false
;
}
*
val
=
one_bit_count
;
return
true
;
}
bool
BitBuffer
:
:
ReadSignedExponentialGolomb
(
int32_t
*
val
)
{
uint32_t
unsigned_val
;
if
(
!
ReadExponentialGolomb
(
&
unsigned_val
)
)
{
return
false
;
}
if
(
(
unsigned_val
&
1
)
=
=
0
)
{
*
val
=
-
static_cast
<
int32_t
>
(
unsigned_val
/
2
)
;
}
else
{
*
val
=
(
unsigned_val
+
1
)
/
2
;
}
return
true
;
}
void
BitBuffer
:
:
GetCurrentOffset
(
size_t
*
out_byte_offset
size_t
*
out_bit_offset
)
{
MOZ_ASSERT
(
out_byte_offset
!
=
NULL
)
;
MOZ_ASSERT
(
out_bit_offset
!
=
NULL
)
;
*
out_byte_offset
=
byte_offset_
;
*
out_bit_offset
=
bit_offset_
;
}
bool
BitBuffer
:
:
Seek
(
size_t
byte_offset
size_t
bit_offset
)
{
if
(
byte_offset
>
byte_count_
|
|
bit_offset
>
7
|
|
(
byte_offset
=
=
byte_count_
&
&
bit_offset
>
0
)
)
{
return
false
;
}
byte_offset_
=
byte_offset
;
bit_offset_
=
bit_offset
;
return
true
;
}
}
