const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
urlUtils
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
utils
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierUtils
)
;
function
testMobileOnlyThreats
(
)
{
(
function
testUpdateRequest
(
)
{
let
requestWithPHA
=
urlUtils
.
makeUpdateRequestV4
(
[
"
goog
-
phish
-
proto
"
"
goog
-
harmful
-
proto
"
]
[
"
AAAAAA
"
"
AAAAAA
"
]
)
;
let
requestNoPHA
=
urlUtils
.
makeUpdateRequestV4
(
[
"
goog
-
phish
-
proto
"
]
[
"
AAAAAA
"
]
)
;
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
notEqual
(
requestWithPHA
requestNoPHA
"
PHA
(
i
.
e
.
goog
-
harmful
-
proto
)
shouldn
'
t
be
filtered
on
mobile
platform
.
"
)
;
}
else
{
equal
(
requestWithPHA
requestNoPHA
"
PHA
(
i
.
e
.
goog
-
harmful
-
proto
)
should
be
filtered
on
non
-
mobile
platform
.
"
)
;
}
}
)
(
)
;
(
function
testFullHashRequest
(
)
{
let
requestWithPHA
=
urlUtils
.
makeFindFullHashRequestV4
(
[
"
goog
-
phish
-
proto
"
"
goog
-
harmful
-
proto
"
]
[
"
"
"
"
]
[
btoa
(
"
0123
"
)
]
2
1
)
;
let
requestNoPHA
=
urlUtils
.
makeFindFullHashRequestV4
(
[
"
goog
-
phish
-
proto
"
]
[
"
"
]
[
btoa
(
"
0123
"
)
]
1
1
)
;
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
notEqual
(
requestWithPHA
requestNoPHA
"
PHA
(
i
.
e
.
goog
-
harmful
-
proto
)
shouldn
'
t
be
filtered
on
mobile
platform
.
"
)
;
}
else
{
equal
(
requestWithPHA
requestNoPHA
"
PHA
(
i
.
e
.
goog
-
harmful
-
proto
)
should
be
filtered
on
non
-
mobile
platform
.
"
)
;
}
}
)
(
)
;
}
function
testDesktopOnlyThreats
(
)
{
let
requestWithDesktopOnlyThreats
=
urlUtils
.
makeUpdateRequestV4
(
[
"
goog
-
phish
-
proto
"
"
goog
-
downloadwhite
-
proto
"
"
goog
-
badbinurl
-
proto
"
]
[
"
"
"
"
"
"
]
)
;
let
requestNoDesktopOnlyThreats
=
urlUtils
.
makeUpdateRequestV4
(
[
"
goog
-
phish
-
proto
"
]
[
"
"
]
)
;
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
equal
(
requestWithDesktopOnlyThreats
requestNoDesktopOnlyThreats
"
Android
shouldn
'
t
contain
'
goog
-
downloadwhite
-
proto
'
and
'
goog
-
badbinurl
-
proto
'
.
"
)
;
}
else
{
notEqual
(
requestWithDesktopOnlyThreats
requestNoDesktopOnlyThreats
"
Desktop
should
contain
'
goog
-
downloadwhite
-
proto
'
and
'
goog
-
badbinurl
-
proto
'
.
"
)
;
}
}
function
run_test
(
)
{
testMobileOnlyThreats
(
)
;
testDesktopOnlyThreats
(
)
;
}
