function
newPset
(
)
{
let
pset
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
prefixset
;
1
"
]
.
createInstance
(
Ci
.
nsIUrlClassifierPrefixSet
)
;
pset
.
init
(
"
all
"
)
;
return
pset
;
}
function
arrContains
(
arr
target
)
{
let
start
=
0
;
let
end
=
arr
.
length
-
1
;
let
i
=
0
;
while
(
end
>
start
)
{
i
=
start
+
(
end
-
start
>
>
1
)
;
let
value
=
arr
[
i
]
;
if
(
value
<
target
)
start
=
i
+
1
;
else
if
(
value
>
target
)
end
=
i
-
1
;
else
break
;
}
if
(
start
=
=
end
)
i
=
start
;
return
(
!
(
i
<
0
|
|
i
>
=
arr
.
length
)
&
&
arr
[
i
]
=
=
target
)
;
}
function
checkContents
(
pset
prefixes
)
{
var
outcount
=
{
}
outset
=
{
}
;
outset
=
pset
.
getPrefixes
(
outcount
)
;
let
inset
=
prefixes
;
Assert
.
equal
(
inset
.
length
outset
.
length
)
;
inset
.
sort
(
(
x
y
)
=
>
x
-
y
)
;
for
(
let
i
=
0
;
i
<
inset
.
length
;
i
+
+
)
{
Assert
.
equal
(
inset
[
i
]
outset
[
i
]
)
;
}
}
function
wrappedProbe
(
pset
prefix
)
{
return
pset
.
contains
(
prefix
)
;
}
function
doRandomLookups
(
pset
prefixes
N
)
{
for
(
let
i
=
0
;
i
<
N
;
i
+
+
)
{
let
randInt
=
prefixes
[
0
]
;
while
(
arrContains
(
prefixes
randInt
)
)
randInt
=
Math
.
floor
(
Math
.
random
(
)
*
Math
.
pow
(
2
32
)
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
randInt
)
)
;
}
}
function
doExpectedLookups
(
pset
prefixes
N
)
{
for
(
let
i
=
0
;
i
<
N
;
i
+
+
)
{
prefixes
.
forEach
(
function
(
x
)
{
dump
(
"
Checking
"
+
x
+
"
\
n
"
)
;
Assert
.
ok
(
wrappedProbe
(
pset
x
)
)
;
}
)
;
}
}
function
testBasicPset
(
)
{
let
pset
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
prefixset
;
1
"
]
.
createInstance
(
Ci
.
nsIUrlClassifierPrefixSet
)
;
let
prefixes
=
[
2
50
100
2000
78000
1593203
]
;
pset
.
setPrefixes
(
prefixes
prefixes
.
length
)
;
Assert
.
ok
(
wrappedProbe
(
pset
100
)
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
100000
)
)
;
Assert
.
ok
(
wrappedProbe
(
pset
1593203
)
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
999
)
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
0
)
)
;
checkContents
(
pset
prefixes
)
;
}
function
testDuplicates
(
)
{
let
pset
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
prefixset
;
1
"
]
.
createInstance
(
Ci
.
nsIUrlClassifierPrefixSet
)
;
let
prefixes
=
[
1
1
2
2
2
3
3
3
3
3
3
5
6
6
7
7
9
9
9
]
;
pset
.
setPrefixes
(
prefixes
prefixes
.
length
)
;
Assert
.
ok
(
wrappedProbe
(
pset
1
)
)
;
Assert
.
ok
(
wrappedProbe
(
pset
2
)
)
;
Assert
.
ok
(
wrappedProbe
(
pset
5
)
)
;
Assert
.
ok
(
wrappedProbe
(
pset
9
)
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
4
)
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
8
)
)
;
checkContents
(
pset
prefixes
)
;
}
function
testSimplePset
(
)
{
let
pset
=
newPset
(
)
;
let
prefixes
=
[
1
2
100
400
123456789
]
;
pset
.
setPrefixes
(
prefixes
prefixes
.
length
)
;
doRandomLookups
(
pset
prefixes
100
)
;
doExpectedLookups
(
pset
prefixes
1
)
;
checkContents
(
pset
prefixes
)
;
}
function
testReSetPrefixes
(
)
{
let
pset
=
newPset
(
)
;
let
prefixes
=
[
1
5
100
1000
150000
]
;
pset
.
setPrefixes
(
prefixes
prefixes
.
length
)
;
doExpectedLookups
(
pset
prefixes
1
)
;
let
secondPrefixes
=
[
12
50
300
2000
5000
200000
]
;
pset
.
setPrefixes
(
secondPrefixes
secondPrefixes
.
length
)
;
doExpectedLookups
(
pset
secondPrefixes
1
)
;
for
(
let
i
=
0
;
i
<
prefixes
.
length
;
i
+
+
)
{
Assert
.
ok
(
!
wrappedProbe
(
pset
prefixes
[
i
]
)
)
;
}
checkContents
(
pset
secondPrefixes
)
;
}
function
testLoadSaveLargeSet
(
)
{
let
N
=
1000
;
let
arr
=
[
]
;
for
(
let
i
=
0
;
i
<
N
;
i
+
+
)
{
let
randInt
=
Math
.
floor
(
Math
.
random
(
)
*
Math
.
pow
(
2
32
)
)
;
arr
.
push
(
randInt
)
;
}
arr
.
sort
(
(
x
y
)
=
>
x
-
y
)
;
let
pset
=
newPset
(
)
;
pset
.
setPrefixes
(
arr
arr
.
length
)
;
doExpectedLookups
(
pset
arr
1
)
;
doRandomLookups
(
pset
arr
1000
)
;
checkContents
(
pset
arr
)
;
var
file
=
Services
.
dirsvc
.
get
(
"
ProfLD
"
Ci
.
nsIFile
)
;
file
.
append
(
"
testLarge
.
pset
"
)
;
pset
.
storeToFile
(
file
)
;
let
psetLoaded
=
newPset
(
)
;
psetLoaded
.
loadFromFile
(
file
)
;
doExpectedLookups
(
psetLoaded
arr
1
)
;
doRandomLookups
(
psetLoaded
arr
1000
)
;
checkContents
(
psetLoaded
arr
)
;
}
function
testTinySet
(
)
{
let
pset
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
prefixset
;
1
"
]
.
createInstance
(
Ci
.
nsIUrlClassifierPrefixSet
)
;
let
prefixes
=
[
1
]
;
pset
.
setPrefixes
(
prefixes
prefixes
.
length
)
;
Assert
.
ok
(
wrappedProbe
(
pset
1
)
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
100000
)
)
;
checkContents
(
pset
prefixes
)
;
prefixes
=
[
]
;
pset
.
setPrefixes
(
prefixes
prefixes
.
length
)
;
Assert
.
ok
(
!
wrappedProbe
(
pset
1
)
)
;
checkContents
(
pset
prefixes
)
;
}
function
testLoadSaveNoDelta
(
)
{
let
N
=
100
;
let
arr
=
[
]
;
for
(
let
i
=
0
;
i
<
N
;
i
+
+
)
{
arr
.
push
(
(
(
1
<
<
16
)
+
1
)
*
i
)
;
}
let
pset
=
newPset
(
)
;
pset
.
setPrefixes
(
arr
arr
.
length
)
;
doExpectedLookups
(
pset
arr
1
)
;
var
file
=
Services
.
dirsvc
.
get
(
"
ProfLD
"
Ci
.
nsIFile
)
;
file
.
append
(
"
testNoDelta
.
pset
"
)
;
pset
.
storeToFile
(
file
)
;
pset
.
loadFromFile
(
file
)
;
doExpectedLookups
(
pset
arr
1
)
;
}
var
tests
=
[
testBasicPset
testSimplePset
testReSetPrefixes
testLoadSaveLargeSet
testDuplicates
testTinySet
testLoadSaveNoDelta
]
;
function
run_test
(
)
{
for
(
let
i
=
0
;
i
<
tests
.
length
;
i
+
+
)
{
dump
(
"
Running
"
+
tests
[
i
]
.
name
+
"
\
n
"
)
;
tests
[
i
]
(
)
;
}
}
