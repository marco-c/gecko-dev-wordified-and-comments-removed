#
include
"
Common
.
h
"
#
define
EXPIRED_TIME_SEC
(
PR_Now
(
)
/
PR_USEC_PER_SEC
-
3600
)
#
define
NOTEXPIRED_TIME_SEC
(
PR_Now
(
)
/
PR_USEC_PER_SEC
+
3600
)
static
void
SetupCacheEntry
(
LookupCacheV4
*
aLookupCache
const
nsCString
&
aCompletion
bool
aNegExpired
=
false
bool
aPosExpired
=
false
)
{
FullHashResponseMap
map
;
CachedFullHashResponse
*
response
=
map
.
LookupOrAdd
(
GeneratePrefix
(
aCompletion
PREFIX_SIZE
)
)
;
response
-
>
negativeCacheExpirySec
=
aNegExpired
?
EXPIRED_TIME_SEC
:
NOTEXPIRED_TIME_SEC
;
response
-
>
fullHashes
.
Put
(
GeneratePrefix
(
aCompletion
COMPLETE_SIZE
)
aPosExpired
?
EXPIRED_TIME_SEC
:
NOTEXPIRED_TIME_SEC
)
;
aLookupCache
-
>
AddFullHashResponseToCache
(
map
)
;
}
void
TestCache
(
const
Completion
aCompletion
bool
aExpectedHas
bool
aExpectedConfirmed
bool
aExpectedFromCache
LookupCacheV4
*
aCache
=
nullptr
)
{
bool
has
fromCache
confirmed
;
uint32_t
matchLength
;
TableFreshnessMap
dummy
;
if
(
aCache
)
{
aCache
-
>
Has
(
aCompletion
dummy
0
&
has
&
matchLength
&
confirmed
&
fromCache
)
;
}
else
{
_PrefixArray
array
=
{
GeneratePrefix
(
_Fragment
(
"
cache
.
notexpired
.
com
/
"
)
10
)
GeneratePrefix
(
_Fragment
(
"
cache
.
expired
.
com
/
"
)
8
)
GeneratePrefix
(
_Fragment
(
"
gound
.
com
/
"
)
5
)
GeneratePrefix
(
_Fragment
(
"
small
.
com
/
"
)
4
)
}
;
UniquePtr
<
LookupCacheV4
>
cache
=
SetupLookupCacheV4
(
array
)
;
SetupCacheEntry
(
cache
.
get
(
)
_Fragment
(
"
cache
.
notexpired
.
com
/
"
)
)
;
SetupCacheEntry
(
cache
.
get
(
)
_Fragment
(
"
cache
.
expired
.
com
/
"
)
true
true
)
;
cache
-
>
Has
(
aCompletion
dummy
0
&
has
&
matchLength
&
confirmed
&
fromCache
)
;
}
EXPECT_EQ
(
has
aExpectedHas
)
;
EXPECT_EQ
(
confirmed
aExpectedConfirmed
)
;
EXPECT_EQ
(
fromCache
aExpectedFromCache
)
;
}
void
TestCache
(
const
_Fragment
&
aFragment
bool
aExpectedHas
bool
aExpectedConfirmed
bool
aExpectedFromCache
LookupCacheV4
*
aCache
=
nullptr
)
{
Completion
lookupHash
;
nsCOMPtr
<
nsICryptoHash
>
cryptoHash
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
)
;
lookupHash
.
FromPlaintext
(
aFragment
cryptoHash
)
;
TestCache
(
lookupHash
aExpectedHas
aExpectedConfirmed
aExpectedFromCache
aCache
)
;
}
TEST
(
CachingV4
NotFound
)
{
TestCache
(
_Fragment
(
"
nomatch
.
com
/
"
)
false
false
false
)
;
}
TEST
(
CachingV4
NotInCache
)
{
TestCache
(
_Fragment
(
"
gound
.
com
/
"
)
true
false
false
)
;
}
TEST
(
CachingV4
InPositiveCacheNotExpired
)
{
TestCache
(
_Fragment
(
"
cache
.
notexpired
.
com
/
"
)
true
true
true
)
;
}
TEST
(
CachingV4
InPositiveCacheExpired
)
{
TestCache
(
_Fragment
(
"
cache
.
expired
.
com
/
"
)
true
false
true
)
;
}
TEST
(
CachingV4
InNegativeCacheNotExpired
)
{
nsCOMPtr
<
nsICryptoHash
>
cryptoHash
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
)
;
Completion
prefix
;
prefix
.
FromPlaintext
(
_Fragment
(
"
cache
.
notexpired
.
com
/
"
)
cryptoHash
)
;
Completion
fullhash
;
fullhash
.
FromPlaintext
(
_Fragment
(
"
firefox
.
com
/
"
)
cryptoHash
)
;
memcpy
(
fullhash
.
buf
prefix
.
buf
10
)
;
TestCache
(
fullhash
false
false
true
)
;
}
TEST
(
CachingV4
InNegativeCacheExpired
)
{
nsCOMPtr
<
nsICryptoHash
>
cryptoHash
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
)
;
Completion
prefix
;
prefix
.
FromPlaintext
(
_Fragment
(
"
cache
.
expired
.
com
/
"
)
cryptoHash
)
;
Completion
fullhash
;
fullhash
.
FromPlaintext
(
_Fragment
(
"
firefox
.
com
/
"
)
cryptoHash
)
;
memcpy
(
fullhash
.
buf
prefix
.
buf
10
)
;
TestCache
(
fullhash
true
false
true
)
;
}
#
define
CACHED_URL
_Fragment
(
"
cache
.
com
/
"
)
#
define
NEG_CACHE_EXPIRED_URL
_Fragment
(
"
cache
.
negExpired
.
com
/
"
)
#
define
POS_CACHE_EXPIRED_URL
_Fragment
(
"
cache
.
posExpired
.
com
/
"
)
#
define
BOTH_CACHE_EXPIRED_URL
_Fragment
(
"
cache
.
negAndposExpired
.
com
/
"
)
TEST
(
CachingV4
InvalidateExpiredCacheEntry
)
{
_PrefixArray
array
=
{
GeneratePrefix
(
CACHED_URL
10
)
GeneratePrefix
(
NEG_CACHE_EXPIRED_URL
8
)
GeneratePrefix
(
POS_CACHE_EXPIRED_URL
5
)
GeneratePrefix
(
BOTH_CACHE_EXPIRED_URL
4
)
}
;
UniquePtr
<
LookupCacheV4
>
cache
=
SetupLookupCacheV4
(
array
)
;
SetupCacheEntry
(
cache
.
get
(
)
CACHED_URL
false
false
)
;
SetupCacheEntry
(
cache
.
get
(
)
NEG_CACHE_EXPIRED_URL
true
false
)
;
SetupCacheEntry
(
cache
.
get
(
)
POS_CACHE_EXPIRED_URL
false
true
)
;
SetupCacheEntry
(
cache
.
get
(
)
BOTH_CACHE_EXPIRED_URL
true
true
)
;
TestCache
(
CACHED_URL
true
true
true
cache
.
get
(
)
)
;
TestCache
(
NEG_CACHE_EXPIRED_URL
true
true
true
cache
.
get
(
)
)
;
TestCache
(
POS_CACHE_EXPIRED_URL
true
false
true
cache
.
get
(
)
)
;
TestCache
(
BOTH_CACHE_EXPIRED_URL
true
false
true
cache
.
get
(
)
)
;
cache
-
>
InvalidateExpiredCacheEntry
(
)
;
TestCache
(
NEG_CACHE_EXPIRED_URL
true
false
false
cache
.
get
(
)
)
;
TestCache
(
BOTH_CACHE_EXPIRED_URL
true
false
false
cache
.
get
(
)
)
;
TestCache
(
CACHED_URL
true
true
true
cache
.
get
(
)
)
;
TestCache
(
POS_CACHE_EXPIRED_URL
true
false
true
cache
.
get
(
)
)
;
}
TEST
(
CachingV4
NegativeCacheExpire
)
{
_PrefixArray
array
=
{
GeneratePrefix
(
NEG_CACHE_EXPIRED_URL
8
)
}
;
UniquePtr
<
LookupCacheV4
>
cache
=
SetupLookupCacheV4
(
array
)
;
FullHashResponseMap
map
;
CachedFullHashResponse
*
response
=
map
.
LookupOrAdd
(
GeneratePrefix
(
NEG_CACHE_EXPIRED_URL
PREFIX_SIZE
)
)
;
response
-
>
negativeCacheExpirySec
=
EXPIRED_TIME_SEC
;
cache
-
>
AddFullHashResponseToCache
(
map
)
;
TestCache
(
NEG_CACHE_EXPIRED_URL
true
false
true
cache
.
get
(
)
)
;
TestCache
(
NEG_CACHE_EXPIRED_URL
true
false
false
cache
.
get
(
)
)
;
}
TEST
(
CachingV4
Ensure4BytesLookup
)
{
_PrefixArray
array
=
{
GeneratePrefix
(
CACHED_URL
8
)
}
;
UniquePtr
<
LookupCacheV4
>
cache
=
SetupLookupCacheV4
(
array
)
;
FullHashResponseMap
map
;
CachedFullHashResponse
*
response
=
map
.
LookupOrAdd
(
GeneratePrefix
(
CACHED_URL
5
)
)
;
response
-
>
negativeCacheExpirySec
=
NOTEXPIRED_TIME_SEC
;
response
-
>
fullHashes
.
Put
(
GeneratePrefix
(
CACHED_URL
COMPLETE_SIZE
)
NOTEXPIRED_TIME_SEC
)
;
cache
-
>
AddFullHashResponseToCache
(
map
)
;
TestCache
(
CACHED_URL
true
false
false
cache
.
get
(
)
)
;
}
