#
include
"
HashStore
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
string
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
safebrowsing
;
static
const
char
*
kFilesInV2
[
]
=
{
"
.
pset
"
"
.
sbstore
"
}
;
static
const
char
*
kFilesInV4
[
]
=
{
"
.
vlpset
"
"
.
metadata
"
}
;
#
define
V2_TABLE
"
gtest
-
malware
-
simple
"
#
define
V4_TABLE1
"
goog
-
malware
-
proto
"
#
define
V4_TABLE2
"
goog
-
phish
-
proto
"
#
define
ROOT_DIR
NS_LITERAL_STRING
(
"
safebrowsing
"
)
#
define
SB_FILE
(
x
y
)
NS_ConvertUTF8toUTF16
(
nsPrintfCString
(
"
%
s
%
s
"
x
y
)
)
template
<
typename
T
size_t
N
>
void
CheckFileExist
(
const
char
*
table
const
T
(
&
files
)
[
N
]
bool
expectExists
)
{
for
(
uint32_t
i
=
0
;
i
<
N
;
i
+
+
)
{
NS_ConvertUTF8toUTF16
SUB_DIR
(
strstr
(
table
"
-
proto
"
)
?
"
google4
"
:
"
"
)
;
nsCOMPtr
<
nsIFile
>
file
=
GetFile
(
nsTArray
<
nsString
>
{
ROOT_DIR
SUB_DIR
SB_FILE
(
table
files
[
i
]
)
}
)
;
bool
exists
;
file
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
expectExists
exists
)
<
<
file
-
>
HumanReadablePath
(
)
.
get
(
)
;
}
}
TEST
(
UrlClassifierFailUpdate
CheckTableReset
)
{
const
bool
FULL_UPDATE
=
true
;
const
bool
PARTIAL_UPDATE
=
false
;
{
RefPtr
<
TableUpdateV2
>
update
=
new
TableUpdateV2
(
NS_LITERAL_CSTRING
(
V2_TABLE
)
)
;
Unused
<
<
update
-
>
NewAddChunk
(
1
)
;
ApplyUpdate
(
update
)
;
CheckFileExist
(
V2_TABLE
kFilesInV2
true
)
;
}
auto
func
=
[
]
(
RefPtr
<
TableUpdateV4
>
update
bool
full
const
char
*
str
)
{
update
-
>
SetFullUpdate
(
full
)
;
nsCString
prefix
(
str
)
;
update
-
>
NewPrefixes
(
prefix
.
Length
(
)
prefix
)
;
}
;
{
RefPtr
<
TableUpdateV4
>
update
=
new
TableUpdateV4
(
NS_LITERAL_CSTRING
(
V4_TABLE1
)
)
;
func
(
update
FULL_UPDATE
"
test_prefix
"
)
;
ApplyUpdate
(
update
)
;
CheckFileExist
(
V4_TABLE1
kFilesInV4
true
)
;
}
{
RefPtr
<
TableUpdateV4
>
update
=
new
TableUpdateV4
(
NS_LITERAL_CSTRING
(
V4_TABLE2
)
)
;
func
(
update
FULL_UPDATE
"
test_prefix
"
)
;
ApplyUpdate
(
update
)
;
CheckFileExist
(
V4_TABLE2
kFilesInV4
true
)
;
}
{
RefPtr
<
TableUpdateV4
>
update
=
new
TableUpdateV4
(
NS_LITERAL_CSTRING
(
V4_TABLE1
)
)
;
func
(
update
PARTIAL_UPDATE
"
test_prefix
"
)
;
ApplyUpdate
(
update
)
;
CheckFileExist
(
V4_TABLE1
kFilesInV4
false
)
;
CheckFileExist
(
V2_TABLE
kFilesInV2
true
)
;
CheckFileExist
(
V4_TABLE2
kFilesInV4
true
)
;
}
}
