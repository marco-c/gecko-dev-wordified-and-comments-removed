#
ifndef
nsUrlClassifierGTestCommon_h__
#
define
nsUrlClassifierGTestCommon_h__
#
include
"
Entries
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
HashStore
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
#
include
"
LookupCacheV4
.
h
"
using
namespace
mozilla
:
:
safebrowsing
;
namespace
mozilla
{
namespace
safebrowsing
{
class
Classifier
;
class
LookupCacheV4
;
class
TableUpdate
;
}
}
#
define
GTEST_SAFEBROWSING_DIR
"
safebrowsing
"
_ns
#
define
GTEST_TABLE_V4
"
gtest
-
malware
-
proto
"
_ns
#
define
GTEST_TABLE_V2
"
gtest
-
malware
-
simple
"
_ns
template
<
typename
Function
>
void
RunTestInNewThread
(
Function
&
&
aFunction
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
RunTestInNewThread
"
std
:
:
forward
<
Function
>
(
aFunction
)
)
;
nsCOMPtr
<
nsIThread
>
testingThread
;
nsresult
rv
=
NS_NewNamedThread
(
"
Testing
Thread
"
getter_AddRefs
(
testingThread
)
r
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
testingThread
-
>
Shutdown
(
)
;
}
nsresult
SyncApplyUpdates
(
Classifier
*
aClassifier
nsTArray
<
TableUpdate
*
>
*
aUpdates
)
;
nsresult
SyncApplyUpdates
(
TableUpdateArray
&
aUpdates
)
;
already_AddRefed
<
nsIFile
>
GetFile
(
const
nsTArray
<
nsString
>
&
aPath
)
;
void
ApplyUpdate
(
nsTArray
<
TableUpdate
*
>
&
aUpdates
)
;
void
ApplyUpdate
(
TableUpdate
*
aUpdate
)
;
typedef
nsCString
_Prefix
;
typedef
nsTArray
<
nsCString
>
_PrefixArray
;
nsresult
PrefixArrayToPrefixStringMap
(
const
_PrefixArray
&
aPrefixArray
PrefixStringMap
&
aOut
)
;
nsresult
PrefixArrayToAddPrefixArray
(
const
_PrefixArray
&
aPrefixArray
AddPrefixArray
&
aOut
)
;
_Prefix
CreatePrefixFromURL
(
const
char
*
aURL
uint8_t
aPrefixSize
)
;
_Prefix
CreatePrefixFromURL
(
const
nsCString
&
aURL
uint8_t
aPrefixSize
)
;
void
CheckContent
(
LookupCacheV4
*
cache
const
_PrefixArray
&
aPrefixArray
)
;
static
inline
nsresult
BuildCache
(
LookupCacheV2
*
cache
const
_PrefixArray
&
aPrefixArray
)
{
AddPrefixArray
prefixes
;
AddCompleteArray
completions
;
nsresult
rv
=
PrefixArrayToAddPrefixArray
(
aPrefixArray
prefixes
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
cache
-
>
Build
(
prefixes
completions
)
;
}
static
inline
nsresult
BuildCache
(
LookupCacheV4
*
cache
const
_PrefixArray
&
aPrefixArray
)
{
PrefixStringMap
map
;
PrefixArrayToPrefixStringMap
(
aPrefixArray
map
)
;
return
cache
-
>
Build
(
map
)
;
}
template
<
typename
T
>
RefPtr
<
T
>
SetupLookupCache
(
const
_PrefixArray
&
aPrefixArray
nsCOMPtr
<
nsIFile
>
&
aFile
)
{
RefPtr
<
T
>
cache
=
new
T
(
GTEST_TABLE_V4
"
"
_ns
aFile
)
;
nsresult
rv
=
cache
-
>
Init
(
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
rv
=
BuildCache
(
cache
aPrefixArray
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
return
cache
;
}
template
<
typename
T
>
RefPtr
<
T
>
SetupLookupCache
(
const
_PrefixArray
&
aPrefixArray
)
{
nsCOMPtr
<
nsIFile
>
file
;
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
file
)
)
;
file
-
>
AppendNative
(
GTEST_SAFEBROWSING_DIR
)
;
RefPtr
<
T
>
cache
=
new
T
(
GTEST_TABLE_V4
"
"
_ns
file
)
;
nsresult
rv
=
cache
-
>
Init
(
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
rv
=
BuildCache
(
cache
aPrefixArray
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
return
cache
;
}
RefPtr
<
Classifier
>
GetClassifier
(
)
;
nsresult
BuildLookupCache
(
const
RefPtr
<
Classifier
>
&
aClassifier
const
nsACString
&
aTable
_PrefixArray
&
aPrefixArray
)
;
#
endif
