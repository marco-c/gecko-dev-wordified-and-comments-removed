#
ifndef
nsUrlClassifierGTestCommon_h__
#
define
nsUrlClassifierGTestCommon_h__
#
include
"
Entries
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
using
namespace
mozilla
:
:
safebrowsing
;
namespace
mozilla
{
namespace
safebrowsing
{
class
Classifier
;
class
LookupCacheV4
;
class
TableUpdate
;
}
}
#
define
GTEST_TABLE_V4
"
gtest
-
malware
-
proto
"
_ns
#
define
GTEST_TABLE_V2
"
gtest
-
malware
-
simple
"
_ns
template
<
typename
Function
>
void
RunTestInNewThread
(
Function
&
&
aFunction
)
;
nsresult
SyncApplyUpdates
(
Classifier
*
aClassifier
nsTArray
<
TableUpdate
*
>
*
aUpdates
)
;
already_AddRefed
<
nsIFile
>
GetFile
(
const
nsTArray
<
nsString
>
&
aPath
)
;
void
ApplyUpdate
(
nsTArray
<
TableUpdate
*
>
&
aUpdates
)
;
void
ApplyUpdate
(
TableUpdate
*
aUpdate
)
;
typedef
nsCString
_Prefix
;
typedef
nsTArray
<
nsCString
>
_PrefixArray
;
nsresult
PrefixArrayToPrefixStringMap
(
const
_PrefixArray
&
aPrefixArray
PrefixStringMap
&
aOut
)
;
nsresult
PrefixArrayToAddPrefixArray
(
const
_PrefixArray
&
aPrefixArray
AddPrefixArray
&
aOut
)
;
_Prefix
CreatePrefixFromURL
(
const
char
*
aURL
uint8_t
aPrefixSize
)
;
_Prefix
CreatePrefixFromURL
(
const
nsCString
&
aURL
uint8_t
aPrefixSize
)
;
void
CheckContent
(
LookupCacheV4
*
cache
const
_PrefixArray
&
aPrefixArray
)
;
template
<
typename
T
>
RefPtr
<
T
>
SetupLookupCache
(
const
_PrefixArray
&
aPrefixArray
)
;
template
<
typename
T
>
RefPtr
<
T
>
SetupLookupCache
(
const
_PrefixArray
&
aPrefixArray
nsCOMPtr
<
nsIFile
>
&
aFile
)
;
RefPtr
<
Classifier
>
GetClassifier
(
)
;
nsresult
BuildLookupCache
(
const
RefPtr
<
Classifier
>
&
aClassifier
const
nsACString
&
aTable
_PrefixArray
&
aPrefixArray
)
;
#
endif
