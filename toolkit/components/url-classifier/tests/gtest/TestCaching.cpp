#
include
"
Common
.
h
"
#
define
EXPIRED_TIME_SEC
(
PR_Now
(
)
/
PR_USEC_PER_SEC
-
3600
)
#
define
NOTEXPIRED_TIME_SEC
(
PR_Now
(
)
/
PR_USEC_PER_SEC
+
3600
)
#
define
CACHED_URL
NS_LITERAL_CSTRING
(
"
cache
.
com
/
"
)
#
define
NEG_CACHE_EXPIRED_URL
NS_LITERAL_CSTRING
(
"
cache
.
negExpired
.
com
/
"
)
#
define
POS_CACHE_EXPIRED_URL
NS_LITERAL_CSTRING
(
"
cache
.
posExpired
.
com
/
"
)
#
define
BOTH_CACHE_EXPIRED_URL
NS_LITERAL_CSTRING
(
"
cache
.
negAndposExpired
.
com
/
"
)
static
void
SetupCacheEntry
(
LookupCacheV2
*
aLookupCache
const
nsCString
&
aCompletion
bool
aNegExpired
=
false
bool
aPosExpired
=
false
)
{
AddCompleteArray
completes
;
AddCompleteArray
emptyCompletes
;
MissPrefixArray
misses
;
MissPrefixArray
emptyMisses
;
AddComplete
*
add
=
completes
.
AppendElement
(
fallible
)
;
add
-
>
complete
.
FromPlaintext
(
aCompletion
)
;
Prefix
*
prefix
=
misses
.
AppendElement
(
fallible
)
;
prefix
-
>
FromPlaintext
(
aCompletion
)
;
int64_t
posExpirySec
=
aPosExpired
?
EXPIRED_TIME_SEC
:
NOTEXPIRED_TIME_SEC
;
aLookupCache
-
>
AddGethashResultToCache
(
completes
emptyMisses
posExpirySec
)
;
int64_t
negExpirySec
=
aNegExpired
?
EXPIRED_TIME_SEC
:
NOTEXPIRED_TIME_SEC
;
aLookupCache
-
>
AddGethashResultToCache
(
emptyCompletes
misses
negExpirySec
)
;
}
static
void
SetupCacheEntry
(
LookupCacheV4
*
aLookupCache
const
nsCString
&
aCompletion
bool
aNegExpired
=
false
bool
aPosExpired
=
false
)
{
FullHashResponseMap
map
;
Prefix
prefix
;
prefix
.
FromPlaintext
(
aCompletion
)
;
CachedFullHashResponse
*
response
=
map
.
LookupOrAdd
(
prefix
.
ToUint32
(
)
)
;
response
-
>
negativeCacheExpirySec
=
aNegExpired
?
EXPIRED_TIME_SEC
:
NOTEXPIRED_TIME_SEC
;
response
-
>
fullHashes
.
Put
(
CreatePrefixFromURL
(
aCompletion
COMPLETE_SIZE
)
aPosExpired
?
EXPIRED_TIME_SEC
:
NOTEXPIRED_TIME_SEC
)
;
aLookupCache
-
>
AddFullHashResponseToCache
(
map
)
;
}
template
<
typename
T
>
static
void
TestCache
(
const
Completion
aCompletion
bool
aExpectedHas
bool
aExpectedConfirmed
bool
aExpectedInCache
T
*
aCache
=
nullptr
)
{
bool
has
inCache
confirmed
;
uint32_t
matchLength
;
if
(
aCache
)
{
aCache
-
>
Has
(
aCompletion
&
has
&
matchLength
&
confirmed
)
;
inCache
=
aCache
-
>
IsInCache
(
aCompletion
.
ToUint32
(
)
)
;
}
else
{
_PrefixArray
array
=
{
CreatePrefixFromURL
(
"
cache
.
notexpired
.
com
/
"
10
)
CreatePrefixFromURL
(
"
cache
.
expired
.
com
/
"
8
)
CreatePrefixFromURL
(
"
gound
.
com
/
"
5
)
CreatePrefixFromURL
(
"
small
.
com
/
"
4
)
}
;
RefPtr
<
T
>
cache
=
SetupLookupCache
<
T
>
(
array
)
;
SetupCacheEntry
(
cache
NS_LITERAL_CSTRING
(
"
cache
.
notexpired
.
com
/
"
)
)
;
SetupCacheEntry
(
cache
NS_LITERAL_CSTRING
(
"
cache
.
expired
.
com
/
"
)
true
true
)
;
cache
-
>
Has
(
aCompletion
&
has
&
matchLength
&
confirmed
)
;
inCache
=
cache
-
>
IsInCache
(
aCompletion
.
ToUint32
(
)
)
;
}
EXPECT_EQ
(
has
aExpectedHas
)
;
EXPECT_EQ
(
confirmed
aExpectedConfirmed
)
;
EXPECT_EQ
(
inCache
aExpectedInCache
)
;
}
template
<
typename
T
>
static
void
TestCache
(
const
nsCString
&
aURL
bool
aExpectedHas
bool
aExpectedConfirmed
bool
aExpectedInCache
T
*
aCache
=
nullptr
)
{
Completion
lookupHash
;
lookupHash
.
FromPlaintext
(
aURL
)
;
TestCache
<
T
>
(
lookupHash
aExpectedHas
aExpectedConfirmed
aExpectedInCache
aCache
)
;
}
TEST
(
UrlClassifierCaching
NotFound
)
{
TestCache
<
LookupCacheV2
>
(
NS_LITERAL_CSTRING
(
"
nomatch
.
com
/
"
)
false
false
false
)
;
TestCache
<
LookupCacheV4
>
(
NS_LITERAL_CSTRING
(
"
nomatch
.
com
/
"
)
false
false
false
)
;
}
TEST
(
UrlClassifierCaching
NotInCache
)
{
TestCache
<
LookupCacheV2
>
(
NS_LITERAL_CSTRING
(
"
gound
.
com
/
"
)
true
false
false
)
;
TestCache
<
LookupCacheV4
>
(
NS_LITERAL_CSTRING
(
"
gound
.
com
/
"
)
true
false
false
)
;
}
TEST
(
UrlClassifierCaching
InPositiveCacheNotExpired
)
{
TestCache
<
LookupCacheV2
>
(
NS_LITERAL_CSTRING
(
"
cache
.
notexpired
.
com
/
"
)
true
true
true
)
;
TestCache
<
LookupCacheV4
>
(
NS_LITERAL_CSTRING
(
"
cache
.
notexpired
.
com
/
"
)
true
true
true
)
;
}
TEST
(
UrlClassifierCaching
InPositiveCacheExpired
)
{
TestCache
<
LookupCacheV2
>
(
NS_LITERAL_CSTRING
(
"
cache
.
expired
.
com
/
"
)
true
false
true
)
;
TestCache
<
LookupCacheV4
>
(
NS_LITERAL_CSTRING
(
"
cache
.
expired
.
com
/
"
)
true
false
true
)
;
}
TEST
(
UrlClassifierCaching
InNegativeCacheNotExpired
)
{
Completion
prefix
;
prefix
.
FromPlaintext
(
NS_LITERAL_CSTRING
(
"
cache
.
notexpired
.
com
/
"
)
)
;
Completion
fullhash
;
fullhash
.
FromPlaintext
(
NS_LITERAL_CSTRING
(
"
firefox
.
com
/
"
)
)
;
memcpy
(
fullhash
.
buf
prefix
.
buf
10
)
;
TestCache
<
LookupCacheV2
>
(
fullhash
false
false
true
)
;
TestCache
<
LookupCacheV4
>
(
fullhash
false
false
true
)
;
}
TEST
(
UrlClassifierCaching
InNegativeCacheExpired
)
{
Completion
prefix
;
prefix
.
FromPlaintext
(
NS_LITERAL_CSTRING
(
"
cache
.
expired
.
com
/
"
)
)
;
Completion
fullhash
;
fullhash
.
FromPlaintext
(
NS_LITERAL_CSTRING
(
"
firefox
.
com
/
"
)
)
;
memcpy
(
fullhash
.
buf
prefix
.
buf
10
)
;
TestCache
<
LookupCacheV2
>
(
fullhash
true
false
true
)
;
TestCache
<
LookupCacheV4
>
(
fullhash
true
false
true
)
;
}
template
<
typename
T
>
void
TestInvalidateExpiredCacheEntry
(
)
{
_PrefixArray
array
=
{
CreatePrefixFromURL
(
CACHED_URL
10
)
CreatePrefixFromURL
(
NEG_CACHE_EXPIRED_URL
8
)
CreatePrefixFromURL
(
POS_CACHE_EXPIRED_URL
5
)
CreatePrefixFromURL
(
BOTH_CACHE_EXPIRED_URL
4
)
}
;
RefPtr
<
T
>
cache
=
SetupLookupCache
<
T
>
(
array
)
;
SetupCacheEntry
(
cache
CACHED_URL
false
false
)
;
SetupCacheEntry
(
cache
NEG_CACHE_EXPIRED_URL
true
false
)
;
SetupCacheEntry
(
cache
POS_CACHE_EXPIRED_URL
false
true
)
;
SetupCacheEntry
(
cache
BOTH_CACHE_EXPIRED_URL
true
true
)
;
TestCache
<
T
>
(
CACHED_URL
true
true
true
cache
.
get
(
)
)
;
TestCache
<
T
>
(
NEG_CACHE_EXPIRED_URL
true
true
true
cache
.
get
(
)
)
;
TestCache
<
T
>
(
POS_CACHE_EXPIRED_URL
true
false
true
cache
.
get
(
)
)
;
TestCache
<
T
>
(
BOTH_CACHE_EXPIRED_URL
true
false
true
cache
.
get
(
)
)
;
cache
-
>
InvalidateExpiredCacheEntries
(
)
;
TestCache
<
T
>
(
NEG_CACHE_EXPIRED_URL
true
false
false
cache
.
get
(
)
)
;
TestCache
<
T
>
(
BOTH_CACHE_EXPIRED_URL
true
false
false
cache
.
get
(
)
)
;
TestCache
<
T
>
(
CACHED_URL
true
true
true
cache
.
get
(
)
)
;
TestCache
<
T
>
(
POS_CACHE_EXPIRED_URL
true
false
true
cache
.
get
(
)
)
;
}
TEST
(
UrlClassifierCaching
InvalidateExpiredCacheEntryV2
)
{
TestInvalidateExpiredCacheEntry
<
LookupCacheV2
>
(
)
;
}
TEST
(
UrlClassifierCaching
InvalidateExpiredCacheEntryV4
)
{
TestInvalidateExpiredCacheEntry
<
LookupCacheV4
>
(
)
;
}
TEST
(
UrlClassifierCaching
NegativeCacheExpireV2
)
{
_PrefixArray
array
=
{
CreatePrefixFromURL
(
NEG_CACHE_EXPIRED_URL
8
)
}
;
RefPtr
<
LookupCacheV2
>
cache
=
SetupLookupCache
<
LookupCacheV2
>
(
array
)
;
nsCOMPtr
<
nsICryptoHash
>
cryptoHash
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
)
;
MissPrefixArray
misses
;
Prefix
*
prefix
=
misses
.
AppendElement
(
fallible
)
;
prefix
-
>
FromPlaintext
(
NEG_CACHE_EXPIRED_URL
)
;
AddCompleteArray
dummy
;
cache
-
>
AddGethashResultToCache
(
dummy
misses
EXPIRED_TIME_SEC
)
;
EXPECT_EQ
(
cache
-
>
IsInCache
(
prefix
-
>
ToUint32
(
)
)
true
)
;
TestCache
<
LookupCacheV2
>
(
NEG_CACHE_EXPIRED_URL
true
false
false
cache
.
get
(
)
)
;
}
TEST
(
UrlClassifierCaching
NegativeCacheExpireV4
)
{
_PrefixArray
array
=
{
CreatePrefixFromURL
(
NEG_CACHE_EXPIRED_URL
8
)
}
;
RefPtr
<
LookupCacheV4
>
cache
=
SetupLookupCache
<
LookupCacheV4
>
(
array
)
;
FullHashResponseMap
map
;
Prefix
prefix
;
nsCOMPtr
<
nsICryptoHash
>
cryptoHash
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
)
;
prefix
.
FromPlaintext
(
NEG_CACHE_EXPIRED_URL
)
;
CachedFullHashResponse
*
response
=
map
.
LookupOrAdd
(
prefix
.
ToUint32
(
)
)
;
response
-
>
negativeCacheExpirySec
=
EXPIRED_TIME_SEC
;
cache
-
>
AddFullHashResponseToCache
(
map
)
;
EXPECT_EQ
(
cache
-
>
IsInCache
(
prefix
.
ToUint32
(
)
)
true
)
;
TestCache
<
LookupCacheV4
>
(
NEG_CACHE_EXPIRED_URL
true
false
false
cache
.
get
(
)
)
;
}
