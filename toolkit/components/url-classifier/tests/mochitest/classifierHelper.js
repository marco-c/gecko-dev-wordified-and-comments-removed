if
(
typeof
classifierHelper
=
=
"
undefined
"
)
{
var
classifierHelper
=
{
}
;
}
const
CLASSIFIER_COMMON_URL
=
SimpleTest
.
getTestFileURL
(
"
classifierCommon
.
js
"
)
;
var
gScript
=
SpecialPowers
.
loadChromeScript
(
CLASSIFIER_COMMON_URL
)
;
const
PREFS
=
{
PROVIDER_LISTS
:
"
browser
.
safebrowsing
.
provider
.
mozilla
.
lists
"
DISALLOW_COMPLETIONS
:
"
urlclassifier
.
disallow_completions
"
PROVIDER_GETHASHURL
:
"
browser
.
safebrowsing
.
provider
.
mozilla
.
gethashURL
"
}
;
classifierHelper
.
_curAddChunkNum
=
1
;
classifierHelper
.
_updates
=
[
]
;
classifierHelper
.
_updatesToCleanup
=
[
]
;
classifierHelper
.
_initsCB
=
[
]
;
classifierHelper
.
waitForInit
=
function
(
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
classifierHelper
.
_initsCB
.
push
(
resolve
)
;
gScript
.
sendAsyncMessage
(
"
waitForInit
"
)
;
}
)
;
}
;
classifierHelper
.
allowCompletion
=
function
(
lists
url
)
{
for
(
var
list
of
lists
)
{
var
pref
=
SpecialPowers
.
getCharPref
(
PREFS
.
PROVIDER_LISTS
)
;
pref
+
=
"
"
+
list
;
SpecialPowers
.
setCharPref
(
PREFS
.
PROVIDER_LISTS
pref
)
;
pref
=
SpecialPowers
.
getCharPref
(
PREFS
.
DISALLOW_COMPLETIONS
)
;
pref
=
pref
.
replace
(
list
list
+
"
-
backup
"
)
;
SpecialPowers
.
setCharPref
(
PREFS
.
DISALLOW_COMPLETIONS
pref
)
;
}
SpecialPowers
.
setCharPref
(
PREFS
.
PROVIDER_GETHASHURL
url
)
;
}
;
classifierHelper
.
addUrlToDB
=
function
(
updateData
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
testUpdate
=
"
"
;
for
(
var
update
of
updateData
)
{
var
LISTNAME
=
update
.
db
;
var
CHUNKDATA
=
update
.
url
;
var
CHUNKLEN
=
CHUNKDATA
.
length
;
var
HASHLEN
=
update
.
len
?
update
.
len
:
32
;
update
.
addChunk
=
classifierHelper
.
_curAddChunkNum
;
classifierHelper
.
_curAddChunkNum
+
=
1
;
classifierHelper
.
_updatesToCleanup
.
push
(
update
)
;
testUpdate
+
=
"
n
:
1000
\
n
"
+
"
i
:
"
+
LISTNAME
+
"
\
n
"
+
"
ad
:
1
\
n
"
+
"
a
:
"
+
update
.
addChunk
+
"
:
"
+
HASHLEN
+
"
:
"
+
CHUNKLEN
+
"
\
n
"
+
CHUNKDATA
;
}
classifierHelper
.
_update
(
testUpdate
resolve
reject
)
;
}
)
;
}
;
classifierHelper
.
resetDatabase
=
function
(
)
{
function
removeDatabase
(
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
testUpdate
=
"
"
;
for
(
var
update
of
classifierHelper
.
_updatesToCleanup
)
{
testUpdate
+
=
"
n
:
1000
\
ni
:
"
+
update
.
db
+
"
\
nad
:
"
+
update
.
addChunk
+
"
\
n
"
;
}
classifierHelper
.
_update
(
testUpdate
resolve
reject
)
;
}
)
;
}
return
Promise
.
resolve
(
)
.
then
(
removeDatabase
)
.
then
(
classifierHelper
.
reloadDatabase
)
;
}
;
classifierHelper
.
reloadDatabase
=
function
(
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
gScript
.
addMessageListener
(
"
reloadSuccess
"
function
handler
(
)
{
gScript
.
removeMessageListener
(
"
reloadSuccess
"
handler
)
;
resolve
(
)
;
}
)
;
gScript
.
sendAsyncMessage
(
"
doReload
"
)
;
}
)
;
}
;
classifierHelper
.
_update
=
function
(
testUpdate
onsuccess
onerror
)
{
classifierHelper
.
_updates
.
push
(
{
data
:
testUpdate
onsuccess
onerror
}
)
;
if
(
classifierHelper
.
_updates
.
length
!
=
1
)
{
return
;
}
gScript
.
sendAsyncMessage
(
"
doUpdate
"
{
testUpdate
}
)
;
}
;
classifierHelper
.
_updateSuccess
=
function
(
)
{
var
update
=
classifierHelper
.
_updates
.
shift
(
)
;
update
.
onsuccess
(
)
;
if
(
classifierHelper
.
_updates
.
length
)
{
var
testUpdate
=
classifierHelper
.
_updates
[
0
]
.
data
;
gScript
.
sendAsyncMessage
(
"
doUpdate
"
{
testUpdate
}
)
;
}
}
;
classifierHelper
.
_updateError
=
function
(
errorCode
)
{
var
update
=
classifierHelper
.
_updates
.
shift
(
)
;
update
.
onerror
(
errorCode
)
;
if
(
classifierHelper
.
_updates
.
length
)
{
var
testUpdate
=
classifierHelper
.
_updates
[
0
]
.
data
;
gScript
.
sendAsyncMessage
(
"
doUpdate
"
{
testUpdate
}
)
;
}
}
;
classifierHelper
.
_inited
=
function
(
)
{
classifierHelper
.
_initsCB
.
forEach
(
function
(
cb
)
{
cb
(
)
;
}
)
;
classifierHelper
.
_initsCB
=
[
]
;
}
;
classifierHelper
.
_setup
=
function
(
)
{
gScript
.
addMessageListener
(
"
updateSuccess
"
classifierHelper
.
_updateSuccess
)
;
gScript
.
addMessageListener
(
"
updateError
"
classifierHelper
.
_updateError
)
;
gScript
.
addMessageListener
(
"
safeBrowsingInited
"
classifierHelper
.
_inited
)
;
SimpleTest
.
registerCleanupFunction
(
classifierHelper
.
_cleanup
)
;
}
;
classifierHelper
.
_cleanup
=
function
(
)
{
for
(
var
pref
in
PREFS
)
{
SpecialPowers
.
clearUserPref
(
pref
)
;
}
if
(
!
classifierHelper
.
_updatesToCleanup
)
{
return
Promise
.
resolve
(
)
;
}
return
classifierHelper
.
resetDatabase
(
)
;
}
;
classifierHelper
.
_setup
(
)
;
