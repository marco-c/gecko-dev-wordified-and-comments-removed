if
(
typeof
(
classifierHelper
)
=
=
"
undefined
"
)
{
var
classifierHelper
=
{
}
;
}
const
CLASSIFIER_COMMON_URL
=
SimpleTest
.
getTestFileURL
(
"
classifierCommon
.
js
"
)
;
var
gScript
=
SpecialPowers
.
loadChromeScript
(
CLASSIFIER_COMMON_URL
)
;
const
ADD_CHUNKNUM
=
524
;
const
SUB_CHUNKNUM
=
523
;
const
HASHLEN
=
32
;
classifierHelper
.
_updates
=
[
]
;
classifierHelper
.
_updatesToCleanup
=
[
]
;
classifierHelper
.
addUrlToDB
=
function
(
updateData
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
testUpdate
=
"
"
;
for
(
var
update
of
updateData
)
{
var
LISTNAME
=
update
.
db
;
var
CHUNKDATA
=
update
.
url
;
var
CHUNKLEN
=
CHUNKDATA
.
length
;
classifierHelper
.
_updatesToCleanup
.
push
(
update
)
;
testUpdate
+
=
"
n
:
1000
\
n
"
+
"
i
:
"
+
LISTNAME
+
"
\
n
"
+
"
ad
:
1
\
n
"
+
"
a
:
"
+
ADD_CHUNKNUM
+
"
:
"
+
HASHLEN
+
"
:
"
+
CHUNKLEN
+
"
\
n
"
+
CHUNKDATA
;
}
classifierHelper
.
_update
(
testUpdate
resolve
reject
)
;
}
)
;
}
classifierHelper
.
removeUrlFromDB
=
function
(
updateData
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
testUpdate
=
"
"
;
for
(
var
update
of
updateData
)
{
var
LISTNAME
=
update
.
db
;
var
CHUNKDATA
=
ADD_CHUNKNUM
+
"
:
"
+
update
.
url
;
var
CHUNKLEN
=
CHUNKDATA
.
length
;
testUpdate
+
=
"
n
:
1000
\
n
"
+
"
i
:
"
+
LISTNAME
+
"
\
n
"
+
"
s
:
"
+
SUB_CHUNKNUM
+
"
:
"
+
HASHLEN
+
"
:
"
+
CHUNKLEN
+
"
\
n
"
+
CHUNKDATA
;
}
classifierHelper
.
_updatesToCleanup
=
classifierHelper
.
_updatesToCleanup
.
filter
(
(
v
)
=
>
{
return
updateData
.
indexOf
(
v
)
=
=
-
1
;
}
)
;
classifierHelper
.
_update
(
testUpdate
resolve
reject
)
;
}
)
;
}
;
classifierHelper
.
resetDB
=
function
(
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
testUpdate
=
"
"
;
for
(
var
update
of
classifierHelper
.
_updatesToCleanup
)
{
if
(
testUpdate
.
includes
(
update
.
db
)
)
continue
;
testUpdate
+
=
"
n
:
1000
\
n
"
+
"
i
:
"
+
update
.
db
+
"
\
n
"
+
"
ad
:
"
+
ADD_CHUNKNUM
+
"
\
n
"
+
"
sd
:
"
+
SUB_CHUNKNUM
+
"
\
n
"
}
classifierHelper
.
_update
(
testUpdate
resolve
reject
)
;
}
)
;
}
;
classifierHelper
.
_update
=
function
(
testUpdate
onsuccess
onerror
)
{
classifierHelper
.
_updates
.
push
(
{
"
data
"
:
testUpdate
"
onsuccess
"
:
onsuccess
"
onerror
"
:
onerror
}
)
;
if
(
classifierHelper
.
_updates
.
length
!
=
1
)
{
return
;
}
gScript
.
sendAsyncMessage
(
"
doUpdate
"
{
testUpdate
}
)
;
}
;
classifierHelper
.
_updateSuccess
=
function
(
)
{
var
update
=
classifierHelper
.
_updates
.
shift
(
)
;
update
.
onsuccess
(
)
;
if
(
classifierHelper
.
_updates
.
length
)
{
var
testUpdate
=
classifierHelper
.
_updates
[
0
]
.
data
;
gScript
.
sendAsyncMessage
(
"
doUpdate
"
{
testUpdate
}
)
;
}
}
;
classifierHelper
.
_updateError
=
function
(
errorCode
)
{
var
update
=
classifierHelper
.
_updates
.
shift
(
)
;
update
.
onerror
(
errorCode
)
;
if
(
classifierHelper
.
_updates
.
length
)
{
var
testUpdate
=
classifierHelper
.
_updates
[
0
]
.
data
;
gScript
.
sendAsyncMessage
(
"
doUpdate
"
{
testUpdate
}
)
;
}
}
;
classifierHelper
.
_setup
=
function
(
)
{
gScript
.
addMessageListener
(
"
updateSuccess
"
classifierHelper
.
_updateSuccess
)
;
gScript
.
addMessageListener
(
"
updateError
"
classifierHelper
.
_updateError
)
;
SimpleTest
.
registerCleanupFunction
(
classifierHelper
.
_cleanup
)
;
}
;
classifierHelper
.
_cleanup
=
function
(
)
{
if
(
!
classifierHelper
.
_updatesToCleanup
)
{
return
Promise
.
resolve
(
)
;
}
return
classifierHelper
.
resetDB
(
)
;
}
;
classifierHelper
.
_setup
(
)
;
