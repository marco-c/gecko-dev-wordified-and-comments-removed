const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
dbService
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
dbservice
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierDBService
)
;
var
timer
;
function
setTimeout
(
callback
delay
)
{
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
timer
.
initWithCallback
(
{
notify
:
callback
}
delay
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
function
doUpdate
(
update
)
{
let
listener
=
{
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsISupports
)
|
|
iid
.
equals
(
Ci
.
nsIUrlClassifierUpdateObserver
)
)
return
this
;
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
updateUrlRequested
(
url
)
{
}
streamFinished
(
status
)
{
}
updateError
(
errorCode
)
{
sendAsyncMessage
(
"
updateError
"
errorCode
)
;
}
updateSuccess
(
requestedTimeout
)
{
sendAsyncMessage
(
"
updateSuccess
"
)
;
}
}
;
try
{
dbService
.
beginUpdate
(
listener
"
test
-
malware
-
simple
test
-
unwanted
-
simple
"
"
"
)
;
dbService
.
beginStream
(
"
"
"
"
)
;
dbService
.
updateStream
(
update
)
;
dbService
.
finishStream
(
)
;
dbService
.
finishUpdate
(
)
;
}
catch
(
e
)
{
setTimeout
(
(
)
=
>
{
doUpdate
(
update
)
;
}
1000
)
;
}
}
function
doReload
(
)
{
try
{
dbService
.
reloadDatabase
(
)
;
sendAsyncMessage
(
"
reloadSuccess
"
)
;
}
catch
(
e
)
{
setTimeout
(
(
)
=
>
{
doReload
(
)
;
}
1000
)
;
}
}
function
waitForInit
(
)
{
Services
.
obs
.
addObserver
(
function
(
)
{
sendAsyncMessage
(
"
safeBrowsingInited
"
)
;
}
"
mozentries
-
update
-
finished
"
)
;
const
table
=
"
test
-
phish
-
simple
"
;
const
url
=
"
http
:
/
/
itisatrap
.
org
/
firefox
/
its
-
a
-
trap
.
html
"
;
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
Services
.
io
.
newURI
(
url
)
{
}
)
;
let
listener
=
{
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Ci
.
nsISupports
)
|
|
iid
.
equals
(
Ci
.
nsIUrlClassifierUpdateObserver
)
)
return
this
;
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
handleEvent
(
value
)
{
if
(
value
=
=
=
table
)
{
sendAsyncMessage
(
"
safeBrowsingInited
"
)
;
}
}
}
;
dbService
.
lookup
(
principal
table
listener
)
;
}
addMessageListener
(
"
doUpdate
"
(
{
testUpdate
}
)
=
>
{
doUpdate
(
testUpdate
)
;
}
)
;
addMessageListener
(
"
doReload
"
(
)
=
>
{
doReload
(
)
;
}
)
;
addMessageListener
(
"
waitForInit
"
(
)
=
>
{
waitForInit
(
)
;
}
)
;
