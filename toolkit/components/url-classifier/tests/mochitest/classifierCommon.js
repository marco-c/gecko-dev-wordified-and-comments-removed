var
dbService
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
dbservice
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierDBService
)
;
var
listmanager
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
listmanager
;
1
"
]
.
getService
(
Ci
.
nsIUrlListManager
)
;
var
timer
;
function
setTimeout
(
callback
delay
)
{
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
timer
.
initWithCallback
(
{
notify
:
callback
}
delay
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
function
doUpdate
(
update
)
{
let
listener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIUrlClassifierUpdateObserver
"
]
)
updateUrlRequested
(
)
{
}
streamFinished
(
)
{
}
updateError
(
errorCode
)
{
sendAsyncMessage
(
"
updateError
"
errorCode
)
;
}
updateSuccess
(
)
{
sendAsyncMessage
(
"
updateSuccess
"
)
;
}
}
;
try
{
dbService
.
beginUpdate
(
listener
"
test
-
malware
-
simple
test
-
unwanted
-
simple
"
"
"
)
;
dbService
.
beginStream
(
"
"
"
"
)
;
dbService
.
updateStream
(
update
)
;
dbService
.
finishStream
(
)
;
dbService
.
finishUpdate
(
)
;
}
catch
(
e
)
{
setTimeout
(
(
)
=
>
{
doUpdate
(
update
)
;
}
1000
)
;
}
}
function
doReload
(
)
{
try
{
dbService
.
reloadDatabase
(
)
;
sendAsyncMessage
(
"
reloadSuccess
"
)
;
}
catch
(
e
)
{
setTimeout
(
(
)
=
>
{
doReload
(
)
;
}
1000
)
;
}
}
function
waitForInit
(
)
{
if
(
listmanager
.
isRegistered
(
)
)
{
sendAsyncMessage
(
"
safeBrowsingInited
"
)
;
}
else
{
setTimeout
(
(
)
=
>
{
waitForInit
(
)
;
}
1000
)
;
}
}
function
doGetTables
(
)
{
const
callback
=
tables
=
>
{
sendAsyncMessage
(
"
GetTableSuccess
"
tables
)
;
}
;
try
{
dbService
.
getTables
(
callback
)
;
}
catch
(
e
)
{
setTimeout
(
(
)
=
>
{
doGetTables
(
)
;
}
1000
)
;
}
}
addMessageListener
(
"
doUpdate
"
(
{
testUpdate
}
)
=
>
{
doUpdate
(
testUpdate
)
;
}
)
;
addMessageListener
(
"
doReload
"
(
)
=
>
{
doReload
(
)
;
}
)
;
addMessageListener
(
"
waitForInit
"
(
)
=
>
{
waitForInit
(
)
;
}
)
;
addMessageListener
(
"
doGetTables
"
(
)
=
>
{
doGetTables
(
)
;
}
)
;
