#
ifndef
Classifier_h__
#
define
Classifier_h__
#
include
"
Entries
.
h
"
#
include
"
HashStore
.
h
"
#
include
"
ProtocolParser
.
h
"
#
include
"
LookupCache
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsICryptoHash
.
h
"
#
include
"
nsDataHashtable
.
h
"
namespace
mozilla
{
namespace
safebrowsing
{
class
Classifier
{
public
:
Classifier
(
)
;
~
Classifier
(
)
;
nsresult
Open
(
nsIFile
&
aCacheDirectory
)
;
void
Close
(
)
;
void
Reset
(
)
;
void
ResetTables
(
const
nsTArray
<
nsCString
>
&
aTables
)
;
void
TableRequest
(
nsACString
&
aResult
)
;
nsresult
ActiveTables
(
nsTArray
<
nsCString
>
&
aTables
)
;
nsresult
Check
(
const
nsACString
&
aSpec
const
nsACString
&
tables
uint32_t
aFreshnessGuarantee
LookupResultArray
&
aResults
)
;
nsresult
ApplyUpdates
(
nsTArray
<
TableUpdate
*
>
*
aUpdates
)
;
nsresult
ApplyFullHashes
(
nsTArray
<
TableUpdate
*
>
*
aUpdates
)
;
nsresult
MarkSpoiled
(
const
nsTArray
<
nsCString
>
&
aTables
)
;
void
SetLastUpdateTime
(
const
nsACString
&
aTableName
uint64_t
updateTime
)
;
int64_t
GetLastUpdateTime
(
const
nsACString
&
aTableName
)
;
nsresult
CacheCompletions
(
const
CacheResultArray
&
aResults
)
;
uint32_t
GetHashKey
(
void
)
{
return
mHashKey
;
}
nsresult
ReadNoiseEntries
(
const
Prefix
&
aPrefix
const
nsACString
&
aTableName
uint32_t
aCount
PrefixArray
*
aNoiseEntries
)
;
static
void
SplitTables
(
const
nsACString
&
str
nsTArray
<
nsCString
>
&
tables
)
;
static
nsresult
GetPrivateStoreDirectory
(
nsIFile
*
aRootStoreDirectory
const
nsACString
&
aTableName
nsIFile
*
*
aPrivateStoreDirectory
)
;
private
:
void
DropStores
(
)
;
void
DeleteTables
(
const
nsTArray
<
nsCString
>
&
aTables
)
;
nsresult
CreateStoreDirectory
(
)
;
nsresult
SetupPathNames
(
)
;
nsresult
RecoverBackups
(
)
;
nsresult
CleanToDelete
(
)
;
nsresult
BackupTables
(
)
;
nsresult
RemoveBackupTables
(
)
;
nsresult
RegenActiveTables
(
)
;
nsresult
ScanStoreDir
(
nsTArray
<
nsCString
>
&
aTables
)
;
nsresult
UpdateHashStore
(
nsTArray
<
TableUpdate
*
>
*
aUpdates
const
nsACString
&
aTable
)
;
nsresult
UpdateCache
(
TableUpdate
*
aUpdates
)
;
LookupCache
*
GetLookupCache
(
const
nsACString
&
aTable
)
;
bool
CheckValidUpdate
(
nsTArray
<
TableUpdate
*
>
*
aUpdates
const
nsACString
&
aTable
)
;
nsCOMPtr
<
nsIFile
>
mCacheDirectory
;
nsCOMPtr
<
nsIFile
>
mRootStoreDirectory
;
nsCOMPtr
<
nsIFile
>
mBackupDirectory
;
nsCOMPtr
<
nsIFile
>
mToDeleteDirectory
;
nsCOMPtr
<
nsICryptoHash
>
mCryptoHash
;
nsTArray
<
LookupCache
*
>
mLookupCaches
;
nsTArray
<
nsCString
>
mActiveTablesCache
;
uint32_t
mHashKey
;
nsDataHashtable
<
nsCStringHashKey
int64_t
>
mTableFreshness
;
}
;
}
}
#
endif
