const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
RemoteSettings
"
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
const
COLLECTION_NAME
=
"
tracking
-
protection
-
lists
"
;
const
SBRS_UPDATE_MINIMUM_DELAY
=
21600
;
function
UrlClassifierRemoteSettingsService
(
)
{
}
UrlClassifierRemoteSettingsService
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
1980624c
-
c50b
-
4b46
-
a91c
-
dfaba7792706
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIUrlClassifierRemoteSettingsService
"
]
)
_initialized
:
false
_entries
:
{
}
async
lazyInit
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
let
rs
=
lazy
.
RemoteSettings
(
COLLECTION_NAME
)
;
rs
.
on
(
"
sync
"
async
event
=
>
{
let
{
data
:
{
current
}
}
=
event
;
this
.
_onUpdateEntries
(
current
)
;
}
)
;
this
.
_initialized
=
true
;
let
entries
;
try
{
entries
=
await
rs
.
get
(
)
;
}
catch
(
e
)
{
}
this
.
_onUpdateEntries
(
entries
|
|
[
]
)
;
}
_onUpdateEntries
(
aEntries
)
{
aEntries
.
map
(
entry
=
>
{
this
.
_entries
[
entry
.
Name
]
=
entry
;
}
)
;
}
_parseRequest
(
aRequest
)
{
let
lines
=
aRequest
.
split
(
"
\
n
"
)
;
let
requests
=
[
]
;
for
(
let
line
of
lines
)
{
let
fields
=
line
.
split
(
"
;
"
)
;
let
chunkNum
=
fields
[
1
]
?
.
match
(
/
(
?
<
=
a
:
)
.
*
/
)
;
requests
.
push
(
[
fields
[
0
]
chunkNum
]
)
;
}
return
requests
;
}
_parseChunkNumFromShavarData
(
aData
)
{
let
line
=
aData
.
split
(
"
\
n
"
1
)
[
0
]
;
return
line
?
.
split
(
"
:
"
2
)
[
1
]
;
}
async
_getLists
(
aRequest
aListener
)
{
await
this
.
lazyInit
(
)
;
let
rs
=
lazy
.
RemoteSettings
(
COLLECTION_NAME
)
;
let
payload
=
"
n
:
"
+
SBRS_UPDATE_MINIMUM_DELAY
+
"
\
n
"
;
let
requests
=
this
.
_parseRequest
(
aRequest
)
;
for
(
let
request
of
requests
)
{
let
[
reqTableName
reqChunkNum
]
=
request
;
let
entry
=
this
.
_entries
[
reqTableName
]
;
if
(
!
entry
?
.
attachment
)
{
continue
;
}
let
rsChunkNum
;
let
downloadError
=
false
;
try
{
let
{
buffer
}
=
await
rs
.
attachments
.
download
(
entry
{
useCache
:
true
}
)
;
let
bytes
=
new
Uint8Array
(
buffer
)
;
let
strData
=
String
.
fromCharCode
.
apply
(
String
bytes
)
;
rsChunkNum
=
this
.
_parseChunkNumFromShavarData
(
strData
)
;
if
(
rsChunkNum
=
=
reqChunkNum
)
{
continue
;
}
payload
+
=
"
i
:
"
+
reqTableName
+
"
\
n
"
;
payload
+
=
strData
;
}
catch
(
e
)
{
downloadError
=
true
;
}
if
(
downloadError
)
{
try
{
aListener
.
onStartRequest
(
null
)
;
aListener
.
onStopRequest
(
null
Cr
.
NS_ERROR_FAILURE
)
;
}
catch
(
e
)
{
}
return
;
}
}
let
stream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
stream
.
setData
(
payload
payload
.
length
)
;
aListener
.
onStartRequest
(
null
)
;
aListener
.
onDataAvailable
(
null
stream
0
payload
.
length
)
;
aListener
.
onStopRequest
(
null
Cr
.
NS_OK
)
;
}
fetchList
(
aPayload
aListener
)
{
this
.
_getLists
(
aPayload
aListener
)
;
}
clear
(
)
{
this
.
_initialized
=
false
;
this
.
_entries
=
{
}
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
UrlClassifierRemoteSettingsService
"
"
SBRS_UPDATE_MINIMUM_DELAY
"
]
;
