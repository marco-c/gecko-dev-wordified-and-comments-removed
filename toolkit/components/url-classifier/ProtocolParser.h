#
ifndef
ProtocolParser_h__
#
define
ProtocolParser_h__
#
include
"
HashStore
.
h
"
#
include
"
chromium
/
safebrowsing
.
pb
.
h
"
namespace
mozilla
{
namespace
safebrowsing
{
class
ProtocolParser
{
public
:
struct
ForwardedUpdate
{
nsCString
table
;
nsCString
url
;
}
;
ProtocolParser
(
)
;
virtual
~
ProtocolParser
(
)
;
nsresult
Status
(
)
const
{
return
mUpdateStatus
;
}
#
ifdef
MOZ_SAFEBROWSING_DUMP_FAILED_UPDATES
virtual
nsCString
GetRawTableUpdates
(
)
const
{
return
mPending
;
}
#
endif
virtual
void
SetCurrentTable
(
const
nsACString
&
aTable
)
=
0
;
void
SetRequestedTables
(
const
nsTArray
<
nsCString
>
&
aRequestTables
)
{
mRequestedTables
=
aRequestTables
.
Clone
(
)
;
}
nsresult
Begin
(
const
nsACString
&
aTable
const
nsTArray
<
nsCString
>
&
aUpdateTables
)
;
virtual
nsresult
AppendStream
(
const
nsACString
&
aData
)
=
0
;
uint32_t
UpdateWaitSec
(
)
{
return
mUpdateWaitSec
;
}
virtual
void
End
(
)
=
0
;
RefPtr
<
TableUpdate
>
GetTableUpdate
(
const
nsACString
&
aTable
)
;
void
ForgetTableUpdates
(
)
{
mTableUpdates
.
Clear
(
)
;
}
const
TableUpdateArray
&
GetTableUpdates
(
)
{
return
mTableUpdates
;
}
virtual
const
nsTArray
<
ForwardedUpdate
>
&
Forwards
(
)
const
{
return
mForwards
;
}
bool
ResetRequested
(
)
const
{
return
!
mTablesToReset
.
IsEmpty
(
)
;
}
const
nsTArray
<
nsCString
>
&
TablesToReset
(
)
const
{
return
mTablesToReset
;
}
protected
:
virtual
RefPtr
<
TableUpdate
>
CreateTableUpdate
(
const
nsACString
&
aTableName
)
const
=
0
;
nsCString
mPending
;
nsresult
mUpdateStatus
;
TableUpdateArray
mTableUpdates
;
nsTArray
<
ForwardedUpdate
>
mForwards
;
nsTArray
<
nsCString
>
mRequestedTables
;
nsTArray
<
nsCString
>
mTablesToReset
;
uint32_t
mUpdateWaitSec
;
}
;
class
ProtocolParserV2
final
:
public
ProtocolParser
{
public
:
ProtocolParserV2
(
)
;
virtual
~
ProtocolParserV2
(
)
;
virtual
void
SetCurrentTable
(
const
nsACString
&
aTable
)
override
;
virtual
nsresult
AppendStream
(
const
nsACString
&
aData
)
override
;
virtual
void
End
(
)
override
;
virtual
const
nsTArray
<
ForwardedUpdate
>
&
Forwards
(
)
const
override
{
return
mForwards
;
}
#
ifdef
MOZ_SAFEBROWSING_DUMP_FAILED_UPDATES
virtual
nsCString
GetRawTableUpdates
(
)
const
override
{
return
mRawUpdate
;
}
#
endif
private
:
virtual
RefPtr
<
TableUpdate
>
CreateTableUpdate
(
const
nsACString
&
aTableName
)
const
override
;
nsresult
ProcessControl
(
bool
*
aDone
)
;
nsresult
ProcessExpirations
(
const
nsCString
&
aLine
)
;
nsresult
ProcessChunkControl
(
const
nsCString
&
aLine
)
;
nsresult
ProcessForward
(
const
nsCString
&
aLine
)
;
nsresult
AddForward
(
const
nsACString
&
aUrl
)
;
nsresult
ProcessChunk
(
bool
*
done
)
;
nsresult
ProcessPlaintextChunk
(
const
nsACString
&
aChunk
)
;
nsresult
ProcessShaChunk
(
const
nsACString
&
aChunk
)
;
nsresult
ProcessHostAdd
(
const
Prefix
&
aDomain
uint8_t
aNumEntries
const
nsACString
&
aChunk
uint32_t
*
aStart
)
;
nsresult
ProcessHostSub
(
const
Prefix
&
aDomain
uint8_t
aNumEntries
const
nsACString
&
aChunk
uint32_t
*
aStart
)
;
nsresult
ProcessHostAddComplete
(
uint8_t
aNumEntries
const
nsACString
&
aChunk
uint32_t
*
aStart
)
;
nsresult
ProcessHostSubComplete
(
uint8_t
numEntries
const
nsACString
&
aChunk
uint32_t
*
start
)
;
nsresult
ProcessDigestChunk
(
const
nsACString
&
aChunk
)
;
nsresult
ProcessDigestAdd
(
const
nsACString
&
aChunk
)
;
nsresult
ProcessDigestSub
(
const
nsACString
&
aChunk
)
;
bool
NextLine
(
nsACString
&
aLine
)
;
enum
ParserState
{
PROTOCOL_STATE_CONTROL
PROTOCOL_STATE_CHUNK
}
;
ParserState
mState
;
enum
ChunkType
{
CHUNK_ADD
CHUNK_SUB
CHUNK_ADD_DIGEST
CHUNK_SUB_DIGEST
}
;
struct
ChunkState
{
ChunkType
type
;
uint32_t
num
;
uint32_t
hashSize
;
uint32_t
length
;
void
Clear
(
)
{
num
=
0
;
hashSize
=
0
;
length
=
0
;
}
}
;
ChunkState
mChunkState
;
RefPtr
<
TableUpdateV2
>
mTableUpdate
;
#
ifdef
MOZ_SAFEBROWSING_DUMP_FAILED_UPDATES
nsCString
mRawUpdate
;
#
endif
}
;
class
ProtocolParserProtobuf
final
:
public
ProtocolParser
{
public
:
typedef
FetchThreatListUpdatesResponse_ListUpdateResponse
ListUpdateResponse
;
typedef
google
:
:
protobuf
:
:
RepeatedPtrField
<
ThreatEntrySet
>
ThreatEntrySetList
;
public
:
ProtocolParserProtobuf
(
)
;
virtual
void
SetCurrentTable
(
const
nsACString
&
aTable
)
override
;
virtual
nsresult
AppendStream
(
const
nsACString
&
aData
)
override
;
virtual
void
End
(
)
override
;
private
:
virtual
~
ProtocolParserProtobuf
(
)
;
virtual
RefPtr
<
TableUpdate
>
CreateTableUpdate
(
const
nsACString
&
aTableName
)
const
override
;
nsresult
ProcessOneResponse
(
const
ListUpdateResponse
&
aResponse
nsACString
&
aListName
)
;
nsresult
ProcessAdditionOrRemoval
(
TableUpdateV4
&
aTableUpdate
const
ThreatEntrySetList
&
aUpdate
bool
aIsAddition
)
;
nsresult
ProcessRawAddition
(
TableUpdateV4
&
aTableUpdate
const
ThreatEntrySet
&
aAddition
)
;
nsresult
ProcessRawRemoval
(
TableUpdateV4
&
aTableUpdate
const
ThreatEntrySet
&
aRemoval
)
;
nsresult
ProcessEncodedAddition
(
TableUpdateV4
&
aTableUpdate
const
ThreatEntrySet
&
aAddition
)
;
nsresult
ProcessEncodedRemoval
(
TableUpdateV4
&
aTableUpdate
const
ThreatEntrySet
&
aRemoval
)
;
}
;
}
}
#
endif
