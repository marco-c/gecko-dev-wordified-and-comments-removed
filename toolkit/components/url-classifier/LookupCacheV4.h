#
ifndef
LookupCacheV4_h__
#
define
LookupCacheV4_h__
#
include
"
LookupCache
.
h
"
namespace
mozilla
{
namespace
safebrowsing
{
class
TableUpdateV4
;
class
LookupCacheV4
final
:
public
LookupCache
{
public
:
explicit
LookupCacheV4
(
const
nsACString
&
aTableName
const
nsACString
&
aProvider
nsCOMPtr
<
nsIFile
>
&
aStoreFile
)
:
LookupCache
(
aTableName
aProvider
aStoreFile
)
{
}
virtual
nsresult
Init
(
)
override
;
virtual
nsresult
Has
(
const
Completion
&
aCompletion
bool
*
aHas
uint32_t
*
aMatchLength
bool
*
aConfirmed
)
override
;
virtual
bool
IsEmpty
(
)
const
override
;
nsresult
Build
(
PrefixStringMap
&
aPrefixMap
)
;
nsresult
GetPrefixes
(
PrefixStringMap
&
aPrefixMap
)
;
nsresult
GetFixedLengthPrefixes
(
FallibleTArray
<
uint32_t
>
&
aPrefixes
)
;
nsresult
ApplyUpdate
(
RefPtr
<
TableUpdateV4
>
aTableUpdate
PrefixStringMap
&
aInputMap
PrefixStringMap
&
aOutputMap
)
;
nsresult
AddFullHashResponseToCache
(
const
FullHashResponseMap
&
aResponseMap
)
;
nsresult
WriteMetadata
(
RefPtr
<
const
TableUpdateV4
>
aTableUpdate
)
;
nsresult
LoadMetadata
(
nsACString
&
aState
nsACString
&
aChecksum
)
;
static
const
int
VER
;
static
const
uint32_t
MAX_METADATA_VALUE_LENGTH
;
protected
:
virtual
nsresult
ClearPrefixes
(
)
override
;
virtual
nsresult
StoreToFile
(
nsCOMPtr
<
nsIFile
>
&
aFile
)
override
;
virtual
nsresult
LoadFromFile
(
nsCOMPtr
<
nsIFile
>
&
aFile
)
override
;
virtual
size_t
SizeOfPrefixSet
(
)
const
override
;
private
:
~
LookupCacheV4
(
)
{
}
virtual
int
Ver
(
)
const
override
{
return
VER
;
}
RefPtr
<
VariableLengthPrefixSet
>
mVLPrefixSet
;
}
;
}
}
#
endif
