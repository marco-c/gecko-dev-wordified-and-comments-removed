#
ifndef
HashStore_h__
#
define
HashStore_h__
#
include
"
Entries
.
h
"
#
include
"
ChunkSet
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
<
string
>
namespace
mozilla
{
namespace
safebrowsing
{
class
TableUpdate
{
public
:
TableUpdate
(
const
nsACString
&
aTable
)
:
mTable
(
aTable
)
{
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TableUpdate
)
;
virtual
bool
Empty
(
)
const
=
0
;
const
nsCString
&
TableName
(
)
const
{
return
mTable
;
}
template
<
typename
T
>
static
T
*
Cast
(
TableUpdate
*
aThat
)
{
return
(
T
:
:
TAG
=
=
aThat
-
>
Tag
(
)
?
reinterpret_cast
<
T
*
>
(
aThat
)
:
nullptr
)
;
}
template
<
typename
T
>
static
const
T
*
Cast
(
const
TableUpdate
*
aThat
)
{
return
(
T
:
:
TAG
=
=
aThat
-
>
Tag
(
)
?
reinterpret_cast
<
const
T
*
>
(
aThat
)
:
nullptr
)
;
}
protected
:
virtual
~
TableUpdate
(
)
{
}
private
:
virtual
int
Tag
(
)
const
=
0
;
const
nsCString
mTable
;
}
;
typedef
nsTArray
<
RefPtr
<
TableUpdate
>
>
TableUpdateArray
;
typedef
nsTArray
<
RefPtr
<
const
TableUpdate
>
>
ConstTableUpdateArray
;
class
TableUpdateV2
:
public
TableUpdate
{
public
:
explicit
TableUpdateV2
(
const
nsACString
&
aTable
)
:
TableUpdate
(
aTable
)
{
}
bool
Empty
(
)
const
override
{
return
mAddChunks
.
Length
(
)
=
=
0
&
&
mSubChunks
.
Length
(
)
=
=
0
&
&
mAddExpirations
.
Length
(
)
=
=
0
&
&
mSubExpirations
.
Length
(
)
=
=
0
&
&
mAddPrefixes
.
Length
(
)
=
=
0
&
&
mSubPrefixes
.
Length
(
)
=
=
0
&
&
mAddCompletes
.
Length
(
)
=
=
0
&
&
mSubCompletes
.
Length
(
)
=
=
0
&
&
mMissPrefixes
.
Length
(
)
=
=
0
;
}
MOZ_MUST_USE
nsresult
NewAddChunk
(
uint32_t
aChunk
)
{
return
mAddChunks
.
Set
(
aChunk
)
;
}
;
MOZ_MUST_USE
nsresult
NewSubChunk
(
uint32_t
aChunk
)
{
return
mSubChunks
.
Set
(
aChunk
)
;
}
;
MOZ_MUST_USE
nsresult
NewAddExpiration
(
uint32_t
aChunk
)
{
return
mAddExpirations
.
Set
(
aChunk
)
;
}
;
MOZ_MUST_USE
nsresult
NewSubExpiration
(
uint32_t
aChunk
)
{
return
mSubExpirations
.
Set
(
aChunk
)
;
}
;
MOZ_MUST_USE
nsresult
NewAddPrefix
(
uint32_t
aAddChunk
const
Prefix
&
aPrefix
)
;
MOZ_MUST_USE
nsresult
NewSubPrefix
(
uint32_t
aAddChunk
const
Prefix
&
aPrefix
uint32_t
aSubChunk
)
;
MOZ_MUST_USE
nsresult
NewAddComplete
(
uint32_t
aChunk
const
Completion
&
aCompletion
)
;
MOZ_MUST_USE
nsresult
NewSubComplete
(
uint32_t
aAddChunk
const
Completion
&
aCompletion
uint32_t
aSubChunk
)
;
MOZ_MUST_USE
nsresult
NewMissPrefix
(
const
Prefix
&
aPrefix
)
;
const
ChunkSet
&
AddChunks
(
)
const
{
return
mAddChunks
;
}
const
ChunkSet
&
SubChunks
(
)
const
{
return
mSubChunks
;
}
const
ChunkSet
&
AddExpirations
(
)
const
{
return
mAddExpirations
;
}
const
ChunkSet
&
SubExpirations
(
)
const
{
return
mSubExpirations
;
}
AddPrefixArray
&
AddPrefixes
(
)
{
return
mAddPrefixes
;
}
SubPrefixArray
&
SubPrefixes
(
)
{
return
mSubPrefixes
;
}
const
AddCompleteArray
&
AddCompletes
(
)
const
{
return
mAddCompletes
;
}
AddCompleteArray
&
AddCompletes
(
)
{
return
mAddCompletes
;
}
SubCompleteArray
&
SubCompletes
(
)
{
return
mSubCompletes
;
}
const
MissPrefixArray
&
MissPrefixes
(
)
const
{
return
mMissPrefixes
;
}
static
const
int
TAG
=
2
;
private
:
ChunkSet
mAddChunks
;
ChunkSet
mSubChunks
;
ChunkSet
mAddExpirations
;
ChunkSet
mSubExpirations
;
AddPrefixArray
mAddPrefixes
;
SubPrefixArray
mSubPrefixes
;
MissPrefixArray
mMissPrefixes
;
AddCompleteArray
mAddCompletes
;
SubCompleteArray
mSubCompletes
;
virtual
int
Tag
(
)
const
override
{
return
TAG
;
}
}
;
class
TableUpdateV4
:
public
TableUpdate
{
public
:
typedef
nsTArray
<
int32_t
>
RemovalIndiceArray
;
public
:
explicit
TableUpdateV4
(
const
nsACString
&
aTable
)
:
TableUpdate
(
aTable
)
mFullUpdate
(
false
)
{
}
bool
Empty
(
)
const
override
{
return
mPrefixesMap
.
IsEmpty
(
)
&
&
mRemovalIndiceArray
.
IsEmpty
(
)
&
&
mFullHashResponseMap
.
IsEmpty
(
)
;
}
bool
IsFullUpdate
(
)
const
{
return
mFullUpdate
;
}
const
PrefixStringMap
&
Prefixes
(
)
const
{
return
mPrefixesMap
;
}
const
RemovalIndiceArray
&
RemovalIndices
(
)
const
{
return
mRemovalIndiceArray
;
}
const
nsACString
&
ClientState
(
)
const
{
return
mClientState
;
}
const
nsACString
&
SHA256
(
)
const
{
return
mSHA256
;
}
const
FullHashResponseMap
&
FullHashResponse
(
)
const
{
return
mFullHashResponseMap
;
}
static
const
int
TAG
=
4
;
void
SetFullUpdate
(
bool
aIsFullUpdate
)
{
mFullUpdate
=
aIsFullUpdate
;
}
void
NewPrefixes
(
int32_t
aSize
const
nsACString
&
aPrefixes
)
;
void
SetNewClientState
(
const
nsACString
&
aState
)
{
mClientState
=
aState
;
}
void
SetSHA256
(
const
std
:
:
string
&
aSHA256
)
;
nsresult
NewRemovalIndices
(
const
uint32_t
*
aIndices
size_t
aNumOfIndices
)
;
nsresult
NewFullHashResponse
(
const
Prefix
&
aPrefix
const
CachedFullHashResponse
&
aResponse
)
;
void
Clear
(
)
;
private
:
virtual
int
Tag
(
)
const
override
{
return
TAG
;
}
bool
mFullUpdate
;
PrefixStringMap
mPrefixesMap
;
RemovalIndiceArray
mRemovalIndiceArray
;
nsCString
mClientState
;
nsCString
mSHA256
;
FullHashResponseMap
mFullHashResponseMap
;
}
;
class
HashStore
{
public
:
HashStore
(
const
nsACString
&
aTableName
const
nsACString
&
aProvider
nsIFile
*
aRootStoreFile
)
;
~
HashStore
(
)
;
const
nsCString
&
TableName
(
)
const
{
return
mTableName
;
}
nsresult
Open
(
uint32_t
aVersion
=
0
)
;
nsresult
AugmentAdds
(
const
nsTArray
<
uint32_t
>
&
aPrefixes
const
nsTArray
<
nsCString
>
&
aCompletes
)
;
ChunkSet
&
AddChunks
(
)
;
ChunkSet
&
SubChunks
(
)
;
AddPrefixArray
&
AddPrefixes
(
)
{
return
mAddPrefixes
;
}
SubPrefixArray
&
SubPrefixes
(
)
{
return
mSubPrefixes
;
}
AddCompleteArray
&
AddCompletes
(
)
{
return
mAddCompletes
;
}
SubCompleteArray
&
SubCompletes
(
)
{
return
mSubCompletes
;
}
nsresult
BeginUpdate
(
)
;
nsresult
ApplyUpdate
(
RefPtr
<
TableUpdateV2
>
aUpdate
)
;
nsresult
Expire
(
)
;
nsresult
Rebuild
(
)
;
nsresult
WriteFile
(
)
;
nsresult
ReadCompletionsLegacyV3
(
AddCompleteArray
&
aCompletes
)
;
nsresult
Reset
(
)
;
private
:
nsresult
ReadHeader
(
)
;
nsresult
SanityCheck
(
uint32_t
aVersion
=
0
)
const
;
nsresult
CalculateChecksum
(
nsAutoCString
&
aChecksum
uint32_t
aFileSize
bool
aChecksumPresent
)
;
nsresult
CheckChecksum
(
uint32_t
aFileSize
)
;
void
UpdateHeader
(
)
;
nsresult
ReadCompletions
(
)
;
nsresult
ReadChunkNumbers
(
)
;
nsresult
ReadHashes
(
)
;
nsresult
ReadAddPrefixes
(
)
;
nsresult
ReadSubPrefixes
(
)
;
nsresult
ReadAddCompletes
(
)
;
nsresult
WriteAddPrefixChunks
(
nsIOutputStream
*
aOut
)
;
nsresult
WriteSubPrefixes
(
nsIOutputStream
*
aOut
)
;
nsresult
WriteAddCompleteChunks
(
nsIOutputStream
*
aOut
)
;
nsresult
ProcessSubs
(
)
;
nsresult
PrepareForUpdate
(
)
;
struct
Header
{
uint32_t
magic
;
uint32_t
version
;
uint32_t
numAddChunks
;
uint32_t
numSubChunks
;
uint32_t
numAddPrefixes
;
uint32_t
numSubPrefixes
;
uint32_t
numAddCompletes
;
uint32_t
numSubCompletes
;
}
;
Header
mHeader
;
const
nsCString
mTableName
;
nsCOMPtr
<
nsIFile
>
mStoreDirectory
;
bool
mInUpdate
;
nsCOMPtr
<
nsIInputStream
>
mInputStream
;
ChunkSet
mAddChunks
;
ChunkSet
mSubChunks
;
ChunkSet
mAddExpirations
;
ChunkSet
mSubExpirations
;
AddPrefixArray
mAddPrefixes
;
SubPrefixArray
mSubPrefixes
;
AddCompleteArray
mAddCompletes
;
SubCompleteArray
mSubCompletes
;
uint32_t
mFileSize
;
friend
class
PerProviderDirectoryTestUtils
;
}
;
}
}
#
endif
