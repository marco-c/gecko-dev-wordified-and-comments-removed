#
include
"
LookupCache
.
h
"
#
include
"
HashStore
.
h
"
#
include
"
nsISeekableStream
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
prprf
.
h
"
#
include
"
Classifier
.
h
"
#
define
PREFIXSET_SUFFIX
"
.
pset
"
extern
mozilla
:
:
LazyLogModule
gUrlClassifierDbServiceLog
;
#
define
LOG
(
args
)
MOZ_LOG
(
gUrlClassifierDbServiceLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
#
define
LOG_ENABLED
(
)
MOZ_LOG_TEST
(
gUrlClassifierDbServiceLog
mozilla
:
:
LogLevel
:
:
Debug
)
namespace
mozilla
{
namespace
safebrowsing
{
const
int
LookupCacheV2
:
:
VER
=
2
;
const
int
LookupCacheV4
:
:
VER
=
4
;
LookupCache
:
:
LookupCache
(
const
nsACString
&
aTableName
nsIFile
*
aRootStoreDir
)
:
mPrimed
(
false
)
mTableName
(
aTableName
)
mRootStoreDirectory
(
aRootStoreDir
)
{
UpdateRootDirHandle
(
mRootStoreDirectory
)
;
}
nsresult
LookupCache
:
:
Open
(
)
{
LOG
(
(
"
Loading
PrefixSet
"
)
)
;
nsresult
rv
=
LoadPrefixSet
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
LookupCache
:
:
UpdateRootDirHandle
(
nsIFile
*
aNewRootStoreDirectory
)
{
nsresult
rv
;
if
(
aNewRootStoreDirectory
!
=
mRootStoreDirectory
)
{
rv
=
aNewRootStoreDirectory
-
>
Clone
(
getter_AddRefs
(
mRootStoreDirectory
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
Classifier
:
:
GetPrivateStoreDirectory
(
mRootStoreDirectory
mTableName
getter_AddRefs
(
mStoreDirectory
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
LOG
(
(
"
Failed
to
get
private
store
directory
for
%
s
"
mTableName
.
get
(
)
)
)
;
mStoreDirectory
=
mRootStoreDirectory
;
}
if
(
LOG_ENABLED
(
)
)
{
nsString
path
;
mStoreDirectory
-
>
GetPath
(
path
)
;
LOG
(
(
"
Private
store
directory
for
%
s
is
%
s
"
mTableName
.
get
(
)
NS_ConvertUTF16toUTF8
(
path
)
.
get
(
)
)
)
;
}
return
rv
;
}
nsresult
LookupCache
:
:
Reset
(
)
{
LOG
(
(
"
LookupCache
resetting
"
)
)
;
nsCOMPtr
<
nsIFile
>
prefixsetFile
;
nsresult
rv
=
mStoreDirectory
-
>
Clone
(
getter_AddRefs
(
prefixsetFile
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
prefixsetFile
-
>
AppendNative
(
mTableName
+
NS_LITERAL_CSTRING
(
PREFIXSET_SUFFIX
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
prefixsetFile
-
>
Remove
(
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
ClearAll
(
)
;
return
NS_OK
;
}
nsresult
LookupCache
:
:
AddCompletionsToCache
(
AddCompleteArray
&
aAddCompletes
)
{
for
(
uint32_t
i
=
0
;
i
<
aAddCompletes
.
Length
(
)
;
i
+
+
)
{
if
(
mGetHashCache
.
BinaryIndexOf
(
aAddCompletes
[
i
]
.
CompleteHash
(
)
)
=
=
mGetHashCache
.
NoIndex
)
{
mGetHashCache
.
AppendElement
(
aAddCompletes
[
i
]
.
CompleteHash
(
)
)
;
}
}
mGetHashCache
.
Sort
(
)
;
return
NS_OK
;
}
#
if
defined
(
DEBUG
)
void
LookupCache
:
:
DumpCache
(
)
{
if
(
!
LOG_ENABLED
(
)
)
return
;
for
(
uint32_t
i
=
0
;
i
<
mGetHashCache
.
Length
(
)
;
i
+
+
)
{
nsAutoCString
str
;
mGetHashCache
[
i
]
.
ToHexString
(
str
)
;
LOG
(
(
"
Caches
:
%
s
"
str
.
get
(
)
)
)
;
}
}
#
endif
nsresult
LookupCache
:
:
WriteFile
(
)
{
nsCOMPtr
<
nsIFile
>
psFile
;
nsresult
rv
=
mStoreDirectory
-
>
Clone
(
getter_AddRefs
(
psFile
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
psFile
-
>
AppendNative
(
mTableName
+
NS_LITERAL_CSTRING
(
PREFIXSET_SUFFIX
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
StoreToFile
(
psFile
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
failed
to
store
the
prefixset
"
)
;
return
NS_OK
;
}
void
LookupCache
:
:
ClearAll
(
)
{
ClearCache
(
)
;
ClearPrefixes
(
)
;
mPrimed
=
false
;
}
void
LookupCache
:
:
ClearCache
(
)
{
mGetHashCache
.
Clear
(
)
;
}
bool
LookupCache
:
:
IsCanonicalizedIP
(
const
nsACString
&
aHost
)
{
uint32_t
i1
i2
i3
i4
;
char
c
;
if
(
PR_sscanf
(
PromiseFlatCString
(
aHost
)
.
get
(
)
"
%
u
.
%
u
.
%
u
.
%
u
%
c
"
&
i1
&
i2
&
i3
&
i4
&
c
)
=
=
4
)
{
return
(
i1
<
=
0xFF
&
&
i2
<
=
0xFF
&
&
i3
<
=
0xFF
&
&
i4
<
=
0xFF
)
;
}
return
false
;
}
nsresult
LookupCache
:
:
GetLookupFragments
(
const
nsACString
&
aSpec
nsTArray
<
nsCString
>
*
aFragments
)
{
aFragments
-
>
Clear
(
)
;
nsACString
:
:
const_iterator
begin
end
iter
;
aSpec
.
BeginReading
(
begin
)
;
aSpec
.
EndReading
(
end
)
;
iter
=
begin
;
if
(
!
FindCharInReadable
(
'
/
'
iter
end
)
)
{
return
NS_OK
;
}
const
nsCSubstring
&
host
=
Substring
(
begin
iter
+
+
)
;
nsAutoCString
path
;
path
.
Assign
(
Substring
(
iter
end
)
)
;
nsTArray
<
nsCString
>
hosts
;
hosts
.
AppendElement
(
host
)
;
if
(
!
IsCanonicalizedIP
(
host
)
)
{
host
.
BeginReading
(
begin
)
;
host
.
EndReading
(
end
)
;
int
numHostComponents
=
0
;
while
(
RFindInReadable
(
NS_LITERAL_CSTRING
(
"
.
"
)
begin
end
)
&
&
numHostComponents
<
MAX_HOST_COMPONENTS
)
{
if
(
+
+
numHostComponents
>
=
2
)
{
host
.
EndReading
(
iter
)
;
hosts
.
AppendElement
(
Substring
(
end
iter
)
)
;
}
end
=
begin
;
host
.
BeginReading
(
begin
)
;
}
}
nsTArray
<
nsCString
>
paths
;
nsAutoCString
pathToAdd
;
path
.
BeginReading
(
begin
)
;
path
.
EndReading
(
end
)
;
iter
=
begin
;
if
(
FindCharInReadable
(
'
?
'
iter
end
)
)
{
pathToAdd
=
Substring
(
begin
iter
)
;
paths
.
AppendElement
(
pathToAdd
)
;
end
=
iter
;
}
int
numPathComponents
=
1
;
iter
=
begin
;
while
(
FindCharInReadable
(
'
/
'
iter
end
)
&
&
numPathComponents
<
MAX_PATH_COMPONENTS
)
{
iter
+
+
;
pathToAdd
.
Assign
(
Substring
(
begin
iter
)
)
;
paths
.
AppendElement
(
pathToAdd
)
;
numPathComponents
+
+
;
}
if
(
!
pathToAdd
.
Equals
(
path
)
)
{
paths
.
AppendElement
(
path
)
;
}
paths
.
AppendElement
(
EmptyCString
(
)
)
;
for
(
uint32_t
hostIndex
=
0
;
hostIndex
<
hosts
.
Length
(
)
;
hostIndex
+
+
)
{
for
(
uint32_t
pathIndex
=
0
;
pathIndex
<
paths
.
Length
(
)
;
pathIndex
+
+
)
{
nsCString
key
;
key
.
Assign
(
hosts
[
hostIndex
]
)
;
key
.
Append
(
'
/
'
)
;
key
.
Append
(
paths
[
pathIndex
]
)
;
LOG
(
(
"
Checking
fragment
%
s
"
key
.
get
(
)
)
)
;
aFragments
-
>
AppendElement
(
key
)
;
}
}
return
NS_OK
;
}
nsresult
LookupCache
:
:
GetHostKeys
(
const
nsACString
&
aSpec
nsTArray
<
nsCString
>
*
aHostKeys
)
{
nsACString
:
:
const_iterator
begin
end
iter
;
aSpec
.
BeginReading
(
begin
)
;
aSpec
.
EndReading
(
end
)
;
iter
=
begin
;
if
(
!
FindCharInReadable
(
'
/
'
iter
end
)
)
{
return
NS_OK
;
}
const
nsCSubstring
&
host
=
Substring
(
begin
iter
)
;
if
(
IsCanonicalizedIP
(
host
)
)
{
nsCString
*
key
=
aHostKeys
-
>
AppendElement
(
)
;
if
(
!
key
)
return
NS_ERROR_OUT_OF_MEMORY
;
key
-
>
Assign
(
host
)
;
key
-
>
Append
(
"
/
"
)
;
return
NS_OK
;
}
nsTArray
<
nsCString
>
hostComponents
;
ParseString
(
PromiseFlatCString
(
host
)
'
.
'
hostComponents
)
;
if
(
hostComponents
.
Length
(
)
<
2
)
{
return
NS_OK
;
}
int32_t
last
=
int32_t
(
hostComponents
.
Length
(
)
)
-
1
;
nsCString
*
lookupHost
=
aHostKeys
-
>
AppendElement
(
)
;
if
(
!
lookupHost
)
return
NS_ERROR_OUT_OF_MEMORY
;
lookupHost
-
>
Assign
(
hostComponents
[
last
-
1
]
)
;
lookupHost
-
>
Append
(
"
.
"
)
;
lookupHost
-
>
Append
(
hostComponents
[
last
]
)
;
lookupHost
-
>
Append
(
"
/
"
)
;
if
(
hostComponents
.
Length
(
)
>
2
)
{
nsCString
*
lookupHost2
=
aHostKeys
-
>
AppendElement
(
)
;
if
(
!
lookupHost2
)
return
NS_ERROR_OUT_OF_MEMORY
;
lookupHost2
-
>
Assign
(
hostComponents
[
last
-
2
]
)
;
lookupHost2
-
>
Append
(
"
.
"
)
;
lookupHost2
-
>
Append
(
*
lookupHost
)
;
}
return
NS_OK
;
}
nsresult
LookupCache
:
:
LoadPrefixSet
(
)
{
nsCOMPtr
<
nsIFile
>
psFile
;
nsresult
rv
=
mStoreDirectory
-
>
Clone
(
getter_AddRefs
(
psFile
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
psFile
-
>
AppendNative
(
mTableName
+
NS_LITERAL_CSTRING
(
PREFIXSET_SUFFIX
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
exists
;
rv
=
psFile
-
>
Exists
(
&
exists
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
exists
)
{
LOG
(
(
"
stored
PrefixSet
exists
loading
from
disk
"
)
)
;
rv
=
LoadFromFile
(
psFile
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
rv
=
=
NS_ERROR_FILE_CORRUPTED
)
{
Reset
(
)
;
}
return
rv
;
}
mPrimed
=
true
;
}
else
{
LOG
(
(
"
no
(
usable
)
stored
PrefixSet
found
"
)
)
;
}
#
ifdef
DEBUG
if
(
mPrimed
)
{
uint32_t
size
=
SizeOfPrefixSet
(
)
;
LOG
(
(
"
SB
tree
done
size
=
%
d
bytes
\
n
"
size
)
)
;
}
#
endif
return
NS_OK
;
}
nsresult
LookupCacheV2
:
:
Init
(
)
{
mPrefixSet
=
new
nsUrlClassifierPrefixSet
(
)
;
nsresult
rv
=
mPrefixSet
-
>
Init
(
mTableName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
LookupCacheV2
:
:
Open
(
)
{
nsresult
rv
=
LookupCache
:
:
Open
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
LOG
(
(
"
Reading
Completions
"
)
)
;
rv
=
ReadCompletions
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
void
LookupCacheV2
:
:
ClearAll
(
)
{
LookupCache
:
:
ClearAll
(
)
;
mUpdateCompletions
.
Clear
(
)
;
}
nsresult
LookupCacheV2
:
:
Has
(
const
Completion
&
aCompletion
bool
*
aHas
bool
*
aComplete
)
{
*
aHas
=
*
aComplete
=
false
;
uint32_t
prefix
=
aCompletion
.
ToUint32
(
)
;
bool
found
;
nsresult
rv
=
mPrefixSet
-
>
Contains
(
prefix
&
found
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
LOG
(
(
"
Probe
in
%
s
:
%
X
found
%
d
"
mTableName
.
get
(
)
prefix
found
)
)
;
if
(
found
)
{
*
aHas
=
true
;
}
if
(
(
mGetHashCache
.
BinaryIndexOf
(
aCompletion
)
!
=
nsTArray
<
Completion
>
:
:
NoIndex
)
|
|
(
mUpdateCompletions
.
BinaryIndexOf
(
aCompletion
)
!
=
nsTArray
<
Completion
>
:
:
NoIndex
)
)
{
LOG
(
(
"
Complete
in
%
s
"
mTableName
.
get
(
)
)
)
;
*
aComplete
=
true
;
*
aHas
=
true
;
}
return
NS_OK
;
}
nsresult
LookupCacheV2
:
:
Build
(
AddPrefixArray
&
aAddPrefixes
AddCompleteArray
&
aAddCompletes
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
URLCLASSIFIER_LC_COMPLETIONS
static_cast
<
uint32_t
>
(
aAddCompletes
.
Length
(
)
)
)
;
mUpdateCompletions
.
Clear
(
)
;
mUpdateCompletions
.
SetCapacity
(
aAddCompletes
.
Length
(
)
)
;
for
(
uint32_t
i
=
0
;
i
<
aAddCompletes
.
Length
(
)
;
i
+
+
)
{
mUpdateCompletions
.
AppendElement
(
aAddCompletes
[
i
]
.
CompleteHash
(
)
)
;
}
aAddCompletes
.
Clear
(
)
;
mUpdateCompletions
.
Sort
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
URLCLASSIFIER_LC_PREFIXES
static_cast
<
uint32_t
>
(
aAddPrefixes
.
Length
(
)
)
)
;
nsresult
rv
=
ConstructPrefixSet
(
aAddPrefixes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mPrimed
=
true
;
return
NS_OK
;
}
nsresult
LookupCacheV2
:
:
GetPrefixes
(
FallibleTArray
<
uint32_t
>
&
aAddPrefixes
)
{
if
(
!
mPrimed
)
{
LOG
(
(
"
GetPrefixes
from
empty
LookupCache
"
)
)
;
return
NS_OK
;
}
return
mPrefixSet
-
>
GetPrefixesNative
(
aAddPrefixes
)
;
}
nsresult
LookupCacheV2
:
:
ReadCompletions
(
)
{
HashStore
store
(
mTableName
mRootStoreDirectory
)
;
nsresult
rv
=
store
.
Open
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mUpdateCompletions
.
Clear
(
)
;
const
AddCompleteArray
&
addComplete
=
store
.
AddCompletes
(
)
;
for
(
uint32_t
i
=
0
;
i
<
addComplete
.
Length
(
)
;
i
+
+
)
{
mUpdateCompletions
.
AppendElement
(
addComplete
[
i
]
.
complete
)
;
}
return
NS_OK
;
}
nsresult
LookupCacheV2
:
:
ClearPrefixes
(
)
{
return
mPrefixSet
-
>
SetPrefixes
(
nullptr
0
)
;
}
nsresult
LookupCacheV2
:
:
StoreToFile
(
nsIFile
*
aFile
)
{
return
mPrefixSet
-
>
StoreToFile
(
aFile
)
;
}
nsresult
LookupCacheV2
:
:
LoadFromFile
(
nsIFile
*
aFile
)
{
return
mPrefixSet
-
>
LoadFromFile
(
aFile
)
;
}
size_t
LookupCacheV2
:
:
SizeOfPrefixSet
(
)
{
return
mPrefixSet
-
>
SizeOfIncludingThis
(
moz_malloc_size_of
)
;
}
#
ifdef
DEBUG
template
<
class
T
>
static
void
EnsureSorted
(
T
*
aArray
)
{
typename
T
:
:
elem_type
*
start
=
aArray
-
>
Elements
(
)
;
typename
T
:
:
elem_type
*
end
=
aArray
-
>
Elements
(
)
+
aArray
-
>
Length
(
)
;
typename
T
:
:
elem_type
*
iter
=
start
;
typename
T
:
:
elem_type
*
previous
=
start
;
while
(
iter
!
=
end
)
{
previous
=
iter
;
+
+
iter
;
if
(
iter
!
=
end
)
{
MOZ_ASSERT
(
*
previous
<
=
*
iter
)
;
}
}
return
;
}
#
endif
nsresult
LookupCacheV2
:
:
ConstructPrefixSet
(
AddPrefixArray
&
aAddPrefixes
)
{
Telemetry
:
:
AutoTimer
<
Telemetry
:
:
URLCLASSIFIER_PS_CONSTRUCT_TIME
>
timer
;
nsTArray
<
uint32_t
>
array
;
if
(
!
array
.
SetCapacity
(
aAddPrefixes
.
Length
(
)
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
for
(
uint32_t
i
=
0
;
i
<
aAddPrefixes
.
Length
(
)
;
i
+
+
)
{
array
.
AppendElement
(
aAddPrefixes
[
i
]
.
PrefixHash
(
)
.
ToUint32
(
)
)
;
}
aAddPrefixes
.
Clear
(
)
;
#
ifdef
DEBUG
EnsureSorted
(
&
array
)
;
#
endif
nsresult
rv
=
mPrefixSet
-
>
SetPrefixes
(
array
.
Elements
(
)
array
.
Length
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
#
ifdef
DEBUG
uint32_t
size
;
size
=
mPrefixSet
-
>
SizeOfIncludingThis
(
moz_malloc_size_of
)
;
LOG
(
(
"
SB
tree
done
size
=
%
d
bytes
\
n
"
size
)
)
;
#
endif
mPrimed
=
true
;
return
NS_OK
;
}
#
if
defined
(
DEBUG
)
void
LookupCacheV2
:
:
DumpCompletions
(
)
{
if
(
!
LOG_ENABLED
(
)
)
return
;
for
(
uint32_t
i
=
0
;
i
<
mUpdateCompletions
.
Length
(
)
;
i
+
+
)
{
nsAutoCString
str
;
mUpdateCompletions
[
i
]
.
ToHexString
(
str
)
;
LOG
(
(
"
Update
:
%
s
"
str
.
get
(
)
)
)
;
}
}
#
endif
nsresult
LookupCacheV4
:
:
Init
(
)
{
mVLPrefixSet
=
new
VariableLengthPrefixSet
(
)
;
nsresult
rv
=
mVLPrefixSet
-
>
Init
(
mTableName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
LookupCacheV4
:
:
Has
(
const
Completion
&
aCompletion
bool
*
aHas
bool
*
aComplete
)
{
*
aHas
=
false
;
return
NS_OK
;
}
nsresult
LookupCacheV4
:
:
Build
(
PrefixStringMap
&
aPrefixMap
)
{
return
mVLPrefixSet
-
>
SetPrefixes
(
aPrefixMap
)
;
}
nsresult
LookupCacheV4
:
:
ClearPrefixes
(
)
{
PrefixStringMap
map
;
return
mVLPrefixSet
-
>
SetPrefixes
(
map
)
;
}
nsresult
LookupCacheV4
:
:
StoreToFile
(
nsIFile
*
aFile
)
{
return
mVLPrefixSet
-
>
StoreToFile
(
aFile
)
;
}
nsresult
LookupCacheV4
:
:
LoadFromFile
(
nsIFile
*
aFile
)
{
return
mVLPrefixSet
-
>
LoadFromFile
(
aFile
)
;
}
size_t
LookupCacheV4
:
:
SizeOfPrefixSet
(
)
{
return
mVLPrefixSet
-
>
SizeOfIncludingThis
(
moz_malloc_size_of
)
;
}
}
}
