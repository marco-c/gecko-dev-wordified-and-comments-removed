import
{
normalizeToKebabCase
}
from
"
.
.
/
utils
.
js
"
;
import
{
updateSelectedItem
}
from
"
.
.
/
certviewer
.
js
"
;
export
class
CertificateTabsSection
extends
HTMLElement
{
constructor
(
isAboutCertificate
)
{
super
(
)
;
this
.
isAboutCertificate
=
isAboutCertificate
|
|
false
;
this
.
connectedCallback
(
)
;
}
connectedCallback
(
)
{
let
certificateTabsTemplate
=
document
.
getElementById
(
"
certificate
-
tabs
-
template
"
)
;
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
.
appendChild
(
certificateTabsTemplate
.
content
.
cloneNode
(
true
)
)
;
this
.
render
(
)
;
}
render
(
)
{
this
.
tabsElement
=
this
.
shadowRoot
.
querySelector
(
"
.
certificate
-
tabs
"
)
;
}
appendChild
(
child
)
{
this
.
tabsElement
.
appendChild
(
child
)
;
}
createTabSection
(
tabName
i
)
{
let
tab
=
document
.
createElement
(
"
button
"
)
;
if
(
tabName
)
{
tab
.
textContent
=
tabName
;
}
else
{
tab
.
setAttribute
(
"
data
-
l10n
-
id
"
"
certificate
-
viewer
-
unknown
-
group
-
label
"
)
;
}
tab
.
setAttribute
(
"
id
"
normalizeToKebabCase
(
tabName
)
)
;
tab
.
setAttribute
(
"
aria
-
controls
"
"
panel
"
+
i
)
;
tab
.
setAttribute
(
"
idnumber
"
i
)
;
tab
.
setAttribute
(
"
role
"
"
tab
"
)
;
tab
.
classList
.
add
(
"
certificate
-
tab
"
)
;
tab
.
classList
.
add
(
"
tab
"
)
;
if
(
this
.
isAboutCertificate
)
{
tab
.
setAttribute
(
"
data
-
l10n
-
id
"
tabName
)
;
}
else
{
tab
.
dir
=
"
auto
"
;
}
this
.
tabsElement
.
appendChild
(
tab
)
;
if
(
i
=
=
=
0
)
{
tab
.
classList
.
add
(
"
selected
"
)
;
tab
.
setAttribute
(
"
tabindex
"
0
)
;
}
else
{
tab
.
setAttribute
(
"
tabindex
"
-
1
)
;
}
}
updateSelectedTab
(
index
)
{
let
tabs
=
this
.
tabsElement
.
querySelectorAll
(
"
.
certificate
-
tab
"
)
;
for
(
let
tab
of
tabs
)
{
tab
.
classList
.
remove
(
"
selected
"
)
;
}
tabs
[
index
]
.
classList
.
add
(
"
selected
"
)
;
}
setAccessibilityEventListeners
(
)
{
let
tabs
=
this
.
tabsElement
.
querySelectorAll
(
'
[
role
=
"
tab
"
]
'
)
;
for
(
let
tab
of
tabs
)
{
tab
.
addEventListener
(
"
click
"
e
=
>
updateSelectedItem
(
e
.
target
.
getAttribute
(
"
idnumber
"
)
)
)
;
}
let
tabFocus
=
0
;
this
.
tabsElement
.
addEventListener
(
"
keydown
"
e
=
>
{
if
(
e
.
keyCode
=
=
=
39
|
|
e
.
keyCode
=
=
=
37
)
{
tabs
[
tabFocus
]
.
setAttribute
(
"
tabindex
"
-
1
)
;
if
(
e
.
keyCode
=
=
=
39
)
{
tabFocus
+
+
;
if
(
tabFocus
>
tabs
.
length
-
1
)
{
tabFocus
=
0
;
}
}
else
if
(
e
.
keyCode
=
=
=
37
)
{
tabFocus
-
-
;
if
(
tabFocus
<
0
)
{
tabFocus
=
tabs
.
length
;
}
}
tabs
[
tabFocus
]
.
setAttribute
(
"
tabindex
"
0
)
;
tabs
[
tabFocus
]
.
focus
(
)
;
}
}
)
;
}
}
customElements
.
define
(
"
certificate
-
tabs
-
section
"
CertificateTabsSection
)
;
