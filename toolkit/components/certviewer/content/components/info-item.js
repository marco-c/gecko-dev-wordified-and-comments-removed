import
{
normalizeToKebabCase
}
from
"
.
.
/
utils
.
js
"
;
export
class
InfoItem
extends
HTMLElement
{
constructor
(
item
)
{
super
(
)
;
this
.
item
=
item
;
}
connectedCallback
(
)
{
let
infoItemTemplate
=
document
.
getElementById
(
"
info
-
item
-
template
"
)
;
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
.
appendChild
(
infoItemTemplate
.
content
.
cloneNode
(
true
)
)
;
document
.
l10n
.
translateFragment
(
this
.
shadowRoot
)
;
document
.
l10n
.
connectRoot
(
this
.
shadowRoot
)
;
this
.
render
(
)
;
}
handleTimeZone
(
infoElement
)
{
let
localTime
=
this
.
item
.
info
.
local
;
let
UTCTime
=
this
.
item
.
info
.
utc
;
infoElement
.
textContent
=
localTime
;
infoElement
.
setAttribute
(
"
title
"
UTCTime
)
;
}
render
(
)
{
let
label
=
this
.
shadowRoot
.
querySelector
(
"
label
"
)
;
let
labelText
=
normalizeToKebabCase
(
this
.
item
.
label
)
;
label
.
setAttribute
(
"
data
-
l10n
-
id
"
"
certificate
-
viewer
-
"
+
labelText
)
;
this
.
classList
.
add
(
labelText
)
;
let
info
=
this
.
shadowRoot
.
querySelector
(
"
.
info
"
)
;
if
(
this
.
item
.
info
.
hasOwnProperty
(
"
utc
"
)
)
{
this
.
handleTimeZone
(
info
)
;
return
;
}
info
.
textContent
=
Array
.
isArray
(
this
.
item
.
info
)
?
this
.
item
.
info
.
join
(
"
"
)
:
this
.
item
.
info
;
if
(
this
.
item
.
label
=
=
=
"
Modulus
"
)
{
info
.
classList
.
add
(
"
long
-
hex
"
)
;
this
.
addEventListener
(
"
click
"
(
)
=
>
{
info
.
classList
.
toggle
(
"
long
-
hex
-
open
"
)
;
}
)
;
}
}
}
customElements
.
define
(
"
info
-
item
"
InfoItem
)
;
