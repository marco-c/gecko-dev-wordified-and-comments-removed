ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
function
RemoteWebNavigation
(
)
{
this
.
wrappedJSObject
=
this
;
this
.
_cancelContentJSEpoch
=
1
;
}
RemoteWebNavigation
.
prototype
=
{
classDescription
:
"
nsIWebNavigation
for
remote
browsers
"
classID
:
Components
.
ID
(
"
{
4b56964e
-
cdf3
-
4bb8
-
830c
-
0e2dad3f4ebd
}
"
)
contractID
:
"
mozilla
.
org
/
remote
-
web
-
navigation
;
1
"
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWebNavigation
]
)
swapBrowser
(
aBrowser
)
{
this
.
_browser
=
aBrowser
;
}
canGoBack
:
false
canGoForward
:
false
goBack
(
)
{
let
cancelContentJSEpoch
=
this
.
_cancelContentJSEpoch
+
+
;
this
.
_browser
.
frameLoader
.
remoteTab
.
maybeCancelContentJSExecution
(
Ci
.
nsIRemoteTab
.
NAVIGATE_BACK
{
epoch
:
cancelContentJSEpoch
}
)
;
this
.
_sendMessage
(
"
WebNavigation
:
GoBack
"
{
cancelContentJSEpoch
}
)
;
}
goForward
(
)
{
let
cancelContentJSEpoch
=
this
.
_cancelContentJSEpoch
+
+
;
this
.
_browser
.
frameLoader
.
remoteTab
.
maybeCancelContentJSExecution
(
Ci
.
nsIRemoteTab
.
NAVIGATE_FORWARD
{
epoch
:
cancelContentJSEpoch
}
)
;
this
.
_sendMessage
(
"
WebNavigation
:
GoForward
"
{
cancelContentJSEpoch
}
)
;
}
gotoIndex
(
aIndex
)
{
let
cancelContentJSEpoch
=
this
.
_cancelContentJSEpoch
+
+
;
this
.
_browser
.
frameLoader
.
remoteTab
.
maybeCancelContentJSExecution
(
Ci
.
nsIRemoteTab
.
NAVIGATE_INDEX
{
index
:
aIndex
epoch
:
cancelContentJSEpoch
}
)
;
this
.
_sendMessage
(
"
WebNavigation
:
GotoIndex
"
{
index
:
aIndex
cancelContentJSEpoch
}
)
;
}
loadURI
(
aURI
aLoadURIOptions
)
{
let
uri
;
try
{
let
fixup
=
Cc
[
"
mozilla
.
org
/
docshell
/
urifixup
;
1
"
]
.
getService
(
)
;
let
fixupFlags
=
fixup
.
webNavigationFlagsToFixupFlags
(
aURI
aLoadURIOptions
.
loadFlags
)
;
let
isBrowserPrivate
=
PrivateBrowsingUtils
.
isBrowserPrivate
(
this
.
_browser
)
;
if
(
isBrowserPrivate
)
{
fixupFlags
|
=
Services
.
uriFixup
.
FIXUP_FLAG_PRIVATE_CONTEXT
;
}
uri
=
fixup
.
createFixupURI
(
aURI
fixupFlags
)
;
if
(
uri
.
schemeIs
(
"
http
"
)
|
|
uri
.
schemeIs
(
"
https
"
)
)
{
let
principal
=
aLoadURIOptions
.
triggeringPrincipal
;
if
(
!
principal
|
|
principal
.
isSystemPrincipal
)
{
let
attrs
=
{
userContextId
:
this
.
_browser
.
getAttribute
(
"
usercontextid
"
)
|
|
0
privateBrowsingId
:
isBrowserPrivate
?
1
:
0
}
;
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
attrs
)
;
}
Services
.
io
.
speculativeConnect
(
uri
principal
null
)
;
}
}
catch
(
ex
)
{
}
let
cancelContentJSEpoch
=
this
.
_cancelContentJSEpoch
+
+
;
this
.
_browser
.
frameLoader
.
remoteTab
.
maybeCancelContentJSExecution
(
Ci
.
nsIRemoteTab
.
NAVIGATE_URL
{
uri
epoch
:
cancelContentJSEpoch
}
)
;
aLoadURIOptions
.
cancelContentJSEpoch
=
cancelContentJSEpoch
;
this
.
_browser
.
frameLoader
.
browsingContext
.
loadURI
(
aURI
aLoadURIOptions
)
;
}
setOriginAttributesBeforeLoading
(
aOriginAttributes
)
{
this
.
_sendMessage
(
"
WebNavigation
:
SetOriginAttributes
"
{
originAttributes
:
aOriginAttributes
}
)
;
}
reload
(
aReloadFlags
)
{
this
.
_sendMessage
(
"
WebNavigation
:
Reload
"
{
loadFlags
:
aReloadFlags
}
)
;
}
stop
(
aStopFlags
)
{
this
.
_sendMessage
(
"
WebNavigation
:
Stop
"
{
loadFlags
:
aStopFlags
}
)
;
}
get
document
(
)
{
return
this
.
_browser
.
contentDocument
;
}
_currentURI
:
null
get
currentURI
(
)
{
if
(
!
this
.
_currentURI
)
{
this
.
_currentURI
=
Services
.
io
.
newURI
(
"
about
:
blank
"
)
;
}
return
this
.
_currentURI
;
}
set
currentURI
(
aURI
)
{
let
loadURIOptions
=
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
;
this
.
loadURI
(
aURI
.
spec
loadURIOptions
)
;
}
referringURI
:
null
get
sessionHistory
(
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
set
sessionHistory
(
aValue
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
_sendMessage
(
aMessage
aData
)
{
try
{
this
.
_browser
.
messageManager
.
sendAsyncMessage
(
aMessage
aData
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
RemoteWebNavigation
"
]
;
