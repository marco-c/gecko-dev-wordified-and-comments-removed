const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
gCertDB
:
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
"
nsIX509CertDB
"
]
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
Corroborate
"
]
;
this
.
Corroborate
=
{
async
init
(
)
{
const
appOmniJar
=
FileUtils
.
getFile
(
"
XCurProcD
"
[
AppConstants
.
OMNIJAR_NAME
]
)
;
const
greOmniJar
=
FileUtils
.
getFile
(
"
GreD
"
[
AppConstants
.
OMNIJAR_NAME
]
)
;
let
corruptOmnijar
=
true
;
if
(
(
await
OS
.
File
.
exists
(
appOmniJar
.
path
)
)
&
&
(
await
OS
.
File
.
exists
(
greOmniJar
.
path
)
)
)
{
corruptOmnijar
=
!
(
(
await
this
.
verifyJar
(
appOmniJar
)
)
&
&
(
await
this
.
verifyJar
(
greOmniJar
)
)
)
;
}
Services
.
telemetry
.
scalarSet
(
"
corroborate
.
omnijar_corrupted
"
corruptOmnijar
)
;
let
mismatchedOmnijar
=
Services
.
appinfo
.
platformBuildID
!
=
AppConstants
.
MOZ_BUILDID
;
Services
.
telemetry
.
scalarSet
(
"
corroborate
.
omnijar_mismatch
"
mismatchedOmnijar
)
;
}
verifyJar
(
file
)
{
let
root
=
Ci
.
nsIX509CertDB
.
AddonsPublicRoot
;
let
expectedOrganizationalUnit
=
"
Mozilla
Components
"
;
return
new
Promise
(
resolve
=
>
{
gCertDB
.
openSignedAppFileAsync
(
root
file
(
rv
_zipReader
cert
)
=
>
{
resolve
(
Components
.
isSuccessCode
(
rv
)
&
&
cert
.
organizationalUnit
=
=
=
expectedOrganizationalUnit
)
;
}
)
;
}
)
;
}
}
;
