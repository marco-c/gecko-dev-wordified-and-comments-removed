"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonStudies
"
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonStudyAction
"
"
resource
:
/
/
normandy
/
actions
/
AddonStudyAction
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CleanupManager
"
"
resource
:
/
/
normandy
/
lib
/
CleanupManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PreferenceExperiments
"
"
resource
:
/
/
normandy
/
lib
/
PreferenceExperiments
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
RecipeRunner
"
"
resource
:
/
/
normandy
/
lib
/
RecipeRunner
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
AboutPages
"
]
;
const
SHIELD_LEARN_MORE_URL_PREF
=
"
app
.
normandy
.
shieldLearnMoreUrl
"
;
class
AboutPage
{
constructor
(
{
chromeUrl
aboutHost
classID
description
uriFlags
}
)
{
this
.
chromeUrl
=
chromeUrl
;
this
.
aboutHost
=
aboutHost
;
this
.
classID
=
Components
.
ID
(
classID
)
;
this
.
description
=
description
;
this
.
uriFlags
=
uriFlags
;
}
getURIFlags
(
)
{
return
this
.
uriFlags
;
}
newChannel
(
uri
loadInfo
)
{
const
newURI
=
Services
.
io
.
newURI
(
this
.
chromeUrl
)
;
const
channel
=
Services
.
io
.
newChannelFromURIWithLoadInfo
(
newURI
loadInfo
)
;
channel
.
originalURI
=
uri
;
if
(
this
.
uriFlags
&
Ci
.
nsIAboutModule
.
URI_SAFE_FOR_UNTRUSTED_CONTENT
)
{
const
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
{
}
)
;
channel
.
owner
=
principal
;
}
return
channel
;
}
}
AboutPage
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAboutModule
]
)
;
var
AboutPages
=
{
async
init
(
)
{
this
.
aboutStudies
.
registerParentListeners
(
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
{
Services
.
ppmm
.
broadcastAsyncMessage
(
"
Shield
:
ShuttingDown
"
)
;
Services
.
mm
.
broadcastAsyncMessage
(
"
Shield
:
ShuttingDown
"
)
;
this
.
aboutStudies
.
unregisterParentListeners
(
)
;
}
)
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
.
AboutPages
"
aboutStudies
"
(
)
=
>
{
const
aboutStudies
=
new
AboutPage
(
{
chromeUrl
:
"
resource
:
/
/
normandy
-
content
/
about
-
studies
/
about
-
studies
.
html
"
aboutHost
:
"
studies
"
classID
:
"
{
6ab96943
-
a163
-
482c
-
9622
-
4faedc0e827f
}
"
description
:
"
Shield
Study
Listing
"
uriFlags
:
(
Ci
.
nsIAboutModule
.
ALLOW_SCRIPT
|
Ci
.
nsIAboutModule
.
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
Ci
.
nsIAboutModule
.
URI_MUST_LOAD_IN_CHILD
)
}
)
;
Object
.
assign
(
aboutStudies
{
registerParentListeners
(
)
{
Services
.
mm
.
addMessageListener
(
"
Shield
:
GetAddonStudyList
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Shield
:
GetPreferenceStudyList
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Shield
:
RemoveAddonStudy
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Shield
:
RemovePreferenceStudy
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Shield
:
OpenDataPreferences
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Shield
:
GetStudiesEnabled
"
this
)
;
}
unregisterParentListeners
(
)
{
Services
.
mm
.
removeMessageListener
(
"
Shield
:
GetAddonStudyList
"
this
)
;
Services
.
mm
.
removeMessageListener
(
"
Shield
:
GetPreferenceStudyList
"
this
)
;
Services
.
mm
.
removeMessageListener
(
"
Shield
:
RemoveAddonStudy
"
this
)
;
Services
.
mm
.
removeMessageListener
(
"
Shield
:
RemovePreferenceStudy
"
this
)
;
Services
.
mm
.
removeMessageListener
(
"
Shield
:
OpenDataPreferences
"
this
)
;
Services
.
mm
.
removeMessageListener
(
"
Shield
:
GetStudiesEnabled
"
this
)
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
Shield
:
GetAddonStudyList
"
:
this
.
sendAddonStudyList
(
message
.
target
)
;
break
;
case
"
Shield
:
GetPreferenceStudyList
"
:
this
.
sendPreferenceStudyList
(
message
.
target
)
;
break
;
case
"
Shield
:
RemoveAddonStudy
"
:
this
.
removeAddonStudy
(
message
.
data
.
recipeId
message
.
data
.
reason
)
;
break
;
case
"
Shield
:
RemovePreferenceStudy
"
:
this
.
removePreferenceStudy
(
message
.
data
.
experimentName
message
.
data
.
reason
)
;
break
;
case
"
Shield
:
OpenDataPreferences
"
:
this
.
openDataPreferences
(
)
;
break
;
case
"
Shield
:
GetStudiesEnabled
"
:
this
.
sendStudiesEnabled
(
message
.
target
)
;
break
;
}
}
async
sendAddonStudyList
(
target
)
{
try
{
target
.
messageManager
.
sendAsyncMessage
(
"
Shield
:
ReceiveAddonStudyList
"
{
studies
:
await
AddonStudies
.
getAll
(
)
}
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
async
sendPreferenceStudyList
(
target
)
{
try
{
target
.
messageManager
.
sendAsyncMessage
(
"
Shield
:
ReceivePreferenceStudyList
"
{
studies
:
await
PreferenceExperiments
.
getAll
(
)
}
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
sendStudiesEnabled
(
target
)
{
RecipeRunner
.
checkPrefs
(
)
;
try
{
target
.
messageManager
.
sendAsyncMessage
(
"
Shield
:
ReceiveStudiesEnabled
"
{
studiesEnabled
:
RecipeRunner
.
enabled
}
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
async
removeAddonStudy
(
recipeId
reason
)
{
const
action
=
new
AddonStudyAction
(
)
;
await
action
.
unenroll
(
recipeId
reason
)
;
Services
.
mm
.
broadcastAsyncMessage
(
"
Shield
:
ReceiveAddonStudyList
"
{
studies
:
await
AddonStudies
.
getAll
(
)
}
)
;
}
async
removePreferenceStudy
(
experimentName
reason
)
{
PreferenceExperiments
.
stop
(
experimentName
{
reason
}
)
;
Services
.
mm
.
broadcastAsyncMessage
(
"
Shield
:
ReceivePreferenceStudyList
"
{
studies
:
await
PreferenceExperiments
.
getAll
(
)
}
)
;
}
openDataPreferences
(
)
{
const
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
browserWindow
.
openPreferences
(
"
privacy
-
reports
"
{
origin
:
"
aboutStudies
"
}
)
;
}
getShieldLearnMoreHref
(
)
{
return
Services
.
urlFormatter
.
formatURLPref
(
SHIELD_LEARN_MORE_URL_PREF
)
;
}
getStudiesEnabled
(
)
{
RecipeRunner
.
checkPrefs
(
)
;
return
RecipeRunner
.
enabled
;
}
}
)
;
return
aboutStudies
;
}
)
;
