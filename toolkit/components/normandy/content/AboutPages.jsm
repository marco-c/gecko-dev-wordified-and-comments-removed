"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
AddonStudies
"
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
BranchedAddonStudyAction
"
"
resource
:
/
/
normandy
/
actions
/
BranchedAddonStudyAction
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
PreferenceExperiments
"
"
resource
:
/
/
normandy
/
lib
/
PreferenceExperiments
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
RecipeRunner
"
"
resource
:
/
/
normandy
/
lib
/
RecipeRunner
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
ExperimentManager
"
"
resource
:
/
/
nimbus
/
lib
/
ExperimentManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
RemoteSettingsExperimentLoader
"
"
resource
:
/
/
nimbus
/
lib
/
RemoteSettingsExperimentLoader
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
AboutPages
"
]
;
const
SHIELD_LEARN_MORE_URL_PREF
=
"
app
.
normandy
.
shieldLearnMoreUrl
"
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
gOptOutStudiesEnabled
"
"
app
.
shield
.
optoutstudies
.
enabled
"
)
;
class
AboutPage
{
constructor
(
{
chromeUrl
aboutHost
classID
description
uriFlags
}
)
{
this
.
chromeUrl
=
chromeUrl
;
this
.
aboutHost
=
aboutHost
;
this
.
classID
=
Components
.
ID
(
classID
)
;
this
.
description
=
description
;
this
.
uriFlags
=
uriFlags
;
}
getURIFlags
(
)
{
return
this
.
uriFlags
;
}
newChannel
(
uri
loadInfo
)
{
const
newURI
=
Services
.
io
.
newURI
(
this
.
chromeUrl
)
;
const
channel
=
Services
.
io
.
newChannelFromURIWithLoadInfo
(
newURI
loadInfo
)
;
channel
.
originalURI
=
uri
;
if
(
this
.
uriFlags
&
Ci
.
nsIAboutModule
.
URI_SAFE_FOR_UNTRUSTED_CONTENT
)
{
const
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
channel
.
owner
=
principal
;
}
return
channel
;
}
}
AboutPage
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIAboutModule
"
]
)
;
let
AboutPages
=
{
}
;
let
BrowsingContexts
=
new
WeakSet
(
)
;
XPCOMUtils
.
defineLazyGetter
(
AboutPages
"
aboutStudies
"
(
)
=
>
{
const
aboutStudies
=
new
AboutPage
(
{
chromeUrl
:
"
resource
:
/
/
normandy
-
content
/
about
-
studies
/
about
-
studies
.
html
"
aboutHost
:
"
studies
"
classID
:
"
{
6ab96943
-
a163
-
482c
-
9622
-
4faedc0e827f
}
"
description
:
"
Shield
Study
Listing
"
uriFlags
:
Ci
.
nsIAboutModule
.
ALLOW_SCRIPT
|
Ci
.
nsIAboutModule
.
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
Ci
.
nsIAboutModule
.
URI_MUST_LOAD_IN_CHILD
|
Ci
.
nsIAboutModule
.
IS_SECURE_CHROME_UI
}
)
;
Object
.
assign
(
aboutStudies
{
getAddonStudyList
(
)
{
return
lazy
.
AddonStudies
.
getAll
(
)
;
}
getPreferenceStudyList
(
)
{
return
lazy
.
PreferenceExperiments
.
getAll
(
)
;
}
getMessagingSystemList
(
)
{
return
lazy
.
ExperimentManager
.
store
.
getAll
(
)
;
}
async
optInToExperiment
(
data
)
{
try
{
await
lazy
.
RemoteSettingsExperimentLoader
.
optInToExperiment
(
data
)
;
return
{
error
:
false
message
:
"
Opt
-
in
was
successful
.
"
}
;
}
catch
(
error
)
{
return
{
error
:
true
message
:
error
.
message
}
;
}
}
addToWeakSet
(
browsingContext
)
{
BrowsingContexts
.
add
(
browsingContext
)
;
}
removeFromWeakSet
(
browsingContext
)
{
BrowsingContexts
.
delete
(
browsingContext
)
;
}
_sendToAll
(
message
data
)
{
ChromeUtils
.
nondeterministicGetWeakSetKeys
(
BrowsingContexts
)
.
forEach
(
browser
=
>
browser
.
currentWindowGlobal
.
getActor
(
"
ShieldFrame
"
)
.
sendAsyncMessage
(
message
data
)
)
;
}
async
getStudiesEnabled
(
)
{
await
lazy
.
RecipeRunner
.
initializedPromise
.
promise
;
return
lazy
.
RecipeRunner
.
enabled
&
&
lazy
.
gOptOutStudiesEnabled
;
}
async
removeAddonStudy
(
recipeId
reason
)
{
try
{
const
action
=
new
lazy
.
BranchedAddonStudyAction
(
)
;
await
action
.
unenroll
(
recipeId
reason
)
;
}
catch
(
err
)
{
if
(
!
err
.
toString
(
)
.
includes
(
"
already
inactive
"
)
)
{
throw
err
;
}
}
finally
{
this
.
getAddonStudyList
(
)
.
then
(
list
=
>
this
.
_sendToAll
(
"
Shield
:
UpdateAddonStudyList
"
list
)
)
;
}
}
async
removePreferenceStudy
(
experimentName
reason
)
{
try
{
await
lazy
.
PreferenceExperiments
.
stop
(
experimentName
{
reason
caller
:
"
AboutPages
.
removePreferenceStudy
"
}
)
;
}
catch
(
err
)
{
if
(
!
err
.
toString
(
)
.
includes
(
"
already
expired
"
)
)
{
throw
err
;
}
}
finally
{
this
.
getPreferenceStudyList
(
)
.
then
(
list
=
>
this
.
_sendToAll
(
"
Shield
:
UpdatePreferenceStudyList
"
list
)
)
;
}
}
async
removeMessagingSystemExperiment
(
slug
reason
)
{
lazy
.
ExperimentManager
.
unenroll
(
slug
reason
)
;
this
.
_sendToAll
(
"
Shield
:
UpdateMessagingSystemExperimentList
"
lazy
.
ExperimentManager
.
store
.
getAll
(
)
)
;
}
openDataPreferences
(
)
{
const
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
browserWindow
.
openPreferences
(
"
privacy
-
reports
"
)
;
}
getShieldLearnMoreHref
(
)
{
return
Services
.
urlFormatter
.
formatURLPref
(
SHIELD_LEARN_MORE_URL_PREF
)
;
}
}
)
;
return
aboutStudies
;
}
)
;
