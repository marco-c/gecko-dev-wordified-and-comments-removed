"
use
strict
"
;
const
r
=
React
.
createElement
;
function
sendPageEvent
(
action
data
)
{
const
event
=
new
CustomEvent
(
"
ShieldPageEvent
"
{
bubbles
:
true
detail
:
{
action
data
}
}
)
;
document
.
dispatchEvent
(
event
)
;
}
class
AboutStudies
extends
React
.
Component
{
constructor
(
props
)
{
super
(
props
)
;
this
.
remoteValueNameMap
=
{
StudyList
:
"
addonStudies
"
ShieldLearnMoreHref
:
"
learnMoreHref
"
StudiesEnabled
:
"
studiesEnabled
"
ShieldTranslations
:
"
translations
"
}
;
this
.
state
=
{
}
;
for
(
const
stateName
of
Object
.
values
(
this
.
remoteValueNameMap
)
)
{
this
.
state
[
stateName
]
=
null
;
}
}
componentWillMount
(
)
{
for
(
const
remoteName
of
Object
.
keys
(
this
.
remoteValueNameMap
)
)
{
document
.
addEventListener
(
ReceiveRemoteValue
:
{
remoteName
}
this
)
;
sendPageEvent
(
GetRemoteValue
:
{
remoteName
}
)
;
}
}
componentWillUnmount
(
)
{
for
(
const
remoteName
of
Object
.
keys
(
this
.
remoteValueNameMap
)
)
{
document
.
removeEventListener
(
ReceiveRemoteValue
:
{
remoteName
}
this
)
;
}
}
handleEvent
(
{
type
detail
:
value
}
)
{
const
prefix
=
"
ReceiveRemoteValue
:
"
;
if
(
type
.
startsWith
(
prefix
)
)
{
const
name
=
type
.
substring
(
prefix
.
length
)
;
this
.
setState
(
{
[
this
.
remoteValueNameMap
[
name
]
]
:
value
}
)
;
}
}
render
(
)
{
const
{
translations
learnMoreHref
studiesEnabled
addonStudies
}
=
this
.
state
;
if
(
Object
.
values
(
this
.
state
)
.
some
(
v
=
>
v
=
=
=
null
)
)
{
return
null
;
}
return
(
r
(
"
div
"
{
className
:
"
about
-
studies
-
container
main
-
content
"
}
r
(
WhatsThisBox
{
translations
learnMoreHref
studiesEnabled
}
)
r
(
StudyList
{
translations
addonStudies
}
)
)
)
;
}
}
class
WhatsThisBox
extends
React
.
Component
{
handleUpdateClick
(
)
{
sendPageEvent
(
"
NavigateToDataPreferences
"
)
;
}
render
(
)
{
const
{
learnMoreHref
studiesEnabled
translations
}
=
this
.
props
;
return
(
r
(
"
div
"
{
className
:
"
info
-
box
"
}
r
(
"
div
"
{
className
:
"
info
-
box
-
content
"
}
r
(
"
span
"
{
}
studiesEnabled
?
translations
.
enabledList
:
translations
.
disabledList
)
r
(
"
a
"
{
id
:
"
shield
-
studies
-
learn
-
more
"
href
:
learnMoreHref
}
translations
.
learnMore
)
r
(
"
button
"
{
id
:
"
shield
-
studies
-
update
-
preferences
"
onClick
:
this
.
handleUpdateClick
}
r
(
"
div
"
{
className
:
"
button
-
box
"
}
navigator
.
platform
.
includes
(
"
Win
"
)
?
translations
.
updateButtonWin
:
translations
.
updateButtonUnix
)
)
)
)
)
;
}
}
class
StudyList
extends
React
.
Component
{
render
(
)
{
const
{
addonStudies
translations
}
=
this
.
props
;
if
(
!
addonStudies
.
length
)
{
return
r
(
"
p
"
{
className
:
"
study
-
list
-
info
"
}
translations
.
noStudies
)
;
}
addonStudies
.
sort
(
(
a
b
)
=
>
{
if
(
a
.
active
!
=
=
b
.
active
)
{
return
a
.
active
?
-
1
:
1
;
}
return
b
.
studyStartDate
-
a
.
studyStartDate
;
}
)
;
return
(
r
(
"
ul
"
{
className
:
"
study
-
list
"
}
addonStudies
.
map
(
study
=
>
(
r
(
StudyListItem
{
key
:
study
.
name
study
translations
}
)
)
)
)
)
;
}
}
StudyList
.
propTypes
=
{
addonStudies
:
PropTypes
.
array
.
isRequired
translations
:
PropTypes
.
object
.
isRequired
}
;
class
StudyListItem
extends
React
.
Component
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleClickRemove
=
this
.
handleClickRemove
.
bind
(
this
)
;
}
handleClickRemove
(
)
{
sendPageEvent
(
"
RemoveStudy
"
{
recipeId
:
this
.
props
.
study
.
recipeId
reason
:
"
individual
-
opt
-
out
"
}
)
;
}
render
(
)
{
const
{
study
translations
}
=
this
.
props
;
return
(
r
(
"
li
"
{
className
:
classnames
(
"
study
"
{
disabled
:
!
study
.
active
}
)
"
data
-
study
-
name
"
:
study
.
name
}
r
(
"
div
"
{
className
:
"
study
-
icon
"
}
study
.
name
.
slice
(
0
1
)
)
r
(
"
div
"
{
className
:
"
study
-
details
"
}
r
(
"
div
"
{
className
:
"
study
-
name
"
}
study
.
name
)
r
(
"
div
"
{
className
:
"
study
-
description
"
title
:
study
.
description
}
r
(
"
span
"
{
className
:
"
study
-
status
"
}
study
.
active
?
translations
.
activeStatus
:
translations
.
completeStatus
)
r
(
"
span
"
{
}
"
\
u2022
"
)
r
(
"
span
"
{
}
study
.
description
)
)
)
r
(
"
div
"
{
className
:
"
study
-
actions
"
}
study
.
active
&
&
r
(
"
button
"
{
className
:
"
remove
-
button
"
onClick
:
this
.
handleClickRemove
}
r
(
"
div
"
{
className
:
"
button
-
box
"
}
translations
.
removeButton
)
)
)
)
)
;
}
}
StudyListItem
.
propTypes
=
{
study
:
PropTypes
.
shape
(
{
recipeId
:
PropTypes
.
number
.
isRequired
name
:
PropTypes
.
string
.
isRequired
active
:
PropTypes
.
boolean
description
:
PropTypes
.
string
.
isRequired
}
)
.
isRequired
translations
:
PropTypes
.
object
.
isRequired
}
;
ReactDOM
.
render
(
r
(
AboutStudies
)
document
.
getElementById
(
"
app
"
)
)
;
