"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ShieldFrameChild
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorChild
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
frameGlobal
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
frameGlobal
"
AboutPages
"
"
resource
:
/
/
normandy
-
content
/
AboutPages
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gBrandBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gStringBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
global
/
locale
/
aboutStudies
.
properties
"
)
;
}
)
;
class
ShieldFrameChild
extends
ActorChild
{
handleEvent
(
event
)
{
this
.
mm
.
addMessageListener
(
"
Shield
:
ShuttingDown
"
this
)
;
this
.
mm
.
addMessageListener
(
"
Shield
:
ReceiveStudyList
"
this
)
;
this
.
mm
.
addMessageListener
(
"
Shield
:
ReceiveStudiesEnabled
"
this
)
;
switch
(
event
.
detail
.
action
)
{
case
"
GetRemoteValue
:
StudyList
"
:
this
.
mm
.
sendAsyncMessage
(
"
Shield
:
GetStudyList
"
)
;
break
;
case
"
RemoveStudy
"
:
this
.
mm
.
sendAsyncMessage
(
"
Shield
:
RemoveStudy
"
event
.
detail
.
data
)
;
break
;
case
"
GetRemoteValue
:
StudiesEnabled
"
:
this
.
mm
.
sendAsyncMessage
(
"
Shield
:
GetStudiesEnabled
"
)
;
break
;
case
"
NavigateToDataPreferences
"
:
this
.
mm
.
sendAsyncMessage
(
"
Shield
:
OpenDataPreferences
"
)
;
break
;
case
"
GetRemoteValue
:
ShieldLearnMoreHref
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
ShieldLearnMoreHref
"
frameGlobal
.
AboutPages
.
aboutStudies
.
getShieldLearnMoreHref
(
)
)
;
break
;
case
"
GetRemoteValue
:
ShieldTranslations
"
:
const
strings
=
{
}
;
for
(
let
str
of
gStringBundle
.
getSimpleEnumeration
(
)
)
{
strings
[
str
.
key
]
=
str
.
value
;
}
const
brandName
=
gBrandBundle
.
GetStringFromName
(
"
brandShortName
"
)
;
strings
.
enabledList
=
gStringBundle
.
formatStringFromName
(
"
enabledList
"
[
brandName
]
1
)
;
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
ShieldTranslations
"
strings
)
;
break
;
}
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
Shield
:
ReceiveStudyList
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
StudyList
"
message
.
data
.
studies
)
;
break
;
case
"
Shield
:
ReceiveStudiesEnabled
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
StudiesEnabled
"
message
.
data
.
studiesEnabled
)
;
break
;
case
"
Shield
:
ShuttingDown
"
:
this
.
onShutdown
(
)
;
break
;
}
}
triggerPageCallback
(
type
detail
)
{
let
{
content
}
=
this
.
mm
;
const
event
=
new
content
.
document
.
defaultView
.
CustomEvent
(
type
{
bubbles
:
true
detail
:
Cu
.
cloneInto
(
detail
content
.
document
.
defaultView
)
}
)
;
content
.
document
.
dispatchEvent
(
event
)
;
}
onShutdown
(
)
{
this
.
mm
.
removeMessageListener
(
"
Shield
:
SendStudyList
"
this
)
;
this
.
mm
.
removeMessageListener
(
"
Shield
:
ShuttingDown
"
this
)
;
this
.
mm
.
removeEventListener
(
"
Shield
"
this
)
;
}
}
