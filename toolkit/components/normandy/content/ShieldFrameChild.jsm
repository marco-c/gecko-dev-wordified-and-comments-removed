"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ShieldFrameChild
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
frameGlobal
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
frameGlobal
"
AboutPages
"
"
resource
:
/
/
normandy
-
content
/
AboutPages
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
gBrandBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
gStringBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
global
/
locale
/
aboutStudies
.
properties
"
)
;
}
)
;
const
NIMBUS_DEBUG_PREF
=
"
nimbus
.
debug
"
;
class
ShieldFrameChild
extends
JSWindowActorChild
{
async
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
pageshow
"
:
this
.
sendAsyncMessage
(
"
Shield
:
AddToWeakSet
"
)
;
return
;
case
"
pagehide
"
:
this
.
sendAsyncMessage
(
"
Shield
:
RemoveFromWeakSet
"
)
;
return
;
}
switch
(
event
.
detail
.
action
)
{
case
"
GetRemoteValue
:
AddonStudyList
"
:
let
addonStudies
=
await
this
.
sendQuery
(
"
Shield
:
GetAddonStudyList
"
)
;
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
AddonStudyList
"
addonStudies
)
;
break
;
case
"
GetRemoteValue
:
PreferenceStudyList
"
:
let
prefStudies
=
await
this
.
sendQuery
(
"
Shield
:
GetPreferenceStudyList
"
)
;
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
PreferenceStudyList
"
prefStudies
)
;
break
;
case
"
GetRemoteValue
:
MessagingSystemList
"
:
let
experiments
=
await
this
.
sendQuery
(
"
Shield
:
GetMessagingSystemList
"
)
;
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
MessagingSystemList
"
experiments
)
;
break
;
case
"
RemoveAddonStudy
"
:
this
.
sendAsyncMessage
(
"
Shield
:
RemoveAddonStudy
"
event
.
detail
.
data
)
;
break
;
case
"
RemovePreferenceStudy
"
:
this
.
sendAsyncMessage
(
"
Shield
:
RemovePreferenceStudy
"
event
.
detail
.
data
)
;
break
;
case
"
RemoveMessagingSystemExperiment
"
:
this
.
sendAsyncMessage
(
"
Shield
:
RemoveMessagingSystemExperiment
"
event
.
detail
.
data
)
;
break
;
case
"
GetRemoteValue
:
StudiesEnabled
"
:
let
studiesEnabled
=
await
this
.
sendQuery
(
"
Shield
:
GetStudiesEnabled
"
)
;
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
StudiesEnabled
"
studiesEnabled
)
;
break
;
case
"
GetRemoteValue
:
DebugModeOn
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
DebugModeOn
"
Services
.
prefs
.
getBoolPref
(
NIMBUS_DEBUG_PREF
)
)
;
break
;
case
"
NavigateToDataPreferences
"
:
this
.
sendAsyncMessage
(
"
Shield
:
OpenDataPreferences
"
)
;
break
;
case
"
GetRemoteValue
:
ShieldLearnMoreHref
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
ShieldLearnMoreHref
"
frameGlobal
.
AboutPages
.
aboutStudies
.
getShieldLearnMoreHref
(
)
)
;
break
;
case
"
GetRemoteValue
:
ShieldTranslations
"
:
const
strings
=
{
}
;
for
(
let
str
of
lazy
.
gStringBundle
.
getSimpleEnumeration
(
)
)
{
strings
[
str
.
key
]
=
str
.
value
;
}
const
brandName
=
lazy
.
gBrandBundle
.
GetStringFromName
(
"
brandShortName
"
)
;
strings
.
enabledList
=
lazy
.
gStringBundle
.
formatStringFromName
(
"
enabledList
"
[
brandName
]
)
;
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
ShieldTranslations
"
strings
)
;
break
;
case
"
ExperimentOptIn
"
:
const
message
=
await
this
.
sendQuery
(
"
Shield
:
ExperimentOptIn
"
event
.
detail
.
data
)
;
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
OptInMessage
"
message
)
;
break
;
}
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
Shield
:
UpdateAddonStudyList
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
AddonStudyList
"
msg
.
data
)
;
break
;
case
"
Shield
:
UpdatePreferenceStudyList
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
PreferenceStudyList
"
msg
.
data
)
;
break
;
case
"
Shield
:
UpdateMessagingSystemExperimentList
"
:
this
.
triggerPageCallback
(
"
ReceiveRemoteValue
:
MessagingSystemList
"
msg
.
data
)
;
break
;
}
}
triggerPageCallback
(
type
detail
)
{
const
event
=
new
this
.
document
.
defaultView
.
CustomEvent
(
type
{
bubbles
:
true
detail
:
Cu
.
cloneInto
(
detail
this
.
document
.
defaultView
)
}
)
;
this
.
document
.
dispatchEvent
(
event
)
;
}
}
