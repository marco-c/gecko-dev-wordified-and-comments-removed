"
use
strict
"
;
const
{
Normandy
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
Normandy
.
jsm
"
)
;
const
{
NormandyMigrations
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
NormandyMigrations
.
jsm
"
)
;
load
(
"
utils
.
js
"
)
;
NormandyTestUtils
.
init
(
{
add_task
}
)
;
const
{
decorate_task
}
=
NormandyTestUtils
;
decorate_task
(
NormandyTestUtils
.
withStub
(
Normandy
"
finishInit
"
)
NormandyTestUtils
.
withStub
(
NormandyMigrations
"
applyAll
"
)
NormandyTestUtils
.
withMockPreferences
(
)
async
function
test_normandy_init_applies_startup_prefs_synchronously
(
{
mockPreferences
}
)
{
const
experimentPref
=
"
test
.
experiment
"
;
const
rolloutPref
=
"
test
.
rollout
"
;
const
experimentStartupPref
=
app
.
normandy
.
startupExperimentPrefs
.
{
experimentPref
}
;
const
rolloutStartupPref
=
app
.
normandy
.
startupRolloutPrefs
.
{
rolloutPref
}
;
mockPreferences
.
preserve
(
experimentPref
"
default
"
)
;
mockPreferences
.
preserve
(
rolloutPref
"
default
"
)
;
mockPreferences
.
set
(
experimentStartupPref
"
experiment
"
)
;
mockPreferences
.
set
(
rolloutStartupPref
"
rollout
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
experimentPref
"
default
"
)
"
default
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
rolloutPref
"
default
"
)
"
default
"
)
;
let
initPromise
=
Normandy
.
init
(
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
experimentPref
"
default
"
)
"
experiment
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
rolloutPref
"
default
"
)
"
rollout
"
)
;
await
initPromise
;
await
Normandy
.
uninit
(
)
;
}
)
;
