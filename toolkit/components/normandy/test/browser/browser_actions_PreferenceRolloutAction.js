"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
actions
/
PreferenceRolloutAction
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
PreferenceRollouts
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
TelemetryEvents
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
NormandyTestUtils
.
jsm
"
this
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
withStub
(
TelemetryEnvironment
"
setExperimentActive
"
)
withSendEventStub
async
function
simple_recipe_enrollment
(
setExperimentActiveStub
sendEventStub
)
{
const
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref1
"
value
:
1
}
{
preferenceName
:
"
test
.
pref2
"
value
:
true
}
{
preferenceName
:
"
test
.
pref3
"
value
:
"
it
works
"
}
]
}
}
;
const
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref1
"
)
1
"
integer
pref
should
be
set
"
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
test
.
pref2
"
)
true
"
boolean
pref
should
be
set
"
)
;
is
(
Services
.
prefs
.
getCharPref
(
"
test
.
pref3
"
)
"
it
works
"
"
string
pref
should
be
set
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref1
"
)
1
"
integer
startup
pref
should
be
set
"
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref2
"
)
true
"
boolean
startup
pref
should
be
set
"
)
;
is
(
Services
.
prefs
.
getCharPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref3
"
)
"
it
works
"
"
string
startup
pref
should
be
set
"
)
;
let
rollouts
=
await
PreferenceRollouts
.
getAll
(
)
;
Assert
.
deepEqual
(
rollouts
[
{
slug
:
"
test
-
rollout
"
state
:
PreferenceRollouts
.
STATE_ACTIVE
preferences
:
[
{
preferenceName
:
"
test
.
pref1
"
value
:
1
previousValue
:
null
}
{
preferenceName
:
"
test
.
pref2
"
value
:
true
previousValue
:
null
}
{
preferenceName
:
"
test
.
pref3
"
value
:
"
it
works
"
previousValue
:
null
}
]
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
"
Rollout
should
be
stored
in
db
"
)
;
ok
(
NormandyTestUtils
.
isUuid
(
rollouts
[
0
]
.
enrollmentId
)
"
Rollout
should
have
a
UUID
enrollmentId
"
)
;
sendEventStub
.
assertEvents
(
[
[
"
enroll
"
"
preference_rollout
"
recipe
.
arguments
.
slug
{
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
]
)
;
Assert
.
deepEqual
(
setExperimentActiveStub
.
args
[
[
"
test
-
rollout
"
"
active
"
{
type
:
"
normandy
-
prefrollout
"
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
]
"
a
telemetry
experiment
should
be
activated
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref1
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref2
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref3
"
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
withSendEventStub
async
function
update_enrollment
(
sendEventStub
)
{
const
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref1
"
value
:
1
}
{
preferenceName
:
"
test
.
pref2
"
value
:
1
}
]
}
}
;
let
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
const
defaultBranch
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
is
(
defaultBranch
.
getIntPref
(
"
test
.
pref1
"
)
1
"
pref1
should
be
set
"
)
;
is
(
defaultBranch
.
getIntPref
(
"
test
.
pref2
"
)
1
"
pref2
should
be
set
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref1
"
)
1
"
startup
pref1
should
be
set
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref2
"
)
1
"
startup
pref2
should
be
set
"
)
;
recipe
.
arguments
.
preferences
=
[
{
preferenceName
:
"
test
.
pref2
"
value
:
2
}
{
preferenceName
:
"
test
.
pref3
"
value
:
2
}
]
;
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
todo_is
(
Services
.
prefs
.
getPrefType
(
"
test
.
pref1
"
)
Services
.
prefs
.
PREF_INVALID
"
pref1
should
be
removed
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref2
"
)
2
"
pref2
should
be
updated
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref3
"
)
2
"
pref3
should
be
added
"
)
;
is
(
Services
.
prefs
.
getPrefType
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref1
"
)
Services
.
prefs
.
PREF_INVALID
"
startup
pref1
should
be
removed
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref2
"
)
2
"
startup
pref2
should
be
updated
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref3
"
)
2
"
startup
pref3
should
be
added
"
)
;
const
rollouts
=
await
PreferenceRollouts
.
getAll
(
)
;
Assert
.
deepEqual
(
rollouts
[
{
slug
:
"
test
-
rollout
"
state
:
PreferenceRollouts
.
STATE_ACTIVE
preferences
:
[
{
preferenceName
:
"
test
.
pref2
"
value
:
2
previousValue
:
null
}
{
preferenceName
:
"
test
.
pref3
"
value
:
2
previousValue
:
null
}
]
}
]
"
Rollout
should
be
updated
in
db
"
)
;
sendEventStub
.
assertEvents
(
[
[
"
enroll
"
"
preference_rollout
"
"
test
-
rollout
"
{
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
[
"
update
"
"
preference_rollout
"
"
test
-
rollout
"
{
previousState
:
"
active
"
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
]
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref1
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref2
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref3
"
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
withSendEventStub
async
function
ungraduate_enrollment
(
sendEventStub
)
{
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
setIntPref
(
"
test
.
pref
"
1
)
;
await
PreferenceRollouts
.
add
(
{
slug
:
"
test
-
rollout
"
state
:
PreferenceRollouts
.
STATE_GRADUATED
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
1
previousValue
:
1
}
]
enrollmentId
:
"
test
-
enrollment
-
id
"
}
)
;
let
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
2
}
]
}
}
;
const
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref
"
)
2
"
pref
should
be
updated
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref
"
)
2
"
startup
pref
should
be
set
"
)
;
const
rollouts
=
await
PreferenceRollouts
.
getAll
(
)
;
Assert
.
deepEqual
(
rollouts
[
{
slug
:
"
test
-
rollout
"
state
:
PreferenceRollouts
.
STATE_ACTIVE
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
2
previousValue
:
1
}
]
}
]
"
Rollout
should
be
updated
in
db
"
)
;
sendEventStub
.
assertEvents
(
[
[
"
update
"
"
preference_rollout
"
"
test
-
rollout
"
{
previousState
:
"
graduated
"
enrollmentId
:
"
test
-
enrollment
-
id
"
}
]
]
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref
"
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
withSendEventStub
async
function
conflicting_recipes
(
sendEventStub
)
{
const
recipe1
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
-
1
"
preferences
:
[
{
preferenceName
:
"
test
.
pref1
"
value
:
1
}
{
preferenceName
:
"
test
.
pref2
"
value
:
1
}
]
}
}
;
const
recipe2
=
{
id
:
2
arguments
:
{
slug
:
"
test
-
rollout
-
2
"
preferences
:
[
{
preferenceName
:
"
test
.
pref1
"
value
:
2
}
{
preferenceName
:
"
test
.
pref3
"
value
:
2
}
]
}
}
;
let
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe1
)
;
await
action
.
runRecipe
(
recipe2
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe2
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref1
"
)
1
"
pref1
is
set
to
recipe1
'
s
value
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref2
"
)
1
"
pref2
is
set
to
recipe1
'
s
value
"
)
;
is
(
Services
.
prefs
.
getPrefType
(
"
test
.
pref3
"
)
Services
.
prefs
.
PREF_INVALID
"
pref3
is
not
set
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref1
"
)
1
"
startup
pref1
is
set
to
recipe1
'
s
value
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref2
"
)
1
"
startup
pref2
is
set
to
recipe1
'
s
value
"
)
;
is
(
Services
.
prefs
.
getPrefType
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref3
"
)
Services
.
prefs
.
PREF_INVALID
"
startup
pref3
is
not
set
"
)
;
const
rollouts
=
await
PreferenceRollouts
.
getAll
(
)
;
Assert
.
deepEqual
(
rollouts
[
{
slug
:
"
test
-
rollout
-
1
"
state
:
PreferenceRollouts
.
STATE_ACTIVE
preferences
:
[
{
preferenceName
:
"
test
.
pref1
"
value
:
1
previousValue
:
null
}
{
preferenceName
:
"
test
.
pref2
"
value
:
1
previousValue
:
null
}
]
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
"
Only
recipe1
'
s
rollout
should
be
stored
in
db
"
)
;
sendEventStub
.
assertEvents
(
[
[
"
enroll
"
"
preference_rollout
"
recipe1
.
arguments
.
slug
]
[
"
enrollFailed
"
"
preference_rollout
"
recipe2
.
arguments
.
slug
{
reason
:
"
conflict
"
preference
:
"
test
.
pref1
"
}
]
[
"
enrollFailed
"
"
preference_rollout
"
recipe2
.
arguments
.
slug
{
reason
:
"
conflict
"
preference
:
"
test
.
pref1
"
}
]
]
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref1
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref2
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref3
"
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
withSendEventStub
async
function
wrong_preference_value
(
sendEventStub
)
{
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
setCharPref
(
"
test
.
pref
"
"
not
an
int
"
)
;
const
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
1
}
]
}
}
;
const
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
is
(
Services
.
prefs
.
getCharPref
(
"
test
.
pref
"
)
"
not
an
int
"
"
the
pref
should
not
be
modified
"
)
;
is
(
Services
.
prefs
.
getPrefType
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref
"
)
Services
.
prefs
.
PREF_INVALID
"
startup
pref
is
not
set
"
)
;
Assert
.
deepEqual
(
await
PreferenceRollouts
.
getAll
(
)
[
]
"
no
rollout
is
stored
in
the
db
"
)
;
sendEventStub
.
assertEvents
(
[
[
"
enrollFailed
"
"
preference_rollout
"
recipe
.
arguments
.
slug
{
reason
:
"
invalid
type
"
preference
:
"
test
.
pref
"
}
]
]
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref
"
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
async
function
preserves_user_prefs
(
)
{
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
setCharPref
(
"
test
.
pref
"
"
builtin
value
"
)
;
Services
.
prefs
.
setCharPref
(
"
test
.
pref
"
"
user
value
"
)
;
const
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
"
rollout
value
"
}
]
}
}
;
const
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
is
(
Services
.
prefs
.
getCharPref
(
"
test
.
pref
"
)
"
user
value
"
"
user
branch
value
should
be
preserved
"
)
;
is
(
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
getCharPref
(
"
test
.
pref
"
)
"
rollout
value
"
"
default
branch
value
should
change
"
)
;
const
rollouts
=
await
PreferenceRollouts
.
getAll
(
)
;
Assert
.
deepEqual
(
rollouts
[
{
slug
:
"
test
-
rollout
"
state
:
PreferenceRollouts
.
STATE_ACTIVE
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
"
rollout
value
"
previousValue
:
"
builtin
value
"
}
]
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
"
the
rollout
is
added
to
the
db
with
the
correct
previous
value
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref
"
)
;
Services
.
prefs
.
deleteBranch
(
"
test
.
pref
"
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
async
function
simple_recipe_enrollment
(
)
{
const
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
1
}
]
}
}
;
Services
.
prefs
.
setIntPref
(
"
test
.
pref
"
2
)
;
const
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref
"
)
2
"
original
user
branch
value
still
visible
"
)
;
is
(
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
getIntPref
(
"
test
.
pref
"
)
1
"
default
branch
was
set
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref
"
)
1
"
startup
pref
is
est
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref
"
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
withSendEventStub
async
function
(
sendEventStub
)
{
const
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
1
}
]
}
}
;
let
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
const
rollouts
=
await
PreferenceRollouts
.
getAll
(
)
;
Assert
.
deepEqual
(
rollouts
[
{
slug
:
"
test
-
rollout
"
state
:
PreferenceRollouts
.
STATE_ACTIVE
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
1
previousValue
:
null
}
]
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
"
the
DB
should
have
the
correct
value
stored
for
previousValue
"
)
;
sendEventStub
.
assertEvents
(
[
[
"
enroll
"
"
preference_rollout
"
"
test
-
rollout
"
{
enrollmentId
:
rollouts
[
0
]
.
enrollmentId
}
]
]
)
;
}
)
;
decorate_task
(
PreferenceRollouts
.
withTestMock
withStub
(
TelemetryEnvironment
"
setExperimentActive
"
)
withSendEventStub
async
function
no_op_new_recipe
(
setExperimentActiveStub
sendEventStub
)
{
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
setIntPref
(
"
test
.
pref
"
1
)
;
const
recipe
=
{
id
:
1
arguments
:
{
slug
:
"
test
-
rollout
"
preferences
:
[
{
preferenceName
:
"
test
.
pref
"
value
:
1
}
]
}
}
;
const
action
=
new
PreferenceRolloutAction
(
)
;
await
action
.
runRecipe
(
recipe
)
;
await
action
.
finalize
(
)
;
is
(
action
.
lastError
null
"
lastError
should
be
null
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
test
.
pref
"
)
1
"
pref
should
not
change
"
)
;
is
(
Services
.
prefs
.
getPrefType
(
"
app
.
normandy
.
startupRolloutPrefs
.
test
.
pref
"
)
Services
.
prefs
.
PREF_INVALID
"
startup
pref1
should
not
be
set
"
)
;
Assert
.
deepEqual
(
await
PreferenceRollouts
.
getAll
(
)
[
]
"
Rollout
should
not
be
stored
in
db
"
)
;
sendEventStub
.
assertEvents
(
[
[
"
enrollFailed
"
"
preference_rollout
"
recipe
.
arguments
.
slug
{
reason
:
"
would
-
be
-
no
-
op
"
}
]
]
)
;
Assert
.
deepEqual
(
setExperimentActiveStub
.
args
[
]
"
a
telemetry
experiment
should
not
be
activated
"
)
;
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
deleteBranch
(
"
test
.
pref
"
)
;
}
)
;
