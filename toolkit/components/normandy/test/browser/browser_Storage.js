"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
Storage
.
jsm
"
this
)
;
add_task
(
async
function
(
)
{
const
store1
=
new
Storage
(
"
prefix1
"
)
;
const
store2
=
new
Storage
(
"
prefix2
"
)
;
Assert
.
equal
(
await
store1
.
getItem
(
"
key
"
)
null
)
;
Assert
.
equal
(
await
store2
.
getItem
(
"
key
"
)
null
)
;
await
store1
.
setItem
(
"
key
"
"
value1
"
)
;
await
store2
.
setItem
(
"
key
"
"
value2
"
)
;
Assert
.
equal
(
await
store1
.
getItem
(
"
key
"
)
"
value1
"
)
;
Assert
.
equal
(
await
store2
.
getItem
(
"
key
"
)
"
value2
"
)
;
await
store1
.
removeItem
(
"
key
"
)
;
await
store2
.
removeItem
(
"
key
"
)
;
Assert
.
equal
(
await
store1
.
getItem
(
"
key
"
)
null
)
;
Assert
.
equal
(
await
store2
.
getItem
(
"
key
"
)
null
)
;
await
store1
.
setItem
(
"
number
"
42
)
;
Assert
.
equal
(
await
store1
.
getItem
(
"
number
"
)
42
)
;
const
complex
=
{
a
:
1
b
:
[
2
3
]
c
:
{
d
:
4
}
}
;
await
store1
.
setItem
(
"
complex
"
complex
)
;
Assert
.
deepEqual
(
await
store1
.
getItem
(
"
complex
"
)
complex
)
;
await
store1
.
setItem
(
"
removeTest
"
1
)
;
await
store2
.
setItem
(
"
removeTest
"
2
)
;
Assert
.
equal
(
await
store1
.
getItem
(
"
removeTest
"
)
1
)
;
Assert
.
equal
(
await
store2
.
getItem
(
"
removeTest
"
)
2
)
;
await
Storage
.
clearAllStorage
(
)
;
Assert
.
equal
(
await
store1
.
getItem
(
"
removeTest
"
)
null
)
;
Assert
.
equal
(
await
store2
.
getItem
(
"
removeTest
"
)
null
)
;
}
)
;
