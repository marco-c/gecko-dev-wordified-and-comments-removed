"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
NormandyUtils
.
jsm
"
this
)
;
const
FIXTURE_ADDON_ID
=
"
normandydriver
-
a
example
.
com
"
;
const
UUID_REGEX
=
/
[
0
-
9a
-
f
]
{
8
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
12
}
/
i
;
var
EXPORTED_SYMBOLS
=
[
"
NormandyTestUtils
"
]
;
let
_addonStudyFactoryId
=
0
;
let
_preferenceStudyFactoryId
=
0
;
let
testGlobals
=
{
}
;
const
NormandyTestUtils
=
{
init
(
{
add_task
}
=
{
}
)
{
testGlobals
.
add_task
=
add_task
;
}
factories
:
{
addonStudyFactory
(
attrs
=
{
}
)
{
for
(
const
key
of
[
"
name
"
"
description
"
]
)
{
if
(
attrs
&
&
attrs
[
key
]
)
{
throw
new
Error
(
{
key
}
is
no
longer
a
valid
key
for
addon
studies
please
update
to
v2
study
schema
)
;
}
}
return
Object
.
assign
(
{
recipeId
:
_addonStudyFactoryId
+
+
slug
:
"
test
-
study
"
userFacingName
:
"
Test
study
"
userFacingDescription
:
"
test
description
"
branch
:
AddonStudies
.
NO_BRANCHES_MARKER
active
:
true
addonId
:
FIXTURE_ADDON_ID
addonUrl
:
"
http
:
/
/
test
/
addon
.
xpi
"
addonVersion
:
"
1
.
0
.
0
"
studyStartDate
:
new
Date
(
)
studyEndDate
:
null
extensionApiId
:
1
extensionHash
:
"
ade1c14196ec4fe0aa0a6ba40ac433d7c8d1ec985581a8a94d43dc58991b5171
"
extensionHashAlgorithm
:
"
sha256
"
enrollmentId
:
NormandyUtils
.
generateUuid
(
)
}
attrs
)
;
}
branchedAddonStudyFactory
(
attrs
=
{
}
)
{
return
NormandyTestUtils
.
factories
.
addonStudyFactory
(
Object
.
assign
(
{
branch
:
"
a
"
}
attrs
)
)
;
}
preferenceStudyFactory
(
attrs
=
{
}
)
{
const
defaultPref
=
{
"
test
.
study
"
:
{
}
}
;
const
defaultPrefInfo
=
{
preferenceValue
:
false
preferenceType
:
"
boolean
"
previousPreferenceValue
:
undefined
preferenceBranchType
:
"
default
"
}
;
const
preferences
=
{
}
;
for
(
const
[
prefName
prefInfo
]
of
Object
.
entries
(
attrs
.
preferences
|
|
defaultPref
)
)
{
preferences
[
prefName
]
=
{
.
.
.
defaultPrefInfo
.
.
.
prefInfo
}
;
}
let
{
userFacingName
=
Test
study
{
_preferenceStudyFactoryId
+
+
}
slug
}
=
attrs
;
delete
attrs
.
slug
;
if
(
userFacingName
&
&
!
slug
)
{
slug
=
userFacingName
.
replace
(
"
"
"
-
"
)
.
toLowerCase
(
)
;
}
return
Object
.
assign
(
{
userFacingName
slug
branch
:
"
control
"
expired
:
false
lastSeen
:
new
Date
(
)
.
toJSON
(
)
experimentType
:
"
exp
"
}
attrs
{
preferences
}
)
;
}
}
decorate
(
.
.
.
args
)
{
const
funcs
=
Array
.
from
(
args
)
;
let
decorated
=
funcs
.
pop
(
)
;
const
origName
=
decorated
.
name
;
funcs
.
reverse
(
)
;
for
(
const
func
of
funcs
)
{
decorated
=
func
(
decorated
)
;
}
Object
.
defineProperty
(
decorated
"
name
"
{
value
:
origName
}
)
;
return
decorated
;
}
decorate_task
(
.
.
.
args
)
{
return
testGlobals
.
add_task
(
NormandyTestUtils
.
decorate
(
.
.
.
args
)
)
;
}
isUuid
(
s
)
{
return
UUID_REGEX
.
test
(
s
)
;
}
}
;
