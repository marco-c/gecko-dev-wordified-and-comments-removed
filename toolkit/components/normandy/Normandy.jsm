"
use
strict
"
;
const
{
Log
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Log
.
sys
.
mjs
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
sys
.
mjs
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
ExperimentManager
:
"
resource
:
/
/
nimbus
/
lib
/
ExperimentManager
.
sys
.
mjs
"
RemoteSettingsExperimentLoader
:
"
resource
:
/
/
nimbus
/
lib
/
RemoteSettingsExperimentLoader
.
sys
.
mjs
"
TelemetryUtils
:
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
AddonRollouts
:
"
resource
:
/
/
normandy
/
lib
/
AddonRollouts
.
jsm
"
AddonStudies
:
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
CleanupManager
:
"
resource
:
/
/
normandy
/
lib
/
CleanupManager
.
jsm
"
LogManager
:
"
resource
:
/
/
normandy
/
lib
/
LogManager
.
jsm
"
NormandyMigrations
:
"
resource
:
/
/
normandy
/
NormandyMigrations
.
jsm
"
PreferenceExperiments
:
"
resource
:
/
/
normandy
/
lib
/
PreferenceExperiments
.
jsm
"
PreferenceRollouts
:
"
resource
:
/
/
normandy
/
lib
/
PreferenceRollouts
.
jsm
"
RecipeRunner
:
"
resource
:
/
/
normandy
/
lib
/
RecipeRunner
.
jsm
"
ShieldPreferences
:
"
resource
:
/
/
normandy
/
lib
/
ShieldPreferences
.
jsm
"
TelemetryEvents
:
"
resource
:
/
/
normandy
/
lib
/
TelemetryEvents
.
jsm
"
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
Normandy
"
]
;
const
UI_AVAILABLE_NOTIFICATION
=
"
sessionstore
-
windows
-
restored
"
;
const
BOOTSTRAP_LOGGER_NAME
=
"
app
.
normandy
.
bootstrap
"
;
const
SHIELD_INIT_NOTIFICATION
=
"
shield
-
init
-
complete
"
;
const
STARTUP_EXPERIMENT_PREFS_BRANCH
=
"
app
.
normandy
.
startupExperimentPrefs
.
"
;
const
STARTUP_ROLLOUT_PREFS_BRANCH
=
"
app
.
normandy
.
startupRolloutPrefs
.
"
;
const
PREF_LOGGING_LEVEL
=
"
app
.
normandy
.
logging
.
level
"
;
const
log
=
Log
.
repository
.
getLogger
(
BOOTSTRAP_LOGGER_NAME
)
;
log
.
addAppender
(
new
Log
.
ConsoleAppender
(
new
Log
.
BasicFormatter
(
)
)
)
;
log
.
level
=
Services
.
prefs
.
getIntPref
(
PREF_LOGGING_LEVEL
Log
.
Level
.
Warn
)
;
var
Normandy
=
{
studyPrefsChanged
:
{
}
rolloutPrefsChanged
:
{
}
defaultPrefsHaveBeenApplied
:
PromiseUtils
.
defer
(
)
uiAvailableNotificationObserved
:
PromiseUtils
.
defer
(
)
async
init
(
{
runAsync
=
true
}
=
{
}
)
{
Services
.
obs
.
addObserver
(
this
UI_AVAILABLE_NOTIFICATION
)
;
Services
.
obs
.
addObserver
(
this
lazy
.
TelemetryUtils
.
TELEMETRY_UPLOAD_DISABLED_TOPIC
)
;
this
.
rolloutPrefsChanged
=
this
.
applyStartupPrefs
(
STARTUP_ROLLOUT_PREFS_BRANCH
)
;
this
.
studyPrefsChanged
=
this
.
applyStartupPrefs
(
STARTUP_EXPERIMENT_PREFS_BRANCH
)
;
this
.
defaultPrefsHaveBeenApplied
.
resolve
(
)
;
await
lazy
.
NormandyMigrations
.
applyAll
(
)
;
if
(
runAsync
)
{
await
Promise
.
race
(
[
this
.
uiAvailableNotificationObserved
.
promise
new
Promise
(
resolve
=
>
setTimeout
(
resolve
5
*
60
*
1000
)
)
]
)
;
}
try
{
Services
.
obs
.
removeObserver
(
this
UI_AVAILABLE_NOTIFICATION
)
;
}
catch
(
e
)
{
}
await
this
.
finishInit
(
)
;
}
async
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
UI_AVAILABLE_NOTIFICATION
)
{
Services
.
obs
.
removeObserver
(
this
UI_AVAILABLE_NOTIFICATION
)
;
this
.
uiAvailableNotificationObserved
.
resolve
(
)
;
}
else
if
(
topic
=
=
=
lazy
.
TelemetryUtils
.
TELEMETRY_UPLOAD_DISABLED_TOPIC
)
{
await
Promise
.
all
(
[
lazy
.
PreferenceExperiments
lazy
.
PreferenceRollouts
lazy
.
AddonStudies
lazy
.
AddonRollouts
]
.
map
(
service
=
>
service
.
onTelemetryDisabled
(
)
)
)
;
}
}
async
finishInit
(
)
{
try
{
lazy
.
TelemetryEvents
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
telemetry
events
:
"
err
)
;
}
await
lazy
.
PreferenceRollouts
.
recordOriginalValues
(
this
.
rolloutPrefsChanged
)
;
await
lazy
.
PreferenceExperiments
.
recordOriginalValues
(
this
.
studyPrefsChanged
)
;
lazy
.
LogManager
.
configure
(
Services
.
prefs
.
getIntPref
(
PREF_LOGGING_LEVEL
Log
.
Level
.
Warn
)
)
;
Services
.
prefs
.
addObserver
(
PREF_LOGGING_LEVEL
lazy
.
LogManager
.
configure
)
;
lazy
.
CleanupManager
.
addCleanupHandler
(
(
)
=
>
Services
.
prefs
.
removeObserver
(
PREF_LOGGING_LEVEL
lazy
.
LogManager
.
configure
)
)
;
try
{
await
lazy
.
ExperimentManager
.
onStartup
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
ExperimentManager
:
"
err
)
;
}
try
{
await
lazy
.
RemoteSettingsExperimentLoader
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
RemoteSettingsExperimentLoader
:
"
err
)
;
}
try
{
await
lazy
.
AddonStudies
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
addon
studies
:
"
err
)
;
}
try
{
await
lazy
.
PreferenceRollouts
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
preference
rollouts
:
"
err
)
;
}
try
{
await
lazy
.
AddonRollouts
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
addon
rollouts
:
"
err
)
;
}
try
{
await
lazy
.
PreferenceExperiments
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
preference
experiments
:
"
err
)
;
}
try
{
lazy
.
ShieldPreferences
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
preferences
UI
:
"
err
)
;
}
await
lazy
.
RecipeRunner
.
init
(
)
;
Services
.
obs
.
notifyObservers
(
null
SHIELD_INIT_NOTIFICATION
)
;
}
async
uninit
(
)
{
await
lazy
.
CleanupManager
.
cleanup
(
)
;
Services
.
prefs
.
removeObserver
(
PREF_LOGGING_LEVEL
lazy
.
LogManager
.
configure
)
;
for
(
const
topic
of
[
lazy
.
TelemetryUtils
.
TELEMETRY_UPLOAD_DISABLED_TOPIC
UI_AVAILABLE_NOTIFICATION
]
)
{
try
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
}
catch
(
e
)
{
}
}
}
applyStartupPrefs
(
sourcePrefix
)
{
const
originalValues
=
{
}
;
const
sourceBranch
=
Services
.
prefs
.
getBranch
(
sourcePrefix
)
;
const
targetBranch
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
for
(
const
prefName
of
sourceBranch
.
getChildList
(
"
"
)
)
{
const
sourcePrefType
=
sourceBranch
.
getPrefType
(
prefName
)
;
const
targetPrefType
=
targetBranch
.
getPrefType
(
prefName
)
;
if
(
targetPrefType
!
=
=
Services
.
prefs
.
PREF_INVALID
&
&
targetPrefType
!
=
=
sourcePrefType
)
{
console
.
error
(
new
Error
(
Error
setting
startup
pref
{
prefName
}
;
pref
type
does
not
match
.
)
)
;
continue
;
}
try
{
switch
(
targetPrefType
)
{
case
Services
.
prefs
.
PREF_STRING
:
{
originalValues
[
prefName
]
=
targetBranch
.
getCharPref
(
prefName
)
;
break
;
}
case
Services
.
prefs
.
PREF_INT
:
{
originalValues
[
prefName
]
=
targetBranch
.
getIntPref
(
prefName
)
;
break
;
}
case
Services
.
prefs
.
PREF_BOOL
:
{
originalValues
[
prefName
]
=
targetBranch
.
getBoolPref
(
prefName
)
;
break
;
}
case
Services
.
prefs
.
PREF_INVALID
:
{
originalValues
[
prefName
]
=
null
;
break
;
}
default
:
{
log
.
error
(
Error
getting
startup
pref
{
prefName
}
;
unknown
value
type
{
sourcePrefType
}
.
)
;
}
}
}
catch
(
e
)
{
if
(
e
.
result
=
=
=
Cr
.
NS_ERROR_UNEXPECTED
)
{
originalValues
[
prefName
]
=
null
;
}
else
{
console
.
error
(
e
)
;
continue
;
}
}
switch
(
sourcePrefType
)
{
case
Services
.
prefs
.
PREF_STRING
:
{
targetBranch
.
setCharPref
(
prefName
sourceBranch
.
getCharPref
(
prefName
)
)
;
break
;
}
case
Services
.
prefs
.
PREF_INT
:
{
targetBranch
.
setIntPref
(
prefName
sourceBranch
.
getIntPref
(
prefName
)
)
;
break
;
}
case
Services
.
prefs
.
PREF_BOOL
:
{
targetBranch
.
setBoolPref
(
prefName
sourceBranch
.
getBoolPref
(
prefName
)
)
;
break
;
}
default
:
{
console
.
error
(
new
Error
(
Error
getting
startup
pref
{
prefName
}
;
unexpected
value
type
{
sourcePrefType
}
.
)
)
;
}
}
}
return
originalValues
;
}
}
;
