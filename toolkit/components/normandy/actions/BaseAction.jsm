ChromeUtils
.
defineModuleGetter
(
this
"
LogManager
"
"
resource
:
/
/
normandy
/
lib
/
LogManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Uptake
"
"
resource
:
/
/
normandy
/
lib
/
Uptake
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
JsonSchemaValidator
"
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
JsonSchemaValidator
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
BaseAction
"
]
;
class
BaseAction
{
constructor
(
)
{
this
.
state
=
BaseAction
.
STATE_PREPARING
;
this
.
log
=
LogManager
.
getLogger
(
action
.
{
this
.
name
}
)
;
this
.
lastError
=
null
;
try
{
this
.
_preExecution
(
)
;
if
(
this
.
state
=
=
=
BaseAction
.
STATE_PREPARING
)
{
this
.
state
=
BaseAction
.
STATE_READY
;
}
}
catch
(
err
)
{
try
{
err
.
message
=
Could
not
initialize
action
{
this
.
name
}
:
{
err
.
message
}
;
}
catch
(
_e
)
{
this
.
log
.
error
(
Could
not
initialize
action
{
this
.
name
}
error
follows
.
)
;
}
this
.
fail
(
err
)
;
}
}
get
schema
(
)
{
return
{
type
:
"
object
"
properties
:
{
}
}
;
}
disable
(
)
{
this
.
state
=
BaseAction
.
STATE_DISABLED
;
}
fail
(
err
)
{
switch
(
this
.
state
)
{
case
BaseAction
.
STATE_PREPARING
:
{
Uptake
.
reportAction
(
this
.
name
Uptake
.
ACTION_PRE_EXECUTION_ERROR
)
;
break
;
}
default
:
{
Cu
.
reportError
(
new
Error
(
"
BaseAction
.
fail
(
)
called
at
unexpected
time
"
)
)
;
}
}
this
.
state
=
BaseAction
.
STATE_FAILED
;
this
.
lastError
=
err
;
Cu
.
reportError
(
err
)
;
}
get
name
(
)
{
return
this
.
constructor
.
name
;
}
_preExecution
(
)
{
}
async
runRecipe
(
recipe
)
{
if
(
this
.
state
=
=
=
BaseAction
.
STATE_FINALIZED
)
{
throw
new
Error
(
"
Action
has
already
been
finalized
"
)
;
}
if
(
this
.
state
!
=
=
BaseAction
.
STATE_READY
)
{
Uptake
.
reportRecipe
(
recipe
.
id
Uptake
.
RECIPE_ACTION_DISABLED
)
;
this
.
log
.
warn
(
Skipping
recipe
{
recipe
.
name
}
because
{
this
.
name
}
was
disabled
during
preExecution
.
)
;
return
;
}
let
[
valid
validatedArguments
]
=
JsonSchemaValidator
.
validateAndParseParameters
(
recipe
.
arguments
this
.
schema
)
;
if
(
!
valid
)
{
Cu
.
reportError
(
new
Error
(
Arguments
do
not
match
schema
.
arguments
:
{
JSON
.
stringify
(
recipe
.
arguments
)
}
.
schema
:
{
JSON
.
stringify
(
this
.
schema
)
}
)
)
;
Uptake
.
reportRecipe
(
recipe
.
id
Uptake
.
RECIPE_EXECUTION_ERROR
)
;
return
;
}
recipe
.
arguments
=
validatedArguments
;
let
status
=
Uptake
.
RECIPE_SUCCESS
;
try
{
await
this
.
_run
(
recipe
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
status
=
Uptake
.
RECIPE_EXECUTION_ERROR
;
}
Uptake
.
reportRecipe
(
recipe
.
id
status
)
;
}
async
_run
(
recipe
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
async
finalize
(
)
{
let
status
;
switch
(
this
.
state
)
{
case
BaseAction
.
STATE_FINALIZED
:
{
throw
new
Error
(
"
Action
has
already
been
finalized
"
)
;
}
case
BaseAction
.
STATE_READY
:
{
try
{
await
this
.
_finalize
(
)
;
status
=
Uptake
.
ACTION_SUCCESS
;
}
catch
(
err
)
{
status
=
Uptake
.
ACTION_POST_EXECUTION_ERROR
;
try
{
err
.
message
=
Could
not
run
postExecution
hook
for
{
this
.
name
}
:
{
err
.
message
}
;
}
catch
(
err
)
{
this
.
log
.
debug
(
Could
not
run
postExecution
hook
for
{
this
.
name
}
)
;
}
this
.
lastError
=
err
;
Cu
.
reportError
(
err
)
;
}
break
;
}
case
BaseAction
.
STATE_DISABLED
:
{
this
.
log
.
debug
(
Skipping
post
-
execution
hook
for
{
this
.
name
}
because
it
is
disabled
.
)
;
status
=
Uptake
.
ACTION_SUCCESS
;
break
;
}
case
BaseAction
.
STATE_FAILED
:
{
this
.
log
.
debug
(
Skipping
post
-
execution
hook
for
{
this
.
name
}
because
it
failed
during
pre
-
execution
.
)
;
break
;
}
default
:
{
throw
new
Error
(
Unexpected
state
during
finalize
:
{
this
.
state
}
)
;
}
}
this
.
state
=
BaseAction
.
STATE_FINALIZED
;
if
(
status
)
{
Uptake
.
reportAction
(
this
.
name
status
)
;
}
}
async
_finalize
(
)
{
}
}
BaseAction
.
STATE_PREPARING
=
"
ACTION_PREPARING
"
;
BaseAction
.
STATE_READY
=
"
ACTION_READY
"
;
BaseAction
.
STATE_DISABLED
=
"
ACTION_DISABLED
"
;
BaseAction
.
STATE_FAILED
=
"
ACTION_FAILED
"
;
BaseAction
.
STATE_FINALIZED
=
"
ACTION_FINALIZED
"
;
