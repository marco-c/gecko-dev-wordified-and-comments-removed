"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
BranchedAddonStudyAction
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
actions
/
BranchedAddonStudyAction
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ActionSchemas
:
"
resource
:
/
/
normandy
/
actions
/
schemas
/
index
.
js
"
AddonStudies
:
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
AddonStudyAction
"
]
;
class
AddonStudyAction
extends
BranchedAddonStudyAction
{
get
schema
(
)
{
return
ActionSchemas
[
"
addon
-
study
"
]
;
}
async
_run
(
recipe
)
{
const
args
=
recipe
.
arguments
;
let
transformedArguments
=
{
slug
:
args
.
name
userFacingName
:
args
.
name
userFacingDescription
:
args
.
description
isEnrollmentPaused
:
!
!
args
.
isEnrollmentPaused
branches
:
[
{
slug
:
AddonStudies
.
NO_BRANCHES_MARKER
ratio
:
1
extensionApiId
:
recipe
.
arguments
.
extensionApiId
}
]
}
;
transformedArguments
=
this
.
validateArguments
(
transformedArguments
ActionSchemas
[
"
branched
-
addon
-
study
"
]
)
;
const
transformedRecipe
=
{
.
.
.
recipe
arguments
:
transformedArguments
}
;
return
super
.
_run
(
transformedRecipe
)
;
}
async
_finalize
(
)
{
const
activeStudies
=
await
AddonStudies
.
getAllActive
(
{
branched
:
AddonStudies
.
FILTER_NOT_BRANCHED
}
)
;
for
(
const
study
of
activeStudies
)
{
if
(
!
this
.
seenRecipeIds
.
has
(
study
.
recipeId
)
)
{
this
.
log
.
debug
(
Stopping
non
-
branched
add
-
on
study
for
recipe
{
study
.
recipeId
}
)
;
try
{
await
this
.
unenroll
(
study
.
recipeId
"
recipe
-
not
-
seen
"
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
}
}
}
