"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
AsyncShutdown
"
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
CleanupManager
"
]
;
class
CleanupManagerClass
{
constructor
(
)
{
this
.
handlers
=
new
Set
(
)
;
this
.
cleanupPromise
=
null
;
}
addCleanupHandler
(
handler
)
{
this
.
handlers
.
add
(
handler
)
;
}
removeCleanupHandler
(
handler
)
{
this
.
handlers
.
delete
(
handler
)
;
}
async
cleanup
(
)
{
if
(
this
.
cleanupPromise
=
=
=
null
)
{
this
.
cleanupPromise
=
(
async
(
)
=
>
{
for
(
const
handler
of
this
.
handlers
)
{
try
{
await
handler
(
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
)
(
)
;
lazy
.
AsyncShutdown
.
profileBeforeChange
.
addBlocker
(
"
ShieldRecipeClient
:
Cleaning
up
"
this
.
cleanupPromise
)
;
}
return
this
.
cleanupPromise
;
}
}
var
CleanupManager
=
new
CleanupManagerClass
(
)
;
