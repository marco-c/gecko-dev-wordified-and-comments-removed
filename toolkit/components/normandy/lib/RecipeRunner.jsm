"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
LogManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
LogManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
timerManager
"
"
mozilla
.
org
/
updates
/
timer
-
manager
;
1
"
"
nsIUpdateTimerManager
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
FeatureGate
:
"
resource
:
/
/
featuregates
/
FeatureGate
.
jsm
"
Storage
:
"
resource
:
/
/
normandy
/
lib
/
Storage
.
jsm
"
FilterExpressions
:
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
FilterExpressions
.
jsm
"
NormandyApi
:
"
resource
:
/
/
normandy
/
lib
/
NormandyApi
.
jsm
"
ClientEnvironment
:
"
resource
:
/
/
normandy
/
lib
/
ClientEnvironment
.
jsm
"
CleanupManager
:
"
resource
:
/
/
normandy
/
lib
/
CleanupManager
.
jsm
"
Uptake
:
"
resource
:
/
/
normandy
/
lib
/
Uptake
.
jsm
"
ActionsManager
:
"
resource
:
/
/
normandy
/
lib
/
ActionsManager
.
jsm
"
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
RecipeRunner
"
]
;
const
log
=
LogManager
.
getLogger
(
"
recipe
-
runner
"
)
;
const
TIMER_NAME
=
"
recipe
-
client
-
addon
-
run
"
;
const
REMOTE_SETTINGS_COLLECTION
=
"
normandy
-
recipes
"
;
const
PREF_CHANGED_TOPIC
=
"
nsPref
:
changed
"
;
const
TELEMETRY_ENABLED_PREF
=
"
datareporting
.
healthreport
.
uploadEnabled
"
;
const
PREF_PREFIX
=
"
app
.
normandy
"
;
const
RUN_INTERVAL_PREF
=
{
PREF_PREFIX
}
.
run_interval_seconds
;
const
FIRST_RUN_PREF
=
{
PREF_PREFIX
}
.
first_run
;
const
SHIELD_ENABLED_PREF
=
{
PREF_PREFIX
}
.
enabled
;
const
DEV_MODE_PREF
=
{
PREF_PREFIX
}
.
dev_mode
;
const
API_URL_PREF
=
{
PREF_PREFIX
}
.
api_url
;
const
LAZY_CLASSIFY_PREF
=
{
PREF_PREFIX
}
.
experiments
.
lazy_classify
;
const
TIMER_LAST_UPDATE_PREF
=
app
.
update
.
lastUpdateTime
.
{
TIMER_NAME
}
;
const
PREFS_TO_WATCH
=
[
RUN_INTERVAL_PREF
TELEMETRY_ENABLED_PREF
SHIELD_ENABLED_PREF
API_URL_PREF
]
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gRemoteSettingsClient
"
(
)
=
>
{
return
RemoteSettings
(
REMOTE_SETTINGS_COLLECTION
{
filterFunc
:
async
entry
=
>
(
await
RecipeRunner
.
checkFilter
(
entry
.
recipe
)
)
?
entry
:
null
}
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gRemoteSettingsGate
"
(
)
=
>
{
return
FeatureGate
.
fromId
(
"
normandy
-
remote
-
settings
"
)
;
}
)
;
function
cacheProxy
(
target
)
{
const
cache
=
new
Map
(
)
;
return
new
Proxy
(
target
{
get
(
target
prop
receiver
)
{
if
(
!
cache
.
has
(
prop
)
)
{
cache
.
set
(
prop
target
[
prop
]
)
;
}
return
cache
.
get
(
prop
)
;
}
}
)
;
}
var
RecipeRunner
=
{
async
init
(
)
{
this
.
running
=
false
;
this
.
enabled
=
null
;
this
.
loadFromRemoteSettings
=
false
;
this
.
checkPrefs
(
)
;
this
.
watchPrefs
(
)
;
await
this
.
setUpRemoteSettings
(
)
;
const
firstRun
=
Services
.
prefs
.
getBoolPref
(
FIRST_RUN_PREF
true
)
;
const
devMode
=
Services
.
prefs
.
getBoolPref
(
DEV_MODE_PREF
false
)
;
if
(
this
.
enabled
&
&
(
devMode
|
|
firstRun
)
)
{
if
(
devMode
)
{
let
remoteSettingsGate
=
await
gRemoteSettingsGate
;
if
(
await
remoteSettingsGate
.
isEnabled
(
)
)
{
await
gRemoteSettingsClient
.
sync
(
)
;
}
}
await
this
.
run
(
)
;
}
if
(
firstRun
)
{
Services
.
prefs
.
setBoolPref
(
FIRST_RUN_PREF
false
)
;
}
}
enable
(
)
{
if
(
this
.
enabled
)
{
return
;
}
this
.
registerTimer
(
)
;
this
.
enabled
=
true
;
}
disable
(
)
{
if
(
this
.
enabled
)
{
this
.
unregisterTimer
(
)
;
}
this
.
enabled
=
false
;
}
watchPrefs
(
)
{
for
(
const
pref
of
PREFS_TO_WATCH
)
{
Services
.
prefs
.
addObserver
(
pref
this
)
;
}
CleanupManager
.
addCleanupHandler
(
this
.
unwatchPrefs
.
bind
(
this
)
)
;
}
unwatchPrefs
(
)
{
for
(
const
pref
of
PREFS_TO_WATCH
)
{
Services
.
prefs
.
removeObserver
(
pref
this
)
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
PREF_CHANGED_TOPIC
:
{
const
prefName
=
data
;
switch
(
prefName
)
{
case
RUN_INTERVAL_PREF
:
this
.
updateRunInterval
(
)
;
break
;
case
TELEMETRY_ENABLED_PREF
:
case
SHIELD_ENABLED_PREF
:
case
API_URL_PREF
:
this
.
checkPrefs
(
)
;
break
;
default
:
log
.
debug
(
Observer
fired
with
unexpected
pref
change
:
{
prefName
}
)
;
}
break
;
}
}
}
checkPrefs
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
TELEMETRY_ENABLED_PREF
)
)
{
log
.
debug
(
"
Disabling
RecipeRunner
because
Unified
Telemetry
is
disabled
.
"
)
;
this
.
disable
(
)
;
return
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
SHIELD_ENABLED_PREF
)
)
{
log
.
debug
(
Disabling
Shield
because
{
SHIELD_ENABLED_PREF
}
is
set
to
false
)
;
this
.
disable
(
)
;
return
;
}
if
(
!
Services
.
policies
.
isAllowed
(
"
Shield
"
)
)
{
log
.
debug
(
"
Disabling
Shield
because
it
'
s
blocked
by
policy
.
"
)
;
this
.
disable
(
)
;
return
;
}
const
apiUrl
=
Services
.
prefs
.
getCharPref
(
API_URL_PREF
)
;
if
(
!
apiUrl
)
{
log
.
warn
(
Disabling
Shield
because
{
API_URL_PREF
}
is
not
set
.
)
;
this
.
disable
(
)
;
return
;
}
if
(
!
apiUrl
.
startsWith
(
"
https
:
/
/
"
)
)
{
log
.
warn
(
Disabling
Shield
because
{
API_URL_PREF
}
is
not
an
HTTPS
url
:
{
apiUrl
}
.
)
;
this
.
disable
(
)
;
return
;
}
log
.
debug
(
Enabling
Shield
)
;
this
.
enable
(
)
;
}
registerTimer
(
)
{
this
.
updateRunInterval
(
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
timerManager
.
unregisterTimer
(
TIMER_NAME
)
)
;
}
unregisterTimer
(
)
{
timerManager
.
unregisterTimer
(
TIMER_NAME
)
;
}
async
setUpRemoteSettings
(
)
{
const
remoteSettingsGate
=
await
gRemoteSettingsGate
;
if
(
await
remoteSettingsGate
.
isEnabled
(
)
)
{
this
.
attachRemoteSettings
(
)
;
}
const
observer
=
{
onEnable
:
this
.
attachRemoteSettings
.
bind
(
this
)
onDisable
:
this
.
detachRemoteSettings
.
bind
(
this
)
}
;
remoteSettingsGate
.
addObserver
(
observer
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
remoteSettingsGate
.
removeObserver
(
observer
)
)
;
}
attachRemoteSettings
(
)
{
this
.
loadFromRemoteSettings
=
true
;
if
(
!
this
.
_onSync
)
{
this
.
_onSync
=
async
(
)
=
>
{
if
(
!
this
.
enabled
)
{
return
;
}
this
.
run
(
{
trigger
:
"
sync
"
}
)
;
}
;
gRemoteSettingsClient
.
on
(
"
sync
"
this
.
_onSync
)
;
}
}
detachRemoteSettings
(
)
{
this
.
loadFromRemoteSettings
=
false
;
if
(
this
.
_onSync
)
{
gRemoteSettingsClient
.
off
(
"
sync
"
this
.
_onSync
)
;
}
this
.
_onSync
=
null
;
}
updateRunInterval
(
)
{
const
runInterval
=
Services
.
prefs
.
getIntPref
(
RUN_INTERVAL_PREF
)
;
timerManager
.
registerTimer
(
TIMER_NAME
(
)
=
>
this
.
run
(
)
runInterval
)
;
}
async
run
(
options
=
{
}
)
{
const
{
trigger
=
"
timer
"
}
=
options
;
if
(
this
.
running
)
{
return
;
}
try
{
this
.
running
=
true
;
Services
.
obs
.
notifyObservers
(
null
"
recipe
-
runner
:
start
"
)
;
this
.
clearCaches
(
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
LAZY_CLASSIFY_PREF
false
)
)
{
try
{
await
ClientEnvironment
.
getClientClassification
(
)
;
}
catch
(
err
)
{
}
}
let
recipesToRun
;
try
{
recipesToRun
=
await
this
.
loadRecipes
(
)
;
}
catch
(
e
)
{
let
status
=
Uptake
.
RUNNER_SERVER_ERROR
;
if
(
/
NetworkError
/
.
test
(
e
)
)
{
status
=
Uptake
.
RUNNER_NETWORK_ERROR
;
}
else
if
(
e
instanceof
NormandyApi
.
InvalidSignatureError
)
{
status
=
Uptake
.
RUNNER_INVALID_SIGNATURE
;
}
await
Uptake
.
reportRunner
(
status
)
;
return
;
}
const
actions
=
new
ActionsManager
(
)
;
if
(
recipesToRun
.
length
=
=
=
0
)
{
log
.
debug
(
"
No
recipes
to
execute
"
)
;
}
else
{
for
(
const
recipe
of
recipesToRun
)
{
await
actions
.
runRecipe
(
recipe
)
;
}
}
await
actions
.
finalize
(
)
;
await
Uptake
.
reportRunner
(
Uptake
.
RUNNER_SUCCESS
)
;
Services
.
obs
.
notifyObservers
(
null
"
recipe
-
runner
:
end
"
)
;
}
finally
{
this
.
running
=
false
;
if
(
trigger
!
=
"
timer
"
)
{
const
lastUpdateTime
=
Math
.
round
(
Date
.
now
(
)
/
1000
)
;
Services
.
prefs
.
setIntPref
(
TIMER_LAST_UPDATE_PREF
lastUpdateTime
)
;
}
}
}
async
loadRecipes
(
)
{
if
(
this
.
loadFromRemoteSettings
)
{
const
entries
=
await
gRemoteSettingsClient
.
get
(
)
;
return
Promise
.
all
(
entries
.
map
(
async
(
{
recipe
signature
}
)
=
>
{
await
NormandyApi
.
verifyObjectSignature
(
recipe
signature
"
recipe
"
)
;
return
recipe
;
}
)
)
;
}
let
recipes
;
try
{
recipes
=
await
NormandyApi
.
fetchRecipes
(
{
enabled
:
true
}
)
;
log
.
debug
(
Fetched
{
recipes
.
length
}
recipes
from
the
server
:
+
recipes
.
map
(
r
=
>
r
.
name
)
.
join
(
"
"
)
)
;
}
catch
(
e
)
{
const
apiUrl
=
Services
.
prefs
.
getCharPref
(
API_URL_PREF
)
;
log
.
error
(
Could
not
fetch
recipes
from
{
apiUrl
}
:
"
{
e
}
"
)
;
throw
e
;
}
const
recipesToRun
=
[
]
;
for
(
const
recipe
of
recipes
)
{
if
(
await
this
.
checkFilter
(
recipe
)
)
{
recipesToRun
.
push
(
recipe
)
;
}
}
return
recipesToRun
;
}
getFilterContext
(
recipe
)
{
const
environment
=
cacheProxy
(
ClientEnvironment
)
;
environment
.
recipe
=
{
id
:
recipe
.
id
arguments
:
recipe
.
arguments
}
;
return
{
env
:
environment
normandy
:
environment
}
;
}
async
checkFilter
(
recipe
)
{
const
context
=
this
.
getFilterContext
(
recipe
)
;
let
result
;
try
{
result
=
await
FilterExpressions
.
eval
(
recipe
.
filter_expression
context
)
;
}
catch
(
err
)
{
log
.
error
(
Error
checking
filter
for
"
{
recipe
.
name
}
"
.
Filter
:
[
{
recipe
.
filter_expression
}
]
.
Error
:
"
{
err
}
"
)
;
await
Uptake
.
reportRecipe
(
recipe
Uptake
.
RECIPE_FILTER_BROKEN
)
;
return
false
;
}
if
(
!
result
)
{
await
Uptake
.
reportRecipe
(
recipe
Uptake
.
RECIPE_DIDNT_MATCH_FILTER
)
;
return
false
;
}
return
true
;
}
clearCaches
(
)
{
ClientEnvironment
.
clearClassifyCache
(
)
;
NormandyApi
.
clearIndexCache
(
)
;
}
async
testRun
(
baseApiUrl
)
{
const
oldApiUrl
=
Services
.
prefs
.
getCharPref
(
API_URL_PREF
)
;
Services
.
prefs
.
setCharPref
(
API_URL_PREF
baseApiUrl
)
;
try
{
Storage
.
clearAllStorage
(
)
;
this
.
clearCaches
(
)
;
await
this
.
run
(
)
;
}
finally
{
Services
.
prefs
.
setCharPref
(
API_URL_PREF
oldApiUrl
)
;
this
.
clearCaches
(
)
;
}
}
get
_remoteSettingsClientForTesting
(
)
{
return
gRemoteSettingsClient
;
}
}
;
