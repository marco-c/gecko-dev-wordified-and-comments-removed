"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NormandyApi
"
"
resource
:
/
/
normandy
/
lib
/
NormandyApi
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ClientEnvironmentBase
"
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
ClientEnvironment
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PreferenceExperiments
"
"
resource
:
/
/
normandy
/
lib
/
PreferenceExperiments
.
jsm
"
)
;
const
{
generateUUID
}
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
var
EXPORTED_SYMBOLS
=
[
"
ClientEnvironment
"
]
;
let
_classifyRequest
=
null
;
class
ClientEnvironment
extends
ClientEnvironmentBase
{
static
async
getClientClassification
(
)
{
if
(
!
_classifyRequest
)
{
_classifyRequest
=
NormandyApi
.
classifyClient
(
)
;
}
return
_classifyRequest
;
}
static
clearClassifyCache
(
)
{
_classifyRequest
=
null
;
}
static
withMockClassify
(
data
testFunction
)
{
return
async
function
inner
(
)
{
const
oldRequest
=
_classifyRequest
;
_classifyRequest
=
Promise
.
resolve
(
data
)
;
await
testFunction
(
)
;
_classifyRequest
=
oldRequest
;
}
;
}
static
get
userId
(
)
{
let
id
=
Services
.
prefs
.
getCharPref
(
"
app
.
normandy
.
user_id
"
"
"
)
;
if
(
!
id
)
{
id
=
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
Services
.
prefs
.
setCharPref
(
"
app
.
normandy
.
user_id
"
id
)
;
}
return
id
;
}
static
get
country
(
)
{
return
(
async
(
)
=
>
{
const
{
country
}
=
await
ClientEnvironment
.
getClientClassification
(
)
;
return
country
;
}
)
(
)
;
}
static
get
request_time
(
)
{
return
(
async
(
)
=
>
{
const
{
request_time
}
=
await
ClientEnvironment
.
getClientClassification
(
)
;
return
request_time
;
}
)
(
)
;
}
static
get
experiments
(
)
{
return
(
async
(
)
=
>
{
const
names
=
{
all
:
[
]
active
:
[
]
expired
:
[
]
}
;
for
(
const
experiment
of
await
PreferenceExperiments
.
getAll
(
)
)
{
names
.
all
.
push
(
experiment
.
name
)
;
if
(
experiment
.
expired
)
{
names
.
expired
.
push
(
experiment
.
name
)
;
}
else
{
names
.
active
.
push
(
experiment
.
name
)
;
}
}
return
names
;
}
)
(
)
;
}
static
get
isFirstRun
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
app
.
normandy
.
first_run
"
true
)
;
}
}
