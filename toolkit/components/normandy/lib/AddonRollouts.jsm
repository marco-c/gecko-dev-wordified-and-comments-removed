"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
IndexedDB
"
"
resource
:
/
/
gre
/
modules
/
IndexedDB
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
TelemetryEnvironment
"
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
TelemetryEvents
"
"
resource
:
/
/
normandy
/
lib
/
TelemetryEvents
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
AddonRollouts
"
]
;
const
DB_NAME
=
"
normandy
-
addon
-
rollout
"
;
const
STORE_NAME
=
"
addon
-
rollouts
"
;
const
DB_OPTIONS
=
{
version
:
1
}
;
function
openDatabase
(
)
{
return
lazy
.
IndexedDB
.
open
(
DB_NAME
DB_OPTIONS
db
=
>
{
db
.
createObjectStore
(
STORE_NAME
{
keyPath
:
"
slug
"
}
)
;
}
)
;
}
let
databasePromise
;
function
getDatabase
(
)
{
if
(
!
databasePromise
)
{
databasePromise
=
openDatabase
(
)
;
}
return
databasePromise
;
}
function
getStore
(
db
mode
)
{
if
(
!
mode
)
{
throw
new
Error
(
"
mode
is
required
"
)
;
}
return
db
.
objectStore
(
STORE_NAME
mode
)
;
}
const
AddonRollouts
=
{
STATE_ACTIVE
:
"
active
"
STATE_ROLLED_BACK
:
"
rolled
-
back
"
async
init
(
)
{
for
(
const
rollout
of
await
this
.
getAllActive
(
)
)
{
lazy
.
TelemetryEnvironment
.
setExperimentActive
(
rollout
.
slug
rollout
.
state
{
type
:
"
normandy
-
addonrollout
"
}
)
;
}
}
async
onTelemetryDisabled
(
)
{
const
rollouts
=
await
this
.
getAll
(
)
;
for
(
const
rollout
of
rollouts
)
{
rollout
.
enrollmentId
=
lazy
.
TelemetryEvents
.
NO_ENROLLMENT_ID_MARKER
;
}
await
this
.
updateMany
(
rollouts
)
;
}
async
add
(
rollout
)
{
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readwrite
"
)
.
add
(
rollout
)
;
}
async
update
(
rollout
)
{
if
(
!
(
await
this
.
has
(
rollout
.
slug
)
)
)
{
throw
new
Error
(
Tried
to
update
{
rollout
.
slug
}
but
it
doesn
'
t
already
exist
.
)
;
}
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readwrite
"
)
.
put
(
rollout
)
;
}
async
updateMany
(
rollouts
)
{
if
(
!
rollouts
.
length
)
{
return
;
}
const
db
=
await
getDatabase
(
)
;
let
store
=
await
getStore
(
db
"
readonly
"
)
;
await
Promise
.
all
(
rollouts
.
map
(
async
(
{
slug
}
)
=
>
{
let
existingRollout
=
await
store
.
get
(
slug
)
;
if
(
!
existingRollout
)
{
throw
new
Error
(
Tried
to
update
{
slug
}
but
it
doesn
'
t
exist
.
)
;
}
}
)
)
;
store
=
await
getStore
(
db
"
readwrite
"
)
;
await
Promise
.
all
(
rollouts
.
map
(
rollout
=
>
store
.
put
(
rollout
)
)
)
;
}
async
has
(
slug
)
{
const
db
=
await
getDatabase
(
)
;
const
rollout
=
await
getStore
(
db
"
readonly
"
)
.
get
(
slug
)
;
return
!
!
rollout
;
}
async
get
(
slug
)
{
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readonly
"
)
.
get
(
slug
)
;
}
async
getAll
(
)
{
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readonly
"
)
.
getAll
(
)
;
}
async
getAllActive
(
)
{
const
rollouts
=
await
this
.
getAll
(
)
;
return
rollouts
.
filter
(
rollout
=
>
rollout
.
state
=
=
=
this
.
STATE_ACTIVE
)
;
}
withTestMock
(
)
{
return
function
(
testFunction
)
{
return
async
function
inner
(
.
.
.
args
)
{
let
db
=
await
getDatabase
(
)
;
const
oldData
=
await
getStore
(
db
"
readonly
"
)
.
getAll
(
)
;
await
getStore
(
db
"
readwrite
"
)
.
clear
(
)
;
try
{
await
testFunction
(
.
.
.
args
)
;
}
finally
{
db
=
await
getDatabase
(
)
;
await
getStore
(
db
"
readwrite
"
)
.
clear
(
)
;
const
store
=
getStore
(
db
"
readwrite
"
)
;
await
Promise
.
all
(
oldData
.
map
(
d
=
>
store
.
add
(
d
)
)
)
;
}
}
;
}
;
}
}
;
