"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CleanupManager
"
"
resource
:
/
/
normandy
/
lib
/
CleanupManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
JSONFile
"
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LogManager
"
"
resource
:
/
/
normandy
/
lib
/
LogManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryEnvironment
"
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryEvents
"
"
resource
:
/
/
normandy
/
lib
/
TelemetryEvents
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
PreferenceExperiments
"
"
migrateStorage
"
]
;
const
EXPERIMENT_FILE
=
"
shield
-
preference
-
experiments
.
json
"
;
const
STARTUP_EXPERIMENT_PREFS_BRANCH
=
"
app
.
normandy
.
startupExperimentPrefs
.
"
;
const
MAX_EXPERIMENT_TYPE_LENGTH
=
20
;
const
EXPERIMENT_TYPE_PREFIX
=
"
normandy
-
"
;
const
MAX_EXPERIMENT_SUBTYPE_LENGTH
=
MAX_EXPERIMENT_TYPE_LENGTH
-
EXPERIMENT_TYPE_PREFIX
.
length
;
const
PREFERENCE_TYPE_MAP
=
{
boolean
:
Services
.
prefs
.
PREF_BOOL
string
:
Services
.
prefs
.
PREF_STRING
integer
:
Services
.
prefs
.
PREF_INT
}
;
const
UserPreferences
=
Services
.
prefs
;
const
DefaultPreferences
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
const
PreferenceBranchType
=
{
user
:
UserPreferences
default
:
DefaultPreferences
}
;
let
gStorePromise
;
function
ensureStorage
(
)
{
if
(
gStorePromise
=
=
=
undefined
)
{
const
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
EXPERIMENT_FILE
)
;
const
storage
=
new
JSONFile
(
{
path
}
)
;
gStorePromise
=
storage
.
load
(
)
.
then
(
(
)
=
>
{
migrateStorage
(
storage
)
;
return
storage
;
}
)
;
}
return
gStorePromise
;
}
function
migrateStorage
(
storage
)
{
if
(
storage
.
data
.
__version
=
=
3
)
{
return
;
}
const
oldVersion
=
storage
.
data
.
__version
|
|
1
;
if
(
oldVersion
=
=
1
)
{
storage
.
data
=
{
__version
:
2
experiments
:
storage
.
data
}
;
const
oldExperiments
=
storage
.
data
.
experiments
;
const
v2Experiments
=
{
}
;
for
(
let
[
expName
experiment
]
of
Object
.
entries
(
oldExperiments
)
)
{
if
(
expName
=
=
"
__version
"
)
{
continue
;
}
const
{
name
branch
expired
lastSeen
preferenceName
preferenceValue
preferenceType
previousPreferenceValue
preferenceBranchType
experimentType
}
=
experiment
;
const
newExperiment
=
{
name
branch
expired
lastSeen
preferences
:
{
[
preferenceName
]
:
{
preferenceBranchType
preferenceType
preferenceValue
previousPreferenceValue
}
}
experimentType
}
;
v2Experiments
[
expName
]
=
newExperiment
;
}
storage
.
data
.
experiments
=
v2Experiments
;
}
if
(
oldVersion
<
=
2
)
{
for
(
const
experiment
of
Object
.
values
(
storage
.
data
.
experiments
)
)
{
if
(
!
experiment
.
actionName
)
{
experiment
.
actionName
=
"
SinglePreferenceExperimentAction
"
;
}
}
storage
.
data
.
__version
=
3
;
}
}
const
log
=
LogManager
.
getLogger
(
"
preference
-
experiments
"
)
;
let
experimentObservers
=
new
Map
(
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
PreferenceExperiments
.
stopAllObservers
(
)
)
;
function
getPref
(
prefBranch
prefName
prefType
)
{
if
(
prefBranch
.
getPrefType
(
prefName
)
=
=
=
0
)
{
return
null
;
}
switch
(
prefType
)
{
case
"
boolean
"
:
{
return
prefBranch
.
getBoolPref
(
prefName
)
;
}
case
"
string
"
:
return
prefBranch
.
getStringPref
(
prefName
)
;
case
"
integer
"
:
return
prefBranch
.
getIntPref
(
prefName
)
;
default
:
throw
new
TypeError
(
Unexpected
preference
type
(
{
prefType
}
)
for
{
prefName
}
.
)
;
}
}
function
setPref
(
prefBranch
prefName
prefType
prefValue
)
{
switch
(
prefType
)
{
case
"
boolean
"
:
prefBranch
.
setBoolPref
(
prefName
prefValue
)
;
break
;
case
"
string
"
:
prefBranch
.
setStringPref
(
prefName
prefValue
)
;
break
;
case
"
integer
"
:
prefBranch
.
setIntPref
(
prefName
prefValue
)
;
break
;
default
:
throw
new
TypeError
(
Unexpected
preference
type
(
{
prefType
}
)
for
{
prefName
}
.
)
;
}
}
var
PreferenceExperiments
=
{
async
recordOriginalValues
(
studyPrefsChanged
)
{
const
store
=
await
ensureStorage
(
)
;
for
(
const
experiment
of
Object
.
values
(
store
.
data
.
experiments
)
)
{
for
(
const
[
prefName
prefInfo
]
of
Object
.
entries
(
experiment
.
preferences
)
)
{
if
(
studyPrefsChanged
.
hasOwnProperty
(
prefName
)
)
{
if
(
experiment
.
expired
)
{
log
.
warn
(
"
Expired
preference
experiment
changed
value
during
startup
"
)
;
}
if
(
prefInfo
.
preferenceBranch
!
=
=
"
default
"
)
{
log
.
warn
(
"
Non
-
default
branch
preference
experiment
changed
value
during
startup
"
)
;
}
prefInfo
.
previousPreferenceValue
=
studyPrefsChanged
[
prefName
]
;
}
}
}
}
async
init
(
)
{
CleanupManager
.
addCleanupHandler
(
this
.
saveStartupPrefs
.
bind
(
this
)
)
;
for
(
const
experiment
of
await
this
.
getAllActive
(
)
)
{
let
stopped
=
false
;
for
(
const
[
prefName
prefInfo
]
of
Object
.
entries
(
experiment
.
preferences
)
)
{
if
(
getPref
(
UserPreferences
prefName
prefInfo
.
preferenceType
)
!
=
=
prefInfo
.
preferenceValue
)
{
log
.
info
(
Stopping
experiment
"
{
experiment
.
name
}
"
because
its
value
changed
)
;
await
this
.
stop
(
experiment
.
name
{
resetValue
:
false
reason
:
"
user
-
preference
-
changed
-
sideload
"
}
)
;
stopped
=
true
;
break
;
}
}
if
(
stopped
)
{
continue
;
}
TelemetryEnvironment
.
setExperimentActive
(
experiment
.
name
experiment
.
branch
{
type
:
EXPERIMENT_TYPE_PREFIX
+
experiment
.
experimentType
}
)
;
this
.
startObserver
(
experiment
.
name
experiment
.
preferences
)
;
}
}
async
saveStartupPrefs
(
)
{
const
prefBranch
=
Services
.
prefs
.
getBranch
(
STARTUP_EXPERIMENT_PREFS_BRANCH
)
;
for
(
const
pref
of
prefBranch
.
getChildList
(
"
"
)
)
{
prefBranch
.
clearUserPref
(
pref
)
;
}
const
allExperiments
=
await
this
.
getAllActive
(
)
;
const
defaultBranchPrefs
=
allExperiments
.
flatMap
(
exp
=
>
Object
.
entries
(
exp
.
preferences
)
)
.
filter
(
(
[
preferenceName
preferenceInfo
]
)
=
>
preferenceInfo
.
preferenceBranchType
=
=
=
"
default
"
)
;
for
(
const
[
preferenceName
{
preferenceValue
}
]
of
defaultBranchPrefs
)
{
switch
(
typeof
preferenceValue
)
{
case
"
string
"
:
prefBranch
.
setCharPref
(
preferenceName
preferenceValue
)
;
break
;
case
"
number
"
:
prefBranch
.
setIntPref
(
preferenceName
preferenceValue
)
;
break
;
case
"
boolean
"
:
prefBranch
.
setBoolPref
(
preferenceName
preferenceValue
)
;
break
;
default
:
throw
new
Error
(
Invalid
preference
type
{
typeof
preferenceValue
}
)
;
}
}
}
withMockExperiments
(
mockExperiments
=
[
]
)
{
return
function
wrapper
(
testFunction
)
{
return
async
function
wrappedTestFunction
(
.
.
.
args
)
{
const
experiments
=
{
}
;
for
(
const
exp
of
mockExperiments
)
{
experiments
[
exp
.
name
]
=
exp
;
}
const
data
=
{
__version
:
2
experiments
}
;
const
oldPromise
=
gStorePromise
;
gStorePromise
=
Promise
.
resolve
(
{
data
saveSoon
(
)
{
}
}
)
;
const
oldObservers
=
experimentObservers
;
experimentObservers
=
new
Map
(
)
;
try
{
await
testFunction
(
.
.
.
args
mockExperiments
)
;
}
finally
{
gStorePromise
=
oldPromise
;
PreferenceExperiments
.
stopAllObservers
(
)
;
experimentObservers
=
oldObservers
;
}
}
;
}
;
}
async
clearAllExperimentStorage
(
)
{
const
store
=
await
ensureStorage
(
)
;
store
.
data
=
{
__version
:
2
experiments
:
{
}
}
;
store
.
saveSoon
(
)
;
}
async
start
(
{
name
branch
preferences
experimentType
=
"
exp
"
userFacingName
=
null
userFacingDescription
=
null
}
)
{
log
.
debug
(
PreferenceExperiments
.
start
(
{
name
}
{
branch
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
if
(
name
in
store
.
data
.
experiments
)
{
TelemetryEvents
.
sendEvent
(
"
enrollFailed
"
"
preference_study
"
name
{
reason
:
"
name
-
conflict
"
}
)
;
throw
new
Error
(
A
preference
experiment
named
"
{
name
}
"
already
exists
.
)
;
}
const
activeExperiments
=
Object
.
values
(
store
.
data
.
experiments
)
.
filter
(
e
=
>
!
e
.
expired
)
;
const
preferencesWithConflicts
=
Object
.
keys
(
preferences
)
.
filter
(
preferenceName
=
>
{
return
activeExperiments
.
some
(
e
=
>
e
.
preferences
.
hasOwnProperty
(
preferenceName
)
)
;
}
)
;
if
(
preferencesWithConflicts
.
length
>
0
)
{
TelemetryEvents
.
sendEvent
(
"
enrollFailed
"
"
preference_study
"
name
{
reason
:
"
pref
-
conflict
"
}
)
;
throw
new
Error
(
Another
preference
experiment
for
the
pref
"
{
preferencesWithConflicts
[
0
]
}
"
is
currently
active
.
)
;
}
if
(
experimentType
.
length
>
MAX_EXPERIMENT_SUBTYPE_LENGTH
)
{
TelemetryEvents
.
sendEvent
(
"
enrollFailed
"
"
preference_study
"
name
{
reason
:
"
experiment
-
type
-
too
-
long
"
}
)
;
throw
new
Error
(
experimentType
must
be
less
than
{
MAX_EXPERIMENT_SUBTYPE_LENGTH
}
characters
.
+
"
{
experimentType
}
"
is
{
experimentType
.
length
}
long
.
)
;
}
for
(
const
[
preferenceName
preferenceInfo
]
of
Object
.
entries
(
preferences
)
)
{
const
{
preferenceBranchType
preferenceType
}
=
preferenceInfo
;
const
preferenceBranch
=
PreferenceBranchType
[
preferenceBranchType
]
;
if
(
!
preferenceBranch
)
{
TelemetryEvents
.
sendEvent
(
"
enrollFailed
"
"
preference_study
"
name
{
reason
:
"
invalid
-
branch
"
}
)
;
throw
new
Error
(
Invalid
value
for
preferenceBranchType
:
{
preferenceBranchType
}
)
;
}
const
prevPrefType
=
Services
.
prefs
.
getPrefType
(
preferenceName
)
;
const
givenPrefType
=
PREFERENCE_TYPE_MAP
[
preferenceType
]
;
if
(
!
preferenceType
|
|
!
givenPrefType
)
{
TelemetryEvents
.
sendEvent
(
"
enrollFailed
"
"
preference_study
"
name
{
reason
:
"
invalid
-
type
"
}
)
;
throw
new
Error
(
Invalid
preferenceType
provided
(
given
"
{
preferenceType
}
"
)
)
;
}
if
(
prevPrefType
!
=
=
Services
.
prefs
.
PREF_INVALID
&
&
prevPrefType
!
=
=
givenPrefType
)
{
TelemetryEvents
.
sendEvent
(
"
enrollFailed
"
"
preference_study
"
name
{
reason
:
"
invalid
-
type
"
}
)
;
throw
new
Error
(
Previous
preference
value
is
of
type
"
{
prevPrefType
}
"
but
was
given
+
"
{
givenPrefType
}
"
(
{
preferenceType
}
)
)
;
}
preferenceInfo
.
previousPreferenceValue
=
getPref
(
preferenceBranch
preferenceName
preferenceType
)
;
}
for
(
const
[
preferenceName
preferenceInfo
]
of
Object
.
entries
(
preferences
)
)
{
const
{
preferenceType
preferenceValue
preferenceBranchType
}
=
preferenceInfo
;
const
preferenceBranch
=
PreferenceBranchType
[
preferenceBranchType
]
;
setPref
(
preferenceBranch
preferenceName
preferenceType
preferenceValue
)
;
}
PreferenceExperiments
.
startObserver
(
name
preferences
)
;
const
experiment
=
{
name
branch
expired
:
false
lastSeen
:
new
Date
(
)
.
toJSON
(
)
preferences
experimentType
userFacingName
userFacingDescription
}
;
store
.
data
.
experiments
[
name
]
=
experiment
;
store
.
saveSoon
(
)
;
TelemetryEnvironment
.
setExperimentActive
(
name
branch
{
type
:
EXPERIMENT_TYPE_PREFIX
+
experimentType
}
)
;
TelemetryEvents
.
sendEvent
(
"
enroll
"
"
preference_study
"
name
{
experimentType
branch
}
)
;
await
this
.
saveStartupPrefs
(
)
;
}
startObserver
(
experimentName
preferences
)
{
log
.
debug
(
PreferenceExperiments
.
startObserver
(
{
experimentName
}
)
)
;
if
(
experimentObservers
.
has
(
experimentName
)
)
{
throw
new
Error
(
An
observer
for
the
preference
experiment
{
experimentName
}
is
already
active
.
)
;
}
const
observerInfo
=
{
preferences
observe
(
aSubject
aTopic
preferenceName
)
{
const
{
preferenceValue
preferenceType
}
=
preferences
[
preferenceName
]
;
const
newValue
=
getPref
(
UserPreferences
preferenceName
preferenceType
)
;
if
(
newValue
!
=
=
preferenceValue
)
{
PreferenceExperiments
.
stop
(
experimentName
{
resetValue
:
false
reason
:
"
user
-
preference
-
changed
"
}
)
.
catch
(
Cu
.
reportError
)
;
}
}
}
;
experimentObservers
.
set
(
experimentName
observerInfo
)
;
for
(
const
preferenceName
of
Object
.
keys
(
preferences
)
)
{
Services
.
prefs
.
addObserver
(
preferenceName
observerInfo
)
;
}
}
hasObserver
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
hasObserver
(
{
experimentName
}
)
)
;
return
experimentObservers
.
has
(
experimentName
)
;
}
stopObserver
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
stopObserver
(
{
experimentName
}
)
)
;
if
(
!
experimentObservers
.
has
(
experimentName
)
)
{
throw
new
Error
(
No
observer
for
the
preference
experiment
{
experimentName
}
found
.
)
;
}
const
observer
=
experimentObservers
.
get
(
experimentName
)
;
for
(
const
preferenceName
of
Object
.
keys
(
observer
.
preferences
)
)
{
Services
.
prefs
.
removeObserver
(
preferenceName
observer
)
;
}
experimentObservers
.
delete
(
experimentName
)
;
}
stopAllObservers
(
)
{
log
.
debug
(
"
PreferenceExperiments
.
stopAllObservers
(
)
"
)
;
for
(
const
observer
of
experimentObservers
.
values
(
)
)
{
for
(
const
preferenceName
of
Object
.
keys
(
observer
.
preferences
)
)
{
Services
.
prefs
.
removeObserver
(
preferenceName
observer
)
;
}
}
experimentObservers
.
clear
(
)
;
}
async
markLastSeen
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
markLastSeen
(
{
experimentName
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
if
(
!
(
experimentName
in
store
.
data
.
experiments
)
)
{
throw
new
Error
(
Could
not
find
a
preference
experiment
named
"
{
experimentName
}
"
)
;
}
store
.
data
.
experiments
[
experimentName
]
.
lastSeen
=
new
Date
(
)
.
toJSON
(
)
;
store
.
saveSoon
(
)
;
}
async
stop
(
experimentName
{
resetValue
=
true
reason
=
"
unknown
"
}
=
{
}
)
{
log
.
debug
(
PreferenceExperiments
.
stop
(
{
experimentName
}
{
resetValue
:
{
resetValue
}
reason
:
{
reason
}
}
)
)
;
if
(
reason
=
=
=
"
unknown
"
)
{
log
.
warn
(
experiment
{
experimentName
}
ending
for
unknown
reason
)
;
}
const
store
=
await
ensureStorage
(
)
;
if
(
!
(
experimentName
in
store
.
data
.
experiments
)
)
{
TelemetryEvents
.
sendEvent
(
"
unenrollFailed
"
"
preference_study
"
experimentName
{
reason
:
"
does
-
not
-
exist
"
}
)
;
throw
new
Error
(
Could
not
find
a
preference
experiment
named
"
{
experimentName
}
"
)
;
}
const
experiment
=
store
.
data
.
experiments
[
experimentName
]
;
if
(
experiment
.
expired
)
{
TelemetryEvents
.
sendEvent
(
"
unenrollFailed
"
"
preference_study
"
experimentName
{
reason
:
"
already
-
unenrolled
"
}
)
;
throw
new
Error
(
Cannot
stop
preference
experiment
"
{
experimentName
}
"
because
it
is
already
expired
)
;
}
if
(
PreferenceExperiments
.
hasObserver
(
experimentName
)
)
{
PreferenceExperiments
.
stopObserver
(
experimentName
)
;
}
if
(
resetValue
)
{
for
(
const
[
preferenceName
prefInfo
]
of
Object
.
entries
(
experiment
.
preferences
)
)
{
const
{
preferenceType
previousPreferenceValue
preferenceBranchType
}
=
prefInfo
;
const
preferences
=
PreferenceBranchType
[
preferenceBranchType
]
;
if
(
previousPreferenceValue
!
=
=
null
)
{
setPref
(
preferences
preferenceName
preferenceType
previousPreferenceValue
)
;
}
else
if
(
preferenceBranchType
=
=
=
"
user
"
)
{
preferences
.
clearUserPref
(
preferenceName
)
;
}
else
{
log
.
warn
(
Can
'
t
revert
pref
{
preferenceName
}
for
experiment
{
experimentName
}
+
because
it
had
no
default
value
.
+
Preference
will
be
reset
at
the
next
restart
.
)
;
}
}
}
experiment
.
expired
=
true
;
store
.
saveSoon
(
)
;
TelemetryEnvironment
.
setExperimentInactive
(
experimentName
)
;
TelemetryEvents
.
sendEvent
(
"
unenroll
"
"
preference_study
"
experimentName
{
didResetValue
:
resetValue
?
"
true
"
:
"
false
"
branch
:
experiment
.
branch
reason
}
)
;
await
this
.
saveStartupPrefs
(
)
;
}
_cloneExperiment
(
experiment
)
{
return
{
.
.
.
experiment
preferences
:
{
.
.
.
experiment
.
preferences
}
}
;
}
async
get
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
get
(
{
experimentName
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
if
(
!
(
experimentName
in
store
.
data
.
experiments
)
)
{
throw
new
Error
(
Could
not
find
a
preference
experiment
named
"
{
experimentName
}
"
)
;
}
return
this
.
_cloneExperiment
(
store
.
data
.
experiments
[
experimentName
]
)
;
}
async
getAll
(
)
{
const
store
=
await
ensureStorage
(
)
;
return
Object
.
values
(
store
.
data
.
experiments
)
.
map
(
experiment
=
>
this
.
_cloneExperiment
(
experiment
)
)
;
}
async
getAllActive
(
)
{
const
store
=
await
ensureStorage
(
)
;
return
Object
.
values
(
store
.
data
.
experiments
)
.
filter
(
e
=
>
!
e
.
expired
)
.
map
(
e
=
>
this
.
_cloneExperiment
(
e
)
)
;
}
async
has
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
has
(
{
experimentName
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
return
experimentName
in
store
.
data
.
experiments
;
}
}
;
