"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
JSONFile
"
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
Storage
"
]
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
lazyStore
"
async
function
(
)
{
const
path
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
shield
-
recipe
-
client
.
json
"
)
;
const
store
=
new
lazy
.
JSONFile
(
{
path
}
)
;
await
store
.
load
(
)
;
return
store
;
}
)
;
var
Storage
=
class
{
constructor
(
prefix
)
{
this
.
prefix
=
prefix
;
}
static
async
clearAllStorage
(
)
{
const
store
=
await
lazy
.
lazyStore
;
store
.
data
=
{
}
;
store
.
saveSoon
(
)
;
}
async
getItem
(
name
)
{
const
store
=
await
lazy
.
lazyStore
;
const
namespace
=
store
.
data
[
this
.
prefix
]
|
|
{
}
;
return
namespace
[
name
]
|
|
null
;
}
async
setItem
(
name
value
)
{
const
store
=
await
lazy
.
lazyStore
;
if
(
!
(
this
.
prefix
in
store
.
data
)
)
{
store
.
data
[
this
.
prefix
]
=
{
}
;
}
store
.
data
[
this
.
prefix
]
[
name
]
=
value
;
store
.
saveSoon
(
)
;
}
async
removeItem
(
name
)
{
const
store
=
await
lazy
.
lazyStore
;
if
(
this
.
prefix
in
store
.
data
)
{
delete
store
.
data
[
this
.
prefix
]
[
name
]
;
store
.
saveSoon
(
)
;
}
}
async
clear
(
)
{
const
store
=
await
lazy
.
lazyStore
;
store
.
data
[
this
.
prefix
]
=
{
}
;
store
.
saveSoon
(
)
;
}
}
;
