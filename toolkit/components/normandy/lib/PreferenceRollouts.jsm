"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
LogManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
IndexedDB
"
"
resource
:
/
/
gre
/
modules
/
IndexedDB
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryEnvironment
"
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrefUtils
"
"
resource
:
/
/
normandy
/
lib
/
PrefUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryEvents
"
"
resource
:
/
/
normandy
/
lib
/
TelemetryEvents
.
jsm
"
)
;
const
log
=
LogManager
.
getLogger
(
"
recipe
-
runner
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
PreferenceRollouts
"
]
;
const
STARTUP_PREFS_BRANCH
=
"
app
.
normandy
.
startupRolloutPrefs
.
"
;
const
DB_NAME
=
"
normandy
-
preference
-
rollout
"
;
const
STORE_NAME
=
"
preference
-
rollouts
"
;
const
DB_OPTIONS
=
{
version
:
1
}
;
function
openDatabase
(
)
{
return
IndexedDB
.
open
(
DB_NAME
DB_OPTIONS
db
=
>
{
db
.
createObjectStore
(
STORE_NAME
{
keyPath
:
"
slug
"
}
)
;
}
)
;
}
let
databasePromise
;
function
getDatabase
(
)
{
if
(
!
databasePromise
)
{
databasePromise
=
openDatabase
(
)
;
}
return
databasePromise
;
}
function
getStore
(
db
mode
)
{
if
(
!
mode
)
{
throw
new
Error
(
"
mode
is
required
"
)
;
}
return
db
.
objectStore
(
STORE_NAME
mode
)
;
}
var
PreferenceRollouts
=
{
STATE_ACTIVE
:
"
active
"
STATE_ROLLED_BACK
:
"
rolled
-
back
"
STATE_GRADUATED
:
"
graduated
"
async
recordOriginalValues
(
originalPreferences
)
{
for
(
const
rollout
of
await
this
.
getAllActive
(
)
)
{
let
changed
=
false
;
let
prefMatchingDefaultCount
=
0
;
for
(
const
prefSpec
of
rollout
.
preferences
)
{
const
builtInDefault
=
originalPreferences
[
prefSpec
.
preferenceName
]
;
if
(
prefSpec
.
value
=
=
=
builtInDefault
)
{
prefMatchingDefaultCount
+
+
;
}
if
(
prefSpec
.
previousValue
!
=
=
builtInDefault
)
{
prefSpec
.
previousValue
=
builtInDefault
;
changed
=
true
;
}
}
if
(
prefMatchingDefaultCount
=
=
=
rollout
.
preferences
.
length
)
{
rollout
.
state
=
this
.
STATE_GRADUATED
;
changed
=
true
;
log
.
debug
(
Graduating
rollout
:
{
rollout
.
slug
}
)
;
TelemetryEvents
.
sendEvent
(
"
graduate
"
"
preference_rollout
"
rollout
.
slug
{
}
)
;
}
if
(
changed
)
{
const
db
=
await
getDatabase
(
)
;
await
getStore
(
db
"
readwrite
"
)
.
put
(
rollout
)
;
}
}
}
async
init
(
)
{
for
(
const
rollout
of
await
this
.
getAllActive
(
)
)
{
TelemetryEnvironment
.
setExperimentActive
(
rollout
.
slug
rollout
.
state
{
type
:
"
normandy
-
prefrollout
"
}
)
;
}
}
async
uninit
(
)
{
await
this
.
saveStartupPrefs
(
)
;
}
withTestMock
(
testFunction
)
{
return
async
function
inner
(
.
.
.
args
)
{
let
db
=
await
getDatabase
(
)
;
const
oldData
=
await
getStore
(
db
"
readonly
"
)
.
getAll
(
)
;
await
getStore
(
db
"
readwrite
"
)
.
clear
(
)
;
try
{
await
testFunction
(
.
.
.
args
)
;
}
finally
{
db
=
await
getDatabase
(
)
;
await
getStore
(
db
"
readwrite
"
)
.
clear
(
)
;
const
store
=
getStore
(
db
"
readwrite
"
)
;
await
Promise
.
all
(
oldData
.
map
(
d
=
>
store
.
add
(
d
)
)
)
;
}
}
;
}
async
add
(
rollout
)
{
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readwrite
"
)
.
add
(
rollout
)
;
}
async
update
(
rollout
)
{
if
(
!
await
this
.
has
(
rollout
.
slug
)
)
{
throw
new
Error
(
Tried
to
update
{
rollout
.
slug
}
but
it
doesn
'
t
already
exist
.
)
;
}
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readwrite
"
)
.
put
(
rollout
)
;
}
async
has
(
slug
)
{
const
db
=
await
getDatabase
(
)
;
const
rollout
=
await
getStore
(
db
"
readonly
"
)
.
get
(
slug
)
;
return
!
!
rollout
;
}
async
get
(
slug
)
{
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readonly
"
)
.
get
(
slug
)
;
}
async
getAll
(
)
{
const
db
=
await
getDatabase
(
)
;
return
getStore
(
db
"
readonly
"
)
.
getAll
(
)
;
}
async
getAllActive
(
)
{
const
rollouts
=
await
this
.
getAll
(
)
;
return
rollouts
.
filter
(
rollout
=
>
rollout
.
state
=
=
=
this
.
STATE_ACTIVE
)
;
}
async
saveStartupPrefs
(
)
{
const
prefBranch
=
Services
.
prefs
.
getBranch
(
STARTUP_PREFS_BRANCH
)
;
prefBranch
.
deleteBranch
(
"
"
)
;
for
(
const
rollout
of
await
this
.
getAllActive
(
)
)
{
for
(
const
prefSpec
of
rollout
.
preferences
)
{
PrefUtils
.
setPref
(
"
user
"
STARTUP_PREFS_BRANCH
+
prefSpec
.
preferenceName
prefSpec
.
value
)
;
}
}
}
}
;
