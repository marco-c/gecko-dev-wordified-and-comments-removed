"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonStudies
"
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CleanupManager
"
"
resource
:
/
/
normandy
/
lib
/
CleanupManager
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
ShieldPreferences
"
]
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
const
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
=
"
nsPref
:
changed
"
;
const
FHR_UPLOAD_ENABLED_PREF
=
"
datareporting
.
healthreport
.
uploadEnabled
"
;
const
OPT_OUT_STUDIES_ENABLED_PREF
=
"
app
.
shield
.
optoutstudies
.
enabled
"
;
var
ShieldPreferences
=
{
init
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
FHR_UPLOAD_ENABLED_PREF
)
)
{
Services
.
prefs
.
setBoolPref
(
OPT_OUT_STUDIES_ENABLED_PREF
false
)
;
}
Services
.
prefs
.
addObserver
(
FHR_UPLOAD_ENABLED_PREF
this
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
{
Services
.
prefs
.
removeObserver
(
FHR_UPLOAD_ENABLED_PREF
this
)
;
}
)
;
Services
.
prefs
.
addObserver
(
OPT_OUT_STUDIES_ENABLED_PREF
this
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
{
Services
.
prefs
.
removeObserver
(
OPT_OUT_STUDIES_ENABLED_PREF
this
)
;
}
)
;
if
(
AppConstants
.
MOZ_DATA_REPORTING
&
&
Services
.
locale
.
getAppLocaleAsLangTag
(
)
.
startsWith
(
"
en
"
)
)
{
Services
.
obs
.
addObserver
(
this
"
privacy
-
pane
-
loaded
"
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
{
Services
.
obs
.
removeObserver
(
this
"
privacy
-
pane
-
loaded
"
)
;
}
)
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
privacy
-
pane
-
loaded
"
:
this
.
injectOptOutStudyCheckbox
(
subject
.
document
)
;
break
;
case
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
:
this
.
observePrefChange
(
data
)
;
break
;
}
}
async
observePrefChange
(
prefName
)
{
let
prefValue
;
switch
(
prefName
)
{
case
FHR_UPLOAD_ENABLED_PREF
:
{
prefValue
=
Services
.
prefs
.
getBoolPref
(
FHR_UPLOAD_ENABLED_PREF
)
;
Services
.
prefs
.
setBoolPref
(
OPT_OUT_STUDIES_ENABLED_PREF
prefValue
)
;
break
;
}
case
OPT_OUT_STUDIES_ENABLED_PREF
:
{
prefValue
=
Services
.
prefs
.
getBoolPref
(
OPT_OUT_STUDIES_ENABLED_PREF
)
;
if
(
!
prefValue
)
{
for
(
const
study
of
await
AddonStudies
.
getAll
(
)
)
{
if
(
study
.
active
)
{
await
AddonStudies
.
stop
(
study
.
recipeId
"
general
-
opt
-
out
"
)
;
}
}
}
break
;
}
}
}
injectOptOutStudyCheckbox
(
doc
)
{
const
container
=
doc
.
createElementNS
(
XUL_NS
"
vbox
"
)
;
container
.
classList
.
add
(
"
indent
"
)
;
const
hContainer
=
doc
.
createElementNS
(
XUL_NS
"
hbox
"
)
;
hContainer
.
setAttribute
(
"
align
"
"
center
"
)
;
container
.
appendChild
(
hContainer
)
;
const
checkbox
=
doc
.
createElementNS
(
XUL_NS
"
checkbox
"
)
;
checkbox
.
setAttribute
(
"
id
"
"
optOutStudiesEnabled
"
)
;
checkbox
.
setAttribute
(
"
class
"
"
tail
-
with
-
learn
-
more
"
)
;
checkbox
.
setAttribute
(
"
label
"
"
Allow
Firefox
to
install
and
run
studies
"
)
;
let
allowedByPolicy
=
Services
.
policies
.
isAllowed
(
"
Shield
"
)
;
if
(
allowedByPolicy
)
{
checkbox
.
setAttribute
(
"
preference
"
OPT_OUT_STUDIES_ENABLED_PREF
)
;
}
hContainer
.
appendChild
(
checkbox
)
;
const
viewStudies
=
doc
.
createElementNS
(
XUL_NS
"
label
"
)
;
viewStudies
.
setAttribute
(
"
id
"
"
viewShieldStudies
"
)
;
viewStudies
.
setAttribute
(
"
href
"
"
about
:
studies
"
)
;
viewStudies
.
setAttribute
(
"
useoriginprincipal
"
true
)
;
viewStudies
.
textContent
=
"
View
Firefox
Studies
"
;
viewStudies
.
classList
.
add
(
"
learnMore
"
"
text
-
link
"
)
;
hContainer
.
appendChild
(
viewStudies
)
;
doc
.
defaultView
.
Preferences
.
add
(
{
id
:
OPT_OUT_STUDIES_ENABLED_PREF
type
:
"
bool
"
}
)
;
const
fhrPref
=
doc
.
defaultView
.
Preferences
.
add
(
{
id
:
FHR_UPLOAD_ENABLED_PREF
type
:
"
bool
"
}
)
;
function
onChangeFHRPref
(
)
{
let
isDisabled
=
Services
.
prefs
.
prefIsLocked
(
FHR_UPLOAD_ENABLED_PREF
)
|
|
!
AppConstants
.
MOZ_TELEMETRY_REPORTING
|
|
!
Services
.
prefs
.
getBoolPref
(
FHR_UPLOAD_ENABLED_PREF
)
|
|
!
allowedByPolicy
;
if
(
isDisabled
)
{
checkbox
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
checkbox
.
removeAttribute
(
"
disabled
"
)
;
}
}
fhrPref
.
on
(
"
change
"
onChangeFHRPref
)
;
onChangeFHRPref
(
)
;
doc
.
defaultView
.
addEventListener
(
"
unload
"
(
)
=
>
fhrPref
.
off
(
"
change
"
onChangeFHRPref
)
{
once
:
true
}
)
;
const
parent
=
doc
.
getElementById
(
"
submitHealthReportBox
"
)
.
closest
(
"
description
"
)
;
parent
.
appendChild
(
container
)
;
}
}
;
