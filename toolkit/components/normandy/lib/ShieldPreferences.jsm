"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonStudies
"
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CleanupManager
"
"
resource
:
/
/
normandy
/
lib
/
CleanupManager
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
ShieldPreferences
"
]
;
const
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
=
"
nsPref
:
changed
"
;
const
PREF_OPT_OUT_STUDIES_ENABLED
=
"
app
.
shield
.
optoutstudies
.
enabled
"
;
var
ShieldPreferences
=
{
init
(
)
{
Services
.
prefs
.
addObserver
(
PREF_OPT_OUT_STUDIES_ENABLED
this
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
{
Services
.
prefs
.
removeObserver
(
PREF_OPT_OUT_STUDIES_ENABLED
this
)
;
}
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
:
this
.
observePrefChange
(
data
)
;
break
;
}
}
async
observePrefChange
(
prefName
)
{
let
prefValue
;
switch
(
prefName
)
{
case
PREF_OPT_OUT_STUDIES_ENABLED
:
{
prefValue
=
Services
.
prefs
.
getBoolPref
(
PREF_OPT_OUT_STUDIES_ENABLED
)
;
if
(
!
prefValue
)
{
for
(
const
study
of
await
AddonStudies
.
getAll
(
)
)
{
if
(
study
.
active
)
{
await
AddonStudies
.
stop
(
study
.
recipeId
"
general
-
opt
-
out
"
)
;
}
}
}
break
;
}
}
}
}
;
