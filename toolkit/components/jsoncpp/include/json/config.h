#
ifndef
JSON_CONFIG_H_INCLUDED
#
define
JSON_CONFIG_H_INCLUDED
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
istream
>
#
include
<
memory
>
#
include
<
ostream
>
#
include
<
sstream
>
#
include
<
string
>
#
include
<
type_traits
>
#
ifndef
JSON_USE_EXCEPTION
#
define
JSON_USE_EXCEPTION
1
#
endif
#
ifndef
JSON_USE_NULLREF
#
define
JSON_USE_NULLREF
1
#
endif
#
ifdef
JSON_IN_CPPTL
#
include
<
cpptl
/
config
.
h
>
#
ifndef
JSON_USE_CPPTL
#
define
JSON_USE_CPPTL
1
#
endif
#
endif
#
ifdef
JSON_IN_CPPTL
#
define
JSON_API
CPPTL_API
#
elif
defined
(
JSON_DLL_BUILD
)
#
if
defined
(
_MSC_VER
)
|
|
defined
(
__MINGW32__
)
#
define
JSON_API
__declspec
(
dllexport
)
#
define
JSONCPP_DISABLE_DLL_INTERFACE_WARNING
#
elif
defined
(
__GNUC__
)
|
|
defined
(
__clang__
)
#
define
JSON_API
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
endif
#
elif
defined
(
JSON_DLL
)
#
if
defined
(
_MSC_VER
)
|
|
defined
(
__MINGW32__
)
#
define
JSON_API
__declspec
(
dllimport
)
#
define
JSONCPP_DISABLE_DLL_INTERFACE_WARNING
#
endif
#
endif
#
if
!
defined
(
JSON_API
)
#
define
JSON_API
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1800
#
error
\
"
ERROR
:
Visual
Studio
12
(
2013
)
with
_MSC_VER
=
1800
is
the
oldest
supported
compiler
with
sufficient
C
+
+
11
capabilities
"
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1900
extern
JSON_API
int
msvc_pre1900_c99_snprintf
(
char
*
outBuf
size_t
size
const
char
*
format
.
.
.
)
;
#
define
jsoncpp_snprintf
msvc_pre1900_c99_snprintf
#
else
#
define
jsoncpp_snprintf
std
:
:
snprintf
#
endif
#
define
JSONCPP_OVERRIDE
override
#
if
__cplusplus
>
=
201103L
#
define
JSONCPP_NOEXCEPT
noexcept
#
define
JSONCPP_OP_EXPLICIT
explicit
#
elif
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1900
#
define
JSONCPP_NOEXCEPT
throw
(
)
#
define
JSONCPP_OP_EXPLICIT
explicit
#
elif
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1900
#
define
JSONCPP_NOEXCEPT
noexcept
#
define
JSONCPP_OP_EXPLICIT
explicit
#
else
#
define
JSONCPP_NOEXCEPT
throw
(
)
#
define
JSONCPP_OP_EXPLICIT
#
endif
#
ifdef
__clang__
#
if
__has_extension
(
attribute_deprecated_with_message
)
#
define
JSONCPP_DEPRECATED
(
message
)
__attribute__
(
(
deprecated
(
message
)
)
)
#
endif
#
elif
defined
(
__GNUC__
)
#
if
(
__GNUC__
>
4
|
|
(
__GNUC__
=
=
4
&
&
__GNUC_MINOR__
>
=
5
)
)
#
define
JSONCPP_DEPRECATED
(
message
)
__attribute__
(
(
deprecated
(
message
)
)
)
#
elif
(
__GNUC__
>
3
|
|
(
__GNUC__
=
=
3
&
&
__GNUC_MINOR__
>
=
1
)
)
#
define
JSONCPP_DEPRECATED
(
message
)
__attribute__
(
(
__deprecated__
)
)
#
endif
#
elif
defined
(
_MSC_VER
)
#
define
JSONCPP_DEPRECATED
(
message
)
__declspec
(
deprecated
(
message
)
)
#
endif
#
if
!
defined
(
JSONCPP_DEPRECATED
)
#
define
JSONCPP_DEPRECATED
(
message
)
#
endif
#
if
defined
(
__clang__
)
|
|
(
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
6
)
)
#
define
JSON_USE_INT64_DOUBLE_CONVERSION
1
#
endif
#
if
!
defined
(
JSON_IS_AMALGAMATION
)
#
include
"
allocator
.
h
"
#
include
"
version
.
h
"
#
endif
namespace
Json
{
typedef
int
Int
;
typedef
unsigned
int
UInt
;
#
if
defined
(
JSON_NO_INT64
)
typedef
int
LargestInt
;
typedef
unsigned
int
LargestUInt
;
#
undef
JSON_HAS_INT64
#
else
#
if
defined
(
_MSC_VER
)
typedef
__int64
Int64
;
typedef
unsigned
__int64
UInt64
;
#
else
typedef
int64_t
Int64
;
typedef
uint64_t
UInt64
;
#
endif
typedef
Int64
LargestInt
;
typedef
UInt64
LargestUInt
;
#
define
JSON_HAS_INT64
#
endif
template
<
typename
T
>
using
Allocator
=
typename
std
:
:
conditional
<
JSONCPP_USING_SECURE_MEMORY
SecureAllocator
<
T
>
std
:
:
allocator
<
T
>
>
:
:
type
;
using
String
=
std
:
:
basic_string
<
char
std
:
:
char_traits
<
char
>
Allocator
<
char
>
>
;
using
IStringStream
=
std
:
:
basic_istringstream
<
String
:
:
value_type
String
:
:
traits_type
String
:
:
allocator_type
>
;
using
OStringStream
=
std
:
:
basic_ostringstream
<
String
:
:
value_type
String
:
:
traits_type
String
:
:
allocator_type
>
;
using
IStream
=
std
:
:
istream
;
using
OStream
=
std
:
:
ostream
;
}
using
JSONCPP_STRING
=
Json
:
:
String
;
using
JSONCPP_ISTRINGSTREAM
=
Json
:
:
IStringStream
;
using
JSONCPP_OSTRINGSTREAM
=
Json
:
:
OStringStream
;
using
JSONCPP_ISTREAM
=
Json
:
:
IStream
;
using
JSONCPP_OSTREAM
=
Json
:
:
OStream
;
#
endif
