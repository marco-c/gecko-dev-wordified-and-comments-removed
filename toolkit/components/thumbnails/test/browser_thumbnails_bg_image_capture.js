const
BASE_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
components
/
thumbnails
/
"
;
function
*
runTests
(
)
{
const
emptyUrl
=
"
data
:
text
/
plain
"
;
yield
bgCapture
(
emptyUrl
{
isImage
:
true
onDone
:
(
url
reason
)
=
>
{
is
(
reason
6
"
Should
have
the
right
failure
reason
"
)
;
next
(
)
;
}
}
)
;
for
(
const
{
url
color
width
height
}
of
[
{
url
:
BASE_URL
+
"
test
/
sample_image_red_1920x1080
.
jpg
"
color
:
[
255
0
0
]
width
:
1920
height
:
1080
}
{
url
:
BASE_URL
+
"
test
/
sample_image_green_1024x1024
.
jpg
"
color
:
[
0
255
0
]
width
:
1024
height
:
1024
}
{
url
:
BASE_URL
+
"
test
/
sample_image_blue_300x600
.
jpg
"
color
:
[
0
0
255
]
width
:
300
height
:
600
}
]
)
{
dontExpireThumbnailURLs
(
[
url
]
)
;
const
capturedPromise
=
new
Promise
(
resolve
=
>
{
bgAddPageThumbObserver
(
url
)
.
then
(
(
)
=
>
{
ok
(
true
page
-
thumbnail
created
for
{
url
}
)
;
resolve
(
)
;
}
)
;
}
)
;
yield
bgCapture
(
url
)
;
yield
capturedPromise
;
ok
(
thumbnailExists
(
url
)
"
The
image
thumbnail
should
exist
after
capture
"
)
;
const
thumb
=
PageThumbs
.
getThumbnailURL
(
url
)
;
const
htmlns
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
img
=
document
.
createElementNS
(
htmlns
"
img
"
)
;
yield
new
Promise
(
resolve
=
>
{
img
.
onload
=
(
)
=
>
resolve
(
)
;
img
.
src
=
thumb
;
}
)
;
const
expectedWidth
=
Math
.
min
(
448
width
)
;
const
expectedHeight
=
Math
.
min
(
expectedWidth
*
height
/
width
expectedWidth
)
;
ok
(
Math
.
abs
(
img
.
naturalWidth
-
expectedWidth
)
<
=
1
"
The
thumbnail
should
have
the
right
width
"
)
;
ok
(
Math
.
abs
(
img
.
naturalHeight
-
expectedHeight
)
<
=
1
"
The
thumbnail
should
have
the
right
height
"
)
;
const
canvas
=
document
.
createElementNS
(
htmlns
"
canvas
"
)
;
canvas
.
width
=
expectedWidth
;
canvas
.
height
=
expectedHeight
;
const
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
ctx
.
drawImage
(
img
0
0
expectedWidth
expectedHeight
)
;
const
[
r
g
b
]
=
ctx
.
getImageData
(
0
0
expectedWidth
expectedHeight
)
.
data
;
ok
(
(
Math
.
abs
(
r
-
color
[
0
]
)
<
=
2
&
&
Math
.
abs
(
g
-
color
[
1
]
)
<
=
2
&
&
Math
.
abs
(
b
-
color
[
2
]
)
<
=
2
)
"
The
thumbnail
should
have
the
right
color
"
)
;
removeThumbnail
(
url
)
;
}
}
