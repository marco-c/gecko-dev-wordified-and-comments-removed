const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
"
;
const
URL_COPY
=
URL
+
"
#
copy
"
;
add_task
(
async
function
thumbnails_storage
(
)
{
dontExpireThumbnailURLs
(
[
URL
URL_COPY
]
)
;
await
promiseClearHistory
(
)
;
await
promiseAddVisitsAndRepopulateNewTabLinks
(
URL
)
;
await
promiseCreateThumbnail
(
)
;
await
PageThumbsStorage
.
copy
(
URL
URL_COPY
)
;
let
copy
=
new
FileUtils
.
File
(
PageThumbsStorageService
.
getFilePathForURL
(
URL_COPY
)
)
;
let
mtime
=
(
copy
.
lastModifiedTime
-
=
60
)
;
await
PageThumbsStorage
.
copy
(
URL
URL_COPY
)
;
isnot
(
new
FileUtils
.
File
(
PageThumbsStorageService
.
getFilePathForURL
(
URL_COPY
)
)
.
lastModifiedTime
mtime
"
thumbnail
file
was
updated
"
)
;
let
file
=
new
FileUtils
.
File
(
PageThumbsStorageService
.
getFilePathForURL
(
URL
)
)
;
let
fileCopy
=
new
FileUtils
.
File
(
PageThumbsStorageService
.
getFilePathForURL
(
URL_COPY
)
)
;
info
(
"
Clearing
history
"
)
;
while
(
file
.
exists
(
)
|
|
fileCopy
.
exists
(
)
)
{
await
promiseClearHistory
(
)
;
}
info
(
"
History
is
clear
"
)
;
info
(
"
Repopulating
"
)
;
await
promiseAddVisitsAndRepopulateNewTabLinks
(
URL
)
;
await
promiseCreateThumbnail
(
)
;
info
(
"
Clearing
the
last
10
minutes
of
browsing
history
"
)
;
await
promiseClearHistory
(
true
)
;
info
(
"
Attempt
to
clear
file
"
)
;
await
promiseClearFile
(
file
URL
)
;
info
(
"
Done
"
)
;
}
)
;
async
function
promiseClearFile
(
aFile
aURL
)
{
if
(
!
aFile
.
exists
(
)
)
{
return
undefined
;
}
await
PlacesTestUtils
.
addVisits
(
makeURI
(
aURL
)
)
;
await
promiseClearHistory
(
true
)
;
return
promiseClearFile
(
aFile
aURL
)
;
}
function
promiseClearHistory
(
aUseRange
)
{
let
options
=
{
}
;
if
(
aUseRange
)
{
let
usec
=
Date
.
now
(
)
*
1000
;
options
.
range
=
[
usec
-
10
*
60
*
1000
*
1000
usec
]
;
options
.
ignoreTimespan
=
false
;
}
return
Sanitizer
.
sanitize
(
[
"
history
"
]
options
)
;
}
async
function
promiseCreateThumbnail
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
(
)
=
>
{
gBrowserThumbnails
.
clearTopSiteURLCache
(
)
;
await
whenFileExists
(
URL
)
;
}
)
;
}
