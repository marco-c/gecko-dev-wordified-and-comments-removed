function
ensureThumbnailStale
(
url
)
{
let
fname
=
PageThumbsStorageService
.
getFilePathForURL
(
url
)
;
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
fname
)
;
ok
(
file
.
exists
(
)
fname
+
"
should
exist
"
)
;
file
.
lastModifiedTime
=
Date
.
now
(
)
-
1000000000
;
}
function
getThumbnailModifiedTime
(
url
)
{
let
fname
=
PageThumbsStorageService
.
getFilePathForURL
(
url
)
;
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
fname
)
;
return
file
.
lastModifiedTime
;
}
add_task
(
async
function
thumbnails_captureAndStoreIfStale_normal
(
)
{
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
components
/
thumbnails
/
test
/
thumbnails_update
.
sjs
?
simple
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
browser
=
>
{
let
numNotifications
=
0
;
let
observed
=
TestUtils
.
topicObserved
(
"
page
-
thumbnail
:
create
"
(
subject
data
)
=
>
{
is
(
data
URL
"
data
is
our
test
URL
"
)
;
if
(
+
+
numNotifications
=
=
2
)
{
return
true
;
}
return
false
;
}
)
;
await
PageThumbs
.
captureAndStore
(
browser
)
;
is
(
numNotifications
1
"
got
notification
of
item
being
created
.
"
)
;
await
PageThumbs
.
captureAndStoreIfStale
(
browser
)
;
is
(
numNotifications
1
"
still
only
1
notification
of
item
being
created
.
"
)
;
ensureThumbnailStale
(
URL
)
;
await
PageThumbs
.
captureAndStoreIfStale
(
browser
)
;
await
observed
;
}
)
;
}
)
;
add_task
(
async
function
thumbnails_captureAndStoreIfStale_error_response
(
)
{
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
components
/
thumbnails
/
test
/
thumbnails_update
.
sjs
?
fail
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
browser
=
>
{
await
captureAndCheckColor
(
0
255
0
"
we
have
a
green
thumbnail
"
)
;
ensureThumbnailStale
(
URL
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
now
=
Date
.
now
(
)
-
1000
;
await
PageThumbs
.
captureAndStoreIfStale
(
gBrowser
.
selectedBrowser
)
;
ok
(
getThumbnailModifiedTime
(
URL
)
<
now
"
modified
time
should
be
<
now
"
)
;
let
[
r
g
b
]
=
await
retrieveImageDataForURL
(
URL
)
;
is
(
"
"
+
[
r
g
b
]
"
"
+
[
0
255
0
]
"
thumbnail
is
still
green
"
)
;
}
)
;
}
)
;
add_task
(
async
function
thumbnails_captureAndStoreIfStale_non_error_response
(
)
{
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
components
/
thumbnails
/
test
/
thumbnails_update
.
sjs
?
ok
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
browser
=
>
{
await
captureAndCheckColor
(
0
255
0
"
we
have
a
green
thumbnail
"
)
;
ensureThumbnailStale
(
URL
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
now
=
Date
.
now
(
)
-
1000
;
await
PageThumbs
.
captureAndStoreIfStale
(
browser
)
;
Assert
.
greater
(
getThumbnailModifiedTime
(
URL
)
now
"
modified
time
should
be
>
=
now
"
)
;
let
[
r
g
b
]
=
await
retrieveImageDataForURL
(
URL
)
;
is
(
"
"
+
[
r
g
b
]
"
"
+
[
255
0
0
]
"
thumbnail
is
now
red
"
)
;
}
)
;
}
)
;
add_task
(
async
function
thumbnails_captureAndStore_error_response
(
)
{
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
components
/
thumbnails
/
test
/
thumbnails_update
.
sjs
?
fail
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
browser
=
>
{
await
captureAndCheckColor
(
0
255
0
"
we
have
a
green
thumbnail
"
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
browser
=
>
{
await
captureAndCheckColor
(
0
255
0
"
we
still
have
a
green
thumbnail
"
)
;
}
)
;
}
)
;
add_task
(
async
function
thumbnails_captureAndStore_ok_response
(
)
{
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
components
/
thumbnails
/
test
/
thumbnails_update
.
sjs
?
ok
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
browser
=
>
{
await
captureAndCheckColor
(
0
255
0
"
we
have
a
green
thumbnail
"
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
browser
=
>
{
await
captureAndCheckColor
(
255
0
0
"
we
now
have
a
red
thumbnail
"
)
;
}
)
;
}
)
;
