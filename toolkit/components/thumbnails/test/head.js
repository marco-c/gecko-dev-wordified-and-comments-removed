ChromeUtils
.
defineESModuleGetters
(
this
{
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
sys
.
mjs
"
NewTabUtils
:
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
sys
.
mjs
"
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BackgroundPageThumbs
:
"
resource
:
/
/
gre
/
modules
/
BackgroundPageThumbs
.
jsm
"
PageThumbs
:
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
PageThumbsStorage
:
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
SessionStore
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
PageThumbsStorageService
"
"
mozilla
.
org
/
thumbnails
/
pagethumbs
-
service
;
1
"
"
nsIPageThumbsStorageService
"
)
;
var
oldEnabledPref
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
pagethumbnails
.
capturing_disabled
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
pagethumbnails
.
capturing_disabled
"
false
)
;
registerCleanupFunction
(
function
(
)
{
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeTab
(
gBrowser
.
tabs
[
1
]
)
;
}
Services
.
prefs
.
setBoolPref
(
"
browser
.
pagethumbnails
.
capturing_disabled
"
oldEnabledPref
)
;
}
)
;
async
function
captureAndCheckColor
(
aRed
aGreen
aBlue
aMessage
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
dontExpireThumbnailURLs
(
[
browser
.
currentURI
.
spec
]
)
;
await
PageThumbs
.
captureAndStore
(
browser
)
;
let
[
r
g
b
]
=
await
retrieveImageDataForURL
(
browser
.
currentURI
.
spec
)
;
is
(
"
"
+
[
r
g
b
]
"
"
+
[
aRed
aGreen
aBlue
]
aMessage
)
;
}
async
function
retrieveImageDataForURL
(
aURL
)
{
let
width
=
100
height
=
100
;
let
thumb
=
PageThumbs
.
getThumbnailURL
(
aURL
width
height
)
;
let
htmlns
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
let
img
=
document
.
createElementNS
(
htmlns
"
img
"
)
;
img
.
setAttribute
(
"
src
"
thumb
)
;
await
BrowserTestUtils
.
waitForEvent
(
img
"
load
"
true
)
;
let
canvas
=
document
.
createElementNS
(
htmlns
"
canvas
"
)
;
canvas
.
setAttribute
(
"
width
"
width
)
;
canvas
.
setAttribute
(
"
height
"
height
)
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
ctx
.
drawImage
(
img
0
0
width
height
)
;
return
ctx
.
getImageData
(
0
0
100
100
)
.
data
;
}
function
thumbnailFile
(
aURL
)
{
return
new
FileUtils
.
File
(
PageThumbsStorageService
.
getFilePathForURL
(
aURL
)
)
;
}
function
thumbnailExists
(
aURL
)
{
let
file
=
thumbnailFile
(
aURL
)
;
return
file
.
exists
(
)
&
&
file
.
fileSize
;
}
function
removeThumbnail
(
aURL
)
{
let
file
=
thumbnailFile
(
aURL
)
;
file
.
remove
(
false
)
;
}
async
function
promiseAddVisitsAndRepopulateNewTabLinks
(
aPlaceInfo
)
{
await
PlacesTestUtils
.
addVisits
(
makeURI
(
aPlaceInfo
)
)
;
await
new
Promise
(
resolve
=
>
{
NewTabUtils
.
links
.
populateCache
(
resolve
true
)
;
}
)
;
}
function
whenFileExists
(
aURL
)
{
return
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
thumbnailExists
(
aURL
)
;
}
Waiting
for
{
aURL
}
to
exist
.
1000
50
)
;
}
function
whenFileRemoved
(
aFile
)
{
return
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
aFile
.
exists
(
)
;
}
Waiting
for
{
aFile
.
leafName
}
to
not
exist
.
1000
50
)
;
}
function
dontExpireThumbnailURLs
(
aURLs
)
{
let
dontExpireURLs
=
cb
=
>
cb
(
aURLs
)
;
PageThumbs
.
addExpirationFilter
(
dontExpireURLs
)
;
registerCleanupFunction
(
function
(
)
{
PageThumbs
.
removeExpirationFilter
(
dontExpireURLs
)
;
}
)
;
}
function
bgCapture
(
aURL
aOptions
)
{
return
bgCaptureWithMethod
(
"
capture
"
aURL
aOptions
)
;
}
function
bgCaptureIfMissing
(
aURL
aOptions
)
{
return
bgCaptureWithMethod
(
"
captureIfMissing
"
aURL
aOptions
)
;
}
function
bgCaptureWithMethod
(
aMethodName
aURL
aOptions
=
{
}
)
{
dontExpireThumbnailURLs
(
[
aURL
]
)
;
return
new
Promise
(
resolve
=
>
{
let
wrappedDoneFn
=
aOptions
.
onDone
;
aOptions
.
onDone
=
(
url
doneReason
)
=
>
{
if
(
wrappedDoneFn
)
{
wrappedDoneFn
(
url
doneReason
)
;
}
resolve
(
[
url
doneReason
]
)
;
}
;
BackgroundPageThumbs
[
aMethodName
]
(
aURL
aOptions
)
;
}
)
;
}
function
bgTestPageURL
(
aOpts
=
{
}
)
{
let
TEST_PAGE_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
toolkit
/
components
/
thumbnails
/
test
/
thumbnails_background
.
sjs
"
;
return
TEST_PAGE_URL
+
"
?
"
+
encodeURIComponent
(
JSON
.
stringify
(
aOpts
)
)
;
}
function
bgAddPageThumbObserver
(
url
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
observe
(
subject
topic
data
)
{
if
(
data
=
=
=
url
)
{
switch
(
topic
)
{
case
"
page
-
thumbnail
:
create
"
:
resolve
(
)
;
break
;
case
"
page
-
thumbnail
:
error
"
:
reject
(
new
Error
(
"
page
-
thumbnail
:
error
"
)
)
;
break
;
}
Services
.
obs
.
removeObserver
(
observe
"
page
-
thumbnail
:
create
"
)
;
Services
.
obs
.
removeObserver
(
observe
"
page
-
thumbnail
:
error
"
)
;
}
}
Services
.
obs
.
addObserver
(
observe
"
page
-
thumbnail
:
create
"
)
;
Services
.
obs
.
addObserver
(
observe
"
page
-
thumbnail
:
error
"
)
;
}
)
;
}
