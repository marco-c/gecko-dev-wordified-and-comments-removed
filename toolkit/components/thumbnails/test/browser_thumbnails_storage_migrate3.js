const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
migration3
"
;
const
URL2
=
URL
+
"
#
2
"
;
const
URL3
=
URL
+
"
#
3
"
;
const
THUMBNAIL_DIRECTORY
=
"
thumbnails
"
;
const
PREF_STORAGE_VERSION
=
"
browser
.
pagethumbnails
.
storage_version
"
;
var
tmp
=
Cu
.
Sandbox
(
window
{
wantGlobalProperties
:
[
"
ChromeUtils
"
]
}
)
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
tmp
)
;
var
{
PageThumbsStorageMigrator
}
=
tmp
;
async
function
runTests
(
)
{
let
localProfile
=
await
IOUtils
.
getDirectory
(
PathUtils
.
join
(
PathUtils
.
profileDir
"
local
-
test
"
)
)
;
changeLocation
(
"
ProfLD
"
localProfile
)
;
let
roaming
=
await
IOUtils
.
getDirectory
(
PathUtils
.
join
(
PathUtils
.
profileDir
THUMBNAIL_DIRECTORY
)
)
;
let
name
=
PageThumbsStorageService
.
getLeafNameForURL
(
URL
)
;
let
file
=
await
IOUtils
.
getFile
(
PathUtils
.
profileDir
THUMBNAIL_DIRECTORY
name
)
;
writeDummyFile
(
file
)
;
name
=
PageThumbsStorageService
.
getLeafNameForURL
(
URL2
)
;
file
=
await
IOUtils
.
getFile
(
PathUtils
.
profileDir
THUMBNAIL_DIRECTORY
name
)
;
writeDummyFile
(
file
)
;
name
=
PageThumbsStorageService
.
getLeafNameForURL
(
URL3
)
;
file
=
await
IOUtils
.
getFile
(
PathUtils
.
profileDir
THUMBNAIL_DIRECTORY
name
)
;
writeDummyFile
(
file
)
;
name
=
PageThumbsStorageService
.
getLeafNameForURL
(
URL3
)
;
file
=
await
IOUtils
.
getFile
(
PathUtils
.
profileDir
THUMBNAIL_DIRECTORY
name
)
;
writeDummyFile
(
file
"
no
-
overwrite
-
plz
"
)
;
PageThumbsStorageMigrator
.
migrateToVersion3
(
localProfile
.
path
)
;
ok
(
true
"
migration
finished
"
)
;
await
whenFileExists
(
URL
)
;
ok
(
true
"
first
thumbnail
moved
"
)
;
await
whenFileExists
(
URL2
)
;
ok
(
true
"
second
thumbnail
moved
"
)
;
await
whenFileRemoved
(
roaming
)
;
ok
(
true
"
roaming
thumbnail
directory
removed
"
)
;
is
(
getFileContents
(
file
)
"
no
-
overwrite
-
plz
"
"
existing
thumbnail
was
not
overwritten
"
)
;
}
function
changeLocation
(
aLocation
aNewDir
)
{
let
oldDir
=
Services
.
dirsvc
.
get
(
aLocation
Ci
.
nsIFile
)
;
Services
.
dirsvc
.
undefine
(
aLocation
)
;
Services
.
dirsvc
.
set
(
aLocation
aNewDir
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
dirsvc
.
undefine
(
aLocation
)
;
Services
.
dirsvc
.
set
(
aLocation
oldDir
)
;
}
)
;
}
function
writeDummyFile
(
aFile
aContents
)
{
let
fos
=
FileUtils
.
openSafeFileOutputStream
(
aFile
)
;
let
data
=
aContents
|
|
"
dummy
"
;
fos
.
write
(
data
data
.
length
)
;
FileUtils
.
closeSafeFileOutputStream
(
fos
)
;
}
function
getFileContents
(
aFile
)
{
let
istream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
istream
.
init
(
aFile
FileUtils
.
MODE_RDONLY
FileUtils
.
PERMS_FILE
0
)
;
return
NetUtil
.
readInputStreamToString
(
istream
istream
.
available
(
)
)
;
}
