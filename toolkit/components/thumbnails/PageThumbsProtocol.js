"
use
strict
"
;
const
Cu
=
Components
.
utils
;
const
Cc
=
Components
.
classes
;
const
Cr
=
Components
.
results
;
const
Ci
=
Components
.
interfaces
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
this
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
const
SUBSTITUTING_URL_CID
=
"
{
dea9657c
-
18cf
-
4984
-
bde9
-
ccef5d8ab473
}
"
;
function
Protocol
(
)
{
}
Protocol
.
prototype
=
{
get
scheme
(
)
{
return
PageThumbs
.
scheme
;
}
get
defaultPort
(
)
{
return
-
1
;
}
get
protocolFlags
(
)
{
return
Ci
.
nsIProtocolHandler
.
URI_DANGEROUS_TO_LOAD
|
Ci
.
nsIProtocolHandler
.
URI_IS_LOCAL_RESOURCE
|
Ci
.
nsIProtocolHandler
.
URI_NORELATIVE
|
Ci
.
nsIProtocolHandler
.
URI_NOAUTH
;
}
newURI
:
function
Proto_newURI
(
aSpec
aOriginCharset
)
{
let
uri
=
Components
.
classesByID
[
SUBSTITUTING_URL_CID
]
.
createInstance
(
Ci
.
nsIURL
)
;
uri
.
spec
=
aSpec
;
return
uri
;
}
newChannel2
:
function
Proto_newChannel2
(
aURI
aLoadInfo
)
{
let
{
url
}
=
parseURI
(
aURI
)
;
let
file
=
PageThumbsStorage
.
getFilePathForURL
(
url
)
;
let
fileuri
=
Services
.
io
.
newFileURI
(
new
FileUtils
.
File
(
file
)
)
;
let
channel
=
Services
.
io
.
newChannelFromURIWithLoadInfo
(
fileuri
aLoadInfo
)
;
channel
.
originalURI
=
aURI
;
return
channel
;
}
newChannel
:
function
Proto_newChannel
(
aURI
)
{
return
this
.
newChannel2
(
aURI
null
)
;
}
allowPort
:
(
)
=
>
false
setSubstitution
(
root
baseURI
)
{
}
getSubstitution
(
root
)
{
throw
Cr
.
NS_ERROR_NOT_AVAILABLE
;
}
hasSubstitution
(
root
)
{
return
false
;
}
resolveURI
(
resURI
)
{
let
{
url
}
=
parseURI
(
resURI
)
;
let
path
=
PageThumbsStorage
.
getFilePathForURL
(
url
)
;
return
OS
.
Path
.
toFileURI
(
path
)
;
}
classID
:
Components
.
ID
(
"
{
5a4ae9b5
-
f475
-
48ae
-
9dce
-
0b4c1d347884
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIProtocolHandler
Ci
.
nsISubstitutingProtocolHandler
]
)
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
Protocol
]
)
;
function
parseURI
(
aURI
)
{
if
(
aURI
.
host
!
=
PageThumbs
.
staticHost
)
throw
Cr
.
NS_ERROR_NOT_AVAILABLE
;
let
{
query
}
=
aURI
.
QueryInterface
(
Ci
.
nsIURL
)
;
let
params
=
{
}
;
query
.
split
(
"
&
"
)
.
forEach
(
function
(
aParam
)
{
let
[
key
value
]
=
aParam
.
split
(
"
=
"
)
.
map
(
decodeURIComponent
)
;
params
[
key
.
toLowerCase
(
)
]
=
value
;
}
)
;
return
params
;
}
