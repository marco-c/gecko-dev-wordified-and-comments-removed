#
include
"
nsIPageThumbsStorageService
.
h
"
#
include
"
PageThumbsProtocol
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIFileURL
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mozilla
/
dom
/
URLSearchParams
.
h
"
#
include
"
nsStandardURL
.
h
"
using
mozilla
:
:
dom
:
:
URLParams
;
using
mozilla
:
:
net
:
:
nsStandardURL
;
NS_IMPL_ISUPPORTS
(
PageThumbsProtocol
nsIProtocolHandler
)
;
NS_IMETHODIMP
PageThumbsProtocol
:
:
GetScheme
(
nsACString
&
aScheme
)
{
aScheme
.
AssignLiteral
(
"
moz
-
page
-
thumb
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PageThumbsProtocol
:
:
GetDefaultPort
(
int32_t
*
aDefaultPort
)
{
*
aDefaultPort
=
-
1
;
return
NS_OK
;
}
NS_IMETHODIMP
PageThumbsProtocol
:
:
GetProtocolFlags
(
uint32_t
*
aProtocolFlags
)
{
*
aProtocolFlags
=
(
URI_DANGEROUS_TO_LOAD
|
URI_IS_LOCAL_RESOURCE
|
URI_NORELATIVE
|
URI_NOAUTH
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PageThumbsProtocol
:
:
NewURI
(
const
nsACString
&
aSpec
const
char
*
aOriginCharset
nsIURI
*
aBaseURI
nsIURI
*
*
_retval
)
{
nsCOMPtr
<
nsIURI
>
uri
=
do_CreateInstance
(
NS_SIMPLEURI_CONTRACTID
)
;
nsresult
rv
=
uri
-
>
SetSpec
(
aSpec
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
uri
.
forget
(
_retval
)
;
return
rv
;
}
NS_IMETHODIMP
PageThumbsProtocol
:
:
NewChannel2
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
nsIChannel
*
*
_retval
)
{
nsCOMPtr
<
nsIFile
>
filePath
;
nsresult
rv
=
GetFilePathForURL
(
aURI
getter_AddRefs
(
filePath
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
nsCOMPtr
<
nsIURI
>
fileURI
;
rv
=
NS_NewFileURI
(
getter_AddRefs
(
fileURI
)
filePath
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
nsCOMPtr
<
nsIChannel
>
channel
;
nsCOMPtr
<
nsIIOService
>
ios
=
do_GetIOService
(
)
;
rv
=
ios
-
>
NewChannelFromURIWithLoadInfo
(
fileURI
aLoadInfo
getter_AddRefs
(
channel
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
channel
-
>
SetOriginalURI
(
aURI
)
;
channel
.
forget
(
_retval
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PageThumbsProtocol
:
:
NewChannel
(
nsIURI
*
aURI
nsIChannel
*
*
_retval
)
{
return
NewChannel2
(
aURI
nullptr
_retval
)
;
}
NS_IMETHODIMP
PageThumbsProtocol
:
:
AllowPort
(
int32_t
aPort
const
char
*
aScheme
bool
*
_retval
)
{
*
_retval
=
false
;
return
NS_OK
;
}
nsresult
PageThumbsProtocol
:
:
ParseProtocolURL
(
nsIURI
*
aURI
nsString
&
aParsedURL
)
{
nsAutoCString
spec
;
aURI
-
>
GetSpec
(
spec
)
;
nsAutoCString
host
;
host
=
Substring
(
spec
spec
.
FindChar
(
'
:
'
)
+
3
9
)
;
if
(
!
host
.
EqualsLiteral
(
"
thumbnail
"
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsAutoCString
path
;
nsresult
rv
=
aURI
-
>
GetPathQueryRef
(
path
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
int32_t
queryBegins
=
path
.
FindChar
(
'
?
'
)
;
if
(
queryBegins
<
=
0
)
{
return
NS_ERROR_MALFORMED_URI
;
}
URLParams
params
;
params
.
ParseInput
(
Substring
(
path
queryBegins
+
1
)
)
;
params
.
Get
(
NS_LITERAL_STRING
(
"
url
"
)
aParsedURL
)
;
if
(
aParsedURL
.
IsVoid
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
NS_OK
;
}
nsresult
PageThumbsProtocol
:
:
GetFilePathForURL
(
nsIURI
*
aURI
nsIFile
*
*
_retval
)
{
nsresult
rv
;
nsAutoString
filePathForURL
;
nsCOMPtr
<
nsIPageThumbsStorageService
>
pageThumbsStorage
=
do_GetService
(
"
mozilla
.
org
/
thumbnails
/
pagethumbs
-
service
;
1
"
&
rv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
nsAutoString
parsedURL
;
rv
=
ParseProtocolURL
(
aURI
parsedURL
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
rv
=
pageThumbsStorage
-
>
GetFilePathForURL
(
parsedURL
filePathForURL
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
nsCOMPtr
<
nsIFile
>
filePath
=
do_CreateInstance
(
NS_LOCAL_FILE_CONTRACTID
)
;
rv
=
filePath
-
>
InitWithPath
(
filePathForURL
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
return
rv
;
filePath
.
forget
(
_retval
)
;
return
NS_OK
;
}
