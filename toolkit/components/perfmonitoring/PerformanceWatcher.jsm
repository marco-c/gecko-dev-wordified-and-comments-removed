"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PerformanceWatcher
"
]
;
let
{
PerformanceStats
performanceStatsService
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PerformanceStats
.
jsm
"
{
}
)
;
let
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
let
isContent
=
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
;
if
(
!
isContent
)
{
Services
.
ppmm
.
loadProcessScript
(
"
resource
:
/
/
gre
/
modules
/
PerformanceWatcher
-
content
.
js
"
true
)
;
Services
.
ppmm
.
addMessageListener
(
"
performancewatcher
-
propagate
-
notifications
"
(
.
.
.
args
)
=
>
ChildManager
.
notifyObservers
(
.
.
.
args
)
)
;
}
performanceStatsService
.
jankAlertThreshold
=
64000
;
function
ChildManager
(
map
key
)
{
this
.
key
=
key
;
this
.
_map
=
map
;
this
.
_listeners
=
new
Set
(
)
;
}
ChildManager
.
prototype
=
{
addListener
(
listener
)
{
this
.
_listeners
.
add
(
listener
)
;
}
removeListener
(
listener
)
{
let
deleted
=
this
.
_listeners
.
delete
(
listener
)
;
if
(
!
deleted
)
{
throw
new
Error
(
"
Unknown
listener
"
)
;
}
}
listeners
(
)
{
return
this
.
_listeners
.
values
(
)
;
}
}
;
ChildManager
.
notifyObservers
=
function
(
{
data
:
{
windows
}
}
)
{
if
(
windows
&
&
windows
.
length
>
0
)
{
this
.
_notify
(
ChildManager
.
getWindow
(
0
)
.
listeners
(
)
windows
)
;
for
(
let
{
source
details
}
of
windows
)
{
this
.
_notify
(
ChildManager
.
getWindow
(
source
.
windowId
)
.
listeners
(
)
source
details
)
;
}
}
}
;
ChildManager
.
_notify
=
function
(
targets
.
.
.
args
)
{
for
(
let
target
of
targets
)
{
target
(
.
.
.
args
)
;
}
}
;
ChildManager
.
getWindow
=
function
(
key
)
{
return
this
.
_get
(
this
.
_windows
key
)
;
}
;
ChildManager
.
_windows
=
new
Map
(
)
;
ChildManager
.
_get
=
function
(
map
key
)
{
let
result
=
map
.
get
(
key
)
;
if
(
!
result
)
{
result
=
new
ChildManager
(
map
key
)
;
map
.
set
(
key
result
)
;
}
return
result
;
}
;
let
gListeners
=
new
WeakMap
(
)
;
function
Observable
(
target
)
{
this
.
_observers
=
new
Map
(
)
;
if
(
"
tab
"
in
target
|
|
"
windowId
"
in
target
)
{
let
windowId
;
if
(
"
tab
"
in
target
)
{
windowId
=
target
.
tab
.
linkedBrowser
.
outerWindowID
;
}
else
if
(
"
windowId
"
in
target
)
{
windowId
=
target
.
windowId
;
}
if
(
windowId
=
=
undefined
|
|
windowId
=
=
null
)
{
throw
new
TypeError
(
No
outerWindowID
.
Perhaps
the
target
is
a
tab
that
is
not
initialized
yet
.
)
;
}
this
.
_key
=
tab
-
windowId
:
{
windowId
}
;
this
.
_process
=
performanceStatsService
.
getObservableWindow
(
windowId
)
;
this
.
_children
=
isContent
?
null
:
ChildManager
.
getWindow
(
windowId
)
;
this
.
_isBuffered
=
windowId
=
=
0
;
}
else
{
throw
new
TypeError
(
"
Unexpected
target
"
)
;
}
}
Observable
.
prototype
=
{
addJankObserver
(
listener
)
{
if
(
this
.
_observers
.
has
(
listener
)
)
{
throw
new
TypeError
(
Listener
already
registered
for
target
{
this
.
_key
}
)
;
}
if
(
this
.
_children
)
{
this
.
_children
.
addListener
(
listener
)
;
}
let
observer
=
this
.
_isBuffered
?
new
BufferedObserver
(
listener
)
:
new
Observer
(
listener
)
;
this
.
_observers
.
set
(
listener
observer
)
;
this
.
_process
.
addJankObserver
(
observer
)
;
}
removeJankObserver
(
listener
)
{
let
observer
=
this
.
_observers
.
get
(
listener
)
;
if
(
!
observer
)
{
throw
new
TypeError
(
No
listener
for
target
{
this
.
_key
}
)
;
}
this
.
_observers
.
delete
(
listener
)
;
if
(
this
.
_children
)
{
this
.
_children
.
removeListener
(
listener
)
;
}
this
.
_process
.
removeJankObserver
(
observer
)
;
observer
.
dispose
(
)
;
}
}
;
Observable
.
get
=
function
(
target
)
{
let
key
;
if
(
"
tab
"
in
target
)
{
key
=
target
.
tab
.
linkedBrowser
.
outerWindowID
;
}
else
if
(
"
windowId
"
in
target
)
{
key
=
target
.
windowId
;
}
if
(
key
=
=
null
)
{
throw
new
TypeError
(
Could
not
extract
a
key
from
{
JSON
.
stringify
(
target
)
}
.
Could
the
target
be
an
unitialized
tab
?
)
;
}
let
observable
=
this
.
_cache
.
get
(
key
)
;
if
(
!
observable
)
{
observable
=
new
Observable
(
target
)
;
this
.
_cache
.
set
(
key
observable
)
;
}
return
observable
;
}
;
Observable
.
_cache
=
new
Map
(
)
;
function
Observer
(
listener
)
{
this
.
_monitor
=
PerformanceStats
.
getMonitor
(
[
"
jank
"
"
cpow
"
]
)
;
this
.
_listener
=
listener
;
}
Observer
.
prototype
=
{
observe
(
.
.
.
args
)
{
this
.
_listener
(
.
.
.
args
)
;
}
dispose
(
)
{
this
.
_monitor
.
dispose
(
)
;
this
.
observe
=
function
poison
(
)
{
throw
new
Error
(
"
Internal
error
:
I
should
have
stopped
receiving
notifications
"
)
;
}
;
}
}
;
function
BufferedObserver
(
listener
)
{
Observer
.
call
(
this
listener
)
;
this
.
_buffer
=
[
]
;
this
.
_isDispatching
=
false
;
this
.
_pending
=
null
;
}
BufferedObserver
.
prototype
=
Object
.
create
(
Observer
.
prototype
)
;
BufferedObserver
.
prototype
.
observe
=
function
(
source
details
)
{
this
.
_buffer
.
push
(
{
source
details
}
)
;
if
(
!
this
.
_isDispatching
)
{
this
.
_isDispatching
=
true
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
let
buffer
=
this
.
_buffer
;
this
.
_buffer
=
[
]
;
this
.
_isDispatching
=
false
;
this
.
_listener
(
buffer
)
;
}
)
;
}
}
;
var
PerformanceWatcher
=
{
addPerformanceListener
(
target
listener
)
{
if
(
typeof
listener
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
let
observable
=
Observable
.
get
(
target
)
;
observable
.
addJankObserver
(
listener
)
;
}
removePerformanceListener
(
target
listener
)
{
if
(
typeof
listener
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
let
observable
=
Observable
.
get
(
target
)
;
observable
.
removeJankObserver
(
listener
)
;
}
}
;
