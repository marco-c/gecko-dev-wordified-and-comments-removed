#
ifndef
PerformanceMetricsCollector_h
#
define
PerformanceMetricsCollector_h
#
include
"
nsID
.
h
"
#
include
"
mozilla
/
dom
/
ChromeUtilsBinding
.
h
"
#
include
"
mozilla
/
dom
/
DOMTypes
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
}
class
PerformanceMetricsCollector
;
class
AggregatedResults
final
{
public
:
AggregatedResults
(
nsID
aUUID
PerformanceMetricsCollector
*
aCollector
dom
:
:
Promise
*
aPromise
)
;
~
AggregatedResults
(
)
=
default
;
void
AppendResult
(
const
nsTArray
<
dom
:
:
PerformanceInfo
>
&
aMetrics
)
;
void
SetNumResultsRequired
(
uint32_t
aNumResultsRequired
)
;
void
Abort
(
nsresult
aReason
)
;
private
:
RefPtr
<
dom
:
:
Promise
>
mPromise
;
uint32_t
mPendingResults
;
FallibleTArray
<
dom
:
:
PerformanceInfoDictionary
>
mData
;
RefPtr
<
PerformanceMetricsCollector
>
mCollector
;
nsID
mUUID
;
}
;
class
PerformanceMetricsCollector
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
PerformanceMetricsCollector
)
static
void
RequestMetrics
(
dom
:
:
Promise
*
aPromise
)
;
static
nsresult
DataReceived
(
const
nsID
&
aUUID
const
nsTArray
<
dom
:
:
PerformanceInfo
>
&
aMetrics
)
;
void
ForgetAggregatedResults
(
const
nsID
&
aUUID
)
;
private
:
~
PerformanceMetricsCollector
(
)
;
void
RequestMetricsInternal
(
dom
:
:
Promise
*
aPromise
)
;
nsresult
DataReceivedInternal
(
const
nsID
&
aUUID
const
nsTArray
<
dom
:
:
PerformanceInfo
>
&
aMetrics
)
;
nsDataHashtable
<
nsIDHashKey
UniquePtr
<
AggregatedResults
>
>
mAggregatedResults
;
}
;
}
#
endif
