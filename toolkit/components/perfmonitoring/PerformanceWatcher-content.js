"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
let
isContent
=
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
;
if
(
isContent
)
{
const
{
PerformanceWatcher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PerformanceWatcher
.
jsm
"
{
}
)
;
let
toMsg
=
function
(
alerts
)
{
let
result
=
[
]
;
for
(
let
{
source
details
}
of
alerts
)
{
let
serializableSource
=
{
}
;
for
(
let
k
of
[
"
groupId
"
"
name
"
"
windowId
"
"
isSystem
"
"
processId
"
"
isContentProcess
"
]
)
{
serializableSource
[
k
]
=
source
[
k
]
;
}
let
serializableDetails
=
{
}
;
for
(
let
k
of
[
"
reason
"
"
highestJank
"
"
highestCPOW
"
]
)
{
serializableDetails
[
k
]
=
details
[
k
]
;
}
result
.
push
(
{
source
:
serializableSource
details
:
serializableDetails
}
)
;
}
return
result
;
}
;
PerformanceWatcher
.
addPerformanceListener
(
{
windowId
:
0
}
alerts
=
>
{
Services
.
cpmm
.
sendAsyncMessage
(
"
performancewatcher
-
propagate
-
notifications
"
{
windows
:
toMsg
(
alerts
)
}
)
;
}
)
;
}
