#
include
"
nsPerformanceStats
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIMutableArray
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
xpcpublic
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
processthreadsapi
.
h
>
#
include
<
windows
.
h
>
#
else
#
include
<
unistd
.
h
>
#
endif
#
if
defined
(
XP_MACOSX
)
#
include
<
mach
/
mach_init
.
h
>
#
include
<
mach
/
mach_interface
.
h
>
#
include
<
mach
/
mach_port
.
h
>
#
include
<
mach
/
mach_types
.
h
>
#
include
<
mach
/
message
.
h
>
#
include
<
mach
/
thread_info
.
h
>
#
elif
defined
(
XP_UNIX
)
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
resource
.
h
>
#
endif
namespace
{
already_AddRefed
<
nsPIDOMWindowOuter
>
GetPrivateWindow
(
JSContext
*
cx
)
{
nsGlobalWindowInner
*
win
=
xpc
:
:
CurrentWindowOrNull
(
cx
)
;
if
(
!
win
)
{
return
nullptr
;
}
nsPIDOMWindowOuter
*
outer
=
win
-
>
AsInner
(
)
-
>
GetOuterWindow
(
)
;
if
(
!
outer
)
{
return
nullptr
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
top
=
outer
-
>
GetTop
(
)
;
if
(
!
top
)
{
return
nullptr
;
}
return
top
.
forget
(
)
;
}
bool
URLForGlobal
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
global
nsAString
&
url
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsContentUtils
:
:
ObjectPrincipal
(
global
)
;
if
(
!
principal
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
principal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
uri
)
{
return
false
;
}
nsAutoCString
spec
;
rv
=
uri
-
>
GetSpec
(
spec
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
url
.
Assign
(
NS_ConvertUTF8toUTF16
(
spec
)
)
;
return
true
;
}
void
RealmName
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
global
nsAString
&
name
)
{
if
(
URLForGlobal
(
cx
global
name
)
)
{
return
;
}
nsAutoCString
cname
;
xpc
:
:
GetCurrentRealmName
(
cx
cname
)
;
name
.
Assign
(
NS_ConvertUTF8toUTF16
(
cname
)
)
;
}
void
GenerateUniqueGroupId
(
uint64_t
uid
uint64_t
processId
nsAString
&
groupId
)
{
uint64_t
threadId
=
reinterpret_cast
<
uint64_t
>
(
mozilla
:
:
GetCurrentPhysicalThread
(
)
)
;
groupId
.
AssignLiteral
(
"
process
:
"
)
;
groupId
.
AppendInt
(
processId
)
;
groupId
.
AppendLiteral
(
"
thread
:
"
)
;
groupId
.
AppendInt
(
threadId
)
;
groupId
.
AppendLiteral
(
"
group
:
"
)
;
groupId
.
AppendInt
(
uid
)
;
}
static
const
char
*
TOPICS
[
]
=
{
"
profile
-
before
-
change
"
"
quit
-
application
"
"
quit
-
application
-
granted
"
"
xpcom
-
will
-
shutdown
"
}
;
}
NS_IMPL_ISUPPORTS
(
nsPerformanceObservationTarget
nsIPerformanceObservable
)
NS_IMETHODIMP
nsPerformanceObservationTarget
:
:
GetTarget
(
nsIPerformanceGroupDetails
*
*
_result
)
{
if
(
mDetails
)
{
NS_IF_ADDREF
(
*
_result
=
mDetails
)
;
}
return
NS_OK
;
}
;
void
nsPerformanceObservationTarget
:
:
SetTarget
(
nsPerformanceGroupDetails
*
details
)
{
MOZ_ASSERT
(
!
mDetails
)
;
mDetails
=
details
;
}
;
NS_IMETHODIMP
nsPerformanceObservationTarget
:
:
AddJankObserver
(
nsIPerformanceObserver
*
observer
)
{
if
(
!
mObservers
.
append
(
observer
)
)
{
MOZ_CRASH
(
)
;
}
return
NS_OK
;
}
;
NS_IMETHODIMP
nsPerformanceObservationTarget
:
:
RemoveJankObserver
(
nsIPerformanceObserver
*
observer
)
{
for
(
auto
iter
=
mObservers
.
begin
(
)
end
=
mObservers
.
end
(
)
;
iter
<
end
;
+
+
iter
)
{
if
(
*
iter
=
=
observer
)
{
mObservers
.
erase
(
iter
)
;
return
NS_OK
;
}
}
return
NS_OK
;
}
;
bool
nsPerformanceObservationTarget
:
:
HasObservers
(
)
const
{
return
!
mObservers
.
empty
(
)
;
}
void
nsPerformanceObservationTarget
:
:
NotifyJankObservers
(
nsIPerformanceGroupDetails
*
source
nsIPerformanceAlert
*
gravity
)
{
mozilla
:
:
Vector
<
nsCOMPtr
<
nsIPerformanceObserver
>
>
observers
;
if
(
!
observers
.
appendAll
(
mObservers
)
)
{
MOZ_CRASH
(
)
;
}
for
(
auto
iter
=
observers
.
begin
(
)
end
=
observers
.
end
(
)
;
iter
<
end
;
+
+
iter
)
{
nsCOMPtr
<
nsIPerformanceObserver
>
observer
=
*
iter
;
mozilla
:
:
Unused
<
<
observer
-
>
Observe
(
source
gravity
)
;
}
}
nsPerformanceObservationTarget
*
nsGroupHolder
:
:
ObservationTarget
(
)
{
if
(
!
mPendingObservationTarget
)
{
mPendingObservationTarget
=
new
nsPerformanceObservationTarget
(
)
;
}
return
mPendingObservationTarget
;
}
nsPerformanceGroup
*
nsGroupHolder
:
:
GetGroup
(
)
{
return
mGroup
;
}
void
nsGroupHolder
:
:
SetGroup
(
nsPerformanceGroup
*
group
)
{
MOZ_ASSERT
(
!
mGroup
)
;
mGroup
=
group
;
group
-
>
SetObservationTarget
(
ObservationTarget
(
)
)
;
mPendingObservationTarget
-
>
SetTarget
(
group
-
>
Details
(
)
)
;
}
PerformanceData
:
:
PerformanceData
(
)
:
mTotalUserTime
(
0
)
mTotalSystemTime
(
0
)
mTotalCPOWTime
(
0
)
mTicks
(
0
)
{
mozilla
:
:
PodArrayZero
(
mDurations
)
;
}
NS_IMPL_ISUPPORTS
(
nsPerformanceGroupDetails
nsIPerformanceGroupDetails
)
const
nsAString
&
nsPerformanceGroupDetails
:
:
Name
(
)
const
{
return
mName
;
}
const
nsAString
&
nsPerformanceGroupDetails
:
:
GroupId
(
)
const
{
return
mGroupId
;
}
uint64_t
nsPerformanceGroupDetails
:
:
WindowId
(
)
const
{
return
mWindowId
;
}
uint64_t
nsPerformanceGroupDetails
:
:
ProcessId
(
)
const
{
return
mProcessId
;
}
bool
nsPerformanceGroupDetails
:
:
IsSystem
(
)
const
{
return
mIsSystem
;
}
bool
nsPerformanceGroupDetails
:
:
IsWindow
(
)
const
{
return
mWindowId
!
=
0
;
}
bool
nsPerformanceGroupDetails
:
:
IsContentProcess
(
)
const
{
return
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Content
;
}
NS_IMETHODIMP
nsPerformanceGroupDetails
:
:
GetName
(
nsAString
&
aName
)
{
aName
.
Assign
(
Name
(
)
)
;
return
NS_OK
;
}
;
NS_IMETHODIMP
nsPerformanceGroupDetails
:
:
GetGroupId
(
nsAString
&
aGroupId
)
{
aGroupId
.
Assign
(
GroupId
(
)
)
;
return
NS_OK
;
}
;
NS_IMETHODIMP
nsPerformanceGroupDetails
:
:
GetWindowId
(
uint64_t
*
aWindowId
)
{
*
aWindowId
=
WindowId
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceGroupDetails
:
:
GetIsSystem
(
bool
*
_retval
)
{
*
_retval
=
IsSystem
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceGroupDetails
:
:
GetProcessId
(
uint64_t
*
processId
)
{
*
processId
=
ProcessId
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceGroupDetails
:
:
GetIsContentProcess
(
bool
*
_retval
)
{
*
_retval
=
IsContentProcess
(
)
;
return
NS_OK
;
}
class
nsPerformanceStats
final
:
public
nsIPerformanceStats
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPERFORMANCESTATS
NS_FORWARD_NSIPERFORMANCEGROUPDETAILS
(
mDetails
-
>
)
nsPerformanceStats
(
nsPerformanceGroupDetails
*
item
const
PerformanceData
&
aPerformanceData
)
:
mDetails
(
item
)
mPerformanceData
(
aPerformanceData
)
{
}
private
:
RefPtr
<
nsPerformanceGroupDetails
>
mDetails
;
PerformanceData
mPerformanceData
;
~
nsPerformanceStats
(
)
{
}
}
;
NS_IMPL_ISUPPORTS
(
nsPerformanceStats
nsIPerformanceStats
nsIPerformanceGroupDetails
)
NS_IMETHODIMP
nsPerformanceStats
:
:
GetTotalUserTime
(
uint64_t
*
aTotalUserTime
)
{
*
aTotalUserTime
=
mPerformanceData
.
mTotalUserTime
;
return
NS_OK
;
}
;
NS_IMETHODIMP
nsPerformanceStats
:
:
GetTotalSystemTime
(
uint64_t
*
aTotalSystemTime
)
{
*
aTotalSystemTime
=
mPerformanceData
.
mTotalSystemTime
;
return
NS_OK
;
}
;
NS_IMETHODIMP
nsPerformanceStats
:
:
GetTotalCPOWTime
(
uint64_t
*
aCpowTime
)
{
*
aCpowTime
=
mPerformanceData
.
mTotalCPOWTime
;
return
NS_OK
;
}
;
NS_IMETHODIMP
nsPerformanceStats
:
:
GetTicks
(
uint64_t
*
aTicks
)
{
*
aTicks
=
mPerformanceData
.
mTicks
;
return
NS_OK
;
}
;
NS_IMETHODIMP
nsPerformanceStats
:
:
GetDurations
(
uint32_t
*
aCount
uint64_t
*
*
aNumberOfOccurrences
)
{
const
size_t
length
=
mozilla
:
:
ArrayLength
(
mPerformanceData
.
mDurations
)
;
if
(
aCount
)
{
*
aCount
=
length
;
}
*
aNumberOfOccurrences
=
new
uint64_t
[
length
]
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
(
*
aNumberOfOccurrences
)
[
i
]
=
mPerformanceData
.
mDurations
[
i
]
;
}
return
NS_OK
;
}
;
class
nsPerformanceSnapshot
final
:
public
nsIPerformanceSnapshot
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPERFORMANCESNAPSHOT
nsPerformanceSnapshot
(
)
{
}
void
AppendComponentsStats
(
nsIPerformanceStats
*
stats
)
;
void
SetProcessStats
(
nsIPerformanceStats
*
group
)
;
private
:
~
nsPerformanceSnapshot
(
)
{
}
private
:
nsCOMArray
<
nsIPerformanceStats
>
mComponentsData
;
nsCOMPtr
<
nsIPerformanceStats
>
mProcessData
;
}
;
NS_IMPL_ISUPPORTS
(
nsPerformanceSnapshot
nsIPerformanceSnapshot
)
NS_IMETHODIMP
nsPerformanceSnapshot
:
:
GetComponentsData
(
nsIArray
*
*
aComponents
)
{
const
size_t
length
=
mComponentsData
.
Length
(
)
;
nsCOMPtr
<
nsIMutableArray
>
components
=
do_CreateInstance
(
NS_ARRAY_CONTRACTID
)
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
nsCOMPtr
<
nsIPerformanceStats
>
stats
=
mComponentsData
[
i
]
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
components
-
>
AppendElement
(
stats
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
components
.
forget
(
aComponents
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceSnapshot
:
:
GetProcessData
(
nsIPerformanceStats
*
*
aProcess
)
{
NS_IF_ADDREF
(
*
aProcess
=
mProcessData
)
;
return
NS_OK
;
}
void
nsPerformanceSnapshot
:
:
AppendComponentsStats
(
nsIPerformanceStats
*
stats
)
{
mComponentsData
.
AppendElement
(
stats
)
;
}
void
nsPerformanceSnapshot
:
:
SetProcessStats
(
nsIPerformanceStats
*
stats
)
{
mProcessData
=
stats
;
}
class
PerformanceAlert
final
:
public
nsIPerformanceAlert
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPERFORMANCEALERT
PerformanceAlert
(
const
uint32_t
reason
nsPerformanceGroup
*
source
)
;
private
:
~
PerformanceAlert
(
)
{
}
const
uint32_t
mReason
;
const
uint64_t
mHighestJank
;
const
uint64_t
mHighestCPOW
;
}
;
NS_IMPL_ISUPPORTS
(
PerformanceAlert
nsIPerformanceAlert
)
;
PerformanceAlert
:
:
PerformanceAlert
(
const
uint32_t
reason
nsPerformanceGroup
*
source
)
:
mReason
(
reason
)
mHighestJank
(
source
-
>
HighestRecentJank
(
)
)
mHighestCPOW
(
source
-
>
HighestRecentCPOW
(
)
)
{
}
NS_IMETHODIMP
PerformanceAlert
:
:
GetHighestJank
(
uint64_t
*
result
)
{
*
result
=
mHighestJank
;
return
NS_OK
;
}
NS_IMETHODIMP
PerformanceAlert
:
:
GetHighestCPOW
(
uint64_t
*
result
)
{
*
result
=
mHighestCPOW
;
return
NS_OK
;
}
NS_IMETHODIMP
PerformanceAlert
:
:
GetReason
(
uint32_t
*
result
)
{
*
result
=
mReason
;
return
NS_OK
;
}
class
PendingAlertsCollector
final
:
public
nsITimerCallback
public
nsINamed
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
explicit
PendingAlertsCollector
(
nsPerformanceStatsService
*
service
)
:
mService
(
service
)
mPending
(
false
)
{
}
nsresult
Start
(
uint32_t
timerDelayMS
)
;
nsresult
Dispose
(
)
;
private
:
~
PendingAlertsCollector
(
)
{
}
RefPtr
<
nsPerformanceStatsService
>
mService
;
bool
mPending
;
nsCOMPtr
<
nsITimer
>
mTimer
;
mozilla
:
:
Vector
<
uint64_t
>
mJankLevels
;
}
;
NS_IMPL_ISUPPORTS
(
PendingAlertsCollector
nsITimerCallback
nsINamed
)
;
NS_IMETHODIMP
PendingAlertsCollector
:
:
Notify
(
nsITimer
*
)
{
mPending
=
false
;
mService
-
>
NotifyJankObservers
(
mJankLevels
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PendingAlertsCollector
:
:
GetName
(
nsACString
&
aName
)
{
aName
.
AssignASCII
(
"
PendingAlertsCollector_timer
"
)
;
return
NS_OK
;
}
nsresult
PendingAlertsCollector
:
:
Start
(
uint32_t
timerDelayMS
)
{
if
(
mPending
)
{
return
NS_OK
;
}
if
(
!
mTimer
)
{
mTimer
=
NS_NewTimer
(
)
;
}
nsresult
rv
=
mTimer
-
>
InitWithCallback
(
this
timerDelayMS
nsITimer
:
:
TYPE_ONE_SHOT
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
mPending
=
true
;
{
mozilla
:
:
DebugOnly
<
bool
>
result
=
nsRefreshDriver
:
:
GetJankLevels
(
mJankLevels
)
;
MOZ_ASSERT
(
result
)
;
}
return
NS_OK
;
}
nsresult
PendingAlertsCollector
:
:
Dispose
(
)
{
if
(
mTimer
)
{
mozilla
:
:
Unused
<
<
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
}
mService
=
nullptr
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
nsPerformanceStatsService
nsIPerformanceStatsService
nsIObserver
)
nsPerformanceStatsService
:
:
nsPerformanceStatsService
(
)
:
mIsAvailable
(
false
)
mDisposed
(
false
)
#
if
defined
(
XP_WIN
)
mProcessId
(
GetCurrentProcessId
(
)
)
#
else
mProcessId
(
getpid
(
)
)
#
endif
mUIdCounter
(
0
)
mTopGroup
(
nsPerformanceGroup
:
:
Make
(
this
NS_LITERAL_STRING
(
"
<
process
>
"
)
0
mProcessId
true
nsPerformanceGroup
:
:
GroupScope
:
:
RUNTIME
)
)
mIsHandlingUserInput
(
false
)
mProcessStayed
(
0
)
mProcessMoved
(
0
)
mProcessUpdateCounter
(
0
)
mIsMonitoringPerCompartment
(
false
)
mJankAlertThreshold
(
mozilla
:
:
MaxValue
<
uint64_t
>
:
:
value
)
mJankAlertBufferingDelay
(
1000
)
mJankLevelVisibilityThreshold
(
8
)
mMaxExpectedDurationOfInteractionUS
(
150
*
1000
)
{
mPendingAlertsCollector
=
new
PendingAlertsCollector
(
this
)
;
nsString
groupIdForWindows
;
GenerateUniqueGroupId
(
GetNextId
(
)
mProcessId
groupIdForWindows
)
;
mUniversalTargets
.
mWindows
-
>
SetTarget
(
new
nsPerformanceGroupDetails
(
NS_LITERAL_STRING
(
"
<
universal
window
listener
>
"
)
groupIdForWindows
0
mProcessId
false
)
)
;
}
nsPerformanceStatsService
:
:
~
nsPerformanceStatsService
(
)
{
}
void
nsPerformanceStatsService
:
:
Dispose
(
)
{
RefPtr
<
nsPerformanceStatsService
>
kungFuDeathGrip
(
this
)
;
mIsAvailable
=
false
;
if
(
mDisposed
)
{
return
;
}
mDisposed
=
true
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
for
(
size_t
i
=
0
;
i
<
mozilla
:
:
ArrayLength
(
TOPICS
)
;
+
+
i
)
{
mozilla
:
:
Unused
<
<
obs
-
>
RemoveObserver
(
this
TOPICS
[
i
]
)
;
}
}
mozilla
:
:
dom
:
:
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
js
:
:
DisposePerformanceMonitoring
(
cx
)
;
mozilla
:
:
Unused
<
<
js
:
:
SetStopwatchIsMonitoringCPOW
(
cx
false
)
;
mozilla
:
:
Unused
<
<
js
:
:
SetStopwatchIsMonitoringJank
(
cx
false
)
;
mozilla
:
:
Unused
<
<
js
:
:
SetStopwatchStartCallback
(
cx
nullptr
nullptr
)
;
mozilla
:
:
Unused
<
<
js
:
:
SetStopwatchCommitCallback
(
cx
nullptr
nullptr
)
;
mozilla
:
:
Unused
<
<
js
:
:
SetGetPerformanceGroupsCallback
(
cx
nullptr
nullptr
)
;
if
(
mPendingAlertsCollector
)
{
mPendingAlertsCollector
-
>
Dispose
(
)
;
mPendingAlertsCollector
=
nullptr
;
}
mPendingAlerts
.
clear
(
)
;
mUniversalTargets
.
mWindows
=
nullptr
;
mTopGroup
-
>
Dispose
(
)
;
mTopGroup
=
nullptr
;
GroupVector
groups
;
for
(
auto
iter
=
mGroups
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
!
groups
.
append
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
)
{
MOZ_CRASH
(
)
;
}
}
for
(
auto
iter
=
groups
.
begin
(
)
end
=
groups
.
end
(
)
;
iter
<
end
;
+
+
iter
)
{
RefPtr
<
nsPerformanceGroup
>
group
=
*
iter
;
group
-
>
Dispose
(
)
;
}
}
nsresult
nsPerformanceStatsService
:
:
Init
(
)
{
nsresult
rv
=
InitInternal
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
Dispose
(
)
;
}
return
rv
;
}
nsresult
nsPerformanceStatsService
:
:
InitInternal
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
for
(
size_t
i
=
0
;
i
<
mozilla
:
:
ArrayLength
(
TOPICS
)
;
+
+
i
)
{
mozilla
:
:
Unused
<
<
obs
-
>
AddObserver
(
this
TOPICS
[
i
]
false
)
;
}
}
mozilla
:
:
dom
:
:
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
if
(
!
js
:
:
SetStopwatchStartCallback
(
cx
StopwatchStartCallback
this
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
!
js
:
:
SetStopwatchCommitCallback
(
cx
StopwatchCommitCallback
this
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
!
js
:
:
SetGetPerformanceGroupsCallback
(
cx
GetPerformanceGroupsCallback
this
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
mTopGroup
-
>
setIsActive
(
true
)
;
mIsAvailable
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
strcmp
(
aTopic
"
profile
-
before
-
change
"
)
=
=
0
|
|
strcmp
(
aTopic
"
quit
-
application
"
)
=
=
0
|
|
strcmp
(
aTopic
"
quit
-
application
-
granted
"
)
=
=
0
|
|
strcmp
(
aTopic
"
xpcom
-
will
-
shutdown
"
)
=
=
0
)
;
Dispose
(
)
;
return
NS_OK
;
}
bool
nsPerformanceStatsService
:
:
IsHandlingUserInput
(
)
{
if
(
mozilla
:
:
EventStateManager
:
:
LatestUserInputStart
(
)
.
IsNull
(
)
)
{
return
false
;
}
bool
result
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
-
mozilla
:
:
EventStateManager
:
:
LatestUserInputStart
(
)
<
=
mozilla
:
:
TimeDuration
:
:
FromMicroseconds
(
mMaxExpectedDurationOfInteractionUS
)
;
return
result
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetIsMonitoringCPOW
(
JSContext
*
cx
bool
*
aIsStopwatchActive
)
{
if
(
!
mIsAvailable
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
*
aIsStopwatchActive
=
js
:
:
GetStopwatchIsMonitoringCPOW
(
cx
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
SetIsMonitoringCPOW
(
JSContext
*
cx
bool
aIsStopwatchActive
)
{
if
(
!
mIsAvailable
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
!
js
:
:
SetStopwatchIsMonitoringCPOW
(
cx
aIsStopwatchActive
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetIsMonitoringJank
(
JSContext
*
cx
bool
*
aIsStopwatchActive
)
{
if
(
!
mIsAvailable
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
*
aIsStopwatchActive
=
js
:
:
GetStopwatchIsMonitoringJank
(
cx
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
SetIsMonitoringJank
(
JSContext
*
cx
bool
aIsStopwatchActive
)
{
if
(
!
mIsAvailable
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
!
js
:
:
SetStopwatchIsMonitoringJank
(
cx
aIsStopwatchActive
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetIsMonitoringPerCompartment
(
JSContext
*
bool
*
aIsMonitoringPerCompartment
)
{
if
(
!
mIsAvailable
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
*
aIsMonitoringPerCompartment
=
mIsMonitoringPerCompartment
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
SetIsMonitoringPerCompartment
(
JSContext
*
bool
aIsMonitoringPerCompartment
)
{
if
(
!
mIsAvailable
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
aIsMonitoringPerCompartment
=
=
mIsMonitoringPerCompartment
)
{
return
NS_OK
;
}
for
(
auto
iter
=
mGroups
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
nsPerformanceGroup
>
group
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
if
(
group
-
>
Scope
(
)
=
=
nsPerformanceGroup
:
:
GroupScope
:
:
COMPARTMENT
)
{
group
-
>
setIsActive
(
aIsMonitoringPerCompartment
)
;
}
}
mIsMonitoringPerCompartment
=
aIsMonitoringPerCompartment
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetJankAlertThreshold
(
uint64_t
*
result
)
{
*
result
=
mJankAlertThreshold
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
SetJankAlertThreshold
(
uint64_t
value
)
{
mJankAlertThreshold
=
value
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetJankAlertBufferingDelay
(
uint32_t
*
result
)
{
*
result
=
mJankAlertBufferingDelay
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
SetJankAlertBufferingDelay
(
uint32_t
value
)
{
mJankAlertBufferingDelay
=
value
;
return
NS_OK
;
}
nsresult
nsPerformanceStatsService
:
:
UpdateTelemetry
(
)
{
const
double
processStayed
=
mProcessStayed
;
const
double
processMoved
=
mProcessMoved
;
if
(
processStayed
<
=
0
|
|
processMoved
<
=
0
|
|
processStayed
+
processMoved
<
=
0
)
{
return
NS_OK
;
}
const
double
proportion
=
(
100
*
processStayed
)
/
(
processStayed
+
processMoved
)
;
if
(
proportion
<
0
|
|
proportion
>
100
)
{
return
NS_OK
;
}
mozilla
:
:
Telemetry
:
:
Accumulate
(
mozilla
:
:
Telemetry
:
:
PERF_MONITORING_TEST_CPU_RESCHEDULING_PROPORTION_MOVED
(
uint32_t
)
proportion
)
;
return
NS_OK
;
}
nsIPerformanceStats
*
nsPerformanceStatsService
:
:
GetStatsForGroup
(
const
js
:
:
PerformanceGroup
*
group
)
{
return
GetStatsForGroup
(
nsPerformanceGroup
:
:
Get
(
group
)
)
;
}
nsIPerformanceStats
*
nsPerformanceStatsService
:
:
GetStatsForGroup
(
const
nsPerformanceGroup
*
group
)
{
return
new
nsPerformanceStats
(
group
-
>
Details
(
)
group
-
>
data
)
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetSnapshot
(
JSContext
*
cx
nsIPerformanceSnapshot
*
*
aSnapshot
)
{
if
(
!
mIsAvailable
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
RefPtr
<
nsPerformanceSnapshot
>
snapshot
=
new
nsPerformanceSnapshot
(
)
;
snapshot
-
>
SetProcessStats
(
GetStatsForGroup
(
mTopGroup
)
)
;
for
(
auto
iter
=
mGroups
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
*
entry
=
iter
.
Get
(
)
;
nsPerformanceGroup
*
group
=
entry
-
>
GetKey
(
)
;
if
(
group
-
>
isActive
(
)
)
{
snapshot
-
>
AppendComponentsStats
(
GetStatsForGroup
(
group
)
)
;
}
}
js
:
:
GetPerfMonitoringTestCpuRescheduling
(
cx
&
mProcessStayed
&
mProcessMoved
)
;
if
(
+
+
mProcessUpdateCounter
%
10
=
=
0
)
{
mozilla
:
:
Unused
<
<
UpdateTelemetry
(
)
;
}
snapshot
.
forget
(
aSnapshot
)
;
return
NS_OK
;
}
uint64_t
nsPerformanceStatsService
:
:
GetNextId
(
)
{
return
+
+
mUIdCounter
;
}
bool
nsPerformanceStatsService
:
:
GetPerformanceGroupsCallback
(
JSContext
*
cx
js
:
:
PerformanceGroupVector
&
out
void
*
closure
)
{
RefPtr
<
nsPerformanceStatsService
>
self
=
reinterpret_cast
<
nsPerformanceStatsService
*
>
(
closure
)
;
return
self
-
>
GetPerformanceGroups
(
cx
out
)
;
}
bool
nsPerformanceStatsService
:
:
GetPerformanceGroups
(
JSContext
*
cx
js
:
:
PerformanceGroupVector
&
out
)
{
JS
:
:
RootedObject
global
(
cx
JS
:
:
CurrentGlobalOrNull
(
cx
)
)
;
if
(
!
global
)
{
return
true
;
}
if
(
!
out
.
append
(
mTopGroup
)
)
{
JS_ReportOutOfMemory
(
cx
)
;
return
false
;
}
nsAutoString
name
;
RealmName
(
cx
global
name
)
;
bool
isSystem
=
nsContentUtils
:
:
IsSystemPrincipal
(
nsContentUtils
:
:
ObjectPrincipal
(
global
)
)
;
uint64_t
windowId
=
0
;
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
ptop
=
GetPrivateWindow
(
cx
)
)
{
windowId
=
ptop
-
>
WindowID
(
)
;
auto
entry
=
mWindowIdToGroup
.
PutEntry
(
windowId
)
;
if
(
!
entry
-
>
GetGroup
(
)
)
{
nsString
windowName
=
name
;
windowName
.
AppendLiteral
(
"
(
as
window
"
)
;
windowName
.
AppendInt
(
windowId
)
;
windowName
.
AppendLiteral
(
"
)
"
)
;
entry
-
>
SetGroup
(
nsPerformanceGroup
:
:
Make
(
this
windowName
windowId
mProcessId
isSystem
nsPerformanceGroup
:
:
GroupScope
:
:
WINDOW
)
)
;
}
if
(
!
out
.
append
(
entry
-
>
GetGroup
(
)
)
)
{
JS_ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
auto
group
=
nsPerformanceGroup
:
:
Make
(
this
name
windowId
mProcessId
isSystem
nsPerformanceGroup
:
:
GroupScope
:
:
COMPARTMENT
)
;
if
(
!
out
.
append
(
group
)
)
{
JS_ReportOutOfMemory
(
cx
)
;
return
false
;
}
MOZ_ASSERT
(
out
.
length
(
)
<
=
out
.
sMaxInlineStorage
)
;
return
true
;
}
bool
nsPerformanceStatsService
:
:
StopwatchStartCallback
(
uint64_t
iteration
void
*
closure
)
{
RefPtr
<
nsPerformanceStatsService
>
self
=
reinterpret_cast
<
nsPerformanceStatsService
*
>
(
closure
)
;
return
self
-
>
StopwatchStart
(
iteration
)
;
}
bool
nsPerformanceStatsService
:
:
StopwatchStart
(
uint64_t
iteration
)
{
mIteration
=
iteration
;
mIsHandlingUserInput
=
IsHandlingUserInput
(
)
;
mUserInputCount
=
mozilla
:
:
EventStateManager
:
:
UserInputCount
(
)
;
nsresult
rv
=
GetResources
(
&
mUserTimeStart
&
mSystemTimeStart
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
return
true
;
}
bool
nsPerformanceStatsService
:
:
StopwatchCommitCallback
(
uint64_t
iteration
js
:
:
PerformanceGroupVector
&
recentGroups
void
*
closure
)
{
RefPtr
<
nsPerformanceStatsService
>
self
=
reinterpret_cast
<
nsPerformanceStatsService
*
>
(
closure
)
;
return
self
-
>
StopwatchCommit
(
iteration
recentGroups
)
;
}
bool
nsPerformanceStatsService
:
:
StopwatchCommit
(
uint64_t
iteration
js
:
:
PerformanceGroupVector
&
recentGroups
)
{
MOZ_ASSERT
(
iteration
=
=
mIteration
)
;
MOZ_ASSERT
(
!
recentGroups
.
empty
(
)
)
;
uint64_t
userTimeStop
systemTimeStop
;
nsresult
rv
=
GetResources
(
&
userTimeStop
&
systemTimeStop
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
uint64_t
userTimeDelta
=
0
;
if
(
userTimeStop
>
mUserTimeStart
)
userTimeDelta
=
userTimeStop
-
mUserTimeStart
;
uint64_t
systemTimeDelta
=
0
;
if
(
systemTimeStop
>
mSystemTimeStart
)
systemTimeDelta
=
systemTimeStop
-
mSystemTimeStart
;
MOZ_ASSERT
(
mTopGroup
-
>
isUsedInThisIteration
(
)
)
;
const
uint64_t
totalRecentCycles
=
mTopGroup
-
>
recentCycles
(
iteration
)
;
const
bool
isHandlingUserInput
=
mIsHandlingUserInput
|
|
mozilla
:
:
EventStateManager
:
:
UserInputCount
(
)
>
mUserInputCount
;
MOZ_ASSERT
(
mTopGroup
-
>
recentTicks
(
iteration
)
>
0
)
;
for
(
auto
iter
=
recentGroups
.
begin
(
)
end
=
recentGroups
.
end
(
)
;
iter
!
=
end
;
+
+
iter
)
{
RefPtr
<
nsPerformanceGroup
>
group
=
nsPerformanceGroup
:
:
Get
(
*
iter
)
;
CommitGroup
(
iteration
userTimeDelta
systemTimeDelta
totalRecentCycles
isHandlingUserInput
group
)
;
}
MOZ_ASSERT
(
!
mTopGroup
-
>
isUsedInThisIteration
(
)
)
;
MOZ_ASSERT
(
mTopGroup
-
>
recentTicks
(
iteration
)
=
=
0
)
;
if
(
!
mPendingAlerts
.
empty
(
)
)
{
mPendingAlertsCollector
-
>
Start
(
mJankAlertBufferingDelay
)
;
}
return
true
;
}
void
nsPerformanceStatsService
:
:
CommitGroup
(
uint64_t
iteration
uint64_t
totalUserTimeDelta
uint64_t
totalSystemTimeDelta
uint64_t
totalCyclesDelta
bool
isHandlingUserInput
nsPerformanceGroup
*
group
)
{
MOZ_ASSERT
(
group
-
>
isUsedInThisIteration
(
)
)
;
const
uint64_t
ticksDelta
=
group
-
>
recentTicks
(
iteration
)
;
const
uint64_t
cpowTimeDelta
=
group
-
>
recentCPOW
(
iteration
)
;
const
uint64_t
cyclesDelta
=
group
-
>
recentCycles
(
iteration
)
;
group
-
>
resetRecentData
(
)
;
if
(
group
-
>
iteration
(
)
!
=
iteration
)
{
return
;
}
MOZ_ASSERT
(
ticksDelta
!
=
0
)
;
MOZ_ASSERT
(
cyclesDelta
<
=
totalCyclesDelta
)
;
if
(
cyclesDelta
=
=
0
|
|
totalCyclesDelta
=
=
0
)
{
return
;
}
double
proportion
=
(
double
)
cyclesDelta
/
(
double
)
totalCyclesDelta
;
MOZ_ASSERT
(
proportion
<
=
1
)
;
const
uint64_t
userTimeDelta
=
proportion
*
totalUserTimeDelta
;
const
uint64_t
systemTimeDelta
=
proportion
*
totalSystemTimeDelta
;
group
-
>
data
.
mTotalUserTime
+
=
userTimeDelta
;
group
-
>
data
.
mTotalSystemTime
+
=
systemTimeDelta
;
group
-
>
data
.
mTotalCPOWTime
+
=
cpowTimeDelta
;
group
-
>
data
.
mTicks
+
=
ticksDelta
;
const
uint64_t
totalTimeDelta
=
userTimeDelta
+
systemTimeDelta
+
cpowTimeDelta
;
uint64_t
duration
=
1000
;
for
(
size_t
i
=
0
;
i
<
mozilla
:
:
ArrayLength
(
group
-
>
data
.
mDurations
)
&
&
duration
<
totalTimeDelta
;
+
+
i
duration
*
=
2
)
{
group
-
>
data
.
mDurations
[
i
]
+
+
;
}
group
-
>
RecordJank
(
totalTimeDelta
)
;
group
-
>
RecordCPOW
(
cpowTimeDelta
)
;
if
(
isHandlingUserInput
)
{
group
-
>
RecordUserInput
(
)
;
}
if
(
totalTimeDelta
>
=
mJankAlertThreshold
)
{
if
(
!
group
-
>
HasPendingAlert
(
)
)
{
if
(
mPendingAlerts
.
append
(
group
)
)
{
group
-
>
SetHasPendingAlert
(
true
)
;
}
return
;
}
}
}
nsresult
nsPerformanceStatsService
:
:
GetResources
(
uint64_t
*
userTime
uint64_t
*
systemTime
)
const
{
MOZ_ASSERT
(
userTime
)
;
MOZ_ASSERT
(
systemTime
)
;
#
if
defined
(
XP_MACOSX
)
mach_msg_type_number_t
count
=
THREAD_BASIC_INFO_COUNT
;
thread_basic_info_data_t
info
;
mach_port_t
port
=
mach_thread_self
(
)
;
kern_return_t
err
=
thread_info
(
port
THREAD_BASIC_INFO
(
thread_info_t
)
&
info
&
count
)
;
mach_port_deallocate
(
mach_task_self
(
)
port
)
;
if
(
err
!
=
KERN_SUCCESS
)
return
NS_ERROR_FAILURE
;
*
userTime
=
info
.
user_time
.
microseconds
+
info
.
user_time
.
seconds
*
1000000
;
*
systemTime
=
info
.
system_time
.
microseconds
+
info
.
system_time
.
seconds
*
1000000
;
#
elif
defined
(
XP_UNIX
)
struct
rusage
rusage
;
#
if
defined
(
RUSAGE_THREAD
)
int
err
=
getrusage
(
RUSAGE_THREAD
&
rusage
)
;
#
else
int
err
=
getrusage
(
RUSAGE_SELF
&
rusage
)
;
#
endif
if
(
err
)
return
NS_ERROR_FAILURE
;
*
userTime
=
rusage
.
ru_utime
.
tv_usec
+
rusage
.
ru_utime
.
tv_sec
*
1000000
;
*
systemTime
=
rusage
.
ru_stime
.
tv_usec
+
rusage
.
ru_stime
.
tv_sec
*
1000000
;
#
elif
defined
(
XP_WIN
)
FILETIME
creationFileTime
;
FILETIME
exitFileTime
;
FILETIME
kernelFileTime
;
FILETIME
userFileTime
;
BOOL
success
=
GetThreadTimes
(
GetCurrentThread
(
)
&
creationFileTime
&
exitFileTime
&
kernelFileTime
&
userFileTime
)
;
if
(
!
success
)
return
NS_ERROR_FAILURE
;
ULARGE_INTEGER
kernelTimeInt
;
kernelTimeInt
.
LowPart
=
kernelFileTime
.
dwLowDateTime
;
kernelTimeInt
.
HighPart
=
kernelFileTime
.
dwHighDateTime
;
*
systemTime
=
kernelTimeInt
.
QuadPart
/
10
;
ULARGE_INTEGER
userTimeInt
;
userTimeInt
.
LowPart
=
userFileTime
.
dwLowDateTime
;
userTimeInt
.
HighPart
=
userFileTime
.
dwHighDateTime
;
*
userTime
=
userTimeInt
.
QuadPart
/
10
;
#
endif
return
NS_OK
;
}
void
nsPerformanceStatsService
:
:
NotifyJankObservers
(
const
mozilla
:
:
Vector
<
uint64_t
>
&
aPreviousJankLevels
)
{
GroupVector
alerts
(
std
:
:
move
(
mPendingAlerts
)
)
;
mPendingAlerts
=
GroupVector
(
)
;
if
(
!
mPendingAlertsCollector
)
{
return
;
}
mozilla
:
:
Vector
<
uint64_t
>
latestJankLevels
;
{
mozilla
:
:
DebugOnly
<
bool
>
result
=
nsRefreshDriver
:
:
GetJankLevels
(
latestJankLevels
)
;
MOZ_ASSERT
(
result
)
;
}
MOZ_ASSERT
(
latestJankLevels
.
length
(
)
=
=
aPreviousJankLevels
.
length
(
)
)
;
bool
isJankInAnimation
=
false
;
for
(
size_t
i
=
mJankLevelVisibilityThreshold
;
i
<
latestJankLevels
.
length
(
)
;
+
+
i
)
{
if
(
latestJankLevels
[
i
]
>
aPreviousJankLevels
[
i
]
)
{
isJankInAnimation
=
true
;
break
;
}
}
MOZ_ASSERT
(
!
alerts
.
empty
(
)
)
;
const
bool
hasUniversalWindowObservers
=
mUniversalTargets
.
mWindows
-
>
HasObservers
(
)
;
for
(
auto
iter
=
alerts
.
begin
(
)
;
iter
<
alerts
.
end
(
)
;
+
+
iter
)
{
MOZ_ASSERT
(
iter
)
;
RefPtr
<
nsPerformanceGroup
>
group
=
*
iter
;
group
-
>
SetHasPendingAlert
(
false
)
;
RefPtr
<
nsPerformanceGroupDetails
>
details
=
group
-
>
Details
(
)
;
nsPerformanceObservationTarget
*
targets
[
3
]
=
{
hasUniversalWindowObservers
&
&
details
-
>
IsWindow
(
)
?
mUniversalTargets
.
mWindows
.
get
(
)
:
nullptr
group
-
>
ObservationTarget
(
)
}
;
bool
isJankInInput
=
group
-
>
HasRecentUserInput
(
)
;
RefPtr
<
PerformanceAlert
>
alert
;
for
(
nsPerformanceObservationTarget
*
target
:
targets
)
{
if
(
!
target
)
{
continue
;
}
if
(
!
alert
)
{
const
uint32_t
reason
=
nsIPerformanceAlert
:
:
REASON_SLOWDOWN
|
(
isJankInAnimation
?
nsIPerformanceAlert
:
:
REASON_JANK_IN_ANIMATION
:
0
)
|
(
isJankInInput
?
nsIPerformanceAlert
:
:
REASON_JANK_IN_INPUT
:
0
)
;
alert
=
new
PerformanceAlert
(
reason
group
)
;
}
target
-
>
NotifyJankObservers
(
details
alert
)
;
}
group
-
>
ResetRecent
(
)
;
}
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetObservableWindow
(
uint64_t
windowId
nsIPerformanceObservable
*
*
result
)
{
if
(
windowId
=
=
0
)
{
NS_IF_ADDREF
(
*
result
=
mUniversalTargets
.
mWindows
)
;
}
else
{
auto
entry
=
mWindowIdToGroup
.
PutEntry
(
windowId
)
;
NS_IF_ADDREF
(
*
result
=
entry
-
>
ObservationTarget
(
)
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetAnimationJankLevelThreshold
(
short
*
result
)
{
*
result
=
mJankLevelVisibilityThreshold
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
SetAnimationJankLevelThreshold
(
short
value
)
{
mJankLevelVisibilityThreshold
=
value
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
GetUserInputDelayThreshold
(
uint64_t
*
result
)
{
*
result
=
mMaxExpectedDurationOfInteractionUS
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPerformanceStatsService
:
:
SetUserInputDelayThreshold
(
uint64_t
value
)
{
mMaxExpectedDurationOfInteractionUS
=
value
;
return
NS_OK
;
}
nsPerformanceStatsService
:
:
UniversalTargets
:
:
UniversalTargets
(
)
:
mWindows
(
new
nsPerformanceObservationTarget
(
)
)
{
}
nsPerformanceGroup
*
nsPerformanceGroup
:
:
Make
(
nsPerformanceStatsService
*
service
const
nsAString
&
name
uint64_t
windowId
uint64_t
processId
bool
isSystem
GroupScope
scope
)
{
nsString
groupId
;
:
:
GenerateUniqueGroupId
(
service
-
>
GetNextId
(
)
processId
groupId
)
;
return
new
nsPerformanceGroup
(
service
name
groupId
windowId
processId
isSystem
scope
)
;
}
nsPerformanceGroup
:
:
nsPerformanceGroup
(
nsPerformanceStatsService
*
service
const
nsAString
&
name
const
nsAString
&
groupId
uint64_t
windowId
uint64_t
processId
bool
isSystem
GroupScope
scope
)
:
mDetails
(
new
nsPerformanceGroupDetails
(
name
groupId
windowId
processId
isSystem
)
)
mService
(
service
)
mScope
(
scope
)
mHighestJank
(
0
)
mHighestCPOW
(
0
)
mHasRecentUserInput
(
false
)
mHasPendingAlert
(
false
)
{
mozilla
:
:
Unused
<
<
mService
-
>
mGroups
.
PutEntry
(
this
)
;
#
if
defined
(
DEBUG
)
if
(
scope
=
=
GroupScope
:
:
WINDOW
)
{
MOZ_ASSERT
(
mDetails
-
>
IsWindow
(
)
)
;
}
else
if
(
scope
=
=
GroupScope
:
:
RUNTIME
)
{
MOZ_ASSERT
(
!
mDetails
-
>
IsWindow
(
)
)
;
}
#
endif
setIsActive
(
mScope
!
=
GroupScope
:
:
COMPARTMENT
|
|
mService
-
>
mIsMonitoringPerCompartment
)
;
}
void
nsPerformanceGroup
:
:
Dispose
(
)
{
if
(
!
mService
)
{
return
;
}
if
(
mObservationTarget
)
{
mObservationTarget
=
nullptr
;
}
RefPtr
<
nsPerformanceStatsService
>
service
;
service
.
swap
(
mService
)
;
service
-
>
mGroups
.
RemoveEntry
(
this
)
;
if
(
mScope
=
=
GroupScope
:
:
WINDOW
)
{
MOZ_ASSERT
(
mDetails
-
>
IsWindow
(
)
)
;
service
-
>
mWindowIdToGroup
.
RemoveEntry
(
mDetails
-
>
WindowId
(
)
)
;
}
}
nsPerformanceGroup
:
:
~
nsPerformanceGroup
(
)
{
Dispose
(
)
;
}
nsPerformanceGroup
:
:
GroupScope
nsPerformanceGroup
:
:
Scope
(
)
const
{
return
mScope
;
}
nsPerformanceGroupDetails
*
nsPerformanceGroup
:
:
Details
(
)
const
{
return
mDetails
;
}
void
nsPerformanceGroup
:
:
SetObservationTarget
(
nsPerformanceObservationTarget
*
target
)
{
MOZ_ASSERT
(
!
mObservationTarget
)
;
mObservationTarget
=
target
;
}
nsPerformanceObservationTarget
*
nsPerformanceGroup
:
:
ObservationTarget
(
)
const
{
return
mObservationTarget
;
}
bool
nsPerformanceGroup
:
:
HasPendingAlert
(
)
const
{
return
mHasPendingAlert
;
}
void
nsPerformanceGroup
:
:
SetHasPendingAlert
(
bool
value
)
{
mHasPendingAlert
=
value
;
}
void
nsPerformanceGroup
:
:
RecordJank
(
uint64_t
jank
)
{
if
(
jank
>
mHighestJank
)
{
mHighestJank
=
jank
;
}
}
void
nsPerformanceGroup
:
:
RecordCPOW
(
uint64_t
cpow
)
{
if
(
cpow
>
mHighestCPOW
)
{
mHighestCPOW
=
cpow
;
}
}
uint64_t
nsPerformanceGroup
:
:
HighestRecentJank
(
)
{
return
mHighestJank
;
}
uint64_t
nsPerformanceGroup
:
:
HighestRecentCPOW
(
)
{
return
mHighestCPOW
;
}
bool
nsPerformanceGroup
:
:
HasRecentUserInput
(
)
{
return
mHasRecentUserInput
;
}
void
nsPerformanceGroup
:
:
RecordUserInput
(
)
{
mHasRecentUserInput
=
true
;
}
void
nsPerformanceGroup
:
:
ResetRecent
(
)
{
mHighestJank
=
0
;
mHighestCPOW
=
0
;
mHasRecentUserInput
=
false
;
}
