var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
AutoCompleteInputBase
(
aSearches
)
{
this
.
searches
=
aSearches
;
}
AutoCompleteInputBase
.
prototype
=
{
searches
:
null
minResultsForPopup
:
0
timeout
:
10
searchParam
:
"
"
textValue
:
"
"
disableAutoComplete
:
false
completeDefaultIndex
:
false
_selStart
:
0
_selEnd
:
0
get
selectionStart
(
)
{
return
this
.
_selStart
;
}
get
selectionEnd
(
)
{
return
this
.
_selEnd
;
}
selectTextRange
(
aStart
aEnd
)
{
this
.
_selStart
=
aStart
;
this
.
_selEnd
=
aEnd
;
}
get
searchCount
(
)
{
return
this
.
searches
.
length
;
}
getSearchAt
(
aIndex
)
{
return
this
.
searches
[
aIndex
]
;
}
onSearchBegin
(
)
{
}
onSearchComplete
(
)
{
}
popupOpen
:
false
get
popup
(
)
{
if
(
!
this
.
_popup
)
{
this
.
_popup
=
new
AutocompletePopupBase
(
this
)
;
}
return
this
.
_popup
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompleteInput
"
]
)
}
;
function
AutoCompleteResultBase
(
aValues
)
{
this
.
_values
=
aValues
;
}
AutoCompleteResultBase
.
prototype
=
{
_values
:
null
_comments
:
[
]
_styles
:
[
]
_finalCompleteValues
:
[
]
searchString
:
"
"
searchResult
:
null
defaultIndex
:
-
1
get
matchCount
(
)
{
return
this
.
_values
.
length
;
}
getValueAt
(
aIndex
)
{
return
this
.
_values
[
aIndex
]
;
}
getLabelAt
(
aIndex
)
{
return
this
.
getValueAt
(
aIndex
)
;
}
getCommentAt
(
aIndex
)
{
return
this
.
_comments
[
aIndex
]
;
}
getStyleAt
(
aIndex
)
{
return
this
.
_styles
[
aIndex
]
;
}
getImageAt
(
aIndex
)
{
return
"
"
;
}
getFinalCompleteValueAt
(
aIndex
)
{
return
this
.
_finalCompleteValues
[
aIndex
]
|
|
this
.
_values
[
aIndex
]
;
}
isRemovableAt
(
aRowIndex
)
{
return
true
;
}
removeValueAt
(
aRowIndex
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompleteResult
"
]
)
}
;
function
AutoCompleteSearchBase
(
aName
aResult
)
{
this
.
name
=
aName
;
this
.
_result
=
aResult
;
}
AutoCompleteSearchBase
.
prototype
=
{
name
:
null
_result
:
null
startSearch
(
aSearchString
aSearchParam
aPreviousResult
aListener
)
{
var
result
=
this
.
_result
;
result
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
;
aListener
.
onSearchResult
(
this
result
)
;
}
stopSearch
(
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIFactory
"
"
nsIAutoCompleteSearch
"
]
)
createInstance
(
outer
iid
)
{
return
this
.
QueryInterface
(
iid
)
;
}
}
;
function
AutocompletePopupBase
(
input
)
{
this
.
input
=
input
;
}
AutocompletePopupBase
.
prototype
=
{
selectedIndex
:
0
invalidate
(
)
{
}
selectBy
(
reverse
page
)
{
let
numRows
=
this
.
input
.
controller
.
matchCount
;
if
(
numRows
>
0
)
{
let
delta
=
reverse
?
-
1
:
1
;
this
.
selectedIndex
=
(
this
.
selectedIndex
+
delta
)
%
numRows
;
if
(
this
.
selectedIndex
<
0
)
{
this
.
selectedIndex
=
numRows
-
1
;
}
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompletePopup
"
]
)
}
;
function
registerAutoCompleteSearch
(
aSearch
)
{
var
name
=
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
"
+
aSearch
.
name
;
var
cid
=
Services
.
uuid
.
generateUUID
(
)
;
var
desc
=
"
Test
AutoCompleteSearch
"
;
var
componentManager
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
componentManager
.
registerFactory
(
cid
desc
name
aSearch
)
;
aSearch
.
cid
=
cid
;
}
function
unregisterAutoCompleteSearch
(
aSearch
)
{
var
componentManager
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
componentManager
.
unregisterFactory
(
aSearch
.
cid
aSearch
)
;
}
