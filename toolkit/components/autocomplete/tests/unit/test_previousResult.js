function
AutoCompleteInput
(
aSearches
)
{
this
.
searches
=
aSearches
;
}
AutoCompleteInput
.
prototype
=
{
constructor
:
AutoCompleteInput
searches
:
null
minResultsForPopup
:
0
timeout
:
10
searchParam
:
"
"
textValue
:
"
"
disableAutoComplete
:
false
completeDefaultIndex
:
false
get
searchCount
(
)
{
return
this
.
searches
.
length
;
}
getSearchAt
(
aIndex
)
{
return
this
.
searches
[
aIndex
]
;
}
onSearchBegin
(
)
{
}
onSearchComplete
(
)
{
}
popupOpen
:
false
popup
:
{
setSelectedIndex
(
aIndex
)
{
}
invalidate
(
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompletePopup
"
]
)
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompleteInput
"
]
)
}
;
function
AutoCompleteResult
(
aValues
aComments
aStyles
)
{
this
.
_values
=
aValues
;
this
.
_comments
=
aComments
;
this
.
_styles
=
aStyles
;
if
(
this
.
_values
.
length
)
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
;
}
else
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_NOMATCH
;
}
}
AutoCompleteResult
.
prototype
=
{
constructor
:
AutoCompleteResult
_values
:
null
_comments
:
null
_styles
:
null
searchString
:
"
"
searchResult
:
null
defaultIndex
:
0
get
matchCount
(
)
{
return
this
.
_values
.
length
;
}
getValueAt
(
aIndex
)
{
return
this
.
_values
[
aIndex
]
;
}
getLabelAt
(
aIndex
)
{
return
this
.
getValueAt
(
aIndex
)
;
}
getCommentAt
(
aIndex
)
{
return
this
.
_comments
[
aIndex
]
;
}
getStyleAt
(
aIndex
)
{
return
this
.
_styles
[
aIndex
]
;
}
getImageAt
(
aIndex
)
{
return
"
"
;
}
getFinalCompleteValueAt
(
aIndex
)
{
return
this
.
getValueAt
(
aIndex
)
;
}
removeValueAt
(
aRowIndex
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompleteResult
"
]
)
}
;
function
AutoCompleteSearch
(
aName
aResult
)
{
this
.
name
=
aName
;
this
.
_result
=
aResult
;
}
AutoCompleteSearch
.
prototype
=
{
constructor
:
AutoCompleteSearch
name
:
null
_result
:
null
_previousResult
:
null
startSearch
(
aSearchString
aSearchParam
aPreviousResult
aListener
)
{
this
.
_previousResult
=
aPreviousResult
;
aListener
.
onSearchResult
(
this
this
.
_result
)
;
}
stopSearch
(
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIFactory
"
"
nsIAutoCompleteSearch
"
]
)
createInstance
(
outer
iid
)
{
return
this
.
QueryInterface
(
iid
)
;
}
}
;
function
registerAutoCompleteSearch
(
aSearch
)
{
var
name
=
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
"
+
aSearch
.
name
;
var
uuidGenerator
=
Services
.
uuid
;
var
cid
=
uuidGenerator
.
generateUUID
(
)
;
var
desc
=
"
Test
AutoCompleteSearch
"
;
var
componentManager
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
componentManager
.
registerFactory
(
cid
desc
name
aSearch
)
;
aSearch
.
cid
=
cid
;
}
function
unregisterAutoCompleteSearch
(
aSearch
)
{
var
componentManager
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
componentManager
.
unregisterFactory
(
aSearch
.
cid
aSearch
)
;
}
function
run_test
(
)
{
var
search1
=
new
AutoCompleteSearch
(
"
test
-
previous
-
result1
"
new
AutoCompleteResult
(
[
"
hello1
"
]
[
"
"
]
[
"
"
]
)
)
;
var
search2
=
new
AutoCompleteSearch
(
"
test
-
previous
-
result2
"
new
AutoCompleteResult
(
[
"
hello2
"
]
[
"
"
]
[
"
"
]
)
)
;
registerAutoCompleteSearch
(
search1
)
;
registerAutoCompleteSearch
(
search2
)
;
var
controller
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Ci
.
nsIAutoCompleteController
)
;
var
input
=
new
AutoCompleteInput
(
[
search1
.
name
search2
.
name
]
)
;
var
numSearchesStarted
=
0
;
input
.
onSearchBegin
=
function
(
)
{
numSearchesStarted
+
+
;
}
;
input
.
onSearchComplete
=
function
(
)
{
Assert
.
equal
(
controller
.
searchStatus
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_MATCH
)
;
Assert
.
equal
(
controller
.
matchCount
2
)
;
if
(
numSearchesStarted
=
=
1
)
{
Assert
.
equal
(
search1
.
_previousResult
null
)
;
Assert
.
equal
(
search2
.
_previousResult
null
)
;
controller
.
startSearch
(
"
test
"
)
;
return
;
}
Assert
.
notEqual
(
search1
.
_previousResult
null
)
;
Assert
.
notEqual
(
search2
.
_previousResult
null
)
;
unregisterAutoCompleteSearch
(
search1
)
;
unregisterAutoCompleteSearch
(
search2
)
;
do_test_finished
(
)
;
}
;
controller
.
input
=
input
;
do_test_pending
(
)
;
controller
.
startSearch
(
"
test
"
)
;
}
