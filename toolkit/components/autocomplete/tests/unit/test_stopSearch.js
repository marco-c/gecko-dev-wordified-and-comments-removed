function
AutoCompleteInput
(
aSearches
)
{
this
.
searches
=
aSearches
;
}
AutoCompleteInput
.
prototype
=
{
constructor
:
AutoCompleteInput
minResultsForPopup
:
0
timeout
:
10
searchParam
:
"
"
textValue
:
"
hello
"
disableAutoComplete
:
false
completeDefaultIndex
:
false
set
popupOpen
(
val
)
{
return
val
;
}
get
popupOpen
(
)
{
return
false
;
}
get
searchCount
(
)
{
return
this
.
searches
.
length
;
}
getSearchAt
(
aIndex
)
{
return
this
.
searches
[
aIndex
]
;
}
onSearchBegin
(
)
{
}
onSearchComplete
(
)
{
}
onTextReverted
(
)
{
}
onTextEntered
(
)
{
}
popup
:
{
selectBy
(
)
{
}
invalidate
(
)
{
}
set
selectedIndex
(
val
)
{
return
val
;
}
get
selectedIndex
(
)
{
return
-
1
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAutoCompletePopup
]
)
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteInput
]
)
}
;
function
AutoCompleteSearch
(
aName
)
{
this
.
name
=
aName
;
}
AutoCompleteSearch
.
prototype
=
{
constructor
:
AutoCompleteSearch
stopSearchInvoked
:
true
startSearch
(
aSearchString
aSearchParam
aPreviousResult
aListener
)
{
info
(
"
Check
stop
search
has
been
called
"
)
;
Assert
.
ok
(
this
.
stopSearchInvoked
)
;
this
.
stopSearchInvoked
=
false
;
}
stopSearch
(
)
{
this
.
stopSearchInvoked
=
true
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIFactory
Ci
.
nsIAutoCompleteSearch
]
)
createInstance
(
outer
iid
)
{
return
this
.
QueryInterface
(
iid
)
;
}
}
;
function
registerAutoCompleteSearch
(
aSearch
)
{
let
name
=
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
"
+
aSearch
.
name
;
let
uuidGenerator
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
let
cid
=
uuidGenerator
.
generateUUID
(
)
;
let
desc
=
"
Test
AutoCompleteSearch
"
;
let
componentManager
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
componentManager
.
registerFactory
(
cid
desc
name
aSearch
)
;
aSearch
.
cid
=
cid
;
}
function
unregisterAutoCompleteSearch
(
aSearch
)
{
let
componentManager
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
componentManager
.
unregisterFactory
(
aSearch
.
cid
aSearch
)
;
}
var
gTests
=
[
function
(
controller
)
{
info
(
"
handleText
"
)
;
controller
.
input
.
textValue
=
"
hel
"
;
controller
.
handleText
(
)
;
}
function
(
controller
)
{
info
(
"
handleStartComposition
"
)
;
controller
.
handleStartComposition
(
)
;
info
(
"
handleEndComposition
"
)
;
controller
.
handleEndComposition
(
)
;
controller
.
handleText
(
)
;
}
function
(
controller
)
{
info
(
"
handleEscape
"
)
;
controller
.
handleEscape
(
)
;
}
function
(
controller
)
{
info
(
"
handleEnter
"
)
;
controller
.
handleEnter
(
false
)
;
}
function
(
controller
)
{
info
(
"
handleTab
"
)
;
controller
.
handleTab
(
)
;
}
function
(
controller
)
{
info
(
"
handleKeyNavigation
"
)
;
controller
.
handleKeyNavigation
(
0x26
)
;
}
]
;
add_task
(
async
function
(
)
{
let
search
=
new
AutoCompleteSearch
(
"
test
"
)
;
registerAutoCompleteSearch
(
search
)
;
let
controller
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Ci
.
nsIAutoCompleteController
)
;
let
input
=
new
AutoCompleteInput
(
[
search
.
name
]
)
;
controller
.
input
=
input
;
for
(
let
testFn
of
gTests
)
{
input
.
onSearchBegin
=
function
(
)
{
executeSoon
(
(
)
=
>
testFn
(
controller
)
)
;
}
;
let
promise
=
new
Promise
(
resolve
=
>
{
input
.
onSearchComplete
=
function
(
)
{
resolve
(
)
;
}
;
}
)
;
controller
.
startSearch
(
"
hello
"
)
;
await
promise
;
}
unregisterAutoCompleteSearch
(
search
)
;
controller
.
stopSearch
(
)
;
controller
.
input
=
null
;
}
)
;
