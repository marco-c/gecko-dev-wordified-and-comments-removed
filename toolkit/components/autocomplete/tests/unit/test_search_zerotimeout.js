function
AutoCompleteDelayedSearch
(
aName
aResult
)
{
this
.
name
=
aName
;
this
.
_result
=
aResult
;
}
AutoCompleteDelayedSearch
.
prototype
=
Object
.
create
(
AutoCompleteSearchBase
.
prototype
)
;
function
AutoCompleteResult
(
aValues
aDefaultIndex
)
{
this
.
_values
=
aValues
;
this
.
defaultIndex
=
aDefaultIndex
;
}
AutoCompleteResult
.
prototype
=
Object
.
create
(
AutoCompleteResultBase
.
prototype
)
;
add_test
(
function
test_delayed_search_notimeout
(
)
{
let
inputStr
=
"
moz
"
;
let
delayedSearch
=
new
AutoCompleteDelayedSearch
(
"
delayed
"
new
AutoCompleteResult
(
[
"
moz
-
delayed
"
]
0
)
)
;
registerAutoCompleteSearch
(
delayedSearch
)
;
let
controller
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Ci
.
nsIAutoCompleteController
)
;
let
input
=
new
AutoCompleteInputBase
(
[
delayedSearch
.
name
]
)
;
input
.
completeDefaultIndex
=
true
;
input
.
textValue
=
inputStr
;
input
.
timeout
=
0
;
let
strLen
=
inputStr
.
length
;
input
.
selectTextRange
(
strLen
strLen
)
;
controller
.
input
=
input
;
let
complete
=
false
;
input
.
onSearchComplete
=
function
(
)
{
complete
=
true
;
}
;
controller
.
startSearch
(
inputStr
)
;
Assert
.
ok
(
complete
)
;
Assert
.
equal
(
input
.
textValue
"
moz
-
delayed
"
)
;
unregisterAutoCompleteSearch
(
delayedSearch
)
;
run_next_test
(
)
;
}
)
;
