add_task
(
async
function
(
)
{
let
testnum
=
0
;
try
{
let
testfile
=
do_get_file
(
"
formhistory_v999b
.
sqlite
"
)
;
let
profileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
let
destFile
=
profileDir
.
clone
(
)
;
destFile
.
append
(
"
formhistory
.
sqlite
"
)
;
if
(
destFile
.
exists
(
)
)
{
destFile
.
remove
(
false
)
;
}
let
bakFile
=
profileDir
.
clone
(
)
;
bakFile
.
append
(
"
formhistory
.
sqlite
.
corrupt
"
)
;
if
(
bakFile
.
exists
(
)
)
{
bakFile
.
remove
(
false
)
;
}
testfile
.
copyTo
(
profileDir
"
formhistory
.
sqlite
"
)
;
Assert
.
equal
(
999
getDBVersion
(
destFile
)
)
;
testnum
+
+
;
Assert
.
ok
(
!
bakFile
.
exists
(
)
)
;
await
promiseCountEntries
(
"
"
"
"
)
;
Assert
.
ok
(
bakFile
.
exists
(
)
)
;
bakFile
.
remove
(
false
)
;
testnum
+
+
;
Assert
.
ok
(
!
(
await
promiseCountEntries
(
null
null
)
)
)
;
Assert
.
equal
(
0
await
promiseCountEntries
(
"
name
-
A
"
"
value
-
A
"
)
)
;
Assert
.
equal
(
CURRENT_SCHEMA
getDBVersion
(
destFile
)
)
;
testnum
+
+
;
await
promiseUpdateEntry
(
"
add
"
"
name
-
A
"
"
value
-
A
"
)
;
Assert
.
equal
(
1
await
promiseCountEntries
(
null
null
)
)
;
Assert
.
equal
(
1
await
promiseCountEntries
(
"
name
-
A
"
"
value
-
A
"
)
)
;
testnum
+
+
;
await
promiseUpdateEntry
(
"
remove
"
"
name
-
A
"
"
value
-
A
"
)
;
Assert
.
equal
(
0
await
promiseCountEntries
(
null
null
)
)
;
Assert
.
equal
(
0
await
promiseCountEntries
(
"
name
-
A
"
"
value
-
A
"
)
)
;
}
catch
(
e
)
{
throw
new
Error
(
FAILED
in
test
#
{
testnum
}
-
-
{
e
}
)
;
}
}
)
;
