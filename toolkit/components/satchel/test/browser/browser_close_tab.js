const
{
FormHistory
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
jsm
"
)
;
add_task
(
async
function
test
(
)
{
const
url
=
data
:
text
/
html
<
input
type
=
"
text
"
name
=
"
field1
"
>
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
(
browser
)
{
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
(
browser
)
{
const
{
autoCompletePopup
}
=
browser
;
const
mockHistory
=
[
{
op
:
"
add
"
fieldname
:
"
field1
"
value
:
"
value1
"
}
]
;
await
new
Promise
(
resolve
=
>
FormHistory
.
update
(
[
{
op
:
"
remove
"
}
.
.
.
mockHistory
]
{
handleCompletion
:
resolve
}
)
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
const
input
=
content
.
document
.
querySelector
(
"
input
"
)
;
input
.
focus
(
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
browser
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
autoCompletePopup
.
popupOpen
;
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
autoCompletePopup
.
popupOpen
;
}
)
;
Assert
.
ok
(
!
autoCompletePopup
.
popupOpen
"
Ensure
the
popup
is
closed
.
"
)
;
}
)
;
}
)
;
