"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
FormHistoryTestUtils
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
FormHistory
:
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
jsm
"
}
)
;
var
FormHistoryTestUtils
=
{
makeListener
(
resolve
reject
)
{
let
results
=
[
]
;
return
{
_results
:
results
handleResult
(
result
)
{
results
.
push
(
result
)
;
}
handleError
(
error
)
{
reject
(
error
)
;
}
handleCompletion
(
errored
)
{
if
(
!
errored
)
{
resolve
(
results
)
;
}
}
}
;
}
async
add
(
fieldname
additions
=
[
]
)
{
additions
=
additions
.
map
(
v
=
>
(
typeof
v
=
=
"
string
"
?
{
value
:
v
}
:
v
)
)
;
for
(
let
{
value
source
}
of
additions
)
{
await
lazy
.
FormHistory
.
update
(
Object
.
assign
(
{
fieldname
}
{
op
:
"
bump
"
value
source
}
)
)
;
}
}
async
count
(
fieldname
filters
=
{
}
)
{
return
lazy
.
FormHistory
.
count
(
Object
.
assign
(
{
fieldname
}
filters
)
)
;
}
remove
(
fieldname
removals
)
{
let
changes
=
removals
.
map
(
v
=
>
{
let
criteria
=
typeof
v
=
=
"
string
"
?
{
value
:
v
}
:
v
;
return
Object
.
assign
(
{
fieldname
op
:
"
remove
"
}
criteria
)
;
}
)
;
return
lazy
.
FormHistory
.
update
(
changes
)
;
}
clear
(
fieldname
)
{
let
baseChange
=
fieldname
?
{
fieldname
}
:
{
}
;
return
lazy
.
FormHistory
.
update
(
Object
.
assign
(
baseChange
{
op
:
"
remove
"
}
)
)
;
}
search
(
fieldname
filters
=
{
}
)
{
return
lazy
.
FormHistory
.
search
(
null
Object
.
assign
(
{
fieldname
}
filters
)
)
;
}
autocomplete
(
searchString
fieldname
filters
=
{
}
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
lazy
.
FormHistory
.
getAutoCompleteResults
(
searchString
Object
.
assign
(
{
fieldname
}
filters
)
this
.
makeListener
(
resolve
reject
)
)
;
}
)
;
}
}
;
