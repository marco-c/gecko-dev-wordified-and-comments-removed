var
gPopupShownExpected
=
false
;
var
gPopupShownListener
;
var
gLastAutoCompleteResults
;
var
gChromeScript
;
function
_
(
formNum
name
)
{
var
form
=
document
.
getElementById
(
"
form
"
+
formNum
)
;
if
(
!
form
)
{
ok
(
false
"
_
couldn
'
t
find
requested
form
"
+
formNum
)
;
return
null
;
}
var
element
=
form
.
elements
.
namedItem
(
name
)
;
if
(
!
element
)
{
ok
(
false
"
_
couldn
'
t
find
requested
element
"
+
name
)
;
return
null
;
}
if
(
element
.
hasAttribute
(
"
name
"
)
&
&
element
.
getAttribute
(
"
name
"
)
!
=
name
)
{
ok
(
false
"
_
got
confused
.
"
)
;
return
null
;
}
return
element
;
}
function
doKey
(
aKey
modifier
)
{
var
keyName
=
"
DOM_VK_
"
+
aKey
.
toUpperCase
(
)
;
var
key
=
SpecialPowers
.
Ci
.
nsIDOMKeyEvent
[
keyName
]
;
if
(
!
modifier
)
modifier
=
null
;
var
wutils
=
SpecialPowers
.
getDOMWindowUtils
(
window
)
;
if
(
wutils
.
sendKeyEvent
(
"
keydown
"
key
0
modifier
)
)
{
wutils
.
sendKeyEvent
(
"
keypress
"
key
0
modifier
)
;
}
wutils
.
sendKeyEvent
(
"
keyup
"
key
0
modifier
)
;
}
function
registerPopupShownListener
(
listener
)
{
if
(
gPopupShownListener
)
{
ok
(
false
"
got
too
many
popupshownlisteners
"
)
;
return
;
}
gPopupShownListener
=
listener
;
}
function
getMenuEntries
(
)
{
if
(
!
gLastAutoCompleteResults
)
{
throw
new
Error
(
"
no
autocomplete
results
"
)
;
}
var
results
=
gLastAutoCompleteResults
;
gLastAutoCompleteResults
=
null
;
return
results
;
}
function
checkArrayValues
(
actualValues
expectedValues
msg
)
{
is
(
actualValues
.
length
expectedValues
.
length
"
Checking
array
values
:
"
+
msg
)
;
for
(
var
i
=
0
;
i
<
expectedValues
.
length
;
i
+
+
)
is
(
actualValues
[
i
]
expectedValues
[
i
]
msg
+
"
Checking
array
entry
#
"
+
i
)
;
}
var
checkObserver
=
{
verifyStack
:
[
]
callback
:
null
init
(
)
{
gChromeScript
.
sendAsyncMessage
(
"
addObserver
"
)
;
gChromeScript
.
addMessageListener
(
"
satchel
-
storage
-
changed
"
this
.
observe
.
bind
(
this
)
)
;
}
uninit
(
)
{
gChromeScript
.
sendAsyncMessage
(
"
removeObserver
"
)
;
}
waitForChecks
(
callback
)
{
if
(
this
.
verifyStack
.
length
=
=
0
)
callback
(
)
;
else
this
.
callback
=
callback
;
}
observe
(
{
subject
topic
data
}
)
{
if
(
data
!
=
"
formhistory
-
add
"
&
&
data
!
=
"
formhistory
-
update
"
)
return
;
ok
(
this
.
verifyStack
.
length
>
0
"
checking
if
saved
form
data
was
expected
"
)
;
var
expected
=
this
.
verifyStack
.
shift
(
)
;
countEntries
(
expected
.
name
expected
.
value
function
(
num
)
{
ok
(
num
>
0
expected
.
message
)
;
if
(
checkObserver
.
verifyStack
.
length
=
=
0
)
{
var
callback
=
checkObserver
.
callback
;
checkObserver
.
callback
=
null
;
callback
(
)
;
}
}
)
;
}
}
;
function
checkForSave
(
name
value
message
)
{
checkObserver
.
verifyStack
.
push
(
{
name
value
message
}
)
;
}
function
getFormSubmitButton
(
formNum
)
{
var
form
=
(
"
form
"
+
formNum
)
;
ok
(
form
!
=
null
"
getting
form
"
+
formNum
)
;
var
button
=
form
.
firstChild
;
while
(
button
&
&
button
.
type
!
=
"
submit
"
)
{
button
=
button
.
nextSibling
;
}
ok
(
button
!
=
null
"
getting
form
submit
button
"
)
;
return
button
;
}
function
countEntries
(
name
value
then
=
null
)
{
return
new
Promise
(
resolve
=
>
{
gChromeScript
.
sendAsyncMessage
(
"
countEntries
"
{
name
value
}
)
;
gChromeScript
.
addMessageListener
(
"
entriesCounted
"
function
counted
(
data
)
{
gChromeScript
.
removeMessageListener
(
"
entriesCounted
"
counted
)
;
if
(
!
data
.
ok
)
{
ok
(
false
"
Error
occurred
counting
form
history
"
)
;
SimpleTest
.
finish
(
)
;
return
;
}
if
(
then
)
{
then
(
data
.
count
)
;
}
resolve
(
data
.
count
)
;
}
)
;
}
)
;
}
function
updateFormHistory
(
changes
then
=
null
)
{
return
new
Promise
(
resolve
=
>
{
gChromeScript
.
sendAsyncMessage
(
"
updateFormHistory
"
{
changes
}
)
;
gChromeScript
.
addMessageListener
(
"
formHistoryUpdated
"
function
updated
(
{
ok
}
)
{
gChromeScript
.
removeMessageListener
(
"
formHistoryUpdated
"
updated
)
;
if
(
!
ok
)
{
ok
(
false
"
Error
occurred
updating
form
history
"
)
;
SimpleTest
.
finish
(
)
;
return
;
}
if
(
then
)
{
then
(
)
;
}
resolve
(
)
;
}
)
;
}
)
;
}
function
notifyMenuChanged
(
expectedCount
expectedFirstValue
then
=
null
)
{
return
new
Promise
(
resolve
=
>
{
gChromeScript
.
sendAsyncMessage
(
"
waitForMenuChange
"
{
expectedCount
expectedFirstValue
}
)
;
gChromeScript
.
addMessageListener
(
"
gotMenuChange
"
function
changed
(
{
results
}
)
{
gChromeScript
.
removeMessageListener
(
"
gotMenuChange
"
changed
)
;
gLastAutoCompleteResults
=
results
;
if
(
then
)
{
then
(
results
)
;
}
resolve
(
results
)
;
}
)
;
}
)
;
}
function
notifySelectedIndex
(
expectedIndex
then
=
null
)
{
return
new
Promise
(
resolve
=
>
{
gChromeScript
.
sendAsyncMessage
(
"
waitForSelectedIndex
"
{
expectedIndex
}
)
;
gChromeScript
.
addMessageListener
(
"
gotSelectedIndex
"
function
changed
(
)
{
gChromeScript
.
removeMessageListener
(
"
gotSelectedIndex
"
changed
)
;
if
(
then
)
{
then
(
)
;
}
resolve
(
)
;
}
)
;
}
)
;
}
function
getPopupState
(
then
=
null
)
{
return
new
Promise
(
resolve
=
>
{
gChromeScript
.
sendAsyncMessage
(
"
getPopupState
"
)
;
gChromeScript
.
addMessageListener
(
"
gotPopupState
"
function
listener
(
state
)
{
gChromeScript
.
removeMessageListener
(
"
gotPopupState
"
listener
)
;
if
(
then
)
{
then
(
state
)
;
}
resolve
(
state
)
;
}
)
;
}
)
;
}
function
listenForUnexpectedPopupShown
(
)
{
gChromeScript
.
addMessageListener
(
"
onpopupshown
"
function
onPopupShown
(
)
{
if
(
!
gPopupShownExpected
)
{
ok
(
false
"
Unexpected
autocomplete
popupshown
event
"
)
;
}
}
)
;
}
function
promiseACShown
(
)
{
gPopupShownExpected
=
true
;
return
new
Promise
(
resolve
=
>
{
gChromeScript
.
addMessageListener
(
"
onpopupshown
"
(
{
results
}
)
=
>
{
gPopupShownExpected
=
false
;
resolve
(
results
)
;
}
)
;
}
)
;
}
function
satchelCommonSetup
(
)
{
var
chromeURL
=
SimpleTest
.
getTestFileURL
(
"
parent_utils
.
js
"
)
;
gChromeScript
=
SpecialPowers
.
loadChromeScript
(
chromeURL
)
;
gChromeScript
.
addMessageListener
(
"
onpopupshown
"
(
{
results
}
)
=
>
{
gLastAutoCompleteResults
=
results
;
if
(
gPopupShownListener
)
gPopupShownListener
(
)
;
}
)
;
SimpleTest
.
registerCleanupFunction
(
(
)
=
>
{
gChromeScript
.
sendAsyncMessage
(
"
cleanup
"
)
;
gChromeScript
.
destroy
(
)
;
}
)
;
}
satchelCommonSetup
(
)
;
