"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FormHistoryChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
CreditCard
:
"
resource
:
/
/
gre
/
modules
/
CreditCard
.
sys
.
mjs
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
gDebug
"
"
browser
.
formfill
.
debug
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
gEnabled
"
"
browser
.
formfill
.
enable
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
lazy
"
gFormFillService
"
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
"
nsIFormFillController
"
)
;
function
log
(
message
)
{
if
(
!
lazy
.
gDebug
)
{
return
;
}
dump
(
"
satchelFormListener
:
"
+
message
+
"
\
n
"
)
;
Services
.
console
.
logStringMessage
(
"
satchelFormListener
:
"
+
message
)
;
}
class
FormHistoryChild
extends
JSWindowActorChild
{
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMFormBeforeSubmit
"
:
{
this
.
onDOMFormBeforeSubmit
(
event
)
;
break
;
}
default
:
{
throw
new
Error
(
"
Unexpected
event
"
)
;
}
}
}
onDOMFormBeforeSubmit
(
event
)
{
let
form
=
event
.
target
;
if
(
!
lazy
.
gEnabled
|
|
lazy
.
PrivateBrowsingUtils
.
isContentWindowPrivate
(
form
.
ownerGlobal
)
)
{
return
;
}
log
(
"
Form
submit
observer
notified
.
"
)
;
if
(
form
.
hasAttribute
(
"
autocomplete
"
)
&
&
form
.
getAttribute
(
"
autocomplete
"
)
.
toLowerCase
(
)
=
=
"
off
"
)
{
return
;
}
let
entries
=
[
]
;
for
(
let
input
of
form
.
elements
)
{
if
(
!
HTMLInputElement
.
isInstance
(
input
)
)
{
continue
;
}
if
(
!
input
.
mozIsTextField
(
true
)
)
{
continue
;
}
if
(
input
.
hasBeenTypePassword
)
{
continue
;
}
if
(
lazy
.
gFormFillService
.
isLoginManagerField
(
input
)
)
{
continue
;
}
let
autocompleteInfo
=
input
.
getAutocompleteInfo
(
)
;
if
(
autocompleteInfo
&
&
!
autocompleteInfo
.
canAutomaticallyPersist
)
{
continue
;
}
const
value
=
input
.
lastInteractiveValue
?
.
trim
(
)
;
if
(
!
value
)
{
continue
;
}
if
(
value
!
=
input
.
value
.
trim
(
)
)
{
continue
;
}
if
(
lazy
.
CreditCard
.
isValidNumber
(
value
)
)
{
log
(
"
skipping
saving
a
credit
card
number
"
)
;
continue
;
}
let
name
=
input
.
name
|
|
input
.
id
;
if
(
!
name
)
{
continue
;
}
if
(
name
=
=
"
searchbar
-
history
"
)
{
log
(
'
addEntry
for
input
name
"
'
+
name
+
'
"
is
denied
'
)
;
continue
;
}
if
(
name
.
length
>
200
|
|
value
.
length
>
200
)
{
log
(
"
skipping
input
that
has
a
name
/
value
too
large
"
)
;
continue
;
}
if
(
entries
.
length
>
=
100
)
{
log
(
"
not
saving
any
more
entries
for
this
form
.
"
)
;
break
;
}
entries
.
push
(
{
name
value
}
)
;
}
if
(
entries
.
length
)
{
log
(
"
sending
entries
to
parent
process
for
form
"
+
form
.
id
)
;
this
.
sendAsyncMessage
(
"
FormHistory
:
FormSubmitEntries
"
entries
)
;
}
}
}
