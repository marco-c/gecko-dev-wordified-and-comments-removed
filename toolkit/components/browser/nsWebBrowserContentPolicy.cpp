#
include
"
nsWebBrowserContentPolicy
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContentPolicyUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
nsWebBrowserContentPolicy
:
:
nsWebBrowserContentPolicy
(
)
=
default
;
nsWebBrowserContentPolicy
:
:
~
nsWebBrowserContentPolicy
(
)
=
default
;
NS_IMPL_ISUPPORTS
(
nsWebBrowserContentPolicy
nsIContentPolicy
)
NS_IMETHODIMP
nsWebBrowserContentPolicy
:
:
ShouldLoad
(
nsIURI
*
aContentLocation
nsILoadInfo
*
aLoadInfo
int16_t
*
aShouldLoad
)
{
MOZ_ASSERT
(
aShouldLoad
"
Null
out
param
"
)
;
ExtContentPolicyType
contentType
=
aLoadInfo
-
>
GetExternalContentPolicyType
(
)
;
*
aShouldLoad
=
nsIContentPolicy
:
:
ACCEPT
;
nsCOMPtr
<
nsISupports
>
context
=
aLoadInfo
-
>
GetLoadingContext
(
)
;
nsIDocShell
*
shell
=
NS_CP_GetDocShellFromContext
(
context
)
;
if
(
!
shell
)
{
return
NS_OK
;
}
nsresult
rv
;
bool
allowed
=
true
;
switch
(
contentType
)
{
case
ExtContentPolicy
:
:
TYPE_SUBDOCUMENT
:
rv
=
shell
-
>
GetAllowSubframes
(
&
allowed
)
;
break
;
case
ExtContentPolicy
:
:
TYPE_IMAGE
:
case
ExtContentPolicy
:
:
TYPE_IMAGESET
:
rv
=
shell
-
>
GetAllowImages
(
&
allowed
)
;
break
;
default
:
return
NS_OK
;
}
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
allowed
)
{
NS_SetRequestBlockingReason
(
aLoadInfo
nsILoadInfo
:
:
BLOCKING_REASON_CONTENT_POLICY_WEB_BROWSER
)
;
*
aShouldLoad
=
nsIContentPolicy
:
:
REJECT_TYPE
;
}
return
rv
;
}
NS_IMETHODIMP
nsWebBrowserContentPolicy
:
:
ShouldProcess
(
nsIURI
*
aContentLocation
nsILoadInfo
*
aLoadInfo
int16_t
*
aShouldProcess
)
{
MOZ_ASSERT
(
aShouldProcess
"
Null
out
param
"
)
;
*
aShouldProcess
=
nsIContentPolicy
:
:
ACCEPT
;
return
NS_OK
;
}
