function
waitForAnimationFrames
(
)
{
return
new
Promise
(
resolve
=
>
window
.
requestAnimationFrame
(
(
)
=
>
window
.
requestAnimationFrame
(
resolve
)
)
)
;
}
function
closeEnough
(
actual
expected
)
{
return
expected
-
1
<
actual
&
&
actual
<
expected
+
1
;
}
async
function
resizeWindow
(
x
y
)
{
window
.
innerWidth
=
x
;
window
.
innerHeight
=
y
;
await
waitForAnimationFrames
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
info
(
window
is
{
window
.
innerWidth
}
x
{
window
.
innerHeight
}
)
;
if
(
closeEnough
(
window
.
innerWidth
x
)
&
&
closeEnough
(
window
.
innerHeight
y
)
)
{
return
true
;
}
window
.
innerWidth
=
x
;
window
.
innerHeight
=
y
;
return
false
;
}
Wait
for
{
x
}
x
{
y
}
250
)
;
}
async
function
waitForExpectedSize
(
helper
x
y
)
{
await
waitForAnimationFrames
(
)
;
let
isExpectedSize
=
(
)
=
>
{
let
box
=
helper
.
dialog
.
_box
;
info
(
Dialog
is
{
box
.
clientWidth
}
x
{
box
.
clientHeight
}
)
;
if
(
closeEnough
(
box
.
clientWidth
x
)
&
&
closeEnough
(
box
.
clientHeight
y
)
)
{
ok
(
{
box
.
clientWidth
}
close
enough
to
{
x
}
)
;
ok
(
{
box
.
clientHeight
}
close
enough
to
{
y
}
)
;
return
true
;
}
return
false
;
}
;
if
(
isExpectedSize
(
)
)
{
return
;
}
await
TestUtils
.
waitForCondition
(
isExpectedSize
Wait
for
{
x
}
x
{
y
}
)
;
}
add_task
(
async
function
testResizing
(
)
{
await
PrintHelper
.
withTestPage
(
async
helper
=
>
{
let
{
innerWidth
innerHeight
}
=
window
;
await
resizeWindow
(
500
400
)
;
await
helper
.
startPrint
(
)
;
let
chromeHeight
=
window
.
windowUtils
.
getBoundsWithoutFlushing
(
document
.
getElementById
(
"
browser
"
)
)
.
top
;
let
initialWidth
=
500
-
8
;
let
initialHeight
=
400
-
16
-
chromeHeight
+
5
;
await
waitForExpectedSize
(
helper
initialWidth
initialHeight
)
;
await
resizeWindow
(
600
500
)
;
let
updatedWidth
=
initialWidth
+
100
+
8
-
32
;
await
waitForExpectedSize
(
helper
updatedWidth
initialHeight
+
100
)
;
await
resizeWindow
(
1100
900
)
;
await
waitForExpectedSize
(
helper
1000
650
)
;
await
helper
.
closeDialog
(
)
;
await
resizeWindow
(
innerWidth
innerHeight
)
;
}
)
;
}
)
;
