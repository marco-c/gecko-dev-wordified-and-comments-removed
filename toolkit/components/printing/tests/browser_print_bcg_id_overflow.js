"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
OPENED_URI
=
PrintHelper
.
defaultTestPageUrl
;
const
OPEN_NOOPENER_WINDOW
=
<
a
rel
=
"
noopener
"
target
=
"
_blank
"
href
=
"
{
OPENED_URI
}
"
>
Open
the
window
<
/
a
>
;
add_task
(
async
function
test_bc_id_overflow
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
print
.
tab_modal
.
enabled
"
true
]
]
}
)
;
is
(
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
null
)
;
await
BrowserTestUtils
.
withNewTab
(
data
:
text
/
html
+
encodeURIComponent
(
OPEN_NOOPENER_WINDOW
)
async
function
(
browser
)
{
let
tabOpenedPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
OPENED_URI
true
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
a
"
0
0
{
}
browser
)
;
let
tab
=
await
tabOpenedPromise
;
let
helper
=
new
PrintHelper
(
tab
.
linkedBrowser
)
;
await
helper
.
startPrint
(
)
;
helper
.
assertDialogOpen
(
)
;
let
previewBrowser
=
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
;
is
(
typeof
previewBrowser
.
browsingContext
.
group
.
id
"
number
"
"
Sanity
"
)
;
is
(
previewBrowser
.
browsingContext
.
group
.
id
tab
.
linkedBrowser
.
browsingContext
.
group
.
id
"
Group
ids
should
match
:
"
+
tab
.
linkedBrowser
.
browsingContext
.
group
.
id
)
;
is
(
previewBrowser
.
browsingContext
.
group
tab
.
linkedBrowser
.
browsingContext
.
group
"
Groups
should
match
"
)
;
await
helper
.
closeDialog
(
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
