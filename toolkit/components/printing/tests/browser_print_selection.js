const
frameSource
=
"
<
a
href
=
'
about
:
mozilla
'
>
some
text
<
/
a
>
<
a
id
=
'
other
'
href
=
'
about
:
about
'
>
other
text
<
/
a
>
"
;
const
sources
=
[
<
html
>
<
iframe
id
=
"
f
"
srcdoc
=
"
{
frameSource
}
"
>
<
/
iframe
>
<
/
html
>
<
html
>
<
iframe
id
=
"
f
"
src
=
"
https
:
/
/
example
.
com
/
document
-
builder
.
sjs
?
html
=
{
frameSource
}
"
>
<
/
iframe
>
<
/
html
>
]
;
add_task
(
async
function
print_selection
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
print
.
tab_modal
.
enabled
"
true
]
]
}
)
;
for
(
let
source
of
sources
)
{
is
(
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
null
"
There
shouldn
'
t
be
any
print
preview
browser
"
)
;
await
BrowserTestUtils
.
withNewTab
(
"
data
:
text
/
html
"
+
source
async
function
(
browser
)
{
let
frameBC
=
browser
.
browsingContext
.
children
[
0
]
;
await
SpecialPowers
.
spawn
(
frameBC
[
]
(
)
=
>
{
let
element
=
content
.
document
.
getElementById
(
"
other
"
)
;
content
.
focus
(
)
;
content
.
getSelection
(
)
.
selectAllChildren
(
element
)
;
}
)
;
PrintUtils
.
startPrintWindow
(
frameBC
null
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
!
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
)
;
let
previewBrowser
=
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
;
async
function
getPreviewText
(
)
{
return
SpecialPowers
.
spawn
(
previewBrowser
[
]
function
(
)
{
return
content
.
document
.
body
.
textContent
;
}
)
;
}
await
BrowserTestUtils
.
waitForCondition
(
getPreviewText
)
;
let
textContent
=
await
getPreviewText
(
)
;
is
(
textContent
"
other
text
"
"
Correct
content
loaded
"
)
;
}
)
;
}
}
)
;
