"
use
strict
"
;
add_task
(
async
function
switch_print_preview_browsers
(
)
{
await
PrintHelper
.
withTestPage
(
async
helper
=
>
{
await
helper
.
waitForReaderModeReady
(
)
;
await
helper
.
startPrint
(
)
;
let
sourcePreviewBrowser
=
helper
.
currentPrintPreviewBrowser
;
{
let
[
headerText
headingText
]
=
await
SpecialPowers
.
spawn
(
sourcePreviewBrowser
[
]
async
function
(
)
{
return
[
content
.
document
.
querySelector
(
"
header
"
)
.
textContent
content
.
document
.
querySelector
(
"
h1
"
)
.
textContent
]
;
}
)
;
is
(
headerText
"
Site
header
"
"
Should
have
initial
content
.
"
)
;
is
(
headingText
"
Article
title
"
"
Should
have
initial
title
.
"
)
;
}
await
helper
.
openMoreSettings
(
)
;
let
simplifyRadio
=
helper
.
get
(
"
source
-
version
-
simplified
-
radio
"
)
;
ok
(
!
simplifyRadio
.
checked
"
Simplify
page
is
not
checked
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
simplifyRadio
)
"
Simplify
is
shown
"
)
;
await
helper
.
waitForPreview
(
(
)
=
>
helper
.
click
(
simplifyRadio
)
)
;
let
simplifiedPreviewBrowser
=
helper
.
currentPrintPreviewBrowser
;
is
(
simplifiedPreviewBrowser
.
getAttribute
(
"
previewtype
"
)
"
simplified
"
"
Simplified
browser
was
rendered
"
)
;
is
(
simplifiedPreviewBrowser
.
closest
(
"
stack
"
)
.
getAttribute
(
"
previewtype
"
)
"
simplified
"
"
Simplified
browser
is
selected
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
simplifiedPreviewBrowser
)
"
Simplified
browser
is
visible
"
)
;
ok
(
simplifyRadio
.
checked
"
Simplify
page
is
checked
"
)
;
{
let
[
hasHeader
headingText
]
=
await
SpecialPowers
.
spawn
(
simplifiedPreviewBrowser
[
]
async
function
(
)
{
return
[
!
!
content
.
document
.
querySelector
(
"
header
"
)
content
.
document
.
querySelector
(
"
h1
"
)
.
textContent
]
;
}
)
;
ok
(
!
hasHeader
"
The
header
was
simplified
out
"
)
;
is
(
headingText
"
Article
title
"
"
The
heading
is
still
there
"
)
;
}
let
sourceRadio
=
helper
.
get
(
"
source
-
version
-
source
-
radio
"
)
;
ok
(
!
sourceRadio
.
checked
"
Source
is
not
checked
"
)
;
await
helper
.
waitForPreview
(
(
)
=
>
helper
.
click
(
sourceRadio
)
)
;
is
(
helper
.
currentPrintPreviewBrowser
sourcePreviewBrowser
"
Source
browser
was
rendered
"
)
;
is
(
sourcePreviewBrowser
.
getAttribute
(
"
previewtype
"
)
"
source
"
"
Source
browser
was
rendered
"
)
;
is
(
sourcePreviewBrowser
.
closest
(
"
stack
"
)
.
getAttribute
(
"
previewtype
"
)
"
source
"
"
Source
browser
is
selected
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
sourcePreviewBrowser
)
"
Source
browser
is
visible
"
)
;
ok
(
sourceRadio
.
checked
"
Source
version
is
checked
"
)
;
{
let
headerText
=
await
SpecialPowers
.
spawn
(
sourcePreviewBrowser
[
]
async
function
(
)
{
return
content
.
document
.
querySelector
(
"
header
"
)
.
textContent
;
}
)
;
is
(
headerText
"
Site
header
"
"
Should
have
initial
content
.
"
)
;
}
await
helper
.
closeDialog
(
)
;
}
"
simplifyArticleSample
.
html
"
)
;
}
)
;
add_task
(
async
function
testPrintBackgroundsDisabledSimplified
(
)
{
await
PrintHelper
.
withTestPage
(
async
helper
=
>
{
await
helper
.
waitForReaderModeReady
(
)
;
await
helper
.
startPrint
(
)
;
helper
.
assertPreviewedWithSettings
(
{
printBGImages
:
false
printBGColors
:
false
}
)
;
await
helper
.
openMoreSettings
(
)
;
let
printBackgrounds
=
helper
.
get
(
"
backgrounds
-
enabled
"
)
;
ok
(
!
printBackgrounds
.
checked
"
Print
backgrounds
is
not
checked
"
)
;
ok
(
!
printBackgrounds
.
disabled
"
Print
backgrounds
in
not
disabled
"
)
;
await
helper
.
assertSettingsChanged
(
{
printBGImages
:
false
printBGColors
:
false
}
{
printBGImages
:
true
printBGColors
:
true
}
async
(
)
=
>
{
await
helper
.
waitForPreview
(
(
)
=
>
helper
.
click
(
printBackgrounds
)
)
;
}
)
;
ok
(
printBackgrounds
.
checked
"
Print
backgrounds
is
checked
"
)
;
ok
(
!
printBackgrounds
.
disabled
"
Print
backgrounds
is
not
disabled
"
)
;
helper
.
assertPreviewedWithSettings
(
{
printBGImages
:
true
printBGColors
:
true
}
)
;
let
simplifyRadio
=
helper
.
get
(
"
source
-
version
-
simplified
-
radio
"
)
;
ok
(
!
simplifyRadio
.
checked
"
Simplify
page
is
not
checked
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
simplifyRadio
)
"
Simplify
is
shown
"
)
;
await
helper
.
waitForPreview
(
(
)
=
>
helper
.
click
(
simplifyRadio
)
)
;
ok
(
!
printBackgrounds
.
checked
"
Print
backgrounds
is
now
unchecked
"
)
;
ok
(
printBackgrounds
.
disabled
"
Print
backgrounds
has
been
disabled
"
)
;
helper
.
assertPreviewedWithSettings
(
{
printBGImages
:
false
printBGColors
:
false
}
)
;
let
sourceRadio
=
helper
.
get
(
"
source
-
version
-
source
-
radio
"
)
;
ok
(
!
sourceRadio
.
checked
"
Source
is
not
checked
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
sourceRadio
)
"
Source
is
shown
"
)
;
await
helper
.
waitForPreview
(
(
)
=
>
helper
.
click
(
sourceRadio
)
)
;
ok
(
printBackgrounds
.
checked
"
Print
backgrounds
setting
was
remembered
"
)
;
ok
(
!
printBackgrounds
.
disabled
"
Print
backgrounds
can
be
changed
again
"
)
;
helper
.
assertPreviewedWithSettings
(
{
printBGImages
:
true
printBGColors
:
true
}
)
;
await
helper
.
closeDialog
(
)
;
}
"
simplifyArticleSample
.
html
"
)
;
}
)
;
add_task
(
async
function
testSimplifyHiddenNonArticle
(
)
{
await
PrintHelper
.
withTestPage
(
async
helper
=
>
{
await
helper
.
startPrint
(
)
;
await
helper
.
openMoreSettings
(
)
;
let
sourceVersionSection
=
helper
.
get
(
"
source
-
version
-
section
"
)
;
ok
(
BrowserTestUtils
.
isHidden
(
sourceVersionSection
)
"
Source
version
is
hidden
"
)
;
await
helper
.
closeDialog
(
)
;
}
"
simplifyNonArticleSample
.
html
"
)
;
}
)
;
add_task
(
async
function
testSimplifyNonArticleTabModal
(
)
{
await
PrintHelper
.
withTestPage
(
async
helper
=
>
{
let
tab
=
gBrowser
.
selectedTab
;
tab
.
linkedBrowser
.
isArticle
=
true
;
await
helper
.
startPrint
(
)
;
await
SpecialPowers
.
spawn
(
helper
.
currentPrintPreviewBrowser
[
]
async
(
)
=
>
{
is
(
content
.
document
.
title
"
Non
article
title
"
"
Should
have
initial
content
.
"
)
;
}
)
;
await
helper
.
openMoreSettings
(
)
;
let
simplifyRadio
=
helper
.
get
(
"
source
-
version
-
simplified
-
radio
"
)
;
ok
(
!
simplifyRadio
.
checked
"
Simplify
is
off
"
)
;
await
helper
.
waitForPreview
(
(
)
=
>
helper
.
click
(
simplifyRadio
)
)
;
let
simplifiedPreviewBrowser
=
helper
.
currentPrintPreviewBrowser
;
is
(
simplifiedPreviewBrowser
.
getAttribute
(
"
previewtype
"
)
"
simplified
"
"
The
simplified
browser
is
shown
"
)
;
ok
(
simplifyRadio
.
checked
"
Should
have
simplify
page
option
checked
"
)
;
await
SpecialPowers
.
spawn
(
simplifiedPreviewBrowser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
title
=
=
=
"
Failed
to
load
article
from
page
"
"
Simplified
document
title
should
be
updated
with
recovery
title
.
"
)
;
}
)
;
await
helper
.
closeDialog
(
)
;
}
"
simplifyNonArticleSample
.
html
"
)
;
}
)
;
add_task
(
async
function
testSimplifyHiddenReaderMode
(
)
{
await
PrintHelper
.
withTestPage
(
async
helper
=
>
{
let
tab
=
gBrowser
.
selectedTab
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
readerButton
.
hidden
)
;
readerButton
.
click
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
helper
.
startPrint
(
)
;
await
helper
.
openMoreSettings
(
)
;
let
sourceVersionSection
=
helper
.
get
(
"
source
-
version
-
section
"
)
;
ok
(
BrowserTestUtils
.
isHidden
(
sourceVersionSection
)
"
Source
version
is
hidden
in
reader
mode
"
)
;
await
helper
.
closeDialog
(
)
;
}
"
simplifyArticleSample
.
html
"
)
;
}
)
;
