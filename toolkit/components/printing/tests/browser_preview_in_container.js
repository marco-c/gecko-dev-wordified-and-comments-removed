"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
async
function
runTest
(
)
{
is
(
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
null
"
There
shouldn
'
t
be
any
print
preview
browser
"
)
;
gBrowser
.
selectedTab
=
await
BrowserTestUtils
.
addTab
(
gBrowser
{
TEST_PATH
}
file_print
.
html
{
userContextId
:
1
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
!
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
)
;
let
previewBrowser
=
document
.
querySelector
(
"
.
printPreviewBrowser
"
)
;
let
contentFound
=
await
SpecialPowers
.
spawn
(
previewBrowser
[
]
(
)
=
>
{
return
!
!
content
.
document
.
getElementById
(
"
printed
"
)
;
}
)
;
ok
(
contentFound
"
We
should
find
the
preview
content
.
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
add_task
(
async
function
test_in_container
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
print
.
tab_modal
.
enabled
"
true
]
[
"
privacy
.
firstparty
.
isolate
"
false
]
]
}
)
;
await
runTest
(
)
;
}
)
;
add_task
(
async
function
test_with_fpi
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
print
.
tab_modal
.
enabled
"
true
]
[
"
privacy
.
firstparty
.
isolate
"
true
]
]
}
)
;
await
runTest
(
)
;
}
)
;
