XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
PRINT_TAB_MODAL
"
"
print
.
tab_modal
.
enabled
"
false
)
;
var
gFocusedElement
=
null
;
var
PrintUtils
=
{
init
(
)
{
window
.
messageManager
.
addMessageListener
(
"
Printing
:
Error
"
this
)
;
}
get
_bundle
(
)
{
delete
this
.
_bundle
;
return
(
this
.
_bundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
global
/
locale
/
printing
.
properties
"
)
)
;
}
showPageSetup
(
)
{
try
{
var
printSettings
=
this
.
getPrintSettings
(
)
;
var
PRINTPROMPTSVC
=
Cc
[
"
mozilla
.
org
/
embedcomp
/
printingprompt
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrintingPromptService
)
;
PRINTPROMPTSVC
.
showPageSetupDialog
(
window
printSettings
null
)
;
}
catch
(
e
)
{
dump
(
"
showPageSetup
"
+
e
+
"
\
n
"
)
;
return
false
;
}
return
true
;
}
_getLastUsedPrinterName
(
)
{
try
{
let
PSSVC
=
Cc
[
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrintSettingsService
)
;
return
PSSVC
.
lastUsedPrinterName
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
null
;
}
_tabModalTemplate
(
)
{
return
document
.
importNode
(
document
.
getElementById
(
"
printTabModalTemplate
"
)
.
content
true
)
.
firstElementChild
;
}
async
_openTabModalPrint
(
aBrowsingContext
)
{
const
{
SubDialog
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
SubDialog
.
jsm
"
)
;
let
container
=
gBrowser
.
getBrowserContainer
(
aBrowsingContext
.
embedderElement
)
;
if
(
container
.
querySelector
(
"
.
printDialogContainer
"
)
)
{
return
;
}
let
dialog
=
new
SubDialog
(
{
id
:
printModal
{
aBrowsingContext
.
id
}
template
:
this
.
_tabModalTemplate
(
)
parentElement
:
container
dialogOptions
:
{
consumeOutsideClicks
:
false
reuseDialog
:
false
}
}
)
;
container
.
prepend
(
dialog
.
_overlay
)
;
dialog
.
_overlay
.
_dialog
=
dialog
;
let
sourceBrowser
=
aBrowsingContext
.
embedderElement
;
let
printPreviewBrowser
=
gBrowser
.
createBrowser
(
{
remoteType
:
sourceBrowser
.
remoteType
sameProcessAsFrameLoader
:
sourceBrowser
.
frameLoader
skipLoad
:
false
}
)
;
printPreviewBrowser
.
classList
.
add
(
"
printPreviewBrowser
"
)
;
container
.
querySelector
(
"
.
printTabModalView
"
)
.
prepend
(
printPreviewBrowser
)
;
printPreviewBrowser
.
loadURI
(
"
about
:
printpreview
"
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
await
dialog
.
open
(
chrome
:
/
/
global
/
content
/
print
.
html
?
browsingContextId
=
{
aBrowsingContext
.
id
}
)
;
}
async
updatePrintPreview
(
sourceBrowser
printSettings
)
{
let
container
=
gBrowser
.
getBrowserContainer
(
sourceBrowser
)
;
let
printPreviewBrowser
=
container
.
querySelector
(
"
.
printPreviewBrowser
"
)
;
if
(
!
printPreviewBrowser
)
{
return
0
;
}
let
numPages
=
await
this
.
_updatePrintPreview
(
sourceBrowser
printPreviewBrowser
printSettings
)
;
return
numPages
;
}
_updatePrintPreview
(
sourceBrowser
printPreviewBrowser
printSettings
)
{
return
new
Promise
(
resolve
=
>
{
printPreviewBrowser
.
messageManager
.
addMessageListener
(
"
Printing
:
Preview
:
UpdatePageCount
"
function
done
(
message
)
{
printPreviewBrowser
.
messageManager
.
removeMessageListener
(
"
Printing
:
Preview
:
UpdatePageCount
"
done
)
;
resolve
(
message
.
data
.
numPages
)
;
}
)
;
printPreviewBrowser
.
messageManager
.
sendAsyncMessage
(
"
Printing
:
Preview
:
Enter
"
{
changingBrowsers
:
false
lastUsedPrinterName
:
printSettings
.
printerName
simplifiedMode
:
false
windowID
:
sourceBrowser
.
outerWindowID
}
)
;
}
)
;
}
startPrintWindow
(
aBrowsingContext
)
{
if
(
PRINT_TAB_MODAL
)
{
this
.
_openTabModalPrint
(
aBrowsingContext
)
;
}
else
{
this
.
printWindow
(
aBrowsingContext
)
;
}
}
printWindow
(
aBrowsingContext
aPrintSettings
)
{
let
windowID
=
aBrowsingContext
.
currentWindowGlobal
.
outerWindowId
;
let
topBrowser
=
aBrowsingContext
.
top
.
embedderElement
;
const
printPreviewIsOpen
=
!
!
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
if
(
printPreviewIsOpen
)
{
this
.
_logKeyedTelemetry
(
"
PRINT_DIALOG_OPENED_COUNT
"
"
FROM_PREVIEW
"
)
;
}
else
{
this
.
_logKeyedTelemetry
(
"
PRINT_DIALOG_OPENED_COUNT
"
"
FROM_PAGE
"
)
;
}
let
printSettings
=
aPrintSettings
|
|
this
.
getPrintSettings
(
)
;
printSettings
.
title
=
this
.
_originalTitle
|
|
topBrowser
.
contentTitle
;
if
(
this
.
_shouldSimplify
)
{
printSettings
.
docURL
=
this
.
_originalURL
|
|
topBrowser
.
currentURI
.
spec
;
}
topBrowser
.
print
(
windowID
printSettings
)
;
if
(
printPreviewIsOpen
)
{
if
(
this
.
_shouldSimplify
)
{
this
.
_logKeyedTelemetry
(
"
PRINT_COUNT
"
"
SIMPLIFIED
"
)
;
}
else
{
this
.
_logKeyedTelemetry
(
"
PRINT_COUNT
"
"
WITH_PREVIEW
"
)
;
}
}
else
{
this
.
_logKeyedTelemetry
(
"
PRINT_COUNT
"
"
WITHOUT_PREVIEW
"
)
;
}
}
printPreview
(
aListenerObj
)
{
if
(
PRINT_TAB_MODAL
)
{
this
.
_openTabModalPrint
(
gBrowser
.
selectedBrowser
.
browsingContext
)
;
return
;
}
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
if
(
!
printPreviewTB
)
{
this
.
_listener
=
aListenerObj
;
this
.
_sourceBrowser
=
aListenerObj
.
getSourceBrowser
(
)
;
this
.
_originalTitle
=
this
.
_sourceBrowser
.
contentTitle
;
this
.
_originalURL
=
this
.
_sourceBrowser
.
currentURI
.
spec
;
this
.
logTelemetry
(
"
PRINT_PREVIEW_OPENED_COUNT
"
)
;
}
else
{
printPreviewTB
.
disableUpdateTriggers
(
true
)
;
this
.
_sourceBrowser
=
this
.
_shouldSimplify
?
this
.
_listener
.
getSimplifiedPrintPreviewBrowser
(
)
:
this
.
_listener
.
getPrintPreviewBrowser
(
)
;
this
.
_sourceBrowser
.
collapsed
=
true
;
this
.
ensureProgressDialogClosed
(
)
;
}
this
.
_webProgressPP
=
{
}
;
let
ppParams
=
{
}
;
let
notifyOnOpen
=
{
}
;
let
printSettings
=
this
.
getPrintSettings
(
)
;
let
PPROMPTSVC
=
Cc
[
"
mozilla
.
org
/
embedcomp
/
printingprompt
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrintingPromptService
)
;
try
{
PPROMPTSVC
.
showPrintProgressDialog
(
window
printSettings
this
.
_obsPP
false
this
.
_webProgressPP
ppParams
notifyOnOpen
)
;
if
(
ppParams
.
value
)
{
ppParams
.
value
.
docTitle
=
this
.
_originalTitle
;
ppParams
.
value
.
docURL
=
this
.
_originalURL
;
}
if
(
!
notifyOnOpen
.
value
.
valueOf
(
)
|
|
this
.
_webProgressPP
.
value
=
=
null
)
{
this
.
_enterPrintPreview
(
)
;
}
}
catch
(
e
)
{
this
.
_enterPrintPreview
(
)
;
}
}
_listener
:
null
_closeHandlerPP
:
null
_webProgressPP
:
null
_sourceBrowser
:
null
_originalTitle
:
"
"
_originalURL
:
"
"
_shouldSimplify
:
false
_getErrorCodeForNSResult
(
nsresult
)
{
const
MSG_CODES
=
[
"
GFX_PRINTER_NO_PRINTER_AVAILABLE
"
"
GFX_PRINTER_NAME_NOT_FOUND
"
"
GFX_PRINTER_COULD_NOT_OPEN_FILE
"
"
GFX_PRINTER_STARTDOC
"
"
GFX_PRINTER_ENDDOC
"
"
GFX_PRINTER_STARTPAGE
"
"
GFX_PRINTER_DOC_IS_BUSY
"
"
ABORT
"
"
NOT_AVAILABLE
"
"
NOT_IMPLEMENTED
"
"
OUT_OF_MEMORY
"
"
UNEXPECTED
"
]
;
for
(
let
code
of
MSG_CODES
)
{
let
nsErrorResult
=
"
NS_ERROR_
"
+
code
;
if
(
Cr
[
nsErrorResult
]
=
=
nsresult
)
{
return
code
;
}
}
return
"
FAILURE
"
;
}
_displayPrintingError
(
nsresult
isPrinting
)
{
let
msgName
=
"
PERR_
"
+
this
.
_getErrorCodeForNSResult
(
nsresult
)
;
let
msg
title
;
if
(
!
isPrinting
)
{
let
ppMsgName
=
msgName
+
"
_PP
"
;
try
{
msg
=
this
.
_bundle
.
GetStringFromName
(
ppMsgName
)
;
}
catch
(
e
)
{
}
}
if
(
!
msg
)
{
msg
=
this
.
_bundle
.
GetStringFromName
(
msgName
)
;
}
title
=
this
.
_bundle
.
GetStringFromName
(
isPrinting
?
"
print_error_dialog_title
"
:
"
printpreview_error_dialog_title
"
)
;
Services
.
prompt
.
alert
(
window
title
msg
)
;
Services
.
telemetry
.
keyedScalarAdd
(
"
printing
.
error
"
this
.
_getErrorCodeForNSResult
(
nsresult
)
1
)
;
}
receiveMessage
(
aMessage
)
{
if
(
aMessage
.
name
=
=
"
Printing
:
Error
"
)
{
this
.
_displayPrintingError
(
aMessage
.
data
.
nsresult
aMessage
.
data
.
isPrinting
)
;
return
undefined
;
}
if
(
!
this
.
_webProgressPP
.
value
)
{
return
undefined
;
}
let
listener
=
this
.
_webProgressPP
.
value
;
let
mm
=
aMessage
.
target
.
messageManager
;
let
data
=
aMessage
.
data
;
switch
(
aMessage
.
name
)
{
case
"
Printing
:
Preview
:
ProgressChange
"
:
{
return
listener
.
onProgressChange
(
null
null
data
.
curSelfProgress
data
.
maxSelfProgress
data
.
curTotalProgress
data
.
maxTotalProgress
)
;
}
case
"
Printing
:
Preview
:
StateChange
"
:
{
if
(
data
.
stateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
)
{
mm
.
removeMessageListener
(
"
Printing
:
Preview
:
StateChange
"
this
)
;
mm
.
removeMessageListener
(
"
Printing
:
Preview
:
ProgressChange
"
this
)
;
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
printPreviewTB
.
disableUpdateTriggers
(
false
)
;
}
return
listener
.
onStateChange
(
null
null
data
.
stateFlags
data
.
status
)
;
}
}
return
undefined
;
}
_setPrinterDefaultsForSelectedPrinter
(
aPSSVC
aPrintSettings
)
{
if
(
!
aPrintSettings
.
printerName
)
{
aPrintSettings
.
printerName
=
aPSSVC
.
lastUsedPrinterName
;
}
aPSSVC
.
initPrintSettingsFromPrinter
(
aPrintSettings
.
printerName
aPrintSettings
)
;
aPSSVC
.
initPrintSettingsFromPrefs
(
aPrintSettings
true
aPrintSettings
.
kInitSaveAll
)
;
}
getPrintSettings
(
)
{
var
printSettings
;
try
{
var
PSSVC
=
Cc
[
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrintSettingsService
)
;
printSettings
=
PSSVC
.
globalPrintSettings
;
this
.
_setPrinterDefaultsForSelectedPrinter
(
PSSVC
printSettings
)
;
}
catch
(
e
)
{
dump
(
"
getPrintSettings
:
"
+
e
+
"
\
n
"
)
;
}
return
printSettings
;
}
_obsPP
:
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
)
{
return
;
}
setTimeout
(
function
(
)
{
PrintUtils
.
_enterPrintPreview
(
)
;
}
0
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
}
get
shouldSimplify
(
)
{
return
this
.
_shouldSimplify
;
}
setSimplifiedMode
(
shouldSimplify
)
{
this
.
_shouldSimplify
=
shouldSimplify
;
}
_ppBrowsers
:
new
Set
(
)
_currentPPBrowser
:
null
_enterPrintPreview
(
)
{
let
ppBrowser
=
this
.
_shouldSimplify
?
this
.
_listener
.
getSimplifiedPrintPreviewBrowser
(
)
:
this
.
_listener
.
getPrintPreviewBrowser
(
)
;
this
.
_ppBrowsers
.
add
(
ppBrowser
)
;
let
oldPPBrowser
=
null
;
let
changingPrintPreviewBrowsers
=
false
;
if
(
this
.
_currentPPBrowser
&
&
ppBrowser
!
=
this
.
_currentPPBrowser
)
{
changingPrintPreviewBrowsers
=
true
;
oldPPBrowser
=
this
.
_currentPPBrowser
;
}
this
.
_currentPPBrowser
=
ppBrowser
;
let
mm
=
ppBrowser
.
messageManager
;
let
lastUsedPrinterName
=
this
.
_getLastUsedPrinterName
(
)
;
let
sendEnterPreviewMessage
=
function
(
browser
simplified
)
{
mm
.
sendAsyncMessage
(
"
Printing
:
Preview
:
Enter
"
{
windowID
:
browser
.
outerWindowID
simplifiedMode
:
simplified
changingBrowsers
:
changingPrintPreviewBrowsers
lastUsedPrinterName
}
)
;
}
;
if
(
this
.
_shouldSimplify
)
{
let
simplifiedBrowser
=
this
.
_listener
.
getSimplifiedSourceBrowser
(
)
;
if
(
simplifiedBrowser
)
{
sendEnterPreviewMessage
(
simplifiedBrowser
true
)
;
}
else
{
simplifiedBrowser
=
this
.
_listener
.
createSimplifiedBrowser
(
)
;
let
spMM
=
simplifiedBrowser
.
messageManager
;
spMM
.
addMessageListener
(
"
Printing
:
Preview
:
ReaderModeReady
"
function
onReaderReady
(
)
{
spMM
.
removeMessageListener
(
"
Printing
:
Preview
:
ReaderModeReady
"
onReaderReady
)
;
sendEnterPreviewMessage
(
simplifiedBrowser
true
)
;
}
)
;
spMM
.
sendAsyncMessage
(
"
Printing
:
Preview
:
ParseDocument
"
{
URL
:
this
.
_originalURL
windowID
:
oldPPBrowser
.
outerWindowID
}
)
;
this
.
logTelemetry
(
"
PRINT_PREVIEW_SIMPLIFY_PAGE_OPENED_COUNT
"
)
;
}
}
else
{
sendEnterPreviewMessage
(
this
.
_sourceBrowser
false
)
;
}
let
waitForPrintProgressToEnableToolbar
=
false
;
if
(
this
.
_webProgressPP
.
value
)
{
mm
.
addMessageListener
(
"
Printing
:
Preview
:
StateChange
"
this
)
;
mm
.
addMessageListener
(
"
Printing
:
Preview
:
ProgressChange
"
this
)
;
waitForPrintProgressToEnableToolbar
=
true
;
}
let
onEntered
=
message
=
>
{
mm
.
removeMessageListener
(
"
Printing
:
Preview
:
Entered
"
onEntered
)
;
if
(
message
.
data
.
failed
)
{
this
.
_ppBrowsers
.
clear
(
)
;
this
.
_listener
.
onEnter
(
)
;
this
.
_listener
.
onExit
(
)
;
return
;
}
gFocusedElement
=
document
.
commandDispatcher
.
focusedElement
;
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
if
(
printPreviewTB
)
{
if
(
message
.
data
.
changingBrowsers
)
{
printPreviewTB
.
destroy
(
)
;
printPreviewTB
.
initialize
(
ppBrowser
)
;
}
else
{
printPreviewTB
.
updateToolbar
(
)
;
}
if
(
!
waitForPrintProgressToEnableToolbar
)
{
printPreviewTB
.
disableUpdateTriggers
(
false
)
;
}
ppBrowser
.
collapsed
=
false
;
ppBrowser
.
focus
(
)
;
return
;
}
if
(
this
.
_listener
.
activateBrowser
)
{
this
.
_listener
.
activateBrowser
(
this
.
_sourceBrowser
)
;
}
else
{
this
.
_sourceBrowser
.
docShellIsActive
=
true
;
}
printPreviewTB
=
document
.
createXULElement
(
"
toolbar
"
{
is
:
"
printpreview
-
toolbar
"
}
)
;
printPreviewTB
.
setAttribute
(
"
fullscreentoolbar
"
true
)
;
printPreviewTB
.
setAttribute
(
"
flex
"
"
1
"
)
;
printPreviewTB
.
id
=
"
print
-
preview
-
toolbar
"
;
let
navToolbox
=
this
.
_listener
.
getNavToolbox
(
)
;
navToolbox
.
parentNode
.
insertBefore
(
printPreviewTB
navToolbox
)
;
printPreviewTB
.
initialize
(
ppBrowser
)
;
if
(
waitForPrintProgressToEnableToolbar
)
{
printPreviewTB
.
disableUpdateTriggers
(
true
)
;
}
if
(
this
.
_sourceBrowser
.
isArticle
)
{
printPreviewTB
.
enableSimplifyPage
(
)
;
}
else
{
this
.
logTelemetry
(
"
PRINT_PREVIEW_SIMPLIFY_PAGE_UNAVAILABLE_COUNT
"
)
;
printPreviewTB
.
disableSimplifyPage
(
)
;
}
if
(
window
.
onclose
)
{
this
.
_closeHandlerPP
=
window
.
onclose
;
}
else
{
this
.
_closeHandlerPP
=
null
;
}
window
.
onclose
=
function
(
)
{
PrintUtils
.
exitPrintPreview
(
)
;
return
false
;
}
;
window
.
addEventListener
(
"
keydown
"
this
.
onKeyDownPP
true
)
;
window
.
addEventListener
(
"
keypress
"
this
.
onKeyPressPP
true
)
;
ppBrowser
.
collapsed
=
false
;
ppBrowser
.
focus
(
)
;
this
.
_listener
.
onEnter
(
)
;
}
;
mm
.
addMessageListener
(
"
Printing
:
Preview
:
Entered
"
onEntered
)
;
}
exitPrintPreview
(
)
{
for
(
let
browser
of
this
.
_ppBrowsers
)
{
let
browserMM
=
browser
.
messageManager
;
browserMM
.
sendAsyncMessage
(
"
Printing
:
Preview
:
Exit
"
)
;
}
this
.
_ppBrowsers
.
clear
(
)
;
this
.
_currentPPBrowser
=
null
;
window
.
removeEventListener
(
"
keydown
"
this
.
onKeyDownPP
true
)
;
window
.
removeEventListener
(
"
keypress
"
this
.
onKeyPressPP
true
)
;
if
(
this
.
_closeHandlerPP
)
{
window
.
onclose
=
this
.
_closeHandlerPP
;
}
else
{
window
.
onclose
=
null
;
}
this
.
_closeHandlerPP
=
null
;
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
printPreviewTB
.
destroy
(
)
;
printPreviewTB
.
remove
(
)
;
if
(
gFocusedElement
)
{
Services
.
focus
.
setFocus
(
gFocusedElement
Services
.
focus
.
FLAG_NOSCROLL
)
;
}
else
{
this
.
_sourceBrowser
.
focus
(
)
;
}
gFocusedElement
=
null
;
this
.
setSimplifiedMode
(
false
)
;
this
.
ensureProgressDialogClosed
(
)
;
this
.
_listener
.
onExit
(
)
;
this
.
_originalTitle
=
"
"
;
this
.
_originalURL
=
"
"
;
}
logTelemetry
(
ID
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
ID
)
;
histogram
.
add
(
true
)
;
}
_logKeyedTelemetry
(
id
key
)
{
let
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
id
)
;
histogram
.
add
(
key
)
;
}
onKeyDownPP
(
aEvent
)
{
if
(
aEvent
.
keyCode
=
=
aEvent
.
DOM_VK_ESCAPE
)
{
PrintUtils
.
exitPrintPreview
(
)
;
}
}
onKeyPressPP
(
aEvent
)
{
var
closeKey
;
try
{
closeKey
=
document
.
getElementById
(
"
key_close
"
)
.
getAttribute
(
"
key
"
)
;
closeKey
=
aEvent
[
"
DOM_VK_
"
+
closeKey
]
;
}
catch
(
e
)
{
}
var
isModif
=
aEvent
.
ctrlKey
|
|
aEvent
.
metaKey
;
if
(
isModif
&
&
(
aEvent
.
charCode
=
=
closeKey
|
|
aEvent
.
charCode
=
=
closeKey
+
32
)
)
{
PrintUtils
.
exitPrintPreview
(
)
;
}
else
if
(
isModif
)
{
var
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
var
printKey
=
document
.
getElementById
(
"
printKb
"
)
.
getAttribute
(
"
key
"
)
.
toUpperCase
(
)
;
var
pressedKey
=
String
.
fromCharCode
(
aEvent
.
charCode
)
.
toUpperCase
(
)
;
if
(
printKey
=
=
pressedKey
)
{
printPreviewTB
.
print
(
)
;
}
}
if
(
isModif
)
{
aEvent
.
preventDefault
(
)
;
aEvent
.
stopPropagation
(
)
;
}
}
ensureProgressDialogClosed
(
)
{
if
(
this
.
_webProgressPP
&
&
this
.
_webProgressPP
.
value
)
{
this
.
_webProgressPP
.
value
.
onStateChange
(
null
null
Ci
.
nsIWebProgressListener
.
STATE_STOP
0
)
;
}
}
}
;
PrintUtils
.
init
(
)
;
