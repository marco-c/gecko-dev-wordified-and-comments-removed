var
gPrintSettingsAreGlobal
=
false
;
var
gSavePrintSettings
=
false
;
var
gFocusedElement
=
null
;
var
PrintUtils
=
{
init
(
)
{
window
.
messageManager
.
addMessageListener
(
"
Printing
:
Error
"
this
)
;
}
get
bundle
(
)
{
let
stringService
=
Components
.
classes
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIStringBundleService
)
;
delete
this
.
bundle
;
return
this
.
bundle
=
stringService
.
createBundle
(
"
chrome
:
/
/
global
/
locale
/
printing
.
properties
"
)
;
}
showPageSetup
(
)
{
try
{
var
printSettings
=
this
.
getPrintSettings
(
)
;
var
PRINTPROMPTSVC
=
Components
.
classes
[
"
mozilla
.
org
/
embedcomp
/
printingprompt
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrintingPromptService
)
;
PRINTPROMPTSVC
.
showPageSetup
(
window
printSettings
null
)
;
if
(
gSavePrintSettings
)
{
var
PSSVC
=
Components
.
classes
[
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrintSettingsService
)
;
PSSVC
.
savePrintSettingsToPrefs
(
printSettings
true
printSettings
.
kInitSaveNativeData
)
;
}
}
catch
(
e
)
{
dump
(
"
showPageSetup
"
+
e
+
"
\
n
"
)
;
return
false
;
}
return
true
;
}
getDefaultPrinterName
(
)
{
try
{
let
PSSVC
=
Components
.
classes
[
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrintSettingsService
)
;
return
PSSVC
.
defaultPrinterName
;
}
catch
(
e
)
{
Components
.
utils
.
reportError
(
e
)
;
}
return
null
;
}
printWindow
(
aWindowID
aBrowser
)
{
let
mm
=
aBrowser
.
messageManager
;
let
defaultPrinterName
=
this
.
getDefaultPrinterName
(
)
;
mm
.
sendAsyncMessage
(
"
Printing
:
Print
"
{
windowID
:
aWindowID
simplifiedMode
:
this
.
_shouldSimplify
defaultPrinterName
}
)
;
}
print
(
)
{
if
(
gBrowser
)
{
return
this
.
printWindow
(
gBrowser
.
selectedBrowser
.
outerWindowID
gBrowser
.
selectedBrowser
)
;
}
if
(
this
.
usingRemoteTabs
)
{
throw
new
Error
(
"
PrintUtils
.
print
cannot
be
run
in
windows
running
with
"
+
"
remote
tabs
.
Use
PrintUtils
.
printWindow
instead
.
"
)
;
}
let
domWindow
=
window
.
content
;
let
ifReq
=
domWindow
.
QueryInterface
(
Components
.
interfaces
.
nsIInterfaceRequestor
)
;
let
browser
=
ifReq
.
getInterface
(
Components
.
interfaces
.
nsIWebNavigation
)
.
QueryInterface
(
Components
.
interfaces
.
nsIDocShell
)
.
chromeEventHandler
;
if
(
!
browser
)
{
throw
new
Error
(
"
PrintUtils
.
print
could
not
resolve
content
window
"
+
"
to
a
browser
.
"
)
;
}
let
windowID
=
ifReq
.
getInterface
(
Components
.
interfaces
.
nsIDOMWindowUtils
)
.
outerWindowID
;
let
Deprecated
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
{
}
)
.
Deprecated
;
let
msg
=
"
PrintUtils
.
print
is
now
deprecated
.
Please
use
PrintUtils
.
printWindow
.
"
;
let
url
=
"
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
docs
/
Mozilla
/
Tech
/
XUL
/
Printing
"
;
Deprecated
.
warning
(
msg
url
)
;
this
.
printWindow
(
windowID
browser
)
;
return
undefined
;
}
printPreview
(
aListenerObj
)
{
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
if
(
!
printPreviewTB
)
{
this
.
_listener
=
aListenerObj
;
this
.
_sourceBrowser
=
aListenerObj
.
getSourceBrowser
(
)
;
this
.
_originalTitle
=
this
.
_sourceBrowser
.
contentTitle
;
this
.
_originalURL
=
this
.
_sourceBrowser
.
currentURI
.
spec
;
this
.
logTelemetry
(
"
PRINT_PREVIEW_OPENED_COUNT
"
)
;
}
else
{
printPreviewTB
.
disableUpdateTriggers
(
true
)
;
this
.
_sourceBrowser
=
this
.
_shouldSimplify
?
this
.
_listener
.
getSimplifiedPrintPreviewBrowser
(
)
:
this
.
_listener
.
getPrintPreviewBrowser
(
)
;
this
.
_sourceBrowser
.
collapsed
=
true
;
this
.
ensureProgressDialogClosed
(
)
;
}
this
.
_webProgressPP
=
{
}
;
let
ppParams
=
{
}
;
let
notifyOnOpen
=
{
}
;
let
printSettings
=
this
.
getPrintSettings
(
)
;
let
PPROMPTSVC
=
Components
.
classes
[
"
mozilla
.
org
/
embedcomp
/
printingprompt
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrintingPromptService
)
;
try
{
PPROMPTSVC
.
showProgress
(
window
null
printSettings
this
.
_obsPP
false
this
.
_webProgressPP
ppParams
notifyOnOpen
)
;
if
(
ppParams
.
value
)
{
ppParams
.
value
.
docTitle
=
this
.
_originalTitle
;
ppParams
.
value
.
docURL
=
this
.
_originalURL
;
}
if
(
!
notifyOnOpen
.
value
.
valueOf
(
)
|
|
this
.
_webProgressPP
.
value
=
=
null
)
{
this
.
enterPrintPreview
(
)
;
}
}
catch
(
e
)
{
this
.
enterPrintPreview
(
)
;
}
}
getWebBrowserPrint
(
aWindow
)
{
let
Deprecated
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
{
}
)
.
Deprecated
;
let
text
=
"
getWebBrowserPrint
is
now
deprecated
and
fully
unsupported
for
"
+
"
multi
-
process
browsers
.
Please
use
a
frame
script
to
get
"
+
"
access
to
nsIWebBrowserPrint
from
content
.
"
;
let
url
=
"
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
docs
/
Printing_from_a_XUL_App
"
;
Deprecated
.
warning
(
text
url
)
;
if
(
this
.
usingRemoteTabs
)
{
return
{
}
;
}
var
contentWindow
=
aWindow
|
|
window
.
content
;
return
contentWindow
.
QueryInterface
(
Components
.
interfaces
.
nsIInterfaceRequestor
)
.
getInterface
(
Components
.
interfaces
.
nsIWebBrowserPrint
)
;
}
getPrintPreview
(
)
{
let
Deprecated
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
{
}
)
.
Deprecated
;
let
text
=
"
getPrintPreview
is
now
deprecated
and
fully
unsupported
for
"
+
"
multi
-
process
browsers
.
Please
use
a
frame
script
to
get
"
+
"
access
to
nsIWebBrowserPrint
from
content
.
"
;
let
url
=
"
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
docs
/
Printing_from_a_XUL_App
"
;
Deprecated
.
warning
(
text
url
)
;
if
(
this
.
usingRemoteTabs
)
{
return
{
}
;
}
return
this
.
_currentPPBrowser
.
docShell
.
printPreview
;
}
_listener
:
null
_closeHandlerPP
:
null
_webProgressPP
:
null
_sourceBrowser
:
null
_originalTitle
:
"
"
_originalURL
:
"
"
_shouldSimplify
:
false
get
usingRemoteTabs
(
)
{
let
usingRemoteTabs
=
window
.
QueryInterface
(
Components
.
interfaces
.
nsIInterfaceRequestor
)
.
getInterface
(
Components
.
interfaces
.
nsIWebNavigation
)
.
QueryInterface
(
Components
.
interfaces
.
nsILoadContext
)
.
useRemoteTabs
;
delete
this
.
usingRemoteTabs
;
return
this
.
usingRemoteTabs
=
usingRemoteTabs
;
}
displayPrintingError
(
nsresult
isPrinting
)
{
const
MSG_CODES
=
[
"
GFX_PRINTER_NO_PRINTER_AVAILABLE
"
"
GFX_PRINTER_NAME_NOT_FOUND
"
"
GFX_PRINTER_COULD_NOT_OPEN_FILE
"
"
GFX_PRINTER_STARTDOC
"
"
GFX_PRINTER_ENDDOC
"
"
GFX_PRINTER_STARTPAGE
"
"
GFX_PRINTER_DOC_IS_BUSY
"
"
ABORT
"
"
NOT_AVAILABLE
"
"
NOT_IMPLEMENTED
"
"
OUT_OF_MEMORY
"
"
UNEXPECTED
"
]
;
let
msgName
=
"
PERR_FAILURE
"
;
for
(
let
code
of
MSG_CODES
)
{
let
nsErrorResult
=
"
NS_ERROR_
"
+
code
;
if
(
Components
.
results
[
nsErrorResult
]
=
=
nsresult
)
{
msgName
=
"
PERR_
"
+
code
;
break
;
}
}
let
msg
title
;
if
(
!
isPrinting
)
{
let
ppMsgName
=
msgName
+
"
_PP
"
;
try
{
msg
=
this
.
bundle
.
GetStringFromName
(
ppMsgName
)
;
}
catch
(
e
)
{
}
}
if
(
!
msg
)
{
msg
=
this
.
bundle
.
GetStringFromName
(
msgName
)
;
}
title
=
this
.
bundle
.
GetStringFromName
(
isPrinting
?
"
print_error_dialog_title
"
:
"
printpreview_error_dialog_title
"
)
;
let
promptSvc
=
Components
.
classes
[
"
mozilla
.
org
/
embedcomp
/
prompt
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPromptService
)
;
promptSvc
.
alert
(
window
title
msg
)
;
}
receiveMessage
(
aMessage
)
{
if
(
aMessage
.
name
=
=
"
Printing
:
Error
"
)
{
this
.
displayPrintingError
(
aMessage
.
data
.
nsresult
aMessage
.
data
.
isPrinting
)
;
return
undefined
;
}
if
(
!
this
.
_webProgressPP
.
value
)
{
return
undefined
;
}
let
listener
=
this
.
_webProgressPP
.
value
;
let
mm
=
aMessage
.
target
.
messageManager
;
let
data
=
aMessage
.
data
;
switch
(
aMessage
.
name
)
{
case
"
Printing
:
Preview
:
ProgressChange
"
:
{
return
listener
.
onProgressChange
(
null
null
data
.
curSelfProgress
data
.
maxSelfProgress
data
.
curTotalProgress
data
.
maxTotalProgress
)
;
}
case
"
Printing
:
Preview
:
StateChange
"
:
{
if
(
data
.
stateFlags
&
Components
.
interfaces
.
nsIWebProgressListener
.
STATE_STOP
)
{
mm
.
removeMessageListener
(
"
Printing
:
Preview
:
StateChange
"
this
)
;
mm
.
removeMessageListener
(
"
Printing
:
Preview
:
ProgressChange
"
this
)
;
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
printPreviewTB
.
disableUpdateTriggers
(
false
)
;
}
return
listener
.
onStateChange
(
null
null
data
.
stateFlags
data
.
status
)
;
}
}
return
undefined
;
}
setPrinterDefaultsForSelectedPrinter
(
aPSSVC
aPrintSettings
)
{
if
(
!
aPrintSettings
.
printerName
)
aPrintSettings
.
printerName
=
aPSSVC
.
defaultPrinterName
;
aPSSVC
.
initPrintSettingsFromPrinter
(
aPrintSettings
.
printerName
aPrintSettings
)
;
aPSSVC
.
initPrintSettingsFromPrefs
(
aPrintSettings
true
aPrintSettings
.
kInitSaveAll
)
;
}
getPrintSettings
(
)
{
var
pref
=
Components
.
classes
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrefBranch
)
;
if
(
pref
)
{
gPrintSettingsAreGlobal
=
pref
.
getBoolPref
(
"
print
.
use_global_printsettings
"
)
;
gSavePrintSettings
=
pref
.
getBoolPref
(
"
print
.
save_print_settings
"
)
;
}
var
printSettings
;
try
{
var
PSSVC
=
Components
.
classes
[
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrintSettingsService
)
;
if
(
gPrintSettingsAreGlobal
)
{
printSettings
=
PSSVC
.
globalPrintSettings
;
this
.
setPrinterDefaultsForSelectedPrinter
(
PSSVC
printSettings
)
;
}
else
{
printSettings
=
PSSVC
.
newPrintSettings
;
}
}
catch
(
e
)
{
dump
(
"
getPrintSettings
:
"
+
e
+
"
\
n
"
)
;
}
return
printSettings
;
}
_obsPP
:
{
observe
(
aSubject
aTopic
aData
)
{
setTimeout
(
function
(
)
{
PrintUtils
.
enterPrintPreview
(
)
;
}
0
)
;
}
QueryInterface
(
iid
)
{
if
(
iid
.
equals
(
Components
.
interfaces
.
nsIObserver
)
|
|
iid
.
equals
(
Components
.
interfaces
.
nsISupportsWeakReference
)
|
|
iid
.
equals
(
Components
.
interfaces
.
nsISupports
)
)
return
this
;
throw
Components
.
results
.
NS_NOINTERFACE
;
}
}
setSimplifiedMode
(
shouldSimplify
)
{
this
.
_shouldSimplify
=
shouldSimplify
;
}
_ppBrowsers
:
new
Set
(
)
_currentPPBrowser
:
null
enterPrintPreview
(
)
{
let
ppBrowser
=
this
.
_shouldSimplify
?
this
.
_listener
.
getSimplifiedPrintPreviewBrowser
(
)
:
this
.
_listener
.
getPrintPreviewBrowser
(
)
;
this
.
_ppBrowsers
.
add
(
ppBrowser
)
;
let
oldPPBrowser
=
null
;
let
changingPrintPreviewBrowsers
=
false
;
if
(
this
.
_currentPPBrowser
&
&
ppBrowser
!
=
this
.
_currentPPBrowser
)
{
changingPrintPreviewBrowsers
=
true
;
oldPPBrowser
=
this
.
_currentPPBrowser
;
}
this
.
_currentPPBrowser
=
ppBrowser
;
let
mm
=
ppBrowser
.
messageManager
;
let
defaultPrinterName
=
this
.
getDefaultPrinterName
(
)
;
let
sendEnterPreviewMessage
=
function
(
browser
simplified
)
{
mm
.
sendAsyncMessage
(
"
Printing
:
Preview
:
Enter
"
{
windowID
:
browser
.
outerWindowID
simplifiedMode
:
simplified
changingBrowsers
:
changingPrintPreviewBrowsers
defaultPrinterName
}
)
;
}
;
if
(
this
.
_shouldSimplify
)
{
let
simplifiedBrowser
=
this
.
_listener
.
getSimplifiedSourceBrowser
(
)
;
if
(
simplifiedBrowser
)
{
sendEnterPreviewMessage
(
simplifiedBrowser
true
)
;
}
else
{
simplifiedBrowser
=
this
.
_listener
.
createSimplifiedBrowser
(
)
;
let
spMM
=
simplifiedBrowser
.
messageManager
;
spMM
.
addMessageListener
(
"
Printing
:
Preview
:
ReaderModeReady
"
function
onReaderReady
(
)
{
spMM
.
removeMessageListener
(
"
Printing
:
Preview
:
ReaderModeReady
"
onReaderReady
)
;
sendEnterPreviewMessage
(
simplifiedBrowser
true
)
;
}
)
;
spMM
.
sendAsyncMessage
(
"
Printing
:
Preview
:
ParseDocument
"
{
URL
:
this
.
_originalURL
windowID
:
oldPPBrowser
.
outerWindowID
}
)
;
this
.
logTelemetry
(
"
PRINT_PREVIEW_SIMPLIFY_PAGE_OPENED_COUNT
"
)
;
}
}
else
{
sendEnterPreviewMessage
(
this
.
_sourceBrowser
false
)
;
}
let
waitForPrintProgressToEnableToolbar
=
false
;
if
(
this
.
_webProgressPP
.
value
)
{
mm
.
addMessageListener
(
"
Printing
:
Preview
:
StateChange
"
this
)
;
mm
.
addMessageListener
(
"
Printing
:
Preview
:
ProgressChange
"
this
)
;
waitForPrintProgressToEnableToolbar
=
true
;
}
let
onEntered
=
(
message
)
=
>
{
mm
.
removeMessageListener
(
"
Printing
:
Preview
:
Entered
"
onEntered
)
;
if
(
message
.
data
.
failed
)
{
this
.
_listener
.
onEnter
(
)
;
this
.
_listener
.
onExit
(
)
;
return
;
}
gFocusedElement
=
document
.
commandDispatcher
.
focusedElement
;
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
if
(
printPreviewTB
)
{
if
(
message
.
data
.
changingBrowsers
)
{
printPreviewTB
.
destroy
(
)
;
printPreviewTB
.
initialize
(
ppBrowser
)
;
}
else
{
printPreviewTB
.
updateToolbar
(
)
;
}
if
(
!
waitForPrintProgressToEnableToolbar
)
{
printPreviewTB
.
disableUpdateTriggers
(
false
)
;
}
ppBrowser
.
collapsed
=
false
;
ppBrowser
.
focus
(
)
;
return
;
}
if
(
this
.
_listener
.
activateBrowser
)
{
this
.
_listener
.
activateBrowser
(
this
.
_sourceBrowser
)
;
}
else
{
this
.
_sourceBrowser
.
docShellIsActive
=
true
;
}
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
printPreviewTB
=
document
.
createElementNS
(
XUL_NS
"
toolbar
"
)
;
printPreviewTB
.
setAttribute
(
"
printpreview
"
true
)
;
printPreviewTB
.
setAttribute
(
"
fullscreentoolbar
"
true
)
;
printPreviewTB
.
id
=
"
print
-
preview
-
toolbar
"
;
let
navToolbox
=
this
.
_listener
.
getNavToolbox
(
)
;
navToolbox
.
parentNode
.
insertBefore
(
printPreviewTB
navToolbox
)
;
printPreviewTB
.
initialize
(
ppBrowser
)
;
if
(
waitForPrintProgressToEnableToolbar
)
{
printPreviewTB
.
disableUpdateTriggers
(
true
)
;
}
if
(
this
.
_sourceBrowser
.
isArticle
)
{
printPreviewTB
.
enableSimplifyPage
(
)
;
}
else
{
this
.
logTelemetry
(
"
PRINT_PREVIEW_SIMPLIFY_PAGE_UNAVAILABLE_COUNT
"
)
;
printPreviewTB
.
disableSimplifyPage
(
)
;
}
if
(
document
.
documentElement
.
hasAttribute
(
"
onclose
"
)
)
this
.
_closeHandlerPP
=
document
.
documentElement
.
getAttribute
(
"
onclose
"
)
;
else
this
.
_closeHandlerPP
=
null
;
document
.
documentElement
.
setAttribute
(
"
onclose
"
"
PrintUtils
.
exitPrintPreview
(
)
;
return
false
;
"
)
;
window
.
addEventListener
(
"
keydown
"
this
.
onKeyDownPP
true
)
;
window
.
addEventListener
(
"
keypress
"
this
.
onKeyPressPP
true
)
;
ppBrowser
.
collapsed
=
false
;
ppBrowser
.
focus
(
)
;
this
.
_listener
.
onEnter
(
)
;
}
;
mm
.
addMessageListener
(
"
Printing
:
Preview
:
Entered
"
onEntered
)
;
}
exitPrintPreview
(
)
{
for
(
let
browser
of
this
.
_ppBrowsers
)
{
let
browserMM
=
browser
.
messageManager
;
browserMM
.
sendAsyncMessage
(
"
Printing
:
Preview
:
Exit
"
)
;
}
this
.
_ppBrowsers
.
clear
(
)
;
this
.
_currentPPBrowser
=
null
;
window
.
removeEventListener
(
"
keydown
"
this
.
onKeyDownPP
true
)
;
window
.
removeEventListener
(
"
keypress
"
this
.
onKeyPressPP
true
)
;
document
.
documentElement
.
setAttribute
(
"
onclose
"
this
.
_closeHandlerPP
)
;
this
.
_closeHandlerPP
=
null
;
let
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
printPreviewTB
.
destroy
(
)
;
printPreviewTB
.
remove
(
)
;
let
fm
=
Components
.
classes
[
"
mozilla
.
org
/
focus
-
manager
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIFocusManager
)
;
if
(
gFocusedElement
)
fm
.
setFocus
(
gFocusedElement
fm
.
FLAG_NOSCROLL
)
;
else
this
.
_sourceBrowser
.
focus
(
)
;
gFocusedElement
=
null
;
this
.
setSimplifiedMode
(
false
)
;
this
.
ensureProgressDialogClosed
(
)
;
this
.
_listener
.
onExit
(
)
;
}
logTelemetry
(
ID
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
ID
)
;
histogram
.
add
(
true
)
;
}
onKeyDownPP
(
aEvent
)
{
if
(
aEvent
.
keyCode
=
=
aEvent
.
DOM_VK_ESCAPE
)
{
PrintUtils
.
exitPrintPreview
(
)
;
}
}
onKeyPressPP
(
aEvent
)
{
var
closeKey
;
try
{
closeKey
=
document
.
getElementById
(
"
key_close
"
)
.
getAttribute
(
"
key
"
)
;
closeKey
=
aEvent
[
"
DOM_VK_
"
+
closeKey
]
;
}
catch
(
e
)
{
}
var
isModif
=
aEvent
.
ctrlKey
|
|
aEvent
.
metaKey
;
if
(
isModif
&
&
(
aEvent
.
charCode
=
=
closeKey
|
|
aEvent
.
charCode
=
=
closeKey
+
32
)
)
{
PrintUtils
.
exitPrintPreview
(
)
;
}
else
if
(
isModif
)
{
var
printPreviewTB
=
document
.
getElementById
(
"
print
-
preview
-
toolbar
"
)
;
var
printKey
=
document
.
getElementById
(
"
printKb
"
)
.
getAttribute
(
"
key
"
)
.
toUpperCase
(
)
;
var
pressedKey
=
String
.
fromCharCode
(
aEvent
.
charCode
)
.
toUpperCase
(
)
;
if
(
printKey
=
=
pressedKey
)
{
printPreviewTB
.
print
(
)
;
}
}
if
(
isModif
)
{
aEvent
.
preventDefault
(
)
;
aEvent
.
stopPropagation
(
)
;
}
}
ensureProgressDialogClosed
(
)
{
if
(
this
.
_webProgressPP
&
&
this
.
_webProgressPP
.
value
)
{
this
.
_webProgressPP
.
value
.
onStateChange
(
null
null
Components
.
interfaces
.
nsIWebProgressListener
.
STATE_STOP
0
)
;
}
}
}
PrintUtils
.
init
(
)
;
