#
include
"
nsISupports
.
idl
"
interface
nsIURI
;
webidl
WindowGlobalParent
;
[
scriptable
uuid
(
06e6a60f
-
3a2b
-
41fa
-
a63b
-
fea7a7f71649
)
]
interface
nsIContentAnalysisAcknowledgement
:
nsISupports
{
cenum
Result
:
32
{
eSuccess
=
1
eInvalidResponse
=
2
eTooLate
=
3
}
;
readonly
attribute
nsIContentAnalysisAcknowledgement_Result
result
;
cenum
FinalAction
:
32
{
eUnspecified
=
0
eAllow
=
1
eReportOnly
=
2
eWarn
=
3
eBlock
=
4
}
;
readonly
attribute
nsIContentAnalysisAcknowledgement_FinalAction
finalAction
;
}
;
[
scriptable
builtinclass
uuid
(
89088c61
-
15f6
-
4ace
-
a880
-
a1b5ea47ca66
)
]
interface
nsIContentAnalysisResponse
:
nsISupports
{
cenum
Action
:
32
{
eUnspecified
=
0
eReportOnly
=
1
eWarn
=
2
eBlock
=
3
eAllow
=
1000
eCanceled
=
1001
}
;
cenum
CancelError
:
32
{
eUserInitiated
=
0
eNoAgent
=
1
eInvalidAgentSignature
=
2
eErrorOther
=
3
}
;
[
infallible
]
readonly
attribute
nsIContentAnalysisResponse_Action
action
;
[
infallible
]
readonly
attribute
boolean
shouldAllowContent
;
[
infallible
]
readonly
attribute
nsIContentAnalysisResponse_CancelError
cancelError
;
readonly
attribute
ACString
requestToken
;
void
acknowledge
(
in
nsIContentAnalysisAcknowledgement
aCaa
)
;
}
;
[
scriptable
uuid
(
48d31df1
-
204d
-
42ce
-
a57f
-
f156bb870d89
)
]
interface
nsIClientDownloadResource
:
nsISupports
{
readonly
attribute
AString
url
;
const
unsigned
long
DOWNLOAD_URL
=
0
;
const
unsigned
long
DOWNLOAD_REDIRECT
=
1
;
const
unsigned
long
TAB_URL
=
2
;
const
unsigned
long
TAB_REDIRECT
=
3
;
const
unsigned
long
PPAPI_DOCUMENT
=
4
;
const
unsigned
long
PPAPI_PLUGIN
=
5
;
readonly
attribute
unsigned
long
type
;
}
;
[
scriptable
uuid
(
c11a6636
-
da2a
-
4afc
-
bdd1
-
0bcae2310e6d
)
]
interface
nsIContentAnalysisRequest
:
nsISupports
{
cenum
AnalysisType
:
32
{
eUnspecified
=
0
eFileDownloaded
=
1
eFileAttached
=
2
eBulkDataEntry
=
3
ePrint
=
4
eFileTransfer
=
5
}
;
readonly
attribute
nsIContentAnalysisRequest_AnalysisType
analysisType
;
cenum
OperationType
:
32
{
eCustomDisplayString
=
0
eClipboard
=
1
eDroppedText
=
2
}
;
readonly
attribute
nsIContentAnalysisRequest_OperationType
operationTypeForDisplay
;
readonly
attribute
AString
operationDisplayString
;
readonly
attribute
AString
textContent
;
readonly
attribute
AString
filePath
;
readonly
attribute
nsIURI
url
;
readonly
attribute
ACString
sha256Digest
;
readonly
attribute
Array
<
nsIClientDownloadResource
>
resources
;
readonly
attribute
AString
email
;
readonly
attribute
ACString
requestToken
;
readonly
attribute
WindowGlobalParent
windowGlobalParent
;
}
;
[
scriptable
builtinclass
uuid
(
9679545f
-
4256
-
4c90
-
9654
-
90292c355d25
)
]
interface
nsIContentAnalysisResult
:
nsISupports
{
[
infallible
]
readonly
attribute
boolean
shouldAllowContent
;
}
;
[
scriptable
uuid
(
cb09fc88
-
118c
-
411b
-
aa89
-
2e1bc5e3eba6
)
]
interface
nsIContentAnalysisCallback
:
nsISupports
{
void
contentResult
(
in
nsIContentAnalysisResponse
aResult
)
;
void
error
(
in
nsresult
aResult
)
;
}
;
[
scriptable
builtinclass
uuid
(
a430f6ef
-
a526
-
4055
-
8a82
-
7741ea757367
)
]
interface
nsIContentAnalysisDiagnosticInfo
:
nsISupports
{
[
infallible
]
readonly
attribute
boolean
connectedToAgent
;
readonly
attribute
AString
agentPath
;
[
infallible
]
readonly
attribute
boolean
failedSignatureVerification
;
[
infallible
]
readonly
attribute
long
long
requestCount
;
}
;
[
scriptable
builtinclass
uuid
(
61497587
-
2bba
-
4a88
-
acd3
-
3fbb2cedf163
)
]
interface
nsIContentAnalysis
:
nsISupports
{
readonly
attribute
boolean
isActive
;
readonly
attribute
boolean
mightBeActive
;
attribute
boolean
isSetByEnterprisePolicy
;
[
implicit_jscontext
]
Promise
analyzeContentRequest
(
in
nsIContentAnalysisRequest
aCar
in
boolean
aAutoAcknowledge
)
;
void
analyzeContentRequestCallback
(
in
nsIContentAnalysisRequest
aCar
in
boolean
aAutoAcknowledge
in
nsIContentAnalysisCallback
callback
)
;
void
cancelContentAnalysisRequest
(
in
ACString
aRequestToken
)
;
void
respondToWarnDialog
(
in
ACString
aRequestToken
in
boolean
aAllowContent
)
;
void
cancelAllRequests
(
)
;
void
testOnlySetCACmdLineArg
(
in
boolean
aVal
)
;
[
implicit_jscontext
]
Promise
getDiagnosticInfo
(
)
;
}
;
