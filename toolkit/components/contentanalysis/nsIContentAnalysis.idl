#
include
"
nsISupports
.
idl
"
webidl
WindowGlobalParent
;
[
scriptable
uuid
(
06e6a60f
-
3a2b
-
41fa
-
a63b
-
fea7a7f71649
)
]
interface
nsIContentAnalysisAcknowledgement
:
nsISupports
{
const
unsigned
long
SUCCESS
=
1
;
const
unsigned
long
INVALID_RESPONSE
=
2
;
const
unsigned
long
TOO_LATE
=
3
;
readonly
attribute
unsigned
long
result
;
const
unsigned
long
ACTION_UNSPECIFIED
=
0
;
const
unsigned
long
ALLOW
=
1
;
const
unsigned
long
REPORT_ONLY
=
2
;
const
unsigned
long
WARN
=
3
;
const
unsigned
long
BLOCK
=
4
;
readonly
attribute
unsigned
long
finalAction
;
}
;
[
scriptable
builtinclass
uuid
(
89088c61
-
15f6
-
4ace
-
a880
-
a1b5ea47ca66
)
]
interface
nsIContentAnalysisResponse
:
nsISupports
{
const
unsigned
long
ACTION_UNSPECIFIED
=
0
;
const
unsigned
long
REPORT_ONLY
=
1
;
const
unsigned
long
WARN
=
2
;
const
unsigned
long
BLOCK
=
3
;
const
unsigned
long
ALLOW
=
1000
;
const
unsigned
long
CANCELED
=
1001
;
[
infallible
]
readonly
attribute
unsigned
long
action
;
[
infallible
]
readonly
attribute
boolean
shouldAllowContent
;
readonly
attribute
ACString
requestToken
;
void
acknowledge
(
in
nsIContentAnalysisAcknowledgement
aCaa
)
;
}
;
[
scriptable
uuid
(
48d31df1
-
204d
-
42ce
-
a57f
-
f156bb870d89
)
]
interface
nsIClientDownloadResource
:
nsISupports
{
readonly
attribute
AString
url
;
const
unsigned
long
DOWNLOAD_URL
=
0
;
const
unsigned
long
DOWNLOAD_REDIRECT
=
1
;
const
unsigned
long
TAB_URL
=
2
;
const
unsigned
long
TAB_REDIRECT
=
3
;
const
unsigned
long
PPAPI_DOCUMENT
=
4
;
const
unsigned
long
PPAPI_PLUGIN
=
5
;
readonly
attribute
unsigned
long
type
;
}
;
[
scriptable
uuid
(
c11a6636
-
da2a
-
4afc
-
bdd1
-
0bcae2310e6d
)
]
interface
nsIContentAnalysisRequest
:
nsISupports
{
const
unsigned
long
ANALYSIS_CONNECTOR_UNSPECIFIED
=
0
;
const
unsigned
long
FILE_DOWNLOADED
=
1
;
const
unsigned
long
FILE_ATTACHED
=
2
;
const
unsigned
long
BULK_DATA_ENTRY
=
3
;
const
unsigned
long
PRINT
=
4
;
const
unsigned
long
FILE_TRANSFER
=
5
;
readonly
attribute
unsigned
long
analysisType
;
const
unsigned
long
OPERATION_CUSTOMDISPLAYSTRING
=
0
;
const
unsigned
long
OPERATION_CLIPBOARD
=
1
;
const
unsigned
long
OPERATION_DROPPEDTEXT
=
2
;
readonly
attribute
unsigned
long
operationTypeForDisplay
;
readonly
attribute
AString
operationDisplayString
;
readonly
attribute
AString
textContent
;
readonly
attribute
AString
filePath
;
readonly
attribute
AString
url
;
readonly
attribute
ACString
sha256Digest
;
readonly
attribute
Array
<
nsIClientDownloadResource
>
resources
;
readonly
attribute
AString
email
;
readonly
attribute
ACString
requestToken
;
readonly
attribute
WindowGlobalParent
windowGlobalParent
;
}
;
[
scriptable
builtinclass
uuid
(
9679545f
-
4256
-
4c90
-
9654
-
90292c355d25
)
]
interface
nsIContentAnalysisResult
:
nsISupports
{
[
infallible
]
readonly
attribute
boolean
shouldAllowContent
;
}
;
[
scriptable
uuid
(
cb09fc88
-
118c
-
411b
-
aa89
-
2e1bc5e3eba6
)
]
interface
nsIContentAnalysisCallback
:
nsISupports
{
void
contentResult
(
in
nsIContentAnalysisResponse
aResult
)
;
void
error
(
in
nsresult
aResult
)
;
}
;
[
scriptable
builtinclass
uuid
(
61497587
-
2bba
-
4a88
-
acd3
-
3fbb2cedf163
)
]
interface
nsIContentAnalysis
:
nsISupports
{
readonly
attribute
bool
isActive
;
readonly
attribute
bool
mightBeActive
;
[
implicit_jscontext
]
Promise
analyzeContentRequest
(
in
nsIContentAnalysisRequest
aCar
in
bool
aAutoAcknowledge
)
;
void
analyzeContentRequestCallback
(
in
nsIContentAnalysisRequest
aCar
in
bool
aAutoAcknowledge
in
nsIContentAnalysisCallback
callback
)
;
void
cancelContentAnalysisRequest
(
in
ACString
aRequestToken
)
;
}
;
