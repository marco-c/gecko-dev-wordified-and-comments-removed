#
include
"
TestContentAnalysisAgent
.
h
"
#
include
<
combaseapi
.
h
>
#
include
<
pathcch
.
h
>
#
include
<
shlwapi
.
h
>
#
include
<
rpc
.
h
>
#
include
<
windows
.
h
>
void
GeneratePipeName
(
const
wchar_t
*
prefix
nsString
&
pipeName
)
{
pipeName
=
u
"
"
_ns
;
pipeName
.
Append
(
prefix
)
;
UUID
uuid
;
ASSERT_EQ
(
RPC_S_OK
UuidCreate
(
&
uuid
)
)
;
wchar_t
guidBuf
[
39
]
=
{
}
;
ASSERT_EQ
(
39
StringFromGUID2
(
uuid
guidBuf
39
)
)
;
pipeName
.
Append
(
&
guidBuf
[
1
]
36
)
;
}
void
LaunchAgentWithCommandLineArguments
(
const
nsString
&
cmdLineArguments
const
nsString
&
pipeName
MozAgentInfo
&
agentInfo
)
{
wchar_t
progName
[
MAX_PATH
]
=
{
}
;
DWORD
nameSize
=
:
:
GetModuleFileNameW
(
nullptr
progName
MAX_PATH
)
;
ASSERT_NE
(
DWORD
{
0
}
nameSize
)
;
ASSERT_EQ
(
S_OK
PathCchRemoveFileSpec
(
progName
nameSize
)
)
;
wchar_t
normalizedPath
[
MAX_PATH
]
=
{
}
;
nsString
test1
=
nsString
(
progName
)
+
u
"
\
\
content_analysis_sdk_agent
.
exe
"
_ns
;
ASSERT_EQ
(
S_OK
PathCchCanonicalize
(
normalizedPath
MAX_PATH
test1
.
get
(
)
)
)
;
nsString
agentPath
;
if
(
:
:
PathFileExistsW
(
normalizedPath
)
)
{
agentPath
=
nsString
(
normalizedPath
)
;
}
if
(
agentPath
.
IsEmpty
(
)
)
{
nsString
unNormalizedPath
=
nsString
(
progName
)
+
u
"
\
\
.
.
\
\
.
.
\
\
tests
\
\
bin
\
\
content_analysis_sdk_agent
.
exe
"
_ns
;
ASSERT_EQ
(
S_OK
PathCchCanonicalize
(
normalizedPath
MAX_PATH
unNormalizedPath
.
get
(
)
)
)
;
if
(
:
:
PathFileExistsW
(
normalizedPath
)
)
{
agentPath
=
nsString
(
normalizedPath
)
;
}
}
ASSERT_FALSE
(
agentPath
.
IsEmpty
(
)
)
;
nsString
localCmdLine
=
nsString
(
agentPath
)
+
u
"
"
_ns
+
cmdLineArguments
;
STARTUPINFOW
startupInfo
=
{
sizeof
(
startupInfo
)
}
;
PROCESS_INFORMATION
processInfo
;
BOOL
ok
=
:
:
CreateProcessW
(
nullptr
localCmdLine
.
get
(
)
nullptr
nullptr
FALSE
0
nullptr
nullptr
&
startupInfo
&
processInfo
)
;
if
(
!
ok
)
{
ASSERT_EQ
(
0UL
GetLastError
(
)
)
<
<
"
Failed
to
launch
content_analysis_sdk_agent
"
;
}
:
:
Sleep
(
2000
)
;
content_analysis
:
:
sdk
:
:
Client
:
:
Config
config
;
config
.
name
=
NS_ConvertUTF16toUTF8
(
pipeName
)
;
config
.
user_specific
=
true
;
auto
clientPtr
=
content_analysis
:
:
sdk
:
:
Client
:
:
Create
(
config
)
;
ASSERT_NE
(
nullptr
clientPtr
.
get
(
)
)
;
agentInfo
.
processInfo
=
processInfo
;
agentInfo
.
client
=
std
:
:
move
(
clientPtr
)
;
}
