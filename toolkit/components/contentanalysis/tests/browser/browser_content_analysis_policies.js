"
use
strict
"
;
const
{
EnterprisePolicyTesting
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
EnterprisePolicyTesting
.
sys
.
mjs
"
)
;
const
ca
=
Cc
[
"
mozilla
.
org
/
contentanalysis
;
1
"
]
.
getService
(
Ci
.
nsIContentAnalysis
)
;
add_task
(
async
function
test_ca_active
(
)
{
ok
(
!
ca
.
isActive
"
CA
is
inactive
when
pref
and
cmd
line
arg
are
missing
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
contentanalysis
.
enabled
"
true
)
;
ok
(
!
ca
.
isActive
"
CA
is
inactive
when
pref
is
set
but
cmd
line
arg
is
missing
"
)
;
ca
.
testOnlySetCACmdLineArg
(
true
)
;
ok
(
ca
.
isActive
"
CA
is
active
when
pref
is
set
and
cmd
line
arg
is
present
"
)
;
ca
.
testOnlySetCACmdLineArg
(
false
)
;
ok
(
!
ca
.
isActive
"
properly
unset
cmd
line
arg
value
"
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
ContentAnalysis
:
{
Enabled
:
false
}
}
}
)
;
ok
(
!
ca
.
isActive
"
CA
is
inactive
when
disabled
by
enterprise
policy
pref
"
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
ContentAnalysis
:
{
Enabled
:
true
}
}
}
)
;
ok
(
ca
.
isActive
"
CA
is
active
when
enabled
by
enterprise
policy
pref
"
)
;
}
)
;
add_task
(
async
function
test_cleanup
(
)
{
ca
.
testOnlySetCACmdLineArg
(
false
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
}
}
)
;
}
)
;
