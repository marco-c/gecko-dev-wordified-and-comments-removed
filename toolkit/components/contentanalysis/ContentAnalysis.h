#
ifndef
mozilla_contentanalysis_h
#
define
mozilla_contentanalysis_h
#
include
"
mozilla
/
MoveOnlyFunction
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
MaybeDiscarded
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsIClipboard
.
h
"
#
include
"
nsIContentAnalysis
.
h
"
#
include
"
nsIThreadPool
.
h
"
#
include
"
nsITransferable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsTStringHasher
.
h
"
#
include
<
atomic
>
#
include
<
regex
>
#
include
<
string
>
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
endif
class
nsBaseClipboard
;
class
nsIPrincipal
;
class
nsIPrintSettings
;
class
ContentAnalysisTest
;
namespace
mozilla
:
:
dom
{
class
CanonicalBrowsingContext
;
class
DataTransfer
;
class
WindowGlobalParent
;
}
namespace
content_analysis
:
:
sdk
{
class
Client
;
class
ContentAnalysisRequest
;
class
ContentAnalysisResponse
;
}
namespace
mozilla
:
:
contentanalysis
{
class
ContentAnalysisCallback
;
enum
class
DefaultResult
:
uint8_t
{
eBlock
=
0
eWarn
=
1
eAllow
=
2
eLastValue
=
2
}
;
class
ContentAnalysisDiagnosticInfo
final
:
public
nsIContentAnalysisDiagnosticInfo
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTANALYSISDIAGNOSTICINFO
ContentAnalysisDiagnosticInfo
(
bool
aConnectedToAgent
nsString
aAgentPath
bool
aFailedSignatureVerification
int64_t
aRequestCount
)
:
mConnectedToAgent
(
aConnectedToAgent
)
mAgentPath
(
std
:
:
move
(
aAgentPath
)
)
mFailedSignatureVerification
(
aFailedSignatureVerification
)
mRequestCount
(
aRequestCount
)
{
}
private
:
virtual
~
ContentAnalysisDiagnosticInfo
(
)
=
default
;
bool
mConnectedToAgent
;
nsString
mAgentPath
;
bool
mFailedSignatureVerification
;
int64_t
mRequestCount
;
}
;
class
ContentAnalysisRequest
final
:
public
nsIContentAnalysisRequest
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTANALYSISREQUEST
ContentAnalysisRequest
(
AnalysisType
aAnalysisType
Reason
aReason
nsString
aString
bool
aStringIsFilePath
nsCString
aSha256Digest
nsCOMPtr
<
nsIURI
>
aUrl
OperationType
aOperationType
dom
:
:
WindowGlobalParent
*
aWindowGlobalParent
dom
:
:
WindowGlobalParent
*
aSourceWindowGlobal
=
nullptr
nsCString
&
&
aUserActionId
=
nsCString
(
)
)
;
ContentAnalysisRequest
(
AnalysisType
aAnalysisType
Reason
aReason
nsITransferable
*
aTransferable
dom
:
:
WindowGlobalParent
*
aWindowGlobal
dom
:
:
WindowGlobalParent
*
aSourceWindowGlobal
)
;
ContentAnalysisRequest
(
const
nsTArray
<
uint8_t
>
aPrintData
nsCOMPtr
<
nsIURI
>
aUrl
nsString
aPrinterName
Reason
aReason
dom
:
:
WindowGlobalParent
*
aWindowGlobalParent
)
;
static
nsresult
GetFileDigest
(
const
nsAString
&
aFilePath
nsCString
&
aDigestString
)
;
static
RefPtr
<
ContentAnalysisRequest
>
Clone
(
nsIContentAnalysisRequest
*
aRequest
)
;
private
:
virtual
~
ContentAnalysisRequest
(
)
;
ContentAnalysisRequest
(
)
=
default
;
ContentAnalysisRequest
(
const
ContentAnalysisRequest
&
)
=
delete
;
ContentAnalysisRequest
&
operator
=
(
ContentAnalysisRequest
&
)
=
delete
;
AnalysisType
mAnalysisType
;
Reason
mReason
;
RefPtr
<
nsITransferable
>
mTransferable
;
RefPtr
<
dom
:
:
DataTransfer
>
mDataTransfer
;
nsString
mTextContent
;
nsString
mFilePath
;
nsCOMPtr
<
nsIURI
>
mUrl
;
nsCString
mSha256Digest
;
nsTArray
<
RefPtr
<
nsIClientDownloadResource
>
>
mResources
;
nsString
mEmail
;
nsCString
mRequestToken
;
nsCString
mUserActionId
;
int64_t
mUserActionRequestsCount
=
1
;
OperationType
mOperationTypeForDisplay
;
nsString
mFileNameForDisplay
;
nsString
mPrinterName
;
RefPtr
<
dom
:
:
WindowGlobalParent
>
mWindowGlobalParent
;
#
ifdef
XP_WIN
HANDLE
mPrintDataHandle
=
0
;
uint64_t
mPrintDataSize
=
0
;
#
endif
RefPtr
<
mozilla
:
:
dom
:
:
WindowGlobalParent
>
mSourceWindowGlobal
;
uint32_t
mTimeoutMultiplier
=
1
;
bool
mTestOnlyAlwaysSubmitToAgent
=
false
;
friend
class
:
:
ContentAnalysisTest
;
template
<
typename
T
typename
.
.
.
Args
>
friend
RefPtr
<
T
>
mozilla
:
:
MakeRefPtr
(
Args
&
&
.
.
.
)
;
}
;
#
define
CONTENTANALYSIS_IID
\
{
0xa37bed74
0x4b50
0x443a
{
0xbf
0x58
0xf4
0xeb
0xbd
0x30
0x67
0xb4
}
}
class
ContentAnalysisResponse
;
class
ContentAnalysis
final
:
public
nsIContentAnalysis
public
nsIObserver
public
SupportsWeakPtr
{
public
:
NS_INLINE_DECL_STATIC_IID
(
CONTENTANALYSIS_IID
)
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSIS
NS_DECL_NSIOBSERVER
ContentAnalysis
(
)
;
#
if
defined
(
XP_WIN
)
struct
PrintAllowedResult
final
{
bool
mAllowed
;
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
mCachedStaticDocumentBrowsingContext
;
PrintAllowedResult
(
bool
aAllowed
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
aCachedStaticDocumentBrowsingContext
)
:
mAllowed
(
aAllowed
)
mCachedStaticDocumentBrowsingContext
(
aCachedStaticDocumentBrowsingContext
)
{
}
explicit
PrintAllowedResult
(
bool
aAllowed
)
:
PrintAllowedResult
(
aAllowed
dom
:
:
MaybeDiscardedBrowsingContext
(
)
)
{
}
}
;
struct
PrintAllowedError
final
{
nsresult
mError
;
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
mCachedStaticDocumentBrowsingContext
;
PrintAllowedError
(
nsresult
aError
dom
:
:
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
aCachedStaticDocumentBrowsingContext
)
:
mError
(
aError
)
mCachedStaticDocumentBrowsingContext
(
aCachedStaticDocumentBrowsingContext
)
{
}
explicit
PrintAllowedError
(
nsresult
aError
)
:
PrintAllowedError
(
aError
dom
:
:
MaybeDiscardedBrowsingContext
(
)
)
{
}
}
;
using
PrintAllowedPromise
=
MozPromise
<
PrintAllowedResult
PrintAllowedError
true
>
;
MOZ_CAN_RUN_SCRIPT
static
RefPtr
<
PrintAllowedPromise
>
PrintToPDFToDetermineIfPrintAllowed
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIPrintSettings
*
aPrintSettings
)
;
#
endif
static
nsCOMPtr
<
nsIURI
>
GetURIForBrowsingContext
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
)
;
static
bool
CheckClipboardContentAnalysisSync
(
nsBaseClipboard
*
aClipboard
mozilla
:
:
dom
:
:
WindowGlobalParent
*
aWindow
const
nsCOMPtr
<
nsITransferable
>
&
trans
nsIClipboard
:
:
ClipboardType
aClipboardType
)
;
static
void
CheckClipboardContentAnalysis
(
nsBaseClipboard
*
aClipboard
mozilla
:
:
dom
:
:
WindowGlobalParent
*
aWindow
nsITransferable
*
aTransferable
nsIClipboard
:
:
ClipboardType
aClipboardType
ContentAnalysisCallback
*
aResolver
bool
aForFullClipboard
=
false
)
;
using
FilesAllowedPromise
=
MozPromise
<
nsCOMArray
<
nsIFile
>
nsresult
true
>
;
static
RefPtr
<
FilesAllowedPromise
>
CheckUploadsInBatchMode
(
nsCOMArray
<
nsIFile
>
&
&
aFiles
bool
aAutoAcknowledge
mozilla
:
:
dom
:
:
WindowGlobalParent
*
aWindow
nsIContentAnalysisRequest
:
:
Reason
aReason
nsIURI
*
aURI
=
nullptr
)
;
static
RefPtr
<
ContentAnalysis
>
GetContentAnalysisFromService
(
)
;
void
CancelWithError
(
nsCString
&
&
aUserActionId
nsresult
aResult
)
;
static
constexpr
const
char
*
kKnownClipboardTypes
[
]
=
{
kTextMime
kHTMLMime
kCustomTypesMime
kFileMime
}
;
private
:
virtual
~
ContentAnalysis
(
)
;
ContentAnalysis
(
const
ContentAnalysis
&
)
=
delete
;
ContentAnalysis
&
operator
=
(
ContentAnalysis
&
)
=
delete
;
nsresult
CreateContentAnalysisClient
(
nsCString
&
&
aPipePathName
nsString
&
&
aClientSignatureSetting
bool
aIsPerUser
)
;
nsCOMPtr
<
nsIThreadPool
>
mThreadPool
;
template
<
typename
T
typename
U
>
RefPtr
<
MozPromise
<
T
nsresult
true
>
>
CallClientWithRetry
(
StaticString
aMethodName
U
&
&
aClientCallFunc
)
;
nsresult
RunAnalyzeRequestTask
(
const
RefPtr
<
nsIContentAnalysisRequest
>
&
aRequest
bool
aAutoAcknowledge
const
RefPtr
<
nsIContentAnalysisCallback
>
&
aCallback
)
;
nsresult
RunAcknowledgeTask
(
nsIContentAnalysisAcknowledgement
*
aAcknowledgement
const
nsACString
&
aRequestToken
)
;
nsresult
CreateClientIfNecessary
(
bool
aForceCreate
=
false
)
;
static
Result
<
std
:
:
nullptr_t
nsresult
>
DoAnalyzeRequest
(
nsCString
&
&
aUserActionId
content_analysis
:
:
sdk
:
:
ContentAnalysisRequest
&
&
aRequest
bool
aAutoAcknowledge
const
std
:
:
shared_ptr
<
content_analysis
:
:
sdk
:
:
Client
>
&
aClient
bool
aTestOnlyIgnoreCanceled
=
false
)
;
static
void
HandleResponseFromAgent
(
content_analysis
:
:
sdk
:
:
ContentAnalysisResponse
&
&
aResponse
)
;
struct
UserActionIdAndAutoAcknowledge
final
{
nsCString
mUserActionId
;
bool
mAutoAcknowledge
;
}
;
DataMutex
<
nsTHashMap
<
nsCString
UserActionIdAndAutoAcknowledge
>
>
mRequestTokenToUserActionIdMap
;
void
IssueResponse
(
ContentAnalysisResponse
*
response
nsCString
&
&
aUserActionId
bool
aAcknowledge
bool
aIsTooLate
)
;
void
NotifyResponseObservers
(
ContentAnalysisResponse
*
aResponse
nsCString
&
&
aUserActionId
bool
aAutoAcknowledge
bool
aIsTimeout
)
;
void
NotifyObserversAndMaybeIssueResponseFromAgent
(
ContentAnalysisResponse
*
aResponse
nsCString
&
&
aUserActionId
bool
aAutoAcknowledge
)
;
void
Close
(
)
;
bool
IsShutDown
(
)
;
enum
UrlFilterResult
{
eCheck
eDeny
eAllow
}
;
UrlFilterResult
FilterByUrlLists
(
nsIContentAnalysisRequest
*
aRequest
nsIURI
*
aUri
)
;
void
EnsureParsedUrlFilters
(
)
;
using
ContentAnalysisRequestArray
=
CopyableTArray
<
RefPtr
<
nsIContentAnalysisRequest
>
>
;
using
RequestsPromise
=
MozPromise
<
ContentAnalysisRequestArray
nsresult
true
>
;
class
MultipartRequestCallback
:
public
nsIContentAnalysisCallback
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
MultipartRequestCallback
override
)
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
override
;
NS_DECL_NSICONTENTANALYSISCALLBACK
static
RefPtr
<
MultipartRequestCallback
>
Create
(
ContentAnalysis
*
aContentAnalysis
const
nsTArray
<
ContentAnalysis
:
:
ContentAnalysisRequestArray
>
&
aRequests
nsIContentAnalysisCallback
*
aCallback
bool
aAutoAcknowledge
)
;
bool
HasResponded
(
)
const
{
return
mResponded
;
}
private
:
MultipartRequestCallback
(
)
=
default
;
virtual
~
MultipartRequestCallback
(
)
;
template
<
typename
T
typename
.
.
.
Args
>
friend
RefPtr
<
T
>
mozilla
:
:
MakeRefPtr
(
Args
&
&
.
.
.
)
;
void
Initialize
(
ContentAnalysis
*
aContentAnalysis
const
nsTArray
<
ContentAnalysis
:
:
ContentAnalysisRequestArray
>
&
aRequests
nsIContentAnalysisCallback
*
aCallback
bool
aAutoAcknowledge
)
;
void
CancelRequests
(
)
;
void
RemoveFromUserActionMap
(
)
;
WeakPtr
<
ContentAnalysis
>
mWeakContentAnalysis
;
RefPtr
<
nsIContentAnalysisCallback
>
mCallback
;
nsCString
mUserActionId
;
size_t
mNumCARequestsRemaining
;
bool
mResponded
=
false
;
}
;
Result
<
RefPtr
<
RequestsPromise
:
:
AllPromiseType
>
RefPtr
<
nsIContentAnalysisResult
>
>
GetFinalRequestList
(
const
ContentAnalysisRequestArray
&
aRequests
)
;
Result
<
RefPtr
<
RequestsPromise
>
nsresult
>
ExpandFolderRequest
(
nsIContentAnalysisRequest
*
aRequest
nsIFile
*
file
)
;
using
ClientPromise
=
MozPromise
<
std
:
:
shared_ptr
<
content_analysis
:
:
sdk
:
:
Client
>
nsresult
false
>
;
int64_t
mRequestCount
=
0
;
RefPtr
<
ClientPromise
:
:
Private
>
mCaClientPromise
MOZ_GUARDED_BY
(
sMainThreadCapability
)
;
bool
mCreatingClient
MOZ_GUARDED_BY
(
sMainThreadCapability
)
=
false
;
bool
mHaveResolvedClientPromise
MOZ_GUARDED_BY
(
sMainThreadCapability
)
=
false
;
bool
mSetByEnterprise
;
struct
UserActionData
final
{
RefPtr
<
nsIContentAnalysisCallback
>
mCallback
;
nsTHashSet
<
nsCString
>
mRequestTokens
;
RefPtr
<
mozilla
:
:
CancelableRunnable
>
mTimeoutRunnable
;
bool
mAutoAcknowledge
;
bool
mIsHandlingTimeout
=
false
;
}
;
nsTHashMap
<
nsCString
UserActionData
>
mUserActionMap
;
void
RemoveFromUserActionMap
(
nsCString
&
&
aUserActionId
)
;
struct
CanceledResponse
{
nsIContentAnalysisAcknowledgement
:
:
FinalAction
mAction
;
size_t
mNumExpectedResponses
;
}
;
using
UserActionIdToCanceledResponseMap
=
nsTHashMap
<
nsCString
CanceledResponse
>
;
DataMutex
<
UserActionIdToCanceledResponseMap
>
mUserActionIdToCanceledResponseMap
{
"
ContentAnalysis
:
:
UserActionIdToCanceledResponseMap
"
}
;
class
CachedClipboardResponse
{
public
:
CachedClipboardResponse
(
)
=
default
;
Maybe
<
nsIContentAnalysisResponse
:
:
Action
>
GetCachedResponse
(
nsIURI
*
aURI
int32_t
aClipboardSequenceNumber
)
;
void
SetCachedResponse
(
const
nsCOMPtr
<
nsIURI
>
&
aURI
int32_t
aClipboardSequenceNumber
nsIContentAnalysisResponse
:
:
Action
aAction
)
;
private
:
Maybe
<
int32_t
>
mClipboardSequenceNumber
;
nsTArray
<
std
:
:
pair
<
nsCOMPtr
<
nsIURI
>
nsIContentAnalysisResponse
:
:
Action
>
>
mData
;
}
;
CachedClipboardResponse
mCachedClipboardResponse
;
struct
WarnResponseData
{
RefPtr
<
ContentAnalysisResponse
>
mResponse
;
nsCString
mUserActionId
;
bool
mAutoAcknowledge
;
bool
mWasTimeout
;
}
;
nsTHashMap
<
nsCString
WarnResponseData
>
mWarnResponseDataMap
;
std
:
:
vector
<
std
:
:
regex
>
mAllowUrlList
;
std
:
:
vector
<
std
:
:
regex
>
mDenyUrlList
;
bool
mParsedUrlLists
=
false
;
bool
mForbidFutureRequests
=
false
;
DataMutex
<
bool
>
mIsShutDown
{
false
"
ContentAnalysis
:
:
IsShutDown
"
}
;
using
UserActionSet
=
media
:
:
Refcountable
<
mozilla
:
:
HashSet
<
nsCString
>
>
;
using
UserActionSets
=
mozilla
:
:
HashSet
<
RefPtr
<
const
UserActionSet
>
PointerHasher
<
const
UserActionSet
*
>
>
;
UserActionSets
mCompoundUserActions
;
friend
class
ContentAnalysisResponse
;
friend
class
:
:
ContentAnalysisTest
;
}
;
class
ContentAnalysisResponse
final
:
public
nsIContentAnalysisResponse
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTANALYSISRESULT
NS_DECL_NSICONTENTANALYSISRESPONSE
void
SetOwner
(
ContentAnalysis
*
aOwner
)
;
void
DoNotAcknowledge
(
)
{
mDoNotAcknowledge
=
true
;
}
void
SetCancelError
(
CancelError
aCancelError
)
;
void
SetIsCachedResponse
(
)
{
mIsCachedResponse
=
true
;
}
void
SetIsSyntheticResponse
(
bool
aIsSyntheticResponse
)
{
mIsSyntheticResponse
=
aIsSyntheticResponse
;
}
private
:
virtual
~
ContentAnalysisResponse
(
)
=
default
;
ContentAnalysisResponse
(
const
ContentAnalysisResponse
&
)
=
delete
;
ContentAnalysisResponse
&
operator
=
(
ContentAnalysisResponse
&
)
=
delete
;
explicit
ContentAnalysisResponse
(
content_analysis
:
:
sdk
:
:
ContentAnalysisResponse
&
&
aResponse
const
nsCString
&
aUserActionId
)
;
ContentAnalysisResponse
(
Action
aAction
const
nsACString
&
aRequestToken
const
nsACString
&
aUserActionId
)
;
template
<
typename
T
typename
.
.
.
Args
>
friend
RefPtr
<
T
>
mozilla
:
:
MakeRefPtr
(
Args
&
&
.
.
.
)
;
static
already_AddRefed
<
ContentAnalysisResponse
>
FromProtobuf
(
content_analysis
:
:
sdk
:
:
ContentAnalysisResponse
&
&
aResponse
const
nsCString
&
aUserActionId
)
;
void
ResolveWarnAction
(
bool
aAllowContent
)
;
Action
mAction
;
nsCString
mRequestToken
;
nsCString
mUserActionId
;
CancelError
mCancelError
=
CancelError
:
:
eUserInitiated
;
RefPtr
<
ContentAnalysis
>
mOwner
;
bool
mHasAcknowledged
=
false
;
bool
mDoNotAcknowledge
=
false
;
bool
mIsCachedResponse
=
false
;
bool
mIsSyntheticResponse
=
false
;
friend
class
ContentAnalysis
;
}
;
class
ContentAnalysisAcknowledgement
final
:
public
nsIContentAnalysisAcknowledgement
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSISACKNOWLEDGEMENT
ContentAnalysisAcknowledgement
(
Result
aResult
FinalAction
aFinalAction
)
;
private
:
virtual
~
ContentAnalysisAcknowledgement
(
)
=
default
;
Result
mResult
;
FinalAction
mFinalAction
;
}
;
class
ContentAnalysisCallback
final
:
public
nsIContentAnalysisCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSISCALLBACK
ContentAnalysisCallback
(
std
:
:
function
<
void
(
nsIContentAnalysisResult
*
)
>
&
&
aContentResponseCallback
std
:
:
function
<
void
(
nsresult
)
>
&
&
aErrorCallback
)
:
mContentResponseCallback
(
std
:
:
move
(
aContentResponseCallback
)
)
mErrorCallback
(
std
:
:
move
(
aErrorCallback
)
)
{
}
explicit
ContentAnalysisCallback
(
std
:
:
function
<
void
(
nsIContentAnalysisResult
*
)
>
&
&
aContentResponseCallback
)
;
explicit
ContentAnalysisCallback
(
nsIContentAnalysisCallback
*
aDecoratedCB
)
{
mContentResponseCallback
=
[
decoratedCB
=
RefPtr
{
aDecoratedCB
}
]
(
nsIContentAnalysisResult
*
aResult
)
{
decoratedCB
-
>
ContentResult
(
aResult
)
;
}
;
mErrorCallback
=
[
decoratedCB
=
RefPtr
{
aDecoratedCB
}
]
(
nsresult
aRv
)
{
decoratedCB
-
>
Error
(
aRv
)
;
}
;
}
private
:
virtual
~
ContentAnalysisCallback
(
)
{
MOZ_ASSERT
(
!
mContentResponseCallback
&
&
!
mErrorCallback
&
&
!
mPromise
"
ContentAnalysisCallback
never
called
!
"
)
;
}
void
ClearCallbacks
(
)
{
mContentResponseCallback
=
nullptr
;
mErrorCallback
=
nullptr
;
mPromise
=
nullptr
;
}
explicit
ContentAnalysisCallback
(
dom
:
:
Promise
*
aPromise
)
;
std
:
:
function
<
void
(
nsIContentAnalysisResult
*
)
>
mContentResponseCallback
;
std
:
:
function
<
void
(
nsresult
)
>
mErrorCallback
;
RefPtr
<
dom
:
:
Promise
>
mPromise
;
friend
class
ContentAnalysis
;
}
;
}
#
endif
