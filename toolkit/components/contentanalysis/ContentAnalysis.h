#
ifndef
mozilla_contentanalysis_h
#
define
mozilla_contentanalysis_h
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsIContentAnalysis
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsString
.
h
"
#
include
<
string
>
namespace
content_analysis
:
:
sdk
{
class
Client
;
class
ContentAnalysisResponse
;
}
namespace
mozilla
:
:
contentanalysis
{
class
ContentAnalysisRequest
final
:
public
nsIContentAnalysisRequest
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSISREQUEST
ContentAnalysisRequest
(
unsigned
long
aAnalysisType
nsString
&
&
aString
bool
aStringIsFilePath
nsCString
&
&
aSha256Digest
nsString
&
&
aUrl
)
;
private
:
~
ContentAnalysisRequest
(
)
=
default
;
ContentAnalysisRequest
(
const
ContentAnalysisRequest
&
)
=
delete
;
ContentAnalysisRequest
&
operator
=
(
ContentAnalysisRequest
&
)
=
delete
;
unsigned
long
mAnalysisType
;
nsString
mTextContent
;
nsString
mFilePath
;
nsString
mUrl
;
nsCString
mSha256Digest
;
nsTArray
<
RefPtr
<
nsIClientDownloadResource
>
>
mResources
;
nsString
mEmail
;
}
;
class
ContentAnalysisResponse
;
class
ContentAnalysis
final
:
public
nsIContentAnalysis
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSIS
ContentAnalysis
(
)
=
default
;
private
:
~
ContentAnalysis
(
)
;
ContentAnalysis
(
const
ContentAnalysis
&
)
=
delete
;
ContentAnalysis
&
operator
=
(
ContentAnalysis
&
)
=
delete
;
nsresult
EnsureContentAnalysisClient
(
)
;
nsresult
RunAnalyzeRequestTask
(
RefPtr
<
nsIContentAnalysisRequest
>
aRequest
RefPtr
<
nsIContentAnalysisCallback
>
aCallback
)
;
nsresult
RunAcknowledgeTask
(
nsIContentAnalysisAcknowledgement
*
aAcknowledgement
const
std
:
:
string
&
aRequestToken
)
;
static
StaticDataMutex
<
UniquePtr
<
content_analysis
:
:
sdk
:
:
Client
>
>
sCaClient
;
friend
class
ContentAnalysisResponse
;
}
;
class
ContentAnalysisResponse
final
:
public
nsIContentAnalysisResponse
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSISRESPONSE
void
SetOwner
(
RefPtr
<
ContentAnalysis
>
aOwner
)
;
private
:
~
ContentAnalysisResponse
(
)
=
default
;
ContentAnalysisResponse
(
const
ContentAnalysisResponse
&
)
=
delete
;
ContentAnalysisResponse
&
operator
=
(
ContentAnalysisResponse
&
)
=
delete
;
explicit
ContentAnalysisResponse
(
content_analysis
:
:
sdk
:
:
ContentAnalysisResponse
&
&
aResponse
)
;
static
already_AddRefed
<
ContentAnalysisResponse
>
FromProtobuf
(
content_analysis
:
:
sdk
:
:
ContentAnalysisResponse
&
&
aResponse
)
;
uint32_t
mAction
;
std
:
:
string
mRequestToken
;
RefPtr
<
ContentAnalysis
>
mOwner
;
friend
class
ContentAnalysis
;
}
;
class
ContentAnalysisCallback
final
:
public
nsIContentAnalysisCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSISCALLBACK
ContentAnalysisCallback
(
std
:
:
function
<
void
(
nsIContentAnalysisResponse
*
)
>
&
&
aContentResponseCallback
std
:
:
function
<
void
(
nsresult
)
>
&
&
aErrorCallback
)
:
mContentResponseCallback
(
std
:
:
move
(
aContentResponseCallback
)
)
mErrorCallback
(
std
:
:
move
(
aErrorCallback
)
)
{
}
private
:
~
ContentAnalysisCallback
(
)
=
default
;
explicit
ContentAnalysisCallback
(
RefPtr
<
dom
:
:
Promise
>
aPromise
)
;
std
:
:
function
<
void
(
nsIContentAnalysisResponse
*
)
>
mContentResponseCallback
;
std
:
:
function
<
void
(
nsresult
)
>
mErrorCallback
;
Maybe
<
nsMainThreadPtrHandle
<
dom
:
:
Promise
>
>
mPromise
;
friend
class
ContentAnalysis
;
}
;
}
#
endif
