#
ifndef
mozilla_contentanalysis_h
#
define
mozilla_contentanalysis_h
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
nsIContentAnalysis
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
<
atomic
>
#
include
<
string
>
namespace
content_analysis
:
:
sdk
{
class
Client
;
class
ContentAnalysisResponse
;
}
namespace
mozilla
:
:
contentanalysis
{
class
ContentAnalysisRequest
final
:
public
nsIContentAnalysisRequest
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTANALYSISREQUEST
ContentAnalysisRequest
(
unsigned
long
aAnalysisType
nsString
&
&
aString
bool
aStringIsFilePath
nsCString
&
&
aSha256Digest
nsString
&
&
aUrl
unsigned
long
aResourceNameType
dom
:
:
WindowGlobalParent
*
aWindowGlobalParent
)
;
private
:
~
ContentAnalysisRequest
(
)
=
default
;
ContentAnalysisRequest
(
const
ContentAnalysisRequest
&
)
=
delete
;
ContentAnalysisRequest
&
operator
=
(
ContentAnalysisRequest
&
)
=
delete
;
unsigned
long
mAnalysisType
;
nsString
mTextContent
;
nsString
mFilePath
;
nsString
mUrl
;
nsCString
mSha256Digest
;
nsTArray
<
RefPtr
<
nsIClientDownloadResource
>
>
mResources
;
nsString
mEmail
;
nsCString
mRequestToken
;
unsigned
long
mOperationTypeForDisplay
;
nsString
mOperationDisplayString
;
RefPtr
<
dom
:
:
WindowGlobalParent
>
mWindowGlobalParent
;
}
;
#
define
CONTENTANALYSIS_IID
\
{
\
0xa37bed74
0x4b50
0x443a
{
\
0xbf
0x58
0xf4
0xeb
0xbd
0x30
0x67
0xb4
\
}
\
}
class
ContentAnalysisResponse
;
class
ContentAnalysis
final
:
public
nsIContentAnalysis
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
CONTENTANALYSIS_IID
)
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSIS
ContentAnalysis
(
)
;
private
:
~
ContentAnalysis
(
)
;
ContentAnalysis
(
const
ContentAnalysis
&
)
=
delete
;
ContentAnalysis
&
operator
=
(
ContentAnalysis
&
)
=
delete
;
nsresult
CreateContentAnalysisClient
(
nsCString
&
&
aPipePathName
bool
aIsPerUser
)
;
nsresult
RunAnalyzeRequestTask
(
RefPtr
<
nsIContentAnalysisRequest
>
aRequest
RefPtr
<
nsIContentAnalysisCallback
>
aCallback
)
;
nsresult
RunAcknowledgeTask
(
nsIContentAnalysisAcknowledgement
*
aAcknowledgement
const
nsACString
&
aRequestToken
)
;
nsresult
CancelWithError
(
nsCString
aRequestToken
nsresult
aResult
)
;
static
RefPtr
<
ContentAnalysis
>
GetContentAnalysisFromService
(
)
;
using
ClientPromise
=
MozPromise
<
std
:
:
shared_ptr
<
content_analysis
:
:
sdk
:
:
Client
>
nsresult
false
>
;
RefPtr
<
ClientPromise
:
:
Private
>
mCaClientPromise
;
bool
mClientCreationAttempted
;
class
CallbackData
{
public
:
explicit
CallbackData
(
nsMainThreadPtrHandle
<
nsIContentAnalysisCallback
>
&
&
aCallbackHolder
)
:
mCallbackHolder
(
aCallbackHolder
)
{
}
nsMainThreadPtrHandle
<
nsIContentAnalysisCallback
>
TakeCallbackHolder
(
)
{
return
std
:
:
move
(
mCallbackHolder
)
;
}
void
SetCanceled
(
)
{
mCallbackHolder
=
nullptr
;
}
bool
Canceled
(
)
const
{
return
!
mCallbackHolder
;
}
private
:
nsMainThreadPtrHandle
<
nsIContentAnalysisCallback
>
mCallbackHolder
;
}
;
DataMutex
<
nsTHashMap
<
nsCString
CallbackData
>
>
mCallbackMap
;
friend
class
ContentAnalysisResponse
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
ContentAnalysis
CONTENTANALYSIS_IID
)
class
ContentAnalysisResponse
final
:
public
nsIContentAnalysisResponse
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTANALYSISRESPONSE
static
RefPtr
<
ContentAnalysisResponse
>
FromAction
(
unsigned
long
aAction
const
nsACString
&
aRequestToken
)
;
void
SetOwner
(
RefPtr
<
ContentAnalysis
>
aOwner
)
;
private
:
~
ContentAnalysisResponse
(
)
=
default
;
ContentAnalysisResponse
(
const
ContentAnalysisResponse
&
)
=
delete
;
ContentAnalysisResponse
&
operator
=
(
ContentAnalysisResponse
&
)
=
delete
;
explicit
ContentAnalysisResponse
(
content_analysis
:
:
sdk
:
:
ContentAnalysisResponse
&
&
aResponse
)
;
ContentAnalysisResponse
(
unsigned
long
aAction
const
nsACString
&
aRequestToken
)
;
static
already_AddRefed
<
ContentAnalysisResponse
>
FromProtobuf
(
content_analysis
:
:
sdk
:
:
ContentAnalysisResponse
&
&
aResponse
)
;
uint32_t
mAction
;
nsCString
mRequestToken
;
RefPtr
<
ContentAnalysis
>
mOwner
;
friend
class
ContentAnalysis
;
}
;
class
ContentAnalysisCallback
final
:
public
nsIContentAnalysisCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSICONTENTANALYSISCALLBACK
ContentAnalysisCallback
(
std
:
:
function
<
void
(
nsIContentAnalysisResponse
*
)
>
&
&
aContentResponseCallback
std
:
:
function
<
void
(
nsresult
)
>
&
&
aErrorCallback
)
:
mContentResponseCallback
(
std
:
:
move
(
aContentResponseCallback
)
)
mErrorCallback
(
std
:
:
move
(
aErrorCallback
)
)
{
}
private
:
~
ContentAnalysisCallback
(
)
=
default
;
explicit
ContentAnalysisCallback
(
RefPtr
<
dom
:
:
Promise
>
aPromise
)
;
std
:
:
function
<
void
(
nsIContentAnalysisResponse
*
)
>
mContentResponseCallback
;
std
:
:
function
<
void
(
nsresult
)
>
mErrorCallback
;
Maybe
<
nsMainThreadPtrHandle
<
dom
:
:
Promise
>
>
mPromise
;
friend
class
ContentAnalysis
;
}
;
}
#
endif
