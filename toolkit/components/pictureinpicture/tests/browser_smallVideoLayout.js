"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
always
-
show
"
false
]
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
min
-
video
-
secs
"
5
]
]
}
)
;
const
MIN_VIDEO_DIMENSION
=
140
;
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
info
(
Testing
{
videoID
}
case
.
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE_WITH_SOUND
gBrowser
}
async
browser
=
>
{
let
targetWidth
=
MIN_VIDEO_DIMENSION
-
1
;
await
SpecialPowers
.
spawn
(
browser
[
videoID
targetWidth
]
async
(
videoID
targetWidth
)
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
resizePromise
=
ContentTaskUtils
.
waitForEvent
(
shadowRoot
.
firstChild
"
resizevideocontrols
"
)
;
video
.
style
.
width
=
targetWidth
+
"
px
"
;
await
resizePromise
;
}
)
;
await
testToggleHelper
(
browser
videoID
false
)
;
await
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
resizePromise
=
ContentTaskUtils
.
waitForEvent
(
shadowRoot
.
firstChild
"
resizevideocontrols
"
)
;
video
.
style
.
width
=
"
"
;
await
resizePromise
;
}
)
;
await
testToggleHelper
(
browser
videoID
true
)
;
}
)
;
}
}
)
;
add_task
(
async
(
)
=
>
{
const
TOGGLE_SMALL
=
{
rootID
:
"
pictureInPictureToggleExperiment
"
stages
:
{
hoverVideo
:
{
opacities
:
{
"
.
pip
-
wrapper
"
:
0
.
8
}
hidden
:
[
]
}
hoverToggle
:
{
opacities
:
{
"
.
pip
-
wrapper
"
:
1
.
0
}
hidden
:
[
"
#
pictureInPictureToggleButton
"
"
.
pip
-
expanded
"
]
}
}
}
;
const
TOGGLE_LARGE
=
{
rootID
:
"
pictureInPictureToggleExperiment
"
stages
:
{
hoverVideo
:
{
opacities
:
{
"
.
pip
-
small
"
:
0
.
0
"
.
pip
-
wrapper
"
:
0
.
8
"
.
pip
-
expanded
"
:
0
.
0
}
hidden
:
[
"
#
pictureInPictureToggleButton
"
"
.
pip
-
explainer
"
"
.
pip
-
icon
-
label
>
.
pip
-
icon
"
]
}
hoverToggle
:
{
opacities
:
{
"
.
pip
-
small
"
:
0
.
0
"
.
pip
-
wrapper
"
:
1
.
0
"
.
pip
-
expanded
"
:
1
.
0
}
hidden
:
[
"
#
pictureInPictureToggleButton
"
"
.
pip
-
explainer
"
"
.
pip
-
icon
-
label
>
.
pip
-
icon
"
]
}
}
}
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
always
-
show
"
false
]
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
min
-
video
-
secs
"
5
]
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
mode
"
1
]
]
}
)
;
const
MIN_VIDEO_WIDTH
=
320
;
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
info
(
Testing
{
videoID
}
case
.
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE_WITH_SOUND
gBrowser
}
async
browser
=
>
{
let
targetWidth
=
MIN_VIDEO_WIDTH
-
1
;
let
isSmallVideo
=
await
SpecialPowers
.
spawn
(
browser
[
videoID
targetWidth
]
async
(
videoID
targetWidth
)
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
resizePromise
=
ContentTaskUtils
.
waitForEvent
(
shadowRoot
.
firstChild
"
resizevideocontrols
"
)
;
video
.
style
.
width
=
targetWidth
+
"
px
"
;
await
resizePromise
;
let
toggle
=
shadowRoot
.
getElementById
(
"
pictureInPictureToggleExperiment
"
)
;
return
toggle
.
hasAttribute
(
"
small
-
video
"
)
;
}
)
;
Assert
.
ok
(
isSmallVideo
"
Video
should
have
small
-
video
attribute
"
)
;
await
testToggleHelper
(
browser
videoID
true
undefined
TOGGLE_SMALL
)
;
isSmallVideo
=
await
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
resizePromise
=
ContentTaskUtils
.
waitForEvent
(
shadowRoot
.
firstChild
"
resizevideocontrols
"
)
;
video
.
style
.
width
=
"
"
;
await
resizePromise
;
let
toggle
=
shadowRoot
.
getElementById
(
"
pictureInPictureToggleExperiment
"
)
;
return
toggle
.
hasAttribute
(
"
small
-
video
"
)
;
}
)
;
Assert
.
ok
(
!
isSmallVideo
"
Video
should
not
have
small
-
video
attribute
"
)
;
await
testToggleHelper
(
browser
videoID
true
undefined
TOGGLE_LARGE
)
;
}
)
;
}
}
)
;
