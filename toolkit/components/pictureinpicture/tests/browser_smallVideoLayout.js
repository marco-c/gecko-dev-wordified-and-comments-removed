"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
always
-
show
"
false
]
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
video
-
toggle
.
min
-
video
-
secs
"
5
]
]
}
)
;
const
MIN_VIDEO_DIMENSION
=
140
;
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
info
(
Testing
{
videoID
}
case
.
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE_WITH_SOUND
gBrowser
}
async
browser
=
>
{
let
targetWidth
=
MIN_VIDEO_DIMENSION
-
1
;
await
SpecialPowers
.
spawn
(
browser
[
videoID
targetWidth
]
async
(
videoID
targetWidth
)
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
resizePromise
=
ContentTaskUtils
.
waitForEvent
(
shadowRoot
.
firstChild
"
resizevideocontrols
"
)
;
video
.
style
.
width
=
targetWidth
+
"
px
"
;
await
resizePromise
;
}
)
;
await
testToggleHelper
(
browser
videoID
false
)
;
await
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
resizePromise
=
ContentTaskUtils
.
waitForEvent
(
shadowRoot
.
firstChild
"
resizevideocontrols
"
)
;
video
.
style
.
width
=
"
"
;
await
resizePromise
;
}
)
;
await
testToggleHelper
(
browser
videoID
true
)
;
}
)
;
}
}
)
;
