"
use
strict
"
;
add_task
(
async
(
)
=
>
{
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
info
(
Testing
{
videoID
}
case
.
)
;
let
playVideo
=
(
)
=
>
{
return
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
return
content
.
document
.
getElementById
(
videoID
)
.
play
(
)
;
}
)
;
}
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE
)
;
let
browser
=
tab
.
linkedBrowser
;
await
playVideo
(
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
The
Picture
-
in
-
Picture
window
is
not
there
.
"
)
;
ok
(
!
(
await
isVideoPaused
(
browser
videoID
)
)
"
The
video
is
paused
but
should
not
.
"
)
;
ok
(
!
pipWin
.
document
.
fullscreenElement
"
PiP
should
not
yet
be
in
fullscreen
.
"
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
ok
(
pipWin
.
document
.
fullscreenElement
=
=
pipWin
.
document
.
body
"
Double
-
click
should
have
caused
to
enter
fullscreen
.
"
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
pipWin
)
;
}
)
;
ok
(
!
pipWin
.
document
.
fullscreenElement
"
ESC
should
have
caused
to
leave
fullscreen
.
"
)
;
ok
(
!
(
await
isVideoPaused
(
browser
videoID
)
)
"
The
video
is
paused
but
should
not
.
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
pipWin
)
;
ok
(
pipWin
.
closed
"
Picture
-
in
-
Picture
window
is
not
closed
but
should
.
"
)
;
ok
(
await
isVideoPaused
(
browser
videoID
)
"
The
video
is
not
paused
but
should
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
