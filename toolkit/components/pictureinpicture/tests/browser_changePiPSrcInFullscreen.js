"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
async
function
switchVideoSource
(
src
)
{
await
ContentTask
.
spawn
(
browser
{
src
}
async
(
{
src
}
)
=
>
{
let
doc
=
content
.
document
;
let
video
=
doc
.
getElementById
(
"
no
-
controls
"
)
;
video
.
src
=
src
;
}
)
;
}
const
NEW_VIDEO_ASPECT_RATIO
=
1
.
334
;
function
checkIfEqual
(
val1
val2
str
)
{
let
equal
=
Math
.
abs
(
val1
-
val2
)
;
if
(
equal
<
=
1
)
{
is
(
equal
<
=
1
true
str
)
;
}
else
{
is
(
val1
val2
str
)
;
}
}
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
let
resizeCount
=
0
;
pipWin
.
addEventListener
(
"
resize
"
e
=
>
{
resizeCount
+
+
;
}
)
;
let
left
=
100
;
let
top
=
100
;
pipWin
.
moveTo
(
left
top
)
;
let
width
=
pipWin
.
innerWidth
/
2
;
let
height
=
pipWin
.
innerHeight
/
2
;
pipWin
.
resizeTo
(
width
height
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeCount
=
=
1
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeCount
=
=
2
)
;
await
switchVideoSource
(
"
test
-
video
.
mp4
"
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Double
-
click
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeCount
=
=
3
)
;
checkIfEqual
(
pipWin
.
screenX
left
"
PiP
in
same
X
location
"
)
;
checkIfEqual
(
pipWin
.
screenY
top
"
PiP
in
same
Y
location
"
)
;
checkIfEqual
(
pipWin
.
innerHeight
height
"
PiP
has
same
height
"
)
;
checkIfEqual
(
pipWin
.
innerWidth
width
"
PiP
has
same
width
"
)
;
await
ensureMessageAndClosePiP
(
browser
"
no
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
resizeCount
=
0
;
pipWin
.
addEventListener
(
"
resize
"
e
=
>
{
resizeCount
+
+
;
}
)
;
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeCount
=
=
1
)
;
await
switchVideoSource
(
"
test
-
video
-
long
.
mp4
"
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Double
-
click
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeCount
=
=
2
)
;
checkIfEqual
(
pipWin
.
screenX
left
"
PiP
in
same
X
location
"
)
;
checkIfEqual
(
pipWin
.
screenY
top
"
PiP
in
same
Y
location
"
)
;
checkIfEqual
(
pipWin
.
innerHeight
height
"
PiP
has
same
height
"
)
;
checkIfEqual
(
pipWin
.
innerWidth
height
*
NEW_VIDEO_ASPECT_RATIO
"
PiP
has
same
width
"
)
;
await
ensureMessageAndClosePiP
(
browser
"
no
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
resizeCount
=
0
;
pipWin
.
addEventListener
(
"
resize
"
e
=
>
{
resizeCount
+
+
;
}
)
;
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeCount
=
=
1
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Double
-
click
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeCount
=
=
2
)
;
checkIfEqual
(
pipWin
.
screenX
left
"
PiP
in
same
X
location
"
)
;
checkIfEqual
(
pipWin
.
screenY
top
"
PiP
in
same
Y
location
"
)
;
checkIfEqual
(
pipWin
.
innerHeight
height
"
PiP
has
same
height
"
)
;
checkIfEqual
(
pipWin
.
innerWidth
height
*
NEW_VIDEO_ASPECT_RATIO
"
PiP
has
same
width
"
)
;
await
ensureMessageAndClosePiP
(
browser
"
no
-
controls
"
pipWin
true
)
;
}
)
;
}
)
;
