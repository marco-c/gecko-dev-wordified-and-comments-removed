"
use
strict
"
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
const
NEW_VIDEO_ASPECT_RATIO
=
1
.
334
;
async
function
switchVideoSource
(
browser
src
)
{
await
ContentTask
.
spawn
(
browser
{
src
}
async
(
{
src
}
)
=
>
{
let
doc
=
content
.
document
;
let
video
=
doc
.
getElementById
(
"
no
-
controls
"
)
;
video
.
src
=
src
;
}
)
;
}
function
assertEvent
(
actual
expected
message
)
{
info
(
message
)
;
isfuzzy
(
actual
.
width
expected
.
width
ACCEPTABLE_DIFFERENCE
The
actual
width
:
{
actual
.
width
}
.
The
expected
width
:
{
expected
.
width
}
)
;
isfuzzy
(
actual
.
height
expected
.
height
ACCEPTABLE_DIFFERENCE
The
actual
height
:
{
actual
.
height
}
.
The
expected
height
:
{
expected
.
height
}
)
;
isfuzzy
(
actual
.
left
expected
.
left
ACCEPTABLE_DIFFERENCE
The
actual
left
:
{
actual
.
left
}
.
The
expected
left
:
{
expected
.
left
}
)
;
isfuzzy
(
actual
.
top
expected
.
top
ACCEPTABLE_DIFFERENCE
The
actual
top
:
{
actual
.
top
}
.
The
expected
top
:
{
expected
.
top
}
)
;
}
add_task
(
async
function
testNoSrcChangeFullscreen
(
)
{
overrideSavedPosition
(
0
0
300
300
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
await
ensureVideosReady
(
browser
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
const
screen
=
pipWin
.
screen
;
let
resizeEventArray
=
[
]
;
pipWin
.
addEventListener
(
"
resize
"
event
=
>
{
let
win
=
event
.
target
;
let
obj
=
{
width
:
win
.
outerWidth
height
:
win
.
outerHeight
left
:
win
.
screenLeft
top
:
win
.
screenTop
}
;
resizeEventArray
.
push
(
obj
)
;
}
)
;
let
left
=
100
;
let
top
=
100
;
pipWin
.
moveTo
(
left
top
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
pipWin
.
screenLeft
=
=
=
100
&
&
pipWin
.
screenTop
=
=
=
100
"
Waiting
for
PiP
to
move
to
100
100
"
)
;
let
width
=
640
;
let
height
=
360
;
let
resizePromise
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
resize
"
)
;
pipWin
.
resizeTo
(
width
height
)
;
await
resizePromise
;
Assert
.
equal
(
resizeEventArray
.
length
1
"
resizeEventArray
should
have
1
event
"
)
;
let
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
let
expectedEvent
=
{
width
height
left
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
positioned
before
fullscreen
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeEventArray
.
length
=
=
=
1
"
Waiting
for
resizeEventArray
to
have
1
event
"
)
;
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
expectedEvent
=
{
width
:
screen
.
width
height
:
screen
.
height
left
:
screen
.
left
top
:
screen
.
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
fullscreened
before
switching
source
"
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Double
-
click
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeEventArray
.
length
>
=
1
"
Waiting
for
resizeEventArray
to
have
1
event
got
"
+
resizeEventArray
.
length
)
;
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
expectedEvent
=
{
width
height
left
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
positioned
after
exiting
fullscreen
"
)
;
await
ensureMessageAndClosePiP
(
browser
"
no
-
controls
"
pipWin
false
)
;
clearSavedPosition
(
)
;
}
)
;
}
)
;
add_task
(
async
function
testChangingSameSizeVideoSrcFullscreen
(
)
{
overrideSavedPosition
(
0
0
300
300
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
await
ensureVideosReady
(
browser
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
const
screen
=
pipWin
.
screen
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
resizeToVideoSpy
=
sandbox
.
spy
(
pipWin
"
resizeToVideo
"
)
;
let
resizeEventArray
=
[
]
;
pipWin
.
addEventListener
(
"
resize
"
event
=
>
{
let
win
=
event
.
target
;
let
obj
=
{
width
:
win
.
outerWidth
height
:
win
.
outerHeight
left
:
win
.
screenLeft
top
:
win
.
screenTop
}
;
resizeEventArray
.
push
(
obj
)
;
}
)
;
let
left
=
100
;
let
top
=
100
;
pipWin
.
moveTo
(
left
top
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
pipWin
.
screenLeft
=
=
=
100
&
&
pipWin
.
screenTop
=
=
=
100
"
Waiting
for
PiP
to
move
to
100
100
"
)
;
let
width
=
640
;
let
height
=
360
;
let
resizePromise
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
resize
"
)
;
pipWin
.
resizeTo
(
width
height
)
;
await
resizePromise
;
Assert
.
equal
(
resizeEventArray
.
length
1
"
resizeEventArray
should
have
1
event
"
)
;
let
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
let
expectedEvent
=
{
width
height
left
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
positioned
before
fullscreen
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeEventArray
.
length
=
=
=
1
"
Waiting
for
resizeEventArray
to
have
1
event
"
)
;
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
expectedEvent
=
{
width
:
screen
.
width
height
:
screen
.
height
left
:
screen
.
left
top
:
screen
.
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
fullscreened
before
switching
source
"
)
;
await
switchVideoSource
(
browser
"
test
-
video
.
mp4
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeToVideoSpy
.
calledOnce
"
Waiting
for
deferredResize
to
be
updated
"
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Double
-
click
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeEventArray
.
length
>
=
1
"
Waiting
for
resizeEventArray
to
have
1
event
got
"
+
resizeEventArray
.
length
)
;
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
expectedEvent
=
{
width
height
left
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
positioned
after
exiting
fullscreen
"
)
;
sandbox
.
restore
(
)
;
await
ensureMessageAndClosePiP
(
browser
"
no
-
controls
"
pipWin
false
)
;
clearSavedPosition
(
)
;
}
)
;
}
)
;
add_task
(
async
function
testChangingDifferentSizeVideoSrcFullscreen
(
)
{
overrideSavedPosition
(
0
0
300
300
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
await
ensureVideosReady
(
browser
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
const
screen
=
pipWin
.
screen
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
resizeToVideoSpy
=
sandbox
.
spy
(
pipWin
"
resizeToVideo
"
)
;
let
resizeEventArray
=
[
]
;
pipWin
.
addEventListener
(
"
resize
"
event
=
>
{
let
win
=
event
.
target
;
let
obj
=
{
width
:
win
.
outerWidth
height
:
win
.
outerHeight
left
:
win
.
screenLeft
top
:
win
.
screenTop
}
;
resizeEventArray
.
push
(
obj
)
;
}
)
;
let
left
=
100
;
let
top
=
100
;
pipWin
.
moveTo
(
left
top
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
pipWin
.
screenLeft
=
=
=
100
&
&
pipWin
.
screenTop
=
=
=
100
"
Waiting
for
PiP
to
move
to
100
100
"
)
;
let
width
=
640
;
let
height
=
360
;
let
resizePromise
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
resize
"
)
;
pipWin
.
resizeTo
(
width
height
)
;
await
resizePromise
;
Assert
.
equal
(
resizeEventArray
.
length
1
"
resizeEventArray
should
have
1
event
"
)
;
let
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
let
expectedEvent
=
{
width
height
left
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
positioned
before
fullscreen
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeEventArray
.
length
=
=
=
1
"
Waiting
for
resizeEventArray
to
have
1
event
"
)
;
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
expectedEvent
=
{
width
:
screen
.
width
height
:
screen
.
height
left
:
screen
.
left
top
:
screen
.
top
}
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
fullscreened
before
switching
source
"
)
;
let
previousWidth
=
pipWin
.
getDeferredResize
(
)
.
width
;
await
switchVideoSource
(
browser
"
test
-
video
-
long
.
mp4
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeToVideoSpy
.
calledOnce
"
Waiting
for
deferredResize
to
be
updated
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
previousWidth
!
=
=
pipWin
.
getDeferredResize
(
)
.
width
"
Waiting
for
deferredResize
to
update
"
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Escape
key
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeEventArray
.
length
>
=
1
"
Waiting
for
resizeEventArray
to
have
1
event
got
"
+
resizeEventArray
.
length
)
;
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
expectedEvent
=
{
width
:
height
*
NEW_VIDEO_ASPECT_RATIO
height
left
top
}
;
if
(
Math
.
abs
(
actualEvent
.
width
-
expectedEvent
.
width
<
=
ACCEPTABLE_DIFFERENCE
)
)
{
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
positioned
after
exiting
fullscreen
"
)
;
}
else
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
resizeEventArray
.
length
=
=
=
1
"
Waiting
for
resizeEventArray
to
have
1
event
"
)
;
actualEvent
=
resizeEventArray
.
splice
(
0
1
)
[
0
]
;
assertEvent
(
actualEvent
expectedEvent
"
The
PiP
window
has
been
correctly
positioned
after
exiting
fullscreen
"
)
;
}
sandbox
.
restore
(
)
;
await
ensureMessageAndClosePiP
(
browser
"
no
-
controls
"
pipWin
false
)
;
clearSavedPosition
(
)
;
}
)
;
}
)
;
