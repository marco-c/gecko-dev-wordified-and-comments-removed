"
use
strict
"
;
const
TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
TEST_ROOT_2
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
org
"
)
;
const
TEST_PAGE
=
TEST_ROOT
+
"
test
-
page
.
html
"
;
const
TEST_PAGE_WITH_IFRAME
=
TEST_ROOT_2
+
"
test
-
page
-
with
-
iframe
.
html
"
;
const
WINDOW_TYPE
=
"
Toolkit
:
PictureInPicture
"
;
const
TOGGLE_ID
=
"
pictureInPictureToggleButton
"
;
const
HOVER_VIDEO_OPACITY
=
0
.
8
;
const
HOVER_TOGGLE_OPACITY
=
1
.
0
;
async
function
triggerPictureInPicture
(
browser
videoID
)
{
let
domWindowOpened
=
BrowserTestUtils
.
domWindowOpened
(
null
)
;
let
videoReady
=
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
event
=
new
content
.
CustomEvent
(
"
MozTogglePictureInPicture
"
{
bubbles
:
true
}
)
;
video
.
dispatchEvent
(
event
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
video
.
isCloningElementVisually
;
}
"
Video
is
being
cloned
visually
.
"
)
;
}
)
;
let
win
=
await
domWindowOpened
;
await
BrowserTestUtils
.
waitForEvent
(
win
"
load
"
)
;
await
win
.
promiseDocumentFlushed
(
(
)
=
>
{
}
)
;
await
videoReady
;
return
win
;
}
async
function
assertShowingMessage
(
browser
videoID
expected
)
{
let
showing
=
await
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
pipOverlay
=
shadowRoot
.
querySelector
(
"
.
pictureInPictureOverlay
"
)
;
Assert
.
ok
(
pipOverlay
"
Should
be
able
to
find
Picture
-
in
-
Picture
overlay
.
"
)
;
let
rect
=
pipOverlay
.
getBoundingClientRect
(
)
;
return
rect
.
height
>
0
&
&
rect
.
width
>
0
;
}
)
;
Assert
.
equal
(
showing
expected
"
Video
should
be
showing
the
expected
state
.
"
)
;
}
async
function
ensureVideosReady
(
browser
)
{
info
(
Waiting
for
videos
to
be
ready
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
videos
=
this
.
content
.
document
.
querySelectorAll
(
"
video
"
)
;
for
(
let
video
of
videos
)
{
if
(
video
.
readyState
<
content
.
HTMLMediaElement
.
HAVE_ENOUGH_DATA
)
{
await
ContentTaskUtils
.
waitForEvent
(
video
"
canplay
"
)
;
}
}
}
)
;
}
async
function
toggleOpacityReachesThreshold
(
browser
videoID
opacityThreshold
)
{
let
args
=
{
videoID
TOGGLE_ID
opacityThreshold
}
;
await
SpecialPowers
.
spawn
(
browser
[
args
]
async
args
=
>
{
let
{
videoID
TOGGLE_ID
opacityThreshold
}
=
args
;
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
toggle
=
shadowRoot
.
getElementById
(
TOGGLE_ID
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
let
opacity
=
parseFloat
(
this
.
content
.
getComputedStyle
(
toggle
)
.
opacity
)
;
return
opacity
>
=
opacityThreshold
;
}
Toggle
should
have
opacity
>
=
{
opacityThreshold
}
100
100
)
;
ok
(
true
"
Toggle
reached
target
opacity
.
"
)
;
}
)
;
}
async
function
assertSawMouseEvents
(
browser
isExpectingEvents
isExpectingClick
=
true
)
{
const
MOUSE_BUTTON_EVENTS
=
[
"
pointerdown
"
"
mousedown
"
"
pointerup
"
"
mouseup
"
]
;
if
(
isExpectingClick
)
{
MOUSE_BUTTON_EVENTS
.
push
(
"
click
"
)
;
}
let
mouseEvents
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
return
this
.
content
.
wrappedJSObject
.
getRecordedEvents
(
)
;
}
)
;
let
expectedEvents
=
isExpectingEvents
?
MOUSE_BUTTON_EVENTS
:
[
]
;
Assert
.
deepEqual
(
mouseEvents
expectedEvents
"
Expected
to
get
the
right
mouse
events
.
"
)
;
}
async
function
prepareForToggleClick
(
browser
videoID
)
{
let
args
=
{
videoID
TOGGLE_ID
}
;
return
SpecialPowers
.
spawn
(
browser
[
args
]
async
args
=
>
{
let
{
videoID
TOGGLE_ID
}
=
args
;
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
video
.
scrollIntoView
(
{
behaviour
:
"
instant
"
}
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
toggle
=
shadowRoot
.
getElementById
(
TOGGLE_ID
)
;
if
(
!
video
.
controls
)
{
let
{
PictureInPictureToggleChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
actors
/
PictureInPictureChild
.
jsm
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
PictureInPictureToggleChild
.
isTracking
(
video
)
;
}
"
Waiting
for
PictureInPictureToggleChild
to
be
tracking
the
video
.
"
100
100
)
;
}
let
rect
=
toggle
.
getBoundingClientRect
(
)
;
return
{
toggleClientRect
:
{
top
:
rect
.
top
right
:
rect
.
right
left
:
rect
.
left
bottom
:
rect
.
bottom
}
controls
:
video
.
controls
}
;
}
)
;
}
async
function
testToggle
(
testURL
expectations
prepFn
=
async
(
)
=
>
{
}
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
testURL
}
async
browser
=
>
{
await
prepFn
(
browser
)
;
await
ensureVideosReady
(
browser
)
;
for
(
let
[
videoID
{
canToggle
}
]
of
Object
.
entries
(
expectations
)
)
{
await
SimpleTest
.
promiseFocus
(
browser
)
;
info
(
Testing
video
with
id
:
{
videoID
}
)
;
await
testToggleHelper
(
browser
videoID
canToggle
)
;
}
}
)
;
}
async
function
testToggleHelper
(
browser
videoID
canToggle
)
{
let
{
toggleClientRect
controls
}
=
await
prepareForToggleClick
(
browser
videoID
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
#
{
videoID
}
{
type
:
"
mousemove
"
}
browser
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
#
{
videoID
}
{
type
:
"
mouseover
"
}
browser
)
;
if
(
canToggle
)
{
info
(
"
Waiting
for
toggle
to
become
visible
"
)
;
await
toggleOpacityReachesThreshold
(
browser
videoID
HOVER_VIDEO_OPACITY
)
;
}
info
(
"
Hovering
the
toggle
rect
now
.
"
)
;
let
toggleLeft
=
toggleClientRect
.
left
+
2
;
let
toggleTop
=
toggleClientRect
.
top
+
2
;
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
toggleLeft
toggleTop
{
type
:
"
mousemove
"
}
browser
)
;
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
toggleLeft
toggleTop
{
type
:
"
mouseover
"
}
browser
)
;
if
(
canToggle
)
{
info
(
"
Waiting
for
toggle
to
reach
full
opacity
"
)
;
await
toggleOpacityReachesThreshold
(
browser
videoID
HOVER_TOGGLE_OPACITY
)
;
}
info
(
"
Right
-
clicking
on
toggle
.
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
toggleLeft
toggleTop
{
button
:
2
}
browser
)
;
if
(
canToggle
)
{
await
assertSawMouseEvents
(
browser
!
controls
false
)
;
}
else
{
await
assertSawMouseEvents
(
browser
true
false
)
;
}
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
WINDOW_TYPE
)
)
{
if
(
!
win
.
closed
)
{
ok
(
false
"
Found
a
Picture
-
in
-
Picture
window
unexpectedly
.
"
)
;
return
;
}
}
ok
(
true
"
No
Picture
-
in
-
Picture
window
found
.
"
)
;
if
(
canToggle
)
{
info
(
"
Clicking
on
toggle
and
expecting
a
Picture
-
in
-
Picture
window
to
open
"
)
;
let
domWindowOpened
=
BrowserTestUtils
.
domWindowOpened
(
null
)
;
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
toggleLeft
toggleTop
{
}
browser
)
;
let
win
=
await
domWindowOpened
;
ok
(
win
"
A
Picture
-
in
-
Picture
window
opened
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
assertSawMouseEvents
(
browser
false
)
;
}
else
{
info
(
"
Clicking
on
toggle
and
expecting
no
Picture
-
in
-
Picture
window
opens
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
toggleLeft
toggleTop
{
}
browser
)
;
await
assertSawMouseEvents
(
browser
true
)
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
WINDOW_TYPE
)
)
{
if
(
!
win
.
closed
)
{
ok
(
false
"
Found
a
Picture
-
in
-
Picture
window
unexpectedly
.
"
)
;
return
;
}
}
ok
(
true
"
No
Picture
-
in
-
Picture
window
found
.
"
)
;
}
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
1
1
{
}
browser
)
;
assertSawMouseEvents
(
browser
true
)
;
}
