"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
keyboard
-
controls
.
enabled
"
true
]
]
}
)
;
let
videoID
=
"
with
-
controls
"
;
info
(
Testing
{
videoID
}
case
.
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
let
waitForVideoEvent
=
eventType
=
>
{
return
BrowserTestUtils
.
waitForContentEvent
(
browser
eventType
true
)
;
}
;
await
ensureVideosReady
(
browser
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
for
(
var
i
=
0
;
i
<
4
;
i
+
+
)
{
let
seekedForwardPromise
=
waitForVideoEvent
(
"
seeked
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
{
}
pipWin
)
;
ok
(
await
seekedForwardPromise
"
The
time
seeked
forward
"
)
;
let
seekedBackwardPromise
=
waitForVideoEvent
(
"
seeked
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
{
}
pipWin
)
;
ok
(
await
seekedBackwardPromise
"
The
time
seeked
backward
"
)
;
let
volumeDownPromise
=
waitForVideoEvent
(
"
volumechange
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
pipWin
)
;
ok
(
await
volumeDownPromise
"
The
volume
went
down
"
)
;
let
volumeUpPromise
=
waitForVideoEvent
(
"
volumechange
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
}
pipWin
)
;
ok
(
await
volumeUpPromise
"
The
volume
went
up
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
pipWin
)
;
}
await
BrowserTestUtils
.
closeWindow
(
pipWin
)
;
}
)
;
}
)
;
