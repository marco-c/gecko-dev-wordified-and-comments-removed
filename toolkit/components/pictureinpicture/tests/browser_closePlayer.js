"
use
strict
"
;
add_task
(
async
(
)
=
>
{
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
info
(
Testing
{
videoID
}
case
.
)
;
let
playVideo
=
(
)
=
>
{
return
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
return
content
.
document
.
getElementById
(
videoID
)
.
play
(
)
;
}
)
;
}
;
let
isVideoPaused
=
(
)
=
>
{
return
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
return
content
.
document
.
getElementById
(
videoID
)
.
paused
;
}
)
;
}
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE
)
;
let
browser
=
tab
.
linkedBrowser
;
await
playVideo
(
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
ok
(
!
(
await
isVideoPaused
(
)
)
"
The
video
is
not
paused
"
)
;
let
pipClosed
=
BrowserTestUtils
.
domWindowClosed
(
pipWin
)
;
let
unpipButton
=
pipWin
.
document
.
getElementById
(
"
unpip
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
unpipButton
{
}
pipWin
)
;
await
pipClosed
;
ok
(
!
(
await
isVideoPaused
(
)
)
"
The
video
is
not
paused
"
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
ok
(
!
(
await
isVideoPaused
(
)
)
"
The
video
is
not
paused
"
)
;
pipClosed
=
BrowserTestUtils
.
domWindowClosed
(
pipWin
)
;
let
closeButton
=
pipWin
.
document
.
getElementById
(
"
close
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
pipWin
)
;
await
pipClosed
;
ok
(
await
isVideoPaused
(
)
"
The
video
is
paused
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
