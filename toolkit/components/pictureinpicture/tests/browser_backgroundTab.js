"
use
strict
"
;
add_task
(
async
(
)
=
>
{
let
videoID
=
"
no
-
controls
"
;
let
firstTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
let
originatingTab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
firstTab
)
;
let
switcher
=
gBrowser
.
_getSwitcher
(
)
;
Assert
.
equal
(
switcher
.
getTabState
(
originatingTab
)
switcher
.
STATE_LOADED
"
The
originating
browser
tab
should
be
in
STATE_LOADED
.
"
)
;
Assert
.
equal
(
browser
.
docShellIsActive
true
"
The
docshell
should
be
active
in
the
originating
tab
"
)
;
switcher
.
destroy
(
)
;
pipWin
.
document
.
getElementById
(
"
close
"
)
.
click
(
)
;
await
BrowserTestUtils
.
windowClosed
(
pipWin
)
;
Assert
.
equal
(
browser
.
docShellIsActive
false
"
The
docshell
should
be
inactive
in
the
originating
tab
"
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
let
videoID
=
"
no
-
controls
"
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
let
originatingTab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
let
promiseSizeModeChange
=
BrowserTestUtils
.
waitForEvent
(
window
"
sizemodechange
"
)
;
window
.
minimize
(
)
;
await
promiseSizeModeChange
;
let
switcher
=
gBrowser
.
_getSwitcher
(
)
;
Assert
.
equal
(
switcher
.
getTabState
(
originatingTab
)
switcher
.
STATE_LOADED
"
The
originating
browser
tab
should
be
in
STATE_LOADED
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
pipWin
)
;
window
.
restore
(
)
;
}
)
;
}
)
;
