"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
videocontrols
.
picture
-
in
-
picture
.
audio
-
toggle
.
enabled
"
true
]
]
}
)
;
let
videoID
=
"
with
-
controls
"
;
info
(
Testing
{
videoID
}
case
.
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
async
function
toggleTabMute
(
tab
shouldMute
)
{
let
contextMenu
=
document
.
getElementById
(
"
tabContextMenu
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
tab
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
popupShownPromise
;
let
toggleMute
=
document
.
getElementById
(
"
context_toggleMuteTab
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
toggleMute
{
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
!
tab
.
getAttribute
(
"
muted
"
)
=
=
=
shouldMute
)
;
ok
(
true
"
The
tab
mute
was
toggled
correctly
.
"
)
;
}
let
waitForVideoEvent
=
eventType
=
>
{
return
BrowserTestUtils
.
waitForContentEvent
(
browser
eventType
true
)
;
}
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
toggleTabMute
(
tab
true
)
;
await
ensureVideosReady
(
browser
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
await
isVideoMuted
(
browser
videoID
)
"
The
audio
is
muted
.
"
)
;
let
mutedPromise
=
waitForVideoEvent
(
"
volumechange
"
)
;
let
audioButton
=
pipWin
.
document
.
getElementById
(
"
audio
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
audioButton
{
}
pipWin
)
;
await
mutedPromise
;
ok
(
!
(
await
isVideoMuted
(
browser
videoID
)
)
"
The
audio
is
unmuted
.
"
)
;
ok
(
tab
.
getAttribute
(
"
muted
"
)
"
The
tab
is
still
muted
.
"
)
;
mutedPromise
=
waitForVideoEvent
(
"
volumechange
"
)
;
await
toggleTabMute
(
tab
false
)
;
await
toggleTabMute
(
tab
true
)
;
await
mutedPromise
;
ok
(
await
isVideoMuted
(
browser
videoID
)
"
The
audio
is
muted
.
"
)
;
}
)
;
}
)
;
