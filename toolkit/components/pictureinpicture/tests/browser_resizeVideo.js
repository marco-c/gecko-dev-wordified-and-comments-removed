"
use
strict
"
;
async
function
testVideo
(
browser
videoID
pipWin
{
pinX
pinY
}
=
{
}
)
{
async
function
switchVideoSource
(
src
)
{
let
videoResized
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
resize
"
)
;
await
ContentTask
.
spawn
(
browser
{
src
videoID
}
async
(
{
src
videoID
}
)
=
>
{
let
doc
=
content
.
document
;
let
video
=
doc
.
getElementById
(
videoID
)
;
video
.
src
=
src
;
}
)
;
await
videoResized
;
}
function
checkPosition
(
previousScreenX
previousScreenY
previousWidth
previousHeight
newScreenX
newScreenY
newWidth
newHeight
)
{
if
(
pinX
|
|
previousScreenX
=
=
0
)
{
Assert
.
equal
(
previousScreenX
newScreenX
"
New
video
is
still
in
the
same
X
position
"
)
;
}
else
{
Assert
.
equal
(
previousScreenX
+
previousWidth
newScreenX
+
newWidth
"
New
video
ends
at
the
same
screen
X
position
"
)
;
}
if
(
pinY
)
{
Assert
.
equal
(
previousScreenY
newScreenY
"
New
video
is
still
in
the
same
Y
position
"
)
;
}
else
{
Assert
.
equal
(
previousScreenY
+
previousHeight
newScreenY
+
newHeight
"
New
video
ends
at
the
same
screen
Y
position
"
)
;
}
}
Assert
.
ok
(
pipWin
"
Got
PiP
window
.
"
)
;
let
initialWidth
=
pipWin
.
innerWidth
;
let
initialHeight
=
pipWin
.
innerHeight
;
let
initialAspectRatio
=
initialWidth
/
initialHeight
;
Assert
.
equal
(
Math
.
floor
(
initialAspectRatio
*
100
)
177
"
Original
aspect
ratio
is
16
:
9
"
)
;
let
initialScreenX
=
pipWin
.
mozInnerScreenX
;
let
initialScreenY
=
pipWin
.
mozInnerScreenY
;
await
switchVideoSource
(
"
test
-
video
-
cropped
.
mp4
"
)
;
let
resizedWidth
=
pipWin
.
innerWidth
;
let
resizedHeight
=
pipWin
.
innerHeight
;
let
resizedAspectRatio
=
resizedWidth
/
resizedHeight
;
Assert
.
equal
(
Math
.
floor
(
resizedAspectRatio
*
100
)
133
"
Resized
aspect
ratio
is
4
:
3
"
)
;
Assert
.
less
(
resizedWidth
initialWidth
"
Resized
video
has
smaller
width
"
)
;
Assert
.
equal
(
resizedHeight
initialHeight
"
Resized
video
is
the
same
vertically
"
)
;
let
resizedScreenX
=
pipWin
.
mozInnerScreenX
;
let
resizedScreenY
=
pipWin
.
mozInnerScreenY
;
checkPosition
(
initialScreenX
initialScreenY
initialWidth
initialHeight
resizedScreenX
resizedScreenY
resizedWidth
resizedHeight
)
;
await
switchVideoSource
(
"
test
-
video
-
vertical
.
mp4
"
)
;
let
verticalWidth
=
pipWin
.
innerWidth
;
let
verticalHeight
=
pipWin
.
innerHeight
;
let
verticalAspectRatio
=
verticalWidth
/
verticalHeight
;
if
(
verticalWidth
=
=
136
)
{
Assert
.
equal
(
Math
.
floor
(
verticalAspectRatio
*
100
)
56
"
Vertical
aspect
ratio
is
1
:
2
"
)
;
}
else
{
Assert
.
equal
(
Math
.
floor
(
verticalAspectRatio
*
100
)
50
"
Vertical
aspect
ratio
is
1
:
2
"
)
;
}
Assert
.
less
(
verticalWidth
resizedWidth
"
Vertical
video
width
shrunk
"
)
;
Assert
.
equal
(
verticalHeight
initialHeight
"
Vertical
video
height
matches
previous
height
"
)
;
let
verticalScreenX
=
pipWin
.
mozInnerScreenX
;
let
verticalScreenY
=
pipWin
.
mozInnerScreenY
;
checkPosition
(
resizedScreenX
resizedScreenY
resizedWidth
resizedHeight
verticalScreenX
verticalScreenY
verticalWidth
verticalHeight
)
;
await
switchVideoSource
(
"
test
-
video
.
mp4
"
)
;
let
restoredWidth
=
pipWin
.
innerWidth
;
let
restoredHeight
=
pipWin
.
innerHeight
;
let
restoredAspectRatio
=
restoredWidth
/
restoredHeight
;
Assert
.
equal
(
Math
.
floor
(
restoredAspectRatio
*
100
)
177
"
Restored
aspect
ratio
is
still
16
:
9
"
)
;
Assert
.
equal
(
initialWidth
pipWin
.
innerWidth
"
Restored
video
has
its
original
width
"
)
;
Assert
.
equal
(
initialHeight
pipWin
.
innerHeight
"
Restored
video
has
its
original
height
"
)
;
let
restoredScreenX
=
pipWin
.
mozInnerScreenX
;
let
restoredScreenY
=
pipWin
.
mozInnerScreenY
;
checkPosition
(
initialScreenX
initialScreenY
initialWidth
initialHeight
restoredScreenX
restoredScreenY
restoredWidth
restoredHeight
)
;
}
add_task
(
async
(
)
=
>
{
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
info
(
Testing
{
videoID
}
case
.
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
await
testVideo
(
browser
videoID
pipWin
)
;
pipWin
.
moveTo
(
0
0
)
;
await
testVideo
(
browser
videoID
pipWin
{
pinX
:
true
pinY
:
true
}
)
;
await
BrowserTestUtils
.
closeWindow
(
pipWin
)
;
}
)
;
}
}
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
intl
.
l10n
.
pseudo
"
"
bidi
"
]
]
}
)
;
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
info
(
Testing
{
videoID
}
case
.
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
await
testVideo
(
browser
videoID
pipWin
{
pinX
:
true
}
)
;
await
BrowserTestUtils
.
closeWindow
(
pipWin
)
;
}
)
;
}
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
