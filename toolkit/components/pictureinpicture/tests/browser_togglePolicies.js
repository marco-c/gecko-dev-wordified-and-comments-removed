"
use
strict
"
;
add_task
(
async
(
)
=
>
{
let
positionPolicies
=
[
TOGGLE_POLICIES
.
TOP
TOGGLE_POLICIES
.
ONE_QUARTER
TOGGLE_POLICIES
.
THREE_QUARTERS
TOGGLE_POLICIES
.
BOTTOM
]
;
for
(
let
policy
of
positionPolicies
)
{
Services
.
ppmm
.
sharedData
.
set
(
SHARED_DATA_KEY
{
"
*
:
/
/
example
.
com
/
*
"
:
{
policy
}
}
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
let
expectations
=
{
"
with
-
controls
"
:
{
canToggle
:
true
policy
}
"
no
-
controls
"
:
{
canToggle
:
true
policy
}
}
;
if
(
policy
=
=
TOGGLE_POLICIES
.
BOTTOM
)
{
expectations
[
"
with
-
controls
"
]
=
{
canToggle
:
true
}
;
}
await
testToggle
(
TEST_PAGE
expectations
)
;
await
testToggle
(
TEST_PAGE_2
{
"
with
-
controls
"
:
{
canToggle
:
true
}
"
no
-
controls
"
:
{
canToggle
:
true
}
}
)
;
}
Services
.
ppmm
.
sharedData
.
set
(
SHARED_DATA_KEY
{
}
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
}
)
;
add_task
(
async
(
)
=
>
{
Services
.
ppmm
.
sharedData
.
set
(
SHARED_DATA_KEY
{
"
*
:
/
/
example
.
com
/
*
"
:
{
policy
:
TOGGLE_POLICIES
.
HIDDEN
}
}
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
await
testToggle
(
TEST_PAGE
{
"
with
-
controls
"
:
{
canToggle
:
false
policy
:
TOGGLE_POLICIES
.
HIDDEN
}
"
no
-
controls
"
:
{
canToggle
:
false
policy
:
TOGGLE_POLICIES
.
HIDDEN
}
}
)
;
await
testToggle
(
TEST_PAGE_2
{
"
with
-
controls
"
:
{
canToggle
:
true
}
"
no
-
controls
"
:
{
canToggle
:
true
}
}
)
;
Services
.
ppmm
.
sharedData
.
set
(
SHARED_DATA_KEY
{
}
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
}
)
;
add_task
(
async
(
)
=
>
{
Services
.
ppmm
.
sharedData
.
set
(
SHARED_DATA_KEY
{
"
*
:
/
/
example
.
com
/
*
/
test
-
page
.
html
"
:
{
policy
:
TOGGLE_POLICIES
.
HIDDEN
}
}
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
await
ensureVideosReady
(
browser
)
;
await
SimpleTest
.
promiseFocus
(
browser
)
;
await
testToggleHelper
(
browser
"
no
-
controls
"
false
TOGGLE_POLICIES
.
HIDDEN
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
history
.
pushState
(
{
}
"
2
"
"
otherpage
.
html
"
)
;
}
)
;
await
testToggleHelper
(
browser
"
no
-
controls
"
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
history
.
pushState
(
{
}
"
Return
"
"
test
-
page
.
html
"
)
;
}
)
;
await
testToggleHelper
(
browser
"
no
-
controls
"
false
TOGGLE_POLICIES
.
HIDDEN
)
;
}
)
;
Services
.
ppmm
.
sharedData
.
set
(
SHARED_DATA_KEY
{
}
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
}
)
;
