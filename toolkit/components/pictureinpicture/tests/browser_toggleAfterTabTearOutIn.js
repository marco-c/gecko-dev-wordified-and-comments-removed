"
use
strict
"
;
async
function
testToggleForTab
(
tab
)
{
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
let
browser
=
tab
.
linkedBrowser
;
info
(
Testing
{
videoID
}
case
.
)
;
await
testToggleHelper
(
browser
videoID
true
)
;
}
}
add_task
(
async
(
)
=
>
{
let
startingTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE
)
;
let
newWinLoaded
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
let
win2
=
gBrowser
.
replaceTabWithWindow
(
startingTab
)
;
await
newWinLoaded
;
if
(
win2
.
windowState
!
=
win2
.
STATE_MAXIMIZED
)
{
let
resizePromise
=
BrowserTestUtils
.
waitForEvent
(
win2
"
resize
"
)
;
win2
.
maximize
(
)
;
await
resizePromise
;
}
await
SimpleTest
.
promiseFocus
(
win2
)
;
await
testToggleForTab
(
win2
.
gBrowser
.
selectedTab
)
;
let
dragInTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
gBrowser
.
swapBrowsersAndCloseOther
(
dragInTab
win2
.
gBrowser
.
selectedTab
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
await
testToggleForTab
(
dragInTab
)
;
BrowserTestUtils
.
removeTab
(
dragInTab
)
;
}
)
;
