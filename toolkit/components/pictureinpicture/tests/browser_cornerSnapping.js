"
use
strict
"
;
const
FLOAT_OFFSET
=
50
;
const
CHANGE_OFFSET
=
30
;
const
DECREASE_OFFSET
=
FLOAT_OFFSET
-
CHANGE_OFFSET
;
const
INCREASE_OFFSET
=
FLOAT_OFFSET
+
CHANGE_OFFSET
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
}
controls
pipWin
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
DECREASE_OFFSET
pipWin
.
screen
.
availTop
+
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
metaKey
:
true
}
controls
pipWin
)
;
Assert
.
equal
(
pipWin
.
screenX
pipWin
.
screen
.
availLeft
"
Window
should
be
on
the
left
"
)
;
Assert
.
equal
(
pipWin
.
screenY
pipWin
.
screen
.
availTop
"
Window
should
be
on
the
top
"
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
}
controls
pipWin
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
DECREASE_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
metaKey
:
true
}
controls
pipWin
)
;
Assert
.
equal
(
pipWin
.
screenX
pipWin
.
screen
.
availLeft
"
Window
should
be
on
the
left
"
)
;
Assert
.
equal
(
pipWin
.
screenY
pipWin
.
screen
.
availTop
"
Window
should
be
on
the
top
"
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
}
controls
pipWin
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
INCREASE_OFFSET
pipWin
.
screen
.
availTop
+
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
metaKey
:
true
}
controls
pipWin
)
;
Assert
.
equal
(
pipWin
.
screenX
pipWin
.
screen
.
availLeft
+
pipWin
.
screen
.
availWidth
-
pipWin
.
innerWidth
"
Window
should
be
on
the
right
"
)
;
Assert
.
equal
(
pipWin
.
screenY
pipWin
.
screen
.
availTop
"
Window
should
be
on
the
top
"
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
}
controls
pipWin
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
INCREASE_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
metaKey
:
true
}
controls
pipWin
)
;
Assert
.
equal
(
pipWin
.
screenX
pipWin
.
screen
.
availLeft
"
Window
should
be
on
the
left
"
)
;
Assert
.
equal
(
pipWin
.
screenY
pipWin
.
screen
.
availTop
+
pipWin
.
screen
.
availHeight
-
pipWin
.
innerHeight
"
Window
should
be
on
the
bottom
"
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
pipWin
.
screen
.
availWidth
-
pipWin
.
innerWidth
-
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
}
controls
pipWin
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
pipWin
.
screen
.
availWidth
-
pipWin
.
innerWidth
-
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
INCREASE_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
metaKey
:
true
}
controls
pipWin
)
;
Assert
.
equal
(
pipWin
.
screenX
pipWin
.
screen
.
availLeft
+
pipWin
.
screen
.
availWidth
-
pipWin
.
innerWidth
"
Window
should
be
on
the
right
"
)
;
Assert
.
equal
(
pipWin
.
screenY
pipWin
.
screen
.
availTop
+
pipWin
.
screen
.
availHeight
-
pipWin
.
innerHeight
"
Window
should
be
on
the
bottom
"
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
pipWin
.
screen
.
availWidth
-
pipWin
.
innerWidth
-
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
pipWin
.
screen
.
availHeight
-
pipWin
.
innerHeight
-
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
}
controls
pipWin
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
pipWin
.
screen
.
availWidth
-
pipWin
.
innerWidth
-
INCREASE_OFFSET
pipWin
.
screen
.
availTop
+
pipWin
.
screen
.
availHeight
-
pipWin
.
innerHeight
-
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
metaKey
:
true
}
controls
pipWin
)
;
Assert
.
equal
(
pipWin
.
screenX
pipWin
.
screen
.
availLeft
"
Window
should
be
on
the
left
"
)
;
Assert
.
equal
(
pipWin
.
screenY
pipWin
.
screen
.
availTop
+
pipWin
.
screen
.
availHeight
-
pipWin
.
innerHeight
"
Window
should
be
on
the
bottom
"
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
pipWin
.
screen
.
availHeight
-
pipWin
.
innerHeight
-
FLOAT_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
}
controls
pipWin
)
;
pipWin
.
moveTo
(
pipWin
.
screen
.
availLeft
+
FLOAT_OFFSET
pipWin
.
screen
.
availTop
+
pipWin
.
screen
.
availHeight
-
pipWin
.
innerHeight
-
INCREASE_OFFSET
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mouseup
"
metaKey
:
true
}
controls
pipWin
)
;
Assert
.
equal
(
pipWin
.
screenX
pipWin
.
screen
.
availLeft
"
Window
should
be
on
the
left
"
)
;
Assert
.
equal
(
pipWin
.
screenY
pipWin
.
screen
.
availTop
"
Window
should
be
on
the
top
"
)
;
}
)
;
}
)
;
