"
use
strict
"
;
async
function
doTest
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_PAGE
gBrowser
}
async
browser
=
>
{
async
function
switchVideoSource
(
src
)
{
let
videoResized
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
resize
"
)
;
await
ContentTask
.
spawn
(
browser
{
src
}
async
(
{
src
}
)
=
>
{
let
doc
=
content
.
document
;
let
video
=
doc
.
getElementById
(
"
with
-
controls
"
)
;
video
.
src
=
src
;
}
)
;
await
videoResized
;
}
function
getAvailScreenSize
(
screen
)
{
let
screenLeft
=
{
}
screenTop
=
{
}
screenWidth
=
{
}
screenHeight
=
{
}
;
screen
.
GetAvailRectDisplayPix
(
screenLeft
screenTop
screenWidth
screenHeight
)
;
let
scaleFactor
=
screen
.
contentsScaleFactor
/
screen
.
defaultCSSScaleFactor
;
screenWidth
.
value
*
=
scaleFactor
;
screenHeight
.
value
*
=
scaleFactor
;
screenLeft
.
value
*
=
scaleFactor
;
screenTop
.
value
*
=
scaleFactor
;
return
[
screenLeft
.
value
screenTop
.
value
screenWidth
.
value
screenHeight
.
value
]
;
}
let
screen
=
Cc
[
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
]
.
getService
(
Ci
.
nsIScreenManager
)
.
screenForRect
(
1
1
1
1
)
;
let
[
defaultX
defaultY
defaultWidth
defaultHeight
]
=
getAvailScreenSize
(
screen
)
;
let
rightEdge
=
defaultX
+
defaultWidth
;
let
bottomEdge
=
defaultY
+
defaultHeight
;
let
tabHeight
=
35
;
clearSavedPosition
(
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
let
defaultPiPWidth
=
pipWin
.
innerWidth
;
let
defaultPiPHeight
=
pipWin
.
innerHeight
;
isfuzzy
(
pipWin
.
screenX
rightEdge
-
defaultPiPWidth
ACCEPTABLE_DIFFERENCE
"
Default
PiP
X
location
"
)
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
isfuzzy
(
pipWin
.
screenY
bottomEdge
-
defaultPiPHeight
-
tabHeight
ACCEPTABLE_DIFFERENCE
"
Default
PiP
Y
location
"
)
;
}
else
{
isfuzzy
(
pipWin
.
screenY
bottomEdge
-
defaultPiPHeight
ACCEPTABLE_DIFFERENCE
"
Default
PiP
Y
location
"
)
;
}
isfuzzy
(
pipWin
.
innerHeight
defaultPiPHeight
ACCEPTABLE_DIFFERENCE
"
Default
PiP
height
"
)
;
isfuzzy
(
pipWin
.
innerWidth
defaultPiPWidth
ACCEPTABLE_DIFFERENCE
"
Default
PiP
width
"
)
;
let
top
=
defaultY
;
let
left
=
defaultX
;
pipWin
.
moveTo
(
left
top
)
;
let
height
=
pipWin
.
innerHeight
/
2
;
let
width
=
pipWin
.
innerWidth
/
2
;
pipWin
.
resizeTo
(
width
height
)
;
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
isfuzzy
(
pipWin
.
screenX
left
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
X
location
"
)
;
isfuzzy
(
pipWin
.
screenY
top
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
Y
location
"
)
;
isfuzzy
(
pipWin
.
innerHeight
height
ACCEPTABLE_DIFFERENCE
"
Opened
with
1
/
2
default
height
"
)
;
isfuzzy
(
pipWin
.
innerWidth
width
ACCEPTABLE_DIFFERENCE
"
Opened
with
1
/
2
default
width
"
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
left
=
-
11111
;
top
=
-
11111
;
pipWin
.
moveTo
(
left
top
)
;
pipWin
.
resizeTo
(
pipWin
.
innerWidth
/
4
pipWin
.
innerHeight
/
4
)
;
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
isfuzzy
(
pipWin
.
screenX
rightEdge
-
defaultPiPWidth
ACCEPTABLE_DIFFERENCE
"
Opened
at
default
X
location
"
)
;
isfuzzy
(
pipWin
.
screenY
bottomEdge
-
defaultPiPHeight
ACCEPTABLE_DIFFERENCE
"
Opened
at
default
Y
location
"
)
;
isfuzzy
(
pipWin
.
innerWidth
defaultPiPWidth
ACCEPTABLE_DIFFERENCE
"
Opened
at
default
PiP
width
"
)
;
isfuzzy
(
pipWin
.
innerHeight
defaultPiPHeight
ACCEPTABLE_DIFFERENCE
"
Opened
at
default
PiP
height
"
)
;
}
if
(
AppConstants
.
platform
!
=
"
linux
"
)
{
height
=
pipWin
.
innerHeight
;
width
=
pipWin
.
innerWidth
;
left
=
200
;
top
=
100
;
pipWin
.
moveTo
(
left
top
)
;
await
switchVideoSource
(
"
test
-
video
-
cropped
.
mp4
"
)
;
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
isfuzzy
(
pipWin
.
screenX
left
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
X
location
"
)
;
isfuzzy
(
pipWin
.
screenY
top
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
Y
location
"
)
;
isfuzzy
(
pipWin
.
innerHeight
height
ACCEPTABLE_DIFFERENCE
"
Opened
height
with
previous
width
"
)
;
isfuzzy
(
pipWin
.
innerWidth
height
*
(
pipWin
.
innerWidth
/
pipWin
.
innerHeight
)
ACCEPTABLE_DIFFERENCE
"
Width
is
changed
to
adjust
for
aspect
ration
"
)
;
left
=
300
;
top
=
300
;
pipWin
.
moveTo
(
left
top
)
;
pipWin
.
resizeTo
(
defaultPiPWidth
/
2
defaultPiPHeight
/
2
)
;
height
=
pipWin
.
innerHeight
;
await
switchVideoSource
(
"
test
-
video
.
mp4
"
)
;
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
isfuzzy
(
pipWin
.
screenX
left
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
X
location
"
)
;
isfuzzy
(
pipWin
.
screenY
top
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
Y
location
"
)
;
isfuzzy
(
pipWin
.
innerHeight
height
ACCEPTABLE_DIFFERENCE
"
Opened
with
previous
height
"
)
;
isfuzzy
(
pipWin
.
innerWidth
height
*
(
pipWin
.
innerWidth
/
pipWin
.
innerHeight
)
ACCEPTABLE_DIFFERENCE
"
Width
is
changed
to
adjust
for
aspect
ration
"
)
;
}
left
=
rightEdge
-
Math
.
round
(
(
3
*
pipWin
.
innerWidth
)
/
4
)
;
top
=
bottomEdge
-
Math
.
round
(
(
3
*
pipWin
.
innerHeight
)
/
4
)
;
let
movePromise
=
BrowserTestUtils
.
waitForEvent
(
pipWin
.
windowRoot
"
MozUpdateWindowPos
"
)
;
pipWin
.
moveTo
(
left
top
)
;
await
movePromise
;
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
left
=
rightEdge
-
pipWin
.
innerWidth
;
top
=
bottomEdge
-
pipWin
.
innerHeight
;
isfuzzy
(
pipWin
.
screenX
left
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
X
location
but
shifted
back
on
screen
"
)
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
isfuzzy
(
pipWin
.
screenY
top
-
tabHeight
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
Y
location
but
shifted
back
on
screen
"
)
;
}
else
{
isfuzzy
(
pipWin
.
screenY
top
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
Y
location
but
shifted
back
on
screen
"
)
;
}
left
=
defaultX
-
Math
.
round
(
pipWin
.
innerWidth
/
4
)
;
top
=
defaultY
-
Math
.
round
(
pipWin
.
innerHeight
/
4
)
;
movePromise
=
BrowserTestUtils
.
waitForEvent
(
pipWin
.
windowRoot
"
MozUpdateWindowPos
"
)
;
pipWin
.
moveTo
(
left
top
)
;
await
movePromise
;
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
isfuzzy
(
pipWin
.
screenX
defaultX
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
X
location
but
shifted
back
on
screen
"
)
;
isfuzzy
(
pipWin
.
screenY
defaultY
ACCEPTABLE_DIFFERENCE
"
Opened
at
last
Y
location
but
shifted
back
on
screen
"
)
;
if
(
AppConstants
.
platform
!
=
"
linux
"
)
{
left
=
rightEdge
-
pipWin
.
innerWidth
;
top
=
Math
.
round
(
bottomEdge
/
4
)
;
pipWin
.
moveTo
(
left
top
)
;
width
=
pipWin
.
innerWidth
;
isfuzzy
(
pipWin
.
innerWidth
+
pipWin
.
screenX
rightEdge
ACCEPTABLE_DIFFERENCE
"
Video
is
on
right
edge
before
video
is
changed
"
)
;
await
switchVideoSource
(
"
test
-
video
-
cropped
.
mp4
"
)
;
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
"
with
-
controls
"
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
Assert
.
less
(
pipWin
.
innerWidth
width
"
New
video
width
is
smaller
"
)
;
isfuzzy
(
pipWin
.
innerWidth
+
pipWin
.
screenX
rightEdge
ACCEPTABLE_DIFFERENCE
"
Video
is
on
right
edge
after
video
is
changed
"
)
;
}
await
ensureMessageAndClosePiP
(
browser
"
with
-
controls
"
pipWin
true
)
;
}
)
;
}
add_task
(
async
function
test_pip_save_last_loc
(
)
{
await
doTest
(
)
;
}
)
;
add_task
(
async
function
test_pip_save_last_loc_with_os_zoom
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
textScaleFactor
"
120
]
]
}
)
;
await
doTest
(
)
;
}
)
;
