"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
let
entered
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
MozDOMFullscreen
:
Entered
"
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
await
entered
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
TelemetryStopwatch
.
running
(
"
FULLSCREEN_CHANGE_MS
"
)
;
}
)
;
let
exited
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
MozDOMFullscreen
:
Exited
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
await
exited
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Double
-
click
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
TelemetryStopwatch
.
running
(
"
FULLSCREEN_CHANGE_MS
"
)
;
}
)
;
entered
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
MozDOMFullscreen
:
Entered
"
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
await
entered
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
re
-
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
TelemetryStopwatch
.
running
(
"
FULLSCREEN_CHANGE_MS
"
)
;
}
)
;
exited
=
BrowserTestUtils
.
waitForEvent
(
pipWin
"
MozDOMFullscreen
:
Exited
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
pipWin
)
;
await
exited
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Pressing
Escape
caused
us
to
exit
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
TelemetryStopwatch
.
running
(
"
FULLSCREEN_CHANGE_MS
"
)
;
}
)
;
let
pipClosed
=
BrowserTestUtils
.
domWindowClosed
(
pipWin
)
;
pipWin
.
close
(
)
;
await
pipClosed
;
}
)
;
}
)
;
