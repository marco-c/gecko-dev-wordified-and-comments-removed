"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
pipWin
=
await
triggerPictureInPicture
(
browser
"
no
-
controls
"
)
;
let
controls
=
pipWin
.
document
.
getElementById
(
"
controls
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
enter
fullscreen
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
let
close
=
pipWin
.
document
.
getElementById
(
"
close
"
)
;
let
opacity
=
parseFloat
(
pipWin
.
getComputedStyle
(
close
)
.
opacity
)
;
return
opacity
=
=
0
.
0
;
}
"
Close
button
in
player
should
have
reached
0
.
0
opacity
"
100
100
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Double
-
click
caused
us
to
exit
fullscreen
.
"
)
;
await
promiseFullscreenEntered
(
pipWin
async
(
)
=
>
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
dblclick
"
}
controls
pipWin
)
;
}
)
;
Assert
.
equal
(
pipWin
.
document
.
fullscreenElement
pipWin
.
document
.
body
"
Double
-
click
caused
us
to
re
-
enter
fullscreen
.
"
)
;
await
promiseFullscreenExited
(
pipWin
async
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
pipWin
)
;
}
)
;
Assert
.
ok
(
!
pipWin
.
document
.
fullscreenElement
"
Pressing
Escape
caused
us
to
exit
fullscreen
.
"
)
;
let
pipClosed
=
BrowserTestUtils
.
domWindowClosed
(
pipWin
)
;
pipWin
.
close
(
)
;
await
pipClosed
;
}
)
;
}
)
;
