"
use
strict
"
;
add_task
(
async
function
test_close_mediaStreamVideos
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
url
:
TEST_ROOT
+
"
test
-
media
-
stream
.
html
"
gBrowser
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
newVideo
=
content
.
document
.
createElement
(
"
video
"
)
;
newVideo
.
src
=
"
test
-
video
.
mp4
"
;
newVideo
.
id
=
"
media
-
stream
-
video
"
;
content
.
document
.
body
.
appendChild
(
newVideo
)
;
newVideo
.
loop
=
true
;
}
)
;
await
ensureVideosReady
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
newVideo
=
content
.
document
.
getElementById
(
"
media
-
stream
-
video
"
)
;
newVideo
.
play
(
)
;
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
let
testedVideo
=
content
.
document
.
createElement
(
"
video
"
)
;
testedVideo
.
id
=
videoID
;
testedVideo
.
srcObject
=
newVideo
.
mozCaptureStream
(
)
.
clone
(
)
;
content
.
document
.
body
.
prepend
(
testedVideo
)
;
if
(
testedVideo
.
readyState
<
content
.
HTMLMediaElement
.
HAVE_ENOUGH_DATA
)
{
info
(
Waiting
for
'
canplaythrough
'
for
'
{
testedVideo
.
id
}
'
)
;
await
ContentTaskUtils
.
waitForEvent
(
testedVideo
"
canplaythrough
"
)
;
}
testedVideo
.
play
(
)
;
}
}
)
;
for
(
let
videoID
of
[
"
with
-
controls
"
"
no
-
controls
"
]
)
{
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
ok
(
!
(
await
isVideoPaused
(
browser
videoID
)
)
"
The
video
is
not
paused
in
PiP
window
.
"
)
;
let
pipClosed
=
BrowserTestUtils
.
domWindowClosed
(
pipWin
)
;
let
closeButton
=
pipWin
.
document
.
getElementById
(
"
close
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
pipWin
)
;
await
pipClosed
;
ok
(
!
(
await
isVideoPaused
(
browser
videoID
)
)
"
The
video
is
not
paused
after
closing
PiP
window
.
"
)
;
}
}
)
;
}
)
;
