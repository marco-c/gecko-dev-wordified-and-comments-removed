"
use
strict
"
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ROOT
+
"
test
-
reversed
.
html
"
}
async
browser
=
>
{
await
ensureVideosReady
(
browser
)
;
let
videoID
=
"
reversed
"
;
await
prepareForToggleClick
(
browser
videoID
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
#
{
videoID
}
{
type
:
"
mousemove
"
}
browser
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
#
{
videoID
}
{
type
:
"
mouseover
"
}
browser
)
;
let
toggleFlippedAttribute
=
await
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
let
controlsOverlay
=
shadowRoot
.
querySelector
(
"
.
controlsOverlay
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
controlsOverlay
.
classList
.
contains
(
"
hovering
"
)
;
}
"
Waiting
for
the
hovering
state
to
be
set
on
the
video
.
"
)
;
return
shadowRoot
.
firstChild
.
getAttribute
(
"
flipped
"
)
;
}
)
;
Assert
.
equal
(
toggleFlippedAttribute
"
true
"
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_ROOT
+
"
test
-
reversed
.
html
"
}
async
browser
=
>
{
async
function
getFlippedAttribute
(
browser
videoID
)
{
let
videoFlippedAttribute
=
await
SpecialPowers
.
spawn
(
browser
[
videoID
]
async
videoID
=
>
{
let
video
=
content
.
document
.
getElementById
(
videoID
)
;
let
shadowRoot
=
video
.
openOrClosedShadowRoot
;
return
shadowRoot
.
firstChild
.
getAttribute
(
"
flipped
"
)
;
}
)
;
return
videoFlippedAttribute
;
}
async
function
getPiPVideoTransform
(
playerBrowser
)
{
let
pipVideoTransform
=
await
SpecialPowers
.
spawn
(
playerBrowser
[
]
async
(
)
=
>
{
let
video
=
content
.
document
.
querySelector
(
"
video
"
)
;
return
video
.
getTransformToViewport
(
)
.
a
;
}
)
;
return
pipVideoTransform
;
}
await
ensureVideosReady
(
browser
)
;
let
videoID
=
"
reversed
"
;
let
videoFlippedAttribute
=
await
getFlippedAttribute
(
browser
videoID
)
;
Assert
.
equal
(
videoFlippedAttribute
null
)
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
videoFlippedAttribute
=
await
getFlippedAttribute
(
browser
"
reversed
"
)
;
Assert
.
equal
(
videoFlippedAttribute
"
true
"
)
;
let
playerBrowser
=
pipWin
.
document
.
getElementById
(
"
browser
"
)
;
let
pipVideoTransform
=
await
getPiPVideoTransform
(
playerBrowser
)
;
Assert
.
equal
(
pipVideoTransform
-
1
)
;
await
ensureMessageAndClosePiP
(
browser
videoID
pipWin
false
)
;
videoFlippedAttribute
=
await
getFlippedAttribute
(
browser
"
reversed
"
)
;
Assert
.
equal
(
videoFlippedAttribute
null
)
;
videoID
=
"
not
-
reversed
"
;
videoFlippedAttribute
=
await
getFlippedAttribute
(
browser
videoID
)
;
Assert
.
equal
(
videoFlippedAttribute
null
)
;
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
videoFlippedAttribute
=
await
getFlippedAttribute
(
browser
videoID
)
;
Assert
.
equal
(
videoFlippedAttribute
null
)
;
playerBrowser
=
pipWin
.
document
.
getElementById
(
"
browser
"
)
;
pipVideoTransform
=
await
getPiPVideoTransform
(
playerBrowser
)
;
await
ensureMessageAndClosePiP
(
browser
videoID
pipWin
false
)
;
}
)
;
}
)
;
