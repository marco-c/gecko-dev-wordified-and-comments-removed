"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PictureInPicture
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PLAYER_URI
=
"
chrome
:
/
/
global
/
content
/
pictureinpicture
/
player
.
xhtml
"
;
const
PLAYER_FEATURES
=
chrome
titlebar
=
no
alwaysontop
lockaspectratio
resizable
;
const
WINDOW_TYPE
=
"
Toolkit
:
PictureInPicture
"
;
var
PictureInPicture
=
{
receiveMessage
(
aMessage
)
{
let
browser
=
aMessage
.
target
;
switch
(
aMessage
.
name
)
{
case
"
PictureInPicture
:
Request
"
:
{
let
videoData
=
aMessage
.
data
;
this
.
handlePictureInPictureRequest
(
browser
videoData
)
;
break
;
}
case
"
PictureInPicture
:
Close
"
:
{
this
.
closePipWindow
(
)
;
break
;
}
case
"
PictureInPicture
:
Playing
"
:
{
let
controls
=
this
.
weakPipControls
&
&
this
.
weakPipControls
.
get
(
)
;
if
(
controls
)
{
controls
.
classList
.
add
(
"
playing
"
)
;
}
break
;
}
case
"
PictureInPicture
:
Paused
"
:
{
let
controls
=
this
.
weakPipControls
&
&
this
.
weakPipControls
.
get
(
)
;
if
(
controls
)
{
controls
.
classList
.
remove
(
"
playing
"
)
;
}
break
;
}
}
}
async
focusTabAndClosePip
(
)
{
let
gBrowser
=
this
.
browser
.
ownerGlobal
.
gBrowser
;
let
tab
=
gBrowser
.
getTabForBrowser
(
this
.
browser
)
;
gBrowser
.
selectedTab
=
tab
;
await
this
.
closePipWindow
(
)
;
}
clearPipTabIcon
(
)
{
let
win
=
this
.
browser
.
ownerGlobal
;
let
tab
=
win
.
gBrowser
.
getTabForBrowser
(
this
.
browser
)
;
if
(
tab
)
{
tab
.
removeAttribute
(
"
pictureinpicture
"
)
;
}
}
async
closePipWindow
(
)
{
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
WINDOW_TYPE
)
)
{
if
(
win
.
closed
)
{
continue
;
}
let
closedPromise
=
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
unload
"
resolve
{
once
:
true
}
)
;
}
)
;
win
.
close
(
)
;
await
closedPromise
;
}
}
async
handlePictureInPictureRequest
(
browser
videoData
)
{
await
this
.
closePipWindow
(
)
;
let
parentWin
=
browser
.
ownerGlobal
;
this
.
browser
=
browser
;
let
win
=
await
this
.
openPipWindow
(
parentWin
videoData
)
;
let
controls
=
win
.
document
.
getElementById
(
"
controls
"
)
;
this
.
weakPipControls
=
Cu
.
getWeakReference
(
controls
)
;
if
(
videoData
.
playing
)
{
controls
.
classList
.
add
(
"
playing
"
)
;
}
let
tab
=
parentWin
.
gBrowser
.
getTabForBrowser
(
browser
)
;
tab
.
setAttribute
(
"
pictureinpicture
"
true
)
;
win
.
setupPlayer
(
browser
videoData
)
;
}
unload
(
window
)
{
TelemetryStopwatch
.
finish
(
"
FX_PICTURE_IN_PICTURE_WINDOW_OPEN_DURATION
"
window
)
;
this
.
clearPipTabIcon
(
)
;
delete
this
.
weakPipControls
;
delete
this
.
browser
;
}
async
openPipWindow
(
parentWin
videoData
)
{
let
{
videoHeight
videoWidth
}
=
videoData
;
let
screenManager
=
Cc
[
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
]
.
getService
(
Ci
.
nsIScreenManager
)
;
let
screen
=
screenManager
.
screenForRect
(
parentWin
.
screenX
parentWin
.
screenY
1
1
)
;
let
screenLeft
=
{
}
screenTop
=
{
}
screenWidth
=
{
}
screenHeight
=
{
}
;
screen
.
GetAvailRectDisplayPix
(
screenLeft
screenTop
screenWidth
screenHeight
)
;
screenWidth
.
value
=
screenWidth
.
value
/
screen
.
defaultCSSScaleFactor
;
screenHeight
.
value
=
screenHeight
.
value
/
screen
.
defaultCSSScaleFactor
;
const
MAX_HEIGHT
=
screenHeight
.
value
/
4
;
const
MAX_WIDTH
=
screenWidth
.
value
/
3
;
let
resultWidth
=
videoWidth
;
let
resultHeight
=
videoHeight
;
if
(
videoHeight
>
MAX_HEIGHT
|
|
videoWidth
>
MAX_WIDTH
)
{
let
aspectRatio
=
videoWidth
/
videoHeight
;
if
(
videoWidth
>
=
videoHeight
)
{
resultWidth
=
MAX_WIDTH
;
resultHeight
=
Math
.
round
(
MAX_WIDTH
/
aspectRatio
)
;
}
else
{
resultHeight
=
MAX_HEIGHT
;
resultWidth
=
Math
.
round
(
MAX_HEIGHT
*
aspectRatio
)
;
}
}
let
isRTL
=
Services
.
locale
.
isAppLocaleRTL
;
let
pipLeft
=
isRTL
?
0
:
screenWidth
.
value
-
resultWidth
;
let
pipTop
=
screenHeight
.
value
-
resultHeight
;
let
features
=
{
PLAYER_FEATURES
}
top
=
{
pipTop
}
left
=
{
pipLeft
}
+
outerWidth
=
{
resultWidth
}
outerHeight
=
{
resultHeight
}
;
let
pipWindow
=
Services
.
ww
.
openWindow
(
parentWin
PLAYER_URI
null
features
null
)
;
TelemetryStopwatch
.
start
(
"
FX_PICTURE_IN_PICTURE_WINDOW_OPEN_DURATION
"
pipWindow
{
inSeconds
:
true
}
)
;
return
new
Promise
(
resolve
=
>
{
pipWindow
.
addEventListener
(
"
load
"
(
)
=
>
{
resolve
(
pipWindow
)
;
}
{
once
:
true
}
)
;
}
)
;
}
}
;
