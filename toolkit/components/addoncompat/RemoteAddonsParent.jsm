var
EXPORTED_SYMBOLS
=
[
"
RemoteAddonsParent
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
RemoteWebProgress
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
permitCPOWsInScope
(
this
)
;
function
setDefault
(
dict
key
default_
)
{
if
(
key
in
dict
)
{
return
dict
[
key
]
;
}
dict
[
key
]
=
default_
;
return
default_
;
}
var
NotificationTracker
=
{
_paths
:
{
}
init
(
)
{
let
ppmm
=
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
ppmm
.
initialProcessData
.
remoteAddonsNotificationPaths
=
this
.
_paths
;
}
add
(
path
)
{
let
tracked
=
this
.
_paths
;
for
(
let
component
of
path
)
{
tracked
=
setDefault
(
tracked
component
{
}
)
;
}
let
count
=
tracked
.
_count
|
|
0
;
count
+
+
;
tracked
.
_count
=
count
;
let
ppmm
=
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
ppmm
.
broadcastAsyncMessage
(
"
Addons
:
ChangeNotification
"
{
path
count
}
)
;
}
remove
(
path
)
{
let
tracked
=
this
.
_paths
;
for
(
let
component
of
path
)
{
tracked
=
setDefault
(
tracked
component
{
}
)
;
}
tracked
.
_count
-
-
;
let
ppmm
=
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
ppmm
.
broadcastAsyncMessage
(
"
Addons
:
ChangeNotification
"
{
path
count
:
tracked
.
_count
}
)
;
}
}
;
NotificationTracker
.
init
(
)
;
function
Interposition
(
name
base
)
{
this
.
name
=
name
;
if
(
base
)
{
this
.
methods
=
Object
.
create
(
base
.
methods
)
;
this
.
getters
=
Object
.
create
(
base
.
getters
)
;
this
.
setters
=
Object
.
create
(
base
.
setters
)
;
}
else
{
this
.
methods
=
Object
.
create
(
null
)
;
this
.
getters
=
Object
.
create
(
null
)
;
this
.
setters
=
Object
.
create
(
null
)
;
}
}
var
TabBrowserElementInterposition
=
new
Interposition
(
"
TabBrowserElementInterposition
"
)
;
var
progressListeners
=
{
global
:
new
WeakMap
(
)
tabs
:
new
WeakMap
(
)
}
;
function
wrapProgressListener
(
kind
listener
)
{
if
(
progressListeners
[
kind
]
.
has
(
listener
)
)
{
return
progressListeners
[
kind
]
.
get
(
listener
)
;
}
let
ListenerHandler
=
{
get
(
target
name
)
{
if
(
name
.
startsWith
(
"
on
"
)
)
{
return
function
(
.
.
.
args
)
{
listener
[
name
]
.
apply
(
listener
RemoteWebProgressManager
.
argumentsForAddonListener
(
kind
args
)
)
;
}
;
}
return
listener
[
name
]
;
}
}
;
let
listenerProxy
=
new
Proxy
(
listener
ListenerHandler
)
;
progressListeners
[
kind
]
.
set
(
listener
listenerProxy
)
;
return
listenerProxy
;
}
TabBrowserElementInterposition
.
methods
.
addProgressListener
=
function
(
addon
target
listener
)
{
if
(
!
target
.
ownerGlobal
.
gMultiProcessBrowser
)
{
return
target
.
addProgressListener
(
listener
)
;
}
NotificationTracker
.
add
(
[
"
web
-
progress
"
addon
]
)
;
return
target
.
addProgressListener
(
wrapProgressListener
(
"
global
"
listener
)
)
;
}
;
TabBrowserElementInterposition
.
methods
.
removeProgressListener
=
function
(
addon
target
listener
)
{
if
(
!
target
.
ownerGlobal
.
gMultiProcessBrowser
)
{
return
target
.
removeProgressListener
(
listener
)
;
}
NotificationTracker
.
remove
(
[
"
web
-
progress
"
addon
]
)
;
return
target
.
removeProgressListener
(
wrapProgressListener
(
"
global
"
listener
)
)
;
}
;
var
RemoteAddonsParent
=
{
init
(
)
{
let
mm
=
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageListenerManager
)
;
mm
.
addMessageListener
(
"
Addons
:
RegisterGlobal
"
this
)
;
Services
.
ppmm
.
initialProcessData
.
remoteAddonsParentInitted
=
true
;
Services
.
ppmm
.
loadProcessScript
(
"
data
:
new
"
+
function
(
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
RemoteAddonsChild
.
jsm
"
)
;
}
true
)
;
this
.
globalToBrowser
=
new
WeakMap
(
)
;
this
.
browserToGlobal
=
new
WeakMap
(
)
;
}
getInterfaceInterpositions
(
)
{
return
{
}
;
}
getTaggedInterpositions
(
)
{
return
{
TabBrowserElement
:
TabBrowserElementInterposition
}
;
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
Addons
:
RegisterGlobal
"
:
this
.
browserToGlobal
.
set
(
msg
.
target
msg
.
objects
.
global
)
;
this
.
globalToBrowser
.
set
(
msg
.
objects
.
global
msg
.
target
)
;
break
;
}
}
}
;
