#
ifndef
GOOGLE_PROTOBUF_GENERATED_MESSAGE_TCTABLE_IMPL_H__
#
define
GOOGLE_PROTOBUF_GENERATED_MESSAGE_TCTABLE_IMPL_H__
#
include
<
cstdint
>
#
include
<
type_traits
>
#
include
<
google
/
protobuf
/
port
.
h
>
#
include
<
google
/
protobuf
/
extension_set
.
h
>
#
include
<
google
/
protobuf
/
generated_message_tctable_decl
.
h
>
#
include
<
google
/
protobuf
/
message_lite
.
h
>
#
include
<
google
/
protobuf
/
metadata_lite
.
h
>
#
include
<
google
/
protobuf
/
parse_context
.
h
>
#
include
<
google
/
protobuf
/
wire_format_lite
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
namespace
google
{
namespace
protobuf
{
class
Message
;
class
UnknownFieldSet
;
namespace
internal
{
namespace
field_layout
{
enum
FieldKind
:
uint16_t
{
kFkShift
=
0
kFkBits
=
3
kFkMask
=
(
(
1
<
<
kFkBits
)
-
1
)
<
<
kFkShift
kFkNone
=
0
kFkVarint
kFkPackedVarint
kFkFixed
kFkPackedFixed
kFkString
kFkMessage
kFkMap
}
;
static_assert
(
kFkMap
<
(
1
<
<
kFkBits
)
"
too
many
types
"
)
;
enum
Cardinality
:
uint16_t
{
kFcShift
=
kFkShift
+
kFkBits
kFcBits
=
2
kFcMask
=
(
(
1
<
<
kFcBits
)
-
1
)
<
<
kFcShift
kFcSingular
=
0
kFcOptional
=
1
<
<
kFcShift
kFcRepeated
=
2
<
<
kFcShift
kFcOneof
=
3
<
<
kFcShift
}
;
enum
FieldRep
:
uint16_t
{
kRepShift
=
kFcShift
+
kFcBits
kRepBits
=
3
kRepMask
=
(
(
1
<
<
kRepBits
)
-
1
)
<
<
kRepShift
kRep8Bits
=
0
kRep32Bits
=
2
<
<
kRepShift
kRep64Bits
=
3
<
<
kRepShift
kRepAString
=
0
kRepIString
=
1
<
<
kRepShift
kRepCord
=
2
<
<
kRepShift
kRepSPiece
=
3
<
<
kRepShift
kRepSString
=
4
<
<
kRepShift
kRepMessage
=
0
kRepGroup
=
1
<
<
kRepShift
kRepLazy
=
2
<
<
kRepShift
kRepIWeak
=
3
<
<
kRepShift
}
;
enum
TransformValidation
:
uint16_t
{
kTvShift
=
kRepShift
+
kRepBits
kTvBits
=
2
kTvMask
=
(
(
1
<
<
kTvBits
)
-
1
)
<
<
kTvShift
kTvZigZag
=
1
<
<
kTvShift
kTvEnum
=
2
<
<
kTvShift
kTvRange
=
3
<
<
kTvShift
kTvUtf8Debug
=
1
<
<
kTvShift
kTvUtf8
=
2
<
<
kTvShift
}
;
static_assert
(
(
kTvEnum
&
kTvRange
)
!
=
0
"
enum
validation
types
must
share
a
bit
"
)
;
static_assert
(
(
kTvEnum
&
kTvRange
&
kTvZigZag
)
=
=
0
"
zigzag
encoding
is
not
enum
validation
"
)
;
enum
FormatDiscriminator
:
uint16_t
{
kFmtShift
=
kTvShift
+
kTvBits
kFmtBits
=
2
kFmtMask
=
(
(
1
<
<
kFmtBits
)
-
1
)
<
<
kFmtShift
kFmtUnsigned
=
1
<
<
kFmtShift
kFmtSigned
=
2
<
<
kFmtShift
kFmtFloating
=
3
<
<
kFmtShift
kFmtEnum
=
3
<
<
kFmtShift
kFmtUtf8
=
1
<
<
kFmtShift
kFmtUtf8Escape
=
2
<
<
kFmtShift
kFmtArray
=
1
<
<
kFmtShift
kFmtShow
=
1
<
<
kFmtShift
}
;
static_assert
(
kFmtShift
+
kFmtBits
=
=
12
"
number
of
bits
changed
"
)
;
static_assert
(
kFmtShift
+
kFmtBits
<
=
16
"
too
many
bits
"
)
;
enum
FieldType
:
uint16_t
{
kBool
=
kFkVarint
|
kRep8Bits
kFixed32
=
kFkFixed
|
kRep32Bits
|
kFmtUnsigned
kUInt32
=
kFkVarint
|
kRep32Bits
|
kFmtUnsigned
kSFixed32
=
kFkFixed
|
kRep32Bits
|
kFmtSigned
kInt32
=
kFkVarint
|
kRep32Bits
|
kFmtSigned
kSInt32
=
kFkVarint
|
kRep32Bits
|
kFmtSigned
|
kTvZigZag
kFloat
=
kFkFixed
|
kRep32Bits
|
kFmtFloating
kEnum
=
kFkVarint
|
kRep32Bits
|
kFmtEnum
|
kTvEnum
kEnumRange
=
kFkVarint
|
kRep32Bits
|
kFmtEnum
|
kTvRange
kOpenEnum
=
kFkVarint
|
kRep32Bits
|
kFmtEnum
kFixed64
=
kFkFixed
|
kRep64Bits
|
kFmtUnsigned
kUInt64
=
kFkVarint
|
kRep64Bits
|
kFmtUnsigned
kSFixed64
=
kFkFixed
|
kRep64Bits
|
kFmtSigned
kInt64
=
kFkVarint
|
kRep64Bits
|
kFmtSigned
kSInt64
=
kFkVarint
|
kRep64Bits
|
kFmtSigned
|
kTvZigZag
kDouble
=
kFkFixed
|
kRep64Bits
|
kFmtFloating
kPackedBool
=
kFkPackedVarint
|
kRep8Bits
kPackedFixed32
=
kFkPackedFixed
|
kRep32Bits
|
kFmtUnsigned
kPackedUInt32
=
kFkPackedVarint
|
kRep32Bits
|
kFmtUnsigned
kPackedSFixed32
=
kFkPackedFixed
|
kRep32Bits
|
kFmtSigned
kPackedInt32
=
kFkPackedVarint
|
kRep32Bits
|
kFmtSigned
kPackedSInt32
=
kFkPackedVarint
|
kRep32Bits
|
kFmtSigned
|
kTvZigZag
kPackedFloat
=
kFkPackedFixed
|
kRep32Bits
|
kFmtFloating
kPackedEnum
=
kFkPackedVarint
|
kRep32Bits
|
kFmtEnum
|
kTvEnum
kPackedEnumRange
=
kFkPackedVarint
|
kRep32Bits
|
kFmtEnum
|
kTvRange
kPackedOpenEnum
=
kFkPackedVarint
|
kRep32Bits
|
kFmtEnum
kPackedFixed64
=
kFkPackedFixed
|
kRep64Bits
|
kFmtUnsigned
kPackedUInt64
=
kFkPackedVarint
|
kRep64Bits
|
kFmtUnsigned
kPackedSFixed64
=
kFkPackedFixed
|
kRep64Bits
|
kFmtSigned
kPackedInt64
=
kFkPackedVarint
|
kRep64Bits
|
kFmtSigned
kPackedSInt64
=
kFkPackedVarint
|
kRep64Bits
|
kFmtSigned
|
kTvZigZag
kPackedDouble
=
kFkPackedFixed
|
kRep64Bits
|
kFmtFloating
kBytes
=
kFkString
|
kFmtArray
kRawString
=
kFkString
|
kFmtUtf8
|
kTvUtf8Debug
kUtf8String
=
kFkString
|
kFmtUtf8
|
kTvUtf8
kMessage
=
kFkMessage
kMap
=
kFkMap
}
;
}
#
define
PROTOBUF_TC_PARAM_PASS
msg
ptr
ctx
table
hasbits
data
#
ifndef
NDEBUG
template
<
size_t
align
>
#
ifndef
_MSC_VER
[
[
noreturn
]
]
#
endif
void
AlignFail
(
uintptr_t
address
)
{
GOOGLE_LOG
(
FATAL
)
<
<
"
Unaligned
(
"
<
<
align
<
<
"
)
access
at
"
<
<
address
;
}
extern
template
void
AlignFail
<
4
>
(
uintptr_t
)
;
extern
template
void
AlignFail
<
8
>
(
uintptr_t
)
;
#
endif
class
PROTOBUF_EXPORT
TcParser
final
{
public
:
static
const
char
*
GenericFallback
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
GenericFallbackLite
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
ParseLoop
(
MessageLite
*
msg
const
char
*
ptr
ParseContext
*
ctx
const
TcParseTableBase
*
table
)
;
static
const
char
*
FastF32S1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF32S2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF32R1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF32R2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF32P1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF32P2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF64S1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF64S2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF64R1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF64R2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF64P1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastF64P2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV8S1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV8S2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV8R1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV8R2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV8P1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV8P2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV32S1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV32S2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV32R1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV32R2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV32P1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV32P2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV64S1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV64S2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV64R1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV64R2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV64P1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastV64P2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ32S1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ32S2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ32R1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ32R2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ32P1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ32P2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ64S1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ64S2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ64R1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ64R2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ64P1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastZ64P2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastErS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastErS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastErR1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastErR2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastEvS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastEvS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastEvR1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastEvR2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastBS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastBS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastBR1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastBR2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastSS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastSS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastSR1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastSR2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastUS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastUS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastUR1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastUR2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastBiS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastBiS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastSiS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastSiS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastUiS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastUiS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastMS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastMS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastMR1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastMR2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastGS1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastGS2
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastGR1
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastGR2
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
T
>
static
inline
T
&
RefAt
(
void
*
x
size_t
offset
)
{
T
*
target
=
reinterpret_cast
<
T
*
>
(
static_cast
<
char
*
>
(
x
)
+
offset
)
;
#
ifndef
NDEBUG
if
(
PROTOBUF_PREDICT_FALSE
(
reinterpret_cast
<
uintptr_t
>
(
target
)
%
alignof
(
T
)
!
=
0
)
)
{
AlignFail
<
alignof
(
T
)
>
(
reinterpret_cast
<
uintptr_t
>
(
target
)
)
;
}
#
endif
return
*
target
;
}
template
<
typename
T
>
static
inline
const
T
&
RefAt
(
const
void
*
x
size_t
offset
)
{
const
T
*
target
=
reinterpret_cast
<
const
T
*
>
(
static_cast
<
const
char
*
>
(
x
)
+
offset
)
;
#
ifndef
NDEBUG
if
(
PROTOBUF_PREDICT_FALSE
(
reinterpret_cast
<
uintptr_t
>
(
target
)
%
alignof
(
T
)
!
=
0
)
)
{
AlignFail
<
alignof
(
T
)
>
(
reinterpret_cast
<
uintptr_t
>
(
target
)
)
;
}
#
endif
return
*
target
;
}
template
<
typename
T
>
static
inline
T
ReadAt
(
const
void
*
x
size_t
offset
)
{
T
out
;
memcpy
(
&
out
static_cast
<
const
char
*
>
(
x
)
+
offset
sizeof
(
T
)
)
;
return
out
;
}
static
const
char
*
MiniParse
(
PROTOBUF_TC_PARAM_DECL
)
;
private
:
friend
class
GeneratedTcTableLiteTest
;
template
<
typename
TagType
bool
group_coding
>
static
inline
const
char
*
SingularParseMessageAuxImpl
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
TagType
bool
group_coding
>
static
inline
const
char
*
RepeatedParseMessageAuxImpl
(
PROTOBUF_TC_PARAM_DECL
)
;
static
inline
PROTOBUF_ALWAYS_INLINE
void
SyncHasbits
(
MessageLite
*
msg
uint64_t
hasbits
const
TcParseTableBase
*
table
)
{
const
uint32_t
has_bits_offset
=
table
-
>
has_bits_offset
;
if
(
has_bits_offset
)
{
RefAt
<
uint32_t
>
(
msg
has_bits_offset
)
=
static_cast
<
uint32_t
>
(
hasbits
)
;
}
}
static
const
char
*
TagDispatch
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
ToTagDispatch
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
ToParseLoop
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
Error
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
FastUnknownEnumFallback
(
PROTOBUF_TC_PARAM_DECL
)
;
class
ScopedArenaSwap
;
template
<
class
MessageBaseT
class
UnknownFieldsT
>
static
const
char
*
GenericFallbackImpl
(
PROTOBUF_TC_PARAM_DECL
)
{
#
define
CHK_
(
x
)
\
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
return
nullptr
/
*
NOLINT
*
/
SyncHasbits
(
msg
hasbits
table
)
;
CHK_
(
ptr
)
;
uint32_t
tag
=
data
.
tag
(
)
;
if
(
(
tag
&
7
)
=
=
WireFormatLite
:
:
WIRETYPE_END_GROUP
|
|
tag
=
=
0
)
{
ctx
-
>
SetLastTag
(
tag
)
;
return
ptr
;
}
uint32_t
num
=
tag
>
>
3
;
if
(
table
-
>
extension_range_low
<
=
num
&
&
num
<
=
table
-
>
extension_range_high
)
{
return
RefAt
<
ExtensionSet
>
(
msg
table
-
>
extension_offset
)
.
ParseField
(
tag
ptr
static_cast
<
const
MessageBaseT
*
>
(
table
-
>
default_instance
)
&
msg
-
>
_internal_metadata_
ctx
)
;
}
return
UnknownFieldParse
(
tag
msg
-
>
_internal_metadata_
.
mutable_unknown_fields
<
UnknownFieldsT
>
(
)
ptr
ctx
)
;
#
undef
CHK_
}
template
<
typename
LayoutType
typename
TagType
>
static
inline
const
char
*
SingularFixed
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
LayoutType
typename
TagType
>
static
inline
const
char
*
RepeatedFixed
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
LayoutType
typename
TagType
>
static
inline
const
char
*
PackedFixed
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
FieldType
typename
TagType
bool
zigzag
=
false
>
static
inline
const
char
*
SingularVarint
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
FieldType
typename
TagType
bool
zigzag
=
false
>
static
inline
const
char
*
RepeatedVarint
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
FieldType
typename
TagType
bool
zigzag
=
false
>
static
inline
const
char
*
PackedVarint
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
FieldType
typename
TagType
bool
zigzag
=
false
>
static
const
char
*
SingularVarBigint
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
TagType
uint16_t
xform_val
>
static
inline
const
char
*
SingularEnum
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
TagType
uint16_t
xform_val
>
static
inline
const
char
*
RepeatedEnum
(
PROTOBUF_TC_PARAM_DECL
)
;
enum
Utf8Type
{
kNoUtf8
=
0
kUtf8
=
1
kUtf8ValidateOnly
=
2
}
;
template
<
typename
TagType
Utf8Type
utf8
>
static
inline
const
char
*
SingularString
(
PROTOBUF_TC_PARAM_DECL
)
;
template
<
typename
TagType
Utf8Type
utf8
>
static
inline
const
char
*
RepeatedString
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
TcParseTableBase
:
:
FieldEntry
*
FindFieldEntry
(
const
TcParseTableBase
*
table
uint32_t
field_num
)
;
static
StringPiece
MessageName
(
const
TcParseTableBase
*
table
)
;
static
StringPiece
FieldName
(
const
TcParseTableBase
*
table
const
TcParseTableBase
:
:
FieldEntry
*
)
;
static
bool
ChangeOneof
(
const
TcParseTableBase
*
table
const
TcParseTableBase
:
:
FieldEntry
&
entry
uint32_t
field_num
ParseContext
*
ctx
MessageLite
*
msg
)
;
static
void
ReportFastUtf8Error
(
uint32_t
decoded_tag
const
TcParseTableBase
*
table
)
;
static
bool
MpVerifyUtf8
(
StringPiece
wire_bytes
const
TcParseTableBase
*
table
const
TcParseTableBase
:
:
FieldEntry
&
entry
uint16_t
xform_val
)
;
friend
class
FindFieldEntryTest
;
static
constexpr
const
uint32_t
kMtSmallScanSize
=
4
;
static
const
char
*
MpVarint
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpRepeatedVarint
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpPackedVarint
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpFixed
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpRepeatedFixed
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpPackedFixed
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpString
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpRepeatedString
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpMessage
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpRepeatedMessage
(
PROTOBUF_TC_PARAM_DECL
)
;
static
const
char
*
MpMap
(
PROTOBUF_TC_PARAM_DECL
)
;
}
;
}
}
}
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
#
endif
