#
ifndef
GOOGLE_PROTOBUF_INLINED_STRING_FIELD_H__
#
define
GOOGLE_PROTOBUF_INLINED_STRING_FIELD_H__
#
include
<
string
>
#
include
<
utility
>
#
include
<
google
/
protobuf
/
port
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
strutil
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
#
ifdef
SWIG
#
error
"
You
cannot
SWIG
proto
headers
"
#
endif
namespace
google
{
namespace
protobuf
{
class
Arena
;
namespace
internal
{
class
PROTOBUF_EXPORT
InlinedStringField
{
public
:
InlinedStringField
(
)
PROTOBUF_ALWAYS_INLINE
;
explicit
InlinedStringField
(
const
std
:
:
string
&
default_value
)
;
void
AssignWithDefault
(
const
std
:
:
string
*
default_value
const
InlinedStringField
&
from
)
PROTOBUF_ALWAYS_INLINE
;
void
ClearToEmpty
(
const
std
:
:
string
*
default_value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
ClearToEmptyNoArena
(
default_value
)
;
}
void
ClearNonDefaultToEmpty
(
)
PROTOBUF_ALWAYS_INLINE
{
ClearNonDefaultToEmptyNoArena
(
)
;
}
void
ClearToEmptyNoArena
(
const
std
:
:
string
*
)
PROTOBUF_ALWAYS_INLINE
{
ClearNonDefaultToEmptyNoArena
(
)
;
}
void
ClearNonDefaultToEmptyNoArena
(
)
PROTOBUF_ALWAYS_INLINE
;
void
ClearToDefault
(
const
std
:
:
string
*
default_value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
ClearToDefaultNoArena
(
default_value
)
;
}
void
ClearToDefaultNoArena
(
const
std
:
:
string
*
default_value
)
PROTOBUF_ALWAYS_INLINE
;
void
Destroy
(
const
std
:
:
string
*
default_value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
DestroyNoArena
(
default_value
)
;
}
void
DestroyNoArena
(
const
std
:
:
string
*
default_value
)
PROTOBUF_ALWAYS_INLINE
;
const
std
:
:
string
&
Get
(
)
const
PROTOBUF_ALWAYS_INLINE
{
return
GetNoArena
(
)
;
}
const
std
:
:
string
&
GetNoArena
(
)
const
PROTOBUF_ALWAYS_INLINE
;
std
:
:
string
*
Mutable
(
const
std
:
:
string
*
default_value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
return
MutableNoArena
(
default_value
)
;
}
std
:
:
string
*
MutableNoArena
(
const
std
:
:
string
*
default_value
)
PROTOBUF_ALWAYS_INLINE
;
std
:
:
string
*
Release
(
const
std
:
:
string
*
default_value
Arena
*
)
{
return
ReleaseNoArena
(
default_value
)
;
}
std
:
:
string
*
ReleaseNonDefault
(
const
std
:
:
string
*
default_value
Arena
*
)
{
return
ReleaseNonDefaultNoArena
(
default_value
)
;
}
std
:
:
string
*
ReleaseNoArena
(
const
std
:
:
string
*
default_value
)
{
return
ReleaseNonDefaultNoArena
(
default_value
)
;
}
std
:
:
string
*
ReleaseNonDefaultNoArena
(
const
std
:
:
string
*
default_value
)
;
void
Set
(
const
std
:
:
string
*
default_value
StringPiece
value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
SetNoArena
(
default_value
value
)
;
}
void
SetLite
(
const
std
:
:
string
*
default_value
StringPiece
value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
SetNoArena
(
default_value
value
)
;
}
void
SetNoArena
(
const
std
:
:
string
*
default_value
StringPiece
value
)
PROTOBUF_ALWAYS_INLINE
;
void
Set
(
const
std
:
:
string
*
default_value
const
std
:
:
string
&
value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
SetNoArena
(
default_value
value
)
;
}
void
SetLite
(
const
std
:
:
string
*
default_value
const
std
:
:
string
&
value
Arena
*
)
PROTOBUF_ALWAYS_INLINE
{
SetNoArena
(
default_value
value
)
;
}
void
SetNoArena
(
const
std
:
:
string
*
default_value
const
std
:
:
string
&
value
)
PROTOBUF_ALWAYS_INLINE
;
void
SetNoArena
(
const
std
:
:
string
*
default_value
std
:
:
string
&
&
value
)
PROTOBUF_ALWAYS_INLINE
;
void
SetAllocated
(
const
std
:
:
string
*
default_value
std
:
:
string
*
value
Arena
*
)
{
SetAllocatedNoArena
(
default_value
value
)
;
}
void
SetAllocatedNoArena
(
const
std
:
:
string
*
default_value
std
:
:
string
*
value
)
;
void
Swap
(
InlinedStringField
*
from
)
PROTOBUF_ALWAYS_INLINE
;
std
:
:
string
*
UnsafeMutablePointer
(
)
;
void
UnsafeSetDefault
(
const
std
:
:
string
*
default_value
)
;
std
:
:
string
*
UnsafeArenaRelease
(
const
std
:
:
string
*
default_value
Arena
*
arena
)
;
void
UnsafeArenaSetAllocated
(
const
std
:
:
string
*
default_value
std
:
:
string
*
value
Arena
*
arena
)
;
bool
IsDefault
(
const
std
:
:
string
*
)
{
return
false
;
}
private
:
std
:
:
string
value_
;
}
;
inline
InlinedStringField
:
:
InlinedStringField
(
)
{
}
inline
InlinedStringField
:
:
InlinedStringField
(
const
std
:
:
string
&
default_value
)
:
value_
(
default_value
)
{
}
inline
void
InlinedStringField
:
:
AssignWithDefault
(
const
std
:
:
string
*
const
InlinedStringField
&
from
)
{
value_
=
from
.
value_
;
}
inline
const
std
:
:
string
&
InlinedStringField
:
:
GetNoArena
(
)
const
{
return
value_
;
}
inline
std
:
:
string
*
InlinedStringField
:
:
MutableNoArena
(
const
std
:
:
string
*
)
{
return
&
value_
;
}
inline
void
InlinedStringField
:
:
SetAllocatedNoArena
(
const
std
:
:
string
*
default_value
std
:
:
string
*
value
)
{
if
(
value
=
=
NULL
)
{
value_
.
assign
(
*
default_value
)
;
}
else
{
value_
.
assign
(
std
:
:
move
(
*
value
)
)
;
delete
value
;
}
}
inline
void
InlinedStringField
:
:
DestroyNoArena
(
const
std
:
:
string
*
)
{
this
-
>
~
InlinedStringField
(
)
;
}
inline
void
InlinedStringField
:
:
ClearNonDefaultToEmptyNoArena
(
)
{
value_
.
clear
(
)
;
}
inline
void
InlinedStringField
:
:
ClearToDefaultNoArena
(
const
std
:
:
string
*
default_value
)
{
value_
.
assign
(
*
default_value
)
;
}
inline
std
:
:
string
*
InlinedStringField
:
:
ReleaseNonDefaultNoArena
(
const
std
:
:
string
*
default_value
)
{
std
:
:
string
*
released
=
new
std
:
:
string
(
*
default_value
)
;
value_
.
swap
(
*
released
)
;
return
released
;
}
inline
void
InlinedStringField
:
:
SetNoArena
(
const
std
:
:
string
*
StringPiece
value
)
{
value_
.
assign
(
value
.
data
(
)
value
.
length
(
)
)
;
}
inline
void
InlinedStringField
:
:
SetNoArena
(
const
std
:
:
string
*
const
std
:
:
string
&
value
)
{
value_
.
assign
(
value
)
;
}
inline
void
InlinedStringField
:
:
SetNoArena
(
const
std
:
:
string
*
std
:
:
string
&
&
value
)
{
value_
.
assign
(
std
:
:
move
(
value
)
)
;
}
inline
void
InlinedStringField
:
:
Swap
(
InlinedStringField
*
from
)
{
value_
.
swap
(
from
-
>
value_
)
;
}
inline
std
:
:
string
*
InlinedStringField
:
:
UnsafeMutablePointer
(
)
{
return
&
value_
;
}
inline
void
InlinedStringField
:
:
UnsafeSetDefault
(
const
std
:
:
string
*
default_value
)
{
value_
.
assign
(
*
default_value
)
;
}
inline
std
:
:
string
*
InlinedStringField
:
:
UnsafeArenaRelease
(
const
std
:
:
string
*
default_value
Arena
*
)
{
return
ReleaseNoArena
(
default_value
)
;
}
inline
void
InlinedStringField
:
:
UnsafeArenaSetAllocated
(
const
std
:
:
string
*
default_value
std
:
:
string
*
value
Arena
*
)
{
if
(
value
=
=
NULL
)
{
value_
.
assign
(
*
default_value
)
;
}
else
{
value_
.
assign
(
*
value
)
;
}
}
}
}
}
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
#
endif
