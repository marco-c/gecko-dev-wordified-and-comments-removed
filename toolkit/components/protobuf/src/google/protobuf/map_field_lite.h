#
ifndef
GOOGLE_PROTOBUF_MAP_FIELD_LITE_H__
#
define
GOOGLE_PROTOBUF_MAP_FIELD_LITE_H__
#
include
<
type_traits
>
#
include
<
google
/
protobuf
/
parse_context
.
h
>
#
include
<
google
/
protobuf
/
io
/
coded_stream
.
h
>
#
include
<
google
/
protobuf
/
map
.
h
>
#
include
<
google
/
protobuf
/
map_entry_lite
.
h
>
#
include
<
google
/
protobuf
/
port
.
h
>
#
include
<
google
/
protobuf
/
wire_format_lite
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
#
ifdef
SWIG
#
error
"
You
cannot
SWIG
proto
headers
"
#
endif
namespace
google
{
namespace
protobuf
{
namespace
internal
{
template
<
typename
Derived
typename
Key
typename
T
WireFormatLite
:
:
FieldType
key_wire_type
WireFormatLite
:
:
FieldType
value_wire_type
int
default_enum_value
=
0
>
class
MapFieldLite
{
typedef
Derived
EntryType
;
public
:
typedef
Map
<
Key
T
>
MapType
;
typedef
EntryType
EntryTypeTrait
;
MapFieldLite
(
)
{
SetDefaultEnumValue
(
)
;
}
explicit
MapFieldLite
(
Arena
*
arena
)
:
map_
(
arena
)
{
SetDefaultEnumValue
(
)
;
}
const
Map
<
Key
T
>
&
GetMap
(
)
const
{
return
map_
;
}
Map
<
Key
T
>
*
MutableMap
(
)
{
return
&
map_
;
}
int
size
(
)
const
{
return
static_cast
<
int
>
(
map_
.
size
(
)
)
;
}
void
Clear
(
)
{
return
map_
.
clear
(
)
;
}
void
MergeFrom
(
const
MapFieldLite
&
other
)
{
for
(
typename
Map
<
Key
T
>
:
:
const_iterator
it
=
other
.
map_
.
begin
(
)
;
it
!
=
other
.
map_
.
end
(
)
;
+
+
it
)
{
map_
[
it
-
>
first
]
=
it
-
>
second
;
}
}
void
Swap
(
MapFieldLite
*
other
)
{
map_
.
swap
(
other
-
>
map_
)
;
}
void
SetDefaultEnumValue
(
)
{
MutableMap
(
)
-
>
SetDefaultEnumValue
(
default_enum_value
)
;
}
EntryType
*
NewEntry
(
)
const
{
return
Arena
:
:
CreateMessage
<
EntryType
>
(
map_
.
arena_
)
;
}
EntryType
*
NewEnumEntryWrapper
(
const
Key
&
key
const
T
t
)
const
{
return
EntryType
:
:
EnumWrap
(
key
t
map_
.
arena_
)
;
}
EntryType
*
NewEntryWrapper
(
const
Key
&
key
const
T
&
t
)
const
{
return
EntryType
:
:
Wrap
(
key
t
map_
.
arena_
)
;
}
const
char
*
_InternalParse
(
const
char
*
ptr
ParseContext
*
ctx
)
{
typename
Derived
:
:
template
Parser
<
MapFieldLite
Map
<
Key
T
>
>
parser
(
this
)
;
return
parser
.
_InternalParse
(
ptr
ctx
)
;
}
template
<
typename
Metadata
>
const
char
*
ParseWithEnumValidation
(
const
char
*
ptr
ParseContext
*
ctx
bool
(
*
is_valid
)
(
int
)
uint32
field_num
Metadata
*
metadata
)
{
typename
Derived
:
:
template
Parser
<
MapFieldLite
Map
<
Key
T
>
>
parser
(
this
)
;
return
parser
.
ParseWithEnumValidation
(
ptr
ctx
is_valid
field_num
metadata
)
;
}
private
:
typedef
void
DestructorSkippable_
;
Map
<
Key
T
>
map_
;
friend
class
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
;
}
;
template
<
typename
T
typename
Metadata
>
struct
EnumParseWrapper
{
const
char
*
_InternalParse
(
const
char
*
ptr
ParseContext
*
ctx
)
{
return
map_field
-
>
ParseWithEnumValidation
(
ptr
ctx
is_valid
field_num
metadata
)
;
}
T
*
map_field
;
bool
(
*
is_valid
)
(
int
)
;
uint32
field_num
;
Metadata
*
metadata
;
}
;
template
<
typename
T
typename
Metadata
>
EnumParseWrapper
<
T
Metadata
>
InitEnumParseWrapper
(
T
*
map_field
bool
(
*
is_valid
)
(
int
)
uint32
field_num
Metadata
*
metadata
)
{
return
EnumParseWrapper
<
T
Metadata
>
{
map_field
is_valid
field_num
metadata
}
;
}
template
<
typename
Derived
typename
Key
typename
T
WireFormatLite
:
:
FieldType
key_wire_type
WireFormatLite
:
:
FieldType
value_wire_type
int
default_enum_value
>
bool
AllAreInitialized
(
const
MapFieldLite
<
Derived
Key
T
key_wire_type
value_wire_type
default_enum_value
>
&
field
)
{
const
auto
&
t
=
field
.
GetMap
(
)
;
for
(
typename
Map
<
Key
T
>
:
:
const_iterator
it
=
t
.
begin
(
)
;
it
!
=
t
.
end
(
)
;
+
+
it
)
{
if
(
!
it
-
>
second
.
IsInitialized
(
)
)
return
false
;
}
return
true
;
}
template
<
typename
MEntry
>
struct
MapEntryToMapField
:
MapEntryToMapField
<
typename
MEntry
:
:
SuperType
>
{
}
;
template
<
typename
T
typename
Key
typename
Value
WireFormatLite
:
:
FieldType
kKeyFieldType
WireFormatLite
:
:
FieldType
kValueFieldType
int
default_enum_value
>
struct
MapEntryToMapField
<
MapEntryLite
<
T
Key
Value
kKeyFieldType
kValueFieldType
default_enum_value
>
>
{
typedef
MapFieldLite
<
MapEntryLite
<
T
Key
Value
kKeyFieldType
kValueFieldType
default_enum_value
>
Key
Value
kKeyFieldType
kValueFieldType
default_enum_value
>
MapFieldType
;
}
;
}
}
}
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
#
endif
