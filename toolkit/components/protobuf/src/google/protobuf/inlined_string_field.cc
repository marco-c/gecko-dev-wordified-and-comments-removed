#
include
<
google
/
protobuf
/
inlined_string_field
.
h
>
#
include
<
google
/
protobuf
/
arena
.
h
>
#
include
<
google
/
protobuf
/
arenastring
.
h
>
#
include
<
google
/
protobuf
/
generated_message_util
.
h
>
#
include
<
google
/
protobuf
/
message_lite
.
h
>
#
include
<
google
/
protobuf
/
parse_context
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
namespace
google
{
namespace
protobuf
{
namespace
internal
{
std
:
:
string
*
InlinedStringField
:
:
Mutable
(
const
LazyString
&
Arena
*
arena
bool
donated
uint32_t
*
donating_states
uint32_t
mask
MessageLite
*
msg
)
{
if
(
arena
=
=
nullptr
|
|
!
donated
)
{
return
UnsafeMutablePointer
(
)
;
}
return
MutableSlow
(
arena
donated
donating_states
mask
msg
)
;
}
std
:
:
string
*
InlinedStringField
:
:
Mutable
(
Arena
*
arena
bool
donated
uint32_t
*
donating_states
uint32_t
mask
MessageLite
*
msg
)
{
if
(
arena
=
=
nullptr
|
|
!
donated
)
{
return
UnsafeMutablePointer
(
)
;
}
return
MutableSlow
(
arena
donated
donating_states
mask
msg
)
;
}
std
:
:
string
*
InlinedStringField
:
:
MutableSlow
(
:
:
google
:
:
protobuf
:
:
Arena
*
arena
bool
donated
uint32_t
*
donating_states
uint32_t
mask
MessageLite
*
msg
)
{
(
void
)
mask
;
(
void
)
msg
;
return
UnsafeMutablePointer
(
)
;
}
void
InlinedStringField
:
:
SetAllocated
(
const
std
:
:
string
*
default_value
std
:
:
string
*
value
Arena
*
arena
bool
donated
uint32_t
*
donating_states
uint32_t
mask
MessageLite
*
msg
)
{
(
void
)
mask
;
(
void
)
msg
;
SetAllocatedNoArena
(
default_value
value
)
;
}
void
InlinedStringField
:
:
Set
(
std
:
:
string
&
&
value
Arena
*
arena
bool
donated
uint32_t
*
donating_states
uint32_t
mask
MessageLite
*
msg
)
{
(
void
)
donating_states
;
(
void
)
mask
;
(
void
)
msg
;
SetNoArena
(
std
:
:
move
(
value
)
)
;
}
std
:
:
string
*
InlinedStringField
:
:
Release
(
)
{
auto
*
released
=
new
std
:
:
string
(
std
:
:
move
(
*
get_mutable
(
)
)
)
;
get_mutable
(
)
-
>
clear
(
)
;
return
released
;
}
std
:
:
string
*
InlinedStringField
:
:
Release
(
Arena
*
arena
bool
donated
)
{
std
:
:
string
*
released
=
(
arena
!
=
nullptr
&
&
donated
)
?
new
std
:
:
string
(
*
get_mutable
(
)
)
:
new
std
:
:
string
(
std
:
:
move
(
*
get_mutable
(
)
)
)
;
get_mutable
(
)
-
>
clear
(
)
;
return
released
;
}
void
InlinedStringField
:
:
ClearToDefault
(
const
LazyString
&
default_value
Arena
*
arena
bool
donated
)
{
(
void
)
arena
;
get_mutable
(
)
-
>
assign
(
default_value
.
get
(
)
)
;
}
}
}
}
