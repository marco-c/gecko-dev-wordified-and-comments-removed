#
ifndef
GOOGLE_PROTOBUF_EXTENSION_SET_H__
#
define
GOOGLE_PROTOBUF_EXTENSION_SET_H__
#
include
<
algorithm
>
#
include
<
cassert
>
#
include
<
map
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
logging
.
h
>
#
include
<
google
/
protobuf
/
io
/
coded_stream
.
h
>
#
include
<
google
/
protobuf
/
port
.
h
>
#
include
<
google
/
protobuf
/
parse_context
.
h
>
#
include
<
google
/
protobuf
/
repeated_field
.
h
>
#
include
<
google
/
protobuf
/
wire_format_lite
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
#
ifdef
SWIG
#
error
"
You
cannot
SWIG
proto
headers
"
#
endif
namespace
google
{
namespace
protobuf
{
class
Arena
;
class
Descriptor
;
class
FieldDescriptor
;
class
DescriptorPool
;
class
MessageLite
;
class
Message
;
class
MessageFactory
;
class
Reflection
;
class
UnknownFieldSet
;
namespace
internal
{
class
FieldSkipper
;
enum
class
LazyVerifyOption
;
}
}
}
namespace
google
{
namespace
protobuf
{
namespace
internal
{
class
InternalMetadata
;
typedef
uint8_t
FieldType
;
typedef
bool
EnumValidityFunc
(
int
number
)
;
typedef
bool
EnumValidityFuncWithArg
(
const
void
*
arg
int
number
)
;
struct
ExtensionInfo
{
constexpr
ExtensionInfo
(
)
:
enum_validity_check
(
)
{
}
constexpr
ExtensionInfo
(
const
MessageLite
*
extendee
int
param_number
FieldType
type_param
bool
isrepeated
bool
ispacked
LazyEagerVerifyFnType
verify_func
)
:
message
(
extendee
)
number
(
param_number
)
type
(
type_param
)
is_repeated
(
isrepeated
)
is_packed
(
ispacked
)
enum_validity_check
(
)
lazy_eager_verify_func
(
verify_func
)
{
}
const
MessageLite
*
message
=
nullptr
;
int
number
=
0
;
FieldType
type
=
0
;
bool
is_repeated
=
false
;
bool
is_packed
=
false
;
struct
EnumValidityCheck
{
EnumValidityFuncWithArg
*
func
;
const
void
*
arg
;
}
;
struct
MessageInfo
{
const
MessageLite
*
prototype
;
}
;
union
{
EnumValidityCheck
enum_validity_check
;
MessageInfo
message_info
;
}
;
const
FieldDescriptor
*
descriptor
=
nullptr
;
LazyEagerVerifyFnType
lazy_eager_verify_func
=
nullptr
;
}
;
class
PROTOBUF_EXPORT
GeneratedExtensionFinder
{
public
:
explicit
GeneratedExtensionFinder
(
const
MessageLite
*
extendee
)
:
extendee_
(
extendee
)
{
}
bool
Find
(
int
number
ExtensionInfo
*
output
)
;
private
:
const
MessageLite
*
extendee_
;
}
;
class
PROTOBUF_EXPORT
ExtensionSet
{
public
:
constexpr
ExtensionSet
(
)
;
explicit
ExtensionSet
(
Arena
*
arena
)
;
ExtensionSet
(
ArenaInitialized
Arena
*
arena
)
:
ExtensionSet
(
arena
)
{
}
~
ExtensionSet
(
)
;
static
void
RegisterExtension
(
const
MessageLite
*
extendee
int
number
FieldType
type
bool
is_repeated
bool
is_packed
LazyEagerVerifyFnType
verify_func
)
;
static
void
RegisterEnumExtension
(
const
MessageLite
*
extendee
int
number
FieldType
type
bool
is_repeated
bool
is_packed
EnumValidityFunc
*
is_valid
)
;
static
void
RegisterMessageExtension
(
const
MessageLite
*
extendee
int
number
FieldType
type
bool
is_repeated
bool
is_packed
const
MessageLite
*
prototype
LazyEagerVerifyFnType
verify_func
)
;
void
AppendToList
(
const
Descriptor
*
extendee
const
DescriptorPool
*
pool
std
:
:
vector
<
const
FieldDescriptor
*
>
*
output
)
const
;
bool
Has
(
int
number
)
const
;
int
ExtensionSize
(
int
number
)
const
;
int
NumExtensions
(
)
const
;
FieldType
ExtensionType
(
int
number
)
const
;
void
ClearExtension
(
int
number
)
;
int32_t
GetInt32
(
int
number
int32_t
default_value
)
const
;
int64_t
GetInt64
(
int
number
int64_t
default_value
)
const
;
uint32_t
GetUInt32
(
int
number
uint32_t
default_value
)
const
;
uint64_t
GetUInt64
(
int
number
uint64_t
default_value
)
const
;
float
GetFloat
(
int
number
float
default_value
)
const
;
double
GetDouble
(
int
number
double
default_value
)
const
;
bool
GetBool
(
int
number
bool
default_value
)
const
;
int
GetEnum
(
int
number
int
default_value
)
const
;
const
std
:
:
string
&
GetString
(
int
number
const
std
:
:
string
&
default_value
)
const
;
const
MessageLite
&
GetMessage
(
int
number
const
MessageLite
&
default_value
)
const
;
const
MessageLite
&
GetMessage
(
int
number
const
Descriptor
*
message_type
MessageFactory
*
factory
)
const
;
#
define
desc
const
FieldDescriptor
*
descriptor
/
/
avoid
line
wrapping
void
SetInt32
(
int
number
FieldType
type
int32_t
value
desc
)
;
void
SetInt64
(
int
number
FieldType
type
int64_t
value
desc
)
;
void
SetUInt32
(
int
number
FieldType
type
uint32_t
value
desc
)
;
void
SetUInt64
(
int
number
FieldType
type
uint64_t
value
desc
)
;
void
SetFloat
(
int
number
FieldType
type
float
value
desc
)
;
void
SetDouble
(
int
number
FieldType
type
double
value
desc
)
;
void
SetBool
(
int
number
FieldType
type
bool
value
desc
)
;
void
SetEnum
(
int
number
FieldType
type
int
value
desc
)
;
void
SetString
(
int
number
FieldType
type
std
:
:
string
value
desc
)
;
std
:
:
string
*
MutableString
(
int
number
FieldType
type
desc
)
;
MessageLite
*
MutableMessage
(
int
number
FieldType
type
const
MessageLite
&
prototype
desc
)
;
MessageLite
*
MutableMessage
(
const
FieldDescriptor
*
descriptor
MessageFactory
*
factory
)
;
void
SetAllocatedMessage
(
int
number
FieldType
type
const
FieldDescriptor
*
descriptor
MessageLite
*
message
)
;
void
UnsafeArenaSetAllocatedMessage
(
int
number
FieldType
type
const
FieldDescriptor
*
descriptor
MessageLite
*
message
)
;
PROTOBUF_NODISCARD
MessageLite
*
ReleaseMessage
(
int
number
const
MessageLite
&
prototype
)
;
MessageLite
*
UnsafeArenaReleaseMessage
(
int
number
const
MessageLite
&
prototype
)
;
PROTOBUF_NODISCARD
MessageLite
*
ReleaseMessage
(
const
FieldDescriptor
*
descriptor
MessageFactory
*
factory
)
;
MessageLite
*
UnsafeArenaReleaseMessage
(
const
FieldDescriptor
*
descriptor
MessageFactory
*
factory
)
;
#
undef
desc
Arena
*
GetArena
(
)
const
{
return
arena_
;
}
const
void
*
GetRawRepeatedField
(
int
number
const
void
*
default_value
)
const
;
void
*
MutableRawRepeatedField
(
int
number
FieldType
field_type
bool
packed
const
FieldDescriptor
*
desc
)
;
void
*
MutableRawRepeatedField
(
int
number
)
;
int32_t
GetRepeatedInt32
(
int
number
int
index
)
const
;
int64_t
GetRepeatedInt64
(
int
number
int
index
)
const
;
uint32_t
GetRepeatedUInt32
(
int
number
int
index
)
const
;
uint64_t
GetRepeatedUInt64
(
int
number
int
index
)
const
;
float
GetRepeatedFloat
(
int
number
int
index
)
const
;
double
GetRepeatedDouble
(
int
number
int
index
)
const
;
bool
GetRepeatedBool
(
int
number
int
index
)
const
;
int
GetRepeatedEnum
(
int
number
int
index
)
const
;
const
std
:
:
string
&
GetRepeatedString
(
int
number
int
index
)
const
;
const
MessageLite
&
GetRepeatedMessage
(
int
number
int
index
)
const
;
void
SetRepeatedInt32
(
int
number
int
index
int32_t
value
)
;
void
SetRepeatedInt64
(
int
number
int
index
int64_t
value
)
;
void
SetRepeatedUInt32
(
int
number
int
index
uint32_t
value
)
;
void
SetRepeatedUInt64
(
int
number
int
index
uint64_t
value
)
;
void
SetRepeatedFloat
(
int
number
int
index
float
value
)
;
void
SetRepeatedDouble
(
int
number
int
index
double
value
)
;
void
SetRepeatedBool
(
int
number
int
index
bool
value
)
;
void
SetRepeatedEnum
(
int
number
int
index
int
value
)
;
void
SetRepeatedString
(
int
number
int
index
std
:
:
string
value
)
;
std
:
:
string
*
MutableRepeatedString
(
int
number
int
index
)
;
MessageLite
*
MutableRepeatedMessage
(
int
number
int
index
)
;
#
define
desc
const
FieldDescriptor
*
descriptor
/
/
avoid
line
wrapping
void
AddInt32
(
int
number
FieldType
type
bool
packed
int32_t
value
desc
)
;
void
AddInt64
(
int
number
FieldType
type
bool
packed
int64_t
value
desc
)
;
void
AddUInt32
(
int
number
FieldType
type
bool
packed
uint32_t
value
desc
)
;
void
AddUInt64
(
int
number
FieldType
type
bool
packed
uint64_t
value
desc
)
;
void
AddFloat
(
int
number
FieldType
type
bool
packed
float
value
desc
)
;
void
AddDouble
(
int
number
FieldType
type
bool
packed
double
value
desc
)
;
void
AddBool
(
int
number
FieldType
type
bool
packed
bool
value
desc
)
;
void
AddEnum
(
int
number
FieldType
type
bool
packed
int
value
desc
)
;
void
AddString
(
int
number
FieldType
type
std
:
:
string
value
desc
)
;
std
:
:
string
*
AddString
(
int
number
FieldType
type
desc
)
;
MessageLite
*
AddMessage
(
int
number
FieldType
type
const
MessageLite
&
prototype
desc
)
;
MessageLite
*
AddMessage
(
const
FieldDescriptor
*
descriptor
MessageFactory
*
factory
)
;
void
AddAllocatedMessage
(
const
FieldDescriptor
*
descriptor
MessageLite
*
new_entry
)
;
void
UnsafeArenaAddAllocatedMessage
(
const
FieldDescriptor
*
descriptor
MessageLite
*
new_entry
)
;
#
undef
desc
void
RemoveLast
(
int
number
)
;
PROTOBUF_NODISCARD
MessageLite
*
ReleaseLast
(
int
number
)
;
MessageLite
*
UnsafeArenaReleaseLast
(
int
number
)
;
void
SwapElements
(
int
number
int
index1
int
index2
)
;
void
Clear
(
)
;
void
MergeFrom
(
const
MessageLite
*
extendee
const
ExtensionSet
&
other
)
;
void
Swap
(
const
MessageLite
*
extendee
ExtensionSet
*
other
)
;
void
InternalSwap
(
ExtensionSet
*
other
)
;
void
SwapExtension
(
const
MessageLite
*
extendee
ExtensionSet
*
other
int
number
)
;
void
UnsafeShallowSwapExtension
(
ExtensionSet
*
other
int
number
)
;
bool
IsInitialized
(
)
const
;
const
char
*
ParseField
(
uint64_t
tag
const
char
*
ptr
const
MessageLite
*
extendee
internal
:
:
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
;
const
char
*
ParseField
(
uint64_t
tag
const
char
*
ptr
const
Message
*
extendee
internal
:
:
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
;
template
<
typename
Msg
>
const
char
*
ParseMessageSet
(
const
char
*
ptr
const
Msg
*
extendee
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
{
struct
MessageSetItem
{
const
char
*
_InternalParse
(
const
char
*
ptr
ParseContext
*
ctx
)
{
return
me
-
>
ParseMessageSetItem
(
ptr
extendee
metadata
ctx
)
;
}
ExtensionSet
*
me
;
const
Msg
*
extendee
;
InternalMetadata
*
metadata
;
}
item
{
this
extendee
metadata
}
;
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
ReadTag
(
ptr
&
tag
)
;
GOOGLE_PROTOBUF_PARSER_ASSERT
(
ptr
)
;
if
(
tag
=
=
WireFormatLite
:
:
kMessageSetItemStartTag
)
{
ptr
=
ctx
-
>
ParseGroup
(
&
item
ptr
tag
)
;
GOOGLE_PROTOBUF_PARSER_ASSERT
(
ptr
)
;
}
else
{
if
(
tag
=
=
0
|
|
(
tag
&
7
)
=
=
4
)
{
ctx
-
>
SetLastTag
(
tag
)
;
return
ptr
;
}
ptr
=
ParseField
(
tag
ptr
extendee
metadata
ctx
)
;
GOOGLE_PROTOBUF_PARSER_ASSERT
(
ptr
)
;
}
}
return
ptr
;
}
void
SerializeWithCachedSizes
(
const
MessageLite
*
extendee
int
start_field_number
int
end_field_number
io
:
:
CodedOutputStream
*
output
)
const
{
output
-
>
SetCur
(
_InternalSerialize
(
extendee
start_field_number
end_field_number
output
-
>
Cur
(
)
output
-
>
EpsCopy
(
)
)
)
;
}
uint8_t
*
_InternalSerialize
(
const
MessageLite
*
extendee
int
start_field_number
int
end_field_number
uint8_t
*
target
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
if
(
flat_size_
=
=
0
)
{
assert
(
!
is_large
(
)
)
;
return
target
;
}
return
_InternalSerializeImpl
(
extendee
start_field_number
end_field_number
target
stream
)
;
}
void
SerializeMessageSetWithCachedSizes
(
const
MessageLite
*
extendee
io
:
:
CodedOutputStream
*
output
)
const
{
output
-
>
SetCur
(
InternalSerializeMessageSetWithCachedSizesToArray
(
extendee
output
-
>
Cur
(
)
output
-
>
EpsCopy
(
)
)
)
;
}
uint8_t
*
InternalSerializeMessageSetWithCachedSizesToArray
(
const
MessageLite
*
extendee
uint8_t
*
target
io
:
:
EpsCopyOutputStream
*
stream
)
const
;
uint8_t
*
SerializeWithCachedSizesToArray
(
int
start_field_number
int
end_field_number
uint8_t
*
target
)
const
;
uint8_t
*
SerializeMessageSetWithCachedSizesToArray
(
const
MessageLite
*
extendee
uint8_t
*
target
)
const
;
size_t
ByteSize
(
)
const
;
size_t
MessageSetByteSize
(
)
const
;
size_t
SpaceUsedExcludingSelfLong
(
)
const
;
int
SpaceUsedExcludingSelf
(
)
const
;
private
:
template
<
typename
Type
>
friend
class
PrimitiveTypeTraits
;
template
<
typename
Type
>
friend
class
RepeatedPrimitiveTypeTraits
;
template
<
typename
Type
bool
IsValid
(
int
)
>
friend
class
EnumTypeTraits
;
template
<
typename
Type
bool
IsValid
(
int
)
>
friend
class
RepeatedEnumTypeTraits
;
friend
class
google
:
:
protobuf
:
:
Reflection
;
const
int32_t
&
GetRefInt32
(
int
number
const
int32_t
&
default_value
)
const
;
const
int64_t
&
GetRefInt64
(
int
number
const
int64_t
&
default_value
)
const
;
const
uint32_t
&
GetRefUInt32
(
int
number
const
uint32_t
&
default_value
)
const
;
const
uint64_t
&
GetRefUInt64
(
int
number
const
uint64_t
&
default_value
)
const
;
const
float
&
GetRefFloat
(
int
number
const
float
&
default_value
)
const
;
const
double
&
GetRefDouble
(
int
number
const
double
&
default_value
)
const
;
const
bool
&
GetRefBool
(
int
number
const
bool
&
default_value
)
const
;
const
int
&
GetRefEnum
(
int
number
const
int
&
default_value
)
const
;
const
int32_t
&
GetRefRepeatedInt32
(
int
number
int
index
)
const
;
const
int64_t
&
GetRefRepeatedInt64
(
int
number
int
index
)
const
;
const
uint32_t
&
GetRefRepeatedUInt32
(
int
number
int
index
)
const
;
const
uint64_t
&
GetRefRepeatedUInt64
(
int
number
int
index
)
const
;
const
float
&
GetRefRepeatedFloat
(
int
number
int
index
)
const
;
const
double
&
GetRefRepeatedDouble
(
int
number
int
index
)
const
;
const
bool
&
GetRefRepeatedBool
(
int
number
int
index
)
const
;
const
int
&
GetRefRepeatedEnum
(
int
number
int
index
)
const
;
uint8_t
*
_InternalSerializeImpl
(
const
MessageLite
*
extendee
int
start_field_number
int
end_field_number
uint8_t
*
target
io
:
:
EpsCopyOutputStream
*
stream
)
const
;
class
PROTOBUF_EXPORT
LazyMessageExtension
{
public
:
LazyMessageExtension
(
)
{
}
virtual
~
LazyMessageExtension
(
)
{
}
virtual
LazyMessageExtension
*
New
(
Arena
*
arena
)
const
=
0
;
virtual
const
MessageLite
&
GetMessage
(
const
MessageLite
&
prototype
Arena
*
arena
)
const
=
0
;
virtual
MessageLite
*
MutableMessage
(
const
MessageLite
&
prototype
Arena
*
arena
)
=
0
;
virtual
void
SetAllocatedMessage
(
MessageLite
*
message
Arena
*
arena
)
=
0
;
virtual
void
UnsafeArenaSetAllocatedMessage
(
MessageLite
*
message
Arena
*
arena
)
=
0
;
PROTOBUF_NODISCARD
virtual
MessageLite
*
ReleaseMessage
(
const
MessageLite
&
prototype
Arena
*
arena
)
=
0
;
virtual
MessageLite
*
UnsafeArenaReleaseMessage
(
const
MessageLite
&
prototype
Arena
*
arena
)
=
0
;
virtual
bool
IsInitialized
(
)
const
=
0
;
PROTOBUF_DEPRECATED_MSG
(
"
Please
use
ByteSizeLong
(
)
instead
"
)
virtual
int
ByteSize
(
)
const
{
return
internal
:
:
ToIntSize
(
ByteSizeLong
(
)
)
;
}
virtual
size_t
ByteSizeLong
(
)
const
=
0
;
virtual
size_t
SpaceUsedLong
(
)
const
=
0
;
virtual
void
MergeFrom
(
const
MessageLite
*
prototype
const
LazyMessageExtension
&
other
Arena
*
arena
)
=
0
;
virtual
void
MergeFromMessage
(
const
MessageLite
&
msg
Arena
*
arena
)
=
0
;
virtual
void
Clear
(
)
=
0
;
virtual
const
char
*
_InternalParse
(
const
Message
&
prototype
Arena
*
arena
LazyVerifyOption
option
const
char
*
ptr
ParseContext
*
ctx
)
=
0
;
virtual
uint8_t
*
WriteMessageToArray
(
const
MessageLite
*
prototype
int
number
uint8_t
*
target
io
:
:
EpsCopyOutputStream
*
stream
)
const
=
0
;
private
:
virtual
void
UnusedKeyMethod
(
)
;
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
LazyMessageExtension
)
;
}
;
friend
LazyMessageExtension
*
MaybeCreateLazyExtension
(
Arena
*
arena
)
;
struct
Extension
{
union
{
int32_t
int32_t_value
;
int64_t
int64_t_value
;
uint32_t
uint32_t_value
;
uint64_t
uint64_t_value
;
float
float_value
;
double
double_value
;
bool
bool_value
;
int
enum_value
;
std
:
:
string
*
string_value
;
MessageLite
*
message_value
;
LazyMessageExtension
*
lazymessage_value
;
RepeatedField
<
int32_t
>
*
repeated_int32_t_value
;
RepeatedField
<
int64_t
>
*
repeated_int64_t_value
;
RepeatedField
<
uint32_t
>
*
repeated_uint32_t_value
;
RepeatedField
<
uint64_t
>
*
repeated_uint64_t_value
;
RepeatedField
<
float
>
*
repeated_float_value
;
RepeatedField
<
double
>
*
repeated_double_value
;
RepeatedField
<
bool
>
*
repeated_bool_value
;
RepeatedField
<
int
>
*
repeated_enum_value
;
RepeatedPtrField
<
std
:
:
string
>
*
repeated_string_value
;
RepeatedPtrField
<
MessageLite
>
*
repeated_message_value
;
}
;
FieldType
type
;
bool
is_repeated
;
bool
is_cleared
:
4
;
bool
is_lazy
:
4
;
bool
is_packed
;
mutable
int
cached_size
;
const
FieldDescriptor
*
descriptor
;
uint8_t
*
InternalSerializeFieldWithCachedSizesToArray
(
const
MessageLite
*
extendee
const
ExtensionSet
*
extension_set
int
number
uint8_t
*
target
io
:
:
EpsCopyOutputStream
*
stream
)
const
;
uint8_t
*
InternalSerializeMessageSetItemWithCachedSizesToArray
(
const
MessageLite
*
extendee
const
ExtensionSet
*
extension_set
int
number
uint8_t
*
target
io
:
:
EpsCopyOutputStream
*
stream
)
const
;
size_t
ByteSize
(
int
number
)
const
;
size_t
MessageSetItemByteSize
(
int
number
)
const
;
void
Clear
(
)
;
int
GetSize
(
)
const
;
void
Free
(
)
;
size_t
SpaceUsedExcludingSelfLong
(
)
const
;
bool
IsInitialized
(
)
const
;
}
;
struct
KeyValue
{
int
first
;
Extension
second
;
struct
FirstComparator
{
bool
operator
(
)
(
const
KeyValue
&
lhs
const
KeyValue
&
rhs
)
const
{
return
lhs
.
first
<
rhs
.
first
;
}
bool
operator
(
)
(
const
KeyValue
&
lhs
int
key
)
const
{
return
lhs
.
first
<
key
;
}
bool
operator
(
)
(
int
key
const
KeyValue
&
rhs
)
const
{
return
key
<
rhs
.
first
;
}
}
;
}
;
typedef
std
:
:
map
<
int
Extension
>
LargeMap
;
const
Extension
*
FindOrNull
(
int
key
)
const
;
Extension
*
FindOrNull
(
int
key
)
;
const
Extension
*
FindOrNullInLargeMap
(
int
key
)
const
;
Extension
*
FindOrNullInLargeMap
(
int
key
)
;
std
:
:
pair
<
Extension
*
bool
>
Insert
(
int
key
)
;
void
GrowCapacity
(
size_t
minimum_new_capacity
)
;
static
constexpr
uint16_t
kMaximumFlatCapacity
=
256
;
bool
is_large
(
)
const
{
return
static_cast
<
int16_t
>
(
flat_size_
)
<
0
;
}
void
Erase
(
int
key
)
;
size_t
Size
(
)
const
{
return
PROTOBUF_PREDICT_FALSE
(
is_large
(
)
)
?
map_
.
large
-
>
size
(
)
:
flat_size_
;
}
template
<
typename
Iterator
typename
KeyValueFunctor
>
static
KeyValueFunctor
ForEach
(
Iterator
begin
Iterator
end
KeyValueFunctor
func
)
{
for
(
Iterator
it
=
begin
;
it
!
=
end
;
+
+
it
)
func
(
it
-
>
first
it
-
>
second
)
;
return
std
:
:
move
(
func
)
;
}
template
<
typename
KeyValueFunctor
>
KeyValueFunctor
ForEach
(
KeyValueFunctor
func
)
{
if
(
PROTOBUF_PREDICT_FALSE
(
is_large
(
)
)
)
{
return
ForEach
(
map_
.
large
-
>
begin
(
)
map_
.
large
-
>
end
(
)
std
:
:
move
(
func
)
)
;
}
return
ForEach
(
flat_begin
(
)
flat_end
(
)
std
:
:
move
(
func
)
)
;
}
template
<
typename
KeyValueFunctor
>
KeyValueFunctor
ForEach
(
KeyValueFunctor
func
)
const
{
if
(
PROTOBUF_PREDICT_FALSE
(
is_large
(
)
)
)
{
return
ForEach
(
map_
.
large
-
>
begin
(
)
map_
.
large
-
>
end
(
)
std
:
:
move
(
func
)
)
;
}
return
ForEach
(
flat_begin
(
)
flat_end
(
)
std
:
:
move
(
func
)
)
;
}
void
InternalExtensionMergeFrom
(
const
MessageLite
*
extendee
int
number
const
Extension
&
other_extension
Arena
*
other_arena
)
;
inline
static
bool
is_packable
(
WireFormatLite
:
:
WireType
type
)
{
switch
(
type
)
{
case
WireFormatLite
:
:
WIRETYPE_VARINT
:
case
WireFormatLite
:
:
WIRETYPE_FIXED64
:
case
WireFormatLite
:
:
WIRETYPE_FIXED32
:
return
true
;
case
WireFormatLite
:
:
WIRETYPE_LENGTH_DELIMITED
:
case
WireFormatLite
:
:
WIRETYPE_START_GROUP
:
case
WireFormatLite
:
:
WIRETYPE_END_GROUP
:
return
false
;
}
PROTOBUF_ASSUME
(
false
)
;
return
false
;
}
template
<
typename
ExtensionFinder
>
bool
FindExtensionInfoFromTag
(
uint32_t
tag
ExtensionFinder
*
extension_finder
int
*
field_number
ExtensionInfo
*
extension
bool
*
was_packed_on_wire
)
{
*
field_number
=
WireFormatLite
:
:
GetTagFieldNumber
(
tag
)
;
WireFormatLite
:
:
WireType
wire_type
=
WireFormatLite
:
:
GetTagWireType
(
tag
)
;
return
FindExtensionInfoFromFieldNumber
(
wire_type
*
field_number
extension_finder
extension
was_packed_on_wire
)
;
}
template
<
typename
ExtensionFinder
>
bool
FindExtensionInfoFromFieldNumber
(
int
wire_type
int
field_number
ExtensionFinder
*
extension_finder
ExtensionInfo
*
extension
bool
*
was_packed_on_wire
)
const
{
if
(
!
extension_finder
-
>
Find
(
field_number
extension
)
)
{
return
false
;
}
GOOGLE_DCHECK
(
extension
-
>
type
>
0
&
&
extension
-
>
type
<
=
WireFormatLite
:
:
MAX_FIELD_TYPE
)
;
auto
real_type
=
static_cast
<
WireFormatLite
:
:
FieldType
>
(
extension
-
>
type
)
;
WireFormatLite
:
:
WireType
expected_wire_type
=
WireFormatLite
:
:
WireTypeForFieldType
(
real_type
)
;
*
was_packed_on_wire
=
false
;
if
(
extension
-
>
is_repeated
&
&
wire_type
=
=
WireFormatLite
:
:
WIRETYPE_LENGTH_DELIMITED
&
&
is_packable
(
expected_wire_type
)
)
{
*
was_packed_on_wire
=
true
;
return
true
;
}
return
expected_wire_type
=
=
wire_type
;
}
const
MessageLite
*
GetPrototypeForLazyMessage
(
const
MessageLite
*
extendee
int
number
)
const
;
bool
HasLazy
(
int
number
)
const
;
bool
MaybeNewExtension
(
int
number
const
FieldDescriptor
*
descriptor
Extension
*
*
result
)
;
Extension
*
MaybeNewRepeatedExtension
(
const
FieldDescriptor
*
descriptor
)
;
bool
FindExtension
(
int
wire_type
uint32_t
field
const
MessageLite
*
extendee
const
internal
:
:
ParseContext
*
ExtensionInfo
*
extension
bool
*
was_packed_on_wire
)
{
GeneratedExtensionFinder
finder
(
extendee
)
;
return
FindExtensionInfoFromFieldNumber
(
wire_type
field
&
finder
extension
was_packed_on_wire
)
;
}
inline
bool
FindExtension
(
int
wire_type
uint32_t
field
const
Message
*
extendee
const
internal
:
:
ParseContext
*
ctx
ExtensionInfo
*
extension
bool
*
was_packed_on_wire
)
;
const
char
*
ParseFieldMaybeLazily
(
uint64_t
tag
const
char
*
ptr
const
MessageLite
*
extendee
internal
:
:
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
{
return
ParseField
(
tag
ptr
extendee
metadata
ctx
)
;
}
const
char
*
ParseFieldMaybeLazily
(
uint64_t
tag
const
char
*
ptr
const
Message
*
extendee
internal
:
:
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
;
const
char
*
ParseMessageSetItem
(
const
char
*
ptr
const
MessageLite
*
extendee
internal
:
:
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
;
const
char
*
ParseMessageSetItem
(
const
char
*
ptr
const
Message
*
extendee
internal
:
:
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
;
template
<
typename
T
>
const
char
*
ParseFieldWithExtensionInfo
(
int
number
bool
was_packed_on_wire
const
ExtensionInfo
&
info
internal
:
:
InternalMetadata
*
metadata
const
char
*
ptr
internal
:
:
ParseContext
*
ctx
)
;
template
<
typename
Msg
typename
T
>
const
char
*
ParseMessageSetItemTmpl
(
const
char
*
ptr
const
Msg
*
extendee
internal
:
:
InternalMetadata
*
metadata
internal
:
:
ParseContext
*
ctx
)
;
static
inline
size_t
RepeatedMessage_SpaceUsedExcludingSelfLong
(
RepeatedPtrFieldBase
*
field
)
;
KeyValue
*
flat_begin
(
)
{
assert
(
!
is_large
(
)
)
;
return
map_
.
flat
;
}
const
KeyValue
*
flat_begin
(
)
const
{
assert
(
!
is_large
(
)
)
;
return
map_
.
flat
;
}
KeyValue
*
flat_end
(
)
{
assert
(
!
is_large
(
)
)
;
return
map_
.
flat
+
flat_size_
;
}
const
KeyValue
*
flat_end
(
)
const
{
assert
(
!
is_large
(
)
)
;
return
map_
.
flat
+
flat_size_
;
}
Arena
*
arena_
;
uint16_t
flat_capacity_
;
uint16_t
flat_size_
;
union
AllocatedData
{
KeyValue
*
flat
;
LargeMap
*
large
;
}
map_
;
static
void
DeleteFlatMap
(
const
KeyValue
*
flat
uint16_t
flat_capacity
)
;
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
ExtensionSet
)
;
}
;
constexpr
ExtensionSet
:
:
ExtensionSet
(
)
:
arena_
(
nullptr
)
flat_capacity_
(
0
)
flat_size_
(
0
)
map_
{
nullptr
}
{
}
inline
void
ExtensionSet
:
:
SetString
(
int
number
FieldType
type
std
:
:
string
value
const
FieldDescriptor
*
descriptor
)
{
MutableString
(
number
type
descriptor
)
-
>
assign
(
std
:
:
move
(
value
)
)
;
}
inline
void
ExtensionSet
:
:
SetRepeatedString
(
int
number
int
index
std
:
:
string
value
)
{
MutableRepeatedString
(
number
index
)
-
>
assign
(
std
:
:
move
(
value
)
)
;
}
inline
void
ExtensionSet
:
:
AddString
(
int
number
FieldType
type
std
:
:
string
value
const
FieldDescriptor
*
descriptor
)
{
AddString
(
number
type
descriptor
)
-
>
assign
(
std
:
:
move
(
value
)
)
;
}
template
<
typename
Type
>
class
PrimitiveTypeTraits
{
public
:
typedef
Type
ConstType
;
typedef
Type
MutableType
;
typedef
PrimitiveTypeTraits
<
Type
>
Singular
;
static
inline
ConstType
Get
(
int
number
const
ExtensionSet
&
set
ConstType
default_value
)
;
static
inline
const
ConstType
*
GetPtr
(
int
number
const
ExtensionSet
&
set
const
ConstType
&
default_value
)
;
static
inline
void
Set
(
int
number
FieldType
field_type
ConstType
value
ExtensionSet
*
set
)
;
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
verify_func
)
{
ExtensionSet
:
:
RegisterExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
false
is_packed
verify_func
)
;
}
}
;
template
<
typename
Type
>
class
RepeatedPrimitiveTypeTraits
{
public
:
typedef
Type
ConstType
;
typedef
Type
MutableType
;
typedef
RepeatedPrimitiveTypeTraits
<
Type
>
Repeated
;
typedef
RepeatedField
<
Type
>
RepeatedFieldType
;
static
inline
Type
Get
(
int
number
const
ExtensionSet
&
set
int
index
)
;
static
inline
const
Type
*
GetPtr
(
int
number
const
ExtensionSet
&
set
int
index
)
;
static
inline
const
RepeatedField
<
ConstType
>
*
GetRepeatedPtr
(
int
number
const
ExtensionSet
&
set
)
;
static
inline
void
Set
(
int
number
int
index
Type
value
ExtensionSet
*
set
)
;
static
inline
void
Add
(
int
number
FieldType
field_type
bool
is_packed
Type
value
ExtensionSet
*
set
)
;
static
inline
const
RepeatedField
<
ConstType
>
&
GetRepeated
(
int
number
const
ExtensionSet
&
set
)
;
static
inline
RepeatedField
<
Type
>
*
MutableRepeated
(
int
number
FieldType
field_type
bool
is_packed
ExtensionSet
*
set
)
;
static
const
RepeatedFieldType
*
GetDefaultRepeatedField
(
)
;
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
verify_func
)
{
ExtensionSet
:
:
RegisterExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
true
is_packed
verify_func
)
;
}
}
;
class
PROTOBUF_EXPORT
RepeatedPrimitiveDefaults
{
private
:
template
<
typename
Type
>
friend
class
RepeatedPrimitiveTypeTraits
;
static
const
RepeatedPrimitiveDefaults
*
default_instance
(
)
;
RepeatedField
<
int32_t
>
default_repeated_field_int32_t_
;
RepeatedField
<
int64_t
>
default_repeated_field_int64_t_
;
RepeatedField
<
uint32_t
>
default_repeated_field_uint32_t_
;
RepeatedField
<
uint64_t
>
default_repeated_field_uint64_t_
;
RepeatedField
<
double
>
default_repeated_field_double_
;
RepeatedField
<
float
>
default_repeated_field_float_
;
RepeatedField
<
bool
>
default_repeated_field_bool_
;
}
;
#
define
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
TYPE
METHOD
)
\
template
<
>
\
inline
TYPE
PrimitiveTypeTraits
<
TYPE
>
:
:
Get
(
\
int
number
const
ExtensionSet
&
set
TYPE
default_value
)
{
\
return
set
.
Get
#
#
METHOD
(
number
default_value
)
;
\
}
\
template
<
>
\
inline
const
TYPE
*
PrimitiveTypeTraits
<
TYPE
>
:
:
GetPtr
(
\
int
number
const
ExtensionSet
&
set
const
TYPE
&
default_value
)
{
\
return
&
set
.
GetRef
#
#
METHOD
(
number
default_value
)
;
\
}
\
template
<
>
\
inline
void
PrimitiveTypeTraits
<
TYPE
>
:
:
Set
(
int
number
FieldType
field_type
\
TYPE
value
ExtensionSet
*
set
)
{
\
set
-
>
Set
#
#
METHOD
(
number
field_type
value
nullptr
)
;
\
}
\
\
template
<
>
\
inline
TYPE
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
Get
(
\
int
number
const
ExtensionSet
&
set
int
index
)
{
\
return
set
.
GetRepeated
#
#
METHOD
(
number
index
)
;
\
}
\
template
<
>
\
inline
const
TYPE
*
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
GetPtr
(
\
int
number
const
ExtensionSet
&
set
int
index
)
{
\
return
&
set
.
GetRefRepeated
#
#
METHOD
(
number
index
)
;
\
}
\
template
<
>
\
inline
void
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
Set
(
\
int
number
int
index
TYPE
value
ExtensionSet
*
set
)
{
\
set
-
>
SetRepeated
#
#
METHOD
(
number
index
value
)
;
\
}
\
template
<
>
\
inline
void
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
Add
(
\
int
number
FieldType
field_type
bool
is_packed
TYPE
value
\
ExtensionSet
*
set
)
{
\
set
-
>
Add
#
#
METHOD
(
number
field_type
is_packed
value
nullptr
)
;
\
}
\
template
<
>
\
inline
const
RepeatedField
<
TYPE
>
*
\
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
GetDefaultRepeatedField
(
)
{
\
return
&
RepeatedPrimitiveDefaults
:
:
default_instance
(
)
\
-
>
default_repeated_field_
#
#
TYPE
#
#
_
;
\
}
\
template
<
>
\
inline
const
RepeatedField
<
TYPE
>
&
\
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
GetRepeated
(
int
number
\
const
ExtensionSet
&
set
)
{
\
return
*
reinterpret_cast
<
const
RepeatedField
<
TYPE
>
*
>
(
\
set
.
GetRawRepeatedField
(
number
GetDefaultRepeatedField
(
)
)
)
;
\
}
\
template
<
>
\
inline
const
RepeatedField
<
TYPE
>
*
\
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
GetRepeatedPtr
(
int
number
\
const
ExtensionSet
&
set
)
{
\
return
&
GetRepeated
(
number
set
)
;
\
}
\
template
<
>
\
inline
RepeatedField
<
TYPE
>
*
\
RepeatedPrimitiveTypeTraits
<
TYPE
>
:
:
MutableRepeated
(
\
int
number
FieldType
field_type
bool
is_packed
ExtensionSet
*
set
)
{
\
return
reinterpret_cast
<
RepeatedField
<
TYPE
>
*
>
(
\
set
-
>
MutableRawRepeatedField
(
number
field_type
is_packed
nullptr
)
)
;
\
}
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
int32_t
Int32
)
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
int64_t
Int64
)
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
uint32_t
UInt32
)
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
uint64_t
UInt64
)
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
float
Float
)
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
double
Double
)
PROTOBUF_DEFINE_PRIMITIVE_TYPE
(
bool
Bool
)
#
undef
PROTOBUF_DEFINE_PRIMITIVE_TYPE
class
PROTOBUF_EXPORT
StringTypeTraits
{
public
:
typedef
const
std
:
:
string
&
ConstType
;
typedef
std
:
:
string
*
MutableType
;
typedef
StringTypeTraits
Singular
;
static
inline
const
std
:
:
string
&
Get
(
int
number
const
ExtensionSet
&
set
ConstType
default_value
)
{
return
set
.
GetString
(
number
default_value
)
;
}
static
inline
const
std
:
:
string
*
GetPtr
(
int
number
const
ExtensionSet
&
set
ConstType
default_value
)
{
return
&
Get
(
number
set
default_value
)
;
}
static
inline
void
Set
(
int
number
FieldType
field_type
const
std
:
:
string
&
value
ExtensionSet
*
set
)
{
set
-
>
SetString
(
number
field_type
value
nullptr
)
;
}
static
inline
std
:
:
string
*
Mutable
(
int
number
FieldType
field_type
ExtensionSet
*
set
)
{
return
set
-
>
MutableString
(
number
field_type
nullptr
)
;
}
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
verify_func
)
{
ExtensionSet
:
:
RegisterExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
false
is_packed
verify_func
)
;
}
}
;
class
PROTOBUF_EXPORT
RepeatedStringTypeTraits
{
public
:
typedef
const
std
:
:
string
&
ConstType
;
typedef
std
:
:
string
*
MutableType
;
typedef
RepeatedStringTypeTraits
Repeated
;
typedef
RepeatedPtrField
<
std
:
:
string
>
RepeatedFieldType
;
static
inline
const
std
:
:
string
&
Get
(
int
number
const
ExtensionSet
&
set
int
index
)
{
return
set
.
GetRepeatedString
(
number
index
)
;
}
static
inline
const
std
:
:
string
*
GetPtr
(
int
number
const
ExtensionSet
&
set
int
index
)
{
return
&
Get
(
number
set
index
)
;
}
static
inline
const
RepeatedPtrField
<
std
:
:
string
>
*
GetRepeatedPtr
(
int
number
const
ExtensionSet
&
set
)
{
return
&
GetRepeated
(
number
set
)
;
}
static
inline
void
Set
(
int
number
int
index
const
std
:
:
string
&
value
ExtensionSet
*
set
)
{
set
-
>
SetRepeatedString
(
number
index
value
)
;
}
static
inline
std
:
:
string
*
Mutable
(
int
number
int
index
ExtensionSet
*
set
)
{
return
set
-
>
MutableRepeatedString
(
number
index
)
;
}
static
inline
void
Add
(
int
number
FieldType
field_type
bool
const
std
:
:
string
&
value
ExtensionSet
*
set
)
{
set
-
>
AddString
(
number
field_type
value
nullptr
)
;
}
static
inline
std
:
:
string
*
Add
(
int
number
FieldType
field_type
ExtensionSet
*
set
)
{
return
set
-
>
AddString
(
number
field_type
nullptr
)
;
}
static
inline
const
RepeatedPtrField
<
std
:
:
string
>
&
GetRepeated
(
int
number
const
ExtensionSet
&
set
)
{
return
*
reinterpret_cast
<
const
RepeatedPtrField
<
std
:
:
string
>
*
>
(
set
.
GetRawRepeatedField
(
number
GetDefaultRepeatedField
(
)
)
)
;
}
static
inline
RepeatedPtrField
<
std
:
:
string
>
*
MutableRepeated
(
int
number
FieldType
field_type
bool
is_packed
ExtensionSet
*
set
)
{
return
reinterpret_cast
<
RepeatedPtrField
<
std
:
:
string
>
*
>
(
set
-
>
MutableRawRepeatedField
(
number
field_type
is_packed
nullptr
)
)
;
}
static
const
RepeatedFieldType
*
GetDefaultRepeatedField
(
)
;
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
fn
)
{
ExtensionSet
:
:
RegisterExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
true
is_packed
fn
)
;
}
private
:
static
void
InitializeDefaultRepeatedFields
(
)
;
static
void
DestroyDefaultRepeatedFields
(
)
;
}
;
template
<
typename
Type
bool
IsValid
(
int
)
>
class
EnumTypeTraits
{
public
:
typedef
Type
ConstType
;
typedef
Type
MutableType
;
typedef
EnumTypeTraits
<
Type
IsValid
>
Singular
;
static
inline
ConstType
Get
(
int
number
const
ExtensionSet
&
set
ConstType
default_value
)
{
return
static_cast
<
Type
>
(
set
.
GetEnum
(
number
default_value
)
)
;
}
static
inline
const
ConstType
*
GetPtr
(
int
number
const
ExtensionSet
&
set
const
ConstType
&
default_value
)
{
return
reinterpret_cast
<
const
Type
*
>
(
&
set
.
GetRefEnum
(
number
default_value
)
)
;
}
static
inline
void
Set
(
int
number
FieldType
field_type
ConstType
value
ExtensionSet
*
set
)
{
GOOGLE_DCHECK
(
IsValid
(
value
)
)
;
set
-
>
SetEnum
(
number
field_type
value
nullptr
)
;
}
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
fn
)
{
ExtensionSet
:
:
RegisterEnumExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
false
is_packed
IsValid
)
;
}
}
;
template
<
typename
Type
bool
IsValid
(
int
)
>
class
RepeatedEnumTypeTraits
{
public
:
typedef
Type
ConstType
;
typedef
Type
MutableType
;
typedef
RepeatedEnumTypeTraits
<
Type
IsValid
>
Repeated
;
typedef
RepeatedField
<
Type
>
RepeatedFieldType
;
static
inline
ConstType
Get
(
int
number
const
ExtensionSet
&
set
int
index
)
{
return
static_cast
<
Type
>
(
set
.
GetRepeatedEnum
(
number
index
)
)
;
}
static
inline
const
ConstType
*
GetPtr
(
int
number
const
ExtensionSet
&
set
int
index
)
{
return
reinterpret_cast
<
const
Type
*
>
(
&
set
.
GetRefRepeatedEnum
(
number
index
)
)
;
}
static
inline
void
Set
(
int
number
int
index
ConstType
value
ExtensionSet
*
set
)
{
GOOGLE_DCHECK
(
IsValid
(
value
)
)
;
set
-
>
SetRepeatedEnum
(
number
index
value
)
;
}
static
inline
void
Add
(
int
number
FieldType
field_type
bool
is_packed
ConstType
value
ExtensionSet
*
set
)
{
GOOGLE_DCHECK
(
IsValid
(
value
)
)
;
set
-
>
AddEnum
(
number
field_type
is_packed
value
nullptr
)
;
}
static
inline
const
RepeatedField
<
Type
>
&
GetRepeated
(
int
number
const
ExtensionSet
&
set
)
{
return
*
reinterpret_cast
<
const
RepeatedField
<
Type
>
*
>
(
set
.
GetRawRepeatedField
(
number
GetDefaultRepeatedField
(
)
)
)
;
}
static
inline
const
RepeatedField
<
Type
>
*
GetRepeatedPtr
(
int
number
const
ExtensionSet
&
set
)
{
return
&
GetRepeated
(
number
set
)
;
}
static
inline
RepeatedField
<
Type
>
*
MutableRepeated
(
int
number
FieldType
field_type
bool
is_packed
ExtensionSet
*
set
)
{
return
reinterpret_cast
<
RepeatedField
<
Type
>
*
>
(
set
-
>
MutableRawRepeatedField
(
number
field_type
is_packed
nullptr
)
)
;
}
static
const
RepeatedFieldType
*
GetDefaultRepeatedField
(
)
{
return
reinterpret_cast
<
const
RepeatedField
<
Type
>
*
>
(
RepeatedPrimitiveTypeTraits
<
int32_t
>
:
:
GetDefaultRepeatedField
(
)
)
;
}
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
fn
)
{
ExtensionSet
:
:
RegisterEnumExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
true
is_packed
IsValid
)
;
}
}
;
template
<
typename
Type
>
class
MessageTypeTraits
{
public
:
typedef
const
Type
&
ConstType
;
typedef
Type
*
MutableType
;
typedef
MessageTypeTraits
<
Type
>
Singular
;
static
inline
ConstType
Get
(
int
number
const
ExtensionSet
&
set
ConstType
default_value
)
{
return
static_cast
<
const
Type
&
>
(
set
.
GetMessage
(
number
default_value
)
)
;
}
static
inline
std
:
:
nullptr_t
GetPtr
(
int
const
ExtensionSet
&
ConstType
)
{
return
nullptr
;
}
static
inline
MutableType
Mutable
(
int
number
FieldType
field_type
ExtensionSet
*
set
)
{
return
static_cast
<
Type
*
>
(
set
-
>
MutableMessage
(
number
field_type
Type
:
:
default_instance
(
)
nullptr
)
)
;
}
static
inline
void
SetAllocated
(
int
number
FieldType
field_type
MutableType
message
ExtensionSet
*
set
)
{
set
-
>
SetAllocatedMessage
(
number
field_type
nullptr
message
)
;
}
static
inline
void
UnsafeArenaSetAllocated
(
int
number
FieldType
field_type
MutableType
message
ExtensionSet
*
set
)
{
set
-
>
UnsafeArenaSetAllocatedMessage
(
number
field_type
nullptr
message
)
;
}
PROTOBUF_NODISCARD
static
inline
MutableType
Release
(
int
number
FieldType
ExtensionSet
*
set
)
{
return
static_cast
<
Type
*
>
(
set
-
>
ReleaseMessage
(
number
Type
:
:
default_instance
(
)
)
)
;
}
static
inline
MutableType
UnsafeArenaRelease
(
int
number
FieldType
ExtensionSet
*
set
)
{
return
static_cast
<
Type
*
>
(
set
-
>
UnsafeArenaReleaseMessage
(
number
Type
:
:
default_instance
(
)
)
)
;
}
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
fn
)
{
ExtensionSet
:
:
RegisterMessageExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
false
is_packed
&
Type
:
:
default_instance
(
)
fn
)
;
}
}
;
LazyEagerVerifyFnType
FindExtensionLazyEagerVerifyFn
(
const
MessageLite
*
extendee
int
number
)
;
class
RepeatedMessageGenericTypeTraits
;
template
<
typename
Type
>
class
RepeatedMessageTypeTraits
{
public
:
typedef
const
Type
&
ConstType
;
typedef
Type
*
MutableType
;
typedef
RepeatedMessageTypeTraits
<
Type
>
Repeated
;
typedef
RepeatedPtrField
<
Type
>
RepeatedFieldType
;
static
inline
ConstType
Get
(
int
number
const
ExtensionSet
&
set
int
index
)
{
return
static_cast
<
const
Type
&
>
(
set
.
GetRepeatedMessage
(
number
index
)
)
;
}
static
inline
std
:
:
nullptr_t
GetPtr
(
int
const
ExtensionSet
&
int
)
{
return
nullptr
;
}
static
inline
std
:
:
nullptr_t
GetRepeatedPtr
(
int
const
ExtensionSet
&
)
{
return
nullptr
;
}
static
inline
MutableType
Mutable
(
int
number
int
index
ExtensionSet
*
set
)
{
return
static_cast
<
Type
*
>
(
set
-
>
MutableRepeatedMessage
(
number
index
)
)
;
}
static
inline
MutableType
Add
(
int
number
FieldType
field_type
ExtensionSet
*
set
)
{
return
static_cast
<
Type
*
>
(
set
-
>
AddMessage
(
number
field_type
Type
:
:
default_instance
(
)
nullptr
)
)
;
}
static
inline
const
RepeatedPtrField
<
Type
>
&
GetRepeated
(
int
number
const
ExtensionSet
&
set
)
{
return
*
reinterpret_cast
<
const
RepeatedPtrField
<
Type
>
*
>
(
set
.
GetRawRepeatedField
(
number
GetDefaultRepeatedField
(
)
)
)
;
}
static
inline
RepeatedPtrField
<
Type
>
*
MutableRepeated
(
int
number
FieldType
field_type
bool
is_packed
ExtensionSet
*
set
)
{
return
reinterpret_cast
<
RepeatedPtrField
<
Type
>
*
>
(
set
-
>
MutableRawRepeatedField
(
number
field_type
is_packed
nullptr
)
)
;
}
static
const
RepeatedFieldType
*
GetDefaultRepeatedField
(
)
;
template
<
typename
ExtendeeT
>
static
void
Register
(
int
number
FieldType
type
bool
is_packed
LazyEagerVerifyFnType
fn
)
{
ExtensionSet
:
:
RegisterMessageExtension
(
&
ExtendeeT
:
:
default_instance
(
)
number
type
true
is_packed
&
Type
:
:
default_instance
(
)
fn
)
;
}
}
;
template
<
typename
Type
>
inline
const
typename
RepeatedMessageTypeTraits
<
Type
>
:
:
RepeatedFieldType
*
RepeatedMessageTypeTraits
<
Type
>
:
:
GetDefaultRepeatedField
(
)
{
static
auto
instance
=
OnShutdownDelete
(
new
RepeatedFieldType
)
;
return
instance
;
}
template
<
typename
ExtendeeType
typename
TypeTraitsType
FieldType
field_type
bool
is_packed
>
class
ExtensionIdentifier
{
public
:
typedef
TypeTraitsType
TypeTraits
;
typedef
ExtendeeType
Extendee
;
ExtensionIdentifier
(
int
number
typename
TypeTraits
:
:
ConstType
default_value
LazyEagerVerifyFnType
verify_func
=
nullptr
)
:
number_
(
number
)
default_value_
(
default_value
)
{
Register
(
number
verify_func
)
;
}
inline
int
number
(
)
const
{
return
number_
;
}
typename
TypeTraits
:
:
ConstType
default_value
(
)
const
{
return
default_value_
;
}
static
void
Register
(
int
number
LazyEagerVerifyFnType
verify_func
)
{
TypeTraits
:
:
template
Register
<
ExtendeeType
>
(
number
field_type
is_packed
verify_func
)
;
}
typename
TypeTraits
:
:
ConstType
const
&
default_value_ref
(
)
const
{
return
default_value_
;
}
private
:
const
int
number_
;
typename
TypeTraits
:
:
ConstType
default_value_
;
}
;
extern
PROTOBUF_ATTRIBUTE_WEAK
ExtensionSet
:
:
LazyMessageExtension
*
MaybeCreateLazyExtension
(
Arena
*
arena
)
;
}
template
<
typename
ExtendeeType
typename
TypeTraitsType
internal
:
:
FieldType
field_type
bool
is_packed
>
void
LinkExtensionReflection
(
const
google
:
:
protobuf
:
:
internal
:
:
ExtensionIdentifier
<
ExtendeeType
TypeTraitsType
field_type
is_packed
>
&
extension
)
{
internal
:
:
StrongReference
(
extension
)
;
}
}
}
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
#
endif
