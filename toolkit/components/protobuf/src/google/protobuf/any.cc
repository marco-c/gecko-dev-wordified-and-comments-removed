#
include
<
google
/
protobuf
/
any
.
h
>
#
include
<
google
/
protobuf
/
arenastring
.
h
>
#
include
<
google
/
protobuf
/
descriptor
.
h
>
#
include
<
google
/
protobuf
/
generated_message_util
.
h
>
#
include
<
google
/
protobuf
/
message
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
namespace
google
{
namespace
protobuf
{
namespace
internal
{
void
AnyMetadata
:
:
PackFrom
(
const
Message
&
message
)
{
PackFrom
(
message
kTypeGoogleApisComPrefix
)
;
}
void
AnyMetadata
:
:
PackFrom
(
const
Message
&
message
const
std
:
:
string
&
type_url_prefix
)
{
type_url_
-
>
SetNoArena
(
&
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
(
)
GetTypeUrl
(
message
.
GetDescriptor
(
)
-
>
full_name
(
)
type_url_prefix
)
)
;
message
.
SerializeToString
(
value_
-
>
MutableNoArena
(
&
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyStringAlreadyInited
(
)
)
)
;
}
bool
AnyMetadata
:
:
UnpackTo
(
Message
*
message
)
const
{
if
(
!
InternalIs
(
message
-
>
GetDescriptor
(
)
-
>
full_name
(
)
)
)
{
return
false
;
}
return
message
-
>
ParseFromString
(
value_
-
>
GetNoArena
(
)
)
;
}
bool
GetAnyFieldDescriptors
(
const
Message
&
message
const
FieldDescriptor
*
*
type_url_field
const
FieldDescriptor
*
*
value_field
)
{
const
Descriptor
*
descriptor
=
message
.
GetDescriptor
(
)
;
if
(
descriptor
-
>
full_name
(
)
!
=
kAnyFullTypeName
)
{
return
false
;
}
*
type_url_field
=
descriptor
-
>
FindFieldByNumber
(
1
)
;
*
value_field
=
descriptor
-
>
FindFieldByNumber
(
2
)
;
return
(
*
type_url_field
!
=
NULL
&
&
(
*
type_url_field
)
-
>
type
(
)
=
=
FieldDescriptor
:
:
TYPE_STRING
&
&
*
value_field
!
=
NULL
&
&
(
*
value_field
)
-
>
type
(
)
=
=
FieldDescriptor
:
:
TYPE_BYTES
)
;
}
}
}
}
