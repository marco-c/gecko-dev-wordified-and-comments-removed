#
ifndef
GOOGLE_PROTOBUF_CASTS_H__
#
define
GOOGLE_PROTOBUF_CASTS_H__
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
type_traits
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
internal
{
template
<
typename
To
typename
From
>
inline
To
implicit_cast
(
From
const
&
f
)
{
return
f
;
}
template
<
typename
To
typename
From
>
inline
To
down_cast
(
From
*
f
)
{
if
(
false
)
{
implicit_cast
<
From
*
To
>
(
0
)
;
}
#
if
!
defined
(
NDEBUG
)
&
&
!
defined
(
GOOGLE_PROTOBUF_NO_RTTI
)
assert
(
f
=
=
NULL
|
|
dynamic_cast
<
To
>
(
f
)
!
=
NULL
)
;
#
endif
return
static_cast
<
To
>
(
f
)
;
}
template
<
typename
To
typename
From
>
inline
To
down_cast
(
From
&
f
)
{
typedef
typename
remove_reference
<
To
>
:
:
type
*
ToAsPointer
;
if
(
false
)
{
implicit_cast
<
From
*
ToAsPointer
>
(
0
)
;
}
#
if
!
defined
(
NDEBUG
)
&
&
!
defined
(
GOOGLE_PROTOBUF_NO_RTTI
)
assert
(
dynamic_cast
<
ToAsPointer
>
(
&
f
)
!
=
NULL
)
;
#
endif
return
*
static_cast
<
ToAsPointer
>
(
&
f
)
;
}
template
<
typename
To
typename
From
>
inline
To
bit_cast
(
const
From
&
from
)
{
GOOGLE_COMPILE_ASSERT
(
sizeof
(
From
)
=
=
sizeof
(
To
)
bit_cast_with_different_sizes
)
;
To
dest
;
memcpy
(
&
dest
&
from
sizeof
(
dest
)
)
;
return
dest
;
}
}
using
internal
:
:
implicit_cast
;
using
internal
:
:
down_cast
;
using
internal
:
:
bit_cast
;
}
}
#
endif
