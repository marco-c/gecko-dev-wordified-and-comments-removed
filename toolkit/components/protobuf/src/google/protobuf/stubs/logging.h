#
ifndef
GOOGLE_PROTOBUF_STUBS_LOGGING_H_
#
define
GOOGLE_PROTOBUF_STUBS_LOGGING_H_
#
include
<
google
/
protobuf
/
stubs
/
macros
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
port
.
h
>
namespace
google
{
namespace
protobuf
{
enum
LogLevel
{
LOGLEVEL_INFO
LOGLEVEL_WARNING
LOGLEVEL_ERROR
LOGLEVEL_FATAL
#
ifdef
NDEBUG
LOGLEVEL_DFATAL
=
LOGLEVEL_ERROR
#
else
LOGLEVEL_DFATAL
=
LOGLEVEL_FATAL
#
endif
}
;
class
StringPiece
;
namespace
util
{
class
Status
;
}
class
uint128
;
namespace
internal
{
class
LogFinisher
;
class
LIBPROTOBUF_EXPORT
LogMessage
{
public
:
LogMessage
(
LogLevel
level
const
char
*
filename
int
line
)
;
~
LogMessage
(
)
;
LogMessage
&
operator
<
<
(
const
std
:
:
string
&
value
)
;
LogMessage
&
operator
<
<
(
const
char
*
value
)
;
LogMessage
&
operator
<
<
(
char
value
)
;
LogMessage
&
operator
<
<
(
int
value
)
;
LogMessage
&
operator
<
<
(
uint
value
)
;
LogMessage
&
operator
<
<
(
long
value
)
;
LogMessage
&
operator
<
<
(
unsigned
long
value
)
;
LogMessage
&
operator
<
<
(
long
long
value
)
;
LogMessage
&
operator
<
<
(
unsigned
long
long
value
)
;
LogMessage
&
operator
<
<
(
double
value
)
;
LogMessage
&
operator
<
<
(
void
*
value
)
;
LogMessage
&
operator
<
<
(
const
StringPiece
&
value
)
;
LogMessage
&
operator
<
<
(
const
:
:
google
:
:
protobuf
:
:
util
:
:
Status
&
status
)
;
LogMessage
&
operator
<
<
(
const
uint128
&
value
)
;
private
:
friend
class
LogFinisher
;
void
Finish
(
)
;
LogLevel
level_
;
const
char
*
filename_
;
int
line_
;
std
:
:
string
message_
;
}
;
class
LIBPROTOBUF_EXPORT
LogFinisher
{
public
:
void
operator
=
(
LogMessage
&
other
)
;
}
;
template
<
typename
T
>
bool
IsOk
(
T
status
)
{
return
status
.
ok
(
)
;
}
template
<
>
inline
bool
IsOk
(
bool
status
)
{
return
status
;
}
}
#
undef
GOOGLE_LOG
#
undef
GOOGLE_LOG_IF
#
undef
GOOGLE_CHECK
#
undef
GOOGLE_CHECK_OK
#
undef
GOOGLE_CHECK_EQ
#
undef
GOOGLE_CHECK_NE
#
undef
GOOGLE_CHECK_LT
#
undef
GOOGLE_CHECK_LE
#
undef
GOOGLE_CHECK_GT
#
undef
GOOGLE_CHECK_GE
#
undef
GOOGLE_CHECK_NOTNULL
#
undef
GOOGLE_DLOG
#
undef
GOOGLE_DCHECK
#
undef
GOOGLE_DCHECK_OK
#
undef
GOOGLE_DCHECK_EQ
#
undef
GOOGLE_DCHECK_NE
#
undef
GOOGLE_DCHECK_LT
#
undef
GOOGLE_DCHECK_LE
#
undef
GOOGLE_DCHECK_GT
#
undef
GOOGLE_DCHECK_GE
#
define
GOOGLE_LOG
(
LEVEL
)
\
:
:
google
:
:
protobuf
:
:
internal
:
:
LogFinisher
(
)
=
\
:
:
google
:
:
protobuf
:
:
internal
:
:
LogMessage
(
\
:
:
google
:
:
protobuf
:
:
LOGLEVEL_
#
#
LEVEL
__FILE__
__LINE__
)
#
define
GOOGLE_LOG_IF
(
LEVEL
CONDITION
)
\
!
(
CONDITION
)
?
(
void
)
0
:
GOOGLE_LOG
(
LEVEL
)
#
define
GOOGLE_CHECK
(
EXPRESSION
)
\
GOOGLE_LOG_IF
(
FATAL
!
(
EXPRESSION
)
)
<
<
"
CHECK
failed
:
"
#
EXPRESSION
"
:
"
#
define
GOOGLE_CHECK_OK
(
A
)
GOOGLE_CHECK
(
:
:
google
:
:
protobuf
:
:
internal
:
:
IsOk
(
A
)
)
#
define
GOOGLE_CHECK_EQ
(
A
B
)
GOOGLE_CHECK
(
(
A
)
=
=
(
B
)
)
#
define
GOOGLE_CHECK_NE
(
A
B
)
GOOGLE_CHECK
(
(
A
)
!
=
(
B
)
)
#
define
GOOGLE_CHECK_LT
(
A
B
)
GOOGLE_CHECK
(
(
A
)
<
(
B
)
)
#
define
GOOGLE_CHECK_LE
(
A
B
)
GOOGLE_CHECK
(
(
A
)
<
=
(
B
)
)
#
define
GOOGLE_CHECK_GT
(
A
B
)
GOOGLE_CHECK
(
(
A
)
>
(
B
)
)
#
define
GOOGLE_CHECK_GE
(
A
B
)
GOOGLE_CHECK
(
(
A
)
>
=
(
B
)
)
namespace
internal
{
template
<
typename
T
>
T
*
CheckNotNull
(
const
char
*
int
const
char
*
name
T
*
val
)
{
if
(
val
=
=
NULL
)
{
GOOGLE_LOG
(
FATAL
)
<
<
name
;
}
return
val
;
}
}
#
define
GOOGLE_CHECK_NOTNULL
(
A
)
\
:
:
google
:
:
protobuf
:
:
internal
:
:
CheckNotNull
(
\
__FILE__
__LINE__
"
'
"
#
A
"
'
must
not
be
NULL
"
(
A
)
)
#
ifdef
NDEBUG
#
define
GOOGLE_DLOG
(
LEVEL
)
GOOGLE_LOG_IF
(
LEVEL
false
)
#
define
GOOGLE_DCHECK
(
EXPRESSION
)
while
(
false
)
GOOGLE_CHECK
(
EXPRESSION
)
#
define
GOOGLE_DCHECK_OK
(
E
)
GOOGLE_DCHECK
(
:
:
google
:
:
protobuf
:
:
internal
:
:
IsOk
(
E
)
)
#
define
GOOGLE_DCHECK_EQ
(
A
B
)
GOOGLE_DCHECK
(
(
A
)
=
=
(
B
)
)
#
define
GOOGLE_DCHECK_NE
(
A
B
)
GOOGLE_DCHECK
(
(
A
)
!
=
(
B
)
)
#
define
GOOGLE_DCHECK_LT
(
A
B
)
GOOGLE_DCHECK
(
(
A
)
<
(
B
)
)
#
define
GOOGLE_DCHECK_LE
(
A
B
)
GOOGLE_DCHECK
(
(
A
)
<
=
(
B
)
)
#
define
GOOGLE_DCHECK_GT
(
A
B
)
GOOGLE_DCHECK
(
(
A
)
>
(
B
)
)
#
define
GOOGLE_DCHECK_GE
(
A
B
)
GOOGLE_DCHECK
(
(
A
)
>
=
(
B
)
)
#
else
#
define
GOOGLE_DLOG
GOOGLE_LOG
#
define
GOOGLE_DCHECK
GOOGLE_CHECK
#
define
GOOGLE_DCHECK_OK
GOOGLE_CHECK_OK
#
define
GOOGLE_DCHECK_EQ
GOOGLE_CHECK_EQ
#
define
GOOGLE_DCHECK_NE
GOOGLE_CHECK_NE
#
define
GOOGLE_DCHECK_LT
GOOGLE_CHECK_LT
#
define
GOOGLE_DCHECK_LE
GOOGLE_CHECK_LE
#
define
GOOGLE_DCHECK_GT
GOOGLE_CHECK_GT
#
define
GOOGLE_DCHECK_GE
GOOGLE_CHECK_GE
#
endif
typedef
void
LogHandler
(
LogLevel
level
const
char
*
filename
int
line
const
std
:
:
string
&
message
)
;
LIBPROTOBUF_EXPORT
LogHandler
*
SetLogHandler
(
LogHandler
*
new_func
)
;
class
LIBPROTOBUF_EXPORT
LogSilencer
{
public
:
LogSilencer
(
)
;
~
LogSilencer
(
)
;
}
;
}
}
#
endif
