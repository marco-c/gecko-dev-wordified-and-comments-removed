#
ifndef
UTIL_MATH_MATHLIMITS_H__
#
define
UTIL_MATH_MATHLIMITS_H__
#
if
__cplusplus
>
=
201103L
#
include
<
cmath
>
#
define
GOOGLE_PROTOBUF_USE_STD_CMATH
#
elif
_GLIBCXX_USE_C99_MATH
&
&
!
_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC
#
include
<
cmath
>
#
define
GOOGLE_PROTOBUF_USE_STD_CMATH
#
else
#
include
<
math
.
h
>
#
endif
#
include
<
string
.
h
>
#
include
<
cfloat
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
namespace
google
{
namespace
protobuf
{
template
<
typename
T
>
struct
MathLimits
{
typedef
T
Type
;
typedef
T
UnsignedType
;
static
const
bool
kIsSigned
;
static
const
bool
kIsInteger
;
static
const
Type
kPosMin
;
static
const
Type
kPosMax
;
static
const
Type
kMin
;
static
const
Type
kMax
;
static
const
Type
kNegMin
;
static
const
Type
kNegMax
;
static
const
int
kMin10Exp
;
static
const
int
kMax10Exp
;
static
const
Type
kEpsilon
;
static
const
Type
kStdError
;
static
const
int
kPrecisionDigits
;
static
const
Type
kNaN
;
static
const
Type
kPosInf
;
static
const
Type
kNegInf
;
static
bool
IsFinite
(
const
Type
x
)
;
static
bool
IsNaN
(
const
Type
x
)
;
static
bool
IsInf
(
const
Type
x
)
;
static
bool
IsPosInf
(
const
Type
x
)
;
static
bool
IsNegInf
(
const
Type
x
)
;
}
;
#
define
SIGNED_INT_MAX
(
Type
)
\
(
(
(
Type
(
1
)
<
<
(
sizeof
(
Type
)
*
8
-
2
)
)
-
1
)
+
(
Type
(
1
)
<
<
(
sizeof
(
Type
)
*
8
-
2
)
)
)
#
define
SIGNED_INT_MIN
(
Type
)
\
(
-
(
Type
(
1
)
<
<
(
sizeof
(
Type
)
*
8
-
2
)
)
-
(
Type
(
1
)
<
<
(
sizeof
(
Type
)
*
8
-
2
)
)
)
#
define
UNSIGNED_INT_MAX
(
Type
)
\
(
(
(
Type
(
1
)
<
<
(
sizeof
(
Type
)
*
8
-
1
)
)
-
1
)
+
(
Type
(
1
)
<
<
(
sizeof
(
Type
)
*
8
-
1
)
)
)
#
define
SIGNED_MAX_10_EXP
(
Type
)
\
(
sizeof
(
Type
)
=
=
1
?
2
:
(
\
sizeof
(
Type
)
=
=
2
?
4
:
(
\
sizeof
(
Type
)
=
=
4
?
9
:
(
\
sizeof
(
Type
)
=
=
8
?
18
:
-
1
)
)
)
)
#
define
UNSIGNED_MAX_10_EXP
(
Type
)
\
(
sizeof
(
Type
)
=
=
1
?
2
:
(
\
sizeof
(
Type
)
=
=
2
?
4
:
(
\
sizeof
(
Type
)
=
=
4
?
9
:
(
\
sizeof
(
Type
)
=
=
8
?
19
:
-
1
)
)
)
)
#
define
DECL_INT_LIMIT_FUNCS
\
static
bool
IsFinite
(
const
Type
/
*
x
*
/
)
{
return
true
;
}
\
static
bool
IsNaN
(
const
Type
/
*
x
*
/
)
{
return
false
;
}
\
static
bool
IsInf
(
const
Type
/
*
x
*
/
)
{
return
false
;
}
\
static
bool
IsPosInf
(
const
Type
/
*
x
*
/
)
{
return
false
;
}
\
static
bool
IsNegInf
(
const
Type
/
*
x
*
/
)
{
return
false
;
}
#
define
DECL_SIGNED_INT_LIMITS
(
IntType
UnsignedIntType
)
\
template
<
>
\
struct
LIBPROTOBUF_EXPORT
MathLimits
<
IntType
>
{
\
typedef
IntType
Type
;
\
typedef
UnsignedIntType
UnsignedType
;
\
static
const
bool
kIsSigned
=
true
;
\
static
const
bool
kIsInteger
=
true
;
\
static
const
Type
kPosMin
=
1
;
\
static
const
Type
kPosMax
=
SIGNED_INT_MAX
(
Type
)
;
\
static
const
Type
kMin
=
SIGNED_INT_MIN
(
Type
)
;
\
static
const
Type
kMax
=
kPosMax
;
\
static
const
Type
kNegMin
=
-
1
;
\
static
const
Type
kNegMax
=
kMin
;
\
static
const
int
kMin10Exp
=
0
;
\
static
const
int
kMax10Exp
=
SIGNED_MAX_10_EXP
(
Type
)
;
\
static
const
Type
kEpsilon
=
1
;
\
static
const
Type
kStdError
=
0
;
\
DECL_INT_LIMIT_FUNCS
\
}
;
#
define
DECL_UNSIGNED_INT_LIMITS
(
IntType
)
\
template
<
>
\
struct
LIBPROTOBUF_EXPORT
MathLimits
<
IntType
>
{
\
typedef
IntType
Type
;
\
typedef
IntType
UnsignedType
;
\
static
const
bool
kIsSigned
=
false
;
\
static
const
bool
kIsInteger
=
true
;
\
static
const
Type
kPosMin
=
1
;
\
static
const
Type
kPosMax
=
UNSIGNED_INT_MAX
(
Type
)
;
\
static
const
Type
kMin
=
0
;
\
static
const
Type
kMax
=
kPosMax
;
\
static
const
int
kMin10Exp
=
0
;
\
static
const
int
kMax10Exp
=
UNSIGNED_MAX_10_EXP
(
Type
)
;
\
static
const
Type
kEpsilon
=
1
;
\
static
const
Type
kStdError
=
0
;
\
DECL_INT_LIMIT_FUNCS
\
}
;
DECL_SIGNED_INT_LIMITS
(
signed
char
unsigned
char
)
DECL_SIGNED_INT_LIMITS
(
signed
short
int
unsigned
short
int
)
DECL_SIGNED_INT_LIMITS
(
signed
int
unsigned
int
)
DECL_SIGNED_INT_LIMITS
(
signed
long
int
unsigned
long
int
)
DECL_SIGNED_INT_LIMITS
(
signed
long
long
int
unsigned
long
long
int
)
DECL_UNSIGNED_INT_LIMITS
(
unsigned
char
)
DECL_UNSIGNED_INT_LIMITS
(
unsigned
short
int
)
DECL_UNSIGNED_INT_LIMITS
(
unsigned
int
)
DECL_UNSIGNED_INT_LIMITS
(
unsigned
long
int
)
DECL_UNSIGNED_INT_LIMITS
(
unsigned
long
long
int
)
#
undef
DECL_SIGNED_INT_LIMITS
#
undef
DECL_UNSIGNED_INT_LIMITS
#
undef
SIGNED_INT_MAX
#
undef
SIGNED_INT_MIN
#
undef
UNSIGNED_INT_MAX
#
undef
SIGNED_MAX_10_EXP
#
undef
UNSIGNED_MAX_10_EXP
#
undef
DECL_INT_LIMIT_FUNCS
#
ifdef
GOOGLE_PROTOBUF_USE_STD_CMATH
#
define
ISINF
std
:
:
isinf
#
define
ISNAN
std
:
:
isnan
#
else
#
define
ISINF
isinf
#
define
ISNAN
isnan
#
endif
#
ifdef
WIN32
#
define
DECL_FP_LIMIT_FUNCS
\
static
bool
IsFinite
(
const
Type
x
)
{
return
_finite
(
x
)
;
}
\
static
bool
IsNaN
(
const
Type
x
)
{
return
_isnan
(
x
)
;
}
\
static
bool
IsInf
(
const
Type
x
)
{
return
(
_fpclass
(
x
)
&
(
_FPCLASS_NINF
|
_FPCLASS_PINF
)
)
!
=
0
;
}
\
static
bool
IsPosInf
(
const
Type
x
)
{
return
_fpclass
(
x
)
=
=
_FPCLASS_PINF
;
}
\
static
bool
IsNegInf
(
const
Type
x
)
{
return
_fpclass
(
x
)
=
=
_FPCLASS_NINF
;
}
#
else
#
define
DECL_FP_LIMIT_FUNCS
\
static
bool
IsFinite
(
const
Type
x
)
{
return
!
ISINF
(
x
)
&
&
!
ISNAN
(
x
)
;
}
\
static
bool
IsNaN
(
const
Type
x
)
{
return
ISNAN
(
x
)
;
}
\
static
bool
IsInf
(
const
Type
x
)
{
return
ISINF
(
x
)
;
}
\
static
bool
IsPosInf
(
const
Type
x
)
{
return
ISINF
(
x
)
&
&
x
>
0
;
}
\
static
bool
IsNegInf
(
const
Type
x
)
{
return
ISINF
(
x
)
&
&
x
<
0
;
}
#
endif
#
define
DECL_FP_LIMITS
(
FP_Type
PREFIX
)
\
template
<
>
\
struct
LIBPROTOBUF_EXPORT
MathLimits
<
FP_Type
>
{
\
typedef
FP_Type
Type
;
\
typedef
FP_Type
UnsignedType
;
\
static
const
bool
kIsSigned
=
true
;
\
static
const
bool
kIsInteger
=
false
;
\
static
const
Type
kPosMin
;
\
static
const
Type
kPosMax
;
\
static
const
Type
kMin
;
\
static
const
Type
kMax
;
\
static
const
Type
kNegMin
;
\
static
const
Type
kNegMax
;
\
static
const
int
kMin10Exp
=
PREFIX
#
#
_MIN_10_EXP
;
\
static
const
int
kMax10Exp
=
PREFIX
#
#
_MAX_10_EXP
;
\
static
const
Type
kEpsilon
;
\
static
const
Type
kStdError
;
\
static
const
int
kPrecisionDigits
=
PREFIX
#
#
_DIG
;
\
static
const
Type
kNaN
;
\
static
const
Type
kPosInf
;
\
static
const
Type
kNegInf
;
\
DECL_FP_LIMIT_FUNCS
\
}
;
DECL_FP_LIMITS
(
float
FLT
)
DECL_FP_LIMITS
(
double
DBL
)
DECL_FP_LIMITS
(
long
double
LDBL
)
#
undef
ISINF
#
undef
ISNAN
#
undef
DECL_FP_LIMITS
#
undef
DECL_FP_LIMIT_FUNCS
}
}
#
endif
