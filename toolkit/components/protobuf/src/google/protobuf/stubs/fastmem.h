#
ifndef
GOOGLE_PROTOBUF_STUBS_FASTMEM_H_
#
define
GOOGLE_PROTOBUF_STUBS_FASTMEM_H_
#
include
<
stddef
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
internal
{
inline
bool
memeq
(
const
char
*
a
const
char
*
b
size_t
n
)
{
size_t
n_rounded_down
=
n
&
~
static_cast
<
size_t
>
(
7
)
;
if
(
GOOGLE_PREDICT_FALSE
(
n_rounded_down
=
=
0
)
)
{
return
memcmp
(
a
b
n
)
=
=
0
;
}
uint64
u
=
GOOGLE_UNALIGNED_LOAD64
(
a
)
^
GOOGLE_UNALIGNED_LOAD64
(
b
)
;
uint64
v
=
GOOGLE_UNALIGNED_LOAD64
(
a
+
n
-
8
)
^
GOOGLE_UNALIGNED_LOAD64
(
b
+
n
-
8
)
;
if
(
(
u
|
v
)
!
=
0
)
{
return
false
;
}
a
+
=
8
;
b
+
=
8
;
n
=
n_rounded_down
-
8
;
if
(
n
>
128
)
{
return
memcmp
(
a
b
n
)
=
=
0
;
}
for
(
;
n
>
=
16
;
n
-
=
16
)
{
uint64
x
=
GOOGLE_UNALIGNED_LOAD64
(
a
)
^
GOOGLE_UNALIGNED_LOAD64
(
b
)
;
uint64
y
=
GOOGLE_UNALIGNED_LOAD64
(
a
+
8
)
^
GOOGLE_UNALIGNED_LOAD64
(
b
+
8
)
;
if
(
(
x
|
y
)
!
=
0
)
{
return
false
;
}
a
+
=
16
;
b
+
=
16
;
}
return
n
=
=
0
|
|
GOOGLE_UNALIGNED_LOAD64
(
a
)
=
=
GOOGLE_UNALIGNED_LOAD64
(
b
)
;
}
inline
int
fastmemcmp_inlined
(
const
char
*
a
const
char
*
b
size_t
n
)
{
if
(
n
>
=
64
)
{
return
memcmp
(
a
b
n
)
;
}
const
char
*
a_limit
=
a
+
n
;
while
(
a
+
sizeof
(
uint64
)
<
=
a_limit
&
&
GOOGLE_UNALIGNED_LOAD64
(
a
)
=
=
GOOGLE_UNALIGNED_LOAD64
(
b
)
)
{
a
+
=
sizeof
(
uint64
)
;
b
+
=
sizeof
(
uint64
)
;
}
if
(
a
+
sizeof
(
uint32
)
<
=
a_limit
&
&
GOOGLE_UNALIGNED_LOAD32
(
a
)
=
=
GOOGLE_UNALIGNED_LOAD32
(
b
)
)
{
a
+
=
sizeof
(
uint32
)
;
b
+
=
sizeof
(
uint32
)
;
}
while
(
a
<
a_limit
)
{
int
d
=
static_cast
<
int
>
(
static_cast
<
uint32
>
(
*
a
+
+
)
-
static_cast
<
uint32
>
(
*
b
+
+
)
)
;
if
(
d
)
return
d
;
}
return
0
;
}
inline
void
memcpy_inlined
(
char
*
dst
const
char
*
src
size_t
size
)
{
switch
(
size
)
{
case
1
:
memcpy
(
dst
src
1
)
;
break
;
case
2
:
memcpy
(
dst
src
2
)
;
break
;
case
3
:
memcpy
(
dst
src
3
)
;
break
;
case
4
:
memcpy
(
dst
src
4
)
;
break
;
case
5
:
memcpy
(
dst
src
5
)
;
break
;
case
6
:
memcpy
(
dst
src
6
)
;
break
;
case
7
:
memcpy
(
dst
src
7
)
;
break
;
case
8
:
memcpy
(
dst
src
8
)
;
break
;
case
9
:
memcpy
(
dst
src
9
)
;
break
;
case
10
:
memcpy
(
dst
src
10
)
;
break
;
case
11
:
memcpy
(
dst
src
11
)
;
break
;
case
12
:
memcpy
(
dst
src
12
)
;
break
;
case
13
:
memcpy
(
dst
src
13
)
;
break
;
case
14
:
memcpy
(
dst
src
14
)
;
break
;
case
15
:
memcpy
(
dst
src
15
)
;
break
;
case
16
:
memcpy
(
dst
src
16
)
;
break
;
default
:
memcpy
(
dst
src
size
)
;
break
;
}
}
}
}
}
#
endif
