#
ifndef
GOOGLE_PROTOBUF_STUBS_IO_WIN32_H__
#
define
GOOGLE_PROTOBUF_STUBS_IO_WIN32_H__
#
if
defined
(
_WIN32
)
#
include
<
string
>
#
include
<
google
/
protobuf
/
stubs
/
port
.
h
>
#
ifdef
_MSC_VER
namespace
google
{
namespace
protobuf
{
namespace
internal
{
namespace
win32
{
LIBPROTOBUF_EXPORT
FILE
*
fopen
(
const
char
*
path
const
char
*
mode
)
;
LIBPROTOBUF_EXPORT
int
access
(
const
char
*
path
int
mode
)
;
LIBPROTOBUF_EXPORT
int
chdir
(
const
char
*
path
)
;
LIBPROTOBUF_EXPORT
int
close
(
int
fd
)
;
LIBPROTOBUF_EXPORT
int
dup
(
int
fd
)
;
LIBPROTOBUF_EXPORT
int
dup2
(
int
fd1
int
fd2
)
;
LIBPROTOBUF_EXPORT
int
mkdir
(
const
char
*
path
int
_mode
)
;
LIBPROTOBUF_EXPORT
int
open
(
const
char
*
path
int
flags
int
mode
=
0
)
;
LIBPROTOBUF_EXPORT
int
read
(
int
fd
void
*
buffer
size_t
size
)
;
LIBPROTOBUF_EXPORT
int
setmode
(
int
fd
int
mode
)
;
LIBPROTOBUF_EXPORT
int
stat
(
const
char
*
path
struct
_stat
*
buffer
)
;
LIBPROTOBUF_EXPORT
int
write
(
int
fd
const
void
*
buffer
size_t
size
)
;
LIBPROTOBUF_EXPORT
std
:
:
wstring
testonly_path_to_winpath
(
const
std
:
:
string
&
path
)
;
}
}
}
}
#
else
#
define
mkdir
(
name
mode
)
mkdir
(
name
)
#
endif
#
ifndef
W_OK
#
define
W_OK
02
/
/
not
defined
by
MSVC
for
whatever
reason
#
endif
#
ifndef
F_OK
#
define
F_OK
00
/
/
not
defined
by
MSVC
for
whatever
reason
#
endif
#
ifndef
STDIN_FILENO
#
define
STDIN_FILENO
0
#
endif
#
ifndef
STDOUT_FILENO
#
define
STDOUT_FILENO
1
#
endif
#
endif
#
endif
