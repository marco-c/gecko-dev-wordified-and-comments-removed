#
ifndef
GOOGLE_PROTOBUF_STUBS_STATUS_H_
#
define
GOOGLE_PROTOBUF_STUBS_STATUS_H_
#
include
<
iosfwd
>
#
include
<
string
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
stringpiece
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
namespace
error
{
enum
Code
{
OK
=
0
CANCELLED
=
1
UNKNOWN
=
2
INVALID_ARGUMENT
=
3
DEADLINE_EXCEEDED
=
4
NOT_FOUND
=
5
ALREADY_EXISTS
=
6
PERMISSION_DENIED
=
7
UNAUTHENTICATED
=
16
RESOURCE_EXHAUSTED
=
8
FAILED_PRECONDITION
=
9
ABORTED
=
10
OUT_OF_RANGE
=
11
UNIMPLEMENTED
=
12
INTERNAL
=
13
UNAVAILABLE
=
14
DATA_LOSS
=
15
}
;
}
class
LIBPROTOBUF_EXPORT
Status
{
public
:
Status
(
)
;
Status
(
error
:
:
Code
error_code
StringPiece
error_message
)
;
Status
(
const
Status
&
)
;
Status
&
operator
=
(
const
Status
&
x
)
;
~
Status
(
)
{
}
static
const
Status
OK
;
static
const
Status
CANCELLED
;
static
const
Status
UNKNOWN
;
bool
ok
(
)
const
{
return
error_code_
=
=
error
:
:
OK
;
}
int
error_code
(
)
const
{
return
error_code_
;
}
StringPiece
error_message
(
)
const
{
return
error_message_
;
}
bool
operator
=
=
(
const
Status
&
x
)
const
;
bool
operator
!
=
(
const
Status
&
x
)
const
{
return
!
operator
=
=
(
x
)
;
}
string
ToString
(
)
const
;
private
:
error
:
:
Code
error_code_
;
string
error_message_
;
}
;
LIBPROTOBUF_EXPORT
ostream
&
operator
<
<
(
ostream
&
os
const
Status
&
x
)
;
#
define
EXPECT_OK
(
value
)
EXPECT_TRUE
(
(
value
)
.
ok
(
)
)
}
}
}
#
endif
