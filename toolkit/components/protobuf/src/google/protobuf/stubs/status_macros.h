#
ifndef
GOOGLE_PROTOBUF_STUBS_STATUS_MACROS_H_
#
define
GOOGLE_PROTOBUF_STUBS_STATUS_MACROS_H_
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
status
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
statusor
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
#
define
RETURN_IF_ERROR
(
expr
)
\
do
{
\
/
*
Using
_status
below
to
avoid
capture
problems
if
expr
is
"
status
"
.
*
/
\
const
:
:
google
:
:
protobuf
:
:
util
:
:
Status
_status
=
(
expr
)
;
\
if
(
GOOGLE_PREDICT_FALSE
(
!
_status
.
ok
(
)
)
)
return
_status
;
\
}
while
(
0
)
#
define
STATUS_MACROS_CONCAT_NAME_INNER
(
x
y
)
x
#
#
y
#
define
STATUS_MACROS_CONCAT_NAME
(
x
y
)
STATUS_MACROS_CONCAT_NAME_INNER
(
x
y
)
template
<
typename
T
>
Status
DoAssignOrReturn
(
T
&
lhs
StatusOr
<
T
>
result
)
{
if
(
result
.
ok
(
)
)
{
lhs
=
result
.
ValueOrDie
(
)
;
}
return
result
.
status
(
)
;
}
#
define
ASSIGN_OR_RETURN_IMPL
(
status
lhs
rexpr
)
\
Status
status
=
DoAssignOrReturn
(
lhs
(
rexpr
)
)
;
\
if
(
GOOGLE_PREDICT_FALSE
(
!
status
.
ok
(
)
)
)
return
status
;
#
define
ASSIGN_OR_RETURN
(
lhs
rexpr
)
\
ASSIGN_OR_RETURN_IMPL
(
\
STATUS_MACROS_CONCAT_NAME
(
_status_or_value
__COUNTER__
)
lhs
rexpr
)
;
}
}
}
#
endif
