#
ifndef
GOOGLE_PROTOBUF_ARENASTRING_H__
#
define
GOOGLE_PROTOBUF_ARENASTRING_H__
#
include
<
string
>
#
include
<
google
/
protobuf
/
stubs
/
logging
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
fastmem
.
h
>
#
include
<
google
/
protobuf
/
arena
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
internal
{
struct
LIBPROTOBUF_EXPORT
ArenaStringPtr
{
inline
void
Set
(
const
:
:
std
:
:
string
*
default_value
const
:
:
std
:
:
string
&
value
:
:
google
:
:
protobuf
:
:
Arena
*
arena
)
{
if
(
ptr_
=
=
default_value
)
{
CreateInstance
(
arena
&
value
)
;
}
else
{
*
ptr_
=
value
;
}
}
inline
const
:
:
std
:
:
string
&
Get
(
)
const
{
return
*
ptr_
;
}
inline
:
:
std
:
:
string
*
Mutable
(
const
:
:
std
:
:
string
*
default_value
:
:
google
:
:
protobuf
:
:
Arena
*
arena
)
{
if
(
ptr_
=
=
default_value
)
{
CreateInstance
(
arena
default_value
)
;
}
return
ptr_
;
}
inline
:
:
std
:
:
string
*
Release
(
const
:
:
std
:
:
string
*
default_value
:
:
google
:
:
protobuf
:
:
Arena
*
arena
)
{
if
(
ptr_
=
=
default_value
)
{
return
NULL
;
}
:
:
std
:
:
string
*
released
=
NULL
;
if
(
arena
!
=
NULL
)
{
released
=
new
:
:
std
:
:
string
(
*
ptr_
)
;
}
else
{
released
=
ptr_
;
}
ptr_
=
const_cast
<
:
:
std
:
:
string
*
>
(
default_value
)
;
return
released
;
}
inline
:
:
std
:
:
string
*
UnsafeArenaRelease
(
const
:
:
std
:
:
string
*
default_value
:
:
google
:
:
protobuf
:
:
Arena
*
)
{
if
(
ptr_
=
=
default_value
)
{
return
NULL
;
}
:
:
std
:
:
string
*
released
=
ptr_
;
ptr_
=
const_cast
<
:
:
std
:
:
string
*
>
(
default_value
)
;
return
released
;
}
inline
void
SetAllocated
(
const
:
:
std
:
:
string
*
default_value
:
:
std
:
:
string
*
value
:
:
google
:
:
protobuf
:
:
Arena
*
arena
)
{
if
(
arena
=
=
NULL
&
&
ptr_
!
=
default_value
)
{
Destroy
(
default_value
arena
)
;
}
if
(
value
!
=
NULL
)
{
ptr_
=
value
;
if
(
arena
!
=
NULL
)
{
arena
-
>
Own
(
value
)
;
}
}
else
{
ptr_
=
const_cast
<
:
:
std
:
:
string
*
>
(
default_value
)
;
}
}
inline
void
UnsafeArenaSetAllocated
(
const
:
:
std
:
:
string
*
default_value
:
:
std
:
:
string
*
value
:
:
google
:
:
protobuf
:
:
Arena
*
)
{
if
(
value
!
=
NULL
)
{
ptr_
=
value
;
}
else
{
ptr_
=
const_cast
<
:
:
std
:
:
string
*
>
(
default_value
)
;
}
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
void
Swap
(
ArenaStringPtr
*
other
)
{
std
:
:
swap
(
ptr_
other
-
>
ptr_
)
;
}
inline
void
Destroy
(
const
:
:
std
:
:
string
*
default_value
:
:
google
:
:
protobuf
:
:
Arena
*
arena
)
{
if
(
arena
=
=
NULL
&
&
ptr_
!
=
default_value
)
{
delete
ptr_
;
}
}
inline
void
ClearToEmpty
(
const
:
:
std
:
:
string
*
default_value
:
:
google
:
:
protobuf
:
:
Arena
*
)
{
if
(
ptr_
=
=
default_value
)
{
}
else
{
ptr_
-
>
clear
(
)
;
}
}
inline
void
ClearToDefault
(
const
:
:
std
:
:
string
*
default_value
:
:
google
:
:
protobuf
:
:
Arena
*
)
{
if
(
ptr_
=
=
default_value
)
{
}
else
{
*
ptr_
=
*
default_value
;
}
}
inline
void
UnsafeSetDefault
(
const
:
:
std
:
:
string
*
default_value
)
{
ptr_
=
const_cast
<
:
:
std
:
:
string
*
>
(
default_value
)
;
}
inline
void
SetNoArena
(
const
:
:
std
:
:
string
*
default_value
const
:
:
std
:
:
string
&
value
)
{
if
(
ptr_
=
=
default_value
)
{
CreateInstanceNoArena
(
&
value
)
;
}
else
{
*
ptr_
=
value
;
}
}
#
if
LANG_CXX11
void
SetNoArena
(
const
:
:
std
:
:
string
*
default_value
:
:
std
:
:
string
&
&
value
)
{
if
(
IsDefault
(
default_value
)
)
{
ptr_
=
new
:
:
std
:
:
string
(
std
:
:
move
(
value
)
)
;
}
else
{
*
ptr_
=
std
:
:
move
(
value
)
;
}
}
#
endif
void
AssignWithDefault
(
const
:
:
std
:
:
string
*
default_value
ArenaStringPtr
value
)
;
inline
const
:
:
std
:
:
string
&
GetNoArena
(
)
const
{
return
*
ptr_
;
}
inline
:
:
std
:
:
string
*
MutableNoArena
(
const
:
:
std
:
:
string
*
default_value
)
{
if
(
ptr_
=
=
default_value
)
{
CreateInstanceNoArena
(
default_value
)
;
}
return
ptr_
;
}
inline
:
:
std
:
:
string
*
ReleaseNoArena
(
const
:
:
std
:
:
string
*
default_value
)
{
if
(
ptr_
=
=
default_value
)
{
return
NULL
;
}
else
{
:
:
std
:
:
string
*
released
=
ptr_
;
ptr_
=
const_cast
<
:
:
std
:
:
string
*
>
(
default_value
)
;
return
released
;
}
}
inline
void
SetAllocatedNoArena
(
const
:
:
std
:
:
string
*
default_value
:
:
std
:
:
string
*
value
)
{
if
(
ptr_
!
=
default_value
)
{
delete
ptr_
;
}
if
(
value
!
=
NULL
)
{
ptr_
=
value
;
}
else
{
ptr_
=
const_cast
<
:
:
std
:
:
string
*
>
(
default_value
)
;
}
}
inline
void
DestroyNoArena
(
const
:
:
std
:
:
string
*
default_value
)
{
if
(
ptr_
!
=
default_value
)
{
delete
ptr_
;
}
}
inline
void
ClearToEmptyNoArena
(
const
:
:
std
:
:
string
*
default_value
)
{
if
(
ptr_
=
=
default_value
)
{
}
else
{
ptr_
-
>
clear
(
)
;
}
}
inline
void
ClearToDefaultNoArena
(
const
:
:
std
:
:
string
*
default_value
)
{
if
(
ptr_
=
=
default_value
)
{
}
else
{
*
ptr_
=
*
default_value
;
}
}
inline
:
:
std
:
:
string
*
*
UnsafeRawStringPointer
(
)
{
return
&
ptr_
;
}
inline
bool
IsDefault
(
const
:
:
std
:
:
string
*
default_value
)
const
{
return
ptr_
=
=
default_value
;
}
private
:
:
:
std
:
:
string
*
ptr_
;
GOOGLE_ATTRIBUTE_NOINLINE
void
CreateInstance
(
:
:
google
:
:
protobuf
:
:
Arena
*
arena
const
:
:
std
:
:
string
*
initial_value
)
{
GOOGLE_DCHECK
(
initial_value
!
=
NULL
)
;
ptr_
=
new
:
:
std
:
:
string
(
*
initial_value
)
;
if
(
arena
!
=
NULL
)
{
arena
-
>
Own
(
ptr_
)
;
}
}
GOOGLE_ATTRIBUTE_NOINLINE
void
CreateInstanceNoArena
(
const
:
:
std
:
:
string
*
initial_value
)
{
GOOGLE_DCHECK
(
initial_value
!
=
NULL
)
;
ptr_
=
new
:
:
std
:
:
string
(
*
initial_value
)
;
}
}
;
}
}
namespace
protobuf
{
namespace
internal
{
inline
void
ArenaStringPtr
:
:
AssignWithDefault
(
const
:
:
std
:
:
string
*
default_value
ArenaStringPtr
value
)
{
const
:
:
std
:
:
string
*
me
=
*
UnsafeRawStringPointer
(
)
;
const
:
:
std
:
:
string
*
other
=
*
value
.
UnsafeRawStringPointer
(
)
;
if
(
me
!
=
other
)
{
SetNoArena
(
default_value
value
.
GetNoArena
(
)
)
;
}
}
}
}
}
#
endif
