#
ifndef
GOOGLE_PROTOBUF_UTIL_MESSAGE_DIFFERENCER_H__
#
define
GOOGLE_PROTOBUF_UTIL_MESSAGE_DIFFERENCER_H__
#
include
<
map
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
<
google
/
protobuf
/
descriptor
.
h
>
#
include
<
google
/
protobuf
/
message
.
h
>
#
include
<
google
/
protobuf
/
unknown_field_set
.
h
>
#
include
<
google
/
protobuf
/
util
/
field_comparator
.
h
>
namespace
google
{
namespace
protobuf
{
class
DynamicMessageFactory
;
class
FieldDescriptor
;
namespace
io
{
class
ZeroCopyOutputStream
;
class
Printer
;
}
namespace
util
{
class
FieldContext
;
class
LIBPROTOBUF_EXPORT
MessageDifferencer
{
public
:
static
bool
Equals
(
const
Message
&
message1
const
Message
&
message2
)
;
static
bool
Equivalent
(
const
Message
&
message1
const
Message
&
message2
)
;
static
bool
ApproximatelyEquals
(
const
Message
&
message1
const
Message
&
message2
)
;
static
bool
ApproximatelyEquivalent
(
const
Message
&
message1
const
Message
&
message2
)
;
struct
SpecificField
{
const
FieldDescriptor
*
field
;
int
unknown_field_number
;
UnknownField
:
:
Type
unknown_field_type
;
int
index
;
int
new_index
;
const
UnknownFieldSet
*
unknown_field_set1
;
const
UnknownFieldSet
*
unknown_field_set2
;
int
unknown_field_index1
;
int
unknown_field_index2
;
SpecificField
(
)
:
field
(
NULL
)
unknown_field_number
(
-
1
)
index
(
-
1
)
new_index
(
-
1
)
unknown_field_set1
(
NULL
)
unknown_field_set2
(
NULL
)
unknown_field_index1
(
-
1
)
unknown_field_index2
(
-
1
)
{
}
}
;
class
LIBPROTOBUF_EXPORT
Reporter
{
public
:
Reporter
(
)
;
virtual
~
Reporter
(
)
;
virtual
void
ReportAdded
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
=
0
;
virtual
void
ReportDeleted
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
=
0
;
virtual
void
ReportModified
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
=
0
;
virtual
void
ReportMoved
(
const
Message
&
const
Message
&
const
std
:
:
vector
<
SpecificField
>
&
)
{
}
virtual
void
ReportMatched
(
const
Message
&
const
Message
&
const
std
:
:
vector
<
SpecificField
>
&
)
{
}
virtual
void
ReportIgnored
(
const
Message
&
const
Message
&
const
std
:
:
vector
<
SpecificField
>
&
)
{
}
virtual
void
ReportUnknownFieldIgnored
(
const
Message
&
const
Message
&
const
std
:
:
vector
<
SpecificField
>
&
)
{
}
private
:
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
Reporter
)
;
}
;
class
LIBPROTOBUF_EXPORT
MapKeyComparator
{
public
:
MapKeyComparator
(
)
;
virtual
~
MapKeyComparator
(
)
;
virtual
bool
IsMatch
(
const
Message
&
const
Message
&
const
std
:
:
vector
<
SpecificField
>
&
)
const
{
GOOGLE_CHECK
(
false
)
<
<
"
IsMatch
(
)
is
not
implemented
.
"
;
return
false
;
}
private
:
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
MapKeyComparator
)
;
}
;
class
LIBPROTOBUF_EXPORT
IgnoreCriteria
{
public
:
IgnoreCriteria
(
)
;
virtual
~
IgnoreCriteria
(
)
;
virtual
bool
IsIgnored
(
const
Message
&
const
Message
&
const
FieldDescriptor
*
const
std
:
:
vector
<
SpecificField
>
&
)
=
0
;
virtual
bool
IsUnknownFieldIgnored
(
const
Message
&
const
Message
&
const
SpecificField
&
const
std
:
:
vector
<
SpecificField
>
&
)
{
return
false
;
}
}
;
explicit
MessageDifferencer
(
)
;
~
MessageDifferencer
(
)
;
enum
MessageFieldComparison
{
EQUAL
EQUIVALENT
}
;
enum
Scope
{
FULL
PARTIAL
}
;
enum
FloatComparison
{
EXACT
APPROXIMATE
}
;
enum
RepeatedFieldComparison
{
AS_LIST
AS_SET
}
;
void
TreatAsSet
(
const
FieldDescriptor
*
field
)
;
void
TreatAsList
(
const
FieldDescriptor
*
field
)
;
void
TreatAsMap
(
const
FieldDescriptor
*
field
const
FieldDescriptor
*
key
)
;
void
TreatAsMapWithMultipleFieldsAsKey
(
const
FieldDescriptor
*
field
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
key_fields
)
;
void
TreatAsMapWithMultipleFieldPathsAsKey
(
const
FieldDescriptor
*
field
const
std
:
:
vector
<
std
:
:
vector
<
const
FieldDescriptor
*
>
>
&
key_field_paths
)
;
void
TreatAsMapUsingKeyComparator
(
const
FieldDescriptor
*
field
const
MapKeyComparator
*
key_comparator
)
;
void
AddIgnoreCriteria
(
IgnoreCriteria
*
ignore_criteria
)
;
void
IgnoreField
(
const
FieldDescriptor
*
field
)
;
void
set_field_comparator
(
FieldComparator
*
comparator
)
;
void
SetFractionAndMargin
(
const
FieldDescriptor
*
field
double
fraction
double
margin
)
;
void
set_message_field_comparison
(
MessageFieldComparison
comparison
)
;
void
set_report_matches
(
bool
report_matches
)
{
report_matches_
=
report_matches
;
}
void
set_report_moves
(
bool
report_moves
)
{
report_moves_
=
report_moves
;
}
void
set_scope
(
Scope
scope
)
;
Scope
scope
(
)
;
void
set_float_comparison
(
FloatComparison
comparison
)
;
void
set_repeated_field_comparison
(
RepeatedFieldComparison
comparison
)
;
bool
Compare
(
const
Message
&
message1
const
Message
&
message2
)
;
bool
CompareWithFields
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
message1_fields
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
message2_fields
)
;
void
ReportDifferencesToString
(
string
*
output
)
;
void
ReportDifferencesTo
(
Reporter
*
reporter
)
;
class
LIBPROTOBUF_EXPORT
StreamReporter
:
public
Reporter
{
public
:
explicit
StreamReporter
(
io
:
:
ZeroCopyOutputStream
*
output
)
;
explicit
StreamReporter
(
io
:
:
Printer
*
printer
)
;
virtual
~
StreamReporter
(
)
;
void
set_report_modified_aggregates
(
bool
report
)
{
report_modified_aggregates_
=
report
;
}
virtual
void
ReportAdded
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
;
virtual
void
ReportDeleted
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
;
virtual
void
ReportModified
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
;
virtual
void
ReportMoved
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
;
virtual
void
ReportMatched
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
;
virtual
void
ReportIgnored
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
;
virtual
void
ReportUnknownFieldIgnored
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
field_path
)
;
protected
:
virtual
void
PrintPath
(
const
std
:
:
vector
<
SpecificField
>
&
field_path
bool
left_side
const
Message
&
message
)
;
virtual
void
PrintPath
(
const
std
:
:
vector
<
SpecificField
>
&
field_path
bool
left_side
)
;
virtual
void
PrintValue
(
const
Message
&
message
const
std
:
:
vector
<
SpecificField
>
&
field_path
bool
left_side
)
;
virtual
void
PrintUnknownFieldValue
(
const
UnknownField
*
unknown_field
)
;
void
Print
(
const
string
&
str
)
;
private
:
io
:
:
Printer
*
printer_
;
bool
delete_printer_
;
bool
report_modified_aggregates_
;
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
StreamReporter
)
;
}
;
private
:
class
MultipleFieldsMapKeyComparator
;
class
LIBPROTOBUF_EXPORT
MapEntryKeyComparator
:
public
MapKeyComparator
{
public
:
explicit
MapEntryKeyComparator
(
MessageDifferencer
*
message_differencer
)
;
virtual
bool
IsMatch
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
SpecificField
>
&
parent_fields
)
const
;
private
:
MessageDifferencer
*
message_differencer_
;
}
;
static
bool
FieldBefore
(
const
FieldDescriptor
*
field1
const
FieldDescriptor
*
field2
)
;
void
CombineFields
(
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
fields1
Scope
fields1_scope
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
fields2
Scope
fields2_scope
std
:
:
vector
<
const
FieldDescriptor
*
>
*
combined_fields
)
;
bool
Compare
(
const
Message
&
message1
const
Message
&
message2
std
:
:
vector
<
SpecificField
>
*
parent_fields
)
;
bool
CompareUnknownFields
(
const
Message
&
message1
const
Message
&
message2
const
google
:
:
protobuf
:
:
UnknownFieldSet
&
const
google
:
:
protobuf
:
:
UnknownFieldSet
&
std
:
:
vector
<
SpecificField
>
*
parent_fields
)
;
bool
CompareRequestedFieldsUsingSettings
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
message1_fields
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
message2_fields
std
:
:
vector
<
SpecificField
>
*
parent_fields
)
;
bool
CompareWithFieldsInternal
(
const
Message
&
message1
const
Message
&
message2
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
message1_fields
const
std
:
:
vector
<
const
FieldDescriptor
*
>
&
message2_fields
std
:
:
vector
<
SpecificField
>
*
parent_fields
)
;
bool
CompareRepeatedField
(
const
Message
&
message1
const
Message
&
message2
const
FieldDescriptor
*
field
std
:
:
vector
<
SpecificField
>
*
parent_fields
)
;
bool
CompareFieldValue
(
const
Message
&
message1
const
Message
&
message2
const
FieldDescriptor
*
field
int
index1
int
index2
)
;
bool
CompareFieldValueUsingParentFields
(
const
Message
&
message1
const
Message
&
message2
const
FieldDescriptor
*
field
int
index1
int
index2
std
:
:
vector
<
SpecificField
>
*
parent_fields
)
;
FieldComparator
:
:
ComparisonResult
GetFieldComparisonResult
(
const
Message
&
message1
const
Message
&
message2
const
FieldDescriptor
*
field
int
index1
int
index2
const
FieldContext
*
field_context
)
;
bool
IsMatch
(
const
FieldDescriptor
*
repeated_field
const
MapKeyComparator
*
key_comparator
const
Message
*
message1
const
Message
*
message2
const
std
:
:
vector
<
SpecificField
>
&
parent_fields
int
index1
int
index2
)
;
bool
IsTreatedAsSet
(
const
FieldDescriptor
*
field
)
;
bool
IsTreatedAsSubset
(
const
FieldDescriptor
*
field
)
;
bool
IsIgnored
(
const
Message
&
message1
const
Message
&
message2
const
FieldDescriptor
*
field
const
std
:
:
vector
<
SpecificField
>
&
parent_fields
)
;
bool
IsUnknownFieldIgnored
(
const
Message
&
message1
const
Message
&
message2
const
SpecificField
&
field
const
std
:
:
vector
<
SpecificField
>
&
parent_fields
)
;
const
MapKeyComparator
*
GetMapKeyComparator
(
const
FieldDescriptor
*
field
)
const
;
bool
MatchRepeatedFieldIndices
(
const
Message
&
message1
const
Message
&
message2
const
FieldDescriptor
*
repeated_field
const
std
:
:
vector
<
SpecificField
>
&
parent_fields
std
:
:
vector
<
int
>
*
match_list1
std
:
:
vector
<
int
>
*
match_list2
)
;
bool
UnpackAny
(
const
Message
&
any
google
:
:
protobuf
:
:
scoped_ptr
<
Message
>
*
data
)
;
static
bool
CheckPathChanged
(
const
std
:
:
vector
<
SpecificField
>
&
parent_fields
)
;
typedef
std
:
:
map
<
const
FieldDescriptor
*
const
MapKeyComparator
*
>
FieldKeyComparatorMap
;
typedef
std
:
:
set
<
const
FieldDescriptor
*
>
FieldSet
;
Reporter
*
reporter_
;
DefaultFieldComparator
default_field_comparator_
;
FieldComparator
*
field_comparator_
;
MessageFieldComparison
message_field_comparison_
;
Scope
scope_
;
RepeatedFieldComparison
repeated_field_comparison_
;
FieldSet
set_fields_
;
FieldSet
list_fields_
;
std
:
:
vector
<
MapKeyComparator
*
>
owned_key_comparators_
;
FieldKeyComparatorMap
map_field_key_comparator_
;
MapEntryKeyComparator
map_entry_key_comparator_
;
std
:
:
vector
<
IgnoreCriteria
*
>
ignore_criteria_
;
FieldSet
ignored_fields_
;
bool
report_matches_
;
bool
report_moves_
;
string
*
output_string_
;
google
:
:
protobuf
:
:
scoped_ptr
<
DynamicMessageFactory
>
dynamic_message_factory_
;
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
MessageDifferencer
)
;
}
;
class
LIBPROTOBUF_EXPORT
FieldContext
{
public
:
explicit
FieldContext
(
std
:
:
vector
<
MessageDifferencer
:
:
SpecificField
>
*
parent_fields
)
:
parent_fields_
(
parent_fields
)
{
}
std
:
:
vector
<
MessageDifferencer
:
:
SpecificField
>
*
parent_fields
(
)
const
{
return
parent_fields_
;
}
private
:
std
:
:
vector
<
MessageDifferencer
:
:
SpecificField
>
*
parent_fields_
;
}
;
}
}
}
#
endif
