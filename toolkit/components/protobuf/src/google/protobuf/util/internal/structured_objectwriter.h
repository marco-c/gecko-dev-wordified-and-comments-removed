#
ifndef
GOOGLE_PROTOBUF_UTIL_CONVERTER_STRUCTURED_OBJECTWRITER_H__
#
define
GOOGLE_PROTOBUF_UTIL_CONVERTER_STRUCTURED_OBJECTWRITER_H__
#
include
<
memory
>
#
ifndef
_SHARED_PTR_H
#
include
<
google
/
protobuf
/
stubs
/
shared_ptr
.
h
>
#
endif
#
include
<
google
/
protobuf
/
stubs
/
casts
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
object_writer
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
namespace
converter
{
class
LIBPROTOBUF_EXPORT
StructuredObjectWriter
:
public
ObjectWriter
{
public
:
virtual
~
StructuredObjectWriter
(
)
{
}
protected
:
class
LIBPROTOBUF_EXPORT
BaseElement
{
public
:
explicit
BaseElement
(
BaseElement
*
parent
)
:
parent_
(
parent
)
level_
(
parent
=
=
NULL
?
0
:
parent
-
>
level
(
)
+
1
)
{
}
virtual
~
BaseElement
(
)
{
}
template
<
typename
ElementType
>
ElementType
*
pop
(
)
{
return
down_cast
<
ElementType
*
>
(
parent_
.
release
(
)
)
;
}
bool
is_root
(
)
const
{
return
parent_
=
=
NULL
;
}
int
level
(
)
const
{
return
level_
;
}
protected
:
virtual
BaseElement
*
parent
(
)
const
{
return
parent_
.
get
(
)
;
}
private
:
google
:
:
protobuf
:
:
scoped_ptr
<
BaseElement
>
parent_
;
const
int
level_
;
GOOGLE_DISALLOW_IMPLICIT_CONSTRUCTORS
(
BaseElement
)
;
}
;
StructuredObjectWriter
(
)
{
}
virtual
BaseElement
*
element
(
)
=
0
;
private
:
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
StructuredObjectWriter
)
;
}
;
}
}
}
}
#
endif
