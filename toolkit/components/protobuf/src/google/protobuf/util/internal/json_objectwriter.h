#
ifndef
GOOGLE_PROTOBUF_UTIL_CONVERTER_JSON_OBJECTWRITER_H__
#
define
GOOGLE_PROTOBUF_UTIL_CONVERTER_JSON_OBJECTWRITER_H__
#
include
<
memory
>
#
ifndef
_SHARED_PTR_H
#
include
<
google
/
protobuf
/
stubs
/
shared_ptr
.
h
>
#
endif
#
include
<
string
>
#
include
<
google
/
protobuf
/
io
/
coded_stream
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
structured_objectwriter
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
bytestream
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
namespace
converter
{
class
LIBPROTOBUF_EXPORT
JsonObjectWriter
:
public
StructuredObjectWriter
{
public
:
JsonObjectWriter
(
StringPiece
indent_string
google
:
:
protobuf
:
:
io
:
:
CodedOutputStream
*
out
)
:
element_
(
new
Element
(
NULL
)
)
stream_
(
out
)
sink_
(
out
)
indent_string_
(
indent_string
.
ToString
(
)
)
use_websafe_base64_for_bytes_
(
false
)
empty_name_ok_for_next_key_
(
false
)
{
}
virtual
~
JsonObjectWriter
(
)
;
virtual
JsonObjectWriter
*
StartObject
(
StringPiece
name
)
;
virtual
JsonObjectWriter
*
EndObject
(
)
;
virtual
JsonObjectWriter
*
StartList
(
StringPiece
name
)
;
virtual
JsonObjectWriter
*
EndList
(
)
;
virtual
JsonObjectWriter
*
RenderBool
(
StringPiece
name
bool
value
)
;
virtual
JsonObjectWriter
*
RenderInt32
(
StringPiece
name
int32
value
)
;
virtual
JsonObjectWriter
*
RenderUint32
(
StringPiece
name
uint32
value
)
;
virtual
JsonObjectWriter
*
RenderInt64
(
StringPiece
name
int64
value
)
;
virtual
JsonObjectWriter
*
RenderUint64
(
StringPiece
name
uint64
value
)
;
virtual
JsonObjectWriter
*
RenderDouble
(
StringPiece
name
double
value
)
;
virtual
JsonObjectWriter
*
RenderFloat
(
StringPiece
name
float
value
)
;
virtual
JsonObjectWriter
*
RenderString
(
StringPiece
name
StringPiece
value
)
;
virtual
JsonObjectWriter
*
RenderBytes
(
StringPiece
name
StringPiece
value
)
;
virtual
JsonObjectWriter
*
RenderNull
(
StringPiece
name
)
;
virtual
JsonObjectWriter
*
RenderNullAsEmpty
(
StringPiece
name
)
;
void
set_use_websafe_base64_for_bytes
(
bool
value
)
{
use_websafe_base64_for_bytes_
=
value
;
}
virtual
void
empty_name_ok_for_next_key
(
)
{
empty_name_ok_for_next_key_
=
true
;
}
protected
:
class
LIBPROTOBUF_EXPORT
Element
:
public
BaseElement
{
public
:
explicit
Element
(
Element
*
parent
)
:
BaseElement
(
parent
)
is_first_
(
true
)
{
}
bool
is_first
(
)
{
if
(
is_first_
)
{
is_first_
=
false
;
return
true
;
}
return
false
;
}
private
:
bool
is_first_
;
GOOGLE_DISALLOW_IMPLICIT_CONSTRUCTORS
(
Element
)
;
}
;
virtual
Element
*
element
(
)
{
return
element_
.
get
(
)
;
}
private
:
class
LIBPROTOBUF_EXPORT
ByteSinkWrapper
:
public
strings
:
:
ByteSink
{
public
:
explicit
ByteSinkWrapper
(
google
:
:
protobuf
:
:
io
:
:
CodedOutputStream
*
stream
)
:
stream_
(
stream
)
{
}
virtual
~
ByteSinkWrapper
(
)
{
}
virtual
void
Append
(
const
char
*
bytes
size_t
n
)
{
stream_
-
>
WriteRaw
(
bytes
n
)
;
}
private
:
google
:
:
protobuf
:
:
io
:
:
CodedOutputStream
*
stream_
;
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
ByteSinkWrapper
)
;
}
;
JsonObjectWriter
*
RenderSimple
(
StringPiece
name
const
string
&
value
)
{
WritePrefix
(
name
)
;
stream_
-
>
WriteString
(
value
)
;
return
this
;
}
void
Push
(
)
{
element_
.
reset
(
new
Element
(
element_
.
release
(
)
)
)
;
}
void
Pop
(
)
{
bool
needs_newline
=
!
element_
-
>
is_first
(
)
;
element_
.
reset
(
element_
-
>
pop
<
Element
>
(
)
)
;
if
(
needs_newline
)
NewLine
(
)
;
}
void
NewLine
(
)
{
if
(
!
indent_string_
.
empty
(
)
)
{
WriteChar
(
'
\
n
'
)
;
for
(
int
i
=
0
;
i
<
element
(
)
-
>
level
(
)
;
i
+
+
)
{
stream_
-
>
WriteString
(
indent_string_
)
;
}
}
}
void
WritePrefix
(
StringPiece
name
)
;
void
WriteChar
(
const
char
c
)
{
stream_
-
>
WriteRaw
(
&
c
sizeof
(
c
)
)
;
}
bool
GetAndResetEmptyKeyOk
(
)
;
google
:
:
protobuf
:
:
scoped_ptr
<
Element
>
element_
;
google
:
:
protobuf
:
:
io
:
:
CodedOutputStream
*
stream_
;
ByteSinkWrapper
sink_
;
const
string
indent_string_
;
bool
use_websafe_base64_for_bytes_
;
bool
empty_name_ok_for_next_key_
;
GOOGLE_DISALLOW_IMPLICIT_CONSTRUCTORS
(
JsonObjectWriter
)
;
}
;
}
}
}
}
#
endif
