#
ifndef
GOOGLE_PROTOBUF_UTIL_INTERNAL_ERROR_LISTENER_H__
#
define
GOOGLE_PROTOBUF_UTIL_INTERNAL_ERROR_LISTENER_H__
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
<
google
/
protobuf
/
stubs
/
callback
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
logging
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
strutil
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
location_tracker
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
namespace
converter
{
class
PROTOBUF_EXPORT
ErrorListener
{
public
:
virtual
~
ErrorListener
(
)
{
}
virtual
void
InvalidName
(
const
LocationTrackerInterface
&
loc
StringPiece
invalid_name
StringPiece
message
)
=
0
;
virtual
void
InvalidValue
(
const
LocationTrackerInterface
&
loc
StringPiece
type_name
StringPiece
value
)
=
0
;
virtual
void
MissingField
(
const
LocationTrackerInterface
&
loc
StringPiece
missing_name
)
=
0
;
protected
:
ErrorListener
(
)
{
}
private
:
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
ErrorListener
)
;
}
;
class
PROTOBUF_EXPORT
NoopErrorListener
:
public
ErrorListener
{
public
:
NoopErrorListener
(
)
{
}
~
NoopErrorListener
(
)
override
{
}
void
InvalidName
(
const
LocationTrackerInterface
&
StringPiece
StringPiece
)
override
{
}
void
InvalidValue
(
const
LocationTrackerInterface
&
StringPiece
StringPiece
)
override
{
}
void
MissingField
(
const
LocationTrackerInterface
&
StringPiece
)
override
{
}
private
:
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
NoopErrorListener
)
;
}
;
}
}
}
}
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
#
endif
