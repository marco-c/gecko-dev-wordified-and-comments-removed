#
ifndef
GOOGLE_PROTOBUF_UTIL_CONVERTER_DATAPIECE_H__
#
define
GOOGLE_PROTOBUF_UTIL_CONVERTER_DATAPIECE_H__
#
include
<
string
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
stringpiece
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
statusor
.
h
>
namespace
google
{
namespace
protobuf
{
class
Enum
;
}
namespace
protobuf
{
namespace
util
{
namespace
converter
{
class
LIBPROTOBUF_EXPORT
DataPiece
{
public
:
enum
Type
{
TYPE_INT32
=
1
TYPE_INT64
=
2
TYPE_UINT32
=
3
TYPE_UINT64
=
4
TYPE_DOUBLE
=
5
TYPE_FLOAT
=
6
TYPE_BOOL
=
7
TYPE_ENUM
=
8
TYPE_STRING
=
9
TYPE_BYTES
=
10
TYPE_NULL
=
11
}
;
explicit
DataPiece
(
const
int32
value
)
:
type_
(
TYPE_INT32
)
i32_
(
value
)
use_strict_base64_decoding_
(
false
)
{
}
explicit
DataPiece
(
const
int64
value
)
:
type_
(
TYPE_INT64
)
i64_
(
value
)
use_strict_base64_decoding_
(
false
)
{
}
explicit
DataPiece
(
const
uint32
value
)
:
type_
(
TYPE_UINT32
)
u32_
(
value
)
use_strict_base64_decoding_
(
false
)
{
}
explicit
DataPiece
(
const
uint64
value
)
:
type_
(
TYPE_UINT64
)
u64_
(
value
)
use_strict_base64_decoding_
(
false
)
{
}
explicit
DataPiece
(
const
double
value
)
:
type_
(
TYPE_DOUBLE
)
double_
(
value
)
use_strict_base64_decoding_
(
false
)
{
}
explicit
DataPiece
(
const
float
value
)
:
type_
(
TYPE_FLOAT
)
float_
(
value
)
use_strict_base64_decoding_
(
false
)
{
}
explicit
DataPiece
(
const
bool
value
)
:
type_
(
TYPE_BOOL
)
bool_
(
value
)
use_strict_base64_decoding_
(
false
)
{
}
DataPiece
(
StringPiece
value
bool
use_strict_base64_decoding
)
:
type_
(
TYPE_STRING
)
str_
(
StringPiecePod
:
:
CreateFromStringPiece
(
value
)
)
use_strict_base64_decoding_
(
use_strict_base64_decoding
)
{
}
DataPiece
(
StringPiece
value
bool
dummy
bool
use_strict_base64_decoding
)
:
type_
(
TYPE_BYTES
)
str_
(
StringPiecePod
:
:
CreateFromStringPiece
(
value
)
)
use_strict_base64_decoding_
(
use_strict_base64_decoding
)
{
}
DataPiece
(
const
DataPiece
&
r
)
:
type_
(
r
.
type_
)
{
InternalCopy
(
r
)
;
}
DataPiece
&
operator
=
(
const
DataPiece
&
x
)
{
InternalCopy
(
x
)
;
return
*
this
;
}
static
DataPiece
NullData
(
)
{
return
DataPiece
(
TYPE_NULL
0
)
;
}
virtual
~
DataPiece
(
)
{
}
Type
type
(
)
const
{
return
type_
;
}
bool
use_strict_base64_decoding
(
)
{
return
use_strict_base64_decoding_
;
}
StringPiece
str
(
)
const
{
GOOGLE_LOG_IF
(
DFATAL
type_
!
=
TYPE_STRING
)
<
<
"
Not
a
string
type
.
"
;
return
str_
;
}
util
:
:
StatusOr
<
int32
>
ToInt32
(
)
const
;
util
:
:
StatusOr
<
uint32
>
ToUint32
(
)
const
;
util
:
:
StatusOr
<
int64
>
ToInt64
(
)
const
;
util
:
:
StatusOr
<
uint64
>
ToUint64
(
)
const
;
util
:
:
StatusOr
<
double
>
ToDouble
(
)
const
;
util
:
:
StatusOr
<
float
>
ToFloat
(
)
const
;
util
:
:
StatusOr
<
bool
>
ToBool
(
)
const
;
util
:
:
StatusOr
<
string
>
ToString
(
)
const
;
string
ValueAsStringOrDefault
(
StringPiece
default_string
)
const
;
util
:
:
StatusOr
<
string
>
ToBytes
(
)
const
;
util
:
:
StatusOr
<
int
>
ToEnum
(
const
google
:
:
protobuf
:
:
Enum
*
enum_type
bool
use_lower_camel_for_enums
)
const
;
private
:
DataPiece
(
)
;
DataPiece
(
Type
type
int32
val
)
:
type_
(
type
)
i32_
(
val
)
use_strict_base64_decoding_
(
false
)
{
}
template
<
typename
To
>
util
:
:
StatusOr
<
To
>
GenericConvert
(
)
const
;
template
<
typename
To
>
util
:
:
StatusOr
<
To
>
StringToNumber
(
bool
(
*
func
)
(
StringPiece
To
*
)
)
const
;
bool
DecodeBase64
(
StringPiece
src
string
*
dest
)
const
;
void
InternalCopy
(
const
DataPiece
&
other
)
;
Type
type_
;
typedef
:
:
google
:
:
protobuf
:
:
internal
:
:
StringPiecePod
StringPiecePod
;
union
{
int32
i32_
;
int64
i64_
;
uint32
u32_
;
uint64
u64_
;
double
double_
;
float
float_
;
bool
bool_
;
StringPiecePod
str_
;
}
;
bool
use_strict_base64_decoding_
;
}
;
}
}
}
}
#
endif
