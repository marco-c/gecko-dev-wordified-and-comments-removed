#
ifndef
GOOGLE_PROTOBUF_UTIL_CONVERTER_DEFAULT_VALUE_OBJECTWRITER_H__
#
define
GOOGLE_PROTOBUF_UTIL_CONVERTER_DEFAULT_VALUE_OBJECTWRITER_H__
#
include
<
memory
>
#
ifndef
_SHARED_PTR_H
#
include
<
google
/
protobuf
/
stubs
/
shared_ptr
.
h
>
#
endif
#
include
<
stack
>
#
include
<
vector
>
#
include
<
google
/
protobuf
/
stubs
/
callback
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
type_info
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
datapiece
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
object_writer
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
utility
.
h
>
#
include
<
google
/
protobuf
/
util
/
type_resolver
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
stringpiece
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
namespace
converter
{
class
LIBPROTOBUF_EXPORT
DefaultValueObjectWriter
:
public
ObjectWriter
{
public
:
typedef
ResultCallback2
<
bool
const
std
:
:
vector
<
string
>
&
const
google
:
:
protobuf
:
:
Field
*
>
FieldScrubCallBack
;
typedef
google
:
:
protobuf
:
:
scoped_ptr
<
FieldScrubCallBack
>
FieldScrubCallBackPtr
;
DefaultValueObjectWriter
(
TypeResolver
*
type_resolver
const
google
:
:
protobuf
:
:
Type
&
type
ObjectWriter
*
ow
)
;
virtual
~
DefaultValueObjectWriter
(
)
;
virtual
DefaultValueObjectWriter
*
StartObject
(
StringPiece
name
)
;
virtual
DefaultValueObjectWriter
*
EndObject
(
)
;
virtual
DefaultValueObjectWriter
*
StartList
(
StringPiece
name
)
;
virtual
DefaultValueObjectWriter
*
EndList
(
)
;
virtual
DefaultValueObjectWriter
*
RenderBool
(
StringPiece
name
bool
value
)
;
virtual
DefaultValueObjectWriter
*
RenderInt32
(
StringPiece
name
int32
value
)
;
virtual
DefaultValueObjectWriter
*
RenderUint32
(
StringPiece
name
uint32
value
)
;
virtual
DefaultValueObjectWriter
*
RenderInt64
(
StringPiece
name
int64
value
)
;
virtual
DefaultValueObjectWriter
*
RenderUint64
(
StringPiece
name
uint64
value
)
;
virtual
DefaultValueObjectWriter
*
RenderDouble
(
StringPiece
name
double
value
)
;
virtual
DefaultValueObjectWriter
*
RenderFloat
(
StringPiece
name
float
value
)
;
virtual
DefaultValueObjectWriter
*
RenderString
(
StringPiece
name
StringPiece
value
)
;
virtual
DefaultValueObjectWriter
*
RenderBytes
(
StringPiece
name
StringPiece
value
)
;
virtual
DefaultValueObjectWriter
*
RenderNull
(
StringPiece
name
)
;
void
RegisterFieldScrubCallBack
(
FieldScrubCallBackPtr
field_scrub_callback
)
;
void
set_suppress_empty_list
(
bool
value
)
{
suppress_empty_list_
=
value
;
}
void
set_preserve_proto_field_names
(
bool
value
)
{
preserve_proto_field_names_
=
value
;
}
protected
:
enum
NodeKind
{
PRIMITIVE
=
0
OBJECT
=
1
LIST
=
2
MAP
=
3
}
;
class
LIBPROTOBUF_EXPORT
Node
{
public
:
Node
(
const
string
&
name
const
google
:
:
protobuf
:
:
Type
*
type
NodeKind
kind
const
DataPiece
&
data
bool
is_placeholder
const
std
:
:
vector
<
string
>
&
path
bool
suppress_empty_list
FieldScrubCallBack
*
field_scrub_callback
)
;
Node
(
const
string
&
name
const
google
:
:
protobuf
:
:
Type
*
type
NodeKind
kind
const
DataPiece
&
data
bool
is_placeholder
const
std
:
:
vector
<
string
>
&
path
bool
suppress_empty_list
bool
preserve_proto_field_names
FieldScrubCallBack
*
field_scrub_callback
)
;
virtual
~
Node
(
)
{
for
(
int
i
=
0
;
i
<
children_
.
size
(
)
;
+
+
i
)
{
delete
children_
[
i
]
;
}
}
void
AddChild
(
Node
*
child
)
{
children_
.
push_back
(
child
)
;
}
Node
*
FindChild
(
StringPiece
name
)
;
virtual
void
PopulateChildren
(
const
TypeInfo
*
typeinfo
)
;
virtual
void
WriteTo
(
ObjectWriter
*
ow
)
;
const
string
&
name
(
)
const
{
return
name_
;
}
const
std
:
:
vector
<
string
>
&
path
(
)
const
{
return
path_
;
}
const
google
:
:
protobuf
:
:
Type
*
type
(
)
const
{
return
type_
;
}
void
set_type
(
const
google
:
:
protobuf
:
:
Type
*
type
)
{
type_
=
type
;
}
NodeKind
kind
(
)
const
{
return
kind_
;
}
int
number_of_children
(
)
const
{
return
children_
.
size
(
)
;
}
void
set_data
(
const
DataPiece
&
data
)
{
data_
=
data
;
}
bool
is_any
(
)
const
{
return
is_any_
;
}
void
set_is_any
(
bool
is_any
)
{
is_any_
=
is_any
;
}
void
set_is_placeholder
(
bool
is_placeholder
)
{
is_placeholder_
=
is_placeholder
;
}
protected
:
const
google
:
:
protobuf
:
:
Type
*
GetMapValueType
(
const
google
:
:
protobuf
:
:
Type
&
entry_type
const
TypeInfo
*
typeinfo
)
;
void
WriteChildren
(
ObjectWriter
*
ow
)
;
string
name_
;
const
google
:
:
protobuf
:
:
Type
*
type_
;
NodeKind
kind_
;
bool
is_any_
;
DataPiece
data_
;
std
:
:
vector
<
Node
*
>
children_
;
bool
is_placeholder_
;
std
:
:
vector
<
string
>
path_
;
bool
suppress_empty_list_
;
bool
preserve_proto_field_names_
;
FieldScrubCallBack
*
field_scrub_callback_
;
private
:
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
Node
)
;
}
;
virtual
Node
*
CreateNewNode
(
const
string
&
name
const
google
:
:
protobuf
:
:
Type
*
type
NodeKind
kind
const
DataPiece
&
data
bool
is_placeholder
const
std
:
:
vector
<
string
>
&
path
bool
suppress_empty_list
FieldScrubCallBack
*
field_scrub_callback
)
;
virtual
Node
*
CreateNewNode
(
const
string
&
name
const
google
:
:
protobuf
:
:
Type
*
type
NodeKind
kind
const
DataPiece
&
data
bool
is_placeholder
const
std
:
:
vector
<
string
>
&
path
bool
suppress_empty_list
bool
preserve_proto_field_names
FieldScrubCallBack
*
field_scrub_callback
)
;
static
DataPiece
CreateDefaultDataPieceForField
(
const
google
:
:
protobuf
:
:
Field
&
field
const
TypeInfo
*
typeinfo
)
;
protected
:
Node
*
current
(
)
{
return
current_
;
}
private
:
void
MaybePopulateChildrenOfAny
(
Node
*
node
)
;
void
WriteRoot
(
)
;
void
RenderDataPiece
(
StringPiece
name
const
DataPiece
&
data
)
;
static
DataPiece
FindEnumDefault
(
const
google
:
:
protobuf
:
:
Field
&
field
const
TypeInfo
*
typeinfo
)
;
const
TypeInfo
*
typeinfo_
;
bool
own_typeinfo_
;
const
google
:
:
protobuf
:
:
Type
&
type_
;
std
:
:
vector
<
string
*
>
string_values_
;
Node
*
current_
;
google
:
:
protobuf
:
:
scoped_ptr
<
Node
>
root_
;
std
:
:
stack
<
Node
*
>
stack_
;
bool
suppress_empty_list_
;
bool
preserve_proto_field_names_
;
FieldScrubCallBackPtr
field_scrub_callback_
;
ObjectWriter
*
ow_
;
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
DefaultValueObjectWriter
)
;
}
;
}
}
}
}
#
endif
