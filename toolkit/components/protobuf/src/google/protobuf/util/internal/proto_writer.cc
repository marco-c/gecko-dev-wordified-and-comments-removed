#
include
<
google
/
protobuf
/
util
/
internal
/
proto_writer
.
h
>
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
stack
>
#
include
<
unordered_set
>
#
include
<
google
/
protobuf
/
stubs
/
once
.
h
>
#
include
<
google
/
protobuf
/
wire_format_lite
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
strutil
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
statusor
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
time
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
constants
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
field_mask_utility
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
object_location_tracker
.
h
>
#
include
<
google
/
protobuf
/
util
/
internal
/
utility
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
map_util
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
namespace
converter
{
using
io
:
:
CodedOutputStream
;
using
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
;
ProtoWriter
:
:
ProtoWriter
(
TypeResolver
*
type_resolver
const
google
:
:
protobuf
:
:
Type
&
type
strings
:
:
ByteSink
*
output
ErrorListener
*
listener
)
:
master_type_
(
type
)
typeinfo_
(
TypeInfo
:
:
NewTypeInfo
(
type_resolver
)
)
own_typeinfo_
(
true
)
done_
(
false
)
ignore_unknown_fields_
(
false
)
ignore_unknown_enum_values_
(
false
)
use_lower_camel_for_enums_
(
false
)
case_insensitive_enum_parsing_
(
true
)
use_json_name_in_missing_fields_
(
false
)
element_
(
nullptr
)
size_insert_
(
)
output_
(
output
)
buffer_
(
)
adapter_
(
&
buffer_
)
stream_
(
new
CodedOutputStream
(
&
adapter_
)
)
listener_
(
listener
)
invalid_depth_
(
0
)
tracker_
(
new
ObjectLocationTracker
(
)
)
{
}
ProtoWriter
:
:
ProtoWriter
(
const
TypeInfo
*
typeinfo
const
google
:
:
protobuf
:
:
Type
&
type
strings
:
:
ByteSink
*
output
ErrorListener
*
listener
)
:
master_type_
(
type
)
typeinfo_
(
typeinfo
)
own_typeinfo_
(
false
)
done_
(
false
)
ignore_unknown_fields_
(
false
)
ignore_unknown_enum_values_
(
false
)
use_lower_camel_for_enums_
(
false
)
case_insensitive_enum_parsing_
(
true
)
use_json_name_in_missing_fields_
(
false
)
element_
(
nullptr
)
size_insert_
(
)
output_
(
output
)
buffer_
(
)
adapter_
(
&
buffer_
)
stream_
(
new
CodedOutputStream
(
&
adapter_
)
)
listener_
(
listener
)
invalid_depth_
(
0
)
tracker_
(
new
ObjectLocationTracker
(
)
)
{
}
ProtoWriter
:
:
~
ProtoWriter
(
)
{
if
(
own_typeinfo_
)
{
delete
typeinfo_
;
}
if
(
element_
=
=
nullptr
)
return
;
std
:
:
unique_ptr
<
BaseElement
>
element
(
static_cast
<
BaseElement
*
>
(
element_
.
get
(
)
)
-
>
pop
<
BaseElement
>
(
)
)
;
while
(
element
!
=
nullptr
)
{
element
.
reset
(
element
-
>
pop
<
BaseElement
>
(
)
)
;
}
}
namespace
{
inline
util
:
:
Status
WriteInt32
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
int32_t
>
i32
=
data
.
ToInt32
(
)
;
if
(
i32
.
ok
(
)
)
{
WireFormatLite
:
:
WriteInt32
(
field_number
i32
.
value
(
)
stream
)
;
}
return
i32
.
status
(
)
;
}
inline
util
:
:
Status
WriteSFixed32
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
int32_t
>
i32
=
data
.
ToInt32
(
)
;
if
(
i32
.
ok
(
)
)
{
WireFormatLite
:
:
WriteSFixed32
(
field_number
i32
.
value
(
)
stream
)
;
}
return
i32
.
status
(
)
;
}
inline
util
:
:
Status
WriteSInt32
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
int32_t
>
i32
=
data
.
ToInt32
(
)
;
if
(
i32
.
ok
(
)
)
{
WireFormatLite
:
:
WriteSInt32
(
field_number
i32
.
value
(
)
stream
)
;
}
return
i32
.
status
(
)
;
}
inline
util
:
:
Status
WriteFixed32
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
uint32_t
>
u32
=
data
.
ToUint32
(
)
;
if
(
u32
.
ok
(
)
)
{
WireFormatLite
:
:
WriteFixed32
(
field_number
u32
.
value
(
)
stream
)
;
}
return
u32
.
status
(
)
;
}
inline
util
:
:
Status
WriteUInt32
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
uint32_t
>
u32
=
data
.
ToUint32
(
)
;
if
(
u32
.
ok
(
)
)
{
WireFormatLite
:
:
WriteUInt32
(
field_number
u32
.
value
(
)
stream
)
;
}
return
u32
.
status
(
)
;
}
inline
util
:
:
Status
WriteInt64
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
int64_t
>
i64
=
data
.
ToInt64
(
)
;
if
(
i64
.
ok
(
)
)
{
WireFormatLite
:
:
WriteInt64
(
field_number
i64
.
value
(
)
stream
)
;
}
return
i64
.
status
(
)
;
}
inline
util
:
:
Status
WriteSFixed64
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
int64_t
>
i64
=
data
.
ToInt64
(
)
;
if
(
i64
.
ok
(
)
)
{
WireFormatLite
:
:
WriteSFixed64
(
field_number
i64
.
value
(
)
stream
)
;
}
return
i64
.
status
(
)
;
}
inline
util
:
:
Status
WriteSInt64
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
int64_t
>
i64
=
data
.
ToInt64
(
)
;
if
(
i64
.
ok
(
)
)
{
WireFormatLite
:
:
WriteSInt64
(
field_number
i64
.
value
(
)
stream
)
;
}
return
i64
.
status
(
)
;
}
inline
util
:
:
Status
WriteFixed64
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
uint64_t
>
u64
=
data
.
ToUint64
(
)
;
if
(
u64
.
ok
(
)
)
{
WireFormatLite
:
:
WriteFixed64
(
field_number
u64
.
value
(
)
stream
)
;
}
return
u64
.
status
(
)
;
}
inline
util
:
:
Status
WriteUInt64
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
uint64_t
>
u64
=
data
.
ToUint64
(
)
;
if
(
u64
.
ok
(
)
)
{
WireFormatLite
:
:
WriteUInt64
(
field_number
u64
.
value
(
)
stream
)
;
}
return
u64
.
status
(
)
;
}
inline
util
:
:
Status
WriteDouble
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
double
>
d
=
data
.
ToDouble
(
)
;
if
(
d
.
ok
(
)
)
{
WireFormatLite
:
:
WriteDouble
(
field_number
d
.
value
(
)
stream
)
;
}
return
d
.
status
(
)
;
}
inline
util
:
:
Status
WriteFloat
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
float
>
f
=
data
.
ToFloat
(
)
;
if
(
f
.
ok
(
)
)
{
WireFormatLite
:
:
WriteFloat
(
field_number
f
.
value
(
)
stream
)
;
}
return
f
.
status
(
)
;
}
inline
util
:
:
Status
WriteBool
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
bool
>
b
=
data
.
ToBool
(
)
;
if
(
b
.
ok
(
)
)
{
WireFormatLite
:
:
WriteBool
(
field_number
b
.
value
(
)
stream
)
;
}
return
b
.
status
(
)
;
}
inline
util
:
:
Status
WriteBytes
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
std
:
:
string
>
c
=
data
.
ToBytes
(
)
;
if
(
c
.
ok
(
)
)
{
WireFormatLite
:
:
WriteBytes
(
field_number
c
.
value
(
)
stream
)
;
}
return
c
.
status
(
)
;
}
inline
util
:
:
Status
WriteString
(
int
field_number
const
DataPiece
&
data
CodedOutputStream
*
stream
)
{
util
:
:
StatusOr
<
std
:
:
string
>
s
=
data
.
ToString
(
)
;
if
(
s
.
ok
(
)
)
{
WireFormatLite
:
:
WriteString
(
field_number
s
.
value
(
)
stream
)
;
}
return
s
.
status
(
)
;
}
std
:
:
unordered_set
<
const
google
:
:
protobuf
:
:
Field
*
>
GetRequiredFields
(
const
google
:
:
protobuf
:
:
Type
&
type
)
{
std
:
:
unordered_set
<
const
google
:
:
protobuf
:
:
Field
*
>
required
;
for
(
int
i
=
0
;
i
<
type
.
fields_size
(
)
;
i
+
+
)
{
const
google
:
:
protobuf
:
:
Field
&
field
=
type
.
fields
(
i
)
;
if
(
field
.
cardinality
(
)
=
=
google
:
:
protobuf
:
:
Field
:
:
CARDINALITY_REQUIRED
)
{
required
.
insert
(
&
field
)
;
}
}
return
required
;
}
}
ProtoWriter
:
:
ProtoElement
:
:
ProtoElement
(
const
TypeInfo
*
typeinfo
const
google
:
:
protobuf
:
:
Type
&
type
ProtoWriter
*
enclosing
)
:
BaseElement
(
nullptr
)
ow_
(
enclosing
)
parent_field_
(
nullptr
)
typeinfo_
(
typeinfo
)
proto3_
(
type
.
syntax
(
)
=
=
google
:
:
protobuf
:
:
SYNTAX_PROTO3
)
type_
(
type
)
size_index_
(
-
1
)
array_index_
(
-
1
)
oneof_indices_
(
type
.
oneofs_size
(
)
+
1
)
{
if
(
!
proto3_
)
{
required_fields_
=
GetRequiredFields
(
type_
)
;
}
}
ProtoWriter
:
:
ProtoElement
:
:
ProtoElement
(
ProtoWriter
:
:
ProtoElement
*
parent
const
google
:
:
protobuf
:
:
Field
*
field
const
google
:
:
protobuf
:
:
Type
&
type
bool
is_list
)
:
BaseElement
(
parent
)
ow_
(
this
-
>
parent
(
)
-
>
ow_
)
parent_field_
(
field
)
typeinfo_
(
this
-
>
parent
(
)
-
>
typeinfo_
)
proto3_
(
type
.
syntax
(
)
=
=
google
:
:
protobuf
:
:
SYNTAX_PROTO3
)
type_
(
type
)
size_index_
(
!
is_list
&
&
field
-
>
kind
(
)
=
=
google
:
:
protobuf
:
:
Field
:
:
TYPE_MESSAGE
?
ow_
-
>
size_insert_
.
size
(
)
:
-
1
)
array_index_
(
is_list
?
0
:
-
1
)
oneof_indices_
(
type_
.
oneofs_size
(
)
+
1
)
{
if
(
!
is_list
)
{
if
(
ow_
-
>
IsRepeated
(
*
field
)
)
{
if
(
this
-
>
parent
(
)
-
>
array_index_
>
=
0
)
this
-
>
parent
(
)
-
>
array_index_
+
+
;
}
else
if
(
!
proto3_
)
{
this
-
>
parent
(
)
-
>
RegisterField
(
field
)
;
}
if
(
field
-
>
kind
(
)
=
=
google
:
:
protobuf
:
:
Field
:
:
TYPE_MESSAGE
)
{
if
(
!
proto3_
)
{
required_fields_
=
GetRequiredFields
(
type_
)
;
}
int
start_pos
=
ow_
-
>
stream_
-
>
ByteCount
(
)
;
SizeInfo
info
=
{
start_pos
-
start_pos
}
;
ow_
-
>
size_insert_
.
push_back
(
info
)
;
}
}
}
ProtoWriter
:
:
ProtoElement
*
ProtoWriter
:
:
ProtoElement
:
:
pop
(
)
{
if
(
!
proto3_
)
{
for
(
std
:
:
unordered_set
<
const
google
:
:
protobuf
:
:
Field
*
>
:
:
iterator
it
=
required_fields_
.
begin
(
)
;
it
!
=
required_fields_
.
end
(
)
;
+
+
it
)
{
ow_
-
>
MissingField
(
ow_
-
>
use_json_name_in_missing_fields_
?
(
*
it
)
-
>
json_name
(
)
:
(
*
it
)
-
>
name
(
)
)
;
}
}
if
(
size_index_
>
=
0
)
{
ow_
-
>
size_insert_
[
size_index_
]
.
size
+
=
ow_
-
>
stream_
-
>
ByteCount
(
)
;
int
size
=
ow_
-
>
size_insert_
[
size_index_
]
.
size
;
int
length
=
CodedOutputStream
:
:
VarintSize32
(
size
)
;
for
(
ProtoElement
*
e
=
parent
(
)
;
e
!
=
nullptr
;
e
=
e
-
>
parent
(
)
)
{
if
(
e
-
>
size_index_
>
=
0
)
{
ow_
-
>
size_insert_
[
e
-
>
size_index_
]
.
size
+
=
length
;
}
}
}
return
BaseElement
:
:
pop
<
ProtoElement
>
(
)
;
}
void
ProtoWriter
:
:
ProtoElement
:
:
RegisterField
(
const
google
:
:
protobuf
:
:
Field
*
field
)
{
if
(
!
required_fields_
.
empty
(
)
&
&
field
-
>
cardinality
(
)
=
=
google
:
:
protobuf
:
:
Field
:
:
CARDINALITY_REQUIRED
)
{
required_fields_
.
erase
(
field
)
;
}
}
std
:
:
string
ProtoWriter
:
:
ProtoElement
:
:
ToString
(
)
const
{
std
:
:
string
loc
=
"
"
;
const
ProtoWriter
:
:
ProtoElement
*
now
=
this
;
std
:
:
stack
<
const
ProtoWriter
:
:
ProtoElement
*
>
element_stack
;
while
(
now
-
>
parent
(
)
!
=
nullptr
)
{
element_stack
.
push
(
now
)
;
now
=
now
-
>
parent
(
)
;
}
while
(
!
element_stack
.
empty
(
)
)
{
now
=
element_stack
.
top
(
)
;
element_stack
.
pop
(
)
;
if
(
!
ow_
-
>
IsRepeated
(
*
(
now
-
>
parent_field_
)
)
|
|
now
-
>
parent
(
)
-
>
parent_field_
!
=
now
-
>
parent_field_
)
{
std
:
:
string
name
=
now
-
>
parent_field_
-
>
name
(
)
;
int
i
=
0
;
while
(
i
<
name
.
size
(
)
&
&
(
ascii_isalnum
(
name
[
i
]
)
|
|
name
[
i
]
=
=
'
_
'
)
)
+
+
i
;
if
(
i
>
0
&
&
i
=
=
name
.
size
(
)
)
{
if
(
loc
.
empty
(
)
)
{
loc
=
name
;
}
else
{
StrAppend
(
&
loc
"
.
"
name
)
;
}
}
else
{
StrAppend
(
&
loc
"
[
\
"
"
CEscape
(
name
)
"
\
"
]
"
)
;
}
}
int
array_index_now
=
now
-
>
array_index_
;
if
(
ow_
-
>
IsRepeated
(
*
(
now
-
>
parent_field_
)
)
&
&
array_index_now
>
0
)
{
StrAppend
(
&
loc
"
[
"
array_index_now
-
1
"
]
"
)
;
}
}
return
loc
;
}
bool
ProtoWriter
:
:
ProtoElement
:
:
IsOneofIndexTaken
(
int32_t
index
)
{
return
oneof_indices_
[
index
]
;
}
void
ProtoWriter
:
:
ProtoElement
:
:
TakeOneofIndex
(
int32_t
index
)
{
oneof_indices_
[
index
]
=
true
;
}
void
ProtoWriter
:
:
InvalidName
(
StringPiece
unknown_name
StringPiece
message
)
{
listener_
-
>
InvalidName
(
location
(
)
unknown_name
message
)
;
}
void
ProtoWriter
:
:
InvalidValue
(
StringPiece
type_name
StringPiece
value
)
{
listener_
-
>
InvalidValue
(
location
(
)
type_name
value
)
;
}
void
ProtoWriter
:
:
MissingField
(
StringPiece
missing_name
)
{
listener_
-
>
MissingField
(
location
(
)
missing_name
)
;
}
ProtoWriter
*
ProtoWriter
:
:
StartObject
(
StringPiece
name
)
{
if
(
element_
=
=
nullptr
)
{
if
(
!
name
.
empty
(
)
)
{
InvalidName
(
name
"
Root
element
should
not
be
named
.
"
)
;
}
element_
.
reset
(
new
ProtoElement
(
typeinfo_
master_type_
this
)
)
;
return
this
;
}
const
google
:
:
protobuf
:
:
Field
*
field
=
BeginNamed
(
name
false
)
;
if
(
field
=
=
nullptr
)
return
this
;
if
(
!
ValidOneof
(
*
field
name
)
)
{
+
+
invalid_depth_
;
return
this
;
}
const
google
:
:
protobuf
:
:
Type
*
type
=
LookupType
(
field
)
;
if
(
type
=
=
nullptr
)
{
+
+
invalid_depth_
;
InvalidName
(
name
StrCat
(
"
Missing
descriptor
for
field
:
"
field
-
>
type_url
(
)
)
)
;
return
this
;
}
return
StartObjectField
(
*
field
*
type
)
;
}
ProtoWriter
*
ProtoWriter
:
:
EndObject
(
)
{
if
(
invalid_depth_
>
0
)
{
-
-
invalid_depth_
;
return
this
;
}
if
(
element_
!
=
nullptr
)
{
element_
.
reset
(
element_
-
>
pop
(
)
)
;
}
if
(
element_
=
=
nullptr
)
{
WriteRootMessage
(
)
;
}
return
this
;
}
ProtoWriter
*
ProtoWriter
:
:
StartList
(
StringPiece
name
)
{
const
google
:
:
protobuf
:
:
Field
*
field
=
BeginNamed
(
name
true
)
;
if
(
field
=
=
nullptr
)
return
this
;
if
(
!
ValidOneof
(
*
field
name
)
)
{
+
+
invalid_depth_
;
return
this
;
}
const
google
:
:
protobuf
:
:
Type
*
type
=
LookupType
(
field
)
;
if
(
type
=
=
nullptr
)
{
+
+
invalid_depth_
;
InvalidName
(
name
StrCat
(
"
Missing
descriptor
for
field
:
"
field
-
>
type_url
(
)
)
)
;
return
this
;
}
return
StartListField
(
*
field
*
type
)
;
}
ProtoWriter
*
ProtoWriter
:
:
EndList
(
)
{
if
(
invalid_depth_
>
0
)
{
-
-
invalid_depth_
;
}
else
if
(
element_
!
=
nullptr
)
{
element_
.
reset
(
element_
-
>
pop
(
)
)
;
}
return
this
;
}
ProtoWriter
*
ProtoWriter
:
:
RenderDataPiece
(
StringPiece
name
const
DataPiece
&
data
)
{
util
:
:
Status
status
;
if
(
invalid_depth_
>
0
)
return
this
;
const
google
:
:
protobuf
:
:
Field
*
field
=
Lookup
(
name
)
;
if
(
field
=
=
nullptr
)
return
this
;
if
(
!
ValidOneof
(
*
field
name
)
)
return
this
;
const
google
:
:
protobuf
:
:
Type
*
type
=
LookupType
(
field
)
;
if
(
type
=
=
nullptr
)
{
InvalidName
(
name
StrCat
(
"
Missing
descriptor
for
field
:
"
field
-
>
type_url
(
)
)
)
;
return
this
;
}
return
RenderPrimitiveField
(
*
field
*
type
data
)
;
}
bool
ProtoWriter
:
:
ValidOneof
(
const
google
:
:
protobuf
:
:
Field
&
field
StringPiece
unnormalized_name
)
{
if
(
element_
=
=
nullptr
)
return
true
;
if
(
field
.
oneof_index
(
)
>
0
)
{
if
(
element_
-
>
IsOneofIndexTaken
(
field
.
oneof_index
(
)
)
)
{
InvalidValue
(
"
oneof
"
StrCat
(
"
oneof
field
'
"
element_
-
>
type
(
)
.
oneofs
(
field
.
oneof_index
(
)
-
1
)
"
'
is
already
set
.
Cannot
set
'
"
unnormalized_name
"
'
"
)
)
;
return
false
;
}
element_
-
>
TakeOneofIndex
(
field
.
oneof_index
(
)
)
;
}
return
true
;
}
bool
ProtoWriter
:
:
IsRepeated
(
const
google
:
:
protobuf
:
:
Field
&
field
)
{
return
field
.
cardinality
(
)
=
=
google
:
:
protobuf
:
:
Field
:
:
CARDINALITY_REPEATED
;
}
ProtoWriter
*
ProtoWriter
:
:
StartObjectField
(
const
google
:
:
protobuf
:
:
Field
&
field
const
google
:
:
protobuf
:
:
Type
&
type
)
{
WriteTag
(
field
)
;
element_
.
reset
(
new
ProtoElement
(
element_
.
release
(
)
&
field
type
false
)
)
;
return
this
;
}
ProtoWriter
*
ProtoWriter
:
:
StartListField
(
const
google
:
:
protobuf
:
:
Field
&
field
const
google
:
:
protobuf
:
:
Type
&
type
)
{
element_
.
reset
(
new
ProtoElement
(
element_
.
release
(
)
&
field
type
true
)
)
;
return
this
;
}
util
:
:
Status
ProtoWriter
:
:
WriteEnum
(
int
field_number
const
DataPiece
&
data
const
google
:
:
protobuf
:
:
Enum
*
enum_type
CodedOutputStream
*
stream
bool
use_lower_camel_for_enums
bool
case_insensitive_enum_parsing
bool
ignore_unknown_values
)
{
bool
is_unknown_enum_value
=
false
;
util
:
:
StatusOr
<
int
>
e
=
data
.
ToEnum
(
enum_type
use_lower_camel_for_enums
case_insensitive_enum_parsing
ignore_unknown_values
&
is_unknown_enum_value
)
;
if
(
e
.
ok
(
)
&
&
!
is_unknown_enum_value
)
{
WireFormatLite
:
:
WriteEnum
(
field_number
e
.
value
(
)
stream
)
;
}
return
e
.
status
(
)
;
}
ProtoWriter
*
ProtoWriter
:
:
RenderPrimitiveField
(
const
google
:
:
protobuf
:
:
Field
&
field
const
google
:
:
protobuf
:
:
Type
&
type
const
DataPiece
&
data
)
{
util
:
:
Status
status
;
if
(
!
element_
-
>
proto3
(
)
)
{
element_
.
reset
(
new
ProtoElement
(
element_
.
release
(
)
&
field
type
false
)
)
;
}
switch
(
field
.
kind
(
)
)
{
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_INT32
:
{
status
=
WriteInt32
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_SFIXED32
:
{
status
=
WriteSFixed32
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_SINT32
:
{
status
=
WriteSInt32
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_FIXED32
:
{
status
=
WriteFixed32
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_UINT32
:
{
status
=
WriteUInt32
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_INT64
:
{
status
=
WriteInt64
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_SFIXED64
:
{
status
=
WriteSFixed64
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_SINT64
:
{
status
=
WriteSInt64
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_FIXED64
:
{
status
=
WriteFixed64
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_UINT64
:
{
status
=
WriteUInt64
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_DOUBLE
:
{
status
=
WriteDouble
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_FLOAT
:
{
status
=
WriteFloat
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_BOOL
:
{
status
=
WriteBool
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_BYTES
:
{
status
=
WriteBytes
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_STRING
:
{
status
=
WriteString
(
field
.
number
(
)
data
stream_
.
get
(
)
)
;
break
;
}
case
google
:
:
protobuf
:
:
Field
:
:
TYPE_ENUM
:
{
status
=
WriteEnum
(
field
.
number
(
)
data
typeinfo_
-
>
GetEnumByTypeUrl
(
field
.
type_url
(
)
)
stream_
.
get
(
)
use_lower_camel_for_enums_
case_insensitive_enum_parsing_
ignore_unknown_enum_values_
)
;
break
;
}
default
:
status
=
util
:
:
InvalidArgumentError
(
data
.
ValueAsStringOrDefault
(
"
"
)
)
;
}
if
(
!
status
.
ok
(
)
)
{
if
(
element_
-
>
proto3
(
)
)
{
element_
.
reset
(
new
ProtoElement
(
element_
.
release
(
)
&
field
type
false
)
)
;
}
InvalidValue
(
field
.
type_url
(
)
.
empty
(
)
?
google
:
:
protobuf
:
:
Field_Kind_Name
(
field
.
kind
(
)
)
:
field
.
type_url
(
)
status
.
message
(
)
)
;
element_
.
reset
(
element
(
)
-
>
pop
(
)
)
;
return
this
;
}
if
(
!
element_
-
>
proto3
(
)
)
element_
.
reset
(
element
(
)
-
>
pop
(
)
)
;
return
this
;
}
const
google
:
:
protobuf
:
:
Field
*
ProtoWriter
:
:
BeginNamed
(
StringPiece
name
bool
is_list
)
{
if
(
invalid_depth_
>
0
)
{
+
+
invalid_depth_
;
return
nullptr
;
}
const
google
:
:
protobuf
:
:
Field
*
field
=
Lookup
(
name
)
;
if
(
field
=
=
nullptr
)
{
+
+
invalid_depth_
;
return
nullptr
;
}
if
(
is_list
&
&
!
IsRepeated
(
*
field
)
)
{
+
+
invalid_depth_
;
InvalidName
(
name
"
Proto
field
is
not
repeating
cannot
start
list
.
"
)
;
return
nullptr
;
}
return
field
;
}
const
google
:
:
protobuf
:
:
Field
*
ProtoWriter
:
:
Lookup
(
StringPiece
unnormalized_name
)
{
ProtoElement
*
e
=
element
(
)
;
if
(
e
=
=
nullptr
)
{
InvalidName
(
unnormalized_name
"
Root
element
must
be
a
message
.
"
)
;
return
nullptr
;
}
if
(
unnormalized_name
.
empty
(
)
)
{
if
(
e
-
>
parent_field
(
)
=
=
nullptr
)
{
InvalidName
(
unnormalized_name
"
Proto
fields
must
have
a
name
.
"
)
;
}
else
if
(
!
IsRepeated
(
*
e
-
>
parent_field
(
)
)
)
{
InvalidName
(
unnormalized_name
"
Proto
fields
must
have
a
name
.
"
)
;
return
nullptr
;
}
return
e
-
>
parent_field
(
)
;
}
const
google
:
:
protobuf
:
:
Field
*
field
=
typeinfo_
-
>
FindField
(
&
e
-
>
type
(
)
unnormalized_name
)
;
if
(
field
=
=
nullptr
&
&
!
ignore_unknown_fields_
)
{
InvalidName
(
unnormalized_name
"
Cannot
find
field
.
"
)
;
}
return
field
;
}
const
google
:
:
protobuf
:
:
Type
*
ProtoWriter
:
:
LookupType
(
const
google
:
:
protobuf
:
:
Field
*
field
)
{
return
(
(
field
-
>
kind
(
)
=
=
google
:
:
protobuf
:
:
Field
:
:
TYPE_MESSAGE
|
|
field
-
>
kind
(
)
=
=
google
:
:
protobuf
:
:
Field
:
:
TYPE_GROUP
)
?
typeinfo_
-
>
GetTypeByTypeUrl
(
field
-
>
type_url
(
)
)
:
&
element_
-
>
type
(
)
)
;
}
void
ProtoWriter
:
:
WriteRootMessage
(
)
{
GOOGLE_DCHECK
(
!
done_
)
;
int
curr_pos
=
0
;
stream_
.
reset
(
nullptr
)
;
const
void
*
data
;
int
length
;
io
:
:
ArrayInputStream
input_stream
(
buffer_
.
data
(
)
buffer_
.
size
(
)
)
;
while
(
input_stream
.
Next
(
&
data
&
length
)
)
{
if
(
length
=
=
0
)
continue
;
int
num_bytes
=
length
;
if
(
!
size_insert_
.
empty
(
)
&
&
size_insert_
.
front
(
)
.
pos
-
curr_pos
<
num_bytes
)
{
num_bytes
=
size_insert_
.
front
(
)
.
pos
-
curr_pos
;
}
output_
-
>
Append
(
static_cast
<
const
char
*
>
(
data
)
num_bytes
)
;
if
(
num_bytes
<
length
)
{
input_stream
.
BackUp
(
length
-
num_bytes
)
;
}
curr_pos
+
=
num_bytes
;
if
(
!
size_insert_
.
empty
(
)
&
&
curr_pos
=
=
size_insert_
.
front
(
)
.
pos
)
{
uint8_t
insert_buffer
[
10
]
;
uint8_t
*
insert_buffer_pos
=
CodedOutputStream
:
:
WriteVarint32ToArray
(
size_insert_
.
front
(
)
.
size
insert_buffer
)
;
output_
-
>
Append
(
reinterpret_cast
<
const
char
*
>
(
insert_buffer
)
insert_buffer_pos
-
insert_buffer
)
;
size_insert_
.
pop_front
(
)
;
}
}
output_
-
>
Flush
(
)
;
stream_
.
reset
(
new
CodedOutputStream
(
&
adapter_
)
)
;
done_
=
true
;
}
void
ProtoWriter
:
:
WriteTag
(
const
google
:
:
protobuf
:
:
Field
&
field
)
{
WireFormatLite
:
:
WireType
wire_type
=
WireFormatLite
:
:
WireTypeForFieldType
(
static_cast
<
WireFormatLite
:
:
FieldType
>
(
field
.
kind
(
)
)
)
;
stream_
-
>
WriteTag
(
WireFormatLite
:
:
MakeTag
(
field
.
number
(
)
wire_type
)
)
;
}
}
}
}
}
