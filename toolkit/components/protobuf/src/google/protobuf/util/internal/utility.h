#
ifndef
GOOGLE_PROTOBUF_UTIL_CONVERTER_UTILITY_H__
#
define
GOOGLE_PROTOBUF_UTIL_CONVERTER_UTILITY_H__
#
include
<
memory
>
#
ifndef
_SHARED_PTR_H
#
include
<
google
/
protobuf
/
stubs
/
shared_ptr
.
h
>
#
endif
#
include
<
string
>
#
include
<
utility
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
logging
.
h
>
#
include
<
google
/
protobuf
/
type
.
pb
.
h
>
#
include
<
google
/
protobuf
/
repeated_field
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
stringpiece
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
strutil
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
status
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
statusor
.
h
>
namespace
google
{
namespace
protobuf
{
class
Method
;
class
Any
;
class
Bool
;
class
Option
;
class
Field
;
class
Type
;
class
Enum
;
class
EnumValue
;
}
namespace
protobuf
{
namespace
util
{
namespace
converter
{
static
const
int64
kTypeUrlSize
=
19
;
LIBPROTOBUF_EXPORT
bool
GetBoolOptionOrDefault
(
const
google
:
:
protobuf
:
:
RepeatedPtrField
<
google
:
:
protobuf
:
:
Option
>
&
options
const
string
&
option_name
bool
default_value
)
;
LIBPROTOBUF_EXPORT
int64
GetInt64OptionOrDefault
(
const
google
:
:
protobuf
:
:
RepeatedPtrField
<
google
:
:
protobuf
:
:
Option
>
&
options
const
string
&
option_name
int64
default_value
)
;
LIBPROTOBUF_EXPORT
double
GetDoubleOptionOrDefault
(
const
google
:
:
protobuf
:
:
RepeatedPtrField
<
google
:
:
protobuf
:
:
Option
>
&
options
const
string
&
option_name
double
default_value
)
;
LIBPROTOBUF_EXPORT
string
GetStringOptionOrDefault
(
const
google
:
:
protobuf
:
:
RepeatedPtrField
<
google
:
:
protobuf
:
:
Option
>
&
options
const
string
&
option_name
const
string
&
default_value
)
;
LIBPROTOBUF_EXPORT
bool
GetBoolFromAny
(
const
google
:
:
protobuf
:
:
Any
&
any
)
;
LIBPROTOBUF_EXPORT
int64
GetInt64FromAny
(
const
google
:
:
protobuf
:
:
Any
&
any
)
;
LIBPROTOBUF_EXPORT
double
GetDoubleFromAny
(
const
google
:
:
protobuf
:
:
Any
&
any
)
;
LIBPROTOBUF_EXPORT
string
GetStringFromAny
(
const
google
:
:
protobuf
:
:
Any
&
any
)
;
LIBPROTOBUF_EXPORT
const
StringPiece
GetTypeWithoutUrl
(
StringPiece
type_url
)
;
LIBPROTOBUF_EXPORT
const
string
GetFullTypeWithUrl
(
StringPiece
simple_type
)
;
const
google
:
:
protobuf
:
:
Option
*
FindOptionOrNull
(
const
google
:
:
protobuf
:
:
RepeatedPtrField
<
google
:
:
protobuf
:
:
Option
>
&
options
const
string
&
option_name
)
;
const
google
:
:
protobuf
:
:
Field
*
FindFieldInTypeOrNull
(
const
google
:
:
protobuf
:
:
Type
*
type
StringPiece
field_name
)
;
const
google
:
:
protobuf
:
:
Field
*
FindJsonFieldInTypeOrNull
(
const
google
:
:
protobuf
:
:
Type
*
type
StringPiece
json_name
)
;
const
google
:
:
protobuf
:
:
Field
*
FindFieldInTypeByNumberOrNull
(
const
google
:
:
protobuf
:
:
Type
*
type
int32
number
)
;
const
google
:
:
protobuf
:
:
EnumValue
*
FindEnumValueByNameOrNull
(
const
google
:
:
protobuf
:
:
Enum
*
enum_type
StringPiece
enum_name
)
;
const
google
:
:
protobuf
:
:
EnumValue
*
FindEnumValueByNumberOrNull
(
const
google
:
:
protobuf
:
:
Enum
*
enum_type
int32
value
)
;
const
google
:
:
protobuf
:
:
EnumValue
*
FindEnumValueByNameWithoutUnderscoreOrNull
(
const
google
:
:
protobuf
:
:
Enum
*
enum_type
StringPiece
enum_name
)
;
LIBPROTOBUF_EXPORT
string
ToCamelCase
(
const
StringPiece
input
)
;
LIBPROTOBUF_EXPORT
string
ToSnakeCase
(
StringPiece
input
)
;
LIBPROTOBUF_EXPORT
bool
IsWellKnownType
(
const
string
&
type_name
)
;
LIBPROTOBUF_EXPORT
bool
IsValidBoolString
(
const
string
&
bool_string
)
;
LIBPROTOBUF_EXPORT
bool
IsMap
(
const
google
:
:
protobuf
:
:
Field
&
field
const
google
:
:
protobuf
:
:
Type
&
type
)
;
bool
IsMessageSetWireFormat
(
const
google
:
:
protobuf
:
:
Type
&
type
)
;
LIBPROTOBUF_EXPORT
string
DoubleAsString
(
double
value
)
;
LIBPROTOBUF_EXPORT
string
FloatAsString
(
float
value
)
;
template
<
typename
T
>
string
ValueAsString
(
T
value
)
{
return
SimpleItoa
(
value
)
;
}
template
<
>
inline
string
ValueAsString
(
float
value
)
{
return
FloatAsString
(
value
)
;
}
template
<
>
inline
string
ValueAsString
(
double
value
)
{
return
DoubleAsString
(
value
)
;
}
LIBPROTOBUF_EXPORT
bool
SafeStrToFloat
(
StringPiece
str
float
*
value
)
;
}
}
}
}
#
endif
