#
ifndef
GOOGLE_PROTOBUF_UTIL_FIELD_COMPARATOR_H__
#
define
GOOGLE_PROTOBUF_UTIL_FIELD_COMPARATOR_H__
#
include
<
map
>
#
include
<
string
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
namespace
google
{
namespace
protobuf
{
class
Message
;
class
EnumValueDescriptor
;
class
FieldDescriptor
;
namespace
util
{
class
FieldContext
;
class
LIBPROTOBUF_EXPORT
FieldComparator
{
public
:
FieldComparator
(
)
;
virtual
~
FieldComparator
(
)
;
enum
ComparisonResult
{
SAME
DIFFERENT
RECURSE
}
;
virtual
ComparisonResult
Compare
(
const
google
:
:
protobuf
:
:
Message
&
message_1
const
google
:
:
protobuf
:
:
Message
&
message_2
const
google
:
:
protobuf
:
:
FieldDescriptor
*
field
int
index_1
int
index_2
const
google
:
:
protobuf
:
:
util
:
:
FieldContext
*
field_context
)
=
0
;
private
:
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
FieldComparator
)
;
}
;
class
LIBPROTOBUF_EXPORT
DefaultFieldComparator
:
public
FieldComparator
{
public
:
enum
FloatComparison
{
EXACT
APPROXIMATE
}
;
DefaultFieldComparator
(
)
;
virtual
~
DefaultFieldComparator
(
)
;
virtual
ComparisonResult
Compare
(
const
google
:
:
protobuf
:
:
Message
&
message_1
const
google
:
:
protobuf
:
:
Message
&
message_2
const
google
:
:
protobuf
:
:
FieldDescriptor
*
field
int
index_1
int
index_2
const
google
:
:
protobuf
:
:
util
:
:
FieldContext
*
field_context
)
;
void
set_float_comparison
(
FloatComparison
float_comparison
)
{
float_comparison_
=
float_comparison
;
}
FloatComparison
float_comparison
(
)
const
{
return
float_comparison_
;
}
void
set_treat_nan_as_equal
(
bool
treat_nan_as_equal
)
{
treat_nan_as_equal_
=
treat_nan_as_equal
;
}
bool
treat_nan_as_equal
(
)
const
{
return
treat_nan_as_equal_
;
}
void
SetFractionAndMargin
(
const
FieldDescriptor
*
field
double
fraction
double
margin
)
;
void
SetDefaultFractionAndMargin
(
double
fraction
double
margin
)
;
private
:
struct
Tolerance
{
double
fraction
;
double
margin
;
Tolerance
(
)
:
fraction
(
0
.
0
)
margin
(
0
.
0
)
{
}
Tolerance
(
double
f
double
m
)
:
fraction
(
f
)
margin
(
m
)
{
}
}
;
typedef
std
:
:
map
<
const
FieldDescriptor
*
Tolerance
>
ToleranceMap
;
bool
CompareBool
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
bool
value_1
bool
value_2
)
{
return
value_1
=
=
value_2
;
}
bool
CompareDouble
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
double
value_1
double
value_2
)
;
bool
CompareEnum
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
const
EnumValueDescriptor
*
value_1
const
EnumValueDescriptor
*
value_2
)
;
bool
CompareFloat
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
float
value_1
float
value_2
)
;
bool
CompareInt32
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
int32
value_1
int32
value_2
)
{
return
value_1
=
=
value_2
;
}
bool
CompareInt64
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
int64
value_1
int64
value_2
)
{
return
value_1
=
=
value_2
;
}
bool
CompareString
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
const
string
&
value_1
const
string
&
value_2
)
{
return
value_1
=
=
value_2
;
}
bool
CompareUInt32
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
uint32
value_1
uint32
value_2
)
{
return
value_1
=
=
value_2
;
}
bool
CompareUInt64
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
uint64
value_1
uint64
value_2
)
{
return
value_1
=
=
value_2
;
}
template
<
typename
T
>
bool
CompareDoubleOrFloat
(
const
google
:
:
protobuf
:
:
FieldDescriptor
&
field
T
value_1
T
value_2
)
;
ComparisonResult
ResultFromBoolean
(
bool
boolean_result
)
const
;
FloatComparison
float_comparison_
;
bool
treat_nan_as_equal_
;
bool
has_default_tolerance_
;
Tolerance
default_tolerance_
;
ToleranceMap
map_tolerance_
;
GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
(
DefaultFieldComparator
)
;
}
;
}
}
}
#
endif
