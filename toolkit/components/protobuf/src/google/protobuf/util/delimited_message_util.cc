#
include
<
google
/
protobuf
/
util
/
delimited_message_util
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
util
{
bool
SerializeDelimitedToFileDescriptor
(
const
MessageLite
&
message
int
file_descriptor
)
{
io
:
:
FileOutputStream
output
(
file_descriptor
)
;
return
SerializeDelimitedToZeroCopyStream
(
message
&
output
)
;
}
bool
SerializeDelimitedToOstream
(
const
MessageLite
&
message
ostream
*
output
)
{
{
io
:
:
OstreamOutputStream
zero_copy_output
(
output
)
;
if
(
!
SerializeDelimitedToZeroCopyStream
(
message
&
zero_copy_output
)
)
return
false
;
}
return
output
-
>
good
(
)
;
}
bool
ParseDelimitedFromZeroCopyStream
(
MessageLite
*
message
io
:
:
ZeroCopyInputStream
*
input
bool
*
clean_eof
)
{
google
:
:
protobuf
:
:
io
:
:
CodedInputStream
coded_input
(
input
)
;
return
ParseDelimitedFromCodedStream
(
message
&
coded_input
clean_eof
)
;
}
bool
ParseDelimitedFromCodedStream
(
MessageLite
*
message
io
:
:
CodedInputStream
*
input
bool
*
clean_eof
)
{
if
(
clean_eof
!
=
NULL
)
*
clean_eof
=
false
;
int
start
=
input
-
>
CurrentPosition
(
)
;
uint32
size
;
if
(
!
input
-
>
ReadVarint32
(
&
size
)
)
{
if
(
clean_eof
!
=
NULL
)
*
clean_eof
=
input
-
>
CurrentPosition
(
)
=
=
start
;
return
false
;
}
google
:
:
protobuf
:
:
io
:
:
CodedInputStream
:
:
Limit
limit
=
input
-
>
PushLimit
(
size
)
;
if
(
!
message
-
>
MergeFromCodedStream
(
input
)
)
return
false
;
if
(
!
input
-
>
ConsumedEntireMessage
(
)
)
return
false
;
input
-
>
PopLimit
(
limit
)
;
return
true
;
}
bool
SerializeDelimitedToZeroCopyStream
(
const
MessageLite
&
message
io
:
:
ZeroCopyOutputStream
*
output
)
{
google
:
:
protobuf
:
:
io
:
:
CodedOutputStream
coded_output
(
output
)
;
return
SerializeDelimitedToCodedStream
(
message
&
coded_output
)
;
}
bool
SerializeDelimitedToCodedStream
(
const
MessageLite
&
message
io
:
:
CodedOutputStream
*
output
)
{
int
size
=
message
.
ByteSize
(
)
;
output
-
>
WriteVarint32
(
size
)
;
uint8
*
buffer
=
output
-
>
GetDirectBufferForNBytesAndAdvance
(
size
)
;
if
(
buffer
!
=
NULL
)
{
message
.
SerializeWithCachedSizesToArray
(
buffer
)
;
}
else
{
message
.
SerializeWithCachedSizes
(
output
)
;
if
(
output
-
>
HadError
(
)
)
return
false
;
}
return
true
;
}
}
}
}
