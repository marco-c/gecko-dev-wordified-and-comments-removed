#
ifndef
GOOGLE_PROTOBUF_SRC_GOOGLE_PROTOBUF_ARENAZ_SAMPLER_H__
#
define
GOOGLE_PROTOBUF_SRC_GOOGLE_PROTOBUF_ARENAZ_SAMPLER_H__
#
include
<
atomic
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
namespace
google
{
namespace
protobuf
{
namespace
internal
{
#
if
defined
(
PROTOBUF_ARENAZ_SAMPLE
)
struct
ThreadSafeArenaStats
;
void
RecordResetSlow
(
ThreadSafeArenaStats
*
info
)
;
void
RecordAllocateSlow
(
ThreadSafeArenaStats
*
info
size_t
requested
size_t
allocated
size_t
wasted
)
;
struct
ThreadSafeArenaStats
:
public
absl
:
:
profiling_internal
:
:
Sample
<
ThreadSafeArenaStats
>
{
ThreadSafeArenaStats
(
)
;
~
ThreadSafeArenaStats
(
)
;
void
PrepareForSampling
(
)
ABSL_EXCLUSIVE_LOCKS_REQUIRED
(
init_mu
)
;
std
:
:
atomic
<
int
>
num_allocations
;
std
:
:
atomic
<
int
>
num_resets
;
std
:
:
atomic
<
size_t
>
bytes_requested
;
std
:
:
atomic
<
size_t
>
bytes_allocated
;
std
:
:
atomic
<
size_t
>
bytes_wasted
;
std
:
:
atomic
<
size_t
>
max_bytes_allocated
;
std
:
:
atomic
<
uint64_t
>
thread_ids
;
static
constexpr
int
kMaxStackDepth
=
64
;
int32_t
depth
;
void
*
stack
[
kMaxStackDepth
]
;
static
void
RecordAllocateStats
(
ThreadSafeArenaStats
*
info
size_t
requested
size_t
allocated
size_t
wasted
)
{
if
(
PROTOBUF_PREDICT_TRUE
(
info
=
=
nullptr
)
)
return
;
RecordAllocateSlow
(
info
requested
allocated
wasted
)
;
}
}
;
ThreadSafeArenaStats
*
SampleSlow
(
int64_t
*
next_sample
)
;
void
UnsampleSlow
(
ThreadSafeArenaStats
*
info
)
;
class
ThreadSafeArenaStatsHandle
{
public
:
explicit
ThreadSafeArenaStatsHandle
(
)
=
default
;
explicit
ThreadSafeArenaStatsHandle
(
ThreadSafeArenaStats
*
info
)
:
info_
(
info
)
{
}
~
ThreadSafeArenaStatsHandle
(
)
{
if
(
PROTOBUF_PREDICT_TRUE
(
info_
=
=
nullptr
)
)
return
;
UnsampleSlow
(
info_
)
;
}
ThreadSafeArenaStatsHandle
(
ThreadSafeArenaStatsHandle
&
&
other
)
noexcept
:
info_
(
absl
:
:
exchange
(
other
.
info_
nullptr
)
)
{
}
ThreadSafeArenaStatsHandle
&
operator
=
(
ThreadSafeArenaStatsHandle
&
&
other
)
noexcept
{
if
(
PROTOBUF_PREDICT_FALSE
(
info_
!
=
nullptr
)
)
{
UnsampleSlow
(
info_
)
;
}
info_
=
absl
:
:
exchange
(
other
.
info_
nullptr
)
;
return
*
this
;
}
void
RecordReset
(
)
{
if
(
PROTOBUF_PREDICT_TRUE
(
info_
=
=
nullptr
)
)
return
;
RecordResetSlow
(
info_
)
;
}
ThreadSafeArenaStats
*
MutableStats
(
)
{
return
info_
;
}
friend
void
swap
(
ThreadSafeArenaStatsHandle
&
lhs
ThreadSafeArenaStatsHandle
&
rhs
)
{
std
:
:
swap
(
lhs
.
info_
rhs
.
info_
)
;
}
friend
class
ThreadSafeArenaStatsHandlePeer
;
private
:
ThreadSafeArenaStats
*
info_
=
nullptr
;
}
;
using
ThreadSafeArenazSampler
=
:
:
absl
:
:
profiling_internal
:
:
SampleRecorder
<
ThreadSafeArenaStats
>
;
extern
PROTOBUF_THREAD_LOCAL
int64_t
global_next_sample
;
inline
ThreadSafeArenaStatsHandle
Sample
(
)
{
if
(
PROTOBUF_PREDICT_TRUE
(
-
-
global_next_sample
>
0
)
)
{
return
ThreadSafeArenaStatsHandle
(
nullptr
)
;
}
return
ThreadSafeArenaStatsHandle
(
SampleSlow
(
&
global_next_sample
)
)
;
}
#
else
struct
ThreadSafeArenaStats
{
static
void
RecordAllocateStats
(
ThreadSafeArenaStats
*
size_t
size_t
size_t
)
{
}
}
;
ThreadSafeArenaStats
*
SampleSlow
(
int64_t
*
next_sample
)
;
void
UnsampleSlow
(
ThreadSafeArenaStats
*
info
)
;
class
ThreadSafeArenaStatsHandle
{
public
:
explicit
ThreadSafeArenaStatsHandle
(
)
=
default
;
explicit
ThreadSafeArenaStatsHandle
(
ThreadSafeArenaStats
*
)
{
}
void
RecordReset
(
)
{
}
ThreadSafeArenaStats
*
MutableStats
(
)
{
return
nullptr
;
}
friend
void
swap
(
ThreadSafeArenaStatsHandle
&
ThreadSafeArenaStatsHandle
&
)
{
}
private
:
friend
class
ThreadSafeArenaStatsHandlePeer
;
}
;
class
ThreadSafeArenazSampler
{
public
:
void
Unregister
(
ThreadSafeArenaStats
*
)
{
}
void
SetMaxSamples
(
int32_t
)
{
}
}
;
inline
ThreadSafeArenaStatsHandle
Sample
(
)
{
return
ThreadSafeArenaStatsHandle
(
nullptr
)
;
}
#
endif
ThreadSafeArenazSampler
&
GlobalThreadSafeArenazSampler
(
)
;
void
SetThreadSafeArenazEnabled
(
bool
enabled
)
;
void
SetThreadSafeArenazSampleParameter
(
int32_t
rate
)
;
void
SetThreadSafeArenazMaxSamples
(
int32_t
max
)
;
void
SetThreadSafeArenazGlobalNextSample
(
int64_t
next_sample
)
;
}
}
}
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
#
endif
