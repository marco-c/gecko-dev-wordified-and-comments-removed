#
ifndef
GOOGLE_PROTOBUF_METADATA_LITE_H__
#
define
GOOGLE_PROTOBUF_METADATA_LITE_H__
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
arena
.
h
>
#
include
<
google
/
protobuf
/
generated_message_util
.
h
>
namespace
google
{
namespace
protobuf
{
namespace
internal
{
template
<
class
T
class
Derived
>
class
InternalMetadataWithArenaBase
{
public
:
InternalMetadataWithArenaBase
(
)
:
ptr_
(
NULL
)
{
}
explicit
InternalMetadataWithArenaBase
(
Arena
*
arena
)
:
ptr_
(
arena
)
{
}
~
InternalMetadataWithArenaBase
(
)
{
if
(
have_unknown_fields
(
)
&
&
arena
(
)
=
=
NULL
)
{
delete
PtrValue
<
Container
>
(
)
;
}
ptr_
=
NULL
;
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
const
T
&
unknown_fields
(
)
const
{
if
(
GOOGLE_PREDICT_FALSE
(
have_unknown_fields
(
)
)
)
{
return
PtrValue
<
Container
>
(
)
-
>
unknown_fields
;
}
else
{
return
Derived
:
:
default_instance
(
)
;
}
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
T
*
mutable_unknown_fields
(
)
{
if
(
GOOGLE_PREDICT_TRUE
(
have_unknown_fields
(
)
)
)
{
return
&
PtrValue
<
Container
>
(
)
-
>
unknown_fields
;
}
else
{
return
mutable_unknown_fields_slow
(
)
;
}
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
Arena
*
arena
(
)
const
{
if
(
GOOGLE_PREDICT_FALSE
(
have_unknown_fields
(
)
)
)
{
return
PtrValue
<
Container
>
(
)
-
>
arena
;
}
else
{
return
PtrValue
<
Arena
>
(
)
;
}
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
bool
have_unknown_fields
(
)
const
{
return
PtrTag
(
)
=
=
kTagContainer
;
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
void
Swap
(
Derived
*
other
)
{
if
(
have_unknown_fields
(
)
|
|
other
-
>
have_unknown_fields
(
)
)
{
static_cast
<
Derived
*
>
(
this
)
-
>
DoSwap
(
other
-
>
mutable_unknown_fields
(
)
)
;
}
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
void
MergeFrom
(
const
Derived
&
other
)
{
if
(
other
.
have_unknown_fields
(
)
)
{
static_cast
<
Derived
*
>
(
this
)
-
>
DoMergeFrom
(
other
.
unknown_fields
(
)
)
;
}
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
void
Clear
(
)
{
if
(
have_unknown_fields
(
)
)
{
static_cast
<
Derived
*
>
(
this
)
-
>
DoClear
(
)
;
}
}
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
void
*
raw_arena_ptr
(
)
const
{
return
ptr_
;
}
private
:
void
*
ptr_
;
enum
{
kTagArena
=
0
kTagContainer
=
1
}
;
static
const
intptr_t
kPtrTagMask
=
1
;
static
const
intptr_t
kPtrValueMask
=
~
kPtrTagMask
;
GOOGLE_ATTRIBUTE_ALWAYS_INLINE
int
PtrTag
(
)
const
{
return
reinterpret_cast
<
intptr_t
>
(
ptr_
)
&
kPtrTagMask
;
}
template
<
typename
U
>
U
*
PtrValue
(
)
const
{
return
reinterpret_cast
<
U
*
>
(
reinterpret_cast
<
intptr_t
>
(
ptr_
)
&
kPtrValueMask
)
;
}
struct
Container
{
T
unknown_fields
;
Arena
*
arena
;
}
;
GOOGLE_ATTRIBUTE_NOINLINE
T
*
mutable_unknown_fields_slow
(
)
{
Arena
*
my_arena
=
arena
(
)
;
Container
*
container
=
Arena
:
:
Create
<
Container
>
(
my_arena
)
;
ptr_
=
reinterpret_cast
<
void
*
>
(
reinterpret_cast
<
intptr_t
>
(
container
)
|
kTagContainer
)
;
container
-
>
arena
=
my_arena
;
return
&
(
container
-
>
unknown_fields
)
;
}
}
;
class
InternalMetadataWithArenaLite
:
public
InternalMetadataWithArenaBase
<
string
InternalMetadataWithArenaLite
>
{
public
:
InternalMetadataWithArenaLite
(
)
{
}
explicit
InternalMetadataWithArenaLite
(
Arena
*
arena
)
:
InternalMetadataWithArenaBase
<
string
InternalMetadataWithArenaLite
>
(
arena
)
{
}
void
DoSwap
(
string
*
other
)
{
mutable_unknown_fields
(
)
-
>
swap
(
*
other
)
;
}
void
DoMergeFrom
(
const
string
&
other
)
{
mutable_unknown_fields
(
)
-
>
append
(
other
)
;
}
void
DoClear
(
)
{
mutable_unknown_fields
(
)
-
>
clear
(
)
;
}
static
const
string
&
default_instance
(
)
{
return
GetEmptyStringAlreadyInited
(
)
;
}
}
;
}
}
}
#
endif
