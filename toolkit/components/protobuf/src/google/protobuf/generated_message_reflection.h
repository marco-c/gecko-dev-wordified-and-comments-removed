#
ifndef
GOOGLE_PROTOBUF_GENERATED_MESSAGE_REFLECTION_H__
#
define
GOOGLE_PROTOBUF_GENERATED_MESSAGE_REFLECTION_H__
#
include
<
string
>
#
include
<
vector
>
#
include
<
google
/
protobuf
/
stubs
/
casts
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
common
.
h
>
#
include
<
google
/
protobuf
/
descriptor
.
h
>
#
include
<
google
/
protobuf
/
generated_enum_reflection
.
h
>
#
include
<
google
/
protobuf
/
metadata
.
h
>
#
include
<
google
/
protobuf
/
stubs
/
once
.
h
>
#
include
<
google
/
protobuf
/
port
.
h
>
#
include
<
google
/
protobuf
/
unknown_field_set
.
h
>
#
include
<
google
/
protobuf
/
port_def
.
inc
>
#
ifdef
SWIG
#
error
"
You
cannot
SWIG
proto
headers
"
#
endif
namespace
google
{
namespace
protobuf
{
class
DescriptorPool
;
class
MapKey
;
class
MapValueRef
;
class
MessageLayoutInspector
;
class
Message
;
struct
Metadata
;
}
}
namespace
google
{
namespace
protobuf
{
namespace
internal
{
class
DefaultEmptyOneof
;
class
ReflectionAccessor
;
class
ExtensionSet
;
class
WeakFieldMap
;
struct
ReflectionSchema
{
public
:
uint32
GetObjectSize
(
)
const
{
return
static_cast
<
uint32
>
(
object_size_
)
;
}
uint32
GetFieldOffsetNonOneof
(
const
FieldDescriptor
*
field
)
const
{
GOOGLE_DCHECK
(
!
field
-
>
containing_oneof
(
)
)
;
return
OffsetValue
(
offsets_
[
field
-
>
index
(
)
]
field
-
>
type
(
)
)
;
}
uint32
GetFieldOffset
(
const
FieldDescriptor
*
field
)
const
{
if
(
field
-
>
containing_oneof
(
)
)
{
size_t
offset
=
static_cast
<
size_t
>
(
field
-
>
containing_type
(
)
-
>
field_count
(
)
+
field
-
>
containing_oneof
(
)
-
>
index
(
)
)
;
return
OffsetValue
(
offsets_
[
offset
]
field
-
>
type
(
)
)
;
}
else
{
return
GetFieldOffsetNonOneof
(
field
)
;
}
}
bool
IsFieldInlined
(
const
FieldDescriptor
*
field
)
const
{
if
(
field
-
>
containing_oneof
(
)
)
{
size_t
offset
=
static_cast
<
size_t
>
(
field
-
>
containing_type
(
)
-
>
field_count
(
)
+
field
-
>
containing_oneof
(
)
-
>
index
(
)
)
;
return
Inlined
(
offsets_
[
offset
]
field
-
>
type
(
)
)
;
}
else
{
return
Inlined
(
offsets_
[
field
-
>
index
(
)
]
field
-
>
type
(
)
)
;
}
}
uint32
GetOneofCaseOffset
(
const
OneofDescriptor
*
oneof_descriptor
)
const
{
return
static_cast
<
uint32
>
(
oneof_case_offset_
)
+
static_cast
<
uint32
>
(
static_cast
<
size_t
>
(
oneof_descriptor
-
>
index
(
)
)
*
sizeof
(
uint32
)
)
;
}
bool
HasHasbits
(
)
const
{
return
has_bits_offset_
!
=
-
1
;
}
uint32
HasBitIndex
(
const
FieldDescriptor
*
field
)
const
{
GOOGLE_DCHECK
(
HasHasbits
(
)
)
;
return
has_bit_indices_
[
field
-
>
index
(
)
]
;
}
uint32
HasBitsOffset
(
)
const
{
GOOGLE_DCHECK
(
HasHasbits
(
)
)
;
return
static_cast
<
uint32
>
(
has_bits_offset_
)
;
}
uint32
GetMetadataOffset
(
)
const
{
return
static_cast
<
uint32
>
(
metadata_offset_
)
;
}
bool
HasExtensionSet
(
)
const
{
return
extensions_offset_
!
=
-
1
;
}
uint32
GetExtensionSetOffset
(
)
const
{
GOOGLE_DCHECK
(
HasExtensionSet
(
)
)
;
return
static_cast
<
uint32
>
(
extensions_offset_
)
;
}
int
GetWeakFieldMapOffset
(
)
const
{
return
weak_field_map_offset_
;
}
bool
IsDefaultInstance
(
const
Message
&
message
)
const
{
return
&
message
=
=
default_instance_
;
}
const
void
*
GetFieldDefault
(
const
FieldDescriptor
*
field
)
const
{
return
reinterpret_cast
<
const
uint8
*
>
(
default_instance_
)
+
OffsetValue
(
offsets_
[
field
-
>
index
(
)
]
field
-
>
type
(
)
)
;
}
bool
HasWeakFields
(
)
const
{
return
weak_field_map_offset_
>
0
;
}
const
Message
*
default_instance_
;
const
uint32
*
offsets_
;
const
uint32
*
has_bit_indices_
;
int
has_bits_offset_
;
int
metadata_offset_
;
int
extensions_offset_
;
int
oneof_case_offset_
;
int
object_size_
;
int
weak_field_map_offset_
;
static
uint32
OffsetValue
(
uint32
v
FieldDescriptor
:
:
Type
type
)
{
if
(
type
=
=
FieldDescriptor
:
:
TYPE_STRING
|
|
type
=
=
FieldDescriptor
:
:
TYPE_BYTES
)
{
return
v
&
~
1u
;
}
else
{
return
v
;
}
}
static
bool
Inlined
(
uint32
v
FieldDescriptor
:
:
Type
type
)
{
if
(
type
=
=
FieldDescriptor
:
:
TYPE_STRING
|
|
type
=
=
FieldDescriptor
:
:
TYPE_BYTES
)
{
return
v
&
1u
;
}
else
{
return
false
;
}
}
}
;
struct
MigrationSchema
{
int32
offsets_index
;
int32
has_bit_indices_index
;
int
object_size
;
}
;
struct
PROTOBUF_EXPORT
DescriptorTable
{
bool
*
is_initialized
;
const
char
*
descriptor
;
const
char
*
filename
;
int
size
;
once_flag
*
once
;
SCCInfoBase
*
const
*
init_default_instances
;
const
DescriptorTable
*
const
*
deps
;
int
num_sccs
;
int
num_deps
;
const
MigrationSchema
*
schemas
;
const
Message
*
const
*
default_instances
;
const
uint32
*
offsets
;
Metadata
*
file_level_metadata
;
int
num_messages
;
const
EnumDescriptor
*
*
file_level_enum_descriptors
;
const
ServiceDescriptor
*
*
file_level_service_descriptors
;
}
;
void
PROTOBUF_EXPORT
AssignDescriptors
(
const
DescriptorTable
*
table
)
;
void
PROTOBUF_EXPORT
AddDescriptors
(
const
DescriptorTable
*
table
)
;
PROTOBUF_EXPORT
void
UnknownFieldSetSerializer
(
const
uint8
*
base
uint32
offset
uint32
tag
uint32
has_offset
io
:
:
CodedOutputStream
*
output
)
;
}
}
}
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
#
endif
