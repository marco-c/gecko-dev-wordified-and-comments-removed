Library
(
'
protobuf
'
)
with
Files
(
'
*
*
'
)
:
BUG_COMPONENT
=
(
'
Core
'
'
General
'
)
EXPORTS
.
google
.
protobuf
+
=
[
'
src
/
google
/
protobuf
/
any
.
h
'
'
src
/
google
/
protobuf
/
any
.
pb
.
h
'
'
src
/
google
/
protobuf
/
arena
.
h
'
'
src
/
google
/
protobuf
/
arena_impl
.
h
'
'
src
/
google
/
protobuf
/
arenastring
.
h
'
'
src
/
google
/
protobuf
/
arenaz_sampler
.
h
'
'
src
/
google
/
protobuf
/
descriptor
.
h
'
'
src
/
google
/
protobuf
/
descriptor
.
pb
.
h
'
'
src
/
google
/
protobuf
/
descriptor_database
.
h
'
'
src
/
google
/
protobuf
/
dynamic_message
.
h
'
'
src
/
google
/
protobuf
/
endian
.
h
'
'
src
/
google
/
protobuf
/
explicitly_constructed
.
h
'
'
src
/
google
/
protobuf
/
extension_set
.
h
'
'
src
/
google
/
protobuf
/
extension_set_inl
.
h
'
'
src
/
google
/
protobuf
/
generated_enum_reflection
.
h
'
'
src
/
google
/
protobuf
/
generated_enum_util
.
h
'
'
src
/
google
/
protobuf
/
generated_message_reflection
.
h
'
'
src
/
google
/
protobuf
/
generated_message_tctable_decl
.
h
'
'
src
/
google
/
protobuf
/
generated_message_tctable_impl
.
h
'
'
src
/
google
/
protobuf
/
generated_message_util
.
h
'
'
src
/
google
/
protobuf
/
has_bits
.
h
'
'
src
/
google
/
protobuf
/
implicit_weak_message
.
h
'
'
src
/
google
/
protobuf
/
inlined_string_field
.
h
'
'
src
/
google
/
protobuf
/
map
.
h
'
'
src
/
google
/
protobuf
/
map_entry
.
h
'
'
src
/
google
/
protobuf
/
map_entry_lite
.
h
'
'
src
/
google
/
protobuf
/
map_field
.
h
'
'
src
/
google
/
protobuf
/
map_field_inl
.
h
'
'
src
/
google
/
protobuf
/
map_field_lite
.
h
'
'
src
/
google
/
protobuf
/
map_type_handler
.
h
'
'
src
/
google
/
protobuf
/
message
.
h
'
'
src
/
google
/
protobuf
/
message_lite
.
h
'
'
src
/
google
/
protobuf
/
metadata_lite
.
h
'
'
src
/
google
/
protobuf
/
parse_context
.
h
'
'
src
/
google
/
protobuf
/
port
.
h
'
'
src
/
google
/
protobuf
/
port_def
.
inc
'
'
src
/
google
/
protobuf
/
port_undef
.
inc
'
'
src
/
google
/
protobuf
/
reflection
.
h
'
'
src
/
google
/
protobuf
/
reflection_internal
.
h
'
'
src
/
google
/
protobuf
/
reflection_ops
.
h
'
'
src
/
google
/
protobuf
/
repeated_field
.
h
'
'
src
/
google
/
protobuf
/
repeated_ptr_field
.
h
'
'
src
/
google
/
protobuf
/
source_context
.
pb
.
h
'
'
src
/
google
/
protobuf
/
text_format
.
h
'
'
src
/
google
/
protobuf
/
type
.
pb
.
h
'
'
src
/
google
/
protobuf
/
unknown_field_set
.
h
'
'
src
/
google
/
protobuf
/
wire_format
.
h
'
'
src
/
google
/
protobuf
/
wire_format_lite
.
h
'
]
EXPORTS
.
google
.
protobuf
.
io
+
=
[
'
src
/
google
/
protobuf
/
io
/
coded_stream
.
h
'
'
src
/
google
/
protobuf
/
io
/
gzip_stream
.
h
'
'
src
/
google
/
protobuf
/
io
/
io_win32
.
h
'
'
src
/
google
/
protobuf
/
io
/
strtod
.
h
'
'
src
/
google
/
protobuf
/
io
/
tokenizer
.
h
'
'
src
/
google
/
protobuf
/
io
/
zero_copy_stream
.
h
'
'
src
/
google
/
protobuf
/
io
/
zero_copy_stream_impl
.
h
'
'
src
/
google
/
protobuf
/
io
/
zero_copy_stream_impl_lite
.
h
'
]
EXPORTS
.
google
.
protobuf
.
stubs
+
=
[
'
src
/
google
/
protobuf
/
stubs
/
bytestream
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
callback
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
casts
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
common
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
hash
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
int128
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
logging
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
macros
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
map_util
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
mutex
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
once
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
platform_macros
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
port
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
status
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
stl_util
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
stringpiece
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
stringprintf
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
strutil
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
substitute
.
h
'
'
src
/
google
/
protobuf
/
stubs
/
time
.
h
'
]
EXPORTS
.
google
.
protobuf
.
util
+
=
[
'
src
/
google
/
protobuf
/
util
/
json_util
.
h
'
'
src
/
google
/
protobuf
/
util
/
type_resolver
.
h
'
'
src
/
google
/
protobuf
/
util
/
type_resolver_util
.
h
'
]
UNIFIED_SOURCES
+
=
[
'
src
/
google
/
protobuf
/
arena
.
cc
'
'
src
/
google
/
protobuf
/
arenastring
.
cc
'
'
src
/
google
/
protobuf
/
io
/
zero_copy_stream
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
stringpiece
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
structurally_valid
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
strutil
.
cc
'
]
SOURCES
+
=
[
'
src
/
google
/
protobuf
/
any
.
cc
'
'
src
/
google
/
protobuf
/
any_lite
.
cc
'
'
src
/
google
/
protobuf
/
descriptor
.
cc
'
'
src
/
google
/
protobuf
/
descriptor
.
pb
.
cc
'
'
src
/
google
/
protobuf
/
descriptor_database
.
cc
'
'
src
/
google
/
protobuf
/
dynamic_message
.
cc
'
'
src
/
google
/
protobuf
/
extension_set
.
cc
'
'
src
/
google
/
protobuf
/
extension_set_heavy
.
cc
'
'
src
/
google
/
protobuf
/
generated_enum_util
.
cc
'
'
src
/
google
/
protobuf
/
generated_message_reflection
.
cc
'
'
src
/
google
/
protobuf
/
generated_message_tctable_lite
.
cc
'
'
src
/
google
/
protobuf
/
generated_message_util
.
cc
'
'
src
/
google
/
protobuf
/
implicit_weak_message
.
cc
'
'
src
/
google
/
protobuf
/
io
/
coded_stream
.
cc
'
'
src
/
google
/
protobuf
/
io
/
gzip_stream
.
cc
'
'
src
/
google
/
protobuf
/
io
/
io_win32
.
cc
'
'
src
/
google
/
protobuf
/
io
/
strtod
.
cc
'
'
src
/
google
/
protobuf
/
io
/
tokenizer
.
cc
'
'
src
/
google
/
protobuf
/
io
/
zero_copy_stream_impl
.
cc
'
'
src
/
google
/
protobuf
/
io
/
zero_copy_stream_impl_lite
.
cc
'
'
src
/
google
/
protobuf
/
map
.
cc
'
'
src
/
google
/
protobuf
/
map_field
.
cc
'
'
src
/
google
/
protobuf
/
message
.
cc
'
'
src
/
google
/
protobuf
/
message_lite
.
cc
'
'
src
/
google
/
protobuf
/
parse_context
.
cc
'
'
src
/
google
/
protobuf
/
reflection_ops
.
cc
'
'
src
/
google
/
protobuf
/
repeated_field
.
cc
'
'
src
/
google
/
protobuf
/
repeated_ptr_field
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
common
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
int128
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
status
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
stringprintf
.
cc
'
'
src
/
google
/
protobuf
/
stubs
/
substitute
.
cc
'
'
src
/
google
/
protobuf
/
text_format
.
cc
'
'
src
/
google
/
protobuf
/
unknown_field_set
.
cc
'
'
src
/
google
/
protobuf
/
wire_format
.
cc
'
'
src
/
google
/
protobuf
/
wire_format_lite
.
cc
'
]
AllowCompilerWarnings
(
)
FINAL_LIBRARY
=
'
xul
'
DEFINES
[
'
GOOGLE_PROTOBUF_NO_RTTI
'
]
=
True
DEFINES
[
'
GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
'
]
=
True
if
CONFIG
[
'
CC_TYPE
'
]
in
(
'
clang
'
'
gcc
'
)
:
CXXFLAGS
+
=
[
'
-
Wno
-
ignored
-
qualifiers
'
'
-
Wno
-
maybe
-
uninitialized
'
'
-
Wno
-
return
-
type
'
'
-
Wno
-
sign
-
compare
'
'
-
Wno
-
subobject
-
linkage
'
'
-
Wno
-
unused
-
function
'
]
if
CONFIG
[
'
CC_TYPE
'
]
=
=
'
clang
'
:
CXXFLAGS
+
=
[
'
-
Wno
-
comma
'
'
-
Wno
-
null
-
conversion
'
'
-
Wno
-
unused
-
local
-
typedef
'
]
elif
CONFIG
[
'
CC_TYPE
'
]
=
=
'
clang
-
cl
'
:
CXXFLAGS
+
=
[
'
-
Wno
-
macro
-
redefined
'
'
-
Wno
-
sign
-
compare
'
]
if
CONFIG
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
DEFINES
[
'
NOGDI
'
]
=
True
if
CONFIG
[
'
MOZ_USE_PTHREADS
'
]
:
DEFINES
[
'
HAVE_PTHREAD
'
]
=
True
DEFINES
[
'
HAVE_ZLIB
'
]
=
True
if
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
gtk
"
:
CXXFLAGS
+
=
CONFIG
[
'
MOZ_GTK3_CFLAGS
'
]
if
CONFIG
[
'
TARGET_CPU
'
]
in
(
'
mips32
'
'
mips64
'
)
:
DEFINES
[
'
musttail
'
]
=
'
nomusttail
'
