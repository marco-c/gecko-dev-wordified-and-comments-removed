#
include
"
nsRFPService
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIPrefBranch
.
h
"
#
include
"
nsIPrefService
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
prenv
.
h
"
using
namespace
mozilla
;
#
define
RESIST_FINGERPRINTING_PREF
"
privacy
.
resistFingerprinting
"
NS_IMPL_ISUPPORTS
(
nsRFPService
nsIObserver
)
static
StaticRefPtr
<
nsRFPService
>
sRFPService
;
static
bool
sInitialized
=
false
;
bool
nsRFPService
:
:
sPrivacyResistFingerprinting
=
false
;
nsRFPService
*
nsRFPService
:
:
GetOrCreate
(
)
{
if
(
!
sInitialized
)
{
sRFPService
=
new
nsRFPService
(
)
;
nsresult
rv
=
sRFPService
-
>
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
sRFPService
=
nullptr
;
return
nullptr
;
}
ClearOnShutdown
(
&
sRFPService
)
;
sInitialized
=
true
;
}
return
sRFPService
;
}
nsresult
nsRFPService
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsresult
rv
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
NS_ENSURE_TRUE
(
obs
NS_ERROR_NOT_AVAILABLE
)
;
rv
=
obs
-
>
AddObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIPrefBranch
>
prefs
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
prefs
NS_ERROR_NOT_AVAILABLE
)
;
rv
=
prefs
-
>
AddObserver
(
RESIST_FINGERPRINTING_PREF
this
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
const
char
*
tzValue
=
PR_GetEnv
(
"
TZ
"
)
;
if
(
tzValue
)
{
mInitialTZValue
=
nsCString
(
tzValue
)
;
}
UpdatePref
(
)
;
return
rv
;
}
void
nsRFPService
:
:
UpdatePref
(
)
{
sPrivacyResistFingerprinting
=
Preferences
:
:
GetBool
(
RESIST_FINGERPRINTING_PREF
)
;
if
(
sPrivacyResistFingerprinting
)
{
PR_SetEnv
(
"
TZ
=
UTC
"
)
;
}
else
if
(
sInitialized
)
{
if
(
!
mInitialTZValue
.
IsEmpty
(
)
)
{
nsAutoCString
tzValue
=
NS_LITERAL_CSTRING
(
"
TZ
=
"
)
+
mInitialTZValue
;
PR_SetEnv
(
tzValue
.
get
(
)
)
;
}
else
{
#
if
defined
(
XP_LINUX
)
|
|
defined
(
XP_MACOSX
)
PR_SetEnv
(
"
TZ
=
:
/
etc
/
localtime
"
)
;
#
else
PR_SetEnv
(
"
TZ
=
"
)
;
#
endif
}
}
nsJSUtils
:
:
ResetTimeZone
(
)
;
}
void
nsRFPService
:
:
StartShutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
RemoveObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
;
nsCOMPtr
<
nsIPrefBranch
>
prefs
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
if
(
prefs
)
{
prefs
-
>
RemoveObserver
(
RESIST_FINGERPRINTING_PREF
this
)
;
}
}
}
NS_IMETHODIMP
nsRFPService
:
:
Observe
(
nsISupports
*
aObject
const
char
*
aTopic
const
char16_t
*
aMessage
)
{
if
(
!
strcmp
(
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
aTopic
)
)
{
NS_ConvertUTF16toUTF8
pref
(
aMessage
)
;
if
(
pref
.
EqualsLiteral
(
RESIST_FINGERPRINTING_PREF
)
)
{
UpdatePref
(
)
;
}
}
if
(
!
strcmp
(
NS_XPCOM_SHUTDOWN_OBSERVER_ID
aTopic
)
)
{
StartShutdown
(
)
;
}
return
NS_OK
;
}
