#
include
<
math
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
nsRFPService
.
h
"
using
namespace
mozilla
;
void
process
(
double
clock
nsRFPService
:
:
TimeScale
clockUnits
double
precision
)
{
double
reduced1
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
clock
clockUnits
precision
)
;
double
reduced2
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
reduced1
clockUnits
precision
)
;
ASSERT_EQ
(
reduced1
reduced2
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Assumptions
)
{
ASSERT_EQ
(
FLT_RADIX
2
)
;
ASSERT_EQ
(
DBL_MANT_DIG
53
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Reciprocal
)
{
process
(
2064
.
8338460
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
20
)
;
process
(
1516305819
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
20
)
;
process
(
69053
.
12
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
20
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_KnownGood
)
{
process
(
2064
.
8338460
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
69027
.
62
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
69053
.
12
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_KnownBad
)
{
process
(
1054
.
842405
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
273
.
53038600000002
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
628
.
66686500000003
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
521
.
28919100000007
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Edge
)
{
process
(
2611
.
14
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
2611
.
16
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
2612
.
16
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
2601
.
64
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
2595
.
16
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
process
(
2578
.
66
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_ExpectedLossOfPrecision
)
{
double
result
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
9007199254740992
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
5
)
;
ASSERT_EQ
(
result
9007199254740990
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
9007199254740995
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
5
)
;
ASSERT_EQ
(
result
9007199254740996
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
9007199254740999
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
5
)
;
ASSERT_EQ
(
result
9007199254741000
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
9007199254743568
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
5
)
;
ASSERT_EQ
(
result
9007199254743564
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Expectations
)
{
double
result
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
14
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
145
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
141
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
159
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
15
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
13
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
20
)
;
ASSERT_EQ
(
result
2611
.
12
)
;
}
#
define
RAND_DOUBLE
(
rand
(
)
*
(
rand
(
)
/
(
double
)
rand
(
)
)
)
#
define
RUN_AGGRESSIVE
true
TEST
(
ResistFingerprinting
ReducePrecision_Aggressive
)
{
if
(
!
RUN_AGGRESSIVE
)
{
return
;
}
for
(
int
i
=
0
;
i
<
10000
;
i
+
+
)
{
double
time1_s
=
fmod
(
RAND_DOUBLE
1516305819
)
;
double
time1_ms
=
fmod
(
RAND_DOUBLE
1516305819000
)
;
double
time1_us
=
fmod
(
RAND_DOUBLE
1516305819000000
)
;
double
time2_s
=
fmod
(
RAND_DOUBLE
(
60
*
60
*
5
)
)
;
double
time2_ms
=
fmod
(
RAND_DOUBLE
(
1000
*
60
*
60
*
5
)
)
;
double
time2_us
=
fmod
(
RAND_DOUBLE
(
1000000
*
60
*
60
*
5
)
)
;
double
time3_s
=
fmod
(
RAND_DOUBLE
10
)
;
double
time3_ms
=
fmod
(
RAND_DOUBLE
10000
)
;
double
time3_us
=
fmod
(
RAND_DOUBLE
10000000
)
;
double
precision1
=
rand
(
)
%
250000
;
double
precision2
=
rand
(
)
%
200
;
process
(
time1_s
nsRFPService
:
:
TimeScale
:
:
Seconds
precision1
)
;
process
(
time1_s
nsRFPService
:
:
TimeScale
:
:
Seconds
precision2
)
;
process
(
time2_s
nsRFPService
:
:
TimeScale
:
:
Seconds
precision1
)
;
process
(
time2_s
nsRFPService
:
:
TimeScale
:
:
Seconds
precision2
)
;
process
(
time3_s
nsRFPService
:
:
TimeScale
:
:
Seconds
precision1
)
;
process
(
time3_s
nsRFPService
:
:
TimeScale
:
:
Seconds
precision2
)
;
process
(
time1_ms
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
precision1
)
;
process
(
time1_ms
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
precision2
)
;
process
(
time2_ms
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
precision1
)
;
process
(
time2_ms
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
precision2
)
;
process
(
time3_ms
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
precision1
)
;
process
(
time3_ms
nsRFPService
:
:
TimeScale
:
:
MilliSeconds
precision2
)
;
process
(
time1_us
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
precision1
)
;
process
(
time1_us
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
precision2
)
;
process
(
time2_us
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
precision1
)
;
process
(
time2_us
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
precision2
)
;
process
(
time3_us
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
precision1
)
;
process
(
time3_us
nsRFPService
:
:
TimeScale
:
:
MicroSeconds
precision2
)
;
}
}
