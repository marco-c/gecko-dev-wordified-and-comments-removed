#
include
<
math
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
nsRFPService
.
h
"
using
namespace
mozilla
;
void
process
(
double
clock
double
precision
double
precisionUnits
)
{
double
reduced1
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
clock
precision
precisionUnits
)
;
double
reduced2
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
reduced1
precision
precisionUnits
)
;
ASSERT_EQ
(
reduced1
reduced2
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Assumptions
)
{
ASSERT_EQ
(
FLT_RADIX
2
)
;
ASSERT_EQ
(
DBL_MANT_DIG
53
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Reciprocal
)
{
process
(
2064
.
8338460
20
1000000
)
;
process
(
1516305819
20
1000000
)
;
process
(
69053
.
12
20
1000000
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_KnownGood
)
{
process
(
2064
.
8338460
20
1000
)
;
process
(
69027
.
62
20
1000
)
;
process
(
69053
.
12
20
1000
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_KnownBad
)
{
process
(
1054
.
842405
20
1000
)
;
process
(
273
.
53038600000002
20
1000
)
;
process
(
628
.
66686500000003
20
1000
)
;
process
(
521
.
28919100000007
20
1000
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Edge
)
{
process
(
2611
.
14
20
1000
)
;
process
(
2611
.
16
20
1000
)
;
process
(
2612
.
16
20
1000
)
;
process
(
2601
.
64
20
1000
)
;
process
(
2595
.
16
20
1000
)
;
process
(
2578
.
66
20
1000
)
;
}
TEST
(
ResistFingerprinting
ReducePrecision_Expectations
)
{
double
result
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
14
20
1000
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
145
20
1000
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
141
20
1000
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
15999
20
1000
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
15
20
1000
)
;
ASSERT_EQ
(
result
2611
.
14
)
;
result
=
nsRFPService
:
:
ReduceTimePrecisionImpl
(
2611
.
13
20
1000
)
;
ASSERT_EQ
(
result
2611
.
12
)
;
}
#
define
RAND_DOUBLE
(
rand
(
)
*
(
rand
(
)
/
(
double
)
rand
(
)
)
)
TEST
(
ResistFingerprinting
ReducePrecision_Aggressive
)
{
for
(
int
i
=
0
;
i
<
10000
;
i
+
+
)
{
double
time1_s
=
fmod
(
RAND_DOUBLE
1516305819
)
;
double
time1_ms
=
fmod
(
RAND_DOUBLE
1516305819000
)
;
double
time1_us
=
fmod
(
RAND_DOUBLE
1516305819000000
)
;
double
time2_s
=
fmod
(
RAND_DOUBLE
(
60
*
60
*
5
)
)
;
double
time2_ms
=
fmod
(
RAND_DOUBLE
(
1000
*
60
*
60
*
5
)
)
;
double
time2_us
=
fmod
(
RAND_DOUBLE
(
1000000
*
60
*
60
*
5
)
)
;
double
time3_s
=
fmod
(
RAND_DOUBLE
10
)
;
double
time3_ms
=
fmod
(
RAND_DOUBLE
10000
)
;
double
time3_us
=
fmod
(
RAND_DOUBLE
10000000
)
;
double
precision1
=
rand
(
)
%
250000
;
double
precision2
=
rand
(
)
%
200
;
process
(
time1_s
precision1
1000000
)
;
process
(
time1_s
precision2
1000000
)
;
process
(
time2_s
precision1
1000000
)
;
process
(
time2_s
precision2
1000000
)
;
process
(
time3_s
precision1
1000000
)
;
process
(
time3_s
precision2
1000000
)
;
process
(
time1_ms
precision1
1000
)
;
process
(
time1_ms
precision2
1000
)
;
process
(
time2_ms
precision1
1000
)
;
process
(
time2_ms
precision2
1000
)
;
process
(
time3_ms
precision1
1000
)
;
process
(
time3_ms
precision2
1000
)
;
process
(
time1_us
precision1
1
)
;
process
(
time1_us
precision2
1
)
;
process
(
time2_us
precision1
1
)
;
process
(
time2_us
precision2
1
)
;
process
(
time3_us
precision1
1
)
;
process
(
time3_us
precision2
1
)
;
}
}
