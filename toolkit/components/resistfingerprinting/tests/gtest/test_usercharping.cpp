#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gtest
/
nsUserCharacteristics
.
h
"
#
include
"
mozilla
/
glean
/
GleanPings
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
using
namespace
mozilla
;
const
auto
*
const
kUUIDPref
=
"
toolkit
.
telemetry
.
user_characteristics_ping
.
uuid
"
;
TEST
(
ResistFingerprinting
UserCharacteristics_Simple
)
{
mozilla
:
:
glean
:
:
characteristics
:
:
max_touch_points
.
Set
(
7
)
;
bool
submitted
=
false
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
TestBeforeNextSubmit
(
[
&
submitted
]
(
const
nsACString
&
aReason
)
{
submitted
=
true
;
ASSERT_EQ
(
7
mozilla
:
:
glean
:
:
characteristics
:
:
max_touch_points
.
TestGetValue
(
)
.
unwrap
(
)
.
ref
(
)
)
;
}
)
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
Submit
(
)
;
ASSERT_TRUE
(
submitted
)
;
}
TEST
(
ResistFingerprinting
UserCharacteristics_Complex
)
{
nsUserCharacteristics
:
:
PopulateDataAndEventuallySubmit
(
false
true
)
;
bool
submitted
=
false
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
TestBeforeNextSubmit
(
[
&
submitted
]
(
const
nsACString
&
aReason
)
{
submitted
=
true
;
ASSERT_STRNE
(
"
"
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
TestGetValue
(
)
.
unwrap
(
)
.
value
(
)
.
get
(
)
)
;
nsCString
fullUuidStr
;
Preferences
:
:
GetCString
(
kUUIDPref
fullUuidStr
)
;
nsAutoCString
uuidString
;
uuidString
=
Substring
(
fullUuidStr
1
NSID_LENGTH
-
3
)
;
ASSERT_STREQ
(
uuidString
.
get
(
)
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
TestGetValue
(
)
.
unwrap
(
)
.
value
(
)
.
get
(
)
)
;
ASSERT_EQ
(
testing
:
:
MaxTouchPoints
(
)
mozilla
:
:
glean
:
:
characteristics
:
:
max_touch_points
.
TestGetValue
(
)
.
unwrap
(
)
.
ref
(
)
)
;
}
)
;
nsUserCharacteristics
:
:
SubmitPing
(
)
;
ASSERT_TRUE
(
submitted
)
;
}
TEST
(
ResistFingerprinting
UserCharacteristics_ClearPref
)
{
nsCString
originalUUID
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
TestBeforeNextSubmit
(
[
&
originalUUID
]
(
const
nsACString
&
aReason
)
{
originalUUID
=
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
TestGetValue
(
)
.
unwrap
(
)
.
value
(
)
.
get
(
)
;
ASSERT_STRNE
(
"
"
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
TestGetValue
(
)
.
unwrap
(
)
.
value
(
)
.
get
(
)
)
;
nsCString
fullUuidStr
;
Preferences
:
:
GetCString
(
kUUIDPref
fullUuidStr
)
;
nsAutoCString
uuidString
;
uuidString
=
Substring
(
fullUuidStr
1
NSID_LENGTH
-
3
)
;
ASSERT_STREQ
(
uuidString
.
get
(
)
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
TestGetValue
(
)
.
unwrap
(
)
.
value
(
)
.
get
(
)
)
;
}
)
;
nsUserCharacteristics
:
:
PopulateDataAndEventuallySubmit
(
false
true
)
;
nsUserCharacteristics
:
:
SubmitPing
(
)
;
auto
original_value
=
Preferences
:
:
GetBool
(
"
datareporting
.
healthreport
.
uploadEnabled
"
)
;
Preferences
:
:
SetBool
(
"
datareporting
.
healthreport
.
uploadEnabled
"
true
)
;
Preferences
:
:
SetBool
(
"
datareporting
.
healthreport
.
uploadEnabled
"
false
)
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
TestBeforeNextSubmit
(
[
]
(
const
nsACString
&
aReason
)
{
nsAutoCString
uuidValue
;
Preferences
:
:
GetCString
(
kUUIDPref
uuidValue
)
;
ASSERT_STREQ
(
"
"
uuidValue
.
get
(
)
)
;
}
)
;
nsUserCharacteristics
:
:
SubmitPing
(
)
;
Preferences
:
:
SetBool
(
"
datareporting
.
healthreport
.
uploadEnabled
"
true
)
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
TestBeforeNextSubmit
(
[
&
originalUUID
]
(
const
nsACString
&
aReason
)
{
ASSERT_STRNE
(
originalUUID
.
get
(
)
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
TestGetValue
(
)
.
unwrap
(
)
.
value
(
)
.
get
(
)
)
;
nsAutoCString
uuidValue
;
Preferences
:
:
GetCString
(
kUUIDPref
uuidValue
)
;
ASSERT_STRNE
(
"
"
uuidValue
.
get
(
)
)
;
}
)
;
nsUserCharacteristics
:
:
PopulateDataAndEventuallySubmit
(
false
true
)
;
nsUserCharacteristics
:
:
SubmitPing
(
)
;
Preferences
:
:
SetBool
(
"
datareporting
.
healthreport
.
uploadEnabled
"
original_value
)
;
}
