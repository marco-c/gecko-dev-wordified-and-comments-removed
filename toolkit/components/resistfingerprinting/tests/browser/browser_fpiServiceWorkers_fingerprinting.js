runTestInFirstAndThirdPartyContexts
(
"
ServiceWorkers
-
Check
that
RFP
correctly
is
exempted
and
not
exempted
when
FPI
is
enabled
"
async
win
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
firstParty
.
isolate
"
false
]
[
"
privacy
.
resistFingerprinting
"
false
]
]
}
)
;
var
DEFAULT_HARDWARE_CONCURRENCY
=
navigator
.
hardwareConcurrency
;
await
SpecialPowers
.
popPrefEnv
(
)
;
if
(
!
win
.
sw
)
{
win
.
sw
=
await
registerServiceWorker
(
win
"
serviceWorker
.
js
"
)
;
}
let
res
=
await
sendAndWaitWorkerMessage
(
win
.
sw
win
.
navigator
.
serviceWorker
{
type
:
"
GetHWConcurrency
"
}
)
;
console
.
info
(
"
First
Party
got
:
"
+
res
.
value
+
"
Expected
:
"
+
DEFAULT_HARDWARE_CONCURRENCY
)
;
is
(
res
.
value
DEFAULT_HARDWARE_CONCURRENCY
"
As
a
first
party
HW
Concurrency
should
not
be
spoofed
"
)
;
}
async
win
=
>
{
let
SPOOFED_HW_CONCURRENCY
=
2
;
if
(
!
win
.
sw
)
{
win
.
sw
=
await
registerServiceWorker
(
win
"
serviceWorker
.
js
"
)
;
}
let
res
=
await
sendAndWaitWorkerMessage
(
win
.
sw
win
.
navigator
.
serviceWorker
{
type
:
"
GetHWConcurrency
"
}
)
;
console
.
info
(
"
Third
Party
got
:
"
+
res
.
value
+
"
Expected
:
"
+
SPOOFED_HW_CONCURRENCY
)
;
is
(
res
.
value
SPOOFED_HW_CONCURRENCY
"
As
a
third
party
HW
Concurrency
should
be
spoofed
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
[
[
"
dom
.
serviceWorkers
.
exemptFromPerDomainMax
"
true
]
[
"
dom
.
ipc
.
processCount
"
1
]
[
"
dom
.
serviceWorkers
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
[
"
privacy
.
firstparty
.
isolate
"
true
]
[
"
privacy
.
resistFingerprinting
"
true
]
[
"
privacy
.
resistFingerprinting
.
exemptedDomains
"
"
example
.
com
"
]
]
)
;
