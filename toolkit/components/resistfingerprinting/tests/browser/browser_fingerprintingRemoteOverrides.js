"
use
strict
"
;
const
{
RemoteSettings
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
)
;
const
COLLECTION_NAME
=
"
fingerprinting
-
protection
-
overrides
"
;
const
TARGET_DEFAULT
=
extractLow32Bits
(
Services
.
rfp
.
enabledFingerprintingProtections
)
;
const
TARGET_PointerEvents
=
0x00000002
;
const
TARGET_CanvasRandomization
=
0x000000100
;
const
TARGET_WindowOuterSize
=
0x002000000
;
const
TARGET_Gamepad
=
0x00800000
;
const
TEST_PAGE
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
empty
.
html
"
;
const
TEST_ANOTHER_PAGE
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
net
"
)
+
"
empty
.
html
"
;
function
extractLow32Bits
(
value
)
{
return
value
&
0xffffffff
;
}
const
TEST_CASES
=
[
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
"
firstPartyDomain
:
"
example
.
org
"
}
]
expects
:
[
{
domain
:
"
example
.
org
"
overrides
:
TARGET_DEFAULT
|
TARGET_WindowOuterSize
}
{
domain
:
"
example
.
com
"
noEntry
:
true
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
-
WindowOuterSize
"
firstPartyDomain
:
"
example
.
org
"
}
]
expects
:
[
{
domain
:
"
example
.
org
"
overrides
:
TARGET_DEFAULT
&
~
TARGET_WindowOuterSize
}
{
domain
:
"
example
.
com
"
noEntry
:
true
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
-
CanvasRandomization
"
firstPartyDomain
:
"
example
.
org
"
}
]
expects
:
[
{
domain
:
"
example
.
org
"
overrides
:
TARGET_DEFAULT
&
~
TARGET_CanvasRandomization
}
{
domain
:
"
example
.
com
"
noEntry
:
true
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
+
PointerEvents
-
Gamepad
"
firstPartyDomain
:
"
example
.
org
"
}
]
expects
:
[
{
domain
:
"
example
.
org
"
overrides
:
(
TARGET_DEFAULT
|
TARGET_WindowOuterSize
|
TARGET_PointerEvents
)
&
~
TARGET_Gamepad
}
{
domain
:
"
example
.
com
"
noEntry
:
true
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
+
PointerEvents
-
Gamepad
"
firstPartyDomain
:
"
example
.
org
"
}
{
id
:
"
2
"
last_modified
:
1000000000000001
overrides
:
"
+
Gamepad
"
firstPartyDomain
:
"
example
.
com
"
}
]
expects
:
[
{
domain
:
"
example
.
org
"
overrides
:
(
TARGET_DEFAULT
|
TARGET_WindowOuterSize
|
TARGET_PointerEvents
)
&
~
TARGET_Gamepad
}
{
domain
:
"
example
.
com
"
overrides
:
TARGET_DEFAULT
|
TARGET_Gamepad
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
+
PointerEvents
-
Gamepad
"
firstPartyDomain
:
"
example
.
org
"
thirdPartyDomain
:
"
example
.
com
"
}
]
expects
:
[
{
domain
:
"
example
.
org
example
.
com
"
overrides
:
(
TARGET_DEFAULT
|
TARGET_WindowOuterSize
|
TARGET_PointerEvents
)
&
~
TARGET_Gamepad
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
+
PointerEvents
-
Gamepad
"
firstPartyDomain
:
"
*
"
}
]
expects
:
[
{
domain
:
"
*
"
overrides
:
(
TARGET_DEFAULT
|
TARGET_WindowOuterSize
|
TARGET_PointerEvents
)
&
~
TARGET_Gamepad
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
+
PointerEvents
-
Gamepad
"
firstPartyDomain
:
"
*
"
thirdPartyDomain
:
"
example
.
com
"
}
]
expects
:
[
{
domain
:
"
*
example
.
com
"
overrides
:
(
TARGET_DEFAULT
|
TARGET_WindowOuterSize
|
TARGET_PointerEvents
)
&
~
TARGET_Gamepad
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
-
AllTargets
+
WindowOuterSize
"
firstPartyDomain
:
"
*
"
thirdPartyDomain
:
"
example
.
com
"
}
]
expects
:
[
{
domain
:
"
*
example
.
com
"
overrides
:
TARGET_WindowOuterSize
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
-
AllTargets
+
WindowOuterSize
+
Gamepad
"
firstPartyDomain
:
"
*
"
thirdPartyDomain
:
"
example
.
com
"
}
]
expects
:
[
{
domain
:
"
*
example
.
com
"
overrides
:
TARGET_WindowOuterSize
|
TARGET_Gamepad
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
+
PointerEvents
-
Gamepad
"
thirdPartyDomain
:
"
example
.
com
"
}
]
expects
:
[
{
domain
:
"
example
.
com
"
noEntry
:
true
}
]
}
{
entires
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
+
PointerEvents
-
Gamepad
"
firstPartyDomain
:
"
*
"
thirdPartyDomain
:
"
*
"
}
]
expects
:
[
{
domain
:
"
example
.
org
"
noEntry
:
true
}
]
}
]
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
fingerprintingProtection
.
remoteOverrides
.
testing
"
true
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
rfp
.
cleanAllOverrides
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_remote_settings
(
)
{
let
db
=
RemoteSettings
(
COLLECTION_NAME
)
.
db
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
[
]
)
;
for
(
let
test
of
TEST_CASES
)
{
info
(
Testing
with
entry
{
JSON
.
stringify
(
test
.
entires
)
}
)
;
let
promise
=
promiseObserver
(
"
fpp
-
test
:
set
-
overrides
-
finishes
"
)
;
await
RemoteSettings
(
COLLECTION_NAME
)
.
emit
(
"
sync
"
{
data
:
{
current
:
test
.
entires
}
}
)
;
await
promise
;
ok
(
true
"
Got
overrides
update
"
)
;
for
(
let
expect
of
test
.
expects
)
{
try
{
let
overrides
=
extractLow32Bits
(
Services
.
rfp
.
getFingerprintingOverrides
(
expect
.
domain
)
)
;
is
(
overrides
expect
.
overrides
"
The
override
value
is
correct
.
"
)
;
}
catch
(
e
)
{
ok
(
expect
.
noEntry
"
The
override
entry
doesn
'
t
exist
.
"
)
;
}
}
}
db
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_pref
(
)
{
for
(
let
test
of
TEST_CASES
)
{
info
(
Testing
with
entry
{
JSON
.
stringify
(
test
.
entires
)
}
)
;
let
promise
=
promiseObserver
(
"
fpp
-
test
:
set
-
overrides
-
finishes
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
fingerprintingProtection
.
granularOverrides
"
JSON
.
stringify
(
test
.
entires
)
]
]
}
)
;
await
promise
;
ok
(
true
"
Got
overrides
update
"
)
;
for
(
let
expect
of
test
.
expects
)
{
try
{
let
overrides
=
extractLow32Bits
(
Services
.
rfp
.
getFingerprintingOverrides
(
expect
.
domain
)
)
;
is
(
overrides
expect
.
overrides
"
The
override
value
is
correct
.
"
)
;
}
catch
(
e
)
{
ok
(
expect
.
noEntry
"
The
override
entry
doesn
'
t
exist
.
"
)
;
}
}
}
}
)
;
add_task
(
async
function
test_pref_override_remote_settings
(
)
{
let
db
=
RemoteSettings
(
COLLECTION_NAME
)
.
db
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
[
]
)
;
let
promise
=
promiseObserver
(
"
fpp
-
test
:
set
-
overrides
-
finishes
"
)
;
await
RemoteSettings
(
COLLECTION_NAME
)
.
emit
(
"
sync
"
{
data
:
{
current
:
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
WindowOuterSize
"
firstPartyDomain
:
"
example
.
org
"
}
]
}
}
)
;
await
promise
;
promise
=
promiseObserver
(
"
fpp
-
test
:
set
-
overrides
-
finishes
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
fingerprintingProtection
.
granularOverrides
"
JSON
.
stringify
(
[
{
id
:
"
1
"
last_modified
:
1000000000000001
overrides
:
"
+
PointerEvents
-
WindowOuterSize
-
Gamepad
"
firstPartyDomain
:
"
example
.
org
"
}
]
)
]
]
}
)
;
await
promise
;
let
overrides
=
extractLow32Bits
(
Services
.
rfp
.
getFingerprintingOverrides
(
"
example
.
org
"
)
)
;
is
(
overrides
(
TARGET_DEFAULT
|
TARGET_PointerEvents
)
&
~
TARGET_Gamepad
&
~
TARGET_WindowOuterSize
"
The
override
addition
value
is
correct
.
"
)
;
db
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_beacon_request
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
TEST_ANOTHER_PAGE
]
async
url
=
>
{
let
ifr
=
content
.
document
.
createElement
(
"
iframe
"
)
;
await
new
content
.
Promise
(
resolve
=
>
{
ifr
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
ifr
)
;
ifr
.
src
=
url
;
}
)
;
await
SpecialPowers
.
spawn
(
ifr
[
url
]
url
=
>
{
content
.
addEventListener
(
"
unload
"
_
=
>
{
let
value
=
[
"
text
"
]
;
let
blob
=
new
Blob
(
value
{
type
:
"
application
/
x
-
www
-
form
-
urlencoded
"
}
)
;
content
.
navigator
.
sendBeacon
(
url
blob
)
;
}
)
;
}
)
;
content
.
location
=
url
;
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
TEST_ANOTHER_PAGE
)
;
ok
(
true
"
Successfully
navigates
away
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
