"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
TEST_PAGE_NORMAL
=
TEST_PATH
+
"
empty
.
html
"
;
const
TEST_PAGE_FINGERPRINTER
=
TEST_PATH
+
"
font
-
fingerprinter
.
html
"
;
const
TELEMETRY_FONT_FINGERPRINTING_PER_TAB
=
"
FONT_FINGERPRINTING_PER_TAB
"
;
async
function
clearTelemetry
(
)
{
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
true
)
;
Services
.
telemetry
.
getHistogramById
(
TELEMETRY_FONT_FINGERPRINTING_PER_TAB
)
.
clear
(
)
;
}
async
function
getHistogram
(
histogram_id
bucket
checkCntFn
)
{
let
histogram
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
.
parent
;
histogram
=
histograms
[
histogram_id
]
;
let
checkRes
=
false
;
if
(
histogram
)
{
checkRes
=
checkCntFn
?
checkCntFn
(
histogram
.
values
[
bucket
]
)
:
true
;
}
return
checkRes
;
}
)
;
return
histogram
.
values
[
bucket
]
|
|
0
;
}
async
function
checkHistogram
(
histogram_id
bucket
expectedCnt
)
{
let
cnt
=
await
getHistogram
(
histogram_id
bucket
cnt
=
>
{
if
(
cnt
=
=
=
undefined
)
{
cnt
=
0
;
}
return
cnt
=
=
expectedCnt
;
}
)
;
is
(
cnt
expectedCnt
"
There
should
be
expected
count
in
telemetry
.
"
)
;
}
add_setup
(
async
function
(
)
{
await
clearTelemetry
(
)
;
}
)
;
add_task
(
async
function
test_canvas_fingerprinting_telemetry
(
)
{
let
promiseWindowDestroyed
=
BrowserUtils
.
promiseObserved
(
"
window
-
global
-
destroyed
"
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_PAGE_NORMAL
async
_
=
>
{
}
)
;
await
promiseWindowDestroyed
;
await
checkHistogram
(
TELEMETRY_FONT_FINGERPRINTING_PER_TAB
0
1
)
;
await
clearTelemetry
(
)
;
}
)
;
add_task
(
async
function
test_canvas_fingerprinting_telemetry
(
)
{
let
promiseWindowDestroyed
=
BrowserUtils
.
promiseObserved
(
"
window
-
global
-
destroyed
"
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_PAGE_FINGERPRINTER
async
_
=
>
{
}
)
;
await
promiseWindowDestroyed
;
await
checkHistogram
(
TELEMETRY_FONT_FINGERPRINTING_PER_TAB
1
1
)
;
await
clearTelemetry
(
)
;
}
)
;
