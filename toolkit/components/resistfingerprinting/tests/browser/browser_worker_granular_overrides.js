const
getTimezoneOffset
=
async
win
=
>
{
return
await
runFunctionInWorker
(
win
async
(
)
=
>
{
await
getJSTestingFunctions
(
)
.
setTimeZone
(
"
PST8PDT
"
)
;
const
date
=
new
Date
(
)
;
const
offset
=
date
.
getTimezoneOffset
(
)
;
await
getJSTestingFunctions
(
)
.
setTimeZone
(
undefined
)
;
return
offset
;
}
)
;
}
;
let
realOffset
=
Number
.
MAX_SAFE_INTEGER
;
add_setup
(
async
(
)
=
>
{
await
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
setTimeZone
(
"
PST8PDT
"
)
;
realOffset
=
new
Date
(
)
.
getTimezoneOffset
(
)
;
}
)
;
const
createMessage
=
(
scope
isFirstParty
expected
)
=
>
For
scope
{
scope
}
timezone
offset
should
be
{
expected
}
in
the
worker
in
the
{
isFirstParty
?
"
first
-
party
"
:
"
third
-
party
"
}
context
;
const
runTest
=
async
(
browser
expected
scope
isFirstParty
)
=
>
{
const
timeZoneOffset
=
await
getTimezoneOffset
(
browser
)
;
info
(
"
Got
:
"
+
timeZoneOffset
)
;
is
(
timeZoneOffset
expected
createMessage
(
scope
isFirstParty
expected
)
)
;
}
;
const
basePrefs
=
[
[
"
privacy
.
fingerprintingProtection
"
true
]
[
"
privacy
.
fingerprintingProtection
.
overrides
"
"
+
JSDateTimeUTC
"
]
[
"
privacy
.
resistFingerprinting
"
false
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
]
;
add_task
(
async
(
)
=
>
{
const
scope
=
"
{
*
}
"
;
await
firstAndThirdPartyContextRunner
(
async
browser
=
>
runTest
(
browser
realOffset
scope
true
)
async
browser
=
>
runTest
(
browser
realOffset
scope
false
)
[
.
.
.
basePrefs
[
"
privacy
.
fingerprintingProtection
.
granularOverrides
"
JSON
.
stringify
(
[
{
firstPartyDomain
:
"
*
"
overrides
:
"
-
JSDateTimeUTC
"
}
]
)
]
]
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
scope
=
"
{
firstPartyDomain
*
}
"
;
await
firstAndThirdPartyContextRunner
(
async
browser
=
>
runTest
(
browser
realOffset
scope
true
)
async
browser
=
>
runTest
(
browser
realOffset
scope
false
)
[
.
.
.
basePrefs
[
"
privacy
.
fingerprintingProtection
.
granularOverrides
"
JSON
.
stringify
(
[
{
firstPartyDomain
:
"
example
.
com
"
thirdPartyDomain
:
"
*
"
overrides
:
"
-
JSDateTimeUTC
"
}
]
)
]
]
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
scope
=
"
{
firstPartyDomain
}
"
;
await
firstAndThirdPartyContextRunner
(
async
browser
=
>
runTest
(
browser
realOffset
scope
true
)
async
browser
=
>
runTest
(
browser
0
scope
false
)
[
.
.
.
basePrefs
[
"
privacy
.
fingerprintingProtection
.
granularOverrides
"
JSON
.
stringify
(
[
{
firstPartyDomain
:
"
example
.
com
"
overrides
:
"
-
JSDateTimeUTC
"
}
]
)
]
]
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
scope
=
"
{
*
third
-
party
domain
}
"
;
await
firstAndThirdPartyContextRunner
(
async
browser
=
>
runTest
(
browser
0
scope
true
)
async
browser
=
>
runTest
(
browser
realOffset
scope
false
)
[
.
.
.
basePrefs
[
"
privacy
.
fingerprintingProtection
.
granularOverrides
"
JSON
.
stringify
(
[
{
firstPartyDomain
:
"
*
"
thirdPartyDomain
:
"
example
.
net
"
overrides
:
"
-
JSDateTimeUTC
"
}
]
)
]
]
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
scope
=
"
{
firstPartyDomain
thirdPartyDomain
}
"
;
await
firstAndThirdPartyContextRunner
(
async
browser
=
>
runTest
(
browser
0
scope
true
)
async
browser
=
>
runTest
(
browser
realOffset
scope
false
)
[
.
.
.
basePrefs
[
"
privacy
.
fingerprintingProtection
.
granularOverrides
"
JSON
.
stringify
(
[
{
firstPartyDomain
:
"
example
.
com
"
thirdPartyDomain
:
"
example
.
net
"
overrides
:
"
-
JSDateTimeUTC
"
}
]
)
]
]
)
;
}
)
;
const
firstPartyPageURL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
empty
.
html
"
;
const
thirdPartyPageURL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
net
"
)
+
"
empty
.
html
"
;
const
firstAndThirdPartyContextRunner
=
async
(
firstPartyContextTest
thirdPartyContextTest
prefs
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
prefs
}
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
firstPartyPageURL
)
;
const
firstPartyBrowser
=
tab
.
linkedBrowser
;
const
thirdPartyBrowser
=
await
SpecialPowers
.
spawn
(
firstPartyBrowser
[
thirdPartyPageURL
]
async
url
=
>
{
const
w
=
content
;
const
iframe
=
w
.
document
.
createElement
(
"
iframe
"
)
;
const
{
promise
:
frameLoaded
resolve
}
=
Promise
.
withResolvers
(
)
;
iframe
.
onload
=
resolve
;
iframe
.
src
=
url
;
w
.
document
.
body
.
appendChild
(
iframe
)
;
await
frameLoaded
;
return
iframe
.
browsingContext
;
}
)
;
await
firstPartyContextTest
(
firstPartyBrowser
)
;
await
thirdPartyContextTest
(
thirdPartyBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
;
