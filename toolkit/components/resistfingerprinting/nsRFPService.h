#
ifndef
__nsRFPService_h__
#
define
__nsRFPService_h__
#
include
<
cstdint
>
#
include
<
tuple
>
#
include
<
bitset
>
#
include
"
ErrorList
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
mozilla
/
ContentBlockingLog
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
mozilla
/
dom
/
MediaDeviceInfoBinding
.
h
"
#
include
"
mozilla
/
dom
/
ScreenOrientationBinding
.
h
"
#
include
"
js
/
RealmOptions
.
h
"
#
include
"
nsHashtablesFwd
.
h
"
#
include
"
nsICookieJarSettings
.
h
"
#
include
"
nsIFingerprintingWebCompatService
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIRFPService
.
h
"
#
include
"
nsStringFwd
.
h
"
#
define
SPOOFED_UA_OS_OTHER
"
X11
;
Linux
x86_64
"
#
ifdef
XP_WIN
#
define
SPOOFED_UA_OS
"
Windows
NT
10
.
0
;
Win64
;
x64
"
#
define
SPOOFED_APPVERSION
"
5
.
0
(
Windows
)
"
#
define
SPOOFED_OSCPU
"
Windows
NT
10
.
0
;
Win64
;
x64
"
#
define
SPOOFED_MAX_TOUCH_POINTS
10
#
elif
defined
(
XP_MACOSX
)
#
define
SPOOFED_UA_OS
"
Macintosh
;
Intel
Mac
OS
X
10
.
15
"
#
define
SPOOFED_APPVERSION
"
5
.
0
(
Macintosh
)
"
#
define
SPOOFED_OSCPU
"
Intel
Mac
OS
X
10
.
15
"
#
define
SPOOFED_MAX_TOUCH_POINTS
0
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
#
define
SPOOFED_UA_OS
"
Android
10
;
Mobile
"
#
define
SPOOFED_APPVERSION
"
5
.
0
(
Android
10
)
"
#
define
SPOOFED_OSCPU
"
Linux
armv81
"
#
define
SPOOFED_MAX_TOUCH_POINTS
5
#
else
#
define
SPOOFED_UA_OS
SPOOFED_UA_OS_OTHER
#
define
SPOOFED_APPVERSION
"
5
.
0
(
X11
)
"
#
define
SPOOFED_OSCPU
"
Linux
x86_64
"
#
define
SPOOFED_MAX_TOUCH_POINTS
0
#
endif
#
define
LEGACY_BUILD_ID
"
20181001000000
"
#
define
LEGACY_UA_GECKO_TRAIL
"
20100101
"
#
define
SPOOFED_POINTER_INTERFACE
MouseEvent_Binding
:
:
MOZ_SOURCE_MOUSE
struct
JSContext
;
class
nsIChannel
;
namespace
mozilla
{
class
WidgetKeyboardEvent
;
class
OriginAttributes
;
class
OriginAttributesPattern
;
namespace
dom
{
class
Document
;
enum
class
CanvasContextType
:
uint8_t
;
}
enum
KeyboardLang
{
EN
=
0x01
}
;
#
define
RFP_KEYBOARD_LANG_STRING_EN
"
en
"
typedef
uint8_t
KeyboardLangs
;
enum
KeyboardRegion
{
US
=
0x01
}
;
#
define
RFP_KEYBOARD_REGION_STRING_US
"
US
"
typedef
uint8_t
KeyboardRegions
;
struct
SpoofingKeyboardCode
{
CodeNameIndex
mCode
;
uint8_t
mKeyCode
;
Modifiers
mModifierStates
;
}
;
struct
SpoofingKeyboardInfo
{
nsString
mKey
;
KeyNameIndex
mKeyIdx
;
SpoofingKeyboardCode
mSpoofingCode
;
}
;
class
KeyboardHashKey
:
public
PLDHashEntryHdr
{
public
:
typedef
const
KeyboardHashKey
&
KeyType
;
typedef
const
KeyboardHashKey
*
KeyTypePointer
;
KeyboardHashKey
(
const
KeyboardLangs
aLang
const
KeyboardRegions
aRegion
const
KeyNameIndexType
aKeyIdx
const
nsAString
&
aKey
)
;
explicit
KeyboardHashKey
(
KeyTypePointer
aOther
)
;
KeyboardHashKey
(
KeyboardHashKey
&
&
aOther
)
noexcept
;
~
KeyboardHashKey
(
)
;
bool
KeyEquals
(
KeyTypePointer
aOther
)
const
;
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
;
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
;
enum
{
ALLOW_MEMMOVE
=
true
}
;
KeyboardLangs
mLang
;
KeyboardRegions
mRegion
;
KeyNameIndexType
mKeyIdx
;
nsString
mKey
;
}
;
enum
class
RTPCallerType
:
uint8_t
{
Normal
=
0
SystemPrincipal
=
(
1
<
<
0
)
ResistFingerprinting
=
(
1
<
<
1
)
CrossOriginIsolated
=
(
1
<
<
2
)
}
;
inline
JS
:
:
RTPCallerTypeToken
RTPCallerTypeToToken
(
RTPCallerType
aType
)
{
return
JS
:
:
RTPCallerTypeToken
{
uint8_t
(
aType
)
}
;
}
inline
RTPCallerType
RTPCallerTypeFromToken
(
JS
:
:
RTPCallerTypeToken
aToken
)
{
MOZ_RELEASE_ASSERT
(
aToken
.
value
=
=
uint8_t
(
RTPCallerType
:
:
Normal
)
|
|
aToken
.
value
=
=
uint8_t
(
RTPCallerType
:
:
SystemPrincipal
)
|
|
aToken
.
value
=
=
uint8_t
(
RTPCallerType
:
:
ResistFingerprinting
)
|
|
aToken
.
value
=
=
uint8_t
(
RTPCallerType
:
:
CrossOriginIsolated
)
)
;
return
static_cast
<
RTPCallerType
>
(
aToken
.
value
)
;
}
enum
TimerPrecisionType
{
DangerouslyNone
=
1
UnconditionalAKAHighRes
=
2
Normal
=
3
RFP
=
4
}
;
enum
class
CanvasFeatureUsage
:
uint8_t
{
None
=
0
KnownFingerprintText
=
1
<
<
0
SetFont
=
1
<
<
1
FillRect
=
1
<
<
2
LineTo
=
1
<
<
3
Stroke
=
1
<
<
4
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
CanvasFeatureUsage
)
;
class
CanvasUsage
{
public
:
CSSIntSize
mSize
;
dom
:
:
CanvasContextType
mType
;
CanvasFeatureUsage
mFeatureUsage
;
CanvasUsage
(
CSSIntSize
aSize
dom
:
:
CanvasContextType
aType
CanvasFeatureUsage
aFeatureUsage
)
:
mSize
(
aSize
)
mType
(
aType
)
mFeatureUsage
(
aFeatureUsage
)
{
}
}
;
#
define
ITEM_VALUE
(
name
val
)
name
=
val
enum
class
RFPTarget
:
uint64_t
{
#
include
"
RFPTargets
.
inc
"
}
;
#
undef
ITEM_VALUE
using
RFPTargetSet
=
EnumSet
<
RFPTarget
std
:
:
bitset
<
128
>
>
;
template
<
>
struct
MaxEnumValue
<
RFPTarget
>
{
static
constexpr
unsigned
int
value
=
127
;
}
;
class
nsRFPService
final
:
public
nsIObserver
public
nsIRFPService
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIRFPSERVICE
static
already_AddRefed
<
nsRFPService
>
GetOrCreate
(
)
;
static
bool
IsRFPPrefEnabled
(
bool
aIsPrivateMode
)
;
static
bool
IsRFPEnabledFor
(
bool
aIsPrivateMode
RFPTarget
aTarget
const
Maybe
<
RFPTargetSet
>
&
aOverriddenFingerprintingSettings
)
;
static
bool
IsSystemPrincipalOrAboutFingerprintingProtection
(
JSContext
*
JSObject
*
)
;
static
double
TimerResolution
(
RTPCallerType
aRTPCallerType
)
;
enum
TimeScale
{
Seconds
=
1
MilliSeconds
=
1000
MicroSeconds
=
1000000
}
;
static
double
ReduceTimePrecisionAsUSecs
(
double
aTime
int64_t
aContextMixin
RTPCallerType
aRTPCallerType
)
;
static
double
ReduceTimePrecisionAsMSecs
(
double
aTime
int64_t
aContextMixin
RTPCallerType
aRTPCallerType
)
;
static
double
ReduceTimePrecisionAsMSecsRFPOnly
(
double
aTime
int64_t
aContextMixin
RTPCallerType
aRTPCallerType
)
;
static
double
ReduceTimePrecisionAsSecs
(
double
aTime
int64_t
aContextMixin
RTPCallerType
aRTPCallerType
)
;
static
double
ReduceTimePrecisionAsSecsRFPOnly
(
double
aTime
int64_t
aContextMixin
RTPCallerType
aRTPCallerType
)
;
static
double
ReduceTimePrecisionImpl
(
double
aTime
TimeScale
aTimeScale
double
aResolutionUSec
int64_t
aContextMixin
TimerPrecisionType
aType
)
;
static
nsresult
RandomMidpoint
(
long
long
aClampedTimeUSec
long
long
aResolutionUSec
int64_t
aContextMixin
long
long
*
aMidpointOut
uint8_t
*
aSecretSeed
=
nullptr
)
;
static
uint32_t
CalculateTargetVideoResolution
(
uint32_t
aVideoQuality
)
;
static
uint32_t
GetSpoofedTotalFrames
(
double
aTime
)
;
static
uint32_t
GetSpoofedDroppedFrames
(
double
aTime
uint32_t
aWidth
uint32_t
aHeight
)
;
static
uint32_t
GetSpoofedPresentedFrames
(
double
aTime
uint32_t
aWidth
uint32_t
aHeight
)
;
static
void
GetSpoofedUserAgent
(
nsACString
&
userAgent
bool
aAndroidDesktopMode
=
false
)
;
static
nsCString
GetSpoofedJSLocale
(
)
;
static
bool
GetSpoofedModifierStates
(
const
mozilla
:
:
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
const
Modifiers
aModifier
bool
&
aOut
)
;
static
bool
GetSpoofedCode
(
const
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
nsAString
&
aOut
)
;
static
bool
GetSpoofedKeyCode
(
const
mozilla
:
:
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
uint32_t
&
aOut
)
;
static
Maybe
<
nsTArray
<
uint8_t
>
>
GenerateKey
(
nsIChannel
*
aChannel
)
;
static
Maybe
<
nsTArray
<
uint8_t
>
>
GenerateKeyForServiceWorker
(
nsIURI
*
aFirstPartyURI
nsIPrincipal
*
aPrincipal
bool
aForeignByAncestorContext
)
;
static
nsresult
RandomizePixels
(
nsICookieJarSettings
*
aCookieJarSettings
nsIPrincipal
*
aPrincipal
uint8_t
*
aData
uint32_t
aWidth
uint32_t
aHeight
uint32_t
aSize
mozilla
:
:
gfx
:
:
SurfaceFormat
aSurfaceFormat
)
;
static
Maybe
<
RFPTargetSet
>
GetOverriddenFingerprintingSettingsForChannel
(
nsIChannel
*
aChannel
)
;
static
Maybe
<
RFPTargetSet
>
GetOverriddenFingerprintingSettingsForURI
(
nsIURI
*
aFirstPartyURI
nsIURI
*
aThirdPartyURI
bool
aIsPrivate
)
;
static
void
MaybeReportCanvasFingerprinter
(
nsTArray
<
CanvasUsage
>
&
aUses
nsIChannel
*
aChannel
nsACString
&
aOriginNoSuffix
)
;
static
void
MaybeReportFontFingerprinter
(
nsIChannel
*
aChannel
const
nsACString
&
aOriginNoSuffix
)
;
static
bool
CheckSuspiciousFingerprintingActivity
(
nsTArray
<
ContentBlockingLog
:
:
LogEntry
>
&
aLogs
)
;
static
void
GetMediaDeviceName
(
nsString
&
aName
mozilla
:
:
dom
:
:
MediaDeviceKind
aKind
)
;
static
void
GetMediaDeviceGroup
(
nsString
&
aGroup
mozilla
:
:
dom
:
:
MediaDeviceKind
aKind
)
;
static
uint16_t
ViewportSizeToAngle
(
int32_t
aWidth
int32_t
aHeight
)
;
static
dom
:
:
OrientationType
ViewportSizeToOrientationType
(
int32_t
aWidth
int32_t
aHeight
)
;
static
dom
:
:
OrientationType
GetDefaultOrientationType
(
)
;
static
float
GetDefaultPixelDensity
(
)
;
static
double
GetDevicePixelRatioAtZoom
(
float
aZoom
)
;
static
void
GetExemptedDomainsLowercase
(
nsCString
&
aExemptedDomains
)
;
static
CSSIntRect
GetSpoofedScreenAvailSize
(
const
nsRect
&
aRect
float
aScale
bool
aIsFullscreen
)
;
static
uint64_t
GetSpoofedStorageLimit
(
)
;
static
bool
ExposeWebCodecsAPI
(
JSContext
*
aCx
JSObject
*
aObj
)
;
static
bool
ExposeWebCodecsAPIImageDecoder
(
JSContext
*
aCx
JSObject
*
aObj
)
;
static
bool
IsWebCodecsRFPTargetEnabled
(
JSContext
*
aCx
)
;
static
uint32_t
CollapseMaxTouchPoints
(
uint32_t
aMaxTouchPoints
)
;
private
:
nsresult
Init
(
)
;
nsRFPService
(
)
=
default
;
~
nsRFPService
(
)
=
default
;
void
UpdateFPPOverrideList
(
)
;
void
StartShutdown
(
)
;
void
PrefChanged
(
const
char
*
aPref
)
;
static
void
PrefChanged
(
const
char
*
aPref
void
*
aSelf
)
;
static
Maybe
<
RFPTarget
>
TextToRFPTarget
(
const
nsAString
&
aText
)
;
static
void
MaybeCreateSpoofingKeyCodes
(
const
KeyboardLangs
aLang
const
KeyboardRegions
aRegion
)
;
static
void
MaybeCreateSpoofingKeyCodesForEnUS
(
)
;
static
void
GetKeyboardLangAndRegion
(
const
nsAString
&
aLanguage
KeyboardLangs
&
aLocale
KeyboardRegions
&
aRegion
)
;
static
bool
GetSpoofedKeyCodeInfo
(
const
mozilla
:
:
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
SpoofingKeyboardCode
&
aOut
)
;
static
nsTHashMap
<
KeyboardHashKey
const
SpoofingKeyboardCode
*
>
*
sSpoofingKeyboardCodes
;
static
double
ReduceTimePrecisionAsUSecsWrapper
(
double
aTime
JS
:
:
RTPCallerTypeToken
aCallerType
JSContext
*
aCx
)
;
static
TimerPrecisionType
GetTimerPrecisionType
(
RTPCallerType
aRTPCallerType
)
;
static
TimerPrecisionType
GetTimerPrecisionTypeRFPOnly
(
RTPCallerType
aRTPCallerType
)
;
static
void
TypeToText
(
TimerPrecisionType
aType
nsACString
&
aText
)
;
static
nsresult
GenerateCanvasKeyFromImageData
(
nsICookieJarSettings
*
aCookieJarSettings
uint8_t
*
aImageData
uint32_t
aSize
nsTArray
<
uint8_t
>
&
aCanvasKey
)
;
nsresult
GetBrowsingSessionKey
(
const
OriginAttributes
&
aOriginAttributes
nsID
&
aBrowsingSessionKey
)
;
void
ClearBrowsingSessionKey
(
const
OriginAttributesPattern
&
aPattern
)
;
void
ClearBrowsingSessionKey
(
const
OriginAttributes
&
aOriginAttributes
)
;
nsTHashMap
<
nsCStringHashKey
nsID
>
mBrowsingSessionKeys
;
nsCOMPtr
<
nsIFingerprintingWebCompatService
>
mWebCompatService
;
nsTHashMap
<
nsCStringHashKey
RFPTargetSet
>
mFingerprintingOverrides
;
static
nsresult
CreateOverrideDomainKey
(
nsIFingerprintingOverride
*
aOverride
nsACString
&
aDomainKey
)
;
static
RFPTargetSet
CreateOverridesFromText
(
const
nsString
&
aOverridesText
RFPTargetSet
aBaseOverrides
=
RFPTargetSet
(
)
)
;
enum
FingerprintingProtectionType
:
uint8_t
{
RFP
FPP
Baseline
None
}
;
static
FingerprintingProtectionType
GetFingerprintingProtectionType
(
bool
aIsPrivateMode
)
;
static
Maybe
<
bool
>
HandleExceptionalRFPTargets
(
RFPTarget
aTarget
bool
aIsPrivateMode
FingerprintingProtectionType
aMode
)
;
static
bool
IsTargetActiveForMode
(
RFPTarget
aTarget
FingerprintingProtectionType
aMode
)
;
static
nsCString
*
sExemptedDomainsLowercase
;
}
;
}
#
endif
