#
ifndef
__nsRFPService_h__
#
define
__nsRFPService_h__
#
include
<
cstdint
>
#
include
"
ErrorList
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
nsHashtablesFwd
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
#
ifdef
XP_WIN
#
define
SPOOFED_UA_OS
"
Windows
NT
10
.
0
;
Win64
;
x64
"
#
define
SPOOFED_APPVERSION
"
5
.
0
(
Windows
)
"
#
define
SPOOFED_OSCPU
"
Windows
NT
10
.
0
;
Win64
;
x64
"
#
define
SPOOFED_PLATFORM
"
Win32
"
#
elif
defined
(
XP_MACOSX
)
#
define
SPOOFED_UA_OS
"
Macintosh
;
Intel
Mac
OS
X
10
.
15
"
#
define
SPOOFED_APPVERSION
"
5
.
0
(
Macintosh
)
"
#
define
SPOOFED_OSCPU
"
Intel
Mac
OS
X
10
.
15
"
#
define
SPOOFED_PLATFORM
"
MacIntel
"
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
#
define
SPOOFED_UA_OS
"
Android
10
;
Mobile
"
#
define
SPOOFED_APPVERSION
"
5
.
0
(
Android
10
)
"
#
define
SPOOFED_OSCPU
"
Linux
aarch64
"
#
define
SPOOFED_PLATFORM
"
Linux
aarch64
"
#
else
#
define
SPOOFED_UA_OS
"
X11
;
Linux
x86_64
"
#
define
SPOOFED_APPVERSION
"
5
.
0
(
X11
)
"
#
define
SPOOFED_OSCPU
"
Linux
x86_64
"
#
define
SPOOFED_PLATFORM
"
Linux
x86_64
"
#
endif
#
define
SPOOFED_APPNAME
"
Netscape
"
#
define
LEGACY_BUILD_ID
"
20181001000000
"
#
define
LEGACY_UA_GECKO_TRAIL
"
20100101
"
#
define
SPOOFED_POINTER_INTERFACE
MouseEvent_Binding
:
:
MOZ_SOURCE_MOUSE
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
define
SPOOFED_HTTP_UA_OS
"
Android
10
;
Mobile
"
#
else
#
define
SPOOFED_HTTP_UA_OS
"
Windows
NT
10
.
0
"
#
endif
struct
JSContext
;
namespace
mozilla
{
class
WidgetKeyboardEvent
;
namespace
dom
{
class
Document
;
}
enum
KeyboardLang
{
EN
=
0x01
}
;
#
define
RFP_KEYBOARD_LANG_STRING_EN
"
en
"
typedef
uint8_t
KeyboardLangs
;
enum
KeyboardRegion
{
US
=
0x01
}
;
#
define
RFP_KEYBOARD_REGION_STRING_US
"
US
"
typedef
uint8_t
KeyboardRegions
;
struct
SpoofingKeyboardCode
{
CodeNameIndex
mCode
;
uint8_t
mKeyCode
;
Modifiers
mModifierStates
;
}
;
struct
SpoofingKeyboardInfo
{
nsString
mKey
;
KeyNameIndex
mKeyIdx
;
SpoofingKeyboardCode
mSpoofingCode
;
}
;
class
KeyboardHashKey
:
public
PLDHashEntryHdr
{
public
:
typedef
const
KeyboardHashKey
&
KeyType
;
typedef
const
KeyboardHashKey
*
KeyTypePointer
;
KeyboardHashKey
(
const
KeyboardLangs
aLang
const
KeyboardRegions
aRegion
const
KeyNameIndexType
aKeyIdx
const
nsAString
&
aKey
)
;
explicit
KeyboardHashKey
(
KeyTypePointer
aOther
)
;
KeyboardHashKey
(
KeyboardHashKey
&
&
aOther
)
;
~
KeyboardHashKey
(
)
;
bool
KeyEquals
(
KeyTypePointer
aOther
)
const
;
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
;
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
;
enum
{
ALLOW_MEMMOVE
=
true
}
;
KeyboardLangs
mLang
;
KeyboardRegions
mRegion
;
KeyNameIndexType
mKeyIdx
;
nsString
mKey
;
}
;
enum
TimerPrecisionType
{
DangerouslyNone
=
1
UnconditionalAKAHighRes
=
2
Normal
=
3
RFP
=
4
}
;
class
nsRFPService
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
nsRFPService
*
GetOrCreate
(
)
;
static
double
TimerResolution
(
)
;
enum
TimeScale
{
Seconds
=
1
MilliSeconds
=
1000
MicroSeconds
=
1000000
}
;
static
double
ReduceTimePrecisionAsUSecs
(
double
aTime
int64_t
aContextMixin
bool
aIsSystemPrincipal
bool
aCrossOriginIsolated
)
;
static
double
ReduceTimePrecisionAsMSecs
(
double
aTime
int64_t
aContextMixin
bool
aIsSystemPrincipal
bool
aCrossOriginIsolated
)
;
static
double
ReduceTimePrecisionAsMSecsRFPOnly
(
double
aTime
int64_t
aContextMixin
)
;
static
double
ReduceTimePrecisionAsSecs
(
double
aTime
int64_t
aContextMixin
bool
aIsSystemPrincipal
bool
aCrossOriginIsolated
)
;
static
double
ReduceTimePrecisionAsSecsRFPOnly
(
double
aTime
int64_t
aContextMixin
)
;
static
double
ReduceTimePrecisionAsUSecsWrapper
(
double
aTime
JSContext
*
aCx
)
;
static
double
ReduceTimePrecisionImpl
(
double
aTime
TimeScale
aTimeScale
double
aResolutionUSec
int64_t
aContextMixin
TimerPrecisionType
aType
)
;
static
nsresult
RandomMidpoint
(
long
long
aClampedTimeUSec
long
long
aResolutionUSec
int64_t
aContextMixin
long
long
*
aMidpointOut
uint8_t
*
aSecretSeed
=
nullptr
)
;
static
uint32_t
CalculateTargetVideoResolution
(
uint32_t
aVideoQuality
)
;
static
uint32_t
GetSpoofedTotalFrames
(
double
aTime
)
;
static
uint32_t
GetSpoofedDroppedFrames
(
double
aTime
uint32_t
aWidth
uint32_t
aHeight
)
;
static
uint32_t
GetSpoofedPresentedFrames
(
double
aTime
uint32_t
aWidth
uint32_t
aHeight
)
;
static
void
GetSpoofedUserAgent
(
nsACString
&
userAgent
bool
isForHTTPHeader
)
;
static
bool
GetSpoofedModifierStates
(
const
mozilla
:
:
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
const
Modifiers
aModifier
bool
&
aOut
)
;
static
bool
GetSpoofedCode
(
const
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
nsAString
&
aOut
)
;
static
bool
GetSpoofedKeyCode
(
const
mozilla
:
:
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
uint32_t
&
aOut
)
;
private
:
nsresult
Init
(
)
;
nsRFPService
(
)
=
default
;
~
nsRFPService
(
)
=
default
;
void
UpdateTimers
(
)
;
void
UpdateRFPPref
(
)
;
void
StartShutdown
(
)
;
void
PrefChanged
(
const
char
*
aPref
)
;
static
void
PrefChanged
(
const
char
*
aPref
void
*
aSelf
)
;
static
void
MaybeCreateSpoofingKeyCodes
(
const
KeyboardLangs
aLang
const
KeyboardRegions
aRegion
)
;
static
void
MaybeCreateSpoofingKeyCodesForEnUS
(
)
;
static
void
GetKeyboardLangAndRegion
(
const
nsAString
&
aLanguage
KeyboardLangs
&
aLocale
KeyboardRegions
&
aRegion
)
;
static
bool
GetSpoofedKeyCodeInfo
(
const
mozilla
:
:
dom
:
:
Document
*
aDoc
const
WidgetKeyboardEvent
*
aKeyboardEvent
SpoofingKeyboardCode
&
aOut
)
;
static
nsTHashMap
<
KeyboardHashKey
const
SpoofingKeyboardCode
*
>
*
sSpoofingKeyboardCodes
;
static
TimerPrecisionType
GetTimerPrecisionType
(
bool
aIsSystemPrincipal
bool
aCrossOriginIsolated
)
;
static
TimerPrecisionType
GetTimerPrecisionTypeRFPOnly
(
)
;
static
void
TypeToText
(
TimerPrecisionType
aType
nsACString
&
aText
)
;
nsCString
mInitialTZValue
;
}
;
}
#
endif
