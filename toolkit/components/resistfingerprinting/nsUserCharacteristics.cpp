#
include
"
nsUserCharacteristics
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIUUIDGenerator
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
glean
/
GleanPings
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
static
mozilla
:
:
LazyLogModule
gUserCharacteristicsLog
(
"
UserCharacteristics
"
)
;
const
int
kSubmissionSchema
=
0
;
void
nsUserCharacteristics
:
:
MaybeSubmitPing
(
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
In
MaybeSubmitPing
(
)
"
)
)
;
const
auto
*
const
kLastVersionPref
=
"
toolkit
.
telemetry
.
user_characteristics_ping
.
last_version_sent
"
;
const
auto
*
const
kCurrentVersionPref
=
"
toolkit
.
telemetry
.
user_characteristics_ping
.
current_version
"
;
auto
lastSubmissionVersion
=
mozilla
:
:
Preferences
:
:
GetInt
(
kLastVersionPref
0
)
;
auto
currentVersion
=
mozilla
:
:
Preferences
:
:
GetInt
(
kCurrentVersionPref
0
)
;
MOZ_ASSERT
(
currentVersion
=
=
-
1
|
|
lastSubmissionVersion
<
=
currentVersion
"
lastSubmissionVersion
is
somehow
greater
than
currentVersion
"
"
-
did
you
edit
prefs
improperly
?
"
)
;
if
(
lastSubmissionVersion
<
0
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
Returning
User
Opt
-
out
"
)
)
;
return
;
}
if
(
currentVersion
=
=
0
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
Returning
currentVersion
=
=
0
"
)
)
;
return
;
}
if
(
currentVersion
=
=
-
1
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
Force
-
Submitting
Ping
"
)
)
;
if
(
NS_SUCCEEDED
(
PopulateData
(
)
)
)
{
SubmitPing
(
)
;
}
return
;
}
if
(
lastSubmissionVersion
>
currentVersion
)
{
mozilla
:
:
Preferences
:
:
SetInt
(
kLastVersionPref
currentVersion
)
;
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Returning
lastSubmissionVersion
>
currentVersion
"
)
)
;
return
;
}
if
(
lastSubmissionVersion
=
=
currentVersion
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Returning
lastSubmissionVersion
=
=
currentVersion
"
)
)
;
return
;
}
if
(
lastSubmissionVersion
<
currentVersion
)
{
if
(
NS_SUCCEEDED
(
PopulateData
(
)
)
)
{
if
(
NS_SUCCEEDED
(
SubmitPing
(
)
)
)
{
mozilla
:
:
Preferences
:
:
SetInt
(
kLastVersionPref
currentVersion
)
;
}
}
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
never
reach
here
"
)
;
}
}
const
auto
*
const
kUUIDPref
=
"
toolkit
.
telemetry
.
user_characteristics_ping
.
uuid
"
;
nsresult
nsUserCharacteristics
:
:
PopulateData
(
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Populating
Data
"
)
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
submission_schema
.
Set
(
kSubmissionSchema
)
;
nsAutoCString
uuidString
;
nsresult
rv
=
mozilla
:
:
Preferences
:
:
GetCString
(
kUUIDPref
uuidString
)
;
if
(
NS_FAILED
(
rv
)
|
|
uuidString
.
Length
(
)
=
=
0
)
{
nsCOMPtr
<
nsIUUIDGenerator
>
uuidgen
=
do_GetService
(
"
mozilla
.
org
/
uuid
-
generator
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsIDToCString
id
(
nsID
:
:
GenerateUUID
(
)
)
;
uuidString
=
id
.
get
(
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
kUUIDPref
uuidString
)
;
}
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
Set
(
uuidString
)
;
return
NS_OK
;
}
nsresult
nsUserCharacteristics
:
:
SubmitPing
(
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Submitting
Ping
"
)
)
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
Submit
(
)
;
return
NS_OK
;
}
