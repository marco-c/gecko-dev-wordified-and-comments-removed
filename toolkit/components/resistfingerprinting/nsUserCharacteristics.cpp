#
include
"
nsUserCharacteristics
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIUUIDGenerator
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
glean
/
GleanPings
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
PreferenceSheet
.
h
"
#
include
"
mozilla
/
RelativeLuminanceUtils
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
dom
/
ScreenBinding
.
h
"
#
include
"
mozilla
/
widget
/
ScreenManager
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
prsystem
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
WinUtils
.
h
"
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
#
include
"
mozilla
/
java
/
GeckoAppShellWrappers
.
h
"
#
elif
defined
(
XP_MACOSX
)
#
include
"
nsMacUtilsImpl
.
h
"
#
endif
static
mozilla
:
:
LazyLogModule
gUserCharacteristicsLog
(
"
UserCharacteristics
"
)
;
namespace
testing
{
extern
"
C
"
{
int
MaxTouchPoints
(
)
{
#
if
defined
(
XP_WIN
)
return
mozilla
:
:
widget
:
:
WinUtils
:
:
GetMaxTouchPoints
(
)
;
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
return
mozilla
:
:
java
:
:
GeckoAppShell
:
:
GetMaxTouchPoints
(
)
;
#
else
return
0
;
#
endif
}
}
}
;
void
PopulateCSSProperties
(
)
{
mozilla
:
:
glean
:
:
characteristics
:
:
video_dynamic_range
.
Set
(
mozilla
:
:
LookAndFeel
:
:
GetInt
(
mozilla
:
:
LookAndFeel
:
:
IntID
:
:
VideoDynamicRange
)
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
prefers_reduced_transparency
.
Set
(
mozilla
:
:
LookAndFeel
:
:
GetInt
(
mozilla
:
:
LookAndFeel
:
:
IntID
:
:
PrefersReducedTransparency
)
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
prefers_reduced_motion
.
Set
(
mozilla
:
:
LookAndFeel
:
:
GetInt
(
mozilla
:
:
LookAndFeel
:
:
IntID
:
:
PrefersReducedMotion
)
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
inverted_colors
.
Set
(
mozilla
:
:
LookAndFeel
:
:
GetInt
(
mozilla
:
:
LookAndFeel
:
:
IntID
:
:
InvertedColors
)
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
color_scheme
.
Set
(
(
int
)
mozilla
:
:
PreferenceSheet
:
:
ContentPrefs
(
)
.
mColorScheme
)
;
mozilla
:
:
StylePrefersContrast
prefersContrast
=
[
]
{
if
(
!
mozilla
:
:
PreferenceSheet
:
:
ContentPrefs
(
)
.
mUseAccessibilityTheme
&
&
mozilla
:
:
PreferenceSheet
:
:
ContentPrefs
(
)
.
mUseDocumentColors
)
{
return
mozilla
:
:
StylePrefersContrast
:
:
NoPreference
;
}
const
auto
&
colors
=
mozilla
:
:
PreferenceSheet
:
:
ContentPrefs
(
)
.
ColorsFor
(
mozilla
:
:
ColorScheme
:
:
Light
)
;
float
ratio
=
mozilla
:
:
RelativeLuminanceUtils
:
:
ContrastRatio
(
colors
.
mDefaultBackground
colors
.
mDefault
)
;
if
(
ratio
<
4
.
5f
)
{
return
mozilla
:
:
StylePrefersContrast
:
:
Less
;
}
if
(
ratio
>
=
7
.
0f
)
{
return
mozilla
:
:
StylePrefersContrast
:
:
More
;
}
return
mozilla
:
:
StylePrefersContrast
:
:
Custom
;
}
(
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
prefers_contrast
.
Set
(
(
int
)
prefersContrast
)
;
}
void
PopulateScreenProperties
(
)
{
auto
&
screenManager
=
mozilla
:
:
widget
:
:
ScreenManager
:
:
GetSingleton
(
)
;
RefPtr
<
mozilla
:
:
widget
:
:
Screen
>
screen
=
screenManager
.
GetPrimaryScreen
(
)
;
MOZ_ASSERT
(
screen
)
;
mozilla
:
:
dom
:
:
ScreenColorGamut
colorGamut
;
screen
-
>
GetColorGamut
(
&
colorGamut
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
color_gamut
.
Set
(
(
int
)
colorGamut
)
;
int32_t
colorDepth
;
screen
-
>
GetColorDepth
(
&
colorDepth
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
color_depth
.
Set
(
colorDepth
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
color_gamut
.
Set
(
(
int
)
colorGamut
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
color_depth
.
Set
(
colorDepth
)
;
const
mozilla
:
:
LayoutDeviceIntRect
rect
=
screen
-
>
GetRect
(
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
screen_height
.
Set
(
rect
.
Height
(
)
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
screen_width
.
Set
(
rect
.
Width
(
)
)
;
}
void
PopulateMissingFonts
(
)
{
nsCString
aMissingFonts
;
gfxPlatformFontList
:
:
PlatformFontList
(
)
-
>
GetMissingFonts
(
aMissingFonts
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
missing_fonts
.
Set
(
aMissingFonts
)
;
}
const
int
kSubmissionSchema
=
0
;
void
nsUserCharacteristics
:
:
MaybeSubmitPing
(
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
In
MaybeSubmitPing
(
)
"
)
)
;
const
auto
*
const
kLastVersionPref
=
"
toolkit
.
telemetry
.
user_characteristics_ping
.
last_version_sent
"
;
const
auto
*
const
kCurrentVersionPref
=
"
toolkit
.
telemetry
.
user_characteristics_ping
.
current_version
"
;
auto
lastSubmissionVersion
=
mozilla
:
:
Preferences
:
:
GetInt
(
kLastVersionPref
0
)
;
auto
currentVersion
=
mozilla
:
:
Preferences
:
:
GetInt
(
kCurrentVersionPref
0
)
;
MOZ_ASSERT
(
currentVersion
=
=
-
1
|
|
lastSubmissionVersion
<
=
currentVersion
"
lastSubmissionVersion
is
somehow
greater
than
currentVersion
"
"
-
did
you
edit
prefs
improperly
?
"
)
;
if
(
lastSubmissionVersion
<
0
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
Returning
User
Opt
-
out
"
)
)
;
return
;
}
if
(
currentVersion
=
=
0
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
Returning
currentVersion
=
=
0
"
)
)
;
return
;
}
if
(
currentVersion
=
=
-
1
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Debug
(
"
Force
-
Submitting
Ping
"
)
)
;
if
(
NS_SUCCEEDED
(
PopulateData
(
)
)
)
{
SubmitPing
(
)
;
}
return
;
}
if
(
lastSubmissionVersion
>
currentVersion
)
{
mozilla
:
:
Preferences
:
:
SetInt
(
kLastVersionPref
currentVersion
)
;
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Returning
lastSubmissionVersion
>
currentVersion
"
)
)
;
return
;
}
if
(
lastSubmissionVersion
=
=
currentVersion
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Returning
lastSubmissionVersion
=
=
currentVersion
"
)
)
;
return
;
}
if
(
lastSubmissionVersion
<
currentVersion
)
{
if
(
NS_SUCCEEDED
(
PopulateData
(
)
)
)
{
if
(
NS_SUCCEEDED
(
SubmitPing
(
)
)
)
{
mozilla
:
:
Preferences
:
:
SetInt
(
kLastVersionPref
currentVersion
)
;
}
}
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
never
reach
here
"
)
;
}
}
const
auto
*
const
kUUIDPref
=
"
toolkit
.
telemetry
.
user_characteristics_ping
.
uuid
"
;
nsresult
nsUserCharacteristics
:
:
PopulateData
(
bool
aTesting
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Populating
Data
"
)
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
submission_schema
.
Set
(
kSubmissionSchema
)
;
nsAutoCString
uuidString
;
nsresult
rv
=
mozilla
:
:
Preferences
:
:
GetCString
(
kUUIDPref
uuidString
)
;
if
(
NS_FAILED
(
rv
)
|
|
uuidString
.
Length
(
)
=
=
0
)
{
nsCOMPtr
<
nsIUUIDGenerator
>
uuidgen
=
do_GetService
(
"
mozilla
.
org
/
uuid
-
generator
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsIDToCString
id
(
nsID
:
:
GenerateUUID
(
)
)
;
uuidString
=
id
.
get
(
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
kUUIDPref
uuidString
)
;
}
mozilla
:
:
glean
:
:
characteristics
:
:
client_identifier
.
Set
(
uuidString
)
;
mozilla
:
:
glean
:
:
characteristics
:
:
max_touch_points
.
Set
(
testing
:
:
MaxTouchPoints
(
)
)
;
if
(
aTesting
)
{
return
NS_OK
;
}
PopulateMissingFonts
(
)
;
PopulateCSSProperties
(
)
;
PopulateScreenProperties
(
)
;
int32_t
processorCount
=
0
;
#
if
defined
(
XP_MACOSX
)
if
(
nsMacUtilsImpl
:
:
IsTCSMAvailable
(
)
)
{
processorCount
=
nsMacUtilsImpl
:
:
GetPhysicalCPUCount
(
)
;
}
#
endif
if
(
processorCount
=
=
0
)
{
processorCount
=
PR_GetNumberOfProcessors
(
)
;
}
mozilla
:
:
glean
:
:
characteristics
:
:
processor_count
.
Set
(
processorCount
)
;
return
NS_OK
;
}
nsresult
nsUserCharacteristics
:
:
SubmitPing
(
)
{
MOZ_LOG
(
gUserCharacteristicsLog
mozilla
:
:
LogLevel
:
:
Warning
(
"
Submitting
Ping
"
)
)
;
mozilla
:
:
glean_pings
:
:
UserCharacteristics
.
Submit
(
)
;
return
NS_OK
;
}
