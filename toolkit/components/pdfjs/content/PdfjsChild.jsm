"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PdfjsChild
"
]
;
class
PdfjsChild
extends
JSWindowActorChild
{
init
(
supportsFind
)
{
if
(
supportsFind
)
{
this
.
sendAsyncMessage
(
"
PDFJS
:
Parent
:
addEventListener
"
)
;
}
}
dispatchEvent
(
type
detail
)
{
const
contentWindow
=
this
.
contentWindow
;
const
forward
=
contentWindow
.
document
.
createEvent
(
"
CustomEvent
"
)
;
forward
.
initCustomEvent
(
type
true
true
detail
)
;
contentWindow
.
dispatchEvent
(
forward
)
;
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
PDFJS
:
Child
:
handleEvent
"
:
{
let
detail
=
Cu
.
cloneInto
(
msg
.
data
.
detail
this
.
contentWindow
)
;
this
.
dispatchEvent
(
msg
.
data
.
type
detail
)
;
break
;
}
case
"
PDFJS
:
ZoomIn
"
:
case
"
PDFJS
:
ZoomOut
"
:
case
"
PDFJS
:
ZoomReset
"
:
case
"
PDFJS
:
Save
"
:
{
const
type
=
msg
.
name
.
split
(
"
PDFJS
:
"
)
[
1
]
.
toLowerCase
(
)
;
this
.
dispatchEvent
(
type
null
)
;
break
;
}
case
"
PDFJS
:
Child
:
fallbackDownload
"
:
if
(
this
.
fallbackCallback
)
{
this
.
fallbackCallback
(
msg
.
data
.
download
)
;
}
break
;
}
}
}
