const
RELATIVE_DIR
=
"
toolkit
/
components
/
pdfjs
/
test
/
"
;
const
TESTROOT
=
"
http
:
/
/
example
.
com
/
browser
/
"
+
RELATIVE_DIR
;
async
function
openContextMenuForSelector
(
browser
selector
)
{
const
doc
=
browser
.
ownerDocument
;
const
CONTEXT_MENU
=
doc
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
contextMenuShownPromise
=
BrowserTestUtils
.
waitForEvent
(
CONTEXT_MENU
"
popupshown
"
)
;
let
inputCoords
=
await
SpecialPowers
.
spawn
(
browser
[
selector
]
async
selector
=
>
{
let
input
=
content
.
document
.
querySelector
(
selector
)
;
input
.
focus
(
)
;
let
inputRect
=
input
.
getBoundingClientRect
(
)
;
content
.
contextmenuPromise
=
new
Promise
(
resolve
=
>
{
content
.
document
.
body
.
addEventListener
(
"
contextmenu
"
event
=
>
{
info
(
Received
event
on
target
:
{
event
.
target
.
nodeName
}
type
:
{
event
.
target
.
type
}
)
;
content
.
console
.
log
(
"
got
contextmenu
event
:
"
event
)
;
resolve
(
event
)
;
}
{
once
:
true
}
)
;
}
)
;
let
coords
=
{
x
:
inputRect
.
x
+
inputRect
.
width
/
2
y
:
inputRect
.
y
+
inputRect
.
height
/
2
}
;
return
coords
;
}
)
;
let
browserOffsets
=
browser
.
getBoundingClientRect
(
)
;
let
offsetX
=
browserOffsets
.
x
+
inputCoords
.
x
;
let
offsetY
=
browserOffsets
.
y
+
inputCoords
.
y
;
let
eventDetails
=
{
type
:
"
mousedown
"
button
:
2
}
;
await
EventUtils
.
synthesizeMouseAtPoint
(
offsetX
offsetY
eventDetails
)
;
eventDetails
=
{
type
:
"
contextmenu
"
button
:
2
}
;
await
EventUtils
.
synthesizeMouseAtPoint
(
offsetX
offsetY
eventDetails
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
content
.
contextmenuPromise
;
}
)
;
info
(
"
waiting
for
contextMenuShownPromise
"
)
;
await
contextMenuShownPromise
;
return
CONTEXT_MENU
;
}
add_task
(
async
function
test_filllogin
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
pdfjs
.
renderInteractiveForms
"
true
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
function
(
browser
)
{
await
waitForPdfJSAnnotationLayer
(
browser
TESTROOT
+
"
file_pdfjs_form
.
pdf
"
)
;
let
contextMenu
=
await
openContextMenuForSelector
(
browser
"
#
viewerContainer
input
"
)
;
let
fillItem
=
contextMenu
.
querySelector
(
"
#
fill
-
login
"
)
;
ok
(
fillItem
"
fill
menu
item
exists
"
)
;
ok
(
fillItem
&
&
EventUtils
.
isHidden
(
fillItem
)
"
fill
menu
item
is
hidden
"
)
;
let
promiseHidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
info
(
"
Calling
hidePopup
on
contextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
info
(
"
waiting
for
promiseHidden
"
)
;
await
promiseHidden
;
}
)
;
}
)
;
