#
include
"
mozilla
/
StorageAccess
.
h
"
#
include
"
nsICookieService
.
h
"
#
include
"
nsICookieSettings
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
namespace
mozilla
{
bool
ShouldPartitionStorage
(
nsContentUtils
:
:
StorageAccess
aAccess
)
{
return
aAccess
=
=
nsContentUtils
:
:
StorageAccess
:
:
ePartitionTrackersOrDeny
|
|
aAccess
=
=
nsContentUtils
:
:
StorageAccess
:
:
ePartitionForeignOrDeny
;
}
bool
ShouldPartitionStorage
(
uint32_t
aRejectedReason
)
{
return
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
|
|
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
;
}
bool
StoragePartitioningEnabled
(
nsContentUtils
:
:
StorageAccess
aAccess
nsICookieSettings
*
aCookieSettings
)
{
if
(
aAccess
=
=
nsContentUtils
:
:
StorageAccess
:
:
ePartitionTrackersOrDeny
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER
&
&
StaticPrefs
:
:
privacy_storagePrincipal_enabledForTrackers
(
)
;
}
if
(
aAccess
=
=
nsContentUtils
:
:
StorageAccess
:
:
ePartitionForeignOrDeny
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
;
}
return
false
;
}
bool
StoragePartitioningEnabled
(
uint32_t
aRejectedReason
nsICookieSettings
*
aCookieSettings
)
{
if
(
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER
&
&
StaticPrefs
:
:
privacy_storagePrincipal_enabledForTrackers
(
)
;
}
if
(
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
;
}
return
false
;
}
}
