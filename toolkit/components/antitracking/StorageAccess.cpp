#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
net
/
CookieSettings
.
h
"
#
include
"
mozilla
/
AntiTrackingCommon
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
StaticPrefs_privacy
.
h
"
#
include
"
mozilla
/
StorageAccess
.
h
"
#
include
"
nsICookieService
.
h
"
#
include
"
nsICookieSettings
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
static
void
GetCookieLifetimePolicyFromCookieSettings
(
nsICookieSettings
*
aCookieSettings
nsIPrincipal
*
aPrincipal
uint32_t
*
aLifetimePolicy
)
{
*
aLifetimePolicy
=
StaticPrefs
:
:
network_cookie_lifetimePolicy
(
)
;
if
(
aCookieSettings
)
{
uint32_t
cookiePermission
=
0
;
nsresult
rv
=
aCookieSettings
-
>
CookiePermission
(
aPrincipal
&
cookiePermission
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
switch
(
cookiePermission
)
{
case
nsICookiePermission
:
:
ACCESS_ALLOW
:
*
aLifetimePolicy
=
nsICookieService
:
:
ACCEPT_NORMALLY
;
break
;
case
nsICookiePermission
:
:
ACCESS_DENY
:
*
aLifetimePolicy
=
nsICookieService
:
:
ACCEPT_NORMALLY
;
break
;
case
nsICookiePermission
:
:
ACCESS_SESSION
:
*
aLifetimePolicy
=
nsICookieService
:
:
ACCEPT_SESSION
;
break
;
}
}
}
static
StorageAccess
InternalStorageAllowedCheck
(
nsIPrincipal
*
aPrincipal
nsPIDOMWindowInner
*
aWindow
nsIURI
*
aURI
nsIChannel
*
aChannel
nsICookieSettings
*
aCookieSettings
uint32_t
&
aRejectedReason
)
{
MOZ_ASSERT
(
aPrincipal
)
;
aRejectedReason
=
0
;
StorageAccess
access
=
StorageAccess
:
:
eAllow
;
if
(
aPrincipal
-
>
GetIsNullPrincipal
(
)
)
{
return
StorageAccess
:
:
eDeny
;
}
if
(
aWindow
)
{
Document
*
document
=
aWindow
-
>
GetExtantDoc
(
)
;
if
(
document
&
&
document
-
>
GetSandboxFlags
(
)
&
SANDBOXED_ORIGIN
)
{
return
StorageAccess
:
:
eDeny
;
}
if
(
nsContentUtils
:
:
IsInPrivateBrowsing
(
document
)
)
{
access
=
StorageAccess
:
:
ePrivateBrowsing
;
}
}
uint32_t
lifetimePolicy
;
auto
policy
=
BasePrincipal
:
:
Cast
(
aPrincipal
)
-
>
AddonPolicy
(
)
;
if
(
policy
)
{
lifetimePolicy
=
nsICookieService
:
:
ACCEPT_NORMALLY
;
}
else
{
GetCookieLifetimePolicyFromCookieSettings
(
aCookieSettings
aPrincipal
&
lifetimePolicy
)
;
}
if
(
lifetimePolicy
=
=
nsICookieService
:
:
ACCEPT_SESSION
)
{
access
=
std
:
:
min
(
StorageAccess
:
:
eSessionScoped
access
)
;
}
nsCOMPtr
<
nsIURI
>
uri
=
aURI
;
if
(
!
uri
)
{
Unused
<
<
aPrincipal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
}
if
(
uri
)
{
bool
isAbout
=
false
;
MOZ_ALWAYS_SUCCEEDS
(
uri
-
>
SchemeIs
(
"
about
"
&
isAbout
)
)
;
if
(
isAbout
)
{
return
access
;
}
}
if
(
!
StorageDisabledByAntiTracking
(
aWindow
aChannel
aPrincipal
aURI
aRejectedReason
)
)
{
return
access
;
}
if
(
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
)
{
return
StorageAccess
:
:
ePartitionTrackersOrDeny
;
}
if
(
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
)
{
return
StorageAccess
:
:
ePartitionForeignOrDeny
;
}
return
StorageAccess
:
:
eDeny
;
}
static
bool
StorageDisabledByAntiTrackingInternal
(
nsPIDOMWindowInner
*
aWindow
nsIChannel
*
aChannel
nsIPrincipal
*
aPrincipal
nsIURI
*
aURI
nsICookieSettings
*
aCookieSettings
uint32_t
&
aRejectedReason
)
{
MOZ_ASSERT
(
aWindow
|
|
aChannel
|
|
aPrincipal
)
;
if
(
aWindow
)
{
nsIURI
*
documentURI
=
aURI
?
aURI
:
aWindow
-
>
GetDocumentURI
(
)
;
return
!
documentURI
|
|
!
AntiTrackingCommon
:
:
IsFirstPartyStorageAccessGrantedFor
(
aWindow
documentURI
&
aRejectedReason
)
;
}
if
(
aChannel
)
{
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
!
AntiTrackingCommon
:
:
IsFirstPartyStorageAccessGrantedFor
(
aChannel
uri
&
aRejectedReason
)
;
}
MOZ_ASSERT
(
aPrincipal
)
;
return
!
AntiTrackingCommon
:
:
IsFirstPartyStorageAccessGrantedFor
(
aPrincipal
aCookieSettings
)
;
}
namespace
mozilla
{
StorageAccess
StorageAllowedForWindow
(
nsPIDOMWindowInner
*
aWindow
uint32_t
*
aRejectedReason
)
{
uint32_t
rejectedReason
;
if
(
!
aRejectedReason
)
{
aRejectedReason
=
&
rejectedReason
;
}
*
aRejectedReason
=
0
;
if
(
Document
*
document
=
aWindow
-
>
GetExtantDoc
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
=
document
-
>
NodePrincipal
(
)
;
nsIChannel
*
channel
=
document
-
>
GetChannel
(
)
;
return
InternalStorageAllowedCheck
(
principal
aWindow
nullptr
channel
document
-
>
CookieSettings
(
)
*
aRejectedReason
)
;
}
return
StorageAccess
:
:
eDeny
;
}
StorageAccess
StorageAllowedForDocument
(
const
Document
*
aDoc
)
{
MOZ_ASSERT
(
aDoc
)
;
if
(
nsPIDOMWindowInner
*
inner
=
aDoc
-
>
GetInnerWindow
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
=
aDoc
-
>
NodePrincipal
(
)
;
nsIChannel
*
channel
=
aDoc
-
>
GetChannel
(
)
;
uint32_t
rejectedReason
=
0
;
return
InternalStorageAllowedCheck
(
principal
inner
nullptr
channel
const_cast
<
Document
*
>
(
aDoc
)
-
>
CookieSettings
(
)
rejectedReason
)
;
}
return
StorageAccess
:
:
eDeny
;
}
StorageAccess
StorageAllowedForNewWindow
(
nsIPrincipal
*
aPrincipal
nsIURI
*
aURI
nsPIDOMWindowInner
*
aParent
)
{
MOZ_ASSERT
(
aPrincipal
)
;
MOZ_ASSERT
(
aURI
)
;
uint32_t
rejectedReason
=
0
;
nsCOMPtr
<
nsICookieSettings
>
cs
;
if
(
aParent
&
&
aParent
-
>
GetExtantDoc
(
)
)
{
cs
=
aParent
-
>
GetExtantDoc
(
)
-
>
CookieSettings
(
)
;
}
else
{
cs
=
net
:
:
CookieSettings
:
:
Create
(
)
;
}
return
InternalStorageAllowedCheck
(
aPrincipal
aParent
aURI
nullptr
cs
rejectedReason
)
;
}
StorageAccess
StorageAllowedForChannel
(
nsIChannel
*
aChannel
)
{
MOZ_DIAGNOSTIC_ASSERT
(
nsContentUtils
:
:
GetSecurityManager
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aChannel
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
Unused
<
<
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
GetChannelResultPrincipal
(
aChannel
getter_AddRefs
(
principal
)
)
;
NS_ENSURE_TRUE
(
principal
StorageAccess
:
:
eDeny
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsICookieSettings
>
cookieSettings
;
nsresult
rv
=
loadInfo
-
>
GetCookieSettings
(
getter_AddRefs
(
cookieSettings
)
)
;
NS_ENSURE_SUCCESS
(
rv
StorageAccess
:
:
eDeny
)
;
uint32_t
rejectedReason
=
0
;
StorageAccess
result
=
InternalStorageAllowedCheck
(
principal
nullptr
nullptr
aChannel
cookieSettings
rejectedReason
)
;
return
result
;
}
StorageAccess
StorageAllowedForServiceWorker
(
nsIPrincipal
*
aPrincipal
nsICookieSettings
*
aCookieSettings
)
{
uint32_t
rejectedReason
=
0
;
return
InternalStorageAllowedCheck
(
aPrincipal
nullptr
nullptr
nullptr
aCookieSettings
rejectedReason
)
;
}
bool
StorageDisabledByAntiTracking
(
nsPIDOMWindowInner
*
aWindow
nsIChannel
*
aChannel
nsIPrincipal
*
aPrincipal
nsIURI
*
aURI
uint32_t
&
aRejectedReason
)
{
nsCOMPtr
<
nsICookieSettings
>
cookieSettings
;
if
(
aWindow
)
{
if
(
aWindow
-
>
GetExtantDoc
(
)
)
{
cookieSettings
=
aWindow
-
>
GetExtantDoc
(
)
-
>
CookieSettings
(
)
;
}
}
else
if
(
aChannel
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
Unused
<
<
loadInfo
-
>
GetCookieSettings
(
getter_AddRefs
(
cookieSettings
)
)
;
}
if
(
!
cookieSettings
)
{
cookieSettings
=
net
:
:
CookieSettings
:
:
Create
(
)
;
}
bool
disabled
=
StorageDisabledByAntiTrackingInternal
(
aWindow
aChannel
aPrincipal
aURI
cookieSettings
aRejectedReason
)
;
if
(
StaticPrefs
:
:
browser_contentblocking_rejecttrackers_control_center_ui_enabled
(
)
)
{
if
(
aWindow
)
{
AntiTrackingCommon
:
:
NotifyBlockingDecision
(
aWindow
disabled
?
AntiTrackingCommon
:
:
BlockingDecision
:
:
eBlock
:
AntiTrackingCommon
:
:
BlockingDecision
:
:
eAllow
aRejectedReason
)
;
}
else
if
(
aChannel
)
{
AntiTrackingCommon
:
:
NotifyBlockingDecision
(
aChannel
disabled
?
AntiTrackingCommon
:
:
BlockingDecision
:
:
eBlock
:
AntiTrackingCommon
:
:
BlockingDecision
:
:
eAllow
aRejectedReason
)
;
}
}
return
disabled
;
}
bool
ShouldPartitionStorage
(
StorageAccess
aAccess
)
{
return
aAccess
=
=
StorageAccess
:
:
ePartitionTrackersOrDeny
|
|
aAccess
=
=
StorageAccess
:
:
ePartitionForeignOrDeny
;
}
bool
ShouldPartitionStorage
(
uint32_t
aRejectedReason
)
{
return
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
|
|
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
;
}
bool
StoragePartitioningEnabled
(
StorageAccess
aAccess
nsICookieSettings
*
aCookieSettings
)
{
if
(
aAccess
=
=
StorageAccess
:
:
ePartitionTrackersOrDeny
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER
&
&
StaticPrefs
:
:
privacy_storagePrincipal_enabledForTrackers
(
)
;
}
if
(
aAccess
=
=
StorageAccess
:
:
ePartitionForeignOrDeny
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
;
}
return
false
;
}
bool
StoragePartitioningEnabled
(
uint32_t
aRejectedReason
nsICookieSettings
*
aCookieSettings
)
{
if
(
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER
&
&
StaticPrefs
:
:
privacy_storagePrincipal_enabledForTrackers
(
)
;
}
if
(
aRejectedReason
=
=
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
)
{
return
aCookieSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
;
}
return
false
;
}
}
