#
ifndef
mozilla_antitrackingutils_h
#
define
mozilla_antitrackingutils_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsPIDOMWindowInner
;
class
nsPIDOMWindowOuter
;
class
nsIChannel
;
class
nsIPermission
;
class
nsIPrincipal
;
class
nsIURI
;
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
}
class
AntiTrackingUtils
final
{
public
:
static
already_AddRefed
<
nsPIDOMWindowOuter
>
GetTopWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
static
already_AddRefed
<
nsIURI
>
MaybeGetDocumentURIBeingLoaded
(
nsIChannel
*
aChannel
)
;
static
void
CreateStoragePermissionKey
(
const
nsCString
&
aTrackingOrigin
nsACString
&
aPermissionKey
)
;
static
bool
CreateStoragePermissionKey
(
nsIPrincipal
*
aPrincipal
nsACString
&
aKey
)
;
static
bool
IsStorageAccessPermission
(
nsIPermission
*
aPermission
nsIPrincipal
*
aPrincipal
)
;
static
bool
CheckStoragePermission
(
nsIPrincipal
*
aPrincipal
const
nsAutoCString
&
aType
bool
aIsInPrivateBrowsing
uint32_t
*
aRejectedReason
uint32_t
aBlockedReason
)
;
static
bool
HasStoragePermissionInParent
(
nsIChannel
*
aChannel
)
;
static
uint64_t
GetTopLevelAntiTrackingWindowId
(
dom
:
:
BrowsingContext
*
aBrowsingContext
)
;
static
uint64_t
GetTopLevelStorageAreaWindowId
(
dom
:
:
BrowsingContext
*
aBrowsingContext
)
;
}
;
}
#
endif
