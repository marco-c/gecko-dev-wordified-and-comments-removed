#
include
"
RejectForeignAllowList
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsNetUtil
.
h
"
#
define
REJECTFOREIGNALLOWLIST_PREF
"
privacy
.
rejectForeign
.
allowList
"
_ns
#
define
REJECTFOREIGNALLOWLIST_NAME
"
RejectForeignAllowList
"
_ns
namespace
mozilla
{
namespace
{
StaticRefPtr
<
RejectForeignAllowList
>
gRejectForeignAllowList
;
}
bool
RejectForeignAllowList
:
:
Check
(
dom
:
:
Document
*
aDocument
)
{
MOZ_ASSERT
(
aDocument
)
;
nsIURI
*
documentURI
=
aDocument
-
>
GetDocumentURI
(
)
;
if
(
!
documentURI
)
{
return
false
;
}
return
GetOrCreate
(
)
-
>
CheckInternal
(
documentURI
)
;
}
bool
RejectForeignAllowList
:
:
Check
(
nsIHttpChannel
*
aChannel
)
{
MOZ_ASSERT
(
aChannel
)
;
nsCOMPtr
<
nsIURI
>
channelURI
;
nsresult
rv
=
NS_GetFinalChannelURI
(
aChannel
getter_AddRefs
(
channelURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
GetOrCreate
(
)
-
>
CheckInternal
(
channelURI
)
;
}
RejectForeignAllowList
*
RejectForeignAllowList
:
:
GetOrCreate
(
)
{
if
(
!
gRejectForeignAllowList
)
{
gRejectForeignAllowList
=
new
RejectForeignAllowList
(
)
;
nsCOMPtr
<
nsIUrlClassifierSkipListService
>
skipListService
=
do_GetService
(
"
mozilla
.
org
/
url
-
classifier
/
skip
-
list
-
service
;
1
"
)
;
if
(
skipListService
)
{
skipListService
-
>
RegisterAndRunSkipListObserver
(
REJECTFOREIGNALLOWLIST_NAME
REJECTFOREIGNALLOWLIST_PREF
gRejectForeignAllowList
)
;
}
RunOnShutdown
(
[
skipListService
]
{
if
(
gRejectForeignAllowList
)
{
if
(
skipListService
)
{
skipListService
-
>
UnregisterSkipListObserver
(
REJECTFOREIGNALLOWLIST_NAME
gRejectForeignAllowList
)
;
}
gRejectForeignAllowList
=
nullptr
;
}
}
)
;
}
return
gRejectForeignAllowList
;
}
bool
RejectForeignAllowList
:
:
CheckInternal
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
aURI
)
;
return
nsContentUtils
:
:
IsURIInList
(
aURI
mList
)
;
}
NS_IMETHODIMP
RejectForeignAllowList
:
:
OnSkipListUpdate
(
const
nsACString
&
aList
)
{
mList
=
aList
;
return
NS_OK
;
}
RejectForeignAllowList
:
:
RejectForeignAllowList
(
)
=
default
;
RejectForeignAllowList
:
:
~
RejectForeignAllowList
(
)
=
default
;
NS_INTERFACE_MAP_BEGIN
(
RejectForeignAllowList
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIUrlClassifierSkipListObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIUrlClassifierSkipListObserver
)
NS_INTERFACE_MAP_END
NS_IMPL_ADDREF
(
RejectForeignAllowList
)
NS_IMPL_RELEASE
(
RejectForeignAllowList
)
}
