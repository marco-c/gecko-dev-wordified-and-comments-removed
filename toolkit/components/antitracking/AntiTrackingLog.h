#
ifndef
mozilla_antitrackinglog_h
#
define
mozilla_antitrackinglog_h
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gAntiTrackingLog
;
static
const
nsCString
:
:
size_type
sMaxSpecLength
=
128
;
#
define
LOG
(
format
)
MOZ_LOG
(
gAntiTrackingLog
mozilla
:
:
LogLevel
:
:
Debug
format
)
#
define
LOG_SPEC
(
format
uri
)
\
PR_BEGIN_MACRO
\
if
(
MOZ_LOG_TEST
(
gAntiTrackingLog
mozilla
:
:
LogLevel
:
:
Debug
)
)
{
\
nsAutoCString
_specStr
(
NS_LITERAL_CSTRING
(
"
(
null
)
"
)
)
;
\
_specStr
.
Truncate
(
std
:
:
min
(
_specStr
.
Length
(
)
sMaxSpecLength
)
)
;
\
if
(
uri
)
{
\
_specStr
=
(
uri
)
-
>
GetSpecOrDefault
(
)
;
\
}
\
const
char
*
_spec
=
_specStr
.
get
(
)
;
\
LOG
(
format
)
;
\
}
\
PR_END_MACRO
#
define
LOG_SPEC2
(
format
uri1
uri2
)
\
PR_BEGIN_MACRO
\
if
(
MOZ_LOG_TEST
(
gAntiTrackingLog
mozilla
:
:
LogLevel
:
:
Debug
)
)
{
\
nsAutoCString
_specStr1
(
NS_LITERAL_CSTRING
(
"
(
null
)
"
)
)
;
\
_specStr1
.
Truncate
(
std
:
:
min
(
_specStr1
.
Length
(
)
sMaxSpecLength
)
)
;
\
if
(
uri1
)
{
\
_specStr1
=
(
uri1
)
-
>
GetSpecOrDefault
(
)
;
\
}
\
const
char
*
_spec1
=
_specStr1
.
get
(
)
;
\
nsAutoCString
_specStr2
(
NS_LITERAL_CSTRING
(
"
(
null
)
"
)
)
;
\
_specStr2
.
Truncate
(
std
:
:
min
(
_specStr2
.
Length
(
)
sMaxSpecLength
)
)
;
\
if
(
uri2
)
{
\
_specStr2
=
(
uri2
)
-
>
GetSpecOrDefault
(
)
;
\
}
\
const
char
*
_spec2
=
_specStr2
.
get
(
)
;
\
LOG
(
format
)
;
\
}
\
PR_END_MACRO
#
define
LOG_PRIN
(
format
principal
)
\
PR_BEGIN_MACRO
\
if
(
MOZ_LOG_TEST
(
gAntiTrackingLog
mozilla
:
:
LogLevel
:
:
Debug
)
)
{
\
nsAutoCString
_specStr
(
NS_LITERAL_CSTRING
(
"
(
null
)
"
)
)
;
\
_specStr
.
Truncate
(
std
:
:
min
(
_specStr
.
Length
(
)
sMaxSpecLength
)
)
;
\
if
(
principal
)
{
\
(
principal
)
-
>
GetAsciiSpec
(
_specStr
)
;
\
}
\
const
char
*
_spec
=
_specStr
.
get
(
)
;
\
LOG
(
format
)
;
\
}
\
PR_END_MACRO
}
#
endif
