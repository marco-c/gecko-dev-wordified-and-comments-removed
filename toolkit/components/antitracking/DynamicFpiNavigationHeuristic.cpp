#
include
"
DynamicFpiNavigationHeuristic
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
BounceTrackingRecord
.
h
"
#
include
"
mozilla
/
BounceTrackingState
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
glean
/
AntitrackingMetrics
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsIURIClassifier
.
h
"
namespace
mozilla
{
void
DynamicFpiNavigationHeuristic
:
:
MaybeGrantStorageAccess
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIChannel
*
aChannel
)
{
if
(
!
StaticPrefs
:
:
privacy_antitracking_enableWebcompat
(
)
|
|
!
StaticPrefs
:
:
privacy_restrict3rdpartystorage_heuristic_navigation
(
)
)
{
return
;
}
NS_ENSURE_TRUE_VOID
(
aBrowsingContext
)
;
NS_ENSURE_FALSE_VOID
(
aBrowsingContext
-
>
IsSubframe
(
)
)
;
RefPtr
<
BounceTrackingState
>
bounceTrackingState
=
aBrowsingContext
-
>
GetBounceTrackingState
(
)
;
NS_ENSURE_TRUE_VOID
(
bounceTrackingState
)
;
NS_ENSURE_TRUE_VOID
(
aChannel
)
;
nsCOMPtr
<
nsIPrincipal
>
resultPrincipal
;
nsresult
rv
=
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
GetChannelResultPrincipal
(
aChannel
getter_AddRefs
(
resultPrincipal
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
resultPrincipal
|
|
!
resultPrincipal
-
>
GetIsContentPrincipal
(
)
)
{
return
;
}
const
Maybe
<
BounceTrackingRecord
>
&
maybeRecord
=
bounceTrackingState
-
>
GetBounceTrackingRecord
(
)
;
if
(
maybeRecord
.
isNothing
(
)
)
{
return
;
}
const
BounceTrackingRecord
&
record
=
maybeRecord
.
ref
(
)
;
nsCOMPtr
<
nsISHistory
>
shistory
=
aBrowsingContext
-
>
GetSessionHistory
(
)
;
if
(
!
shistory
)
{
return
;
}
int32_t
index
=
-
1
;
rv
=
shistory
-
>
GetIndex
(
&
index
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
bool
foundResultSiteInHistory
=
false
;
nsTArray
<
RefPtr
<
nsIURI
>
>
candidateURIs
;
RefPtr
<
nsISHEntry
>
entry
;
for
(
int32_t
i
=
0
;
i
<
=
index
;
i
+
+
)
{
shistory
-
>
GetEntryAtIndex
(
index
-
i
getter_AddRefs
(
entry
)
)
;
if
(
!
entry
)
{
continue
;
}
RefPtr
<
nsIURI
>
entryURI
=
entry
-
>
GetResultPrincipalURI
(
)
;
if
(
!
entryURI
)
{
continue
;
}
bool
isThirdPartyEntry
=
false
;
nsresult
rv
=
resultPrincipal
-
>
IsThirdPartyURI
(
entryURI
&
isThirdPartyEntry
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
isThirdPartyEntry
)
{
nsAutoCString
entryScheme
;
rv
=
entryURI
-
>
GetScheme
(
entryScheme
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
resultPrincipal
-
>
SchemeIs
(
entryScheme
.
get
(
)
)
)
{
foundResultSiteInHistory
=
true
;
break
;
}
}
nsAutoCString
entrySiteHost
;
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
components
:
:
ThirdPartyUtil
:
:
Service
(
)
;
if
(
!
thirdPartyUtil
)
{
continue
;
}
rv
=
thirdPartyUtil
-
>
GetBaseDomain
(
entryURI
entrySiteHost
)
;
if
(
NS_FAILED
(
rv
)
)
{
continue
;
}
if
(
record
.
GetUserActivationHosts
(
)
.
Contains
(
entrySiteHost
)
)
{
candidateURIs
.
AppendElement
(
entryURI
)
;
}
}
if
(
foundResultSiteInHistory
)
{
for
(
nsIURI
*
uri
:
candidateURIs
)
{
RefPtr
<
nsIPrincipal
>
embedeePrincipal
=
BasePrincipal
:
:
CreateContentPrincipal
(
uri
resultPrincipal
-
>
OriginAttributesRef
(
)
)
;
Unused
<
<
StorageAccessAPIHelper
:
:
SaveAccessForOriginOnParentProcess
(
embedeePrincipal
resultPrincipal
StorageAccessAPIHelper
:
:
StorageAccessPromptChoices
:
:
eAllow
false
StaticPrefs
:
:
privacy_restrict3rdpartystorage_expiration_visited
(
)
)
;
glean
:
:
contentblocking
:
:
storage_access_granted_count
.
EnumGet
(
glean
:
:
contentblocking
:
:
StorageAccessGrantedCountLabel
:
:
eStoragegranted
)
.
Add
(
)
;
glean
:
:
contentblocking
:
:
storage_access_granted_count
.
EnumGet
(
glean
:
:
contentblocking
:
:
StorageAccessGrantedCountLabel
:
:
eNavigation
)
.
Add
(
)
;
StorageAccessGrantTelemetryClassification
:
:
MaybeReportTracker
(
static_cast
<
uint16_t
>
(
glean
:
:
contentblocking
:
:
StorageAccessGrantedCountLabel
:
:
eNavigationCt
)
uri
)
;
}
}
}
}
