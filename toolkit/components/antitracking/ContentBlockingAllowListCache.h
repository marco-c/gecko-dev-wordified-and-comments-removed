#
ifndef
mozilla_contentblockingallowlistcache_h
#
define
mozilla_contentblockingallowlistcache_h
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
MruCache
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIHttpChannel
.
h
"
namespace
mozilla
{
struct
ContentBlockingAllowListKey
{
ContentBlockingAllowListKey
(
)
:
mHash
(
mozilla
:
:
HashGeneric
(
uintptr_t
(
0
)
)
)
{
}
explicit
ContentBlockingAllowListKey
(
nsPIDOMWindowInner
*
aWindow
)
:
mHash
(
mozilla
:
:
AddToHash
(
aWindow
-
>
WindowID
(
)
mozilla
:
:
HashString
(
"
window
"
)
)
)
{
}
explicit
ContentBlockingAllowListKey
(
nsIHttpChannel
*
aChannel
)
:
mHash
(
mozilla
:
:
AddToHash
(
aChannel
-
>
ChannelId
(
)
mozilla
:
:
HashString
(
"
channel
"
)
)
)
{
}
ContentBlockingAllowListKey
(
const
ContentBlockingAllowListKey
&
aRHS
)
=
default
;
bool
operator
=
=
(
const
ContentBlockingAllowListKey
&
aRHS
)
const
{
return
mHash
=
=
aRHS
.
mHash
;
}
HashNumber
GetHash
(
)
const
{
return
mHash
;
}
private
:
HashNumber
mHash
;
}
;
struct
ContentBlockingAllowListEntry
{
ContentBlockingAllowListEntry
(
)
:
mResult
(
false
)
{
}
ContentBlockingAllowListEntry
(
nsPIDOMWindowInner
*
aWindow
bool
aResult
)
:
mKey
(
aWindow
)
mResult
(
aResult
)
{
}
ContentBlockingAllowListEntry
(
nsIHttpChannel
*
aChannel
bool
aResult
)
:
mKey
(
aChannel
)
mResult
(
aResult
)
{
}
ContentBlockingAllowListKey
mKey
;
bool
mResult
;
}
;
struct
ContentBlockingAllowListCache
:
MruCache
<
ContentBlockingAllowListKey
ContentBlockingAllowListEntry
ContentBlockingAllowListCache
>
{
static
HashNumber
Hash
(
const
ContentBlockingAllowListKey
&
aKey
)
{
return
aKey
.
GetHash
(
)
;
}
static
bool
Match
(
const
ContentBlockingAllowListKey
&
aKey
const
ContentBlockingAllowListEntry
&
aValue
)
{
return
aValue
.
mKey
=
=
aKey
;
}
}
;
}
#
endif
