#
ifndef
mozilla_antitrackingservice_h
#
define
mozilla_antitrackingservice_h
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
ContentBlockingNotifier
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPrefs_privacy
.
h
"
#
define
USER_INTERACTION_PERM
NS_LITERAL_CSTRING
(
"
storageAccessAPI
"
)
class
nsIChannel
;
class
nsICookieJarSettings
;
class
nsIPermission
;
class
nsIPrincipal
;
class
nsIURI
;
class
nsPIDOMWindowInner
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
class
OriginAttributes
;
class
AntiTrackingCommon
final
{
public
:
typedef
std
:
:
function
<
void
(
const
bool
&
)
>
FirstPartyStorageAccessGrantedForOriginResolver
;
static
bool
IsFirstPartyStorageAccessGrantedFor
(
nsPIDOMWindowInner
*
a3rdPartyTrackingWindow
nsIURI
*
aURI
uint32_t
*
aRejectedReason
)
;
static
bool
MaybeIsFirstPartyStorageAccessGrantedFor
(
nsPIDOMWindowInner
*
aFirstPartyWindow
nsIURI
*
aURI
)
;
static
bool
IsFirstPartyStorageAccessGrantedFor
(
nsIChannel
*
aChannel
nsIURI
*
aURI
uint32_t
*
aRejectedReason
)
;
static
bool
IsFirstPartyStorageAccessGrantedFor
(
nsIPrincipal
*
aPrincipal
nsICookieJarSettings
*
aCookieJarSettings
)
;
enum
StorageAccessPromptChoices
{
eAllow
eAllowAutoGrant
}
;
typedef
MozPromise
<
int
bool
true
>
StorageAccessFinalCheckPromise
;
typedef
std
:
:
function
<
RefPtr
<
StorageAccessFinalCheckPromise
>
(
)
>
PerformFinalChecks
;
typedef
MozPromise
<
int
bool
true
>
StorageAccessGrantPromise
;
static
MOZ_MUST_USE
RefPtr
<
StorageAccessGrantPromise
>
AddFirstPartyStorageAccessGrantedFor
(
nsIPrincipal
*
aPrincipal
nsPIDOMWindowInner
*
aParentWindow
ContentBlockingNotifier
:
:
StorageAccessGrantedReason
aReason
const
PerformFinalChecks
&
aPerformFinalChecks
=
nullptr
)
;
static
void
StoreUserInteractionFor
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
HasUserInteraction
(
nsIPrincipal
*
aPrincipal
)
;
typedef
MozPromise
<
nsresult
bool
true
>
FirstPartyStorageAccessGrantPromise
;
static
RefPtr
<
FirstPartyStorageAccessGrantPromise
>
SaveFirstPartyStorageAccessGrantedForOriginOnParentProcess
(
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aTrackingPrinciapl
const
nsCString
&
aTrackingOrigin
int
aAllowMode
uint64_t
aExpirationTime
=
StaticPrefs
:
:
privacy_restrict3rdpartystorage_expiration
(
)
)
;
}
;
}
#
endif
