#
ifndef
mozilla_antitrackingservice_h
#
define
mozilla_antitrackingservice_h
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
nsIChannel
;
class
nsIHttpChannel
;
class
nsIPrincipal
;
class
nsIURI
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
AntiTrackingCommon
final
{
public
:
typedef
std
:
:
function
<
void
(
const
bool
&
)
>
FirstPartyStorageAccessGrantedForOriginResolver
;
static
bool
IsFirstPartyStorageAccessGrantedFor
(
nsPIDOMWindowInner
*
a3rdPartyTrackingWindow
nsIURI
*
aURI
)
;
static
bool
MaybeIsFirstPartyStorageAccessGrantedFor
(
nsPIDOMWindowInner
*
aFirstPartyWindow
nsIURI
*
aURI
)
;
static
bool
IsFirstPartyStorageAccessGrantedFor
(
nsIHttpChannel
*
aChannel
nsIURI
*
aURI
)
;
static
bool
IsFirstPartyStorageAccessGrantedFor
(
nsIPrincipal
*
aPrincipal
)
;
typedef
MozPromise
<
bool
bool
false
>
StorageAccessGrantPromise
;
static
MOZ_MUST_USE
RefPtr
<
StorageAccessGrantPromise
>
AddFirstPartyStorageAccessGrantedFor
(
const
nsAString
&
aOrigin
nsPIDOMWindowInner
*
aParentWindow
)
;
static
void
SaveFirstPartyStorageAccessGrantedForOriginOnParentProcess
(
nsIPrincipal
*
aPrincipal
const
nsCString
&
aParentOrigin
const
nsCString
&
aGrantedOrigin
FirstPartyStorageAccessGrantedForOriginResolver
&
&
aResolver
)
;
static
nsresult
IsOnContentBlockingAllowList
(
nsIURI
*
aTopWinURI
bool
&
aIsAllowListed
)
;
static
void
NotifyRejection
(
nsIChannel
*
aChannel
)
;
}
;
}
#
endif
