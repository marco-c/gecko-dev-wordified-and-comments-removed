#
include
"
AntiTrackingLog
.
h
"
#
include
"
ContentBlockingNotifier
.
h
"
#
include
"
AntiTrackingUtils
.
h
"
#
include
"
mozilla
/
EventQueue
.
h
"
#
include
"
mozilla
/
StaticPrefs_privacy
.
h
"
#
include
"
mozilla
/
dom
/
BrowserChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
nsIClassifiedChannel
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIOService
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
BrowsingContext
;
using
mozilla
:
:
dom
:
:
ContentChild
;
using
mozilla
:
:
dom
:
:
Document
;
static
const
uint32_t
kMaxConsoleOutputDelayMs
=
100
;
namespace
{
void
RunConsoleReportingRunnable
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
if
(
StaticPrefs
:
:
privacy_restrict3rdpartystorage_console_lazy
(
)
)
{
nsresult
rv
=
NS_DispatchToCurrentThreadQueue
(
std
:
:
move
(
aRunnable
)
kMaxConsoleOutputDelayMs
EventQueuePriority
:
:
Idle
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
}
else
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
std
:
:
move
(
aRunnable
)
)
;
nsresult
rv
=
runnable
-
>
Run
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
}
}
void
ReportUnblockingToConsole
(
uint64_t
aWindowID
nsIPrincipal
*
aPrincipal
const
nsAString
&
aTrackingOrigin
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
aReason
)
{
MOZ_ASSERT
(
aWindowID
)
;
MOZ_ASSERT
(
aPrincipal
)
;
nsAutoString
sourceLine
;
uint32_t
lineNumber
=
0
columnNumber
=
0
;
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
cx
)
{
nsJSUtils
:
:
GetCallingLocation
(
cx
sourceLine
&
lineNumber
&
columnNumber
)
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
(
aPrincipal
)
;
nsAutoString
trackingOrigin
(
aTrackingOrigin
)
;
RefPtr
<
Runnable
>
runnable
=
NS_NewRunnableFunction
(
"
ReportUnblockingToConsoleDelayed
"
[
aWindowID
sourceLine
lineNumber
columnNumber
principal
trackingOrigin
aReason
]
(
)
{
const
char
*
messageWithSameOrigin
=
nullptr
;
switch
(
aReason
)
{
case
ContentBlockingNotifier
:
:
eStorageAccessAPI
:
case
ContentBlockingNotifier
:
:
ePrivilegeStorageAccessForOriginAPI
:
messageWithSameOrigin
=
"
CookieAllowedForOriginByStorageAccessAPI
"
;
break
;
case
ContentBlockingNotifier
:
:
eOpenerAfterUserInteraction
:
[
[
fallthrough
]
]
;
case
ContentBlockingNotifier
:
:
eOpener
:
messageWithSameOrigin
=
"
CookieAllowedForOriginByHeuristic
"
;
break
;
}
nsAutoString
origin
;
nsresult
rv
=
nsContentUtils
:
:
GetUTFOrigin
(
principal
origin
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
AutoTArray
<
nsString
2
>
params
=
{
origin
trackingOrigin
}
;
nsAutoString
errorText
;
rv
=
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eNECKO_PROPERTIES
messageWithSameOrigin
params
errorText
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
nsContentUtils
:
:
ReportToConsoleByWindowID
(
errorText
nsIScriptError
:
:
warningFlag
ANTITRACKING_CONSOLE_CATEGORY
aWindowID
nullptr
sourceLine
lineNumber
columnNumber
)
;
}
)
;
RunConsoleReportingRunnable
(
runnable
.
forget
(
)
)
;
}
void
ReportBlockingToConsole
(
uint64_t
aWindowID
nsIURI
*
aURI
uint32_t
aRejectedReason
)
{
MOZ_ASSERT
(
aWindowID
)
;
MOZ_ASSERT
(
aURI
)
;
MOZ_ASSERT
(
aRejectedReason
=
=
0
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_BY_PERMISSION
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_SOCIALTRACKER
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_ALL
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_FOREIGN
)
)
;
if
(
aURI
-
>
SchemeIs
(
"
chrome
"
)
|
|
aURI
-
>
SchemeIs
(
"
about
"
)
)
{
return
;
}
bool
hasFlags
;
nsresult
rv
=
NS_URIChainHasFlags
(
aURI
nsIProtocolHandler
:
:
URI_FORBIDS_COOKIE_ACCESS
&
hasFlags
)
;
if
(
NS_FAILED
(
rv
)
|
|
hasFlags
)
{
return
;
}
nsAutoString
sourceLine
;
uint32_t
lineNumber
=
0
columnNumber
=
0
;
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
cx
)
{
nsJSUtils
:
:
GetCallingLocation
(
cx
sourceLine
&
lineNumber
&
columnNumber
)
;
}
nsCOMPtr
<
nsIURI
>
uri
(
aURI
)
;
RefPtr
<
Runnable
>
runnable
=
NS_NewRunnableFunction
(
"
ReportBlockingToConsoleDelayed
"
[
aWindowID
sourceLine
lineNumber
columnNumber
uri
aRejectedReason
]
(
)
{
const
char
*
message
=
nullptr
;
nsAutoCString
category
;
switch
(
aRejectedReason
)
{
case
uint32_t
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_BY_PERMISSION
)
:
message
=
"
CookieBlockedByPermission
"
;
category
=
"
cookieBlockedPermission
"
_ns
;
break
;
case
uint32_t
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
)
:
message
=
"
CookieBlockedTracker
"
;
category
=
"
cookieBlockedTracker
"
_ns
;
break
;
case
uint32_t
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_ALL
)
:
message
=
"
CookieBlockedAll
"
;
category
=
"
cookieBlockedAll
"
_ns
;
break
;
case
uint32_t
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_FOREIGN
)
:
message
=
"
CookieBlockedForeign
"
;
category
=
"
cookieBlockedForeign
"
_ns
;
break
;
case
uint32_t
(
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
)
:
message
=
"
CookiePartitionedForeign2
"
;
category
=
"
cookiePartitionedForeign
"
_ns
;
break
;
default
:
return
;
}
MOZ_ASSERT
(
message
)
;
nsCOMPtr
<
nsIURI
>
exposableURI
=
net
:
:
nsIOService
:
:
CreateExposableURI
(
uri
)
;
AutoTArray
<
nsString
1
>
params
;
CopyUTF8toUTF16
(
exposableURI
-
>
GetSpecOrDefault
(
)
*
params
.
AppendElement
(
)
)
;
nsAutoString
errorText
;
nsresult
rv
=
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eNECKO_PROPERTIES
message
params
errorText
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
nsContentUtils
:
:
ReportToConsoleByWindowID
(
errorText
nsIScriptError
:
:
warningFlag
category
aWindowID
nullptr
sourceLine
lineNumber
columnNumber
)
;
}
)
;
RunConsoleReportingRunnable
(
runnable
.
forget
(
)
)
;
}
void
ReportBlockingToConsole
(
nsIChannel
*
aChannel
nsIURI
*
aURI
uint32_t
aRejectedReason
)
{
MOZ_ASSERT
(
aChannel
&
&
aURI
)
;
uint64_t
windowID
=
nsContentUtils
:
:
GetInnerWindowID
(
aChannel
)
;
if
(
!
windowID
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
RefPtr
<
dom
:
:
BrowsingContext
>
targetBrowsingContext
;
loadInfo
-
>
GetTargetBrowsingContext
(
getter_AddRefs
(
targetBrowsingContext
)
)
;
if
(
!
targetBrowsingContext
)
{
return
;
}
WindowContext
*
windowContext
=
targetBrowsingContext
-
>
GetCurrentWindowContext
(
)
;
if
(
!
windowContext
)
{
return
;
}
windowID
=
windowContext
-
>
InnerWindowId
(
)
;
}
ReportBlockingToConsole
(
windowID
aURI
aRejectedReason
)
;
}
void
NotifyBlockingDecision
(
nsIChannel
*
aTrackingChannel
ContentBlockingNotifier
:
:
BlockingDecision
aDecision
uint32_t
aRejectedReason
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
aTrackingChannel
)
;
if
(
XRE_IsContentProcess
(
)
)
{
nsCOMPtr
<
nsILoadContext
>
loadContext
;
NS_QueryNotificationCallbacks
(
aTrackingChannel
loadContext
)
;
if
(
!
loadContext
)
{
return
;
}
nsCOMPtr
<
mozIDOMWindowProxy
>
window
;
loadContext
-
>
GetAssociatedWindow
(
getter_AddRefs
(
window
)
)
;
if
(
!
window
)
{
return
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
outer
=
nsPIDOMWindowOuter
:
:
From
(
window
)
;
if
(
!
outer
)
{
return
;
}
if
(
nsGlobalWindowOuter
:
:
Cast
(
outer
)
-
>
GetPrincipal
(
)
=
=
nsContentUtils
:
:
GetSystemPrincipal
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aDecision
=
=
ContentBlockingNotifier
:
:
BlockingDecision
:
:
eAllow
)
;
return
;
}
}
nsAutoCString
trackingOrigin
;
if
(
aURI
)
{
Unused
<
<
nsContentUtils
:
:
GetASCIIOrigin
(
aURI
trackingOrigin
)
;
}
if
(
aDecision
=
=
ContentBlockingNotifier
:
:
BlockingDecision
:
:
eBlock
)
{
ContentBlockingNotifier
:
:
OnEvent
(
aTrackingChannel
true
aRejectedReason
trackingOrigin
)
;
ReportBlockingToConsole
(
aTrackingChannel
aURI
aRejectedReason
)
;
}
ContentBlockingNotifier
:
:
OnEvent
(
aTrackingChannel
false
nsIWebProgressListener
:
:
STATE_COOKIES_LOADED
trackingOrigin
)
;
nsCOMPtr
<
nsIClassifiedChannel
>
classifiedChannel
=
do_QueryInterface
(
aTrackingChannel
)
;
if
(
!
classifiedChannel
)
{
return
;
}
uint32_t
classificationFlags
=
classifiedChannel
-
>
GetThirdPartyClassificationFlags
(
)
;
if
(
classificationFlags
&
nsIClassifiedChannel
:
:
ClassificationFlags
:
:
CLASSIFIED_TRACKING
)
{
ContentBlockingNotifier
:
:
OnEvent
(
aTrackingChannel
false
nsIWebProgressListener
:
:
STATE_COOKIES_LOADED_TRACKER
trackingOrigin
)
;
}
if
(
classificationFlags
&
nsIClassifiedChannel
:
:
ClassificationFlags
:
:
CLASSIFIED_SOCIALTRACKING
)
{
ContentBlockingNotifier
:
:
OnEvent
(
aTrackingChannel
false
nsIWebProgressListener
:
:
STATE_COOKIES_LOADED_SOCIALTRACKER
trackingOrigin
)
;
}
}
void
NotifyEventInChild
(
nsIChannel
*
aTrackingChannel
bool
aBlocked
uint32_t
aRejectedReason
const
nsACString
&
aTrackingOrigin
const
Maybe
<
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
>
&
aReason
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
nsCOMPtr
<
nsILoadContext
>
loadContext
;
NS_QueryNotificationCallbacks
(
aTrackingChannel
loadContext
)
;
if
(
!
loadContext
)
{
return
;
}
nsCOMPtr
<
mozIDOMWindowProxy
>
window
;
loadContext
-
>
GetAssociatedWindow
(
getter_AddRefs
(
window
)
)
;
if
(
!
window
)
{
return
;
}
RefPtr
<
dom
:
:
BrowserChild
>
browserChild
=
dom
:
:
BrowserChild
:
:
GetFrom
(
window
)
;
NS_ENSURE_TRUE_VOID
(
browserChild
)
;
nsTArray
<
nsCString
>
trackingFullHashes
;
nsCOMPtr
<
nsIClassifiedChannel
>
classifiedChannel
=
do_QueryInterface
(
aTrackingChannel
)
;
if
(
classifiedChannel
)
{
Unused
<
<
classifiedChannel
-
>
GetMatchedTrackingFullHashes
(
trackingFullHashes
)
;
}
browserChild
-
>
NotifyContentBlockingEvent
(
aRejectedReason
aTrackingChannel
aBlocked
aTrackingOrigin
trackingFullHashes
aReason
)
;
}
void
NotifyEventInParent
(
nsIChannel
*
aTrackingChannel
bool
aBlocked
uint32_t
aRejectedReason
const
nsACString
&
aTrackingOrigin
const
Maybe
<
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
>
&
aReason
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aTrackingChannel
-
>
LoadInfo
(
)
;
RefPtr
<
dom
:
:
BrowsingContext
>
bc
;
loadInfo
-
>
GetBrowsingContext
(
getter_AddRefs
(
bc
)
)
;
if
(
!
bc
|
|
bc
-
>
IsDiscarded
(
)
)
{
return
;
}
bc
=
bc
-
>
Top
(
)
;
RefPtr
<
dom
:
:
WindowGlobalParent
>
wgp
=
bc
-
>
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
NS_ENSURE_TRUE_VOID
(
wgp
)
;
nsTArray
<
nsCString
>
trackingFullHashes
;
nsCOMPtr
<
nsIClassifiedChannel
>
classifiedChannel
=
do_QueryInterface
(
aTrackingChannel
)
;
if
(
classifiedChannel
)
{
Unused
<
<
classifiedChannel
-
>
GetMatchedTrackingFullHashes
(
trackingFullHashes
)
;
}
wgp
-
>
NotifyContentBlockingEvent
(
aRejectedReason
aTrackingChannel
aBlocked
aTrackingOrigin
trackingFullHashes
aReason
)
;
}
}
void
ContentBlockingNotifier
:
:
ReportUnblockingToConsole
(
BrowsingContext
*
aBrowsingContext
const
nsAString
&
aTrackingOrigin
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
aReason
)
{
MOZ_ASSERT
(
aBrowsingContext
)
;
MOZ_ASSERT_IF
(
XRE_IsContentProcess
(
)
aBrowsingContext
-
>
Top
(
)
-
>
IsInProcess
(
)
)
;
uint64_t
windowID
=
aBrowsingContext
-
>
GetCurrentInnerWindowId
(
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
AntiTrackingUtils
:
:
GetPrincipal
(
aBrowsingContext
-
>
Top
(
)
)
;
if
(
NS_WARN_IF
(
!
principal
)
)
{
return
;
}
:
:
ReportUnblockingToConsole
(
windowID
principal
aTrackingOrigin
aReason
)
;
}
void
ContentBlockingNotifier
:
:
OnDecision
(
nsIChannel
*
aChannel
BlockingDecision
aDecision
uint32_t
aRejectedReason
)
{
MOZ_ASSERT
(
aRejectedReason
=
=
0
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_BY_PERMISSION
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_SOCIALTRACKER
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_ALL
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_FOREIGN
)
)
;
MOZ_ASSERT
(
aDecision
=
=
BlockingDecision
:
:
eBlock
|
|
aDecision
=
=
BlockingDecision
:
:
eAllow
)
;
if
(
!
aChannel
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
uri
;
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
NotifyBlockingDecision
(
aChannel
aDecision
aRejectedReason
uri
)
;
}
void
ContentBlockingNotifier
:
:
OnDecision
(
nsPIDOMWindowInner
*
aWindow
BlockingDecision
aDecision
uint32_t
aRejectedReason
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aRejectedReason
=
=
0
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_BY_PERMISSION
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_TRACKER
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_SOCIALTRACKER
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_PARTITIONED_FOREIGN
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_ALL
)
|
|
aRejectedReason
=
=
static_cast
<
uint32_t
>
(
nsIWebProgressListener
:
:
STATE_COOKIES_BLOCKED_FOREIGN
)
)
;
MOZ_ASSERT
(
aDecision
=
=
BlockingDecision
:
:
eBlock
|
|
aDecision
=
=
BlockingDecision
:
:
eAllow
)
;
Document
*
document
=
aWindow
-
>
GetExtantDoc
(
)
;
if
(
!
document
)
{
return
;
}
nsIChannel
*
channel
=
document
-
>
GetChannel
(
)
;
if
(
!
channel
)
{
return
;
}
nsIURI
*
uri
=
document
-
>
GetDocumentURI
(
)
;
NotifyBlockingDecision
(
channel
aDecision
aRejectedReason
uri
)
;
}
void
ContentBlockingNotifier
:
:
OnDecision
(
BrowsingContext
*
aBrowsingContext
BlockingDecision
aDecision
uint32_t
aRejectedReason
)
{
MOZ_ASSERT
(
aBrowsingContext
)
;
MOZ_ASSERT_IF
(
XRE_IsContentProcess
(
)
aBrowsingContext
-
>
IsInProcess
(
)
)
;
if
(
aBrowsingContext
-
>
IsInProcess
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
outer
=
aBrowsingContext
-
>
GetDOMWindow
(
)
;
if
(
NS_WARN_IF
(
!
outer
)
)
{
return
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
inner
=
outer
-
>
GetCurrentInnerWindow
(
)
;
if
(
NS_WARN_IF
(
!
inner
)
)
{
return
;
}
ContentBlockingNotifier
:
:
OnDecision
(
inner
aDecision
aRejectedReason
)
;
}
else
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
ContentParent
*
cp
=
aBrowsingContext
-
>
Canonical
(
)
-
>
GetContentParent
(
)
;
Unused
<
<
cp
-
>
SendOnContentBlockingDecision
(
aBrowsingContext
aDecision
aRejectedReason
)
;
}
}
void
ContentBlockingNotifier
:
:
OnEvent
(
nsIChannel
*
aTrackingChannel
uint32_t
aRejectedReason
bool
aBlocked
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
aTrackingChannel
)
;
nsCOMPtr
<
nsIURI
>
uri
;
aTrackingChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
nsAutoCString
trackingOrigin
;
if
(
uri
)
{
Unused
<
<
nsContentUtils
:
:
GetASCIIOrigin
(
uri
trackingOrigin
)
;
}
return
ContentBlockingNotifier
:
:
OnEvent
(
aTrackingChannel
aBlocked
aRejectedReason
trackingOrigin
)
;
}
void
ContentBlockingNotifier
:
:
OnEvent
(
nsIChannel
*
aTrackingChannel
bool
aBlocked
uint32_t
aRejectedReason
const
nsACString
&
aTrackingOrigin
const
Maybe
<
StorageAccessPermissionGrantedReason
>
&
aReason
)
{
if
(
XRE_IsParentProcess
(
)
)
{
NotifyEventInParent
(
aTrackingChannel
aBlocked
aRejectedReason
aTrackingOrigin
aReason
)
;
}
else
{
NotifyEventInChild
(
aTrackingChannel
aBlocked
aRejectedReason
aTrackingOrigin
aReason
)
;
}
}
