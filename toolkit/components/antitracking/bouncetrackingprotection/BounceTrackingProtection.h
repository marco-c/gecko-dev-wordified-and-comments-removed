#
ifndef
mozilla_BounceTrackingProtection_h__
#
define
mozilla_BounceTrackingProtection_h__
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsIBounceTrackingProtection
.
h
"
#
include
"
BounceTrackingStateGlobal
.
h
"
#
include
"
nsIClearDataService
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
mozilla
/
OriginAttributes
.
h
"
#
include
"
mozilla
/
OriginAttributesHashKey
.
h
"
class
nsIPrincipal
;
class
nsITimer
;
namespace
mozilla
{
class
BounceTrackingState
;
extern
LazyLogModule
gBounceTrackingProtectionLog
;
class
BounceTrackingProtection
final
:
public
nsIBounceTrackingProtection
{
NS_DECL_ISUPPORTS
NS_DECL_NSIBOUNCETRACKINGPROTECTION
public
:
static
already_AddRefed
<
BounceTrackingProtection
>
GetSingleton
(
)
;
nsresult
RecordStatefulBounces
(
BounceTrackingState
*
aBounceTrackingState
)
;
nsresult
RecordUserActivation
(
nsIPrincipal
*
aPrincipal
)
;
private
:
BounceTrackingProtection
(
)
;
~
BounceTrackingProtection
(
)
=
default
;
nsTHashMap
<
OriginAttributesHashKey
RefPtr
<
BounceTrackingStateGlobal
>
>
mStateGlobal
{
}
;
BounceTrackingStateGlobal
*
GetOrCreateStateGlobal
(
const
OriginAttributes
&
aOriginAttributes
)
;
BounceTrackingStateGlobal
*
GetOrCreateStateGlobal
(
nsIPrincipal
*
aPrincipal
)
;
BounceTrackingStateGlobal
*
GetOrCreateStateGlobal
(
BounceTrackingState
*
aBounceTrackingState
)
;
nsCOMPtr
<
nsITimer
>
mBounceTrackingPurgeTimer
;
using
PurgeBounceTrackersMozPromise
=
MozPromise
<
nsTArray
<
nsCString
>
nsresult
true
>
;
RefPtr
<
PurgeBounceTrackersMozPromise
>
PurgeBounceTrackers
(
)
;
nsresult
PurgeBounceTrackersForStateGlobal
(
BounceTrackingStateGlobal
*
aStateGlobal
const
OriginAttributes
&
aOriginAttributes
)
;
using
ClearDataMozPromise
=
MozPromise
<
nsCString
uint32_t
true
>
;
nsTArray
<
RefPtr
<
ClearDataMozPromise
>
>
mClearPromises
;
class
ClearDataCallback
final
:
public
nsIClearDataCallback
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICLEARDATACALLBACK
explicit
ClearDataCallback
(
ClearDataMozPromise
:
:
Private
*
aPromise
const
nsACString
&
aHost
)
:
mHost
(
aHost
)
mPromise
(
aPromise
)
{
}
;
private
:
virtual
~
ClearDataCallback
(
)
{
mPromise
-
>
Reject
(
0
__func__
)
;
}
nsCString
mHost
;
RefPtr
<
ClearDataMozPromise
:
:
Private
>
mPromise
;
}
;
}
;
}
#
endif
