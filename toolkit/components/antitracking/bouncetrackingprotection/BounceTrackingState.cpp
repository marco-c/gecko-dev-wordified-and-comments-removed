#
include
"
BounceTrackingProtection
.
h
"
#
include
"
BounceTrackingState
.
h
"
#
include
"
BounceTrackingRecord
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextWebProgress
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIRedirectHistoryEntry
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
namespace
mozilla
{
static
StaticAutoPtr
<
nsTHashMap
<
uint64_t
RefPtr
<
BounceTrackingState
>
>
>
sBounceTrackingStates
;
NS_IMPL_ISUPPORTS
(
BounceTrackingState
nsIWebProgressListener
nsISupportsWeakReference
)
;
BounceTrackingState
:
:
BounceTrackingState
(
)
{
MOZ_ASSERT
(
StaticPrefs
:
:
privacy_bounceTrackingProtection_enabled_AtStartup
(
)
)
;
mBounceTrackingProtection
=
BounceTrackingProtection
:
:
GetSingleton
(
)
;
}
;
BounceTrackingState
:
:
~
BounceTrackingState
(
)
{
if
(
sBounceTrackingStates
)
{
sBounceTrackingStates
-
>
Remove
(
mBrowserId
)
;
}
}
already_AddRefed
<
BounceTrackingState
>
BounceTrackingState
:
:
GetOrCreate
(
dom
:
:
BrowsingContextWebProgress
*
aWebProgress
)
{
MOZ_ASSERT
(
aWebProgress
)
;
if
(
!
ShouldCreateBounceTrackingStateForWebProgress
(
aWebProgress
)
)
{
return
nullptr
;
}
if
(
!
sBounceTrackingStates
)
{
sBounceTrackingStates
=
new
nsTHashMap
<
nsUint64HashKey
RefPtr
<
BounceTrackingState
>
>
(
)
;
ClearOnShutdown
(
&
sBounceTrackingStates
)
;
}
dom
:
:
BrowsingContext
*
browsingContext
=
aWebProgress
-
>
GetBrowsingContext
(
)
;
if
(
!
browsingContext
)
{
return
nullptr
;
}
uint64_t
browserId
=
browsingContext
-
>
BrowserId
(
)
;
bool
createdNew
;
RefPtr
<
BounceTrackingState
>
bounceTrackingState
=
do_AddRef
(
sBounceTrackingStates
-
>
LookupOrInsertWith
(
browserId
[
&
]
{
createdNew
=
true
;
return
do_AddRef
(
new
BounceTrackingState
(
)
)
;
}
)
)
;
if
(
createdNew
)
{
nsresult
rv
=
bounceTrackingState
-
>
Init
(
aWebProgress
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
}
return
bounceTrackingState
.
forget
(
)
;
}
;
nsresult
BounceTrackingState
:
:
Init
(
dom
:
:
BrowsingContextWebProgress
*
aWebProgress
)
{
NS_ENSURE_ARG_POINTER
(
aWebProgress
)
;
NS_ENSURE_TRUE
(
StaticPrefs
:
:
privacy_bounceTrackingProtection_enabled_AtStartup
(
)
NS_ERROR_NOT_AVAILABLE
)
;
NS_ENSURE_TRUE
(
mBounceTrackingProtection
NS_ERROR_FAILURE
)
;
dom
:
:
BrowsingContext
*
browsingContext
=
aWebProgress
-
>
GetBrowsingContext
(
)
;
NS_ENSURE_TRUE
(
browsingContext
NS_ERROR_FAILURE
)
;
mBrowserId
=
browsingContext
-
>
BrowserId
(
)
;
nsresult
rv
=
aWebProgress
-
>
AddProgressListener
(
this
nsIWebProgress
:
:
NOTIFY_STATE_WINDOW
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
void
BounceTrackingState
:
:
ResetBounceTrackingRecord
(
)
{
mBounceTrackingRecord
=
nullptr
;
}
BounceTrackingRecord
*
BounceTrackingState
:
:
GetBounceTrackingRecord
(
)
{
return
mBounceTrackingRecord
;
}
nsCString
BounceTrackingState
:
:
Describe
(
)
{
return
nsPrintfCString
(
"
{
mBounceTrackingRecord
:
%
s
}
"
mBounceTrackingRecord
?
mBounceTrackingRecord
-
>
Describe
(
)
.
get
(
)
:
"
null
"
)
;
}
bool
BounceTrackingState
:
:
ShouldCreateBounceTrackingStateForWebProgress
(
dom
:
:
BrowsingContextWebProgress
*
aWebProgress
)
{
NS_ENSURE_TRUE
(
aWebProgress
false
)
;
if
(
!
StaticPrefs
:
:
privacy_bounceTrackingProtection_enabled_AtStartup
(
)
)
{
return
false
;
}
dom
:
:
BrowsingContext
*
browsingContext
=
aWebProgress
-
>
GetBrowsingContext
(
)
;
if
(
!
browsingContext
|
|
!
browsingContext
-
>
IsTopContent
(
)
)
{
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Verbose
(
"
%
s
:
Skip
non
top
-
content
.
"
__FUNCTION__
)
)
;
return
false
;
}
return
true
;
}
already_AddRefed
<
dom
:
:
BrowsingContext
>
BounceTrackingState
:
:
CurrentBrowsingContext
(
)
{
MOZ_ASSERT
(
mBrowserId
!
=
0
)
;
return
dom
:
:
BrowsingContext
:
:
GetCurrentTopByBrowserId
(
mBrowserId
)
;
}
nsresult
BounceTrackingState
:
:
OnDocumentStartRequest
(
nsIChannel
*
aChannel
)
{
NS_ENSURE_ARG_POINTER
(
aChannel
)
;
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
"
__FUNCTION__
)
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
;
nsresult
rv
=
aChannel
-
>
GetLoadInfo
(
getter_AddRefs
(
loadInfo
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsTArray
<
nsCString
>
siteList
;
for
(
const
nsCOMPtr
<
nsIRedirectHistoryEntry
>
&
redirectHistoryEntry
:
loadInfo
-
>
RedirectChain
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
;
rv
=
redirectHistoryEntry
-
>
GetPrincipal
(
getter_AddRefs
(
principal
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
principal
-
>
GetIsContentPrincipal
(
)
)
{
continue
;
}
nsAutoCString
baseDomain
;
rv
=
principal
-
>
GetBaseDomain
(
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
siteList
.
AppendElement
(
baseDomain
)
;
}
nsCOMPtr
<
nsIURI
>
channelURI
;
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
channelURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIEffectiveTLDService
>
tldService
=
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
siteHost
;
rv
=
tldService
-
>
GetSchemelessSite
(
channelURI
siteHost
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
retrieve
site
for
final
channel
URI
.
"
)
;
}
siteList
.
AppendElement
(
siteHost
)
;
return
OnResponseReceived
(
siteList
)
;
}
NS_IMETHODIMP
BounceTrackingState
:
:
OnStateChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aStateFlags
nsresult
aStatus
)
{
NS_ENSURE_ARG_POINTER
(
aWebProgress
)
;
NS_ENSURE_ARG_POINTER
(
aRequest
)
;
bool
isTopLevel
=
false
;
nsresult
rv
=
aWebProgress
-
>
GetIsTopLevel
(
&
isTopLevel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
isTopLevel
)
{
return
NS_OK
;
}
if
(
!
(
aStateFlags
&
nsIWebProgressListener
:
:
STATE_STOP
)
|
|
!
(
aStateFlags
&
nsIWebProgressListener
:
:
STATE_IS_WINDOW
)
)
{
return
NS_OK
;
}
dom
:
:
BrowsingContext
*
browsingContext
=
aWebProgress
-
>
GetBrowsingContext
(
)
;
NS_ENSURE_TRUE
(
browsingContext
NS_ERROR_FAILURE
)
;
dom
:
:
WindowGlobalParent
*
windowGlobalParent
=
browsingContext
-
>
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
NS_ENSURE_TRUE
(
windowGlobalParent
NS_ERROR_FAILURE
)
;
return
OnDocumentLoaded
(
windowGlobalParent
-
>
DocumentPrincipal
(
)
)
;
}
NS_IMETHODIMP
BounceTrackingState
:
:
OnProgressChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
int32_t
aCurSelfProgress
int32_t
aMaxSelfProgress
int32_t
aCurTotalProgress
int32_t
aMaxTotalProgress
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BounceTrackingState
:
:
OnLocationChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
nsIURI
*
aLocation
uint32_t
aFlags
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BounceTrackingState
:
:
OnStatusChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
nsresult
aStatus
const
char16_t
*
aMessage
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BounceTrackingState
:
:
OnSecurityChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aState
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BounceTrackingState
:
:
OnContentBlockingEvent
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aEvent
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
nsresult
BounceTrackingState
:
:
OnStartNavigation
(
nsIPrincipal
*
aTriggeringPrincipal
const
bool
aHasValidUserGestureActivation
)
{
NS_ENSURE_ARG_POINTER
(
aTriggeringPrincipal
)
;
if
(
MOZ_LOG_TEST
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
)
)
{
nsAutoCString
origin
;
nsresult
rv
=
aTriggeringPrincipal
-
>
GetOrigin
(
origin
)
;
if
(
NS_FAILED
(
rv
)
)
{
origin
=
"
err
"
;
}
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
origin
:
%
s
mBounceTrackingRecord
:
%
s
"
__FUNCTION__
origin
.
get
(
)
mBounceTrackingRecord
?
mBounceTrackingRecord
-
>
Describe
(
)
.
get
(
)
:
"
null
"
)
)
;
}
if
(
mClientBounceDetectionTimeout
)
{
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
mClientBounceDetectionTimeout
-
>
Cancel
(
)
"
__FUNCTION__
)
)
;
mClientBounceDetectionTimeout
-
>
Cancel
(
)
;
mClientBounceDetectionTimeout
=
nullptr
;
}
nsAutoCString
siteHost
;
if
(
!
aTriggeringPrincipal
-
>
GetIsContentPrincipal
(
)
)
{
siteHost
=
"
"
;
}
nsresult
rv
=
aTriggeringPrincipal
-
>
GetBaseDomain
(
siteHost
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
siteHost
=
"
"
;
}
if
(
!
mBounceTrackingRecord
)
{
mBounceTrackingRecord
=
new
BounceTrackingRecord
(
)
;
mBounceTrackingRecord
-
>
SetInitialHost
(
siteHost
)
;
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
new
BounceTrackingRecord
(
)
:
%
s
"
__FUNCTION__
mBounceTrackingRecord
?
mBounceTrackingRecord
-
>
Describe
(
)
.
get
(
)
:
"
null
"
)
)
;
return
NS_OK
;
}
bool
hasUserActivation
=
aHasValidUserGestureActivation
|
|
aTriggeringPrincipal
-
>
IsSystemPrincipal
(
)
;
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
site
:
%
s
hasUserActivation
?
%
d
"
__FUNCTION__
siteHost
.
get
(
)
hasUserActivation
)
)
;
if
(
hasUserActivation
)
{
rv
=
mBounceTrackingProtection
-
>
RecordStatefulBounces
(
this
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_ASSERT
(
!
mBounceTrackingRecord
)
;
mBounceTrackingRecord
=
new
BounceTrackingRecord
(
)
;
mBounceTrackingRecord
-
>
SetInitialHost
(
siteHost
)
;
return
NS_OK
;
}
mBounceTrackingRecord
-
>
AddBounceHost
(
siteHost
)
;
return
NS_OK
;
}
nsresult
BounceTrackingState
:
:
OnResponseReceived
(
const
nsTArray
<
nsCString
>
&
aSiteList
)
{
NS_ENSURE_TRUE
(
mBounceTrackingRecord
NS_ERROR_FAILURE
)
;
if
(
MOZ_LOG_TEST
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
)
)
{
nsAutoCString
siteListStr
;
for
(
const
nsACString
&
site
:
aSiteList
)
{
siteListStr
.
Append
(
site
)
;
siteListStr
.
AppendLiteral
(
"
"
)
;
}
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
#
%
zu
siteList
:
%
s
"
__FUNCTION__
siteListStr
.
Length
(
)
siteListStr
.
get
(
)
)
)
;
}
if
(
NS_WARN_IF
(
mClientBounceDetectionTimeout
)
)
{
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
mClientBounceDetectionTimeout
-
>
Cancel
(
)
"
__FUNCTION__
)
)
;
mClientBounceDetectionTimeout
-
>
Cancel
(
)
;
mClientBounceDetectionTimeout
=
nullptr
;
}
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
Scheduling
mClientBounceDetectionTimeout
"
__FUNCTION__
)
)
;
WeakPtr
<
BounceTrackingState
>
thisWeak
=
this
;
nsresult
rv
=
NS_NewTimerWithCallback
(
getter_AddRefs
(
mClientBounceDetectionTimeout
)
[
thisWeak
]
(
auto
)
{
if
(
!
thisWeak
)
{
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
!
thisWeak
"
__FUNCTION__
)
)
;
return
;
}
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
Calling
RecordStatefulBounces
after
timeout
.
"
__FUNCTION__
)
)
;
BounceTrackingState
*
bounceTrackingState
=
thisWeak
;
bounceTrackingState
-
>
mBounceTrackingProtection
-
>
RecordStatefulBounces
(
bounceTrackingState
)
;
bounceTrackingState
-
>
mClientBounceDetectionTimeout
=
nullptr
;
}
StaticPrefs
:
:
privacy_bounceTrackingProtection_clientBounceDetectionTimerPeriodMS
(
)
nsITimer
:
:
TYPE_ONE_SHOT
"
mClientBounceDetectionTimeout
"
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
for
(
const
nsACString
&
site
:
aSiteList
)
{
mBounceTrackingRecord
-
>
AddBounceHost
(
site
)
;
}
return
NS_OK
;
}
nsresult
BounceTrackingState
:
:
OnDocumentLoaded
(
nsIPrincipal
*
aDocumentPrincipal
)
{
NS_ENSURE_ARG_POINTER
(
aDocumentPrincipal
)
;
NS_ENSURE_TRUE
(
mBounceTrackingRecord
NS_ERROR_FAILURE
)
;
if
(
MOZ_LOG_TEST
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
)
)
{
nsAutoCString
origin
;
nsresult
rv
=
aDocumentPrincipal
-
>
GetOrigin
(
origin
)
;
if
(
NS_FAILED
(
rv
)
)
{
origin
=
"
err
"
;
}
MOZ_LOG
(
gBounceTrackingProtectionLog
LogLevel
:
:
Debug
(
"
%
s
:
origin
:
%
s
mBounceTrackingRecord
:
%
s
"
__FUNCTION__
origin
.
get
(
)
mBounceTrackingRecord
?
mBounceTrackingRecord
-
>
Describe
(
)
.
get
(
)
:
"
null
"
)
)
;
}
nsAutoCString
siteHost
;
if
(
!
aDocumentPrincipal
-
>
GetIsContentPrincipal
(
)
)
{
siteHost
=
"
"
;
}
else
{
nsresult
rv
=
aDocumentPrincipal
-
>
GetBaseDomain
(
siteHost
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
mBounceTrackingRecord
-
>
SetFinalHost
(
siteHost
)
;
return
NS_OK
;
}
}
