"
use
strict
"
;
let
bounceTrackingProtection
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
bounceTrackingProtection
.
requireStatefulBounces
"
true
]
[
"
privacy
.
bounceTrackingProtection
.
bounceTrackingGracePeriodSec
"
0
]
]
}
)
;
bounceTrackingProtection
=
Cc
[
"
mozilla
.
org
/
bounce
-
tracking
-
protection
;
1
"
]
.
getService
(
Ci
.
nsIBounceTrackingProtection
)
;
}
)
;
async
function
runTest
(
spawnWindowType
)
{
if
(
!
spawnWindowType
|
|
!
[
"
newTab
"
"
popup
"
]
.
includes
(
spawnWindowType
)
)
{
throw
new
Error
(
Invalid
option
'
{
spawnWindowType
}
'
for
spawnWindowType
)
;
}
Assert
.
equal
(
bounceTrackingProtection
.
testGetBounceTrackerCandidateHosts
(
{
}
)
.
length
0
"
No
bounce
tracker
hosts
initially
.
"
)
;
Assert
.
equal
(
bounceTrackingProtection
.
testGetUserActivationHosts
(
{
}
)
.
length
0
"
No
user
activation
hosts
initially
.
"
)
;
await
BrowserTestUtils
.
withNewTab
(
getBaseUrl
(
ORIGIN_A
)
+
"
file_start
.
html
"
async
browser
=
>
{
let
finalURL
=
new
URL
(
getBaseUrl
(
ORIGIN_B
)
+
"
file_start
.
html
"
)
;
let
bounceURL
=
getBounceURL
(
{
bounceType
:
"
client
"
targetURL
:
finalURL
setState
:
"
cookie
-
client
"
}
)
;
let
openPromise
;
if
(
spawnWindowType
=
=
"
newTab
"
)
{
openPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
finalURL
.
href
)
;
}
else
{
openPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
finalURL
.
href
}
)
;
}
await
navigateLinkClick
(
browser
bounceURL
{
spawnWindow
:
spawnWindowType
}
)
;
let
tabOrWindow
=
await
openPromise
;
let
tabOrWindowBrowser
;
if
(
spawnWindowType
=
=
"
newTab
"
)
{
tabOrWindowBrowser
=
tabOrWindow
.
linkedBrowser
;
}
else
{
tabOrWindowBrowser
=
tabOrWindow
.
gBrowser
.
selectedBrowser
;
}
let
promiseRecordBounces
=
waitForRecordBounces
(
tabOrWindowBrowser
)
;
await
navigateLinkClick
(
tabOrWindowBrowser
new
URL
(
getBaseUrl
(
ORIGIN_C
)
+
"
file_start
.
html
"
)
)
;
info
(
"
Wait
for
bounce
trackers
to
be
recorded
.
"
)
;
await
promiseRecordBounces
;
if
(
spawnWindowType
=
=
"
newTab
"
)
{
await
BrowserTestUtils
.
removeTab
(
tabOrWindow
)
;
}
else
{
await
BrowserTestUtils
.
closeWindow
(
tabOrWindow
)
;
}
}
)
;
Assert
.
deepEqual
(
bounceTrackingProtection
.
testGetBounceTrackerCandidateHosts
(
{
}
)
.
map
(
entry
=
>
entry
.
siteHost
)
[
SITE_TRACKER
]
"
Bounce
tracker
in
popup
detected
.
"
)
;
bounceTrackingProtection
.
clearAll
(
)
;
await
SiteDataTestUtils
.
clear
(
)
;
}
add_task
(
async
function
test_popup
(
)
{
await
runTest
(
"
popup
"
)
;
}
)
;
add_task
(
async
function
test_new_tab
(
)
{
await
runTest
(
"
newTab
"
)
;
}
)
;
