"
use
strict
"
;
async
function
bounceTwice
(
)
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
runTestBounce
(
{
bounceType
:
"
client
"
setState
:
"
cookie
-
client
"
skipBounceTrackingProtectionCleanup
:
true
skipSiteDataCleanup
:
true
skipStateChecks
:
i
=
=
1
}
)
;
}
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
bounceTrackingProtection
.
requireStatefulBounces
"
true
]
[
"
privacy
.
bounceTrackingProtection
.
bounceTrackingGracePeriodSec
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
test_crash
(
)
{
info
(
"
Bounce
and
purge
twice
so
we
get
two
entries
in
recent
purges
.
"
)
;
await
bounceTwice
(
)
;
info
(
"
Clear
BTP
state
via
nsIClearDataService
which
must
not
crash
.
"
)
;
await
new
Promise
(
function
(
resolve
)
{
Services
.
clearData
.
deleteDataInTimeRange
(
0
Date
.
now
(
)
*
1000
true
Ci
.
nsIClearDataService
.
CLEAR_BOUNCE_TRACKING_PROTECTION_STATE
failedFlags
=
>
{
Assert
.
equal
(
failedFlags
0
"
Clearing
should
have
succeeded
"
)
;
resolve
(
)
;
}
)
;
}
)
;
await
SiteDataTestUtils
.
clear
(
)
;
}
)
;
