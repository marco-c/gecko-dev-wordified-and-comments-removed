"
use
strict
"
;
async
function
testInit
(
cookieMode
privateBrowsingId
)
{
if
(
privateBrowsingId
!
=
0
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
cookieBehavior
"
cookieMode
]
]
}
)
;
}
else
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
cookieBehavior
.
pbmode
"
cookieMode
]
]
}
)
;
}
let
originAttributes
=
{
privateBrowsingId
}
;
info
(
"
Run
server
bounce
with
cookie
.
"
)
;
await
runTestBounce
(
{
bounceType
:
"
server
"
setState
:
"
cookie
-
server
"
originAttributes
postBounceCallback
:
(
)
=
>
{
let
numTrackersPurged
=
bounceTrackingProtection
.
testGetBounceTrackerCandidateHosts
(
originAttributes
)
.
length
;
Assert
.
equal
(
numTrackersPurged
1
"
All
tracker
candidates
found
.
"
)
;
}
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
bounceTrackingProtection
.
clearAll
(
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
bounceTrackingProtection
.
requireStatefulBounces
"
true
]
[
"
privacy
.
bounceTrackingProtection
.
bounceTrackingGracePeriodSec
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
(
)
{
for
(
let
pbId
=
0
;
pbId
<
2
;
pbId
+
+
)
{
await
testInit
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
pbId
)
;
await
testInit
(
Ci
.
nsICookieService
.
BEHAVIOR_LIMIT_FOREIGN
pbId
)
;
await
testInit
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
pbId
)
;
}
Assert
.
equal
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
Ci
.
nsICookieService
.
BEHAVIOR_LAST
"
test
covers
all
cookie
behaviours
"
)
;
}
)
;
