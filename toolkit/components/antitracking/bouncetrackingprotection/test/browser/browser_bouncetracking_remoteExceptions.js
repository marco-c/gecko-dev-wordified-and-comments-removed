"
use
strict
"
;
const
{
RemoteSettings
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
)
;
const
COLLECTION_NAME
=
"
bounce
-
tracking
-
protection
-
exceptions
"
;
let
db
;
const
strArrayMatches
=
(
arr1
arr2
)
=
>
arr1
.
length
=
=
=
arr2
.
length
&
&
arr1
.
sort
(
)
.
every
(
(
value
index
)
=
>
value
=
=
=
arr2
.
sort
(
)
[
index
]
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
bounceTrackingProtection
.
requireStatefulBounces
"
true
]
[
"
privacy
.
bounceTrackingProtection
.
bounceTrackingGracePeriodSec
"
0
]
]
}
)
;
info
(
Initializing
RemoteSettings
collection
"
{
COLLECTION_NAME
}
"
.
)
;
db
=
RemoteSettings
(
COLLECTION_NAME
)
.
db
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
[
]
{
clear
:
true
}
)
;
}
)
;
async
function
runPurgeTest
(
expectTrackerPurged
)
{
ok
(
!
SiteDataTestUtils
.
hasCookies
(
ORIGIN_TRACKER
)
"
No
cookies
initially
.
"
)
;
await
runTestBounce
(
{
bounceType
:
"
client
"
setState
:
"
cookie
-
client
"
postBounceCallback
:
(
)
=
>
{
ok
(
SiteDataTestUtils
.
hasCookies
(
ORIGIN_TRACKER
)
"
Cookie
added
in
bounce
.
"
)
;
}
skipSiteDataCleanup
:
true
expectPurge
:
expectTrackerPurged
}
)
;
info
(
"
After
purging
the
site
shouldn
'
t
have
any
data
.
"
)
;
let
hasCookies
=
SiteDataTestUtils
.
hasCookies
(
ORIGIN_TRACKER
)
;
if
(
expectTrackerPurged
)
{
ok
(
!
hasCookies
"
Cookies
purged
.
"
)
;
}
else
{
ok
(
hasCookies
"
Cookies
not
purged
.
"
)
;
}
info
(
"
Cleanup
"
)
;
bounceTrackingProtection
.
clearAll
(
)
;
await
SiteDataTestUtils
.
clear
(
)
;
}
async
function
waitForAllowListState
(
allowedSiteHosts
)
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
strArrayMatches
(
bounceTrackingProtection
.
testGetSiteHostExceptions
(
)
allowedSiteHosts
)
;
}
"
Waiting
for
exceptions
to
be
imported
.
"
)
;
Assert
.
deepEqual
(
bounceTrackingProtection
.
testGetSiteHostExceptions
(
)
.
sort
(
)
allowedSiteHosts
.
sort
(
)
"
Imported
the
correct
site
host
exceptions
"
)
;
}
async
function
remoteSettingsSync
(
{
created
updated
deleted
}
)
{
await
RemoteSettings
(
COLLECTION_NAME
)
.
emit
(
"
sync
"
{
data
:
{
created
updated
deleted
}
}
)
;
}
add_task
(
async
function
test_remote_exceptions_and_purge
(
)
{
info
(
"
Run
purge
test
without
any
exceptions
.
"
)
;
await
runPurgeTest
(
true
)
;
info
(
"
Add
exceptions
via
RemoteSettings
"
)
;
let
entryTrackerA
=
await
db
.
create
(
{
siteHost
:
SITE_TRACKER
}
)
;
let
entryTrackerB
=
await
db
.
create
(
{
siteHost
:
SITE_TRACKER_B
}
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
created
:
[
entryTrackerA
entryTrackerB
]
}
)
;
await
waitForAllowListState
(
[
SITE_TRACKER
SITE_TRACKER_B
]
)
;
info
(
"
Run
the
purge
test
again
this
time
no
data
should
be
purged
because
the
tracker
is
on
the
exception
list
.
"
)
;
await
runPurgeTest
(
false
)
;
info
(
"
Remove
tracker
from
exception
list
and
run
purge
test
again
.
Data
should
be
purged
again
.
"
)
;
await
db
.
delete
(
entryTrackerA
.
id
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
deleted
:
[
entryTrackerA
]
}
)
;
await
waitForAllowListState
(
[
SITE_TRACKER_B
]
)
;
await
runPurgeTest
(
true
)
;
info
(
"
Cleanup
"
)
;
await
db
.
clear
(
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
deleted
:
[
entryTrackerB
]
}
)
;
await
waitForAllowListState
(
[
]
)
;
}
)
;
add_task
(
async
function
test_remote_exception_updates
(
)
{
info
(
"
Create
foo
.
com
bar
.
com
"
)
;
let
entryTrackerA
=
await
db
.
create
(
{
siteHost
:
"
foo
.
com
"
}
)
;
let
entryTrackerB
=
await
db
.
create
(
{
siteHost
:
"
bar
.
com
"
}
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
created
:
[
entryTrackerA
entryTrackerB
]
}
)
;
await
waitForAllowListState
(
[
"
foo
.
com
"
"
bar
.
com
"
]
)
;
info
(
"
Update
foo
.
com
-
>
foo2
.
com
"
)
;
let
entryTrackerAUpdated
=
{
.
.
.
entryTrackerA
}
;
entryTrackerAUpdated
.
siteHost
=
"
foo2
.
com
"
;
await
db
.
update
(
entryTrackerA
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
updated
:
[
{
old
:
entryTrackerA
new
:
entryTrackerAUpdated
}
]
}
)
;
await
waitForAllowListState
(
[
"
foo2
.
com
"
"
bar
.
com
"
]
)
;
info
(
"
Create
example
.
com
remove
foo2
.
com
bar
.
com
"
)
;
let
entryTrackerC
=
await
db
.
create
(
{
siteHost
:
"
example
.
com
"
}
)
;
await
db
.
delete
(
entryTrackerAUpdated
.
id
)
;
await
db
.
delete
(
entryTrackerB
.
id
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
created
:
[
entryTrackerC
]
deleted
:
[
entryTrackerAUpdated
entryTrackerB
]
}
)
;
await
waitForAllowListState
(
[
"
example
.
com
"
]
)
;
info
(
"
Remove
example
.
com
no
hosts
remain
.
"
)
;
await
db
.
delete
(
entryTrackerC
.
id
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
await
remoteSettingsSync
(
{
deleted
:
[
entryTrackerC
]
}
)
;
await
waitForAllowListState
(
[
]
)
;
info
(
"
Cleanup
"
)
;
await
db
.
clear
(
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
}
)
;
