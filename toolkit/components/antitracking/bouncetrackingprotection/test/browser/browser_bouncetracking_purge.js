"
use
strict
"
;
const
BOUNCE_TRACKING_GRACE_PERIOD_SEC
=
30
;
let
btp
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
bounceTrackingProtection
.
bounceTrackingGracePeriodSec
"
BOUNCE_TRACKING_GRACE_PERIOD_SEC
]
]
}
)
;
btp
=
Cc
[
"
mozilla
.
org
/
bounce
-
tracking
-
protection
;
1
"
]
.
getService
(
Ci
.
nsIBounceTrackingProtection
)
;
}
)
;
function
initBounceTrackerState
(
)
{
btp
.
reset
(
)
;
btp
.
testAddBounceTrackerCandidate
(
"
example
.
com
"
0
)
;
btp
.
testAddBounceTrackerCandidate
(
"
example
.
net
"
0
)
;
let
timestampWithinGracePeriod
=
Date
.
now
(
)
-
(
BOUNCE_TRACKING_GRACE_PERIOD_SEC
*
1000
)
/
2
;
btp
.
testAddBounceTrackerCandidate
(
"
example
.
org
"
timestampWithinGracePeriod
*
1000
)
;
}
add_task
(
async
function
test_purging_skip_open_foreground_tab
(
)
{
initBounceTrackerState
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
Assert
.
deepEqual
(
await
btp
.
testRunPurgeBounceTrackers
(
)
[
"
example
.
net
"
]
"
Should
only
purge
example
.
net
.
example
.
org
is
within
the
grace
period
example
.
com
has
an
open
tab
.
"
)
;
info
(
"
Close
the
tab
for
example
.
com
and
test
that
it
gets
purged
now
.
"
)
;
initBounceTrackerState
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Assert
.
deepEqual
(
(
await
btp
.
testRunPurgeBounceTrackers
(
)
)
.
sort
(
)
[
"
example
.
net
"
"
example
.
com
"
]
.
sort
(
)
"
example
.
com
should
have
been
purged
now
that
it
no
longer
has
an
open
tab
.
"
)
;
btp
.
reset
(
)
;
}
)
;
add_task
(
async
function
test_purging_skip_open_background_tab
(
)
{
initBounceTrackerState
(
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
Assert
.
deepEqual
(
await
btp
.
testRunPurgeBounceTrackers
(
)
[
"
example
.
net
"
]
"
Should
only
purge
example
.
net
.
example
.
org
is
within
the
grace
period
example
.
com
has
an
open
tab
.
"
)
;
info
(
"
Close
the
tab
for
example
.
com
and
test
that
it
gets
purged
now
.
"
)
;
initBounceTrackerState
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Assert
.
deepEqual
(
(
await
btp
.
testRunPurgeBounceTrackers
(
)
)
.
sort
(
)
[
"
example
.
net
"
"
example
.
com
"
]
.
sort
(
)
"
example
.
com
should
have
been
purged
now
that
it
no
longer
has
an
open
tab
.
"
)
;
btp
.
reset
(
)
;
}
)
;
add_task
(
async
function
test_purging_skip_open_tab_extra_window
(
)
{
initBounceTrackerState
(
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
https
:
/
/
example
.
com
"
)
;
Assert
.
deepEqual
(
await
btp
.
testRunPurgeBounceTrackers
(
)
[
"
example
.
net
"
]
"
Should
only
purge
example
.
net
.
example
.
org
is
within
the
grace
period
example
.
com
has
an
open
tab
.
"
)
;
info
(
"
Close
the
window
with
the
tab
for
example
.
com
and
test
that
it
gets
purged
now
.
"
)
;
initBounceTrackerState
(
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
Assert
.
deepEqual
(
(
await
btp
.
testRunPurgeBounceTrackers
(
)
)
.
sort
(
)
[
"
example
.
net
"
"
example
.
com
"
]
.
sort
(
)
"
example
.
com
should
have
been
purged
now
that
it
no
longer
has
an
open
tab
.
"
)
;
btp
.
reset
(
)
;
}
)
;
