"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
bounceTrackingProtection
.
requireStatefulBounces
"
true
]
[
"
privacy
.
bounceTrackingProtection
.
bounceTrackingGracePeriodSec
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
test_pbm_data_isolated
(
)
{
await
runTestBounce
(
{
bounceType
:
"
client
"
setState
:
"
cookie
-
client
"
originAttributes
:
{
privateBrowsingId
:
1
}
postBounceCallback
:
(
)
=
>
{
Assert
.
equal
(
bounceTrackingProtection
.
testGetBounceTrackerCandidateHosts
(
{
}
)
.
length
0
"
No
bounce
tracker
candidates
for
normal
browsing
.
"
)
;
Assert
.
equal
(
bounceTrackingProtection
.
testGetUserActivationHosts
(
{
}
)
.
length
0
"
No
user
activations
for
normal
browsing
.
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_containers_isolated
(
)
{
await
runTestBounce
(
{
bounceType
:
"
server
"
setState
:
"
cookie
-
server
"
originAttributes
:
{
userContextId
:
2
}
postBounceCallback
:
(
)
=
>
{
Assert
.
equal
(
bounceTrackingProtection
.
testGetBounceTrackerCandidateHosts
(
{
}
)
.
length
0
"
No
bounce
tracker
candidates
for
normal
browsing
.
"
)
;
Assert
.
equal
(
bounceTrackingProtection
.
testGetUserActivationHosts
(
{
}
)
.
length
0
"
No
user
activations
for
normal
browsing
.
"
)
;
Assert
.
equal
(
bounceTrackingProtection
.
testGetBounceTrackerCandidateHosts
(
{
userContextId
:
1
}
)
.
length
0
"
No
bounce
tracker
candidates
for
container
tab
1
.
"
)
;
Assert
.
equal
(
bounceTrackingProtection
.
testGetUserActivationHosts
(
{
userContextId
:
1
}
)
.
length
0
"
No
user
activations
for
container
tab
1
.
"
)
;
}
}
)
;
}
)
;
