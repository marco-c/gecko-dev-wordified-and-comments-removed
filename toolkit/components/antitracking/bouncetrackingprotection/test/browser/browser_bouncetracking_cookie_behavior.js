"
use
strict
"
;
requestLongerTimeout
(
3
)
;
async
function
runTestCookieBehavior
(
cookieBehavior
privateBrowsingId
shouldBeEnabled
)
{
info
(
"
runTestCookieBehavior
"
+
JSON
.
stringify
(
{
cookieBehavior
privateBrowsingId
shouldBeEnabled
}
)
)
;
if
(
privateBrowsingId
=
=
0
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
cookieBehavior
"
cookieBehavior
]
]
}
)
;
}
else
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
cookieBehavior
.
pbmode
"
cookieBehavior
]
]
}
)
;
}
await
runTestBounce
(
{
bounceType
:
"
server
"
setState
:
"
cookie
-
server
"
originAttributes
:
{
privateBrowsingId
}
expectRecordBounces
:
shouldBeEnabled
expectCandidate
:
shouldBeEnabled
expectPurge
:
shouldBeEnabled
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
bounceTrackingProtection
.
mode
"
Ci
.
nsIBounceTrackingProtection
.
MODE_ENABLED
]
[
"
privacy
.
bounceTrackingProtection
.
requireStatefulBounces
"
true
]
[
"
privacy
.
bounceTrackingProtection
.
bounceTrackingGracePeriodSec
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
test_cookie_behaviors
(
)
{
for
(
let
pbId
=
0
;
pbId
<
2
;
pbId
+
+
)
{
await
runTestCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
pbId
false
)
;
await
runTestCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
pbId
false
)
;
await
runTestCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
pbId
true
)
;
await
runTestCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_LIMIT_FOREIGN
pbId
true
)
;
await
runTestCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
pbId
true
)
;
await
runTestCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
pbId
true
)
;
}
Assert
.
equal
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
Ci
.
nsICookieService
.
BEHAVIOR_LAST
"
test
covers
all
cookie
behaviors
"
)
;
}
)
;
