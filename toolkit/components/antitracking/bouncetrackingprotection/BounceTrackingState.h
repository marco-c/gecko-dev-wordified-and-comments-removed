#
ifndef
mozilla_BounceTrackingState_h
#
define
mozilla_BounceTrackingState_h
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIChannel
;
class
nsITimer
;
class
nsIPrincipal
;
namespace
mozilla
{
class
BounceTrackingProtection
;
class
BounceTrackingRecord
;
namespace
dom
{
class
CanonicalBrowsingContext
;
class
BrowsingContext
;
class
BrowsingContextWebProgress
;
}
class
BounceTrackingState
:
public
nsIWebProgressListener
public
nsSupportsWeakReference
public
SupportsWeakPtr
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIWEBPROGRESSLISTENER
static
already_AddRefed
<
BounceTrackingState
>
GetOrCreate
(
dom
:
:
BrowsingContextWebProgress
*
aWebProgress
)
;
BounceTrackingRecord
*
GetBounceTrackingRecord
(
)
;
void
ResetBounceTrackingRecord
(
)
;
nsresult
OnDocumentStartRequest
(
nsIChannel
*
aChannel
)
;
nsresult
OnStartNavigation
(
nsIPrincipal
*
aTriggeringPrincipal
const
bool
aHasValidUserGestureActivation
)
;
nsresult
OnCookieWrite
(
const
nsACString
&
aSiteHost
)
;
static
bool
ShouldCreateBounceTrackingStateForBC
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
)
;
static
nsresult
HasBounceTrackingStateForSite
(
const
nsACString
&
aSiteHost
bool
&
aResult
)
;
already_AddRefed
<
dom
:
:
BrowsingContext
>
CurrentBrowsingContext
(
)
;
uint64_t
GetBrowserId
(
)
{
return
mBrowserId
;
}
nsCString
Describe
(
)
;
private
:
explicit
BounceTrackingState
(
)
;
virtual
~
BounceTrackingState
(
)
;
uint64_t
mBrowserId
{
}
;
RefPtr
<
BounceTrackingProtection
>
mBounceTrackingProtection
;
RefPtr
<
BounceTrackingRecord
>
mBounceTrackingRecord
;
RefPtr
<
nsITimer
>
mClientBounceDetectionTimeout
;
static
bool
ShouldCreateBounceTrackingStateForWebProgress
(
dom
:
:
BrowsingContextWebProgress
*
aWebProgress
)
;
nsresult
Init
(
dom
:
:
BrowsingContextWebProgress
*
aWebProgress
)
;
nsresult
OnResponseReceived
(
const
nsTArray
<
nsCString
>
&
aSiteList
)
;
nsresult
OnDocumentLoaded
(
nsIPrincipal
*
aDocumentPrincipal
)
;
nsresult
OnStorageAccess
(
)
;
nsresult
OnServiceWorkerActivation
(
)
;
}
;
}
#
endif
