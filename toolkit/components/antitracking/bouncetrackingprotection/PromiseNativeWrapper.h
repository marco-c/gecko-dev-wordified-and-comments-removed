#
ifndef
mozilla_PromiseNativeWrapper_h__
#
define
mozilla_PromiseNativeWrapper_h__
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
namespace
mozilla
{
class
PromiseNativeWrapper
:
public
dom
:
:
PromiseNativeHandler
{
public
:
NS_DECL_ISUPPORTS
explicit
PromiseNativeWrapper
(
MozPromiseHolder
<
GenericNonExclusivePromise
>
&
&
aHolder
)
:
mHolder
(
std
:
:
move
(
aHolder
)
)
{
}
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
{
mHolder
.
Resolve
(
true
__func__
)
;
}
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
{
mHolder
.
Reject
(
NS_ERROR_FAILURE
__func__
)
;
}
static
RefPtr
<
GenericNonExclusivePromise
>
ConvertJSPromiseToMozPromise
(
const
RefPtr
<
dom
:
:
Promise
>
&
jsPromise
)
;
private
:
~
PromiseNativeWrapper
(
)
=
default
;
MozPromiseHolder
<
GenericNonExclusivePromise
>
mHolder
;
}
;
}
#
endif
