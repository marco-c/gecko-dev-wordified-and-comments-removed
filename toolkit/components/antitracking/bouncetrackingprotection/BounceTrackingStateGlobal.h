#
ifndef
mozilla_BounceTrackingStateGlobal_h
#
define
mozilla_BounceTrackingStateGlobal_h
#
include
"
BounceTrackingProtectionStorage
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsISupports
.
h
"
namespace
mozilla
{
class
BounceTrackingStateGlobal
final
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
BounceTrackingStateGlobal
)
;
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
BounceTrackingStateGlobal
)
;
BounceTrackingStateGlobal
(
BounceTrackingProtectionStorage
*
aStorage
const
OriginAttributes
&
aAttrs
)
;
bool
IsPrivateBrowsing
(
)
const
{
return
mOriginAttributes
.
IsPrivateBrowsing
(
)
;
}
bool
ShouldPersistToDisk
(
)
const
{
return
!
IsPrivateBrowsing
(
)
;
}
const
OriginAttributes
&
OriginAttributesRef
(
)
const
{
return
mOriginAttributes
;
}
;
bool
HasUserActivation
(
const
nsACString
&
aSiteHost
)
const
;
[
[
nodiscard
]
]
nsresult
RecordUserActivation
(
const
nsACString
&
aSiteHost
PRTime
aTime
bool
aSkipStorage
=
false
)
;
[
[
nodiscard
]
]
nsresult
TestRemoveUserActivation
(
const
nsACString
&
aSiteHost
)
;
[
[
nodiscard
]
]
nsresult
ClearUserActivationBefore
(
PRTime
aTime
)
;
bool
HasBounceTracker
(
const
nsACString
&
aSiteHost
)
const
;
[
[
nodiscard
]
]
nsresult
RecordBounceTracker
(
const
nsACString
&
aSiteHost
PRTime
aTime
bool
aSkipStorage
=
false
)
;
[
[
nodiscard
]
]
nsresult
RemoveBounceTrackers
(
const
nsTArray
<
nsCString
>
&
aSiteHosts
)
;
[
[
nodiscard
]
]
nsresult
ClearByType
(
BounceTrackingProtectionStorage
:
:
EntryType
aType
bool
aSkipStorage
)
;
[
[
nodiscard
]
]
nsresult
ClearSiteHost
(
const
nsACString
&
aSiteHost
bool
aSkipStorage
=
false
)
;
[
[
nodiscard
]
]
nsresult
ClearByTimeRange
(
PRTime
aFrom
Maybe
<
PRTime
>
aTo
=
Nothing
(
)
Maybe
<
BounceTrackingProtectionStorage
:
:
EntryType
>
aEntryType
=
Nothing
(
)
bool
aSkipStorage
=
false
)
;
const
nsTHashMap
<
nsCStringHashKey
PRTime
>
&
UserActivationMapRef
(
)
{
return
mUserActivation
;
}
const
nsTHashMap
<
nsCStringHashKey
PRTime
>
&
BounceTrackersMapRef
(
)
{
return
mBounceTrackers
;
}
nsCString
Describe
(
)
;
private
:
~
BounceTrackingStateGlobal
(
)
=
default
;
WeakPtr
<
BounceTrackingProtectionStorage
>
mStorage
;
OriginAttributes
mOriginAttributes
;
nsTHashMap
<
nsCStringHashKey
PRTime
>
mUserActivation
;
nsTHashMap
<
nsCStringHashKey
PRTime
>
mBounceTrackers
;
static
nsCString
DescribeMap
(
const
nsTHashMap
<
nsCStringHashKey
PRTime
>
&
aMap
)
;
}
;
}
#
endif
