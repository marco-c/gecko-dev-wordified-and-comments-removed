#
ifndef
mozilla_contentblockingnotifier_h
#
define
mozilla_contentblockingnotifier_h
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
define
ANTITRACKING_CONSOLE_CATEGORY
NS_LITERAL_CSTRING
(
"
Content
Blocking
"
)
class
nsIChannel
;
class
nsPIDOMWindowInner
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
}
class
ContentBlockingNotifier
final
{
public
:
enum
class
BlockingDecision
{
eBlock
eAllow
}
;
enum
StorageAccessPermissionGrantedReason
{
eStorageAccessAPI
eOpenerAfterUserInteraction
eOpener
}
;
static
void
OnDecision
(
nsIChannel
*
aChannel
BlockingDecision
aDecision
uint32_t
aRejectedReason
)
;
static
void
OnDecision
(
nsPIDOMWindowInner
*
aWindow
BlockingDecision
aDecision
uint32_t
aRejectedReason
)
;
static
void
OnDecision
(
dom
:
:
BrowsingContext
*
aBrowsingContext
BlockingDecision
aDecision
uint32_t
aRejectedReason
)
;
static
void
OnEvent
(
nsIChannel
*
aChannel
uint32_t
aRejectedReason
)
;
static
void
OnEvent
(
nsIChannel
*
aChannel
bool
aBlocked
uint32_t
aRejectedReason
const
nsACString
&
aTrackingOrigin
const
Maybe
<
StorageAccessPermissionGrantedReason
>
&
aReason
=
Nothing
(
)
)
;
static
void
ReportUnblockingToConsole
(
dom
:
:
BrowsingContext
*
aBrowsingContext
const
nsAString
&
aTrackingOrigin
StorageAccessPermissionGrantedReason
aReason
)
;
}
;
}
#
endif
