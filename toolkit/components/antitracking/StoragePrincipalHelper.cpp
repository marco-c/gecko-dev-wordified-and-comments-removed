#
include
"
StoragePrincipalHelper
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIHttpChannel
.
h
"
namespace
mozilla
{
nsresult
StoragePrincipalHelper
:
:
Create
(
nsIChannel
*
aChannel
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
*
aStoragePrincipal
)
{
MOZ_ASSERT
(
aChannel
)
;
MOZ_ASSERT
(
aPrincipal
)
;
MOZ_ASSERT
(
aStoragePrincipal
)
;
auto
scopeExit
=
MakeScopeExit
(
[
&
]
{
nsCOMPtr
<
nsIPrincipal
>
storagePrincipal
=
aPrincipal
;
storagePrincipal
.
forget
(
aStoragePrincipal
)
;
}
)
;
if
(
!
StaticPrefs
:
:
privacy_storagePrincipal_enabledForTrackers
(
)
)
{
return
NS_OK
;
}
nsContentUtils
:
:
StorageAccess
access
=
nsContentUtils
:
:
StorageAllowedForChannel
(
aChannel
)
;
if
(
access
!
=
nsContentUtils
:
:
StorageAccess
:
:
ePartitionedOrDeny
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
httpChannel
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
httpChannel
-
>
IsThirdPartyTrackingResource
(
)
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsIPrincipal
>
toplevelPrincipal
=
loadInfo
-
>
GetTopLevelPrincipal
(
)
;
if
(
!
toplevelPrincipal
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIURI
>
principalURI
;
nsresult
rv
=
toplevelPrincipal
-
>
GetURI
(
getter_AddRefs
(
principalURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
scopeExit
.
release
(
)
;
nsCOMPtr
<
nsIPrincipal
>
storagePrincipal
=
BasePrincipal
:
:
Cast
(
aPrincipal
)
-
>
CloneForcingFirstPartyDomain
(
principalURI
)
;
storagePrincipal
.
forget
(
aStoragePrincipal
)
;
return
NS_OK
;
}
}
