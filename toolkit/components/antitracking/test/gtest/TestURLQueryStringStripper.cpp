#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
nsIURLQueryStringStripper
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
URLQueryStringStripper
.
h
"
using
namespace
mozilla
;
static
const
char
kPrefQueryStrippingEnabled
[
]
=
"
privacy
.
query_stripping
.
enabled
"
;
static
const
char
kPrefQueryStrippingEnabledPBM
[
]
=
"
privacy
.
query_stripping
.
enabled
.
pbmode
"
;
static
const
char
kPrefQueryStrippingList
[
]
=
"
privacy
.
query_stripping
.
strip_list
"
;
void
waitForStripListChange
(
const
nsACString
&
aExpected
)
{
nsresult
rv
;
nsCOMPtr
<
nsIURLQueryStringStripper
>
queryStripper
=
components
:
:
URLQueryStringStripper
:
:
Service
(
&
rv
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
MOZ_ALWAYS_TRUE
(
mozilla
:
:
SpinEventLoopUntil
(
"
TestURLQueryStringStripper
waitForStripListChange
"
_ns
[
&
]
(
)
-
>
bool
{
nsAutoCString
stripList
;
rv
=
queryStripper
-
>
TestGetStripList
(
stripList
)
;
return
NS_SUCCEEDED
(
rv
)
&
&
stripList
.
Equals
(
aExpected
)
;
}
)
)
;
}
void
DoTest
(
const
nsACString
&
aTestURL
const
bool
aIsPBM
const
nsACString
&
aExpectedURL
uint32_t
aExpectedResult
)
{
nsCOMPtr
<
nsIURI
>
testURI
;
NS_NewURI
(
getter_AddRefs
(
testURI
)
aTestURL
)
;
nsresult
rv
;
nsCOMPtr
<
nsIURLQueryStringStripper
>
queryStripper
=
components
:
:
URLQueryStringStripper
:
:
Service
(
&
rv
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
nsIURI
>
strippedURI
;
uint32_t
numStripped
;
rv
=
queryStripper
-
>
Strip
(
testURI
aIsPBM
getter_AddRefs
(
strippedURI
)
&
numStripped
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_TRUE
(
numStripped
=
=
aExpectedResult
)
;
if
(
!
numStripped
)
{
EXPECT_TRUE
(
!
strippedURI
)
;
}
else
{
EXPECT_TRUE
(
strippedURI
-
>
GetSpecOrDefault
(
)
.
Equals
(
aExpectedURL
)
)
;
}
}
TEST
(
TestURLQueryStringStripper
TestPrefDisabled
)
{
Preferences
:
:
SetCString
(
kPrefQueryStrippingList
"
fooBar
foobaz
"
)
;
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabled
false
)
;
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabledPBM
false
)
;
for
(
bool
isPBM
:
{
false
true
}
)
{
DoTest
(
"
https
:
/
/
example
.
com
/
"
_ns
isPBM
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
Barfoo
=
123
"
_ns
isPBM
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
&
foobaz
"
_ns
isPBM
"
"
_ns
0
)
;
}
}
TEST
(
TestURLQueryStringStripper
TestEmptyStripList
)
{
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabled
true
)
;
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabledPBM
true
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
"
_ns
false
"
"
_ns
0
)
;
Preferences
:
:
SetCString
(
kPrefQueryStrippingList
"
"
)
;
waitForStripListChange
(
"
"
_ns
)
;
for
(
bool
isPBM
:
{
false
true
}
)
{
DoTest
(
"
https
:
/
/
example
.
com
/
"
_ns
isPBM
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
Barfoo
=
123
"
_ns
isPBM
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
&
foobaz
"
_ns
isPBM
"
"
_ns
0
)
;
}
}
TEST
(
TestURLQueryStringStripper
TestStripping
)
{
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabled
true
)
;
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabledPBM
true
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
"
_ns
false
"
"
_ns
0
)
;
Preferences
:
:
SetCString
(
kPrefQueryStrippingList
"
fooBar
foobaz
"
)
;
waitForStripListChange
(
"
foobar
foobaz
"
_ns
)
;
for
(
bool
pref
:
{
false
true
}
)
{
for
(
bool
prefPBM
:
{
false
true
}
)
{
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabled
pref
)
;
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabledPBM
prefPBM
)
;
if
(
pref
|
|
prefPBM
)
{
waitForStripListChange
(
"
foobar
foobaz
"
_ns
)
;
}
for
(
bool
isPBM
:
{
false
true
}
)
{
bool
expectStrip
=
(
prefPBM
&
&
isPBM
)
|
|
(
pref
&
&
!
isPBM
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
"
_ns
isPBM
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
Barfoo
=
123
"
_ns
isPBM
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
"
_ns
isPBM
"
https
:
/
/
example
.
com
/
"
_ns
expectStrip
?
1
:
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
&
foobaz
"
_ns
isPBM
"
https
:
/
/
example
.
com
/
"
_ns
expectStrip
?
2
:
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
&
Barfoo
=
456
&
foobaz
"
_ns
isPBM
"
https
:
/
/
example
.
com
/
?
Barfoo
=
456
"
_ns
expectStrip
?
2
:
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
FOOBAR
=
123
"
_ns
isPBM
"
https
:
/
/
example
.
com
/
"
_ns
expectStrip
?
1
:
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
barfoo
=
foobar
"
_ns
isPBM
"
https
:
/
/
example
.
com
/
?
barfoo
=
foobar
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
foobar
=
123
&
nostrip
=
456
&
FooBar
=
789
"
_ns
isPBM
"
https
:
/
/
example
.
com
/
?
nostrip
=
456
"
_ns
expectStrip
?
2
:
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
AfoobazB
=
123
"
_ns
isPBM
"
https
:
/
/
example
.
com
/
?
AfoobazB
=
123
"
_ns
0
)
;
}
}
}
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabled
true
)
;
Preferences
:
:
SetBool
(
kPrefQueryStrippingEnabledPBM
false
)
;
Preferences
:
:
SetCString
(
kPrefQueryStrippingList
"
Barfoo
bazfoo
"
)
;
waitForStripListChange
(
"
barfoo
bazfoo
"
_ns
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
"
_ns
false
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
&
foobaz
"
_ns
false
"
"
_ns
0
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
bazfoo
=
123
"
_ns
false
"
https
:
/
/
example
.
com
/
"
_ns
1
)
;
DoTest
(
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
&
Barfoo
=
456
&
foobaz
=
abc
"
_ns
false
"
https
:
/
/
example
.
com
/
?
fooBar
=
123
&
foobaz
=
abc
"
_ns
1
)
;
}
