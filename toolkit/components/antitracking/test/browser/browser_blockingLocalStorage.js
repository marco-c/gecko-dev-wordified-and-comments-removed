AntiTracking
.
runTest
(
"
localStorage
"
async
_
=
>
{
is
(
window
.
localStorage
null
"
LocalStorage
is
null
"
)
;
try
{
localStorage
.
foo
=
42
;
ok
(
false
"
LocalStorage
cannot
be
used
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
LocalStorage
cannot
be
used
!
"
)
;
is
(
e
.
name
"
TypeError
"
"
We
want
a
type
error
message
.
"
)
;
}
}
async
_
=
>
{
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
is
allowed
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
)
;
AntiTracking
.
runTest
(
"
localStorage
and
Storage
Access
API
"
async
_
=
>
{
await
noStorageAccessInitially
(
)
;
is
(
window
.
localStorage
null
"
LocalStorage
is
null
"
)
;
try
{
localStorage
.
foo
=
42
;
ok
(
false
"
LocalStorage
cannot
be
used
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
LocalStorage
cannot
be
used
!
"
)
;
is
(
e
.
name
"
TypeError
"
"
We
want
a
type
error
message
.
"
)
;
}
await
callRequestStorageAccess
(
)
;
if
(
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
=
=
SpecialPowers
.
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
)
{
is
(
window
.
localStorage
null
"
LocalStorage
is
null
"
)
;
try
{
localStorage
.
foo
=
42
;
ok
(
false
"
LocalStorage
cannot
be
used
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
LocalStorage
cannot
be
used
!
"
)
;
is
(
e
.
name
"
TypeError
"
"
We
want
a
type
error
message
.
"
)
;
}
}
else
{
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
is
allowed
"
)
;
}
}
async
_
=
>
{
await
noStorageAccessInitially
(
)
;
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
is
allowed
"
)
;
await
callRequestStorageAccess
(
)
;
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
is
allowed
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
null
false
false
)
;
