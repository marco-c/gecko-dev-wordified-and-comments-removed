requestLongerTimeout
(
4
)
;
AntiTracking
.
runTestInNormalAndPrivateMode
(
"
sessionStorage
"
async
_
=
>
{
let
shouldThrow
=
[
SpecialPowers
.
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
]
.
includes
(
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
)
;
let
hasThrown
;
try
{
sessionStorage
.
foo
=
42
;
hasThrown
=
false
;
}
catch
(
e
)
{
hasThrown
=
true
;
is
(
e
.
name
"
SecurityError
"
"
We
want
a
security
error
message
.
"
)
;
}
is
(
hasThrown
shouldThrow
"
SessionStorage
show
thrown
only
if
cookieBehavior
is
REJECT
"
)
;
}
async
_
=
>
{
sessionStorage
.
foo
=
42
;
ok
(
true
"
SessionStorage
is
always
allowed
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
[
]
true
true
)
;
AntiTracking
.
runTestInNormalAndPrivateMode
(
"
sessionStorage
and
Storage
Access
API
"
async
_
=
>
{
await
noStorageAccessInitially
(
)
;
let
shouldThrow
=
[
SpecialPowers
.
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
]
.
includes
(
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
)
;
let
hasThrown
;
try
{
sessionStorage
.
foo
=
42
;
hasThrown
=
false
;
}
catch
(
e
)
{
hasThrown
=
true
;
is
(
e
.
name
"
SecurityError
"
"
We
want
a
security
error
message
.
"
)
;
}
is
(
hasThrown
shouldThrow
"
SessionStorage
show
thrown
only
if
cookieBehavior
is
REJECT
"
)
;
await
callRequestStorageAccess
(
)
;
try
{
sessionStorage
.
foo
=
42
;
hasThrown
=
false
;
}
catch
(
e
)
{
hasThrown
=
true
;
is
(
e
.
name
"
SecurityError
"
"
We
want
a
security
error
message
.
"
)
;
}
is
(
hasThrown
shouldThrow
"
SessionStorage
show
thrown
only
if
cookieBehavior
is
REJECT
"
)
;
}
async
_
=
>
{
if
(
allowListed
)
{
await
hasStorageAccessInitially
(
)
;
}
else
{
await
noStorageAccessInitially
(
)
;
}
sessionStorage
.
foo
=
42
;
ok
(
true
"
SessionStorage
is
always
allowed
"
)
;
await
callRequestStorageAccess
(
)
;
sessionStorage
.
foo
=
42
;
ok
(
true
"
SessionStorage
is
allowed
after
calling
the
storage
access
API
too
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
null
false
false
)
;
