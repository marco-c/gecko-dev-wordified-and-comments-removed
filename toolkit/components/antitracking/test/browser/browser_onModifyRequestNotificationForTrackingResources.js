ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
async
function
onModifyRequest
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
obs
.
addObserver
(
function
observer
(
subject
topic
data
)
{
let
httpChannel
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
spec
=
httpChannel
.
URI
.
spec
;
info
(
"
Observed
channel
for
"
+
spec
)
;
if
(
httpChannel
.
URI
.
prePath
+
"
/
"
!
=
TEST_3RD_PARTY_DOMAIN_TP
)
{
return
;
}
ok
(
spec
.
endsWith
(
"
empty
.
js
"
)
"
Correct
resource
observed
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
resolve
(
)
;
}
"
http
-
on
-
modify
-
request
"
)
;
}
)
;
}
add_task
(
async
function
(
)
{
info
(
"
Starting
subResources
test
"
)
;
await
SpecialPowers
.
flushPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
browser
.
contentblocking
.
enabled
"
true
]
[
"
privacy
.
trackingprotection
.
enabled
"
true
]
[
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
false
]
[
"
privacy
.
trackingprotection
.
annotate_channels
"
false
]
[
"
privacy
.
trackingprotection
.
introCount
"
ContentBlocking
.
MAX_INTROS
]
]
}
)
;
await
UrlClassifierTestUtils
.
addTestTrackers
(
)
;
let
promise
=
onModifyRequest
(
)
;
info
(
"
Creating
a
new
tab
"
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_EMBEDDER_PAGE
)
;
gBrowser
.
selectedTab
=
tab
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
promise
;
info
(
"
Removing
the
tab
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
UrlClassifierTestUtils
.
cleanupTestTrackers
(
)
;
}
)
;
