let
gExpectedResourcesSeen
=
0
;
async
function
onModifyRequest
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
obs
.
addObserver
(
function
observer
(
subject
topic
data
)
{
let
httpChannel
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
spec
=
httpChannel
.
URI
.
spec
;
info
(
"
Observed
channel
for
"
+
spec
)
;
if
(
httpChannel
.
URI
.
prePath
+
"
/
"
!
=
TEST_3RD_PARTY_DOMAIN_TP
)
{
return
;
}
if
(
spec
.
endsWith
(
"
empty
.
js
"
)
)
{
ok
(
true
"
Correct
resource
observed
"
)
;
+
+
gExpectedResourcesSeen
;
}
else
if
(
spec
.
endsWith
(
"
empty
.
js
?
redirect
"
)
)
{
httpChannel
.
redirectTo
(
Services
.
io
.
newURI
(
spec
.
replace
(
"
empty
.
js
?
redirect
"
"
head
.
js
"
)
)
)
;
}
else
if
(
spec
.
endsWith
(
"
empty
.
js
?
redirect2
"
)
)
{
httpChannel
.
suspend
(
)
;
setTimeout
(
(
)
=
>
{
httpChannel
.
redirectTo
(
Services
.
io
.
newURI
(
spec
.
replace
(
"
empty
.
js
?
redirect2
"
"
head
.
js
"
)
)
)
;
httpChannel
.
resume
(
)
;
}
100
)
;
}
else
if
(
spec
.
endsWith
(
"
head
.
js
"
)
)
{
+
+
gExpectedResourcesSeen
;
}
if
(
gExpectedResourcesSeen
=
=
3
)
{
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
resolve
(
)
;
}
}
"
http
-
on
-
modify
-
request
"
)
;
}
)
;
}
add_task
(
async
function
(
)
{
info
(
"
Starting
subResources
test
"
)
;
await
SpecialPowers
.
flushPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
browser
.
contentblocking
.
allowlist
.
annotations
.
enabled
"
true
]
[
"
browser
.
contentblocking
.
allowlist
.
storage
.
enabled
"
true
]
[
"
privacy
.
trackingprotection
.
enabled
"
true
]
[
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
false
]
[
"
privacy
.
trackingprotection
.
annotate_channels
"
false
]
[
ContentBlocking
.
prefIntroCount
ContentBlocking
.
MAX_INTROS
]
[
"
privacy
.
restrict3rdpartystorage
.
userInteractionRequiredForHosts
"
"
tracking
.
example
.
com
tracking
.
example
.
org
"
]
]
}
)
;
await
UrlClassifierTestUtils
.
addTestTrackers
(
)
;
let
promise
=
onModifyRequest
(
)
;
info
(
"
Creating
a
new
tab
"
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_EMBEDDER_PAGE
)
;
gBrowser
.
selectedTab
=
tab
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
promise
;
info
(
"
Verify
the
number
of
tracking
nodes
found
"
)
;
await
ContentTask
.
spawn
(
browser
{
expected
:
gExpectedResourcesSeen
}
async
function
(
obj
)
{
is
(
content
.
document
.
blockedTrackingNodeCount
obj
.
expected
"
Expected
tracking
nodes
found
"
)
;
}
)
;
info
(
"
Removing
the
tab
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
UrlClassifierTestUtils
.
cleanupTestTrackers
(
)
;
}
)
;
