"
use
strict
"
;
const
TEST_SITE
=
"
https
:
/
/
example
.
com
/
"
;
const
TEST_SANDBOXED_PAGE
=
TEST_SITE
+
TEST_PATH
+
"
sandboxedWithImg
.
html
"
;
const
TEST_IMAGE_URL
=
TEST_SITE
+
TEST_PATH
+
"
setCookieImg
.
jpg
"
;
function
observeChannel
(
url
isThirdParty
isPartitionKeyOpaque
partitionKey
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
modify
-
request
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
if
(
httpChannel
.
URI
.
spec
!
=
=
url
)
{
return
;
}
let
loadInfo
=
httpChannel
.
loadInfo
;
if
(
isPartitionKeyOpaque
)
{
ok
(
loadInfo
.
cookieJarSettings
.
partitionKey
.
endsWith
(
"
.
mozilla
"
)
"
The
partition
key
is
using
an
opaque
origin
"
)
;
}
else
{
is
(
loadInfo
.
cookieJarSettings
.
partitionKey
partitionKey
"
The
partition
key
is
correct
"
)
;
}
is
(
loadInfo
.
isInThirdPartyContext
isThirdParty
The
request
{
isThirdParty
?
"
is
"
:
"
is
not
"
}
in
the
third
-
party
context
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
resolve
(
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
}
)
;
}
add_setup
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
cookies
.
removeAll
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_top_level_sandboxed_context
(
)
{
let
obsChannelPromise
=
observeChannel
(
TEST_IMAGE_URL
false
true
)
;
info
(
"
Opening
the
top
-
level
sandboxed
page
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_SANDBOXED_PAGE
)
;
await
obsChannelPromise
;
ok
(
true
"
The
loading
of
the
image
was
successful
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_sandboxed_iframe
(
)
{
info
(
"
Opening
the
top
-
level
page
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_SITE
)
;
let
obsChannelPromise
=
observeChannel
(
TEST_IMAGE_URL
true
false
"
(
https
example
.
com
f
)
"
)
;
info
(
"
Loading
the
sandboxed
iframe
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
TEST_SANDBOXED_PAGE
]
async
src
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
await
new
Promise
(
resolve
=
>
{
iframe
.
onload
=
resolve
;
iframe
.
src
=
src
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
return
iframe
.
browsingContext
;
}
)
;
await
obsChannelPromise
;
ok
(
true
"
The
loading
of
the
image
in
the
sandboxed
iframe
was
successful
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
