"
use
strict
"
;
const
TEST_URI
=
TEST_DOMAIN
+
TEST_PATH
+
"
file_stripping
.
html
"
;
const
TEST_THIRD_PARTY_URI
=
TEST_DOMAIN_2
+
TEST_PATH
+
"
file_stripping
.
html
"
;
const
TEST_REDIRECT_URI
=
TEST_DOMAIN
+
TEST_PATH
+
"
redirect
.
sjs
"
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
LABEL_NAVIGATION
=
0
;
const
LABEL_REDIRECT
=
1
;
const
LABEL_STRIP_FOR_NAVIGATION
=
2
;
const
LABEL_STRIP_FOR_REDIRECT
=
3
;
async
function
clearTelemetry
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
2000
)
)
;
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
true
)
;
Services
.
telemetry
.
getHistogramById
(
"
QUERY_STRIPPING_COUNT
"
)
.
clear
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
.
content
;
return
!
histograms
|
|
!
histograms
.
QUERY_STRIPPING_COUNT
;
}
)
;
}
async
function
verifyQueryString
(
browser
expected
)
{
await
SpecialPowers
.
spawn
(
browser
[
expected
]
expected
=
>
{
let
search
=
content
.
location
.
search
.
slice
(
1
)
;
is
(
search
expected
"
The
query
string
is
correct
.
"
)
;
}
)
;
}
async
function
getTelemetryProbe
(
probeInParent
label
checkCntFn
)
{
let
queryStrippingHistogram
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
histograms
;
if
(
probeInParent
)
{
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
.
parent
;
}
else
{
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
.
content
;
}
queryStrippingHistogram
=
histograms
.
QUERY_STRIPPING_COUNT
;
let
checkRes
=
false
;
if
(
queryStrippingHistogram
)
{
checkRes
=
checkCntFn
?
checkCntFn
(
queryStrippingHistogram
.
values
[
label
]
)
:
true
;
}
return
checkRes
;
}
)
;
return
queryStrippingHistogram
.
values
[
label
]
;
}
async
function
checkTelemetryProbe
(
probeInParent
expectedCnt
label
)
{
let
cnt
=
await
getTelemetryProbe
(
probeInParent
label
cnt
=
>
cnt
=
=
expectedCnt
)
;
is
(
cnt
expectedCnt
"
There
should
be
expected
count
in
telemetry
.
"
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
enabled
"
true
]
[
"
privacy
.
query_stripping
.
strip_list
"
"
paramToStrip
"
]
]
}
)
;
await
clearTelemetry
(
)
;
}
)
;
add_task
(
async
function
testQueryStrippingNavigationInParent
(
)
{
let
testURI
=
TEST_URI
+
"
?
paramToStrip
=
value
"
;
await
BrowserTestUtils
.
withNewTab
(
testURI
async
browser
=
>
{
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
await
checkTelemetryProbe
(
true
1
LABEL_STRIP_FOR_NAVIGATION
)
;
let
newNavigationCnt
=
await
getTelemetryProbe
(
true
LABEL_NAVIGATION
cnt
=
>
cnt
>
0
)
;
ok
(
newNavigationCnt
>
0
"
There
is
navigation
count
added
.
"
)
;
await
clearTelemetry
(
)
;
}
)
;
add_task
(
async
function
testQueryStrippingNavigationInContent
(
)
{
let
testThirdPartyURI
=
TEST_THIRD_PARTY_URI
+
"
?
paramToStrip
=
value
"
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_THIRD_PARTY_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testThirdPartyURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
await
checkTelemetryProbe
(
false
1
LABEL_STRIP_FOR_NAVIGATION
)
;
let
newNavigationCnt
=
await
getTelemetryProbe
(
false
LABEL_NAVIGATION
cnt
=
>
cnt
>
0
)
;
ok
(
newNavigationCnt
>
0
"
There
is
navigation
count
added
.
"
)
;
await
clearTelemetry
(
)
;
}
)
;
add_task
(
async
function
testQueryStrippingRedirect
(
)
{
let
testThirdPartyURI
=
{
TEST_REDIRECT_URI
}
?
{
TEST_THIRD_PARTY_URI
}
?
paramToStrip
=
value
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_THIRD_PARTY_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testThirdPartyURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
await
checkTelemetryProbe
(
true
1
LABEL_STRIP_FOR_REDIRECT
)
;
await
checkTelemetryProbe
(
true
1
LABEL_REDIRECT
)
;
await
clearTelemetry
(
)
;
}
)
;
add_task
(
async
function
testQueryStrippingDisabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
enabled
"
false
]
]
}
)
;
let
testURI
=
TEST_URI
+
"
?
paramToStrip
=
value
"
;
await
BrowserTestUtils
.
withNewTab
(
testURI
async
browser
=
>
{
await
verifyQueryString
(
browser
"
paramToStrip
=
value
"
)
;
}
)
;
await
checkTelemetryProbe
(
true
undefined
LABEL_STRIP_FOR_NAVIGATION
)
;
let
newNavigationCnt
=
await
getTelemetryProbe
(
true
LABEL_NAVIGATION
cnt
=
>
cnt
>
0
)
;
ok
(
newNavigationCnt
>
0
"
There
is
navigation
count
added
.
"
)
;
let
testThirdPartyURI
=
TEST_THIRD_PARTY_URI
+
"
?
paramToStrip
=
value
"
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
testThirdPartyURI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testThirdPartyURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
"
paramToStrip
=
value
"
)
;
}
)
;
await
checkTelemetryProbe
(
false
undefined
LABEL_STRIP_FOR_NAVIGATION
)
;
newNavigationCnt
=
await
getTelemetryProbe
(
false
LABEL_NAVIGATION
cnt
=
>
cnt
>
0
)
;
ok
(
newNavigationCnt
>
0
"
There
is
navigation
count
added
.
"
)
;
testThirdPartyURI
=
{
TEST_REDIRECT_URI
}
?
{
TEST_THIRD_PARTY_URI
}
?
paramToStrip
=
value
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
{
TEST_THIRD_PARTY_URI
}
?
paramToStrip
=
value
)
;
await
SpecialPowers
.
spawn
(
browser
[
testThirdPartyURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
"
paramToStrip
=
value
"
)
;
}
)
;
await
checkTelemetryProbe
(
true
undefined
LABEL_STRIP_FOR_REDIRECT
)
;
await
checkTelemetryProbe
(
true
1
LABEL_REDIRECT
)
;
await
clearTelemetry
(
)
;
}
)
;
