ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
extension
;
add_task
(
async
function
(
)
{
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
webRequest
"
"
webRequestBlocking
"
"
*
:
/
/
*
/
*
"
]
}
async
background
(
)
{
let
gExpectedResourcesSeen
=
0
;
function
onBeforeRequest
(
details
)
{
let
spec
=
details
.
url
;
browser
.
test
.
log
(
"
Observed
channel
for
"
+
spec
)
;
if
(
!
spec
.
startsWith
(
"
https
:
/
/
tracking
.
example
.
com
/
"
)
)
{
return
undefined
;
}
if
(
spec
.
endsWith
(
"
empty
.
js
"
)
)
{
browser
.
test
.
succeed
(
"
Correct
resource
observed
"
)
;
+
+
gExpectedResourcesSeen
;
}
else
if
(
spec
.
endsWith
(
"
empty
.
js
?
redirect
"
)
)
{
return
{
redirectUrl
:
spec
.
replace
(
"
empty
.
js
?
redirect
"
"
head
.
js
"
)
}
;
}
else
if
(
spec
.
endsWith
(
"
head
.
js
"
)
)
{
+
+
gExpectedResourcesSeen
;
}
if
(
gExpectedResourcesSeen
=
=
2
)
{
browser
.
webRequest
.
onBeforeRequest
.
removeListener
(
onBeforeRequest
)
;
browser
.
test
.
sendMessage
(
"
finish
"
)
;
}
return
undefined
;
}
browser
.
webRequest
.
onBeforeRequest
.
addListener
(
onBeforeRequest
{
urls
:
[
"
*
:
/
/
*
/
*
"
]
}
[
"
blocking
"
]
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
Starting
subResources
test
"
)
;
await
SpecialPowers
.
flushPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
browser
.
contentblocking
.
enabled
"
true
]
[
"
browser
.
contentblocking
.
ui
.
enabled
"
true
]
[
"
browser
.
contentblocking
.
rejecttrackers
.
ui
.
enabled
"
true
]
[
"
privacy
.
trackingprotection
.
enabled
"
true
]
[
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
false
]
[
"
privacy
.
trackingprotection
.
annotate_channels
"
false
]
[
ContentBlocking
.
prefIntroCount
ContentBlocking
.
MAX_INTROS
]
]
}
)
;
await
UrlClassifierTestUtils
.
addTestTrackers
(
)
;
let
promise
=
extension
.
awaitMessage
(
"
finish
"
)
;
info
(
"
Creating
a
new
tab
"
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_EMBEDDER_PAGE
)
;
gBrowser
.
selectedTab
=
tab
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
promise
;
info
(
"
Verify
the
number
of
tracking
nodes
found
"
)
;
await
ContentTask
.
spawn
(
browser
{
expected
:
3
}
async
function
(
obj
)
{
is
(
content
.
document
.
blockedTrackingNodeCount
obj
.
expected
"
Expected
tracking
nodes
found
"
)
;
}
)
;
info
(
"
Removing
the
tab
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
UrlClassifierTestUtils
.
cleanupTestTrackers
(
)
;
await
extension
.
unload
(
)
;
}
)
;
