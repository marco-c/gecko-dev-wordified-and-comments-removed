PartitionedStorageHelper
.
runTestInNormalAndPrivateMode
(
"
DedicatedWorkers
"
async
(
win3rdParty
win1stParty
)
=
>
{
await
win1stParty
.
fetch
(
"
cookies
.
sjs
?
first
"
)
.
then
(
r
=
>
r
.
text
(
)
)
;
let
firstPartyWorker
=
new
win1stParty
.
Worker
(
"
dedicatedWorker
.
js
"
)
;
await
new
Promise
(
resolve
=
>
{
firstPartyWorker
.
addEventListener
(
"
message
"
msg
=
>
{
is
(
msg
.
data
"
cookie
:
foopy
=
first
"
"
Got
the
expected
first
-
party
cookie
.
"
)
;
resolve
(
)
;
}
)
;
firstPartyWorker
.
postMessage
(
"
getCookies
"
)
;
}
)
;
await
win3rdParty
.
fetch
(
"
cookies
.
sjs
?
3rd
;
Partitioned
;
Secure
"
)
.
then
(
r
=
>
r
.
text
(
)
)
;
let
thirdPartyWorker
=
new
win3rdParty
.
Worker
(
"
dedicatedWorker
.
js
"
)
;
await
new
Promise
(
resolve
=
>
{
thirdPartyWorker
.
addEventListener
(
"
message
"
msg
=
>
{
is
(
msg
.
data
"
cookie
:
foopy
=
3rd
"
"
Got
the
expected
third
-
party
cookie
.
"
)
;
resolve
(
)
;
}
)
;
thirdPartyWorker
.
postMessage
(
"
getCookies
"
)
;
}
)
;
firstPartyWorker
.
terminate
(
)
;
thirdPartyWorker
.
terminate
(
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
(
)
=
>
resolve
(
)
)
;
}
)
;
}
[
]
)
;
