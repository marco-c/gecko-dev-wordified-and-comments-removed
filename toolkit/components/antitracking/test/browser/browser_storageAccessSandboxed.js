ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
counter
=
0
;
AntiTracking
.
runTest
(
"
Storage
Access
API
called
in
a
sandboxed
iframe
"
async
_
=
>
{
let
dwu
=
SpecialPowers
.
getDOMWindowUtils
(
window
)
;
let
helper
=
dwu
.
setHandlingUserInput
(
true
)
;
let
p
;
let
threw
=
false
;
try
{
p
=
document
.
requestStorageAccess
(
)
;
}
catch
(
e
)
{
threw
=
true
;
}
finally
{
helper
.
destruct
(
)
;
}
ok
(
!
threw
"
requestStorageAccess
should
not
throw
"
)
;
threw
=
false
;
try
{
await
p
;
}
catch
(
e
)
{
threw
=
true
;
}
ok
(
threw
"
requestStorageAccess
shouldn
'
t
be
available
"
)
;
}
null
null
[
[
"
dom
.
storage_access
.
enabled
"
true
]
]
false
false
false
false
"
allow
-
scripts
allow
-
same
-
origin
"
)
;
AntiTracking
.
runTest
(
"
Storage
Access
API
called
in
a
sandboxed
iframe
with
"
+
"
allow
-
storage
-
access
-
by
-
user
-
activation
"
async
_
=
>
{
let
dwu
=
SpecialPowers
.
getDOMWindowUtils
(
window
)
;
let
helper
=
dwu
.
setHandlingUserInput
(
true
)
;
let
p
;
let
threw
=
false
;
try
{
p
=
document
.
requestStorageAccess
(
)
;
}
catch
(
e
)
{
threw
=
true
;
}
finally
{
helper
.
destruct
(
)
;
}
ok
(
!
threw
"
requestStorageAccess
should
not
throw
"
)
;
threw
=
false
;
try
{
await
p
;
}
catch
(
e
)
{
threw
=
true
;
}
ok
(
!
threw
"
requestStorageAccess
should
be
available
"
)
;
}
null
async
_
=
>
{
if
(
+
+
counter
%
2
=
=
0
)
{
return
;
}
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
[
[
"
dom
.
storage_access
.
enabled
"
true
]
]
false
false
true
false
"
allow
-
scripts
allow
-
same
-
origin
allow
-
storage
-
access
-
by
-
user
-
activation
"
)
;
AntiTracking
.
runTest
(
"
Verify
that
sandboxed
contexts
don
'
t
get
the
saved
permission
"
async
_
=
>
{
let
hasAccess
=
await
document
.
hasStorageAccess
(
)
;
ok
(
!
hasAccess
"
Doesn
'
t
yet
have
storage
access
"
)
;
try
{
localStorage
.
foo
=
42
;
ok
(
false
"
LocalStorage
cannot
be
used
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
LocalStorage
cannot
be
used
!
"
)
;
is
(
e
.
name
"
SecurityError
"
"
We
want
a
security
error
message
.
"
)
;
}
}
null
null
[
[
"
dom
.
storage_access
.
enabled
"
true
]
]
false
false
false
false
"
allow
-
scripts
allow
-
same
-
origin
"
)
;
AntiTracking
.
runTest
(
"
Verify
that
sandboxed
contexts
with
"
+
"
allow
-
storage
-
access
-
by
-
user
-
activation
get
the
"
+
"
saved
permission
"
async
_
=
>
{
let
hasAccess
=
await
document
.
hasStorageAccess
(
)
;
ok
(
hasAccess
"
Has
storage
access
"
)
;
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
can
be
used
!
"
)
;
}
null
null
[
[
"
dom
.
storage_access
.
enabled
"
true
]
]
false
false
false
false
"
allow
-
scripts
allow
-
same
-
origin
allow
-
storage
-
access
-
by
-
user
-
activation
"
)
;
AntiTracking
.
runTest
(
"
Verify
that
private
browsing
contexts
don
'
t
get
the
saved
permission
"
async
_
=
>
{
let
hasAccess
=
await
document
.
hasStorageAccess
(
)
;
ok
(
!
hasAccess
"
Doesn
'
t
yet
have
storage
access
"
)
;
try
{
localStorage
.
foo
=
42
;
ok
(
false
"
LocalStorage
cannot
be
used
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
LocalStorage
cannot
be
used
!
"
)
;
is
(
e
.
name
"
SecurityError
"
"
We
want
a
security
error
message
.
"
)
;
}
}
null
null
[
[
"
dom
.
storage_access
.
enabled
"
true
]
]
false
false
false
true
null
)
;
AntiTracking
.
runTest
(
"
Verify
that
non
-
sandboxed
contexts
get
the
"
+
"
saved
permission
"
async
_
=
>
{
let
hasAccess
=
await
document
.
hasStorageAccess
(
)
;
ok
(
hasAccess
"
Has
storage
access
"
)
;
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
can
be
used
!
"
)
;
}
null
async
_
=
>
{
if
(
+
+
counter
%
2
=
=
1
)
{
return
;
}
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
[
[
"
dom
.
storage_access
.
enabled
"
true
]
]
false
false
false
)
;
