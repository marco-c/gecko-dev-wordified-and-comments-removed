AntiTracking
.
runTestInNormalAndPrivateMode
(
"
Set
/
Get
Cookies
"
async
_
=
>
{
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
document
.
cookie
=
"
name
=
value
"
;
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
not
-
present
"
"
We
should
not
have
cookies
"
)
;
}
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
not
-
present
"
"
We
should
not
have
cookies
"
)
;
}
)
;
is
(
document
.
cookie
"
"
"
Still
no
cookies
for
me
"
)
;
}
async
_
=
>
{
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
not
-
present
"
"
We
should
not
have
cookies
"
)
;
}
)
;
document
.
cookie
=
"
name
=
value
"
;
ok
(
document
.
cookie
.
includes
(
"
name
=
value
"
)
"
Some
cookies
for
me
"
)
;
ok
(
document
.
cookie
.
includes
(
"
foopy
=
1
"
)
"
Some
cookies
for
me
"
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
present
"
"
We
should
have
cookies
"
)
;
}
)
;
ok
(
document
.
cookie
.
length
"
Some
Cookies
for
me
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
)
;
AntiTracking
.
runTestInNormalAndPrivateMode
(
"
Cookies
and
Storage
Access
API
"
async
_
=
>
{
await
noStorageAccessInitially
(
)
;
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
document
.
cookie
=
"
name
=
value
"
;
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
not
-
present
"
"
We
should
not
have
cookies
"
)
;
}
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
not
-
present
"
"
We
should
not
have
cookies
"
)
;
}
)
;
is
(
document
.
cookie
"
"
"
Still
no
cookies
for
me
"
)
;
await
callRequestStorageAccess
(
)
;
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
document
.
cookie
=
"
name
=
value
"
;
if
(
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
=
=
SpecialPowers
.
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
)
{
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
}
else
{
is
(
document
.
cookie
"
name
=
value
"
"
I
have
the
cookies
!
"
)
;
}
}
async
_
=
>
{
if
(
allowListed
)
{
await
hasStorageAccessInitially
(
)
;
}
else
{
await
noStorageAccessInitially
(
)
;
}
is
(
document
.
cookie
"
"
"
No
cookies
for
me
"
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
not
-
present
"
"
We
should
not
have
cookies
"
)
;
}
)
;
document
.
cookie
=
"
name
=
value
"
;
ok
(
document
.
cookie
.
includes
(
"
name
=
value
"
)
"
Some
cookies
for
me
"
)
;
ok
(
document
.
cookie
.
includes
(
"
foopy
=
1
"
)
"
Some
cookies
for
me
"
)
;
await
fetch
(
"
server
.
sjs
"
)
.
then
(
r
=
>
r
.
text
(
)
)
.
then
(
text
=
>
{
is
(
text
"
cookie
-
present
"
"
We
should
have
cookies
"
)
;
}
)
;
ok
(
document
.
cookie
.
length
"
Some
Cookies
for
me
"
)
;
await
callRequestStorageAccess
(
)
;
ok
(
document
.
cookie
.
length
"
Still
some
Cookies
for
me
"
)
;
ok
(
document
.
cookie
.
includes
(
"
name
=
value
"
)
"
Some
cookies
for
me
"
)
;
ok
(
document
.
cookie
.
includes
(
"
foopy
=
1
"
)
"
Some
cookies
for
me
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
null
false
false
)
;
