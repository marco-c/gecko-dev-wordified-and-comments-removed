const
TEST_PAGE
=
TEST_DOMAIN
+
TEST_PATH
+
"
file_iframe_document_open
.
html
"
;
const
TEST_PAGE_PARTITIOEND
=
TEST_DOMAIN_HTTPS
+
TEST_PATH
+
"
file_iframe_document_open_partitioned
.
html
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
cookieBehavior
"
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
]
[
"
network
.
cookie
.
cookieBehavior
.
pbmode
"
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
]
[
"
privacy
.
dynamic_firstparty
.
use_site
"
true
]
[
"
network
.
cookie
.
cookieBehavior
.
optInPartitioning
"
true
]
[
"
network
.
cookie
.
CHIPS
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_firstParty_iframe
(
)
{
Services
.
cookies
.
removeAll
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE
)
;
await
TestUtils
.
waitForCondition
(
_
=
>
Services
.
cookies
.
cookies
.
length
)
;
let
cookie
=
Services
.
cookies
.
cookies
[
0
]
;
is
(
cookie
.
originAttributes
.
partitionKey
"
"
"
The
partitionKey
should
remain
empty
for
first
-
party
iframe
.
"
)
;
Services
.
cookies
.
removeAll
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_thirdParty_iframe
(
)
{
Services
.
cookies
.
removeAll
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_TOP_PAGE_2
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
TEST_PAGE_PARTITIOEND
]
async
function
(
page
)
{
let
ifr
=
content
.
document
.
createElement
(
"
iframe
"
)
;
let
loading
=
ContentTaskUtils
.
waitForEvent
(
ifr
"
load
"
)
;
ifr
.
src
=
page
;
content
.
document
.
body
.
appendChild
(
ifr
)
;
await
loading
;
}
)
;
await
TestUtils
.
waitForCondition
(
_
=
>
Services
.
cookies
.
cookies
.
length
)
;
let
cookie
=
Services
.
cookies
.
cookies
[
0
]
;
is
(
cookie
.
originAttributes
.
partitionKey
"
(
http
xn
-
-
exmple
-
cua
.
test
)
"
"
The
partitionKey
should
exist
for
third
-
party
iframe
.
"
)
;
Services
.
cookies
.
removeAll
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
