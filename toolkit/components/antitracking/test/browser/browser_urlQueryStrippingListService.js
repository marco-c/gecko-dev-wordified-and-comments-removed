"
use
strict
"
;
const
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
urlQueryStrippingListService
"
"
mozilla
.
org
/
query
-
stripping
-
list
-
service
;
1
"
"
nsIURLQueryStrippingListService
"
)
;
const
COLLECTION_NAME
=
"
query
-
stripping
"
;
const
TEST_URI
=
TEST_DOMAIN
+
TEST_PATH
+
"
empty
.
html
"
;
const
TEST_THIRD_PARTY_URI
=
TEST_DOMAIN_2
+
TEST_PATH
+
"
empty
.
html
"
;
class
UpdateEvent
extends
EventTarget
{
}
function
waitForEvent
(
element
eventName
)
{
return
BrowserTestUtils
.
waitForEvent
(
element
eventName
)
.
then
(
e
=
>
e
.
detail
)
;
}
async
function
verifyQueryString
(
browser
expected
)
{
await
SpecialPowers
.
spawn
(
browser
[
expected
]
expected
=
>
{
let
search
=
content
.
location
.
search
.
slice
(
1
)
;
is
(
search
expected
"
The
query
string
is
correct
.
"
)
;
}
)
;
}
async
function
check
(
query
expected
)
{
let
testURI
=
TEST_URI
+
"
?
"
+
query
;
await
BrowserTestUtils
.
withNewTab
(
testURI
async
browser
=
>
{
await
verifyQueryString
(
browser
expected
)
;
}
)
;
testURI
=
TEST_URI
+
"
?
"
+
query
;
let
expectedURI
;
if
(
expected
!
=
"
"
)
{
expectedURI
=
TEST_URI
+
"
?
"
+
expected
;
}
else
{
expectedURI
=
TEST_URI
;
}
await
BrowserTestUtils
.
withNewTab
(
TEST_THIRD_PARTY_URI
async
browser
=
>
{
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
expectedURI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testURI
]
async
uri
=
>
{
let
link
=
content
.
document
.
createElement
(
"
a
"
)
;
link
.
setAttribute
(
"
href
"
uri
)
;
link
.
textContent
=
"
Link
"
;
content
.
document
.
body
.
appendChild
(
link
)
;
link
.
click
(
)
;
}
)
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
expected
)
;
}
)
;
}
registerCleanupFunction
(
(
)
=
>
{
Cc
[
"
mozilla
.
org
/
query
-
stripping
-
list
-
service
;
1
"
]
.
getService
(
Ci
.
nsIURLQueryStrippingListService
)
.
clearLists
(
)
;
}
)
;
add_task
(
async
function
testPrefSettings
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
enabled
"
true
]
[
"
privacy
.
query_stripping
.
strip_list
"
"
"
]
[
"
privacy
.
query_stripping
.
allow_list
"
"
"
]
]
}
)
;
let
updateEvent
=
new
UpdateEvent
(
)
;
let
obs
=
(
stripList
allowList
)
=
>
{
let
event
=
new
CustomEvent
(
"
update
"
{
detail
:
{
stripList
allowList
}
}
)
;
updateEvent
.
dispatchEvent
(
event
)
;
}
;
let
promise
=
waitForEvent
(
updateEvent
"
update
"
)
;
urlQueryStrippingListService
.
registerAndRunObserver
(
obs
)
;
let
lists
=
await
promise
;
is
(
lists
.
stripList
"
"
"
No
strip
list
at
the
beginning
.
"
)
;
is
(
lists
.
allowList
"
"
"
No
allow
list
at
the
beginning
.
"
)
;
await
check
(
"
pref_query1
=
123
"
"
pref_query1
=
123
"
)
;
await
check
(
"
pref_query2
=
456
"
"
pref_query2
=
456
"
)
;
promise
=
waitForEvent
(
updateEvent
"
update
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
strip_list
"
"
pref_query1
pref_query2
"
]
]
}
)
;
lists
=
await
promise
;
is
(
lists
.
stripList
"
pref_query1
pref_query2
"
"
There
should
be
strip
list
entries
.
"
)
;
is
(
lists
.
allowList
"
"
"
There
should
be
no
allow
list
entries
.
"
)
;
await
check
(
"
pref_query1
=
123
"
"
"
)
;
await
check
(
"
pref_query2
=
456
"
"
"
)
;
promise
=
waitForEvent
(
updateEvent
"
update
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
allow_list
"
"
example
.
net
"
]
]
}
)
;
lists
=
await
promise
;
is
(
lists
.
stripList
"
pref_query1
pref_query2
"
"
There
should
be
strip
list
entires
.
"
)
;
is
(
lists
.
allowList
"
example
.
net
"
"
There
should
be
one
allow
list
entry
.
"
)
;
await
check
(
"
pref_query1
=
123
"
"
pref_query1
=
123
"
)
;
await
check
(
"
pref_query2
=
123
"
"
pref_query2
=
123
"
)
;
urlQueryStrippingListService
.
unregisterObserver
(
obs
)
;
SpecialPowers
.
flushPrefEnv
(
)
;
}
)
;
add_task
(
async
function
testRemoteSettings
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
enabled
"
true
]
[
"
privacy
.
query_stripping
.
strip_list
"
"
"
]
[
"
privacy
.
query_stripping
.
allow_list
"
"
"
]
]
}
)
;
let
db
=
await
RemoteSettings
(
COLLECTION_NAME
)
.
db
;
await
db
.
importChanges
(
{
}
42
[
]
)
;
let
updateEvent
=
new
UpdateEvent
(
)
;
let
obs
=
(
stripList
allowList
)
=
>
{
let
event
=
new
CustomEvent
(
"
update
"
{
detail
:
{
stripList
allowList
}
}
)
;
updateEvent
.
dispatchEvent
(
event
)
;
}
;
let
promise
=
waitForEvent
(
updateEvent
"
update
"
)
;
urlQueryStrippingListService
.
registerAndRunObserver
(
obs
)
;
let
lists
=
await
promise
;
is
(
lists
.
stripList
"
"
"
No
strip
list
at
the
beginning
.
"
)
;
is
(
lists
.
allowList
"
"
"
No
allow
list
at
the
beginning
.
"
)
;
await
check
(
"
remote_query1
=
123
"
"
remote_query1
=
123
"
)
;
await
check
(
"
remote_query2
=
456
"
"
remote_query2
=
456
"
)
;
promise
=
waitForEvent
(
updateEvent
"
update
"
)
;
await
RemoteSettings
(
COLLECTION_NAME
)
.
emit
(
"
sync
"
{
data
:
{
current
:
[
{
id
:
"
1
"
last_modified
:
100000000000000000001
stripList
:
[
"
remote_query1
"
"
remote_query2
"
]
allowList
:
[
]
}
]
}
}
)
;
lists
=
await
promise
;
is
(
lists
.
stripList
"
remote_query1
remote_query2
"
"
There
should
be
strip
list
entries
.
"
)
;
is
(
lists
.
allowList
"
"
"
There
should
be
no
allow
list
entries
.
"
)
;
await
check
(
"
remote_query1
=
123
"
"
"
)
;
await
check
(
"
remote_query2
=
456
"
"
"
)
;
promise
=
waitForEvent
(
updateEvent
"
update
"
)
;
await
RemoteSettings
(
COLLECTION_NAME
)
.
emit
(
"
sync
"
{
data
:
{
current
:
[
{
id
:
"
2
"
last_modified
:
100000000000000000002
stripList
:
[
"
remote_query1
"
"
remote_query2
"
]
allowList
:
[
"
example
.
net
"
]
}
]
}
}
)
;
lists
=
await
promise
;
is
(
lists
.
stripList
"
remote_query1
remote_query2
"
"
There
should
be
strip
list
entries
.
"
)
;
is
(
lists
.
allowList
"
example
.
net
"
"
There
should
be
one
allow
list
entry
.
"
)
;
await
check
(
"
remote_query1
=
123
"
"
remote_query1
=
123
"
)
;
await
check
(
"
remote_query2
=
123
"
"
remote_query2
=
123
"
)
;
urlQueryStrippingListService
.
unregisterObserver
(
obs
)
;
await
db
.
clear
(
)
;
}
)
;
