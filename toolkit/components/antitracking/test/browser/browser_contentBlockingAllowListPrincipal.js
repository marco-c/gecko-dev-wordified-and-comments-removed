"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ContentBlockingAllowList
:
"
resource
:
/
/
gre
/
modules
/
ContentBlockingAllowList
.
sys
.
mjs
"
}
)
;
const
TEST_SANDBOX_URL
=
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
antitracking
/
test
/
browser
/
sandboxed
.
html
"
;
function
checkAllowListPrincipal
(
browser
type
origin
=
browser
.
contentPrincipal
.
origin
)
{
let
principal
=
browser
.
browsingContext
.
currentWindowGlobal
.
contentBlockingAllowListPrincipal
;
ok
(
principal
"
Principal
is
set
"
)
;
if
(
type
=
=
"
content
"
)
{
ok
(
principal
.
isContentPrincipal
"
Is
content
principal
"
)
;
ok
(
principal
.
schemeIs
(
"
https
"
)
"
allowlist
content
principal
must
have
https
scheme
"
)
;
}
else
if
(
type
=
=
"
system
"
)
{
ok
(
principal
.
isSystemPrincipal
"
Is
system
principal
"
)
;
}
else
{
throw
new
Error
(
"
Unexpected
principal
type
"
)
;
}
is
(
principal
.
origin
origin
"
Correct
origin
"
)
;
}
async
function
runTestInNormalAndPrivateMode
(
initialUrl
testCallback
)
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
let
isPrivateBrowsing
=
!
!
i
;
info
(
"
Running
test
.
Private
browsing
:
"
+
!
!
i
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
isPrivateBrowsing
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
win
.
gBrowser
initialUrl
)
;
let
browser
=
tab
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
testCallback
(
browser
isPrivateBrowsing
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
function
createFrame
(
browser
src
id
sandboxAttr
)
{
return
SpecialPowers
.
spawn
(
browser
[
{
page
:
src
frameId
:
id
sandboxAttr
}
]
async
function
(
obj
)
{
await
new
content
.
Promise
(
resolve
=
>
{
let
frame
=
content
.
document
.
createElement
(
"
iframe
"
)
;
frame
.
src
=
obj
.
page
;
frame
.
id
=
obj
.
frameId
;
if
(
obj
.
sandboxAttr
)
{
frame
.
setAttribute
(
"
sandbox
"
obj
.
sandboxAttr
)
;
}
frame
.
addEventListener
(
"
load
"
resolve
{
once
:
true
}
)
;
content
.
document
.
body
.
appendChild
(
frame
)
;
}
)
;
}
)
;
}
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
restrict3rdpartystorage
.
heuristic
.
redirect
"
false
]
[
"
privacy
.
restrict3rdpartystorage
.
heuristic
.
recently_visited
"
false
]
[
"
privacy
.
restrict3rdpartystorage
.
heuristic
.
window_open
"
false
]
[
"
dom
.
security
.
https_first_pbm
"
false
]
]
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
runTestInNormalAndPrivateMode
(
"
https
:
/
/
example
.
com
"
browser
=
>
{
checkAllowListPrincipal
(
browser
"
content
"
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
runTestInNormalAndPrivateMode
(
"
http
:
/
/
example
.
net
"
(
browser
isPrivateBrowsing
)
=
>
{
checkAllowListPrincipal
(
browser
"
content
"
"
https
:
/
/
example
.
net
"
+
(
isPrivateBrowsing
?
"
^
privateBrowsingId
=
1
"
:
"
"
)
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
runTestInNormalAndPrivateMode
(
"
about
:
preferences
"
browser
=
>
{
checkAllowListPrincipal
(
browser
"
system
"
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
runTestInNormalAndPrivateMode
(
TEST_SANDBOX_URL
(
browser
isPrivateBrowsing
)
=
>
{
ok
(
browser
.
contentPrincipal
.
isNullPrincipal
"
Top
level
sandboxed
page
should
have
null
principal
"
)
;
checkAllowListPrincipal
(
browser
"
content
"
"
https
:
/
/
example
.
com
"
+
(
isPrivateBrowsing
?
"
^
privateBrowsingId
=
1
"
:
"
"
)
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
runTestInNormalAndPrivateMode
(
"
https
:
/
/
example
.
com
"
async
browser
=
>
{
checkAllowListPrincipal
(
browser
"
content
"
)
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForNewTab
(
browser
.
ownerGlobal
.
gBrowser
"
https
:
/
/
example
.
org
/
"
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
open
(
"
https
:
/
/
example
.
org
/
"
)
;
}
)
;
let
tab
=
await
promiseTabOpened
;
checkAllowListPrincipal
(
tab
.
linkedBrowser
"
content
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
runTestInNormalAndPrivateMode
(
"
https
:
/
/
example
.
com
"
async
(
browser
isPrivateBrowsing
)
=
>
{
checkAllowListPrincipal
(
browser
"
content
"
)
;
await
createFrame
(
browser
"
https
:
/
/
example
.
com
"
"
sandboxedIframe
"
"
allow
-
popups
"
)
;
let
[
frameBrowsingContext
]
=
browser
.
browsingContext
.
children
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForNewTab
(
browser
.
ownerGlobal
.
gBrowser
"
https
:
/
/
example
.
org
/
"
true
)
;
await
SpecialPowers
.
spawn
(
frameBrowsingContext
[
]
async
function
(
)
{
content
.
open
(
"
https
:
/
/
example
.
org
/
"
)
;
}
)
;
let
tab
=
await
promiseTabOpened
;
checkAllowListPrincipal
(
tab
.
linkedBrowser
"
content
"
"
https
:
/
/
example
.
org
"
+
(
isPrivateBrowsing
?
"
^
privateBrowsingId
=
1
"
:
"
"
)
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
ContentBlockingAllowList
.
add
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
let
privateWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
privateTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
privateWin
.
gBrowser
"
https
:
/
/
example
.
com
"
)
;
ContentBlockingAllowList
.
add
(
privateTab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
privateTab
)
;
await
runTestInNormalAndPrivateMode
(
"
https
:
/
/
example
.
com
"
async
(
browser
_
)
=
>
{
ok
(
!
browser
.
browsingContext
.
currentWindowGlobal
.
usingStorageAccess
"
The
usingStorageAccess
flag
should
be
false
for
the
top
-
level
context
"
)
;
await
createFrame
(
browser
"
https
:
/
/
example
.
org
"
"
iframe
"
)
;
let
[
frameBrowsingContext
]
=
browser
.
browsingContext
.
children
;
ok
(
frameBrowsingContext
.
currentWindowGlobal
.
usingStorageAccess
"
The
usingStorageAccess
flag
should
be
true
for
the
iframe
'
s
context
"
)
;
await
createFrame
(
frameBrowsingContext
"
https
:
/
/
example
.
com
"
"
ABAiframe
"
)
;
let
[
abaFrameBrowsingContext
]
=
frameBrowsingContext
.
children
;
ok
(
abaFrameBrowsingContext
.
currentWindowGlobal
.
usingStorageAccess
"
The
usingStorageAccess
flag
should
be
true
for
the
ABA
iframe
'
s
context
"
)
;
ContentBlockingAllowList
.
remove
(
browser
)
;
}
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWin
)
;
}
)
;
