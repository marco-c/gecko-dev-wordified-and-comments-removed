function
checkAllowListPrincipal
(
browser
type
origin
=
browser
.
contentPrincipal
.
origin
)
{
let
principal
=
browser
.
contentBlockingAllowListPrincipal
;
ok
(
principal
"
Principal
is
set
"
)
;
if
(
type
=
=
"
content
"
)
{
ok
(
principal
.
isContentPrincipal
"
Is
content
principal
"
)
;
ok
(
principal
.
schemeIs
(
"
https
"
)
"
allowlist
content
principal
must
have
https
scheme
"
)
;
}
else
if
(
type
=
=
"
system
"
)
{
ok
(
principal
.
isSystemPrincipal
"
Is
system
principal
"
)
;
}
else
{
throw
new
Error
(
"
Unexpected
principal
type
"
)
;
}
is
(
origin
principal
.
origin
"
Correct
origin
"
)
;
}
add_task
(
async
test_contentPrincipalHTTPS
=
>
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
browser
=
>
{
checkAllowListPrincipal
(
browser
"
content
"
)
;
}
)
;
}
)
;
add_task
(
async
test_contentPrincipalHTTP
=
>
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
net
"
browser
=
>
{
ok
(
browser
.
contentPrincipal
.
isContentPrincipal
"
Should
have
content
principal
"
)
;
checkAllowListPrincipal
(
browser
"
content
"
"
https
:
/
/
example
.
net
"
)
;
}
)
;
}
)
;
add_task
(
async
test_systemPrincipal
=
>
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
preferences
"
browser
=
>
{
ok
(
browser
.
contentPrincipal
.
isSystemPrincipal
"
Should
have
system
principal
"
)
;
checkAllowListPrincipal
(
browser
"
system
"
)
;
}
)
;
}
)
;
add_task
(
async
test_privateBrowsing
=
>
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
win
.
gBrowser
"
https
:
/
/
example
.
com
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
ok
(
browser
.
contentPrincipal
.
isContentPrincipal
"
Should
have
content
principal
"
)
;
checkAllowListPrincipal
(
browser
"
content
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
test_TopLevelSandbox
=
>
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
/
browser
/
toolkit
/
components
/
antitracking
/
test
/
browser
/
sandboxed
.
html
"
browser
=
>
{
ok
(
browser
.
contentPrincipal
.
isNullPrincipal
"
Top
level
sandboxed
page
should
have
null
principal
"
)
;
checkAllowListPrincipal
(
browser
"
content
"
"
https
:
/
/
example
.
com
"
)
;
}
)
;
}
)
;
