"
use
strict
"
;
const
TEST_THIRD_PARTY_DOMAIN
=
TEST_DOMAIN_2
;
const
TEST_URI
=
TEST_DOMAIN
+
TEST_PATH
+
"
file_stripping
.
html
"
;
const
TEST_THIRD_PARTY_URI
=
TEST_THIRD_PARTY_DOMAIN
+
TEST_PATH
+
"
file_stripping
.
html
"
;
const
TEST_REDIRECT_URI
=
TEST_DOMAIN
+
TEST_PATH
+
"
redirect
.
sjs
"
;
const
TEST_QUERY_STRING
=
"
paramToStrip
=
1
"
;
function
observeChannel
(
uri
expected
)
{
return
TestUtils
.
topicObserved
(
"
http
-
on
-
before
-
connect
"
(
subject
data
)
=
>
{
let
channel
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
channelURI
=
channel
.
URI
;
if
(
channelURI
.
spec
.
startsWith
(
uri
)
)
{
is
(
channelURI
.
query
expected
"
The
loading
channel
has
the
expected
query
string
.
"
)
;
return
true
;
}
return
false
;
}
)
;
}
async
function
verifyQueryString
(
browser
expected
)
{
await
SpecialPowers
.
spawn
(
browser
[
expected
]
expected
=
>
{
let
search
=
content
.
location
.
search
.
slice
(
1
)
;
is
(
search
expected
"
The
query
string
is
correct
.
"
)
;
}
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
strip_list
"
"
paramToStrip
"
]
[
"
privacy
.
query_stripping
.
redirect
"
true
]
[
"
privacy
.
query_stripping
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
doTestsForTabOpen
(
)
{
let
testURI
=
TEST_URI
+
"
?
"
+
TEST_QUERY_STRING
;
let
networkPromise
=
observeChannel
(
TEST_URI
"
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testURI
)
;
await
verifyQueryString
(
tab
.
linkedBrowser
"
"
)
;
await
networkPromise
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
testURI
)
;
networkPromise
=
observeChannel
(
TEST_URI
TEST_QUERY_STRING
)
;
gProtectionsHandler
.
disableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
tab
.
linkedBrowser
TEST_QUERY_STRING
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
networkPromise
=
observeChannel
(
TEST_URI
TEST_QUERY_STRING
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testURI
)
;
await
networkPromise
;
await
verifyQueryString
(
tab
.
linkedBrowser
TEST_QUERY_STRING
)
;
networkPromise
=
observeChannel
(
TEST_URI
"
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
TEST_URI
)
;
gProtectionsHandler
.
enableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
tab
.
linkedBrowser
"
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
doTestsForWindowOpen
(
)
{
let
testURI
=
TEST_THIRD_PARTY_URI
+
"
?
"
+
TEST_QUERY_STRING
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
url
=
>
{
return
url
.
startsWith
(
TEST_THIRD_PARTY_URI
)
;
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
testURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
window
-
open
"
url
}
"
*
"
)
;
}
)
;
await
networkPromise
;
let
newTab
=
await
newTabPromise
;
await
verifyQueryString
(
newTab
.
linkedBrowser
"
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
newTab
.
linkedBrowser
false
testURI
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
gProtectionsHandler
.
disableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
newTab
.
linkedBrowser
TEST_QUERY_STRING
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
url
=
>
{
return
url
.
startsWith
(
TEST_THIRD_PARTY_URI
)
;
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
testURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
window
-
open
"
url
}
"
*
"
)
;
}
)
;
await
networkPromise
;
newTab
=
await
newTabPromise
;
await
verifyQueryString
(
newTab
.
linkedBrowser
TEST_QUERY_STRING
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
newTab
.
linkedBrowser
false
TEST_THIRD_PARTY_URI
)
;
gProtectionsHandler
.
enableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
newTab
.
linkedBrowser
"
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
)
;
}
)
;
add_task
(
async
function
doTestsForLinkClick
(
)
{
let
testURI
=
TEST_THIRD_PARTY_URI
+
"
?
"
+
TEST_QUERY_STRING
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_THIRD_PARTY_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testURI
]
async
uri
=
>
{
let
link
=
content
.
document
.
createElement
(
"
a
"
)
;
link
.
setAttribute
(
"
href
"
uri
)
;
link
.
textContent
=
"
Link
"
;
content
.
document
.
body
.
appendChild
(
link
)
;
link
.
click
(
)
;
}
)
;
await
networkPromise
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
"
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
testURI
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
gProtectionsHandler
.
disableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
browser
TEST_QUERY_STRING
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
testURI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testURI
]
async
uri
=
>
{
let
link
=
content
.
document
.
createElement
(
"
a
"
)
;
link
.
setAttribute
(
"
href
"
uri
)
;
link
.
textContent
=
"
Link
"
;
content
.
document
.
body
.
appendChild
(
link
)
;
link
.
click
(
)
;
}
)
;
await
networkPromise
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
TEST_QUERY_STRING
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_THIRD_PARTY_URI
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
gProtectionsHandler
.
enableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
}
)
;
add_task
(
async
function
doTestsForScriptNavigation
(
)
{
let
testURI
=
TEST_THIRD_PARTY_URI
+
"
?
"
+
TEST_QUERY_STRING
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_THIRD_PARTY_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
networkPromise
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
"
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
testURI
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
gProtectionsHandler
.
disableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
browser
TEST_QUERY_STRING
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
testURI
)
;
await
SpecialPowers
.
spawn
(
browser
[
testURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
networkPromise
;
await
locationChangePromise
;
await
verifyQueryString
(
browser
TEST_QUERY_STRING
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_THIRD_PARTY_URI
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
gProtectionsHandler
.
enableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
}
)
;
add_task
(
async
function
doTestsForRedirect
(
)
{
let
testURI
=
{
TEST_REDIRECT_URI
}
?
{
TEST_THIRD_PARTY_URI
}
?
{
TEST_QUERY_STRING
}
;
let
resultURI
=
TEST_THIRD_PARTY_URI
;
let
resultURIWithQuery
=
{
TEST_THIRD_PARTY_URI
}
?
{
TEST_QUERY_STRING
}
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URI
)
;
let
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
resultURI
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
testURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
networkPromise
;
await
locationChangePromise
;
await
verifyQueryString
(
tab
.
linkedBrowser
"
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
resultURIWithQuery
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
gProtectionsHandler
.
disableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
TEST_QUERY_STRING
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URI
)
;
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
resultURIWithQuery
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
testURI
]
async
url
=
>
{
content
.
postMessage
(
{
type
:
"
script
"
url
}
"
*
"
)
;
}
)
;
await
networkPromise
;
await
locationChangePromise
;
await
verifyQueryString
(
tab
.
linkedBrowser
TEST_QUERY_STRING
)
;
networkPromise
=
observeChannel
(
TEST_THIRD_PARTY_URI
"
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
resultURI
)
;
gProtectionsHandler
.
enableForCurrentPage
(
)
;
await
browserLoadedPromise
;
await
networkPromise
;
await
verifyQueryString
(
tab
.
linkedBrowser
"
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
