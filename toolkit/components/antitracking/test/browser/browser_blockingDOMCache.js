requestLongerTimeout
(
2
)
;
AntiTracking
.
runTest
(
"
DOM
Cache
"
async
_
=
>
{
await
caches
.
open
(
"
wow
"
)
.
then
(
_
=
>
{
ok
(
false
"
DOM
Cache
cannot
be
used
!
"
)
;
}
_
=
>
{
ok
(
true
"
DOM
Cache
cannot
be
used
!
"
)
;
}
)
;
}
async
_
=
>
{
await
caches
.
open
(
"
wow
"
)
.
then
(
_
=
>
{
ok
(
true
"
DOM
Cache
can
be
used
!
"
)
;
}
_
=
>
{
ok
(
false
"
DOM
Cache
can
be
used
!
"
)
;
}
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
)
;
AntiTracking
.
runTest
(
"
DOM
Cache
and
Storage
Access
API
"
async
_
=
>
{
await
noStorageAccessInitially
(
)
;
await
caches
.
open
(
"
wow
"
)
.
then
(
_
=
>
{
ok
(
false
"
DOM
Cache
cannot
be
used
!
"
)
;
}
_
=
>
{
ok
(
true
"
DOM
Cache
cannot
be
used
!
"
)
;
}
)
;
await
callRequestStorageAccess
(
)
;
await
caches
.
open
(
"
wow
"
)
.
then
(
_
=
>
{
ok
(
true
"
DOM
Cache
can
be
used
!
"
)
;
}
_
=
>
{
ok
(
false
"
DOM
Cache
can
be
used
!
"
)
;
}
)
;
}
async
_
=
>
{
await
noStorageAccessInitially
(
)
;
await
caches
.
open
(
"
wow
"
)
.
then
(
_
=
>
{
ok
(
true
"
DOM
Cache
can
be
used
!
"
)
;
}
_
=
>
{
ok
(
false
"
DOM
Cache
can
be
used
!
"
)
;
}
)
;
await
callRequestStorageAccess
(
)
;
await
caches
.
open
(
"
wow
"
)
.
then
(
_
=
>
{
ok
(
true
"
DOM
Cache
can
be
used
!
"
)
;
}
_
=
>
{
ok
(
false
"
DOM
Cache
can
be
used
!
"
)
;
}
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
null
false
false
)
;
