"
use
strict
"
;
const
TEST_URI
=
TEST_DOMAIN
+
TEST_PATH
+
"
file_stripping
.
html
"
;
const
QUERY_STRIPPING_COUNT
=
"
QUERY_STRIPPING_COUNT
"
;
const
QUERY_STRIPPING_PARAM_COUNT
=
"
QUERY_STRIPPING_PARAM_COUNT
"
;
const
QUERY_STRIPPING_COUNT_BY_PARAM
=
"
QUERY_STRIPPING_COUNT_BY_PARAM
"
;
const
histogramLabels
=
Services
.
telemetry
.
getCategoricalLabels
(
)
.
QUERY_STRIPPING_COUNT_BY_PARAM
;
async
function
clearTelemetry
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
2000
)
)
;
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
true
)
;
Services
.
telemetry
.
getHistogramById
(
QUERY_STRIPPING_COUNT
)
.
clear
(
)
;
Services
.
telemetry
.
getHistogramById
(
QUERY_STRIPPING_PARAM_COUNT
)
.
clear
(
)
;
Services
.
telemetry
.
getHistogramById
(
QUERY_STRIPPING_COUNT_BY_PARAM
)
.
clear
(
)
;
let
isCleared
=
(
)
=
>
{
let
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
.
content
;
return
(
!
histograms
|
|
(
!
histograms
[
QUERY_STRIPPING_COUNT
]
&
&
!
histograms
[
QUERY_STRIPPING_PARAM_COUNT
]
&
&
!
histograms
.
QUERY_STRIPPING_COUNT_BY_PARAM
)
)
;
}
;
if
(
!
isCleared
(
)
)
{
await
TestUtils
.
waitForCondition
(
isCleared
)
;
}
ok
(
true
"
Telemetry
has
been
cleared
.
"
)
;
}
async
function
verifyQueryString
(
browser
expected
)
{
await
SpecialPowers
.
spawn
(
browser
[
expected
]
expected
=
>
{
let
search
=
content
.
location
.
search
.
slice
(
1
)
;
is
(
search
expected
"
The
query
string
is
correct
.
"
)
;
}
)
;
}
function
testTelemetry
(
queryParamToCount
)
{
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
QUERY_STRIPPING_COUNT_BY_PARAM
)
;
let
snapshot
=
histogram
.
snapshot
(
)
;
let
indexToCount
=
{
}
;
Object
.
entries
(
queryParamToCount
)
.
forEach
(
(
[
key
value
]
)
=
>
{
let
index
=
histogramLabels
.
indexOf
(
param_
{
key
}
)
;
if
(
SpecialPowers
.
isDebugBuild
)
{
indexToCount
[
index
]
=
value
*
2
;
}
else
{
indexToCount
[
index
]
=
value
;
}
}
)
;
for
(
let
[
i
val
]
of
Object
.
entries
(
snapshot
.
values
)
)
{
let
expectedCount
=
indexToCount
[
i
]
|
|
0
;
is
(
val
expectedCount
Histogram
{
QUERY_STRIPPING_COUNT_BY_PARAM
}
should
have
expected
value
for
label
{
histogramLabels
[
i
]
}
.
)
;
}
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
enabled
"
true
]
[
"
privacy
.
query_stripping
.
strip_list
"
"
foo
mc_eid
oly_anon_id
oly_enc_id
__s
vero_id
_hsenc
mkt_tok
fbclid
"
]
]
}
)
;
await
clearTelemetry
(
)
;
}
)
;
add_task
(
async
function
test_queryParamCountTelemetry
(
)
{
info
(
"
Test
with
a
query
params
to
be
stripped
and
recoded
in
telemetry
.
"
)
;
let
url
=
new
URL
(
TEST_URI
)
;
url
.
searchParams
.
set
(
"
mc_eid
"
"
myValue
"
)
;
await
BrowserTestUtils
.
withNewTab
(
url
.
href
async
browser
=
>
{
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
testTelemetry
(
{
mc_eid
:
1
}
)
;
await
BrowserTestUtils
.
withNewTab
(
url
.
href
async
browser
=
>
{
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
testTelemetry
(
{
mc_eid
:
2
}
)
;
url
=
new
URL
(
TEST_URI
)
;
url
.
searchParams
.
set
(
"
fbclid
"
"
myValue2
"
)
;
url
.
searchParams
.
set
(
"
mkt_tok
"
"
myValue3
"
)
;
url
.
searchParams
.
set
(
"
bar
"
"
foo
"
)
;
info
(
"
Test
with
multiple
query
params
to
be
stripped
.
"
)
;
await
BrowserTestUtils
.
withNewTab
(
url
.
href
async
browser
=
>
{
await
verifyQueryString
(
browser
"
bar
=
foo
"
)
;
}
)
;
testTelemetry
(
{
mc_eid
:
2
fbclid
:
1
mkt_tok
:
1
}
)
;
info
(
"
Test
with
query
param
on
the
strip
-
list
which
should
not
be
recoded
in
telemetry
.
"
)
;
url
=
new
URL
(
TEST_URI
)
;
url
.
searchParams
.
set
(
"
foo
"
"
bar
"
)
;
url
.
searchParams
.
set
(
"
__s
"
"
myValue4
"
)
;
await
BrowserTestUtils
.
withNewTab
(
url
.
href
async
browser
=
>
{
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
testTelemetry
(
{
mc_eid
:
2
fbclid
:
1
mkt_tok
:
1
__s
:
1
}
)
;
url
=
new
URL
(
TEST_URI
)
;
url
.
searchParams
.
set
(
"
foo
"
"
bar
"
)
;
await
BrowserTestUtils
.
withNewTab
(
url
.
href
async
browser
=
>
{
await
verifyQueryString
(
browser
"
"
)
;
}
)
;
testTelemetry
(
{
mc_eid
:
2
fbclid
:
1
mkt_tok
:
1
__s
:
1
}
)
;
await
clearTelemetry
(
)
;
}
)
;
