"
use
strict
"
;
const
TEST_THIRD_PARTY_DOMAIN
=
TEST_DOMAIN_2
;
const
TEST_URI
=
TEST_DOMAIN
+
TEST_PATH
+
"
file_stripping
.
html
"
;
const
TEST_THIRD_PARTY_URI
=
TEST_THIRD_PARTY_DOMAIN
+
TEST_PATH
+
"
file_stripping
.
html
"
;
async
function
verifyQueryString
(
browser
expected
)
{
await
SpecialPowers
.
spawn
(
browser
[
expected
]
expected
=
>
{
let
search
=
content
.
location
.
search
.
slice
(
1
)
;
is
(
search
expected
"
The
query
string
is
correct
.
"
)
;
}
)
;
}
let
listService
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
strip_list
"
"
paramToStrip1
paramToStrip2
"
]
[
"
privacy
.
query_stripping
.
redirect
"
true
]
[
"
privacy
.
query_stripping
.
enabled
"
true
]
[
"
privacy
.
query_stripping
.
listService
.
logLevel
"
"
Debug
"
]
[
"
privacy
.
query_stripping
.
strip_on_share
.
enabled
"
false
]
]
}
)
;
listService
=
Cc
[
"
mozilla
.
org
/
query
-
stripping
-
list
-
service
;
1
"
]
.
getService
(
Ci
.
nsIURLQueryStrippingListService
)
;
await
listService
.
testWaitForInit
(
)
;
}
)
;
add_task
(
async
function
testRedirectWithStrippingMultipleTimes
(
)
{
info
(
"
Start
testing
query
stripping
for
redirect
link
with
multiple
query
paramaters
"
)
;
const
NESTED_QUERY
=
"
paramToStrip1
=
123
&
paramToKeep
=
123
"
;
const
NESTED_QUERY_STRIPPED
=
"
paramToKeep
=
123
"
;
const
INITIAL_QUERY
=
"
paramToStrip2
=
123
"
;
let
encodedURI
=
encodeURIComponent
(
{
TEST_THIRD_PARTY_URI
}
?
{
NESTED_QUERY
}
)
;
let
testThirdPartyURI
=
{
TEST_URI
}
?
redirect
=
{
encodedURI
}
&
{
INITIAL_QUERY
}
;
let
testThirdPartyURIStrippedQuery
=
redirect
=
{
encodedURI
}
;
let
targetURI
=
{
TEST_THIRD_PARTY_URI
}
?
{
NESTED_QUERY_STRIPPED
}
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testThirdPartyURI
)
;
let
browser
=
tab
.
linkedBrowser
;
await
verifyQueryString
(
browser
testThirdPartyURIStrippedQuery
)
;
let
targetURLLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
targetURI
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
url
=
new
URL
(
content
.
location
)
;
let
value
=
url
.
searchParams
.
get
(
"
redirect
"
)
;
let
decodedValue
=
decodeURIComponent
(
value
)
;
content
.
location
.
href
=
decodedValue
;
}
)
;
await
targetURLLoadedPromise
;
await
verifyQueryString
(
browser
NESTED_QUERY_STRIPPED
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
