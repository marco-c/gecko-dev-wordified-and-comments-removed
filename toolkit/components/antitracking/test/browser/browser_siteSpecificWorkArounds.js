AntiTracking
.
runTest
(
"
localStorage
with
a
tracker
that
is
whitelisted
via
a
pref
"
async
_
=
>
{
let
shouldThrow
=
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
=
=
SpecialPowers
.
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
;
let
hasThrown
;
try
{
localStorage
.
foo
=
42
;
hasThrown
=
false
;
}
catch
(
e
)
{
hasThrown
=
true
;
}
is
(
hasThrown
shouldThrow
"
LocalStorage
is
allowed
"
)
;
}
async
_
=
>
{
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
is
allowed
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
[
[
"
urlclassifier
.
trackingAnnotationSkipURLs
"
"
tracking
.
example
.
org
"
]
]
false
false
0
false
)
;
AntiTracking
.
runTest
(
"
localStorage
with
a
tracker
that
is
whitelisted
via
a
fancy
pref
"
async
_
=
>
{
let
shouldThrow
=
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
=
=
SpecialPowers
.
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
;
let
hasThrown
;
try
{
localStorage
.
foo
=
42
;
hasThrown
=
false
;
}
catch
(
e
)
{
hasThrown
=
true
;
}
is
(
hasThrown
shouldThrow
"
LocalStorage
is
allowed
"
)
;
}
async
_
=
>
{
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
is
allowed
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
[
[
"
urlclassifier
.
trackingAnnotationSkipURLs
"
"
foobar
.
example
*
.
example
.
org
baz
.
example
"
]
]
false
false
0
false
)
;
AntiTracking
.
runTest
(
"
localStorage
with
a
tracker
that
is
whitelisted
via
a
misconfigured
pref
"
async
_
=
>
{
try
{
localStorage
.
foo
=
42
;
ok
(
false
"
LocalStorage
cannot
be
used
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
LocalStorage
cannot
be
used
!
"
)
;
is
(
e
.
name
"
SecurityError
"
"
We
want
a
security
error
message
.
"
)
;
}
}
async
_
=
>
{
localStorage
.
foo
=
42
;
ok
(
true
"
LocalStorage
is
allowed
"
)
;
}
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
[
[
"
urlclassifier
.
trackingAnnotationSkipURLs
"
"
*
.
tracking
.
example
.
org
"
]
]
false
false
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_TRACKER
false
)
;
