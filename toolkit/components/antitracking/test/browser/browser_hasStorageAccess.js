var
settings
=
[
{
name
:
"
Test
whether
same
-
origin
non
-
tracker
frame
has
storage
access
"
topPage
:
TEST_TOP_PAGE_HTTPS
thirdPartyPage
:
TEST_DOMAIN_HTTPS
+
TEST_PATH
+
"
3rdParty
.
html
"
}
{
name
:
"
Test
whether
3rd
-
party
non
-
tracker
frame
has
storage
access
"
topPage
:
TEST_TOP_PAGE_HTTPS
thirdPartyPage
:
TEST_4TH_PARTY_PAGE_HTTPS
}
{
name
:
"
Test
whether
3rd
-
party
non
-
tracker
frame
has
storage
access
when
storage
permission
is
granted
before
"
topPage
:
TEST_TOP_PAGE_HTTPS
thirdPartyPage
:
TEST_4TH_PARTY_PAGE_HTTPS
setup
:
(
)
=
>
{
let
type
=
"
3rdPartyFrameStorage
^
https
:
/
/
not
-
tracking
.
example
.
com
"
;
let
permission
=
Services
.
perms
.
ALLOW_ACTION
;
let
expireType
=
Services
.
perms
.
EXPIRE_SESSION
;
PermissionTestUtils
.
add
(
TEST_DOMAIN_HTTPS
type
permission
expireType
0
)
;
registerCleanupFunction
(
_
=
>
{
Services
.
perms
.
removeAll
(
)
;
}
)
;
}
}
{
name
:
"
Test
whether
3rd
-
party
tracker
frame
has
storage
access
"
topPage
:
TEST_TOP_PAGE_HTTPS
thirdPartyPage
:
TEST_3RD_PARTY_PAGE
}
{
name
:
"
Test
whether
3rd
-
party
tracker
frame
has
storage
access
when
storage
access
permission
is
granted
before
"
topPage
:
TEST_TOP_PAGE_HTTPS
thirdPartyPage
:
TEST_3RD_PARTY_PAGE
setup
:
(
)
=
>
{
let
type
=
"
3rdPartyFrameStorage
^
https
:
/
/
example
.
org
"
;
let
permission
=
Services
.
perms
.
ALLOW_ACTION
;
let
expireType
=
Services
.
perms
.
EXPIRE_SESSION
;
PermissionTestUtils
.
add
(
TEST_DOMAIN_HTTPS
type
permission
expireType
0
)
;
registerCleanupFunction
(
_
=
>
{
Services
.
perms
.
removeAll
(
)
;
}
)
;
}
}
{
name
:
"
Test
whether
same
-
site
3rd
-
party
tracker
frame
has
storage
access
"
topPage
:
TEST_TOP_PAGE_HTTPS
thirdPartyPage
:
TEST_ANOTHER_3RD_PARTY_PAGE_HTTPS
}
{
name
:
"
Test
whether
same
-
origin
3rd
-
party
tracker
frame
has
storage
access
"
topPage
:
TEST_ANOTHER_3RD_PARTY_DOMAIN_HTTPS
+
TEST_PATH
+
"
page
.
html
"
thirdPartyPage
:
TEST_ANOTHER_3RD_PARTY_PAGE_HTTPS
}
{
name
:
"
Test
whether
insecure
3rd
-
party
tracker
frame
has
storage
access
"
topPage
:
TEST_TOP_PAGE
+
TEST_PATH
+
"
page
.
html
"
thirdPartyPage
:
TEST_3RD_PARTY_PAGE_HTTP
}
]
;
var
testCases
=
[
{
behavior
:
BEHAVIOR_ACCEPT
hasStorageAccess
:
[
true
true
true
true
true
true
true
true
]
}
{
behavior
:
BEHAVIOR_REJECT_FOREIGN
hasStorageAccess
:
[
true
false
false
false
false
true
true
false
]
}
{
behavior
:
BEHAVIOR_REJECT
hasStorageAccess
:
[
false
false
false
false
false
false
false
false
]
}
{
behavior
:
BEHAVIOR_LIMIT_FOREIGN
hasStorageAccess
:
[
true
false
false
false
false
true
true
false
]
}
{
behavior
:
BEHAVIOR_REJECT_TRACKER
hasStorageAccess
:
[
true
true
true
false
false
true
true
false
]
}
{
behavior
:
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
hasStorageAccess
:
[
true
false
false
false
false
true
true
false
]
}
]
;
(
function
(
)
{
settings
.
forEach
(
setting
=
>
{
if
(
setting
.
setup
)
{
add_task
(
async
_
=
>
{
setting
.
setup
(
)
;
}
)
;
}
testCases
.
forEach
(
test
=
>
{
let
callback
=
test
.
hasStorageAccess
[
settings
.
indexOf
(
setting
)
]
?
async
_
=
>
{
await
hasStorageAccessInitially
(
)
;
}
:
async
_
=
>
{
await
noStorageAccessInitially
(
)
;
}
;
AntiTracking
.
_createTask
(
{
name
:
setting
.
name
cookieBehavior
:
test
.
behavior
allowList
:
false
callback
extraPrefs
:
[
[
"
privacy
.
partition
.
always_partition_third_party_non_cookie_storage
"
false
]
[
"
dom
.
storage_access
.
dont_grant_insecure_contexts
"
true
]
]
expectedBlockingNotifications
:
0
runInPrivateWindow
:
false
iframeSandbox
:
null
accessRemoval
:
null
callbackAfterRemoval
:
null
topPage
:
setting
.
topPage
thirdPartyPage
:
setting
.
thirdPartyPage
}
)
;
}
)
;
add_task
(
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
value
=
>
resolve
(
)
)
;
}
)
;
}
)
;
}
)
;
}
)
(
)
;
