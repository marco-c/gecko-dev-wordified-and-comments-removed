"
use
strict
"
;
let
exceptionListService
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
exception
-
list
-
service
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierExceptionListService
)
;
const
ALLOW_LIST_CATEGORY_MIGRATION_PREF
=
"
privacy
.
trackingprotection
.
allow_list
.
hasMigratedCategoryPrefs
"
;
const
CONTENT_BLOCKING_CATEGORY_PREF
=
"
browser
.
contentblocking
.
category
"
;
const
BASELINE_ALLOW_LIST_PREF
=
"
privacy
.
trackingprotection
.
allow_list
.
baseline
.
enabled
"
;
const
CONVENIENCE_ALLOW_LIST_PREF
=
"
privacy
.
trackingprotection
.
allow_list
.
convenience
.
enabled
"
;
function
cleanupTestPrefs
(
)
{
Services
.
prefs
.
clearUserPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
)
;
Services
.
prefs
.
clearUserPref
(
CONTENT_BLOCKING_CATEGORY_PREF
)
;
Services
.
prefs
.
clearUserPref
(
BASELINE_ALLOW_LIST_PREF
)
;
Services
.
prefs
.
clearUserPref
(
CONVENIENCE_ALLOW_LIST_PREF
)
;
}
add_task
(
async
function
test_migration_already_completed
(
)
{
info
(
"
Test
Branch
1
:
Migration
already
completed
"
)
;
Services
.
prefs
.
setBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
;
info
(
"
Triggering
migration
with
migration
pref
already
set
to
true
"
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
info
(
"
Verifying
that
migration
pref
remains
true
and
allow
list
prefs
unchanged
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
"
Migration
pref
should
remain
true
when
already
migrated
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
BASELINE_ALLOW_LIST_PREF
false
)
"
Baseline
allow
list
pref
should
remain
unchanged
when
already
migrated
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
false
)
"
Convenience
allow
list
pref
should
remain
unchanged
when
already
migrated
"
)
;
cleanupTestPrefs
(
)
;
}
)
;
add_task
(
async
function
test_migration_standard_category
(
)
{
info
(
"
Test
Branch
2
:
Content
blocking
category
is
'
standard
'
"
)
;
Services
.
prefs
.
setBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
;
Services
.
prefs
.
setStringPref
(
CONTENT_BLOCKING_CATEGORY_PREF
"
standard
"
)
;
Services
.
prefs
.
setBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
;
info
(
"
Triggering
migration
with
content
blocking
category
set
to
'
standard
'
"
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
info
(
"
Verifying
that
migration
pref
is
true
and
allow
list
prefs
unchanged
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
"
Migration
pref
should
be
set
to
true
when
content
blocking
category
is
standard
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
BASELINE_ALLOW_LIST_PREF
false
)
"
Baseline
allow
list
pref
should
remain
unchanged
when
content
blocking
category
is
standard
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
false
)
"
Convenience
allow
list
pref
should
remain
unchanged
when
content
blocking
category
is
standard
"
)
;
cleanupTestPrefs
(
)
;
}
)
;
add_task
(
async
function
test_migration_strict_category
(
)
{
info
(
"
Test
Branch
3
:
Content
blocking
category
is
'
strict
'
"
)
;
Services
.
prefs
.
setBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
;
Services
.
prefs
.
setStringPref
(
CONTENT_BLOCKING_CATEGORY_PREF
"
strict
"
)
;
Services
.
prefs
.
setBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
;
info
(
"
Triggering
migration
with
content
blocking
category
set
to
'
strict
'
"
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
info
(
"
Verifying
that
migration
pref
is
set
to
true
and
allow
list
prefs
are
disabled
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
"
Migration
pref
should
be
set
to
true
when
content
blocking
category
is
strict
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
"
Baseline
allow
list
pref
should
be
disabled
when
content
blocking
category
is
strict
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
"
Convenience
allow
list
pref
should
be
disabled
when
content
blocking
category
is
strict
"
)
;
cleanupTestPrefs
(
)
;
}
)
;
add_task
(
async
function
test_migration_custom_category
(
)
{
info
(
"
Test
Branch
3
:
Content
blocking
category
is
'
custom
'
"
)
;
Services
.
prefs
.
setBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
;
Services
.
prefs
.
setStringPref
(
CONTENT_BLOCKING_CATEGORY_PREF
"
custom
"
)
;
Services
.
prefs
.
setBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
;
info
(
"
Triggering
migration
with
content
blocking
category
set
to
'
custom
'
"
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
info
(
"
Verifying
that
migration
pref
is
set
to
true
and
allow
list
prefs
remain
disabled
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
"
Migration
pref
should
be
set
to
true
when
content
blocking
category
is
custom
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
"
Baseline
allow
list
pref
should
be
disabled
when
content
blocking
category
is
custom
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
"
Convenience
allow
list
pref
should
be
disabled
when
content
blocking
category
is
custom
"
)
;
cleanupTestPrefs
(
)
;
}
)
;
add_task
(
async
function
test_migration_mixed_pref_states
(
)
{
info
(
"
Test
Branch
3
:
Content
blocking
category
is
'
strict
'
with
mixed
pref
states
"
)
;
Services
.
prefs
.
setBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
;
Services
.
prefs
.
setStringPref
(
CONTENT_BLOCKING_CATEGORY_PREF
"
strict
"
)
;
Services
.
prefs
.
setBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
false
)
;
info
(
"
Triggering
migration
with
mixed
allow
list
pref
states
(
baseline
=
true
convenience
=
false
)
"
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
info
(
"
Verifying
that
migration
pref
is
set
to
true
and
both
allow
list
prefs
are
disabled
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
"
Migration
pref
should
be
set
to
true
when
content
blocking
category
is
strict
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
"
Baseline
allow
list
pref
should
be
disabled
regardless
of
initial
state
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
"
Convenience
allow
list
pref
should
be
disabled
regardless
of
initial
state
"
)
;
cleanupTestPrefs
(
)
;
}
)
;
add_task
(
async
function
test_migration_default_pref_values
(
)
{
info
(
"
Test
with
default
pref
values
(
no
prefs
set
)
"
)
;
info
(
"
Triggering
migration
with
default
content
blocking
category
(
'
standard
'
)
"
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
info
(
"
Verifying
that
migration
pref
is
set
to
true
and
allow
list
prefs
use
default
values
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
"
Migration
pref
should
be
set
to
true
when
content
blocking
category
is
standard
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
BASELINE_ALLOW_LIST_PREF
false
)
"
Baseline
allow
list
pref
should
remain
unchanged
when
content
blocking
category
is
standard
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
false
)
"
Convenience
allow
list
pref
should
remain
unchanged
when
content
blocking
category
is
standard
"
)
;
cleanupTestPrefs
(
)
;
}
)
;
add_task
(
async
function
test_migration_idempotency
(
)
{
info
(
"
Test
that
migration
is
idempotent
-
running
it
multiple
times
should
not
change
behavior
"
)
;
Services
.
prefs
.
setBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
;
Services
.
prefs
.
setStringPref
(
CONTENT_BLOCKING_CATEGORY_PREF
"
strict
"
)
;
Services
.
prefs
.
setBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
;
info
(
"
Triggering
migration
multiple
times
to
test
idempotency
"
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
exceptionListService
.
testRunCategoryPrefsMigration
(
)
;
info
(
"
Verifying
that
migration
pref
is
set
to
true
and
allow
list
prefs
are
disabled
after
multiple
calls
"
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
ALLOW_LIST_CATEGORY_MIGRATION_PREF
false
)
"
Migration
pref
should
be
set
to
true
after
multiple
calls
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
BASELINE_ALLOW_LIST_PREF
true
)
"
Baseline
allow
list
pref
should
be
disabled
after
multiple
calls
"
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
CONVENIENCE_ALLOW_LIST_PREF
true
)
"
Convenience
allow
list
pref
should
be
disabled
after
multiple
calls
"
)
;
cleanupTestPrefs
(
)
;
}
)
;
