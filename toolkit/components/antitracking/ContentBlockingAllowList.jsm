"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ContentBlockingAllowList
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
ContentBlockingAllowList
=
{
_observingLastPBContext
:
false
_maybeSetupLastPBContextObserver
(
)
{
if
(
!
this
.
_observingLastPBContext
)
{
this
.
_observer
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
last
-
pb
-
context
-
exited
"
)
{
Services
.
perms
.
removeByType
(
"
trackingprotection
-
pb
"
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
this
.
_observer
"
last
-
pb
-
context
-
exited
"
true
)
;
this
.
_observingLastPBContext
=
true
;
}
}
_basePrincipalForAntiTrackingCommon
(
browser
)
{
let
principal
=
browser
.
contentBlockingAllowListPrincipal
;
if
(
!
principal
|
|
!
principal
.
isContentPrincipal
)
{
return
null
;
}
return
principal
;
}
_permissionTypeFor
(
browser
)
{
return
PrivateBrowsingUtils
.
isBrowserPrivate
(
browser
)
?
"
trackingprotection
-
pb
"
:
"
trackingprotection
"
;
}
_expiryFor
(
browser
)
{
return
PrivateBrowsingUtils
.
isBrowserPrivate
(
browser
)
?
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
:
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
;
}
canHandle
(
browser
)
{
return
this
.
_basePrincipalForAntiTrackingCommon
(
browser
)
!
=
null
;
}
add
(
browser
)
{
this
.
_maybeSetupLastPBContextObserver
(
)
;
let
prin
=
this
.
_basePrincipalForAntiTrackingCommon
(
browser
)
;
let
type
=
this
.
_permissionTypeFor
(
browser
)
;
let
expire
=
this
.
_expiryFor
(
browser
)
;
Services
.
perms
.
addFromPrincipal
(
prin
type
Services
.
perms
.
ALLOW_ACTION
expire
)
;
}
remove
(
browser
)
{
let
prin
=
this
.
_basePrincipalForAntiTrackingCommon
(
browser
)
;
let
type
=
this
.
_permissionTypeFor
(
browser
)
;
Services
.
perms
.
removeFromPrincipal
(
prin
type
)
;
}
includes
(
browser
)
{
let
prin
=
this
.
_basePrincipalForAntiTrackingCommon
(
browser
)
;
let
type
=
this
.
_permissionTypeFor
(
browser
)
;
return
(
Services
.
perms
.
testExactPermissionFromPrincipal
(
prin
type
)
=
=
Services
.
perms
.
ALLOW_ACTION
)
;
}
}
;
