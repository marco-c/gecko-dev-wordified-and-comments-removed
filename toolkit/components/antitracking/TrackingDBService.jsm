"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
{
Sqlite
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Sqlite
.
jsm
"
)
;
const
SCHEMA_VERSION
=
1
;
XPCOMUtils
.
defineLazyGetter
(
this
"
DB_PATH
"
function
(
)
{
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
protections
.
sqlite
"
)
;
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AsyncShutdown
"
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
)
;
const
SQL
=
{
createEvents
:
"
CREATE
TABLE
events
(
"
+
"
id
INTEGER
PRIMARY
KEY
"
+
"
type
INTEGER
NOT
NULL
"
+
"
count
INTEGER
NOT
NULL
"
+
"
timestamp
DATE
"
+
"
)
;
"
addEvent
:
"
INSERT
INTO
events
(
type
count
timestamp
)
"
+
"
VALUES
(
:
type
1
date
(
:
date
)
)
;
"
incrementEvent
:
"
UPDATE
events
"
+
"
SET
count
=
count
+
1
"
+
"
WHERE
id
=
:
id
;
"
selectByTypeAndDate
:
"
SELECT
*
FROM
events
"
+
"
WHERE
type
=
:
type
"
+
"
AND
timestamp
=
date
(
:
date
)
;
"
deleteEventsRecords
:
"
DELETE
FROM
events
;
"
removeRecordsSince
:
"
DELETE
FROM
events
WHERE
timestamp
>
=
date
(
:
date
)
;
"
}
;
async
function
createDatabase
(
db
)
{
await
db
.
execute
(
SQL
.
createEvents
)
;
}
async
function
removeAllRecords
(
db
)
{
await
db
.
execute
(
SQL
.
deleteEventsRecords
)
;
}
async
function
removeRecordsSince
(
db
date
)
{
await
db
.
execute
(
SQL
.
removeRecordsSince
{
date
}
)
;
}
this
.
TrackingDBService
=
function
(
)
{
this
.
_initPromise
=
this
.
_initialize
(
)
;
}
;
TrackingDBService
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
3c9c43b6
-
09eb
-
4ed2
-
9b87
-
e29f4221eef0
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsITrackingDBService
]
)
_xpcom_factory
:
XPCOMUtils
.
generateSingletonFactory
(
TrackingDBService
)
_db
:
null
async
ensureDB
(
)
{
await
this
.
_initPromise
;
return
this
.
_db
;
}
async
_initialize
(
)
{
let
db
=
await
Sqlite
.
openConnection
(
{
path
:
DB_PATH
}
)
;
try
{
let
dbVersion
=
parseInt
(
await
db
.
getSchemaVersion
(
)
)
;
if
(
dbVersion
=
=
=
0
)
{
await
createDatabase
(
db
)
;
}
else
if
(
dbVersion
<
SCHEMA_VERSION
)
{
}
await
db
.
setSchemaVersion
(
SCHEMA_VERSION
)
;
}
catch
(
e
)
{
await
db
.
close
(
)
;
throw
e
;
}
AsyncShutdown
.
profileBeforeChange
.
addBlocker
(
"
TrackingDBService
:
Shutting
down
the
content
blocking
database
.
"
(
)
=
>
this
.
_shutdown
(
)
)
;
this
.
_db
=
db
;
}
async
_shutdown
(
)
{
let
db
=
await
this
.
ensureDB
(
)
;
await
db
.
close
(
)
;
}
_readAsyncStream
(
stream
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
let
result
=
"
"
;
let
source
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIBinaryInputStream
)
;
source
.
setInputStream
(
stream
)
;
function
readData
(
)
{
try
{
result
+
=
source
.
readBytes
(
source
.
available
(
)
)
;
stream
.
asyncWait
(
readData
0
0
Services
.
tm
.
currentThread
)
;
}
catch
(
e
)
{
if
(
e
.
result
=
=
Cr
.
NS_BASE_STREAM_CLOSED
)
{
resolve
(
result
)
;
}
else
{
reject
(
e
)
;
}
}
}
stream
.
asyncWait
(
readData
0
0
Services
.
tm
.
currentThread
)
;
}
)
;
}
async
recordContentBlockingLog
(
inputStream
)
{
let
json
=
await
this
.
_readAsyncStream
(
inputStream
)
;
await
this
.
saveEvents
(
json
)
;
}
identifyType
(
events
)
{
let
result
=
null
;
let
isTracker
=
false
;
for
(
let
[
state
blocked
]
of
events
)
{
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_LOADED_TRACKING_CONTENT
)
{
isTracker
=
true
;
}
if
(
blocked
)
{
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_TRACKING_CONTENT
)
{
result
=
Ci
.
nsITrackingDBService
.
TRACKERS_ID
;
}
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_FINGERPRINTING_CONTENT
)
{
result
=
Ci
.
nsITrackingDBService
.
FINGERPRINTERS_ID
;
}
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_CRYPTOMINING_CONTENT
)
{
result
=
Ci
.
nsITrackingDBService
.
CRYPTOMINERS_ID
;
}
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_TRACKER
)
{
result
=
Ci
.
nsITrackingDBService
.
TRACKING_COOKIES_ID
;
}
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_BY_PERMISSION
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_ALL
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_FOREIGN
)
{
result
=
Ci
.
nsITrackingDBService
.
OTHER_COOKIES_BLOCKED_ID
;
}
}
}
if
(
result
=
=
Ci
.
nsITrackingDBService
.
OTHER_COOKIES_BLOCKED_ID
&
&
isTracker
)
{
result
=
Ci
.
nsITrackingDBService
.
TRACKING_COOKIES_ID
;
}
return
result
;
}
async
saveEvents
(
data
)
{
let
db
=
await
this
.
ensureDB
(
)
;
let
log
=
JSON
.
parse
(
data
)
;
try
{
await
db
.
executeTransaction
(
async
(
)
=
>
{
for
(
let
thirdParty
in
log
)
{
let
type
=
this
.
identifyType
(
log
[
thirdParty
]
)
;
if
(
type
)
{
let
today
=
new
Date
(
)
.
toISOString
(
)
.
split
(
"
T
"
)
[
0
]
;
let
row
=
await
db
.
executeCached
(
SQL
.
selectByTypeAndDate
{
type
date
:
today
}
)
;
let
todayEntry
=
row
[
0
]
;
if
(
todayEntry
)
{
let
id
=
todayEntry
.
getResultByName
(
"
id
"
)
;
await
db
.
executeCached
(
SQL
.
incrementEvent
{
id
}
)
;
}
else
{
await
db
.
executeCached
(
SQL
.
addEvent
{
type
date
:
today
}
)
;
}
}
}
}
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
async
clearAll
(
)
{
let
db
=
await
this
.
ensureDB
(
)
;
await
removeAllRecords
(
db
)
;
}
async
clearSince
(
date
)
{
let
db
=
await
this
.
ensureDB
(
)
;
await
removeRecordsSince
(
db
date
)
;
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
TrackingDBService
"
]
;
