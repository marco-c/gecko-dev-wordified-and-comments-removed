"
use
strict
"
;
const
{
ComponentUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ComponentUtils
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
{
Sqlite
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Sqlite
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
SCHEMA_VERSION
=
1
;
const
TRACKERS_BLOCKED_COUNT
=
"
contentblocking
.
trackers_blocked_count
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
DB_PATH
"
function
(
)
{
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
protections
.
sqlite
"
)
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
social_enabled
"
"
privacy
.
socialtracking
.
block_cookies
.
enabled
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
milestoneMessagingEnabled
"
"
browser
.
contentblocking
.
cfr
-
milestone
.
enabled
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
milestones
"
"
browser
.
contentblocking
.
cfr
-
milestone
.
milestones
"
"
[
]
"
null
JSON
.
parse
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
oldMilestone
"
"
browser
.
contentblocking
.
cfr
-
milestone
.
milestone
-
achieved
"
0
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
MILESTONE_UPDATE_INTERVAL
"
"
browser
.
contentblocking
.
cfr
-
milestone
.
update
-
interval
"
24
*
60
*
60
*
1000
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AsyncShutdown
:
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
DeferredTask
:
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
}
)
;
const
SQL
=
{
createEvents
:
"
CREATE
TABLE
events
(
"
+
"
id
INTEGER
PRIMARY
KEY
"
+
"
type
INTEGER
NOT
NULL
"
+
"
count
INTEGER
NOT
NULL
"
+
"
timestamp
DATE
"
+
"
)
;
"
addEvent
:
"
INSERT
INTO
events
(
type
count
timestamp
)
"
+
"
VALUES
(
:
type
1
date
(
:
date
)
)
;
"
incrementEvent
:
"
UPDATE
events
SET
count
=
count
+
1
WHERE
id
=
:
id
;
"
selectByTypeAndDate
:
"
SELECT
*
FROM
events
"
+
"
WHERE
type
=
:
type
"
+
"
AND
timestamp
=
date
(
:
date
)
;
"
deleteEventsRecords
:
"
DELETE
FROM
events
;
"
removeRecordsSince
:
"
DELETE
FROM
events
WHERE
timestamp
>
=
date
(
:
date
)
;
"
selectByDateRange
:
"
SELECT
*
FROM
events
"
+
"
WHERE
timestamp
BETWEEN
date
(
:
dateFrom
)
AND
date
(
:
dateTo
)
;
"
sumAllEvents
:
"
SELECT
sum
(
count
)
FROM
events
;
"
getEarliestDate
:
"
SELECT
timestamp
FROM
events
ORDER
BY
timestamp
ASC
LIMIT
1
;
"
}
;
async
function
createDatabase
(
db
)
{
await
db
.
execute
(
SQL
.
createEvents
)
;
}
async
function
removeAllRecords
(
db
)
{
await
db
.
execute
(
SQL
.
deleteEventsRecords
)
;
}
async
function
removeRecordsSince
(
db
date
)
{
await
db
.
execute
(
SQL
.
removeRecordsSince
{
date
}
)
;
}
this
.
TrackingDBService
=
function
(
)
{
this
.
_initPromise
=
this
.
_initialize
(
)
;
}
;
TrackingDBService
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
3c9c43b6
-
09eb
-
4ed2
-
9b87
-
e29f4221eef0
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsITrackingDBService
"
]
)
_xpcom_factory
:
ComponentUtils
.
generateSingletonFactory
(
TrackingDBService
)
_db
:
null
waitingTasks
:
new
Set
(
)
finishedShutdown
:
true
async
ensureDB
(
)
{
await
this
.
_initPromise
;
return
this
.
_db
;
}
async
_initialize
(
)
{
let
db
=
await
Sqlite
.
openConnection
(
{
path
:
DB_PATH
}
)
;
try
{
let
dbVersion
=
parseInt
(
await
db
.
getSchemaVersion
(
)
)
;
if
(
dbVersion
=
=
=
0
)
{
await
createDatabase
(
db
)
;
}
else
if
(
dbVersion
<
SCHEMA_VERSION
)
{
}
await
db
.
setSchemaVersion
(
SCHEMA_VERSION
)
;
}
catch
(
e
)
{
await
db
.
close
(
)
;
throw
e
;
}
AsyncShutdown
.
profileBeforeChange
.
addBlocker
(
"
TrackingDBService
:
Shutting
down
the
content
blocking
database
.
"
(
)
=
>
this
.
_shutdown
(
)
)
;
this
.
finishedShutdown
=
false
;
this
.
_db
=
db
;
}
async
_shutdown
(
)
{
let
db
=
await
this
.
ensureDB
(
)
;
this
.
finishedShutdown
=
true
;
await
Promise
.
all
(
Array
.
from
(
this
.
waitingTasks
task
=
>
task
.
finalize
(
)
)
)
;
await
db
.
close
(
)
;
}
async
recordContentBlockingLog
(
data
)
{
if
(
this
.
finishedShutdown
)
{
return
;
}
let
task
=
new
DeferredTask
(
async
(
)
=
>
{
try
{
await
this
.
saveEvents
(
data
)
;
}
finally
{
this
.
waitingTasks
.
delete
(
task
)
;
}
}
0
)
;
task
.
arm
(
)
;
this
.
waitingTasks
.
add
(
task
)
;
}
identifyType
(
events
)
{
let
result
=
null
;
let
isTracker
=
false
;
for
(
let
[
state
blocked
]
of
events
)
{
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_LOADED_LEVEL_1_TRACKING_CONTENT
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_LOADED_LEVEL_2_TRACKING_CONTENT
)
{
isTracker
=
true
;
}
if
(
blocked
)
{
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_FINGERPRINTING_CONTENT
)
{
result
=
Ci
.
nsITrackingDBService
.
FINGERPRINTERS_ID
;
}
else
if
(
social_enabled
&
&
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_SOCIALTRACKER
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_SOCIALTRACKING_CONTENT
)
)
{
result
=
Ci
.
nsITrackingDBService
.
SOCIAL_ID
;
}
else
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_TRACKING_CONTENT
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_SOCIALTRACKING_CONTENT
)
{
result
=
Ci
.
nsITrackingDBService
.
TRACKERS_ID
;
}
else
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_TRACKER
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_SOCIALTRACKER
)
{
result
=
Ci
.
nsITrackingDBService
.
TRACKING_COOKIES_ID
;
}
else
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_BY_PERMISSION
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_ALL
|
|
state
&
Ci
.
nsIWebProgressListener
.
STATE_COOKIES_BLOCKED_FOREIGN
)
{
result
=
Ci
.
nsITrackingDBService
.
OTHER_COOKIES_BLOCKED_ID
;
}
else
if
(
state
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_CRYPTOMINING_CONTENT
)
{
result
=
Ci
.
nsITrackingDBService
.
CRYPTOMINERS_ID
;
}
}
}
if
(
result
=
=
Ci
.
nsITrackingDBService
.
OTHER_COOKIES_BLOCKED_ID
&
&
isTracker
)
{
result
=
Ci
.
nsITrackingDBService
.
TRACKING_COOKIES_ID
;
}
return
result
;
}
async
saveEvents
(
data
)
{
let
db
=
await
this
.
ensureDB
(
)
;
let
log
=
JSON
.
parse
(
data
)
;
try
{
await
db
.
executeTransaction
(
async
(
)
=
>
{
for
(
let
thirdParty
in
log
)
{
let
type
=
this
.
identifyType
(
log
[
thirdParty
]
)
;
if
(
type
)
{
Services
.
telemetry
.
scalarAdd
(
TRACKERS_BLOCKED_COUNT
1
)
;
let
today
=
new
Date
(
)
.
toISOString
(
)
.
split
(
"
T
"
)
[
0
]
;
let
row
=
await
db
.
executeCached
(
SQL
.
selectByTypeAndDate
{
type
date
:
today
}
)
;
let
todayEntry
=
row
[
0
]
;
if
(
todayEntry
)
{
let
id
=
todayEntry
.
getResultByName
(
"
id
"
)
;
await
db
.
executeCached
(
SQL
.
incrementEvent
{
id
}
)
;
}
else
{
await
db
.
executeCached
(
SQL
.
addEvent
{
type
date
:
today
}
)
;
}
}
}
}
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
if
(
!
milestoneMessagingEnabled
|
|
(
this
.
lastChecked
&
&
Date
.
now
(
)
-
this
.
lastChecked
<
MILESTONE_UPDATE_INTERVAL
)
)
{
return
;
}
this
.
lastChecked
=
Date
.
now
(
)
;
let
totalSaved
=
await
this
.
sumAllEvents
(
)
;
let
reachedMilestone
=
null
;
let
nextMilestone
=
null
;
for
(
let
[
index
milestone
]
of
milestones
.
entries
(
)
)
{
if
(
totalSaved
>
=
milestone
)
{
reachedMilestone
=
milestone
;
nextMilestone
=
milestones
[
index
+
1
]
;
}
}
if
(
reachedMilestone
&
&
(
!
nextMilestone
|
|
nextMilestone
-
totalSaved
>
3000
)
&
&
(
!
oldMilestone
|
|
oldMilestone
<
reachedMilestone
)
)
{
Services
.
obs
.
notifyObservers
(
{
wrappedJSObject
:
{
event
:
"
ContentBlockingMilestone
"
}
}
"
SiteProtection
:
ContentBlockingMilestone
"
)
;
}
}
async
clearAll
(
)
{
let
db
=
await
this
.
ensureDB
(
)
;
await
removeAllRecords
(
db
)
;
}
async
clearSince
(
date
)
{
let
db
=
await
this
.
ensureDB
(
)
;
date
=
new
Date
(
date
)
.
toISOString
(
)
;
await
removeRecordsSince
(
db
date
)
;
}
async
getEventsByDateRange
(
dateFrom
dateTo
)
{
let
db
=
await
this
.
ensureDB
(
)
;
dateFrom
=
new
Date
(
dateFrom
)
.
toISOString
(
)
;
dateTo
=
new
Date
(
dateTo
)
.
toISOString
(
)
;
return
db
.
execute
(
SQL
.
selectByDateRange
{
dateFrom
dateTo
}
)
;
}
async
sumAllEvents
(
)
{
let
db
=
await
this
.
ensureDB
(
)
;
let
results
=
await
db
.
execute
(
SQL
.
sumAllEvents
)
;
if
(
!
results
[
0
]
)
{
return
0
;
}
let
total
=
results
[
0
]
.
getResultByName
(
"
sum
(
count
)
"
)
;
return
total
|
|
0
;
}
async
getEarliestRecordedDate
(
)
{
let
db
=
await
this
.
ensureDB
(
)
;
let
date
=
await
db
.
execute
(
SQL
.
getEarliestDate
)
;
if
(
!
date
[
0
]
)
{
return
null
;
}
let
earliestDate
=
date
[
0
]
.
getResultByName
(
"
timestamp
"
)
;
let
hoursInMS12
=
12
*
60
*
60
*
1000
;
let
earliestDateInMS
=
new
Date
(
earliestDate
)
.
getTime
(
)
+
hoursInMS12
;
return
earliestDateInMS
|
|
null
;
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
TrackingDBService
"
]
;
