#
ifndef
mozilla_StoragePrincipalHelper_h
#
define
mozilla_StoragePrincipalHelper_h
#
include
<
cstdint
>
#
include
"
ErrorList
.
h
"
class
nsIChannel
;
class
nsICookieJarSettings
;
class
nsIDocShell
;
class
nsILoadGroup
;
class
nsIPrincipal
;
class
nsIURI
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
}
namespace
ipc
{
class
PrincipalInfo
;
}
class
OriginAttributes
;
class
StoragePrincipalHelper
final
{
public
:
static
nsresult
Create
(
nsIChannel
*
aChannel
nsIPrincipal
*
aPrincipal
bool
aForceIsolation
nsIPrincipal
*
*
aStoragePrincipal
)
;
static
nsresult
CreatePartitionedPrincipalForServiceWorker
(
nsIPrincipal
*
aPrincipal
nsICookieJarSettings
*
aCookieJarSettings
nsIPrincipal
*
*
aPartitionedPrincipal
)
;
static
nsresult
PrepareEffectiveStoragePrincipalOriginAttributes
(
nsIChannel
*
aChannel
OriginAttributes
&
aOriginAttributes
)
;
static
bool
VerifyValidStoragePrincipalInfoForPrincipalInfo
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aStoragePrincipalInfo
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
)
;
enum
PrincipalType
{
eRegularPrincipal
eStorageAccessPrincipal
ePartitionedPrincipal
eForeignPartitionedPrincipal
}
;
static
nsresult
GetPrincipal
(
nsIChannel
*
aChannel
PrincipalType
aPrincipalType
nsIPrincipal
*
*
aPrincipal
)
;
static
nsresult
GetPrincipal
(
nsPIDOMWindowInner
*
aWindow
PrincipalType
aPrincipalType
nsIPrincipal
*
*
aPrincipal
)
;
static
bool
ShouldUsePartitionPrincipalForServiceWorker
(
nsIDocShell
*
aDocShell
)
;
static
bool
GetOriginAttributes
(
nsIChannel
*
aChannel
OriginAttributes
&
aAttributes
PrincipalType
aPrincipalType
)
;
static
bool
GetRegularPrincipalOriginAttributes
(
dom
:
:
Document
*
aDocument
OriginAttributes
&
aAttributes
)
;
static
bool
GetRegularPrincipalOriginAttributes
(
nsILoadGroup
*
aLoadGroup
OriginAttributes
&
aAttributes
)
;
static
bool
GetOriginAttributesForNetworkState
(
nsIChannel
*
aChanel
OriginAttributes
&
aAttributes
)
;
static
void
GetOriginAttributesForNetworkState
(
dom
:
:
Document
*
aDocument
OriginAttributes
&
aAttributes
)
;
static
void
UpdateOriginAttributesForNetworkState
(
nsIURI
*
aFirstPartyURI
OriginAttributes
&
aAttributes
)
;
static
bool
GetOriginAttributesForHSTS
(
nsIChannel
*
aChannel
OriginAttributes
&
aAttributes
)
;
static
bool
GetOriginAttributesForHTTPSRR
(
nsIChannel
*
aChannel
OriginAttributes
&
aAttributes
)
;
static
bool
GetOriginAttributes
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
OriginAttributes
&
aAttributes
)
;
static
bool
PartitionKeyHasBaseDomain
(
const
nsAString
&
aPartitionKey
const
nsACString
&
aBaseDomain
)
;
static
bool
PartitionKeyHasBaseDomain
(
const
nsAString
&
aPartitionKey
const
nsAString
&
aBaseDomain
)
;
}
;
}
#
endif
