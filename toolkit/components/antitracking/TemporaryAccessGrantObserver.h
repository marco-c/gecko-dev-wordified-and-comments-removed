#
ifndef
mozilla_temporaryaccessgrantobserver_h
#
define
mozilla_temporaryaccessgrantobserver_h
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsString
.
h
"
#
include
"
PLDHashTable
.
h
"
template
<
class
class
>
class
nsDataHashtable
;
class
nsITimer
;
class
nsPermissionManager
;
class
TemporaryAccessGrantCacheKey
;
namespace
mozilla
{
class
TemporaryAccessGrantCacheKey
:
public
PLDHashEntryHdr
{
public
:
typedef
Pair
<
nsCOMPtr
<
nsIPrincipal
>
nsCString
>
KeyType
;
typedef
const
KeyType
*
KeyTypePointer
;
explicit
TemporaryAccessGrantCacheKey
(
KeyTypePointer
aKey
)
:
mPrincipal
(
aKey
-
>
first
(
)
)
mType
(
aKey
-
>
second
(
)
)
{
}
TemporaryAccessGrantCacheKey
(
TemporaryAccessGrantCacheKey
&
&
aOther
)
=
default
;
~
TemporaryAccessGrantCacheKey
(
)
=
default
;
KeyType
GetKey
(
)
const
{
return
MakePair
(
mPrincipal
mType
)
;
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
!
!
mPrincipal
=
=
!
!
aKey
-
>
first
(
)
&
&
mType
=
=
aKey
-
>
second
(
)
&
&
(
mPrincipal
?
(
mPrincipal
-
>
Equals
(
aKey
-
>
first
(
)
)
)
:
true
)
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
&
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
if
(
!
aKey
)
{
return
0
;
}
BasePrincipal
*
bp
=
BasePrincipal
:
:
Cast
(
aKey
-
>
first
(
)
)
;
return
HashGeneric
(
bp
-
>
GetOriginNoSuffixHash
(
)
bp
-
>
GetOriginSuffixHash
(
)
HashString
(
aKey
-
>
second
(
)
)
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCString
mType
;
}
;
class
TemporaryAccessGrantObserver
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
void
Create
(
nsPermissionManager
*
aPM
nsIPrincipal
*
aPrincipal
const
nsACString
&
aType
)
;
void
SetTimer
(
nsITimer
*
aTimer
)
;
private
:
TemporaryAccessGrantObserver
(
nsPermissionManager
*
aPM
nsIPrincipal
*
aPrincipal
const
nsACString
&
aType
)
;
~
TemporaryAccessGrantObserver
(
)
=
default
;
private
:
typedef
nsDataHashtable
<
TemporaryAccessGrantCacheKey
nsCOMPtr
<
nsITimer
>
>
ObserversTable
;
static
UniquePtr
<
ObserversTable
>
sObservers
;
nsCOMPtr
<
nsITimer
>
mTimer
;
RefPtr
<
nsPermissionManager
>
mPM
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCString
mType
;
}
;
}
#
endif
