"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
runBackgroundTask
"
]
;
const
{
EXIT_CODE
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BackgroundTasksManager
.
jsm
"
)
.
BackgroundTasksManager
;
const
{
ASRouter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouter
.
jsm
"
)
;
const
{
BackgroundTasksUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BackgroundTasksUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
ClientEnvironmentBase
:
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
ClientEnvironment
.
jsm
"
ExtensionUtils
:
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
IndexedDB
:
"
resource
:
/
/
gre
/
modules
/
IndexedDB
.
jsm
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
RemoteSettingsClient
:
"
resource
:
/
/
services
-
settings
/
RemoteSettingsClient
.
jsm
"
ToastNotification
:
"
resource
:
/
/
activity
-
stream
/
lib
/
ToastNotification
.
jsm
"
Utils
:
"
resource
:
/
/
services
-
settings
/
Utils
.
jsm
"
}
)
;
const
SERVER_STAGE
=
"
https
:
/
/
settings
-
cdn
.
stage
.
mozaws
.
net
/
v1
"
;
let
defaultProfileTargetingSnapshot
=
{
}
;
let
outputInfo
;
outputInfo
=
(
sentinel
info
)
=
>
{
dump
(
{
sentinel
}
{
JSON
.
stringify
(
info
)
}
{
sentinel
}
\
n
)
;
}
;
async
function
handleCommandLine
(
commandLine
)
{
const
CASE_INSENSITIVE
=
false
;
let
sentinel
=
commandLine
.
handleFlagWithParam
(
"
sentinel
"
CASE_INSENSITIVE
)
;
outputInfo
=
outputInfo
.
bind
(
null
sentinel
|
|
"
"
)
;
Services
.
prefs
.
setBoolPref
(
"
nimbus
.
debug
"
true
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
preview_enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
debugLogLevel
"
)
;
Services
.
prefs
.
clearUserPref
(
"
messaging
-
system
.
log
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
loglevel
"
)
;
Services
.
prefs
.
clearUserPref
(
"
toolkit
.
backgroundtasks
.
loglevel
"
)
;
if
(
commandLine
.
handleFlag
(
"
debug
"
CASE_INSENSITIVE
)
)
{
console
.
log
(
"
Saw
-
-
debug
not
showing
any
alerts
"
)
;
Services
.
prefs
.
setBoolPref
(
"
services
.
settings
.
preview_enabled
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
debugLogLevel
"
"
debug
"
)
;
Services
.
prefs
.
setCharPref
(
"
messaging
-
system
.
log
"
"
debug
"
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
settings
.
loglevel
"
"
debug
"
)
;
Services
.
prefs
.
setCharPref
(
"
toolkit
.
backgroundtasks
.
loglevel
"
"
debug
"
)
;
}
let
origAlertsService
=
lazy
.
ToastNotification
.
AlertsService
;
let
disableAlertsService
=
commandLine
.
handleFlag
(
"
disable
-
alerts
-
service
"
CASE_INSENSITIVE
)
;
if
(
disableAlertsService
)
{
console
.
log
(
"
Saw
-
-
disable
-
alerts
-
service
not
showing
any
alerts
"
)
;
}
delete
lazy
.
ToastNotification
.
AlertsService
;
lazy
.
ToastNotification
.
AlertsService
=
{
showAlert
(
.
.
.
args
)
{
outputInfo
(
{
showAlert
:
{
args
}
}
)
;
if
(
!
disableAlertsService
)
{
origAlertsService
.
showAlert
(
.
.
.
args
)
;
}
}
}
;
let
targetingSnapshotPath
=
commandLine
.
handleFlagWithParam
(
"
-
-
targeting
-
snapshot
"
CASE_INSENSITIVE
)
;
if
(
targetingSnapshotPath
)
{
defaultProfileTargetingSnapshot
=
await
IOUtils
.
readJSON
(
targetingSnapshotPath
)
;
console
.
log
(
Saw
-
-
target
-
snapshot
read
snapshot
from
{
targetingSnapshotPath
}
)
;
}
outputInfo
(
{
defaultProfileTargetingSnapshot
}
)
;
lazy
.
RemoteSettings
.
enablePreviewMode
(
false
)
;
Services
.
prefs
.
clearUserPref
(
"
messaging
-
system
.
rsexperimentloader
.
collection_id
"
)
;
if
(
commandLine
.
handleFlag
(
"
preview
"
CASE_INSENSITIVE
)
)
{
console
.
log
(
Saw
-
-
preview
invoking
'
RemoteSettings
.
enablePreviewMode
(
true
)
'
and
+
setting
'
messaging
-
system
.
rsexperimentloader
.
collection_id
=
\
"
nimbus
-
preview
\
"
'
)
;
lazy
.
RemoteSettings
.
enablePreviewMode
(
true
)
;
Services
.
prefs
.
setCharPref
(
"
messaging
-
system
.
rsexperimentloader
.
collection_id
"
"
nimbus
-
preview
"
)
;
}
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
server
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
load_dump
"
)
;
if
(
commandLine
.
handleFlag
(
"
stage
"
CASE_INSENSITIVE
)
)
{
console
.
log
(
Saw
-
-
stage
setting
'
services
.
settings
.
server
=
"
https
:
/
/
settings
-
cdn
.
stage
.
mozaws
.
net
/
v1
"
'
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
settings
.
server
"
SERVER_STAGE
)
;
Services
.
prefs
.
setBoolPref
(
"
services
.
settings
.
load_dump
"
false
)
;
if
(
lazy
.
Utils
.
SERVER_URL
!
=
=
SERVER_STAGE
)
{
throw
new
Error
(
"
Pref
services
.
settings
.
server
ignored
!
"
+
"
remember
to
set
MOZ_REMOTE_SETTINGS_DEVTOOLS
=
1
in
beta
and
release
.
"
)
;
}
}
let
randomizationId
=
commandLine
.
handleFlagWithParam
(
"
randomizationId
"
CASE_INSENSITIVE
)
;
if
(
randomizationId
)
{
console
.
log
(
Saw
-
-
randomizationId
:
{
randomizationId
}
)
;
Services
.
prefs
.
setCharPref
(
"
app
.
normandy
.
user_id
"
randomizationId
)
;
}
outputInfo
(
{
randomizationId
:
lazy
.
ClientEnvironmentBase
.
randomizationId
}
)
;
let
experiments
=
commandLine
.
handleFlagWithParam
(
"
experiments
"
CASE_INSENSITIVE
)
;
if
(
experiments
)
{
let
experimentsPath
=
commandLine
.
resolveFile
(
experiments
)
.
path
;
let
data
=
await
IOUtils
.
readJSON
(
experimentsPath
)
;
if
(
!
Array
.
isArray
(
data
)
)
{
if
(
data
.
permissions
)
{
data
=
data
.
data
;
}
data
=
[
data
]
;
}
lazy
.
RemoteSettingsClient
.
prototype
.
get
=
async
(
)
=
>
{
return
data
;
}
;
console
.
log
(
Saw
-
-
experiments
read
recipes
from
{
experimentsPath
}
)
;
}
if
(
!
experiments
&
&
commandLine
.
handleFlag
(
"
no
-
experiments
"
CASE_INSENSITIVE
)
)
{
lazy
.
RemoteSettingsClient
.
prototype
.
get
=
async
(
)
=
>
{
return
[
]
;
}
;
console
.
log
(
Saw
-
-
no
-
experiments
returning
[
]
recipes
)
;
}
Services
.
prefs
.
clearUserPref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
)
;
if
(
commandLine
.
handleFlag
(
"
no
-
datareporting
"
CASE_INSENSITIVE
)
)
{
Services
.
prefs
.
setBoolPref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
false
)
;
console
.
log
(
Saw
-
-
no
-
datareporting
set
'
datareporting
.
healthreport
.
uploadEnabled
=
false
'
)
;
}
Services
.
prefs
.
clearUserPref
(
"
app
.
shield
.
optoutstudies
.
enabled
"
)
;
if
(
commandLine
.
handleFlag
(
"
no
-
optoutstudies
"
CASE_INSENSITIVE
)
)
{
Services
.
prefs
.
setBoolPref
(
"
app
.
shield
.
optoutstudies
.
enabled
"
false
)
;
console
.
log
(
Saw
-
-
no
-
datareporting
set
'
app
.
shield
.
optoutstudies
.
enabled
=
false
'
)
;
}
outputInfo
(
{
taskProfilePrefs
:
{
"
app
.
shield
.
optoutstudies
.
enabled
"
:
Services
.
prefs
.
getBoolPref
(
"
app
.
shield
.
optoutstudies
.
enabled
"
)
"
datareporting
.
healthreport
.
uploadEnabled
"
:
Services
.
prefs
.
getBoolPref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
)
}
}
)
;
if
(
commandLine
.
handleFlag
(
"
reset
-
storage
"
CASE_INSENSITIVE
)
)
{
console
.
log
(
"
Saw
-
-
reset
-
storage
deleting
database
'
ActivityStream
'
"
)
;
console
.
log
(
To
hard
reset
remove
the
contents
of
'
{
PathUtils
.
profileDir
}
'
)
;
await
lazy
.
IndexedDB
.
deleteDatabase
(
"
ActivityStream
"
)
;
}
}
async
function
runBackgroundTask
(
commandLine
)
{
console
.
error
(
"
runBackgroundTask
:
message
"
)
;
await
handleCommandLine
(
commandLine
)
;
await
BackgroundTasksUtils
.
enableNimbus
(
commandLine
)
;
await
BackgroundTasksUtils
.
enableFirefoxMessagingSystem
(
defaultProfileTargetingSnapshot
.
environment
)
;
await
lazy
.
ExtensionUtils
.
promiseTimeout
(
1000
)
;
outputInfo
(
{
ASRouterState
:
ASRouter
.
state
}
)
;
return
EXIT_CODE
.
SUCCESS
;
}
