#
ifndef
mozilla_BackgroundTasks_h
#
define
mozilla_BackgroundTasks_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIBackgroundTasks
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
class
nsICommandLine
;
class
nsIFile
;
namespace
mozilla
{
class
BackgroundTasks
final
:
public
nsIBackgroundTasks
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIBACKGROUNDTASKS
public
:
explicit
BackgroundTasks
(
Maybe
<
nsCString
>
aBackgroundTask
)
;
static
void
Init
(
Maybe
<
nsCString
>
aBackgroundTask
)
;
static
void
Shutdown
(
)
;
static
BackgroundTasks
*
GetSingleton
(
)
;
static
already_AddRefed
<
BackgroundTasks
>
GetSingletonAddRefed
(
)
;
static
Maybe
<
nsCString
>
GetBackgroundTasks
(
)
;
static
bool
IsBackgroundTaskMode
(
)
;
static
nsresult
CreateEphemeralProfileDirectory
(
nsIFile
*
aRootDir
const
nsCString
&
aProfilePrefix
nsIFile
*
*
aFile
)
;
static
nsresult
CreateNonEphemeralProfileDirectory
(
nsIFile
*
aRootDir
const
nsCString
&
aProfilePrefix
nsIFile
*
*
aFile
)
;
static
bool
IsEphemeralProfile
(
)
;
static
nsresult
RunBackgroundTask
(
nsICommandLine
*
aCmdLine
)
;
static
bool
IsUpdatingTaskName
(
const
nsCString
&
aName
)
;
static
bool
IsEphemeralProfileTaskName
(
const
nsCString
&
aName
)
;
static
bool
IsNoOutputTaskName
(
const
nsCString
&
aName
)
;
static
nsCString
GetProfilePrefix
(
const
nsCString
&
aInstallHash
)
;
protected
:
static
StaticRefPtr
<
BackgroundTasks
>
sSingleton
;
static
LazyLogModule
sBackgroundTasksLog
;
Maybe
<
nsCString
>
mBackgroundTask
;
bool
mIsEphemeralProfile
;
nsCOMPtr
<
nsIFile
>
mProfD
;
nsresult
CreateEphemeralProfileDirectoryImpl
(
nsIFile
*
aRootDir
const
nsCString
&
aProfilePrefix
nsIFile
*
*
aFile
)
;
nsresult
CreateNonEphemeralProfileDirectoryImpl
(
nsIFile
*
aRootDir
const
nsCString
&
aProfilePrefix
nsIFile
*
*
aFile
)
;
static
nsresult
RemoveStaleEphemeralProfileDirectories
(
nsIFile
*
const
aRoot
const
nsCString
&
aPrefix
)
;
virtual
~
BackgroundTasks
(
)
=
default
;
}
;
}
#
endif
