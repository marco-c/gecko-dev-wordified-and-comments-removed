#
include
"
mozilla
/
BackgroundTasks
.
h
"
#
include
"
nsIBackgroundTasksManager
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsImportModule
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
SpecialSystemDirectory
.
h
"
#
include
"
mozilla
/
LateWriteChecks
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
BackgroundTasks
nsIBackgroundTasks
)
;
void
BackgroundTasks
:
:
Init
(
Maybe
<
nsCString
>
aBackgroundTask
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
sSingleton
"
BackgroundTasks
singleton
already
initialized
"
)
;
sSingleton
=
new
BackgroundTasks
(
std
:
:
move
(
aBackgroundTask
)
)
;
}
void
BackgroundTasks
:
:
Shutdown
(
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
sSingleton
)
{
return
;
}
if
(
sSingleton
-
>
mProfD
)
{
AutoSuspendLateWriteChecks
suspend
;
Unused
<
<
sSingleton
-
>
mProfD
-
>
Remove
(
true
)
;
}
sSingleton
=
nullptr
;
}
BackgroundTasks
*
BackgroundTasks
:
:
GetSingleton
(
)
{
if
(
!
sSingleton
)
{
Init
(
Nothing
(
)
)
;
}
MOZ_RELEASE_ASSERT
(
sSingleton
"
BackgroundTasks
singleton
should
have
been
initialized
"
)
;
return
sSingleton
.
get
(
)
;
}
already_AddRefed
<
BackgroundTasks
>
BackgroundTasks
:
:
GetSingletonAddRefed
(
)
{
return
RefPtr
<
BackgroundTasks
>
(
GetSingleton
(
)
)
.
forget
(
)
;
}
Maybe
<
nsCString
>
BackgroundTasks
:
:
GetBackgroundTasks
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
Nothing
(
)
;
}
return
GetSingleton
(
)
-
>
mBackgroundTask
;
}
bool
BackgroundTasks
:
:
IsBackgroundTaskMode
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
false
;
}
return
GetBackgroundTasks
(
)
.
isSome
(
)
;
}
nsresult
BackgroundTasks
:
:
CreateTemporaryProfileDirectory
(
const
nsCString
&
aInstallHash
nsIFile
*
*
aFile
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
GetSingleton
(
)
-
>
CreateTemporaryProfileDirectoryImpl
(
aInstallHash
aFile
)
;
}
bool
BackgroundTasks
:
:
IsUsingTemporaryProfile
(
)
{
return
sSingleton
&
&
sSingleton
-
>
mProfD
;
}
nsresult
BackgroundTasks
:
:
RunBackgroundTask
(
nsICommandLine
*
aCmdLine
)
{
Maybe
<
nsCString
>
task
=
GetBackgroundTasks
(
)
;
if
(
task
.
isNothing
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsIBackgroundTasksManager
>
manager
=
do_ImportModule
(
"
resource
:
/
/
gre
/
modules
/
BackgroundTasksManager
.
jsm
"
"
BackgroundTasksManager
"
fallible
)
;
NS_ENSURE_TRUE
(
manager
NS_ERROR_FAILURE
)
;
NS_ConvertASCIItoUTF16
name
(
task
.
ref
(
)
.
get
(
)
)
;
Unused
<
<
manager
-
>
RunBackgroundTaskNamed
(
name
aCmdLine
)
;
return
NS_OK
;
}
bool
BackgroundTasks
:
:
IsUpdatingTaskName
(
const
nsCString
&
aName
)
{
return
aName
.
EqualsLiteral
(
"
backgroundupdate
"
)
|
|
aName
.
EqualsLiteral
(
"
shouldprocessupdates
"
)
;
}
nsresult
BackgroundTasks
:
:
CreateTemporaryProfileDirectoryImpl
(
const
nsCString
&
aInstallHash
nsIFile
*
*
aFile
)
{
if
(
mBackgroundTask
.
isNothing
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
;
nsCOMPtr
<
nsIFile
>
file
;
if
(
mProfD
)
{
rv
=
mProfD
-
>
Clone
(
getter_AddRefs
(
file
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
rv
=
GetSpecialSystemDirectory
(
OS_TemporaryDirectory
getter_AddRefs
(
file
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
file
-
>
AppendNative
(
nsPrintfCString
(
"
%
sBackgroundTask
-
%
s
-
%
s
"
MOZ_APP_VENDOR
aInstallHash
.
get
(
)
mBackgroundTask
.
ref
(
)
.
get
(
)
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
file
-
>
CreateUnique
(
nsIFile
:
:
DIRECTORY_TYPE
0700
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
file
-
>
Clone
(
getter_AddRefs
(
mProfD
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
file
.
forget
(
aFile
)
;
return
NS_OK
;
}
nsresult
BackgroundTasks
:
:
GetIsBackgroundTaskMode
(
bool
*
result
)
{
*
result
=
mBackgroundTask
.
isSome
(
)
;
return
NS_OK
;
}
nsresult
BackgroundTasks
:
:
BackgroundTaskName
(
nsAString
&
name
)
{
name
.
SetIsVoid
(
true
)
;
if
(
mBackgroundTask
.
isSome
(
)
)
{
name
.
AssignASCII
(
mBackgroundTask
.
ref
(
)
)
;
}
return
NS_OK
;
}
nsresult
BackgroundTasks
:
:
OverrideBackgroundTaskNameForTesting
(
const
nsAString
&
name
)
{
if
(
name
.
IsVoid
(
)
)
{
mBackgroundTask
=
Nothing
(
)
;
}
else
{
mBackgroundTask
=
Some
(
NS_LossyConvertUTF16toASCII
(
name
)
)
;
}
return
NS_OK
;
}
StaticRefPtr
<
BackgroundTasks
>
BackgroundTasks
:
:
sSingleton
;
}
