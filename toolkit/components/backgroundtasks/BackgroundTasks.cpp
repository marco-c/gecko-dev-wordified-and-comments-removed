#
include
"
nsPrintfCString
.
h
"
#
include
"
SpecialSystemDirectory
.
h
"
#
include
"
mozilla
/
BackgroundTasks
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
BackgroundTasks
nsIBackgroundTasks
)
;
nsresult
BackgroundTasks
:
:
GetOrCreateTemporaryProfileDirectoryImpl
(
nsIFile
*
*
aFile
)
{
if
(
mBackgroundTask
.
isNothing
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
;
nsCOMPtr
<
nsIFile
>
file
;
if
(
mProfD
)
{
rv
=
mProfD
-
>
Clone
(
getter_AddRefs
(
file
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
rv
=
GetSpecialSystemDirectory
(
OS_TemporaryDirectory
getter_AddRefs
(
file
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
file
-
>
AppendNative
(
nsPrintfCString
(
"
backgroundtask
-
%
s
"
mBackgroundTask
.
ref
(
)
.
get
(
)
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
exists
;
rv
=
file
-
>
Exists
(
&
exists
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
exists
)
{
rv
=
file
-
>
Create
(
nsIFile
:
:
DIRECTORY_TYPE
0700
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
bool
isDir
;
rv
=
file
-
>
IsDirectory
(
&
isDir
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
isDir
)
{
return
NS_ERROR_FILE_DESTINATION_NOT_DIR
;
}
}
rv
=
file
-
>
Clone
(
getter_AddRefs
(
mProfD
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsString
path
;
file
-
>
GetPath
(
path
)
;
file
.
forget
(
aFile
)
;
return
NS_OK
;
}
nsresult
BackgroundTasks
:
:
GetIsBackgroundTaskMode
(
bool
*
result
)
{
*
result
=
mBackgroundTask
.
isSome
(
)
;
return
NS_OK
;
}
nsresult
BackgroundTasks
:
:
BackgroundTaskName
(
nsAString
&
name
)
{
name
.
SetIsVoid
(
true
)
;
if
(
mBackgroundTask
.
isSome
(
)
)
{
name
.
AssignASCII
(
mBackgroundTask
.
ref
(
)
)
;
}
return
NS_OK
;
}
nsresult
BackgroundTasks
:
:
OverrideBackgroundTaskNameForTesting
(
const
nsAString
&
name
)
{
if
(
name
.
IsVoid
(
)
)
{
mBackgroundTask
=
Nothing
(
)
;
}
else
{
mBackgroundTask
=
Some
(
NS_LossyConvertUTF16toASCII
(
name
)
)
;
}
return
NS_OK
;
}
mozilla
:
:
StaticRefPtr
<
BackgroundTasks
>
BackgroundTasks
:
:
sSingleton
;
}
