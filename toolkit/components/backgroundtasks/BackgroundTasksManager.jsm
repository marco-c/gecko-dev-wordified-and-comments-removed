var
EXPORTED_SYMBOLS
=
[
"
BackgroundTasksManager
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
ConsoleAPI
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
.
ConsoleAPI
;
let
consoleOptions
=
{
maxLogLevel
:
"
error
"
maxLogLevelPref
:
"
toolkit
.
backgroundtasks
.
loglevel
"
prefix
:
"
BackgroundTasksManager
"
}
;
return
new
ConsoleAPI
(
consoleOptions
)
;
}
)
;
function
registerModulesProtocolHandler
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
_TESTING_MODULES_URI
=
env
.
get
(
"
XPCSHELL_TESTING_MODULES_URI
"
"
"
)
;
if
(
!
_TESTING_MODULES_URI
)
{
return
false
;
}
let
protocolHandler
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
protocolHandler
.
setSubstitution
(
"
testing
-
common
"
Services
.
io
.
newURI
(
_TESTING_MODULES_URI
)
)
;
log
.
error
(
Substitution
set
:
resource
:
/
/
testing
-
common
aliases
{
_TESTING_MODULES_URI
}
)
;
return
true
;
}
function
findRunBackgroundTask
(
name
)
{
const
subModules
=
[
"
resource
:
/
/
/
modules
"
"
resource
:
/
/
gre
/
modules
"
]
;
if
(
registerModulesProtocolHandler
(
)
)
{
subModules
.
push
(
"
resource
:
/
/
testing
-
common
"
)
;
}
for
(
const
subModule
of
subModules
)
{
let
URI
=
{
subModule
}
/
backgroundtasks
/
BackgroundTask_
{
name
}
.
jsm
;
log
.
debug
(
Looking
for
background
task
at
URI
:
{
URI
}
)
;
try
{
const
{
runBackgroundTask
}
=
ChromeUtils
.
import
(
URI
)
;
log
.
info
(
Found
background
task
at
URI
:
{
URI
}
)
;
return
runBackgroundTask
;
}
catch
(
ex
)
{
if
(
ex
.
result
!
=
Cr
.
NS_ERROR_FILE_NOT_FOUND
)
{
throw
ex
;
}
}
}
log
.
warn
(
No
backgroundtask
named
'
{
name
}
'
registered
)
;
throw
new
Components
.
Exception
(
No
backgroundtask
named
'
{
name
}
'
registered
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
}
var
BackgroundTasksManager
=
{
async
runBackgroundTaskNamed
(
name
commandLine
)
{
function
addMarker
(
markerName
)
{
return
ChromeUtils
.
addProfilerMarker
(
markerName
undefined
name
)
;
}
addMarker
(
"
BackgroundTasksManager
:
AfterRunBackgroundTaskNamed
"
)
;
log
.
info
(
Running
background
task
named
'
{
name
}
'
(
with
{
commandLine
.
length
}
arguments
)
)
;
let
exitCode
=
BackgroundTasksManager
.
EXIT_CODE
.
NOT_FOUND
;
try
{
let
runBackgroundTask
=
findRunBackgroundTask
(
name
)
;
addMarker
(
"
BackgroundTasksManager
:
AfterFindRunBackgroundTask
"
)
;
try
{
exitCode
=
await
runBackgroundTask
(
commandLine
)
;
log
.
info
(
Backgroundtask
named
'
{
name
}
'
completed
with
exit
code
{
exitCode
}
)
;
}
catch
(
e
)
{
log
.
error
(
Backgroundtask
named
'
{
name
}
'
threw
exception
e
)
;
exitCode
=
BackgroundTasksManager
.
EXIT_CODE
.
EXCEPTION
;
}
}
finally
{
addMarker
(
"
BackgroundTasksManager
:
AfterAwaitRunBackgroundTask
"
)
;
log
.
info
(
Invoking
Services
.
startup
.
quit
(
.
.
.
{
exitCode
}
)
)
;
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eForceQuit
exitCode
)
;
}
return
exitCode
;
}
}
;
BackgroundTasksManager
.
EXIT_CODE
=
{
SUCCESS
:
0
NOT_FOUND
:
2
EXCEPTION
:
3
}
;
