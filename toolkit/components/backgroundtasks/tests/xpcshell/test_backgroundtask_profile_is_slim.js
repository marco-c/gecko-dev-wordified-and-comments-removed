const
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
let
server
;
setupProfileService
(
)
;
let
successCount
=
0
;
function
success
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
let
str
=
"
success
"
;
response
.
write
(
str
str
.
length
)
;
successCount
+
=
1
;
}
add_setup
(
(
)
=
>
{
server
=
new
HttpServer
(
)
;
server
.
registerPathHandler
(
"
/
success
"
success
)
;
server
.
start
(
-
1
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
server
.
stop
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_backgroundtask_profile_is_slim
(
)
{
let
profileService
=
Cc
[
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
]
.
getService
(
Ci
.
nsIToolkitProfileService
)
;
let
profD
=
do_get_profile
(
)
;
profD
.
append
(
"
test_profile_is_slim
"
)
;
let
profile
=
profileService
.
createUniqueProfile
(
profD
"
test_profile_is_slim
"
)
;
registerCleanupFunction
(
(
)
=
>
{
profile
.
remove
(
true
)
;
}
)
;
let
exitCode
=
await
do_backgroundtask
(
"
profile_is_slim
"
{
extraArgs
:
[
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
success
]
extraEnv
:
{
XRE_PROFILE_PATH
:
profile
.
rootDir
.
path
MOZ_BACKGROUNDTASKS_NO_REMOVE_PROFILE
:
"
1
"
}
}
)
;
Assert
.
equal
(
0
exitCode
"
The
fetch
background
task
exited
with
exit
code
0
"
)
;
Assert
.
equal
(
1
successCount
"
The
fetch
background
task
reached
the
test
server
1
time
"
)
;
assertProfileIsSlim
(
profile
.
rootDir
)
;
}
)
;
const
expected
=
[
{
relPath
:
"
lock
"
condition
:
AppConstants
.
platform
=
=
"
linux
"
}
{
relPath
:
"
.
parentlock
"
condition
:
AppConstants
.
platform
=
=
"
linux
"
|
|
AppConstants
.
platform
=
=
"
macosx
"
}
{
relPath
:
"
parent
.
lock
"
condition
:
AppConstants
.
platform
=
=
"
win
"
|
|
AppConstants
.
platform
=
=
"
macosx
"
}
{
relPath
:
"
cache2
"
isDirectory
:
true
}
{
relPath
:
"
cert9
.
db
"
}
{
relPath
:
"
compatibility
.
ini
"
}
{
relPath
:
"
cookies
.
sqlite
"
}
{
relPath
:
"
crashes
"
isDirectory
:
true
}
{
relPath
:
"
data
"
isDirectory
:
true
}
{
relPath
:
"
key4
.
db
"
}
{
relPath
:
"
local
"
isDirectory
:
true
}
{
relPath
:
"
minidumps
"
isDirectory
:
true
}
{
relPath
:
"
mozinfo
.
json
"
}
{
relPath
:
"
pkcs11
.
txt
"
}
{
relPath
:
"
prefs
.
js
"
}
{
relPath
:
"
security_state
"
isDirectory
:
true
}
{
relPath
:
"
startupCache
"
isDirectory
:
true
}
{
relPath
:
"
times
.
json
"
}
]
;
async
function
assertProfileIsSlim
(
profile
)
{
Assert
.
ok
(
profile
.
exists
(
)
Profile
directory
does
exist
:
{
profile
.
path
}
)
;
let
unexpected
=
[
]
;
let
typeLabel
=
{
true
:
"
directory
"
false
:
"
file
"
}
;
for
(
let
entry
of
profile
.
directoryEntries
)
{
let
relPath
=
entry
.
getRelativePath
(
profile
)
;
info
(
Witnessed
directory
entry
'
{
relPath
}
'
.
)
;
let
expectation
=
expected
.
find
(
it
=
>
it
.
relPath
=
=
relPath
&
&
(
!
(
"
condition
"
in
it
)
|
|
it
.
condition
)
)
;
if
(
!
expectation
)
{
info
(
UNEXPECTED
:
Directory
entry
'
{
relPath
}
'
is
NOT
expected
!
)
;
unexpected
.
push
(
relPath
)
;
}
else
if
(
typeLabel
[
!
!
expectation
.
isDirectory
]
!
=
typeLabel
[
entry
.
isDirectory
(
)
]
)
{
info
(
UNEXPECTED
:
Directory
entry
'
{
relPath
}
'
is
NOT
expected
type
!
)
;
unexpected
.
push
(
relPath
)
;
}
}
Assert
.
deepEqual
(
[
]
unexpected
"
Expected
nothing
to
report
"
)
;
}
