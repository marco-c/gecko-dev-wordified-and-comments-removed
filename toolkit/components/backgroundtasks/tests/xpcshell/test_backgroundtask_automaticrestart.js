add_task
(
async
function
test_backgroundtask_automatic_restart
(
)
{
let
restartTimeoutSec
=
30
;
const
path
=
await
IOUtils
.
createUniqueFile
(
PathUtils
.
tempDir
"
automatic_restart
.
txt
"
)
;
let
fileExists
=
await
IOUtils
.
exists
(
path
)
;
ok
(
fileExists
File
at
{
path
}
was
created
)
;
let
stdoutLines
=
[
]
;
let
exitCode
=
await
do_backgroundtask
(
"
automaticrestart
"
{
extraArgs
:
[
-
no
-
wait
path
-
attach
-
console
]
onStdoutLine
:
line
=
>
stdoutLines
.
push
(
line
)
}
)
;
Assert
.
equal
(
0
exitCode
)
;
let
pid
=
-
1
;
for
(
let
line
of
stdoutLines
)
{
if
(
line
.
includes
(
"
*
*
*
ApplyUpdate
:
launched
"
)
)
{
let
lineArr
=
line
.
split
(
"
"
)
;
pid
=
Number
.
parseInt
(
lineArr
[
lineArr
.
length
-
2
]
)
;
}
}
console
.
log
(
found
launched
pid
{
pid
}
)
;
let
updateProcessor
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
processor
;
1
"
]
.
createInstance
(
Ci
.
nsIUpdateProcessor
)
;
updateProcessor
.
waitForProcessExit
(
pid
restartTimeoutSec
*
1000
)
;
let
finalMessage
=
await
IOUtils
.
readUTF8
(
path
)
;
ok
(
finalMessage
.
includes
(
{
pid
}
)
New
process
message
:
{
finalMessage
}
)
;
await
IOUtils
.
remove
(
path
{
ignoreAbsent
:
true
}
)
;
fileExists
=
await
IOUtils
.
exists
(
path
)
;
ok
(
!
fileExists
File
at
{
path
}
was
removed
)
;
}
)
;
