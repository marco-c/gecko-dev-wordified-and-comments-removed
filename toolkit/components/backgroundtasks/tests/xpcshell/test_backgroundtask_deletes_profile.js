add_task
(
async
function
test_backgroundtask_deletes_profile
(
)
{
let
sentinel
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
;
sentinel
=
sentinel
.
substring
(
1
sentinel
.
length
-
1
)
;
let
stdoutLines
=
[
]
;
let
exitCode
=
await
do_backgroundtask
(
"
unique_profile
"
{
extraArgs
:
[
sentinel
]
onStdoutLine
:
line
=
>
stdoutLines
.
push
(
line
)
}
)
;
Assert
.
equal
(
0
exitCode
)
;
let
profile
;
for
(
let
line
of
stdoutLines
)
{
if
(
line
.
includes
(
sentinel
)
)
{
let
info
=
JSON
.
parse
(
line
.
split
(
sentinel
)
[
1
]
)
;
profile
=
info
[
1
]
;
}
}
Assert
.
ok
(
!
!
profile
Found
profile
:
{
profile
}
)
;
let
dir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
dir
.
initWithPath
(
profile
)
;
Assert
.
ok
(
!
dir
.
exists
(
)
Temporary
profile
directory
does
not
exist
:
{
profile
}
)
;
}
)
;
let
c
=
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
"
macosx
"
}
;
add_task
(
c
async
function
test_backgroundtask_cleans_up_stale_profiles
(
)
{
let
tmp
=
do_get_profile
(
)
;
tmp
.
append
(
"
Temp
"
)
;
tmp
.
createUnique
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o700
)
;
let
sentinel
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
;
sentinel
=
sentinel
.
substring
(
1
sentinel
.
length
-
1
)
;
let
stdoutLines
=
[
]
;
let
exitCode
=
await
do_backgroundtask
(
"
unique_profile
"
{
extraArgs
:
[
sentinel
]
extraEnv
:
{
TMP
:
tmp
.
path
}
onStdoutLine
:
line
=
>
stdoutLines
.
push
(
line
)
}
)
;
Assert
.
equal
(
0
exitCode
)
;
let
profile
;
for
(
let
line
of
stdoutLines
)
{
if
(
line
.
includes
(
sentinel
)
)
{
let
info
=
JSON
.
parse
(
line
.
split
(
sentinel
)
[
1
]
)
;
profile
=
info
[
1
]
;
}
}
Assert
.
ok
(
!
!
profile
Found
profile
:
{
profile
}
)
;
Assert
.
ok
(
profile
.
startsWith
(
tmp
.
path
)
"
Profile
was
created
in
test
-
specific
temporary
path
"
)
;
let
dir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
dir
.
initWithPath
(
profile
)
;
let
ps
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
p
=
dir
.
parent
.
clone
(
)
;
p
.
append
(
{
dir
.
leafName
}
_
{
i
}
)
;
p
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o700
)
;
ps
.
push
(
p
)
;
let
f
=
p
.
clone
(
)
;
f
.
append
(
file_
{
i
}
)
;
await
IOUtils
.
writeJSON
(
f
.
path
{
}
)
;
}
let
moz_log
=
"
BackgroundTasks
:
5
"
;
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
if
(
env
.
exists
(
"
MOZ_LOG
"
)
)
{
moz_log
+
=
{
env
.
get
(
"
MOZ_LOG
"
)
}
;
}
exitCode
=
await
do_backgroundtask
(
"
unique_profile
"
{
extraArgs
:
[
sentinel
]
extraEnv
:
{
TMP
:
tmp
.
path
MOZ_LOG
:
moz_log
}
}
)
;
Assert
.
equal
(
0
exitCode
)
;
let
es
=
[
]
;
let
as
=
[
]
;
for
(
let
p
of
ps
)
{
as
.
push
(
!
p
.
exists
(
)
)
;
es
.
push
(
true
)
;
}
Assert
.
deepEqual
(
es
as
"
All
stale
profile
directories
were
cleaned
up
.
"
)
;
}
)
;
