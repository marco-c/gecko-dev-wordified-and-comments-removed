var
EXPORTED_SYMBOLS
=
[
"
runBackgroundTask
"
]
;
async
function
runBackgroundTask
(
commandLine
)
{
let
cwd
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
let
protocolHandler
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
var
curDirURI
=
Services
.
io
.
newFileURI
(
cwd
)
;
protocolHandler
.
setSubstitution
(
"
test
"
curDirURI
)
;
const
{
CrashTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
test
/
CrashTestUtils
.
jsm
"
)
;
var
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
var
tmpd
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
tmpd
.
initWithPath
(
env
.
get
(
"
XPCSHELL_TEST_TEMP_DIR
"
)
)
;
var
crashReporter
=
Cc
[
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
]
.
getService
(
Ci
.
nsICrashReporter
)
;
crashReporter
.
UpdateCrashEventsDir
(
)
;
crashReporter
.
minidumpPath
=
tmpd
;
let
i
=
0
;
let
crashType
=
Number
.
parseInt
(
commandLine
.
getArgument
(
i
)
)
;
i
+
=
1
;
while
(
i
+
1
<
commandLine
.
length
)
{
let
key
=
commandLine
.
getArgument
(
i
)
;
let
value
=
commandLine
.
getArgument
(
i
+
1
)
;
i
+
=
2
;
crashReporter
.
annotateCrashReport
(
key
value
)
;
}
console
.
log
(
Crashing
with
crash
type
{
crashType
}
)
;
CrashTestUtils
.
crash
(
crashType
)
;
return
1
;
}
