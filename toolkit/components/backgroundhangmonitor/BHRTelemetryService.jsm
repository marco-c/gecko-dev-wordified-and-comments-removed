"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
TelemetryController
"
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
function
BHRTelemetryService
(
)
{
this
.
wrappedJSObject
=
this
;
Services
.
obs
.
addObserver
(
this
"
profile
-
before
-
change
"
)
;
Services
.
obs
.
addObserver
(
this
"
bhr
-
thread
-
hang
"
)
;
Services
.
obs
.
addObserver
(
this
"
idle
-
daily
"
)
;
this
.
resetPayload
(
)
;
}
BHRTelemetryService
.
prototype
=
Object
.
freeze
(
{
classID
:
Components
.
ID
(
"
{
117c8cdf
-
69e6
-
4f31
-
a439
-
b8a654c67127
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
TRANSMIT_HANG_COUNT
:
50
resetPayload
(
)
{
this
.
startTime
=
+
new
Date
(
)
;
this
.
payload
=
{
modules
:
[
]
hangs
:
[
]
}
;
this
.
clearPermahangFile
=
false
;
}
recordHang
(
{
duration
thread
runnableName
process
stack
remoteType
modules
annotations
wasPersisted
}
)
{
if
(
!
Services
.
telemetry
.
canRecordExtended
)
{
return
;
}
let
moduleIdxs
=
modules
.
map
(
module
=
>
{
let
idx
=
this
.
payload
.
modules
.
findIndex
(
m
=
>
{
return
m
[
0
]
=
=
=
module
[
0
]
&
&
m
[
1
]
=
=
=
module
[
1
]
;
}
)
;
if
(
idx
=
=
=
-
1
)
{
idx
=
this
.
payload
.
modules
.
length
;
this
.
payload
.
modules
.
push
(
module
)
;
}
return
idx
;
}
)
;
for
(
let
i
=
0
;
i
<
stack
.
length
;
+
+
i
)
{
if
(
Array
.
isArray
(
stack
[
i
]
)
&
&
stack
[
i
]
[
0
]
!
=
=
-
1
)
{
stack
[
i
]
[
0
]
=
moduleIdxs
[
stack
[
i
]
[
0
]
]
;
}
else
if
(
typeof
stack
[
i
]
=
=
"
string
"
)
{
let
match
=
/
[
^
\
s
]
+
:
\
/
\
/
.
*
/
.
exec
(
stack
[
i
]
)
;
if
(
match
&
&
!
match
[
0
]
.
startsWith
(
"
chrome
:
/
/
"
)
&
&
!
match
[
0
]
.
startsWith
(
"
resource
:
/
/
"
)
)
{
stack
[
i
]
=
stack
[
i
]
.
replace
(
match
[
0
]
"
(
excluded
)
"
)
;
}
}
}
this
.
payload
.
hangs
.
push
(
{
duration
thread
runnableName
process
remoteType
annotations
stack
}
)
;
if
(
wasPersisted
)
{
this
.
clearPermahangFile
=
true
;
}
if
(
this
.
payload
.
hangs
.
length
>
this
.
TRANSMIT_HANG_COUNT
)
{
this
.
submit
(
)
;
}
}
submit
(
)
{
if
(
this
.
clearPermahangFile
)
{
lazy
.
OS
.
File
.
remove
(
lazy
.
OS
.
Path
.
join
(
lazy
.
OS
.
Constants
.
Path
.
profileDir
"
last_permahang
.
bin
"
)
{
ignoreAbsent
:
true
}
)
;
}
if
(
!
Services
.
telemetry
.
canRecordExtended
)
{
return
;
}
if
(
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
telemetry
.
bhrPing
.
enabled
"
false
)
)
{
this
.
payload
.
timeSinceLastPing
=
new
Date
(
)
-
this
.
startTime
;
lazy
.
TelemetryController
.
submitExternalPing
(
"
bhr
"
this
.
payload
{
addEnvironment
:
true
}
)
;
}
this
.
resetPayload
(
)
;
}
shutdown
(
)
{
Services
.
obs
.
removeObserver
(
this
"
profile
-
before
-
change
"
)
;
Services
.
obs
.
removeObserver
(
this
"
bhr
-
thread
-
hang
"
)
;
Services
.
obs
.
removeObserver
(
this
"
idle
-
daily
"
)
;
this
.
submit
(
)
;
}
observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
profile
-
after
-
change
"
:
this
.
resetPayload
(
)
;
break
;
case
"
bhr
-
thread
-
hang
"
:
this
.
recordHang
(
aSubject
.
QueryInterface
(
Ci
.
nsIHangDetails
)
)
;
break
;
case
"
profile
-
before
-
change
"
:
this
.
shutdown
(
)
;
break
;
case
"
idle
-
daily
"
:
this
.
submit
(
)
;
break
;
}
}
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
BHRTelemetryService
"
]
;
