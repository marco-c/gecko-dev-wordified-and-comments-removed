#
ifndef
mozilla_HangAnnotations_h
#
define
mozilla_HangAnnotations_h
#
include
<
set
>
#
include
"
mozilla
/
HangTypes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
ipc
/
IPDLParamTraits
.
h
"
namespace
mozilla
{
class
BackgroundHangAnnotations
:
public
nsTArray
<
HangAnnotation
>
{
public
:
void
AddAnnotation
(
const
nsString
&
aName
const
int32_t
aData
)
;
void
AddAnnotation
(
const
nsString
&
aName
const
double
aData
)
;
void
AddAnnotation
(
const
nsString
&
aName
const
nsString
&
aData
)
;
void
AddAnnotation
(
const
nsString
&
aName
const
nsCString
&
aData
)
;
void
AddAnnotation
(
const
nsString
&
aName
const
bool
aData
)
;
}
;
class
BackgroundHangAnnotator
{
public
:
virtual
void
AnnotateHang
(
BackgroundHangAnnotations
&
aAnnotations
)
=
0
;
}
;
class
BackgroundHangAnnotators
{
public
:
BackgroundHangAnnotators
(
)
;
~
BackgroundHangAnnotators
(
)
;
bool
Register
(
BackgroundHangAnnotator
&
aAnnotator
)
;
bool
Unregister
(
BackgroundHangAnnotator
&
aAnnotator
)
;
BackgroundHangAnnotations
GatherAnnotations
(
)
;
private
:
Mutex
mMutex
;
std
:
:
set
<
BackgroundHangAnnotator
*
>
mAnnotators
;
}
;
namespace
ipc
{
template
<
>
struct
IPDLParamTraits
<
mozilla
:
:
BackgroundHangAnnotations
>
:
public
IPDLParamTraits
<
nsTArray
<
mozilla
:
:
HangAnnotation
>
>
{
typedef
mozilla
:
:
BackgroundHangAnnotations
paramType
;
}
;
}
}
#
endif
