#
ifndef
mozilla_HangDetails_h
#
define
mozilla_HangDetails_h
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
ProcessedStack
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
HangStack
.
h
"
#
include
"
mozilla
/
HangAnnotations
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIHangDetails
.
h
"
namespace
mozilla
{
class
HangDetails
{
public
:
HangDetails
(
)
:
mDuration
(
0
)
mProcess
(
GeckoProcessType_Invalid
)
mRemoteType
(
NullString
(
)
)
{
}
HangDetails
(
const
HangDetails
&
aOther
)
=
default
;
HangDetails
(
HangDetails
&
&
aOther
)
=
default
;
HangDetails
(
uint32_t
aDuration
GeckoProcessType
aProcess
const
nsACString
&
aThreadName
const
nsACString
&
aRunnableName
HangStack
&
&
aStack
HangMonitor
:
:
HangAnnotations
&
&
aAnnotations
)
:
mDuration
(
aDuration
)
mProcess
(
aProcess
)
mRemoteType
(
NullString
(
)
)
mThreadName
(
aThreadName
)
mRunnableName
(
aRunnableName
)
mStack
(
Move
(
aStack
)
)
mAnnotations
(
Move
(
aAnnotations
)
)
{
}
uint32_t
mDuration
;
GeckoProcessType
mProcess
;
nsString
mRemoteType
;
nsCString
mThreadName
;
nsCString
mRunnableName
;
HangStack
mStack
;
HangMonitor
:
:
HangAnnotations
mAnnotations
;
}
;
class
nsHangDetails
:
public
nsIHangDetails
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIHANGDETAILS
explicit
nsHangDetails
(
HangDetails
&
&
aDetails
)
:
mDetails
(
Move
(
aDetails
)
)
{
}
void
Submit
(
)
;
private
:
virtual
~
nsHangDetails
(
)
{
}
HangDetails
mDetails
;
}
;
class
ProcessHangStackRunnable
final
:
public
Runnable
{
public
:
explicit
ProcessHangStackRunnable
(
HangDetails
&
&
aHangDetails
)
:
Runnable
(
"
ProcessHangStackRunnable
"
)
mHangDetails
(
Move
(
aHangDetails
)
)
{
}
NS_IMETHOD
Run
(
)
override
;
private
:
HangDetails
mHangDetails
;
}
;
}
namespace
IPC
{
template
<
>
class
ParamTraits
<
mozilla
:
:
HangDetails
>
{
public
:
typedef
mozilla
:
:
HangDetails
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
;
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
;
}
;
}
#
endif
