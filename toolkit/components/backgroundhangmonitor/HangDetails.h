#
ifndef
mozilla_HangDetails_h
#
define
mozilla_HangDetails_h
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
ProcessedStack
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
HangTypes
.
h
"
#
include
"
mozilla
/
HangAnnotations
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIHangDetails
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
class
nsHangDetails
:
public
nsIHangDetails
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIHANGDETAILS
explicit
nsHangDetails
(
HangDetails
&
&
aDetails
)
:
mDetails
(
Move
(
aDetails
)
)
{
}
void
Submit
(
)
;
private
:
virtual
~
nsHangDetails
(
)
{
}
HangDetails
mDetails
;
}
;
class
ProcessHangStackRunnable
final
:
public
Runnable
{
public
:
explicit
ProcessHangStackRunnable
(
HangDetails
&
&
aHangDetails
)
:
Runnable
(
"
ProcessHangStackRunnable
"
)
mHangDetails
(
Move
(
aHangDetails
)
)
{
}
NS_IMETHOD
Run
(
)
override
;
private
:
HangDetails
mHangDetails
;
}
;
}
namespace
IPC
{
template
<
>
class
ParamTraits
<
mozilla
:
:
HangDetails
>
{
public
:
typedef
mozilla
:
:
HangDetails
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
;
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
;
}
;
}
#
endif
