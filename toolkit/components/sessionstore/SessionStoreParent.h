#
ifndef
mozilla_dom_SessionStoreParent_h
#
define
mozilla_dom_SessionStoreParent_h
#
include
"
mozilla
/
dom
/
BrowserSessionStore
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
PSessionStoreParent
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
namespace
mozilla
:
:
dom
{
class
BrowserParent
;
class
SessionStoreParent
final
:
public
PSessionStoreParent
{
public
:
SessionStoreParent
(
CanonicalBrowsingContext
*
aBrowsingContext
BrowserSessionStore
*
aSessionStore
)
;
void
FlushAllSessionStoreChildren
(
const
std
:
:
function
<
void
(
)
>
&
aDone
)
;
void
FinalFlushAllSessionStoreChildren
(
const
std
:
:
function
<
void
(
)
>
&
aDone
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSessionStoreUpdate
(
const
Maybe
<
nsCString
>
&
aDocShellCaps
const
Maybe
<
bool
>
&
aPrivatedMode
const
bool
aNeedCollectSHistory
const
uint32_t
&
aEpoch
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvIncrementalSessionStoreUpdate
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aBrowsingContext
const
Maybe
<
FormData
>
&
aFormData
const
Maybe
<
nsPoint
>
&
aScrollPosition
uint32_t
aEpoch
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvResetSessionStore
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aBrowsingContext
uint32_t
aEpoch
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
SessionStoreParent
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
SessionStoreParent
)
private
:
~
SessionStoreParent
(
)
=
default
;
already_AddRefed
<
SessionStoreParent
:
:
FlushTabStatePromise
>
FlushSessionStore
(
)
;
RefPtr
<
CanonicalBrowsingContext
>
mBrowsingContext
;
RefPtr
<
BrowserSessionStore
>
mSessionStore
;
}
;
}
#
endif
