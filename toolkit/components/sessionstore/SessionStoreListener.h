#
ifndef
mozilla_dom_SessionStoreListener_h
#
define
mozilla_dom_SessionStoreListener_h
#
include
"
SessionStoreData
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPrivacyTransitionObserver
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsITimer
;
namespace
mozilla
:
:
dom
{
class
ContentSessionStore
{
public
:
explicit
ContentSessionStore
(
nsIDocShell
*
aDocShell
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
ContentSessionStore
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
ContentSessionStore
)
void
OnPrivateModeChanged
(
bool
aEnabled
)
;
bool
IsDocCapChanged
(
)
{
return
mDocCapChanged
;
}
nsCString
GetDocShellCaps
(
)
;
bool
IsPrivateChanged
(
)
{
return
mPrivateChanged
;
}
bool
GetPrivateModeEnabled
(
)
;
void
SetSHistoryChanged
(
)
;
bool
GetAndClearSHistoryChanged
(
)
{
bool
ret
=
mSHistoryChanged
;
mSHistoryChanged
=
false
;
return
ret
;
}
void
OnDocumentStart
(
)
;
void
OnDocumentEnd
(
)
;
bool
UpdateNeeded
(
)
{
return
mPrivateChanged
|
|
mDocCapChanged
|
|
mSHistoryChanged
;
}
private
:
virtual
~
ContentSessionStore
(
)
=
default
;
nsCString
CollectDocShellCapabilities
(
)
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
bool
mPrivateChanged
;
bool
mIsPrivate
;
bool
mDocCapChanged
;
nsCString
mDocCaps
;
bool
mSHistoryChanged
;
}
;
#
define
NS_TABLISTENER_IID
\
{
0x14426f68
0x3948
0x4c18
{
0x9c
0xf6
0x20
0x74
0x37
0xcb
0xb9
0x87
}
}
class
TabListener
:
public
nsIDOMEventListener
public
nsIObserver
public
nsIPrivacyTransitionObserver
public
nsIWebProgressListener
public
nsSupportsWeakReference
{
public
:
NS_INLINE_DECL_STATIC_IID
(
NS_TABLISTENER_IID
)
explicit
TabListener
(
nsIDocShell
*
aDocShell
Element
*
aElement
)
;
EventTarget
*
GetEventTarget
(
)
;
nsresult
Init
(
)
;
ContentSessionStore
*
GetSessionStore
(
)
{
return
mSessionStore
;
}
void
ForceFlushFromParent
(
)
;
void
RemoveListeners
(
)
;
void
SetEpoch
(
uint32_t
aEpoch
)
{
mEpoch
=
aEpoch
;
}
uint32_t
GetEpoch
(
)
{
return
mEpoch
;
}
void
UpdateSHistoryChanges
(
)
{
mSessionStore
-
>
SetSHistoryChanged
(
)
;
AddTimerForUpdate
(
)
;
}
void
SetOwnerContent
(
Element
*
aElement
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
TabListener
nsIDOMEventListener
)
NS_DECL_NSIDOMEVENTLISTENER
NS_DECL_NSIOBSERVER
NS_DECL_NSIPRIVACYTRANSITIONOBSERVER
NS_DECL_NSIWEBPROGRESSLISTENER
private
:
void
AddTimerForUpdate
(
)
;
void
StopTimerForUpdate
(
)
;
void
AddEventListeners
(
)
;
void
RemoveEventListeners
(
)
;
void
UpdateSessionStore
(
bool
aIsFlush
=
false
)
;
virtual
~
TabListener
(
)
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
RefPtr
<
ContentSessionStore
>
mSessionStore
;
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mOwnerContent
;
bool
mProgressListenerRegistered
;
bool
mEventListenerRegistered
;
bool
mPrefObserverRegistered
;
nsCOMPtr
<
nsITimer
>
mUpdatedTimer
;
bool
mTimeoutDisabled
;
int32_t
mUpdateInterval
;
uint32_t
mEpoch
;
}
;
}
#
endif
