#
ifndef
mozilla_dom_SessionStoreListener_h
#
define
mozilla_dom_SessionStoreListener_h
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIPrivacyTransitionObserver
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
SessionStoreData
.
h
"
class
nsITimer
;
namespace
mozilla
{
namespace
dom
{
class
StorageEvent
;
class
ContentSessionStore
{
public
:
explicit
ContentSessionStore
(
nsIDocShell
*
aDocShell
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
ContentSessionStore
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
ContentSessionStore
)
void
OnPrivateModeChanged
(
bool
aEnabled
)
;
bool
IsDocCapChanged
(
)
{
return
mDocCapChanged
;
}
nsCString
GetDocShellCaps
(
)
;
bool
IsPrivateChanged
(
)
{
return
mPrivateChanged
;
}
bool
GetPrivateModeEnabled
(
)
;
void
SetScrollPositionChanged
(
)
{
mScrollChanged
=
WITH_CHANGE
;
}
bool
IsScrollPositionChanged
(
)
{
return
mScrollChanged
!
=
NO_CHANGE
;
}
void
GetScrollPositions
(
nsTArray
<
nsCString
>
&
aPositions
nsTArray
<
int32_t
>
&
aPositionDescendants
)
;
void
SetFormDataChanged
(
)
{
mFormDataChanged
=
WITH_CHANGE
;
}
bool
IsFormDataChanged
(
)
{
return
mFormDataChanged
!
=
NO_CHANGE
;
}
nsTArray
<
InputFormData
>
GetInputs
(
nsTArray
<
CollectedInputDataValue
>
&
aIdVals
nsTArray
<
CollectedInputDataValue
>
&
aXPathVals
)
;
bool
IsStorageUpdated
(
)
{
return
mStorageStatus
!
=
NO_STORAGE
;
}
void
ResetStorage
(
)
{
mStorageStatus
=
RESET
;
}
void
SetFullStorageNeeded
(
)
;
void
ResetStorageChanges
(
)
;
bool
GetAndClearStorageChanges
(
nsTArray
<
nsCString
>
&
aOrigins
nsTArray
<
nsString
>
&
aKeys
nsTArray
<
nsString
>
&
aValues
)
;
bool
AppendSessionStorageChange
(
StorageEvent
*
aEvent
)
;
void
SetSHistoryChanged
(
)
;
void
SetSHistoryFromParentChanged
(
)
;
bool
GetAndClearSHistoryChanged
(
)
{
bool
ret
=
mSHistoryChanged
;
mSHistoryChanged
=
false
;
mSHistoryChangedFromParent
=
false
;
return
ret
;
}
void
OnDocumentStart
(
)
;
void
OnDocumentEnd
(
)
;
bool
UpdateNeeded
(
)
{
return
mPrivateChanged
|
|
mDocCapChanged
|
|
IsScrollPositionChanged
(
)
|
|
IsFormDataChanged
(
)
|
|
IsStorageUpdated
(
)
|
|
mSHistoryChanged
|
|
mSHistoryChangedFromParent
;
}
private
:
virtual
~
ContentSessionStore
(
)
=
default
;
nsCString
CollectDocShellCapabilities
(
)
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
bool
mPrivateChanged
;
bool
mIsPrivate
;
enum
{
NO_CHANGE
PAGELOADEDSTART
WITH_CHANGE
}
mScrollChanged
mFormDataChanged
;
enum
{
NO_STORAGE
RESET
FULLSTORAGE
STORAGECHANGE
}
mStorageStatus
;
bool
mDocCapChanged
;
nsCString
mDocCaps
;
nsTArray
<
nsCString
>
mOrigins
;
nsTArray
<
nsString
>
mKeys
;
nsTArray
<
nsString
>
mValues
;
bool
mSHistoryChanged
;
bool
mSHistoryChangedFromParent
;
}
;
class
TabListener
:
public
nsIDOMEventListener
public
nsIObserver
public
nsIPrivacyTransitionObserver
public
nsIWebProgressListener
public
nsSupportsWeakReference
{
public
:
explicit
TabListener
(
nsIDocShell
*
aDocShell
Element
*
aElement
)
;
EventTarget
*
GetEventTarget
(
)
;
nsresult
Init
(
)
;
ContentSessionStore
*
GetSessionStore
(
)
{
return
mSessionStore
;
}
bool
ForceFlushFromParent
(
uint32_t
aFlushId
bool
aIsFinal
=
false
)
;
void
RemoveListeners
(
)
;
void
SetEpoch
(
uint32_t
aEpoch
)
{
mEpoch
=
aEpoch
;
}
uint32_t
GetEpoch
(
)
{
return
mEpoch
;
}
void
UpdateSHistoryChanges
(
bool
aImmediately
)
;
void
SetOwnerContent
(
Element
*
aElement
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
TabListener
nsIDOMEventListener
)
NS_DECL_NSIDOMEVENTLISTENER
NS_DECL_NSIOBSERVER
NS_DECL_NSIPRIVACYTRANSITIONOBSERVER
NS_DECL_NSIWEBPROGRESSLISTENER
private
:
static
void
TimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
AddTimerForUpdate
(
)
;
void
StopTimerForUpdate
(
)
;
void
AddEventListeners
(
)
;
void
RemoveEventListeners
(
)
;
bool
UpdateSessionStore
(
uint32_t
aFlushId
=
0
bool
aIsFinal
=
false
)
;
void
ResetStorageChangeListener
(
)
;
void
RemoveStorageChangeListener
(
)
;
virtual
~
TabListener
(
)
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
RefPtr
<
ContentSessionStore
>
mSessionStore
;
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mOwnerContent
;
bool
mProgressListenerRegistered
;
bool
mEventListenerRegistered
;
bool
mPrefObserverRegistered
;
bool
mStorageObserverRegistered
;
bool
mStorageChangeListenerRegistered
;
nsCOMPtr
<
nsITimer
>
mUpdatedTimer
;
bool
mTimeoutDisabled
;
int32_t
mUpdateInterval
;
uint32_t
mEpoch
;
}
;
}
}
#
endif
