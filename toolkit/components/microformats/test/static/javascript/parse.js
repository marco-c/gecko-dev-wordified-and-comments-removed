window
.
onload
=
function
(
)
{
var
form
;
form
=
document
.
getElementById
(
'
mf
-
form
'
)
;
form
.
onsubmit
=
function
(
e
)
{
e
=
(
e
)
?
e
:
window
.
event
;
if
(
e
.
preventDefault
)
{
e
.
preventDefault
(
)
;
}
else
{
event
.
returnValue
=
false
;
}
var
html
baseUrl
filter
collapsewhitespace
overlappingversions
impliedPropertiesByVersion
dateformatElt
dateformat
doc
node
options
mfJSON
parserJSONElt
;
html
=
document
.
getElementById
(
'
html
'
)
.
value
;
baseUrl
=
document
.
getElementById
(
'
baseurl
'
)
.
value
;
filters
=
document
.
getElementById
(
'
filters
'
)
.
value
;
collapsewhitespace
=
document
.
getElementById
(
'
collapsewhitespace
'
)
.
checked
;
parseLatLonGeo
=
document
.
getElementById
(
'
parseLatLonGeo
'
)
.
checked
;
dateformatElt
=
document
.
getElementById
(
"
dateformat
"
)
;
dateformat
=
dateformatElt
.
options
[
dateformatElt
.
selectedIndex
]
.
value
;
parserJSONElt
=
document
.
querySelector
(
'
#
parser
-
json
pre
code
'
)
var
dom
=
new
DOMParser
(
)
;
doc
=
dom
.
parseFromString
(
html
'
text
/
html
'
)
;
options
=
{
'
document
'
:
doc
'
node
'
:
doc
'
dateFormat
'
:
dateformat
'
parseLatLonGeo
'
:
false
}
;
if
(
baseUrl
.
trim
(
)
!
=
=
'
'
)
{
options
.
baseUrl
=
baseUrl
;
}
if
(
filters
.
trim
(
)
!
=
=
'
'
)
{
if
(
filters
.
indexOf
(
'
'
)
>
-
1
)
{
options
.
filters
=
trimArrayItems
(
filters
.
split
(
'
'
)
)
;
}
else
{
options
.
filters
=
[
filters
.
trim
(
)
]
;
}
}
if
(
collapsewhitespace
=
=
=
true
)
{
options
.
textFormat
=
'
normalised
'
;
}
if
(
parseLatLonGeo
=
=
=
true
)
{
options
.
parseLatLonGeo
=
true
}
if
(
options
.
baseUrl
)
{
html
=
'
<
base
href
=
"
'
+
baseUrl
+
'
"
>
'
+
html
;
}
if
(
window
.
Modules
)
{
var
parser
=
new
Modules
.
Parser
(
)
;
mfJSON
=
parser
.
get
(
options
)
;
}
else
if
(
window
.
Microformats
)
{
mfJSON
=
Microformats
.
get
(
options
)
;
}
parserJSONElt
.
innerHTML
=
htmlEscape
(
js_beautify
(
JSON
.
stringify
(
mfJSON
)
)
)
;
}
}
;
function
htmlEscape
(
str
)
{
return
String
(
str
)
.
replace
(
/
&
/
g
'
&
amp
;
'
)
.
replace
(
/
"
/
g
'
&
quot
;
'
)
.
replace
(
/
'
/
g
'
&
#
39
;
'
)
.
replace
(
/
<
/
g
'
&
lt
;
'
)
.
replace
(
/
>
/
g
'
&
gt
;
'
)
;
}
function
trimArrayItems
(
arr
)
{
return
arr
.
map
(
function
(
item
)
{
return
item
.
trim
(
)
;
}
)
}
