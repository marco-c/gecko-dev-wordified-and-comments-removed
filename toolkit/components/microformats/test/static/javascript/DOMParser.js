(
function
(
DOMParser
)
{
"
use
strict
"
;
var
DOMParser_proto
;
var
real_parseFromString
;
var
textHTML
;
var
textXML
;
var
htmlElInnerHTML
;
if
(
!
DOMParser
)
return
;
try
{
textHTML
=
!
!
(
new
DOMParser
)
.
parseFromString
(
'
'
'
text
/
html
'
)
;
}
catch
(
er
)
{
textHTML
=
false
;
}
if
(
textHTML
)
return
;
try
{
var
doc
=
document
.
implementation
.
createHTMLDocument
(
'
'
)
;
doc
.
documentElement
.
innerHTML
=
'
<
title
>
<
/
title
>
<
div
>
<
/
div
>
'
;
htmlElInnerHTML
=
true
;
}
catch
(
er
)
{
htmlElInnerHTML
=
false
;
}
if
(
!
htmlElInnerHTML
)
{
try
{
textXML
=
!
!
(
new
DOMParser
)
.
parseFromString
(
'
'
'
text
/
xml
'
)
;
}
catch
(
er
)
{
textHTML
=
false
;
}
}
if
(
DOMParser
.
prototype
&
&
(
htmlElInnerHTML
|
|
textXML
)
)
{
DOMParser_proto
=
DOMParser
.
prototype
;
real_parseFromString
=
DOMParser_proto
.
parseFromString
;
DOMParser_proto
.
parseFromString
=
function
(
markup
type
)
{
if
(
/
^
\
s
*
text
\
/
html
\
s
*
(
?
:
;
|
)
/
i
.
test
(
type
)
)
{
var
doc
doc_el
first_el
;
if
(
htmlElInnerHTML
)
{
doc
=
document
.
implementation
.
createHTMLDocument
(
"
"
)
;
doc_el
=
doc
.
documentElement
;
doc_el
.
innerHTML
=
markup
;
first_el
=
doc_el
.
firstElementChild
;
}
else
if
(
textXML
)
{
if
(
!
(
/
^
<
html
.
*
html
>
/
i
.
test
(
markup
)
)
)
{
markup
=
'
<
html
>
'
+
markup
+
'
<
\
/
html
>
'
;
}
doc
=
(
new
DOMParser
)
.
parseFromString
(
markup
'
text
/
xml
'
)
;
doc_el
=
doc
.
documentElement
;
first_el
=
doc_el
.
firstElementChild
;
}
if
(
doc_el
.
childElementCount
=
=
1
&
&
first_el
.
localName
.
toLowerCase
(
)
=
=
'
html
'
)
{
doc
.
replaceChild
(
first_el
doc_el
)
;
}
return
doc
;
}
else
{
return
real_parseFromString
.
apply
(
this
arguments
)
;
}
}
;
}
}
(
DOMParser
)
)
;
