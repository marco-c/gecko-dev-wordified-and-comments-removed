var
Modules
=
(
function
(
modules
)
{
if
(
modules
.
Parser
)
{
modules
.
Parser
.
prototype
.
addIncludes
=
function
(
rootNode
)
{
this
.
addAttributeIncludes
(
rootNode
'
itemref
'
)
;
this
.
addAttributeIncludes
(
rootNode
'
headers
'
)
;
this
.
addClassIncludes
(
rootNode
)
;
}
;
modules
.
Parser
.
prototype
.
addAttributeIncludes
=
function
(
rootNode
attributeName
)
{
var
arr
idList
i
x
z
y
;
arr
=
modules
.
domUtils
.
getNodesByAttribute
(
rootNode
attributeName
)
;
x
=
0
;
i
=
arr
.
length
;
while
(
x
<
i
)
{
idList
=
modules
.
domUtils
.
getAttributeList
(
arr
[
x
]
attributeName
)
;
if
(
idList
)
{
z
=
0
;
y
=
idList
.
length
;
while
(
z
<
y
)
{
this
.
apppendInclude
(
arr
[
x
]
idList
[
z
]
)
;
z
+
+
;
}
}
x
+
+
;
}
}
;
modules
.
Parser
.
prototype
.
addClassIncludes
=
function
(
rootNode
)
{
var
id
arr
x
=
0
i
;
arr
=
modules
.
domUtils
.
getNodesByAttributeValue
(
rootNode
'
class
'
'
include
'
)
;
i
=
arr
.
length
;
while
(
x
<
i
)
{
id
=
modules
.
domUtils
.
getAttrValFromTagList
(
arr
[
x
]
[
'
a
'
]
'
href
'
)
;
if
(
!
id
)
{
id
=
modules
.
domUtils
.
getAttrValFromTagList
(
arr
[
x
]
[
'
object
'
]
'
data
'
)
;
}
this
.
apppendInclude
(
arr
[
x
]
id
)
;
x
+
+
;
}
}
;
modules
.
Parser
.
prototype
.
apppendInclude
=
function
(
node
id
)
{
var
include
clone
;
id
=
modules
.
utils
.
trim
(
id
.
replace
(
'
#
'
'
'
)
)
;
include
=
modules
.
domUtils
.
getElementById
(
this
.
document
id
)
;
if
(
include
)
{
clone
=
modules
.
domUtils
.
clone
(
include
)
;
this
.
markIncludeChildren
(
clone
)
;
modules
.
domUtils
.
appendChild
(
node
clone
)
;
}
}
;
modules
.
Parser
.
prototype
.
markIncludeChildren
=
function
(
rootNode
)
{
var
arr
x
i
;
arr
=
this
.
findRootNodes
(
rootNode
)
;
x
=
0
;
i
=
arr
.
length
;
modules
.
domUtils
.
setAttribute
(
rootNode
'
data
-
include
'
'
true
'
)
;
modules
.
domUtils
.
setAttribute
(
rootNode
'
style
'
'
display
:
none
'
)
;
while
(
x
<
i
)
{
modules
.
domUtils
.
setAttribute
(
arr
[
x
]
'
data
-
include
'
'
true
'
)
;
x
+
+
;
}
}
;
modules
.
Parser
.
prototype
.
removeIncludes
=
function
(
rootNode
)
{
var
arr
i
;
arr
=
modules
.
domUtils
.
getNodesByAttribute
(
rootNode
'
data
-
include
'
)
;
i
=
arr
.
length
;
while
(
i
-
-
)
{
modules
.
domUtils
.
removeChild
(
rootNode
arr
[
i
]
)
;
}
}
;
}
return
modules
;
}
(
Modules
|
|
{
}
)
)
;
