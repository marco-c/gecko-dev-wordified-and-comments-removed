var
Modules
=
(
function
(
modules
)
{
modules
.
ISODate
=
function
(
dateString
format
)
{
this
.
clear
(
)
;
this
.
format
=
(
format
)
?
format
:
'
auto
'
;
this
.
setFormatSep
(
)
;
if
(
arguments
[
0
]
)
{
this
.
parse
(
dateString
format
)
;
}
}
;
modules
.
ISODate
.
prototype
=
{
clear
:
function
(
)
{
this
.
clearDate
(
)
;
this
.
clearTime
(
)
;
this
.
clearTimeZone
(
)
;
this
.
setAutoProfileState
(
)
;
}
clearDate
:
function
(
)
{
this
.
dY
=
-
1
;
this
.
dM
=
-
1
;
this
.
dD
=
-
1
;
this
.
dDDD
=
-
1
;
}
clearTime
:
function
(
)
{
this
.
tH
=
-
1
;
this
.
tM
=
-
1
;
this
.
tS
=
-
1
;
this
.
tD
=
-
1
;
}
clearTimeZone
:
function
(
)
{
this
.
tzH
=
-
1
;
this
.
tzM
=
-
1
;
this
.
tzPN
=
'
+
'
;
this
.
z
=
false
;
}
setAutoProfileState
:
function
(
)
{
this
.
autoProfile
=
{
sep
:
'
T
'
dsep
:
'
-
'
tsep
:
'
:
'
tzsep
:
'
:
'
tzZulu
:
'
Z
'
}
;
}
parse
:
function
(
dateString
format
)
{
this
.
clear
(
)
;
var
parts
=
[
]
tzArray
=
[
]
position
=
0
datePart
=
'
'
timePart
=
'
'
timeZonePart
=
'
'
;
if
(
format
)
{
this
.
format
=
format
;
}
if
(
dateString
.
indexOf
(
'
t
'
)
>
-
1
)
{
this
.
autoProfile
.
sep
=
'
t
'
;
}
if
(
dateString
.
indexOf
(
'
z
'
)
>
-
1
)
{
this
.
autoProfile
.
tzZulu
=
'
z
'
;
}
if
(
dateString
.
indexOf
(
'
Z
'
)
>
-
1
)
{
this
.
autoProfile
.
tzZulu
=
'
Z
'
;
}
if
(
!
dateString
.
toUpperCase
(
)
.
includes
(
'
T
'
)
)
{
this
.
autoProfile
.
sep
=
'
'
;
}
dateString
=
dateString
.
toUpperCase
(
)
.
replace
(
'
'
'
T
'
)
;
if
(
dateString
.
indexOf
(
'
T
'
)
>
-
1
)
{
parts
=
dateString
.
split
(
'
T
'
)
;
datePart
=
parts
[
0
]
;
timePart
=
parts
[
1
]
;
if
(
timePart
.
indexOf
(
'
Z
'
)
>
-
1
)
{
this
.
z
=
true
;
}
if
(
timePart
.
indexOf
(
'
+
'
)
>
-
1
|
|
timePart
.
indexOf
(
'
-
'
)
>
-
1
)
{
tzArray
=
timePart
.
split
(
'
Z
'
)
;
timePart
=
tzArray
[
0
]
;
timeZonePart
=
tzArray
[
1
]
;
if
(
timePart
.
indexOf
(
'
+
'
)
>
-
1
|
|
timePart
.
indexOf
(
'
-
'
)
>
-
1
)
{
position
=
0
;
if
(
timePart
.
indexOf
(
'
+
'
)
>
-
1
)
{
position
=
timePart
.
indexOf
(
'
+
'
)
;
}
else
{
position
=
timePart
.
indexOf
(
'
-
'
)
;
}
timeZonePart
=
timePart
.
substring
(
position
timePart
.
length
)
;
timePart
=
timePart
.
substring
(
0
position
)
;
}
}
}
else
{
datePart
=
dateString
;
}
if
(
datePart
!
=
=
'
'
)
{
this
.
parseDate
(
datePart
)
;
if
(
timePart
!
=
=
'
'
)
{
this
.
parseTime
(
timePart
)
;
if
(
timeZonePart
!
=
=
'
'
)
{
this
.
parseTimeZone
(
timeZonePart
)
;
}
}
}
return
this
.
toString
(
format
)
;
}
parseDate
:
function
(
dateString
format
)
{
this
.
clearDate
(
)
;
var
parts
=
[
]
;
if
(
!
dateString
.
includes
(
'
-
'
)
)
{
this
.
autoProfile
.
tsep
=
'
'
;
}
parts
=
dateString
.
match
(
/
(
\
d
\
d
\
d
\
d
)
-
(
\
d
\
d
\
d
)
/
)
;
if
(
parts
)
{
if
(
parts
[
1
]
)
{
this
.
dY
=
parts
[
1
]
;
}
if
(
parts
[
2
]
)
{
this
.
dDDD
=
parts
[
2
]
;
}
}
if
(
this
.
dDDD
=
=
=
-
1
)
{
parts
=
dateString
.
match
(
/
(
\
d
\
d
\
d
\
d
)
?
-
?
(
\
d
\
d
)
?
-
?
(
\
d
\
d
)
?
/
)
;
if
(
parts
[
1
]
)
{
this
.
dY
=
parts
[
1
]
;
}
if
(
parts
[
2
]
)
{
this
.
dM
=
parts
[
2
]
;
}
if
(
parts
[
3
]
)
{
this
.
dD
=
parts
[
3
]
;
}
}
return
this
.
toString
(
format
)
;
}
parseTime
:
function
(
timeString
format
)
{
this
.
clearTime
(
)
;
var
parts
=
[
]
;
if
(
!
timeString
.
includes
(
'
:
'
)
)
{
this
.
autoProfile
.
tsep
=
'
'
;
}
parts
=
timeString
.
match
(
/
(
\
d
\
d
)
?
:
?
(
\
d
\
d
)
?
:
?
(
\
d
\
d
)
?
.
?
(
[
0
-
9
]
+
)
?
/
)
;
if
(
parts
[
1
]
)
{
this
.
tH
=
parts
[
1
]
;
}
if
(
parts
[
2
]
)
{
this
.
tM
=
parts
[
2
]
;
}
if
(
parts
[
3
]
)
{
this
.
tS
=
parts
[
3
]
;
}
if
(
parts
[
4
]
)
{
this
.
tD
=
parts
[
4
]
;
}
return
this
.
toTimeString
(
format
)
;
}
parseTimeZone
:
function
(
timeString
format
)
{
this
.
clearTimeZone
(
)
;
var
parts
=
[
]
;
if
(
timeString
.
toLowerCase
(
)
=
=
=
'
z
'
)
{
this
.
z
=
true
;
this
.
autoProfile
.
tzZulu
=
(
timeString
=
=
=
'
z
'
)
?
'
z
'
:
'
Z
'
;
}
else
{
if
(
!
timeString
.
includes
(
'
:
'
)
)
{
this
.
autoProfile
.
tzsep
=
'
'
;
}
parts
=
timeString
.
match
(
/
(
[
\
-
\
+
]
{
1
}
)
?
(
\
d
\
d
)
?
:
?
(
\
d
\
d
)
?
/
)
;
if
(
parts
[
1
]
)
{
this
.
tzPN
=
parts
[
1
]
;
}
if
(
parts
[
2
]
)
{
this
.
tzH
=
parts
[
2
]
;
}
if
(
parts
[
3
]
)
{
this
.
tzM
=
parts
[
3
]
;
}
}
this
.
tzZulu
=
'
z
'
;
return
this
.
toTimeString
(
format
)
;
}
toString
:
function
(
format
)
{
var
output
=
'
'
;
if
(
format
)
{
this
.
format
=
format
;
}
this
.
setFormatSep
(
)
;
if
(
this
.
dY
>
-
1
)
{
output
=
this
.
dY
;
if
(
this
.
dM
>
0
&
&
this
.
dM
<
13
)
{
output
+
=
this
.
dsep
+
this
.
dM
;
if
(
this
.
dD
>
0
&
&
this
.
dD
<
32
)
{
output
+
=
this
.
dsep
+
this
.
dD
;
if
(
this
.
tH
>
-
1
&
&
this
.
tH
<
25
)
{
output
+
=
this
.
sep
+
this
.
toTimeString
(
format
)
;
}
}
}
if
(
this
.
dDDD
>
-
1
)
{
output
+
=
this
.
dsep
+
this
.
dDDD
;
}
}
else
if
(
this
.
tH
>
-
1
)
{
output
+
=
this
.
toTimeString
(
format
)
;
}
return
output
;
}
toTimeString
:
function
(
format
)
{
var
out
=
'
'
;
if
(
format
)
{
this
.
format
=
format
;
}
this
.
setFormatSep
(
)
;
if
(
this
.
tH
)
{
if
(
this
.
tH
>
-
1
&
&
this
.
tH
<
25
)
{
out
+
=
this
.
tH
;
if
(
this
.
tM
>
-
1
&
&
this
.
tM
<
61
)
{
out
+
=
this
.
tsep
+
this
.
tM
;
if
(
this
.
tS
>
-
1
&
&
this
.
tS
<
61
)
{
out
+
=
this
.
tsep
+
this
.
tS
;
if
(
this
.
tD
>
-
1
)
{
out
+
=
'
.
'
+
this
.
tD
;
}
}
}
if
(
this
.
z
)
{
out
+
=
this
.
tzZulu
;
}
else
{
if
(
this
.
tzH
&
&
this
.
tzH
>
-
1
&
&
this
.
tzH
<
25
)
{
out
+
=
this
.
tzPN
+
this
.
tzH
;
if
(
this
.
tzM
>
-
1
&
&
this
.
tzM
<
61
)
{
out
+
=
this
.
tzsep
+
this
.
tzM
;
}
}
}
}
}
return
out
;
}
setFormatSep
:
function
(
)
{
switch
(
this
.
format
.
toLowerCase
(
)
)
{
case
'
rfc3339
'
:
this
.
sep
=
'
T
'
;
this
.
dsep
=
'
'
;
this
.
tsep
=
'
'
;
this
.
tzsep
=
'
'
;
this
.
tzZulu
=
'
Z
'
;
break
;
case
'
w3c
'
:
this
.
sep
=
'
T
'
;
this
.
dsep
=
'
-
'
;
this
.
tsep
=
'
:
'
;
this
.
tzsep
=
'
:
'
;
this
.
tzZulu
=
'
Z
'
;
break
;
case
'
html5
'
:
this
.
sep
=
'
'
;
this
.
dsep
=
'
-
'
;
this
.
tsep
=
'
:
'
;
this
.
tzsep
=
'
:
'
;
this
.
tzZulu
=
'
Z
'
;
break
;
default
:
this
.
sep
=
this
.
autoProfile
.
sep
;
this
.
dsep
=
this
.
autoProfile
.
dsep
;
this
.
tsep
=
this
.
autoProfile
.
tsep
;
this
.
tzsep
=
this
.
autoProfile
.
tzsep
;
this
.
tzZulu
=
this
.
autoProfile
.
tzZulu
;
}
}
hasFullDate
:
function
(
)
{
return
(
this
.
dY
!
=
=
-
1
&
&
this
.
dM
!
=
=
-
1
&
&
this
.
dD
!
=
=
-
1
)
;
}
hasDate
:
function
(
)
{
return
(
this
.
dY
!
=
=
-
1
)
;
}
hasTime
:
function
(
)
{
return
(
this
.
tH
!
=
=
-
1
)
;
}
hasTimeZone
:
function
(
)
{
return
(
this
.
tzH
!
=
=
-
1
)
;
}
}
;
modules
.
ISODate
.
prototype
.
constructor
=
modules
.
ISODate
;
return
modules
;
}
(
Modules
|
|
{
}
)
)
;
