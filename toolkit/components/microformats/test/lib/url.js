var
Modules
=
(
function
(
modules
)
{
modules
.
url
=
{
init
:
function
(
)
{
this
.
_domParser
=
modules
.
domUtils
.
getDOMParser
(
)
;
this
.
_html
=
'
<
base
id
=
"
base
"
href
=
"
"
>
<
/
base
>
<
a
id
=
"
link
"
href
=
"
"
>
<
/
a
>
'
;
this
.
_nodes
=
this
.
_domParser
.
parseFromString
(
this
.
_html
'
text
/
html
'
)
;
this
.
_baseNode
=
modules
.
domUtils
.
getElementById
(
this
.
_nodes
'
base
'
)
;
this
.
_linkNode
=
modules
.
domUtils
.
getElementById
(
this
.
_nodes
'
link
'
)
;
}
resolve
:
function
(
url
baseUrl
)
{
if
(
modules
.
utils
.
isString
(
url
)
&
&
modules
.
utils
.
isString
(
baseUrl
)
&
&
url
.
indexOf
(
'
:
/
/
'
)
=
=
=
-
1
)
{
try
{
var
resolved
=
new
URL
(
url
baseUrl
)
.
toString
(
)
;
if
(
resolved
=
=
=
'
[
object
URL
]
'
)
{
resolved
=
URI
.
resolve
(
baseUrl
url
)
;
}
return
resolved
;
}
catch
(
e
)
{
if
(
this
.
_domParser
=
=
=
undefined
)
{
this
.
init
(
)
;
}
this
.
_baseNode
.
href
=
baseUrl
;
this
.
_linkNode
.
href
=
url
;
return
this
.
_linkNode
.
href
;
}
}
else
{
if
(
modules
.
utils
.
isString
(
url
)
)
{
return
url
;
}
return
'
'
;
}
}
}
;
return
modules
;
}
(
Modules
|
|
{
}
)
)
;
