var
Modules
=
(
function
(
modules
)
{
modules
.
html
=
{
selfClosingElt
:
[
'
area
'
'
base
'
'
br
'
'
col
'
'
hr
'
'
img
'
'
input
'
'
link
'
'
meta
'
'
param
'
'
command
'
'
keygen
'
'
source
'
]
parse
:
function
(
node
)
{
var
out
=
'
'
j
=
0
;
if
(
node
.
childNodes
&
&
node
.
childNodes
.
length
>
0
)
{
for
(
j
=
0
;
j
<
node
.
childNodes
.
length
;
j
+
+
)
{
var
text
=
this
.
walkTreeForHtml
(
node
.
childNodes
[
j
]
)
;
if
(
text
!
=
=
undefined
)
{
out
+
=
text
;
}
}
}
return
out
;
}
walkTreeForHtml
:
function
(
node
)
{
var
out
=
'
'
j
=
0
;
if
(
node
.
nodeType
&
&
node
.
nodeType
=
=
=
3
)
{
out
+
=
modules
.
domUtils
.
getElementText
(
node
)
;
}
if
(
node
.
nodeType
&
&
node
.
nodeType
=
=
=
1
&
&
modules
.
domUtils
.
hasAttribute
(
node
'
data
-
include
'
)
=
=
=
false
)
{
out
+
=
'
<
'
+
node
.
tagName
.
toLowerCase
(
)
;
var
attrs
=
modules
.
domUtils
.
getOrderedAttributes
(
node
)
;
for
(
j
=
0
;
j
<
attrs
.
length
;
j
+
+
)
{
out
+
=
'
'
+
attrs
[
j
]
.
name
+
'
=
'
+
'
"
'
+
attrs
[
j
]
.
value
+
'
"
'
;
}
if
(
this
.
selfClosingElt
.
indexOf
(
node
.
tagName
.
toLowerCase
(
)
)
=
=
=
-
1
)
{
out
+
=
'
>
'
;
}
if
(
node
.
childNodes
&
&
node
.
childNodes
.
length
>
0
)
{
for
(
j
=
0
;
j
<
node
.
childNodes
.
length
;
j
+
+
)
{
var
text
=
this
.
walkTreeForHtml
(
node
.
childNodes
[
j
]
)
;
if
(
text
!
=
=
undefined
)
{
out
+
=
text
;
}
}
}
if
(
this
.
selfClosingElt
.
indexOf
(
node
.
tagName
.
toLowerCase
(
)
)
>
-
1
)
{
out
+
=
'
/
>
'
;
}
else
{
out
+
=
'
<
/
'
+
node
.
tagName
.
toLowerCase
(
)
+
'
>
'
;
}
}
return
(
out
=
=
=
'
'
)
?
undefined
:
out
;
}
}
;
return
modules
;
}
(
Modules
|
|
{
}
)
)
;
