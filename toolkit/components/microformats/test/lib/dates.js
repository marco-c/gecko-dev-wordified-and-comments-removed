var
Modules
=
(
function
(
modules
)
{
modules
.
dates
=
{
hasAM
:
function
(
text
)
{
text
=
text
.
toLowerCase
(
)
;
return
(
text
.
indexOf
(
'
am
'
)
>
-
1
|
|
text
.
indexOf
(
'
a
.
m
.
'
)
>
-
1
)
;
}
hasPM
:
function
(
text
)
{
text
=
text
.
toLowerCase
(
)
;
return
(
text
.
indexOf
(
'
pm
'
)
>
-
1
|
|
text
.
indexOf
(
'
p
.
m
.
'
)
>
-
1
)
;
}
removeAMPM
:
function
(
text
)
{
return
text
.
replace
(
'
pm
'
'
'
)
.
replace
(
'
p
.
m
.
'
'
'
)
.
replace
(
'
am
'
'
'
)
.
replace
(
'
a
.
m
.
'
'
'
)
;
}
isDuration
:
function
(
text
)
{
if
(
modules
.
utils
.
isString
(
text
)
)
{
text
=
text
.
toLowerCase
(
)
;
if
(
modules
.
utils
.
startWith
(
text
'
p
'
)
)
{
return
true
;
}
}
return
false
;
}
isTime
:
function
(
text
)
{
if
(
modules
.
utils
.
isString
(
text
)
)
{
text
=
text
.
toLowerCase
(
)
;
text
=
modules
.
utils
.
trim
(
text
)
;
if
(
text
.
match
(
'
:
'
)
&
&
(
modules
.
utils
.
startWith
(
text
'
z
'
)
|
|
modules
.
utils
.
startWith
(
text
'
-
'
)
|
|
modules
.
utils
.
startWith
(
text
'
+
'
)
)
)
{
return
true
;
}
if
(
text
.
match
(
/
^
[
0
-
9
]
/
)
&
&
(
this
.
hasAM
(
text
)
|
|
this
.
hasPM
(
text
)
)
)
{
return
true
;
}
if
(
text
.
match
(
'
:
'
)
&
&
!
text
.
match
(
/
t
|
\
s
/
)
)
{
return
true
;
}
if
(
modules
.
utils
.
isNumber
(
text
)
)
{
if
(
text
.
length
=
=
=
2
|
|
text
.
length
=
=
=
4
|
|
text
.
length
=
=
=
6
)
{
return
true
;
}
}
}
return
false
;
}
parseAmPmTime
:
function
(
text
)
{
var
out
=
text
times
=
[
]
;
if
(
modules
.
utils
.
isString
(
out
)
)
{
text
=
text
.
replace
(
/
[
]
+
/
g
'
'
)
;
if
(
text
.
match
(
'
:
'
)
|
|
this
.
hasAM
(
text
)
|
|
this
.
hasPM
(
text
)
)
{
if
(
text
.
match
(
'
:
'
)
)
{
times
=
text
.
split
(
'
:
'
)
;
}
else
{
times
[
0
]
=
text
;
times
[
0
]
=
this
.
removeAMPM
(
times
[
0
]
)
;
}
if
(
this
.
hasPM
(
text
)
)
{
if
(
times
[
0
]
<
12
)
{
times
[
0
]
=
parseInt
(
times
[
0
]
10
)
+
12
;
}
}
if
(
times
[
0
]
&
&
times
[
0
]
.
length
=
=
=
1
)
{
times
[
0
]
=
'
0
'
+
times
[
0
]
;
}
if
(
times
[
0
]
)
{
text
=
times
.
join
(
'
:
'
)
;
}
}
}
return
this
.
removeAMPM
(
text
)
;
}
dateTimeUnion
:
function
(
date
time
format
)
{
var
isodate
=
new
modules
.
ISODate
(
date
format
)
isotime
=
new
modules
.
ISODate
(
)
;
isotime
.
parseTime
(
this
.
parseAmPmTime
(
time
)
format
)
;
if
(
isodate
.
hasFullDate
(
)
&
&
isotime
.
hasTime
(
)
)
{
isodate
.
tH
=
isotime
.
tH
;
isodate
.
tM
=
isotime
.
tM
;
isodate
.
tS
=
isotime
.
tS
;
isodate
.
tD
=
isotime
.
tD
;
return
isodate
;
}
else
{
if
(
isodate
.
hasFullDate
(
)
)
{
return
isodate
;
}
return
new
modules
.
ISODate
(
)
;
}
}
concatFragments
:
function
(
arr
format
)
{
var
out
=
new
modules
.
ISODate
(
)
i
=
0
value
=
'
'
;
if
(
arr
[
0
]
.
toUpperCase
(
)
.
match
(
'
T
'
)
)
{
return
new
modules
.
ISODate
(
arr
[
0
]
format
)
;
}
else
{
for
(
i
=
0
;
i
<
arr
.
length
;
i
+
+
)
{
value
=
arr
[
i
]
;
if
(
value
.
charAt
(
4
)
=
=
=
'
-
'
&
&
out
.
hasFullDate
(
)
=
=
=
false
)
{
out
.
parseDate
(
value
)
;
}
if
(
(
value
.
indexOf
(
'
:
'
)
>
-
1
|
|
modules
.
utils
.
isNumber
(
this
.
parseAmPmTime
(
value
)
)
)
&
&
out
.
hasTime
(
)
=
=
=
false
)
{
var
items
=
this
.
splitTimeAndZone
(
value
)
;
value
=
items
[
0
]
;
value
=
this
.
parseAmPmTime
(
value
)
;
out
.
parseTime
(
value
)
;
if
(
items
.
length
>
1
)
{
out
.
parseTimeZone
(
items
[
1
]
format
)
;
}
}
if
(
value
.
charAt
(
0
)
=
=
=
'
-
'
|
|
value
.
charAt
(
0
)
=
=
=
'
+
'
|
|
value
.
toUpperCase
(
)
=
=
=
'
Z
'
)
{
if
(
out
.
hasTimeZone
(
)
=
=
=
false
)
{
out
.
parseTimeZone
(
value
)
;
}
}
}
return
out
;
}
}
splitTimeAndZone
:
function
(
text
)
{
var
out
=
[
text
]
chars
=
[
'
-
'
'
+
'
'
z
'
'
Z
'
]
i
=
chars
.
length
;
while
(
i
-
-
)
{
if
(
text
.
indexOf
(
chars
[
i
]
)
>
-
1
)
{
out
[
0
]
=
text
.
slice
(
0
text
.
indexOf
(
chars
[
i
]
)
)
;
out
.
push
(
text
.
slice
(
text
.
indexOf
(
chars
[
i
]
)
)
)
;
break
;
}
}
return
out
;
}
}
;
return
modules
;
}
(
Modules
|
|
{
}
)
)
;
