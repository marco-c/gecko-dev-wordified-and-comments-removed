#
include
"
mozilla
/
browser
/
NimbusFeatures
.
h
"
#
include
"
mozilla
/
browser
/
NimbusFeatureManifest
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
JSON
.
h
"
#
include
"
nsJSUtils
.
h
"
namespace
mozilla
{
static
nsTHashSet
<
nsCString
>
sExposureFeatureSet
;
void
NimbusFeatures
:
:
GetPrefName
(
const
nsACString
&
branchPrefix
const
nsACString
&
aFeatureId
const
nsACString
&
aVariable
nsACString
&
aPref
)
{
nsAutoCString
featureAndVariable
;
featureAndVariable
.
Append
(
aFeatureId
)
;
if
(
!
aVariable
.
IsEmpty
(
)
)
{
featureAndVariable
.
Append
(
"
.
"
)
;
featureAndVariable
.
Append
(
aVariable
)
;
}
aPref
.
Truncate
(
)
;
aPref
.
Append
(
branchPrefix
)
;
aPref
.
Append
(
featureAndVariable
)
;
}
bool
NimbusFeatures
:
:
GetBool
(
const
nsACString
&
aFeatureId
const
nsACString
&
aVariable
bool
aDefault
)
{
auto
prefName
=
GetNimbusFallbackPrefName
(
aFeatureId
aVariable
)
;
if
(
prefName
.
isSome
(
)
&
&
Preferences
:
:
HasUserValue
(
prefName
-
>
get
(
)
)
)
{
return
Preferences
:
:
GetBool
(
prefName
-
>
get
(
)
aDefault
)
;
}
nsAutoCString
experimentPref
;
GetPrefName
(
kSyncDataPrefBranch
aFeatureId
aVariable
experimentPref
)
;
if
(
Preferences
:
:
HasUserValue
(
experimentPref
.
get
(
)
)
)
{
return
Preferences
:
:
GetBool
(
experimentPref
.
get
(
)
aDefault
)
;
}
nsAutoCString
rolloutPref
;
GetPrefName
(
kSyncRolloutsPrefBranch
aFeatureId
aVariable
rolloutPref
)
;
if
(
Preferences
:
:
HasUserValue
(
rolloutPref
.
get
(
)
)
)
{
return
Preferences
:
:
GetBool
(
rolloutPref
.
get
(
)
aDefault
)
;
}
if
(
prefName
.
isSome
(
)
)
{
return
Preferences
:
:
GetBool
(
prefName
-
>
get
(
)
aDefault
)
;
}
return
aDefault
;
}
int
NimbusFeatures
:
:
GetInt
(
const
nsACString
&
aFeatureId
const
nsACString
&
aVariable
int
aDefault
)
{
auto
prefName
=
GetNimbusFallbackPrefName
(
aFeatureId
aVariable
)
;
if
(
prefName
.
isSome
(
)
&
&
Preferences
:
:
HasUserValue
(
prefName
-
>
get
(
)
)
)
{
return
Preferences
:
:
GetInt
(
prefName
-
>
get
(
)
aDefault
)
;
}
nsAutoCString
experimentPref
;
GetPrefName
(
kSyncDataPrefBranch
aFeatureId
aVariable
experimentPref
)
;
if
(
Preferences
:
:
HasUserValue
(
experimentPref
.
get
(
)
)
)
{
return
Preferences
:
:
GetInt
(
experimentPref
.
get
(
)
aDefault
)
;
}
nsAutoCString
rolloutPref
;
GetPrefName
(
kSyncRolloutsPrefBranch
aFeatureId
aVariable
rolloutPref
)
;
if
(
Preferences
:
:
HasUserValue
(
rolloutPref
.
get
(
)
)
)
{
return
Preferences
:
:
GetInt
(
rolloutPref
.
get
(
)
aDefault
)
;
}
if
(
prefName
.
isSome
(
)
)
{
return
Preferences
:
:
GetInt
(
prefName
-
>
get
(
)
aDefault
)
;
}
return
aDefault
;
}
nsresult
NimbusFeatures
:
:
OnUpdate
(
const
nsACString
&
aFeatureId
const
nsACString
&
aVariable
PrefChangedFunc
aUserCallback
void
*
aUserData
)
{
nsAutoCString
experimentPref
;
nsAutoCString
rolloutPref
;
GetPrefName
(
kSyncDataPrefBranch
aFeatureId
aVariable
experimentPref
)
;
GetPrefName
(
kSyncRolloutsPrefBranch
aFeatureId
aVariable
rolloutPref
)
;
nsresult
rv
=
Preferences
:
:
RegisterCallback
(
aUserCallback
experimentPref
aUserData
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
Preferences
:
:
RegisterCallback
(
aUserCallback
rolloutPref
aUserData
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
NimbusFeatures
:
:
OffUpdate
(
const
nsACString
&
aFeatureId
const
nsACString
&
aVariable
PrefChangedFunc
aUserCallback
void
*
aUserData
)
{
nsAutoCString
experimentPref
;
nsAutoCString
rolloutPref
;
GetPrefName
(
kSyncDataPrefBranch
aFeatureId
aVariable
experimentPref
)
;
GetPrefName
(
kSyncRolloutsPrefBranch
aFeatureId
aVariable
rolloutPref
)
;
nsresult
rv
=
Preferences
:
:
UnregisterCallback
(
aUserCallback
experimentPref
aUserData
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
Preferences
:
:
UnregisterCallback
(
aUserCallback
rolloutPref
aUserData
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
NimbusFeatures
:
:
GetExperimentSlug
(
const
nsACString
&
aFeatureId
nsACString
&
aExperimentSlug
nsACString
&
aBranchSlug
)
{
nsAutoCString
prefName
;
nsAutoString
prefValue
;
aExperimentSlug
.
Truncate
(
)
;
aBranchSlug
.
Truncate
(
)
;
GetPrefName
(
kSyncDataPrefBranch
aFeatureId
EmptyCString
(
)
prefName
)
;
MOZ_TRY
(
Preferences
:
:
GetString
(
prefName
.
get
(
)
prefValue
)
)
;
if
(
prefValue
.
IsEmpty
(
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
dom
:
:
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
xpc
:
:
PrivilegedJunkScope
(
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
json
(
cx
JS
:
:
NullValue
(
)
)
;
if
(
JS_ParseJSON
(
cx
prefValue
.
BeginReading
(
)
prefValue
.
Length
(
)
&
json
)
&
&
json
.
isObject
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
experimentJSON
(
cx
json
.
toObjectOrNull
(
)
)
;
JS
:
:
RootedValue
expSlugValue
(
cx
)
;
if
(
!
JS_GetProperty
(
cx
experimentJSON
"
slug
"
&
expSlugValue
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
AssignJSString
(
cx
aExperimentSlug
expSlugValue
.
toString
(
)
)
;
JS
:
:
RootedValue
branchJSON
(
cx
)
;
if
(
!
JS_GetProperty
(
cx
experimentJSON
"
branch
"
&
branchJSON
)
&
&
!
branchJSON
.
isObject
(
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
JS
:
:
Rooted
<
JSObject
*
>
branchObj
(
cx
branchJSON
.
toObjectOrNull
(
)
)
;
JS
:
:
RootedValue
branchSlugValue
(
cx
)
;
if
(
!
JS_GetProperty
(
cx
branchObj
"
slug
"
&
branchSlugValue
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
AssignJSString
(
cx
aBranchSlug
branchSlugValue
.
toString
(
)
)
;
}
return
NS_OK
;
}
nsresult
NimbusFeatures
:
:
RecordExposureEvent
(
const
nsACString
&
aFeatureId
const
bool
aOnce
)
{
nsAutoCString
featureName
(
aFeatureId
)
;
if
(
!
sExposureFeatureSet
.
EnsureInserted
(
featureName
)
&
&
aOnce
)
{
return
NS_ERROR_ABORT
;
}
nsAutoCString
slugName
;
nsAutoCString
branchName
;
MOZ_TRY
(
GetExperimentSlug
(
aFeatureId
slugName
branchName
)
)
;
if
(
slugName
.
IsEmpty
(
)
|
|
branchName
.
IsEmpty
(
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
Telemetry
:
:
SetEventRecordingEnabled
(
"
normandy
"
_ns
true
)
;
nsTArray
<
Telemetry
:
:
EventExtraEntry
>
extra
(
2
)
;
extra
.
AppendElement
(
Telemetry
:
:
EventExtraEntry
{
"
branchSlug
"
_ns
branchName
}
)
;
extra
.
AppendElement
(
Telemetry
:
:
EventExtraEntry
{
"
featureId
"
_ns
featureName
}
)
;
Telemetry
:
:
RecordEvent
(
Telemetry
:
:
EventID
:
:
Normandy_Expose_NimbusExperiment
Some
(
slugName
)
Some
(
std
:
:
move
(
extra
)
)
)
;
return
NS_OK
;
}
}
