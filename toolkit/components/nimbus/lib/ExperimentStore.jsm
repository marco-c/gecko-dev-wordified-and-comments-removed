"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ExperimentStore
"
]
;
const
{
SharedDataMap
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
nimbus
/
lib
/
SharedDataMap
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
FeatureManifest
:
"
resource
:
/
/
nimbus
/
FeatureManifest
.
js
"
PrefUtils
:
"
resource
:
/
/
normandy
/
lib
/
PrefUtils
.
jsm
"
}
)
;
const
IS_MAIN_PROCESS
=
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
;
const
SYNC_DATA_PREF_BRANCH
=
"
nimbus
.
syncdatastore
.
"
;
const
SYNC_DEFAULTS_PREF_BRANCH
=
"
nimbus
.
syncdefaultsstore
.
"
;
let
tryJSONParse
=
data
=
>
{
try
{
return
JSON
.
parse
(
data
)
;
}
catch
(
e
)
{
}
return
null
;
}
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
syncDataStore
"
(
)
=
>
{
let
experimentsPrefBranch
=
Services
.
prefs
.
getBranch
(
SYNC_DATA_PREF_BRANCH
)
;
let
defaultsPrefBranch
=
Services
.
prefs
.
getBranch
(
SYNC_DEFAULTS_PREF_BRANCH
)
;
return
{
_tryParsePrefValue
(
branch
pref
)
{
try
{
return
tryJSONParse
(
branch
.
getStringPref
(
pref
"
"
)
)
;
}
catch
(
e
)
{
}
return
null
;
}
_trySetPrefValue
(
branch
pref
value
)
{
try
{
branch
.
setStringPref
(
pref
JSON
.
stringify
(
value
)
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
_trySetTypedPrefValue
(
pref
value
)
{
let
variableType
=
typeof
value
;
switch
(
variableType
)
{
case
"
boolean
"
:
Services
.
prefs
.
setBoolPref
(
pref
value
)
;
break
;
case
"
number
"
:
Services
.
prefs
.
setIntPref
(
pref
value
)
;
break
;
case
"
string
"
:
Services
.
prefs
.
setStringPref
(
pref
value
)
;
break
;
case
"
object
"
:
Services
.
prefs
.
setStringPref
(
pref
JSON
.
stringify
(
value
)
)
;
break
;
}
}
_clearBranchChildValues
(
prefBranch
)
{
const
variablesBranch
=
Services
.
prefs
.
getBranch
(
prefBranch
)
;
const
prefChildList
=
variablesBranch
.
getChildList
(
"
"
)
;
for
(
let
variable
of
prefChildList
)
{
variablesBranch
.
clearUserPref
(
variable
)
;
}
}
_getBranchChildValues
(
prefBranch
featureId
)
{
const
branch
=
Services
.
prefs
.
getBranch
(
prefBranch
)
;
const
prefChildList
=
branch
.
getChildList
(
"
"
)
;
let
values
=
{
}
;
if
(
!
prefChildList
.
length
)
{
return
null
;
}
for
(
const
childPref
of
prefChildList
)
{
let
prefName
=
{
prefBranch
}
{
childPref
}
;
let
value
=
lazy
.
PrefUtils
.
getPref
(
prefName
)
;
if
(
lazy
.
FeatureManifest
[
featureId
]
?
.
variables
[
childPref
]
?
.
type
=
=
=
"
json
"
)
{
let
parsedValue
=
tryJSONParse
(
value
)
;
if
(
parsedValue
)
{
value
=
parsedValue
;
}
}
values
[
childPref
]
=
value
;
}
return
values
;
}
get
(
featureId
)
{
let
metadata
=
this
.
_tryParsePrefValue
(
experimentsPrefBranch
featureId
)
;
if
(
!
metadata
)
{
return
null
;
}
let
prefBranch
=
{
SYNC_DATA_PREF_BRANCH
}
{
featureId
}
.
;
metadata
.
branch
.
feature
.
value
=
this
.
_getBranchChildValues
(
prefBranch
featureId
)
;
return
metadata
;
}
getDefault
(
featureId
)
{
let
metadata
=
this
.
_tryParsePrefValue
(
defaultsPrefBranch
featureId
)
;
if
(
!
metadata
)
{
return
null
;
}
let
prefBranch
=
{
SYNC_DEFAULTS_PREF_BRANCH
}
{
featureId
}
.
;
metadata
.
branch
.
feature
.
value
=
this
.
_getBranchChildValues
(
prefBranch
featureId
)
;
return
metadata
;
}
set
(
featureId
value
)
{
if
(
value
.
branch
?
.
feature
?
.
value
)
{
for
(
let
variable
of
Object
.
keys
(
value
.
branch
.
feature
.
value
)
)
{
let
prefName
=
{
SYNC_DATA_PREF_BRANCH
}
{
featureId
}
.
{
variable
}
;
this
.
_trySetTypedPrefValue
(
prefName
value
.
branch
.
feature
.
value
[
variable
]
)
;
}
this
.
_trySetPrefValue
(
experimentsPrefBranch
featureId
{
.
.
.
value
branch
:
{
.
.
.
value
.
branch
feature
:
{
.
.
.
value
.
branch
.
feature
value
:
null
}
}
}
)
;
}
else
{
this
.
_trySetPrefValue
(
experimentsPrefBranch
featureId
value
)
;
}
}
setDefault
(
featureId
enrollment
)
{
let
{
feature
}
=
enrollment
.
branch
;
for
(
let
variable
of
Object
.
keys
(
feature
.
value
)
)
{
let
prefName
=
{
SYNC_DEFAULTS_PREF_BRANCH
}
{
featureId
}
.
{
variable
}
;
this
.
_trySetTypedPrefValue
(
prefName
feature
.
value
[
variable
]
)
;
}
this
.
_trySetPrefValue
(
defaultsPrefBranch
featureId
{
.
.
.
enrollment
branch
:
{
.
.
.
enrollment
.
branch
feature
:
{
.
.
.
enrollment
.
branch
.
feature
value
:
null
}
}
}
)
;
}
getAllDefaultBranches
(
)
{
return
defaultsPrefBranch
.
getChildList
(
"
"
)
.
filter
(
pref
=
>
!
pref
.
includes
(
"
.
"
)
)
;
}
delete
(
featureId
)
{
const
prefBranch
=
{
SYNC_DATA_PREF_BRANCH
}
{
featureId
}
.
;
this
.
_clearBranchChildValues
(
prefBranch
)
;
try
{
experimentsPrefBranch
.
clearUserPref
(
featureId
)
;
}
catch
(
e
)
{
}
}
deleteDefault
(
featureId
)
{
let
prefBranch
=
{
SYNC_DEFAULTS_PREF_BRANCH
}
{
featureId
}
.
;
this
.
_clearBranchChildValues
(
prefBranch
)
;
try
{
defaultsPrefBranch
.
clearUserPref
(
featureId
)
;
}
catch
(
e
)
{
}
}
}
;
}
)
;
const
DEFAULT_STORE_ID
=
"
ExperimentStoreData
"
;
function
getAllBranchFeatureIds
(
branch
)
{
return
featuresCompat
(
branch
)
.
map
(
f
=
>
f
.
featureId
)
;
}
function
featuresCompat
(
branch
)
{
if
(
!
branch
|
|
(
!
branch
.
feature
&
&
!
branch
.
features
)
)
{
return
[
]
;
}
let
{
features
}
=
branch
;
if
(
!
features
)
{
features
=
[
branch
.
feature
]
;
}
return
features
;
}
class
ExperimentStore
extends
SharedDataMap
{
static
SYNC_DATA_PREF_BRANCH
=
SYNC_DATA_PREF_BRANCH
;
static
SYNC_DEFAULTS_PREF_BRANCH
=
SYNC_DEFAULTS_PREF_BRANCH
;
constructor
(
sharedDataKey
options
=
{
isParent
:
IS_MAIN_PROCESS
}
)
{
super
(
sharedDataKey
|
|
DEFAULT_STORE_ID
options
)
;
}
async
init
(
)
{
await
super
.
init
(
)
;
this
.
getAllActiveExperiments
(
)
.
forEach
(
(
{
branch
featureIds
}
)
=
>
{
(
featureIds
|
|
getAllBranchFeatureIds
(
branch
)
)
.
forEach
(
featureId
=
>
this
.
_emitFeatureUpdate
(
featureId
"
feature
-
experiment
-
loaded
"
)
)
;
}
)
;
this
.
getAllActiveRollouts
(
)
.
forEach
(
(
{
featureIds
}
)
=
>
{
featureIds
.
forEach
(
featureId
=
>
this
.
_emitFeatureUpdate
(
featureId
"
feature
-
rollout
-
loaded
"
)
)
;
}
)
;
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
this
.
_cleanupOldRecipes
(
)
)
;
}
getExperimentForFeature
(
featureId
)
{
return
(
this
.
getAllActiveExperiments
(
)
.
find
(
experiment
=
>
experiment
.
featureIds
?
.
includes
(
featureId
)
|
|
getAllBranchFeatureIds
(
experiment
.
branch
)
.
includes
(
featureId
)
)
|
|
lazy
.
syncDataStore
.
get
(
featureId
)
)
;
}
hasExperimentForFeature
(
featureId
)
{
if
(
!
featureId
)
{
return
false
;
}
return
!
!
this
.
getExperimentForFeature
(
featureId
)
;
}
getAll
(
)
{
let
data
=
[
]
;
try
{
data
=
Object
.
values
(
this
.
_data
|
|
{
}
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
data
;
}
getAllActiveExperiments
(
)
{
return
this
.
getAll
(
)
.
filter
(
enrollment
=
>
enrollment
.
active
&
&
!
enrollment
.
isRollout
)
;
}
getAllActiveRollouts
(
)
{
return
this
.
getAll
(
)
.
filter
(
enrollment
=
>
enrollment
.
active
&
&
enrollment
.
isRollout
)
;
}
getRolloutForFeature
(
featureId
)
{
return
(
this
.
getAllActiveRollouts
(
)
.
find
(
r
=
>
r
.
featureIds
.
includes
(
featureId
)
)
|
|
lazy
.
syncDataStore
.
getDefault
(
featureId
)
)
;
}
_cleanupOldRecipes
(
)
{
const
threshold
=
15552000000
;
const
nowTimestamp
=
new
Date
(
)
.
getTime
(
)
;
const
recipesToRemove
=
this
.
getAll
(
)
.
filter
(
experiment
=
>
!
experiment
.
active
&
&
!
(
nowTimestamp
-
new
Date
(
experiment
.
lastSeen
)
.
getTime
(
)
<
threshold
)
)
;
this
.
_removeEntriesByKeys
(
recipesToRemove
.
map
(
r
=
>
r
.
slug
)
)
;
}
_emitUpdates
(
enrollment
)
{
this
.
emit
(
update
:
{
enrollment
.
slug
}
enrollment
)
;
(
enrollment
.
featureIds
|
|
getAllBranchFeatureIds
(
enrollment
.
branch
)
)
.
forEach
(
featureId
=
>
{
this
.
emit
(
update
:
{
featureId
}
enrollment
)
;
this
.
_emitFeatureUpdate
(
featureId
enrollment
.
isRollout
?
"
rollout
-
updated
"
:
"
experiment
-
updated
"
)
;
}
)
;
}
_emitFeatureUpdate
(
featureId
reason
)
{
this
.
emit
(
featureUpdate
:
{
featureId
}
reason
)
;
}
_onFeatureUpdate
(
featureId
callback
)
{
this
.
on
(
featureUpdate
:
{
featureId
}
callback
)
;
}
_offFeatureUpdate
(
featureId
callback
)
{
this
.
off
(
featureUpdate
:
{
featureId
}
callback
)
;
}
_updateSyncStore
(
enrollment
)
{
let
features
=
featuresCompat
(
enrollment
.
branch
)
;
for
(
let
feature
of
features
)
{
if
(
lazy
.
FeatureManifest
[
feature
.
featureId
]
?
.
isEarlyStartup
|
|
feature
.
isEarlyStartup
)
{
if
(
!
enrollment
.
active
)
{
if
(
enrollment
.
isRollout
)
{
lazy
.
syncDataStore
.
deleteDefault
(
feature
.
featureId
)
;
}
else
{
lazy
.
syncDataStore
.
delete
(
feature
.
featureId
)
;
}
}
else
{
let
updateEnrollmentSyncStore
=
enrollment
.
isRollout
?
lazy
.
syncDataStore
.
setDefault
.
bind
(
lazy
.
syncDataStore
)
:
lazy
.
syncDataStore
.
set
.
bind
(
lazy
.
syncDataStore
)
;
updateEnrollmentSyncStore
(
feature
.
featureId
{
.
.
.
enrollment
branch
:
{
.
.
.
enrollment
.
branch
feature
features
:
null
}
}
)
;
}
}
}
}
addEnrollment
(
enrollment
)
{
if
(
!
enrollment
|
|
!
enrollment
.
slug
)
{
throw
new
Error
(
Tried
to
add
an
experiment
but
it
didn
'
t
have
a
.
slug
property
.
)
;
}
this
.
set
(
enrollment
.
slug
enrollment
)
;
this
.
_updateSyncStore
(
enrollment
)
;
this
.
_emitUpdates
(
enrollment
)
;
}
updateExperiment
(
slug
newProperties
)
{
const
oldProperties
=
this
.
get
(
slug
)
;
if
(
!
oldProperties
)
{
throw
new
Error
(
Tried
to
update
experiment
{
slug
}
but
it
doesn
'
t
exist
)
;
}
const
updatedExperiment
=
{
.
.
.
oldProperties
.
.
.
newProperties
}
;
this
.
set
(
slug
updatedExperiment
)
;
this
.
_updateSyncStore
(
updatedExperiment
)
;
this
.
_emitUpdates
(
updatedExperiment
)
;
}
_deleteForTests
(
slugOrFeatureId
)
{
super
.
_deleteForTests
(
slugOrFeatureId
)
;
lazy
.
syncDataStore
.
deleteDefault
(
slugOrFeatureId
)
;
lazy
.
syncDataStore
.
delete
(
slugOrFeatureId
)
;
}
}
