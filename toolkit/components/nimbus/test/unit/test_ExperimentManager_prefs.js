const
{
_ExperimentFeature
:
ExperimentFeature
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
)
;
const
{
PrefUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
PrefUtils
.
jsm
"
)
;
function
pick
(
obj
key
)
{
return
{
[
key
]
:
obj
[
key
]
}
;
}
const
PREF_FEATURES
=
[
new
ExperimentFeature
(
"
test
-
set
-
pref
"
{
description
:
"
Test
feature
that
sets
a
pref
on
the
default
branch
.
"
owner
:
"
test
test
.
test
"
hasExposure
:
false
isEarlyStartup
:
false
variables
:
{
foo
:
{
type
:
"
string
"
description
:
"
Test
variable
"
setPref
:
"
nimbus
.
test
-
only
.
foo
"
}
}
}
)
new
ExperimentFeature
(
"
test
-
set
-
user
-
pref
"
{
description
:
"
Test
feature
that
sets
a
pref
on
the
user
branch
.
"
owner
:
"
test
test
.
test
"
hasExposure
:
false
isEarlyStartup
:
true
variables
:
{
bar
:
{
type
:
"
string
"
description
:
"
Test
variable
"
setPref
:
"
nimbus
.
test
-
only
.
bar
"
}
}
}
)
]
;
const
DEFAULT_VALUE
=
"
default
-
value
"
;
const
USER_VALUE
=
"
user
-
value
"
;
const
EXPERIMENT_VALUE
=
"
experiment
-
value
"
;
const
ROLLOUT_VALUE
=
"
rollout
-
value
"
;
const
USER
=
"
user
"
;
const
DEFAULT
=
"
default
"
;
const
ROLLOUT
=
"
rollout
"
;
const
EXPERIMENT
=
"
experiment
"
;
const
PREFS
=
{
[
DEFAULT
]
:
"
nimbus
.
test
-
only
.
foo
"
[
USER
]
:
"
nimbus
.
test
-
only
.
bar
"
}
;
const
FEATURE_IDS
=
{
[
DEFAULT
]
:
"
test
-
set
-
pref
"
[
USER
]
:
"
test
-
set
-
user
-
pref
"
}
;
const
CONFIGS
=
{
[
DEFAULT
]
:
{
[
ROLLOUT
]
:
{
featureId
:
FEATURE_IDS
[
DEFAULT
]
value
:
{
foo
:
ROLLOUT_VALUE
}
}
[
EXPERIMENT
]
:
{
featureId
:
FEATURE_IDS
[
DEFAULT
]
value
:
{
foo
:
EXPERIMENT_VALUE
}
}
}
[
USER
]
:
{
[
ROLLOUT
]
:
{
featureId
:
FEATURE_IDS
[
USER
]
value
:
{
bar
:
ROLLOUT_VALUE
}
}
[
EXPERIMENT
]
:
{
featureId
:
FEATURE_IDS
[
USER
]
value
:
{
bar
:
EXPERIMENT_VALUE
}
}
}
}
;
function
setPrefs
(
pref
{
defaultBranchValue
=
null
userBranchValue
=
null
}
)
{
if
(
defaultBranchValue
!
=
=
null
)
{
Services
.
prefs
.
getDefaultBranch
(
null
)
.
setStringPref
(
pref
defaultBranchValue
)
;
}
if
(
userBranchValue
!
=
=
null
)
{
Services
.
prefs
.
setStringPref
(
pref
userBranchValue
)
;
}
}
function
assertExpectedPrefValues
(
pref
branch
expected
visible
msg
)
{
info
(
Assert
pref
{
pref
}
on
branch
{
branch
}
matches
{
expected
}
{
msg
}
)
;
const
hasBranchValue
=
expected
!
=
=
null
;
const
hasVisibleValue
=
visible
!
=
=
null
;
function
hasValueMsg
(
hasValue
)
{
return
Expected
pref
"
{
pref
}
"
on
the
{
branch
}
branch
to
{
hasValue
?
"
"
:
"
not
"
}
have
a
value
{
msg
}
;
}
let
prefBranch
;
switch
(
branch
)
{
case
USER
:
Assert
.
equal
(
Services
.
prefs
.
prefHasUserValue
(
pref
)
hasBranchValue
hasValueMsg
(
hasBranchValue
)
)
;
prefBranch
=
Services
.
prefs
;
break
;
case
DEFAULT
:
Assert
.
equal
(
Services
.
prefs
.
prefHasDefaultValue
(
pref
)
hasBranchValue
hasValueMsg
(
hasBranchValue
)
)
;
prefBranch
=
Services
.
prefs
.
getDefaultBranch
(
null
)
;
break
;
default
:
Assert
.
ok
(
false
"
invalid
pref
branch
"
)
;
}
if
(
hasBranchValue
)
{
Assert
.
equal
(
prefBranch
.
getStringPref
(
pref
)
expected
Expected
pref
"
{
pref
}
on
the
{
branch
}
branch
to
be
{
JSON
.
stringify
(
expected
)
}
{
msg
}
)
;
}
if
(
hasVisibleValue
)
{
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
pref
)
visible
Expected
pref
"
{
pref
}
"
to
be
{
JSON
.
stringify
(
visible
)
}
{
msg
}
)
;
}
else
{
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
pref
)
&
&
!
Services
.
prefs
.
prefHasDefaultValue
(
pref
)
Expected
pref
"
{
pref
}
to
not
be
set
{
msg
}
)
;
}
}
function
assertEmptyStore
(
store
)
{
Assert
.
deepEqual
(
store
.
getAllActive
(
)
[
]
"
There
should
be
no
experiments
active
.
"
)
;
Assert
.
deepEqual
(
store
.
getAllRollouts
(
)
[
]
"
There
should
be
no
rollouts
active
"
)
;
}
async
function
cleanupStore
(
store
)
{
await
store
.
_store
.
finalize
(
)
;
await
IOUtils
.
remove
(
store
.
_store
.
path
)
;
}
add_setup
(
function
setup
(
)
{
const
cleanupFeatures
=
ExperimentTestUtils
.
addTestFeatures
(
.
.
.
PREF_FEATURES
)
;
registerCleanupFunction
(
cleanupFeatures
)
;
}
)
;
add_task
(
async
function
test_enroll_setPref_rolloutsAndExperiments
(
)
{
const
store
=
ExperimentFakes
.
store
(
)
;
const
manager
=
ExperimentFakes
.
manager
(
store
)
;
await
manager
.
onStartup
(
)
;
assertEmptyStore
(
store
)
;
async
function
doBaseTest
(
{
pref
branch
configs
userBranchValue
=
undefined
defaultBranchValue
=
undefined
enrollOrder
unenrollOrder
expectedValues
visibleValues
=
undefined
}
)
{
if
(
visibleValues
=
=
=
undefined
)
{
visibleValues
=
expectedValues
;
}
const
cleanupFns
=
{
}
;
let
i
=
0
;
setPrefs
(
pref
{
defaultBranchValue
userBranchValue
}
)
;
assertExpectedPrefValues
(
pref
branch
expectedValues
[
i
]
visibleValues
[
i
]
"
before
enrollment
"
)
;
i
+
+
;
for
(
const
enrollmentKind
of
enrollOrder
)
{
const
isRollout
=
enrollmentKind
=
=
=
ROLLOUT
;
cleanupFns
[
enrollmentKind
]
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
configs
[
enrollmentKind
]
{
manager
isRollout
}
)
;
assertExpectedPrefValues
(
pref
branch
expectedValues
[
i
]
visibleValues
[
i
]
after
{
enrollmentKind
}
enrollment
)
;
i
+
+
;
}
for
(
const
enrollmentKind
of
unenrollOrder
)
{
await
cleanupFns
[
enrollmentKind
]
(
)
;
assertExpectedPrefValues
(
pref
branch
expectedValues
[
i
]
visibleValues
[
i
]
after
{
enrollmentKind
}
unenrollment
)
;
i
+
+
;
}
assertEmptyStore
(
store
)
;
Services
.
prefs
.
deleteBranch
(
pref
)
;
}
{
const
branch
=
DEFAULT
;
const
pref
=
PREFS
[
branch
]
;
const
configs
=
{
[
ROLLOUT
]
:
{
featureId
:
FEATURE_IDS
[
DEFAULT
]
value
:
{
}
}
[
EXPERIMENT
]
:
{
featureId
:
FEATURE_IDS
[
DEFAULT
]
value
:
{
}
}
}
;
const
doTest
=
args
=
>
doBaseTest
(
{
pref
branch
.
.
.
args
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
null
null
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
DEFAULT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
null
null
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
DEFAULT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
null
null
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
DEFAULT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
null
null
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
DEFAULT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
}
{
const
branch
=
USER
;
const
pref
=
PREFS
[
branch
]
;
const
configs
=
{
[
ROLLOUT
]
:
{
featureId
:
FEATURE_IDS
[
DEFAULT
]
value
:
{
}
}
[
EXPERIMENT
]
:
{
featureId
:
FEATURE_IDS
[
DEFAULT
]
value
:
{
}
}
}
;
const
doTest
=
args
=
>
doBaseTest
(
{
pref
branch
.
.
.
args
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
null
null
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
null
null
]
visibleValues
:
[
DEFAULT_VALUE
DEFAULT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
null
null
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
null
null
]
visibleValues
:
[
DEFAULT_VALUE
DEFAULT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
}
{
const
branch
=
DEFAULT
;
const
pref
=
PREFS
[
branch
]
;
const
configs
=
CONFIGS
[
branch
]
;
const
doTest
=
args
=
>
doBaseTest
(
{
pref
branch
.
.
.
args
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
ROLLOUT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
ROLLOUT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
ROLLOUT_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
ROLLOUT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
ROLLOUT_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
ROLLOUT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
}
{
const
branch
=
USER
;
const
pref
=
PREFS
[
branch
]
;
const
configs
=
CONFIGS
[
branch
]
;
const
doTest
=
args
=
>
doBaseTest
(
{
pref
branch
.
.
.
args
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
null
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
null
]
visibleValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
USER_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
enrollOrder
:
[
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
USER_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
null
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
null
]
visibleValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
enrollOrder
:
[
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
null
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
null
]
visibleValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
USER_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
USER_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
null
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
null
]
visibleValues
:
[
DEFAULT_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
enrollOrder
:
[
ROLLOUT
EXPERIMENT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
ROLLOUT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
null
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
null
]
visibleValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
USER_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
null
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
null
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
null
]
visibleValues
:
[
DEFAULT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
configs
userBranchValue
:
USER_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
USER_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
configs
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
enrollOrder
:
[
EXPERIMENT
ROLLOUT
]
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
USER_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
}
await
cleanupStore
(
store
)
;
}
)
;
add_task
(
async
function
test_restorePrefs_experimentAndRollout
(
)
{
async
function
doBaseTest
(
{
featureId
pref
branch
configs
defaultBranchValue
=
null
userBranchValue
=
null
unenrollOrder
expectedValues
visibleValues
=
undefined
}
)
{
if
(
!
[
USER
DEFAULT
]
.
includes
(
branch
)
)
{
Assert
.
ok
(
false
invalid
branch
{
branch
}
)
;
}
if
(
visibleValues
=
=
=
undefined
)
{
visibleValues
=
expectedValues
;
}
setPrefs
(
pref
{
defaultBranchValue
userBranchValue
}
)
;
{
const
store
=
ExperimentFakes
.
store
(
)
;
const
manager
=
ExperimentFakes
.
manager
(
store
)
;
await
manager
.
onStartup
(
)
;
assertEmptyStore
(
store
)
;
for
(
const
[
enrollmentKind
config
]
of
Object
.
entries
(
configs
)
)
{
await
ExperimentFakes
.
enrollWithFeatureConfig
(
config
{
manager
isRollout
:
enrollmentKind
=
=
=
ROLLOUT
}
)
;
}
store
.
_store
.
saveSoon
(
)
;
await
store
.
_store
.
finalize
(
)
;
if
(
branch
=
=
=
"
default
"
)
{
Services
.
prefs
.
deleteBranch
(
pref
)
;
}
}
setPrefs
(
pref
{
defaultBranchValue
}
)
;
if
(
branch
=
=
=
"
default
"
)
{
setPrefs
(
pref
{
userBranchValue
}
)
;
}
const
sandbox
=
sinon
.
createSandbox
(
)
;
const
store
=
ExperimentFakes
.
store
(
)
;
const
manager
=
ExperimentFakes
.
manager
(
store
)
;
const
setPrefSpy
=
sandbox
.
spy
(
PrefUtils
"
setPref
"
)
;
await
manager
.
onStartup
(
)
;
if
(
branch
=
=
=
DEFAULT
)
{
Assert
.
ok
(
setPrefSpy
.
calledOnce
"
Should
have
called
setPref
once
total
"
)
;
Assert
.
ok
(
setPrefSpy
.
calledOnceWith
(
pref
expectedValues
[
0
]
{
branch
}
)
Should
have
only
called
setPref
with
correct
args
(
called
with
:
{
JSON
.
stringify
(
setPrefSpy
.
getCall
(
0
)
.
args
)
}
)
expected
{
JSON
.
stringify
(
[
pref
expectedValues
[
0
]
{
branch
}
]
)
}
)
)
;
}
else
if
(
branch
=
=
=
USER
)
{
Assert
.
ok
(
setPrefSpy
.
notCalled
"
Should
have
not
called
setPref
for
a
user
branch
pref
"
)
;
}
assertExpectedPrefValues
(
pref
branch
expectedValues
[
0
]
visibleValues
[
0
]
"
after
manager
startup
"
)
;
const
slugs
=
{
[
ROLLOUT
]
:
store
.
getRolloutForFeature
(
featureId
)
?
.
slug
[
EXPERIMENT
]
:
store
.
getExperimentForFeature
(
featureId
)
?
.
slug
}
;
let
i
=
1
;
for
(
const
enrollmentKind
of
unenrollOrder
)
{
manager
.
unenroll
(
slugs
[
enrollmentKind
]
)
;
assertExpectedPrefValues
(
pref
branch
expectedValues
[
i
]
visibleValues
[
i
]
after
{
enrollmentKind
}
unenrollment
)
;
i
+
+
;
}
for
(
const
enrollmentKind
of
unenrollOrder
)
{
store
.
_deleteForTests
(
slugs
[
enrollmentKind
]
)
;
}
assertEmptyStore
(
store
)
;
await
cleanupStore
(
store
)
;
Services
.
prefs
.
deleteBranch
(
pref
)
;
sandbox
.
restore
(
)
;
}
{
const
branch
=
DEFAULT
;
const
featureId
=
FEATURE_IDS
[
branch
]
;
const
pref
=
PREFS
[
branch
]
;
const
configs
=
CONFIGS
[
branch
]
;
const
doTest
=
args
=
>
doBaseTest
(
{
featureId
pref
branch
.
.
.
args
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
ROLLOUT_VALUE
]
}
)
;
await
doTest
(
{
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
ROLLOUT_VALUE
]
}
)
;
await
doTest
(
{
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
ROLLOUT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
ROLLOUT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
EXPERIMENT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
visibleValues
:
[
USER_VALUE
USER_VALUE
USER_VALUE
]
}
)
;
}
{
const
branch
=
USER
;
const
featureId
=
FEATURE_IDS
[
branch
]
;
const
pref
=
PREFS
[
branch
]
;
const
configs
=
CONFIGS
[
branch
]
;
const
doTest
=
args
=
>
doBaseTest
(
{
featureId
pref
branch
configs
.
.
.
args
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
null
]
}
)
;
await
doTest
(
{
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
null
]
}
)
;
await
doTest
(
{
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
null
]
}
)
;
await
doTest
(
{
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
null
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
null
]
visibleValues
:
[
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
null
]
visibleValues
:
[
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
null
]
visibleValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
null
]
visibleValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
DEFAULT_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
EXPERIMENT
)
unenrollOrder
:
[
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
:
pick
(
configs
ROLLOUT
)
unenrollOrder
:
[
ROLLOUT
]
expectedValues
:
[
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
EXPERIMENT
ROLLOUT
]
expectedValues
:
[
EXPERIMENT_VALUE
ROLLOUT_VALUE
USER_VALUE
]
}
)
;
await
doTest
(
{
defaultBranchValue
:
DEFAULT_VALUE
userBranchValue
:
USER_VALUE
configs
unenrollOrder
:
[
ROLLOUT
EXPERIMENT
]
expectedValues
:
[
EXPERIMENT_VALUE
EXPERIMENT_VALUE
USER_VALUE
]
}
)
;
}
}
)
;
