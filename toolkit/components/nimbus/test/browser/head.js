"
use
strict
"
;
const
{
_ExperimentFeature
:
ExperimentFeature
ExperimentAPI
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
)
;
const
{
ExperimentManager
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
nimbus
/
lib
/
ExperimentManager
.
sys
.
mjs
"
)
;
const
{
NimbusTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
NimbusTestUtils
.
init
(
this
)
;
add_setup
(
async
function
(
)
{
await
ExperimentAPI
.
ready
(
)
;
const
sandbox
=
sinon
.
createSandbox
(
)
;
const
origAddExperiment
=
ExperimentManager
.
store
.
addEnrollment
.
bind
(
ExperimentManager
.
store
)
;
sandbox
.
stub
(
ExperimentManager
.
store
"
addEnrollment
"
)
.
callsFake
(
enrollment
=
>
{
NimbusTestUtils
.
validateEnrollment
(
enrollment
)
;
return
origAddExperiment
(
enrollment
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
registerCleanupFunction
(
(
)
=
>
{
NimbusTestUtils
.
assert
.
storeIsEmpty
(
ExperimentManager
.
store
)
;
sandbox
.
restore
(
)
;
}
)
;
}
)
;
}
)
;
async
function
setupTest
(
)
{
await
ExperimentAPI
.
ready
(
)
;
await
ExperimentAPI
.
_rsLoader
.
finishedUpdating
(
)
;
await
ExperimentAPI
.
_rsLoader
.
remoteSettingsClients
.
experiments
.
db
.
importChanges
(
{
}
Date
.
now
(
)
[
]
{
clear
:
true
}
)
;
await
ExperimentAPI
.
_rsLoader
.
updateRecipes
(
"
test
"
)
;
return
async
function
cleanup
(
)
{
await
NimbusTestUtils
.
removeStore
(
ExperimentAPI
.
_manager
.
store
)
;
}
;
}
async
function
assertEmptyStore
(
store
)
{
await
NimbusTestUtils
.
removeStore
(
store
)
;
}
function
waitForChildMessage
(
msg
)
{
return
new
Promise
(
resolve
=
>
{
const
listener
=
(
)
=
>
{
resolve
(
)
;
info
(
parent
received
{
msg
}
)
;
Services
.
ppmm
.
removeMessageListener
(
msg
listener
)
;
}
;
info
(
parent
waiting
for
{
msg
}
)
;
Services
.
ppmm
.
addMessageListener
(
msg
listener
)
;
}
)
;
}
async
function
childSharedDataChanged
(
browser
)
{
const
MESSAGE
=
"
nimbus
-
browser
-
test
:
shared
-
data
-
changed
"
;
const
promise
=
waitForChildMessage
(
MESSAGE
)
;
await
SpecialPowers
.
spawn
(
browser
[
MESSAGE
]
async
MESSAGE
=
>
{
Services
.
cpmm
.
sharedData
.
addEventListener
(
"
change
"
async
(
)
=
>
{
await
Services
.
cpmm
.
sendAsyncMessage
(
MESSAGE
)
;
}
{
once
:
true
}
)
;
}
)
;
return
{
promise
}
;
}
