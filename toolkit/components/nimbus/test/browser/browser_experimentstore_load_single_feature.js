"
use
strict
"
;
const
{
ExperimentStore
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
nimbus
/
lib
/
ExperimentStore
.
sys
.
mjs
"
)
;
const
{
ExperimentFakes
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
)
;
const
{
ExperimentAPI
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
JSONFile
:
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
sys
.
mjs
"
}
)
;
const
SINGLE_FEATURE_RECIPE
=
{
.
.
.
ExperimentFakes
.
experiment
(
)
branch
:
{
feature
:
{
featureId
:
"
urlbar
"
value
:
{
valueThatWillDefinitelyShowUp
:
42
quickSuggestNonSponsoredIndex
:
2021
}
}
ratio
:
1
slug
:
"
control
"
}
featureIds
:
[
"
urlbar
"
]
slug
:
"
browser_experimentstore_load_single_feature
"
userFacingDescription
:
"
Smarter
suggestions
in
the
AwesomeBar
"
userFacingName
:
"
Firefox
Suggest
-
History
vs
Offline
"
}
;
function
getPath
(
)
{
const
profileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
path
;
return
PathUtils
.
join
(
profileDir
"
ExperimentStoreData
.
json
"
)
;
}
add_task
(
async
function
test_load_from_disk_event
(
)
{
Services
.
prefs
.
setStringPref
(
"
messaging
-
system
.
log
"
"
all
"
)
;
const
stub
=
sinon
.
stub
(
)
;
const
previousSession
=
new
JSONFile
(
{
path
:
getPath
(
)
}
)
;
await
previousSession
.
load
(
)
;
previousSession
.
data
[
SINGLE_FEATURE_RECIPE
.
slug
]
=
SINGLE_FEATURE_RECIPE
;
previousSession
.
saveSoon
(
)
;
await
previousSession
.
finalize
(
)
;
const
manager
=
new
ExperimentManager
(
)
;
const
store
=
manager
.
store
;
let
apiManagerStub
=
sinon
.
stub
(
ExperimentAPI
"
_manager
"
)
.
get
(
(
)
=
>
manager
)
;
store
.
_onFeatureUpdate
(
"
urlbar
"
stub
)
;
await
store
.
init
(
)
;
await
store
.
ready
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
stub
.
called
"
Stub
was
called
"
)
;
Assert
.
ok
(
store
.
get
(
SINGLE_FEATURE_RECIPE
.
slug
)
?
.
slug
"
Experiment
is
loaded
from
disk
"
)
;
Assert
.
ok
(
stub
.
firstCall
.
args
[
1
]
"
feature
-
experiment
-
loaded
"
)
;
Assert
.
equal
(
NimbusFeatures
.
urlbar
.
getAllVariables
(
)
.
valueThatWillDefinitelyShowUp
SINGLE_FEATURE_RECIPE
.
branch
.
feature
.
value
.
valueThatWillDefinitelyShowUp
"
Should
match
getAllVariables
"
)
;
Assert
.
equal
(
NimbusFeatures
.
urlbar
.
getVariable
(
"
quickSuggestNonSponsoredIndex
"
)
SINGLE_FEATURE_RECIPE
.
branch
.
feature
.
value
.
quickSuggestNonSponsoredIndex
"
Should
match
getVariable
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
const
fileStore
=
new
JSONFile
(
{
path
:
getPath
(
)
}
)
;
await
fileStore
.
load
(
)
;
fileStore
.
data
=
{
}
;
fileStore
.
saveSoon
(
)
;
await
fileStore
.
finalize
(
)
;
apiManagerStub
.
restore
(
)
;
}
)
;
}
)
;
