"
use
strict
"
;
add_setup
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
wait300msAfterTabSwitch
"
true
]
]
}
)
;
const
cleanup
=
await
setupTest
(
)
;
SpecialPowers
.
addTaskImport
(
"
ExperimentAPI
"
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
)
;
SpecialPowers
.
addTaskImport
(
"
NimbusFeatures
"
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
)
;
SpecialPowers
.
addTaskImport
(
"
TestUtils
"
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
registerCleanupFunction
(
cleanup
)
;
}
)
;
add_task
(
async
function
testGetFromChildNewEnrollment
(
)
{
const
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
browserWindow
.
gBrowser
url
:
"
https
:
/
/
example
.
com
"
forceNewProcess
:
true
}
)
;
const
browser
=
tab
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
Assert
.
equal
(
Services
.
appinfo
.
processType
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
"
This
is
running
in
a
content
process
"
)
;
await
ExperimentAPI
.
ready
(
)
;
Assert
.
equal
(
NimbusFeatures
.
testFeature
.
getEnrollmentMetadata
(
)
null
"
Experiment
should
not
exist
in
child
yet
"
)
;
}
)
;
let
childUpdated
=
await
childSharedDataChanged
(
browser
)
;
await
ExperimentAPI
.
manager
.
enroll
(
NimbusTestUtils
.
factories
.
recipe
.
withFeatureConfig
(
"
foo
"
{
featureId
:
"
testFeature
"
value
:
{
enabled
:
true
testInt
:
123
}
}
)
"
test
"
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
await
childUpdated
.
promise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
NimbusFeatures
.
testFeature
.
getEnrollmentMetadata
(
)
"
Wait
for
enrollment
child
to
sync
"
)
;
const
meta
=
NimbusFeatures
.
testFeature
.
getEnrollmentMetadata
(
)
;
Assert
.
equal
(
meta
.
slug
"
foo
"
"
Experiment
slug
is
correct
"
)
;
Assert
.
equal
(
meta
.
branch
"
control
"
"
Experiment
branch
slug
is
correct
"
)
;
Assert
.
deepEqual
(
NimbusFeatures
.
testFeature
.
getAllVariables
(
)
{
enabled
:
true
testInt
:
123
}
"
Experiment
values
are
correct
"
)
;
Assert
.
equal
(
NimbusFeatures
.
testFeature
.
getVariable
(
"
enabled
"
)
true
"
Experiment
values
are
correct
"
)
;
Assert
.
equal
(
NimbusFeatures
.
testFeature
.
getVariable
(
"
testInt
"
)
123
"
Experiment
values
are
correct
"
)
;
}
)
;
childUpdated
=
await
childSharedDataChanged
(
browser
)
;
ExperimentAPI
.
manager
.
unenroll
(
"
foo
"
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
await
childUpdated
.
promise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
NimbusFeatures
.
testFeature
.
getEnrollmentMetadata
(
)
=
=
=
null
"
Wait
for
unenrollment
to
sync
"
)
;
}
)
;
ExperimentAPI
.
manager
.
store
.
_deleteForTests
(
"
foo
"
)
;
await
NimbusTestUtils
.
flushStore
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
}
)
;
add_task
(
async
function
testGetFromChildExistingEnrollment
(
)
{
const
browserWindow
=
Services
.
wm
.
getMostRecentBrowserWindow
(
"
navigator
:
browser
"
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
await
ExperimentAPI
.
manager
.
enroll
(
NimbusTestUtils
.
factories
.
recipe
.
withFeatureConfig
(
"
qux
"
{
branchSlug
:
"
treatment
"
featureId
:
"
testFeature
"
value
:
{
enabled
:
false
testInt
:
456
}
}
)
"
test
"
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
browserWindow
.
gBrowser
url
:
"
https
:
/
/
example
.
com
"
forceNewProcess
:
true
}
)
;
const
browser
=
tab
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
ExperimentAPI
.
ready
(
)
;
const
meta
=
NimbusFeatures
.
testFeature
.
getEnrollmentMetadata
(
)
;
Assert
.
equal
(
meta
.
slug
"
qux
"
"
Experiment
slug
is
correct
"
)
;
Assert
.
equal
(
meta
.
branch
"
treatment
"
"
Experiment
branch
slug
is
correct
"
)
;
Assert
.
deepEqual
(
NimbusFeatures
.
testFeature
.
getAllVariables
(
)
{
enabled
:
false
testInt
:
456
}
"
Experiment
values
are
correct
"
)
;
Assert
.
equal
(
NimbusFeatures
.
testFeature
.
getVariable
(
"
enabled
"
)
false
"
Experiment
values
are
correct
"
)
;
Assert
.
equal
(
NimbusFeatures
.
testFeature
.
getVariable
(
"
testInt
"
)
456
"
Experiment
values
are
correct
"
)
;
}
)
;
ExperimentAPI
.
manager
.
unenroll
(
"
qux
"
)
;
ExperimentAPI
.
manager
.
store
.
_deleteForTests
(
"
qux
"
)
;
await
NimbusTestUtils
.
flushStore
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
}
)
;
