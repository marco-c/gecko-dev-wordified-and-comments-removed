"
use
strict
"
;
const
{
ExperimentStore
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
nimbus
/
lib
/
ExperimentStore
.
jsm
"
)
;
const
{
ExperimentFakes
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
jsm
"
)
;
const
{
ExperimentFeatures
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
JSONFile
"
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
function
getPath
(
)
{
const
profileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
path
;
return
PathUtils
.
join
(
profileDir
"
ExperimentStoreData
.
json
"
)
;
}
add_task
(
async
function
test_loadFromFile
(
)
{
const
previousSession
=
new
JSONFile
(
{
path
:
getPath
(
)
}
)
;
await
previousSession
.
load
(
)
;
previousSession
.
data
.
test
=
{
slug
:
"
test
"
active
:
true
lastSeen
:
Date
.
now
(
)
}
;
previousSession
.
saveSoon
(
)
;
await
previousSession
.
finalize
(
)
;
const
store
=
new
ExperimentStore
(
)
;
await
store
.
init
(
)
;
await
store
.
ready
(
)
;
Assert
.
equal
(
previousSession
.
path
store
.
_store
.
path
"
Should
have
the
same
path
"
)
;
Assert
.
ok
(
store
.
get
(
"
test
"
)
"
This
should
pass
if
the
correct
store
path
loaded
successfully
"
)
;
}
)
;
add_task
(
async
function
test_load_from_disk_event
(
)
{
const
experiment
=
ExperimentFakes
.
experiment
(
"
foo
"
{
branch
:
{
slug
:
"
variant
"
features
:
[
{
featureId
:
"
green
"
enabled
:
true
}
]
}
lastSeen
:
Date
.
now
(
)
}
)
;
const
stub
=
sinon
.
stub
(
)
;
const
previousSession
=
new
JSONFile
(
{
path
:
getPath
(
)
}
)
;
await
previousSession
.
load
(
)
;
previousSession
.
data
.
foo
=
experiment
;
previousSession
.
saveSoon
(
)
;
await
previousSession
.
finalize
(
)
;
const
store
=
new
ExperimentStore
(
)
;
store
.
_onFeatureUpdate
(
"
green
"
stub
)
;
await
store
.
init
(
)
;
await
store
.
ready
(
)
;
Assert
.
equal
(
previousSession
.
path
store
.
_store
.
path
"
Should
have
the
same
path
as
previousSession
.
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
stub
.
called
"
Stub
was
called
"
)
;
Assert
.
ok
(
stub
.
firstCall
.
args
[
1
]
"
feature
-
experiment
-
loaded
"
)
;
}
)
;
