export
interface
Attachment
{
hash
:
string
;
size
:
string
;
filename
:
string
;
location
:
string
;
mimetype
:
string
;
}
export
interface
TranslationModelRecord
{
name
:
string
;
fromLang
:
string
;
toLang
:
string
;
version
:
number
;
fileType
:
string
;
attachment
:
Attachment
;
id
:
string
;
schema
:
number
;
last_modified
:
string
;
}
export
interface
WasmRecord
{
name
:
string
;
release
:
string
;
revision
:
string
;
license
:
string
;
}
export
namespace
Bergamot
{
export
interface
ModuleExport
{
BlockingService
:
typeof
BlockingService
;
AlignedMemoryList
:
typeof
AlignedMemoryList
;
TranslationModel
:
typeof
TranslationModel
;
AlignedMemory
:
typeof
AlignedMemory
;
VectorResponseOptions
:
typeof
VectorResponseOptions
;
VectorString
:
typeof
VectorString
;
}
export
class
Vector
<
T
>
{
size
(
)
:
number
;
get
(
index
:
number
)
:
T
;
push_back
(
item
:
T
)
;
}
export
class
VectorResponse
extends
Vector
<
Response
>
{
}
export
class
VectorString
extends
Vector
<
string
>
{
}
export
class
VectorResponseOptions
extends
Vector
<
ResponseOptions
>
{
}
export
class
AlignedMemoryList
extends
Vector
<
AlignedMemory
>
{
}
export
class
BlockingService
{
translate
(
translationModel
vectorSourceText
:
VectorString
vectorResponseOptions
:
VectorResponseOptions
)
:
VectorResponse
;
translateViaPivoting
(
first
:
TranslationModel
second
:
TranslationModel
vectorSourceText
:
VectorString
vectorResponseOptions
:
VectorResponseOptions
)
:
VectorResponse
;
}
export
class
TranslationModel
{
}
export
class
AlignedMemory
{
constructor
(
size
:
number
alignment
:
number
)
;
size
(
)
:
number
;
getByteArrayView
(
)
:
Uint8Array
;
}
export
class
Response
{
getOriginalText
(
)
:
string
;
getTranslatedText
(
)
:
string
;
}
export
class
ResponseOptions
{
qualityScores
:
boolean
;
alignment
:
boolean
;
html
:
boolean
;
sentenceMappings
:
boolean
}
}
interface
RemoteSettingsClient
{
on
:
Function
get
:
Function
attachments
:
any
}
interface
LanguageTranslationModelFile
{
buffer
:
ArrayBuffer
record
:
TranslationModelRecord
}
interface
LanguageTranslationModelFiles
{
model
:
LanguageTranslationModelFile
lex
:
LanguageTranslationModelFile
qualityModel
?
:
LanguageTranslationModelFile
vocab
?
:
LanguageTranslationModelFile
srcvocab
?
:
LanguageTranslationModelFile
trgvocab
?
:
LanguageTranslationModelFile
}
;
type
LanguageTranslationModelFilesAligned
=
{
[
K
in
keyof
LanguageTranslationModelFiles
]
:
AlignedMemory
}
;
