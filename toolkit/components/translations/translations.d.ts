export
interface
Attachment
{
hash
:
string
;
size
:
string
;
filename
:
string
;
location
:
string
;
mimetype
:
string
;
}
export
interface
TranslationModelRecord
{
id
:
string
;
name
:
string
;
sourceLanguage
:
string
;
targetLanguage
:
string
;
architecture
:
string
;
variant
?
:
string
;
version
:
string
;
fileType
:
string
;
decompressedHash
:
string
;
decompressedSize
:
number
;
attachment
:
Attachment
;
schema
:
number
;
last_modified
:
string
;
filter_expression
:
string
;
}
export
interface
WasmRecord
{
id
:
string
;
name
:
string
;
release
:
string
;
revision
:
string
;
license
:
string
;
version
:
string
;
decompressedHash
:
string
;
decompressedSize
:
number
;
attachment
:
Attachment
;
last_modified
:
string
;
filter_expression
:
string
;
}
export
namespace
Bergamot
{
export
interface
ModuleExport
{
BlockingService
:
typeof
BlockingService
;
AlignedMemoryList
:
typeof
AlignedMemoryList
;
TranslationModel
:
typeof
TranslationModel
;
AlignedMemory
:
typeof
AlignedMemory
;
VectorResponseOptions
:
typeof
VectorResponseOptions
;
VectorString
:
typeof
VectorString
;
}
export
class
Vector
<
T
>
{
size
(
)
:
number
;
get
(
index
:
number
)
:
T
;
push_back
(
item
:
T
)
:
void
;
}
export
class
VectorResponse
extends
Vector
<
Response
>
{
}
export
class
VectorString
extends
Vector
<
string
>
{
}
export
class
VectorResponseOptions
extends
Vector
<
ResponseOptions
>
{
}
export
class
AlignedMemoryList
extends
Vector
<
AlignedMemory
>
{
}
export
class
BlockingService
{
translate
(
translationModel
:
TranslationModel
vectorSourceText
:
VectorString
vectorResponseOptions
:
VectorResponseOptions
)
:
VectorResponse
;
translateViaPivoting
(
first
:
TranslationModel
second
:
TranslationModel
vectorSourceText
:
VectorString
vectorResponseOptions
:
VectorResponseOptions
)
:
VectorResponse
;
}
export
class
TranslationModel
{
}
export
class
AlignedMemory
{
constructor
(
size
:
number
alignment
:
number
)
;
size
(
)
:
number
;
getByteArrayView
(
)
:
Uint8Array
;
}
export
class
Response
{
getOriginalText
(
)
:
string
;
getTranslatedText
(
)
:
string
;
}
export
class
ResponseOptions
{
qualityScores
:
boolean
;
alignment
:
boolean
;
html
:
boolean
;
sentenceMappings
:
boolean
;
}
}
interface
RemoteSettingsClient
{
on
:
Function
;
get
:
Function
;
attachments
:
any
;
sync
:
Function
;
}
interface
LanguageTranslationModelFile
{
buffer
:
ArrayBuffer
;
record
:
TranslationModelRecord
;
}
interface
TranslationModelPayload
{
sourceLanguage
:
string
;
targetLanguage
:
string
;
variant
?
:
string
;
languageModelFiles
:
LanguageTranslationModelFiles
;
}
interface
LanguageTranslationModelFiles
{
model
:
LanguageTranslationModelFile
;
lex
?
:
LanguageTranslationModelFile
;
qualityModel
?
:
LanguageTranslationModelFile
;
vocab
?
:
LanguageTranslationModelFile
;
srcvocab
?
:
LanguageTranslationModelFile
;
trgvocab
?
:
LanguageTranslationModelFile
;
}
type
LanguageTranslationModelFilesAligned
=
{
[
K
in
keyof
LanguageTranslationModelFiles
]
:
Bergamot
.
AlignedMemory
;
}
;
interface
TranslationsEnginePayload
{
bergamotWasmArrayBuffer
:
ArrayBuffer
;
translationModelPayloads
:
TranslationModelPayload
[
]
;
isMocked
:
boolean
;
}
export
type
NodeVisibility
=
"
in
-
viewport
"
|
"
beyond
-
viewport
"
|
"
hidden
"
;
export
interface
LangTags
{
isDocLangTagSupported
:
boolean
;
docLangTag
:
string
|
null
;
userLangTag
:
string
|
null
;
htmlLangAttribute
:
string
|
null
;
identified
:
null
|
DetectionResult
;
}
export
interface
LanguagePair
{
sourceLanguage
:
string
;
targetLanguage
:
string
;
sourceVariant
?
:
string
;
targetVariant
?
:
string
;
}
export
interface
NonPivotLanguagePair
{
sourceLanguage
:
string
;
targetLanguage
:
string
;
variant
?
:
string
;
}
export
interface
SupportedLanguage
{
langTag
:
string
;
langTagKey
:
string
;
variant
:
string
;
displayName
:
string
;
}
export
interface
SupportedLanguages
{
languagePairs
:
NonPivotLanguagePair
[
]
;
sourceLanguages
:
Array
<
SupportedLanguage
>
;
targetLanguages
:
Array
<
SupportedLanguage
>
;
}
export
type
TranslationErrors
=
"
engine
-
load
-
error
"
;
export
type
SelectTranslationsPanelState
=
|
{
phase
:
"
closed
"
}
|
{
phase
:
"
idle
"
;
sourceLanguage
:
string
;
targetLanguage
:
string
;
sourceText
:
string
;
}
|
{
phase
:
"
init
-
failure
"
;
event
:
Event
;
screenX
:
number
;
screenY
:
number
;
sourceText
:
string
;
isTextSelected
:
boolean
;
langPairPromise
:
Promise
<
{
sourceLanguage
?
:
string
;
targetLanguage
?
:
string
;
}
>
;
}
|
{
phase
:
"
translation
-
failure
"
;
sourceLanguage
:
string
;
targetLanguage
:
string
;
sourceText
:
string
;
}
|
{
phase
:
"
translatable
"
;
sourceLanguage
:
string
;
targetLanguage
:
string
;
sourceText
:
string
;
}
|
{
phase
:
"
translating
"
;
sourceLanguage
:
string
;
targetLanguage
:
string
;
sourceText
:
string
;
}
|
{
phase
:
"
translated
"
;
sourceLanguage
:
string
;
targetLanguage
:
string
;
sourceText
:
string
;
translatedText
:
string
;
}
|
{
phase
:
"
unsupported
"
;
detectedLanguage
:
string
;
targetLanguage
:
string
;
sourceText
:
string
;
}
;
export
type
RequestTranslationsPort
=
(
languagePair
:
LanguagePair
)
=
>
Promise
<
MessagePort
>
;
export
type
TranslationsPortMessages
=
|
{
type
:
"
TranslationsPort
:
Passthrough
"
;
translationId
:
string
}
|
{
type
:
"
TranslationsPort
:
CachedTranslation
"
;
translationId
:
string
;
targetText
:
string
;
}
|
{
type
:
"
TranslationsPort
:
TranslationRequest
"
;
translationId
:
string
;
sourceText
:
string
;
isHTML
:
boolean
;
}
;
export
type
EngineStatus
=
"
uninitialized
"
|
"
ready
"
|
"
error
"
|
"
closed
"
;
export
type
PortToPage
=
|
{
type
:
"
TranslationsPort
:
TranslationResponse
"
;
targetText
:
string
|
null
;
translationId
:
number
;
}
|
{
type
:
"
TranslationsPort
:
GetEngineStatusResponse
"
;
status
:
EngineStatus
}
|
{
type
:
"
TranslationsPort
:
EngineTerminated
"
}
;
export
type
TranslationsMode
=
"
lazy
"
|
"
content
-
eager
"
;
export
type
ScrollDirection
=
"
up
"
|
"
down
"
;
export
type
NodeViewportContext
=
|
"
within
"
|
"
above
"
|
"
right
"
|
"
below
"
|
"
left
"
;
export
interface
NodeSpatialContext
{
top
?
:
number
;
right
?
:
number
;
left
?
:
number
;
viewportContext
?
:
NodeViewportContext
;
}
export
type
UpdateEligibility
=
"
stale
"
|
"
detached
"
|
"
valid
"
;
export
interface
SortableContentElement
{
element
:
Element
;
nodeSet
:
Set
<
Node
>
;
top
?
:
number
;
left
?
:
number
;
right
?
:
number
;
}
export
interface
PrioritizedContentElements
{
titleElement
?
:
Element
;
inViewportContent
:
Array
<
SortableContentElement
>
;
aboveViewportContent
:
Array
<
SortableContentElement
>
;
belowViewportContent
:
Array
<
SortableContentElement
>
;
otherContent
:
Array
<
SortableContentElement
>
;
}
export
interface
SortableAttributeElement
{
element
:
Element
;
attributeSet
:
Set
<
string
>
;
top
?
:
number
;
left
?
:
number
;
right
?
:
number
;
}
export
interface
PrioritizedAttributeElements
{
inViewportAttributes
:
Array
<
SortableAttributeElement
>
;
aboveViewportAttributes
:
Array
<
SortableAttributeElement
>
;
belowViewportAttributes
:
Array
<
SortableAttributeElement
>
;
otherAttributes
:
Array
<
SortableAttributeElement
>
;
}
export
interface
TranslationPriorityKinds
{
inViewportContentPriority
:
number
;
inViewportAttributePriority
:
number
;
aboveViewportContentPriority
:
number
;
aboveViewportAttributePriority
:
number
;
belowViewportContentPriority
:
number
;
belowViewportAttributePriority
:
number
;
otherContentPriority
:
number
;
otherAttributePriority
:
number
;
}
export
interface
TranslationRequest
{
node
:
Node
;
sourceText
:
string
;
translationId
:
number
;
isHTML
:
boolean
;
priority
:
number
;
resolve
:
(
translation
:
Promise
<
string
>
|
string
|
null
)
=
>
unknown
;
reject
:
(
reason
:
any
)
=
>
unknown
;
}
export
type
TranslationFunction
=
(
message
:
string
)
=
>
Promise
<
string
>
;
interface
MultilingualSection
{
language
:
string
;
percent
:
number
;
}
interface
DetectionResult
{
language
:
string
;
confident
:
boolean
;
languages
:
MultilingualSection
[
]
;
}
