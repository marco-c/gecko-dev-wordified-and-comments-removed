"
use
strict
"
;
add_task
(
async
function
test_about_translations_language_swap
(
)
{
const
{
runInPage
cleanup
resolveDownloads
}
=
await
openAboutTranslations
(
{
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
fr
"
}
{
fromLang
:
"
en
"
toLang
:
"
it
"
}
{
fromLang
:
"
fr
"
toLang
:
"
en
"
}
]
autoDownloadFromRemoteSettings
:
false
}
)
;
await
runInPage
(
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
Cu
.
waiveXrays
(
window
)
.
DEBOUNCE_DELAY
=
5
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
document
.
body
.
hasAttribute
(
"
ready
"
)
;
}
"
Waiting
for
the
document
to
be
ready
.
"
100
200
)
;
const
fromSelect
=
document
.
querySelector
(
selectors
.
fromLanguageSelect
)
;
const
toSelect
=
document
.
querySelector
(
selectors
.
toLanguageSelect
)
;
const
translationFrom
=
document
.
querySelector
(
selectors
.
translationTextarea
)
;
const
swapButton
=
document
.
querySelector
(
selectors
.
languageSwapButton
)
;
is
(
fromSelect
.
value
"
detect
"
)
;
is
(
toSelect
.
value
"
"
)
;
is
(
swapButton
.
disabled
true
"
The
language
swap
button
is
disabled
"
)
;
fromSelect
.
value
=
"
en
"
;
fromSelect
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
fromSelect
.
value
=
=
=
"
en
"
"
en
selected
in
fromSelect
"
100
200
)
;
is
(
fromSelect
.
value
"
en
"
)
;
is
(
toSelect
.
value
"
"
)
;
is
(
swapButton
.
disabled
false
"
The
language
swap
button
is
enabled
"
)
;
translationFrom
.
value
=
"
Translation
text
number
1
.
"
;
translationFrom
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
swapButton
.
disabled
=
=
=
true
"
The
language
swap
button
is
disabled
"
100
200
)
;
is
(
swapButton
.
disabled
true
"
The
language
swap
button
is
disabled
"
)
;
translationFrom
.
value
=
"
"
;
translationFrom
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
swapButton
.
disabled
=
=
=
false
"
The
language
swap
button
is
enabled
"
100
200
)
;
swapButton
.
dispatchEvent
(
new
Event
(
"
click
"
)
)
;
is
(
fromSelect
.
value
"
detect
"
)
;
is
(
toSelect
.
value
"
en
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
swapButton
.
disabled
=
=
=
false
"
The
language
swap
button
is
enabled
"
100
200
)
;
is
(
swapButton
.
disabled
false
"
The
language
swap
button
is
enabled
"
)
;
translationFrom
.
value
=
"
Translation
text
number
1
.
"
;
translationFrom
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
swapButton
.
disabled
=
=
=
true
"
The
language
swap
button
is
disabled
"
100
200
)
;
is
(
swapButton
.
disabled
true
"
The
language
swap
button
is
disabled
"
)
;
fromSelect
.
value
=
"
fr
"
;
fromSelect
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
fromSelect
.
value
=
=
=
"
fr
"
"
fr
selected
in
fromSelect
"
100
200
)
;
translationFrom
.
value
=
"
"
;
translationFrom
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
swapButton
.
disabled
=
=
=
false
"
The
language
swap
button
is
enabled
"
100
200
)
;
is
(
swapButton
.
disabled
false
"
The
language
swap
button
is
enabled
"
)
;
}
)
;
await
resolveDownloads
(
1
)
;
await
runInPage
(
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
Cu
.
waiveXrays
(
window
)
.
DEBOUNCE_DELAY
=
5
;
const
fromSelect
=
document
.
querySelector
(
selectors
.
fromLanguageSelect
)
;
const
toSelect
=
document
.
querySelector
(
selectors
.
toLanguageSelect
)
;
const
translationFrom
=
document
.
querySelector
(
selectors
.
translationTextarea
)
;
const
translationTo
=
document
.
querySelector
(
selectors
.
translationResult
)
;
const
swapButton
=
document
.
querySelector
(
selectors
.
languageSwapButton
)
;
translationFrom
.
value
=
"
Translation
text
number
1
.
"
;
translationFrom
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
translationTo
.
innerText
=
=
=
"
TRANSLATION
TEXT
NUMBER
1
.
[
fr
to
en
]
"
"
translation
from
fr
to
en
is
complete
"
100
200
)
;
is
(
fromSelect
.
value
"
fr
"
)
;
is
(
toSelect
.
value
"
en
"
)
;
is
(
translationFrom
.
value
"
Translation
text
number
1
.
"
)
;
is
(
translationTo
.
innerText
"
TRANSLATION
TEXT
NUMBER
1
.
[
fr
to
en
]
"
)
;
is
(
swapButton
.
disabled
false
"
The
language
swap
button
is
enabled
"
)
;
swapButton
.
dispatchEvent
(
new
Event
(
"
click
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
swapButton
.
disabled
=
=
=
true
"
The
language
swap
button
is
disabled
"
100
200
)
;
is
(
swapButton
.
disabled
true
"
The
language
swap
button
is
disabled
"
)
;
}
)
;
await
resolveDownloads
(
1
)
;
await
runInPage
(
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
Cu
.
waiveXrays
(
window
)
.
DEBOUNCE_DELAY
=
5
;
const
fromSelect
=
document
.
querySelector
(
selectors
.
fromLanguageSelect
)
;
const
toSelect
=
document
.
querySelector
(
selectors
.
toLanguageSelect
)
;
const
translationFrom
=
document
.
querySelector
(
selectors
.
translationTextarea
)
;
const
translationTo
=
document
.
querySelector
(
selectors
.
translationResult
)
;
const
swapButton
=
document
.
querySelector
(
selectors
.
languageSwapButton
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
translationTo
.
innerText
=
=
=
"
TRANSLATION
TEXT
NUMBER
1
.
[
FR
TO
EN
]
[
en
to
fr
]
"
"
translation
from
en
to
fr
is
complete
"
100
200
)
;
is
(
fromSelect
.
value
"
en
"
)
;
is
(
toSelect
.
value
"
fr
"
)
;
is
(
translationFrom
.
value
"
TRANSLATION
TEXT
NUMBER
1
.
[
fr
to
en
]
"
)
;
is
(
translationTo
.
innerText
"
TRANSLATION
TEXT
NUMBER
1
.
[
FR
TO
EN
]
[
en
to
fr
]
"
)
;
is
(
swapButton
.
disabled
false
"
The
language
swap
button
is
enabled
"
)
;
toSelect
.
value
=
"
it
"
;
toSelect
.
dispatchEvent
(
new
Event
(
"
input
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
toSelect
.
value
=
=
=
"
it
"
"
it
selected
in
toSelect
"
100
200
)
;
is
(
swapButton
.
disabled
true
"
The
language
swap
button
is
disabled
"
)
;
}
)
;
await
resolveDownloads
(
1
)
;
await
runInPage
(
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
Cu
.
waiveXrays
(
window
)
.
DEBOUNCE_DELAY
=
5
;
const
fromSelect
=
document
.
querySelector
(
selectors
.
fromLanguageSelect
)
;
const
toSelect
=
document
.
querySelector
(
selectors
.
toLanguageSelect
)
;
const
translationFrom
=
document
.
querySelector
(
selectors
.
translationTextarea
)
;
const
translationTo
=
document
.
querySelector
(
selectors
.
translationResult
)
;
const
swapButton
=
document
.
querySelector
(
selectors
.
languageSwapButton
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
translationTo
.
innerText
=
=
=
"
TRANSLATION
TEXT
NUMBER
1
.
[
FR
TO
EN
]
[
en
to
it
]
"
"
translation
from
en
to
it
is
complete
"
100
200
)
;
is
(
fromSelect
.
value
"
en
"
)
;
is
(
toSelect
.
value
"
it
"
)
;
is
(
translationFrom
.
value
"
TRANSLATION
TEXT
NUMBER
1
.
[
fr
to
en
]
"
)
;
is
(
translationTo
.
innerText
"
TRANSLATION
TEXT
NUMBER
1
.
[
FR
TO
EN
]
[
en
to
it
]
"
)
;
is
(
swapButton
.
disabled
true
"
The
language
swap
button
is
disabled
"
)
;
}
)
;
await
cleanup
(
)
;
}
)
;
