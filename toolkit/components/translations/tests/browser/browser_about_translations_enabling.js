"
use
strict
"
;
add_task
(
async
function
test_about_translations_enabled
(
)
{
await
openAboutTranslations
(
{
runInPage
:
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
const
trElement
=
document
.
querySelector
(
selectors
.
translationResult
)
;
const
trBlankElement
=
document
.
querySelector
(
selectors
.
translationResultBlank
)
;
const
{
visibility
:
trVisibility
}
=
window
.
getComputedStyle
(
trElement
)
;
const
{
visibility
:
trBlankVisibility
}
=
window
.
getComputedStyle
(
trBlankElement
)
;
return
trVisibility
=
=
=
"
hidden
"
&
&
trBlankVisibility
=
=
=
"
visible
"
;
}
Waiting
for
placeholder
text
to
be
visible
.
"
)
;
function
checkElementIsVisible
(
expectVisible
name
)
{
const
expected
=
expectVisible
?
"
visible
"
:
"
hidden
"
;
const
element
=
document
.
querySelector
(
selectors
[
name
]
)
;
ok
(
Boolean
(
element
)
Element
{
name
}
was
found
.
)
;
const
{
visibility
}
=
window
.
getComputedStyle
(
element
)
;
is
(
visibility
expected
Element
{
name
}
was
not
{
expected
}
but
should
be
.
)
;
}
checkElementIsVisible
(
true
"
pageHeader
"
)
;
checkElementIsVisible
(
true
"
fromLanguageSelect
"
)
;
checkElementIsVisible
(
true
"
toLanguageSelect
"
)
;
checkElementIsVisible
(
true
"
translationTextarea
"
)
;
checkElementIsVisible
(
true
"
translationResultBlank
"
)
;
checkElementIsVisible
(
false
"
translationResult
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_about_translations_disabled
(
)
{
await
openAboutTranslations
(
{
disabled
:
true
runInPage
:
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
const
element
=
document
.
querySelector
(
selectors
.
translationResult
)
;
const
{
visibility
}
=
window
.
getComputedStyle
(
element
)
;
return
visibility
=
=
=
"
hidden
"
;
}
Waiting
for
translated
text
to
be
hidden
.
"
)
;
function
checkElementIsInvisible
(
name
)
{
const
element
=
document
.
querySelector
(
selectors
[
name
]
)
;
ok
(
Boolean
(
element
)
Element
{
name
}
was
found
.
)
;
const
{
visibility
}
=
window
.
getComputedStyle
(
element
)
;
is
(
visibility
"
hidden
"
Element
{
name
}
was
invisible
.
)
;
}
checkElementIsInvisible
(
"
pageHeader
"
)
;
checkElementIsInvisible
(
"
fromLanguageSelect
"
)
;
checkElementIsInvisible
(
"
toLanguageSelect
"
)
;
checkElementIsInvisible
(
"
translationTextarea
"
)
;
checkElementIsInvisible
(
"
translationResult
"
)
;
checkElementIsInvisible
(
"
translationResultBlank
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_about_translations_disabling
(
)
{
await
openAboutTranslations
(
{
prefs
:
[
[
"
browser
.
translations
.
simulateUnsupportedEngine
"
true
]
]
runInPage
:
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
info
(
'
Checking
for
the
"
no
support
"
message
.
'
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
document
.
querySelector
(
selectors
.
noSupportMessage
)
'
Waiting
for
the
"
no
support
"
message
.
'
)
;
const
fromSelect
=
document
.
querySelector
(
selectors
.
fromLanguageSelect
)
;
const
toSelect
=
document
.
querySelector
(
selectors
.
toLanguageSelect
)
;
const
translationTextarea
=
document
.
querySelector
(
selectors
.
translationTextarea
)
;
ok
(
fromSelect
.
disabled
"
The
from
select
is
disabled
"
)
;
ok
(
toSelect
.
disabled
"
The
to
select
is
disabled
"
)
;
ok
(
translationTextarea
.
disabled
"
The
textarea
is
disabled
"
)
;
function
checkElementIsVisible
(
expectVisible
name
)
{
const
expected
=
expectVisible
?
"
visible
"
:
"
hidden
"
;
const
element
=
document
.
querySelector
(
selectors
[
name
]
)
;
ok
(
Boolean
(
element
)
Element
{
name
}
was
found
.
)
;
const
{
visibility
}
=
window
.
getComputedStyle
(
element
)
;
is
(
visibility
expected
Element
{
name
}
was
not
{
expected
}
but
should
be
.
)
;
}
checkElementIsVisible
(
true
"
translationInfo
"
)
;
}
}
)
;
}
)
;
