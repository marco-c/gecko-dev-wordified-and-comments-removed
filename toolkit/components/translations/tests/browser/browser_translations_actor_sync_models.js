"
use
strict
"
;
add_task
(
async
function
test_translations_actor_sync_update
(
)
{
const
{
remoteClients
cleanup
}
=
await
setupActorTest
(
{
autoDownloadFromRemoteSettings
:
true
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
]
}
)
;
const
decoder
=
new
TextDecoder
(
)
;
const
modelsPromise
=
TranslationsParent
.
getLanguageTranslationModelFiles
(
"
en
"
"
es
"
)
;
const
oldModels
=
await
modelsPromise
;
is
(
decoder
.
decode
(
oldModels
.
model
.
buffer
)
Mocked
download
:
test
-
translation
-
models
model
.
enes
.
intgemm
.
alphas
.
bin
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
The
version
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
model
is
downloaded
.
)
;
const
newModelRecords
=
createRecordsForLanguagePair
(
"
en
"
"
es
"
)
;
for
(
const
newModelRecord
of
newModelRecords
)
{
newModelRecord
.
version
=
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
1
;
}
info
(
'
Emitting
a
remote
client
"
sync
"
event
with
an
updated
record
.
'
)
;
await
remoteClients
.
translationModels
.
client
.
emit
(
"
sync
"
{
data
:
{
created
:
[
]
updated
:
newModelRecords
.
map
(
newRecord
=
>
(
{
old
:
oldModels
[
newRecord
.
fileType
]
.
record
new
:
newRecord
}
)
)
deleted
:
[
]
}
}
)
;
const
updatedModelsPromise
=
TranslationsParent
.
getLanguageTranslationModelFiles
(
"
en
"
"
es
"
)
;
const
{
model
:
updatedModel
}
=
await
updatedModelsPromise
;
is
(
decoder
.
decode
(
updatedModel
.
buffer
)
Mocked
download
:
test
-
translation
-
models
model
.
enes
.
intgemm
.
alphas
.
bin
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
1
The
version
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
1
model
is
downloaded
.
)
;
return
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_translations_actor_sync_delete
(
)
{
const
{
remoteClients
cleanup
}
=
await
setupActorTest
(
{
autoDownloadFromRemoteSettings
:
true
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
]
}
)
;
const
decoder
=
new
TextDecoder
(
)
;
const
modelsPromise
=
TranslationsParent
.
getLanguageTranslationModelFiles
(
"
en
"
"
es
"
)
;
const
{
model
}
=
await
modelsPromise
;
is
(
decoder
.
decode
(
model
.
buffer
)
Mocked
download
:
test
-
translation
-
models
model
.
enes
.
intgemm
.
alphas
.
bin
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
The
version
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
model
is
downloaded
.
)
;
info
(
'
Emitting
a
remote
client
"
sync
"
event
with
a
deleted
record
.
'
)
;
await
remoteClients
.
translationModels
.
client
.
emit
(
"
sync
"
{
data
:
{
created
:
[
]
updated
:
[
]
deleted
:
[
model
.
record
]
}
}
)
;
let
errorMessage
;
await
TranslationsParent
.
getLanguageTranslationModelFiles
(
"
en
"
"
es
"
)
.
catch
(
error
=
>
{
errorMessage
=
error
?
.
message
;
}
)
;
is
(
errorMessage
'
No
model
file
was
found
for
"
en
"
to
"
es
.
"
'
"
The
model
was
successfully
removed
.
"
)
;
return
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_translations_actor_sync_create
(
)
{
const
{
remoteClients
cleanup
}
=
await
setupActorTest
(
{
autoDownloadFromRemoteSettings
:
true
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
]
}
)
;
const
decoder
=
new
TextDecoder
(
)
;
const
modelsPromise
=
TranslationsParent
.
getLanguageTranslationModelFiles
(
"
en
"
"
es
"
)
;
is
(
decoder
.
decode
(
(
await
modelsPromise
)
.
model
.
buffer
)
Mocked
download
:
test
-
translation
-
models
model
.
enes
.
intgemm
.
alphas
.
bin
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
The
version
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
model
is
downloaded
.
)
;
info
(
'
Emitting
a
remote
client
"
sync
"
event
with
new
records
.
'
)
;
await
remoteClients
.
translationModels
.
client
.
emit
(
"
sync
"
{
data
:
{
created
:
createRecordsForLanguagePair
(
"
en
"
"
fr
"
)
updated
:
[
]
deleted
:
[
]
}
}
)
;
const
updatedModelsPromise
=
TranslationsParent
.
getLanguageTranslationModelFiles
(
"
en
"
"
fr
"
)
;
const
{
vocab
lex
model
}
=
await
updatedModelsPromise
;
is
(
decoder
.
decode
(
vocab
.
buffer
)
Mocked
download
:
test
-
translation
-
models
vocab
.
enfr
.
spm
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
"
The
en
to
fr
vocab
is
downloaded
.
"
)
;
is
(
decoder
.
decode
(
lex
.
buffer
)
Mocked
download
:
test
-
translation
-
models
lex
.
50
.
50
.
enfr
.
s2t
.
bin
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
"
The
en
to
fr
lex
is
downloaded
.
"
)
;
is
(
decoder
.
decode
(
model
.
buffer
)
Mocked
download
:
test
-
translation
-
models
model
.
enfr
.
intgemm
.
alphas
.
bin
{
TranslationsParent
.
LANGUAGE_MODEL_MAJOR_VERSION
}
.
0
"
The
en
to
fr
model
is
downloaded
.
"
)
;
return
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_translations_parent_download_size
(
)
{
const
{
cleanup
}
=
await
setupActorTest
(
{
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
de
"
}
{
fromLang
:
"
de
"
toLang
:
"
en
"
}
]
}
)
;
const
directSize
=
await
TranslationsParent
.
getExpectedTranslationDownloadSize
(
"
en
"
"
es
"
)
;
is
(
directSize
3
*
123
"
Returned
the
expected
download
size
for
a
direct
translation
.
"
)
;
const
pivotSize
=
await
TranslationsParent
.
getExpectedTranslationDownloadSize
(
"
es
"
"
de
"
)
;
is
(
pivotSize
2
*
3
*
123
"
Returned
the
expected
download
size
for
a
pivot
.
"
)
;
const
notApplicableSize
=
await
TranslationsParent
.
getExpectedTranslationDownloadSize
(
"
unknown
"
"
unknown
"
)
;
is
(
notApplicableSize
0
"
Returned
the
expected
download
size
for
an
unknown
or
not
applicable
model
.
"
)
;
return
cleanup
(
)
;
}
)
;
