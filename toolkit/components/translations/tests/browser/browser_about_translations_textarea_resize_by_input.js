"
use
strict
"
;
const
largeExpandingInput
=
\
\
\
\
\
\
\
\
\
\
\
\
;
const
halfLargeExpandingInput
=
\
\
\
\
\
\
;
add_task
(
async
function
test_about_translations_no_resize_for_small_input
(
)
{
const
{
aboutTranslationsTestUtils
cleanup
}
=
await
openAboutTranslations
(
{
languagePairs
:
[
{
fromLang
:
"
de
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
de
"
}
]
}
)
;
await
aboutTranslationsTestUtils
.
assertEvents
(
{
expected
:
[
[
AboutTranslationsTestUtils
.
Events
.
TranslationRequested
{
translationId
:
1
}
]
[
AboutTranslationsTestUtils
.
Events
.
ShowTranslatingPlaceholder
]
]
unexpected
:
[
AboutTranslationsTestUtils
.
Events
.
TextAreaHeightsChanged
]
}
async
(
)
=
>
{
await
aboutTranslationsTestUtils
.
setSourceLanguageSelectorValue
(
"
de
"
)
;
await
aboutTranslationsTestUtils
.
setTargetLanguageSelectorValue
(
"
en
"
)
;
await
aboutTranslationsTestUtils
.
setSourceTextAreaValue
(
"
Hello
world
"
)
;
}
)
;
await
aboutTranslationsTestUtils
.
assertEvents
(
{
expected
:
[
[
AboutTranslationsTestUtils
.
Events
.
TranslationComplete
{
translationId
:
1
}
]
]
}
async
(
)
=
>
{
await
aboutTranslationsTestUtils
.
resolveDownloads
(
1
)
;
}
)
;
await
aboutTranslationsTestUtils
.
assertTranslatedText
(
{
sourceLanguage
:
"
de
"
targetLanguage
:
"
en
"
sourceText
:
"
Hello
world
"
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_about_translations_resize_by_input
(
)
{
const
{
aboutTranslationsTestUtils
cleanup
}
=
await
openAboutTranslations
(
{
languagePairs
:
[
{
fromLang
:
"
de
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
de
"
}
]
}
)
;
info
(
"
The
text
areas
should
expand
when
a
large
input
is
pasted
as
the
source
.
"
)
;
await
aboutTranslationsTestUtils
.
assertEvents
(
{
expected
:
[
[
AboutTranslationsTestUtils
.
Events
.
TranslationRequested
{
translationId
:
1
}
]
[
AboutTranslationsTestUtils
.
Events
.
ShowTranslatingPlaceholder
]
[
AboutTranslationsTestUtils
.
Events
.
TextAreaHeightsChanged
{
textAreaHeights
:
"
increased
"
}
]
]
}
async
(
)
=
>
{
await
aboutTranslationsTestUtils
.
setSourceLanguageSelectorValue
(
"
de
"
)
;
await
aboutTranslationsTestUtils
.
setTargetLanguageSelectorValue
(
"
en
"
)
;
await
aboutTranslationsTestUtils
.
setSourceTextAreaValue
(
largeExpandingInput
)
;
}
)
;
info
(
"
The
text
areas
should
expand
again
if
the
translated
output
is
taller
than
the
input
.
"
)
;
await
aboutTranslationsTestUtils
.
assertEvents
(
{
expected
:
[
[
AboutTranslationsTestUtils
.
Events
.
TranslationComplete
{
translationId
:
1
}
]
[
AboutTranslationsTestUtils
.
Events
.
TextAreaHeightsChanged
{
textAreaHeights
:
"
increased
"
}
]
]
}
async
(
)
=
>
{
await
aboutTranslationsTestUtils
.
resolveDownloads
(
1
)
;
}
)
;
await
aboutTranslationsTestUtils
.
assertTranslatedText
(
{
sourceLanguage
:
"
de
"
targetLanguage
:
"
en
"
sourceText
:
largeExpandingInput
}
)
;
info
(
"
The
text
areas
should
reduce
their
size
if
the
content
height
is
reduced
.
"
)
;
await
aboutTranslationsTestUtils
.
assertEvents
(
{
expected
:
[
[
AboutTranslationsTestUtils
.
Events
.
TranslationRequested
{
translationId
:
2
}
]
[
AboutTranslationsTestUtils
.
Events
.
TranslationComplete
{
translationId
:
2
}
]
[
AboutTranslationsTestUtils
.
Events
.
TextAreaHeightsChanged
{
textAreaHeights
:
"
decreased
"
}
]
]
unexpected
:
[
AboutTranslationsTestUtils
.
Events
.
ShowTranslatingPlaceholder
]
}
async
(
)
=
>
{
await
aboutTranslationsTestUtils
.
setSourceTextAreaValue
(
halfLargeExpandingInput
)
;
}
)
;
await
aboutTranslationsTestUtils
.
assertTranslatedText
(
{
sourceLanguage
:
"
de
"
targetLanguage
:
"
en
"
sourceText
:
halfLargeExpandingInput
}
)
;
info
(
"
The
text
areas
should
reset
to
default
height
when
all
content
is
removed
.
"
)
;
await
aboutTranslationsTestUtils
.
assertEvents
(
{
expected
:
[
[
AboutTranslationsTestUtils
.
Events
.
TextAreaHeightsChanged
{
textAreaHeights
:
"
decreased
"
}
]
]
unexpected
:
[
AboutTranslationsTestUtils
.
Events
.
TranslationRequested
AboutTranslationsTestUtils
.
Events
.
ShowTranslatingPlaceholder
]
}
async
(
)
=
>
{
await
aboutTranslationsTestUtils
.
setSourceTextAreaValue
(
"
"
)
;
}
)
;
await
aboutTranslationsTestUtils
.
assertSourceTextArea
(
{
showsPlaceholder
:
true
}
)
;
await
aboutTranslationsTestUtils
.
assertTargetTextArea
(
{
showsPlaceholder
:
true
}
)
;
await
cleanup
(
)
;
}
)
;
