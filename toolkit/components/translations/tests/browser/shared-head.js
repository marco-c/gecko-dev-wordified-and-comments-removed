"
use
strict
"
;
const
BLANK_PAGE
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
!
DOCTYPE
html
>
<
title
>
Blank
<
/
title
>
Blank
page
"
;
const
URL_COM_PREFIX
=
"
https
:
/
/
example
.
com
/
browser
/
"
;
const
URL_ORG_PREFIX
=
"
https
:
/
/
example
.
org
/
browser
/
"
;
const
CHROME_URL_PREFIX
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
"
;
const
DIR_PATH
=
"
toolkit
/
components
/
translations
/
tests
/
browser
/
"
;
const
ENGLISH_PAGE_URL
=
URL_COM_PREFIX
+
DIR_PATH
+
"
translations
-
tester
-
en
.
html
"
;
const
SPANISH_PAGE_URL
=
URL_COM_PREFIX
+
DIR_PATH
+
"
translations
-
tester
-
es
.
html
"
;
const
FRENCH_PAGE_URL
=
URL_COM_PREFIX
+
DIR_PATH
+
"
translations
-
tester
-
fr
.
html
"
;
const
SPANISH_PAGE_URL_2
=
URL_COM_PREFIX
+
DIR_PATH
+
"
translations
-
tester
-
es
-
2
.
html
"
;
const
SPANISH_PAGE_URL_DOT_ORG
=
URL_ORG_PREFIX
+
DIR_PATH
+
"
translations
-
tester
-
es
.
html
"
;
const
NO_LANGUAGE_URL
=
URL_COM_PREFIX
+
DIR_PATH
+
"
translations
-
tester
-
no
-
tag
.
html
"
;
const
PIVOT_LANGUAGE
=
"
en
"
;
const
LANGUAGE_PAIRS
=
[
{
fromLang
:
PIVOT_LANGUAGE
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
PIVOT_LANGUAGE
}
{
fromLang
:
PIVOT_LANGUAGE
toLang
:
"
fr
"
}
{
fromLang
:
"
fr
"
toLang
:
PIVOT_LANGUAGE
}
{
fromLang
:
PIVOT_LANGUAGE
toLang
:
"
uk
"
}
{
fromLang
:
"
uk
"
toLang
:
PIVOT_LANGUAGE
}
]
;
const
TRANSLATIONS_PERMISSION
=
"
translations
"
;
const
ALWAYS_TRANSLATE_LANGS_PREF
=
"
browser
.
translations
.
alwaysTranslateLanguages
"
;
const
NEVER_TRANSLATE_LANGS_PREF
=
"
browser
.
translations
.
neverTranslateLanguages
"
;
async
function
openAboutTranslations
(
{
dataForContent
disabled
runInPage
detectedLanguageConfidence
detectedLangTag
languagePairs
=
LANGUAGE_PAIRS
prefs
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
translations
.
enable
"
!
disabled
]
[
"
browser
.
translations
.
logLevel
"
"
All
"
]
.
.
.
(
prefs
?
?
[
]
)
]
}
)
;
const
selectors
=
{
pageHeader
:
'
[
data
-
l10n
-
id
=
"
about
-
translations
-
header
"
]
'
fromLanguageSelect
:
"
select
#
language
-
from
"
toLanguageSelect
:
"
select
#
language
-
to
"
translationTextarea
:
"
textarea
#
translation
-
from
"
translationResult
:
"
#
translation
-
to
"
translationResultBlank
:
"
#
translation
-
to
-
blank
"
translationInfo
:
"
#
translation
-
info
"
noSupportMessage
:
"
[
data
-
l10n
-
id
=
'
about
-
translations
-
no
-
support
'
]
"
}
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
BLANK_PAGE
true
)
;
const
{
removeMocks
remoteClients
}
=
await
createAndMockRemoteSettings
(
{
languagePairs
autoDownloadFromRemoteSettings
:
true
detectedLangTag
detectedLanguageConfidence
}
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
"
about
:
translations
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
remoteClients
.
languageIdModels
.
resolvePendingDownloads
(
1
)
;
await
remoteClients
.
translationsWasm
.
resolvePendingDownloads
(
2
)
;
await
remoteClients
.
translationModels
.
resolvePendingDownloads
(
languagePairs
.
length
*
FILES_PER_LANGUAGE_PAIR
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
dataForContent
selectors
}
runInPage
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
removeMocks
(
)
;
await
TranslationsParent
.
destroyEngineProcess
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
function
naivelyPrettify
(
html
)
{
let
result
=
"
"
;
let
indent
=
0
;
function
addText
(
actualEndIndex
)
{
const
text
=
html
.
slice
(
startIndex
actualEndIndex
)
.
trim
(
)
;
if
(
text
)
{
for
(
let
i
=
0
;
i
<
indent
;
i
+
+
)
{
result
+
=
"
"
;
}
result
+
=
text
+
"
\
n
"
;
}
startIndex
=
actualEndIndex
;
}
let
startIndex
=
0
;
let
endIndex
=
0
;
for
(
;
endIndex
<
html
.
length
;
endIndex
+
+
)
{
if
(
html
[
endIndex
]
=
=
=
"
"
|
|
html
[
endIndex
]
=
=
=
"
\
t
"
|
|
html
[
endIndex
]
=
=
=
"
n
"
)
{
startIndex
=
endIndex
;
continue
;
}
while
(
endIndex
<
html
.
length
&
&
html
[
endIndex
]
!
=
=
"
<
"
)
{
endIndex
+
+
;
}
addText
(
endIndex
)
;
if
(
html
[
endIndex
]
=
=
=
"
<
"
)
{
if
(
html
[
endIndex
+
1
]
=
=
=
"
/
"
)
{
while
(
endIndex
<
html
.
length
&
&
html
[
endIndex
]
!
=
=
"
>
"
)
{
endIndex
+
+
;
}
indent
-
-
;
addText
(
endIndex
+
1
)
;
}
else
{
while
(
endIndex
<
html
.
length
&
&
html
[
endIndex
]
!
=
=
"
>
"
)
{
endIndex
+
+
;
}
addText
(
endIndex
+
1
)
;
indent
+
+
;
}
}
}
return
result
.
trim
(
)
;
}
function
upperCaseNode
(
node
)
{
if
(
typeof
node
.
nodeValue
=
=
=
"
string
"
)
{
node
.
nodeValue
=
node
.
nodeValue
.
toUpperCase
(
)
;
}
for
(
const
childNode
of
node
.
childNodes
)
{
upperCaseNode
(
childNode
)
;
}
}
function
createMockedTranslatorPort
(
transformNode
=
upperCaseNode
)
{
const
parser
=
new
DOMParser
(
)
;
const
mockedPort
=
{
async
postMessage
(
message
)
{
await
TestUtils
.
waitForTick
(
)
;
switch
(
message
.
type
)
{
case
"
TranslationsPort
:
GetEngineStatusRequest
"
:
mockedPort
.
onmessage
(
{
data
:
{
type
:
"
TranslationsPort
:
GetEngineStatusResponse
"
status
:
"
ready
"
}
}
)
;
break
;
case
"
TranslationsPort
:
TranslationRequest
"
:
{
const
{
messageId
sourceText
}
=
message
;
const
translatedDoc
=
parser
.
parseFromString
(
sourceText
"
text
/
html
"
)
;
transformNode
(
translatedDoc
.
body
)
;
mockedPort
.
onmessage
(
{
data
:
{
type
:
"
TranslationsPort
:
TranslationResponse
"
targetText
:
translatedDoc
.
body
.
innerHTML
messageId
}
}
)
;
}
}
}
}
;
return
mockedPort
;
}
function
createBatchedMockedTranslatorPort
(
)
{
let
letter
=
"
a
"
;
function
transformNode
(
node
)
{
if
(
typeof
node
.
nodeValue
=
=
=
"
string
"
)
{
node
.
nodeValue
=
node
.
nodeValue
.
replace
(
/
\
w
/
g
letter
)
;
}
for
(
const
childNode
of
node
.
childNodes
)
{
transformNode
(
childNode
)
;
}
}
return
createMockedTranslatorPort
(
node
=
>
{
transformNode
(
node
)
;
letter
=
String
.
fromCodePoint
(
letter
.
codePointAt
(
0
)
+
1
)
;
}
)
;
}
function
createdReorderingMockedTranslatorPort
(
)
{
function
transformNode
(
node
)
{
if
(
typeof
node
.
nodeValue
=
=
=
"
string
"
)
{
node
.
nodeValue
=
node
.
nodeValue
.
toUpperCase
(
)
;
}
const
nodes
=
[
.
.
.
node
.
childNodes
]
;
nodes
.
sort
(
(
a
b
)
=
>
(
a
.
textContent
?
.
trim
(
)
?
?
"
"
)
.
localeCompare
(
b
.
textContent
?
.
trim
(
)
?
?
"
"
)
)
;
for
(
const
childNode
of
nodes
)
{
childNode
.
remove
(
)
;
}
for
(
const
childNode
of
nodes
)
{
node
.
appendChild
(
childNode
)
;
transformNode
(
childNode
)
;
}
}
return
createMockedTranslatorPort
(
transformNode
)
;
}
function
getTranslationsParent
(
)
{
return
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
Translations
"
)
;
}
function
closeSettingsMenuIfOpen
(
)
{
return
waitForCondition
(
async
(
)
=
>
{
const
settings
=
document
.
getElementById
(
"
translations
-
panel
-
settings
-
menupopup
"
)
;
if
(
!
settings
)
{
return
true
;
}
if
(
settings
.
state
=
=
=
"
closed
"
)
{
return
true
;
}
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
settings
"
popuphidden
"
)
;
PanelMultiView
.
hidePopup
(
settings
)
;
await
popuphiddenPromise
;
return
false
;
}
)
;
}
async
function
closeTranslationsPanelIfOpen
(
)
{
await
closeSettingsMenuIfOpen
(
)
;
return
waitForCondition
(
async
(
)
=
>
{
const
panel
=
document
.
getElementById
(
"
translations
-
panel
"
)
;
if
(
!
panel
)
{
return
true
;
}
if
(
panel
.
state
=
=
=
"
closed
"
)
{
return
true
;
}
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
PanelMultiView
.
hidePopup
(
panel
)
;
await
popuphiddenPromise
;
return
false
;
}
)
;
}
async
function
setupActorTest
(
{
languagePairs
prefs
detectedLanguageConfidence
detectedLangTag
autoDownloadFromRemoteSettings
=
false
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
translations
.
enable
"
true
]
[
"
browser
.
translations
.
logLevel
"
"
All
"
]
.
.
.
(
prefs
?
?
[
]
)
]
}
)
;
const
{
remoteClients
removeMocks
}
=
await
createAndMockRemoteSettings
(
{
languagePairs
detectedLangTag
detectedLanguageConfidence
autoDownloadFromRemoteSettings
}
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
ENGLISH_PAGE_URL
true
)
;
const
actor
=
getTranslationsParent
(
)
;
return
{
actor
remoteClients
async
cleanup
(
)
{
await
TranslationsParent
.
destroyEngineProcess
(
)
;
await
closeTranslationsPanelIfOpen
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
removeMocks
(
)
;
TestTranslationsTelemetry
.
reset
(
)
;
return
SpecialPowers
.
popPrefEnv
(
)
;
}
}
;
}
async
function
createAndMockRemoteSettings
(
{
languagePairs
=
LANGUAGE_PAIRS
detectedLanguageConfidence
=
0
.
5
detectedLangTag
=
"
en
"
autoDownloadFromRemoteSettings
=
false
}
)
{
const
remoteClients
=
{
translationModels
:
await
createTranslationModelsRemoteClient
(
autoDownloadFromRemoteSettings
languagePairs
)
translationsWasm
:
await
createTranslationsWasmRemoteClient
(
autoDownloadFromRemoteSettings
)
languageIdModels
:
await
createLanguageIdModelsRemoteClient
(
autoDownloadFromRemoteSettings
)
}
;
TranslationsParent
.
clearCache
(
)
;
TranslationsParent
.
mockTranslationsEngine
(
remoteClients
.
translationModels
.
client
remoteClients
.
translationsWasm
.
client
)
;
TranslationsParent
.
mockLanguageIdentification
(
detectedLangTag
detectedLanguageConfidence
remoteClients
.
languageIdModels
.
client
)
;
return
{
async
removeMocks
(
)
{
await
remoteClients
.
translationModels
.
client
.
attachments
.
deleteAll
(
)
;
await
remoteClients
.
translationsWasm
.
client
.
attachments
.
deleteAll
(
)
;
await
remoteClients
.
languageIdModels
.
client
.
attachments
.
deleteAll
(
)
;
await
remoteClients
.
translationModels
.
client
.
db
.
clear
(
)
;
await
remoteClients
.
translationsWasm
.
client
.
db
.
clear
(
)
;
await
remoteClients
.
languageIdModels
.
client
.
db
.
clear
(
)
;
TranslationsParent
.
unmockTranslationsEngine
(
)
;
TranslationsParent
.
unmockLanguageIdentification
(
)
;
TranslationsParent
.
clearCache
(
)
;
}
remoteClients
}
;
}
async
function
loadTestPage
(
{
languagePairs
autoDownloadFromRemoteSettings
=
false
detectedLanguageConfidence
detectedLangTag
page
prefs
autoOffer
permissionsUrls
=
[
]
}
)
{
info
(
Loading
test
page
starting
at
url
:
{
page
}
)
;
Services
.
fog
.
testResetFOG
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
translations
.
enable
"
true
]
[
"
browser
.
translations
.
logLevel
"
"
All
"
]
[
"
browser
.
translations
.
panelShown
"
true
]
[
"
browser
.
translations
.
automaticallyPopup
"
true
]
.
.
.
(
prefs
?
?
[
]
)
]
}
)
;
await
SpecialPowers
.
pushPermissions
(
permissionsUrls
.
map
(
url
=
>
(
{
type
:
TRANSLATIONS_PERMISSION
allow
:
true
context
:
url
}
)
)
)
;
if
(
autoOffer
)
{
TranslationsParent
.
testAutomaticPopup
=
true
;
}
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
BLANK_PAGE
true
)
;
const
{
remoteClients
removeMocks
}
=
await
createAndMockRemoteSettings
(
{
languagePairs
detectedLanguageConfidence
detectedLangTag
autoDownloadFromRemoteSettings
}
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
page
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
if
(
autoOffer
&
&
TranslationsParent
.
shouldAlwaysOfferTranslations
(
)
)
{
info
(
"
Waiting
for
the
popup
to
be
automatically
shown
.
"
)
;
await
waitForCondition
(
(
)
=
>
{
const
panel
=
document
.
getElementById
(
"
translations
-
panel
"
)
;
return
panel
&
&
panel
.
state
=
=
=
"
open
"
;
}
)
;
}
return
{
tab
remoteClients
async
resolveDownloads
(
count
)
{
await
remoteClients
.
translationsWasm
.
resolvePendingDownloads
(
1
)
;
await
remoteClients
.
translationModels
.
resolvePendingDownloads
(
FILES_PER_LANGUAGE_PAIR
*
count
)
;
}
async
rejectDownloads
(
count
)
{
await
remoteClients
.
translationsWasm
.
rejectPendingDownloads
(
1
)
;
await
remoteClients
.
translationModels
.
rejectPendingDownloads
(
FILES_PER_LANGUAGE_PAIR
*
count
)
;
}
async
resolveLanguageIdDownloads
(
)
{
await
remoteClients
.
translationsWasm
.
resolvePendingDownloads
(
1
)
;
await
remoteClients
.
languageIdModels
.
resolvePendingDownloads
(
1
)
;
}
async
cleanup
(
)
{
await
TranslationsParent
.
destroyEngineProcess
(
)
;
await
closeTranslationsPanelIfOpen
(
)
;
await
removeMocks
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
TranslationsParent
.
testAutomaticPopup
=
false
;
TranslationsParent
.
resetHostsOffered
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
TestTranslationsTelemetry
.
reset
(
)
;
return
Promise
.
all
(
[
SpecialPowers
.
popPrefEnv
(
)
SpecialPowers
.
popPermissions
(
)
]
)
;
}
runInPage
(
callback
data
=
{
}
)
{
const
fn
=
new
Function
(
const
TranslationsTest
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
components
/
translations
/
tests
/
browser
/
translations
-
test
.
mjs
"
)
;
/
/
Pass
in
the
values
that
get
injected
by
the
task
runner
.
TranslationsTest
.
setup
(
{
Assert
ContentTaskUtils
content
}
)
;
const
data
=
{
JSON
.
stringify
(
data
)
}
;
return
(
{
callback
.
toString
(
)
}
)
(
TranslationsTest
data
)
;
)
;
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
fn
)
;
}
}
;
}
async
function
captureTranslationsError
(
callback
)
{
const
{
reportError
}
=
TranslationsParent
;
let
errors
=
[
]
;
TranslationsParent
.
reportError
=
(
error
.
.
.
args
)
=
>
{
errors
.
push
(
{
error
args
}
)
;
}
;
await
callback
(
)
;
TranslationsParent
.
reportError
=
reportError
;
return
errors
;
}
async
function
autoTranslatePage
(
options
)
{
const
{
prefs
.
.
.
otherOptions
}
=
options
;
const
{
cleanup
runInPage
}
=
await
loadTestPage
(
{
autoDownloadFromRemoteSettings
:
true
prefs
:
[
[
"
browser
.
translations
.
autoTranslate
"
true
]
.
.
.
(
prefs
?
?
[
]
)
]
.
.
.
otherOptions
}
)
;
await
runInPage
(
options
.
runInPage
)
;
await
cleanup
(
)
;
}
function
createAttachmentMock
(
client
mockedCollectionName
autoDownloadFromRemoteSettings
)
{
const
pendingDownloads
=
[
]
;
client
.
attachments
.
download
=
record
=
>
new
Promise
(
(
resolve
reject
)
=
>
{
console
.
log
(
"
Download
requested
:
"
client
.
collectionName
record
.
name
)
;
if
(
autoDownloadFromRemoteSettings
)
{
const
encoder
=
new
TextEncoder
(
)
;
const
{
buffer
}
=
encoder
.
encode
(
Mocked
download
:
{
mockedCollectionName
}
{
record
.
name
}
{
record
.
version
}
)
;
resolve
(
{
buffer
}
)
;
}
else
{
pendingDownloads
.
push
(
{
record
resolve
reject
}
)
;
}
}
)
;
function
resolvePendingDownloads
(
expectedDownloadCount
)
{
info
(
Resolving
{
expectedDownloadCount
}
mocked
downloads
for
"
{
client
.
collectionName
}
"
)
;
return
downloadHandler
(
expectedDownloadCount
download
=
>
download
.
resolve
(
{
buffer
:
new
ArrayBuffer
(
)
}
)
)
;
}
async
function
rejectPendingDownloads
(
expectedDownloadCount
)
{
info
(
Intentionally
rejecting
{
expectedDownloadCount
}
mocked
downloads
for
"
{
client
.
collectionName
}
"
)
;
const
attempts
=
TranslationsParent
.
MAX_DOWNLOAD_RETRIES
+
1
;
return
downloadHandler
(
expectedDownloadCount
*
attempts
download
=
>
download
.
reject
(
new
Error
(
"
Intentionally
rejecting
downloads
.
"
)
)
)
;
}
async
function
downloadHandler
(
expectedDownloadCount
action
)
{
const
names
=
[
]
;
let
maxTries
=
100
;
while
(
names
.
length
<
expectedDownloadCount
&
&
maxTries
-
-
>
0
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
let
download
=
pendingDownloads
.
shift
(
)
;
if
(
!
download
)
{
continue
;
}
console
.
log
(
Handling
download
:
client
.
collectionName
)
;
action
(
download
)
;
names
.
push
(
download
.
record
.
name
)
;
}
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
if
(
pendingDownloads
.
length
)
{
throw
new
Error
(
An
unexpected
download
was
found
only
expected
{
expectedDownloadCount
}
downloads
)
;
}
return
names
.
sort
(
(
a
b
)
=
>
a
.
localeCompare
(
b
)
)
;
}
async
function
assertNoNewDownloads
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
is
(
pendingDownloads
.
length
0
No
downloads
happened
for
"
{
client
.
collectionName
}
"
)
;
}
return
{
client
pendingDownloads
resolvePendingDownloads
rejectPendingDownloads
assertNoNewDownloads
}
;
}
const
FILES_PER_LANGUAGE_PAIR
=
3
;
function
createRecordsForLanguagePair
(
fromLang
toLang
)
{
const
records
=
[
]
;
const
lang
=
fromLang
+
toLang
;
const
models
=
[
{
fileType
:
"
model
"
name
:
model
.
{
lang
}
.
intgemm
.
alphas
.
bin
}
{
fileType
:
"
lex
"
name
:
lex
.
50
.
50
.
{
lang
}
.
s2t
.
bin
}
{
fileType
:
"
vocab
"
name
:
vocab
.
{
lang
}
.
spm
}
]
;
if
(
models
.
length
!
=
=
FILES_PER_LANGUAGE_PAIR
)
{
throw
new
Error
(
"
Files
per
language
pair
was
wrong
.
"
)
;
}
for
(
const
{
fileType
name
}
of
models
)
{
records
.
push
(
{
id
:
crypto
.
randomUUID
(
)
name
fromLang
toLang
fileType
version
:
"
1
.
0
"
last_modified
:
Date
.
now
(
)
schema
:
Date
.
now
(
)
}
)
;
}
return
records
;
}
let
_remoteSettingsMockId
=
0
;
async
function
createTranslationModelsRemoteClient
(
autoDownloadFromRemoteSettings
langPairs
)
{
const
records
=
[
]
;
for
(
const
{
fromLang
toLang
}
of
langPairs
)
{
records
.
push
(
.
.
.
createRecordsForLanguagePair
(
fromLang
toLang
)
)
;
}
const
{
RemoteSettings
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
)
;
const
mockedCollectionName
=
"
test
-
translation
-
models
"
;
const
client
=
RemoteSettings
(
{
mockedCollectionName
}
-
{
_remoteSettingsMockId
+
+
}
)
;
const
metadata
=
{
}
;
await
client
.
db
.
clear
(
)
;
await
client
.
db
.
importChanges
(
metadata
Date
.
now
(
)
records
)
;
return
createAttachmentMock
(
client
mockedCollectionName
autoDownloadFromRemoteSettings
)
;
}
async
function
createTranslationsWasmRemoteClient
(
autoDownloadFromRemoteSettings
)
{
const
records
=
[
"
bergamot
-
translator
"
"
fasttext
-
wasm
"
]
.
map
(
name
=
>
(
{
id
:
crypto
.
randomUUID
(
)
name
version
:
"
1
.
0
"
last_modified
:
Date
.
now
(
)
schema
:
Date
.
now
(
)
}
)
)
;
const
{
RemoteSettings
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
)
;
const
mockedCollectionName
=
"
test
-
translation
-
wasm
"
;
const
client
=
RemoteSettings
(
{
mockedCollectionName
}
-
{
_remoteSettingsMockId
+
+
}
)
;
const
metadata
=
{
}
;
await
client
.
db
.
clear
(
)
;
await
client
.
db
.
importChanges
(
metadata
Date
.
now
(
)
records
)
;
return
createAttachmentMock
(
client
mockedCollectionName
autoDownloadFromRemoteSettings
)
;
}
async
function
createLanguageIdModelsRemoteClient
(
autoDownloadFromRemoteSettings
)
{
const
records
=
[
{
id
:
crypto
.
randomUUID
(
)
name
:
"
lid
.
176
.
ftz
"
version
:
"
1
.
0
"
last_modified
:
Date
.
now
(
)
schema
:
Date
.
now
(
)
}
]
;
const
{
RemoteSettings
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
)
;
const
client
=
RemoteSettings
(
"
test
-
language
-
id
-
models
"
+
_remoteSettingsMockId
+
+
)
;
const
mockedCollectionName
=
"
test
-
language
-
id
-
models
"
;
const
metadata
=
{
}
;
await
client
.
db
.
clear
(
)
;
await
client
.
db
.
importChanges
(
metadata
Date
.
now
(
)
records
)
;
return
createAttachmentMock
(
client
mockedCollectionName
autoDownloadFromRemoteSettings
)
;
}
async
function
selectAboutPreferencesElements
(
)
{
const
document
=
gBrowser
.
selectedBrowser
.
contentDocument
;
const
settingsButton
=
document
.
getElementById
(
"
translations
-
manage
-
settings
-
button
"
)
;
const
rows
=
await
waitForCondition
(
(
)
=
>
{
const
elements
=
document
.
querySelectorAll
(
"
.
translations
-
manage
-
language
"
)
;
if
(
elements
.
length
!
=
=
4
)
{
return
false
;
}
return
elements
;
}
"
Waiting
for
manage
language
rows
.
"
)
;
const
[
downloadAllRow
frenchRow
spanishRow
ukrainianRow
]
=
rows
;
const
downloadAllLabel
=
downloadAllRow
.
querySelector
(
"
label
"
)
;
const
downloadAll
=
downloadAllRow
.
querySelector
(
"
#
translations
-
manage
-
install
-
all
"
)
;
const
deleteAll
=
downloadAllRow
.
querySelector
(
"
#
translations
-
manage
-
delete
-
all
"
)
;
const
frenchLabel
=
frenchRow
.
querySelector
(
"
label
"
)
;
const
frenchDownload
=
frenchRow
.
querySelector
(
[
data
-
l10n
-
id
=
"
translations
-
manage
-
language
-
install
-
button
"
]
)
;
const
frenchDelete
=
frenchRow
.
querySelector
(
[
data
-
l10n
-
id
=
"
translations
-
manage
-
language
-
remove
-
button
"
]
)
;
const
spanishLabel
=
spanishRow
.
querySelector
(
"
label
"
)
;
const
spanishDownload
=
spanishRow
.
querySelector
(
[
data
-
l10n
-
id
=
"
translations
-
manage
-
language
-
install
-
button
"
]
)
;
const
spanishDelete
=
spanishRow
.
querySelector
(
[
data
-
l10n
-
id
=
"
translations
-
manage
-
language
-
remove
-
button
"
]
)
;
const
ukrainianLabel
=
ukrainianRow
.
querySelector
(
"
label
"
)
;
const
ukrainianDownload
=
ukrainianRow
.
querySelector
(
[
data
-
l10n
-
id
=
"
translations
-
manage
-
language
-
install
-
button
"
]
)
;
const
ukrainianDelete
=
ukrainianRow
.
querySelector
(
[
data
-
l10n
-
id
=
"
translations
-
manage
-
language
-
remove
-
button
"
]
)
;
return
{
document
downloadAllLabel
downloadAll
deleteAll
frenchLabel
frenchDownload
frenchDelete
ukrainianLabel
ukrainianDownload
ukrainianDelete
settingsButton
spanishLabel
spanishDownload
spanishDelete
}
;
}
function
click
(
button
message
)
{
info
(
message
)
;
if
(
button
.
hidden
)
{
throw
new
Error
(
"
The
button
was
hidden
when
trying
to
click
it
.
"
)
;
}
button
.
click
(
)
;
}
function
hitEnterKey
(
button
message
)
{
info
(
message
)
;
button
.
dispatchEvent
(
new
KeyboardEvent
(
"
keypress
"
{
key
:
"
Enter
"
keyCode
:
KeyboardEvent
.
DOM_VK_RETURN
}
)
)
;
}
async
function
assertVisibility
(
{
message
visible
hidden
}
)
{
info
(
message
)
;
try
{
await
waitForCondition
(
(
)
=
>
{
for
(
const
element
of
Object
.
values
(
visible
)
)
{
if
(
element
.
hidden
)
{
return
false
;
}
}
for
(
const
element
of
Object
.
values
(
hidden
)
)
{
if
(
!
element
.
hidden
)
{
return
false
;
}
}
return
true
;
}
)
;
}
catch
(
error
)
{
}
for
(
const
[
name
element
]
of
Object
.
entries
(
visible
)
)
{
ok
(
!
element
.
hidden
{
name
}
is
visible
.
)
;
}
for
(
const
[
name
element
]
of
Object
.
entries
(
hidden
)
)
{
ok
(
element
.
hidden
{
name
}
is
hidden
.
)
;
}
}
async
function
setupAboutPreferences
(
languagePairs
{
prefs
=
[
]
permissionsUrls
=
[
]
}
=
{
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
translations
.
enable
"
true
]
[
"
browser
.
translations
.
logLevel
"
"
All
"
]
.
.
.
prefs
]
}
)
;
await
SpecialPowers
.
pushPermissions
(
permissionsUrls
.
map
(
url
=
>
(
{
type
:
TRANSLATIONS_PERMISSION
allow
:
true
context
:
url
}
)
)
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
BLANK_PAGE
true
)
;
const
{
remoteClients
removeMocks
}
=
await
createAndMockRemoteSettings
(
{
languagePairs
}
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
"
about
:
preferences
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
const
elements
=
await
selectAboutPreferencesElements
(
)
;
async
function
cleanup
(
)
{
await
TranslationsParent
.
destroyEngineProcess
(
)
;
await
closeTranslationsPanelIfOpen
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
removeMocks
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
TestTranslationsTelemetry
.
reset
(
)
;
}
return
{
cleanup
remoteClients
elements
}
;
}
function
waitForAppLocaleChanged
(
)
{
new
Promise
(
resolve
=
>
{
function
onChange
(
)
{
Services
.
obs
.
removeObserver
(
onChange
"
intl
:
app
-
locales
-
changed
"
)
;
resolve
(
)
;
}
Services
.
obs
.
addObserver
(
onChange
"
intl
:
app
-
locales
-
changed
"
)
;
}
)
;
}
async
function
mockLocales
(
{
systemLocales
appLocales
webLanguages
}
)
{
const
appLocaleChanged1
=
waitForAppLocaleChanged
(
)
;
TranslationsParent
.
mockedSystemLocales
=
systemLocales
;
const
{
availableLocales
requestedLocales
}
=
Services
.
locale
;
info
(
"
Mocking
locales
so
expect
potential
.
ftl
resource
errors
.
"
)
;
Services
.
locale
.
availableLocales
=
appLocales
;
Services
.
locale
.
requestedLocales
=
appLocales
;
await
appLocaleChanged1
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
intl
.
accept_languages
"
webLanguages
.
join
(
"
"
)
]
]
}
)
;
return
async
(
)
=
>
{
const
appLocaleChanged2
=
waitForAppLocaleChanged
(
)
;
TranslationsParent
.
mockedSystemLocales
=
null
;
Services
.
locale
.
availableLocales
=
availableLocales
;
Services
.
locale
.
requestedLocales
=
requestedLocales
;
await
appLocaleChanged2
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
;
}
class
TestTranslationsTelemetry
{
static
#
previousFlowId
=
null
;
static
reset
(
)
{
TestTranslationsTelemetry
.
#
previousFlowId
=
null
;
}
static
async
assertCounter
(
name
counter
expectedCount
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
const
count
=
counter
.
testGetValue
(
)
?
?
0
;
is
(
count
expectedCount
Telemetry
counter
{
name
}
should
have
expected
count
)
;
}
static
async
assertEvent
(
event
{
expectedEventCount
expectNewFlowId
=
null
expectFirstInteraction
=
null
allValuePredicates
=
[
]
finalValuePredicates
=
[
]
}
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
const
events
=
event
.
testGetValue
(
)
?
?
[
]
;
const
eventCount
=
events
.
length
;
const
name
=
eventCount
>
0
?
{
events
[
0
]
.
category
}
.
{
events
[
0
]
.
name
}
:
null
;
if
(
eventCount
>
0
&
&
expectFirstInteraction
!
=
=
null
)
{
is
(
events
[
eventCount
-
1
]
.
extra
.
first_interaction
expectFirstInteraction
?
"
true
"
:
"
false
"
"
The
newest
event
should
be
match
the
given
first
-
interaction
expectation
"
)
;
}
if
(
eventCount
>
0
&
&
expectNewFlowId
!
=
=
null
)
{
const
flowId
=
events
[
eventCount
-
1
]
.
extra
.
flow_id
;
if
(
expectNewFlowId
)
{
is
(
events
[
eventCount
-
1
]
.
extra
.
flow_id
!
=
=
TestTranslationsTelemetry
.
#
previousFlowId
true
The
newest
flowId
{
flowId
}
should
be
different
than
the
previous
flowId
{
TestTranslationsTelemetry
.
#
previousFlowId
}
)
;
}
else
{
is
(
events
[
eventCount
-
1
]
.
extra
.
flow_id
=
=
=
TestTranslationsTelemetry
.
#
previousFlowId
true
The
newest
flowId
{
flowId
}
should
be
equal
to
the
previous
flowId
{
TestTranslationsTelemetry
.
#
previousFlowId
}
)
;
}
TestTranslationsTelemetry
.
#
previousFlowId
=
flowId
;
}
is
(
eventCount
expectedEventCount
There
should
be
{
expectedEventCount
}
telemetry
events
of
type
{
name
}
)
;
if
(
allValuePredicates
.
length
!
=
=
0
)
{
is
(
eventCount
>
0
true
Telemetry
event
{
name
}
should
contain
values
if
allPredicates
are
specified
)
;
for
(
const
value
of
events
)
{
for
(
const
predicate
of
allValuePredicates
)
{
is
(
predicate
(
value
)
true
Telemetry
event
{
name
}
allPredicate
{
{
predicate
.
toString
(
)
}
}
should
pass
for
each
value
)
;
}
}
}
if
(
finalValuePredicates
.
length
!
=
=
0
)
{
is
(
eventCount
>
0
true
Telemetry
event
{
name
}
should
contain
values
if
finalPredicates
are
specified
)
;
for
(
const
predicate
of
finalValuePredicates
)
{
is
(
predicate
(
events
[
eventCount
-
1
]
)
true
Telemetry
event
{
name
}
finalPredicate
{
{
predicate
.
toString
(
)
}
}
should
pass
for
final
value
)
;
}
}
}
static
async
assertRate
(
name
rate
{
expectedNumerator
expectedDenominator
}
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
const
{
numerator
=
0
denominator
=
0
}
=
rate
.
testGetValue
(
)
?
?
{
}
;
is
(
numerator
expectedNumerator
Telemetry
rate
{
name
}
should
have
expected
numerator
)
;
is
(
denominator
expectedDenominator
Telemetry
rate
{
name
}
should
have
expected
denominator
)
;
}
}
function
waitForCondition
(
callback
message
)
{
const
interval
=
100
;
const
maxTries
=
50
*
4
;
return
TestUtils
.
waitForCondition
(
callback
message
interval
maxTries
)
;
}
function
getAlwaysTranslateLanguagesFromPref
(
)
{
let
langs
=
Services
.
prefs
.
getCharPref
(
ALWAYS_TRANSLATE_LANGS_PREF
)
;
return
langs
?
langs
.
split
(
"
"
)
:
[
]
;
}
function
getNeverTranslateLanguagesFromPref
(
)
{
let
langs
=
Services
.
prefs
.
getCharPref
(
NEVER_TRANSLATE_LANGS_PREF
)
;
return
langs
?
langs
.
split
(
"
"
)
:
[
]
;
}
function
getNeverTranslateSitesFromPerms
(
)
{
let
results
=
[
]
;
for
(
let
perm
of
Services
.
perms
.
all
)
{
if
(
perm
.
type
=
=
TRANSLATIONS_PERMISSION
&
&
perm
.
capability
=
=
Services
.
perms
.
DENY_ACTION
)
{
results
.
push
(
perm
.
principal
)
;
}
}
return
results
;
}
async
function
waitForOpenDialogWindow
(
dialogUrl
callback
)
{
const
dialogLoaded
=
promiseLoadSubDialog
(
dialogUrl
)
;
await
callback
(
)
;
const
dialogWindow
=
await
dialogLoaded
;
return
dialogWindow
;
}
async
function
waitForCloseDialogWindow
(
dialogWindow
)
{
const
closePromise
=
BrowserTestUtils
.
waitForEvent
(
content
.
gSubDialog
.
_dialogStack
"
dialogclose
"
)
;
dialogWindow
.
close
(
)
;
await
closePromise
;
}
function
promiseLoadSubDialog
(
aURL
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
content
.
gSubDialog
.
_dialogStack
.
addEventListener
(
"
dialogopen
"
function
dialogopen
(
aEvent
)
{
if
(
aEvent
.
detail
.
dialog
.
_frame
.
contentWindow
.
location
=
=
"
about
:
blank
"
)
{
return
;
}
content
.
gSubDialog
.
_dialogStack
.
removeEventListener
(
"
dialogopen
"
dialogopen
)
;
Assert
.
equal
(
aEvent
.
detail
.
dialog
.
_frame
.
contentWindow
.
location
.
toString
(
)
aURL
"
Check
the
proper
URL
is
loaded
"
)
;
isnot
(
aEvent
.
detail
.
dialog
.
_overlay
null
"
Element
should
not
be
null
when
checking
visibility
"
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_hidden
(
aEvent
.
detail
.
dialog
.
_overlay
)
"
The
element
is
visible
"
)
;
let
expectedStyleSheetURLs
=
aEvent
.
detail
.
dialog
.
_injectedStyleSheets
.
slice
(
0
)
;
for
(
let
styleSheet
of
aEvent
.
detail
.
dialog
.
_frame
.
contentDocument
.
styleSheets
)
{
let
i
=
expectedStyleSheetURLs
.
indexOf
(
styleSheet
.
href
)
;
if
(
i
>
=
0
)
{
info
(
"
found
"
+
styleSheet
.
href
)
;
expectedStyleSheetURLs
.
splice
(
i
1
)
;
}
}
Assert
.
equal
(
expectedStyleSheetURLs
.
length
0
"
All
expectedStyleSheetURLs
should
have
been
found
"
)
;
executeSoon
(
(
)
=
>
resolve
(
aEvent
.
detail
.
dialog
.
_frame
.
contentWindow
)
)
;
}
)
;
}
)
;
}
