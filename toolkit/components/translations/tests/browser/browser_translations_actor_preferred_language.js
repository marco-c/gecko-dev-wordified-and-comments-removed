"
use
strict
"
;
function
waitForAppLocaleChanged
(
)
{
new
Promise
(
resolve
=
>
{
function
onChange
(
)
{
Services
.
obs
.
removeObserver
(
onChange
"
intl
:
app
-
locales
-
changed
"
)
;
resolve
(
)
;
}
Services
.
obs
.
addObserver
(
onChange
"
intl
:
app
-
locales
-
changed
"
)
;
}
)
;
}
async
function
testWithLocales
(
{
systemLocales
appLocales
webLanguages
test
}
)
{
const
cleanup
=
await
mockLocales
(
{
systemLocales
appLocales
webLanguages
}
)
;
test
(
)
;
return
cleanup
(
)
;
}
add_task
(
async
function
test_preferred_language
(
)
{
await
testWithLocales
(
{
systemLocales
:
[
"
en
-
US
"
]
appLocales
:
[
"
en
-
US
"
]
webLanguages
:
[
"
en
-
US
"
]
test
(
)
{
Assert
.
deepEqual
(
TranslationsParent
.
getPreferredLanguages
(
)
[
"
en
-
US
"
]
"
When
all
locales
are
English
only
English
is
preferred
.
"
)
;
}
}
)
;
await
testWithLocales
(
{
systemLocales
:
[
"
es
-
ES
"
]
appLocales
:
[
"
en
-
US
"
]
webLanguages
:
[
"
en
-
US
"
]
test
(
)
{
Assert
.
deepEqual
(
TranslationsParent
.
getPreferredLanguages
(
)
[
"
en
-
US
"
"
es
-
ES
"
]
"
When
the
operating
system
differs
it
is
added
to
the
end
of
the
preferred
languages
.
"
)
;
}
}
)
;
await
testWithLocales
(
{
systemLocales
:
[
"
zh
-
TW
"
"
zh
-
CN
"
"
de
"
]
appLocales
:
[
"
pt
-
BR
"
"
pl
"
]
webLanguages
:
[
"
cs
"
"
hu
"
]
test
(
)
{
Assert
.
deepEqual
(
TranslationsParent
.
getPreferredLanguages
(
)
[
"
cs
"
"
hu
"
"
pt
-
BR
"
"
pl
"
"
en
-
US
"
"
zh
-
TW
"
"
zh
-
CN
"
"
de
"
]
"
Demonstrate
an
unrealistic
but
complicated
locale
situation
.
"
)
;
}
}
)
;
}
)
;
