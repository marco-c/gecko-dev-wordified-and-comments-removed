"
use
strict
"
;
self
.
addEventListener
(
"
unhandledrejection
"
event
=
>
{
throw
event
.
reason
;
}
)
;
importScripts
(
"
chrome
:
/
/
global
/
content
/
translations
/
fasttext
.
js
"
"
chrome
:
/
/
global
/
content
/
translations
/
fasttext_wasm
.
js
"
)
;
const
LANGUAGE_COUNT
=
1
;
const
CONFIDENCE_THRESHOLD
=
0
.
0
;
let
_isLoggingEnabled
=
true
;
function
log
(
.
.
.
args
)
{
if
(
_isLoggingEnabled
)
{
console
.
log
(
"
Translations
:
"
.
.
.
args
)
;
}
}
addEventListener
(
"
message
"
initialize
)
;
async
function
initialize
(
{
data
}
)
{
if
(
data
.
type
!
=
=
"
initialize
"
)
{
throw
new
Error
(
"
The
LanguageIdEngine
worker
received
a
message
before
it
was
initialized
.
"
)
;
}
try
{
const
{
modelBuffer
wasmBuffer
isLoggingEnabled
}
=
data
;
if
(
!
modelBuffer
)
{
throw
new
Error
(
'
Worker
initialization
missing
"
modelBuffer
"
'
)
;
}
if
(
!
wasmBuffer
)
{
throw
new
Error
(
'
Worker
initialization
missing
"
wasmBuffer
"
'
)
;
}
if
(
isLoggingEnabled
)
{
_isLoggingEnabled
=
true
;
}
let
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
const
initialModule
=
{
onAbort
(
)
{
reject
(
new
Error
(
"
Error
loading
the
fastText
Wasm
Module
"
)
)
;
}
onRuntimeInitialized
(
)
{
addOnPostRun
(
(
)
=
>
{
const
ft
=
new
FastText
(
initialModule
)
;
const
model
=
ft
.
loadModelBinary
(
modelBuffer
)
;
resolve
(
model
)
;
}
)
;
}
wasmBinary
:
wasmBuffer
}
;
loadFastText
(
initialModule
)
;
}
)
;
let
model
=
await
promise
;
new
LanguageIdWorker
(
model
)
;
postMessage
(
{
type
:
"
initialization
-
success
"
}
)
;
}
catch
(
error
)
{
console
.
error
(
error
)
;
postMessage
(
{
type
:
"
initialization
-
error
"
error
:
error
?
.
message
}
)
;
}
removeEventListener
(
"
message
"
initialize
)
;
}
class
LanguageIdWorker
{
constructor
(
model
)
{
this
.
model
=
model
;
addEventListener
(
"
message
"
this
.
onMessage
.
bind
(
this
)
)
;
}
#
formatLanguageLabel
(
label
)
{
return
label
.
slice
(
-
2
)
;
}
onMessage
(
{
data
}
)
{
if
(
data
.
type
=
=
=
"
initialize
"
)
{
throw
new
Error
(
"
The
Language
Id
engine
must
not
be
re
-
initialized
.
"
)
;
}
switch
(
data
.
type
)
{
case
"
language
-
id
-
request
"
:
{
const
{
message
messageId
}
=
data
;
try
{
let
mostLikelyLanguage
=
this
.
model
.
predict
(
message
.
trim
(
)
LANGUAGE_COUNT
CONFIDENCE_THRESHOLD
)
.
get
(
0
)
;
if
(
!
mostLikelyLanguage
)
{
throw
new
Error
(
"
Unable
to
identify
a
language
"
)
;
}
const
[
confidence
languageLabel
]
=
mostLikelyLanguage
;
postMessage
(
{
type
:
"
language
-
id
-
response
"
languageLabel
:
this
.
#
formatLanguageLabel
(
languageLabel
)
confidence
messageId
}
)
;
}
catch
(
error
)
{
console
.
error
(
error
)
;
postMessage
(
{
type
:
"
language
-
id
-
error
"
messageId
}
)
;
}
break
;
}
default
:
console
.
warn
(
"
Unknown
message
type
:
"
data
.
type
)
;
}
}
}
