"
use
strict
"
;
add_task
(
async
function
test_sidebar_navigation
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
toolkit
.
shopping
.
ohttpRelayURL
"
"
"
]
[
"
toolkit
.
shopping
.
ohttpConfigURL
"
"
"
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
PRODUCT_TEST_URL
async
browser
=
>
{
let
sidebar
=
gBrowser
.
getPanel
(
browser
)
.
querySelector
(
"
shopping
-
sidebar
"
)
;
Assert
.
ok
(
sidebar
"
Sidebar
should
exist
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
sidebar
)
"
Sidebar
should
be
visible
"
)
;
info
(
"
Waiting
for
sidebar
to
update
.
"
)
;
await
promiseSidebarUpdated
(
sidebar
PRODUCT_TEST_URL
)
;
info
(
"
Verifying
product
info
for
initial
product
.
"
)
;
await
verifyProductInfo
(
sidebar
{
productURL
:
PRODUCT_TEST_URL
adjustedRating
:
"
4
.
1
"
letterGrade
:
"
B
"
}
)
;
let
loadedPromise
=
Promise
.
all
(
[
BrowserTestUtils
.
browserLoaded
(
browser
false
OTHER_PRODUCT_TEST_URL
)
promiseSidebarUpdated
(
sidebar
OTHER_PRODUCT_TEST_URL
)
]
)
;
let
openedSidebarPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
sidebar
)
"
Sidebar
should
be
visible
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
OTHER_PRODUCT_TEST_URL
)
;
info
(
"
Loading
another
product
.
"
)
;
await
loadedPromise
;
Assert
.
ok
(
sidebar
"
Sidebar
should
exist
.
"
)
;
await
openedSidebarPromise
;
info
(
"
Verifying
another
product
.
"
)
;
await
verifyProductInfo
(
sidebar
{
productURL
:
OTHER_PRODUCT_TEST_URL
adjustedRating
:
"
1
"
letterGrade
:
"
F
"
}
)
;
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
"
https
:
/
/
example
.
com
/
1
"
)
;
let
closedSidebarPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_hidden
(
sidebar
)
"
Shopping
sidebar
should
be
hidden
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
"
https
:
/
/
example
.
com
/
1
"
)
;
info
(
"
Go
to
a
non
-
product
.
"
)
;
await
loadedPromise
;
await
closedSidebarPromise
;
loadedPromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
PRODUCT_TEST_URL
)
;
openedSidebarPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
sidebar
)
"
Sidebar
should
be
visible
"
)
;
info
(
"
Navigate
to
the
first
product
using
pushState
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
PRODUCT_TEST_URL
]
urlToUse
=
>
{
content
.
history
.
pushState
(
{
}
null
urlToUse
)
;
}
)
;
info
(
"
Waiting
to
load
first
product
again
.
"
)
;
await
loadedPromise
;
info
(
"
Waiting
for
the
sidebar
to
have
updated
.
"
)
;
await
promiseSidebarUpdated
(
sidebar
PRODUCT_TEST_URL
)
;
Assert
.
ok
(
sidebar
"
Sidebar
should
exist
"
)
;
await
openedSidebarPromise
;
info
(
"
Waiting
to
verify
the
first
product
a
second
time
.
"
)
;
await
verifyProductInfo
(
sidebar
{
productURL
:
PRODUCT_TEST_URL
adjustedRating
:
"
4
.
1
"
letterGrade
:
"
B
"
}
)
;
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
PRODUCT_TEST_URL
+
"
?
th
=
1
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
PRODUCT_TEST_URL
+
"
?
th
=
1
"
)
;
info
(
"
Verifying
product
has
not
changed
before
load
.
"
)
;
await
verifyProductInfo
(
sidebar
{
productURL
:
PRODUCT_TEST_URL
adjustedRating
:
"
4
.
1
"
letterGrade
:
"
B
"
}
)
;
await
loadedPromise
;
info
(
"
Verifying
product
has
not
changed
after
load
.
"
)
;
await
verifyProductInfo
(
sidebar
{
productURL
:
PRODUCT_TEST_URL
adjustedRating
:
"
4
.
1
"
letterGrade
:
"
B
"
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_button_visible_when_opted_out
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
url
:
PRODUCT_TEST_URL
gBrowser
}
async
browser
=
>
{
let
shoppingBrowser
=
gBrowser
.
ownerDocument
.
querySelector
(
"
browser
.
shopping
-
sidebar
"
)
;
let
shoppingButton
=
document
.
getElementById
(
"
shopping
-
sidebar
-
button
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
shoppingButton
)
"
Shopping
Button
should
be
visible
on
a
product
page
"
)
;
let
sidebar
=
gBrowser
.
getPanel
(
browser
)
.
querySelector
(
"
shopping
-
sidebar
"
)
;
Assert
.
ok
(
sidebar
"
Sidebar
should
exist
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
sidebar
)
"
Sidebar
should
be
visible
"
)
;
info
(
"
Waiting
for
sidebar
to
update
.
"
)
;
await
promiseSidebarUpdated
(
sidebar
PRODUCT_TEST_URL
)
;
await
SpecialPowers
.
spawn
(
shoppingBrowser
[
]
async
(
)
=
>
{
let
shoppingContainer
=
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
.
wrappedJSObject
;
await
shoppingContainer
.
updateComplete
;
let
shoppingSettings
=
shoppingContainer
.
settingsEl
;
await
shoppingSettings
.
updateComplete
;
shoppingSettings
.
shoppingCardEl
.
detailsEl
.
open
=
true
;
let
optOutButton
=
shoppingSettings
.
optOutButtonEl
;
optOutButton
.
click
(
)
;
}
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
shoppingButton
{
attributes
:
false
attributeFilter
:
[
"
shoppingsidebaropen
"
]
}
(
)
=
>
shoppingButton
.
getAttribute
(
"
shoppingsidebaropen
"
)
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Shopping
sidebar
is
no
longer
active
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
browser
.
shopping
.
experience2023
.
optedIn
"
)
2
"
Opted
out
of
shopping
experience
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
shoppingButton
)
"
Shopping
Button
should
be
visible
after
opting
out
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
true
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
shopping
.
experience2023
.
optedIn
"
1
)
;
}
)
;
}
)
;
add_task
(
async
function
test_sidebar_button_open_close
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
toolkit
.
shopping
.
ohttpRelayURL
"
"
"
]
[
"
toolkit
.
shopping
.
ohttpConfigURL
"
"
"
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
PRODUCT_TEST_URL
async
browser
=
>
{
let
sidebar
=
gBrowser
.
getPanel
(
browser
)
.
querySelector
(
"
shopping
-
sidebar
"
)
;
Assert
.
ok
(
sidebar
"
Sidebar
should
exist
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
sidebar
)
"
Sidebar
should
be
visible
"
)
;
let
shoppingButton
=
document
.
getElementById
(
"
shopping
-
sidebar
-
button
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
shoppingButton
)
"
Shopping
Button
should
be
visible
on
a
product
page
"
)
;
info
(
"
Waiting
for
sidebar
to
update
.
"
)
;
await
promiseSidebarUpdated
(
sidebar
PRODUCT_TEST_URL
)
;
info
(
"
Verifying
product
info
for
initial
product
.
"
)
;
await
verifyProductInfo
(
sidebar
{
productURL
:
PRODUCT_TEST_URL
adjustedRating
:
"
4
.
1
"
letterGrade
:
"
B
"
}
)
;
let
closedSidebarPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_hidden
(
sidebar
)
"
Sidebar
should
be
hidden
"
)
;
shoppingButton
.
click
(
)
;
await
closedSidebarPromise
;
let
openedSidebarPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
sidebar
)
"
Sidebar
should
be
visible
"
)
;
shoppingButton
.
click
(
)
;
await
openedSidebarPromise
;
info
(
"
Waiting
for
sidebar
to
update
.
"
)
;
await
promiseSidebarUpdated
(
sidebar
PRODUCT_TEST_URL
)
;
info
(
"
Verifying
product
info
for
has
not
changed
.
"
)
;
await
verifyProductInfo
(
sidebar
{
productURL
:
PRODUCT_TEST_URL
adjustedRating
:
"
4
.
1
"
letterGrade
:
"
B
"
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_no_reliability_available
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
toolkit
.
shopping
.
ohttpRelayURL
"
"
"
]
[
"
toolkit
.
shopping
.
ohttpConfigURL
"
"
"
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
NEEDS_ANALYSIS_TEST_URL
async
browser
=
>
{
let
sidebar
=
gBrowser
.
getPanel
(
browser
)
.
querySelector
(
"
shopping
-
sidebar
"
)
;
Assert
.
ok
(
sidebar
"
Sidebar
should
exist
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
sidebar
)
"
Sidebar
should
be
visible
"
)
;
info
(
"
Waiting
for
sidebar
to
update
.
"
)
;
await
promiseSidebarUpdated
(
sidebar
NEEDS_ANALYSIS_TEST_URL
)
;
}
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
var
sawPageEvents
=
Glean
.
shopping
.
surfaceNoReviewReliabilityAvailable
.
testGetValue
(
)
;
Assert
.
equal
(
sawPageEvents
.
length
1
)
;
Assert
.
equal
(
sawPageEvents
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
sawPageEvents
[
0
]
.
name
"
surface_no_review_reliability_available
"
)
;
}
)
;
