"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ReaderMode
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
DOWNLOAD_SUCCESS
=
0
;
const
DOWNLOAD_ERROR_XHR
=
1
;
const
DOWNLOAD_ERROR_NO_DOC
=
2
;
const
PARSE_SUCCESS
=
0
;
const
PARSE_ERROR_TOO_MANY_ELEMENTS
=
1
;
const
PARSE_ERROR_WORKER
=
2
;
const
PARSE_ERROR_NO_ARTICLE
=
3
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
XMLHttpRequest
"
]
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CommonUtils
"
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Messaging
"
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ReaderWorker
"
"
resource
:
/
/
gre
/
modules
/
reader
/
ReaderWorker
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryStopwatch
"
"
resource
:
/
/
gre
/
modules
/
TelemetryStopwatch
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LanguageDetector
"
"
resource
:
/
/
/
modules
/
translation
/
LanguageDetector
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Readability
"
function
(
)
{
let
scope
=
{
}
;
scope
.
dump
=
this
.
dump
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
gre
/
modules
/
reader
/
Readability
.
js
"
scope
)
;
return
scope
[
"
Readability
"
]
;
}
)
;
const
gIsFirefoxDesktop
=
Services
.
appinfo
.
ID
=
=
"
{
ec8030f7
-
c20a
-
464f
-
9b0e
-
13a3a9e97384
}
"
;
this
.
ReaderMode
=
{
CACHE_VERSION
:
1
DEBUG
:
0
get
maxElemsToParse
(
)
{
delete
this
.
parseNodeLimit
;
Services
.
prefs
.
addObserver
(
"
reader
.
parse
-
node
-
limit
"
this
false
)
;
return
this
.
parseNodeLimit
=
Services
.
prefs
.
getIntPref
(
"
reader
.
parse
-
node
-
limit
"
)
;
}
get
isEnabledForParseOnLoad
(
)
{
delete
this
.
isEnabledForParseOnLoad
;
Services
.
prefs
.
addObserver
(
"
reader
.
parse
-
on
-
load
.
"
this
false
)
;
return
this
.
isEnabledForParseOnLoad
=
this
.
_getStateForParseOnLoad
(
)
;
}
get
isOnLowMemoryPlatform
(
)
{
let
memory
=
Cc
[
"
mozilla
.
org
/
xpcom
/
memory
-
service
;
1
"
]
.
getService
(
Ci
.
nsIMemory
)
;
delete
this
.
isOnLowMemoryPlatform
;
return
this
.
isOnLowMemoryPlatform
=
memory
.
isLowMemoryPlatform
(
)
;
}
_getStateForParseOnLoad
:
function
(
)
{
let
isEnabled
=
Services
.
prefs
.
getBoolPref
(
"
reader
.
parse
-
on
-
load
.
enabled
"
)
;
let
isForceEnabled
=
Services
.
prefs
.
getBoolPref
(
"
reader
.
parse
-
on
-
load
.
force
-
enabled
"
)
;
return
isForceEnabled
|
|
(
isEnabled
&
&
!
this
.
isOnLowMemoryPlatform
)
;
}
observe
:
function
(
aMessage
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
nsPref
:
changed
"
:
if
(
aData
.
startsWith
(
"
reader
.
parse
-
on
-
load
.
"
)
)
{
this
.
isEnabledForParseOnLoad
=
this
.
_getStateForParseOnLoad
(
)
;
}
else
if
(
aData
=
=
=
"
reader
.
parse
-
node
-
limit
"
)
{
this
.
parseNodeLimit
=
Services
.
prefs
.
getIntPref
(
aData
)
;
}
break
;
}
}
enterReaderMode
:
function
(
docShell
win
)
{
let
url
=
win
.
document
.
location
.
href
;
let
readerURL
=
"
about
:
reader
?
url
=
"
+
encodeURIComponent
(
url
)
;
let
webNav
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
let
sh
=
webNav
.
sessionHistory
;
if
(
webNav
.
canGoForward
)
{
let
forwardEntry
=
sh
.
getEntryAtIndex
(
sh
.
index
+
1
false
)
;
let
forwardURL
=
forwardEntry
.
URI
.
spec
;
if
(
forwardURL
&
&
(
forwardURL
=
=
readerURL
|
|
!
readerURL
)
)
{
webNav
.
goForward
(
)
;
return
;
}
}
win
.
document
.
location
=
readerURL
;
}
leaveReaderMode
:
function
(
docShell
win
)
{
let
url
=
win
.
document
.
location
.
href
;
let
originalURL
=
this
.
getOriginalUrl
(
url
)
;
let
webNav
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
let
sh
=
webNav
.
sessionHistory
;
if
(
webNav
.
canGoBack
)
{
let
prevEntry
=
sh
.
getEntryAtIndex
(
sh
.
index
-
1
false
)
;
let
prevURL
=
prevEntry
.
URI
.
spec
;
if
(
prevURL
&
&
(
prevURL
=
=
originalURL
|
|
!
originalURL
)
)
{
webNav
.
goBack
(
)
;
return
;
}
}
win
.
document
.
location
=
originalURL
;
}
getOriginalUrl
:
function
(
url
)
{
if
(
!
url
.
startsWith
(
"
about
:
reader
?
"
)
)
{
return
null
;
}
let
outerHash
=
"
"
;
try
{
let
uriObj
=
Services
.
io
.
newURI
(
url
null
null
)
;
url
=
uriObj
.
specIgnoringRef
;
outerHash
=
uriObj
.
ref
;
}
catch
(
ex
)
{
}
let
searchParams
=
new
URLSearchParams
(
url
.
substring
(
"
about
:
reader
?
"
.
length
)
)
;
if
(
!
searchParams
.
has
(
"
url
"
)
)
{
return
null
;
}
let
originalUrl
=
searchParams
.
get
(
"
url
"
)
;
if
(
outerHash
)
{
try
{
let
uriObj
=
Services
.
io
.
newURI
(
originalUrl
null
null
)
;
uriObj
=
Services
.
io
.
newURI
(
'
#
'
+
outerHash
null
uriObj
)
;
originalUrl
=
uriObj
.
spec
;
}
catch
(
ex
)
{
}
}
return
originalUrl
;
}
isProbablyReaderable
:
function
(
doc
)
{
if
(
doc
.
mozSyntheticDocument
|
|
!
(
doc
instanceof
doc
.
defaultView
.
HTMLDocument
)
)
{
return
false
;
}
let
uri
=
Services
.
io
.
newURI
(
doc
.
location
.
href
null
null
)
;
if
(
!
this
.
_shouldCheckUri
(
uri
)
)
{
return
false
;
}
let
utils
=
this
.
getUtilsForWin
(
doc
.
defaultView
)
;
return
new
Readability
(
uri
doc
)
.
isProbablyReaderable
(
this
.
isNodeVisible
.
bind
(
this
utils
)
)
;
}
isNodeVisible
:
function
(
utils
node
)
{
let
bounds
=
utils
.
getBoundsWithoutFlushing
(
node
)
;
return
bounds
.
height
>
0
&
&
bounds
.
width
>
0
;
}
getUtilsForWin
:
function
(
win
)
{
return
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
}
parseDocument
:
Task
.
async
(
function
*
(
doc
)
{
let
documentURI
=
Services
.
io
.
newURI
(
doc
.
documentURI
null
null
)
;
let
baseURI
=
Services
.
io
.
newURI
(
doc
.
baseURI
null
null
)
;
if
(
!
this
.
_shouldCheckUri
(
documentURI
)
|
|
!
this
.
_shouldCheckUri
(
baseURI
true
)
)
{
this
.
log
(
"
Reader
mode
disabled
for
URI
"
)
;
return
null
;
}
return
yield
this
.
_readerParse
(
baseURI
doc
)
;
}
)
downloadAndParseDocument
:
Task
.
async
(
function
*
(
url
)
{
let
doc
=
yield
this
.
_downloadDocument
(
url
)
;
let
uri
=
Services
.
io
.
newURI
(
doc
.
baseURI
null
null
)
;
if
(
!
this
.
_shouldCheckUri
(
uri
true
)
)
{
this
.
log
(
"
Reader
mode
disabled
for
URI
"
)
;
return
null
;
}
return
yield
this
.
_readerParse
(
uri
doc
)
;
}
)
_downloadDocument
:
function
(
url
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
READER_MODE_DOWNLOAD_RESULT
"
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
"
GET
"
url
true
)
;
xhr
.
onerror
=
evt
=
>
reject
(
evt
.
error
)
;
xhr
.
responseType
=
"
document
"
;
xhr
.
onload
=
evt
=
>
{
if
(
xhr
.
status
!
=
=
200
)
{
reject
(
"
Reader
mode
XHR
failed
with
status
:
"
+
xhr
.
status
)
;
histogram
.
add
(
DOWNLOAD_ERROR_XHR
)
;
return
;
}
let
doc
=
xhr
.
responseXML
;
if
(
!
doc
)
{
reject
(
"
Reader
mode
XHR
didn
'
t
return
a
document
"
)
;
histogram
.
add
(
DOWNLOAD_ERROR_NO_DOC
)
;
return
;
}
let
meta
=
doc
.
querySelector
(
"
meta
[
http
-
equiv
=
refresh
]
"
)
;
if
(
meta
)
{
let
content
=
meta
.
getAttribute
(
"
content
"
)
;
if
(
content
)
{
let
urlIndex
=
content
.
toUpperCase
(
)
.
indexOf
(
"
URL
=
"
)
;
if
(
urlIndex
>
-
1
)
{
let
baseURI
=
Services
.
io
.
newURI
(
url
null
null
)
;
let
newURI
=
Services
.
io
.
newURI
(
content
.
substring
(
urlIndex
+
4
)
null
baseURI
)
;
let
newURL
=
newURI
.
spec
;
let
ssm
=
Services
.
scriptSecurityManager
;
let
flags
=
ssm
.
LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT
|
ssm
.
DISALLOW_INHERIT_PRINCIPAL
;
try
{
ssm
.
checkLoadURIStrWithPrincipal
(
doc
.
nodePrincipal
newURL
flags
)
;
}
catch
(
ex
)
{
let
errorMsg
=
"
Reader
mode
disallowed
meta
refresh
(
reason
:
"
+
ex
+
"
)
.
"
;
if
(
Services
.
prefs
.
getBoolPref
(
"
reader
.
errors
.
includeURLs
"
)
)
errorMsg
+
=
"
Refresh
target
URI
:
'
"
+
newURL
+
"
'
.
"
;
reject
(
errorMsg
)
;
return
;
}
if
(
!
baseURI
.
equalsExceptRef
(
newURI
)
)
{
reject
(
{
newURL
}
)
;
return
;
}
}
}
}
let
responseURL
=
xhr
.
responseURL
;
let
givenURL
=
url
;
try
{
responseURL
=
Services
.
io
.
newURI
(
responseURL
null
null
)
.
specIgnoringRef
;
}
catch
(
ex
)
{
}
try
{
givenURL
=
Services
.
io
.
newURI
(
givenURL
null
null
)
.
specIgnoringRef
;
}
catch
(
ex
)
{
}
if
(
responseURL
!
=
givenURL
)
{
reject
(
{
newURL
:
xhr
.
responseURL
}
)
;
return
;
}
resolve
(
doc
)
;
histogram
.
add
(
DOWNLOAD_SUCCESS
)
;
}
;
xhr
.
send
(
)
;
}
)
;
}
getArticleFromCache
:
Task
.
async
(
function
*
(
url
)
{
let
path
=
this
.
_toHashedPath
(
url
)
;
try
{
let
array
=
yield
OS
.
File
.
read
(
path
)
;
return
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
array
)
)
;
}
catch
(
e
)
{
if
(
!
(
e
instanceof
OS
.
File
.
Error
)
|
|
!
e
.
becauseNoSuchFile
)
throw
e
;
return
null
;
}
}
)
storeArticleInCache
:
Task
.
async
(
function
*
(
article
)
{
let
array
=
new
TextEncoder
(
)
.
encode
(
JSON
.
stringify
(
article
)
)
;
let
path
=
this
.
_toHashedPath
(
article
.
url
)
;
yield
this
.
_ensureCacheDir
(
)
;
return
OS
.
File
.
writeAtomic
(
path
array
{
tmpPath
:
path
+
"
.
tmp
"
}
)
.
then
(
success
=
>
{
OS
.
File
.
stat
(
path
)
.
then
(
info
=
>
{
return
Messaging
.
sendRequest
(
{
type
:
"
Reader
:
AddedToCache
"
url
:
article
.
url
size
:
info
.
size
path
:
path
}
)
;
}
)
;
}
)
;
}
)
removeArticleFromCache
:
Task
.
async
(
function
*
(
url
)
{
let
path
=
this
.
_toHashedPath
(
url
)
;
yield
OS
.
File
.
remove
(
path
)
;
}
)
log
:
function
(
msg
)
{
if
(
this
.
DEBUG
)
dump
(
"
Reader
:
"
+
msg
)
;
}
_blockedHosts
:
[
"
mail
.
google
.
com
"
"
github
.
com
"
"
pinterest
.
com
"
"
reddit
.
com
"
"
twitter
.
com
"
"
youtube
.
com
"
]
_shouldCheckUri
:
function
(
uri
isBaseUri
=
false
)
{
if
(
!
(
uri
.
schemeIs
(
"
http
"
)
|
|
uri
.
schemeIs
(
"
https
"
)
)
)
{
this
.
log
(
"
Not
parsing
URI
scheme
:
"
+
uri
.
scheme
)
;
return
false
;
}
try
{
uri
.
QueryInterface
(
Ci
.
nsIURL
)
;
}
catch
(
ex
)
{
return
false
;
}
let
asciiHost
=
uri
.
asciiHost
;
if
(
!
isBaseUri
&
&
this
.
_blockedHosts
.
some
(
blockedHost
=
>
asciiHost
.
endsWith
(
blockedHost
)
)
)
{
return
false
;
}
if
(
!
isBaseUri
&
&
(
!
uri
.
filePath
|
|
uri
.
filePath
=
=
"
/
"
)
)
{
this
.
log
(
"
Not
parsing
home
page
:
"
+
uri
.
spec
)
;
return
false
;
}
return
true
;
}
_readerParse
:
Task
.
async
(
function
*
(
uri
doc
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
READER_MODE_PARSE_RESULT
"
)
;
if
(
this
.
parseNodeLimit
)
{
let
numTags
=
doc
.
getElementsByTagName
(
"
*
"
)
.
length
;
if
(
numTags
>
this
.
parseNodeLimit
)
{
this
.
log
(
"
Aborting
parse
for
"
+
uri
.
spec
+
"
;
"
+
numTags
+
"
elements
found
"
)
;
histogram
.
add
(
PARSE_ERROR_TOO_MANY_ELEMENTS
)
;
return
null
;
}
}
let
uriParam
=
{
spec
:
uri
.
spec
host
:
uri
.
host
prePath
:
uri
.
prePath
scheme
:
uri
.
scheme
pathBase
:
Services
.
io
.
newURI
(
"
.
"
null
uri
)
.
spec
}
;
let
serializer
=
Cc
[
"
mozilla
.
org
/
xmlextras
/
xmlserializer
;
1
"
]
.
createInstance
(
Ci
.
nsIDOMSerializer
)
;
let
serializedDoc
=
serializer
.
serializeToString
(
doc
)
;
let
article
=
null
;
try
{
article
=
yield
ReaderWorker
.
post
(
"
parseDocument
"
[
uriParam
serializedDoc
]
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
Error
in
ReaderWorker
:
"
+
e
)
;
histogram
.
add
(
PARSE_ERROR_WORKER
)
;
}
if
(
!
article
)
{
this
.
log
(
"
Worker
did
not
return
an
article
"
)
;
histogram
.
add
(
PARSE_ERROR_NO_ARTICLE
)
;
return
null
;
}
article
.
url
=
article
.
uri
.
spec
;
delete
article
.
uri
;
let
flags
=
Ci
.
nsIDocumentEncoder
.
OutputSelectionOnly
|
Ci
.
nsIDocumentEncoder
.
OutputAbsoluteLinks
;
article
.
title
=
Cc
[
"
mozilla
.
org
/
parserutils
;
1
"
]
.
getService
(
Ci
.
nsIParserUtils
)
.
convertToPlainText
(
article
.
title
flags
0
)
;
if
(
gIsFirefoxDesktop
)
{
yield
this
.
_assignLanguage
(
article
)
;
this
.
_maybeAssignTextDirection
(
article
)
;
}
this
.
_assignReadTime
(
article
)
;
histogram
.
add
(
PARSE_SUCCESS
)
;
return
article
;
}
)
get
_cryptoHash
(
)
{
delete
this
.
_cryptoHash
;
return
this
.
_cryptoHash
=
Cc
[
"
mozilla
.
org
/
security
/
hash
;
1
"
]
.
createInstance
(
Ci
.
nsICryptoHash
)
;
}
get
_unicodeConverter
(
)
{
delete
this
.
_unicodeConverter
;
this
.
_unicodeConverter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
this
.
_unicodeConverter
.
charset
=
"
utf8
"
;
return
this
.
_unicodeConverter
;
}
_toHashedPath
:
function
(
url
)
{
let
value
=
this
.
_unicodeConverter
.
convertToByteArray
(
url
)
;
this
.
_cryptoHash
.
init
(
this
.
_cryptoHash
.
MD5
)
;
this
.
_cryptoHash
.
update
(
value
value
.
length
)
;
let
hash
=
CommonUtils
.
encodeBase32
(
this
.
_cryptoHash
.
finish
(
false
)
)
;
let
fileName
=
hash
.
substring
(
0
hash
.
indexOf
(
"
=
"
)
)
+
"
.
json
"
;
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
readercache
"
fileName
)
;
}
_ensureCacheDir
:
function
(
)
{
let
dir
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
readercache
"
)
;
return
OS
.
File
.
exists
(
dir
)
.
then
(
exists
=
>
{
if
(
!
exists
)
{
return
OS
.
File
.
makeDir
(
dir
)
;
}
return
undefined
;
}
)
;
}
_assignLanguage
(
article
)
{
return
LanguageDetector
.
detectLanguage
(
article
.
textContent
)
.
then
(
result
=
>
{
article
.
language
=
result
.
confident
?
result
.
language
:
null
;
}
)
;
}
_maybeAssignTextDirection
(
article
)
{
if
(
!
article
.
dir
&
&
[
"
ar
"
"
fa
"
"
he
"
"
ug
"
"
ur
"
]
.
includes
(
article
.
language
)
)
{
article
.
dir
=
"
rtl
"
;
}
}
_assignReadTime
(
article
)
{
let
lang
=
article
.
language
|
|
"
en
"
;
const
readingSpeed
=
this
.
_getReadingSpeedForLanguage
(
lang
)
;
const
charactersPerMinuteLow
=
readingSpeed
.
cpm
-
readingSpeed
.
variance
;
const
charactersPerMinuteHigh
=
readingSpeed
.
cpm
+
readingSpeed
.
variance
;
const
length
=
article
.
length
;
article
.
readingTimeMinsSlow
=
Math
.
ceil
(
length
/
charactersPerMinuteLow
)
;
article
.
readingTimeMinsFast
=
Math
.
ceil
(
length
/
charactersPerMinuteHigh
)
;
}
_getReadingSpeedForLanguage
(
lang
)
{
const
readingSpeed
=
new
Map
(
[
[
"
en
"
{
cpm
:
987
variance
:
118
}
]
[
"
ar
"
{
cpm
:
612
variance
:
88
}
]
[
"
de
"
{
cpm
:
920
variance
:
86
}
]
[
"
es
"
{
cpm
:
1025
variance
:
127
}
]
[
"
fi
"
{
cpm
:
1078
variance
:
121
}
]
[
"
fr
"
{
cpm
:
998
variance
:
126
}
]
[
"
he
"
{
cpm
:
833
variance
:
130
}
]
[
"
it
"
{
cpm
:
950
variance
:
140
}
]
[
"
jw
"
{
cpm
:
357
variance
:
56
}
]
[
"
nl
"
{
cpm
:
978
variance
:
143
}
]
[
"
pl
"
{
cpm
:
916
variance
:
126
}
]
[
"
pt
"
{
cpm
:
913
variance
:
145
}
]
[
"
ru
"
{
cpm
:
986
variance
:
175
}
]
[
"
sk
"
{
cpm
:
885
variance
:
145
}
]
[
"
sv
"
{
cpm
:
917
variance
:
156
}
]
[
"
tr
"
{
cpm
:
1054
variance
:
156
}
]
[
"
zh
"
{
cpm
:
255
variance
:
29
}
]
]
)
;
return
readingSpeed
.
get
(
lang
)
|
|
readingSpeed
.
get
(
"
en
"
)
;
}
}
;
