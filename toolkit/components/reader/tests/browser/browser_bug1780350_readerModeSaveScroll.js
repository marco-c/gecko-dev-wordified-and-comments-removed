"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
add_task
(
async
function
test_save_scroll_position
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticleContainsLink
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
Promise
.
all
(
[
pageShownPromise
browserLoadedPromise
]
)
;
let
scrollEventPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
scroll
"
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
document
.
documentElement
.
scrollTop
=
200
;
}
)
;
await
scrollEventPromise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
linkElement
=
content
.
document
.
getElementById
(
"
link
"
)
;
linkElement
.
click
(
)
;
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
is
(
content
.
document
.
documentElement
.
scrollTop
0
"
vertical
scroll
position
should
reset
to
zero
when
navigating
to
linked
page
.
"
)
;
content
.
window
.
history
.
back
(
)
;
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
scrollEventPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
scroll
"
true
)
;
await
scrollEventPromise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
doc
=
content
.
document
;
is
(
doc
.
documentElement
.
scrollTop
200
"
should
restore
saved
scroll
position
when
navigating
back
from
link
.
"
)
;
}
)
;
}
)
;
}
)
;
