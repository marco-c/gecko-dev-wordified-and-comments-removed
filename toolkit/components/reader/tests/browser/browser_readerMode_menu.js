"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticleShort
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
function
dispatchMouseEvent
(
win
target
eventName
)
{
let
mouseEvent
=
new
win
.
MouseEvent
(
eventName
{
view
:
win
bubbles
:
true
cancelable
:
true
composed
:
true
}
)
;
target
.
dispatchEvent
(
mouseEvent
)
;
}
function
simulateClick
(
target
)
{
dispatchMouseEvent
(
win
target
"
mousedown
"
)
;
dispatchMouseEvent
(
win
target
"
mouseup
"
)
;
dispatchMouseEvent
(
win
target
"
click
"
)
;
}
async
function
testOpenCloseDropdown
(
target
)
{
let
button
=
doc
.
querySelector
(
.
{
target
}
-
button
)
;
let
dropdown
=
doc
.
querySelector
(
.
{
target
}
-
dropdown
)
;
ok
(
!
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
closed
"
)
;
simulateClick
(
button
)
;
ok
(
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
open
"
)
;
let
title
=
doc
.
querySelector
(
"
.
reader
-
title
"
)
;
simulateClick
(
title
)
;
ok
(
!
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
closed
"
)
;
simulateClick
(
button
)
;
ok
(
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
open
"
)
;
simulateClick
(
button
)
;
ok
(
!
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
closed
"
)
;
simulateClick
(
button
)
;
ok
(
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
open
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
win
)
;
ok
(
!
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
closed
"
)
;
}
let
doc
=
content
.
document
;
let
win
=
content
.
window
;
testOpenCloseDropdown
(
"
style
"
)
;
testOpenCloseDropdown
(
"
colors
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticleContainsLink
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
let
scrollEventPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
scroll
"
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
doc
=
content
.
document
;
let
dropdown
=
doc
.
querySelector
(
"
.
improved
-
style
-
dropdown
"
)
;
doc
.
querySelector
(
"
.
improved
-
style
-
button
"
)
.
click
(
)
;
ok
(
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
open
"
)
;
let
domain
=
doc
.
querySelector
(
"
.
reader
-
domain
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
domain
{
type
:
"
mousemove
"
}
content
.
window
)
;
content
.
window
.
scrollBy
(
0
200
)
;
}
)
;
await
scrollEventPromise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
dropdown
=
content
.
document
.
querySelector
(
"
.
improved
-
style
-
dropdown
"
)
;
ok
(
!
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
closed
"
)
;
}
)
;
scrollEventPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
scroll
"
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
doc
=
content
.
document
;
let
dropdown
=
doc
.
querySelector
(
"
.
improved
-
style
-
dropdown
"
)
;
doc
.
querySelector
(
"
.
improved
-
style
-
button
"
)
.
click
(
)
;
ok
(
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
is
open
"
)
;
let
dropdownPopup
=
dropdown
.
querySelector
(
"
.
dropdown
-
popup
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
dropdownPopup
{
type
:
"
mousemove
"
}
content
.
window
)
;
content
.
window
.
scrollBy
(
0
200
)
;
}
)
;
await
scrollEventPromise
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
dropdown
=
content
.
document
.
querySelector
(
"
.
improved
-
style
-
dropdown
"
)
;
ok
(
dropdown
.
classList
.
contains
(
"
open
"
)
"
dropdown
remains
open
"
)
;
}
)
;
}
)
;
}
)
;
