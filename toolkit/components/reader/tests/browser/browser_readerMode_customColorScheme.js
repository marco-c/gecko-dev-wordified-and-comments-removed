"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
async
function
testCustomColors
(
aPref
color
)
{
Services
.
prefs
.
setBoolPref
(
"
reader
.
colors_menu
.
enabled
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
reader
.
color_scheme
"
"
custom
"
)
;
Services
.
prefs
.
setCharPref
(
reader
.
custom_colors
.
{
aPref
}
color
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticle
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
let
colorScheme
=
Services
.
prefs
.
getCharPref
(
"
reader
.
color_scheme
"
)
;
Assert
.
equal
(
colorScheme
"
custom
"
)
;
let
prefValue
=
Services
.
prefs
.
getStringPref
(
reader
.
custom_colors
.
{
aPref
}
)
;
let
cssProp
=
-
-
custom
-
theme
-
{
aPref
}
;
await
SpecialPowers
.
spawn
(
browser
[
prefValue
cssProp
]
(
customColor
prop
)
=
>
{
let
style
=
content
.
window
.
getComputedStyle
(
content
.
document
.
body
)
;
let
actualColor
=
style
.
getPropertyValue
(
prop
)
;
Assert
.
equal
(
customColor
actualColor
)
;
}
)
;
}
)
;
}
add_task
(
async
function
(
)
{
await
testCustomColors
(
"
foreground
"
"
#
ffffff
"
)
;
await
testCustomColors
(
"
background
"
"
#
000000
"
)
;
await
testCustomColors
(
"
unvisited
-
links
"
"
#
ffffff
"
)
;
await
testCustomColors
(
"
visited
-
links
"
"
#
ffffff
"
)
;
await
testCustomColors
(
"
selection
-
highlight
"
"
#
ffffff
"
)
;
}
)
;
