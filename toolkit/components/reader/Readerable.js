"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
function
isNodeVisible
(
node
)
{
return
node
.
clientHeight
>
0
&
&
node
.
clientWidth
>
0
;
}
var
Readerable
=
{
get
isEnabledForParseOnLoad
(
)
{
return
this
.
isEnabled
;
}
isProbablyReaderable
(
doc
)
{
if
(
doc
.
mozSyntheticDocument
|
|
!
(
doc
instanceof
doc
.
defaultView
.
HTMLDocument
)
)
{
return
false
;
}
let
uri
=
Services
.
io
.
newURI
(
doc
.
location
.
href
)
;
if
(
!
this
.
shouldCheckUri
(
uri
)
)
{
return
false
;
}
return
isProbablyReaderable
(
doc
isNodeVisible
)
;
}
_blockedHosts
:
[
"
amazon
.
com
"
"
github
.
com
"
"
mail
.
google
.
com
"
"
pinterest
.
com
"
"
reddit
.
com
"
"
twitter
.
com
"
"
youtube
.
com
"
]
shouldCheckUri
(
uri
isBaseUri
=
false
)
{
if
(
!
[
"
http
"
"
https
"
"
file
"
]
.
includes
(
uri
.
scheme
)
)
{
return
false
;
}
if
(
!
isBaseUri
&
&
uri
.
scheme
.
startsWith
(
"
http
"
)
)
{
let
{
host
}
=
uri
;
if
(
this
.
_blockedHosts
.
some
(
blockedHost
=
>
host
.
endsWith
(
blockedHost
)
)
)
{
return
false
;
}
if
(
uri
.
filePath
=
=
"
/
"
)
{
return
false
;
}
}
return
true
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
Readerable
"
isEnabled
"
"
reader
.
parse
-
on
-
load
.
enabled
"
true
)
;
