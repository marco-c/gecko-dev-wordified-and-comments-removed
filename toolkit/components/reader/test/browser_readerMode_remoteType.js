"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
CROSS_SITE_TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
org
"
)
;
add_task
(
async
function
(
)
{
info
(
"
opening
readermode
normally
to
ensure
process
doesn
'
t
change
"
)
;
let
articleRemoteType
;
let
aboutReaderURL
;
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticleShort
.
html
"
async
function
(
browser
)
{
articleRemoteType
=
browser
.
remoteType
;
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
aboutReaderURL
=
browser
.
documentURI
.
spec
;
ok
(
aboutReaderURL
.
startsWith
(
"
about
:
reader
"
)
"
about
:
reader
should
have
been
opened
"
)
;
is
(
browser
.
remoteType
articleRemoteType
"
remote
type
should
not
have
changed
"
)
;
}
)
;
info
(
"
opening
new
tab
directly
with
about
reader
URL
into
correct
remote
type
"
)
;
await
BrowserTestUtils
.
withNewTab
(
aboutReaderURL
async
function
(
browser
)
{
is
(
browser
.
remoteType
articleRemoteType
"
Should
have
performed
about
:
reader
load
in
the
correct
remote
type
"
)
;
}
)
;
info
(
"
navigating
process
into
correct
remote
type
"
)
;
await
BrowserTestUtils
.
withNewTab
(
CROSS_SITE_TEST_PATH
+
"
readerModeArticleShort
.
html
"
async
function
(
browser
)
{
if
(
SpecialPowers
.
useRemoteSubframes
)
{
isnot
(
browser
.
remoteType
articleRemoteType
"
Cross
-
site
article
should
have
different
remote
type
with
fission
"
)
;
}
BrowserTestUtils
.
loadURI
(
browser
aboutReaderURL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
is
(
browser
.
remoteType
articleRemoteType
"
Should
have
switched
into
the
correct
remote
type
"
)
;
}
)
;
}
)
;
