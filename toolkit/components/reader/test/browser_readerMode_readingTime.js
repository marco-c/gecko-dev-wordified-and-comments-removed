"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticle
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
readingTimeElement
=
content
.
document
.
getElementById
(
"
reader
-
estimated
-
time
"
)
;
ok
(
readingTimeElement
"
Reading
time
element
should
be
in
document
"
)
;
is
(
readingTimeElement
.
textContent
"
9
-
12
minutes
"
"
Reading
time
should
be
'
9
-
12
minutes
'
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticleShort
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
readingTimeElement
=
content
.
document
.
getElementById
(
"
reader
-
estimated
-
time
"
)
;
ok
(
readingTimeElement
"
Reading
time
element
should
be
in
document
"
)
;
is
(
readingTimeElement
.
textContent
"
1
minute
"
"
Reading
time
should
be
'
1
minute
'
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticleMedium
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
readingTimeElement
=
content
.
document
.
getElementById
(
"
reader
-
estimated
-
time
"
)
;
ok
(
readingTimeElement
"
Reading
time
element
should
be
in
document
"
)
;
is
(
readingTimeElement
.
textContent
"
3
minutes
"
"
Reading
time
should
be
'
3
minutes
'
"
)
;
}
)
;
}
)
;
}
)
;
