const
TEST_PREFS
=
[
[
"
reader
.
parse
-
on
-
load
.
enabled
"
true
]
]
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
var
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
add_task
(
async
function
test_reader_button
(
)
{
registerCleanupFunction
(
function
(
)
{
TEST_PREFS
.
forEach
(
(
[
name
]
)
=
>
{
Services
.
prefs
.
clearUserPref
(
name
)
;
}
)
;
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
}
)
;
TEST_PREFS
.
forEach
(
(
[
name
value
]
)
=
>
{
Services
.
prefs
.
setBoolPref
(
name
value
)
;
}
)
;
let
tab
=
(
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
)
;
is_element_hidden
(
readerButton
"
Reader
mode
button
is
not
present
on
a
new
tab
"
)
;
let
url
=
TEST_PATH
+
"
readerModeArticleHiddenNodes
.
html
"
;
let
paintPromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
MozAfterPaint
"
false
e
=
>
e
.
originalTarget
.
location
.
href
.
endsWith
(
"
HiddenNodes
.
html
"
)
&
&
e
.
originalTarget
.
document
.
readyState
=
=
"
complete
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
url
)
;
await
paintPromise
;
is_element_hidden
(
readerButton
"
Reader
mode
button
is
still
not
present
on
tab
with
unreadable
content
.
"
)
;
}
)
;
