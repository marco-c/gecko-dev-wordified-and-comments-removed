ChromeUtils
.
defineModuleGetter
(
this
"
PromiseUtils
"
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
function
promiseTabLoadEvent
(
tab
url
)
{
let
deferred
=
PromiseUtils
.
defer
(
)
;
info
(
"
Wait
tab
event
:
load
"
)
;
function
handle
(
loadedUrl
)
{
if
(
loadedUrl
=
=
=
"
about
:
blank
"
|
|
(
url
&
&
loadedUrl
!
=
=
url
)
)
{
info
(
Skipping
spurious
load
event
for
{
loadedUrl
}
)
;
return
false
;
}
info
(
"
Tab
event
received
:
load
"
)
;
return
true
;
}
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
handle
)
;
let
timeout
=
setTimeout
(
(
)
=
>
{
deferred
.
reject
(
new
Error
(
"
Timed
out
while
waiting
for
a
'
load
'
event
"
)
)
;
}
30000
)
;
loaded
.
then
(
(
)
=
>
{
clearTimeout
(
timeout
)
;
deferred
.
resolve
(
)
;
}
)
;
if
(
url
)
{
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
url
)
;
}
return
Promise
.
all
(
[
deferred
.
promise
loaded
]
)
;
}
function
is_element_visible
(
element
msg
)
{
isnot
(
element
null
"
Element
should
not
be
null
when
checking
visibility
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
element
)
msg
|
|
"
Element
should
be
visible
"
)
;
}
function
is_element_hidden
(
element
msg
)
{
isnot
(
element
null
"
Element
should
not
be
null
when
checking
visibility
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
element
)
msg
|
|
"
Element
should
be
hidden
"
)
;
}
