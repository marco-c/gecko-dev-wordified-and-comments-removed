ChromeUtils
.
defineModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
function
promiseTabLoadEvent
(
tab
url
)
{
let
deferred
=
Promise
.
defer
(
)
;
info
(
"
Wait
tab
event
:
load
"
)
;
function
handle
(
loadedUrl
)
{
if
(
loadedUrl
=
=
=
"
about
:
blank
"
|
|
(
url
&
&
loadedUrl
!
=
=
url
)
)
{
info
(
Skipping
spurious
load
event
for
{
loadedUrl
}
)
;
return
false
;
}
info
(
"
Tab
event
received
:
load
"
)
;
return
true
;
}
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
handle
)
;
let
timeout
=
setTimeout
(
(
)
=
>
{
deferred
.
reject
(
new
Error
(
"
Timed
out
while
waiting
for
a
'
load
'
event
"
)
)
;
}
30000
)
;
loaded
.
then
(
(
)
=
>
{
clearTimeout
(
timeout
)
;
deferred
.
resolve
(
)
;
}
)
;
if
(
url
)
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
url
)
;
return
Promise
.
all
(
[
deferred
.
promise
loaded
]
)
;
}
function
waitForCondition
(
condition
nextTest
errorMsg
retryTimes
)
{
retryTimes
=
typeof
retryTimes
!
=
=
"
undefined
"
?
retryTimes
:
30
;
var
tries
=
0
;
var
interval
=
setInterval
(
function
(
)
{
if
(
tries
>
=
retryTimes
)
{
ok
(
false
errorMsg
)
;
moveOn
(
)
;
}
var
conditionPassed
;
try
{
conditionPassed
=
condition
(
)
;
}
catch
(
e
)
{
ok
(
false
e
+
"
\
n
"
+
e
.
stack
)
;
conditionPassed
=
false
;
}
if
(
conditionPassed
)
{
moveOn
(
)
;
}
tries
+
+
;
}
100
)
;
var
moveOn
=
function
(
)
{
clearInterval
(
interval
)
;
nextTest
(
)
;
}
;
}
function
promiseWaitForCondition
(
aConditionFn
)
{
return
new
Promise
(
resolve
=
>
{
waitForCondition
(
aConditionFn
resolve
"
Condition
didn
'
t
pass
.
"
)
;
}
)
;
}
function
is_element_visible
(
element
msg
)
{
isnot
(
element
null
"
Element
should
not
be
null
when
checking
visibility
"
)
;
ok
(
is_visible
(
element
)
msg
|
|
"
Element
should
be
visible
"
)
;
}
function
is_element_hidden
(
element
msg
)
{
isnot
(
element
null
"
Element
should
not
be
null
when
checking
visibility
"
)
;
ok
(
is_hidden
(
element
)
msg
|
|
"
Element
should
be
hidden
"
)
;
}
function
is_visible
(
element
)
{
var
style
=
element
.
ownerGlobal
.
getComputedStyle
(
element
)
;
if
(
style
.
display
=
=
"
none
"
)
return
false
;
if
(
style
.
visibility
!
=
"
visible
"
)
return
false
;
if
(
style
.
display
=
=
"
-
moz
-
popup
"
&
&
element
.
state
!
=
"
open
"
)
return
false
;
if
(
element
.
parentNode
!
=
element
.
ownerDocument
)
return
is_visible
(
element
.
parentNode
)
;
return
true
;
}
function
is_hidden
(
element
)
{
var
style
=
element
.
ownerGlobal
.
getComputedStyle
(
element
)
;
if
(
style
.
display
=
=
"
none
"
)
return
true
;
if
(
style
.
visibility
!
=
"
visible
"
)
return
true
;
if
(
style
.
display
=
=
"
-
moz
-
popup
"
)
return
[
"
hiding
"
"
closed
"
]
.
includes
(
element
.
state
)
;
if
(
element
.
parentNode
!
=
element
.
ownerDocument
)
return
is_hidden
(
element
.
parentNode
)
;
return
false
;
}
