"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
var
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
content
/
tests
/
browser
/
common
/
mockTransfer
.
js
"
this
)
;
function
createTemporarySaveDirectory
(
)
{
var
saveDir
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
saveDir
.
append
(
"
testsavedir
"
)
;
if
(
!
saveDir
.
exists
(
)
)
{
saveDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
}
return
saveDir
;
}
function
downloadHadFinished
(
publicList
)
{
return
new
Promise
(
resolve
=
>
{
publicList
.
addView
(
{
onDownloadChanged
(
download
)
{
if
(
download
.
succeeded
|
|
download
.
error
)
{
publicList
.
removeView
(
this
)
;
resolve
(
download
)
;
}
}
}
)
;
}
)
;
}
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
readerModeArticleShort
.
html
"
async
function
(
browser
)
{
let
pageShownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
AboutReaderContentReady
"
)
;
let
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
readerButton
.
click
(
)
;
await
pageShownPromise
;
var
fileName
;
var
destDir
=
createTemporarySaveDirectory
(
)
;
var
destFile
=
destDir
.
clone
(
)
;
MockFilePicker
.
displayDirectory
=
destDir
;
MockFilePicker
.
showCallback
=
function
(
fp
)
{
fileName
=
fp
.
defaultString
;
destFile
.
append
(
fileName
)
;
MockFilePicker
.
setFiles
(
[
destFile
]
)
;
MockFilePicker
.
filterIndex
=
1
;
}
;
let
fileSavePageAsElement
=
document
.
getElementById
(
"
menu_savePage
"
)
;
fileSavePageAsElement
.
doCommand
(
)
;
let
publicList
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
let
downloadFinishedPromise
=
downloadHadFinished
(
publicList
)
;
let
download
=
await
downloadFinishedPromise
;
let
fileDir
=
PathUtils
.
join
(
download
.
target
.
path
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
fileDir
)
;
await
loadPromise
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
Assert
.
ok
(
content
.
document
.
getElementById
(
"
toolbar
"
)
.
hidden
"
The
toolbar
is
hidden
"
)
;
}
)
;
}
)
;
}
)
;
