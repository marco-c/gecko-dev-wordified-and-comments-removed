#
include
"
mozilla
/
ProcInfo
.
h
"
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
mozilla
/
SSE
.
h
"
#
include
"
gfxWindowsPlatform
.
h
"
#
include
"
nsMemoryReporterManager
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
windows
.
h
>
#
include
<
psapi
.
h
>
#
include
<
winternl
.
h
>
#
ifndef
STATUS_INFO_LENGTH_MISMATCH
#
define
STATUS_INFO_LENGTH_MISMATCH
(
(
NTSTATUS
)
0xC0000004L
)
#
endif
#
define
PR_USEC_PER_NSEC
1000L
typedef
HRESULT
(
WINAPI
*
GETTHREADDESCRIPTION
)
(
HANDLE
hThread
PWSTR
*
threadDescription
)
;
namespace
mozilla
{
static
uint64_t
ToNanoSeconds
(
const
FILETIME
&
aFileTime
)
{
ULARGE_INTEGER
usec
=
{
{
aFileTime
.
dwLowDateTime
aFileTime
.
dwHighDateTime
}
}
;
return
usec
.
QuadPart
*
100
;
}
int
GetCycleTimeFrequencyMHz
(
)
{
static
const
int
frequency
=
[
]
(
)
{
if
(
!
mozilla
:
:
has_constant_tsc
(
)
)
{
return
0
;
}
HKEY
key
;
static
const
WCHAR
keyName
[
]
=
L
"
HARDWARE
\
\
DESCRIPTION
\
\
System
\
\
CentralProcessor
\
\
0
"
;
if
(
RegOpenKeyEx
(
HKEY_LOCAL_MACHINE
keyName
0
KEY_QUERY_VALUE
&
key
)
=
=
ERROR_SUCCESS
)
{
DWORD
data
len
;
len
=
sizeof
(
data
)
;
if
(
RegQueryValueEx
(
key
L
"
~
Mhz
"
0
0
reinterpret_cast
<
LPBYTE
>
(
&
data
)
&
len
)
=
=
ERROR_SUCCESS
)
{
return
static_cast
<
int
>
(
data
)
;
}
}
return
0
;
}
(
)
;
return
frequency
;
}
nsresult
GetCpuTimeSinceProcessStartInMs
(
uint64_t
*
aResult
)
{
int
frequencyInMHz
=
GetCycleTimeFrequencyMHz
(
)
;
if
(
frequencyInMHz
)
{
uint64_t
cpuCycleCount
;
if
(
!
QueryProcessCycleTime
(
:
:
GetCurrentProcess
(
)
&
cpuCycleCount
)
)
{
return
NS_ERROR_FAILURE
;
}
constexpr
int
HZ_PER_MHZ
=
1000000
;
*
aResult
=
cpuCycleCount
/
(
frequencyInMHz
*
(
HZ_PER_MHZ
/
PR_MSEC_PER_SEC
)
)
;
return
NS_OK
;
}
FILETIME
createTime
exitTime
kernelTime
userTime
;
if
(
!
GetProcessTimes
(
:
:
GetCurrentProcess
(
)
&
createTime
&
exitTime
&
kernelTime
&
userTime
)
)
{
return
NS_ERROR_FAILURE
;
}
*
aResult
=
(
ToNanoSeconds
(
kernelTime
)
+
ToNanoSeconds
(
userTime
)
)
/
PR_NSEC_PER_MSEC
;
return
NS_OK
;
}
nsresult
GetGpuTimeSinceProcessStartInMs
(
uint64_t
*
aResult
)
{
return
gfxWindowsPlatform
:
:
GetGpuTimeSinceProcessStartInMs
(
aResult
)
;
}
ProcInfoPromise
:
:
ResolveOrRejectValue
GetProcInfoSync
(
nsTArray
<
ProcInfoRequest
>
&
&
aRequests
)
{
ProcInfoPromise
:
:
ResolveOrRejectValue
result
;
HashMap
<
base
:
:
ProcessId
ProcInfo
>
gathered
;
if
(
!
gathered
.
reserve
(
aRequests
.
Length
(
)
)
)
{
result
.
SetReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
result
;
}
int
frequencyInMHz
=
GetCycleTimeFrequencyMHz
(
)
;
for
(
const
auto
&
request
:
aRequests
)
{
nsAutoHandle
handle
(
OpenProcess
(
PROCESS_QUERY_INFORMATION
|
PROCESS_VM_READ
FALSE
request
.
pid
)
)
;
if
(
!
handle
)
{
continue
;
}
uint64_t
cpuCycleTime
;
if
(
!
QueryProcessCycleTime
(
handle
.
get
(
)
&
cpuCycleTime
)
)
{
continue
;
}
uint64_t
cpuTime
;
if
(
frequencyInMHz
)
{
cpuTime
=
cpuCycleTime
*
PR_USEC_PER_NSEC
/
frequencyInMHz
;
}
else
{
FILETIME
createTime
exitTime
kernelTime
userTime
;
if
(
!
GetProcessTimes
(
handle
.
get
(
)
&
createTime
&
exitTime
&
kernelTime
&
userTime
)
)
{
continue
;
}
cpuTime
=
ToNanoSeconds
(
kernelTime
)
+
ToNanoSeconds
(
userTime
)
;
}
PROCESS_MEMORY_COUNTERS_EX
memoryCounters
;
if
(
!
GetProcessMemoryInfo
(
handle
.
get
(
)
(
PPROCESS_MEMORY_COUNTERS
)
&
memoryCounters
sizeof
(
memoryCounters
)
)
)
{
continue
;
}
ProcInfo
info
;
info
.
pid
=
request
.
pid
;
info
.
childId
=
request
.
childId
;
info
.
type
=
request
.
processType
;
info
.
origin
=
request
.
origin
;
info
.
windows
=
std
:
:
move
(
request
.
windowInfo
)
;
info
.
utilityActors
=
std
:
:
move
(
request
.
utilityInfo
)
;
info
.
cpuTime
=
cpuTime
;
info
.
cpuCycleCount
=
cpuCycleTime
;
info
.
memory
=
memoryCounters
.
PrivateUsage
;
if
(
!
gathered
.
put
(
request
.
pid
std
:
:
move
(
info
)
)
)
{
result
.
SetReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
result
;
}
}
NTSTATUS
ntStatus
;
UniquePtr
<
char
[
]
>
buf
;
ULONG
bufLen
=
512u
*
1024u
;
do
{
buf
=
MakeUniqueFallible
<
char
[
]
>
(
bufLen
)
;
if
(
!
buf
)
{
result
.
SetReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
result
;
}
ntStatus
=
:
:
NtQuerySystemInformation
(
SystemProcessInformation
buf
.
get
(
)
bufLen
&
bufLen
)
;
if
(
ntStatus
!
=
STATUS_INFO_LENGTH_MISMATCH
)
{
break
;
}
bufLen
+
=
8u
*
1024u
;
}
while
(
true
)
;
if
(
!
NT_SUCCESS
(
ntStatus
)
)
{
result
.
SetReject
(
NS_ERROR_UNEXPECTED
)
;
return
result
;
}
auto
getThreadDescription
=
reinterpret_cast
<
GETTHREADDESCRIPTION
>
(
:
:
GetProcAddress
(
:
:
GetModuleHandleW
(
L
"
Kernel32
.
dll
"
)
"
GetThreadDescription
"
)
)
;
PSYSTEM_PROCESS_INFORMATION
processInfo
;
for
(
ULONG
offset
=
0
;
;
offset
+
=
processInfo
-
>
NextEntryOffset
)
{
MOZ_RELEASE_ASSERT
(
offset
<
bufLen
)
;
processInfo
=
reinterpret_cast
<
PSYSTEM_PROCESS_INFORMATION
>
(
buf
.
get
(
)
+
offset
)
;
ULONG
pid
=
HandleToUlong
(
processInfo
-
>
UniqueProcessId
)
;
auto
processLookup
=
gathered
.
lookup
(
pid
)
;
if
(
processLookup
)
{
for
(
ULONG
i
=
0
;
i
<
processInfo
-
>
NumberOfThreads
;
+
+
i
)
{
PSYSTEM_THREAD_INFORMATION
thread
=
reinterpret_cast
<
PSYSTEM_THREAD_INFORMATION
>
(
buf
.
get
(
)
+
offset
+
sizeof
(
SYSTEM_PROCESS_INFORMATION
)
+
sizeof
(
SYSTEM_THREAD_INFORMATION
)
*
i
)
;
ULONG
tid
=
HandleToUlong
(
thread
-
>
ClientId
.
UniqueThread
)
;
ThreadInfo
*
threadInfo
=
processLookup
-
>
value
(
)
.
threads
.
AppendElement
(
fallible
)
;
if
(
!
threadInfo
)
{
result
.
SetReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
result
;
}
nsAutoHandle
hThread
(
OpenThread
(
THREAD_QUERY_INFORMATION
FALSE
tid
)
)
;
if
(
!
hThread
)
{
processLookup
-
>
value
(
)
.
threads
.
RemoveLastElement
(
)
;
continue
;
}
threadInfo
-
>
tid
=
tid
;
if
(
QueryThreadCycleTime
(
hThread
.
get
(
)
&
threadInfo
-
>
cpuCycleCount
)
&
&
frequencyInMHz
)
{
threadInfo
-
>
cpuTime
=
threadInfo
-
>
cpuCycleCount
*
PR_USEC_PER_NSEC
/
frequencyInMHz
;
}
else
{
FILETIME
createTime
exitTime
kernelTime
userTime
;
if
(
GetThreadTimes
(
hThread
.
get
(
)
&
createTime
&
exitTime
&
kernelTime
&
userTime
)
)
{
threadInfo
-
>
cpuTime
=
ToNanoSeconds
(
kernelTime
)
+
ToNanoSeconds
(
userTime
)
;
}
}
if
(
getThreadDescription
)
{
PWSTR
threadName
=
nullptr
;
if
(
getThreadDescription
(
hThread
.
get
(
)
&
threadName
)
&
&
threadName
)
{
threadInfo
-
>
name
=
threadName
;
}
if
(
threadName
)
{
LocalFree
(
threadName
)
;
}
}
}
}
if
(
processInfo
-
>
NextEntryOffset
=
=
0
)
{
break
;
}
}
result
.
SetResolve
(
std
:
:
move
(
gathered
)
)
;
return
result
;
}
}
