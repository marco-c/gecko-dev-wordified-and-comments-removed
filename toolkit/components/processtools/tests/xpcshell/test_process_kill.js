"
use
strict
"
;
const
{
setTimeout
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
)
;
const
{
Subprocess
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
sys
.
mjs
"
)
;
const
ProcessTools
=
Cc
[
"
mozilla
.
org
/
processtools
-
service
;
1
"
]
.
getService
(
Ci
.
nsIProcessToolsService
)
;
let
PYTHON
;
add_task
(
async
function
setup
(
)
{
PYTHON
=
await
Subprocess
.
pathSearch
(
Services
.
env
.
get
(
"
PYTHON
"
)
)
;
}
)
;
add_task
(
async
function
test_subprocess_kill
(
)
{
let
proc
=
await
Subprocess
.
call
(
{
command
:
PYTHON
arguments
:
[
]
}
)
;
let
isTerminated
=
false
;
proc
.
wait
(
)
.
then
(
(
)
=
>
{
isTerminated
=
true
;
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
100
)
)
;
Assert
.
ok
(
!
isTerminated
"
We
haven
'
t
killed
the
process
yet
it
should
still
be
running
.
"
)
;
ProcessTools
.
kill
(
proc
.
pid
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
100
)
)
;
Assert
.
ok
(
isTerminated
"
We
have
killed
the
process
already
it
shouldn
'
t
be
running
anymore
.
"
)
;
try
{
ProcessTools
.
kill
(
proc
.
pid
)
;
Assert
.
ok
(
false
"
kill
(
)
should
have
failed
"
)
;
}
catch
(
ex
)
{
Assert
.
equal
(
ex
.
result
Cr
.
NS_ERROR_NOT_AVAILABLE
"
Should
have
reported
PID
missing
"
)
;
}
}
)
;
