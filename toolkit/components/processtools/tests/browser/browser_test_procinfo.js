"
use
strict
"
;
const
DUMMY_URL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
/
dummy
.
html
"
;
const
isFissionEnabled
=
SpecialPowers
.
useRemoteSubframes
;
const
SAMPLE_SIZE
=
10
;
const
NS_PER_MS
=
1000000
;
const
LINUX_ROUNDING_ERROR
=
20
.
0
*
NS_PER_MS
;
function
checkProcessCpuTime
(
proc
)
{
let
hasProcessCPUTime
=
proc
.
cpuTime
>
0
;
if
(
hasProcessCPUTime
|
|
AppConstants
.
platform
!
=
=
"
linux
"
)
{
Assert
.
ok
(
hasProcessCPUTime
"
Got
some
cpu
time
"
)
;
Assert
.
greater
(
proc
.
threads
.
length
0
"
Got
some
threads
"
)
;
}
else
{
Assert
.
equal
(
proc
.
threads
.
length
1
"
Got
one
thread
"
)
;
Assert
.
equal
(
proc
.
threads
[
0
]
.
name
"
forkserver
"
"
Got
one
forkserver
"
)
;
}
let
hasThreadCPUTime
=
proc
.
threads
.
some
(
thread
=
>
thread
.
cpuTime
>
0
)
;
if
(
hasThreadCPUTime
|
|
AppConstants
.
platform
!
=
=
"
linux
"
)
{
Assert
.
ok
(
hasThreadCPUTime
"
Got
some
cpu
time
in
the
threads
"
)
;
}
else
{
Assert
.
less
(
proc
.
cpuTime
/
proc
.
threads
.
length
LINUX_ROUNDING_ERROR
No
CPU
time
(
{
proc
.
cpuTime
}
)
in
the
threads
(
{
proc
.
threads
.
length
}
)
on
Linux
but
within
rounding
errors
)
;
}
let
cpuThreads
=
0
;
for
(
let
thread
of
proc
.
threads
)
{
cpuThreads
+
=
Math
.
floor
(
thread
.
cpuTime
/
NS_PER_MS
)
;
}
let
processCpuTime
=
Math
.
floor
(
proc
.
cpuTime
/
NS_PER_MS
)
+
1
;
if
(
AppConstants
.
platform
=
=
"
win
"
&
&
processCpuTime
<
cpuThreads
)
{
const
MAX_DISCREPENCY
=
100
;
Assert
.
less
(
cpuThreads
-
processCpuTime
MAX_DISCREPENCY
on
Windows
we
accept
a
discrepency
of
up
to
{
MAX_DISCREPENCY
}
ms
between
the
process
CPU
time
and
the
sum
of
its
threads
'
CPU
time
process
CPU
time
:
{
processCpuTime
}
sum
of
thread
CPU
time
:
{
cpuThreads
}
)
;
}
else
{
Assert
.
greaterOrEqual
(
processCpuTime
cpuThreads
"
The
total
CPU
time
of
the
process
should
be
at
least
the
sum
of
the
CPU
time
spent
by
the
still
alive
threads
"
)
;
}
}
add_task
(
async
function
test_proc_info
(
)
{
let
tabsAboutHome
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
+
+
i
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
home
"
)
;
tabsAboutHome
.
push
(
tab
)
;
gBrowser
.
selectedTab
=
tab
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
DUMMY_URL
}
async
function
(
)
{
for
(
let
z
=
0
;
z
<
SAMPLE_SIZE
;
z
+
+
)
{
let
parentProc
=
await
ChromeUtils
.
requestProcInfo
(
)
;
Assert
.
equal
(
parentProc
.
type
"
browser
"
"
Parent
proc
type
should
be
browser
"
)
;
checkProcessCpuTime
(
parentProc
)
;
Assert
.
ok
(
parentProc
.
threads
.
some
(
thread
=
>
thread
.
name
)
"
At
least
one
of
the
threads
of
the
parent
process
is
named
"
)
;
Assert
.
greater
(
parentProc
.
memory
0
"
Memory
was
set
"
)
;
for
(
let
childProc
of
parentProc
.
children
)
{
Assert
.
notEqual
(
childProc
.
type
"
browser
"
"
Child
proc
type
should
not
be
browser
"
)
;
if
(
childProc
.
type
.
startsWith
(
"
web
"
)
)
{
Assert
.
notEqual
(
childProc
.
childID
0
"
Child
proc
should
have
been
set
"
)
;
}
Assert
.
notEqual
(
childProc
.
type
"
unknown
"
"
Child
proc
type
should
be
known
"
)
;
if
(
childProc
.
type
=
=
"
webIsolated
"
)
{
Assert
.
notEqual
(
childProc
.
origin
|
|
"
"
"
"
"
Child
process
should
have
an
origin
"
)
;
}
checkProcessCpuTime
(
childProc
)
;
}
var
hasPrivilegedAbout
=
false
;
var
numberOfAboutTabs
=
0
;
for
(
let
childProc
of
parentProc
.
children
)
{
if
(
childProc
.
type
!
=
"
privilegedabout
"
)
{
continue
;
}
hasPrivilegedAbout
=
true
;
Assert
.
greater
(
childProc
.
memory
0
"
Memory
was
set
"
)
;
for
(
var
win
of
childProc
.
windows
)
{
if
(
win
.
documentURI
.
spec
!
=
"
about
:
home
"
)
{
continue
;
}
numberOfAboutTabs
+
+
;
Assert
.
greater
(
win
.
outerWindowId
0
ContentParentID
should
be
>
0
{
win
.
outerWindowId
}
)
;
if
(
win
.
documentTitle
)
{
Assert
.
equal
(
win
.
documentTitle
"
New
Tab
"
)
;
}
}
Assert
.
greaterOrEqual
(
numberOfAboutTabs
tabsAboutHome
.
length
"
We
have
found
at
least
as
many
about
:
home
tabs
as
we
opened
"
)
;
break
;
}
Assert
.
ok
(
hasPrivilegedAbout
"
We
have
found
the
privileged
about
process
"
)
;
}
for
(
let
tab
of
tabsAboutHome
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
}
)
;
