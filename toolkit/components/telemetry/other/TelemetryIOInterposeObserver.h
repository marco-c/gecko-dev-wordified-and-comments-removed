#
ifndef
TelemetryIOInterposeObserver_h__
#
define
TelemetryIOInterposeObserver_h__
#
include
"
core
/
TelemetryCommon
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
IOInterposer
.
h
"
#
include
"
nsBaseHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
Telemetry
{
class
TelemetryIOInterposeObserver
:
public
IOInterposeObserver
{
struct
FileStats
{
FileStats
(
)
:
creates
(
0
)
reads
(
0
)
writes
(
0
)
fsyncs
(
0
)
stats
(
0
)
totalTime
(
0
)
{
}
uint32_t
creates
;
uint32_t
reads
;
uint32_t
writes
;
uint32_t
fsyncs
;
uint32_t
stats
;
double
totalTime
;
}
;
struct
SafeDir
{
SafeDir
(
const
nsAString
&
aPath
const
nsAString
&
aSubstName
)
:
mPath
(
aPath
)
mSubstName
(
aSubstName
)
{
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
mPath
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
+
mSubstName
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
;
}
nsString
mPath
;
nsString
mSubstName
;
}
;
public
:
explicit
TelemetryIOInterposeObserver
(
nsIFile
*
aXreDir
)
;
void
Observe
(
Observation
&
aOb
)
override
;
bool
ReflectIntoJS
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
rootObj
)
;
void
AddPath
(
const
nsAString
&
aPath
const
nsAString
&
aSubstName
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
enum
Stage
{
STAGE_STARTUP
=
0
STAGE_NORMAL
STAGE_SHUTDOWN
NUM_STAGES
}
;
static
inline
Stage
NextStage
(
Stage
aStage
)
{
switch
(
aStage
)
{
case
STAGE_STARTUP
:
return
STAGE_NORMAL
;
case
STAGE_NORMAL
:
return
STAGE_SHUTDOWN
;
case
STAGE_SHUTDOWN
:
return
STAGE_SHUTDOWN
;
default
:
return
NUM_STAGES
;
}
}
struct
FileStatsByStage
{
FileStats
mStats
[
NUM_STAGES
]
;
}
;
typedef
nsBaseHashtableET
<
nsStringHashKey
FileStatsByStage
>
FileIOEntryType
;
Common
:
:
AutoHashtable
<
FileIOEntryType
>
mFileStats
;
nsTArray
<
SafeDir
>
mSafeDirs
;
Stage
mCurStage
;
static
bool
ReflectFileStats
(
FileIOEntryType
*
entry
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
}
;
}
}
#
endif
