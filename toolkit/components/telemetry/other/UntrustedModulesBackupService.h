#
ifndef
mozilla_UntrustedModulesBackupService_h
#
define
mozilla_UntrustedModulesBackupService_h
#
include
"
mozilla
/
UntrustedModulesData
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
struct
ProcessHashKey
{
GeckoProcessType
mType
;
DWORD
mPid
;
ProcessHashKey
(
GeckoProcessType
aType
DWORD
aPid
)
;
bool
operator
=
=
(
const
ProcessHashKey
&
aOther
)
const
;
PLDHashNumber
Hash
(
)
const
;
}
;
class
MOZ_HEAP_CLASS
UntrustedModulesDataContainer
final
{
~
UntrustedModulesDataContainer
(
)
=
default
;
public
:
UntrustedModulesData
mData
;
explicit
UntrustedModulesDataContainer
(
UntrustedModulesData
&
&
aData
)
:
mData
(
std
:
:
move
(
aData
)
)
{
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
UntrustedModulesDataContainer
)
}
;
class
UntrustedModulesBackupData
:
public
nsRefPtrHashtable
<
nsGenericHashKey
<
ProcessHashKey
>
UntrustedModulesDataContainer
>
{
public
:
void
Add
(
UntrustedModulesData
&
&
aData
)
;
void
AddWithoutStacks
(
UntrustedModulesData
&
&
aData
)
;
}
;
class
MOZ_HEAP_CLASS
UntrustedModulesBackupService
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
UntrustedModulesBackupService
)
static
UntrustedModulesBackupService
*
Get
(
)
;
void
Backup
(
UntrustedModulesData
&
&
aData
)
;
void
SettleAllStagingData
(
)
;
const
UntrustedModulesBackupData
&
Staging
(
)
const
{
return
mStaging
;
}
const
UntrustedModulesBackupData
&
Settled
(
)
const
{
return
mSettled
;
}
private
:
UntrustedModulesBackupData
mStaging
;
UntrustedModulesBackupData
mSettled
;
~
UntrustedModulesBackupService
(
)
=
default
;
}
;
}
#
endif
