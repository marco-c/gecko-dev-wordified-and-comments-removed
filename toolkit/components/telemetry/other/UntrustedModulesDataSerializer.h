#
ifndef
UntrustedModulesDataSerializer_h__
#
define
UntrustedModulesDataSerializer_h__
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
UntrustedModulesData
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
UntrustedModulesBackupService
.
h
"
namespace
mozilla
{
namespace
Telemetry
{
class
MOZ_RAII
UntrustedModulesDataSerializer
final
{
using
IndexMap
=
nsTHashMap
<
nsStringHashKey
uint32_t
>
;
nsresult
mCtorResult
;
JSContext
*
mCx
;
JS
:
:
Rooted
<
JSObject
*
>
mMainObj
;
JS
:
:
Rooted
<
JSObject
*
>
mModulesArray
;
JS
:
:
Rooted
<
JSObject
*
>
mPerProcObjContainer
;
IndexMap
mIndexMap
;
const
uint32_t
mMaxModulesArrayLen
;
uint32_t
mCurModulesArrayIdx
;
const
uint32_t
mFlags
;
static
bool
SerializeEvent
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aElement
const
ProcessedModuleLoadEventContainer
&
aEventContainer
const
IndexMap
&
aModuleIndices
)
;
nsresult
GetPerProcObject
(
const
UntrustedModulesData
&
aData
JS
:
:
MutableHandle
<
JSObject
*
>
aObj
)
;
nsresult
AddLoadEvents
(
const
UntrustedModuleLoadingEvents
&
aEvents
JS
:
:
MutableHandle
<
JSObject
*
>
aPerProcObj
)
;
nsresult
AddSingleData
(
const
UntrustedModulesData
&
aData
)
;
public
:
UntrustedModulesDataSerializer
(
JSContext
*
aCx
uint32_t
aMaxModulesArrayLen
uint32_t
aFlags
=
0
)
;
explicit
operator
bool
(
)
const
;
void
GetObject
(
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRet
)
;
nsresult
Add
(
const
UntrustedModulesBackupData
&
aData
)
;
}
;
}
}
#
endif
