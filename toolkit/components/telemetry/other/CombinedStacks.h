#
ifndef
CombinedStacks_h__
#
define
CombinedStacks_h__
#
include
<
vector
>
#
include
"
ProcessedStack
.
h
"
class
JSObject
;
struct
JSContext
;
namespace
mozilla
{
namespace
Telemetry
{
class
CombinedStacks
{
public
:
explicit
CombinedStacks
(
)
;
explicit
CombinedStacks
(
size_t
aMaxStacksCount
)
;
CombinedStacks
(
CombinedStacks
&
&
)
=
default
;
CombinedStacks
&
operator
=
(
CombinedStacks
&
&
)
=
default
;
void
Swap
(
CombinedStacks
&
aOther
)
;
typedef
std
:
:
vector
<
Telemetry
:
:
ProcessedStack
:
:
Frame
>
Stack
;
const
Telemetry
:
:
ProcessedStack
:
:
Module
&
GetModule
(
unsigned
aIndex
)
const
;
size_t
GetModuleCount
(
)
const
;
const
Stack
&
GetStack
(
unsigned
aIndex
)
const
;
size_t
AddStack
(
const
Telemetry
:
:
ProcessedStack
&
aStack
)
;
size_t
GetStackCount
(
)
const
;
size_t
SizeOfExcludingThis
(
)
const
;
void
RemoveStack
(
unsigned
aIndex
)
;
#
if
defined
(
MOZ_GECKO_PROFILER
)
void
Clear
(
)
;
#
endif
private
:
std
:
:
vector
<
Telemetry
:
:
ProcessedStack
:
:
Module
>
mModules
;
std
:
:
vector
<
Stack
>
mStacks
;
size_t
mNextIndex
;
size_t
mMaxStacksCount
;
}
;
JSObject
*
CreateJSStackObject
(
JSContext
*
cx
const
CombinedStacks
&
stacks
)
;
}
}
#
endif
