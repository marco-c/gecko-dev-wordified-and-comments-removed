"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
HybridContentTelemetry
"
]
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
TelemetryUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
let
HybridContentTelemetry
=
{
_logger
:
null
_observerInstalled
:
false
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
"
Toolkit
.
Telemetry
"
"
HybridContentTelemetry
:
:
"
)
;
}
return
this
.
_logger
;
}
_lazyObserverInit
(
)
{
if
(
this
.
_observerInstalled
)
{
return
;
}
this
.
_log
.
trace
(
"
_lazyObserverInit
-
installing
the
pref
observers
.
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_uploadEnabled
"
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
(
)
=
>
this
.
_broadcastPolicyUpdate
(
)
)
;
this
.
_observerInstalled
=
true
;
}
onTelemetryMessage
(
aMessage
aData
)
{
if
(
!
this
.
_hybridContentEnabled
)
{
this
.
_log
.
trace
(
"
onTelemetryMessage
-
hybrid
content
telemetry
is
disabled
.
"
)
;
return
;
}
this
.
_log
.
trace
(
"
onTelemetryMessage
-
Message
received
dispatching
API
call
.
"
)
;
if
(
!
aData
|
|
!
(
"
data
"
in
aData
)
|
|
!
(
"
name
"
in
aData
)
|
|
typeof
aData
.
name
!
=
"
string
"
|
|
typeof
aData
.
data
!
=
"
object
"
)
{
this
.
_log
.
error
(
"
onTelemetryMessage
-
received
a
malformed
message
.
"
)
;
return
;
}
this
.
_dispatchAPICall
(
aData
.
name
aData
.
data
aMessage
)
;
}
_broadcastPolicyUpdate
(
)
{
this
.
_log
.
trace
(
_broadcastPolicyUpdate
-
New
value
is
{
this
.
_uploadEnabled
}
.
)
;
Services
.
mm
.
broadcastAsyncMessage
(
"
HybridContentTelemetry
:
PolicyChanged
"
{
canUpload
:
this
.
_uploadEnabled
}
)
;
}
_dispatchAPICall
(
aEndpoint
aData
aOriginalMessage
)
{
this
.
_log
.
info
(
_dispatchAPICall
-
processing
"
{
aEndpoint
}
"
.
)
;
try
{
switch
(
aEndpoint
)
{
case
"
init
"
:
this
.
_lazyObserverInit
(
)
;
this
.
_broadcastPolicyUpdate
(
)
;
break
;
case
"
registerEvents
"
:
Services
.
telemetry
.
registerEvents
(
aData
.
category
aData
.
eventData
)
;
break
;
case
"
recordEvent
"
:
let
check
=
(
data
key
)
=
>
key
in
data
&
&
typeof
data
[
key
]
!
=
"
undefined
"
;
Services
.
telemetry
.
recordEvent
(
aData
.
category
aData
.
method
aData
.
object
check
(
aData
"
value
"
)
?
aData
.
value
:
null
check
(
aData
"
extra
"
)
?
aData
.
extra
:
null
)
;
break
;
default
:
this
.
_log
.
error
(
_dispatchAPICall
-
unknown
"
{
aEndpoint
}
"
"
API
call
.
)
;
}
}
catch
(
e
)
{
this
.
_log
.
error
(
_dispatchAPICall
-
error
executing
"
{
aEndpoint
}
"
.
e
)
;
}
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
HybridContentTelemetry
"
_hybridContentEnabled
"
TelemetryUtils
.
Preferences
.
HybridContentEnabled
false
)
;
