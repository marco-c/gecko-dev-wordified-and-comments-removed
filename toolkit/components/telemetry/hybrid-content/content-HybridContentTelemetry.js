"
use
strict
"
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
TelemetryUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
TelemetryPrefs
=
TelemetryUtils
.
Preferences
;
const
HCT_PERMISSION
=
"
hc_telemetry
"
;
const
HCT_POLICY_CHANGE_MSG
=
"
HybridContentTelemetry
:
PolicyChanged
"
;
var
HybridContentTelemetryListener
=
{
_logger
:
null
_hasListener
:
false
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
"
Toolkit
.
Telemetry
"
"
HybridContentTelemetryListener
:
:
"
)
;
}
return
this
.
_logger
;
}
isTrustedOrigin
(
aEvent
)
{
if
(
aEvent
&
&
(
!
(
"
ownerGlobal
"
in
aEvent
.
target
)
|
|
aEvent
.
target
.
ownerGlobal
!
=
content
)
)
{
return
false
;
}
const
principal
=
aEvent
?
aEvent
.
target
.
ownerGlobal
.
document
.
nodePrincipal
:
content
.
document
.
nodePrincipal
;
if
(
principal
.
isSystemPrincipal
)
{
return
true
;
}
const
allowedSchemes
=
[
"
https
"
"
about
"
]
;
if
(
!
allowedSchemes
.
includes
(
principal
.
URI
.
scheme
)
)
{
return
false
;
}
let
permission
=
Services
.
perms
.
testPermissionFromPrincipal
(
principal
HCT_PERMISSION
)
;
if
(
permission
=
=
Services
.
perms
.
ALLOW_ACTION
)
{
return
true
;
}
return
false
;
}
handleEvent
(
event
)
{
const
originNotTrusted
=
!
this
.
isTrustedOrigin
(
event
)
;
if
(
!
this
.
_hybridContentEnabled
|
|
originNotTrusted
)
{
this
.
_log
.
warn
(
handleEvent
-
hct
disabled
{
!
this
.
_hybridContentEnabled
}
+
untrusted
origin
{
originNotTrusted
}
.
)
;
let
errorEvent
=
Cu
.
cloneInto
(
{
bubbles
:
true
detail
:
{
}
}
content
)
;
content
.
document
.
dispatchEvent
(
new
content
.
document
.
defaultView
.
CustomEvent
(
"
mozTelemetryUntrustedOrigin
"
errorEvent
)
)
;
return
;
}
if
(
!
event
|
|
!
(
"
detail
"
in
event
)
|
|
!
(
"
name
"
in
event
.
detail
)
|
|
!
(
"
data
"
in
event
.
detail
)
|
|
typeof
event
.
detail
.
name
!
=
"
string
"
|
|
typeof
event
.
detail
.
data
!
=
"
object
"
)
{
this
.
_log
.
error
(
"
handleEvent
-
received
a
malformed
message
.
"
)
;
return
;
}
if
(
!
this
.
_hasListener
)
{
addMessageListener
(
HCT_POLICY_CHANGE_MSG
this
)
;
this
.
_hasListener
=
true
;
}
sendAsyncMessage
(
"
HybridContentTelemetry
:
onTelemetryMessage
"
{
name
:
event
.
detail
.
name
data
:
event
.
detail
.
data
}
)
;
}
receiveMessage
(
aMessage
)
{
if
(
!
this
.
isTrustedOrigin
(
)
)
{
this
.
_log
.
warn
(
"
receiveMessage
-
accessing
telemetry
from
an
untrusted
origin
.
"
)
;
return
;
}
if
(
aMessage
.
name
!
=
HCT_POLICY_CHANGE_MSG
|
|
!
(
"
data
"
in
aMessage
)
|
|
!
(
"
canUpload
"
in
aMessage
.
data
)
|
|
typeof
aMessage
.
data
.
canUpload
!
=
"
boolean
"
)
{
this
.
_log
.
warn
(
"
receiveMessage
-
received
an
unexpected
message
.
"
)
;
return
;
}
let
event
=
Cu
.
cloneInto
(
{
bubbles
:
true
detail
:
{
canUpload
:
aMessage
.
data
.
canUpload
}
}
content
)
;
content
.
document
.
dispatchEvent
(
new
content
.
document
.
defaultView
.
CustomEvent
(
"
mozTelemetryPolicyChange
"
event
)
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
HybridContentTelemetryListener
"
_hybridContentEnabled
"
TelemetryUtils
.
Preferences
.
HybridContentEnabled
false
)
;
addEventListener
(
"
mozTelemetry
"
HybridContentTelemetryListener
false
true
)
;
