#
ifndef
mozilla_BackgroundHangTelemetry_h
#
define
mozilla_BackgroundHangTelemetry_h
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
HangAnnotations
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
CombinedStacks
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
jsapi
.
h
"
namespace
mozilla
{
namespace
Telemetry
{
static
const
uint32_t
kMaximumNativeHangStacks
=
300
;
static
const
size_t
kTimeHistogramBuckets
=
8
*
sizeof
(
PRIntervalTime
)
;
class
TimeHistogram
:
public
mozilla
:
:
Array
<
uint32_t
kTimeHistogramBuckets
>
{
public
:
TimeHistogram
(
)
{
mozilla
:
:
PodArrayZero
(
*
this
)
;
}
uint32_t
GetBucketMin
(
size_t
aBucket
)
const
{
MOZ_ASSERT
(
aBucket
<
ArrayLength
(
*
this
)
)
;
return
(
1u
<
<
aBucket
)
&
~
1u
;
}
uint32_t
GetBucketMax
(
size_t
aBucket
)
const
{
MOZ_ASSERT
(
aBucket
<
ArrayLength
(
*
this
)
)
;
return
(
1u
<
<
(
aBucket
+
1u
)
)
-
1u
;
}
void
Add
(
PRIntervalTime
aTime
)
;
}
;
typedef
std
:
:
vector
<
uintptr_t
>
NativeHangStack
;
class
HangStack
{
public
:
static
const
size_t
sMaxInlineStorage
=
8
;
static
const
size_t
sMaxNativeFrames
=
150
;
private
:
typedef
mozilla
:
:
Vector
<
const
char
*
sMaxInlineStorage
>
Impl
;
Impl
mImpl
;
mozilla
:
:
Vector
<
char
0
>
mBuffer
;
public
:
HangStack
(
)
{
}
HangStack
(
HangStack
&
&
aOther
)
:
mImpl
(
mozilla
:
:
Move
(
aOther
.
mImpl
)
)
mBuffer
(
mozilla
:
:
Move
(
aOther
.
mBuffer
)
)
{
}
HangStack
&
operator
=
(
HangStack
&
&
aOther
)
{
mImpl
=
mozilla
:
:
Move
(
aOther
.
mImpl
)
;
mBuffer
=
mozilla
:
:
Move
(
aOther
.
mBuffer
)
;
return
*
this
;
}
bool
operator
=
=
(
const
HangStack
&
aOther
)
const
{
for
(
size_t
i
=
0
;
i
<
length
(
)
;
i
+
+
)
{
if
(
!
IsSameAsEntry
(
operator
[
]
(
i
)
aOther
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
bool
operator
!
=
(
const
HangStack
&
aOther
)
const
{
return
!
operator
=
=
(
aOther
)
;
}
const
char
*
&
operator
[
]
(
size_t
aIndex
)
{
return
mImpl
[
aIndex
]
;
}
const
char
*
const
&
operator
[
]
(
size_t
aIndex
)
const
{
return
mImpl
[
aIndex
]
;
}
size_t
capacity
(
)
const
{
return
mImpl
.
capacity
(
)
;
}
size_t
length
(
)
const
{
return
mImpl
.
length
(
)
;
}
bool
empty
(
)
const
{
return
mImpl
.
empty
(
)
;
}
bool
canAppendWithoutRealloc
(
size_t
aNeeded
)
const
{
return
mImpl
.
canAppendWithoutRealloc
(
aNeeded
)
;
}
void
infallibleAppend
(
const
char
*
aEntry
)
{
mImpl
.
infallibleAppend
(
aEntry
)
;
}
bool
reserve
(
size_t
aRequest
)
{
return
mImpl
.
reserve
(
aRequest
)
;
}
const
char
*
*
begin
(
)
{
return
mImpl
.
begin
(
)
;
}
const
char
*
const
*
begin
(
)
const
{
return
mImpl
.
begin
(
)
;
}
const
char
*
*
end
(
)
{
return
mImpl
.
end
(
)
;
}
const
char
*
const
*
end
(
)
const
{
return
mImpl
.
end
(
)
;
}
const
char
*
&
back
(
)
{
return
mImpl
.
back
(
)
;
}
void
erase
(
const
char
*
*
aEntry
)
{
mImpl
.
erase
(
aEntry
)
;
}
void
erase
(
const
char
*
*
aBegin
const
char
*
*
aEnd
)
{
mImpl
.
erase
(
aBegin
aEnd
)
;
}
void
clear
(
)
{
mImpl
.
clear
(
)
;
mBuffer
.
clear
(
)
;
}
bool
IsInBuffer
(
const
char
*
aEntry
)
const
{
return
aEntry
>
=
mBuffer
.
begin
(
)
&
&
aEntry
<
mBuffer
.
end
(
)
;
}
bool
IsSameAsEntry
(
const
char
*
aEntry
const
char
*
aOther
)
const
{
return
IsInBuffer
(
aEntry
)
?
!
strcmp
(
aEntry
aOther
)
:
(
aEntry
=
=
aOther
)
;
}
size_t
AvailableBufferSize
(
)
const
{
return
mBuffer
.
capacity
(
)
-
mBuffer
.
length
(
)
;
}
bool
EnsureBufferCapacity
(
size_t
aCapacity
)
{
return
mBuffer
.
reserve
(
aCapacity
)
&
&
mBuffer
.
reserve
(
mBuffer
.
capacity
(
)
)
;
}
const
char
*
InfallibleAppendViaBuffer
(
const
char
*
aText
size_t
aLength
)
;
const
char
*
AppendViaBuffer
(
const
char
*
aText
size_t
aLength
)
;
}
;
class
HangHistogram
:
public
TimeHistogram
{
public
:
static
const
uint32_t
NO_NATIVE_STACK_INDEX
=
UINT32_MAX
;
private
:
static
uint32_t
GetHash
(
const
HangStack
&
aStack
)
;
HangStack
mStack
;
uint32_t
mNativeStackIndex
;
const
uint32_t
mHash
;
HangMonitor
:
:
HangAnnotationsVector
mAnnotations
;
nsCString
mRunnableName
;
public
:
explicit
HangHistogram
(
HangStack
&
&
aStack
const
nsACString
&
aRunnableName
)
:
mStack
(
mozilla
:
:
Move
(
aStack
)
)
mNativeStackIndex
(
NO_NATIVE_STACK_INDEX
)
mHash
(
GetHash
(
mStack
)
)
mRunnableName
(
aRunnableName
)
{
}
HangHistogram
(
HangHistogram
&
&
aOther
)
:
TimeHistogram
(
mozilla
:
:
Move
(
aOther
)
)
mStack
(
mozilla
:
:
Move
(
aOther
.
mStack
)
)
mNativeStackIndex
(
mozilla
:
:
Move
(
aOther
.
mNativeStackIndex
)
)
mHash
(
mozilla
:
:
Move
(
aOther
.
mHash
)
)
mAnnotations
(
mozilla
:
:
Move
(
aOther
.
mAnnotations
)
)
mRunnableName
(
aOther
.
mRunnableName
)
{
}
bool
operator
=
=
(
const
HangHistogram
&
aOther
)
const
;
bool
operator
!
=
(
const
HangHistogram
&
aOther
)
const
{
return
!
operator
=
=
(
aOther
)
;
}
const
HangStack
&
GetStack
(
)
const
{
return
mStack
;
}
uint32_t
GetNativeStackIndex
(
)
const
{
return
mNativeStackIndex
;
}
void
SetNativeStackIndex
(
uint32_t
aIndex
)
{
MOZ_ASSERT
(
aIndex
!
=
NO_NATIVE_STACK_INDEX
)
;
mNativeStackIndex
=
aIndex
;
}
const
char
*
GetRunnableName
(
)
const
{
return
mRunnableName
.
get
(
)
;
}
const
HangMonitor
:
:
HangAnnotationsVector
&
GetAnnotations
(
)
const
{
return
mAnnotations
;
}
void
Add
(
PRIntervalTime
aTime
HangMonitor
:
:
HangAnnotationsPtr
aAnnotations
)
{
TimeHistogram
:
:
Add
(
aTime
)
;
if
(
aAnnotations
)
{
if
(
!
mAnnotations
.
append
(
Move
(
aAnnotations
)
)
)
{
MOZ_CRASH
(
)
;
}
}
}
}
;
class
ThreadHangStats
{
private
:
nsCString
mName
;
public
:
TimeHistogram
mActivity
;
mozilla
:
:
Vector
<
HangHistogram
4
>
mHangs
;
uint32_t
mNativeStackCnt
;
CombinedStacks
mCombinedStacks
;
explicit
ThreadHangStats
(
const
char
*
aName
)
:
mName
(
aName
)
mNativeStackCnt
(
0
)
mCombinedStacks
(
Telemetry
:
:
kMaximumNativeHangStacks
)
{
}
ThreadHangStats
(
ThreadHangStats
&
&
aOther
)
:
mName
(
mozilla
:
:
Move
(
aOther
.
mName
)
)
mActivity
(
mozilla
:
:
Move
(
aOther
.
mActivity
)
)
mHangs
(
mozilla
:
:
Move
(
aOther
.
mHangs
)
)
mNativeStackCnt
(
aOther
.
mNativeStackCnt
)
mCombinedStacks
(
mozilla
:
:
Move
(
aOther
.
mCombinedStacks
)
)
{
aOther
.
mNativeStackCnt
=
0
;
}
const
char
*
GetName
(
)
const
{
return
mName
.
get
(
)
;
}
}
;
JSObject
*
CreateJSThreadHangStats
(
JSContext
*
cx
const
Telemetry
:
:
ThreadHangStats
&
thread
)
;
}
}
#
endif
