from
telemetry_harness
.
testcase
import
TelemetryTestCase
from
telemetry_harness
.
ping_filters
import
(
    
MAIN_ENVIRONMENT_CHANGE_PING
    
MAIN_SHUTDOWN_PING
)
class
TestSubsessionManagement
(
TelemetryTestCase
)
:
    
"
"
"
Tests
for
Firefox
Telemetry
subsession
management
.
"
"
"
    
def
test_subsession_management
(
self
)
:
        
"
"
"
Test
for
Firefox
Telemetry
subsession
management
.
"
"
"
        
with
self
.
new_tab
(
)
:
            
pass
        
ping1
=
self
.
wait_for_ping
(
self
.
restart_browser
MAIN_SHUTDOWN_PING
)
        
client_id
=
ping1
[
"
clientId
"
]
        
self
.
assertIsValidUUID
(
client_id
)
        
ping1_info
=
ping1
[
"
payload
"
]
[
"
info
"
]
        
self
.
assertEqual
(
ping1_info
[
"
reason
"
]
"
shutdown
"
)
        
s1_session_id
=
ping1_info
[
"
sessionId
"
]
        
self
.
assertNotEqual
(
s1_session_id
"
"
)
        
s1_s1_subsession_id
=
ping1_info
[
"
subsessionId
"
]
        
self
.
assertNotEqual
(
s1_s1_subsession_id
"
"
)
        
self
.
assertIsNone
(
ping1_info
[
"
previousSessionId
"
]
)
        
self
.
assertIsNone
(
ping1_info
[
"
previousSubsessionId
"
]
)
        
self
.
assertEqual
(
ping1_info
[
"
subsessionCounter
"
]
1
)
        
self
.
assertEqual
(
ping1_info
[
"
profileSubsessionCounter
"
]
1
)
        
scalars1
=
ping1
[
"
payload
"
]
[
"
processes
"
]
[
"
parent
"
]
[
"
scalars
"
]
        
self
.
assertNotIn
(
"
browser
.
engagement
.
window_open_event_count
"
scalars1
)
        
self
.
assertEqual
(
scalars1
[
"
browser
.
engagement
.
tab_open_event_count
"
]
1
)
        
ping2
=
self
.
wait_for_ping
(
self
.
install_addon
MAIN_ENVIRONMENT_CHANGE_PING
)
        
[
addon_id
]
=
self
.
addon_ids
        
self
.
assertEqual
(
ping2
[
"
clientId
"
]
client_id
)
        
ping2_info
=
ping2
[
"
payload
"
]
[
"
info
"
]
        
self
.
assertEqual
(
ping2_info
[
"
reason
"
]
"
environment
-
change
"
)
        
s2_session_id
=
ping2_info
[
"
sessionId
"
]
        
self
.
assertNotEqual
(
s2_session_id
s1_session_id
)
        
s2_s1_subsession_id
=
ping2_info
[
"
subsessionId
"
]
        
self
.
assertNotEqual
(
s2_s1_subsession_id
s1_s1_subsession_id
)
        
self
.
assertEqual
(
ping2_info
[
"
previousSessionId
"
]
s1_session_id
)
        
self
.
assertEqual
(
ping2_info
[
"
previousSubsessionId
"
]
s1_s1_subsession_id
)
        
self
.
assertEqual
(
ping2_info
[
"
subsessionCounter
"
]
1
)
        
self
.
assertEqual
(
ping2_info
[
"
profileSubsessionCounter
"
]
2
)
        
scalars2
=
ping2
[
"
payload
"
]
[
"
processes
"
]
[
"
parent
"
]
[
"
scalars
"
]
        
self
.
assertNotIn
(
"
browser
.
engagement
.
window_open_event_count
"
scalars2
)
        
self
.
assertNotIn
(
"
browser
.
engagement
.
tab_open_event_count
"
scalars2
)
        
ping3
=
self
.
wait_for_ping
(
self
.
restart_browser
MAIN_SHUTDOWN_PING
)
        
self
.
assertEqual
(
ping3
[
"
clientId
"
]
client_id
)
        
ping3_info
=
ping3
[
"
payload
"
]
[
"
info
"
]
        
self
.
assertEqual
(
ping3_info
[
"
reason
"
]
"
shutdown
"
)
        
self
.
assertEqual
(
ping3_info
[
"
sessionId
"
]
s2_session_id
)
        
s2_s2_subsession_id
=
ping3_info
[
"
subsessionId
"
]
        
self
.
assertNotEqual
(
s2_s2_subsession_id
s1_s1_subsession_id
)
        
self
.
assertNotEqual
(
s2_s2_subsession_id
s2_s1_subsession_id
)
        
self
.
assertEqual
(
ping3_info
[
"
previousSessionId
"
]
s1_session_id
)
        
self
.
assertEqual
(
ping3_info
[
"
previousSubsessionId
"
]
s2_s1_subsession_id
)
        
self
.
assertEqual
(
ping3_info
[
"
subsessionCounter
"
]
2
)
        
self
.
assertEqual
(
ping3_info
[
"
profileSubsessionCounter
"
]
3
)
        
scalars3
=
ping3
[
"
payload
"
]
[
"
processes
"
]
[
"
parent
"
]
[
"
scalars
"
]
        
self
.
assertNotIn
(
"
browser
.
engagement
.
window_open_event_count
"
scalars3
)
        
self
.
assertNotIn
(
"
browser
.
engagement
.
tab_open_event_count
"
scalars3
)
        
active_addons
=
ping3
[
"
environment
"
]
[
"
addons
"
]
[
"
activeAddons
"
]
        
self
.
assertIn
(
addon_id
active_addons
)
