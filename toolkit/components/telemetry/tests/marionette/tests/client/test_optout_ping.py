from
telemetry_harness
.
testcase
import
TelemetryTestCase
from
telemetry_harness
.
ping_filters
import
ANY_PING
OPTOUT_PING
FIRST_SHUTDOWN_PING
class
TestOptoutPing
(
TelemetryTestCase
)
:
    
"
"
"
Tests
for
"
optout
"
ping
.
"
"
"
    
def
disable_telemetry
(
self
)
:
        
self
.
marionette
.
set_pref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
False
)
    
def
enable_telemetry
(
self
)
:
        
self
.
marionette
.
set_pref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
True
)
    
def
test_optout_ping
(
self
)
:
        
"
"
"
Test
for
"
optout
"
ping
.
"
"
"
        
client_id
=
self
.
wait_for_ping
(
self
.
install_addon
ANY_PING
)
[
"
clientId
"
]
        
self
.
assertIsValidUUID
(
client_id
)
        
optout_ping
=
self
.
wait_for_ping
(
self
.
disable_telemetry
OPTOUT_PING
)
        
self
.
assertIsNotNone
(
optout_ping
)
        
self
.
assertNotIn
(
"
clientId
"
optout_ping
)
        
self
.
assertIn
(
"
payload
"
optout_ping
)
        
self
.
assertNotIn
(
"
environment
"
optout_ping
[
"
payload
"
]
)
        
self
.
assertEqual
(
self
.
ping_server
.
pings
[
-
1
]
optout_ping
)
        
"
"
"
Test
what
happens
when
the
user
opts
back
in
"
"
"
        
self
.
enable_telemetry
(
)
        
shutdown_ping
=
self
.
wait_for_ping
(
self
.
restart_browser
FIRST_SHUTDOWN_PING
)
        
self
.
assertIn
(
"
clientId
"
shutdown_ping
)
        
self
.
assertIsValidUUID
(
shutdown_ping
[
"
clientId
"
]
)
        
self
.
assertNotEqual
(
shutdown_ping
[
"
clientId
"
]
client_id
)
        
self
.
assertIn
(
"
payload
"
shutdown_ping
)
        
self
.
assertIn
(
"
processes
"
shutdown_ping
[
"
payload
"
]
)
        
self
.
assertIn
(
"
parent
"
shutdown_ping
[
"
payload
"
]
[
"
processes
"
]
)
        
self
.
assertIn
(
"
scalars
"
shutdown_ping
[
"
payload
"
]
[
"
processes
"
]
[
"
parent
"
]
)
        
scalars
=
shutdown_ping
[
"
payload
"
]
[
"
processes
"
]
[
"
parent
"
]
[
"
scalars
"
]
        
self
.
assertIn
(
"
telemetry
.
data_upload_optin
"
scalars
)
        
self
.
assertTrue
(
scalars
[
"
telemetry
.
data_upload_optin
"
]
)
