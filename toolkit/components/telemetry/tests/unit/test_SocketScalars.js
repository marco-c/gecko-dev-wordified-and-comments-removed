const
{
TelemetryController
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
const
{
ContentTaskUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
ContentTaskUtils
.
sys
.
mjs
"
)
;
const
SOCKET_ONLY_UINT_SCALAR
=
"
telemetry
.
test
.
socket_only_uint
"
;
async
function
waitForSocketScalars
(
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
const
scalars
=
Telemetry
.
getSnapshotForScalars
(
"
main
"
false
)
;
return
Object
.
keys
(
scalars
)
.
includes
(
"
socket
"
)
;
}
"
Waiting
for
socket
scalars
to
have
been
set
"
)
;
}
add_task
(
async
function
test_scalars_in_socket_process
(
)
{
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
"
network
.
process
.
enabled
"
)
"
Socket
process
should
be
enabled
"
)
;
do_get_profile
(
true
)
;
await
TelemetryController
.
testSetup
(
)
;
Services
.
io
.
socketProcessTelemetryPing
(
)
;
await
waitForSocketScalars
(
)
;
Assert
.
equal
(
Telemetry
.
getSnapshotForScalars
(
"
main
"
false
)
.
socket
[
SOCKET_ONLY_UINT_SCALAR
]
42
{
SOCKET_ONLY_UINT_SCALAR
}
must
have
the
correct
value
(
socket
process
)
.
)
;
}
)
;
