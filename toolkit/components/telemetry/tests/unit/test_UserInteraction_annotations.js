"
use
strict
"
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
const
{
TelemetryUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
const
HANG_TIME
=
1000
;
const
TEST_USER_INTERACTION_ID
=
"
testing
.
interaction
"
;
const
TEST_CLOBBERED_USER_INTERACTION_ID
=
{
TEST_USER_INTERACTION_ID
}
(
clobbered
)
;
const
TEST_VALUE_1
=
"
some
value
"
;
const
TEST_VALUE_2
=
"
some
other
value
"
;
const
TEST_ADDITIONAL_TEXT_1
=
"
some
additional
text
"
;
const
TEST_ADDITIONAL_TEXT_2
=
"
some
other
additional
text
"
;
async
function
hangAndWaitForReport
(
expectTestAnnotation
)
{
let
hangPromise
=
TestUtils
.
topicObserved
(
"
bhr
-
thread
-
hang
"
subject
=
>
{
let
hang
=
subject
.
QueryInterface
(
Ci
.
nsIHangDetails
)
;
if
(
hang
.
thread
!
=
"
Gecko
"
)
{
return
false
;
}
if
(
expectTestAnnotation
)
{
return
hang
.
annotations
.
some
(
annotation
=
>
annotation
[
0
]
.
startsWith
(
TEST_USER_INTERACTION_ID
)
)
;
}
return
hang
.
annotations
.
every
(
annotation
=
>
annotation
[
0
]
!
=
TEST_USER_INTERACTION_ID
)
;
}
)
;
executeSoon
(
(
)
=
>
{
let
startTime
=
Date
.
now
(
)
;
while
(
Date
.
now
(
)
-
startTime
<
HANG_TIME
)
{
}
}
)
;
let
[
report
]
=
await
hangPromise
;
return
report
;
}
function
ensureProfilerInitialized
(
)
{
if
(
!
Services
.
profiler
.
CanProfile
(
)
)
{
return
false
;
}
startProfiler
(
)
;
stopProfiler
(
)
;
return
true
;
}
function
stopProfiler
(
)
{
Services
.
profiler
.
StopProfiler
(
)
;
}
function
startProfiler
(
)
{
Services
.
profiler
.
StartProfiler
(
1000
10
[
"
stackwalk
"
]
)
;
}
function
markerCount
(
profile
value
additionalText
)
{
let
expectedName
=
value
;
if
(
additionalText
)
{
expectedName
=
[
value
additionalText
]
.
join
(
"
"
)
;
}
let
thread0
=
profile
.
threads
[
0
]
;
let
stringTable
=
thread0
.
stringTable
;
let
markerStringIndex
=
stringTable
.
indexOf
(
TEST_USER_INTERACTION_ID
)
;
let
markers
=
thread0
.
markers
.
data
.
filter
(
markerData
=
>
{
return
(
markerData
[
0
]
=
=
markerStringIndex
&
&
markerData
[
5
]
.
name
=
=
expectedName
)
;
}
)
;
return
markers
.
length
;
}
function
hasHangAnnotation
(
report
value
)
{
return
report
.
annotations
.
some
(
annotation
=
>
{
return
annotation
[
0
]
=
=
TEST_USER_INTERACTION_ID
&
&
annotation
[
1
]
=
=
value
;
}
)
;
}
function
hasClobberedHangAnnotation
(
report
value
)
{
return
report
.
annotations
.
some
(
annotation
=
>
{
return
(
annotation
[
0
]
=
=
TEST_CLOBBERED_USER_INTERACTION_ID
&
&
annotation
[
1
]
=
=
value
)
;
}
)
;
}
add_task
(
async
function
test_recording_annotations_and_markers
(
)
{
if
(
!
Services
.
telemetry
.
canRecordExtended
)
{
Assert
.
ok
(
"
Hang
reporting
not
enabled
.
"
)
;
return
;
}
if
(
!
ensureProfilerInitialized
(
)
)
{
return
;
}
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
OverridePreRelease
true
)
;
startProfiler
(
)
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
)
;
let
report
=
await
hangAndWaitForReport
(
true
)
;
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
)
;
let
profile
=
Services
.
profiler
.
getProfileData
(
)
;
stopProfiler
(
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_1
)
1
"
Should
have
found
the
marker
in
the
profile
.
"
)
;
Assert
.
ok
(
hasHangAnnotation
(
report
TEST_VALUE_1
)
"
Should
have
the
BHR
annotation
set
.
"
)
;
startProfiler
(
)
;
report
=
await
hangAndWaitForReport
(
false
)
;
profile
=
Services
.
profiler
.
getProfileData
(
)
;
stopProfiler
(
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_1
)
0
"
Should
not
find
the
marker
in
the
profile
.
"
)
;
Assert
.
ok
(
!
hasHangAnnotation
(
report
)
"
Should
not
have
the
BHR
annotation
set
.
"
)
;
startProfiler
(
)
;
let
obj1
=
{
}
;
let
obj2
=
{
}
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
obj1
)
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_2
obj2
)
;
report
=
await
hangAndWaitForReport
(
true
)
;
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
obj1
TEST_ADDITIONAL_TEXT_1
)
;
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
obj2
TEST_ADDITIONAL_TEXT_2
)
;
profile
=
Services
.
profiler
.
getProfileData
(
)
;
stopProfiler
(
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_1
TEST_ADDITIONAL_TEXT_1
)
1
"
Should
have
found
first
marker
in
the
profile
.
"
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_2
TEST_ADDITIONAL_TEXT_2
)
1
"
Should
have
found
second
marker
in
the
profile
.
"
)
;
Assert
.
ok
(
hasHangAnnotation
(
report
TEST_VALUE_1
)
"
Should
have
the
first
BHR
annotation
set
.
"
)
;
Assert
.
ok
(
hasHangAnnotation
(
report
TEST_VALUE_2
)
"
Should
have
the
second
BHR
annotation
set
.
"
)
;
}
)
;
add_task
(
async
function
test_updating_annotations_and_markers
(
)
{
if
(
!
Services
.
telemetry
.
canRecordExtended
)
{
Assert
.
ok
(
"
Hang
reporting
not
enabled
.
"
)
;
return
;
}
if
(
!
ensureProfilerInitialized
(
)
)
{
return
;
}
startProfiler
(
)
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
)
;
UserInteraction
.
update
(
TEST_USER_INTERACTION_ID
TEST_VALUE_2
)
;
let
report
=
await
hangAndWaitForReport
(
true
)
;
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
)
;
let
profile
=
Services
.
profiler
.
getProfileData
(
)
;
stopProfiler
(
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_1
)
0
"
Should
not
have
found
the
original
marker
in
the
profile
.
"
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_2
)
1
"
Should
have
found
the
updated
marker
in
the
profile
.
"
)
;
Assert
.
ok
(
!
hasHangAnnotation
(
report
TEST_VALUE_1
)
"
Should
not
have
the
original
BHR
annotation
set
.
"
)
;
Assert
.
ok
(
hasHangAnnotation
(
report
TEST_VALUE_2
)
"
Should
have
the
updated
BHR
annotation
set
.
"
)
;
startProfiler
(
)
;
let
obj1
=
{
}
;
let
obj2
=
{
}
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
obj1
)
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_2
obj2
)
;
UserInteraction
.
update
(
TEST_USER_INTERACTION_ID
TEST_VALUE_2
obj1
)
;
UserInteraction
.
update
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
obj2
)
;
report
=
await
hangAndWaitForReport
(
true
)
;
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
obj1
TEST_ADDITIONAL_TEXT_1
)
;
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
obj2
TEST_ADDITIONAL_TEXT_2
)
;
profile
=
Services
.
profiler
.
getProfileData
(
)
;
stopProfiler
(
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_2
TEST_ADDITIONAL_TEXT_1
)
1
"
Should
have
found
first
marker
in
the
profile
.
"
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_1
TEST_ADDITIONAL_TEXT_2
)
1
"
Should
have
found
second
marker
in
the
profile
.
"
)
;
Assert
.
ok
(
hasHangAnnotation
(
report
TEST_VALUE_1
)
"
Should
have
the
first
BHR
annotation
set
.
"
)
;
Assert
.
ok
(
hasHangAnnotation
(
report
TEST_VALUE_2
)
"
Should
have
the
second
BHR
annotation
set
.
"
)
;
}
)
;
add_task
(
async
function
test_cancelling_annotations_and_markers
(
)
{
if
(
!
Services
.
telemetry
.
canRecordExtended
)
{
Assert
.
ok
(
"
Hang
reporting
not
enabled
.
"
)
;
return
;
}
if
(
!
ensureProfilerInitialized
(
)
)
{
return
;
}
startProfiler
(
)
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
)
;
UserInteraction
.
cancel
(
TEST_USER_INTERACTION_ID
)
;
let
report
=
await
hangAndWaitForReport
(
false
)
;
let
profile
=
Services
.
profiler
.
getProfileData
(
)
;
stopProfiler
(
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_1
)
0
"
Should
not
have
found
the
marker
in
the
profile
.
"
)
;
Assert
.
ok
(
!
hasHangAnnotation
(
report
TEST_VALUE_1
)
"
Should
not
have
the
BHR
annotation
set
.
"
)
;
startProfiler
(
)
;
let
obj1
=
{
}
;
let
obj2
=
{
}
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
obj1
)
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_2
obj2
)
;
UserInteraction
.
cancel
(
TEST_USER_INTERACTION_ID
obj1
)
;
UserInteraction
.
cancel
(
TEST_USER_INTERACTION_ID
obj2
)
;
report
=
await
hangAndWaitForReport
(
false
)
;
Assert
.
ok
(
!
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
obj1
)
"
Finishing
a
canceled
UserInteraction
should
return
false
.
"
)
;
Assert
.
ok
(
!
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
obj2
)
"
Finishing
a
canceled
UserInteraction
should
return
false
.
"
)
;
profile
=
Services
.
profiler
.
getProfileData
(
)
;
stopProfiler
(
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_1
)
0
"
Should
not
have
found
the
first
marker
in
the
profile
.
"
)
;
Assert
.
equal
(
markerCount
(
profile
TEST_VALUE_2
)
0
"
Should
not
have
found
the
second
marker
in
the
profile
.
"
)
;
Assert
.
ok
(
!
hasHangAnnotation
(
report
TEST_VALUE_1
)
"
Should
not
have
the
first
BHR
annotation
set
.
"
)
;
Assert
.
ok
(
!
hasHangAnnotation
(
report
TEST_VALUE_2
)
"
Should
not
have
the
second
BHR
annotation
set
.
"
)
;
}
)
;
add_task
(
async
function
test_clobbered_annotations
(
)
{
if
(
!
Services
.
telemetry
.
canRecordExtended
)
{
Assert
.
ok
(
"
Hang
reporting
not
enabled
.
"
)
;
return
;
}
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_1
)
;
UserInteraction
.
start
(
TEST_USER_INTERACTION_ID
TEST_VALUE_2
)
;
let
report
=
await
hangAndWaitForReport
(
true
)
;
Assert
.
ok
(
UserInteraction
.
finish
(
TEST_USER_INTERACTION_ID
)
"
Should
have
been
able
to
finish
the
UserInteraction
.
"
)
;
Assert
.
ok
(
!
hasHangAnnotation
(
report
TEST_VALUE_1
)
"
Should
not
have
the
original
BHR
annotation
set
.
"
)
;
Assert
.
ok
(
hasClobberedHangAnnotation
(
report
TEST_VALUE_2
)
"
Should
have
the
clobber
BHR
annotation
set
.
"
)
;
}
)
;
