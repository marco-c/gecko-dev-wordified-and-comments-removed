"
use
strict
"
;
const
{
Preferences
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
TelemetrySend
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySend
.
jsm
"
)
;
const
{
TelemetryStorage
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
jsm
"
)
;
const
{
TelemetryUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
function
generateTestPingData
(
)
{
return
{
type
:
"
test
-
pingsender
-
type
"
id
:
TelemetryUtils
.
generateUUID
(
)
creationDate
:
new
Date
(
)
.
toISOString
(
)
version
:
4
payload
:
{
dummy
:
"
stuff
"
}
}
;
}
function
testSendingPings
(
pingPaths
)
{
const
url
=
"
http
:
/
/
localhost
:
"
+
PingServer
.
port
+
"
/
submit
/
telemetry
/
"
;
const
pings
=
pingPaths
.
map
(
path
=
>
{
return
{
url
path
}
;
}
)
;
TelemetrySend
.
testRunPingSender
(
pings
(
_
topic
__
)
=
>
{
switch
(
topic
)
{
case
"
process
-
finished
"
:
Assert
.
ok
(
true
"
Pingsender
should
be
able
to
post
to
localhost
"
)
;
break
;
case
"
process
-
failed
"
:
Assert
.
ok
(
false
"
Pingsender
should
be
able
to
post
to
localhost
"
)
;
break
;
}
}
)
;
}
function
waitForPingDeletion
(
pingId
)
{
const
path
=
OS
.
Path
.
join
(
TelemetryStorage
.
pingDirectoryPath
pingId
)
;
let
checkFn
=
(
resolve
reject
)
=
>
setTimeout
(
(
)
=
>
{
OS
.
File
.
exists
(
path
)
.
then
(
exists
=
>
{
if
(
!
exists
)
{
Assert
.
ok
(
true
pingId
+
"
was
deleted
"
)
;
resolve
(
)
;
}
else
{
checkFn
(
resolve
reject
)
;
}
}
reject
)
;
}
250
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
checkFn
(
resolve
reject
)
)
;
}
add_task
(
async
function
setup
(
)
{
do_get_profile
(
true
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
true
)
;
PingServer
.
start
(
)
;
}
)
;
add_task
(
async
function
test_pingSender
(
)
{
const
data
=
generateTestPingData
(
)
;
await
TelemetryStorage
.
savePing
(
data
true
)
;
const
pingPath
=
OS
.
Path
.
join
(
TelemetryStorage
.
pingDirectoryPath
data
.
id
)
;
let
failingServer
=
new
HttpServer
(
)
;
let
deferred404Hit
=
PromiseUtils
.
defer
(
)
;
let
hitCount
=
0
;
failingServer
.
registerPathHandler
(
"
/
lookup_fail
"
(
metadata
response
)
=
>
{
response
.
setStatusLine
(
"
1
.
1
"
404
"
Not
Found
"
)
;
hitCount
+
+
;
if
(
hitCount
>
=
2
)
{
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
deferred404Hit
.
resolve
(
)
)
;
}
}
)
;
failingServer
.
start
(
-
1
)
;
const
errorUrl
=
"
http
:
/
/
localhost
:
"
+
failingServer
.
identity
.
primaryPort
+
"
/
lookup_fail
"
;
TelemetrySend
.
testRunPingSender
(
[
{
url
:
errorUrl
path
:
pingPath
}
]
)
;
TelemetrySend
.
testRunPingSender
(
[
{
url
:
errorUrl
path
:
pingPath
}
]
)
;
await
deferred404Hit
.
promise
;
Assert
.
ok
(
await
OS
.
File
.
exists
(
pingPath
)
"
The
pending
ping
must
not
be
deleted
if
we
fail
to
send
using
the
PingSender
"
)
;
testSendingPings
(
[
pingPath
]
)
;
let
req
=
await
PingServer
.
promiseNextRequest
(
)
;
let
ping
=
decodeRequestPayload
(
req
)
;
Assert
.
equal
(
req
.
getHeader
(
"
User
-
Agent
"
)
"
pingsender
/
1
.
0
"
"
Should
have
received
the
correct
user
agent
string
.
"
)
;
Assert
.
equal
(
req
.
getHeader
(
"
X
-
PingSender
-
Version
"
)
"
1
.
0
"
"
Should
have
received
the
correct
PingSender
version
string
.
"
)
;
Assert
.
equal
(
req
.
getHeader
(
"
Content
-
Encoding
"
)
"
gzip
"
"
Should
have
a
gzip
encoded
ping
.
"
)
;
Assert
.
ok
(
req
.
getHeader
(
"
Date
"
)
"
Should
have
received
a
Date
header
.
"
)
;
Assert
.
equal
(
ping
.
id
data
.
id
"
Should
have
received
the
correct
ping
id
.
"
)
;
Assert
.
equal
(
ping
.
type
data
.
type
"
Should
have
received
the
correct
ping
type
.
"
)
;
Assert
.
deepEqual
(
ping
.
payload
data
.
payload
"
Should
have
received
the
correct
payload
.
"
)
;
await
waitForPingDeletion
(
data
.
id
)
;
let
bannedUris
=
[
"
https
:
/
/
example
.
com
"
"
http
:
/
/
localhost
.
com
"
"
http
:
/
/
localHOST
.
com
"
"
http
:
/
/
localhost
example
.
com
"
"
http
:
/
/
localhost
:
bob
example
.
com
"
"
http
:
/
/
localhost
:
localhost
localhost
.
example
.
com
"
]
;
for
(
let
indx
in
bannedUris
)
{
TelemetrySend
.
testRunPingSender
(
[
{
url
:
bannedUris
[
indx
]
path
:
pingPath
}
]
(
_
topic
__
)
=
>
{
switch
(
topic
)
{
case
"
process
-
finished
"
:
Assert
.
equal
(
false
true
"
Pingsender
should
not
be
able
to
post
to
any
banned
urls
:
"
+
bannedUris
[
indx
]
)
;
break
;
case
"
process
-
failed
"
:
Assert
.
equal
(
true
true
"
Pingsender
should
not
be
able
to
post
to
any
banned
urls
:
"
+
bannedUris
[
indx
]
)
;
break
;
}
}
)
;
}
await
new
Promise
(
r
=
>
failingServer
.
stop
(
r
)
)
;
}
)
;
add_task
(
async
function
test_pingSender_multiple_pings
(
)
{
const
data
=
[
generateTestPingData
(
)
generateTestPingData
(
)
]
;
for
(
const
d
of
data
)
{
await
TelemetryStorage
.
savePing
(
d
true
)
;
}
const
pingPaths
=
data
.
map
(
d
=
>
OS
.
Path
.
join
(
TelemetryStorage
.
pingDirectoryPath
d
.
id
)
)
;
testSendingPings
(
pingPaths
)
;
for
(
const
d
of
data
)
{
let
req
=
await
PingServer
.
promiseNextRequest
(
)
;
let
ping
=
decodeRequestPayload
(
req
)
;
Assert
.
equal
(
ping
.
id
d
.
id
"
Should
have
received
the
correct
ping
id
.
"
)
;
}
for
(
const
d
of
data
)
{
await
waitForPingDeletion
(
d
.
id
)
;
}
}
)
;
add_task
(
async
function
cleanup
(
)
{
await
PingServer
.
stop
(
)
;
}
)
;
