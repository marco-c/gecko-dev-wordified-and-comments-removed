"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ContentTaskUtils
.
jsm
"
this
)
;
const
Telemetry
=
Services
.
telemetry
;
const
TelemetryGeckoView
=
Cc
[
"
mozilla
.
org
/
telemetry
/
geckoview
-
testing
;
1
"
]
.
createInstance
(
Ci
.
nsITelemetryGeckoViewTesting
)
;
async
function
run_in_child
(
aFileName
)
{
const
PREF_GECKOVIEW_MODE
=
"
toolkit
.
telemetry
.
isGeckoViewMode
"
;
const
currentValue
=
Services
.
prefs
.
getBoolPref
(
PREF_GECKOVIEW_MODE
false
)
;
Services
.
prefs
.
setBoolPref
(
PREF_GECKOVIEW_MODE
false
)
;
await
run_test_in_child
(
aFileName
)
;
Services
.
prefs
.
setBoolPref
(
PREF_GECKOVIEW_MODE
currentValue
)
;
}
function
waitGeckoViewLoadComplete
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
observe
(
)
{
Services
.
obs
.
removeObserver
(
observe
"
internal
-
telemetry
-
geckoview
-
load
-
complete
"
)
;
resolve
(
)
;
}
"
internal
-
telemetry
-
geckoview
-
load
-
complete
"
)
;
}
)
;
}
async
function
waitForHistogramSnapshotData
(
aHistogramName
aProcessName
aKeyed
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
const
data
=
aKeyed
?
Telemetry
.
getSnapshotForKeyedHistograms
(
"
main
"
false
)
:
Telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
;
return
aProcessName
in
data
&
&
aHistogramName
in
data
[
aProcessName
]
;
}
)
;
}
async
function
waitForScalarSnapshotData
(
aScalarName
aProcessName
aKeyed
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
const
data
=
aKeyed
?
Telemetry
.
getSnapshotForKeyedScalars
(
"
main
"
false
)
:
Telemetry
.
getSnapshotForScalars
(
"
main
"
false
)
;
return
aProcessName
in
data
&
&
aScalarName
in
data
[
aProcessName
]
;
}
)
;
}
if
(
runningInParent
)
{
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
OverridePreRelease
true
)
;
}
