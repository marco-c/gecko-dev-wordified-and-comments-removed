Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySession
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
ContentTaskUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
this
)
;
const
MESSAGE_CHILD_TEST_DONE
=
"
ChildTest
:
Done
"
;
const
PLATFORM_VERSION
=
"
1
.
9
.
2
"
;
const
APP_VERSION
=
"
1
"
;
const
APP_ID
=
"
xpcshell
tests
.
mozilla
.
org
"
;
const
APP_NAME
=
"
XPCShell
"
;
const
RECORDED_CONTENT_EVENTS
=
[
[
"
telemetry
.
test
"
"
content_only
"
"
object1
"
]
[
"
telemetry
.
test
"
"
main_and_content
"
"
object1
"
]
[
"
telemetry
.
test
"
"
content_only
"
"
object1
"
"
some
value
"
]
[
"
telemetry
.
test
"
"
content_only
"
"
object1
"
null
{
foo
:
"
x
"
bar
:
"
y
"
}
]
[
"
telemetry
.
test
"
"
content_only
"
"
object1
"
"
some
value
"
{
foo
:
"
x
"
bar
:
"
y
"
}
]
]
;
const
UNRECORDED_CONTENT_EVENTS
=
[
[
"
telemetry
.
test
"
"
main_only
"
"
object1
"
]
]
;
const
RECORDED_PARENT_EVENTS
=
[
[
"
telemetry
.
test
"
"
main_and_content
"
"
object1
"
]
[
"
telemetry
.
test
"
"
main_only
"
"
object1
"
]
]
;
const
UNRECORDED_PARENT_EVENTS
=
[
[
"
telemetry
.
test
"
"
content_only
"
"
object1
"
]
]
;
function
run_child_test
(
)
{
RECORDED_CONTENT_EVENTS
.
forEach
(
e
=
>
Telemetry
.
recordEvent
(
.
.
.
e
)
)
;
UNRECORDED_CONTENT_EVENTS
.
forEach
(
e
=
>
Telemetry
.
recordEvent
(
.
.
.
e
)
)
;
}
function
*
waitForContentEvents
(
)
{
yield
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
const
snapshot
=
Telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
false
)
;
return
Object
.
keys
(
snapshot
)
.
includes
(
"
tab
"
)
;
}
)
;
}
add_task
(
function
*
(
)
{
if
(
!
runningInParent
)
{
TelemetryController
.
testSetupContent
(
)
;
run_child_test
(
)
;
do_send_remote_message
(
MESSAGE_CHILD_TEST_DONE
)
;
return
;
}
do_get_profile
(
true
)
;
loadAddonManager
(
APP_ID
APP_NAME
APP_VERSION
PLATFORM_VERSION
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
TelemetryEnabled
true
)
;
yield
TelemetryController
.
testSetup
(
)
;
yield
setEmptyPrefWatchlist
(
)
;
Telemetry
.
setEventRecordingEnabled
(
"
telemetry
.
test
"
true
)
;
const
timestampBeforeChildEvents
=
Telemetry
.
msSinceProcessStart
(
)
;
run_test_in_child
(
"
test_ChildEvents
.
js
"
)
;
yield
do_await_remote_message
(
MESSAGE_CHILD_TEST_DONE
)
;
yield
waitForContentEvents
(
)
;
const
timestampAfterChildEvents
=
Telemetry
.
msSinceProcessStart
(
)
;
RECORDED_PARENT_EVENTS
.
forEach
(
e
=
>
Telemetry
.
recordEvent
(
.
.
.
e
)
)
;
UNRECORDED_PARENT_EVENTS
.
forEach
(
e
=
>
Telemetry
.
recordEvent
(
.
.
.
e
)
)
;
const
payload
=
TelemetrySession
.
getPayload
(
"
environment
-
change
"
)
;
Assert
.
ok
(
"
processes
"
in
payload
"
Should
have
processes
section
"
)
;
Assert
.
ok
(
"
parent
"
in
payload
.
processes
"
Should
have
main
process
section
"
)
;
Assert
.
ok
(
"
events
"
in
payload
.
processes
.
parent
"
Main
process
section
should
have
events
.
"
)
;
Assert
.
ok
(
"
content
"
in
payload
.
processes
"
Should
have
child
process
section
"
)
;
Assert
.
ok
(
"
events
"
in
payload
.
processes
.
content
"
Child
process
section
should
have
events
.
"
)
;
let
contentEvents
=
payload
.
processes
.
content
.
events
.
map
(
e
=
>
e
.
slice
(
1
)
)
;
Assert
.
equal
(
contentEvents
.
length
RECORDED_CONTENT_EVENTS
.
length
"
Should
match
expected
event
count
.
"
)
;
for
(
let
i
=
0
;
i
<
RECORDED_CONTENT_EVENTS
.
length
;
+
+
i
)
{
Assert
.
deepEqual
(
contentEvents
[
i
]
RECORDED_CONTENT_EVENTS
[
i
]
"
Should
have
recorded
expected
event
.
"
)
;
}
let
parentEvents
=
payload
.
processes
.
parent
.
events
.
map
(
e
=
>
e
.
slice
(
1
)
)
;
Assert
.
equal
(
parentEvents
.
length
RECORDED_PARENT_EVENTS
.
length
"
Should
match
expected
event
count
.
"
)
;
for
(
let
i
=
0
;
i
<
RECORDED_PARENT_EVENTS
.
length
;
+
+
i
)
{
Assert
.
deepEqual
(
parentEvents
[
i
]
RECORDED_PARENT_EVENTS
[
i
]
"
Should
have
recorded
expected
event
.
"
)
;
}
let
contentTimestamps
=
payload
.
processes
.
content
.
events
.
map
(
e
=
>
e
[
0
]
)
;
let
parentTimestamps
=
payload
.
processes
.
parent
.
events
.
map
(
e
=
>
e
[
0
]
)
;
Assert
.
ok
(
contentTimestamps
.
every
(
ts
=
>
(
ts
>
Math
.
floor
(
timestampBeforeChildEvents
)
)
&
&
(
ts
<
timestampAfterChildEvents
)
)
"
All
content
event
timestamps
should
be
in
the
expected
time
range
.
"
)
;
Assert
.
ok
(
parentTimestamps
.
every
(
ts
=
>
(
ts
>
=
Math
.
floor
(
timestampAfterChildEvents
)
)
)
"
All
parent
event
timestamps
should
be
in
the
expected
time
range
.
"
)
;
let
snapshot
=
Telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
)
;
Assert
.
greaterOrEqual
(
Object
.
keys
(
snapshot
)
.
length
2
"
Should
have
events
from
at
least
two
processes
.
"
)
;
snapshot
=
Telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
)
;
Assert
.
equal
(
Object
.
keys
(
snapshot
)
.
length
0
"
Should
have
cleared
all
events
from
storage
.
"
)
;
}
)
;
