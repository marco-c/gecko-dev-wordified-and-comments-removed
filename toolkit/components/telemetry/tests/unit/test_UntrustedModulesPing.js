"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
UntrustedModulesPing
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
kDllName
=
"
modules
-
test
.
dll
"
;
let
gDllHandle
;
add_task
(
async
function
setup
(
)
{
do_get_profile
(
)
;
gDllHandle
=
ctypes
.
open
(
do_get_file
(
kDllName
)
.
path
)
;
Cc
[
"
mozilla
.
org
/
updates
/
timer
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
.
observe
(
null
"
utm
-
test
-
init
"
"
"
)
;
Preferences
.
set
(
"
toolkit
.
telemetry
.
untrustedModulesPing
.
frequency
"
0
)
;
Preferences
.
set
(
"
app
.
update
.
url
"
"
http
:
/
/
localhost
"
)
;
PingServer
.
start
(
)
;
Preferences
.
set
(
TelemetryUtils
.
Preferences
.
Server
"
http
:
/
/
localhost
:
"
+
PingServer
.
port
)
;
return
TelemetryController
.
testSetup
(
)
;
}
)
;
registerCleanupFunction
(
function
(
)
{
if
(
gDllHandle
)
{
gDllHandle
.
close
(
)
;
gDllHandle
=
null
;
}
return
PingServer
.
stop
(
)
;
}
)
;
add_task
(
async
function
test_send_ping
(
)
{
let
expectedModules
=
[
{
nameMatch
:
new
RegExp
(
kDllName
"
i
"
)
expectedTrusted
:
false
isStartup
:
false
wasFound
:
false
}
{
nameMatch
:
/
mozglue
.
dll
/
i
expectedTrusted
:
false
isStartup
:
true
wasFound
:
false
}
{
nameMatch
:
/
kernelbase
.
dll
/
i
expectedTrusted
:
true
isStartup
:
true
wasFound
:
false
}
]
;
let
found
;
while
(
true
)
{
found
=
await
PingServer
.
promiseNextPing
(
)
;
if
(
found
.
type
=
=
"
untrustedModules
"
)
{
break
;
}
}
Assert
.
ok
(
found
"
Untrusted
modules
ping
submitted
"
)
;
Assert
.
ok
(
found
.
environment
"
Ping
has
an
environment
"
)
;
Assert
.
ok
(
typeof
(
found
.
clientId
)
!
=
"
undefined
"
"
Ping
has
a
client
ID
"
)
;
Assert
.
equal
(
found
.
payload
.
structVersion
1
"
Version
is
correct
"
)
;
Assert
.
ok
(
found
.
payload
.
combinedStacks
"
'
combinedStacks
'
array
exists
"
)
;
Assert
.
ok
(
found
.
payload
.
events
"
'
events
'
array
exists
"
)
;
Assert
.
equal
(
found
.
payload
.
combinedStacks
.
stacks
.
length
found
.
payload
.
events
.
length
"
combinedStacks
.
length
=
=
events
.
length
"
)
;
for
(
let
event
of
found
.
payload
.
events
)
{
Assert
.
ok
(
event
.
modules
"
'
modules
'
array
exists
"
)
;
for
(
let
mod
of
event
.
modules
)
{
Assert
.
ok
(
typeof
(
mod
.
moduleName
)
!
=
"
undefined
"
Module
contains
moduleName
:
{
mod
.
moduleName
}
)
;
Assert
.
ok
(
typeof
(
mod
.
moduleTrustFlags
)
!
=
"
undefined
"
Module
contains
moduleTrustFlags
:
{
mod
.
moduleTrustFlags
}
)
;
Assert
.
ok
(
typeof
(
mod
.
baseAddress
)
!
=
"
undefined
"
"
Module
contains
baseAddress
"
)
;
Assert
.
ok
(
typeof
(
mod
.
loaderName
)
!
=
"
undefined
"
"
Module
contains
loaderName
"
)
;
for
(
let
x
of
expectedModules
)
{
if
(
x
.
nameMatch
.
test
(
mod
.
moduleName
)
)
{
x
.
wasFound
=
true
;
Assert
.
equal
(
x
.
isStartup
event
.
isStartup
isStartup
=
=
expected
for
module
:
{
x
.
nameMatch
.
source
}
)
;
}
}
}
}
for
(
let
x
of
expectedModules
)
{
Assert
.
equal
(
!
x
.
wasFound
x
.
expectedTrusted
Trustworthiness
=
=
expected
for
module
:
{
x
.
nameMatch
.
source
}
)
;
}
}
)
;
