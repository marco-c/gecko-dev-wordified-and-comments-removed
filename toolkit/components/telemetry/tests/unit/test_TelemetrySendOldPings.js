"
use
strict
"
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySend
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
OS
:
{
File
Path
Constants
}
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
{
}
)
;
const
ONE_MINUTE_MS
=
60
*
1000
;
const
OVERDUE_PING_FILE_AGE
=
TelemetrySend
.
OVERDUE_PING_FILE_AGE
+
ONE_MINUTE_MS
;
const
PING_SAVE_FOLDER
=
"
saved
-
telemetry
-
pings
"
;
const
PING_TIMEOUT_LENGTH
=
5000
;
const
OVERDUE_PINGS
=
6
;
const
OLD_FORMAT_PINGS
=
4
;
const
RECENT_PINGS
=
4
;
const
TOTAL_EXPECTED_PINGS
=
OVERDUE_PINGS
+
RECENT_PINGS
+
OLD_FORMAT_PINGS
;
var
gCreatedPings
=
0
;
var
gSeenPings
=
0
;
var
createSavedPings
=
async
function
(
aPingInfos
)
{
let
pingIds
=
[
]
;
let
now
=
Date
.
now
(
)
;
for
(
let
type
in
aPingInfos
)
{
let
num
=
aPingInfos
[
type
]
.
num
;
let
age
=
now
-
(
aPingInfos
[
type
]
.
age
|
|
0
)
;
for
(
let
i
=
0
;
i
<
num
;
+
+
i
)
{
let
pingId
=
await
TelemetryController
.
addPendingPing
(
"
test
-
ping
"
{
}
{
overwrite
:
true
}
)
;
if
(
aPingInfos
[
type
]
.
age
)
{
let
filePath
=
getSavePathForPingId
(
pingId
)
;
await
File
.
setDates
(
filePath
null
age
)
;
}
gCreatedPings
+
+
;
pingIds
.
push
(
pingId
)
;
}
}
return
pingIds
;
}
;
var
clearPings
=
async
function
(
aPingIds
)
{
for
(
let
pingId
of
aPingIds
)
{
await
TelemetryStorage
.
removePendingPing
(
pingId
)
;
}
}
;
function
fakePendingPingsQuota
(
aPendingQuota
)
{
let
storage
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
jsm
"
{
}
)
;
storage
.
Policy
.
getPendingPingsQuota
=
(
)
=
>
aPendingQuota
;
}
function
getSavePathForPingId
(
aPingId
)
{
return
Path
.
join
(
Constants
.
Path
.
profileDir
PING_SAVE_FOLDER
aPingId
)
;
}
function
assertReceivedPings
(
aExpectedNum
)
{
do_check_eq
(
gSeenPings
aExpectedNum
)
;
}
var
assertNotSaved
=
async
function
(
aPingIds
)
{
let
saved
=
0
;
for
(
let
id
of
aPingIds
)
{
let
filePath
=
getSavePathForPingId
(
id
)
;
if
(
await
File
.
exists
(
filePath
)
)
{
saved
+
+
;
}
}
if
(
saved
>
0
)
{
do_throw
(
"
Found
"
+
saved
+
"
unexpected
saved
pings
.
"
)
;
}
}
;
function
pingHandler
(
aRequest
)
{
gSeenPings
+
+
;
}
add_task
(
async
function
test_setup
(
)
{
PingServer
.
start
(
)
;
PingServer
.
registerPingHandler
(
pingHandler
)
;
do_get_profile
(
)
;
loadAddonManager
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
1
.
9
.
2
"
)
;
finishAddonManagerStartup
(
)
;
await
setEmptyPrefWatchlist
(
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
TelemetryEnabled
true
)
;
Services
.
prefs
.
setCharPref
(
TelemetryUtils
.
Preferences
.
Server
"
http
:
/
/
localhost
:
"
+
PingServer
.
port
)
;
}
)
;
add_task
(
async
function
setupEnvironment
(
)
{
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
true
)
;
await
TelemetryController
.
testSetup
(
)
;
let
directory
=
TelemetryStorage
.
pingDirectoryPath
;
await
File
.
makeDir
(
directory
{
ignoreExisting
:
true
unixMode
:
OS
.
Constants
.
S_IRWXU
}
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
}
)
;
add_task
(
async
function
test_recent_pings_sent
(
)
{
let
pingTypes
=
[
{
num
:
RECENT_PINGS
}
]
;
await
createSavedPings
(
pingTypes
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetrySend
.
testWaitOnOutgoingPings
(
)
;
assertReceivedPings
(
RECENT_PINGS
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
}
)
;
add_task
(
async
function
test_overdue_old_format
(
)
{
const
PING_OLD_FORMAT
=
{
slug
:
"
1234567abcd
"
reason
:
"
test
-
ping
"
payload
:
{
info
:
{
reason
:
"
test
-
ping
"
OS
:
"
XPCShell
"
appID
:
"
SomeId
"
appVersion
:
"
1
.
0
"
appName
:
"
XPCShell
"
appBuildID
:
"
123456789
"
appUpdateChannel
:
"
Test
"
platformBuildID
:
"
987654321
"
}
}
}
;
const
PING_NO_INFO
=
{
slug
:
"
1234
-
no
-
info
-
ping
"
reason
:
"
test
-
ping
"
payload
:
{
}
}
;
const
PING_NO_PAYLOAD
=
{
slug
:
"
5678
-
no
-
payload
"
reason
:
"
test
-
ping
"
}
;
const
PING_NO_SLUG
=
{
reason
:
"
test
-
ping
"
payload
:
{
}
}
;
const
PING_FILES_PATHS
=
[
getSavePathForPingId
(
PING_OLD_FORMAT
.
slug
)
getSavePathForPingId
(
PING_NO_INFO
.
slug
)
getSavePathForPingId
(
PING_NO_PAYLOAD
.
slug
)
getSavePathForPingId
(
"
no
-
slug
-
file
"
)
]
;
await
TelemetryStorage
.
savePing
(
PING_OLD_FORMAT
true
)
;
await
TelemetryStorage
.
savePing
(
PING_NO_INFO
true
)
;
await
TelemetryStorage
.
savePing
(
PING_NO_PAYLOAD
true
)
;
await
TelemetryStorage
.
savePingToFile
(
PING_NO_SLUG
PING_FILES_PATHS
[
3
]
true
)
;
for
(
let
f
in
PING_FILES_PATHS
)
{
await
File
.
setDates
(
PING_FILES_PATHS
[
f
]
null
Date
.
now
(
)
-
OVERDUE_PING_FILE_AGE
)
;
}
gSeenPings
=
0
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetrySend
.
testWaitOnOutgoingPings
(
)
;
assertReceivedPings
(
OLD_FORMAT_PINGS
)
;
await
OS
.
File
.
remove
(
PING_FILES_PATHS
[
3
]
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
}
)
;
add_task
(
async
function
test_corrupted_pending_pings
(
)
{
const
TEST_TYPE
=
"
test_corrupted
"
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_READ
"
)
.
clear
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_PARSE
"
)
.
clear
(
)
;
let
pendingPingId
=
await
TelemetryController
.
addPendingPing
(
TEST_TYPE
{
}
{
}
)
;
await
TelemetryStorage
.
loadPendingPing
(
pendingPingId
)
;
let
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_READ
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
0
"
Telemetry
must
not
report
a
pending
ping
load
failure
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_PARSE
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
0
"
Telemetry
must
not
report
a
pending
ping
parse
failure
"
)
;
await
OS
.
File
.
remove
(
getSavePathForPingId
(
pendingPingId
)
)
;
await
Assert
.
rejects
(
TelemetryStorage
.
loadPendingPing
(
pendingPingId
)
"
Telemetry
must
fail
loading
a
ping
which
isn
'
t
there
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_READ
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
1
"
Telemetry
must
report
a
pending
ping
load
failure
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_PARSE
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
0
"
Telemetry
must
not
report
a
pending
ping
parse
failure
"
)
;
pendingPingId
=
await
TelemetryController
.
addPendingPing
(
TEST_TYPE
{
}
{
}
)
;
const
INVALID_JSON
=
"
{
invalid
JSON
{
{
1
}
"
;
await
OS
.
File
.
writeAtomic
(
getSavePathForPingId
(
pendingPingId
)
INVALID_JSON
{
encoding
:
"
utf
-
8
"
}
)
;
await
Assert
.
rejects
(
TelemetryStorage
.
loadPendingPing
(
pendingPingId
)
"
Telemetry
must
fail
loading
a
corrupted
ping
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_READ
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
1
"
Telemetry
must
report
a
pending
ping
load
failure
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_LOAD_FAILURE_PARSE
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
1
"
Telemetry
must
report
a
pending
ping
parse
failure
"
)
;
let
exists
=
await
OS
.
File
.
exists
(
getSavePathForPingId
(
pendingPingId
)
)
;
Assert
.
ok
(
!
exists
"
The
unparseable
ping
should
have
been
removed
"
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
}
)
;
add_task
(
async
function
test_overdue_pings_trigger_send
(
)
{
let
pingTypes
=
[
{
num
:
RECENT_PINGS
}
{
num
:
OVERDUE_PINGS
age
:
OVERDUE_PING_FILE_AGE
}
]
;
let
pings
=
await
createSavedPings
(
pingTypes
)
;
let
recentPings
=
pings
.
slice
(
0
RECENT_PINGS
)
;
let
overduePings
=
pings
.
slice
(
-
OVERDUE_PINGS
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetrySend
.
testWaitOnOutgoingPings
(
)
;
assertReceivedPings
(
TOTAL_EXPECTED_PINGS
)
;
await
assertNotSaved
(
recentPings
)
;
await
assertNotSaved
(
overduePings
)
;
Assert
.
equal
(
TelemetrySend
.
overduePingsCount
overduePings
.
length
"
Should
have
tracked
the
correct
amount
of
overdue
pings
"
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
}
)
;
add_task
(
async
function
test_overdue_old_format
(
)
{
const
PING_OLD_FORMAT
=
{
slug
:
"
1234567abcd
"
reason
:
"
test
-
ping
"
payload
:
{
info
:
{
reason
:
"
test
-
ping
"
OS
:
"
XPCShell
"
appID
:
"
SomeId
"
appVersion
:
"
1
.
0
"
appName
:
"
XPCShell
"
appBuildID
:
"
123456789
"
appUpdateChannel
:
"
Test
"
platformBuildID
:
"
987654321
"
}
}
}
;
const
filePath
=
Path
.
join
(
Constants
.
Path
.
profileDir
PING_SAVE_FOLDER
PING_OLD_FORMAT
.
slug
)
;
await
TelemetryStorage
.
savePing
(
PING_OLD_FORMAT
true
)
;
await
File
.
setDates
(
filePath
null
Date
.
now
(
)
-
OVERDUE_PING_FILE_AGE
)
;
let
receivedPings
=
0
;
PingServer
.
registerPingHandler
(
request
=
>
{
Assert
.
notEqual
(
request
.
queryString
"
"
)
;
let
params
=
request
.
queryString
.
split
(
"
&
"
)
;
Assert
.
ok
(
params
.
find
(
p
=
>
p
=
=
"
v
=
1
"
)
)
;
receivedPings
+
+
;
}
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetrySend
.
testWaitOnOutgoingPings
(
)
;
Assert
.
equal
(
receivedPings
1
"
We
must
receive
a
ping
in
the
old
format
.
"
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
PingServer
.
resetPingHandler
(
)
;
}
)
;
add_task
(
async
function
test_pendingPingsQuota
(
)
{
const
PING_TYPE
=
"
foo
"
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetrySend
.
testWaitOnOutgoingPings
(
)
;
await
TelemetryStorage
.
testPendingQuotaTaskPromise
(
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
let
expectedPrunedPings
=
[
]
;
let
expectedNotPrunedPings
=
[
]
;
let
checkPendingPings
=
async
function
(
)
{
for
(
let
prunedPingId
of
expectedPrunedPings
)
{
await
Assert
.
rejects
(
TelemetryStorage
.
loadPendingPing
(
prunedPingId
)
"
Ping
"
+
prunedPingId
+
"
should
have
been
pruned
.
"
)
;
const
pingPath
=
getSavePathForPingId
(
prunedPingId
)
;
Assert
.
ok
(
!
(
await
OS
.
File
.
exists
(
pingPath
)
)
"
The
ping
should
not
be
on
the
disk
anymore
.
"
)
;
}
for
(
let
expectedPingId
of
expectedNotPrunedPings
)
{
Assert
.
ok
(
(
await
TelemetryStorage
.
loadPendingPing
(
expectedPingId
)
)
"
Ping
"
+
expectedPingId
+
"
should
be
among
the
pending
pings
.
"
)
;
}
}
;
let
pendingPingsInfo
=
[
]
;
let
pingsSizeInBytes
=
0
;
for
(
let
days
=
1
;
days
<
11
;
days
+
+
)
{
const
date
=
fakeNow
(
2010
1
days
1
1
0
)
;
const
pingId
=
await
TelemetryController
.
addPendingPing
(
PING_TYPE
{
}
{
}
)
;
const
pingFilePath
=
getSavePathForPingId
(
pingId
)
;
const
pingSize
=
(
await
OS
.
File
.
stat
(
pingFilePath
)
)
.
size
;
pendingPingsInfo
.
unshift
(
{
id
:
pingId
size
:
pingSize
timestamp
:
date
.
getTime
(
)
}
)
;
await
OS
.
File
.
setDates
(
pingFilePath
null
date
.
getTime
(
)
)
;
pingsSizeInBytes
+
=
pingSize
;
}
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_PINGS_SIZE_MB
"
)
.
clear
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_PINGS_EVICTED_OVER_QUOTA
"
)
.
clear
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_EVICTING_OVER_QUOTA_MS
"
)
.
clear
(
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetryStorage
.
testPendingQuotaTaskPromise
(
)
;
let
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_PINGS_SIZE_MB
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
Math
.
round
(
pingsSizeInBytes
/
1024
/
1024
)
"
Telemetry
must
report
the
correct
pending
pings
directory
size
.
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_PINGS_EVICTED_OVER_QUOTA
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
0
"
Telemetry
must
report
0
evictions
if
quota
is
not
hit
.
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_EVICTING_OVER_QUOTA_MS
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
0
"
Telemetry
must
report
a
null
elapsed
time
if
quota
is
not
hit
.
"
)
;
const
testQuotaInBytes
=
pingsSizeInBytes
*
0
.
8
;
fakePendingPingsQuota
(
testQuotaInBytes
)
;
const
safeQuotaSize
=
Math
.
round
(
testQuotaInBytes
*
0
.
9
)
;
let
sizeInBytes
=
0
;
let
pingsWithinQuota
=
[
]
;
let
pingsOutsideQuota
=
[
]
;
for
(
let
pingInfo
of
pendingPingsInfo
)
{
sizeInBytes
+
=
pingInfo
.
size
;
if
(
sizeInBytes
>
=
safeQuotaSize
)
{
pingsOutsideQuota
.
push
(
pingInfo
.
id
)
;
continue
;
}
pingsWithinQuota
.
push
(
pingInfo
.
id
)
;
}
expectedNotPrunedPings
=
pingsWithinQuota
;
expectedPrunedPings
=
pingsOutsideQuota
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetryStorage
.
testPendingQuotaTaskPromise
(
)
;
await
checkPendingPings
(
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_PINGS_EVICTED_OVER_QUOTA
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
pingsOutsideQuota
.
length
"
Telemetry
must
correctly
report
the
over
quota
pings
evicted
from
the
pending
pings
directory
.
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_PINGS_SIZE_MB
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
17
"
Pending
pings
quota
was
hit
a
special
size
must
be
reported
.
"
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetryStorage
.
testPendingQuotaTaskPromise
(
)
;
await
checkPendingPings
(
)
;
const
OVERSIZED_PING_ID
=
"
9b21ec8f
-
f762
-
4d28
-
a2c1
-
44e1c4694f24
"
;
const
OVERSIZED_PING
=
{
id
:
OVERSIZED_PING_ID
type
:
PING_TYPE
creationDate
:
(
new
Date
(
)
)
.
toISOString
(
)
payload
:
generateRandomString
(
2
*
1024
*
1024
)
}
;
await
TelemetryStorage
.
savePendingPing
(
OVERSIZED_PING
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PING_SIZE_EXCEEDED_PENDING
"
)
.
clear
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_DISCARDED_PENDING_PINGS_SIZE_MB
"
)
.
clear
(
)
;
await
Assert
.
rejects
(
TelemetryStorage
.
loadPendingPing
(
OVERSIZED_PING_ID
)
"
The
oversized
ping
should
have
been
pruned
.
"
)
;
Assert
.
ok
(
!
(
await
OS
.
File
.
exists
(
getSavePathForPingId
(
OVERSIZED_PING_ID
)
)
)
"
The
ping
should
not
be
on
the
disk
anymore
.
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PING_SIZE_EXCEEDED_PENDING
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
1
"
Telemetry
must
report
1
oversized
ping
in
the
pending
pings
directory
.
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_DISCARDED_PENDING_PINGS_SIZE_MB
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
counts
[
2
]
1
"
Telemetry
must
report
a
2MB
oversized
ping
.
"
)
;
await
TelemetryStorage
.
savePendingPing
(
OVERSIZED_PING
)
;
expectedPrunedPings
.
push
(
OVERSIZED_PING_ID
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetryStorage
.
testPendingQuotaTaskPromise
(
)
;
await
checkPendingPings
(
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_PING_SIZE_EXCEEDED_PENDING
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
sum
2
"
Telemetry
must
report
1
oversized
ping
in
the
pending
pings
directory
.
"
)
;
h
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_DISCARDED_PENDING_PINGS_SIZE_MB
"
)
.
snapshot
(
)
;
Assert
.
equal
(
h
.
counts
[
2
]
2
"
Telemetry
must
report
two
2MB
oversized
pings
.
"
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
true
)
;
}
)
;
add_task
(
async
function
teardown
(
)
{
await
PingServer
.
stop
(
)
;
}
)
;
