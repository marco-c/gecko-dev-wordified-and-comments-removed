"
use
strict
"
;
const
{
TelemetryController
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
sys
.
mjs
"
)
;
const
{
TelemetrySession
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySession
.
sys
.
mjs
"
)
;
const
{
getAppInfo
updateAppInfo
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
sys
.
mjs
"
)
;
updateAppInfo
(
)
;
add_task
(
async
function
test_firstRun
(
)
{
await
TelemetryController
.
testReset
(
)
;
let
metadata
=
TelemetrySession
.
getMetadata
(
)
;
Assert
.
equal
(
false
"
previousBuildID
"
in
metadata
)
;
let
appBuildID
=
getAppInfo
(
)
.
appBuildID
;
let
buildIDPref
=
Services
.
prefs
.
getCharPref
(
TelemetryUtils
.
Preferences
.
PreviousBuildID
)
;
Assert
.
equal
(
appBuildID
buildIDPref
)
;
}
)
;
add_task
(
async
function
test_secondRun
(
)
{
await
TelemetryController
.
testReset
(
)
;
let
metadata
=
TelemetrySession
.
getMetadata
(
)
;
Assert
.
equal
(
false
"
previousBuildID
"
in
metadata
)
;
}
)
;
const
NEW_BUILD_ID
=
"
20130314
"
;
add_task
(
async
function
test_newBuild
(
)
{
let
info
=
getAppInfo
(
)
;
let
oldBuildID
=
info
.
appBuildID
;
info
.
appBuildID
=
NEW_BUILD_ID
;
await
TelemetryController
.
testReset
(
)
;
let
metadata
=
TelemetrySession
.
getMetadata
(
)
;
Assert
.
equal
(
metadata
.
previousBuildId
oldBuildID
)
;
let
buildIDPref
=
Services
.
prefs
.
getCharPref
(
TelemetryUtils
.
Preferences
.
PreviousBuildID
)
;
Assert
.
equal
(
NEW_BUILD_ID
buildIDPref
)
;
}
)
;
function
run_test
(
)
{
do_get_profile
(
)
;
run_next_test
(
)
;
}
