const
{
ClientID
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ClientID
.
sys
.
mjs
"
)
;
const
{
TelemetryController
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
sys
.
mjs
"
)
;
const
{
TelemetryStorage
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
sys
.
mjs
"
)
;
const
{
TelemetryUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
sys
.
mjs
"
)
;
const
{
Preferences
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
)
;
const
DELETION_REQUEST_PING_TYPE
=
"
deletion
-
request
"
;
const
TEST_PING_TYPE
=
"
test
-
ping
-
type
"
;
function
sendPing
(
addEnvironment
=
false
)
{
let
options
=
{
addClientId
:
true
addEnvironment
}
;
return
TelemetryController
.
submitExternalPing
(
TEST_PING_TYPE
{
}
options
)
;
}
add_task
(
async
function
test_setup
(
)
{
do_get_profile
(
)
;
await
setEmptyPrefWatchlist
(
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
true
)
;
await
new
Promise
(
resolve
=
>
Telemetry
.
asyncFetchTelemetryData
(
wrapWithExceptionHandler
(
resolve
)
)
)
;
PingServer
.
start
(
)
;
Preferences
.
set
(
TelemetryUtils
.
Preferences
.
Server
"
http
:
/
/
localhost
:
"
+
PingServer
.
port
)
;
await
TelemetryController
.
testSetup
(
)
;
}
)
;
add_task
(
async
function
test_clientid_reset_after_reenabling
(
)
{
await
sendPing
(
)
;
let
ping
=
await
PingServer
.
promiseNextPing
(
)
;
Assert
.
equal
(
ping
.
type
TEST_PING_TYPE
"
The
ping
must
be
a
test
ping
"
)
;
Assert
.
ok
(
"
clientId
"
in
ping
)
;
let
firstClientId
=
ping
.
clientId
;
Assert
.
notEqual
(
TelemetryUtils
.
knownClientID
firstClientId
"
Client
ID
should
be
valid
and
random
"
)
;
Preferences
.
set
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
)
;
ping
=
await
PingServer
.
promiseNextPing
(
)
;
Assert
.
equal
(
ping
.
type
DELETION_REQUEST_PING_TYPE
"
The
ping
must
be
a
deletion
-
request
ping
"
)
;
Assert
.
equal
(
ping
.
clientId
firstClientId
)
;
let
clientId
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
TelemetryUtils
.
knownClientID
clientId
)
;
await
TelemetryController
.
testShutdown
(
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
Preferences
.
set
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
true
)
;
await
TelemetryController
.
testReset
(
)
;
let
newClientId
=
await
ClientID
.
getClientID
(
)
;
Assert
.
notEqual
(
TelemetryUtils
.
knownClientID
newClientId
"
Client
ID
should
be
valid
and
random
"
)
;
Assert
.
notEqual
(
firstClientId
newClientId
"
Client
ID
should
be
newly
generated
"
)
;
}
)
;
add_task
(
async
function
test_clientid_canary_after_disabling
(
)
{
await
sendPing
(
)
;
let
ping
=
await
PingServer
.
promiseNextPing
(
)
;
Assert
.
equal
(
ping
.
type
TEST_PING_TYPE
"
The
ping
must
be
a
test
ping
"
)
;
Assert
.
ok
(
"
clientId
"
in
ping
)
;
let
firstClientId
=
ping
.
clientId
;
Assert
.
notEqual
(
TelemetryUtils
.
knownClientID
firstClientId
"
Client
ID
should
be
valid
and
random
"
)
;
Preferences
.
set
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
)
;
ping
=
await
PingServer
.
promiseNextPing
(
)
;
Assert
.
equal
(
ping
.
type
DELETION_REQUEST_PING_TYPE
"
The
ping
must
be
a
deletion
-
request
ping
"
)
;
Assert
.
equal
(
ping
.
clientId
firstClientId
)
;
let
clientId
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
TelemetryUtils
.
knownClientID
clientId
)
;
Preferences
.
set
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
true
)
;
await
sendPing
(
)
;
ping
=
await
PingServer
.
promiseNextPing
(
)
;
Assert
.
equal
(
ping
.
type
TEST_PING_TYPE
"
The
ping
must
be
a
test
ping
"
)
;
Assert
.
notEqual
(
firstClientId
ping
.
clientId
"
Client
ID
should
be
newly
generated
"
)
;
await
TelemetryController
.
testShutdown
(
)
;
await
TelemetryStorage
.
testClearPendingPings
(
)
;
Preferences
.
set
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
)
;
await
TelemetryController
.
testReset
(
)
;
let
newClientId
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
TelemetryUtils
.
knownClientID
newClientId
"
Client
ID
should
be
a
canary
when
upload
disabled
"
)
;
}
)
;
add_task
(
async
function
stopServer
(
)
{
await
PingServer
.
stop
(
)
;
}
)
;
