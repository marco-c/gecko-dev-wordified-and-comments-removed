const
UINT_SCALAR
=
"
telemetry
.
test
.
unsigned_int_kind
"
;
const
STRING_SCALAR
=
"
telemetry
.
test
.
string_kind
"
;
const
BOOLEAN_SCALAR
=
"
telemetry
.
test
.
boolean_kind
"
;
const
KEYED_UINT_SCALAR
=
"
telemetry
.
test
.
keyed_unsigned_int
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
function
getDefinitionsPath
(
)
{
let
definitionFile
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
definitionFile
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
;
definitionFile
.
append
(
"
ScalarArtifactDefinitions
.
json
"
)
;
return
definitionFile
.
path
;
}
add_task
(
async
function
test_setup
(
)
{
do_get_profile
(
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
"
android
"
}
async
function
test_invalidJSON
(
)
{
const
INVALID_JSON
=
"
{
invalid
JSON
{
{
1
}
"
;
const
FILE_PATH
=
getDefinitionsPath
(
)
;
await
OS
.
File
.
writeAtomic
(
FILE_PATH
INVALID_JSON
{
encoding
:
"
utf
-
8
"
noOverwrite
:
false
}
)
;
await
TelemetryController
.
testSetup
(
)
;
await
TelemetryController
.
testPromiseJsProbeRegistration
(
)
;
await
TelemetryController
.
testShutdown
(
)
;
await
OS
.
File
.
remove
(
FILE_PATH
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
"
android
"
}
async
function
test_dynamicBuiltin
(
)
{
const
DYNAMIC_SCALAR_SPEC
=
{
"
telemetry
.
test
"
:
{
"
builtin_dynamic
"
:
{
"
kind
"
:
"
nsITelemetry
:
:
SCALAR_TYPE_COUNT
"
"
expires
"
:
"
never
"
"
record_on_release
"
:
false
"
keyed
"
:
false
}
"
builtin_dynamic_other
"
:
{
"
kind
"
:
"
nsITelemetry
:
:
SCALAR_TYPE_BOOLEAN
"
"
expires
"
:
"
never
"
"
record_on_release
"
:
false
"
keyed
"
:
false
}
"
builtin_dynamic_expired
"
:
{
"
kind
"
:
"
nsITelemetry
:
:
SCALAR_TYPE_BOOLEAN
"
"
expires
"
:
AppConstants
.
MOZ_APP_VERSION
"
record_on_release
"
:
false
"
keyed
"
:
false
}
}
}
;
Telemetry
.
clearScalars
(
)
;
const
FILE_PATH
=
getDefinitionsPath
(
)
;
await
CommonUtils
.
writeJSON
(
DYNAMIC_SCALAR_SPEC
FILE_PATH
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetryController
.
testPromiseJsProbeRegistration
(
)
;
const
TEST_SCALAR1
=
"
telemetry
.
test
.
builtin_dynamic
"
;
const
TEST_SCALAR2
=
"
telemetry
.
test
.
builtin_dynamic_other
"
;
const
TEST_SCALAR3
=
"
telemetry
.
test
.
builtin_dynamic_expired
"
;
Telemetry
.
scalarSet
(
TEST_SCALAR1
3785
)
;
Telemetry
.
scalarSet
(
TEST_SCALAR2
true
)
;
Telemetry
.
scalarSet
(
TEST_SCALAR3
true
)
;
const
scalars
=
Telemetry
.
getSnapshotForScalars
(
"
main
"
false
)
.
parent
;
Assert
.
equal
(
typeof
(
scalars
[
TEST_SCALAR1
]
)
"
number
"
TEST_SCALAR1
+
"
must
be
serialized
to
the
correct
format
.
"
)
;
Assert
.
ok
(
Number
.
isInteger
(
scalars
[
TEST_SCALAR1
]
)
TEST_SCALAR1
+
"
must
be
a
finite
integer
.
"
)
;
Assert
.
equal
(
scalars
[
TEST_SCALAR1
]
3785
TEST_SCALAR1
+
"
must
have
the
correct
value
.
"
)
;
Assert
.
equal
(
typeof
(
scalars
[
TEST_SCALAR2
]
)
"
boolean
"
TEST_SCALAR2
+
"
must
be
serialized
to
the
correct
format
.
"
)
;
Assert
.
equal
(
scalars
[
TEST_SCALAR2
]
true
TEST_SCALAR2
+
"
must
have
the
correct
value
.
"
)
;
await
TelemetryController
.
testShutdown
(
)
;
await
OS
.
File
.
remove
(
FILE_PATH
)
;
}
)
;
add_task
(
async
function
test_keyedDynamicBuiltin
(
)
{
Telemetry
.
clearScalars
(
)
;
Telemetry
.
registerBuiltinScalars
(
"
telemetry
.
test
"
{
"
builtin_dynamic_keyed
"
:
{
"
kind
"
:
Ci
.
nsITelemetry
.
SCALAR_TYPE_COUNT
"
expired
"
:
false
"
record_on_release
"
:
false
"
keyed
"
:
true
}
}
)
;
const
TEST_SCALAR1
=
"
telemetry
.
test
.
builtin_dynamic_keyed
"
;
Telemetry
.
keyedScalarSet
(
TEST_SCALAR1
"
test
-
key
"
3785
)
;
const
scalars
=
Telemetry
.
getSnapshotForKeyedScalars
(
"
main
"
false
)
.
parent
;
Assert
.
equal
(
typeof
(
scalars
[
TEST_SCALAR1
]
)
"
object
"
TEST_SCALAR1
+
"
must
be
a
keyed
scalar
.
"
)
;
Assert
.
equal
(
typeof
(
scalars
[
TEST_SCALAR1
]
[
"
test
-
key
"
]
)
"
number
"
TEST_SCALAR1
+
"
must
be
serialized
to
the
correct
format
.
"
)
;
Assert
.
ok
(
Number
.
isInteger
(
scalars
[
TEST_SCALAR1
]
[
"
test
-
key
"
]
)
TEST_SCALAR1
+
"
must
be
a
finite
integer
.
"
)
;
Assert
.
equal
(
scalars
[
TEST_SCALAR1
]
[
"
test
-
key
"
]
3785
TEST_SCALAR1
+
"
must
have
the
correct
value
.
"
)
;
}
)
;
