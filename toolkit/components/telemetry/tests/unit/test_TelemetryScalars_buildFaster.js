function
getDefinitionsPath
(
)
{
let
definitionFile
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
definitionFile
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
;
definitionFile
.
append
(
"
ScalarArtifactDefinitions
.
json
"
)
;
return
definitionFile
.
path
;
}
add_task
(
async
function
test_setup
(
)
{
do_get_profile
(
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
"
android
"
}
async
function
test_invalidJSON
(
)
{
const
INVALID_JSON
=
"
{
invalid
JSON
{
{
1
}
"
;
const
FILE_PATH
=
getDefinitionsPath
(
)
;
await
IOUtils
.
writeUTF8
(
FILE_PATH
INVALID_JSON
{
mode
:
"
overwrite
"
}
)
;
await
TelemetryController
.
testSetup
(
)
;
await
TelemetryController
.
testPromiseJsProbeRegistration
(
)
;
await
TelemetryController
.
testShutdown
(
)
;
await
IOUtils
.
remove
(
FILE_PATH
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
"
android
"
}
async
function
test_dynamicBuiltin
(
)
{
const
DYNAMIC_SCALAR_SPEC
=
{
"
telemetry
.
test
"
:
{
builtin_dynamic
:
{
kind
:
"
nsITelemetry
:
:
SCALAR_TYPE_COUNT
"
expires
:
"
never
"
record_on_release
:
false
keyed
:
false
}
builtin_dynamic_other
:
{
kind
:
"
nsITelemetry
:
:
SCALAR_TYPE_BOOLEAN
"
expires
:
"
never
"
record_on_release
:
false
keyed
:
false
}
builtin_dynamic_expired
:
{
kind
:
"
nsITelemetry
:
:
SCALAR_TYPE_BOOLEAN
"
expires
:
AppConstants
.
MOZ_APP_VERSION
record_on_release
:
false
keyed
:
false
}
builtin_dynamic_multi
:
{
kind
:
"
nsITelemetry
:
:
SCALAR_TYPE_COUNT
"
expired
:
false
record_on_release
:
false
keyed
:
false
stores
:
[
"
main
"
"
sync
"
]
}
builtin_dynamic_sync_only
:
{
kind
:
"
nsITelemetry
:
:
SCALAR_TYPE_COUNT
"
expired
:
false
record_on_release
:
false
keyed
:
false
stores
:
[
"
sync
"
]
}
}
}
;
Telemetry
.
clearScalars
(
)
;
const
FILE_PATH
=
getDefinitionsPath
(
)
;
await
IOUtils
.
writeJSON
(
FILE_PATH
DYNAMIC_SCALAR_SPEC
)
;
await
TelemetryController
.
testReset
(
)
;
await
TelemetryController
.
testPromiseJsProbeRegistration
(
)
;
await
TelemetryController
.
testShutdown
(
)
;
await
IOUtils
.
remove
(
FILE_PATH
)
;
}
)
;
add_task
(
async
function
test_keyedDynamicBuiltin
(
)
{
Telemetry
.
clearScalars
(
)
;
Telemetry
.
registerBuiltinScalars
(
"
telemetry
.
test
"
{
builtin_dynamic_keyed
:
{
kind
:
Ci
.
nsITelemetry
.
SCALAR_TYPE_COUNT
expired
:
false
record_on_release
:
false
keyed
:
true
}
}
)
;
}
)
;
