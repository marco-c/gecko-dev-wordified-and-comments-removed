ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryArchive
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
TelemetryArchiveTesting
"
]
;
function
checkForProperties
(
ping
expected
)
{
for
(
let
[
props
val
]
of
expected
)
{
let
test
=
ping
;
for
(
let
prop
of
props
)
{
test
=
test
[
prop
]
;
if
(
test
=
=
=
undefined
)
{
return
false
;
}
}
if
(
test
!
=
=
val
)
{
return
false
;
}
}
return
true
;
}
function
Checker
(
)
{
}
Checker
.
prototype
=
{
promiseInit
(
)
{
this
.
_pingMap
=
new
Map
(
)
;
return
TelemetryArchive
.
promiseArchivedPingList
(
)
.
then
(
(
plist
)
=
>
{
for
(
let
ping
of
plist
)
{
this
.
_pingMap
.
set
(
ping
.
id
ping
)
;
}
}
)
;
}
async
promiseFindPing
(
type
expected
)
{
let
candidates
=
[
]
;
let
plist
=
await
TelemetryArchive
.
promiseArchivedPingList
(
)
;
for
(
let
ping
of
plist
)
{
if
(
this
.
_pingMap
.
has
(
ping
.
id
)
)
{
continue
;
}
if
(
ping
.
type
=
=
type
)
{
candidates
.
push
(
ping
)
;
}
}
for
(
let
candidate
of
candidates
)
{
let
ping
=
await
TelemetryArchive
.
promiseArchivedPingById
(
candidate
.
id
)
;
if
(
checkForProperties
(
ping
expected
)
)
{
return
ping
;
}
}
return
null
;
}
}
;
const
TelemetryArchiveTesting
=
{
setup
(
)
{
Services
.
prefs
.
setCharPref
(
"
toolkit
.
telemetry
.
log
.
level
"
"
Trace
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
telemetry
.
archive
.
enabled
"
true
)
;
}
Checker
}
;
