Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
this
)
;
const
ENABLE_TESTS
=
AppConstants
.
MOZ_GECKO_PROFILER
;
function
checkObjectStructure
(
obj
)
{
if
(
!
obj
|
|
typeof
obj
!
=
=
"
object
"
)
{
return
false
;
}
for
(
let
property
of
[
"
memoryMap
"
"
stacks
"
"
captures
"
]
)
{
if
(
!
(
property
in
obj
)
|
|
!
Array
.
isArray
(
obj
[
property
]
)
)
return
false
;
}
return
true
;
}
function
captureStacks
(
key
clear
=
true
)
{
Telemetry
.
captureStack
(
key
)
;
let
stacks
=
Telemetry
.
snapshotCapturedStacks
(
clear
)
;
Assert
.
ok
(
checkObjectStructure
(
stacks
)
)
;
return
stacks
;
}
const
TEST_STACK_KEYS
=
[
"
TEST
-
KEY1
"
"
TEST
-
KEY2
"
]
;
add_task
(
{
skip_if
:
(
)
=
>
!
ENABLE_TESTS
}
async
function
test_capturedStacksAppearInPings
(
)
{
await
TelemetryController
.
testSetup
(
)
;
captureStacks
(
"
DOES
-
NOT
-
MATTER
"
false
)
;
let
ping
=
TelemetryController
.
getCurrentPingData
(
)
;
Assert
.
ok
(
"
capturedStacks
"
in
ping
.
payload
.
processes
.
parent
)
;
let
capturedStacks
=
ping
.
payload
.
processes
.
parent
.
capturedStacks
;
Assert
.
ok
(
checkObjectStructure
(
capturedStacks
)
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
ENABLE_TESTS
}
function
test_CaptureStacksIncreasesNumberOfCapturedStacks
(
)
{
let
key
=
TEST_STACK_KEYS
[
0
]
+
"
-
UNIQUE
-
KEY
-
1
"
;
let
original
=
Telemetry
.
snapshotCapturedStacks
(
)
;
Assert
.
equal
(
undefined
original
.
captures
.
find
(
capture
=
>
capture
[
0
]
=
=
=
key
)
)
;
let
updated
=
captureStacks
(
key
)
;
Assert
.
equal
(
original
.
stacks
.
length
+
1
updated
.
stacks
.
length
)
;
Assert
.
equal
(
original
.
captures
.
length
+
1
updated
.
captures
.
length
)
;
Assert
.
deepEqual
(
[
key
original
.
stacks
.
length
1
]
updated
.
captures
.
find
(
capture
=
>
capture
[
0
]
=
=
=
key
)
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
ENABLE_TESTS
}
function
test_CaptureStacksGroupsDuplicateStacks
(
)
{
let
stacks
=
captureStacks
(
TEST_STACK_KEYS
[
0
]
false
)
;
let
original
=
{
captures
:
stacks
.
captures
.
find
(
capture
=
>
capture
[
0
]
=
=
=
TEST_STACK_KEYS
[
0
]
)
stacks
:
stacks
.
stacks
}
;
stacks
=
captureStacks
(
TEST_STACK_KEYS
[
0
]
)
;
let
updated
=
{
captures
:
stacks
.
captures
.
find
(
capture
=
>
capture
[
0
]
=
=
=
TEST_STACK_KEYS
[
0
]
)
stacks
:
stacks
.
stacks
}
;
Assert
.
equal
(
original
.
stacks
.
length
updated
.
stacks
.
length
)
;
let
expectedCaptures
=
original
.
captures
;
expectedCaptures
[
2
]
+
+
;
Assert
.
deepEqual
(
expectedCaptures
updated
.
captures
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
ENABLE_TESTS
}
function
test_CaptureStacksSeparatesInformationByKeys
(
)
{
let
stacks
=
captureStacks
(
TEST_STACK_KEYS
[
0
]
false
)
;
let
original
=
{
captures
:
stacks
.
captures
.
find
(
capture
=
>
capture
[
0
]
=
=
=
TEST_STACK_KEYS
[
0
]
)
stacks
:
stacks
.
stacks
}
;
let
uniqueKey
=
TEST_STACK_KEYS
[
1
]
+
"
-
UNIQUE
-
KEY
-
2
"
;
let
updated
=
captureStacks
(
uniqueKey
)
;
Assert
.
equal
(
original
.
stacks
.
length
+
1
updated
.
stacks
.
length
)
;
Assert
.
deepEqual
(
original
.
captures
updated
.
captures
.
find
(
capture
=
>
capture
[
0
]
=
=
=
TEST_STACK_KEYS
[
0
]
)
)
;
}
)
;
add_task
(
{
skip_if
:
(
)
=
>
!
ENABLE_TESTS
}
function
test_CaptureStacksDoesNotAllowBadKey
(
)
{
for
(
let
badKey
of
[
null
"
KEY
-
!
\
"
#
%
^
&
*
(
)
_
"
]
)
{
let
stacks
=
captureStacks
(
badKey
)
;
let
captureData
=
stacks
.
captures
.
find
(
capture
=
>
capture
[
0
]
=
=
=
badKey
)
;
Assert
.
ok
(
!
captureData
"
{
badKey
}
"
should
not
be
allowed
as
a
key
)
;
}
}
)
;
function
run_test
(
)
{
do_get_profile
(
true
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
TelemetryEnabled
true
)
;
run_next_test
(
)
;
}
