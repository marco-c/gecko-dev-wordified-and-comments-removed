"
use
strict
"
;
const
{
ClientID
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ClientID
.
sys
.
mjs
"
)
;
const
PREF_CACHED_CLIENTID
=
"
toolkit
.
telemetry
.
cachedClientID
"
;
const
PREF_CACHED_PROFILEGROUPID
=
"
toolkit
.
telemetry
.
cachedProfileGroupID
"
;
const
PREF_CACHED_USAGE_PROFILEID
=
"
datareporting
.
dau
.
cachedUsageProfileID
"
;
const
PREF_CACHED_USAGE_PROFILEGROUPID
=
"
datareporting
.
dau
.
cachedUsageProfileGroupID
"
;
var
drsPath
;
const
uuidRegex
=
/
^
[
0
-
9a
-
f
]
{
8
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
12
}
/
i
;
function
run_test
(
)
{
do_get_profile
(
)
;
drsPath
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
datareporting
"
"
state
.
json
"
)
;
Services
.
prefs
.
setBoolPref
(
"
toolkit
.
telemetry
.
testing
.
overrideProductsCheck
"
true
)
;
run_next_test
(
)
;
}
add_task
(
function
test_setup
(
)
{
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
GleanPings
.
usageReporting
.
setEnabled
(
true
)
;
GleanPings
.
usageDeletionRequest
.
setEnabled
(
true
)
;
GleanPings
.
onboardingOptOut
.
setEnabled
(
true
)
;
}
)
;
add_task
(
async
function
test_client_id
(
)
{
const
invalidIDs
=
[
[
-
1
"
setIntPref
"
]
[
0
.
5
"
setIntPref
"
]
[
"
INVALID
-
UUID
"
"
setStringPref
"
]
[
true
"
setBoolPref
"
]
[
"
"
"
setStringPref
"
]
[
"
3d1e1560
-
682a
-
4043
-
8cf2
-
aaaaaaaaaaaZ
"
"
setStringPref
"
]
]
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
typeof
clientID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
clientID
)
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
await
IOUtils
.
writeUTF8
(
drsPath
"
abcd
"
{
tmpPath
:
drsPath
+
"
.
tmp
"
}
)
;
clientID
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
typeof
clientID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
clientID
)
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
let
oldClientID
=
clientID
;
for
(
let
[
invalidID
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
clientID
:
invalidID
}
)
;
clientID
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
clientID
oldClientID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
}
const
validClientID
=
"
5afebd62
-
a33c
-
416c
-
b519
-
5c60fb988e8e
"
;
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
clientID
:
validClientID
}
)
;
clientID
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
clientID
validClientID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
clientID
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
clientID
validClientID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
for
(
let
[
invalidID
prefFunc
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
[
prefFunc
]
(
PREF_CACHED_CLIENTID
invalidID
)
;
let
cachedID
=
ClientID
.
getCachedClientID
(
)
;
Assert
.
strictEqual
(
cachedID
null
"
ClientID
should
ignore
invalid
cached
IDs
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
PREF_CACHED_CLIENTID
)
"
ClientID
should
reset
invalid
cached
IDs
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
PREF_CACHED_CLIENTID
)
Ci
.
nsIPrefBranch
.
PREF_INVALID
"
ClientID
should
reset
invalid
cached
IDs
"
)
;
}
}
)
;
add_task
(
async
function
test_profile_group_id
(
)
{
const
invalidIDs
=
[
[
-
1
"
setIntPref
"
]
[
0
.
5
"
setIntPref
"
]
[
"
INVALID
-
UUID
"
"
setStringPref
"
]
[
true
"
setBoolPref
"
]
[
"
"
"
setStringPref
"
]
[
"
3d1e1560
-
682a
-
4043
-
8cf2
-
aaaaaaaaaaaZ
"
"
setStringPref
"
]
]
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
typeof
profileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
profileGroupID
)
)
;
Assert
.
notEqual
(
profileGroupID
clientID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
await
IOUtils
.
writeUTF8
(
drsPath
"
abcd
"
{
tmpPath
:
drsPath
+
"
.
tmp
"
}
)
;
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
typeof
profileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
profileGroupID
)
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
let
oldGroupID
=
profileGroupID
;
for
(
let
[
invalidID
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
clientID
:
invalidID
}
)
;
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
profileGroupID
oldGroupID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
}
const
validProfileGroupID
=
"
5afebd62
-
a33c
-
416c
-
b519
-
5c60fb988e8e
"
;
const
validClientID
=
"
d06361a2
-
67d8
-
4d41
-
b804
-
6fab6ddf5461
"
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
clientID
:
validClientID
profileGroupID
:
validProfileGroupID
}
)
;
clientID
=
await
ClientID
.
getClientID
(
)
;
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
typeof
profileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
profileGroupID
)
)
;
Assert
.
equal
(
clientID
validClientID
)
;
Assert
.
equal
(
profileGroupID
clientID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
version
:
2
clientID
:
validClientID
profileGroupID
:
validProfileGroupID
}
)
;
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
profileGroupID
validProfileGroupID
)
;
clientID
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
clientID
validClientID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
version
:
2
profileGroupID
:
validProfileGroupID
}
)
;
clientID
=
await
ClientID
.
getClientID
(
)
;
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
clientID
validClientID
)
;
Assert
.
equal
(
profileGroupID
validProfileGroupID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
profileGroupID
validProfileGroupID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
for
(
let
[
invalidID
prefFunc
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
[
prefFunc
]
(
PREF_CACHED_PROFILEGROUPID
invalidID
)
;
let
cachedID
=
ClientID
.
getCachedProfileGroupID
(
)
;
Assert
.
strictEqual
(
cachedID
null
"
ClientID
should
ignore
invalid
cached
IDs
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
PREF_CACHED_PROFILEGROUPID
)
"
ClientID
should
reset
invalid
cached
IDs
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
PREF_CACHED_PROFILEGROUPID
)
Ci
.
nsIPrefBranch
.
PREF_INVALID
"
ClientID
should
reset
invalid
cached
IDs
"
)
;
}
}
)
;
add_task
(
async
function
test_set_profile_group_id
(
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
typeof
profileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
profileGroupID
)
)
;
await
Assert
.
rejects
(
ClientID
.
setProfileGroupID
(
"
INVALID
-
UUID
"
)
/
Invalid
profile
group
ID
/
"
Invalid
profile
group
IDs
aren
'
t
accepted
"
)
;
Assert
.
equal
(
ClientID
.
getCachedProfileGroupID
(
)
profileGroupID
"
Cached
profile
group
ID
should
not
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getProfileGroupID
(
)
profileGroupID
"
Group
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
let
validProfileGroupID
=
"
5afebd62
-
a33c
-
416c
-
b519
-
5c60fb988e8e
"
;
await
ClientID
.
setProfileGroupID
(
validProfileGroupID
)
;
Assert
.
equal
(
ClientID
.
getCachedProfileGroupID
(
)
validProfileGroupID
"
Cached
profile
group
ID
should
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getProfileGroupID
(
)
validProfileGroupID
"
Group
ID
should
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validProfileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Assert
.
equal
(
ClientID
.
getCachedProfileGroupID
(
)
validProfileGroupID
"
Cached
profile
group
ID
be
correct
.
"
)
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Assert
.
equal
(
ClientID
.
getCachedProfileGroupID
(
)
null
"
Cached
profile
group
ID
should
not
be
available
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getProfileGroupID
(
)
validProfileGroupID
"
Group
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
ClientID
.
getCachedProfileGroupID
(
)
validProfileGroupID
"
Cached
profile
group
ID
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validProfileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
Assert
.
equal
(
ClientID
.
getCachedProfileGroupID
(
)
validProfileGroupID
"
Cached
profile
group
ID
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getProfileGroupID
(
)
validProfileGroupID
"
Group
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validProfileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
}
)
;
add_task
(
async
function
test_setCanaryIdentifiers
(
)
{
const
KNOWN_CLIENT_UUID
=
"
c0ffeec0
-
ffee
-
c0ff
-
eec0
-
ffeec0ffeec0
"
;
const
KNOWN_PROFILE_GROUP_UUID
=
"
decafdec
-
afde
-
cafd
-
ecaf
-
decafdecafde
"
;
await
ClientID
.
_reset
(
)
;
let
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
let
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
await
ClientID
.
setCanaryIdentifiers
(
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
Assert
.
equal
(
KNOWN_CLIENT_UUID
clientID
)
;
let
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
KNOWN_PROFILE_GROUP_UUID
profileGroupID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
clientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
Assert
.
equal
(
profileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
let
usageProfileID2
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
usageProfileID
usageProfileID2
)
;
let
usageProfileGroupID2
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
usageProfileGroupID
usageProfileGroupID2
)
;
}
)
;
add_task
(
async
function
test_setCanaryUsageProfileIdentifiers
(
)
{
const
KNOWN_USAGE_PROFILEID
=
"
beefbeef
-
beef
-
beef
-
beef
-
beeefbeefbee
"
;
const
KNOWN_USAGE_PROFILEGROUPID
=
"
b0bacafe
-
b0ba
-
cafe
-
b0ba
-
cafeb0bacafe
"
;
await
ClientID
.
_reset
(
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
await
ClientID
.
setCanaryUsageProfileIdentifiers
(
)
;
let
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
KNOWN_USAGE_PROFILEID
usageProfileID
)
;
let
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
KNOWN_USAGE_PROFILEGROUPID
usageProfileGroupID
)
;
let
clientID2
=
await
ClientID
.
getClientID
(
)
;
let
profileGroupID2
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
clientID
clientID2
)
;
Assert
.
equal
(
profileGroupID
profileGroupID2
)
;
}
)
;
add_task
(
async
function
test_removeParallelGet
(
)
{
await
ClientID
.
resetIdentifiers
(
)
;
let
firstClientID
=
await
ClientID
.
getClientID
(
)
;
let
firstProfileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
firstClientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
Assert
.
equal
(
firstProfileGroupID
Glean
.
legacyTelemetry
.
profileGroupId
.
testGetValue
(
)
)
;
}
Assert
.
notEqual
(
firstClientID
firstProfileGroupID
)
;
let
promiseResetIdentifiers
=
ClientID
.
resetIdentifiers
(
)
;
let
p
=
ClientID
.
getClientID
(
)
;
let
newClientID
=
await
ClientID
.
getClientID
(
)
;
await
promiseResetIdentifiers
;
let
otherClientID
=
await
p
;
Assert
.
notEqual
(
firstClientID
newClientID
"
After
reset
client
ID
should
be
different
.
"
)
;
Assert
.
equal
(
newClientID
otherClientID
"
Getting
the
client
ID
in
parallel
to
a
reset
should
give
the
same
id
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
newClientID
Glean
.
legacyTelemetry
.
clientId
.
testGetValue
(
)
)
;
}
}
)
;
add_task
(
async
function
test_usage_profile_id
(
)
{
const
invalidIDs
=
[
[
-
1
"
setIntPref
"
]
[
0
.
5
"
setIntPref
"
]
[
"
INVALID
-
UUID
"
"
setStringPref
"
]
[
true
"
setBoolPref
"
]
[
"
"
"
setStringPref
"
]
[
"
3d1e1560
-
682a
-
4043
-
8cf2
-
aaaaaaaaaaaZ
"
"
setStringPref
"
]
]
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
profileGroupId
=
await
ClientID
.
getProfileGroupID
(
)
;
let
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
let
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
typeof
usageProfileID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileID
)
)
;
Assert
.
notEqual
(
usageProfileID
clientID
)
;
Assert
.
notEqual
(
usageProfileID
profileGroupId
)
;
Assert
.
notEqual
(
usageProfileID
usageProfileGroupID
)
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
await
IOUtils
.
writeUTF8
(
drsPath
"
abcd
"
{
tmpPath
:
drsPath
+
"
.
tmp
"
}
)
;
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
typeof
usageProfileID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileID
)
)
;
let
oldUsageProfileID
=
usageProfileID
;
for
(
let
[
invalidID
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
clientID
:
invalidID
}
)
;
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
usageProfileID
oldUsageProfileID
)
;
}
const
validProfileGroupID
=
"
5afebd62
-
a33c
-
416c
-
b519
-
5c60fb988e8e
"
;
const
validClientID
=
"
d06361a2
-
67d8
-
4d41
-
b804
-
6fab6ddf5461
"
;
const
validUsageProfileId
=
"
4d38e1a4
-
5034
-
44b1
-
9683
-
c0d8f748ee24
"
;
const
validUsageProfileGroupID
=
"
01234567
-
890a
-
bcde
-
f012
-
123456789abc
"
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
version
:
2
clientID
:
validClientID
profileGroupID
:
validProfileGroupID
usageProfileID
:
validUsageProfileId
usageProfileGroupID
:
validUsageProfileGroupID
}
)
;
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
usageProfileID
validUsageProfileId
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileID
Glean
.
usage
.
profileId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
version
:
2
profileGroupID
:
validProfileGroupID
usageProfileID
:
validUsageProfileId
usageProfileGroupID
:
validUsageProfileGroupID
}
)
;
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
usageProfileID
validUsageProfileId
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileID
Glean
.
usage
.
profileId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
usageProfileID
validUsageProfileId
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileID
Glean
.
usage
.
profileId
.
testGetValue
(
)
)
;
}
for
(
let
[
invalidID
prefFunc
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
[
prefFunc
]
(
PREF_CACHED_USAGE_PROFILEID
invalidID
)
;
let
cachedID
=
ClientID
.
getCachedUsageProfileID
(
)
;
Assert
.
strictEqual
(
cachedID
null
"
ClientID
should
ignore
invalid
cached
IDs
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
PREF_CACHED_USAGE_PROFILEID
)
"
ClientID
should
reset
invalid
cached
IDs
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
PREF_CACHED_USAGE_PROFILEID
)
Ci
.
nsIPrefBranch
.
PREF_INVALID
"
ClientID
should
reset
invalid
cached
IDs
"
)
;
}
}
)
;
add_task
(
async
function
test_usage_profile_group_id
(
)
{
const
invalidIDs
=
[
[
-
1
"
setIntPref
"
]
[
0
.
5
"
setIntPref
"
]
[
"
INVALID
-
UUID
"
"
setStringPref
"
]
[
true
"
setBoolPref
"
]
[
"
"
"
setStringPref
"
]
[
"
3d1e1560
-
682a
-
4043
-
8cf2
-
aaaaaaaaaaaZ
"
"
setStringPref
"
]
]
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
let
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
let
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
typeof
usageProfileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileGroupID
)
)
;
Assert
.
notEqual
(
usageProfileGroupID
clientID
)
;
Assert
.
notEqual
(
usageProfileGroupID
profileGroupID
)
;
Assert
.
notEqual
(
usageProfileGroupID
usageProfileID
)
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
await
IOUtils
.
writeUTF8
(
drsPath
"
abcd
"
{
tmpPath
:
drsPath
+
"
.
tmp
"
}
)
;
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
typeof
usageProfileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileGroupID
)
)
;
let
oldUsageProfileGroupID
=
usageProfileGroupID
;
for
(
let
[
invalidID
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
clientID
:
invalidID
}
)
;
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
usageProfileGroupID
oldUsageProfileGroupID
)
;
}
const
validProfileGroupID
=
"
5afebd62
-
a33c
-
416c
-
b519
-
5c60fb988e8e
"
;
const
validClientID
=
"
d06361a2
-
67d8
-
4d41
-
b804
-
6fab6ddf5461
"
;
const
validUsageProfileId
=
"
4d38e1a4
-
5034
-
44b1
-
9683
-
c0d8f748ee24
"
;
const
validUsageProfileGroupID
=
"
01234567
-
890a
-
bcde
-
f012
-
123456789abc
"
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
version
:
2
clientID
:
validClientID
profileGroupID
:
validProfileGroupID
usageProfileID
:
validUsageProfileId
usageProfileGroupID
:
validUsageProfileGroupID
}
)
;
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
usageProfileGroupID
validUsageProfileGroupID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileGroupID
Glean
.
usage
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
writeJSON
(
drsPath
{
version
:
2
profileGroupID
:
validProfileGroupID
usageProfileID
:
validUsageProfileId
usageProfileGroupID
:
validUsageProfileGroupID
}
)
;
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
usageProfileGroupID
validUsageProfileGroupID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileGroupID
Glean
.
usage
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
usageProfileGroupID
validUsageProfileGroupID
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileGroupID
Glean
.
usage
.
profileGroupId
.
testGetValue
(
)
)
;
}
for
(
let
[
invalidID
prefFunc
]
of
invalidIDs
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
[
prefFunc
]
(
PREF_CACHED_USAGE_PROFILEGROUPID
invalidID
)
;
let
cachedGroupID
=
ClientID
.
getCachedUsageProfileGroupID
(
)
;
Assert
.
strictEqual
(
cachedGroupID
null
"
ClientID
should
ignore
invalid
cached
profile
group
IDs
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
"
ClientID
should
reset
invalid
cached
profile
group
IDs
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
Ci
.
nsIPrefBranch
.
PREF_INVALID
"
ClientID
should
reset
invalid
cached
profile
group
IDs
"
)
;
}
}
)
;
add_task
(
async
function
test_usage_ids_are_added
(
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_PROFILEGROUPID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
const
validClientID
=
"
d06361a2
-
67d8
-
4d41
-
b804
-
6fab6ddf5461
"
;
const
validProfileGroupID
=
"
5afebd62
-
a33c
-
416c
-
b519
-
5c60fb988e8e
"
;
await
IOUtils
.
writeJSON
(
drsPath
{
version
:
2
clientID
:
validClientID
profileGroupID
:
validProfileGroupID
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
profileGroupID
=
await
ClientID
.
getProfileGroupID
(
)
;
Assert
.
equal
(
clientID
validClientID
)
;
Assert
.
equal
(
profileGroupID
validProfileGroupID
)
;
let
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
typeof
usageProfileID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileID
)
)
;
let
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
typeof
usageProfileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileGroupID
)
)
;
Assert
.
notEqual
(
usageProfileID
clientID
)
;
Assert
.
notEqual
(
usageProfileGroupID
profileGroupID
)
;
}
)
;
add_task
(
async
function
test_set_usage_profile_id
(
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
usageProfileID
=
await
ClientID
.
getUsageProfileID
(
)
;
Assert
.
equal
(
typeof
usageProfileID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileID
)
)
;
await
Assert
.
rejects
(
ClientID
.
setUsageProfileID
(
"
INVALID
-
UUID
"
)
/
Invalid
Usage
Profile
ID
/
"
Invalid
Usage
Profile
IDs
aren
'
t
accepted
"
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileID
(
)
usageProfileID
"
Cached
Usage
Profile
ID
should
not
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileID
(
)
usageProfileID
"
Usage
Profile
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileID
Glean
.
usage
.
profileId
.
testGetValue
(
)
)
;
}
let
validUsageProfileID
=
"
5afebd62
-
a33c
-
416c
-
b519
-
5c60fb988e8e
"
;
await
ClientID
.
setUsageProfileID
(
validUsageProfileID
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileID
(
)
validUsageProfileID
"
Cached
Usage
Profile
ID
should
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileID
(
)
validUsageProfileID
"
Group
ID
should
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validUsageProfileID
Glean
.
usage
.
profileId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileID
(
)
validUsageProfileID
"
Cached
Usage
Profile
ID
be
correct
.
"
)
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEID
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileID
(
)
null
"
Cached
Usage
Profile
ID
should
not
be
available
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileID
(
)
validUsageProfileID
"
Usage
Profile
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileID
(
)
validUsageProfileID
"
Cached
Usage
Profile
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validUsageProfileID
Glean
.
usage
.
profileId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileID
(
)
validUsageProfileID
"
Cached
Usage
Profile
ID
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileID
(
)
validUsageProfileID
"
Usage
Profile
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validUsageProfileID
Glean
.
usage
.
profileId
.
testGetValue
(
)
)
;
}
}
)
;
add_task
(
async
function
test_set_usage_profile_group_id
(
)
{
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
let
clientID
=
await
ClientID
.
getClientID
(
)
;
let
usageProfileGroupID
=
await
ClientID
.
getUsageProfileGroupID
(
)
;
Assert
.
equal
(
typeof
usageProfileGroupID
"
string
"
)
;
Assert
.
ok
(
uuidRegex
.
test
(
usageProfileGroupID
)
)
;
await
Assert
.
rejects
(
ClientID
.
setUsageProfileGroupID
(
"
INVALID
-
UUID
"
)
/
Invalid
Usage
Profile
Group
ID
/
"
Invalid
Usage
Profile
Group
IDs
aren
'
t
accepted
"
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileGroupID
(
)
usageProfileGroupID
"
Cached
Usage
Profile
Group
ID
should
not
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileGroupID
(
)
usageProfileGroupID
"
Usage
Profile
Group
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
usageProfileGroupID
Glean
.
usage
.
profileGroupId
.
testGetValue
(
)
)
;
}
let
validUsageProfileGroupID
=
"
01234567
-
890a
-
bcde
-
f012
-
123456789abc
"
;
await
ClientID
.
setUsageProfileGroupID
(
validUsageProfileGroupID
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileGroupID
(
)
validUsageProfileGroupID
"
Cached
Usage
Profile
Group
ID
should
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileGroupID
(
)
validUsageProfileGroupID
"
Usage
Profile
Group
ID
should
have
changed
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validUsageProfileGroupID
Glean
.
usage
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileGroupID
(
)
validUsageProfileGroupID
"
Cached
Usage
Profile
Group
ID
should
be
correct
.
"
)
;
await
ClientID
.
_reset
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_USAGE_PROFILEGROUPID
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileGroupID
(
)
null
"
Cached
Usage
Profile
Group
ID
should
not
be
available
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileGroupID
(
)
validUsageProfileGroupID
"
Usage
Profile
Group
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileGroupID
(
)
validUsageProfileGroupID
"
Cached
Usage
Profile
Group
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validUsageProfileGroupID
Glean
.
usage
.
profileGroupId
.
testGetValue
(
)
)
;
}
await
ClientID
.
_reset
(
)
;
await
IOUtils
.
remove
(
drsPath
{
ignoreAbsent
:
true
}
)
;
Assert
.
equal
(
ClientID
.
getCachedUsageProfileGroupID
(
)
validUsageProfileGroupID
"
Cached
Usage
Profile
Group
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getUsageProfileGroupID
(
)
validUsageProfileGroupID
"
Usage
Profile
Group
ID
should
be
correct
.
"
)
;
Assert
.
equal
(
await
ClientID
.
getClientID
(
)
clientID
"
Client
ID
should
not
have
changed
.
"
)
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
Assert
.
equal
(
validUsageProfileGroupID
Glean
.
usage
.
profileGroupId
.
testGetValue
(
)
)
;
}
}
)
;
