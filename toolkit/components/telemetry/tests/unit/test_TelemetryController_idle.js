Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySession
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySend
.
jsm
"
this
)
;
var
gHttpServer
=
null
;
add_task
(
function
*
test_setup
(
)
{
do_get_profile
(
)
;
yield
setEmptyPrefWatchlist
(
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
TelemetryEnabled
true
)
;
Services
.
prefs
.
setBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
true
)
;
gHttpServer
=
new
HttpServer
(
)
;
gHttpServer
.
start
(
-
1
)
;
}
)
;
add_task
(
function
*
testSendPendingOnIdleDaily
(
)
{
const
PENDING_PING
=
{
id
:
"
2133234d
-
4ea1
-
44f4
-
909e
-
ce8c6c41e0fc
"
type
:
"
test
-
ping
"
version
:
4
application
:
{
}
payload
:
{
}
}
;
yield
TelemetryStorage
.
savePing
(
PENDING_PING
true
)
;
yield
TelemetryController
.
testSetup
(
)
;
TelemetrySend
.
setServer
(
"
http
:
/
/
localhost
:
"
+
gHttpServer
.
identity
.
primaryPort
)
;
let
pendingPromise
=
new
Promise
(
resolve
=
>
gHttpServer
.
registerPrefixHandler
(
"
/
submit
/
telemetry
/
"
request
=
>
resolve
(
request
)
)
)
;
let
gatherPromise
=
PromiseUtils
.
defer
(
)
;
Services
.
obs
.
addObserver
(
gatherPromise
.
resolve
"
gather
-
telemetry
"
false
)
;
TelemetrySession
.
observe
(
null
"
idle
-
daily
"
null
)
;
yield
gatherPromise
;
Assert
.
ok
(
true
"
Received
gather
-
telemetry
notification
.
"
)
;
Services
.
obs
.
removeObserver
(
gatherPromise
.
resolve
"
gather
-
telemetry
"
)
;
let
ns
=
{
}
;
let
module
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySend
.
jsm
"
ns
)
;
module
.
TelemetrySendImpl
.
observe
(
null
"
idle
-
daily
"
null
)
;
let
request
=
yield
pendingPromise
;
let
ping
=
decodeRequestPayload
(
request
)
;
Assert
.
equal
(
ping
.
id
PENDING_PING
.
id
)
;
Assert
.
equal
(
ping
.
type
PENDING_PING
.
type
)
;
yield
new
Promise
(
resolve
=
>
gHttpServer
.
stop
(
resolve
)
)
;
}
)
;
