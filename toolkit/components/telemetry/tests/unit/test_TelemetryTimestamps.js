const
{
TelemetryController
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
const
{
TelemetrySession
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySession
.
jsm
"
)
;
const
{
updateAppInfo
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AppInfo
.
sys
.
mjs
"
)
;
updateAppInfo
(
)
;
function
getSimpleMeasurementsFromTelemetryController
(
)
{
return
TelemetrySession
.
getPayload
(
)
.
simpleMeasurements
;
}
add_task
(
async
function
test_setup
(
)
{
await
loadAddonManager
(
)
;
finishAddonManagerStartup
(
)
;
fakeIntlReady
(
)
;
do_get_profile
(
)
;
await
setEmptyPrefWatchlist
(
)
;
await
new
Promise
(
resolve
=
>
Services
.
telemetry
.
asyncFetchTelemetryData
(
resolve
)
)
;
}
)
;
add_task
(
async
function
actualTest
(
)
{
await
TelemetryController
.
testSetup
(
)
;
let
{
TelemetryTimestamps
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryTimestamps
.
jsm
"
)
;
let
now
=
Date
.
now
(
)
;
TelemetryTimestamps
.
add
(
"
foo
"
)
;
Assert
.
ok
(
TelemetryTimestamps
.
get
(
)
.
foo
!
=
null
)
;
Assert
.
ok
(
TelemetryTimestamps
.
get
(
)
.
foo
>
=
now
)
;
const
YEAR_4000_IN_MS
=
64060588800000
;
TelemetryTimestamps
.
add
(
"
bar
"
YEAR_4000_IN_MS
)
;
Assert
.
equal
(
TelemetryTimestamps
.
get
(
)
.
bar
YEAR_4000_IN_MS
)
;
TelemetryTimestamps
.
add
(
"
bar
"
2
)
;
Assert
.
equal
(
TelemetryTimestamps
.
get
(
)
.
bar
YEAR_4000_IN_MS
)
;
let
threw
=
false
;
try
{
TelemetryTimestamps
.
add
(
"
baz
"
"
this
isn
'
t
a
number
"
)
;
}
catch
(
ex
)
{
threw
=
true
;
}
Assert
.
ok
(
threw
)
;
Assert
.
equal
(
null
TelemetryTimestamps
.
get
(
)
.
baz
)
;
let
simpleMeasurements
=
getSimpleMeasurementsFromTelemetryController
(
)
;
Assert
.
ok
(
simpleMeasurements
!
=
null
)
;
Assert
.
ok
(
simpleMeasurements
.
foo
>
1
)
;
Assert
.
ok
(
simpleMeasurements
.
bar
>
1
)
;
Assert
.
equal
(
undefined
simpleMeasurements
.
baz
)
;
await
TelemetryController
.
testShutdown
(
)
;
}
)
;
