const
{
TelemetryEnvironment
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
const
{
SearchTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
jsm
"
)
;
const
{
TelemetryEnvironmentTesting
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryEnvironmentTesting
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionTestUtils
"
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
SearchTestUtils
.
init
(
this
)
;
function
promiseNextTick
(
)
{
return
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
}
var
gHttpServer
=
null
;
var
gHttpRoot
=
null
;
var
gDataRoot
=
null
;
add_task
(
async
function
setup
(
)
{
TelemetryEnvironmentTesting
.
registerFakeSysInfo
(
)
;
TelemetryEnvironmentTesting
.
spoofGfxAdapter
(
)
;
do_get_profile
(
)
;
let
FOG
=
Cc
[
"
mozilla
.
org
/
toolkit
/
glean
;
1
"
]
.
createInstance
(
Ci
.
nsIFOG
)
;
FOG
.
initializeFOG
(
)
;
const
distroDir
=
FileUtils
.
getDir
(
"
ProfD
"
[
"
sysfeatures
"
"
app0
"
]
true
)
;
do_get_file
(
"
system
.
xpi
"
)
.
copyTo
(
distroDir
"
tel
-
system
-
xpi
tests
.
mozilla
.
org
.
xpi
"
)
;
let
system_addon
=
FileUtils
.
File
(
distroDir
.
path
)
;
system_addon
.
append
(
"
tel
-
system
-
xpi
tests
.
mozilla
.
org
.
xpi
"
)
;
system_addon
.
lastModifiedTime
=
SYSTEM_ADDON_INSTALL_DATE
;
await
loadAddonManager
(
APP_ID
APP_NAME
APP_VERSION
PLATFORM_VERSION
)
;
TelemetryEnvironmentTesting
.
init
(
gAppInfo
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
await
AddonTestUtils
.
overrideBuiltIns
(
{
system
:
[
]
}
)
;
AddonTestUtils
.
addonStartup
.
remove
(
true
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
default_bucket
"
)
;
gHttpServer
=
new
HttpServer
(
)
;
gHttpServer
.
start
(
-
1
)
;
let
port
=
gHttpServer
.
identity
.
primaryPort
;
gHttpRoot
=
"
http
:
/
/
localhost
:
"
+
port
+
"
/
"
;
gDataRoot
=
gHttpRoot
+
"
data
/
"
;
gHttpServer
.
registerDirectory
(
"
/
data
/
"
do_get_cwd
(
)
)
;
registerCleanupFunction
(
(
)
=
>
gHttpServer
.
stop
(
(
)
=
>
{
}
)
)
;
if
(
AppConstants
.
MOZ_BUILD_APP
=
=
"
browser
"
)
{
TelemetryEnvironmentTesting
.
spoofAttributionData
(
)
;
registerCleanupFunction
(
TelemetryEnvironmentTesting
.
cleanupAttributionData
)
;
}
await
TelemetryEnvironmentTesting
.
spoofProfileReset
(
)
;
await
TelemetryEnvironment
.
delayedInit
(
)
;
await
SearchTestUtils
.
useTestEngines
(
"
data
"
"
search
-
extensions
"
)
;
let
initPromise
=
TelemetryEnvironment
.
onInitialized
(
)
;
finishAddonManagerStartup
(
)
;
fakeIntlReady
(
)
;
let
environmentData
=
await
initPromise
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
environmentData
{
isInitial
:
true
}
)
;
TelemetryEnvironmentTesting
.
spoofPartnerInfo
(
)
;
Services
.
obs
.
notifyObservers
(
null
DISTRIBUTION_CUSTOMIZATION_COMPLETE_TOPIC
)
;
environmentData
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
environmentData
{
assertProcessData
:
true
}
)
;
}
)
;
async
function
checkDefaultSearch
(
privateOn
reInitSearchService
)
{
Preferences
.
set
(
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
privateOn
)
;
Preferences
.
set
(
"
browser
.
search
.
separatePrivateDefault
"
privateOn
)
;
let
data
;
if
(
privateOn
)
{
data
=
await
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
}
else
{
data
=
TelemetryEnvironment
.
currentEnvironment
;
}
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
Assert
.
ok
(
!
(
"
defaultSearchEngine
"
in
data
.
settings
)
)
;
Assert
.
ok
(
!
(
"
defaultSearchEngineData
"
in
data
.
settings
)
)
;
Assert
.
ok
(
!
(
"
defaultPrivateSearchEngine
"
in
data
.
settings
)
)
;
Assert
.
ok
(
!
(
"
defaultPrivateSearchEngineData
"
in
data
.
settings
)
)
;
if
(
reInitSearchService
)
{
Services
.
search
.
wrappedJSObject
.
reset
(
)
;
}
await
Services
.
search
.
init
(
)
;
await
promiseNextTick
(
)
;
data
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
Assert
.
equal
(
data
.
settings
.
defaultSearchEngine
"
telemetrySearchIdentifier
"
)
;
let
expectedSearchEngineData
=
{
name
:
"
telemetrySearchIdentifier
"
loadPath
:
"
[
other
]
addEngineWithDetails
:
telemetrySearchIdentifier
search
.
mozilla
.
org
"
origin
:
"
default
"
submissionURL
:
"
https
:
/
/
ar
.
wikipedia
.
org
/
wiki
/
%
D8
%
AE
%
D8
%
A7
%
D8
%
B5
:
%
D8
%
A8
%
D8
%
AD
%
D8
%
AB
?
search
=
&
sourceId
=
Mozilla
-
search
"
}
;
Assert
.
deepEqual
(
data
.
settings
.
defaultSearchEngineData
expectedSearchEngineData
)
;
if
(
privateOn
)
{
Assert
.
equal
(
data
.
settings
.
defaultPrivateSearchEngine
"
telemetrySearchIdentifier
"
)
;
Assert
.
deepEqual
(
data
.
settings
.
defaultPrivateSearchEngineData
expectedSearchEngineData
"
Should
have
the
correct
data
for
the
private
search
engine
"
)
;
}
else
{
Assert
.
ok
(
!
(
"
defaultPrivateSearchEngine
"
in
data
.
settings
)
"
Should
not
have
private
name
recorded
as
the
pref
for
separate
is
off
"
)
;
Assert
.
ok
(
!
(
"
defaultPrivateSearchEngineData
"
in
data
.
settings
)
"
Should
not
have
private
data
recorded
as
the
pref
for
separate
is
off
"
)
;
}
const
SEARCH_ENGINE_ID
=
privateOn
?
"
telemetry_private
"
:
"
telemetry_default
"
;
const
SEARCH_ENGINE_URL
=
https
:
/
/
www
.
example
.
org
/
{
privateOn
?
"
private
"
:
"
"
}
;
await
SearchTestUtils
.
installSearchExtension
(
{
id
:
{
SEARCH_ENGINE_ID
}
test
.
engine
name
:
SEARCH_ENGINE_ID
search_url
:
SEARCH_ENGINE_URL
}
)
;
let
deferred
=
PromiseUtils
.
defer
(
)
;
TelemetryEnvironment
.
registerChangeListener
(
"
testWatch_SearchDefault
"
deferred
.
resolve
)
;
if
(
privateOn
)
{
const
engine
=
await
Services
.
search
.
getEngineByName
(
"
telemetrySearchIdentifier
"
)
;
engine
.
hidden
=
false
;
await
Services
.
search
.
setDefault
(
engine
)
;
await
Services
.
search
.
setDefaultPrivate
(
Services
.
search
.
getEngineByName
(
SEARCH_ENGINE_ID
)
)
;
}
else
{
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
SEARCH_ENGINE_ID
)
)
;
}
await
deferred
.
promise
;
data
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
const
EXPECTED_SEARCH_ENGINE
=
"
other
-
"
+
SEARCH_ENGINE_ID
;
const
EXPECTED_SEARCH_ENGINE_DATA
=
{
name
:
SEARCH_ENGINE_ID
loadPath
:
[
other
]
addEngineWithDetails
:
{
SEARCH_ENGINE_ID
}
test
.
engine
origin
:
"
verified
"
}
;
if
(
privateOn
)
{
Assert
.
equal
(
data
.
settings
.
defaultSearchEngine
"
telemetrySearchIdentifier
"
)
;
Assert
.
deepEqual
(
data
.
settings
.
defaultSearchEngineData
expectedSearchEngineData
)
;
Assert
.
equal
(
data
.
settings
.
defaultPrivateSearchEngine
EXPECTED_SEARCH_ENGINE
)
;
Assert
.
deepEqual
(
data
.
settings
.
defaultPrivateSearchEngineData
EXPECTED_SEARCH_ENGINE_DATA
)
;
}
else
{
Assert
.
equal
(
data
.
settings
.
defaultSearchEngine
EXPECTED_SEARCH_ENGINE
)
;
Assert
.
deepEqual
(
data
.
settings
.
defaultSearchEngineData
EXPECTED_SEARCH_ENGINE_DATA
)
;
}
TelemetryEnvironment
.
unregisterChangeListener
(
"
testWatch_SearchDefault
"
)
;
}
add_task
(
async
function
test_defaultSearchEngine
(
)
{
await
checkDefaultSearch
(
false
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
TelemetryEnvironment
.
registerChangeListener
(
"
testWatch_SearchDefault
"
resolve
)
;
}
)
;
let
engine
=
await
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
obs
.
addObserver
(
function
obs
(
obsSubject
obsTopic
obsData
)
{
try
{
let
searchEngine
=
obsSubject
.
QueryInterface
(
Ci
.
nsISearchEngine
)
;
info
(
"
Observed
"
+
obsData
+
"
for
"
+
searchEngine
.
name
)
;
if
(
obsData
!
=
"
engine
-
added
"
|
|
searchEngine
.
name
!
=
"
engine
-
telemetry
"
)
{
return
;
}
Services
.
obs
.
removeObserver
(
obs
"
browser
-
search
-
engine
-
modified
"
)
;
resolve
(
searchEngine
)
;
}
catch
(
ex
)
{
reject
(
ex
)
;
}
}
"
browser
-
search
-
engine
-
modified
"
)
;
Services
.
search
.
addOpenSearchEngine
(
gDataRoot
+
"
/
engine
.
xml
"
null
)
;
}
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
await
promise
;
TelemetryEnvironment
.
unregisterChangeListener
(
"
testWatch_SearchDefault
"
)
;
let
data
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
Assert
.
deepEqual
(
data
.
settings
.
defaultSearchEngineData
{
name
:
"
engine
-
telemetry
"
loadPath
:
"
[
http
]
localhost
/
engine
-
telemetry
.
xml
"
origin
:
"
verified
"
}
)
;
promise
=
new
Promise
(
resolve
=
>
{
TelemetryEnvironment
.
registerChangeListener
(
"
testWatch_SearchDefault
"
resolve
)
;
}
)
;
engine
.
wrappedJSObject
.
setAttr
(
"
loadPathHash
"
"
broken
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
-
search
-
engine
-
modified
"
"
engine
-
default
"
)
;
await
promise
;
TelemetryEnvironment
.
unregisterChangeListener
(
"
testWatch_SearchDefault
"
)
;
data
=
TelemetryEnvironment
.
currentEnvironment
;
Assert
.
equal
(
data
.
settings
.
defaultSearchEngineData
.
origin
"
invalid
"
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
const
SEARCH_ENGINE_ID
=
"
telemetry_default
"
;
const
EXPECTED_SEARCH_ENGINE
=
"
other
-
"
+
SEARCH_ENGINE_ID
;
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
SEARCH_ENGINE_ID
)
)
;
data
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
Assert
.
equal
(
data
.
settings
.
defaultSearchEngine
EXPECTED_SEARCH_ENGINE
)
;
const
PREF_TEST
=
"
toolkit
.
telemetry
.
test
.
pref1
"
;
const
PREFS_TO_WATCH
=
new
Map
(
[
[
PREF_TEST
{
what
:
TelemetryEnvironment
.
RECORD_PREF_STATE
}
]
]
)
;
Preferences
.
reset
(
PREF_TEST
)
;
await
TelemetryEnvironment
.
testWatchPreferences
(
PREFS_TO_WATCH
)
;
let
deferred
=
PromiseUtils
.
defer
(
)
;
TelemetryEnvironment
.
registerChangeListener
(
"
testSearchEngine_pref
"
deferred
.
resolve
)
;
Preferences
.
set
(
PREF_TEST
1
)
;
await
deferred
.
promise
;
TelemetryEnvironment
.
unregisterChangeListener
(
"
testSearchEngine_pref
"
)
;
data
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
Assert
.
equal
(
data
.
settings
.
defaultSearchEngine
EXPECTED_SEARCH_ENGINE
)
;
}
)
;
add_task
(
async
function
test_defaultPrivateSearchEngine
(
)
{
await
checkDefaultSearch
(
true
true
)
;
}
)
;
add_task
(
async
function
test_defaultSearchEngine_paramsChanged
(
)
{
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
TestEngine
"
search_url
:
"
https
:
/
/
www
.
google
.
com
/
fake1
"
}
true
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
TelemetryEnvironment
.
registerChangeListener
(
"
testWatch_SearchDefault
"
resolve
)
;
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
TestEngine
"
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
await
promise
;
let
data
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
Assert
.
deepEqual
(
data
.
settings
.
defaultSearchEngineData
{
name
:
"
TestEngine
"
loadPath
:
"
[
other
]
addEngineWithDetails
:
testengine
tests
.
mozilla
.
org
"
origin
:
"
verified
"
submissionURL
:
"
https
:
/
/
www
.
google
.
com
/
fake1
?
q
=
"
}
)
;
promise
=
new
Promise
(
resolve
=
>
{
TelemetryEnvironment
.
registerChangeListener
(
"
testWatch_SearchDefault
"
resolve
)
;
}
)
;
engine
.
wrappedJSObject
.
_updateFromManifest
(
extension
.
id
extension
.
baseURI
SearchTestUtils
.
createEngineManifest
(
{
name
:
"
TestEngine
"
version
:
"
1
.
2
"
search_url
:
"
https
:
/
/
www
.
google
.
com
/
fake2
"
}
)
)
;
await
promise
;
data
=
TelemetryEnvironment
.
currentEnvironment
;
TelemetryEnvironmentTesting
.
checkEnvironmentData
(
data
)
;
Assert
.
deepEqual
(
data
.
settings
.
defaultSearchEngineData
{
name
:
"
TestEngine
"
loadPath
:
"
[
other
]
addEngineWithDetails
:
testengine
tests
.
mozilla
.
org
"
origin
:
"
verified
"
submissionURL
:
"
https
:
/
/
www
.
google
.
com
/
fake2
?
q
=
"
}
)
;
await
extension
.
unload
(
)
;
}
)
;
