#
include
"
gtest
/
gtest
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsITelemetry
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Telemetry
.
h
"
#
include
"
TelemetryFixture
.
h
"
using
namespace
mozilla
;
#
define
EXPECTED_STRING
"
Nice
expected
and
creative
string
.
"
namespace
{
void
CheckUintScalar
(
const
char
*
aName
JSContext
*
aCx
JS
:
:
HandleValue
aSnapshot
uint32_t
expectedValue
)
{
JS
:
:
RootedValue
value
(
aCx
)
;
JS
:
:
RootedObject
scalarObj
(
aCx
&
aSnapshot
.
toObject
(
)
)
;
ASSERT_TRUE
(
JS_GetProperty
(
aCx
scalarObj
aName
&
value
)
)
<
<
"
The
test
scalar
must
be
reported
.
"
;
ASSERT_TRUE
(
value
.
isInt32
(
)
)
<
<
"
The
scalar
value
must
be
of
the
correct
type
.
"
;
ASSERT_TRUE
(
value
.
toInt32
(
)
>
=
0
)
<
<
"
The
uint
scalar
type
must
contain
a
value
>
=
0
.
"
;
ASSERT_EQ
(
static_cast
<
uint32_t
>
(
value
.
toInt32
(
)
)
expectedValue
)
<
<
"
The
scalar
value
must
match
the
expected
value
.
"
;
}
void
CheckBoolScalar
(
const
char
*
aName
JSContext
*
aCx
JS
:
:
HandleValue
aSnapshot
bool
expectedValue
)
{
JS
:
:
RootedValue
value
(
aCx
)
;
JS
:
:
RootedObject
scalarObj
(
aCx
&
aSnapshot
.
toObject
(
)
)
;
ASSERT_TRUE
(
JS_GetProperty
(
aCx
scalarObj
aName
&
value
)
)
<
<
"
The
test
scalar
must
be
reported
.
"
;
ASSERT_TRUE
(
value
.
isBoolean
(
)
)
<
<
"
The
scalar
value
must
be
of
the
correct
type
.
"
;
ASSERT_EQ
(
static_cast
<
bool
>
(
value
.
toBoolean
(
)
)
expectedValue
)
<
<
"
The
scalar
value
must
match
the
expected
value
.
"
;
}
void
CheckStringScalar
(
const
char
*
aName
JSContext
*
aCx
JS
:
:
HandleValue
aSnapshot
const
char
*
expectedValue
)
{
JS
:
:
RootedValue
value
(
aCx
)
;
JS
:
:
RootedObject
scalarObj
(
aCx
&
aSnapshot
.
toObject
(
)
)
;
ASSERT_TRUE
(
JS_GetProperty
(
aCx
scalarObj
aName
&
value
)
)
<
<
"
The
test
scalar
must
be
reported
.
"
;
ASSERT_TRUE
(
value
.
isString
(
)
)
<
<
"
The
scalar
value
must
be
of
the
correct
type
.
"
;
bool
sameString
;
ASSERT_TRUE
(
JS_StringEqualsAscii
(
aCx
value
.
toString
(
)
expectedValue
&
sameString
)
)
<
<
"
JS
String
comparison
failed
"
;
ASSERT_TRUE
(
sameString
)
<
<
"
The
scalar
value
must
match
the
expected
string
"
;
}
void
CheckKeyedUintScalar
(
const
char
*
aName
const
char
*
aKey
JSContext
*
aCx
JS
:
:
HandleValue
aSnapshot
uint32_t
expectedValue
)
{
JS
:
:
RootedValue
keyedScalar
(
aCx
)
;
JS
:
:
RootedObject
scalarObj
(
aCx
&
aSnapshot
.
toObject
(
)
)
;
ASSERT_TRUE
(
JS_GetProperty
(
aCx
scalarObj
aName
&
keyedScalar
)
)
<
<
"
The
keyed
scalar
must
be
reported
.
"
;
CheckUintScalar
(
aKey
aCx
keyedScalar
expectedValue
)
;
}
void
CheckKeyedBoolScalar
(
const
char
*
aName
const
char
*
aKey
JSContext
*
aCx
JS
:
:
HandleValue
aSnapshot
bool
expectedValue
)
{
JS
:
:
RootedValue
keyedScalar
(
aCx
)
;
JS
:
:
RootedObject
scalarObj
(
aCx
&
aSnapshot
.
toObject
(
)
)
;
ASSERT_TRUE
(
JS_GetProperty
(
aCx
scalarObj
aName
&
keyedScalar
)
)
<
<
"
The
keyed
scalar
must
be
reported
.
"
;
CheckBoolScalar
(
aKey
aCx
keyedScalar
expectedValue
)
;
}
void
CheckNumberOfProperties
(
const
char
*
aName
JSContext
*
aCx
JS
:
:
HandleValue
aSnapshot
uint32_t
expectedNumProperties
)
{
JS
:
:
RootedValue
keyedScalar
(
aCx
)
;
JS
:
:
RootedObject
scalarObj
(
aCx
&
aSnapshot
.
toObject
(
)
)
;
ASSERT_TRUE
(
JS_GetProperty
(
aCx
scalarObj
aName
&
keyedScalar
)
)
<
<
"
The
keyed
scalar
must
be
reported
.
"
;
JS
:
:
RootedObject
keyedScalarObj
(
aCx
&
keyedScalar
.
toObject
(
)
)
;
JS
:
:
Rooted
<
JS
:
:
IdVector
>
ids
(
aCx
JS
:
:
IdVector
(
aCx
)
)
;
ASSERT_TRUE
(
JS_Enumerate
(
aCx
keyedScalarObj
&
ids
)
)
<
<
"
We
must
be
able
to
get
keyed
scalar
members
.
"
;
ASSERT_EQ
(
expectedNumProperties
ids
.
length
(
)
)
<
<
"
The
scalar
must
report
the
expected
number
of
properties
.
"
;
}
void
GetScalarsSnapshot
(
bool
aKeyed
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
)
{
nsCOMPtr
<
nsITelemetry
>
telemetry
=
do_GetService
(
"
mozilla
.
org
/
base
/
telemetry
;
1
"
)
;
JS
:
:
RootedValue
scalarsSnapshot
(
aCx
)
;
nsresult
rv
;
if
(
aKeyed
)
{
rv
=
telemetry
-
>
SnapshotKeyedScalars
(
nsITelemetry
:
:
DATASET_RELEASE_CHANNEL_OPTIN
false
aCx
0
&
scalarsSnapshot
)
;
}
else
{
rv
=
telemetry
-
>
SnapshotScalars
(
nsITelemetry
:
:
DATASET_RELEASE_CHANNEL_OPTIN
false
aCx
0
&
scalarsSnapshot
)
;
}
ASSERT_EQ
(
rv
NS_OK
)
<
<
"
Creating
a
snapshot
of
the
data
must
not
fail
.
"
;
ASSERT_TRUE
(
scalarsSnapshot
.
isObject
(
)
)
<
<
"
The
snapshot
must
be
an
object
.
"
;
JS
:
:
RootedValue
parentScalars
(
aCx
)
;
JS
:
:
RootedObject
scalarObj
(
aCx
&
scalarsSnapshot
.
toObject
(
)
)
;
Unused
<
<
JS_GetProperty
(
aCx
scalarObj
"
default
"
&
parentScalars
)
;
aResult
.
set
(
parentScalars
)
;
}
}
TEST_F
(
TelemetryTestFixture
ScalarUnsigned
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
const
uint32_t
kInitialValue
=
1172015
;
const
uint32_t
kExpectedUint
=
1172017
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_UNSIGNED_INT_KIND
kInitialValue
)
;
Telemetry
:
:
ScalarAdd
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_UNSIGNED_INT_KIND
kExpectedUint
-
kInitialValue
)
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
false
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckUintScalar
(
"
telemetry
.
test
.
unsigned_int_kind
"
cx
.
GetJSContext
(
)
scalarsSnapshot
kExpectedUint
)
;
const
uint32_t
kExpectedUintMaximum
=
kExpectedUint
*
2
;
Telemetry
:
:
ScalarSetMaximum
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_UNSIGNED_INT_KIND
kExpectedUintMaximum
)
;
#
ifndef
DEBUG
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_UNSIGNED_INT_KIND
false
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_UNSIGNED_INT_KIND
NS_LITERAL_STRING
(
"
test
"
)
)
;
#
endif
GetScalarsSnapshot
(
false
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckUintScalar
(
"
telemetry
.
test
.
unsigned_int_kind
"
cx
.
GetJSContext
(
)
scalarsSnapshot
kExpectedUintMaximum
)
;
}
TEST_F
(
TelemetryTestFixture
ScalarBoolean
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_BOOLEAN_KIND
true
)
;
#
ifndef
DEBUG
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_BOOLEAN_KIND
static_cast
<
uint32_t
>
(
12
)
)
;
Telemetry
:
:
ScalarSetMaximum
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_BOOLEAN_KIND
20
)
;
Telemetry
:
:
ScalarAdd
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_BOOLEAN_KIND
2
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_BOOLEAN_KIND
NS_LITERAL_STRING
(
"
test
"
)
)
;
#
endif
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
false
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckBoolScalar
(
"
telemetry
.
test
.
boolean_kind
"
cx
.
GetJSContext
(
)
scalarsSnapshot
true
)
;
}
TEST_F
(
TelemetryTestFixture
ScalarString
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_STRING_KIND
NS_LITERAL_STRING
(
EXPECTED_STRING
)
)
;
#
ifndef
DEBUG
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_STRING_KIND
static_cast
<
uint32_t
>
(
12
)
)
;
Telemetry
:
:
ScalarSetMaximum
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_STRING_KIND
20
)
;
Telemetry
:
:
ScalarAdd
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_STRING_KIND
2
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_STRING_KIND
true
)
;
#
endif
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
false
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckStringScalar
(
"
telemetry
.
test
.
string_kind
"
cx
.
GetJSContext
(
)
scalarsSnapshot
EXPECTED_STRING
)
;
}
TEST_F
(
TelemetryTestFixture
KeyedScalarUnsigned
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
const
char
*
kScalarName
=
"
telemetry
.
test
.
keyed_unsigned_int
"
;
const
uint32_t
kKey1Value
=
1172015
;
const
uint32_t
kKey2Value
=
1172017
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_UNSIGNED_INT
NS_LITERAL_STRING
(
"
key1
"
)
kKey1Value
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_UNSIGNED_INT
NS_LITERAL_STRING
(
"
key2
"
)
kKey1Value
)
;
Telemetry
:
:
ScalarAdd
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_UNSIGNED_INT
NS_LITERAL_STRING
(
"
key2
"
)
2
)
;
#
ifndef
DEBUG
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_UNSIGNED_INT
NS_LITERAL_STRING
(
"
key1
"
)
false
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_UNSIGNED_INT
NS_LITERAL_STRING
(
"
test
"
)
)
;
#
endif
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckKeyedUintScalar
(
kScalarName
"
key1
"
cx
.
GetJSContext
(
)
scalarsSnapshot
kKey1Value
)
;
CheckKeyedUintScalar
(
kScalarName
"
key2
"
cx
.
GetJSContext
(
)
scalarsSnapshot
kKey2Value
)
;
CheckNumberOfProperties
(
kScalarName
cx
.
GetJSContext
(
)
scalarsSnapshot
2
)
;
const
uint32_t
kExpectedUintMaximum
=
kKey1Value
*
2
;
Telemetry
:
:
ScalarSetMaximum
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_UNSIGNED_INT
NS_LITERAL_STRING
(
"
key1
"
)
kExpectedUintMaximum
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckKeyedUintScalar
(
kScalarName
"
key1
"
cx
.
GetJSContext
(
)
scalarsSnapshot
kExpectedUintMaximum
)
;
CheckKeyedUintScalar
(
kScalarName
"
key2
"
cx
.
GetJSContext
(
)
scalarsSnapshot
kKey2Value
)
;
CheckNumberOfProperties
(
kScalarName
cx
.
GetJSContext
(
)
scalarsSnapshot
2
)
;
}
TEST_F
(
TelemetryTestFixture
KeyedScalarBoolean
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_BOOLEAN_KIND
NS_LITERAL_STRING
(
"
key1
"
)
false
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_BOOLEAN_KIND
NS_LITERAL_STRING
(
"
key2
"
)
true
)
;
#
ifndef
DEBUG
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_BOOLEAN_KIND
NS_LITERAL_STRING
(
"
key1
"
)
static_cast
<
uint32_t
>
(
12
)
)
;
Telemetry
:
:
ScalarSetMaximum
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_BOOLEAN_KIND
NS_LITERAL_STRING
(
"
key1
"
)
20
)
;
Telemetry
:
:
ScalarAdd
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_BOOLEAN_KIND
NS_LITERAL_STRING
(
"
key1
"
)
2
)
;
#
endif
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
const
char
*
kScalarName
=
"
telemetry
.
test
.
keyed_boolean_kind
"
;
CheckKeyedBoolScalar
(
kScalarName
"
key1
"
cx
.
GetJSContext
(
)
scalarsSnapshot
false
)
;
CheckKeyedBoolScalar
(
kScalarName
"
key2
"
cx
.
GetJSContext
(
)
scalarsSnapshot
true
)
;
CheckNumberOfProperties
(
kScalarName
cx
.
GetJSContext
(
)
scalarsSnapshot
2
)
;
}
TEST_F
(
TelemetryTestFixture
NonMainThreadAdd
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
NS_NewRunnableFunction
(
[
]
(
)
-
>
void
{
Telemetry
:
:
ScalarAdd
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_UNSIGNED_INT_KIND
37
)
;
}
)
;
nsCOMPtr
<
nsIThread
>
testingThread
;
nsresult
rv
=
NS_NewNamedThread
(
"
Test
thread
"
getter_AddRefs
(
testingThread
)
runnable
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
testingThread
-
>
Shutdown
(
)
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
false
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckUintScalar
(
"
telemetry
.
test
.
unsigned_int_kind
"
cx
.
GetJSContext
(
)
scalarsSnapshot
37
)
;
}
