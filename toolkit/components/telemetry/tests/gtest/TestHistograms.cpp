#
include
"
gtest
/
gtest
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsITelemetry
.
h
"
#
include
"
TelemetryFixture
.
h
"
#
include
"
TelemetryTestHelpers
.
h
"
using
namespace
mozilla
;
using
namespace
TelemetryTestHelpers
;
TEST_F
(
TelemetryTestFixture
AccumulateCountHistogram
)
{
const
uint32_t
kExpectedValue
=
200
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
const
char
*
telemetryTestCountName
=
Telemetry
:
:
GetHistogramName
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
)
;
ASSERT_STREQ
(
telemetryTestCountName
"
TELEMETRY_TEST_COUNT
"
)
<
<
"
The
histogram
name
is
wrong
"
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_COUNT
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
kExpectedValue
/
2
)
;
Telemetry
:
:
Accumulate
(
"
TELEMETRY_TEST_COUNT
"
kExpectedValue
/
2
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
telemetryTestCountName
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
telemetryTestCountName
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateKeyedCountHistogram
)
{
const
uint32_t
kExpectedValue
=
100
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_COUNT
"
)
true
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
sample
"
)
kExpectedValue
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_COUNT
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sample
"
histogram
&
expectedKeyData
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
sum
"
;
}
TEST_F
(
TelemetryTestFixture
TestKeyedKeysHistogram
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
JS
:
:
RootedValue
testHistogram
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
rval
(
cx
.
GetJSContext
(
)
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_KEYS
"
)
true
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_KEYS
NS_LITERAL_CSTRING
(
"
not
-
allowed
"
)
1
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_KEYS
NS_LITERAL_CSTRING
(
"
testkey
"
)
0
)
;
Telemetry
:
:
Accumulate
(
"
TELEMETRY_TEST_KEYED_KEYS
"
NS_LITERAL_CSTRING
(
"
not
-
allowed
"
)
1
)
;
Telemetry
:
:
Accumulate
(
"
TELEMETRY_TEST_KEYED_KEYS
"
NS_LITERAL_CSTRING
(
"
CommonKey
"
)
1
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_KEYS
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_KEYS
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
testkey
"
histogram
&
expectedKeyData
)
;
ASSERT_TRUE
(
!
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Cannot
find
the
expected
key
in
the
histogram
data
"
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
0U
)
<
<
"
The
histogram
is
not
returning
expected
sum
for
'
testkey
'
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
CommonKey
"
histogram
&
expectedKeyData
)
;
ASSERT_TRUE
(
!
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Cannot
find
the
expected
key
in
the
histogram
data
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
1U
)
<
<
"
The
histogram
is
not
returning
expected
sum
for
'
CommonKey
'
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
not
-
allowed
"
histogram
&
expectedKeyData
)
;
ASSERT_TRUE
(
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Unallowed
keys
must
not
be
recorded
in
the
histogram
data
"
;
const
uint32_t
expectedAccumulateUnknownCount
=
2
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckKeyedUintScalar
(
"
telemetry
.
accumulate_unknown_histogram_keys
"
"
TELEMETRY_TEST_KEYED_KEYS
"
cx
.
GetJSContext
(
)
scalarsSnapshot
expectedAccumulateUnknownCount
)
;
}
TEST_F
(
TelemetryTestFixture
AccumulateCategoricalHistogram
)
{
const
uint32_t
kExpectedValue
=
2
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_CATEGORICAL
"
)
false
)
;
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
)
;
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
TELEMETRY_TEST_CATEGORICAL
NS_LITERAL_CSTRING
(
"
CommonLabel
"
)
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_CATEGORICAL
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_CATEGORICAL
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
values
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
histogram
&
values
)
;
JS
:
:
RootedValue
value
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
)
values
&
value
)
;
uint32_t
uValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
value
&
uValue
)
;
ASSERT_EQ
(
uValue
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateKeyedCategoricalHistogram
)
{
const
uint32_t
kSampleExpectedValue
=
2
;
const
uint32_t
kOtherSampleExpectedValue
=
1
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
)
true
)
;
Telemetry
:
:
AccumulateCategoricalKeyed
(
NS_LITERAL_CSTRING
(
"
sample
"
)
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
;
Telemetry
:
:
AccumulateCategoricalKeyed
(
NS_LITERAL_CSTRING
(
"
sample
"
)
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
;
Telemetry
:
:
AccumulateCategoricalKeyed
(
NS_LITERAL_CSTRING
(
"
other
-
sample
"
)
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sample
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sample
"
histogram
&
sample
)
;
JS
:
:
RootedValue
sampleValues
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
sample
&
sampleValues
)
;
JS
:
:
RootedValue
sampleValue
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
sampleValues
&
sampleValue
)
;
uint32_t
uSampleValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sampleValue
&
uSampleValue
)
;
ASSERT_EQ
(
uSampleValue
kSampleExpectedValue
)
<
<
"
The
sample
histogram
is
not
returning
expected
value
"
;
JS
:
:
RootedValue
otherSample
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
other
-
sample
"
histogram
&
otherSample
)
;
JS
:
:
RootedValue
otherValues
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
otherSample
&
otherValues
)
;
JS
:
:
RootedValue
otherValue
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
otherValues
&
otherValue
)
;
uint32_t
uOtherValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
otherValue
&
uOtherValue
)
;
ASSERT_EQ
(
uOtherValue
kOtherSampleExpectedValue
)
<
<
"
The
other
-
sample
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateCountHistogram_MultipleSamples
)
{
nsTArray
<
uint32_t
>
samples
(
{
4
4
4
}
)
;
const
uint32_t
kExpectedSum
=
12
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_COUNT
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_COUNT
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedSum
)
<
<
"
This
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateLinearHistogram_MultipleSamples
)
{
nsTArray
<
uint32_t
>
samples
(
{
4
4
4
}
)
;
const
uint32_t
kExpectedCount
=
3
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_LINEAR
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_LINEAR
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_LINEAR
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_LINEAR
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
values
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
histogram
&
values
)
;
JS
:
:
RootedValue
count
(
cx
.
GetJSContext
(
)
)
;
const
uint32_t
index
=
1
;
GetElement
(
cx
.
GetJSContext
(
)
index
values
&
count
)
;
uint32_t
uCount
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
count
&
uCount
)
;
ASSERT_EQ
(
uCount
kExpectedCount
)
<
<
"
The
histogram
did
not
accumulate
the
correct
number
of
values
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateLinearHistogram_DifferentSamples
)
{
nsTArray
<
uint32_t
>
samples
(
{
4
8
2147483646
uint32_t
(
INT_MAX
)
+
1
UINT32_MAX
}
)
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
mTelemetry
-
>
ClearScalars
(
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_LINEAR
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_LINEAR
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_LINEAR
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_LINEAR
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
values
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
histogram
&
values
)
;
JS
:
:
RootedValue
countFirst
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
countLast
(
cx
.
GetJSContext
(
)
)
;
const
uint32_t
firstIndex
=
1
;
const
uint32_t
lastIndex
=
INT32_MAX
-
1
;
GetElement
(
cx
.
GetJSContext
(
)
firstIndex
values
&
countFirst
)
;
GetElement
(
cx
.
GetJSContext
(
)
lastIndex
values
&
countLast
)
;
uint32_t
uCountFirst
=
0
;
uint32_t
uCountLast
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countFirst
&
uCountFirst
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countLast
&
uCountLast
)
;
const
uint32_t
kExpectedCountFirst
=
2
;
const
uint32_t
kExpectedCountLast
=
3
;
ASSERT_EQ
(
uCountFirst
kExpectedCountFirst
)
<
<
"
The
first
bucket
did
not
accumulate
the
correct
number
of
values
"
;
ASSERT_EQ
(
uCountLast
kExpectedCountLast
)
<
<
"
The
last
bucket
did
not
accumulate
the
correct
number
of
values
"
;
const
uint32_t
expectedAccumulateClampedCount
=
2
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckKeyedUintScalar
(
"
telemetry
.
accumulate_clamped_values
"
"
TELEMETRY_TEST_LINEAR
"
cx
.
GetJSContext
(
)
scalarsSnapshot
expectedAccumulateClampedCount
)
;
}
TEST_F
(
TelemetryTestFixture
AccumulateKeyedCountHistogram_MultipleSamples
)
{
const
nsTArray
<
uint32_t
>
samples
(
{
5
10
15
}
)
;
const
uint32_t
kExpectedSum
=
5
+
10
+
15
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_COUNT
"
)
true
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
sample
"
)
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_COUNT
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sample
"
histogram
&
expectedKeyData
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedSum
)
<
<
"
The
histogram
is
not
returning
expected
sum
"
;
}
TEST_F
(
TelemetryTestFixture
TestKeyedLinearHistogram_MultipleSamples
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
mTelemetry
-
>
ClearScalars
(
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_LINEAR
"
)
true
)
;
const
nsTArray
<
uint32_t
>
samples
(
{
1
5
250000
UINT_MAX
}
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_LINEAR
NS_LITERAL_CSTRING
(
"
testkey
"
)
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_LINEAR
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_LINEAR
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
testkey
"
histogram
&
expectedKeyData
)
;
ASSERT_TRUE
(
!
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Cannot
find
the
expected
key
in
the
histogram
data
"
;
JS
:
:
RootedValue
values
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
expectedKeyData
&
values
)
;
JS
:
:
RootedValue
countFirst
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
countLast
(
cx
.
GetJSContext
(
)
)
;
const
uint32_t
firstIndex
=
1
;
const
uint32_t
lastIndex
=
250000
;
GetElement
(
cx
.
GetJSContext
(
)
firstIndex
values
&
countFirst
)
;
GetElement
(
cx
.
GetJSContext
(
)
lastIndex
values
&
countLast
)
;
uint32_t
uCountFirst
=
0
;
uint32_t
uCountLast
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countFirst
&
uCountFirst
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countLast
&
uCountLast
)
;
const
uint32_t
kExpectedCountFirst
=
2
;
const
uint32_t
kExpectedCountLast
=
2
;
ASSERT_EQ
(
uCountFirst
kExpectedCountFirst
)
<
<
"
The
first
bucket
did
not
accumulate
the
correct
number
of
values
for
"
"
key
'
testkey
'
"
;
ASSERT_EQ
(
uCountLast
kExpectedCountLast
)
<
<
"
The
last
bucket
did
not
accumulate
the
correct
number
of
values
for
"
"
key
'
testkey
'
"
;
const
uint32_t
expectedAccumulateClampedCount
=
1
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckKeyedUintScalar
(
"
telemetry
.
accumulate_clamped_values
"
"
TELEMETRY_TEST_KEYED_LINEAR
"
cx
.
GetJSContext
(
)
scalarsSnapshot
expectedAccumulateClampedCount
)
;
}
TEST_F
(
TelemetryTestFixture
TestKeyedKeysHistogram_MultipleSamples
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
mTelemetry
-
>
ClearScalars
(
)
;
const
nsTArray
<
uint32_t
>
samples
(
{
false
false
true
32
true
}
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_KEYS
"
)
true
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_KEYS
NS_LITERAL_CSTRING
(
"
not
-
allowed
"
)
samples
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_KEYS
NS_LITERAL_CSTRING
(
"
testkey
"
)
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_KEYS
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_KEYS
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
testKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
testkey
"
histogram
&
testKeyData
)
;
ASSERT_TRUE
(
!
testKeyData
.
isUndefined
(
)
)
<
<
"
Cannot
find
the
key
'
testkey
'
in
the
histogram
data
"
;
JS
:
:
RootedValue
values
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
testKeyData
&
values
)
;
const
uint32_t
falseIndex
=
0
;
const
uint32_t
trueIndex
=
1
;
const
uint32_t
otherIndex
=
2
;
JS
:
:
RootedValue
countFalse
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
countTrue
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
countOther
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
falseIndex
values
&
countFalse
)
;
GetElement
(
cx
.
GetJSContext
(
)
trueIndex
values
&
countTrue
)
;
GetElement
(
cx
.
GetJSContext
(
)
otherIndex
values
&
countOther
)
;
uint32_t
uCountFalse
=
0
;
uint32_t
uCountTrue
=
0
;
uint32_t
uCountOther
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countFalse
&
uCountFalse
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countTrue
&
uCountTrue
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countOther
&
uCountOther
)
;
const
uint32_t
kExpectedCountFalse
=
2
;
const
uint32_t
kExpectedCountTrue
=
3
;
const
uint32_t
kExpectedCountOther
=
0
;
ASSERT_EQ
(
uCountFalse
kExpectedCountFalse
)
<
<
"
The
histogram
did
not
accumulate
the
correct
number
of
'
false
'
"
"
booleans
for
key
'
testkey
'
"
;
ASSERT_EQ
(
uCountTrue
kExpectedCountTrue
)
<
<
"
The
histogram
did
not
accumulate
the
correct
number
of
'
true
'
"
"
booleans
for
key
'
testkey
'
"
;
ASSERT_EQ
(
uCountOther
kExpectedCountOther
)
<
<
"
The
histogram
did
not
accumulate
the
correct
number
of
undefined
"
"
values
for
key
'
testkey
'
"
;
JS
:
:
RootedValue
commonKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
CommonKey
"
histogram
&
commonKeyData
)
;
ASSERT_TRUE
(
commonKeyData
.
isUndefined
(
)
)
<
<
"
Found
data
in
key
'
CommonKey
'
even
though
we
accumulated
no
data
to
"
"
it
"
;
JS
:
:
RootedValue
notAllowedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
not
-
allowed
"
histogram
&
notAllowedKeyData
)
;
ASSERT_TRUE
(
notAllowedKeyData
.
isUndefined
(
)
)
<
<
"
Found
data
in
key
'
not
-
allowed
'
even
though
accumuling
data
to
it
is
"
"
not
allowed
"
;
const
uint32_t
expectedAccumulateUnknownCount
=
1
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckKeyedUintScalar
(
"
telemetry
.
accumulate_unknown_histogram_keys
"
"
TELEMETRY_TEST_KEYED_KEYS
"
cx
.
GetJSContext
(
)
scalarsSnapshot
expectedAccumulateUnknownCount
)
;
}
TEST_F
(
TelemetryTestFixture
AccumulateCategoricalHistogram_MultipleStringLabels
)
{
const
uint32_t
kExpectedValue
=
2
;
const
nsTArray
<
nsCString
>
labels
(
{
NS_LITERAL_CSTRING
(
"
CommonLabel
"
)
NS_LITERAL_CSTRING
(
"
CommonLabel
"
)
}
)
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_CATEGORICAL
"
)
false
)
;
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
TELEMETRY_TEST_CATEGORICAL
labels
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_CATEGORICAL
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_CATEGORICAL
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
values
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
histogram
&
values
)
;
JS
:
:
RootedValue
value
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
)
values
&
value
)
;
uint32_t
uValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
value
&
uValue
)
;
ASSERT_EQ
(
uValue
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
const
nsTArray
<
nsCString
>
badLabelArray
(
{
NS_LITERAL_CSTRING
(
"
CommonLabel
"
)
NS_LITERAL_CSTRING
(
"
BadLabel
"
)
}
)
;
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
TELEMETRY_TEST_CATEGORICAL
badLabelArray
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_CATEGORICAL
"
&
snapshot
false
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_CATEGORICAL
"
snapshot
&
histogram
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
histogram
&
values
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
)
values
&
value
)
;
uValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
value
&
uValue
)
;
ASSERT_EQ
(
uValue
kExpectedValue
)
<
<
"
The
histogram
accumulated
data
when
it
should
not
have
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateCategoricalHistogram_MultipleEnumValues
)
{
const
uint32_t
kExpectedValue
=
2
;
const
nsTArray
<
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
>
enumLabels
(
{
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
}
)
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_CATEGORICAL
"
)
false
)
;
Telemetry
:
:
AccumulateCategorical
<
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
>
(
enumLabels
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_CATEGORICAL
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_CATEGORICAL
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
values
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
histogram
&
values
)
;
JS
:
:
RootedValue
value
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
)
values
&
value
)
;
uint32_t
uValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
value
&
uValue
)
;
ASSERT_EQ
(
uValue
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateKeyedCategoricalHistogram_MultipleEnumValues
)
{
const
uint32_t
kExpectedCommonLabel
=
2
;
const
uint32_t
kExpectedLabel2
=
1
;
const
nsTArray
<
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
>
enumLabels
(
{
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
Label2
}
)
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
)
true
)
;
Telemetry
:
:
AccumulateCategoricalKeyed
(
NS_LITERAL_CSTRING
(
"
sampleKey
"
)
enumLabels
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sample
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sampleKey
"
histogram
&
sample
)
;
JS
:
:
RootedValue
sampleKeyValues
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
values
"
sample
&
sampleKeyValues
)
;
JS
:
:
RootedValue
commonLabelValue
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
sampleKeyValues
&
commonLabelValue
)
;
uint32_t
uCommonLabelValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
commonLabelValue
&
uCommonLabelValue
)
;
ASSERT_EQ
(
uCommonLabelValue
kExpectedCommonLabel
)
<
<
"
The
sampleKey
histogram
did
not
accumulate
the
correct
number
of
"
"
CommonLabel
samples
"
;
JS
:
:
RootedValue
label2Value
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
Label2
)
sampleKeyValues
&
label2Value
)
;
uint32_t
uLabel2Value
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
label2Value
&
uLabel2Value
)
;
ASSERT_EQ
(
uLabel2Value
kExpectedLabel2
)
<
<
"
The
sampleKey
histogram
did
not
accumulate
the
correct
number
of
"
"
Label2
samples
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateTimeDelta
)
{
const
uint32_t
kExpectedValue
=
100
;
const
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
const
TimeDuration
delta
=
TimeDuration
:
:
FromMilliseconds
(
50
)
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_COUNT
"
)
false
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
start
-
delta
start
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
start
-
delta
start
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
start
start
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
start
+
delta
start
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_COUNT
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateKeyedTimeDelta
)
{
const
uint32_t
kExpectedValue
=
100
;
const
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
const
TimeDuration
delta
=
TimeDuration
:
:
FromMilliseconds
(
50
)
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_COUNT
"
)
true
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
sample
"
)
start
-
delta
start
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
sample
"
)
start
-
delta
start
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
sample
"
)
start
+
delta
start
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
sample
"
)
start
start
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_COUNT
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sample
"
histogram
&
expectedKeyData
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
sum
"
;
}
