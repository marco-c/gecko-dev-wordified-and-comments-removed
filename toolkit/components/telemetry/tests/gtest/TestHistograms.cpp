#
include
"
gtest
/
gtest
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
nsITelemetry
.
h
"
#
include
"
Telemetry
.
h
"
#
include
"
TelemetryFixture
.
h
"
#
include
"
TelemetryTestHelpers
.
h
"
using
namespace
mozilla
;
using
namespace
TelemetryTestHelpers
;
TEST_F
(
TelemetryTestFixture
AccumulateCountHistogram
)
{
const
uint32_t
kExpectedValue
=
100
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_COUNT
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
kExpectedValue
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_COUNT
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateKeyedCountHistogram
)
{
const
uint32_t
kExpectedValue
=
100
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_COUNT
"
)
true
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
sample
"
)
kExpectedValue
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_COUNT
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sample
"
histogram
&
expectedKeyData
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
sum
"
;
}
TEST_F
(
TelemetryTestFixture
TestKeyedKeysHistogram
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
JS
:
:
RootedValue
testHistogram
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
rval
(
cx
.
GetJSContext
(
)
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_KEYS
"
)
true
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_KEYS
NS_LITERAL_CSTRING
(
"
not
-
allowed
"
)
1
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_KEYS
NS_LITERAL_CSTRING
(
"
testkey
"
)
0
)
;
Telemetry
:
:
Accumulate
(
"
TELEMETRY_TEST_KEYED_KEYS
"
NS_LITERAL_CSTRING
(
"
not
-
allowed
"
)
1
)
;
Telemetry
:
:
Accumulate
(
"
TELEMETRY_TEST_KEYED_KEYS
"
NS_LITERAL_CSTRING
(
"
CommonKey
"
)
1
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_KEYS
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_KEYS
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
testkey
"
histogram
&
expectedKeyData
)
;
ASSERT_TRUE
(
!
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Cannot
find
the
expected
key
in
the
histogram
data
"
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
0U
)
<
<
"
The
histogram
is
not
returning
expected
sum
for
'
testkey
'
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
CommonKey
"
histogram
&
expectedKeyData
)
;
ASSERT_TRUE
(
!
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Cannot
find
the
expected
key
in
the
histogram
data
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
1U
)
<
<
"
The
histogram
is
not
returning
expected
sum
for
'
CommonKey
'
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
not
-
allowed
"
histogram
&
expectedKeyData
)
;
ASSERT_TRUE
(
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Unallowed
keys
must
not
be
recorded
in
the
histogram
data
"
;
const
uint32_t
expectedAccumulateUnknownCount
=
2
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckKeyedUintScalar
(
"
telemetry
.
accumulate_unknown_histogram_keys
"
"
TELEMETRY_TEST_KEYED_KEYS
"
cx
.
GetJSContext
(
)
scalarsSnapshot
expectedAccumulateUnknownCount
)
;
}
TEST_F
(
TelemetryTestFixture
AccumulateCategoricalHistogram
)
{
const
uint32_t
kExpectedValue
=
2
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_CATEGORICAL
"
)
false
)
;
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
)
;
Telemetry
:
:
AccumulateCategorical
(
Telemetry
:
:
TELEMETRY_TEST_CATEGORICAL
NS_LITERAL_CSTRING
(
"
CommonLabel
"
)
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_CATEGORICAL
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_CATEGORICAL
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
counts
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
counts
"
histogram
&
counts
)
;
JS
:
:
RootedValue
value
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_CATEGORICAL
:
:
CommonLabel
)
counts
&
value
)
;
uint32_t
uValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
value
&
uValue
)
;
ASSERT_EQ
(
uValue
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateKeyedCategoricalHistogram
)
{
const
uint32_t
kSampleExpectedValue
=
2
;
const
uint32_t
kOtherSampleExpectedValue
=
1
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
)
true
)
;
Telemetry
:
:
AccumulateCategoricalKeyed
(
NS_LITERAL_CSTRING
(
"
sample
"
)
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
;
Telemetry
:
:
AccumulateCategoricalKeyed
(
NS_LITERAL_CSTRING
(
"
sample
"
)
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
;
Telemetry
:
:
AccumulateCategoricalKeyed
(
NS_LITERAL_CSTRING
(
"
other
-
sample
"
)
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
&
snapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_CATEGORICAL
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sample
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sample
"
histogram
&
sample
)
;
JS
:
:
RootedValue
sampleCounts
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
counts
"
sample
&
sampleCounts
)
;
JS
:
:
RootedValue
sampleValue
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
sampleCounts
&
sampleValue
)
;
uint32_t
uSampleValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sampleValue
&
uSampleValue
)
;
ASSERT_EQ
(
uSampleValue
kSampleExpectedValue
)
<
<
"
The
sample
histogram
is
not
returning
expected
value
"
;
JS
:
:
RootedValue
otherSample
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
other
-
sample
"
histogram
&
otherSample
)
;
JS
:
:
RootedValue
otherCounts
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
counts
"
otherSample
&
otherCounts
)
;
JS
:
:
RootedValue
otherValue
(
cx
.
GetJSContext
(
)
)
;
GetElement
(
cx
.
GetJSContext
(
)
static_cast
<
uint32_t
>
(
Telemetry
:
:
LABELS_TELEMETRY_TEST_KEYED_CATEGORICAL
:
:
CommonLabel
)
otherCounts
&
otherValue
)
;
uint32_t
uOtherValue
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
otherValue
&
uOtherValue
)
;
ASSERT_EQ
(
uOtherValue
kOtherSampleExpectedValue
)
<
<
"
The
other
-
sample
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateCountHistogram_MultipleSamples
)
{
nsTArray
<
uint32_t
>
samples
(
{
4
4
4
}
)
;
const
uint32_t
kExpectedSum
=
12
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_COUNT
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_COUNT
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_COUNT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedSum
)
<
<
"
This
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateLinearHistogram_MultipleSamples
)
{
nsTArray
<
uint32_t
>
samples
(
{
4
4
4
}
)
;
const
uint32_t
kExpectedCount
=
3
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_LINEAR
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_LINEAR
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_LINEAR
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_LINEAR
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
counts
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
counts
"
histogram
&
counts
)
;
JS
:
:
RootedValue
count
(
cx
.
GetJSContext
(
)
)
;
const
uint32_t
index
=
1
;
GetElement
(
cx
.
GetJSContext
(
)
index
counts
&
count
)
;
uint32_t
uCount
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
count
&
uCount
)
;
ASSERT_EQ
(
uCount
kExpectedCount
)
<
<
"
The
histogram
did
not
accumulate
the
correct
number
of
values
"
;
}
TEST_F
(
TelemetryTestFixture
AccumulateLinearHistogram_DifferentSamples
)
{
nsTArray
<
uint32_t
>
samples
(
{
4
8
2147483646
}
)
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_LINEAR
"
)
false
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_LINEAR
samples
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_LINEAR
"
&
snapshot
false
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_LINEAR
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
counts
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
counts
"
histogram
&
counts
)
;
JS
:
:
RootedValue
countFirst
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
countLast
(
cx
.
GetJSContext
(
)
)
;
const
uint32_t
firstIndex
=
1
;
const
uint32_t
lastIndex
=
9
;
GetElement
(
cx
.
GetJSContext
(
)
firstIndex
counts
&
countFirst
)
;
GetElement
(
cx
.
GetJSContext
(
)
lastIndex
counts
&
countLast
)
;
uint32_t
uCountFirst
=
0
;
uint32_t
uCountLast
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countFirst
&
uCountFirst
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
countLast
&
uCountLast
)
;
const
uint32_t
kExpectedCountFirst
=
2
;
const
uint32_t
kExpectedCountLast
=
1
;
ASSERT_EQ
(
uCountFirst
kExpectedCountFirst
)
<
<
"
The
first
bucket
did
not
accumulate
the
correct
number
of
values
"
;
ASSERT_EQ
(
uCountLast
kExpectedCountLast
)
<
<
"
The
last
bucket
did
not
accumulate
the
correct
number
of
values
"
;
}
