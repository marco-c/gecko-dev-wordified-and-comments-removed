#
include
"
gtest
/
gtest
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
TelemetryFixture
.
h
"
#
include
"
TelemetryTestHelpers
.
h
"
using
namespace
mozilla
;
using
namespace
TelemetryTestHelpers
;
TEST_F
(
TelemetryTestFixture
AutoCounter
)
{
const
uint32_t
kExpectedValue
=
100
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
const
char
*
telemetryTestCountName
=
Telemetry
:
:
GetHistogramName
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_COUNT
"
_ns
false
)
;
{
Telemetry
:
:
AutoCounter
<
Telemetry
:
:
TELEMETRY_TEST_COUNT
>
autoCounter
;
autoCounter
+
=
kExpectedValue
/
2
;
}
Telemetry
:
:
AutoCounter
<
Telemetry
:
:
TELEMETRY_TEST_COUNT
>
autoCounter
;
autoCounter
+
=
kExpectedValue
;
{
Telemetry
:
:
AutoCounter
<
Telemetry
:
:
TELEMETRY_TEST_COUNT
>
autoCounter
;
autoCounter
+
=
kExpectedValue
/
2
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
telemetryTestCountName
&
snapshot
false
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
telemetryTestCountName
snapshot
&
histogram
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
not
returning
expected
value
"
;
}
TEST_F
(
TelemetryTestFixture
AutoCounterUnderflow
)
{
const
uint32_t
kExpectedValue
=
0
;
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
const
char
*
telemetryTestCountName
=
Telemetry
:
:
GetHistogramName
(
Telemetry
:
:
TELEMETRY_TEST_COUNT
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_COUNT
"
_ns
false
)
;
{
Telemetry
:
:
AutoCounter
<
Telemetry
:
:
TELEMETRY_TEST_COUNT
>
autoCounter
;
autoCounter
+
=
-
1
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
snapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
telemetryTestCountName
&
snapshot
false
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
telemetryTestCountName
snapshot
&
histogram
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
42
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedValue
)
<
<
"
The
histogram
is
supposed
to
return
0
when
an
underflow
occurs
.
"
;
}
