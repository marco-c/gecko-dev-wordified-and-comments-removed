#
ifndef
TelemetryFixture_h_
#
define
TelemetryFixture_h_
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
SimpleGlobalObject
.
h
"
using
namespace
mozilla
;
class
TelemetryTestFixture
:
public
:
:
testing
:
:
Test
{
protected
:
TelemetryTestFixture
(
)
:
mCleanGlobal
(
nullptr
)
{
}
virtual
void
SetUp
(
)
;
JSObject
*
mCleanGlobal
;
nsCOMPtr
<
nsITelemetry
>
mTelemetry
;
}
;
void
TelemetryTestFixture
:
:
SetUp
(
)
{
mTelemetry
=
do_GetService
(
"
mozilla
.
org
/
base
/
telemetry
;
1
"
)
;
mCleanGlobal
=
dom
:
:
SimpleGlobalObject
:
:
Create
(
dom
:
:
SimpleGlobalObject
:
:
GlobalType
:
:
BindingDetail
)
;
ASSERT_NE
(
mCleanGlobal
nullptr
)
<
<
"
SimpleGlobalObject
must
return
a
valid
global
object
.
"
;
}
class
MOZ_RAII
AutoJSContextWithGlobal
{
public
:
explicit
AutoJSContextWithGlobal
(
JSObject
*
aGlobalObject
)
;
JSContext
*
GetJSContext
(
)
const
;
protected
:
dom
:
:
AutoJSAPI
mJsAPI
;
JSContext
*
mCx
;
}
;
AutoJSContextWithGlobal
:
:
AutoJSContextWithGlobal
(
JSObject
*
aGlobalObject
)
:
mCx
(
nullptr
)
{
MOZ_ALWAYS_TRUE
(
mJsAPI
.
Init
(
aGlobalObject
)
)
;
}
JSContext
*
AutoJSContextWithGlobal
:
:
GetJSContext
(
)
const
{
return
mJsAPI
.
cx
(
)
;
}
#
endif
