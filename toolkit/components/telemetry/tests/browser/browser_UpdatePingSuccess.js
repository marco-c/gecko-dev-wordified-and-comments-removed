"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryArchiveTesting
.
jsm
"
this
)
;
add_task
(
async
function
test_updatePing
(
)
{
const
TEST_VERSION
=
"
37
.
85
"
;
const
TEST_BUILDID
=
"
20150711123724
"
;
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
app
.
update
.
postupdate
"
true
]
[
"
browser
.
startup
.
homepage_override
.
mstone
"
TEST_VERSION
]
[
"
browser
.
startup
.
homepage_override
.
buildID
"
TEST_BUILDID
]
[
"
toolkit
.
telemetry
.
log
.
level
"
"
Trace
"
]
]
}
)
;
let
archiveChecker
=
new
TelemetryArchiveTesting
.
Checker
(
)
;
await
archiveChecker
.
promiseInit
(
)
;
Cc
[
"
mozilla
.
org
/
browser
/
clh
;
1
"
]
.
getService
(
Ci
.
nsIBrowserHandler
)
.
defaultArgs
;
let
updatePing
;
await
BrowserTestUtils
.
waitForCondition
(
async
function
(
)
{
updatePing
=
await
archiveChecker
.
promiseFindPing
(
"
update
"
[
[
[
"
payload
"
"
reason
"
]
"
success
"
]
[
[
"
payload
"
"
previousBuildId
"
]
TEST_BUILDID
]
[
[
"
payload
"
"
previousVersion
"
]
TEST_VERSION
]
]
)
;
return
!
!
updatePing
;
}
"
Make
sure
the
ping
is
generated
before
trying
to
validate
it
.
"
500
100
)
;
ok
(
updatePing
"
The
'
update
'
ping
must
be
correctly
sent
.
"
)
;
ok
(
"
previousChannel
"
in
updatePing
.
payload
"
The
payload
must
contain
the
'
previousChannel
'
field
"
)
;
const
channelField
=
updatePing
.
payload
.
previousChannel
;
if
(
channelField
!
=
null
)
{
ok
(
typeof
(
channelField
)
=
=
"
string
"
"
'
previousChannel
'
must
be
a
string
if
available
.
"
)
;
}
ok
(
"
clientId
"
in
updatePing
"
The
update
ping
must
report
a
client
id
.
"
)
;
ok
(
"
environment
"
in
updatePing
"
The
update
ping
must
report
the
environment
.
"
)
;
}
)
;
