#
include
"
nsITelemetry
.
h
"
#
include
"
nsVersionComparator
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
TelemetryCommon
.
h
"
#
include
<
cstring
>
namespace
mozilla
{
namespace
Telemetry
{
namespace
Common
{
bool
IsExpiredVersion
(
const
char
*
aExpiration
)
{
MOZ_ASSERT
(
aExpiration
)
;
return
strcmp
(
aExpiration
"
never
"
)
&
&
strcmp
(
aExpiration
"
default
"
)
&
&
(
mozilla
:
:
Version
(
aExpiration
)
<
=
MOZ_APP_VERSION
)
;
}
bool
IsInDataset
(
uint32_t
aDataset
uint32_t
aContainingDataset
)
{
if
(
aDataset
=
=
aContainingDataset
)
{
return
true
;
}
if
(
aContainingDataset
=
=
nsITelemetry
:
:
DATASET_RELEASE_CHANNEL_OPTIN
&
&
aDataset
=
=
nsITelemetry
:
:
DATASET_RELEASE_CHANNEL_OPTOUT
)
{
return
true
;
}
return
false
;
}
bool
CanRecordDataset
(
uint32_t
aDataset
bool
aCanRecordBase
bool
aCanRecordExtended
)
{
if
(
aCanRecordExtended
)
{
return
true
;
}
if
(
aCanRecordBase
&
&
IsInDataset
(
aDataset
nsITelemetry
:
:
DATASET_RELEASE_CHANNEL_OPTOUT
)
)
{
return
true
;
}
return
false
;
}
bool
CanRecordInProcess
(
RecordedProcessType
processes
GeckoProcessType
processType
)
{
bool
recordAllChild
=
!
!
(
processes
&
RecordedProcessType
:
:
AllChilds
)
;
bool
canRecordProcess
=
!
!
(
processes
&
static_cast
<
RecordedProcessType
>
(
1
<
<
processType
)
)
;
return
canRecordProcess
|
|
(
(
processType
!
=
GeckoProcessType_Default
)
&
&
recordAllChild
)
;
}
nsresult
MsSinceProcessStart
(
double
*
aResult
)
{
bool
error
;
*
aResult
=
(
TimeStamp
:
:
NowLoRes
(
)
-
TimeStamp
:
:
ProcessCreation
(
&
error
)
)
.
ToMilliseconds
(
)
;
if
(
error
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
NS_OK
;
}
void
LogToBrowserConsole
(
uint32_t
aLogLevel
const
nsAString
&
aMsg
)
{
if
(
!
NS_IsMainThread
(
)
)
{
nsString
msg
(
aMsg
)
;
nsCOMPtr
<
nsIRunnable
>
task
=
NS_NewRunnableFunction
(
[
aLogLevel
msg
]
(
)
{
LogToBrowserConsole
(
aLogLevel
msg
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
return
;
}
nsCOMPtr
<
nsIConsoleService
>
console
(
do_GetService
(
"
mozilla
.
org
/
consoleservice
;
1
"
)
)
;
if
(
!
console
)
{
NS_WARNING
(
"
Failed
to
log
message
to
console
.
"
)
;
return
;
}
nsCOMPtr
<
nsIScriptError
>
error
(
do_CreateInstance
(
NS_SCRIPTERROR_CONTRACTID
)
)
;
error
-
>
Init
(
aMsg
EmptyString
(
)
EmptyString
(
)
0
0
aLogLevel
"
chrome
javascript
"
)
;
console
-
>
LogMessage
(
error
)
;
}
}
}
}
