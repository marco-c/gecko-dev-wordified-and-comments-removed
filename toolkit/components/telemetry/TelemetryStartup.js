"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryController
"
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryEnvironment
"
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
function
TelemetryStartup
(
)
{
}
TelemetryStartup
.
prototype
.
classID
=
Components
.
ID
(
"
{
117b219f
-
92fe
-
4bd2
-
a21b
-
95a342a9d474
}
"
)
;
TelemetryStartup
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
;
TelemetryStartup
.
prototype
.
observe
=
function
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
profile
-
after
-
change
"
)
{
TelemetryController
.
observe
(
null
aTopic
null
)
;
}
if
(
aTopic
=
=
"
profile
-
after
-
change
"
)
{
annotateEnvironment
(
)
;
TelemetryEnvironment
.
registerChangeListener
(
"
CrashAnnotator
"
annotateEnvironment
)
;
TelemetryEnvironment
.
onInitialized
(
)
.
then
(
(
)
=
>
annotateEnvironment
(
)
)
;
}
}
;
function
annotateEnvironment
(
)
{
try
{
let
cr
=
Cc
[
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
]
;
if
(
cr
)
{
let
env
=
JSON
.
stringify
(
TelemetryEnvironment
.
currentEnvironment
)
;
cr
.
getService
(
Ci
.
nsICrashReporter
)
.
annotateCrashReport
(
"
TelemetryEnvironment
"
env
)
;
}
}
catch
(
e
)
{
}
}
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
TelemetryStartup
]
)
;
