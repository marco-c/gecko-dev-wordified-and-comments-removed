"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ClientID
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
LOGGER_NAME
=
"
Toolkit
.
Telemetry
"
;
const
LOGGER_PREFIX
=
"
ClientID
:
:
"
;
const
CANARY_CLIENT_ID
=
"
c0ffeec0
-
ffee
-
c0ff
-
eec0
-
ffeec0ffeec0
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
CommonUtils
"
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
CryptoHash
"
(
)
=
>
{
return
Components
.
Constructor
(
"
mozilla
.
org
/
security
/
hash
;
1
"
"
nsICryptoHash
"
"
initWithString
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gDatareportingPath
"
(
)
=
>
{
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
datareporting
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gStateFilePath
"
(
)
=
>
{
return
OS
.
Path
.
join
(
gDatareportingPath
"
state
.
json
"
)
;
}
)
;
const
PREF_CACHED_CLIENTID
=
"
toolkit
.
telemetry
.
cachedClientID
"
;
const
SCALAR_DELETION_REQUEST_ECOSYSTEM_CLIENT_ID
=
"
deletion
.
request
.
ecosystem_client_id
"
;
function
isValidClientID
(
id
)
{
const
UUID_REGEX
=
/
^
[
0
-
9a
-
f
]
{
8
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
12
}
/
i
;
return
UUID_REGEX
.
test
(
id
)
;
}
var
ClientID
=
Object
.
freeze
(
{
getClientID
(
)
{
return
ClientIDImpl
.
getClientID
(
)
;
}
getEcosystemClientID
(
)
{
return
ClientIDImpl
.
getEcosystemClientID
(
)
;
}
wasCanaryClientID
(
)
{
if
(
AppConstants
.
platform
=
=
"
android
"
)
{
return
ClientIDImpl
.
wasCanaryClientID
(
)
;
}
return
null
;
}
getCachedClientID
(
)
{
return
ClientIDImpl
.
getCachedClientID
(
)
;
}
getCachedEcosystemClientID
(
)
{
return
ClientIDImpl
.
getCachedEcosystemClientID
(
)
;
}
async
getClientIdHash
(
)
{
return
ClientIDImpl
.
getClientIdHash
(
)
;
}
setCanaryClientIDs
(
)
{
return
ClientIDImpl
.
setCanaryClientIDs
(
)
;
}
resetEcosystemClientID
(
)
{
return
ClientIDImpl
.
resetEcosystemClientID
(
)
;
}
removeClientIDs
(
)
{
return
ClientIDImpl
.
removeClientIDs
(
)
;
}
_reset
(
)
{
return
ClientIDImpl
.
_reset
(
)
;
}
}
)
;
var
ClientIDImpl
=
{
_clientID
:
null
_clientIDHash
:
null
_ecosystemClientID
:
null
_loadClientIdsTask
:
null
_saveClientIdsTask
:
null
_removeClientIdsTask
:
null
_logger
:
null
_wasCanary
:
null
_loadClientIDs
(
)
{
if
(
this
.
_loadClientIdsTask
)
{
return
this
.
_loadClientIdsTask
;
}
this
.
_loadClientIdsTask
=
this
.
_doLoadClientIDs
(
)
;
let
clear
=
(
)
=
>
(
this
.
_loadClientIdsTask
=
null
)
;
this
.
_loadClientIdsTask
.
then
(
clear
clear
)
;
return
this
.
_loadClientIdsTask
;
}
async
_doLoadClientIDs
(
)
{
this
.
_log
.
trace
(
_doLoadClientIDs
)
;
await
this
.
_removeClientIdsTask
;
let
hasCurrentClientID
=
false
;
let
hasCurrentEcosystemClientID
=
false
;
try
{
let
state
=
await
CommonUtils
.
readJSON
(
gStateFilePath
)
;
if
(
AppConstants
.
platform
=
=
"
android
"
&
&
state
&
&
"
wasCanary
"
in
state
)
{
this
.
_wasCanary
=
state
.
wasCanary
;
}
if
(
state
)
{
hasCurrentClientID
=
this
.
updateClientID
(
state
.
clientID
)
;
hasCurrentEcosystemClientID
=
this
.
updateEcosystemClientID
(
state
.
ecosystemClientID
)
;
if
(
hasCurrentClientID
&
&
hasCurrentEcosystemClientID
)
{
this
.
_log
.
trace
(
_doLoadClientIDs
:
Client
IDs
loaded
from
state
.
)
;
return
{
clientID
:
this
.
_clientID
ecosystemClientID
:
this
.
_ecosystemClientID
}
;
}
}
}
catch
(
e
)
{
}
if
(
!
hasCurrentClientID
)
{
this
.
updateClientID
(
CommonUtils
.
generateUUID
(
)
)
;
}
if
(
!
hasCurrentEcosystemClientID
)
{
this
.
updateEcosystemClientID
(
CommonUtils
.
generateUUID
(
)
)
;
}
this
.
_saveClientIdsTask
=
this
.
_saveClientIDs
(
)
;
await
this
.
_saveClientIdsTask
;
this
.
_log
.
trace
(
"
_doLoadClientIDs
:
New
client
IDs
loaded
and
persisted
.
"
)
;
return
{
clientID
:
this
.
_clientID
ecosystemClientID
:
this
.
_ecosystemClientID
}
;
}
async
_saveClientIDs
(
)
{
this
.
_log
.
trace
(
_saveClientIDs
)
;
let
obj
=
{
clientID
:
this
.
_clientID
ecosystemClientID
:
this
.
_ecosystemClientID
}
;
if
(
AppConstants
.
platform
=
=
"
android
"
&
&
this
.
_wasCanary
)
{
obj
.
wasCanary
=
true
;
}
await
OS
.
File
.
makeDir
(
gDatareportingPath
)
;
await
CommonUtils
.
writeJSON
(
obj
gStateFilePath
)
;
this
.
_saveClientIdsTask
=
null
;
}
async
getClientID
(
)
{
if
(
!
this
.
_clientID
)
{
let
{
clientID
}
=
await
this
.
_loadClientIDs
(
)
;
return
clientID
;
}
return
Promise
.
resolve
(
this
.
_clientID
)
;
}
async
getEcosystemClientID
(
)
{
if
(
!
this
.
_ecosystemClientID
)
{
let
{
ecosystemClientID
}
=
await
this
.
_loadClientIDs
(
)
;
return
ecosystemClientID
;
}
return
Promise
.
resolve
(
this
.
_ecosystemClientID
)
;
}
wasCanaryClientID
(
)
{
return
this
.
_wasCanary
;
}
getCachedClientID
(
)
{
if
(
this
.
_clientID
)
{
return
this
.
_clientID
;
}
if
(
Services
.
prefs
.
prefHasUserValue
(
PREF_CACHED_CLIENTID
)
&
&
Services
.
prefs
.
getPrefType
(
PREF_CACHED_CLIENTID
)
!
=
Ci
.
nsIPrefBranch
.
PREF_STRING
)
{
this
.
_log
.
error
(
"
getCachedClientID
-
invalid
client
id
type
in
preferences
resetting
"
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
}
let
id
=
Services
.
prefs
.
getStringPref
(
PREF_CACHED_CLIENTID
null
)
;
if
(
id
=
=
=
null
)
{
return
null
;
}
if
(
!
isValidClientID
(
id
)
)
{
this
.
_log
.
error
(
"
getCachedClientID
-
invalid
client
id
in
preferences
resetting
"
id
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
return
null
;
}
return
id
;
}
getCachedEcosystemClientID
(
)
{
return
this
.
_ecosystemClientID
;
}
async
getClientIdHash
(
)
{
if
(
!
this
.
_clientIDHash
)
{
let
byteArr
=
new
TextEncoder
(
)
.
encode
(
await
this
.
getClientID
(
)
)
;
let
hash
=
new
CryptoHash
(
"
sha256
"
)
;
hash
.
update
(
byteArr
byteArr
.
length
)
;
this
.
_clientIDHash
=
CommonUtils
.
bytesAsHex
(
hash
.
finish
(
false
)
)
;
}
return
this
.
_clientIDHash
;
}
async
_reset
(
)
{
await
this
.
_loadClientIdsTask
;
await
this
.
_saveClientIdsTask
;
this
.
_clientID
=
null
;
this
.
_clientIDHash
=
null
;
this
.
_ecosystemClientID
=
null
;
}
async
setCanaryClientIDs
(
)
{
this
.
_log
.
trace
(
"
setCanaryClientIDs
"
)
;
this
.
updateClientID
(
CANARY_CLIENT_ID
)
;
this
.
updateEcosystemClientID
(
CANARY_CLIENT_ID
)
;
this
.
_saveClientIdsTask
=
this
.
_saveClientIDs
(
)
;
await
this
.
_saveClientIdsTask
;
return
this
.
_clientID
;
}
async
resetEcosystemClientID
(
)
{
this
.
_log
.
trace
(
"
resetEcosystemClientID
"
)
;
this
.
updateEcosystemClientID
(
CommonUtils
.
generateUUID
(
)
)
;
this
.
_saveClientIdsTask
=
this
.
_saveClientIDs
(
)
;
await
this
.
_saveClientIdsTask
;
return
this
.
_ecosystemClientID
;
}
async
_doRemoveClientIDs
(
)
{
this
.
_log
.
trace
(
"
_doRemoveClientIDs
"
)
;
this
.
_clientID
=
null
;
this
.
_clientIDHash
=
null
;
this
.
_ecosystemClientID
=
null
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
Services
.
telemetry
.
scalarSet
(
SCALAR_DELETION_REQUEST_ECOSYSTEM_CLIENT_ID
"
"
)
;
await
this
.
_saveClientIdsTask
;
await
OS
.
File
.
remove
(
gStateFilePath
{
ignoreAbsent
:
true
}
)
;
}
async
removeClientIDs
(
)
{
this
.
_log
.
trace
(
"
removeClientIDs
"
)
;
let
oldClientId
=
this
.
_clientID
;
this
.
_removeClientIdsTask
=
this
.
_doRemoveClientIDs
(
)
;
let
clear
=
(
)
=
>
(
this
.
_removeClientIdsTask
=
null
)
;
this
.
_removeClientIdsTask
.
then
(
clear
clear
)
;
await
this
.
_removeClientIdsTask
;
if
(
AppConstants
.
platform
=
=
"
android
"
)
{
this
.
_wasCanary
=
oldClientId
=
=
CANARY_CLIENT_ID
;
}
}
updateClientID
(
id
)
{
if
(
!
isValidClientID
(
id
)
)
{
this
.
_log
.
error
(
"
updateClientID
-
invalid
client
ID
"
id
)
;
return
false
;
}
this
.
_clientID
=
id
;
this
.
_clientIDHash
=
null
;
Services
.
prefs
.
setStringPref
(
PREF_CACHED_CLIENTID
this
.
_clientID
)
;
return
true
;
}
updateEcosystemClientID
(
id
)
{
if
(
!
isValidClientID
(
id
)
)
{
this
.
_log
.
error
(
"
updateEcosystemClientID
-
invalid
ecosystem
client
ID
"
id
)
;
return
false
;
}
this
.
_ecosystemClientID
=
id
;
Services
.
telemetry
.
scalarSet
(
SCALAR_DELETION_REQUEST_ECOSYSTEM_CLIENT_ID
id
)
;
return
true
;
}
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
)
;
}
return
this
.
_logger
;
}
}
;
