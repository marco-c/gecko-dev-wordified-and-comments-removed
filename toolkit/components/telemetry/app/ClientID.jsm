"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ClientID
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
LOGGER_NAME
=
"
Toolkit
.
Telemetry
"
;
const
LOGGER_PREFIX
=
"
ClientID
:
:
"
;
const
CANARY_CLIENT_ID
=
"
c0ffeec0
-
ffee
-
c0ff
-
eec0
-
ffeec0ffeec0
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
CommonUtils
"
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
CryptoHash
"
(
)
=
>
{
return
Components
.
Constructor
(
"
mozilla
.
org
/
security
/
hash
;
1
"
"
nsICryptoHash
"
"
initWithString
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gDatareportingPath
"
(
)
=
>
{
return
PathUtils
.
join
(
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
path
"
datareporting
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gStateFilePath
"
(
)
=
>
{
return
PathUtils
.
join
(
gDatareportingPath
"
state
.
json
"
)
;
}
)
;
const
PREF_CACHED_CLIENTID
=
"
toolkit
.
telemetry
.
cachedClientID
"
;
function
isValidClientID
(
id
)
{
const
UUID_REGEX
=
/
^
[
0
-
9a
-
f
]
{
8
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
4
}
-
[
0
-
9a
-
f
]
{
12
}
/
i
;
return
UUID_REGEX
.
test
(
id
)
;
}
var
ClientID
=
Object
.
freeze
(
{
getClientID
(
)
{
return
ClientIDImpl
.
getClientID
(
)
;
}
getCachedClientID
(
)
{
return
ClientIDImpl
.
getCachedClientID
(
)
;
}
async
getClientIdHash
(
)
{
return
ClientIDImpl
.
getClientIdHash
(
)
;
}
setCanaryClientID
(
)
{
return
ClientIDImpl
.
setCanaryClientID
(
)
;
}
removeClientID
(
)
{
return
ClientIDImpl
.
removeClientID
(
)
;
}
_reset
(
)
{
return
ClientIDImpl
.
_reset
(
)
;
}
}
)
;
var
ClientIDImpl
=
{
_clientID
:
null
_clientIDHash
:
null
_loadClientIdTask
:
null
_saveClientIdTask
:
null
_removeClientIdTask
:
null
_logger
:
null
_loadClientID
(
)
{
if
(
this
.
_loadClientIdTask
)
{
return
this
.
_loadClientIdTask
;
}
this
.
_loadClientIdTask
=
this
.
_doLoadClientID
(
)
;
let
clear
=
(
)
=
>
(
this
.
_loadClientIdTask
=
null
)
;
this
.
_loadClientIdTask
.
then
(
clear
clear
)
;
return
this
.
_loadClientIdTask
;
}
async
_doLoadClientID
(
)
{
this
.
_log
.
trace
(
_doLoadClientID
)
;
await
this
.
_removeClientIdTask
;
let
hasCurrentClientID
=
false
;
try
{
let
state
=
await
IOUtils
.
readJSON
(
gStateFilePath
)
;
if
(
state
)
{
hasCurrentClientID
=
this
.
updateClientID
(
state
.
clientID
)
;
if
(
hasCurrentClientID
)
{
this
.
_log
.
trace
(
_doLoadClientID
:
Client
IDs
loaded
from
state
.
)
;
return
{
clientID
:
this
.
_clientID
}
;
}
}
}
catch
(
e
)
{
}
if
(
!
hasCurrentClientID
)
{
const
cachedID
=
this
.
getCachedClientID
(
)
;
if
(
cachedID
)
{
hasCurrentClientID
=
this
.
updateClientID
(
cachedID
)
;
}
}
if
(
!
hasCurrentClientID
)
{
this
.
updateClientID
(
CommonUtils
.
generateUUID
(
)
)
;
}
this
.
_saveClientIdTask
=
this
.
_saveClientID
(
)
;
await
this
.
_saveClientIdTask
;
this
.
_log
.
trace
(
"
_doLoadClientID
:
New
client
ID
loaded
and
persisted
.
"
)
;
return
{
clientID
:
this
.
_clientID
}
;
}
async
_saveClientID
(
)
{
try
{
this
.
_log
.
trace
(
_saveClientID
)
;
let
obj
=
{
clientID
:
this
.
_clientID
}
;
await
IOUtils
.
makeDirectory
(
gDatareportingPath
)
;
await
IOUtils
.
writeJSON
(
gStateFilePath
obj
{
tmpPath
:
{
gStateFilePath
}
.
tmp
}
)
;
this
.
_saveClientIdTask
=
null
;
}
catch
(
ex
)
{
if
(
!
DOMException
.
isInstance
(
ex
)
|
|
ex
.
name
!
=
=
"
AbortError
"
)
{
throw
ex
;
}
}
}
async
getClientID
(
)
{
if
(
!
this
.
_clientID
)
{
let
{
clientID
}
=
await
this
.
_loadClientID
(
)
;
Glean
.
legacyTelemetry
.
clientId
.
set
(
clientID
)
;
return
clientID
;
}
return
Promise
.
resolve
(
this
.
_clientID
)
;
}
getCachedClientID
(
)
{
if
(
this
.
_clientID
)
{
return
this
.
_clientID
;
}
if
(
Services
.
prefs
.
prefHasUserValue
(
PREF_CACHED_CLIENTID
)
&
&
Services
.
prefs
.
getPrefType
(
PREF_CACHED_CLIENTID
)
!
=
Ci
.
nsIPrefBranch
.
PREF_STRING
)
{
this
.
_log
.
error
(
"
getCachedClientID
-
invalid
client
id
type
in
preferences
resetting
"
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
}
let
id
=
Services
.
prefs
.
getStringPref
(
PREF_CACHED_CLIENTID
null
)
;
if
(
id
=
=
=
null
)
{
return
null
;
}
if
(
!
isValidClientID
(
id
)
)
{
this
.
_log
.
error
(
"
getCachedClientID
-
invalid
client
id
in
preferences
resetting
"
id
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
return
null
;
}
return
id
;
}
async
getClientIdHash
(
)
{
if
(
!
this
.
_clientIDHash
)
{
let
byteArr
=
new
TextEncoder
(
)
.
encode
(
await
this
.
getClientID
(
)
)
;
let
hash
=
new
CryptoHash
(
"
sha256
"
)
;
hash
.
update
(
byteArr
byteArr
.
length
)
;
this
.
_clientIDHash
=
CommonUtils
.
bytesAsHex
(
hash
.
finish
(
false
)
)
;
}
return
this
.
_clientIDHash
;
}
async
_reset
(
)
{
await
this
.
_loadClientIdTask
;
await
this
.
_saveClientIdTask
;
this
.
_clientID
=
null
;
this
.
_clientIDHash
=
null
;
}
async
setCanaryClientID
(
)
{
this
.
_log
.
trace
(
"
setCanaryClientID
"
)
;
this
.
updateClientID
(
CANARY_CLIENT_ID
)
;
this
.
_saveClientIdTask
=
this
.
_saveClientID
(
)
;
await
this
.
_saveClientIdTask
;
return
this
.
_clientID
;
}
async
_doRemoveClientID
(
)
{
this
.
_log
.
trace
(
"
_doRemoveClientID
"
)
;
this
.
_clientID
=
null
;
this
.
_clientIDHash
=
null
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_CLIENTID
)
;
await
this
.
_saveClientIdTask
;
await
IOUtils
.
remove
(
gStateFilePath
)
;
}
async
removeClientID
(
)
{
this
.
_log
.
trace
(
"
removeClientID
"
)
;
Glean
.
legacyTelemetry
.
clientId
.
set
(
CANARY_CLIENT_ID
)
;
this
.
_removeClientIdTask
=
this
.
_doRemoveClientID
(
)
;
let
clear
=
(
)
=
>
(
this
.
_removeClientIdTask
=
null
)
;
this
.
_removeClientIdTask
.
then
(
clear
clear
)
;
await
this
.
_removeClientIdTask
;
}
updateClientID
(
id
)
{
if
(
!
isValidClientID
(
id
)
)
{
this
.
_log
.
error
(
"
updateClientID
-
invalid
client
ID
"
id
)
;
return
false
;
}
this
.
_clientID
=
id
;
Glean
.
legacyTelemetry
.
clientId
.
set
(
id
)
;
this
.
_clientIDHash
=
null
;
Services
.
prefs
.
setStringPref
(
PREF_CACHED_CLIENTID
this
.
_clientID
)
;
return
true
;
}
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
)
;
}
return
this
.
_logger
;
}
}
;
