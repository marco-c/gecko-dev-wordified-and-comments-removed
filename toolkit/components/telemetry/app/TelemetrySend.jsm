"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TelemetrySend
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
const
{
ClientID
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ClientID
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
this
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ServiceRequest
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryStorage
"
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryReportingPolicy
"
"
resource
:
/
/
gre
/
modules
/
TelemetryReportingPolicy
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
Telemetry
"
"
mozilla
.
org
/
base
/
telemetry
;
1
"
"
nsITelemetry
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryHealthPing
"
"
resource
:
/
/
gre
/
modules
/
HealthPing
.
jsm
"
)
;
const
Utils
=
TelemetryUtils
;
const
LOGGER_NAME
=
"
Toolkit
.
Telemetry
"
;
const
LOGGER_PREFIX
=
"
TelemetrySend
:
:
"
;
const
TOPIC_IDLE_DAILY
=
"
idle
-
daily
"
;
const
TOPIC_QUIT_APPLICATION_GRANTED
=
"
quit
-
application
-
granted
"
;
const
TOPIC_QUIT_APPLICATION_FORCED
=
"
quit
-
application
-
forced
"
;
const
PREF_CHANGED_TOPIC
=
"
nsPref
:
changed
"
;
const
TOPIC_PROFILE_CHANGE_NET_TEARDOWN
=
"
profile
-
change
-
net
-
teardown
"
;
const
IS_UNIFIED_TELEMETRY
=
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
Unified
false
)
;
const
MS_IN_A_MINUTE
=
60
*
1000
;
const
PING_TYPE_OPTOUT
=
"
optout
"
;
const
MIDNIGHT_FUZZING_INTERVAL_MS
=
60
*
MS_IN_A_MINUTE
;
const
MIDNIGHT_FUZZING_DELAY_MS
=
Math
.
random
(
)
*
MIDNIGHT_FUZZING_INTERVAL_MS
;
const
PING_SUBMIT_TIMEOUT_MS
=
1
.
5
*
MS_IN_A_MINUTE
;
const
MAX_PING_SENDS_PER_MINUTE
=
10
;
const
SEND_TICK_DELAY
=
1
*
MS_IN_A_MINUTE
;
const
SEND_MAXIMUM_BACKOFF_DELAY_MS
=
120
*
MS_IN_A_MINUTE
;
const
XHR_ERROR_TYPE
=
[
"
eOK
"
"
eRequest
"
"
eUnreachable
"
"
eChannelOpen
"
"
eRedirect
"
"
eTerminated
"
]
;
var
Policy
=
{
now
:
(
)
=
>
new
Date
(
)
midnightPingFuzzingDelay
:
(
)
=
>
MIDNIGHT_FUZZING_DELAY_MS
pingSubmissionTimeout
:
(
)
=
>
PING_SUBMIT_TIMEOUT_MS
setSchedulerTickTimeout
:
(
callback
delayMs
)
=
>
setTimeout
(
callback
delayMs
)
clearSchedulerTickTimeout
:
id
=
>
clearTimeout
(
id
)
gzipCompressString
:
data
=
>
gzipCompressString
(
data
)
}
;
function
isV4PingFormat
(
aPing
)
{
return
(
"
id
"
in
aPing
&
&
"
application
"
in
aPing
&
&
"
version
"
in
aPing
&
&
aPing
.
version
>
=
2
)
;
}
function
isOptoutPing
(
aPing
)
{
return
isV4PingFormat
(
aPing
)
&
&
aPing
.
type
=
=
PING_TYPE_OPTOUT
;
}
function
savePing
(
aPing
)
{
return
TelemetryStorage
.
savePendingPing
(
aPing
)
;
}
function
gzipCompressString
(
string
)
{
let
observer
=
{
buffer
:
"
"
onStreamComplete
(
loader
context
status
length
result
)
{
const
chunkSize
=
500000
;
for
(
let
offset
=
0
;
offset
<
result
.
length
;
offset
+
=
chunkSize
)
{
this
.
buffer
+
=
String
.
fromCharCode
.
apply
(
String
result
.
slice
(
offset
offset
+
chunkSize
)
)
;
}
}
}
;
let
scs
=
Cc
[
"
mozilla
.
org
/
streamConverters
;
1
"
]
.
getService
(
Ci
.
nsIStreamConverterService
)
;
let
listener
=
Cc
[
"
mozilla
.
org
/
network
/
stream
-
loader
;
1
"
]
.
createInstance
(
Ci
.
nsIStreamLoader
)
;
listener
.
init
(
observer
)
;
let
converter
=
scs
.
asyncConvertData
(
"
uncompressed
"
"
gzip
"
listener
null
)
;
let
stringStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
stringStream
.
data
=
string
;
converter
.
onStartRequest
(
null
null
)
;
converter
.
onDataAvailable
(
null
stringStream
0
string
.
length
)
;
converter
.
onStopRequest
(
null
null
null
)
;
return
observer
.
buffer
;
}
var
TelemetrySend
=
{
get
pendingPingCount
(
)
{
return
TelemetrySendImpl
.
pendingPingCount
;
}
earlyInit
(
)
{
TelemetrySendImpl
.
earlyInit
(
)
;
}
setup
(
testing
=
false
)
{
return
TelemetrySendImpl
.
setup
(
testing
)
;
}
shutdown
(
)
{
return
TelemetrySendImpl
.
shutdown
(
)
;
}
submitPing
(
ping
options
=
{
}
)
{
options
.
usePingSender
=
options
.
usePingSender
|
|
false
;
return
TelemetrySendImpl
.
submitPing
(
ping
options
)
;
}
sendingEnabled
(
ping
=
null
)
{
return
TelemetrySendImpl
.
sendingEnabled
(
ping
)
;
}
notifyCanUpload
(
)
{
return
TelemetrySendImpl
.
notifyCanUpload
(
)
;
}
reset
(
)
{
return
TelemetrySendImpl
.
reset
(
)
;
}
setServer
(
server
)
{
return
TelemetrySendImpl
.
setServer
(
server
)
;
}
clearCurrentPings
(
)
{
return
TelemetrySendImpl
.
clearCurrentPings
(
)
;
}
testWaitOnOutgoingPings
(
)
{
return
TelemetrySendImpl
.
promisePendingPingActivity
(
)
;
}
testTooLateToSend
(
tooLate
)
{
TelemetrySendImpl
.
_tooLateToSend
=
tooLate
;
}
setTestModeEnabled
(
testing
)
{
TelemetrySendImpl
.
setTestModeEnabled
(
testing
)
;
}
getShutdownState
(
)
{
return
TelemetrySendImpl
.
getShutdownState
(
)
;
}
testRunPingSender
(
url
pingPath
observer
)
{
return
TelemetrySendImpl
.
runPingSender
(
url
pingPath
observer
)
;
}
}
;
var
CancellableTimeout
=
{
_deferred
:
null
_timer
:
null
promiseWaitOnTimeout
(
timeoutMs
)
{
if
(
!
this
.
_deferred
)
{
this
.
_deferred
=
PromiseUtils
.
defer
(
)
;
this
.
_timer
=
Policy
.
setSchedulerTickTimeout
(
(
)
=
>
this
.
_onTimeout
(
)
timeoutMs
)
;
}
return
this
.
_deferred
.
promise
;
}
_onTimeout
(
)
{
if
(
this
.
_deferred
)
{
this
.
_deferred
.
resolve
(
false
)
;
this
.
_timer
=
null
;
this
.
_deferred
=
null
;
}
}
cancelTimeout
(
)
{
if
(
this
.
_deferred
)
{
Policy
.
clearSchedulerTickTimeout
(
this
.
_timer
)
;
this
.
_deferred
.
resolve
(
true
)
;
this
.
_timer
=
null
;
this
.
_deferred
=
null
;
}
}
}
;
var
SendScheduler
=
{
_sendsFailed
:
false
_backoffDelay
:
SEND_TICK_DELAY
_shutdown
:
false
_sendTask
:
null
_sendTaskState
:
null
_logger
:
null
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
+
"
Scheduler
:
:
"
)
;
}
return
this
.
_logger
;
}
shutdown
(
)
{
this
.
_log
.
trace
(
"
shutdown
"
)
;
this
.
_shutdown
=
true
;
CancellableTimeout
.
cancelTimeout
(
)
;
return
Promise
.
resolve
(
this
.
_sendTask
)
;
}
start
(
)
{
this
.
_log
.
trace
(
"
start
"
)
;
this
.
_sendsFailed
=
false
;
this
.
_backoffDelay
=
SEND_TICK_DELAY
;
this
.
_shutdown
=
false
;
}
reset
(
)
{
this
.
_log
.
trace
(
"
reset
"
)
;
return
this
.
shutdown
(
)
.
then
(
(
)
=
>
this
.
start
(
)
)
;
}
notifySendsFailed
(
)
{
this
.
_log
.
trace
(
"
notifySendsFailed
"
)
;
if
(
this
.
_sendsFailed
)
{
return
;
}
this
.
_sendsFailed
=
true
;
this
.
_log
.
trace
(
"
notifySendsFailed
-
had
send
failures
"
)
;
}
isThrottled
(
)
{
const
now
=
Policy
.
now
(
)
;
const
nextPingSendTime
=
this
.
_getNextPingSendTime
(
now
)
;
return
nextPingSendTime
>
now
.
getTime
(
)
;
}
waitOnSendTask
(
)
{
return
Promise
.
resolve
(
this
.
_sendTask
)
;
}
triggerSendingPings
(
immediately
)
{
this
.
_log
.
trace
(
"
triggerSendingPings
-
active
send
task
:
"
+
!
!
this
.
_sendTask
+
"
immediately
:
"
+
immediately
)
;
if
(
!
this
.
_sendTask
)
{
this
.
_sendTask
=
this
.
_doSendTask
(
)
;
let
clear
=
(
)
=
>
(
this
.
_sendTask
=
null
)
;
this
.
_sendTask
.
then
(
clear
clear
)
;
}
else
if
(
immediately
)
{
CancellableTimeout
.
cancelTimeout
(
)
;
}
return
this
.
_sendTask
;
}
async
_doSendTask
(
)
{
this
.
_sendTaskState
=
"
send
task
started
"
;
this
.
_backoffDelay
=
SEND_TICK_DELAY
;
this
.
_sendsFailed
=
false
;
const
resetBackoffTimer
=
(
)
=
>
{
this
.
_backoffDelay
=
SEND_TICK_DELAY
;
}
;
for
(
;
;
)
{
this
.
_log
.
trace
(
"
_doSendTask
iteration
"
)
;
this
.
_sendTaskState
=
"
start
iteration
"
;
if
(
this
.
_shutdown
)
{
this
.
_log
.
trace
(
"
_doSendTask
-
shutting
down
bailing
out
"
)
;
this
.
_sendTaskState
=
"
bail
out
-
shutdown
check
"
;
return
;
}
let
pending
=
TelemetryStorage
.
getPendingPingList
(
)
;
let
current
=
TelemetrySendImpl
.
getUnpersistedPings
(
)
;
this
.
_log
.
trace
(
"
_doSendTask
-
pending
:
"
+
pending
.
length
+
"
current
:
"
+
current
.
length
)
;
if
(
!
TelemetrySendImpl
.
sendingEnabled
(
)
)
{
pending
=
[
]
;
current
=
current
.
filter
(
p
=
>
isOptoutPing
(
p
)
)
;
}
this
.
_log
.
trace
(
"
_doSendTask
-
can
send
-
pending
:
"
+
pending
.
length
+
"
current
:
"
+
current
.
length
)
;
if
(
pending
.
length
=
=
0
&
&
current
.
length
=
=
0
)
{
this
.
_log
.
trace
(
"
_doSendTask
-
no
pending
pings
bailing
out
"
)
;
this
.
_sendTaskState
=
"
bail
out
-
no
pings
to
send
"
;
return
;
}
const
now
=
Policy
.
now
(
)
;
if
(
this
.
isThrottled
(
)
)
{
const
nextPingSendTime
=
this
.
_getNextPingSendTime
(
now
)
;
this
.
_log
.
trace
(
"
_doSendTask
-
throttled
delaying
ping
send
to
"
+
new
Date
(
nextPingSendTime
)
)
;
this
.
_sendTaskState
=
"
wait
for
throttling
to
pass
"
;
const
delay
=
nextPingSendTime
-
now
.
getTime
(
)
;
const
cancelled
=
await
CancellableTimeout
.
promiseWaitOnTimeout
(
delay
)
;
if
(
cancelled
)
{
this
.
_log
.
trace
(
"
_doSendTask
-
throttling
wait
was
cancelled
resetting
backoff
timer
"
)
;
resetBackoffTimer
(
)
;
}
continue
;
}
let
sending
=
pending
.
slice
(
0
MAX_PING_SENDS_PER_MINUTE
)
;
pending
=
pending
.
slice
(
MAX_PING_SENDS_PER_MINUTE
)
;
this
.
_log
.
trace
(
"
_doSendTask
-
triggering
sending
of
"
+
sending
.
length
+
"
pings
now
"
+
"
"
+
pending
.
length
+
"
pings
waiting
"
)
;
this
.
_sendsFailed
=
false
;
const
sendStartTime
=
Policy
.
now
(
)
;
this
.
_sendTaskState
=
"
wait
on
ping
sends
"
;
await
TelemetrySendImpl
.
sendPings
(
current
sending
.
map
(
p
=
>
p
.
id
)
)
;
if
(
this
.
_shutdown
|
|
TelemetrySend
.
pendingPingCount
=
=
0
)
{
this
.
_log
.
trace
(
"
_doSendTask
-
bailing
out
after
sending
shutdown
:
"
+
this
.
_shutdown
+
"
pendingPingCount
:
"
+
TelemetrySend
.
pendingPingCount
)
;
this
.
_sendTaskState
=
"
bail
out
-
shutdown
&
pending
check
after
send
"
;
return
;
}
const
timeSinceLastSend
=
Policy
.
now
(
)
-
sendStartTime
;
let
nextSendDelay
=
Math
.
max
(
0
SEND_TICK_DELAY
-
timeSinceLastSend
)
;
if
(
!
this
.
_sendsFailed
)
{
this
.
_log
.
trace
(
"
_doSendTask
-
had
no
send
failures
resetting
backoff
timer
"
)
;
resetBackoffTimer
(
)
;
}
else
{
const
newDelay
=
Math
.
min
(
SEND_MAXIMUM_BACKOFF_DELAY_MS
this
.
_backoffDelay
*
2
)
;
this
.
_log
.
trace
(
"
_doSendTask
-
had
send
failures
backing
off
-
"
+
"
old
timeout
:
"
+
this
.
_backoffDelay
+
"
new
timeout
:
"
+
newDelay
)
;
this
.
_backoffDelay
=
newDelay
;
nextSendDelay
=
this
.
_backoffDelay
;
}
this
.
_log
.
trace
(
"
_doSendTask
-
waiting
for
next
send
opportunity
timeout
is
"
+
nextSendDelay
)
;
this
.
_sendTaskState
=
"
wait
on
next
send
opportunity
"
;
const
cancelled
=
await
CancellableTimeout
.
promiseWaitOnTimeout
(
nextSendDelay
)
;
if
(
cancelled
)
{
this
.
_log
.
trace
(
"
_doSendTask
-
batch
send
wait
was
cancelled
resetting
backoff
timer
"
)
;
resetBackoffTimer
(
)
;
}
}
}
_getNextPingSendTime
(
now
)
{
let
disableFuzzingDelay
=
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
DisableFuzzingDelay
false
)
;
if
(
disableFuzzingDelay
)
{
return
now
.
getTime
(
)
;
}
const
midnight
=
Utils
.
truncateToDays
(
now
)
;
if
(
now
.
getTime
(
)
-
midnight
.
getTime
(
)
>
MIDNIGHT_FUZZING_INTERVAL_MS
)
{
return
now
.
getTime
(
)
;
}
return
midnight
.
getTime
(
)
+
Policy
.
midnightPingFuzzingDelay
(
)
;
}
getShutdownState
(
)
{
return
{
shutdown
:
this
.
_shutdown
hasSendTask
:
!
!
this
.
_sendTask
sendsFailed
:
this
.
_sendsFailed
sendTaskState
:
this
.
_sendTaskState
backoffDelay
:
this
.
_backoffDelay
}
;
}
}
;
var
TelemetrySendImpl
=
{
_sendingEnabled
:
false
_shutdown
:
false
_logger
:
null
_pendingPingRequests
:
new
Map
(
)
_pendingPingActivity
:
new
Set
(
)
_testMode
:
false
_currentPings
:
new
Map
(
)
_isOSShutdown
:
false
_tooLateToSend
:
false
OBSERVER_TOPICS
:
[
TOPIC_IDLE_DAILY
TOPIC_QUIT_APPLICATION_GRANTED
TOPIC_QUIT_APPLICATION_FORCED
TOPIC_PROFILE_CHANGE_NET_TEARDOWN
]
OBSERVED_PREFERENCES
:
[
TelemetryUtils
.
Preferences
.
TelemetryEnabled
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
]
get
_overrideOfficialCheck
(
)
{
return
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
OverrideOfficialCheck
false
)
;
}
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
)
;
}
return
this
.
_logger
;
}
get
pendingPingRequests
(
)
{
return
this
.
_pendingPingRequests
;
}
get
pendingPingCount
(
)
{
return
(
TelemetryStorage
.
getPendingPingList
(
)
.
length
+
this
.
_currentPings
.
size
)
;
}
setTestModeEnabled
(
testing
)
{
this
.
_testMode
=
testing
;
}
earlyInit
(
)
{
this
.
_annotateCrashReport
(
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_QUIT_APPLICATION_FORCED
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_QUIT_APPLICATION_GRANTED
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsISupportsWeakReference
]
)
async
setup
(
testing
)
{
this
.
_log
.
trace
(
"
setup
"
)
;
this
.
_testMode
=
testing
;
Services
.
obs
.
addObserver
(
this
TOPIC_IDLE_DAILY
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_PROFILE_CHANGE_NET_TEARDOWN
)
;
this
.
_server
=
Services
.
prefs
.
getStringPref
(
TelemetryUtils
.
Preferences
.
Server
undefined
)
;
this
.
_sendingEnabled
=
true
;
for
(
let
pref
of
this
.
OBSERVED_PREFERENCES
)
{
Services
.
prefs
.
addObserver
(
pref
this
true
)
;
}
this
.
_annotateCrashReport
(
)
;
try
{
await
this
.
_checkPendingPings
(
)
;
}
catch
(
ex
)
{
this
.
_log
.
error
(
"
setup
-
_checkPendingPings
rejected
"
ex
)
;
}
TelemetryStorage
.
runEnforcePendingPingsQuotaTask
(
)
;
SendScheduler
.
triggerSendingPings
(
true
)
;
}
_annotateCrashReport
(
)
{
try
{
const
cr
=
Cc
[
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
]
;
if
(
cr
)
{
const
crs
=
cr
.
getService
(
Ci
.
nsICrashReporter
)
;
let
clientId
=
ClientID
.
getCachedClientID
(
)
;
let
server
=
this
.
_server
|
|
Services
.
prefs
.
getStringPref
(
TelemetryUtils
.
Preferences
.
Server
undefined
)
;
if
(
!
this
.
sendingEnabled
(
)
|
|
!
TelemetryReportingPolicy
.
canUpload
(
)
)
{
crs
.
removeCrashReportAnnotation
(
"
TelemetryClientId
"
)
;
crs
.
removeCrashReportAnnotation
(
"
TelemetryServerURL
"
)
;
}
else
{
crs
.
annotateCrashReport
(
"
TelemetryClientId
"
clientId
)
;
crs
.
annotateCrashReport
(
"
TelemetryServerURL
"
server
)
;
}
}
}
catch
(
e
)
{
}
}
async
_checkPendingPings
(
)
{
let
infos
=
await
TelemetryStorage
.
loadPendingPingList
(
)
;
this
.
_log
.
info
(
"
_checkPendingPings
-
pending
ping
count
:
"
+
infos
.
length
)
;
if
(
infos
.
length
=
=
0
)
{
this
.
_log
.
trace
(
"
_checkPendingPings
-
no
pending
pings
"
)
;
return
;
}
const
now
=
Policy
.
now
(
)
;
for
(
let
pingInfo
of
infos
)
{
const
ageInDays
=
Utils
.
millisecondsToDays
(
Math
.
abs
(
now
.
getTime
(
)
-
pingInfo
.
lastModificationDate
)
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PENDING_PINGS_AGE
"
)
.
add
(
ageInDays
)
;
}
}
async
shutdown
(
)
{
this
.
_shutdown
=
true
;
for
(
let
pref
of
this
.
OBSERVED_PREFERENCES
)
{
Services
.
prefs
.
removeObserver
(
pref
this
)
;
}
for
(
let
topic
of
this
.
OBSERVER_TOPICS
)
{
try
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
}
catch
(
ex
)
{
this
.
_log
.
error
(
"
shutdown
-
failed
to
remove
observer
for
"
+
topic
ex
)
;
}
}
this
.
_sendingEnabled
=
false
;
await
this
.
_cancelOutgoingRequests
(
)
;
await
SendScheduler
.
shutdown
(
)
;
await
this
.
promisePendingPingActivity
(
)
;
await
this
.
_persistCurrentPings
(
)
;
}
reset
(
)
{
this
.
_log
.
trace
(
"
reset
"
)
;
this
.
_shutdown
=
false
;
this
.
_currentPings
=
new
Map
(
)
;
this
.
_tooLateToSend
=
false
;
this
.
_isOSShutdown
=
false
;
this
.
_sendingEnabled
=
true
;
const
histograms
=
[
"
TELEMETRY_SUCCESS
"
"
TELEMETRY_SEND_SUCCESS
"
"
TELEMETRY_SEND_FAILURE
"
"
TELEMETRY_SEND_FAILURE_TYPE
"
]
;
histograms
.
forEach
(
h
=
>
Telemetry
.
getHistogramById
(
h
)
.
clear
(
)
)
;
const
keyedHistograms
=
[
"
TELEMETRY_SEND_FAILURE_TYPE_PER_PING
"
]
;
keyedHistograms
.
forEach
(
h
=
>
Telemetry
.
getKeyedHistogramById
(
h
)
.
clear
(
)
)
;
return
SendScheduler
.
reset
(
)
;
}
notifyCanUpload
(
)
{
if
(
!
this
.
_sendingEnabled
)
{
this
.
_log
.
trace
(
"
notifyCanUpload
-
notifying
before
sending
is
enabled
.
Ignoring
.
"
)
;
return
Promise
.
resolve
(
)
;
}
SendScheduler
.
triggerSendingPings
(
true
)
;
this
.
_annotateCrashReport
(
)
;
return
this
.
promisePendingPingActivity
(
)
;
}
observe
(
subject
topic
data
)
{
let
setOSShutdown
=
(
)
=
>
{
this
.
_log
.
trace
(
"
setOSShutdown
-
in
OS
shutdown
"
)
;
this
.
_isOSShutdown
=
true
;
}
;
switch
(
topic
)
{
case
TOPIC_IDLE_DAILY
:
SendScheduler
.
triggerSendingPings
(
true
)
;
break
;
case
TOPIC_QUIT_APPLICATION_FORCED
:
setOSShutdown
(
)
;
break
;
case
TOPIC_QUIT_APPLICATION_GRANTED
:
if
(
data
=
=
"
syncShutdown
"
)
{
setOSShutdown
(
)
;
}
break
;
case
PREF_CHANGED_TOPIC
:
if
(
this
.
OBSERVED_PREFERENCES
.
includes
(
data
)
)
{
this
.
_annotateCrashReport
(
)
;
}
break
;
case
TOPIC_PROFILE_CHANGE_NET_TEARDOWN
:
this
.
_tooLateToSend
=
true
;
break
;
}
}
_sendWithPingSender
(
pingId
submissionURL
)
{
this
.
_log
.
trace
(
"
_sendWithPingSender
-
sending
"
+
pingId
+
"
to
"
+
submissionURL
)
;
try
{
const
pingPath
=
OS
.
Path
.
join
(
TelemetryStorage
.
pingDirectoryPath
pingId
)
;
this
.
runPingSender
(
submissionURL
pingPath
)
;
}
catch
(
e
)
{
this
.
_log
.
error
(
"
_sendWithPingSender
-
failed
to
submit
ping
"
e
)
;
}
}
submitPing
(
ping
options
)
{
this
.
_log
.
trace
(
"
submitPing
-
ping
id
:
"
+
ping
.
id
+
"
options
:
"
+
JSON
.
stringify
(
options
)
)
;
if
(
!
this
.
sendingEnabled
(
ping
)
)
{
this
.
_log
.
trace
(
"
submitPing
-
Telemetry
is
not
allowed
to
send
pings
.
"
)
;
return
Promise
.
resolve
(
)
;
}
if
(
options
.
usePingSender
&
&
!
this
.
_isOSShutdown
&
&
TelemetryReportingPolicy
.
canUpload
(
)
&
&
AppConstants
.
platform
!
=
"
android
"
)
{
const
url
=
this
.
_buildSubmissionURL
(
ping
)
;
return
savePing
(
ping
)
.
then
(
(
)
=
>
this
.
_sendWithPingSender
(
ping
.
id
url
)
)
;
}
if
(
!
this
.
canSendNow
)
{
this
.
_log
.
trace
(
"
submitPing
-
can
'
t
send
ping
now
persisting
to
disk
-
"
+
"
canSendNow
:
"
+
this
.
canSendNow
)
;
return
savePing
(
ping
)
;
}
this
.
_log
.
trace
(
"
submitPing
-
can
send
pings
trying
to
send
now
"
)
;
this
.
_currentPings
.
set
(
ping
.
id
ping
)
;
SendScheduler
.
triggerSendingPings
(
true
)
;
return
Promise
.
resolve
(
)
;
}
setServer
(
server
)
{
this
.
_log
.
trace
(
"
setServer
"
server
)
;
this
.
_server
=
server
;
}
async
clearCurrentPings
(
)
{
if
(
this
.
_shutdown
)
{
this
.
_log
.
trace
(
"
clearCurrentPings
-
in
shutdown
bailing
out
"
)
;
return
;
}
await
SendScheduler
.
shutdown
(
)
;
this
.
_cancelOutgoingRequests
(
)
;
this
.
_currentPings
.
clear
(
)
;
if
(
this
.
_shutdown
)
{
this
.
_log
.
trace
(
"
clearCurrentPings
-
in
shutdown
not
spinning
SendScheduler
up
again
"
)
;
return
;
}
SendScheduler
.
start
(
)
;
SendScheduler
.
triggerSendingPings
(
true
)
;
}
_cancelOutgoingRequests
(
)
{
for
(
let
[
id
request
]
of
this
.
_pendingPingRequests
)
{
this
.
_log
.
trace
(
"
_cancelOutgoingRequests
-
aborting
ping
request
for
id
"
+
id
)
;
try
{
request
.
abort
(
)
;
}
catch
(
e
)
{
this
.
_log
.
error
(
"
_cancelOutgoingRequests
-
failed
to
abort
request
for
id
"
+
id
e
)
;
}
}
this
.
_pendingPingRequests
.
clear
(
)
;
}
sendPings
(
currentPings
persistedPingIds
)
{
let
pingSends
=
[
]
;
currentPings
=
[
.
.
.
currentPings
.
filter
(
ping
=
>
ping
.
type
=
=
=
"
health
"
)
.
.
.
currentPings
.
filter
(
ping
=
>
ping
.
type
!
=
=
"
health
"
)
]
;
for
(
let
current
of
currentPings
)
{
let
ping
=
current
;
let
p
=
(
async
(
)
=
>
{
try
{
await
this
.
_doPing
(
ping
ping
.
id
false
)
;
}
catch
(
ex
)
{
if
(
isOptoutPing
(
ping
)
)
{
this
.
_log
.
info
(
"
sendPings
-
optout
ping
"
+
ping
.
id
+
"
not
sent
discarding
"
ex
)
;
}
else
{
this
.
_log
.
info
(
"
sendPings
-
ping
"
+
ping
.
id
+
"
not
sent
saving
to
disk
"
ex
)
;
await
savePing
(
ping
)
;
}
}
finally
{
this
.
_currentPings
.
delete
(
ping
.
id
)
;
}
}
)
(
)
;
this
.
_trackPendingPingTask
(
p
)
;
pingSends
.
push
(
p
)
;
}
if
(
persistedPingIds
.
length
>
0
)
{
pingSends
.
push
(
this
.
_sendPersistedPings
(
persistedPingIds
)
.
catch
(
ex
=
>
{
this
.
_log
.
info
(
"
sendPings
-
persisted
pings
not
sent
"
ex
)
;
}
)
)
;
}
return
Promise
.
all
(
pingSends
)
;
}
async
_sendPersistedPings
(
pingIds
)
{
this
.
_log
.
trace
(
"
sendPersistedPings
"
)
;
if
(
this
.
pendingPingCount
<
1
)
{
this
.
_log
.
trace
(
"
_sendPersistedPings
-
no
pings
to
send
"
)
;
return
;
}
if
(
pingIds
.
length
<
1
)
{
this
.
_log
.
trace
(
"
sendPersistedPings
-
no
pings
to
send
"
)
;
return
;
}
this
.
_log
.
trace
(
"
sendPersistedPings
-
sending
"
+
pingIds
.
length
+
"
pings
"
)
;
let
pingSendPromises
=
[
]
;
for
(
let
pingId
of
pingIds
)
{
const
id
=
pingId
;
pingSendPromises
.
push
(
TelemetryStorage
.
loadPendingPing
(
id
)
.
then
(
data
=
>
this
.
_doPing
(
data
id
true
)
)
.
catch
(
e
=
>
this
.
_log
.
error
(
"
sendPersistedPings
-
failed
to
send
ping
"
+
id
e
)
)
)
;
}
let
promise
=
Promise
.
all
(
pingSendPromises
)
;
this
.
_trackPendingPingTask
(
promise
)
;
await
promise
;
}
_onPingRequestFinished
(
success
startTime
id
isPersisted
)
{
this
.
_log
.
trace
(
"
_onPingRequestFinished
-
success
:
"
+
success
+
"
persisted
:
"
+
isPersisted
)
;
let
sendId
=
success
?
"
TELEMETRY_SEND_SUCCESS
"
:
"
TELEMETRY_SEND_FAILURE
"
;
let
hsend
=
Telemetry
.
getHistogramById
(
sendId
)
;
let
hsuccess
=
Telemetry
.
getHistogramById
(
"
TELEMETRY_SUCCESS
"
)
;
hsend
.
add
(
Utils
.
monotonicNow
(
)
-
startTime
)
;
hsuccess
.
add
(
success
)
;
if
(
!
success
)
{
SendScheduler
.
notifySendsFailed
(
)
;
}
if
(
success
&
&
isPersisted
)
{
return
TelemetryStorage
.
removePendingPing
(
id
)
;
}
return
Promise
.
resolve
(
)
;
}
_buildSubmissionURL
(
ping
)
{
const
version
=
isV4PingFormat
(
ping
)
?
AppConstants
.
TELEMETRY_PING_FORMAT_VERSION
:
1
;
return
this
.
_server
+
this
.
_getSubmissionPath
(
ping
)
+
"
?
v
=
"
+
version
;
}
_getSubmissionPath
(
ping
)
{
let
pathComponents
;
if
(
isV4PingFormat
(
ping
)
)
{
let
app
=
ping
.
application
;
pathComponents
=
[
ping
.
id
ping
.
type
app
.
name
app
.
version
app
.
channel
app
.
buildId
]
;
}
else
{
if
(
!
(
"
slug
"
in
ping
)
)
{
ping
.
slug
=
Utils
.
generateUUID
(
)
;
}
let
payload
=
"
payload
"
in
ping
?
ping
.
payload
:
null
;
if
(
payload
&
&
"
info
"
in
payload
)
{
let
info
=
ping
.
payload
.
info
;
pathComponents
=
[
ping
.
slug
info
.
reason
info
.
appName
info
.
appVersion
info
.
appUpdateChannel
info
.
appBuildID
]
;
}
else
{
pathComponents
=
[
ping
.
slug
]
;
}
}
let
slug
=
pathComponents
.
join
(
"
/
"
)
;
return
"
/
submit
/
telemetry
/
"
+
slug
;
}
_doPing
(
ping
id
isPersisted
)
{
if
(
!
this
.
sendingEnabled
(
ping
)
)
{
this
.
_log
.
trace
(
"
_doPing
-
Can
'
t
send
ping
"
+
ping
.
id
)
;
return
Promise
.
resolve
(
)
;
}
if
(
this
.
_tooLateToSend
)
{
this
.
_log
.
trace
(
"
_doPing
-
Too
late
to
send
ping
"
+
ping
.
id
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_SEND_FAILURE_TYPE
"
)
.
add
(
"
eTooLate
"
)
;
Telemetry
.
getKeyedHistogramById
(
"
TELEMETRY_SEND_FAILURE_TYPE_PER_PING
"
)
.
add
(
ping
.
type
"
eTooLate
"
)
;
return
Promise
.
reject
(
)
;
}
this
.
_log
.
trace
(
"
_doPing
-
server
:
"
+
this
.
_server
+
"
persisted
:
"
+
isPersisted
+
"
id
:
"
+
id
)
;
const
url
=
this
.
_buildSubmissionURL
(
ping
)
;
let
request
=
new
ServiceRequest
(
{
mozAnon
:
true
}
)
;
request
.
mozBackgroundRequest
=
true
;
request
.
timeout
=
Policy
.
pingSubmissionTimeout
(
)
;
request
.
open
(
"
POST
"
url
true
)
;
request
.
overrideMimeType
(
"
text
/
plain
"
)
;
request
.
setRequestHeader
(
"
Content
-
Type
"
"
application
/
json
;
charset
=
UTF
-
8
"
)
;
request
.
setRequestHeader
(
"
Date
"
Policy
.
now
(
)
.
toUTCString
(
)
)
;
this
.
_pendingPingRequests
.
set
(
id
request
)
;
const
monotonicStartTime
=
Utils
.
monotonicNow
(
)
;
let
deferred
=
PromiseUtils
.
defer
(
)
;
let
onRequestFinished
=
(
success
event
)
=
>
{
let
onCompletion
=
(
)
=
>
{
if
(
success
)
{
deferred
.
resolve
(
)
;
}
else
{
deferred
.
reject
(
event
)
;
}
}
;
this
.
_pendingPingRequests
.
delete
(
id
)
;
this
.
_onPingRequestFinished
(
success
monotonicStartTime
id
isPersisted
)
.
then
(
(
)
=
>
onCompletion
(
)
error
=
>
{
this
.
_log
.
error
(
"
_doPing
-
request
success
:
"
+
success
+
"
error
:
"
+
error
)
;
onCompletion
(
)
;
}
)
;
}
;
let
errorhandler
=
event
=
>
{
let
failure
=
event
.
type
;
if
(
failure
=
=
=
"
error
"
)
{
failure
=
XHR_ERROR_TYPE
[
request
.
errorCode
]
;
}
TelemetryHealthPing
.
recordSendFailure
(
failure
)
;
if
(
this
.
fallbackHttp
)
{
this
.
fallbackHttp
=
false
;
request
.
channel
.
securityInfo
.
QueryInterface
(
Ci
.
nsITransportSecurityInfo
)
.
QueryInterface
(
Ci
.
nsISerializable
)
;
if
(
request
.
channel
.
securityInfo
.
errorCodeString
.
startsWith
(
"
SEC_
"
)
)
{
let
fallbackUrl
=
new
URL
(
url
)
;
fallbackUrl
.
protocol
=
"
http
:
"
;
request
.
open
(
"
POST
"
fallbackUrl
true
)
;
request
.
sendInputStream
(
this
.
payloadStream
)
;
}
}
Telemetry
.
getHistogramById
(
"
TELEMETRY_SEND_FAILURE_TYPE
"
)
.
add
(
failure
)
;
Telemetry
.
getKeyedHistogramById
(
"
TELEMETRY_SEND_FAILURE_TYPE_PER_PING
"
)
.
add
(
ping
.
type
failure
)
;
this
.
_log
.
error
(
"
_doPing
-
error
making
request
to
"
+
url
+
"
:
"
+
failure
)
;
onRequestFinished
(
false
event
)
;
}
;
request
.
onerror
=
errorhandler
;
request
.
ontimeout
=
errorhandler
;
request
.
onabort
=
errorhandler
;
request
.
onload
=
event
=
>
{
let
status
=
request
.
status
;
let
statusClass
=
status
-
(
status
%
100
)
;
let
success
=
false
;
if
(
statusClass
=
=
=
200
)
{
this
.
_log
.
info
(
"
_doPing
-
successfully
loaded
status
:
"
+
status
)
;
success
=
true
;
}
else
if
(
statusClass
=
=
=
400
)
{
this
.
_log
.
error
(
"
_doPing
-
error
submitting
to
"
+
url
+
"
status
:
"
+
status
+
"
-
ping
request
broken
?
"
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PING_EVICTED_FOR_SERVER_ERRORS
"
)
.
add
(
)
;
success
=
true
;
}
else
if
(
statusClass
=
=
=
500
)
{
this
.
_log
.
error
(
"
_doPing
-
error
submitting
to
"
+
url
+
"
status
:
"
+
status
+
"
-
server
error
should
retry
later
"
)
;
}
else
{
this
.
_log
.
error
(
"
_doPing
-
error
submitting
to
"
+
url
+
"
status
:
"
+
status
+
"
type
:
"
+
event
.
type
)
;
}
onRequestFinished
(
success
event
)
;
}
;
let
networkPayload
=
isV4PingFormat
(
ping
)
?
ping
:
ping
.
payload
;
request
.
setRequestHeader
(
"
Content
-
Encoding
"
"
gzip
"
)
;
let
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
let
startTime
=
Utils
.
monotonicNow
(
)
;
let
utf8Payload
=
converter
.
ConvertFromUnicode
(
JSON
.
stringify
(
networkPayload
)
)
;
utf8Payload
+
=
converter
.
Finish
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_STRINGIFY
"
)
.
add
(
Utils
.
monotonicNow
(
)
-
startTime
)
;
let
payloadStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
startTime
=
Utils
.
monotonicNow
(
)
;
payloadStream
.
data
=
Policy
.
gzipCompressString
(
utf8Payload
)
;
const
compressedPingSizeBytes
=
payloadStream
.
data
.
length
;
if
(
compressedPingSizeBytes
>
TelemetryStorage
.
MAXIMUM_PING_SIZE
)
{
this
.
_log
.
error
(
"
_doPing
-
submitted
ping
exceeds
the
size
limit
size
:
"
+
compressedPingSizeBytes
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_PING_SIZE_EXCEEDED_SEND
"
)
.
add
(
)
;
Telemetry
.
getHistogramById
(
"
TELEMETRY_DISCARDED_SEND_PINGS_SIZE_MB
"
)
.
add
(
Math
.
floor
(
compressedPingSizeBytes
/
1024
/
1024
)
)
;
this
.
_pendingPingRequests
.
delete
(
id
)
;
TelemetryHealthPing
.
recordDiscardedPing
(
ping
.
type
)
;
return
TelemetryStorage
.
removePendingPing
(
id
)
;
}
Telemetry
.
getHistogramById
(
"
TELEMETRY_COMPRESS
"
)
.
add
(
Utils
.
monotonicNow
(
)
-
startTime
)
;
request
.
sendInputStream
(
payloadStream
)
;
this
.
payloadStream
=
payloadStream
;
return
deferred
.
promise
;
}
get
canSendNow
(
)
{
if
(
!
TelemetryReportingPolicy
.
canUpload
(
)
)
{
return
false
;
}
return
this
.
_sendingEnabled
;
}
sendingEnabled
(
ping
=
null
)
{
if
(
!
Telemetry
.
isOfficialTelemetry
&
&
!
this
.
_testMode
&
&
!
this
.
_overrideOfficialCheck
)
{
return
false
;
}
if
(
IS_UNIFIED_TELEMETRY
)
{
if
(
ping
&
&
isOptoutPing
(
ping
)
)
{
return
true
;
}
return
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
)
;
}
return
Utils
.
isTelemetryEnabled
;
}
_trackPendingPingTask
(
promise
)
{
let
clear
=
(
)
=
>
this
.
_pendingPingActivity
.
delete
(
promise
)
;
promise
.
then
(
clear
clear
)
;
this
.
_pendingPingActivity
.
add
(
promise
)
;
}
promisePendingPingActivity
(
)
{
this
.
_log
.
trace
(
"
promisePendingPingActivity
-
Waiting
for
ping
task
"
)
;
let
p
=
Array
.
from
(
this
.
_pendingPingActivity
p
=
>
p
.
catch
(
ex
=
>
{
this
.
_log
.
error
(
"
promisePendingPingActivity
-
ping
activity
had
an
error
"
ex
)
;
}
)
)
;
p
.
push
(
SendScheduler
.
waitOnSendTask
(
)
)
;
return
Promise
.
all
(
p
)
;
}
async
_persistCurrentPings
(
)
{
for
(
let
[
id
ping
]
of
this
.
_currentPings
)
{
try
{
if
(
!
isOptoutPing
(
ping
)
)
{
await
savePing
(
ping
)
;
this
.
_log
.
trace
(
"
_persistCurrentPings
-
saved
ping
"
+
id
)
;
}
}
catch
(
ex
)
{
this
.
_log
.
error
(
"
_persistCurrentPings
-
failed
to
save
ping
"
+
id
ex
)
;
}
finally
{
this
.
_currentPings
.
delete
(
id
)
;
}
}
}
getUnpersistedPings
(
)
{
let
current
=
[
.
.
.
this
.
_currentPings
.
values
(
)
]
;
current
.
reverse
(
)
;
return
current
;
}
getShutdownState
(
)
{
return
{
sendingEnabled
:
this
.
_sendingEnabled
pendingPingRequestCount
:
this
.
_pendingPingRequests
.
size
pendingPingActivityCount
:
this
.
_pendingPingActivity
.
size
unpersistedPingCount
:
this
.
_currentPings
.
size
persistedPingCount
:
TelemetryStorage
.
getPendingPingList
(
)
.
length
schedulerState
:
SendScheduler
.
getShutdownState
(
)
}
;
}
runPingSender
(
url
pingPath
observer
)
{
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
const
exeName
=
AppConstants
.
platform
=
=
=
"
win
"
?
"
pingsender
.
exe
"
:
"
pingsender
"
;
let
exe
=
Services
.
dirsvc
.
get
(
"
GreBinD
"
Ci
.
nsIFile
)
;
exe
.
append
(
exeName
)
;
let
process
=
Cc
[
"
mozilla
.
org
/
process
/
util
;
1
"
]
.
createInstance
(
Ci
.
nsIProcess
)
;
process
.
init
(
exe
)
;
process
.
startHidden
=
true
;
process
.
noShell
=
true
;
process
.
runAsync
(
[
url
pingPath
]
2
observer
)
;
}
}
;
