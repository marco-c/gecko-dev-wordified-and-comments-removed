"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TelemetryArchive
"
]
;
const
{
Log
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Log
.
sys
.
mjs
"
)
;
const
{
Preferences
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
)
;
const
{
TelemetryUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
const
LOGGER_NAME
=
"
Toolkit
.
Telemetry
"
;
const
LOGGER_PREFIX
=
"
TelemetryArchive
:
:
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
TelemetryStorage
"
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
jsm
"
)
;
var
TelemetryArchive
=
{
promiseArchivedPingList
(
)
{
return
TelemetryArchiveImpl
.
promiseArchivedPingList
(
)
;
}
promiseArchivedPingById
(
id
)
{
return
TelemetryArchiveImpl
.
promiseArchivedPingById
(
id
)
;
}
promiseArchivePing
(
ping
)
{
return
TelemetryArchiveImpl
.
promiseArchivePing
(
ping
)
;
}
}
;
function
shouldArchivePings
(
)
{
return
Preferences
.
get
(
TelemetryUtils
.
Preferences
.
ArchiveEnabled
false
)
;
}
var
TelemetryArchiveImpl
=
{
_logger
:
null
get
_log
(
)
{
if
(
!
this
.
_logger
)
{
this
.
_logger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
)
;
}
return
this
.
_logger
;
}
promiseArchivePing
(
ping
)
{
if
(
!
shouldArchivePings
(
)
)
{
this
.
_log
.
trace
(
"
promiseArchivePing
-
archiving
is
disabled
"
)
;
return
Promise
.
resolve
(
)
;
}
for
(
let
field
of
[
"
creationDate
"
"
id
"
"
type
"
]
)
{
if
(
!
(
field
in
ping
)
)
{
this
.
_log
.
warn
(
"
promiseArchivePing
-
missing
field
"
+
field
)
;
return
Promise
.
reject
(
new
Error
(
"
missing
field
"
+
field
)
)
;
}
}
return
lazy
.
TelemetryStorage
.
saveArchivedPing
(
ping
)
;
}
_buildArchivedPingList
(
archivedPingsMap
)
{
let
list
=
Array
.
from
(
archivedPingsMap
p
=
>
(
{
id
:
p
[
0
]
timestampCreated
:
p
[
1
]
.
timestampCreated
type
:
p
[
1
]
.
type
}
)
)
;
list
.
sort
(
(
a
b
)
=
>
a
.
timestampCreated
-
b
.
timestampCreated
)
;
return
list
;
}
promiseArchivedPingList
(
)
{
this
.
_log
.
trace
(
"
promiseArchivedPingList
"
)
;
return
lazy
.
TelemetryStorage
.
loadArchivedPingList
(
)
.
then
(
loadedInfo
=
>
{
return
this
.
_buildArchivedPingList
(
loadedInfo
)
;
}
)
;
}
promiseArchivedPingById
(
id
)
{
this
.
_log
.
trace
(
"
promiseArchivedPingById
-
id
:
"
+
id
)
;
return
lazy
.
TelemetryStorage
.
loadArchivedPing
(
id
)
;
}
}
;
