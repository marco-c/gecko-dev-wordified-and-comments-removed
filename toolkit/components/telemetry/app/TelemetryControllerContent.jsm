"
use
strict
"
;
const
{
DeferredTask
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
sys
.
mjs
"
)
;
const
{
TelemetryControllerBase
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryControllerBase
.
jsm
"
)
;
const
TELEMETRY_DELAY
=
Services
.
prefs
.
getIntPref
(
"
toolkit
.
telemetry
.
initDelay
"
60
)
*
1000
;
const
TELEMETRY_TEST_DELAY
=
1
;
var
EXPORTED_SYMBOLS
=
[
"
TelemetryController
"
"
getTelemetryController
"
]
;
var
TelemetryController
=
Object
.
freeze
(
{
testInitLogging
(
)
{
TelemetryControllerBase
.
configureLogging
(
)
;
}
testSetupContent
(
)
{
return
Impl
.
setupContentTelemetry
(
true
)
;
}
observe
(
aSubject
aTopic
aData
)
{
return
Impl
.
observe
(
aSubject
aTopic
aData
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
}
)
;
var
Impl
=
{
_testMode
:
false
get
_log
(
)
{
return
TelemetryControllerBase
.
log
;
}
setupContentTelemetry
(
testing
=
false
)
{
this
.
_testMode
=
testing
;
if
(
testing
|
|
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
if
(
!
TelemetryControllerBase
.
enableTelemetryRecording
(
)
)
{
this
.
_log
.
trace
(
"
setupContentTelemetry
-
Content
process
recording
disabled
.
"
)
;
return
;
}
}
Services
.
telemetry
.
earlyInit
(
)
;
let
delayedTask
=
new
DeferredTask
(
(
)
=
>
{
Services
.
telemetry
.
delayedInit
(
)
;
}
testing
?
TELEMETRY_TEST_DELAY
:
TELEMETRY_DELAY
testing
?
0
:
undefined
)
;
delayedTask
.
arm
(
)
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
content
-
process
-
ready
-
for
-
script
"
)
{
TelemetryControllerBase
.
configureLogging
(
)
;
this
.
_log
.
trace
(
observe
-
{
aTopic
}
notified
.
)
;
this
.
setupContentTelemetry
(
)
;
}
}
}
;
function
getTelemetryController
(
)
{
return
TelemetryController
;
}
