"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TelemetryControllerBase
"
]
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
TelemetryUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
const
LOGGER_NAME
=
"
Toolkit
.
Telemetry
"
;
const
LOGGER_PREFIX
=
"
TelemetryController
:
:
"
;
const
PREF_BRANCH_LOG
=
"
toolkit
.
telemetry
.
log
.
"
;
var
gLogger
=
null
;
var
gLogAppenderDump
=
null
;
var
TelemetryControllerBase
=
Object
.
freeze
(
{
IS_UNIFIED_TELEMETRY
:
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
Unified
false
)
get
log
(
)
{
return
(
gLogger
|
|
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
)
)
;
}
configureLogging
(
)
{
if
(
!
gLogger
)
{
gLogger
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
LOGGER_PREFIX
)
;
let
consoleAppender
=
new
Log
.
ConsoleAppender
(
new
Log
.
BasicFormatter
(
)
)
;
gLogger
.
addAppender
(
consoleAppender
)
;
Services
.
prefs
.
addObserver
(
PREF_BRANCH_LOG
this
.
configureLogging
)
;
}
gLogger
.
level
=
Log
.
Level
[
Services
.
prefs
.
getStringPref
(
TelemetryUtils
.
Preferences
.
LogLevel
"
Warn
"
)
]
;
let
logDumping
=
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
LogDump
false
)
;
if
(
logDumping
!
=
!
!
gLogAppenderDump
)
{
if
(
logDumping
)
{
gLogAppenderDump
=
new
Log
.
DumpAppender
(
new
Log
.
BasicFormatter
(
)
)
;
gLogger
.
addAppender
(
gLogAppenderDump
)
;
}
else
{
gLogger
.
removeAppender
(
gLogAppenderDump
)
;
gLogAppenderDump
=
null
;
}
}
}
enableTelemetryRecording
:
function
enableTelemetryRecording
(
)
{
if
(
this
.
IS_UNIFIED_TELEMETRY
)
{
TelemetryUtils
.
setTelemetryRecordingFlags
(
)
;
}
else
{
Services
.
telemetry
.
canRecordBase
=
Services
.
telemetry
.
canRecordExtended
=
TelemetryUtils
.
isTelemetryEnabled
;
}
this
.
log
.
config
(
"
enableTelemetryRecording
-
canRecordBase
:
"
+
Services
.
telemetry
.
canRecordBase
+
"
canRecordExtended
:
"
+
Services
.
telemetry
.
canRecordExtended
)
;
return
Services
.
telemetry
.
canRecordBase
;
}
}
)
;
