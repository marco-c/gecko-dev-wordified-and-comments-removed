#
ifndef
HangReports_h__
#
define
HangReports_h__
#
include
<
vector
>
#
include
"
mozilla
/
HangAnnotations
.
h
"
#
include
"
ProcessedStack
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
CombinedStacks
.
h
"
namespace
mozilla
{
namespace
Telemetry
{
nsresult
ComputeAnnotationsKey
(
const
HangMonitor
:
:
HangAnnotationsPtr
&
aAnnotations
nsAString
&
aKeyOut
)
;
class
HangReports
{
public
:
struct
AnnotationInfo
{
AnnotationInfo
(
uint32_t
aHangIndex
HangMonitor
:
:
HangAnnotationsPtr
aAnnotations
)
:
mAnnotations
(
Move
(
aAnnotations
)
)
{
mHangIndices
.
AppendElement
(
aHangIndex
)
;
}
AnnotationInfo
(
AnnotationInfo
&
&
aOther
)
:
mHangIndices
(
aOther
.
mHangIndices
)
mAnnotations
(
Move
(
aOther
.
mAnnotations
)
)
{
}
~
AnnotationInfo
(
)
=
default
;
AnnotationInfo
&
operator
=
(
AnnotationInfo
&
&
aOther
)
{
mHangIndices
=
aOther
.
mHangIndices
;
mAnnotations
=
Move
(
aOther
.
mAnnotations
)
;
return
*
this
;
}
nsTArray
<
uint32_t
>
mHangIndices
;
HangMonitor
:
:
HangAnnotationsPtr
mAnnotations
;
private
:
AnnotationInfo
(
const
AnnotationInfo
&
aOther
)
=
delete
;
void
operator
=
(
const
AnnotationInfo
&
aOther
)
=
delete
;
}
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
#
if
defined
(
MOZ_GECKO_PROFILER
)
void
AddHang
(
const
Telemetry
:
:
ProcessedStack
&
aStack
uint32_t
aDuration
int32_t
aSystemUptime
int32_t
aFirefoxUptime
HangMonitor
:
:
HangAnnotationsPtr
aAnnotations
)
;
void
PruneStackReferences
(
const
size_t
aRemovedStackIndex
)
;
#
endif
uint32_t
GetDuration
(
unsigned
aIndex
)
const
;
int32_t
GetSystemUptime
(
unsigned
aIndex
)
const
;
int32_t
GetFirefoxUptime
(
unsigned
aIndex
)
const
;
const
nsClassHashtable
<
nsStringHashKey
AnnotationInfo
>
&
GetAnnotationInfo
(
)
const
;
const
CombinedStacks
&
GetStacks
(
)
const
;
private
:
struct
HangInfo
{
uint32_t
mDuration
;
int32_t
mSystemUptime
;
int32_t
mFirefoxUptime
;
}
;
std
:
:
vector
<
HangInfo
>
mHangInfo
;
nsClassHashtable
<
nsStringHashKey
AnnotationInfo
>
mAnnotationInfo
;
CombinedStacks
mStacks
;
}
;
}
}
#
endif
