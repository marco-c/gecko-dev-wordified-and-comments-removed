"
use
strict
"
;
const
Cu
=
Components
.
utils
;
const
PREF_BRANCH
=
"
toolkit
.
telemetry
.
"
;
const
PREF_ENABLED
=
PREF_BRANCH
+
"
enabled
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
UITelemetry
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
this
.
UITelemetry
=
{
_enabled
:
undefined
_activeSessions
:
{
}
_measurements
:
[
]
get
enabled
(
)
{
if
(
this
.
_enabled
!
=
=
undefined
)
{
return
this
.
_enabled
;
}
Services
.
prefs
.
addObserver
(
PREF_ENABLED
this
false
)
;
Services
.
obs
.
addObserver
(
this
"
profile
-
before
-
change
"
false
)
;
this
.
_enabled
=
Services
.
prefs
.
getBoolPref
(
PREF_ENABLED
false
)
;
return
this
.
_enabled
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
profile
-
before
-
change
"
)
{
Services
.
obs
.
removeObserver
(
this
"
profile
-
before
-
change
"
)
;
Services
.
prefs
.
removeObserver
(
PREF_ENABLED
this
)
;
this
.
_enabled
=
undefined
;
return
;
}
if
(
aTopic
=
=
"
nsPref
:
changed
"
)
{
switch
(
aData
)
{
case
PREF_ENABLED
:
let
on
=
Services
.
prefs
.
getBoolPref
(
PREF_ENABLED
)
;
this
.
_enabled
=
on
;
if
(
!
on
)
{
this
.
_activeSessions
=
{
}
;
this
.
_measurements
=
[
]
;
}
break
;
}
}
}
get
wrappedJSObject
(
)
{
return
this
;
}
_simpleMeasureFunctions
:
{
}
uptimeMillis
(
)
{
return
Date
.
now
(
)
-
Services
.
startup
.
getStartupInfo
(
)
.
process
;
}
addEvent
(
aAction
aMethod
aTimestamp
aExtras
)
{
if
(
!
this
.
enabled
)
{
return
;
}
let
sessions
=
Object
.
keys
(
this
.
_activeSessions
)
;
let
aEvent
=
{
type
:
"
event
"
action
:
aAction
method
:
aMethod
sessions
timestamp
:
(
aTimestamp
=
=
undefined
)
?
this
.
uptimeMillis
(
)
:
aTimestamp
}
;
if
(
aExtras
)
{
aEvent
.
extras
=
aExtras
;
}
this
.
_recordEvent
(
aEvent
)
;
}
startSession
(
aName
aTimestamp
)
{
if
(
!
this
.
enabled
)
{
return
;
}
if
(
this
.
_activeSessions
[
aName
]
)
{
return
;
}
this
.
_activeSessions
[
aName
]
=
(
aTimestamp
=
=
undefined
)
?
this
.
uptimeMillis
(
)
:
aTimestamp
;
}
stopSession
(
aName
aReason
aTimestamp
)
{
if
(
!
this
.
enabled
)
{
return
;
}
let
sessionStart
=
this
.
_activeSessions
[
aName
]
;
delete
this
.
_activeSessions
[
aName
]
;
if
(
!
sessionStart
)
{
return
;
}
let
aEvent
=
{
type
:
"
session
"
name
:
aName
reason
:
aReason
start
:
sessionStart
end
:
(
aTimestamp
=
=
undefined
)
?
this
.
uptimeMillis
(
)
:
aTimestamp
}
;
this
.
_recordEvent
(
aEvent
)
;
}
_recordEvent
(
aEvent
)
{
this
.
_measurements
.
push
(
aEvent
)
;
}
getSimpleMeasures
(
)
{
if
(
!
this
.
enabled
)
{
return
{
}
;
}
let
result
=
{
}
;
for
(
let
name
in
this
.
_simpleMeasureFunctions
)
{
result
[
name
]
=
this
.
_simpleMeasureFunctions
[
name
]
(
)
;
}
return
result
;
}
addSimpleMeasureFunction
(
aName
aFunction
)
{
if
(
!
this
.
enabled
)
{
return
;
}
if
(
aName
in
this
.
_simpleMeasureFunctions
)
{
throw
new
Error
(
"
A
simple
measurement
function
is
already
registered
for
"
+
aName
)
;
}
if
(
!
aFunction
|
|
typeof
aFunction
!
=
=
"
function
"
)
{
throw
new
Error
(
"
addSimpleMeasureFunction
called
with
non
-
function
argument
.
"
)
;
}
this
.
_simpleMeasureFunctions
[
aName
]
=
aFunction
;
}
removeSimpleMeasureFunction
(
aName
)
{
delete
this
.
_simpleMeasureFunctions
[
aName
]
;
}
getUIMeasurements
(
aClear
)
{
if
(
!
this
.
enabled
)
{
return
[
]
;
}
let
measurements
=
this
.
_measurements
.
slice
(
)
;
if
(
aClear
)
{
this
.
_measurements
=
[
]
;
}
return
measurements
;
}
}
;
