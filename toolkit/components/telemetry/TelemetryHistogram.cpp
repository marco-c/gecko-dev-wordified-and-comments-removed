#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsBaseHashtable
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsITelemetry
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
StartupTimeline
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
TelemetryCommon
.
h
"
#
include
"
TelemetryHistogram
.
h
"
#
include
"
TelemetryScalar
.
h
"
#
include
"
ipc
/
TelemetryIPCAccumulator
.
h
"
#
include
"
base
/
histogram
.
h
"
#
include
<
limits
>
using
base
:
:
Histogram
;
using
base
:
:
BooleanHistogram
;
using
base
:
:
CountHistogram
;
using
base
:
:
FlagHistogram
;
using
base
:
:
LinearHistogram
;
using
mozilla
:
:
StaticMutex
;
using
mozilla
:
:
StaticMutexAutoLock
;
using
mozilla
:
:
Telemetry
:
:
HistogramAccumulation
;
using
mozilla
:
:
Telemetry
:
:
KeyedHistogramAccumulation
;
using
mozilla
:
:
Telemetry
:
:
HistogramID
;
using
mozilla
:
:
Telemetry
:
:
ProcessID
;
using
mozilla
:
:
Telemetry
:
:
HistogramCount
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
LogToBrowserConsole
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
RecordedProcessType
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
AutoHashtable
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
GetNameForProcessID
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
IsExpiredVersion
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
CanRecordDataset
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
CanRecordProduct
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
SupportedProduct
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
IsInDataset
;
using
mozilla
:
:
Telemetry
:
:
Common
:
:
ToJSString
;
namespace
TelemetryIPCAccumulator
=
mozilla
:
:
TelemetryIPCAccumulator
;
static
StaticMutex
gTelemetryHistogramMutex
;
namespace
{
typedef
nsDataHashtable
<
nsCStringHashKey
HistogramID
>
StringToHistogramIdMap
;
struct
HistogramInfo
{
uint32_t
min
;
uint32_t
max
;
uint32_t
bucketCount
;
uint32_t
histogramType
;
uint32_t
name_offset
;
uint32_t
expiration_offset
;
uint32_t
dataset
;
uint32_t
label_index
;
uint32_t
label_count
;
uint32_t
key_index
;
uint32_t
key_count
;
RecordedProcessType
record_in_processes
;
bool
keyed
;
SupportedProduct
products
;
const
char
*
name
(
)
const
;
const
char
*
expiration
(
)
const
;
nsresult
label_id
(
const
char
*
label
uint32_t
*
labelId
)
const
;
bool
allows_key
(
const
nsACString
&
key
)
const
;
}
;
enum
reflectStatus
{
REFLECT_OK
REFLECT_FAILURE
}
;
struct
HistogramSnapshotData
{
nsTArray
<
Histogram
:
:
Sample
>
mBucketRanges
;
nsTArray
<
Histogram
:
:
Count
>
mBucketCounts
;
int64_t
mSampleSum
;
}
;
struct
HistogramSnapshotInfo
{
HistogramSnapshotData
data
;
HistogramID
histogramID
;
}
;
typedef
mozilla
:
:
Vector
<
HistogramSnapshotInfo
>
HistogramSnapshotsArray
;
typedef
mozilla
:
:
Vector
<
HistogramSnapshotsArray
>
HistogramProcessSnapshotsArray
;
typedef
nsDataHashtable
<
nsCStringHashKey
HistogramSnapshotData
>
KeyedHistogramSnapshotData
;
struct
KeyedHistogramSnapshotInfo
{
KeyedHistogramSnapshotData
data
;
HistogramID
histogramId
;
}
;
typedef
mozilla
:
:
Vector
<
KeyedHistogramSnapshotInfo
>
KeyedHistogramSnapshotsArray
;
typedef
mozilla
:
:
Vector
<
KeyedHistogramSnapshotsArray
>
KeyedHistogramProcessSnapshotsArray
;
class
KeyedHistogram
{
public
:
KeyedHistogram
(
HistogramID
id
const
HistogramInfo
&
info
)
;
~
KeyedHistogram
(
)
;
nsresult
GetHistogram
(
const
nsCString
&
name
Histogram
*
*
histogram
)
;
Histogram
*
GetHistogram
(
const
nsCString
&
name
)
;
uint32_t
GetHistogramType
(
)
const
{
return
mHistogramInfo
.
histogramType
;
}
nsresult
GetJSKeys
(
JSContext
*
cx
JS
:
:
CallArgs
&
args
)
;
nsresult
GetJSSnapshot
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
bool
clearSubsession
)
;
nsresult
GetSnapshot
(
const
StaticMutexAutoLock
&
aLock
KeyedHistogramSnapshotData
&
aSnapshot
bool
aClearSubsession
)
;
nsresult
Add
(
const
nsCString
&
key
uint32_t
aSample
ProcessID
aProcessType
)
;
void
Clear
(
)
;
HistogramID
GetHistogramID
(
)
const
{
return
mId
;
}
private
:
typedef
nsBaseHashtableET
<
nsCStringHashKey
Histogram
*
>
KeyedHistogramEntry
;
typedef
AutoHashtable
<
KeyedHistogramEntry
>
KeyedHistogramMapType
;
KeyedHistogramMapType
mHistogramMap
;
const
HistogramID
mId
;
const
HistogramInfo
&
mHistogramInfo
;
}
;
}
namespace
{
bool
gInitDone
=
false
;
bool
gCanRecordBase
=
false
;
bool
gCanRecordExtended
=
false
;
Histogram
*
*
gHistogramStorage
;
KeyedHistogram
*
*
gKeyedHistogramStorage
;
StringToHistogramIdMap
gNameToHistogramIDMap
(
HistogramCount
)
;
Histogram
*
gExpiredHistogram
=
nullptr
;
bool
gHistogramRecordingDisabled
[
HistogramCount
]
=
{
}
;
#
include
"
TelemetryHistogramData
.
inc
"
}
namespace
{
const
HistogramID
kRecordingInitiallyDisabledIDs
[
]
=
{
mozilla
:
:
Telemetry
:
:
FX_REFRESH_DRIVER_SYNC_SCROLL_FRAME_DELAY_MS
mozilla
:
:
Telemetry
:
:
TELEMETRY_TEST_COUNT_INIT_NO_RECORD
mozilla
:
:
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT_INIT_NO_RECORD
}
;
}
namespace
{
size_t
internal_KeyedHistogramStorageIndex
(
HistogramID
aHistogramId
ProcessID
aProcessId
)
{
return
aHistogramId
*
size_t
(
ProcessID
:
:
Count
)
+
size_t
(
aProcessId
)
;
}
size_t
internal_HistogramStorageIndex
(
HistogramID
aHistogramId
ProcessID
aProcessId
)
{
static_assert
(
HistogramCount
<
std
:
:
numeric_limits
<
size_t
>
:
:
max
(
)
/
size_t
(
ProcessID
:
:
Count
)
"
Too
many
histograms
and
processes
to
store
in
a
1D
array
.
"
)
;
return
aHistogramId
*
size_t
(
ProcessID
:
:
Count
)
+
size_t
(
aProcessId
)
;
}
Histogram
*
internal_GetHistogramFromStorage
(
HistogramID
aHistogramId
ProcessID
aProcessId
)
{
size_t
index
=
internal_HistogramStorageIndex
(
aHistogramId
aProcessId
)
;
return
gHistogramStorage
[
index
]
;
}
void
internal_SetHistogramInStorage
(
HistogramID
aHistogramId
ProcessID
aProcessId
Histogram
*
aHistogram
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Histograms
are
stored
only
in
the
parent
process
.
"
)
;
size_t
index
=
internal_HistogramStorageIndex
(
aHistogramId
aProcessId
)
;
MOZ_ASSERT
(
!
gHistogramStorage
[
index
]
"
Mustn
'
t
overwrite
storage
without
clearing
it
first
.
"
)
;
gHistogramStorage
[
index
]
=
aHistogram
;
}
KeyedHistogram
*
internal_GetKeyedHistogramFromStorage
(
HistogramID
aHistogramId
ProcessID
aProcessId
)
{
size_t
index
=
internal_KeyedHistogramStorageIndex
(
aHistogramId
aProcessId
)
;
return
gKeyedHistogramStorage
[
index
]
;
}
void
internal_SetKeyedHistogramInStorage
(
HistogramID
aHistogramId
ProcessID
aProcessId
KeyedHistogram
*
aKeyedHistogram
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Keyed
Histograms
are
stored
only
in
the
parent
process
.
"
)
;
size_t
index
=
internal_KeyedHistogramStorageIndex
(
aHistogramId
aProcessId
)
;
MOZ_ASSERT
(
!
gKeyedHistogramStorage
[
index
]
"
Mustn
'
t
overwrite
storage
without
clearing
it
first
"
)
;
gKeyedHistogramStorage
[
index
]
=
aKeyedHistogram
;
}
Histogram
*
internal_CreateHistogramInstance
(
const
HistogramInfo
&
info
int
bucketsOffset
)
;
bool
internal_IsHistogramEnumId
(
HistogramID
aID
)
{
static_assert
(
(
(
HistogramID
)
-
1
>
0
)
"
ID
should
be
unsigned
.
"
)
;
return
aID
<
HistogramCount
;
}
Histogram
*
internal_GetHistogramById
(
HistogramID
histogramId
ProcessID
processId
bool
instantiate
=
true
)
{
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
histogramId
)
)
;
MOZ_ASSERT
(
!
gHistogramInfos
[
histogramId
]
.
keyed
)
;
MOZ_ASSERT
(
processId
<
ProcessID
:
:
Count
)
;
Histogram
*
h
=
internal_GetHistogramFromStorage
(
histogramId
processId
)
;
if
(
h
|
|
!
instantiate
)
{
return
h
;
}
const
HistogramInfo
&
info
=
gHistogramInfos
[
histogramId
]
;
const
int
bucketsOffset
=
gHistogramBucketLowerBoundIndex
[
histogramId
]
;
h
=
internal_CreateHistogramInstance
(
info
bucketsOffset
)
;
MOZ_ASSERT
(
h
)
;
internal_SetHistogramInStorage
(
histogramId
processId
h
)
;
return
h
;
}
KeyedHistogram
*
internal_GetKeyedHistogramById
(
HistogramID
histogramId
ProcessID
processId
bool
instantiate
=
true
)
{
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
histogramId
)
)
;
MOZ_ASSERT
(
gHistogramInfos
[
histogramId
]
.
keyed
)
;
MOZ_ASSERT
(
processId
<
ProcessID
:
:
Count
)
;
KeyedHistogram
*
kh
=
internal_GetKeyedHistogramFromStorage
(
histogramId
processId
)
;
if
(
kh
|
|
!
instantiate
)
{
return
kh
;
}
const
HistogramInfo
&
info
=
gHistogramInfos
[
histogramId
]
;
kh
=
new
KeyedHistogram
(
histogramId
info
)
;
internal_SetKeyedHistogramInStorage
(
histogramId
processId
kh
)
;
return
kh
;
}
nsresult
internal_GetHistogramIdByName
(
const
nsACString
&
name
HistogramID
*
id
)
{
const
bool
found
=
gNameToHistogramIDMap
.
Get
(
name
id
)
;
if
(
!
found
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
return
NS_OK
;
}
void
internal_ClearHistogramById
(
HistogramID
histogramId
ProcessID
processId
)
{
size_t
index
=
internal_HistogramStorageIndex
(
histogramId
processId
)
;
if
(
gHistogramStorage
[
index
]
=
=
gExpiredHistogram
)
{
return
;
}
delete
gHistogramStorage
[
index
]
;
gHistogramStorage
[
index
]
=
nullptr
;
}
}
namespace
{
bool
internal_CanRecordBase
(
)
{
return
gCanRecordBase
;
}
bool
internal_CanRecordExtended
(
)
{
return
gCanRecordExtended
;
}
bool
internal_IsEmpty
(
const
Histogram
*
h
)
{
return
h
-
>
is_empty
(
)
;
}
bool
internal_IsExpired
(
Histogram
*
h
)
{
return
h
=
=
gExpiredHistogram
;
}
void
internal_SetHistogramRecordingEnabled
(
HistogramID
id
bool
aEnabled
)
{
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
gHistogramRecordingDisabled
[
id
]
=
!
aEnabled
;
}
bool
internal_IsRecordingEnabled
(
HistogramID
id
)
{
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
return
!
gHistogramRecordingDisabled
[
id
]
;
}
const
char
*
HistogramInfo
:
:
name
(
)
const
{
return
&
gHistogramStringTable
[
this
-
>
name_offset
]
;
}
const
char
*
HistogramInfo
:
:
expiration
(
)
const
{
return
&
gHistogramStringTable
[
this
-
>
expiration_offset
]
;
}
nsresult
HistogramInfo
:
:
label_id
(
const
char
*
label
uint32_t
*
labelId
)
const
{
MOZ_ASSERT
(
label
)
;
MOZ_ASSERT
(
this
-
>
histogramType
=
=
nsITelemetry
:
:
HISTOGRAM_CATEGORICAL
)
;
if
(
this
-
>
histogramType
!
=
nsITelemetry
:
:
HISTOGRAM_CATEGORICAL
)
{
return
NS_ERROR_FAILURE
;
}
for
(
uint32_t
i
=
0
;
i
<
this
-
>
label_count
;
+
+
i
)
{
uint32_t
string_offset
=
gHistogramLabelTable
[
this
-
>
label_index
+
i
]
;
const
char
*
const
str
=
&
gHistogramStringTable
[
string_offset
]
;
if
(
:
:
strcmp
(
label
str
)
=
=
0
)
{
*
labelId
=
i
;
return
NS_OK
;
}
}
return
NS_ERROR_FAILURE
;
}
bool
HistogramInfo
:
:
allows_key
(
const
nsACString
&
key
)
const
{
MOZ_ASSERT
(
this
-
>
keyed
)
;
if
(
this
-
>
key_count
=
=
0
)
{
return
true
;
}
for
(
uint32_t
i
=
0
;
i
<
this
-
>
key_count
;
+
+
i
)
{
uint32_t
string_offset
=
gHistogramKeyTable
[
this
-
>
key_index
+
i
]
;
const
char
*
const
str
=
&
gHistogramStringTable
[
string_offset
]
;
if
(
key
.
EqualsASCII
(
str
)
)
{
return
true
;
}
}
return
false
;
}
}
namespace
{
nsresult
internal_CheckHistogramArguments
(
const
HistogramInfo
&
info
)
{
if
(
info
.
histogramType
!
=
nsITelemetry
:
:
HISTOGRAM_BOOLEAN
&
&
info
.
histogramType
!
=
nsITelemetry
:
:
HISTOGRAM_FLAG
&
&
info
.
histogramType
!
=
nsITelemetry
:
:
HISTOGRAM_COUNT
)
{
if
(
info
.
min
>
=
info
.
max
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
if
(
info
.
bucketCount
<
=
2
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
if
(
info
.
min
<
1
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
}
return
NS_OK
;
}
Histogram
*
internal_CreateHistogramInstance
(
const
HistogramInfo
&
passedInfo
int
bucketsOffset
)
{
if
(
NS_FAILED
(
internal_CheckHistogramArguments
(
passedInfo
)
)
)
{
MOZ_ASSERT
(
false
"
Failed
histogram
argument
checks
.
"
)
;
return
nullptr
;
}
const
bool
isExpired
=
IsExpiredVersion
(
passedInfo
.
expiration
(
)
)
;
HistogramInfo
info
=
passedInfo
;
const
int
*
buckets
=
&
gHistogramBucketLowerBounds
[
bucketsOffset
]
;
if
(
isExpired
)
{
if
(
gExpiredHistogram
)
{
return
gExpiredHistogram
;
}
buckets
=
gHistogramBucketLowerBounds
;
info
.
min
=
1
;
info
.
max
=
2
;
info
.
bucketCount
=
3
;
info
.
histogramType
=
nsITelemetry
:
:
HISTOGRAM_LINEAR
;
}
Histogram
:
:
Flags
flags
=
Histogram
:
:
kNoFlags
;
Histogram
*
h
=
nullptr
;
switch
(
info
.
histogramType
)
{
case
nsITelemetry
:
:
HISTOGRAM_EXPONENTIAL
:
h
=
Histogram
:
:
FactoryGet
(
info
.
min
info
.
max
info
.
bucketCount
flags
buckets
)
;
break
;
case
nsITelemetry
:
:
HISTOGRAM_LINEAR
:
case
nsITelemetry
:
:
HISTOGRAM_CATEGORICAL
:
h
=
LinearHistogram
:
:
FactoryGet
(
info
.
min
info
.
max
info
.
bucketCount
flags
buckets
)
;
break
;
case
nsITelemetry
:
:
HISTOGRAM_BOOLEAN
:
h
=
BooleanHistogram
:
:
FactoryGet
(
flags
buckets
)
;
break
;
case
nsITelemetry
:
:
HISTOGRAM_FLAG
:
h
=
FlagHistogram
:
:
FactoryGet
(
flags
buckets
)
;
break
;
case
nsITelemetry
:
:
HISTOGRAM_COUNT
:
h
=
CountHistogram
:
:
FactoryGet
(
flags
buckets
)
;
break
;
default
:
MOZ_ASSERT
(
false
"
Invalid
histogram
type
"
)
;
return
nullptr
;
}
if
(
isExpired
)
{
gExpiredHistogram
=
h
;
}
return
h
;
}
nsresult
internal_HistogramAdd
(
Histogram
&
histogram
const
HistogramID
id
uint32_t
value
ProcessID
aProcessType
)
{
bool
canRecordDataset
=
CanRecordDataset
(
gHistogramInfos
[
id
]
.
dataset
internal_CanRecordBase
(
)
internal_CanRecordExtended
(
)
)
;
if
(
!
canRecordDataset
|
|
(
aProcessType
=
=
ProcessID
:
:
Parent
&
&
!
internal_IsRecordingEnabled
(
id
)
)
)
{
return
NS_OK
;
}
if
(
!
CanRecordProduct
(
gHistogramInfos
[
id
]
.
products
)
)
{
return
NS_OK
;
}
if
(
value
>
INT_MAX
)
{
TelemetryScalar
:
:
Add
(
mozilla
:
:
Telemetry
:
:
ScalarID
:
:
TELEMETRY_ACCUMULATE_CLAMPED_VALUES
NS_ConvertASCIItoUTF16
(
gHistogramInfos
[
id
]
.
name
(
)
)
1
)
;
value
=
INT_MAX
;
}
histogram
.
Add
(
value
)
;
return
NS_OK
;
}
}
namespace
{
nsresult
internal_GetHistogramAndSamples
(
const
StaticMutexAutoLock
&
aLock
const
Histogram
*
h
HistogramSnapshotData
&
aSnapshot
)
{
MOZ_ASSERT
(
h
)
;
const
size_t
bucketCount
=
h
-
>
bucket_count
(
)
;
for
(
size_t
i
=
0
;
i
<
bucketCount
;
i
+
+
)
{
if
(
!
aSnapshot
.
mBucketRanges
.
AppendElement
(
h
-
>
ranges
(
i
)
)
)
{
return
NS_ERROR_FAILURE
;
}
}
Histogram
:
:
SampleSet
ss
;
h
-
>
SnapshotSample
(
&
ss
)
;
for
(
size_t
i
=
0
;
i
<
bucketCount
;
i
+
+
)
{
if
(
!
aSnapshot
.
mBucketCounts
.
AppendElement
(
ss
.
counts
(
i
)
)
)
{
return
NS_ERROR_FAILURE
;
}
}
aSnapshot
.
mSampleSum
=
ss
.
sum
(
)
;
return
NS_OK
;
}
nsresult
internal_ReflectHistogramAndSamples
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
HistogramInfo
&
aHistogramInfo
const
HistogramSnapshotData
&
aSnapshot
)
{
if
(
!
(
JS_DefineProperty
(
cx
obj
"
min
"
aHistogramInfo
.
min
JSPROP_ENUMERATE
)
&
&
JS_DefineProperty
(
cx
obj
"
max
"
aHistogramInfo
.
max
JSPROP_ENUMERATE
)
&
&
JS_DefineProperty
(
cx
obj
"
histogram_type
"
aHistogramInfo
.
histogramType
JSPROP_ENUMERATE
)
&
&
JS_DefineProperty
(
cx
obj
"
sum
"
double
(
aSnapshot
.
mSampleSum
)
JSPROP_ENUMERATE
)
)
)
{
return
NS_ERROR_FAILURE
;
}
const
size_t
count
=
aSnapshot
.
mBucketCounts
.
Length
(
)
;
MOZ_ASSERT
(
count
=
=
aSnapshot
.
mBucketRanges
.
Length
(
)
"
The
number
of
buckets
and
the
number
of
counts
must
match
.
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
rarray
(
cx
JS_NewArrayObject
(
cx
count
)
)
;
if
(
!
rarray
|
|
!
JS_DefineProperty
(
cx
obj
"
ranges
"
rarray
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
for
(
size_t
i
=
0
;
i
<
count
;
i
+
+
)
{
if
(
!
JS_DefineElement
(
cx
rarray
i
aSnapshot
.
mBucketRanges
[
i
]
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
}
JS
:
:
Rooted
<
JSObject
*
>
counts_array
(
cx
JS_NewArrayObject
(
cx
count
)
)
;
if
(
!
counts_array
|
|
!
JS_DefineProperty
(
cx
obj
"
counts
"
counts_array
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
for
(
size_t
i
=
0
;
i
<
count
;
i
+
+
)
{
if
(
!
JS_DefineElement
(
cx
counts_array
i
aSnapshot
.
mBucketCounts
[
i
]
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
}
return
NS_OK
;
}
bool
internal_ShouldReflectHistogram
(
Histogram
*
h
HistogramID
id
)
{
uint32_t
type
=
gHistogramInfos
[
id
]
.
histogramType
;
if
(
internal_IsEmpty
(
h
)
&
&
type
!
=
nsITelemetry
:
:
HISTOGRAM_FLAG
)
{
return
false
;
}
return
true
;
}
nsresult
internal_GetHistogramsSnapshot
(
const
StaticMutexAutoLock
&
aLock
unsigned
int
aDataset
bool
aClearSubsession
bool
aIncludeGPU
HistogramProcessSnapshotsArray
&
aOutSnapshot
)
{
if
(
!
aOutSnapshot
.
resize
(
static_cast
<
uint32_t
>
(
ProcessID
:
:
Count
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
for
(
uint32_t
process
=
0
;
process
<
static_cast
<
uint32_t
>
(
ProcessID
:
:
Count
)
;
+
+
process
)
{
HistogramSnapshotsArray
&
hArray
=
aOutSnapshot
[
process
]
;
for
(
size_t
i
=
0
;
i
<
HistogramCount
;
+
+
i
)
{
const
HistogramInfo
&
info
=
gHistogramInfos
[
i
]
;
if
(
info
.
keyed
)
{
continue
;
}
HistogramID
id
=
HistogramID
(
i
)
;
if
(
!
CanRecordInProcess
(
info
.
record_in_processes
ProcessID
(
process
)
)
|
|
(
(
ProcessID
(
process
)
=
=
ProcessID
:
:
Gpu
)
&
&
!
aIncludeGPU
)
)
{
continue
;
}
if
(
!
IsInDataset
(
info
.
dataset
aDataset
)
)
{
continue
;
}
bool
shouldInstantiate
=
info
.
histogramType
=
=
nsITelemetry
:
:
HISTOGRAM_FLAG
;
Histogram
*
h
=
internal_GetHistogramById
(
id
ProcessID
(
process
)
shouldInstantiate
)
;
if
(
!
h
|
|
internal_IsExpired
(
h
)
|
|
!
internal_ShouldReflectHistogram
(
h
id
)
)
{
continue
;
}
HistogramSnapshotData
snapshotData
;
if
(
NS_FAILED
(
internal_GetHistogramAndSamples
(
aLock
h
snapshotData
)
)
)
{
continue
;
}
if
(
!
hArray
.
emplaceBack
(
HistogramSnapshotInfo
{
snapshotData
id
}
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
if
(
aClearSubsession
)
{
h
-
>
Clear
(
)
;
}
}
}
return
NS_OK
;
}
}
namespace
{
nsresult
internal_ReflectKeyedHistogram
(
const
KeyedHistogramSnapshotData
&
aSnapshot
const
HistogramInfo
&
info
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
)
{
for
(
auto
iter
=
aSnapshot
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
HistogramSnapshotData
&
keyData
=
iter
.
Data
(
)
;
JS
:
:
RootedObject
histogramSnapshot
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
if
(
!
histogramSnapshot
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_FAILED
(
internal_ReflectHistogramAndSamples
(
aCx
histogramSnapshot
info
keyData
)
)
)
{
return
NS_ERROR_FAILURE
;
}
const
NS_ConvertUTF8toUTF16
key
(
iter
.
Key
(
)
)
;
if
(
!
JS_DefineUCProperty
(
aCx
aObj
key
.
Data
(
)
key
.
Length
(
)
histogramSnapshot
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
}
return
NS_OK
;
}
KeyedHistogram
:
:
KeyedHistogram
(
HistogramID
id
const
HistogramInfo
&
info
)
:
mHistogramMap
(
)
mId
(
id
)
mHistogramInfo
(
info
)
{
}
KeyedHistogram
:
:
~
KeyedHistogram
(
)
{
for
(
auto
iter
=
mHistogramMap
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Histogram
*
h
=
iter
.
Get
(
)
-
>
mData
;
if
(
h
=
=
gExpiredHistogram
)
{
continue
;
}
delete
h
;
}
mHistogramMap
.
Clear
(
)
;
}
nsresult
KeyedHistogram
:
:
GetHistogram
(
const
nsCString
&
key
Histogram
*
*
histogram
)
{
KeyedHistogramEntry
*
entry
=
mHistogramMap
.
GetEntry
(
key
)
;
if
(
entry
)
{
*
histogram
=
entry
-
>
mData
;
return
NS_OK
;
}
int
bucketsOffset
=
gHistogramBucketLowerBoundIndex
[
mId
]
;
Histogram
*
h
=
internal_CreateHistogramInstance
(
mHistogramInfo
bucketsOffset
)
;
if
(
!
h
)
{
return
NS_ERROR_FAILURE
;
}
h
-
>
ClearFlags
(
Histogram
:
:
kUmaTargetedHistogramFlag
)
;
*
histogram
=
h
;
entry
=
mHistogramMap
.
PutEntry
(
key
)
;
if
(
MOZ_UNLIKELY
(
!
entry
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
entry
-
>
mData
=
h
;
return
NS_OK
;
}
Histogram
*
KeyedHistogram
:
:
GetHistogram
(
const
nsCString
&
key
)
{
Histogram
*
h
=
nullptr
;
if
(
NS_FAILED
(
GetHistogram
(
key
&
h
)
)
)
{
return
nullptr
;
}
return
h
;
}
nsresult
KeyedHistogram
:
:
Add
(
const
nsCString
&
key
uint32_t
sample
ProcessID
aProcessType
)
{
bool
canRecordDataset
=
CanRecordDataset
(
mHistogramInfo
.
dataset
internal_CanRecordBase
(
)
internal_CanRecordExtended
(
)
)
;
if
(
!
canRecordDataset
|
|
(
aProcessType
=
=
ProcessID
:
:
Parent
&
&
!
internal_IsRecordingEnabled
(
mId
)
)
)
{
return
NS_OK
;
}
if
(
!
CanRecordProduct
(
gHistogramInfos
[
mId
]
.
products
)
)
{
return
NS_OK
;
}
Histogram
*
histogram
=
GetHistogram
(
key
)
;
MOZ_ASSERT
(
histogram
)
;
if
(
!
histogram
)
{
return
NS_ERROR_FAILURE
;
}
if
(
sample
>
INT_MAX
)
{
TelemetryScalar
:
:
Add
(
mozilla
:
:
Telemetry
:
:
ScalarID
:
:
TELEMETRY_ACCUMULATE_CLAMPED_VALUES
NS_ConvertASCIItoUTF16
(
mHistogramInfo
.
name
(
)
)
1
)
;
sample
=
INT_MAX
;
}
histogram
-
>
Add
(
sample
)
;
return
NS_OK
;
}
void
KeyedHistogram
:
:
Clear
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
for
(
auto
iter
=
mHistogramMap
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Histogram
*
h
=
iter
.
Get
(
)
-
>
mData
;
if
(
h
=
=
gExpiredHistogram
)
{
continue
;
}
delete
h
;
}
mHistogramMap
.
Clear
(
)
;
}
nsresult
KeyedHistogram
:
:
GetJSKeys
(
JSContext
*
cx
JS
:
:
CallArgs
&
args
)
{
JS
:
:
AutoValueVector
keys
(
cx
)
;
if
(
!
keys
.
reserve
(
mHistogramMap
.
Count
(
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
for
(
auto
iter
=
mHistogramMap
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
JS
:
:
RootedValue
jsKey
(
cx
)
;
jsKey
.
setString
(
ToJSString
(
cx
iter
.
Get
(
)
-
>
GetKey
(
)
)
)
;
if
(
!
keys
.
append
(
jsKey
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
JS
:
:
RootedObject
jsKeys
(
cx
JS_NewArrayObject
(
cx
keys
)
)
;
if
(
!
jsKeys
)
{
return
NS_ERROR_FAILURE
;
}
args
.
rval
(
)
.
setObject
(
*
jsKeys
)
;
return
NS_OK
;
}
nsresult
KeyedHistogram
:
:
GetJSSnapshot
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
bool
clearSubsession
)
{
KeyedHistogramSnapshotData
dataSnapshot
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
mId
)
)
;
if
(
NS_FAILED
(
GetSnapshot
(
locker
dataSnapshot
clearSubsession
)
)
)
{
return
NS_ERROR_FAILURE
;
}
}
return
internal_ReflectKeyedHistogram
(
dataSnapshot
gHistogramInfos
[
mId
]
cx
obj
)
;
}
nsresult
KeyedHistogram
:
:
GetSnapshot
(
const
StaticMutexAutoLock
&
aLock
KeyedHistogramSnapshotData
&
aSnapshot
bool
aClearSubsession
)
{
for
(
auto
iter
=
mHistogramMap
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Histogram
*
keyData
=
iter
.
Get
(
)
-
>
mData
;
if
(
!
keyData
)
{
return
NS_ERROR_FAILURE
;
}
HistogramSnapshotData
keySnapshot
;
if
(
NS_FAILED
(
internal_GetHistogramAndSamples
(
aLock
keyData
keySnapshot
)
)
)
{
return
NS_ERROR_FAILURE
;
}
aSnapshot
.
Put
(
iter
.
Get
(
)
-
>
GetKey
(
)
mozilla
:
:
Move
(
keySnapshot
)
)
;
}
if
(
aClearSubsession
)
{
Clear
(
)
;
}
return
NS_OK
;
}
nsresult
internal_GetKeyedHistogramsSnapshot
(
const
StaticMutexAutoLock
&
aLock
unsigned
int
aDataset
bool
aClearSubsession
bool
aIncludeGPU
KeyedHistogramProcessSnapshotsArray
&
aOutSnapshot
)
{
if
(
!
aOutSnapshot
.
resize
(
static_cast
<
uint32_t
>
(
ProcessID
:
:
Count
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
for
(
uint32_t
process
=
0
;
process
<
static_cast
<
uint32_t
>
(
ProcessID
:
:
Count
)
;
+
+
process
)
{
KeyedHistogramSnapshotsArray
&
hArray
=
aOutSnapshot
[
process
]
;
for
(
size_t
i
=
0
;
i
<
HistogramCount
;
+
+
i
)
{
HistogramID
id
=
HistogramID
(
i
)
;
const
HistogramInfo
&
info
=
gHistogramInfos
[
id
]
;
if
(
!
info
.
keyed
)
{
continue
;
}
if
(
!
CanRecordInProcess
(
info
.
record_in_processes
ProcessID
(
process
)
)
|
|
(
(
ProcessID
(
process
)
=
=
ProcessID
:
:
Gpu
)
&
&
!
aIncludeGPU
)
)
{
continue
;
}
if
(
!
IsInDataset
(
info
.
dataset
aDataset
)
)
{
continue
;
}
KeyedHistogram
*
keyed
=
internal_GetKeyedHistogramById
(
id
ProcessID
(
process
)
false
)
;
if
(
!
keyed
)
{
continue
;
}
KeyedHistogramSnapshotData
snapshot
;
if
(
!
NS_SUCCEEDED
(
keyed
-
>
GetSnapshot
(
aLock
snapshot
aClearSubsession
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
hArray
.
emplaceBack
(
KeyedHistogramSnapshotInfo
{
mozilla
:
:
Move
(
snapshot
)
id
}
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
}
return
NS_OK
;
}
}
namespace
{
bool
internal_RemoteAccumulate
(
HistogramID
aId
uint32_t
aSample
)
{
if
(
XRE_IsParentProcess
(
)
)
{
return
false
;
}
if
(
!
internal_IsRecordingEnabled
(
aId
)
)
{
return
true
;
}
TelemetryIPCAccumulator
:
:
AccumulateChildHistogram
(
aId
aSample
)
;
return
true
;
}
bool
internal_RemoteAccumulate
(
HistogramID
aId
const
nsCString
&
aKey
uint32_t
aSample
)
{
if
(
XRE_IsParentProcess
(
)
)
{
return
false
;
}
if
(
!
internal_IsRecordingEnabled
(
aId
)
)
{
return
true
;
}
TelemetryIPCAccumulator
:
:
AccumulateChildKeyedHistogram
(
aId
aKey
aSample
)
;
return
true
;
}
void
internal_Accumulate
(
HistogramID
aId
uint32_t
aSample
)
{
if
(
!
internal_CanRecordBase
(
)
|
|
internal_RemoteAccumulate
(
aId
aSample
)
)
{
return
;
}
Histogram
*
h
=
internal_GetHistogramById
(
aId
ProcessID
:
:
Parent
)
;
MOZ_ASSERT
(
h
)
;
internal_HistogramAdd
(
*
h
aId
aSample
ProcessID
:
:
Parent
)
;
}
void
internal_Accumulate
(
HistogramID
aId
const
nsCString
&
aKey
uint32_t
aSample
)
{
if
(
!
gInitDone
|
|
!
internal_CanRecordBase
(
)
|
|
internal_RemoteAccumulate
(
aId
aKey
aSample
)
)
{
return
;
}
KeyedHistogram
*
keyed
=
internal_GetKeyedHistogramById
(
aId
ProcessID
:
:
Parent
)
;
MOZ_ASSERT
(
keyed
)
;
keyed
-
>
Add
(
aKey
aSample
ProcessID
:
:
Parent
)
;
}
void
internal_AccumulateChild
(
ProcessID
aProcessType
HistogramID
aId
uint32_t
aSample
)
{
if
(
!
internal_CanRecordBase
(
)
)
{
return
;
}
if
(
Histogram
*
h
=
internal_GetHistogramById
(
aId
aProcessType
)
)
{
internal_HistogramAdd
(
*
h
aId
aSample
aProcessType
)
;
}
else
{
NS_WARNING
(
"
Failed
GetHistogramById
for
CHILD
"
)
;
}
}
void
internal_AccumulateChildKeyed
(
ProcessID
aProcessType
HistogramID
aId
const
nsCString
&
aKey
uint32_t
aSample
)
{
if
(
!
gInitDone
|
|
!
internal_CanRecordBase
(
)
)
{
return
;
}
KeyedHistogram
*
keyed
=
internal_GetKeyedHistogramById
(
aId
aProcessType
)
;
MOZ_ASSERT
(
keyed
)
;
keyed
-
>
Add
(
aKey
aSample
aProcessType
)
;
}
void
internal_ClearHistogram
(
HistogramID
id
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
if
(
gHistogramInfos
[
id
]
.
keyed
)
{
for
(
uint32_t
process
=
0
;
process
<
static_cast
<
uint32_t
>
(
ProcessID
:
:
Count
)
;
+
+
process
)
{
KeyedHistogram
*
kh
=
internal_GetKeyedHistogramById
(
id
static_cast
<
ProcessID
>
(
process
)
false
)
;
if
(
kh
)
{
kh
-
>
Clear
(
)
;
}
}
}
for
(
uint32_t
process
=
0
;
process
<
static_cast
<
uint32_t
>
(
ProcessID
:
:
Count
)
;
+
+
process
)
{
internal_ClearHistogramById
(
id
static_cast
<
ProcessID
>
(
process
)
)
;
}
}
}
namespace
{
void
internal_JSHistogram_finalize
(
JSFreeOp
*
JSObject
*
)
;
static
const
JSClassOps
sJSHistogramClassOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
internal_JSHistogram_finalize
}
;
static
const
JSClass
sJSHistogramClass
=
{
"
JSHistogram
"
JSCLASS_HAS_PRIVATE
|
JSCLASS_FOREGROUND_FINALIZE
&
sJSHistogramClassOps
}
;
struct
JSHistogramData
{
HistogramID
histogramId
;
}
;
bool
internal_JSHistogram_CoerceValue
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aElement
HistogramID
aId
uint32_t
aHistogramType
uint32_t
&
aValue
)
{
if
(
aElement
.
isString
(
)
)
{
if
(
aHistogramType
!
=
nsITelemetry
:
:
HISTOGRAM_CATEGORICAL
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
String
argument
only
allowed
for
categorical
histogram
"
)
)
;
return
false
;
}
nsAutoJSString
label
;
if
(
!
label
.
init
(
aCx
aElement
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Invalid
string
parameter
"
)
)
;
return
false
;
}
nsresult
rv
=
gHistogramInfos
[
aId
]
.
label_id
(
NS_ConvertUTF16toUTF8
(
label
)
.
get
(
)
&
aValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Invalid
string
label
"
)
)
;
return
false
;
}
}
else
if
(
!
(
aElement
.
isNumber
(
)
|
|
aElement
.
isBoolean
(
)
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Argument
not
a
number
"
)
)
;
return
false
;
}
else
if
(
aElement
.
isNumber
(
)
&
&
aElement
.
toNumber
(
)
>
UINT32_MAX
)
{
aValue
=
UINT32_MAX
;
#
ifdef
DEBUG
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Clamped
large
numeric
value
"
)
)
;
#
endif
}
else
if
(
!
JS
:
:
ToUint32
(
aCx
aElement
&
aValue
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Failed
to
convert
element
to
UInt32
"
)
)
;
return
false
;
}
return
true
;
}
bool
internal_JSHistogram_GetValueArray
(
JSContext
*
aCx
JS
:
:
CallArgs
&
args
uint32_t
aHistogramType
HistogramID
aId
bool
isKeyed
nsTArray
<
uint32_t
>
&
aArray
)
{
uint32_t
firstArgIndex
=
0
;
if
(
isKeyed
)
{
firstArgIndex
=
1
;
}
if
(
args
.
length
(
)
=
=
firstArgIndex
)
{
if
(
!
(
aHistogramType
=
=
nsITelemetry
:
:
HISTOGRAM_COUNT
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Need
at
least
one
argument
for
non
count
type
histogram
"
)
)
;
return
false
;
}
aArray
.
AppendElement
(
1
)
;
return
true
;
}
if
(
args
[
firstArgIndex
]
.
isObject
(
)
&
&
!
args
[
firstArgIndex
]
.
isString
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
arrayObj
(
aCx
&
args
[
firstArgIndex
]
.
toObject
(
)
)
;
bool
isArray
=
false
;
JS_IsArrayObject
(
aCx
arrayObj
&
isArray
)
;
if
(
!
isArray
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
The
argument
to
accumulate
can
'
t
be
a
non
-
array
object
"
)
)
;
return
false
;
}
uint32_t
arrayLength
=
0
;
if
(
!
JS_GetArrayLength
(
aCx
arrayObj
&
arrayLength
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Failed
while
trying
to
get
array
length
"
)
)
;
return
false
;
}
for
(
uint32_t
arrayIdx
=
0
;
arrayIdx
<
arrayLength
;
arrayIdx
+
+
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
element
(
aCx
)
;
if
(
!
JS_GetElement
(
aCx
arrayObj
arrayIdx
&
element
)
)
{
nsPrintfCString
msg
(
"
Failed
while
trying
to
get
element
at
index
%
d
"
arrayIdx
)
;
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_ConvertUTF8toUTF16
(
msg
)
)
;
return
false
;
}
uint32_t
value
=
0
;
if
(
!
internal_JSHistogram_CoerceValue
(
aCx
element
aId
aHistogramType
value
)
)
{
nsPrintfCString
msg
(
"
Element
at
index
%
d
failed
type
checks
"
arrayIdx
)
;
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_ConvertUTF8toUTF16
(
msg
)
)
;
return
false
;
}
aArray
.
AppendElement
(
value
)
;
}
return
true
;
}
uint32_t
value
=
0
;
if
(
!
internal_JSHistogram_CoerceValue
(
aCx
args
[
firstArgIndex
]
aId
aHistogramType
value
)
)
{
return
false
;
}
aArray
.
AppendElement
(
value
)
;
return
true
;
}
bool
internal_JSHistogram_Add
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
|
|
JS_GetClass
(
&
args
.
thisv
(
)
.
toObject
(
)
)
!
=
&
sJSHistogramClass
)
{
JS_ReportErrorASCII
(
cx
"
Wrong
JS
class
expected
JSHistogram
class
"
)
;
return
false
;
}
JSObject
*
obj
=
&
args
.
thisv
(
)
.
toObject
(
)
;
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
HistogramID
id
=
data
-
>
histogramId
;
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
uint32_t
type
=
gHistogramInfos
[
id
]
.
histogramType
;
args
.
rval
(
)
.
setUndefined
(
)
;
nsTArray
<
uint32_t
>
values
;
if
(
!
internal_JSHistogram_GetValueArray
(
cx
args
type
id
false
values
)
)
{
return
true
;
}
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
for
(
uint32_t
aValue
:
values
)
{
internal_Accumulate
(
id
aValue
)
;
}
}
return
true
;
}
bool
internal_JSHistogram_Snapshot
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
|
|
JS_GetClass
(
&
args
.
thisv
(
)
.
toObject
(
)
)
!
=
&
sJSHistogramClass
)
{
JS_ReportErrorASCII
(
cx
"
Wrong
JS
class
expected
JSHistogram
class
"
)
;
return
false
;
}
JSObject
*
obj
=
&
args
.
thisv
(
)
.
toObject
(
)
;
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
HistogramID
id
=
data
-
>
histogramId
;
HistogramSnapshotData
dataSnapshot
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
Histogram
*
h
=
internal_GetHistogramById
(
id
ProcessID
:
:
Parent
)
;
if
(
NS_FAILED
(
internal_GetHistogramAndSamples
(
locker
h
dataSnapshot
)
)
)
{
return
false
;
}
}
JS
:
:
Rooted
<
JSObject
*
>
snapshot
(
cx
JS_NewPlainObject
(
cx
)
)
;
if
(
!
snapshot
)
{
return
false
;
}
if
(
NS_FAILED
(
internal_ReflectHistogramAndSamples
(
cx
snapshot
gHistogramInfos
[
id
]
dataSnapshot
)
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
snapshot
)
;
return
true
;
}
bool
internal_JSHistogram_Clear
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
|
|
JS_GetClass
(
&
args
.
thisv
(
)
.
toObject
(
)
)
!
=
&
sJSHistogramClass
)
{
JS_ReportErrorASCII
(
cx
"
Wrong
JS
class
expected
JSHistogram
class
"
)
;
return
false
;
}
JSObject
*
obj
=
&
args
.
thisv
(
)
.
toObject
(
)
;
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
args
.
rval
(
)
.
setUndefined
(
)
;
HistogramID
id
=
data
-
>
histogramId
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
internal_ClearHistogram
(
id
)
;
}
return
true
;
}
nsresult
internal_WrapAndReturnHistogram
(
HistogramID
id
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
ret
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
JS_NewObject
(
cx
&
sJSHistogramClass
)
)
;
if
(
!
obj
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
(
JS_DefineFunction
(
cx
obj
"
add
"
internal_JSHistogram_Add
1
0
)
&
&
JS_DefineFunction
(
cx
obj
"
snapshot
"
internal_JSHistogram_Snapshot
0
0
)
&
&
JS_DefineFunction
(
cx
obj
"
clear
"
internal_JSHistogram_Clear
0
0
)
)
)
{
return
NS_ERROR_FAILURE
;
}
JSHistogramData
*
data
=
new
JSHistogramData
{
id
}
;
JS_SetPrivate
(
obj
data
)
;
ret
.
setObject
(
*
obj
)
;
return
NS_OK
;
}
void
internal_JSHistogram_finalize
(
JSFreeOp
*
JSObject
*
obj
)
{
if
(
!
obj
|
|
JS_GetClass
(
obj
)
!
=
&
sJSHistogramClass
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
the
right
JS
class
.
"
)
;
return
;
}
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
delete
data
;
}
}
namespace
{
void
internal_JSKeyedHistogram_finalize
(
JSFreeOp
*
JSObject
*
)
;
static
const
JSClassOps
sJSKeyedHistogramClassOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
internal_JSKeyedHistogram_finalize
}
;
static
const
JSClass
sJSKeyedHistogramClass
=
{
"
JSKeyedHistogram
"
JSCLASS_HAS_PRIVATE
|
JSCLASS_FOREGROUND_FINALIZE
&
sJSKeyedHistogramClassOps
}
;
bool
internal_KeyedHistogram_SnapshotImpl
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
bool
clearSubsession
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
|
|
JS_GetClass
(
&
args
.
thisv
(
)
.
toObject
(
)
)
!
=
&
sJSKeyedHistogramClass
)
{
JS_ReportErrorASCII
(
cx
"
Wrong
JS
class
expected
JSKeyedHistogram
class
"
)
;
return
false
;
}
JSObject
*
obj
=
&
args
.
thisv
(
)
.
toObject
(
)
;
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
HistogramID
id
=
data
-
>
histogramId
;
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
args
.
rval
(
)
.
setUndefined
(
)
;
KeyedHistogram
*
keyed
=
internal_GetKeyedHistogramById
(
id
ProcessID
:
:
Parent
true
)
;
if
(
!
keyed
)
{
JS_ReportErrorASCII
(
cx
"
Failed
to
look
up
keyed
histogram
"
)
;
return
false
;
}
if
(
args
.
length
(
)
=
=
0
)
{
JS
:
:
RootedObject
snapshot
(
cx
JS_NewPlainObject
(
cx
)
)
;
if
(
!
snapshot
)
{
JS_ReportErrorASCII
(
cx
"
Failed
to
create
object
"
)
;
return
false
;
}
if
(
!
NS_SUCCEEDED
(
keyed
-
>
GetJSSnapshot
(
cx
snapshot
clearSubsession
)
)
)
{
JS_ReportErrorASCII
(
cx
"
Failed
to
reflect
keyed
histograms
"
)
;
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
snapshot
)
;
return
true
;
}
nsAutoJSString
key
;
if
(
!
args
[
0
]
.
isString
(
)
|
|
!
key
.
init
(
cx
args
[
0
]
)
)
{
JS_ReportErrorASCII
(
cx
"
Not
a
string
"
)
;
return
false
;
}
HistogramSnapshotData
dataSnapshot
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
Histogram
*
h
=
nullptr
;
nsresult
rv
=
keyed
-
>
GetHistogram
(
NS_ConvertUTF16toUTF8
(
key
)
&
h
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
if
(
NS_FAILED
(
internal_GetHistogramAndSamples
(
locker
h
dataSnapshot
)
)
)
{
return
false
;
}
}
JS
:
:
RootedObject
snapshot
(
cx
JS_NewPlainObject
(
cx
)
)
;
if
(
!
snapshot
)
{
return
false
;
}
if
(
NS_FAILED
(
internal_ReflectHistogramAndSamples
(
cx
snapshot
gHistogramInfos
[
id
]
dataSnapshot
)
)
)
{
JS_ReportErrorASCII
(
cx
"
Failed
to
reflect
histogram
"
)
;
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
snapshot
)
;
return
true
;
}
bool
internal_JSKeyedHistogram_Add
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
|
|
JS_GetClass
(
&
args
.
thisv
(
)
.
toObject
(
)
)
!
=
&
sJSKeyedHistogramClass
)
{
JS_ReportErrorASCII
(
cx
"
Wrong
JS
class
expected
JSKeyedHistogram
class
"
)
;
return
false
;
}
JSObject
*
obj
=
&
args
.
thisv
(
)
.
toObject
(
)
;
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
HistogramID
id
=
data
-
>
histogramId
;
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
args
.
rval
(
)
.
setUndefined
(
)
;
if
(
args
.
length
(
)
<
1
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Expected
one
argument
"
)
)
;
return
true
;
}
nsAutoJSString
key
;
if
(
!
args
[
0
]
.
isString
(
)
|
|
!
key
.
init
(
cx
args
[
0
]
)
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Not
a
string
"
)
)
;
return
true
;
}
if
(
!
gHistogramInfos
[
id
]
.
allows_key
(
NS_ConvertUTF16toUTF8
(
key
)
)
)
{
nsPrintfCString
msg
(
"
%
s
-
key
'
%
s
'
not
allowed
for
this
keyed
histogram
"
gHistogramInfos
[
id
]
.
name
(
)
NS_ConvertUTF16toUTF8
(
key
)
.
get
(
)
)
;
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_ConvertUTF8toUTF16
(
msg
)
)
;
TelemetryScalar
:
:
Add
(
mozilla
:
:
Telemetry
:
:
ScalarID
:
:
TELEMETRY_ACCUMULATE_UNKNOWN_HISTOGRAM_KEYS
NS_ConvertASCIItoUTF16
(
gHistogramInfos
[
id
]
.
name
(
)
)
1
)
;
return
true
;
}
const
uint32_t
type
=
gHistogramInfos
[
id
]
.
histogramType
;
nsTArray
<
uint32_t
>
values
;
if
(
!
internal_JSHistogram_GetValueArray
(
cx
args
type
id
true
values
)
)
{
return
true
;
}
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
for
(
uint32_t
aValue
:
values
)
{
internal_Accumulate
(
id
NS_ConvertUTF16toUTF8
(
key
)
aValue
)
;
}
}
return
true
;
}
bool
internal_JSKeyedHistogram_Keys
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
|
|
JS_GetClass
(
&
args
.
thisv
(
)
.
toObject
(
)
)
!
=
&
sJSKeyedHistogramClass
)
{
JS_ReportErrorASCII
(
cx
"
Wrong
JS
class
expected
JSKeyedHistogram
class
"
)
;
return
false
;
}
JSObject
*
obj
=
&
args
.
thisv
(
)
.
toObject
(
)
;
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
HistogramID
id
=
data
-
>
histogramId
;
KeyedHistogram
*
keyed
=
nullptr
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
keyed
=
internal_GetKeyedHistogramById
(
id
ProcessID
:
:
Parent
)
;
}
MOZ_ASSERT
(
keyed
)
;
if
(
!
keyed
)
{
return
false
;
}
return
NS_SUCCEEDED
(
keyed
-
>
GetJSKeys
(
cx
args
)
)
;
}
bool
internal_JSKeyedHistogram_Snapshot
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
return
internal_KeyedHistogram_SnapshotImpl
(
cx
argc
vp
false
)
;
}
bool
internal_JSKeyedHistogram_Clear
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
|
|
JS_GetClass
(
&
args
.
thisv
(
)
.
toObject
(
)
)
!
=
&
sJSKeyedHistogramClass
)
{
JS_ReportErrorASCII
(
cx
"
Wrong
JS
class
expected
JSKeyedHistogram
class
"
)
;
return
false
;
}
JSObject
*
obj
=
&
args
.
thisv
(
)
.
toObject
(
)
;
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
HistogramID
id
=
data
-
>
histogramId
;
args
.
rval
(
)
.
setUndefined
(
)
;
KeyedHistogram
*
keyed
=
nullptr
;
{
MOZ_ASSERT
(
internal_IsHistogramEnumId
(
id
)
)
;
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
keyed
=
internal_GetKeyedHistogramById
(
id
ProcessID
:
:
Parent
false
)
;
if
(
!
keyed
)
{
return
true
;
}
keyed
-
>
Clear
(
)
;
}
return
true
;
}
nsresult
internal_WrapAndReturnKeyedHistogram
(
HistogramID
id
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
ret
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
JS_NewObject
(
cx
&
sJSKeyedHistogramClass
)
)
;
if
(
!
obj
)
return
NS_ERROR_FAILURE
;
if
(
!
(
JS_DefineFunction
(
cx
obj
"
add
"
internal_JSKeyedHistogram_Add
2
0
)
&
&
JS_DefineFunction
(
cx
obj
"
snapshot
"
internal_JSKeyedHistogram_Snapshot
1
0
)
&
&
JS_DefineFunction
(
cx
obj
"
keys
"
internal_JSKeyedHistogram_Keys
0
0
)
&
&
JS_DefineFunction
(
cx
obj
"
clear
"
internal_JSKeyedHistogram_Clear
0
0
)
)
)
{
return
NS_ERROR_FAILURE
;
}
JSHistogramData
*
data
=
new
JSHistogramData
{
id
}
;
JS_SetPrivate
(
obj
data
)
;
ret
.
setObject
(
*
obj
)
;
return
NS_OK
;
}
void
internal_JSKeyedHistogram_finalize
(
JSFreeOp
*
JSObject
*
obj
)
{
if
(
!
obj
|
|
JS_GetClass
(
obj
)
!
=
&
sJSKeyedHistogramClass
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
the
right
JS
class
.
"
)
;
return
;
}
JSHistogramData
*
data
=
static_cast
<
JSHistogramData
*
>
(
JS_GetPrivate
(
obj
)
)
;
MOZ_ASSERT
(
data
)
;
delete
data
;
}
}
void
TelemetryHistogram
:
:
InitializeGlobalState
(
bool
canRecordBase
bool
canRecordExtended
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
MOZ_ASSERT
(
!
gInitDone
"
TelemetryHistogram
:
:
InitializeGlobalState
"
"
may
only
be
called
once
"
)
;
gCanRecordBase
=
canRecordBase
;
gCanRecordExtended
=
canRecordExtended
;
if
(
XRE_IsParentProcess
(
)
)
{
gHistogramStorage
=
new
Histogram
*
[
HistogramCount
*
size_t
(
ProcessID
:
:
Count
)
]
{
}
;
gKeyedHistogramStorage
=
new
KeyedHistogram
*
[
HistogramCount
*
size_t
(
ProcessID
:
:
Count
)
]
{
}
;
}
for
(
uint32_t
i
=
0
;
i
<
HistogramCount
;
i
+
+
)
{
auto
name
=
gHistogramInfos
[
i
]
.
name
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
name
>
=
gHistogramStringTable
)
;
MOZ_DIAGNOSTIC_ASSERT
(
uintptr_t
(
name
)
<
(
uintptr_t
(
gHistogramStringTable
)
+
sizeof
(
gHistogramStringTable
)
)
)
;
nsCString
wrappedName
;
wrappedName
.
AssignLiteral
(
name
strlen
(
name
)
)
;
gNameToHistogramIDMap
.
Put
(
wrappedName
HistogramID
(
i
)
)
;
}
#
ifdef
DEBUG
gNameToHistogramIDMap
.
MarkImmutable
(
)
;
#
endif
static_assert
(
(
JS
:
:
gcreason
:
:
NUM_TELEMETRY_REASONS
+
1
)
=
=
gHistogramInfos
[
mozilla
:
:
Telemetry
:
:
GC_MINOR_REASON
]
.
bucketCount
&
&
(
JS
:
:
gcreason
:
:
NUM_TELEMETRY_REASONS
+
1
)
=
=
gHistogramInfos
[
mozilla
:
:
Telemetry
:
:
GC_MINOR_REASON_LONG
]
.
bucketCount
&
&
(
JS
:
:
gcreason
:
:
NUM_TELEMETRY_REASONS
+
1
)
=
=
gHistogramInfos
[
mozilla
:
:
Telemetry
:
:
GC_REASON_2
]
.
bucketCount
"
NUM_TELEMETRY_REASONS
is
assumed
to
be
a
fixed
value
in
Histograms
.
json
.
"
"
If
this
was
an
intentional
change
update
the
n_values
for
the
"
"
following
in
Histograms
.
json
:
GC_MINOR_REASON
GC_MINOR_REASON_LONG
"
"
GC_REASON_2
"
)
;
static_assert
(
(
mozilla
:
:
StartupTimeline
:
:
MAX_EVENT_ID
+
1
)
=
=
gHistogramInfos
[
mozilla
:
:
Telemetry
:
:
STARTUP_MEASUREMENT_ERRORS
]
.
bucketCount
"
MAX_EVENT_ID
is
assumed
to
be
a
fixed
value
in
Histograms
.
json
.
If
this
"
"
was
an
intentional
change
update
the
n_values
for
the
following
in
"
"
Histograms
.
json
:
STARTUP_MEASUREMENT_ERRORS
"
)
;
gInitDone
=
true
;
}
void
TelemetryHistogram
:
:
DeInitializeGlobalState
(
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
gCanRecordBase
=
false
;
gCanRecordExtended
=
false
;
gNameToHistogramIDMap
.
Clear
(
)
;
gInitDone
=
false
;
if
(
XRE_IsParentProcess
(
)
)
{
for
(
size_t
i
=
0
;
i
<
HistogramCount
*
size_t
(
ProcessID
:
:
Count
)
;
+
+
i
)
{
if
(
i
<
HistogramCount
*
size_t
(
ProcessID
:
:
Count
)
)
{
delete
gKeyedHistogramStorage
[
i
]
;
}
if
(
gHistogramStorage
[
i
]
!
=
gExpiredHistogram
)
{
delete
gHistogramStorage
[
i
]
;
}
}
delete
[
]
gHistogramStorage
;
delete
[
]
gKeyedHistogramStorage
;
}
delete
gExpiredHistogram
;
gExpiredHistogram
=
nullptr
;
}
#
ifdef
DEBUG
bool
TelemetryHistogram
:
:
GlobalStateHasBeenInitialized
(
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
return
gInitDone
;
}
#
endif
bool
TelemetryHistogram
:
:
CanRecordBase
(
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
return
internal_CanRecordBase
(
)
;
}
void
TelemetryHistogram
:
:
SetCanRecordBase
(
bool
b
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
gCanRecordBase
=
b
;
}
bool
TelemetryHistogram
:
:
CanRecordExtended
(
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
return
internal_CanRecordExtended
(
)
;
}
void
TelemetryHistogram
:
:
SetCanRecordExtended
(
bool
b
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
gCanRecordExtended
=
b
;
}
void
TelemetryHistogram
:
:
InitHistogramRecordingEnabled
(
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
auto
processType
=
XRE_GetProcessType
(
)
;
for
(
size_t
i
=
0
;
i
<
HistogramCount
;
+
+
i
)
{
const
HistogramInfo
&
h
=
gHistogramInfos
[
i
]
;
mozilla
:
:
Telemetry
:
:
HistogramID
id
=
mozilla
:
:
Telemetry
:
:
HistogramID
(
i
)
;
bool
canRecordInProcess
=
CanRecordInProcess
(
h
.
record_in_processes
processType
)
;
bool
canRecordProduct
=
CanRecordProduct
(
h
.
products
)
;
internal_SetHistogramRecordingEnabled
(
id
canRecordInProcess
&
&
canRecordProduct
)
;
}
for
(
auto
recordingInitiallyDisabledID
:
kRecordingInitiallyDisabledIDs
)
{
internal_SetHistogramRecordingEnabled
(
recordingInitiallyDisabledID
false
)
;
}
}
void
TelemetryHistogram
:
:
SetHistogramRecordingEnabled
(
HistogramID
aID
bool
aEnabled
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aID
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
return
;
}
const
HistogramInfo
&
h
=
gHistogramInfos
[
aID
]
;
if
(
!
CanRecordInProcess
(
h
.
record_in_processes
XRE_GetProcessType
(
)
)
)
{
return
;
}
if
(
!
CanRecordProduct
(
h
.
products
)
)
{
return
;
}
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
internal_SetHistogramRecordingEnabled
(
aID
aEnabled
)
;
}
nsresult
TelemetryHistogram
:
:
SetHistogramRecordingEnabled
(
const
nsACString
&
name
bool
aEnabled
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
HistogramID
id
;
if
(
NS_FAILED
(
internal_GetHistogramIdByName
(
name
&
id
)
)
)
{
return
NS_ERROR_FAILURE
;
}
const
HistogramInfo
&
hi
=
gHistogramInfos
[
id
]
;
if
(
CanRecordInProcess
(
hi
.
record_in_processes
XRE_GetProcessType
(
)
)
)
{
internal_SetHistogramRecordingEnabled
(
id
aEnabled
)
;
}
return
NS_OK
;
}
void
TelemetryHistogram
:
:
Accumulate
(
HistogramID
aID
uint32_t
aSample
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aID
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
return
;
}
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
internal_Accumulate
(
aID
aSample
)
;
}
void
TelemetryHistogram
:
:
Accumulate
(
HistogramID
aID
const
nsTArray
<
uint32_t
>
&
aSamples
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aID
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
return
;
}
MOZ_ASSERT
(
!
gHistogramInfos
[
aID
]
.
keyed
"
Cannot
accumulate
into
a
keyed
histogram
.
No
key
given
.
"
)
;
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
for
(
uint32_t
sample
:
aSamples
)
{
internal_Accumulate
(
aID
sample
)
;
}
}
void
TelemetryHistogram
:
:
Accumulate
(
HistogramID
aID
const
nsCString
&
aKey
uint32_t
aSample
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aID
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
return
;
}
if
(
!
gHistogramInfos
[
aID
]
.
allows_key
(
aKey
)
)
{
nsPrintfCString
msg
(
"
%
s
-
key
'
%
s
'
not
allowed
for
this
keyed
histogram
"
gHistogramInfos
[
aID
]
.
name
(
)
aKey
.
get
(
)
)
;
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_ConvertUTF8toUTF16
(
msg
)
)
;
TelemetryScalar
:
:
Add
(
mozilla
:
:
Telemetry
:
:
ScalarID
:
:
TELEMETRY_ACCUMULATE_UNKNOWN_HISTOGRAM_KEYS
NS_ConvertASCIItoUTF16
(
gHistogramInfos
[
aID
]
.
name
(
)
)
1
)
;
return
;
}
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
internal_Accumulate
(
aID
aKey
aSample
)
;
}
void
TelemetryHistogram
:
:
Accumulate
(
HistogramID
aID
const
nsCString
&
aKey
const
nsTArray
<
uint32_t
>
&
aSamples
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aID
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
"
)
;
return
;
}
MOZ_ASSERT
(
gHistogramInfos
[
aID
]
.
keyed
"
Cannot
accumulate
into
a
non
-
keyed
histogram
using
a
key
.
"
)
;
if
(
!
gHistogramInfos
[
aID
]
.
allows_key
(
aKey
)
)
{
nsPrintfCString
msg
(
"
%
s
-
key
'
%
s
'
not
allowed
for
this
keyed
histogram
"
gHistogramInfos
[
aID
]
.
name
(
)
aKey
.
get
(
)
)
;
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_ConvertUTF8toUTF16
(
msg
)
)
;
TelemetryScalar
:
:
Add
(
mozilla
:
:
Telemetry
:
:
ScalarID
:
:
TELEMETRY_ACCUMULATE_UNKNOWN_HISTOGRAM_KEYS
NS_ConvertASCIItoUTF16
(
gHistogramInfos
[
aID
]
.
name
(
)
)
1
)
;
return
;
}
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
for
(
uint32_t
sample
:
aSamples
)
{
internal_Accumulate
(
aID
aKey
sample
)
;
}
}
void
TelemetryHistogram
:
:
Accumulate
(
const
char
*
name
uint32_t
sample
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
if
(
!
internal_CanRecordBase
(
)
)
{
return
;
}
HistogramID
id
;
nsresult
rv
=
internal_GetHistogramIdByName
(
nsDependentCString
(
name
)
&
id
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
internal_Accumulate
(
id
sample
)
;
}
void
TelemetryHistogram
:
:
Accumulate
(
const
char
*
name
const
nsCString
&
key
uint32_t
sample
)
{
bool
keyNotAllowed
=
false
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
if
(
!
internal_CanRecordBase
(
)
)
{
return
;
}
HistogramID
id
;
nsresult
rv
=
internal_GetHistogramIdByName
(
nsDependentCString
(
name
)
&
id
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
if
(
gHistogramInfos
[
id
]
.
allows_key
(
key
)
)
{
internal_Accumulate
(
id
key
sample
)
;
return
;
}
keyNotAllowed
=
true
;
}
}
if
(
keyNotAllowed
)
{
LogToBrowserConsole
(
nsIScriptError
:
:
errorFlag
NS_LITERAL_STRING
(
"
Key
not
allowed
for
this
keyed
histogram
"
)
)
;
TelemetryScalar
:
:
Add
(
mozilla
:
:
Telemetry
:
:
ScalarID
:
:
TELEMETRY_ACCUMULATE_UNKNOWN_HISTOGRAM_KEYS
NS_ConvertASCIItoUTF16
(
name
)
1
)
;
}
}
void
TelemetryHistogram
:
:
AccumulateCategorical
(
HistogramID
aId
const
nsCString
&
label
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aId
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
return
;
}
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
if
(
!
internal_CanRecordBase
(
)
)
{
return
;
}
uint32_t
labelId
=
0
;
if
(
NS_FAILED
(
gHistogramInfos
[
aId
]
.
label_id
(
label
.
get
(
)
&
labelId
)
)
)
{
return
;
}
internal_Accumulate
(
aId
labelId
)
;
}
void
TelemetryHistogram
:
:
AccumulateCategorical
(
HistogramID
aId
const
nsTArray
<
nsCString
>
&
aLabels
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aId
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
return
;
}
if
(
!
internal_CanRecordBase
(
)
)
{
return
;
}
nsTArray
<
uint32_t
>
intSamples
(
aLabels
.
Length
(
)
)
;
for
(
const
nsCString
&
label
:
aLabels
)
{
uint32_t
labelId
=
0
;
if
(
NS_FAILED
(
gHistogramInfos
[
aId
]
.
label_id
(
label
.
get
(
)
&
labelId
)
)
)
{
return
;
}
intSamples
.
AppendElement
(
labelId
)
;
}
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
for
(
uint32_t
sample
:
intSamples
)
{
internal_Accumulate
(
aId
sample
)
;
}
}
void
TelemetryHistogram
:
:
AccumulateChild
(
ProcessID
aProcessType
const
nsTArray
<
HistogramAccumulation
>
&
aAccumulations
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
if
(
!
internal_CanRecordBase
(
)
)
{
return
;
}
for
(
uint32_t
i
=
0
;
i
<
aAccumulations
.
Length
(
)
;
+
+
i
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aAccumulations
[
i
]
.
mId
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
continue
;
}
internal_AccumulateChild
(
aProcessType
aAccumulations
[
i
]
.
mId
aAccumulations
[
i
]
.
mSample
)
;
}
}
void
TelemetryHistogram
:
:
AccumulateChildKeyed
(
ProcessID
aProcessType
const
nsTArray
<
KeyedHistogramAccumulation
>
&
aAccumulations
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
if
(
!
internal_CanRecordBase
(
)
)
{
return
;
}
for
(
uint32_t
i
=
0
;
i
<
aAccumulations
.
Length
(
)
;
+
+
i
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
aAccumulations
[
i
]
.
mId
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
continue
;
}
internal_AccumulateChildKeyed
(
aProcessType
aAccumulations
[
i
]
.
mId
aAccumulations
[
i
]
.
mKey
aAccumulations
[
i
]
.
mSample
)
;
}
}
nsresult
TelemetryHistogram
:
:
GetHistogramById
(
const
nsACString
&
name
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
ret
)
{
HistogramID
id
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
nsresult
rv
=
internal_GetHistogramIdByName
(
name
&
id
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
gHistogramInfos
[
id
]
.
keyed
)
{
return
NS_ERROR_FAILURE
;
}
}
return
internal_WrapAndReturnHistogram
(
id
cx
ret
)
;
}
nsresult
TelemetryHistogram
:
:
GetKeyedHistogramById
(
const
nsACString
&
name
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
ret
)
{
HistogramID
id
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
nsresult
rv
=
internal_GetHistogramIdByName
(
name
&
id
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
gHistogramInfos
[
id
]
.
keyed
)
{
return
NS_ERROR_FAILURE
;
}
}
return
internal_WrapAndReturnKeyedHistogram
(
id
cx
ret
)
;
}
const
char
*
TelemetryHistogram
:
:
GetHistogramName
(
HistogramID
id
)
{
if
(
NS_WARN_IF
(
!
internal_IsHistogramEnumId
(
id
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Histogram
usage
requires
valid
ids
.
"
)
;
return
nullptr
;
}
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
const
HistogramInfo
&
h
=
gHistogramInfos
[
id
]
;
return
h
.
name
(
)
;
}
nsresult
TelemetryHistogram
:
:
CreateHistogramSnapshots
(
JSContext
*
aCx
JS
:
:
MutableHandleValue
aResult
unsigned
int
aDataset
bool
aClearSubsession
)
{
JS
:
:
Rooted
<
JSObject
*
>
root_obj
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
if
(
!
root_obj
)
{
return
NS_ERROR_FAILURE
;
}
aResult
.
setObject
(
*
root_obj
)
;
bool
includeGPUProcess
=
false
;
if
(
auto
gpm
=
mozilla
:
:
gfx
:
:
GPUProcessManager
:
:
Get
(
)
)
{
includeGPUProcess
=
gpm
-
>
AttemptedGPUProcess
(
)
;
}
HistogramProcessSnapshotsArray
processHistArray
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
nsresult
rv
=
internal_GetHistogramsSnapshot
(
locker
aDataset
aClearSubsession
includeGPUProcess
processHistArray
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
for
(
uint32_t
process
=
0
;
process
<
processHistArray
.
length
(
)
;
+
+
process
)
{
JS
:
:
Rooted
<
JSObject
*
>
processObject
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
if
(
!
processObject
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
JS_DefineProperty
(
aCx
root_obj
GetNameForProcessID
(
ProcessID
(
process
)
)
processObject
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
for
(
const
HistogramSnapshotInfo
&
hData
:
processHistArray
[
process
]
)
{
HistogramID
id
=
hData
.
histogramID
;
JS
:
:
Rooted
<
JSObject
*
>
hobj
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
if
(
!
hobj
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_FAILED
(
internal_ReflectHistogramAndSamples
(
aCx
hobj
gHistogramInfos
[
id
]
hData
.
data
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
JS_DefineProperty
(
aCx
processObject
gHistogramInfos
[
id
]
.
name
(
)
hobj
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
}
}
return
NS_OK
;
}
nsresult
TelemetryHistogram
:
:
GetKeyedHistogramSnapshots
(
JSContext
*
aCx
JS
:
:
MutableHandleValue
aResult
unsigned
int
aDataset
bool
aClearSubsession
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
if
(
!
obj
)
{
return
NS_ERROR_FAILURE
;
}
aResult
.
setObject
(
*
obj
)
;
bool
includeGPUProcess
=
false
;
if
(
auto
gpm
=
mozilla
:
:
gfx
:
:
GPUProcessManager
:
:
Get
(
)
)
{
includeGPUProcess
=
gpm
-
>
AttemptedGPUProcess
(
)
;
}
KeyedHistogramProcessSnapshotsArray
processHistArray
;
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
nsresult
rv
=
internal_GetKeyedHistogramsSnapshot
(
locker
aDataset
aClearSubsession
includeGPUProcess
processHistArray
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
for
(
uint32_t
process
=
0
;
process
<
processHistArray
.
length
(
)
;
+
+
process
)
{
JS
:
:
Rooted
<
JSObject
*
>
processObject
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
if
(
!
processObject
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
JS_DefineProperty
(
aCx
obj
GetNameForProcessID
(
ProcessID
(
process
)
)
processObject
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
for
(
const
KeyedHistogramSnapshotInfo
&
hData
:
processHistArray
[
process
]
)
{
const
HistogramInfo
&
info
=
gHistogramInfos
[
hData
.
histogramId
]
;
JS
:
:
RootedObject
snapshot
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
if
(
!
snapshot
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
NS_SUCCEEDED
(
internal_ReflectKeyedHistogram
(
hData
.
data
info
aCx
snapshot
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
JS_DefineProperty
(
aCx
processObject
info
.
name
(
)
snapshot
JSPROP_ENUMERATE
)
)
{
return
NS_ERROR_FAILURE
;
}
}
}
return
NS_OK
;
}
size_t
TelemetryHistogram
:
:
GetMapShallowSizesOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
return
gNameToHistogramIDMap
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
TelemetryHistogram
:
:
GetHistogramSizesofIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
{
StaticMutexAutoLock
locker
(
gTelemetryHistogramMutex
)
;
return
0
;
}
