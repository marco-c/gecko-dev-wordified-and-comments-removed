#
ifndef
Stopwatch_h__
#
define
Stopwatch_h__
#
include
"
mozilla
/
dom
/
TelemetryStopwatchBinding
.
h
"
namespace
mozilla
{
namespace
telemetry
{
class
Stopwatch
{
using
GlobalObject
=
mozilla
:
:
dom
:
:
GlobalObject
;
public
:
static
bool
Start
(
const
GlobalObject
&
global
const
nsAString
&
histogram
JS
:
:
Handle
<
JSObject
*
>
obj
const
dom
:
:
TelemetryStopwatchOptions
&
options
)
;
static
bool
Cancel
(
const
GlobalObject
&
global
const
nsAString
&
histogram
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
static
bool
Finish
(
const
GlobalObject
&
global
const
nsAString
&
histogram
JS
:
:
Handle
<
JSObject
*
>
obj
bool
canceledOkay
)
;
static
void
SetTestModeEnabled
(
const
GlobalObject
&
global
bool
testing
)
;
}
;
class
UserInteractionStopwatch
{
using
GlobalObject
=
mozilla
:
:
dom
:
:
GlobalObject
;
public
:
static
bool
Start
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUserInteraction
const
nsACString
&
aValue
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
static
bool
Running
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUserInteraction
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
static
bool
Update
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUserInteraction
const
nsACString
&
aValue
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
static
bool
Cancel
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUserInteraction
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
static
bool
Finish
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUserInteraction
JS
:
:
Handle
<
JSObject
*
>
aObj
const
dom
:
:
Optional
<
nsACString
>
&
aAdditionalText
)
;
}
;
}
}
#
endif
