#
ifndef
TelemetryCommon_h__
#
define
TelemetryCommon_h__
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
mozilla
/
TelemetryProcessEnums
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
namespace
Telemetry
{
namespace
Common
{
typedef
nsTHashtable
<
nsCStringHashKey
>
StringHashSet
;
enum
class
RecordedProcessType
:
uint16_t
{
Main
=
(
1
<
<
GeckoProcessType_Default
)
Content
=
(
1
<
<
GeckoProcessType_Content
)
Gpu
=
(
1
<
<
GeckoProcessType_GPU
)
Socket
=
(
1
<
<
GeckoProcessType_Socket
)
AllChildren
=
0xFFFF
-
1
All
=
0xFFFF
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
RecordedProcessType
)
;
static_assert
(
static_cast
<
uint16_t
>
(
RecordedProcessType
:
:
Main
)
=
=
1
"
Main
process
type
must
be
equal
to
1
to
allow
easy
matching
in
"
"
CanRecordInProcess
"
)
;
enum
class
SupportedProduct
:
uint8_t
{
Firefox
=
(
1
<
<
0
)
Fennec
=
(
1
<
<
1
)
Geckoview
=
(
1
<
<
2
)
GeckoviewStreaming
=
(
1
<
<
3
)
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
SupportedProduct
)
;
template
<
class
EntryType
>
class
AutoHashtable
:
public
nsTHashtable
<
EntryType
>
{
public
:
explicit
AutoHashtable
(
uint32_t
initLength
=
PLDHashTable
:
:
kDefaultInitialLength
)
;
typedef
bool
(
*
ReflectEntryFunc
)
(
EntryType
*
entry
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
bool
ReflectIntoJS
(
ReflectEntryFunc
entryFunc
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
}
;
template
<
class
EntryType
>
AutoHashtable
<
EntryType
>
:
:
AutoHashtable
(
uint32_t
initLength
)
:
nsTHashtable
<
EntryType
>
(
initLength
)
{
}
template
<
typename
EntryType
>
bool
AutoHashtable
<
EntryType
>
:
:
ReflectIntoJS
(
ReflectEntryFunc
entryFunc
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
{
for
(
auto
iter
=
this
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
!
entryFunc
(
iter
.
Get
(
)
cx
obj
)
)
{
return
false
;
}
}
return
true
;
}
bool
IsExpiredVersion
(
const
char
*
aExpiration
)
;
bool
IsInDataset
(
uint32_t
aDataset
uint32_t
aContainingDataset
)
;
bool
CanRecordDataset
(
uint32_t
aDataset
bool
aCanRecordBase
bool
aCanRecordExtended
)
;
bool
CanRecordInProcess
(
RecordedProcessType
aProcesses
GeckoProcessType
aProcess
)
;
bool
CanRecordInProcess
(
RecordedProcessType
aProcesses
ProcessID
aProcess
)
;
bool
CanRecordProduct
(
SupportedProduct
aProducts
)
;
nsresult
MsSinceProcessStart
(
double
*
aResult
)
;
void
LogToBrowserConsole
(
uint32_t
aLogLevel
const
nsAString
&
aMsg
)
;
const
char
*
GetNameForProcessID
(
ProcessID
process
)
;
ProcessID
GetIDForProcessName
(
const
char
*
aProcessName
)
;
GeckoProcessType
GetGeckoProcessType
(
ProcessID
process
)
;
bool
IsValidIdentifierString
(
const
nsACString
&
aStr
const
size_t
aMaxLength
const
bool
aAllowInfixPeriod
const
bool
aAllowInfixUnderscore
)
;
JSString
*
ToJSString
(
JSContext
*
cx
const
nsACString
&
aStr
)
;
JSString
*
ToJSString
(
JSContext
*
cx
const
nsAString
&
aStr
)
;
SupportedProduct
GetCurrentProduct
(
)
;
}
}
}
#
endif
