#
ifndef
Telemetry_h__
#
define
Telemetry_h__
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TelemetryEventEnums
.
h
"
#
include
"
mozilla
/
TelemetryHistogramEnums
.
h
"
#
include
"
mozilla
/
TelemetryScalarEnums
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
namespace
Telemetry
{
struct
HistogramAccumulation
;
struct
KeyedHistogramAccumulation
;
struct
ScalarAction
;
struct
KeyedScalarAction
;
struct
ChildEventData
;
struct
EventExtraEntry
{
nsCString
key
;
nsCString
value
;
}
;
void
Init
(
)
;
void
ShutdownTelemetry
(
)
;
void
Accumulate
(
HistogramID
id
uint32_t
sample
)
;
void
Accumulate
(
HistogramID
id
const
nsTArray
<
uint32_t
>
&
samples
)
;
void
Accumulate
(
HistogramID
id
const
nsCString
&
key
uint32_t
sample
=
1
)
;
void
Accumulate
(
HistogramID
id
const
nsCString
&
key
const
nsTArray
<
uint32_t
>
&
samples
)
;
void
Accumulate
(
const
char
*
name
uint32_t
sample
)
;
void
Accumulate
(
const
char
*
name
const
nsCString
&
key
uint32_t
sample
=
1
)
;
template
<
class
E
>
void
AccumulateCategorical
(
E
enumValue
)
{
static_assert
(
IsCategoricalLabelEnum
<
E
>
:
:
value
"
Only
categorical
label
enum
types
are
supported
.
"
)
;
Accumulate
(
static_cast
<
HistogramID
>
(
CategoricalLabelId
<
E
>
:
:
value
)
static_cast
<
uint32_t
>
(
enumValue
)
)
;
}
;
template
<
class
E
>
void
AccumulateCategorical
(
const
nsTArray
<
E
>
&
enumValues
)
{
static_assert
(
IsCategoricalLabelEnum
<
E
>
:
:
value
"
Only
categorical
label
enum
types
are
supported
.
"
)
;
nsTArray
<
uint32_t
>
intSamples
(
enumValues
.
Length
(
)
)
;
for
(
E
aValue
:
enumValues
)
{
intSamples
.
AppendElement
(
static_cast
<
uint32_t
>
(
aValue
)
)
;
}
HistogramID
categoricalId
=
static_cast
<
HistogramID
>
(
CategoricalLabelId
<
E
>
:
:
value
)
;
Accumulate
(
categoricalId
intSamples
)
;
}
template
<
class
E
>
void
AccumulateCategoricalKeyed
(
const
nsCString
&
key
E
enumValue
)
{
static_assert
(
IsCategoricalLabelEnum
<
E
>
:
:
value
"
Only
categorical
label
enum
types
are
supported
.
"
)
;
Accumulate
(
static_cast
<
HistogramID
>
(
CategoricalLabelId
<
E
>
:
:
value
)
key
static_cast
<
uint32_t
>
(
enumValue
)
)
;
}
;
template
<
class
E
>
void
AccumulateCategoricalKeyed
(
const
nsCString
&
key
const
nsTArray
<
E
>
&
enumValues
)
{
static_assert
(
IsCategoricalLabelEnum
<
E
>
:
:
value
"
Only
categorical
label
enum
types
are
supported
.
"
)
;
nsTArray
<
uint32_t
>
intSamples
(
enumValues
.
Length
(
)
)
;
for
(
E
aValue
:
enumValues
)
{
intSamples
.
AppendElement
(
static_cast
<
uint32_t
>
(
aValue
)
)
;
}
Accumulate
(
static_cast
<
HistogramID
>
(
CategoricalLabelId
<
E
>
:
:
value
)
key
intSamples
)
;
}
;
void
AccumulateCategorical
(
HistogramID
id
const
nsCString
&
label
)
;
void
AccumulateCategorical
(
HistogramID
id
const
nsTArray
<
nsCString
>
&
labels
)
;
void
AccumulateTimeDelta
(
HistogramID
id
TimeStamp
start
TimeStamp
end
=
TimeStamp
:
:
Now
(
)
)
;
void
AccumulateTimeDelta
(
HistogramID
id
const
nsCString
&
key
TimeStamp
start
TimeStamp
end
=
TimeStamp
:
:
Now
(
)
)
;
void
SetHistogramRecordingEnabled
(
HistogramID
id
bool
enabled
)
;
const
char
*
GetHistogramName
(
HistogramID
id
)
;
class
MOZ_RAII
RuntimeAutoTimer
{
public
:
explicit
RuntimeAutoTimer
(
Telemetry
:
:
HistogramID
aId
TimeStamp
aStart
=
TimeStamp
:
:
Now
(
)
)
:
id
(
aId
)
start
(
aStart
)
{
}
explicit
RuntimeAutoTimer
(
Telemetry
:
:
HistogramID
aId
const
nsCString
&
aKey
TimeStamp
aStart
=
TimeStamp
:
:
Now
(
)
)
:
id
(
aId
)
key
(
aKey
)
start
(
aStart
)
{
MOZ_ASSERT
(
!
aKey
.
IsEmpty
(
)
"
The
key
must
not
be
empty
.
"
)
;
}
~
RuntimeAutoTimer
(
)
{
if
(
key
.
IsEmpty
(
)
)
{
AccumulateTimeDelta
(
id
start
)
;
}
else
{
AccumulateTimeDelta
(
id
key
start
)
;
}
}
private
:
Telemetry
:
:
HistogramID
id
;
const
nsCString
key
;
const
TimeStamp
start
;
}
;
template
<
HistogramID
id
>
class
MOZ_RAII
AutoTimer
{
public
:
explicit
AutoTimer
(
TimeStamp
aStart
=
TimeStamp
:
:
Now
(
)
)
:
start
(
aStart
)
{
}
explicit
AutoTimer
(
const
nsCString
&
aKey
TimeStamp
aStart
=
TimeStamp
:
:
Now
(
)
)
:
start
(
aStart
)
key
(
aKey
)
{
MOZ_ASSERT
(
!
aKey
.
IsEmpty
(
)
"
The
key
must
not
be
empty
.
"
)
;
}
~
AutoTimer
(
)
{
if
(
key
.
IsEmpty
(
)
)
{
AccumulateTimeDelta
(
id
start
)
;
}
else
{
AccumulateTimeDelta
(
id
key
start
)
;
}
}
private
:
const
TimeStamp
start
;
const
nsCString
key
;
}
;
class
MOZ_RAII
RuntimeAutoCounter
{
public
:
explicit
RuntimeAutoCounter
(
HistogramID
aId
uint32_t
counterStart
=
0
)
:
id
(
aId
)
counter
(
counterStart
)
{
}
~
RuntimeAutoCounter
(
)
{
Accumulate
(
id
counter
)
;
}
void
operator
+
+
(
)
{
if
(
NS_WARN_IF
(
counter
=
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
)
{
return
;
}
+
+
counter
;
}
void
operator
+
=
(
int
increment
)
{
if
(
NS_WARN_IF
(
increment
>
0
&
&
static_cast
<
uint32_t
>
(
increment
)
>
(
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
-
counter
)
)
)
{
counter
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
;
return
;
}
if
(
NS_WARN_IF
(
increment
<
0
&
&
static_cast
<
uint32_t
>
(
-
increment
)
>
counter
)
)
{
counter
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
min
(
)
;
return
;
}
counter
+
=
increment
;
}
private
:
HistogramID
id
;
uint32_t
counter
;
}
;
template
<
HistogramID
id
>
class
MOZ_RAII
AutoCounter
{
public
:
explicit
AutoCounter
(
uint32_t
counterStart
=
0
)
:
counter
(
counterStart
)
{
}
~
AutoCounter
(
)
{
Accumulate
(
id
counter
)
;
}
void
operator
+
+
(
)
{
if
(
NS_WARN_IF
(
counter
=
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
)
{
return
;
}
+
+
counter
;
}
void
operator
+
=
(
int
increment
)
{
if
(
NS_WARN_IF
(
increment
>
0
&
&
static_cast
<
uint32_t
>
(
increment
)
>
(
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
-
counter
)
)
)
{
counter
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
;
return
;
}
if
(
NS_WARN_IF
(
increment
<
0
&
&
static_cast
<
uint32_t
>
(
-
increment
)
>
counter
)
)
{
counter
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
min
(
)
;
return
;
}
counter
+
=
increment
;
}
private
:
uint32_t
counter
;
}
;
bool
CanRecordBase
(
)
;
bool
CanRecordExtended
(
)
;
bool
CanRecordReleaseData
(
)
;
bool
CanRecordPrereleaseData
(
)
;
void
RecordSlowSQLStatement
(
const
nsACString
&
statement
const
nsACString
&
dbName
uint32_t
delay
)
;
void
InitIOReporting
(
nsIFile
*
aXreDir
)
;
void
SetProfileDir
(
nsIFile
*
aProfD
)
;
void
LeavingStartupStage
(
)
;
void
EnteringShutdownStage
(
)
;
const
uint32_t
kSlowSQLThresholdForMainThread
=
50
;
const
uint32_t
kSlowSQLThresholdForHelperThreads
=
100
;
void
WriteFailedProfileLock
(
nsIFile
*
aProfileDir
)
;
void
ScalarAdd
(
mozilla
:
:
Telemetry
:
:
ScalarID
aId
uint32_t
aValue
)
;
void
ScalarSet
(
mozilla
:
:
Telemetry
:
:
ScalarID
aId
uint32_t
aValue
)
;
void
ScalarSet
(
mozilla
:
:
Telemetry
:
:
ScalarID
aId
bool
aValue
)
;
void
ScalarSet
(
mozilla
:
:
Telemetry
:
:
ScalarID
aId
const
nsAString
&
aValue
)
;
void
ScalarAdd
(
mozilla
:
:
Telemetry
:
:
ScalarID
aId
const
nsAString
&
aKey
uint32_t
aValue
)
;
void
ScalarSet
(
mozilla
:
:
Telemetry
:
:
ScalarID
aId
const
nsAString
&
aKey
uint32_t
aValue
)
;
void
ScalarSet
(
mozilla
:
:
Telemetry
:
:
ScalarID
aId
const
nsAString
&
aKey
bool
aValue
)
;
}
}
#
endif
