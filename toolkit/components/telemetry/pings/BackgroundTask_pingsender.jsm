"
use
strict
"
;
const
{
sendStandalonePing
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetrySend
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
runBackgroundTask
"
]
;
async
function
runBackgroundTask
(
commandLine
)
{
let
sends
=
[
]
;
for
(
let
i
=
0
;
i
<
commandLine
.
length
;
i
+
=
2
)
{
sends
.
push
(
sendPing
(
commandLine
.
getArgument
(
i
)
commandLine
.
getArgument
(
i
+
1
)
)
)
;
}
return
Promise
.
all
(
sends
)
;
}
const
ALLOWED_ENDPOINTS
=
[
"
localhost
"
"
incoming
.
telemetry
.
mozilla
.
org
"
]
;
async
function
sendPing
(
endpoint
path
)
{
console
.
log
(
pingsender
:
sending
{
path
}
to
{
endpoint
}
)
;
let
hostname
=
new
URL
(
endpoint
)
.
hostname
;
if
(
!
ALLOWED_ENDPOINTS
.
includes
(
hostname
)
)
{
throw
new
Error
(
pingsender
:
Endpoint
{
endpoint
}
is
not
allowed
)
;
}
let
json
=
await
IOUtils
.
readUTF8
(
path
)
;
console
.
log
(
pingsender
:
read
payload
{
json
}
)
;
await
sendStandalonePing
(
endpoint
json
{
"
User
-
Agent
"
:
"
pingsender
/
2
.
0
"
"
X
-
PingSender
-
Version
"
:
"
2
.
0
"
}
)
;
return
IOUtils
.
remove
(
path
)
;
}
