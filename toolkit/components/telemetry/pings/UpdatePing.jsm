"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryController
"
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
const
LOGGER_NAME
=
"
Toolkit
.
Telemetry
"
;
const
PING_TYPE
=
"
update
"
;
const
UPDATE_DOWNLOADED_TOPIC
=
"
update
-
downloaded
"
;
const
UPDATE_STAGED_TOPIC
=
"
update
-
staged
"
;
var
EXPORTED_SYMBOLS
=
[
"
UpdatePing
"
]
;
var
UpdatePing
=
{
_enabled
:
false
earlyInit
(
)
{
this
.
_log
=
Log
.
repository
.
getLoggerWithMessagePrefix
(
LOGGER_NAME
"
UpdatePing
:
:
"
)
;
this
.
_enabled
=
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
UpdatePing
false
)
;
this
.
_log
.
trace
(
"
init
-
enabled
:
"
+
this
.
_enabled
)
;
if
(
!
this
.
_enabled
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
UPDATE_DOWNLOADED_TOPIC
)
;
Services
.
obs
.
addObserver
(
this
UPDATE_STAGED_TOPIC
)
;
}
_getActiveUpdate
(
)
{
let
updateManager
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIUpdateManager
)
;
if
(
!
updateManager
|
|
!
updateManager
.
readyUpdate
)
{
return
null
;
}
return
updateManager
.
readyUpdate
;
}
handleUpdateSuccess
(
aPreviousVersion
aPreviousBuildId
)
{
if
(
!
this
.
_enabled
)
{
return
;
}
this
.
_log
.
trace
(
"
handleUpdateSuccess
"
)
;
let
update
=
this
.
_getActiveUpdate
(
)
;
const
payload
=
{
reason
:
"
success
"
previousChannel
:
update
?
update
.
channel
:
null
previousVersion
:
aPreviousVersion
previousBuildId
:
aPreviousBuildId
}
;
const
options
=
{
addClientId
:
true
addEnvironment
:
true
usePingSender
:
false
}
;
TelemetryController
.
submitExternalPing
(
PING_TYPE
payload
options
)
.
catch
(
e
=
>
this
.
_log
.
error
(
"
handleUpdateSuccess
-
failed
to
submit
update
ping
"
e
)
)
;
}
_handleUpdateReady
(
aUpdateState
)
{
const
ALLOWED_STATES
=
[
"
applied
"
"
applied
-
service
"
"
pending
"
"
pending
-
service
"
"
pending
-
elevate
"
]
;
if
(
!
ALLOWED_STATES
.
includes
(
aUpdateState
)
)
{
this
.
_log
.
trace
(
"
Unexpected
update
state
:
"
+
aUpdateState
)
;
return
;
}
let
update
=
this
.
_getActiveUpdate
(
)
;
if
(
!
update
)
{
this
.
_log
.
trace
(
"
Cannot
get
the
update
manager
or
no
update
is
currently
active
.
"
)
;
return
;
}
const
payload
=
{
reason
:
"
ready
"
targetChannel
:
update
.
channel
targetVersion
:
update
.
appVersion
targetBuildId
:
update
.
buildID
targetDisplayVersion
:
update
.
displayVersion
}
;
const
options
=
{
addClientId
:
true
addEnvironment
:
true
usePingSender
:
true
}
;
TelemetryController
.
submitExternalPing
(
PING_TYPE
payload
options
)
.
catch
(
e
=
>
this
.
_log
.
error
(
"
_handleUpdateReady
-
failed
to
submit
update
ping
"
e
)
)
;
}
observe
(
aSubject
aTopic
aData
)
{
this
.
_log
.
trace
(
"
observe
-
aTopic
:
"
+
aTopic
)
;
if
(
aTopic
=
=
UPDATE_DOWNLOADED_TOPIC
|
|
aTopic
=
=
UPDATE_STAGED_TOPIC
)
{
this
.
_handleUpdateReady
(
aData
)
;
}
}
shutdown
(
)
{
if
(
!
this
.
_enabled
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
UPDATE_DOWNLOADED_TOPIC
)
;
Services
.
obs
.
removeObserver
(
this
UPDATE_STAGED_TOPIC
)
;
}
}
;
