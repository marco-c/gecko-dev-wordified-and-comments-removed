#
ifndef
GeckoViewStreamingTelemetry_h__
#
define
GeckoViewStreamingTelemetry_h__
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
cstdint
>
namespace
GeckoViewStreamingTelemetry
{
void
HistogramAccumulate
(
const
nsCString
&
aName
bool
aIsCategorical
uint32_t
aValue
)
;
void
BoolScalarSet
(
const
nsCString
&
aName
bool
aValue
)
;
void
StringScalarSet
(
const
nsCString
&
aName
const
nsCString
&
aValue
)
;
void
UintScalarSet
(
const
nsCString
&
aName
uint32_t
aValue
)
;
class
StreamingTelemetryDelegate
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
StreamingTelemetryDelegate
)
virtual
void
ReceiveHistogramSamples
(
const
nsCString
&
aName
const
nsTArray
<
uint32_t
>
&
aSamples
)
=
0
;
virtual
void
ReceiveCategoricalHistogramSamples
(
const
nsCString
&
aName
const
nsTArray
<
uint32_t
>
&
aSamples
)
=
0
;
virtual
void
ReceiveBoolScalarValue
(
const
nsCString
&
aName
bool
aValue
)
=
0
;
virtual
void
ReceiveStringScalarValue
(
const
nsCString
&
aName
const
nsCString
&
aValue
)
=
0
;
virtual
void
ReceiveUintScalarValue
(
const
nsCString
&
aName
uint32_t
aValue
)
=
0
;
protected
:
virtual
~
StreamingTelemetryDelegate
(
)
=
default
;
}
;
void
RegisterDelegate
(
const
RefPtr
<
StreamingTelemetryDelegate
>
&
aDelegate
)
;
}
#
endif
