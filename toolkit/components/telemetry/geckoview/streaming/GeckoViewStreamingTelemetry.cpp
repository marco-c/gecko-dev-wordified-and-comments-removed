#
include
"
GeckoViewStreamingTelemetry
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
StaticPrefs_toolkit
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
mozilla
:
:
Runnable
;
using
mozilla
:
:
StaticMutexAutoLock
;
using
mozilla
:
:
StaticMutexNotRecorded
;
using
mozilla
:
:
StaticRefPtr
;
using
mozilla
:
:
TimeStamp
;
namespace
GeckoViewStreamingTelemetry
{
static
StaticMutexNotRecorded
gMutex
;
TimeStamp
gBatchBegan
;
typedef
nsDataHashtable
<
nsCStringHashKey
nsTArray
<
uint32_t
>
>
HistogramBatch
;
HistogramBatch
gBatch
;
typedef
nsDataHashtable
<
nsCStringHashKey
bool
>
BoolScalarBatch
;
BoolScalarBatch
gBoolScalars
;
typedef
nsDataHashtable
<
nsCStringHashKey
nsCString
>
StringScalarBatch
;
StringScalarBatch
gStringScalars
;
typedef
nsDataHashtable
<
nsCStringHashKey
uint32_t
>
UintScalarBatch
;
UintScalarBatch
gUintScalars
;
StaticRefPtr
<
StreamingTelemetryDelegate
>
gDelegate
;
void
RegisterDelegate
(
const
RefPtr
<
StreamingTelemetryDelegate
>
&
aDelegate
)
{
StaticMutexAutoLock
lock
(
gMutex
)
;
gDelegate
=
aDelegate
;
}
class
SendBatchRunnable
:
public
Runnable
{
public
:
explicit
SendBatchRunnable
(
RefPtr
<
StreamingTelemetryDelegate
>
aDelegate
HistogramBatch
&
&
aBatch
BoolScalarBatch
&
&
aBoolScalars
StringScalarBatch
&
&
aStringScalars
UintScalarBatch
&
&
aUintScalars
)
:
Runnable
(
"
SendBatchRunnable
"
)
mDelegate
(
std
:
:
move
(
aDelegate
)
)
mBatch
(
std
:
:
move
(
aBatch
)
)
mBoolScalars
(
std
:
:
move
(
aBoolScalars
)
)
mStringScalars
(
std
:
:
move
(
aStringScalars
)
)
mUintScalars
(
std
:
:
move
(
aUintScalars
)
)
{
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mDelegate
)
;
for
(
auto
iter
=
mBatch
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
nsCString
&
histogramName
=
PromiseFlatCString
(
iter
.
Key
(
)
)
;
const
nsTArray
<
uint32_t
>
&
samples
=
iter
.
Data
(
)
;
mDelegate
-
>
ReceiveHistogramSamples
(
histogramName
samples
)
;
}
mBatch
.
Clear
(
)
;
for
(
auto
iter
=
mBoolScalars
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
nsCString
&
scalarName
=
PromiseFlatCString
(
iter
.
Key
(
)
)
;
mDelegate
-
>
ReceiveBoolScalarValue
(
scalarName
iter
.
Data
(
)
)
;
}
mBoolScalars
.
Clear
(
)
;
for
(
auto
iter
=
mStringScalars
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
nsCString
&
scalarName
=
PromiseFlatCString
(
iter
.
Key
(
)
)
;
const
nsCString
&
scalarValue
=
PromiseFlatCString
(
iter
.
Data
(
)
)
;
mDelegate
-
>
ReceiveStringScalarValue
(
scalarName
scalarValue
)
;
}
mStringScalars
.
Clear
(
)
;
for
(
auto
iter
=
mUintScalars
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
nsCString
&
scalarName
=
PromiseFlatCString
(
iter
.
Key
(
)
)
;
mDelegate
-
>
ReceiveUintScalarValue
(
scalarName
iter
.
Data
(
)
)
;
}
mUintScalars
.
Clear
(
)
;
return
NS_OK
;
}
private
:
RefPtr
<
StreamingTelemetryDelegate
>
mDelegate
;
HistogramBatch
mBatch
;
BoolScalarBatch
mBoolScalars
;
StringScalarBatch
mStringScalars
;
UintScalarBatch
mUintScalars
;
}
;
void
SendBatch
(
const
StaticMutexAutoLock
&
aLock
)
{
if
(
!
gDelegate
)
{
NS_WARNING
(
"
Being
asked
to
send
Streaming
Telemetry
with
no
registered
Streaming
"
"
Telemetry
Delegate
.
Will
try
again
later
.
"
)
;
gBatchBegan
=
TimeStamp
:
:
Now
(
)
;
return
;
}
HistogramBatch
histogramCopy
;
gBatch
.
SwapElements
(
histogramCopy
)
;
BoolScalarBatch
boolScalarCopy
;
gBoolScalars
.
SwapElements
(
boolScalarCopy
)
;
StringScalarBatch
stringScalarCopy
;
gStringScalars
.
SwapElements
(
stringScalarCopy
)
;
UintScalarBatch
uintScalarCopy
;
gUintScalars
.
SwapElements
(
uintScalarCopy
)
;
RefPtr
<
SendBatchRunnable
>
runnable
=
new
SendBatchRunnable
(
gDelegate
std
:
:
move
(
histogramCopy
)
std
:
:
move
(
boolScalarCopy
)
std
:
:
move
(
stringScalarCopy
)
std
:
:
move
(
uintScalarCopy
)
)
;
NS_DispatchToMainThread
(
runnable
)
;
}
void
BatchCheck
(
const
StaticMutexAutoLock
&
aLock
)
{
if
(
gBatchBegan
.
IsNull
(
)
)
{
gBatchBegan
=
TimeStamp
:
:
Now
(
)
;
}
double
batchDurationMs
=
(
TimeStamp
:
:
Now
(
)
-
gBatchBegan
)
.
ToMilliseconds
(
)
;
if
(
batchDurationMs
>
mozilla
:
:
StaticPrefs
:
:
toolkit_telemetry_geckoview_batchDurationMS
(
)
)
{
SendBatch
(
aLock
)
;
gBatchBegan
=
TimeStamp
(
)
;
}
}
void
HistogramAccumulate
(
const
nsCString
&
aName
uint32_t
aValue
)
{
StaticMutexAutoLock
lock
(
gMutex
)
;
nsTArray
<
uint32_t
>
&
samples
=
gBatch
.
GetOrInsert
(
aName
)
;
samples
.
AppendElement
(
aValue
)
;
BatchCheck
(
lock
)
;
}
void
BoolScalarSet
(
const
nsCString
&
aName
bool
aValue
)
{
StaticMutexAutoLock
lock
(
gMutex
)
;
gBoolScalars
.
Put
(
aName
aValue
)
;
BatchCheck
(
lock
)
;
}
void
StringScalarSet
(
const
nsCString
&
aName
const
nsCString
&
aValue
)
{
StaticMutexAutoLock
lock
(
gMutex
)
;
gStringScalars
.
Put
(
aName
aValue
)
;
BatchCheck
(
lock
)
;
}
void
UintScalarSet
(
const
nsCString
&
aName
uint32_t
aValue
)
{
StaticMutexAutoLock
lock
(
gMutex
)
;
gUintScalars
.
Put
(
aName
aValue
)
;
BatchCheck
(
lock
)
;
}
}
