#
include
"
GeckoViewStreamingTelemetry
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
StaticPrefs_toolkit
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
mozilla
:
:
Runnable
;
using
mozilla
:
:
StaticMutexAutoLock
;
using
mozilla
:
:
StaticMutexNotRecorded
;
using
mozilla
:
:
StaticRefPtr
;
using
mozilla
:
:
TimeStamp
;
namespace
GeckoViewStreamingTelemetry
{
static
StaticMutexNotRecorded
gMutex
;
TimeStamp
gBatchBegan
;
typedef
nsDataHashtable
<
nsCStringHashKey
nsTArray
<
uint32_t
>
>
Batch
;
Batch
gBatch
;
StaticRefPtr
<
StreamingTelemetryDelegate
>
gDelegate
;
void
RegisterDelegate
(
const
RefPtr
<
StreamingTelemetryDelegate
>
&
aDelegate
)
{
StaticMutexAutoLock
lock
(
gMutex
)
;
gDelegate
=
aDelegate
;
}
class
SendBatchRunnable
:
public
Runnable
{
public
:
explicit
SendBatchRunnable
(
RefPtr
<
StreamingTelemetryDelegate
>
aDelegate
Batch
&
&
aBatch
)
:
Runnable
(
"
SendBatchRunnable
"
)
mDelegate
(
std
:
:
move
(
aDelegate
)
)
mBatch
(
std
:
:
move
(
aBatch
)
)
{
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mDelegate
)
;
for
(
auto
iter
=
mBatch
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
nsCString
&
histogramName
=
PromiseFlatCString
(
iter
.
Key
(
)
)
;
const
nsTArray
<
uint32_t
>
&
samples
=
iter
.
Data
(
)
;
mDelegate
-
>
ReceiveHistogramSamples
(
histogramName
samples
)
;
}
mBatch
.
Clear
(
)
;
return
NS_OK
;
}
private
:
RefPtr
<
StreamingTelemetryDelegate
>
mDelegate
;
Batch
mBatch
;
}
;
void
SendBatch
(
const
StaticMutexAutoLock
&
aLock
)
{
if
(
!
gDelegate
)
{
NS_WARNING
(
"
Being
asked
to
send
Streaming
Telemetry
with
no
registered
Streaming
"
"
Telemetry
Delegate
.
Will
try
again
later
.
"
)
;
gBatchBegan
=
TimeStamp
:
:
Now
(
)
;
return
;
}
Batch
copy
;
gBatch
.
SwapElements
(
copy
)
;
RefPtr
<
SendBatchRunnable
>
runnable
=
new
SendBatchRunnable
(
gDelegate
std
:
:
move
(
copy
)
)
;
NS_DispatchToMainThread
(
runnable
)
;
}
void
HistogramAccumulate
(
const
nsCString
&
aName
uint32_t
aValue
)
{
StaticMutexAutoLock
lock
(
gMutex
)
;
if
(
gBatch
.
Count
(
)
=
=
0
)
{
gBatchBegan
=
TimeStamp
:
:
Now
(
)
;
}
nsTArray
<
uint32_t
>
&
samples
=
gBatch
.
GetOrInsert
(
aName
)
;
samples
.
AppendElement
(
aValue
)
;
double
batchDurationMs
=
(
TimeStamp
:
:
Now
(
)
-
gBatchBegan
)
.
ToMilliseconds
(
)
;
if
(
batchDurationMs
>
mozilla
:
:
StaticPrefs
:
:
toolkit_telemetry_geckoview_batchDurationMS
(
)
)
{
SendBatch
(
lock
)
;
}
}
}
