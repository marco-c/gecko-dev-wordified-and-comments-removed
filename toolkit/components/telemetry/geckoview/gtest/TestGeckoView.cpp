#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
JSONWriter
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsIOutputStream
.
h
"
#
include
"
nsITelemetry
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
prenv
.
h
"
#
include
"
Telemetry
.
h
"
#
include
"
TelemetryFixture
.
h
"
#
include
"
TelemetryGeckoViewPersistence
.
h
"
#
include
"
TelemetryScalar
.
h
"
#
include
"
TelemetryTestHelpers
.
h
"
using
namespace
mozilla
;
using
namespace
TelemetryTestHelpers
;
const
char
kSampleData
[
]
=
R
"
(
{
"
scalars
"
:
{
"
content
"
:
{
"
telemetry
.
test
.
all_processes_uint
"
:
37
}
}
"
keyedScalars
"
:
{
"
parent
"
:
{
"
telemetry
.
test
.
keyed_unsigned_int
"
:
{
"
testKey
"
:
73
}
}
}
}
)
"
;
const
char16_t
kPersistedFilename
[
]
=
u
"
gv_measurements
.
json
"
;
const
char
kDataLoadedTopic
[
]
=
"
internal
-
telemetry
-
geckoview
-
load
-
complete
"
;
namespace
{
void
GetMockedDataDir
(
nsAString
&
aMockedDir
)
{
nsCOMPtr
<
nsIFile
>
tmpDir
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
tmpDir
)
)
;
ASSERT_EQ
(
NS_SUCCEEDED
(
rv
)
true
)
;
rv
=
tmpDir
-
>
GetPath
(
aMockedDir
)
;
ASSERT_EQ
(
NS_SUCCEEDED
(
rv
)
true
)
;
}
void
MockAndroidDataDir
(
)
{
nsAutoString
mockedPath
;
GetMockedDataDir
(
mockedPath
)
;
nsAutoCString
mockedEnv
(
nsPrintfCString
(
"
MOZ_ANDROID_DATA_DIR
=
%
s
"
NS_ConvertUTF16toUTF8
(
mockedPath
)
.
get
(
)
)
)
;
ASSERT_EQ
(
PR_SetEnv
(
ToNewCString
(
mockedEnv
)
)
PR_SUCCESS
)
;
}
void
WritePersistenceFile
(
const
nsACString
&
aData
)
{
nsCOMPtr
<
nsIFile
>
file
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
file
)
)
;
ASSERT_EQ
(
NS_SUCCEEDED
(
rv
)
true
)
;
nsAutoString
fileName
;
fileName
.
Append
(
kPersistedFilename
)
;
file
-
>
Append
(
fileName
)
;
nsCOMPtr
<
nsIOutputStream
>
stream
;
rv
=
NS_NewLocalFileOutputStream
(
getter_AddRefs
(
stream
)
file
)
;
ASSERT_EQ
(
NS_SUCCEEDED
(
rv
)
true
)
;
uint32_t
count
;
rv
=
stream
-
>
Write
(
aData
.
Data
(
)
aData
.
Length
(
)
&
count
)
;
ASSERT_EQ
(
NS_SUCCEEDED
(
rv
)
true
)
;
ASSERT_EQ
(
count
aData
.
Length
(
)
)
;
stream
-
>
Close
(
)
;
}
void
RemovePersistenceFile
(
)
{
nsCOMPtr
<
nsIFile
>
file
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
file
)
)
;
ASSERT_EQ
(
NS_SUCCEEDED
(
rv
)
true
)
;
nsAutoString
fileName
;
fileName
.
Append
(
kPersistedFilename
)
;
file
-
>
Append
(
fileName
)
;
bool
exists
=
true
;
rv
=
file
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
NS_OK
rv
)
<
<
"
nsIFile
:
:
Exists
cannot
fail
"
;
if
(
exists
)
{
rv
=
file
-
>
Remove
(
false
)
;
ASSERT_EQ
(
NS_OK
rv
)
<
<
"
nsIFile
:
:
Remove
cannot
delete
the
requested
file
"
;
}
}
void
CheckPersistenceFileExists
(
bool
&
aFileExists
)
{
nsCOMPtr
<
nsIFile
>
file
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
file
)
)
;
ASSERT_EQ
(
NS_OK
rv
)
<
<
"
NS_GetSpecialDirectory
must
return
a
valid
directory
"
;
nsAutoString
fileName
;
fileName
.
Append
(
kPersistedFilename
)
;
file
-
>
Append
(
fileName
)
;
rv
=
file
-
>
Exists
(
&
aFileExists
)
;
ASSERT_EQ
(
NS_OK
rv
)
<
<
"
nsIFile
:
:
Exists
must
not
fail
"
;
}
class
DataLoadedObserver
final
:
public
nsIObserver
{
~
DataLoadedObserver
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS
explicit
DataLoadedObserver
(
)
:
mDataLoaded
(
false
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
observerService
-
>
AddObserver
(
this
kDataLoadedTopic
false
)
;
}
void
WaitForNotification
(
)
{
mozilla
:
:
SpinEventLoopUntil
(
[
&
]
(
)
{
return
mDataLoaded
;
}
)
;
}
NS_IMETHOD
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
{
if
(
!
strcmp
(
aTopic
kDataLoadedTopic
)
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
observerService
-
>
RemoveObserver
(
this
kDataLoadedTopic
)
;
mDataLoaded
=
true
;
}
return
NS_OK
;
}
private
:
bool
mDataLoaded
;
}
;
NS_IMPL_ISUPPORTS
(
DataLoadedObserver
nsIObserver
)
}
class
TelemetryGeckoViewFixture
:
public
TelemetryTestFixture
{
protected
:
virtual
void
SetUp
(
)
{
TelemetryTestFixture
:
:
SetUp
(
)
;
MockAndroidDataDir
(
)
;
}
}
;
namespace
TelemetryGeckoViewTesting
{
void
TestDispatchPersist
(
)
;
}
TEST_F
(
TelemetryGeckoViewFixture
CorruptedPersistenceFiles
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
WritePersistenceFile
(
NS_LITERAL_CSTRING
(
"
{
"
)
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
RemovePersistenceFile
(
)
;
}
TEST_F
(
TelemetryGeckoViewFixture
EmptyPersistenceFiles
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
WritePersistenceFile
(
EmptyCString
(
)
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
RemovePersistenceFile
(
)
;
}
TEST_F
(
TelemetryGeckoViewFixture
ClearPersistenceFiles
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
bool
fileExists
=
false
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_FALSE
(
fileExists
)
<
<
"
No
persisted
measurements
must
exist
on
the
disk
"
;
WritePersistenceFile
(
nsDependentCString
(
kSampleData
)
)
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_TRUE
(
fileExists
)
<
<
"
We
should
have
written
the
test
persistence
file
to
disk
"
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
TelemetryGeckoViewPersistence
:
:
ClearPersistenceData
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_FALSE
(
fileExists
)
<
<
"
ClearPersistenceData
must
remove
the
persistence
file
"
;
}
TEST_F
(
TelemetryGeckoViewFixture
CheckDataLoadedTopic
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
bool
fileExists
=
false
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_FALSE
(
fileExists
)
<
<
"
No
persisted
measurements
must
exist
on
the
disk
"
;
RefPtr
<
DataLoadedObserver
>
loadingFinished
=
new
DataLoadedObserver
(
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
loadingFinished
-
>
WaitForNotification
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
WritePersistenceFile
(
nsDependentCString
(
kSampleData
)
)
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_TRUE
(
fileExists
)
<
<
"
The
persisted
measurements
must
exist
on
the
disk
"
;
loadingFinished
=
new
DataLoadedObserver
(
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
loadingFinished
-
>
WaitForNotification
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
RemovePersistenceFile
(
)
;
}
TEST_F
(
TelemetryGeckoViewFixture
PersistScalars
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
bool
fileExists
=
false
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_FALSE
(
fileExists
)
<
<
"
No
persisted
measurements
must
exist
on
the
disk
"
;
RefPtr
<
DataLoadedObserver
>
loadingFinished
=
new
DataLoadedObserver
(
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
loadingFinished
-
>
WaitForNotification
(
)
;
const
uint32_t
kExpectedUintValue
=
37
;
const
uint32_t
kExpectedKeyedUintValue
=
73
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_ALL_PROCESSES_UINT
kExpectedUintValue
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
TELEMETRY_TEST_KEYED_UNSIGNED_INT
NS_LITERAL_STRING
(
"
gv_key
"
)
kExpectedKeyedUintValue
)
;
TelemetryGeckoViewTesting
:
:
TestDispatchPersist
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_TRUE
(
fileExists
)
<
<
"
The
persisted
measurements
must
exist
on
the
disk
"
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
keyedScalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
false
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
GetScalarsSnapshot
(
true
cx
.
GetJSContext
(
)
&
keyedScalarsSnapshot
)
;
CheckUintScalar
(
"
telemetry
.
test
.
all_processes_uint
"
cx
.
GetJSContext
(
)
scalarsSnapshot
kExpectedUintValue
)
;
CheckKeyedUintScalar
(
"
telemetry
.
test
.
keyed_unsigned_int
"
"
gv_key
"
cx
.
GetJSContext
(
)
keyedScalarsSnapshot
kExpectedKeyedUintValue
)
;
RemovePersistenceFile
(
)
;
}
TEST_F
(
TelemetryGeckoViewFixture
PersistHistograms
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_MULTIPRODUCT
"
)
false
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_COUNT
"
)
true
)
;
bool
fileExists
=
false
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_FALSE
(
fileExists
)
<
<
"
No
persisted
measurements
must
exist
on
the
disk
"
;
RefPtr
<
DataLoadedObserver
>
loadingFinished
=
new
DataLoadedObserver
(
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
loadingFinished
-
>
WaitForNotification
(
)
;
const
uint32_t
kExpectedUintValue
=
37
;
const
nsTArray
<
uint32_t
>
keyedSamples
(
{
5
10
15
}
)
;
const
uint32_t
kExpectedKeyedSum
=
5
+
10
+
15
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_MULTIPRODUCT
kExpectedUintValue
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
TELEMETRY_TEST_KEYED_COUNT
NS_LITERAL_CSTRING
(
"
gv_key
"
)
keyedSamples
)
;
TelemetryGeckoViewTesting
:
:
TestDispatchPersist
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
CheckPersistenceFileExists
(
fileExists
)
;
ASSERT_TRUE
(
fileExists
)
<
<
"
The
persisted
measurements
must
exist
on
the
disk
"
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_MULTIPRODUCT
"
)
false
)
;
GetAndClearHistogram
(
cx
.
GetJSContext
(
)
mTelemetry
NS_LITERAL_CSTRING
(
"
TELEMETRY_TEST_KEYED_COUNT
"
)
true
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
JS
:
:
RootedValue
snapshot
(
cx
.
GetJSContext
(
)
)
;
JS
:
:
RootedValue
keyedSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_MULTIPRODUCT
"
&
snapshot
false
)
;
GetSnapshots
(
cx
.
GetJSContext
(
)
mTelemetry
"
TELEMETRY_TEST_KEYED_COUNT
"
&
keyedSnapshot
true
)
;
JS
:
:
RootedValue
histogram
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_MULTIPRODUCT
"
snapshot
&
histogram
)
;
JS
:
:
RootedValue
sum
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
histogram
&
sum
)
;
uint32_t
uSum
=
0
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedUintValue
)
<
<
"
The
histogram
is
not
returning
the
expected
value
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
TELEMETRY_TEST_KEYED_COUNT
"
keyedSnapshot
&
histogram
)
;
JS
:
:
RootedValue
expectedKeyData
(
cx
.
GetJSContext
(
)
)
;
GetProperty
(
cx
.
GetJSContext
(
)
"
gv_key
"
histogram
&
expectedKeyData
)
;
ASSERT_FALSE
(
expectedKeyData
.
isUndefined
(
)
)
<
<
"
Cannot
find
the
expected
key
in
the
keyed
histogram
data
"
;
GetProperty
(
cx
.
GetJSContext
(
)
"
sum
"
expectedKeyData
&
sum
)
;
JS
:
:
ToUint32
(
cx
.
GetJSContext
(
)
sum
&
uSum
)
;
ASSERT_EQ
(
uSum
kExpectedKeyedSum
)
<
<
"
The
histogram
is
not
returning
the
expected
sum
for
'
gv_key
'
"
;
RemovePersistenceFile
(
)
;
}
TEST_F
(
TelemetryGeckoViewFixture
TimerHitCountProbe
)
{
AutoJSContextWithGlobal
cx
(
mCleanGlobal
)
;
Unused
<
<
mTelemetry
-
>
ClearScalars
(
)
;
RefPtr
<
DataLoadedObserver
>
loadingFinished
=
new
DataLoadedObserver
(
)
;
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
;
loadingFinished
-
>
WaitForNotification
(
)
;
TelemetryGeckoViewTesting
:
:
TestDispatchPersist
(
)
;
TelemetryGeckoViewTesting
:
:
TestDispatchPersist
(
)
;
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
;
JS
:
:
RootedValue
scalarsSnapshot
(
cx
.
GetJSContext
(
)
)
;
GetScalarsSnapshot
(
false
cx
.
GetJSContext
(
)
&
scalarsSnapshot
)
;
CheckUintScalar
(
"
telemetry
.
persistence_timer_hit_count
"
cx
.
GetJSContext
(
)
scalarsSnapshot
2
)
;
RemovePersistenceFile
(
)
;
}
