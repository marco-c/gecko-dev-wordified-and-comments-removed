#
include
"
TelemetryGeckoViewPersistence
.
h
"
#
include
"
core
/
TelemetryHistogram
.
h
"
#
include
"
core
/
TelemetryScalar
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
JSON
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
SimpleGlobalObject
.
h
"
#
include
"
mozilla
/
ErrorNames
.
h
"
#
include
"
mozilla
/
JSONWriter
.
h
"
#
include
"
mozilla
/
Path
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIOutputStream
.
h
"
#
include
"
nsISafeOutputStream
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsLocalFile
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
prenv
.
h
"
#
include
"
prio
.
h
"
#
include
"
xpcpublic
.
h
"
using
mozilla
:
:
GetErrorName
;
using
mozilla
:
:
MakeScopeExit
;
using
mozilla
:
:
Preferences
;
using
mozilla
:
:
StaticRefPtr
;
using
mozilla
:
:
SystemGroup
;
using
mozilla
:
:
TaskCategory
;
using
mozilla
:
:
dom
:
:
AutoJSAPI
;
using
mozilla
:
:
dom
:
:
SimpleGlobalObject
;
using
PathChar
=
mozilla
:
:
filesystem
:
:
Path
:
:
value_type
;
using
PathCharPtr
=
const
PathChar
*
;
#
ifdef
DEBUG
#
ifdef
MOZ_WIDGET_ANDROID
#
include
<
android
/
log
.
h
>
#
define
ANDROID_LOG
(
fmt
.
.
.
)
\
__android_log_print
(
ANDROID_LOG_DEBUG
"
Telemetry
"
fmt
#
#
__VA_ARGS__
)
#
else
#
define
ANDROID_LOG
(
.
.
.
)
printf_stderr
(
"
\
n
*
*
*
*
TELEMETRY
:
"
__VA_ARGS__
)
#
endif
#
else
#
define
ANDROID_LOG
(
.
.
.
)
#
endif
const
uint32_t
kDefaultPersistenceTimeoutMs
=
60
*
1000
;
const
char16_t
kPersistenceFileName
[
]
=
u
"
gv_measurements
.
json
"
;
const
char
kLoadCompleteTopic
[
]
=
"
internal
-
telemetry
-
geckoview
-
load
-
complete
"
;
nsITimer
*
gPersistenceTimer
;
StaticRefPtr
<
nsIThread
>
gPersistenceThread
;
namespace
{
void
PersistenceThreadPersist
(
)
;
class
StreamingJSONWriter
:
public
mozilla
:
:
JSONWriteFunc
{
public
:
nsresult
Open
(
nsCOMPtr
<
nsIFile
>
aOutFile
)
{
MOZ_ASSERT
(
!
mStream
"
Open
must
not
be
called
twice
"
)
;
nsresult
rv
=
NS_NewSafeLocalFileOutputStream
(
getter_AddRefs
(
mStream
)
aOutFile
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
Close
(
)
{
MOZ_ASSERT
(
mStream
"
Close
must
be
called
on
an
already
opened
stream
"
)
;
nsCOMPtr
<
nsISafeOutputStream
>
safeStream
=
do_QueryInterface
(
mStream
)
;
MOZ_ASSERT
(
safeStream
)
;
return
safeStream
-
>
Finish
(
)
;
}
void
Write
(
const
char
*
aStr
)
override
{
uint32_t
count
;
mozilla
:
:
Unused
<
<
mStream
-
>
Write
(
aStr
strlen
(
aStr
)
&
count
)
;
}
private
:
nsCOMPtr
<
nsIOutputStream
>
mStream
;
}
;
nsresult
GetAndroidDataDir
(
nsTString
<
PathChar
>
&
aOutDir
)
{
const
char
*
dataDir
=
PR_GetEnv
(
"
MOZ_ANDROID_DATA_DIR
"
)
;
if
(
!
dataDir
|
|
!
*
dataDir
)
{
ANDROID_LOG
(
"
GetAndroidDataDir
-
Cannot
find
the
data
directory
in
the
"
"
environment
.
"
)
;
return
NS_ERROR_FAILURE
;
}
aOutDir
.
AssignASCII
(
dataDir
)
;
return
NS_OK
;
}
nsresult
GetPersistenceFile
(
nsCOMPtr
<
nsIFile
>
&
aOutFile
)
{
nsTString
<
PathChar
>
dataDir
;
nsresult
rv
=
GetAndroidDataDir
(
dataDir
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
fileName
;
fileName
.
Assign
(
kPersistenceFileName
)
;
aOutFile
=
new
nsLocalFile
(
dataDir
)
;
aOutFile
-
>
Append
(
fileName
)
;
ANDROID_LOG
(
"
GetPersistenceFile
-
%
s
"
aOutFile
-
>
HumanReadablePath
(
)
.
get
(
)
)
;
return
NS_OK
;
}
nsresult
ReadFromFile
(
const
nsCOMPtr
<
nsIFile
>
&
aFile
nsACString
&
fileContent
)
{
int64_t
fileSize
=
0
;
nsresult
rv
=
aFile
-
>
GetFileSize
(
&
fileSize
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIInputStream
>
inStream
;
rv
=
NS_NewLocalFileInputStream
(
getter_AddRefs
(
inStream
)
aFile
PR_RDONLY
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
auto
scopedStreamClose
=
MakeScopeExit
(
[
inStream
]
{
inStream
-
>
Close
(
)
;
}
)
;
rv
=
NS_ReadInputStreamToString
(
inStream
fileContent
fileSize
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
void
MainThreadArmPersistenceTimer
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ANDROID_LOG
(
"
MainThreadArmPersistenceTimer
"
)
;
if
(
!
gPersistenceTimer
)
{
gPersistenceTimer
=
NS_NewTimer
(
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
)
.
take
(
)
;
if
(
!
gPersistenceTimer
)
{
ANDROID_LOG
(
"
MainThreadArmPersistenceTimer
-
Timer
creation
failed
.
"
)
;
return
;
}
}
nsTimerCallbackFunc
timerCallback
=
[
]
(
nsITimer
*
aTimer
void
*
aClosure
)
{
gPersistenceThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
PersistenceThreadPersist
"
[
]
(
)
-
>
void
{
:
:
PersistenceThreadPersist
(
)
;
}
)
)
;
}
;
uint32_t
timeout
=
Preferences
:
:
GetUint
(
"
toolkit
.
telemetry
.
geckoPersistenceTimeout
"
kDefaultPersistenceTimeoutMs
)
;
gPersistenceTimer
-
>
InitWithNamedFuncCallback
(
timerCallback
nullptr
timeout
nsITimer
:
:
TYPE_ONE_SHOT_LOW_PRIORITY
"
TelemetryGeckoViewPersistence
:
:
Persist
"
)
;
}
void
MainThreadParsePersistedProbes
(
const
nsACString
&
aProbeData
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
"
)
;
JSObject
*
cleanGlobal
=
SimpleGlobalObject
:
:
Create
(
SimpleGlobalObject
:
:
GlobalType
:
:
BindingDetail
)
;
if
(
!
cleanGlobal
)
{
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
-
Failed
to
create
a
JS
global
object
"
)
;
return
;
}
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
cleanGlobal
)
)
)
{
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
-
Failed
to
get
JS
API
"
)
;
return
;
}
JS
:
:
RootedValue
data
(
jsapi
.
cx
(
)
)
;
NS_ConvertUTF8toUTF16
utf16Content
(
aProbeData
)
;
if
(
!
JS_ParseJSON
(
jsapi
.
cx
(
)
utf16Content
.
BeginReading
(
)
utf16Content
.
Length
(
)
&
data
)
)
{
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
-
Failed
to
parse
the
persisted
JSON
"
)
;
return
;
}
JS
:
:
RootedObject
dataObj
(
jsapi
.
cx
(
)
&
data
.
toObject
(
)
)
;
JS
:
:
RootedValue
scalarData
(
jsapi
.
cx
(
)
)
;
if
(
JS_GetProperty
(
jsapi
.
cx
(
)
dataObj
"
scalars
"
&
scalarData
)
)
{
if
(
!
scalarData
.
isObject
(
)
|
|
NS_FAILED
(
TelemetryScalar
:
:
DeserializePersistedScalars
(
jsapi
.
cx
(
)
scalarData
)
)
)
{
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
-
Failed
to
parse
'
scalars
'
.
"
)
;
MOZ_ASSERT
(
!
JS_IsExceptionPending
(
jsapi
.
cx
(
)
)
"
Parsers
must
suppress
exceptions
themselves
"
)
;
}
}
else
{
JS_ClearPendingException
(
jsapi
.
cx
(
)
)
;
}
JS
:
:
RootedValue
keyedScalarData
(
jsapi
.
cx
(
)
)
;
if
(
JS_GetProperty
(
jsapi
.
cx
(
)
dataObj
"
keyedScalars
"
&
keyedScalarData
)
)
{
if
(
!
keyedScalarData
.
isObject
(
)
|
|
NS_FAILED
(
TelemetryScalar
:
:
DeserializePersistedKeyedScalars
(
jsapi
.
cx
(
)
keyedScalarData
)
)
)
{
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
-
Failed
to
parse
'
keyedScalars
'
.
"
)
;
MOZ_ASSERT
(
!
JS_IsExceptionPending
(
jsapi
.
cx
(
)
)
"
Parsers
must
suppress
exceptions
themselves
"
)
;
}
}
else
{
JS_ClearPendingException
(
jsapi
.
cx
(
)
)
;
}
JS
:
:
RootedValue
histogramData
(
jsapi
.
cx
(
)
)
;
if
(
JS_GetProperty
(
jsapi
.
cx
(
)
dataObj
"
histograms
"
&
histogramData
)
)
{
nsresult
rv
=
NS_OK
;
if
(
!
histogramData
.
isObject
(
)
|
|
NS_FAILED
(
rv
=
TelemetryHistogram
:
:
DeserializeHistograms
(
jsapi
.
cx
(
)
histogramData
)
)
)
{
nsAutoCString
errorName
;
GetErrorName
(
rv
errorName
)
;
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
-
Failed
to
parse
'
histograms
'
%
s
.
"
errorName
.
get
(
)
)
;
MOZ_ASSERT
(
!
JS_IsExceptionPending
(
jsapi
.
cx
(
)
)
"
Parsers
must
suppress
exceptions
themselves
"
)
;
}
}
else
{
JS_ClearPendingException
(
jsapi
.
cx
(
)
)
;
}
JS
:
:
RootedValue
keyedHistogramData
(
jsapi
.
cx
(
)
)
;
if
(
JS_GetProperty
(
jsapi
.
cx
(
)
dataObj
"
keyedHistograms
"
&
keyedHistogramData
)
)
{
nsresult
rv
=
NS_OK
;
if
(
!
keyedHistogramData
.
isObject
(
)
|
|
NS_FAILED
(
rv
=
TelemetryHistogram
:
:
DeserializeKeyedHistograms
(
jsapi
.
cx
(
)
keyedHistogramData
)
)
)
{
nsAutoCString
errorName
;
GetErrorName
(
rv
errorName
)
;
ANDROID_LOG
(
"
MainThreadParsePersistedProbes
-
Failed
to
parse
'
keyedHistograms
'
"
"
%
s
.
"
errorName
.
get
(
)
)
;
MOZ_ASSERT
(
!
JS_IsExceptionPending
(
jsapi
.
cx
(
)
)
"
Parsers
must
suppress
exceptions
themselves
"
)
;
}
}
else
{
JS_ClearPendingException
(
jsapi
.
cx
(
)
)
;
}
}
void
PersistenceThreadPersist
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
We
must
only
persist
from
the
parent
process
.
"
)
;
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
"
This
function
must
be
called
off
the
main
thread
.
"
)
;
ANDROID_LOG
(
"
PersistenceThreadPersist
"
)
;
auto
scopedArmTimer
=
MakeScopeExit
(
[
&
]
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
MainThreadArmPersistenceTimer
"
[
]
(
)
-
>
void
{
MainThreadArmPersistenceTimer
(
)
;
}
)
)
;
}
)
;
TelemetryScalar
:
:
Add
(
mozilla
:
:
Telemetry
:
:
ScalarID
:
:
TELEMETRY_PERSISTENCE_TIMER_HIT_COUNT
1
)
;
nsCOMPtr
<
nsIFile
>
persistenceFile
;
if
(
NS_FAILED
(
GetPersistenceFile
(
persistenceFile
)
)
)
{
ANDROID_LOG
(
"
PersistenceThreadPersist
-
Failed
to
get
the
persistence
file
.
"
)
;
return
;
}
mozilla
:
:
UniquePtr
<
StreamingJSONWriter
>
jsonWriter
=
mozilla
:
:
MakeUnique
<
StreamingJSONWriter
>
(
)
;
if
(
!
jsonWriter
|
|
NS_FAILED
(
jsonWriter
-
>
Open
(
persistenceFile
)
)
)
{
ANDROID_LOG
(
"
PersistenceThreadPersist
-
There
was
an
error
opening
the
persistence
"
"
file
.
"
)
;
return
;
}
mozilla
:
:
JSONWriter
w
(
std
:
:
move
(
jsonWriter
)
)
;
w
.
Start
(
)
;
w
.
StartObjectProperty
(
"
scalars
"
)
;
if
(
NS_FAILED
(
TelemetryScalar
:
:
SerializeScalars
(
w
)
)
)
{
ANDROID_LOG
(
"
Persist
-
Failed
to
persist
scalars
.
"
)
;
}
w
.
EndObject
(
)
;
w
.
StartObjectProperty
(
"
keyedScalars
"
)
;
if
(
NS_FAILED
(
TelemetryScalar
:
:
SerializeKeyedScalars
(
w
)
)
)
{
ANDROID_LOG
(
"
Persist
-
Failed
to
persist
keyed
scalars
.
"
)
;
}
w
.
EndObject
(
)
;
w
.
StartObjectProperty
(
"
histograms
"
)
;
if
(
NS_FAILED
(
TelemetryHistogram
:
:
SerializeHistograms
(
w
)
)
)
{
ANDROID_LOG
(
"
Persist
-
Failed
to
persist
histograms
.
"
)
;
}
w
.
EndObject
(
)
;
w
.
StartObjectProperty
(
"
keyedHistograms
"
)
;
if
(
NS_FAILED
(
TelemetryHistogram
:
:
SerializeKeyedHistograms
(
w
)
)
)
{
ANDROID_LOG
(
"
Persist
-
Failed
to
persist
keyed
histograms
.
"
)
;
}
w
.
EndObject
(
)
;
w
.
End
(
)
;
nsresult
rv
=
static_cast
<
StreamingJSONWriter
*
>
(
w
.
WriteFunc
(
)
)
-
>
Close
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
ANDROID_LOG
(
"
PersistenceThreadPersist
-
There
was
an
error
writing
to
the
"
"
persistence
file
.
"
)
;
return
;
}
}
void
PersistenceThreadLoadData
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
We
must
only
persist
from
the
parent
process
.
"
)
;
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
"
We
must
perform
I
/
O
off
the
main
thread
.
"
)
;
ANDROID_LOG
(
"
PersistenceThreadLoadData
"
)
;
nsAutoCString
fileContent
;
auto
scopedArmTimer
=
MakeScopeExit
(
[
&
]
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
MainThreadArmPersistenceTimer
"
[
fileContent
]
(
)
-
>
void
{
if
(
!
fileContent
.
IsEmpty
(
)
)
{
MainThreadParsePersistedProbes
(
fileContent
)
;
}
TelemetryScalar
:
:
ApplyPendingOperations
(
)
;
MainThreadArmPersistenceTimer
(
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
nullptr
kLoadCompleteTopic
nullptr
)
;
}
}
)
)
;
}
)
;
nsCOMPtr
<
nsIFile
>
persistenceFile
;
if
(
NS_FAILED
(
GetPersistenceFile
(
persistenceFile
)
)
|
|
NS_FAILED
(
ReadFromFile
(
persistenceFile
fileContent
)
)
)
{
ANDROID_LOG
(
"
PersistenceThreadLoadData
-
Failed
to
load
cache
file
at
%
s
"
persistenceFile
-
>
HumanReadablePath
(
)
.
get
(
)
)
;
return
;
}
}
}
namespace
TelemetryGeckoViewTesting
{
void
TestDispatchPersist
(
)
{
gPersistenceThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
Persist
"
[
]
(
)
-
>
void
{
:
:
PersistenceThreadPersist
(
)
;
}
)
)
;
}
}
void
TelemetryGeckoViewPersistence
:
:
InitPersistence
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
gPersistenceThread
)
{
ANDROID_LOG
(
"
Init
must
only
be
called
once
.
"
)
;
return
;
}
if
(
!
XRE_IsParentProcess
(
)
)
{
ANDROID_LOG
(
"
InitPersistence
-
Bailing
out
on
child
process
.
"
)
;
return
;
}
ANDROID_LOG
(
"
InitPersistence
"
)
;
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
"
TelemetryGVIO
"
getter_AddRefs
(
thread
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
ANDROID_LOG
(
"
InitPersistence
-
Failed
to
instantiate
the
worker
thread
.
"
)
;
return
;
}
gPersistenceThread
=
thread
.
forget
(
)
;
TelemetryScalar
:
:
DeserializationStarted
(
)
;
gPersistenceThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
PersistenceThreadLoadData
"
&
PersistenceThreadLoadData
)
)
;
}
void
TelemetryGeckoViewPersistence
:
:
DeInitPersistence
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
XRE_IsParentProcess
(
)
)
{
ANDROID_LOG
(
"
DeInitPersistence
-
Bailing
out
.
"
)
;
return
;
}
ANDROID_LOG
(
"
DeInitPersistence
"
)
;
if
(
gPersistenceThread
)
{
gPersistenceThread
-
>
Shutdown
(
)
;
gPersistenceThread
=
nullptr
;
}
if
(
gPersistenceTimer
)
{
MOZ_ALWAYS_SUCCEEDS
(
gPersistenceTimer
-
>
Cancel
(
)
)
;
NS_RELEASE
(
gPersistenceTimer
)
;
}
}
void
TelemetryGeckoViewPersistence
:
:
ClearPersistenceData
(
)
{
MOZ_ASSERT
(
gPersistenceThread
)
;
ANDROID_LOG
(
"
ClearPersistenceData
"
)
;
gPersistenceThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
ClearPersistedData
"
[
]
(
)
-
>
void
{
nsCOMPtr
<
nsIFile
>
persistenceFile
;
if
(
NS_FAILED
(
GetPersistenceFile
(
persistenceFile
)
)
|
|
NS_FAILED
(
persistenceFile
-
>
Remove
(
false
)
)
)
{
ANDROID_LOG
(
"
ClearPersistenceData
-
Failed
to
remove
the
persistence
file
.
"
)
;
return
;
}
}
)
)
;
}
