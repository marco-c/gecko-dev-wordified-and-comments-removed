"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
GeckoViewUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
TelemetryUtils
:
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
}
)
;
GeckoViewUtils
.
initLogging
(
"
GeckoView
.
TelemetryController
"
this
)
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewTelemetryController
"
]
;
const
LOAD_COMPLETE_TOPIC
=
"
internal
-
telemetry
-
geckoview
-
load
-
complete
"
;
const
GeckoViewTelemetryController
=
{
setup
(
)
{
TelemetryUtils
.
setTelemetryRecordingFlags
(
)
;
debug
setup
-
canRecordPrereleaseData
{
Services
.
telemetry
.
canRecordPrereleaseData
}
canRecordReleaseData
{
Services
.
telemetry
.
canRecordReleaseData
}
;
if
(
GeckoViewUtils
.
IS_PARENT_PROCESS
)
{
this
.
_loadComplete
=
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
observer
(
aSubject
aTopic
aData
)
{
if
(
aTopic
!
=
=
LOAD_COMPLETE_TOPIC
)
{
warn
Received
unexpected
topic
{
aTopic
}
;
return
;
}
debug
observed
{
aTopic
}
-
ready
to
handle
telemetry
requests
;
Services
.
obs
.
removeObserver
(
observer
LOAD_COMPLETE_TOPIC
)
;
resolve
(
)
;
}
LOAD_COMPLETE_TOPIC
)
;
}
)
;
try
{
EventDispatcher
.
instance
.
registerListener
(
this
[
"
GeckoView
:
TelemetrySnapshots
"
]
)
;
}
catch
(
e
)
{
warn
Failed
registering
GeckoView
:
TelemetrySnapshots
listener
:
{
e
}
;
}
}
}
onEvent
(
aEvent
aData
aCallback
)
{
debug
onEvent
:
aEvent
=
{
aEvent
}
aData
=
{
aData
}
;
if
(
aEvent
!
=
=
"
GeckoView
:
TelemetrySnapshots
"
)
{
warn
Received
unexpected
event
{
aEvent
}
;
return
;
}
this
.
_loadComplete
.
then
(
(
)
=
>
this
.
retrieveSnapshots
(
aData
.
clear
aCallback
)
)
;
}
retrieveSnapshots
(
aClear
aCallback
)
{
debug
retrieveSnapshots
;
const
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
;
const
keyedHistograms
=
Services
.
telemetry
.
getSnapshotForKeyedHistograms
(
"
main
"
false
)
;
const
scalars
=
Services
.
telemetry
.
getSnapshotForScalars
(
"
main
"
false
)
;
const
keyedScalars
=
Services
.
telemetry
.
getSnapshotForKeyedScalars
(
"
main
"
false
)
;
const
snapshots
=
{
histograms
keyedHistograms
scalars
keyedScalars
}
;
if
(
!
snapshots
.
histograms
|
|
!
snapshots
.
keyedHistograms
|
|
!
snapshots
.
scalars
|
|
!
snapshots
.
keyedScalars
)
{
aCallback
.
onError
(
Failed
retrieving
snapshots
!
)
;
return
;
}
let
processSnapshots
=
{
}
;
for
(
let
[
name
snapshot
]
of
Object
.
entries
(
snapshots
)
)
{
for
(
let
[
processName
processSnapshot
]
of
Object
.
entries
(
snapshot
)
)
{
if
(
!
(
processName
in
processSnapshots
)
)
{
processSnapshots
[
processName
]
=
{
}
;
}
processSnapshots
[
processName
]
[
name
]
=
processSnapshot
;
}
}
if
(
aClear
)
{
Services
.
telemetry
.
clearProbes
(
)
;
}
aCallback
.
onSuccess
(
processSnapshots
)
;
}
}
;
