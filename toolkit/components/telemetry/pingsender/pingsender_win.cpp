#
include
<
string
>
#
include
<
windows
.
h
>
#
include
<
wininet
.
h
>
namespace
PingSender
{
using
std
:
:
string
;
class
ScopedHInternet
{
public
:
explicit
ScopedHInternet
(
HINTERNET
handle
)
:
mHandle
(
handle
)
{
}
~
ScopedHInternet
(
)
{
if
(
mHandle
)
{
InternetCloseHandle
(
mHandle
)
;
}
}
bool
empty
(
)
{
return
(
mHandle
=
=
nullptr
)
;
}
HINTERNET
get
(
)
{
return
mHandle
;
}
private
:
HINTERNET
mHandle
;
}
;
const
size_t
kUrlComponentsSchemeLength
=
256
;
const
size_t
kUrlComponentsHostLength
=
256
;
const
size_t
kUrlComponentsPathLength
=
256
;
bool
Post
(
const
string
&
url
const
string
&
payload
)
{
char
scheme
[
kUrlComponentsSchemeLength
]
;
char
host
[
kUrlComponentsHostLength
]
;
char
path
[
kUrlComponentsPathLength
]
;
URL_COMPONENTS
components
=
{
}
;
components
.
dwStructSize
=
sizeof
(
components
)
;
components
.
lpszScheme
=
scheme
;
components
.
dwSchemeLength
=
kUrlComponentsSchemeLength
;
components
.
lpszHostName
=
host
;
components
.
dwHostNameLength
=
kUrlComponentsHostLength
;
components
.
lpszUrlPath
=
path
;
components
.
dwUrlPathLength
=
kUrlComponentsPathLength
;
if
(
!
InternetCrackUrl
(
url
.
c_str
(
)
url
.
size
(
)
0
&
components
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
separate
the
URL
components
\
n
"
)
;
return
false
;
}
ScopedHInternet
internet
(
InternetOpen
(
kUserAgent
INTERNET_OPEN_TYPE_PRECONFIG
NULL
NULL
0
)
)
;
if
(
internet
.
empty
(
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
open
wininet
internet
handle
\
n
"
)
;
return
false
;
}
ScopedHInternet
connection
(
InternetConnect
(
internet
.
get
(
)
host
components
.
nPort
NULL
NULL
INTERNET_SERVICE_HTTP
0
NULL
)
)
;
if
(
connection
.
empty
(
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
connect
\
n
"
)
;
return
false
;
}
DWORD
flags
=
(
(
strcmp
(
scheme
"
https
"
)
=
=
0
)
?
INTERNET_FLAG_SECURE
:
0
)
|
INTERNET_FLAG_NO_COOKIES
;
ScopedHInternet
request
(
HttpOpenRequest
(
connection
.
get
(
)
"
POST
"
path
NULL
NULL
NULL
flags
NULL
)
)
;
if
(
request
.
empty
(
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
open
HTTP
POST
request
\
n
"
)
;
return
false
;
}
bool
rv
=
HttpSendRequest
(
request
.
get
(
)
nullptr
0
(
LPVOID
)
payload
.
c_str
(
)
payload
.
size
(
)
)
;
if
(
!
rv
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
execute
HTTP
POST
request
\
n
"
)
;
}
return
rv
;
}
}
