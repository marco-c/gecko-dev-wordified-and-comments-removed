#
include
<
cerrno
>
#
include
<
cstring
>
#
include
<
string
>
#
include
<
dlfcn
.
h
>
#
include
<
unistd
.
h
>
#
include
"
third_party
/
curl
/
curl
.
h
"
namespace
PingSender
{
using
std
:
:
string
;
class
CurlWrapper
{
public
:
CurlWrapper
(
)
;
~
CurlWrapper
(
)
;
bool
Init
(
)
;
bool
Post
(
const
string
&
url
const
string
&
payload
)
;
CURL
*
(
*
easy_init
)
(
void
)
;
CURLcode
(
*
easy_setopt
)
(
CURL
*
CURLoption
.
.
.
)
;
CURLcode
(
*
easy_perform
)
(
CURL
*
)
;
CURLcode
(
*
easy_getinfo
)
(
CURL
*
CURLINFO
.
.
.
)
;
const
char
*
(
*
easy_strerror
)
(
CURLcode
)
;
void
(
*
easy_cleanup
)
(
CURL
*
)
;
private
:
void
*
mLib
;
void
*
mCurl
;
}
;
CurlWrapper
:
:
CurlWrapper
(
)
:
easy_init
(
nullptr
)
easy_setopt
(
nullptr
)
easy_perform
(
nullptr
)
easy_getinfo
(
nullptr
)
easy_strerror
(
nullptr
)
easy_cleanup
(
nullptr
)
mLib
(
nullptr
)
mCurl
(
nullptr
)
{
}
CurlWrapper
:
:
~
CurlWrapper
(
)
{
if
(
mLib
)
{
if
(
mCurl
&
&
easy_cleanup
)
{
easy_cleanup
(
mCurl
)
;
}
dlclose
(
mLib
)
;
}
}
bool
CurlWrapper
:
:
Init
(
)
{
const
char
*
libcurlNames
[
]
=
{
"
libcurl
.
so
"
"
libcurl
.
so
.
4
"
"
libcurl
-
gnutls
.
so
.
4
"
"
libcurl
.
so
.
3
"
#
ifndef
HAVE_64BIT_BUILD
"
/
usr
/
lib32
/
libcurl
.
so
"
"
/
usr
/
lib32
/
libcurl
.
so
.
4
"
"
/
usr
/
lib32
/
libcurl
-
gnutls
.
so
.
4
"
"
/
usr
/
lib32
/
libcurl
.
so
.
3
"
#
endif
"
libcurl
.
dylib
"
"
libcurl
.
4
.
dylib
"
"
libcurl
.
3
.
dylib
"
}
;
for
(
const
char
*
libname
:
libcurlNames
)
{
mLib
=
dlopen
(
libname
RTLD_NOW
)
;
if
(
mLib
)
{
break
;
}
}
if
(
!
mLib
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
find
libcurl
\
n
"
)
;
return
false
;
}
*
(
void
*
*
)
(
&
easy_init
)
=
dlsym
(
mLib
"
curl_easy_init
"
)
;
*
(
void
*
*
)
(
&
easy_setopt
)
=
dlsym
(
mLib
"
curl_easy_setopt
"
)
;
*
(
void
*
*
)
(
&
easy_perform
)
=
dlsym
(
mLib
"
curl_easy_perform
"
)
;
*
(
void
*
*
)
(
&
easy_getinfo
)
=
dlsym
(
mLib
"
curl_easy_getinfo
"
)
;
*
(
void
*
*
)
(
&
easy_strerror
)
=
dlsym
(
mLib
"
curl_easy_strerror
"
)
;
*
(
void
*
*
)
(
&
easy_cleanup
)
=
dlsym
(
mLib
"
curl_easy_cleanup
"
)
;
if
(
!
easy_init
|
|
!
easy_setopt
|
|
!
easy_perform
|
|
!
easy_getinfo
|
|
!
easy_strerror
|
|
!
easy_cleanup
)
{
PINGSENDER_LOG
(
"
ERROR
:
libcurl
is
missing
one
of
the
required
symbols
\
n
"
)
;
return
false
;
}
mCurl
=
easy_init
(
)
;
if
(
!
mCurl
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
initialize
libcurl
\
n
"
)
;
return
false
;
}
return
true
;
}
bool
CurlWrapper
:
:
Post
(
const
string
&
url
const
string
&
payload
)
{
easy_setopt
(
mCurl
CURLOPT_URL
url
.
c_str
(
)
)
;
easy_setopt
(
mCurl
CURLOPT_USERAGENT
kUserAgent
)
;
easy_setopt
(
mCurl
CURLOPT_POSTFIELDSIZE
payload
.
length
(
)
)
;
easy_setopt
(
mCurl
CURLOPT_POSTFIELDS
payload
.
c_str
(
)
)
;
easy_setopt
(
mCurl
CURLOPT_FAILONERROR
1
)
;
CURLcode
err
=
easy_perform
(
mCurl
)
;
if
(
err
!
=
CURLE_OK
)
{
PINGSENDER_LOG
(
"
ERROR
:
Failed
to
send
HTTP
request
%
s
\
n
"
easy_strerror
(
err
)
)
;
return
false
;
}
return
true
;
}
bool
Post
(
const
string
&
url
const
string
&
payload
)
{
CurlWrapper
curl
;
if
(
!
curl
.
Init
(
)
)
{
return
false
;
}
return
curl
.
Post
(
url
payload
)
;
}
}
