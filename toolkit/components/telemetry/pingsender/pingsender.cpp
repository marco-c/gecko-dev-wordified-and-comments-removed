#
include
<
cstdlib
>
#
include
<
ctime
>
#
include
<
fstream
>
#
include
<
iomanip
>
#
include
<
string
>
#
include
<
zlib
.
h
>
#
include
"
pingsender
.
h
"
using
std
:
:
ifstream
;
using
std
:
:
ios
;
using
std
:
:
string
;
namespace
PingSender
{
const
char
*
kUserAgent
=
"
pingsender
/
1
.
0
"
;
const
char
*
kCustomVersionHeader
=
"
X
-
PingSender
-
Version
:
1
.
0
"
;
const
char
*
kContentEncodingHeader
=
"
Content
-
Encoding
:
gzip
"
;
std
:
:
string
GenerateDateHeader
(
)
{
char
buffer
[
128
]
;
std
:
:
time_t
t
=
std
:
:
time
(
nullptr
)
;
strftime
(
buffer
sizeof
(
buffer
)
"
Date
:
%
a
%
d
%
b
%
Y
%
H
:
%
M
:
%
S
GMT
"
std
:
:
gmtime
(
&
t
)
)
;
return
string
(
buffer
)
;
}
static
std
:
:
string
ReadPing
(
const
string
&
aPingPath
)
{
string
ping
;
ifstream
file
;
file
.
open
(
aPingPath
.
c_str
(
)
ios
:
:
in
|
ios
:
:
binary
)
;
if
(
!
file
.
is_open
(
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
open
ping
file
\
n
"
)
;
return
"
"
;
}
do
{
char
buff
[
4096
]
;
file
.
read
(
buff
sizeof
(
buff
)
)
;
if
(
file
.
bad
(
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
read
ping
contents
\
n
"
)
;
return
"
"
;
}
ping
.
append
(
buff
file
.
gcount
(
)
)
;
}
while
(
!
file
.
eof
(
)
)
;
return
ping
;
}
std
:
:
string
GzipCompress
(
const
std
:
:
string
&
rawData
)
{
z_stream
deflater
=
{
}
;
const
int32_t
kWindowSize
=
MAX_WBITS
+
16
;
if
(
deflateInit2
(
&
deflater
Z_DEFAULT_COMPRESSION
Z_DEFLATED
kWindowSize
8
Z_DEFAULT_STRATEGY
)
!
=
Z_OK
)
{
PINGSENDER_LOG
(
"
ERROR
:
Could
not
initialize
zlib
deflating
\
n
"
)
;
return
"
"
;
}
const
uint32_t
kBufferSize
=
4
*
1024
-
1
;
unsigned
char
outputBuffer
[
kBufferSize
]
;
deflater
.
next_out
=
outputBuffer
;
deflater
.
avail_out
=
kBufferSize
;
deflater
.
avail_in
=
rawData
.
size
(
)
;
deflater
.
next_in
=
reinterpret_cast
<
Bytef
*
>
(
const_cast
<
char
*
>
(
rawData
.
c_str
(
)
)
)
;
std
:
:
string
gzipData
;
int
err
=
Z_OK
;
while
(
deflater
.
avail_in
>
0
&
&
err
=
=
Z_OK
)
{
err
=
deflate
(
&
deflater
Z_NO_FLUSH
)
;
while
(
deflater
.
avail_out
=
=
0
)
{
size_t
bytesToWrite
=
kBufferSize
-
deflater
.
avail_out
;
if
(
bytesToWrite
=
=
0
)
{
break
;
}
gzipData
.
append
(
reinterpret_cast
<
const
char
*
>
(
outputBuffer
)
bytesToWrite
)
;
deflater
.
next_out
=
outputBuffer
;
deflater
.
avail_out
=
kBufferSize
;
err
=
deflate
(
&
deflater
Z_NO_FLUSH
)
;
}
}
while
(
err
=
=
Z_OK
)
{
err
=
deflate
(
&
deflater
Z_FINISH
)
;
size_t
bytesToWrite
=
kBufferSize
-
deflater
.
avail_out
;
if
(
bytesToWrite
=
=
0
)
{
break
;
}
gzipData
.
append
(
reinterpret_cast
<
const
char
*
>
(
outputBuffer
)
bytesToWrite
)
;
deflater
.
next_out
=
outputBuffer
;
deflater
.
avail_out
=
kBufferSize
;
}
deflateEnd
(
&
deflater
)
;
if
(
err
!
=
Z_STREAM_END
)
{
PINGSENDER_LOG
(
"
ERROR
:
There
was
a
problem
while
compressing
the
ping
\
n
"
)
;
return
"
"
;
}
return
gzipData
;
}
}
using
namespace
PingSender
;
int
main
(
int
argc
char
*
argv
[
]
)
{
string
url
;
string
pingPath
;
if
(
argc
=
=
3
)
{
url
=
argv
[
1
]
;
pingPath
=
argv
[
2
]
;
}
else
{
PINGSENDER_LOG
(
"
Usage
:
pingsender
URL
PATH
\
n
"
"
Send
the
payload
stored
in
PATH
to
the
specified
URL
using
"
"
an
HTTP
POST
message
\
n
"
"
then
delete
the
file
after
a
successful
send
.
\
n
"
)
;
return
EXIT_FAILURE
;
}
string
ping
(
ReadPing
(
pingPath
)
)
;
if
(
ping
.
empty
(
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Ping
payload
is
empty
\
n
"
)
;
return
EXIT_FAILURE
;
}
string
gzipPing
(
GzipCompress
(
ping
)
)
;
if
(
gzipPing
.
empty
(
)
)
{
PINGSENDER_LOG
(
"
ERROR
:
Ping
compression
failed
\
n
"
)
;
return
EXIT_FAILURE
;
}
if
(
!
Post
(
url
gzipPing
)
)
{
return
EXIT_FAILURE
;
}
if
(
!
pingPath
.
empty
(
)
&
&
std
:
:
remove
(
pingPath
.
c_str
(
)
)
)
{
return
EXIT_FAILURE
;
}
return
EXIT_SUCCESS
;
}
