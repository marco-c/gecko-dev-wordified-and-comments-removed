"
use
strict
"
;
add_setup
(
clickTestSetup
)
;
async
function
runTest
(
{
mode
detectOnly
=
false
openPageOptions
=
{
}
}
)
{
if
(
mode
=
=
null
)
{
throw
new
Error
(
"
Invalid
cookie
banner
service
mode
.
"
)
;
}
let
initFn
=
(
)
=
>
{
if
(
Services
.
cookieBanners
.
isEnabled
)
{
insertTestClickRules
(
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
}
}
;
let
shouldHandleBanner
=
mode
=
=
Ci
.
nsICookieBannerService
.
MODE_REJECT
&
&
!
detectOnly
;
let
expectActorEnabled
=
mode
!
=
Ci
.
nsICookieBannerService
.
MODE_DISABLED
;
let
testURL
=
openPageOptions
.
testURL
|
|
TEST_PAGE_A
;
let
triggerFn
=
async
(
)
=
>
{
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
visible
:
!
shouldHandleBanner
expected
:
shouldHandleBanner
?
"
OptOut
"
:
"
NoClick
"
keepTabOpen
:
true
expectActorEnabled
.
.
.
openPageOptions
}
)
;
}
;
await
runEventTest
(
{
mode
detectOnly
initFn
triggerFn
testURL
}
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
add_task
(
async
function
test_events_mode_reject
(
)
{
await
runTest
(
{
mode
:
Ci
.
nsICookieBannerService
.
MODE_REJECT
}
)
;
}
)
;
add_task
(
async
function
test_events_mode_detect_only
(
)
{
await
runTest
(
{
mode
:
Ci
.
nsICookieBannerService
.
MODE_REJECT
detectOnly
:
true
}
)
;
await
runTest
(
{
mode
:
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
detectOnly
:
true
}
)
;
}
)
;
add_task
(
async
function
test_events_mode_detect_only_opt_in_rule
(
)
{
await
runTest
(
{
mode
:
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
detectOnly
:
true
openPageOptions
:
{
domain
:
TEST_DOMAIN_B
testURL
:
TEST_PAGE_B
shouldHandleBanner
:
true
expected
:
"
NoClick
"
}
}
)
;
}
)
;
add_task
(
async
function
test_events_mode_disabled
(
)
{
await
runTest
(
{
mode
:
Ci
.
nsICookieBannerService
.
MODE_DISABLED
}
)
;
}
)
;
