"
use
strict
"
;
const
{
SiteDataTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
SiteDataTestUtils
.
sys
.
mjs
"
)
;
async
function
waitForCookieBannerHandledConsoleMsg
(
)
{
let
msg
;
let
checkFn
=
msg
=
>
msg
&
&
msg
.
match
(
/
handled
a
cookie
banner
on
behalf
of
the
user
.
/
)
;
await
new
Promise
(
resolve
=
>
{
SpecialPowers
.
registerConsoleListener
(
consoleMsg
=
>
{
msg
=
consoleMsg
.
message
;
if
(
checkFn
(
msg
)
)
{
resolve
(
)
;
}
}
)
;
}
)
;
ok
(
checkFn
(
msg
)
"
Observed
cookie
banner
handled
console
message
.
"
)
;
}
add_setup
(
clickTestSetup
)
;
add_task
(
async
function
test_banner_clicking_log_web_console
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
]
]
}
)
;
insertTestClickRules
(
)
;
let
consoleMsgPromise
=
waitForCookieBannerHandledConsoleMsg
(
)
;
info
(
"
Handle
the
banner
via
click
and
wait
for
console
message
to
appear
.
"
)
;
await
openPageAndVerify
(
{
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
consoleMsgPromise
;
}
)
;
add_task
(
async
function
test_cookie_injection_log_web_console
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
]
[
"
cookiebanners
.
cookieInjector
.
enabled
"
true
]
]
}
)
;
insertTestCookieRules
(
)
;
let
consoleMsgPromise
=
waitForCookieBannerHandledConsoleMsg
(
)
;
info
(
"
Handle
the
banner
via
cookie
injection
and
wait
for
console
message
to
appear
.
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_ORIGIN_A
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
consoleMsgPromise
;
await
SiteDataTestUtils
.
clear
(
)
;
}
)
;
