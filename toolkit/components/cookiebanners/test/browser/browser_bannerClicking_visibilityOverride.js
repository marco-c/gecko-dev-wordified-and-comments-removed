"
use
strict
"
;
const
TEST_PAGE
=
TEST_ORIGIN_A
+
TEST_PATH
+
"
file_banner_invisible
.
html
"
;
add_setup
(
clickTestSetup
)
;
function
insertVisibilityTestRules
(
skipPresenceVisibilityCheck
)
{
info
(
"
Clearing
existing
rules
"
)
;
Services
.
cookieBanners
.
resetRules
(
false
)
;
info
(
"
Inserting
test
rules
.
"
+
JSON
.
stringify
(
{
skipPresenceVisibilityCheck
}
)
)
;
info
(
"
Add
opt
-
out
click
rule
for
DOMAIN_A
.
"
)
;
let
ruleA
=
Cc
[
"
mozilla
.
org
/
cookie
-
banner
-
rule
;
1
"
]
.
createInstance
(
Ci
.
nsICookieBannerRule
)
;
ruleA
.
id
=
genUUID
(
)
;
ruleA
.
domain
=
TEST_DOMAIN_A
;
ruleA
.
addClickRule
(
"
div
#
banner
"
skipPresenceVisibilityCheck
null
"
button
#
optOut
"
"
button
#
optIn
"
)
;
Services
.
cookieBanners
.
insertRule
(
ruleA
)
;
}
add_task
(
async
function
test_clicking_with_delayed_banner
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
for
(
let
skipPresenceVisibilityCheck
of
[
false
true
]
)
{
insertVisibilityTestRules
(
skipPresenceVisibilityCheck
)
;
await
testClickResultTelemetry
(
{
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE
visible
:
false
expected
:
skipPresenceVisibilityCheck
?
"
OptOut
"
:
"
NoClick
"
}
)
;
let
expectedTelemetry
;
if
(
skipPresenceVisibilityCheck
)
{
expectedTelemetry
=
{
success
:
1
success_dom_content_loaded
:
1
}
;
}
else
{
expectedTelemetry
=
{
fail
:
1
fail_banner_not_visible
:
1
}
;
}
await
testClickResultTelemetry
(
expectedTelemetry
)
;
}
}
)
;
