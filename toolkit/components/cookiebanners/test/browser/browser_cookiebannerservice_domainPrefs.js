"
use
strict
"
;
add_setup
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
cookiebanners
.
service
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
)
;
if
(
Services
.
prefs
.
getIntPref
(
"
cookiebanners
.
service
.
mode
"
)
!
=
Ci
.
nsICookieBannerService
.
MODE_DISABLED
|
|
Services
.
prefs
.
getIntPref
(
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
)
!
=
Ci
.
nsICookieBannerService
.
MODE_DISABLED
)
{
Services
.
cookieBanners
.
resetRules
(
true
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_domain_preference
(
)
{
info
(
"
Enabling
cookie
banner
service
with
MODE_REJECT
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
let
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
false
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
There
should
be
no
per
site
preference
at
the
beginning
.
"
)
;
Services
.
cookieBanners
.
setDomainPref
(
uri
Ci
.
nsICookieBannerService
.
MODE_REJECT
false
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
false
)
Ci
.
nsICookieBannerService
.
MODE_REJECT
"
Can
get
site
preference
for
example
.
com
with
the
correct
value
.
"
)
;
let
uriHttps
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uriHttps
false
)
Ci
.
nsICookieBannerService
.
MODE_REJECT
"
Can
get
site
preference
for
example
.
com
in
secure
context
.
"
)
;
let
uriOther
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uriOther
false
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
There
should
be
no
domain
preference
for
example
.
org
.
"
)
;
Services
.
cookieBanners
.
setDomainPref
(
uriOther
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
false
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uriOther
false
)
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
"
Can
get
domain
preference
for
example
.
org
with
the
correct
value
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
false
)
Ci
.
nsICookieBannerService
.
MODE_REJECT
"
Can
get
site
preference
for
example
.
com
"
)
;
Services
.
cookieBanners
.
setDomainPrefAndPersistInPrivateBrowsing
(
uri
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
"
Can
get
site
preference
for
example
.
com
"
)
;
Services
.
cookieBanners
.
removeDomainPref
(
uri
false
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
false
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
There
should
be
no
site
preference
for
example
.
com
.
"
)
;
Services
.
cookieBanners
.
removeAllDomainPrefs
(
false
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
false
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
There
should
be
no
site
preference
for
example
.
com
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uriOther
false
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
There
should
be
no
site
preference
for
example
.
org
.
"
)
;
}
)
;
add_task
(
async
function
test_domain_preference_dont_override_disable_pref
(
)
{
info
(
"
Enabling
cookie
banner
service
with
MODE_REJECT
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
info
(
"
Adding
a
domain
preference
for
example
.
com
"
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
Services
.
cookieBanners
.
setDomainPref
(
uri
Ci
.
nsICookieBannerService
.
MODE_REJECT
false
)
;
info
(
"
Disabling
the
cookie
banner
service
.
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_DISABLED
]
[
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
Ci
.
nsICookieBannerService
.
MODE_DISABLED
]
]
}
)
;
info
(
"
Verifying
if
the
cookie
banner
service
is
disabled
.
"
)
;
Assert
.
throws
(
(
)
=
>
{
Services
.
cookieBanners
.
getDomainPref
(
uri
false
)
;
}
/
NS_ERROR_NOT_AVAILABLE
/
"
Should
have
thrown
NS_ERROR_NOT_AVAILABLE
for
getDomainPref
.
"
)
;
info
(
"
Enable
the
service
again
in
order
to
clear
the
domain
prefs
.
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
Services
.
cookieBanners
.
removeAllDomainPrefs
(
false
)
;
}
)
;
add_task
(
async
function
test_domain_preference_cleared_PBM_ends
(
)
{
info
(
"
Enabling
cookie
banner
service
with
MODE_REJECT
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
info
(
"
Adding
a
domain
preference
for
example
.
com
in
PBM
"
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
info
(
"
Open
a
private
browsing
window
.
"
)
;
let
PBMWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
Services
.
cookieBanners
.
setDomainPref
(
uri
Ci
.
nsICookieBannerService
.
MODE_DISABLED
true
)
;
info
(
"
Verifying
if
the
cookie
banner
domain
pref
is
set
for
PBM
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_DISABLED
"
The
domain
pref
is
properly
set
for
PBM
.
"
)
;
info
(
"
Trigger
an
ending
of
a
private
browsing
window
session
"
)
;
let
PBMSessionEndsObserved
=
TestUtils
.
topicObserved
(
"
last
-
pb
-
context
-
exited
"
)
;
await
BrowserTestUtils
.
closeWindow
(
PBMWin
)
;
await
PBMSessionEndsObserved
;
info
(
"
Verify
if
the
private
domain
pref
is
cleared
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
The
domain
pref
is
properly
set
for
PBM
.
"
)
;
}
)
;
add_task
(
async
function
test_persistent_domain_preference_remain_PBM_ends
(
)
{
info
(
"
Enabling
cookie
banner
service
with
MODE_REJECT
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
info
(
"
Adding
a
domain
preference
for
example
.
com
in
PBM
"
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
info
(
"
Open
a
private
browsing
window
.
"
)
;
let
PBMWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
Services
.
cookieBanners
.
setDomainPref
(
uri
Ci
.
nsICookieBannerService
.
MODE_DISABLED
true
)
;
info
(
"
Verifying
if
the
cookie
banner
domain
pref
is
set
for
PBM
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_DISABLED
"
The
domain
pref
is
properly
set
for
PBM
.
"
)
;
info
(
"
Adding
a
persistent
domain
preference
for
example
.
org
in
PBM
"
)
;
let
uriPersistent
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
Services
.
cookieBanners
.
setDomainPrefAndPersistInPrivateBrowsing
(
uriPersistent
Ci
.
nsICookieBannerService
.
MODE_DISABLED
)
;
info
(
"
Trigger
an
ending
of
a
private
browsing
window
session
"
)
;
let
PBMSessionEndsObserved
=
TestUtils
.
topicObserved
(
"
last
-
pb
-
context
-
exited
"
)
;
await
BrowserTestUtils
.
closeWindow
(
PBMWin
)
;
await
PBMSessionEndsObserved
;
info
(
"
Verify
if
the
private
domain
pref
is
cleared
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
The
domain
pref
is
properly
set
for
PBM
.
"
)
;
info
(
"
Verify
if
the
persistent
private
domain
pref
remains
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uriPersistent
true
)
Ci
.
nsICookieBannerService
.
MODE_DISABLED
"
The
persistent
domain
pref
remains
for
PBM
after
private
session
ends
.
"
)
;
}
)
;
add_task
(
async
function
test_remove_persistent_domain_pref_in_PBM
(
)
{
info
(
"
Enabling
cookie
banner
service
with
MODE_REJECT
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
info
(
"
Adding
a
domain
preference
for
example
.
com
in
PBM
"
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
info
(
"
Open
a
private
browsing
window
.
"
)
;
let
PBMWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
Services
.
cookieBanners
.
setDomainPrefAndPersistInPrivateBrowsing
(
uri
Ci
.
nsICookieBannerService
.
MODE_DISABLED
)
;
info
(
"
Verifying
if
the
cookie
banner
domain
pref
is
set
for
PBM
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_DISABLED
"
The
domain
pref
is
properly
set
for
PBM
.
"
)
;
info
(
"
Remove
the
persistent
domain
pref
.
"
)
;
Services
.
cookieBanners
.
removeDomainPref
(
uri
true
)
;
info
(
"
Trigger
an
ending
of
a
private
browsing
window
session
"
)
;
let
PBMSessionEndsObserved
=
TestUtils
.
topicObserved
(
"
last
-
pb
-
context
-
exited
"
)
;
await
BrowserTestUtils
.
closeWindow
(
PBMWin
)
;
await
PBMSessionEndsObserved
;
info
(
"
Verify
if
the
private
domain
pref
is
no
longer
persistent
and
cleared
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
The
domain
pref
is
properly
set
for
PBM
.
"
)
;
}
)
;
add_task
(
async
function
test_override_persistent_state_in_PBM
(
)
{
info
(
"
Enabling
cookie
banner
service
with
MODE_REJECT
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
info
(
"
Adding
a
domain
preference
for
example
.
com
in
PBM
"
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
info
(
"
Open
a
private
browsing
window
.
"
)
;
let
PBMWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
Services
.
cookieBanners
.
setDomainPrefAndPersistInPrivateBrowsing
(
uri
Ci
.
nsICookieBannerService
.
MODE_DISABLED
)
;
info
(
"
Trigger
an
ending
of
a
private
browsing
window
session
"
)
;
let
PBMSessionEndsObserved
=
TestUtils
.
topicObserved
(
"
last
-
pb
-
context
-
exited
"
)
;
await
BrowserTestUtils
.
closeWindow
(
PBMWin
)
;
await
PBMSessionEndsObserved
;
info
(
"
Verify
if
the
persistent
private
domain
pref
remains
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_DISABLED
"
The
persistent
domain
pref
remains
for
PBM
after
private
session
ends
.
"
)
;
info
(
"
Open
a
private
browsing
window
again
.
"
)
;
PBMWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
info
(
"
Override
the
persistent
domain
pref
with
non
-
persistent
domain
pref
.
"
)
;
Services
.
cookieBanners
.
setDomainPref
(
uri
Ci
.
nsICookieBannerService
.
MODE_DISABLED
true
)
;
info
(
"
Trigger
an
ending
of
a
private
browsing
window
session
again
"
)
;
PBMSessionEndsObserved
=
TestUtils
.
topicObserved
(
"
last
-
pb
-
context
-
exited
"
)
;
await
BrowserTestUtils
.
closeWindow
(
PBMWin
)
;
await
PBMSessionEndsObserved
;
info
(
"
Verify
if
the
private
domain
pref
is
cleared
.
"
)
;
is
(
Services
.
cookieBanners
.
getDomainPref
(
uri
true
)
Ci
.
nsICookieBannerService
.
MODE_UNSET
"
The
domain
pref
is
properly
set
for
PBM
.
"
)
;
}
)
;
