"
use
strict
"
;
let
{
ForgetAboutSite
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ForgetAboutSite
.
sys
.
mjs
"
)
;
add_setup
(
async
function
(
)
{
await
clickTestSetup
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
bannerClicking
.
maxTriesPerSiteAndSession
"
1
]
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
true
)
;
}
)
;
add_task
(
async
function
testStopExecuteAfterOneAttempt
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
[
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
[
"
cookiebanners
.
bannerClicking
.
maxTriesPerSiteAndSession
"
1
]
]
}
)
;
insertTestClickRules
(
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
true
expected
:
"
NoClick
"
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
let
pbmWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
openPageAndVerify
(
{
win
:
pbmWindow
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
openPageAndVerify
(
{
win
:
pbmWindow
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
true
expected
:
"
NoClick
"
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
true
)
;
await
openPageAndVerify
(
{
win
:
pbmWindow
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
BrowserTestUtils
.
closeWindow
(
pbmWindow
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
true
)
;
}
)
;
add_task
(
async
function
testStopExecuteAfterSeveralAttempts
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
[
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
[
"
cookiebanners
.
bannerClicking
.
maxTriesPerSiteAndSession
"
2
]
]
}
)
;
insertTestClickRules
(
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
true
expected
:
"
NoClick
"
}
)
;
let
pbmWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
openPageAndVerify
(
{
win
:
pbmWindow
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
openPageAndVerify
(
{
win
:
pbmWindow
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
openPageAndVerify
(
{
win
:
pbmWindow
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
true
expected
:
"
NoClick
"
}
)
;
await
BrowserTestUtils
.
closeWindow
(
pbmWindow
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
true
)
;
}
)
;
add_task
(
async
function
testForgetAboutSiteWithStopExecuteAfterOneAttempt
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
[
"
cookiebanners
.
bannerClicking
.
maxTriesPerSiteAndSession
"
1
]
]
}
)
;
insertTestClickRules
(
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
true
expected
:
"
NoClick
"
}
)
;
await
ForgetAboutSite
.
removeDataFromDomain
(
TEST_DOMAIN_A
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
true
)
;
}
)
;
add_task
(
async
function
testClearDataServiceWithStopExecuteAfterOneAttempt
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
[
"
cookiebanners
.
bannerClicking
.
maxTriesPerSiteAndSession
"
1
]
]
}
)
;
insertTestClickRules
(
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromSite
(
TEST_DOMAIN_A
{
}
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIE_BANNER_EXECUTED_RECORD
aResolve
)
;
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromHost
(
TEST_DOMAIN_A
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIE_BANNER_EXECUTED_RECORD
aResolve
)
;
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
"
https
:
/
/
"
+
TEST_DOMAIN_A
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteDataFromPrincipal
(
principal
true
Ci
.
nsIClearDataService
.
CLEAR_COOKIE_BANNER_EXECUTED_RECORD
aResolve
)
;
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
new
Promise
(
aResolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_COOKIE_BANNER_EXECUTED_RECORD
aResolve
)
;
}
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
true
)
;
}
)
;
