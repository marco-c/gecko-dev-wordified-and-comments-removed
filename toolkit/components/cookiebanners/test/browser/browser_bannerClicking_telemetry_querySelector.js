"
use
strict
"
;
async
function
waitForAndAssertEqual
(
checkFn
expectedValue
message
)
{
let
checkFnResult
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
checkFnResult
=
checkFn
(
)
;
return
checkFnResult
=
=
expectedValue
;
}
message
)
;
Assert
.
equal
(
checkFnResult
expectedValue
message
)
;
}
async
function
assertQuerySelectorTelemetry
(
{
hasTopLevelData
hasFrameData
}
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
let
runDurationTopLevel
=
(
)
=
>
Glean
.
cookieBannersClick
.
querySelectorRunDurationPerWindowTopLevel
.
testGetValue
(
)
!
=
null
;
let
runDurationFrame
=
(
)
=
>
Glean
.
cookieBannersClick
.
querySelectorRunDurationPerWindowFrame
.
testGetValue
(
)
!
=
null
;
let
runCountTopLevel
=
(
)
=
>
Glean
.
cookieBannersClick
.
querySelectorRunCountPerWindowTopLevel
.
testGetValue
(
)
!
=
null
;
let
runCountFrame
=
(
)
=
>
Glean
.
cookieBannersClick
.
querySelectorRunCountPerWindowFrame
.
testGetValue
(
)
!
=
null
;
let
messagePrefix
=
hasData
=
>
Should
{
hasData
?
"
"
:
"
not
"
}
have
;
await
waitForAndAssertEqual
(
runCountTopLevel
hasTopLevelData
{
messagePrefix
(
hasTopLevelData
)
}
top
-
level
run
count
data
.
)
;
await
waitForAndAssertEqual
(
runDurationTopLevel
hasTopLevelData
{
messagePrefix
(
hasTopLevelData
)
}
top
-
level
run
duration
data
.
)
;
await
waitForAndAssertEqual
(
runDurationFrame
hasFrameData
{
messagePrefix
(
hasFrameData
)
}
sub
-
frame
run
duration
data
.
)
;
await
waitForAndAssertEqual
(
runCountFrame
hasFrameData
{
messagePrefix
(
hasFrameData
)
}
sub
-
frame
run
count
data
.
)
;
}
add_setup
(
clickTestSetup
)
;
add_task
(
async
function
test_click_query_selector_telemetry
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
insertTestClickRules
(
)
;
info
(
"
No
telemetry
recorded
initially
.
"
)
;
await
assertQuerySelectorTelemetry
(
{
hasFrameData
:
false
hasTopLevelData
:
false
}
)
;
info
(
"
Top
level
cookie
banner
with
no
matching
rule
.
"
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_B
testURL
:
TEST_PAGE_B
visible
:
true
expected
:
"
NoClick
"
}
)
;
await
assertQuerySelectorTelemetry
(
{
hasFrameData
:
false
hasTopLevelData
:
true
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
info
(
"
Top
level
cookie
banner
with
matching
rule
.
"
)
;
await
openPageAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
assertQuerySelectorTelemetry
(
{
hasFrameData
:
false
hasTopLevelData
:
true
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
info
(
"
Iframe
cookie
banner
with
matching
rule
.
"
)
;
await
openIframeAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
assertQuerySelectorTelemetry
(
{
hasFrameData
:
true
hasTopLevelData
:
true
}
)
;
Services
.
cookieBanners
.
removeAllExecutedRecords
(
false
)
;
info
(
"
Insert
test
rules
without
global
rules
.
"
)
;
insertTestClickRules
(
false
)
;
info
(
"
Clear
telemetry
.
"
)
;
Services
.
fog
.
testResetFOG
(
)
;
info
(
"
Iframe
cookie
banner
with
matching
rule
.
"
)
;
await
openIframeAndVerify
(
{
win
:
window
domain
:
TEST_DOMAIN_A
testURL
:
TEST_PAGE_A
visible
:
false
expected
:
"
OptOut
"
}
)
;
await
assertQuerySelectorTelemetry
(
{
hasFrameData
:
true
hasTopLevelData
:
false
}
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
)
;
