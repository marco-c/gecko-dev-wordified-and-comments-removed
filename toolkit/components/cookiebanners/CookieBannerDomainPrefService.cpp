#
include
"
CookieBannerDomainPrefService
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsIContentPrefService2
.
h
"
#
include
"
nsICookieBannerService
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsVariant
.
h
"
#
define
COOKIE_BANNER_CONTENT_PREF_NAME
u
"
cookiebanner
"
_ns
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
CookieBannerDomainPrefService
nsIContentPrefCallback2
)
LazyLogModule
gCookieBannerPerSitePrefLog
(
"
CookieBannerDomainPref
"
)
;
static
StaticRefPtr
<
CookieBannerDomainPrefService
>
sCookieBannerDomainPrefService
;
already_AddRefed
<
CookieBannerDomainPrefService
>
CookieBannerDomainPrefService
:
:
GetOrCreate
(
)
{
if
(
!
sCookieBannerDomainPrefService
)
{
sCookieBannerDomainPrefService
=
new
CookieBannerDomainPrefService
(
)
;
ClearOnShutdown
(
&
sCookieBannerDomainPrefService
)
;
}
return
do_AddRef
(
sCookieBannerDomainPrefService
)
;
}
void
CookieBannerDomainPrefService
:
:
Init
(
)
{
if
(
mIsInitialized
)
{
return
;
}
nsCOMPtr
<
nsIContentPrefService2
>
contentPrefService
=
do_GetService
(
NS_CONTENT_PREF_SERVICE_CONTRACTID
)
;
if
(
!
contentPrefService
)
{
return
;
}
mIsInitialized
=
true
;
DebugOnly
<
nsresult
>
rv
=
contentPrefService
-
>
GetByName
(
COOKIE_BANNER_CONTENT_PREF_NAME
nullptr
this
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Fail
to
get
all
content
prefs
during
init
.
"
)
;
}
Maybe
<
nsICookieBannerService
:
:
Modes
>
CookieBannerDomainPrefService
:
:
GetPref
(
const
nsACString
&
aDomain
bool
aIsPrivate
)
{
if
(
aIsPrivate
)
{
return
mPrefsPrivate
.
MaybeGet
(
aDomain
)
;
}
if
(
!
mIsContentPrefLoaded
)
{
return
Nothing
(
)
;
}
return
mPrefs
.
MaybeGet
(
aDomain
)
;
}
nsresult
CookieBannerDomainPrefService
:
:
SetPref
(
const
nsACString
&
aDomain
nsICookieBannerService
:
:
Modes
aMode
bool
aIsPrivate
)
{
if
(
aIsPrivate
)
{
Unused
<
<
mPrefsPrivate
.
InsertOrUpdate
(
aDomain
aMode
)
;
return
NS_OK
;
}
EnsureInitCompleted
(
)
;
Unused
<
<
mPrefs
.
InsertOrUpdate
(
aDomain
aMode
)
;
nsCOMPtr
<
nsIContentPrefService2
>
contentPrefService
=
do_GetService
(
NS_CONTENT_PREF_SERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
contentPrefService
NS_ERROR_FAILURE
)
;
RefPtr
<
nsVariant
>
variant
=
new
nsVariant
(
)
;
nsresult
rv
=
variant
-
>
SetAsUint8
(
aMode
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
contentPrefService
-
>
Set
(
NS_ConvertUTF8toUTF16
(
aDomain
)
COOKIE_BANNER_CONTENT_PREF_NAME
variant
nullptr
nullptr
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Fail
to
set
cookie
banner
domain
pref
.
"
)
;
return
rv
;
}
nsresult
CookieBannerDomainPrefService
:
:
RemovePref
(
const
nsACString
&
aDomain
bool
aIsPrivate
)
{
if
(
aIsPrivate
)
{
mPrefsPrivate
.
Remove
(
aDomain
)
;
return
NS_OK
;
}
EnsureInitCompleted
(
)
;
mPrefs
.
Remove
(
aDomain
)
;
nsCOMPtr
<
nsIContentPrefService2
>
contentPrefService
=
do_GetService
(
NS_CONTENT_PREF_SERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
contentPrefService
NS_ERROR_FAILURE
)
;
nsresult
rv
=
contentPrefService
-
>
RemoveByDomainAndName
(
NS_ConvertUTF8toUTF16
(
aDomain
)
COOKIE_BANNER_CONTENT_PREF_NAME
nullptr
nullptr
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Fail
to
remove
cookie
banner
domain
pref
.
"
)
;
return
rv
;
}
nsresult
CookieBannerDomainPrefService
:
:
RemoveAll
(
bool
aIsPrivate
)
{
if
(
aIsPrivate
)
{
mPrefsPrivate
.
Clear
(
)
;
return
NS_OK
;
}
EnsureInitCompleted
(
)
;
mPrefs
.
Clear
(
)
;
nsCOMPtr
<
nsIContentPrefService2
>
contentPrefService
=
do_GetService
(
NS_CONTENT_PREF_SERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
contentPrefService
NS_ERROR_FAILURE
)
;
nsresult
rv
=
contentPrefService
-
>
RemoveByName
(
COOKIE_BANNER_CONTENT_PREF_NAME
nullptr
nullptr
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Fail
to
remove
all
cookie
banner
domain
prefs
.
"
)
;
return
rv
;
}
void
CookieBannerDomainPrefService
:
:
EnsureInitCompleted
(
)
{
if
(
mIsContentPrefLoaded
)
{
return
;
}
SpinEventLoopUntil
(
"
CookieBannerDomainPrefService
:
:
EnsureUpdateComplete
"
_ns
[
&
]
{
return
mIsContentPrefLoaded
;
}
)
;
}
NS_IMETHODIMP
CookieBannerDomainPrefService
:
:
HandleResult
(
nsIContentPref
*
aPref
)
{
NS_ENSURE_ARG_POINTER
(
aPref
)
;
nsAutoString
domain
;
nsresult
rv
=
aPref
-
>
GetDomain
(
domain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIVariant
>
value
;
rv
=
aPref
-
>
GetValue
(
getter_AddRefs
(
value
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
value
)
{
return
NS_OK
;
}
uint8_t
data
;
rv
=
value
-
>
GetAsUint8
(
&
data
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
Unused
<
<
mPrefs
.
InsertOrUpdate
(
NS_ConvertUTF16toUTF8
(
domain
)
nsICookieBannerService
:
:
Modes
(
data
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
CookieBannerDomainPrefService
:
:
HandleCompletion
(
uint16_t
aReason
)
{
mIsContentPrefLoaded
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
CookieBannerDomainPrefService
:
:
HandleError
(
nsresult
error
)
{
if
(
NS_WARN_IF
(
NS_FAILED
(
error
)
)
)
{
MOZ_LOG
(
gCookieBannerPerSitePrefLog
LogLevel
:
:
Warning
(
"
Fail
to
get
content
pref
during
initiation
.
"
)
)
;
return
NS_OK
;
}
return
NS_OK
;
}
}
