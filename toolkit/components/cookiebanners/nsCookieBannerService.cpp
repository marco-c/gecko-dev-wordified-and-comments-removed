#
include
"
nsCookieBannerService
.
h
"
#
include
"
CookieBannerDomainPrefService
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
EventQueue
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
StaticPrefs_cookiebanners
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCookieBannerRule
.
h
"
#
include
"
nsCookieInjector
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIClickRule
.
h
"
#
include
"
nsICookieBannerListService
.
h
"
#
include
"
nsICookieBannerRule
.
h
"
#
include
"
nsICookie
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Cookie
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
nsCookieBannerService
nsICookieBannerService
nsIObserver
)
LazyLogModule
gCookieBannerLog
(
"
nsCookieBannerService
"
)
;
static
const
char
kCookieBannerServiceModePref
[
]
=
"
cookiebanners
.
service
.
mode
"
;
static
const
char
kCookieBannerServiceModePBMPref
[
]
=
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
;
static
StaticRefPtr
<
nsCookieBannerService
>
sCookieBannerServiceSingleton
;
namespace
{
nsCString
ConvertModeToStringForTelemetry
(
uint32_t
aModes
)
{
switch
(
aModes
)
{
case
nsICookieBannerService
:
:
MODE_DISABLED
:
return
"
disabled
"
_ns
;
case
nsICookieBannerService
:
:
MODE_REJECT
:
return
"
reject
"
_ns
;
case
nsICookieBannerService
:
:
MODE_REJECT_OR_ACCEPT
:
return
"
reject_or_accept
"
_ns
;
default
:
return
"
invalid
"
_ns
;
}
}
}
already_AddRefed
<
nsCookieBannerService
>
nsCookieBannerService
:
:
GetSingleton
(
)
{
if
(
!
sCookieBannerServiceSingleton
)
{
sCookieBannerServiceSingleton
=
new
nsCookieBannerService
(
)
;
RunOnShutdown
(
[
]
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
RunOnShutdown
.
Mode
:
%
d
.
Mode
PBM
:
%
d
.
"
StaticPrefs
:
:
cookiebanners_service_mode
(
)
StaticPrefs
:
:
cookiebanners_service_mode_privateBrowsing
(
)
)
)
;
DebugOnly
<
nsresult
>
rv
=
Preferences
:
:
UnregisterCallback
(
&
nsCookieBannerService
:
:
OnPrefChange
kCookieBannerServiceModePref
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Unregistering
kCookieBannerServiceModePref
callback
failed
"
)
;
rv
=
Preferences
:
:
UnregisterCallback
(
&
nsCookieBannerService
:
:
OnPrefChange
kCookieBannerServiceModePBMPref
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Unregistering
kCookieBannerServiceModePBMPref
callback
failed
"
)
;
rv
=
sCookieBannerServiceSingleton
-
>
Shutdown
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsCookieBannerService
:
:
Shutdown
failed
.
"
)
;
sCookieBannerServiceSingleton
=
nullptr
;
}
)
;
}
return
do_AddRef
(
sCookieBannerServiceSingleton
)
;
}
void
nsCookieBannerService
:
:
OnPrefChange
(
const
char
*
aPref
void
*
aData
)
{
RefPtr
<
nsCookieBannerService
>
service
=
GetSingleton
(
)
;
if
(
StaticPrefs
:
:
cookiebanners_service_mode
(
)
!
=
nsICookieBannerService
:
:
MODE_DISABLED
|
|
StaticPrefs
:
:
cookiebanners_service_mode_privateBrowsing
(
)
!
=
nsICookieBannerService
:
:
MODE_DISABLED
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Info
(
"
Initializing
nsCookieBannerService
after
pref
change
.
%
s
"
aPref
)
)
;
DebugOnly
<
nsresult
>
rv
=
service
-
>
Init
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsCookieBannerService
:
:
Init
failed
"
)
;
return
;
}
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Info
(
"
Disabling
nsCookieBannerService
after
pref
change
.
%
s
"
aPref
)
)
;
DebugOnly
<
nsresult
>
rv
=
service
-
>
Shutdown
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsCookieBannerService
:
:
Shutdown
failed
"
)
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
nsCRT
:
:
strcmp
(
aTopic
"
idle
-
daily
"
)
=
=
0
)
{
DailyReportTelemetry
(
)
;
return
NS_OK
;
}
if
(
nsCRT
:
:
strcmp
(
aTopic
"
profile
-
after
-
change
"
)
=
=
0
)
{
nsresult
rv
=
Preferences
:
:
RegisterCallback
(
&
nsCookieBannerService
:
:
OnPrefChange
kCookieBannerServiceModePBMPref
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
Preferences
:
:
RegisterCallbackAndCall
(
&
nsCookieBannerService
:
:
OnPrefChange
kCookieBannerServiceModePref
)
;
}
if
(
nsCRT
:
:
strcmp
(
aTopic
"
last
-
pb
-
context
-
exited
"
)
=
=
0
)
{
return
RemoveAllExecutedRecords
(
true
)
;
}
return
NS_OK
;
}
nsresult
nsCookieBannerService
:
:
Init
(
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Mode
:
%
d
.
Mode
PBM
:
%
d
.
"
__FUNCTION__
StaticPrefs
:
:
cookiebanners_service_mode
(
)
StaticPrefs
:
:
cookiebanners_service_mode_privateBrowsing
(
)
)
)
;
if
(
mIsInitialized
)
{
return
NS_OK
;
}
mListService
=
do_GetService
(
NS_COOKIEBANNERLISTSERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
mListService
NS_ERROR_FAILURE
)
;
mDomainPrefService
=
CookieBannerDomainPrefService
:
:
GetOrCreate
(
)
;
NS_ENSURE_TRUE
(
mDomainPrefService
NS_ERROR_FAILURE
)
;
mIsInitialized
=
true
;
nsresult
rv
=
NS_DispatchToCurrentThreadQueue
(
NS_NewRunnableFunction
(
"
CookieBannerListService
init
startup
"
[
&
]
{
if
(
!
mIsInitialized
)
{
return
;
}
nsresult
rv
=
mListService
-
>
Init
(
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
mDomainPrefService
-
>
Init
(
)
;
}
)
EventQueuePriority
:
:
Idle
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
nsCookieInjector
>
injector
=
nsCookieInjector
:
:
GetSingleton
(
)
;
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
NS_ENSURE_TRUE
(
obsSvc
NS_ERROR_FAILURE
)
;
return
obsSvc
-
>
AddObserver
(
this
"
last
-
pb
-
context
-
exited
"
false
)
;
}
nsresult
nsCookieBannerService
:
:
Shutdown
(
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Mode
:
%
d
.
Mode
PBM
:
%
d
.
"
__FUNCTION__
StaticPrefs
:
:
cookiebanners_service_mode
(
)
StaticPrefs
:
:
cookiebanners_service_mode_privateBrowsing
(
)
)
)
;
if
(
!
mIsInitialized
)
{
return
NS_OK
;
}
nsresult
rv
=
mListService
-
>
Shutdown
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mRules
.
Clear
(
)
;
rv
=
RemoveAllExecutedRecords
(
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
RemoveAllExecutedRecords
(
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
NS_ENSURE_TRUE
(
obsSvc
NS_ERROR_FAILURE
)
;
rv
=
obsSvc
-
>
RemoveObserver
(
this
"
last
-
pb
-
context
-
exited
"
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mIsInitialized
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
GetIsEnabled
(
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aResult
)
;
*
aResult
=
mIsInitialized
;
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
GetRules
(
nsTArray
<
RefPtr
<
nsICookieBannerRule
>
>
&
aRules
)
{
aRules
.
Clear
(
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
StaticPrefs
:
:
cookiebanners_service_enableGlobalRules
(
)
)
{
AppendToArray
(
aRules
mGlobalRules
.
Values
(
)
)
;
}
nsTHashSet
<
nsRefPtrHashKey
<
nsICookieBannerRule
>
>
rulesSet
;
for
(
const
nsCOMPtr
<
nsICookieBannerRule
>
&
rule
:
mRules
.
Values
(
)
)
{
rulesSet
.
Insert
(
rule
)
;
}
AppendToArray
(
aRules
rulesSet
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
ResetRules
(
const
bool
doImport
)
{
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
mRules
.
Clear
(
)
;
mGlobalRules
.
Clear
(
)
;
if
(
doImport
)
{
NS_ENSURE_TRUE
(
mListService
NS_ERROR_FAILURE
)
;
nsresult
rv
=
mListService
-
>
ImportAllRules
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
nsresult
nsCookieBannerService
:
:
GetRuleForDomain
(
const
nsACString
&
aDomain
nsICookieBannerRule
*
*
aRule
)
{
NS_ENSURE_ARG_POINTER
(
aRule
)
;
*
aRule
=
nullptr
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsICookieBannerRule
>
rule
=
mRules
.
Get
(
aDomain
)
;
if
(
rule
)
{
rule
.
forget
(
aRule
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
GetCookiesForURI
(
nsIURI
*
aURI
const
bool
aIsPrivateBrowsing
nsTArray
<
RefPtr
<
nsICookieRule
>
>
&
aCookies
)
{
NS_ENSURE_ARG_POINTER
(
aURI
)
;
aCookies
.
Clear
(
)
;
if
(
MOZ_LOG_TEST
(
gCookieBannerLog
LogLevel
:
:
Debug
)
)
{
nsAutoCString
spec
;
nsresult
rv
=
aURI
-
>
GetSpec
(
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
aURI
:
%
s
.
aIsPrivateBrowsing
:
%
d
"
__FUNCTION__
spec
.
get
(
)
aIsPrivateBrowsing
)
)
;
}
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
uint32_t
mode
;
if
(
aIsPrivateBrowsing
)
{
mode
=
StaticPrefs
:
:
cookiebanners_service_mode_privateBrowsing
(
)
;
}
else
{
mode
=
StaticPrefs
:
:
cookiebanners_service_mode
(
)
;
}
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Found
nsICookieBannerRule
.
Computed
mode
:
%
d
"
__FUNCTION__
mode
)
)
;
if
(
mode
!
=
nsICookieBannerService
:
:
MODE_DISABLED
&
&
!
StaticPrefs
:
:
cookiebanners_service_detectOnly
(
)
)
{
nsICookieBannerService
:
:
Modes
domainPref
;
nsresult
rv
=
GetDomainPref
(
aURI
aIsPrivateBrowsing
&
domainPref
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
domainPref
!
=
nsICookieBannerService
:
:
MODE_UNSET
)
{
mode
=
domainPref
;
}
}
if
(
mode
=
=
nsICookieBannerService
:
:
MODE_DISABLED
|
|
StaticPrefs
:
:
cookiebanners_service_detectOnly
(
)
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Returning
empty
array
.
Got
MODE_DISABLED
for
"
"
aIsPrivateBrowsing
:
%
d
.
"
__FUNCTION__
aIsPrivateBrowsing
)
)
;
return
NS_OK
;
}
nsresult
rv
;
nsCOMPtr
<
nsIEffectiveTLDService
>
eTLDService
(
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCString
baseDomain
;
rv
=
eTLDService
-
>
GetBaseDomain
(
aURI
0
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
GetCookieRulesForDomainInternal
(
baseDomain
static_cast
<
nsICookieBannerService
:
:
Modes
>
(
mode
)
true
aCookies
)
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
GetClickRulesForDomain
(
const
nsACString
&
aDomain
const
bool
aIsTopLevel
nsTArray
<
RefPtr
<
nsIClickRule
>
>
&
aRules
)
{
return
GetClickRulesForDomainInternal
(
aDomain
aIsTopLevel
aRules
)
;
}
nsresult
nsCookieBannerService
:
:
GetClickRulesForDomainInternal
(
const
nsACString
&
aDomain
const
bool
aIsTopLevel
nsTArray
<
RefPtr
<
nsIClickRule
>
>
&
aRules
)
{
aRules
.
Clear
(
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsICookieBannerRule
>
ruleForDomain
;
nsresult
rv
=
GetRuleForDomain
(
aDomain
getter_AddRefs
(
ruleForDomain
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
useGlobalSubFrameRules
=
StaticPrefs
:
:
cookiebanners_service_enableGlobalRules_subFrames
(
)
;
auto
appendClickRule
=
[
&
]
(
const
nsCOMPtr
<
nsICookieBannerRule
>
&
bannerRule
bool
isGlobal
)
{
nsCOMPtr
<
nsIClickRule
>
clickRule
;
rv
=
bannerRule
-
>
GetClickRule
(
getter_AddRefs
(
clickRule
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
clickRule
)
{
return
NS_OK
;
}
nsIClickRule
:
:
RunContext
runContext
;
rv
=
clickRule
-
>
GetRunContext
(
&
runContext
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
runContextMatchesRule
=
(
runContext
=
=
nsIClickRule
:
:
RUN_ALL
)
|
|
(
runContext
=
=
nsIClickRule
:
:
RUN_TOP
&
&
aIsTopLevel
)
|
|
(
runContext
=
=
nsIClickRule
:
:
RUN_CHILD
&
&
!
aIsTopLevel
)
;
if
(
!
runContextMatchesRule
)
{
return
NS_OK
;
}
if
(
!
useGlobalSubFrameRules
&
&
isGlobal
&
&
!
aIsTopLevel
)
{
if
(
MOZ_LOG_TEST
(
gCookieBannerLog
LogLevel
:
:
Debug
)
)
{
nsAutoCString
ruleId
;
rv
=
bannerRule
-
>
GetId
(
ruleId
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Skip
adding
global
sub
-
frame
rule
:
%
s
.
"
__FUNCTION__
ruleId
.
get
(
)
)
)
;
}
return
NS_OK
;
}
aRules
.
AppendElement
(
clickRule
)
;
return
NS_OK
;
}
;
if
(
ruleForDomain
)
{
return
appendClickRule
(
ruleForDomain
false
)
;
}
if
(
!
StaticPrefs
:
:
cookiebanners_service_enableGlobalRules
(
)
)
{
return
NS_OK
;
}
for
(
nsICookieBannerRule
*
globalRule
:
mGlobalRules
.
Values
(
)
)
{
rv
=
appendClickRule
(
globalRule
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
InsertRule
(
nsICookieBannerRule
*
aRule
)
{
NS_ENSURE_ARG_POINTER
(
aRule
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCookieBannerRule
:
:
LogRule
(
gCookieBannerLog
"
InsertRule
:
"
aRule
LogLevel
:
:
Debug
)
;
nsTArray
<
nsCString
>
domains
;
nsresult
rv
=
aRule
-
>
GetDomains
(
domains
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
domains
.
IsEmpty
(
)
)
{
nsAutoCString
id
;
rv
=
aRule
-
>
GetId
(
id
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
!
id
.
IsEmpty
(
)
NS_ERROR_FAILURE
)
;
rv
=
aRule
-
>
ClearCookies
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsICookieBannerRule
>
result
=
mGlobalRules
.
InsertOrUpdate
(
id
aRule
)
;
NS_ENSURE_TRUE
(
result
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
for
(
auto
&
domain
:
domains
)
{
nsCOMPtr
<
nsICookieBannerRule
>
result
=
mRules
.
InsertOrUpdate
(
domain
aRule
)
;
NS_ENSURE_TRUE
(
result
NS_ERROR_FAILURE
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
RemoveRule
(
nsICookieBannerRule
*
aRule
)
{
NS_ENSURE_ARG_POINTER
(
aRule
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCookieBannerRule
:
:
LogRule
(
gCookieBannerLog
"
RemoveRule
:
"
aRule
LogLevel
:
:
Debug
)
;
nsTArray
<
nsCString
>
domains
;
nsresult
rv
=
aRule
-
>
GetDomains
(
domains
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
domains
.
IsEmpty
(
)
)
{
nsAutoCString
id
;
rv
=
aRule
-
>
GetId
(
id
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
!
id
.
IsEmpty
(
)
NS_ERROR_FAILURE
)
;
mGlobalRules
.
Remove
(
id
)
;
return
NS_OK
;
}
for
(
auto
&
domain
:
domains
)
{
mRules
.
Remove
(
domain
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
HasRuleForBrowsingContextTree
(
mozilla
:
:
dom
:
:
BrowsingContext
*
aBrowsingContext
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aBrowsingContext
)
;
NS_ENSURE_ARG_POINTER
(
aResult
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
*
aResult
=
false
;
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
"
__FUNCTION__
)
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
=
NS_OK
;
uint32_t
numChecks
=
0
;
auto
checkFn
=
[
&
]
(
dom
:
:
BrowsingContext
*
bc
)
-
>
dom
:
:
BrowsingContext
:
:
WalkFlag
{
numChecks
+
+
;
bool
hasClickRule
=
false
;
bool
hasCookieRule
=
false
;
rv
=
HasRuleForBrowsingContextInternal
(
bc
true
hasClickRule
hasCookieRule
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
dom
:
:
BrowsingContext
:
:
WalkFlag
:
:
Stop
;
}
*
aResult
=
hasClickRule
|
|
hasCookieRule
;
if
(
*
aResult
)
{
return
dom
:
:
BrowsingContext
:
:
WalkFlag
:
:
Stop
;
}
return
dom
:
:
BrowsingContext
:
:
WalkFlag
:
:
Next
;
}
;
aBrowsingContext
-
>
PreOrderWalk
(
checkFn
)
;
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
success
:
%
d
hasRule
:
%
d
numChecks
:
%
d
"
__FUNCTION__
NS_SUCCEEDED
(
rv
)
*
aResult
numChecks
)
)
;
return
rv
;
}
nsresult
nsCookieBannerService
:
:
HasRuleForBrowsingContextInternal
(
mozilla
:
:
dom
:
:
BrowsingContext
*
aBrowsingContext
bool
aIgnoreDomainPref
bool
&
aHasClickRule
bool
&
aHasCookieRule
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
mIsInitialized
)
;
NS_ENSURE_ARG_POINTER
(
aBrowsingContext
)
;
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
"
__FUNCTION__
)
)
;
aHasClickRule
=
false
;
aHasCookieRule
=
false
;
nsICookieBannerService
:
:
Modes
mode
;
nsresult
rv
=
GetServiceModeForBrowsingContext
(
aBrowsingContext
aIgnoreDomainPref
&
mode
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
mode
=
=
nsICookieBannerService
:
:
MODE_DISABLED
|
|
StaticPrefs
:
:
cookiebanners_service_detectOnly
(
)
)
{
return
NS_OK
;
}
RefPtr
<
dom
:
:
WindowGlobalParent
>
windowGlobalParent
=
aBrowsingContext
-
>
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
NS_ENSURE_TRUE
(
windowGlobalParent
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
windowGlobalParent
-
>
DocumentPrincipal
(
)
;
NS_ENSURE_TRUE
(
principal
NS_ERROR_FAILURE
)
;
nsCString
baseDomain
;
rv
=
principal
-
>
GetBaseDomain
(
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
!
baseDomain
.
IsEmpty
(
)
NS_ERROR_FAILURE
)
;
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
baseDomain
:
%
s
"
__FUNCTION__
baseDomain
.
get
(
)
)
)
;
nsTArray
<
RefPtr
<
nsIClickRule
>
>
clickRules
;
rv
=
GetClickRulesForDomainInternal
(
baseDomain
aBrowsingContext
-
>
IsTop
(
)
clickRules
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
for
(
RefPtr
<
nsIClickRule
>
&
rule
:
clickRules
)
{
NS_ENSURE_TRUE
(
rule
NS_ERROR_NULL_POINTER
)
;
nsAutoCString
optOut
;
rv
=
rule
-
>
GetOptOut
(
optOut
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
optOut
.
IsEmpty
(
)
)
{
aHasClickRule
=
true
;
break
;
}
if
(
mode
=
=
nsICookieBannerService
:
:
MODE_REJECT_OR_ACCEPT
)
{
nsAutoCString
optIn
;
rv
=
rule
-
>
GetOptIn
(
optIn
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
optIn
.
IsEmpty
(
)
)
{
aHasClickRule
=
true
;
break
;
}
}
}
nsTArray
<
RefPtr
<
nsICookieRule
>
>
cookies
;
rv
=
GetCookieRulesForDomainInternal
(
baseDomain
mode
aBrowsingContext
-
>
IsTop
(
)
cookies
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aHasCookieRule
=
!
cookies
.
IsEmpty
(
)
;
return
NS_OK
;
}
nsresult
nsCookieBannerService
:
:
GetCookieRulesForDomainInternal
(
const
nsACString
&
aBaseDomain
const
nsICookieBannerService
:
:
Modes
aMode
const
bool
aIsTopLevel
nsTArray
<
RefPtr
<
nsICookieRule
>
>
&
aCookies
)
{
MOZ_ASSERT
(
mIsInitialized
)
;
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
aBaseDomain
:
%
s
"
__FUNCTION__
PromiseFlatCString
(
aBaseDomain
)
.
get
(
)
)
)
;
aCookies
.
Clear
(
)
;
if
(
aMode
=
=
nsICookieBannerService
:
:
MODE_DISABLED
|
|
StaticPrefs
:
:
cookiebanners_service_detectOnly
(
)
)
{
return
NS_OK
;
}
if
(
!
aIsTopLevel
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsICookieBannerRule
>
cookieBannerRule
;
nsresult
rv
=
GetRuleForDomain
(
aBaseDomain
getter_AddRefs
(
cookieBannerRule
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
cookieBannerRule
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Returning
empty
array
.
No
nsICookieBannerRule
matching
domain
.
"
__FUNCTION__
)
)
;
return
NS_OK
;
}
rv
=
cookieBannerRule
-
>
GetCookies
(
true
aBaseDomain
aCookies
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aMode
=
=
nsICookieBannerService
:
:
MODE_REJECT_OR_ACCEPT
&
&
aCookies
.
IsEmpty
(
)
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Returning
opt
-
in
cookies
for
%
s
.
"
__FUNCTION__
PromiseFlatCString
(
aBaseDomain
)
.
get
(
)
)
)
;
return
cookieBannerRule
-
>
GetCookies
(
false
aBaseDomain
aCookies
)
;
}
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Returning
opt
-
out
cookies
for
%
s
.
"
__FUNCTION__
PromiseFlatCString
(
aBaseDomain
)
.
get
(
)
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
GetDomainPref
(
nsIURI
*
aTopLevelURI
const
bool
aIsPrivate
nsICookieBannerService
:
:
Modes
*
aModes
)
{
NS_ENSURE_ARG_POINTER
(
aTopLevelURI
)
;
NS_ENSURE_ARG_POINTER
(
aModes
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
;
nsCOMPtr
<
nsIEffectiveTLDService
>
eTLDService
(
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCString
baseDomain
;
rv
=
eTLDService
-
>
GetBaseDomain
(
aTopLevelURI
0
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
GetDomainPrefInternal
(
baseDomain
aIsPrivate
aModes
)
;
}
nsresult
nsCookieBannerService
:
:
GetDomainPrefInternal
(
const
nsACString
&
aBaseDomain
const
bool
aIsPrivate
nsICookieBannerService
:
:
Modes
*
aModes
)
{
MOZ_ASSERT
(
mIsInitialized
)
;
NS_ENSURE_ARG_POINTER
(
aModes
)
;
auto
pref
=
mDomainPrefService
-
>
GetPref
(
aBaseDomain
aIsPrivate
)
;
*
aModes
=
nsICookieBannerService
:
:
MODE_UNSET
;
if
(
pref
.
isSome
(
)
)
{
*
aModes
=
pref
.
value
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
SetDomainPref
(
nsIURI
*
aTopLevelURI
nsICookieBannerService
:
:
Modes
aModes
const
bool
aIsPrivate
)
{
NS_ENSURE_ARG_POINTER
(
aTopLevelURI
)
;
return
SetDomainPrefInternal
(
aTopLevelURI
aModes
aIsPrivate
false
)
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
SetDomainPrefAndPersistInPrivateBrowsing
(
nsIURI
*
aTopLevelURI
nsICookieBannerService
:
:
Modes
aModes
)
{
NS_ENSURE_ARG_POINTER
(
aTopLevelURI
)
;
return
SetDomainPrefInternal
(
aTopLevelURI
aModes
true
true
)
;
}
;
nsresult
nsCookieBannerService
:
:
SetDomainPrefInternal
(
nsIURI
*
aTopLevelURI
nsICookieBannerService
:
:
Modes
aModes
const
bool
aIsPrivate
const
bool
aPersistInPrivateBrowsing
)
{
NS_ENSURE_ARG_POINTER
(
aTopLevelURI
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
;
nsCOMPtr
<
nsIEffectiveTLDService
>
eTLDService
(
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCString
baseDomain
;
rv
=
eTLDService
-
>
GetBaseDomain
(
aTopLevelURI
0
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
mDomainPrefService
-
>
SetPref
(
baseDomain
aModes
aIsPrivate
aPersistInPrivateBrowsing
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
RemoveDomainPref
(
nsIURI
*
aTopLevelURI
const
bool
aIsPrivate
)
{
NS_ENSURE_ARG_POINTER
(
aTopLevelURI
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
;
nsCOMPtr
<
nsIEffectiveTLDService
>
eTLDService
(
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCString
baseDomain
;
rv
=
eTLDService
-
>
GetBaseDomain
(
aTopLevelURI
0
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
mDomainPrefService
-
>
RemovePref
(
baseDomain
aIsPrivate
)
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
RemoveAllDomainPrefs
(
const
bool
aIsPrivate
)
{
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
mDomainPrefService
-
>
RemoveAll
(
aIsPrivate
)
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
ShouldStopBannerClickingForSite
(
const
nsACString
&
aSite
const
bool
aIsTopLevel
const
bool
aIsPrivate
bool
*
aShouldStop
)
{
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
uint8_t
threshold
=
StaticPrefs
:
:
cookiebanners_bannerClicking_maxTriesPerSiteAndSession
(
)
;
if
(
threshold
=
=
0
)
{
*
aShouldStop
=
false
;
return
NS_OK
;
}
threshold
=
std
:
:
min
(
threshold
std
:
:
numeric_limits
<
uint8_t
>
:
:
max
(
)
)
;
auto
entry
=
mExecutedDataForSites
.
MaybeGet
(
aSite
)
;
if
(
!
entry
)
{
return
NS_OK
;
}
auto
&
data
=
entry
.
ref
(
)
;
uint8_t
cnt
=
0
;
if
(
aIsPrivate
)
{
cnt
=
aIsTopLevel
?
data
.
countExecutedInTopPrivate
:
data
.
countExecutedInFramePrivate
;
}
else
{
cnt
=
aIsTopLevel
?
data
.
countExecutedInTop
:
data
.
countExecutedInFrame
;
}
*
aShouldStop
=
cnt
>
=
threshold
;
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
MarkSiteExecuted
(
const
nsACString
&
aSite
const
bool
aIsTopLevel
const
bool
aIsPrivate
)
{
NS_ENSURE_TRUE
(
!
aSite
.
IsEmpty
(
)
NS_ERROR_INVALID_ARG
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
auto
&
data
=
mExecutedDataForSites
.
LookupOrInsert
(
aSite
)
;
uint8_t
*
count
=
nullptr
;
if
(
aIsPrivate
)
{
if
(
aIsTopLevel
)
{
count
=
&
data
.
countExecutedInTopPrivate
;
}
else
{
count
=
&
data
.
countExecutedInFramePrivate
;
}
}
else
{
if
(
aIsTopLevel
)
{
count
=
&
data
.
countExecutedInTop
;
}
else
{
count
=
&
data
.
countExecutedInFrame
;
}
}
MOZ_ASSERT
(
count
)
;
if
(
*
count
<
std
:
:
numeric_limits
<
uint8_t
>
:
:
max
(
)
)
{
(
*
count
)
+
=
1
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
RemoveExecutedRecordForSite
(
const
nsACString
&
aSite
const
bool
aIsPrivate
)
{
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
auto
entry
=
mExecutedDataForSites
.
Lookup
(
aSite
)
;
if
(
!
entry
)
{
return
NS_OK
;
}
auto
data
=
entry
.
Data
(
)
;
if
(
aIsPrivate
)
{
data
.
countExecutedInTopPrivate
=
0
;
data
.
countExecutedInFramePrivate
=
0
;
}
else
{
data
.
countExecutedInTop
=
0
;
data
.
countExecutedInFrame
=
0
;
}
if
(
!
data
.
countExecutedInTop
&
&
!
data
.
countExecutedInFrame
&
&
!
data
.
countExecutedInTopPrivate
&
&
!
data
.
countExecutedInFramePrivate
)
{
entry
.
Remove
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
RemoveAllExecutedRecords
(
const
bool
aIsPrivate
)
{
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
for
(
auto
iter
=
mExecutedDataForSites
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
&
data
=
iter
.
Data
(
)
;
if
(
aIsPrivate
)
{
data
.
countExecutedInTopPrivate
=
0
;
data
.
countExecutedInFramePrivate
=
0
;
}
else
{
data
.
countExecutedInTop
=
0
;
data
.
countExecutedInFrame
=
0
;
}
if
(
!
data
.
countExecutedInTop
&
&
!
data
.
countExecutedInFrame
&
&
!
data
.
countExecutedInTopPrivate
&
&
!
data
.
countExecutedInFramePrivate
)
{
iter
.
Remove
(
)
;
}
}
return
NS_OK
;
}
void
nsCookieBannerService
:
:
DailyReportTelemetry
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
uint32_t
mode
=
StaticPrefs
:
:
cookiebanners_service_mode
(
)
;
uint32_t
modePBM
=
StaticPrefs
:
:
cookiebanners_service_mode_privateBrowsing
(
)
;
nsCString
modeStr
=
ConvertModeToStringForTelemetry
(
mode
)
;
nsCString
modePBMStr
=
ConvertModeToStringForTelemetry
(
modePBM
)
;
nsTArray
<
nsCString
>
serviceModeLabels
=
{
"
disabled
"
_ns
"
reject
"
_ns
"
reject_or_accept
"
_ns
"
invalid
"
_ns
}
;
for
(
const
auto
&
label
:
serviceModeLabels
)
{
glean
:
:
cookie_banners
:
:
normal_window_service_mode
.
Get
(
label
)
.
Set
(
modeStr
.
Equals
(
label
)
)
;
glean
:
:
cookie_banners
:
:
private_window_service_mode
.
Get
(
label
)
.
Set
(
modePBMStr
.
Equals
(
label
)
)
;
}
glean
:
:
cookie_banners
:
:
service_detect_only
.
Set
(
StaticPrefs
:
:
cookiebanners_service_detectOnly
(
)
)
;
}
nsresult
nsCookieBannerService
:
:
GetServiceModeForBrowsingContext
(
dom
:
:
BrowsingContext
*
aBrowsingContext
bool
aIgnoreDomainPref
nsICookieBannerService
:
:
Modes
*
aMode
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
NS_ENSURE_ARG_POINTER
(
aBrowsingContext
)
;
NS_ENSURE_ARG_POINTER
(
aMode
)
;
bool
usePBM
=
false
;
nsresult
rv
=
aBrowsingContext
-
>
GetUsePrivateBrowsing
(
&
usePBM
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
uint32_t
mode
;
if
(
usePBM
)
{
mode
=
StaticPrefs
:
:
cookiebanners_service_mode_privateBrowsing
(
)
;
}
else
{
mode
=
StaticPrefs
:
:
cookiebanners_service_mode
(
)
;
}
if
(
aIgnoreDomainPref
|
|
mode
=
=
nsICookieBannerService
:
:
MODE_DISABLED
)
{
*
aMode
=
static_cast
<
nsICookieBannerService
:
:
Modes
>
(
mode
)
;
return
NS_OK
;
}
RefPtr
<
dom
:
:
WindowGlobalParent
>
topWGP
=
aBrowsingContext
-
>
Top
(
)
-
>
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
NS_ENSURE_TRUE
(
topWGP
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
topWGP
-
>
DocumentPrincipal
(
)
;
NS_ENSURE_TRUE
(
principal
NS_ERROR_NULL_POINTER
)
;
nsCString
baseDomain
;
rv
=
principal
-
>
GetBaseDomain
(
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
!
baseDomain
.
IsEmpty
(
)
NS_ERROR_FAILURE
)
;
nsICookieBannerService
:
:
Modes
domainPref
;
rv
=
GetDomainPrefInternal
(
baseDomain
usePBM
&
domainPref
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
domainPref
!
=
nsICookieBannerService
:
:
MODE_UNSET
)
{
mode
=
domainPref
;
}
*
aMode
=
static_cast
<
nsICookieBannerService
:
:
Modes
>
(
mode
)
;
return
NS_OK
;
}
}
