#
include
"
nsCookieBannerService
.
h
"
#
include
"
nsCookieBannerRule
.
h
"
#
include
"
nsCookieInjector
.
h
"
#
include
"
nsICookieBannerListService
.
h
"
#
include
"
nsICookieBannerRule
.
h
"
#
include
"
nsICookie
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
mozilla
/
StaticPrefs_cookiebanners
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
nsCookieBannerService
nsICookieBannerService
nsIObserver
)
LazyLogModule
gCookieBannerLog
(
"
nsCookieBannerService
"
)
;
static
const
char
kCookieBannerServiceModePref
[
]
=
"
cookiebanners
.
service
.
mode
"
;
static
StaticRefPtr
<
nsCookieBannerService
>
sCookieBannerServiceSingleton
;
already_AddRefed
<
nsCookieBannerService
>
nsCookieBannerService
:
:
GetSingleton
(
)
{
if
(
!
sCookieBannerServiceSingleton
)
{
sCookieBannerServiceSingleton
=
new
nsCookieBannerService
(
)
;
RunOnShutdown
(
[
]
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
RunOnShutdown
.
Mode
:
%
d
"
StaticPrefs
:
:
cookiebanners_service_mode
(
)
)
)
;
DebugOnly
<
nsresult
>
rv
=
Preferences
:
:
UnregisterCallback
(
&
nsCookieBannerService
:
:
OnPrefChange
kCookieBannerServiceModePref
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Unregistering
kCookieBannerServiceModePref
callback
failed
"
)
;
rv
=
sCookieBannerServiceSingleton
-
>
Shutdown
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsCookieBannerService
:
:
Shutdown
failed
.
"
)
;
sCookieBannerServiceSingleton
=
nullptr
;
}
)
;
}
return
do_AddRef
(
sCookieBannerServiceSingleton
)
;
}
void
nsCookieBannerService
:
:
OnPrefChange
(
const
char
*
aPref
void
*
aData
)
{
RefPtr
<
nsCookieBannerService
>
service
=
GetSingleton
(
)
;
if
(
StaticPrefs
:
:
cookiebanners_service_mode
(
)
!
=
nsICookieBannerService
:
:
MODE_DISABLED
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Info
(
"
Initializing
nsCookieBannerService
after
pref
change
.
%
s
"
aPref
)
)
;
DebugOnly
<
nsresult
>
rv
=
service
-
>
Init
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsCookieBannerService
:
:
Init
failed
"
)
;
return
;
}
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Info
(
"
Disabling
nsCookieBannerService
after
pref
change
.
%
s
"
aPref
)
)
;
DebugOnly
<
nsresult
>
rv
=
service
-
>
Shutdown
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsCookieBannerService
:
:
Shutdown
failed
"
)
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
nsCRT
:
:
strcmp
(
aTopic
"
profile
-
after
-
change
"
)
!
=
0
)
{
return
NS_OK
;
}
return
Preferences
:
:
RegisterCallbackAndCall
(
&
nsCookieBannerService
:
:
OnPrefChange
kCookieBannerServiceModePref
)
;
}
nsresult
nsCookieBannerService
:
:
Init
(
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Mode
:
%
d
"
__FUNCTION__
StaticPrefs
:
:
cookiebanners_service_mode
(
)
)
)
;
if
(
mIsInitialized
)
{
return
NS_OK
;
}
mListService
=
do_GetService
(
NS_COOKIEBANNERLISTSERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
mListService
NS_ERROR_FAILURE
)
;
mIsInitialized
=
true
;
mListService
-
>
ImportRules
(
)
;
RefPtr
<
nsCookieInjector
>
injector
=
nsCookieInjector
:
:
GetSingleton
(
)
;
return
NS_OK
;
}
nsresult
nsCookieBannerService
:
:
Shutdown
(
)
{
MOZ_LOG
(
gCookieBannerLog
LogLevel
:
:
Debug
(
"
%
s
.
Mode
:
%
d
"
__FUNCTION__
StaticPrefs
:
:
cookiebanners_service_mode
(
)
)
)
;
if
(
!
mIsInitialized
)
{
return
NS_OK
;
}
mIsInitialized
=
false
;
mRules
.
Clear
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
GetRules
(
nsTArray
<
RefPtr
<
nsICookieBannerRule
>
>
&
aRules
)
{
aRules
.
Clear
(
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
AppendToArray
(
aRules
mRules
.
Values
(
)
)
;
return
NS_OK
;
}
nsresult
nsCookieBannerService
:
:
GetRuleForDomain
(
const
nsACString
&
aDomain
nsICookieBannerRule
*
*
aRule
)
{
NS_ENSURE_ARG_POINTER
(
aRule
)
;
*
aRule
=
nullptr
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsICookieBannerRule
>
rule
=
mRules
.
Get
(
aDomain
)
;
if
(
rule
)
{
rule
.
forget
(
aRule
)
;
}
return
NS_OK
;
}
nsresult
nsCookieBannerService
:
:
GetRuleForURI
(
nsIURI
*
aURI
nsICookieBannerRule
*
*
aRule
)
{
NS_ENSURE_ARG_POINTER
(
aURI
)
;
NS_ENSURE_ARG_POINTER
(
aRule
)
;
*
aRule
=
nullptr
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
;
nsCOMPtr
<
nsIEffectiveTLDService
>
eTLDService
(
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCString
baseDomain
;
rv
=
eTLDService
-
>
GetBaseDomain
(
aURI
0
baseDomain
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
GetRuleForDomain
(
baseDomain
aRule
)
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
GetCookiesForURI
(
nsIURI
*
aURI
nsTArray
<
RefPtr
<
nsICookieRule
>
>
&
aCookies
)
{
aCookies
.
Clear
(
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsICookieBannerRule
>
rule
;
nsresult
rv
=
GetRuleForURI
(
aURI
getter_AddRefs
(
rule
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
rule
)
{
return
NS_OK
;
}
rv
=
rule
-
>
GetCookiesOptOut
(
aCookies
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
StaticPrefs
:
:
cookiebanners_service_mode
(
)
=
=
nsICookieBannerService
:
:
MODE_REJECT_OR_ACCEPT
&
&
aCookies
.
IsEmpty
(
)
)
{
return
rule
-
>
GetCookiesOptIn
(
aCookies
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsCookieBannerService
:
:
LookupOrInsertRuleForDomain
(
const
nsACString
&
aDomain
nsICookieBannerRule
*
*
aRule
)
{
NS_ENSURE_ARG_POINTER
(
aRule
)
;
if
(
!
mIsInitialized
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsICookieBannerRule
>
rule
=
mRules
.
LookupOrInsert
(
aDomain
RefPtr
{
new
nsCookieBannerRule
(
aDomain
)
}
)
;
NS_ENSURE_TRUE
(
rule
NS_ERROR_FAILURE
)
;
rule
.
forget
(
aRule
)
;
return
NS_OK
;
}
}
