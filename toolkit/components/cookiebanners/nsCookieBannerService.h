#
ifndef
mozilla_nsCookieBannerService_h__
#
define
mozilla_nsCookieBannerService_h__
#
include
"
nsICookieBannerRule
.
h
"
#
include
"
nsICookieBannerService
.
h
"
#
include
"
nsICookieBannerListService
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
{
class
CookieBannerDomainPrefService
;
namespace
dom
{
class
BrowsingContext
;
}
class
nsCookieBannerService
final
:
public
nsIObserver
public
nsICookieBannerService
public
nsIWebProgressListener
public
nsSupportsWeakReference
{
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIWEBPROGRESSLISTENER
NS_DECL_NSICOOKIEBANNERSERVICE
public
:
static
already_AddRefed
<
nsCookieBannerService
>
GetSingleton
(
)
;
private
:
nsCookieBannerService
(
)
=
default
;
~
nsCookieBannerService
(
)
=
default
;
bool
mIsInitialized
=
false
;
nsCOMPtr
<
nsICookieBannerListService
>
mListService
;
RefPtr
<
CookieBannerDomainPrefService
>
mDomainPrefService
;
nsTHashMap
<
nsCStringHashKey
nsCOMPtr
<
nsICookieBannerRule
>
>
mRules
;
nsTHashMap
<
nsCStringHashKey
nsCOMPtr
<
nsICookieBannerRule
>
>
mGlobalRules
;
nsTHashMap
<
uint64_t
std
:
:
tuple
<
bool
bool
>
>
mReloadTelemetryData
;
static
void
OnPrefChange
(
const
char
*
aPref
void
*
aData
)
;
[
[
nodiscard
]
]
nsresult
Init
(
)
;
[
[
nodiscard
]
]
nsresult
Shutdown
(
)
;
nsresult
GetClickRulesForDomainInternal
(
const
nsACString
&
aDomain
const
bool
aIsTopLevel
const
bool
aReportTelemetry
nsTArray
<
RefPtr
<
nsIClickRule
>
>
&
aRules
)
;
nsresult
GetCookieRulesForDomainInternal
(
const
nsACString
&
aBaseDomain
const
nsICookieBannerService
:
:
Modes
aMode
const
bool
aIsTopLevel
const
bool
aReportTelemetry
nsTArray
<
RefPtr
<
nsICookieRule
>
>
&
aCookies
)
;
nsresult
HasRuleForBrowsingContextInternal
(
mozilla
:
:
dom
:
:
BrowsingContext
*
aBrowsingContext
bool
aIgnoreDomainPref
bool
&
aHasClickRule
bool
&
aHasCookieRule
)
;
nsresult
GetRuleForDomain
(
const
nsACString
&
aDomain
bool
aIsTopLevel
nsICookieBannerRule
*
*
aRule
bool
aReportTelemetry
=
false
)
;
nsresult
GetDomainPrefInternal
(
const
nsACString
&
aBaseDomain
const
bool
aIsPrivate
nsICookieBannerService
:
:
Modes
*
aModes
)
;
nsresult
SetDomainPrefInternal
(
nsIURI
*
aTopLevelURI
nsICookieBannerService
:
:
Modes
aModes
const
bool
aIsPrivate
const
bool
aPersistInPrivateBrowsing
)
;
nsresult
GetRuleForURI
(
nsIURI
*
aURI
bool
aIsTopLevel
nsICookieBannerRule
*
*
aRule
nsACString
&
aDomain
bool
aReportTelemetry
=
false
)
;
nsresult
GetServiceModeForBrowsingContext
(
dom
:
:
BrowsingContext
*
aBrowsingContext
bool
aIgnoreDomainPref
nsICookieBannerService
:
:
Modes
*
aMode
)
;
nsresult
RegisterWebProgressListener
(
nsISupports
*
aSubject
)
;
nsresult
RemoveWebProgressListener
(
nsISupports
*
aSubject
)
;
void
DailyReportTelemetry
(
)
;
nsTHashSet
<
nsCStringHashKey
>
mTelemetryReportedTopDomains
;
nsTHashSet
<
nsCStringHashKey
>
mTelemetryReportedIFrameDomains
;
void
ReportRuleLookupTelemetry
(
const
nsACString
&
aDomain
nsICookieBannerRule
*
aRule
bool
aIsTopLevel
)
;
typedef
struct
ExecutedData
{
ExecutedData
(
)
:
hasExecutedInTop
(
false
)
hasExecutedInFrame
(
false
)
hasExecutedInTopPrivate
(
false
)
hasExecutedInFramePrivate
(
false
)
{
}
bool
hasExecutedInTop
;
bool
hasExecutedInFrame
;
bool
hasExecutedInTopPrivate
;
bool
hasExecutedInFramePrivate
;
}
ExecutedData
;
nsTHashMap
<
nsCStringHashKey
ExecutedData
>
mExecutedDataForSites
;
}
;
}
#
endif
