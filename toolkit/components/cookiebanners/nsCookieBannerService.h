#
ifndef
mozilla_nsCookieBannerService_h__
#
define
mozilla_nsCookieBannerService_h__
#
include
"
nsICookieBannerRule
.
h
"
#
include
"
nsICookieBannerService
.
h
"
#
include
"
nsICookieBannerListService
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
{
class
CookieBannerDomainPrefService
;
class
nsCookieBannerService
final
:
public
nsIObserver
public
nsICookieBannerService
{
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSICOOKIEBANNERSERVICE
public
:
static
already_AddRefed
<
nsCookieBannerService
>
GetSingleton
(
)
;
private
:
nsCookieBannerService
(
)
=
default
;
~
nsCookieBannerService
(
)
=
default
;
bool
mIsInitialized
=
false
;
nsCOMPtr
<
nsICookieBannerListService
>
mListService
;
RefPtr
<
CookieBannerDomainPrefService
>
mDomainPrefService
;
nsTHashMap
<
nsCStringHashKey
nsCOMPtr
<
nsICookieBannerRule
>
>
mRules
;
nsTHashMap
<
nsCStringHashKey
nsCOMPtr
<
nsICookieBannerRule
>
>
mGlobalRules
;
static
void
OnPrefChange
(
const
char
*
aPref
void
*
aData
)
;
[
[
nodiscard
]
]
nsresult
Init
(
)
;
[
[
nodiscard
]
]
nsresult
Shutdown
(
)
;
nsresult
GetRuleForDomain
(
const
nsACString
&
aDomain
bool
aIsTopLevel
nsICookieBannerRule
*
*
aRule
bool
aReportTelemetry
=
false
)
;
nsresult
GetRuleForURI
(
nsIURI
*
aURI
bool
aIsTopLevel
nsICookieBannerRule
*
*
aRule
bool
aReportTelemetry
=
false
)
;
void
DailyReportTelemetry
(
)
;
nsTHashSet
<
nsCStringHashKey
>
mTelemetryReportedTopDomains
;
nsTHashSet
<
nsCStringHashKey
>
mTelemetryReportedIFrameDomains
;
void
ReportRuleLookupTelemetry
(
const
nsACString
&
aDomain
nsICookieBannerRule
*
aRule
bool
aIsTopLevel
)
;
}
;
}
#
endif
