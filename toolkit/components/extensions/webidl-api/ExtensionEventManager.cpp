#
include
"
ExtensionEventManager
.
h
"
#
include
"
mozilla
/
dom
/
ExtensionEventManagerBinding
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
{
namespace
extensions
{
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ExtensionEventManager
)
;
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ExtensionEventManager
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
ExtensionEventManager
mGlobal
)
;
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ExtensionEventManager
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
ExtensionEventManager
:
:
ExtensionEventManager
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aNamespace
const
nsAString
&
aEventName
)
:
mGlobal
(
aGlobal
)
mAPINamespace
(
aNamespace
)
mEventName
(
aEventName
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mGlobal
)
;
}
JSObject
*
ExtensionEventManager
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
ExtensionEventManager_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsIGlobalObject
*
ExtensionEventManager
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
bool
ExtensionEventManager
:
:
HasListener
(
dom
:
:
Function
&
aCallback
ErrorResult
&
aRv
)
const
{
return
false
;
}
bool
ExtensionEventManager
:
:
HasListeners
(
ErrorResult
&
aRv
)
const
{
return
false
;
}
}
}
