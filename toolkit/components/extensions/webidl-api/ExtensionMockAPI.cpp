#
include
"
ExtensionMockAPI
.
h
"
#
include
"
ExtensionEventManager
.
h
"
#
include
"
mozilla
/
dom
/
ExtensionMockAPIBinding
.
h
"
#
include
"
mozilla
/
extensions
/
ExtensionPort
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
{
namespace
extensions
{
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ExtensionMockAPI
)
;
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ExtensionMockAPI
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
ExtensionMockAPI
mGlobal
mOnTestEventMgr
)
;
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ExtensionMockAPI
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
ExtensionMockAPI
:
:
ExtensionMockAPI
(
nsIGlobalObject
*
aGlobal
ExtensionBrowser
*
aExtensionBrowser
)
:
mGlobal
(
aGlobal
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mGlobal
)
;
}
bool
ExtensionMockAPI
:
:
IsAllowed
(
JSContext
*
aCx
JSObject
*
aGlobal
)
{
return
true
;
}
JSObject
*
ExtensionMockAPI
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
ExtensionMockAPI_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsIGlobalObject
*
ExtensionMockAPI
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
void
ExtensionMockAPI
:
:
GetPropertyAsErrorObject
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
)
{
ExtensionAPIBase
:
:
GetWebExtPropertyAsJSValue
(
aCx
u
"
propertyAsErrorObject
"
_ns
aRetval
)
;
}
void
ExtensionMockAPI
:
:
GetPropertyAsString
(
DOMString
&
aRetval
)
{
GetWebExtPropertyAsString
(
u
"
getPropertyAsString
"
_ns
aRetval
)
;
}
ExtensionEventManager
*
ExtensionMockAPI
:
:
OnTestEvent
(
)
{
if
(
!
mOnTestEventMgr
)
{
mOnTestEventMgr
=
CreateEventManager
(
u
"
onTestEvent
"
_ns
)
;
}
return
mOnTestEventMgr
;
}
}
}
