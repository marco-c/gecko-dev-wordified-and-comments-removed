#
ifndef
mozilla_extensions_ExtensionEventManager_h
#
define
mozilla_extensions_ExtensionEventManager_h
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsPointerHashKeys
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
ExtensionAPIBase
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
Function
;
}
namespace
extensions
{
class
ExtensionBrowser
;
class
ExtensionEventListener
;
class
ExtensionEventManager
final
:
public
nsISupports
public
nsWrapperCache
public
ExtensionAPIBase
{
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
ExtensionBrowser
>
mExtensionBrowser
;
nsString
mAPINamespace
;
nsString
mEventName
;
nsString
mAPIObjectType
;
nsString
mAPIObjectId
;
using
ListenerWrappersMap
=
JS
:
:
GCHashMap
<
JS
:
:
Heap
<
JSObject
*
>
RefPtr
<
ExtensionEventListener
>
js
:
:
MovableCellHasher
<
JS
:
:
Heap
<
JSObject
*
>
>
js
:
:
SystemAllocPolicy
>
;
ListenerWrappersMap
mListeners
;
~
ExtensionEventManager
(
)
;
void
ReleaseListeners
(
)
;
protected
:
nsIGlobalObject
*
GetGlobalObject
(
)
const
override
{
return
mGlobal
;
}
ExtensionBrowser
*
GetExtensionBrowser
(
)
const
override
{
return
mExtensionBrowser
;
}
nsString
GetAPINamespace
(
)
const
override
{
return
mAPINamespace
;
}
nsString
GetAPIObjectType
(
)
const
override
{
return
mAPIObjectType
;
}
nsString
GetAPIObjectId
(
)
const
override
{
return
mAPIObjectId
;
}
public
:
ExtensionEventManager
(
nsIGlobalObject
*
aGlobal
ExtensionBrowser
*
aExtensionBrowser
const
nsAString
&
aNamespace
const
nsAString
&
aEventName
const
nsAString
&
aObjectType
=
VoidString
(
)
const
nsAString
&
aObjectId
=
VoidString
(
)
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
bool
HasListener
(
dom
:
:
Function
&
aCallback
ErrorResult
&
aRv
)
const
;
bool
HasListeners
(
ErrorResult
&
aRv
)
const
;
void
AddListener
(
JSContext
*
aCx
dom
:
:
Function
&
aCallback
const
dom
:
:
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aOptions
ErrorResult
&
aRv
)
;
void
RemoveListener
(
dom
:
:
Function
&
aCallback
ErrorResult
&
aRv
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ExtensionEventManager
)
}
;
}
}
#
endif
