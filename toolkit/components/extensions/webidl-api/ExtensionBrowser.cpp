#
include
"
ExtensionBrowser
.
h
"
#
include
"
mozilla
/
dom
/
ExtensionBrowserBinding
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
extensions
/
ExtensionAlarms
.
h
"
#
include
"
mozilla
/
extensions
/
ExtensionMockAPI
.
h
"
#
include
"
mozilla
/
extensions
/
ExtensionRuntime
.
h
"
#
include
"
mozilla
/
extensions
/
ExtensionTest
.
h
"
#
include
"
mozilla
/
extensions
/
WebExtensionPolicy
.
h
"
namespace
mozilla
{
namespace
extensions
{
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ExtensionBrowser
)
;
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ExtensionBrowser
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
ExtensionBrowser
mGlobal
mExtensionAlarms
mExtensionMockAPI
mExtensionRuntime
mExtensionTest
)
;
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ExtensionBrowser
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
ExtensionBrowser
:
:
ExtensionBrowser
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mGlobal
)
;
}
JSObject
*
ExtensionBrowser
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
ExtensionBrowser_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsIGlobalObject
*
ExtensionBrowser
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
bool
ExtensionAPIAllowed
(
JSContext
*
aCx
JSObject
*
aGlobal
)
{
#
ifdef
MOZ_WEBEXT_WEBIDL_ENABLED
MOZ_DIAGNOSTIC_ASSERT
(
!
NS_IsMainThread
(
)
"
ExtensionAPI
webidl
bindings
does
not
yet
support
main
thread
globals
"
)
;
if
(
!
StaticPrefs
:
:
extensions_backgroundServiceWorker_enabled_AtStartup
(
)
)
{
return
false
;
}
auto
*
workerPrivate
=
mozilla
:
:
dom
:
:
GetWorkerPrivateFromContext
(
aCx
)
;
MOZ_ASSERT
(
workerPrivate
)
;
MOZ_ASSERT
(
workerPrivate
-
>
IsServiceWorker
(
)
)
;
return
workerPrivate
-
>
ExtensionAPIAllowed
(
)
;
#
else
return
false
;
#
endif
}
ExtensionAlarms
*
ExtensionBrowser
:
:
GetExtensionAlarms
(
)
{
if
(
!
mExtensionAlarms
)
{
mExtensionAlarms
=
new
ExtensionAlarms
(
mGlobal
this
)
;
}
return
mExtensionAlarms
;
}
ExtensionMockAPI
*
ExtensionBrowser
:
:
GetExtensionMockAPI
(
)
{
if
(
!
mExtensionMockAPI
)
{
mExtensionMockAPI
=
new
ExtensionMockAPI
(
mGlobal
this
)
;
}
return
mExtensionMockAPI
;
}
ExtensionRuntime
*
ExtensionBrowser
:
:
GetExtensionRuntime
(
)
{
if
(
!
mExtensionRuntime
)
{
mExtensionRuntime
=
new
ExtensionRuntime
(
mGlobal
this
)
;
}
return
mExtensionRuntime
;
}
ExtensionTest
*
ExtensionBrowser
:
:
GetExtensionTest
(
)
{
if
(
!
mExtensionTest
)
{
mExtensionTest
=
new
ExtensionTest
(
mGlobal
this
)
;
}
return
mExtensionTest
;
}
}
}
