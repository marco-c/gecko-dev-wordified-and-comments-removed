#
ifndef
mozilla_extensions_ExtensionPort_h
#
define
mozilla_extensions_ExtensionPort_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
ExtensionAPIBase
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
struct
ExtensionPortDescriptor
;
}
namespace
extensions
{
class
ExtensionEventManager
;
class
ExtensionPort
final
:
public
nsISupports
public
nsWrapperCache
public
SupportsWeakPtr
public
ExtensionAPIBase
{
public
:
static
already_AddRefed
<
ExtensionPort
>
Create
(
nsIGlobalObject
*
aGlobal
ExtensionBrowser
*
aExtensionBrowser
UniquePtr
<
dom
:
:
ExtensionPortDescriptor
>
&
&
aPortDescriptor
)
;
static
UniquePtr
<
dom
:
:
ExtensionPortDescriptor
>
ToPortDescriptor
(
JS
:
:
Handle
<
JS
:
:
Value
>
aDescriptorValue
ErrorResult
&
aRv
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
ExtensionEventManager
*
OnDisconnect
(
)
;
ExtensionEventManager
*
OnMessage
(
)
;
void
GetName
(
nsAString
&
aString
)
;
void
GetError
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
)
{
GetWebExtPropertyAsJSValue
(
aCx
u
"
error
"
_ns
aRetval
)
;
}
void
GetSender
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
)
{
GetWebExtPropertyAsJSValue
(
aCx
u
"
sender
"
_ns
aRetval
)
;
}
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
ExtensionPort
)
protected
:
nsIGlobalObject
*
GetGlobalObject
(
)
const
override
{
return
mGlobal
;
}
ExtensionBrowser
*
GetExtensionBrowser
(
)
const
override
{
return
mExtensionBrowser
;
}
nsString
GetAPINamespace
(
)
const
override
{
return
u
"
runtime
"
_ns
;
}
nsString
GetAPIObjectType
(
)
const
override
{
return
u
"
Port
"
_ns
;
}
nsString
GetAPIObjectId
(
)
const
override
;
private
:
ExtensionPort
(
nsIGlobalObject
*
aGlobal
ExtensionBrowser
*
aExtensionBrowser
UniquePtr
<
dom
:
:
ExtensionPortDescriptor
>
&
&
aPortDescriptor
)
;
~
ExtensionPort
(
)
=
default
;
void
ForgetReleasedPort
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
ExtensionBrowser
>
mExtensionBrowser
;
RefPtr
<
ExtensionEventManager
>
mOnDisconnectEventMgr
;
RefPtr
<
ExtensionEventManager
>
mOnMessageEventMgr
;
UniquePtr
<
dom
:
:
ExtensionPortDescriptor
>
mPortDescriptor
;
RefPtr
<
dom
:
:
Function
>
mCallback
;
}
;
}
}
#
endif
