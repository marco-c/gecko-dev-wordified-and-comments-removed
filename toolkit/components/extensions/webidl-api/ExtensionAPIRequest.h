#
ifndef
mozilla_extensions_ExtensionAPIRequest_h
#
define
mozilla_extensions_ExtensionAPIRequest_h
#
include
"
mozIExtensionAPIRequestHandling
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
extensions
/
WebExtensionPolicy
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
{
namespace
extensions
{
class
ExtensionAPIRequestForwarder
;
class
RequestWorkerRunnable
;
struct
ExtensionAPIRequestTarget
{
nsString
mNamespace
;
nsString
mMethod
;
nsString
mObjectType
;
nsString
mObjectId
;
}
;
class
ExtensionServiceWorkerInfo
:
public
mozIExtensionServiceWorkerInfo
{
public
:
NS_DECL_MOZIEXTENSIONSERVICEWORKERINFO
NS_DECL_ISUPPORTS
explicit
ExtensionServiceWorkerInfo
(
const
dom
:
:
ClientInfo
&
aClientInfo
)
:
mClientInfo
(
aClientInfo
)
{
}
private
:
virtual
~
ExtensionServiceWorkerInfo
(
)
=
default
;
dom
:
:
ClientInfo
mClientInfo
;
}
;
class
ExtensionAPIRequest
:
public
mozIExtensionAPIRequest
{
public
:
using
APIRequestType
=
mozIExtensionAPIRequest
:
:
RequestType
;
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ExtensionAPIRequest
)
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_MOZIEXTENSIONAPIREQUEST
explicit
ExtensionAPIRequest
(
const
mozIExtensionAPIRequest
:
:
RequestType
aRequestType
const
ExtensionAPIRequestTarget
&
aRequestTarget
)
;
void
Init
(
Maybe
<
dom
:
:
ClientInfo
>
&
aSWClientInfo
JS
:
:
HandleValue
aRequestArgs
JS
:
:
HandleValue
aCallerStack
)
;
static
bool
ShouldHaveResult
(
const
APIRequestType
&
aRequestType
)
{
switch
(
aRequestType
)
{
case
APIRequestType
:
:
GET_PROPERTY
:
case
APIRequestType
:
:
CALL_FUNCTION
:
case
APIRequestType
:
:
CALL_FUNCTION_ASYNC
:
return
true
;
case
APIRequestType
:
:
CALL_FUNCTION_NO_RETURN
:
case
APIRequestType
:
:
ADD_LISTENER
:
case
APIRequestType
:
:
REMOVE_LISTENER
:
break
;
default
:
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Unexpected
APIRequestType
"
)
;
}
return
false
;
}
bool
ShouldHaveResult
(
)
const
{
return
ShouldHaveResult
(
mRequestType
)
;
}
private
:
virtual
~
ExtensionAPIRequest
(
)
{
mSWClientInfo
=
Nothing
(
)
;
mArgs
.
setUndefined
(
)
;
mStack
.
setUndefined
(
)
;
mozilla
:
:
DropJSObjects
(
this
)
;
}
;
APIRequestType
mRequestType
;
ExtensionAPIRequestTarget
mRequestTarget
;
JS
:
:
Heap
<
JS
:
:
Value
>
mStack
;
JS
:
:
Heap
<
JS
:
:
Value
>
mArgs
;
Maybe
<
dom
:
:
ClientInfo
>
mSWClientInfo
;
RefPtr
<
ExtensionServiceWorkerInfo
>
mSWInfo
;
}
;
}
}
#
endif
