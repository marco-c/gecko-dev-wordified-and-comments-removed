#
ifndef
mozilla_extensions_ExtensionEventListener_h
#
define
mozilla_extensions_ExtensionEventListener_h
#
include
"
js
/
Promise
.
h
"
#
include
"
mozIExtensionAPIRequestHandling
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRunnable
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
Function
;
}
namespace
extensions
{
class
ExtensionEventListener
final
:
public
mozIExtensionEventListener
{
public
:
NS_DECL_MOZIEXTENSIONEVENTLISTENER
NS_DECL_THREADSAFE_ISUPPORTS
using
CleanupCallback
=
std
:
:
function
<
void
(
)
>
;
static
already_AddRefed
<
ExtensionEventListener
>
Create
(
nsIGlobalObject
*
aGlobal
dom
:
:
Function
*
aCallback
CleanupCallback
&
&
aCleanupCallback
ErrorResult
&
aRv
)
;
static
bool
IsPromise
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
if
(
!
aValue
.
isObject
(
)
)
{
return
false
;
}
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
&
aValue
.
toObject
(
)
)
;
return
JS
:
:
IsPromiseObject
(
obj
)
;
}
dom
:
:
WorkerPrivate
*
GetWorkerPrivate
(
)
const
;
RefPtr
<
dom
:
:
Function
>
GetCallback
(
)
const
{
return
mCallback
;
}
nsCOMPtr
<
nsIGlobalObject
>
GetGlobalObject
(
)
const
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryReferent
(
mGlobal
)
;
return
global
;
}
void
Cleanup
(
)
{
if
(
mWorkerRef
)
{
MutexAutoLock
lock
(
mMutex
)
;
mWorkerRef
-
>
Private
(
)
-
>
AssertIsOnWorkerThread
(
)
;
mWorkerRef
=
nullptr
;
}
mGlobal
=
nullptr
;
mCallback
=
nullptr
;
}
private
:
ExtensionEventListener
(
nsIGlobalObject
*
aGlobal
dom
:
:
Function
*
aCallback
)
:
mGlobal
(
do_GetWeakReference
(
aGlobal
)
)
mCallback
(
aCallback
)
mMutex
(
"
ExtensionEventListener
:
:
mMutex
"
)
{
}
;
static
UniquePtr
<
dom
:
:
StructuredCloneHolder
>
SerializeCallArguments
(
const
nsTArray
<
JS
:
:
Value
>
&
aArgs
JSContext
*
aCx
ErrorResult
&
aRv
)
;
~
ExtensionEventListener
(
)
{
Cleanup
(
)
;
}
;
RefPtr
<
dom
:
:
ThreadSafeWorkerRef
>
mWorkerRef
;
nsWeakPtr
mGlobal
;
RefPtr
<
dom
:
:
Function
>
mCallback
;
Mutex
mMutex
;
}
;
class
ExtensionListenerCallWorkerRunnable
:
public
dom
:
:
WorkerRunnable
{
friend
class
ExtensionListenerCallPromiseResultHandler
;
public
:
ExtensionListenerCallWorkerRunnable
(
const
RefPtr
<
ExtensionEventListener
>
&
aExtensionEventListener
UniquePtr
<
dom
:
:
StructuredCloneHolder
>
aArgsHolder
RefPtr
<
dom
:
:
Promise
>
aPromiseRetval
=
nullptr
)
:
WorkerRunnable
(
aExtensionEventListener
-
>
GetWorkerPrivate
(
)
WorkerThreadUnchangedBusyCount
)
mListener
(
aExtensionEventListener
)
mArgsHolder
(
std
:
:
move
(
aArgsHolder
)
)
mPromiseResult
(
std
:
:
move
(
aPromiseRetval
)
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aExtensionEventListener
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
bool
WorkerRun
(
JSContext
*
aCx
dom
:
:
WorkerPrivate
*
aWorkerPrivate
)
override
;
private
:
~
ExtensionListenerCallWorkerRunnable
(
)
{
NS_ReleaseOnMainThread
(
mPromiseResult
.
forget
(
)
)
;
ReleaseArgsHolder
(
)
;
mListener
=
nullptr
;
}
void
ReleaseArgsHolder
(
)
{
if
(
NS_IsMainThread
(
)
)
{
mArgsHolder
=
nullptr
;
}
else
{
auto
releaseArgsHolder
=
[
argsHolder
=
std
:
:
move
(
mArgsHolder
)
]
(
)
{
}
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
NS_NewRunnableFunction
(
__func__
std
:
:
move
(
releaseArgsHolder
)
)
;
NS_DispatchToMainThread
(
runnable
)
;
}
}
void
DeserializeCallArguments
(
JSContext
*
aCx
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArg
ErrorResult
&
aRv
)
;
RefPtr
<
ExtensionEventListener
>
mListener
;
UniquePtr
<
dom
:
:
StructuredCloneHolder
>
mArgsHolder
;
RefPtr
<
dom
:
:
Promise
>
mPromiseResult
;
}
;
class
ExtensionListenerCallPromiseResultHandler
:
public
dom
:
:
PromiseNativeHandler
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
static
void
Create
(
const
RefPtr
<
dom
:
:
Promise
>
&
aPromise
const
RefPtr
<
ExtensionListenerCallWorkerRunnable
>
&
aWorkerRunnable
dom
:
:
ThreadSafeWorkerRef
*
aWorkerRef
)
;
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
enum
class
PromiseCallbackType
{
Resolve
Reject
}
;
private
:
ExtensionListenerCallPromiseResultHandler
(
dom
:
:
ThreadSafeWorkerRef
*
aWorkerRef
RefPtr
<
ExtensionListenerCallWorkerRunnable
>
aWorkerRunnable
)
:
mWorkerRef
(
aWorkerRef
)
mWorkerRunnable
(
std
:
:
move
(
aWorkerRunnable
)
)
{
}
~
ExtensionListenerCallPromiseResultHandler
(
)
=
default
;
void
WorkerRunCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
PromiseCallbackType
aCallbackType
)
;
RefPtr
<
dom
:
:
Promise
>
mOutPromise
;
RefPtr
<
dom
:
:
ThreadSafeWorkerRef
>
mWorkerRef
;
RefPtr
<
ExtensionListenerCallWorkerRunnable
>
mWorkerRunnable
;
}
;
}
}
#
endif
