#
include
"
ExtensionAlarms
.
h
"
#
include
"
ExtensionEventManager
.
h
"
#
include
"
mozilla
/
dom
/
ExtensionAlarmsBinding
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
{
namespace
extensions
{
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ExtensionAlarms
)
;
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ExtensionAlarms
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
ExtensionAlarms
mGlobal
mExtensionBrowser
mOnAlarmEventMgr
)
;
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ExtensionAlarms
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_WEBEXT_EVENTMGR
(
ExtensionAlarms
u
"
onAlarm
"
_ns
OnAlarm
)
ExtensionAlarms
:
:
ExtensionAlarms
(
nsIGlobalObject
*
aGlobal
ExtensionBrowser
*
aExtensionBrowser
)
:
mGlobal
(
aGlobal
)
mExtensionBrowser
(
aExtensionBrowser
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mGlobal
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mExtensionBrowser
)
;
}
bool
ExtensionAlarms
:
:
IsAllowed
(
JSContext
*
aCx
JSObject
*
aGlobal
)
{
return
true
;
}
JSObject
*
ExtensionAlarms
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
ExtensionAlarms_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsIGlobalObject
*
ExtensionAlarms
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
}
}
