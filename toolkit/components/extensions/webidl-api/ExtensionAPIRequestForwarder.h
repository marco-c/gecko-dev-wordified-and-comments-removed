#
ifndef
mozilla_extensions_ExtensionAPIRequestForwarder_h
#
define
mozilla_extensions_ExtensionAPIRequestForwarder_h
#
include
"
ExtensionAPIRequest
.
h
"
#
include
"
mozilla
/
dom
/
PromiseWorkerProxy
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRunnable
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ClientInfoAndState
;
class
Function
;
class
SerializedStackHolder
;
}
namespace
extensions
{
class
ExtensionAPIRequestForwarder
;
class
ExtensionAPIRequestForwarder
{
friend
class
ExtensionAPIRequest
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ExtensionAPIRequestForwarder
)
public
:
using
APIRequestType
=
mozIExtensionAPIRequest
:
:
RequestType
;
using
APIResultType
=
mozIExtensionAPIRequestResult
:
:
ResultType
;
static
nsresult
JSArrayToSequence
(
JSContext
*
aCx
JS
:
:
HandleValue
aJSValue
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aResult
)
;
static
void
ThrowUnexpectedError
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
static
mozIExtensionAPIRequestHandler
&
APIRequestHandler
(
)
;
ExtensionAPIRequestForwarder
(
const
APIRequestType
aRequestType
const
nsAString
&
aApiNamespace
const
nsAString
&
aApiMethod
const
nsAString
&
aApiObjectType
=
u
"
"
_ns
const
nsAString
&
aApiObjectId
=
u
"
"
_ns
)
;
mozIExtensionAPIRequest
:
:
RequestType
GetRequestType
(
)
const
{
return
mRequestType
;
}
const
ExtensionAPIRequestTarget
*
GetRequestTarget
(
)
{
return
&
mRequestTarget
;
}
void
Run
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
ErrorResult
&
aRv
)
;
void
Run
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
ExtensionEventListener
*
aListener
ErrorResult
&
aRv
)
;
void
Run
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
JS
:
:
MutableHandleValue
aRetVal
ErrorResult
&
aRv
)
;
void
Run
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
ExtensionEventListener
*
aListener
JS
:
:
MutableHandleValue
aRetVal
ErrorResult
&
aRv
)
;
void
Run
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
const
RefPtr
<
dom
:
:
Promise
>
&
aPromiseRetval
ErrorResult
&
aRv
)
;
void
Run
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
JS
:
:
MutableHandleValue
aRetVal
ErrorResult
&
aRv
)
;
void
SetSerializedCallerStack
(
UniquePtr
<
dom
:
:
SerializedStackHolder
>
aCallerStack
)
;
protected
:
virtual
~
ExtensionAPIRequestForwarder
(
)
=
default
;
private
:
already_AddRefed
<
ExtensionAPIRequest
>
CreateAPIRequest
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
ExtensionEventListener
*
aListener
ErrorResult
&
aRv
)
;
APIRequestType
mRequestType
;
ExtensionAPIRequestTarget
mRequestTarget
;
Maybe
<
UniquePtr
<
dom
:
:
SerializedStackHolder
>
>
mStackHolder
;
}
;
class
RequestWorkerRunnable
:
public
dom
:
:
WorkerMainThreadRunnable
{
public
:
using
APIRequestType
=
mozIExtensionAPIRequest
:
:
RequestType
;
using
APIResultType
=
mozIExtensionAPIRequestResult
:
:
ResultType
;
RequestWorkerRunnable
(
dom
:
:
WorkerPrivate
*
aWorkerPrivate
ExtensionAPIRequestForwarder
*
aOuterAPIRequest
)
;
void
SetSerializedCallerStack
(
UniquePtr
<
dom
:
:
SerializedStackHolder
>
aCallerStack
)
;
void
Init
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
ExtensionEventListener
*
aListener
ErrorResult
&
aRv
)
;
void
Init
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
ErrorResult
&
aRv
)
{
Init
(
aGlobal
aCx
aArgs
nullptr
aRv
)
;
}
void
Init
(
nsIGlobalObject
*
aGlobal
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
const
RefPtr
<
dom
:
:
Promise
>
&
aPromiseRetval
ErrorResult
&
aRv
)
;
bool
MainThreadRun
(
)
override
;
void
ReadResult
(
JSContext
*
aCx
JS
:
:
MutableHandleValue
aResult
ErrorResult
&
aRv
)
;
Maybe
<
mozIExtensionAPIRequestResult
:
:
ResultType
>
GetResultType
(
)
{
return
mResultType
;
}
protected
:
virtual
bool
ProcessHandlerResult
(
JSContext
*
aCx
JS
:
:
MutableHandleValue
aRetval
)
;
already_AddRefed
<
WebExtensionPolicy
>
GetWebExtensionPolicy
(
)
;
already_AddRefed
<
ExtensionAPIRequest
>
CreateAPIRequest
(
JSContext
*
aCx
)
;
void
SerializeCallerStack
(
JSContext
*
aCx
)
;
void
DeserializeCallerStack
(
JSContext
*
aCx
JS
:
:
MutableHandleValue
aRetval
)
;
void
SerializeArgs
(
JSContext
*
aCx
const
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArgs
ErrorResult
&
aRv
)
;
nsresult
DeserializeArgs
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aArgs
)
;
bool
HandleAPIRequest
(
JSContext
*
aCx
JS
:
:
MutableHandleValue
aRetval
)
;
Maybe
<
mozIExtensionAPIRequestResult
:
:
ResultType
>
mResultType
;
Maybe
<
UniquePtr
<
dom
:
:
StructuredCloneHolder
>
>
mResultHolder
;
RefPtr
<
dom
:
:
PromiseWorkerProxy
>
mPromiseProxy
;
Maybe
<
UniquePtr
<
dom
:
:
StructuredCloneHolder
>
>
mArgsHolder
;
Maybe
<
UniquePtr
<
dom
:
:
SerializedStackHolder
>
>
mStackHolder
;
Maybe
<
dom
:
:
ClientInfo
>
mClientInfo
;
uint64_t
mSWDescriptorId
;
RefPtr
<
ExtensionEventListener
>
mEventListener
;
ExtensionAPIRequestForwarder
*
mOuterRequest
;
}
;
class
NotifyWorkerDestroyedRunnable
:
public
Runnable
{
uint64_t
mSWDescriptorId
;
nsCOMPtr
<
nsIURI
>
mSWBaseURI
;
public
:
explicit
NotifyWorkerDestroyedRunnable
(
const
uint64_t
aServiceWorkerDescriptorId
const
nsCOMPtr
<
nsIURI
>
&
aWorkerBaseURI
)
:
Runnable
(
"
extensions
:
:
NotifyWorkerDestroyedRunnable
"
)
mSWDescriptorId
(
aServiceWorkerDescriptorId
)
mSWBaseURI
(
aWorkerBaseURI
)
{
MOZ_ASSERT
(
mSWDescriptorId
>
0
)
;
MOZ_ASSERT
(
mSWBaseURI
)
;
}
NS_IMETHOD
Run
(
)
override
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
NotifyWorkerDestroyedRunnable
Runnable
)
private
:
~
NotifyWorkerDestroyedRunnable
(
)
=
default
;
}
;
}
}
#
endif
