"
use
strict
"
;
function
errorMatches
(
error
expectedError
context
)
{
if
(
expectedError
=
=
=
null
)
{
return
true
;
}
if
(
typeof
expectedError
=
=
=
"
function
"
)
{
return
context
.
runSafeWithoutClone
(
expectedError
error
)
;
}
if
(
typeof
error
!
=
=
"
object
"
|
|
error
=
=
null
|
|
typeof
error
.
message
!
=
=
"
string
"
)
{
return
false
;
}
if
(
typeof
expectedError
=
=
=
"
string
"
)
{
return
error
.
message
=
=
=
expectedError
;
}
try
{
return
expectedError
.
test
(
error
.
message
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
false
;
}
function
toSource
(
value
)
{
if
(
value
=
=
=
null
)
{
return
null
;
}
if
(
value
=
=
=
undefined
)
{
return
null
;
}
if
(
typeof
value
=
=
=
"
string
"
)
{
return
JSON
.
stringify
(
value
)
;
}
try
{
return
String
(
value
.
toSource
(
)
)
;
}
catch
(
e
)
{
return
"
<
unknown
>
"
;
}
}
function
makeTestAPI
(
context
)
{
function
assertTrue
(
.
.
.
args
)
{
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
assertTrue
"
args
)
;
}
return
{
test
:
{
sendMessage
(
.
.
.
args
)
{
args
=
Cu
.
cloneInto
(
args
context
.
cloneScope
)
;
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
sendMessage
"
args
)
;
}
assertTrue
(
value
msg
)
{
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
assertTrue
"
[
Boolean
(
value
)
String
(
msg
)
]
)
;
}
assertFalse
(
value
msg
)
{
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
assertFalse
"
[
Boolean
(
value
)
String
(
msg
)
]
)
;
}
assertEq
(
expected
actual
msg
)
{
let
equal
=
expected
=
=
=
actual
;
expected
+
=
"
"
;
actual
+
=
"
"
;
if
(
!
equal
&
&
expected
=
=
=
actual
)
{
actual
+
=
"
(
different
)
"
;
}
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
assertEq
"
[
expected
actual
String
(
msg
)
]
)
;
}
assertRejects
(
promise
expectedError
msg
)
{
promise
=
Promise
.
resolve
(
promise
)
;
if
(
msg
)
{
msg
=
:
{
msg
}
;
}
return
promise
.
then
(
result
=
>
{
assertTrue
(
false
Promise
resolved
expected
rejection
{
msg
}
)
;
}
error
=
>
{
let
errorMessage
=
toSource
(
error
&
&
error
.
message
)
;
assertTrue
(
errorMatches
(
error
expectedError
context
)
Promise
rejected
expecting
rejection
to
match
{
toSource
(
expectedError
)
}
+
got
{
errorMessage
}
{
msg
}
)
;
}
)
;
}
assertThrows
(
func
expectedError
msg
)
{
if
(
msg
)
{
msg
=
:
{
msg
}
;
}
try
{
func
(
)
;
assertTrue
(
false
Function
did
not
throw
expected
error
{
msg
}
)
;
}
catch
(
error
)
{
let
errorMessage
=
toSource
(
error
&
&
error
.
message
)
;
assertTrue
(
errorMatches
(
error
expectedError
context
)
Promise
rejected
expecting
rejection
to
match
{
toSource
(
expectedError
)
}
+
got
{
errorMessage
}
{
msg
}
)
;
}
}
}
}
;
}
extensions
.
registerSchemaAPI
(
"
test
"
"
addon_child
"
makeTestAPI
)
;
extensions
.
registerSchemaAPI
(
"
test
"
"
content_child
"
makeTestAPI
)
;
