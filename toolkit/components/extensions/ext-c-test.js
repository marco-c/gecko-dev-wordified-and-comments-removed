"
use
strict
"
;
function
testApiFactory
(
context
)
{
return
{
test
:
{
sendMessage
(
.
.
.
args
)
{
args
=
Cu
.
cloneInto
(
args
context
.
cloneScope
)
;
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
sendMessage
"
args
)
;
}
assertTrue
(
value
msg
)
{
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
assertTrue
"
[
Boolean
(
value
)
String
(
msg
)
]
)
;
}
assertFalse
(
value
msg
)
{
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
assertFalse
"
[
Boolean
(
value
)
String
(
msg
)
]
)
;
}
assertEq
(
expected
actual
msg
)
{
let
equal
=
expected
=
=
=
actual
;
expected
+
=
"
"
;
actual
+
=
"
"
;
if
(
!
equal
&
&
expected
=
=
=
actual
)
{
actual
+
=
"
(
different
)
"
;
}
context
.
childManager
.
callParentFunctionNoReturn
(
"
test
.
assertEq
"
[
expected
actual
String
(
msg
)
]
)
;
}
}
}
;
}
extensions
.
registerSchemaAPI
(
"
test
"
"
addon_child
"
testApiFactory
)
;
extensions
.
registerSchemaAPI
(
"
test
"
"
content_child
"
testApiFactory
)
;
