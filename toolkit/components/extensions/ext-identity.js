"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
URL
"
"
XMLHttpRequest
"
]
)
;
var
{
promiseDocumentLoaded
}
=
ExtensionUtils
;
const
checkRedirected
=
(
url
redirectURI
)
=
>
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
"
HEAD
"
url
)
;
xhr
.
onload
=
(
)
=
>
{
reject
(
0
)
;
}
;
xhr
.
onerror
=
(
)
=
>
{
reject
(
xhr
.
status
)
;
}
;
xhr
.
channel
.
notificationCallbacks
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIInterfaceRequestor
Ci
.
nsIChannelEventSync
]
)
getInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIChannelEventSink
]
)
asyncOnChannelRedirect
(
oldChannel
newChannel
flags
callback
)
{
let
responseURL
=
newChannel
.
URI
.
spec
;
if
(
responseURL
.
startsWith
(
redirectURI
)
)
{
resolve
(
responseURL
)
;
callback
.
onRedirectVerifyCallback
(
Components
.
results
.
NS_BINDING_ABORTED
)
;
return
;
}
callback
.
onRedirectVerifyCallback
(
Components
.
results
.
NS_OK
)
;
}
}
;
xhr
.
send
(
)
;
}
)
;
}
;
const
openOAuthWindow
=
(
details
redirectURI
)
=
>
{
let
args
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
let
supportsStringPrefURL
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
supportsStringPrefURL
.
data
=
details
.
url
;
args
.
appendElement
(
supportsStringPrefURL
)
;
let
window
=
Services
.
ww
.
openWindow
(
null
Services
.
prefs
.
getCharPref
(
"
browser
.
chromeURL
"
)
"
launchWebAuthFlow_dialog
"
"
chrome
location
=
yes
centerscreen
dialog
=
no
resizable
=
yes
"
args
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
wpl
;
function
unloadlistener
(
)
{
window
.
removeEventListener
(
"
unload
"
unloadlistener
)
;
window
.
gBrowser
.
removeProgressListener
(
wpl
)
;
reject
(
{
message
:
"
User
cancelled
or
denied
access
.
"
}
)
;
}
wpl
=
{
onStateChange
(
progress
request
flags
status
)
{
if
(
request
&
&
request
.
URI
&
&
request
.
URI
.
spec
.
startsWith
(
redirectURI
)
)
{
window
.
gBrowser
.
webNavigation
.
stop
(
Ci
.
nsIWebNavigation
.
STOP_ALL
)
;
window
.
removeEventListener
(
"
unload
"
unloadlistener
)
;
window
.
gBrowser
.
removeProgressListener
(
wpl
)
;
window
.
close
(
)
;
resolve
(
request
.
URI
.
spec
)
;
}
}
}
;
promiseDocumentLoaded
(
window
.
document
)
.
then
(
(
)
=
>
{
window
.
gBrowser
.
addProgressListener
(
wpl
)
;
window
.
addEventListener
(
"
unload
"
unloadlistener
)
;
}
)
;
}
)
;
}
;
this
.
identity
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
identity
:
{
launchWebAuthFlow
:
function
(
details
)
{
let
url
redirectURI
;
try
{
url
=
new
URL
(
details
.
url
)
;
}
catch
(
e
)
{
return
Promise
.
reject
(
{
message
:
"
details
.
url
is
invalid
"
}
)
;
}
try
{
redirectURI
=
new
URL
(
url
.
searchParams
.
get
(
"
redirect_uri
"
)
)
;
if
(
!
redirectURI
)
{
return
Promise
.
reject
(
{
message
:
"
redirect_uri
is
missing
"
}
)
;
}
}
catch
(
e
)
{
return
Promise
.
reject
(
{
message
:
"
redirect_uri
is
invalid
"
}
)
;
}
return
checkRedirected
(
details
.
url
redirectURI
)
.
catch
(
(
requestError
)
=
>
{
if
(
requestError
!
=
=
0
)
{
Cu
.
reportError
(
browser
.
identity
auth
check
failed
with
{
requestError
}
)
;
return
Promise
.
reject
(
{
message
:
"
Invalid
request
"
}
)
;
}
if
(
!
details
.
interactive
)
{
return
Promise
.
reject
(
{
message
:
Requires
user
interaction
}
)
;
}
return
openOAuthWindow
(
details
redirectURI
)
;
}
)
;
}
}
}
;
}
}
;
