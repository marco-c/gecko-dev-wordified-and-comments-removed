"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
TelemetryController
:
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
sys
.
mjs
"
TelemetryUtils
:
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
sys
.
mjs
"
}
)
;
function
desktopCheck
(
)
{
if
(
AppConstants
.
MOZ_BUILD_APP
!
=
=
"
browser
"
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
"
This
API
is
only
supported
on
desktop
"
)
;
}
}
this
.
telemetry
=
class
extends
ExtensionAPI
{
getAPI
(
_context
)
{
return
{
telemetry
:
{
submitPing
(
type
payload
options
)
{
desktopCheck
(
)
;
try
{
TelemetryController
.
submitExternalPing
(
type
payload
options
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
canUpload
(
)
{
desktopCheck
(
)
;
try
{
const
result
=
"
canUpload
"
in
TelemetryController
?
TelemetryController
.
canUpload
(
)
:
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
)
;
return
result
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
scalarAdd
(
_name
_value
)
{
desktopCheck
(
)
;
}
scalarSet
(
_name
_value
)
{
desktopCheck
(
)
;
}
scalarSetMaximum
(
_name
_value
)
{
desktopCheck
(
)
;
}
keyedScalarAdd
(
_name
_key
_value
)
{
desktopCheck
(
)
;
}
keyedScalarSet
(
_name
_key
_value
)
{
desktopCheck
(
)
;
}
keyedScalarSetMaximum
(
_name
_key
_value
)
{
desktopCheck
(
)
;
}
recordEvent
(
_category
_method
_object
_value
_extra
)
{
desktopCheck
(
)
;
}
registerScalars
(
_category
_data
)
{
desktopCheck
(
)
;
}
setEventRecordingEnabled
(
_category
_enabled
)
{
desktopCheck
(
)
;
}
registerEvents
(
_category
_data
)
{
desktopCheck
(
)
;
}
}
}
;
}
}
;
