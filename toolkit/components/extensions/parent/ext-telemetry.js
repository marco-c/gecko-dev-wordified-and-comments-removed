"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryController
"
"
resource
:
/
/
gre
/
modules
/
TelemetryController
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryUtils
"
"
resource
:
/
/
gre
/
modules
/
TelemetryUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionUtils
"
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
const
SCALAR_TYPES
=
{
count
:
Ci
.
nsITelemetry
.
SCALAR_TYPE_COUNT
string
:
Ci
.
nsITelemetry
.
SCALAR_TYPE_STRING
boolean
:
Ci
.
nsITelemetry
.
SCALAR_TYPE_BOOLEAN
}
;
function
desktopCheck
(
)
{
if
(
AppConstants
.
MOZ_BUILD_APP
!
=
=
"
browser
"
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
"
This
API
is
only
supported
on
desktop
"
)
;
}
}
this
.
telemetry
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
let
{
extension
}
=
context
;
return
{
telemetry
:
{
submitPing
(
type
payload
options
)
{
desktopCheck
(
)
;
const
manifest
=
extension
.
manifest
;
if
(
manifest
.
telemetry
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
"
Encryption
settings
are
defined
use
submitEncryptedPing
instead
.
"
)
;
}
try
{
TelemetryController
.
submitExternalPing
(
type
payload
options
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
submitEncryptedPing
(
payload
)
{
desktopCheck
(
)
;
try
{
const
manifest
=
extension
.
manifest
;
const
options
=
{
useEncryption
:
true
}
;
if
(
!
manifest
.
telemetry
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
"
Encrypted
telemetry
pings
require
ping_type
and
public_key
to
be
set
in
manifest
.
"
)
;
}
const
type
=
manifest
.
telemetry
.
ping_type
;
if
(
manifest
.
telemetry
.
study_name
)
{
options
.
studyName
=
manifest
.
telemetry
.
study_name
;
}
options
.
addPioneerId
=
manifest
.
telemetry
.
pioneer_id
=
=
=
true
;
options
.
publicKey
=
manifest
.
telemetry
.
public_key
.
key
;
options
.
encryptionKeyId
=
manifest
.
telemetry
.
public_key
.
id
;
options
.
schemaName
=
manifest
.
telemetry
.
schemaName
;
options
.
schemaNamespace
=
manifest
.
telemetry
.
schemaNamespace
;
options
.
schemaVersion
=
manifest
.
telemetry
.
schemaVersion
;
TelemetryController
.
submitExternalPing
(
type
payload
options
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
canUpload
(
)
{
desktopCheck
(
)
;
try
{
const
result
=
"
canUpload
"
in
TelemetryController
?
TelemetryController
.
canUpload
(
)
:
Services
.
prefs
.
getBoolPref
(
TelemetryUtils
.
Preferences
.
FhrUploadEnabled
false
)
;
return
result
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
scalarAdd
(
name
value
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
scalarAdd
(
name
value
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
scalarSet
(
name
value
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
scalarSet
(
name
value
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
scalarSetMaximum
(
name
value
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
scalarSetMaximum
(
name
value
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
keyedScalarAdd
(
name
key
value
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
keyedScalarAdd
(
name
key
value
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
keyedScalarSet
(
name
key
value
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
keyedScalarSet
(
name
key
value
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
keyedScalarSetMaximum
(
name
key
value
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
keyedScalarSetMaximum
(
name
key
value
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
recordEvent
(
category
method
object
value
extra
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
recordEvent
(
category
method
object
value
extra
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
registerScalars
(
category
data
)
{
desktopCheck
(
)
;
try
{
Object
.
keys
(
data
)
.
forEach
(
scalar
=
>
{
data
[
scalar
]
.
kind
=
SCALAR_TYPES
[
data
[
scalar
]
.
kind
]
;
}
)
;
Services
.
telemetry
.
registerScalars
(
category
data
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
setEventRecordingEnabled
(
category
enabled
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
setEventRecordingEnabled
(
category
enabled
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
registerEvents
(
category
data
)
{
desktopCheck
(
)
;
try
{
Services
.
telemetry
.
registerEvents
(
category
data
)
;
}
catch
(
ex
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
ex
)
;
}
}
}
}
;
}
}
;
