"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
var
{
HiddenExtensionPage
promiseExtensionViewLoaded
}
=
ExtensionParent
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionTelemetry
"
"
resource
:
/
/
gre
/
modules
/
ExtensionTelemetry
.
jsm
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
DELAYED_STARTUP
"
"
extensions
.
webextensions
.
background
-
delayed
-
startup
"
)
;
class
BackgroundPage
extends
HiddenExtensionPage
{
constructor
(
extension
options
)
{
super
(
extension
"
background
"
)
;
this
.
page
=
options
.
page
|
|
null
;
this
.
isGenerated
=
!
!
options
.
scripts
;
if
(
this
.
page
)
{
this
.
url
=
this
.
extension
.
baseURI
.
resolve
(
this
.
page
)
;
}
else
if
(
this
.
isGenerated
)
{
this
.
url
=
this
.
extension
.
baseURI
.
resolve
(
"
_generated_background_page
.
html
"
)
;
}
}
async
build
(
)
{
const
{
extension
}
=
this
;
ExtensionTelemetry
.
backgroundPageLoad
.
stopwatchStart
(
extension
this
)
;
await
this
.
createBrowserElement
(
)
;
extension
.
_backgroundPageFrameLoader
=
this
.
browser
.
frameLoader
;
extensions
.
emit
(
"
extension
-
browser
-
inserted
"
this
.
browser
)
;
this
.
browser
.
loadURI
(
this
.
url
{
triggeringPrincipal
:
extension
.
principal
}
)
;
let
context
=
await
promiseExtensionViewLoaded
(
this
.
browser
)
;
ExtensionTelemetry
.
backgroundPageLoad
.
stopwatchFinish
(
extension
this
)
;
if
(
context
)
{
await
Promise
.
all
(
context
.
listenerPromises
)
;
context
.
listenerPromises
=
null
;
}
extension
.
emit
(
"
startup
"
)
;
}
shutdown
(
)
{
this
.
extension
.
_backgroundPageFrameLoader
=
null
;
super
.
shutdown
(
)
;
}
}
this
.
backgroundPage
=
class
extends
ExtensionAPI
{
onManifestEntry
(
entryName
)
{
let
{
extension
}
=
this
;
let
{
manifest
}
=
extension
;
this
.
bgPage
=
new
BackgroundPage
(
extension
manifest
.
background
)
;
if
(
extension
.
startupReason
!
=
=
"
APP_STARTUP
"
|
|
!
DELAYED_STARTUP
)
{
return
this
.
bgPage
.
build
(
)
;
}
EventManager
.
primeListeners
(
extension
)
;
extension
.
once
(
"
start
-
background
-
page
"
async
(
)
=
>
{
await
this
.
bgPage
.
build
(
)
;
EventManager
.
clearPrimedListeners
(
extension
)
;
}
)
;
extension
.
once
(
"
background
-
page
-
event
"
async
(
)
=
>
{
await
ExtensionParent
.
browserPaintedPromise
;
extension
.
emit
(
"
start
-
background
-
page
"
)
;
}
)
;
ExtensionParent
.
browserStartupPromise
.
then
(
(
)
=
>
{
extension
.
emit
(
"
start
-
background
-
page
"
)
;
}
)
;
}
onShutdown
(
)
{
this
.
bgPage
.
shutdown
(
)
;
}
}
;
