"
use
strict
"
;
var
{
ExtensionError
}
=
ExtensionUtils
;
this
.
scripting
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
const
{
extension
}
=
context
;
const
{
tabManager
}
=
extension
;
return
{
scripting
:
{
executeScriptInternal
:
async
details
=
>
{
let
{
tabId
frameIds
}
=
details
.
target
;
let
tab
=
tabManager
.
get
(
tabId
)
;
let
executeScriptDetails
=
{
code
:
null
file
:
null
runAt
:
"
document_idle
"
}
;
if
(
details
.
files
)
{
executeScriptDetails
.
file
=
details
.
files
[
0
]
;
}
else
{
executeScriptDetails
.
code
=
details
.
codeToExecute
;
}
const
promises
=
[
]
;
if
(
!
frameIds
)
{
frameIds
=
[
0
]
;
}
for
(
const
frameId
of
frameIds
)
{
promises
.
push
(
tab
.
executeScript
(
context
{
.
.
.
executeScriptDetails
frameId
}
)
.
then
(
results
=
>
(
{
frameId
result
:
results
[
0
]
|
|
null
}
)
)
.
catch
(
error
=
>
(
{
frameId
result
:
null
error
}
)
)
)
;
}
const
results
=
await
Promise
.
all
(
promises
)
;
return
results
.
map
(
(
{
frameId
result
error
}
)
=
>
{
if
(
error
)
{
if
(
error
instanceof
ExtensionError
)
{
throw
error
;
}
Cu
.
reportError
(
error
.
message
|
|
error
)
;
}
return
{
frameId
result
}
;
}
)
;
}
}
}
;
}
}
;
