"
use
strict
"
;
var
{
ExtensionError
}
=
ExtensionUtils
;
const
execute
=
(
context
details
kind
method
)
=
>
{
const
{
tabManager
}
=
context
.
extension
;
let
options
=
{
jsPaths
:
[
]
cssPaths
:
[
]
removeCSS
:
method
=
=
"
removeCSS
"
extensionId
:
context
.
extension
.
id
}
;
const
{
tabId
frameIds
allFrames
}
=
details
.
target
;
const
tab
=
tabManager
.
get
(
tabId
)
;
options
.
hasActiveTabPermission
=
tab
.
hasActiveTabPermission
;
options
.
matches
=
tab
.
extension
.
allowedOrigins
.
patterns
.
map
(
host
=
>
host
.
pattern
)
;
const
codeKey
=
kind
=
=
=
"
js
"
?
"
func
"
:
"
css
"
;
if
(
(
details
.
files
=
=
=
null
)
=
=
(
details
[
codeKey
]
=
=
=
null
)
)
{
throw
new
ExtensionError
(
Exactly
one
of
files
and
{
codeKey
}
must
be
specified
.
)
;
}
if
(
details
[
codeKey
]
)
{
options
[
{
kind
}
Code
]
=
details
[
codeKey
]
;
}
if
(
details
.
files
)
{
for
(
const
file
of
details
.
files
)
{
let
url
=
context
.
uri
.
resolve
(
file
)
;
if
(
!
tab
.
extension
.
isExtensionURL
(
url
)
)
{
throw
new
ExtensionError
(
"
Files
to
be
injected
must
be
within
the
extension
"
)
;
}
options
[
{
kind
}
Paths
]
.
push
(
url
)
;
}
}
if
(
allFrames
&
&
frameIds
)
{
throw
new
ExtensionError
(
"
Cannot
specify
both
'
allFrames
'
and
'
frameIds
'
.
"
)
;
}
if
(
allFrames
)
{
options
.
allFrames
=
allFrames
;
}
else
if
(
frameIds
)
{
options
.
frameIds
=
frameIds
;
}
else
{
options
.
frameIds
=
[
0
]
;
}
options
.
runAt
=
"
document_idle
"
;
options
.
matchAboutBlank
=
true
;
options
.
wantReturnValue
=
true
;
options
.
returnResultsWithFrameIds
=
kind
=
=
=
"
js
"
;
if
(
details
.
origin
)
{
options
.
cssOrigin
=
details
.
origin
.
toLowerCase
(
)
;
}
else
{
options
.
cssOrigin
=
"
author
"
;
}
if
(
options
.
frameIds
&
&
options
.
frameIds
.
length
=
=
=
0
)
{
return
[
]
;
}
return
tab
.
queryContent
(
"
Execute
"
options
)
;
}
;
this
.
scripting
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
scripting
:
{
executeScriptInternal
:
async
details
=
>
{
return
execute
(
context
details
"
js
"
"
executeScript
"
)
;
}
insertCSS
:
async
details
=
>
{
return
execute
(
context
details
"
css
"
"
insertCSS
"
)
.
then
(
(
)
=
>
{
}
)
;
}
removeCSS
:
async
details
=
>
{
return
execute
(
context
details
"
css
"
"
removeCSS
"
)
.
then
(
(
)
=
>
{
}
)
;
}
}
}
;
}
}
;
