"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
Memory
"
"
resource
:
/
/
gre
/
modules
/
Memory
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
ListenerRelay
{
constructor
(
topic
)
{
this
.
listeners
=
new
Set
(
)
;
this
.
topic
=
topic
;
}
clear
(
)
{
if
(
this
.
listeners
.
size
)
{
Services
.
obs
.
removeObserver
(
this
this
.
topic
)
;
this
.
listeners
.
clear
(
)
;
}
}
add
(
callback
)
{
if
(
!
this
.
listeners
.
size
)
{
Services
.
obs
.
addObserver
(
this
this
.
topic
)
;
}
this
.
listeners
.
add
(
callback
)
;
}
remove
(
callback
)
{
this
.
listeners
.
delete
(
callback
)
;
if
(
!
this
.
listeners
.
size
)
{
Services
.
obs
.
removeObserver
(
this
this
.
topic
)
;
}
}
observe
(
subject
topic
data
)
{
if
(
topic
!
=
=
this
.
topic
)
{
return
;
}
for
(
let
listener
of
this
.
listeners
)
{
try
{
listener
(
data
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
}
XPCOMUtils
.
defineLazyGetter
(
this
"
lowMemListeners
"
(
)
=
>
{
return
new
ListenerRelay
(
"
memory
-
pressure
"
)
;
}
)
;
this
.
memory
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
memory
:
{
async
getInfo
(
)
{
return
Memory
.
summary
(
)
;
}
async
minimizeMemoryUsage
(
)
{
await
new
Promise
(
resolve
=
>
{
const
mgr
=
Cc
[
"
mozilla
.
org
/
memory
-
reporter
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIMemoryReporterManager
)
;
mgr
.
minimizeMemoryUsage
(
resolve
)
;
}
)
;
}
onLowMemory
:
new
ExtensionCommon
.
EventManager
(
{
context
name
:
"
memory
.
onLowMemory
"
register
:
fire
=
>
{
lowMemListeners
.
add
(
fire
.
async
)
;
return
(
)
=
>
{
lowMemListeners
.
remove
(
fire
.
async
)
;
}
;
}
}
)
.
api
(
)
}
}
;
}
}
;
