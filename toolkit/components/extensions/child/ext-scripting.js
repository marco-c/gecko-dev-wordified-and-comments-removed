"
use
strict
"
;
var
{
ExtensionError
}
=
ExtensionUtils
;
this
.
scripting
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
scripting
:
{
executeScript
:
async
details
=
>
{
let
{
func
args
.
.
.
parentDetails
}
=
details
;
if
(
details
.
files
)
{
if
(
details
.
args
)
{
throw
new
ExtensionError
(
"
'
args
'
may
not
be
used
with
file
injections
.
"
)
;
}
}
if
(
func
)
{
try
{
const
serializedArgs
=
args
?
JSON
.
stringify
(
args
)
.
slice
(
1
-
1
)
:
"
"
;
parentDetails
.
func
=
(
{
func
.
toString
(
)
}
)
(
{
serializedArgs
}
)
;
;
}
catch
(
e
)
{
throw
new
ExtensionError
(
"
Unserializable
arguments
.
"
)
;
}
}
else
{
parentDetails
.
func
=
null
;
}
return
context
.
childManager
.
callParentAsyncFunction
(
"
scripting
.
executeScriptInternal
"
[
parentDetails
]
)
;
}
}
}
;
}
}
;
