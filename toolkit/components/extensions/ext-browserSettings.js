"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionPreferencesManager
.
jsm
"
)
;
const
getSettingsAPI
=
(
extension
name
callback
)
=
>
{
return
{
async
get
(
details
)
{
return
{
levelOfControl
:
details
.
incognito
?
"
not_controllable
"
:
await
ExtensionPreferencesManager
.
getLevelOfControl
(
extension
name
)
value
:
await
callback
(
)
}
;
}
set
(
details
)
{
return
ExtensionPreferencesManager
.
setSetting
(
extension
name
details
.
value
)
;
}
clear
(
details
)
{
return
ExtensionPreferencesManager
.
removeSetting
(
extension
name
)
;
}
}
;
}
;
ExtensionPreferencesManager
.
addSetting
(
"
cacheEnabled
"
{
prefNames
:
[
"
browser
.
cache
.
disk
.
enable
"
"
browser
.
cache
.
memory
.
enable
"
]
setCallback
(
value
)
{
let
returnObj
=
{
}
;
for
(
let
pref
of
this
.
prefNames
)
{
returnObj
[
pref
]
=
value
;
}
return
returnObj
;
}
}
)
;
this
.
browserSettings
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
let
{
extension
}
=
context
;
return
{
browserSettings
:
{
cacheEnabled
:
getSettingsAPI
(
extension
"
cacheEnabled
"
(
)
=
>
{
return
Preferences
.
get
(
"
browser
.
cache
.
disk
.
enable
"
)
&
&
Preferences
.
get
(
"
browser
.
cache
.
memory
.
enable
"
)
;
}
)
}
}
;
}
}
;
