"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ExtensionManagement
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
Frames
=
{
topWindowIds
:
new
Set
(
)
init
(
)
{
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
return
;
}
Services
.
mm
.
addMessageListener
(
"
Extension
:
TopWindowID
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Extension
:
RemoveTopWindowID
"
this
)
;
}
isTopWindowId
(
windowId
)
{
return
this
.
topWindowIds
.
has
(
windowId
)
;
}
getId
(
windowId
)
{
if
(
this
.
isTopWindowId
(
windowId
)
)
{
return
0
;
}
else
if
(
windowId
=
=
0
)
{
return
-
1
;
}
else
{
return
windowId
;
}
}
getParentId
(
parentWindowId
windowId
)
{
if
(
parentWindowId
=
=
windowId
)
{
return
-
1
;
}
return
this
.
getId
(
parentWindowId
)
;
}
receiveMessage
(
{
name
data
}
)
{
switch
(
name
)
{
case
"
Extension
:
TopWindowID
"
:
this
.
topWindowIds
.
add
(
data
.
windowId
)
;
break
;
case
"
Extension
:
RemoveTopWindowID
"
:
this
.
topWindowIds
.
delete
(
data
.
windowId
)
;
break
;
}
}
}
;
Frames
.
init
(
)
;
let
Scripts
=
{
scripts
:
new
Set
(
)
register
(
script
)
{
this
.
scripts
.
add
(
script
)
;
}
getScripts
(
)
{
return
this
.
scripts
;
}
}
;
let
Service
=
{
initialized
:
false
uuidMap
:
new
Map
(
)
init
(
)
{
let
aps
=
Cc
[
"
mozilla
.
org
/
addons
/
policy
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAddonPolicyService
)
;
aps
=
aps
.
wrappedJSObject
;
this
.
aps
=
aps
;
aps
.
setExtensionURILoadCallback
(
this
.
extensionURILoadableByAnyone
.
bind
(
this
)
)
;
aps
.
setExtensionURIToAddonIdCallback
(
this
.
extensionURIToAddonID
.
bind
(
this
)
)
;
}
startupExtension
(
uuid
uri
extension
)
{
if
(
!
this
.
initialized
)
{
this
.
initialized
=
true
;
this
.
init
(
)
;
}
let
handler
=
Services
.
io
.
getProtocolHandler
(
"
moz
-
extension
"
)
;
handler
.
QueryInterface
(
Ci
.
nsISubstitutingProtocolHandler
)
;
handler
.
setSubstitution
(
uuid
uri
)
;
this
.
uuidMap
.
set
(
uuid
extension
)
;
this
.
aps
.
setAddonLoadURICallback
(
extension
.
id
this
.
checkAddonMayLoad
.
bind
(
this
extension
)
)
;
}
shutdownExtension
(
uuid
)
{
let
extension
=
this
.
uuidMap
.
get
(
uuid
)
;
this
.
uuidMap
.
delete
(
uuid
)
;
this
.
aps
.
setAddonLoadURICallback
(
extension
.
id
null
)
;
let
handler
=
Services
.
io
.
getProtocolHandler
(
"
moz
-
extension
"
)
;
handler
.
QueryInterface
(
Ci
.
nsISubstitutingProtocolHandler
)
;
handler
.
setSubstitution
(
uuid
null
)
;
}
extensionURILoadableByAnyone
(
uri
)
{
let
uuid
=
uri
.
host
;
let
extension
=
this
.
uuidMap
.
get
(
uuid
)
;
if
(
!
extension
)
{
return
false
;
}
let
path
=
uri
.
path
;
if
(
path
.
length
>
0
&
&
path
[
0
]
=
=
'
/
'
)
{
path
=
path
.
substr
(
1
)
;
}
return
extension
.
webAccessibleResources
.
has
(
path
)
;
}
checkAddonMayLoad
(
extension
uri
)
{
return
extension
.
whiteListedHosts
.
matchesIgnoringPath
(
uri
)
;
}
extensionURIToAddonID
(
uri
)
{
if
(
this
.
extensionURILoadableByAnyone
(
uri
)
)
{
return
null
;
}
let
uuid
=
uri
.
host
;
let
extension
=
this
.
uuidMap
.
get
(
uuid
)
;
return
extension
?
extension
.
id
:
undefined
;
}
}
;
let
ExtensionManagement
=
{
startupExtension
:
Service
.
startupExtension
.
bind
(
Service
)
shutdownExtension
:
Service
.
shutdownExtension
.
bind
(
Service
)
registerScript
:
Scripts
.
register
.
bind
(
Scripts
)
getScripts
:
Scripts
.
getScripts
.
bind
(
Scripts
)
getFrameId
:
Frames
.
getId
.
bind
(
Frames
)
getParentFrameId
:
Frames
.
getParentId
.
bind
(
Frames
)
}
;
