"
use
strict
"
;
module
.
exports
=
{
"
globals
"
:
{
"
Cc
"
:
true
"
Ci
"
:
true
"
Cr
"
:
true
"
Cu
"
:
true
"
AppConstants
"
:
true
"
ExtensionAPI
"
:
true
"
ExtensionCommon
"
:
true
"
ExtensionUtils
"
:
true
"
extensions
"
:
true
"
global
"
:
true
"
require
"
:
false
"
Services
"
:
true
"
XPCOMUtils
"
:
true
}
"
rules
"
:
{
"
mozilla
/
balanced
-
listeners
"
:
"
error
"
"
mozilla
/
no
-
aArgs
"
:
"
error
"
"
mozilla
/
var
-
only
-
at
-
top
-
level
"
:
"
error
"
"
valid
-
jsdoc
"
:
[
"
error
"
{
"
prefer
"
:
{
"
return
"
:
"
returns
"
}
"
preferType
"
:
{
"
Boolean
"
:
"
boolean
"
"
Number
"
:
"
number
"
"
String
"
:
"
string
"
"
bool
"
:
"
boolean
"
}
"
requireParamDescription
"
:
false
"
requireReturn
"
:
false
"
requireReturnDescription
"
:
false
}
]
"
array
-
bracket
-
spacing
"
:
[
"
error
"
"
never
"
]
"
object
-
curly
-
spacing
"
:
[
"
error
"
"
never
"
]
"
space
-
in
-
parens
"
:
[
"
error
"
"
never
"
]
"
consistent
-
return
"
:
"
off
"
"
curly
"
:
[
"
error
"
"
all
"
]
"
indent
"
:
[
"
error
"
2
{
"
ArrayExpression
"
:
"
first
"
"
CallExpression
"
:
{
"
arguments
"
:
"
first
"
}
"
FunctionDeclaration
"
:
{
"
parameters
"
:
"
first
"
}
"
FunctionExpression
"
:
{
"
parameters
"
:
"
first
"
}
"
MemberExpression
"
:
"
off
"
"
ObjectExpression
"
:
"
first
"
"
SwitchCase
"
:
1
"
ignoredNodes
"
:
[
"
ConditionalExpression
"
]
}
]
"
new
-
parens
"
:
"
error
"
"
no
-
empty
"
:
"
error
"
"
no
-
mixed
-
operators
"
:
[
"
error
"
{
"
groups
"
:
[
[
"
&
&
"
"
|
|
"
]
[
"
=
=
"
"
!
=
"
"
=
=
=
"
"
!
=
=
"
"
>
"
"
>
=
"
"
<
"
"
<
=
"
]
[
"
in
"
"
instanceof
"
]
]
}
]
"
no
-
multi
-
spaces
"
:
"
error
"
"
no
-
unused
-
expressions
"
:
"
error
"
"
no
-
unused
-
vars
"
:
[
"
error
"
{
"
args
"
:
"
none
"
"
vars
"
:
"
all
"
"
varsIgnorePattern
"
:
"
^
console
"
}
]
"
no
-
use
-
before
-
define
"
:
"
error
"
"
space
-
before
-
function
-
paren
"
:
[
"
error
"
{
"
anonymous
"
:
"
never
"
"
named
"
:
"
never
"
}
]
"
space
-
unary
-
ops
"
:
[
"
error
"
{
"
nonwords
"
:
false
"
words
"
:
true
"
overrides
"
:
{
"
typeof
"
:
false
}
}
]
"
block
-
scoped
-
var
"
:
"
error
"
"
comma
-
dangle
"
:
[
"
error
"
"
always
-
multiline
"
]
"
complexity
"
:
"
error
"
"
default
-
case
"
:
"
off
"
"
dot
-
location
"
:
[
"
error
"
"
property
"
]
"
eqeqeq
"
:
"
off
"
"
func
-
names
"
:
"
off
"
"
func
-
style
"
:
"
off
"
"
max
-
len
"
:
[
0
80
]
"
max
-
nested
-
callbacks
"
:
[
"
error
"
4
]
"
max
-
params
"
:
"
off
"
"
max
-
statements
"
:
"
off
"
"
new
-
cap
"
:
[
"
off
"
{
"
capIsNew
"
:
false
}
]
"
no
-
bitwise
"
:
"
off
"
"
no
-
catch
-
shadow
"
:
"
off
"
"
no
-
console
"
:
"
error
"
"
no
-
constant
-
condition
"
:
"
off
"
"
no
-
continue
"
:
"
off
"
"
no
-
div
-
regex
"
:
"
off
"
"
no
-
extend
-
native
"
:
"
error
"
"
no
-
extra
-
parens
"
:
"
off
"
"
no
-
fallthrough
"
:
"
error
"
"
no
-
floating
-
decimal
"
:
"
off
"
"
no
-
inline
-
comments
"
:
"
off
"
"
no
-
labels
"
:
[
"
error
"
{
"
allowLoop
"
:
true
}
]
"
no
-
multi
-
str
"
:
"
error
"
"
no
-
multiple
-
empty
-
lines
"
:
[
1
{
"
max
"
:
2
}
]
"
no
-
param
-
reassign
"
:
"
off
"
"
no
-
path
-
concat
"
:
"
off
"
"
no
-
plusplus
"
:
"
off
"
"
no
-
process
-
env
"
:
"
off
"
"
no
-
process
-
exit
"
:
"
off
"
"
no
-
proto
"
:
"
error
"
"
no
-
reserved
-
keys
"
:
"
off
"
"
no
-
restricted
-
modules
"
:
"
off
"
"
no
-
return
-
assign
"
:
"
error
"
"
no
-
shadow
"
:
"
off
"
"
no
-
sync
"
:
"
off
"
"
no
-
ternary
"
:
"
off
"
"
no
-
throw
-
literal
"
:
"
error
"
"
no
-
underscore
-
dangle
"
:
"
off
"
"
no
-
undefined
"
:
"
off
"
"
no
-
var
"
:
"
off
"
"
no
-
warning
-
comments
"
:
"
off
"
"
object
-
shorthand
"
:
"
off
"
"
one
-
var
"
:
"
off
"
"
padded
-
blocks
"
:
[
"
error
"
"
never
"
]
"
quote
-
props
"
:
"
off
"
"
radix
"
:
"
error
"
"
semi
-
spacing
"
:
[
"
error
"
{
"
before
"
:
false
"
after
"
:
true
}
]
"
sort
-
vars
"
:
"
off
"
"
spaced
-
comment
"
:
[
"
error
"
"
always
"
]
"
strict
"
:
[
"
error
"
"
global
"
]
"
vars
-
on
-
top
"
:
"
off
"
"
wrap
-
iife
"
:
"
off
"
"
wrap
-
regex
"
:
"
off
"
"
yoda
"
:
"
error
"
"
no
-
inner
-
declarations
"
:
"
error
"
"
no
-
label
-
var
"
:
"
error
"
}
}
;
