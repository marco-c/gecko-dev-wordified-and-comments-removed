"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
Extension
"
"
ExtensionData
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Locale
"
"
resource
:
/
/
gre
/
modules
/
Locale
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Log
"
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MatchPattern
"
"
resource
:
/
/
gre
/
modules
/
MatchPattern
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionManagement
.
jsm
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
alarms
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
backgroundPage
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
cookies
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
notifications
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
i18n
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
idle
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
runtime
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
extension
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
webNavigation
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
webRequest
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
storage
.
js
"
)
;
ExtensionManagement
.
registerScript
(
"
chrome
:
/
/
extensions
/
content
/
ext
-
test
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
var
{
MessageBroker
Messenger
injectAPI
extend
flushJarCache
instanceOf
}
=
ExtensionUtils
;
const
LOGGER_ID_BASE
=
"
addons
.
webextension
.
"
;
var
scriptScope
=
this
;
var
Management
=
{
initialized
:
false
scopes
:
[
]
apis
:
[
]
emitter
:
new
EventEmitter
(
)
lazyInit
(
)
{
if
(
this
.
initialized
)
{
return
;
}
this
.
initialized
=
true
;
for
(
let
script
of
ExtensionManagement
.
getScripts
(
)
)
{
let
scope
=
{
extensions
:
this
global
:
scriptScope
ExtensionPage
:
ExtensionPage
GlobalManager
:
GlobalManager
}
;
Services
.
scriptloader
.
loadSubScript
(
script
scope
"
UTF
-
8
"
)
;
this
.
scopes
.
push
(
scope
)
;
}
}
registerAPI
(
api
)
{
this
.
apis
.
push
(
{
api
}
)
;
}
registerPrivilegedAPI
(
permission
api
)
{
this
.
apis
.
push
(
{
api
permission
}
)
;
}
generateAPIs
(
extension
context
)
{
let
obj
=
{
}
;
function
copy
(
dest
source
)
{
for
(
let
prop
in
source
)
{
if
(
typeof
(
source
[
prop
]
)
=
=
"
object
"
)
{
if
(
!
(
prop
in
dest
)
)
{
dest
[
prop
]
=
{
}
;
}
copy
(
dest
[
prop
]
source
[
prop
]
)
;
}
else
{
dest
[
prop
]
=
source
[
prop
]
;
}
}
}
for
(
let
api
of
this
.
apis
)
{
if
(
api
.
permission
)
{
if
(
!
extension
.
hasPermission
(
api
.
permission
)
)
{
continue
;
}
}
api
=
api
.
api
(
extension
context
)
;
copy
(
obj
api
)
;
}
return
obj
;
}
on
(
hook
callback
)
{
this
.
emitter
.
on
(
hook
callback
)
;
}
emit
(
hook
.
.
.
args
)
{
this
.
lazyInit
(
)
;
this
.
emitter
.
emit
(
hook
.
.
.
args
)
;
}
off
(
hook
callback
)
{
this
.
emitter
.
off
(
hook
callback
)
;
}
}
;
var
globalBroker
=
new
MessageBroker
(
[
Services
.
mm
Services
.
ppmm
]
)
;
function
ExtensionPage
(
extension
params
)
{
let
{
type
contentWindow
uri
docShell
}
=
params
;
this
.
extension
=
extension
;
this
.
type
=
type
;
this
.
contentWindow
=
contentWindow
|
|
null
;
this
.
uri
=
uri
|
|
extension
.
baseURI
;
this
.
incognito
=
params
.
incognito
|
|
false
;
this
.
onClose
=
new
Set
(
)
;
let
sender
=
{
id
:
extension
.
id
}
;
if
(
uri
)
{
sender
.
url
=
uri
.
spec
;
}
let
delegate
=
{
}
;
Management
.
emit
(
"
page
-
load
"
this
params
sender
delegate
)
;
let
filter
=
{
id
:
extension
.
id
}
;
this
.
messenger
=
new
Messenger
(
this
globalBroker
sender
filter
delegate
)
;
this
.
extension
.
views
.
add
(
this
)
;
}
ExtensionPage
.
prototype
=
{
get
cloneScope
(
)
{
return
this
.
contentWindow
;
}
callOnClose
(
obj
)
{
this
.
onClose
.
add
(
obj
)
;
}
forgetOnClose
(
obj
)
{
this
.
onClose
.
delete
(
obj
)
;
}
shutdown
(
)
{
Management
.
emit
(
"
page
-
shutdown
"
this
)
;
this
.
unload
(
)
;
}
unload
(
)
{
Management
.
emit
(
"
page
-
unload
"
this
)
;
this
.
extension
.
views
.
delete
(
this
)
;
for
(
let
obj
of
this
.
onClose
)
{
obj
.
close
(
)
;
}
}
}
;
var
GlobalManager
=
{
count
:
0
docShells
:
new
Map
(
)
extensionMap
:
new
Map
(
)
init
(
extension
)
{
if
(
this
.
count
=
=
0
)
{
Services
.
obs
.
addObserver
(
this
"
content
-
document
-
global
-
created
"
false
)
;
}
this
.
count
+
+
;
this
.
extensionMap
.
set
(
extension
.
id
extension
)
;
}
uninit
(
extension
)
{
this
.
count
-
-
;
if
(
this
.
count
=
=
0
)
{
Services
.
obs
.
removeObserver
(
this
"
content
-
document
-
global
-
created
"
)
;
}
for
(
let
[
docShell
data
]
of
this
.
docShells
)
{
if
(
extension
=
=
data
.
extension
)
{
this
.
docShells
.
delete
(
docShell
)
;
}
}
this
.
extensionMap
.
delete
(
extension
.
id
)
;
}
injectInDocShell
(
docShell
extension
context
)
{
this
.
docShells
.
set
(
docShell
{
extension
context
}
)
;
}
observe
(
contentWindow
topic
data
)
{
function
inject
(
extension
context
)
{
let
chromeObj
=
Cu
.
createObjectIn
(
contentWindow
{
defineAs
:
"
browser
"
}
)
;
contentWindow
.
wrappedJSObject
.
chrome
=
contentWindow
.
wrappedJSObject
.
browser
;
let
api
=
Management
.
generateAPIs
(
extension
context
)
;
injectAPI
(
api
chromeObj
)
;
}
let
principal
=
contentWindow
.
document
.
nodePrincipal
;
let
id
=
principal
.
originAttributes
.
addonId
;
if
(
!
this
.
extensionMap
.
has
(
id
)
)
{
return
;
}
let
docShell
=
contentWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
sameTypeRootTreeItem
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
if
(
this
.
docShells
.
has
(
docShell
)
)
{
let
{
extension
context
}
=
this
.
docShells
.
get
(
docShell
)
;
if
(
context
&
&
extension
.
id
=
=
id
)
{
inject
(
extension
context
)
;
}
return
;
}
if
(
contentWindow
!
=
contentWindow
.
top
)
{
return
;
}
let
extension
=
this
.
extensionMap
.
get
(
id
)
;
let
uri
=
contentWindow
.
document
.
documentURIObject
;
let
incognito
=
PrivateBrowsingUtils
.
isContentWindowPrivate
(
contentWindow
)
;
let
context
=
new
ExtensionPage
(
extension
{
type
:
"
tab
"
contentWindow
uri
docShell
incognito
}
)
;
inject
(
extension
context
)
;
let
eventHandler
=
docShell
.
chromeEventHandler
;
let
listener
=
event
=
>
{
if
(
event
.
target
!
=
docShell
.
contentViewer
.
DOMDocument
)
{
return
;
}
eventHandler
.
removeEventListener
(
"
unload
"
listener
)
;
context
.
unload
(
)
;
}
;
eventHandler
.
addEventListener
(
"
unload
"
listener
true
)
;
}
}
;
this
.
ExtensionData
=
function
(
rootURI
)
{
this
.
rootURI
=
rootURI
;
this
.
manifest
=
null
;
this
.
id
=
null
;
this
.
localeMessages
=
new
Map
(
)
;
this
.
selectedLocale
=
null
;
this
.
_promiseLocales
=
null
;
this
.
errors
=
[
]
;
}
ExtensionData
.
prototype
=
{
get
logger
(
)
{
let
id
=
this
.
id
|
|
"
<
unknown
>
"
;
return
Log
.
repository
.
getLogger
(
LOGGER_ID_BASE
+
id
)
;
}
manifestError
(
message
)
{
this
.
packagingError
(
Reading
manifest
:
{
message
}
)
;
}
packagingError
(
message
)
{
this
.
errors
.
push
(
message
)
;
this
.
logger
.
error
(
Loading
extension
'
{
this
.
id
}
'
:
{
message
}
)
;
}
localizeMessage
(
message
substitutions
=
[
]
locale
=
this
.
selectedLocale
defaultValue
=
"
?
?
"
)
{
let
locales
=
new
Set
(
[
locale
this
.
defaultLocale
]
.
filter
(
locale
=
>
this
.
localeMessages
.
has
(
locale
)
)
)
;
message
=
message
.
toLowerCase
(
)
;
for
(
let
locale
of
locales
)
{
let
messages
=
this
.
localeMessages
.
get
(
locale
)
;
if
(
messages
.
has
(
message
)
)
{
let
str
=
messages
.
get
(
message
)
if
(
!
Array
.
isArray
(
substitutions
)
)
{
substitutions
=
[
substitutions
]
;
}
let
replacer
=
(
matched
index
dollarSigns
)
=
>
{
if
(
index
)
{
index
=
parseInt
(
index
)
-
1
;
return
index
in
substitutions
?
substitutions
[
index
]
:
"
"
;
}
else
{
return
dollarSigns
;
}
}
;
return
str
.
replace
(
/
\
(
?
:
(
[
1
-
9
]
\
d
*
)
|
(
\
+
)
)
/
g
replacer
)
;
}
}
if
(
message
=
=
"
extension_id
"
)
{
if
(
"
uuid
"
in
this
)
{
return
this
.
uuid
;
}
}
else
if
(
message
=
=
"
ui_locale
"
)
{
return
Locale
.
getLocale
(
)
;
}
else
if
(
message
=
=
"
bidi_dir
"
)
{
return
"
ltr
"
;
}
Cu
.
reportError
(
Unknown
localization
message
{
message
}
)
;
return
defaultValue
;
}
localize
(
str
locale
=
this
.
selectedLocale
)
{
if
(
!
str
)
{
return
str
;
}
return
str
.
replace
(
/
__MSG_
(
[
A
-
Za
-
z0
-
9
_
]
+
?
)
__
/
g
(
matched
message
)
=
>
{
return
this
.
localizeMessage
(
message
[
]
locale
matched
)
;
}
)
;
}
get
defaultLocale
(
)
{
if
(
"
default_locale
"
in
this
.
manifest
)
{
return
this
.
normalizeLocaleCode
(
this
.
manifest
.
default_locale
)
;
}
return
null
;
}
normalizeLocaleCode
(
locale
)
{
return
String
.
replace
(
locale
/
_
/
g
"
-
"
)
;
}
readDirectory
:
Task
.
async
(
function
*
(
path
)
{
if
(
this
.
rootURI
instanceof
Ci
.
nsIFileURL
)
{
let
uri
=
NetUtil
.
newURI
(
this
.
rootURI
.
resolve
(
"
.
/
"
+
path
)
)
;
let
fullPath
=
uri
.
QueryInterface
(
Ci
.
nsIFileURL
)
.
file
.
path
;
let
iter
=
new
OS
.
File
.
DirectoryIterator
(
fullPath
)
;
let
results
=
[
]
;
try
{
yield
iter
.
forEach
(
entry
=
>
{
results
.
push
(
entry
)
;
}
)
;
}
catch
(
e
)
{
}
iter
.
close
(
)
;
return
results
;
}
if
(
!
(
this
.
rootURI
instanceof
Ci
.
nsIJARURI
&
&
this
.
rootURI
.
JARFile
instanceof
Ci
.
nsIFileURL
)
)
{
return
[
]
;
}
let
file
=
this
.
rootURI
.
JARFile
.
file
;
let
zipReader
=
Cc
[
"
mozilla
.
org
/
libjar
/
zip
-
reader
;
1
"
]
.
createInstance
(
Ci
.
nsIZipReader
)
;
try
{
zipReader
.
open
(
file
)
;
let
results
=
[
]
;
path
=
path
.
replace
(
/
\
/
\
/
+
/
g
"
/
"
)
.
replace
(
/
^
\
/
|
\
/
/
g
"
"
)
+
"
/
"
;
let
pattern
=
path
.
replace
(
/
[
[
\
]
(
)
?
*
~
|
\
\
]
/
g
"
\
\
&
"
)
;
let
enumerator
=
zipReader
.
findEntries
(
pattern
+
"
*
"
)
;
while
(
enumerator
.
hasMore
(
)
)
{
let
name
=
enumerator
.
getNext
(
)
;
if
(
!
name
.
startsWith
(
path
)
)
{
throw
new
Error
(
"
Unexpected
ZipReader
entry
"
)
;
}
name
=
name
.
slice
(
path
.
length
)
;
if
(
name
&
&
!
/
\
/
.
/
.
test
(
name
)
)
{
results
.
push
(
{
name
:
name
.
replace
(
"
/
"
"
"
)
isDir
:
name
.
endsWith
(
"
/
"
)
}
)
;
}
}
return
results
;
}
finally
{
zipReader
.
close
(
)
;
}
}
)
readJSON
(
path
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
uri
=
this
.
rootURI
.
resolve
(
.
/
{
path
}
)
;
NetUtil
.
asyncFetch
(
{
uri
loadUsingSystemPrincipal
:
true
}
(
inputStream
status
)
=
>
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
reject
(
new
Error
(
status
)
)
;
return
;
}
try
{
let
text
=
NetUtil
.
readInputStreamToString
(
inputStream
inputStream
.
available
(
)
)
;
resolve
(
JSON
.
parse
(
text
)
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
)
;
}
)
;
}
readManifest
(
)
{
return
this
.
readJSON
(
"
manifest
.
json
"
)
.
then
(
manifest
=
>
{
this
.
manifest
=
manifest
;
try
{
this
.
id
=
this
.
manifest
.
applications
.
gecko
.
id
;
}
catch
(
e
)
{
}
if
(
typeof
this
.
id
!
=
"
string
"
)
{
this
.
manifestError
(
"
Missing
required
applications
.
gecko
.
id
property
"
)
;
}
return
manifest
;
}
)
;
}
processLocale
(
locale
messages
)
{
let
result
=
new
Map
(
)
;
if
(
!
instanceOf
(
messages
"
Object
"
)
)
{
this
.
packagingError
(
Invalid
locale
data
for
{
locale
}
)
;
return
result
;
}
for
(
let
key
of
Object
.
keys
(
messages
)
)
{
let
msg
=
messages
[
key
]
;
if
(
!
instanceOf
(
msg
"
Object
"
)
|
|
typeof
(
msg
.
message
)
!
=
"
string
"
)
{
this
.
packagingError
(
Invalid
locale
message
data
for
{
locale
}
message
{
JSON
.
stringify
(
key
)
}
)
;
continue
;
}
let
placeholders
=
new
Map
(
)
;
if
(
instanceOf
(
msg
.
placeholders
"
Object
"
)
)
{
for
(
let
key
of
Object
.
keys
(
msg
.
placeholders
)
)
{
placeholders
.
set
(
key
.
toLowerCase
(
)
msg
.
placeholders
[
key
]
)
;
}
}
let
replacer
=
(
match
name
)
=
>
{
let
replacement
=
placeholders
.
get
(
name
.
toLowerCase
(
)
)
;
if
(
instanceOf
(
replacement
"
Object
"
)
&
&
"
content
"
in
replacement
)
{
return
replacement
.
content
;
}
return
"
"
;
}
;
let
value
=
msg
.
message
.
replace
(
/
\
(
[
A
-
Za
-
z0
-
9
_
]
+
)
\
/
g
replacer
)
;
result
.
set
(
key
.
toLowerCase
(
)
value
)
;
}
return
result
;
}
readLocaleFile
:
Task
.
async
(
function
*
(
locale
)
{
let
locales
=
yield
this
.
promiseLocales
(
)
;
let
dir
=
locales
.
get
(
locale
)
;
let
file
=
_locales
/
{
dir
}
/
messages
.
json
;
let
messages
=
new
Map
(
)
;
try
{
messages
=
yield
this
.
readJSON
(
file
)
;
messages
=
this
.
processLocale
(
locale
messages
)
;
}
catch
(
e
)
{
this
.
packagingError
(
Loading
locale
file
{
file
}
:
{
e
}
)
;
}
this
.
localeMessages
.
set
(
locale
messages
)
;
return
messages
;
}
)
promiseLocales
(
)
{
if
(
!
this
.
_promiseLocales
)
{
this
.
_promiseLocales
=
Task
.
spawn
(
function
*
(
)
{
let
locales
=
new
Map
(
)
;
let
entries
=
yield
this
.
readDirectory
(
"
_locales
"
)
;
for
(
let
file
of
entries
)
{
if
(
file
.
isDir
)
{
let
locale
=
this
.
normalizeLocaleCode
(
file
.
name
)
;
locales
.
set
(
locale
file
.
name
)
;
}
}
return
locales
;
}
.
bind
(
this
)
)
;
}
return
this
.
_promiseLocales
;
}
initAllLocales
:
Task
.
async
(
function
*
(
)
{
let
locales
=
yield
this
.
promiseLocales
(
)
;
yield
Promise
.
all
(
Array
.
from
(
locales
.
keys
(
)
locale
=
>
this
.
readLocaleFile
(
locale
)
)
)
;
let
defaultLocale
=
this
.
defaultLocale
;
if
(
defaultLocale
)
{
if
(
!
locales
.
has
(
defaultLocale
)
)
{
this
.
manifestError
(
'
Value
for
"
default_locale
"
property
must
correspond
to
'
+
'
a
directory
in
"
_locales
/
"
.
Not
found
:
'
+
JSON
.
stringify
(
_locales
/
{
default_locale
}
/
)
)
;
}
}
else
if
(
this
.
localeMessages
.
size
)
{
this
.
manifestError
(
'
The
"
default_locale
"
property
is
required
when
a
'
+
'
"
_locales
/
"
directory
is
present
.
'
)
;
}
return
this
.
localeMessages
;
}
)
initLocale
:
Task
.
async
(
function
*
(
locale
=
this
.
defaultLocale
)
{
if
(
locale
=
=
null
)
{
return
null
;
}
let
promises
=
[
this
.
readLocaleFile
(
locale
)
]
;
let
{
defaultLocale
}
=
this
;
if
(
locale
!
=
defaultLocale
&
&
!
this
.
localeMessages
.
has
(
defaultLocale
)
)
{
promises
.
push
(
this
.
readLocaleFile
(
defaultLocale
)
)
;
}
let
results
=
yield
Promise
.
all
(
promises
)
;
this
.
selectedLocale
=
locale
;
return
results
[
0
]
;
}
)
}
;
function
getExtensionUUID
(
id
)
{
const
PREF_NAME
=
"
extensions
.
webextensions
.
uuids
"
;
let
pref
=
Preferences
.
get
(
PREF_NAME
"
{
}
"
)
;
let
map
=
{
}
;
try
{
map
=
JSON
.
parse
(
pref
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
Error
parsing
{
PREF_NAME
}
.
)
;
}
if
(
id
in
map
)
{
return
map
[
id
]
;
}
let
uuidGenerator
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
let
uuid
=
uuidGenerator
.
generateUUID
(
)
.
number
;
uuid
=
uuid
.
slice
(
1
-
1
)
;
map
[
id
]
=
uuid
;
Preferences
.
set
(
PREF_NAME
JSON
.
stringify
(
map
)
)
;
return
uuid
;
}
this
.
Extension
=
function
(
addonData
)
{
ExtensionData
.
call
(
this
addonData
.
resourceURI
)
;
this
.
uuid
=
getExtensionUUID
(
addonData
.
id
)
;
if
(
addonData
.
cleanupFile
)
{
Services
.
obs
.
addObserver
(
this
"
xpcom
-
shutdown
"
false
)
;
this
.
cleanupFile
=
addonData
.
cleanupFile
|
|
null
;
delete
addonData
.
cleanupFile
;
}
this
.
addonData
=
addonData
;
this
.
id
=
addonData
.
id
;
this
.
baseURI
=
Services
.
io
.
newURI
(
"
moz
-
extension
:
/
/
"
+
this
.
uuid
null
null
)
;
this
.
baseURI
.
QueryInterface
(
Ci
.
nsIURL
)
;
this
.
principal
=
this
.
createPrincipal
(
)
;
this
.
views
=
new
Set
(
)
;
this
.
onStartup
=
null
;
this
.
hasShutdown
=
false
;
this
.
onShutdown
=
new
Set
(
)
;
this
.
permissions
=
new
Set
(
)
;
this
.
whiteListedHosts
=
null
;
this
.
webAccessibleResources
=
new
Set
(
)
;
this
.
emitter
=
new
EventEmitter
(
)
;
}
this
.
Extension
.
generate
=
function
(
id
data
)
{
let
manifest
=
data
.
manifest
;
if
(
!
manifest
)
{
manifest
=
{
}
;
}
let
files
=
data
.
files
;
if
(
!
files
)
{
files
=
{
}
;
}
function
provide
(
obj
keys
value
override
=
false
)
{
if
(
keys
.
length
=
=
1
)
{
if
(
!
(
keys
[
0
]
in
obj
)
|
|
override
)
{
obj
[
keys
[
0
]
]
=
value
;
}
}
else
{
if
(
!
(
keys
[
0
]
in
obj
)
)
{
obj
[
keys
[
0
]
]
=
{
}
;
}
provide
(
obj
[
keys
[
0
]
]
keys
.
slice
(
1
)
value
override
)
;
}
}
provide
(
manifest
[
"
applications
"
"
gecko
"
"
id
"
]
id
)
;
provide
(
manifest
[
"
name
"
]
"
Generated
extension
"
)
;
provide
(
manifest
[
"
manifest_version
"
]
2
)
;
provide
(
manifest
[
"
version
"
]
"
1
.
0
"
)
;
if
(
data
.
background
)
{
let
uuidGenerator
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
let
bgScript
=
uuidGenerator
.
generateUUID
(
)
.
number
+
"
.
js
"
;
provide
(
manifest
[
"
background
"
"
scripts
"
]
[
bgScript
]
true
)
;
files
[
bgScript
]
=
data
.
background
;
}
provide
(
files
[
"
manifest
.
json
"
]
manifest
)
;
let
ZipWriter
=
Components
.
Constructor
(
"
mozilla
.
org
/
zipwriter
;
1
"
"
nsIZipWriter
"
)
;
let
zipW
=
new
ZipWriter
(
)
;
let
file
=
FileUtils
.
getFile
(
"
TmpD
"
[
"
generated
-
extension
.
xpi
"
]
)
;
file
.
createUnique
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
FileUtils
.
PERMS_FILE
)
;
const
MODE_WRONLY
=
0x02
;
const
MODE_TRUNCATE
=
0x20
;
zipW
.
open
(
file
MODE_WRONLY
|
MODE_TRUNCATE
)
;
let
time
=
Date
.
now
(
)
*
1000
;
function
generateFile
(
filename
)
{
let
components
=
filename
.
split
(
"
/
"
)
;
let
path
=
"
"
;
for
(
let
component
of
components
.
slice
(
0
-
1
)
)
{
path
+
=
component
+
"
/
"
;
if
(
!
zipW
.
hasEntry
(
path
)
)
{
zipW
.
addEntryDirectory
(
path
time
false
)
;
}
}
}
for
(
let
filename
in
files
)
{
let
script
=
files
[
filename
]
;
if
(
typeof
(
script
)
=
=
"
function
"
)
{
script
=
"
(
"
+
script
.
toString
(
)
+
"
)
(
)
"
;
}
else
if
(
typeof
(
script
)
=
=
"
object
"
)
{
script
=
JSON
.
stringify
(
script
)
;
}
let
stream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
stream
.
data
=
script
;
generateFile
(
filename
)
;
zipW
.
addEntryStream
(
filename
time
0
stream
false
)
;
}
zipW
.
close
(
)
;
flushJarCache
(
file
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
Extension
:
FlushJarCache
"
{
path
:
file
.
path
}
)
;
let
fileURI
=
Services
.
io
.
newFileURI
(
file
)
;
let
jarURI
=
Services
.
io
.
newURI
(
"
jar
:
"
+
fileURI
.
spec
+
"
!
/
"
null
null
)
;
return
new
Extension
(
{
id
resourceURI
:
jarURI
cleanupFile
:
file
}
)
;
}
Extension
.
prototype
=
extend
(
Object
.
create
(
ExtensionData
.
prototype
)
{
on
(
hook
f
)
{
return
this
.
emitter
.
on
(
hook
f
)
;
}
off
(
hook
f
)
{
return
this
.
emitter
.
off
(
hook
f
)
;
}
emit
(
.
.
.
args
)
{
return
this
.
emitter
.
emit
(
.
.
.
args
)
;
}
testMessage
(
.
.
.
args
)
{
Management
.
emit
(
"
test
-
message
"
this
.
.
.
args
)
;
}
createPrincipal
(
uri
=
this
.
baseURI
)
{
return
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
{
addonId
:
this
.
id
}
)
;
}
isExtensionURL
(
url
)
{
let
uri
=
Services
.
io
.
newURI
(
url
null
null
)
;
let
common
=
this
.
baseURI
.
getCommonBaseSpec
(
uri
)
;
return
common
=
=
this
.
baseURI
.
spec
;
}
serialize
(
)
{
return
{
id
:
this
.
id
uuid
:
this
.
uuid
manifest
:
this
.
manifest
resourceURL
:
this
.
addonData
.
resourceURI
.
spec
baseURL
:
this
.
baseURI
.
spec
content_scripts
:
this
.
manifest
.
content_scripts
|
|
[
]
webAccessibleResources
:
this
.
webAccessibleResources
whiteListedHosts
:
this
.
whiteListedHosts
.
serialize
(
)
}
;
}
broadcast
(
msg
data
)
{
return
new
Promise
(
resolve
=
>
{
let
count
=
Services
.
ppmm
.
childCount
;
Services
.
ppmm
.
addMessageListener
(
msg
+
"
Complete
"
function
listener
(
)
{
count
-
-
;
if
(
count
=
=
0
)
{
Services
.
ppmm
.
removeMessageListener
(
msg
+
"
Complete
"
listener
)
;
resolve
(
)
;
}
}
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
msg
data
)
;
}
)
;
}
runManifest
(
manifest
)
{
let
permissions
=
manifest
.
permissions
|
|
[
]
;
let
webAccessibleResources
=
manifest
.
web_accessible_resources
|
|
[
]
;
let
whitelist
=
[
]
;
for
(
let
perm
of
permissions
)
{
if
(
perm
.
match
(
/
:
\
/
\
/
/
)
)
{
whitelist
.
push
(
perm
)
;
}
else
{
this
.
permissions
.
add
(
perm
)
;
}
}
this
.
whiteListedHosts
=
new
MatchPattern
(
whitelist
)
;
let
resources
=
new
Set
(
)
;
for
(
let
url
of
webAccessibleResources
)
{
resources
.
add
(
url
)
;
}
this
.
webAccessibleResources
=
resources
;
for
(
let
directive
in
manifest
)
{
Management
.
emit
(
"
manifest_
"
+
directive
directive
this
manifest
)
;
}
let
data
=
Services
.
ppmm
.
initialProcessData
;
if
(
!
data
[
"
Extension
:
Extensions
"
]
)
{
data
[
"
Extension
:
Extensions
"
]
=
[
]
;
}
let
serial
=
this
.
serialize
(
)
;
data
[
"
Extension
:
Extensions
"
]
.
push
(
serial
)
;
return
this
.
broadcast
(
"
Extension
:
Startup
"
serial
)
;
}
callOnClose
(
obj
)
{
this
.
onShutdown
.
add
(
obj
)
;
}
forgetOnClose
(
obj
)
{
this
.
onShutdown
.
delete
(
obj
)
;
}
initLocale
:
Task
.
async
(
function
*
(
locale
=
undefined
)
{
if
(
locale
=
=
=
undefined
)
{
let
locales
=
yield
this
.
promiseLocales
(
)
;
let
localeList
=
Array
.
from
(
locales
.
keys
(
)
locale
=
>
{
return
{
name
:
locale
locales
:
[
locale
]
}
;
}
)
;
let
match
=
Locale
.
findClosestLocale
(
localeList
)
;
locale
=
match
?
match
.
name
:
this
.
defaultLocale
;
}
return
ExtensionData
.
prototype
.
initLocale
.
call
(
this
locale
)
;
}
)
startup
(
)
{
try
{
ExtensionManagement
.
startupExtension
(
this
.
uuid
this
.
addonData
.
resourceURI
this
)
;
}
catch
(
e
)
{
return
Promise
.
reject
(
e
)
;
}
return
this
.
readManifest
(
)
.
then
(
(
)
=
>
{
return
this
.
initLocale
(
)
;
}
)
.
then
(
(
)
=
>
{
if
(
this
.
hasShutdown
)
{
return
;
}
GlobalManager
.
init
(
this
)
;
Management
.
emit
(
"
startup
"
this
)
;
return
this
.
runManifest
(
this
.
manifest
)
;
}
)
.
catch
(
e
=
>
{
dump
(
Extension
error
:
{
e
}
{
e
.
filename
|
|
e
.
fileName
}
:
{
e
.
lineNumber
}
\
n
)
;
Cu
.
reportError
(
e
)
;
throw
e
;
}
)
;
}
cleanupGeneratedFile
(
)
{
if
(
!
this
.
cleanupFile
)
{
return
;
}
let
file
=
this
.
cleanupFile
;
this
.
cleanupFile
=
null
;
Services
.
obs
.
removeObserver
(
this
"
xpcom
-
shutdown
"
)
;
this
.
broadcast
(
"
Extension
:
FlushJarCache
"
{
path
:
file
.
path
}
)
.
then
(
(
)
=
>
{
file
.
remove
(
false
)
;
}
)
;
}
shutdown
(
)
{
this
.
hasShutdown
=
true
;
if
(
!
this
.
manifest
)
{
return
;
}
GlobalManager
.
uninit
(
this
)
;
for
(
let
view
of
this
.
views
)
{
view
.
shutdown
(
)
;
}
for
(
let
obj
of
this
.
onShutdown
)
{
obj
.
close
(
)
;
}
Management
.
emit
(
"
shutdown
"
this
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
Extension
:
Shutdown
"
{
id
:
this
.
id
}
)
;
ExtensionManagement
.
shutdownExtension
(
this
.
uuid
)
;
this
.
cleanupGeneratedFile
(
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
xpcom
-
shutdown
"
)
{
this
.
cleanupGeneratedFile
(
)
;
}
}
hasPermission
(
perm
)
{
return
this
.
permissions
.
has
(
perm
)
;
}
get
name
(
)
{
return
this
.
localize
(
this
.
manifest
.
name
)
;
}
}
)
;
