"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
Extension
"
"
ExtensionData
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
importGlobalProperties
(
[
"
TextEncoder
"
]
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
processCount
"
"
dom
.
ipc
.
processCount
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionAPIs
"
"
resource
:
/
/
gre
/
modules
/
ExtensionAPI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionStorage
"
"
resource
:
/
/
gre
/
modules
/
ExtensionStorage
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionTestCommon
"
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Locale
"
"
resource
:
/
/
gre
/
modules
/
Locale
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Log
"
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MatchGlobs
"
"
resource
:
/
/
gre
/
modules
/
MatchPattern
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MatchPattern
"
"
resource
:
/
/
gre
/
modules
/
MatchPattern
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MessageChannel
"
"
resource
:
/
/
gre
/
modules
/
MessageChannel
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
require
"
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Schemas
"
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionContent
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionManagement
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
uuidGen
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
var
{
GlobalManager
ParentAPIManager
apiManager
:
Management
}
=
ExtensionParent
;
const
{
EventEmitter
LocaleData
getUniqueId
}
=
ExtensionUtils
;
XPCOMUtils
.
defineLazyGetter
(
this
"
console
"
ExtensionUtils
.
getConsole
)
;
const
LOGGER_ID_BASE
=
"
addons
.
webextension
.
"
;
const
UUID_MAP_PREF
=
"
extensions
.
webextensions
.
uuids
"
;
const
LEAVE_STORAGE_PREF
=
"
extensions
.
webextensions
.
keepStorageOnUninstall
"
;
const
LEAVE_UUID_PREF
=
"
extensions
.
webextensions
.
keepUuidOnUninstall
"
;
const
COMMENT_REGEXP
=
new
RegExp
(
String
.
raw
^
(
(
?
:
[
^
"
\
n
]
|
"
(
?
:
[
^
"
\
\
\
n
]
|
\
\
.
)
*
"
)
*
?
)
/
/
.
*
.
replace
(
/
\
s
+
/
g
"
"
)
"
gm
"
)
;
var
UUIDMap
=
{
_read
(
)
{
let
pref
=
Preferences
.
get
(
UUID_MAP_PREF
"
{
}
"
)
;
try
{
return
JSON
.
parse
(
pref
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
Error
parsing
{
UUID_MAP_PREF
}
.
)
;
return
{
}
;
}
}
_write
(
map
)
{
Preferences
.
set
(
UUID_MAP_PREF
JSON
.
stringify
(
map
)
)
;
}
get
(
id
create
=
true
)
{
let
map
=
this
.
_read
(
)
;
if
(
id
in
map
)
{
return
map
[
id
]
;
}
let
uuid
=
null
;
if
(
create
)
{
uuid
=
uuidGen
.
generateUUID
(
)
.
number
;
uuid
=
uuid
.
slice
(
1
-
1
)
;
map
[
id
]
=
uuid
;
this
.
_write
(
map
)
;
}
return
uuid
;
}
remove
(
id
)
{
let
map
=
this
.
_read
(
)
;
delete
map
[
id
]
;
this
.
_write
(
map
)
;
}
}
;
function
getExtensionUUID
(
id
)
{
return
UUIDMap
.
get
(
id
true
)
;
}
var
UninstallObserver
=
{
initialized
:
false
init
(
)
{
if
(
!
this
.
initialized
)
{
AddonManager
.
addAddonListener
(
this
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
leaveStorage
"
LEAVE_STORAGE_PREF
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
leaveUuid
"
LEAVE_UUID_PREF
false
)
;
this
.
initialized
=
true
;
}
}
onUninstalling
(
addon
)
{
let
extension
=
GlobalManager
.
extensionMap
.
get
(
addon
.
id
)
;
if
(
extension
)
{
Management
.
emit
(
"
uninstall
"
extension
)
;
}
}
onUninstalled
(
addon
)
{
let
uuid
=
UUIDMap
.
get
(
addon
.
id
false
)
;
if
(
!
uuid
)
{
return
;
}
if
(
!
this
.
leaveStorage
)
{
ExtensionStorage
.
clear
(
addon
.
id
)
;
let
baseURI
=
NetUtil
.
newURI
(
moz
-
extension
:
/
/
{
uuid
}
/
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
baseURI
{
addonId
:
addon
.
id
}
)
;
Services
.
qms
.
clearStoragesForPrincipal
(
principal
)
;
let
attrs
=
JSON
.
stringify
(
{
addonId
:
addon
.
id
}
)
;
Services
.
obs
.
notifyObservers
(
null
"
clear
-
origin
-
attributes
-
data
"
attrs
)
;
}
if
(
!
this
.
leaveUuid
)
{
UUIDMap
.
remove
(
addon
.
id
)
;
}
}
}
;
UninstallObserver
.
init
(
)
;
this
.
ExtensionData
=
class
{
constructor
(
rootURI
)
{
this
.
rootURI
=
rootURI
;
this
.
manifest
=
null
;
this
.
id
=
null
;
this
.
uuid
=
null
;
this
.
localeData
=
null
;
this
.
_promiseLocales
=
null
;
this
.
apiNames
=
new
Set
(
)
;
this
.
dependencies
=
new
Set
(
)
;
this
.
permissions
=
new
Set
(
)
;
this
.
errors
=
[
]
;
}
get
builtinMessages
(
)
{
return
null
;
}
get
logger
(
)
{
let
id
=
this
.
id
|
|
"
<
unknown
>
"
;
return
Log
.
repository
.
getLogger
(
LOGGER_ID_BASE
+
id
)
;
}
manifestError
(
message
)
{
this
.
packagingError
(
Reading
manifest
:
{
message
}
)
;
}
packagingError
(
message
)
{
this
.
errors
.
push
(
message
)
;
this
.
logger
.
error
(
Loading
extension
'
{
this
.
id
}
'
:
{
message
}
)
;
}
getURL
(
path
=
"
"
)
{
if
(
!
(
this
.
id
|
|
this
.
uuid
)
)
{
throw
new
Error
(
"
getURL
may
not
be
called
before
an
id
or
uuid
has
been
set
"
)
;
}
if
(
!
this
.
uuid
)
{
this
.
uuid
=
UUIDMap
.
get
(
this
.
id
)
;
}
return
moz
-
extension
:
/
/
{
this
.
uuid
}
/
{
path
}
;
}
readDirectory
(
path
)
{
return
Task
.
spawn
(
function
*
(
)
{
if
(
this
.
rootURI
instanceof
Ci
.
nsIFileURL
)
{
let
uri
=
NetUtil
.
newURI
(
this
.
rootURI
.
resolve
(
"
.
/
"
+
path
)
)
;
let
fullPath
=
uri
.
QueryInterface
(
Ci
.
nsIFileURL
)
.
file
.
path
;
let
iter
=
new
OS
.
File
.
DirectoryIterator
(
fullPath
)
;
let
results
=
[
]
;
try
{
yield
iter
.
forEach
(
entry
=
>
{
results
.
push
(
entry
)
;
}
)
;
}
catch
(
e
)
{
}
iter
.
close
(
)
;
return
results
;
}
let
uri
=
this
.
rootURI
.
QueryInterface
(
Ci
.
nsIJARURI
)
;
let
file
=
uri
.
JARFile
.
QueryInterface
(
Ci
.
nsIFileURL
)
.
file
;
let
zipReader
=
Cc
[
"
mozilla
.
org
/
libjar
/
zip
-
reader
;
1
"
]
.
createInstance
(
Ci
.
nsIZipReader
)
;
zipReader
.
open
(
file
)
;
try
{
let
results
=
[
]
;
path
=
{
uri
.
JAREntry
}
/
{
path
}
;
path
=
path
.
replace
(
/
\
/
\
/
+
/
g
"
/
"
)
.
replace
(
/
^
\
/
|
\
/
/
g
"
"
)
+
"
/
"
;
let
pattern
=
path
.
replace
(
/
[
[
\
]
(
)
?
*
~
|
\
\
]
/
g
"
\
\
&
"
)
;
let
enumerator
=
zipReader
.
findEntries
(
pattern
+
"
*
"
)
;
while
(
enumerator
.
hasMore
(
)
)
{
let
name
=
enumerator
.
getNext
(
)
;
if
(
!
name
.
startsWith
(
path
)
)
{
throw
new
Error
(
"
Unexpected
ZipReader
entry
"
)
;
}
name
=
name
.
slice
(
path
.
length
)
;
if
(
name
&
&
!
/
\
/
.
/
.
test
(
name
)
)
{
results
.
push
(
{
name
:
name
.
replace
(
"
/
"
"
"
)
isDir
:
name
.
endsWith
(
"
/
"
)
}
)
;
}
}
return
results
;
}
finally
{
zipReader
.
close
(
)
;
}
}
.
bind
(
this
)
)
;
}
readJSON
(
path
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
uri
=
this
.
rootURI
.
resolve
(
.
/
{
path
}
)
;
NetUtil
.
asyncFetch
(
{
uri
loadUsingSystemPrincipal
:
true
}
(
inputStream
status
)
=
>
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
let
e
=
Components
.
Exception
(
"
"
status
)
;
reject
(
new
Error
(
Error
while
loading
'
{
uri
}
'
(
{
e
.
name
}
)
)
)
;
return
;
}
try
{
let
text
=
NetUtil
.
readInputStreamToString
(
inputStream
inputStream
.
available
(
)
{
charset
:
"
utf
-
8
"
}
)
;
text
=
text
.
replace
(
COMMENT_REGEXP
"
1
"
)
;
resolve
(
JSON
.
parse
(
text
)
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
)
;
}
)
;
}
readManifest
(
)
{
return
Promise
.
all
(
[
this
.
readJSON
(
"
manifest
.
json
"
)
Management
.
lazyInit
(
)
]
)
.
then
(
(
[
manifest
]
)
=
>
{
this
.
manifest
=
manifest
;
this
.
rawManifest
=
manifest
;
if
(
manifest
&
&
manifest
.
default_locale
)
{
return
this
.
initLocale
(
)
;
}
}
)
.
then
(
(
)
=
>
{
let
context
=
{
url
:
this
.
baseURI
&
&
this
.
baseURI
.
spec
principal
:
this
.
principal
logError
:
error
=
>
{
this
.
logger
.
warn
(
Loading
extension
'
{
this
.
id
}
'
:
Reading
manifest
:
{
error
}
)
;
}
preprocessors
:
{
}
}
;
if
(
this
.
localeData
)
{
context
.
preprocessors
.
localize
=
(
value
context
)
=
>
this
.
localize
(
value
)
;
}
let
normalized
=
Schemas
.
normalize
(
this
.
manifest
"
manifest
.
WebExtensionManifest
"
context
)
;
if
(
normalized
.
error
)
{
this
.
manifestError
(
normalized
.
error
)
;
}
else
{
this
.
manifest
=
normalized
.
value
;
}
try
{
if
(
!
this
.
id
&
&
this
.
manifest
.
applications
.
gecko
.
id
)
{
this
.
id
=
this
.
manifest
.
applications
.
gecko
.
id
;
}
}
catch
(
e
)
{
}
let
permissions
=
this
.
manifest
.
permissions
|
|
[
]
;
let
whitelist
=
[
]
;
for
(
let
perm
of
permissions
)
{
this
.
permissions
.
add
(
perm
)
;
let
match
=
/
^
(
\
w
+
)
(
?
:
\
.
(
\
w
+
)
(
?
:
\
.
\
w
+
)
*
)
?
/
.
exec
(
perm
)
;
if
(
!
match
)
{
whitelist
.
push
(
perm
)
;
}
else
if
(
match
[
1
]
=
=
"
experiments
"
&
&
match
[
2
]
)
{
this
.
apiNames
.
add
(
match
[
2
]
)
;
}
}
this
.
whiteListedHosts
=
new
MatchPattern
(
whitelist
)
;
for
(
let
api
of
this
.
apiNames
)
{
this
.
dependencies
.
add
(
{
api
}
experiments
.
addons
.
mozilla
.
org
)
;
}
return
this
.
manifest
;
}
)
;
}
localizeMessage
(
.
.
.
args
)
{
return
this
.
localeData
.
localizeMessage
(
.
.
.
args
)
;
}
localize
(
.
.
.
args
)
{
return
this
.
localeData
.
localize
(
.
.
.
args
)
;
}
get
defaultLocale
(
)
{
if
(
this
.
manifest
.
default_locale
!
=
null
)
{
return
this
.
normalizeLocaleCode
(
this
.
manifest
.
default_locale
)
;
}
return
null
;
}
normalizeLocaleCode
(
locale
)
{
return
String
.
replace
(
locale
/
_
/
g
"
-
"
)
;
}
readLocaleFile
(
locale
)
{
return
Task
.
spawn
(
function
*
(
)
{
let
locales
=
yield
this
.
promiseLocales
(
)
;
let
dir
=
locales
.
get
(
locale
)
|
|
locale
;
let
file
=
_locales
/
{
dir
}
/
messages
.
json
;
try
{
let
messages
=
yield
this
.
readJSON
(
file
)
;
return
this
.
localeData
.
addLocale
(
locale
messages
this
)
;
}
catch
(
e
)
{
this
.
packagingError
(
Loading
locale
file
{
file
}
:
{
e
}
)
;
return
new
Map
(
)
;
}
}
.
bind
(
this
)
)
;
}
promiseLocales
(
)
{
if
(
!
this
.
_promiseLocales
)
{
this
.
_promiseLocales
=
Task
.
spawn
(
function
*
(
)
{
let
locales
=
new
Map
(
)
;
let
entries
=
yield
this
.
readDirectory
(
"
_locales
"
)
;
for
(
let
file
of
entries
)
{
if
(
file
.
isDir
)
{
let
locale
=
this
.
normalizeLocaleCode
(
file
.
name
)
;
locales
.
set
(
locale
file
.
name
)
;
}
}
this
.
localeData
=
new
LocaleData
(
{
defaultLocale
:
this
.
defaultLocale
locales
builtinMessages
:
this
.
builtinMessages
}
)
;
return
locales
;
}
.
bind
(
this
)
)
;
}
return
this
.
_promiseLocales
;
}
initAllLocales
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
let
locales
=
yield
this
.
promiseLocales
(
)
;
yield
Promise
.
all
(
Array
.
from
(
locales
.
keys
(
)
locale
=
>
this
.
readLocaleFile
(
locale
)
)
)
;
let
defaultLocale
=
this
.
defaultLocale
;
if
(
defaultLocale
)
{
if
(
!
locales
.
has
(
defaultLocale
)
)
{
this
.
manifestError
(
'
Value
for
"
default_locale
"
property
must
correspond
to
'
+
'
a
directory
in
"
_locales
/
"
.
Not
found
:
'
+
JSON
.
stringify
(
_locales
/
{
this
.
manifest
.
default_locale
}
/
)
)
;
}
}
else
if
(
locales
.
size
)
{
this
.
manifestError
(
'
The
"
default_locale
"
property
is
required
when
a
'
+
'
"
_locales
/
"
directory
is
present
.
'
)
;
}
return
this
.
localeData
.
messages
;
}
.
bind
(
this
)
)
;
}
initLocale
(
locale
=
this
.
defaultLocale
)
{
return
Task
.
spawn
(
function
*
(
)
{
if
(
locale
=
=
null
)
{
return
null
;
}
let
promises
=
[
this
.
readLocaleFile
(
locale
)
]
;
let
{
defaultLocale
}
=
this
;
if
(
locale
!
=
defaultLocale
&
&
!
this
.
localeData
.
has
(
defaultLocale
)
)
{
promises
.
push
(
this
.
readLocaleFile
(
defaultLocale
)
)
;
}
let
results
=
yield
Promise
.
all
(
promises
)
;
this
.
localeData
.
selectedLocale
=
locale
;
return
results
[
0
]
;
}
.
bind
(
this
)
)
;
}
}
;
let
_browserUpdated
=
false
;
const
PROXIED_EVENTS
=
new
Set
(
[
"
test
-
harness
-
message
"
]
)
;
this
.
Extension
=
class
extends
ExtensionData
{
constructor
(
addonData
startupReason
)
{
super
(
addonData
.
resourceURI
)
;
this
.
uuid
=
UUIDMap
.
get
(
addonData
.
id
)
;
this
.
instanceId
=
getUniqueId
(
)
;
this
.
MESSAGE_EMIT_EVENT
=
Extension
:
EmitEvent
:
{
this
.
instanceId
}
;
Services
.
ppmm
.
addMessageListener
(
this
.
MESSAGE_EMIT_EVENT
this
)
;
if
(
addonData
.
cleanupFile
)
{
Services
.
obs
.
addObserver
(
this
"
xpcom
-
shutdown
"
false
)
;
this
.
cleanupFile
=
addonData
.
cleanupFile
|
|
null
;
delete
addonData
.
cleanupFile
;
}
this
.
addonData
=
addonData
;
this
.
startupReason
=
startupReason
;
this
.
remote
=
ExtensionManagement
.
useRemoteWebExtensions
;
if
(
this
.
remote
&
&
processCount
!
=
=
1
)
{
throw
new
Error
(
"
Out
-
of
-
process
WebExtensions
are
not
supported
with
multiple
child
processes
"
)
;
}
this
.
id
=
addonData
.
id
;
this
.
baseURI
=
NetUtil
.
newURI
(
this
.
getURL
(
"
"
)
)
.
QueryInterface
(
Ci
.
nsIURL
)
;
this
.
principal
=
this
.
createPrincipal
(
)
;
this
.
onStartup
=
null
;
this
.
hasShutdown
=
false
;
this
.
onShutdown
=
new
Set
(
)
;
this
.
uninstallURL
=
null
;
this
.
apis
=
[
]
;
this
.
whiteListedHosts
=
null
;
this
.
webAccessibleResources
=
null
;
this
.
emitter
=
new
EventEmitter
(
)
;
}
get
parentMessageManager
(
)
{
if
(
this
.
remote
)
{
return
Services
.
ppmm
.
getChildAt
(
1
)
;
}
return
Services
.
ppmm
.
getChildAt
(
0
)
;
}
static
set
browserUpdated
(
updated
)
{
_browserUpdated
=
updated
;
}
static
get
browserUpdated
(
)
{
return
_browserUpdated
;
}
static
generateXPI
(
data
)
{
return
ExtensionTestCommon
.
generateXPI
(
data
)
;
}
static
generateZipFile
(
files
baseName
=
"
generated
-
extension
.
xpi
"
)
{
return
ExtensionTestCommon
.
generateZipFile
(
files
baseName
)
;
}
static
generate
(
data
)
{
return
ExtensionTestCommon
.
generate
(
data
)
;
}
on
(
hook
f
)
{
return
this
.
emitter
.
on
(
hook
f
)
;
}
off
(
hook
f
)
{
return
this
.
emitter
.
off
(
hook
f
)
;
}
emit
(
event
.
.
.
args
)
{
if
(
PROXIED_EVENTS
.
has
(
event
)
)
{
Services
.
ppmm
.
broadcastAsyncMessage
(
this
.
MESSAGE_EMIT_EVENT
{
event
args
}
)
;
}
return
this
.
emitter
.
emit
(
event
.
.
.
args
)
;
}
receiveMessage
(
{
name
data
}
)
{
if
(
name
=
=
=
this
.
MESSAGE_EMIT_EVENT
)
{
this
.
emitter
.
emit
(
data
.
event
.
.
.
data
.
args
)
;
}
}
testMessage
(
.
.
.
args
)
{
this
.
emit
(
"
test
-
harness
-
message
"
.
.
.
args
)
;
}
createPrincipal
(
uri
=
this
.
baseURI
)
{
return
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
{
addonId
:
this
.
id
}
)
;
}
isExtensionURL
(
url
)
{
let
uri
=
Services
.
io
.
newURI
(
url
null
null
)
;
let
common
=
this
.
baseURI
.
getCommonBaseSpec
(
uri
)
;
return
common
=
=
this
.
baseURI
.
spec
;
}
readManifest
(
)
{
return
super
.
readManifest
(
)
.
then
(
manifest
=
>
{
if
(
AppConstants
.
RELEASE_OR_BETA
)
{
return
manifest
;
}
return
Promise
.
all
(
Array
.
from
(
this
.
apiNames
api
=
>
ExtensionAPIs
.
load
(
api
)
)
)
.
then
(
apis
=
>
{
for
(
let
API
of
apis
)
{
this
.
apis
.
push
(
new
API
(
this
)
)
;
}
return
manifest
;
}
)
;
}
)
;
}
serialize
(
)
{
return
{
id
:
this
.
id
uuid
:
this
.
uuid
instanceId
:
this
.
instanceId
manifest
:
this
.
manifest
resourceURL
:
this
.
addonData
.
resourceURI
.
spec
baseURL
:
this
.
baseURI
.
spec
content_scripts
:
this
.
manifest
.
content_scripts
|
|
[
]
webAccessibleResources
:
this
.
webAccessibleResources
.
serialize
(
)
whiteListedHosts
:
this
.
whiteListedHosts
.
serialize
(
)
localeData
:
this
.
localeData
.
serialize
(
)
permissions
:
this
.
permissions
principal
:
this
.
principal
}
;
}
broadcast
(
msg
data
)
{
return
new
Promise
(
resolve
=
>
{
let
{
ppmm
}
=
Services
;
let
children
=
new
Set
(
)
;
for
(
let
i
=
0
;
i
<
ppmm
.
childCount
;
i
+
+
)
{
children
.
add
(
ppmm
.
getChildAt
(
i
)
)
;
}
let
maybeResolve
;
function
listener
(
data
)
{
children
.
delete
(
data
.
target
)
;
maybeResolve
(
)
;
}
function
observer
(
subject
topic
data
)
{
children
.
delete
(
subject
)
;
maybeResolve
(
)
;
}
maybeResolve
=
(
)
=
>
{
if
(
children
.
size
=
=
=
0
)
{
ppmm
.
removeMessageListener
(
msg
+
"
Complete
"
listener
)
;
Services
.
obs
.
removeObserver
(
observer
"
message
-
manager
-
close
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
message
-
manager
-
disconnect
"
)
;
resolve
(
)
;
}
}
;
ppmm
.
addMessageListener
(
msg
+
"
Complete
"
listener
)
;
Services
.
obs
.
addObserver
(
observer
"
message
-
manager
-
close
"
false
)
;
Services
.
obs
.
addObserver
(
observer
"
message
-
manager
-
disconnect
"
false
)
;
ppmm
.
broadcastAsyncMessage
(
msg
data
)
;
}
)
;
}
runManifest
(
manifest
)
{
let
strippedWebAccessibleResources
=
[
]
;
if
(
manifest
.
web_accessible_resources
)
{
strippedWebAccessibleResources
=
manifest
.
web_accessible_resources
.
map
(
path
=
>
path
.
replace
(
/
^
\
/
+
/
"
"
)
)
;
}
this
.
webAccessibleResources
=
new
MatchGlobs
(
strippedWebAccessibleResources
)
;
let
promises
=
[
]
;
for
(
let
directive
in
manifest
)
{
if
(
manifest
[
directive
]
!
=
=
null
)
{
promises
.
push
(
Management
.
emit
(
manifest_
{
directive
}
directive
this
manifest
)
)
;
}
}
let
data
=
Services
.
ppmm
.
initialProcessData
;
if
(
!
data
[
"
Extension
:
Extensions
"
]
)
{
data
[
"
Extension
:
Extensions
"
]
=
[
]
;
}
let
serial
=
this
.
serialize
(
)
;
data
[
"
Extension
:
Extensions
"
]
.
push
(
serial
)
;
return
this
.
broadcast
(
"
Extension
:
Startup
"
serial
)
.
then
(
(
)
=
>
{
return
Promise
.
all
(
promises
)
;
}
)
;
}
callOnClose
(
obj
)
{
this
.
onShutdown
.
add
(
obj
)
;
}
forgetOnClose
(
obj
)
{
this
.
onShutdown
.
delete
(
obj
)
;
}
get
builtinMessages
(
)
{
return
new
Map
(
[
[
"
extension_id
"
this
.
uuid
]
]
)
;
}
initLocale
(
locale
=
undefined
)
{
let
super_
=
super
.
initLocale
.
bind
(
this
)
;
return
Task
.
spawn
(
function
*
(
)
{
if
(
locale
=
=
=
undefined
)
{
let
locales
=
yield
this
.
promiseLocales
(
)
;
let
localeList
=
Array
.
from
(
locales
.
keys
(
)
locale
=
>
{
return
{
name
:
locale
locales
:
[
locale
]
}
;
}
)
;
let
match
=
Locale
.
findClosestLocale
(
localeList
)
;
locale
=
match
?
match
.
name
:
this
.
defaultLocale
;
}
return
super_
(
locale
)
;
}
.
bind
(
this
)
)
;
}
startup
(
)
{
let
started
=
false
;
return
this
.
readManifest
(
)
.
then
(
(
)
=
>
{
ExtensionManagement
.
startupExtension
(
this
.
uuid
this
.
addonData
.
resourceURI
this
)
;
started
=
true
;
if
(
!
this
.
hasShutdown
)
{
return
this
.
initLocale
(
)
;
}
}
)
.
then
(
(
)
=
>
{
if
(
this
.
errors
.
length
)
{
return
Promise
.
reject
(
{
errors
:
this
.
errors
}
)
;
}
if
(
this
.
hasShutdown
)
{
return
;
}
GlobalManager
.
init
(
this
)
;
this
.
emit
(
"
startup
"
this
)
;
Management
.
emit
(
"
startup
"
this
)
;
return
this
.
runManifest
(
this
.
manifest
)
;
}
)
.
then
(
(
)
=
>
{
Management
.
emit
(
"
ready
"
this
)
;
}
)
.
catch
(
e
=
>
{
dump
(
Extension
error
:
{
e
.
message
}
{
e
.
filename
|
|
e
.
fileName
}
:
{
e
.
lineNumber
}
:
:
{
e
.
stack
|
|
new
Error
(
)
.
stack
}
\
n
)
;
Cu
.
reportError
(
e
)
;
if
(
started
)
{
ExtensionManagement
.
shutdownExtension
(
this
.
uuid
)
;
}
this
.
cleanupGeneratedFile
(
)
;
throw
e
;
}
)
;
}
cleanupGeneratedFile
(
)
{
if
(
!
this
.
cleanupFile
)
{
return
;
}
let
file
=
this
.
cleanupFile
;
this
.
cleanupFile
=
null
;
Services
.
obs
.
removeObserver
(
this
"
xpcom
-
shutdown
"
)
;
this
.
broadcast
(
"
Extension
:
FlushJarCache
"
{
path
:
file
.
path
}
)
.
then
(
(
)
=
>
{
file
.
remove
(
false
)
;
}
)
;
}
shutdown
(
)
{
this
.
hasShutdown
=
true
;
Services
.
ppmm
.
removeMessageListener
(
this
.
MESSAGE_EMIT_EVENT
this
)
;
if
(
!
this
.
manifest
)
{
ExtensionManagement
.
shutdownExtension
(
this
.
uuid
)
;
this
.
cleanupGeneratedFile
(
)
;
return
;
}
GlobalManager
.
uninit
(
this
)
;
for
(
let
obj
of
this
.
onShutdown
)
{
obj
.
close
(
)
;
}
for
(
let
api
of
this
.
apis
)
{
api
.
destroy
(
)
;
}
ParentAPIManager
.
shutdownExtension
(
this
.
id
)
;
Management
.
emit
(
"
shutdown
"
this
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
Extension
:
Shutdown
"
{
id
:
this
.
id
}
)
;
MessageChannel
.
abortResponses
(
{
extensionId
:
this
.
id
}
)
;
ExtensionManagement
.
shutdownExtension
(
this
.
uuid
)
;
this
.
cleanupGeneratedFile
(
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
xpcom
-
shutdown
"
)
{
this
.
cleanupGeneratedFile
(
)
;
}
}
hasPermission
(
perm
)
{
let
match
=
/
^
manifest
:
(
.
*
)
/
.
exec
(
perm
)
;
if
(
match
)
{
return
this
.
manifest
[
match
[
1
]
]
!
=
null
;
}
return
this
.
permissions
.
has
(
perm
)
;
}
get
name
(
)
{
return
this
.
manifest
.
name
;
}
}
;
