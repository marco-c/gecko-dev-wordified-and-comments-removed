"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Actor
'
Conduits
'
destroyed
before
query
'
RunListener
'
was
resolved
/
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
const
server
=
AddonTestUtils
.
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
"
anotherwebpage
.
org
"
]
}
)
;
server
.
registerPathHandler
(
"
/
"
(
request
response
)
=
>
{
response
.
write
(
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
title
>
test
webpage
<
/
title
>
<
/
head
>
<
/
html
>
)
;
}
)
;
function
createTestExtPage
(
{
script
}
)
{
return
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
script
src
=
"
{
script
}
"
>
<
/
script
>
<
/
head
>
<
/
html
>
;
}
function
createTestExtPageScript
(
name
)
{
return
(
{
function
(
pageName
)
{
browser
.
webRequest
.
onBeforeRequest
.
addListener
(
details
=
>
{
browser
.
test
.
log
(
Extension
page
"
{
pageName
}
"
got
a
webRequest
event
:
{
details
.
url
}
)
;
browser
.
test
.
sendMessage
(
event
-
received
:
{
pageName
}
)
;
}
{
types
:
[
"
main_frame
"
]
urls
:
[
"
http
:
/
/
example
.
com
/
*
"
]
}
)
;
window
.
addEventListener
(
"
pageshow
"
(
)
=
>
{
browser
.
test
.
log
(
Extension
page
"
{
pageName
}
"
got
a
pageshow
event
)
;
browser
.
test
.
sendMessage
(
pageshow
:
{
pageName
}
)
;
}
)
;
window
.
addEventListener
(
"
pagehide
"
(
)
=
>
{
browser
.
test
.
log
(
Extension
page
"
{
pageName
}
"
got
a
pagehide
event
)
;
browser
.
test
.
sendMessage
(
pagehide
:
{
pageName
}
)
;
}
)
;
}
}
)
(
"
{
name
}
"
)
;
;
}
async
function
triggerWebRequestListener
(
webPageURL
pause
)
{
let
webPageTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
webPageURL
}
true
true
)
;
BrowserTestUtils
.
removeTab
(
webPageTab
)
;
}
add_task
(
async
function
test_extension_page_sameprocess_navigation
(
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
webRequest
"
"
http
:
/
/
example
.
com
/
*
"
]
}
files
:
{
"
extpage1
.
html
"
:
createTestExtPage
(
{
script
:
"
extpage1
.
js
"
}
)
"
extpage1
.
js
"
:
createTestExtPageScript
(
"
extpage1
"
)
"
extpage2
.
html
"
:
createTestExtPage
(
{
script
:
"
extpage2
.
js
"
}
)
"
extpage2
.
js
"
:
createTestExtPageScript
(
"
extpage2
"
)
}
}
)
;
await
extension
.
startup
(
)
;
const
policy
=
WebExtensionPolicy
.
getByID
(
extension
.
id
)
;
const
extPageURL1
=
policy
.
extension
.
baseURI
.
resolve
(
"
extpage1
.
html
"
)
;
const
extPageURL2
=
policy
.
extension
.
baseURI
.
resolve
(
"
extpage2
.
html
"
)
;
info
(
"
Opening
extension
page
in
a
new
tab
"
)
;
const
extPageTab
=
await
BrowserTestUtils
.
addTab
(
gBrowser
extPageURL1
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
extPageTab
)
;
info
(
"
Wait
for
the
extension
page
to
be
loaded
"
)
;
await
extension
.
awaitMessage
(
"
pageshow
:
extpage1
"
)
;
await
triggerWebRequestListener
(
"
http
:
/
/
example
.
com
"
)
;
await
extension
.
awaitMessage
(
"
event
-
received
:
extpage1
"
)
;
ok
(
true
"
extpage1
got
a
webRequest
event
as
expected
"
)
;
info
(
"
Load
a
second
extension
page
in
the
same
tab
"
)
;
BrowserTestUtils
.
loadURIString
(
browser
extPageURL2
)
;
info
(
"
Wait
extpage1
to
receive
a
pagehide
event
"
)
;
await
extension
.
awaitMessage
(
"
pagehide
:
extpage1
"
)
;
info
(
"
Wait
extpage2
to
receive
a
pageshow
event
"
)
;
await
extension
.
awaitMessage
(
"
pageshow
:
extpage2
"
)
;
info
(
"
Trigger
a
web
request
event
and
expect
extpage2
to
be
the
only
one
receiving
it
"
)
;
await
triggerWebRequestListener
(
"
http
:
/
/
example
.
com
"
)
;
await
extension
.
awaitMessage
(
"
event
-
received
:
extpage2
"
)
;
ok
(
true
"
extpage2
got
a
webRequest
event
as
expected
"
)
;
info
(
"
Navigating
back
to
extpage1
and
expect
extpage2
to
be
the
only
one
receiving
the
webRequest
event
"
)
;
browser
.
goBack
(
)
;
info
(
"
Wait
for
extpage1
to
receive
a
pageshow
event
"
)
;
await
extension
.
awaitMessage
(
"
pageshow
:
extpage1
"
)
;
info
(
"
Wait
for
extpage2
to
receive
a
pagehide
event
"
)
;
await
extension
.
awaitMessage
(
"
pagehide
:
extpage2
"
)
;
await
triggerWebRequestListener
(
"
http
:
/
/
example
.
com
"
)
;
await
extension
.
awaitMessage
(
"
event
-
received
:
extpage1
"
)
;
ok
(
true
"
extpage1
got
a
webRequest
event
as
expected
"
)
;
BrowserTestUtils
.
removeTab
(
extPageTab
)
;
await
extension
.
awaitMessage
(
"
pagehide
:
extpage1
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_extension_page_context_navigated_to_web_page
(
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
webRequest
"
"
http
:
/
/
example
.
com
/
*
"
]
}
files
:
{
"
extpage
.
html
"
:
createTestExtPage
(
{
script
:
"
extpage
.
js
"
}
)
"
extpage
.
js
"
:
createTestExtPageScript
(
"
extpage
"
)
}
}
)
;
await
extension
.
startup
(
)
;
const
policy
=
WebExtensionPolicy
.
getByID
(
extension
.
id
)
;
const
extPageURL
=
policy
.
extension
.
baseURI
.
resolve
(
"
extpage
.
html
"
)
;
const
webPageURL
=
"
http
:
/
/
anotherwebpage
.
org
/
"
;
const
triggerWebRequestURL
=
"
http
:
/
/
example
.
com
/
"
;
info
(
"
Opening
extension
page
in
a
new
tab
"
)
;
const
extPageTab1
=
await
BrowserTestUtils
.
addTab
(
gBrowser
extPageURL
)
;
let
browserForTab1
=
gBrowser
.
getBrowserForTab
(
extPageTab1
)
;
info
(
"
Wait
for
the
extension
page
to
be
loaded
"
)
;
await
extension
.
awaitMessage
(
"
pageshow
:
extpage
"
)
;
info
(
"
Navigate
the
tab
from
the
extension
page
to
a
web
page
"
)
;
let
promiseLoaded
=
BrowserTestUtils
.
browserLoaded
(
browserForTab1
false
webPageURL
)
;
BrowserTestUtils
.
loadURIString
(
browserForTab1
webPageURL
)
;
info
(
"
Wait
the
tab
to
have
loaded
the
new
webpage
url
"
)
;
await
promiseLoaded
;
info
(
"
Wait
the
extension
page
to
receive
a
pagehide
event
"
)
;
await
extension
.
awaitMessage
(
"
pagehide
:
extpage
"
)
;
await
triggerWebRequestListener
(
triggerWebRequestURL
)
;
info
(
"
Navigate
back
to
the
extension
page
"
)
;
browserForTab1
.
goBack
(
)
;
info
(
"
Wait
for
extension
page
to
receive
a
pageshow
event
"
)
;
await
extension
.
awaitMessage
(
"
pageshow
:
extpage
"
)
;
await
triggerWebRequestListener
(
triggerWebRequestURL
)
;
await
extension
.
awaitMessage
(
"
event
-
received
:
extpage
"
)
;
ok
(
true
"
extpage
got
a
webRequest
event
as
expected
after
being
restored
from
BFCache
"
)
;
info
(
"
Cleanup
and
exit
test
"
)
;
BrowserTestUtils
.
removeTab
(
extPageTab1
)
;
info
(
"
Wait
the
extension
page
to
receive
a
pagehide
event
"
)
;
await
extension
.
awaitMessage
(
"
pagehide
:
extpage
"
)
;
await
extension
.
unload
(
)
;
}
)
;
