"
use
strict
"
;
add_task
(
async
function
test_default_additional_backgrounds_alignment
(
)
{
const
RIGHT_TOP
=
"
100
%
0
%
"
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
theme
:
{
images
:
{
theme_frame
:
"
image1
.
png
"
additional_backgrounds
:
[
"
image1
.
png
"
"
image1
.
png
"
]
}
colors
:
{
frame
:
ACCENT_COLOR
tab_background_text
:
TEXT_COLOR
}
}
}
files
:
{
"
image1
.
png
"
:
BACKGROUND
}
}
)
;
await
extension
.
startup
(
)
;
if
(
backgroundColorSetOnRoot
(
)
)
{
let
docEl
=
document
.
documentElement
;
let
rootCS
=
window
.
getComputedStyle
(
docEl
)
;
Assert
.
equal
(
rootCS
.
getPropertyValue
(
"
background
-
position
"
)
{
RIGHT_TOP
}
{
RIGHT_TOP
}
"
root
only
contains
theme_frame
alignment
property
"
)
;
}
else
{
let
toolbox
=
document
.
querySelector
(
"
#
navigator
-
toolbox
"
)
;
let
toolboxCS
=
window
.
getComputedStyle
(
toolbox
)
;
Assert
.
equal
(
toolboxCS
.
getPropertyValue
(
"
background
-
position
"
)
{
RIGHT_TOP
}
{
RIGHT_TOP
}
toolbox
.
id
+
"
contains
theme_frame
and
default
lwt
-
background
-
alignment
properties
"
)
;
}
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_additional_backgrounds_alignment
(
)
{
const
LEFT_BOTTOM
=
"
0
%
100
%
"
;
const
CENTER_CENTER
=
"
50
%
50
%
"
;
const
RIGHT_TOP
=
"
100
%
0
%
"
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
theme
:
{
images
:
{
theme_frame
:
"
image1
.
png
"
additional_backgrounds
:
[
"
image1
.
png
"
"
image1
.
png
"
"
image1
.
png
"
]
}
colors
:
{
frame
:
ACCENT_COLOR
tab_background_text
:
TEXT_COLOR
}
properties
:
{
additional_backgrounds_alignment
:
[
"
left
bottom
"
"
center
center
"
"
right
top
"
]
}
}
}
files
:
{
"
image1
.
png
"
:
BACKGROUND
}
}
)
;
await
extension
.
startup
(
)
;
if
(
backgroundColorSetOnRoot
(
)
)
{
let
docEl
=
document
.
documentElement
;
let
rootCS
=
window
.
getComputedStyle
(
docEl
)
;
Assert
.
equal
(
rootCS
.
getPropertyValue
(
"
background
-
position
"
)
RIGHT_TOP
+
"
"
+
LEFT_BOTTOM
+
"
"
+
CENTER_CENTER
+
"
"
+
RIGHT_TOP
"
root
only
contains
theme_frame
alignment
property
"
)
;
}
else
{
let
toolbox
=
document
.
querySelector
(
"
#
navigator
-
toolbox
"
)
;
let
toolboxCS
=
window
.
getComputedStyle
(
toolbox
)
;
Assert
.
equal
(
toolboxCS
.
getPropertyValue
(
"
background
-
position
"
)
RIGHT_TOP
+
"
"
+
LEFT_BOTTOM
+
"
"
+
CENTER_CENTER
+
"
"
+
RIGHT_TOP
toolbox
.
id
+
"
contains
theme_frame
and
additional_backgrounds
alignment
properties
"
)
;
}
await
extension
.
unload
(
)
;
}
)
;
