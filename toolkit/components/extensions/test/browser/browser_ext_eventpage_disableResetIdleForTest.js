"
use
strict
"
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
const
{
AppUiTestDelegate
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AppUiTestDelegate
.
sys
.
mjs
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Actor
'
Conduits
'
destroyed
before
query
'
RunListener
'
/
)
;
async
function
run_test_disableResetIdleForTest
(
options
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
manifest_version
:
3
action
:
{
}
}
background
(
)
{
browser
.
action
.
onClicked
.
addListener
(
async
(
)
=
>
{
browser
.
test
.
notifyPass
(
"
action
-
clicked
"
)
;
await
new
Promise
(
(
)
=
>
{
}
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
background
-
ready
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
background
-
ready
"
)
;
assertPersistentListeners
(
extension
"
browserAction
"
"
onClicked
"
{
primed
:
false
}
)
;
await
extension
.
terminateBackground
(
)
;
assertPersistentListeners
(
extension
"
browserAction
"
"
onClicked
"
{
primed
:
true
}
)
;
await
AppUiTestDelegate
.
clickBrowserAction
(
window
extension
.
id
)
;
await
extension
.
awaitFinish
(
"
action
-
clicked
"
)
;
await
AppUiTestDelegate
.
closeBrowserAction
(
window
extension
.
id
)
;
await
extension
.
awaitMessage
(
"
background
-
ready
"
)
;
assertPersistentListeners
(
extension
"
browserAction
"
"
onClicked
"
{
primed
:
false
}
)
;
await
extension
.
terminateBackground
(
options
)
;
assertPersistentListeners
(
extension
"
browserAction
"
"
onClicked
"
{
primed
:
!
!
options
?
.
disableResetIdleForTest
}
)
;
await
extension
.
unload
(
)
;
}
add_task
(
async
function
test_disableResetIdleForTest_default
(
)
{
await
run_test_disableResetIdleForTest
(
)
;
}
)
;
add_task
(
async
function
test_disableResetIdleForTest_true
(
)
{
await
run_test_disableResetIdleForTest
(
{
disableResetIdleForTest
:
true
}
)
;
}
)
;
