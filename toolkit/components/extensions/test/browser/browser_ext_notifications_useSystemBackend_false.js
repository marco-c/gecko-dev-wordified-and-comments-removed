"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
const
server
=
AddonTestUtils
.
createHttpServer
(
)
;
const
serverHost
=
server
.
identity
.
primaryHost
;
const
serverPort
=
server
.
identity
.
primaryPort
;
add_setup
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
alerts
.
useSystemBackend
"
false
]
]
}
)
;
}
)
;
async
function
testCreateNotification
(
{
iconUrl
testOnShown
}
)
{
function
background
(
)
{
function
createBlobUrlForTest
(
)
{
const
imgData
=
Uint8Array
.
fromBase64
(
"
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAADElEQVQImWNgoBMAAABpAAFEI8ARAAAAAElFTkSuQmCC
"
)
;
const
blob
=
new
Blob
(
[
imgData
]
{
type
:
"
image
/
png
"
}
)
;
return
URL
.
createObjectURL
(
blob
)
;
}
browser
.
test
.
onMessage
.
addListener
(
async
(
msg
iconUrl
)
=
>
{
browser
.
test
.
assertEq
(
"
iconUrl
"
msg
"
Expected
message
"
)
;
if
(
iconUrl
=
=
"
blob
:
REPLACE_WITH_REAL_URL_IN_TEST
"
)
{
iconUrl
=
createBlobUrlForTest
(
)
;
}
if
(
iconUrl
=
=
=
"
moz
-
extension
:
REPLACE_WITH_REAL_URL_IN_TEST
"
)
{
iconUrl
=
browser
.
runtime
.
getURL
(
"
5x5
.
png
"
)
;
}
let
shownPromise
=
new
Promise
(
resolve
=
>
{
browser
.
notifications
.
onShown
.
addListener
(
resolve
)
;
}
)
;
let
closedPromise
=
new
Promise
(
resolve
=
>
{
browser
.
notifications
.
onClosed
.
addListener
(
resolve
)
;
}
)
;
let
createdId
=
await
browser
.
notifications
.
create
(
"
notifid
"
{
iconUrl
type
:
"
basic
"
title
:
"
title
"
message
:
"
msg
"
}
)
;
let
shownId
=
await
shownPromise
;
browser
.
test
.
assertEq
(
createdId
shownId
"
ID
of
shown
notification
"
)
;
browser
.
test
.
sendMessage
(
"
notification_shown
"
)
;
let
closedId
=
await
closedPromise
;
browser
.
test
.
assertEq
(
createdId
closedId
"
ID
of
closed
notification
"
)
;
browser
.
test
.
assertEq
(
"
{
}
"
JSON
.
stringify
(
await
browser
.
notifications
.
getAll
(
)
)
"
no
notifications
left
"
)
;
browser
.
test
.
sendMessage
(
"
notification_closed
"
)
;
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
notifications
"
]
}
background
files
:
{
"
5x5
.
png
"
:
imageBufferFromDataURI
(
"
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAADElEQVQImWNgoBMAAABpAAFEI8ARAAAAAElFTkSuQmCC
"
)
}
}
)
;
await
extension
.
startup
(
)
;
extension
.
sendMessage
(
"
iconUrl
"
iconUrl
)
;
await
extension
.
awaitMessage
(
"
notification_shown
"
)
;
let
alertWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
alert
:
alert
"
)
;
ok
(
alertWindow
"
Found
alert
.
xhtml
window
"
)
;
await
testOnShown
(
alertWindow
)
;
info
(
"
Closing
alert
.
xhtml
window
"
)
;
alertWindow
.
document
.
querySelector
(
"
.
close
-
icon
"
)
.
click
(
)
;
await
extension
.
awaitMessage
(
"
notification_closed
"
)
;
await
extension
.
unload
(
)
;
}
add_task
(
async
function
test_http_icon
(
)
{
const
requestPromise
=
new
Promise
(
resolve
=
>
{
let
count
=
0
;
server
.
registerPathHandler
(
"
/
test_http_icon
.
png
"
(
)
=
>
{
is
(
+
+
count
1
"
Got
one
request
to
test_http_icon
.
png
"
)
;
resolve
(
)
;
}
)
;
}
)
;
const
httpUrl
=
http
:
/
/
{
serverHost
}
:
{
serverPort
}
/
test_http_icon
.
png
;
await
testCreateNotification
(
{
iconUrl
:
httpUrl
async
testOnShown
(
alertWindow
)
{
info
(
"
Waiting
for
test_http_icon
.
png
request
to
be
detected
.
"
)
;
const
img
=
alertWindow
.
document
.
getElementById
(
"
alertImage
"
)
;
is
(
img
.
src
httpUrl
"
Got
http
:
-
URL
"
)
;
await
requestPromise
;
}
}
)
;
}
)
;
add_task
(
async
function
test_data_icon
(
)
{
const
dataUrl
=
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAADElEQVQImWNgoBMAAABpAAFEI8ARAAAAAElFTkSuQmCC
"
;
await
testCreateNotification
(
{
iconUrl
:
dataUrl
async
testOnShown
(
alertWindow
)
{
const
img
=
alertWindow
.
document
.
getElementById
(
"
alertImage
"
)
;
is
(
img
.
src
dataUrl
"
Got
data
:
-
URL
"
)
;
info
(
"
Verifying
that
data
:
-
URL
can
be
loaded
in
the
document
.
"
)
;
const
testImg
=
alertWindow
.
document
.
createElement
(
"
img
"
)
;
testImg
.
src
=
dataUrl
;
await
testImg
.
decode
(
)
;
is
(
testImg
.
naturalWidth
5
"
Test
image
was
loaded
successfully
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_blob_icon
(
)
{
await
testCreateNotification
(
{
iconUrl
:
"
blob
:
REPLACE_WITH_REAL_URL_IN_TEST
"
async
testOnShown
(
alertWindow
)
{
const
img
=
alertWindow
.
document
.
getElementById
(
"
alertImage
"
)
;
ok
(
img
.
src
.
startsWith
(
"
blob
:
moz
-
extension
"
)
Got
blob
:
-
URL
:
{
img
.
src
}
)
;
info
(
"
Verifying
that
blob
:
-
URL
can
be
loaded
in
the
document
.
"
)
;
const
testImg
=
alertWindow
.
document
.
createElement
(
"
img
"
)
;
testImg
.
src
=
img
.
src
;
await
testImg
.
decode
(
)
;
is
(
testImg
.
naturalWidth
5
"
Test
image
was
loaded
successfully
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_moz_extension_icon
(
)
{
await
testCreateNotification
(
{
iconUrl
:
"
moz
-
extension
:
REPLACE_WITH_REAL_URL_IN_TEST
"
async
testOnShown
(
alertWindow
)
{
const
img
=
alertWindow
.
document
.
getElementById
(
"
alertImage
"
)
;
ok
(
img
.
src
.
startsWith
(
"
moz
-
extension
:
/
"
)
&
&
img
.
src
.
endsWith
(
"
/
5x5
.
png
"
)
Got
moz
-
extension
:
-
URL
:
{
img
.
src
}
)
;
info
(
"
Verifying
that
moz
-
extension
:
-
URL
can
be
loaded
in
the
document
.
"
)
;
const
testImg
=
alertWindow
.
document
.
createElement
(
"
img
"
)
;
testImg
.
src
=
img
.
src
;
await
testImg
.
decode
(
)
;
is
(
testImg
.
naturalWidth
5
"
Test
image
was
loaded
successfully
"
)
;
}
}
)
;
}
)
;
