"
use
strict
"
;
const
{
ExtensionCommon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionCommon
.
jsm
"
)
;
class
KintoExtContext
extends
ExtensionCommon
.
BaseContext
{
constructor
(
principal
)
{
super
(
)
;
Object
.
defineProperty
(
this
"
principal
"
{
value
:
principal
configurable
:
true
}
)
;
this
.
sandbox
=
Cu
.
Sandbox
(
principal
{
wantXrays
:
false
}
)
;
this
.
extension
=
{
id
:
"
test
web
.
extension
"
}
;
}
get
cloneScope
(
)
{
return
this
.
sandbox
;
}
}
async
function
withContext
(
f
)
{
const
ssm
=
Services
.
scriptSecurityManager
;
const
PRINCIPAL1
=
ssm
.
createContentPrincipalFromOrigin
(
"
http
:
/
/
www
.
example
.
org
"
)
;
const
context
=
new
KintoExtContext
(
PRINCIPAL1
)
;
try
{
await
f
(
context
)
;
}
finally
{
await
context
.
unload
(
)
;
}
}
async
function
withSyncContext
(
f
)
{
const
STORAGE_SYNC_PREF
=
"
webextensions
.
storage
.
sync
.
enabled
"
;
let
prefs
=
Services
.
prefs
;
try
{
prefs
.
setBoolPref
(
STORAGE_SYNC_PREF
true
)
;
await
withContext
(
f
)
;
}
finally
{
prefs
.
clearUserPref
(
STORAGE_SYNC_PREF
)
;
}
}
