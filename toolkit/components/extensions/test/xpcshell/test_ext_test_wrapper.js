"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
webextensions
.
background
-
delayed
-
startup
"
false
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
43
"
)
;
const
TEST_ADDON_ID
=
"
some
-
permanent
-
test
-
addon
"
;
add_task
(
async
function
setup_wrapper
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
manifest
:
{
applications
:
{
gecko
:
{
id
:
TEST_ADDON_ID
}
}
}
background
(
)
{
browser
.
test
.
sendMessage
(
"
started_up
"
)
;
}
}
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
extension
.
startup
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
info
(
"
Awaiting
expected
started_up
message
1
"
)
;
await
extension
.
awaitMessage
(
"
started_up
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
await
extension
.
unload
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
info
(
"
Awaiting
expected
started_up
message
2
"
)
;
await
extension
.
awaitMessage
(
"
started_up
"
)
;
}
)
;
add_task
(
async
function
restart_addon_manager_after_extension_unload
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
addon
=
await
AddonManager
.
getAddonByID
(
TEST_ADDON_ID
)
;
equal
(
addon
null
"
Test
add
-
on
should
have
been
removed
"
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
