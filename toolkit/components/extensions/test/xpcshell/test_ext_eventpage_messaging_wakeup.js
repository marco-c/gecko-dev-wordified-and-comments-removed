"
use
strict
"
;
const
{
ExtensionTestCommon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
sys
.
mjs
"
)
;
const
server
=
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
server
.
registerPathHandler
(
"
/
dummy
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
false
)
;
}
)
;
async
function
testEventPageWakeup
(
{
backgroundScript
triggerScript
triggerFromContentScript
=
false
triggerFromOtherExtension
=
false
skipInitialPriming
=
false
}
)
{
function
loadExtension
(
id
withBackground
withTrigger
)
{
let
extensionData
=
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
}
}
}
}
;
if
(
withBackground
)
{
extensionData
.
manifest
.
background
=
{
persistent
:
false
}
;
extensionData
.
background
=
backgroundScript
;
if
(
skipInitialPriming
)
{
extensionData
.
startupReason
=
"
APP_STARTUP
"
;
extensionData
.
delayedStartup
=
true
;
}
}
if
(
withTrigger
)
{
extensionData
.
files
=
{
"
trigger
.
html
"
:
<
!
DOCTYPE
html
>
<
script
src
=
"
trigger
.
js
"
>
<
/
script
>
"
trigger
.
js
"
:
triggerScript
}
;
if
(
triggerFromContentScript
)
{
extensionData
.
manifest
.
content_scripts
=
[
{
js
:
[
"
trigger
.
js
"
]
run_at
:
"
document_end
"
matches
:
[
"
http
:
/
/
example
.
com
/
dummy
"
]
}
]
;
}
}
return
ExtensionTestUtils
.
loadExtension
(
extensionData
)
;
}
await
ExtensionTestCommon
.
resetStartupPromises
(
)
;
await
ExtensionTestCommon
.
notifyEarlyStartup
(
)
;
let
extension
=
loadExtension
(
"
ext
"
true
!
triggerFromOtherExtension
)
;
await
extension
.
startup
(
)
;
if
(
!
skipInitialPriming
)
{
Assert
.
equal
(
extension
.
extension
.
backgroundState
"
running
"
"
Bg
started
"
)
;
await
ExtensionTestCommon
.
notifyLateStartup
(
)
;
await
extension
.
terminateBackground
(
)
;
Assert
.
equal
(
extension
.
extension
.
backgroundState
"
stopped
"
"
Bg
closed
"
)
;
}
else
{
Assert
.
equal
(
extension
.
extension
.
backgroundState
"
stopped
"
"
Bg
inactive
"
)
;
}
let
extension2
;
if
(
triggerFromOtherExtension
)
{
extension2
=
loadExtension
(
"
other
-
ext
"
false
true
)
;
await
extension2
.
startup
(
)
;
}
let
url
;
if
(
triggerFromContentScript
)
{
url
=
"
http
:
/
/
example
.
com
/
dummy
"
;
}
else
if
(
triggerFromOtherExtension
)
{
url
=
moz
-
extension
:
/
/
{
extension2
.
uuid
}
/
trigger
.
html
;
}
else
{
url
=
moz
-
extension
:
/
/
{
extension
.
uuid
}
/
trigger
.
html
;
}
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
url
)
;
info
(
"
Waiting
for
event
page
to
be
awakened
by
event
"
)
;
await
extension
.
awaitMessage
(
"
TRIGGER_TEST_DONE
"
)
;
await
extension
.
unload
(
)
;
if
(
triggerFromOtherExtension
)
{
await
extension2
.
unload
(
)
;
}
await
contentPage
.
close
(
)
;
}
add_task
(
async
function
test_sendMessage_without_onMessage
(
)
{
await
testEventPageWakeup
(
{
backgroundScript
(
)
{
}
async
triggerScript
(
)
{
browser
.
test
.
assertTrue
(
!
browser
.
extension
.
getBackgroundPage
(
)
"
Event
page
suspended
before
sendMessage
(
)
"
)
;
await
browser
.
test
.
assertRejects
(
browser
.
runtime
.
sendMessage
(
"
"
)
"
Could
not
establish
connection
.
Receiving
end
does
not
exist
.
"
"
sendMessage
without
onMessage
should
reject
"
)
;
browser
.
test
.
assertTrue
(
!
!
browser
.
extension
.
getBackgroundPage
(
)
"
Existence
of
event
page
after
sendMessage
(
)
"
)
;
browser
.
test
.
sendMessage
(
"
TRIGGER_TEST_DONE
"
)
;
}
skipInitialPriming
:
false
}
)
;
}
)
;
add_task
(
async
function
test_connect_without_onConnect
(
)
{
await
testEventPageWakeup
(
{
backgroundScript
(
)
{
}
triggerScript
(
)
{
browser
.
test
.
assertTrue
(
!
browser
.
extension
.
getBackgroundPage
(
)
"
Event
page
suspended
before
sendMessage
(
)
"
)
;
let
port
=
browser
.
runtime
.
connect
(
{
}
)
;
port
.
onDisconnect
.
addListener
(
(
)
=
>
{
browser
.
test
.
assertEq
(
"
Could
not
establish
connection
.
Receiving
end
does
not
exist
.
"
port
.
error
?
.
message
"
connect
(
)
without
onConnect
should
disconnect
port
with
an
error
"
)
;
browser
.
test
.
assertTrue
(
!
!
browser
.
extension
.
getBackgroundPage
(
)
"
Existence
of
event
page
after
connect
(
)
"
)
;
browser
.
test
.
sendMessage
(
"
TRIGGER_TEST_DONE
"
)
;
}
)
;
}
skipInitialPriming
:
false
}
)
;
}
)
;
async
function
testEventPageWakeupWithSendMessage
(
{
triggerFromContentScript
triggerFromOtherExtension
skipInitialPriming
}
)
{
let
backgroundScript
triggerScript
;
if
(
triggerFromOtherExtension
)
{
backgroundScript
=
(
)
=
>
{
dump
(
"
Event
page
started
listening
to
onMessageExternal
\
n
"
)
;
browser
.
runtime
.
onMessageExternal
.
addListener
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
TRIGGER_TEST_DONE
"
)
;
}
)
;
}
;
triggerScript
=
(
)
=
>
{
dump
(
"
Calling
sendMessage
expecting
onMessageExternal
\
n
"
)
;
browser
.
runtime
.
sendMessage
(
"
ext
"
"
msg
"
)
;
}
;
}
else
{
backgroundScript
=
(
)
=
>
{
dump
(
"
Event
page
started
listening
to
onMessage
\
n
"
)
;
browser
.
runtime
.
onMessage
.
addListener
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
TRIGGER_TEST_DONE
"
)
;
}
)
;
}
;
triggerScript
=
(
)
=
>
{
dump
(
"
Calling
sendMessage
expecting
onMessage
\
n
"
)
;
browser
.
runtime
.
sendMessage
(
"
msg
"
)
;
}
;
}
await
testEventPageWakeup
(
{
backgroundScript
triggerScript
triggerFromContentScript
triggerFromOtherExtension
skipInitialPriming
}
)
;
}
add_task
(
async
function
test_wakeup_onMessage
(
)
{
await
testEventPageWakeupWithSendMessage
(
{
triggerFromContentScript
:
false
triggerFromOtherExtension
:
false
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onMessage_on_first_run
(
)
{
await
testEventPageWakeupWithSendMessage
(
{
triggerFromContentScript
:
false
triggerFromOtherExtension
:
false
skipInitialPriming
:
true
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onMessage_by_content_script
(
)
{
await
testEventPageWakeupWithSendMessage
(
{
triggerFromContentScript
:
true
triggerFromOtherExtension
:
false
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onMessageExternal
(
)
{
await
testEventPageWakeupWithSendMessage
(
{
triggerFromContentScript
:
false
triggerFromOtherExtension
:
true
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onMessageExternal_by_content_script
(
)
{
await
testEventPageWakeupWithSendMessage
(
{
triggerFromContentScript
:
true
triggerFromOtherExtension
:
true
}
)
;
}
)
;
async
function
testEventPageWakeupWithConnect
(
{
triggerFromContentScript
triggerFromOtherExtension
skipInitialPriming
}
)
{
let
backgroundScript
triggerScript
;
if
(
triggerFromOtherExtension
)
{
backgroundScript
=
(
)
=
>
{
dump
(
"
Event
page
started
listening
to
onConnectExternal
\
n
"
)
;
browser
.
runtime
.
onConnectExternal
.
addListener
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
TRIGGER_TEST_DONE
"
)
;
}
)
;
}
;
triggerScript
=
(
)
=
>
{
dump
(
"
Calling
connect
expecting
onConnectExternal
\
n
"
)
;
browser
.
runtime
.
connect
(
"
ext
"
{
}
)
;
}
;
}
else
{
backgroundScript
=
(
)
=
>
{
dump
(
"
Event
page
started
listening
to
onConnect
\
n
"
)
;
browser
.
runtime
.
onConnect
.
addListener
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
TRIGGER_TEST_DONE
"
)
;
}
)
;
}
;
triggerScript
=
(
)
=
>
{
dump
(
"
Calling
connect
expecting
onConnect
\
n
"
)
;
browser
.
runtime
.
connect
(
{
}
)
;
}
;
}
await
testEventPageWakeup
(
{
backgroundScript
triggerScript
triggerFromContentScript
triggerFromOtherExtension
skipInitialPriming
}
)
;
}
add_task
(
async
function
test_wakeup_onConnect
(
)
{
await
testEventPageWakeupWithConnect
(
{
triggerFromContentScript
:
false
triggerFromOtherExtension
:
false
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onConnect_on_first_run
(
)
{
await
testEventPageWakeupWithConnect
(
{
triggerFromContentScript
:
false
triggerFromOtherExtension
:
false
skipInitialPriming
:
true
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onConnect_by_content_script
(
)
{
await
testEventPageWakeupWithConnect
(
{
triggerFromContentScript
:
true
triggerFromOtherExtension
:
false
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onConnectExternal
(
)
{
await
testEventPageWakeupWithConnect
(
{
triggerFromContentScript
:
false
triggerFromOtherExtension
:
true
}
)
;
}
)
;
add_task
(
async
function
test_wakeup_onConnectExternal_by_content_script
(
)
{
await
testEventPageWakeupWithConnect
(
{
triggerFromContentScript
:
true
triggerFromOtherExtension
:
true
}
)
;
}
)
;
