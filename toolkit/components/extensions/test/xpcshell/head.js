"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ContentTask
:
"
resource
:
/
/
testing
-
common
/
ContentTask
.
jsm
"
Extension
:
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
ExtensionData
:
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
ExtensionParent
:
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
ExtensionTestUtils
:
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
HttpServer
:
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
Schemas
:
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
}
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
webextensions
.
remote
"
false
)
;
const
testEnv
=
{
expectRemote
:
false
}
;
add_task
(
function
check_remote
(
)
{
Assert
.
equal
(
WebExtensionPolicy
.
useRemoteWebExtensions
testEnv
.
expectRemote
"
useRemoteWebExtensions
matches
"
)
;
Assert
.
equal
(
WebExtensionPolicy
.
isExtensionProcess
!
testEnv
.
expectRemote
"
testing
from
extension
process
"
)
;
}
)
;
ExtensionTestUtils
.
init
(
this
)
;
function
createHttpServer
(
port
=
-
1
)
{
let
server
=
new
HttpServer
(
)
;
server
.
start
(
port
)
;
do_register_cleanup
(
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
server
.
stop
(
resolve
)
;
}
)
;
}
)
;
return
server
;
}
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
Services
.
io
.
offline
=
true
;
}
var
promiseConsoleOutput
=
async
function
(
task
)
{
const
DONE
=
=
=
=
console
listener
{
Math
.
random
(
)
}
done
=
=
=
;
let
listener
;
let
messages
=
[
]
;
let
awaitListener
=
new
Promise
(
resolve
=
>
{
listener
=
msg
=
>
{
if
(
msg
=
=
DONE
)
{
resolve
(
)
;
}
else
{
void
(
msg
instanceof
Ci
.
nsIConsoleMessage
)
;
messages
.
push
(
msg
)
;
}
}
;
}
)
;
Services
.
console
.
registerListener
(
listener
)
;
try
{
let
result
=
await
task
(
)
;
Services
.
console
.
logStringMessage
(
DONE
)
;
await
awaitListener
;
return
{
messages
result
}
;
}
finally
{
Services
.
console
.
unregisterListener
(
listener
)
;
}
}
;
function
cleanupDir
(
dir
)
{
let
count
=
0
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
tryToRemoveDir
(
)
{
count
+
=
1
;
try
{
dir
.
remove
(
true
)
;
}
catch
(
e
)
{
}
if
(
!
dir
.
exists
(
)
)
{
return
resolve
(
)
;
}
if
(
count
>
=
25
)
{
return
reject
(
Failed
to
cleanup
directory
:
{
dir
}
)
;
}
setTimeout
(
tryToRemoveDir
100
)
;
}
tryToRemoveDir
(
)
;
}
)
;
}
