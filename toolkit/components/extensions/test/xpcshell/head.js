"
use
strict
"
;
var
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
var
{
clearInterval
clearTimeout
setInterval
setIntervalWithTarget
setTimeout
setTimeoutWithTarget
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
var
{
AddonTestUtils
MockAsyncShutdown
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ContentTask
:
"
resource
:
/
/
testing
-
common
/
ContentTask
.
jsm
"
Extension
:
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
ExtensionData
:
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
ExtensionParent
:
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
ExtensionTestUtils
:
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
MessageChannel
:
"
resource
:
/
/
testing
-
common
/
MessageChannel
.
jsm
"
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
PromiseTestUtils
:
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
Schemas
:
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
}
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
Message
manager
disconnected
/
)
;
const
{
assertPersistentListeners
}
=
ExtensionTestUtils
.
testAssertions
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
security
.
https_first
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
tabs
.
remote
.
autostart
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
webextensions
.
remote
"
false
)
;
const
testEnv
=
{
expectRemote
:
false
}
;
add_setup
(
function
check_remote
(
)
{
Assert
.
equal
(
WebExtensionPolicy
.
useRemoteWebExtensions
testEnv
.
expectRemote
"
useRemoteWebExtensions
matches
"
)
;
Assert
.
equal
(
WebExtensionPolicy
.
isExtensionProcess
!
testEnv
.
expectRemote
"
testing
from
extension
process
"
)
;
}
)
;
ExtensionTestUtils
.
init
(
this
)
;
var
createHttpServer
=
(
.
.
.
args
)
=
>
{
AddonTestUtils
.
maybeInit
(
this
)
;
return
AddonTestUtils
.
createHttpServer
(
.
.
.
args
)
;
}
;
if
(
AppConstants
.
platform
=
=
=
"
android
"
)
{
Services
.
io
.
offline
=
true
;
}
function
clearCache
(
)
{
Services
.
cache2
.
clear
(
)
;
let
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
imageCache
.
clearCache
(
false
)
;
}
var
promiseConsoleOutput
=
async
function
(
task
)
{
const
DONE
=
=
=
=
console
listener
{
Math
.
random
(
)
}
done
=
=
=
;
let
listener
;
let
messages
=
[
]
;
let
awaitListener
=
new
Promise
(
resolve
=
>
{
listener
=
msg
=
>
{
if
(
msg
=
=
DONE
)
{
resolve
(
)
;
}
else
{
void
(
msg
instanceof
Ci
.
nsIConsoleMessage
)
;
void
(
msg
instanceof
Ci
.
nsIScriptError
)
;
messages
.
push
(
msg
)
;
}
}
;
}
)
;
Services
.
console
.
registerListener
(
listener
)
;
try
{
let
result
=
await
task
(
)
;
Services
.
console
.
logStringMessage
(
DONE
)
;
await
awaitListener
;
return
{
messages
result
}
;
}
finally
{
Services
.
console
.
unregisterListener
(
listener
)
;
}
}
;
function
cleanupDir
(
dir
)
{
let
count
=
0
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
tryToRemoveDir
(
)
{
count
+
=
1
;
try
{
dir
.
remove
(
true
)
;
}
catch
(
e
)
{
}
if
(
!
dir
.
exists
(
)
)
{
return
resolve
(
)
;
}
if
(
count
>
=
25
)
{
return
reject
(
Failed
to
cleanup
directory
:
{
dir
}
)
;
}
setTimeout
(
tryToRemoveDir
100
)
;
}
tryToRemoveDir
(
)
;
}
)
;
}
async
function
runWithPrefs
(
prefsToSet
testFn
)
{
const
setPrefs
=
prefs
=
>
{
for
(
let
[
pref
value
]
of
prefs
)
{
if
(
value
=
=
=
undefined
)
{
info
(
Clearing
pref
"
{
pref
}
"
)
;
Services
.
prefs
.
clearUserPref
(
pref
)
;
continue
;
}
info
(
Setting
pref
"
{
pref
}
"
:
{
value
}
)
;
switch
(
typeof
value
)
{
case
"
boolean
"
:
Services
.
prefs
.
setBoolPref
(
pref
value
)
;
break
;
case
"
number
"
:
Services
.
prefs
.
setIntPref
(
pref
value
)
;
break
;
case
"
string
"
:
Services
.
prefs
.
setStringPref
(
pref
value
)
;
break
;
default
:
throw
new
Error
(
"
runWithPrefs
doesn
'
t
support
this
pref
type
yet
"
)
;
}
}
}
;
const
getPrefs
=
prefs
=
>
{
return
prefs
.
map
(
(
[
pref
value
]
)
=
>
{
info
(
Getting
initial
pref
value
for
"
{
pref
}
"
)
;
if
(
!
Services
.
prefs
.
prefHasUserValue
(
pref
)
)
{
return
[
pref
undefined
]
;
}
switch
(
typeof
value
)
{
case
"
boolean
"
:
return
[
pref
Services
.
prefs
.
getBoolPref
(
pref
)
]
;
case
"
number
"
:
return
[
pref
Services
.
prefs
.
getIntPref
(
pref
)
]
;
case
"
string
"
:
return
[
pref
Services
.
prefs
.
getStringPref
(
pref
)
]
;
default
:
throw
new
Error
(
"
runWithPrefs
doesn
'
t
support
this
pref
type
yet
"
)
;
}
}
)
;
}
;
let
initialPrefsValues
=
[
]
;
try
{
initialPrefsValues
=
getPrefs
(
prefsToSet
)
;
setPrefs
(
prefsToSet
)
;
await
testFn
(
)
;
}
finally
{
info
(
"
Restoring
initial
preferences
values
on
exit
"
)
;
setPrefs
(
initialPrefsValues
)
;
}
}
let
extensionHandlers
=
new
WeakSet
(
)
;
function
handlingUserInputFrameScript
(
)
{
const
{
MessageChannel
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MessageChannel
.
jsm
"
)
;
let
handle
;
MessageChannel
.
addListener
(
this
"
ExtensionTest
:
HandleUserInput
"
{
receiveMessage
(
{
name
data
}
)
{
if
(
data
)
{
handle
=
content
.
windowUtils
.
setHandlingUserInput
(
true
)
;
}
else
if
(
handle
)
{
handle
.
destruct
(
)
;
handle
=
null
;
}
}
}
)
;
}
function
resetHandlingUserInput
(
)
{
extensionHandlers
=
new
WeakSet
(
)
;
}
async
function
withHandlingUserInput
(
extension
fn
)
{
let
{
messageManager
}
=
extension
.
extension
.
groupFrameLoader
;
if
(
!
extensionHandlers
.
has
(
extension
)
)
{
messageManager
.
loadFrameScript
(
data
:
(
{
encodeURI
(
handlingUserInputFrameScript
)
}
)
.
call
(
this
)
false
true
)
;
extensionHandlers
.
add
(
extension
)
;
}
await
MessageChannel
.
sendMessage
(
messageManager
"
ExtensionTest
:
HandleUserInput
"
true
)
;
await
fn
(
)
;
await
MessageChannel
.
sendMessage
(
messageManager
"
ExtensionTest
:
HandleUserInput
"
false
)
;
}
function
promiseQuotaManagerServiceReset
(
)
{
info
(
"
Calling
QuotaManagerService
.
reset
to
enforce
new
test
storage
limits
"
)
;
return
new
Promise
(
resolve
=
>
{
Services
.
qms
.
reset
(
)
.
callback
=
resolve
;
}
)
;
}
function
promiseQuotaManagerServiceClear
(
)
{
info
(
"
Calling
QuotaManagerService
.
clear
to
empty
the
test
data
and
refresh
test
storage
limits
"
)
;
return
new
Promise
(
resolve
=
>
{
Services
.
qms
.
clear
(
)
.
callback
=
resolve
;
}
)
;
}
const
optionalPermissionsPromptHandler
=
{
sawPrompt
:
false
acceptPrompt
:
false
init
(
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
webextOptionalPermissionPrompts
"
true
)
;
Services
.
obs
.
addObserver
(
this
"
webextension
-
optional
-
permission
-
prompt
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
obs
.
removeObserver
(
this
"
webextension
-
optional
-
permission
-
prompt
"
)
;
Services
.
prefs
.
clearUserPref
(
"
extensions
.
webextOptionalPermissionPrompts
"
)
;
}
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
webextension
-
optional
-
permission
-
prompt
"
)
{
this
.
sawPrompt
=
true
;
let
{
resolve
}
=
subject
.
wrappedJSObject
;
resolve
(
this
.
acceptPrompt
)
;
}
}
}
;
function
promiseExtensionEvent
(
wrapper
event
)
{
return
new
Promise
(
resolve
=
>
{
wrapper
.
extension
.
once
(
event
(
.
.
.
args
)
=
>
resolve
(
args
)
)
;
}
)
;
}
