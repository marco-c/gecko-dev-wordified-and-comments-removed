"
use
strict
"
;
add_setup
(
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
manifestV3
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
dnr
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
dnr
.
feedback
"
true
)
;
ExtensionTestUtils
.
failOnSchemaWarnings
(
false
)
;
}
)
;
function
makeDnrTestUtils
(
)
{
const
dnrTestUtils
=
{
}
;
const
dnr
=
browser
.
declarativeNetRequest
;
function
makeDummyAction
(
type
)
{
switch
(
type
)
{
case
"
redirect
"
:
return
{
type
redirect
:
{
url
:
"
https
:
/
/
example
.
com
/
dummy
"
}
}
;
case
"
modifyHeaders
"
:
return
{
type
responseHeaders
:
[
{
operation
:
"
append
"
header
:
"
x
"
value
:
"
y
"
}
]
}
;
default
:
return
{
type
}
;
}
}
function
makeDummyRequest
(
)
{
return
{
url
:
"
https
:
/
/
example
.
com
/
some
-
dummy
-
url
"
type
:
"
main_frame
"
}
;
}
function
makeDummyRule
(
id
actionType
)
{
return
{
id
condition
:
{
resourceTypes
:
[
"
main_frame
"
]
}
action
:
makeDummyAction
(
actionType
)
}
;
}
async
function
testMatchesRequest
(
request
ruleIds
description
)
{
browser
.
test
.
assertDeepEq
(
ruleIds
(
await
dnr
.
testMatchOutcome
(
request
)
)
.
map
(
mr
=
>
mr
.
ruleId
)
description
)
;
}
async
function
testCanUseAction
(
type
canUse
)
{
await
dnr
.
updateSessionRules
(
{
addRules
:
[
makeDummyRule
(
1
type
)
]
}
)
;
await
testMatchesRequest
(
makeDummyRequest
(
)
canUse
?
[
1
]
:
[
]
{
type
}
-
should
{
canUse
?
"
"
:
"
not
"
}
match
)
;
await
dnr
.
updateSessionRules
(
{
removeRuleIds
:
[
1
]
}
)
;
}
Object
.
assign
(
dnrTestUtils
{
makeDummyAction
makeDummyRequest
makeDummyRule
testMatchesRequest
testCanUseAction
}
)
;
return
dnrTestUtils
;
}
async
function
runAsDNRExtension
(
{
background
manifest
unloadTestAtEnd
=
true
}
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
:
(
{
background
}
)
(
(
{
makeDnrTestUtils
}
)
(
)
)
manifest
:
{
manifest_version
:
3
permissions
:
[
"
declarativeNetRequest
"
"
declarativeNetRequestFeedback
"
]
host_permissions
:
[
"
<
all_urls
>
"
]
granted_host_permissions
:
true
.
.
.
manifest
}
temporarilyInstalled
:
true
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitFinish
(
)
;
if
(
unloadTestAtEnd
)
{
await
extension
.
unload
(
)
;
}
return
extension
;
}
add_task
(
async
function
validate_required_params
(
)
{
await
runAsDNRExtension
(
{
background
:
async
(
)
=
>
{
const
testMatchOutcome
=
browser
.
declarativeNetRequest
.
testMatchOutcome
;
browser
.
test
.
assertThrows
(
(
)
=
>
testMatchOutcome
(
{
type
:
"
image
"
}
)
/
Type
error
for
parameter
request
\
(
Property
"
url
"
is
required
\
)
/
"
url
is
required
"
)
;
browser
.
test
.
assertThrows
(
(
)
=
>
testMatchOutcome
(
{
url
:
"
https
:
/
/
example
.
com
/
"
}
)
/
Type
error
for
parameter
request
\
(
Property
"
type
"
is
required
\
)
/
"
resource
type
is
required
"
)
;
browser
.
test
.
assertDeepEq
(
[
]
await
testMatchOutcome
(
{
url
:
"
https
:
/
/
example
.
com
/
"
type
:
"
image
"
}
)
"
testMatchOutcome
with
url
and
type
succeeds
"
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
resource_type_validation
(
)
{
await
runAsDNRExtension
(
{
background
:
async
(
)
=
>
{
const
testMatchOutcome
=
browser
.
declarativeNetRequest
.
testMatchOutcome
;
const
url
=
"
https
:
/
/
example
.
com
/
some
-
dummy
-
url
"
;
browser
.
test
.
assertThrows
(
(
)
=
>
testMatchOutcome
(
{
url
type
:
"
MAIN_FRAME
"
}
)
/
Error
processing
type
:
Invalid
enumeration
value
"
MAIN_FRAME
"
/
"
testMatchOutcome
should
expects
a
lowercase
type
"
)
;
browser
.
test
.
assertEq
(
"
main_frame
"
browser
.
declarativeNetRequest
.
ResourceType
.
MAIN_FRAME
"
ResourceType
.
MAIN_FRAME
exists
"
)
;
for
(
let
type
of
Object
.
values
(
browser
.
declarativeNetRequest
.
ResourceType
)
)
{
browser
.
test
.
assertDeepEq
(
[
]
await
testMatchOutcome
(
{
url
type
}
)
testMatchOutcome
for
type
=
{
type
}
is
allowed
)
;
}
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
rule_priority_and_action_type_precedence
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
dnr
=
browser
.
declarativeNetRequest
;
const
{
makeDummyRule
makeDummyRequest
}
=
dnrTestUtils
;
await
dnr
.
updateSessionRules
(
{
addRules
:
[
makeDummyRule
(
1
"
allow
"
)
makeDummyRule
(
2
"
allowAllRequests
"
)
makeDummyRule
(
3
"
block
"
)
makeDummyRule
(
4
"
upgradeScheme
"
)
makeDummyRule
(
5
"
redirect
"
)
makeDummyRule
(
6
"
modifyHeaders
"
)
{
.
.
.
makeDummyRule
(
7
"
modifyHeaders
"
)
priority
:
2
}
{
.
.
.
makeDummyRule
(
8
"
allow
"
)
priority
:
2
}
{
.
.
.
makeDummyRule
(
9
"
block
"
)
priority
:
2
}
makeDummyRule
(
11
"
allow
"
)
makeDummyRule
(
12
"
allowAllRequests
"
)
makeDummyRule
(
13
"
block
"
)
makeDummyRule
(
14
"
upgradeScheme
"
)
makeDummyRule
(
15
"
redirect
"
)
makeDummyRule
(
16
"
modifyHeaders
"
)
{
.
.
.
makeDummyRule
(
17
"
modifyHeaders
"
)
priority
:
2
}
]
}
)
;
async
function
testAndRemove
(
ruleId
expectedRuleIds
description
)
{
browser
.
test
.
assertDeepEq
(
expectedRuleIds
.
map
(
ruleId
=
>
(
{
ruleId
rulesetId
:
"
_session
"
}
)
)
await
dnr
.
testMatchOutcome
(
makeDummyRequest
(
)
)
description
)
;
await
dnr
.
updateSessionRules
(
{
removeRuleIds
:
[
ruleId
]
}
)
;
}
await
testAndRemove
(
8
[
8
]
"
highest
-
prio
allow
wins
"
)
;
await
testAndRemove
(
9
[
9
]
"
highest
-
prio
block
wins
"
)
;
await
testAndRemove
(
1
[
1
7
17
]
"
1st
allow
ignores
other
rules
except
for
higher
-
prio
modifyHeaders
"
)
;
await
testAndRemove
(
11
[
11
7
17
]
"
2nd
allow
ignores
other
rules
except
for
higher
-
prio
modifyHeaders
"
)
;
await
testAndRemove
(
2
[
2
7
17
]
"
1st
allowAllRequests
ignores
other
rules
except
for
higher
-
prio
modifyHeaders
"
)
;
await
testAndRemove
(
12
[
12
7
17
]
"
2nd
allowAllRequests
ignores
other
rules
except
for
higher
-
prio
modifyHeaders
"
)
;
await
testAndRemove
(
3
[
3
]
"
1st
block
>
all
other
actions
"
)
;
await
testAndRemove
(
13
[
13
]
"
2nd
block
>
all
other
actions
"
)
;
await
testAndRemove
(
4
[
4
]
"
1st
upgradeScheme
>
redirect
"
)
;
await
testAndRemove
(
14
[
14
]
"
2nd
upgradeScheme
>
redirect
"
)
;
await
testAndRemove
(
5
[
5
]
"
1st
redirect
>
modifyHeaders
"
)
;
await
testAndRemove
(
15
[
15
]
"
2nd
redirect
>
modifyHeaders
"
)
;
await
testAndRemove
(
6
[
7
17
6
16
]
"
All
modifyHeaders
match
if
there
is
no
other
action
"
)
;
await
dnr
.
updateSessionRules
(
{
addRules
:
[
makeDummyRule
(
11
"
allow
"
)
]
}
)
;
await
testAndRemove
(
11
[
11
7
17
]
"
After
adding
an
allow
rule
only
higher
-
prio
modifyHeaders
are
shown
"
)
;
browser
.
test
.
assertDeepEq
(
[
7
16
17
]
(
await
dnr
.
getSessionRules
(
)
)
.
map
(
r
=
>
r
.
id
)
"
Remaining
rules
at
end
of
test
"
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
declarativeNetRequest_and_host_permissions
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
{
testCanUseAction
}
=
dnrTestUtils
;
await
testCanUseAction
(
"
allow
"
true
)
;
await
testCanUseAction
(
"
allowAllRequests
"
true
)
;
await
testCanUseAction
(
"
block
"
true
)
;
await
testCanUseAction
(
"
upgradeScheme
"
true
)
;
await
testCanUseAction
(
"
redirect
"
true
)
;
await
testCanUseAction
(
"
modifyHeaders
"
true
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
declarativeNetRequest_permission_only
(
)
{
await
runAsDNRExtension
(
{
manifest
:
{
host_permissions
:
[
]
}
background
:
async
dnrTestUtils
=
>
{
const
{
testCanUseAction
}
=
dnrTestUtils
;
await
testCanUseAction
(
"
allow
"
true
)
;
await
testCanUseAction
(
"
allowAllRequests
"
true
)
;
await
testCanUseAction
(
"
block
"
true
)
;
await
testCanUseAction
(
"
upgradeScheme
"
true
)
;
await
testCanUseAction
(
"
redirect
"
false
)
;
await
testCanUseAction
(
"
modifyHeaders
"
false
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
declarativeNetRequestWithHostAccess_only
(
)
{
await
runAsDNRExtension
(
{
manifest
:
{
permissions
:
[
"
declarativeNetRequestWithHostAccess
"
"
declarativeNetRequestFeedback
"
]
host_permissions
:
[
]
}
background
:
async
dnrTestUtils
=
>
{
const
{
testCanUseAction
}
=
dnrTestUtils
;
await
testCanUseAction
(
"
allow
"
false
)
;
await
testCanUseAction
(
"
allowAllRequests
"
false
)
;
await
testCanUseAction
(
"
block
"
false
)
;
await
testCanUseAction
(
"
upgradeScheme
"
false
)
;
await
testCanUseAction
(
"
redirect
"
false
)
;
await
testCanUseAction
(
"
modifyHeaders
"
false
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
declarativeNetRequestWithHostAccess_only
(
)
{
await
runAsDNRExtension
(
{
manifest
:
{
permissions
:
[
"
declarativeNetRequestWithHostAccess
"
"
declarativeNetRequestFeedback
"
]
host_permissions
:
[
"
https
:
/
/
example
.
com
/
"
]
}
background
:
async
dnrTestUtils
=
>
{
const
{
testCanUseAction
}
=
dnrTestUtils
;
await
testCanUseAction
(
"
allow
"
true
)
;
await
testCanUseAction
(
"
allowAllRequests
"
true
)
;
await
testCanUseAction
(
"
block
"
true
)
;
await
testCanUseAction
(
"
upgradeScheme
"
true
)
;
await
testCanUseAction
(
"
redirect
"
true
)
;
await
testCanUseAction
(
"
modifyHeaders
"
true
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
match_condition_types_and_methods
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
dnr
=
browser
.
declarativeNetRequest
;
const
{
makeDummyAction
testMatchesRequest
}
=
dnrTestUtils
;
const
action
=
makeDummyAction
(
"
modifyHeaders
"
)
;
await
dnr
.
updateSessionRules
(
{
addRules
:
[
{
id
:
1
condition
:
{
resourceTypes
:
[
"
xmlhttprequest
"
]
requestMethods
:
[
"
put
"
]
}
action
}
{
id
:
2
condition
:
{
excludedResourceTypes
:
[
"
sub_frame
"
]
excludedRequestMethods
:
[
"
post
"
]
}
action
}
{
id
:
3
condition
:
{
requestMethods
:
[
"
get
"
"
post
"
]
}
action
}
{
id
:
4
condition
:
{
resourceTypes
:
[
"
main_frame
"
"
xmlhttprequest
"
]
excludedRequestMethods
:
[
"
get
"
]
}
action
}
]
}
)
;
const
url
=
"
https
:
/
/
example
.
com
/
some
-
dummy
-
url
"
;
await
testMatchesRequest
(
{
url
type
:
"
main_frame
"
}
[
2
]
"
main_frame
+
GET
"
)
;
await
testMatchesRequest
(
{
url
type
:
"
xmlhttprequest
"
}
[
2
3
]
"
xmlhttprequest
+
GET
"
)
;
await
testMatchesRequest
(
{
url
type
:
"
xmlhttprequest
"
method
:
"
put
"
}
[
1
2
4
]
"
xmlhttprequest
+
PUT
"
)
;
await
testMatchesRequest
(
{
url
type
:
"
sub_frame
"
method
:
"
post
"
}
[
3
]
"
sub_frame
+
POST
"
)
;
await
testMatchesRequest
(
{
url
type
:
"
sub_frame
"
method
:
"
post
"
}
[
3
]
"
sub_frame
+
POST
"
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
match_tabIds
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
dnr
=
browser
.
declarativeNetRequest
;
const
{
makeDummyAction
testMatchesRequest
}
=
dnrTestUtils
;
const
action
=
makeDummyAction
(
"
modifyHeaders
"
)
;
await
dnr
.
updateSessionRules
(
{
addRules
:
[
{
id
:
1
condition
:
{
excludedTabIds
:
[
-
1
Number
.
MAX_SAFE_INTEGER
]
}
action
}
{
id
:
2
condition
:
{
tabIds
:
[
1
Number
.
MAX_SAFE_INTEGER
]
}
action
}
{
id
:
3
condition
:
{
tabIds
:
[
-
1
]
}
action
}
]
}
)
;
const
url
=
"
https
:
/
/
example
.
com
/
some
-
dummy
-
url
"
;
const
type
=
"
font
"
;
await
testMatchesRequest
(
{
url
type
}
[
3
]
"
tabId
defaults
to
-
1
"
)
;
await
testMatchesRequest
(
{
url
type
tabId
:
-
1
}
[
3
]
"
tabId
-
1
"
)
;
await
testMatchesRequest
(
{
url
type
tabId
:
1
}
[
1
2
]
"
tabId
1
"
)
;
await
testMatchesRequest
(
{
url
type
tabId
:
Number
.
MAX_SAFE_INTEGER
}
[
2
]
tabId
high
number
(
MAX_SAFE_INTEGER
=
{
Number
.
MAX_SAFE_INTEGER
}
)
)
;
await
testMatchesRequest
(
{
url
type
tabId
:
-
2
}
[
1
]
"
bad
tabId
-
2
"
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
action_precedence_between_extensions
(
)
{
let
otherExtension
=
await
runAsDNRExtension
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
"
other
ext
"
}
}
}
background
:
async
dnrTestUtils
=
>
{
const
{
makeDummyAction
}
=
dnrTestUtils
;
const
c
=
tabId
=
>
(
{
resourceTypes
:
[
"
main_frame
"
]
tabIds
:
[
tabId
]
}
)
;
await
browser
.
declarativeNetRequest
.
updateSessionRules
(
{
addRules
:
[
{
id
:
11
condition
:
c
(
1
)
action
:
makeDummyAction
(
"
allow
"
)
}
{
id
:
12
condition
:
c
(
2
)
action
:
makeDummyAction
(
"
block
"
)
}
{
id
:
13
condition
:
c
(
3
)
action
:
makeDummyAction
(
"
redirect
"
)
}
{
id
:
14
condition
:
c
(
4
)
action
:
makeDummyAction
(
"
upgradeScheme
"
)
}
{
id
:
15
condition
:
c
(
5
)
action
:
makeDummyAction
(
"
allowAllRequests
"
)
}
{
id
:
16
condition
:
c
(
6
)
action
:
makeDummyAction
(
"
allowAllRequests
"
)
}
]
}
)
;
browser
.
test
.
notifyPass
(
)
;
}
unloadTestAtEnd
:
false
}
)
;
let
otherExtensionNonBlockAndModifyHeaders
=
await
runAsDNRExtension
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
"
other
ext2
"
}
}
}
background
:
async
dnrTestUtils
=
>
{
const
{
makeDummyAction
}
=
dnrTestUtils
;
const
condition
=
{
resourceTypes
:
[
"
main_frame
"
]
}
;
await
browser
.
declarativeNetRequest
.
updateSessionRules
(
{
addRules
:
[
{
id
:
1000
condition
action
:
makeDummyAction
(
"
modifyHeaders
"
)
priority
:
2
}
{
id
:
1001
condition
action
:
makeDummyAction
(
"
allowAllRequests
"
)
}
{
id
:
1002
condition
action
:
makeDummyAction
(
"
modifyHeaders
"
)
priority
:
2
}
{
id
:
1003
condition
action
:
makeDummyAction
(
"
allowAllRequests
"
)
}
]
}
)
;
browser
.
test
.
notifyPass
(
)
;
}
unloadTestAtEnd
:
false
}
)
;
let
otherExtensionModifyHeaders
=
await
runAsDNRExtension
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
"
other
ext3
"
}
}
}
background
:
async
dnrTestUtils
=
>
{
const
{
makeDummyAction
}
=
dnrTestUtils
;
await
browser
.
declarativeNetRequest
.
updateSessionRules
(
{
addRules
:
[
{
id
:
1337
condition
:
{
resourceTypes
:
[
"
main_frame
"
]
}
action
:
makeDummyAction
(
"
modifyHeaders
"
)
}
]
}
)
;
browser
.
test
.
notifyPass
(
)
;
}
unloadTestAtEnd
:
false
}
)
;
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
dnr
=
browser
.
declarativeNetRequest
;
const
{
makeDummyAction
}
=
dnrTestUtils
;
const
c
=
tabId
=
>
(
{
resourceTypes
:
[
"
main_frame
"
]
tabIds
:
[
tabId
]
}
)
;
await
dnr
.
updateSessionRules
(
{
addRules
:
[
{
id
:
91
condition
:
c
(
1
)
action
:
makeDummyAction
(
"
block
"
)
}
{
id
:
92
condition
:
c
(
2
)
action
:
makeDummyAction
(
"
allow
"
)
}
{
id
:
93
condition
:
c
(
3
)
action
:
makeDummyAction
(
"
block
"
)
}
{
id
:
94
condition
:
c
(
4
)
action
:
makeDummyAction
(
"
block
"
)
}
{
id
:
95
condition
:
c
(
5
)
action
:
makeDummyAction
(
"
allow
"
)
}
{
id
:
96
condition
:
c
(
6
)
action
:
makeDummyAction
(
"
allowAllRequests
"
)
}
]
}
)
;
const
url
=
"
https
:
/
/
example
.
com
/
dummy
-
url
"
;
const
type
=
"
main_frame
"
;
const
options
=
{
includeOtherExtensions
:
true
}
;
browser
.
test
.
assertDeepEq
(
[
{
ruleId
:
91
rulesetId
:
"
_session
"
}
]
await
dnr
.
testMatchOutcome
(
{
url
type
tabId
:
1
}
options
)
"
block
takes
precedence
over
allow
(
from
other
extension
)
"
)
;
browser
.
test
.
assertDeepEq
(
[
{
ruleId
:
12
rulesetId
:
"
_session
"
extensionId
:
"
other
ext
"
}
]
await
dnr
.
testMatchOutcome
(
{
url
type
tabId
:
2
}
options
)
"
block
(
from
other
extension
)
takes
precedence
over
allow
"
)
;
browser
.
test
.
assertDeepEq
(
[
{
ruleId
:
93
rulesetId
:
"
_session
"
}
]
await
dnr
.
testMatchOutcome
(
{
url
type
tabId
:
3
}
options
)
"
block
takes
precedence
over
redirect
(
from
other
extension
)
"
)
;
browser
.
test
.
assertDeepEq
(
[
{
ruleId
:
94
rulesetId
:
"
_session
"
}
]
await
dnr
.
testMatchOutcome
(
{
url
type
tabId
:
4
}
options
)
"
block
takes
precedence
over
upgradeScheme
(
from
other
extension
)
"
)
;
browser
.
test
.
assertDeepEq
(
[
{
ruleId
:
95
rulesetId
:
"
_session
"
}
{
ruleId
:
1001
rulesetId
:
"
_session
"
extensionId
:
"
other
ext2
"
}
{
ruleId
:
15
rulesetId
:
"
_session
"
extensionId
:
"
other
ext
"
}
{
ruleId
:
1337
rulesetId
:
"
_session
"
extensionId
:
"
other
ext3
"
}
{
ruleId
:
1000
rulesetId
:
"
_session
"
extensionId
:
"
other
ext2
"
}
{
ruleId
:
1002
rulesetId
:
"
_session
"
extensionId
:
"
other
ext2
"
}
]
await
dnr
.
testMatchOutcome
(
{
url
type
tabId
:
5
}
options
)
"
When
allow
matches
allowAllRequests
from
other
extension
matches
too
"
)
;
browser
.
test
.
assertDeepEq
(
[
{
ruleId
:
96
rulesetId
:
"
_session
"
}
{
ruleId
:
1001
rulesetId
:
"
_session
"
extensionId
:
"
other
ext2
"
}
{
ruleId
:
16
rulesetId
:
"
_session
"
extensionId
:
"
other
ext
"
}
{
ruleId
:
1337
rulesetId
:
"
_session
"
extensionId
:
"
other
ext3
"
}
{
ruleId
:
1000
rulesetId
:
"
_session
"
extensionId
:
"
other
ext2
"
}
{
ruleId
:
1002
rulesetId
:
"
_session
"
extensionId
:
"
other
ext2
"
}
]
await
dnr
.
testMatchOutcome
(
{
url
type
tabId
:
6
}
options
)
"
allowAllRequests
from
all
other
extensions
are
matched
"
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
await
otherExtension
.
unload
(
)
;
await
otherExtensionNonBlockAndModifyHeaders
.
unload
(
)
;
await
otherExtensionModifyHeaders
.
unload
(
)
;
}
)
;
