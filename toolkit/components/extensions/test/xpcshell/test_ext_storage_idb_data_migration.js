"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ExtensionStorage
:
"
resource
:
/
/
gre
/
modules
/
ExtensionStorage
.
jsm
"
ExtensionStorageIDB
:
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageIDB
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
}
)
;
async
function
createExtensionJSONFileWithData
(
extensionId
data
)
{
await
ExtensionStorage
.
set
(
extensionId
data
)
;
const
jsonFile
=
await
ExtensionStorage
.
getFile
(
extensionId
)
;
await
jsonFile
.
_save
(
)
;
const
oldStorageFilename
=
ExtensionStorage
.
getStorageFile
(
extensionId
)
;
equal
(
await
OS
.
File
.
exists
(
oldStorageFilename
)
true
"
The
old
json
file
has
been
created
"
)
;
return
{
jsonFile
oldStorageFilename
}
;
}
add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
setBoolPref
(
ExtensionStorageIDB
.
BACKEND_ENABLED_PREF
true
)
;
}
)
;
add_task
(
async
function
test_storage_local_data_migration
(
)
{
const
EXTENSION_ID
=
"
extension
-
to
-
be
-
migrated
mozilla
.
org
"
;
const
data
=
{
"
test_key_string
"
:
"
test_value1
"
"
test_key_number
"
:
1000
"
test_nested_data
"
:
{
"
nested_key
"
:
true
}
}
;
const
{
oldStorageFilename
}
=
await
createExtensionJSONFileWithData
(
EXTENSION_ID
data
)
;
async
function
background
(
)
{
const
storedData
=
await
browser
.
storage
.
local
.
get
(
)
;
browser
.
test
.
assertEq
(
"
test_value1
"
storedData
.
test_key_string
"
Got
the
expected
data
after
the
storage
.
local
data
migration
"
)
;
browser
.
test
.
assertEq
(
1000
storedData
.
test_key_number
"
Got
the
expected
data
after
the
storage
.
local
data
migration
"
)
;
browser
.
test
.
assertEq
(
true
storedData
.
test_nested_data
.
nested_key
"
Got
the
expected
data
after
the
storage
.
local
data
migration
"
)
;
browser
.
test
.
sendMessage
(
"
storage
-
local
-
data
-
migrated
"
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
storage
"
]
applications
:
{
gecko
:
{
id
:
EXTENSION_ID
}
}
}
background
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
data
-
migrated
"
)
;
const
storagePrincipal
=
ExtensionStorageIDB
.
getStoragePrincipal
(
extension
.
extension
)
;
const
idbConn
=
await
ExtensionStorageIDB
.
open
(
storagePrincipal
)
;
equal
(
await
idbConn
.
isEmpty
(
extension
.
extension
)
false
"
Data
stored
in
the
ExtensionStorageIDB
backend
as
expected
"
)
;
equal
(
await
OS
.
File
.
exists
(
oldStorageFilename
)
false
"
The
old
json
storage
file
should
have
been
removed
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_storage_local_corrupted_data_migration
(
)
{
const
EXTENSION_ID
=
"
extension
-
corrupted
-
data
-
migration
mozilla
.
org
"
;
const
invalidData
=
{
"
test_key_string
"
:
"
test_value1
"
;
const
oldStorageFilename
=
ExtensionStorage
.
getStorageFile
(
EXTENSION_ID
)
;
const
profileDir
=
OS
.
Constants
.
Path
.
profileDir
;
await
OS
.
File
.
makeDir
(
OS
.
Path
.
join
(
profileDir
"
browser
-
extension
-
data
"
EXTENSION_ID
)
{
from
:
profileDir
ignoreExisting
:
true
}
)
;
await
OS
.
File
.
writeAtomic
(
oldStorageFilename
invalidData
{
flush
:
true
}
)
;
equal
(
await
OS
.
File
.
read
(
oldStorageFilename
{
encoding
:
"
utf
-
8
"
}
)
invalidData
"
The
old
json
file
has
been
overwritten
with
invalid
data
"
)
;
async
function
background
(
)
{
const
storedData
=
await
browser
.
storage
.
local
.
get
(
)
;
browser
.
test
.
assertEq
(
Object
.
keys
(
storedData
)
.
length
0
"
No
data
should
be
found
found
on
invalid
data
migration
"
)
;
await
browser
.
storage
.
local
.
set
(
{
"
test_key_string_on_IDBBackend
"
:
"
expected
-
value
"
}
)
;
browser
.
test
.
sendMessage
(
"
storage
-
local
-
data
-
migrated
-
and
-
set
"
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
storage
"
]
applications
:
{
gecko
:
{
id
:
EXTENSION_ID
}
}
}
background
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
storage
-
local
-
data
-
migrated
-
and
-
set
"
)
;
const
storagePrincipal
=
ExtensionStorageIDB
.
getStoragePrincipal
(
extension
.
extension
)
;
const
idbConn
=
await
ExtensionStorageIDB
.
open
(
storagePrincipal
)
;
equal
(
await
idbConn
.
isEmpty
(
extension
.
extension
)
false
"
Data
stored
in
the
ExtensionStorageIDB
backend
as
expected
"
)
;
equal
(
await
OS
.
File
.
exists
(
{
oldStorageFilename
}
.
corrupt
)
true
"
The
old
json
storage
should
still
be
available
if
failed
to
be
read
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
function
test_storage_local_data_migration_clear_pref
(
)
{
Services
.
prefs
.
clearUserPref
(
ExtensionStorageIDB
.
BACKEND_ENABLED_PREF
)
;
}
)
;
