"
use
strict
"
;
const
global
=
this
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
var
{
BaseContext
EventManager
SingletonEventManager
}
=
ExtensionUtils
;
class
StubContext
extends
BaseContext
{
constructor
(
)
{
super
(
)
;
this
.
sandbox
=
Cu
.
Sandbox
(
global
)
;
}
get
cloneScope
(
)
{
return
this
.
sandbox
;
}
get
extension
(
)
{
return
{
id
:
"
test
web
.
extension
"
}
;
}
}
add_task
(
function
*
test_post_unload_promises
(
)
{
let
context
=
new
StubContext
(
)
;
let
fail
=
result
=
>
{
ok
(
false
Unexpected
callback
:
{
result
}
)
;
}
;
let
promises
=
[
context
.
wrapPromise
(
Promise
.
resolve
(
)
)
context
.
wrapPromise
(
Promise
.
reject
(
{
message
:
"
"
}
)
)
.
catch
(
(
)
=
>
{
}
)
]
;
yield
Promise
.
all
(
promises
)
;
context
.
wrapPromise
(
Promise
.
resolve
(
"
resolved
"
)
)
.
then
(
fail
)
;
context
.
wrapPromise
(
Promise
.
reject
(
{
message
:
"
rejected
"
}
)
)
.
then
(
fail
fail
)
;
context
.
unload
(
)
;
yield
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
)
;
add_task
(
function
*
test_post_unload_listeners
(
)
{
let
context
=
new
StubContext
(
)
;
let
fireEvent
;
let
onEvent
=
new
EventManager
(
context
"
onEvent
"
fire
=
>
{
fireEvent
=
fire
;
return
(
)
=
>
{
}
;
}
)
;
let
fireSingleton
;
let
onSingleton
=
new
SingletonEventManager
(
context
"
onSingleton
"
callback
=
>
{
fireSingleton
=
(
)
=
>
{
Promise
.
resolve
(
)
.
then
(
callback
)
;
}
;
return
(
)
=
>
{
}
;
}
)
;
let
fail
=
event
=
>
{
ok
(
false
Unexpected
event
:
{
event
}
)
;
}
;
onEvent
.
addListener
(
fail
)
;
onSingleton
.
addListener
(
fail
)
;
let
promises
=
[
new
Promise
(
resolve
=
>
onEvent
.
addListener
(
resolve
)
)
new
Promise
(
resolve
=
>
onSingleton
.
addListener
(
resolve
)
)
]
;
fireEvent
(
"
onEvent
"
)
;
fireSingleton
(
"
onSingleton
"
)
;
onEvent
.
removeListener
(
fail
)
;
onSingleton
.
removeListener
(
fail
)
;
yield
Promise
.
all
(
promises
)
;
onEvent
.
addListener
(
fail
)
;
onSingleton
.
addListener
(
fail
)
;
fireEvent
(
"
onEvent
"
)
;
Promise
.
resolve
(
"
onEvent
"
)
.
then
(
fireEvent
)
;
fireSingleton
(
"
onSingleton
"
)
;
Promise
.
resolve
(
"
onSingleton
"
)
.
then
(
fireSingleton
)
;
context
.
unload
(
)
;
yield
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
)
;
class
Context
extends
BaseContext
{
constructor
(
principal
)
{
super
(
)
;
Object
.
defineProperty
(
this
"
principal
"
{
value
:
principal
configurable
:
true
}
)
;
this
.
sandbox
=
Cu
.
Sandbox
(
principal
{
wantXrays
:
false
}
)
;
this
.
extension
=
{
id
:
"
test
web
.
extension
"
}
;
}
get
cloneScope
(
)
{
return
this
.
sandbox
;
}
}
let
ssm
=
Services
.
scriptSecurityManager
;
const
PRINCIPAL1
=
ssm
.
createCodebasePrincipalFromOrigin
(
"
http
:
/
/
www
.
example
.
org
"
)
;
const
PRINCIPAL2
=
ssm
.
createCodebasePrincipalFromOrigin
(
"
http
:
/
/
www
.
somethingelse
.
org
"
)
;
add_task
(
function
*
test_stringify_toJSON
(
)
{
let
context
=
new
Context
(
PRINCIPAL1
)
;
let
obj
=
Cu
.
evalInSandbox
(
"
(
{
hidden
:
true
toJSON
(
)
{
return
{
visible
:
true
}
;
}
}
)
"
context
.
sandbox
)
;
let
stringified
=
context
.
jsonStringify
(
obj
)
;
let
expected
=
JSON
.
stringify
(
{
visible
:
true
}
)
;
equal
(
stringified
expected
"
Stringified
object
with
toJSON
(
)
method
is
as
expected
"
)
;
}
)
;
add_task
(
function
*
test_stringify_inaccessible
(
)
{
let
context
=
new
Context
(
PRINCIPAL1
)
;
let
sandbox
=
context
.
sandbox
;
let
sandbox2
=
Cu
.
Sandbox
(
PRINCIPAL2
)
;
Cu
.
waiveXrays
(
sandbox
)
.
subobj
=
Cu
.
evalInSandbox
(
"
(
{
subobject
:
true
}
)
"
sandbox2
)
;
let
obj
=
Cu
.
evalInSandbox
(
"
(
{
local
:
true
nested
:
subobj
}
)
"
sandbox
)
;
Assert
.
throws
(
(
)
=
>
{
context
.
jsonStringify
(
obj
)
;
}
)
;
}
)
;
add_task
(
function
*
test_stringify_accessible
(
)
{
let
principal
=
ssm
.
createExpandedPrincipal
(
[
PRINCIPAL1
PRINCIPAL2
]
)
;
let
context
=
new
Context
(
principal
)
;
let
sandbox
=
context
.
sandbox
;
let
sandbox2
=
Cu
.
Sandbox
(
PRINCIPAL2
)
;
Cu
.
waiveXrays
(
sandbox
)
.
subobj
=
Cu
.
evalInSandbox
(
"
(
{
subobject
:
true
}
)
"
sandbox2
)
;
let
obj
=
Cu
.
evalInSandbox
(
"
(
{
local
:
true
nested
:
subobj
}
)
"
sandbox
)
;
let
stringified
=
context
.
jsonStringify
(
obj
)
;
let
expected
=
JSON
.
stringify
(
{
local
:
true
nested
:
{
subobject
:
true
}
}
)
;
equal
(
stringified
expected
"
Stringified
object
with
accessible
property
is
as
expected
"
)
;
}
)
;
