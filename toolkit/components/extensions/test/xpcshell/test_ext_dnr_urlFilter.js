"
use
strict
"
;
add_setup
(
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
manifestV3
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
dnr
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
dnr
.
feedback
"
true
)
;
}
)
;
function
makeDnrTestUtils
(
)
{
const
dnrTestUtils
=
{
}
;
const
dnr
=
browser
.
declarativeNetRequest
;
const
DUMMY_ACTION
=
{
type
:
"
modifyHeaders
"
responseHeaders
:
[
{
operation
:
"
append
"
header
:
"
x
"
value
:
"
y
"
}
]
}
;
async
function
testMatchesRequest
(
request
ruleIds
description
)
{
browser
.
test
.
assertDeepEq
(
ruleIds
(
await
dnr
.
testMatchOutcome
(
request
)
)
.
matchedRules
.
map
(
mr
=
>
mr
.
ruleId
)
description
)
;
}
async
function
testMatchesUrlFilter
(
{
urlFilter
isUrlFilterCaseSensitive
urls
=
[
]
urlsNonMatching
=
[
]
}
)
{
function
sanityCheckUrl
(
url
)
{
const
normalizedUrl
=
new
URL
(
url
)
.
href
;
if
(
normalizedUrl
.
split
(
"
%
"
)
.
length
!
=
=
url
.
split
(
"
*
"
)
.
length
)
{
browser
.
test
.
assertEq
(
normalizedUrl
url
"
url
should
be
canonical
"
)
;
}
}
await
dnr
.
updateSessionRules
(
{
addRules
:
[
{
id
:
12345
condition
:
{
urlFilter
isUrlFilterCaseSensitive
}
action
:
DUMMY_ACTION
}
]
}
)
;
for
(
let
url
of
urls
)
{
sanityCheckUrl
(
url
)
;
const
request
=
{
url
type
:
"
other
"
}
;
const
description
=
urlFilter
{
urlFilter
}
should
match
:
{
url
}
;
await
testMatchesRequest
(
request
[
12345
]
description
)
;
}
for
(
let
url
of
urlsNonMatching
)
{
sanityCheckUrl
(
url
)
;
const
request
=
{
url
type
:
"
other
"
}
;
const
description
=
urlFilter
{
urlFilter
}
should
not
match
:
{
url
}
;
await
testMatchesRequest
(
request
[
]
description
)
;
}
await
dnr
.
updateSessionRules
(
{
removeRuleIds
:
[
12345
]
}
)
;
}
Object
.
assign
(
dnrTestUtils
{
DUMMY_ACTION
testMatchesRequest
testMatchesUrlFilter
}
)
;
return
dnrTestUtils
;
}
async
function
runAsDNRExtension
(
{
background
manifest
}
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
:
(
{
background
}
)
(
(
{
makeDnrTestUtils
}
)
(
)
)
manifest
:
{
manifest_version
:
3
permissions
:
[
"
declarativeNetRequest
"
"
declarativeNetRequestFeedback
"
]
host_permissions
:
[
"
<
all_urls
>
"
]
granted_host_permissions
:
true
.
.
.
manifest
}
temporarilyInstalled
:
true
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitFinish
(
)
;
await
extension
.
unload
(
)
;
}
add_task
(
async
function
ambiguous_urlFilter_patterns
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
{
testMatchesUrlFilter
}
=
dnrTestUtils
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
|
"
urls
:
[
"
http
:
/
/
a
/
"
]
urlsNonMatching
:
[
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
|
|
"
urls
:
[
"
http
:
/
/
a
/
"
]
urlsNonMatching
:
[
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
|
|
|
"
urls
:
[
]
urlsNonMatching
:
[
"
http
:
/
/
a
.
/
|
|
|
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
^
^
^
^
"
urls
:
[
"
http
:
/
/
a
/
#
frag
^
^
^
^
"
"
http
:
/
/
a
/
#
frag
^
^
^
"
"
http
:
/
/
a
/
?
&
#
"
"
http
:
/
/
a
/
#
^
"
]
urlsNonMatching
:
[
"
http
:
/
/
a
/
?
"
"
http
:
/
/
a
/
____
"
"
http
:
/
/
a
/
-
-
-
-
"
"
http
:
/
/
a
/
.
.
.
.
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
^
^
^
"
urls
:
[
"
https
:
/
/
a
/
"
]
urlsNonMatching
:
[
"
file
:
hello
/
no
/
three
/
consecutive
/
special
/
characters
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
^
|
"
urls
:
[
"
http
:
/
/
a
/
"
"
http
:
/
/
a
/
a
"
]
urlsNonMatching
:
[
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
|
|
^
"
urls
:
[
"
http
:
/
/
a
.
/
"
]
urlsNonMatching
:
[
"
http
:
/
/
a
/
"
"
http
:
/
/
a
/
|
|
"
]
}
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
urlFilter_domain_anchor
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
{
testMatchesUrlFilter
}
=
dnrTestUtils
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
ps
"
urls
:
[
"
https
:
/
/
example
.
com
/
"
"
http
:
/
/
ps
.
example
.
com
/
"
"
http
:
/
/
sub
.
ps
.
example
.
com
/
"
"
http
:
/
/
ps
/
"
"
http
:
/
/
example
-
ps
.
com
/
"
"
http
:
/
/
ps
example
.
com
/
"
"
http
:
/
/
user
:
ps
example
.
com
/
"
"
http
:
/
/
ps
:
pass
example
.
com
/
"
"
http
:
/
/
example
.
com
/
ps
"
"
http
:
/
/
example
.
com
/
#
ps
"
]
urlsNonMatching
:
[
"
http
:
/
/
example
.
com
/
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
|
|
ps
"
urls
:
[
"
http
:
/
/
ps
.
example
.
com
/
"
"
http
:
/
/
sub
.
ps
.
example
.
com
/
"
"
http
:
/
/
ps
/
"
]
urlsNonMatching
:
[
"
http
:
/
/
example
.
com
/
"
"
https
:
/
/
example
.
com
/
"
"
http
:
/
/
example
-
ps
.
com
/
"
"
http
:
/
/
ps
example
.
com
/
"
"
http
:
/
/
user
:
ps
example
.
com
/
"
"
http
:
/
/
ps
:
pass
example
.
com
/
"
"
http
:
/
/
example
.
com
/
ps
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
|
|
1
"
urls
:
[
"
http
:
/
/
127
.
0
.
0
.
1
/
"
"
http
:
/
/
2
.
0
.
0
.
1
/
"
"
http
:
/
/
www
.
1example
.
com
/
"
]
urlsNonMatching
:
[
"
http
:
/
/
[
:
:
1
]
/
"
"
http
:
/
/
[
1
:
:
1
]
/
"
"
http
:
/
/
hostwithport
:
1
/
"
"
http
:
/
/
host
/
1
"
"
http
:
/
/
fqdn
.
:
1
/
"
"
http
:
/
/
fqdn
.
/
1
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
|
|
^
1
"
urls
:
[
"
http
:
/
/
[
1
:
:
1
]
/
"
"
http
:
/
/
fqdn
.
:
1
/
"
"
http
:
/
/
fqdn
.
/
1
"
]
urlsNonMatching
:
[
"
http
:
/
/
127
.
0
.
0
.
1
/
"
"
http
:
/
/
2
.
0
.
0
.
1
/
"
"
http
:
/
/
www
.
1example
.
com
/
"
"
http
:
/
/
[
:
:
1
]
/
"
"
http
:
/
/
hostwithport
:
1
/
"
"
http
:
/
/
host
/
1
"
]
}
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
extreme_urlFilter_patterns
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
{
testMatchesRequest
DUMMY_ACTION
}
=
dnrTestUtils
;
await
browser
.
declarativeNetRequest
.
updateSessionRules
(
{
addRules
:
[
{
id
:
1
condition
:
{
urlFilter
:
"
*
"
.
repeat
(
1e6
)
}
action
:
DUMMY_ACTION
}
{
id
:
2
condition
:
{
urlFilter
:
"
^
"
.
repeat
(
1e6
)
}
action
:
DUMMY_ACTION
}
{
id
:
3
condition
:
{
urlFilter
:
"
*
^
"
.
repeat
(
5e5
)
}
action
:
DUMMY_ACTION
}
{
id
:
4
condition
:
{
urlFilter
:
"
h
"
+
"
*
"
.
repeat
(
1e7
)
+
"
endofurl
"
}
action
:
DUMMY_ACTION
}
]
}
)
;
await
testMatchesRequest
(
{
url
:
"
http
:
/
/
example
.
com
/
"
type
:
"
other
"
}
[
1
]
"
urlFilter
with
1M
wildcard
chars
matches
any
URL
"
)
;
await
testMatchesRequest
(
{
url
:
"
http
:
/
/
example
.
com
/
"
+
"
x
"
.
repeat
(
1e6
)
type
:
"
other
"
}
[
1
]
"
urlFilter
with
1M
wildcards
matches
other
'
^
'
do
not
match
alpha
"
)
;
await
testMatchesRequest
(
{
url
:
"
http
:
/
/
example
.
com
/
"
+
"
/
"
.
repeat
(
1e6
)
type
:
"
other
"
}
[
1
2
3
]
"
urlFilter
with
1M
wildcards
^
and
*
^
all
match
URL
with
1M
'
/
'
chars
"
)
;
await
testMatchesRequest
(
{
url
:
"
http
:
/
/
example
.
com
/
"
+
"
x
/
"
.
repeat
(
5e5
)
type
:
"
other
"
}
[
1
3
]
"
urlFilter
with
1M
wildcards
and
*
^
match
URL
with
1M
'
x
/
'
chars
"
)
;
await
testMatchesRequest
(
{
url
:
"
http
:
/
/
example
.
com
/
endofurl
"
type
:
"
other
"
}
[
1
4
]
"
urlFilter
with
1M
and
10M
wildcards
matches
URL
"
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_isUrlFilterCaseSensitive
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
{
testMatchesUrlFilter
}
=
dnrTestUtils
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
AbC
"
isUrlFilterCaseSensitive
:
true
urls
:
[
"
http
:
/
/
true
.
example
.
com
/
AbC
"
]
urlsNonMatching
:
[
"
http
:
/
/
true
.
example
.
com
/
abc
"
"
http
:
/
/
true
.
example
.
com
/
ABC
"
"
http
:
/
/
true
.
example
.
com
/
?
?
?
"
"
http
:
/
/
true
.
AbC
/
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
AbC
"
isUrlFilterCaseSensitive
:
false
urls
:
[
"
http
:
/
/
false
.
example
.
com
/
AbC
"
"
http
:
/
/
false
.
example
.
com
/
abc
"
"
http
:
/
/
false
.
example
.
com
/
ABC
"
"
http
:
/
/
false
.
AbC
/
"
]
urlsNonMatching
:
[
"
http
:
/
/
false
.
example
.
com
/
?
?
?
"
]
}
)
;
await
testMatchesUrlFilter
(
{
urlFilter
:
"
AbC
"
urls
:
[
"
http
:
/
/
default
.
example
.
com
/
AbC
"
"
http
:
/
/
default
.
example
.
com
/
abc
"
"
http
:
/
/
default
.
example
.
com
/
ABC
"
"
http
:
/
/
default
.
AbC
/
"
]
urlsNonMatching
:
[
"
http
:
/
/
default
.
example
.
com
/
?
?
?
"
]
}
)
;
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_chrome_parity
(
)
{
await
runAsDNRExtension
(
{
background
:
async
dnrTestUtils
=
>
{
const
{
testMatchesUrlFilter
}
=
dnrTestUtils
;
const
testCases
=
[
{
urlFilter
:
"
*
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
^
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
.
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
^
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
.
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
com
/
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
xampl
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
example
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
/
a
?
a
"
url
:
"
http
:
/
/
ex
.
com
/
a
?
a
"
expectMatch
:
true
}
{
urlFilter
:
"
^
abc
"
url
:
"
http
:
/
/
ex
.
com
/
abc
?
a
"
expectMatch
:
true
}
{
urlFilter
:
"
^
abc
"
url
:
"
http
:
/
/
ex
.
com
/
a
?
abc
"
expectMatch
:
true
}
{
urlFilter
:
"
^
abc
"
url
:
"
http
:
/
/
ex
.
com
/
abc
?
abc
"
expectMatch
:
true
}
{
urlFilter
:
"
^
abc
^
abc
"
url
:
"
http
:
/
/
ex
.
com
/
abc
?
abc
"
expectMatch
:
true
}
{
urlFilter
:
"
^
com
^
abc
^
abc
"
url
:
"
http
:
/
/
ex
.
com
/
abc
?
abc
"
expectMatch
:
false
}
{
urlFilter
:
"
|
http
:
/
/
ex
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
http
:
/
/
ex
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
mple
.
com
/
|
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
mple
.
com
/
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
mple
.
com
/
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
ex
.
com
"
url
:
"
http
:
/
/
hex
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
ex
.
com
"
url
:
"
http
:
/
/
ex
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
ex
.
com
"
url
:
"
http
:
/
/
hex
.
ex
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
ex
.
com
"
url
:
"
http
:
/
/
hex
.
hex
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
example
.
com
^
"
url
:
"
http
:
/
/
www
.
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
:
/
/
*
mpl
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
mpl
*
com
/
|
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
example
^
com
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
example
^
com
"
url
:
"
http
:
/
/
example
/
com
"
expectMatch
:
true
}
{
urlFilter
:
"
example
.
com
^
"
url
:
"
http
:
/
/
example
.
com
:
8080
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
*
.
com
/
|
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
*
.
org
/
|
"
url
:
"
http
:
/
/
example
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
/
path
?
*
&
p1
=
*
&
p2
=
"
url
:
"
http
:
/
/
ex
.
com
/
aaa
/
path
/
bbb
?
k
=
v
&
p1
=
0
&
p2
=
1
"
expectMatch
:
false
}
{
urlFilter
:
"
/
path
?
*
&
p1
=
*
&
p2
=
"
url
:
"
http
:
/
/
ex
.
com
/
aaa
/
path
?
k
=
v
&
p1
=
0
&
p2
=
1
"
expectMatch
:
true
}
{
urlFilter
:
"
/
path
?
*
&
p1
=
*
&
p2
=
"
url
:
"
http
:
/
/
ex
.
com
/
aaa
/
path
?
k
=
v
&
k
=
v
&
p1
=
0
&
p2
=
1
"
expectMatch
:
true
}
{
urlFilter
:
"
/
path
?
*
&
p1
=
*
&
p2
=
"
url
:
"
http
:
/
/
ex
.
com
/
aaa
/
path
?
k
=
v
&
p1
=
0
&
p3
=
10
&
p2
=
1
"
expectMatch
:
true
}
{
urlFilter
:
"
/
path
?
*
&
p1
=
*
&
p2
=
"
url
:
"
http
:
/
/
ex
.
com
/
aaa
/
path
&
p1
=
0
&
p2
=
1
"
expectMatch
:
false
}
{
urlFilter
:
"
/
path
?
*
&
p1
=
*
&
p2
=
"
url
:
"
http
:
/
/
ex
.
com
/
aaa
/
path
?
k
=
v
&
p2
=
0
&
p1
=
1
"
expectMatch
:
false
}
{
urlFilter
:
"
abc
*
def
*
ghijk
*
xyz
"
url
:
"
http
:
/
/
example
.
com
/
abcdeffffghijkmmmxyzzz
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
cdef
"
url
:
"
http
:
/
/
example
.
com
/
abcdef
"
expectMatch
:
false
}
{
urlFilter
:
"
^
^
a
^
^
"
url
:
"
http
:
/
/
ex
.
com
/
?
a
=
/
"
expectMatch
:
true
}
{
urlFilter
:
"
^
^
a
^
^
"
url
:
"
http
:
/
/
ex
.
com
/
?
a
=
/
&
b
=
0
"
expectMatch
:
true
}
{
urlFilter
:
"
^
^
a
^
^
"
url
:
"
http
:
/
/
ex
.
com
/
?
a
=
x
"
expectMatch
:
false
}
{
urlFilter
:
"
^
^
a
^
^
"
url
:
"
http
:
/
/
ex
.
com
/
?
a
=
"
expectMatch
:
true
}
{
urlFilter
:
"
ex
.
com
^
path
^
*
k
=
v
^
"
url
:
"
http
:
/
/
ex
.
com
/
path
/
?
k1
=
v1
&
ak
=
v
&
kk
=
vv
"
expectMatch
:
true
}
{
urlFilter
:
"
ex
.
com
^
path
^
*
k
=
v
^
"
url
:
"
http
:
/
/
ex
.
com
/
p
/
path
/
?
k1
=
v1
&
ak
=
v
&
kk
=
vv
"
expectMatch
:
false
}
{
urlFilter
:
"
a
^
a
&
a
^
a
&
"
url
:
"
http
:
/
/
ex
.
com
/
a
/
a
/
a
/
a
/
?
a
&
a
&
a
&
a
&
a
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
def
^
"
url
:
"
http
:
/
/
ex
.
com
/
abc
/
a
/
ddef
/
"
expectMatch
:
true
}
{
urlFilter
:
"
https
:
/
/
example
.
com
/
"
url
:
"
http
:
/
/
example
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
example
.
com
/
"
url
:
"
http
:
/
/
example
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
examp
"
url
:
"
http
:
/
/
example
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
xamp
"
url
:
"
http
:
/
/
example
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
examp
"
url
:
"
http
:
/
/
test
.
example
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
t
.
examp
"
url
:
"
http
:
/
/
test
.
example
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
com
^
"
url
:
"
http
:
/
/
test
.
example
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
com
^
x
|
"
url
:
"
http
:
/
/
a
.
com
/
x
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
x
.
com
"
url
:
"
http
:
/
/
ex
.
com
/
?
url
=
x
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
ex
.
com
/
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
ex
.
com
^
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
ex
.
co
|
"
url
:
"
http
:
/
/
ex
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
ex
.
com
|
"
url
:
"
http
:
/
/
rex
.
com
.
ex
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
ex
.
com
/
|
"
url
:
"
http
:
/
/
rex
.
com
.
ex
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
http
|
"
url
:
"
http
:
/
/
http
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
http
"
url
:
"
http
:
/
/
http
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
/
example
.
com
|
"
url
:
"
http
:
/
/
example
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
/
example
.
com
/
|
"
url
:
"
http
:
/
/
example
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
.
"
url
:
"
http
:
/
/
a
.
.
com
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
^
"
url
:
"
http
:
/
/
a
.
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
.
"
url
:
"
http
:
/
/
a
.
com
.
/
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
^
"
url
:
"
http
:
/
/
a
.
com
.
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
.
"
url
:
"
http
:
/
/
a
.
com
.
.
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
^
"
url
:
"
http
:
/
/
a
.
com
.
.
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
/
path
"
url
:
"
http
:
/
/
a
.
com
.
/
path
/
to
/
x
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
^
path
"
url
:
"
http
:
/
/
a
.
com
.
/
path
/
to
/
x
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
/
path
|
"
url
:
"
http
:
/
/
a
.
com
.
/
path
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
^
path
|
"
url
:
"
http
:
/
/
a
.
com
.
/
path
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
path
|
"
url
:
"
http
:
/
/
a
.
com
.
/
path
"
expectMatch
:
false
}
{
urlFilter
:
"
path
"
url
:
"
http
:
/
/
a
.
com
/
PaTh
"
isUrlFilterCaseSensitive
:
false
expectMatch
:
true
}
{
urlFilter
:
"
path
"
url
:
"
http
:
/
/
a
.
com
/
PaTh
"
isUrlFilterCaseSensitive
:
true
expectMatch
:
false
}
{
urlFilter
:
"
path
"
url
:
"
http
:
/
/
a
.
com
/
path
"
isUrlFilterCaseSensitive
:
false
expectMatch
:
true
}
{
urlFilter
:
"
path
"
url
:
"
http
:
/
/
a
.
com
/
path
"
isUrlFilterCaseSensitive
:
true
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
def
^
"
url
:
"
http
:
/
/
a
.
com
/
abcxAdef
/
vo
"
isUrlFilterCaseSensitive
:
true
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
def
^
"
url
:
"
http
:
/
/
a
.
com
/
aBcxAdeF
/
vo
"
isUrlFilterCaseSensitive
:
true
expectMatch
:
false
}
{
urlFilter
:
"
abc
*
def
^
"
url
:
"
http
:
/
/
a
.
com
/
aBcxAdeF
/
vo
"
isUrlFilterCaseSensitive
:
false
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
def
^
"
url
:
"
http
:
/
/
a
.
com
/
abcxAdef
/
vo
"
isUrlFilterCaseSensitive
:
false
expectMatch
:
true
}
{
urlFilter
:
"
abc
^
"
url
:
"
https
:
/
/
xyz
.
com
/
abc
/
123
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
^
"
url
:
"
https
:
/
/
xyz
.
com
/
abc
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
^
"
url
:
"
https
:
/
/
abc
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
abc
^
|
"
url
:
"
https
:
/
/
xyz
.
com
/
abc
/
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
^
|
"
url
:
"
https
:
/
/
xyz
.
com
/
abc
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
^
|
"
url
:
"
https
:
/
/
xyz
.
com
/
abc
/
123
"
expectMatch
:
false
}
{
urlFilter
:
"
|
http
:
/
/
abc
.
com
/
x
^
"
url
:
"
http
:
/
/
abc
.
com
/
x
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
:
/
/
abc
.
com
/
x
^
"
url
:
"
http
:
/
/
abc
.
com
/
x
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
:
/
/
abc
.
com
/
x
^
"
url
:
"
http
:
/
/
abc
.
com
/
x
/
123
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
:
/
/
abc
.
com
/
x
^
|
"
url
:
"
http
:
/
/
abc
.
com
/
x
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
:
/
/
abc
.
com
/
x
^
|
"
url
:
"
http
:
/
/
abc
.
com
/
x
/
"
expectMatch
:
true
}
{
urlFilter
:
"
|
http
:
/
/
abc
.
com
/
x
^
|
"
url
:
"
http
:
/
/
abc
.
com
/
x
/
123
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
abc
.
com
^
"
url
:
"
http
:
/
/
xyz
.
abc
.
com
/
123
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
abc
.
com
^
"
url
:
"
http
:
/
/
xyz
.
abc
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
abc
.
com
^
"
url
:
"
http
:
/
/
abc
.
com
.
xyz
.
com
?
q
=
abc
.
com
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
abc
.
com
^
|
"
url
:
"
http
:
/
/
xyz
.
abc
.
com
/
123
"
expectMatch
:
false
}
{
urlFilter
:
"
|
|
abc
.
com
^
|
"
url
:
"
http
:
/
/
xyz
.
abc
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
|
abc
.
com
^
|
"
url
:
"
http
:
/
/
abc
.
com
.
xyz
.
com
?
q
=
abc
.
com
/
"
expectMatch
:
false
}
{
urlFilter
:
"
abc
*
^
"
url
:
"
https
:
/
/
abc
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
^
"
url
:
"
https
:
/
/
abc
.
com
?
q
=
123
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
^
|
"
url
:
"
https
:
/
/
abc
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
^
|
"
url
:
"
https
:
/
/
abc
.
com
?
q
=
123
"
expectMatch
:
true
}
{
urlFilter
:
"
abc
*
|
"
url
:
"
https
:
/
/
a
.
com
/
abcxyz
"
expectMatch
:
true
}
{
urlFilter
:
"
|
*
google
.
com
"
url
:
"
https
:
/
/
www
.
google
.
com
"
expectMatch
:
true
}
{
urlFilter
:
"
|
*
|
"
url
:
"
https
:
/
/
example
.
com
"
expectMatch
:
true
}
]
;
for
(
let
test
of
testCases
)
{
let
{
urlFilter
url
expectMatch
isUrlFilterCaseSensitive
}
=
test
;
if
(
expectMatch
)
{
await
testMatchesUrlFilter
(
{
urlFilter
isUrlFilterCaseSensitive
urls
:
[
url
]
}
)
;
}
else
{
await
testMatchesUrlFilter
(
{
urlFilter
isUrlFilterCaseSensitive
urlsNonMatching
:
[
url
]
}
)
;
}
}
browser
.
test
.
notifyPass
(
)
;
}
}
)
;
}
)
;
