"
use
strict
"
;
ExtensionTestUtils
.
mockAppInfo
(
)
;
const
server
=
createHttpServer
(
)
;
server
.
registerDirectory
(
"
/
data
/
"
do_get_file
(
"
data
"
)
)
;
const
BASE_URL
=
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
data
;
add_task
(
async
function
test_contentscript_xrays
(
)
{
async
function
contentScript
(
)
{
let
unwrapped
=
window
.
wrappedJSObject
;
browser
.
test
.
assertEq
(
"
undefined
"
typeof
test
"
Should
not
have
named
X
-
ray
property
access
"
)
;
browser
.
test
.
assertEq
(
undefined
window
.
test
"
Should
not
have
named
X
-
ray
property
access
"
)
;
browser
.
test
.
assertEq
(
"
object
"
typeof
unwrapped
.
test
"
Should
always
have
non
-
X
-
ray
named
property
access
"
)
;
browser
.
test
.
notifyPass
(
"
contentScriptXrays
"
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
http
:
/
/
*
/
*
/
file_sample
.
html
"
]
js
:
[
"
content_script
.
js
"
]
}
]
}
files
:
{
"
content_script
.
js
"
:
contentScript
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
{
BASE_URL
}
/
file_sample
.
html
)
;
await
extension
.
awaitFinish
(
"
contentScriptXrays
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_dom_constructor_and_legacy_factory
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
http
:
/
/
*
/
*
/
file_sample
.
html
"
]
js
:
[
"
xray_test
.
js
"
]
}
]
manifest_version
:
3
}
files
:
{
"
xray_test
.
js
"
(
)
{
browser
.
test
.
assertFalse
(
Object
.
hasOwn
(
globalThis
"
XMLHttpRequest
"
)
"
XMLHttpRequest
is
not
a
sandbox
global
"
)
;
browser
.
test
.
assertFalse
(
Object
.
hasOwn
(
globalThis
"
URL
"
)
"
URL
is
not
a
sandbox
global
"
)
;
browser
.
test
.
assertFalse
(
Object
.
hasOwn
(
globalThis
"
Option
"
)
"
Option
is
not
a
sandbox
global
"
)
;
browser
.
test
.
assertEq
(
XMLHttpRequest
.
name
"
XMLHttpRequest
"
"
XMLHttpRequest
constructor
'
s
name
property
returns
the
correct
value
"
)
;
browser
.
test
.
assertEq
(
XMLHttpRequest
.
length
0
"
XMLHttpRequest
constructor
'
s
length
property
returns
the
correct
value
"
)
;
browser
.
test
.
assertEq
(
URL
.
name
"
URL
"
"
URL
constructor
'
s
name
property
returns
the
correct
value
"
)
;
browser
.
test
.
assertEq
(
URL
.
length
1
"
URL
constructor
'
s
length
property
returns
the
correct
value
"
)
;
browser
.
test
.
assertEq
(
Option
.
name
"
Option
"
"
Options
function
'
s
name
property
returns
the
correct
value
"
)
;
browser
.
test
.
assertEq
(
Option
.
length
0
"
Options
function
'
s
length
property
returns
the
correct
value
"
)
;
window
.
eval
(
Object
.
defineProperty
(
XMLHttpRequest
"
name
"
{
value
:
"
A
"
}
)
;
Object
.
defineProperty
(
XMLHttpRequest
"
length
"
{
value
:
9
}
)
;
Object
.
defineProperty
(
URL
"
name
"
{
value
:
"
B
"
}
)
;
Object
.
defineProperty
(
URL
"
length
"
{
value
:
8
}
)
;
Object
.
defineProperty
(
Option
"
name
"
{
value
:
"
C
"
}
)
;
Object
.
defineProperty
(
Option
"
length
"
{
value
:
7
}
)
;
)
;
browser
.
test
.
assertEq
(
window
.
eval
(
XMLHttpRequest
.
name
)
"
A
"
"
XMLHttpRequest
constructor
'
s
name
property
returns
the
modified
value
in
content
"
)
;
browser
.
test
.
assertEq
(
window
.
eval
(
XMLHttpRequest
.
length
)
9
"
XMLHttpRequest
constructor
'
s
length
property
returns
the
modified
value
in
content
"
)
;
browser
.
test
.
assertEq
(
window
.
eval
(
URL
.
name
)
"
B
"
"
URL
constructor
'
s
name
property
returns
the
modified
value
in
content
"
)
;
browser
.
test
.
assertEq
(
window
.
eval
(
URL
.
length
)
8
"
URL
constructor
'
s
length
property
returns
the
modified
value
in
content
"
)
;
browser
.
test
.
assertEq
(
window
.
eval
(
Option
.
name
)
"
C
"
"
Option
function
'
s
name
property
returns
the
modified
value
in
content
"
)
;
browser
.
test
.
assertEq
(
window
.
eval
(
Option
.
length
)
7
"
Option
function
'
s
length
property
returns
the
modified
value
in
content
"
)
;
browser
.
test
.
assertEq
(
XMLHttpRequest
.
name
"
XMLHttpRequest
"
"
XMLHttpRequest
constructor
'
s
name
property
returns
the
unmodified
value
"
)
;
browser
.
test
.
assertEq
(
XMLHttpRequest
.
length
0
"
XMLHttpRequest
constructor
'
s
length
property
returns
the
unmodified
value
"
)
;
browser
.
test
.
assertEq
(
URL
.
name
"
URL
"
"
URL
constructor
'
s
name
property
returns
the
unmodified
value
"
)
;
browser
.
test
.
assertEq
(
URL
.
length
1
"
URL
constructor
'
s
length
property
returns
the
unmodified
value
"
)
;
browser
.
test
.
assertEq
(
Option
.
name
"
Option
"
"
Option
function
'
s
name
property
returns
the
unmodified
value
"
)
;
browser
.
test
.
assertEq
(
Option
.
length
0
"
Option
function
'
s
length
property
returns
the
unmodified
value
"
)
;
browser
.
test
.
sendMessage
(
"
finished
"
)
;
}
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
{
BASE_URL
}
/
file_sample
.
html
)
;
await
extension
.
awaitMessage
(
"
finished
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
