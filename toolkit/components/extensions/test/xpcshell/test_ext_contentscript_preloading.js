"
use
strict
"
;
const
server
=
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
server
.
registerPathHandler
(
"
/
dummy
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
"
(
dummy
no
iframes
from
server
)
"
)
;
}
)
;
server
.
registerPathHandler
(
"
/
sandboxed
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Security
-
Policy
"
"
sandbox
allow
-
scripts
;
"
)
;
response
.
write
(
"
This
page
has
an
opaque
origin
.
"
)
;
}
)
;
async
function
ensureContentScriptDetector
(
extension
contentPage
)
{
await
contentPage
.
spawn
(
[
extension
.
id
]
extensionId
=
>
{
const
{
ExtensionProcessScript
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionProcessScript
.
sys
.
mjs
"
)
;
function
log
(
contentScript
isPreload
)
{
const
policy
=
contentScript
.
extension
;
if
(
policy
.
id
=
=
=
extensionId
)
{
policy
.
_testOnlySeenContentScriptInjections
?
?
=
[
]
;
policy
.
_testOnlySeenContentScriptInjections
.
push
(
{
matches
:
contentScript
.
matches
.
patterns
.
map
(
p
=
>
p
.
pattern
)
isPreload
}
)
;
}
}
const
{
preloadContentScript
loadContentScript
}
=
ExtensionProcessScript
;
ExtensionProcessScript
.
preloadContentScript
=
contentScript
=
>
{
log
(
contentScript
true
)
;
return
preloadContentScript
(
contentScript
)
;
}
;
ExtensionProcessScript
.
loadContentScript
=
(
contentScript
window
)
=
>
{
log
(
contentScript
false
)
;
return
loadContentScript
(
contentScript
window
)
;
}
;
}
)
;
}
async
function
getSeenContentScriptInjections
(
extension
contentPage
)
{
return
contentPage
.
spawn
(
[
extension
.
id
]
extensionId
=
>
{
let
policy
=
this
.
content
.
WebExtensionPolicy
.
getByID
(
extensionId
)
;
return
policy
.
_testOnlySeenContentScriptInjections
?
.
splice
(
0
)
;
}
)
;
}
add_task
(
async
function
test_preload_at_http_toplevel
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
toplevelonly
"
]
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
loadURL
(
"
http
:
/
/
example
.
com
/
dummy
?
toplevelonly
"
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
toplevelonly
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
toplevelonly
"
]
isPreload
:
false
}
]
"
Should
have
observed
preload
for
http
toplevel
navigation
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_preload_at_http_iframe
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
in_iframe
"
]
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
toplevel
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
"
http
:
/
/
example
.
com
/
dummy
?
in_iframe
"
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
}
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
in_iframe
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
in_iframe
"
]
isPreload
:
false
}
]
"
Should
have
observed
preload
for
http
frame
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_preload_at_http_iframe_from_content_script
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
do_load_frame
"
]
js
:
[
"
do_load_frame
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
in_frame_from_cs
"
]
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
do_load_frame
.
js
"
:
(
)
=
>
{
let
f
=
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
"
http
:
/
/
example
.
com
/
dummy
?
in_frame_from_cs
"
;
document
.
body
.
append
(
f
)
;
}
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
loadURL
(
"
http
:
/
/
example
.
com
/
dummy
?
do_load_frame
"
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
do_load_frame
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
do_load_frame
"
]
isPreload
:
false
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
in_frame_from_cs
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
in_frame_from_cs
"
]
isPreload
:
false
}
]
"
Should
have
observed
preload
for
http
frame
injected
by
content
script
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_no_preload_in_existing_documents
(
)
{
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
existing_doc
"
)
;
const
extensionId
=
"
extension
-
with
-
content
-
script
-
in
-
existing
-
doc
"
;
await
ensureContentScriptDetector
(
{
id
:
extensionId
}
contentPage
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
extensionId
}
}
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
existing_doc
"
]
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
existing_doc
"
]
isPreload
:
false
}
]
"
Should
not
preload
when
scripts
are
executed
as
part
of
extension
startup
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_preload_at_about_blank_iframe
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
isPrivileged
:
true
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
match_about_blank
:
true
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
about
:
*
"
]
match_about_blank
:
true
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
loadURL
(
"
http
:
/
/
example
.
com
/
dummy
?
with_blank
"
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
isPreload
:
false
}
]
"
Should
have
observed
preload
in
initial
http
document
"
)
;
info
(
"
Testing
about
:
blank
frame
with
match_about_blank
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
}
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
isPreload
:
false
}
]
"
Preloading
is
NOT
supported
in
about
:
blank
"
)
;
info
(
"
Testing
javascript
:
frame
with
match_about_blank
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
"
javascript
:
'
javascript
:
-
URL
loads
in
about
:
blank
doc
'
"
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
}
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
isPreload
:
false
}
]
"
Preloading
is
NOT
supported
in
about
:
blank
(
javascript
:
-
URL
)
"
)
;
info
(
"
Testing
about
:
srcdoc
frame
with
match_about_blank
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
srcdoc
=
"
This
is
about
:
srcdoc
"
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
}
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
isPreload
:
false
}
]
"
Preloading
is
supported
in
about
:
srcdoc
"
)
;
info
(
"
Testing
sandboxed
about
:
srcdoc
frame
with
match_about_blank
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
srcdoc
=
"
This
is
about
:
srcdoc
in
a
sandbox
"
;
f
.
sandbox
=
"
allow
-
scripts
"
;
let
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
f
.
onload
=
(
)
=
>
resolve
(
)
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
return
promise
;
}
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blank
"
]
isPreload
:
true
}
]
"
match_about_blank
+
sandboxed
about
:
srcdoc
should
not
execute
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_no_preload_at_blob_url_iframe
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blob_url
"
]
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
loadURL
(
"
http
:
/
/
example
.
com
/
dummy
?
with_blob_url
"
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blob_url
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blob_url
"
]
isPreload
:
false
}
]
"
Should
have
observed
preload
in
initial
http
document
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
this
.
content
.
eval
(
URL
.
createObjectURL
(
new
Blob
(
[
"
blob
:
-
doc
"
]
)
)
)
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
}
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
with_blob_url
"
]
isPreload
:
false
}
]
"
Preloading
is
NOT
supported
in
blob
:
-
URLs
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_no_preload_at_http_iframe_with_sandbox_attr
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
sandbox_parent
"
]
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
sandbox_iframe
"
]
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
<
all_urls
>
"
]
exclude_matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
"
*
:
/
/
example
.
com
/
dummy
?
sandbox_parent
"
"
*
:
/
/
example
.
com
/
dummy
?
sandbox_iframe
"
]
match_about_blank
:
true
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
loadURL
(
"
http
:
/
/
example
.
com
/
dummy
?
sandbox_parent
"
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
sandbox_parent
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
sandbox_parent
"
]
isPreload
:
false
}
]
"
Should
have
observed
preload
in
initial
http
document
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
"
http
:
/
/
example
.
com
/
dummy
?
sandbox_iframe
"
;
f
.
sandbox
=
"
allow
-
scripts
"
;
let
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
f
.
onload
=
(
)
=
>
resolve
(
)
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
return
promise
;
}
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
sandbox_iframe
"
]
isPreload
:
true
}
]
"
Should
not
observe
any
loads
of
non
-
matching
sandboxed
http
document
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_no_preload_at_http_csp_sandbox
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
sandboxed
"
]
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
<
all_urls
>
"
]
exclude_matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
"
*
:
/
/
example
.
com
/
sandboxed
"
]
match_about_blank
:
true
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
loadURL
(
"
http
:
/
/
example
.
com
/
sandboxed
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
sandboxed
"
]
isPreload
:
true
}
]
"
Should
not
observe
any
loads
of
non
-
matching
sandboxed
http
document
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_no_preload_at_data_url
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
data_parent
"
]
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
<
all_urls
>
"
]
exclude_matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
"
*
:
/
/
example
.
com
/
dummy
?
data_parent
"
]
match_about_blank
:
true
all_frames
:
true
js
:
[
"
done
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
done
.
js
"
:
browser
.
test
.
sendMessage
(
"
script_run
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
dummy
?
initial
-
without_cs
"
)
;
await
ensureContentScriptDetector
(
extension
contentPage
)
;
await
contentPage
.
loadURL
(
"
http
:
/
/
example
.
com
/
dummy
?
data_parent
"
)
;
await
extension
.
awaitMessage
(
"
script_run
"
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
data_parent
"
]
isPreload
:
true
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
dummy
?
data_parent
"
]
isPreload
:
false
}
]
"
Should
have
observed
preload
in
initial
http
document
"
)
;
info
(
"
Testing
plain
data
:
-
URL
in
iframe
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
"
data
:
data_url_in_iframe
"
;
let
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
f
.
onload
=
(
)
=
>
resolve
(
)
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
return
promise
;
}
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
]
"
Should
not
observe
any
loads
of
non
-
matching
data
:
-
URL
"
)
;
info
(
"
Testing
sandboxed
data
:
-
URL
in
iframe
"
)
;
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
let
f
=
this
.
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
"
data
:
data_url_in_sandboxed_iframe
"
;
f
.
sandbox
=
"
allow
-
scripts
"
;
let
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
f
.
onload
=
(
)
=
>
resolve
(
)
;
this
.
content
.
wrappedJSObject
.
document
.
body
.
append
(
f
)
;
return
promise
;
}
)
;
Assert
.
deepEqual
(
await
getSeenContentScriptInjections
(
extension
contentPage
)
[
]
"
Should
not
observe
any
loads
of
non
-
matching
data
:
-
URL
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
