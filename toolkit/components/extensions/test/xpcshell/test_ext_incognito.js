"
use
strict
"
;
const
{
AddonManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
AddonTestUtils
.
hookAMTelemetryEvents
(
)
;
function
assertActionAMTelemetryEvent
(
expectedActionEvents
assertMessage
{
actionType
}
=
{
}
)
{
const
events
=
AddonTestUtils
.
getAMTelemetryEvents
(
)
.
filter
(
(
{
method
extra
}
)
=
>
{
return
method
=
=
=
"
action
"
&
&
(
!
actionType
?
true
:
extra
&
&
extra
.
action
=
=
=
actionType
)
;
}
)
;
Assert
.
deepEqual
(
events
expectedActionEvents
assertMessage
)
;
}
async
function
runIncognitoTest
(
extensionData
privateBrowsingAllowed
allowPrivateBrowsingByDefault
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
allowPrivateBrowsingByDefault
"
allowPrivateBrowsingByDefault
)
;
let
wrapper
=
ExtensionTestUtils
.
loadExtension
(
extensionData
)
;
await
wrapper
.
startup
(
)
;
let
{
extension
}
=
wrapper
;
if
(
!
allowPrivateBrowsingByDefault
)
{
equal
(
extension
.
permissions
.
has
(
"
internal
:
privateBrowsingAllowed
"
)
privateBrowsingAllowed
"
privateBrowsingAllowed
in
serialized
extension
"
)
;
}
equal
(
extension
.
privateBrowsingAllowed
privateBrowsingAllowed
"
privateBrowsingAllowed
in
extension
"
)
;
equal
(
extension
.
policy
.
privateBrowsingAllowed
privateBrowsingAllowed
"
privateBrowsingAllowed
on
policy
"
)
;
await
wrapper
.
unload
(
)
;
Services
.
prefs
.
clearUserPref
(
"
extensions
.
allowPrivateBrowsingByDefault
"
)
;
}
add_task
(
async
function
test_extension_incognito_spanning
(
)
{
await
runIncognitoTest
(
{
}
false
false
)
;
await
runIncognitoTest
(
{
}
true
true
)
;
}
)
;
add_task
(
async
function
test_extension_incognito_override_spanning
(
)
{
let
extensionData
=
{
incognitoOverride
:
"
spanning
"
}
;
await
runIncognitoTest
(
extensionData
true
false
)
;
}
)
;
add_task
(
async
function
test_extension_incognito_privileged
(
)
{
let
extensionData
=
{
isPrivileged
:
true
}
;
await
runIncognitoTest
(
extensionData
true
true
)
;
await
runIncognitoTest
(
extensionData
true
false
)
;
}
)
;
add_task
(
async
function
test_extension_incognito_spanning_grandfathered
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
allowPrivateBrowsingByDefault
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
incognito
.
migrated
"
false
)
;
let
disabledWrapper
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
"
disabled
"
}
}
incognito
:
"
spanning
"
}
useAddonManager
:
"
permanent
"
}
)
;
await
disabledWrapper
.
startup
(
)
;
let
disabledPolicy
=
WebExtensionPolicy
.
getByID
(
"
disabled
"
)
;
equal
(
disabledPolicy
.
permissions
.
includes
(
"
internal
:
privateBrowsingAllowed
"
)
false
"
privateBrowsingAllowed
is
not
in
permissions
for
disabled
addon
"
)
;
equal
(
disabledPolicy
.
privateBrowsingAllowed
true
"
privateBrowsingAllowed
in
disabled
addon
"
)
;
let
disabledAddon
=
await
AddonManager
.
getAddonByID
(
"
disabled
"
)
;
await
disabledAddon
.
disable
(
)
;
let
id
=
"
grandfathered
"
;
let
wrapper
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
}
}
incognito
:
"
spanning
"
}
useAddonManager
:
"
permanent
"
}
)
;
await
wrapper
.
startup
(
)
;
let
policy
=
WebExtensionPolicy
.
getByID
(
id
)
;
equal
(
policy
.
permissions
.
includes
(
"
internal
:
privateBrowsingAllowed
"
)
false
"
privateBrowsingAllowed
is
not
in
permissions
"
)
;
equal
(
policy
.
privateBrowsingAllowed
true
"
privateBrowsingAllowed
in
extension
"
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
allowPrivateBrowsingByDefault
"
false
)
;
await
AddonTestUtils
.
promiseRestartManager
(
"
2
"
)
;
await
wrapper
.
awaitStartup
(
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
"
extensions
.
incognito
.
migrated
"
false
)
"
pref
marked
as
migrated
"
)
;
policy
=
WebExtensionPolicy
.
getByID
(
id
)
;
ok
(
policy
.
permissions
.
includes
(
"
internal
:
privateBrowsingAllowed
"
)
"
privateBrowsingAllowed
is
in
permissions
"
)
;
equal
(
policy
.
privateBrowsingAllowed
true
"
privateBrowsingAllowed
in
extension
"
)
;
disabledAddon
=
await
AddonManager
.
getAddonByID
(
"
disabled
"
)
;
await
disabledAddon
.
enable
(
)
;
disabledPolicy
=
WebExtensionPolicy
.
getByID
(
"
disabled
"
)
;
equal
(
disabledPolicy
.
permissions
.
includes
(
"
internal
:
privateBrowsingAllowed
"
)
false
"
privateBrowsingAllowed
is
not
in
permissions
for
disabled
addon
"
)
;
equal
(
disabledPolicy
.
privateBrowsingAllowed
false
"
privateBrowsingAllowed
in
disabled
addon
"
)
;
await
wrapper
.
unload
(
)
;
await
disabledWrapper
.
unload
(
)
;
Services
.
prefs
.
clearUserPref
(
"
extensions
.
allowPrivateBrowsingByDefault
"
)
;
Services
.
prefs
.
clearUserPref
(
"
extensions
.
incognito
.
migrated
"
)
;
const
expectedEvents
=
[
{
method
:
"
action
"
object
:
"
appUpgrade
"
value
:
"
on
"
extra
:
{
addonId
:
"
grandfathered
"
action
:
"
privateBrowsingAllowed
"
}
}
]
;
assertActionAMTelemetryEvent
(
expectedEvents
"
Got
the
expected
telemetry
events
for
the
grandfathered
extensions
"
{
actionType
:
"
privateBrowsingAllowed
"
}
)
;
}
)
;
