"
use
strict
"
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
Message
manager
disconnected
/
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
43
"
)
;
let
{
promiseRestartManager
promiseShutdownManager
promiseStartupManager
}
=
AddonTestUtils
;
let
nonProxiedRequests
=
0
;
const
nonProxiedServer
=
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
nonProxiedServer
.
registerPathHandler
(
"
/
"
(
request
response
)
=
>
{
nonProxiedRequests
+
+
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
"
ok
"
)
;
}
)
;
let
proxiedRequests
=
0
;
const
server
=
createHttpServer
(
)
;
server
.
identity
.
add
(
"
http
"
"
proxied
.
example
.
com
"
80
)
;
server
.
registerPathHandler
(
"
/
"
(
request
response
)
=
>
{
proxiedRequests
+
+
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
write
(
"
ok
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
webextensions
.
background
-
delayed
-
startup
"
true
)
;
function
promiseExtensionEvent
(
wrapper
event
)
{
return
new
Promise
(
resolve
=
>
{
wrapper
.
extension
.
once
(
event
resolve
)
;
}
)
;
}
function
trackEvents
(
wrapper
)
{
let
events
=
new
Map
(
)
;
for
(
let
event
of
[
"
background
-
page
-
event
"
"
start
-
background
-
page
"
]
)
{
events
.
set
(
event
false
)
;
wrapper
.
extension
.
once
(
event
(
)
=
>
events
.
set
(
event
true
)
)
;
}
return
events
;
}
add_task
(
async
function
test_proxy_startup
(
)
{
await
promiseStartupManager
(
)
;
function
background
(
proxyInfo
)
{
browser
.
proxy
.
onRequest
.
addListener
(
details
=
>
{
if
(
details
.
type
=
=
"
xmlhttprequest
"
)
{
browser
.
test
.
sendMessage
(
"
saw
-
request
"
)
;
}
return
proxyInfo
;
}
{
urls
:
[
"
<
all_urls
>
"
]
}
)
;
}
let
proxyInfo
=
{
host
:
server
.
identity
.
primaryHost
port
:
server
.
identity
.
primaryPort
type
:
"
http
"
}
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
manifest
:
{
permissions
:
[
"
proxy
"
"
http
:
/
/
proxied
.
example
.
com
/
*
"
]
}
background
:
(
{
background
}
)
(
{
JSON
.
stringify
(
proxyInfo
)
}
)
}
)
;
await
extension
.
startup
(
)
;
await
Promise
.
all
(
[
extension
.
awaitMessage
(
"
saw
-
request
"
)
ExtensionTestUtils
.
fetch
(
"
http
:
/
/
proxied
.
example
.
com
/
?
a
=
0
"
)
]
)
;
equal
(
1
proxiedRequests
"
proxied
request
ok
"
)
;
equal
(
0
nonProxiedRequests
"
non
proxied
request
ok
"
)
;
await
ExtensionTestUtils
.
fetch
(
"
http
:
/
/
example
.
com
/
?
a
=
0
"
)
;
equal
(
1
proxiedRequests
"
proxied
request
ok
"
)
;
equal
(
1
nonProxiedRequests
"
non
proxied
request
ok
"
)
;
await
promiseRestartManager
(
false
)
;
await
extension
.
awaitStartup
(
)
;
let
events
=
trackEvents
(
extension
)
;
await
ExtensionTestUtils
.
fetch
(
"
http
:
/
/
example
.
com
/
?
a
=
1
"
)
;
equal
(
1
proxiedRequests
"
proxied
request
ok
"
)
;
equal
(
2
nonProxiedRequests
"
non
proxied
request
ok
"
)
;
equal
(
events
.
get
(
"
background
-
page
-
event
"
)
false
"
Should
not
have
gotten
a
background
page
event
"
)
;
let
request
=
Promise
.
all
(
[
extension
.
awaitMessage
(
"
saw
-
request
"
)
ExtensionTestUtils
.
fetch
(
"
http
:
/
/
proxied
.
example
.
com
/
?
a
=
1
"
)
]
)
;
await
promiseExtensionEvent
(
extension
"
background
-
page
-
event
"
)
;
equal
(
events
.
get
(
"
background
-
page
-
event
"
)
true
"
Should
have
gotten
a
background
page
event
"
)
;
equal
(
events
.
get
(
"
start
-
background
-
page
"
)
false
"
Should
have
gotten
a
background
page
event
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
-
delayed
-
startup
-
finished
"
)
;
await
new
Promise
(
executeSoon
)
;
equal
(
events
.
get
(
"
start
-
background
-
page
"
)
true
"
Should
have
gotten
a
background
page
event
"
)
;
await
request
;
equal
(
2
proxiedRequests
"
proxied
request
ok
"
)
;
equal
(
2
nonProxiedRequests
"
non
proxied
requests
ok
"
)
;
await
extension
.
unload
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
