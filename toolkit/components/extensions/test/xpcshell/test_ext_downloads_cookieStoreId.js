"
use
strict
"
;
function
cookiesToMime
(
cookies
)
{
return
dummy
/
{
encodeURIComponent
(
cookies
)
}
.
toLowerCase
(
)
;
}
function
mimeToCookies
(
mime
)
{
return
decodeURIComponent
(
mime
.
replace
(
"
dummy
/
"
"
"
)
)
;
}
const
server
=
createHttpServer
(
{
hosts
:
[
"
example
.
net
"
]
}
)
;
server
.
registerPathHandler
(
"
/
download
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
let
cookies
=
request
.
hasHeader
(
"
Cookie
"
)
?
request
.
getHeader
(
"
Cookie
"
)
:
"
"
;
response
.
setHeader
(
"
Content
-
Type
"
cookiesToMime
(
cookies
)
)
;
response
.
write
(
"
1234567
"
)
;
}
)
;
const
DOWNLOAD_URL
=
"
http
:
/
/
example
.
net
/
download
"
;
async
function
setUpCookies
(
)
{
Services
.
cookies
.
removeAll
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
incognitoOverride
:
"
spanning
"
manifest
:
{
permissions
:
[
"
cookies
"
"
http
:
/
/
example
.
net
/
download
"
]
}
async
background
(
)
{
let
url
=
"
http
:
/
/
example
.
net
/
download
"
;
await
browser
.
cookies
.
set
(
{
url
name
:
"
cookie_normal
"
value
:
"
1
"
}
)
;
await
browser
.
cookies
.
set
(
{
url
storeId
:
"
firefox
-
private
"
name
:
"
cookie_private
"
value
:
"
1
"
}
)
;
await
browser
.
cookies
.
set
(
{
url
storeId
:
"
firefox
-
container
-
1
"
name
:
"
cookie_container
"
value
:
"
1
"
}
)
;
browser
.
test
.
sendMessage
(
"
cookies
set
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
cookies
set
"
)
;
await
extension
.
unload
(
)
;
}
function
createDownloadTestExtension
(
extraPermissions
=
[
]
incognito
=
false
)
{
let
extensionOptions
=
{
manifest
:
{
permissions
:
[
"
downloads
"
.
.
.
extraPermissions
]
}
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
async
(
method
data
)
=
>
{
async
function
getDownload
(
data
)
{
let
donePromise
=
new
Promise
(
resolve
=
>
{
browser
.
downloads
.
onChanged
.
addListener
(
async
delta
=
>
{
if
(
delta
.
state
?
.
current
=
=
=
"
complete
"
)
{
resolve
(
delta
.
id
)
;
}
}
)
;
}
)
;
let
downloadId
=
await
browser
.
downloads
.
download
(
data
)
;
browser
.
test
.
assertEq
(
await
donePromise
downloadId
"
got
download
"
)
;
let
[
download
]
=
await
browser
.
downloads
.
search
(
{
id
:
downloadId
}
)
;
browser
.
test
.
log
(
Download
results
:
{
JSON
.
stringify
(
download
)
}
)
;
await
browser
.
downloads
.
removeFile
(
download
.
id
)
;
browser
.
test
.
assertEq
(
7
download
.
fileSize
"
download
succeeded
"
)
;
return
download
;
}
function
checkDownloadError
(
data
)
{
return
browser
.
test
.
assertRejects
(
browser
.
downloads
.
download
(
data
.
downloadData
)
data
.
exceptionRe
)
;
}
function
search
(
data
)
{
return
browser
.
downloads
.
search
(
data
)
;
}
function
erase
(
data
)
{
return
browser
.
downloads
.
erase
(
data
)
;
}
switch
(
method
)
{
case
"
getDownload
"
:
return
browser
.
test
.
sendMessage
(
method
await
getDownload
(
data
)
)
;
case
"
checkDownloadError
"
:
return
browser
.
test
.
sendMessage
(
method
await
checkDownloadError
(
data
)
)
;
case
"
search
"
:
return
browser
.
test
.
sendMessage
(
method
await
search
(
data
)
)
;
case
"
erase
"
:
return
browser
.
test
.
sendMessage
(
method
await
erase
(
data
)
)
;
}
}
)
;
}
}
;
if
(
incognito
)
{
extensionOptions
.
incognitoOverride
=
"
spanning
"
;
}
return
ExtensionTestUtils
.
loadExtension
(
extensionOptions
)
;
}
function
getResult
(
extension
method
data
)
{
extension
.
sendMessage
(
method
data
)
;
return
extension
.
awaitMessage
(
method
)
;
}
async
function
getCookies
(
extension
data
)
{
let
download
=
await
getResult
(
extension
"
getDownload
"
data
)
;
let
cookies
=
mimeToCookies
(
download
.
mime
)
;
return
cookies
;
}
async
function
runTests
(
extension
containerDownloadAllowed
privateAllowed
)
{
let
forcedIncognitoException
=
null
;
if
(
!
privateAllowed
)
{
forcedIncognitoException
=
/
private
browsing
access
not
allowed
/
;
}
else
if
(
!
containerDownloadAllowed
)
{
forcedIncognitoException
=
/
No
permission
for
cookieStoreId
/
;
}
if
(
containerDownloadAllowed
)
{
equal
(
await
getCookies
(
extension
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
firefox
-
default
"
}
)
"
cookie_normal
=
1
"
"
Default
container
cookies
for
downloads
.
download
"
)
;
}
else
{
await
getResult
(
extension
"
checkDownloadError
"
{
exceptionRe
:
/
No
permission
for
cookieStoreId
/
downloadData
:
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
firefox
-
default
"
}
}
)
;
}
if
(
privateAllowed
&
&
containerDownloadAllowed
)
{
equal
(
await
getCookies
(
extension
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
firefox
-
private
"
incognito
:
true
}
)
"
cookie_private
=
1
"
"
Private
container
cookies
for
downloads
.
download
"
)
;
}
else
{
await
getResult
(
extension
"
checkDownloadError
"
{
exceptionRe
:
forcedIncognitoException
downloadData
:
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
firefox
-
private
"
incognito
:
true
}
}
)
;
}
if
(
containerDownloadAllowed
)
{
equal
(
await
getCookies
(
extension
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
"
cookie_container
=
1
"
"
firefox
-
container
-
1
cookies
for
downloads
.
download
"
)
;
}
else
{
await
getResult
(
extension
"
checkDownloadError
"
{
exceptionRe
:
/
No
permission
for
cookieStoreId
/
downloadData
:
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
firefox
-
container
-
1
"
}
}
)
;
}
await
getResult
(
extension
"
checkDownloadError
"
{
exceptionRe
:
forcedIncognitoException
?
forcedIncognitoException
:
/
Illegal
to
set
non
-
private
cookieStoreId
in
a
private
window
/
downloadData
:
{
url
:
DOWNLOAD_URL
incognito
:
true
cookieStoreId
:
"
firefox
-
container
-
1
"
}
}
)
;
await
getResult
(
extension
"
checkDownloadError
"
{
exceptionRe
:
containerDownloadAllowed
?
/
Illegal
to
set
private
cookieStoreId
in
a
non
-
private
window
/
:
/
No
permission
for
cookieStoreId
/
downloadData
:
{
url
:
DOWNLOAD_URL
incognito
:
false
cookieStoreId
:
"
firefox
-
private
"
}
}
)
;
await
getResult
(
extension
"
checkDownloadError
"
{
exceptionRe
:
containerDownloadAllowed
?
/
Illegal
cookieStoreId
/
:
/
No
permission
for
cookieStoreId
/
downloadData
:
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
invalid
-
invalid
-
invalid
"
}
}
)
;
let
searchRes
searchResDownload
;
searchRes
=
await
getResult
(
extension
"
search
"
{
cookieStoreId
:
"
firefox
-
default
"
}
)
;
equal
(
searchRes
.
length
1
"
Default
container
results
length
for
downloads
.
search
"
)
;
[
searchResDownload
]
=
searchRes
;
equal
(
mimeToCookies
(
searchResDownload
.
mime
)
"
cookie_normal
=
1
"
"
Default
container
cookies
for
downloads
.
search
"
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_normal
=
1
"
)
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
;
equal
(
searchRes
.
length
0
"
Default
container
results
length
for
downloads
.
search
when
container
mismatched
"
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
cookieStoreId
:
"
firefox
-
private
"
}
)
;
if
(
privateAllowed
)
{
equal
(
searchRes
.
length
1
"
Private
container
results
length
for
downloads
.
search
"
)
;
[
searchResDownload
]
=
searchRes
;
equal
(
mimeToCookies
(
searchResDownload
.
mime
)
"
cookie_private
=
1
"
"
Private
container
cookies
for
downloads
.
search
"
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_private
=
1
"
)
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
;
equal
(
searchRes
.
length
0
"
Private
container
results
length
for
downloads
.
search
when
container
mismatched
"
)
;
}
else
{
equal
(
searchRes
.
length
0
"
Private
container
results
length
for
downloads
.
search
when
private
disallowed
"
)
;
}
searchRes
=
await
getResult
(
extension
"
search
"
{
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
;
equal
(
searchRes
.
length
1
"
firefox
-
container
-
1
results
length
for
downloads
.
search
"
)
;
[
searchResDownload
]
=
searchRes
;
equal
(
mimeToCookies
(
searchResDownload
.
mime
)
"
cookie_container
=
1
"
"
firefox
-
container
-
1
cookies
for
downloads
.
search
"
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_container
=
1
"
)
cookieStoreId
:
"
firefox
-
default
"
}
)
;
equal
(
searchRes
.
length
0
"
firefox
-
container
-
1
container
results
length
for
downloads
.
search
when
container
mismatched
"
)
;
await
getResult
(
extension
"
erase
"
{
mime
:
cookiesToMime
(
"
cookie_normal
=
1
"
)
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_normal
=
1
"
)
}
)
;
equal
(
searchRes
.
length
1
"
Default
container
results
length
for
downloads
.
search
after
erase
with
mismatched
container
"
)
;
await
getResult
(
extension
"
erase
"
{
mime
:
cookiesToMime
(
"
cookie_private
=
1
"
)
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_private
=
1
"
)
}
)
;
equal
(
searchRes
.
length
privateAllowed
?
1
:
0
"
Private
container
results
length
for
downloads
.
search
after
erase
with
mismatched
container
"
)
;
await
getResult
(
extension
"
erase
"
{
mime
:
cookiesToMime
(
"
cookie_container
=
1
"
)
cookieStoreId
:
"
firefox
-
default
"
}
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_container
=
1
"
)
}
)
;
equal
(
searchRes
.
length
1
"
firefox
-
container
-
1
results
length
for
downloads
.
search
after
erase
with
mismatched
container
"
)
;
await
getResult
(
extension
"
erase
"
{
cookieStoreId
:
"
firefox
-
default
"
}
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_normal
=
1
"
)
}
)
;
equal
(
searchRes
.
length
0
"
Default
container
results
length
for
downloads
.
search
after
erase
"
)
;
await
getResult
(
extension
"
erase
"
{
cookieStoreId
:
"
firefox
-
private
"
}
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_private
=
1
"
)
}
)
;
equal
(
searchRes
.
length
0
"
Private
container
results
length
for
downloads
.
search
after
erase
"
)
;
await
getResult
(
extension
"
erase
"
{
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
;
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_container
=
1
"
)
}
)
;
equal
(
searchRes
.
length
0
"
firefox
-
container
-
1
results
length
for
downloads
.
search
after
erase
"
)
;
}
async
function
populateDownloads
(
extension
)
{
await
getResult
(
extension
"
erase
"
{
}
)
;
await
getResult
(
extension
"
getDownload
"
{
url
:
DOWNLOAD_URL
}
)
;
await
getResult
(
extension
"
getDownload
"
{
url
:
DOWNLOAD_URL
incognito
:
true
}
)
;
await
getResult
(
extension
"
getDownload
"
{
url
:
DOWNLOAD_URL
cookieStoreId
:
"
firefox
-
container
-
1
"
}
)
;
}
add_task
(
async
function
setup
(
)
{
const
nsIFile
=
Ci
.
nsIFile
;
const
downloadDir
=
FileUtils
.
getDir
(
"
TmpD
"
[
"
downloads
"
]
)
;
downloadDir
.
createUnique
(
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
download
.
folderList
"
2
)
;
Services
.
prefs
.
setComplexValue
(
"
browser
.
download
.
dir
"
nsIFile
downloadDir
)
;
await
setUpCookies
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
cookies
.
removeAll
(
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
download
.
folderList
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
download
.
dir
"
)
;
downloadDir
.
remove
(
false
)
;
}
)
;
}
)
;
add_task
(
async
function
download_cookieStoreId
(
)
{
let
extension
=
createDownloadTestExtension
(
[
"
cookies
"
]
true
)
;
await
extension
.
startup
(
)
;
await
runTests
(
extension
true
true
)
;
await
populateDownloads
(
extension
)
;
let
noCookiesExtension
=
createDownloadTestExtension
(
[
]
true
)
;
await
noCookiesExtension
.
startup
(
)
;
await
runTests
(
noCookiesExtension
false
true
)
;
await
noCookiesExtension
.
unload
(
)
;
await
populateDownloads
(
extension
)
;
let
noCookiesAndPrivateExtension
=
createDownloadTestExtension
(
[
]
false
)
;
await
noCookiesAndPrivateExtension
.
startup
(
)
;
await
runTests
(
noCookiesAndPrivateExtension
false
false
)
;
await
noCookiesAndPrivateExtension
.
unload
(
)
;
let
searchRes
=
await
getResult
(
extension
"
search
"
{
mime
:
cookiesToMime
(
"
cookie_private
=
1
"
)
}
)
;
ok
(
searchRes
.
length
"
Incognito
disabled
does
not
delete
private
download
"
)
;
await
extension
.
unload
(
)
;
}
)
;
