"
use
strict
"
;
add_task
(
function
*
test_sendMessage_error
(
)
{
function
background
(
)
{
let
circ
=
{
}
;
circ
.
circ
=
circ
;
let
testCases
=
[
[
[
]
"
runtime
.
sendMessage
'
s
message
argument
is
missing
"
]
[
[
null
null
null
null
]
"
runtime
.
sendMessage
'
s
last
argument
is
not
a
function
"
]
[
[
null
null
1
]
"
runtime
.
sendMessage
'
s
options
argument
is
invalid
"
]
[
[
1
null
null
]
"
runtime
.
sendMessage
'
s
extensionId
argument
is
invalid
"
]
[
[
null
null
null
null
null
]
"
runtime
.
sendMessage
received
too
many
arguments
"
]
[
[
null
null
null
]
"
Could
not
establish
connection
.
Receiving
end
does
not
exist
.
"
]
[
[
null
location
null
]
"
Could
not
establish
connection
.
Receiving
end
does
not
exist
.
"
]
[
[
null
[
circ
location
]
null
]
"
cyclic
object
value
"
]
[
[
null
circ
null
]
"
Could
not
establish
connection
.
Receiving
end
does
not
exist
.
"
]
]
;
for
(
let
[
args
expectedError
]
of
testCases
.
slice
(
)
)
{
args
=
args
.
map
(
arg
=
>
arg
=
=
=
null
?
undefined
:
arg
)
;
testCases
.
push
(
[
args
expectedError
]
)
;
}
function
next
(
)
{
if
(
!
testCases
.
length
)
{
browser
.
test
.
notifyPass
(
"
sendMessage
parameter
validation
"
)
;
return
;
}
let
[
args
expectedError
]
=
testCases
.
shift
(
)
;
let
description
=
runtime
.
sendMessage
(
{
args
.
map
(
String
)
.
join
(
"
"
)
}
)
;
return
browser
.
runtime
.
sendMessage
(
.
.
.
args
)
.
then
(
(
)
=
>
{
browser
.
test
.
fail
(
Unexpectedly
got
no
error
for
{
description
}
)
;
}
err
=
>
{
browser
.
test
.
assertEq
(
expectedError
err
.
message
expected
error
message
for
{
description
}
)
;
}
)
.
then
(
next
)
;
}
next
(
)
;
}
let
extensionData
=
{
background
}
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
extensionData
)
;
yield
extension
.
startup
(
)
;
yield
extension
.
awaitFinish
(
"
sendMessage
parameter
validation
"
)
;
yield
extension
.
unload
(
)
;
}
)
;
