"
use
strict
"
;
async
function
checkExtensionStartupAndUnload
(
ext
)
{
await
ext
.
startup
(
)
;
Assert
.
ok
(
ext
.
id
"
Extension
ID
should
be
available
"
)
;
Assert
.
ok
(
ext
.
uuid
"
Extension
UUID
should
be
available
"
)
;
await
ext
.
unload
(
)
;
Assert
.
ok
(
ext
.
uuid
"
Extension
UUID
exists
after
unload
"
)
;
}
add_task
(
async
function
setup
(
)
{
await
ExtensionTestUtils
.
startAddonManager
(
)
;
}
)
;
add_task
(
async
function
test_MockExtension
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
temporary
"
manifest
:
{
}
}
)
;
Assert
.
equal
(
ext
.
constructor
.
name
"
InstallableWrapper
"
"
expected
class
"
)
;
Assert
.
ok
(
!
ext
.
id
"
Extension
ID
is
initially
unavailable
"
)
;
Assert
.
ok
(
!
ext
.
uuid
"
Extension
UUID
is
initially
unavailable
"
)
;
await
checkExtensionStartupAndUnload
(
ext
)
;
Assert
.
ok
(
!
ext
.
id
"
Extension
ID
is
cleared
after
unload
"
)
;
}
)
;
add_task
(
async
function
test_generated_Extension
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
}
}
)
;
Assert
.
equal
(
ext
.
constructor
.
name
"
ExtensionWrapper
"
"
expected
class
"
)
;
Assert
.
ok
(
ext
.
id
"
Extension
ID
is
initially
available
"
)
;
Assert
.
ok
(
ext
.
uuid
"
Extension
UUID
is
initially
available
"
)
;
await
checkExtensionStartupAndUnload
(
ext
)
;
Assert
.
ok
(
ext
.
id
"
Extension
ID
exists
after
unload
"
)
;
}
)
;
