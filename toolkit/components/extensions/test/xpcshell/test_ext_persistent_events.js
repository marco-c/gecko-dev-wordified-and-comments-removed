"
use
strict
"
;
const
{
ExtensionAPI
}
=
ExtensionCommon
;
const
API
=
class
extends
ExtensionAPI
{
static
namespace
=
undefined
;
primeListener
(
event
fire
params
)
{
let
{
eventName
throwError
ignoreListener
}
=
this
.
constructor
.
testOptions
|
|
{
}
;
let
{
namespace
}
=
this
.
constructor
;
if
(
eventName
=
=
event
)
{
if
(
throwError
)
{
throw
new
Error
(
throwError
)
;
}
if
(
ignoreListener
)
{
return
;
}
}
Services
.
obs
.
notifyObservers
(
{
namespace
event
fire
params
}
"
prime
-
event
-
listener
"
)
;
const
FIRE_TOPIC
=
fire
-
{
namespace
}
.
{
event
}
;
async
function
listener
(
subject
topic
data
)
{
try
{
if
(
subject
.
wrappedJSObject
.
waitForBackground
)
{
await
fire
.
wakeup
(
)
;
}
await
fire
.
async
(
subject
.
wrappedJSObject
.
listenerArgs
)
;
}
catch
(
err
)
{
let
errSubject
=
{
namespace
event
errorMessage
:
err
.
toString
(
)
}
;
Services
.
obs
.
notifyObservers
(
errSubject
"
listener
-
callback
-
exception
"
)
;
}
}
Services
.
obs
.
addObserver
(
listener
FIRE_TOPIC
)
;
return
{
unregister
(
)
{
Services
.
obs
.
notifyObservers
(
{
namespace
event
params
}
"
unregister
-
primed
-
listener
"
)
;
Services
.
obs
.
removeObserver
(
listener
FIRE_TOPIC
)
;
}
convert
(
_fire
)
{
Services
.
obs
.
notifyObservers
(
{
namespace
event
params
}
"
convert
-
event
-
listener
"
)
;
fire
=
_fire
;
}
}
;
}
getAPI
(
context
)
{
let
self
=
this
;
let
{
namespace
}
=
this
.
constructor
;
return
{
[
namespace
]
:
{
testOptions
(
options
)
{
self
.
constructor
.
testOptions
=
options
;
}
onEvent1
:
new
EventManager
(
{
context
module
:
namespace
event
:
"
onEvent1
"
register
:
(
fire
.
.
.
params
)
=
>
{
let
data
=
{
namespace
event
:
"
onEvent1
"
params
}
;
Services
.
obs
.
notifyObservers
(
data
"
register
-
event
-
listener
"
)
;
return
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
data
"
unregister
-
event
-
listener
"
)
;
}
;
}
}
)
.
api
(
)
onEvent2
:
new
EventManager
(
{
context
module
:
namespace
event
:
"
onEvent2
"
register
:
(
fire
.
.
.
params
)
=
>
{
let
data
=
{
namespace
event
:
"
onEvent2
"
params
}
;
Services
.
obs
.
notifyObservers
(
data
"
register
-
event
-
listener
"
)
;
return
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
data
"
unregister
-
event
-
listener
"
)
;
}
;
}
}
)
.
api
(
)
}
}
;
}
}
;
function
makeModule
(
namespace
options
=
{
}
)
{
const
SCHEMA
=
[
{
namespace
functions
:
[
{
name
:
"
testOptions
"
type
:
"
function
"
async
:
true
parameters
:
[
{
name
:
"
options
"
type
:
"
object
"
additionalProperties
:
{
type
:
"
any
"
}
}
]
}
]
events
:
[
{
name
:
"
onEvent1
"
type
:
"
function
"
extraParameters
:
[
{
type
:
"
any
"
}
]
}
{
name
:
"
onEvent2
"
type
:
"
function
"
extraParameters
:
[
{
type
:
"
any
"
}
]
}
]
}
]
;
const
API_SCRIPT
=
this
.
{
namespace
}
=
{
API
.
toString
(
)
}
;
this
.
{
namespace
}
.
namespace
=
"
{
namespace
}
"
;
;
let
{
startupBlocking
}
=
options
;
return
{
schema
:
data
:
{
JSON
.
stringify
(
SCHEMA
)
}
scopes
:
[
"
addon_parent
"
]
paths
:
[
[
namespace
]
]
startupBlocking
url
:
URL
.
createObjectURL
(
new
Blob
(
[
API_SCRIPT
]
)
)
}
;
}
const
MODULE_INFO
=
{
eventtest
:
makeModule
(
"
eventtest
"
{
startupBlocking
:
true
}
)
eventtest2
:
makeModule
(
"
eventtest2
"
)
}
;
const
global
=
this
;
async
function
promiseObservable
(
topic
count
fn
=
null
)
{
let
_countResolve
;
let
results
=
[
]
;
function
listener
(
subject
_topic
data
)
{
const
eventDetails
=
subject
.
wrappedJSObject
;
results
.
push
(
eventDetails
)
;
if
(
results
.
length
>
count
)
{
ok
(
false
Got
unexpected
{
topic
}
event
with
{
JSON
.
stringify
(
eventDetails
)
}
)
;
}
else
if
(
results
.
length
=
=
count
)
{
_countResolve
(
)
;
}
}
Services
.
obs
.
addObserver
(
listener
topic
)
;
try
{
await
Promise
.
all
(
[
new
Promise
(
resolve
=
>
{
_countResolve
=
resolve
;
}
)
fn
&
&
fn
(
)
]
)
;
}
finally
{
Services
.
obs
.
removeObserver
(
listener
topic
)
;
}
return
results
;
}
function
trackEvents
(
wrapper
)
{
let
events
=
new
Map
(
)
;
for
(
let
event
of
[
"
background
-
script
-
event
"
"
start
-
background
-
script
"
]
)
{
events
.
set
(
event
false
)
;
wrapper
.
extension
.
once
(
event
(
)
=
>
events
.
set
(
event
true
)
)
;
}
return
events
;
}
add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
)
;
}
)
;
AddonTestUtils
.
init
(
global
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
43
"
)
;
ExtensionParent
.
apiManager
.
registerModules
(
MODULE_INFO
)
;
}
)
;
add_task
(
async
function
test_persistent_events
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
background
(
)
{
let
register1
=
true
register2
=
true
;
if
(
localStorage
.
getItem
(
"
skip1
"
)
)
{
register1
=
false
;
}
if
(
localStorage
.
getItem
(
"
skip2
"
)
)
{
register2
=
false
;
}
let
listener1
=
arg
=
>
browser
.
test
.
sendMessage
(
"
listener1
"
arg
)
;
let
listener2
=
arg
=
>
browser
.
test
.
sendMessage
(
"
listener2
"
arg
)
;
let
listener3
=
arg
=
>
browser
.
test
.
sendMessage
(
"
listener3
"
arg
)
;
if
(
register1
)
{
browser
.
eventtest
.
onEvent1
.
addListener
(
listener1
"
listener1
"
)
;
}
if
(
register2
)
{
browser
.
eventtest
.
onEvent1
.
addListener
(
listener2
"
listener2
"
)
;
browser
.
eventtest
.
onEvent2
.
addListener
(
listener3
"
listener3
"
)
;
}
browser
.
test
.
onMessage
.
addListener
(
msg
=
>
{
if
(
msg
=
=
"
unregister2
"
)
{
browser
.
eventtest
.
onEvent2
.
removeListener
(
listener3
)
;
localStorage
.
setItem
(
"
skip2
"
true
)
;
}
else
if
(
msg
=
=
"
unregister1
"
)
{
localStorage
.
setItem
(
"
skip1
"
true
)
;
browser
.
test
.
sendMessage
(
"
unregistered
"
)
;
}
}
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
}
)
;
function
check
(
info
what
{
listener1
=
true
listener2
=
true
listener3
=
true
}
=
{
}
)
{
let
count
=
(
listener1
?
1
:
0
)
+
(
listener2
?
1
:
0
)
+
(
listener3
?
1
:
0
)
;
equal
(
info
.
length
count
Got
{
count
}
{
what
}
events
)
;
let
i
=
0
;
if
(
listener1
)
{
equal
(
info
[
i
]
.
event
"
onEvent1
"
Got
{
what
}
on
event1
for
listener
1
)
;
deepEqual
(
info
[
i
]
.
params
[
"
listener1
"
]
Got
event1
{
what
}
args
for
listener
1
)
;
+
+
i
;
}
if
(
listener2
)
{
equal
(
info
[
i
]
.
event
"
onEvent1
"
Got
{
what
}
on
event1
for
listener
2
)
;
deepEqual
(
info
[
i
]
.
params
[
"
listener2
"
]
Got
event1
{
what
}
args
for
listener
2
)
;
+
+
i
;
}
if
(
listener3
)
{
equal
(
info
[
i
]
.
event
"
onEvent2
"
Got
{
what
}
on
event2
for
listener
3
)
;
deepEqual
(
info
[
i
]
.
params
[
"
listener3
"
]
Got
event2
{
what
}
args
for
listener
3
)
;
+
+
i
;
}
}
let
[
observed
]
=
await
Promise
.
all
(
[
promiseObservable
(
"
register
-
event
-
listener
"
3
)
extension
.
startup
(
)
]
)
;
check
(
observed
"
register
"
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
[
observed
]
=
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
event
-
listener
"
3
)
new
Promise
(
resolve
=
>
extension
.
extension
.
once
(
"
shutdown
"
resolve
)
)
AddonTestUtils
.
promiseShutdownManager
(
)
]
)
;
check
(
observed
"
unregister
"
)
;
[
observed
]
=
await
Promise
.
all
(
[
promiseObservable
(
"
prime
-
event
-
listener
"
3
)
AddonTestUtils
.
promiseStartupManager
(
)
]
)
;
check
(
observed
"
prime
"
)
;
let
p
=
promiseObservable
(
"
convert
-
event
-
listener
"
3
)
;
AddonTestUtils
.
notifyLateStartup
(
)
;
observed
=
await
p
;
check
(
observed
"
convert
"
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
let
listenerArgs
=
{
test
:
"
kaboom
"
}
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
}
"
fire
-
eventtest
.
onEvent1
"
)
;
let
details
=
await
extension
.
awaitMessage
(
"
listener1
"
)
;
deepEqual
(
details
listenerArgs
"
Listener
1
fired
"
)
;
details
=
await
extension
.
awaitMessage
(
"
listener2
"
)
;
deepEqual
(
details
listenerArgs
"
Listener
2
fired
"
)
;
[
observed
]
=
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
primed
-
listener
"
3
)
AddonTestUtils
.
promiseShutdownManager
(
)
]
)
;
check
(
observed
"
unregister
"
)
;
[
observed
]
=
await
Promise
.
all
(
[
promiseObservable
(
"
prime
-
event
-
listener
"
3
)
AddonTestUtils
.
promiseStartupManager
(
)
]
)
;
check
(
observed
"
prime
"
)
;
p
=
promiseObservable
(
"
convert
-
event
-
listener
"
3
)
;
listenerArgs
.
test
=
"
startup
event
"
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
}
"
fire
-
eventtest
.
onEvent2
"
)
;
observed
=
await
p
;
check
(
observed
"
convert
"
)
;
details
=
await
extension
.
awaitMessage
(
"
listener3
"
)
;
deepEqual
(
details
listenerArgs
"
Listener
3
fired
for
event
during
startup
"
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
p
=
promiseObservable
(
"
unregister
-
primed
-
listener
"
1
)
;
extension
.
sendMessage
(
"
unregister2
"
)
;
observed
=
await
p
;
check
(
observed
"
unregister
"
{
listener1
:
false
listener2
:
false
}
)
;
observed
=
await
promiseObservable
(
"
unregister
-
primed
-
listener
"
2
(
)
=
>
AddonTestUtils
.
promiseShutdownManager
(
)
)
;
check
(
observed
"
unregister
"
{
listener3
:
false
}
)
;
observed
=
await
promiseObservable
(
"
prime
-
event
-
listener
"
2
(
)
=
>
AddonTestUtils
.
promiseStartupManager
(
)
)
;
check
(
observed
"
prime
"
{
listener3
:
false
}
)
;
p
=
promiseObservable
(
"
unregister
-
primed
-
listener
"
1
(
)
=
>
extension
.
awaitMessage
(
"
ready
"
)
)
;
AddonTestUtils
.
notifyLateStartup
(
)
;
observed
=
await
p
;
check
(
observed
"
unregister
"
{
listener1
:
false
listener3
:
false
}
)
;
listenerArgs
.
test
=
"
third
time
"
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
}
"
fire
-
eventtest
.
onEvent1
"
)
;
details
=
await
extension
.
awaitMessage
(
"
listener1
"
)
;
deepEqual
(
details
listenerArgs
"
Listener
1
fired
"
)
;
extension
.
sendMessage
(
"
unregister1
"
)
;
await
extension
.
awaitMessage
(
"
unregistered
"
)
;
observed
=
await
promiseObservable
(
"
unregister
-
primed
-
listener
"
1
(
)
=
>
AddonTestUtils
.
promiseShutdownManager
(
)
)
;
check
(
observed
"
unregister
"
{
listener2
:
false
listener3
:
false
}
)
;
observed
=
await
promiseObservable
(
"
prime
-
event
-
listener
"
1
(
)
=
>
AddonTestUtils
.
promiseStartupManager
(
)
)
;
check
(
observed
"
register
"
{
listener2
:
false
listener3
:
false
}
)
;
p
=
promiseObservable
(
"
listener
-
callback
-
exception
"
1
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
waitForBackground
:
true
}
"
fire
-
eventtest
.
onEvent1
"
)
;
equal
(
(
await
p
)
[
0
]
.
errorMessage
"
Error
:
primed
listener
not
re
-
registered
"
"
Primed
listener
that
was
not
re
-
registered
received
an
error
when
event
was
triggered
during
startup
"
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
await
extension
.
unload
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_shutdown_before_background_loaded
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
background
(
)
{
let
listener
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered
"
arg
)
;
browser
.
eventtest
.
onEvent1
.
addListener
(
listener
"
triggered
"
)
;
browser
.
test
.
sendMessage
(
"
bg_started
"
)
;
}
}
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
register
-
event
-
listener
"
1
)
extension
.
startup
(
)
]
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
event
-
listener
"
1
)
new
Promise
(
resolve
=
>
extension
.
extension
.
once
(
"
shutdown
"
resolve
)
)
AddonTestUtils
.
promiseShutdownManager
(
)
]
)
;
let
primeListenerPromise
=
promiseObservable
(
"
prime
-
event
-
listener
"
1
)
;
let
fire
;
let
fireWakeupBeforeBgFail
;
let
fireAsyncBeforeBgFail
;
let
bgAbortedPromise
=
new
Promise
(
resolve
=
>
{
let
Management
=
ExtensionParent
.
apiManager
;
Management
.
once
(
"
extension
-
browser
-
inserted
"
(
eventName
browser
)
=
>
{
browser
.
loadURI
=
async
(
)
=
>
{
fire
=
(
await
primeListenerPromise
)
[
0
]
.
fire
;
fireWakeupBeforeBgFail
=
fire
.
wakeup
(
)
;
fireAsyncBeforeBgFail
=
fire
.
async
(
)
;
extension
.
extension
.
once
(
"
background
-
script
-
aborted
"
resolve
)
;
info
(
"
Forcing
the
background
load
to
fail
"
)
;
browser
.
remove
(
)
;
}
;
}
)
;
}
)
;
let
unregisterPromise
=
promiseObservable
(
"
unregister
-
primed
-
listener
"
1
)
;
await
Promise
.
all
(
[
primeListenerPromise
AddonTestUtils
.
promiseStartupManager
(
)
]
)
;
await
bgAbortedPromise
;
info
(
"
Loaded
extension
and
aborted
load
of
background
page
"
)
;
await
unregisterPromise
;
info
(
"
Primed
listener
has
been
unregistered
"
)
;
await
fireWakeupBeforeBgFail
;
info
(
"
fire
.
wakeup
(
)
before
background
load
failure
should
settle
"
)
;
await
Assert
.
rejects
(
fireAsyncBeforeBgFail
/
Error
:
listener
not
re
-
registered
/
"
fire
.
async
before
background
load
failure
should
be
rejected
"
)
;
await
fire
.
wakeup
(
)
;
info
(
"
fire
.
wakeup
(
)
after
background
load
failure
should
settle
"
)
;
await
Assert
.
rejects
(
fire
.
async
(
)
/
Error
:
primed
listener
not
re
-
registered
/
"
fire
.
async
after
background
load
failure
should
be
rejected
"
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
prime
-
event
-
listener
"
1
)
AddonTestUtils
.
promiseStartupManager
(
{
earlyStartup
:
false
}
)
]
)
;
info
(
"
Triggering
persistent
event
to
force
the
background
page
to
start
"
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
:
123
}
"
fire
-
eventtest
.
onEvent1
"
)
;
AddonTestUtils
.
notifyEarlyStartup
(
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
equal
(
await
extension
.
awaitMessage
(
"
triggered
"
)
123
"
triggered
event
"
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
primed
-
listener
"
1
)
AddonTestUtils
.
promiseShutdownManager
(
)
]
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
prime
-
event
-
listener
"
1
)
AddonTestUtils
.
promiseStartupManager
(
{
earlyStartup
:
false
}
)
]
)
;
info
(
"
Unloading
extension
before
background
page
has
loaded
"
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
primed
-
listener
"
1
)
extension
.
unload
(
)
]
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_background_restarted
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
background
(
)
{
let
listener
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered
"
arg
)
;
browser
.
eventtest
.
onEvent1
.
addListener
(
listener
"
triggered
"
)
;
browser
.
test
.
sendMessage
(
"
bg_started
"
)
;
}
}
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
register
-
event
-
listener
"
1
)
extension
.
startup
(
)
]
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
false
}
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
event
-
listener
"
1
)
extension
.
terminateBackground
(
)
]
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
true
}
)
;
info
(
"
Triggering
persistent
event
to
force
the
background
page
to
start
"
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
:
123
}
"
fire
-
eventtest
.
onEvent1
"
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
equal
(
await
extension
.
awaitMessage
(
"
triggered
"
)
123
"
triggered
event
"
)
;
await
extension
.
unload
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
add_task
(
{
pref_set
:
[
[
"
extensions
.
eventPages
.
enabled
"
true
]
]
}
async
function
test_eventpage_startup
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
manifest
:
{
applications
:
{
gecko
:
{
id
:
"
eventpage
test
"
}
}
background
:
{
persistent
:
false
}
}
background
(
)
{
let
listener
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered
"
arg
)
;
browser
.
eventtest
.
onEvent1
.
addListener
(
listener
"
triggered
"
)
;
let
listenerNs
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered
-
et2
"
arg
)
;
browser
.
eventtest2
.
onEvent1
.
addListener
(
listenerNs
"
triggered
-
et2
"
)
;
browser
.
test
.
onMessage
.
addListener
(
(
)
=
>
{
let
listener
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered2
"
arg
)
;
browser
.
eventtest
.
onEvent2
.
addListener
(
listener
"
triggered2
"
)
;
browser
.
test
.
sendMessage
(
"
async
-
registered
-
listener
"
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
bg_started
"
)
;
}
}
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
register
-
event
-
listener
"
2
)
extension
.
startup
(
)
]
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
extension
.
sendMessage
(
"
async
-
register
-
listener
"
)
;
await
extension
.
awaitMessage
(
"
async
-
registered
-
listener
"
)
;
async
function
testAfterRestart
(
)
{
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
true
}
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent2
"
{
primed
:
false
persisted
:
false
}
)
;
let
events
=
trackEvents
(
extension
)
;
ok
(
!
events
.
get
(
"
background
-
script
-
event
"
)
"
Should
not
have
received
a
background
script
event
"
)
;
ok
(
!
events
.
get
(
"
start
-
background
-
script
"
)
"
Background
script
should
not
be
started
"
)
;
info
(
"
Triggering
persistent
event
to
force
the
background
page
to
start
"
)
;
let
converted
=
promiseObservable
(
"
convert
-
event
-
listener
"
1
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
:
123
}
"
fire
-
eventtest
.
onEvent1
"
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
await
converted
;
equal
(
await
extension
.
awaitMessage
(
"
triggered
"
)
123
"
triggered
event
"
)
;
ok
(
events
.
get
(
"
background
-
script
-
event
"
)
"
Should
have
received
a
background
script
event
"
)
;
ok
(
events
.
get
(
"
start
-
background
-
script
"
)
"
Background
script
should
be
started
"
)
;
}
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
event
-
listener
"
3
)
new
Promise
(
resolve
=
>
extension
.
extension
.
once
(
"
shutdown
"
resolve
)
)
AddonTestUtils
.
promiseShutdownManager
(
)
]
)
;
await
AddonTestUtils
.
promiseStartupManager
(
{
lateStartup
:
false
}
)
;
await
extension
.
awaitStartup
(
)
;
assertPersistentListeners
(
extension
"
eventtest2
"
"
onEvent1
"
{
primed
:
false
persisted
:
true
}
)
;
await
testAfterRestart
(
)
;
extension
.
sendMessage
(
"
async
-
register
-
listener
"
)
;
await
extension
.
awaitMessage
(
"
async
-
registered
-
listener
"
)
;
info
(
"
test
event
listener
registration
during
termination
"
)
;
let
registrationEvents
=
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
event
-
listener
"
2
)
promiseObservable
(
"
unregister
-
primed
-
listener
"
1
)
promiseObservable
(
"
prime
-
event
-
listener
"
2
)
]
)
;
await
extension
.
terminateBackground
(
)
;
await
registrationEvents
;
assertPersistentListeners
(
extension
"
eventtest2
"
"
onEvent1
"
{
primed
:
true
persisted
:
true
}
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
:
123
}
"
fire
-
eventtest
.
onEvent2
"
)
;
await
testAfterRestart
(
)
;
registrationEvents
=
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
primed
-
listener
"
2
)
promiseObservable
(
"
prime
-
event
-
listener
"
2
)
]
)
;
await
extension
.
terminateBackground
(
)
;
await
registrationEvents
;
await
testAfterRestart
(
)
;
await
extension
.
unload
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_background_primeListener_errors
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
async
(
message
options
)
=
>
{
if
(
message
=
=
"
set
-
options
"
)
{
await
browser
.
eventtest
.
testOptions
(
options
)
;
browser
.
test
.
sendMessage
(
"
set
-
options
:
done
"
)
;
}
}
)
;
let
listener
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered
"
arg
)
;
browser
.
eventtest
.
onEvent1
.
addListener
(
listener
"
triggered
"
)
;
let
listener2
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered
"
arg
)
;
browser
.
eventtest
.
onEvent2
.
addListener
(
listener2
"
triggered
"
)
;
browser
.
test
.
sendMessage
(
"
bg_started
"
)
;
}
}
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
register
-
event
-
listener
"
1
)
extension
.
startup
(
)
]
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
false
}
)
;
extension
.
sendMessage
(
"
set
-
options
"
{
eventName
:
"
onEvent1
"
ignoreListener
:
true
}
)
;
await
extension
.
awaitMessage
(
"
set
-
options
:
done
"
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
event
-
listener
"
2
)
extension
.
terminateBackground
(
)
]
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
false
persisted
:
false
}
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent2
"
{
primed
:
true
}
)
;
info
(
"
Triggering
persistent
event
to
force
the
background
page
to
start
"
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
:
123
}
"
fire
-
eventtest
.
onEvent2
"
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
equal
(
await
extension
.
awaitMessage
(
"
triggered
"
)
123
"
triggered
event
"
)
;
extension
.
sendMessage
(
"
set
-
options
"
{
eventName
:
"
onEvent1
"
throwError
:
"
error
"
}
)
;
await
extension
.
awaitMessage
(
"
set
-
options
:
done
"
)
;
await
Promise
.
all
(
[
promiseObservable
(
"
unregister
-
event
-
listener
"
1
)
extension
.
terminateBackground
(
)
]
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
false
persisted
:
false
}
)
;
info
(
"
Triggering
event
to
verify
background
starts
after
prior
error
"
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
:
123
}
"
fire
-
eventtest
.
onEvent2
"
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
equal
(
await
extension
.
awaitMessage
(
"
triggered
"
)
123
"
triggered
event
"
)
;
info
(
"
reset
options
for
next
test
"
)
;
extension
.
sendMessage
(
"
set
-
options
"
{
}
)
;
await
extension
.
awaitMessage
(
"
set
-
options
:
done
"
)
;
info
(
"
Test
errors
during
app
startup
"
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
await
extension
.
awaitStartup
(
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
info
(
"
restart
AOM
and
verify
primed
listener
"
)
;
await
AddonTestUtils
.
promiseRestartManager
(
{
earlyStartup
:
false
}
)
;
await
extension
.
awaitStartup
(
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
true
persisted
:
true
}
)
;
AddonTestUtils
.
notifyEarlyStartup
(
)
;
Services
.
obs
.
notifyObservers
(
{
listenerArgs
:
123
}
"
fire
-
eventtest
.
onEvent1
"
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
equal
(
await
extension
.
awaitMessage
(
"
triggered
"
)
123
"
triggered
event
"
)
;
info
(
"
test
exception
during
primeListener
on
startup
"
)
;
extension
.
sendMessage
(
"
set
-
options
"
{
eventName
:
"
onEvent1
"
throwError
:
"
error
"
}
)
;
await
extension
.
awaitMessage
(
"
set
-
options
:
done
"
)
;
await
AddonTestUtils
.
promiseRestartManager
(
{
earlyStartup
:
false
}
)
;
await
extension
.
awaitStartup
(
)
;
AddonTestUtils
.
notifyEarlyStartup
(
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
false
persisted
:
false
}
)
;
AddonTestUtils
.
notifyLateStartup
(
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
primed
:
false
persisted
:
true
}
)
;
await
extension
.
unload
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
add_task
(
async
function
test_non_background_context_listener_not_persisted
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
background
(
)
{
let
listener
=
arg
=
>
browser
.
test
.
sendMessage
(
"
triggered
"
arg
)
;
browser
.
eventtest
.
onEvent1
.
addListener
(
listener
"
triggered
"
)
;
browser
.
test
.
sendMessage
(
"
bg_started
"
browser
.
runtime
.
getURL
(
"
extpage
.
html
"
)
)
;
}
files
:
{
"
extpage
.
html
"
:
<
script
src
=
"
extpage
.
js
"
>
<
/
script
>
"
extpage
.
js
"
:
function
(
)
{
let
listener
=
arg
=
>
browser
.
test
.
sendMessage
(
"
extpage
-
triggered
"
arg
)
;
browser
.
eventtest
.
onEvent2
.
addListener
(
listener
"
extpage
-
triggered
"
)
;
browser
.
runtime
.
getPlatformInfo
(
)
.
then
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
extpage_started
"
)
;
}
)
;
}
}
}
)
;
await
extension
.
startup
(
)
;
const
extpage_url
=
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
persisted
:
true
primed
:
false
}
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent2
"
{
persisted
:
false
}
)
;
const
page
=
await
ExtensionTestUtils
.
loadContentPage
(
extpage_url
)
;
await
extension
.
awaitMessage
(
"
extpage_started
"
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent2
"
{
persisted
:
false
}
)
;
await
page
.
close
(
)
;
await
extension
.
unload
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
add_task
(
{
pref_set
:
[
[
"
extensions
.
eventPages
.
enabled
"
true
]
]
}
async
function
test_startupblocking_behavior
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
manifest
:
{
background
:
{
persistent
:
false
}
}
async
background
(
)
{
let
listener2
=
(
)
=
>
browser
.
test
.
sendMessage
(
"
triggered
:
non
-
startupblocking
"
)
;
browser
.
eventtest
.
onEvent1
.
addListener
(
(
)
=
>
{
}
"
triggered
"
)
;
browser
.
eventtest2
.
onEvent2
.
addListener
(
listener2
"
triggered
"
)
;
await
browser
.
eventtest
.
testOptions
(
{
}
)
;
await
browser
.
eventtest2
.
testOptions
(
{
}
)
;
browser
.
test
.
sendMessage
(
"
bg_started
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
persisted
:
true
primed
:
false
}
)
;
assertPersistentListeners
(
extension
"
eventtest2
"
"
onEvent2
"
{
persisted
:
true
primed
:
false
}
)
;
info
(
"
Test
after
mocked
browser
restart
"
)
;
await
Promise
.
all
(
[
new
Promise
(
resolve
=
>
extension
.
extension
.
once
(
"
shutdown
"
resolve
)
)
AddonTestUtils
.
promiseShutdownManager
(
)
]
)
;
await
AddonTestUtils
.
promiseStartupManager
(
{
lateStartup
:
false
}
)
;
await
extension
.
awaitStartup
(
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
persisted
:
true
primed
:
true
}
)
;
assertPersistentListeners
(
extension
"
eventtest2
"
"
onEvent2
"
{
persisted
:
true
primed
:
false
}
)
;
AddonTestUtils
.
notifyLateStartup
(
)
;
Services
.
obs
.
notifyObservers
(
{
}
"
fire
-
eventtest
.
onEvent1
"
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
info
(
"
Test
after
terminate
background
script
"
)
;
await
extension
.
terminateBackground
(
)
;
assertPersistentListeners
(
extension
"
eventtest
"
"
onEvent1
"
{
persisted
:
true
primed
:
true
}
)
;
assertPersistentListeners
(
extension
"
eventtest2
"
"
onEvent2
"
{
persisted
:
true
primed
:
true
}
)
;
info
(
"
Notify
event
for
the
non
-
startupBlocking
API
event
"
)
;
Services
.
obs
.
notifyObservers
(
{
}
"
fire
-
eventtest2
.
onEvent2
"
)
;
await
extension
.
awaitMessage
(
"
bg_started
"
)
;
await
extension
.
awaitMessage
(
"
triggered
:
non
-
startupblocking
"
)
;
await
extension
.
unload
(
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
