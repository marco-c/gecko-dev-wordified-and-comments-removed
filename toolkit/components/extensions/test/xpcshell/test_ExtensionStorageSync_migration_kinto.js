"
use
strict
"
;
const
{
extensionStorageSync
:
rustImpl
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageSync
.
sys
.
mjs
"
)
;
const
{
extensionStorageSyncKinto
:
kintoImpl
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageSyncKinto
.
sys
.
mjs
"
)
;
Services
.
prefs
.
setBoolPref
(
"
webextensions
.
storage
.
sync
.
kinto
"
false
)
;
add_task
(
async
function
test_sync_migration
(
)
{
let
e1
=
{
id
:
"
test
mozilla
.
com
"
}
;
let
c1
=
{
extension
:
e1
callOnClose
(
)
{
}
}
;
await
kintoImpl
.
set
(
e1
{
foo
:
"
bar
"
}
c1
)
;
let
e2
=
{
id
:
"
test
-
2
mozilla
.
com
"
}
;
let
c2
=
{
extension
:
e2
callOnClose
(
)
{
}
}
;
await
kintoImpl
.
set
(
e2
{
second
:
"
2nd
"
}
c2
)
;
let
e3
=
{
id
:
"
test
-
3
mozilla
.
com
"
}
;
let
c3
=
{
extension
:
e3
callOnClose
(
)
{
}
}
;
Assert
.
deepEqual
(
await
rustImpl
.
get
(
e1
"
foo
"
c1
)
{
foo
:
"
bar
"
}
)
;
Assert
.
deepEqual
(
await
rustImpl
.
get
(
e2
null
c2
)
{
second
:
"
2nd
"
}
)
;
await
rustImpl
.
set
(
e3
{
third
:
"
3rd
"
}
c3
)
;
Assert
.
deepEqual
(
await
rustImpl
.
get
(
e3
null
c3
)
{
third
:
"
3rd
"
}
)
;
Assert
.
deepEqual
(
await
kintoImpl
.
get
(
e3
null
c3
)
{
}
)
;
await
kintoImpl
.
clear
(
e1
c1
)
;
await
kintoImpl
.
clear
(
e2
c2
)
;
await
kintoImpl
.
clear
(
e3
c3
)
;
await
rustImpl
.
clear
(
e1
c1
)
;
await
rustImpl
.
clear
(
e2
c2
)
;
await
rustImpl
.
clear
(
e3
c3
)
;
}
)
;
add_task
(
async
function
test_sync_migration_delgates
(
)
{
let
e1
=
{
id
:
"
test
mozilla
.
com
"
}
;
let
c1
=
{
extension
:
e1
callOnClose
(
)
{
}
}
;
await
kintoImpl
.
set
(
e1
{
foo
:
"
bar
"
}
c1
)
;
Assert
.
deepEqual
(
rustImpl
.
get
(
e1
null
c1
)
{
}
)
;
info
(
"
Setting
migration
failure
flag
to
ensure
we
delegate
to
kinto
implementation
"
)
;
rustImpl
.
migrationOk
=
false
;
Assert
.
deepEqual
(
await
rustImpl
.
get
(
e1
null
c1
)
{
foo
:
"
bar
"
}
)
;
await
rustImpl
.
set
(
e1
{
foo
:
"
foo
"
}
c1
)
;
Assert
.
deepEqual
(
await
kintoImpl
.
get
(
e1
null
c1
)
{
foo
:
"
foo
"
}
)
;
Assert
.
equal
(
await
rustImpl
.
getBytesInUse
(
e1
null
c1
)
8
)
;
await
rustImpl
.
remove
(
e1
"
foo
"
c1
)
;
Assert
.
deepEqual
(
await
kintoImpl
.
get
(
e1
null
c1
)
{
}
)
;
await
rustImpl
.
set
(
e1
{
foo
:
"
foo
"
}
c1
)
;
Assert
.
deepEqual
(
await
kintoImpl
.
get
(
e1
null
c1
)
{
foo
:
"
foo
"
}
)
;
await
rustImpl
.
clear
(
e1
c1
)
;
Assert
.
deepEqual
(
await
kintoImpl
.
get
(
e1
null
c1
)
{
}
)
;
}
)
;
