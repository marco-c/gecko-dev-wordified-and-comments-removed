"
use
strict
"
;
const
server
=
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
server
.
registerPathHandler
(
"
/
beforehey
"
(
)
=
>
{
}
)
;
server
.
registerPathHandler
(
"
/
hey
"
(
request
response
)
=
>
{
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
;
charset
=
utf
-
8
"
)
;
response
.
write
(
"
<
html
class
=
'
start
'
>
"
)
;
}
)
;
async
function
disableContentScriptPreloading
(
contentPage
)
{
await
contentPage
.
spawn
(
[
]
(
)
=
>
{
const
{
ExtensionProcessScript
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionProcessScript
.
sys
.
mjs
"
)
;
Assert
.
equal
(
typeof
ExtensionProcessScript
.
preloadContentScript
"
function
"
"
ExtensionProcessScript
.
preloadContentScript
available
to
monkey
-
patch
"
)
;
ExtensionProcessScript
.
preloadContentScript
=
(
)
=
>
{
}
;
}
)
;
}
async
function
loadContentPageWithoutPreloading
(
path
)
{
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
beforehey
"
)
;
await
disableContentScriptPreloading
(
contentPage
)
;
await
contentPage
.
loadURL
(
new
URL
(
path
"
http
:
/
/
example
.
com
/
"
)
.
href
)
;
return
contentPage
;
}
add_task
(
async
function
test_js_order
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
"
]
js
:
[
"
3
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
"
]
js
:
[
"
2
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
"
]
js
:
[
"
4
.
js
"
]
run_at
:
"
document_end
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
"
]
js
:
[
"
1
.
js
"
]
run_at
:
"
document_start
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
"
]
js
:
[
"
2
.
js
"
]
run_at
:
"
document_start
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
"
]
js
:
[
"
done_check_js
.
js
"
]
run_at
:
"
document_idle
"
}
]
}
files
:
{
"
1
.
js
"
:
"
document
.
documentElement
.
className
+
=
'
_1
'
;
"
"
2
.
js
"
:
"
document
.
documentElement
.
className
+
=
'
_2
'
;
"
"
3
.
js
"
:
"
document
.
documentElement
.
className
+
=
'
_3
'
;
"
"
4
.
js
"
:
"
document
.
documentElement
.
className
+
=
'
_4
'
;
"
"
done_check_js
.
js
"
:
(
)
=
>
{
browser
.
test
.
assertEq
(
"
start
_1
_2
_3
_2
_4
"
document
.
documentElement
.
className
"
Content
script
execution
order
should
be
:
run_at
then
array
order
"
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
loadContentPageWithoutPreloading
(
"
/
hey
"
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_css_order
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
top
"
]
css
:
[
"
start_1
.
css
"
"
start_3
.
css
"
]
js
:
[
"
check_top_start
.
js
"
]
run_at
:
"
document_start
"
}
{
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
top
"
]
css
:
[
"
end_1
.
css
"
"
end_3
.
css
"
]
js
:
[
"
check_top_end
.
js
"
]
run_at
:
"
document_end
"
}
{
all_frames
:
true
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
frame
"
]
css
:
[
"
end_1
.
css
"
]
run_at
:
"
document_end
"
}
{
all_frames
:
true
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
frame
"
]
css
:
[
"
end_2
.
css
"
]
run_at
:
"
document_end
"
}
{
all_frames
:
true
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
frame
"
]
css
:
[
"
end_3
.
css
"
]
run_at
:
"
document_end
"
}
{
all_frames
:
true
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
frame
"
]
css
:
[
"
start_1
.
css
"
]
run_at
:
"
document_start
"
}
{
all_frames
:
true
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
frame
"
]
css
:
[
"
start_2
.
css
"
]
run_at
:
"
document_start
"
}
{
all_frames
:
true
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
frame
"
]
css
:
[
"
start_3
.
css
"
]
run_at
:
"
document_start
"
}
{
all_frames
:
true
matches
:
[
"
*
:
/
/
example
.
com
/
hey
?
frame
"
]
js
:
[
"
done_check_css
.
js
"
]
run_at
:
"
document_end
"
}
]
}
files
:
{
"
start_1
.
css
"
:
"
:
root
{
-
-
css
-
start
-
12
:
1
;
-
-
css
-
start
-
1
:
1
;
}
"
"
start_2
.
css
"
:
"
:
root
{
-
-
css
-
start
-
12
:
2
;
-
-
css
-
start
-
23
:
2
;
}
"
"
start_3
.
css
"
:
"
:
root
{
-
-
css
-
start
-
23
:
3
;
-
-
css
-
run
-
at
:
start
;
}
"
"
end_1
.
css
"
:
"
:
root
{
-
-
css
-
end
-
12
:
1
;
-
-
css
-
end
-
1
:
1
;
}
"
"
end_2
.
css
"
:
"
:
root
{
-
-
css
-
end
-
12
:
2
;
-
-
css
-
end
-
23
:
2
;
}
"
"
end_3
.
css
"
:
"
:
root
{
-
-
css
-
end
-
23
:
3
;
-
-
css
-
run
-
at
:
end
;
}
"
"
check_top_start
.
js
"
:
(
)
=
>
{
const
style
=
getComputedStyle
(
document
.
documentElement
)
;
browser
.
test
.
assertEq
(
"
1
"
style
.
getPropertyValue
(
"
-
-
css
-
start
-
1
"
)
"
start_1
.
css
applied
at
document_start
"
)
;
browser
.
test
.
assertEq
(
"
"
style
.
getPropertyValue
(
"
-
-
css
-
end
-
1
"
)
"
end_1
.
css
does
not
apply
at
document_start
"
)
;
browser
.
test
.
sendMessage
(
"
done
:
check_top_start
"
)
;
}
"
check_top_end
.
js
"
:
(
)
=
>
{
const
style
=
getComputedStyle
(
document
.
documentElement
)
;
browser
.
test
.
assertEq
(
"
1
"
style
.
getPropertyValue
(
"
-
-
css
-
end
-
1
"
)
"
end_1
.
css
applied
at
document_end
"
)
;
browser
.
test
.
sendMessage
(
"
done
:
check_top_end
"
)
;
}
"
done_check_css
.
js
"
:
(
)
=
>
{
const
style
=
getComputedStyle
(
document
.
documentElement
)
;
let
expectations
=
[
[
"
-
-
css
-
start
-
1
"
"
1
"
]
[
"
-
-
css
-
start
-
12
"
"
2
"
]
[
"
-
-
css
-
start
-
23
"
"
3
"
]
[
"
-
-
css
-
end
-
1
"
"
1
"
]
[
"
-
-
css
-
end
-
12
"
"
2
"
]
[
"
-
-
css
-
end
-
23
"
"
3
"
]
[
"
-
-
css
-
run
-
at
"
"
end
"
]
]
;
for
(
let
[
cssVar
expected
]
of
expectations
)
{
browser
.
test
.
assertEq
(
expected
style
.
getPropertyValue
(
cssVar
)
Got
expected
css
order
:
{
cssVar
}
should
be
{
expected
}
)
;
}
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
}
}
)
;
await
extension
.
startup
(
)
;
let
contentPage
=
await
loadContentPageWithoutPreloading
(
"
/
hey
?
top
"
)
;
await
extension
.
awaitMessage
(
"
done
:
check_top_start
"
)
;
await
extension
.
awaitMessage
(
"
done
:
check_top_end
"
)
;
await
contentPage
.
spawn
(
[
extension
.
id
]
async
extensionId
=
>
{
let
{
document
}
=
this
.
content
;
let
style
=
this
.
content
.
getComputedStyle
(
document
.
documentElement
)
;
Assert
.
equal
(
style
.
getPropertyValue
(
"
-
-
css
-
run
-
at
"
)
"
end
"
"
end_3
.
css
was
the
last
style
to
apply
"
)
;
const
{
ExtensionProcessScript
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionProcessScript
.
sys
.
mjs
"
)
;
let
extChild
=
ExtensionProcessScript
.
getExtensionChild
(
extensionId
)
;
let
cssCache
=
extChild
.
authorCSS
;
Assert
.
deepEqual
(
Array
.
from
(
cssCache
.
keys
(
)
k
=
>
k
.
split
(
"
/
"
)
.
pop
(
)
)
[
"
start_1
.
css
"
"
start_3
.
css
"
"
end_1
.
css
"
"
end_3
.
css
"
]
"
CSSCache
should
contain
all
stylesheets
that
loaded
in
?
top
"
)
;
let
f
=
document
.
createElement
(
"
iframe
"
)
;
f
.
src
=
"
http
:
/
/
example
.
com
/
hey
?
frame
"
;
await
new
Promise
(
resolve
=
>
{
f
.
onload
=
resolve
;
document
.
body
.
append
(
f
)
;
}
)
;
style
=
f
.
contentWindow
.
getComputedStyle
(
f
.
contentDocument
.
documentElement
)
;
Assert
.
equal
(
style
.
getPropertyValue
(
"
-
-
css
-
start
-
1
"
)
"
1
"
"
start_1
.
css
(
cached
)
applies
before
frame
.
onload
"
)
;
Assert
.
equal
(
style
.
getPropertyValue
(
"
-
-
css
-
start
-
12
"
)
"
2
"
"
start_2
.
css
(
not
cached
)
applies
before
frame
.
onload
"
)
;
Assert
.
equal
(
style
.
getPropertyValue
(
"
-
-
css
-
start
-
23
"
)
"
3
"
"
start_3
.
css
(
cached
blocked
on
start_2
.
css
)
applies
before
frame
.
onload
"
)
;
Assert
.
equal
(
style
.
getPropertyValue
(
"
-
-
css
-
end
-
1
"
)
"
1
"
"
end_1
.
css
(
cached
)
applies
before
frame
.
onload
"
)
;
Assert
.
equal
(
style
.
getPropertyValue
(
"
-
-
css
-
end
-
23
"
)
"
"
"
end_3
.
css
(
cached
blocked
on
end_2
.
css
)
does
not
block
frame
.
onload
"
)
;
}
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
contentPage
.
spawn
(
[
extension
.
id
]
extensionId
=
>
{
const
{
ExtensionProcessScript
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionProcessScript
.
sys
.
mjs
"
)
;
let
extChild
=
ExtensionProcessScript
.
getExtensionChild
(
extensionId
)
;
let
cssCache
=
extChild
.
authorCSS
;
Assert
.
deepEqual
(
Array
.
from
(
cssCache
.
keys
(
)
k
=
>
k
.
split
(
"
/
"
)
.
pop
(
)
)
[
"
start_1
.
css
"
"
start_3
.
css
"
"
end_1
.
css
"
"
end_3
.
css
"
"
start_2
.
css
"
"
end_2
.
css
"
]
"
CSSCache
should
contain
all
stylesheets
that
loaded
in
?
top
and
?
frame
"
)
;
}
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
