"
use
strict
"
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
manifestV3
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
)
;
}
)
;
const
server
=
createHttpServer
(
{
hosts
:
[
"
127
.
0
.
0
.
1
"
"
127
.
0
.
0
.
2
"
]
}
)
;
server
.
registerPathHandler
(
"
/
page
.
html
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Access
-
Control
-
Allow
-
Origin
"
"
*
"
)
;
}
)
;
server
.
registerPathHandler
(
"
/
return_headers
"
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
setHeader
(
"
Access
-
Control
-
Allow
-
Origin
"
"
*
"
)
;
if
(
request
.
method
=
=
=
"
OPTIONS
"
)
{
response
.
setHeader
(
"
Access
-
Control
-
Allow
-
Methods
"
"
GET
PUT
"
)
;
return
;
}
let
headers
=
{
}
;
for
(
let
header
of
[
"
sec
-
fetch
-
site
"
"
sec
-
fetch
-
dest
"
"
sec
-
fetch
-
mode
"
"
sec
-
fetch
-
user
"
]
)
{
if
(
request
.
hasHeader
(
header
)
)
{
headers
[
header
]
=
request
.
getHeader
(
header
)
;
}
}
if
(
request
.
hasHeader
(
"
origin
"
)
)
{
headers
.
origin
=
request
.
getHeader
(
"
origin
"
)
.
replace
(
/
moz
-
extension
:
\
/
\
/
[
^
\
/
]
+
/
"
moz
-
extension
:
/
/
<
placeholder
>
"
)
;
}
response
.
write
(
JSON
.
stringify
(
headers
)
)
;
}
)
;
async
function
contentScript
(
)
{
let
content_fetch
;
if
(
browser
.
runtime
.
getManifest
(
)
.
manifest_version
=
=
=
2
)
{
content_fetch
=
content
.
fetch
;
}
else
{
browser
.
test
.
assertEq
(
typeof
content
"
undefined
"
"
no
.
content
in
MV3
"
)
;
content_fetch
=
window
.
fetch
.
bind
(
window
)
;
}
let
results
=
await
Promise
.
allSettled
(
[
fetch
(
"
http
:
/
/
127
.
0
.
0
.
1
/
return_headers
"
)
.
then
(
res
=
>
res
.
json
(
)
)
content_fetch
(
"
http
:
/
/
127
.
0
.
0
.
1
/
return_headers
"
)
.
then
(
res
=
>
res
.
json
(
)
)
content_fetch
(
"
http
:
/
/
127
.
0
.
0
.
2
/
return_headers
"
)
.
then
(
res
=
>
res
.
json
(
)
)
fetch
(
"
http
:
/
/
127
.
0
.
0
.
2
/
return_headers
"
)
.
then
(
res
=
>
res
.
json
(
)
)
fetch
(
"
http
:
/
/
127
.
0
.
0
.
2
/
return_headers
"
{
method
:
"
PUT
"
}
)
.
then
(
res
=
>
res
.
json
(
)
)
]
)
;
results
=
results
.
map
(
(
{
value
reason
}
)
=
>
value
?
?
reason
.
message
)
;
browser
.
test
.
sendMessage
(
"
content_results
"
results
)
;
}
async
function
runSecFetchTest
(
test
)
{
let
data
=
{
async
background
(
)
{
let
site
=
await
new
Promise
(
resolve
=
>
{
browser
.
test
.
onMessage
.
addListener
(
msg
=
>
{
resolve
(
msg
)
;
}
)
;
}
)
;
let
results
=
await
Promise
.
all
(
[
fetch
(
{
site
}
/
return_headers
)
.
then
(
res
=
>
res
.
json
(
)
)
fetch
(
{
site
}
/
return_headers
{
method
:
"
PUT
"
}
)
.
then
(
res
=
>
res
.
json
(
)
)
]
)
;
browser
.
test
.
sendMessage
(
"
background_results
"
results
)
;
}
manifest
:
{
manifest_version
:
test
.
manifest_version
content_scripts
:
[
{
matches
:
[
"
http
:
/
/
127
.
0
.
0
.
2
/
*
"
]
js
:
[
"
content_script
.
js
"
]
}
]
}
files
:
{
"
content_script
.
js
"
:
contentScript
}
}
;
if
(
data
.
manifest
.
manifest_version
=
=
3
)
{
data
.
manifest
.
granted_host_permissions
=
true
;
data
.
temporarilyInstalled
=
true
;
data
.
manifest
.
host_permissions
=
[
"
http
:
/
/
127
.
0
.
0
.
2
/
*
"
]
;
}
const
site
=
"
http
:
/
/
127
.
0
.
0
.
1
"
;
if
(
test
.
permission
)
{
data
.
manifest
.
host_permissions
=
[
"
http
:
/
/
127
.
0
.
0
.
2
/
*
"
{
site
}
/
*
]
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
data
)
;
await
extension
.
startup
(
)
;
extension
.
sendMessage
(
site
)
;
let
backgroundResults
=
await
extension
.
awaitMessage
(
"
background_results
"
)
;
Assert
.
deepEqual
(
backgroundResults
test
.
expectedBackgroundHeaders
)
;
let
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
http
:
/
/
127
.
0
.
0
.
2
/
page
.
html
)
;
let
contentResults
=
await
extension
.
awaitMessage
(
"
content_results
"
)
;
Assert
.
deepEqual
(
contentResults
test
.
expectedContentHeaders
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
add_task
(
async
function
test_fetch_without_permissions_mv2
(
)
{
await
runSecFetchTest
(
{
manifest_version
:
2
permission
:
false
expectedBackgroundHeaders
:
[
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
moz
-
extension
:
/
/
<
placeholder
>
"
}
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
moz
-
extension
:
/
/
<
placeholder
>
"
}
]
expectedContentHeaders
:
[
"
NetworkError
when
attempting
to
fetch
resource
.
"
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
]
}
)
;
}
)
;
add_task
(
async
function
test_fetch_with_permissions_mv2
(
)
{
await
runSecFetchTest
(
{
manifest_version
:
2
permission
:
true
expectedBackgroundHeaders
:
[
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
moz
-
extension
:
/
/
<
placeholder
>
"
}
]
expectedContentHeaders
:
[
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
]
}
)
;
}
)
;
add_task
(
async
function
test_fetch_without_permissions_mv3
(
)
{
await
runSecFetchTest
(
{
manifest_version
:
3
permission
:
false
expectedBackgroundHeaders
:
[
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
moz
-
extension
:
/
/
<
placeholder
>
"
}
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
moz
-
extension
:
/
/
<
placeholder
>
"
}
]
expectedContentHeaders
:
[
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
]
}
)
;
}
)
;
add_task
(
async
function
test_fetch_with_permissions_mv3
(
)
{
await
runSecFetchTest
(
{
manifest_version
:
3
permission
:
true
expectedBackgroundHeaders
:
[
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
moz
-
extension
:
/
/
<
placeholder
>
"
}
]
expectedContentHeaders
:
[
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
{
"
sec
-
fetch
-
site
"
:
"
cross
-
site
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
}
{
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
mode
"
:
"
cors
"
"
sec
-
fetch
-
dest
"
:
"
empty
"
origin
:
"
http
:
/
/
127
.
0
.
0
.
2
"
}
]
}
)
;
}
)
;
