"
use
strict
"
;
const
{
ExtensionAPI
}
=
ExtensionCommon
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
const
API
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
mockExtensionAPI
:
{
methodAsync
:
(
)
=
>
{
return
"
some
-
value
"
;
}
}
}
;
}
}
;
const
SCHEMA
=
[
{
namespace
:
"
mockExtensionAPI
"
functions
:
[
{
name
:
"
methodAsync
"
type
:
"
function
"
async
:
true
parameters
:
[
{
name
:
"
arg
"
type
:
"
string
"
enum
:
[
"
THE_ONLY_VALUE_ALLOWED
"
]
}
]
}
]
}
]
;
add_setup
(
async
function
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
true
)
;
ExtensionParent
.
apiManager
.
registerModules
(
{
mockExtensionAPI
:
{
schema
:
data
:
{
JSON
.
stringify
(
SCHEMA
)
}
scopes
:
[
"
addon_parent
"
]
paths
:
[
[
"
mockExtensionAPI
"
]
]
url
:
URL
.
createObjectURL
(
new
Blob
(
[
this
.
mockExtensionAPI
=
{
API
.
toString
(
)
}
]
)
)
}
}
)
;
}
)
;
add_task
(
async
function
test_schema_error_is_propagated_to_extension
(
)
{
await
runExtensionAPITest
(
"
should
throw
an
extension
error
"
{
backgroundScript
(
)
{
return
browser
.
mockExtensionAPI
.
methodAsync
(
"
UNEXPECTED_VALUE
"
)
;
}
mockAPIRequestHandler
(
policy
request
)
{
return
this
.
_handleAPIRequest_orig
(
policy
request
)
;
}
assertResults
(
{
testError
}
)
{
Assert
.
ok
(
/
Invalid
enumeration
value
"
UNEXPECTED_VALUE
"
/
.
test
(
testError
.
message
)
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_schema_error_no_error_with_expected_value
(
)
{
await
runExtensionAPITest
(
"
should
not
throw
any
error
"
{
backgroundScript
(
)
{
return
browser
.
mockExtensionAPI
.
methodAsync
(
"
THE_ONLY_VALUE_ALLOWED
"
)
;
}
mockAPIRequestHandler
(
policy
request
)
{
return
this
.
_handleAPIRequest_orig
(
policy
request
)
;
}
assertResults
(
{
testError
testResult
}
)
{
Assert
.
deepEqual
(
testError
undefined
)
;
Assert
.
deepEqual
(
testResult
"
some
-
value
"
)
;
}
}
)
;
}
)
;
