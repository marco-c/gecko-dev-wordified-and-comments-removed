"
use
strict
"
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
let
{
Management
}
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
;
let
nestedNamespaceJson
=
[
{
"
namespace
"
:
"
backgroundAPI
.
testnamespace
"
"
functions
"
:
[
{
"
name
"
:
"
create
"
"
type
"
:
"
function
"
"
parameters
"
:
[
{
"
name
"
:
"
title
"
"
type
"
:
"
string
"
}
]
}
]
}
{
"
namespace
"
:
"
noBackgroundAPI
.
testnamespace
"
"
functions
"
:
[
{
"
name
"
:
"
create
"
"
type
"
:
"
function
"
"
parameters
"
:
[
{
"
name
"
:
"
title
"
"
type
"
:
"
string
"
}
]
}
]
}
]
;
add_task
(
function
*
testSchemaAPIInjection
(
)
{
let
url
=
"
data
:
"
+
JSON
.
stringify
(
nestedNamespaceJson
)
;
yield
Schemas
.
load
(
url
)
;
Management
.
registerSchemaAPI
(
"
noBackgroundAPI
.
testnamespace
"
(
extension
context
)
=
>
{
if
(
context
.
type
!
=
=
"
background
"
)
{
return
{
noBackgroundAPI
:
{
testnamespace
:
{
create
(
title
)
{
}
}
}
}
;
}
return
null
;
}
)
;
Management
.
registerSchemaAPI
(
"
backgroundAPI
.
testnamespace
"
(
extension
context
)
=
>
{
if
(
context
.
type
=
=
=
"
background
"
)
{
return
{
backgroundAPI
:
{
testnamespace
:
{
create
(
title
)
{
return
title
;
}
}
}
}
;
}
return
null
;
}
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
(
)
{
if
(
browser
.
noBackgroundAPI
)
{
browser
.
test
.
notifyFail
(
"
skipAPIonNull
.
done
"
)
;
}
else
{
const
res
=
browser
.
backgroundAPI
.
testnamespace
.
create
(
"
param
-
value
"
)
;
browser
.
test
.
assertEq
(
"
param
-
value
"
res
"
Got
the
expected
result
from
the
fake
API
method
"
)
;
browser
.
test
.
notifyPass
(
"
skipAPIonNull
.
done
"
)
;
}
}
}
)
;
yield
extension
.
startup
(
)
;
yield
extension
.
awaitFinish
(
"
skipAPIonNull
.
done
"
)
;
yield
extension
.
unload
(
)
;
}
)
;
