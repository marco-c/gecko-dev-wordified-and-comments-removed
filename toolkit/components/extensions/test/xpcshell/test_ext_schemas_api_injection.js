"
use
strict
"
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
let
{
BaseContext
SchemaAPIManager
}
=
ExtensionUtils
;
let
nestedNamespaceJson
=
[
{
"
namespace
"
:
"
backgroundAPI
.
testnamespace
"
"
functions
"
:
[
{
"
name
"
:
"
create
"
"
type
"
:
"
function
"
"
parameters
"
:
[
{
"
name
"
:
"
title
"
"
type
"
:
"
string
"
}
]
"
returns
"
:
{
"
type
"
:
"
string
"
}
}
]
}
{
"
namespace
"
:
"
noBackgroundAPI
.
testnamespace
"
"
functions
"
:
[
{
"
name
"
:
"
create
"
"
type
"
:
"
function
"
"
parameters
"
:
[
{
"
name
"
:
"
title
"
"
type
"
:
"
string
"
}
]
}
]
}
]
;
let
global
=
this
;
class
StubContext
extends
BaseContext
{
constructor
(
)
{
let
fakeExtension
=
{
id
:
"
test
web
.
extension
"
}
;
super
(
"
addon_child
"
fakeExtension
)
;
this
.
sandbox
=
Cu
.
Sandbox
(
global
)
;
this
.
viewType
=
"
background
"
;
}
get
cloneScope
(
)
{
return
this
.
sandbox
;
}
}
add_task
(
function
*
testSchemaAPIInjection
(
)
{
let
url
=
"
data
:
"
+
JSON
.
stringify
(
nestedNamespaceJson
)
;
yield
Schemas
.
load
(
url
)
;
let
apiManager
=
new
SchemaAPIManager
(
"
addon
"
)
;
apiManager
.
registerSchemaAPI
(
"
noBackgroundAPI
.
testnamespace
"
"
addon_child
"
context
=
>
{
return
null
;
}
)
;
apiManager
.
registerSchemaAPI
(
"
backgroundAPI
.
testnamespace
"
"
addon_child
"
context
=
>
{
if
(
context
.
viewType
=
=
=
"
background
"
)
{
return
{
backgroundAPI
:
{
testnamespace
:
{
create
(
title
)
{
return
title
;
}
}
}
}
;
}
return
null
;
}
)
;
let
context
=
new
StubContext
(
)
;
let
browserObj
=
{
}
;
apiManager
.
generateAPIs
(
context
browserObj
)
;
do_check_eq
(
browserObj
.
noBackgroundAPI
undefined
)
;
const
res
=
browserObj
.
backgroundAPI
.
testnamespace
.
create
(
"
param
-
value
"
)
;
do_check_eq
(
res
"
param
-
value
"
)
;
}
)
;
