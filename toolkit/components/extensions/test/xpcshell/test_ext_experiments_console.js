"
use
strict
"
;
let
consoleTesterExperimentalAPIS
=
{
consoleTester
:
{
schema
:
"
schema
.
json
"
parent
:
{
scopes
:
[
"
addon_parent
"
]
script
:
"
parent
.
js
"
paths
:
[
[
"
consoleTester
"
]
]
}
child
:
{
scopes
:
[
"
addon_child
"
]
script
:
"
child
.
js
"
paths
:
[
[
"
consoleTester
"
]
]
}
}
}
;
let
consoleTesterFiles
=
{
"
schema
.
json
"
:
JSON
.
stringify
(
[
{
namespace
:
"
consoleTester
"
functions
:
[
{
name
:
"
testConsoleChild
"
type
:
"
function
"
parameters
:
[
]
returns
:
{
type
:
"
array
"
items
:
{
type
:
"
string
"
}
}
}
{
name
:
"
testConsoleParent
"
type
:
"
function
"
parameters
:
[
{
type
:
"
function
"
name
:
"
callback
"
parameters
:
[
{
type
:
"
array
"
items
:
{
type
:
"
string
"
}
}
]
}
]
async
:
"
callback
"
}
{
name
:
"
testStringifyGlobalInChild
"
type
:
"
function
"
parameters
:
[
]
returns
:
{
type
:
"
string
"
}
}
]
}
]
)
"
common
.
js
"
:
(
)
=
>
{
globalThis
.
consoleTester_testConsole
=
context
=
>
{
let
capturedLogs
=
[
]
;
let
origDump
=
console
.
dump
;
console
.
dump
=
function
(
msg
)
{
capturedLogs
.
push
(
msg
)
;
return
origDump
.
apply
(
this
arguments
)
;
}
;
try
{
console
.
log
(
"
testConsole_Hello
"
)
;
console
.
log
(
context
)
;
console
.
log
(
"
testConsole_Bye
"
)
;
}
finally
{
console
.
dump
=
origDump
;
}
return
capturedLogs
;
}
;
}
"
parent
.
js
"
:
(
)
=
>
{
this
.
consoleTester
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
if
(
!
globalThis
.
consoleTester_testConsole
)
{
const
mozExtJsFile
=
context
.
extension
.
getURL
(
"
common
.
js
"
)
;
Services
.
scriptloader
.
loadSubScript
(
mozExtJsFile
globalThis
)
;
}
return
{
consoleTester
:
{
testConsoleParent
(
)
{
return
globalThis
.
consoleTester_testConsole
(
context
)
;
}
}
}
;
}
}
;
}
"
child
.
js
"
:
(
)
=
>
{
this
.
consoleTester
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
if
(
!
globalThis
.
consoleTester_testConsole
)
{
const
mozExtJsFile
=
context
.
extension
.
getURL
(
"
common
.
js
"
)
;
Services
.
scriptloader
.
loadSubScript
(
mozExtJsFile
globalThis
)
;
}
return
{
consoleTester
:
{
testConsoleChild
(
)
{
let
logs
=
globalThis
.
consoleTester_testConsole
(
context
)
;
return
Cu
.
cloneInto
(
logs
context
.
cloneScope
)
;
}
testStringifyGlobalInChild
(
)
{
try
{
return
JSON
.
stringify
(
global
)
;
}
catch
(
e
)
{
return
String
(
e
)
;
}
}
}
}
;
}
}
;
}
}
;
add_task
(
async
function
test_console_log_context_in_experiment_sandbox
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
isPrivileged
:
true
manifest
:
{
experiment_apis
:
consoleTesterExperimentalAPIS
}
files
:
consoleTesterFiles
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
async
msg
=
>
{
browser
.
test
.
assertEq
(
"
start
"
msg
"
Expected
message
"
)
;
function
assertStartsWith
(
actual
expectedStart
message
)
{
browser
.
test
.
assertTrue
(
actual
.
startsWith
(
expectedStart
)
{
message
}
-
Starts
with
{
expectedStart
}
given
actual
:
{
actual
}
)
;
}
let
logs
=
await
browser
.
consoleTester
.
testConsoleParent
(
)
;
browser
.
test
.
assertEq
(
3
logs
.
length
"
Expected
3
log
entries
"
)
;
browser
.
test
.
assertEq
(
logs
[
0
]
"
console
.
log
:
WebExtensions
:
testConsole_Hello
\
n
"
"
First
message
in
parent
"
)
;
assertStartsWith
(
logs
[
1
]
"
console
.
log
:
WebExtensions
:
ExtensionPageContextParent
"
"
Second
message
in
parent
serialization
of
context
"
)
;
browser
.
test
.
assertEq
(
logs
[
2
]
"
console
.
log
:
WebExtensions
:
testConsole_Bye
\
n
"
"
Last
message
in
parent
"
)
;
logs
=
browser
.
consoleTester
.
testConsoleChild
(
)
;
browser
.
test
.
assertEq
(
3
logs
.
length
"
Expected
3
log
entries
"
)
;
browser
.
test
.
assertEq
(
logs
[
0
]
"
console
.
log
:
WebExtensions
:
testConsole_Hello
\
n
"
"
First
message
in
child
"
)
;
assertStartsWith
(
logs
[
1
]
"
console
.
log
:
WebExtensions
:
ExtensionPageContextChild
"
"
Second
message
in
child
serialization
of
context
"
)
;
browser
.
test
.
assertEq
(
logs
[
2
]
"
console
.
log
:
WebExtensions
:
testConsole_Bye
\
n
"
"
Last
message
in
child
"
)
;
browser
.
test
.
assertEq
(
browser
.
consoleTester
.
testStringifyGlobalInChild
(
)
"
TypeError
:
cyclic
object
value
"
"
JSON
.
stringify
(
global
)
should
throw
"
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
)
;
}
}
)
;
await
extension
.
startup
(
)
;
extension
.
sendMessage
(
"
start
"
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
extension
.
unload
(
)
;
}
)
;
