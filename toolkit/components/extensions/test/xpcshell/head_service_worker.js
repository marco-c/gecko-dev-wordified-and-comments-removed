"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ExtensionCommon
:
"
resource
:
/
/
gre
/
modules
/
ExtensionCommon
.
jsm
"
}
)
;
Services
.
obs
.
notifyObservers
(
null
"
profile
-
after
-
change
"
"
force
-
serviceworkerrestart
-
init
"
)
;
class
TestWorkerWatcher
extends
ExtensionCommon
.
EventEmitter
{
JS_ACTOR_NAME
=
"
TestWorkerWatcher
"
;
constructor
(
dataRelPath
=
"
.
/
data
"
)
{
super
(
)
;
this
.
dataRelPath
=
dataRelPath
;
this
.
extensionProcess
=
null
;
this
.
extensionProcessActor
=
null
;
this
.
registerProcessActor
(
)
;
this
.
getAndWatchExtensionProcess
(
)
;
Services
.
obs
.
addObserver
(
this
"
ipc
:
content
-
created
"
)
;
Services
.
obs
.
addObserver
(
this
"
ipc
:
content
-
shutdown
"
)
;
}
async
destroy
(
)
{
await
this
.
stopWatchingWorkers
(
)
;
ChromeUtils
.
unregisterProcessActor
(
this
.
JS_ACTOR_NAME
)
;
}
get
swm
(
)
{
return
Cc
[
"
mozilla
.
org
/
serviceworkers
/
manager
;
1
"
]
.
getService
(
Ci
.
nsIServiceWorkerManager
)
;
}
getRegistration
(
extension
)
{
return
this
.
swm
.
getRegistrationByPrincipal
(
extension
.
extension
.
principal
extension
.
extension
.
principal
.
spec
)
;
}
watchExtensionServiceWorker
(
extension
)
{
const
promiseWorkerSpawned
=
this
.
waitForEvent
(
"
worker
-
spawned
"
extension
)
;
const
promiseWorkerTerminated
=
this
.
waitForEvent
(
"
worker
-
terminated
"
extension
)
;
const
terminate
=
(
)
=
>
{
promiseWorkerTerminated
.
then
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
serviceWorkers
.
idle_timeout
"
)
;
}
)
;
Services
.
prefs
.
setIntPref
(
"
dom
.
serviceWorkers
.
idle_timeout
"
0
)
;
const
swReg
=
this
.
getRegistration
(
extension
)
;
swReg
.
activeWorker
?
.
attachDebugger
(
)
;
swReg
.
activeWorker
?
.
detachDebugger
(
)
;
return
promiseWorkerTerminated
;
}
;
return
{
promiseWorkerSpawned
promiseWorkerTerminated
terminate
}
;
}
waitForEvent
(
event
extension
)
{
return
new
Promise
(
resolve
=
>
{
const
listener
=
(
_eventName
data
)
=
>
{
if
(
!
data
.
workerUrl
.
startsWith
(
extension
.
extension
?
.
principal
.
spec
)
)
{
return
;
}
this
.
off
(
event
listener
)
;
resolve
(
data
)
;
}
;
this
.
on
(
event
listener
)
;
}
)
;
}
registerProcessActor
(
)
{
const
{
JS_ACTOR_NAME
}
=
this
;
const
getModuleURI
=
fileName
=
>
Services
.
io
.
newFileURI
(
do_get_file
(
{
this
.
dataRelPath
}
/
{
fileName
}
)
)
.
spec
;
ChromeUtils
.
registerProcessActor
(
JS_ACTOR_NAME
{
parent
:
{
moduleURI
:
getModuleURI
(
{
JS_ACTOR_NAME
}
Parent
.
jsm
)
}
child
:
{
moduleURI
:
getModuleURI
(
{
JS_ACTOR_NAME
}
Child
.
jsm
)
}
}
)
;
}
startWatchingWorkers
(
)
{
if
(
!
this
.
extensionProcessActor
)
{
return
;
}
this
.
extensionProcessActor
.
eventEmitter
=
this
;
return
this
.
extensionProcessActor
.
sendQuery
(
"
Test
:
StartWatchingWorkers
"
)
;
}
stopWatchingWorkers
(
)
{
if
(
!
this
.
extensionProcessActor
)
{
return
;
}
this
.
extensionProcessActor
.
eventEmitter
=
null
;
return
this
.
extensionProcessActor
.
sendQuery
(
"
Test
:
StopWatchingWorkers
"
)
;
}
getAndWatchExtensionProcess
(
)
{
const
extensionProcess
=
ChromeUtils
.
getAllDOMProcesses
(
)
.
find
(
p
=
>
{
return
p
.
remoteType
=
=
=
"
extension
"
;
}
)
;
if
(
extensionProcess
!
=
=
this
.
extensionProcess
)
{
this
.
extensionProcess
=
extensionProcess
;
this
.
extensionProcessActor
=
extensionProcess
?
extensionProcess
.
getActor
(
this
.
JS_ACTOR_NAME
)
:
null
;
this
.
startWatchingWorkers
(
)
;
}
}
observe
(
subject
topic
childIDString
)
{
this
.
getAndWatchExtensionProcess
(
)
;
}
}
