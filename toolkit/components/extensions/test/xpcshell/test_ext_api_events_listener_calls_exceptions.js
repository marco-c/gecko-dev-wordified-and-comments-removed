"
use
strict
"
;
const
{
ExtensionStorageIDB
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageIDB
.
jsm
"
)
;
const
server
=
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
server
.
registerDirectory
(
"
/
data
/
"
do_get_file
(
"
data
"
)
)
;
server
.
registerPathHandler
(
"
/
test
-
page
.
html
"
(
req
res
)
=
>
{
res
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
false
)
;
res
.
write
(
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
script
>
window
.
onerror
=
(
evt
)
=
>
{
browser
.
test
.
log
(
"
webpage
page
got
error
event
error
property
set
to
:
"
+
String
(
evt
.
error
)
+
"
:
:
"
+
evt
.
error
?
.
stack
+
"
\
\
n
"
)
;
window
.
postMessage
(
{
message
:
evt
.
message
sourceName
:
evt
.
filename
lineNumber
:
evt
.
lineno
columnNumber
:
evt
.
colno
errorIsDefined
:
!
!
evt
.
error
}
"
*
"
)
;
}
;
window
.
errorListenerReady
=
true
;
<
/
script
>
<
/
body
>
<
/
html
>
)
;
}
)
;
add_task
(
async
function
test_api_listener_call_exception
(
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
storage
"
"
webRequest
"
"
webRequestBlocking
"
"
http
:
/
/
example
.
com
/
*
"
]
content_scripts
:
[
{
js
:
[
"
contentscript
.
js
"
]
matches
:
[
"
http
:
/
/
example
.
com
/
test
-
page
.
html
"
]
run_at
:
"
document_start
"
}
]
}
files
:
{
"
contentscript
.
js
"
:
(
)
=
>
{
window
.
onload
=
(
)
=
>
{
browser
.
test
.
assertEq
(
window
.
wrappedJSObject
.
errorListenerReady
true
"
Got
an
onerror
listener
on
the
content
page
side
"
)
;
browser
.
test
.
sendMessage
(
"
contentscript
-
attached
"
)
;
}
;
window
.
addEventListener
(
"
message
"
evt
=
>
{
browser
.
test
.
fail
(
Webpage
got
notified
on
an
exception
raised
from
the
content
script
:
{
JSON
.
stringify
(
evt
.
data
)
}
)
;
}
)
;
window
.
addEventListener
(
"
error
"
evt
=
>
{
const
errorDetails
=
{
message
:
evt
.
message
sourceName
:
evt
.
filename
lineNumber
:
evt
.
lineno
columnNumber
:
evt
.
colno
errorIsDefined
:
!
!
evt
.
error
}
;
browser
.
test
.
fail
(
Webpage
got
notified
on
an
exception
raised
from
the
content
script
:
{
JSON
.
stringify
(
errorDetails
)
}
)
;
}
)
;
const
throwAnError
=
(
)
=
>
{
throw
new
Error
(
"
test
-
contentscript
-
error
"
)
;
}
;
browser
.
storage
.
sync
.
onChanged
.
addListener
(
(
)
=
>
{
throwAnError
(
)
;
}
)
;
browser
.
storage
.
local
.
onChanged
.
addListener
(
(
)
=
>
{
throw
undefined
;
}
)
;
}
"
extpage
.
html
"
:
<
!
DOCTYPE
html
>
<
script
src
=
"
extpage
.
js
"
>
<
/
script
>
"
extpage
.
js
"
:
(
)
=
>
{
window
.
addEventListener
(
"
error
"
evt
=
>
{
browser
.
test
.
log
(
Extension
page
got
error
event
error
property
set
to
:
{
evt
.
error
}
:
:
{
evt
.
error
?
.
stack
}
\
n
)
;
const
errorDetails
=
{
message
:
evt
.
message
sourceName
:
evt
.
filename
lineNumber
:
evt
.
lineno
columnNumber
:
evt
.
colno
errorIsDefined
:
!
!
evt
.
error
}
;
browser
.
test
.
log
(
extension
page
got
notified
on
an
exception
raised
from
the
API
event
listener
:
{
JSON
.
stringify
(
errorDetails
)
}
)
;
}
)
;
browser
.
webRequest
.
onBeforeRequest
.
addListener
(
(
)
=
>
{
throw
new
Error
(
Mock
webRequest
listener
exception
)
;
}
{
urls
:
[
"
http
:
/
/
example
.
com
/
data
/
*
"
]
}
[
"
blocking
"
]
)
;
const
nonError
=
{
get
message
(
)
{
browser
.
test
.
fail
(
Unexpected
extension
code
executed
)
;
}
toString
(
)
{
browser
.
test
.
fail
(
Unexpected
extension
code
executed
)
;
}
}
;
browser
.
storage
.
sync
.
onChanged
.
addListener
(
(
)
=
>
{
throw
nonError
;
}
)
;
browser
.
storage
.
local
.
onChanged
.
addListener
(
(
)
=
>
{
throw
undefined
;
}
)
;
}
}
}
)
;
await
extension
.
startup
(
)
;
const
page
=
await
ExtensionTestUtils
.
loadContentPage
(
extension
.
extension
.
baseURI
.
resolve
(
"
extpage
.
html
"
)
{
extension
}
)
;
const
prepareWaitForConsoleMessage
=
(
)
=
>
{
this
.
content
.
waitForConsoleMessage
=
new
Promise
(
resolve
=
>
{
const
currInnerWindowID
=
this
.
content
.
windowGlobalChild
?
.
innerWindowId
;
const
consoleListener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIConsoleListener
"
]
)
observe
:
message
=
>
{
if
(
message
instanceof
Ci
.
nsIScriptError
&
&
message
.
innerWindowID
=
=
=
currInnerWindowID
)
{
resolve
(
{
message
:
message
.
message
category
:
message
.
category
sourceName
:
message
.
sourceName
hasStack
:
!
!
message
.
stack
}
)
;
Services
.
console
.
unregisterListener
(
consoleListener
)
;
}
}
}
;
Services
.
console
.
registerListener
(
consoleListener
)
;
}
)
;
}
;
const
asyncAssertConsoleMessage
=
async
(
{
targetPage
expectedErrorRegExp
expectedSourceName
shouldIncludeStack
}
)
=
>
{
const
{
message
category
sourceName
hasStack
}
=
await
targetPage
.
spawn
(
[
]
(
)
=
>
this
.
content
.
waitForConsoleMessage
)
;
ok
(
expectedErrorRegExp
.
test
(
message
)
Got
the
expected
error
message
:
{
message
}
)
;
Assert
.
deepEqual
(
{
category
sourceName
hasStack
}
{
category
:
"
content
javascript
"
sourceName
:
expectedSourceName
hasStack
:
shouldIncludeStack
}
"
Expected
category
and
sourceName
are
set
on
the
nsIScriptError
"
)
;
}
;
{
info
(
"
Test
exception
raised
by
webRequest
listener
"
)
;
const
expectedErrorRegExp
=
new
RegExp
(
Error
:
Mock
webRequest
listener
exception
)
;
const
expectedSourceName
=
extension
.
extension
.
baseURI
.
resolve
(
"
extpage
.
js
"
)
;
await
page
.
spawn
(
[
]
prepareWaitForConsoleMessage
)
;
await
ExtensionTestUtils
.
fetch
(
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
com
/
data
/
file_sample
.
html
"
)
;
await
asyncAssertConsoleMessage
(
{
targetPage
:
page
expectedErrorRegExp
expectedSourceName
shouldIncludeStack
:
false
}
)
;
}
{
info
(
"
Test
exception
raised
by
storage
.
sync
listener
"
)
;
const
expectedErrorRegExp
=
new
RegExp
(
uncaught
exception
:
\
\
[
object
Object
\
\
]
)
;
const
expectedSourceName
=
extension
.
extension
.
baseURI
.
resolve
(
"
extpage
.
html
"
)
;
await
page
.
spawn
(
[
]
prepareWaitForConsoleMessage
)
;
ExtensionParent
.
apiManager
.
global
.
extensionStorageSync
.
notifyListeners
(
extension
.
id
{
}
)
;
await
asyncAssertConsoleMessage
(
{
targetPage
:
page
expectedErrorRegExp
expectedSourceName
shouldIncludeStack
:
false
}
)
;
}
{
info
(
"
Test
exception
raised
by
storage
.
local
listener
"
)
;
const
expectedErrorRegExp
=
new
RegExp
(
uncaught
exception
:
undefined
)
;
const
expectedSourceName
=
extension
.
extension
.
baseURI
.
resolve
(
"
extpage
.
html
"
)
;
await
page
.
spawn
(
[
]
prepareWaitForConsoleMessage
)
;
ExtensionStorageIDB
.
notifyListeners
(
extension
.
id
{
}
)
;
await
asyncAssertConsoleMessage
(
{
targetPage
:
page
expectedErrorRegExp
expectedSourceName
shouldIncludeStack
:
false
}
)
;
}
await
page
.
close
(
)
;
info
(
"
Test
content
script
API
event
listeners
exception
"
)
;
const
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
"
http
:
/
/
example
.
com
/
test
-
page
.
html
"
)
;
await
extension
.
awaitMessage
(
"
contentscript
-
attached
"
)
;
{
info
(
"
Test
exception
raised
by
content
script
storage
.
sync
listener
"
)
;
const
expectedErrorRegExp
=
new
RegExp
(
Error
:
test
-
contentscript
-
error
)
;
const
expectedSourceName
=
extension
.
extension
.
baseURI
.
resolve
(
"
contentscript
.
js
"
)
;
await
contentPage
.
spawn
(
[
]
prepareWaitForConsoleMessage
)
;
ExtensionParent
.
apiManager
.
global
.
extensionStorageSync
.
notifyListeners
(
extension
.
id
{
}
)
;
await
asyncAssertConsoleMessage
(
{
targetPage
:
contentPage
expectedErrorRegExp
expectedSourceName
shouldIncludeStack
:
false
}
)
;
}
{
info
(
"
Test
exception
raised
by
content
script
storage
.
local
listener
"
)
;
const
expectedErrorRegExp
=
new
RegExp
(
uncaught
exception
:
undefined
)
;
const
expectedSourceName
=
extension
.
extension
.
baseURI
.
resolve
(
"
/
"
)
;
await
contentPage
.
spawn
(
[
]
prepareWaitForConsoleMessage
)
;
ExtensionStorageIDB
.
notifyListeners
(
extension
.
id
{
}
)
;
await
asyncAssertConsoleMessage
(
{
targetPage
:
contentPage
expectedErrorRegExp
expectedSourceName
shouldIncludeStack
:
false
}
)
;
}
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
}
)
;
