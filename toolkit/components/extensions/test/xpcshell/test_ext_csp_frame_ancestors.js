"
use
strict
"
;
const
server
=
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
"
example
.
net
"
]
}
)
;
server
.
registerPathHandler
(
"
/
parent
.
html
"
(
request
response
)
=
>
{
let
frameUrl
=
new
URLSearchParams
(
request
.
queryString
)
.
get
(
"
iframe_src
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
;
charset
=
utf
-
8
"
false
)
;
response
.
write
(
<
!
DOCTYPE
html
>
<
iframe
src
=
"
{
frameUrl
}
"
>
<
/
iframe
>
)
;
}
)
;
async
function
checkExtensionLoadInFrame
(
{
ancestorOrigins
content_security_policy
expectLoad
}
)
{
const
extensionData
=
{
manifest
:
{
content_security_policy
web_accessible_resources
:
[
"
parent
.
html
"
"
frame
.
html
"
]
}
files
:
{
"
frame
.
html
"
:
<
!
DOCTYPE
html
>
<
script
src
=
"
frame
.
js
"
>
<
/
script
>
"
frame
.
js
"
:
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
frame_load_completed
"
)
;
}
"
parent
.
html
"
:
<
!
DOCTYPE
html
>
<
body
>
<
script
src
=
"
parent
.
js
"
>
<
/
script
>
"
parent
.
js
"
:
(
)
=
>
{
let
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
new
URLSearchParams
(
location
.
search
)
.
get
(
"
iframe_src
"
)
;
document
.
body
.
append
(
iframe
)
;
}
}
}
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
extensionData
)
;
await
extension
.
startup
(
)
;
const
EXTENSION_FRAME_URL
=
moz
-
extension
:
/
/
{
extension
.
uuid
}
/
frame
.
html
;
let
topUrl
=
EXTENSION_FRAME_URL
;
for
(
let
origin
of
ancestorOrigins
)
{
if
(
origin
=
=
=
"
EXTENSION_ORIGIN
"
)
{
origin
=
moz
-
extension
:
/
/
{
extension
.
uuid
}
;
}
topUrl
=
{
origin
}
/
parent
.
html
?
iframe_src
=
{
encodeURIComponent
(
topUrl
)
}
;
}
let
cspViolationObserver
;
let
cspViolationCount
=
0
;
let
frameLoadedCount
=
0
;
let
frameLoadOrFailedPromise
=
new
Promise
(
resolve
=
>
{
extension
.
onMessage
(
"
frame_load_completed
"
(
)
=
>
{
+
+
frameLoadedCount
;
resolve
(
)
;
}
)
;
cspViolationObserver
=
{
observe
(
subject
topic
data
)
{
+
+
cspViolationCount
;
Assert
.
equal
(
data
"
frame
-
ancestors
"
"
CSP
violation
directive
"
)
;
resolve
(
)
;
}
}
;
Services
.
obs
.
addObserver
(
cspViolationObserver
"
csp
-
on
-
violate
-
policy
"
)
;
}
)
;
const
contentPage
=
await
ExtensionTestUtils
.
loadContentPage
(
topUrl
)
;
await
frameLoadOrFailedPromise
;
equal
(
await
contentPage
.
fetch
(
EXTENSION_FRAME_URL
)
extensionData
.
files
[
"
frame
.
html
"
]
"
web
-
accessible
extension
resource
can
still
be
read
with
fetch
"
)
;
Services
.
obs
.
removeObserver
(
cspViolationObserver
"
csp
-
on
-
violate
-
policy
"
)
;
await
contentPage
.
close
(
)
;
await
extension
.
unload
(
)
;
if
(
expectLoad
)
{
equal
(
cspViolationCount
0
"
Expected
no
CSP
violations
"
)
;
equal
(
frameLoadedCount
1
Frame
should
accept
ancestors
(
{
ancestorOrigins
}
)
in
CSP
:
{
content_security_policy
}
)
;
}
else
{
equal
(
cspViolationCount
1
"
Expected
CSP
violation
count
"
)
;
equal
(
frameLoadedCount
0
Frame
should
reject
one
of
the
ancestors
(
{
ancestorOrigins
}
)
in
CSP
:
{
content_security_policy
}
)
;
}
}
add_task
(
async
function
test_frame_ancestors_missing_allows_self
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
EXTENSION_ORIGIN
"
]
content_security_policy
:
"
default
-
src
'
self
'
"
expectLoad
:
true
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_self_allows_self
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
EXTENSION_ORIGIN
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
'
self
'
"
expectLoad
:
true
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_none_blocks_self
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
EXTENSION_ORIGIN
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
"
expectLoad
:
false
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_missing_allowed_in_web_page
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
com
"
]
content_security_policy
:
"
default
-
src
'
self
'
"
expectLoad
:
true
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_self_blocked_in_web_page
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
com
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
'
self
'
"
expectLoad
:
false
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_scheme_allowed_in_web_page
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
com
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
http
:
"
expectLoad
:
true
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_origin_allowed_in_web_page
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
com
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
http
:
/
/
example
.
com
"
expectLoad
:
true
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_mismatch_blocked_in_web_page
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
com
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
http
:
/
/
not
.
example
.
com
"
expectLoad
:
false
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_top_mismatch_blocked
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
com
"
"
http
:
/
/
example
.
net
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
http
:
/
/
example
.
com
"
expectLoad
:
false
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_parent_mismatch_blocked
(
)
{
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
net
"
"
http
:
/
/
example
.
com
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
ancestors
http
:
/
/
example
.
com
"
expectLoad
:
false
}
)
;
}
)
;
add_task
(
async
function
test_frame_ancestors_middle_rejected
(
)
{
if
(
!
WebExtensionPolicy
.
useRemoteWebExtensions
)
{
info
(
"
Web
pages
cannot
be
loaded
in
extension
page
without
OOP
extensions
"
)
;
return
;
}
await
checkExtensionLoadInFrame
(
{
ancestorOrigins
:
[
"
http
:
/
/
example
.
com
"
"
EXTENSION_ORIGIN
"
]
content_security_policy
:
"
default
-
src
'
self
'
;
frame
-
src
http
:
'
self
'
;
frame
-
ancestors
'
self
'
"
expectLoad
:
false
}
)
;
}
)
;
