"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
extensionStorageSync
:
"
resource
:
/
/
gre
/
modules
/
ExtensionStorageSync
.
sys
.
mjs
"
Service
:
"
resource
:
/
/
services
-
sync
/
service
.
sys
.
mjs
"
QuotaError
:
"
resource
:
/
/
gre
/
modules
/
RustWebextstorage
.
sys
.
mjs
"
}
)
;
const
{
ExtensionStorageEngineBridge
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
sync
/
engines
/
extension
-
storage
.
sys
.
mjs
"
)
;
const
SYNC_QUOTA_BYTES
=
102400
;
add_task
(
async
function
setup_storage_sync
(
)
{
do_get_profile
(
)
;
}
)
;
add_task
(
async
function
test_storage_sync_service
(
)
{
const
service
=
extensionStorageSync
;
{
service
.
notifyListeners
=
(
extId
changeSet
)
=
>
{
equal
(
extId
"
ext
-
1
"
)
;
let
expected
=
{
hi
:
{
newValue
:
"
hello
!
"
}
bye
:
{
newValue
:
"
adi
s
"
}
}
;
deepEqual
(
[
changeSet
]
[
expected
]
"
set
should
notify
listeners
about
changes
"
)
;
}
;
let
newValue
=
{
hi
:
"
hello
!
"
bye
:
"
adi
s
"
}
;
await
service
.
set
(
{
id
:
"
ext
-
1
"
}
newValue
)
;
}
{
service
.
notifyListeners
=
(
_extId
_changeSet
)
=
>
{
console
.
log
(
NOTIFY
LISTENERS
)
;
}
;
let
expected
=
{
hi
:
"
hello
!
"
}
;
let
value
=
await
service
.
get
(
{
id
:
"
ext
-
1
"
}
[
"
hi
"
]
)
;
deepEqual
(
value
expected
"
get
with
key
should
return
value
"
)
;
let
expected2
=
{
hi
:
"
hello
!
"
bye
:
"
adi
s
"
}
;
let
allValues
=
await
service
.
get
(
{
id
:
"
ext
-
1
"
}
null
)
;
deepEqual
(
allValues
expected2
"
get
without
a
key
should
return
all
values
"
)
;
}
{
service
.
notifyListeners
=
(
extId
changeSet
)
=
>
{
console
.
log
(
"
notifyListeners
"
extId
changeSet
)
;
}
;
let
newValue
=
{
hi
:
"
hola
!
"
}
;
await
service
.
set
(
{
id
:
"
ext
-
2
"
}
newValue
)
;
await
service
.
clear
(
{
id
:
"
ext
-
1
"
}
)
;
let
allValues
=
await
service
.
get
(
{
id
:
"
ext
-
1
"
}
null
)
;
deepEqual
(
allValues
{
}
"
clear
removed
ext
-
1
"
)
;
let
allValues2
=
await
service
.
get
(
{
id
:
"
ext
-
2
"
}
null
)
;
let
expected
=
{
hi
:
"
hola
!
"
}
;
deepEqual
(
allValues2
expected
"
clear
didn
'
t
remove
ext
-
2
"
)
;
await
service
.
clear
(
{
id
:
"
ext
-
2
"
}
)
;
}
}
)
;
add_task
(
async
function
test_storage_sync_bridged_engine
(
)
{
let
engine
=
new
ExtensionStorageEngineBridge
(
Service
)
;
await
engine
.
initialize
(
)
;
let
area
=
engine
.
_rustStore
;
info
(
"
Add
some
local
items
"
)
;
await
area
.
set
(
"
ext
-
1
"
JSON
.
stringify
(
{
a
:
"
abc
"
}
)
)
;
await
area
.
set
(
"
ext
-
2
"
JSON
.
stringify
(
{
b
:
"
xyz
"
}
)
)
;
info
(
"
Start
a
sync
"
)
;
await
engine
.
_bridge
.
syncStarted
(
)
;
info
(
"
Store
some
incoming
synced
items
"
)
;
let
incomingEnvelopesAsJSON
=
[
{
id
:
"
guidAAA
"
modified
:
0
.
1
payload
:
JSON
.
stringify
(
{
extId
:
"
ext
-
2
"
data
:
JSON
.
stringify
(
{
c
:
1234
}
)
}
)
}
{
id
:
"
guidBBB
"
modified
:
0
.
1
payload
:
JSON
.
stringify
(
{
extId
:
"
ext
-
3
"
data
:
JSON
.
stringify
(
{
d
:
"
new
!
"
}
)
}
)
}
]
.
map
(
e
=
>
JSON
.
stringify
(
e
)
)
;
await
engine
.
_bridge
.
storeIncoming
(
incomingEnvelopesAsJSON
)
;
info
(
"
Merge
"
)
;
let
outgoingEnvelopesAsJSON
=
await
engine
.
_bridge
.
apply
(
)
;
let
outgoingEnvelopes
=
outgoingEnvelopesAsJSON
.
map
(
json
=
>
JSON
.
parse
(
json
)
)
;
let
parsedCleartexts
=
outgoingEnvelopes
.
map
(
e
=
>
JSON
.
parse
(
e
.
payload
)
)
;
let
parsedData
=
parsedCleartexts
.
map
(
c
=
>
JSON
.
parse
(
c
.
data
)
)
;
let
changes
=
(
await
area
.
getSyncedChanges
(
)
)
.
map
(
change
=
>
{
return
{
extId
:
change
.
extId
changes
:
JSON
.
parse
(
change
.
changes
)
}
;
}
)
;
deepEqual
(
changes
[
{
extId
:
"
ext
-
2
"
changes
:
{
c
:
{
newValue
:
1234
}
}
}
{
extId
:
"
ext
-
3
"
changes
:
{
d
:
{
newValue
:
"
new
!
"
}
}
}
]
"
Should
return
pending
synced
changes
for
observers
"
)
;
let
ext1Index
=
parsedCleartexts
.
findIndex
(
c
=
>
c
.
extId
=
=
"
ext
-
1
"
)
;
greater
(
ext1Index
-
1
"
Should
find
envelope
for
ext
-
1
"
)
;
let
ext1Guid
=
outgoingEnvelopes
[
ext1Index
]
.
id
;
let
ext2Index
=
outgoingEnvelopes
.
findIndex
(
c
=
>
c
.
id
=
=
"
guidAAA
"
)
;
greater
(
ext2Index
-
1
"
Should
find
envelope
for
ext
-
2
"
)
;
equal
(
outgoingEnvelopes
.
length
2
"
Should
upload
ext
-
1
and
ext
-
2
"
)
;
deepEqual
(
parsedData
[
ext1Index
]
{
a
:
"
abc
"
}
"
Should
upload
new
data
for
ext
-
1
"
)
;
deepEqual
(
parsedData
[
ext2Index
]
{
b
:
"
xyz
"
c
:
1234
}
"
Should
merge
local
and
remote
data
for
ext
-
2
"
)
;
info
(
"
Mark
all
extensions
as
uploaded
"
)
;
await
engine
.
_bridge
.
setUploaded
(
0
[
ext1Guid
"
guidAAA
"
]
)
;
info
(
"
Finish
sync
"
)
;
await
engine
.
_bridge
.
syncFinished
(
)
;
let
ext3Value
=
await
area
.
get
(
"
ext
-
3
"
"
null
"
)
;
deepEqual
(
JSON
.
parse
(
ext3Value
)
{
d
:
"
new
!
"
}
"
Should
return
new
keys
for
ext
-
3
"
)
;
info
(
"
Try
applying
a
second
time
"
)
;
let
secondApply
=
await
engine
.
_bridge
.
apply
(
)
;
deepEqual
(
secondApply
{
}
"
Shouldn
'
t
merge
anything
on
second
apply
"
)
;
info
(
"
Wipe
all
items
"
)
;
await
engine
.
_bridge
.
wipe
(
)
;
for
(
let
extId
of
[
"
ext
-
1
"
"
ext
-
2
"
"
ext
-
3
"
]
)
{
let
value
=
await
area
.
get
(
extId
"
null
"
)
;
deepEqual
(
JSON
.
parse
(
value
)
{
}
Wipe
should
remove
all
values
for
{
extId
}
)
;
}
}
)
;
add_task
(
async
function
test_storage_sync_quota
(
)
{
let
engine
=
new
ExtensionStorageEngineBridge
(
Service
)
;
await
engine
.
initialize
(
)
;
let
service
=
engine
.
_rustStore
;
await
engine
.
_bridge
.
wipe
(
)
;
await
service
.
set
(
"
ext
-
1
"
JSON
.
stringify
(
{
x
:
"
hi
"
}
)
)
;
await
service
.
set
(
"
ext
-
1
"
JSON
.
stringify
(
{
longer
:
"
value
"
}
)
)
;
let
v1
=
await
service
.
getBytesInUse
(
"
ext
-
1
"
'
"
x
"
'
)
;
Assert
.
equal
(
v1
5
)
;
let
v2
=
await
service
.
getBytesInUse
(
"
ext
-
1
"
"
null
"
)
;
Assert
.
equal
(
v2
18
)
;
await
Assert
.
rejects
(
service
.
set
(
"
ext
-
1
"
JSON
.
stringify
(
{
big
:
"
x
"
.
repeat
(
SYNC_QUOTA_BYTES
)
}
)
)
QuotaError
"
should
reject
with
QuotaError
"
)
;
}
)
;
