"
use
strict
"
;
function
generateExpectations
(
list
)
{
return
list
.
reduce
(
(
allApis
path
)
=
>
{
return
allApis
.
concat
(
browser
.
{
path
}
chrome
.
{
path
}
)
;
}
[
]
)
.
sort
(
)
;
}
let
expectedCommonApis
=
[
"
extension
.
getURL
"
"
extension
.
inIncognitoContext
"
"
extension
.
lastError
"
"
i18n
.
detectLanguage
"
"
i18n
.
getAcceptLanguages
"
"
i18n
.
getMessage
"
"
i18n
.
getUILanguage
"
"
runtime
.
OnInstalledReason
"
"
runtime
.
OnRestartRequiredReason
"
"
runtime
.
PlatformArch
"
"
runtime
.
PlatformOs
"
"
runtime
.
RequestUpdateCheckStatus
"
"
runtime
.
getManifest
"
"
runtime
.
connect
"
"
runtime
.
getURL
"
"
runtime
.
id
"
"
runtime
.
lastError
"
"
runtime
.
onConnect
"
"
runtime
.
onMessage
"
"
runtime
.
sendMessage
"
"
test
.
assertEq
"
"
test
.
assertFalse
"
"
test
.
assertTrue
"
"
test
.
fail
"
"
test
.
log
"
"
test
.
notifyFail
"
"
test
.
notifyPass
"
"
test
.
onMessage
"
"
test
.
sendMessage
"
"
test
.
succeed
"
]
;
let
expectedContentApis
=
[
.
.
.
expectedCommonApis
.
.
.
expectedContentApisTargetSpecific
]
;
let
expectedBackgroundApis
=
[
.
.
.
expectedCommonApis
.
.
.
expectedBackgroundApisTargetSpecific
"
extension
.
ViewType
"
"
extension
.
getBackgroundPage
"
"
extension
.
getViews
"
"
extension
.
isAllowedFileSchemeAccess
"
"
extension
.
isAllowedIncognitoAccess
"
"
extensionTypes
.
ImageFormat
"
"
extensionTypes
.
RunAt
"
"
management
.
ExtensionDisabledReason
"
"
management
.
ExtensionInstallType
"
"
management
.
ExtensionType
"
"
management
.
getSelf
"
"
management
.
uninstallSelf
"
"
runtime
.
getBackgroundPage
"
"
runtime
.
getPlatformInfo
"
"
runtime
.
onUpdateAvailable
"
"
runtime
.
openOptionsPage
"
"
runtime
.
reload
"
"
runtime
.
setUninstallURL
"
]
;
function
sendAllApis
(
)
{
function
isEvent
(
key
val
)
{
if
(
!
/
^
on
[
A
-
Z
]
/
.
test
(
key
)
)
{
return
false
;
}
let
eventKeys
=
[
]
;
for
(
let
prop
in
val
)
{
eventKeys
.
push
(
prop
)
;
}
eventKeys
=
eventKeys
.
sort
(
)
.
join
(
)
;
return
eventKeys
=
=
=
"
addListener
hasListener
removeListener
"
;
}
function
mayRecurse
(
key
val
)
{
if
(
Object
.
keys
(
val
)
.
filter
(
k
=
>
!
/
^
[
A
-
Z
\
-
0
-
9_
]
+
/
.
test
(
k
)
)
.
length
=
=
=
0
)
{
return
false
;
}
return
!
isEvent
(
key
val
)
;
}
let
results
=
[
]
;
function
diveDeeper
(
path
obj
)
{
for
(
let
key
in
obj
)
{
let
val
=
obj
[
key
]
;
if
(
typeof
val
=
=
"
object
"
&
&
val
!
=
=
null
&
&
mayRecurse
(
key
val
)
)
{
diveDeeper
(
{
path
}
.
{
key
}
val
)
;
}
else
{
results
.
push
(
{
path
}
.
{
key
}
)
;
}
}
}
diveDeeper
(
"
browser
"
browser
)
;
diveDeeper
(
"
chrome
"
chrome
)
;
browser
.
test
.
sendMessage
(
"
allApis
"
results
.
sort
(
)
)
;
}
add_task
(
function
*
test_enumerate_content_script_apis
(
)
{
let
extensionData
=
{
manifest
:
{
content_scripts
:
[
{
matches
:
[
"
http
:
/
/
mochi
.
test
/
*
/
file_sample
.
html
"
]
js
:
[
"
contentscript
.
js
"
]
run_at
:
"
document_start
"
}
]
}
files
:
{
"
contentscript
.
js
"
:
sendAllApis
}
}
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
extensionData
)
;
yield
extension
.
startup
(
)
;
let
win
=
window
.
open
(
"
file_sample
.
html
"
)
;
let
actualApis
=
yield
extension
.
awaitMessage
(
"
allApis
"
)
;
win
.
close
(
)
;
let
expectedApis
=
generateExpectations
(
expectedContentApis
)
;
isDeeply
(
actualApis
expectedApis
"
content
script
APIs
"
)
;
yield
extension
.
unload
(
)
;
}
)
;
add_task
(
function
*
test_enumerate_background_script_apis
(
)
{
let
extensionData
=
{
background
:
sendAllApis
}
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
extensionData
)
;
yield
extension
.
startup
(
)
;
let
actualApis
=
yield
extension
.
awaitMessage
(
"
allApis
"
)
;
let
expectedApis
=
generateExpectations
(
expectedBackgroundApis
)
;
isDeeply
(
actualApis
expectedApis
"
background
script
APIs
"
)
;
yield
extension
.
unload
(
)
;
}
)
;
