#
ifndef
mozilla_extensions_NativeMessagingPortal_h
#
define
mozilla_extensions_NativeMessagingPortal_h
#
include
"
nsINativeMessagingPortal
.
h
"
#
include
<
gio
/
gio
.
h
>
#
include
"
mozilla
/
GRefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
deque
>
#
include
<
unordered_map
>
namespace
mozilla
:
:
extensions
{
enum
class
SessionState
{
Active
Closing
Error
}
;
class
NativeMessagingPortal
:
public
nsINativeMessagingPortal
{
public
:
NS_DECL_NSINATIVEMESSAGINGPORTAL
NS_DECL_ISUPPORTS
static
already_AddRefed
<
NativeMessagingPortal
>
GetSingleton
(
)
;
private
:
NativeMessagingPortal
(
)
;
virtual
~
NativeMessagingPortal
(
)
;
RefPtr
<
GDBusProxy
>
mProxy
;
bool
mInitialized
=
false
;
RefPtr
<
GCancellable
>
mCancellable
;
struct
DelayedCall
;
std
:
:
deque
<
UniquePtr
<
DelayedCall
>
>
mPending
;
using
SessionsMap
=
std
:
:
unordered_map
<
std
:
:
string
SessionState
>
;
SessionsMap
mSessions
;
static
void
OnProxyReady
(
GObject
*
source
GAsyncResult
*
result
gpointer
user_data
)
;
void
MaybeDelayedIsAvailable
(
dom
:
:
Promise
&
GVariant
*
)
;
void
MaybeDelayedCreateSession
(
dom
:
:
Promise
&
GVariant
*
)
;
static
void
OnCreateSessionDone
(
GObject
*
source
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnCloseSessionProxyReady
(
GObject
*
source
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnCloseSessionDone
(
GObject
*
source
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnSessionClosedSignal
(
GDBusConnection
*
bus
const
gchar
*
sender_name
const
gchar
*
object_path
const
gchar
*
interface_name
const
gchar
*
signal_name
GVariant
*
parameters
gpointer
user_data
)
;
static
void
OnGetManifestDone
(
GObject
*
source
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnStartDone
(
GObject
*
source
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnStartRequestResponseSignal
(
GDBusConnection
*
bus
const
gchar
*
sender_name
const
gchar
*
object_path
const
gchar
*
interface_name
const
gchar
*
signal_name
GVariant
*
parameters
gpointer
user_data
)
;
static
void
OnGetPipesDone
(
GObject
*
source
GAsyncResult
*
result
gpointer
user_data
)
;
}
;
}
#
endif
