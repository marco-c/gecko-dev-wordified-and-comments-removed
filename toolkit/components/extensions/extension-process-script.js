"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionManagement
"
"
resource
:
/
/
gre
/
modules
/
ExtensionManagement
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MessageChannel
"
"
resource
:
/
/
gre
/
modules
/
MessageChannel
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionChild
"
"
resource
:
/
/
gre
/
modules
/
ExtensionChild
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionContent
"
"
resource
:
/
/
gre
/
modules
/
ExtensionContent
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionPageChild
"
"
resource
:
/
/
gre
/
modules
/
ExtensionPageChild
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionUtils
"
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
console
"
(
)
=
>
ExtensionUtils
.
getConsole
(
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
getInnerWindowID
"
(
)
=
>
ExtensionUtils
.
getInnerWindowID
)
;
const
appinfo
=
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIXULRuntime
)
;
const
isContentProcess
=
appinfo
.
processType
=
=
appinfo
.
PROCESS_TYPE_CONTENT
;
function
parseScriptOptions
(
options
)
{
return
{
allFrames
:
options
.
all_frames
matchAboutBlank
:
options
.
match_about_blank
frameID
:
options
.
frame_id
runAt
:
options
.
run_at
matches
:
new
MatchPatternSet
(
options
.
matches
)
excludeMatches
:
new
MatchPatternSet
(
options
.
exclude_matches
|
|
[
]
)
includeGlobs
:
options
.
include_globs
&
&
options
.
include_globs
.
map
(
glob
=
>
new
MatchGlob
(
glob
)
)
excludeGlobs
:
options
.
exclude_globs
&
&
options
.
exclude_globs
.
map
(
glob
=
>
new
MatchGlob
(
glob
)
)
jsPaths
:
options
.
js
|
|
[
]
cssPaths
:
options
.
css
|
|
[
]
}
;
}
class
ScriptMatcher
{
constructor
(
extension
matcher
)
{
this
.
extension
=
extension
;
this
.
matcher
=
matcher
;
this
.
_script
=
null
;
}
get
matchAboutBlank
(
)
{
return
this
.
matcher
.
matchAboutBlank
;
}
get
script
(
)
{
if
(
!
this
.
_script
)
{
this
.
_script
=
new
ExtensionContent
.
Script
(
this
.
extension
.
realExtension
this
.
matcher
)
;
}
return
this
.
_script
;
}
preload
(
)
{
let
{
script
}
=
this
;
script
.
loadCSS
(
)
;
script
.
compileScripts
(
)
;
}
matchesLoadInfo
(
uri
loadInfo
)
{
return
this
.
matcher
.
matchesLoadInfo
(
uri
loadInfo
)
;
}
matchesWindow
(
window
)
{
return
this
.
matcher
.
matchesWindow
(
window
)
;
}
injectInto
(
window
)
{
return
this
.
script
.
injectInto
(
window
)
;
}
}
function
getMessageManager
(
window
)
{
let
docShell
=
window
.
document
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
;
try
{
return
docShell
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
}
catch
(
e
)
{
return
null
;
}
}
var
DocumentManager
;
var
ExtensionManager
;
class
ExtensionGlobal
{
constructor
(
global
)
{
this
.
global
=
global
;
MessageChannel
.
addListener
(
global
"
Extension
:
Capture
"
this
)
;
MessageChannel
.
addListener
(
global
"
Extension
:
DetectLanguage
"
this
)
;
MessageChannel
.
addListener
(
global
"
Extension
:
Execute
"
this
)
;
MessageChannel
.
addListener
(
global
"
WebNavigation
:
GetFrame
"
this
)
;
MessageChannel
.
addListener
(
global
"
WebNavigation
:
GetAllFrames
"
this
)
;
}
uninit
(
)
{
}
get
messageFilterStrict
(
)
{
return
{
innerWindowID
:
getInnerWindowID
(
this
.
global
.
content
)
}
;
}
receiveMessage
(
{
target
messageName
recipient
data
}
)
{
switch
(
messageName
)
{
case
"
Extension
:
Capture
"
:
return
ExtensionContent
.
handleExtensionCapture
(
this
.
global
data
.
width
data
.
height
data
.
options
)
;
case
"
Extension
:
DetectLanguage
"
:
return
ExtensionContent
.
handleDetectLanguage
(
this
.
global
target
)
;
case
"
Extension
:
Execute
"
:
let
extension
=
ExtensionManager
.
get
(
recipient
.
extensionId
)
;
let
matcher
=
new
WebExtensionContentScript
(
extension
.
policy
parseScriptOptions
(
data
.
options
)
)
;
let
options
=
Object
.
assign
(
matcher
{
wantReturnValue
:
data
.
options
.
wantReturnValue
removeCSS
:
data
.
options
.
remove_css
cssOrigin
:
data
.
options
.
css_origin
cssCode
:
data
.
options
.
cssCode
jsCode
:
data
.
options
.
jsCode
}
)
;
let
script
=
new
ScriptMatcher
(
extension
options
)
;
return
ExtensionContent
.
handleExtensionExecute
(
this
.
global
target
data
.
options
script
)
;
case
"
WebNavigation
:
GetFrame
"
:
return
ExtensionContent
.
handleWebNavigationGetFrame
(
this
.
global
data
.
options
)
;
case
"
WebNavigation
:
GetAllFrames
"
:
return
ExtensionContent
.
handleWebNavigationGetAllFrames
(
this
.
global
)
;
}
}
}
DocumentManager
=
{
globals
:
new
Map
(
)
earlyInit
(
)
{
Services
.
obs
.
addObserver
(
this
"
tab
-
content
-
frameloader
-
created
"
)
;
}
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
document
-
element
-
inserted
"
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
document
-
element
-
inserted
"
)
;
}
initMatchers
(
)
{
if
(
isContentProcess
)
{
Services
.
obs
.
addObserver
(
this
"
http
-
on
-
opening
-
request
"
)
;
}
}
uninitMatchers
(
)
{
if
(
isContentProcess
)
{
Services
.
obs
.
removeObserver
(
this
"
http
-
on
-
opening
-
request
"
)
;
}
}
initAboutBlankMatchers
(
)
{
Services
.
obs
.
addObserver
(
this
"
content
-
document
-
global
-
created
"
)
;
}
uninitAboutBlankMatchers
(
)
{
Services
.
obs
.
removeObserver
(
this
"
content
-
document
-
global
-
created
"
)
;
}
extensionProcessInitialized
:
false
initExtensionProcess
(
)
{
if
(
this
.
extensionProcessInitialized
|
|
!
ExtensionManagement
.
isExtensionProcess
)
{
return
;
}
this
.
extensionProcessInitialized
=
true
;
for
(
let
global
of
this
.
globals
.
keys
(
)
)
{
ExtensionPageChild
.
init
(
global
)
;
}
}
initGlobal
(
global
)
{
global
.
addEventListener
(
"
unload
"
event
=
>
{
this
.
uninitGlobal
(
global
)
;
}
)
;
this
.
globals
.
set
(
global
new
ExtensionGlobal
(
global
)
)
;
this
.
initExtensionProcess
(
)
;
if
(
this
.
extensionProcessInitialized
&
&
ExtensionManagement
.
isExtensionProcess
)
{
ExtensionPageChild
.
init
(
global
)
;
}
}
uninitGlobal
(
global
)
{
if
(
this
.
extensionProcessInitialized
)
{
ExtensionPageChild
.
uninit
(
global
)
;
}
this
.
globals
.
get
(
global
)
.
uninit
(
)
;
this
.
globals
.
delete
(
global
)
;
}
initExtension
(
extension
)
{
if
(
this
.
extensionCount
=
=
=
0
)
{
this
.
init
(
)
;
this
.
initExtensionProcess
(
)
;
}
this
.
extensionCount
+
+
;
for
(
let
script
of
extension
.
scripts
)
{
this
.
addContentScript
(
script
)
;
}
this
.
injectExtensionScripts
(
extension
)
;
}
uninitExtension
(
extension
)
{
for
(
let
script
of
extension
.
scripts
)
{
this
.
removeContentScript
(
script
)
;
}
this
.
extensionCount
-
-
;
if
(
this
.
extensionCount
=
=
=
0
)
{
this
.
uninit
(
)
;
}
}
extensionCount
:
0
matchAboutBlankCount
:
0
contentScripts
:
new
Set
(
)
addContentScript
(
script
)
{
if
(
this
.
contentScripts
.
size
=
=
0
)
{
this
.
initMatchers
(
)
;
}
if
(
script
.
matchAboutBlank
)
{
if
(
this
.
matchAboutBlankCount
=
=
0
)
{
this
.
initAboutBlankMatchers
(
)
;
}
this
.
matchAboutBlankCount
+
+
;
}
this
.
contentScripts
.
add
(
script
)
;
}
removeContentScript
(
script
)
{
this
.
contentScripts
.
delete
(
script
)
;
if
(
this
.
contentScripts
.
size
=
=
0
)
{
this
.
uninitMatchers
(
)
;
}
if
(
script
.
matchAboutBlank
)
{
this
.
matchAboutBlankCount
-
-
;
if
(
this
.
matchAboutBlankCount
=
=
0
)
{
this
.
uninitAboutBlankMatchers
(
)
;
}
}
}
observers
:
{
async
"
content
-
document
-
global
-
created
"
(
window
)
{
if
(
(
window
.
location
&
&
window
.
location
.
href
!
=
=
"
about
:
blank
"
)
|
|
!
this
.
globals
.
has
(
getMessageManager
(
window
)
)
)
{
return
;
}
await
new
Promise
(
resolve
=
>
window
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
capture
:
true
}
)
)
;
if
(
window
.
location
.
href
=
=
=
"
about
:
blank
"
)
{
this
.
injectWindowScripts
(
window
)
;
}
}
"
document
-
element
-
inserted
"
(
document
)
{
let
window
=
document
.
defaultView
;
if
(
!
document
.
location
|
|
!
window
|
|
!
this
.
globals
.
has
(
getMessageManager
(
window
)
)
)
{
return
;
}
this
.
injectWindowScripts
(
window
)
;
this
.
loadInto
(
window
)
;
}
"
http
-
on
-
opening
-
request
"
(
subject
topic
data
)
{
let
{
loadInfo
}
=
subject
.
QueryInterface
(
Ci
.
nsIChannel
)
;
if
(
loadInfo
)
{
let
{
externalContentPolicyType
:
type
}
=
loadInfo
;
if
(
type
=
=
=
Ci
.
nsIContentPolicy
.
TYPE_DOCUMENT
|
|
type
=
=
=
Ci
.
nsIContentPolicy
.
TYPE_SUBDOCUMENT
)
{
this
.
preloadScripts
(
subject
.
URI
loadInfo
)
;
}
}
}
"
tab
-
content
-
frameloader
-
created
"
(
global
)
{
this
.
initGlobal
(
global
)
;
}
}
observe
(
subject
topic
data
)
{
this
.
observers
[
topic
]
.
call
(
this
subject
topic
data
)
;
}
injectExtensionScripts
(
extension
)
{
for
(
let
window
of
this
.
enumerateWindows
(
)
)
{
for
(
let
script
of
extension
.
scripts
)
{
if
(
script
.
matchesWindow
(
window
)
)
{
script
.
injectInto
(
window
)
;
}
}
}
}
injectWindowScripts
(
window
)
{
for
(
let
script
of
this
.
contentScripts
)
{
if
(
script
.
matchesWindow
(
window
)
)
{
script
.
injectInto
(
window
)
;
}
}
}
preloadScripts
(
uri
loadInfo
)
{
for
(
let
script
of
this
.
contentScripts
)
{
if
(
script
.
matchesLoadInfo
(
uri
loadInfo
)
)
{
script
.
preload
(
)
;
}
}
}
checkParentFrames
(
window
addonId
)
{
while
(
window
.
parent
!
=
=
window
)
{
let
{
frameElement
}
=
window
;
window
=
window
.
parent
;
let
principal
=
window
.
document
.
nodePrincipal
;
if
(
Services
.
scriptSecurityManager
.
isSystemPrincipal
(
principal
)
)
{
if
(
window
.
location
.
href
=
=
=
"
about
:
addons
"
)
{
return
true
;
}
if
(
frameElement
&
&
frameElement
.
mozMatchesSelector
(
"
browser
[
webextension
-
view
-
type
=
'
devtools_panel
'
]
"
)
)
{
return
true
;
}
}
if
(
principal
.
addonId
!
=
=
addonId
)
{
return
false
;
}
}
return
true
;
}
loadInto
(
window
)
{
let
{
addonId
}
=
Cu
.
getObjectPrincipal
(
window
)
;
if
(
!
addonId
)
{
return
;
}
let
extension
=
ExtensionManager
.
get
(
addonId
)
;
if
(
!
extension
)
{
throw
new
Error
(
No
registered
extension
for
ID
{
addonId
}
)
;
}
if
(
this
.
checkParentFrames
(
window
addonId
)
&
&
ExtensionManagement
.
isExtensionProcess
)
{
ExtensionPageChild
.
initExtensionContext
(
extension
.
realExtension
window
)
;
}
else
{
ExtensionContent
.
initExtensionContext
(
extension
.
realExtension
window
)
;
}
}
*
enumerateWindows
(
docShell
)
{
if
(
docShell
)
{
let
enum_
=
docShell
.
getDocShellEnumerator
(
docShell
.
typeContent
docShell
.
ENUMERATE_FORWARDS
)
;
for
(
let
docShell
of
XPCOMUtils
.
IterSimpleEnumerator
(
enum_
Ci
.
nsIInterfaceRequestor
)
)
{
yield
docShell
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
}
}
else
{
for
(
let
global
of
this
.
globals
.
keys
(
)
)
{
yield
*
this
.
enumerateWindows
(
global
.
docShell
)
;
}
}
}
}
;
class
StubExtension
{
constructor
(
data
)
{
this
.
data
=
data
;
this
.
id
=
data
.
id
;
this
.
uuid
=
data
.
uuid
;
this
.
instanceId
=
data
.
instanceId
;
this
.
manifest
=
data
.
manifest
;
this
.
permissions
=
data
.
permissions
;
this
.
whiteListedHosts
=
new
MatchPatternSet
(
data
.
whiteListedHosts
)
;
this
.
webAccessibleResources
=
data
.
webAccessibleResources
.
map
(
path
=
>
new
MatchGlob
(
path
)
)
;
this
.
_realExtension
=
null
;
this
.
startup
(
)
;
this
.
scripts
=
this
.
policy
.
contentScripts
.
map
(
matcher
=
>
new
ScriptMatcher
(
this
matcher
)
)
;
}
startup
(
)
{
if
(
isContentProcess
)
{
let
uri
=
Services
.
io
.
newURI
(
this
.
data
.
resourceURL
)
;
ExtensionManagement
.
startupExtension
(
this
.
uuid
uri
this
)
;
}
else
{
this
.
policy
=
WebExtensionPolicy
.
getByID
(
this
.
id
)
;
}
}
shutdown
(
)
{
if
(
isContentProcess
)
{
ExtensionManagement
.
shutdownExtension
(
this
)
;
}
if
(
this
.
_realExtension
)
{
this
.
_realExtension
.
shutdown
(
)
;
}
}
get
realExtension
(
)
{
if
(
!
this
.
_realExtension
)
{
this
.
_realExtension
=
new
ExtensionChild
.
BrowserExtensionContent
(
this
.
data
)
;
this
.
_realExtension
.
policy
=
this
.
policy
;
}
return
this
.
_realExtension
;
}
hasPermission
(
.
.
.
args
)
{
return
this
.
realExtension
.
hasPermission
(
.
.
.
args
)
;
}
localize
(
.
.
.
args
)
{
return
this
.
realExtension
.
localize
(
.
.
.
args
)
;
}
}
ExtensionManager
=
{
extensions
:
new
Map
(
)
init
(
)
{
MessageChannel
.
setupMessageManagers
(
[
Services
.
cpmm
]
)
;
Services
.
cpmm
.
addMessageListener
(
"
Extension
:
Startup
"
this
)
;
Services
.
cpmm
.
addMessageListener
(
"
Extension
:
Shutdown
"
this
)
;
Services
.
cpmm
.
addMessageListener
(
"
Extension
:
FlushJarCache
"
this
)
;
let
procData
=
Services
.
cpmm
.
initialProcessData
|
|
{
}
;
for
(
let
data
of
procData
[
"
Extension
:
Extensions
"
]
|
|
[
]
)
{
let
extension
=
new
StubExtension
(
data
)
;
this
.
extensions
.
set
(
data
.
id
extension
)
;
DocumentManager
.
initExtension
(
extension
)
;
}
if
(
isContentProcess
)
{
if
(
!
procData
[
"
Extension
:
Schemas
"
]
)
{
procData
[
"
Extension
:
Schemas
"
]
=
new
Map
(
)
;
}
this
.
schemaJSON
=
procData
[
"
Extension
:
Schemas
"
]
;
Services
.
cpmm
.
addMessageListener
(
"
Schema
:
Add
"
this
)
;
}
}
get
(
extensionId
)
{
return
this
.
extensions
.
get
(
extensionId
)
;
}
receiveMessage
(
{
name
data
}
)
{
switch
(
name
)
{
case
"
Extension
:
Startup
"
:
{
let
extension
=
new
StubExtension
(
data
)
;
this
.
extensions
.
set
(
data
.
id
extension
)
;
DocumentManager
.
initExtension
(
extension
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
Extension
:
StartupComplete
"
)
;
break
;
}
case
"
Extension
:
Shutdown
"
:
{
let
extension
=
this
.
extensions
.
get
(
data
.
id
)
;
this
.
extensions
.
delete
(
data
.
id
)
;
if
(
extension
)
{
extension
.
shutdown
(
)
;
DocumentManager
.
uninitExtension
(
extension
)
;
}
break
;
}
case
"
Extension
:
FlushJarCache
"
:
{
ExtensionUtils
.
flushJarCache
(
data
.
path
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
Extension
:
FlushJarCacheComplete
"
)
;
break
;
}
case
"
Schema
:
Add
"
:
{
this
.
schemaJSON
.
set
(
data
.
url
data
.
schema
)
;
break
;
}
}
}
}
;
DocumentManager
.
earlyInit
(
)
;
ExtensionManager
.
init
(
)
;
