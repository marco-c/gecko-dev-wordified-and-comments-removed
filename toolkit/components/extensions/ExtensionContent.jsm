"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionContent
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionManagement
"
"
resource
:
/
/
gre
/
modules
/
ExtensionManagement
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LanguageDetector
"
"
resource
:
/
/
/
modules
/
translation
/
LanguageDetector
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MatchPattern
"
"
resource
:
/
/
gre
/
modules
/
MatchPattern
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MatchGlobs
"
"
resource
:
/
/
gre
/
modules
/
MatchPattern
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MessageChannel
"
"
resource
:
/
/
gre
/
modules
/
MessageChannel
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PromiseUtils
"
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Schemas
"
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
WebNavigationFrames
"
"
resource
:
/
/
gre
/
modules
/
WebNavigationFrames
.
jsm
"
)
;
const
Timer
=
Components
.
Constructor
(
"
mozilla
.
org
/
timer
;
1
"
"
nsITimer
"
"
initWithCallback
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionChild
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionCommon
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
const
{
DefaultMap
EventEmitter
LocaleData
defineLazyGetter
flushJarCache
getInnerWindowID
promiseDocumentReady
runSafeSyncWithoutClone
}
=
ExtensionUtils
;
const
{
BaseContext
SchemaAPIManager
}
=
ExtensionCommon
;
const
{
ChildAPIManager
Messenger
}
=
ExtensionChild
;
XPCOMUtils
.
defineLazyGetter
(
this
"
console
"
ExtensionUtils
.
getConsole
)
;
const
CATEGORY_EXTENSION_SCRIPTS_CONTENT
=
"
webextension
-
scripts
-
content
"
;
function
isWhenBeforeOrSame
(
when1
when2
)
{
let
table
=
{
"
document_start
"
:
0
"
document_end
"
:
1
"
document_idle
"
:
2
}
;
return
table
[
when1
]
<
=
table
[
when2
]
;
}
var
apiManager
=
new
class
extends
SchemaAPIManager
{
constructor
(
)
{
super
(
"
content
"
)
;
this
.
initialized
=
false
;
}
generateAPIs
(
.
.
.
args
)
{
if
(
!
this
.
initialized
)
{
this
.
initialized
=
true
;
for
(
let
[
value
]
of
XPCOMUtils
.
enumerateCategoryEntries
(
CATEGORY_EXTENSION_SCRIPTS_CONTENT
)
)
{
this
.
loadScript
(
value
)
;
}
}
return
super
.
generateAPIs
(
.
.
.
args
)
;
}
registerSchemaAPI
(
namespace
envType
getAPI
)
{
if
(
envType
=
=
"
content_child
"
)
{
super
.
registerSchemaAPI
(
namespace
envType
getAPI
)
;
}
}
}
(
)
;
const
SCRIPT_EXPIRY_TIMEOUT_MS
=
300000
;
const
SCRIPT_CLEAR_TIMEOUT_MS
=
5000
;
const
scriptCaches
=
new
WeakSet
(
)
;
class
ScriptCache
extends
DefaultMap
{
constructor
(
options
)
{
super
(
url
=
>
ChromeUtils
.
compileScript
(
url
options
)
)
;
scriptCaches
.
add
(
this
)
;
}
get
(
url
)
{
let
script
=
super
.
get
(
url
)
;
script
.
lastUsed
=
Date
.
now
(
)
;
if
(
script
.
timer
)
{
script
.
timer
.
cancel
(
)
;
}
script
.
timer
=
Timer
(
this
.
delete
.
bind
(
this
url
)
SCRIPT_EXPIRY_TIMEOUT_MS
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
return
script
;
}
delete
(
url
)
{
if
(
this
.
has
(
url
)
)
{
super
.
get
(
url
)
.
timer
.
cancel
(
)
;
}
super
.
delete
(
url
)
;
}
clear
(
timeout
=
SCRIPT_CLEAR_TIMEOUT_MS
)
{
let
now
=
Date
.
now
(
)
;
for
(
let
[
url
script
]
of
this
.
entries
(
)
)
{
if
(
now
-
script
.
lastUsed
>
=
timeout
)
{
this
.
delete
(
url
)
;
}
}
}
}
function
Script
(
extension
options
deferred
=
PromiseUtils
.
defer
(
)
)
{
this
.
extension
=
extension
;
this
.
options
=
options
;
this
.
run_at
=
this
.
options
.
run_at
;
this
.
js
=
this
.
options
.
js
|
|
[
]
;
this
.
css
=
this
.
options
.
css
|
|
[
]
;
this
.
remove_css
=
this
.
options
.
remove_css
;
this
.
match_about_blank
=
this
.
options
.
match_about_blank
;
this
.
css_origin
=
this
.
options
.
css_origin
;
this
.
deferred
=
deferred
;
this
.
scriptCache
=
extension
[
options
.
wantReturnValue
?
"
dynamicScripts
"
:
"
staticScripts
"
]
;
if
(
options
.
wantReturnValue
)
{
this
.
compileScripts
(
)
;
}
this
.
matches_
=
new
MatchPattern
(
this
.
options
.
matches
)
;
this
.
exclude_matches_
=
new
MatchPattern
(
this
.
options
.
exclude_matches
|
|
null
)
;
this
.
matches_host_
=
new
MatchPattern
(
this
.
options
.
matchesHost
|
|
null
)
;
this
.
include_globs_
=
new
MatchGlobs
(
this
.
options
.
include_globs
)
;
this
.
exclude_globs_
=
new
MatchGlobs
(
this
.
options
.
exclude_globs
)
;
this
.
requiresCleanup
=
!
this
.
remove_css
&
&
(
this
.
css
.
length
>
0
|
|
options
.
cssCode
)
;
}
Script
.
prototype
=
{
compileScripts
(
)
{
return
this
.
js
.
map
(
url
=
>
this
.
scriptCache
.
get
(
url
)
)
;
}
get
cssURLs
(
)
{
let
urls
=
[
]
;
for
(
let
url
of
this
.
css
)
{
urls
.
push
(
this
.
extension
.
baseURI
.
resolve
(
url
)
)
;
}
if
(
this
.
options
.
cssCode
)
{
let
url
=
"
data
:
text
/
css
;
charset
=
utf
-
8
"
+
encodeURIComponent
(
this
.
options
.
cssCode
)
;
urls
.
push
(
url
)
;
}
return
urls
;
}
matchesLoadInfo
(
uri
loadInfo
)
{
if
(
!
this
.
matchesURI
(
uri
)
)
{
return
false
;
}
if
(
!
this
.
options
.
all_frames
&
&
!
loadInfo
.
isTopLevelLoad
)
{
return
false
;
}
return
true
;
}
matchesURI
(
uri
)
{
if
(
!
(
this
.
matches_
.
matches
(
uri
)
|
|
this
.
matches_host_
.
matchesIgnoringPath
(
uri
)
)
)
{
return
false
;
}
if
(
this
.
exclude_matches_
.
matches
(
uri
)
)
{
return
false
;
}
if
(
this
.
options
.
include_globs
!
=
null
)
{
if
(
!
this
.
include_globs_
.
matches
(
uri
.
spec
)
)
{
return
false
;
}
}
if
(
this
.
exclude_globs_
.
matches
(
uri
.
spec
)
)
{
return
false
;
}
return
true
;
}
matches
(
window
)
{
let
uri
=
window
.
document
.
documentURIObject
;
let
principal
=
window
.
document
.
nodePrincipal
;
if
(
window
.
navigator
.
mozAddonManager
!
=
=
undefined
)
{
return
false
;
}
if
(
this
.
match_about_blank
)
{
if
(
uri
.
spec
=
=
=
"
about
:
blank
"
&
&
window
=
=
=
window
.
top
&
&
principal
.
isNullPrincipal
)
{
return
true
;
}
if
(
[
"
about
:
blank
"
"
about
:
srcdoc
"
]
.
includes
(
uri
.
spec
)
)
{
uri
=
principal
.
URI
;
}
}
if
(
Services
.
netUtils
.
URIChainHasFlags
(
uri
Ci
.
nsIProtocolHandler
.
URI_INHERITS_SECURITY_CONTEXT
)
)
{
if
(
!
this
.
match_about_blank
)
{
return
false
;
}
uri
=
principal
.
URI
;
}
if
(
!
this
.
matchesURI
(
uri
)
)
{
return
false
;
}
if
(
this
.
options
.
frame_id
!
=
null
)
{
if
(
WebNavigationFrames
.
getFrameId
(
window
)
!
=
this
.
options
.
frame_id
)
{
return
false
;
}
}
else
if
(
!
this
.
options
.
all_frames
&
&
window
.
top
!
=
window
)
{
return
false
;
}
return
true
;
}
cleanup
(
window
)
{
if
(
!
this
.
remove_css
)
{
let
winUtils
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
type
=
this
.
css_origin
=
=
=
"
user
"
?
winUtils
.
USER_SHEET
:
winUtils
.
AUTHOR_SHEET
;
for
(
let
url
of
this
.
cssURLs
)
{
runSafeSyncWithoutClone
(
winUtils
.
removeSheetUsingURIString
url
type
)
;
}
}
}
tryInject
(
window
sandbox
shouldRun
when
)
{
if
(
shouldRun
(
"
document_start
"
)
)
{
let
{
cssURLs
}
=
this
;
if
(
cssURLs
.
length
>
0
)
{
let
winUtils
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
method
=
this
.
remove_css
?
winUtils
.
removeSheetUsingURIString
:
winUtils
.
loadSheetUsingURIString
;
let
type
=
this
.
css_origin
=
=
=
"
user
"
?
winUtils
.
USER_SHEET
:
winUtils
.
AUTHOR_SHEET
;
for
(
let
url
of
cssURLs
)
{
runSafeSyncWithoutClone
(
method
url
type
)
;
}
this
.
deferred
.
resolve
(
)
;
}
}
let
scheduled
=
this
.
run_at
|
|
"
document_idle
"
;
if
(
shouldRun
(
scheduled
)
)
{
let
scriptsPromise
=
Promise
.
all
(
this
.
compileScripts
(
)
)
;
if
(
this
.
run_at
=
=
=
"
document_start
"
&
&
when
=
=
=
"
document_start
"
)
{
window
.
document
.
blockParsing
(
scriptsPromise
)
;
}
this
.
deferred
.
resolve
(
scriptsPromise
.
then
(
scripts
=
>
{
let
result
;
for
(
let
script
of
scripts
)
{
result
=
script
.
executeInGlobal
(
sandbox
)
;
}
if
(
this
.
options
.
jsCode
)
{
result
=
Cu
.
evalInSandbox
(
this
.
options
.
jsCode
sandbox
"
latest
"
)
;
}
return
result
;
}
)
)
;
}
}
}
;
function
getWindowMessageManager
(
contentWindow
)
{
let
ir
=
contentWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
;
try
{
return
ir
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
}
catch
(
e
)
{
return
null
;
}
}
var
DocumentManager
;
var
ExtensionManager
;
class
ContentScriptContextChild
extends
BaseContext
{
constructor
(
extension
contentWindow
contextOptions
=
{
}
)
{
super
(
"
content_child
"
extension
)
;
let
{
isExtensionPage
}
=
contextOptions
;
this
.
isExtensionPage
=
isExtensionPage
;
this
.
setContentWindow
(
contentWindow
)
;
let
frameId
=
WebNavigationFrames
.
getFrameId
(
contentWindow
)
;
this
.
frameId
=
frameId
;
this
.
scripts
=
[
]
;
let
contentPrincipal
=
contentWindow
.
document
.
nodePrincipal
;
let
ssm
=
Services
.
scriptSecurityManager
;
let
attrs
=
contentPrincipal
.
originAttributes
;
let
extensionPrincipal
=
ssm
.
createCodebasePrincipal
(
this
.
extension
.
baseURI
attrs
)
;
let
principal
;
if
(
ssm
.
isSystemPrincipal
(
contentPrincipal
)
)
{
principal
=
ssm
.
createNullPrincipal
(
attrs
)
;
}
else
{
principal
=
[
contentPrincipal
extensionPrincipal
]
;
}
if
(
isExtensionPage
)
{
if
(
ExtensionManagement
.
getAddonIdForWindow
(
this
.
contentWindow
)
!
=
this
.
extension
.
id
)
{
throw
new
Error
(
"
Invalid
target
window
for
this
extension
context
"
)
;
}
this
.
sandbox
=
Cu
.
Sandbox
(
contentWindow
{
sandboxPrototype
:
contentWindow
sameZoneAs
:
contentWindow
wantXrays
:
false
isWebExtensionContentScript
:
true
}
)
;
}
else
{
let
metadata
=
{
"
inner
-
window
-
id
"
:
this
.
innerWindowID
addonId
:
extensionPrincipal
.
addonId
}
;
this
.
sandbox
=
Cu
.
Sandbox
(
principal
{
metadata
sandboxPrototype
:
contentWindow
sameZoneAs
:
contentWindow
wantXrays
:
true
isWebExtensionContentScript
:
true
wantExportHelpers
:
true
wantGlobalProperties
:
[
"
XMLHttpRequest
"
"
fetch
"
]
originAttributes
:
attrs
}
)
;
Cu
.
evalInSandbox
(
window
.
JSON
=
JSON
;
window
.
XMLHttpRequest
=
XMLHttpRequest
;
window
.
fetch
=
fetch
;
this
.
sandbox
)
;
}
Object
.
defineProperty
(
this
"
principal
"
{
value
:
Cu
.
getObjectPrincipal
(
this
.
sandbox
)
enumerable
:
true
configurable
:
true
}
)
;
this
.
url
=
contentWindow
.
location
.
href
;
defineLazyGetter
(
this
"
chromeObj
"
(
)
=
>
{
let
chromeObj
=
Cu
.
createObjectIn
(
this
.
sandbox
)
;
Schemas
.
inject
(
chromeObj
this
.
childManager
)
;
return
chromeObj
;
}
)
;
Schemas
.
exportLazyGetter
(
this
.
sandbox
"
browser
"
(
)
=
>
this
.
chromeObj
)
;
Schemas
.
exportLazyGetter
(
this
.
sandbox
"
chrome
"
(
)
=
>
this
.
chromeObj
)
;
if
(
isExtensionPage
)
{
Schemas
.
exportLazyGetter
(
this
.
contentWindow
"
browser
"
(
)
=
>
this
.
chromeObj
)
;
Schemas
.
exportLazyGetter
(
this
.
contentWindow
"
chrome
"
(
)
=
>
this
.
chromeObj
)
;
}
}
get
cloneScope
(
)
{
return
this
.
sandbox
;
}
execute
(
script
shouldRun
when
)
{
script
.
tryInject
(
this
.
contentWindow
this
.
sandbox
shouldRun
when
)
;
}
addScript
(
script
when
)
{
let
state
=
DocumentManager
.
getWindowState
(
this
.
contentWindow
)
;
this
.
execute
(
script
scheduled
=
>
isWhenBeforeOrSame
(
scheduled
state
)
when
)
;
if
(
state
!
=
"
document_idle
"
|
|
script
.
requiresCleanup
)
{
this
.
scripts
.
push
(
script
)
;
}
}
triggerScripts
(
documentState
)
{
for
(
let
script
of
this
.
scripts
)
{
this
.
execute
(
script
scheduled
=
>
scheduled
=
=
documentState
documentState
)
;
}
if
(
documentState
=
=
"
document_idle
"
)
{
this
.
scripts
=
this
.
scripts
.
filter
(
script
=
>
script
.
requiresCleanup
)
;
}
}
close
(
)
{
super
.
unload
(
)
;
if
(
this
.
contentWindow
)
{
for
(
let
script
of
this
.
scripts
)
{
if
(
script
.
requiresCleanup
)
{
script
.
cleanup
(
this
.
contentWindow
)
;
}
}
if
(
this
.
isExtensionPage
)
{
Cu
.
createObjectIn
(
this
.
contentWindow
{
defineAs
:
"
browser
"
}
)
;
Cu
.
createObjectIn
(
this
.
contentWindow
{
defineAs
:
"
chrome
"
}
)
;
}
}
Cu
.
nukeSandbox
(
this
.
sandbox
)
;
this
.
sandbox
=
null
;
}
}
defineLazyGetter
(
ContentScriptContextChild
.
prototype
"
messenger
"
function
(
)
{
let
sender
=
{
id
:
this
.
extension
.
id
frameId
:
this
.
frameId
url
:
this
.
url
}
;
let
filter
=
{
extensionId
:
this
.
extension
.
id
}
;
let
optionalFilter
=
{
frameId
:
this
.
frameId
}
;
return
new
Messenger
(
this
[
this
.
messageManager
]
sender
filter
optionalFilter
)
;
}
)
;
defineLazyGetter
(
ContentScriptContextChild
.
prototype
"
childManager
"
function
(
)
{
let
localApis
=
{
}
;
apiManager
.
generateAPIs
(
this
localApis
)
;
let
childManager
=
new
ChildAPIManager
(
this
this
.
messageManager
localApis
{
envType
:
"
content_parent
"
url
:
this
.
url
}
)
;
this
.
callOnClose
(
childManager
)
;
return
childManager
;
}
)
;
DocumentManager
=
{
extensionCount
:
0
contentScriptWindows
:
new
Map
(
)
extensionPageWindows
:
new
Map
(
)
init
(
)
{
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
Services
.
obs
.
addObserver
(
this
"
http
-
on
-
opening
-
request
"
false
)
;
}
Services
.
obs
.
addObserver
(
this
"
content
-
document
-
global
-
created
"
false
)
;
Services
.
obs
.
addObserver
(
this
"
document
-
element
-
inserted
"
false
)
;
Services
.
obs
.
addObserver
(
this
"
inner
-
window
-
destroyed
"
false
)
;
Services
.
obs
.
addObserver
(
this
"
memory
-
pressure
"
false
)
;
}
uninit
(
)
{
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
Services
.
obs
.
removeObserver
(
this
"
http
-
on
-
opening
-
request
"
)
;
}
Services
.
obs
.
removeObserver
(
this
"
content
-
document
-
global
-
created
"
)
;
Services
.
obs
.
removeObserver
(
this
"
document
-
element
-
inserted
"
)
;
Services
.
obs
.
removeObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
Services
.
obs
.
removeObserver
(
this
"
memory
-
pressure
"
)
;
}
getWindowState
(
contentWindow
)
{
let
readyState
=
contentWindow
.
document
.
readyState
;
if
(
readyState
=
=
"
complete
"
)
{
return
"
document_idle
"
;
}
if
(
readyState
=
=
"
interactive
"
)
{
return
"
document_end
"
;
}
return
"
document_start
"
;
}
loadInto
(
window
)
{
const
{
NO_PRIVILEGES
CONTENTSCRIPT_PRIVILEGES
FULL_PRIVILEGES
}
=
ExtensionManagement
.
API_LEVELS
;
let
extensionId
=
ExtensionManagement
.
getAddonIdForWindow
(
window
)
;
let
apiLevel
=
ExtensionManagement
.
getAPILevelForWindow
(
window
extensionId
)
;
if
(
apiLevel
!
=
NO_PRIVILEGES
)
{
let
extension
=
ExtensionManager
.
get
(
extensionId
)
;
if
(
extension
)
{
if
(
apiLevel
=
=
CONTENTSCRIPT_PRIVILEGES
)
{
DocumentManager
.
getExtensionPageContext
(
extension
window
)
;
}
else
if
(
apiLevel
=
=
FULL_PRIVILEGES
)
{
ExtensionChild
.
createExtensionContext
(
extension
window
)
;
}
}
}
}
observers
:
{
"
content
-
document
-
global
-
created
"
(
subject
topic
data
)
{
this
.
observers
[
"
document
-
element
-
inserted
"
]
.
call
(
this
subject
.
document
topic
data
)
;
}
"
document
-
element
-
inserted
"
(
subject
topic
data
)
{
let
document
=
subject
;
let
window
=
document
&
&
document
.
defaultView
;
if
(
!
document
|
|
!
document
.
location
|
|
!
window
)
{
return
;
}
let
mm
=
getWindowMessageManager
(
window
)
;
if
(
!
mm
|
|
!
ExtensionContent
.
globals
.
has
(
mm
)
)
{
return
;
}
if
(
topic
=
=
=
"
document
-
element
-
inserted
"
)
{
this
.
loadInto
(
window
)
;
this
.
trigger
(
"
document_start
"
window
)
;
}
window
.
addEventListener
(
"
DOMContentLoaded
"
this
true
)
;
window
.
addEventListener
(
"
load
"
this
true
)
;
}
"
inner
-
window
-
destroyed
"
(
subject
topic
data
)
{
let
windowId
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
MessageChannel
.
abortResponses
(
{
innerWindowID
:
windowId
}
)
;
if
(
this
.
contentScriptWindows
.
has
(
windowId
)
)
{
let
extensions
=
this
.
contentScriptWindows
.
get
(
windowId
)
;
for
(
let
[
context
]
of
extensions
)
{
context
.
close
(
)
;
}
this
.
contentScriptWindows
.
delete
(
windowId
)
;
}
if
(
this
.
extensionPageWindows
.
has
(
windowId
)
)
{
let
context
=
this
.
extensionPageWindows
.
get
(
windowId
)
;
context
.
close
(
)
;
this
.
extensionPageWindows
.
delete
(
windowId
)
;
}
ExtensionChild
.
destroyExtensionContext
(
windowId
)
;
}
"
http
-
on
-
opening
-
request
"
(
subject
topic
data
)
{
let
{
loadInfo
}
=
subject
.
QueryInterface
(
Ci
.
nsIChannel
)
;
if
(
loadInfo
)
{
let
{
externalContentPolicyType
:
type
}
=
loadInfo
;
if
(
type
=
=
=
Ci
.
nsIContentPolicy
.
TYPE_DOCUMENT
|
|
type
=
=
=
Ci
.
nsIContentPolicy
.
TYPE_SUBDOCUMENT
)
{
this
.
preloadScripts
(
subject
.
URI
loadInfo
)
;
}
}
}
"
memory
-
pressure
"
(
subject
topic
data
)
{
let
timeout
=
data
=
=
=
"
heap
-
minimize
"
?
0
:
undefined
;
for
(
let
cache
of
ChromeUtils
.
nondeterministicGetWeakSetKeys
(
scriptCaches
)
)
{
cache
.
clear
(
timeout
)
;
}
}
}
observe
(
subject
topic
data
)
{
this
.
observers
[
topic
]
.
call
(
this
subject
topic
data
)
;
}
handleEvent
(
event
)
{
let
window
=
event
.
currentTarget
;
if
(
event
.
target
!
=
window
.
document
)
{
return
;
}
window
.
removeEventListener
(
event
.
type
this
true
)
;
if
(
event
.
type
=
=
"
DOMContentLoaded
"
)
{
if
(
window
.
location
.
href
=
=
=
"
about
:
blank
"
)
{
this
.
loadInto
(
window
)
;
this
.
trigger
(
"
document_start
"
window
)
;
}
this
.
trigger
(
"
document_end
"
window
)
;
}
else
if
(
event
.
type
=
=
"
load
"
)
{
this
.
trigger
(
"
document_idle
"
window
)
;
}
}
executeScript
(
global
extensionId
options
)
{
let
extension
=
ExtensionManager
.
get
(
extensionId
)
;
let
executeInWin
=
(
window
)
=
>
{
let
deferred
=
PromiseUtils
.
defer
(
)
;
let
script
=
new
Script
(
extension
options
deferred
)
;
if
(
script
.
matches
(
window
)
)
{
let
context
=
this
.
getContentScriptContext
(
extension
window
)
;
context
.
addScript
(
script
)
;
return
deferred
.
promise
;
}
return
null
;
}
;
let
promises
=
Array
.
from
(
this
.
enumerateWindows
(
global
.
docShell
)
executeInWin
)
.
filter
(
promise
=
>
promise
)
;
if
(
!
promises
.
length
)
{
let
details
=
{
}
;
for
(
let
key
of
[
"
all_frames
"
"
frame_id
"
"
match_about_blank
"
"
matchesHost
"
]
)
{
if
(
key
in
options
)
{
details
[
key
]
=
options
[
key
]
;
}
}
return
Promise
.
reject
(
{
message
:
No
window
matching
{
JSON
.
stringify
(
details
)
}
}
)
;
}
if
(
!
options
.
all_frames
&
&
promises
.
length
>
1
)
{
return
Promise
.
reject
(
{
message
:
Internal
error
:
Script
matched
multiple
windows
}
)
;
}
return
Promise
.
all
(
promises
)
;
}
enumerateWindows
:
function
*
(
docShell
)
{
let
window
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
yield
window
;
for
(
let
i
=
0
;
i
<
docShell
.
childCount
;
i
+
+
)
{
let
child
=
docShell
.
getChildAt
(
i
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
yield
*
this
.
enumerateWindows
(
child
)
;
}
}
getContentScriptGlobalsForWindow
(
window
)
{
let
winId
=
getInnerWindowID
(
window
)
;
let
extensions
=
this
.
contentScriptWindows
.
get
(
winId
)
;
if
(
extensions
)
{
return
Array
.
from
(
extensions
.
values
(
)
ctx
=
>
ctx
.
sandbox
)
;
}
return
[
]
;
}
getContentScriptContext
(
extension
window
)
{
let
winId
=
getInnerWindowID
(
window
)
;
if
(
!
this
.
contentScriptWindows
.
has
(
winId
)
)
{
this
.
contentScriptWindows
.
set
(
winId
new
Map
(
)
)
;
}
let
extensions
=
this
.
contentScriptWindows
.
get
(
winId
)
;
if
(
!
extensions
.
has
(
extension
.
id
)
)
{
let
context
=
new
ContentScriptContextChild
(
extension
window
)
;
extensions
.
set
(
extension
.
id
context
)
;
}
return
extensions
.
get
(
extension
.
id
)
;
}
getExtensionPageContext
(
extension
window
)
{
let
winId
=
getInnerWindowID
(
window
)
;
let
context
=
this
.
extensionPageWindows
.
get
(
winId
)
;
if
(
!
context
)
{
let
context
=
new
ContentScriptContextChild
(
extension
window
{
isExtensionPage
:
true
}
)
;
this
.
extensionPageWindows
.
set
(
winId
context
)
;
}
return
context
;
}
startupExtension
(
extensionId
)
{
if
(
this
.
extensionCount
=
=
0
)
{
this
.
init
(
)
;
}
this
.
extensionCount
+
+
;
let
extension
=
ExtensionManager
.
get
(
extensionId
)
;
for
(
let
global
of
ExtensionContent
.
globals
.
keys
(
)
)
{
for
(
let
window
of
this
.
enumerateWindows
(
global
.
docShell
)
)
{
for
(
let
script
of
extension
.
scripts
)
{
if
(
script
.
matches
(
window
)
)
{
let
context
=
this
.
getContentScriptContext
(
extension
window
)
;
context
.
addScript
(
script
)
;
}
}
}
}
}
shutdownExtension
(
extensionId
)
{
for
(
let
[
extensions
]
of
this
.
contentScriptWindows
)
{
let
context
=
extensions
.
get
(
extensionId
)
;
if
(
context
)
{
context
.
close
(
)
;
extensions
.
delete
(
extensionId
)
;
}
}
for
(
let
[
winId
context
]
of
this
.
extensionPageWindows
)
{
if
(
context
.
extension
.
id
=
=
extensionId
)
{
context
.
close
(
)
;
this
.
extensionPageWindows
.
delete
(
winId
)
;
}
}
ExtensionChild
.
shutdownExtension
(
extensionId
)
;
MessageChannel
.
abortResponses
(
{
extensionId
}
)
;
this
.
extensionCount
-
-
;
if
(
this
.
extensionCount
=
=
0
)
{
this
.
uninit
(
)
;
}
}
preloadScripts
(
uri
loadInfo
)
{
for
(
let
extension
of
ExtensionManager
.
extensions
.
values
(
)
)
{
for
(
let
script
of
extension
.
scripts
)
{
if
(
script
.
matchesLoadInfo
(
uri
loadInfo
)
)
{
script
.
compileScripts
(
)
;
}
}
}
}
trigger
(
when
window
)
{
if
(
when
=
=
=
"
document_start
"
)
{
for
(
let
extension
of
ExtensionManager
.
extensions
.
values
(
)
)
{
for
(
let
script
of
extension
.
scripts
)
{
if
(
script
.
matches
(
window
)
)
{
let
context
=
this
.
getContentScriptContext
(
extension
window
)
;
context
.
addScript
(
script
when
)
;
}
}
}
}
else
{
let
contexts
=
this
.
contentScriptWindows
.
get
(
getInnerWindowID
(
window
)
)
|
|
new
Map
(
)
;
for
(
let
context
of
contexts
.
values
(
)
)
{
context
.
triggerScripts
(
when
)
;
}
}
}
}
;
class
BrowserExtensionContent
extends
EventEmitter
{
constructor
(
data
)
{
super
(
)
;
this
.
id
=
data
.
id
;
this
.
uuid
=
data
.
uuid
;
this
.
data
=
data
;
this
.
instanceId
=
data
.
instanceId
;
this
.
MESSAGE_EMIT_EVENT
=
Extension
:
EmitEvent
:
{
this
.
instanceId
}
;
Services
.
cpmm
.
addMessageListener
(
this
.
MESSAGE_EMIT_EVENT
this
)
;
defineLazyGetter
(
this
"
scripts
"
(
)
=
>
{
return
data
.
content_scripts
.
map
(
scriptData
=
>
new
Script
(
this
scriptData
)
)
;
}
)
;
this
.
webAccessibleResources
=
new
MatchGlobs
(
data
.
webAccessibleResources
)
;
this
.
whiteListedHosts
=
new
MatchPattern
(
data
.
whiteListedHosts
)
;
this
.
permissions
=
data
.
permissions
;
this
.
principal
=
data
.
principal
;
this
.
localeData
=
new
LocaleData
(
data
.
localeData
)
;
this
.
manifest
=
data
.
manifest
;
this
.
baseURI
=
Services
.
io
.
newURI
(
data
.
baseURL
)
;
this
.
views
=
new
Set
(
)
;
this
.
devtoolsViews
=
new
Set
(
)
;
let
uri
=
Services
.
io
.
newURI
(
data
.
resourceURL
)
;
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
ExtensionManagement
.
startupExtension
(
this
.
uuid
uri
this
)
;
}
}
shutdown
(
)
{
Services
.
cpmm
.
removeMessageListener
(
this
.
MESSAGE_EMIT_EVENT
this
)
;
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
ExtensionManagement
.
shutdownExtension
(
this
.
uuid
)
;
}
}
emit
(
event
.
.
.
args
)
{
Services
.
cpmm
.
sendAsyncMessage
(
this
.
MESSAGE_EMIT_EVENT
{
event
args
}
)
;
super
.
emit
(
event
.
.
.
args
)
;
}
receiveMessage
(
{
name
data
}
)
{
if
(
name
=
=
=
this
.
MESSAGE_EMIT_EVENT
)
{
super
.
emit
(
data
.
event
.
.
.
data
.
args
)
;
}
}
localizeMessage
(
.
.
.
args
)
{
return
this
.
localeData
.
localizeMessage
(
.
.
.
args
)
;
}
localize
(
.
.
.
args
)
{
return
this
.
localeData
.
localize
(
.
.
.
args
)
;
}
hasPermission
(
perm
)
{
let
match
=
/
^
manifest
:
(
.
*
)
/
.
exec
(
perm
)
;
if
(
match
)
{
return
this
.
manifest
[
match
[
1
]
]
!
=
null
;
}
return
this
.
permissions
.
has
(
perm
)
;
}
}
defineLazyGetter
(
BrowserExtensionContent
.
prototype
"
staticScripts
"
(
)
=
>
{
return
new
ScriptCache
(
{
hasReturnValue
:
false
}
)
;
}
)
;
defineLazyGetter
(
BrowserExtensionContent
.
prototype
"
dynamicScripts
"
(
)
=
>
{
return
new
ScriptCache
(
{
hasReturnValue
:
true
}
)
;
}
)
;
ExtensionManager
=
{
extensions
:
new
Map
(
)
init
(
)
{
Schemas
.
init
(
)
;
ExtensionChild
.
initOnce
(
)
;
Services
.
cpmm
.
addMessageListener
(
"
Extension
:
Startup
"
this
)
;
Services
.
cpmm
.
addMessageListener
(
"
Extension
:
Shutdown
"
this
)
;
Services
.
cpmm
.
addMessageListener
(
"
Extension
:
FlushJarCache
"
this
)
;
if
(
Services
.
cpmm
.
initialProcessData
&
&
"
Extension
:
Extensions
"
in
Services
.
cpmm
.
initialProcessData
)
{
let
extensions
=
Services
.
cpmm
.
initialProcessData
[
"
Extension
:
Extensions
"
]
;
for
(
let
data
of
extensions
)
{
this
.
extensions
.
set
(
data
.
id
new
BrowserExtensionContent
(
data
)
)
;
DocumentManager
.
startupExtension
(
data
.
id
)
;
}
}
}
get
(
extensionId
)
{
return
this
.
extensions
.
get
(
extensionId
)
;
}
receiveMessage
(
{
name
data
}
)
{
let
extension
;
switch
(
name
)
{
case
"
Extension
:
Startup
"
:
{
extension
=
new
BrowserExtensionContent
(
data
)
;
this
.
extensions
.
set
(
data
.
id
extension
)
;
DocumentManager
.
startupExtension
(
data
.
id
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
Extension
:
StartupComplete
"
)
;
break
;
}
case
"
Extension
:
Shutdown
"
:
{
extension
=
this
.
extensions
.
get
(
data
.
id
)
;
extension
.
shutdown
(
)
;
DocumentManager
.
shutdownExtension
(
data
.
id
)
;
this
.
extensions
.
delete
(
data
.
id
)
;
break
;
}
case
"
Extension
:
FlushJarCache
"
:
{
flushJarCache
(
data
.
path
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
Extension
:
FlushJarCacheComplete
"
)
;
break
;
}
}
}
}
;
class
ExtensionGlobal
{
constructor
(
global
)
{
this
.
global
=
global
;
MessageChannel
.
addListener
(
global
"
Extension
:
Capture
"
this
)
;
MessageChannel
.
addListener
(
global
"
Extension
:
DetectLanguage
"
this
)
;
MessageChannel
.
addListener
(
global
"
Extension
:
Execute
"
this
)
;
MessageChannel
.
addListener
(
global
"
WebNavigation
:
GetFrame
"
this
)
;
MessageChannel
.
addListener
(
global
"
WebNavigation
:
GetAllFrames
"
this
)
;
this
.
windowId
=
global
.
content
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
outerWindowID
;
global
.
sendAsyncMessage
(
"
Extension
:
TopWindowID
"
{
windowId
:
this
.
windowId
}
)
;
}
uninit
(
)
{
this
.
global
.
sendAsyncMessage
(
"
Extension
:
RemoveTopWindowID
"
{
windowId
:
this
.
windowId
}
)
;
}
get
messageFilterStrict
(
)
{
return
{
innerWindowID
:
getInnerWindowID
(
this
.
global
.
content
)
}
;
}
receiveMessage
(
{
target
messageName
recipient
data
}
)
{
switch
(
messageName
)
{
case
"
Extension
:
Capture
"
:
return
this
.
handleExtensionCapture
(
data
.
width
data
.
height
data
.
options
)
;
case
"
Extension
:
DetectLanguage
"
:
return
this
.
handleDetectLanguage
(
target
)
;
case
"
Extension
:
Execute
"
:
return
this
.
handleExtensionExecute
(
target
recipient
.
extensionId
data
.
options
)
;
case
"
WebNavigation
:
GetFrame
"
:
return
this
.
handleWebNavigationGetFrame
(
data
.
options
)
;
case
"
WebNavigation
:
GetAllFrames
"
:
return
this
.
handleWebNavigationGetAllFrames
(
)
;
}
}
handleExtensionCapture
(
width
height
options
)
{
let
win
=
this
.
global
.
content
;
const
XHTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
let
canvas
=
win
.
document
.
createElementNS
(
XHTML_NS
"
canvas
"
)
;
canvas
.
width
=
width
;
canvas
.
height
=
height
;
canvas
.
mozOpaque
=
true
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
ctx
.
scale
(
canvas
.
width
/
win
.
innerWidth
canvas
.
height
/
win
.
innerHeight
)
;
ctx
.
drawWindow
(
win
win
.
scrollX
win
.
scrollY
win
.
innerWidth
win
.
innerHeight
"
#
fff
"
)
;
return
canvas
.
toDataURL
(
image
/
{
options
.
format
}
options
.
quality
/
100
)
;
}
handleDetectLanguage
(
target
)
{
let
doc
=
target
.
content
.
document
;
return
promiseDocumentReady
(
doc
)
.
then
(
(
)
=
>
{
let
elem
=
doc
.
documentElement
;
let
language
=
(
elem
.
getAttribute
(
"
xml
:
lang
"
)
|
|
elem
.
getAttribute
(
"
lang
"
)
|
|
doc
.
contentLanguage
|
|
null
)
;
let
tld
=
doc
.
location
.
hostname
.
match
(
/
[
a
-
z
]
*
/
)
[
0
]
;
let
encoder
=
Cc
[
"
mozilla
.
org
/
layout
/
documentEncoder
;
1
?
type
=
text
/
plain
"
]
.
createInstance
(
Ci
.
nsIDocumentEncoder
)
;
encoder
.
init
(
doc
"
text
/
plain
"
encoder
.
SkipInvisibleContent
)
;
let
text
=
encoder
.
encodeToStringWithMaxLength
(
60
*
1024
)
;
let
encoding
=
doc
.
characterSet
;
return
LanguageDetector
.
detectLanguage
(
{
language
tld
text
encoding
}
)
.
then
(
result
=
>
result
.
language
=
=
=
"
un
"
?
"
und
"
:
result
.
language
)
;
}
)
;
}
handleExtensionExecute
(
target
extensionId
options
)
{
return
DocumentManager
.
executeScript
(
target
extensionId
options
)
.
then
(
result
=
>
{
try
{
Cu
.
cloneInto
(
result
target
)
;
}
catch
(
e
)
{
return
Promise
.
reject
(
{
message
:
"
Script
returned
non
-
structured
-
clonable
data
"
}
)
;
}
return
result
;
}
)
;
}
handleWebNavigationGetFrame
(
{
frameId
}
)
{
return
WebNavigationFrames
.
getFrame
(
this
.
global
.
docShell
frameId
)
;
}
handleWebNavigationGetAllFrames
(
)
{
return
WebNavigationFrames
.
getAllFrames
(
this
.
global
.
docShell
)
;
}
}
this
.
ExtensionContent
=
{
globals
:
new
Map
(
)
init
(
global
)
{
this
.
globals
.
set
(
global
new
ExtensionGlobal
(
global
)
)
;
if
(
ExtensionManagement
.
isExtensionProcess
)
{
ExtensionChild
.
init
(
global
)
;
}
}
uninit
(
global
)
{
if
(
ExtensionManagement
.
isExtensionProcess
)
{
ExtensionChild
.
uninit
(
global
)
;
}
this
.
globals
.
get
(
global
)
.
uninit
(
)
;
this
.
globals
.
delete
(
global
)
;
}
getContentScriptGlobalsForWindow
(
window
)
{
return
DocumentManager
.
getContentScriptGlobalsForWindow
(
window
)
;
}
}
;
ExtensionManager
.
init
(
)
;
