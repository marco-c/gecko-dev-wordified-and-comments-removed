"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
loadExtScriptInScope
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionUtils
"
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
require
"
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
let
_internalGlobals
=
new
WeakMap
(
)
;
this
.
loadExtScriptInScope
=
(
scriptUrl
apiManager
)
=
>
{
let
global
=
_internalGlobals
.
get
(
apiManager
)
;
if
(
!
global
)
{
global
=
Object
.
create
(
null
)
;
global
.
extensions
=
apiManager
;
global
.
global
=
global
;
global
.
_internalScriptScopes
=
[
]
;
_internalGlobals
.
set
(
apiManager
global
)
;
}
let
scope
=
Object
.
create
(
global
{
console
:
{
get
(
)
{
return
ExtensionUtils
.
console
;
}
}
}
)
;
Services
.
scriptloader
.
loadSubScript
(
scriptUrl
scope
"
UTF
-
8
"
)
;
global
.
_internalScriptScopes
.
push
(
scope
)
;
}
;
this
.
getGlobalForTesting
=
(
type
)
=
>
{
if
(
type
=
=
=
"
chrome
"
)
{
let
{
Management
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
;
let
global
=
_internalGlobals
.
get
(
Management
)
;
if
(
global
)
{
return
global
;
}
throw
new
Error
(
"
Global
not
found
.
Did
you
really
load
an
ext
-
script
?
"
)
;
}
throw
new
Error
(
getGlobalForTesting
:
Parameter
not
supported
yet
:
{
type
}
)
;
}
;
