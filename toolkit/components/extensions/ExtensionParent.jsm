"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionParent
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
E10SUtils
"
"
resource
:
/
/
/
modules
/
E10SUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MessageChannel
"
"
resource
:
/
/
gre
/
modules
/
MessageChannel
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NativeApp
"
"
resource
:
/
/
gre
/
modules
/
NativeMessaging
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Schemas
"
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionCommon
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
var
{
BaseContext
SchemaAPIManager
}
=
ExtensionCommon
;
var
{
MessageManagerProxy
SpreadArgs
defineLazyGetter
findPathInObject
promiseDocumentLoaded
promiseEvent
promiseObserved
}
=
ExtensionUtils
;
const
BASE_SCHEMA
=
"
chrome
:
/
/
extensions
/
content
/
schemas
/
manifest
.
json
"
;
const
CATEGORY_EXTENSION_SCHEMAS
=
"
webextension
-
schemas
"
;
const
CATEGORY_EXTENSION_SCRIPTS
=
"
webextension
-
scripts
"
;
const
XUL_URL
=
"
data
:
application
/
vnd
.
mozilla
.
xul
+
xml
;
charset
=
utf
-
8
"
+
encodeURI
(
<
?
xml
version
=
"
1
.
0
"
?
>
<
window
id
=
"
documentElement
"
/
>
)
;
let
schemaURLs
=
new
Set
(
)
;
if
(
!
AppConstants
.
RELEASE_OR_BETA
)
{
schemaURLs
.
add
(
"
chrome
:
/
/
extensions
/
content
/
schemas
/
experiments
.
json
"
)
;
}
let
GlobalManager
;
let
ParentAPIManager
;
let
ProxyMessenger
;
let
apiManager
=
new
class
extends
SchemaAPIManager
{
constructor
(
)
{
super
(
"
main
"
)
;
this
.
initialized
=
null
;
}
lazyInit
(
)
{
if
(
this
.
initialized
)
{
return
this
.
initialized
;
}
let
promise
=
Schemas
.
load
(
BASE_SCHEMA
)
.
then
(
(
)
=
>
{
let
promises
=
[
]
;
for
(
let
[
url
]
of
XPCOMUtils
.
enumerateCategoryEntries
(
CATEGORY_EXTENSION_SCHEMAS
)
)
{
promises
.
push
(
Schemas
.
load
(
url
)
)
;
}
for
(
let
url
of
schemaURLs
)
{
promises
.
push
(
Schemas
.
load
(
url
)
)
;
}
return
Promise
.
all
(
promises
)
;
}
)
;
for
(
let
[
value
]
of
XPCOMUtils
.
enumerateCategoryEntries
(
CATEGORY_EXTENSION_SCRIPTS
)
)
{
this
.
loadScript
(
value
)
;
}
Services
.
mm
.
addMessageListener
(
"
Extension
:
GetTabAndWindowId
"
this
)
;
this
.
initialized
=
promise
;
return
this
.
initialized
;
}
receiveMessage
(
{
name
target
sync
}
)
{
if
(
name
=
=
=
"
Extension
:
GetTabAndWindowId
"
)
{
let
result
=
this
.
global
.
tabTracker
.
getBrowserData
(
target
)
;
if
(
result
.
tabId
)
{
if
(
sync
)
{
return
result
;
}
target
.
messageManager
.
sendAsyncMessage
(
"
Extension
:
SetTabAndWindowId
"
result
)
;
}
}
}
registerSchemaAPI
(
namespace
envType
getAPI
)
{
if
(
envType
=
=
"
addon_parent
"
|
|
envType
=
=
"
content_parent
"
|
|
envType
=
=
"
devtools_parent
"
)
{
super
.
registerSchemaAPI
(
namespace
envType
getAPI
)
;
}
}
}
(
)
;
ProxyMessenger
=
{
_initialized
:
false
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
true
;
let
messageManagers
=
[
Services
.
mm
Services
.
ppmm
]
;
MessageChannel
.
addListener
(
messageManagers
"
Extension
:
Connect
"
this
)
;
MessageChannel
.
addListener
(
messageManagers
"
Extension
:
Message
"
this
)
;
MessageChannel
.
addListener
(
messageManagers
"
Extension
:
Port
:
Disconnect
"
this
)
;
MessageChannel
.
addListener
(
messageManagers
"
Extension
:
Port
:
PostMessage
"
this
)
;
}
receiveMessage
(
{
target
messageName
channelId
sender
recipient
data
responseType
}
)
{
if
(
recipient
.
toNativeApp
)
{
let
{
childId
toNativeApp
}
=
recipient
;
if
(
messageName
=
=
"
Extension
:
Message
"
)
{
let
context
=
ParentAPIManager
.
getContextById
(
childId
)
;
return
new
NativeApp
(
context
toNativeApp
)
.
sendMessage
(
data
)
;
}
if
(
messageName
=
=
"
Extension
:
Connect
"
)
{
let
context
=
ParentAPIManager
.
getContextById
(
childId
)
;
NativeApp
.
onConnectNative
(
context
target
.
messageManager
data
.
portId
sender
toNativeApp
)
;
return
true
;
}
return
;
}
let
extension
=
GlobalManager
.
extensionMap
.
get
(
sender
.
extensionId
)
;
let
receiverMM
=
this
.
getMessageManagerForRecipient
(
recipient
)
;
if
(
!
extension
|
|
!
receiverMM
)
{
return
Promise
.
reject
(
{
result
:
MessageChannel
.
RESULT_NO_HANDLER
message
:
"
No
matching
message
handler
for
the
given
recipient
.
"
}
)
;
}
if
(
(
messageName
=
=
"
Extension
:
Message
"
|
|
messageName
=
=
"
Extension
:
Connect
"
)
&
&
apiManager
.
global
.
tabGetSender
)
{
apiManager
.
global
.
tabGetSender
(
extension
target
sender
)
;
}
return
MessageChannel
.
sendMessage
(
receiverMM
messageName
data
{
sender
recipient
responseType
}
)
;
}
getMessageManagerForRecipient
(
recipient
)
{
let
{
tabId
}
=
recipient
;
if
(
tabId
)
{
let
tab
=
apiManager
.
global
.
tabTracker
.
getTab
(
tabId
null
)
;
return
tab
&
&
(
tab
.
linkedBrowser
|
|
tab
.
browser
)
.
messageManager
;
}
let
extension
=
GlobalManager
.
extensionMap
.
get
(
recipient
.
extensionId
)
;
if
(
extension
)
{
return
extension
.
parentMessageManager
;
}
return
null
;
}
}
;
GlobalManager
=
{
extensionMap
:
new
Map
(
)
initialized
:
false
init
(
extension
)
{
if
(
this
.
extensionMap
.
size
=
=
0
)
{
ProxyMessenger
.
init
(
)
;
apiManager
.
on
(
"
extension
-
browser
-
inserted
"
this
.
_onExtensionBrowser
)
;
this
.
initialized
=
true
;
}
this
.
extensionMap
.
set
(
extension
.
id
extension
)
;
}
uninit
(
extension
)
{
this
.
extensionMap
.
delete
(
extension
.
id
)
;
if
(
this
.
extensionMap
.
size
=
=
0
&
&
this
.
initialized
)
{
apiManager
.
off
(
"
extension
-
browser
-
inserted
"
this
.
_onExtensionBrowser
)
;
this
.
initialized
=
false
;
}
}
_onExtensionBrowser
(
type
browser
additionalData
=
{
}
)
{
browser
.
messageManager
.
loadFrameScript
(
data
:
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionContent
.
jsm
"
)
;
ExtensionContent
.
init
(
this
)
;
addEventListener
(
"
unload
"
function
(
)
{
ExtensionContent
.
uninit
(
this
)
;
}
)
;
false
)
;
let
viewType
=
browser
.
getAttribute
(
"
webextension
-
view
-
type
"
)
;
if
(
viewType
)
{
let
data
=
{
viewType
}
;
let
{
tabTracker
}
=
apiManager
.
global
;
Object
.
assign
(
data
tabTracker
.
getBrowserData
(
browser
)
additionalData
)
;
browser
.
messageManager
.
sendAsyncMessage
(
"
Extension
:
InitExtensionView
"
data
)
;
}
}
getExtension
(
extensionId
)
{
return
this
.
extensionMap
.
get
(
extensionId
)
;
}
injectInObject
(
context
isChromeCompat
dest
)
{
apiManager
.
generateAPIs
(
context
dest
)
;
SchemaAPIManager
.
generateAPIs
(
context
context
.
extension
.
apis
dest
)
;
}
}
;
class
ProxyContextParent
extends
BaseContext
{
constructor
(
envType
extension
params
xulBrowser
principal
)
{
super
(
envType
extension
)
;
this
.
uri
=
NetUtil
.
newURI
(
params
.
url
)
;
this
.
incognito
=
params
.
incognito
;
this
.
messageManagerProxy
=
new
MessageManagerProxy
(
xulBrowser
)
;
Object
.
defineProperty
(
this
"
principal
"
{
value
:
principal
enumerable
:
true
configurable
:
true
}
)
;
this
.
listenerProxies
=
new
Map
(
)
;
apiManager
.
emit
(
"
proxy
-
context
-
load
"
this
)
;
}
get
cloneScope
(
)
{
return
this
.
sandbox
;
}
get
xulBrowser
(
)
{
return
this
.
messageManagerProxy
.
eventTarget
;
}
get
parentMessageManager
(
)
{
return
this
.
messageManagerProxy
.
messageManager
;
}
shutdown
(
)
{
this
.
unload
(
)
;
}
unload
(
)
{
if
(
this
.
unloaded
)
{
return
;
}
this
.
messageManagerProxy
.
dispose
(
)
;
super
.
unload
(
)
;
apiManager
.
emit
(
"
proxy
-
context
-
unload
"
this
)
;
}
}
defineLazyGetter
(
ProxyContextParent
.
prototype
"
apiObj
"
function
(
)
{
let
obj
=
{
}
;
GlobalManager
.
injectInObject
(
this
false
obj
)
;
return
obj
;
}
)
;
defineLazyGetter
(
ProxyContextParent
.
prototype
"
sandbox
"
function
(
)
{
return
Cu
.
Sandbox
(
this
.
principal
)
;
}
)
;
class
ContentScriptContextParent
extends
ProxyContextParent
{
}
class
ExtensionPageContextParent
extends
ProxyContextParent
{
constructor
(
envType
extension
params
xulBrowser
)
{
super
(
envType
extension
params
xulBrowser
extension
.
principal
)
;
this
.
viewType
=
params
.
viewType
;
extension
.
emit
(
"
extension
-
proxy
-
context
-
load
"
this
)
;
}
get
xulWindow
(
)
{
return
this
.
xulBrowser
.
ownerGlobal
;
}
get
currentWindow
(
)
{
if
(
this
.
viewType
!
=
=
"
background
"
)
{
return
this
.
xulWindow
;
}
}
get
windowId
(
)
{
let
{
currentWindow
}
=
this
;
let
{
windowTracker
}
=
apiManager
.
global
;
if
(
currentWindow
&
&
windowTracker
)
{
return
windowTracker
.
getId
(
currentWindow
)
;
}
}
get
tabId
(
)
{
let
{
tabTracker
}
=
apiManager
.
global
;
let
data
=
tabTracker
.
getBrowserData
(
this
.
xulBrowser
)
;
if
(
data
.
tabId
>
=
0
)
{
return
data
.
tabId
;
}
}
onBrowserChange
(
browser
)
{
super
.
onBrowserChange
(
browser
)
;
this
.
xulBrowser
=
browser
;
}
shutdown
(
)
{
apiManager
.
emit
(
"
page
-
shutdown
"
this
)
;
super
.
shutdown
(
)
;
}
}
class
DevToolsExtensionPageContextParent
extends
ExtensionPageContextParent
{
set
devToolsToolbox
(
toolbox
)
{
if
(
this
.
_devToolsToolbox
)
{
throw
new
Error
(
"
Cannot
set
the
context
DevTools
toolbox
twice
"
)
;
}
this
.
_devToolsToolbox
=
toolbox
;
return
toolbox
;
}
get
devToolsToolbox
(
)
{
return
this
.
_devToolsToolbox
;
}
set
devToolsTarget
(
contextDevToolsTarget
)
{
if
(
this
.
_devToolsTarget
)
{
throw
new
Error
(
"
Cannot
set
the
context
DevTools
target
twice
"
)
;
}
this
.
_devToolsTarget
=
contextDevToolsTarget
;
return
contextDevToolsTarget
;
}
get
devToolsTarget
(
)
{
return
this
.
_devToolsTarget
;
}
shutdown
(
)
{
if
(
this
.
_devToolsTarget
)
{
this
.
_devToolsTarget
.
destroy
(
)
;
this
.
_devToolsTarget
=
null
;
}
this
.
_devToolsToolbox
=
null
;
super
.
shutdown
(
)
;
}
}
ParentAPIManager
=
{
proxyContexts
:
new
Map
(
)
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
message
-
manager
-
close
"
false
)
;
Services
.
mm
.
addMessageListener
(
"
API
:
CreateProxyContext
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
API
:
CloseProxyContext
"
this
true
)
;
Services
.
mm
.
addMessageListener
(
"
API
:
Call
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
API
:
AddListener
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
API
:
RemoveListener
"
this
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
message
-
manager
-
close
"
)
{
let
mm
=
subject
;
for
(
let
[
childId
context
]
of
this
.
proxyContexts
)
{
if
(
context
.
parentMessageManager
=
=
=
mm
)
{
this
.
closeProxyContext
(
childId
)
;
}
}
for
(
let
extension
of
GlobalManager
.
extensionMap
.
values
(
)
)
{
if
(
extension
.
parentMessageManager
=
=
=
mm
)
{
extension
.
parentMessageManager
=
null
;
}
}
}
}
shutdownExtension
(
extensionId
)
{
for
(
let
[
childId
context
]
of
this
.
proxyContexts
)
{
if
(
context
.
extension
.
id
=
=
extensionId
)
{
context
.
shutdown
(
)
;
this
.
proxyContexts
.
delete
(
childId
)
;
}
}
}
receiveMessage
(
{
name
data
target
}
)
{
try
{
switch
(
name
)
{
case
"
API
:
CreateProxyContext
"
:
this
.
createProxyContext
(
data
target
)
;
break
;
case
"
API
:
CloseProxyContext
"
:
this
.
closeProxyContext
(
data
.
childId
)
;
break
;
case
"
API
:
Call
"
:
this
.
call
(
data
target
)
;
break
;
case
"
API
:
AddListener
"
:
this
.
addListener
(
data
target
)
;
break
;
case
"
API
:
RemoveListener
"
:
this
.
removeListener
(
data
)
;
break
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
createProxyContext
(
data
target
)
{
let
{
envType
extensionId
childId
principal
}
=
data
;
if
(
this
.
proxyContexts
.
has
(
childId
)
)
{
throw
new
Error
(
"
A
WebExtension
context
with
the
given
ID
already
exists
!
"
)
;
}
let
extension
=
GlobalManager
.
getExtension
(
extensionId
)
;
if
(
!
extension
)
{
throw
new
Error
(
No
WebExtension
found
with
ID
{
extensionId
}
)
;
}
let
context
;
if
(
envType
=
=
"
addon_parent
"
|
|
envType
=
=
"
devtools_parent
"
)
{
let
processMessageManager
=
(
target
.
messageManager
.
processMessageManager
|
|
Services
.
ppmm
.
getChildAt
(
0
)
)
;
if
(
!
extension
.
parentMessageManager
)
{
let
expectedRemoteType
=
extension
.
remote
?
E10SUtils
.
EXTENSION_REMOTE_TYPE
:
null
;
if
(
target
.
remoteType
=
=
=
expectedRemoteType
)
{
extension
.
parentMessageManager
=
processMessageManager
;
}
}
if
(
processMessageManager
!
=
=
extension
.
parentMessageManager
)
{
throw
new
Error
(
"
Attempt
to
create
privileged
extension
parent
from
incorrect
child
process
"
)
;
}
if
(
envType
=
=
"
addon_parent
"
)
{
context
=
new
ExtensionPageContextParent
(
envType
extension
data
target
)
;
}
else
if
(
envType
=
=
"
devtools_parent
"
)
{
context
=
new
DevToolsExtensionPageContextParent
(
envType
extension
data
target
)
;
}
}
else
if
(
envType
=
=
"
content_parent
"
)
{
context
=
new
ContentScriptContextParent
(
envType
extension
data
target
principal
)
;
}
else
{
throw
new
Error
(
Invalid
WebExtension
context
envType
:
{
envType
}
)
;
}
this
.
proxyContexts
.
set
(
childId
context
)
;
}
closeProxyContext
(
childId
)
{
let
context
=
this
.
proxyContexts
.
get
(
childId
)
;
if
(
context
)
{
context
.
unload
(
)
;
this
.
proxyContexts
.
delete
(
childId
)
;
}
}
call
(
data
target
)
{
let
context
=
this
.
getContextById
(
data
.
childId
)
;
if
(
context
.
parentMessageManager
!
=
=
target
.
messageManager
)
{
throw
new
Error
(
"
Got
message
on
unexpected
message
manager
"
)
;
}
let
reply
=
result
=
>
{
if
(
!
context
.
parentMessageManager
)
{
Services
.
console
.
logStringMessage
(
"
Cannot
send
function
call
result
:
other
side
closed
connection
"
+
(
call
data
:
{
uneval
(
{
path
:
data
.
path
args
:
data
.
args
}
)
}
)
)
;
return
;
}
context
.
parentMessageManager
.
sendAsyncMessage
(
"
API
:
CallResult
"
Object
.
assign
(
{
childId
:
data
.
childId
callId
:
data
.
callId
}
result
)
)
;
}
;
try
{
let
args
=
Cu
.
cloneInto
(
data
.
args
context
.
sandbox
)
;
let
result
=
findPathInObject
(
context
.
apiObj
data
.
path
)
(
.
.
.
args
)
;
if
(
data
.
callId
)
{
result
=
result
|
|
Promise
.
resolve
(
)
;
result
.
then
(
result
=
>
{
result
=
result
instanceof
SpreadArgs
?
[
.
.
.
result
]
:
[
result
]
;
reply
(
{
result
}
)
;
}
error
=
>
{
error
=
context
.
normalizeError
(
error
)
;
reply
(
{
error
:
{
message
:
error
.
message
}
}
)
;
}
)
;
}
}
catch
(
e
)
{
if
(
data
.
callId
)
{
let
error
=
context
.
normalizeError
(
e
)
;
reply
(
{
error
:
{
message
:
error
.
message
}
}
)
;
}
else
{
Cu
.
reportError
(
e
)
;
}
}
}
addListener
(
data
target
)
{
let
context
=
this
.
getContextById
(
data
.
childId
)
;
if
(
context
.
parentMessageManager
!
=
=
target
.
messageManager
)
{
throw
new
Error
(
"
Got
message
on
unexpected
message
manager
"
)
;
}
let
{
childId
}
=
data
;
function
listener
(
.
.
.
listenerArgs
)
{
return
context
.
sendMessage
(
context
.
parentMessageManager
"
API
:
RunListener
"
{
childId
listenerId
:
data
.
listenerId
path
:
data
.
path
args
:
listenerArgs
}
{
recipient
:
{
childId
}
}
)
;
}
context
.
listenerProxies
.
set
(
data
.
listenerId
listener
)
;
let
args
=
Cu
.
cloneInto
(
data
.
args
context
.
sandbox
)
;
findPathInObject
(
context
.
apiObj
data
.
path
)
.
addListener
(
listener
.
.
.
args
)
;
}
removeListener
(
data
)
{
let
context
=
this
.
getContextById
(
data
.
childId
)
;
let
listener
=
context
.
listenerProxies
.
get
(
data
.
listenerId
)
;
findPathInObject
(
context
.
apiObj
data
.
path
)
.
removeListener
(
listener
)
;
}
getContextById
(
childId
)
{
let
context
=
this
.
proxyContexts
.
get
(
childId
)
;
if
(
!
context
)
{
throw
new
Error
(
"
WebExtension
context
not
found
!
"
)
;
}
return
context
;
}
}
;
ParentAPIManager
.
init
(
)
;
class
HiddenExtensionPage
{
constructor
(
extension
viewType
)
{
if
(
!
extension
|
|
!
viewType
)
{
throw
new
Error
(
"
extension
and
viewType
parameters
are
mandatory
"
)
;
}
this
.
extension
=
extension
;
this
.
viewType
=
viewType
;
this
.
parentWindow
=
null
;
this
.
windowlessBrowser
=
null
;
this
.
browser
=
null
;
}
shutdown
(
)
{
if
(
this
.
unloaded
)
{
throw
new
Error
(
"
Unable
to
shutdown
an
unloaded
HiddenExtensionPage
instance
"
)
;
}
this
.
unloaded
=
true
;
if
(
this
.
browser
)
{
this
.
browser
.
remove
(
)
;
this
.
browser
=
null
;
}
if
(
this
.
webNav
)
{
this
.
webNav
.
loadURI
(
"
about
:
blank
"
0
null
null
null
)
;
this
.
webNav
=
null
;
}
if
(
this
.
parentWindow
)
{
this
.
parentWindow
.
close
(
)
;
this
.
parentWindow
=
null
;
}
if
(
this
.
windowlessBrowser
)
{
this
.
windowlessBrowser
.
loadURI
(
"
about
:
blank
"
0
null
null
null
)
;
this
.
windowlessBrowser
.
close
(
)
;
this
.
windowlessBrowser
=
null
;
}
}
async
createBrowserElement
(
)
{
if
(
this
.
browser
)
{
throw
new
Error
(
"
createBrowserElement
called
twice
"
)
;
}
let
chromeDoc
=
await
this
.
createWindowlessBrowser
(
)
;
const
browser
=
this
.
browser
=
chromeDoc
.
createElement
(
"
browser
"
)
;
browser
.
setAttribute
(
"
type
"
"
content
"
)
;
browser
.
setAttribute
(
"
disableglobalhistory
"
"
true
"
)
;
browser
.
setAttribute
(
"
webextension
-
view
-
type
"
this
.
viewType
)
;
let
awaitFrameLoader
=
Promise
.
resolve
(
)
;
if
(
this
.
extension
.
remote
)
{
browser
.
setAttribute
(
"
remote
"
"
true
"
)
;
browser
.
setAttribute
(
"
remoteType
"
E10SUtils
.
EXTENSION_REMOTE_TYPE
)
;
awaitFrameLoader
=
promiseEvent
(
browser
"
XULFrameLoaderCreated
"
)
;
}
chromeDoc
.
documentElement
.
appendChild
(
browser
)
;
await
awaitFrameLoader
;
browser
.
docShellIsActive
=
false
;
return
browser
;
}
createWindowlessBrowser
(
)
{
let
windowlessBrowser
=
Services
.
appShell
.
createWindowlessBrowser
(
true
)
;
this
.
windowlessBrowser
=
windowlessBrowser
;
let
chromeShell
=
windowlessBrowser
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
return
this
.
initParentWindow
(
chromeShell
)
.
then
(
(
)
=
>
{
return
promiseDocumentLoaded
(
windowlessBrowser
.
document
)
;
}
)
;
}
initParentWindow
(
chromeShell
)
{
if
(
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
let
attrs
=
chromeShell
.
getOriginAttributes
(
)
;
attrs
.
privateBrowsingId
=
1
;
chromeShell
.
setOriginAttributes
(
attrs
)
;
}
let
system
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
chromeShell
.
createAboutBlankContentViewer
(
system
)
;
chromeShell
.
useGlobalHistory
=
false
;
chromeShell
.
loadURI
(
XUL_URL
0
null
null
null
)
;
return
promiseObserved
(
"
chrome
-
document
-
global
-
created
"
win
=
>
win
.
document
=
=
chromeShell
.
document
)
;
}
}
function
promiseExtensionViewLoaded
(
browser
)
{
return
new
Promise
(
resolve
=
>
{
browser
.
messageManager
.
addMessageListener
(
"
Extension
:
ExtensionViewLoaded
"
function
onLoad
(
)
{
browser
.
messageManager
.
removeMessageListener
(
"
Extension
:
ExtensionViewLoaded
"
onLoad
)
;
resolve
(
)
;
}
)
;
}
)
;
}
function
watchExtensionProxyContextLoad
(
{
extension
viewType
browser
}
onExtensionProxyContextLoaded
)
{
if
(
typeof
onExtensionProxyContextLoaded
!
=
=
"
function
"
)
{
throw
new
Error
(
"
Missing
onExtensionProxyContextLoaded
handler
"
)
;
}
const
listener
=
(
event
context
)
=
>
{
if
(
context
.
viewType
=
=
viewType
&
&
context
.
xulBrowser
=
=
browser
)
{
onExtensionProxyContextLoaded
(
context
)
;
}
}
;
extension
.
on
(
"
extension
-
proxy
-
context
-
load
"
listener
)
;
return
(
)
=
>
{
extension
.
off
(
"
extension
-
proxy
-
context
-
load
"
listener
)
;
}
;
}
const
ExtensionParent
=
{
GlobalManager
HiddenExtensionPage
ParentAPIManager
apiManager
promiseExtensionViewLoaded
watchExtensionProxyContextLoad
}
;
