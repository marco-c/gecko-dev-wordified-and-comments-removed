"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
LegacyExtensionsUtils
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Extension
"
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionContext
"
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
LegacyExtensionContext
=
class
extends
ExtensionContext
{
constructor
(
targetExtension
optionalParams
=
{
}
)
{
let
{
url
}
=
optionalParams
;
super
(
targetExtension
{
contentWindow
:
null
uri
:
NetUtil
.
newURI
(
url
|
|
"
about
:
blank
"
)
type
:
"
legacy_extension
"
}
)
;
let
addonPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
Object
.
defineProperty
(
this
"
principal
"
{
value
:
addonPrincipal
enumerable
:
true
configurable
:
true
}
)
;
let
cloneScope
=
Cu
.
Sandbox
(
this
.
principal
{
}
)
;
Cu
.
setSandboxMetadata
(
cloneScope
{
addonId
:
targetExtension
.
id
}
)
;
Object
.
defineProperty
(
this
"
cloneScope
"
{
value
:
cloneScope
enumerable
:
true
configurable
:
true
writable
:
true
}
)
;
this
.
api
=
{
browser
:
{
runtime
:
{
onConnect
:
this
.
messenger
.
onConnect
(
"
runtime
.
onConnect
"
)
onMessage
:
this
.
messenger
.
onMessage
(
"
runtime
.
onMessage
"
)
}
}
}
;
}
unload
(
)
{
if
(
this
.
unloaded
)
{
throw
new
Error
(
"
Error
trying
to
unload
LegacyExtensionContext
twice
.
"
)
;
}
super
.
unload
(
)
;
Cu
.
nukeSandbox
(
this
.
cloneScope
)
;
this
.
cloneScope
=
null
;
}
get
externallyVisible
(
)
{
return
false
;
}
}
;
this
.
LegacyExtensionsUtils
=
{
}
;
