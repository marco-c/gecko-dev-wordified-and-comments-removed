"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionStorage
"
"
resource
:
/
/
gre
/
modules
/
ExtensionStorage
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
storageApiFactory
(
context
)
{
function
sanitize
(
items
)
{
if
(
typeof
items
!
=
"
object
"
|
|
items
=
=
=
null
|
|
Array
.
isArray
(
items
)
)
{
return
items
;
}
let
sanitized
=
{
}
;
Cu
.
reportError
(
princ
:
{
context
.
principal
.
origin
}
)
;
for
(
let
[
key
value
]
of
Object
.
entries
(
items
)
)
{
sanitized
[
key
]
=
ExtensionStorage
.
sanitize
(
value
context
)
;
}
return
sanitized
;
}
return
{
storage
:
{
local
:
{
get
:
function
(
keys
)
{
keys
=
sanitize
(
keys
)
;
return
context
.
childManager
.
callParentAsyncFunction
(
"
storage
.
local
.
get
"
[
keys
]
)
;
}
set
:
function
(
items
)
{
items
=
sanitize
(
items
)
;
return
context
.
childManager
.
callParentAsyncFunction
(
"
storage
.
local
.
set
"
[
items
]
)
;
}
}
sync
:
{
get
:
function
(
keys
)
{
keys
=
sanitize
(
keys
)
;
return
context
.
childManager
.
callParentAsyncFunction
(
"
storage
.
sync
.
get
"
[
keys
]
)
;
}
set
:
function
(
items
)
{
items
=
sanitize
(
items
)
;
return
context
.
childManager
.
callParentAsyncFunction
(
"
storage
.
sync
.
set
"
[
items
]
)
;
}
}
}
}
;
}
extensions
.
registerSchemaAPI
(
"
storage
"
"
addon_child
"
storageApiFactory
)
;
extensions
.
registerSchemaAPI
(
"
storage
"
"
content_child
"
storageApiFactory
)
;
