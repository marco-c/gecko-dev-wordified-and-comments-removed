"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ExtensionStorage
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionUtils
"
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
JSONFile
"
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
const
global
=
this
;
function
isStructuredCloneHolder
(
value
)
{
return
(
value
&
&
typeof
value
=
=
=
"
object
"
&
&
Cu
.
getClassName
(
value
true
)
=
=
=
"
StructuredCloneHolder
"
)
;
}
class
SerializeableMap
extends
Map
{
toJSON
(
)
{
let
result
=
{
}
;
for
(
let
[
key
value
]
of
this
)
{
if
(
isStructuredCloneHolder
(
value
)
)
{
value
=
value
.
deserialize
(
global
)
;
this
.
set
(
key
value
)
;
}
result
[
key
]
=
value
;
}
return
result
;
}
toJSONSafe
(
)
{
let
result
=
{
}
;
for
(
let
[
key
value
]
of
this
)
{
try
{
void
JSON
.
stringify
(
value
)
;
result
[
key
]
=
value
;
}
catch
(
e
)
{
Cu
.
reportError
(
new
Error
(
Failed
to
serialize
browser
.
storage
key
"
{
key
}
"
:
{
e
}
)
)
;
}
}
return
result
;
}
}
function
serialize
(
value
)
{
if
(
value
&
&
typeof
value
=
=
=
"
object
"
&
&
!
isStructuredCloneHolder
(
value
)
)
{
return
new
StructuredCloneHolder
(
value
)
;
}
return
value
;
}
var
ExtensionStorage
=
{
jsonFilePromises
:
new
Map
(
)
listeners
:
new
Map
(
)
async
_readFile
(
extensionId
)
{
OS
.
File
.
makeDir
(
this
.
getExtensionDir
(
extensionId
)
{
ignoreExisting
:
true
from
:
OS
.
Constants
.
Path
.
profileDir
}
)
;
let
jsonFile
=
new
JSONFile
(
{
path
:
this
.
getStorageFile
(
extensionId
)
}
)
;
await
jsonFile
.
load
(
)
;
jsonFile
.
data
=
this
.
_serializableMap
(
jsonFile
.
data
)
;
return
jsonFile
;
}
_serializableMap
(
data
)
{
return
new
SerializeableMap
(
Object
.
entries
(
data
)
)
;
}
getFile
(
extensionId
)
{
let
promise
=
this
.
jsonFilePromises
.
get
(
extensionId
)
;
if
(
!
promise
)
{
promise
=
this
.
_readFile
(
extensionId
)
;
this
.
jsonFilePromises
.
set
(
extensionId
promise
)
;
}
return
promise
;
}
sanitize
(
value
context
)
{
let
json
=
context
.
jsonStringify
(
value
=
=
=
undefined
?
null
:
value
)
;
if
(
json
=
=
undefined
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
"
DataCloneError
:
The
object
could
not
be
cloned
.
"
)
;
}
return
JSON
.
parse
(
json
)
;
}
getExtensionDir
(
extensionId
)
{
return
OS
.
Path
.
join
(
this
.
extensionDir
extensionId
)
;
}
getStorageFile
(
extensionId
)
{
return
OS
.
Path
.
join
(
this
.
extensionDir
extensionId
"
storage
.
js
"
)
;
}
async
set
(
extensionId
items
)
{
let
jsonFile
=
await
this
.
getFile
(
extensionId
)
;
let
changes
=
{
}
;
for
(
let
prop
in
items
)
{
let
item
=
items
[
prop
]
;
changes
[
prop
]
=
{
oldValue
:
serialize
(
jsonFile
.
data
.
get
(
prop
)
)
newValue
:
serialize
(
item
)
}
;
jsonFile
.
data
.
set
(
prop
item
)
;
}
this
.
notifyListeners
(
extensionId
changes
)
;
jsonFile
.
saveSoon
(
)
;
return
null
;
}
async
remove
(
extensionId
items
)
{
let
jsonFile
=
await
this
.
getFile
(
extensionId
)
;
let
changed
=
false
;
let
changes
=
{
}
;
for
(
let
prop
of
[
]
.
concat
(
items
)
)
{
if
(
jsonFile
.
data
.
has
(
prop
)
)
{
changes
[
prop
]
=
{
oldValue
:
serialize
(
jsonFile
.
data
.
get
(
prop
)
)
}
;
jsonFile
.
data
.
delete
(
prop
)
;
changed
=
true
;
}
}
if
(
changed
)
{
this
.
notifyListeners
(
extensionId
changes
)
;
jsonFile
.
saveSoon
(
)
;
}
return
null
;
}
async
clear
(
extensionId
)
{
let
jsonFile
=
await
this
.
getFile
(
extensionId
)
;
let
changed
=
false
;
let
changes
=
{
}
;
for
(
let
[
prop
oldValue
]
of
jsonFile
.
data
.
entries
(
)
)
{
changes
[
prop
]
=
{
oldValue
:
serialize
(
oldValue
)
}
;
jsonFile
.
data
.
delete
(
prop
)
;
changed
=
true
;
}
if
(
changed
)
{
this
.
notifyListeners
(
extensionId
changes
)
;
jsonFile
.
saveSoon
(
)
;
}
return
null
;
}
async
get
(
extensionId
keys
)
{
let
jsonFile
=
await
this
.
getFile
(
extensionId
)
;
return
this
.
_filterProperties
(
jsonFile
.
data
keys
)
;
}
async
_filterProperties
(
data
keys
)
{
let
result
=
{
}
;
if
(
keys
=
=
=
null
)
{
Object
.
assign
(
result
data
.
toJSON
(
)
)
;
}
else
if
(
typeof
(
keys
)
=
=
"
object
"
&
&
!
Array
.
isArray
(
keys
)
)
{
for
(
let
prop
in
keys
)
{
if
(
data
.
has
(
prop
)
)
{
result
[
prop
]
=
serialize
(
data
.
get
(
prop
)
)
;
}
else
{
result
[
prop
]
=
keys
[
prop
]
;
}
}
}
else
{
for
(
let
prop
of
[
]
.
concat
(
keys
)
)
{
if
(
data
.
has
(
prop
)
)
{
result
[
prop
]
=
serialize
(
data
.
get
(
prop
)
)
;
}
}
}
return
result
;
}
addOnChangedListener
(
extensionId
listener
)
{
let
listeners
=
this
.
listeners
.
get
(
extensionId
)
|
|
new
Set
(
)
;
listeners
.
add
(
listener
)
;
this
.
listeners
.
set
(
extensionId
listeners
)
;
}
removeOnChangedListener
(
extensionId
listener
)
{
let
listeners
=
this
.
listeners
.
get
(
extensionId
)
;
listeners
.
delete
(
listener
)
;
}
notifyListeners
(
extensionId
changes
)
{
let
listeners
=
this
.
listeners
.
get
(
extensionId
)
;
if
(
listeners
)
{
for
(
let
listener
of
listeners
)
{
listener
(
changes
)
;
}
}
}
init
(
)
{
if
(
Services
.
appinfo
.
processType
!
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
extension
-
invalidate
-
storage
-
cache
"
)
;
Services
.
obs
.
addObserver
(
this
"
xpcom
-
shutdown
"
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
xpcom
-
shutdown
"
)
{
Services
.
obs
.
removeObserver
(
this
"
extension
-
invalidate
-
storage
-
cache
"
)
;
Services
.
obs
.
removeObserver
(
this
"
xpcom
-
shutdown
"
)
;
}
else
if
(
topic
=
=
"
extension
-
invalidate
-
storage
-
cache
"
)
{
for
(
let
promise
of
this
.
jsonFilePromises
.
values
(
)
)
{
promise
.
then
(
jsonFile
=
>
{
jsonFile
.
finalize
(
)
;
}
)
;
}
this
.
jsonFilePromises
.
clear
(
)
;
}
}
serializeForContext
(
context
items
)
{
if
(
items
&
&
typeof
items
=
=
=
"
object
"
&
&
!
Array
.
isArray
(
items
)
)
{
let
result
=
{
}
;
for
(
let
[
key
value
]
of
Object
.
entries
(
items
)
)
{
try
{
result
[
key
]
=
new
StructuredCloneHolder
(
value
context
.
cloneScope
)
;
}
catch
(
e
)
{
throw
new
ExtensionUtils
.
ExtensionError
(
String
(
e
)
)
;
}
}
return
result
;
}
return
items
;
}
deserializeForContext
(
context
items
)
{
let
result
=
new
context
.
cloneScope
.
Object
(
)
;
for
(
let
[
key
value
]
of
Object
.
entries
(
items
)
)
{
if
(
value
&
&
typeof
value
=
=
=
"
object
"
&
&
Cu
.
getClassName
(
value
true
)
=
=
=
"
StructuredCloneHolder
"
)
{
value
=
value
.
deserialize
(
context
.
cloneScope
)
;
}
else
{
value
=
Cu
.
cloneInto
(
value
context
.
cloneScope
)
;
}
result
[
key
]
=
value
;
}
return
result
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
ExtensionStorage
"
extensionDir
"
(
)
=
>
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
browser
-
extension
-
data
"
)
)
;
ExtensionStorage
.
init
(
)
;
