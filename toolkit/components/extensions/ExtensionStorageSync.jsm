"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionStorageSync
"
"
extensionStorageSync
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
const
global
=
this
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
KINTO_PROD_SERVER_URL
=
"
https
:
/
/
webextensions
.
settings
.
services
.
mozilla
.
com
/
v1
"
;
const
KINTO_DEFAULT_SERVER_URL
=
KINTO_PROD_SERVER_URL
;
const
STORAGE_SYNC_ENABLED_PREF
=
"
webextensions
.
storage
.
sync
.
enabled
"
;
const
STORAGE_SYNC_SERVER_URL_PREF
=
"
webextensions
.
storage
.
sync
.
serverURL
"
;
const
STORAGE_SYNC_SCOPE
=
"
sync
:
addon_storage
"
;
const
STORAGE_SYNC_CRYPTO_COLLECTION_NAME
=
"
storage
-
sync
-
crypto
"
;
const
STORAGE_SYNC_CRYPTO_KEYRING_RECORD_ID
=
"
keys
"
;
const
STORAGE_SYNC_CRYPTO_SALT_LENGTH_BYTES
=
32
;
const
FXA_OAUTH_OPTIONS
=
{
scope
:
STORAGE_SYNC_SCOPE
}
;
const
KINTO_REQUEST_TIMEOUT
=
30000
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AsyncShutdown
"
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
BulkKeyBundle
"
"
resource
:
/
/
services
-
sync
/
keys
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CollectionKeyManager
"
"
resource
:
/
/
services
-
sync
/
record
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CommonUtils
"
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CryptoUtils
"
"
resource
:
/
/
services
-
crypto
/
utils
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionStorage
"
"
resource
:
/
/
gre
/
modules
/
ExtensionStorage
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
fxAccounts
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
KintoHttpClient
"
"
resource
:
/
/
services
-
common
/
kinto
-
http
-
client
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Kinto
"
"
resource
:
/
/
services
-
common
/
kinto
-
offline
-
client
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FirefoxAdapter
"
"
resource
:
/
/
services
-
common
/
kinto
-
storage
-
adapter
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Log
"
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Observers
"
"
resource
:
/
/
services
-
common
/
observers
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Sqlite
"
"
resource
:
/
/
gre
/
modules
/
Sqlite
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Svc
"
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Utils
"
"
resource
:
/
/
services
-
sync
/
util
.
js
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
prefPermitsStorageSync
"
STORAGE_SYNC_ENABLED_PREF
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
prefStorageSyncServerURL
"
STORAGE_SYNC_SERVER_URL_PREF
KINTO_DEFAULT_SERVER_URL
)
;
const
{
runSafeSyncWithoutClone
}
=
ExtensionUtils
;
const
extensionContexts
=
new
Map
(
)
;
const
log
=
Log
.
repository
.
getLogger
(
"
Sync
.
Engine
.
Extension
-
Storage
"
)
;
let
_fxaService
=
null
;
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
_fxaService
=
fxAccounts
;
}
function
throwIfNoFxA
(
fxAccounts
action
)
{
if
(
!
fxAccounts
)
{
throw
new
Error
(
{
action
}
is
impossible
because
FXAccounts
is
not
available
;
are
you
on
Android
?
)
;
}
}
this
.
extensionStorageSync
=
null
;
function
ciphertextHMAC
(
keyBundle
id
IV
ciphertext
)
{
const
hasher
=
keyBundle
.
sha256HMACHasher
;
return
Utils
.
bytesAsHex
(
Utils
.
digestUTF8
(
id
+
IV
+
ciphertext
hasher
)
)
;
}
const
getKBHash
=
Task
.
async
(
function
*
(
fxaService
)
{
const
signedInUser
=
yield
fxaService
.
getSignedInUser
(
)
;
if
(
!
signedInUser
)
{
throw
new
Error
(
"
User
isn
'
t
signed
in
!
"
)
;
}
if
(
!
signedInUser
.
kB
)
{
throw
new
Error
(
"
User
doesn
'
t
have
kB
?
?
"
)
;
}
let
kBbytes
=
CommonUtils
.
hexToBytes
(
signedInUser
.
kB
)
;
let
hasher
=
Cc
[
"
mozilla
.
org
/
security
/
hash
;
1
"
]
.
createInstance
(
Ci
.
nsICryptoHash
)
;
hasher
.
init
(
hasher
.
SHA256
)
;
return
CommonUtils
.
bytesAsHex
(
CryptoUtils
.
digestBytes
(
signedInUser
.
uid
+
kBbytes
hasher
)
)
;
}
)
;
class
EncryptionRemoteTransformer
{
encode
(
record
)
{
const
self
=
this
;
return
Task
.
spawn
(
function
*
(
)
{
const
keyBundle
=
yield
self
.
getKeys
(
)
;
if
(
record
.
ciphertext
)
{
throw
new
Error
(
"
Attempt
to
reencrypt
?
?
"
)
;
}
let
id
=
yield
self
.
getEncodedRecordId
(
record
)
;
if
(
!
id
)
{
throw
new
Error
(
"
Record
ID
is
missing
or
invalid
"
)
;
}
let
IV
=
Svc
.
Crypto
.
generateRandomIV
(
)
;
let
ciphertext
=
Svc
.
Crypto
.
encrypt
(
JSON
.
stringify
(
record
)
keyBundle
.
encryptionKeyB64
IV
)
;
let
hmac
=
ciphertextHMAC
(
keyBundle
id
IV
ciphertext
)
;
const
encryptedResult
=
{
ciphertext
IV
hmac
id
}
;
encryptedResult
.
_status
=
record
.
_status
=
=
"
deleted
"
?
"
updated
"
:
record
.
_status
;
if
(
record
.
hasOwnProperty
(
"
last_modified
"
)
)
{
encryptedResult
.
last_modified
=
record
.
last_modified
;
}
return
encryptedResult
;
}
)
;
}
decode
(
record
)
{
const
self
=
this
;
return
Task
.
spawn
(
function
*
(
)
{
if
(
!
record
.
ciphertext
)
{
if
(
record
.
deleted
)
{
return
record
;
}
throw
new
Error
(
"
No
ciphertext
:
nothing
to
decrypt
?
"
)
;
}
const
keyBundle
=
yield
self
.
getKeys
(
)
;
let
computedHMAC
=
ciphertextHMAC
(
keyBundle
record
.
id
record
.
IV
record
.
ciphertext
)
;
if
(
computedHMAC
!
=
record
.
hmac
)
{
Utils
.
throwHMACMismatch
(
record
.
hmac
computedHMAC
)
;
}
let
cleartext
=
Svc
.
Crypto
.
decrypt
(
record
.
ciphertext
keyBundle
.
encryptionKeyB64
record
.
IV
)
;
let
jsonResult
=
JSON
.
parse
(
cleartext
)
;
if
(
!
jsonResult
|
|
typeof
jsonResult
!
=
=
"
object
"
)
{
throw
new
Error
(
"
Decryption
failed
:
result
is
<
"
+
jsonResult
+
"
>
not
an
object
.
"
)
;
}
if
(
record
.
hasOwnProperty
(
"
last_modified
"
)
)
{
jsonResult
.
last_modified
=
record
.
last_modified
;
}
if
(
jsonResult
.
_status
=
=
"
deleted
"
)
{
jsonResult
.
deleted
=
true
;
}
return
jsonResult
;
}
)
;
}
getKeys
(
)
{
throw
new
Error
(
"
override
getKeys
in
a
subclass
"
)
;
}
getEncodedRecordId
(
record
)
{
return
Promise
.
resolve
(
record
.
id
)
;
}
}
global
.
EncryptionRemoteTransformer
=
EncryptionRemoteTransformer
;
class
KeyRingEncryptionRemoteTransformer
extends
EncryptionRemoteTransformer
{
constructor
(
fxaService
)
{
super
(
)
;
this
.
_fxaService
=
fxaService
;
}
getKeys
(
)
{
throwIfNoFxA
(
this
.
_fxaService
"
encrypting
chrome
.
storage
.
sync
records
"
)
;
const
self
=
this
;
return
Task
.
spawn
(
function
*
(
)
{
const
user
=
yield
self
.
_fxaService
.
getSignedInUser
(
)
;
if
(
!
user
)
{
throw
new
Error
(
"
user
isn
'
t
signed
in
to
FxA
;
can
'
t
sync
"
)
;
}
if
(
!
user
.
kB
)
{
throw
new
Error
(
"
user
doesn
'
t
have
kB
"
)
;
}
let
kB
=
Utils
.
hexToBytes
(
user
.
kB
)
;
let
keyMaterial
=
CryptoUtils
.
hkdf
(
kB
undefined
"
identity
.
mozilla
.
com
/
picl
/
v1
/
chrome
.
storage
.
sync
"
2
*
32
)
;
let
bundle
=
new
BulkKeyBundle
(
)
;
bundle
.
keyPair
=
[
keyMaterial
.
slice
(
0
32
)
keyMaterial
.
slice
(
32
64
)
]
;
return
bundle
;
}
)
;
}
encode
(
record
)
{
const
encodePromise
=
super
.
encode
(
record
)
;
return
Task
.
spawn
(
function
*
(
)
{
const
encoded
=
yield
encodePromise
;
encoded
.
kbHash
=
record
.
kbHash
;
return
encoded
;
}
)
;
}
async
decode
(
record
)
{
try
{
return
await
super
.
decode
(
record
)
;
}
catch
(
e
)
{
if
(
Utils
.
isHMACMismatch
(
e
)
)
{
const
currentKBHash
=
await
getKBHash
(
this
.
_fxaService
)
;
if
(
record
.
kbHash
!
=
currentKBHash
)
{
KeyRingEncryptionRemoteTransformer
.
throwOutdatedKB
(
currentKBHash
record
.
kbHash
)
;
}
}
throw
e
;
}
}
static
throwOutdatedKB
(
shouldBe
is
)
{
throw
new
Error
(
kB
hash
on
record
is
outdated
:
should
be
{
shouldBe
}
is
{
is
}
)
;
}
static
isOutdatedKB
(
exc
)
{
const
kbMessage
=
"
kB
hash
on
record
is
outdated
:
"
;
return
exc
&
&
exc
.
message
&
&
exc
.
message
.
indexOf
&
&
(
exc
.
message
.
indexOf
(
kbMessage
)
=
=
0
)
;
}
}
global
.
KeyRingEncryptionRemoteTransformer
=
KeyRingEncryptionRemoteTransformer
;
const
storageSyncInit
=
Task
.
spawn
(
function
*
(
)
{
const
path
=
"
storage
-
sync
.
sqlite
"
;
const
opts
=
{
path
sharedMemoryCache
:
false
}
;
const
connection
=
yield
Sqlite
.
openConnection
(
opts
)
;
yield
FirefoxAdapter
.
_init
(
connection
)
;
return
{
connection
kinto
:
new
Kinto
(
{
adapter
:
FirefoxAdapter
adapterOptions
:
{
sqliteHandle
:
connection
}
timeout
:
KINTO_REQUEST_TIMEOUT
}
)
}
;
}
)
;
AsyncShutdown
.
profileBeforeChange
.
addBlocker
(
"
ExtensionStorageSync
:
close
Sqlite
handle
"
Task
.
async
(
function
*
(
)
{
const
ret
=
yield
storageSyncInit
;
const
{
connection
}
=
ret
;
yield
connection
.
close
(
)
;
}
)
)
;
function
keyToId
(
key
)
{
function
escapeChar
(
match
)
{
return
"
_
"
+
match
.
codePointAt
(
0
)
.
toString
(
16
)
.
toUpperCase
(
)
+
"
_
"
;
}
return
"
key
-
"
+
key
.
replace
(
/
[
^
a
-
zA
-
Z0
-
9
]
/
g
escapeChar
)
;
}
function
idToKey
(
id
)
{
function
unescapeNumber
(
match
group1
)
{
return
String
.
fromCodePoint
(
parseInt
(
group1
16
)
)
;
}
const
ESCAPED_ID_FORMAT
=
/
^
(
?
:
[
a
-
zA
-
Z0
-
9
]
|
_
[
0
-
9A
-
F
]
+
_
)
*
/
;
if
(
!
id
.
startsWith
(
"
key
-
"
)
)
{
return
null
;
}
const
unprefixed
=
id
.
slice
(
4
)
;
if
(
!
ESCAPED_ID_FORMAT
.
test
(
unprefixed
)
)
{
return
null
;
}
return
unprefixed
.
replace
(
/
_
(
[
0
-
9A
-
F
]
+
)
_
/
g
unescapeNumber
)
;
}
const
storageSyncIdSchema
=
{
generate
(
)
{
throw
new
Error
(
"
cannot
generate
IDs
"
)
;
}
validate
(
id
)
{
return
idToKey
(
id
)
!
=
=
null
;
}
}
;
const
cryptoCollectionIdSchema
=
{
generate
(
)
{
throw
new
Error
(
"
cannot
generate
IDs
for
system
collection
"
)
;
}
validate
(
id
)
{
return
true
;
}
}
;
class
CryptoCollection
{
constructor
(
fxaService
)
{
this
.
_fxaService
=
fxaService
;
}
async
getCollection
(
)
{
throwIfNoFxA
(
this
.
_fxaService
"
tried
to
access
cryptoCollection
"
)
;
const
{
kinto
}
=
await
storageSyncInit
;
return
kinto
.
collection
(
STORAGE_SYNC_CRYPTO_COLLECTION_NAME
{
idSchema
:
cryptoCollectionIdSchema
remoteTransformers
:
[
new
KeyRingEncryptionRemoteTransformer
(
this
.
_fxaService
)
]
}
)
;
}
getNewSalt
(
)
{
return
btoa
(
CryptoUtils
.
generateRandomBytes
(
STORAGE_SYNC_CRYPTO_SALT_LENGTH_BYTES
)
)
;
}
async
getKeyRingRecord
(
)
{
const
collection
=
await
this
.
getCollection
(
)
;
const
cryptoKeyRecord
=
await
collection
.
getAny
(
STORAGE_SYNC_CRYPTO_KEYRING_RECORD_ID
)
;
let
data
=
cryptoKeyRecord
.
data
;
if
(
!
data
)
{
const
uuidgen
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
const
uuid
=
uuidgen
.
generateUUID
(
)
.
toString
(
)
;
data
=
{
uuid
id
:
STORAGE_SYNC_CRYPTO_KEYRING_RECORD_ID
}
;
}
return
data
;
}
async
getSalts
(
)
{
const
cryptoKeyRecord
=
await
this
.
getKeyRingRecord
(
)
;
return
cryptoKeyRecord
&
&
cryptoKeyRecord
.
salts
;
}
async
_setSalt
(
extensionId
salt
)
{
const
cryptoKeyRecord
=
await
this
.
getKeyRingRecord
(
)
;
cryptoKeyRecord
.
salts
=
cryptoKeyRecord
.
salts
|
|
{
}
;
cryptoKeyRecord
.
salts
[
extensionId
]
=
salt
;
await
this
.
upsert
(
cryptoKeyRecord
)
;
}
extensionIdToCollectionId
(
extensionId
)
{
return
this
.
hashWithExtensionSalt
(
CommonUtils
.
encodeUTF8
(
extensionId
)
extensionId
)
.
then
(
hash
=
>
ext
-
{
hash
}
)
;
}
async
hashWithExtensionSalt
(
value
extensionId
)
{
const
salts
=
await
this
.
getSalts
(
)
;
const
saltBase64
=
salts
&
&
salts
[
extensionId
]
;
if
(
!
saltBase64
)
{
throw
new
Error
(
no
salt
available
for
{
extensionId
}
;
how
did
this
happen
?
)
;
}
const
hasher
=
Cc
[
"
mozilla
.
org
/
security
/
hash
;
1
"
]
.
createInstance
(
Ci
.
nsICryptoHash
)
;
hasher
.
init
(
hasher
.
SHA256
)
;
const
salt
=
atob
(
saltBase64
)
;
const
message
=
{
salt
}
\
x00
{
value
}
;
const
hash
=
CryptoUtils
.
digestBytes
(
message
hasher
)
;
return
CommonUtils
.
encodeBase64URL
(
hash
false
)
;
}
async
getKeyRing
(
)
{
const
cryptoKeyRecord
=
await
this
.
getKeyRingRecord
(
)
;
const
collectionKeys
=
new
CollectionKeyManager
(
)
;
if
(
cryptoKeyRecord
.
keys
)
{
collectionKeys
.
setContents
(
cryptoKeyRecord
.
keys
cryptoKeyRecord
.
last_modified
)
;
}
else
{
collectionKeys
.
generateDefaultKey
(
)
;
}
collectionKeys
.
uuid
=
cryptoKeyRecord
.
uuid
;
return
collectionKeys
;
}
async
updateKBHash
(
kbHash
)
{
const
coll
=
await
this
.
getCollection
(
)
;
await
coll
.
update
(
{
id
:
STORAGE_SYNC_CRYPTO_KEYRING_RECORD_ID
kbHash
:
kbHash
}
{
patch
:
true
}
)
;
}
async
upsert
(
record
)
{
const
collection
=
await
this
.
getCollection
(
)
;
await
collection
.
upsert
(
record
)
;
}
async
sync
(
extensionStorageSync
)
{
const
collection
=
await
this
.
getCollection
(
)
;
return
await
extensionStorageSync
.
_syncCollection
(
collection
{
strategy
:
"
server_wins
"
}
)
;
}
async
resetSyncStatus
(
)
{
const
coll
=
await
this
.
getCollection
(
)
;
await
coll
.
db
.
resetSyncStatus
(
)
;
}
async
_clear
(
)
{
const
collection
=
await
this
.
getCollection
(
)
;
await
collection
.
clear
(
)
;
}
}
this
.
CryptoCollection
=
CryptoCollection
;
let
CollectionKeyEncryptionRemoteTransformer
=
class
extends
EncryptionRemoteTransformer
{
constructor
(
cryptoCollection
extensionId
)
{
super
(
)
;
this
.
cryptoCollection
=
cryptoCollection
;
this
.
extensionId
=
extensionId
;
}
getKeys
(
)
{
const
self
=
this
;
return
Task
.
spawn
(
function
*
(
)
{
const
collectionKeys
=
yield
self
.
cryptoCollection
.
getKeyRing
(
)
;
if
(
!
collectionKeys
.
hasKeysFor
(
[
self
.
extensionId
]
)
)
{
throw
new
Error
(
tried
to
encrypt
records
for
{
this
.
extensionId
}
but
key
is
not
present
)
;
}
return
collectionKeys
.
keyForCollection
(
self
.
extensionId
)
;
}
)
;
}
getEncodedRecordId
(
record
)
{
const
id
=
CommonUtils
.
encodeUTF8
(
record
.
id
)
;
return
this
.
cryptoCollection
.
hashWithExtensionSalt
(
id
this
.
extensionId
)
.
then
(
hash
=
>
id
-
{
hash
}
)
;
}
}
;
global
.
CollectionKeyEncryptionRemoteTransformer
=
CollectionKeyEncryptionRemoteTransformer
;
function
cleanUpForContext
(
extension
context
)
{
const
contexts
=
extensionContexts
.
get
(
extension
)
;
if
(
!
contexts
)
{
Cu
.
reportError
(
new
Error
(
Internal
error
:
cannot
find
any
contexts
for
extension
{
extension
.
id
}
)
)
;
}
contexts
.
delete
(
context
)
;
if
(
contexts
.
size
=
=
=
0
)
{
extensionContexts
.
delete
(
extension
)
;
}
}
const
openCollection
=
Task
.
async
(
function
*
(
cryptoCollection
extension
context
)
{
let
collectionId
=
extension
.
id
;
const
{
kinto
}
=
yield
storageSyncInit
;
const
remoteTransformers
=
[
new
CollectionKeyEncryptionRemoteTransformer
(
cryptoCollection
extension
.
id
)
]
;
const
coll
=
kinto
.
collection
(
collectionId
{
idSchema
:
storageSyncIdSchema
remoteTransformers
}
)
;
return
coll
;
}
)
;
class
ExtensionStorageSync
{
constructor
(
fxaService
)
{
this
.
_fxaService
=
fxaService
;
this
.
cryptoCollection
=
new
CryptoCollection
(
fxaService
)
;
this
.
listeners
=
new
WeakMap
(
)
;
}
async
syncAll
(
)
{
const
extensions
=
extensionContexts
.
keys
(
)
;
const
extIds
=
Array
.
from
(
extensions
extension
=
>
extension
.
id
)
;
log
.
debug
(
Syncing
extension
settings
for
{
JSON
.
stringify
(
extIds
)
}
)
;
if
(
extIds
.
length
=
=
0
)
{
return
;
}
await
this
.
ensureCanSync
(
extIds
)
;
await
this
.
checkSyncKeyRing
(
)
;
const
promises
=
Array
.
from
(
extensionContexts
.
keys
(
)
extension
=
>
{
return
openCollection
(
this
.
cryptoCollection
extension
)
.
then
(
coll
=
>
{
return
this
.
sync
(
extension
coll
)
;
}
)
;
}
)
;
await
Promise
.
all
(
promises
)
;
}
async
sync
(
extension
collection
)
{
throwIfNoFxA
(
this
.
_fxaService
"
syncing
chrome
.
storage
.
sync
"
)
;
const
signedInUser
=
await
this
.
_fxaService
.
getSignedInUser
(
)
;
if
(
!
signedInUser
)
{
log
.
info
(
"
User
was
not
signed
into
FxA
;
cannot
sync
"
)
;
throw
new
Error
(
"
Not
signed
in
to
FxA
"
)
;
}
const
collectionId
=
await
this
.
cryptoCollection
.
extensionIdToCollectionId
(
extension
.
id
)
;
let
syncResults
;
try
{
syncResults
=
await
this
.
_syncCollection
(
collection
{
strategy
:
"
client_wins
"
collection
:
collectionId
}
)
;
}
catch
(
err
)
{
log
.
warn
(
"
Syncing
failed
"
err
)
;
throw
err
;
}
let
changes
=
{
}
;
for
(
const
record
of
syncResults
.
created
)
{
changes
[
record
.
key
]
=
{
newValue
:
record
.
data
}
;
}
for
(
const
record
of
syncResults
.
updated
)
{
const
key
=
record
.
old
.
key
;
changes
[
key
]
=
{
oldValue
:
record
.
old
.
data
newValue
:
record
.
new
.
data
}
;
}
for
(
const
record
of
syncResults
.
deleted
)
{
changes
[
record
.
key
]
=
{
oldValue
:
record
.
data
}
;
}
for
(
const
conflict
of
syncResults
.
resolved
)
{
changes
[
conflict
.
remote
.
key
]
=
{
oldValue
:
conflict
.
local
.
data
newValue
:
conflict
.
remote
.
data
}
;
}
if
(
Object
.
keys
(
changes
)
.
length
>
0
)
{
this
.
notifyListeners
(
extension
changes
)
;
}
}
async
_syncCollection
(
collection
options
)
{
return
await
this
.
_requestWithToken
(
Syncing
{
collection
.
name
}
async
function
(
token
)
{
const
allOptions
=
Object
.
assign
(
{
}
{
remote
:
prefStorageSyncServerURL
headers
:
{
Authorization
:
"
Bearer
"
+
token
}
}
options
)
;
return
await
collection
.
sync
(
allOptions
)
;
}
)
;
}
async
_requestWithToken
(
description
f
)
{
throwIfNoFxA
(
this
.
_fxaService
"
making
remote
requests
from
chrome
.
storage
.
sync
"
)
;
const
fxaToken
=
await
this
.
_fxaService
.
getOAuthToken
(
FXA_OAUTH_OPTIONS
)
;
try
{
return
await
f
(
fxaToken
)
;
}
catch
(
e
)
{
log
.
error
(
{
description
}
:
request
failed
e
)
;
if
(
e
&
&
e
.
data
&
&
e
.
data
.
code
=
=
401
)
{
log
.
info
(
"
Token
might
have
expired
"
)
;
await
this
.
_fxaService
.
removeCachedOAuthToken
(
{
token
:
fxaToken
}
)
;
const
newToken
=
await
this
.
_fxaService
.
getOAuthToken
(
FXA_OAUTH_OPTIONS
)
;
return
await
f
(
newToken
)
;
}
throw
e
;
}
}
async
_deleteBucket
(
)
{
return
await
this
.
_requestWithToken
(
"
Clearing
server
"
async
function
(
token
)
{
const
headers
=
{
Authorization
:
"
Bearer
"
+
token
}
;
const
kintoHttp
=
new
KintoHttpClient
(
prefStorageSyncServerURL
{
headers
:
headers
timeout
:
KINTO_REQUEST_TIMEOUT
}
)
;
return
await
kintoHttp
.
deleteBucket
(
"
default
"
)
;
}
)
;
}
async
ensureSaltsFor
(
keysRecord
extIds
)
{
const
newSalts
=
Object
.
assign
(
{
}
keysRecord
.
salts
)
;
for
(
let
collectionId
of
extIds
)
{
if
(
newSalts
[
collectionId
]
)
{
continue
;
}
newSalts
[
collectionId
]
=
this
.
cryptoCollection
.
getNewSalt
(
)
;
}
return
newSalts
;
}
hasSaltsFor
(
keysRecord
extIds
)
{
if
(
!
keysRecord
.
salts
)
{
return
false
;
}
for
(
let
collectionId
of
extIds
)
{
if
(
!
keysRecord
.
salts
[
collectionId
]
)
{
return
false
;
}
}
return
true
;
}
async
ensureCanSync
(
extIds
)
{
const
keysRecord
=
await
this
.
cryptoCollection
.
getKeyRingRecord
(
)
;
const
collectionKeys
=
await
this
.
cryptoCollection
.
getKeyRing
(
)
;
if
(
collectionKeys
.
hasKeysFor
(
extIds
)
&
&
this
.
hasSaltsFor
(
keysRecord
extIds
)
)
{
return
collectionKeys
;
}
const
kbHash
=
await
getKBHash
(
this
.
_fxaService
)
;
const
newKeys
=
await
collectionKeys
.
ensureKeysFor
(
extIds
)
;
const
newSalts
=
await
this
.
ensureSaltsFor
(
keysRecord
extIds
)
;
const
newRecord
=
{
id
:
STORAGE_SYNC_CRYPTO_KEYRING_RECORD_ID
keys
:
newKeys
.
asWBO
(
)
.
cleartext
salts
:
newSalts
uuid
:
collectionKeys
.
uuid
kbHash
:
kbHash
}
;
await
this
.
cryptoCollection
.
upsert
(
newRecord
)
;
const
result
=
await
this
.
_syncKeyRing
(
newRecord
)
;
if
(
result
.
resolved
.
length
!
=
0
)
{
return
await
this
.
ensureCanSync
(
extIds
)
;
}
return
newKeys
;
}
async
updateKeyRingKB
(
)
{
throwIfNoFxA
(
this
.
_fxaService
"
use
of
chrome
.
storage
.
sync
\
"
keyring
\
"
"
)
;
const
signedInUser
=
await
this
.
_fxaService
.
getSignedInUser
(
)
;
if
(
!
signedInUser
)
{
return
;
}
const
thisKBHash
=
await
getKBHash
(
this
.
_fxaService
)
;
await
this
.
cryptoCollection
.
updateKBHash
(
thisKBHash
)
;
}
async
checkSyncKeyRing
(
)
{
await
this
.
updateKeyRingKB
(
)
;
const
cryptoKeyRecord
=
await
this
.
cryptoCollection
.
getKeyRingRecord
(
)
;
if
(
cryptoKeyRecord
&
&
cryptoKeyRecord
.
_status
!
=
=
"
synced
"
)
{
await
this
.
_syncKeyRing
(
cryptoKeyRecord
)
;
}
}
async
_syncKeyRing
(
cryptoKeyRecord
)
{
throwIfNoFxA
(
this
.
_fxaService
"
syncing
chrome
.
storage
.
sync
\
"
keyring
\
"
"
)
;
try
{
const
result
=
await
this
.
cryptoCollection
.
sync
(
this
)
;
if
(
result
.
resolved
.
length
>
0
)
{
if
(
result
.
resolved
[
0
]
.
uuid
!
=
cryptoKeyRecord
.
uuid
)
{
log
.
info
(
Detected
a
new
UUID
(
{
result
.
resolved
[
0
]
.
uuid
}
was
{
cryptoKeyRecord
.
uuid
}
)
.
Reseting
sync
status
for
everything
.
)
;
await
this
.
cryptoCollection
.
resetSyncStatus
(
)
;
return
result
;
}
}
return
result
;
}
catch
(
e
)
{
if
(
KeyRingEncryptionRemoteTransformer
.
isOutdatedKB
(
e
)
)
{
const
isSessionValid
=
await
this
.
_fxaService
.
sessionStatus
(
)
;
if
(
isSessionValid
)
{
await
this
.
_deleteBucket
(
)
;
await
this
.
cryptoCollection
.
resetSyncStatus
(
)
;
return
await
this
.
cryptoCollection
.
sync
(
this
)
;
}
}
throw
e
;
}
}
getCollection
(
extension
context
)
{
if
(
prefPermitsStorageSync
!
=
=
true
)
{
return
Promise
.
reject
(
{
message
:
Please
set
{
STORAGE_SYNC_ENABLED_PREF
}
to
true
in
about
:
config
}
)
;
}
if
(
!
extensionContexts
.
has
(
extension
)
)
{
extensionContexts
.
set
(
extension
new
Set
(
)
)
;
}
const
contexts
=
extensionContexts
.
get
(
extension
)
;
if
(
!
contexts
.
has
(
context
)
)
{
contexts
.
add
(
context
)
;
context
.
callOnClose
(
{
close
:
(
)
=
>
cleanUpForContext
(
extension
context
)
}
)
;
}
return
openCollection
(
this
.
cryptoCollection
extension
context
)
;
}
async
set
(
extension
items
context
)
{
const
coll
=
await
this
.
getCollection
(
extension
context
)
;
const
keys
=
Object
.
keys
(
items
)
;
const
ids
=
keys
.
map
(
keyToId
)
;
const
changes
=
await
coll
.
execute
(
txn
=
>
{
let
changes
=
{
}
;
for
(
let
[
i
key
]
of
keys
.
entries
(
)
)
{
const
id
=
ids
[
i
]
;
let
item
=
items
[
key
]
;
let
{
oldRecord
}
=
txn
.
upsert
(
{
id
key
data
:
item
}
)
;
changes
[
key
]
=
{
newValue
:
item
}
;
if
(
oldRecord
&
&
oldRecord
.
data
)
{
changes
[
key
]
.
oldValue
=
oldRecord
.
data
;
}
}
return
changes
;
}
{
preloadIds
:
ids
}
)
;
this
.
notifyListeners
(
extension
changes
)
;
}
async
remove
(
extension
keys
context
)
{
const
coll
=
await
this
.
getCollection
(
extension
context
)
;
keys
=
[
]
.
concat
(
keys
)
;
const
ids
=
keys
.
map
(
keyToId
)
;
let
changes
=
{
}
;
await
coll
.
execute
(
txn
=
>
{
for
(
let
[
i
key
]
of
keys
.
entries
(
)
)
{
const
id
=
ids
[
i
]
;
const
res
=
txn
.
deleteAny
(
id
)
;
if
(
res
.
deleted
)
{
changes
[
key
]
=
{
oldValue
:
res
.
data
.
data
}
;
}
}
return
changes
;
}
{
preloadIds
:
ids
}
)
;
if
(
Object
.
keys
(
changes
)
.
length
>
0
)
{
this
.
notifyListeners
(
extension
changes
)
;
}
}
async
clear
(
extension
context
)
{
const
coll
=
await
this
.
getCollection
(
extension
context
)
;
const
res
=
await
coll
.
list
(
)
;
const
records
=
res
.
data
;
const
keys
=
records
.
map
(
record
=
>
record
.
key
)
;
await
this
.
remove
(
extension
keys
context
)
;
}
async
get
(
extension
spec
context
)
{
const
coll
=
await
this
.
getCollection
(
extension
context
)
;
let
keys
records
;
if
(
spec
=
=
=
null
)
{
records
=
{
}
;
const
res
=
await
coll
.
list
(
)
;
for
(
let
record
of
res
.
data
)
{
records
[
record
.
key
]
=
record
.
data
;
}
return
records
;
}
if
(
typeof
spec
=
=
=
"
string
"
)
{
keys
=
[
spec
]
;
records
=
{
}
;
}
else
if
(
Array
.
isArray
(
spec
)
)
{
keys
=
spec
;
records
=
{
}
;
}
else
{
keys
=
Object
.
keys
(
spec
)
;
records
=
Cu
.
cloneInto
(
spec
global
)
;
}
for
(
let
key
of
keys
)
{
const
res
=
await
coll
.
getAny
(
keyToId
(
key
)
)
;
if
(
res
.
data
&
&
res
.
data
.
_status
!
=
"
deleted
"
)
{
records
[
res
.
data
.
key
]
=
res
.
data
.
data
;
}
}
return
records
;
}
addOnChangedListener
(
extension
listener
context
)
{
let
listeners
=
this
.
listeners
.
get
(
extension
)
|
|
new
Set
(
)
;
listeners
.
add
(
listener
)
;
this
.
listeners
.
set
(
extension
listeners
)
;
return
this
.
getCollection
(
extension
context
)
;
}
removeOnChangedListener
(
extension
listener
)
{
let
listeners
=
this
.
listeners
.
get
(
extension
)
;
listeners
.
delete
(
listener
)
;
if
(
listeners
.
size
=
=
0
)
{
this
.
listeners
.
delete
(
extension
)
;
}
}
notifyListeners
(
extension
changes
)
{
Observers
.
notify
(
"
ext
.
storage
.
sync
-
changed
"
)
;
let
listeners
=
this
.
listeners
.
get
(
extension
)
|
|
new
Set
(
)
;
if
(
listeners
)
{
for
(
let
listener
of
listeners
)
{
runSafeSyncWithoutClone
(
listener
changes
)
;
}
}
}
}
this
.
ExtensionStorageSync
=
ExtensionStorageSync
;
this
.
extensionStorageSync
=
new
ExtensionStorageSync
(
_fxaService
)
;
