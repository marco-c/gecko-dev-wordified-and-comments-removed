"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ProfilerGetSymbols
"
]
;
ChromeUtils
.
defineModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
clearTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
const
WASM_MODULE_URL
=
"
https
:
/
/
zealous
-
rosalind
-
a98ce8
.
netlify
.
com
/
wasm
/
3365b75b606d0fd60ca98eea6b3057ac5bdcd4be2f24d1ad1c6452ddf2cc622ddeae28665261d7e0f13913ed5e14960b
.
wasm
"
;
const
WASM_MODULE_INTEGRITY
=
"
sha384
-
M2W3W2BtD9YMqY7qazBXrFvc1L4vJNGtHGRS3fLMYi3erihmUmHX4PE5E
+
1eFJYL
"
;
const
EXPIRY_TIME_IN_MS
=
5
*
60
*
1000
;
let
gCachedWASMModulePromise
=
null
;
let
gCachedWASMModuleExpiryTimer
=
0
;
function
clearCachedWASMModule
(
)
{
gCachedWASMModulePromise
=
null
;
gCachedWASMModuleExpiryTimer
=
0
;
}
function
getWASMProfilerGetSymbolsModule
(
)
{
if
(
!
gCachedWASMModulePromise
)
{
gCachedWASMModulePromise
=
(
async
function
(
)
{
const
request
=
new
Request
(
WASM_MODULE_URL
{
integrity
:
WASM_MODULE_INTEGRITY
credentials
:
"
omit
"
}
)
;
return
WebAssembly
.
compileStreaming
(
fetch
(
request
)
)
;
}
)
(
)
;
}
clearTimeout
(
gCachedWASMModuleExpiryTimer
)
;
gCachedWASMModuleExpiryTimer
=
setTimeout
(
clearCachedWASMModule
EXPIRY_TIME_IN_MS
)
;
return
gCachedWASMModulePromise
;
}
this
.
ProfilerGetSymbols
=
{
async
getSymbolTable
(
binaryPath
debugPath
breakpadId
)
{
const
module
=
await
getWASMProfilerGetSymbolsModule
(
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
worker
=
new
ChromeWorker
(
"
resource
:
/
/
gre
/
modules
/
ProfilerGetSymbols
-
worker
.
js
"
)
;
worker
.
onmessage
=
e
=
>
{
if
(
e
.
data
.
error
)
{
reject
(
e
.
data
.
error
)
;
return
;
}
resolve
(
e
.
data
.
result
)
;
}
;
worker
.
postMessage
(
{
binaryPath
debugPath
breakpadId
module
}
)
;
}
)
;
}
}
;
