#
ifndef
mozilla_extensions_StreamFilterChild_h
#
define
mozilla_extensions_StreamFilterChild_h
#
include
"
StreamFilterBase
.
h
"
#
include
"
mozilla
/
extensions
/
PStreamFilterChild
.
h
"
#
include
"
mozilla
/
extensions
/
StreamFilter
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
dom
/
StreamFilterBinding
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
extensions
{
using
mozilla
:
:
dom
:
:
StreamFilterStatus
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
class
StreamFilter
;
class
StreamFilterChild
final
:
public
PStreamFilterChild
public
StreamFilterBase
{
friend
class
StreamFilter
;
friend
class
PStreamFilterChild
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
StreamFilterChild
final
)
StreamFilterChild
(
)
:
mState
(
State
:
:
Uninitialized
)
mReceivedOnStop
(
false
)
{
}
enum
class
State
{
Uninitialized
Initialized
TransferringData
FinishedTransferringData
Suspending
Suspended
Resuming
Closing
Closed
Disconnecting
Disconnected
Error
}
;
void
Suspend
(
ErrorResult
&
aRv
)
;
void
Resume
(
ErrorResult
&
aRv
)
;
void
Disconnect
(
ErrorResult
&
aRv
)
;
void
Close
(
ErrorResult
&
aRv
)
;
void
Cleanup
(
)
;
void
Write
(
Data
&
&
aData
ErrorResult
&
aRv
)
;
State
GetState
(
)
const
{
return
mState
;
}
StreamFilterStatus
Status
(
)
const
;
void
RecvInitialized
(
bool
aSuccess
)
;
protected
:
IPCResult
RecvStartRequest
(
)
;
IPCResult
RecvData
(
Data
&
&
data
)
;
IPCResult
RecvStopRequest
(
const
nsresult
&
aStatus
)
;
IPCResult
RecvError
(
const
nsCString
&
aError
)
;
IPCResult
RecvClosed
(
)
;
IPCResult
RecvSuspended
(
)
;
IPCResult
RecvResumed
(
)
;
IPCResult
RecvFlushData
(
)
;
void
SetStreamFilter
(
StreamFilter
*
aStreamFilter
)
{
mStreamFilter
=
aStreamFilter
;
}
private
:
~
StreamFilterChild
(
)
=
default
;
void
SetNextState
(
)
;
void
MaybeStopRequest
(
)
;
void
EmitData
(
const
Data
&
aData
)
;
bool
CanFlushData
(
)
{
return
(
mState
=
=
State
:
:
TransferringData
|
|
mState
=
=
State
:
:
Resuming
)
;
}
void
FlushBufferedData
(
)
;
void
WriteBufferedData
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
State
mState
;
State
mNextState
;
bool
mReceivedOnStop
;
RefPtr
<
StreamFilter
>
mStreamFilter
;
}
;
}
}
#
endif
