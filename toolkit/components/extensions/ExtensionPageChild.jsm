"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionPageChild
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionChildDevToolsUtils
"
"
resource
:
/
/
gre
/
modules
/
ExtensionChildDevToolsUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Schemas
"
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
WebNavigationFrames
"
"
resource
:
/
/
gre
/
modules
/
WebNavigationFrames
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
processScript
"
(
)
=
>
Cc
[
"
mozilla
.
org
/
webextensions
/
extension
-
process
-
script
;
1
"
]
.
getService
(
)
.
wrappedJSObject
)
;
const
CATEGORY_EXTENSION_SCRIPTS_ADDON
=
"
webextension
-
scripts
-
addon
"
;
const
CATEGORY_EXTENSION_SCRIPTS_DEVTOOLS
=
"
webextension
-
scripts
-
devtools
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionCommon
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionChild
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
const
{
defineLazyGetter
getInnerWindowID
promiseEvent
}
=
ExtensionUtils
;
const
{
BaseContext
CanOfAPIs
SchemaAPIManager
}
=
ExtensionCommon
;
const
{
ChildAPIManager
Messenger
}
=
ExtensionChild
;
var
ExtensionPageChild
;
function
getFrameData
(
global
)
{
return
processScript
.
getFrameData
(
global
true
)
;
}
var
apiManager
=
new
class
extends
SchemaAPIManager
{
constructor
(
)
{
super
(
"
addon
"
)
;
this
.
initialized
=
false
;
}
lazyInit
(
)
{
if
(
!
this
.
initialized
)
{
this
.
initialized
=
true
;
for
(
let
[
value
]
of
XPCOMUtils
.
enumerateCategoryEntries
(
CATEGORY_EXTENSION_SCRIPTS_ADDON
)
)
{
this
.
loadScript
(
value
)
;
}
}
}
}
(
)
;
var
devtoolsAPIManager
=
new
class
extends
SchemaAPIManager
{
constructor
(
)
{
super
(
"
devtools
"
)
;
this
.
initialized
=
false
;
}
lazyInit
(
)
{
if
(
!
this
.
initialized
)
{
this
.
initialized
=
true
;
for
(
let
[
value
]
of
XPCOMUtils
.
enumerateCategoryEntries
(
CATEGORY_EXTENSION_SCRIPTS_DEVTOOLS
)
)
{
this
.
loadScript
(
value
)
;
}
}
}
}
(
)
;
class
ExtensionBaseContextChild
extends
BaseContext
{
constructor
(
extension
params
)
{
if
(
!
params
.
envType
)
{
throw
new
Error
(
"
Missing
envType
"
)
;
}
super
(
params
.
envType
extension
)
;
let
{
viewType
=
"
tab
"
uri
contentWindow
tabId
}
=
params
;
this
.
viewType
=
viewType
;
this
.
uri
=
uri
|
|
extension
.
baseURI
;
this
.
setContentWindow
(
contentWindow
)
;
let
sender
=
{
id
:
extension
.
id
}
;
if
(
viewType
=
=
"
tab
"
)
{
sender
.
frameId
=
WebNavigationFrames
.
getFrameId
(
contentWindow
)
;
sender
.
tabId
=
tabId
;
Object
.
defineProperty
(
this
"
tabId
"
{
value
:
tabId
enumerable
:
true
configurable
:
true
}
)
;
}
if
(
uri
)
{
sender
.
url
=
uri
.
spec
;
}
this
.
sender
=
sender
;
Schemas
.
exportLazyGetter
(
contentWindow
"
browser
"
(
)
=
>
{
let
browserObj
=
Cu
.
createObjectIn
(
contentWindow
)
;
Schemas
.
inject
(
browserObj
this
.
childManager
)
;
return
browserObj
;
}
)
;
Schemas
.
exportLazyGetter
(
contentWindow
"
chrome
"
(
)
=
>
{
let
chromeApiWrapper
=
Object
.
create
(
this
.
childManager
)
;
chromeApiWrapper
.
isChromeCompat
=
true
;
let
chromeObj
=
Cu
.
createObjectIn
(
contentWindow
)
;
Schemas
.
inject
(
chromeObj
chromeApiWrapper
)
;
return
chromeObj
;
}
)
;
}
get
cloneScope
(
)
{
return
this
.
contentWindow
;
}
get
principal
(
)
{
return
this
.
contentWindow
.
document
.
nodePrincipal
;
}
get
windowId
(
)
{
if
(
[
"
tab
"
"
popup
"
"
sidebar
"
]
.
includes
(
this
.
viewType
)
)
{
let
frameData
=
getFrameData
(
this
.
messageManager
)
;
return
frameData
?
frameData
.
windowId
:
-
1
;
}
return
-
1
;
}
get
tabId
(
)
{
return
-
1
;
}
shutdown
(
)
{
this
.
unload
(
)
;
}
unload
(
)
{
if
(
this
.
unloaded
)
{
return
;
}
if
(
this
.
contentWindow
)
{
this
.
contentWindow
.
close
(
)
;
}
super
.
unload
(
)
;
}
}
defineLazyGetter
(
ExtensionBaseContextChild
.
prototype
"
messenger
"
function
(
)
{
let
filter
=
{
extensionId
:
this
.
extension
.
id
}
;
let
optionalFilter
=
{
}
;
return
new
Messenger
(
this
[
Services
.
cpmm
this
.
messageManager
]
this
.
sender
filter
optionalFilter
)
;
}
)
;
class
ExtensionPageContextChild
extends
ExtensionBaseContextChild
{
constructor
(
extension
params
)
{
super
(
extension
Object
.
assign
(
params
{
envType
:
"
addon_child
"
}
)
)
;
this
.
extension
.
views
.
add
(
this
)
;
}
unload
(
)
{
super
.
unload
(
)
;
this
.
extension
.
views
.
delete
(
this
)
;
}
}
defineLazyGetter
(
ExtensionPageContextChild
.
prototype
"
childManager
"
function
(
)
{
apiManager
.
lazyInit
(
)
;
let
localApis
=
{
}
;
let
can
=
new
CanOfAPIs
(
this
apiManager
localApis
)
;
let
childManager
=
new
ChildAPIManager
(
this
this
.
messageManager
can
{
envType
:
"
addon_parent
"
viewType
:
this
.
viewType
url
:
this
.
uri
.
spec
incognito
:
this
.
incognito
}
)
;
this
.
callOnClose
(
childManager
)
;
if
(
this
.
viewType
=
=
"
background
"
)
{
apiManager
.
global
.
initializeBackgroundPage
(
this
.
contentWindow
)
;
}
return
childManager
;
}
)
;
class
DevToolsContextChild
extends
ExtensionBaseContextChild
{
constructor
(
extension
params
)
{
super
(
extension
Object
.
assign
(
params
{
envType
:
"
devtools_child
"
}
)
)
;
this
.
devtoolsToolboxInfo
=
params
.
devtoolsToolboxInfo
;
ExtensionChildDevToolsUtils
.
initThemeChangeObserver
(
params
.
devtoolsToolboxInfo
.
themeName
this
)
;
this
.
extension
.
devtoolsViews
.
add
(
this
)
;
}
unload
(
)
{
super
.
unload
(
)
;
this
.
extension
.
devtoolsViews
.
delete
(
this
)
;
}
}
defineLazyGetter
(
DevToolsContextChild
.
prototype
"
childManager
"
function
(
)
{
devtoolsAPIManager
.
lazyInit
(
)
;
let
localApis
=
{
}
;
let
can
=
new
CanOfAPIs
(
this
devtoolsAPIManager
localApis
)
;
let
childManager
=
new
ChildAPIManager
(
this
this
.
messageManager
can
{
envType
:
"
devtools_parent
"
viewType
:
this
.
viewType
url
:
this
.
uri
.
spec
incognito
:
this
.
incognito
}
)
;
this
.
callOnClose
(
childManager
)
;
return
childManager
;
}
)
;
ExtensionPageChild
=
{
extensionContexts
:
new
Map
(
)
initialized
:
false
_init
(
)
{
if
(
this
.
initialized
)
{
return
;
}
this
.
initialized
=
true
;
Services
.
obs
.
addObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
inner
-
window
-
destroyed
"
)
{
let
windowId
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
this
.
destroyExtensionContext
(
windowId
)
;
}
}
expectViewLoad
(
global
viewType
)
{
if
(
[
"
popup
"
"
sidebar
"
]
.
includes
(
viewType
)
)
{
global
.
docShell
.
isAppTab
=
true
;
}
promiseEvent
(
global
"
DOMContentLoaded
"
true
)
.
then
(
(
)
=
>
{
let
windowId
=
getInnerWindowID
(
global
.
content
)
;
let
context
=
this
.
extensionContexts
.
get
(
windowId
)
;
global
.
sendAsyncMessage
(
"
Extension
:
ExtensionViewLoaded
"
{
childId
:
context
&
&
context
.
childManager
.
id
}
)
;
}
)
;
}
initExtensionContext
(
extension
contentWindow
)
{
this
.
_init
(
)
;
if
(
!
WebExtensionPolicy
.
isExtensionProcess
)
{
throw
new
Error
(
"
Cannot
create
an
extension
page
context
in
current
process
"
)
;
}
let
windowId
=
getInnerWindowID
(
contentWindow
)
;
let
context
=
this
.
extensionContexts
.
get
(
windowId
)
;
if
(
context
)
{
if
(
context
.
extension
!
=
=
extension
)
{
throw
new
Error
(
"
A
different
extension
context
already
exists
for
this
frame
"
)
;
}
throw
new
Error
(
"
An
extension
context
was
already
initialized
for
this
frame
"
)
;
}
let
mm
=
contentWindow
.
document
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
let
{
viewType
tabId
devtoolsToolboxInfo
}
=
getFrameData
(
mm
)
|
|
{
}
;
let
uri
=
contentWindow
.
document
.
documentURIObject
;
if
(
devtoolsToolboxInfo
)
{
context
=
new
DevToolsContextChild
(
extension
{
viewType
contentWindow
uri
tabId
devtoolsToolboxInfo
}
)
;
}
else
{
context
=
new
ExtensionPageContextChild
(
extension
{
viewType
contentWindow
uri
tabId
}
)
;
}
this
.
extensionContexts
.
set
(
windowId
context
)
;
}
destroyExtensionContext
(
windowId
)
{
let
context
=
this
.
extensionContexts
.
get
(
windowId
)
;
if
(
context
)
{
context
.
unload
(
)
;
this
.
extensionContexts
.
delete
(
windowId
)
;
}
}
shutdownExtension
(
extensionId
)
{
for
(
let
[
windowId
context
]
of
this
.
extensionContexts
)
{
if
(
context
.
extension
.
id
=
=
extensionId
)
{
context
.
shutdown
(
)
;
this
.
extensionContexts
.
delete
(
windowId
)
;
}
}
}
}
;
