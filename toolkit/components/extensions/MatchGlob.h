#
ifndef
mozilla_extensions_MatchGlob_h
#
define
mozilla_extensions_MatchGlob_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
MatchGlobBinding
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
RustRegex
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
extensions
{
class
MatchPattern
;
class
MatchGlobCore
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MatchGlobCore
)
MatchGlobCore
(
const
nsACString
&
aGlob
bool
aAllowQuestion
bool
aIsPathGlob
ErrorResult
&
aRv
)
;
bool
Matches
(
const
nsACString
&
aString
)
const
;
bool
IsWildcard
(
)
const
{
return
mIsPrefix
&
&
mPathLiteral
.
IsEmpty
(
)
;
}
void
GetGlob
(
nsACString
&
aGlob
)
const
{
aGlob
=
mGlob
;
}
private
:
~
MatchGlobCore
(
)
=
default
;
const
nsCString
mGlob
;
nsCString
mPathLiteral
;
bool
mIsPrefix
=
false
;
RustRegex
mRegExp
;
}
;
class
MatchGlob
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
MatchGlob
)
static
already_AddRefed
<
MatchGlob
>
Constructor
(
dom
:
:
GlobalObject
&
aGlobal
const
nsACString
&
aGlob
bool
aAllowQuestion
ErrorResult
&
aRv
)
;
explicit
MatchGlob
(
nsISupports
*
aParent
already_AddRefed
<
MatchGlobCore
>
aCore
)
:
mParent
(
aParent
)
mCore
(
std
:
:
move
(
aCore
)
)
{
}
bool
Matches
(
const
nsACString
&
aString
)
const
{
return
Core
(
)
-
>
Matches
(
aString
)
;
}
bool
IsWildcard
(
)
const
{
return
Core
(
)
-
>
IsWildcard
(
)
;
}
void
GetGlob
(
nsACString
&
aGlob
)
const
{
Core
(
)
-
>
GetGlob
(
aGlob
)
;
}
MatchGlobCore
*
Core
(
)
const
{
return
mCore
;
}
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
~
MatchGlob
(
)
=
default
;
nsCOMPtr
<
nsISupports
>
mParent
;
RefPtr
<
MatchGlobCore
>
mCore
;
}
;
class
MatchGlobSet
final
:
public
CopyableTArray
<
RefPtr
<
MatchGlobCore
>
>
{
public
:
MatchGlobSet
(
)
=
default
;
explicit
MatchGlobSet
(
size_type
aCapacity
)
:
CopyableTArray
(
aCapacity
)
{
}
explicit
MatchGlobSet
(
const
nsTArray
&
aOther
)
:
CopyableTArray
(
aOther
)
{
}
MOZ_IMPLICIT
MatchGlobSet
(
nsTArray
&
&
aOther
)
:
CopyableTArray
(
std
:
:
move
(
aOther
)
)
{
}
MOZ_IMPLICIT
MatchGlobSet
(
std
:
:
initializer_list
<
RefPtr
<
MatchGlobCore
>
>
aIL
)
:
CopyableTArray
(
aIL
)
{
}
bool
Matches
(
const
nsACString
&
aValue
)
const
;
}
;
}
}
#
endif
