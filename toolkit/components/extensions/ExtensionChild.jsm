"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionContext
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
var
{
BaseContext
Messenger
}
=
ExtensionUtils
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Management
"
(
)
=
>
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
.
Management
)
;
this
.
ExtensionContext
=
class
extends
BaseContext
{
constructor
(
extension
params
)
{
super
(
"
addon_parent
"
extension
)
;
let
{
type
uri
}
=
params
;
this
.
type
=
type
;
this
.
uri
=
uri
|
|
extension
.
baseURI
;
this
.
setContentWindow
(
params
.
contentWindow
)
;
let
sender
=
{
id
:
extension
.
uuid
}
;
if
(
uri
)
{
sender
.
url
=
uri
.
spec
;
}
Management
.
emit
(
"
page
-
load
"
this
params
sender
)
;
let
filter
=
{
extensionId
:
extension
.
id
}
;
let
optionalFilter
=
{
}
;
this
.
messenger
=
new
Messenger
(
this
[
Services
.
cpmm
this
.
messageManager
]
sender
filter
optionalFilter
)
;
if
(
this
.
externallyVisible
)
{
this
.
extension
.
views
.
add
(
this
)
;
}
}
get
cloneScope
(
)
{
return
this
.
contentWindow
;
}
get
principal
(
)
{
return
this
.
contentWindow
.
document
.
nodePrincipal
;
}
get
externallyVisible
(
)
{
return
true
;
}
shutdown
(
)
{
Management
.
emit
(
"
page
-
shutdown
"
this
)
;
this
.
unload
(
)
;
}
unload
(
)
{
if
(
this
.
unloaded
)
{
return
;
}
super
.
unload
(
)
;
Management
.
emit
(
"
page
-
unload
"
this
)
;
if
(
this
.
externallyVisible
)
{
this
.
extension
.
views
.
delete
(
this
)
;
}
}
}
;
