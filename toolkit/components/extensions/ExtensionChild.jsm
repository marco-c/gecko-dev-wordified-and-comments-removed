"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionChild
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MessageChannel
"
"
resource
:
/
/
gre
/
modules
/
MessageChannel
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Schemas
"
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
const
CATEGORY_EXTENSION_SCRIPTS_ADDON
=
"
webextension
-
scripts
-
addon
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
var
{
getInnerWindowID
BaseContext
ChildAPIManager
LocalAPIImplementation
Messenger
SchemaAPIManager
}
=
ExtensionUtils
;
XPCOMUtils
.
defineLazyGetter
(
this
"
findPathInObject
"
(
)
=
>
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
.
findPathInObject
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
ParentAPIManager
"
(
)
=
>
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
.
ParentAPIManager
)
;
var
apiManager
=
new
class
extends
SchemaAPIManager
{
constructor
(
)
{
super
(
"
addon
"
)
;
this
.
initialized
=
false
;
}
generateAPIs
(
.
.
.
args
)
{
if
(
!
this
.
initialized
)
{
this
.
initialized
=
true
;
for
(
let
[
value
]
of
XPCOMUtils
.
enumerateCategoryEntries
(
CATEGORY_EXTENSION_SCRIPTS_ADDON
)
)
{
this
.
loadScript
(
value
)
;
}
}
return
super
.
generateAPIs
(
.
.
.
args
)
;
}
registerSchemaAPI
(
namespace
envType
getAPI
)
{
if
(
envType
=
=
"
addon_child
"
)
{
super
.
registerSchemaAPI
(
namespace
envType
getAPI
)
;
}
}
}
(
)
;
class
WannabeChildAPIManager
extends
ChildAPIManager
{
createProxyContextInConstructor
(
data
)
{
data
=
Object
.
assign
(
{
}
data
)
;
let
{
principal
}
=
data
;
delete
data
.
principal
;
data
=
Cu
.
cloneInto
(
data
{
}
)
;
data
.
principal
=
principal
;
let
name
=
"
API
:
CreateProxyContext
"
;
let
target
=
this
.
context
.
contentWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
.
chromeEventHandler
;
ParentAPIManager
.
receiveMessage
(
{
name
data
target
}
)
;
let
proxyContext
=
ParentAPIManager
.
proxyContexts
.
get
(
this
.
id
)
;
Object
.
defineProperty
(
proxyContext
"
cloneScope
"
{
get
:
(
)
=
>
this
.
cloneScope
}
)
;
this
.
context
.
callOnClose
(
{
close
:
proxyContext
.
unload
.
bind
(
proxyContext
)
}
)
;
}
getFallbackImplementation
(
namespace
name
)
{
let
shouldSynchronouslyUseParentAPI
=
false
;
if
(
namespace
=
=
"
webNavigation
"
|
|
namespace
=
=
"
webRequest
"
)
{
shouldSynchronouslyUseParentAPI
=
true
;
}
if
(
shouldSynchronouslyUseParentAPI
)
{
let
proxyContext
=
ParentAPIManager
.
proxyContexts
.
get
(
this
.
id
)
;
let
apiObj
=
findPathInObject
(
proxyContext
.
apiObj
namespace
false
)
;
if
(
apiObj
&
&
name
in
apiObj
)
{
return
new
LocalAPIImplementation
(
apiObj
name
this
.
context
)
;
}
}
return
super
.
getFallbackImplementation
(
namespace
name
)
;
}
}
class
ExtensionContext
extends
BaseContext
{
constructor
(
extension
params
)
{
super
(
"
addon_child
"
extension
)
;
if
(
Services
.
appinfo
.
processType
!
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
throw
new
Error
(
"
ExtensionContext
cannot
be
created
in
child
processes
"
)
;
}
let
{
viewType
uri
contentWindow
tabId
}
=
params
;
this
.
viewType
=
viewType
;
this
.
uri
=
uri
|
|
extension
.
baseURI
;
this
.
setContentWindow
(
contentWindow
)
;
let
sender
=
{
id
:
extension
.
uuid
}
;
if
(
viewType
=
=
"
tab
"
)
{
sender
.
tabId
=
tabId
;
this
.
tabId
=
tabId
;
}
if
(
uri
)
{
sender
.
url
=
uri
.
spec
;
}
let
filter
=
{
extensionId
:
extension
.
id
}
;
let
optionalFilter
=
{
}
;
this
.
messenger
=
new
Messenger
(
this
[
Services
.
cpmm
this
.
messageManager
]
sender
filter
optionalFilter
)
;
let
localApis
=
{
}
;
apiManager
.
generateAPIs
(
this
localApis
)
;
this
.
childManager
=
new
WannabeChildAPIManager
(
this
this
.
messageManager
localApis
{
envType
:
"
addon_parent
"
viewType
url
:
uri
.
spec
}
)
;
let
chromeApiWrapper
=
Object
.
create
(
this
.
childManager
)
;
chromeApiWrapper
.
isChromeCompat
=
true
;
let
browserObj
=
Cu
.
createObjectIn
(
contentWindow
{
defineAs
:
"
browser
"
}
)
;
let
chromeObj
=
Cu
.
createObjectIn
(
contentWindow
{
defineAs
:
"
chrome
"
}
)
;
Schemas
.
inject
(
browserObj
this
.
childManager
)
;
Schemas
.
inject
(
chromeObj
chromeApiWrapper
)
;
if
(
viewType
=
=
"
background
"
)
{
apiManager
.
global
.
initializeBackgroundPage
(
contentWindow
)
;
}
this
.
extension
.
views
.
add
(
this
)
;
}
get
cloneScope
(
)
{
return
this
.
contentWindow
;
}
get
principal
(
)
{
return
this
.
contentWindow
.
document
.
nodePrincipal
;
}
get
windowId
(
)
{
if
(
this
.
viewType
=
=
"
tab
"
|
|
this
.
viewType
=
=
"
popup
"
)
{
let
globalView
=
ExtensionChild
.
contentGlobals
.
get
(
this
.
messageManager
)
;
return
globalView
?
globalView
.
windowId
:
-
1
;
}
}
shutdown
(
)
{
this
.
unload
(
)
;
}
unload
(
)
{
if
(
this
.
unloaded
)
{
return
;
}
super
.
unload
(
)
;
this
.
childManager
.
close
(
)
;
this
.
extension
.
views
.
delete
(
this
)
;
}
}
class
ContentGlobal
{
constructor
(
global
)
{
this
.
global
=
global
;
this
.
viewType
=
"
tab
"
;
this
.
tabId
=
-
1
;
this
.
windowId
=
-
1
;
this
.
initialized
=
false
;
this
.
global
.
addMessageListener
(
"
Extension
:
InitExtensionView
"
this
)
;
this
.
global
.
addMessageListener
(
"
Extension
:
SetTabAndWindowId
"
this
)
;
this
.
initialDocuments
=
new
WeakSet
(
)
;
}
uninit
(
)
{
this
.
global
.
removeMessageListener
(
"
Extension
:
InitExtensionView
"
this
)
;
this
.
global
.
removeMessageListener
(
"
Extension
:
SetTabAndWindowId
"
this
)
;
this
.
global
.
removeEventListener
(
"
DOMContentLoaded
"
this
)
;
}
ensureInitialized
(
)
{
if
(
!
this
.
initialized
)
{
let
reply
=
this
.
global
.
sendSyncMessage
(
"
Extension
:
GetTabAndWindowId
"
)
;
this
.
handleSetTabAndWindowId
(
reply
[
0
]
|
|
{
}
)
;
}
return
this
;
}
receiveMessage
(
{
name
data
}
)
{
switch
(
name
)
{
case
"
Extension
:
InitExtensionView
"
:
this
.
global
.
removeMessageListener
(
"
Extension
:
InitExtensionView
"
this
)
;
let
{
viewType
url
}
=
data
;
this
.
viewType
=
viewType
;
this
.
global
.
addEventListener
(
"
DOMContentLoaded
"
this
)
;
if
(
url
)
{
let
{
document
}
=
this
.
global
.
content
;
this
.
initialDocuments
.
add
(
document
)
;
document
.
location
.
replace
(
url
)
;
}
case
"
Extension
:
SetTabAndWindowId
"
:
this
.
handleSetTabAndWindowId
(
data
)
;
break
;
}
}
handleSetTabAndWindowId
(
data
)
{
let
{
tabId
windowId
}
=
data
;
if
(
tabId
)
{
if
(
this
.
tabId
!
=
=
-
1
&
&
tabId
!
=
=
this
.
tabId
)
{
throw
new
Error
(
"
Attempted
to
change
a
tabId
after
it
was
set
"
)
;
}
this
.
tabId
=
tabId
;
}
if
(
windowId
!
=
=
undefined
)
{
this
.
windowId
=
windowId
;
}
this
.
initialized
=
true
;
}
handleEvent
(
event
)
{
let
{
document
}
=
this
.
global
.
content
;
if
(
event
.
target
=
=
=
document
)
{
if
(
this
.
initialDocuments
.
has
(
document
)
)
{
this
.
initialDocuments
.
delete
(
document
)
;
return
;
}
this
.
global
.
removeEventListener
(
"
DOMContentLoaded
"
this
)
;
this
.
global
.
sendAsyncMessage
(
"
Extension
:
ExtensionViewLoaded
"
)
;
}
}
}
this
.
ExtensionChild
=
{
contentGlobals
:
new
Map
(
)
extensionContexts
:
new
Map
(
)
initOnce
(
)
{
MessageChannel
.
setupMessageManagers
(
[
Services
.
cpmm
]
)
;
}
init
(
global
)
{
this
.
contentGlobals
.
set
(
global
new
ContentGlobal
(
global
)
)
;
}
uninit
(
global
)
{
this
.
contentGlobals
.
get
(
global
)
.
uninit
(
)
;
this
.
contentGlobals
.
delete
(
global
)
;
}
createExtensionContext
(
extension
contentWindow
)
{
let
windowId
=
getInnerWindowID
(
contentWindow
)
;
let
context
=
this
.
extensionContexts
.
get
(
windowId
)
;
if
(
context
)
{
if
(
context
.
extension
!
=
=
extension
)
{
Cu
.
reportError
(
"
A
different
extension
context
already
exists
in
this
frame
!
"
)
;
}
else
{
Cu
.
reportError
(
"
The
extension
context
was
already
initialized
in
this
frame
.
"
)
;
}
return
;
}
let
mm
=
contentWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
let
{
viewType
tabId
}
=
this
.
contentGlobals
.
get
(
mm
)
.
ensureInitialized
(
)
;
let
uri
=
contentWindow
.
document
.
documentURIObject
;
context
=
new
ExtensionContext
(
extension
{
viewType
contentWindow
uri
tabId
}
)
;
this
.
extensionContexts
.
set
(
windowId
context
)
;
}
destroyExtensionContext
(
windowId
)
{
let
context
=
this
.
extensionContexts
.
get
(
windowId
)
;
if
(
context
)
{
context
.
unload
(
)
;
this
.
extensionContexts
.
delete
(
windowId
)
;
}
}
shutdownExtension
(
extensionId
)
{
for
(
let
[
windowId
context
]
of
this
.
extensionContexts
)
{
if
(
context
.
extension
.
id
=
=
extensionId
)
{
context
.
shutdown
(
)
;
this
.
extensionContexts
.
delete
(
windowId
)
;
}
}
}
}
;
if
(
Services
.
appinfo
.
processType
!
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
Object
.
keys
(
ExtensionChild
)
.
forEach
(
function
(
key
)
{
if
(
typeof
ExtensionChild
[
key
]
=
=
"
function
"
)
{
ExtensionChild
[
key
]
=
(
)
=
>
{
}
;
}
}
)
;
}
