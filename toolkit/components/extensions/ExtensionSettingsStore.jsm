"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionSettingsStore
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
JSONFile
"
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
const
JSON_FILE_NAME
=
"
extension
-
settings
.
json
"
;
const
STORE_PATH
=
OS
.
Path
.
join
(
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
.
path
JSON_FILE_NAME
)
;
let
_store
;
async
function
getStore
(
type
)
{
if
(
!
_store
)
{
_store
=
new
JSONFile
(
{
path
:
STORE_PATH
}
)
;
await
_store
.
load
(
)
;
}
_store
.
ensureDataReady
(
)
;
if
(
!
_store
.
data
[
type
]
)
{
_store
.
data
[
type
]
=
{
}
;
}
return
_store
;
}
async
function
getTopItem
(
type
key
)
{
let
store
=
await
getStore
(
type
)
;
let
keyInfo
=
store
.
data
[
type
]
[
key
]
;
if
(
!
keyInfo
)
{
return
null
;
}
if
(
!
keyInfo
.
precedenceList
.
length
)
{
return
{
key
initialValue
:
keyInfo
.
initialValue
}
;
}
return
{
key
value
:
keyInfo
.
precedenceList
[
0
]
.
value
}
;
}
this
.
ExtensionSettingsStore
=
{
async
addSetting
(
extension
type
key
value
initialValueCallback
callbackArgument
=
key
)
{
if
(
typeof
initialValueCallback
!
=
"
function
"
)
{
throw
new
Error
(
"
initialValueCallback
must
be
a
function
.
"
)
;
}
let
id
=
extension
.
id
;
let
store
=
await
getStore
(
type
)
;
if
(
!
store
.
data
[
type
]
[
key
]
)
{
let
initialValue
=
await
initialValueCallback
(
callbackArgument
)
;
store
.
data
[
type
]
[
key
]
=
{
initialValue
precedenceList
:
[
]
}
;
}
let
keyInfo
=
store
.
data
[
type
]
[
key
]
;
let
foundIndex
=
keyInfo
.
precedenceList
.
findIndex
(
item
=
>
item
.
id
=
=
id
)
;
if
(
foundIndex
=
=
-
1
)
{
let
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
keyInfo
.
precedenceList
.
push
(
{
id
installDate
:
addon
.
installDate
value
}
)
;
}
else
{
keyInfo
.
precedenceList
[
foundIndex
]
.
value
=
value
;
}
keyInfo
.
precedenceList
.
sort
(
(
a
b
)
=
>
{
return
b
.
installDate
-
a
.
installDate
;
}
)
;
store
.
saveSoon
(
)
;
if
(
keyInfo
.
precedenceList
[
0
]
.
id
=
=
id
)
{
return
{
key
value
}
;
}
return
null
;
}
async
removeSetting
(
extension
type
key
)
{
let
returnItem
;
let
store
=
await
getStore
(
type
)
;
let
keyInfo
=
store
.
data
[
type
]
[
key
]
;
if
(
!
keyInfo
)
{
throw
new
Error
(
Cannot
remove
setting
for
{
type
}
:
{
key
}
as
it
does
not
exist
.
)
;
}
let
id
=
extension
.
id
;
let
foundIndex
=
keyInfo
.
precedenceList
.
findIndex
(
item
=
>
item
.
id
=
=
id
)
;
if
(
foundIndex
=
=
-
1
)
{
throw
new
Error
(
Cannot
remove
setting
for
{
type
}
:
{
key
}
as
it
does
not
exist
.
)
;
}
keyInfo
.
precedenceList
.
splice
(
foundIndex
1
)
;
if
(
foundIndex
=
=
0
)
{
returnItem
=
await
getTopItem
(
type
key
)
;
}
if
(
keyInfo
.
precedenceList
.
length
=
=
0
)
{
delete
store
.
data
[
type
]
[
key
]
;
}
store
.
saveSoon
(
)
;
return
returnItem
;
}
async
getAllForExtension
(
extension
type
)
{
let
store
=
await
getStore
(
type
)
;
let
keysObj
=
store
.
data
[
type
]
;
let
items
=
[
]
;
for
(
let
key
in
keysObj
)
{
if
(
keysObj
[
key
]
.
precedenceList
.
find
(
item
=
>
item
.
id
=
=
extension
.
id
)
)
{
items
.
push
(
key
)
;
}
}
return
items
;
}
async
getSetting
(
type
key
)
{
return
await
getTopItem
(
type
key
)
;
}
async
getLevelOfControl
(
extension
type
key
)
{
let
store
=
await
getStore
(
type
)
;
let
keyInfo
=
store
.
data
[
type
]
[
key
]
;
if
(
!
keyInfo
|
|
!
keyInfo
.
precedenceList
.
length
)
{
return
"
controllable_by_this_extension
"
;
}
let
id
=
extension
.
id
;
let
topItem
=
keyInfo
.
precedenceList
[
0
]
;
if
(
topItem
.
id
=
=
id
)
{
return
"
controlled_by_this_extension
"
;
}
let
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
return
topItem
.
installDate
>
addon
.
installDate
?
"
controlled_by_other_extensions
"
:
"
controllable_by_this_extension
"
;
}
}
;
