"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ExtensionUtils
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryStopwatch
"
"
resource
:
/
/
gre
/
modules
/
TelemetryStopwatch
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
idleTimeout
"
(
)
=
>
Services
.
appinfo
.
name
=
=
=
"
XPCShell
"
?
500
:
undefined
)
;
const
appinfo
=
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIXULRuntime
)
;
let
nextId
=
0
;
const
uniqueProcessID
=
appinfo
.
uniqueProcessID
;
const
processIDMask
=
(
uniqueProcessID
&
0xffff
)
*
(
2
*
*
37
)
;
function
getUniqueId
(
)
{
return
processIDMask
+
nextId
+
+
;
}
function
promiseTimeout
(
delay
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
delay
)
)
;
}
class
ExtensionError
extends
Error
{
}
function
filterStack
(
error
)
{
return
String
(
error
.
stack
)
.
replace
(
/
(
^
.
*
(
Task
\
.
jsm
|
Promise
-
backend
\
.
js
)
.
*
\
n
)
+
/
gm
"
<
Promise
Chain
>
\
n
"
)
;
}
class
DefaultWeakMap
extends
WeakMap
{
constructor
(
defaultConstructor
=
undefined
init
=
undefined
)
{
super
(
init
)
;
if
(
defaultConstructor
)
{
this
.
defaultConstructor
=
defaultConstructor
;
}
}
get
(
key
)
{
let
value
=
super
.
get
(
key
)
;
if
(
value
=
=
=
undefined
&
&
!
this
.
has
(
key
)
)
{
value
=
this
.
defaultConstructor
(
key
)
;
this
.
set
(
key
value
)
;
}
return
value
;
}
}
class
DefaultMap
extends
Map
{
constructor
(
defaultConstructor
=
undefined
init
=
undefined
)
{
super
(
init
)
;
if
(
defaultConstructor
)
{
this
.
defaultConstructor
=
defaultConstructor
;
}
}
get
(
key
)
{
let
value
=
super
.
get
(
key
)
;
if
(
value
=
=
=
undefined
&
&
!
this
.
has
(
key
)
)
{
value
=
this
.
defaultConstructor
(
key
)
;
this
.
set
(
key
value
)
;
}
return
value
;
}
}
const
_winUtils
=
new
DefaultWeakMap
(
win
=
>
{
return
win
.
windowUtils
;
}
)
;
const
getWinUtils
=
win
=
>
_winUtils
.
get
(
win
)
;
function
getInnerWindowID
(
window
)
{
return
getWinUtils
(
window
)
.
currentInnerWindowID
;
}
class
LimitedSet
extends
Set
{
constructor
(
limit
slop
=
Math
.
round
(
limit
*
.
25
)
iterable
=
undefined
)
{
super
(
iterable
)
;
this
.
limit
=
limit
;
this
.
slop
=
slop
;
}
truncate
(
limit
)
{
for
(
let
item
of
this
)
{
if
(
this
.
size
>
limit
)
{
this
.
delete
(
item
)
;
}
}
}
add
(
item
)
{
if
(
this
.
size
>
=
this
.
limit
+
this
.
slop
&
&
!
this
.
has
(
item
)
)
{
this
.
truncate
(
this
.
limit
-
1
)
;
}
super
.
add
(
item
)
;
}
}
function
promiseDocumentReady
(
doc
)
{
if
(
doc
.
readyState
=
=
"
interactive
"
|
|
doc
.
readyState
=
=
"
complete
"
)
{
return
Promise
.
resolve
(
doc
)
;
}
return
new
Promise
(
resolve
=
>
{
doc
.
addEventListener
(
"
DOMContentLoaded
"
function
onReady
(
event
)
{
if
(
event
.
target
=
=
=
event
.
currentTarget
)
{
doc
.
removeEventListener
(
"
DOMContentLoaded
"
onReady
true
)
;
resolve
(
doc
)
;
}
}
true
)
;
}
)
;
}
function
promiseDocumentIdle
(
window
)
{
return
window
.
document
.
documentReadyForIdle
.
then
(
(
)
=
>
{
return
new
Promise
(
resolve
=
>
window
.
requestIdleCallback
(
resolve
{
timeout
:
idleTimeout
}
)
)
;
}
)
;
}
function
promiseDocumentLoaded
(
doc
)
{
if
(
doc
.
readyState
=
=
"
complete
"
)
{
return
Promise
.
resolve
(
doc
)
;
}
return
new
Promise
(
resolve
=
>
{
doc
.
defaultView
.
addEventListener
(
"
load
"
(
)
=
>
resolve
(
doc
)
{
once
:
true
}
)
;
}
)
;
}
function
promiseEvent
(
element
eventName
useCapture
=
true
test
=
event
=
>
true
)
{
return
new
Promise
(
resolve
=
>
{
function
listener
(
event
)
{
if
(
test
(
event
)
)
{
element
.
removeEventListener
(
eventName
listener
useCapture
)
;
resolve
(
event
)
;
}
}
element
.
addEventListener
(
eventName
listener
useCapture
)
;
}
)
;
}
function
promiseObserved
(
topic
test
=
(
)
=
>
true
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
(
subject
topic
data
)
=
>
{
if
(
test
(
subject
data
)
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
{
subject
data
}
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
topic
)
;
}
)
;
}
function
getMessageManager
(
target
)
{
if
(
target
.
frameLoader
)
{
return
target
.
frameLoader
.
messageManager
;
}
return
target
;
}
function
flushJarCache
(
jarPath
)
{
Services
.
obs
.
notifyObservers
(
null
"
flush
-
cache
-
entry
"
jarPath
)
;
}
const
chromeModifierKeyMap
=
{
"
Alt
"
:
"
alt
"
"
Command
"
:
"
accel
"
"
Ctrl
"
:
"
accel
"
"
MacCtrl
"
:
"
control
"
"
Shift
"
:
"
shift
"
}
;
function
getTrimmedString
(
str
)
{
if
(
str
.
length
<
=
80
)
{
return
str
;
}
const
length
=
str
.
length
;
return
{
str
.
slice
(
0
40
)
}
.
.
.
{
str
.
slice
(
length
-
37
length
)
}
;
}
const
ExtensionTelemetryHelpers
=
{
_metricsMap
:
new
Map
(
)
_histograms
:
{
"
extensionStartup
"
:
"
WEBEXT_EXTENSION_STARTUP_MS
"
"
backgroundPageLoad
"
:
"
WEBEXT_BACKGROUND_PAGE_LOAD_MS
"
"
browserActionPopupOpen
"
:
"
WEBEXT_BROWSERACTION_POPUP_OPEN_MS
"
"
browserActionPreloadResult
"
:
"
WEBEXT_BROWSERACTION_POPUP_PRELOAD_RESULT_COUNT
"
"
contentScriptInjection
"
:
"
WEBEXT_CONTENT_SCRIPT_INJECTION_MS
"
"
pageActionPopupOpen
"
:
"
WEBEXT_PAGEACTION_POPUP_OPEN_MS
"
"
storageLocalGetJSON
"
:
"
WEBEXT_STORAGE_LOCAL_GET_MS
"
"
storageLocalSetJSON
"
:
"
WEBEXT_STORAGE_LOCAL_SET_MS
"
"
storageLocalGetIDB
"
:
"
WEBEXT_STORAGE_LOCAL_IDB_GET_MS
"
"
storageLocalSetIDB
"
:
"
WEBEXT_STORAGE_LOCAL_IDB_SET_MS
"
}
_wrappedStopwatchMethod
(
method
metric
extension
obj
=
extension
)
{
if
(
!
extension
)
{
throw
new
Error
(
Mandatory
extension
parameter
is
undefined
)
;
}
const
baseId
=
this
.
_histograms
[
metric
]
;
if
(
!
baseId
)
{
throw
new
Error
(
Unknown
metric
{
metric
}
)
;
}
TelemetryStopwatch
[
method
]
(
baseId
obj
)
;
let
extensionId
=
getTrimmedString
(
extension
.
id
)
;
TelemetryStopwatch
[
{
method
}
Keyed
]
(
{
baseId
}
_BY_ADDONID
extensionId
obj
)
;
}
_histogramAdd
(
metric
{
category
extension
value
}
)
{
if
(
!
extension
)
{
throw
new
Error
(
Mandatory
extension
parameter
is
undefined
)
;
}
const
baseId
=
this
.
_histograms
[
metric
]
;
if
(
!
baseId
)
{
throw
new
Error
(
Unknown
metric
{
metric
}
)
;
}
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
baseId
)
;
if
(
typeof
category
=
=
=
"
string
"
)
{
histogram
.
add
(
category
value
)
;
}
else
{
histogram
.
add
(
value
)
;
}
const
keyedHistogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
{
baseId
}
_BY_ADDONID
)
;
const
extensionId
=
getTrimmedString
(
extension
.
id
)
;
if
(
typeof
category
=
=
=
"
string
"
)
{
keyedHistogram
.
add
(
extensionId
category
value
)
;
}
else
{
keyedHistogram
.
add
(
extensionId
value
)
;
}
}
}
;
const
ExtensionTelemetry
=
new
Proxy
(
ExtensionTelemetryHelpers
{
get
(
target
prop
receiver
)
{
if
(
!
(
prop
in
target
.
_histograms
)
)
{
throw
new
Error
(
Unknown
metric
{
prop
}
)
;
}
if
(
!
target
.
_metricsMap
.
has
(
prop
)
)
{
target
.
_metricsMap
.
set
(
prop
{
stopwatchStart
:
target
.
_wrappedStopwatchMethod
.
bind
(
target
"
start
"
prop
)
stopwatchFinish
:
target
.
_wrappedStopwatchMethod
.
bind
(
target
"
finish
"
prop
)
stopwatchCancel
:
target
.
_wrappedStopwatchMethod
.
bind
(
target
"
cancel
"
prop
)
histogramAdd
:
target
.
_histogramAdd
.
bind
(
target
prop
)
}
)
;
}
return
target
.
_metricsMap
.
get
(
prop
)
;
}
}
)
;
var
ExtensionUtils
=
{
chromeModifierKeyMap
flushJarCache
getInnerWindowID
getMessageManager
getTrimmedString
getUniqueId
filterStack
getWinUtils
promiseDocumentIdle
promiseDocumentLoaded
promiseDocumentReady
promiseEvent
promiseObserved
promiseTimeout
DefaultMap
DefaultWeakMap
ExtensionError
ExtensionTelemetry
LimitedSet
}
;
