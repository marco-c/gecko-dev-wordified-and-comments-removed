use
std
:
:
path
:
:
PathBuf
;
use
once_cell
:
:
sync
:
:
OnceCell
;
use
webext_storage
:
:
store
:
:
Store
;
use
crate
:
:
error
:
:
{
Error
Result
}
;
pub
struct
LazyStoreConfig
{
pub
path
:
PathBuf
}
#
[
derive
(
Default
)
]
pub
struct
LazyStore
{
store
:
OnceCell
<
Store
>
config
:
OnceCell
<
LazyStoreConfig
>
}
impl
LazyStore
{
pub
fn
configure
(
&
self
config
:
LazyStoreConfig
)
-
>
Result
<
(
)
>
{
self
.
config
.
set
(
config
)
.
map_err
(
|
_
|
Error
:
:
AlreadyConfigured
)
}
pub
fn
get
(
&
self
)
-
>
Result
<
&
Store
>
{
self
.
store
.
get_or_try_init
(
|
|
match
self
.
config
.
get
(
)
{
Some
(
config
)
=
>
Ok
(
Store
:
:
new
(
&
config
.
path
)
?
)
None
=
>
Err
(
Error
:
:
NotConfigured
)
}
)
}
pub
fn
teardown
(
self
)
-
>
Result
<
(
)
>
{
if
let
Some
(
store
)
=
self
.
store
.
into_inner
(
)
{
drop
(
store
)
;
}
Ok
(
(
)
)
}
}
