use
std
:
:
{
borrow
:
:
Borrow
fmt
:
:
Write
mem
result
str
sync
:
:
{
Arc
Weak
}
}
;
use
atomic_refcell
:
:
AtomicRefCell
;
use
moz_task
:
:
{
Task
ThreadPtrHandle
ThreadPtrHolder
}
;
use
nserror
:
:
nsresult
;
use
nsstring
:
:
nsCString
;
use
serde
:
:
Serialize
;
use
serde_json
:
:
Value
as
JsonValue
;
use
storage_variant
:
:
VariantType
;
use
xpcom
:
:
{
interfaces
:
:
{
mozIExtensionStorageCallback
mozIExtensionStorageListener
}
RefPtr
XpCom
}
;
use
crate
:
:
error
:
:
{
Error
Result
}
;
use
crate
:
:
store
:
:
LazyStore
;
pub
enum
Punt
{
Get
{
ext_id
:
String
keys
:
JsonValue
}
Set
{
ext_id
:
String
value
:
JsonValue
}
Remove
{
ext_id
:
String
keys
:
JsonValue
}
Clear
{
ext_id
:
String
}
GetBytesInUse
{
ext_id
:
String
keys
:
JsonValue
}
}
impl
Punt
{
pub
fn
name
(
&
self
)
-
>
&
'
static
str
{
match
self
{
Punt
:
:
Get
{
.
.
}
=
>
"
webext_storage
:
:
get
"
Punt
:
:
Set
{
.
.
}
=
>
"
webext_storage
:
:
set
"
Punt
:
:
Remove
{
.
.
}
=
>
"
webext_storage
:
:
remove
"
Punt
:
:
Clear
{
.
.
}
=
>
"
webext_storage
:
:
clear
"
Punt
:
:
GetBytesInUse
{
.
.
}
=
>
"
webext_storage
:
:
get_bytes_in_use
"
}
}
}
#
[
derive
(
Default
)
]
pub
struct
PuntResult
{
pub
changes
:
Option
<
String
>
pub
value
:
Option
<
String
>
}
impl
PuntResult
{
pub
fn
with_changes
<
T
:
Borrow
<
S
>
S
:
Serialize
>
(
changes
:
T
)
-
>
Result
<
Self
>
{
Ok
(
PuntResult
{
changes
:
Some
(
serde_json
:
:
to_string
(
changes
.
borrow
(
)
)
?
)
value
:
None
}
)
}
pub
fn
with_value
<
T
:
Borrow
<
S
>
S
:
Serialize
>
(
value
:
T
)
-
>
Result
<
Self
>
{
Ok
(
PuntResult
{
changes
:
None
value
:
Some
(
serde_json
:
:
to_string
(
value
.
borrow
(
)
)
?
)
}
)
}
}
pub
struct
PuntTask
{
name
:
&
'
static
str
store
:
Weak
<
LazyStore
>
punt
:
AtomicRefCell
<
Option
<
Punt
>
>
callback
:
ThreadPtrHandle
<
mozIExtensionStorageCallback
>
result
:
AtomicRefCell
<
Result
<
PuntResult
>
>
}
impl
PuntTask
{
pub
fn
new
(
store
:
Weak
<
LazyStore
>
punt
:
Punt
callback
:
&
mozIExtensionStorageCallback
)
-
>
Result
<
Self
>
{
let
name
=
punt
.
name
(
)
;
Ok
(
Self
{
name
store
punt
:
AtomicRefCell
:
:
new
(
Some
(
punt
)
)
callback
:
ThreadPtrHolder
:
:
new
(
cstr
!
(
"
mozIExtensionStorageCallback
"
)
RefPtr
:
:
new
(
callback
)
)
?
result
:
AtomicRefCell
:
:
new
(
Err
(
Error
:
:
DidNotRun
(
name
)
)
)
}
)
}
fn
store
(
&
self
)
-
>
Result
<
Arc
<
LazyStore
>
>
{
match
self
.
store
.
upgrade
(
)
{
Some
(
store
)
=
>
Ok
(
store
)
None
=
>
Err
(
Error
:
:
AlreadyTornDown
)
}
}
fn
inner_run
(
&
self
punt
:
Punt
)
-
>
Result
<
PuntResult
>
{
Ok
(
match
punt
{
Punt
:
:
Set
{
ext_id
value
}
=
>
{
PuntResult
:
:
with_changes
(
self
.
store
(
)
?
.
get
(
)
?
.
set
(
&
ext_id
value
)
?
)
}
Punt
:
:
Get
{
ext_id
keys
}
=
>
{
PuntResult
:
:
with_value
(
self
.
store
(
)
?
.
get
(
)
?
.
get
(
&
ext_id
keys
)
?
)
}
Punt
:
:
Remove
{
ext_id
keys
}
=
>
{
PuntResult
:
:
with_changes
(
self
.
store
(
)
?
.
get
(
)
?
.
remove
(
&
ext_id
keys
)
?
)
}
Punt
:
:
Clear
{
ext_id
}
=
>
{
PuntResult
:
:
with_changes
(
self
.
store
(
)
?
.
get
(
)
?
.
clear
(
&
ext_id
)
?
)
}
Punt
:
:
GetBytesInUse
{
ext_id
keys
}
=
>
{
PuntResult
:
:
with_value
(
self
.
store
(
)
?
.
get
(
)
?
.
get_bytes_in_use
(
&
ext_id
keys
)
?
)
}
}
?
)
}
}
impl
Task
for
PuntTask
{
fn
run
(
&
self
)
{
*
self
.
result
.
borrow_mut
(
)
=
match
self
.
punt
.
borrow_mut
(
)
.
take
(
)
{
Some
(
punt
)
=
>
self
.
inner_run
(
punt
)
None
=
>
Err
(
Error
:
:
AlreadyRan
(
self
.
name
)
)
}
;
}
fn
done
(
&
self
)
-
>
result
:
:
Result
<
(
)
nsresult
>
{
let
callback
=
self
.
callback
.
get
(
)
.
unwrap
(
)
;
match
mem
:
:
replace
(
&
mut
*
self
.
result
.
borrow_mut
(
)
Err
(
Error
:
:
AlreadyRan
(
self
.
name
)
)
)
{
Ok
(
PuntResult
{
changes
value
}
)
=
>
{
if
let
(
Some
(
listener
)
Some
(
json
)
)
=
(
callback
.
query_interface
:
:
<
mozIExtensionStorageListener
>
(
)
changes
)
{
let
_
=
unsafe
{
listener
.
OnChanged
(
&
*
nsCString
:
:
from
(
json
)
)
}
;
}
let
result
=
value
.
map
(
nsCString
:
:
from
)
.
into_variant
(
)
;
unsafe
{
callback
.
HandleSuccess
(
result
.
coerce
(
)
)
}
}
Err
(
err
)
=
>
{
let
mut
message
=
nsCString
:
:
new
(
)
;
write
!
(
message
"
{
}
"
err
)
.
unwrap
(
)
;
unsafe
{
callback
.
HandleError
(
err
.
into
(
)
&
*
message
)
}
}
}
.
to_result
(
)
}
}
pub
struct
TeardownTask
{
store
:
AtomicRefCell
<
Option
<
Arc
<
LazyStore
>
>
>
callback
:
ThreadPtrHandle
<
mozIExtensionStorageCallback
>
result
:
AtomicRefCell
<
Result
<
(
)
>
>
}
impl
TeardownTask
{
pub
fn
new
(
store
:
Arc
<
LazyStore
>
callback
:
&
mozIExtensionStorageCallback
)
-
>
Result
<
Self
>
{
Ok
(
Self
{
store
:
AtomicRefCell
:
:
new
(
Some
(
store
)
)
callback
:
ThreadPtrHolder
:
:
new
(
cstr
!
(
"
mozIExtensionStorageCallback
"
)
RefPtr
:
:
new
(
callback
)
)
?
result
:
AtomicRefCell
:
:
new
(
Err
(
Error
:
:
DidNotRun
(
Self
:
:
name
(
)
)
)
)
}
)
}
pub
fn
name
(
)
-
>
&
'
static
str
{
"
webext_storage
:
:
teardown
"
}
fn
inner_run
(
&
self
store
:
Arc
<
LazyStore
>
)
-
>
Result
<
(
)
>
{
match
Arc
:
:
try_unwrap
(
store
)
{
Ok
(
store
)
=
>
store
.
teardown
(
)
Err
(
_
)
=
>
{
Err
(
Error
:
:
DidNotRun
(
Self
:
:
name
(
)
)
)
}
}
}
}
impl
Task
for
TeardownTask
{
fn
run
(
&
self
)
{
*
self
.
result
.
borrow_mut
(
)
=
match
self
.
store
.
borrow_mut
(
)
.
take
(
)
{
Some
(
store
)
=
>
self
.
inner_run
(
store
)
None
=
>
Err
(
Error
:
:
AlreadyRan
(
Self
:
:
name
(
)
)
)
}
;
}
fn
done
(
&
self
)
-
>
result
:
:
Result
<
(
)
nsresult
>
{
let
callback
=
self
.
callback
.
get
(
)
.
unwrap
(
)
;
match
mem
:
:
replace
(
&
mut
*
self
.
result
.
borrow_mut
(
)
Err
(
Error
:
:
AlreadyRan
(
Self
:
:
name
(
)
)
)
)
{
Ok
(
(
)
)
=
>
unsafe
{
callback
.
HandleSuccess
(
(
)
.
into_variant
(
)
.
coerce
(
)
)
}
Err
(
err
)
=
>
{
let
mut
message
=
nsCString
:
:
new
(
)
;
write
!
(
message
"
{
}
"
err
)
.
unwrap
(
)
;
unsafe
{
callback
.
HandleError
(
err
.
into
(
)
&
*
message
)
}
}
}
.
to_result
(
)
}
}
