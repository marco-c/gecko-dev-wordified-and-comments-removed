declare
namespace
tabs_base
{
declare
function
getUserContextIdForCookieStoreId
(
extension
:
any
cookieStoreId
:
any
isPrivateBrowsing
:
any
)
:
any
;
declare
var
DefaultMap
:
any
;
declare
var
DefaultWeakMap
:
any
;
declare
var
ExtensionError
:
any
;
declare
var
parseMatchPatterns
:
any
;
declare
var
defineLazyGetter
:
any
;
declare
class
TabBase
{
constructor
(
extension
:
any
nativeTab
:
any
id
:
any
)
;
extension
:
any
;
tabManager
:
any
;
id
:
any
;
nativeTab
:
any
;
activeTabWindowID
:
any
;
capture
(
context
:
BaseContext
zoom
:
number
options
?
:
{
format
?
:
string
;
quality
?
:
integer
;
rect
?
:
DOMRectInit
;
scale
?
:
number
;
}
)
:
Promise
<
string
>
;
readonly
get
innerWindowID
(
)
:
any
;
readonly
get
hasTabPermission
(
)
:
any
;
readonly
get
hasActiveTabPermission
(
)
:
boolean
;
readonly
get
matchesHostPermission
(
)
:
any
;
readonly
get
_incognito
(
)
:
any
;
readonly
get
_url
(
)
:
any
;
readonly
get
url
(
)
:
any
;
readonly
get
_uri
(
)
:
any
;
readonly
get
_title
(
)
:
any
;
readonly
get
title
(
)
:
any
;
readonly
get
_favIconUrl
(
)
:
void
;
readonly
get
favIconUrl
(
)
:
void
;
readonly
get
lastAccessed
(
)
:
void
;
readonly
get
audible
(
)
:
void
;
readonly
get
autoDiscardable
(
)
:
void
;
readonly
get
browser
(
)
:
XULBrowserElement
;
readonly
get
browsingContext
(
)
:
any
;
readonly
get
frameLoader
(
)
:
void
;
readonly
get
cookieStoreId
(
)
:
void
;
readonly
get
openerTabId
(
)
:
any
;
readonly
get
discarded
(
)
:
void
;
readonly
get
height
(
)
:
void
;
readonly
get
hidden
(
)
:
void
;
readonly
get
index
(
)
:
void
;
readonly
get
mutedInfo
(
)
:
void
;
readonly
get
sharingState
(
)
:
void
;
readonly
get
pinned
(
)
:
void
;
readonly
get
active
(
)
:
void
;
readonly
get
highlighted
(
)
:
void
;
readonly
get
status
(
)
:
void
;
readonly
get
width
(
)
:
void
;
readonly
get
window
(
)
:
void
;
readonly
get
windowId
(
)
:
void
;
readonly
get
attention
(
)
:
void
;
readonly
get
isArticle
(
)
:
void
;
readonly
get
isInReaderMode
(
)
:
void
;
readonly
get
successorTabId
(
)
:
void
;
matches
(
queryInfo
:
{
active
?
:
boolean
;
audible
?
:
boolean
;
autoDiscardable
?
:
boolean
;
cookieStoreId
?
:
string
;
discarded
?
:
boolean
;
hidden
?
:
boolean
;
highlighted
?
:
boolean
;
index
?
:
integer
;
muted
?
:
boolean
;
pinned
?
:
boolean
;
status
?
:
string
;
title
?
:
string
;
screen
?
:
string
|
boolean
;
camera
?
:
boolean
;
microphone
?
:
boolean
;
url
?
:
MatchPattern
;
}
)
:
boolean
;
convert
(
fallbackTabSize
?
:
object
)
:
object
;
queryContent
(
message
:
string
options
:
{
frameIds
:
number
[
]
;
returnResultsWithFrameIds
:
boolean
;
}
)
:
Promise
<
any
>
[
]
;
private
_execute
;
executeScript
(
context
:
BaseContext
details
:
InjectDetails
)
:
Promise
<
any
>
;
insertCSS
(
context
:
BaseContext
details
:
InjectDetails
)
:
Promise
<
any
>
;
removeCSS
(
context
:
BaseContext
details
:
InjectDetails
)
:
Promise
<
any
>
;
}
declare
const
WINDOW_ID_NONE
:
-
1
;
declare
const
WINDOW_ID_CURRENT
:
-
2
;
declare
class
WindowBase
{
static
getState
(
window
:
DOMWindow
)
:
string
;
constructor
(
extension
:
any
window
:
any
id
:
any
)
;
extension
:
any
;
window
:
any
;
id
:
any
;
readonly
get
appWindow
(
)
:
any
;
isCurrentFor
(
context
:
BaseContext
)
:
boolean
;
readonly
get
type
(
)
:
"
popup
"
|
"
normal
"
;
convert
(
getInfo
?
:
{
populate
?
:
boolean
;
}
)
:
object
;
matches
(
queryInfo
:
{
currentWindow
?
:
boolean
;
lastFocusedWindow
?
:
boolean
;
windowId
?
:
boolean
;
windowType
?
:
string
;
}
context
:
BaseContext
)
:
boolean
;
readonly
get
focused
(
)
:
void
;
readonly
get
top
(
)
:
void
;
readonly
get
left
(
)
:
void
;
readonly
get
width
(
)
:
void
;
readonly
get
height
(
)
:
void
;
readonly
get
incognito
(
)
:
void
;
readonly
get
alwaysOnTop
(
)
:
void
;
readonly
get
isLastFocused
(
)
:
void
;
set
state
(
state
:
void
)
;
get
state
(
)
:
void
;
readonly
get
title
(
)
:
any
;
getTabs
(
)
:
Iterator
<
TabBase
>
;
getHighlightedTabs
(
)
:
Iterator
<
TabBase
>
;
get
activeTab
(
)
:
void
;
getTabAtIndex
(
index
:
integer
)
:
TabBase
|
undefined
;
}
declare
class
TabTrackerBase
{
on
(
.
.
.
args
:
any
[
]
)
:
any
;
protected
init
(
)
:
void
;
getId
(
nativeTab
:
NativeTab
)
:
integer
;
getTab
(
tabId
:
integer
default_
?
:
any
)
:
NativeTab
;
getBrowserData
(
browser
:
XULElement
)
:
BrowserData
;
get
activeTab
(
)
:
void
;
}
declare
class
StatusListener
{
constructor
(
listener
:
any
)
;
listener
:
any
;
onStateChange
(
browser
:
any
webProgress
:
any
request
:
any
stateFlags
:
any
statusCode
:
any
)
:
void
;
onLocationChange
(
browser
:
any
webProgress
:
any
request
:
any
locationURI
:
any
flags
:
any
)
:
void
;
}
declare
class
WindowTrackerBase
{
private
_handleWindowOpened
;
_openListeners
:
Set
<
any
>
;
_closeListeners
:
Set
<
any
>
;
_listeners
:
any
;
_statusListeners
:
any
;
_windowIds
:
any
;
isBrowserWindow
(
window
:
any
)
:
boolean
;
browserWindows
(
includeIncomplete
?
:
boolean
)
:
Iterator
<
DOMWindow
>
;
readonly
get
topWindow
(
)
:
any
;
readonly
get
topNonPBWindow
(
)
:
any
;
getTopWindow
(
context
:
BaseContext
)
:
DOMWindow
|
null
;
getId
(
window
:
DOMWindow
)
:
integer
;
getCurrentWindow
(
context
:
BaseContext
)
:
DOMWindow
|
null
;
getWindow
(
id
:
integer
context
:
BaseContext
strict
?
:
boolean
)
:
DOMWindow
|
undefined
;
private
get
_haveListeners
(
)
;
addOpenListener
(
listener
:
(
arg0
:
DOMWindow
)
=
>
void
)
:
void
;
removeOpenListener
(
listener
:
(
arg0
:
DOMWindow
)
=
>
void
)
:
void
;
addCloseListener
(
listener
:
(
arg0
:
DOMWindow
)
=
>
void
)
:
void
;
removeCloseListener
(
listener
:
(
arg0
:
DOMWindow
)
=
>
void
)
:
void
;
private
handleEvent
;
private
observe
;
addListener
(
type
:
string
listener
:
Function
|
object
)
:
undefined
;
removeListener
(
type
:
string
listener
:
Function
|
object
)
:
undefined
;
private
_addWindowListener
;
addProgressListener
(
window
:
DOMWindow
listener
:
object
)
:
void
;
removeProgressListener
(
window
:
DOMWindow
listener
:
object
)
:
void
;
}
declare
class
TabManagerBase
{
constructor
(
extension
:
any
)
;
extension
:
any
;
_tabs
:
any
;
addActiveTabPermission
(
nativeTab
:
NativeTab
)
:
void
;
revokeActiveTabPermission
(
nativeTab
:
NativeTab
)
:
void
;
hasActiveTabPermission
(
nativeTab
:
NativeTab
)
:
boolean
;
activateScripts
(
nativeTab
:
NativeTab
)
:
void
;
hasTabPermission
(
nativeTab
:
NativeTab
)
:
boolean
;
getWrapper
(
nativeTab
:
NativeTab
)
:
TabBase
|
undefined
;
protected
canAccessTab
(
nativeTab
:
NativeTab
)
:
boolean
;
convert
(
nativeTab
:
NativeTab
fallbackTabSize
?
:
object
)
:
object
;
query
(
queryInfo
?
:
object
|
null
context
?
:
BaseContext
|
null
)
:
Iterator
<
TabBase
>
;
get
(
tabId
:
integer
)
:
TabBase
;
protected
wrapTab
(
nativeTab
:
NativeTab
)
:
TabBase
;
}
declare
class
WindowManagerBase
{
constructor
(
extension
:
any
)
;
extension
:
any
;
_windows
:
any
;
convert
(
window
:
DOMWindow
.
.
.
args
:
any
)
:
object
;
getWrapper
(
window
:
DOMWindow
)
:
WindowBase
|
undefined
;
canAccessWindow
(
window
:
DOMWindow
context
:
BaseContext
|
null
)
:
boolean
;
query
(
queryInfo
?
:
object
|
null
context
?
:
BaseContext
|
null
)
:
Iterator
<
WindowBase
>
;
get
(
windowId
:
integer
context
:
BaseContext
)
:
WindowBase
;
getAll
(
)
:
Iterator
<
WindowBase
>
;
protected
wrapWindow
(
window
:
DOMWindow
)
:
WindowBase
;
}
type
NativeTab
=
object
|
XULElement
;
type
MutedInfo
=
{
muted
:
boolean
;
reason
?
:
string
;
extensionId
?
:
string
;
}
;
type
TabAttachedEvent
=
{
tab
:
NativeTab
;
tabId
:
integer
;
newWindowId
:
integer
;
newPosition
:
integer
;
}
;
type
TabDetachedEvent
=
{
tab
:
NativeTab
;
adoptedBy
:
NativeTab
;
tabId
:
integer
;
oldWindowId
:
integer
;
oldPosition
:
integer
;
}
;
type
TabCreatedEvent
=
{
tab
:
NativeTab
;
}
;
type
TabRemovedEvent
=
{
tab
:
NativeTab
;
tabId
:
integer
;
windowId
:
integer
;
isWindowClosing
:
boolean
;
}
;
type
BrowserData
=
{
tabId
:
integer
;
windowId
:
integer
;
}
;
}
declare
global
{
type
TabTrackerBase
=
tabs_base
.
TabTrackerBase
;
type
TabManagerBase
=
tabs_base
.
TabManagerBase
;
type
TabBase
=
tabs_base
.
TabBase
;
type
WindowTrackerBase
=
tabs_base
.
WindowTrackerBase
;
type
WindowManagerBase
=
tabs_base
.
WindowManagerBase
;
type
WindowBase
=
tabs_base
.
WindowBase
;
type
getUserContextIdForCookieStoreId
=
tabs_base
.
getUserContextIdForCookieStoreId
;
type
NativeTab
=
tabs_base
.
NativeTab
;
}
export
{
}
;
