"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
BrowserTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
BrowserTestUtils
.
jsm
"
)
;
const
EXPORTED_SYMBOLS
=
[
"
PromptTestUtils
"
]
;
let
PromptTestUtils
=
{
async
handleNextPrompt
(
parent
promptOptions
promptActions
)
{
let
dialog
=
await
this
.
waitForPrompt
(
parent
promptOptions
)
;
return
this
.
handlePrompt
(
dialog
promptActions
)
;
}
handlePrompt
(
dialog
{
checkboxState
=
null
buttonNumClick
=
0
loginInput
=
null
passwordInput
=
null
}
=
{
}
)
{
let
promptClosePromise
;
let
win
;
if
(
dialog
.
args
.
modalType
=
=
=
Services
.
prompt
.
MODAL_TYPE_WINDOW
)
{
win
=
dialog
.
ui
.
prompt
?
.
opener
;
if
(
!
win
)
{
promptClosePromise
=
BrowserTestUtils
.
windowClosed
(
dialog
.
ui
.
prompt
)
;
}
}
else
{
win
=
dialog
.
ui
.
prompt
.
win
;
}
if
(
win
)
{
promptClosePromise
=
BrowserTestUtils
.
waitForEvent
(
win
"
DOMModalDialogClosed
"
)
;
}
if
(
checkboxState
!
=
null
)
{
dialog
.
ui
.
checkbox
.
checked
=
checkboxState
;
}
if
(
loginInput
!
=
null
)
{
dialog
.
ui
.
loginTextbox
.
value
=
loginInput
;
}
if
(
passwordInput
!
=
null
)
{
dialog
.
ui
.
password1Textbox
.
value
=
passwordInput
;
}
let
button
=
dialog
.
ui
[
"
button
"
+
buttonNumClick
]
;
if
(
!
button
)
{
throw
new
Error
(
"
Could
not
find
button
with
index
"
+
buttonNumClick
)
;
}
button
.
click
(
)
;
return
promptClosePromise
;
}
waitForPrompt
(
parent
{
modalType
promptType
=
null
}
=
{
}
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
!
modalType
)
{
return
reject
(
new
Error
(
"
modalType
is
mandatory
"
)
)
;
}
let
parentWindow
;
let
parentBrowser
;
if
(
parent
)
{
if
(
Element
.
isInstance
(
parent
)
)
{
parentBrowser
=
parent
;
parentWindow
=
parentBrowser
.
ownerGlobal
;
}
else
if
(
parent
instanceof
Ci
.
nsIDOMChromeWindow
)
{
parentWindow
=
parent
;
parentBrowser
=
parentWindow
.
gBrowser
.
selectedBrowser
;
}
else
{
throw
new
Error
(
"
Invalid
parent
.
Expected
browser
or
dom
window
"
)
;
}
}
let
isTabPrompt
=
modalType
!
=
=
Services
.
prompt
.
MODAL_TYPE_WINDOW
;
let
topic
=
isTabPrompt
?
"
tabmodal
-
dialog
-
loaded
"
:
"
common
-
dialog
-
loaded
"
;
Services
.
obs
.
addObserver
(
function
observer
(
subject
)
{
let
dialog
;
if
(
isTabPrompt
)
{
let
browser
=
parentBrowser
|
|
subject
.
ownerGlobal
.
gBrowser
.
selectedBrowser
;
let
prompt
=
browser
.
tabModalPromptBox
.
getPrompt
(
subject
)
;
if
(
!
prompt
)
{
return
;
}
dialog
=
prompt
.
Dialog
;
}
else
{
if
(
parentWindow
&
&
subject
.
opener
!
=
=
parentWindow
)
{
return
;
}
dialog
=
subject
.
Dialog
;
}
if
(
isTabPrompt
&
&
dialog
.
args
.
modalType
!
=
=
modalType
)
{
return
;
}
if
(
promptType
&
&
dialog
.
args
.
promptType
!
=
=
promptType
)
{
return
;
}
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
dialog
)
;
}
topic
)
;
return
undefined
;
}
)
;
}
}
;
