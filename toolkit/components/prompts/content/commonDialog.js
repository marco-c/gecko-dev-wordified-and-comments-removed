const
{
CommonDialog
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
CommonDialog
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
propBag
args
Dialog
;
function
commonDialogOnLoad
(
)
{
propBag
=
window
.
arguments
[
0
]
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag2
)
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag
)
;
args
=
{
}
;
for
(
let
prop
of
propBag
.
enumerator
)
{
args
[
prop
.
name
]
=
prop
.
value
;
}
let
dialog
=
document
.
getElementById
(
"
commonDialog
"
)
;
let
needIconifiedHeader
=
args
.
modalType
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_CONTENT
|
|
[
"
promptUserAndPass
"
"
promptPassword
"
]
.
includes
(
args
.
promptType
)
|
|
args
.
headerIconURL
;
let
root
=
document
.
documentElement
;
if
(
needIconifiedHeader
)
{
root
.
setAttribute
(
"
neediconheader
"
"
true
"
)
;
}
let
title
=
{
raw
:
args
.
title
}
;
let
{
promptPrincipal
}
=
args
;
if
(
PromptUtils
.
protonModals
)
{
if
(
promptPrincipal
)
{
if
(
promptPrincipal
.
isNullPrincipal
)
{
title
=
{
l10nId
:
"
common
-
dialog
-
title
-
null
"
}
;
}
else
if
(
promptPrincipal
.
isSystemPrincipal
)
{
title
=
{
l10nId
:
"
common
-
dialog
-
title
-
system
"
}
;
root
.
style
.
setProperty
(
"
-
-
icon
-
url
"
"
url
(
'
chrome
:
/
/
branding
/
content
/
icon32
.
png
'
)
"
)
;
}
else
if
(
promptPrincipal
.
addonPolicy
)
{
title
.
raw
=
promptPrincipal
.
addonPolicy
.
name
;
}
else
if
(
promptPrincipal
.
isContentPrincipal
)
{
try
{
title
.
raw
=
promptPrincipal
.
URI
.
displayHostPort
;
}
catch
(
ex
)
{
title
.
raw
=
promptPrincipal
.
origin
;
}
if
(
!
title
.
raw
)
{
title
.
raw
=
promptPrincipal
.
prepath
;
}
}
else
{
title
=
{
l10nId
:
"
common
-
dialog
-
title
-
unknown
"
}
;
}
}
else
if
(
args
.
authOrigin
)
{
title
=
{
raw
:
args
.
authOrigin
}
;
}
if
(
args
.
headerIconURL
)
{
root
.
style
.
setProperty
(
"
-
-
icon
-
url
"
url
(
'
{
args
.
headerIconURL
}
'
)
)
;
}
dialog
.
setAttribute
(
"
buttonpack
"
"
end
"
)
;
}
title
.
shouldUseMaskFade
=
title
.
raw
&
&
(
args
.
authOrigin
|
|
promptPrincipal
)
;
root
.
setAttribute
(
"
headertitle
"
JSON
.
stringify
(
title
)
)
;
if
(
args
.
isInsecureAuth
)
{
dialog
.
setAttribute
(
"
insecureauth
"
"
true
"
)
;
}
let
ui
=
{
prompt
:
window
loginContainer
:
document
.
getElementById
(
"
loginContainer
"
)
loginTextbox
:
document
.
getElementById
(
"
loginTextbox
"
)
loginLabel
:
document
.
getElementById
(
"
loginLabel
"
)
password1Container
:
document
.
getElementById
(
"
password1Container
"
)
password1Textbox
:
document
.
getElementById
(
"
password1Textbox
"
)
password1Label
:
document
.
getElementById
(
"
password1Label
"
)
infoRow
:
document
.
getElementById
(
"
infoRow
"
)
infoBody
:
document
.
getElementById
(
"
infoBody
"
)
infoTitle
:
document
.
getElementById
(
"
infoTitle
"
)
infoIcon
:
document
.
getElementById
(
"
infoIcon
"
)
checkbox
:
document
.
getElementById
(
"
checkbox
"
)
checkboxContainer
:
document
.
getElementById
(
"
checkboxContainer
"
)
button3
:
dialog
.
getButton
(
"
extra2
"
)
button2
:
dialog
.
getButton
(
"
extra1
"
)
button1
:
dialog
.
getButton
(
"
cancel
"
)
button0
:
dialog
.
getButton
(
"
accept
"
)
focusTarget
:
window
}
;
Dialog
=
new
CommonDialog
(
args
ui
)
;
window
.
addEventListener
(
"
dialogclosing
"
function
(
aEvent
)
{
if
(
aEvent
.
detail
?
.
abort
)
{
Dialog
.
abortPrompt
(
)
;
}
}
)
;
document
.
addEventListener
(
"
dialogaccept
"
function
(
)
{
Dialog
.
onButton0
(
)
;
}
)
;
document
.
addEventListener
(
"
dialogcancel
"
function
(
)
{
Dialog
.
onButton1
(
)
;
}
)
;
document
.
addEventListener
(
"
dialogextra1
"
function
(
)
{
Dialog
.
onButton2
(
)
;
window
.
close
(
)
;
}
)
;
document
.
addEventListener
(
"
dialogextra2
"
function
(
)
{
Dialog
.
onButton3
(
)
;
window
.
close
(
)
;
}
)
;
document
.
subDialogSetDefaultFocus
=
isInitialFocus
=
>
Dialog
.
setDefaultFocus
(
isInitialFocus
)
;
Dialog
.
onLoad
(
dialog
)
;
window
.
sizeToContent
(
)
;
ui
.
infoIcon
.
addEventListener
(
"
load
"
(
)
=
>
window
.
sizeToContent
(
)
)
;
window
.
getAttention
(
)
;
}
function
commonDialogOnUnload
(
)
{
for
(
let
propName
in
args
)
{
propBag
.
setProperty
(
propName
args
[
propName
]
)
;
}
}
