var
propBag
listBox
args
;
function
dialogOnLoad
(
)
{
propBag
=
window
.
arguments
[
0
]
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag2
)
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag
)
;
let
args
=
{
}
;
for
(
let
prop
of
propBag
.
enumerator
)
{
args
[
prop
.
name
]
=
prop
.
value
;
}
let
promptType
=
propBag
.
getProperty
(
"
promptType
"
)
;
if
(
promptType
!
=
"
select
"
)
{
Cu
.
reportError
(
"
selectDialog
opened
for
unknown
type
:
"
+
promptType
)
;
window
.
close
(
)
;
}
propBag
.
setProperty
(
"
ok
"
false
)
;
document
.
title
=
propBag
.
getProperty
(
"
title
"
)
;
let
text
=
propBag
.
getProperty
(
"
text
"
)
;
document
.
getElementById
(
"
info
.
txt
"
)
.
setAttribute
(
"
value
"
text
)
;
let
items
=
propBag
.
getProperty
(
"
list
"
)
;
listBox
=
document
.
getElementById
(
"
list
"
)
;
for
(
let
i
=
0
;
i
<
items
.
length
;
i
+
+
)
{
let
str
=
items
[
i
]
;
if
(
str
=
=
"
"
)
{
str
=
"
<
>
"
;
}
listBox
.
appendItem
(
str
)
;
listBox
.
getItemAtIndex
(
i
)
.
addEventListener
(
"
dblclick
"
dialogDoubleClick
)
;
}
listBox
.
selectedIndex
=
0
;
listBox
.
focus
(
)
;
document
.
addEventListener
(
"
dialogaccept
"
dialogOK
)
;
window
.
sizeToContent
(
)
;
moveToAlertPosition
(
)
;
centerWindowOnScreen
(
)
;
try
{
if
(
!
args
.
openedWithTabDialog
)
{
Cc
[
"
mozilla
.
org
/
sound
;
1
"
]
.
createInstance
(
Ci
.
nsISound
)
.
playEventSound
(
Ci
.
nsISound
.
EVENT_SELECT_DIALOG_OPEN
)
;
}
}
catch
(
e
)
{
}
}
function
dialogOK
(
)
{
propBag
.
setProperty
(
"
selected
"
listBox
.
selectedIndex
)
;
propBag
.
setProperty
(
"
ok
"
true
)
;
}
function
dialogDoubleClick
(
)
{
dialogOK
(
)
;
window
.
close
(
)
;
}
