"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
KeyValueParser
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
function
processExtraFile
(
id
)
{
let
crDir
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
userApplicationDataDir
"
Crash
Reports
"
)
;
let
pendingDumpsDir
=
OS
.
Path
.
join
(
crDir
"
pending
"
)
;
let
extraPath
=
OS
.
Path
.
join
(
pendingDumpsDir
id
+
"
.
extra
"
)
;
return
Task
.
spawn
(
function
*
(
)
{
try
{
let
decoder
=
new
TextDecoder
(
)
;
let
extraFile
=
yield
OS
.
File
.
read
(
extraPath
)
;
let
extraData
=
decoder
.
decode
(
extraFile
)
;
return
parseKeyValuePairs
(
extraData
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
{
}
;
}
)
;
}
this
.
CrashService
=
function
(
)
{
}
;
CrashService
.
prototype
=
Object
.
freeze
(
{
classID
:
Components
.
ID
(
"
{
92668367
-
1b17
-
4190
-
86b2
-
1061b2179744
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsICrashService
Ci
.
nsIObserver
]
)
addCrash
:
function
(
processType
crashType
id
)
{
switch
(
processType
)
{
case
Ci
.
nsICrashService
.
PROCESS_TYPE_MAIN
:
processType
=
Services
.
crashmanager
.
PROCESS_TYPE_MAIN
;
break
;
case
Ci
.
nsICrashService
.
PROCESS_TYPE_CONTENT
:
processType
=
Services
.
crashmanager
.
PROCESS_TYPE_CONTENT
;
break
;
case
Ci
.
nsICrashService
.
PROCESS_TYPE_PLUGIN
:
processType
=
Services
.
crashmanager
.
PROCESS_TYPE_PLUGIN
;
break
;
case
Ci
.
nsICrashService
.
PROCESS_TYPE_GMPLUGIN
:
processType
=
Services
.
crashmanager
.
PROCESS_TYPE_GMPLUGIN
;
break
;
case
Ci
.
nsICrashService
.
PROCESS_TYPE_GPU
:
processType
=
Services
.
crashmanager
.
PROCESS_TYPE_GPU
;
break
;
default
:
throw
new
Error
(
"
Unrecognized
PROCESS_TYPE
:
"
+
processType
)
;
}
switch
(
crashType
)
{
case
Ci
.
nsICrashService
.
CRASH_TYPE_CRASH
:
crashType
=
Services
.
crashmanager
.
CRASH_TYPE_CRASH
;
break
;
case
Ci
.
nsICrashService
.
CRASH_TYPE_HANG
:
crashType
=
Services
.
crashmanager
.
CRASH_TYPE_HANG
;
break
;
default
:
throw
new
Error
(
"
Unrecognized
CRASH_TYPE
:
"
+
crashType
)
;
}
AsyncShutdown
.
profileBeforeChange
.
addBlocker
(
"
CrashService
waiting
for
content
crash
ping
to
be
sent
"
processExtraFile
(
id
)
.
then
(
metadata
=
>
{
return
Services
.
crashmanager
.
addCrash
(
processType
crashType
id
new
Date
(
)
metadata
)
}
)
)
;
}
observe
:
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
profile
-
after
-
change
"
:
Services
.
crashmanager
;
break
;
}
}
}
)
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
CrashService
]
)
;
