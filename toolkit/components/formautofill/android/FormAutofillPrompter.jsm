"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FormAutofillPrompter
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
GeckoViewPrompter
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewPrompter
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
CreditCard
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutocomplete
.
jsm
"
GeckoViewAutocomplete
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutocomplete
.
jsm
"
}
)
;
const
CreditCardStorageHint
=
{
NONE
:
0
GENERATED
:
1
<
<
0
LOW_CONFIDENCE
:
1
<
<
1
}
;
let
FormAutofillPrompter
=
{
_createMessage
(
creditCards
)
{
let
hint
=
CreditCardStorageHint
.
NONE
;
return
{
type
:
"
Autocomplete
:
Save
:
CreditCard
"
hint
creditCards
}
;
}
async
promptToSaveAddress
(
browser
type
description
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
promptToSaveCreditCard
(
browser
storage
record
flowId
)
{
const
prompt
=
new
lazy
.
GeckoViewPrompter
(
browser
.
ownerGlobal
)
;
const
duplicateRecord
=
(
await
storage
.
getDuplicateRecords
(
record
)
.
next
(
)
)
.
value
;
let
newCreditCard
;
if
(
duplicateRecord
)
{
newCreditCard
=
{
.
.
.
duplicateRecord
.
.
.
record
}
;
}
else
{
newCreditCard
=
record
;
}
prompt
.
asyncShowPrompt
(
this
.
_createMessage
(
[
lazy
.
CreditCard
.
fromGecko
(
newCreditCard
)
]
)
result
=
>
{
const
selectedCreditCard
=
result
?
.
selection
?
.
value
;
if
(
!
selectedCreditCard
)
{
return
;
}
lazy
.
GeckoViewAutocomplete
.
onCreditCardSave
(
selectedCreditCard
)
;
}
)
;
}
}
;
