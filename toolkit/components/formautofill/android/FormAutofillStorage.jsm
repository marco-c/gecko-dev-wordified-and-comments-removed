"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
formAutofillStorage
"
"
FormAutofillStorage
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
FormAutofillStorageBase
CreditCardsBase
AddressesBase
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
autofill
/
FormAutofillStorageBase
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
GeckoViewAutocomplete
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutocomplete
.
jsm
"
CreditCard
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutocomplete
.
jsm
"
Address
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutocomplete
.
jsm
"
JSONFile
:
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
}
)
;
class
GeckoViewStorage
extends
JSONFile
{
constructor
(
)
{
super
(
{
path
:
null
}
)
;
}
async
updateCreditCards
(
)
{
const
creditCards
=
await
GeckoViewAutocomplete
.
fetchCreditCards
(
)
.
then
(
results
=
>
results
?
.
map
(
r
=
>
CreditCard
.
parse
(
r
)
.
toGecko
(
)
)
?
?
[
]
_
=
>
[
]
)
;
super
.
data
.
creditCards
=
creditCards
;
}
async
updateAddresses
(
)
{
const
addresses
=
await
GeckoViewAutocomplete
.
fetchAddresses
(
)
.
then
(
results
=
>
results
?
.
map
(
r
=
>
Address
.
parse
(
r
)
.
toGecko
(
)
)
?
?
[
]
_
=
>
[
]
)
;
super
.
data
.
addresses
=
addresses
;
}
async
load
(
)
{
super
.
data
=
{
creditCards
:
{
}
addresses
:
{
}
}
;
await
this
.
updateCreditCards
(
)
;
await
this
.
updateAddresses
(
)
;
}
ensureDataReady
(
)
{
if
(
this
.
dataReady
)
{
return
;
}
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
_save
(
)
{
}
}
class
Addresses
extends
AddressesBase
{
_initialize
(
)
{
this
.
_initializePromise
=
Promise
.
resolve
(
)
;
}
async
_saveRecord
(
record
{
sourceSync
=
false
}
=
{
}
)
{
GeckoViewAutocomplete
.
onAddressSave
(
Address
.
fromGecko
(
record
)
)
;
}
async
get
(
guid
{
rawData
=
false
}
=
{
}
)
{
await
this
.
_store
.
updateAddresses
(
)
;
return
super
.
get
(
guid
{
rawData
}
)
;
}
async
getAll
(
{
rawData
=
false
includeDeleted
=
false
}
=
{
}
)
{
await
this
.
_store
.
updateAddresses
(
)
;
return
super
.
getAll
(
{
rawData
includeDeleted
}
)
;
}
async
getSavedFieldNames
(
)
{
await
this
.
_store
.
updateAddresses
(
)
;
return
super
.
getSavedFieldNames
(
)
;
}
async
reconcile
(
remoteRecord
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
findDuplicateGUID
(
remoteRecord
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
mergeToStorage
(
targetRecord
strict
=
false
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
class
CreditCards
extends
CreditCardsBase
{
async
_encryptNumber
(
creditCard
)
{
}
_initialize
(
)
{
this
.
_initializePromise
=
Promise
.
resolve
(
)
;
}
async
_saveRecord
(
record
{
sourceSync
=
false
}
=
{
}
)
{
GeckoViewAutocomplete
.
onCreditCardSave
(
CreditCard
.
fromGecko
(
record
)
)
;
}
async
get
(
guid
{
rawData
=
false
}
=
{
}
)
{
await
this
.
_store
.
updateCreditCards
(
)
;
return
super
.
get
(
guid
{
rawData
}
)
;
}
async
getAll
(
{
rawData
=
false
includeDeleted
=
false
}
=
{
}
)
{
await
this
.
_store
.
updateCreditCards
(
)
;
return
super
.
getAll
(
{
rawData
includeDeleted
}
)
;
}
async
getSavedFieldNames
(
)
{
await
this
.
_store
.
updateCreditCards
(
)
;
return
super
.
getSavedFieldNames
(
)
;
}
async
reconcile
(
remoteRecord
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
findDuplicateGUID
(
remoteRecord
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
async
mergeToStorage
(
targetRecord
strict
=
false
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
class
FormAutofillStorage
extends
FormAutofillStorageBase
{
constructor
(
)
{
super
(
null
)
;
}
getAddresses
(
)
{
if
(
!
this
.
_addresses
)
{
this
.
_store
.
ensureDataReady
(
)
;
this
.
_addresses
=
new
Addresses
(
this
.
_store
)
;
}
return
this
.
_addresses
;
}
getCreditCards
(
)
{
if
(
!
this
.
_creditCards
)
{
this
.
_store
.
ensureDataReady
(
)
;
this
.
_creditCards
=
new
CreditCards
(
this
.
_store
)
;
}
return
this
.
_creditCards
;
}
_initializeStore
(
)
{
return
new
GeckoViewStorage
(
)
;
}
}
this
.
formAutofillStorage
=
new
FormAutofillStorage
(
)
;
