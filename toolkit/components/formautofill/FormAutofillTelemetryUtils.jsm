"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
CreditCardTelemetry
"
]
;
const
{
FormAutofillUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
autofill
/
FormAutofillUtils
.
jsm
"
)
;
const
{
FIELD_STATES
}
=
FormAutofillUtils
;
const
CreditCardTelemetry
=
{
CC_FORM_V2_SUPPORTED_FIELDS
:
{
"
cc
-
name
"
:
"
cc_name
"
"
cc
-
number
"
:
"
cc_number
"
"
cc
-
type
"
:
"
cc_type
"
"
cc
-
exp
"
:
"
cc_exp
"
"
cc
-
exp
-
month
"
:
"
cc_exp_month
"
"
cc
-
exp
-
year
"
:
"
cc_exp_year
"
}
_ccFormV2InitExtra
(
value
)
{
let
extra
=
{
}
;
for
(
const
field
of
Object
.
values
(
this
.
CC_FORM_V2_SUPPORTED_FIELDS
)
)
{
extra
[
field
]
=
value
;
}
return
extra
;
}
_ccFormV2SetExtra
(
extra
key
value
)
{
extra
[
this
.
CC_FORM_V2_SUPPORTED_FIELDS
[
key
]
]
=
value
;
}
_recordCCFormEvent
(
method
flowId
ccFormExtra
ccFormV2Extra
)
{
Services
.
telemetry
.
recordEvent
(
"
creditcard
"
method
"
cc_form
"
flowId
ccFormExtra
)
;
Services
.
telemetry
.
recordEvent
(
"
creditcard
"
method
"
cc_form_v2
"
flowId
ccFormV2Extra
)
;
}
recordFormDetected
(
flowId
fieldDetails
)
{
let
ccFormV2Extra
=
this
.
_ccFormV2InitExtra
(
"
false
"
)
;
let
identified
=
new
Set
(
)
;
fieldDetails
.
forEach
(
detail
=
>
{
identified
.
add
(
detail
.
fieldName
)
;
if
(
detail
.
_reason
=
=
"
autocomplete
"
)
{
this
.
_ccFormV2SetExtra
(
ccFormV2Extra
detail
.
fieldName
"
true
"
)
;
}
else
{
let
confidence
=
detail
.
confidence
>
0
?
Math
.
floor
(
100
*
detail
.
confidence
)
/
100
:
0
;
this
.
_ccFormV2SetExtra
(
ccFormV2Extra
detail
.
fieldName
confidence
.
toString
(
)
)
;
}
}
)
;
let
ccFormExtra
=
{
cc_name_found
:
identified
.
has
(
"
cc
-
name
"
)
?
"
true
"
:
"
false
"
cc_number_found
:
identified
.
has
(
"
cc
-
number
"
)
?
"
true
"
:
"
false
"
cc_exp_found
:
identified
.
has
(
"
cc
-
exp
"
)
|
|
(
identified
.
has
(
"
cc
-
exp
-
month
"
)
&
&
identified
.
has
(
"
cc
-
exp
-
year
"
)
)
?
"
true
"
:
"
false
"
}
;
this
.
_recordCCFormEvent
(
"
detected
"
flowId
ccFormExtra
ccFormV2Extra
)
;
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
creditCards
.
detected_sections_count
"
1
)
;
}
recordPopupShown
(
flowId
fieldName
)
{
if
(
!
flowId
)
{
return
;
}
let
ccFormExtra
=
null
;
let
ccFormV2Extra
=
{
field_name
:
fieldName
}
;
this
.
_recordCCFormEvent
(
"
popup_shown
"
flowId
ccFormExtra
ccFormV2Extra
)
;
}
recordFormFilled
(
flowId
fieldDetails
profile
)
{
let
ccFormExtra
=
{
cc_name
:
"
unavailable
"
cc_number
:
"
unavailable
"
cc_exp
:
"
unavailable
"
}
;
let
ccFormV2Extra
=
this
.
_ccFormV2InitExtra
(
"
unavailable
"
)
;
for
(
let
fieldDetail
of
fieldDetails
)
{
let
element
=
fieldDetail
.
elementWeakRef
.
get
(
)
;
let
state
=
profile
[
fieldDetail
.
fieldName
]
?
"
filled
"
:
"
not_filled
"
;
if
(
fieldDetail
.
state
=
=
FIELD_STATES
.
NORMAL
&
&
(
HTMLSelectElement
.
isInstance
(
element
)
|
|
(
HTMLInputElement
.
isInstance
(
element
)
&
&
element
.
value
.
length
)
)
)
{
state
=
"
user_filled
"
;
}
this
.
_ccFormV2SetExtra
(
ccFormV2Extra
fieldDetail
.
fieldName
state
)
;
switch
(
fieldDetail
.
fieldName
)
{
case
"
cc
-
name
"
:
ccFormExtra
.
cc_name
=
state
;
break
;
case
"
cc
-
number
"
:
ccFormExtra
.
cc_number
=
state
;
break
;
case
"
cc
-
exp
"
:
case
"
cc
-
exp
-
month
"
:
case
"
cc
-
exp
-
year
"
:
ccFormExtra
.
cc_exp
=
state
;
break
;
}
}
this
.
_recordCCFormEvent
(
"
filled
"
flowId
ccFormExtra
ccFormV2Extra
)
;
}
recordFilledModified
(
flowId
fieldName
)
{
let
ccFormExtra
=
{
field_name
:
fieldName
}
;
let
ccFormV2Extra
=
{
field_name
:
fieldName
}
;
this
.
_recordCCFormEvent
(
"
filled_modified
"
flowId
ccFormExtra
ccFormV2Extra
)
;
}
recordFormSubmitted
(
records
elements
)
{
records
.
creditCard
.
forEach
(
record
=
>
{
let
ccFormExtra
=
{
fields_not_auto
:
"
0
"
fields_auto
:
"
0
"
fields_modified
:
"
0
"
}
;
let
ccFormV2Extra
=
this
.
_ccFormV2InitExtra
(
"
unavailable
"
)
;
if
(
record
.
guid
!
=
=
null
)
{
let
totalCount
=
elements
.
length
;
let
autofilledCount
=
Object
.
keys
(
record
.
record
)
.
length
;
let
unmodifiedCount
=
record
.
untouchedFields
.
length
;
for
(
let
fieldName
of
Object
.
keys
(
record
.
record
)
)
{
if
(
record
.
untouchedFields
?
.
includes
(
fieldName
)
)
{
this
.
_ccFormV2SetExtra
(
ccFormV2Extra
fieldName
"
autofilled
"
)
;
}
else
{
this
.
_ccFormV2SetExtra
(
ccFormV2Extra
fieldName
"
user
filled
"
)
;
}
}
ccFormExtra
.
fields_not_auto
=
(
totalCount
-
autofilledCount
)
.
toString
(
)
;
ccFormExtra
.
fields_auto
=
autofilledCount
.
toString
(
)
;
ccFormExtra
.
fields_modified
=
(
autofilledCount
-
unmodifiedCount
)
.
toString
(
)
;
}
else
{
ccFormExtra
.
fields_not_auto
=
Array
.
from
(
elements
)
.
filter
(
element
=
>
!
!
element
.
value
?
.
trim
(
)
.
length
)
.
length
.
toString
(
)
;
}
this
.
_recordCCFormEvent
(
"
submitted
"
record
.
flowId
ccFormExtra
ccFormV2Extra
)
;
}
)
;
if
(
records
.
creditCard
.
length
)
{
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
creditCards
.
submitted_sections_count
"
records
.
creditCard
.
length
)
;
}
}
recordFormCleared
(
flowId
fieldName
)
{
Services
.
telemetry
.
recordEvent
(
"
creditcard
"
"
cleared
"
"
cc_form_v2
"
flowId
{
field_name
:
fieldName
}
)
;
}
}
;
