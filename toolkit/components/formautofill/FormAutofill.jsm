"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FormAutofill
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
}
)
;
const
ADDRESSES_FIRST_TIME_USE_PREF
=
"
extensions
.
formautofill
.
firstTimeUse
"
;
const
AUTOFILL_ADDRESSES_AVAILABLE_PREF
=
"
extensions
.
formautofill
.
addresses
.
supported
"
;
const
AUTOFILL_CREDITCARDS_AVAILABLE_PREF
=
"
extensions
.
formautofill
.
creditCards
.
supported
"
;
const
BROWSER_SEARCH_REGION_PREF
=
"
browser
.
search
.
region
"
;
const
CREDITCARDS_USED_STATUS_PREF
=
"
extensions
.
formautofill
.
creditCards
.
used
"
;
const
CREDITCARDS_AUTOFILL_SUPPORTED_COUNTRIES_PREF
=
"
extensions
.
formautofill
.
creditCards
.
supportedCountries
"
;
const
ENABLED_AUTOFILL_ADDRESSES_PREF
=
"
extensions
.
formautofill
.
addresses
.
enabled
"
;
const
ENABLED_AUTOFILL_ADDRESSES_CAPTURE_PREF
=
"
extensions
.
formautofill
.
addresses
.
capture
.
enabled
"
;
const
ENABLED_AUTOFILL_ADDRESSES_SUPPORTED_COUNTRIES_PREF
=
"
extensions
.
formautofill
.
addresses
.
supportedCountries
"
;
const
ENABLED_AUTOFILL_CREDITCARDS_PREF
=
"
extensions
.
formautofill
.
creditCards
.
enabled
"
;
const
ENABLED_AUTOFILL_CREDITCARDS_REAUTH_PREF
=
"
extensions
.
formautofill
.
reauth
.
enabled
"
;
const
AUTOFILL_CREDITCARDS_HIDE_UI_PREF
=
"
extensions
.
formautofill
.
creditCards
.
hideui
"
;
const
FORM_AUTOFILL_SUPPORT_RTL_PREF
=
"
extensions
.
formautofill
.
supportRTL
"
;
const
AUTOFILL_CREDITCARDS_AUTOCOMPLETE_OFF_PREF
=
"
extensions
.
formautofill
.
creditCards
.
ignoreAutocompleteOff
"
;
const
AUTOFILL_ADDRESSES_AUTOCOMPLETE_OFF_PREF
=
"
extensions
.
formautofill
.
addresses
.
ignoreAutocompleteOff
"
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
logLevel
"
"
extensions
.
formautofill
.
loglevel
"
"
Warn
"
)
;
function
debug
(
)
{
if
(
lazy
.
logLevel
.
toLowerCase
(
)
=
=
"
debug
"
)
{
this
.
log
.
debug
(
.
.
.
arguments
)
;
}
}
var
FormAutofill
=
{
ENABLED_AUTOFILL_ADDRESSES_PREF
ENABLED_AUTOFILL_ADDRESSES_CAPTURE_PREF
ENABLED_AUTOFILL_CREDITCARDS_PREF
ENABLED_AUTOFILL_CREDITCARDS_REAUTH_PREF
ADDRESSES_FIRST_TIME_USE_PREF
CREDITCARDS_USED_STATUS_PREF
AUTOFILL_CREDITCARDS_AUTOCOMPLETE_OFF_PREF
AUTOFILL_ADDRESSES_AUTOCOMPLETE_OFF_PREF
get
DEFAULT_REGION
(
)
{
return
lazy
.
Region
.
home
|
|
"
US
"
;
}
_isSupportedRegion
(
available
supportedCountries
)
{
if
(
available
=
=
"
on
"
)
{
return
true
;
}
else
if
(
available
=
=
"
detect
"
)
{
if
(
!
FormAutofill
.
supportRTL
&
&
Services
.
locale
.
isAppLocaleRTL
)
{
return
false
;
}
let
region
=
Services
.
prefs
.
getCharPref
(
BROWSER_SEARCH_REGION_PREF
this
.
DEFAULT_REGION
)
;
return
supportedCountries
.
includes
(
region
)
;
}
return
false
;
}
isAutofillAddressesAvailableInCountry
(
country
)
{
return
FormAutofill
.
_addressAutofillSupportedCountries
.
includes
(
country
)
;
}
get
isAutofillEnabled
(
)
{
return
this
.
isAutofillAddressesEnabled
|
|
this
.
isAutofillCreditCardsEnabled
;
}
get
isAutofillCreditCardsAvailable
(
)
{
return
this
.
_isSupportedRegion
(
FormAutofill
.
_isAutofillCreditCardsAvailable
FormAutofill
.
_creditCardAutofillSupportedCountries
)
;
}
get
isAutofillAddressesAvailable
(
)
{
return
this
.
_isSupportedRegion
(
FormAutofill
.
_isAutofillAddressesAvailable
FormAutofill
.
_addressAutofillSupportedCountries
)
;
}
get
isAutofillCreditCardsEnabled
(
)
{
return
(
this
.
isAutofillCreditCardsAvailable
&
&
FormAutofill
.
_isAutofillCreditCardsEnabled
)
;
}
get
isAutofillAddressesEnabled
(
)
{
return
(
this
.
isAutofillAddressesAvailable
&
&
FormAutofill
.
_isAutofillAddressesEnabled
)
;
}
defineLogGetter
(
scope
logPrefix
)
{
scope
.
debug
=
debug
;
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
return
new
ConsoleAPI
(
{
maxLogLevelPref
:
"
extensions
.
formautofill
.
loglevel
"
prefix
:
logPrefix
}
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
_isAutofillAddressesAvailable
"
AUTOFILL_ADDRESSES_AVAILABLE_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
_isAutofillAddressesEnabled
"
ENABLED_AUTOFILL_ADDRESSES_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
isAutofillAddressesCaptureEnabled
"
ENABLED_AUTOFILL_ADDRESSES_CAPTURE_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
_isAutofillCreditCardsAvailable
"
AUTOFILL_CREDITCARDS_AVAILABLE_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
_isAutofillCreditCardsEnabled
"
ENABLED_AUTOFILL_CREDITCARDS_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
isAutofillCreditCardsHideUI
"
AUTOFILL_CREDITCARDS_HIDE_UI_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
isAutofillAddressesFirstTimeUse
"
ADDRESSES_FIRST_TIME_USE_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
AutofillCreditCardsUsedStatus
"
CREDITCARDS_USED_STATUS_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
_addressAutofillSupportedCountries
"
ENABLED_AUTOFILL_ADDRESSES_SUPPORTED_COUNTRIES_PREF
null
val
=
>
val
.
split
(
"
"
)
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
_creditCardAutofillSupportedCountries
"
CREDITCARDS_AUTOFILL_SUPPORTED_COUNTRIES_PREF
null
null
val
=
>
val
.
split
(
"
"
)
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
supportRTL
"
FORM_AUTOFILL_SUPPORT_RTL_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
creditCardsAutocompleteOff
"
AUTOFILL_CREDITCARDS_AUTOCOMPLETE_OFF_PREF
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
FormAutofill
"
addressesAutocompleteOff
"
AUTOFILL_ADDRESSES_AUTOCOMPLETE_OFF_PREF
)
;
XPCOMUtils
.
defineLazyGetter
(
FormAutofill
"
countries
"
(
)
=
>
{
let
availableRegionCodes
=
Services
.
intl
.
getAvailableLocaleDisplayNames
(
"
region
"
)
;
let
displayNames
=
Services
.
intl
.
getRegionDisplayNames
(
undefined
availableRegionCodes
)
;
let
result
=
new
Map
(
)
;
for
(
let
i
=
0
;
i
<
availableRegionCodes
.
length
;
i
+
+
)
{
result
.
set
(
availableRegionCodes
[
i
]
.
toUpperCase
(
)
displayNames
[
i
]
)
;
}
return
result
;
}
)
;
