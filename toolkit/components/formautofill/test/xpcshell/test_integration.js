"
use
strict
"
;
add_task_in_parent_process
(
function
test_initialize
(
)
{
FormAutofillTest
.
requestAutocompleteResponse
=
{
canceled
:
true
}
;
}
)
;
add_task
(
async
function
test_integration_override
(
)
{
let
overrideCalled
=
false
;
let
newIntegrationFn
=
base
=
>
(
{
async
createRequestAutocompleteUI
(
)
{
overrideCalled
=
true
;
return
await
base
.
createRequestAutocompleteUI
.
apply
(
this
arguments
)
;
}
}
)
;
FormAutofill
.
registerIntegration
(
newIntegrationFn
)
;
try
{
let
ui
=
await
FormAutofill
.
integration
.
createRequestAutocompleteUI
(
{
}
)
;
let
result
=
await
ui
.
show
(
)
;
Assert
.
ok
(
result
.
canceled
)
;
}
finally
{
FormAutofill
.
unregisterIntegration
(
newIntegrationFn
)
;
}
Assert
.
ok
(
overrideCalled
)
;
}
)
;
add_task
(
async
function
test_integration_override_error
(
)
{
let
overrideCalled
=
false
;
let
errorIntegrationFn
=
base
=
>
{
throw
"
Expected
error
.
"
}
;
let
newIntegrationFn
=
base
=
>
(
{
async
createRequestAutocompleteUI
(
)
{
overrideCalled
=
true
;
return
await
base
.
createRequestAutocompleteUI
.
apply
(
this
arguments
)
;
}
}
)
;
FormAutofill
.
registerIntegration
(
errorIntegrationFn
)
;
FormAutofill
.
registerIntegration
(
newIntegrationFn
)
;
try
{
let
ui
=
await
FormAutofill
.
integration
.
createRequestAutocompleteUI
(
{
}
)
;
let
result
=
await
ui
.
show
(
)
;
Assert
.
ok
(
result
.
canceled
)
;
}
finally
{
FormAutofill
.
unregisterIntegration
(
errorIntegrationFn
)
;
FormAutofill
.
unregisterIntegration
(
newIntegrationFn
)
;
}
Assert
.
ok
(
overrideCalled
)
;
}
)
;
add_task
(
terminationTaskFn
)
;
