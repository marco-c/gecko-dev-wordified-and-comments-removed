"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FormAutofillChild
"
]
;
var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
FormAutofill
"
"
resource
:
/
/
autofill
/
FormAutofill
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
FormAutofillContent
"
"
resource
:
/
/
autofill
/
FormAutofillContent
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
FormAutofillUtils
"
"
resource
:
/
/
autofill
/
FormAutofillUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
AutoCompleteChild
"
"
resource
:
/
/
gre
/
actors
/
AutoCompleteChild
.
jsm
"
)
;
class
FormAutofillChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_nextHandleElement
=
null
;
this
.
_alreadyDOMContentLoaded
=
false
;
this
.
_hasDOMContentLoadedHandler
=
false
;
this
.
_hasPendingTask
=
false
;
this
.
testListener
=
null
;
lazy
.
AutoCompleteChild
.
addPopupStateListener
(
this
)
;
}
didDestroy
(
)
{
lazy
.
AutoCompleteChild
.
removePopupStateListener
(
this
)
;
}
popupStateChanged
(
messageName
data
target
)
{
let
docShell
;
try
{
docShell
=
this
.
docShell
;
}
catch
(
ex
)
{
lazy
.
AutoCompleteChild
.
removePopupStateListener
(
this
)
;
return
;
}
if
(
!
lazy
.
FormAutofill
.
isAutofillEnabled
)
{
return
;
}
const
{
chromeEventHandler
}
=
docShell
;
switch
(
messageName
)
{
case
"
FormAutoComplete
:
PopupClosed
"
:
{
lazy
.
FormAutofillContent
.
onPopupClosed
(
data
.
selectedRowStyle
)
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
chromeEventHandler
.
removeEventListener
(
"
keydown
"
lazy
.
FormAutofillContent
.
_onKeyDown
true
)
;
}
)
;
break
;
}
case
"
FormAutoComplete
:
PopupOpened
"
:
{
lazy
.
FormAutofillContent
.
onPopupOpened
(
)
;
chromeEventHandler
.
addEventListener
(
"
keydown
"
lazy
.
FormAutofillContent
.
_onKeyDown
true
)
;
break
;
}
}
}
_doIdentifyAutofillFields
(
)
{
if
(
this
.
_hasPendingTask
)
{
return
;
}
this
.
_hasPendingTask
=
true
;
lazy
.
setTimeout
(
(
)
=
>
{
lazy
.
FormAutofillContent
.
identifyAutofillFields
(
this
.
_nextHandleElement
)
;
this
.
_hasPendingTask
=
false
;
this
.
_nextHandleElement
=
null
;
this
.
sendAsyncMessage
(
"
FormAutofill
:
FieldsIdentified
"
)
;
lazy
.
FormAutofillContent
.
updateActiveInput
(
)
;
}
)
;
}
shouldIgnoreFormAutofillEvent
(
event
)
{
let
nodePrincipal
=
event
.
target
.
nodePrincipal
;
return
(
nodePrincipal
.
isSystemPrincipal
|
|
nodePrincipal
.
isNullPrincipal
|
|
nodePrincipal
.
schemeIs
(
"
about
"
)
)
;
}
handleEvent
(
evt
)
{
if
(
!
evt
.
isTrusted
)
{
return
;
}
if
(
this
.
shouldIgnoreFormAutofillEvent
(
evt
)
)
{
return
;
}
switch
(
evt
.
type
)
{
case
"
focusin
"
:
{
if
(
lazy
.
FormAutofill
.
isAutofillEnabled
)
{
this
.
onFocusIn
(
evt
)
;
}
break
;
}
case
"
DOMFormBeforeSubmit
"
:
{
if
(
lazy
.
FormAutofill
.
isAutofillEnabled
)
{
this
.
onDOMFormBeforeSubmit
(
evt
)
;
}
break
;
}
default
:
{
throw
new
Error
(
"
Unexpected
event
type
"
)
;
}
}
}
onFocusIn
(
evt
)
{
lazy
.
FormAutofillContent
.
updateActiveInput
(
)
;
let
element
=
evt
.
target
;
if
(
!
lazy
.
FormAutofillUtils
.
isCreditCardOrAddressFieldType
(
element
)
)
{
return
;
}
this
.
_nextHandleElement
=
element
;
if
(
!
this
.
_alreadyDOMContentLoaded
)
{
let
doc
=
element
.
ownerDocument
;
if
(
doc
.
readyState
=
=
=
"
loading
"
)
{
if
(
!
this
.
_hasDOMContentLoadedHandler
)
{
this
.
_hasDOMContentLoadedHandler
=
true
;
doc
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
this
.
_doIdentifyAutofillFields
(
)
{
once
:
true
}
)
;
}
return
;
}
this
.
_alreadyDOMContentLoaded
=
true
;
}
this
.
_doIdentifyAutofillFields
(
)
;
}
onDOMFormBeforeSubmit
(
evt
)
{
let
formElement
=
evt
.
target
;
if
(
!
lazy
.
FormAutofill
.
isAutofillEnabled
)
{
return
;
}
lazy
.
FormAutofillContent
.
formSubmitted
(
formElement
)
;
}
receiveMessage
(
message
)
{
if
(
!
lazy
.
FormAutofill
.
isAutofillEnabled
)
{
return
;
}
const
doc
=
this
.
document
;
switch
(
message
.
name
)
{
case
"
FormAutofill
:
PreviewProfile
"
:
{
lazy
.
FormAutofillContent
.
previewProfile
(
doc
)
;
break
;
}
case
"
FormAutofill
:
ClearForm
"
:
{
lazy
.
FormAutofillContent
.
clearForm
(
)
;
break
;
}
case
"
FormAutofill
:
FillForm
"
:
{
lazy
.
FormAutofillContent
.
activeHandler
.
autofillFormFields
(
message
.
data
)
;
break
;
}
}
}
}
