#
ifndef
mozilla_a11y_uiaRawElmProvider_h__
#
define
mozilla_a11y_uiaRawElmProvider_h__
#
include
<
objbase
.
h
>
#
include
<
stdint
.
h
>
#
include
<
uiautomation
.
h
>
namespace
mozilla
{
namespace
a11y
{
class
Accessible
;
class
uiaRawElmProvider
:
public
IAccessibleEx
public
IRawElementProviderSimple
public
IRawElementProviderFragment
public
IInvokeProvider
public
IToggleProvider
public
IExpandCollapseProvider
{
public
:
static
void
RaiseUiaEventForGeckoEvent
(
Accessible
*
aAcc
uint32_t
aGeckoEvent
)
;
static
void
RaiseUiaEventForStateChange
(
Accessible
*
aAcc
uint64_t
aState
bool
aEnabled
)
;
STDMETHODIMP
QueryInterface
(
REFIID
aIid
void
*
*
aInterface
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetObjectForChild
(
long
aIdChild
__RPC__deref_out_opt
IAccessibleEx
*
*
aAccEx
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetIAccessiblePair
(
__RPC__deref_out_opt
IAccessible
*
*
aAcc
__RPC__out
long
*
aIdChild
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetRuntimeId
(
__RPC__deref_out_opt
SAFEARRAY
*
*
aRuntimeIds
)
;
virtual
HRESULT
STDMETHODCALLTYPE
ConvertReturnedElement
(
__RPC__in_opt
IRawElementProviderSimple
*
aRawElmProvider
__RPC__deref_out_opt
IAccessibleEx
*
*
aAccEx
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_ProviderOptions
(
__RPC__out
enum
ProviderOptions
*
aProviderOptions
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetPatternProvider
(
PATTERNID
aPatternId
__RPC__deref_out_opt
IUnknown
*
*
aPatternProvider
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetPropertyValue
(
PROPERTYID
aPropertyId
__RPC__out
VARIANT
*
aPropertyValue
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_HostRawElementProvider
(
__RPC__deref_out_opt
IRawElementProviderSimple
*
*
aRawElmProvider
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Navigate
(
enum
NavigateDirection
aDirection
__RPC__deref_out_opt
IRawElementProviderFragment
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_BoundingRectangle
(
__RPC__out
struct
UiaRect
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetEmbeddedFragmentRoots
(
__RPC__deref_out_opt
SAFEARRAY
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
SetFocus
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_FragmentRoot
(
__RPC__deref_out_opt
IRawElementProviderFragmentRoot
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Invoke
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Toggle
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_ToggleState
(
__RPC__out
enum
ToggleState
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Expand
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Collapse
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_ExpandCollapseState
(
__RPC__out
enum
ExpandCollapseState
*
aRetVal
)
;
private
:
Accessible
*
Acc
(
)
const
;
bool
IsControl
(
)
;
long
GetControlType
(
)
const
;
bool
HasTogglePattern
(
)
;
bool
HasExpandCollapsePattern
(
)
;
}
;
}
}
#
endif
