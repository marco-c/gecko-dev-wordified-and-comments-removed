#
ifndef
mozilla_a11y_UiaTextRange_h__
#
define
mozilla_a11y_UiaTextRange_h__
#
include
"
IUnknownImpl
.
h
"
#
include
"
MsaaAccessible
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsDirection
.
h
"
#
include
"
objbase
.
h
"
#
include
"
uiautomation
.
h
"
namespace
mozilla
:
:
a11y
{
class
TextLeafRange
;
class
TextLeafPoint
;
class
UiaTextRange
:
public
ITextRangeProvider
{
public
:
explicit
UiaTextRange
(
TextLeafRange
&
aRange
)
;
virtual
~
UiaTextRange
(
)
=
default
;
DECL_IUNKNOWN
virtual
HRESULT
STDMETHODCALLTYPE
Clone
(
__RPC__deref_out_opt
ITextRangeProvider
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Compare
(
__RPC__in_opt
ITextRangeProvider
*
aRange
__RPC__out
BOOL
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
CompareEndpoints
(
enum
TextPatternRangeEndpoint
aEndpoint
__RPC__in_opt
ITextRangeProvider
*
aTargetRange
enum
TextPatternRangeEndpoint
aTargetEndpoint
__RPC__out
int
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
ExpandToEnclosingUnit
(
enum
TextUnit
aUnit
)
;
virtual
HRESULT
STDMETHODCALLTYPE
FindAttribute
(
TEXTATTRIBUTEID
aAttributeId
VARIANT
aVal
BOOL
aBackward
__RPC__deref_out_opt
ITextRangeProvider
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
FindText
(
__RPC__in
BSTR
aText
BOOL
aBackward
BOOL
aIgnoreCase
__RPC__deref_out_opt
ITextRangeProvider
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetAttributeValue
(
TEXTATTRIBUTEID
aAttributeId
__RPC__out
VARIANT
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetBoundingRectangles
(
__RPC__deref_out_opt
SAFEARRAY
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetEnclosingElement
(
__RPC__deref_out_opt
IRawElementProviderSimple
*
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetText
(
int
aMaxLength
__RPC__deref_out_opt
BSTR
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Move
(
enum
TextUnit
aUnit
int
aCount
__RPC__out
int
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
MoveEndpointByUnit
(
enum
TextPatternRangeEndpoint
aEndpoint
enum
TextUnit
aUnit
int
aCount
__RPC__out
int
*
aRetVal
)
;
virtual
HRESULT
STDMETHODCALLTYPE
MoveEndpointByRange
(
enum
TextPatternRangeEndpoint
aEndpoint
__RPC__in_opt
ITextRangeProvider
*
aTargetRange
enum
TextPatternRangeEndpoint
aTargetEndpoint
)
;
virtual
HRESULT
STDMETHODCALLTYPE
Select
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
AddToSelection
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
RemoveFromSelection
(
void
)
;
virtual
HRESULT
STDMETHODCALLTYPE
ScrollIntoView
(
BOOL
aAlignToTop
)
;
virtual
HRESULT
STDMETHODCALLTYPE
GetChildren
(
__RPC__deref_out_opt
SAFEARRAY
*
*
aRetVal
)
;
private
:
void
SetRange
(
const
TextLeafRange
&
aRange
)
;
TextLeafRange
GetRange
(
)
const
;
static
TextLeafRange
GetRangeFrom
(
ITextRangeProvider
*
aProvider
)
;
static
TextLeafPoint
FindBoundary
(
const
TextLeafPoint
&
aOrigin
enum
TextUnit
aUnit
nsDirection
aDirection
bool
aIncludeOrigin
=
false
)
;
bool
MovePoint
(
TextLeafPoint
&
aPoint
enum
TextUnit
aUnit
const
int
aRequestedCount
int
&
aActualCount
)
;
void
SetEndpoint
(
enum
TextPatternRangeEndpoint
aEndpoint
const
TextLeafPoint
&
aDest
)
;
RefPtr
<
MsaaAccessible
>
mStartAcc
;
int32_t
mStartOffset
=
-
1
;
RefPtr
<
MsaaAccessible
>
mEndAcc
;
int32_t
mEndOffset
=
-
1
;
bool
mIsEndOfLineInsertionPoint
=
false
;
}
;
}
#
endif
