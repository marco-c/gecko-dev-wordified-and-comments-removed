#
ifndef
mozilla_a11y_LazyInstantiator_h
#
define
mozilla_a11y_LazyInstantiator_h
#
include
"
IUnknownImpl
.
h
"
#
include
"
mozilla
/
mscom
/
Ptr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
<
oleacc
.
h
>
class
nsIFile
;
namespace
mozilla
{
namespace
a11y
{
class
RootAccessibleWrap
;
class
LazyInstantiator
final
:
public
IAccessible
public
IServiceProvider
{
public
:
[
[
nodiscard
]
]
static
already_AddRefed
<
IAccessible
>
GetRootAccessible
(
HWND
aHwnd
)
;
static
void
EnableBlindAggregation
(
HWND
aHwnd
)
;
STDMETHODIMP
QueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
GetTypeInfoCount
(
UINT
*
pctinfo
)
override
;
STDMETHODIMP
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
ITypeInfo
*
*
ppTInfo
)
override
;
STDMETHODIMP
GetIDsOfNames
(
REFIID
riid
LPOLESTR
*
rgszNames
UINT
cNames
LCID
lcid
DISPID
*
rgDispId
)
override
;
STDMETHODIMP
Invoke
(
DISPID
dispIdMember
REFIID
riid
LCID
lcid
WORD
wFlags
DISPPARAMS
*
pDispParams
VARIANT
*
pVarResult
EXCEPINFO
*
pExcepInfo
UINT
*
puArgErr
)
override
;
STDMETHODIMP
get_accParent
(
IDispatch
*
*
ppdispParent
)
override
;
STDMETHODIMP
get_accChildCount
(
long
*
pcountChildren
)
override
;
STDMETHODIMP
get_accChild
(
VARIANT
varChild
IDispatch
*
*
ppdispChild
)
override
;
STDMETHODIMP
get_accName
(
VARIANT
varChild
BSTR
*
pszName
)
override
;
STDMETHODIMP
get_accValue
(
VARIANT
varChild
BSTR
*
pszValue
)
override
;
STDMETHODIMP
get_accDescription
(
VARIANT
varChild
BSTR
*
pszDescription
)
override
;
STDMETHODIMP
get_accRole
(
VARIANT
varChild
VARIANT
*
pvarRole
)
override
;
STDMETHODIMP
get_accState
(
VARIANT
varChild
VARIANT
*
pvarState
)
override
;
STDMETHODIMP
get_accHelp
(
VARIANT
varChild
BSTR
*
pszHelp
)
override
;
STDMETHODIMP
get_accHelpTopic
(
BSTR
*
pszHelpFile
VARIANT
varChild
long
*
pidTopic
)
override
;
STDMETHODIMP
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
*
pszKeyboardShortcut
)
override
;
STDMETHODIMP
get_accFocus
(
VARIANT
*
pvarChild
)
override
;
STDMETHODIMP
get_accSelection
(
VARIANT
*
pvarChildren
)
override
;
STDMETHODIMP
get_accDefaultAction
(
VARIANT
varChild
BSTR
*
pszDefaultAction
)
override
;
STDMETHODIMP
accSelect
(
long
flagsSelect
VARIANT
varChild
)
override
;
STDMETHODIMP
accLocation
(
long
*
pxLeft
long
*
pyTop
long
*
pcxWidth
long
*
pcyHeight
VARIANT
varChild
)
override
;
STDMETHODIMP
accNavigate
(
long
navDir
VARIANT
varStart
VARIANT
*
pvarEndUpAt
)
override
;
STDMETHODIMP
accHitTest
(
long
xLeft
long
yTop
VARIANT
*
pvarChild
)
override
;
STDMETHODIMP
accDoDefaultAction
(
VARIANT
varChild
)
override
;
STDMETHODIMP
put_accName
(
VARIANT
varChild
BSTR
szName
)
override
;
STDMETHODIMP
put_accValue
(
VARIANT
varChild
BSTR
szValue
)
override
;
STDMETHODIMP
QueryService
(
REFGUID
aServiceId
REFIID
aServiceIid
void
*
*
aOutInterface
)
override
;
private
:
explicit
LazyInstantiator
(
HWND
aHwnd
)
;
~
LazyInstantiator
(
)
;
bool
IsBlockedInjection
(
)
;
bool
ShouldInstantiate
(
const
DWORD
aClientTid
)
;
DWORD
GetClientPid
(
const
DWORD
aClientTid
)
;
HRESULT
MaybeResolveRoot
(
)
;
HRESULT
ResolveDispatch
(
)
;
RootAccessibleWrap
*
ResolveRootAccWrap
(
)
;
void
TransplantRefCnt
(
)
;
void
ClearProp
(
)
;
private
:
mozilla
:
:
a11y
:
:
AutoRefCnt
mRefCnt
;
HWND
mHwnd
;
bool
mAllowBlindAggregation
;
RefPtr
<
IUnknown
>
mRealRootUnk
;
RefPtr
<
IUnknown
>
mStdDispatch
;
RootAccessibleWrap
*
mWeakRootAccWrap
;
IAccessible
*
mWeakAccessible
;
IDispatch
*
mWeakDispatch
;
}
;
}
}
#
endif
