#
ifndef
mozilla_a11y_MsaaAccessible_h_
#
define
mozilla_a11y_MsaaAccessible_h_
#
include
"
ia2Accessible
.
h
"
#
include
"
ia2AccessibleComponent
.
h
"
#
include
"
ia2AccessibleHyperlink
.
h
"
#
include
"
ia2AccessibleValue
.
h
"
#
include
"
mozilla
/
a11y
/
MsaaIdGenerator
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
AccessibleWrap
;
class
LocalAccessible
;
class
sdnAccessible
;
class
MsaaAccessible
:
public
ia2Accessible
public
ia2AccessibleComponent
public
ia2AccessibleHyperlink
public
ia2AccessibleValue
{
public
:
MsaaAccessible
(
)
;
AccessibleWrap
*
LocalAcc
(
)
;
uint32_t
GetExistingID
(
)
const
{
return
mID
;
}
static
const
uint32_t
kNoID
=
0
;
void
SetID
(
uint32_t
aID
)
;
static
int32_t
GetChildIDFor
(
LocalAccessible
*
aAccessible
)
;
static
uint32_t
GetContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
;
static
void
ReleaseContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
;
static
void
AssignChildIDTo
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
;
static
void
ReleaseChildID
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
;
static
HWND
GetHWNDFor
(
LocalAccessible
*
aAccessible
)
;
static
void
FireWinEvent
(
LocalAccessible
*
aTarget
uint32_t
aEventType
)
;
[
[
nodiscard
]
]
already_AddRefed
<
IAccessible
>
GetIAccessibleFor
(
const
VARIANT
&
aVarChild
bool
*
aIsDefunct
)
;
void
AssociateCOMObjectForDisconnection
(
IUnknown
*
aObject
)
{
if
(
XRE_IsContentProcess
(
)
)
{
mAssociatedCOMObjectsForDisconnection
.
AppendElement
(
aObject
)
;
}
}
void
MsaaShutdown
(
)
;
static
IDispatch
*
NativeAccessible
(
LocalAccessible
*
aAccessible
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accParent
(
IDispatch
__RPC_FAR
*
__RPC_FAR
*
ppdispParent
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accChildCount
(
long
__RPC_FAR
*
pcountChildren
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accChild
(
VARIANT
varChild
IDispatch
__RPC_FAR
*
__RPC_FAR
*
ppdispChild
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accName
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszName
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accValue
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszValue
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accDescription
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszDescription
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accRole
(
VARIANT
varChild
VARIANT
__RPC_FAR
*
pvarRole
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accState
(
VARIANT
varChild
VARIANT
__RPC_FAR
*
pvarState
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accHelp
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszHelp
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accHelpTopic
(
BSTR
__RPC_FAR
*
pszHelpFile
VARIANT
varChild
long
__RPC_FAR
*
pidTopic
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszKeyboardShortcut
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accFocus
(
VARIANT
__RPC_FAR
*
pvarChild
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accSelection
(
VARIANT
__RPC_FAR
*
pvarChildren
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
get_accDefaultAction
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszDefaultAction
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
accSelect
(
long
flagsSelect
VARIANT
varChild
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
accLocation
(
long
__RPC_FAR
*
pxLeft
long
__RPC_FAR
*
pyTop
long
__RPC_FAR
*
pcxWidth
long
__RPC_FAR
*
pcyHeight
VARIANT
varChild
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
accNavigate
(
long
navDir
VARIANT
varStart
VARIANT
__RPC_FAR
*
pvarEndUpAt
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
accHitTest
(
long
xLeft
long
yTop
VARIANT
__RPC_FAR
*
pvarChild
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
accDoDefaultAction
(
VARIANT
varChild
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
put_accName
(
VARIANT
varChild
BSTR
szName
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
put_accValue
(
VARIANT
varChild
BSTR
szValue
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
GetTypeInfoCount
(
UINT
*
pctinfo
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
ITypeInfo
*
*
ppTInfo
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
GetIDsOfNames
(
REFIID
riid
LPOLESTR
*
rgszNames
UINT
cNames
LCID
lcid
DISPID
*
rgDispId
)
override
;
virtual
HRESULT
STDMETHODCALLTYPE
Invoke
(
DISPID
dispIdMember
REFIID
riid
LCID
lcid
WORD
wFlags
DISPPARAMS
*
pDispParams
VARIANT
*
pVarResult
EXCEPINFO
*
pExcepInfo
UINT
*
puArgErr
)
override
;
protected
:
virtual
~
MsaaAccessible
(
)
;
uint32_t
mID
;
static
MsaaIdGenerator
sIDGen
;
HRESULT
ResolveChild
(
const
VARIANT
&
aVarChild
IAccessible
*
*
aOutInterface
)
;
enum
navRelations
{
NAVRELATION_CONTROLLED_BY
=
0x1000
NAVRELATION_CONTROLLER_FOR
=
0x1001
NAVRELATION_LABEL_FOR
=
0x1002
NAVRELATION_LABELLED_BY
=
0x1003
NAVRELATION_MEMBER_OF
=
0x1004
NAVRELATION_NODE_CHILD_OF
=
0x1005
NAVRELATION_FLOWS_TO
=
0x1006
NAVRELATION_FLOWS_FROM
=
0x1007
NAVRELATION_SUBWINDOW_OF
=
0x1008
NAVRELATION_EMBEDS
=
0x1009
NAVRELATION_EMBEDDED_BY
=
0x100a
NAVRELATION_POPUP_FOR
=
0x100b
NAVRELATION_PARENT_WINDOW_OF
=
0x100c
NAVRELATION_DEFAULT_BUTTON
=
0x100d
NAVRELATION_DESCRIBED_BY
=
0x100e
NAVRELATION_DESCRIPTION_FOR
=
0x100f
NAVRELATION_NODE_PARENT_OF
=
0x1010
NAVRELATION_CONTAINING_DOCUMENT
=
0x1011
NAVRELATION_CONTAINING_TAB_PANE
=
0x1012
NAVRELATION_CONTAINING_WINDOW
=
0x1013
NAVRELATION_CONTAINING_APPLICATION
=
0x1014
NAVRELATION_DETAILS
=
0x1015
NAVRELATION_DETAILS_FOR
=
0x1016
NAVRELATION_ERROR
=
0x1017
NAVRELATION_ERROR_FOR
=
0x1018
}
;
private
:
[
[
nodiscard
]
]
already_AddRefed
<
IAccessible
>
GetRemoteIAccessibleFor
(
const
VARIANT
&
aVarChild
)
;
nsTArray
<
RefPtr
<
IUnknown
>
>
mAssociatedCOMObjectsForDisconnection
;
static
ITypeInfo
*
GetTI
(
LCID
lcid
)
;
static
ITypeInfo
*
gTypeInfo
;
}
;
}
}
#
ifdef
XP_WIN
#
undef
GetMessage
#
undef
CreateEvent
#
undef
GetClassName
#
undef
GetBinaryType
#
undef
RemoveDirectory
#
endif
#
endif
