#
include
"
Compatibility
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
NtUndoc
.
h
"
using
namespace
mozilla
;
namespace
mozilla
{
namespace
a11y
{
void
Compatibility
:
:
GetUiaClientPids
(
nsTArray
<
DWORD
>
&
aPids
)
{
if
(
!
:
:
GetModuleHandleW
(
L
"
uiautomationcore
.
dll
"
)
)
{
return
;
}
Telemetry
:
:
AutoTimer
<
Telemetry
:
:
A11Y_UIA_DETECTION_TIMING_MS
>
timer
;
NTSTATUS
ntStatus
;
UniquePtr
<
std
:
:
byte
[
]
>
handleInfoBuf
;
ULONG
handleInfoBufLen
=
sizeof
(
SYSTEM_HANDLE_INFORMATION_EX
)
+
1024
*
sizeof
(
SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX
)
;
while
(
true
)
{
handleInfoBuf
=
MakeUniqueFallible
<
std
:
:
byte
[
]
>
(
handleInfoBufLen
)
;
if
(
!
handleInfoBuf
)
{
return
;
}
ntStatus
=
:
:
NtQuerySystemInformation
(
(
SYSTEM_INFORMATION_CLASS
)
SystemExtendedHandleInformation
handleInfoBuf
.
get
(
)
handleInfoBufLen
&
handleInfoBufLen
)
;
if
(
ntStatus
=
=
STATUS_INFO_LENGTH_MISMATCH
)
{
continue
;
}
if
(
!
NT_SUCCESS
(
ntStatus
)
)
{
return
;
}
break
;
}
const
DWORD
ourPid
=
:
:
GetCurrentProcessId
(
)
;
auto
handleInfo
=
reinterpret_cast
<
SYSTEM_HANDLE_INFORMATION_EX
*
>
(
handleInfoBuf
.
get
(
)
)
;
for
(
ULONG
index
=
0
;
index
<
handleInfo
-
>
mHandleCount
;
+
+
index
)
{
SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX
&
curHandle
=
handleInfo
-
>
mHandles
[
index
]
;
if
(
curHandle
.
mPid
!
=
ourPid
)
{
continue
;
}
HANDLE
handle
=
reinterpret_cast
<
HANDLE
>
(
curHandle
.
mHandle
)
;
ULONG
objNameBufLen
;
ntStatus
=
:
:
NtQueryObject
(
handle
(
OBJECT_INFORMATION_CLASS
)
ObjectNameInformation
nullptr
0
&
objNameBufLen
)
;
if
(
ntStatus
!
=
STATUS_INFO_LENGTH_MISMATCH
)
{
continue
;
}
auto
objNameBuf
=
MakeUnique
<
std
:
:
byte
[
]
>
(
objNameBufLen
)
;
ntStatus
=
:
:
NtQueryObject
(
handle
(
OBJECT_INFORMATION_CLASS
)
ObjectNameInformation
objNameBuf
.
get
(
)
objNameBufLen
&
objNameBufLen
)
;
if
(
!
NT_SUCCESS
(
ntStatus
)
)
{
continue
;
}
auto
objNameInfo
=
reinterpret_cast
<
OBJECT_NAME_INFORMATION
*
>
(
objNameBuf
.
get
(
)
)
;
if
(
!
objNameInfo
-
>
Name
.
Length
)
{
continue
;
}
nsDependentString
objName
(
objNameInfo
-
>
Name
.
Buffer
objNameInfo
-
>
Name
.
Length
/
sizeof
(
wchar_t
)
)
;
if
(
StringBeginsWith
(
objName
u
"
\
\
Device
\
\
NamedPipe
\
\
UIA_PIPE_
"
_ns
)
)
{
ULONG
pid
=
0
;
:
:
GetNamedPipeServerProcessId
(
handle
&
pid
)
;
aPids
.
AppendElement
(
pid
)
;
}
}
}
}
}
