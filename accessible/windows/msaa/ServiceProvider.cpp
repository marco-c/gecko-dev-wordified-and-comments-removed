#
include
"
ServiceProvider
.
h
"
#
include
"
AccessibleApplication_i
.
c
"
#
include
"
ApplicationAccessibleWrap
.
h
"
#
include
"
DocAccessible
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
Relation
.
h
"
#
include
"
RootAccessible
.
h
"
#
include
"
uiaRawElmProvider
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleChild
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
ISimpleDOM
.
h
"
namespace
mozilla
{
namespace
a11y
{
IMPL_IUNKNOWN_QUERY_HEAD
(
ServiceProvider
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IServiceProvider
)
IMPL_IUNKNOWN_QUERY_TAIL_AGGREGATED
(
mMsaa
)
STDMETHODIMP
ServiceProvider
:
:
QueryService
(
REFGUID
aGuidService
REFIID
aIID
void
*
*
aInstancePtr
)
{
if
(
!
aInstancePtr
)
return
E_INVALIDARG
;
*
aInstancePtr
=
nullptr
;
Accessible
*
acc
=
mMsaa
-
>
Acc
(
)
;
if
(
!
acc
)
{
return
CO_E_OBJNOTCONNECTED
;
}
AccessibleWrap
*
localAcc
=
mMsaa
-
>
LocalAcc
(
)
;
if
(
aGuidService
=
=
IID_IAccessibleEx
&
&
Preferences
:
:
GetBool
(
"
accessibility
.
uia
.
enable
"
)
&
&
localAcc
)
{
uiaRawElmProvider
*
accEx
=
new
uiaRawElmProvider
(
localAcc
)
;
HRESULT
hr
=
accEx
-
>
QueryInterface
(
aIID
aInstancePtr
)
;
if
(
FAILED
(
hr
)
)
delete
accEx
;
return
hr
;
}
static
const
GUID
SID_IAccessibleContentDocument
=
{
0xa5d8e1f3
0x3571
0x4d8f
{
0x95
0x21
0x07
0xed
0x28
0xfb
0x07
0x2e
}
}
;
if
(
aGuidService
=
=
SID_IAccessibleContentDocument
&
&
localAcc
)
{
if
(
aIID
!
=
IID_IAccessible
)
return
E_NOINTERFACE
;
if
(
XRE_IsContentProcess
(
)
)
{
RootAccessible
*
root
=
localAcc
-
>
RootAccessible
(
)
;
if
(
root
)
{
DocAccessibleChild
*
ipcDoc
=
root
-
>
IPCDoc
(
)
;
if
(
ipcDoc
)
{
RefPtr
<
IAccessible
>
topDoc
=
ipcDoc
-
>
GetTopLevelDocIAccessible
(
)
;
if
(
topDoc
)
{
topDoc
.
forget
(
aInstancePtr
)
;
return
S_OK
;
}
}
}
}
Relation
rel
=
localAcc
-
>
RelationByType
(
RelationType
:
:
CONTAINING_TAB_PANE
)
;
AccessibleWrap
*
tabDoc
=
static_cast
<
AccessibleWrap
*
>
(
rel
.
LocalNext
(
)
)
;
if
(
!
tabDoc
)
return
E_NOINTERFACE
;
RefPtr
<
IAccessible
>
result
;
tabDoc
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
result
.
forget
(
aInstancePtr
)
;
return
S_OK
;
}
if
(
aGuidService
=
=
IID_IAccessibleApplication
|
|
aIID
=
=
IID_IAccessibleApplication
)
{
ApplicationAccessibleWrap
*
applicationAcc
=
static_cast
<
ApplicationAccessibleWrap
*
>
(
ApplicationAcc
(
)
)
;
if
(
!
applicationAcc
)
return
E_NOINTERFACE
;
RefPtr
<
IAccessible
>
appIa
;
applicationAcc
-
>
GetNativeInterface
(
getter_AddRefs
(
appIa
)
)
;
return
appIa
-
>
QueryInterface
(
aIID
aInstancePtr
)
;
}
static
const
GUID
IID_SimpleDOMDeprecated
=
{
0x0c539790
0x12e4
0x11cf
{
0xb6
0x61
0x00
0xaa
0x00
0x4c
0xd6
0xd8
}
}
;
if
(
aGuidService
=
=
IID_ISimpleDOMNode
|
|
aGuidService
=
=
IID_SimpleDOMDeprecated
|
|
aGuidService
=
=
IID_IAccessible
|
|
aGuidService
=
=
IID_IAccessible2
)
return
mMsaa
-
>
QueryInterface
(
aIID
aInstancePtr
)
;
return
E_INVALIDARG
;
}
}
}
