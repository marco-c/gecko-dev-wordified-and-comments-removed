#
include
"
AccessibleWrap
.
h
"
#
include
"
Accessible
-
inl
.
h
"
#
include
"
Compatibility
.
h
"
#
include
"
DocAccessible
-
inl
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
EnumVariant
.
h
"
#
include
"
GeckoCustom
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
nsIAccessibleEvent
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
nsWinUtils
.
h
"
#
include
"
mozilla
/
a11y
/
ProxyAccessible
.
h
"
#
include
"
ProxyWrappers
.
h
"
#
include
"
ServiceProvider
.
h
"
#
include
"
Relation
.
h
"
#
include
"
Role
.
h
"
#
include
"
RootAccessible
.
h
"
#
include
"
sdnAccessible
.
h
"
#
include
"
States
.
h
"
#
ifdef
A11Y_LOG
#
include
"
Logging
.
h
"
#
endif
#
include
"
nsIMutableArray
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
mozilla
/
dom
/
NodeInfo
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsTextFormatter
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsEventMap
.
h
"
#
include
"
nsArrayUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
ReverseIterator
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
mozilla
/
mscom
/
AsyncInvoker
.
h
"
#
include
"
oleacc
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
const
uint32_t
USE_ROLE_STRING
=
0
;
#
ifdef
DEBUG_LEAKS
static
gAccessibles
=
0
;
#
endif
MsaaIdGenerator
AccessibleWrap
:
:
sIDGen
;
StaticAutoPtr
<
nsTArray
<
AccessibleWrap
:
:
HandlerControllerData
>
>
AccessibleWrap
:
:
sHandlerControllers
;
static
const
VARIANT
kVarChildIdSelf
=
{
VT_I4
}
;
static
const
int32_t
kIEnumVariantDisconnected
=
-
1
;
AccessibleWrap
:
:
AccessibleWrap
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
Accessible
(
aContent
aDoc
)
mID
(
kNoID
)
{
}
AccessibleWrap
:
:
~
AccessibleWrap
(
)
{
if
(
mID
!
=
kNoID
)
{
sIDGen
.
ReleaseID
(
WrapNotNull
(
this
)
)
;
}
}
ITypeInfo
*
AccessibleWrap
:
:
gTypeInfo
=
nullptr
;
NS_IMPL_ISUPPORTS_INHERITED0
(
AccessibleWrap
Accessible
)
void
AccessibleWrap
:
:
Shutdown
(
)
{
if
(
mID
!
=
kNoID
)
{
auto
doc
=
static_cast
<
DocAccessibleWrap
*
>
(
mDoc
.
get
(
)
)
;
MOZ_ASSERT
(
doc
)
;
if
(
doc
)
{
doc
-
>
RemoveID
(
mID
)
;
mID
=
kNoID
;
}
}
Accessible
:
:
Shutdown
(
)
;
}
STDMETHODIMP
AccessibleWrap
:
:
QueryInterface
(
REFIID
iid
void
*
*
ppv
)
{
if
(
!
ppv
)
return
E_INVALIDARG
;
*
ppv
=
nullptr
;
if
(
IID_IClientSecurity
=
=
iid
)
{
return
E_NOINTERFACE
;
}
if
(
IID_IUnknown
=
=
iid
)
*
ppv
=
static_cast
<
IAccessible
*
>
(
this
)
;
else
if
(
IID_IDispatch
=
=
iid
|
|
IID_IAccessible
=
=
iid
)
*
ppv
=
static_cast
<
IAccessible
*
>
(
this
)
;
else
if
(
IID_IEnumVARIANT
=
=
iid
&
&
!
IsProxy
(
)
)
{
if
(
!
HasChildren
(
)
|
|
nsAccUtils
:
:
MustPrune
(
this
)
)
return
E_NOINTERFACE
;
*
ppv
=
static_cast
<
IEnumVARIANT
*
>
(
new
ChildrenEnumVariant
(
this
)
)
;
}
else
if
(
IID_IServiceProvider
=
=
iid
)
*
ppv
=
new
ServiceProvider
(
this
)
;
else
if
(
IID_ISimpleDOMNode
=
=
iid
&
&
!
IsProxy
(
)
)
{
if
(
IsDefunct
(
)
|
|
(
!
HasOwnContent
(
)
&
&
!
IsDoc
(
)
)
)
return
E_NOINTERFACE
;
*
ppv
=
static_cast
<
ISimpleDOMNode
*
>
(
new
sdnAccessible
(
WrapNotNull
(
this
)
)
)
;
}
if
(
nullptr
=
=
*
ppv
)
{
HRESULT
hr
=
ia2Accessible
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
nullptr
=
=
*
ppv
&
&
!
IsProxy
(
)
)
{
HRESULT
hr
=
ia2AccessibleComponent
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
nullptr
=
=
*
ppv
)
{
HRESULT
hr
=
ia2AccessibleHyperlink
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
nullptr
=
=
*
ppv
&
&
!
IsProxy
(
)
)
{
HRESULT
hr
=
ia2AccessibleValue
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
!
*
ppv
&
&
iid
=
=
IID_IGeckoCustom
)
{
RefPtr
<
GeckoCustom
>
gkCrap
=
new
GeckoCustom
(
this
)
;
gkCrap
.
forget
(
ppv
)
;
return
S_OK
;
}
if
(
nullptr
=
=
*
ppv
)
return
E_NOINTERFACE
;
(
reinterpret_cast
<
IUnknown
*
>
(
*
ppv
)
)
-
>
AddRef
(
)
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accParent
(
IDispatch
__RPC_FAR
*
__RPC_FAR
*
ppdispParent
)
{
if
(
!
ppdispParent
)
return
E_INVALIDARG
;
*
ppdispParent
=
nullptr
;
if
(
IsDefunct
(
)
)
return
CO_E_OBJNOTCONNECTED
;
DocAccessible
*
doc
=
AsDoc
(
)
;
if
(
doc
)
{
if
(
!
doc
-
>
ParentDocument
(
)
|
|
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
&
&
nsCoreUtils
:
:
IsTabDocument
(
doc
-
>
DocumentNode
(
)
)
)
)
{
HWND
hwnd
=
static_cast
<
HWND
>
(
doc
-
>
GetNativeWindow
(
)
)
;
if
(
hwnd
&
&
SUCCEEDED
(
:
:
AccessibleObjectFromWindow
(
hwnd
OBJID_WINDOW
IID_IAccessible
(
void
*
*
)
ppdispParent
)
)
)
{
return
S_OK
;
}
}
}
Accessible
*
xpParentAcc
=
Parent
(
)
;
if
(
!
xpParentAcc
)
return
S_FALSE
;
*
ppdispParent
=
NativeAccessible
(
xpParentAcc
)
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accChildCount
(
long
__RPC_FAR
*
pcountChildren
)
{
if
(
!
pcountChildren
)
return
E_INVALIDARG
;
*
pcountChildren
=
0
;
if
(
IsDefunct
(
)
)
return
CO_E_OBJNOTCONNECTED
;
if
(
nsAccUtils
:
:
MustPrune
(
this
)
)
return
S_OK
;
*
pcountChildren
=
ChildCount
(
)
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accChild
(
VARIANT
varChild
IDispatch
__RPC_FAR
*
__RPC_FAR
*
ppdispChild
)
{
if
(
!
ppdispChild
)
return
E_INVALIDARG
;
*
ppdispChild
=
nullptr
;
if
(
IsDefunct
(
)
)
return
CO_E_OBJNOTCONNECTED
;
bool
isDefunct
=
false
;
RefPtr
<
IAccessible
>
child
=
GetIAccessibleFor
(
varChild
&
isDefunct
)
;
if
(
!
child
)
{
return
E_INVALIDARG
;
}
if
(
isDefunct
)
{
return
CO_E_OBJNOTCONNECTED
;
}
child
.
forget
(
ppdispChild
)
;
return
S_OK
;
}
HRESULT
AccessibleWrap
:
:
ResolveChild
(
const
VARIANT
&
aVarChild
IAccessible
*
*
aOutInterface
)
{
MOZ_ASSERT
(
aOutInterface
)
;
*
aOutInterface
=
nullptr
;
if
(
aVarChild
.
vt
!
=
VT_I4
)
{
return
E_INVALIDARG
;
}
if
(
IsDefunct
(
)
)
{
return
CO_E_OBJNOTCONNECTED
;
}
if
(
aVarChild
.
lVal
=
=
CHILDID_SELF
)
{
return
S_OK
;
}
bool
isDefunct
=
false
;
RefPtr
<
IAccessible
>
accessible
=
GetIAccessibleFor
(
aVarChild
&
isDefunct
)
;
if
(
!
accessible
)
{
return
E_INVALIDARG
;
}
if
(
isDefunct
)
{
return
CO_E_OBJNOTCONNECTED
;
}
accessible
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accName
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszName
)
{
if
(
!
pszName
|
|
varChild
.
vt
!
=
VT_I4
)
return
E_INVALIDARG
;
*
pszName
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accName
(
kVarChildIdSelf
pszName
)
;
}
nsAutoString
name
;
Name
(
name
)
;
if
(
name
.
IsVoid
(
)
)
return
S_FALSE
;
*
pszName
=
:
:
SysAllocStringLen
(
name
.
get
(
)
name
.
Length
(
)
)
;
if
(
!
*
pszName
)
return
E_OUTOFMEMORY
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accValue
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszValue
)
{
if
(
!
pszValue
)
return
E_INVALIDARG
;
*
pszValue
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accValue
(
kVarChildIdSelf
pszValue
)
;
}
nsAutoString
value
;
Value
(
value
)
;
if
(
value
.
IsEmpty
(
)
)
return
S_FALSE
;
*
pszValue
=
:
:
SysAllocStringLen
(
value
.
get
(
)
value
.
Length
(
)
)
;
if
(
!
*
pszValue
)
return
E_OUTOFMEMORY
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accDescription
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszDescription
)
{
if
(
!
pszDescription
)
return
E_INVALIDARG
;
*
pszDescription
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accDescription
(
kVarChildIdSelf
pszDescription
)
;
}
nsAutoString
description
;
Description
(
description
)
;
*
pszDescription
=
:
:
SysAllocStringLen
(
description
.
get
(
)
description
.
Length
(
)
)
;
return
*
pszDescription
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accRole
(
VARIANT
varChild
VARIANT
__RPC_FAR
*
pvarRole
)
{
if
(
!
pvarRole
)
return
E_INVALIDARG
;
VariantInit
(
pvarRole
)
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accRole
(
kVarChildIdSelf
pvarRole
)
;
}
a11y
:
:
role
geckoRole
;
#
ifdef
DEBUG
NS_ASSERTION
(
nsAccUtils
:
:
IsTextInterfaceSupportCorrect
(
this
)
"
Does
not
support
Text
when
it
should
"
)
;
#
endif
geckoRole
=
Role
(
)
;
uint32_t
msaaRole
=
0
;
#
define
ROLE
(
_geckoRole
stringRole
atkRole
macRole
\
_msaaRole
ia2Role
nameRule
)
\
case
roles
:
:
_geckoRole
:
\
msaaRole
=
_msaaRole
;
\
break
;
switch
(
geckoRole
)
{
#
include
"
RoleMap
.
h
"
default
:
MOZ_CRASH
(
"
Unknown
role
.
"
)
;
}
#
undef
ROLE
if
(
geckoRole
=
=
roles
:
:
ROW
)
{
Accessible
*
xpParent
=
Parent
(
)
;
if
(
xpParent
&
&
xpParent
-
>
Role
(
)
=
=
roles
:
:
TREE_TABLE
)
msaaRole
=
ROLE_SYSTEM_OUTLINEITEM
;
}
if
(
msaaRole
!
=
USE_ROLE_STRING
)
{
pvarRole
-
>
vt
=
VT_I4
;
pvarRole
-
>
lVal
=
msaaRole
;
return
S_OK
;
}
nsIContent
*
content
=
GetContent
(
)
;
if
(
!
content
)
return
E_FAIL
;
if
(
content
-
>
IsElement
(
)
)
{
nsAutoString
roleString
;
if
(
msaaRole
!
=
ROLE_SYSTEM_CLIENT
&
&
!
content
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
role
roleString
)
)
{
nsIDocument
*
document
=
content
-
>
GetUncomposedDoc
(
)
;
if
(
!
document
)
return
E_FAIL
;
dom
:
:
NodeInfo
*
nodeInfo
=
content
-
>
NodeInfo
(
)
;
nodeInfo
-
>
GetName
(
roleString
)
;
if
(
!
nodeInfo
-
>
NamespaceEquals
(
document
-
>
GetDefaultNamespaceID
(
)
)
)
{
nsAutoString
nameSpaceURI
;
nodeInfo
-
>
GetNamespaceURI
(
nameSpaceURI
)
;
roleString
+
=
NS_LITERAL_STRING
(
"
"
)
+
nameSpaceURI
;
}
}
if
(
!
roleString
.
IsEmpty
(
)
)
{
pvarRole
-
>
vt
=
VT_BSTR
;
pvarRole
-
>
bstrVal
=
:
:
SysAllocString
(
roleString
.
get
(
)
)
;
return
S_OK
;
}
}
return
E_FAIL
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accState
(
VARIANT
varChild
VARIANT
__RPC_FAR
*
pvarState
)
{
if
(
!
pvarState
)
return
E_INVALIDARG
;
VariantInit
(
pvarState
)
;
pvarState
-
>
vt
=
VT_I4
;
pvarState
-
>
lVal
=
0
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accState
(
kVarChildIdSelf
pvarState
)
;
}
uint64_t
state
=
State
(
)
;
uint32_t
msaaState
=
0
;
nsAccUtils
:
:
To32States
(
state
&
msaaState
nullptr
)
;
pvarState
-
>
lVal
=
msaaState
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accHelp
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszHelp
)
{
if
(
!
pszHelp
)
return
E_INVALIDARG
;
*
pszHelp
=
nullptr
;
return
S_FALSE
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accHelpTopic
(
BSTR
__RPC_FAR
*
pszHelpFile
VARIANT
varChild
long
__RPC_FAR
*
pidTopic
)
{
if
(
!
pszHelpFile
|
|
!
pidTopic
)
return
E_INVALIDARG
;
*
pszHelpFile
=
nullptr
;
*
pidTopic
=
0
;
return
S_FALSE
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszKeyboardShortcut
)
{
if
(
!
pszKeyboardShortcut
)
return
E_INVALIDARG
;
*
pszKeyboardShortcut
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accKeyboardShortcut
(
kVarChildIdSelf
pszKeyboardShortcut
)
;
}
KeyBinding
keyBinding
=
AccessKey
(
)
;
if
(
keyBinding
.
IsEmpty
(
)
)
keyBinding
=
KeyboardShortcut
(
)
;
nsAutoString
shortcut
;
keyBinding
.
ToString
(
shortcut
)
;
*
pszKeyboardShortcut
=
:
:
SysAllocStringLen
(
shortcut
.
get
(
)
shortcut
.
Length
(
)
)
;
return
*
pszKeyboardShortcut
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accFocus
(
VARIANT
__RPC_FAR
*
pvarChild
)
{
if
(
!
pvarChild
)
return
E_INVALIDARG
;
VariantInit
(
pvarChild
)
;
if
(
IsDefunct
(
)
)
return
CO_E_OBJNOTCONNECTED
;
Accessible
*
focusedAccessible
=
FocusedChild
(
)
;
if
(
focusedAccessible
=
=
this
)
{
pvarChild
-
>
vt
=
VT_I4
;
pvarChild
-
>
lVal
=
CHILDID_SELF
;
}
else
if
(
focusedAccessible
)
{
pvarChild
-
>
vt
=
VT_DISPATCH
;
pvarChild
-
>
pdispVal
=
NativeAccessible
(
focusedAccessible
)
;
}
else
{
pvarChild
-
>
vt
=
VT_EMPTY
;
}
return
S_OK
;
}
class
AccessibleEnumerator
final
:
public
IEnumVARIANT
{
public
:
explicit
AccessibleEnumerator
(
const
nsTArray
<
Accessible
*
>
&
aArray
)
:
mArray
(
aArray
)
mCurIndex
(
0
)
{
}
AccessibleEnumerator
(
const
AccessibleEnumerator
&
toCopy
)
:
mArray
(
toCopy
.
mArray
)
mCurIndex
(
toCopy
.
mCurIndex
)
{
}
~
AccessibleEnumerator
(
)
{
}
DECL_IUNKNOWN
STDMETHODIMP
Next
(
unsigned
long
celt
VARIANT
FAR
*
rgvar
unsigned
long
FAR
*
pceltFetched
)
;
STDMETHODIMP
Skip
(
unsigned
long
celt
)
;
STDMETHODIMP
Reset
(
)
{
mCurIndex
=
0
;
return
S_OK
;
}
STDMETHODIMP
Clone
(
IEnumVARIANT
FAR
*
FAR
*
ppenum
)
;
private
:
nsTArray
<
Accessible
*
>
mArray
;
uint32_t
mCurIndex
;
}
;
STDMETHODIMP
AccessibleEnumerator
:
:
QueryInterface
(
REFIID
iid
void
*
*
ppvObject
)
{
if
(
iid
=
=
IID_IEnumVARIANT
)
{
*
ppvObject
=
static_cast
<
IEnumVARIANT
*
>
(
this
)
;
AddRef
(
)
;
return
S_OK
;
}
if
(
iid
=
=
IID_IUnknown
)
{
*
ppvObject
=
static_cast
<
IUnknown
*
>
(
this
)
;
AddRef
(
)
;
return
S_OK
;
}
*
ppvObject
=
nullptr
;
return
E_NOINTERFACE
;
}
STDMETHODIMP
AccessibleEnumerator
:
:
Next
(
unsigned
long
celt
VARIANT
FAR
*
rgvar
unsigned
long
FAR
*
pceltFetched
)
{
uint32_t
length
=
mArray
.
Length
(
)
;
HRESULT
hr
=
S_OK
;
if
(
celt
>
length
-
mCurIndex
)
{
hr
=
S_FALSE
;
celt
=
length
-
mCurIndex
;
}
for
(
uint32_t
i
=
0
;
i
<
celt
;
+
+
i
+
+
mCurIndex
)
{
rgvar
[
i
]
.
vt
=
VT_DISPATCH
;
rgvar
[
i
]
.
pdispVal
=
AccessibleWrap
:
:
NativeAccessible
(
mArray
[
mCurIndex
]
)
;
}
if
(
pceltFetched
)
*
pceltFetched
=
celt
;
return
hr
;
}
STDMETHODIMP
AccessibleEnumerator
:
:
Clone
(
IEnumVARIANT
FAR
*
FAR
*
ppenum
)
{
*
ppenum
=
new
AccessibleEnumerator
(
*
this
)
;
if
(
!
*
ppenum
)
return
E_OUTOFMEMORY
;
NS_ADDREF
(
*
ppenum
)
;
return
S_OK
;
}
STDMETHODIMP
AccessibleEnumerator
:
:
Skip
(
unsigned
long
celt
)
{
uint32_t
length
=
mArray
.
Length
(
)
;
if
(
celt
>
length
-
mCurIndex
)
{
mCurIndex
=
length
;
return
S_FALSE
;
}
mCurIndex
+
=
celt
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accSelection
(
VARIANT
__RPC_FAR
*
pvarChildren
)
{
if
(
!
pvarChildren
)
return
E_INVALIDARG
;
VariantInit
(
pvarChildren
)
;
pvarChildren
-
>
vt
=
VT_EMPTY
;
if
(
IsDefunct
(
)
)
return
CO_E_OBJNOTCONNECTED
;
if
(
IsSelect
(
)
)
{
AutoTArray
<
Accessible
*
10
>
selectedItems
;
SelectedItems
(
&
selectedItems
)
;
RefPtr
<
AccessibleEnumerator
>
pEnum
=
new
AccessibleEnumerator
(
selectedItems
)
;
pvarChildren
-
>
vt
=
VT_UNKNOWN
;
NS_ADDREF
(
pvarChildren
-
>
punkVal
=
pEnum
)
;
}
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
get_accDefaultAction
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszDefaultAction
)
{
if
(
!
pszDefaultAction
)
return
E_INVALIDARG
;
*
pszDefaultAction
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accDefaultAction
(
kVarChildIdSelf
pszDefaultAction
)
;
}
nsAutoString
defaultAction
;
ActionNameAt
(
0
defaultAction
)
;
*
pszDefaultAction
=
:
:
SysAllocStringLen
(
defaultAction
.
get
(
)
defaultAction
.
Length
(
)
)
;
return
*
pszDefaultAction
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
AccessibleWrap
:
:
accSelect
(
long
flagsSelect
VARIANT
varChild
)
{
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accSelect
(
flagsSelect
kVarChildIdSelf
)
;
}
if
(
flagsSelect
&
SELFLAG_TAKEFOCUS
)
{
if
(
XRE_IsContentProcess
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
mozilla
:
:
NewRunnableMethod
(
"
Accessible
:
:
TakeFocus
"
this
&
Accessible
:
:
TakeFocus
)
;
NS_DispatchToMainThread
(
runnable
NS_DISPATCH_NORMAL
)
;
return
S_OK
;
}
TakeFocus
(
)
;
return
S_OK
;
}
if
(
flagsSelect
&
SELFLAG_TAKESELECTION
)
{
TakeSelection
(
)
;
return
S_OK
;
}
if
(
flagsSelect
&
SELFLAG_ADDSELECTION
)
{
SetSelected
(
true
)
;
return
S_OK
;
}
if
(
flagsSelect
&
SELFLAG_REMOVESELECTION
)
{
SetSelected
(
false
)
;
return
S_OK
;
}
return
E_FAIL
;
}
STDMETHODIMP
AccessibleWrap
:
:
accLocation
(
long
__RPC_FAR
*
pxLeft
long
__RPC_FAR
*
pyTop
long
__RPC_FAR
*
pcxWidth
long
__RPC_FAR
*
pcyHeight
VARIANT
varChild
)
{
if
(
!
pxLeft
|
|
!
pyTop
|
|
!
pcxWidth
|
|
!
pcyHeight
)
return
E_INVALIDARG
;
*
pxLeft
=
0
;
*
pyTop
=
0
;
*
pcxWidth
=
0
;
*
pcyHeight
=
0
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accLocation
(
pxLeft
pyTop
pcxWidth
pcyHeight
kVarChildIdSelf
)
;
}
nsIntRect
rect
=
Bounds
(
)
;
*
pxLeft
=
rect
.
x
;
*
pyTop
=
rect
.
y
;
*
pcxWidth
=
rect
.
width
;
*
pcyHeight
=
rect
.
height
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
accNavigate
(
long
navDir
VARIANT
varStart
VARIANT
__RPC_FAR
*
pvarEndUpAt
)
{
if
(
!
pvarEndUpAt
)
return
E_INVALIDARG
;
VariantInit
(
pvarEndUpAt
)
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varStart
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accNavigate
(
navDir
kVarChildIdSelf
pvarEndUpAt
)
;
}
Accessible
*
navAccessible
=
nullptr
;
Maybe
<
RelationType
>
xpRelation
;
#
define
RELATIONTYPE
(
geckoType
stringType
atkType
msaaType
ia2Type
)
\
case
msaaType
:
\
xpRelation
.
emplace
(
RelationType
:
:
geckoType
)
;
\
break
;
switch
(
navDir
)
{
case
NAVDIR_FIRSTCHILD
:
if
(
IsProxy
(
)
)
{
if
(
!
Proxy
(
)
-
>
MustPruneChildren
(
)
)
{
navAccessible
=
WrapperFor
(
Proxy
(
)
-
>
FirstChild
(
)
)
;
}
}
else
{
if
(
!
nsAccUtils
:
:
MustPrune
(
this
)
)
navAccessible
=
FirstChild
(
)
;
}
break
;
case
NAVDIR_LASTCHILD
:
if
(
IsProxy
(
)
)
{
if
(
!
Proxy
(
)
-
>
MustPruneChildren
(
)
)
{
navAccessible
=
WrapperFor
(
Proxy
(
)
-
>
LastChild
(
)
)
;
}
}
else
{
if
(
!
nsAccUtils
:
:
MustPrune
(
this
)
)
navAccessible
=
LastChild
(
)
;
}
break
;
case
NAVDIR_NEXT
:
navAccessible
=
IsProxy
(
)
?
WrapperFor
(
Proxy
(
)
-
>
NextSibling
(
)
)
:
NextSibling
(
)
;
break
;
case
NAVDIR_PREVIOUS
:
navAccessible
=
IsProxy
(
)
?
WrapperFor
(
Proxy
(
)
-
>
PrevSibling
(
)
)
:
PrevSibling
(
)
;
break
;
case
NAVDIR_DOWN
:
case
NAVDIR_LEFT
:
case
NAVDIR_RIGHT
:
case
NAVDIR_UP
:
return
E_NOTIMPL
;
#
include
"
RelationTypeMap
.
h
"
default
:
return
E_INVALIDARG
;
}
#
undef
RELATIONTYPE
pvarEndUpAt
-
>
vt
=
VT_EMPTY
;
if
(
xpRelation
)
{
Relation
rel
=
RelationByType
(
*
xpRelation
)
;
navAccessible
=
rel
.
Next
(
)
;
}
if
(
!
navAccessible
)
return
E_FAIL
;
pvarEndUpAt
-
>
pdispVal
=
NativeAccessible
(
navAccessible
)
;
pvarEndUpAt
-
>
vt
=
VT_DISPATCH
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
accHitTest
(
long
xLeft
long
yTop
VARIANT
__RPC_FAR
*
pvarChild
)
{
if
(
!
pvarChild
)
return
E_INVALIDARG
;
VariantInit
(
pvarChild
)
;
if
(
IsDefunct
(
)
)
return
CO_E_OBJNOTCONNECTED
;
Accessible
*
accessible
=
ChildAtPoint
(
xLeft
yTop
eDirectChild
)
;
if
(
accessible
)
{
if
(
accessible
=
=
this
)
{
pvarChild
-
>
vt
=
VT_I4
;
pvarChild
-
>
lVal
=
CHILDID_SELF
;
}
else
{
pvarChild
-
>
vt
=
VT_DISPATCH
;
pvarChild
-
>
pdispVal
=
NativeAccessible
(
accessible
)
;
}
}
else
{
pvarChild
-
>
vt
=
VT_EMPTY
;
return
S_FALSE
;
}
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
accDoDefaultAction
(
VARIANT
varChild
)
{
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accDoDefaultAction
(
kVarChildIdSelf
)
;
}
return
DoAction
(
0
)
?
S_OK
:
E_INVALIDARG
;
}
STDMETHODIMP
AccessibleWrap
:
:
put_accName
(
VARIANT
varChild
BSTR
szName
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
AccessibleWrap
:
:
put_accValue
(
VARIANT
varChild
BSTR
szValue
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
AccessibleWrap
:
:
GetTypeInfoCount
(
UINT
*
pctinfo
)
{
if
(
!
pctinfo
)
return
E_INVALIDARG
;
*
pctinfo
=
1
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
ITypeInfo
*
*
ppTInfo
)
{
if
(
!
ppTInfo
)
return
E_INVALIDARG
;
*
ppTInfo
=
nullptr
;
if
(
iTInfo
!
=
0
)
return
DISP_E_BADINDEX
;
ITypeInfo
*
typeInfo
=
GetTI
(
lcid
)
;
if
(
!
typeInfo
)
return
E_FAIL
;
typeInfo
-
>
AddRef
(
)
;
*
ppTInfo
=
typeInfo
;
return
S_OK
;
}
STDMETHODIMP
AccessibleWrap
:
:
GetIDsOfNames
(
REFIID
riid
LPOLESTR
*
rgszNames
UINT
cNames
LCID
lcid
DISPID
*
rgDispId
)
{
ITypeInfo
*
typeInfo
=
GetTI
(
lcid
)
;
if
(
!
typeInfo
)
return
E_FAIL
;
HRESULT
hr
=
DispGetIDsOfNames
(
typeInfo
rgszNames
cNames
rgDispId
)
;
return
hr
;
}
STDMETHODIMP
AccessibleWrap
:
:
Invoke
(
DISPID
dispIdMember
REFIID
riid
LCID
lcid
WORD
wFlags
DISPPARAMS
*
pDispParams
VARIANT
*
pVarResult
EXCEPINFO
*
pExcepInfo
UINT
*
puArgErr
)
{
ITypeInfo
*
typeInfo
=
GetTI
(
lcid
)
;
if
(
!
typeInfo
)
return
E_FAIL
;
return
typeInfo
-
>
Invoke
(
static_cast
<
IAccessible
*
>
(
this
)
dispIdMember
wFlags
pDispParams
pVarResult
pExcepInfo
puArgErr
)
;
}
void
AccessibleWrap
:
:
GetNativeInterface
(
void
*
*
aOutAccessible
)
{
*
aOutAccessible
=
static_cast
<
IAccessible
*
>
(
this
)
;
NS_ADDREF_THIS
(
)
;
}
void
AccessibleWrap
:
:
SetID
(
uint32_t
aID
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
IsProxy
(
)
)
;
mID
=
aID
;
}
void
AccessibleWrap
:
:
FireWinEvent
(
Accessible
*
aTarget
uint32_t
aEventType
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
static_assert
(
sizeof
(
gWinEventMap
)
/
sizeof
(
gWinEventMap
[
0
]
)
=
=
nsIAccessibleEvent
:
:
EVENT_LAST_ENTRY
"
MSAA
event
map
skewed
"
)
;
NS_ASSERTION
(
aEventType
>
0
&
&
aEventType
<
ArrayLength
(
gWinEventMap
)
"
invalid
event
type
"
)
;
uint32_t
winEvent
=
gWinEventMap
[
aEventType
]
;
if
(
!
winEvent
)
return
;
int32_t
childID
=
GetChildIDFor
(
aTarget
)
;
if
(
!
childID
)
return
;
HWND
hwnd
=
GetHWNDFor
(
aTarget
)
;
if
(
!
hwnd
)
{
return
;
}
:
:
NotifyWinEvent
(
winEvent
hwnd
OBJID_CLIENT
childID
)
;
if
(
aEventType
=
=
nsIAccessibleEvent
:
:
EVENT_SELECTION
&
&
Compatibility
:
:
IsJAWS
(
)
)
{
roles
:
:
Role
role
=
aTarget
-
>
IsProxy
(
)
?
aTarget
-
>
Proxy
(
)
-
>
Role
(
)
:
aTarget
-
>
Role
(
)
;
if
(
role
=
=
roles
:
:
COMBOBOX_OPTION
)
{
:
:
NotifyWinEvent
(
EVENT_OBJECT_FOCUS
hwnd
OBJID_CLIENT
childID
)
;
}
}
}
nsresult
AccessibleWrap
:
:
HandleAccEvent
(
AccEvent
*
aEvent
)
{
nsresult
rv
=
Accessible
:
:
HandleAccEvent
(
aEvent
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
IPCAccessibilityActive
(
)
)
{
return
NS_OK
;
}
uint32_t
eventType
=
aEvent
-
>
GetEventType
(
)
;
NS_ENSURE_TRUE
(
!
IsDefunct
(
)
NS_ERROR_FAILURE
)
;
Accessible
*
accessible
=
aEvent
-
>
GetAccessible
(
)
;
if
(
!
accessible
)
return
NS_OK
;
if
(
eventType
=
=
nsIAccessibleEvent
:
:
EVENT_TEXT_CARET_MOVED
|
|
eventType
=
=
nsIAccessibleEvent
:
:
EVENT_FOCUS
)
{
UpdateSystemCaretFor
(
accessible
)
;
}
FireWinEvent
(
accessible
eventType
)
;
return
NS_OK
;
}
DocProxyAccessibleWrap
*
AccessibleWrap
:
:
DocProxyWrapper
(
)
const
{
MOZ_ASSERT
(
IsProxy
(
)
)
;
ProxyAccessible
*
proxy
=
Proxy
(
)
;
if
(
!
proxy
)
{
return
nullptr
;
}
AccessibleWrap
*
acc
=
WrapperFor
(
proxy
-
>
Document
(
)
)
;
MOZ_ASSERT
(
acc
-
>
IsDoc
(
)
)
;
return
static_cast
<
DocProxyAccessibleWrap
*
>
(
acc
)
;
}
int32_t
AccessibleWrap
:
:
GetChildIDFor
(
Accessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
return
0
;
}
if
(
aAccessible
-
>
IsProxy
(
)
)
{
const
uint32_t
id
=
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
MOZ_ASSERT
(
id
!
=
kNoID
)
;
return
id
;
}
if
(
!
aAccessible
-
>
Document
(
)
)
return
0
;
uint32_t
*
id
=
&
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
if
(
*
id
!
=
kNoID
)
return
*
id
;
*
id
=
sIDGen
.
GetID
(
)
;
MOZ_ASSERT
(
!
aAccessible
-
>
IsProxy
(
)
)
;
DocAccessibleWrap
*
doc
=
static_cast
<
DocAccessibleWrap
*
>
(
aAccessible
-
>
Document
(
)
)
;
doc
-
>
AddID
(
*
id
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
)
;
return
*
id
;
}
HWND
AccessibleWrap
:
:
GetHWNDFor
(
Accessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
return
nullptr
;
}
if
(
aAccessible
-
>
IsProxy
(
)
)
{
ProxyAccessible
*
proxy
=
aAccessible
-
>
Proxy
(
)
;
if
(
!
proxy
)
{
return
nullptr
;
}
if
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
)
{
DocAccessibleParent
*
doc
=
proxy
-
>
Document
(
)
;
HWND
hWnd
=
doc
-
>
GetEmulatedWindowHandle
(
)
;
if
(
hWnd
)
{
return
hWnd
;
}
}
Accessible
*
outerDoc
=
proxy
-
>
OuterDocOfRemoteBrowser
(
)
;
NS_ASSERTION
(
outerDoc
"
no
outer
doc
for
accessible
remote
tab
!
"
)
;
if
(
!
outerDoc
)
{
return
nullptr
;
}
return
GetHWNDFor
(
outerDoc
)
;
}
DocAccessible
*
document
=
aAccessible
-
>
Document
(
)
;
if
(
!
document
)
return
nullptr
;
nsIFrame
*
frame
=
aAccessible
-
>
GetFrame
(
)
;
if
(
frame
)
{
nsIWidget
*
widget
=
frame
-
>
GetNearestWidget
(
)
;
if
(
widget
&
&
widget
-
>
IsVisible
(
)
)
{
nsIPresShell
*
shell
=
document
-
>
PresShell
(
)
;
nsViewManager
*
vm
=
shell
-
>
GetViewManager
(
)
;
if
(
vm
)
{
nsCOMPtr
<
nsIWidget
>
rootWidget
;
vm
-
>
GetRootWidget
(
getter_AddRefs
(
rootWidget
)
)
;
if
(
rootWidget
!
=
widget
)
return
static_cast
<
HWND
>
(
widget
-
>
GetNativeData
(
NS_NATIVE_WINDOW
)
)
;
}
}
}
return
static_cast
<
HWND
>
(
document
-
>
GetNativeWindow
(
)
)
;
}
IDispatch
*
AccessibleWrap
:
:
NativeAccessible
(
Accessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
NS_WARNING
(
"
Not
passing
in
an
aAccessible
"
)
;
return
nullptr
;
}
IAccessible
*
msaaAccessible
=
nullptr
;
aAccessible
-
>
GetNativeInterface
(
reinterpret_cast
<
void
*
*
>
(
&
msaaAccessible
)
)
;
return
static_cast
<
IDispatch
*
>
(
msaaAccessible
)
;
}
static
Accessible
*
GetAccessibleInSubtree
(
DocAccessible
*
aDoc
uint32_t
aID
)
{
Accessible
*
child
=
static_cast
<
DocAccessibleWrap
*
>
(
aDoc
)
-
>
GetAccessibleByID
(
aID
)
;
if
(
child
)
return
child
;
uint32_t
childDocCount
=
aDoc
-
>
ChildDocumentCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
childDocCount
;
i
+
+
)
{
child
=
GetAccessibleInSubtree
(
aDoc
-
>
GetChildDocumentAt
(
i
)
aID
)
;
if
(
child
)
return
child
;
}
return
nullptr
;
}
static
already_AddRefed
<
IDispatch
>
GetProxiedAccessibleInSubtree
(
const
DocAccessibleParent
*
aDoc
const
VARIANT
&
aVarChild
)
{
auto
wrapper
=
static_cast
<
DocProxyAccessibleWrap
*
>
(
WrapperFor
(
aDoc
)
)
;
RefPtr
<
IAccessible
>
comProxy
;
int32_t
docWrapperChildId
=
AccessibleWrap
:
:
GetChildIDFor
(
wrapper
)
;
if
(
aDoc
-
>
IsTopLevel
(
)
)
{
wrapper
-
>
GetNativeInterface
(
getter_AddRefs
(
comProxy
)
)
;
}
else
{
auto
tab
=
static_cast
<
dom
:
:
TabParent
*
>
(
aDoc
-
>
Manager
(
)
)
;
MOZ_ASSERT
(
tab
)
;
DocAccessibleParent
*
topLevelDoc
=
tab
-
>
GetTopLevelDocAccessible
(
)
;
MOZ_ASSERT
(
topLevelDoc
&
&
topLevelDoc
-
>
IsTopLevel
(
)
)
;
VARIANT
docId
=
{
VT_I4
}
;
docId
.
lVal
=
docWrapperChildId
;
RefPtr
<
IDispatch
>
disp
=
GetProxiedAccessibleInSubtree
(
topLevelDoc
docId
)
;
if
(
!
disp
)
{
return
nullptr
;
}
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
comProxy
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
}
MOZ_ASSERT
(
comProxy
)
;
if
(
!
comProxy
)
{
return
nullptr
;
}
if
(
docWrapperChildId
=
=
aVarChild
.
lVal
)
{
return
comProxy
.
forget
(
)
;
}
RefPtr
<
IDispatch
>
disp
;
if
(
FAILED
(
comProxy
-
>
get_accChild
(
aVarChild
getter_AddRefs
(
disp
)
)
)
)
{
return
nullptr
;
}
return
disp
.
forget
(
)
;
}
already_AddRefed
<
IAccessible
>
AccessibleWrap
:
:
GetIAccessibleFor
(
const
VARIANT
&
aVarChild
bool
*
aIsDefunct
)
{
if
(
aVarChild
.
vt
!
=
VT_I4
)
return
nullptr
;
VARIANT
varChild
=
aVarChild
;
MOZ_ASSERT
(
aIsDefunct
)
;
*
aIsDefunct
=
false
;
RefPtr
<
IAccessible
>
result
;
if
(
varChild
.
lVal
=
=
CHILDID_SELF
)
{
*
aIsDefunct
=
IsDefunct
(
)
;
if
(
*
aIsDefunct
)
{
return
nullptr
;
}
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
if
(
result
)
{
return
result
.
forget
(
)
;
}
if
(
!
IsProxy
(
)
)
{
return
nullptr
;
}
varChild
.
lVal
=
GetExistingID
(
)
;
}
if
(
varChild
.
ulVal
!
=
GetExistingID
(
)
&
&
(
IsProxy
(
)
?
Proxy
(
)
-
>
MustPruneChildren
(
)
:
nsAccUtils
:
:
MustPrune
(
this
)
)
)
{
return
nullptr
;
}
if
(
XRE_IsParentProcess
(
)
&
&
!
IsProxy
(
)
&
&
!
sIDGen
.
IsChromeID
(
varChild
.
lVal
)
)
{
return
GetRemoteIAccessibleFor
(
varChild
)
;
}
if
(
varChild
.
lVal
>
0
)
{
MOZ_ASSERT
(
!
IsProxy
(
)
)
;
Accessible
*
xpAcc
=
GetChildAt
(
varChild
.
lVal
-
1
)
;
if
(
!
xpAcc
)
{
return
nullptr
;
}
*
aIsDefunct
=
xpAcc
-
>
IsDefunct
(
)
;
static_cast
<
AccessibleWrap
*
>
(
xpAcc
)
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
if
(
!
IsProxy
(
)
)
{
DocAccessible
*
document
=
Document
(
)
;
Accessible
*
child
=
GetAccessibleInSubtree
(
document
static_cast
<
uint32_t
>
(
varChild
.
lVal
)
)
;
if
(
child
&
&
IsDoc
(
)
)
{
*
aIsDefunct
=
child
-
>
IsDefunct
(
)
;
static_cast
<
AccessibleWrap
*
>
(
child
)
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
Accessible
*
parent
=
child
;
while
(
parent
&
&
parent
!
=
document
)
{
if
(
parent
=
=
this
)
{
*
aIsDefunct
=
child
-
>
IsDefunct
(
)
;
static_cast
<
AccessibleWrap
*
>
(
child
)
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
parent
=
parent
-
>
Parent
(
)
;
}
}
if
(
IsProxy
(
)
)
{
DocAccessibleParent
*
proxyDoc
=
Proxy
(
)
-
>
Document
(
)
;
RefPtr
<
IDispatch
>
disp
=
GetProxiedAccessibleInSubtree
(
proxyDoc
varChild
)
;
if
(
!
disp
)
{
return
nullptr
;
}
MOZ_ASSERT
(
mscom
:
:
IsProxy
(
disp
)
)
;
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
result
.
forget
(
)
;
}
return
nullptr
;
}
already_AddRefed
<
IAccessible
>
AccessibleWrap
:
:
GetRemoteIAccessibleFor
(
const
VARIANT
&
aVarChild
)
{
DocAccessible
*
doc
=
Document
(
)
;
const
nsTArray
<
DocAccessibleParent
*
>
*
remoteDocs
=
DocManager
:
:
TopLevelRemoteDocs
(
)
;
if
(
!
remoteDocs
)
{
return
nullptr
;
}
RefPtr
<
IAccessible
>
result
;
size_t
docCount
=
remoteDocs
-
>
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
docCount
;
i
+
+
)
{
DocAccessibleParent
*
remoteDoc
=
remoteDocs
-
>
ElementAt
(
i
)
;
uint32_t
remoteDocMsaaId
=
WrapperFor
(
remoteDoc
)
-
>
GetExistingID
(
)
;
if
(
!
sIDGen
.
IsSameContentProcessFor
(
aVarChild
.
lVal
remoteDocMsaaId
)
)
{
continue
;
}
Accessible
*
outerDoc
=
remoteDoc
-
>
OuterDocOfRemoteBrowser
(
)
;
if
(
!
outerDoc
)
{
continue
;
}
if
(
outerDoc
-
>
Document
(
)
!
=
doc
)
{
continue
;
}
RefPtr
<
IDispatch
>
disp
=
GetProxiedAccessibleInSubtree
(
remoteDoc
aVarChild
)
;
if
(
!
disp
)
{
continue
;
}
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
result
.
forget
(
)
;
}
return
nullptr
;
}
void
AccessibleWrap
:
:
UpdateSystemCaretFor
(
Accessible
*
aAccessible
)
{
:
:
DestroyCaret
(
)
;
HyperTextAccessible
*
text
=
aAccessible
-
>
AsHyperText
(
)
;
if
(
!
text
)
return
;
nsIWidget
*
widget
=
nullptr
;
LayoutDeviceIntRect
caretRect
=
text
-
>
GetCaretRect
(
&
widget
)
;
if
(
!
widget
)
{
return
;
}
HWND
caretWnd
=
reinterpret_cast
<
HWND
>
(
widget
-
>
GetNativeData
(
NS_NATIVE_WINDOW
)
)
;
UpdateSystemCaretFor
(
caretWnd
caretRect
)
;
}
void
AccessibleWrap
:
:
UpdateSystemCaretFor
(
ProxyAccessible
*
aProxy
const
LayoutDeviceIntRect
&
aCaretRect
)
{
:
:
DestroyCaret
(
)
;
Accessible
*
outerDoc
=
aProxy
-
>
OuterDocOfRemoteBrowser
(
)
;
UpdateSystemCaretFor
(
GetHWNDFor
(
outerDoc
)
aCaretRect
)
;
}
void
AccessibleWrap
:
:
UpdateSystemCaretFor
(
HWND
aCaretWnd
const
LayoutDeviceIntRect
&
aCaretRect
)
{
if
(
!
aCaretWnd
|
|
aCaretRect
.
IsEmpty
(
)
)
{
return
;
}
nsAutoBitmap
caretBitMap
(
CreateBitmap
(
1
aCaretRect
.
height
1
1
nullptr
)
)
;
if
(
:
:
CreateCaret
(
aCaretWnd
caretBitMap
1
aCaretRect
.
height
)
)
{
:
:
ShowCaret
(
aCaretWnd
)
;
RECT
windowRect
;
:
:
GetWindowRect
(
aCaretWnd
&
windowRect
)
;
:
:
SetCaretPos
(
aCaretRect
.
x
-
windowRect
.
left
aCaretRect
.
y
-
windowRect
.
top
)
;
}
}
ITypeInfo
*
AccessibleWrap
:
:
GetTI
(
LCID
lcid
)
{
if
(
gTypeInfo
)
return
gTypeInfo
;
ITypeLib
*
typeLib
=
nullptr
;
HRESULT
hr
=
LoadRegTypeLib
(
LIBID_Accessibility
1
0
lcid
&
typeLib
)
;
if
(
FAILED
(
hr
)
)
return
nullptr
;
hr
=
typeLib
-
>
GetTypeInfoOfGuid
(
IID_IAccessible
&
gTypeInfo
)
;
typeLib
-
>
Release
(
)
;
if
(
FAILED
(
hr
)
)
return
nullptr
;
return
gTypeInfo
;
}
uint32_t
AccessibleWrap
:
:
GetContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
return
sIDGen
.
GetContentProcessIDFor
(
aIPCContentId
)
;
}
void
AccessibleWrap
:
:
ReleaseContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
sIDGen
.
ReleaseContentProcessIDFor
(
aIPCContentId
)
;
}
void
AccessibleWrap
:
:
SetHandlerControl
(
DWORD
aPid
RefPtr
<
IHandlerControl
>
aCtrl
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
NS_IsMainThread
(
)
)
;
if
(
!
sHandlerControllers
)
{
sHandlerControllers
=
new
nsTArray
<
HandlerControllerData
>
(
)
;
ClearOnShutdown
(
&
sHandlerControllers
)
;
}
HandlerControllerData
ctrlData
(
aPid
Move
(
aCtrl
)
)
;
if
(
sHandlerControllers
-
>
Contains
(
ctrlData
)
)
{
return
;
}
sHandlerControllers
-
>
AppendElement
(
Move
(
ctrlData
)
)
;
}
void
AccessibleWrap
:
:
InvalidateHandlers
(
)
{
static
const
HRESULT
kErrorServerDied
=
HRESULT_FROM_WIN32
(
RPC_S_SERVER_UNAVAILABLE
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sHandlerControllers
|
|
sHandlerControllers
-
>
IsEmpty
(
)
)
{
return
;
}
for
(
auto
&
controller
:
Reversed
(
*
sHandlerControllers
)
)
{
MOZ_ASSERT
(
controller
.
mPid
)
;
MOZ_ASSERT
(
controller
.
mCtrl
)
;
ASYNC_INVOKER_FOR
(
IHandlerControl
)
invoker
(
controller
.
mCtrl
Some
(
controller
.
mIsProxy
)
)
;
HRESULT
hr
=
ASYNC_INVOKE
(
invoker
Invalidate
)
;
if
(
hr
=
=
CO_E_OBJNOTCONNECTED
|
|
hr
=
=
kErrorServerDied
)
{
sHandlerControllers
-
>
RemoveElement
(
controller
)
;
}
else
{
NS_WARN_IF
(
FAILED
(
hr
)
)
;
}
}
}
bool
AccessibleWrap
:
:
DispatchTextChangeToHandler
(
bool
aIsInsert
const
nsString
&
aText
int32_t
aStart
uint32_t
aLen
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sHandlerControllers
|
|
sHandlerControllers
-
>
IsEmpty
(
)
)
{
return
false
;
}
HWND
hwnd
=
GetHWNDFor
(
this
)
;
MOZ_ASSERT
(
hwnd
)
;
if
(
!
hwnd
)
{
return
false
;
}
long
msaaId
=
GetChildIDFor
(
this
)
;
DWORD
ourPid
=
:
:
GetCurrentProcessId
(
)
;
nsTArray
<
HandlerControllerData
>
:
:
index_type
ctrlIndex
=
sHandlerControllers
-
>
IndexOf
(
ourPid
)
;
if
(
ctrlIndex
=
=
nsTArray
<
HandlerControllerData
>
:
:
NoIndex
)
{
ctrlIndex
=
0
;
}
HandlerControllerData
&
controller
=
sHandlerControllers
-
>
ElementAt
(
ctrlIndex
)
;
MOZ_ASSERT
(
controller
.
mPid
)
;
MOZ_ASSERT
(
controller
.
mCtrl
)
;
VARIANT_BOOL
isInsert
=
aIsInsert
?
VARIANT_TRUE
:
VARIANT_FALSE
;
IA2TextSegment
textSegment
{
:
:
SysAllocStringLen
(
aText
.
get
(
)
aText
.
Length
(
)
)
aStart
static_cast
<
long
>
(
aLen
)
}
;
ASYNC_INVOKER_FOR
(
IHandlerControl
)
invoker
(
controller
.
mCtrl
Some
(
controller
.
mIsProxy
)
)
;
HRESULT
hr
=
ASYNC_INVOKE
(
invoker
OnTextChange
PtrToLong
(
hwnd
)
msaaId
isInsert
&
textSegment
)
;
:
:
SysFreeString
(
textSegment
.
text
)
;
return
SUCCEEDED
(
hr
)
;
}
void
AccessibleWrap
:
:
AssignChildIDTo
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
aSdnAcc
-
>
SetUniqueID
(
sIDGen
.
GetID
(
)
)
;
}
void
AccessibleWrap
:
:
ReleaseChildID
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
sIDGen
.
ReleaseID
(
aSdnAcc
)
;
}
