#
include
"
AccessibleWrap
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
AccEvent
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsIAccessibleEvent
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
mozilla
/
a11y
/
HyperTextAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
RemoteAccessible
.
h
"
#
include
"
ServiceProvider
.
h
"
#
include
"
sdnAccessible
.
h
"
#
include
"
LocalAccessible
-
inl
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
AccessibleWrap
:
:
AccessibleWrap
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LocalAccessible
(
aContent
aDoc
)
{
}
NS_IMPL_ISUPPORTS_INHERITED0
(
AccessibleWrap
LocalAccessible
)
void
AccessibleWrap
:
:
Shutdown
(
)
{
if
(
mMsaa
)
{
mMsaa
-
>
MsaaShutdown
(
)
;
}
LocalAccessible
:
:
Shutdown
(
)
;
}
MsaaAccessible
*
AccessibleWrap
:
:
GetMsaa
(
)
{
if
(
!
mMsaa
)
{
mMsaa
=
MsaaAccessible
:
:
Create
(
this
)
;
}
return
mMsaa
;
}
void
AccessibleWrap
:
:
GetNativeInterface
(
void
*
*
aOutAccessible
)
{
RefPtr
<
IAccessible
>
result
=
GetMsaa
(
)
;
return
result
.
forget
(
aOutAccessible
)
;
}
bool
AccessibleWrap
:
:
IsRootForHWND
(
)
{
if
(
IsRoot
(
)
)
{
return
true
;
}
HWND
thisHwnd
=
MsaaAccessible
:
:
GetHWNDFor
(
this
)
;
AccessibleWrap
*
parent
=
static_cast
<
AccessibleWrap
*
>
(
LocalParent
(
)
)
;
MOZ_ASSERT
(
parent
)
;
HWND
parentHwnd
=
MsaaAccessible
:
:
GetHWNDFor
(
parent
)
;
return
thisHwnd
!
=
parentHwnd
;
}
void
AccessibleWrap
:
:
UpdateSystemCaretFor
(
Accessible
*
aAccessible
const
LayoutDeviceIntRect
&
aCaretRect
)
{
if
(
LocalAccessible
*
localAcc
=
aAccessible
-
>
AsLocal
(
)
)
{
UpdateSystemCaretFor
(
localAcc
)
;
}
else
{
UpdateSystemCaretFor
(
aAccessible
-
>
AsRemote
(
)
aCaretRect
)
;
}
}
void
AccessibleWrap
:
:
UpdateSystemCaretFor
(
LocalAccessible
*
aAccessible
)
{
:
:
DestroyCaret
(
)
;
HyperTextAccessible
*
text
=
aAccessible
-
>
AsHyperText
(
)
;
if
(
!
text
)
return
;
nsIWidget
*
widget
=
nullptr
;
LayoutDeviceIntRect
caretRect
=
text
-
>
GetCaretRect
(
&
widget
)
;
if
(
!
widget
)
{
return
;
}
HWND
caretWnd
=
reinterpret_cast
<
HWND
>
(
widget
-
>
GetNativeData
(
NS_NATIVE_WINDOW
)
)
;
UpdateSystemCaretFor
(
caretWnd
caretRect
)
;
}
void
AccessibleWrap
:
:
UpdateSystemCaretFor
(
RemoteAccessible
*
aProxy
const
LayoutDeviceIntRect
&
aCaretRect
)
{
:
:
DestroyCaret
(
)
;
LocalAccessible
*
outerDoc
=
aProxy
-
>
OuterDocOfRemoteBrowser
(
)
;
UpdateSystemCaretFor
(
MsaaAccessible
:
:
GetHWNDFor
(
outerDoc
)
aCaretRect
)
;
}
void
AccessibleWrap
:
:
UpdateSystemCaretFor
(
HWND
aCaretWnd
const
LayoutDeviceIntRect
&
aCaretRect
)
{
if
(
!
aCaretWnd
|
|
aCaretRect
.
IsEmpty
(
)
)
{
return
;
}
nsAutoBitmap
caretBitMap
(
CreateBitmap
(
1
aCaretRect
.
Height
(
)
1
1
nullptr
)
)
;
if
(
:
:
CreateCaret
(
aCaretWnd
caretBitMap
1
aCaretRect
.
Height
(
)
)
)
{
:
:
ShowCaret
(
aCaretWnd
)
;
POINT
clientPoint
{
aCaretRect
.
X
(
)
aCaretRect
.
Y
(
)
}
;
:
:
ScreenToClient
(
aCaretWnd
&
clientPoint
)
;
:
:
SetCaretPos
(
clientPoint
.
x
clientPoint
.
y
)
;
}
}
