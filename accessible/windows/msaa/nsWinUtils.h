#
ifndef
nsWinUtils_h_
#
define
nsWinUtils_h_
#
include
<
functional
>
#
include
<
windows
.
h
>
#
include
"
nsIDOMCSSStyleDeclaration
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsIContent
;
namespace
mozilla
{
namespace
a11y
{
class
DocAccessible
;
const
LPCWSTR
kClassNameRoot
=
L
"
MozillaUIWindowClass
"
;
const
LPCWSTR
kClassNameTabContent
=
L
"
MozillaContentWindowClass
"
;
const
LPCWSTR
kPropNameDocAcc
=
L
"
MozDocAccessible
"
;
const
LPCWSTR
kPropNameDocAccParent
=
L
"
MozDocAccessibleParent
"
;
class
nsWinUtils
{
public
:
static
already_AddRefed
<
nsIDOMCSSStyleDeclaration
>
GetComputedStyleDeclaration
(
nsIContent
*
aContent
)
;
static
bool
MaybeStartWindowEmulation
(
)
;
static
void
ShutdownWindowEmulation
(
)
;
static
bool
IsWindowEmulationStarted
(
)
{
return
sWindowEmulationStarted
;
}
static
void
RegisterNativeWindow
(
LPCWSTR
aWindowClass
)
;
typedef
std
:
:
function
<
void
(
HWND
)
>
NativeWindowCreateProc
;
static
HWND
CreateNativeWindow
(
LPCWSTR
aWindowClass
HWND
aParentWnd
int
aX
int
aY
int
aWidth
int
aHeight
bool
aIsActive
NativeWindowCreateProc
*
aOnCreateProc
=
nullptr
)
;
static
void
ShowNativeWindow
(
HWND
aWnd
)
;
static
void
HideNativeWindow
(
HWND
aWnd
)
;
private
:
static
bool
sWindowEmulationStarted
;
}
;
}
}
#
endif
