#
include
"
LazyInstantiator
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
include
"
mozilla
/
a11y
/
Compatibility
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
mscom
/
ProcessRuntime
.
h
"
#
include
"
mozilla
/
mscom
/
Registration
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
RootAccessibleWrap
.
h
"
#
include
"
WinUtils
.
h
"
#
include
<
oaidl
.
h
>
#
if
!
defined
(
STATE_SYSTEM_NORMAL
)
#
define
STATE_SYSTEM_NORMAL
(
0
)
#
endif
namespace
mozilla
{
namespace
a11y
{
static
const
wchar_t
kLazyInstantiatorProp
[
]
=
L
"
mozilla
:
:
a11y
:
:
LazyInstantiator
"
;
already_AddRefed
<
IAccessible
>
LazyInstantiator
:
:
GetRootAccessible
(
HWND
aHwnd
)
{
LazyInstantiator
*
existingInstantiator
=
reinterpret_cast
<
LazyInstantiator
*
>
(
:
:
GetProp
(
aHwnd
kLazyInstantiatorProp
)
)
;
RefPtr
<
IAccessible
>
result
;
if
(
existingInstantiator
)
{
existingInstantiator
-
>
mAllowBlindAggregation
=
false
;
result
=
existingInstantiator
;
return
result
.
forget
(
)
;
}
if
(
!
GetAccService
(
)
)
{
result
=
new
LazyInstantiator
(
aHwnd
)
;
return
result
.
forget
(
)
;
}
a11y
:
:
Accessible
*
rootAcc
=
widget
:
:
WinUtils
:
:
GetRootAccessibleForHWND
(
aHwnd
)
;
if
(
!
rootAcc
)
{
return
nullptr
;
}
if
(
!
rootAcc
-
>
IsRoot
(
)
)
{
rootAcc
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
a11y
:
:
RootAccessibleWrap
*
rootWrap
=
static_cast
<
a11y
:
:
RootAccessibleWrap
*
>
(
rootAcc
)
;
RefPtr
<
IUnknown
>
punk
(
rootWrap
-
>
GetInternalUnknown
(
)
)
;
MOZ_ASSERT
(
punk
)
;
if
(
!
punk
)
{
return
nullptr
;
}
punk
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
void
LazyInstantiator
:
:
EnableBlindAggregation
(
HWND
aHwnd
)
{
LazyInstantiator
*
existingInstantiator
=
reinterpret_cast
<
LazyInstantiator
*
>
(
:
:
GetProp
(
aHwnd
kLazyInstantiatorProp
)
)
;
if
(
!
existingInstantiator
)
{
return
;
}
existingInstantiator
-
>
mAllowBlindAggregation
=
true
;
}
LazyInstantiator
:
:
LazyInstantiator
(
HWND
aHwnd
)
:
mHwnd
(
aHwnd
)
mAllowBlindAggregation
(
false
)
mWeakRootAccWrap
(
nullptr
)
mWeakAccessible
(
nullptr
)
mWeakDispatch
(
nullptr
)
{
MOZ_ASSERT
(
aHwnd
)
;
DebugOnly
<
BOOL
>
setPropOk
=
:
:
SetProp
(
aHwnd
kLazyInstantiatorProp
reinterpret_cast
<
HANDLE
>
(
this
)
)
;
MOZ_ASSERT
(
setPropOk
)
;
}
LazyInstantiator
:
:
~
LazyInstantiator
(
)
{
if
(
mRealRootUnk
)
{
RefPtr
<
IUnknown
>
dummy
(
mWeakRootAccWrap
-
>
Aggregate
(
nullptr
)
)
;
}
ClearProp
(
)
;
}
void
LazyInstantiator
:
:
ClearProp
(
)
{
DebugOnly
<
HANDLE
>
removedProp
=
:
:
RemoveProp
(
mHwnd
kLazyInstantiatorProp
)
;
MOZ_ASSERT
(
!
removedProp
|
|
reinterpret_cast
<
LazyInstantiator
*
>
(
removedProp
.
value
)
=
=
this
)
;
}
DWORD
LazyInstantiator
:
:
GetClientPid
(
const
DWORD
aClientTid
)
{
nsAutoHandle
callingThread
(
:
:
OpenThread
(
THREAD_QUERY_LIMITED_INFORMATION
FALSE
aClientTid
)
)
;
if
(
!
callingThread
)
{
return
0
;
}
return
:
:
GetProcessIdOfThread
(
callingThread
)
;
}
#
define
ALL_VERSIONS
(
(
unsigned
long
long
)
-
1LL
)
struct
DllBlockInfo
{
const
wchar_t
*
mName
;
unsigned
long
long
mUntilVersion
;
}
;
static
const
DllBlockInfo
gBlockedInprocDlls
[
]
=
{
{
L
"
dtvhooks
.
dll
"
MAKE_FILE_VERSION
(
18
1
11
0
)
}
{
L
"
dtvhooks64
.
dll
"
MAKE_FILE_VERSION
(
18
1
11
0
)
}
}
;
static
const
char
*
gBlockedRemoteClients
[
]
=
{
"
tbnotifier
.
exe
"
}
;
bool
LazyInstantiator
:
:
IsBlockedInjection
(
)
{
if
(
PR_GetEnv
(
"
MOZ_DISABLE_ACCESSIBLE_BLOCKLIST
"
)
)
{
return
false
;
}
if
(
Compatibility
:
:
HasKnownNonUiaConsumer
(
)
)
{
return
false
;
}
for
(
size_t
index
=
0
len
=
ArrayLength
(
gBlockedInprocDlls
)
;
index
<
len
;
+
+
index
)
{
const
DllBlockInfo
&
blockedDll
=
gBlockedInprocDlls
[
index
]
;
HMODULE
module
=
:
:
GetModuleHandleW
(
blockedDll
.
mName
)
;
if
(
!
module
)
{
continue
;
}
if
(
blockedDll
.
mUntilVersion
=
=
ALL_VERSIONS
)
{
return
true
;
}
return
Compatibility
:
:
IsModuleVersionLessThan
(
module
blockedDll
.
mUntilVersion
)
;
}
return
false
;
}
bool
LazyInstantiator
:
:
ShouldInstantiate
(
const
DWORD
aClientTid
)
{
if
(
!
aClientTid
)
{
return
!
IsBlockedInjection
(
)
;
}
a11y
:
:
SetInstantiator
(
GetClientPid
(
aClientTid
)
)
;
nsCOMPtr
<
nsIFile
>
clientExe
;
if
(
!
a11y
:
:
GetInstantiator
(
getter_AddRefs
(
clientExe
)
)
)
{
return
true
;
}
nsresult
rv
;
if
(
!
PR_GetEnv
(
"
MOZ_DISABLE_ACCESSIBLE_BLOCKLIST
"
)
)
{
nsAutoString
leafName
;
rv
=
clientExe
-
>
GetLeafName
(
leafName
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
for
(
size_t
i
=
0
len
=
ArrayLength
(
gBlockedRemoteClients
)
;
i
<
len
;
+
+
i
)
{
if
(
leafName
.
EqualsIgnoreCase
(
gBlockedRemoteClients
[
i
]
)
)
{
return
false
;
}
}
}
}
return
true
;
}
RootAccessibleWrap
*
LazyInstantiator
:
:
ResolveRootAccWrap
(
)
{
Accessible
*
acc
=
widget
:
:
WinUtils
:
:
GetRootAccessibleForHWND
(
mHwnd
)
;
if
(
!
acc
|
|
!
acc
-
>
IsRoot
(
)
)
{
return
nullptr
;
}
return
static_cast
<
RootAccessibleWrap
*
>
(
acc
)
;
}
void
LazyInstantiator
:
:
TransplantRefCnt
(
)
{
MOZ_ASSERT
(
mRefCnt
>
0
)
;
MOZ_ASSERT
(
mRealRootUnk
)
;
while
(
mRefCnt
>
0
)
{
mRealRootUnk
.
get
(
)
-
>
AddRef
(
)
;
-
-
mRefCnt
;
}
}
HRESULT
LazyInstantiator
:
:
MaybeResolveRoot
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mWeakAccessible
)
{
return
S_OK
;
}
if
(
GetAccService
(
)
|
|
ShouldInstantiate
(
mscom
:
:
ProcessRuntime
:
:
GetClientThreadId
(
)
)
)
{
mWeakRootAccWrap
=
ResolveRootAccWrap
(
)
;
if
(
!
mWeakRootAccWrap
)
{
return
E_POINTER
;
}
mRealRootUnk
=
mWeakRootAccWrap
-
>
Aggregate
(
static_cast
<
IAccessible
*
>
(
this
)
)
;
if
(
!
mRealRootUnk
)
{
return
E_FAIL
;
}
TransplantRefCnt
(
)
;
HRESULT
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IAccessible
(
void
*
*
)
&
mWeakAccessible
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakAccessible
-
>
Release
(
)
;
ClearProp
(
)
;
return
S_OK
;
}
const
WPARAM
flags
=
0xFFFFFFFFUL
;
LRESULT
lresult
=
:
:
DefWindowProc
(
mHwnd
WM_GETOBJECT
flags
static_cast
<
LPARAM
>
(
OBJID_CLIENT
)
)
;
HRESULT
hr
=
ObjectFromLresult
(
lresult
IID_IAccessible
flags
getter_AddRefs
(
mRealRootUnk
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
!
mRealRootUnk
)
{
return
E_NOTIMPL
;
}
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IAccessible
(
void
*
*
)
&
mWeakAccessible
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakAccessible
-
>
Release
(
)
;
return
S_OK
;
}
#
define
RESOLVE_ROOT
\
{
\
HRESULT
hr
=
MaybeResolveRoot
(
)
;
\
if
(
FAILED
(
hr
)
)
{
\
return
hr
;
\
}
\
}
IMPL_IUNKNOWN_QUERY_HEAD
(
LazyInstantiator
)
IMPL_IUNKNOWN_QUERY_IFACE_AMBIGIOUS
(
IUnknown
IAccessible
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IAccessible
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IDispatch
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IServiceProvider
)
if
(
!
mAllowBlindAggregation
)
{
return
E_NOINTERFACE
;
}
RESOLVE_ROOT
IMPL_IUNKNOWN_QUERY_TAIL_AGGREGATED
(
mRealRootUnk
)
ULONG
LazyInstantiator
:
:
AddRef
(
)
{
if
(
mRealRootUnk
)
{
return
mRealRootUnk
.
get
(
)
-
>
AddRef
(
)
;
}
return
+
+
mRefCnt
;
}
ULONG
LazyInstantiator
:
:
Release
(
)
{
ULONG
result
;
if
(
mRealRootUnk
)
{
result
=
mRealRootUnk
.
get
(
)
-
>
Release
(
)
;
if
(
result
=
=
1
)
{
-
-
result
;
}
}
else
{
result
=
-
-
mRefCnt
;
}
if
(
!
result
)
{
delete
this
;
}
return
result
;
}
HRESULT
LazyInstantiator
:
:
ResolveDispatch
(
)
{
if
(
mWeakDispatch
)
{
return
S_OK
;
}
auto
typelib
=
mscom
:
:
RegisterTypelib
(
L
"
oleacc
.
dll
"
mscom
:
:
RegistrationFlags
:
:
eUseSystemDirectory
)
;
if
(
!
typelib
)
{
return
E_UNEXPECTED
;
}
RefPtr
<
ITypeInfo
>
accTypeInfo
;
HRESULT
hr
=
typelib
-
>
GetTypeInfoForGuid
(
IID_IAccessible
getter_AddRefs
(
accTypeInfo
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
:
:
CreateStdDispatch
(
static_cast
<
IAccessible
*
>
(
this
)
static_cast
<
IAccessible
*
>
(
this
)
accTypeInfo
getter_AddRefs
(
mStdDispatch
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
mStdDispatch
-
>
QueryInterface
(
IID_IDispatch
(
void
*
*
)
&
mWeakDispatch
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakDispatch
-
>
Release
(
)
;
return
S_OK
;
}
#
define
RESOLVE_IDISPATCH
\
{
\
HRESULT
hr
=
ResolveDispatch
(
)
;
\
if
(
FAILED
(
hr
)
)
{
\
return
hr
;
\
}
\
}
HRESULT
LazyInstantiator
:
:
GetTypeInfoCount
(
UINT
*
pctinfo
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetTypeInfoCount
(
pctinfo
)
;
}
HRESULT
LazyInstantiator
:
:
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
ITypeInfo
*
*
ppTInfo
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetTypeInfo
(
iTInfo
lcid
ppTInfo
)
;
}
HRESULT
LazyInstantiator
:
:
GetIDsOfNames
(
REFIID
riid
LPOLESTR
*
rgszNames
UINT
cNames
LCID
lcid
DISPID
*
rgDispId
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetIDsOfNames
(
riid
rgszNames
cNames
lcid
rgDispId
)
;
}
HRESULT
LazyInstantiator
:
:
Invoke
(
DISPID
dispIdMember
REFIID
riid
LCID
lcid
WORD
wFlags
DISPPARAMS
*
pDispParams
VARIANT
*
pVarResult
EXCEPINFO
*
pExcepInfo
UINT
*
puArgErr
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
Invoke
(
dispIdMember
riid
lcid
wFlags
pDispParams
pVarResult
pExcepInfo
puArgErr
)
;
}
HRESULT
LazyInstantiator
:
:
get_accParent
(
IDispatch
*
*
ppdispParent
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accParent
(
ppdispParent
)
;
}
HRESULT
LazyInstantiator
:
:
get_accChildCount
(
long
*
pcountChildren
)
{
if
(
!
pcountChildren
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accChildCount
(
pcountChildren
)
;
}
HRESULT
LazyInstantiator
:
:
get_accChild
(
VARIANT
varChild
IDispatch
*
*
ppdispChild
)
{
if
(
!
ppdispChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accChild
(
varChild
ppdispChild
)
;
}
HRESULT
LazyInstantiator
:
:
get_accName
(
VARIANT
varChild
BSTR
*
pszName
)
{
if
(
!
pszName
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accName
(
varChild
pszName
)
;
}
HRESULT
LazyInstantiator
:
:
get_accValue
(
VARIANT
varChild
BSTR
*
pszValue
)
{
if
(
!
pszValue
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accValue
(
varChild
pszValue
)
;
}
HRESULT
LazyInstantiator
:
:
get_accDescription
(
VARIANT
varChild
BSTR
*
pszDescription
)
{
if
(
!
pszDescription
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accDescription
(
varChild
pszDescription
)
;
}
HRESULT
LazyInstantiator
:
:
get_accRole
(
VARIANT
varChild
VARIANT
*
pvarRole
)
{
if
(
!
pvarRole
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accRole
(
varChild
pvarRole
)
;
}
HRESULT
LazyInstantiator
:
:
get_accState
(
VARIANT
varChild
VARIANT
*
pvarState
)
{
if
(
!
pvarState
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accState
(
varChild
pvarState
)
;
}
HRESULT
LazyInstantiator
:
:
get_accHelp
(
VARIANT
varChild
BSTR
*
pszHelp
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
get_accHelpTopic
(
BSTR
*
pszHelpFile
VARIANT
varChild
long
*
pidTopic
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
*
pszKeyboardShortcut
)
{
if
(
!
pszKeyboardShortcut
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accKeyboardShortcut
(
varChild
pszKeyboardShortcut
)
;
}
HRESULT
LazyInstantiator
:
:
get_accFocus
(
VARIANT
*
pvarChild
)
{
if
(
!
pvarChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accFocus
(
pvarChild
)
;
}
HRESULT
LazyInstantiator
:
:
get_accSelection
(
VARIANT
*
pvarChildren
)
{
if
(
!
pvarChildren
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accSelection
(
pvarChildren
)
;
}
HRESULT
LazyInstantiator
:
:
get_accDefaultAction
(
VARIANT
varChild
BSTR
*
pszDefaultAction
)
{
if
(
!
pszDefaultAction
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accDefaultAction
(
varChild
pszDefaultAction
)
;
}
HRESULT
LazyInstantiator
:
:
accSelect
(
long
flagsSelect
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accSelect
(
flagsSelect
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
accLocation
(
long
*
pxLeft
long
*
pyTop
long
*
pcxWidth
long
*
pcyHeight
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accLocation
(
pxLeft
pyTop
pcxWidth
pcyHeight
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
accNavigate
(
long
navDir
VARIANT
varStart
VARIANT
*
pvarEndUpAt
)
{
if
(
!
pvarEndUpAt
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accNavigate
(
navDir
varStart
pvarEndUpAt
)
;
}
HRESULT
LazyInstantiator
:
:
accHitTest
(
long
xLeft
long
yTop
VARIANT
*
pvarChild
)
{
if
(
!
pvarChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accHitTest
(
xLeft
yTop
pvarChild
)
;
}
HRESULT
LazyInstantiator
:
:
accDoDefaultAction
(
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accDoDefaultAction
(
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
put_accName
(
VARIANT
varChild
BSTR
szName
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
put_accValue
(
VARIANT
varChild
BSTR
szValue
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
QueryService
(
REFGUID
aServiceId
REFIID
aServiceIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
RESOLVE_ROOT
;
RefPtr
<
IServiceProvider
>
servProv
;
HRESULT
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IServiceProvider
getter_AddRefs
(
servProv
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
return
servProv
-
>
QueryService
(
aServiceId
aServiceIid
aOutInterface
)
;
}
}
}
