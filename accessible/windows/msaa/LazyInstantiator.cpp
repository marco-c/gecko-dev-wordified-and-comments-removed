#
include
"
LazyInstantiator
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
mscom
/
MainThreadRuntime
.
h
"
#
include
"
mozilla
/
mscom
/
Registration
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
RootAccessibleWrap
.
h
"
#
include
"
WinUtils
.
h
"
#
if
defined
(
MOZ_TELEMETRY_REPORTING
)
#
include
"
mozilla
/
Telemetry
.
h
"
#
endif
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsExceptionHandler
.
h
"
#
endif
#
include
<
oaidl
.
h
>
#
if
!
defined
(
STATE_SYSTEM_NORMAL
)
#
define
STATE_SYSTEM_NORMAL
(
0
)
#
endif
template
<
>
struct
nsRunnableMethodReceiver
<
mozilla
:
:
a11y
:
:
LazyInstantiator
true
>
{
mozilla
:
:
mscom
:
:
STAUniquePtr
<
mozilla
:
:
a11y
:
:
LazyInstantiator
>
mObj
;
explicit
nsRunnableMethodReceiver
(
mozilla
:
:
a11y
:
:
LazyInstantiator
*
aObj
)
:
mObj
(
aObj
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
aObj
-
>
AddRef
(
)
;
}
~
nsRunnableMethodReceiver
(
)
{
Revoke
(
)
;
}
mozilla
:
:
a11y
:
:
LazyInstantiator
*
Get
(
)
const
{
return
mObj
.
get
(
)
;
}
void
Revoke
(
)
{
mObj
=
nullptr
;
}
}
;
namespace
mozilla
{
namespace
a11y
{
static
const
wchar_t
kLazyInstantiatorProp
[
]
=
L
"
mozilla
:
:
a11y
:
:
LazyInstantiator
"
;
already_AddRefed
<
IAccessible
>
LazyInstantiator
:
:
GetRootAccessible
(
HWND
aHwnd
)
{
LazyInstantiator
*
existingInstantiator
=
reinterpret_cast
<
LazyInstantiator
*
>
(
:
:
GetProp
(
aHwnd
kLazyInstantiatorProp
)
)
;
RefPtr
<
IAccessible
>
result
;
if
(
existingInstantiator
)
{
existingInstantiator
-
>
mAllowBlindAggregation
=
false
;
result
=
existingInstantiator
;
return
result
.
forget
(
)
;
}
if
(
!
GetAccService
(
)
)
{
result
=
new
LazyInstantiator
(
aHwnd
)
;
return
result
.
forget
(
)
;
}
a11y
:
:
Accessible
*
rootAcc
=
widget
:
:
WinUtils
:
:
GetRootAccessibleForHWND
(
aHwnd
)
;
if
(
!
rootAcc
)
{
return
nullptr
;
}
if
(
!
rootAcc
-
>
IsRoot
(
)
)
{
rootAcc
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
a11y
:
:
RootAccessibleWrap
*
rootWrap
=
static_cast
<
a11y
:
:
RootAccessibleWrap
*
>
(
rootAcc
)
;
RefPtr
<
IUnknown
>
punk
(
rootWrap
-
>
GetInternalUnknown
(
)
)
;
MOZ_ASSERT
(
punk
)
;
if
(
!
punk
)
{
return
nullptr
;
}
punk
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
void
LazyInstantiator
:
:
EnableBlindAggregation
(
HWND
aHwnd
)
{
LazyInstantiator
*
existingInstantiator
=
reinterpret_cast
<
LazyInstantiator
*
>
(
:
:
GetProp
(
aHwnd
kLazyInstantiatorProp
)
)
;
if
(
!
existingInstantiator
)
{
return
;
}
existingInstantiator
-
>
mAllowBlindAggregation
=
true
;
}
LazyInstantiator
:
:
LazyInstantiator
(
HWND
aHwnd
)
:
mHwnd
(
aHwnd
)
mAllowBlindAggregation
(
false
)
mWeakRootAccWrap
(
nullptr
)
mWeakAccessible
(
nullptr
)
mWeakDispatch
(
nullptr
)
{
MOZ_ASSERT
(
aHwnd
)
;
DebugOnly
<
BOOL
>
setPropOk
=
:
:
SetProp
(
aHwnd
kLazyInstantiatorProp
reinterpret_cast
<
HANDLE
>
(
this
)
)
;
MOZ_ASSERT
(
setPropOk
)
;
}
LazyInstantiator
:
:
~
LazyInstantiator
(
)
{
if
(
mRealRootUnk
)
{
RefPtr
<
IUnknown
>
dummy
(
mWeakRootAccWrap
-
>
Aggregate
(
nullptr
)
)
;
}
ClearProp
(
)
;
}
void
LazyInstantiator
:
:
ClearProp
(
)
{
DebugOnly
<
HANDLE
>
removedProp
=
:
:
RemoveProp
(
mHwnd
kLazyInstantiatorProp
)
;
MOZ_ASSERT
(
!
removedProp
|
|
reinterpret_cast
<
LazyInstantiator
*
>
(
removedProp
.
value
)
=
=
this
)
;
}
bool
LazyInstantiator
:
:
GetClientExecutableName
(
const
DWORD
aClientTid
nsIFile
*
*
aOutClientExe
)
{
nsAutoHandle
callingThread
(
:
:
OpenThread
(
THREAD_QUERY_LIMITED_INFORMATION
FALSE
aClientTid
)
)
;
if
(
!
callingThread
)
{
return
false
;
}
DWORD
callingPid
=
:
:
GetProcessIdOfThread
(
callingThread
)
;
nsAutoHandle
callingProcess
(
:
:
OpenProcess
(
PROCESS_QUERY_LIMITED_INFORMATION
FALSE
callingPid
)
)
;
if
(
!
callingProcess
)
{
return
false
;
}
DWORD
bufLen
=
MAX_PATH
;
UniquePtr
<
wchar_t
[
]
>
buf
;
while
(
true
)
{
buf
=
MakeUnique
<
wchar_t
[
]
>
(
bufLen
)
;
if
(
:
:
QueryFullProcessImageName
(
callingProcess
0
buf
.
get
(
)
&
bufLen
)
)
{
break
;
}
DWORD
lastError
=
:
:
GetLastError
(
)
;
MOZ_ASSERT
(
lastError
=
=
ERROR_INSUFFICIENT_BUFFER
)
;
if
(
lastError
!
=
ERROR_INSUFFICIENT_BUFFER
)
{
return
false
;
}
bufLen
*
=
2
;
}
nsCOMPtr
<
nsIFile
>
file
;
nsresult
rv
=
NS_NewLocalFile
(
nsDependentString
(
buf
.
get
(
)
bufLen
)
false
getter_AddRefs
(
file
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
file
.
forget
(
aOutClientExe
)
;
return
NS_SUCCEEDED
(
rv
)
;
}
bool
LazyInstantiator
:
:
ShouldInstantiate
(
const
DWORD
aClientTid
)
{
if
(
!
aClientTid
)
{
return
true
;
}
nsCOMPtr
<
nsIFile
>
clientExe
;
if
(
!
GetClientExecutableName
(
aClientTid
getter_AddRefs
(
clientExe
)
)
)
{
#
if
defined
(
MOZ_TELEMETRY_REPORTING
)
AccumulateTelemetry
(
NS_LITERAL_STRING
(
"
(
Failed
to
retrieve
client
image
name
)
"
)
)
;
#
endif
return
true
;
}
#
if
defined
(
MOZ_TELEMETRY_REPORTING
)
|
|
defined
(
MOZ_CRASHREPORTER
)
if
(
!
mTelemetryThread
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
NewRunnableMethod
<
nsCOMPtr
<
nsIFile
>
RefPtr
<
AccumulateRunnable
>
>
(
"
LazyInstantiator
:
:
GatherTelemetry
"
this
&
LazyInstantiator
:
:
GatherTelemetry
clientExe
new
AccumulateRunnable
(
this
)
)
)
;
NS_NewThread
(
getter_AddRefs
(
mTelemetryThread
)
runnable
)
;
}
#
endif
return
true
;
}
#
if
defined
(
MOZ_TELEMETRY_REPORTING
)
|
|
defined
(
MOZ_CRASHREPORTER
)
void
LazyInstantiator
:
:
AppendVersionInfo
(
nsIFile
*
aClientExe
nsAString
&
aStrToAppend
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
nsAutoString
fullPath
;
nsresult
rv
=
aClientExe
-
>
GetPath
(
fullPath
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
DWORD
verInfoSize
=
:
:
GetFileVersionInfoSize
(
fullPath
.
get
(
)
nullptr
)
;
if
(
!
verInfoSize
)
{
return
;
}
auto
verInfoBuf
=
MakeUnique
<
BYTE
[
]
>
(
verInfoSize
)
;
if
(
!
:
:
GetFileVersionInfo
(
fullPath
.
get
(
)
0
verInfoSize
verInfoBuf
.
get
(
)
)
)
{
return
;
}
VS_FIXEDFILEINFO
*
fixedInfo
=
nullptr
;
UINT
fixedInfoLen
=
0
;
if
(
!
:
:
VerQueryValue
(
verInfoBuf
.
get
(
)
L
"
\
\
"
(
LPVOID
*
)
&
fixedInfo
&
fixedInfoLen
)
)
{
return
;
}
uint32_t
major
=
HIWORD
(
fixedInfo
-
>
dwFileVersionMS
)
;
uint32_t
minor
=
LOWORD
(
fixedInfo
-
>
dwFileVersionMS
)
;
uint32_t
patch
=
HIWORD
(
fixedInfo
-
>
dwFileVersionLS
)
;
uint32_t
build
=
LOWORD
(
fixedInfo
-
>
dwFileVersionLS
)
;
aStrToAppend
.
AppendLiteral
(
u
"
|
"
)
;
NS_NAMED_LITERAL_STRING
(
dot
"
.
"
)
;
aStrToAppend
.
AppendInt
(
major
)
;
aStrToAppend
.
Append
(
dot
)
;
aStrToAppend
.
AppendInt
(
minor
)
;
aStrToAppend
.
Append
(
dot
)
;
aStrToAppend
.
AppendInt
(
patch
)
;
aStrToAppend
.
Append
(
dot
)
;
aStrToAppend
.
AppendInt
(
build
)
;
}
void
LazyInstantiator
:
:
GatherTelemetry
(
nsIFile
*
aClientExe
AccumulateRunnable
*
aRunnable
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
nsAutoString
value
;
nsresult
rv
=
aClientExe
-
>
GetLeafName
(
value
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
AppendVersionInfo
(
aClientExe
value
)
;
}
aRunnable
-
>
SetData
(
value
)
;
NS_DispatchToMainThread
(
aRunnable
)
;
}
void
LazyInstantiator
:
:
AccumulateTelemetry
(
const
nsString
&
aValue
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
aValue
.
IsEmpty
(
)
)
{
#
if
defined
(
MOZ_TELEMETRY_REPORTING
)
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
A11Y_INSTANTIATORS
aValue
)
;
#
endif
#
if
defined
(
MOZ_CRASHREPORTER
)
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
AccessibilityClient
"
)
NS_ConvertUTF16toUTF8
(
aValue
)
)
;
#
endif
}
if
(
mTelemetryThread
)
{
mTelemetryThread
-
>
Shutdown
(
)
;
mTelemetryThread
=
nullptr
;
}
}
#
endif
RootAccessibleWrap
*
LazyInstantiator
:
:
ResolveRootAccWrap
(
)
{
Accessible
*
acc
=
widget
:
:
WinUtils
:
:
GetRootAccessibleForHWND
(
mHwnd
)
;
if
(
!
acc
|
|
!
acc
-
>
IsRoot
(
)
)
{
return
nullptr
;
}
return
static_cast
<
RootAccessibleWrap
*
>
(
acc
)
;
}
void
LazyInstantiator
:
:
TransplantRefCnt
(
)
{
MOZ_ASSERT
(
mRefCnt
>
0
)
;
MOZ_ASSERT
(
mRealRootUnk
)
;
while
(
mRefCnt
>
0
)
{
mRealRootUnk
.
get
(
)
-
>
AddRef
(
)
;
-
-
mRefCnt
;
}
}
HRESULT
LazyInstantiator
:
:
MaybeResolveRoot
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mWeakAccessible
)
{
return
S_OK
;
}
if
(
GetAccService
(
)
|
|
ShouldInstantiate
(
mscom
:
:
MainThreadRuntime
:
:
GetClientThreadId
(
)
)
)
{
mWeakRootAccWrap
=
ResolveRootAccWrap
(
)
;
if
(
!
mWeakRootAccWrap
)
{
return
E_POINTER
;
}
mRealRootUnk
=
mWeakRootAccWrap
-
>
Aggregate
(
static_cast
<
IAccessible
*
>
(
this
)
)
;
if
(
!
mRealRootUnk
)
{
return
E_FAIL
;
}
TransplantRefCnt
(
)
;
HRESULT
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IAccessible
(
void
*
*
)
&
mWeakAccessible
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakAccessible
-
>
Release
(
)
;
ClearProp
(
)
;
return
S_OK
;
}
const
WPARAM
flags
=
0xFFFFFFFFUL
;
LRESULT
lresult
=
:
:
DefWindowProc
(
mHwnd
WM_GETOBJECT
flags
static_cast
<
LPARAM
>
(
OBJID_CLIENT
)
)
;
HRESULT
hr
=
ObjectFromLresult
(
lresult
IID_IAccessible
flags
getter_AddRefs
(
mRealRootUnk
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
!
mRealRootUnk
)
{
return
E_NOTIMPL
;
}
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IAccessible
(
void
*
*
)
&
mWeakAccessible
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakAccessible
-
>
Release
(
)
;
return
S_OK
;
}
#
define
RESOLVE_ROOT
\
{
\
HRESULT
hr
=
MaybeResolveRoot
(
)
;
\
if
(
FAILED
(
hr
)
)
{
\
return
hr
;
\
}
\
}
IMPL_IUNKNOWN_QUERY_HEAD
(
LazyInstantiator
)
IMPL_IUNKNOWN_QUERY_IFACE_AMBIGIOUS
(
IUnknown
IAccessible
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IAccessible
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IDispatch
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IServiceProvider
)
if
(
!
mAllowBlindAggregation
)
{
return
E_NOINTERFACE
;
}
RESOLVE_ROOT
IMPL_IUNKNOWN_QUERY_TAIL_AGGREGATED
(
mRealRootUnk
)
ULONG
LazyInstantiator
:
:
AddRef
(
)
{
if
(
mRealRootUnk
)
{
return
mRealRootUnk
.
get
(
)
-
>
AddRef
(
)
;
}
return
+
+
mRefCnt
;
}
ULONG
LazyInstantiator
:
:
Release
(
)
{
ULONG
result
;
if
(
mRealRootUnk
)
{
result
=
mRealRootUnk
.
get
(
)
-
>
Release
(
)
;
if
(
result
=
=
1
)
{
-
-
result
;
}
}
else
{
result
=
-
-
mRefCnt
;
}
if
(
!
result
)
{
delete
this
;
}
return
result
;
}
HRESULT
LazyInstantiator
:
:
ResolveDispatch
(
)
{
if
(
mWeakDispatch
)
{
return
S_OK
;
}
auto
typelib
=
mscom
:
:
RegisterTypelib
(
L
"
oleacc
.
dll
"
mscom
:
:
RegistrationFlags
:
:
eUseSystemDirectory
)
;
if
(
!
typelib
)
{
return
E_UNEXPECTED
;
}
RefPtr
<
ITypeInfo
>
accTypeInfo
;
HRESULT
hr
=
typelib
-
>
GetTypeInfoForGuid
(
IID_IAccessible
getter_AddRefs
(
accTypeInfo
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
:
:
CreateStdDispatch
(
static_cast
<
IAccessible
*
>
(
this
)
static_cast
<
IAccessible
*
>
(
this
)
accTypeInfo
getter_AddRefs
(
mStdDispatch
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
mStdDispatch
-
>
QueryInterface
(
IID_IDispatch
(
void
*
*
)
&
mWeakDispatch
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakDispatch
-
>
Release
(
)
;
return
S_OK
;
}
#
define
RESOLVE_IDISPATCH
\
{
\
HRESULT
hr
=
ResolveDispatch
(
)
;
\
if
(
FAILED
(
hr
)
)
{
\
return
hr
;
\
}
\
}
HRESULT
LazyInstantiator
:
:
GetTypeInfoCount
(
UINT
*
pctinfo
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetTypeInfoCount
(
pctinfo
)
;
}
HRESULT
LazyInstantiator
:
:
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
ITypeInfo
*
*
ppTInfo
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetTypeInfo
(
iTInfo
lcid
ppTInfo
)
;
}
HRESULT
LazyInstantiator
:
:
GetIDsOfNames
(
REFIID
riid
LPOLESTR
*
rgszNames
UINT
cNames
LCID
lcid
DISPID
*
rgDispId
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetIDsOfNames
(
riid
rgszNames
cNames
lcid
rgDispId
)
;
}
HRESULT
LazyInstantiator
:
:
Invoke
(
DISPID
dispIdMember
REFIID
riid
LCID
lcid
WORD
wFlags
DISPPARAMS
*
pDispParams
VARIANT
*
pVarResult
EXCEPINFO
*
pExcepInfo
UINT
*
puArgErr
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
Invoke
(
dispIdMember
riid
lcid
wFlags
pDispParams
pVarResult
pExcepInfo
puArgErr
)
;
}
HRESULT
LazyInstantiator
:
:
get_accParent
(
IDispatch
*
*
ppdispParent
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accParent
(
ppdispParent
)
;
}
HRESULT
LazyInstantiator
:
:
get_accChildCount
(
long
*
pcountChildren
)
{
if
(
!
pcountChildren
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accChildCount
(
pcountChildren
)
;
}
HRESULT
LazyInstantiator
:
:
get_accChild
(
VARIANT
varChild
IDispatch
*
*
ppdispChild
)
{
if
(
!
ppdispChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accChild
(
varChild
ppdispChild
)
;
}
HRESULT
LazyInstantiator
:
:
get_accName
(
VARIANT
varChild
BSTR
*
pszName
)
{
if
(
!
pszName
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accName
(
varChild
pszName
)
;
}
HRESULT
LazyInstantiator
:
:
get_accValue
(
VARIANT
varChild
BSTR
*
pszValue
)
{
if
(
!
pszValue
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accValue
(
varChild
pszValue
)
;
}
HRESULT
LazyInstantiator
:
:
get_accDescription
(
VARIANT
varChild
BSTR
*
pszDescription
)
{
if
(
!
pszDescription
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accDescription
(
varChild
pszDescription
)
;
}
HRESULT
LazyInstantiator
:
:
get_accRole
(
VARIANT
varChild
VARIANT
*
pvarRole
)
{
if
(
!
pvarRole
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accRole
(
varChild
pvarRole
)
;
}
HRESULT
LazyInstantiator
:
:
get_accState
(
VARIANT
varChild
VARIANT
*
pvarState
)
{
if
(
!
pvarState
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accState
(
varChild
pvarState
)
;
}
HRESULT
LazyInstantiator
:
:
get_accHelp
(
VARIANT
varChild
BSTR
*
pszHelp
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
get_accHelpTopic
(
BSTR
*
pszHelpFile
VARIANT
varChild
long
*
pidTopic
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
*
pszKeyboardShortcut
)
{
if
(
!
pszKeyboardShortcut
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accKeyboardShortcut
(
varChild
pszKeyboardShortcut
)
;
}
HRESULT
LazyInstantiator
:
:
get_accFocus
(
VARIANT
*
pvarChild
)
{
if
(
!
pvarChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accFocus
(
pvarChild
)
;
}
HRESULT
LazyInstantiator
:
:
get_accSelection
(
VARIANT
*
pvarChildren
)
{
if
(
!
pvarChildren
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accSelection
(
pvarChildren
)
;
}
HRESULT
LazyInstantiator
:
:
get_accDefaultAction
(
VARIANT
varChild
BSTR
*
pszDefaultAction
)
{
if
(
!
pszDefaultAction
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accDefaultAction
(
varChild
pszDefaultAction
)
;
}
HRESULT
LazyInstantiator
:
:
accSelect
(
long
flagsSelect
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accSelect
(
flagsSelect
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
accLocation
(
long
*
pxLeft
long
*
pyTop
long
*
pcxWidth
long
*
pcyHeight
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accLocation
(
pxLeft
pyTop
pcxWidth
pcyHeight
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
accNavigate
(
long
navDir
VARIANT
varStart
VARIANT
*
pvarEndUpAt
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
accHitTest
(
long
xLeft
long
yTop
VARIANT
*
pvarChild
)
{
if
(
!
pvarChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accHitTest
(
xLeft
yTop
pvarChild
)
;
}
HRESULT
LazyInstantiator
:
:
accDoDefaultAction
(
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accDoDefaultAction
(
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
put_accName
(
VARIANT
varChild
BSTR
szName
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
put_accValue
(
VARIANT
varChild
BSTR
szValue
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
QueryService
(
REFGUID
aServiceId
REFIID
aServiceIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
*
aOutInterface
=
nullptr
;
RESOLVE_ROOT
;
RefPtr
<
IServiceProvider
>
servProv
;
HRESULT
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IServiceProvider
getter_AddRefs
(
servProv
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
return
servProv
-
>
QueryService
(
aServiceId
aServiceIid
aOutInterface
)
;
}
}
}
