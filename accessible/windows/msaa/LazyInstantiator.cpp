#
include
"
LazyInstantiator
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
a11y
/
LocalAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
Compatibility
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
mscom
/
ProcessRuntime
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
include
"
MsaaRootAccessible
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
WinUtils
.
h
"
#
include
"
prenv
.
h
"
#
include
<
oaidl
.
h
>
#
if
!
defined
(
STATE_SYSTEM_NORMAL
)
#
define
STATE_SYSTEM_NORMAL
(
0
)
#
endif
#
define
DLL_BLOCKLIST_ENTRY
(
name
.
.
.
)
{
L
#
#
name
__VA_ARGS__
}
#
define
DLL_BLOCKLIST_STRING_TYPE
const
wchar_t
*
#
include
"
mozilla
/
WindowsDllBlocklistA11yDefs
.
h
"
namespace
mozilla
{
namespace
a11y
{
static
const
wchar_t
kLazyInstantiatorProp
[
]
=
L
"
mozilla
:
:
a11y
:
:
LazyInstantiator
"
;
Maybe
<
bool
>
LazyInstantiator
:
:
sShouldBlockUia
;
template
<
class
T
>
already_AddRefed
<
T
>
LazyInstantiator
:
:
GetRoot
(
HWND
aHwnd
)
{
RefPtr
<
T
>
result
;
if
(
!
GetAccService
(
)
)
{
LazyInstantiator
*
existingInstantiator
=
reinterpret_cast
<
LazyInstantiator
*
>
(
:
:
GetProp
(
aHwnd
kLazyInstantiatorProp
)
)
;
if
(
existingInstantiator
)
{
existingInstantiator
-
>
mAllowBlindAggregation
=
false
;
result
=
existingInstantiator
;
return
result
.
forget
(
)
;
}
result
=
new
LazyInstantiator
(
aHwnd
)
;
return
result
.
forget
(
)
;
}
a11y
:
:
LocalAccessible
*
rootAcc
=
widget
:
:
WinUtils
:
:
GetRootAccessibleForHWND
(
aHwnd
)
;
if
(
!
rootAcc
)
{
return
nullptr
;
}
if
(
!
rootAcc
-
>
IsRoot
(
)
)
{
result
=
MsaaAccessible
:
:
GetFrom
(
rootAcc
)
;
return
result
.
forget
(
)
;
}
auto
msaaRoot
=
static_cast
<
MsaaRootAccessible
*
>
(
MsaaAccessible
:
:
GetFrom
(
rootAcc
)
)
;
RefPtr
<
IUnknown
>
punk
(
msaaRoot
-
>
GetInternalUnknown
(
)
)
;
MOZ_ASSERT
(
punk
)
;
if
(
!
punk
)
{
return
nullptr
;
}
punk
-
>
QueryInterface
(
__uuidof
(
T
)
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
already_AddRefed
<
IAccessible
>
LazyInstantiator
:
:
GetRootAccessible
(
HWND
aHwnd
)
{
return
GetRoot
<
IAccessible
>
(
aHwnd
)
;
}
already_AddRefed
<
IRawElementProviderSimple
>
LazyInstantiator
:
:
GetRootUia
(
HWND
aHwnd
)
{
if
(
!
Compatibility
:
:
IsUiaEnabled
(
)
)
{
return
nullptr
;
}
return
GetRoot
<
IRawElementProviderSimple
>
(
aHwnd
)
;
}
void
LazyInstantiator
:
:
EnableBlindAggregation
(
HWND
aHwnd
)
{
if
(
GetAccService
(
)
)
{
return
;
}
LazyInstantiator
*
existingInstantiator
=
reinterpret_cast
<
LazyInstantiator
*
>
(
:
:
GetProp
(
aHwnd
kLazyInstantiatorProp
)
)
;
if
(
!
existingInstantiator
)
{
return
;
}
existingInstantiator
-
>
mAllowBlindAggregation
=
true
;
}
LazyInstantiator
:
:
LazyInstantiator
(
HWND
aHwnd
)
:
mHwnd
(
aHwnd
)
mAllowBlindAggregation
(
false
)
mWeakMsaaRoot
(
nullptr
)
mWeakAccessible
(
nullptr
)
mWeakDispatch
(
nullptr
)
mWeakUia
(
nullptr
)
{
MOZ_ASSERT
(
aHwnd
)
;
DebugOnly
<
BOOL
>
setPropOk
=
:
:
SetProp
(
aHwnd
kLazyInstantiatorProp
reinterpret_cast
<
HANDLE
>
(
this
)
)
;
MOZ_ASSERT
(
setPropOk
)
;
}
LazyInstantiator
:
:
~
LazyInstantiator
(
)
{
if
(
mRealRootUnk
)
{
RefPtr
<
IUnknown
>
dummy
(
mWeakMsaaRoot
-
>
Aggregate
(
nullptr
)
)
;
}
ClearProp
(
)
;
}
void
LazyInstantiator
:
:
ClearProp
(
)
{
DebugOnly
<
HANDLE
>
removedProp
=
:
:
RemoveProp
(
mHwnd
kLazyInstantiatorProp
)
;
MOZ_ASSERT
(
!
removedProp
|
|
reinterpret_cast
<
LazyInstantiator
*
>
(
removedProp
.
value
)
=
=
this
)
;
}
DWORD
LazyInstantiator
:
:
GetRemoteMsaaClientPid
(
)
{
nsAutoHandle
callingThread
(
:
:
OpenThread
(
THREAD_QUERY_LIMITED_INFORMATION
FALSE
mscom
:
:
ProcessRuntime
:
:
GetClientThreadId
(
)
)
)
;
if
(
!
callingThread
)
{
return
0
;
}
return
:
:
GetProcessIdOfThread
(
callingThread
)
;
}
static
const
char
*
gBlockedRemoteClients
[
]
=
{
"
tbnotifier
.
exe
"
"
flow
.
exe
"
"
rtop_bg
.
exe
"
"
osk
.
exe
"
"
corplink
-
uc
.
exe
"
}
;
bool
LazyInstantiator
:
:
IsBlockedInjection
(
)
{
if
(
PR_GetEnv
(
"
MOZ_DISABLE_ACCESSIBLE_BLOCKLIST
"
)
)
{
return
false
;
}
for
(
size_t
index
=
0
len
=
std
:
:
size
(
gBlockedInprocDlls
)
;
index
<
len
;
+
+
index
)
{
const
DllBlockInfo
&
blockedDll
=
gBlockedInprocDlls
[
index
]
;
HMODULE
module
=
:
:
GetModuleHandleW
(
blockedDll
.
mName
)
;
if
(
!
module
)
{
continue
;
}
LauncherResult
<
ModuleVersion
>
version
=
GetModuleVersion
(
module
)
;
return
version
.
isOk
(
)
&
&
blockedDll
.
IsVersionBlocked
(
version
.
unwrap
(
)
)
;
}
return
false
;
}
bool
LazyInstantiator
:
:
ShouldInstantiate
(
const
DWORD
aClientPid
)
{
a11y
:
:
SetInstantiator
(
aClientPid
)
;
nsCOMPtr
<
nsIFile
>
clientExe
;
if
(
!
a11y
:
:
GetInstantiator
(
getter_AddRefs
(
clientExe
)
)
)
{
return
true
;
}
nsresult
rv
;
if
(
!
PR_GetEnv
(
"
MOZ_DISABLE_ACCESSIBLE_BLOCKLIST
"
)
)
{
nsAutoString
leafName
;
rv
=
clientExe
-
>
GetLeafName
(
leafName
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
for
(
size_t
i
=
0
len
=
std
:
:
size
(
gBlockedRemoteClients
)
;
i
<
len
;
+
+
i
)
{
if
(
leafName
.
EqualsIgnoreCase
(
gBlockedRemoteClients
[
i
]
)
)
{
return
false
;
}
}
}
}
return
true
;
}
bool
LazyInstantiator
:
:
ShouldInstantiate
(
)
{
if
(
Compatibility
:
:
IsA11ySuppressed
(
)
)
{
return
false
;
}
if
(
DWORD
pid
=
GetRemoteMsaaClientPid
(
)
)
{
return
ShouldInstantiate
(
pid
)
;
}
if
(
Compatibility
:
:
HasKnownNonUiaConsumer
(
)
)
{
return
true
;
}
if
(
sShouldBlockUia
.
isNothing
(
)
)
{
AutoTArray
<
DWORD
1
>
uiaPids
;
Compatibility
:
:
GetUiaClientPids
(
uiaPids
)
;
if
(
uiaPids
.
IsEmpty
(
)
)
{
sShouldBlockUia
=
Some
(
false
)
;
}
else
{
for
(
const
DWORD
pid
:
uiaPids
)
{
if
(
ShouldInstantiate
(
pid
)
)
{
sShouldBlockUia
=
Some
(
false
)
;
return
true
;
}
}
sShouldBlockUia
=
Some
(
true
)
;
}
}
if
(
*
sShouldBlockUia
)
{
return
false
;
}
if
(
IsBlockedInjection
(
)
)
{
return
false
;
}
return
true
;
}
MsaaRootAccessible
*
LazyInstantiator
:
:
ResolveMsaaRoot
(
)
{
LocalAccessible
*
acc
=
widget
:
:
WinUtils
:
:
GetRootAccessibleForHWND
(
mHwnd
)
;
if
(
!
acc
|
|
!
acc
-
>
IsRoot
(
)
)
{
return
nullptr
;
}
RefPtr
<
IAccessible
>
ia
;
acc
-
>
GetNativeInterface
(
getter_AddRefs
(
ia
)
)
;
return
static_cast
<
MsaaRootAccessible
*
>
(
ia
.
get
(
)
)
;
}
void
LazyInstantiator
:
:
TransplantRefCnt
(
)
{
MOZ_ASSERT
(
mRefCnt
>
0
)
;
MOZ_ASSERT
(
mRealRootUnk
)
;
while
(
mRefCnt
>
0
)
{
mRealRootUnk
.
get
(
)
-
>
AddRef
(
)
;
-
-
mRefCnt
;
}
}
HRESULT
LazyInstantiator
:
:
MaybeResolveRoot
(
)
{
if
(
mWeakAccessible
)
{
return
S_OK
;
}
if
(
GetAccService
(
)
|
|
ShouldInstantiate
(
)
)
{
mWeakMsaaRoot
=
ResolveMsaaRoot
(
)
;
if
(
!
mWeakMsaaRoot
)
{
return
E_POINTER
;
}
mRealRootUnk
=
mWeakMsaaRoot
-
>
Aggregate
(
static_cast
<
IAccessible
*
>
(
this
)
)
;
if
(
!
mRealRootUnk
)
{
return
E_FAIL
;
}
TransplantRefCnt
(
)
;
HRESULT
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IAccessible
(
void
*
*
)
&
mWeakAccessible
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakAccessible
-
>
Release
(
)
;
if
(
Compatibility
:
:
IsUiaEnabled
(
)
)
{
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IRawElementProviderSimple
(
void
*
*
)
&
mWeakUia
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakUia
-
>
Release
(
)
;
}
ClearProp
(
)
;
return
S_OK
;
}
return
E_FAIL
;
}
#
define
RESOLVE_ROOT
\
{
\
HRESULT
hr
=
MaybeResolveRoot
(
)
;
\
if
(
FAILED
(
hr
)
)
{
\
return
hr
;
\
}
\
}
IMPL_IUNKNOWN_QUERY_HEAD
(
LazyInstantiator
)
if
(
NS_WARN_IF
(
!
NS_IsMainThread
(
)
)
)
{
return
RPC_E_WRONG_THREAD
;
}
IMPL_IUNKNOWN_QUERY_IFACE_AMBIGIOUS
(
IUnknown
IAccessible
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IAccessible
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IDispatch
)
IMPL_IUNKNOWN_QUERY_IFACE
(
IServiceProvider
)
if
(
Compatibility
:
:
IsUiaEnabled
(
)
)
{
IMPL_IUNKNOWN_QUERY_IFACE
(
IRawElementProviderSimple
)
}
if
(
!
mAllowBlindAggregation
)
{
return
E_NOINTERFACE
;
}
if
(
aIID
=
=
IID_IAccIdentity
)
{
return
E_NOINTERFACE
;
}
RESOLVE_ROOT
IMPL_IUNKNOWN_QUERY_TAIL_AGGREGATED
(
mRealRootUnk
)
ULONG
LazyInstantiator
:
:
AddRef
(
)
{
if
(
mRealRootUnk
)
{
return
mRealRootUnk
.
get
(
)
-
>
AddRef
(
)
;
}
return
+
+
mRefCnt
;
}
ULONG
LazyInstantiator
:
:
Release
(
)
{
ULONG
result
;
if
(
mRealRootUnk
)
{
result
=
mRealRootUnk
.
get
(
)
-
>
Release
(
)
;
if
(
result
=
=
1
)
{
-
-
result
;
}
}
else
{
result
=
-
-
mRefCnt
;
}
if
(
!
result
)
{
delete
this
;
}
return
result
;
}
HRESULT
LazyInstantiator
:
:
ResolveDispatch
(
)
{
if
(
mWeakDispatch
)
{
return
S_OK
;
}
RefPtr
<
ITypeInfo
>
accTypeInfo
=
MsaaAccessible
:
:
GetTI
(
LOCALE_USER_DEFAULT
)
;
if
(
!
accTypeInfo
)
{
return
E_UNEXPECTED
;
}
HRESULT
hr
=
:
:
CreateStdDispatch
(
static_cast
<
IAccessible
*
>
(
this
)
static_cast
<
IAccessible
*
>
(
this
)
accTypeInfo
getter_AddRefs
(
mStdDispatch
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
hr
=
mStdDispatch
-
>
QueryInterface
(
IID_IDispatch
(
void
*
*
)
&
mWeakDispatch
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
mWeakDispatch
-
>
Release
(
)
;
return
S_OK
;
}
#
define
RESOLVE_IDISPATCH
\
{
\
HRESULT
hr
=
ResolveDispatch
(
)
;
\
if
(
FAILED
(
hr
)
)
{
\
return
hr
;
\
}
\
}
HRESULT
LazyInstantiator
:
:
GetTypeInfoCount
(
UINT
*
pctinfo
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetTypeInfoCount
(
pctinfo
)
;
}
HRESULT
LazyInstantiator
:
:
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
ITypeInfo
*
*
ppTInfo
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetTypeInfo
(
iTInfo
lcid
ppTInfo
)
;
}
HRESULT
LazyInstantiator
:
:
GetIDsOfNames
(
REFIID
riid
LPOLESTR
*
rgszNames
UINT
cNames
LCID
lcid
DISPID
*
rgDispId
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
GetIDsOfNames
(
riid
rgszNames
cNames
lcid
rgDispId
)
;
}
HRESULT
LazyInstantiator
:
:
Invoke
(
DISPID
dispIdMember
REFIID
riid
LCID
lcid
WORD
wFlags
DISPPARAMS
*
pDispParams
VARIANT
*
pVarResult
EXCEPINFO
*
pExcepInfo
UINT
*
puArgErr
)
{
RESOLVE_IDISPATCH
;
return
mWeakDispatch
-
>
Invoke
(
dispIdMember
riid
lcid
wFlags
pDispParams
pVarResult
pExcepInfo
puArgErr
)
;
}
HRESULT
LazyInstantiator
:
:
get_accParent
(
IDispatch
*
*
ppdispParent
)
{
if
(
!
mWeakAccessible
)
{
return
:
:
CreateStdAccessibleObject
(
mHwnd
OBJID_WINDOW
IID_IAccessible
(
void
*
*
)
ppdispParent
)
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accParent
(
ppdispParent
)
;
}
HRESULT
LazyInstantiator
:
:
get_accChildCount
(
long
*
pcountChildren
)
{
if
(
!
pcountChildren
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accChildCount
(
pcountChildren
)
;
}
HRESULT
LazyInstantiator
:
:
get_accChild
(
VARIANT
varChild
IDispatch
*
*
ppdispChild
)
{
if
(
!
ppdispChild
)
{
return
E_INVALIDARG
;
}
if
(
V_VT
(
&
varChild
)
=
=
VT_I4
&
&
V_I4
(
&
varChild
)
=
=
CHILDID_SELF
)
{
RefPtr
<
IDispatch
>
disp
(
this
)
;
disp
.
forget
(
ppdispChild
)
;
return
S_OK
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accChild
(
varChild
ppdispChild
)
;
}
HRESULT
LazyInstantiator
:
:
get_accName
(
VARIANT
varChild
BSTR
*
pszName
)
{
if
(
!
pszName
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accName
(
varChild
pszName
)
;
}
HRESULT
LazyInstantiator
:
:
get_accValue
(
VARIANT
varChild
BSTR
*
pszValue
)
{
if
(
!
pszValue
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accValue
(
varChild
pszValue
)
;
}
HRESULT
LazyInstantiator
:
:
get_accDescription
(
VARIANT
varChild
BSTR
*
pszDescription
)
{
if
(
!
pszDescription
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accDescription
(
varChild
pszDescription
)
;
}
HRESULT
LazyInstantiator
:
:
get_accRole
(
VARIANT
varChild
VARIANT
*
pvarRole
)
{
if
(
!
pvarRole
)
{
return
E_INVALIDARG
;
}
if
(
V_VT
(
&
varChild
)
=
=
VT_I4
&
&
V_I4
(
&
varChild
)
=
=
CHILDID_SELF
)
{
V_VT
(
pvarRole
)
=
VT_I4
;
V_I4
(
pvarRole
)
=
ROLE_SYSTEM_APPLICATION
;
return
S_OK
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accRole
(
varChild
pvarRole
)
;
}
HRESULT
LazyInstantiator
:
:
get_accState
(
VARIANT
varChild
VARIANT
*
pvarState
)
{
if
(
!
pvarState
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accState
(
varChild
pvarState
)
;
}
HRESULT
LazyInstantiator
:
:
get_accHelp
(
VARIANT
varChild
BSTR
*
pszHelp
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
get_accHelpTopic
(
BSTR
*
pszHelpFile
VARIANT
varChild
long
*
pidTopic
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
*
pszKeyboardShortcut
)
{
if
(
!
pszKeyboardShortcut
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accKeyboardShortcut
(
varChild
pszKeyboardShortcut
)
;
}
HRESULT
LazyInstantiator
:
:
get_accFocus
(
VARIANT
*
pvarChild
)
{
if
(
!
pvarChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accFocus
(
pvarChild
)
;
}
HRESULT
LazyInstantiator
:
:
get_accSelection
(
VARIANT
*
pvarChildren
)
{
if
(
!
pvarChildren
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accSelection
(
pvarChildren
)
;
}
HRESULT
LazyInstantiator
:
:
get_accDefaultAction
(
VARIANT
varChild
BSTR
*
pszDefaultAction
)
{
if
(
!
pszDefaultAction
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
get_accDefaultAction
(
varChild
pszDefaultAction
)
;
}
HRESULT
LazyInstantiator
:
:
accSelect
(
long
flagsSelect
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accSelect
(
flagsSelect
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
accLocation
(
long
*
pxLeft
long
*
pyTop
long
*
pcxWidth
long
*
pcyHeight
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accLocation
(
pxLeft
pyTop
pcxWidth
pcyHeight
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
accNavigate
(
long
navDir
VARIANT
varStart
VARIANT
*
pvarEndUpAt
)
{
if
(
!
pvarEndUpAt
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accNavigate
(
navDir
varStart
pvarEndUpAt
)
;
}
HRESULT
LazyInstantiator
:
:
accHitTest
(
long
xLeft
long
yTop
VARIANT
*
pvarChild
)
{
if
(
!
pvarChild
)
{
return
E_INVALIDARG
;
}
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accHitTest
(
xLeft
yTop
pvarChild
)
;
}
HRESULT
LazyInstantiator
:
:
accDoDefaultAction
(
VARIANT
varChild
)
{
RESOLVE_ROOT
;
return
mWeakAccessible
-
>
accDoDefaultAction
(
varChild
)
;
}
HRESULT
LazyInstantiator
:
:
put_accName
(
VARIANT
varChild
BSTR
szName
)
{
return
E_NOTIMPL
;
}
HRESULT
LazyInstantiator
:
:
put_accValue
(
VARIANT
varChild
BSTR
szValue
)
{
return
E_NOTIMPL
;
}
static
const
GUID
kUnsupportedServices
[
]
=
{
{
0x33f139ee
0xe509
0x47f7
{
0xbf
0x39
0x83
0x76
0x44
0xf7
0x45
0x76
}
}
{
0xFDA075CF
0x7C8B
0x498C
{
0xB5
0x14
0xA9
0xCB
0x52
0x1B
0xBF
0xB4
}
}
{
0x8EDAA462
0x21F4
0x4C87
{
0xA0
0x12
0xB3
0xCD
0xA3
0xAB
0x01
0xFC
}
}
{
0xacd46652
0x829d
0x41cb
{
0xa5
0xfc
0x17
0xac
0xf4
0x36
0x61
0xac
}
}
{
0xb96fdb85
0x7204
0x4724
{
0x84
0x2b
0xc7
0x05
0x9d
0xed
0xb9
0xd0
}
}
{
0x902697FA
0x80E4
0x4560
{
0x80
0x2A
0xA1
0x3F
0x22
0xA6
0x47
0x09
}
}
{
0x3050F1FF
0x98B5
0x11CF
{
0xBB
0x82
0x00
0xAA
0x00
0xBD
0xCE
0x0B
}
}
}
;
HRESULT
LazyInstantiator
:
:
QueryService
(
REFGUID
aServiceId
REFIID
aServiceIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
for
(
const
GUID
&
unsupportedService
:
kUnsupportedServices
)
{
if
(
aServiceId
=
=
unsupportedService
)
{
return
E_NOINTERFACE
;
}
}
*
aOutInterface
=
nullptr
;
RESOLVE_ROOT
;
RefPtr
<
IServiceProvider
>
servProv
;
HRESULT
hr
=
mRealRootUnk
-
>
QueryInterface
(
IID_IServiceProvider
getter_AddRefs
(
servProv
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
return
servProv
-
>
QueryService
(
aServiceId
aServiceIid
aOutInterface
)
;
}
STDMETHODIMP
LazyInstantiator
:
:
get_ProviderOptions
(
__RPC__out
enum
ProviderOptions
*
aOptions
)
{
if
(
!
aOptions
)
{
return
E_INVALIDARG
;
}
*
aOptions
=
uiaRawElmProvider
:
:
kProviderOptions
;
return
S_OK
;
}
STDMETHODIMP
LazyInstantiator
:
:
GetPatternProvider
(
PATTERNID
aPatternId
__RPC__deref_out_opt
IUnknown
*
*
aPatternProvider
)
{
RESOLVE_ROOT
;
return
mWeakUia
-
>
GetPatternProvider
(
aPatternId
aPatternProvider
)
;
}
STDMETHODIMP
LazyInstantiator
:
:
GetPropertyValue
(
PROPERTYID
aPropertyId
__RPC__out
VARIANT
*
aPropertyValue
)
{
RESOLVE_ROOT
;
return
mWeakUia
-
>
GetPropertyValue
(
aPropertyId
aPropertyValue
)
;
}
STDMETHODIMP
LazyInstantiator
:
:
get_HostRawElementProvider
(
__RPC__deref_out_opt
IRawElementProviderSimple
*
*
aRawElmProvider
)
{
if
(
!
aRawElmProvider
)
{
return
E_INVALIDARG
;
}
*
aRawElmProvider
=
nullptr
;
return
UiaHostProviderFromHwnd
(
mHwnd
aRawElmProvider
)
;
}
}
}
