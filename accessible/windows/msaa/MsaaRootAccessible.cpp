#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
MsaaRootAccessible
.
h
"
#
include
"
Relation
.
h
"
#
include
"
RootAccessible
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
RootAccessible
*
MsaaRootAccessible
:
:
RootAcc
(
)
{
return
static_cast
<
RootAccessible
*
>
(
LocalAcc
(
)
)
;
}
HRESULT
MsaaRootAccessible
:
:
InternalQueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
if
(
aIid
=
=
IID_IUnknown
)
{
RefPtr
<
IUnknown
>
punk
(
&
mInternalUnknown
)
;
punk
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
return
MsaaDocAccessible
:
:
QueryInterface
(
aIid
aOutInterface
)
;
}
ULONG
MsaaRootAccessible
:
:
InternalAddRef
(
)
{
return
MsaaDocAccessible
:
:
AddRef
(
)
;
}
ULONG
MsaaRootAccessible
:
:
InternalRelease
(
)
{
return
MsaaDocAccessible
:
:
Release
(
)
;
}
already_AddRefed
<
IUnknown
>
MsaaRootAccessible
:
:
Aggregate
(
IUnknown
*
aOuter
)
{
MOZ_ASSERT
(
mOuter
&
&
(
mOuter
=
=
&
mInternalUnknown
|
|
mOuter
=
=
aOuter
|
|
!
aOuter
)
)
;
if
(
!
aOuter
)
{
mOuter
=
&
mInternalUnknown
;
return
nullptr
;
}
mOuter
=
aOuter
;
return
GetInternalUnknown
(
)
;
}
already_AddRefed
<
IUnknown
>
MsaaRootAccessible
:
:
GetInternalUnknown
(
)
{
RefPtr
<
IUnknown
>
result
(
&
mInternalUnknown
)
;
return
result
.
forget
(
)
;
}
STDMETHODIMP
MsaaRootAccessible
:
:
get_accFocus
(
VARIANT
__RPC_FAR
*
pvarChild
)
{
HRESULT
hr
=
MsaaDocAccessible
:
:
get_accFocus
(
pvarChild
)
;
if
(
FAILED
(
hr
)
|
|
pvarChild
-
>
vt
!
=
VT_EMPTY
|
|
!
IsWin8OrLater
(
)
)
{
return
hr
;
}
if
(
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
{
return
S_FALSE
;
}
dom
:
:
BrowserParent
*
browser
=
dom
:
:
BrowserParent
:
:
GetFocused
(
)
;
if
(
!
browser
)
{
return
hr
;
}
DocAccessibleParent
*
docProxy
=
browser
-
>
GetTopLevelDocAccessible
(
)
;
if
(
!
docProxy
)
{
return
hr
;
}
RefPtr
<
IDispatch
>
docDisp
=
already_AddRefed
(
NativeAccessible
(
docProxy
)
)
;
if
(
!
docDisp
)
{
return
E_FAIL
;
}
RefPtr
<
IAccessible
>
docIa
;
hr
=
docDisp
-
>
QueryInterface
(
IID_IAccessible
(
void
*
*
)
getter_AddRefs
(
docIa
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
MOZ_ASSERT
(
docIa
)
;
hr
=
docIa
-
>
get_accFocus
(
pvarChild
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
pvarChild
-
>
vt
=
=
VT_I4
&
&
pvarChild
-
>
lVal
=
=
CHILDID_SELF
)
{
pvarChild
-
>
vt
=
VT_DISPATCH
;
docDisp
.
forget
(
&
pvarChild
-
>
pdispVal
)
;
}
return
S_OK
;
}
