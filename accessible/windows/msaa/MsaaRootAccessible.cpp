#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
StaticPrefs_accessibility
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
MsaaRootAccessible
.
h
"
#
include
"
Relation
.
h
"
#
include
"
RootAccessible
.
h
"
#
include
"
EnumVariant
.
h
"
#
include
<
oleauto
.
h
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
RootAccessible
*
MsaaRootAccessible
:
:
RootAcc
(
)
{
return
static_cast
<
RootAccessible
*
>
(
LocalAcc
(
)
)
;
}
HRESULT
MsaaRootAccessible
:
:
InternalQueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
if
(
aIid
=
=
IID_IUnknown
)
{
RefPtr
<
IUnknown
>
punk
(
&
mInternalUnknown
)
;
punk
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
if
(
StaticPrefs
:
:
accessibility_uia_enable
(
)
&
&
aIid
=
=
IID_IRawElementProviderFragmentRoot
)
{
RefPtr
<
IRawElementProviderFragmentRoot
>
root
=
this
;
root
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
return
MsaaDocAccessible
:
:
QueryInterface
(
aIid
aOutInterface
)
;
}
ULONG
MsaaRootAccessible
:
:
InternalAddRef
(
)
{
return
MsaaDocAccessible
:
:
AddRef
(
)
;
}
ULONG
MsaaRootAccessible
:
:
InternalRelease
(
)
{
return
MsaaDocAccessible
:
:
Release
(
)
;
}
already_AddRefed
<
IUnknown
>
MsaaRootAccessible
:
:
Aggregate
(
IUnknown
*
aOuter
)
{
MOZ_ASSERT
(
mOuter
&
&
(
mOuter
=
=
&
mInternalUnknown
|
|
mOuter
=
=
aOuter
|
|
!
aOuter
)
)
;
if
(
!
aOuter
)
{
mOuter
=
&
mInternalUnknown
;
return
nullptr
;
}
mOuter
=
aOuter
;
return
GetInternalUnknown
(
)
;
}
already_AddRefed
<
IUnknown
>
MsaaRootAccessible
:
:
GetInternalUnknown
(
)
{
RefPtr
<
IUnknown
>
result
(
&
mInternalUnknown
)
;
return
result
.
forget
(
)
;
}
