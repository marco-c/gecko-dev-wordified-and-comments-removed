#
include
"
RootAccessibleWrap
.
h
"
#
include
"
ChildIDThunk
.
h
"
#
include
"
Compatibility
.
h
"
#
include
"
mozilla
/
mscom
/
interceptor
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsWinUtils
.
h
"
using
namespace
mozilla
:
:
a11y
;
using
namespace
mozilla
:
:
mscom
;
RootAccessibleWrap
:
:
RootAccessibleWrap
(
nsIDocument
*
aDocument
nsIPresShell
*
aPresShell
)
:
RootAccessible
(
aDocument
aPresShell
)
{
}
RootAccessibleWrap
:
:
~
RootAccessibleWrap
(
)
{
}
void
RootAccessibleWrap
:
:
GetNativeInterface
(
void
*
*
aOutAccessible
)
{
MOZ_ASSERT
(
aOutAccessible
)
;
if
(
!
aOutAccessible
)
{
return
;
}
if
(
mInterceptor
&
&
SUCCEEDED
(
mInterceptor
-
>
Resolve
(
IID_IAccessible
aOutAccessible
)
)
)
{
return
;
}
*
aOutAccessible
=
nullptr
;
RefPtr
<
IAccessible
>
rootAccessible
;
RootAccessible
:
:
GetNativeInterface
(
(
void
*
*
)
getter_AddRefs
(
rootAccessible
)
)
;
if
(
!
mozilla
:
:
BrowserTabsRemoteAutostart
(
)
|
|
XRE_IsContentProcess
(
)
)
{
rootAccessible
.
forget
(
aOutAccessible
)
;
return
;
}
RefPtr
<
IInterceptorSink
>
eventSink
(
MakeAndAddRef
<
ChildIDThunk
>
(
)
)
;
RefPtr
<
IAccessible
>
interceptor
;
HRESULT
hr
=
CreateInterceptor
<
IAccessible
>
(
STAUniquePtr
<
IAccessible
>
(
rootAccessible
.
forget
(
)
.
take
(
)
)
eventSink
getter_AddRefs
(
interceptor
)
)
;
if
(
FAILED
(
hr
)
)
{
return
;
}
RefPtr
<
IWeakReferenceSource
>
weakRefSrc
;
hr
=
interceptor
-
>
QueryInterface
(
IID_IWeakReferenceSource
(
void
*
*
)
getter_AddRefs
(
weakRefSrc
)
)
;
if
(
FAILED
(
hr
)
)
{
return
;
}
hr
=
weakRefSrc
-
>
GetWeakReference
(
getter_AddRefs
(
mInterceptor
)
)
;
if
(
FAILED
(
hr
)
)
{
return
;
}
interceptor
.
forget
(
aOutAccessible
)
;
}
void
RootAccessibleWrap
:
:
DocumentActivated
(
DocAccessible
*
aDocument
)
{
if
(
Compatibility
:
:
IsDolphin
(
)
&
&
nsCoreUtils
:
:
IsTabDocument
(
aDocument
-
>
DocumentNode
(
)
)
)
{
uint32_t
count
=
mChildDocuments
.
Length
(
)
;
for
(
uint32_t
idx
=
0
;
idx
<
count
;
idx
+
+
)
{
DocAccessible
*
childDoc
=
mChildDocuments
[
idx
]
;
HWND
childDocHWND
=
static_cast
<
HWND
>
(
childDoc
-
>
GetNativeWindow
(
)
)
;
if
(
childDoc
!
=
aDocument
)
nsWinUtils
:
:
HideNativeWindow
(
childDocHWND
)
;
else
nsWinUtils
:
:
ShowNativeWindow
(
childDocHWND
)
;
}
}
}
