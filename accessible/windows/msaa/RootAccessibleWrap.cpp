#
include
"
RootAccessibleWrap
.
h
"
#
include
"
Compatibility
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
nsWinUtils
.
h
"
using
namespace
mozilla
:
:
a11y
;
RootAccessibleWrap
:
:
RootAccessibleWrap
(
nsIDocument
*
aDocument
nsIPresShell
*
aPresShell
)
:
RootAccessible
(
aDocument
aPresShell
)
mOuter
(
&
mInternalUnknown
)
{
}
RootAccessibleWrap
:
:
~
RootAccessibleWrap
(
)
{
}
HRESULT
RootAccessibleWrap
:
:
InternalQueryInterface
(
REFIID
aIid
void
*
*
aOutInterface
)
{
if
(
!
aOutInterface
)
{
return
E_INVALIDARG
;
}
if
(
aIid
=
=
IID_IUnknown
)
{
RefPtr
<
IUnknown
>
punk
(
&
mInternalUnknown
)
;
punk
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
return
DocAccessibleWrap
:
:
QueryInterface
(
aIid
aOutInterface
)
;
}
ULONG
RootAccessibleWrap
:
:
InternalAddRef
(
)
{
return
DocAccessible
:
:
AddRef
(
)
;
}
ULONG
RootAccessibleWrap
:
:
InternalRelease
(
)
{
return
DocAccessible
:
:
Release
(
)
;
}
already_AddRefed
<
IUnknown
>
RootAccessibleWrap
:
:
Aggregate
(
IUnknown
*
aOuter
)
{
MOZ_ASSERT
(
mOuter
&
&
(
mOuter
=
=
&
mInternalUnknown
|
|
mOuter
=
=
aOuter
|
|
!
aOuter
)
)
;
if
(
!
aOuter
)
{
mOuter
=
&
mInternalUnknown
;
return
nullptr
;
}
mOuter
=
aOuter
;
return
GetInternalUnknown
(
)
;
}
already_AddRefed
<
IUnknown
>
RootAccessibleWrap
:
:
GetInternalUnknown
(
)
{
RefPtr
<
IUnknown
>
result
(
&
mInternalUnknown
)
;
return
result
.
forget
(
)
;
}
void
RootAccessibleWrap
:
:
DocumentActivated
(
DocAccessible
*
aDocument
)
{
if
(
Compatibility
:
:
IsDolphin
(
)
&
&
nsCoreUtils
:
:
IsTabDocument
(
aDocument
-
>
DocumentNode
(
)
)
)
{
uint32_t
count
=
mChildDocuments
.
Length
(
)
;
for
(
uint32_t
idx
=
0
;
idx
<
count
;
idx
+
+
)
{
DocAccessible
*
childDoc
=
mChildDocuments
[
idx
]
;
HWND
childDocHWND
=
static_cast
<
HWND
>
(
childDoc
-
>
GetNativeWindow
(
)
)
;
if
(
childDoc
!
=
aDocument
)
nsWinUtils
:
:
HideNativeWindow
(
childDocHWND
)
;
else
nsWinUtils
:
:
ShowNativeWindow
(
childDocHWND
)
;
}
}
}
