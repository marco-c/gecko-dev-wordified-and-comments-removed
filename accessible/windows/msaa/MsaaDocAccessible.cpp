#
include
"
MsaaDocAccessible
.
h
"
#
include
"
MsaaDocAccessible
.
h
"
#
include
"
DocAccessibleChild
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsWinUtils
.
h
"
#
include
"
Statistics
.
h
"
#
include
"
sdnDocAccessible
.
h
"
#
include
"
Role
.
h
"
#
include
"
ISimpleDOM
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
DocAccessible
*
MsaaDocAccessible
:
:
DocAcc
(
)
{
return
static_cast
<
DocAccessible
*
>
(
LocalAcc
(
)
)
;
}
MsaaDocAccessible
*
MsaaDocAccessible
:
:
GetFrom
(
DocAccessible
*
aDoc
)
{
return
static_cast
<
MsaaDocAccessible
*
>
(
MsaaAccessible
:
:
GetFrom
(
aDoc
)
)
;
}
MsaaDocAccessible
*
MsaaDocAccessible
:
:
GetFrom
(
DocAccessibleParent
*
aDoc
)
{
return
static_cast
<
MsaaDocAccessible
*
>
(
reinterpret_cast
<
MsaaAccessible
*
>
(
aDoc
-
>
GetWrapper
(
)
)
)
;
}
MsaaDocAccessible
*
MsaaDocAccessible
:
:
GetFromOwned
(
Accessible
*
aAcc
)
{
if
(
RemoteAccessible
*
remoteAcc
=
aAcc
-
>
AsRemote
(
)
)
{
DocAccessibleParent
*
doc
=
remoteAcc
-
>
Document
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
return
MsaaDocAccessible
:
:
GetFrom
(
doc
)
;
}
DocAccessible
*
doc
=
aAcc
-
>
AsLocal
(
)
-
>
Document
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
return
MsaaDocAccessible
:
:
GetFrom
(
doc
)
;
}
IMPL_IUNKNOWN_QUERY_HEAD
(
MsaaDocAccessible
)
if
(
aIID
=
=
IID_ISimpleDOMDocument
&
&
LocalAcc
(
)
)
{
statistics
:
:
ISimpleDOMUsed
(
)
;
*
aInstancePtr
=
static_cast
<
ISimpleDOMDocument
*
>
(
new
sdnDocAccessible
(
this
)
)
;
static_cast
<
IUnknown
*
>
(
*
aInstancePtr
)
-
>
AddRef
(
)
;
return
S_OK
;
}
IMPL_IUNKNOWN_QUERY_TAIL_INHERITED
(
ia2AccessibleHypertext
)
STDMETHODIMP
MsaaDocAccessible
:
:
get_accParent
(
IDispatch
__RPC_FAR
*
__RPC_FAR
*
ppdispParent
)
{
if
(
!
mAcc
)
{
return
CO_E_OBJNOTCONNECTED
;
}
if
(
mAcc
-
>
IsRemote
(
)
)
{
DocAccessibleParent
*
remoteDoc
=
mAcc
-
>
AsRemote
(
)
-
>
AsDoc
(
)
;
if
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
&
&
remoteDoc
-
>
IsTopLevel
(
)
)
{
HWND
hwnd
=
remoteDoc
-
>
GetEmulatedWindowHandle
(
)
;
MOZ_ASSERT
(
hwnd
)
;
if
(
hwnd
&
&
SUCCEEDED
(
:
:
AccessibleObjectFromWindow
(
hwnd
OBJID_WINDOW
IID_IAccessible
(
void
*
*
)
ppdispParent
)
)
)
{
return
S_OK
;
}
}
return
MsaaAccessible
:
:
get_accParent
(
ppdispParent
)
;
}
DocAccessible
*
docAcc
=
DocAcc
(
)
;
MOZ_ASSERT
(
docAcc
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
(
!
docAcc
-
>
ParentDocument
(
)
|
|
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
&
&
nsCoreUtils
:
:
IsTopLevelContentDocInProcess
(
docAcc
-
>
DocumentNode
(
)
)
)
)
)
{
HWND
hwnd
=
static_cast
<
HWND
>
(
docAcc
-
>
GetNativeWindow
(
)
)
;
if
(
hwnd
&
&
!
docAcc
-
>
ParentDocument
(
)
)
{
nsIFrame
*
frame
=
docAcc
-
>
GetFrame
(
)
;
if
(
frame
)
{
nsIWidget
*
widget
=
frame
-
>
GetNearestWidget
(
)
;
if
(
widget
-
>
GetWindowType
(
)
=
=
widget
:
:
WindowType
:
:
Child
&
&
!
widget
-
>
GetParent
(
)
)
{
HWND
parentHwnd
=
:
:
GetParent
(
hwnd
)
;
if
(
parentHwnd
)
{
MOZ_ASSERT
(
:
:
GetWindowLongW
(
parentHwnd
GWL_STYLE
)
&
WS_POPUP
"
Parent
HWND
should
be
a
popup
!
"
)
;
hwnd
=
parentHwnd
;
}
}
}
}
if
(
hwnd
&
&
SUCCEEDED
(
:
:
AccessibleObjectFromWindow
(
hwnd
OBJID_WINDOW
IID_IAccessible
(
void
*
*
)
ppdispParent
)
)
)
{
return
S_OK
;
}
}
return
MsaaAccessible
:
:
get_accParent
(
ppdispParent
)
;
}
STDMETHODIMP
MsaaDocAccessible
:
:
get_accValue
(
VARIANT
aVarChild
BSTR
__RPC_FAR
*
aValue
)
{
if
(
!
aValue
)
return
E_INVALIDARG
;
*
aValue
=
nullptr
;
HRESULT
hr
=
MsaaAccessible
:
:
get_accValue
(
aVarChild
aValue
)
;
if
(
FAILED
(
hr
)
|
|
*
aValue
|
|
aVarChild
.
lVal
!
=
CHILDID_SELF
)
return
hr
;
MOZ_ASSERT
(
mAcc
)
;
roles
:
:
Role
role
=
mAcc
-
>
Role
(
)
;
if
(
role
!
=
roles
:
:
DOCUMENT
&
&
role
!
=
roles
:
:
APPLICATION
&
&
role
!
=
roles
:
:
DIALOG
&
&
role
!
=
roles
:
:
ALERT
&
&
role
!
=
roles
:
:
NON_NATIVE_DOCUMENT
)
return
hr
;
nsAutoString
url
;
nsAccUtils
:
:
DocumentURL
(
mAcc
url
)
;
if
(
url
.
IsEmpty
(
)
)
return
S_FALSE
;
*
aValue
=
:
:
SysAllocStringLen
(
url
.
get
(
)
url
.
Length
(
)
)
;
return
*
aValue
?
S_OK
:
E_OUTOFMEMORY
;
}
