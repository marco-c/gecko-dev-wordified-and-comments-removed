#
include
"
nsWinUtils
.
h
"
#
include
"
Compatibility
.
h
"
#
include
"
DocAccessible
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsArrayUtils
.
h
"
#
include
"
nsIArray
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
ProxyWrappers
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
using
mozilla
:
:
dom
:
:
Element
;
const
wchar_t
*
kPropNameTabContent
=
L
"
AccessibleTabWindow
"
;
static
LRESULT
CALLBACK
WindowProc
(
HWND
hWnd
UINT
msg
WPARAM
wParam
LPARAM
lParam
)
;
bool
nsWinUtils
:
:
sWindowEmulationStarted
=
false
;
already_AddRefed
<
nsIDOMCSSStyleDeclaration
>
nsWinUtils
:
:
GetComputedStyleDeclaration
(
nsIContent
*
aContent
)
{
nsIContent
*
elm
=
nsCoreUtils
:
:
GetDOMElementFor
(
aContent
)
;
if
(
!
elm
)
return
nullptr
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
elm
-
>
OwnerDoc
(
)
-
>
GetInnerWindow
(
)
;
if
(
!
window
)
return
nullptr
;
ErrorResult
dummy
;
nsCOMPtr
<
nsICSSDeclaration
>
cssDecl
;
nsCOMPtr
<
Element
>
domElement
(
do_QueryInterface
(
elm
)
)
;
cssDecl
=
window
-
>
GetComputedStyle
(
*
domElement
EmptyString
(
)
dummy
)
;
nsCOMPtr
<
nsIDOMCSSStyleDeclaration
>
domDecl
=
do_QueryInterface
(
cssDecl
)
;
dummy
.
SuppressException
(
)
;
return
domDecl
.
forget
(
)
;
}
bool
nsWinUtils
:
:
MaybeStartWindowEmulation
(
)
{
if
(
IPCAccessibilityActive
(
)
)
return
false
;
if
(
Compatibility
:
:
IsJAWS
(
)
|
|
Compatibility
:
:
IsWE
(
)
|
|
Compatibility
:
:
IsDolphin
(
)
|
|
XRE_IsContentProcess
(
)
)
{
RegisterNativeWindow
(
kClassNameTabContent
)
;
sWindowEmulationStarted
=
true
;
return
true
;
}
return
false
;
}
void
nsWinUtils
:
:
ShutdownWindowEmulation
(
)
{
if
(
IsWindowEmulationStarted
(
)
)
{
:
:
UnregisterClassW
(
kClassNameTabContent
GetModuleHandle
(
nullptr
)
)
;
sWindowEmulationStarted
=
false
;
}
}
void
nsWinUtils
:
:
RegisterNativeWindow
(
LPCWSTR
aWindowClass
)
{
WNDCLASSW
wc
;
wc
.
style
=
CS_GLOBALCLASS
;
wc
.
lpfnWndProc
=
WindowProc
;
wc
.
cbClsExtra
=
0
;
wc
.
cbWndExtra
=
0
;
wc
.
hInstance
=
GetModuleHandle
(
nullptr
)
;
wc
.
hIcon
=
nullptr
;
wc
.
hCursor
=
nullptr
;
wc
.
hbrBackground
=
nullptr
;
wc
.
lpszMenuName
=
nullptr
;
wc
.
lpszClassName
=
aWindowClass
;
:
:
RegisterClassW
(
&
wc
)
;
}
HWND
nsWinUtils
:
:
CreateNativeWindow
(
LPCWSTR
aWindowClass
HWND
aParentWnd
int
aX
int
aY
int
aWidth
int
aHeight
bool
aIsActive
)
{
HWND
hwnd
=
:
:
CreateWindowExW
(
WS_EX_TRANSPARENT
aWindowClass
L
"
NetscapeDispatchWnd
"
WS_CHILD
|
(
aIsActive
?
WS_VISIBLE
:
0
)
aX
aY
aWidth
aHeight
aParentWnd
nullptr
GetModuleHandle
(
nullptr
)
nullptr
)
;
if
(
hwnd
)
{
:
:
SetPropW
(
hwnd
kPropNameTabContent
(
HANDLE
)
1
)
;
}
return
hwnd
;
}
void
nsWinUtils
:
:
ShowNativeWindow
(
HWND
aWnd
)
{
:
:
ShowWindow
(
aWnd
SW_SHOW
)
;
}
void
nsWinUtils
:
:
HideNativeWindow
(
HWND
aWnd
)
{
:
:
SetWindowPos
(
aWnd
nullptr
0
0
0
0
SWP_HIDEWINDOW
|
SWP_NOSIZE
|
SWP_NOMOVE
|
SWP_NOZORDER
|
SWP_NOACTIVATE
)
;
}
LRESULT
CALLBACK
WindowProc
(
HWND
hWnd
UINT
msg
WPARAM
wParam
LPARAM
lParam
)
{
switch
(
msg
)
{
case
WM_GETOBJECT
:
{
int32_t
objId
=
static_cast
<
DWORD
>
(
lParam
)
;
if
(
objId
=
=
OBJID_CLIENT
)
{
IAccessible
*
msaaAccessible
=
nullptr
;
DocAccessible
*
document
=
reinterpret_cast
<
DocAccessible
*
>
(
:
:
GetPropW
(
hWnd
kPropNameDocAcc
)
)
;
if
(
document
)
{
document
-
>
GetNativeInterface
(
(
void
*
*
)
&
msaaAccessible
)
;
}
else
{
DocAccessibleParent
*
docParent
=
static_cast
<
DocAccessibleParent
*
>
(
:
:
GetPropW
(
hWnd
kPropNameDocAccParent
)
)
;
if
(
docParent
)
{
auto
wrapper
=
WrapperFor
(
docParent
)
;
wrapper
-
>
GetNativeInterface
(
(
void
*
*
)
&
msaaAccessible
)
;
}
}
if
(
msaaAccessible
)
{
LRESULT
result
=
:
:
LresultFromObject
(
IID_IAccessible
wParam
msaaAccessible
)
;
msaaAccessible
-
>
Release
(
)
;
return
result
;
}
}
return
0
;
}
case
WM_NCHITTEST
:
{
LRESULT
lRet
=
:
:
DefWindowProc
(
hWnd
msg
wParam
lParam
)
;
if
(
HTCLIENT
=
=
lRet
)
lRet
=
HTTRANSPARENT
;
return
lRet
;
}
}
return
:
:
DefWindowProcW
(
hWnd
msg
wParam
lParam
)
;
}
