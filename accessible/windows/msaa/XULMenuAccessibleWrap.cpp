#
include
"
AccessibleWrap
.
h
"
#
include
"
EnumVariant
.
h
"
#
include
"
XULMenuAccessibleWrap
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
using
namespace
mozilla
:
:
a11y
;
XULMenuitemAccessibleWrap
:
:
XULMenuitemAccessibleWrap
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
XULMenuitemAccessible
(
aContent
aDoc
)
{
}
ENameValueFlag
XULMenuitemAccessibleWrap
:
:
Name
(
nsString
&
aName
)
const
{
XULMenuitemAccessible
:
:
Name
(
aName
)
;
if
(
aName
.
IsEmpty
(
)
)
return
eNameOK
;
nsAutoString
accel
;
if
(
mContent
-
>
IsElement
(
)
)
{
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
acceltext
accel
)
;
}
if
(
!
accel
.
IsEmpty
(
)
)
aName
+
=
NS_LITERAL_STRING
(
"
\
t
"
)
+
accel
;
return
eNameOK
;
}
STDMETHODIMP
XULMenuitemAccessibleWrap
:
:
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszKeyboardShortcut
)
{
if
(
!
pszKeyboardShortcut
)
return
E_INVALIDARG
;
*
pszKeyboardShortcut
=
nullptr
;
if
(
varChild
.
vt
!
=
VT_I4
|
|
varChild
.
lVal
!
=
CHILDID_SELF
)
{
return
AccessibleWrap
:
:
get_accKeyboardShortcut
(
varChild
pszKeyboardShortcut
)
;
}
KeyBinding
keyBinding
=
AccessKey
(
)
;
if
(
keyBinding
.
IsEmpty
(
)
)
{
return
S_FALSE
;
}
nsAutoString
shortcut
;
keyBinding
.
ToString
(
shortcut
)
;
*
pszKeyboardShortcut
=
:
:
SysAllocStringLen
(
shortcut
.
get
(
)
shortcut
.
Length
(
)
)
;
return
*
pszKeyboardShortcut
?
S_OK
:
E_OUTOFMEMORY
;
}
