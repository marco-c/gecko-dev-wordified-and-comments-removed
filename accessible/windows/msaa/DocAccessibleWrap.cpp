#
include
"
DocAccessibleWrap
.
h
"
#
include
"
Compatibility
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
DocAccessibleChild
.
h
"
#
include
"
nsWinUtils
.
h
"
#
include
"
RootAccessible
.
h
"
#
include
"
sdnDocAccessible
.
h
"
#
include
"
Statistics
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
DocAccessibleWrap
:
:
DocAccessibleWrap
(
dom
:
:
Document
*
aDocument
PresShell
*
aPresShell
)
:
DocAccessible
(
aDocument
aPresShell
)
mHWND
(
nullptr
)
{
}
DocAccessibleWrap
:
:
~
DocAccessibleWrap
(
)
{
}
void
DocAccessibleWrap
:
:
Shutdown
(
)
{
if
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
)
{
if
(
mDocFlags
&
eTopLevelContentDocInProcess
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
HWND
hWnd
=
static_cast
<
HWND
>
(
mHWND
)
;
:
:
RemovePropW
(
hWnd
kPropNameDocAcc
)
;
:
:
DestroyWindow
(
hWnd
)
;
}
mHWND
=
nullptr
;
}
DocAccessible
:
:
Shutdown
(
)
;
}
void
*
DocAccessibleWrap
:
:
GetNativeWindow
(
)
const
{
if
(
mHWND
)
{
return
mHWND
;
}
return
DocAccessible
:
:
GetNativeWindow
(
)
;
}
void
DocAccessibleWrap
:
:
DoInitialUpdate
(
)
{
DocAccessible
:
:
DoInitialUpdate
(
)
;
if
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
)
{
if
(
mDocFlags
&
eTopLevelContentDocInProcess
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
a11y
:
:
RootAccessible
*
rootDocument
=
RootAccessible
(
)
;
bool
isActive
=
true
;
LayoutDeviceIntRect
rect
(
CW_USEDEFAULT
CW_USEDEFAULT
0
0
)
;
if
(
Compatibility
:
:
IsDolphin
(
)
)
{
rect
=
Bounds
(
)
;
LayoutDeviceIntRect
rootRect
=
rootDocument
-
>
Bounds
(
)
;
rect
.
MoveToX
(
rootRect
.
X
(
)
-
rect
.
X
(
)
)
;
rect
.
MoveByY
(
-
rootRect
.
Y
(
)
)
;
auto
*
bc
=
mDocumentNode
-
>
GetBrowsingContext
(
)
;
isActive
=
bc
&
&
bc
-
>
IsActive
(
)
;
}
RefPtr
<
DocAccessibleWrap
>
self
(
this
)
;
nsWinUtils
:
:
NativeWindowCreateProc
onCreate
(
[
self
]
(
HWND
aHwnd
)
-
>
void
{
:
:
SetPropW
(
aHwnd
kPropNameDocAcc
reinterpret_cast
<
HANDLE
>
(
self
.
get
(
)
)
)
;
}
)
;
HWND
parentWnd
=
reinterpret_cast
<
HWND
>
(
rootDocument
-
>
GetNativeWindow
(
)
)
;
mHWND
=
nsWinUtils
:
:
CreateNativeWindow
(
kClassNameTabContent
parentWnd
rect
.
X
(
)
rect
.
Y
(
)
rect
.
Width
(
)
rect
.
Height
(
)
isActive
&
onCreate
)
;
}
else
{
DocAccessible
*
parentDocument
=
ParentDocument
(
)
;
if
(
parentDocument
)
mHWND
=
parentDocument
-
>
GetNativeWindow
(
)
;
}
}
}
