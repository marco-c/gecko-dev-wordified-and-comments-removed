#
include
"
MsaaAccessible
.
h
"
#
include
"
mozilla
/
dom
/
BrowserBridgeParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
sdnAccessible
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
MsaaIdGenerator
MsaaAccessible
:
:
sIDGen
;
MsaaAccessible
:
:
MsaaAccessible
(
)
:
mID
(
kNoID
)
{
}
MsaaAccessible
:
:
~
MsaaAccessible
(
)
{
if
(
mID
!
=
kNoID
)
{
sIDGen
.
ReleaseID
(
WrapNotNull
(
this
)
)
;
}
}
void
MsaaAccessible
:
:
SetID
(
uint32_t
aID
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
static_cast
<
AccessibleWrap
*
>
(
this
)
-
>
IsProxy
(
)
)
;
mID
=
aID
;
}
int32_t
MsaaAccessible
:
:
GetChildIDFor
(
LocalAccessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
return
0
;
}
if
(
aAccessible
-
>
IsProxy
(
)
)
{
const
uint32_t
id
=
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
MOZ_ASSERT
(
id
!
=
kNoID
)
;
return
id
;
}
if
(
!
aAccessible
-
>
Document
(
)
)
return
0
;
uint32_t
*
id
=
&
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
if
(
*
id
!
=
kNoID
)
return
*
id
;
*
id
=
sIDGen
.
GetID
(
)
;
MOZ_ASSERT
(
!
aAccessible
-
>
IsProxy
(
)
)
;
DocAccessibleWrap
*
doc
=
static_cast
<
DocAccessibleWrap
*
>
(
aAccessible
-
>
Document
(
)
)
;
doc
-
>
AddID
(
*
id
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
)
;
return
*
id
;
}
uint32_t
MsaaAccessible
:
:
GetContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
return
sIDGen
.
GetContentProcessIDFor
(
aIPCContentId
)
;
}
void
MsaaAccessible
:
:
ReleaseContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
sIDGen
.
ReleaseContentProcessIDFor
(
aIPCContentId
)
;
}
void
MsaaAccessible
:
:
AssignChildIDTo
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
aSdnAcc
-
>
SetUniqueID
(
sIDGen
.
GetID
(
)
)
;
}
void
MsaaAccessible
:
:
ReleaseChildID
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
sIDGen
.
ReleaseID
(
aSdnAcc
)
;
}
AccessibleWrap
*
MsaaAccessible
:
:
LocalAcc
(
)
{
return
static_cast
<
AccessibleWrap
*
>
(
this
)
;
}
HRESULT
MsaaAccessible
:
:
ResolveChild
(
const
VARIANT
&
aVarChild
IAccessible
*
*
aOutInterface
)
{
MOZ_ASSERT
(
aOutInterface
)
;
*
aOutInterface
=
nullptr
;
if
(
aVarChild
.
vt
!
=
VT_I4
)
{
return
E_INVALIDARG
;
}
if
(
LocalAcc
(
)
-
>
IsDefunct
(
)
)
{
return
CO_E_OBJNOTCONNECTED
;
}
if
(
aVarChild
.
lVal
=
=
CHILDID_SELF
)
{
return
S_OK
;
}
bool
isDefunct
=
false
;
RefPtr
<
IAccessible
>
accessible
=
GetIAccessibleFor
(
aVarChild
&
isDefunct
)
;
if
(
!
accessible
)
{
return
E_INVALIDARG
;
}
if
(
isDefunct
)
{
return
CO_E_OBJNOTCONNECTED
;
}
accessible
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
static
LocalAccessible
*
GetAccessibleInSubtree
(
DocAccessible
*
aDoc
uint32_t
aID
)
{
LocalAccessible
*
child
=
static_cast
<
DocAccessibleWrap
*
>
(
aDoc
)
-
>
GetAccessibleByID
(
aID
)
;
if
(
child
)
return
child
;
uint32_t
childDocCount
=
aDoc
-
>
ChildDocumentCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
childDocCount
;
i
+
+
)
{
child
=
GetAccessibleInSubtree
(
aDoc
-
>
GetChildDocumentAt
(
i
)
aID
)
;
if
(
child
)
return
child
;
}
return
nullptr
;
}
static
already_AddRefed
<
IDispatch
>
GetProxiedAccessibleInSubtree
(
const
DocAccessibleParent
*
aDoc
const
VARIANT
&
aVarChild
)
{
auto
wrapper
=
static_cast
<
DocRemoteAccessibleWrap
*
>
(
WrapperFor
(
aDoc
)
)
;
RefPtr
<
IAccessible
>
comProxy
;
int32_t
docWrapperChildId
=
MsaaAccessible
:
:
GetChildIDFor
(
wrapper
)
;
if
(
aDoc
-
>
IsTopLevelInContentProcess
(
)
)
{
wrapper
-
>
GetNativeInterface
(
getter_AddRefs
(
comProxy
)
)
;
}
else
{
auto
tab
=
static_cast
<
dom
:
:
BrowserParent
*
>
(
aDoc
-
>
Manager
(
)
)
;
MOZ_ASSERT
(
tab
)
;
DocAccessibleParent
*
topLevelDoc
=
tab
-
>
GetTopLevelDocAccessible
(
)
;
MOZ_ASSERT
(
topLevelDoc
&
&
topLevelDoc
-
>
IsTopLevelInContentProcess
(
)
)
;
VARIANT
docId
=
{
{
{
VT_I4
}
}
}
;
docId
.
lVal
=
docWrapperChildId
;
RefPtr
<
IDispatch
>
disp
=
GetProxiedAccessibleInSubtree
(
topLevelDoc
docId
)
;
if
(
!
disp
)
{
return
nullptr
;
}
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
comProxy
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
}
MOZ_ASSERT
(
comProxy
)
;
if
(
!
comProxy
)
{
return
nullptr
;
}
if
(
docWrapperChildId
=
=
aVarChild
.
lVal
)
{
return
comProxy
.
forget
(
)
;
}
RefPtr
<
IDispatch
>
disp
;
if
(
FAILED
(
comProxy
-
>
get_accChild
(
aVarChild
getter_AddRefs
(
disp
)
)
)
)
{
return
nullptr
;
}
return
disp
.
forget
(
)
;
}
already_AddRefed
<
IAccessible
>
MsaaAccessible
:
:
GetIAccessibleFor
(
const
VARIANT
&
aVarChild
bool
*
aIsDefunct
)
{
if
(
aVarChild
.
vt
!
=
VT_I4
)
return
nullptr
;
VARIANT
varChild
=
aVarChild
;
MOZ_ASSERT
(
aIsDefunct
)
;
*
aIsDefunct
=
false
;
RefPtr
<
IAccessible
>
result
;
AccessibleWrap
*
localAcc
=
LocalAcc
(
)
;
if
(
varChild
.
lVal
=
=
CHILDID_SELF
)
{
*
aIsDefunct
=
localAcc
-
>
IsDefunct
(
)
;
if
(
*
aIsDefunct
)
{
return
nullptr
;
}
localAcc
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
if
(
result
)
{
return
result
.
forget
(
)
;
}
if
(
!
localAcc
-
>
IsProxy
(
)
)
{
return
nullptr
;
}
varChild
.
lVal
=
GetExistingID
(
)
;
}
if
(
varChild
.
ulVal
!
=
GetExistingID
(
)
&
&
(
localAcc
-
>
IsProxy
(
)
?
nsAccUtils
:
:
MustPrune
(
localAcc
-
>
Proxy
(
)
)
:
nsAccUtils
:
:
MustPrune
(
localAcc
)
)
)
{
return
nullptr
;
}
if
(
XRE_IsParentProcess
(
)
&
&
!
localAcc
-
>
IsProxy
(
)
&
&
varChild
.
lVal
<
0
&
&
!
sIDGen
.
IsChromeID
(
varChild
.
lVal
)
)
{
if
(
!
localAcc
-
>
IsRootForHWND
(
)
)
{
return
nullptr
;
}
return
GetRemoteIAccessibleFor
(
varChild
)
;
}
if
(
varChild
.
lVal
>
0
)
{
MOZ_ASSERT
(
!
localAcc
-
>
IsProxy
(
)
)
;
LocalAccessible
*
xpAcc
=
localAcc
-
>
LocalChildAt
(
varChild
.
lVal
-
1
)
;
if
(
!
xpAcc
)
{
return
nullptr
;
}
*
aIsDefunct
=
xpAcc
-
>
IsDefunct
(
)
;
static_cast
<
AccessibleWrap
*
>
(
xpAcc
)
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
if
(
!
localAcc
-
>
IsProxy
(
)
)
{
DocAccessible
*
document
=
localAcc
-
>
Document
(
)
;
LocalAccessible
*
child
=
GetAccessibleInSubtree
(
document
static_cast
<
uint32_t
>
(
varChild
.
lVal
)
)
;
if
(
child
&
&
localAcc
-
>
IsDoc
(
)
)
{
*
aIsDefunct
=
child
-
>
IsDefunct
(
)
;
static_cast
<
AccessibleWrap
*
>
(
child
)
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
LocalAccessible
*
parent
=
child
;
while
(
parent
&
&
parent
!
=
document
)
{
if
(
parent
=
=
localAcc
)
{
*
aIsDefunct
=
child
-
>
IsDefunct
(
)
;
static_cast
<
AccessibleWrap
*
>
(
child
)
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
parent
=
parent
-
>
LocalParent
(
)
;
}
}
if
(
localAcc
-
>
IsProxy
(
)
)
{
DocAccessibleParent
*
proxyDoc
=
localAcc
-
>
Proxy
(
)
-
>
Document
(
)
;
RefPtr
<
IDispatch
>
disp
=
GetProxiedAccessibleInSubtree
(
proxyDoc
varChild
)
;
if
(
!
disp
)
{
return
nullptr
;
}
MOZ_ASSERT
(
mscom
:
:
IsProxy
(
disp
)
)
;
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
result
.
forget
(
)
;
}
return
nullptr
;
}
template
<
typename
Callback
>
static
bool
VisitDocAccessibleParentDescendantsAtTopLevelInContentProcess
(
dom
:
:
BrowserParent
*
aBrowser
Callback
aCallback
)
{
const
auto
&
bridges
=
aBrowser
-
>
ManagedPBrowserBridgeParent
(
)
;
return
std
:
:
all_of
(
bridges
.
cbegin
(
)
bridges
.
cend
(
)
[
&
]
(
const
auto
&
key
)
{
auto
*
bridge
=
static_cast
<
dom
:
:
BrowserBridgeParent
*
>
(
key
)
;
dom
:
:
BrowserParent
*
childBrowser
=
bridge
-
>
GetBrowserParent
(
)
;
DocAccessibleParent
*
childDocAcc
=
childBrowser
-
>
GetTopLevelDocAccessible
(
)
;
if
(
!
childDocAcc
|
|
childDocAcc
-
>
IsShutdown
(
)
)
{
return
true
;
}
if
(
!
aCallback
(
childDocAcc
)
)
{
return
false
;
}
if
(
!
VisitDocAccessibleParentDescendantsAtTopLevelInContentProcess
(
childBrowser
aCallback
)
)
{
return
false
;
}
return
true
;
}
)
;
}
already_AddRefed
<
IAccessible
>
MsaaAccessible
:
:
GetRemoteIAccessibleFor
(
const
VARIANT
&
aVarChild
)
{
a11y
:
:
RootAccessible
*
root
=
LocalAcc
(
)
-
>
RootAccessible
(
)
;
const
nsTArray
<
DocAccessibleParent
*
>
*
remoteDocs
=
DocManager
:
:
TopLevelRemoteDocs
(
)
;
if
(
!
remoteDocs
)
{
return
nullptr
;
}
RefPtr
<
IAccessible
>
result
;
for
(
size_t
i
=
0
;
i
<
remoteDocs
-
>
Length
(
)
;
i
+
+
)
{
DocAccessibleParent
*
topRemoteDoc
=
remoteDocs
-
>
ElementAt
(
i
)
;
LocalAccessible
*
outerDoc
=
topRemoteDoc
-
>
OuterDocOfRemoteBrowser
(
)
;
if
(
!
outerDoc
)
{
continue
;
}
if
(
outerDoc
-
>
RootAccessible
(
)
!
=
root
)
{
continue
;
}
RefPtr
<
IDispatch
>
disp
;
auto
checkDoc
=
[
&
aVarChild
&
disp
]
(
DocAccessibleParent
*
aRemoteDoc
)
-
>
bool
{
uint32_t
remoteDocMsaaId
=
WrapperFor
(
aRemoteDoc
)
-
>
GetExistingID
(
)
;
if
(
!
sIDGen
.
IsSameContentProcessFor
(
aVarChild
.
lVal
remoteDocMsaaId
)
)
{
return
true
;
}
if
(
(
disp
=
GetProxiedAccessibleInSubtree
(
aRemoteDoc
aVarChild
)
)
)
{
return
false
;
}
return
true
;
}
;
checkDoc
(
topRemoteDoc
)
;
if
(
!
disp
)
{
VisitDocAccessibleParentDescendantsAtTopLevelInContentProcess
(
static_cast
<
dom
:
:
BrowserParent
*
>
(
topRemoteDoc
-
>
Manager
(
)
)
checkDoc
)
;
}
if
(
!
disp
)
{
continue
;
}
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
NS_WARNING_ASSERTION
(
SUCCEEDED
(
hr
)
"
QI
failed
on
remote
IDispatch
"
)
;
return
result
.
forget
(
)
;
}
return
nullptr
;
}
