#
include
"
EnumVariant
.
h
"
#
include
"
ia2AccessibleApplication
.
h
"
#
include
"
ia2AccessibleHypertext
.
h
"
#
include
"
ia2AccessibleImage
.
h
"
#
include
"
ia2AccessibleTable
.
h
"
#
include
"
ia2AccessibleTableCell
.
h
"
#
include
"
mozilla
/
a11y
/
AccessibleWrap
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserBridgeParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
mscom
/
Interceptor
.
h
"
#
include
"
mozilla
/
StaticPrefs_accessibility
.
h
"
#
include
"
MsaaAccessible
.
h
"
#
include
"
MsaaDocAccessible
.
h
"
#
include
"
MsaaRootAccessible
.
h
"
#
include
"
MsaaXULMenuAccessible
.
h
"
#
include
"
nsEventMap
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsWinUtils
.
h
"
#
include
"
Relation
.
h
"
#
include
"
sdnAccessible
.
h
"
#
include
"
sdnTextAccessible
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
const
uint32_t
USE_ROLE_STRING
=
0
;
static
const
VARIANT
kVarChildIdSelf
=
{
{
{
VT_I4
}
}
}
;
MsaaIdGenerator
MsaaAccessible
:
:
sIDGen
;
ITypeInfo
*
MsaaAccessible
:
:
gTypeInfo
=
nullptr
;
MsaaAccessible
*
MsaaAccessible
:
:
Create
(
Accessible
*
aAcc
)
{
if
(
aAcc
-
>
IsLocal
(
)
&
&
aAcc
-
>
IsRoot
(
)
)
{
return
new
MsaaRootAccessible
(
aAcc
)
;
}
if
(
aAcc
-
>
IsDoc
(
)
)
{
return
new
MsaaDocAccessible
(
aAcc
)
;
}
if
(
aAcc
-
>
IsLocal
(
)
)
{
if
(
aAcc
-
>
IsTable
(
)
)
{
return
new
ia2AccessibleTable
(
aAcc
)
;
}
if
(
aAcc
-
>
IsTableCell
(
)
)
{
return
new
ia2AccessibleTableCell
(
aAcc
)
;
}
if
(
aAcc
-
>
IsApplication
(
)
)
{
return
new
ia2AccessibleApplication
(
aAcc
)
;
}
if
(
aAcc
-
>
IsHyperText
(
)
)
{
return
new
ia2AccessibleHypertext
(
aAcc
)
;
}
if
(
aAcc
-
>
IsImage
(
)
)
{
return
new
ia2AccessibleImage
(
aAcc
)
;
}
if
(
aAcc
-
>
AsLocal
(
)
-
>
GetContent
(
)
&
&
aAcc
-
>
AsLocal
(
)
-
>
GetContent
(
)
-
>
IsXULElement
(
nsGkAtoms
:
:
menuitem
)
)
{
return
new
MsaaXULMenuitemAccessible
(
aAcc
)
;
}
}
return
new
MsaaAccessible
(
aAcc
)
;
}
MsaaAccessible
:
:
MsaaAccessible
(
Accessible
*
aAcc
)
:
mAcc
(
aAcc
)
mID
(
kNoID
)
{
}
MsaaAccessible
:
:
~
MsaaAccessible
(
)
{
MOZ_ASSERT
(
!
mAcc
"
MsaaShutdown
wasn
'
t
called
!
"
)
;
if
(
mID
!
=
kNoID
)
{
sIDGen
.
ReleaseID
(
WrapNotNull
(
this
)
)
;
}
}
void
MsaaAccessible
:
:
MsaaShutdown
(
)
{
if
(
!
mAcc
)
{
return
;
}
if
(
mAcc
-
>
IsProxy
(
)
)
{
mAcc
=
nullptr
;
return
;
}
if
(
mID
!
=
kNoID
)
{
auto
doc
=
MsaaDocAccessible
:
:
GetFromOwned
(
mAcc
)
;
MOZ_ASSERT
(
doc
)
;
doc
-
>
RemoveID
(
mID
)
;
}
if
(
XRE_IsContentProcess
(
)
)
{
IUnknown
*
unk
=
static_cast
<
IAccessible
*
>
(
this
)
;
mscom
:
:
Interceptor
:
:
DisconnectRemotesForTarget
(
unk
)
;
unk
=
static_cast
<
IAccessibleHyperlink
*
>
(
this
)
;
mscom
:
:
Interceptor
:
:
DisconnectRemotesForTarget
(
unk
)
;
for
(
auto
&
assocUnk
:
mAssociatedCOMObjectsForDisconnection
)
{
mscom
:
:
Interceptor
:
:
DisconnectRemotesForTarget
(
assocUnk
)
;
}
mAssociatedCOMObjectsForDisconnection
.
Clear
(
)
;
}
mAcc
=
nullptr
;
}
void
MsaaAccessible
:
:
SetID
(
uint32_t
aID
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
mAcc
&
&
mAcc
-
>
IsProxy
(
)
)
;
mID
=
aID
;
}
int32_t
MsaaAccessible
:
:
GetChildIDFor
(
Accessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
return
0
;
}
if
(
aAccessible
-
>
IsProxy
(
)
)
{
const
uint32_t
id
=
MsaaAccessible
:
:
GetFrom
(
aAccessible
)
-
>
mID
;
MOZ_ASSERT
(
id
!
=
kNoID
)
;
return
id
;
}
auto
doc
=
MsaaDocAccessible
:
:
GetFromOwned
(
aAccessible
)
;
if
(
!
doc
)
{
return
0
;
}
uint32_t
*
id
=
&
MsaaAccessible
:
:
GetFrom
(
aAccessible
)
-
>
mID
;
if
(
*
id
!
=
kNoID
)
return
*
id
;
*
id
=
sIDGen
.
GetID
(
)
;
doc
-
>
AddID
(
*
id
aAccessible
)
;
return
*
id
;
}
uint32_t
MsaaAccessible
:
:
GetContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
return
sIDGen
.
GetContentProcessIDFor
(
aIPCContentId
)
;
}
void
MsaaAccessible
:
:
ReleaseContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
sIDGen
.
ReleaseContentProcessIDFor
(
aIPCContentId
)
;
}
void
MsaaAccessible
:
:
AssignChildIDTo
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
aSdnAcc
-
>
SetUniqueID
(
sIDGen
.
GetID
(
)
)
;
}
void
MsaaAccessible
:
:
ReleaseChildID
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
sIDGen
.
ReleaseID
(
aSdnAcc
)
;
}
HWND
MsaaAccessible
:
:
GetHWNDFor
(
Accessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
return
nullptr
;
}
LocalAccessible
*
localAcc
=
aAccessible
-
>
AsLocal
(
)
;
if
(
!
localAcc
|
|
localAcc
-
>
IsProxy
(
)
)
{
RemoteAccessible
*
proxy
=
localAcc
?
localAcc
-
>
Proxy
(
)
:
aAccessible
-
>
AsRemote
(
)
;
if
(
!
proxy
)
{
return
nullptr
;
}
if
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
)
{
DocAccessibleParent
*
doc
=
proxy
-
>
Document
(
)
;
HWND
hWnd
=
doc
-
>
GetEmulatedWindowHandle
(
)
;
if
(
hWnd
)
{
return
hWnd
;
}
}
LocalAccessible
*
outerDoc
=
proxy
-
>
OuterDocOfRemoteBrowser
(
)
;
if
(
!
outerDoc
)
{
return
nullptr
;
}
return
GetHWNDFor
(
outerDoc
)
;
}
DocAccessible
*
document
=
localAcc
-
>
Document
(
)
;
if
(
!
document
)
return
nullptr
;
nsIFrame
*
frame
=
localAcc
-
>
GetFrame
(
)
;
if
(
frame
)
{
nsIWidget
*
widget
=
frame
-
>
GetNearestWidget
(
)
;
if
(
widget
&
&
widget
-
>
IsVisible
(
)
)
{
if
(
nsViewManager
*
vm
=
document
-
>
PresShellPtr
(
)
-
>
GetViewManager
(
)
)
{
nsCOMPtr
<
nsIWidget
>
rootWidget
;
vm
-
>
GetRootWidget
(
getter_AddRefs
(
rootWidget
)
)
;
if
(
rootWidget
!
=
widget
)
return
static_cast
<
HWND
>
(
widget
-
>
GetNativeData
(
NS_NATIVE_WINDOW
)
)
;
}
}
}
return
static_cast
<
HWND
>
(
document
-
>
GetNativeWindow
(
)
)
;
}
static
bool
IsHandlerInvalidationNeeded
(
uint32_t
aEvent
)
{
switch
(
aEvent
)
{
case
EVENT_OBJECT_STATECHANGE
:
case
EVENT_OBJECT_LOCATIONCHANGE
:
case
EVENT_OBJECT_NAMECHANGE
:
case
EVENT_OBJECT_DESCRIPTIONCHANGE
:
case
EVENT_OBJECT_VALUECHANGE
:
case
EVENT_OBJECT_FOCUS
:
case
IA2_EVENT_ACTION_CHANGED
:
case
IA2_EVENT_DOCUMENT_LOAD_COMPLETE
:
case
IA2_EVENT_DOCUMENT_LOAD_STOPPED
:
case
IA2_EVENT_DOCUMENT_ATTRIBUTE_CHANGED
:
case
IA2_EVENT_DOCUMENT_CONTENT_CHANGED
:
case
IA2_EVENT_PAGE_CHANGED
:
case
IA2_EVENT_TEXT_ATTRIBUTE_CHANGED
:
case
IA2_EVENT_TEXT_CHANGED
:
case
IA2_EVENT_TEXT_INSERTED
:
case
IA2_EVENT_TEXT_REMOVED
:
case
IA2_EVENT_TEXT_UPDATED
:
case
IA2_EVENT_OBJECT_ATTRIBUTE_CHANGED
:
return
true
;
default
:
return
false
;
}
}
void
MsaaAccessible
:
:
FireWinEvent
(
Accessible
*
aTarget
uint32_t
aEventType
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
static_assert
(
sizeof
(
gWinEventMap
)
/
sizeof
(
gWinEventMap
[
0
]
)
=
=
nsIAccessibleEvent
:
:
EVENT_LAST_ENTRY
"
MSAA
event
map
skewed
"
)
;
NS_ASSERTION
(
aEventType
>
0
&
&
aEventType
<
ArrayLength
(
gWinEventMap
)
"
invalid
event
type
"
)
;
uint32_t
winEvent
=
gWinEventMap
[
aEventType
]
;
if
(
!
winEvent
)
return
;
Accessible
*
target
=
aTarget
;
if
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
&
&
target
-
>
IsRemote
(
)
)
{
target
=
WrapperFor
(
target
-
>
AsRemote
(
)
)
;
}
int32_t
childID
=
MsaaAccessible
:
:
GetChildIDFor
(
target
)
;
if
(
!
childID
)
return
;
HWND
hwnd
=
GetHWNDFor
(
target
)
;
if
(
!
hwnd
)
{
return
;
}
if
(
IsHandlerInvalidationNeeded
(
winEvent
)
)
{
AccessibleWrap
:
:
InvalidateHandlers
(
)
;
}
:
:
NotifyWinEvent
(
winEvent
hwnd
OBJID_CLIENT
childID
)
;
}
AccessibleWrap
*
MsaaAccessible
:
:
LocalAcc
(
)
{
if
(
!
mAcc
|
|
mAcc
-
>
IsRemote
(
)
|
|
mAcc
-
>
IsProxy
(
)
)
{
return
nullptr
;
}
auto
acc
=
static_cast
<
AccessibleWrap
*
>
(
mAcc
)
;
MOZ_ASSERT
(
!
acc
|
|
!
acc
-
>
IsDefunct
(
)
"
mAcc
defunct
but
MsaaShutdown
wasn
'
t
called
"
)
;
return
acc
;
}
HRESULT
MsaaAccessible
:
:
ResolveChild
(
const
VARIANT
&
aVarChild
IAccessible
*
*
aOutInterface
)
{
MOZ_ASSERT
(
aOutInterface
)
;
*
aOutInterface
=
nullptr
;
if
(
aVarChild
.
vt
!
=
VT_I4
)
{
return
E_INVALIDARG
;
}
if
(
!
mAcc
)
{
return
CO_E_OBJNOTCONNECTED
;
}
if
(
aVarChild
.
lVal
=
=
CHILDID_SELF
)
{
return
S_OK
;
}
bool
isDefunct
=
false
;
RefPtr
<
IAccessible
>
accessible
=
GetIAccessibleFor
(
aVarChild
&
isDefunct
)
;
if
(
!
accessible
)
{
return
E_INVALIDARG
;
}
if
(
isDefunct
)
{
return
CO_E_OBJNOTCONNECTED
;
}
accessible
.
forget
(
aOutInterface
)
;
return
S_OK
;
}
static
Accessible
*
GetAccessibleInSubtree
(
DocAccessible
*
aDoc
uint32_t
aID
)
{
Accessible
*
child
=
MsaaDocAccessible
:
:
GetFrom
(
aDoc
)
-
>
GetAccessibleByID
(
aID
)
;
if
(
child
)
return
child
;
uint32_t
childDocCount
=
aDoc
-
>
ChildDocumentCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
childDocCount
;
i
+
+
)
{
child
=
GetAccessibleInSubtree
(
aDoc
-
>
GetChildDocumentAt
(
i
)
aID
)
;
if
(
child
)
return
child
;
}
return
nullptr
;
}
static
Accessible
*
GetAccessibleInSubtree
(
DocAccessibleParent
*
aDoc
uint32_t
aID
)
{
Accessible
*
child
=
MsaaDocAccessible
:
:
GetFrom
(
aDoc
)
-
>
GetAccessibleByID
(
aID
)
;
if
(
child
)
{
return
child
;
}
size_t
childDocCount
=
aDoc
-
>
ChildDocCount
(
)
;
for
(
size_t
i
=
0
;
i
<
childDocCount
;
i
+
+
)
{
child
=
GetAccessibleInSubtree
(
aDoc
-
>
ChildDocAt
(
i
)
aID
)
;
if
(
child
)
{
return
child
;
}
}
return
nullptr
;
}
static
already_AddRefed
<
IDispatch
>
GetProxiedAccessibleInSubtree
(
const
DocAccessibleParent
*
aDoc
const
VARIANT
&
aVarChild
)
{
MOZ_ASSERT
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
auto
wrapper
=
static_cast
<
DocRemoteAccessibleWrap
*
>
(
WrapperFor
(
aDoc
)
)
;
RefPtr
<
IAccessible
>
comProxy
;
int32_t
docWrapperChildId
=
MsaaAccessible
:
:
GetChildIDFor
(
wrapper
)
;
if
(
aDoc
-
>
IsTopLevelInContentProcess
(
)
)
{
wrapper
-
>
GetNativeInterface
(
getter_AddRefs
(
comProxy
)
)
;
}
else
{
auto
tab
=
static_cast
<
dom
:
:
BrowserParent
*
>
(
aDoc
-
>
Manager
(
)
)
;
MOZ_ASSERT
(
tab
)
;
DocAccessibleParent
*
topLevelDoc
=
tab
-
>
GetTopLevelDocAccessible
(
)
;
MOZ_ASSERT
(
topLevelDoc
&
&
topLevelDoc
-
>
IsTopLevelInContentProcess
(
)
)
;
VARIANT
docId
=
{
{
{
VT_I4
}
}
}
;
docId
.
lVal
=
docWrapperChildId
;
RefPtr
<
IDispatch
>
disp
=
GetProxiedAccessibleInSubtree
(
topLevelDoc
docId
)
;
if
(
!
disp
)
{
return
nullptr
;
}
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
comProxy
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
}
MOZ_ASSERT
(
comProxy
)
;
if
(
!
comProxy
)
{
return
nullptr
;
}
if
(
docWrapperChildId
=
=
aVarChild
.
lVal
)
{
return
comProxy
.
forget
(
)
;
}
RefPtr
<
IDispatch
>
disp
;
if
(
FAILED
(
comProxy
-
>
get_accChild
(
aVarChild
getter_AddRefs
(
disp
)
)
)
)
{
return
nullptr
;
}
return
disp
.
forget
(
)
;
}
already_AddRefed
<
IAccessible
>
MsaaAccessible
:
:
GetIAccessibleFor
(
const
VARIANT
&
aVarChild
bool
*
aIsDefunct
)
{
if
(
aVarChild
.
vt
!
=
VT_I4
)
return
nullptr
;
VARIANT
varChild
=
aVarChild
;
MOZ_ASSERT
(
aIsDefunct
)
;
*
aIsDefunct
=
false
;
RefPtr
<
IAccessible
>
result
;
if
(
!
mAcc
)
{
*
aIsDefunct
=
true
;
return
nullptr
;
}
AccessibleWrap
*
localAcc
=
static_cast
<
AccessibleWrap
*
>
(
mAcc
-
>
AsLocal
(
)
)
;
if
(
varChild
.
lVal
=
=
CHILDID_SELF
)
{
MOZ_ASSERT
(
!
localAcc
|
|
!
localAcc
-
>
IsProxy
(
)
)
;
result
=
this
;
return
result
.
forget
(
)
;
}
if
(
varChild
.
ulVal
!
=
GetExistingID
(
)
&
&
(
(
localAcc
&
&
localAcc
-
>
IsProxy
(
)
)
?
nsAccUtils
:
:
MustPrune
(
localAcc
-
>
Proxy
(
)
)
:
nsAccUtils
:
:
MustPrune
(
mAcc
)
)
)
{
return
nullptr
;
}
if
(
XRE_IsParentProcess
(
)
&
&
localAcc
&
&
!
localAcc
-
>
IsProxy
(
)
&
&
varChild
.
lVal
<
0
&
&
!
sIDGen
.
IsChromeID
(
varChild
.
lVal
)
)
{
MOZ_ASSERT
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
if
(
!
localAcc
-
>
IsRootForHWND
(
)
)
{
return
nullptr
;
}
return
GetRemoteIAccessibleFor
(
varChild
)
;
}
if
(
varChild
.
lVal
>
0
)
{
MOZ_ASSERT
(
!
localAcc
|
|
!
localAcc
-
>
IsProxy
(
)
)
;
if
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
&
&
XRE_IsContentProcess
(
)
&
&
localAcc
-
>
IsOuterDoc
(
)
)
{
LocalAccessible
*
xpAcc
=
localAcc
-
>
LocalChildAt
(
varChild
.
lVal
-
1
)
;
if
(
!
xpAcc
)
{
return
nullptr
;
}
xpAcc
-
>
GetNativeInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
Accessible
*
xpAcc
=
mAcc
-
>
ChildAt
(
varChild
.
lVal
-
1
)
;
if
(
!
xpAcc
)
{
return
nullptr
;
}
MOZ_ASSERT
(
xpAcc
-
>
IsRemote
(
)
|
|
!
xpAcc
-
>
AsLocal
(
)
-
>
IsDefunct
(
)
"
Shouldn
'
t
get
a
defunct
child
"
)
;
if
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
&
&
localAcc
&
&
xpAcc
-
>
IsRemote
(
)
)
{
MOZ_ASSERT
(
localAcc
-
>
IsOuterDoc
(
)
)
;
xpAcc
-
>
AsRemote
(
)
-
>
GetCOMInterface
(
getter_AddRefs
(
result
)
)
;
return
result
.
forget
(
)
;
}
result
=
MsaaAccessible
:
:
GetFrom
(
xpAcc
)
;
return
result
.
forget
(
)
;
}
if
(
localAcc
&
&
localAcc
-
>
IsProxy
(
)
)
{
MOZ_ASSERT
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
DocAccessibleParent
*
proxyDoc
=
localAcc
-
>
Proxy
(
)
-
>
Document
(
)
;
RefPtr
<
IDispatch
>
disp
=
GetProxiedAccessibleInSubtree
(
proxyDoc
varChild
)
;
if
(
!
disp
)
{
return
nullptr
;
}
MOZ_ASSERT
(
mscom
:
:
IsProxy
(
disp
)
)
;
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
result
.
forget
(
)
;
}
Accessible
*
doc
=
nullptr
;
Accessible
*
child
=
nullptr
;
auto
id
=
static_cast
<
uint32_t
>
(
varChild
.
lVal
)
;
if
(
localAcc
)
{
DocAccessible
*
localDoc
=
localAcc
-
>
Document
(
)
;
doc
=
localDoc
;
child
=
GetAccessibleInSubtree
(
localDoc
id
)
;
if
(
!
child
&
&
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
{
const
auto
remoteDocs
=
DocManager
:
:
TopLevelRemoteDocs
(
)
;
if
(
!
remoteDocs
)
{
return
nullptr
;
}
for
(
DocAccessibleParent
*
remoteDoc
:
*
remoteDocs
)
{
LocalAccessible
*
outerDoc
=
remoteDoc
-
>
OuterDocOfRemoteBrowser
(
)
;
if
(
!
outerDoc
|
|
outerDoc
-
>
Document
(
)
!
=
localDoc
)
{
continue
;
}
child
=
GetAccessibleInSubtree
(
remoteDoc
id
)
;
if
(
child
)
{
break
;
}
}
}
}
else
if
(
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
{
DocAccessibleParent
*
remoteDoc
=
mAcc
-
>
AsRemote
(
)
-
>
Document
(
)
;
doc
=
remoteDoc
;
child
=
GetAccessibleInSubtree
(
remoteDoc
id
)
;
}
if
(
!
child
)
{
return
nullptr
;
}
MOZ_ASSERT
(
child
-
>
IsLocal
(
)
|
|
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
MOZ_ASSERT
(
child
-
>
IsRemote
(
)
|
|
!
child
-
>
AsLocal
(
)
-
>
IsDefunct
(
)
"
Shouldn
'
t
get
a
defunct
child
"
)
;
if
(
mAcc
=
=
doc
)
{
result
=
MsaaAccessible
:
:
GetFrom
(
child
)
;
return
result
.
forget
(
)
;
}
Accessible
*
parent
=
child
;
while
(
parent
&
&
parent
!
=
doc
)
{
if
(
parent
=
=
mAcc
)
{
result
=
MsaaAccessible
:
:
GetFrom
(
child
)
;
return
result
.
forget
(
)
;
}
parent
=
parent
-
>
Parent
(
)
;
}
return
nullptr
;
}
template
<
typename
Callback
>
static
bool
VisitDocAccessibleParentDescendantsAtTopLevelInContentProcess
(
dom
:
:
BrowserParent
*
aBrowser
Callback
aCallback
)
{
const
auto
&
bridges
=
aBrowser
-
>
ManagedPBrowserBridgeParent
(
)
;
return
std
:
:
all_of
(
bridges
.
cbegin
(
)
bridges
.
cend
(
)
[
&
]
(
const
auto
&
key
)
{
auto
*
bridge
=
static_cast
<
dom
:
:
BrowserBridgeParent
*
>
(
key
)
;
dom
:
:
BrowserParent
*
childBrowser
=
bridge
-
>
GetBrowserParent
(
)
;
DocAccessibleParent
*
childDocAcc
=
childBrowser
-
>
GetTopLevelDocAccessible
(
)
;
if
(
!
childDocAcc
|
|
childDocAcc
-
>
IsShutdown
(
)
)
{
return
true
;
}
if
(
!
aCallback
(
childDocAcc
)
)
{
return
false
;
}
if
(
!
VisitDocAccessibleParentDescendantsAtTopLevelInContentProcess
(
childBrowser
aCallback
)
)
{
return
false
;
}
return
true
;
}
)
;
}
already_AddRefed
<
IAccessible
>
MsaaAccessible
:
:
GetRemoteIAccessibleFor
(
const
VARIANT
&
aVarChild
)
{
a11y
:
:
RootAccessible
*
root
=
LocalAcc
(
)
-
>
RootAccessible
(
)
;
const
nsTArray
<
DocAccessibleParent
*
>
*
remoteDocs
=
DocManager
:
:
TopLevelRemoteDocs
(
)
;
if
(
!
remoteDocs
)
{
return
nullptr
;
}
RefPtr
<
IAccessible
>
result
;
for
(
size_t
i
=
0
;
i
<
remoteDocs
-
>
Length
(
)
;
i
+
+
)
{
DocAccessibleParent
*
topRemoteDoc
=
remoteDocs
-
>
ElementAt
(
i
)
;
LocalAccessible
*
outerDoc
=
topRemoteDoc
-
>
OuterDocOfRemoteBrowser
(
)
;
if
(
!
outerDoc
)
{
continue
;
}
if
(
outerDoc
-
>
RootAccessible
(
)
!
=
root
)
{
continue
;
}
RefPtr
<
IDispatch
>
disp
;
auto
checkDoc
=
[
&
aVarChild
&
disp
]
(
DocAccessibleParent
*
aRemoteDoc
)
-
>
bool
{
uint32_t
remoteDocMsaaId
=
WrapperFor
(
aRemoteDoc
)
-
>
GetMsaa
(
)
-
>
GetExistingID
(
)
;
if
(
!
sIDGen
.
IsSameContentProcessFor
(
aVarChild
.
lVal
remoteDocMsaaId
)
)
{
return
true
;
}
if
(
(
disp
=
GetProxiedAccessibleInSubtree
(
aRemoteDoc
aVarChild
)
)
)
{
return
false
;
}
return
true
;
}
;
checkDoc
(
topRemoteDoc
)
;
if
(
!
disp
)
{
VisitDocAccessibleParentDescendantsAtTopLevelInContentProcess
(
static_cast
<
dom
:
:
BrowserParent
*
>
(
topRemoteDoc
-
>
Manager
(
)
)
checkDoc
)
;
}
if
(
!
disp
)
{
continue
;
}
DebugOnly
<
HRESULT
>
hr
=
disp
-
>
QueryInterface
(
IID_IAccessible
getter_AddRefs
(
result
)
)
;
NS_WARNING_ASSERTION
(
SUCCEEDED
(
hr
)
"
QI
failed
on
remote
IDispatch
"
)
;
return
result
.
forget
(
)
;
}
return
nullptr
;
}
IDispatch
*
MsaaAccessible
:
:
NativeAccessible
(
Accessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
NS_WARNING
(
"
Not
passing
in
an
aAccessible
"
)
;
return
nullptr
;
}
RefPtr
<
IDispatch
>
disp
;
if
(
aAccessible
-
>
IsProxy
(
)
)
{
MOZ_ASSERT
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
aAccessible
-
>
AsLocal
(
)
-
>
GetNativeInterface
(
getter_AddRefs
(
disp
)
)
;
}
else
if
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
&
&
aAccessible
-
>
IsRemote
(
)
)
{
aAccessible
-
>
AsRemote
(
)
-
>
GetCOMInterface
(
getter_AddRefs
(
disp
)
)
;
}
else
{
disp
=
MsaaAccessible
:
:
GetFrom
(
aAccessible
)
;
}
IDispatch
*
rawDisp
;
disp
.
forget
(
&
rawDisp
)
;
return
rawDisp
;
}
ITypeInfo
*
MsaaAccessible
:
:
GetTI
(
LCID
lcid
)
{
if
(
gTypeInfo
)
return
gTypeInfo
;
ITypeLib
*
typeLib
=
nullptr
;
HRESULT
hr
=
LoadRegTypeLib
(
LIBID_Accessibility
1
0
lcid
&
typeLib
)
;
if
(
FAILED
(
hr
)
)
return
nullptr
;
hr
=
typeLib
-
>
GetTypeInfoOfGuid
(
IID_IAccessible
&
gTypeInfo
)
;
typeLib
-
>
Release
(
)
;
if
(
FAILED
(
hr
)
)
return
nullptr
;
return
gTypeInfo
;
}
MsaaAccessible
*
MsaaAccessible
:
:
GetFrom
(
Accessible
*
aAcc
)
{
if
(
RemoteAccessible
*
remoteAcc
=
aAcc
-
>
AsRemote
(
)
)
{
MOZ_ASSERT
(
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
return
reinterpret_cast
<
MsaaAccessible
*
>
(
remoteAcc
-
>
GetWrapper
(
)
)
;
}
return
static_cast
<
AccessibleWrap
*
>
(
aAcc
)
-
>
GetMsaa
(
)
;
}
STDMETHODIMP
MsaaAccessible
:
:
QueryInterface
(
REFIID
iid
void
*
*
ppv
)
{
if
(
!
ppv
)
return
E_INVALIDARG
;
*
ppv
=
nullptr
;
if
(
IID_IClientSecurity
=
=
iid
)
{
return
E_NOINTERFACE
;
}
if
(
!
mAcc
)
{
return
E_NOINTERFACE
;
}
AccessibleWrap
*
localAcc
=
LocalAcc
(
)
;
if
(
IID_IUnknown
=
=
iid
)
*
ppv
=
static_cast
<
IAccessible
*
>
(
this
)
;
else
if
(
IID_IDispatch
=
=
iid
|
|
IID_IAccessible
=
=
iid
)
*
ppv
=
static_cast
<
IAccessible
*
>
(
this
)
;
else
if
(
IID_IEnumVARIANT
=
=
iid
&
&
localAcc
)
{
if
(
!
localAcc
-
>
HasChildren
(
)
|
|
nsAccUtils
:
:
MustPrune
(
localAcc
)
)
{
return
E_NOINTERFACE
;
}
*
ppv
=
static_cast
<
IEnumVARIANT
*
>
(
new
ChildrenEnumVariant
(
this
)
)
;
}
else
if
(
IID_IServiceProvider
=
=
iid
&
&
localAcc
)
*
ppv
=
new
ServiceProvider
(
this
)
;
else
if
(
IID_ISimpleDOMNode
=
=
iid
&
&
localAcc
)
{
if
(
!
localAcc
-
>
HasOwnContent
(
)
&
&
!
localAcc
-
>
IsDoc
(
)
)
{
return
E_NOINTERFACE
;
}
*
ppv
=
static_cast
<
ISimpleDOMNode
*
>
(
new
sdnAccessible
(
WrapNotNull
(
this
)
)
)
;
}
else
if
(
iid
=
=
IID_ISimpleDOMText
&
&
localAcc
&
&
localAcc
-
>
IsTextLeaf
(
)
)
{
statistics
:
:
ISimpleDOMUsed
(
)
;
*
ppv
=
static_cast
<
ISimpleDOMText
*
>
(
new
sdnTextAccessible
(
this
)
)
;
static_cast
<
IUnknown
*
>
(
*
ppv
)
-
>
AddRef
(
)
;
return
S_OK
;
}
if
(
!
*
ppv
&
&
localAcc
)
{
HRESULT
hr
=
ia2Accessible
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
!
*
ppv
&
&
localAcc
)
{
HRESULT
hr
=
ia2AccessibleComponent
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
!
*
ppv
&
&
localAcc
)
{
HRESULT
hr
=
ia2AccessibleHyperlink
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
!
*
ppv
&
&
localAcc
)
{
HRESULT
hr
=
ia2AccessibleValue
:
:
QueryInterface
(
iid
ppv
)
;
if
(
SUCCEEDED
(
hr
)
)
return
hr
;
}
if
(
!
*
ppv
&
&
iid
=
=
IID_IGeckoCustom
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
&
&
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
RefPtr
<
GeckoCustom
>
gkCrap
=
new
GeckoCustom
(
this
)
;
gkCrap
.
forget
(
ppv
)
;
return
S_OK
;
}
if
(
nullptr
=
=
*
ppv
)
return
E_NOINTERFACE
;
(
reinterpret_cast
<
IUnknown
*
>
(
*
ppv
)
)
-
>
AddRef
(
)
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accParent
(
IDispatch
__RPC_FAR
*
__RPC_FAR
*
ppdispParent
)
{
if
(
!
ppdispParent
)
return
E_INVALIDARG
;
*
ppdispParent
=
nullptr
;
if
(
!
mAcc
)
{
return
CO_E_OBJNOTCONNECTED
;
}
Accessible
*
xpParentAcc
=
mAcc
-
>
Parent
(
)
;
if
(
!
xpParentAcc
)
return
S_FALSE
;
MOZ_ASSERT
(
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
|
|
xpParentAcc
-
>
IsLocal
(
)
)
;
*
ppdispParent
=
NativeAccessible
(
xpParentAcc
)
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accChildCount
(
long
__RPC_FAR
*
pcountChildren
)
{
if
(
!
pcountChildren
)
return
E_INVALIDARG
;
*
pcountChildren
=
0
;
if
(
!
mAcc
)
return
CO_E_OBJNOTCONNECTED
;
if
(
nsAccUtils
:
:
MustPrune
(
mAcc
)
)
return
S_OK
;
*
pcountChildren
=
mAcc
-
>
ChildCount
(
)
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accChild
(
VARIANT
varChild
IDispatch
__RPC_FAR
*
__RPC_FAR
*
ppdispChild
)
{
if
(
!
ppdispChild
)
return
E_INVALIDARG
;
*
ppdispChild
=
nullptr
;
if
(
!
mAcc
)
return
CO_E_OBJNOTCONNECTED
;
bool
isDefunct
=
false
;
RefPtr
<
IAccessible
>
child
=
GetIAccessibleFor
(
varChild
&
isDefunct
)
;
if
(
!
child
)
{
return
E_INVALIDARG
;
}
if
(
isDefunct
)
{
return
CO_E_OBJNOTCONNECTED
;
}
child
.
forget
(
ppdispChild
)
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accName
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszName
)
{
if
(
!
pszName
|
|
varChild
.
vt
!
=
VT_I4
)
return
E_INVALIDARG
;
*
pszName
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accName
(
kVarChildIdSelf
pszName
)
;
}
nsAutoString
name
;
LocalAcc
(
)
-
>
Name
(
name
)
;
if
(
name
.
IsVoid
(
)
)
return
S_FALSE
;
*
pszName
=
:
:
SysAllocStringLen
(
name
.
get
(
)
name
.
Length
(
)
)
;
if
(
!
*
pszName
)
return
E_OUTOFMEMORY
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accValue
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszValue
)
{
if
(
!
pszValue
)
return
E_INVALIDARG
;
*
pszValue
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accValue
(
kVarChildIdSelf
pszValue
)
;
}
nsAutoString
value
;
LocalAcc
(
)
-
>
Value
(
value
)
;
if
(
value
.
IsEmpty
(
)
)
return
S_FALSE
;
*
pszValue
=
:
:
SysAllocStringLen
(
value
.
get
(
)
value
.
Length
(
)
)
;
if
(
!
*
pszValue
)
return
E_OUTOFMEMORY
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accDescription
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszDescription
)
{
if
(
!
pszDescription
)
return
E_INVALIDARG
;
*
pszDescription
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accDescription
(
kVarChildIdSelf
pszDescription
)
;
}
nsAutoString
description
;
LocalAcc
(
)
-
>
Description
(
description
)
;
*
pszDescription
=
:
:
SysAllocStringLen
(
description
.
get
(
)
description
.
Length
(
)
)
;
return
*
pszDescription
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accRole
(
VARIANT
varChild
VARIANT
__RPC_FAR
*
pvarRole
)
{
if
(
!
pvarRole
)
return
E_INVALIDARG
;
VariantInit
(
pvarRole
)
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accRole
(
kVarChildIdSelf
pvarRole
)
;
}
a11y
:
:
role
geckoRole
;
#
ifdef
DEBUG
if
(
mAcc
-
>
IsLocal
(
)
)
{
NS_ASSERTION
(
nsAccUtils
:
:
IsTextInterfaceSupportCorrect
(
mAcc
-
>
AsLocal
(
)
)
"
Does
not
support
Text
when
it
should
"
)
;
}
#
endif
geckoRole
=
mAcc
-
>
Role
(
)
;
uint32_t
msaaRole
=
0
;
#
define
ROLE
(
_geckoRole
stringRole
atkRole
macRole
macSubrole
_msaaRole
\
ia2Role
androidClass
nameRule
)
\
case
roles
:
:
_geckoRole
:
\
msaaRole
=
_msaaRole
;
\
break
;
switch
(
geckoRole
)
{
#
include
"
RoleMap
.
h
"
default
:
MOZ_CRASH
(
"
Unknown
role
.
"
)
;
}
#
undef
ROLE
if
(
geckoRole
=
=
roles
:
:
ROW
)
{
Accessible
*
xpParent
=
mAcc
-
>
Parent
(
)
;
if
(
xpParent
&
&
xpParent
-
>
Role
(
)
=
=
roles
:
:
TREE_TABLE
)
msaaRole
=
ROLE_SYSTEM_OUTLINEITEM
;
}
if
(
msaaRole
!
=
USE_ROLE_STRING
)
{
pvarRole
-
>
vt
=
VT_I4
;
pvarRole
-
>
lVal
=
msaaRole
;
return
S_OK
;
}
LocalAccessible
*
localAcc
=
mAcc
-
>
AsLocal
(
)
;
if
(
!
localAcc
)
{
return
E_FAIL
;
}
nsIContent
*
content
=
localAcc
-
>
GetContent
(
)
;
if
(
!
content
)
return
E_FAIL
;
if
(
content
-
>
IsElement
(
)
)
{
nsAutoString
roleString
;
content
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
role
roleString
)
;
if
(
roleString
.
IsEmpty
(
)
)
{
dom
:
:
Document
*
document
=
content
-
>
GetUncomposedDoc
(
)
;
if
(
!
document
)
return
E_FAIL
;
dom
:
:
NodeInfo
*
nodeInfo
=
content
-
>
NodeInfo
(
)
;
nodeInfo
-
>
GetName
(
roleString
)
;
if
(
!
nodeInfo
-
>
NamespaceEquals
(
document
-
>
GetDefaultNamespaceID
(
)
)
)
{
nsAutoString
nameSpaceURI
;
nodeInfo
-
>
GetNamespaceURI
(
nameSpaceURI
)
;
roleString
+
=
u
"
"
_ns
+
nameSpaceURI
;
}
}
if
(
!
roleString
.
IsEmpty
(
)
)
{
pvarRole
-
>
vt
=
VT_BSTR
;
pvarRole
-
>
bstrVal
=
:
:
SysAllocString
(
roleString
.
get
(
)
)
;
return
S_OK
;
}
}
return
E_FAIL
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accState
(
VARIANT
varChild
VARIANT
__RPC_FAR
*
pvarState
)
{
if
(
!
pvarState
)
return
E_INVALIDARG
;
VariantInit
(
pvarState
)
;
pvarState
-
>
vt
=
VT_I4
;
pvarState
-
>
lVal
=
0
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accState
(
kVarChildIdSelf
pvarState
)
;
}
uint64_t
state
=
LocalAcc
(
)
-
>
State
(
)
;
uint32_t
msaaState
=
0
;
nsAccUtils
:
:
To32States
(
state
&
msaaState
nullptr
)
;
pvarState
-
>
lVal
=
msaaState
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accHelp
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszHelp
)
{
if
(
!
pszHelp
)
return
E_INVALIDARG
;
*
pszHelp
=
nullptr
;
return
S_FALSE
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accHelpTopic
(
BSTR
__RPC_FAR
*
pszHelpFile
VARIANT
varChild
long
__RPC_FAR
*
pidTopic
)
{
if
(
!
pszHelpFile
|
|
!
pidTopic
)
return
E_INVALIDARG
;
*
pszHelpFile
=
nullptr
;
*
pidTopic
=
0
;
return
S_FALSE
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accKeyboardShortcut
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszKeyboardShortcut
)
{
if
(
!
pszKeyboardShortcut
)
return
E_INVALIDARG
;
*
pszKeyboardShortcut
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accKeyboardShortcut
(
kVarChildIdSelf
pszKeyboardShortcut
)
;
}
LocalAccessible
*
localAcc
=
LocalAcc
(
)
;
KeyBinding
keyBinding
=
localAcc
-
>
AccessKey
(
)
;
if
(
keyBinding
.
IsEmpty
(
)
)
keyBinding
=
localAcc
-
>
KeyboardShortcut
(
)
;
nsAutoString
shortcut
;
keyBinding
.
ToString
(
shortcut
)
;
*
pszKeyboardShortcut
=
:
:
SysAllocStringLen
(
shortcut
.
get
(
)
shortcut
.
Length
(
)
)
;
return
*
pszKeyboardShortcut
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accFocus
(
VARIANT
__RPC_FAR
*
pvarChild
)
{
if
(
!
pvarChild
)
return
E_INVALIDARG
;
VariantInit
(
pvarChild
)
;
LocalAccessible
*
localAcc
=
LocalAcc
(
)
;
if
(
!
localAcc
)
return
CO_E_OBJNOTCONNECTED
;
LocalAccessible
*
focusedAccessible
=
localAcc
-
>
FocusedChild
(
)
;
if
(
focusedAccessible
=
=
localAcc
)
{
pvarChild
-
>
vt
=
VT_I4
;
pvarChild
-
>
lVal
=
CHILDID_SELF
;
}
else
if
(
focusedAccessible
)
{
pvarChild
-
>
vt
=
VT_DISPATCH
;
pvarChild
-
>
pdispVal
=
NativeAccessible
(
focusedAccessible
)
;
}
else
{
pvarChild
-
>
vt
=
VT_EMPTY
;
}
return
S_OK
;
}
class
AccessibleEnumerator
final
:
public
IEnumVARIANT
{
public
:
explicit
AccessibleEnumerator
(
const
nsTArray
<
LocalAccessible
*
>
&
aArray
)
:
mArray
(
aArray
.
Clone
(
)
)
mCurIndex
(
0
)
{
}
AccessibleEnumerator
(
const
AccessibleEnumerator
&
toCopy
)
:
mArray
(
toCopy
.
mArray
.
Clone
(
)
)
mCurIndex
(
toCopy
.
mCurIndex
)
{
}
~
AccessibleEnumerator
(
)
{
}
DECL_IUNKNOWN
STDMETHODIMP
Next
(
unsigned
long
celt
VARIANT
FAR
*
rgvar
unsigned
long
FAR
*
pceltFetched
)
;
STDMETHODIMP
Skip
(
unsigned
long
celt
)
;
STDMETHODIMP
Reset
(
)
{
mCurIndex
=
0
;
return
S_OK
;
}
STDMETHODIMP
Clone
(
IEnumVARIANT
FAR
*
FAR
*
ppenum
)
;
private
:
nsTArray
<
LocalAccessible
*
>
mArray
;
uint32_t
mCurIndex
;
}
;
STDMETHODIMP
AccessibleEnumerator
:
:
QueryInterface
(
REFIID
iid
void
*
*
ppvObject
)
{
if
(
iid
=
=
IID_IEnumVARIANT
)
{
*
ppvObject
=
static_cast
<
IEnumVARIANT
*
>
(
this
)
;
AddRef
(
)
;
return
S_OK
;
}
if
(
iid
=
=
IID_IUnknown
)
{
*
ppvObject
=
static_cast
<
IUnknown
*
>
(
this
)
;
AddRef
(
)
;
return
S_OK
;
}
*
ppvObject
=
nullptr
;
return
E_NOINTERFACE
;
}
STDMETHODIMP
AccessibleEnumerator
:
:
Next
(
unsigned
long
celt
VARIANT
FAR
*
rgvar
unsigned
long
FAR
*
pceltFetched
)
{
uint32_t
length
=
mArray
.
Length
(
)
;
HRESULT
hr
=
S_OK
;
if
(
celt
>
length
-
mCurIndex
)
{
hr
=
S_FALSE
;
celt
=
length
-
mCurIndex
;
}
for
(
uint32_t
i
=
0
;
i
<
celt
;
+
+
i
+
+
mCurIndex
)
{
rgvar
[
i
]
.
vt
=
VT_DISPATCH
;
rgvar
[
i
]
.
pdispVal
=
MsaaAccessible
:
:
NativeAccessible
(
mArray
[
mCurIndex
]
)
;
}
if
(
pceltFetched
)
*
pceltFetched
=
celt
;
return
hr
;
}
STDMETHODIMP
AccessibleEnumerator
:
:
Clone
(
IEnumVARIANT
FAR
*
FAR
*
ppenum
)
{
*
ppenum
=
new
AccessibleEnumerator
(
*
this
)
;
NS_ADDREF
(
*
ppenum
)
;
return
S_OK
;
}
STDMETHODIMP
AccessibleEnumerator
:
:
Skip
(
unsigned
long
celt
)
{
uint32_t
length
=
mArray
.
Length
(
)
;
if
(
celt
>
length
-
mCurIndex
)
{
mCurIndex
=
length
;
return
S_FALSE
;
}
mCurIndex
+
=
celt
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accSelection
(
VARIANT
__RPC_FAR
*
pvarChildren
)
{
if
(
!
pvarChildren
)
return
E_INVALIDARG
;
VariantInit
(
pvarChildren
)
;
pvarChildren
-
>
vt
=
VT_EMPTY
;
LocalAccessible
*
localAcc
=
LocalAcc
(
)
;
if
(
!
localAcc
)
return
CO_E_OBJNOTCONNECTED
;
if
(
!
localAcc
-
>
IsSelect
(
)
)
{
return
S_OK
;
}
AutoTArray
<
LocalAccessible
*
10
>
selectedItems
;
localAcc
-
>
SelectedItems
(
&
selectedItems
)
;
uint32_t
count
=
selectedItems
.
Length
(
)
;
if
(
count
=
=
1
)
{
pvarChildren
-
>
vt
=
VT_DISPATCH
;
pvarChildren
-
>
pdispVal
=
NativeAccessible
(
selectedItems
[
0
]
)
;
}
else
if
(
count
>
1
)
{
RefPtr
<
AccessibleEnumerator
>
pEnum
=
new
AccessibleEnumerator
(
selectedItems
)
;
AssociateCOMObjectForDisconnection
(
pEnum
)
;
pvarChildren
-
>
vt
=
VT_UNKNOWN
;
NS_ADDREF
(
pvarChildren
-
>
punkVal
=
pEnum
)
;
}
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
get_accDefaultAction
(
VARIANT
varChild
BSTR
__RPC_FAR
*
pszDefaultAction
)
{
if
(
!
pszDefaultAction
)
return
E_INVALIDARG
;
*
pszDefaultAction
=
nullptr
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
get_accDefaultAction
(
kVarChildIdSelf
pszDefaultAction
)
;
}
nsAutoString
defaultAction
;
LocalAcc
(
)
-
>
ActionNameAt
(
0
defaultAction
)
;
*
pszDefaultAction
=
:
:
SysAllocStringLen
(
defaultAction
.
get
(
)
defaultAction
.
Length
(
)
)
;
return
*
pszDefaultAction
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
MsaaAccessible
:
:
accSelect
(
long
flagsSelect
VARIANT
varChild
)
{
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accSelect
(
flagsSelect
kVarChildIdSelf
)
;
}
LocalAccessible
*
localAcc
=
LocalAcc
(
)
;
if
(
flagsSelect
&
SELFLAG_TAKEFOCUS
)
{
if
(
XRE_IsContentProcess
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
mozilla
:
:
NewRunnableMethod
(
"
LocalAccessible
:
:
TakeFocus
"
localAcc
&
LocalAccessible
:
:
TakeFocus
)
;
NS_DispatchToMainThread
(
runnable
NS_DISPATCH_NORMAL
)
;
return
S_OK
;
}
localAcc
-
>
TakeFocus
(
)
;
return
S_OK
;
}
if
(
flagsSelect
&
SELFLAG_TAKESELECTION
)
{
localAcc
-
>
TakeSelection
(
)
;
return
S_OK
;
}
if
(
flagsSelect
&
SELFLAG_ADDSELECTION
)
{
localAcc
-
>
SetSelected
(
true
)
;
return
S_OK
;
}
if
(
flagsSelect
&
SELFLAG_REMOVESELECTION
)
{
localAcc
-
>
SetSelected
(
false
)
;
return
S_OK
;
}
return
E_FAIL
;
}
STDMETHODIMP
MsaaAccessible
:
:
accLocation
(
long
__RPC_FAR
*
pxLeft
long
__RPC_FAR
*
pyTop
long
__RPC_FAR
*
pcxWidth
long
__RPC_FAR
*
pcyHeight
VARIANT
varChild
)
{
if
(
!
pxLeft
|
|
!
pyTop
|
|
!
pcxWidth
|
|
!
pcyHeight
)
return
E_INVALIDARG
;
*
pxLeft
=
0
;
*
pyTop
=
0
;
*
pcxWidth
=
0
;
*
pcyHeight
=
0
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accLocation
(
pxLeft
pyTop
pcxWidth
pcyHeight
kVarChildIdSelf
)
;
}
LocalAccessible
*
localAcc
=
LocalAcc
(
)
;
if
(
!
localAcc
)
{
return
CO_E_OBJNOTCONNECTED
;
}
nsIntRect
rect
=
localAcc
-
>
Bounds
(
)
;
*
pxLeft
=
rect
.
X
(
)
;
*
pyTop
=
rect
.
Y
(
)
;
*
pcxWidth
=
rect
.
Width
(
)
;
*
pcyHeight
=
rect
.
Height
(
)
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
accNavigate
(
long
navDir
VARIANT
varStart
VARIANT
__RPC_FAR
*
pvarEndUpAt
)
{
if
(
!
pvarEndUpAt
)
return
E_INVALIDARG
;
VariantInit
(
pvarEndUpAt
)
;
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varStart
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accNavigate
(
navDir
kVarChildIdSelf
pvarEndUpAt
)
;
}
MOZ_ASSERT
(
!
mAcc
-
>
IsProxy
(
)
)
;
Accessible
*
navAccessible
=
nullptr
;
Maybe
<
RelationType
>
xpRelation
;
#
define
RELATIONTYPE
(
geckoType
stringType
atkType
msaaType
ia2Type
)
\
case
msaaType
:
\
xpRelation
.
emplace
(
RelationType
:
:
geckoType
)
;
\
break
;
switch
(
navDir
)
{
case
NAVDIR_FIRSTCHILD
:
if
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
&
&
XRE_IsContentProcess
(
)
&
&
mAcc
-
>
IsOuterDoc
(
)
)
{
navAccessible
=
LocalAcc
(
)
-
>
LocalFirstChild
(
)
;
}
else
if
(
!
nsAccUtils
:
:
MustPrune
(
mAcc
)
)
{
navAccessible
=
mAcc
-
>
FirstChild
(
)
;
}
break
;
case
NAVDIR_LASTCHILD
:
if
(
!
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
&
&
XRE_IsContentProcess
(
)
&
&
mAcc
-
>
IsOuterDoc
(
)
)
{
navAccessible
=
LocalAcc
(
)
-
>
LocalLastChild
(
)
;
}
else
if
(
!
nsAccUtils
:
:
MustPrune
(
mAcc
)
)
{
navAccessible
=
mAcc
-
>
LastChild
(
)
;
}
break
;
case
NAVDIR_NEXT
:
navAccessible
=
mAcc
-
>
NextSibling
(
)
;
break
;
case
NAVDIR_PREVIOUS
:
navAccessible
=
mAcc
-
>
PrevSibling
(
)
;
break
;
case
NAVDIR_DOWN
:
case
NAVDIR_LEFT
:
case
NAVDIR_RIGHT
:
case
NAVDIR_UP
:
return
E_NOTIMPL
;
#
include
"
RelationTypeMap
.
h
"
default
:
return
E_INVALIDARG
;
}
#
undef
RELATIONTYPE
pvarEndUpAt
-
>
vt
=
VT_EMPTY
;
if
(
xpRelation
)
{
if
(
mAcc
-
>
IsRemote
(
)
)
{
return
E_NOTIMPL
;
}
Relation
rel
=
mAcc
-
>
AsLocal
(
)
-
>
RelationByType
(
*
xpRelation
)
;
navAccessible
=
rel
.
Next
(
)
;
}
if
(
!
navAccessible
)
return
E_FAIL
;
pvarEndUpAt
-
>
pdispVal
=
NativeAccessible
(
navAccessible
)
;
pvarEndUpAt
-
>
vt
=
VT_DISPATCH
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
accHitTest
(
long
xLeft
long
yTop
VARIANT
__RPC_FAR
*
pvarChild
)
{
if
(
!
pvarChild
)
return
E_INVALIDARG
;
VariantInit
(
pvarChild
)
;
LocalAccessible
*
localAcc
=
LocalAcc
(
)
;
if
(
!
localAcc
)
return
CO_E_OBJNOTCONNECTED
;
LocalAccessible
*
accessible
=
localAcc
-
>
LocalChildAtPoint
(
xLeft
yTop
Accessible
:
:
EWhichChildAtPoint
:
:
DirectChild
)
;
if
(
accessible
)
{
if
(
accessible
=
=
localAcc
)
{
pvarChild
-
>
vt
=
VT_I4
;
pvarChild
-
>
lVal
=
CHILDID_SELF
;
}
else
{
pvarChild
-
>
vt
=
VT_DISPATCH
;
pvarChild
-
>
pdispVal
=
NativeAccessible
(
accessible
)
;
}
}
else
{
pvarChild
-
>
vt
=
VT_EMPTY
;
return
S_FALSE
;
}
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
accDoDefaultAction
(
VARIANT
varChild
)
{
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
accDoDefaultAction
(
kVarChildIdSelf
)
;
}
return
LocalAcc
(
)
-
>
DoAction
(
0
)
?
S_OK
:
E_INVALIDARG
;
}
STDMETHODIMP
MsaaAccessible
:
:
put_accName
(
VARIANT
varChild
BSTR
szName
)
{
return
E_NOTIMPL
;
}
STDMETHODIMP
MsaaAccessible
:
:
put_accValue
(
VARIANT
varChild
BSTR
szValue
)
{
RefPtr
<
IAccessible
>
accessible
;
HRESULT
hr
=
ResolveChild
(
varChild
getter_AddRefs
(
accessible
)
)
;
if
(
FAILED
(
hr
)
)
{
return
hr
;
}
if
(
accessible
)
{
return
accessible
-
>
put_accValue
(
kVarChildIdSelf
szValue
)
;
}
HyperTextAccessible
*
ht
=
LocalAcc
(
)
-
>
AsHyperText
(
)
;
if
(
!
ht
)
{
return
E_NOTIMPL
;
}
uint32_t
length
=
:
:
SysStringLen
(
szValue
)
;
nsAutoString
text
(
szValue
length
)
;
ht
-
>
ReplaceText
(
text
)
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
GetTypeInfoCount
(
UINT
*
pctinfo
)
{
if
(
!
pctinfo
)
return
E_INVALIDARG
;
*
pctinfo
=
1
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
GetTypeInfo
(
UINT
iTInfo
LCID
lcid
ITypeInfo
*
*
ppTInfo
)
{
if
(
!
ppTInfo
)
return
E_INVALIDARG
;
*
ppTInfo
=
nullptr
;
if
(
iTInfo
!
=
0
)
return
DISP_E_BADINDEX
;
ITypeInfo
*
typeInfo
=
GetTI
(
lcid
)
;
if
(
!
typeInfo
)
return
E_FAIL
;
typeInfo
-
>
AddRef
(
)
;
*
ppTInfo
=
typeInfo
;
return
S_OK
;
}
STDMETHODIMP
MsaaAccessible
:
:
GetIDsOfNames
(
REFIID
riid
LPOLESTR
*
rgszNames
UINT
cNames
LCID
lcid
DISPID
*
rgDispId
)
{
ITypeInfo
*
typeInfo
=
GetTI
(
lcid
)
;
if
(
!
typeInfo
)
return
E_FAIL
;
HRESULT
hr
=
DispGetIDsOfNames
(
typeInfo
rgszNames
cNames
rgDispId
)
;
return
hr
;
}
STDMETHODIMP
MsaaAccessible
:
:
Invoke
(
DISPID
dispIdMember
REFIID
riid
LCID
lcid
WORD
wFlags
DISPPARAMS
*
pDispParams
VARIANT
*
pVarResult
EXCEPINFO
*
pExcepInfo
UINT
*
puArgErr
)
{
ITypeInfo
*
typeInfo
=
GetTI
(
lcid
)
;
if
(
!
typeInfo
)
return
E_FAIL
;
return
typeInfo
-
>
Invoke
(
static_cast
<
IAccessible
*
>
(
this
)
dispIdMember
wFlags
pDispParams
pVarResult
pExcepInfo
puArgErr
)
;
}
