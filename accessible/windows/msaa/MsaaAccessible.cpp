#
include
"
MsaaAccessible
.
h
"
#
include
"
sdnAccessible
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
MsaaIdGenerator
MsaaAccessible
:
:
sIDGen
;
MsaaAccessible
:
:
MsaaAccessible
(
)
:
mID
(
kNoID
)
{
}
MsaaAccessible
:
:
~
MsaaAccessible
(
)
{
if
(
mID
!
=
kNoID
)
{
sIDGen
.
ReleaseID
(
WrapNotNull
(
this
)
)
;
}
}
void
MsaaAccessible
:
:
SetID
(
uint32_t
aID
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
static_cast
<
AccessibleWrap
*
>
(
this
)
-
>
IsProxy
(
)
)
;
mID
=
aID
;
}
int32_t
MsaaAccessible
:
:
GetChildIDFor
(
LocalAccessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
return
0
;
}
if
(
aAccessible
-
>
IsProxy
(
)
)
{
const
uint32_t
id
=
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
MOZ_ASSERT
(
id
!
=
kNoID
)
;
return
id
;
}
if
(
!
aAccessible
-
>
Document
(
)
)
return
0
;
uint32_t
*
id
=
&
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
if
(
*
id
!
=
kNoID
)
return
*
id
;
*
id
=
sIDGen
.
GetID
(
)
;
MOZ_ASSERT
(
!
aAccessible
-
>
IsProxy
(
)
)
;
DocAccessibleWrap
*
doc
=
static_cast
<
DocAccessibleWrap
*
>
(
aAccessible
-
>
Document
(
)
)
;
doc
-
>
AddID
(
*
id
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
)
;
return
*
id
;
}
uint32_t
MsaaAccessible
:
:
GetContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
return
sIDGen
.
GetContentProcessIDFor
(
aIPCContentId
)
;
}
void
MsaaAccessible
:
:
ReleaseContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
sIDGen
.
ReleaseContentProcessIDFor
(
aIPCContentId
)
;
}
void
MsaaAccessible
:
:
AssignChildIDTo
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
aSdnAcc
-
>
SetUniqueID
(
sIDGen
.
GetID
(
)
)
;
}
void
MsaaAccessible
:
:
ReleaseChildID
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
sIDGen
.
ReleaseID
(
aSdnAcc
)
;
}
