#
include
"
ia2AccessibleApplication
.
h
"
#
include
"
AccessibleApplication_i
.
c
"
#
include
"
ApplicationAccessibleWrap
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
ApplicationAccessible
*
ia2AccessibleApplication
:
:
AppAcc
(
)
{
auto
wrap
=
static_cast
<
ApplicationAccessibleWrap
*
>
(
this
)
;
AccessibleWrap
*
acc
=
static_cast
<
MsaaAccessible
*
>
(
wrap
)
-
>
LocalAcc
(
)
;
return
static_cast
<
ApplicationAccessible
*
>
(
acc
)
;
}
STDMETHODIMP
ia2AccessibleApplication
:
:
QueryInterface
(
REFIID
iid
void
*
*
ppv
)
{
if
(
!
ppv
)
return
E_INVALIDARG
;
*
ppv
=
nullptr
;
if
(
IID_IAccessibleApplication
=
=
iid
)
{
*
ppv
=
static_cast
<
IAccessibleApplication
*
>
(
this
)
;
(
reinterpret_cast
<
IUnknown
*
>
(
*
ppv
)
)
-
>
AddRef
(
)
;
return
S_OK
;
}
return
E_NOINTERFACE
;
}
STDMETHODIMP
ia2AccessibleApplication
:
:
get_appName
(
BSTR
*
aName
)
{
if
(
!
aName
)
return
E_INVALIDARG
;
*
aName
=
nullptr
;
ApplicationAccessible
*
appAcc
=
AppAcc
(
)
;
if
(
!
appAcc
)
return
CO_E_OBJNOTCONNECTED
;
nsAutoString
name
;
appAcc
-
>
AppName
(
name
)
;
if
(
name
.
IsEmpty
(
)
)
return
S_FALSE
;
*
aName
=
:
:
SysAllocStringLen
(
name
.
get
(
)
name
.
Length
(
)
)
;
return
*
aName
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
ia2AccessibleApplication
:
:
get_appVersion
(
BSTR
*
aVersion
)
{
if
(
!
aVersion
)
return
E_INVALIDARG
;
*
aVersion
=
nullptr
;
ApplicationAccessible
*
appAcc
=
AppAcc
(
)
;
if
(
!
appAcc
)
return
CO_E_OBJNOTCONNECTED
;
nsAutoString
version
;
appAcc
-
>
AppVersion
(
version
)
;
if
(
version
.
IsEmpty
(
)
)
return
S_FALSE
;
*
aVersion
=
:
:
SysAllocStringLen
(
version
.
get
(
)
version
.
Length
(
)
)
;
return
*
aVersion
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
ia2AccessibleApplication
:
:
get_toolkitName
(
BSTR
*
aName
)
{
if
(
!
aName
)
return
E_INVALIDARG
;
ApplicationAccessible
*
appAcc
=
AppAcc
(
)
;
if
(
!
appAcc
)
return
CO_E_OBJNOTCONNECTED
;
nsAutoString
name
;
appAcc
-
>
PlatformName
(
name
)
;
if
(
name
.
IsEmpty
(
)
)
return
S_FALSE
;
*
aName
=
:
:
SysAllocStringLen
(
name
.
get
(
)
name
.
Length
(
)
)
;
return
*
aName
?
S_OK
:
E_OUTOFMEMORY
;
}
STDMETHODIMP
ia2AccessibleApplication
:
:
get_toolkitVersion
(
BSTR
*
aVersion
)
{
if
(
!
aVersion
)
return
E_INVALIDARG
;
*
aVersion
=
nullptr
;
ApplicationAccessible
*
appAcc
=
AppAcc
(
)
;
if
(
!
appAcc
)
return
CO_E_OBJNOTCONNECTED
;
nsAutoString
version
;
appAcc
-
>
PlatformVersion
(
version
)
;
if
(
version
.
IsEmpty
(
)
)
return
S_FALSE
;
*
aVersion
=
:
:
SysAllocStringLen
(
version
.
get
(
)
version
.
Length
(
)
)
;
return
*
aVersion
?
S_OK
:
E_OUTOFMEMORY
;
}
