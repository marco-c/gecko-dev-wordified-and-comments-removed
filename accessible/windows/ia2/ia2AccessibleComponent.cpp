#
include
"
ia2AccessibleComponent
.
h
"
#
include
"
AccessibleComponent_i
.
c
"
#
include
"
AccessibleWrap
.
h
"
#
include
"
States
.
h
"
#
include
"
IUnknownImpl
.
h
"
#
include
"
MsaaAccessible
.
h
"
#
include
"
nsIFrame
.
h
"
using
namespace
mozilla
:
:
a11y
;
AccessibleWrap
*
ia2AccessibleComponent
:
:
LocalAcc
(
)
{
return
static_cast
<
MsaaAccessible
*
>
(
this
)
-
>
LocalAcc
(
)
;
}
STDMETHODIMP
ia2AccessibleComponent
:
:
QueryInterface
(
REFIID
iid
void
*
*
ppv
)
{
if
(
!
ppv
)
return
E_INVALIDARG
;
*
ppv
=
nullptr
;
if
(
IID_IAccessibleComponent
=
=
iid
)
{
*
ppv
=
static_cast
<
IAccessibleComponent
*
>
(
this
)
;
(
reinterpret_cast
<
IUnknown
*
>
(
*
ppv
)
)
-
>
AddRef
(
)
;
return
S_OK
;
}
return
E_NOINTERFACE
;
}
STDMETHODIMP
ia2AccessibleComponent
:
:
get_locationInParent
(
long
*
aX
long
*
aY
)
{
if
(
!
aX
|
|
!
aY
)
return
E_INVALIDARG
;
*
aX
=
0
;
*
aY
=
0
;
AccessibleWrap
*
acc
=
LocalAcc
(
)
;
if
(
!
acc
)
return
CO_E_OBJNOTCONNECTED
;
uint64_t
state
=
acc
-
>
State
(
)
;
if
(
state
&
states
:
:
INVISIBLE
)
return
S_OK
;
LayoutDeviceIntRect
rect
=
acc
-
>
Bounds
(
)
;
if
(
!
acc
-
>
LocalParent
(
)
)
{
*
aX
=
rect
.
X
(
)
;
*
aY
=
rect
.
Y
(
)
;
return
S_OK
;
}
LayoutDeviceIntRect
parentRect
=
acc
-
>
LocalParent
(
)
-
>
Bounds
(
)
;
*
aX
=
rect
.
X
(
)
-
parentRect
.
X
(
)
;
*
aY
=
rect
.
Y
(
)
-
parentRect
.
Y
(
)
;
return
S_OK
;
}
STDMETHODIMP
ia2AccessibleComponent
:
:
get_foreground
(
IA2Color
*
aForeground
)
{
if
(
!
aForeground
)
return
E_INVALIDARG
;
*
aForeground
=
0
;
AccessibleWrap
*
acc
=
LocalAcc
(
)
;
if
(
!
acc
)
return
CO_E_OBJNOTCONNECTED
;
nsIFrame
*
frame
=
acc
-
>
GetFrame
(
)
;
if
(
frame
)
*
aForeground
=
frame
-
>
StyleText
(
)
-
>
mColor
.
ToColor
(
)
;
return
S_OK
;
}
STDMETHODIMP
ia2AccessibleComponent
:
:
get_background
(
IA2Color
*
aBackground
)
{
if
(
!
aBackground
)
return
E_INVALIDARG
;
*
aBackground
=
0
;
AccessibleWrap
*
acc
=
LocalAcc
(
)
;
if
(
!
acc
)
return
CO_E_OBJNOTCONNECTED
;
nsIFrame
*
frame
=
acc
-
>
GetFrame
(
)
;
if
(
frame
)
{
*
aBackground
=
frame
-
>
StyleBackground
(
)
-
>
BackgroundColor
(
frame
)
;
}
return
S_OK
;
}
