#
ifndef
MOZILLA_A11Y_ProxyWrappers_h
#
define
MOZILLA_A11Y_ProxyWrappers_h
#
include
"
HyperTextAccessibleWrap
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
RemoteAccessibleWrap
:
public
AccessibleWrap
{
public
:
explicit
RemoteAccessibleWrap
(
RemoteAccessible
*
aProxy
)
:
AccessibleWrap
(
nullptr
nullptr
)
{
mType
=
eProxyType
;
mBits
.
proxy
=
aProxy
;
}
virtual
void
Shutdown
(
)
override
{
if
(
mMsaa
)
{
mMsaa
-
>
MsaaShutdown
(
)
;
}
mBits
.
proxy
=
nullptr
;
mStateFlags
|
=
eIsDefunct
;
}
virtual
void
GetNativeInterface
(
void
*
*
aOutAccessible
)
override
{
mBits
.
proxy
-
>
GetCOMInterface
(
aOutAccessible
)
;
}
}
;
class
HyperTextRemoteAccessibleWrap
:
public
HyperTextAccessibleWrap
{
public
:
explicit
HyperTextRemoteAccessibleWrap
(
RemoteAccessible
*
aProxy
)
:
HyperTextAccessibleWrap
(
nullptr
nullptr
)
{
mType
=
eProxyType
;
mBits
.
proxy
=
aProxy
;
}
virtual
void
Shutdown
(
)
override
{
if
(
mMsaa
)
{
mMsaa
-
>
MsaaShutdown
(
)
;
}
mBits
.
proxy
=
nullptr
;
mStateFlags
|
=
eIsDefunct
;
}
virtual
void
GetNativeInterface
(
void
*
*
aOutAccessible
)
override
{
mBits
.
proxy
-
>
GetCOMInterface
(
aOutAccessible
)
;
}
}
;
class
DocRemoteAccessibleWrap
:
public
HyperTextRemoteAccessibleWrap
{
public
:
explicit
DocRemoteAccessibleWrap
(
RemoteAccessible
*
aProxy
)
:
HyperTextRemoteAccessibleWrap
(
aProxy
)
{
mGenericTypes
|
=
eDocument
;
}
void
AddID
(
uint32_t
aID
AccessibleWrap
*
aAcc
)
{
mIDToAccessibleMap
.
InsertOrUpdate
(
aID
aAcc
)
;
}
void
RemoveID
(
uint32_t
aID
)
{
mIDToAccessibleMap
.
Remove
(
aID
)
;
}
AccessibleWrap
*
GetAccessibleByID
(
uint32_t
aID
)
const
{
return
mIDToAccessibleMap
.
Get
(
aID
)
;
}
virtual
nsIntRect
Bounds
(
)
const
override
{
return
nsIntRect
(
)
;
}
private
:
nsTHashMap
<
nsUint32HashKey
AccessibleWrap
*
>
mIDToAccessibleMap
;
}
;
class
RemoteIframeDocRemoteAccessibleWrap
:
public
HyperTextAccessibleWrap
{
public
:
explicit
RemoteIframeDocRemoteAccessibleWrap
(
IDispatch
*
aCOMProxy
)
:
HyperTextAccessibleWrap
(
nullptr
nullptr
)
mCOMProxy
(
aCOMProxy
)
{
mType
=
eProxyType
;
mBits
.
proxy
=
nullptr
;
}
virtual
void
Shutdown
(
)
override
{
MOZ_ASSERT
(
!
mMsaa
)
;
mStateFlags
|
=
eIsDefunct
;
mCOMProxy
=
nullptr
;
}
virtual
void
GetNativeInterface
(
void
*
*
aOutAccessible
)
override
{
RefPtr
<
IDispatch
>
addRefed
=
mCOMProxy
;
addRefed
.
forget
(
aOutAccessible
)
;
}
virtual
nsIntRect
Bounds
(
)
const
override
{
return
nsIntRect
(
)
;
}
private
:
RefPtr
<
IDispatch
>
mCOMProxy
;
}
;
}
}
#
endif
