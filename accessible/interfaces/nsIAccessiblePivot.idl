#
include
"
nsISupports
.
idl
"
typedef
short
PivotMoveReason
;
interface
nsIAccessible
;
interface
nsIAccessibleTraversalRule
;
[
scriptable
uuid
(
81fe5144
-
059b
-
42db
-
bd3a
-
f6ce3158d5e9
)
]
interface
nsIAccessiblePivot
:
nsISupports
{
const
PivotMoveReason
REASON_NONE
=
0
;
const
PivotMoveReason
REASON_NEXT
=
1
;
const
PivotMoveReason
REASON_PREV
=
2
;
const
PivotMoveReason
REASON_FIRST
=
3
;
const
PivotMoveReason
REASON_LAST
=
4
;
const
PivotMoveReason
REASON_POINT
=
5
;
[
optional_argc
]
nsIAccessible
next
(
in
nsIAccessible
aAnchor
in
nsIAccessibleTraversalRule
aRule
[
optional
]
in
boolean
aIncludeStart
)
;
[
optional_argc
]
nsIAccessible
prev
(
in
nsIAccessible
aAnchor
in
nsIAccessibleTraversalRule
aRule
[
optional
]
in
boolean
aIncludeStart
)
;
nsIAccessible
first
(
in
nsIAccessibleTraversalRule
aRule
)
;
nsIAccessible
last
(
in
nsIAccessibleTraversalRule
aRule
)
;
nsIAccessible
atPoint
(
in
long
aX
in
long
aY
in
nsIAccessibleTraversalRule
aRule
)
;
}
;
[
scriptable
uuid
(
e197460d
-
1eff
-
4247
-
b4bb
-
a43be1840dae
)
]
interface
nsIAccessibleTraversalRule
:
nsISupports
{
const
unsigned
short
FILTER_IGNORE
=
0x0
;
const
unsigned
short
FILTER_MATCH
=
0x1
;
const
unsigned
short
FILTER_IGNORE_SUBTREE
=
0x2
;
unsigned
short
match
(
in
nsIAccessible
aAccessible
)
;
}
;
