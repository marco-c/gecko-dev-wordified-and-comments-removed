#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
AccAttributes
.
h
"
#
include
"
DocAccessibleChild
.
h
"
#
include
"
DocAccessibleWrap
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
Pivot
.
h
"
#
include
"
SessionAccessibility
.
h
"
#
include
"
TraversalRule
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessiblePlatformExtChild
.
h
"
#
include
"
mozilla
/
StaticPrefs_accessibility
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
#
define
UNIQUE_ID
(
acc
)
\
!
acc
|
|
(
acc
-
>
IsDoc
(
)
&
&
acc
-
>
AsDoc
(
)
-
>
IPCDoc
(
)
)
\
?
0
\
:
reinterpret_cast
<
uint64_t
>
(
acc
-
>
UniqueID
(
)
)
DocAccessibleWrap
:
:
DocAccessibleWrap
(
Document
*
aDocument
PresShell
*
aPresShell
)
:
DocAccessible
(
aDocument
aPresShell
)
{
if
(
!
IPCAccessibilityActive
(
)
)
{
MonitorAutoLock
mal
(
nsAccessibilityService
:
:
GetAndroidMonitor
(
)
)
;
SessionAccessibility
:
:
RegisterAccessible
(
this
)
;
}
}
DocAccessibleWrap
:
:
~
DocAccessibleWrap
(
)
{
}
void
DocAccessibleWrap
:
:
Shutdown
(
)
{
if
(
!
IPCAccessibilityActive
(
)
)
{
MonitorAutoLock
mal
(
nsAccessibilityService
:
:
GetAndroidMonitor
(
)
)
;
if
(
IsRoot
(
)
)
{
SessionAccessibility
:
:
UnregisterAll
(
PresShellPtr
(
)
)
;
}
else
{
SessionAccessibility
:
:
UnregisterAccessible
(
this
)
;
}
}
DocAccessible
:
:
Shutdown
(
)
;
}
DocAccessibleWrap
*
DocAccessibleWrap
:
:
GetTopLevelContentDoc
(
AccessibleWrap
*
aAccessible
)
{
DocAccessibleWrap
*
doc
=
static_cast
<
DocAccessibleWrap
*
>
(
aAccessible
-
>
Document
(
)
)
;
while
(
doc
&
&
!
doc
-
>
IsTopLevelContentDoc
(
)
)
{
doc
=
static_cast
<
DocAccessibleWrap
*
>
(
doc
-
>
ParentDocument
(
)
)
;
}
return
doc
;
}
bool
DocAccessibleWrap
:
:
IsTopLevelContentDoc
(
)
{
DocAccessible
*
parentDoc
=
ParentDocument
(
)
;
return
DocumentNode
(
)
-
>
IsContentDocument
(
)
&
&
(
!
parentDoc
|
|
!
parentDoc
-
>
DocumentNode
(
)
-
>
IsContentDocument
(
)
)
;
}
#
undef
UNIQUE_ID
