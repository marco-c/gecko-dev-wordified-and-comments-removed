#
ifndef
mozilla_a11y_AccessibleWrap_h_
#
define
mozilla_a11y_AccessibleWrap_h_
#
include
"
Accessible
.
h
"
#
include
"
GeneratedJNIWrappers
.
h
"
#
include
"
mozilla
/
a11y
/
ProxyAccessible
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
AccessibleWrap
:
public
Accessible
{
public
:
AccessibleWrap
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
~
AccessibleWrap
(
)
;
virtual
nsresult
HandleAccEvent
(
AccEvent
*
aEvent
)
override
;
virtual
void
Shutdown
(
)
override
;
int32_t
VirtualViewID
(
)
const
{
return
mID
;
}
virtual
void
SetTextContents
(
const
nsAString
&
aText
)
;
virtual
void
GetTextContents
(
nsAString
&
aText
)
;
virtual
bool
GetSelectionBounds
(
int32_t
*
aStartOffset
int32_t
*
aEndOffset
)
;
mozilla
:
:
java
:
:
GeckoBundle
:
:
LocalRef
ToBundle
(
)
;
int32_t
AndroidClass
(
)
{
return
mID
=
=
kNoID
?
java
:
:
SessionAccessibility
:
:
CLASSNAME_WEBVIEW
:
GetAndroidClass
(
WrapperRole
(
)
)
;
}
static
const
int32_t
kNoID
=
-
1
;
protected
:
static
int32_t
AcquireID
(
)
;
static
void
ReleaseID
(
int32_t
aID
)
;
static
int32_t
GetAndroidClass
(
role
aRole
)
;
static
int32_t
GetInputType
(
const
nsString
&
aInputTypeAttr
)
;
int32_t
mID
;
private
:
virtual
AccessibleWrap
*
WrapperParent
(
)
{
return
static_cast
<
AccessibleWrap
*
>
(
Parent
(
)
)
;
}
virtual
bool
WrapperRangeInfo
(
double
*
aCurVal
double
*
aMinVal
double
*
aMaxVal
double
*
aStep
)
;
virtual
role
WrapperRole
(
)
{
return
Role
(
)
;
}
virtual
void
WrapperDOMNodeID
(
nsString
&
aDOMNodeID
)
;
static
void
GetRoleDescription
(
role
aRole
nsAString
&
aGeckoRole
nsAString
&
aRoleDescription
)
;
static
uint64_t
GetFlags
(
role
aRole
uint64_t
aState
)
;
}
;
static
inline
AccessibleWrap
*
WrapperFor
(
const
ProxyAccessible
*
aProxy
)
{
return
reinterpret_cast
<
AccessibleWrap
*
>
(
aProxy
-
>
GetWrapper
(
)
)
;
}
}
}
#
endif
