#
ifndef
mozilla_a11y_AccessibleWrap_h_
#
define
mozilla_a11y_AccessibleWrap_h_
#
include
"
Accessible
.
h
"
#
include
"
GeneratedJNIWrappers
.
h
"
#
include
"
mozilla
/
a11y
/
ProxyAccessible
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
AccessibleWrap
:
public
Accessible
{
public
:
AccessibleWrap
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
~
AccessibleWrap
(
)
;
virtual
nsresult
HandleAccEvent
(
AccEvent
*
aEvent
)
override
;
virtual
void
Shutdown
(
)
override
;
int32_t
VirtualViewID
(
)
const
{
return
mID
;
}
virtual
void
SetTextContents
(
const
nsAString
&
aText
)
;
virtual
void
GetTextContents
(
nsAString
&
aText
)
;
virtual
bool
GetSelectionBounds
(
int32_t
*
aStartOffset
int32_t
*
aEndOffset
)
;
virtual
mozilla
:
:
java
:
:
GeckoBundle
:
:
LocalRef
ToBundle
(
)
;
static
const
int32_t
kNoID
=
-
1
;
protected
:
mozilla
:
:
java
:
:
GeckoBundle
:
:
LocalRef
CreateBundle
(
int32_t
aParentID
role
aRole
uint64_t
aState
const
nsString
&
aName
const
nsString
&
aTextValue
const
nsString
&
aDOMNodeID
const
nsIntRect
&
aBounds
double
aCurVal
double
aMinVal
double
aMaxVal
double
aStep
nsIPersistentProperties
*
aAttributes
const
nsTArray
<
int32_t
>
&
aChildren
)
const
;
static
int32_t
AcquireID
(
)
;
static
void
ReleaseID
(
int32_t
aID
)
;
int32_t
mID
;
private
:
void
DOMNodeID
(
nsString
&
aDOMNodeID
)
;
static
void
GetAndroidRoleAndClass
(
role
aRole
nsAString
&
aGeckoRole
nsAString
&
aRoleDescription
nsAString
&
aClassStr
)
;
static
uint64_t
GetFlags
(
role
aRole
uint64_t
aState
)
;
}
;
static
inline
AccessibleWrap
*
WrapperFor
(
const
ProxyAccessible
*
aProxy
)
{
return
reinterpret_cast
<
AccessibleWrap
*
>
(
aProxy
-
>
GetWrapper
(
)
)
;
}
}
}
#
endif
