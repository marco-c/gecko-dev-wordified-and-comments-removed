#
ifndef
mozilla_a11y_DocAccessibleWrap_h__
#
define
mozilla_a11y_DocAccessibleWrap_h__
#
include
"
DocAccessible
.
h
"
#
include
"
nsITimer
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
DocAccessibleWrap
:
public
DocAccessible
{
public
:
DocAccessibleWrap
(
nsIDocument
*
aDocument
nsIPresShell
*
aPresShell
)
;
virtual
~
DocAccessibleWrap
(
)
;
virtual
nsresult
HandleAccEvent
(
AccEvent
*
aEvent
)
override
;
void
AddID
(
uint32_t
aID
AccessibleWrap
*
aAcc
)
{
mIDToAccessibleMap
.
Put
(
aID
aAcc
)
;
}
void
RemoveID
(
uint32_t
aID
)
{
mIDToAccessibleMap
.
Remove
(
aID
)
;
}
AccessibleWrap
*
GetAccessibleByID
(
int32_t
aID
)
const
;
DocAccessibleWrap
*
GetTopLevelContentDoc
(
AccessibleWrap
*
aAccessible
)
;
void
CacheFocusPath
(
AccessibleWrap
*
aAccessible
)
;
enum
{
eBatch_Viewport
=
0
eBatch_FocusPath
=
1
eBatch_BoundsUpdate
=
2
}
;
protected
:
nsDataHashtable
<
nsUint32HashKey
AccessibleWrap
*
>
mIDToAccessibleMap
;
virtual
void
DoInitialUpdate
(
)
override
;
private
:
void
CacheViewport
(
)
;
void
UpdateFocusPathBounds
(
)
;
static
void
CacheViewportCallback
(
nsITimer
*
aTimer
void
*
aDocAccParam
)
;
nsCOMPtr
<
nsITimer
>
mCacheRefreshTimer
;
AccessibleHashtable
mFocusPath
;
}
;
}
}
#
endif
