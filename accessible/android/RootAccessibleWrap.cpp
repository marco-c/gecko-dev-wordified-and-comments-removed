#
include
"
RootAccessibleWrap
.
h
"
#
include
"
Accessible
-
inl
.
h
"
#
include
"
AccessibleOrProxy
.
h
"
#
include
"
DocAccessibleParent
.
h
"
#
include
"
DocAccessible
-
inl
.
h
"
#
include
"
ProxyAccessibleWrap
.
h
"
#
include
"
SessionAccessibility
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
RootAccessibleWrap
:
:
RootAccessibleWrap
(
dom
:
:
Document
*
aDoc
PresShell
*
aPresShell
)
:
RootAccessible
(
aDoc
aPresShell
)
{
}
RootAccessibleWrap
:
:
~
RootAccessibleWrap
(
)
{
}
AccessibleWrap
*
RootAccessibleWrap
:
:
GetContentAccessible
(
)
{
if
(
ProxyAccessible
*
proxy
=
GetPrimaryRemoteTopLevelContentDoc
(
)
)
{
return
WrapperFor
(
proxy
)
;
}
for
(
size_t
i
=
0
;
i
<
ChildDocumentCount
(
)
;
i
+
+
)
{
DocAccessible
*
childDoc
=
GetChildDocumentAt
(
i
)
;
if
(
childDoc
&
&
!
childDoc
-
>
IsDefunct
(
)
&
&
!
childDoc
-
>
IsHidden
(
)
)
{
return
childDoc
;
}
}
return
nullptr
;
}
AccessibleWrap
*
RootAccessibleWrap
:
:
FindAccessibleById
(
int32_t
aID
)
{
AccessibleWrap
*
contentAcc
=
GetContentAccessible
(
)
;
if
(
!
contentAcc
)
{
return
nullptr
;
}
if
(
aID
=
=
AccessibleWrap
:
:
kNoID
)
{
return
contentAcc
;
}
if
(
contentAcc
-
>
IsProxy
(
)
)
{
return
FindAccessibleById
(
static_cast
<
DocProxyAccessibleWrap
*
>
(
contentAcc
)
aID
)
;
}
return
FindAccessibleById
(
static_cast
<
DocAccessibleWrap
*
>
(
contentAcc
-
>
AsDoc
(
)
)
aID
)
;
}
AccessibleWrap
*
RootAccessibleWrap
:
:
FindAccessibleById
(
DocProxyAccessibleWrap
*
aDoc
int32_t
aID
)
{
AccessibleWrap
*
acc
=
aDoc
-
>
GetAccessibleByID
(
aID
)
;
uint32_t
index
=
0
;
while
(
!
acc
)
{
auto
child
=
static_cast
<
DocProxyAccessibleWrap
*
>
(
aDoc
-
>
GetChildDocumentAt
(
index
+
+
)
)
;
if
(
!
child
)
{
break
;
}
if
(
child
-
>
VirtualViewID
(
)
=
=
aID
)
{
acc
=
child
;
}
else
{
acc
=
FindAccessibleById
(
child
aID
)
;
}
}
return
acc
;
}
AccessibleWrap
*
RootAccessibleWrap
:
:
FindAccessibleById
(
DocAccessibleWrap
*
aDoc
int32_t
aID
)
{
AccessibleWrap
*
acc
=
aDoc
-
>
GetAccessibleByID
(
aID
)
;
uint32_t
index
=
0
;
while
(
!
acc
)
{
auto
child
=
static_cast
<
DocAccessibleWrap
*
>
(
aDoc
-
>
GetChildDocumentAt
(
index
+
+
)
)
;
if
(
!
child
)
{
break
;
}
acc
=
FindAccessibleById
(
child
aID
)
;
}
return
acc
;
}
