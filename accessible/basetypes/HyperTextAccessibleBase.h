#
ifndef
_HyperTextAccessibleBase_H_
#
define
_HyperTextAccessibleBase_H_
#
include
"
nsIAccessibleText
.
h
"
namespace
mozilla
:
:
a11y
{
class
Accessible
;
class
TextLeafPoint
;
const
char16_t
kEmbeddedObjectChar
=
0xfffc
;
const
char16_t
kImaginaryEmbeddedObjectChar
=
'
'
;
const
char16_t
kForcedNewLineChar
=
'
\
n
'
;
class
index_t
{
public
:
MOZ_IMPLICIT
index_t
(
int32_t
aVal
)
:
mVal
(
aVal
)
{
}
operator
uint32_t
(
)
const
{
MOZ_ASSERT
(
mVal
>
=
0
"
Attempt
to
use
wrong
index
!
"
)
;
return
mVal
;
}
bool
IsValid
(
)
const
{
return
mVal
>
=
0
;
}
private
:
int32_t
mVal
;
}
;
class
HyperTextAccessibleBase
{
public
:
virtual
int32_t
GetChildIndexAtOffset
(
uint32_t
aOffset
)
const
;
virtual
Accessible
*
GetChildAtOffset
(
uint32_t
aOffset
)
const
;
int32_t
GetChildOffset
(
const
Accessible
*
aChild
bool
aInvalidateAfter
=
false
)
const
;
virtual
int32_t
GetChildOffset
(
uint32_t
aChildIndex
bool
aInvalidateAfter
=
false
)
const
;
virtual
uint32_t
CharacterCount
(
)
const
;
virtual
int32_t
CaretOffset
(
)
const
=
0
;
index_t
ConvertMagicOffset
(
int32_t
aOffset
)
const
;
virtual
void
TextSubstring
(
int32_t
aStartOffset
int32_t
aEndOffset
nsAString
&
aText
)
const
;
bool
CharAt
(
int32_t
aOffset
nsAString
&
aChar
int32_t
*
aStartOffset
=
nullptr
int32_t
*
aEndOffset
=
nullptr
)
;
TextLeafPoint
ToTextLeafPoint
(
int32_t
aOffset
bool
aDescendToEnd
=
false
)
;
virtual
void
TextAtOffset
(
int32_t
aOffset
AccessibleTextBoundary
aBoundaryType
int32_t
*
aStartOffset
int32_t
*
aEndOffset
nsAString
&
aText
)
;
bool
IsValidOffset
(
int32_t
aOffset
)
;
bool
IsValidRange
(
int32_t
aStartOffset
int32_t
aEndOffset
)
;
protected
:
virtual
const
Accessible
*
Acc
(
)
const
=
0
;
Accessible
*
Acc
(
)
{
const
Accessible
*
acc
=
const_cast
<
const
HyperTextAccessibleBase
*
>
(
this
)
-
>
Acc
(
)
;
return
const_cast
<
Accessible
*
>
(
acc
)
;
}
private
:
uint32_t
TransformOffset
(
Accessible
*
aDescendant
uint32_t
aOffset
bool
aIsEndOffset
)
const
;
}
;
}
#
endif
