#
ifndef
_HyperTextAccessibleBase_H_
#
define
_HyperTextAccessibleBase_H_
#
include
"
AccAttributes
.
h
"
#
include
"
nsIAccessibleText
.
h
"
#
include
"
nsIAccessibleTypes
.
h
"
namespace
mozilla
:
:
a11y
{
class
Accessible
;
class
TextLeafPoint
;
class
TextRange
;
const
char16_t
kEmbeddedObjectChar
=
0xfffc
;
const
char16_t
kImaginaryEmbeddedObjectChar
=
'
'
;
const
char16_t
kForcedNewLineChar
=
'
\
n
'
;
class
index_t
{
public
:
MOZ_IMPLICIT
index_t
(
int32_t
aVal
)
:
mVal
(
aVal
)
{
}
operator
uint32_t
(
)
const
{
MOZ_ASSERT
(
mVal
>
=
0
"
Attempt
to
use
wrong
index
!
"
)
;
return
mVal
;
}
bool
IsValid
(
)
const
{
return
mVal
>
=
0
;
}
private
:
int32_t
mVal
;
}
;
class
HyperTextAccessibleBase
{
public
:
virtual
int32_t
GetChildIndexAtOffset
(
uint32_t
aOffset
)
const
;
virtual
Accessible
*
GetChildAtOffset
(
uint32_t
aOffset
)
const
;
int32_t
GetChildOffset
(
const
Accessible
*
aChild
bool
aInvalidateAfter
=
false
)
const
;
virtual
int32_t
GetChildOffset
(
uint32_t
aChildIndex
bool
aInvalidateAfter
=
false
)
const
;
uint32_t
CharacterCount
(
)
const
;
virtual
int32_t
CaretOffset
(
)
const
;
virtual
void
SetCaretOffset
(
int32_t
aOffset
)
=
0
;
virtual
int32_t
CaretLineNumber
(
)
;
index_t
ConvertMagicOffset
(
int32_t
aOffset
)
const
;
void
TextSubstring
(
int32_t
aStartOffset
int32_t
aEndOffset
nsAString
&
aText
)
const
;
bool
CharAt
(
int32_t
aOffset
nsAString
&
aChar
int32_t
*
aStartOffset
=
nullptr
int32_t
*
aEndOffset
=
nullptr
)
;
char16_t
CharAt
(
int32_t
aOffset
)
{
nsAutoString
charAtOffset
;
CharAt
(
aOffset
charAtOffset
)
;
return
charAtOffset
.
CharAt
(
0
)
;
}
LayoutDeviceIntRect
CharBounds
(
int32_t
aOffset
uint32_t
aCoordType
)
;
LayoutDeviceIntRect
TextBounds
(
int32_t
aStartOffset
int32_t
aEndOffset
uint32_t
aCoordType
=
nsIAccessibleCoordinateType
:
:
COORDTYPE_SCREEN_RELATIVE
)
;
virtual
int32_t
OffsetAtPoint
(
int32_t
aX
int32_t
aY
uint32_t
aCoordType
)
;
TextLeafPoint
ToTextLeafPoint
(
int32_t
aOffset
bool
aDescendToEnd
=
false
)
;
void
TextBeforeOffset
(
int32_t
aOffset
AccessibleTextBoundary
aBoundaryType
int32_t
*
aStartOffset
int32_t
*
aEndOffset
nsAString
&
aText
)
;
void
TextAtOffset
(
int32_t
aOffset
AccessibleTextBoundary
aBoundaryType
int32_t
*
aStartOffset
int32_t
*
aEndOffset
nsAString
&
aText
)
;
void
TextAfterOffset
(
int32_t
aOffset
AccessibleTextBoundary
aBoundaryType
int32_t
*
aStartOffset
int32_t
*
aEndOffset
nsAString
&
aText
)
;
bool
IsValidOffset
(
int32_t
aOffset
)
;
bool
IsValidRange
(
int32_t
aStartOffset
int32_t
aEndOffset
)
;
uint32_t
LinkCount
(
)
;
Accessible
*
LinkAt
(
uint32_t
aIndex
)
;
int32_t
LinkIndexOf
(
Accessible
*
aLink
)
;
int32_t
LinkIndexAtOffset
(
uint32_t
aOffset
)
{
Accessible
*
child
=
GetChildAtOffset
(
aOffset
)
;
return
child
?
LinkIndexOf
(
child
)
:
-
1
;
}
std
:
:
pair
<
bool
int32_t
>
TransformOffset
(
Accessible
*
aDescendant
int32_t
aOffset
bool
aIsEndOffset
)
const
;
already_AddRefed
<
AccAttributes
>
TextAttributes
(
bool
aIncludeDefAttrs
int32_t
aOffset
int32_t
*
aStartOffset
int32_t
*
aEndOffset
)
;
virtual
already_AddRefed
<
AccAttributes
>
DefaultTextAttributes
(
)
=
0
;
virtual
void
SelectionRanges
(
nsTArray
<
TextRange
>
*
aRanges
)
const
=
0
;
virtual
int32_t
SelectionCount
(
)
;
virtual
bool
SelectionBoundsAt
(
int32_t
aSelectionNum
int32_t
*
aStartOffset
int32_t
*
aEndOffset
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
bool
SetSelectionBoundsAt
(
int32_t
aSelectionNum
int32_t
aStartOffset
int32_t
aEndOffset
)
;
bool
AddToSelection
(
int32_t
aStartOffset
int32_t
aEndOffset
)
{
return
SetSelectionBoundsAt
(
-
1
aStartOffset
aEndOffset
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
bool
RemoveFromSelection
(
int32_t
aSelectionNum
)
=
0
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
ScrollSubstringTo
(
int32_t
aStartOffset
int32_t
aEndOffset
uint32_t
aScrollType
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
ReplaceText
(
const
nsAString
&
aText
)
=
0
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
InsertText
(
const
nsAString
&
aText
int32_t
aPosition
)
=
0
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
CopyText
(
int32_t
aStartPos
int32_t
aEndPos
)
=
0
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
CutText
(
int32_t
aStartPos
int32_t
aEndPos
)
=
0
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
DeleteText
(
int32_t
aStartPos
int32_t
aEndPos
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
void
PasteText
(
int32_t
aPosition
)
=
0
;
protected
:
virtual
const
Accessible
*
Acc
(
)
const
=
0
;
Accessible
*
Acc
(
)
{
const
Accessible
*
acc
=
const_cast
<
const
HyperTextAccessibleBase
*
>
(
this
)
-
>
Acc
(
)
;
return
const_cast
<
Accessible
*
>
(
acc
)
;
}
virtual
nsTArray
<
int32_t
>
&
GetCachedHyperTextOffsets
(
)
=
0
;
private
:
void
AdjustOriginIfEndBoundary
(
TextLeafPoint
&
aOrigin
AccessibleTextBoundary
aBoundaryType
bool
aAtOffset
=
false
)
const
;
virtual
void
CroppedSelectionRanges
(
nsTArray
<
TextRange
>
&
aRanges
)
const
;
}
;
}
#
endif
