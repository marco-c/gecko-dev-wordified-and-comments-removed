#
ifndef
_Accessible_H_
#
define
_Accessible_H_
#
include
"
mozilla
/
a11y
/
Role
.
h
"
#
include
"
mozilla
/
a11y
/
AccTypes
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
Units
.
h
"
class
nsAtom
;
struct
nsRoleMapEntry
;
namespace
mozilla
{
namespace
a11y
{
class
AccAttributes
;
class
AccGroupInfo
;
class
HyperTextAccessibleBase
;
class
LocalAccessible
;
class
Relation
;
enum
class
RelationType
;
class
RemoteAccessible
;
class
TableAccessibleBase
;
class
TableCellAccessibleBase
;
enum
ENameValueFlag
{
eNameOK
eNoNameOnPurpose
eNameFromSubtree
eNameFromTooltip
}
;
struct
GroupPos
{
GroupPos
(
)
:
level
(
0
)
posInSet
(
0
)
setSize
(
0
)
{
}
GroupPos
(
int32_t
aLevel
int32_t
aPosInSet
int32_t
aSetSize
)
:
level
(
aLevel
)
posInSet
(
aPosInSet
)
setSize
(
aSetSize
)
{
}
int32_t
level
;
int32_t
posInSet
;
int32_t
setSize
;
}
;
class
KeyBinding
{
public
:
static
const
uint32_t
kShift
=
1
;
static
const
uint32_t
kControl
=
2
;
static
const
uint32_t
kAlt
=
4
;
static
const
uint32_t
kMeta
=
8
;
static
const
uint32_t
kOS
=
16
;
static
uint32_t
AccelModifier
(
)
;
KeyBinding
(
)
:
mKey
(
0
)
mModifierMask
(
0
)
{
}
KeyBinding
(
uint32_t
aKey
uint32_t
aModifierMask
)
:
mKey
(
aKey
)
mModifierMask
(
aModifierMask
)
{
}
explicit
KeyBinding
(
uint64_t
aSerialized
)
:
mSerialized
(
aSerialized
)
{
}
inline
bool
IsEmpty
(
)
const
{
return
!
mKey
;
}
inline
uint32_t
Key
(
)
const
{
return
mKey
;
}
inline
uint32_t
ModifierMask
(
)
const
{
return
mModifierMask
;
}
uint64_t
Serialize
(
)
{
return
mSerialized
;
}
enum
Format
{
ePlatformFormat
eAtkFormat
}
;
inline
void
ToString
(
nsAString
&
aValue
Format
aFormat
=
ePlatformFormat
)
const
{
aValue
.
Truncate
(
)
;
AppendToString
(
aValue
aFormat
)
;
}
inline
void
AppendToString
(
nsAString
&
aValue
Format
aFormat
=
ePlatformFormat
)
const
{
if
(
mKey
)
{
if
(
aFormat
=
=
ePlatformFormat
)
{
ToPlatformFormat
(
aValue
)
;
}
else
{
ToAtkFormat
(
aValue
)
;
}
}
}
private
:
void
ToPlatformFormat
(
nsAString
&
aValue
)
const
;
void
ToAtkFormat
(
nsAString
&
aValue
)
const
;
union
{
struct
{
uint32_t
mKey
;
uint32_t
mModifierMask
;
}
;
uint64_t
mSerialized
;
}
;
}
;
class
Accessible
{
protected
:
Accessible
(
)
;
Accessible
(
AccType
aType
AccGenericType
aGenericTypes
uint8_t
aRoleMapEntryIndex
)
;
public
:
virtual
uint64_t
ID
(
)
const
=
0
;
virtual
Accessible
*
Parent
(
)
const
=
0
;
virtual
role
Role
(
)
const
=
0
;
virtual
Accessible
*
ChildAt
(
uint32_t
aIndex
)
const
=
0
;
virtual
Accessible
*
NextSibling
(
)
const
=
0
;
virtual
Accessible
*
PrevSibling
(
)
const
=
0
;
virtual
uint32_t
ChildCount
(
)
const
=
0
;
virtual
int32_t
IndexInParent
(
)
const
=
0
;
bool
HasChildren
(
)
const
{
return
!
!
FirstChild
(
)
;
}
inline
Accessible
*
FirstChild
(
)
const
{
return
ChildCount
(
)
?
ChildAt
(
0
)
:
nullptr
;
}
inline
Accessible
*
LastChild
(
)
const
{
uint32_t
childCount
=
ChildCount
(
)
;
return
childCount
?
ChildAt
(
childCount
-
1
)
:
nullptr
;
}
bool
IsBefore
(
const
Accessible
*
aAcc
)
const
;
bool
IsAncestorOf
(
const
Accessible
*
aAcc
)
const
{
for
(
const
Accessible
*
parent
=
aAcc
-
>
Parent
(
)
;
parent
;
parent
=
parent
-
>
Parent
(
)
)
{
if
(
parent
=
=
this
)
{
return
true
;
}
}
return
false
;
}
enum
class
EWhichChildAtPoint
{
DirectChild
DeepestChild
}
;
virtual
Accessible
*
ChildAtPoint
(
int32_t
aX
int32_t
aY
EWhichChildAtPoint
aWhichChild
)
=
0
;
virtual
Accessible
*
FocusedChild
(
)
;
const
nsRoleMapEntry
*
ARIARoleMap
(
)
const
;
bool
HasARIARole
(
)
const
;
bool
IsARIARole
(
nsAtom
*
aARIARole
)
const
;
bool
HasStrongARIARole
(
)
const
;
bool
HasGenericType
(
AccGenericType
aType
)
const
;
virtual
GroupPos
GroupPosition
(
)
;
virtual
uint32_t
EmbeddedChildCount
(
)
=
0
;
virtual
Accessible
*
EmbeddedChildAt
(
uint32_t
aIndex
)
=
0
;
virtual
int32_t
IndexOfEmbeddedChild
(
Accessible
*
aChild
)
=
0
;
virtual
ENameValueFlag
Name
(
nsString
&
aName
)
const
=
0
;
virtual
void
Description
(
nsString
&
aDescription
)
const
=
0
;
virtual
void
Value
(
nsString
&
aValue
)
const
=
0
;
virtual
double
CurValue
(
)
const
=
0
;
virtual
double
MinValue
(
)
const
=
0
;
virtual
double
MaxValue
(
)
const
=
0
;
virtual
double
Step
(
)
const
=
0
;
virtual
LayoutDeviceIntRect
Bounds
(
)
const
=
0
;
virtual
nsRect
BoundsInAppUnits
(
)
const
=
0
;
virtual
nsIntRect
BoundsInCSSPixels
(
)
const
;
virtual
void
AppendTextTo
(
nsAString
&
aText
uint32_t
aStartOffset
=
0
uint32_t
aLength
=
UINT32_MAX
)
=
0
;
virtual
uint64_t
State
(
)
=
0
;
virtual
uint32_t
StartOffset
(
)
;
virtual
uint32_t
EndOffset
(
)
;
virtual
already_AddRefed
<
AccAttributes
>
Attributes
(
)
=
0
;
virtual
already_AddRefed
<
nsAtom
>
DisplayStyle
(
)
const
=
0
;
virtual
Maybe
<
float
>
Opacity
(
)
const
=
0
;
virtual
void
LiveRegionAttributes
(
nsAString
*
aLive
nsAString
*
aRelevant
Maybe
<
bool
>
*
aAtomic
nsAString
*
aBusy
)
const
=
0
;
LayoutDeviceIntSize
Size
(
)
const
;
LayoutDeviceIntPoint
Position
(
uint32_t
aCoordType
)
;
virtual
Maybe
<
int32_t
>
GetIntARIAAttr
(
nsAtom
*
aAttrName
)
const
=
0
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
=
0
;
virtual
void
TakeFocus
(
)
const
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
void
ScrollTo
(
uint32_t
aHow
)
const
=
0
;
virtual
nsAtom
*
TagName
(
)
const
=
0
;
virtual
nsAtom
*
LandmarkRole
(
)
const
;
virtual
void
DOMNodeID
(
nsString
&
aID
)
const
=
0
;
virtual
uint8_t
ActionCount
(
)
const
=
0
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
=
0
;
void
ActionDescriptionAt
(
uint8_t
aIndex
nsAString
&
aDescription
)
{
nsAutoString
name
;
ActionNameAt
(
aIndex
name
)
;
TranslateString
(
name
aDescription
)
;
}
virtual
bool
DoAction
(
uint8_t
aIndex
)
const
=
0
;
virtual
KeyBinding
AccessKey
(
)
const
=
0
;
virtual
void
SelectedItems
(
nsTArray
<
Accessible
*
>
*
aItems
)
=
0
;
virtual
uint32_t
SelectedItemCount
(
)
=
0
;
virtual
Accessible
*
GetSelectedItem
(
uint32_t
aIndex
)
=
0
;
virtual
bool
IsItemSelected
(
uint32_t
aIndex
)
=
0
;
virtual
bool
AddItemToSelection
(
uint32_t
aIndex
)
=
0
;
virtual
bool
RemoveItemFromSelection
(
uint32_t
aIndex
)
=
0
;
virtual
bool
SelectAll
(
)
=
0
;
virtual
bool
UnselectAll
(
)
=
0
;
virtual
void
TakeSelection
(
)
=
0
;
virtual
void
SetSelected
(
bool
aSelect
)
=
0
;
bool
IsDoc
(
)
const
{
return
HasGenericType
(
eDocument
)
;
}
bool
IsTableRow
(
)
const
{
return
mGenericTypes
&
eTableRow
;
}
bool
IsTableCell
(
)
const
{
return
mGenericTypes
&
eTableCell
;
}
bool
IsTable
(
)
const
{
return
mGenericTypes
&
eTable
;
}
bool
IsHyperText
(
)
const
{
return
HasGenericType
(
eHyperText
)
;
}
bool
IsSelect
(
)
const
{
return
HasGenericType
(
eSelect
)
;
}
bool
IsActionable
(
)
const
{
return
HasGenericType
(
eActionable
)
;
}
bool
IsText
(
)
const
{
return
mGenericTypes
&
eText
;
}
bool
IsImage
(
)
const
{
return
mType
=
=
eImageType
;
}
bool
IsApplication
(
)
const
{
return
mType
=
=
eApplicationType
;
}
bool
IsAlert
(
)
const
{
return
HasGenericType
(
eAlert
)
;
}
bool
IsButton
(
)
const
{
return
HasGenericType
(
eButton
)
;
}
bool
IsCombobox
(
)
const
{
return
HasGenericType
(
eCombobox
)
;
}
virtual
bool
IsLink
(
)
const
=
0
;
bool
IsTextRole
(
)
;
bool
IsGenericHyperText
(
)
const
{
return
mType
=
=
eHyperTextType
;
}
bool
IsHTMLBr
(
)
const
{
return
mType
=
=
eHTMLBRType
;
}
bool
IsHTMLCaption
(
)
const
{
return
mType
=
=
eHTMLCaptionType
;
}
bool
IsHTMLCombobox
(
)
const
{
return
mType
=
=
eHTMLComboboxType
;
}
bool
IsHTMLFileInput
(
)
const
{
return
mType
=
=
eHTMLFileInputType
;
}
bool
IsHTMLListItem
(
)
const
{
return
mType
=
=
eHTMLLiType
;
}
bool
IsHTMLLink
(
)
const
{
return
mType
=
=
eHTMLLinkType
;
}
bool
IsHTMLOptGroup
(
)
const
{
return
mType
=
=
eHTMLOptGroupType
;
}
bool
IsHTMLRadioButton
(
)
const
{
return
mType
=
=
eHTMLRadioButtonType
;
}
bool
IsHTMLTable
(
)
const
{
return
mType
=
=
eHTMLTableType
;
}
bool
IsHTMLTableRow
(
)
const
{
return
mType
=
=
eHTMLTableRowType
;
}
bool
IsImageMap
(
)
const
{
return
mType
=
=
eImageMapType
;
}
bool
IsList
(
)
const
{
return
HasGenericType
(
eList
)
;
}
bool
IsListControl
(
)
const
{
return
HasGenericType
(
eListControl
)
;
}
bool
IsMenuButton
(
)
const
{
return
HasGenericType
(
eMenuButton
)
;
}
bool
IsMenuPopup
(
)
const
{
return
mType
=
=
eMenuPopupType
;
}
bool
IsProxy
(
)
const
{
return
mType
=
=
eProxyType
;
}
bool
IsOuterDoc
(
)
const
{
return
mType
=
=
eOuterDocType
;
}
bool
IsProgress
(
)
const
{
return
mType
=
=
eProgressType
;
}
bool
IsRoot
(
)
const
{
return
mType
=
=
eRootType
;
}
bool
IsPassword
(
)
const
{
return
mType
=
=
eHTMLTextPasswordFieldType
;
}
bool
IsTextLeaf
(
)
const
{
return
mType
=
=
eTextLeafType
;
}
bool
IsXULLabel
(
)
const
{
return
mType
=
=
eXULLabelType
;
}
bool
IsXULListItem
(
)
const
{
return
mType
=
=
eXULListItemType
;
}
bool
IsXULTabpanels
(
)
const
{
return
mType
=
=
eXULTabpanelsType
;
}
bool
IsXULTooltip
(
)
const
{
return
mType
=
=
eXULTooltipType
;
}
bool
IsXULTree
(
)
const
{
return
mType
=
=
eXULTreeType
;
}
bool
IsAutoCompletePopup
(
)
const
{
return
HasGenericType
(
eAutoCompletePopup
)
;
}
bool
IsTextField
(
)
const
{
return
mType
=
=
eHTMLTextFieldType
|
|
mType
=
=
eHTMLTextPasswordFieldType
;
}
bool
IsDateTimeField
(
)
const
{
return
mType
=
=
eHTMLDateTimeFieldType
;
}
virtual
bool
HasNumericValue
(
)
const
=
0
;
virtual
bool
IsRemote
(
)
const
=
0
;
RemoteAccessible
*
AsRemote
(
)
;
bool
IsLocal
(
)
const
{
return
!
IsRemote
(
)
;
}
LocalAccessible
*
AsLocal
(
)
;
virtual
HyperTextAccessibleBase
*
AsHyperTextBase
(
)
{
return
nullptr
;
}
virtual
TableAccessibleBase
*
AsTableBase
(
)
{
return
nullptr
;
}
virtual
TableCellAccessibleBase
*
AsTableCellBase
(
)
{
return
nullptr
;
}
#
ifdef
A11Y_LOG
void
DebugDescription
(
nsCString
&
aDesc
)
const
;
static
void
DebugPrint
(
const
char
*
aPrefix
const
Accessible
*
aAccessible
)
;
#
endif
static
void
TranslateString
(
const
nsString
&
aKey
nsAString
&
aStringOut
)
;
protected
:
virtual
void
ARIAGroupPosition
(
int32_t
*
aLevel
int32_t
*
aSetSize
int32_t
*
aPosInSet
)
const
=
0
;
virtual
AccGroupInfo
*
GetGroupInfo
(
)
const
=
0
;
virtual
AccGroupInfo
*
GetOrCreateGroupInfo
(
)
=
0
;
virtual
int32_t
GetLevel
(
bool
aFast
)
const
;
virtual
void
GetPositionAndSetSize
(
int32_t
*
aPosInSet
int32_t
*
aSetSize
)
;
const
Accessible
*
ActionAncestor
(
)
const
;
virtual
bool
HasPrimaryAction
(
)
const
=
0
;
private
:
static
const
uint8_t
kTypeBits
=
6
;
static
const
uint8_t
kGenericTypesBits
=
18
;
void
StaticAsserts
(
)
const
;
protected
:
uint32_t
mType
:
kTypeBits
;
uint32_t
mGenericTypes
:
kGenericTypesBits
;
uint8_t
mRoleMapEntryIndex
;
friend
class
DocAccessibleChildBase
;
friend
class
AccGroupInfo
;
}
;
}
}
#
endif
