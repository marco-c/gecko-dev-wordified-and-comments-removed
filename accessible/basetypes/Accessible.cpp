#
include
"
Accessible
.
h
"
#
include
"
ARIAMap
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
Accessible
:
:
Accessible
(
)
:
mType
(
static_cast
<
uint32_t
>
(
0
)
)
mGenericTypes
(
static_cast
<
uint32_t
>
(
0
)
)
mRoleMapEntryIndex
(
aria
:
:
NO_ROLE_MAP_ENTRY_INDEX
)
{
}
void
Accessible
:
:
StaticAsserts
(
)
const
{
static_assert
(
eLastAccType
<
=
(
1
<
<
kTypeBits
)
-
1
"
Accessible
:
:
mType
was
oversized
by
eLastAccType
!
"
)
;
static_assert
(
eLastAccGenericType
<
=
(
1
<
<
kGenericTypesBits
)
-
1
"
Accessible
:
:
mGenericType
was
oversized
by
eLastAccGenericType
!
"
)
;
}
const
nsRoleMapEntry
*
Accessible
:
:
ARIARoleMap
(
)
const
{
return
aria
:
:
GetRoleMapFromIndex
(
mRoleMapEntryIndex
)
;
}
bool
Accessible
:
:
HasARIARole
(
)
const
{
return
mRoleMapEntryIndex
!
=
aria
:
:
NO_ROLE_MAP_ENTRY_INDEX
;
}
bool
Accessible
:
:
IsARIARole
(
nsAtom
*
aARIARole
)
const
{
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
return
roleMapEntry
&
&
roleMapEntry
-
>
Is
(
aARIARole
)
;
}
bool
Accessible
:
:
HasStrongARIARole
(
)
const
{
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
return
roleMapEntry
&
&
roleMapEntry
-
>
roleRule
=
=
kUseMapRole
;
}
bool
Accessible
:
:
HasGenericType
(
AccGenericType
aType
)
const
{
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
return
(
mGenericTypes
&
aType
)
|
|
(
roleMapEntry
&
&
roleMapEntry
-
>
IsOfType
(
aType
)
)
;
}
