#
include
"
HyperTextAccessibleBase
.
h
"
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
include
"
mozilla
/
StaticPrefs_accessibility
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
TextLeafRange
.
h
"
namespace
mozilla
:
:
a11y
{
int32_t
HyperTextAccessibleBase
:
:
GetChildIndexAtOffset
(
uint32_t
aOffset
)
const
{
const
Accessible
*
thisAcc
=
Acc
(
)
;
uint32_t
childCount
=
thisAcc
-
>
ChildCount
(
)
;
uint32_t
lastTextOffset
=
0
;
for
(
uint32_t
childIndex
=
0
;
childIndex
<
childCount
;
+
+
childIndex
)
{
Accessible
*
child
=
thisAcc
-
>
ChildAt
(
childIndex
)
;
lastTextOffset
+
=
nsAccUtils
:
:
TextLength
(
child
)
;
if
(
aOffset
<
lastTextOffset
)
{
return
childIndex
;
}
}
if
(
aOffset
=
=
lastTextOffset
)
{
return
childCount
-
1
;
}
return
-
1
;
}
Accessible
*
HyperTextAccessibleBase
:
:
GetChildAtOffset
(
uint32_t
aOffset
)
const
{
const
Accessible
*
thisAcc
=
Acc
(
)
;
return
thisAcc
-
>
ChildAt
(
GetChildIndexAtOffset
(
aOffset
)
)
;
}
int32_t
HyperTextAccessibleBase
:
:
GetChildOffset
(
const
Accessible
*
aChild
bool
aInvalidateAfter
)
const
{
const
Accessible
*
thisAcc
=
Acc
(
)
;
if
(
aChild
-
>
Parent
(
)
!
=
thisAcc
)
{
return
-
1
;
}
int32_t
index
=
aChild
-
>
IndexInParent
(
)
;
if
(
index
=
=
-
1
)
{
return
-
1
;
}
return
GetChildOffset
(
index
aInvalidateAfter
)
;
}
int32_t
HyperTextAccessibleBase
:
:
GetChildOffset
(
uint32_t
aChildIndex
bool
aInvalidateAfter
)
const
{
if
(
aChildIndex
=
=
0
)
{
return
0
;
}
const
Accessible
*
thisAcc
=
Acc
(
)
;
MOZ_ASSERT
(
aChildIndex
<
=
thisAcc
-
>
ChildCount
(
)
)
;
uint32_t
lastTextOffset
=
0
;
for
(
uint32_t
childIndex
=
0
;
childIndex
<
=
aChildIndex
;
+
+
childIndex
)
{
if
(
childIndex
=
=
aChildIndex
)
{
return
lastTextOffset
;
}
Accessible
*
child
=
thisAcc
-
>
ChildAt
(
childIndex
)
;
lastTextOffset
+
=
nsAccUtils
:
:
TextLength
(
child
)
;
}
MOZ_ASSERT_UNREACHABLE
(
)
;
return
lastTextOffset
;
}
uint32_t
HyperTextAccessibleBase
:
:
CharacterCount
(
)
const
{
return
GetChildOffset
(
Acc
(
)
-
>
ChildCount
(
)
)
;
}
index_t
HyperTextAccessibleBase
:
:
ConvertMagicOffset
(
int32_t
aOffset
)
const
{
if
(
aOffset
=
=
nsIAccessibleText
:
:
TEXT_OFFSET_END_OF_TEXT
)
{
return
CharacterCount
(
)
;
}
if
(
aOffset
=
=
nsIAccessibleText
:
:
TEXT_OFFSET_CARET
)
{
return
CaretOffset
(
)
;
}
return
aOffset
;
}
void
HyperTextAccessibleBase
:
:
TextSubstring
(
int32_t
aStartOffset
int32_t
aEndOffset
nsAString
&
aText
)
const
{
aText
.
Truncate
(
)
;
index_t
startOffset
=
ConvertMagicOffset
(
aStartOffset
)
;
index_t
endOffset
=
ConvertMagicOffset
(
aEndOffset
)
;
if
(
!
startOffset
.
IsValid
(
)
|
|
!
endOffset
.
IsValid
(
)
|
|
startOffset
>
endOffset
|
|
endOffset
>
CharacterCount
(
)
)
{
NS_ERROR
(
"
Wrong
in
offset
"
)
;
return
;
}
int32_t
startChildIdx
=
GetChildIndexAtOffset
(
startOffset
)
;
if
(
startChildIdx
=
=
-
1
)
{
return
;
}
int32_t
endChildIdx
=
GetChildIndexAtOffset
(
endOffset
)
;
if
(
endChildIdx
=
=
-
1
)
{
return
;
}
const
Accessible
*
thisAcc
=
Acc
(
)
;
if
(
startChildIdx
=
=
endChildIdx
)
{
int32_t
childOffset
=
GetChildOffset
(
startChildIdx
)
;
if
(
childOffset
=
=
-
1
)
{
return
;
}
Accessible
*
child
=
thisAcc
-
>
ChildAt
(
startChildIdx
)
;
child
-
>
AppendTextTo
(
aText
startOffset
-
childOffset
endOffset
-
startOffset
)
;
return
;
}
int32_t
startChildOffset
=
GetChildOffset
(
startChildIdx
)
;
if
(
startChildOffset
=
=
-
1
)
{
return
;
}
Accessible
*
startChild
=
thisAcc
-
>
ChildAt
(
startChildIdx
)
;
startChild
-
>
AppendTextTo
(
aText
startOffset
-
startChildOffset
)
;
for
(
int32_t
childIdx
=
startChildIdx
+
1
;
childIdx
<
endChildIdx
;
childIdx
+
+
)
{
Accessible
*
child
=
thisAcc
-
>
ChildAt
(
childIdx
)
;
child
-
>
AppendTextTo
(
aText
)
;
}
int32_t
endChildOffset
=
GetChildOffset
(
endChildIdx
)
;
if
(
endChildOffset
=
=
-
1
)
{
return
;
}
Accessible
*
endChild
=
thisAcc
-
>
ChildAt
(
endChildIdx
)
;
endChild
-
>
AppendTextTo
(
aText
0
endOffset
-
endChildOffset
)
;
}
bool
HyperTextAccessibleBase
:
:
CharAt
(
int32_t
aOffset
nsAString
&
aChar
int32_t
*
aStartOffset
int32_t
*
aEndOffset
)
{
MOZ_ASSERT
(
!
aStartOffset
=
=
!
aEndOffset
"
Offsets
should
be
both
defined
or
both
undefined
!
"
)
;
int32_t
childIdx
=
GetChildIndexAtOffset
(
aOffset
)
;
if
(
childIdx
=
=
-
1
)
{
return
false
;
}
Accessible
*
child
=
Acc
(
)
-
>
ChildAt
(
childIdx
)
;
child
-
>
AppendTextTo
(
aChar
aOffset
-
GetChildOffset
(
childIdx
)
1
)
;
if
(
aStartOffset
&
&
aEndOffset
)
{
*
aStartOffset
=
aOffset
;
*
aEndOffset
=
aOffset
+
aChar
.
Length
(
)
;
}
return
true
;
}
TextLeafPoint
HyperTextAccessibleBase
:
:
ToTextLeafPoint
(
int32_t
aOffset
bool
aDescendToEnd
)
{
Accessible
*
thisAcc
=
Acc
(
)
;
if
(
!
thisAcc
-
>
HasChildren
(
)
)
{
return
TextLeafPoint
(
thisAcc
0
)
;
}
Accessible
*
child
=
GetChildAtOffset
(
aOffset
)
;
if
(
!
child
)
{
return
TextLeafPoint
(
)
;
}
if
(
HyperTextAccessibleBase
*
childHt
=
child
-
>
AsHyperTextBase
(
)
)
{
return
childHt
-
>
ToTextLeafPoint
(
aDescendToEnd
?
static_cast
<
int32_t
>
(
childHt
-
>
CharacterCount
(
)
)
:
0
aDescendToEnd
)
;
}
int32_t
offset
=
aOffset
-
GetChildOffset
(
child
)
;
return
TextLeafPoint
(
child
offset
)
;
}
uint32_t
HyperTextAccessibleBase
:
:
TransformOffset
(
Accessible
*
aDescendant
uint32_t
aOffset
bool
aIsEndOffset
)
const
{
const
Accessible
*
thisAcc
=
Acc
(
)
;
uint32_t
offset
=
aOffset
;
Accessible
*
descendant
=
aDescendant
;
while
(
descendant
)
{
Accessible
*
parent
=
descendant
-
>
Parent
(
)
;
if
(
parent
=
=
thisAcc
)
{
return
GetChildOffset
(
descendant
)
+
offset
;
}
if
(
aIsEndOffset
)
{
offset
=
(
offset
>
0
|
|
descendant
-
>
IndexInParent
(
)
>
0
)
?
1
:
0
;
}
else
{
offset
=
0
;
}
descendant
=
parent
;
}
return
CharacterCount
(
)
;
}
void
HyperTextAccessibleBase
:
:
TextAtOffset
(
int32_t
aOffset
AccessibleTextBoundary
aBoundaryType
int32_t
*
aStartOffset
int32_t
*
aEndOffset
nsAString
&
aText
)
{
MOZ_ASSERT
(
StaticPrefs
:
:
accessibility_cache_enabled_AtStartup
(
)
)
;
*
aStartOffset
=
*
aEndOffset
=
0
;
aText
.
Truncate
(
)
;
uint32_t
adjustedOffset
=
ConvertMagicOffset
(
aOffset
)
;
if
(
adjustedOffset
=
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
{
NS_ERROR
(
"
Wrong
given
offset
!
"
)
;
return
;
}
switch
(
aBoundaryType
)
{
case
nsIAccessibleText
:
:
BOUNDARY_CHAR
:
CharAt
(
adjustedOffset
aText
aStartOffset
aEndOffset
)
;
break
;
case
nsIAccessibleText
:
:
BOUNDARY_WORD_START
:
case
nsIAccessibleText
:
:
BOUNDARY_LINE_START
:
TextLeafPoint
origStart
=
ToTextLeafPoint
(
static_cast
<
int32_t
>
(
adjustedOffset
)
)
;
TextLeafPoint
end
;
Accessible
*
childAcc
=
GetChildAtOffset
(
adjustedOffset
)
;
if
(
childAcc
&
&
childAcc
-
>
IsHyperText
(
)
)
{
end
=
ToTextLeafPoint
(
static_cast
<
int32_t
>
(
adjustedOffset
)
true
)
;
}
else
{
end
=
origStart
;
}
TextLeafPoint
start
=
origStart
.
FindBoundary
(
aBoundaryType
eDirPrevious
true
)
;
*
aStartOffset
=
static_cast
<
int32_t
>
(
TransformOffset
(
start
.
mAcc
start
.
mOffset
false
)
)
;
if
(
*
aStartOffset
=
=
static_cast
<
int32_t
>
(
CharacterCount
(
)
)
&
&
(
*
aStartOffset
>
static_cast
<
int32_t
>
(
adjustedOffset
)
|
|
start
!
=
origStart
)
)
{
*
aStartOffset
=
0
;
}
end
=
end
.
FindBoundary
(
aBoundaryType
eDirNext
)
;
*
aEndOffset
=
static_cast
<
int32_t
>
(
TransformOffset
(
end
.
mAcc
end
.
mOffset
true
)
)
;
TextSubstring
(
*
aStartOffset
*
aEndOffset
aText
)
;
return
;
}
}
bool
HyperTextAccessibleBase
:
:
IsValidOffset
(
int32_t
aOffset
)
{
index_t
offset
=
ConvertMagicOffset
(
aOffset
)
;
return
offset
.
IsValid
(
)
&
&
offset
<
=
CharacterCount
(
)
;
}
bool
HyperTextAccessibleBase
:
:
IsValidRange
(
int32_t
aStartOffset
int32_t
aEndOffset
)
{
index_t
startOffset
=
ConvertMagicOffset
(
aStartOffset
)
;
index_t
endOffset
=
ConvertMagicOffset
(
aEndOffset
)
;
return
startOffset
.
IsValid
(
)
&
&
endOffset
.
IsValid
(
)
&
&
startOffset
<
=
endOffset
&
&
endOffset
<
=
CharacterCount
(
)
;
}
Accessible
*
HyperTextAccessibleBase
:
:
LinkAt
(
uint32_t
aIndex
)
{
return
Acc
(
)
-
>
EmbeddedChildAt
(
aIndex
)
;
}
}
