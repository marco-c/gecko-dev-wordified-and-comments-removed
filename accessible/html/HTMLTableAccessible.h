#
ifndef
mozilla_a11y_HTMLTableAccessible_h__
#
define
mozilla_a11y_HTMLTableAccessible_h__
#
include
"
HyperTextAccessibleWrap
.
h
"
class
nsITableCellLayout
;
class
nsTableCellFrame
;
class
nsTableWrapperFrame
;
namespace
mozilla
{
namespace
a11y
{
class
HTMLTableAccessible
;
class
HTMLTableCellAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLTableCellAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLTableCellAccessible
HyperTextAccessibleWrap
)
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
uint64_t
NativeInteractiveState
(
)
const
override
;
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
override
;
protected
:
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
public
:
HTMLTableAccessible
*
Table
(
)
const
;
uint32_t
ColExtent
(
)
const
;
uint32_t
RowExtent
(
)
const
;
static
HTMLTableCellAccessible
*
GetFrom
(
LocalAccessible
*
aAcc
)
{
if
(
aAcc
-
>
IsHTMLTableCell
(
)
)
{
return
static_cast
<
HTMLTableCellAccessible
*
>
(
aAcc
)
;
}
return
nullptr
;
}
protected
:
virtual
~
HTMLTableCellAccessible
(
)
{
}
}
;
class
HTMLTableHeaderCellAccessible
:
public
HTMLTableCellAccessible
{
public
:
HTMLTableHeaderCellAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
}
;
class
HTMLTableRowAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLTableRowAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessibleWrap
(
aContent
aDoc
)
{
mType
=
eHTMLTableRowType
;
mGenericTypes
|
=
eTableRow
;
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLTableRowAccessible
HyperTextAccessibleWrap
)
protected
:
virtual
~
HTMLTableRowAccessible
(
)
{
}
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
}
;
class
HTMLTableAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLTableAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessibleWrap
(
aContent
aDoc
)
{
mType
=
eHTMLTableType
;
mGenericTypes
|
=
eTable
;
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLTableAccessible
HyperTextAccessibleWrap
)
LocalAccessible
*
Caption
(
)
const
;
uint32_t
ColCount
(
)
const
;
uint32_t
RowCount
(
)
;
bool
IsProbablyLayoutTable
(
)
;
static
HTMLTableAccessible
*
GetFrom
(
LocalAccessible
*
aAcc
)
{
if
(
aAcc
-
>
IsHTMLTable
(
)
)
{
return
static_cast
<
HTMLTableAccessible
*
>
(
aAcc
)
;
}
return
nullptr
;
}
virtual
void
Description
(
nsString
&
aDescription
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
override
;
virtual
Relation
RelationByType
(
RelationType
aRelationType
)
const
override
;
virtual
bool
InsertChildAt
(
uint32_t
aIndex
LocalAccessible
*
aChild
)
override
;
protected
:
virtual
~
HTMLTableAccessible
(
)
{
}
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
#
ifdef
SHOW_LAYOUT_HEURISTIC
nsString
mLayoutHeuristic
;
#
endif
private
:
nsTableWrapperFrame
*
GetTableWrapperFrame
(
)
const
;
}
;
class
HTMLCaptionAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLCaptionAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessibleWrap
(
aContent
aDoc
)
{
mType
=
eHTMLCaptionType
;
}
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
Relation
RelationByType
(
RelationType
aRelationType
)
const
override
;
protected
:
virtual
~
HTMLCaptionAccessible
(
)
{
}
}
;
}
}
#
endif
