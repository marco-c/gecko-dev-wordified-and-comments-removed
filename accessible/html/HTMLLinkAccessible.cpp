#
include
"
HTMLLinkAccessible
.
h
"
#
include
"
CacheConstants
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
Role
.
h
"
#
include
"
States
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
MutationEventBinding
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
HTMLLinkAccessible
:
:
HTMLLinkAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessibleWrap
(
aContent
aDoc
)
{
mType
=
eHTMLLinkType
;
}
role
HTMLLinkAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
LINK
;
}
uint64_t
HTMLLinkAccessible
:
:
NativeState
(
)
const
{
return
HyperTextAccessibleWrap
:
:
NativeState
(
)
&
~
states
:
:
READONLY
;
}
uint64_t
HTMLLinkAccessible
:
:
NativeLinkState
(
)
const
{
dom
:
:
ElementState
state
=
mContent
-
>
AsElement
(
)
-
>
State
(
)
;
if
(
state
.
HasState
(
dom
:
:
ElementState
:
:
UNVISITED
)
)
{
return
states
:
:
LINKED
;
}
if
(
state
.
HasState
(
dom
:
:
ElementState
:
:
VISITED
)
)
{
return
states
:
:
LINKED
|
states
:
:
TRAVERSED
;
}
return
nsCoreUtils
:
:
HasClickListener
(
mContent
)
?
states
:
:
LINKED
:
0
;
}
uint64_t
HTMLLinkAccessible
:
:
NativeInteractiveState
(
)
const
{
uint64_t
state
=
HyperTextAccessibleWrap
:
:
NativeInteractiveState
(
)
;
if
(
mContent
-
>
AsElement
(
)
-
>
HasAttr
(
nsGkAtoms
:
:
name
)
)
{
state
|
=
states
:
:
SELECTABLE
;
}
return
state
;
}
void
HTMLLinkAccessible
:
:
Value
(
nsString
&
aValue
)
const
{
aValue
.
Truncate
(
)
;
HyperTextAccessible
:
:
Value
(
aValue
)
;
if
(
aValue
.
IsEmpty
(
)
)
{
nsContentUtils
:
:
GetLinkLocation
(
mContent
-
>
AsElement
(
)
aValue
)
;
}
}
bool
HTMLLinkAccessible
:
:
HasPrimaryAction
(
)
const
{
return
IsLinked
(
)
|
|
HyperTextAccessible
:
:
HasPrimaryAction
(
)
;
;
}
void
HTMLLinkAccessible
:
:
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
{
aName
.
Truncate
(
)
;
if
(
!
IsLinked
(
)
)
{
HyperTextAccessible
:
:
ActionNameAt
(
aIndex
aName
)
;
return
;
}
if
(
aIndex
=
=
eAction_Jump
)
aName
.
AssignLiteral
(
"
jump
"
)
;
}
bool
HTMLLinkAccessible
:
:
AttributeChangesState
(
nsAtom
*
aAttribute
)
{
return
aAttribute
=
=
nsGkAtoms
:
:
href
|
|
HyperTextAccessibleWrap
:
:
AttributeChangesState
(
aAttribute
)
;
}
void
HTMLLinkAccessible
:
:
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
{
HyperTextAccessibleWrap
:
:
DOMAttributeChanged
(
aNameSpaceID
aAttribute
aModType
aOldValue
aOldState
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
href
&
&
(
aModType
=
=
dom
:
:
MutationEvent_Binding
:
:
ADDITION
|
|
aModType
=
=
dom
:
:
MutationEvent_Binding
:
:
REMOVAL
)
)
{
SendCache
(
CacheDomain
:
:
Actions
CacheUpdateType
:
:
Update
)
;
}
}
bool
HTMLLinkAccessible
:
:
IsLink
(
)
const
{
return
true
;
}
bool
HTMLLinkAccessible
:
:
IsLinked
(
)
const
{
dom
:
:
ElementState
state
=
mContent
-
>
AsElement
(
)
-
>
State
(
)
;
return
state
.
HasAtLeastOneOfStates
(
dom
:
:
ElementState
:
:
VISITED_OR_UNVISITED
)
;
}
