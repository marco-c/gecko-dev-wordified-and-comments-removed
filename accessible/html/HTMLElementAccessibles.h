#
ifndef
mozilla_a11y_HTMLElementAccessibles_h__
#
define
mozilla_a11y_HTMLElementAccessibles_h__
#
include
"
BaseAccessibles
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
HTMLHRAccessible
:
public
LeafAccessible
{
public
:
HTMLHRAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
}
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
}
;
class
HTMLBRAccessible
:
public
LeafAccessible
{
public
:
HTMLBRAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
mType
=
eHTMLBRType
;
mGenericTypes
|
=
eText
;
}
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
protected
:
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
}
;
class
HTMLLabelAccessible
:
public
HyperTextAccessible
{
public
:
HTMLLabelAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessible
(
aContent
aDoc
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLLabelAccessible
HyperTextAccessible
)
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
bool
HasPrimaryAction
(
)
const
override
;
protected
:
virtual
~
HTMLLabelAccessible
(
)
{
}
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
AttrModType
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
}
;
class
HTMLOutputAccessible
:
public
HyperTextAccessible
{
public
:
HTMLOutputAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessible
(
aContent
aDoc
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLOutputAccessible
HyperTextAccessible
)
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
AttrModType
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
protected
:
virtual
~
HTMLOutputAccessible
(
)
{
}
}
;
class
HTMLSummaryAccessible
:
public
HyperTextAccessible
{
public
:
enum
{
eAction_Click
=
0
}
;
HTMLSummaryAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
static
HTMLSummaryAccessible
*
FromDetails
(
LocalAccessible
*
aDetails
)
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
bool
HasPrimaryAction
(
)
const
override
;
virtual
bool
IsWidget
(
)
const
override
;
}
;
class
HTMLHeaderOrFooterAccessible
:
public
HyperTextAccessible
{
public
:
HTMLHeaderOrFooterAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessible
(
aContent
aDoc
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLHeaderOrFooterAccessible
HyperTextAccessible
)
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
protected
:
virtual
~
HTMLHeaderOrFooterAccessible
(
)
{
}
}
;
class
HTMLAsideAccessible
:
public
HyperTextAccessible
{
public
:
HTMLAsideAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessible
(
aContent
aDoc
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLAsideAccessible
HyperTextAccessible
)
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
protected
:
virtual
~
HTMLAsideAccessible
(
)
=
default
;
}
;
class
HTMLSectionAccessible
:
public
HyperTextAccessible
{
public
:
HTMLSectionAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessible
(
aContent
aDoc
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLSectionAccessible
HyperTextAccessible
)
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
protected
:
virtual
~
HTMLSectionAccessible
(
)
=
default
;
}
;
}
}
#
endif
