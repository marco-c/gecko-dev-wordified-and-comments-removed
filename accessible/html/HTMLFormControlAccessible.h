#
ifndef
MOZILLA_A11Y_HTMLFormControlAccessible_H_
#
define
MOZILLA_A11Y_HTMLFormControlAccessible_H_
#
include
"
FormControlAccessible
.
h
"
#
include
"
HyperTextAccessibleWrap
.
h
"
#
include
"
mozilla
/
a11y
/
AccTypes
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
AccAttributes
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
Relation
.
h
"
namespace
mozilla
{
class
EditorBase
;
namespace
a11y
{
class
HTMLRadioButtonAccessible
:
public
RadioButtonAccessible
{
public
:
HTMLRadioButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
RadioButtonAccessible
(
aContent
aDoc
)
{
mStateFlags
|
=
eIgnoreDOMUIEvent
;
mType
=
eHTMLRadioButtonType
;
}
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
protected
:
virtual
void
GetPositionAndSetSize
(
int32_t
*
aPosInSet
int32_t
*
aSetSize
)
override
;
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
private
:
Relation
ComputeGroupAttributes
(
int32_t
*
aPosInSet
int32_t
*
aSetSize
)
const
;
}
;
class
HTMLButtonAccessible
:
public
HyperTextAccessibleWrap
{
public
:
enum
{
eAction_Click
=
0
}
;
HTMLButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
State
(
)
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
bool
HasPrimaryAction
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
bool
IsWidget
(
)
const
override
;
protected
:
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
}
;
class
HTMLTextFieldAccessible
:
public
HyperTextAccessibleWrap
{
public
:
enum
{
eAction_Click
=
0
}
;
HTMLTextFieldAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLTextFieldAccessible
HyperTextAccessibleWrap
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
already_AddRefed
<
EditorBase
>
GetEditor
(
)
const
override
;
virtual
void
Value
(
nsString
&
aValue
)
const
override
;
virtual
void
ApplyARIAState
(
uint64_t
*
aState
)
const
override
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
override
;
virtual
bool
AttributeChangesState
(
nsAtom
*
aAttribute
)
override
;
virtual
bool
HasPrimaryAction
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
bool
DoAction
(
uint8_t
aIndex
)
const
override
;
virtual
bool
IsWidget
(
)
const
override
;
virtual
LocalAccessible
*
ContainerWidget
(
)
const
override
;
protected
:
virtual
~
HTMLTextFieldAccessible
(
)
{
}
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
}
;
class
HTMLFileInputAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLFileInputAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
nsresult
HandleAccEvent
(
AccEvent
*
aAccEvent
)
override
;
virtual
LocalAccessible
*
CurrentItem
(
)
const
override
;
}
;
class
HTMLSpinnerAccessible
final
:
public
HTMLTextFieldAccessible
{
public
:
HTMLSpinnerAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HTMLTextFieldAccessible
(
aContent
aDoc
)
{
mGenericTypes
|
=
eNumericValue
;
}
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
void
Value
(
nsString
&
aValue
)
const
override
;
virtual
double
MaxValue
(
)
const
override
;
virtual
double
MinValue
(
)
const
override
;
virtual
double
CurValue
(
)
const
override
;
virtual
double
Step
(
)
const
override
;
virtual
bool
SetCurValue
(
double
aValue
)
override
;
}
;
class
HTMLRangeAccessible
:
public
LeafAccessible
{
public
:
HTMLRangeAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
mGenericTypes
|
=
eNumericValue
;
}
virtual
void
Value
(
nsString
&
aValue
)
const
override
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
double
MaxValue
(
)
const
override
;
virtual
double
MinValue
(
)
const
override
;
virtual
double
CurValue
(
)
const
override
;
virtual
double
Step
(
)
const
override
;
virtual
bool
SetCurValue
(
double
aValue
)
override
;
virtual
bool
IsWidget
(
)
const
override
;
}
;
class
HTMLGroupboxAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLGroupboxAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
protected
:
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
nsIContent
*
GetLegend
(
)
const
;
}
;
class
HTMLLegendAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLLegendAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
}
;
class
HTMLFigureAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLFigureAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
protected
:
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
nsIContent
*
Caption
(
)
const
;
}
;
class
HTMLFigcaptionAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLFigcaptionAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
}
;
class
HTMLFormAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLFormAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessibleWrap
(
aContent
aDoc
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLFormAccessible
HyperTextAccessibleWrap
)
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
protected
:
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
virtual
~
HTMLFormAccessible
(
)
=
default
;
}
;
class
HTMLProgressAccessible
:
public
LeafAccessible
{
public
:
HTMLProgressAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
mStateFlags
|
=
eIgnoreDOMUIEvent
;
mGenericTypes
|
=
eNumericValue
;
mType
=
eProgressType
;
}
virtual
void
Value
(
nsString
&
aValue
)
const
override
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
double
MaxValue
(
)
const
override
;
virtual
double
MinValue
(
)
const
override
;
virtual
double
CurValue
(
)
const
override
;
virtual
double
Step
(
)
const
override
;
virtual
bool
SetCurValue
(
double
aValue
)
override
;
virtual
bool
IsWidget
(
)
const
override
;
protected
:
virtual
~
HTMLProgressAccessible
(
)
{
}
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
}
;
class
HTMLMeterAccessible
:
public
LeafAccessible
{
public
:
HTMLMeterAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
mStateFlags
|
=
eIgnoreDOMUIEvent
;
mGenericTypes
|
=
eNumericValue
;
mType
=
eProgressType
;
}
virtual
void
Value
(
nsString
&
aValue
)
const
override
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
double
MaxValue
(
)
const
override
;
virtual
double
MinValue
(
)
const
override
;
virtual
double
CurValue
(
)
const
override
;
virtual
bool
SetCurValue
(
double
aValue
)
override
;
virtual
bool
IsWidget
(
)
const
override
;
protected
:
virtual
~
HTMLMeterAccessible
(
)
{
}
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
override
;
}
;
template
<
a11y
:
:
role
R
>
class
HTMLDateTimeAccessible
:
public
HyperTextAccessibleWrap
{
public
:
HTMLDateTimeAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessibleWrap
(
aContent
aDoc
)
{
mType
=
eHTMLDateTimeFieldType
;
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLDateTimeAccessible
HyperTextAccessibleWrap
)
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
{
return
R
;
}
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
override
{
RefPtr
<
AccAttributes
>
attributes
=
HyperTextAccessibleWrap
:
:
NativeAttributes
(
)
;
if
(
const
nsAttrValue
*
attr
=
mContent
-
>
AsElement
(
)
-
>
GetParsedAttr
(
nsGkAtoms
:
:
type
)
)
{
RefPtr
<
nsAtom
>
inputType
=
attr
-
>
GetAsAtom
(
)
;
if
(
inputType
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
textInputType
inputType
)
;
}
}
return
attributes
.
forget
(
)
;
}
virtual
bool
IsWidget
(
)
const
override
{
return
true
;
}
protected
:
virtual
~
HTMLDateTimeAccessible
(
)
{
}
}
;
}
}
#
endif
