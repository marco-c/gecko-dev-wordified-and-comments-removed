#
ifndef
mozilla_a11y_HTMLListAccessible_h__
#
define
mozilla_a11y_HTMLListAccessible_h__
#
include
"
BaseAccessibles
.
h
"
#
include
"
HyperTextAccessible
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
HTMLListBulletAccessible
;
class
HTMLListAccessible
:
public
HyperTextAccessible
{
public
:
HTMLListAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessible
(
aContent
aDoc
)
{
mGenericTypes
|
=
eList
;
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLListAccessible
HyperTextAccessible
)
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
protected
:
virtual
~
HTMLListAccessible
(
)
{
}
}
;
class
HTMLLIAccessible
:
public
HyperTextAccessible
{
public
:
HTMLLIAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLLIAccessible
HyperTextAccessible
)
virtual
nsRect
BoundsInAppUnits
(
)
const
override
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
LocalAccessible
*
Bullet
(
)
const
;
protected
:
virtual
~
HTMLLIAccessible
(
)
{
}
}
;
class
HTMLListBulletAccessible
:
public
LeafAccessible
{
public
:
HTMLListBulletAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
~
HTMLListBulletAccessible
(
)
{
}
virtual
ENameValueFlag
Name
(
nsString
&
aName
)
const
override
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
override
;
virtual
void
AppendTextTo
(
nsAString
&
aText
uint32_t
aStartOffset
=
0
uint32_t
aLength
=
UINT32_MAX
)
override
;
}
;
inline
HTMLLIAccessible
*
LocalAccessible
:
:
AsHTMLListItem
(
)
{
return
IsHTMLListItem
(
)
?
static_cast
<
HTMLLIAccessible
*
>
(
this
)
:
nullptr
;
}
}
}
#
endif
