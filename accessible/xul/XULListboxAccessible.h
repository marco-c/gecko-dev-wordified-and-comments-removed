#
ifndef
mozilla_a11y_XULListboxAccessible_h__
#
define
mozilla_a11y_XULListboxAccessible_h__
#
include
"
BaseAccessibles
.
h
"
#
include
"
TableAccessible
.
h
"
#
include
"
TableCellAccessible
.
h
"
#
include
"
XULMenuAccessible
.
h
"
#
include
"
XULSelectControlAccessible
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
XULColumAccessible
:
public
AccessibleWrap
{
public
:
XULColumAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
}
;
class
XULColumnItemAccessible
:
public
LeafAccessible
{
public
:
XULColumnItemAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
bool
HasPrimaryAction
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
enum
{
eAction_Click
=
0
}
;
}
;
class
XULListboxAccessible
:
public
XULSelectControlAccessible
public
TableAccessible
{
public
:
XULListboxAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
uint32_t
ColCount
(
)
const
override
;
virtual
uint32_t
RowCount
(
)
override
;
virtual
LocalAccessible
*
CellAt
(
uint32_t
aRowIndex
uint32_t
aColumnIndex
)
override
;
virtual
bool
IsColSelected
(
uint32_t
aColIdx
)
override
;
virtual
bool
IsRowSelected
(
uint32_t
aRowIdx
)
override
;
virtual
bool
IsCellSelected
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
override
;
virtual
uint32_t
SelectedCellCount
(
)
override
;
virtual
uint32_t
SelectedColCount
(
)
override
;
virtual
uint32_t
SelectedRowCount
(
)
override
;
virtual
void
SelectedCells
(
nsTArray
<
Accessible
*
>
*
aCells
)
override
;
virtual
void
SelectedCellIndices
(
nsTArray
<
uint32_t
>
*
aCells
)
override
;
virtual
void
SelectedColIndices
(
nsTArray
<
uint32_t
>
*
aCols
)
override
;
virtual
void
SelectedRowIndices
(
nsTArray
<
uint32_t
>
*
aRows
)
override
;
virtual
LocalAccessible
*
AsAccessible
(
)
override
{
return
this
;
}
virtual
TableAccessible
*
AsTable
(
)
override
{
return
this
;
}
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
bool
IsWidget
(
)
const
override
;
virtual
bool
IsActiveWidget
(
)
const
override
;
virtual
bool
AreItemsOperable
(
)
const
override
;
virtual
LocalAccessible
*
ContainerWidget
(
)
const
override
;
protected
:
virtual
~
XULListboxAccessible
(
)
{
}
bool
IsMulticolumn
(
)
const
{
return
ColCount
(
)
>
1
;
}
}
;
class
XULListitemAccessible
:
public
XULMenuitemAccessible
{
public
:
enum
{
eAction_Click
=
0
}
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
XULListitemAccessible
XULMenuitemAccessible
)
XULListitemAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
void
Description
(
nsString
&
aDesc
)
const
override
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
uint64_t
NativeInteractiveState
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
index
nsAString
&
aName
)
override
;
virtual
LocalAccessible
*
ContainerWidget
(
)
const
override
;
protected
:
virtual
~
XULListitemAccessible
(
)
;
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
LocalAccessible
*
GetListAccessible
(
)
const
;
private
:
bool
mIsCheckbox
;
}
;
}
}
#
endif
