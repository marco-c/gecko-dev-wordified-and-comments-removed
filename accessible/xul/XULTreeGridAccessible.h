#
ifndef
mozilla_a11y_XULTreeGridAccessible_h__
#
define
mozilla_a11y_XULTreeGridAccessible_h__
#
include
"
XULTreeAccessible
.
h
"
#
include
"
TableAccessible
.
h
"
#
include
"
TableCellAccessible
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
XULTreeGridCellAccessible
;
class
XULTreeGridAccessible
:
public
XULTreeAccessible
public
TableAccessible
{
public
:
XULTreeGridAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
nsTreeBodyFrame
*
aTreeFrame
)
:
XULTreeAccessible
(
aContent
aDoc
aTreeFrame
)
{
mGenericTypes
|
=
eTable
;
}
virtual
uint32_t
ColCount
(
)
const
override
;
virtual
uint32_t
RowCount
(
)
override
;
virtual
LocalAccessible
*
CellAt
(
uint32_t
aRowIndex
uint32_t
aColumnIndex
)
override
;
virtual
void
ColDescription
(
uint32_t
aColIdx
nsString
&
aDescription
)
override
;
virtual
bool
IsColSelected
(
uint32_t
aColIdx
)
override
;
virtual
bool
IsRowSelected
(
uint32_t
aRowIdx
)
override
;
virtual
bool
IsCellSelected
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
override
;
virtual
uint32_t
SelectedCellCount
(
)
override
;
virtual
uint32_t
SelectedColCount
(
)
override
;
virtual
uint32_t
SelectedRowCount
(
)
override
;
virtual
void
SelectedCells
(
nsTArray
<
Accessible
*
>
*
aCells
)
override
;
virtual
void
SelectedCellIndices
(
nsTArray
<
uint32_t
>
*
aCells
)
override
;
virtual
void
SelectedColIndices
(
nsTArray
<
uint32_t
>
*
aCols
)
override
;
virtual
void
SelectedRowIndices
(
nsTArray
<
uint32_t
>
*
aRows
)
override
;
virtual
void
SelectRow
(
uint32_t
aRowIdx
)
override
;
virtual
void
UnselectRow
(
uint32_t
aRowIdx
)
override
;
virtual
LocalAccessible
*
AsAccessible
(
)
override
{
return
this
;
}
virtual
TableAccessible
*
AsTable
(
)
override
{
return
this
;
}
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
protected
:
virtual
~
XULTreeGridAccessible
(
)
;
virtual
already_AddRefed
<
XULTreeItemAccessibleBase
>
CreateTreeItemAccessible
(
int32_t
aRow
)
const
override
;
}
;
class
XULTreeGridRowAccessible
final
:
public
XULTreeItemAccessibleBase
{
public
:
using
LocalAccessible
:
:
LocalChildAt
;
XULTreeGridRowAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
LocalAccessible
*
aParent
dom
:
:
XULTreeElement
*
aTree
nsITreeView
*
aTreeView
int32_t
aRow
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
XULTreeGridRowAccessible
XULTreeItemAccessibleBase
)
virtual
void
Shutdown
(
)
override
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
ENameValueFlag
Name
(
nsString
&
aName
)
const
override
;
virtual
LocalAccessible
*
LocalChildAtPoint
(
int32_t
aX
int32_t
aY
EWhichChildAtPoint
aWhichChild
)
override
;
virtual
LocalAccessible
*
LocalChildAt
(
uint32_t
aIndex
)
const
override
;
virtual
uint32_t
ChildCount
(
)
const
override
;
XULTreeGridCellAccessible
*
GetCellAccessible
(
nsTreeColumn
*
aColumn
)
const
final
;
virtual
void
RowInvalidated
(
int32_t
aStartColIdx
int32_t
aEndColIdx
)
override
;
protected
:
virtual
~
XULTreeGridRowAccessible
(
)
;
mutable
nsRefPtrHashtable
<
nsPtrHashKey
<
const
void
>
XULTreeGridCellAccessible
>
mAccessibleCache
;
}
;
class
XULTreeGridCellAccessible
:
public
LeafAccessible
public
TableCellAccessible
{
public
:
XULTreeGridCellAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
XULTreeGridRowAccessible
*
aRowAcc
dom
:
:
XULTreeElement
*
aTree
nsITreeView
*
aTreeView
int32_t
aRow
nsTreeColumn
*
aColumn
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
XULTreeGridCellAccessible
LeafAccessible
)
virtual
void
Shutdown
(
)
override
;
virtual
TableCellAccessible
*
AsTableCell
(
)
override
{
return
this
;
}
virtual
nsRect
BoundsInAppUnits
(
)
const
override
;
virtual
nsIntRect
BoundsInCSSPixels
(
)
const
override
;
virtual
ENameValueFlag
Name
(
nsString
&
aName
)
const
override
;
virtual
Accessible
*
FocusedChild
(
)
override
;
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
override
;
virtual
int32_t
IndexInParent
(
)
const
override
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
virtual
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
uint64_t
NativeInteractiveState
(
)
const
override
;
virtual
bool
HasPrimaryAction
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
TableAccessible
*
Table
(
)
const
override
;
virtual
uint32_t
ColIdx
(
)
const
override
;
virtual
uint32_t
RowIdx
(
)
const
override
;
virtual
void
ColHeaderCells
(
nsTArray
<
Accessible
*
>
*
aHeaderCells
)
override
;
virtual
void
RowHeaderCells
(
nsTArray
<
Accessible
*
>
*
aCells
)
override
{
}
virtual
bool
Selected
(
)
override
;
bool
CellInvalidated
(
)
;
protected
:
virtual
~
XULTreeGridCellAccessible
(
)
;
virtual
LocalAccessible
*
GetSiblingAtOffset
(
int32_t
aOffset
nsresult
*
aError
=
nullptr
)
const
override
;
MOZ_CAN_RUN_SCRIPT
virtual
void
DispatchClickEvent
(
nsIContent
*
aContent
uint32_t
aActionIndex
)
const
override
;
bool
IsEditable
(
)
const
;
enum
{
eAction_Click
=
0
}
;
RefPtr
<
dom
:
:
XULTreeElement
>
mTree
;
nsITreeView
*
mTreeView
;
int32_t
mRow
;
RefPtr
<
nsTreeColumn
>
mColumn
;
nsString
mCachedTextEquiv
;
}
;
}
}
#
endif
