#
include
"
XULFormControlAccessible
.
h
"
#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
HTMLFormControlAccessible
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
DocAccessible
.
h
"
#
include
"
Relation
.
h
"
#
include
"
Role
.
h
"
#
include
"
States
.
h
"
#
include
"
TreeWalker
.
h
"
#
include
"
XULMenuAccessible
.
h
"
#
include
"
nsIDOMXULButtonElement
.
h
"
#
include
"
nsIDOMXULMenuListElement
.
h
"
#
include
"
nsIDOMXULRadioGroupElement
.
h
"
#
include
"
nsIDOMXULSelectCntrlItemEl
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsITextControlFrame
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
using
namespace
mozilla
:
:
a11y
;
XULButtonAccessible
:
:
XULButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
AccessibleWrap
(
aContent
aDoc
)
{
if
(
ContainsMenu
(
)
)
{
mGenericTypes
|
=
eMenuButton
;
}
else
{
mGenericTypes
|
=
eButton
;
}
}
XULButtonAccessible
:
:
~
XULButtonAccessible
(
)
{
}
uint8_t
XULButtonAccessible
:
:
ActionCount
(
)
const
{
return
1
;
}
void
XULButtonAccessible
:
:
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
{
if
(
aIndex
=
=
eAction_Click
)
aName
.
AssignLiteral
(
"
press
"
)
;
}
bool
XULButtonAccessible
:
:
DoAction
(
uint8_t
aIndex
)
const
{
if
(
aIndex
!
=
0
)
return
false
;
DoCommand
(
)
;
return
true
;
}
role
XULButtonAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
PUSHBUTTON
;
}
uint64_t
XULButtonAccessible
:
:
NativeState
(
)
const
{
uint64_t
state
=
LocalAccessible
:
:
NativeState
(
)
;
nsCOMPtr
<
nsIDOMXULButtonElement
>
xulButtonElement
=
Elm
(
)
-
>
AsXULButton
(
)
;
if
(
xulButtonElement
)
{
nsAutoString
type
;
xulButtonElement
-
>
GetType
(
type
)
;
if
(
type
.
EqualsLiteral
(
"
checkbox
"
)
|
|
type
.
EqualsLiteral
(
"
radio
"
)
)
{
state
|
=
states
:
:
CHECKABLE
;
}
bool
checked
=
false
;
xulButtonElement
-
>
GetChecked
(
&
checked
)
;
if
(
checked
)
{
state
|
=
states
:
:
PRESSED
;
}
}
if
(
ContainsMenu
(
)
)
state
|
=
states
:
:
HASPOPUP
;
if
(
mContent
-
>
AsElement
(
)
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
_default
)
)
{
state
|
=
states
:
:
DEFAULT
;
}
return
state
;
}
bool
XULButtonAccessible
:
:
IsWidget
(
)
const
{
return
true
;
}
bool
XULButtonAccessible
:
:
IsActiveWidget
(
)
const
{
return
FocusMgr
(
)
-
>
HasDOMFocus
(
mContent
)
;
}
bool
XULButtonAccessible
:
:
AreItemsOperable
(
)
const
{
if
(
IsMenuButton
(
)
)
{
LocalAccessible
*
menuPopup
=
mChildren
.
SafeElementAt
(
0
nullptr
)
;
if
(
menuPopup
)
{
nsMenuPopupFrame
*
menuPopupFrame
=
do_QueryFrame
(
menuPopup
-
>
GetFrame
(
)
)
;
return
menuPopupFrame
-
>
IsOpen
(
)
;
}
}
return
false
;
}
bool
XULButtonAccessible
:
:
IsAcceptableChild
(
nsIContent
*
aEl
)
const
{
return
aEl
-
>
IsXULElement
(
nsGkAtoms
:
:
menupopup
)
|
|
aEl
-
>
IsXULElement
(
nsGkAtoms
:
:
popup
)
|
|
aEl
-
>
IsText
(
)
;
}
bool
XULButtonAccessible
:
:
ContainsMenu
(
)
const
{
return
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
type
nsGkAtoms
:
:
menu
eCaseMatters
)
;
}
XULDropmarkerAccessible
:
:
XULDropmarkerAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
}
uint8_t
XULDropmarkerAccessible
:
:
ActionCount
(
)
const
{
return
1
;
}
bool
XULDropmarkerAccessible
:
:
DropmarkerOpen
(
bool
aToggleOpen
)
const
{
bool
isOpen
=
false
;
nsIContent
*
parent
=
mContent
-
>
GetFlattenedTreeParent
(
)
;
while
(
parent
)
{
nsCOMPtr
<
nsIDOMXULButtonElement
>
parentButtonElement
=
parent
-
>
AsElement
(
)
-
>
AsXULButton
(
)
;
if
(
parentButtonElement
)
{
parentButtonElement
-
>
GetOpen
(
&
isOpen
)
;
if
(
aToggleOpen
)
parentButtonElement
-
>
SetOpen
(
!
isOpen
)
;
return
isOpen
;
}
nsCOMPtr
<
nsIDOMXULMenuListElement
>
parentMenuListElement
=
parent
-
>
AsElement
(
)
-
>
AsXULMenuList
(
)
;
if
(
parentMenuListElement
)
{
parentMenuListElement
-
>
GetOpen
(
&
isOpen
)
;
if
(
aToggleOpen
)
parentMenuListElement
-
>
SetOpen
(
!
isOpen
)
;
return
isOpen
;
}
parent
=
parent
-
>
GetFlattenedTreeParent
(
)
;
}
return
isOpen
;
}
void
XULDropmarkerAccessible
:
:
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
{
aName
.
Truncate
(
)
;
if
(
aIndex
=
=
eAction_Click
)
{
if
(
DropmarkerOpen
(
false
)
)
{
aName
.
AssignLiteral
(
"
close
"
)
;
}
else
{
aName
.
AssignLiteral
(
"
open
"
)
;
}
}
}
bool
XULDropmarkerAccessible
:
:
DoAction
(
uint8_t
index
)
const
{
if
(
index
=
=
eAction_Click
)
{
DropmarkerOpen
(
true
)
;
return
true
;
}
return
false
;
}
role
XULDropmarkerAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
PUSHBUTTON
;
}
uint64_t
XULDropmarkerAccessible
:
:
NativeState
(
)
const
{
return
DropmarkerOpen
(
false
)
?
states
:
:
PRESSED
:
0
;
}
XULGroupboxAccessible
:
:
XULGroupboxAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
AccessibleWrap
(
aContent
aDoc
)
{
}
role
XULGroupboxAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
GROUPING
;
}
ENameValueFlag
XULGroupboxAccessible
:
:
NativeName
(
nsString
&
aName
)
const
{
LocalAccessible
*
label
=
RelationByType
(
RelationType
:
:
LABELLED_BY
)
.
Next
(
)
;
if
(
label
)
return
label
-
>
Name
(
aName
)
;
return
eNameOK
;
}
Relation
XULGroupboxAccessible
:
:
RelationByType
(
RelationType
aType
)
const
{
Relation
rel
=
AccessibleWrap
:
:
RelationByType
(
aType
)
;
if
(
aType
=
=
RelationType
:
:
LABELLED_BY
&
&
ChildCount
(
)
>
0
)
{
LocalAccessible
*
childAcc
=
LocalChildAt
(
0
)
;
if
(
childAcc
-
>
Role
(
)
=
=
roles
:
:
LABEL
&
&
childAcc
-
>
GetContent
(
)
-
>
IsXULElement
(
nsGkAtoms
:
:
label
)
)
{
rel
.
AppendTarget
(
childAcc
)
;
}
}
return
rel
;
}
XULRadioButtonAccessible
:
:
XULRadioButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
RadioButtonAccessible
(
aContent
aDoc
)
{
}
uint64_t
XULRadioButtonAccessible
:
:
NativeState
(
)
const
{
uint64_t
state
=
LeafAccessible
:
:
NativeState
(
)
;
state
|
=
states
:
:
CHECKABLE
;
nsCOMPtr
<
nsIDOMXULSelectControlItemElement
>
radioButton
=
Elm
(
)
-
>
AsXULSelectControlItem
(
)
;
if
(
radioButton
)
{
bool
selected
=
false
;
radioButton
-
>
GetSelected
(
&
selected
)
;
if
(
selected
)
{
state
|
=
states
:
:
CHECKED
;
}
}
return
state
;
}
uint64_t
XULRadioButtonAccessible
:
:
NativeInteractiveState
(
)
const
{
return
NativelyUnavailable
(
)
?
states
:
:
UNAVAILABLE
:
states
:
:
FOCUSABLE
;
}
LocalAccessible
*
XULRadioButtonAccessible
:
:
ContainerWidget
(
)
const
{
return
mParent
;
}
XULRadioGroupAccessible
:
:
XULRadioGroupAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
XULSelectControlAccessible
(
aContent
aDoc
)
{
}
role
XULRadioGroupAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
RADIO_GROUP
;
}
uint64_t
XULRadioGroupAccessible
:
:
NativeInteractiveState
(
)
const
{
return
NativelyUnavailable
(
)
?
states
:
:
UNAVAILABLE
:
0
;
}
bool
XULRadioGroupAccessible
:
:
IsWidget
(
)
const
{
return
true
;
}
bool
XULRadioGroupAccessible
:
:
IsActiveWidget
(
)
const
{
return
FocusMgr
(
)
-
>
HasDOMFocus
(
mContent
)
;
}
bool
XULRadioGroupAccessible
:
:
AreItemsOperable
(
)
const
{
return
true
;
}
LocalAccessible
*
XULRadioGroupAccessible
:
:
CurrentItem
(
)
const
{
if
(
!
mSelectControl
)
{
return
nullptr
;
}
RefPtr
<
dom
:
:
Element
>
currentItemElm
;
nsCOMPtr
<
nsIDOMXULRadioGroupElement
>
group
=
mSelectControl
-
>
AsXULRadioGroup
(
)
;
if
(
group
)
{
group
-
>
GetFocusedItem
(
getter_AddRefs
(
currentItemElm
)
)
;
}
if
(
currentItemElm
)
{
DocAccessible
*
document
=
Document
(
)
;
if
(
document
)
{
return
document
-
>
GetAccessible
(
currentItemElm
)
;
}
}
return
nullptr
;
}
void
XULRadioGroupAccessible
:
:
SetCurrentItem
(
const
LocalAccessible
*
aItem
)
{
if
(
!
mSelectControl
)
{
return
;
}
nsCOMPtr
<
dom
:
:
Element
>
itemElm
=
aItem
-
>
Elm
(
)
;
nsCOMPtr
<
nsIDOMXULRadioGroupElement
>
group
=
mSelectControl
-
>
AsXULRadioGroup
(
)
;
if
(
group
)
{
group
-
>
SetFocusedItem
(
itemElm
)
;
}
}
XULStatusBarAccessible
:
:
XULStatusBarAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
AccessibleWrap
(
aContent
aDoc
)
{
}
role
XULStatusBarAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
STATUSBAR
;
}
XULToolbarButtonAccessible
:
:
XULToolbarButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
XULButtonAccessible
(
aContent
aDoc
)
{
}
void
XULToolbarButtonAccessible
:
:
GetPositionAndSizeInternal
(
int32_t
*
aPosInSet
int32_t
*
aSetSize
)
{
int32_t
setSize
=
0
;
int32_t
posInSet
=
0
;
LocalAccessible
*
parent
=
LocalParent
(
)
;
if
(
!
parent
)
return
;
uint32_t
childCount
=
parent
-
>
ChildCount
(
)
;
for
(
uint32_t
childIdx
=
0
;
childIdx
<
childCount
;
childIdx
+
+
)
{
LocalAccessible
*
child
=
parent
-
>
LocalChildAt
(
childIdx
)
;
if
(
IsSeparator
(
child
)
)
{
if
(
posInSet
)
break
;
setSize
=
0
;
}
else
{
setSize
+
+
;
if
(
child
=
=
this
)
posInSet
=
setSize
;
}
}
*
aPosInSet
=
posInSet
;
*
aSetSize
=
setSize
;
}
bool
XULToolbarButtonAccessible
:
:
IsSeparator
(
LocalAccessible
*
aAccessible
)
{
nsIContent
*
content
=
aAccessible
-
>
GetContent
(
)
;
return
content
&
&
content
-
>
IsAnyOfXULElements
(
nsGkAtoms
:
:
toolbarseparator
nsGkAtoms
:
:
toolbarspacer
nsGkAtoms
:
:
toolbarspring
)
;
}
bool
XULToolbarButtonAccessible
:
:
IsAcceptableChild
(
nsIContent
*
aEl
)
const
{
return
aEl
-
>
IsXULElement
(
nsGkAtoms
:
:
menupopup
)
|
|
aEl
-
>
IsXULElement
(
nsGkAtoms
:
:
popup
)
|
|
(
aEl
-
>
IsXULElement
(
nsGkAtoms
:
:
label
)
&
&
!
mContent
-
>
AsElement
(
)
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
label
)
)
;
}
XULToolbarAccessible
:
:
XULToolbarAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
AccessibleWrap
(
aContent
aDoc
)
{
}
role
XULToolbarAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
TOOLBAR
;
}
ENameValueFlag
XULToolbarAccessible
:
:
NativeName
(
nsString
&
aName
)
const
{
if
(
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
toolbarname
aName
)
)
{
aName
.
CompressWhitespace
(
)
;
}
return
eNameOK
;
}
XULToolbarSeparatorAccessible
:
:
XULToolbarSeparatorAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
}
role
XULToolbarSeparatorAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
SEPARATOR
;
}
uint64_t
XULToolbarSeparatorAccessible
:
:
NativeState
(
)
const
{
return
0
;
}
