#
ifndef
MOZILLA_A11Y_XULFormControlAccessible_H_
#
define
MOZILLA_A11Y_XULFormControlAccessible_H_
#
include
"
AccessibleWrap
.
h
"
#
include
"
FormControlAccessible
.
h
"
#
include
"
HyperTextAccessibleWrap
.
h
"
#
include
"
XULSelectControlAccessible
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
XULButtonAccessible
:
public
AccessibleWrap
{
public
:
enum
{
eAction_Click
=
0
}
;
XULButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
XULButtonAccessible
AccessibleWrap
)
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
uint8_t
ActionCount
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
bool
DoAction
(
uint8_t
aIndex
)
const
override
;
virtual
bool
IsWidget
(
)
const
override
;
virtual
bool
IsActiveWidget
(
)
const
override
;
virtual
bool
AreItemsOperable
(
)
const
override
;
virtual
LocalAccessible
*
ContainerWidget
(
)
const
override
;
virtual
bool
IsAcceptableChild
(
nsIContent
*
aEl
)
const
override
;
protected
:
virtual
~
XULButtonAccessible
(
)
;
bool
ContainsMenu
(
)
const
;
}
;
class
XULDropmarkerAccessible
:
public
LeafAccessible
{
public
:
enum
{
eAction_Click
=
0
}
;
XULDropmarkerAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
uint8_t
ActionCount
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
bool
DoAction
(
uint8_t
aIndex
)
const
override
;
private
:
bool
DropmarkerOpen
(
bool
aToggleOpen
)
const
;
}
;
class
XULGroupboxAccessible
final
:
public
AccessibleWrap
{
public
:
XULGroupboxAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
protected
:
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
}
;
class
XULRadioButtonAccessible
:
public
RadioButtonAccessible
{
public
:
XULRadioButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
uint64_t
NativeInteractiveState
(
)
const
override
;
virtual
LocalAccessible
*
ContainerWidget
(
)
const
override
;
}
;
class
XULRadioGroupAccessible
:
public
XULSelectControlAccessible
{
public
:
XULRadioGroupAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeInteractiveState
(
)
const
override
;
virtual
bool
IsWidget
(
)
const
override
;
virtual
bool
IsActiveWidget
(
)
const
override
;
virtual
bool
AreItemsOperable
(
)
const
override
;
virtual
LocalAccessible
*
CurrentItem
(
)
const
override
;
virtual
void
SetCurrentItem
(
const
LocalAccessible
*
aItem
)
override
;
}
;
class
XULStatusBarAccessible
:
public
AccessibleWrap
{
public
:
XULStatusBarAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
}
;
class
XULToolbarButtonAccessible
:
public
XULButtonAccessible
{
public
:
XULToolbarButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
void
GetPositionAndSizeInternal
(
int32_t
*
aPosInSet
int32_t
*
aSetSize
)
override
;
static
bool
IsSeparator
(
LocalAccessible
*
aAccessible
)
;
virtual
bool
IsAcceptableChild
(
nsIContent
*
aEl
)
const
override
;
}
;
class
XULToolbarAccessible
:
public
AccessibleWrap
{
public
:
XULToolbarAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
protected
:
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
}
;
class
XULToolbarSeparatorAccessible
:
public
LeafAccessible
{
public
:
XULToolbarSeparatorAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
}
;
}
}
#
endif
