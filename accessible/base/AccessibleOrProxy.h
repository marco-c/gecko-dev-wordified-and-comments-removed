#
ifndef
mozilla_a11y_AccessibleOrProxy_h
#
define
mozilla_a11y_AccessibleOrProxy_h
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
include
"
mozilla
/
a11y
/
ProxyAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
Role
.
h
"
#
include
<
stdint
.
h
>
namespace
mozilla
{
namespace
a11y
{
class
AccessibleOrProxy
{
public
:
MOZ_IMPLICIT
AccessibleOrProxy
(
Accessible
*
aAcc
)
:
mBits
(
reinterpret_cast
<
uintptr_t
>
(
aAcc
)
)
{
}
MOZ_IMPLICIT
AccessibleOrProxy
(
ProxyAccessible
*
aProxy
)
:
mBits
(
aProxy
?
(
reinterpret_cast
<
uintptr_t
>
(
aProxy
)
|
IS_PROXY
)
:
0
)
{
}
MOZ_IMPLICIT
AccessibleOrProxy
(
decltype
(
nullptr
)
)
:
mBits
(
0
)
{
}
bool
IsProxy
(
)
const
{
return
mBits
&
IS_PROXY
;
}
ProxyAccessible
*
AsProxy
(
)
const
{
if
(
IsProxy
(
)
)
{
return
reinterpret_cast
<
ProxyAccessible
*
>
(
mBits
&
~
IS_PROXY
)
;
}
return
nullptr
;
}
bool
IsAccessible
(
)
const
{
return
!
IsProxy
(
)
;
}
Accessible
*
AsAccessible
(
)
const
{
if
(
IsAccessible
(
)
)
{
return
reinterpret_cast
<
Accessible
*
>
(
mBits
)
;
}
return
nullptr
;
}
bool
IsNull
(
)
const
{
return
mBits
=
=
0
;
}
uint32_t
ChildCount
(
)
const
{
if
(
IsProxy
(
)
)
{
return
AsProxy
(
)
-
>
ChildrenCount
(
)
;
}
return
AsAccessible
(
)
-
>
ChildCount
(
)
;
}
AccessibleOrProxy
ChildAt
(
uint32_t
aIdx
)
{
if
(
IsProxy
(
)
)
{
return
AsProxy
(
)
-
>
ChildAt
(
aIdx
)
;
}
return
AsAccessible
(
)
-
>
GetChildAt
(
aIdx
)
;
}
AccessibleOrProxy
FirstChild
(
)
{
if
(
IsProxy
(
)
)
{
return
AsProxy
(
)
-
>
FirstChild
(
)
;
}
return
AsAccessible
(
)
-
>
FirstChild
(
)
;
}
AccessibleOrProxy
LastChild
(
)
{
if
(
IsProxy
(
)
)
{
return
AsProxy
(
)
-
>
LastChild
(
)
;
}
return
AsAccessible
(
)
-
>
LastChild
(
)
;
}
role
Role
(
)
const
{
if
(
IsProxy
(
)
)
{
return
AsProxy
(
)
-
>
Role
(
)
;
}
return
AsAccessible
(
)
-
>
Role
(
)
;
}
AccessibleOrProxy
Parent
(
)
const
;
uintptr_t
Bits
(
)
const
{
return
mBits
;
}
void
SetBits
(
uintptr_t
aBits
)
{
mBits
=
aBits
;
}
private
:
uintptr_t
mBits
;
static
const
uintptr_t
IS_PROXY
=
0x1
;
}
;
}
}
#
endif
