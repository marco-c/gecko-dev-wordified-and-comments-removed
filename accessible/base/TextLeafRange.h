#
ifndef
mozilla_a11y_TextLeafRange_h__
#
define
mozilla_a11y_TextLeafRange_h__
#
include
<
stdint
.
h
>
#
include
"
nsDirection
.
h
"
#
include
"
nsIAccessibleText
.
h
"
namespace
mozilla
:
:
a11y
{
class
Accessible
;
class
TextLeafPoint
final
{
public
:
TextLeafPoint
(
Accessible
*
aAcc
int32_t
aOffset
)
;
TextLeafPoint
(
)
:
mAcc
(
nullptr
)
mOffset
(
0
)
{
}
Accessible
*
mAcc
;
int32_t
mOffset
;
bool
operator
=
=
(
const
TextLeafPoint
&
aPoint
)
const
{
return
mAcc
=
=
aPoint
.
mAcc
&
&
mOffset
=
=
aPoint
.
mOffset
;
}
bool
operator
!
=
(
const
TextLeafPoint
&
aPoint
)
const
{
return
!
(
*
this
=
=
aPoint
)
;
}
bool
operator
<
(
const
TextLeafPoint
&
aPoint
)
const
;
explicit
operator
bool
(
)
const
{
return
!
!
mAcc
;
}
TextLeafPoint
FindBoundary
(
AccessibleTextBoundary
aBoundaryType
nsDirection
aDirection
bool
aIncludeOrigin
=
false
)
const
;
TextLeafPoint
FindPrevLineStartSameLocalAcc
(
bool
aIncludeOrigin
)
const
;
TextLeafPoint
FindNextLineStartSameLocalAcc
(
bool
aIncludeOrigin
)
const
;
TextLeafPoint
FindPrevWordStartSameAcc
(
bool
aIncludeOrigin
)
const
;
TextLeafPoint
FindNextWordStartSameAcc
(
bool
aIncludeOrigin
)
const
;
private
:
bool
IsEmptyLastLine
(
)
const
;
}
;
class
TextLeafRange
final
{
public
:
TextLeafRange
(
const
TextLeafPoint
&
aStart
const
TextLeafPoint
&
aEnd
)
:
mStart
(
aStart
)
mEnd
(
aEnd
)
{
}
explicit
TextLeafRange
(
const
TextLeafPoint
&
aStart
)
:
mStart
(
aStart
)
mEnd
(
aStart
)
{
}
TextLeafPoint
Start
(
)
{
return
mStart
;
}
void
SetStart
(
const
TextLeafPoint
&
aStart
)
{
mStart
=
aStart
;
}
TextLeafPoint
End
(
)
{
return
mEnd
;
}
void
SetEnd
(
const
TextLeafPoint
&
aEnd
)
{
mEnd
=
aEnd
;
}
private
:
TextLeafPoint
mStart
;
TextLeafPoint
mEnd
;
}
;
}
#
endif
