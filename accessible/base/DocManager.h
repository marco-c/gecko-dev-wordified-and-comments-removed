#
ifndef
mozilla_a11_DocManager_h_
#
define
mozilla_a11_DocManager_h_
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
Accessible
;
class
DocAccessible
;
class
xpcAccessibleDocument
;
class
DocAccessibleParent
;
class
DocManager
:
public
nsIWebProgressListener
public
nsIDOMEventListener
public
nsSupportsWeakReference
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWEBPROGRESSLISTENER
NS_DECL_NSIDOMEVENTLISTENER
DocAccessible
*
GetDocAccessible
(
dom
:
:
Document
*
aDocument
)
;
DocAccessible
*
GetDocAccessible
(
const
nsIPresShell
*
aPresShell
)
{
if
(
!
aPresShell
)
return
nullptr
;
DocAccessible
*
doc
=
aPresShell
-
>
GetDocAccessible
(
)
;
if
(
doc
)
return
doc
;
return
GetDocAccessible
(
aPresShell
-
>
GetDocument
(
)
)
;
}
Accessible
*
FindAccessibleInCache
(
nsINode
*
aNode
)
const
;
void
NotifyOfDocumentShutdown
(
DocAccessible
*
aDocument
dom
:
:
Document
*
aDOMDocument
)
;
void
RemoveFromXPCDocumentCache
(
DocAccessible
*
aDocument
)
;
xpcAccessibleDocument
*
GetXPCDocument
(
DocAccessible
*
aDocument
)
;
xpcAccessibleDocument
*
GetCachedXPCDocument
(
DocAccessible
*
aDocument
)
const
{
return
mXPCDocumentCache
.
GetWeak
(
aDocument
)
;
}
static
void
RemoteDocShutdown
(
DocAccessibleParent
*
aDoc
)
{
DebugOnly
<
bool
>
result
=
sRemoteDocuments
-
>
RemoveElement
(
aDoc
)
;
MOZ_ASSERT
(
result
"
Why
didn
'
t
we
find
the
document
!
"
)
;
}
static
void
RemoteDocAdded
(
DocAccessibleParent
*
aDoc
)
;
static
const
nsTArray
<
DocAccessibleParent
*
>
*
TopLevelRemoteDocs
(
)
{
return
sRemoteDocuments
;
}
static
void
NotifyOfRemoteDocShutdown
(
DocAccessibleParent
*
adoc
)
;
static
void
RemoveFromRemoteXPCDocumentCache
(
DocAccessibleParent
*
aDoc
)
;
static
xpcAccessibleDocument
*
GetXPCDocument
(
DocAccessibleParent
*
aDoc
)
;
static
xpcAccessibleDocument
*
GetCachedXPCDocument
(
const
DocAccessibleParent
*
aDoc
)
{
return
sRemoteXPCDocumentCache
?
sRemoteXPCDocumentCache
-
>
GetWeak
(
aDoc
)
:
nullptr
;
}
#
ifdef
DEBUG
bool
IsProcessingRefreshDriverNotification
(
)
const
;
#
endif
protected
:
DocManager
(
)
;
virtual
~
DocManager
(
)
{
}
bool
Init
(
)
;
void
Shutdown
(
)
;
bool
HasXPCDocuments
(
)
{
return
mXPCDocumentCache
.
Count
(
)
>
0
|
|
(
sRemoteXPCDocumentCache
&
&
sRemoteXPCDocumentCache
-
>
Count
(
)
>
0
)
;
}
private
:
DocManager
(
const
DocManager
&
)
;
DocManager
&
operator
=
(
const
DocManager
&
)
;
private
:
void
HandleDOMDocumentLoad
(
dom
:
:
Document
*
aDocument
uint32_t
aLoadEventType
)
;
void
AddListeners
(
dom
:
:
Document
*
aDocument
bool
aAddPageShowListener
)
;
void
RemoveListeners
(
dom
:
:
Document
*
aDocument
)
;
DocAccessible
*
CreateDocOrRootAccessible
(
dom
:
:
Document
*
aDocument
)
;
void
ClearDocCache
(
)
;
typedef
nsRefPtrHashtable
<
nsPtrHashKey
<
const
dom
:
:
Document
>
DocAccessible
>
DocAccessibleHashtable
;
DocAccessibleHashtable
mDocAccessibleCache
;
typedef
nsRefPtrHashtable
<
nsPtrHashKey
<
const
DocAccessible
>
xpcAccessibleDocument
>
XPCDocumentHashtable
;
XPCDocumentHashtable
mXPCDocumentCache
;
static
nsRefPtrHashtable
<
nsPtrHashKey
<
const
DocAccessibleParent
>
xpcAccessibleDocument
>
*
sRemoteXPCDocumentCache
;
static
StaticAutoPtr
<
nsTArray
<
DocAccessibleParent
*
>
>
sRemoteDocuments
;
}
;
inline
DocAccessible
*
GetExistingDocAccessible
(
const
dom
:
:
Document
*
aDocument
)
{
PresShell
*
presShell
=
aDocument
-
>
GetPresShell
(
)
;
return
presShell
?
presShell
-
>
GetDocAccessible
(
)
:
nullptr
;
}
}
}
#
endif
