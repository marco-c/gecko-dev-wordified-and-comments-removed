#
include
"
AccessibleOrProxy
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
OuterDocAccessible
.
h
"
namespace
mozilla
{
namespace
a11y
{
int32_t
AccessibleOrProxy
:
:
IndexInParent
(
)
const
{
if
(
IsAccessible
(
)
)
{
return
AsAccessible
(
)
-
>
IndexInParent
(
)
;
}
RemoteAccessible
*
proxy
=
AsProxy
(
)
;
if
(
!
proxy
)
{
return
-
1
;
}
if
(
proxy
-
>
RemoteParent
(
)
)
{
return
proxy
-
>
IndexInParent
(
)
;
}
if
(
proxy
-
>
OuterDocOfRemoteBrowser
(
)
)
{
return
0
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Proxy
should
have
parent
or
outer
doc
.
"
)
;
return
-
1
;
}
AccessibleOrProxy
AccessibleOrProxy
:
:
Parent
(
)
const
{
if
(
IsAccessible
(
)
)
{
return
AsAccessible
(
)
-
>
LocalParent
(
)
;
}
RemoteAccessible
*
proxy
=
AsProxy
(
)
;
if
(
!
proxy
)
{
return
nullptr
;
}
if
(
RemoteAccessible
*
parent
=
proxy
-
>
RemoteParent
(
)
)
{
return
parent
;
}
return
proxy
-
>
OuterDocOfRemoteBrowser
(
)
;
}
AccessibleOrProxy
AccessibleOrProxy
:
:
ChildAtPoint
(
int32_t
aX
int32_t
aY
Accessible
:
:
EWhichChildAtPoint
aWhichChild
)
{
Accessible
*
result
=
IsProxy
(
)
?
AsProxy
(
)
-
>
ChildAtPoint
(
aX
aY
aWhichChild
)
:
AsAccessible
(
)
-
>
ChildAtPoint
(
aX
aY
aWhichChild
)
;
if
(
!
result
)
{
return
nullptr
;
}
if
(
result
-
>
IsLocal
(
)
)
{
return
result
-
>
AsLocal
(
)
;
}
if
(
result
-
>
IsRemote
(
)
)
{
return
result
-
>
AsRemote
(
)
;
}
return
nullptr
;
}
RemoteAccessible
*
AccessibleOrProxy
:
:
RemoteChildDoc
(
)
const
{
MOZ_ASSERT
(
!
IsNull
(
)
)
;
if
(
IsProxy
(
)
)
{
return
nullptr
;
}
OuterDocAccessible
*
outerDoc
=
AsAccessible
(
)
-
>
AsOuterDoc
(
)
;
if
(
!
outerDoc
)
{
return
nullptr
;
}
return
outerDoc
-
>
RemoteChildDoc
(
)
;
}
}
}
