#
include
"
AccessibleOrProxy
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
OuterDocAccessible
.
h
"
#
include
"
mozilla
/
StaticPrefs_accessibility
.
h
"
namespace
mozilla
{
namespace
a11y
{
AccessibleOrProxy
AccessibleOrProxy
:
:
Parent
(
)
const
{
if
(
IsAccessible
(
)
)
{
return
AsAccessible
(
)
-
>
Parent
(
)
;
}
ProxyAccessible
*
proxy
=
AsProxy
(
)
;
if
(
!
proxy
)
{
return
nullptr
;
}
if
(
ProxyAccessible
*
parent
=
proxy
-
>
Parent
(
)
)
{
return
parent
;
}
return
proxy
-
>
OuterDocOfRemoteBrowser
(
)
;
}
AccessibleOrProxy
AccessibleOrProxy
:
:
ChildAtPoint
(
int32_t
aX
int32_t
aY
Accessible
:
:
EWhichChildAtPoint
aWhichChild
)
{
if
(
IsProxy
(
)
)
{
return
AsProxy
(
)
-
>
ChildAtPoint
(
aX
aY
aWhichChild
)
;
}
ProxyAccessible
*
childDoc
=
RemoteChildDoc
(
)
;
if
(
childDoc
)
{
nsIntRect
docRect
=
AsAccessible
(
)
-
>
Bounds
(
)
;
if
(
!
docRect
.
Contains
(
aX
aY
)
)
{
return
nullptr
;
}
if
(
aWhichChild
=
=
Accessible
:
:
eDirectChild
)
{
return
childDoc
;
}
return
childDoc
-
>
ChildAtPoint
(
aX
aY
aWhichChild
)
;
}
AccessibleOrProxy
target
=
AsAccessible
(
)
-
>
ChildAtPoint
(
aX
aY
aWhichChild
)
;
MOZ_ASSERT
(
target
.
IsAccessible
(
)
)
;
if
(
aWhichChild
=
=
Accessible
:
:
eDirectChild
)
{
return
target
;
}
childDoc
=
target
.
RemoteChildDoc
(
)
;
if
(
childDoc
)
{
return
childDoc
-
>
ChildAtPoint
(
aX
aY
aWhichChild
)
;
}
return
target
;
}
ProxyAccessible
*
AccessibleOrProxy
:
:
RemoteChildDoc
(
)
const
{
if
(
!
StaticPrefs
:
:
accessibility_xpcom_traverse_outerdoc
(
)
|
|
IsProxy
(
)
)
{
return
nullptr
;
}
OuterDocAccessible
*
outerDoc
=
AsAccessible
(
)
-
>
AsOuterDoc
(
)
;
if
(
!
outerDoc
)
{
return
nullptr
;
}
return
outerDoc
-
>
RemoteChildDoc
(
)
;
}
}
}
