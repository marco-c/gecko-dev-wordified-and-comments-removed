#
ifndef
__nsAccessibilityService_h__
#
define
__nsAccessibilityService_h__
#
include
"
mozilla
/
a11y
/
DocManager
.
h
"
#
include
"
mozilla
/
a11y
/
FocusManager
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
mozilla
/
a11y
/
Role
.
h
"
#
include
"
mozilla
/
a11y
/
SelectionManager
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIAccessibleEvent
.
h
"
#
include
"
nsIEventListenerService
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
xpcAccessibilityService
.
h
"
class
nsImageFrame
;
class
nsIArray
;
class
nsITreeView
;
namespace
mozilla
{
class
PresShell
;
class
Monitor
;
namespace
dom
{
class
DOMStringList
;
class
Element
;
}
namespace
a11y
{
class
AccAttributes
;
class
Accessible
;
class
ApplicationAccessible
;
class
xpcAccessibleApplication
;
FocusManager
*
FocusMgr
(
)
;
SelectionManager
*
SelectionMgr
(
)
;
ApplicationAccessible
*
ApplicationAcc
(
)
;
xpcAccessibleApplication
*
XPCApplicationAcc
(
)
;
typedef
LocalAccessible
*
(
New_Accessible
)
(
mozilla
:
:
dom
:
:
Element
*
aElement
LocalAccessible
*
aContext
)
;
struct
MarkupAttrInfo
{
nsStaticAtom
*
name
;
nsStaticAtom
*
value
;
nsStaticAtom
*
DOMAttrName
;
nsStaticAtom
*
DOMAttrValue
;
}
;
struct
MarkupMapInfo
{
const
nsStaticAtom
*
const
tag
;
New_Accessible
*
new_func
;
a11y
:
:
role
role
;
MarkupAttrInfo
attrs
[
4
]
;
}
;
struct
XULMarkupMapInfo
{
const
nsStaticAtom
*
const
tag
;
New_Accessible
*
new_func
;
}
;
void
PrefChanged
(
const
char
*
aPref
void
*
aClosure
)
;
EPlatformDisabledState
ReadPlatformDisabledState
(
)
;
}
}
class
nsAccessibilityService
final
:
public
mozilla
:
:
a11y
:
:
DocManager
public
mozilla
:
:
a11y
:
:
FocusManager
public
mozilla
:
:
a11y
:
:
SelectionManager
public
nsIListenerChangeListener
public
nsIObserver
{
public
:
typedef
mozilla
:
:
a11y
:
:
LocalAccessible
LocalAccessible
;
typedef
mozilla
:
:
a11y
:
:
DocAccessible
DocAccessible
;
NS_IMETHOD
ListenersChanged
(
nsIArray
*
aEventChanges
)
override
;
protected
:
~
nsAccessibilityService
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIOBSERVER
LocalAccessible
*
GetRootDocumentAccessible
(
mozilla
:
:
PresShell
*
aPresShell
bool
aCanCreate
)
;
LocalAccessible
*
AddNativeRootAccessible
(
void
*
aAtkAccessible
)
;
void
RemoveNativeRootAccessible
(
LocalAccessible
*
aRootAccessible
)
;
bool
HasAccessible
(
nsINode
*
aDOMNode
)
;
void
GetStringRole
(
uint32_t
aRole
nsAString
&
aString
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
DOMStringList
>
GetStringStates
(
uint64_t
aStates
)
const
;
void
GetStringStates
(
uint32_t
aState
uint32_t
aExtraState
nsISupports
*
*
aStringStates
)
;
void
GetStringEventType
(
uint32_t
aEventType
nsAString
&
aString
)
;
void
GetStringEventType
(
uint32_t
aEventType
nsACString
&
aString
)
;
void
GetStringRelationType
(
uint32_t
aRelationType
nsAString
&
aString
)
;
void
DeckPanelSwitched
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aDeckNode
nsIFrame
*
aPrevBoxFrame
nsIFrame
*
aCurrentBoxFrame
)
;
void
ContentRangeInserted
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aStartChild
nsIContent
*
aEndChild
)
;
void
ScheduleAccessibilitySubtreeUpdate
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aStartChild
)
;
void
ContentRemoved
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aChild
)
;
void
TableLayoutGuessMaybeChanged
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aContent
)
;
void
ComboboxOptionMaybeChanged
(
mozilla
:
:
PresShell
*
nsIContent
*
aMutatingNode
)
;
void
UpdateText
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aContent
)
;
void
TreeViewChanged
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aContent
nsITreeView
*
aView
)
;
void
RangeValueChanged
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aContent
)
;
void
UpdateImageMap
(
nsImageFrame
*
aImageFrame
)
;
void
UpdateLabelValue
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aLabelElm
const
nsString
&
aNewValue
)
;
void
NotifyOfAnchorJumpTo
(
nsIContent
*
aTarget
)
;
void
PresShellActivated
(
mozilla
:
:
PresShell
*
aPresShell
)
;
void
RecreateAccessible
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aContent
)
;
void
FireAccessibleEvent
(
uint32_t
aEvent
LocalAccessible
*
aTarget
)
;
void
NotifyOfPossibleBoundsChange
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aContent
)
;
void
NotifyOfComputedStyleChange
(
mozilla
:
:
PresShell
*
aPresShell
nsIContent
*
aContent
)
;
void
NotifyOfResolutionChange
(
mozilla
:
:
PresShell
*
aPresShell
float
aResolution
)
;
void
NotifyOfDevPixelRatioChange
(
mozilla
:
:
PresShell
*
aPresShell
int32_t
aAppUnitsPerDevPixel
)
;
static
bool
IsShutdown
(
)
{
return
gConsumers
=
=
0
;
}
;
LocalAccessible
*
CreateAccessible
(
nsINode
*
aNode
LocalAccessible
*
aContext
bool
*
aIsSubtreeHidden
=
nullptr
)
;
mozilla
:
:
a11y
:
:
role
MarkupRole
(
const
nsIContent
*
aContent
)
const
{
const
mozilla
:
:
a11y
:
:
MarkupMapInfo
*
markupMap
=
GetMarkupMapInfoFor
(
aContent
)
;
return
markupMap
?
markupMap
-
>
role
:
mozilla
:
:
a11y
:
:
roles
:
:
NOTHING
;
}
template
<
typename
T
>
nsStaticAtom
*
MarkupAttribute
(
T
aSource
nsStaticAtom
*
aAtom
)
const
{
const
mozilla
:
:
a11y
:
:
MarkupMapInfo
*
markupMap
=
GetMarkupMapInfoFor
(
aSource
)
;
if
(
markupMap
)
{
for
(
size_t
i
=
0
;
i
<
mozilla
:
:
ArrayLength
(
markupMap
-
>
attrs
)
;
i
+
+
)
{
const
mozilla
:
:
a11y
:
:
MarkupAttrInfo
*
info
=
markupMap
-
>
attrs
+
i
;
if
(
info
-
>
name
=
=
aAtom
)
{
return
info
-
>
value
;
}
}
}
return
nullptr
;
}
void
MarkupAttributes
(
mozilla
:
:
a11y
:
:
Accessible
*
aAcc
mozilla
:
:
a11y
:
:
AccAttributes
*
aAttributes
)
const
;
enum
ServiceConsumer
{
eXPCOM
=
1
<
<
0
eMainProcess
=
1
<
<
1
ePlatformAPI
=
1
<
<
2
}
;
#
if
defined
(
ANDROID
)
static
mozilla
:
:
Monitor
&
GetAndroidMonitor
(
)
;
#
endif
private
:
nsAccessibilityService
(
)
;
nsAccessibilityService
(
const
nsAccessibilityService
&
)
;
nsAccessibilityService
&
operator
=
(
const
nsAccessibilityService
&
)
;
private
:
bool
Init
(
)
;
void
Shutdown
(
)
;
already_AddRefed
<
LocalAccessible
>
CreateAccessibleByFrameType
(
nsIFrame
*
aFrame
nsIContent
*
aContent
LocalAccessible
*
aContext
)
;
void
NotifyOfConsumersChange
(
)
;
void
GetConsumers
(
nsAString
&
aString
)
;
void
SetConsumers
(
uint32_t
aConsumers
bool
aNotify
=
true
)
;
void
UnsetConsumers
(
uint32_t
aConsumers
)
;
static
nsAccessibilityService
*
gAccessibilityService
;
static
mozilla
:
:
a11y
:
:
ApplicationAccessible
*
gApplicationAccessible
;
static
mozilla
:
:
a11y
:
:
xpcAccessibleApplication
*
gXPCApplicationAccessible
;
static
uint32_t
gConsumers
;
using
MarkupMap
=
nsTHashMap
<
nsPtrHashKey
<
const
nsAtom
>
const
mozilla
:
:
a11y
:
:
MarkupMapInfo
*
>
;
MarkupMap
mHTMLMarkupMap
;
MarkupMap
mMathMLMarkupMap
;
const
mozilla
:
:
a11y
:
:
MarkupMapInfo
*
GetMarkupMapInfoFor
(
const
nsIContent
*
aContent
)
const
{
if
(
aContent
-
>
IsHTMLElement
(
)
)
{
return
mHTMLMarkupMap
.
Get
(
aContent
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
;
}
if
(
aContent
-
>
IsMathMLElement
(
)
)
{
return
mMathMLMarkupMap
.
Get
(
aContent
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
;
}
return
nullptr
;
}
const
mozilla
:
:
a11y
:
:
MarkupMapInfo
*
GetMarkupMapInfoFor
(
mozilla
:
:
a11y
:
:
Accessible
*
aAcc
)
const
;
nsTHashMap
<
nsPtrHashKey
<
const
nsAtom
>
const
mozilla
:
:
a11y
:
:
XULMarkupMapInfo
*
>
mXULMarkupMap
;
friend
nsAccessibilityService
*
GetAccService
(
)
;
friend
nsAccessibilityService
*
GetOrCreateAccService
(
uint32_t
)
;
friend
void
MaybeShutdownAccService
(
uint32_t
)
;
friend
void
mozilla
:
:
a11y
:
:
PrefChanged
(
const
char
*
void
*
)
;
friend
mozilla
:
:
a11y
:
:
FocusManager
*
mozilla
:
:
a11y
:
:
FocusMgr
(
)
;
friend
mozilla
:
:
a11y
:
:
SelectionManager
*
mozilla
:
:
a11y
:
:
SelectionMgr
(
)
;
friend
mozilla
:
:
a11y
:
:
ApplicationAccessible
*
mozilla
:
:
a11y
:
:
ApplicationAcc
(
)
;
friend
mozilla
:
:
a11y
:
:
xpcAccessibleApplication
*
mozilla
:
:
a11y
:
:
XPCApplicationAcc
(
)
;
friend
class
xpcAccessibilityService
;
}
;
inline
nsAccessibilityService
*
GetAccService
(
)
{
return
nsAccessibilityService
:
:
gAccessibilityService
;
}
nsAccessibilityService
*
GetOrCreateAccService
(
uint32_t
aNewConsumer
=
nsAccessibilityService
:
:
ePlatformAPI
)
;
void
MaybeShutdownAccService
(
uint32_t
aFormerConsumer
)
;
inline
bool
IPCAccessibilityActive
(
)
{
return
XRE_IsContentProcess
(
)
;
}
static
const
char
kEventTypeNames
[
]
[
40
]
=
{
"
unknown
"
"
show
"
"
hide
"
"
reorder
"
"
active
decendent
change
"
"
focus
"
"
state
change
"
"
location
change
"
"
name
changed
"
"
description
change
"
"
value
change
"
"
help
change
"
"
default
action
change
"
"
action
change
"
"
accelerator
change
"
"
selection
"
"
selection
add
"
"
selection
remove
"
"
selection
within
"
"
alert
"
"
foreground
"
"
menu
start
"
"
menu
end
"
"
menupopup
start
"
"
menupopup
end
"
"
capture
start
"
"
capture
end
"
"
movesize
start
"
"
movesize
end
"
"
contexthelp
start
"
"
contexthelp
end
"
"
dragdrop
start
"
"
dragdrop
end
"
"
dialog
start
"
"
dialog
end
"
"
scrolling
start
"
"
scrolling
end
"
"
minimize
start
"
"
minimize
end
"
"
document
load
complete
"
"
document
reload
"
"
document
load
stopped
"
"
document
attributes
changed
"
"
document
content
changed
"
"
property
changed
"
"
page
changed
"
"
text
attribute
changed
"
"
text
caret
moved
"
"
text
changed
"
"
text
inserted
"
"
text
removed
"
"
text
updated
"
"
text
selection
changed
"
"
visible
data
changed
"
"
text
column
changed
"
"
section
changed
"
"
table
caption
changed
"
"
table
model
changed
"
"
table
summary
changed
"
"
table
row
description
changed
"
"
table
row
header
changed
"
"
table
row
insert
"
"
table
row
delete
"
"
table
row
reorder
"
"
table
column
description
changed
"
"
table
column
header
changed
"
"
table
column
insert
"
"
table
column
delete
"
"
table
column
reorder
"
"
window
activate
"
"
window
create
"
"
window
deactivate
"
"
window
destroy
"
"
window
maximize
"
"
window
minimize
"
"
window
resize
"
"
window
restore
"
"
hyperlink
end
index
changed
"
"
hyperlink
number
of
anchors
changed
"
"
hyperlink
selected
link
changed
"
"
hypertext
link
activated
"
"
hypertext
link
selected
"
"
hyperlink
start
index
changed
"
"
hypertext
changed
"
"
hypertext
links
count
changed
"
"
object
attribute
changed
"
"
virtual
cursor
changed
"
"
text
value
change
"
"
scrolling
"
"
announcement
"
"
live
region
added
"
"
live
region
removed
"
"
table
styling
changed
"
"
inner
reorder
"
}
;
#
endif
