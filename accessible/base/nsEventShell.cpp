#
include
"
nsEventShell
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
Logging
.
h
"
#
include
"
mozilla
/
dom
/
DOMStringList
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
void
nsEventShell
:
:
FireEvent
(
AccEvent
*
aEvent
)
{
if
(
!
aEvent
|
|
aEvent
-
>
mEventRule
=
=
AccEvent
:
:
eDoNotEmit
)
return
;
LocalAccessible
*
accessible
=
aEvent
-
>
GetAccessible
(
)
;
NS_ENSURE_TRUE_VOID
(
accessible
)
;
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eEvents
)
)
{
logging
:
:
MsgBegin
(
"
EVENTS
"
"
events
fired
"
)
;
nsAutoString
type
;
GetAccService
(
)
-
>
GetStringEventType
(
aEvent
-
>
GetEventType
(
)
type
)
;
logging
:
:
MsgEntry
(
"
type
:
%
s
"
NS_ConvertUTF16toUTF8
(
type
)
.
get
(
)
)
;
if
(
aEvent
-
>
GetEventType
(
)
=
=
nsIAccessibleEvent
:
:
EVENT_STATE_CHANGE
)
{
AccStateChangeEvent
*
event
=
downcast_accEvent
(
aEvent
)
;
RefPtr
<
dom
:
:
DOMStringList
>
stringStates
=
GetAccService
(
)
-
>
GetStringStates
(
event
-
>
GetState
(
)
)
;
nsAutoString
state
;
stringStates
-
>
Item
(
0
state
)
;
logging
:
:
MsgEntry
(
"
state
:
%
s
=
%
s
"
NS_ConvertUTF16toUTF8
(
state
)
.
get
(
)
event
-
>
IsStateEnabled
(
)
?
"
true
"
:
"
false
"
)
;
}
logging
:
:
AccessibleInfo
(
"
target
"
aEvent
-
>
GetAccessible
(
)
)
;
logging
:
:
MsgEnd
(
)
;
}
#
endif
accessible
-
>
HandleAccEvent
(
aEvent
)
;
aEvent
-
>
mEventRule
=
AccEvent
:
:
eDoNotEmit
;
}
void
nsEventShell
:
:
FireEvent
(
uint32_t
aEventType
LocalAccessible
*
aAccessible
EIsFromUserInput
aIsFromUserInput
)
{
NS_ENSURE_TRUE_VOID
(
aAccessible
)
;
RefPtr
<
AccEvent
>
event
=
new
AccEvent
(
aEventType
aAccessible
aIsFromUserInput
)
;
FireEvent
(
event
)
;
}
