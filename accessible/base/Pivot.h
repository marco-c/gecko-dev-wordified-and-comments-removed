#
ifndef
mozilla_a11y_Pivot_h_
#
define
mozilla_a11y_Pivot_h_
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
a11y
/
Role
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
DocAccessible
;
class
Accessible
;
class
PivotRule
{
public
:
virtual
uint16_t
Match
(
Accessible
*
aAcc
)
=
0
;
}
;
class
Pivot
final
{
public
:
explicit
Pivot
(
Accessible
*
aRoot
)
;
Pivot
(
)
=
delete
;
Pivot
(
const
Pivot
&
)
=
delete
;
Pivot
&
operator
=
(
const
Pivot
&
)
=
delete
;
~
Pivot
(
)
;
Accessible
*
Next
(
Accessible
*
aAnchor
PivotRule
&
aRule
bool
aIncludeStart
=
false
)
;
Accessible
*
Prev
(
Accessible
*
aAnchor
PivotRule
&
aRule
bool
aIncludeStart
=
false
)
;
Accessible
*
First
(
PivotRule
&
aRule
)
;
Accessible
*
Last
(
PivotRule
&
aRule
)
;
Accessible
*
AtPoint
(
int32_t
aX
int32_t
aY
PivotRule
&
aRule
)
;
private
:
Accessible
*
AdjustStartPosition
(
Accessible
*
aAnchor
PivotRule
&
aRule
uint16_t
*
aFilterResult
)
;
Accessible
*
SearchForward
(
Accessible
*
aAnchor
PivotRule
&
aRule
bool
aSearchCurrent
)
;
Accessible
*
SearchBackward
(
Accessible
*
aAnchor
PivotRule
&
aRule
bool
aSearchCurrent
)
;
Accessible
*
mRoot
;
}
;
class
PivotRoleRule
:
public
PivotRule
{
public
:
explicit
PivotRoleRule
(
role
aRole
)
;
explicit
PivotRoleRule
(
role
aRole
Accessible
*
aDirectDescendantsFrom
)
;
virtual
uint16_t
Match
(
Accessible
*
aAcc
)
override
;
protected
:
role
mRole
;
Accessible
*
mDirectDescendantsFrom
;
}
;
class
PivotStateRule
:
public
PivotRule
{
public
:
explicit
PivotStateRule
(
uint64_t
aState
)
;
virtual
uint16_t
Match
(
Accessible
*
aAcc
)
override
;
protected
:
uint64_t
mState
;
}
;
class
LocalAccInSameDocRule
:
public
PivotRule
{
public
:
virtual
uint16_t
Match
(
Accessible
*
aAcc
)
override
;
}
;
class
PivotRadioNameRule
:
public
PivotRule
{
public
:
explicit
PivotRadioNameRule
(
const
nsString
&
aName
)
;
virtual
uint16_t
Match
(
Accessible
*
aAcc
)
override
;
protected
:
const
nsString
&
mName
;
}
;
class
MustPruneSameDocRule
:
public
PivotRule
{
public
:
virtual
uint16_t
Match
(
Accessible
*
aAcc
)
override
;
}
;
}
}
#
endif
