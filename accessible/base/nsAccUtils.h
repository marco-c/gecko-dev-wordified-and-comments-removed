#
ifndef
nsAccUtils_h_
#
define
nsAccUtils_h_
#
include
"
mozilla
/
a11y
/
LocalAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
DocManager
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsPoint
.
h
"
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
Element
;
}
namespace
a11y
{
class
HyperTextAccessible
;
class
DocAccessible
;
class
Attribute
;
class
nsAccUtils
{
public
:
static
void
SetAccGroupAttrs
(
AccAttributes
*
aAttributes
int32_t
aLevel
int32_t
aSetSize
int32_t
aPosInSet
)
;
static
int32_t
GetLevelForXULContainerItem
(
nsIContent
*
aContent
)
;
static
void
SetLiveContainerAttributes
(
AccAttributes
*
aAttributes
nsIContent
*
aStartContent
)
;
static
bool
HasDefinedARIAToken
(
nsIContent
*
aContent
nsAtom
*
aAtom
)
;
static
nsStaticAtom
*
GetARIAToken
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsAtom
*
aAttr
)
;
static
nsStaticAtom
*
NormalizeARIAToken
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsAtom
*
aAttr
)
;
static
DocAccessible
*
GetDocAccessibleFor
(
nsINode
*
aNode
)
{
return
GetAccService
(
)
-
>
GetDocAccessible
(
nsCoreUtils
:
:
GetPresShellFor
(
aNode
)
)
;
}
static
DocAccessible
*
GetDocAccessibleFor
(
nsIDocShellTreeItem
*
aContainer
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
do_QueryInterface
(
aContainer
)
)
;
return
GetAccService
(
)
-
>
GetDocAccessible
(
docShell
-
>
GetPresShell
(
)
)
;
}
static
LocalAccessible
*
GetSelectableContainer
(
LocalAccessible
*
aAccessible
uint64_t
aState
)
;
static
HyperTextAccessible
*
GetTextContainer
(
nsINode
*
aNode
)
;
static
Accessible
*
TableFor
(
Accessible
*
aRow
)
;
static
LocalAccessible
*
TableFor
(
LocalAccessible
*
aRow
)
;
static
bool
IsDOMAttrTrue
(
const
LocalAccessible
*
aAccessible
nsAtom
*
aAttr
)
;
static
inline
bool
IsARIASelected
(
const
LocalAccessible
*
aAccessible
)
{
return
IsDOMAttrTrue
(
aAccessible
nsGkAtoms
:
:
aria_selected
)
;
}
static
inline
bool
IsARIAMultiSelectable
(
const
LocalAccessible
*
aAccessible
)
{
return
IsDOMAttrTrue
(
aAccessible
nsGkAtoms
:
:
aria_multiselectable
)
;
}
static
LayoutDeviceIntPoint
ConvertToScreenCoords
(
int32_t
aX
int32_t
aY
uint32_t
aCoordinateType
LocalAccessible
*
aAccessible
)
;
static
void
ConvertScreenCoordsTo
(
int32_t
*
aX
int32_t
*
aY
uint32_t
aCoordinateType
LocalAccessible
*
aAccessible
)
;
static
LayoutDeviceIntPoint
GetScreenCoordsForParent
(
LocalAccessible
*
aAccessible
)
;
static
bool
GetLiveAttrValue
(
uint32_t
aRule
nsAString
&
aValue
)
;
#
ifdef
DEBUG
static
bool
IsTextInterfaceSupportCorrect
(
LocalAccessible
*
aAccessible
)
;
#
endif
static
uint32_t
TextLength
(
Accessible
*
aAccessible
)
;
static
inline
uint64_t
To64State
(
uint32_t
aState1
uint32_t
aState2
)
{
return
static_cast
<
uint64_t
>
(
aState1
)
+
(
static_cast
<
uint64_t
>
(
aState2
)
<
<
31
)
;
}
static
inline
void
To32States
(
uint64_t
aState64
uint32_t
*
aState1
uint32_t
*
aState2
)
{
*
aState1
=
aState64
&
0x7fffffff
;
if
(
aState2
)
*
aState2
=
static_cast
<
uint32_t
>
(
aState64
>
>
31
)
;
}
static
uint32_t
To32States
(
uint64_t
aState
bool
*
aIsExtra
)
{
uint32_t
extraState
=
aState
>
>
31
;
*
aIsExtra
=
!
!
extraState
;
return
extraState
?
extraState
:
aState
;
}
static
bool
MustPrune
(
Accessible
*
aAccessible
)
;
static
bool
IsARIALive
(
const
LocalAccessible
*
aAccessible
)
;
static
Accessible
*
DocumentFor
(
Accessible
*
aAcc
)
;
static
Accessible
*
GetAccessibleByID
(
Accessible
*
aDoc
uint64_t
aID
)
;
}
;
}
}
#
endif
