#
ifndef
mozilla_a11y_AccIterator_h__
#
define
mozilla_a11y_AccIterator_h__
#
include
"
DocAccessible
.
h
"
#
include
"
Filters
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
memory
>
class
nsITreeView
;
namespace
mozilla
{
namespace
a11y
{
class
DocAccessibleParent
;
class
AccIterable
{
public
:
virtual
~
AccIterable
(
)
{
}
virtual
Accessible
*
Next
(
)
=
0
;
private
:
friend
class
Relation
;
std
:
:
unique_ptr
<
AccIterable
>
mNextIter
;
}
;
class
AccIterator
:
public
AccIterable
{
public
:
AccIterator
(
const
LocalAccessible
*
aRoot
filters
:
:
FilterFuncPtr
aFilterFunc
)
;
virtual
~
AccIterator
(
)
;
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
AccIterator
(
)
;
AccIterator
(
const
AccIterator
&
)
;
AccIterator
&
operator
=
(
const
AccIterator
&
)
;
struct
IteratorState
{
explicit
IteratorState
(
const
LocalAccessible
*
aParent
IteratorState
*
mParentState
=
nullptr
)
;
const
LocalAccessible
*
mParent
;
int32_t
mIndex
;
IteratorState
*
mParentState
;
}
;
filters
:
:
FilterFuncPtr
mFilterFunc
;
IteratorState
*
mState
;
}
;
class
RelatedAccIterator
:
public
AccIterable
{
public
:
RelatedAccIterator
(
DocAccessible
*
aDocument
nsIContent
*
aDependentContent
nsAtom
*
aRelAttr
)
;
virtual
~
RelatedAccIterator
(
)
{
}
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
RelatedAccIterator
(
)
;
RelatedAccIterator
(
const
RelatedAccIterator
&
)
;
RelatedAccIterator
&
operator
=
(
const
RelatedAccIterator
&
)
;
DocAccessible
*
mDocument
;
nsAtom
*
mRelAttr
;
DocAccessible
:
:
AttrRelProviders
*
mProviders
;
uint32_t
mIndex
;
}
;
class
HTMLLabelIterator
:
public
AccIterable
{
public
:
enum
LabelFilter
{
eAllLabels
eSkipAncestorLabel
}
;
HTMLLabelIterator
(
DocAccessible
*
aDocument
const
LocalAccessible
*
aAccessible
LabelFilter
aFilter
=
eAllLabels
)
;
virtual
~
HTMLLabelIterator
(
)
{
}
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
HTMLLabelIterator
(
)
;
HTMLLabelIterator
(
const
HTMLLabelIterator
&
)
;
HTMLLabelIterator
&
operator
=
(
const
HTMLLabelIterator
&
)
;
bool
IsLabel
(
LocalAccessible
*
aLabel
)
;
RelatedAccIterator
mRelIter
;
const
LocalAccessible
*
mAcc
;
LabelFilter
mLabelFilter
;
}
;
class
HTMLOutputIterator
:
public
AccIterable
{
public
:
HTMLOutputIterator
(
DocAccessible
*
aDocument
nsIContent
*
aElement
)
;
virtual
~
HTMLOutputIterator
(
)
{
}
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
HTMLOutputIterator
(
)
;
HTMLOutputIterator
(
const
HTMLOutputIterator
&
)
;
HTMLOutputIterator
&
operator
=
(
const
HTMLOutputIterator
&
)
;
RelatedAccIterator
mRelIter
;
}
;
class
XULLabelIterator
:
public
AccIterable
{
public
:
XULLabelIterator
(
DocAccessible
*
aDocument
nsIContent
*
aElement
)
;
virtual
~
XULLabelIterator
(
)
{
}
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
XULLabelIterator
(
)
;
XULLabelIterator
(
const
XULLabelIterator
&
)
;
XULLabelIterator
&
operator
=
(
const
XULLabelIterator
&
)
;
RelatedAccIterator
mRelIter
;
}
;
class
XULDescriptionIterator
:
public
AccIterable
{
public
:
XULDescriptionIterator
(
DocAccessible
*
aDocument
nsIContent
*
aElement
)
;
virtual
~
XULDescriptionIterator
(
)
{
}
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
XULDescriptionIterator
(
)
;
XULDescriptionIterator
(
const
XULDescriptionIterator
&
)
;
XULDescriptionIterator
&
operator
=
(
const
XULDescriptionIterator
&
)
;
RelatedAccIterator
mRelIter
;
}
;
class
IDRefsIterator
:
public
AccIterable
{
public
:
IDRefsIterator
(
DocAccessible
*
aDoc
nsIContent
*
aContent
nsAtom
*
aIDRefsAttr
)
;
virtual
~
IDRefsIterator
(
)
{
}
const
nsDependentSubstring
NextID
(
)
;
nsIContent
*
NextElem
(
)
;
static
dom
:
:
Element
*
GetElem
(
nsIContent
*
aContent
const
nsAString
&
aID
)
;
dom
:
:
Element
*
GetElem
(
const
nsDependentSubstring
&
aID
)
;
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
IDRefsIterator
(
)
;
IDRefsIterator
(
const
IDRefsIterator
&
)
;
IDRefsIterator
operator
=
(
const
IDRefsIterator
&
)
;
nsString
mIDs
;
nsIContent
*
mContent
;
DocAccessible
*
mDoc
;
nsAString
:
:
index_type
mCurrIdx
;
}
;
class
SingleAccIterator
:
public
AccIterable
{
public
:
explicit
SingleAccIterator
(
Accessible
*
aTarget
)
:
mAcc
(
aTarget
)
{
}
virtual
~
SingleAccIterator
(
)
{
}
virtual
Accessible
*
Next
(
)
override
;
private
:
SingleAccIterator
(
)
;
SingleAccIterator
(
const
SingleAccIterator
&
)
;
SingleAccIterator
&
operator
=
(
const
SingleAccIterator
&
)
;
Accessible
*
mAcc
;
}
;
class
ItemIterator
:
public
AccIterable
{
public
:
explicit
ItemIterator
(
const
LocalAccessible
*
aItemContainer
)
:
mContainer
(
aItemContainer
)
mAnchor
(
nullptr
)
{
}
virtual
~
ItemIterator
(
)
{
}
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
ItemIterator
(
)
=
delete
;
ItemIterator
(
const
ItemIterator
&
)
=
delete
;
ItemIterator
&
operator
=
(
const
ItemIterator
&
)
=
delete
;
const
LocalAccessible
*
mContainer
;
LocalAccessible
*
mAnchor
;
}
;
class
XULTreeItemIterator
:
public
AccIterable
{
public
:
XULTreeItemIterator
(
const
XULTreeAccessible
*
aXULTree
nsITreeView
*
aTreeView
int32_t
aRowIdx
)
;
virtual
~
XULTreeItemIterator
(
)
{
}
virtual
LocalAccessible
*
Next
(
)
override
;
private
:
XULTreeItemIterator
(
)
=
delete
;
XULTreeItemIterator
(
const
XULTreeItemIterator
&
)
=
delete
;
XULTreeItemIterator
&
operator
=
(
const
XULTreeItemIterator
&
)
=
delete
;
const
XULTreeAccessible
*
mXULTree
;
nsITreeView
*
mTreeView
;
int32_t
mRowCount
;
int32_t
mContainerLevel
;
int32_t
mCurrRowIdx
;
}
;
class
RemoteAccIterator
:
public
AccIterable
{
public
:
RemoteAccIterator
(
const
nsTArray
<
uint64_t
>
&
aIds
DocAccessibleParent
*
aDoc
)
:
mIds
(
aIds
)
mDoc
(
aDoc
)
mIndex
(
0
)
{
}
RemoteAccIterator
(
nsTArray
<
uint64_t
>
&
&
aIds
DocAccessibleParent
*
aDoc
)
;
virtual
~
RemoteAccIterator
(
)
=
default
;
virtual
Accessible
*
Next
(
)
override
;
private
:
nsTArray
<
uint64_t
>
mOwnedIds
;
const
nsTArray
<
uint64_t
>
&
mIds
;
DocAccessibleParent
*
mDoc
;
uint32_t
mIndex
;
}
;
}
}
#
endif
