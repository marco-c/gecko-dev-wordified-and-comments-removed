#
include
"
TextLeafRange
.
h
"
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
a11y
{
TextLeafPoint
:
:
TextLeafPoint
(
Accessible
*
aAcc
int32_t
aOffset
)
{
if
(
aAcc
-
>
HasChildren
(
)
)
{
for
(
Accessible
*
acc
=
aAcc
-
>
FirstChild
(
)
;
acc
;
acc
=
acc
-
>
FirstChild
(
)
)
{
mAcc
=
acc
;
}
mOffset
=
0
;
return
;
}
mAcc
=
aAcc
;
mOffset
=
aOffset
;
}
bool
TextLeafPoint
:
:
operator
<
(
const
TextLeafPoint
&
aPoint
)
const
{
if
(
mAcc
=
=
aPoint
.
mAcc
)
{
return
mOffset
<
aPoint
.
mOffset
;
}
Accessible
*
thisP
=
mAcc
;
Accessible
*
otherP
=
aPoint
.
mAcc
;
AutoTArray
<
Accessible
*
30
>
thisParents
otherParents
;
do
{
thisParents
.
AppendElement
(
thisP
)
;
thisP
=
thisP
-
>
Parent
(
)
;
}
while
(
thisP
)
;
do
{
otherParents
.
AppendElement
(
otherP
)
;
otherP
=
otherP
-
>
Parent
(
)
;
}
while
(
otherP
)
;
uint32_t
thisPos
=
thisParents
.
Length
(
)
otherPos
=
otherParents
.
Length
(
)
;
for
(
uint32_t
len
=
std
:
:
min
(
thisPos
otherPos
)
;
len
>
0
;
-
-
len
)
{
Accessible
*
thisChild
=
thisParents
.
ElementAt
(
-
-
thisPos
)
;
Accessible
*
otherChild
=
otherParents
.
ElementAt
(
-
-
otherPos
)
;
if
(
thisChild
!
=
otherChild
)
{
return
thisChild
-
>
IndexInParent
(
)
<
otherChild
-
>
IndexInParent
(
)
;
}
}
MOZ_ASSERT
(
thisPos
!
=
0
|
|
otherPos
!
=
0
)
;
MOZ_ASSERT
(
thisPos
!
=
otherPos
)
;
return
otherPos
>
0
;
}
}
