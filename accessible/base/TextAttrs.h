#
ifndef
nsTextAttrs_h_
#
define
nsTextAttrs_h_
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStyleConsts
.
h
"
class
nsIFrame
;
class
nsIContent
;
class
nsDeviceContext
;
namespace
mozilla
{
namespace
a11y
{
class
AccAttributes
;
class
LocalAccessible
;
class
HyperTextAccessible
;
class
TextAttrsMgr
{
public
:
explicit
TextAttrsMgr
(
HyperTextAccessible
*
aHyperTextAcc
)
:
mOffsetAcc
(
nullptr
)
mHyperTextAcc
(
aHyperTextAcc
)
mIncludeDefAttrs
(
true
)
{
}
TextAttrsMgr
(
HyperTextAccessible
*
aHyperTextAcc
bool
aIncludeDefAttrs
LocalAccessible
*
aOffsetAcc
)
:
mOffsetAcc
(
aOffsetAcc
)
mHyperTextAcc
(
aHyperTextAcc
)
mIncludeDefAttrs
(
aIncludeDefAttrs
)
{
}
void
GetAttributes
(
AccAttributes
*
aAttributes
)
;
private
:
LocalAccessible
*
mOffsetAcc
;
HyperTextAccessible
*
mHyperTextAcc
;
bool
mIncludeDefAttrs
;
protected
:
class
TextAttr
{
public
:
virtual
void
Expose
(
AccAttributes
*
aAttributes
bool
aIncludeDefAttrValue
)
=
0
;
}
;
template
<
class
T
>
class
TTextAttr
:
public
TextAttr
{
public
:
explicit
TTextAttr
(
bool
aGetRootValue
)
:
mGetRootValue
(
aGetRootValue
)
{
}
virtual
void
Expose
(
AccAttributes
*
aAttributes
bool
aIncludeDefAttrValue
)
override
{
if
(
mGetRootValue
)
{
if
(
mIsRootDefined
)
ExposeValue
(
aAttributes
mRootNativeValue
)
;
return
;
}
if
(
mIsDefined
)
{
if
(
aIncludeDefAttrValue
|
|
mRootNativeValue
!
=
mNativeValue
)
{
ExposeValue
(
aAttributes
mNativeValue
)
;
}
return
;
}
if
(
aIncludeDefAttrValue
&
&
mIsRootDefined
)
{
ExposeValue
(
aAttributes
mRootNativeValue
)
;
}
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
T
&
aValue
)
=
0
;
bool
mGetRootValue
;
MOZ_INIT_OUTSIDE_CTOR
T
mNativeValue
;
MOZ_INIT_OUTSIDE_CTOR
bool
mIsDefined
;
MOZ_INIT_OUTSIDE_CTOR
T
mRootNativeValue
;
MOZ_INIT_OUTSIDE_CTOR
bool
mIsRootDefined
;
}
;
class
LangTextAttr
:
public
TTextAttr
<
nsString
>
{
public
:
LangTextAttr
(
HyperTextAccessible
*
aRoot
nsIContent
*
aRootElm
nsIContent
*
aElm
)
;
virtual
~
LangTextAttr
(
)
;
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
nsString
&
aValue
)
override
;
private
:
nsCOMPtr
<
nsIContent
>
mRootContent
;
}
;
class
InvalidTextAttr
:
public
TTextAttr
<
uint32_t
>
{
public
:
InvalidTextAttr
(
nsIContent
*
aRootElm
nsIContent
*
aElm
)
;
virtual
~
InvalidTextAttr
(
)
{
}
;
protected
:
enum
{
eFalse
eGrammar
eSpelling
eTrue
}
;
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
uint32_t
&
aValue
)
override
;
private
:
bool
GetValue
(
nsIContent
*
aElm
uint32_t
*
aValue
)
;
nsIContent
*
mRootElm
;
}
;
class
BGColorTextAttr
:
public
TTextAttr
<
nscolor
>
{
public
:
BGColorTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
)
;
virtual
~
BGColorTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
nscolor
&
aValue
)
override
;
private
:
bool
GetColor
(
nsIFrame
*
aFrame
nscolor
*
aColor
)
;
nsIFrame
*
mRootFrame
;
}
;
class
ColorTextAttr
:
public
TTextAttr
<
nscolor
>
{
public
:
ColorTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
)
;
virtual
~
ColorTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
nscolor
&
aValue
)
override
;
}
;
class
FontFamilyTextAttr
:
public
TTextAttr
<
nsString
>
{
public
:
FontFamilyTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
)
;
virtual
~
FontFamilyTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
nsString
&
aValue
)
override
;
private
:
bool
GetFontFamily
(
nsIFrame
*
aFrame
nsString
&
aFamily
)
;
}
;
class
FontSizeTextAttr
:
public
TTextAttr
<
nscoord
>
{
public
:
FontSizeTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
)
;
virtual
~
FontSizeTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
nscoord
&
aValue
)
override
;
private
:
nsDeviceContext
*
mDC
;
}
;
class
FontStyleTextAttr
:
public
TTextAttr
<
mozilla
:
:
FontSlantStyle
>
{
public
:
FontStyleTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
)
;
virtual
~
FontStyleTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
mozilla
:
:
FontSlantStyle
&
aValue
)
override
;
}
;
class
FontWeightTextAttr
:
public
TTextAttr
<
mozilla
:
:
FontWeight
>
{
public
:
FontWeightTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
)
;
virtual
~
FontWeightTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
mozilla
:
:
FontWeight
&
aValue
)
override
;
private
:
mozilla
:
:
FontWeight
GetFontWeight
(
nsIFrame
*
aFrame
)
;
}
;
class
AutoGeneratedTextAttr
:
public
TTextAttr
<
bool
>
{
public
:
AutoGeneratedTextAttr
(
HyperTextAccessible
*
aHyperTextAcc
LocalAccessible
*
aAccessible
)
;
virtual
~
AutoGeneratedTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
bool
&
aValue
)
override
;
}
;
class
TextDecorValue
{
public
:
TextDecorValue
(
)
:
mColor
{
0
}
mLine
{
StyleTextDecorationLine
:
:
NONE
}
mStyle
{
StyleTextDecorationStyle
:
:
None
}
{
}
explicit
TextDecorValue
(
nsIFrame
*
aFrame
)
;
nscolor
Color
(
)
const
{
return
mColor
;
}
mozilla
:
:
StyleTextDecorationStyle
Style
(
)
const
{
return
mStyle
;
}
bool
IsDefined
(
)
const
{
return
IsUnderline
(
)
|
|
IsLineThrough
(
)
;
}
bool
IsUnderline
(
)
const
{
return
bool
(
mLine
&
mozilla
:
:
StyleTextDecorationLine
:
:
UNDERLINE
)
;
}
bool
IsLineThrough
(
)
const
{
return
bool
(
mLine
&
mozilla
:
:
StyleTextDecorationLine
:
:
LINE_THROUGH
)
;
}
bool
operator
=
=
(
const
TextDecorValue
&
aValue
)
const
{
return
mColor
=
=
aValue
.
mColor
&
&
mLine
=
=
aValue
.
mLine
&
&
mStyle
=
=
aValue
.
mStyle
;
}
bool
operator
!
=
(
const
TextDecorValue
&
aValue
)
const
{
return
!
(
*
this
=
=
aValue
)
;
}
private
:
nscolor
mColor
;
mozilla
:
:
StyleTextDecorationLine
mLine
;
mozilla
:
:
StyleTextDecorationStyle
mStyle
;
}
;
class
TextDecorTextAttr
:
public
TTextAttr
<
TextDecorValue
>
{
public
:
TextDecorTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
)
;
virtual
~
TextDecorTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
TextDecorValue
&
aValue
)
override
;
}
;
enum
TextPosValue
{
eTextPosBaseline
eTextPosSub
eTextPosSuper
}
;
class
TextPosTextAttr
:
public
TTextAttr
<
Maybe
<
TextPosValue
>
>
{
public
:
TextPosTextAttr
(
nsIFrame
*
aRootFrame
nsIFrame
*
aFrame
nsIContent
*
aRootElm
nsIContent
*
aElm
)
;
virtual
~
TextPosTextAttr
(
)
{
}
protected
:
virtual
void
ExposeValue
(
AccAttributes
*
aAttributes
const
Maybe
<
TextPosValue
>
&
aValue
)
override
;
private
:
Maybe
<
TextPosValue
>
GetAriaTextPosValue
(
nsIContent
*
aElm
)
const
;
Maybe
<
TextPosValue
>
GetAriaTextPosValue
(
nsIContent
*
aElm
nsIFrame
*
&
ariaFrame
)
const
;
Maybe
<
TextPosValue
>
GetLayoutTextPosValue
(
nsIFrame
*
aFrame
)
const
;
nsIContent
*
mRootElm
;
}
;
}
;
}
}
#
endif
