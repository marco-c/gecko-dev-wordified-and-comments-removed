#
include
"
AccGroupInfo
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
TableAccessible
.
h
"
#
include
"
Role
.
h
"
#
include
"
States
.
h
"
using
namespace
mozilla
:
:
a11y
;
AccGroupInfo
:
:
AccGroupInfo
(
const
Accessible
*
aItem
role
aRole
)
:
mPosInSet
(
0
)
mSetSize
(
0
)
mParent
(
nullptr
)
mItem
(
aItem
)
mRole
(
aRole
)
{
MOZ_COUNT_CTOR
(
AccGroupInfo
)
;
Update
(
)
;
}
void
AccGroupInfo
:
:
Update
(
)
{
mParent
=
nullptr
;
Accessible
*
parent
=
mItem
-
>
LocalParent
(
)
;
if
(
!
parent
)
return
;
int32_t
indexInParent
=
mItem
-
>
IndexInParent
(
)
;
uint32_t
siblingCount
=
parent
-
>
ChildCount
(
)
;
if
(
indexInParent
=
=
-
1
|
|
indexInParent
>
=
static_cast
<
int32_t
>
(
siblingCount
)
)
{
NS_ERROR
(
"
Wrong
index
in
parent
!
Tree
invalidation
problem
.
"
)
;
return
;
}
int32_t
level
=
nsAccUtils
:
:
GetARIAOrDefaultLevel
(
mItem
)
;
mPosInSet
=
1
;
for
(
int32_t
idx
=
indexInParent
-
1
;
idx
>
=
0
;
idx
-
-
)
{
Accessible
*
sibling
=
parent
-
>
LocalChildAt
(
idx
)
;
roles
:
:
Role
siblingRole
=
sibling
-
>
Role
(
)
;
if
(
siblingRole
=
=
roles
:
:
SEPARATOR
)
break
;
if
(
BaseRole
(
siblingRole
)
!
=
mRole
)
{
continue
;
}
bool
siblingHasGroupInfo
=
sibling
-
>
mBits
.
groupInfo
&
&
!
sibling
-
>
HasDirtyGroupInfo
(
)
;
if
(
!
siblingHasGroupInfo
&
&
sibling
-
>
State
(
)
&
states
:
:
INVISIBLE
)
{
continue
;
}
int32_t
siblingLevel
=
nsAccUtils
:
:
GetARIAOrDefaultLevel
(
sibling
)
;
if
(
siblingLevel
<
level
)
{
mParent
=
sibling
;
break
;
}
if
(
siblingLevel
>
level
)
continue
;
if
(
siblingHasGroupInfo
)
{
mPosInSet
+
=
sibling
-
>
mBits
.
groupInfo
-
>
mPosInSet
;
mParent
=
sibling
-
>
mBits
.
groupInfo
-
>
mParent
;
mSetSize
=
sibling
-
>
mBits
.
groupInfo
-
>
mSetSize
;
return
;
}
mPosInSet
+
+
;
}
mSetSize
=
mPosInSet
;
for
(
uint32_t
idx
=
indexInParent
+
1
;
idx
<
siblingCount
;
idx
+
+
)
{
Accessible
*
sibling
=
parent
-
>
LocalChildAt
(
idx
)
;
roles
:
:
Role
siblingRole
=
sibling
-
>
Role
(
)
;
if
(
siblingRole
=
=
roles
:
:
SEPARATOR
)
break
;
if
(
BaseRole
(
siblingRole
)
!
=
mRole
)
{
continue
;
}
bool
siblingHasGroupInfo
=
sibling
-
>
mBits
.
groupInfo
&
&
!
sibling
-
>
HasDirtyGroupInfo
(
)
;
if
(
!
siblingHasGroupInfo
&
&
sibling
-
>
State
(
)
&
states
:
:
INVISIBLE
)
{
continue
;
}
int32_t
siblingLevel
=
nsAccUtils
:
:
GetARIAOrDefaultLevel
(
sibling
)
;
if
(
siblingLevel
<
level
)
break
;
if
(
siblingLevel
>
level
)
continue
;
if
(
siblingHasGroupInfo
)
{
mParent
=
sibling
-
>
mBits
.
groupInfo
-
>
mParent
;
mSetSize
=
sibling
-
>
mBits
.
groupInfo
-
>
mSetSize
;
return
;
}
mSetSize
+
+
;
}
if
(
mParent
)
return
;
roles
:
:
Role
parentRole
=
parent
-
>
Role
(
)
;
if
(
ShouldReportRelations
(
mRole
parentRole
)
)
mParent
=
parent
;
if
(
parentRole
!
=
roles
:
:
GROUPING
)
return
;
if
(
mRole
=
=
roles
:
:
OUTLINEITEM
)
{
Accessible
*
parentPrevSibling
=
parent
-
>
LocalPrevSibling
(
)
;
if
(
parentPrevSibling
&
&
parentPrevSibling
-
>
Role
(
)
=
=
mRole
)
{
mParent
=
parentPrevSibling
;
return
;
}
}
if
(
mRole
=
=
roles
:
:
LISTITEM
|
|
mRole
=
=
roles
:
:
OUTLINEITEM
)
{
Accessible
*
grandParent
=
parent
-
>
LocalParent
(
)
;
if
(
grandParent
&
&
grandParent
-
>
Role
(
)
=
=
mRole
)
mParent
=
grandParent
;
}
}
Accessible
*
AccGroupInfo
:
:
FirstItemOf
(
const
Accessible
*
aContainer
)
{
a11y
:
:
role
containerRole
=
aContainer
-
>
Role
(
)
;
Accessible
*
item
=
aContainer
-
>
LocalNextSibling
(
)
;
if
(
item
)
{
if
(
containerRole
=
=
roles
:
:
OUTLINEITEM
&
&
item
-
>
Role
(
)
=
=
roles
:
:
GROUPING
)
item
=
item
-
>
LocalFirstChild
(
)
;
if
(
item
)
{
AccGroupInfo
*
itemGroupInfo
=
item
-
>
GetGroupInfo
(
)
;
if
(
itemGroupInfo
&
&
itemGroupInfo
-
>
ConceptualParent
(
)
=
=
aContainer
)
return
item
;
}
}
item
=
aContainer
-
>
LocalLastChild
(
)
;
if
(
!
item
)
return
nullptr
;
if
(
item
-
>
Role
(
)
=
=
roles
:
:
GROUPING
&
&
(
containerRole
=
=
roles
:
:
LISTITEM
|
|
containerRole
=
=
roles
:
:
OUTLINEITEM
)
)
{
item
=
item
-
>
LocalFirstChild
(
)
;
if
(
item
)
{
AccGroupInfo
*
itemGroupInfo
=
item
-
>
GetGroupInfo
(
)
;
if
(
itemGroupInfo
&
&
itemGroupInfo
-
>
ConceptualParent
(
)
=
=
aContainer
)
return
item
;
}
}
item
=
aContainer
-
>
LocalFirstChild
(
)
;
if
(
ShouldReportRelations
(
item
-
>
Role
(
)
containerRole
)
)
return
item
;
return
nullptr
;
}
uint32_t
AccGroupInfo
:
:
TotalItemCount
(
Accessible
*
aContainer
bool
*
aIsHierarchical
)
{
uint32_t
itemCount
=
0
;
switch
(
aContainer
-
>
Role
(
)
)
{
case
roles
:
:
TABLE
:
if
(
nsCoreUtils
:
:
GetUIntAttr
(
aContainer
-
>
GetContent
(
)
nsGkAtoms
:
:
aria_rowcount
(
int32_t
*
)
&
itemCount
)
)
{
break
;
}
if
(
TableAccessible
*
tableAcc
=
aContainer
-
>
AsTable
(
)
)
{
return
tableAcc
-
>
RowCount
(
)
;
}
break
;
case
roles
:
:
ROW
:
if
(
Accessible
*
table
=
nsAccUtils
:
:
TableFor
(
aContainer
)
)
{
if
(
nsCoreUtils
:
:
GetUIntAttr
(
table
-
>
GetContent
(
)
nsGkAtoms
:
:
aria_colcount
(
int32_t
*
)
&
itemCount
)
)
{
break
;
}
if
(
TableAccessible
*
tableAcc
=
table
-
>
AsTable
(
)
)
{
return
tableAcc
-
>
ColCount
(
)
;
}
}
break
;
case
roles
:
:
OUTLINE
:
case
roles
:
:
LIST
:
case
roles
:
:
MENUBAR
:
case
roles
:
:
MENUPOPUP
:
case
roles
:
:
COMBOBOX
:
case
roles
:
:
GROUPING
:
case
roles
:
:
TREE_TABLE
:
case
roles
:
:
COMBOBOX_LIST
:
case
roles
:
:
LISTBOX
:
case
roles
:
:
DEFINITION_LIST
:
case
roles
:
:
EDITCOMBOBOX
:
case
roles
:
:
RADIO_GROUP
:
case
roles
:
:
PAGETABLIST
:
{
Accessible
*
childItem
=
AccGroupInfo
:
:
FirstItemOf
(
aContainer
)
;
if
(
!
childItem
)
{
childItem
=
aContainer
-
>
LocalFirstChild
(
)
;
if
(
childItem
&
&
childItem
-
>
IsTextLeaf
(
)
)
{
childItem
=
childItem
-
>
LocalNextSibling
(
)
;
}
}
if
(
childItem
)
{
GroupPos
groupPos
=
childItem
-
>
GroupPosition
(
)
;
itemCount
=
groupPos
.
setSize
;
if
(
groupPos
.
level
&
&
aIsHierarchical
)
{
*
aIsHierarchical
=
true
;
}
}
break
;
}
default
:
break
;
}
return
itemCount
;
}
Accessible
*
AccGroupInfo
:
:
NextItemTo
(
Accessible
*
aItem
)
{
AccGroupInfo
*
groupInfo
=
aItem
-
>
GetGroupInfo
(
)
;
if
(
!
groupInfo
)
return
nullptr
;
if
(
groupInfo
-
>
PosInSet
(
)
>
=
groupInfo
-
>
SetSize
(
)
)
return
nullptr
;
Accessible
*
parent
=
aItem
-
>
LocalParent
(
)
;
uint32_t
childCount
=
parent
-
>
ChildCount
(
)
;
for
(
uint32_t
idx
=
aItem
-
>
IndexInParent
(
)
+
1
;
idx
<
childCount
;
idx
+
+
)
{
Accessible
*
nextItem
=
parent
-
>
LocalChildAt
(
idx
)
;
AccGroupInfo
*
nextGroupInfo
=
nextItem
-
>
GetGroupInfo
(
)
;
if
(
nextGroupInfo
&
&
nextGroupInfo
-
>
ConceptualParent
(
)
=
=
groupInfo
-
>
ConceptualParent
(
)
)
{
return
nextItem
;
}
}
MOZ_ASSERT_UNREACHABLE
(
"
Item
in
the
middle
of
the
group
but
there
'
s
no
next
item
!
"
)
;
return
nullptr
;
}
bool
AccGroupInfo
:
:
ShouldReportRelations
(
role
aRole
role
aParentRole
)
{
if
(
aParentRole
=
=
roles
:
:
OUTLINE
&
&
aRole
=
=
roles
:
:
OUTLINEITEM
)
return
true
;
if
(
aParentRole
=
=
roles
:
:
TREE_TABLE
&
&
aRole
=
=
roles
:
:
ROW
)
return
true
;
if
(
aParentRole
=
=
roles
:
:
LIST
&
&
aRole
=
=
roles
:
:
LISTITEM
)
return
true
;
return
false
;
}
