#
include
"
CacheConstants
.
h
"
#
include
"
nsAccessibilityService
.
h
"
namespace
mozilla
:
:
a11y
{
static
uint64_t
GetCacheDomainSuperset
(
uint64_t
aCacheDomains
)
{
uint64_t
allNecessaryDomains
=
aCacheDomains
;
if
(
aCacheDomains
&
CacheDomain
:
:
TextOffsetAttributes
)
{
allNecessaryDomains
|
=
CacheDomain
:
:
Text
;
}
if
(
aCacheDomains
&
CacheDomain
:
:
TextBounds
)
{
allNecessaryDomains
|
=
CacheDomain
:
:
Text
;
allNecessaryDomains
|
=
CacheDomain
:
:
Bounds
;
}
MOZ_ASSERT
(
(
allNecessaryDomains
&
aCacheDomains
)
=
=
aCacheDomains
"
Return
value
is
not
a
superset
of
the
input
.
"
)
;
return
allNecessaryDomains
;
}
bool
DomainsAreActive
(
uint64_t
aRequiredCacheDomains
)
{
const
uint64_t
activeCacheDomains
=
nsAccessibilityService
:
:
GetActiveCacheDomains
(
)
;
const
bool
allRequiredDomainsAreActive
=
(
aRequiredCacheDomains
&
~
activeCacheDomains
)
=
=
0
;
return
allRequiredDomainsAreActive
;
}
bool
RequestDomainsIfInactive
(
uint64_t
aRequiredCacheDomains
)
{
nsAccessibilityService
*
accService
=
GetAccService
(
)
;
if
(
!
accService
)
{
return
true
;
}
const
uint64_t
activeCacheDomains
=
nsAccessibilityService
:
:
GetActiveCacheDomains
(
)
;
const
bool
isMissingRequiredCacheDomain
=
(
aRequiredCacheDomains
&
~
activeCacheDomains
)
!
=
0
;
if
(
isMissingRequiredCacheDomain
)
{
aRequiredCacheDomains
=
GetCacheDomainSuperset
(
aRequiredCacheDomains
)
;
const
uint64_t
cacheDomains
=
aRequiredCacheDomains
|
activeCacheDomains
;
#
if
defined
(
ANDROID
)
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
a11y
:
:
SetCacheDomains
"
[
cacheDomains
]
(
)
{
if
(
nsAccessibilityService
*
accService
=
GetAccService
(
)
)
{
accService
-
>
SetCacheDomains
(
cacheDomains
)
;
}
}
)
)
;
return
true
;
#
endif
accService
-
>
SetCacheDomains
(
cacheDomains
)
;
return
true
;
}
return
false
;
}
}
