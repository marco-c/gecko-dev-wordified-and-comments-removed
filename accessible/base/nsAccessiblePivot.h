#
ifndef
_nsAccessiblePivot_H_
#
define
_nsAccessiblePivot_H_
#
include
"
nsIAccessiblePivot
.
h
"
#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
RuleCache
;
class
nsAccessiblePivot
final
:
public
nsIAccessiblePivot
{
public
:
typedef
mozilla
:
:
a11y
:
:
LocalAccessible
LocalAccessible
;
explicit
nsAccessiblePivot
(
LocalAccessible
*
aRoot
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
nsAccessiblePivot
nsIAccessiblePivot
)
NS_DECL_NSIACCESSIBLEPIVOT
LocalAccessible
*
Position
(
)
{
return
mPosition
;
}
int32_t
StartOffset
(
)
{
return
mStartOffset
;
}
int32_t
EndOffset
(
)
{
return
mEndOffset
;
}
private
:
~
nsAccessiblePivot
(
)
;
nsAccessiblePivot
(
)
=
delete
;
nsAccessiblePivot
(
const
nsAccessiblePivot
&
)
=
delete
;
void
operator
=
(
const
nsAccessiblePivot
&
)
=
delete
;
bool
NotifyOfPivotChange
(
LocalAccessible
*
aOldAccessible
int32_t
aOldStart
int32_t
aOldEnd
PivotMoveReason
aReason
TextBoundaryType
aBoundaryType
bool
aIsFromUserInput
)
;
bool
IsDescendantOf
(
LocalAccessible
*
aAccessible
LocalAccessible
*
aAncestor
)
;
LocalAccessible
*
SearchForward
(
LocalAccessible
*
aAccessible
nsIAccessibleTraversalRule
*
aRule
bool
aSearchCurrent
nsresult
*
aResult
)
;
LocalAccessible
*
SearchBackward
(
LocalAccessible
*
aAccessible
nsIAccessibleTraversalRule
*
aRule
bool
aSearchCurrent
nsresult
*
aResult
)
;
LocalAccessible
*
GetActiveRoot
(
)
const
{
if
(
mModalRoot
)
{
NS_ENSURE_FALSE
(
mModalRoot
-
>
IsDefunct
(
)
mRoot
)
;
return
mModalRoot
;
}
return
mRoot
;
}
bool
MovePivotInternal
(
LocalAccessible
*
aPosition
PivotMoveReason
aReason
bool
aIsFromUserInput
)
;
LocalAccessible
*
AdjustStartPosition
(
LocalAccessible
*
aAccessible
RuleCache
&
aCache
uint16_t
*
aFilterResult
nsresult
*
aResult
)
;
RefPtr
<
LocalAccessible
>
mRoot
;
RefPtr
<
LocalAccessible
>
mModalRoot
;
RefPtr
<
LocalAccessible
>
mPosition
;
int32_t
mStartOffset
;
int32_t
mEndOffset
;
nsTObserverArray
<
nsCOMPtr
<
nsIAccessiblePivotObserver
>
>
mObservers
;
}
;
#
endif
