#
include
"
ARIAMap
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
Role
.
h
"
#
include
"
States
.
h
"
#
include
"
nsAttrName
.
h
"
#
include
"
nsWhitespaceTokenizer
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsUnicharUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
using
namespace
mozilla
:
:
a11y
:
:
aria
;
static
const
uint32_t
kGenericAccType
=
0
;
static
const
nsRoleMapEntry
sWAIRoleMaps
[
]
=
{
{
nsGkAtoms
:
:
alert
roles
:
:
ALERT
kUseMapRole
eNoValue
eNoAction
#
if
defined
(
XP_MACOSX
)
eAssertiveLiveAttr
#
else
eNoLiveAttr
#
endif
eAlert
kNoReqStates
}
{
nsGkAtoms
:
:
alertdialog
roles
:
:
DIALOG
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
application
roles
:
:
APPLICATION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
article
roles
:
:
ARTICLE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eReadonlyUntilEditable
}
{
nsGkAtoms
:
:
banner
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
blockquote
roles
:
:
BLOCKQUOTE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
button
roles
:
:
PUSHBUTTON
kUseMapRole
eNoValue
ePressAction
eNoLiveAttr
eButton
kNoReqStates
}
{
nsGkAtoms
:
:
caption
roles
:
:
CAPTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
cell
roles
:
:
CELL
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eTableCell
kNoReqStates
}
{
nsGkAtoms
:
:
checkbox
roles
:
:
CHECKBUTTON
kUseMapRole
eNoValue
eCheckUncheckAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIACheckableMixed
eARIAReadonly
}
{
nsGkAtoms
:
:
code
roles
:
:
CODE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
columnheader
roles
:
:
COLUMNHEADER
kUseMapRole
eNoValue
eSortAction
eNoLiveAttr
eTableCell
kNoReqStates
eARIASelectableIfDefined
eARIAReadonly
}
{
nsGkAtoms
:
:
combobox
roles
:
:
EDITCOMBOBOX
kUseMapRole
eNoValue
eOpenCloseAction
eNoLiveAttr
eCombobox
states
:
:
COLLAPSED
|
states
:
:
HASPOPUP
eARIAAutoComplete
eARIAReadonly
eARIAOrientation
}
{
nsGkAtoms
:
:
comment
roles
:
:
COMMENT
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
complementary
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
contentinfo
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
deletion
roles
:
:
CONTENT_DELETION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
dialog
roles
:
:
DIALOG
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
directory
roles
:
:
LIST
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eList
states
:
:
READONLY
}
{
nsGkAtoms
:
:
docAbstract
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docAcknowledgments
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docAfterword
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docAppendix
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docBacklink
roles
:
:
LINK
kUseMapRole
eNoValue
eJumpAction
eNoLiveAttr
kGenericAccType
states
:
:
LINKED
}
{
nsGkAtoms
:
:
docBiblioentry
roles
:
:
LISTITEM
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
READONLY
}
{
nsGkAtoms
:
:
docBibliography
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docBiblioref
roles
:
:
LINK
kUseMapRole
eNoValue
eJumpAction
eNoLiveAttr
kGenericAccType
states
:
:
LINKED
}
{
nsGkAtoms
:
:
docChapter
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docColophon
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docConclusion
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docCover
roles
:
:
GRAPHIC
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docCredit
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docCredits
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docDedication
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docEndnote
roles
:
:
LISTITEM
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
READONLY
}
{
nsGkAtoms
:
:
docEndnotes
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docEpigraph
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docEpilogue
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docErrata
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docExample
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docFootnote
roles
:
:
FOOTNOTE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docForeword
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docGlossary
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docGlossref
roles
:
:
LINK
kUseMapRole
eNoValue
eJumpAction
eNoLiveAttr
kGenericAccType
states
:
:
LINKED
}
{
nsGkAtoms
:
:
docIndex
roles
:
:
NAVIGATION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docIntroduction
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docNoteref
roles
:
:
LINK
kUseMapRole
eNoValue
eJumpAction
eNoLiveAttr
kGenericAccType
states
:
:
LINKED
}
{
nsGkAtoms
:
:
docNotice
roles
:
:
NOTE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docPagebreak
roles
:
:
SEPARATOR
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docPagelist
roles
:
:
NAVIGATION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docPart
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docPreface
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docPrologue
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
docPullquote
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docQna
roles
:
:
SECTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docSubtitle
roles
:
:
HEADING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docTip
roles
:
:
NOTE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
docToc
roles
:
:
NAVIGATION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
document
roles
:
:
NON_NATIVE_DOCUMENT
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eReadonlyUntilEditable
}
{
nsGkAtoms
:
:
feed
roles
:
:
GROUPING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
figure
roles
:
:
FIGURE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
form
roles
:
:
FORM
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
graphicsDocument
roles
:
:
NON_NATIVE_DOCUMENT
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eReadonlyUntilEditable
}
{
nsGkAtoms
:
:
graphicsObject
roles
:
:
GROUPING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
graphicsSymbol
roles
:
:
GRAPHIC
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
grid
roles
:
:
TABLE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eSelect
|
eTable
kNoReqStates
eARIAMultiSelectable
eARIAReadonly
eFocusableUntilDisabled
}
{
nsGkAtoms
:
:
gridcell
roles
:
:
GRID_CELL
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eTableCell
kNoReqStates
eARIASelectable
eARIAReadonly
}
{
nsGkAtoms
:
:
group
roles
:
:
GROUPING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
heading
roles
:
:
HEADING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
img
roles
:
:
GRAPHIC
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
insertion
roles
:
:
CONTENT_INSERTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
key
roles
:
:
KEY
kUseMapRole
eNoValue
ePressAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIAPressed
}
{
nsGkAtoms
:
:
link
roles
:
:
LINK
kUseMapRole
eNoValue
eJumpAction
eNoLiveAttr
kGenericAccType
states
:
:
LINKED
}
{
nsGkAtoms
:
:
list_
roles
:
:
LIST
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eList
states
:
:
READONLY
}
{
nsGkAtoms
:
:
listbox
roles
:
:
LISTBOX
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eListControl
|
eSelect
states
:
:
VERTICAL
eARIAMultiSelectable
eARIAReadonly
eFocusableUntilDisabled
eARIAOrientation
}
{
nsGkAtoms
:
:
listitem
roles
:
:
LISTITEM
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
READONLY
}
{
nsGkAtoms
:
:
log_
roles
:
:
NOTHING
kUseNativeRole
eNoValue
eNoAction
ePoliteLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
main
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
mark
roles
:
:
MARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
marquee
roles
:
:
ANIMATION
kUseMapRole
eNoValue
eNoAction
eOffLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
math
roles
:
:
FLAT_EQUATION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
menu
roles
:
:
MENUPOPUP
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
VERTICAL
eARIAOrientation
}
{
nsGkAtoms
:
:
menubar
roles
:
:
MENUBAR
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
HORIZONTAL
eARIAOrientation
}
{
nsGkAtoms
:
:
menuitem
roles
:
:
MENUITEM
kUseMapRole
eNoValue
eClickAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
menuitemcheckbox
roles
:
:
CHECK_MENU_ITEM
kUseMapRole
eNoValue
eClickAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIACheckableMixed
eARIAReadonly
}
{
nsGkAtoms
:
:
menuitemradio
roles
:
:
RADIO_MENU_ITEM
kUseMapRole
eNoValue
eClickAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIACheckableBool
eARIAReadonly
}
{
nsGkAtoms
:
:
navigation
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
none
roles
:
:
NOTHING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
note_
roles
:
:
NOTE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
option
roles
:
:
OPTION
kUseMapRole
eNoValue
eSelectAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIASelectable
eARIACheckedMixed
}
{
nsGkAtoms
:
:
paragraph
roles
:
:
PARAGRAPH
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
presentation
roles
:
:
NOTHING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
progressbar
roles
:
:
PROGRESSBAR
kUseMapRole
eHasValueMinMax
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
READONLY
eIndeterminateIfNoValue
}
{
nsGkAtoms
:
:
radio
roles
:
:
RADIOBUTTON
kUseMapRole
eNoValue
eSelectAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIACheckableBool
}
{
nsGkAtoms
:
:
radiogroup
roles
:
:
RADIO_GROUP
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIAOrientation
eARIAReadonly
}
{
nsGkAtoms
:
:
region
roles
:
:
REGION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
row
roles
:
:
ROW
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eTableRow
kNoReqStates
eARIASelectable
}
{
nsGkAtoms
:
:
rowgroup
roles
:
:
GROUPING
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
rowheader
roles
:
:
ROWHEADER
kUseMapRole
eNoValue
eSortAction
eNoLiveAttr
eTableCell
kNoReqStates
eARIASelectableIfDefined
eARIAReadonly
}
{
nsGkAtoms
:
:
scrollbar
roles
:
:
SCROLLBAR
kUseMapRole
eHasValueMinMax
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
VERTICAL
eARIAOrientation
eARIAReadonly
}
{
nsGkAtoms
:
:
search
roles
:
:
LANDMARK
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eLandmark
kNoReqStates
}
{
nsGkAtoms
:
:
searchbox
roles
:
:
ENTRY
kUseMapRole
eNoValue
eActivateAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIAAutoComplete
eARIAMultiline
eARIAReadonlyOrEditable
}
{
nsGkAtoms
:
:
separator_
roles
:
:
SEPARATOR
kUseMapRole
eHasValueMinMaxIfFocusable
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
HORIZONTAL
eARIAOrientation
}
{
nsGkAtoms
:
:
slider
roles
:
:
SLIDER
kUseMapRole
eHasValueMinMax
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
HORIZONTAL
eARIAOrientation
eARIAReadonly
}
{
nsGkAtoms
:
:
spinbutton
roles
:
:
SPINBUTTON
kUseMapRole
eHasValueMinMax
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIAReadonly
}
{
nsGkAtoms
:
:
status
roles
:
:
STATUSBAR
kUseMapRole
eNoValue
eNoAction
ePoliteLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
suggestion
roles
:
:
SUGGESTION
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
}
{
nsGkAtoms
:
:
svgSwitch
roles
:
:
SWITCH
kUseMapRole
eNoValue
eCheckUncheckAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIACheckableBool
eARIAReadonly
}
{
nsGkAtoms
:
:
tab
roles
:
:
PAGETAB
kUseMapRole
eNoValue
eSwitchAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIASelectable
}
{
nsGkAtoms
:
:
table
roles
:
:
TABLE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eTable
kNoReqStates
eARIASelectable
}
{
nsGkAtoms
:
:
tablist
roles
:
:
PAGETABLIST
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eSelect
states
:
:
HORIZONTAL
eARIAOrientation
eARIAMultiSelectable
}
{
nsGkAtoms
:
:
tabpanel
roles
:
:
PROPERTYPAGE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
term
roles
:
:
TERM
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
READONLY
}
{
nsGkAtoms
:
:
textbox
roles
:
:
ENTRY
kUseMapRole
eNoValue
eActivateAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIAAutoComplete
eARIAMultiline
eARIAReadonlyOrEditable
}
{
nsGkAtoms
:
:
timer
roles
:
:
NOTHING
kUseNativeRole
eNoValue
eNoAction
eOffLiveAttr
kNoReqStates
}
{
nsGkAtoms
:
:
toolbar
roles
:
:
TOOLBAR
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
states
:
:
HORIZONTAL
eARIAOrientation
}
{
nsGkAtoms
:
:
tooltip
roles
:
:
TOOLTIP
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
{
nsGkAtoms
:
:
tree
roles
:
:
OUTLINE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eSelect
states
:
:
VERTICAL
eARIAReadonly
eARIAMultiSelectable
eFocusableUntilDisabled
eARIAOrientation
}
{
nsGkAtoms
:
:
treegrid
roles
:
:
TREE_TABLE
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
eSelect
|
eTable
kNoReqStates
eARIAReadonly
eARIAMultiSelectable
eFocusableUntilDisabled
eARIAOrientation
}
{
nsGkAtoms
:
:
treeitem
roles
:
:
OUTLINEITEM
kUseMapRole
eNoValue
eActivateAction
eNoLiveAttr
kGenericAccType
kNoReqStates
eARIASelectable
eARIACheckedMixed
}
}
;
static
const
nsRoleMapEntry
sLandmarkRoleMap
=
{
nsGkAtoms
:
:
_empty
roles
:
:
NOTHING
kUseNativeRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
;
nsRoleMapEntry
aria
:
:
gEmptyRoleMap
=
{
nsGkAtoms
:
:
_empty
roles
:
:
TEXT_CONTAINER
kUseMapRole
eNoValue
eNoAction
eNoLiveAttr
kGenericAccType
kNoReqStates
}
;
static
const
EStateRule
sWAIUnivStateMap
[
]
=
{
eARIABusy
eARIACurrent
eARIADisabled
eARIAExpanded
eARIAHasPopup
eARIAInvalid
eARIAModal
eARIARequired
eARIANone
}
;
struct
AttrCharacteristics
{
const
nsStaticAtom
*
const
attributeName
;
const
uint8_t
characteristics
;
}
;
static
const
AttrCharacteristics
gWAIUnivAttrMap
[
]
=
{
{
nsGkAtoms
:
:
aria_activedescendant
ATTR_BYPASSOBJ
}
{
nsGkAtoms
:
:
aria_atomic
ATTR_BYPASSOBJ_IF_FALSE
|
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_busy
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_checked
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_controls
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_current
ATTR_BYPASSOBJ_IF_FALSE
|
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_describedby
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_details
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_disabled
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_dropeffect
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_errormessage
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_expanded
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_flowto
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_grabbed
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_haspopup
ATTR_BYPASSOBJ_IF_FALSE
|
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_hidden
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_invalid
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_label
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_labelledby
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_level
ATTR_BYPASSOBJ
}
{
nsGkAtoms
:
:
aria_live
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_modal
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_multiline
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_multiselectable
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_owns
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_orientation
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_posinset
ATTR_BYPASSOBJ
}
{
nsGkAtoms
:
:
aria_pressed
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_readonly
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_relevant
ATTR_BYPASSOBJ
|
ATTR_GLOBAL
}
{
nsGkAtoms
:
:
aria_required
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_selected
ATTR_BYPASSOBJ
|
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_setsize
ATTR_BYPASSOBJ
}
{
nsGkAtoms
:
:
aria_sort
ATTR_VALTOKEN
}
{
nsGkAtoms
:
:
aria_valuenow
ATTR_BYPASSOBJ
}
{
nsGkAtoms
:
:
aria_valuemin
ATTR_BYPASSOBJ
}
{
nsGkAtoms
:
:
aria_valuemax
ATTR_BYPASSOBJ
}
{
nsGkAtoms
:
:
aria_valuetext
ATTR_BYPASSOBJ
}
}
;
const
nsRoleMapEntry
*
aria
:
:
GetRoleMap
(
dom
:
:
Element
*
aEl
)
{
return
GetRoleMapFromIndex
(
GetRoleMapIndex
(
aEl
)
)
;
}
uint8_t
aria
:
:
GetRoleMapIndex
(
dom
:
:
Element
*
aEl
)
{
nsAutoString
roles
;
if
(
!
aEl
|
|
!
aEl
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
role
roles
)
|
|
roles
.
IsEmpty
(
)
)
{
return
NO_ROLE_MAP_ENTRY_INDEX
;
}
nsWhitespaceTokenizer
tokenizer
(
roles
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
const
nsDependentSubstring
role
=
tokenizer
.
nextToken
(
)
;
size_t
idx
;
auto
comparator
=
[
&
role
]
(
const
nsRoleMapEntry
&
aEntry
)
{
return
Compare
(
role
aEntry
.
ARIARoleString
(
)
nsCaseInsensitiveStringComparator
)
;
}
;
if
(
BinarySearchIf
(
sWAIRoleMaps
0
ArrayLength
(
sWAIRoleMaps
)
comparator
&
idx
)
)
{
return
idx
;
}
}
return
LANDMARK_ROLE_MAP_ENTRY_INDEX
;
}
const
nsRoleMapEntry
*
aria
:
:
GetRoleMapFromIndex
(
uint8_t
aRoleMapIndex
)
{
switch
(
aRoleMapIndex
)
{
case
NO_ROLE_MAP_ENTRY_INDEX
:
return
nullptr
;
case
EMPTY_ROLE_MAP_ENTRY_INDEX
:
return
&
gEmptyRoleMap
;
case
LANDMARK_ROLE_MAP_ENTRY_INDEX
:
return
&
sLandmarkRoleMap
;
default
:
return
sWAIRoleMaps
+
aRoleMapIndex
;
}
}
uint8_t
aria
:
:
GetIndexFromRoleMap
(
const
nsRoleMapEntry
*
aRoleMapEntry
)
{
if
(
aRoleMapEntry
=
=
nullptr
)
{
return
NO_ROLE_MAP_ENTRY_INDEX
;
}
else
if
(
aRoleMapEntry
=
=
&
gEmptyRoleMap
)
{
return
EMPTY_ROLE_MAP_ENTRY_INDEX
;
}
else
if
(
aRoleMapEntry
=
=
&
sLandmarkRoleMap
)
{
return
LANDMARK_ROLE_MAP_ENTRY_INDEX
;
}
else
{
return
aRoleMapEntry
-
sWAIRoleMaps
;
}
}
uint64_t
aria
:
:
UniversalStatesFor
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
{
uint64_t
state
=
0
;
uint32_t
index
=
0
;
while
(
MapToState
(
sWAIUnivStateMap
[
index
]
aElement
&
state
)
)
index
+
+
;
return
state
;
}
uint8_t
aria
:
:
AttrCharacteristicsFor
(
nsAtom
*
aAtom
)
{
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
gWAIUnivAttrMap
)
;
i
+
+
)
{
if
(
gWAIUnivAttrMap
[
i
]
.
attributeName
=
=
aAtom
)
{
return
gWAIUnivAttrMap
[
i
]
.
characteristics
;
}
}
return
0
;
}
bool
aria
:
:
HasDefinedARIAHidden
(
nsIContent
*
aContent
)
{
return
aContent
&
&
aContent
-
>
IsElement
(
)
&
&
aContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
aria_hidden
nsGkAtoms
:
:
_true
eCaseMatters
)
;
}
AttrIterator
:
:
AttrIterator
(
nsIContent
*
aContent
)
:
mElement
(
dom
:
:
Element
:
:
FromNode
(
aContent
)
)
mAttrIdx
(
0
)
{
mAttrCount
=
mElement
?
mElement
-
>
GetAttrCount
(
)
:
0
;
}
bool
AttrIterator
:
:
Next
(
)
{
while
(
mAttrIdx
<
mAttrCount
)
{
const
nsAttrName
*
attr
=
mElement
-
>
GetAttrNameAt
(
mAttrIdx
)
;
mAttrIdx
+
+
;
if
(
attr
-
>
NamespaceEquals
(
kNameSpaceID_None
)
)
{
mAttrAtom
=
attr
-
>
Atom
(
)
;
nsDependentAtomString
attrStr
(
mAttrAtom
)
;
if
(
!
StringBeginsWith
(
attrStr
u
"
aria
-
"
_ns
)
)
continue
;
uint8_t
attrFlags
=
aria
:
:
AttrCharacteristicsFor
(
mAttrAtom
)
;
if
(
attrFlags
&
ATTR_BYPASSOBJ
)
{
continue
;
}
if
(
(
attrFlags
&
ATTR_VALTOKEN
)
&
&
!
nsAccUtils
:
:
HasDefinedARIAToken
(
mElement
mAttrAtom
)
)
{
continue
;
}
if
(
(
attrFlags
&
ATTR_BYPASSOBJ_IF_FALSE
)
&
&
mElement
-
>
AttrValueIs
(
kNameSpaceID_None
mAttrAtom
nsGkAtoms
:
:
_false
eCaseMatters
)
)
{
continue
;
}
return
true
;
}
}
mAttrAtom
=
nullptr
;
return
false
;
}
void
AttrIterator
:
:
AttrName
(
nsAString
&
aAttrName
)
const
{
nsDependentAtomString
attrStr
(
mAttrAtom
)
;
MOZ_ASSERT
(
StringBeginsWith
(
attrStr
u
"
aria
-
"
_ns
)
"
Stored
atom
is
an
aria
attribute
.
"
)
;
aAttrName
.
Assign
(
Substring
(
attrStr
5
)
)
;
}
nsAtom
*
AttrIterator
:
:
AttrName
(
)
const
{
return
mAttrAtom
;
}
void
AttrIterator
:
:
AttrValue
(
nsAString
&
aAttrValue
)
const
{
nsAutoString
value
;
if
(
mElement
-
>
GetAttr
(
kNameSpaceID_None
mAttrAtom
value
)
)
{
if
(
aria
:
:
AttrCharacteristicsFor
(
mAttrAtom
)
&
ATTR_VALTOKEN
)
{
nsAtom
*
normalizedValue
=
nsAccUtils
:
:
NormalizeARIAToken
(
mElement
mAttrAtom
)
;
if
(
normalizedValue
)
{
nsDependentAtomString
normalizedValueStr
(
normalizedValue
)
;
aAttrValue
.
Assign
(
normalizedValueStr
)
;
return
;
}
}
aAttrValue
.
Assign
(
value
)
;
}
}
