#
ifndef
mozilla_a11y_EventTree_h_
#
define
mozilla_a11y_EventTree_h_
#
include
"
AccEvent
.
h
"
#
include
"
LocalAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessible
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
NotificationController
;
class
TreeMutation
final
{
public
:
static
const
bool
kNoEvents
=
true
;
static
const
bool
kNoShutdown
=
true
;
explicit
TreeMutation
(
LocalAccessible
*
aParent
bool
aNoEvents
=
false
)
;
~
TreeMutation
(
)
;
void
AfterInsertion
(
LocalAccessible
*
aChild
)
;
void
BeforeRemoval
(
LocalAccessible
*
aChild
bool
aNoShutdown
=
false
)
;
void
Done
(
)
;
private
:
NotificationController
*
Controller
(
)
const
{
return
mParent
-
>
Document
(
)
-
>
Controller
(
)
;
}
static
EventTree
*
const
kNoEventTree
;
#
ifdef
A11Y_LOG
static
const
char
*
PrefixLog
(
void
*
aData
LocalAccessible
*
)
;
#
endif
LocalAccessible
*
mParent
;
uint32_t
mStartIdx
;
uint32_t
mStateFlagsCopy
;
bool
mQueueEvents
;
#
ifdef
DEBUG
bool
mIsDone
;
#
endif
}
;
class
EventTree
final
{
public
:
EventTree
(
)
:
mFirst
(
nullptr
)
mNext
(
nullptr
)
mContainer
(
nullptr
)
mFireReorder
(
false
)
{
}
explicit
EventTree
(
LocalAccessible
*
aContainer
bool
aFireReorder
)
:
mFirst
(
nullptr
)
mNext
(
nullptr
)
mContainer
(
aContainer
)
mFireReorder
(
aFireReorder
)
{
}
~
EventTree
(
)
{
Clear
(
)
;
}
void
Shown
(
LocalAccessible
*
aTarget
)
;
void
Hidden
(
LocalAccessible
*
bool
)
;
const
EventTree
*
Find
(
const
LocalAccessible
*
aContainer
)
const
;
void
Mutated
(
AccMutationEvent
*
aEv
)
;
#
ifdef
A11Y_LOG
void
Log
(
uint32_t
aLevel
=
UINT32_MAX
)
const
;
#
endif
private
:
void
Process
(
const
RefPtr
<
DocAccessible
>
&
aDeathGrip
)
;
EventTree
*
FindOrInsert
(
LocalAccessible
*
aContainer
)
;
void
Clear
(
)
;
UniquePtr
<
EventTree
>
mFirst
;
UniquePtr
<
EventTree
>
mNext
;
LocalAccessible
*
mContainer
;
nsTArray
<
RefPtr
<
AccMutationEvent
>
>
mDependentEvents
;
bool
mFireReorder
;
static
NotificationController
*
Controller
(
LocalAccessible
*
aAcc
)
{
return
aAcc
-
>
Document
(
)
-
>
Controller
(
)
;
}
friend
class
NotificationController
;
}
;
}
}
#
endif
