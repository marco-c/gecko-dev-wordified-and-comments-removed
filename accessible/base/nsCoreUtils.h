#
ifndef
nsCoreUtils_h_
#
define
nsCoreUtils_h_
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsIAccessibleEvent
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsTArray
.
h
"
class
nsRange
;
class
nsTreeColumn
;
class
nsIFrame
;
class
nsIDocShell
;
class
nsIWidget
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
XULTreeElement
;
}
}
class
nsCoreUtils
{
public
:
typedef
mozilla
:
:
PresShell
PresShell
;
typedef
mozilla
:
:
dom
:
:
Document
Document
;
static
bool
IsLabelWithControl
(
nsIContent
*
aContent
)
;
static
bool
HasClickListener
(
nsIContent
*
aContent
)
;
MOZ_CAN_RUN_SCRIPT
static
void
DispatchClickEvent
(
mozilla
:
:
dom
:
:
XULTreeElement
*
aTree
int32_t
aRowIndex
nsTreeColumn
*
aColumn
const
nsAString
&
aPseudoElt
=
EmptyString
(
)
)
;
MOZ_CAN_RUN_SCRIPT
static
void
DispatchMouseEvent
(
mozilla
:
:
EventMessage
aMessage
int32_t
aX
int32_t
aY
nsIContent
*
aContent
nsIFrame
*
aFrame
PresShell
*
aPresShell
nsIWidget
*
aRootWidget
)
;
MOZ_CAN_RUN_SCRIPT
static
void
DispatchTouchEvent
(
mozilla
:
:
EventMessage
aMessage
int32_t
aX
int32_t
aY
nsIContent
*
aContent
nsIFrame
*
aFrame
PresShell
*
aPresShell
nsIWidget
*
aRootWidget
)
;
static
uint32_t
GetAccessKeyFor
(
nsIContent
*
aContent
)
;
static
nsIContent
*
GetDOMElementFor
(
nsIContent
*
aContent
)
;
static
nsINode
*
GetDOMNodeFromDOMPoint
(
nsINode
*
aNode
uint32_t
aOffset
)
;
static
bool
IsAncestorOf
(
nsINode
*
aPossibleAncestorNode
nsINode
*
aPossibleDescendantNode
nsINode
*
aRootNode
=
nullptr
)
;
static
nsresult
ScrollSubstringTo
(
nsIFrame
*
aFrame
nsRange
*
aRange
uint32_t
aScrollType
)
;
static
nsresult
ScrollSubstringTo
(
nsIFrame
*
aFrame
nsRange
*
aRange
mozilla
:
:
ScrollAxis
aVertical
mozilla
:
:
ScrollAxis
aHorizontal
)
;
static
void
ScrollFrameToPoint
(
nsIFrame
*
aScrollableFrame
nsIFrame
*
aFrame
const
nsIntPoint
&
aPoint
)
;
static
void
ConvertScrollTypeToPercents
(
uint32_t
aScrollType
mozilla
:
:
ScrollAxis
*
aVertical
mozilla
:
:
ScrollAxis
*
aHorizontal
)
;
static
nsIntPoint
GetScreenCoordsForWindow
(
nsINode
*
aNode
)
;
static
already_AddRefed
<
nsIDocShell
>
GetDocShellFor
(
nsINode
*
aNode
)
;
static
bool
IsRootDocument
(
Document
*
aDocument
)
;
static
bool
IsContentDocument
(
Document
*
aDocument
)
;
static
bool
IsTabDocument
(
Document
*
aDocumentNode
)
;
static
bool
IsErrorPage
(
Document
*
aDocument
)
;
static
PresShell
*
GetPresShellFor
(
nsINode
*
aNode
)
{
return
aNode
-
>
OwnerDoc
(
)
-
>
GetPresShell
(
)
;
}
static
bool
GetID
(
nsIContent
*
aContent
nsAString
&
aID
)
;
static
bool
GetUIntAttr
(
nsIContent
*
aContent
nsAtom
*
aAttr
int32_t
*
aUInt
)
;
static
void
GetLanguageFor
(
nsIContent
*
aContent
nsIContent
*
aRootContent
nsAString
&
aLanguage
)
;
static
mozilla
:
:
dom
:
:
XULTreeElement
*
GetTree
(
nsIContent
*
aContent
)
;
static
already_AddRefed
<
nsTreeColumn
>
GetFirstSensibleColumn
(
mozilla
:
:
dom
:
:
XULTreeElement
*
aTree
)
;
static
uint32_t
GetSensibleColumnCount
(
mozilla
:
:
dom
:
:
XULTreeElement
*
aTree
)
;
static
already_AddRefed
<
nsTreeColumn
>
GetSensibleColumnAt
(
mozilla
:
:
dom
:
:
XULTreeElement
*
aTree
uint32_t
aIndex
)
;
static
already_AddRefed
<
nsTreeColumn
>
GetNextSensibleColumn
(
nsTreeColumn
*
aColumn
)
;
static
already_AddRefed
<
nsTreeColumn
>
GetPreviousSensibleColumn
(
nsTreeColumn
*
aColumn
)
;
static
bool
IsColumnHidden
(
nsTreeColumn
*
aColumn
)
;
MOZ_CAN_RUN_SCRIPT
static
void
ScrollTo
(
PresShell
*
aPresShell
nsIContent
*
aContent
uint32_t
aScrollType
)
;
static
bool
IsHTMLTableHeader
(
nsIContent
*
aContent
)
{
return
aContent
-
>
NodeInfo
(
)
-
>
Equals
(
nsGkAtoms
:
:
th
)
|
|
(
aContent
-
>
IsElement
(
)
&
&
aContent
-
>
AsElement
(
)
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
scope
)
)
;
}
static
bool
IsWhitespaceString
(
const
nsAString
&
aString
)
;
static
bool
IsWhitespace
(
char16_t
aChar
)
{
return
aChar
=
=
'
'
|
|
aChar
=
=
'
\
n
'
|
|
aChar
=
=
'
\
r
'
|
|
aChar
=
=
'
\
t
'
|
|
aChar
=
=
0xa0
;
}
static
bool
AccEventObserversExist
(
)
;
static
void
DispatchAccEvent
(
RefPtr
<
nsIAccessibleEvent
>
aEvent
)
;
}
;
#
endif
