#
include
"
TreeWalker
.
h
"
#
include
"
Accessible
.
h
"
#
include
"
AccIterator
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
DocAccessible
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
TreeWalker
:
:
TreeWalker
(
Accessible
*
aContext
nsIContent
*
aContent
uint32_t
aFlags
)
:
mDoc
(
aContext
-
>
Document
(
)
)
mContext
(
aContext
)
mAnchorNode
(
aContent
)
mFlags
(
aFlags
)
{
NS_ASSERTION
(
aContent
"
No
node
for
the
accessible
tree
walker
!
"
)
;
mChildFilter
=
mContext
-
>
CanHaveAnonChildren
(
)
?
nsIContent
:
:
eAllChildren
:
nsIContent
:
:
eAllButXBL
;
mChildFilter
|
=
nsIContent
:
:
eSkipPlaceholderContent
;
if
(
aContent
)
PushState
(
aContent
)
;
MOZ_COUNT_CTOR
(
TreeWalker
)
;
}
TreeWalker
:
:
~
TreeWalker
(
)
{
MOZ_COUNT_DTOR
(
TreeWalker
)
;
}
Accessible
*
TreeWalker
:
:
Next
(
)
{
if
(
mStateStack
.
IsEmpty
(
)
)
return
nullptr
;
ChildrenIterator
*
top
=
&
mStateStack
[
mStateStack
.
Length
(
)
-
1
]
;
while
(
top
)
{
Accessible
*
child
=
nullptr
;
bool
skipSubtree
=
false
;
while
(
nsIContent
*
childNode
=
Next
(
top
&
child
&
skipSubtree
)
)
{
if
(
child
)
return
child
;
if
(
!
skipSubtree
&
&
childNode
-
>
IsElement
(
)
)
top
=
PushState
(
childNode
)
;
}
top
=
PopState
(
)
;
}
if
(
mFlags
!
=
eWalkContextTree
)
return
nullptr
;
nsINode
*
contextNode
=
mContext
-
>
GetNode
(
)
;
while
(
mAnchorNode
!
=
contextNode
)
{
nsINode
*
parentNode
=
mAnchorNode
-
>
GetFlattenedTreeParent
(
)
;
if
(
!
parentNode
|
|
!
parentNode
-
>
IsElement
(
)
)
return
nullptr
;
nsIContent
*
parent
=
parentNode
-
>
AsElement
(
)
;
top
=
PushState
(
parent
)
;
if
(
top
-
>
mDOMIter
.
Seek
(
mAnchorNode
)
)
{
mAnchorNode
=
parent
;
return
Next
(
)
;
}
mAnchorNode
=
parent
;
}
return
nullptr
;
}
nsIContent
*
TreeWalker
:
:
Next
(
ChildrenIterator
*
aIter
Accessible
*
*
aAccesible
bool
*
aSkipSubtree
)
{
nsIContent
*
childEl
=
aIter
-
>
mDOMIter
.
GetNextChild
(
)
;
if
(
!
aAccesible
)
return
childEl
;
*
aAccesible
=
nullptr
;
*
aSkipSubtree
=
false
;
if
(
childEl
)
{
Accessible
*
accessible
=
mFlags
&
eWalkCache
?
mDoc
-
>
GetAccessible
(
childEl
)
:
GetAccService
(
)
-
>
GetOrCreateAccessible
(
childEl
mContext
aSkipSubtree
)
;
if
(
accessible
)
{
if
(
accessible
-
>
IsRelocated
(
)
)
{
*
aSkipSubtree
=
true
;
}
else
{
*
aAccesible
=
accessible
;
}
}
return
childEl
;
}
Accessible
*
parent
=
mDoc
-
>
GetAccessible
(
aIter
-
>
mDOMIter
.
Parent
(
)
)
;
if
(
parent
)
{
Accessible
*
child
=
mDoc
-
>
ARIAOwnedAt
(
parent
aIter
-
>
mARIAOwnsIdx
+
+
)
;
if
(
child
)
{
*
aAccesible
=
child
;
return
child
-
>
GetContent
(
)
;
}
}
return
nullptr
;
}
TreeWalker
:
:
ChildrenIterator
*
TreeWalker
:
:
PopState
(
)
{
size_t
length
=
mStateStack
.
Length
(
)
;
mStateStack
.
RemoveElementAt
(
length
-
1
)
;
return
mStateStack
.
IsEmpty
(
)
?
nullptr
:
&
mStateStack
[
mStateStack
.
Length
(
)
-
1
]
;
}
