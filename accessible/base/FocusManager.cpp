#
include
"
FocusManager
.
h
"
#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
AccIterator
.
h
"
#
include
"
DocAccessible
-
inl
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsEventShell
.
h
"
#
include
"
Role
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
DocManager
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
namespace
mozilla
{
namespace
a11y
{
FocusManager
:
:
FocusManager
(
)
{
}
FocusManager
:
:
~
FocusManager
(
)
{
}
LocalAccessible
*
FocusManager
:
:
FocusedLocalAccessible
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mActiveItem
)
{
if
(
mActiveItem
-
>
IsDefunct
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Stored
active
item
is
unbound
from
document
"
)
;
return
nullptr
;
}
return
mActiveItem
;
}
if
(
nsAccessibilityService
:
:
IsShutdown
(
)
)
{
return
nullptr
;
}
nsINode
*
focusedNode
=
FocusedDOMNode
(
)
;
if
(
focusedNode
)
{
DocAccessible
*
doc
=
GetAccService
(
)
-
>
GetDocAccessible
(
focusedNode
-
>
OwnerDoc
(
)
)
;
return
doc
?
doc
-
>
GetAccessibleEvenIfNotInMapOrContainer
(
focusedNode
)
:
nullptr
;
}
return
nullptr
;
}
Accessible
*
FocusManager
:
:
FocusedAccessible
(
)
const
{
#
if
defined
(
ANDROID
)
if
(
NS_IsMainThread
(
)
)
{
if
(
Accessible
*
focusedAcc
=
FocusedLocalAccessible
(
)
)
{
return
focusedAcc
;
}
}
else
{
nsAccessibilityService
:
:
GetAndroidMonitor
(
)
.
AssertCurrentThreadOwns
(
)
;
}
return
mFocusedRemoteDoc
?
mFocusedRemoteDoc
-
>
GetFocusedAcc
(
)
:
nullptr
;
#
else
if
(
Accessible
*
focusedAcc
=
FocusedLocalAccessible
(
)
)
{
return
focusedAcc
;
}
if
(
!
XRE_IsParentProcess
(
)
)
{
return
nullptr
;
}
nsFocusManager
*
focusManagerDOM
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
focusManagerDOM
)
{
return
nullptr
;
}
dom
:
:
BrowsingContext
*
focusedContext
=
focusManagerDOM
-
>
GetFocusedBrowsingContextInChrome
(
)
;
DocAccessibleParent
*
focusedDoc
=
DocAccessibleParent
:
:
GetFrom
(
focusedContext
)
;
return
focusedDoc
?
focusedDoc
-
>
GetFocusedAcc
(
)
:
nullptr
;
#
endif
}
bool
FocusManager
:
:
IsFocusWithin
(
const
Accessible
*
aContainer
)
const
{
Accessible
*
child
=
FocusedAccessible
(
)
;
while
(
child
)
{
if
(
child
=
=
aContainer
)
return
true
;
child
=
child
-
>
Parent
(
)
;
}
return
false
;
}
FocusManager
:
:
FocusDisposition
FocusManager
:
:
IsInOrContainsFocus
(
const
LocalAccessible
*
aAccessible
)
const
{
LocalAccessible
*
focus
=
FocusedLocalAccessible
(
)
;
if
(
!
focus
)
return
eNone
;
if
(
focus
=
=
aAccessible
)
return
eFocused
;
LocalAccessible
*
child
=
focus
-
>
LocalParent
(
)
;
while
(
child
)
{
if
(
child
=
=
aAccessible
)
return
eContainsFocus
;
child
=
child
-
>
LocalParent
(
)
;
}
child
=
aAccessible
-
>
LocalParent
(
)
;
while
(
child
)
{
if
(
child
=
=
focus
)
return
eContainedByFocus
;
child
=
child
-
>
LocalParent
(
)
;
}
return
eNone
;
}
bool
FocusManager
:
:
WasLastFocused
(
const
LocalAccessible
*
aAccessible
)
const
{
return
mLastFocus
=
=
aAccessible
;
}
void
FocusManager
:
:
NotifyOfDOMFocus
(
nsISupports
*
aTarget
)
{
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eFocus
)
)
{
logging
:
:
FocusNotificationTarget
(
"
DOM
focus
"
"
Target
"
aTarget
)
;
}
#
endif
mActiveItem
=
nullptr
;
nsCOMPtr
<
nsINode
>
targetNode
(
do_QueryInterface
(
aTarget
)
)
;
if
(
targetNode
)
{
DocAccessible
*
document
=
GetAccService
(
)
-
>
GetDocAccessible
(
targetNode
-
>
OwnerDoc
(
)
)
;
if
(
document
)
{
if
(
targetNode
-
>
IsElement
(
)
)
{
SelectionMgr
(
)
-
>
SetControlSelectionListener
(
targetNode
-
>
AsElement
(
)
)
;
}
document
-
>
HandleNotification
<
FocusManager
nsINode
>
(
this
&
FocusManager
:
:
ProcessDOMFocus
targetNode
)
;
}
}
}
void
FocusManager
:
:
NotifyOfDOMBlur
(
nsISupports
*
aTarget
)
{
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eFocus
)
)
{
logging
:
:
FocusNotificationTarget
(
"
DOM
blur
"
"
Target
"
aTarget
)
;
}
#
endif
mActiveItem
=
nullptr
;
nsCOMPtr
<
nsINode
>
targetNode
(
do_QueryInterface
(
aTarget
)
)
;
if
(
targetNode
&
&
targetNode
-
>
OwnerDoc
(
)
=
=
FocusedDOMDocument
(
)
)
{
dom
:
:
Document
*
DOMDoc
=
targetNode
-
>
OwnerDoc
(
)
;
DocAccessible
*
document
=
GetAccService
(
)
-
>
GetDocAccessible
(
DOMDoc
)
;
if
(
document
)
{
if
(
targetNode
-
>
IsElement
(
)
)
{
SelectionMgr
(
)
-
>
ClearControlSelectionListener
(
)
;
}
document
-
>
HandleNotification
<
FocusManager
nsINode
>
(
this
&
FocusManager
:
:
ProcessDOMFocus
DOMDoc
)
;
}
}
}
void
FocusManager
:
:
ActiveItemChanged
(
LocalAccessible
*
aItem
bool
aCheckIfActive
)
{
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eFocus
)
)
{
logging
:
:
FocusNotificationTarget
(
"
active
item
changed
"
"
Item
"
aItem
)
;
}
#
endif
if
(
aItem
&
&
aItem
=
=
mActiveItem
)
{
return
;
}
mActiveItem
=
nullptr
;
if
(
aItem
&
&
aCheckIfActive
)
{
LocalAccessible
*
widget
=
aItem
-
>
ContainerWidget
(
)
;
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eFocus
)
)
logging
:
:
ActiveWidget
(
widget
)
;
#
endif
if
(
!
widget
|
|
!
widget
-
>
IsActiveWidget
(
)
|
|
!
widget
-
>
AreItemsOperable
(
)
)
{
return
;
}
}
mActiveItem
=
aItem
;
if
(
!
mActiveItem
&
&
XRE_IsParentProcess
(
)
)
{
dom
:
:
BrowserParent
*
browser
=
dom
:
:
BrowserParent
:
:
GetFocused
(
)
;
if
(
browser
)
{
a11y
:
:
DocAccessibleParent
*
dap
=
browser
-
>
GetTopLevelDocAccessible
(
)
;
if
(
dap
)
{
Unused
<
<
dap
-
>
SendRestoreFocus
(
)
;
}
}
}
LocalAccessible
*
target
=
FocusedLocalAccessible
(
)
;
if
(
target
)
{
DispatchFocusEvent
(
target
-
>
Document
(
)
target
)
;
}
}
void
FocusManager
:
:
ForceFocusEvent
(
)
{
nsINode
*
focusedNode
=
FocusedDOMNode
(
)
;
if
(
focusedNode
)
{
DocAccessible
*
document
=
GetAccService
(
)
-
>
GetDocAccessible
(
focusedNode
-
>
OwnerDoc
(
)
)
;
if
(
document
)
{
document
-
>
HandleNotification
<
FocusManager
nsINode
>
(
this
&
FocusManager
:
:
ProcessDOMFocus
focusedNode
)
;
}
}
}
void
FocusManager
:
:
DispatchFocusEvent
(
DocAccessible
*
aDocument
LocalAccessible
*
aTarget
)
{
MOZ_ASSERT
(
aDocument
"
No
document
for
focused
accessible
!
"
)
;
if
(
aDocument
)
{
RefPtr
<
AccEvent
>
event
=
new
AccEvent
(
nsIAccessibleEvent
:
:
EVENT_FOCUS
aTarget
eAutoDetect
AccEvent
:
:
eCoalesceOfSameType
)
;
aDocument
-
>
FireDelayedEvent
(
event
)
;
mLastFocus
=
aTarget
;
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eFocus
)
)
logging
:
:
FocusDispatched
(
aTarget
)
;
#
endif
}
}
void
FocusManager
:
:
ProcessDOMFocus
(
nsINode
*
aTarget
)
{
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eFocus
)
)
{
logging
:
:
FocusNotificationTarget
(
"
process
DOM
focus
"
"
Target
"
aTarget
)
;
}
#
endif
DocAccessible
*
document
=
GetAccService
(
)
-
>
GetDocAccessible
(
aTarget
-
>
OwnerDoc
(
)
)
;
if
(
!
document
)
return
;
LocalAccessible
*
target
=
document
-
>
GetAccessibleEvenIfNotInMapOrContainer
(
aTarget
)
;
if
(
target
)
{
nsINode
*
focusedNode
=
FocusedDOMNode
(
)
;
if
(
!
focusedNode
)
return
;
LocalAccessible
*
DOMFocus
=
document
-
>
GetAccessibleEvenIfNotInMapOrContainer
(
focusedNode
)
;
if
(
target
!
=
DOMFocus
)
return
;
LocalAccessible
*
activeItem
=
target
-
>
CurrentItem
(
)
;
if
(
activeItem
)
{
mActiveItem
=
activeItem
;
target
=
activeItem
;
}
DispatchFocusEvent
(
document
target
)
;
}
}
void
FocusManager
:
:
ProcessFocusEvent
(
AccEvent
*
aEvent
)
{
MOZ_ASSERT
(
aEvent
-
>
GetEventType
(
)
=
=
nsIAccessibleEvent
:
:
EVENT_FOCUS
"
Focus
event
is
expected
!
"
)
;
LocalAccessible
*
target
=
aEvent
-
>
GetAccessible
(
)
;
MOZ_ASSERT
(
!
target
-
>
IsDefunct
(
)
)
;
if
(
target
!
=
mActiveItem
)
{
DocAccessible
*
document
=
aEvent
-
>
Document
(
)
;
nsINode
*
focusedNode
=
FocusedDOMNode
(
)
;
if
(
!
focusedNode
)
return
;
LocalAccessible
*
DOMFocus
=
document
-
>
GetAccessibleEvenIfNotInMapOrContainer
(
focusedNode
)
;
if
(
target
!
=
DOMFocus
)
return
;
LocalAccessible
*
activeItem
=
target
-
>
CurrentItem
(
)
;
if
(
activeItem
)
{
mActiveItem
=
activeItem
;
target
=
activeItem
;
MOZ_ASSERT
(
!
target
-
>
IsDefunct
(
)
)
;
}
}
if
(
target
-
>
IsARIARole
(
nsGkAtoms
:
:
menuitem
)
)
{
LocalAccessible
*
ARIAMenubar
=
nullptr
;
for
(
LocalAccessible
*
parent
=
target
-
>
LocalParent
(
)
;
parent
;
parent
=
parent
-
>
LocalParent
(
)
)
{
if
(
parent
-
>
IsARIARole
(
nsGkAtoms
:
:
menubar
)
)
{
ARIAMenubar
=
parent
;
break
;
}
if
(
!
parent
-
>
IsARIARole
(
nsGkAtoms
:
:
menuitem
)
&
&
!
parent
-
>
IsARIARole
(
nsGkAtoms
:
:
menu
)
)
{
break
;
}
}
if
(
ARIAMenubar
!
=
mActiveARIAMenubar
)
{
if
(
mActiveARIAMenubar
)
{
RefPtr
<
AccEvent
>
menuEndEvent
=
new
AccEvent
(
nsIAccessibleEvent
:
:
EVENT_MENU_END
mActiveARIAMenubar
aEvent
-
>
FromUserInput
(
)
)
;
nsEventShell
:
:
FireEvent
(
menuEndEvent
)
;
}
mActiveARIAMenubar
=
ARIAMenubar
;
if
(
mActiveARIAMenubar
)
{
RefPtr
<
AccEvent
>
menuStartEvent
=
new
AccEvent
(
nsIAccessibleEvent
:
:
EVENT_MENU_START
mActiveARIAMenubar
aEvent
-
>
FromUserInput
(
)
)
;
nsEventShell
:
:
FireEvent
(
menuStartEvent
)
;
}
}
}
else
if
(
mActiveARIAMenubar
)
{
RefPtr
<
AccEvent
>
menuEndEvent
=
new
AccEvent
(
nsIAccessibleEvent
:
:
EVENT_MENU_END
mActiveARIAMenubar
aEvent
-
>
FromUserInput
(
)
)
;
nsEventShell
:
:
FireEvent
(
menuEndEvent
)
;
mActiveARIAMenubar
=
nullptr
;
}
#
ifdef
A11Y_LOG
if
(
logging
:
:
IsEnabled
(
logging
:
:
eFocus
)
)
{
logging
:
:
FocusNotificationTarget
(
"
fire
focus
event
"
"
Target
"
target
)
;
}
#
endif
SelectionMgr
(
)
-
>
ResetCaretOffset
(
)
;
RefPtr
<
AccEvent
>
focusEvent
=
new
AccEvent
(
nsIAccessibleEvent
:
:
EVENT_FOCUS
target
aEvent
-
>
FromUserInput
(
)
)
;
nsEventShell
:
:
FireEvent
(
focusEvent
)
;
if
(
NS_WARN_IF
(
target
-
>
IsDefunct
(
)
)
)
{
return
;
}
DocAccessible
*
targetDocument
=
target
-
>
Document
(
)
;
MOZ_ASSERT
(
targetDocument
)
;
LocalAccessible
*
anchorJump
=
targetDocument
-
>
AnchorJump
(
)
;
if
(
anchorJump
)
{
if
(
target
=
=
targetDocument
)
{
nsEventShell
:
:
FireEvent
(
nsIAccessibleEvent
:
:
EVENT_SCROLLING_START
anchorJump
aEvent
-
>
FromUserInput
(
)
)
;
}
targetDocument
-
>
SetAnchorJump
(
nullptr
)
;
}
}
nsINode
*
FocusManager
:
:
FocusedDOMNode
(
)
const
{
nsFocusManager
*
DOMFocusManager
=
nsFocusManager
:
:
GetFocusManager
(
)
;
nsIContent
*
focusedElm
=
DOMFocusManager
-
>
GetFocusedElement
(
)
;
nsIFrame
*
focusedFrame
=
focusedElm
?
focusedElm
-
>
GetPrimaryFrame
(
)
:
nullptr
;
if
(
focusedFrame
&
&
focusedFrame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
)
{
if
(
EventStateManager
:
:
IsTopLevelRemoteTarget
(
focusedElm
)
&
&
focusedElm
-
>
AsElement
(
)
-
>
HasAttribute
(
u
"
printpreview
"
_ns
)
)
{
return
focusedElm
;
}
if
(
EventStateManager
:
:
IsRemoteTarget
(
focusedElm
)
)
{
return
nullptr
;
}
return
focusedElm
;
}
dom
:
:
BrowsingContext
*
context
=
DOMFocusManager
-
>
GetFocusedBrowsingContext
(
)
;
if
(
context
)
{
nsIDocShell
*
shell
=
context
-
>
GetDocShell
(
)
;
if
(
shell
)
{
return
shell
-
>
GetDocument
(
)
;
}
}
return
nullptr
;
}
dom
:
:
Document
*
FocusManager
:
:
FocusedDOMDocument
(
)
const
{
nsINode
*
focusedNode
=
FocusedDOMNode
(
)
;
return
focusedNode
?
focusedNode
-
>
OwnerDoc
(
)
:
nullptr
;
}
}
}
