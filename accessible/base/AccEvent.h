#
ifndef
_AccEvent_H_
#
define
_AccEvent_H_
#
include
"
nsIAccessibleEvent
.
h
"
#
include
"
mozilla
/
a11y
/
LocalAccessible
.
h
"
class
nsEventShell
;
namespace
mozilla
{
namespace
dom
{
class
Selection
;
}
namespace
a11y
{
class
DocAccessible
;
class
EventQueue
;
class
TextRange
;
enum
EIsFromUserInput
{
eNoUserInput
=
0
eFromUserInput
=
1
eAutoDetect
=
-
1
}
;
class
AccEvent
{
public
:
enum
EEventRule
{
eAllowDupes
eCoalesceReorder
eCoalesceOfSameType
eCoalesceSelectionChange
eCoalesceStateChange
eCoalesceTextSelChange
eRemoveDupes
eDoNotEmit
}
;
AccEvent
(
uint32_t
aEventType
LocalAccessible
*
aAccessible
EIsFromUserInput
aIsFromUserInput
=
eAutoDetect
EEventRule
aEventRule
=
eRemoveDupes
)
;
uint32_t
GetEventType
(
)
const
{
return
mEventType
;
}
EEventRule
GetEventRule
(
)
const
{
return
mEventRule
;
}
bool
IsFromUserInput
(
)
const
{
return
mIsFromUserInput
;
}
EIsFromUserInput
FromUserInput
(
)
const
{
return
static_cast
<
EIsFromUserInput
>
(
mIsFromUserInput
)
;
}
LocalAccessible
*
GetAccessible
(
)
const
{
return
mAccessible
;
}
DocAccessible
*
Document
(
)
const
{
return
mAccessible
-
>
Document
(
)
;
}
enum
EventGroup
{
eGenericEvent
eStateChangeEvent
eTextChangeEvent
eTreeMutationEvent
eMutationEvent
eReorderEvent
eHideEvent
eShowEvent
eCaretMoveEvent
eTextSelChangeEvent
eSelectionChangeEvent
eTableChangeEvent
eVirtualCursorChangeEvent
eObjectAttrChangedEvent
eScrollingEvent
eAnnouncementEvent
}
;
static
const
EventGroup
kEventGroup
=
eGenericEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
{
return
1U
<
<
eGenericEvent
;
}
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
AccEvent
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
AccEvent
)
protected
:
virtual
~
AccEvent
(
)
{
}
bool
mIsFromUserInput
;
uint32_t
mEventType
;
EEventRule
mEventRule
;
RefPtr
<
LocalAccessible
>
mAccessible
;
friend
class
EventQueue
;
friend
class
EventTree
;
friend
class
:
:
nsEventShell
;
friend
class
NotificationController
;
}
;
class
AccStateChangeEvent
:
public
AccEvent
{
public
:
AccStateChangeEvent
(
LocalAccessible
*
aAccessible
uint64_t
aState
bool
aIsEnabled
EIsFromUserInput
aIsFromUserInput
=
eAutoDetect
)
:
AccEvent
(
nsIAccessibleEvent
:
:
EVENT_STATE_CHANGE
aAccessible
aIsFromUserInput
eCoalesceStateChange
)
mState
(
aState
)
mIsEnabled
(
aIsEnabled
)
{
}
AccStateChangeEvent
(
LocalAccessible
*
aAccessible
uint64_t
aState
)
:
AccEvent
(
:
:
nsIAccessibleEvent
:
:
EVENT_STATE_CHANGE
aAccessible
eAutoDetect
eCoalesceStateChange
)
mState
(
aState
)
{
mIsEnabled
=
(
mAccessible
-
>
State
(
)
&
mState
)
!
=
0
;
}
static
const
EventGroup
kEventGroup
=
eStateChangeEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eStateChangeEvent
)
;
}
uint64_t
GetState
(
)
const
{
return
mState
;
}
bool
IsStateEnabled
(
)
const
{
return
mIsEnabled
;
}
private
:
uint64_t
mState
;
bool
mIsEnabled
;
friend
class
EventQueue
;
}
;
class
AccTextChangeEvent
:
public
AccEvent
{
public
:
AccTextChangeEvent
(
LocalAccessible
*
aAccessible
int32_t
aStart
const
nsAString
&
aModifiedText
bool
aIsInserted
EIsFromUserInput
aIsFromUserInput
=
eAutoDetect
)
;
static
const
EventGroup
kEventGroup
=
eTextChangeEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eTextChangeEvent
)
;
}
int32_t
GetStartOffset
(
)
const
{
return
mStart
;
}
uint32_t
GetLength
(
)
const
{
return
mModifiedText
.
Length
(
)
;
}
bool
IsTextInserted
(
)
const
{
return
mIsInserted
;
}
void
GetModifiedText
(
nsAString
&
aModifiedText
)
{
aModifiedText
=
mModifiedText
;
}
const
nsString
&
ModifiedText
(
)
const
{
return
mModifiedText
;
}
private
:
int32_t
mStart
;
bool
mIsInserted
;
nsString
mModifiedText
;
friend
class
EventTree
;
friend
class
NotificationController
;
}
;
class
AccTreeMutationEvent
:
public
AccEvent
{
public
:
AccTreeMutationEvent
(
uint32_t
aEventType
LocalAccessible
*
aTarget
)
:
AccEvent
(
aEventType
aTarget
eAutoDetect
eCoalesceReorder
)
mGeneration
(
0
)
{
}
static
const
EventGroup
kEventGroup
=
eTreeMutationEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eTreeMutationEvent
)
;
}
void
SetNextEvent
(
AccTreeMutationEvent
*
aNext
)
{
mNextEvent
=
aNext
;
}
void
SetPrevEvent
(
AccTreeMutationEvent
*
aPrev
)
{
mPrevEvent
=
aPrev
;
}
AccTreeMutationEvent
*
NextEvent
(
)
const
{
return
mNextEvent
;
}
AccTreeMutationEvent
*
PrevEvent
(
)
const
{
return
mPrevEvent
;
}
uint32_t
EventGeneration
(
)
const
{
return
mGeneration
;
}
void
SetEventGeneration
(
uint32_t
aGeneration
)
{
mGeneration
=
aGeneration
;
}
private
:
RefPtr
<
AccTreeMutationEvent
>
mNextEvent
;
RefPtr
<
AccTreeMutationEvent
>
mPrevEvent
;
uint32_t
mGeneration
;
}
;
class
AccMutationEvent
:
public
AccTreeMutationEvent
{
public
:
AccMutationEvent
(
uint32_t
aEventType
LocalAccessible
*
aTarget
)
:
AccTreeMutationEvent
(
aEventType
aTarget
)
{
mParent
=
mAccessible
-
>
LocalParent
(
)
;
}
virtual
~
AccMutationEvent
(
)
{
}
static
const
EventGroup
kEventGroup
=
eMutationEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccTreeMutationEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eMutationEvent
)
;
}
bool
IsShow
(
)
const
{
return
mEventType
=
=
nsIAccessibleEvent
:
:
EVENT_SHOW
;
}
bool
IsHide
(
)
const
{
return
mEventType
=
=
nsIAccessibleEvent
:
:
EVENT_HIDE
;
}
LocalAccessible
*
LocalParent
(
)
const
{
return
mParent
;
}
protected
:
RefPtr
<
LocalAccessible
>
mParent
;
RefPtr
<
AccTextChangeEvent
>
mTextChangeEvent
;
friend
class
EventTree
;
friend
class
NotificationController
;
}
;
class
AccHideEvent
:
public
AccMutationEvent
{
public
:
explicit
AccHideEvent
(
LocalAccessible
*
aTarget
bool
aNeedsShutdown
=
true
)
;
static
const
EventGroup
kEventGroup
=
eHideEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccMutationEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eHideEvent
)
;
}
LocalAccessible
*
TargetParent
(
)
const
{
return
mParent
;
}
LocalAccessible
*
TargetNextSibling
(
)
const
{
return
mNextSibling
;
}
LocalAccessible
*
TargetPrevSibling
(
)
const
{
return
mPrevSibling
;
}
bool
NeedsShutdown
(
)
const
{
return
mNeedsShutdown
;
}
protected
:
bool
mNeedsShutdown
;
RefPtr
<
LocalAccessible
>
mNextSibling
;
RefPtr
<
LocalAccessible
>
mPrevSibling
;
friend
class
EventTree
;
friend
class
NotificationController
;
}
;
class
AccShowEvent
:
public
AccMutationEvent
{
public
:
explicit
AccShowEvent
(
LocalAccessible
*
aTarget
)
;
static
const
EventGroup
kEventGroup
=
eShowEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccMutationEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eShowEvent
)
;
}
uint32_t
InsertionIndex
(
)
const
{
return
mInsertionIndex
;
}
private
:
nsTArray
<
RefPtr
<
AccHideEvent
>
>
mPrecedingEvents
;
uint32_t
mInsertionIndex
;
friend
class
EventTree
;
}
;
class
AccReorderEvent
:
public
AccTreeMutationEvent
{
public
:
explicit
AccReorderEvent
(
LocalAccessible
*
aTarget
)
:
AccTreeMutationEvent
(
:
:
nsIAccessibleEvent
:
:
EVENT_REORDER
aTarget
)
{
}
virtual
~
AccReorderEvent
(
)
{
}
static
const
EventGroup
kEventGroup
=
eReorderEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccTreeMutationEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eReorderEvent
)
;
}
void
SetInner
(
)
{
mEventType
=
:
:
nsIAccessibleEvent
:
:
EVENT_INNER_REORDER
;
}
}
;
class
AccCaretMoveEvent
:
public
AccEvent
{
public
:
AccCaretMoveEvent
(
LocalAccessible
*
aAccessible
int32_t
aCaretOffset
bool
aIsSelectionCollapsed
bool
aIsAtEndOfLine
int32_t
aGranularity
EIsFromUserInput
aIsFromUserInput
=
eAutoDetect
)
:
AccEvent
(
:
:
nsIAccessibleEvent
:
:
EVENT_TEXT_CARET_MOVED
aAccessible
aIsFromUserInput
)
mCaretOffset
(
aCaretOffset
)
mIsSelectionCollapsed
(
aIsSelectionCollapsed
)
mIsAtEndOfLine
(
aIsAtEndOfLine
)
mGranularity
(
aGranularity
)
{
}
virtual
~
AccCaretMoveEvent
(
)
{
}
static
const
EventGroup
kEventGroup
=
eCaretMoveEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eCaretMoveEvent
)
;
}
int32_t
GetCaretOffset
(
)
const
{
return
mCaretOffset
;
}
bool
IsSelectionCollapsed
(
)
const
{
return
mIsSelectionCollapsed
;
}
bool
IsAtEndOfLine
(
)
{
return
mIsAtEndOfLine
;
}
int32_t
GetGranularity
(
)
const
{
return
mGranularity
;
}
private
:
int32_t
mCaretOffset
;
bool
mIsSelectionCollapsed
;
bool
mIsAtEndOfLine
;
int32_t
mGranularity
;
}
;
class
AccTextSelChangeEvent
:
public
AccEvent
{
public
:
AccTextSelChangeEvent
(
HyperTextAccessible
*
aTarget
dom
:
:
Selection
*
aSelection
int32_t
aReason
int32_t
aGranularity
)
;
virtual
~
AccTextSelChangeEvent
(
)
;
static
const
EventGroup
kEventGroup
=
eTextSelChangeEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eTextSelChangeEvent
)
;
}
bool
IsCaretMoveOnly
(
)
const
;
int32_t
GetGranularity
(
)
const
{
return
mGranularity
;
}
void
SelectionRanges
(
nsTArray
<
a11y
:
:
TextRange
>
*
aRanges
)
const
;
private
:
RefPtr
<
dom
:
:
Selection
>
mSel
;
int32_t
mReason
;
int32_t
mGranularity
;
friend
class
EventQueue
;
friend
class
SelectionManager
;
}
;
class
AccSelChangeEvent
:
public
AccEvent
{
public
:
enum
SelChangeType
{
eSelectionAdd
eSelectionRemove
}
;
AccSelChangeEvent
(
LocalAccessible
*
aWidget
LocalAccessible
*
aItem
SelChangeType
aSelChangeType
)
;
virtual
~
AccSelChangeEvent
(
)
{
}
static
const
EventGroup
kEventGroup
=
eSelectionChangeEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eSelectionChangeEvent
)
;
}
LocalAccessible
*
Widget
(
)
const
{
return
mWidget
;
}
private
:
RefPtr
<
LocalAccessible
>
mWidget
;
RefPtr
<
LocalAccessible
>
mItem
;
SelChangeType
mSelChangeType
;
uint32_t
mPreceedingCount
;
AccSelChangeEvent
*
mPackedEvent
;
friend
class
EventQueue
;
}
;
class
AccTableChangeEvent
:
public
AccEvent
{
public
:
AccTableChangeEvent
(
LocalAccessible
*
aAccessible
uint32_t
aEventType
int32_t
aRowOrColIndex
int32_t
aNumRowsOrCols
)
;
static
const
EventGroup
kEventGroup
=
eTableChangeEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eTableChangeEvent
)
;
}
uint32_t
GetIndex
(
)
const
{
return
mRowOrColIndex
;
}
uint32_t
GetCount
(
)
const
{
return
mNumRowsOrCols
;
}
private
:
uint32_t
mRowOrColIndex
;
uint32_t
mNumRowsOrCols
;
}
;
class
AccVCChangeEvent
:
public
AccEvent
{
public
:
AccVCChangeEvent
(
LocalAccessible
*
aAccessible
LocalAccessible
*
aOldAccessible
int32_t
aOldStart
int32_t
aOldEnd
LocalAccessible
*
aNewAccessible
int32_t
aNewStart
int32_t
aNewEnd
int16_t
aReason
int16_t
aBoundaryType
EIsFromUserInput
aIsFromUserInput
=
eFromUserInput
)
;
virtual
~
AccVCChangeEvent
(
)
{
}
static
const
EventGroup
kEventGroup
=
eVirtualCursorChangeEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eVirtualCursorChangeEvent
)
;
}
LocalAccessible
*
OldAccessible
(
)
const
{
return
mOldAccessible
;
}
int32_t
OldStartOffset
(
)
const
{
return
mOldStart
;
}
int32_t
OldEndOffset
(
)
const
{
return
mOldEnd
;
}
LocalAccessible
*
NewAccessible
(
)
const
{
return
mNewAccessible
;
}
int32_t
NewStartOffset
(
)
const
{
return
mNewStart
;
}
int32_t
NewEndOffset
(
)
const
{
return
mNewEnd
;
}
int32_t
Reason
(
)
const
{
return
mReason
;
}
int32_t
BoundaryType
(
)
const
{
return
mBoundaryType
;
}
private
:
RefPtr
<
LocalAccessible
>
mOldAccessible
;
RefPtr
<
LocalAccessible
>
mNewAccessible
;
int32_t
mOldStart
;
int32_t
mNewStart
;
int32_t
mOldEnd
;
int32_t
mNewEnd
;
int16_t
mReason
;
int16_t
mBoundaryType
;
}
;
class
AccObjectAttrChangedEvent
:
public
AccEvent
{
public
:
AccObjectAttrChangedEvent
(
LocalAccessible
*
aAccessible
nsAtom
*
aAttribute
)
:
AccEvent
(
:
:
nsIAccessibleEvent
:
:
EVENT_OBJECT_ATTRIBUTE_CHANGED
aAccessible
)
mAttribute
(
aAttribute
)
{
}
static
const
EventGroup
kEventGroup
=
eObjectAttrChangedEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eObjectAttrChangedEvent
)
;
}
nsAtom
*
GetAttribute
(
)
const
{
return
mAttribute
;
}
private
:
RefPtr
<
nsAtom
>
mAttribute
;
virtual
~
AccObjectAttrChangedEvent
(
)
{
}
}
;
class
AccScrollingEvent
:
public
AccEvent
{
public
:
AccScrollingEvent
(
uint32_t
aEventType
LocalAccessible
*
aAccessible
uint32_t
aScrollX
uint32_t
aScrollY
uint32_t
aMaxScrollX
uint32_t
aMaxScrollY
)
:
AccEvent
(
aEventType
aAccessible
)
mScrollX
(
aScrollX
)
mScrollY
(
aScrollY
)
mMaxScrollX
(
aMaxScrollX
)
mMaxScrollY
(
aMaxScrollY
)
{
}
virtual
~
AccScrollingEvent
(
)
{
}
static
const
EventGroup
kEventGroup
=
eScrollingEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eScrollingEvent
)
;
}
uint32_t
ScrollX
(
)
{
return
mScrollX
;
}
uint32_t
ScrollY
(
)
{
return
mScrollY
;
}
uint32_t
MaxScrollX
(
)
{
return
mMaxScrollX
;
}
uint32_t
MaxScrollY
(
)
{
return
mMaxScrollY
;
}
private
:
uint32_t
mScrollX
;
uint32_t
mScrollY
;
uint32_t
mMaxScrollX
;
uint32_t
mMaxScrollY
;
}
;
class
AccAnnouncementEvent
:
public
AccEvent
{
public
:
AccAnnouncementEvent
(
LocalAccessible
*
aAccessible
const
nsAString
&
aAnnouncement
uint16_t
aPriority
)
:
AccEvent
(
nsIAccessibleEvent
:
:
EVENT_ANNOUNCEMENT
aAccessible
)
mAnnouncement
(
aAnnouncement
)
mPriority
(
aPriority
)
{
}
virtual
~
AccAnnouncementEvent
(
)
{
}
static
const
EventGroup
kEventGroup
=
eAnnouncementEvent
;
virtual
unsigned
int
GetEventGroups
(
)
const
override
{
return
AccEvent
:
:
GetEventGroups
(
)
|
(
1U
<
<
eAnnouncementEvent
)
;
}
const
nsString
&
Announcement
(
)
const
{
return
mAnnouncement
;
}
uint16_t
Priority
(
)
{
return
mPriority
;
}
private
:
nsString
mAnnouncement
;
uint16_t
mPriority
;
}
;
class
downcast_accEvent
{
public
:
explicit
downcast_accEvent
(
AccEvent
*
e
)
:
mRawPtr
(
e
)
{
}
template
<
class
Destination
>
operator
Destination
*
(
)
{
if
(
!
mRawPtr
)
return
nullptr
;
return
mRawPtr
-
>
GetEventGroups
(
)
&
(
1U
<
<
Destination
:
:
kEventGroup
)
?
static_cast
<
Destination
*
>
(
mRawPtr
)
:
nullptr
;
}
private
:
AccEvent
*
mRawPtr
;
}
;
already_AddRefed
<
nsIAccessibleEvent
>
MakeXPCEvent
(
AccEvent
*
aEvent
)
;
}
}
#
endif
