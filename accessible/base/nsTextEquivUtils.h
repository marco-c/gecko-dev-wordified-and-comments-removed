#
ifndef
_nsTextEquivUtils_H_
#
define
_nsTextEquivUtils_H_
#
include
"
LocalAccessible
.
h
"
#
include
"
Role
.
h
"
class
nsIContent
;
enum
ETextEquivRule
{
eNoNameRule
=
0x00
eNameFromSubtreeIfReqRule
=
0x01
eNameFromSubtreeRule
=
0x03
eNameFromValueRule
=
0x04
}
;
class
nsTextEquivUtils
{
public
:
typedef
mozilla
:
:
a11y
:
:
LocalAccessible
LocalAccessible
;
static
inline
bool
HasNameRule
(
LocalAccessible
*
aAccessible
ETextEquivRule
aRule
)
{
return
(
GetRoleRule
(
aAccessible
-
>
Role
(
)
)
&
aRule
)
=
=
aRule
;
}
static
nsresult
GetNameFromSubtree
(
const
LocalAccessible
*
aAccessible
nsAString
&
aName
)
;
static
void
GetTextEquivFromSubtree
(
const
LocalAccessible
*
aAccessible
nsString
&
aTextEquiv
)
{
aTextEquiv
.
Truncate
(
)
;
AppendFromAccessibleChildren
(
aAccessible
&
aTextEquiv
)
;
aTextEquiv
.
CompressWhitespace
(
)
;
}
static
nsresult
GetTextEquivFromIDRefs
(
const
LocalAccessible
*
aAccessible
nsAtom
*
aIDRefsAttr
nsAString
&
aTextEquiv
)
;
static
nsresult
AppendTextEquivFromContent
(
const
LocalAccessible
*
aInitiatorAcc
nsIContent
*
aContent
nsAString
*
aString
)
;
static
nsresult
AppendTextEquivFromTextContent
(
nsIContent
*
aContent
nsAString
*
aString
)
;
static
nsresult
AppendFromDOMChildren
(
nsIContent
*
aContent
nsAString
*
aString
)
;
private
:
static
nsresult
AppendFromAccessibleChildren
(
const
LocalAccessible
*
aAccessible
nsAString
*
aString
)
;
static
nsresult
AppendFromAccessible
(
LocalAccessible
*
aAccessible
nsAString
*
aString
)
;
static
nsresult
AppendFromValue
(
LocalAccessible
*
aAccessible
nsAString
*
aString
)
;
static
nsresult
AppendFromDOMNode
(
nsIContent
*
aContent
nsAString
*
aString
)
;
static
bool
AppendString
(
nsAString
*
aString
const
nsAString
&
aTextEquivalent
)
;
static
uint32_t
GetRoleRule
(
mozilla
:
:
a11y
:
:
roles
:
:
Role
aRole
)
;
static
bool
ShouldIncludeInSubtreeCalculation
(
LocalAccessible
*
aAccessible
)
;
}
;
#
endif
