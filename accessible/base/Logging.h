#
ifndef
mozilla_a11y_logs_h__
#
define
mozilla_a11y_logs_h__
#
include
"
nscore
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsIDocument
;
class
nsINode
;
class
nsIRequest
;
class
nsISelection
;
class
nsISupports
;
class
nsIWebProgress
;
namespace
mozilla
{
namespace
a11y
{
class
AccEvent
;
class
Accessible
;
class
DocAccessible
;
class
OuterDocAccessible
;
namespace
logging
{
enum
EModules
{
eDocLoad
=
1
<
<
0
eDocCreate
=
1
<
<
1
eDocDestroy
=
1
<
<
2
eDocLifeCycle
=
eDocLoad
|
eDocCreate
|
eDocDestroy
eEvents
=
1
<
<
3
eEventTree
=
1
<
<
4
ePlatforms
=
1
<
<
5
eText
=
1
<
<
6
eTree
=
1
<
<
7
eDOMEvents
=
1
<
<
8
eFocus
=
1
<
<
9
eSelection
=
1
<
<
10
eNotifications
=
eDOMEvents
|
eSelection
|
eFocus
eStack
=
1
<
<
11
eVerbose
=
1
<
<
12
}
;
bool
IsEnabled
(
uint32_t
aModules
)
;
bool
IsEnabledAll
(
uint32_t
aModules
)
;
bool
IsEnabled
(
const
nsAString
&
aModules
)
;
void
DocLoad
(
const
char
*
aMsg
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aStateFlags
)
;
void
DocLoad
(
const
char
*
aMsg
nsIDocument
*
aDocumentNode
)
;
void
DocCompleteLoad
(
DocAccessible
*
aDocument
bool
aIsLoadEventTarget
)
;
void
DocLoadEventFired
(
AccEvent
*
aEvent
)
;
void
DocLoadEventHandled
(
AccEvent
*
aEvent
)
;
void
DocCreate
(
const
char
*
aMsg
nsIDocument
*
aDocumentNode
DocAccessible
*
aDocument
=
nullptr
)
;
void
DocDestroy
(
const
char
*
aMsg
nsIDocument
*
aDocumentNode
DocAccessible
*
aDocument
=
nullptr
)
;
void
OuterDocDestroy
(
OuterDocAccessible
*
OuterDoc
)
;
void
FocusNotificationTarget
(
const
char
*
aMsg
const
char
*
aTargetDescr
Accessible
*
aTarget
)
;
void
FocusNotificationTarget
(
const
char
*
aMsg
const
char
*
aTargetDescr
nsINode
*
aTargetNode
)
;
void
FocusNotificationTarget
(
const
char
*
aMsg
const
char
*
aTargetDescr
nsISupports
*
aTargetThing
)
;
void
ActiveItemChangeCausedBy
(
const
char
*
aMsg
Accessible
*
aTarget
)
;
void
ActiveWidget
(
Accessible
*
aWidget
)
;
void
FocusDispatched
(
Accessible
*
aTarget
)
;
void
SelChange
(
nsISelection
*
aSelection
DocAccessible
*
aDocument
int16_t
aReason
)
;
void
TreeInfo
(
const
char
*
aMsg
uint32_t
aExtraFlags
.
.
.
)
;
void
TreeInfo
(
const
char
*
aMsg
uint32_t
aExtraFlags
const
char
*
aMsg1
Accessible
*
aAcc
const
char
*
aMsg2
nsINode
*
aNode
)
;
void
TreeInfo
(
const
char
*
aMsg
uint32_t
aExtraFlags
Accessible
*
aParent
)
;
typedef
const
char
*
(
*
GetTreePrefix
)
(
void
*
aData
Accessible
*
)
;
void
Tree
(
const
char
*
aTitle
const
char
*
aMsgText
Accessible
*
aRoot
GetTreePrefix
aPrefixFunc
=
nullptr
void
*
aGetTreePrefixData
=
nullptr
)
;
void
DOMTree
(
const
char
*
aTitle
const
char
*
aMsgText
DocAccessible
*
aDoc
)
;
void
MsgBegin
(
const
char
*
aTitle
const
char
*
aMsgText
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
void
MsgEnd
(
)
;
void
SubMsgBegin
(
)
;
void
SubMsgEnd
(
)
;
void
MsgEntry
(
const
char
*
aEntryText
.
.
.
)
MOZ_FORMAT_PRINTF
(
1
2
)
;
void
Text
(
const
char
*
aText
)
;
void
Address
(
const
char
*
aDescr
Accessible
*
aAcc
)
;
void
Node
(
const
char
*
aDescr
nsINode
*
aNode
)
;
void
Document
(
DocAccessible
*
aDocument
)
;
void
AccessibleInfo
(
const
char
*
aDescr
Accessible
*
aAccessible
)
;
void
AccessibleNNode
(
const
char
*
aDescr
Accessible
*
aAccessible
)
;
void
AccessibleNNode
(
const
char
*
aDescr
nsINode
*
aNode
)
;
void
DOMEvent
(
const
char
*
aDescr
nsINode
*
aOrigTarget
const
nsAString
&
aEventType
)
;
void
Stack
(
)
;
void
Enable
(
const
nsAFlatCString
&
aModules
)
;
void
CheckEnv
(
)
;
}
}
}
#
endif
