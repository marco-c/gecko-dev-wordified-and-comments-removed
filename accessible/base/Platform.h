#
ifndef
mozilla_a11y_Platform_h
#
define
mozilla_a11y_Platform_h
#
include
<
stdint
.
h
>
#
include
"
nsStringFwd
.
h
"
#
if
defined
(
ANDROID
)
#
include
"
nsTArray
.
h
"
#
include
"
nsRect
.
h
"
#
endif
namespace
mozilla
{
namespace
a11y
{
class
ProxyAccessible
;
enum
EPlatformDisabledState
{
ePlatformIsForceEnabled
=
-
1
ePlatformIsEnabled
=
0
ePlatformIsDisabled
=
1
}
;
EPlatformDisabledState
PlatformDisabledState
(
)
;
#
ifdef
MOZ_ACCESSIBILITY_ATK
void
PreInit
(
)
;
#
endif
#
if
defined
(
MOZ_ACCESSIBILITY_ATK
)
|
|
defined
(
XP_MACOSX
)
bool
ShouldA11yBeEnabled
(
)
;
#
endif
#
if
defined
(
XP_WIN
)
bool
IsHandlerRegistered
(
)
;
void
SetInstantiator
(
const
uint32_t
aInstantiatorPid
)
;
bool
GetInstantiator
(
nsIFile
*
*
aOutInstantiator
)
;
#
endif
void
PlatformInit
(
)
;
void
PlatformShutdown
(
)
;
void
ProxyCreated
(
ProxyAccessible
*
aProxy
uint32_t
aInterfaces
)
;
void
ProxyDestroyed
(
ProxyAccessible
*
)
;
void
ProxyEvent
(
ProxyAccessible
*
aTarget
uint32_t
aEventType
)
;
void
ProxyStateChangeEvent
(
ProxyAccessible
*
aTarget
uint64_t
aState
bool
aEnabled
)
;
#
if
defined
(
XP_WIN
)
void
ProxyFocusEvent
(
ProxyAccessible
*
aTarget
const
LayoutDeviceIntRect
&
aCaretRect
)
;
void
ProxyCaretMoveEvent
(
ProxyAccessible
*
aTarget
const
LayoutDeviceIntRect
&
aCaretRect
)
;
#
else
void
ProxyCaretMoveEvent
(
ProxyAccessible
*
aTarget
int32_t
aOffset
bool
aIsSelectionCollapsed
)
;
#
endif
void
ProxyTextChangeEvent
(
ProxyAccessible
*
aTarget
const
nsString
&
aStr
int32_t
aStart
uint32_t
aLen
bool
aIsInsert
bool
aFromUser
)
;
void
ProxyShowHideEvent
(
ProxyAccessible
*
aTarget
ProxyAccessible
*
aParent
bool
aInsert
bool
aFromUser
)
;
void
ProxySelectionEvent
(
ProxyAccessible
*
aTarget
ProxyAccessible
*
aWidget
uint32_t
aType
)
;
#
if
defined
(
ANDROID
)
MOZ_CAN_RUN_SCRIPT
void
ProxyVirtualCursorChangeEvent
(
ProxyAccessible
*
aTarget
ProxyAccessible
*
aOldPosition
int32_t
aOldStartOffset
int32_t
aOldEndOffset
ProxyAccessible
*
aNewPosition
int32_t
aNewStartOffset
int32_t
aNewEndOffset
int16_t
aReason
int16_t
aBoundaryType
bool
aFromUser
)
;
void
ProxyScrollingEvent
(
ProxyAccessible
*
aTarget
uint32_t
aEventType
uint32_t
aScrollX
uint32_t
aScrollY
uint32_t
aMaxScrollX
uint32_t
aMaxScrollY
)
;
void
ProxyAnnouncementEvent
(
ProxyAccessible
*
aTarget
const
nsString
&
aAnnouncement
uint16_t
aPriority
)
;
class
BatchData
;
void
ProxyBatch
(
ProxyAccessible
*
aDocument
const
uint64_t
aBatchType
const
nsTArray
<
ProxyAccessible
*
>
&
aAccessibles
const
nsTArray
<
BatchData
>
&
aData
)
;
bool
LocalizeString
(
const
char
*
aToken
nsAString
&
aLocalized
const
nsTArray
<
nsString
>
&
aFormatString
=
nsTArray
<
nsString
>
(
)
)
;
#
endif
#
ifdef
MOZ_WIDGET_COCOA
class
TextRangeData
;
void
ProxyTextSelectionChangeEvent
(
ProxyAccessible
*
aTarget
const
nsTArray
<
TextRangeData
>
&
aSelection
)
;
#
endif
}
}
#
endif
