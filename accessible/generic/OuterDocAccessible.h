#
ifndef
MOZILLA_A11Y_OUTERDOCACCESSIBLE_H_
#
define
MOZILLA_A11Y_OUTERDOCACCESSIBLE_H_
#
include
"
AccessibleWrap
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BrowserBridgeChild
;
}
namespace
a11y
{
class
DocAccessibleParent
;
class
OuterDocAccessible
final
:
public
AccessibleWrap
{
public
:
OuterDocAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
OuterDocAccessible
AccessibleWrap
)
DocAccessibleParent
*
RemoteChildDoc
(
)
const
;
#
if
defined
(
XP_WIN
)
LocalAccessible
*
RemoteChildDocAccessible
(
)
const
;
#
endif
void
SendEmbedderAccessible
(
dom
:
:
BrowserBridgeChild
*
aBridge
)
;
virtual
void
Shutdown
(
)
override
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
LocalAccessible
*
LocalChildAtPoint
(
int32_t
aX
int32_t
aY
EWhichChildAtPoint
aWhichChild
)
override
;
virtual
bool
InsertChildAt
(
uint32_t
aIdx
LocalAccessible
*
aChild
)
override
;
virtual
bool
RemoveChild
(
LocalAccessible
*
aAccessible
)
override
;
virtual
bool
IsAcceptableChild
(
nsIContent
*
aEl
)
const
override
;
#
if
defined
(
XP_WIN
)
virtual
uint32_t
ChildCount
(
)
const
override
;
virtual
LocalAccessible
*
LocalChildAt
(
uint32_t
aIndex
)
const
override
;
#
endif
virtual
Accessible
*
ChildAt
(
uint32_t
aIndex
)
const
override
;
protected
:
virtual
~
OuterDocAccessible
(
)
override
;
}
;
inline
OuterDocAccessible
*
LocalAccessible
:
:
AsOuterDoc
(
)
{
return
IsOuterDoc
(
)
?
static_cast
<
OuterDocAccessible
*
>
(
this
)
:
nullptr
;
}
}
}
#
endif
