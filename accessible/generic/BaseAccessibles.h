#
ifndef
mozilla_a11y_BaseAccessibles_h__
#
define
mozilla_a11y_BaseAccessibles_h__
#
include
"
AccessibleWrap
.
h
"
#
include
"
HyperTextAccessibleWrap
.
h
"
class
nsIContent
;
namespace
mozilla
{
namespace
a11y
{
class
LeafAccessible
:
public
AccessibleWrap
{
public
:
LeafAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
LeafAccessible
AccessibleWrap
)
virtual
LocalAccessible
*
LocalChildAtPoint
(
int32_t
aX
int32_t
aY
EWhichChildAtPoint
aWhichChild
)
override
;
bool
InsertChildAt
(
uint32_t
aIndex
LocalAccessible
*
aChild
)
final
;
bool
RemoveChild
(
LocalAccessible
*
aChild
)
final
;
virtual
bool
IsAcceptableChild
(
nsIContent
*
aEl
)
const
override
;
protected
:
virtual
~
LeafAccessible
(
)
{
}
}
;
class
LinkableAccessible
:
public
AccessibleWrap
{
public
:
LinkableAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
AccessibleWrap
(
aContent
aDoc
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
LinkableAccessible
AccessibleWrap
)
virtual
void
Value
(
nsString
&
aValue
)
const
override
;
virtual
uint64_t
NativeLinkState
(
)
const
override
;
virtual
void
TakeFocus
(
)
const
override
;
virtual
KeyBinding
AccessKey
(
)
const
override
;
const
LocalAccessible
*
ActionWalk
(
bool
*
aIsLink
=
nullptr
bool
*
aIsOnclick
=
nullptr
)
const
;
virtual
already_AddRefed
<
nsIURI
>
AnchorURIAt
(
uint32_t
aAnchorIndex
)
const
override
;
protected
:
virtual
~
LinkableAccessible
(
)
{
}
}
;
template
<
a11y
:
:
role
R
>
class
EnumRoleAccessible
:
public
AccessibleWrap
{
public
:
EnumRoleAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
AccessibleWrap
(
aContent
aDoc
)
{
}
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aPtr
)
override
{
return
LocalAccessible
:
:
QueryInterface
(
aIID
aPtr
)
;
}
virtual
a11y
:
:
role
NativeRole
(
)
const
override
{
return
R
;
}
protected
:
virtual
~
EnumRoleAccessible
(
)
{
}
}
;
class
DummyAccessible
:
public
AccessibleWrap
{
public
:
explicit
DummyAccessible
(
DocAccessible
*
aDocument
=
nullptr
)
:
AccessibleWrap
(
nullptr
aDocument
)
{
mStateFlags
|
=
eSharedNode
;
}
uint64_t
NativeState
(
)
const
final
;
uint64_t
NativeInteractiveState
(
)
const
final
;
uint64_t
NativeLinkState
(
)
const
final
;
bool
NativelyUnavailable
(
)
const
final
;
void
ApplyARIAState
(
uint64_t
*
aState
)
const
final
;
protected
:
virtual
~
DummyAccessible
(
)
{
}
}
;
}
}
#
endif
