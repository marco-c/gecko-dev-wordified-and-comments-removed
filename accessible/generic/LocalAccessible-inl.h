#
ifndef
mozilla_a11y_Accessible_inl_h_
#
define
mozilla_a11y_Accessible_inl_h_
#
include
"
DocAccessible
.
h
"
#
include
"
ARIAMap
.
h
"
#
include
"
nsCoreUtils
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
ifdef
A11Y_LOG
#
include
"
Logging
.
h
"
#
endif
namespace
mozilla
{
namespace
a11y
{
inline
mozilla
:
:
a11y
:
:
role
LocalAccessible
:
:
ARIARole
(
)
{
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
if
(
!
roleMapEntry
|
|
roleMapEntry
-
>
roleRule
!
=
kUseMapRole
)
{
return
mozilla
:
:
a11y
:
:
roles
:
:
NOTHING
;
}
return
ARIATransformRole
(
roleMapEntry
-
>
role
)
;
}
inline
void
LocalAccessible
:
:
SetRoleMapEntry
(
const
nsRoleMapEntry
*
aRoleMapEntry
)
{
mRoleMapEntryIndex
=
aria
:
:
GetIndexFromRoleMap
(
aRoleMapEntry
)
;
}
inline
bool
LocalAccessible
:
:
NativeHasNumericValue
(
)
const
{
return
mGenericTypes
&
eNumericValue
;
}
inline
bool
LocalAccessible
:
:
ARIAHasNumericValue
(
)
const
{
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
if
(
!
roleMapEntry
|
|
roleMapEntry
-
>
valueRule
=
=
eNoValue
)
return
false
;
if
(
roleMapEntry
-
>
valueRule
=
=
eHasValueMinMaxIfFocusable
)
{
return
InteractiveState
(
)
&
states
:
:
FOCUSABLE
;
}
return
true
;
}
inline
bool
LocalAccessible
:
:
HasNumericValue
(
)
const
{
return
NativeHasNumericValue
(
)
|
|
ARIAHasNumericValue
(
)
;
}
inline
bool
LocalAccessible
:
:
IsDefunct
(
)
const
{
MOZ_ASSERT
(
mStateFlags
&
eIsDefunct
|
|
IsApplication
(
)
|
|
IsDoc
(
)
|
|
mStateFlags
&
eSharedNode
|
|
mContent
"
No
content
"
)
;
return
mStateFlags
&
eIsDefunct
;
}
inline
void
LocalAccessible
:
:
ScrollTo
(
uint32_t
aHow
)
const
{
if
(
mContent
)
{
RefPtr
<
PresShell
>
presShell
=
mDoc
-
>
PresShellPtr
(
)
;
nsCOMPtr
<
nsIContent
>
content
=
mContent
;
nsCoreUtils
:
:
ScrollTo
(
presShell
content
aHow
)
;
}
}
inline
bool
LocalAccessible
:
:
InsertAfter
(
LocalAccessible
*
aNewChild
LocalAccessible
*
aRefChild
)
{
MOZ_ASSERT
(
aNewChild
"
No
new
child
to
insert
"
)
;
if
(
aRefChild
&
&
aRefChild
-
>
LocalParent
(
)
!
=
this
)
{
#
ifdef
A11Y_LOG
logging
:
:
TreeInfo
(
"
broken
accessible
tree
"
0
"
parent
"
this
"
prev
sibling
parent
"
aRefChild
-
>
LocalParent
(
)
"
child
"
aNewChild
nullptr
)
;
if
(
logging
:
:
IsEnabled
(
logging
:
:
eVerbose
)
)
{
logging
:
:
Tree
(
"
TREE
"
"
Document
tree
"
mDoc
)
;
logging
:
:
DOMTree
(
"
TREE
"
"
DOM
document
tree
"
mDoc
)
;
}
#
endif
MOZ_ASSERT_UNREACHABLE
(
"
Broken
accessible
tree
"
)
;
mDoc
-
>
UnbindFromDocument
(
aNewChild
)
;
return
false
;
}
return
InsertChildAt
(
aRefChild
?
aRefChild
-
>
IndexInParent
(
)
+
1
:
0
aNewChild
)
;
}
}
}
#
endif
