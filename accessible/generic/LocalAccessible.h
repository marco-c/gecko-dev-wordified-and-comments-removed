#
ifndef
_LocalAccessible_H_
#
define
_LocalAccessible_H_
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
include
"
mozilla
/
a11y
/
AccTypes
.
h
"
#
include
"
mozilla
/
a11y
/
RelationType
.
h
"
#
include
"
mozilla
/
a11y
/
States
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsRect
.
h
"
struct
nsRoleMapEntry
;
class
nsIFrame
;
class
nsAttrValue
;
namespace
mozilla
:
:
dom
{
class
Element
;
}
namespace
mozilla
{
namespace
a11y
{
class
LocalAccessible
;
class
AccAttributes
;
class
AccEvent
;
class
AccGroupInfo
;
class
ApplicationAccessible
;
class
CacheData
;
class
DocAccessible
;
class
EmbeddedObjCollector
;
class
EventTree
;
class
HTMLImageMapAccessible
;
class
HTMLLIAccessible
;
class
HTMLLinkAccessible
;
class
HyperTextAccessible
;
class
HyperTextAccessibleBase
;
class
ImageAccessible
;
class
KeyBinding
;
class
OuterDocAccessible
;
class
RemoteAccessible
;
class
Relation
;
class
RootAccessible
;
class
TableAccessibleBase
;
class
TableCellAccessibleBase
;
class
TextLeafAccessible
;
class
XULLabelAccessible
;
class
XULTreeAccessible
;
enum
class
CacheUpdateType
;
#
ifdef
A11Y_LOG
namespace
logging
{
typedef
const
char
*
(
*
GetTreePrefix
)
(
void
*
aData
LocalAccessible
*
)
;
void
Tree
(
const
char
*
aTitle
const
char
*
aMsgText
LocalAccessible
*
aRoot
GetTreePrefix
aPrefixFunc
void
*
GetTreePrefixData
)
;
void
TreeSize
(
const
char
*
aTitle
const
char
*
aMsgText
LocalAccessible
*
aRoot
)
;
}
;
#
endif
typedef
nsRefPtrHashtable
<
nsPtrHashKey
<
const
void
>
LocalAccessible
>
AccessibleHashtable
;
#
define
NS_ACCESSIBLE_IMPL_IID
\
{
/
*
133c8bf4
-
4913
-
4355
-
bd50
-
426bd1d6e1ad
*
/
\
0x133c8bf4
0x4913
0x4355
{
\
0xbd
0x50
0x42
0x6b
0xd1
0xd6
0xe1
0xad
\
}
\
}
class
LocalAccessible
:
public
nsISupports
public
Accessible
{
public
:
LocalAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
LocalAccessible
)
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ACCESSIBLE_IMPL_IID
)
DocAccessible
*
Document
(
)
const
{
return
mDoc
;
}
a11y
:
:
RootAccessible
*
RootAccessible
(
)
const
;
virtual
nsIFrame
*
GetFrame
(
)
const
;
virtual
nsINode
*
GetNode
(
)
const
;
nsIContent
*
GetContent
(
)
const
{
return
mContent
;
}
dom
:
:
Element
*
Elm
(
)
const
;
bool
IsContent
(
)
const
{
return
GetNode
(
)
&
&
GetNode
(
)
-
>
IsContent
(
)
;
}
void
*
UniqueID
(
)
{
return
static_cast
<
void
*
>
(
this
)
;
}
virtual
uint64_t
ID
(
)
const
override
{
return
IsDoc
(
)
?
0
:
reinterpret_cast
<
uintptr_t
>
(
this
)
;
}
virtual
void
Language
(
nsAString
&
aLocale
)
override
;
virtual
void
Description
(
nsString
&
aDescription
)
const
override
;
virtual
void
Value
(
nsString
&
aValue
)
const
override
;
virtual
ENameValueFlag
Name
(
nsString
&
aName
)
const
override
;
virtual
void
ApplyARIAState
(
uint64_t
*
aState
)
const
;
virtual
mozilla
:
:
a11y
:
:
role
Role
(
)
const
override
;
mozilla
:
:
a11y
:
:
role
ARIARole
(
)
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
;
virtual
uint64_t
State
(
)
override
;
uint64_t
InteractiveState
(
)
const
{
uint64_t
state
=
NativeInteractiveState
(
)
;
ApplyARIAState
(
&
state
)
;
return
state
;
}
uint64_t
LinkState
(
)
const
{
uint64_t
state
=
NativeLinkState
(
)
;
ApplyARIAState
(
&
state
)
;
return
state
;
}
virtual
uint64_t
NativeState
(
)
const
;
virtual
uint64_t
NativeInteractiveState
(
)
const
;
virtual
uint64_t
NativeLinkState
(
)
const
;
uint64_t
VisibilityState
(
)
const
;
virtual
bool
NativelyUnavailable
(
)
const
;
virtual
already_AddRefed
<
AccAttributes
>
Attributes
(
)
override
;
virtual
LocalAccessible
*
LocalChildAtPoint
(
int32_t
aX
int32_t
aY
EWhichChildAtPoint
aWhichChild
)
;
virtual
Accessible
*
ChildAtPoint
(
int32_t
aX
int32_t
aY
EWhichChildAtPoint
aWhichChild
)
override
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
virtual
void
Shutdown
(
)
;
void
SetRoleMapEntry
(
const
nsRoleMapEntry
*
aRoleMapEntry
)
;
bool
AppendChild
(
LocalAccessible
*
aChild
)
{
return
InsertChildAt
(
mChildren
.
Length
(
)
aChild
)
;
}
virtual
bool
InsertChildAt
(
uint32_t
aIndex
LocalAccessible
*
aChild
)
;
bool
InsertAfter
(
LocalAccessible
*
aNewChild
LocalAccessible
*
aRefChild
)
;
virtual
bool
RemoveChild
(
LocalAccessible
*
aChild
)
;
virtual
void
RelocateChild
(
uint32_t
aNewIndex
LocalAccessible
*
aChild
)
;
virtual
Accessible
*
Parent
(
)
const
override
{
return
LocalParent
(
)
;
}
virtual
Accessible
*
ChildAt
(
uint32_t
aIndex
)
const
override
{
return
LocalChildAt
(
aIndex
)
;
}
virtual
Accessible
*
NextSibling
(
)
const
override
{
return
LocalNextSibling
(
)
;
}
virtual
Accessible
*
PrevSibling
(
)
const
override
{
return
LocalPrevSibling
(
)
;
}
LocalAccessible
*
LocalParent
(
)
const
{
return
mParent
;
}
virtual
LocalAccessible
*
LocalChildAt
(
uint32_t
aIndex
)
const
;
virtual
uint32_t
ChildCount
(
)
const
override
;
int32_t
GetIndexOf
(
const
LocalAccessible
*
aChild
)
const
{
return
(
aChild
-
>
mParent
!
=
this
)
?
-
1
:
aChild
-
>
IndexInParent
(
)
;
}
virtual
int32_t
IndexInParent
(
)
const
override
;
inline
LocalAccessible
*
LocalNextSibling
(
)
const
{
return
GetSiblingAtOffset
(
1
)
;
}
inline
LocalAccessible
*
LocalPrevSibling
(
)
const
{
return
GetSiblingAtOffset
(
-
1
)
;
}
inline
LocalAccessible
*
LocalFirstChild
(
)
const
{
return
LocalChildAt
(
0
)
;
}
inline
LocalAccessible
*
LocalLastChild
(
)
const
{
uint32_t
childCount
=
ChildCount
(
)
;
return
childCount
!
=
0
?
LocalChildAt
(
childCount
-
1
)
:
nullptr
;
}
virtual
uint32_t
EmbeddedChildCount
(
)
override
;
virtual
LocalAccessible
*
EmbeddedChildAt
(
uint32_t
aIndex
)
override
;
virtual
int32_t
IndexOfEmbeddedChild
(
Accessible
*
aChild
)
override
;
uint32_t
ContentChildCount
(
)
const
{
return
mChildren
.
Length
(
)
;
}
LocalAccessible
*
ContentChildAt
(
uint32_t
aIndex
)
const
{
return
mChildren
.
ElementAt
(
aIndex
)
;
}
bool
IsBoundToParent
(
)
const
{
return
!
!
mParent
;
}
virtual
nsresult
HandleAccEvent
(
AccEvent
*
aAccEvent
)
;
virtual
bool
IsAcceptableChild
(
nsIContent
*
aEl
)
const
{
return
aEl
&
&
!
aEl
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
option
nsGkAtoms
:
:
optgroup
)
;
}
virtual
void
AppendTextTo
(
nsAString
&
aText
uint32_t
aStartOffset
=
0
uint32_t
aLength
=
UINT32_MAX
)
override
;
virtual
nsRect
BoundsInAppUnits
(
)
const
override
;
virtual
LayoutDeviceIntRect
Bounds
(
)
const
override
;
virtual
nsRect
RelativeBounds
(
nsIFrame
*
*
aRelativeFrame
)
const
;
virtual
nsRect
ParentRelativeBounds
(
)
;
virtual
void
SetSelected
(
bool
aSelect
)
override
;
virtual
void
TakeSelection
(
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
TakeFocus
(
)
const
override
;
MOZ_CAN_RUN_SCRIPT
virtual
void
ScrollTo
(
uint32_t
aHow
)
const
override
;
void
ScrollToPoint
(
uint32_t
aCoordinateType
int32_t
aX
int32_t
aY
)
;
virtual
void
GetNativeInterface
(
void
*
*
aNativeAccessible
)
;
virtual
Maybe
<
int32_t
>
GetIntARIAAttr
(
nsAtom
*
aAttrName
)
const
override
;
inline
bool
IsAbbreviation
(
)
const
{
return
mContent
&
&
mContent
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
abbr
nsGkAtoms
:
:
acronym
)
;
}
ApplicationAccessible
*
AsApplication
(
)
;
DocAccessible
*
AsDoc
(
)
;
HyperTextAccessible
*
AsHyperText
(
)
;
virtual
HyperTextAccessibleBase
*
AsHyperTextBase
(
)
override
;
HTMLLIAccessible
*
AsHTMLListItem
(
)
;
HTMLLinkAccessible
*
AsHTMLLink
(
)
;
ImageAccessible
*
AsImage
(
)
;
HTMLImageMapAccessible
*
AsImageMap
(
)
;
OuterDocAccessible
*
AsOuterDoc
(
)
;
a11y
:
:
RootAccessible
*
AsRoot
(
)
;
virtual
TableAccessibleBase
*
AsTableBase
(
)
override
;
virtual
TableCellAccessibleBase
*
AsTableCellBase
(
)
override
;
TextLeafAccessible
*
AsTextLeaf
(
)
;
XULLabelAccessible
*
AsXULLabel
(
)
;
XULTreeAccessible
*
AsXULTree
(
)
;
virtual
bool
HasPrimaryAction
(
)
const
override
;
virtual
uint8_t
ActionCount
(
)
const
override
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
override
;
virtual
bool
DoAction
(
uint8_t
aIndex
)
const
override
;
virtual
KeyBinding
AccessKey
(
)
const
override
;
virtual
KeyBinding
KeyboardShortcut
(
)
const
;
virtual
bool
IsLink
(
)
const
override
;
virtual
void
SelectedItems
(
nsTArray
<
Accessible
*
>
*
aItems
)
override
;
virtual
uint32_t
SelectedItemCount
(
)
override
;
virtual
Accessible
*
GetSelectedItem
(
uint32_t
aIndex
)
override
;
virtual
bool
IsItemSelected
(
uint32_t
aIndex
)
override
;
virtual
bool
AddItemToSelection
(
uint32_t
aIndex
)
override
;
virtual
bool
RemoveItemFromSelection
(
uint32_t
aIndex
)
override
;
virtual
bool
SelectAll
(
)
override
;
virtual
bool
UnselectAll
(
)
override
;
virtual
double
MaxValue
(
)
const
override
;
virtual
double
MinValue
(
)
const
override
;
virtual
double
CurValue
(
)
const
override
;
virtual
double
Step
(
)
const
override
;
virtual
bool
SetCurValue
(
double
aValue
)
override
;
virtual
bool
IsWidget
(
)
const
;
virtual
bool
IsActiveWidget
(
)
const
;
virtual
bool
AreItemsOperable
(
)
const
;
virtual
LocalAccessible
*
CurrentItem
(
)
const
;
virtual
void
SetCurrentItem
(
const
LocalAccessible
*
aItem
)
;
virtual
LocalAccessible
*
ContainerWidget
(
)
const
;
bool
IsActiveDescendant
(
LocalAccessible
*
*
aWidget
=
nullptr
)
const
;
bool
IsDefunct
(
)
const
;
bool
IsInDocument
(
)
const
{
return
!
(
mStateFlags
&
eIsNotInDocument
)
;
}
bool
IsNodeMapEntry
(
)
const
{
return
HasOwnContent
(
)
&
&
!
(
mStateFlags
&
eNotNodeMapEntry
)
;
}
bool
HasOwnContent
(
)
const
{
return
mContent
&
&
!
(
mStateFlags
&
eSharedNode
)
;
}
bool
NativeHasNumericValue
(
)
const
;
bool
ARIAHasNumericValue
(
)
const
;
virtual
bool
HasNumericValue
(
)
const
override
;
bool
NeedsDOMUIEvent
(
)
const
{
return
!
(
mStateFlags
&
eIgnoreDOMUIEvent
)
;
}
bool
IsRelocated
(
)
const
{
return
mStateFlags
&
eRelocated
;
}
void
SetRelocated
(
bool
aRelocated
)
{
if
(
aRelocated
)
{
mStateFlags
|
=
eRelocated
;
}
else
{
mStateFlags
&
=
~
eRelocated
;
}
}
bool
KidsFromDOM
(
)
const
{
return
!
(
mStateFlags
&
eNoKidsFromDOM
)
;
}
bool
HasNameDependent
(
)
const
{
return
mContextFlags
&
eHasNameDependent
;
}
bool
HasDescriptionDependent
(
)
const
{
return
mContextFlags
&
eHasDescriptionDependent
;
}
bool
IsInsideAlert
(
)
const
{
return
mContextFlags
&
eInsideAlert
;
}
bool
ReorderEventTarget
(
)
const
{
return
mReorderEventTarget
;
}
bool
ShowEventTarget
(
)
const
{
return
mShowEventTarget
;
}
bool
HideEventTarget
(
)
const
{
return
mHideEventTarget
;
}
void
SetReorderEventTarget
(
bool
aTarget
)
{
mReorderEventTarget
=
aTarget
;
}
void
SetShowEventTarget
(
bool
aTarget
)
{
mShowEventTarget
=
aTarget
;
}
void
SetHideEventTarget
(
bool
aTarget
)
{
mHideEventTarget
=
aTarget
;
}
void
Announce
(
const
nsAString
&
aAnnouncement
uint16_t
aPriority
)
;
virtual
bool
IsRemote
(
)
const
override
{
return
false
;
}
already_AddRefed
<
AccAttributes
>
BundleFieldsForCache
(
uint64_t
aCacheDomain
CacheUpdateType
aUpdateType
)
;
void
SendCache
(
uint64_t
aCacheDomain
CacheUpdateType
aUpdate
)
;
void
MaybeQueueCacheUpdateForStyleChanges
(
)
;
virtual
nsAtom
*
TagName
(
)
const
override
;
virtual
already_AddRefed
<
nsAtom
>
InputType
(
)
const
override
;
virtual
already_AddRefed
<
nsAtom
>
DisplayStyle
(
)
const
override
;
virtual
float
Opacity
(
)
const
override
;
virtual
void
DOMNodeID
(
nsString
&
aID
)
const
override
;
virtual
void
LiveRegionAttributes
(
nsAString
*
aLive
nsAString
*
aRelevant
Maybe
<
bool
>
*
aAtomic
nsAString
*
aBusy
)
const
override
;
virtual
Maybe
<
bool
>
ARIASelected
(
)
const
override
;
protected
:
virtual
~
LocalAccessible
(
)
;
virtual
mozilla
:
:
a11y
:
:
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
;
void
NativeDescription
(
nsString
&
aDescription
)
const
;
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
;
virtual
bool
AttributeChangesState
(
nsAtom
*
aAttribute
)
;
virtual
void
DOMAttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
uint64_t
aOldState
)
;
void
LastRelease
(
)
;
void
BindToParent
(
LocalAccessible
*
aParent
uint32_t
aIndexInParent
)
;
void
UnbindFromParent
(
)
;
virtual
LocalAccessible
*
GetSiblingAtOffset
(
int32_t
aOffset
nsresult
*
aError
=
nullptr
)
const
;
void
ModifySubtreeContextFlags
(
uint32_t
aContextFlags
bool
aAdd
)
;
enum
StateFlags
{
eIsDefunct
=
1
<
<
0
eIsNotInDocument
=
1
<
<
1
eSharedNode
=
1
<
<
2
eNotNodeMapEntry
=
1
<
<
3
eGroupInfoDirty
=
1
<
<
4
eKidsMutating
=
1
<
<
5
eIgnoreDOMUIEvent
=
1
<
<
6
eRelocated
=
1
<
<
7
eNoKidsFromDOM
=
1
<
<
8
eHasTextKids
=
1
<
<
9
eOldFrameHasValidTransformStyle
=
1
<
<
10
eLastStateFlag
=
eOldFrameHasValidTransformStyle
}
;
enum
ContextFlags
{
eHasNameDependent
=
1
<
<
0
eInsideAlert
=
1
<
<
1
eHasDescriptionDependent
=
1
<
<
2
eLastContextFlag
=
eHasDescriptionDependent
}
;
protected
:
mozilla
:
:
a11y
:
:
role
ARIATransformRole
(
mozilla
:
:
a11y
:
:
role
aRole
)
const
;
void
ARIAName
(
nsString
&
aName
)
const
;
void
ARIADescription
(
nsString
&
aDescription
)
const
;
static
void
NameFromAssociatedXULLabel
(
DocAccessible
*
aDocument
nsIContent
*
aElm
nsString
&
aName
)
;
static
void
XULElmName
(
DocAccessible
*
aDocument
nsIContent
*
aElm
nsString
&
aName
)
;
static
nsresult
GetFullKeyName
(
const
nsAString
&
aModifierName
const
nsAString
&
aKeyName
nsAString
&
aStringOut
)
;
void
DoCommand
(
nsIContent
*
aContent
=
nullptr
uint32_t
aActionIndex
=
0
)
const
;
MOZ_CAN_RUN_SCRIPT
virtual
void
DispatchClickEvent
(
nsIContent
*
aContent
uint32_t
aActionIndex
)
const
;
nsIContent
*
GetAtomicRegion
(
)
const
;
double
AttrNumericValue
(
nsAtom
*
aARIAAttr
)
const
;
uint32_t
GetActionRule
(
)
const
;
virtual
AccGroupInfo
*
GetGroupInfo
(
)
const
override
;
virtual
AccGroupInfo
*
GetOrCreateGroupInfo
(
)
override
;
virtual
void
ARIAGroupPosition
(
int32_t
*
aLevel
int32_t
*
aSetSize
int32_t
*
aPosInSet
)
const
override
;
nsCOMPtr
<
nsIContent
>
mContent
;
RefPtr
<
DocAccessible
>
mDoc
;
LocalAccessible
*
mParent
;
nsTArray
<
LocalAccessible
*
>
mChildren
;
int32_t
mIndexInParent
;
Maybe
<
nsRect
>
mBounds
;
int32_t
mFirstLineStart
;
RefPtr
<
const
ComputedStyle
>
mOldComputedStyle
;
static
const
uint8_t
kStateFlagsBits
=
11
;
static
const
uint8_t
kContextFlagsBits
=
3
;
mutable
uint32_t
mStateFlags
:
kStateFlagsBits
;
uint32_t
mContextFlags
:
kContextFlagsBits
;
uint32_t
mReorderEventTarget
:
1
;
uint32_t
mShowEventTarget
:
1
;
uint32_t
mHideEventTarget
:
1
;
void
StaticAsserts
(
)
const
;
#
ifdef
A11Y_LOG
friend
void
logging
:
:
Tree
(
const
char
*
aTitle
const
char
*
aMsgText
LocalAccessible
*
aRoot
logging
:
:
GetTreePrefix
aPrefixFunc
void
*
aGetTreePrefixData
)
;
friend
void
logging
:
:
TreeSize
(
const
char
*
aTitle
const
char
*
aMsgText
LocalAccessible
*
aRoot
)
;
#
endif
friend
class
DocAccessible
;
friend
class
xpcAccessible
;
friend
class
TreeMutation
;
UniquePtr
<
mozilla
:
:
a11y
:
:
EmbeddedObjCollector
>
mEmbeddedObjCollector
;
int32_t
mIndexOfEmbeddedChild
;
friend
class
EmbeddedObjCollector
;
mutable
AccGroupInfo
*
mGroupInfo
;
friend
class
AccGroupInfo
;
private
:
LocalAccessible
(
)
=
delete
;
LocalAccessible
(
const
LocalAccessible
&
)
=
delete
;
LocalAccessible
&
operator
=
(
const
LocalAccessible
&
)
=
delete
;
nsIFrame
*
FindNearestAccessibleAncestorFrame
(
)
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
LocalAccessible
NS_ACCESSIBLE_IMPL_IID
)
inline
LocalAccessible
*
Accessible
:
:
AsLocal
(
)
{
return
IsLocal
(
)
?
static_cast
<
LocalAccessible
*
>
(
this
)
:
nullptr
;
}
}
}
#
endif
