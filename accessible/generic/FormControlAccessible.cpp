#
include
"
FormControlAccessible
.
h
"
#
include
"
mozilla
/
dom
/
HTMLInputElement
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
Role
.
h
"
using
namespace
mozilla
:
:
a11y
;
role
CheckboxAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
CHECKBUTTON
;
}
uint8_t
CheckboxAccessible
:
:
ActionCount
(
)
const
{
return
1
;
}
void
CheckboxAccessible
:
:
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
{
if
(
aIndex
=
=
eAction_Click
)
{
uint64_t
state
=
NativeState
(
)
;
if
(
state
&
states
:
:
CHECKED
)
{
aName
.
AssignLiteral
(
"
uncheck
"
)
;
}
else
if
(
state
&
states
:
:
MIXED
)
{
aName
.
AssignLiteral
(
"
cycle
"
)
;
}
else
{
aName
.
AssignLiteral
(
"
check
"
)
;
}
}
}
bool
CheckboxAccessible
:
:
DoAction
(
uint8_t
aIndex
)
const
{
if
(
aIndex
!
=
eAction_Click
)
{
return
false
;
}
DoCommand
(
)
;
return
true
;
}
uint64_t
CheckboxAccessible
:
:
NativeState
(
)
const
{
uint64_t
state
=
LeafAccessible
:
:
NativeState
(
)
;
state
|
=
states
:
:
CHECKABLE
;
dom
:
:
HTMLInputElement
*
input
=
dom
:
:
HTMLInputElement
:
:
FromNode
(
mContent
)
;
if
(
input
)
{
if
(
input
-
>
Indeterminate
(
)
)
{
return
state
|
states
:
:
MIXED
;
}
if
(
input
-
>
Checked
(
)
)
{
return
state
|
states
:
:
CHECKED
;
}
}
else
if
(
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
checked
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
return
state
|
states
:
:
CHECKED
;
}
return
state
;
}
bool
CheckboxAccessible
:
:
IsWidget
(
)
const
{
return
true
;
}
RadioButtonAccessible
:
:
RadioButtonAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
LeafAccessible
(
aContent
aDoc
)
{
}
uint8_t
RadioButtonAccessible
:
:
ActionCount
(
)
const
{
return
1
;
}
void
RadioButtonAccessible
:
:
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
{
if
(
aIndex
=
=
eAction_Click
)
aName
.
AssignLiteral
(
"
select
"
)
;
}
bool
RadioButtonAccessible
:
:
DoAction
(
uint8_t
aIndex
)
const
{
if
(
aIndex
!
=
eAction_Click
)
return
false
;
DoCommand
(
)
;
return
true
;
}
role
RadioButtonAccessible
:
:
NativeRole
(
)
const
{
return
roles
:
:
RADIOBUTTON
;
}
bool
RadioButtonAccessible
:
:
IsWidget
(
)
const
{
return
true
;
}
