#
ifndef
TABLE_ACCESSIBLE_H
#
define
TABLE_ACCESSIBLE_H
#
include
"
LocalAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
TableAccessibleBase
.
h
"
#
include
"
mozilla
/
a11y
/
TableCellAccessibleBase
.
h
"
#
include
"
nsPointerHashKeys
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
TableAccessible
:
public
TableAccessibleBase
{
public
:
virtual
LocalAccessible
*
Caption
(
)
const
override
{
return
nullptr
;
}
virtual
LocalAccessible
*
CellAt
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
override
{
return
nullptr
;
}
virtual
int32_t
CellIndexAt
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
override
{
return
ColCount
(
)
*
aRowIdx
+
aColIdx
;
}
virtual
int32_t
ColIndexAt
(
uint32_t
aCellIdx
)
override
;
virtual
int32_t
RowIndexAt
(
uint32_t
aCellIdx
)
override
;
virtual
void
RowAndColIndicesAt
(
uint32_t
aCellIdx
int32_t
*
aRowIdx
int32_t
*
aColIdx
)
override
;
virtual
LocalAccessible
*
AsAccessible
(
)
override
=
0
;
using
HeaderCache
=
nsRefPtrHashtable
<
nsPtrHashKey
<
const
TableCellAccessibleBase
>
LocalAccessible
>
;
HeaderCache
&
GetHeaderCache
(
)
{
return
mHeaderCache
;
}
protected
:
LocalAccessible
*
RowAt
(
int32_t
aRow
)
;
LocalAccessible
*
CellInRowAt
(
LocalAccessible
*
aRow
int32_t
aColumn
)
;
private
:
HeaderCache
mHeaderCache
;
}
;
}
}
#
endif
