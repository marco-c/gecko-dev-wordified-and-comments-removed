#
include
"
ARIAGridAccessible
.
h
"
#
include
<
stdint
.
h
>
#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
AccAttributes
.
h
"
#
include
"
AccIterator
.
h
"
#
include
"
mozilla
/
a11y
/
TableAccessibleBase
.
h
"
#
include
"
mozilla
/
a11y
/
TableCellAccessibleBase
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
Role
.
h
"
#
include
"
States
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
ARIAGridCellAccessible
:
:
ARIAGridCellAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
HyperTextAccessibleWrap
(
aContent
aDoc
)
{
mGenericTypes
|
=
eTableCell
;
}
void
ARIAGridCellAccessible
:
:
ApplyARIAState
(
uint64_t
*
aState
)
const
{
HyperTextAccessibleWrap
:
:
ApplyARIAState
(
aState
)
;
if
(
*
aState
&
states
:
:
SELECTED
)
return
;
LocalAccessible
*
row
=
LocalParent
(
)
;
if
(
!
row
|
|
row
-
>
Role
(
)
!
=
roles
:
:
ROW
)
return
;
nsIContent
*
rowContent
=
row
-
>
GetContent
(
)
;
if
(
nsAccUtils
:
:
HasDefinedARIAToken
(
rowContent
nsGkAtoms
:
:
aria_selected
)
&
&
!
nsAccUtils
:
:
ARIAAttrValueIs
(
rowContent
-
>
AsElement
(
)
nsGkAtoms
:
:
aria_selected
nsGkAtoms
:
:
_false
eCaseMatters
)
)
{
*
aState
|
=
states
:
:
SELECTABLE
|
states
:
:
SELECTED
;
}
}
already_AddRefed
<
AccAttributes
>
ARIAGridCellAccessible
:
:
NativeAttributes
(
)
{
RefPtr
<
AccAttributes
>
attributes
=
HyperTextAccessibleWrap
:
:
NativeAttributes
(
)
;
if
(
!
IPCAccessibilityActive
(
)
)
{
if
(
const
TableCellAccessibleBase
*
cell
=
AsTableCellBase
(
)
)
{
TableAccessibleBase
*
table
=
cell
-
>
Table
(
)
;
const
uint32_t
row
=
cell
-
>
RowIdx
(
)
;
const
uint32_t
col
=
cell
-
>
ColIdx
(
)
;
const
int32_t
cellIdx
=
table
-
>
CellIndexAt
(
row
col
)
;
if
(
cellIdx
!
=
-
1
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
tableCellIndex
cellIdx
)
;
}
}
}
return
attributes
.
forget
(
)
;
}
