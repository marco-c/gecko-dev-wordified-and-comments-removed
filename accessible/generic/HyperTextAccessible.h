#
ifndef
mozilla_a11y_HyperTextAccessible_h__
#
define
mozilla_a11y_HyperTextAccessible_h__
#
include
"
AccessibleWrap
.
h
"
#
include
"
mozilla
/
a11y
/
HyperTextAccessibleBase
.
h
"
#
include
"
nsIAccessibleText
.
h
"
#
include
"
nsIAccessibleTypes
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsISelectionController
.
h
"
class
nsFrameSelection
;
class
nsIFrame
;
class
nsRange
;
class
nsIWidget
;
namespace
mozilla
{
class
EditorBase
;
namespace
dom
{
class
Selection
;
}
namespace
a11y
{
class
TextLeafPoint
;
class
TextRange
;
struct
DOMPoint
{
DOMPoint
(
)
:
node
(
nullptr
)
idx
(
0
)
{
}
DOMPoint
(
nsINode
*
aNode
int32_t
aIdx
)
:
node
(
aNode
)
idx
(
aIdx
)
{
}
nsINode
*
node
;
int32_t
idx
;
}
;
class
HyperTextAccessible
:
public
AccessibleWrap
public
HyperTextAccessibleBase
{
public
:
HyperTextAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HyperTextAccessible
AccessibleWrap
)
virtual
already_AddRefed
<
AccAttributes
>
NativeAttributes
(
)
override
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
void
Shutdown
(
)
override
;
virtual
bool
RemoveChild
(
LocalAccessible
*
aAccessible
)
override
;
virtual
bool
InsertChildAt
(
uint32_t
aIndex
LocalAccessible
*
aChild
)
override
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
bool
IsEditable
(
)
const
;
nsresult
ContentToRenderedOffset
(
nsIFrame
*
aFrame
int32_t
aContentOffset
uint32_t
*
aRenderedOffset
)
const
;
nsresult
RenderedToContentOffset
(
nsIFrame
*
aFrame
uint32_t
aRenderedOffset
int32_t
*
aContentOffset
)
const
;
LocalAccessible
*
LinkAt
(
uint32_t
aIndex
)
{
Accessible
*
child
=
EmbeddedChildAt
(
aIndex
)
;
return
child
?
child
-
>
AsLocal
(
)
:
nullptr
;
}
uint32_t
DOMPointToOffset
(
nsINode
*
aNode
int32_t
aNodeOffset
bool
aIsEndOffset
=
false
)
const
;
uint32_t
TransformOffset
(
LocalAccessible
*
aDescendant
uint32_t
aOffset
bool
aIsEndOffset
)
const
;
DOMPoint
OffsetToDOMPoint
(
int32_t
aOffset
)
const
;
virtual
already_AddRefed
<
AccAttributes
>
DefaultTextAttributes
(
)
override
;
using
HyperTextAccessibleBase
:
:
GetChildOffset
;
virtual
LocalAccessible
*
GetChildAtOffset
(
uint32_t
aOffset
)
const
override
{
return
LocalChildAt
(
GetChildIndexAtOffset
(
aOffset
)
)
;
}
int32_t
OffsetAtPoint
(
int32_t
aX
int32_t
aY
uint32_t
aCoordType
)
override
;
virtual
int32_t
CaretOffset
(
)
const
override
;
virtual
void
SetCaretOffset
(
int32_t
aOffset
)
override
;
virtual
int32_t
CaretLineNumber
(
)
override
;
mozilla
:
:
LayoutDeviceIntRect
GetCaretRect
(
nsIWidget
*
*
aWidget
)
;
bool
IsCaretAtEndOfLine
(
)
const
;
virtual
int32_t
SelectionCount
(
)
override
;
virtual
bool
SelectionBoundsAt
(
int32_t
aSelectionNum
int32_t
*
aStartOffset
int32_t
*
aEndOffset
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
bool
RemoveFromSelection
(
int32_t
aSelectionNum
)
override
;
void
ScrollSubstringToPoint
(
int32_t
aStartOffset
int32_t
aEndOffset
uint32_t
aCoordinateType
int32_t
aX
int32_t
aY
)
;
virtual
void
SelectionRanges
(
nsTArray
<
TextRange
>
*
aRanges
)
const
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
ReplaceText
(
const
nsAString
&
aText
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
InsertText
(
const
nsAString
&
aText
int32_t
aPosition
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
CopyText
(
int32_t
aStartPos
int32_t
aEndPos
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
CutText
(
int32_t
aStartPos
int32_t
aEndPos
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
DeleteText
(
int32_t
aStartPos
int32_t
aEndPos
)
override
;
MOZ_CAN_RUN_SCRIPT
virtual
void
PasteText
(
int32_t
aPosition
)
override
;
virtual
already_AddRefed
<
EditorBase
>
GetEditor
(
)
const
;
dom
:
:
Selection
*
DOMSelection
(
)
const
;
protected
:
virtual
~
HyperTextAccessible
(
)
{
}
virtual
ENameValueFlag
NativeName
(
nsString
&
aName
)
const
override
;
already_AddRefed
<
nsFrameSelection
>
FrameSelection
(
)
const
;
void
GetSelectionDOMRanges
(
SelectionType
aSelectionType
nsTArray
<
nsRange
*
>
*
aRanges
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
SetSelectionRange
(
int32_t
aStartPos
int32_t
aEndPos
)
;
void
SetMathMLXMLRoles
(
AccAttributes
*
aAttributes
)
;
virtual
const
Accessible
*
Acc
(
)
const
override
{
return
this
;
}
virtual
nsTArray
<
int32_t
>
&
GetCachedHyperTextOffsets
(
)
override
{
return
mOffsets
;
}
private
:
mutable
nsTArray
<
int32_t
>
mOffsets
;
}
;
inline
HyperTextAccessible
*
LocalAccessible
:
:
AsHyperText
(
)
{
return
IsHyperText
(
)
?
static_cast
<
HyperTextAccessible
*
>
(
this
)
:
nullptr
;
}
inline
HyperTextAccessibleBase
*
LocalAccessible
:
:
AsHyperTextBase
(
)
{
return
AsHyperText
(
)
;
}
}
}
#
endif
