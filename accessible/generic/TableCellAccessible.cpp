#
include
"
TableCellAccessible
.
h
"
#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
TableAccessible
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
void
TableCellAccessible
:
:
RowHeaderCells
(
nsTArray
<
Accessible
*
>
*
aCells
)
{
uint32_t
rowIdx
=
RowIdx
(
)
colIdx
=
ColIdx
(
)
;
TableAccessible
*
table
=
Table
(
)
;
if
(
!
table
)
return
;
for
(
uint32_t
curColIdx
=
colIdx
-
1
;
curColIdx
<
colIdx
;
curColIdx
-
-
)
{
LocalAccessible
*
cell
=
table
-
>
CellAt
(
rowIdx
curColIdx
)
;
if
(
!
cell
)
continue
;
TableCellAccessible
*
tableCell
=
cell
-
>
AsTableCell
(
)
;
NS_ASSERTION
(
tableCell
"
cell
should
be
a
table
cell
!
"
)
;
if
(
!
tableCell
)
continue
;
if
(
tableCell
-
>
ColIdx
(
)
=
=
curColIdx
&
&
cell
-
>
Role
(
)
=
=
roles
:
:
ROWHEADER
)
{
aCells
-
>
AppendElement
(
cell
)
;
}
}
}
LocalAccessible
*
TableCellAccessible
:
:
PrevColHeader
(
)
{
TableAccessible
*
table
=
Table
(
)
;
if
(
!
table
)
{
return
nullptr
;
}
TableAccessible
:
:
HeaderCache
&
cache
=
table
-
>
GetHeaderCache
(
)
;
bool
inCache
=
false
;
LocalAccessible
*
cachedHeader
=
cache
.
GetWeak
(
this
&
inCache
)
;
if
(
inCache
)
{
if
(
!
cachedHeader
|
|
!
cachedHeader
-
>
IsDefunct
(
)
)
{
return
cachedHeader
;
}
}
uint32_t
rowIdx
=
RowIdx
(
)
colIdx
=
ColIdx
(
)
;
for
(
uint32_t
curRowIdx
=
rowIdx
-
1
;
curRowIdx
<
rowIdx
;
curRowIdx
-
-
)
{
LocalAccessible
*
cell
=
table
-
>
CellAt
(
curRowIdx
colIdx
)
;
if
(
!
cell
)
{
continue
;
}
TableCellAccessible
*
tableCell
=
cell
-
>
AsTableCell
(
)
;
MOZ_ASSERT
(
tableCell
"
cell
should
be
a
table
cell
!
"
)
;
if
(
!
tableCell
)
{
continue
;
}
cachedHeader
=
cache
.
GetWeak
(
tableCell
&
inCache
)
;
if
(
inCache
&
&
cell
-
>
Role
(
)
!
=
roles
:
:
COLUMNHEADER
&
&
(
tableCell
-
>
ColExtent
(
)
=
=
1
|
|
tableCell
-
>
ColIdx
(
)
=
=
colIdx
)
)
{
if
(
!
cachedHeader
|
|
!
cachedHeader
-
>
IsDefunct
(
)
)
{
cache
.
InsertOrUpdate
(
this
RefPtr
<
LocalAccessible
>
(
cachedHeader
)
)
;
return
cachedHeader
;
}
}
if
(
cell
-
>
Role
(
)
!
=
roles
:
:
COLUMNHEADER
|
|
tableCell
-
>
RowIdx
(
)
!
=
curRowIdx
)
{
continue
;
}
cache
.
InsertOrUpdate
(
this
RefPtr
<
LocalAccessible
>
(
cell
)
)
;
return
cell
;
}
cache
.
InsertOrUpdate
(
this
RefPtr
<
LocalAccessible
>
(
nullptr
)
)
;
return
nullptr
;
}
void
TableCellAccessible
:
:
ColHeaderCells
(
nsTArray
<
Accessible
*
>
*
aCells
)
{
for
(
LocalAccessible
*
cell
=
PrevColHeader
(
)
;
cell
;
cell
=
cell
-
>
AsTableCell
(
)
-
>
PrevColHeader
(
)
)
{
aCells
-
>
AppendElement
(
cell
)
;
}
}
a11y
:
:
role
TableCellAccessible
:
:
GetHeaderCellRole
(
const
LocalAccessible
*
aAcc
)
const
{
if
(
!
aAcc
|
|
!
aAcc
-
>
GetContent
(
)
|
|
!
aAcc
-
>
GetContent
(
)
-
>
IsElement
(
)
)
{
return
roles
:
:
NOTHING
;
}
MOZ_ASSERT
(
aAcc
-
>
IsTableCell
(
)
)
;
static
mozilla
:
:
dom
:
:
Element
:
:
AttrValuesArray
scopeValues
[
]
=
{
nsGkAtoms
:
:
col
nsGkAtoms
:
:
colgroup
nsGkAtoms
:
:
row
nsGkAtoms
:
:
rowgroup
nullptr
}
;
int32_t
valueIdx
=
aAcc
-
>
GetContent
(
)
-
>
AsElement
(
)
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
scope
scopeValues
eCaseMatters
)
;
switch
(
valueIdx
)
{
case
0
:
case
1
:
return
roles
:
:
COLUMNHEADER
;
case
2
:
case
3
:
return
roles
:
:
ROWHEADER
;
}
TableAccessible
*
table
=
Table
(
)
;
if
(
!
table
)
{
return
roles
:
:
NOTHING
;
}
uint32_t
rowIdx
=
RowIdx
(
)
colIdx
=
ColIdx
(
)
;
LocalAccessible
*
cell
=
table
-
>
CellAt
(
rowIdx
colIdx
+
ColExtent
(
)
)
;
if
(
cell
&
&
!
nsCoreUtils
:
:
IsHTMLTableHeader
(
cell
-
>
GetContent
(
)
)
)
{
return
roles
:
:
ROWHEADER
;
}
uint32_t
rowExtent
=
RowExtent
(
)
;
cell
=
table
-
>
CellAt
(
rowIdx
+
rowExtent
colIdx
)
;
if
(
cell
&
&
!
nsCoreUtils
:
:
IsHTMLTableHeader
(
cell
-
>
GetContent
(
)
)
)
{
return
roles
:
:
COLUMNHEADER
;
}
return
rowExtent
>
1
?
roles
:
:
ROWHEADER
:
roles
:
:
COLUMNHEADER
;
}
