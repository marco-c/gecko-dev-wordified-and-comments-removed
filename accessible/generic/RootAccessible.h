#
ifndef
mozilla_a11y_RootAccessible_h__
#
define
mozilla_a11y_RootAccessible_h__
#
include
"
HyperTextAccessible
.
h
"
#
include
"
DocAccessibleWrap
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
RootAccessible
:
public
DocAccessibleWrap
public
nsIDOMEventListener
{
NS_DECL_ISUPPORTS_INHERITED
public
:
RootAccessible
(
dom
:
:
Document
*
aDocument
nsIPresShell
*
aPresShell
)
;
NS_DECL_NSIDOMEVENTLISTENER
virtual
void
Shutdown
(
)
override
;
virtual
mozilla
:
:
a11y
:
:
ENameValueFlag
Name
(
nsString
&
aName
)
const
override
;
virtual
Relation
RelationByType
(
RelationType
aType
)
const
override
;
virtual
mozilla
:
:
a11y
:
:
role
NativeRole
(
)
const
override
;
virtual
uint64_t
NativeState
(
)
const
override
;
virtual
void
DocumentActivated
(
DocAccessible
*
aDocument
)
;
ProxyAccessible
*
GetPrimaryRemoteTopLevelContentDoc
(
)
const
;
protected
:
virtual
~
RootAccessible
(
)
;
virtual
nsresult
AddEventListeners
(
)
override
;
virtual
nsresult
RemoveEventListeners
(
)
override
;
void
ProcessDOMEvent
(
dom
:
:
Event
*
aDOMEvent
nsINode
*
aTarget
)
;
void
HandlePopupShownEvent
(
Accessible
*
aAccessible
)
;
void
HandlePopupHidingEvent
(
nsINode
*
aNode
)
;
#
ifdef
MOZ_XUL
void
HandleTreeRowCountChangedEvent
(
dom
:
:
Event
*
aEvent
XULTreeAccessible
*
aAccessible
)
;
void
HandleTreeInvalidatedEvent
(
dom
:
:
Event
*
aEvent
XULTreeAccessible
*
aAccessible
)
;
uint32_t
GetChromeFlags
(
)
const
;
#
endif
}
;
inline
RootAccessible
*
Accessible
:
:
AsRoot
(
)
{
return
IsRoot
(
)
?
static_cast
<
mozilla
:
:
a11y
:
:
RootAccessible
*
>
(
this
)
:
nullptr
;
}
}
}
#
endif
