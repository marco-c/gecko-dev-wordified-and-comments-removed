#
ifndef
__NS_MAI_H__
#
define
__NS_MAI_H__
#
include
<
atk
/
atk
.
h
>
#
include
<
glib
.
h
>
#
include
<
glib
-
object
.
h
>
#
include
"
AccessibleOrProxy
.
h
"
#
include
"
AccessibleWrap
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
ProxyAccessible
;
}
}
#
define
MAI_TYPE_ATK_OBJECT
(
mai_atk_object_get_type
(
)
)
#
define
MAI_ATK_OBJECT
(
obj
)
(
G_TYPE_CHECK_INSTANCE_CAST
(
(
obj
)
\
MAI_TYPE_ATK_OBJECT
MaiAtkObject
)
)
#
define
MAI_ATK_OBJECT_CLASS
(
klass
)
(
G_TYPE_CHECK_CLASS_CAST
(
(
klass
)
\
MAI_TYPE_ATK_OBJECT
\
MaiAtkObjectClass
)
)
#
define
IS_MAI_OBJECT
(
obj
)
(
G_TYPE_CHECK_INSTANCE_TYPE
(
(
obj
)
\
MAI_TYPE_ATK_OBJECT
)
)
#
define
IS_MAI_OBJECT_CLASS
(
klass
)
(
G_TYPE_CHECK_CLASS_TYPE
(
(
klass
)
\
MAI_TYPE_ATK_OBJECT
)
)
#
define
MAI_ATK_OBJECT_GET_CLASS
(
obj
)
(
G_TYPE_INSTANCE_GET_CLASS
(
(
obj
)
\
MAI_TYPE_ATK_OBJECT
\
MaiAtkObjectClass
)
)
GType
mai_atk_object_get_type
(
void
)
;
GType
mai_util_get_type
(
)
;
extern
"
C
"
GType
mai_atk_socket_get_type
(
void
)
;
#
define
MAI_TYPE_ATK_SOCKET
(
mai_atk_socket_get_type
(
)
)
#
define
MAI_ATK_SOCKET
(
obj
)
(
G_TYPE_CHECK_INSTANCE_CAST
(
(
obj
)
\
MAI_TYPE_ATK_SOCKET
MaiAtkSocket
)
)
#
define
MAI_IS_ATK_SOCKET
(
obj
)
(
G_TYPE_CHECK_INSTANCE_TYPE
(
(
obj
)
\
MAI_TYPE_ATK_SOCKET
)
)
#
define
MAI_ATK_SOCKET_CLASS
(
klass
)
(
G_TYPE_CHECK_CLASS_CAST
(
(
klass
)
\
MAI_TYPE_ATK_SOCKET
\
MaiAtkSocketClass
)
)
#
define
MAI_IS_ATK_SOCKET_CLASS
(
klass
)
(
G_TYPE_CHECK_CLASS_TYPE
(
(
klass
)
\
MAI_TYPE_ATK_SOCKET
)
)
#
define
MAI_ATK_SOCKET_GET_CLASS
(
obj
)
(
G_TYPE_INSTANCE_GET_CLASS
(
(
obj
)
\
MAI_TYPE_ATK_SOCKET
\
MaiAtkSocketClass
)
)
typedef
struct
_MaiAtkSocket
{
AtkSocket
parent
;
mozilla
:
:
a11y
:
:
AccessibleWrap
*
accWrap
;
}
MaiAtkSocket
;
typedef
struct
_MaiAtkSocketClass
{
AtkSocketClass
parent_class
;
}
MaiAtkSocketClass
;
extern
"
C
"
GType
(
*
gAtkTableCellGetTypeFunc
)
(
)
;
mozilla
:
:
a11y
:
:
AccessibleWrap
*
GetAccessibleWrap
(
AtkObject
*
aAtkObj
)
;
mozilla
:
:
a11y
:
:
ProxyAccessible
*
GetProxy
(
AtkObject
*
aAtkObj
)
;
mozilla
:
:
a11y
:
:
AccessibleOrProxy
GetInternalObj
(
AtkObject
*
aObj
)
;
AtkObject
*
GetWrapperFor
(
mozilla
:
:
a11y
:
:
ProxyAccessible
*
aProxy
)
;
AtkObject
*
GetWrapperFor
(
mozilla
:
:
a11y
:
:
AccessibleOrProxy
aObj
)
;
extern
int
atkMajorVersion
atkMinorVersion
atkMicroVersion
;
static
inline
bool
IsAtkVersionAtLeast
(
int
aMajor
int
aMinor
int
aMicro
=
0
)
{
return
aMajor
<
atkMajorVersion
|
|
(
aMajor
=
=
atkMajorVersion
&
&
(
aMinor
<
atkMinorVersion
|
|
(
aMinor
=
=
atkMinorVersion
&
&
aMicro
<
=
atkMicroVersion
)
)
)
;
}
static
const
uintptr_t
IS_PROXY
=
1
;
struct
MaiAtkObject
{
AtkObject
parent
;
mozilla
:
:
a11y
:
:
AccessibleOrProxy
accWrap
;
AtkHyperlink
*
GetAtkHyperlink
(
)
;
void
Shutdown
(
)
;
void
FireStateChangeEvent
(
uint64_t
aState
bool
aEnabled
)
;
void
FireTextChangeEvent
(
const
nsString
&
aStr
int32_t
aStart
uint32_t
aLen
bool
aIsInsert
bool
aIsFromUser
)
;
void
FireAtkShowHideEvent
(
AtkObject
*
aParent
bool
aIsAdded
bool
aFromUser
)
;
private
:
enum
EAvailableAtkSignals
{
eUnknown
eHaveNewAtkTextSignals
eNoNewAtkSignals
}
;
static
EAvailableAtkSignals
gAvailableAtkSignals
;
}
;
#
endif
