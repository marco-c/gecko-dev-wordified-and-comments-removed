#
include
"
InterfaceInitFuncs
.
h
"
#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
AccessibleWrap
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsMai
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
RemoteAccessible
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
nsAccessibilityService
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
extern
"
C
"
{
static
AtkObject
*
refAccessibleAtPointCB
(
AtkComponent
*
aComponent
gint
aAccX
gint
aAccY
AtkCoordType
aCoordType
)
{
return
refAccessibleAtPointHelper
(
ATK_OBJECT
(
aComponent
)
aAccX
aAccY
aCoordType
)
;
}
static
void
getExtentsCB
(
AtkComponent
*
aComponent
gint
*
aX
gint
*
aY
gint
*
aWidth
gint
*
aHeight
AtkCoordType
aCoordType
)
{
getExtentsHelper
(
ATK_OBJECT
(
aComponent
)
aX
aY
aWidth
aHeight
aCoordType
)
;
}
static
gboolean
grabFocusCB
(
AtkComponent
*
aComponent
)
{
AtkObject
*
atkObject
=
ATK_OBJECT
(
aComponent
)
;
Accessible
*
acc
=
GetInternalObj
(
atkObject
)
;
if
(
acc
)
{
acc
-
>
TakeFocus
(
)
;
return
TRUE
;
}
return
FALSE
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
gboolean
scrollToCB
(
AtkComponent
*
aComponent
AtkScrollType
type
)
{
AtkObject
*
atkObject
=
ATK_OBJECT
(
aComponent
)
;
if
(
Accessible
*
acc
=
GetInternalObj
(
atkObject
)
)
{
acc
-
>
ScrollTo
(
type
)
;
return
TRUE
;
}
return
FALSE
;
}
static
gboolean
scrollToPointCB
(
AtkComponent
*
aComponent
AtkCoordType
coords
gint
x
gint
y
)
{
AtkObject
*
atkObject
=
ATK_OBJECT
(
aComponent
)
;
AccessibleWrap
*
accWrap
=
GetAccessibleWrap
(
atkObject
)
;
if
(
accWrap
)
{
accWrap
-
>
ScrollToPoint
(
coords
x
y
)
;
return
TRUE
;
}
RemoteAccessible
*
proxy
=
GetProxy
(
atkObject
)
;
if
(
proxy
)
{
proxy
-
>
ScrollToPoint
(
coords
x
y
)
;
return
TRUE
;
}
return
FALSE
;
}
}
AtkObject
*
refAccessibleAtPointHelper
(
AtkObject
*
aAtkObj
gint
aX
gint
aY
AtkCoordType
aCoordType
)
{
Accessible
*
acc
=
GetInternalObj
(
aAtkObj
)
;
if
(
!
acc
|
|
(
acc
-
>
IsLocal
(
)
&
&
acc
-
>
AsLocal
(
)
-
>
IsDefunct
(
)
)
)
{
return
nullptr
;
}
if
(
aCoordType
=
=
ATK_XY_WINDOW
)
{
mozilla
:
:
LayoutDeviceIntPoint
winCoords
=
nsAccUtils
:
:
GetScreenCoordsForWindow
(
acc
)
;
aX
+
=
winCoords
.
x
;
aY
+
=
winCoords
.
y
;
}
Accessible
*
accAtPoint
=
acc
-
>
ChildAtPoint
(
aX
aY
Accessible
:
:
EWhichChildAtPoint
:
:
DeepestChild
)
;
if
(
!
accAtPoint
)
{
return
nullptr
;
}
roles
:
:
Role
role
=
accAtPoint
-
>
Role
(
)
;
if
(
role
=
=
roles
:
:
TEXT_LEAF
|
|
role
=
=
roles
:
:
STATICTEXT
)
{
accAtPoint
=
accAtPoint
-
>
Parent
(
)
;
MOZ_ASSERT
(
accAtPoint
"
Text
leaf
should
always
have
a
parent
"
)
;
}
AtkObject
*
atkObj
=
GetWrapperFor
(
accAtPoint
)
;
if
(
atkObj
)
{
g_object_ref
(
atkObj
)
;
}
return
atkObj
;
}
void
getExtentsHelper
(
AtkObject
*
aAtkObj
gint
*
aX
gint
*
aY
gint
*
aWidth
gint
*
aHeight
AtkCoordType
aCoordType
)
{
*
aX
=
*
aY
=
*
aWidth
=
*
aHeight
=
-
1
;
Accessible
*
acc
=
GetInternalObj
(
aAtkObj
)
;
if
(
!
acc
|
|
(
acc
-
>
IsLocal
(
)
&
&
acc
-
>
AsLocal
(
)
-
>
IsDefunct
(
)
)
)
{
return
;
}
if
(
!
a11y
:
:
IsCacheActive
(
)
&
&
acc
-
>
IsRemote
(
)
)
{
acc
-
>
AsRemote
(
)
-
>
Extents
(
aCoordType
=
=
ATK_XY_WINDOW
aX
aY
aWidth
aHeight
)
;
return
;
}
mozilla
:
:
LayoutDeviceIntRect
screenRect
=
acc
-
>
Bounds
(
)
;
if
(
screenRect
.
IsEmpty
(
)
)
{
return
;
}
if
(
aCoordType
=
=
ATK_XY_WINDOW
)
{
mozilla
:
:
LayoutDeviceIntPoint
winCoords
=
nsAccUtils
:
:
GetScreenCoordsForWindow
(
acc
)
;
screenRect
.
x
-
=
winCoords
.
x
;
screenRect
.
y
-
=
winCoords
.
y
;
}
*
aX
=
screenRect
.
x
;
*
aY
=
screenRect
.
y
;
*
aWidth
=
screenRect
.
width
;
*
aHeight
=
screenRect
.
height
;
}
void
componentInterfaceInitCB
(
AtkComponentIface
*
aIface
)
{
NS_ASSERTION
(
aIface
"
Invalid
Interface
"
)
;
if
(
MOZ_UNLIKELY
(
!
aIface
)
)
return
;
aIface
-
>
ref_accessible_at_point
=
refAccessibleAtPointCB
;
aIface
-
>
get_extents
=
getExtentsCB
;
aIface
-
>
grab_focus
=
grabFocusCB
;
if
(
IsAtkVersionAtLeast
(
2
30
)
)
{
aIface
-
>
scroll_to
=
scrollToCB
;
aIface
-
>
scroll_to_point
=
scrollToPointCB
;
}
}
