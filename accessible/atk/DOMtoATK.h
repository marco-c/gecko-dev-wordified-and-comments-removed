#
include
<
glib
.
h
>
#
include
<
cstdint
>
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
nsCharTraits
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
a11y
{
namespace
DOMtoATK
{
gchar
*
Convert
(
const
nsAString
&
aStr
)
;
void
AddBOMs
(
nsACString
&
aDest
const
nsACString
&
aSource
)
;
void
ConvertTexttoAsterisks
(
nsAString
&
aString
)
;
enum
class
AtkStringConvertFlags
:
uint32_t
{
None
=
0
ConvertTextToAsterisks
=
1
<
<
0
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
AtkStringConvertFlags
)
class
ATKStringConverterHelper
{
public
:
ATKStringConverterHelper
(
void
)
:
#
ifdef
DEBUG
mAdjusted
(
false
)
#
endif
mStartShifted
(
false
)
mEndShifted
(
false
)
{
}
void
AdjustOffsets
(
gint
*
aStartOffset
gint
*
aEndOffset
gint
count
)
;
gchar
*
ConvertAdjusted
(
const
nsAString
&
aStr
)
;
private
:
gchar
*
FinishUTF16toUTF8
(
nsCString
&
aStr
)
;
#
ifdef
DEBUG
bool
mAdjusted
;
#
endif
bool
mStartShifted
;
bool
mEndShifted
;
}
;
template
<
class
Accessible
>
gchar
*
NewATKString
(
Accessible
*
aAccessible
gint
aStartOffset
gint
aEndOffset
AtkStringConvertFlags
aFlags
)
{
gint
startOffset
=
aStartOffset
endOffset
=
aEndOffset
;
ATKStringConverterHelper
converter
;
converter
.
AdjustOffsets
(
&
startOffset
&
endOffset
gint
(
aAccessible
-
>
CharacterCount
(
)
)
)
;
nsAutoString
str
;
aAccessible
-
>
TextSubstring
(
startOffset
endOffset
str
)
;
if
(
str
.
Length
(
)
=
=
0
)
{
return
g_strdup
(
"
"
)
;
}
if
(
aFlags
&
AtkStringConvertFlags
:
:
ConvertTextToAsterisks
)
{
ConvertTexttoAsterisks
(
str
)
;
}
return
converter
.
ConvertAdjusted
(
str
)
;
}
template
<
class
AccessibleCharAt
>
gunichar
ATKCharacter
(
AccessibleCharAt
*
aAccessible
gint
aOffset
)
{
gunichar
character
=
static_cast
<
gunichar
>
(
aAccessible
-
>
CharAt
(
aOffset
)
)
;
if
(
NS_IS_LOW_SURROGATE
(
character
)
)
{
return
0xFEFF
;
}
if
(
NS_IS_HIGH_SURROGATE
(
character
)
)
{
gunichar
characterLow
=
static_cast
<
gunichar
>
(
aAccessible
-
>
CharAt
(
aOffset
+
1
)
)
;
if
(
!
NS_IS_LOW_SURROGATE
(
characterLow
)
)
{
return
0xFFFD
;
}
return
SURROGATE_TO_UCS4
(
character
characterLow
)
;
}
return
character
;
}
}
}
}
