#
ifndef
mozilla_a11y_DocAccessibleChildBase_h
#
define
mozilla_a11y_DocAccessibleChildBase_h
#
include
"
mozilla
/
a11y
/
DocAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
PDocAccessibleChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
Accessible
;
class
AccShowEvent
;
class
DocAccessibleChildBase
:
public
PDocAccessibleChild
{
public
:
explicit
DocAccessibleChildBase
(
DocAccessible
*
aDoc
)
:
mDoc
(
aDoc
)
{
MOZ_COUNT_CTOR
(
DocAccessibleChildBase
)
;
}
~
DocAccessibleChildBase
(
)
{
MOZ_ASSERT
(
!
mDoc
)
;
if
(
mDoc
)
{
mDoc
-
>
SetIPCDoc
(
nullptr
)
;
}
MOZ_COUNT_DTOR
(
DocAccessibleChildBase
)
;
}
virtual
void
Shutdown
(
)
{
DetachDocument
(
)
;
SendShutdown
(
)
;
}
void
InsertIntoIpcTree
(
Accessible
*
aParent
Accessible
*
aChild
uint32_t
aIdxInParent
)
;
void
ShowEvent
(
AccShowEvent
*
aShowEvent
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
)
override
{
if
(
!
mDoc
)
{
return
;
}
mDoc
-
>
SetIPCDoc
(
nullptr
)
;
mDoc
=
nullptr
;
}
protected
:
static
uint32_t
InterfacesFor
(
Accessible
*
aAcc
)
;
static
void
SerializeTree
(
Accessible
*
aRoot
nsTArray
<
AccessibleData
>
&
aTree
)
;
virtual
void
MaybeSendShowEvent
(
ShowEventData
&
aData
bool
aFromUser
)
{
Unused
<
<
SendShowEvent
(
aData
aFromUser
)
;
}
void
DetachDocument
(
)
{
if
(
mDoc
)
{
mDoc
-
>
SetIPCDoc
(
nullptr
)
;
mDoc
=
nullptr
;
}
}
DocAccessible
*
mDoc
;
}
;
}
}
#
endif
