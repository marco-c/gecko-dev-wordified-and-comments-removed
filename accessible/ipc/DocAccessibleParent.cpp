#
include
"
ARIAMap
.
h
"
#
include
"
CachedTableAccessible
.
h
"
#
include
"
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
dom
/
BrowserBridgeParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
xpcAccessibleDocument
.
h
"
#
include
"
xpcAccEvents
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsIIOService
.
h
"
#
include
"
TextRange
.
h
"
#
include
"
Relation
.
h
"
#
include
"
RootAccessible
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
Compatibility
.
h
"
#
include
"
nsWinUtils
.
h
"
#
endif
#
if
defined
(
ANDROID
)
#
define
ACQUIRE_ANDROID_LOCK
\
MonitorAutoLock
mal
(
nsAccessibilityService
:
:
GetAndroidMonitor
(
)
)
;
#
else
#
define
ACQUIRE_ANDROID_LOCK
\
do
{
\
}
while
(
0
)
;
#
endif
namespace
mozilla
{
namespace
a11y
{
uint64_t
DocAccessibleParent
:
:
sMaxDocID
=
0
;
DocAccessibleParent
:
:
DocAccessibleParent
(
)
:
RemoteAccessible
(
this
)
mParentDoc
(
kNoParentDoc
)
#
if
defined
(
XP_WIN
)
mEmulatedWindowHandle
(
nullptr
)
#
endif
mTopLevel
(
false
)
mTopLevelInContentProcess
(
false
)
mShutdown
(
false
)
mFocus
(
0
)
mCaretId
(
0
)
mCaretOffset
(
-
1
)
mIsCaretAtEndOfLine
(
false
)
{
sMaxDocID
+
+
;
mActorID
=
sMaxDocID
;
MOZ_ASSERT
(
!
LiveDocs
(
)
.
Get
(
mActorID
)
)
;
LiveDocs
(
)
.
InsertOrUpdate
(
mActorID
this
)
;
}
DocAccessibleParent
:
:
~
DocAccessibleParent
(
)
{
UnregisterWeakMemoryReporter
(
this
)
;
LiveDocs
(
)
.
Remove
(
mActorID
)
;
MOZ_ASSERT
(
mChildDocs
.
Length
(
)
=
=
0
)
;
MOZ_ASSERT
(
!
ParentDoc
(
)
)
;
}
already_AddRefed
<
DocAccessibleParent
>
DocAccessibleParent
:
:
New
(
)
{
RefPtr
<
DocAccessibleParent
>
dap
(
new
DocAccessibleParent
(
)
)
;
RegisterWeakMemoryReporter
(
dap
)
;
return
dap
.
forget
(
)
;
}
void
DocAccessibleParent
:
:
SetBrowsingContext
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
)
{
mBrowsingContext
=
aBrowsingContext
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvShowEvent
(
const
ShowEventData
&
aData
const
bool
&
aFromUser
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
return
IPC_OK
(
)
;
MOZ_ASSERT
(
CheckDocTree
(
)
)
;
if
(
aData
.
NewTree
(
)
.
IsEmpty
(
)
)
{
return
IPC_FAIL
(
this
"
No
children
being
added
"
)
;
}
RemoteAccessible
*
parent
=
GetAccessible
(
aData
.
ID
(
)
)
;
if
(
!
parent
)
{
NS_ERROR
(
"
adding
child
to
unknown
accessible
"
)
;
#
ifdef
DEBUG
return
IPC_FAIL
(
this
"
unknown
parent
accessible
"
)
;
#
else
return
IPC_OK
(
)
;
#
endif
}
uint32_t
newChildIdx
=
aData
.
Idx
(
)
;
if
(
newChildIdx
>
parent
-
>
ChildCount
(
)
)
{
NS_ERROR
(
"
invalid
index
to
add
child
at
"
)
;
#
ifdef
DEBUG
return
IPC_FAIL
(
this
"
invalid
index
"
)
;
#
else
return
IPC_OK
(
)
;
#
endif
}
uint32_t
consumed
=
AddSubtree
(
parent
aData
.
NewTree
(
)
0
newChildIdx
)
;
MOZ_ASSERT
(
consumed
=
=
aData
.
NewTree
(
)
.
Length
(
)
)
;
if
(
!
consumed
)
{
return
IPC_FAIL
(
this
"
failed
to
add
children
"
)
;
}
#
ifdef
DEBUG
for
(
uint32_t
i
=
0
;
i
<
consumed
;
i
+
+
)
{
uint64_t
id
=
aData
.
NewTree
(
)
[
i
]
.
ID
(
)
;
MOZ_ASSERT
(
mAccessibles
.
GetEntry
(
id
)
)
;
}
#
endif
MOZ_ASSERT
(
CheckDocTree
(
)
)
;
if
(
aData
.
EventSuppressed
(
)
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
parent
-
>
RemoteChildAt
(
newChildIdx
)
;
PlatformShowHideEvent
(
target
parent
true
aFromUser
)
;
if
(
nsCOMPtr
<
nsIObserverService
>
obsService
=
services
:
:
GetObserverService
(
)
)
{
obsService
-
>
NotifyObservers
(
nullptr
NS_ACCESSIBLE_CACHE_TOPIC
nullptr
)
;
}
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
uint32_t
type
=
nsIAccessibleEvent
:
:
EVENT_SHOW
;
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
target
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
nsINode
*
node
=
nullptr
;
RefPtr
<
xpcAccEvent
>
event
=
new
xpcAccEvent
(
type
xpcAcc
doc
node
aFromUser
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
uint32_t
DocAccessibleParent
:
:
AddSubtree
(
RemoteAccessible
*
aParent
const
nsTArray
<
a11y
:
:
AccessibleData
>
&
aNewTree
uint32_t
aIdx
uint32_t
aIdxInParent
)
{
if
(
aNewTree
.
Length
(
)
<
=
aIdx
)
{
NS_ERROR
(
"
bad
index
in
serialized
tree
!
"
)
;
return
0
;
}
const
AccessibleData
&
newChild
=
aNewTree
[
aIdx
]
;
RemoteAccessible
*
newProxy
;
if
(
(
newProxy
=
GetAccessible
(
newChild
.
ID
(
)
)
)
)
{
MOZ_ASSERT
(
!
newProxy
-
>
RemoteParent
(
)
)
;
aParent
-
>
AddChildAt
(
aIdxInParent
newProxy
)
;
newProxy
-
>
SetParent
(
aParent
)
;
}
else
{
if
(
!
aria
:
:
IsRoleMapIndexValid
(
newChild
.
RoleMapEntryIndex
(
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
role
map
entry
index
"
)
;
return
0
;
}
newProxy
=
new
RemoteAccessible
(
newChild
.
ID
(
)
aParent
this
newChild
.
Role
(
)
newChild
.
Type
(
)
newChild
.
GenericTypes
(
)
newChild
.
RoleMapEntryIndex
(
)
)
;
aParent
-
>
AddChildAt
(
aIdxInParent
newProxy
)
;
mAccessibles
.
PutEntry
(
newChild
.
ID
(
)
)
-
>
mProxy
=
newProxy
;
ProxyCreated
(
newProxy
)
;
if
(
RefPtr
<
AccAttributes
>
fields
=
newChild
.
CacheFields
(
)
)
{
newProxy
-
>
ApplyCache
(
CacheUpdateType
:
:
Initial
fields
)
;
}
mPendingOOPChildDocs
.
RemoveIf
(
[
&
]
(
dom
:
:
BrowserBridgeParent
*
bridge
)
{
MOZ_ASSERT
(
bridge
-
>
GetBrowserParent
(
)
"
Pending
BrowserBridgeParent
should
be
alive
"
)
;
if
(
bridge
-
>
GetEmbedderAccessibleId
(
)
!
=
newChild
.
ID
(
)
)
{
return
false
;
}
MOZ_ASSERT
(
bridge
-
>
GetEmbedderAccessibleDoc
(
)
=
=
this
)
;
if
(
DocAccessibleParent
*
childDoc
=
bridge
-
>
GetDocAccessibleParent
(
)
)
{
AddChildDoc
(
childDoc
newChild
.
ID
(
)
false
)
;
}
return
true
;
}
)
;
}
if
(
newProxy
-
>
IsTableCell
(
)
)
{
CachedTableAccessible
:
:
Invalidate
(
newProxy
)
;
}
DebugOnly
<
bool
>
isOuterDoc
=
newProxy
-
>
ChildCount
(
)
=
=
1
;
uint32_t
accessibles
=
1
;
uint32_t
kids
=
newChild
.
ChildrenCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
kids
;
i
+
+
)
{
uint32_t
consumed
=
AddSubtree
(
newProxy
aNewTree
aIdx
+
accessibles
i
)
;
if
(
!
consumed
)
return
0
;
accessibles
+
=
consumed
;
}
MOZ_ASSERT
(
(
isOuterDoc
&
&
kids
=
=
0
)
|
|
newProxy
-
>
ChildCount
(
)
=
=
kids
)
;
return
accessibles
;
}
void
DocAccessibleParent
:
:
ShutdownOrPrepareForMove
(
RemoteAccessible
*
aAcc
)
{
if
(
!
aAcc
-
>
IsOuterDoc
(
)
)
{
auto
children
{
std
:
:
move
(
aAcc
-
>
mChildren
)
}
;
for
(
RemoteAccessible
*
child
:
children
)
{
ShutdownOrPrepareForMove
(
child
)
;
}
}
const
uint64_t
id
=
aAcc
-
>
ID
(
)
;
if
(
!
mMovingIDs
.
Contains
(
id
)
)
{
aAcc
-
>
Shutdown
(
)
;
return
;
}
if
(
aAcc
-
>
IsTable
(
)
|
|
aAcc
-
>
IsTableCell
(
)
)
{
CachedTableAccessible
:
:
Invalidate
(
aAcc
)
;
}
if
(
aAcc
-
>
IsHyperText
(
)
)
{
aAcc
-
>
InvalidateCachedHyperTextOffsets
(
)
;
}
aAcc
-
>
SetParent
(
nullptr
)
;
mMovingIDs
.
EnsureRemoved
(
id
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvHideEvent
(
const
uint64_t
&
aRootID
const
bool
&
aFromUser
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
return
IPC_OK
(
)
;
MOZ_ASSERT
(
CheckDocTree
(
)
)
;
if
(
!
aRootID
)
{
return
IPC_FAIL
(
this
"
Trying
to
hide
entire
document
?
"
)
;
}
ProxyEntry
*
rootEntry
=
mAccessibles
.
GetEntry
(
aRootID
)
;
if
(
!
rootEntry
)
{
NS_ERROR
(
"
invalid
root
being
removed
!
"
)
;
return
IPC_OK
(
)
;
}
RemoteAccessible
*
root
=
rootEntry
-
>
mProxy
;
if
(
!
root
)
{
NS_ERROR
(
"
invalid
root
being
removed
!
"
)
;
return
IPC_OK
(
)
;
}
RemoteAccessible
*
parent
=
root
-
>
RemoteParent
(
)
;
PlatformShowHideEvent
(
root
parent
false
aFromUser
)
;
RefPtr
<
xpcAccHideEvent
>
event
=
nullptr
;
if
(
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
uint32_t
type
=
nsIAccessibleEvent
:
:
EVENT_HIDE
;
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
root
)
;
xpcAccessibleGeneric
*
xpcParent
=
GetXPCAccessible
(
parent
)
;
RemoteAccessible
*
next
=
root
-
>
RemoteNextSibling
(
)
;
xpcAccessibleGeneric
*
xpcNext
=
next
?
GetXPCAccessible
(
next
)
:
nullptr
;
RemoteAccessible
*
prev
=
root
-
>
RemotePrevSibling
(
)
;
xpcAccessibleGeneric
*
xpcPrev
=
prev
?
GetXPCAccessible
(
prev
)
:
nullptr
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
nsINode
*
node
=
nullptr
;
event
=
new
xpcAccHideEvent
(
type
xpcAcc
doc
node
aFromUser
xpcParent
xpcNext
xpcPrev
)
;
}
parent
-
>
RemoveChild
(
root
)
;
ShutdownOrPrepareForMove
(
root
)
;
MOZ_ASSERT
(
CheckDocTree
(
)
)
;
if
(
event
)
{
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvEvent
(
const
uint64_t
&
aID
const
uint32_t
&
aEventType
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
remote
=
GetAccessible
(
aID
)
;
if
(
!
remote
)
{
NS_ERROR
(
"
no
proxy
for
event
!
"
)
;
return
IPC_OK
(
)
;
}
FireEvent
(
remote
aEventType
)
;
return
IPC_OK
(
)
;
}
void
DocAccessibleParent
:
:
FireEvent
(
RemoteAccessible
*
aAcc
const
uint32_t
&
aEventType
)
{
if
(
aEventType
=
=
nsIAccessibleEvent
:
:
EVENT_REORDER
|
|
aEventType
=
=
nsIAccessibleEvent
:
:
EVENT_INNER_REORDER
)
{
for
(
RemoteAccessible
*
child
=
aAcc
-
>
RemoteFirstChild
(
)
;
child
;
child
=
child
-
>
RemoteNextSibling
(
)
)
{
child
-
>
InvalidateGroupInfo
(
)
;
}
}
else
if
(
aEventType
=
=
nsIAccessibleEvent
:
:
EVENT_DOCUMENT_LOAD_COMPLETE
&
&
aAcc
=
=
this
)
{
UpdateStateCache
(
states
:
:
STALE
|
states
:
:
BUSY
false
)
;
}
PlatformEvent
(
aAcc
aEventType
)
;
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
aAcc
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
nsINode
*
node
=
nullptr
;
bool
fromUser
=
true
;
RefPtr
<
xpcAccEvent
>
event
=
new
xpcAccEvent
(
aEventType
xpcAcc
doc
node
fromUser
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvStateChangeEvent
(
const
uint64_t
&
aID
const
uint64_t
&
aState
const
bool
&
aEnabled
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
GetAccessible
(
aID
)
;
if
(
!
target
)
{
NS_ERROR
(
"
we
don
'
t
know
about
the
target
of
a
state
change
event
!
"
)
;
return
IPC_OK
(
)
;
}
target
-
>
UpdateStateCache
(
aState
aEnabled
)
;
if
(
nsCOMPtr
<
nsIObserverService
>
obsService
=
services
:
:
GetObserverService
(
)
)
{
obsService
-
>
NotifyObservers
(
nullptr
NS_ACCESSIBLE_CACHE_TOPIC
nullptr
)
;
}
PlatformStateChangeEvent
(
target
aState
aEnabled
)
;
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
target
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
uint32_t
type
=
nsIAccessibleEvent
:
:
EVENT_STATE_CHANGE
;
bool
extra
;
uint32_t
state
=
nsAccUtils
:
:
To32States
(
aState
&
extra
)
;
bool
fromUser
=
true
;
nsINode
*
node
=
nullptr
;
RefPtr
<
xpcAccStateChangeEvent
>
event
=
new
xpcAccStateChangeEvent
(
type
xpcAcc
doc
node
fromUser
state
extra
aEnabled
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvCaretMoveEvent
(
const
uint64_t
&
aID
const
LayoutDeviceIntRect
&
aCaretRect
const
int32_t
&
aOffset
const
bool
&
aIsSelectionCollapsed
const
bool
&
aIsAtEndOfLine
const
int32_t
&
aGranularity
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
proxy
=
GetAccessible
(
aID
)
;
if
(
!
proxy
)
{
NS_ERROR
(
"
unknown
caret
move
event
target
!
"
)
;
return
IPC_OK
(
)
;
}
mCaretId
=
aID
;
mCaretOffset
=
aOffset
;
mIsCaretAtEndOfLine
=
aIsAtEndOfLine
;
if
(
aIsSelectionCollapsed
)
{
mTextSelections
.
ClearAndRetainStorage
(
)
;
mTextSelections
.
AppendElement
(
TextRangeData
(
aID
aID
aOffset
aOffset
)
)
;
}
PlatformCaretMoveEvent
(
proxy
aOffset
aIsSelectionCollapsed
aGranularity
aCaretRect
)
;
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
proxy
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
nsINode
*
node
=
nullptr
;
bool
fromUser
=
true
;
uint32_t
type
=
nsIAccessibleEvent
:
:
EVENT_TEXT_CARET_MOVED
;
RefPtr
<
xpcAccCaretMoveEvent
>
event
=
new
xpcAccCaretMoveEvent
(
type
xpcAcc
doc
node
fromUser
aOffset
aIsSelectionCollapsed
aIsAtEndOfLine
aGranularity
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvTextChangeEvent
(
const
uint64_t
&
aID
const
nsAString
&
aStr
const
int32_t
&
aStart
const
uint32_t
&
aLen
const
bool
&
aIsInsert
const
bool
&
aFromUser
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
GetAccessible
(
aID
)
;
if
(
!
target
)
{
NS_ERROR
(
"
text
change
event
target
is
unknown
!
"
)
;
return
IPC_OK
(
)
;
}
PlatformTextChangeEvent
(
target
aStr
aStart
aLen
aIsInsert
aFromUser
)
;
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
target
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
uint32_t
type
=
aIsInsert
?
nsIAccessibleEvent
:
:
EVENT_TEXT_INSERTED
:
nsIAccessibleEvent
:
:
EVENT_TEXT_REMOVED
;
nsINode
*
node
=
nullptr
;
RefPtr
<
xpcAccTextChangeEvent
>
event
=
new
xpcAccTextChangeEvent
(
type
xpcAcc
doc
node
aFromUser
aStart
aLen
aIsInsert
aStr
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvSelectionEvent
(
const
uint64_t
&
aID
const
uint64_t
&
aWidgetID
const
uint32_t
&
aType
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
GetAccessible
(
aID
)
;
RemoteAccessible
*
widget
=
GetAccessible
(
aWidgetID
)
;
if
(
!
target
|
|
!
widget
)
{
NS_ERROR
(
"
invalid
id
in
selection
event
"
)
;
return
IPC_OK
(
)
;
}
PlatformSelectionEvent
(
target
widget
aType
)
;
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcTarget
=
GetXPCAccessible
(
target
)
;
xpcAccessibleDocument
*
xpcDoc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
RefPtr
<
xpcAccEvent
>
event
=
new
xpcAccEvent
(
aType
xpcTarget
xpcDoc
nullptr
false
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvVirtualCursorChangeEvent
(
const
uint64_t
&
aID
const
uint64_t
&
aOldPositionID
const
uint64_t
&
aNewPositionID
const
int16_t
&
aReason
const
bool
&
aFromUser
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
GetAccessible
(
aID
)
;
RemoteAccessible
*
oldPosition
=
GetAccessible
(
aOldPositionID
)
;
RemoteAccessible
*
newPosition
=
GetAccessible
(
aNewPositionID
)
;
if
(
!
target
)
{
NS_ERROR
(
"
no
proxy
for
event
!
"
)
;
return
IPC_OK
(
)
;
}
#
if
defined
(
ANDROID
)
PlatformVirtualCursorChangeEvent
(
target
oldPosition
newPosition
aReason
aFromUser
)
;
#
endif
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
RefPtr
<
xpcAccVirtualCursorChangeEvent
>
event
=
new
xpcAccVirtualCursorChangeEvent
(
nsIAccessibleEvent
:
:
EVENT_VIRTUALCURSOR_CHANGED
GetXPCAccessible
(
target
)
doc
nullptr
aFromUser
GetXPCAccessible
(
oldPosition
)
GetXPCAccessible
(
newPosition
)
aReason
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvScrollingEvent
(
const
uint64_t
&
aID
const
uint64_t
&
aType
const
uint32_t
&
aScrollX
const
uint32_t
&
aScrollY
const
uint32_t
&
aMaxScrollX
const
uint32_t
&
aMaxScrollY
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
GetAccessible
(
aID
)
;
if
(
!
target
)
{
NS_ERROR
(
"
no
proxy
for
event
!
"
)
;
return
IPC_OK
(
)
;
}
#
if
defined
(
ANDROID
)
PlatformScrollingEvent
(
target
aType
aScrollX
aScrollY
aMaxScrollX
aMaxScrollY
)
;
#
else
PlatformEvent
(
target
aType
)
;
#
endif
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
target
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
nsINode
*
node
=
nullptr
;
bool
fromUser
=
true
;
RefPtr
<
xpcAccScrollingEvent
>
event
=
new
xpcAccScrollingEvent
(
aType
xpcAcc
doc
node
fromUser
aScrollX
aScrollY
aMaxScrollX
aMaxScrollY
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvCache
(
const
mozilla
:
:
a11y
:
:
CacheUpdateType
&
aUpdateType
nsTArray
<
CacheData
>
&
&
aData
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
for
(
auto
&
entry
:
aData
)
{
RemoteAccessible
*
remote
=
GetAccessible
(
entry
.
ID
(
)
)
;
if
(
!
remote
)
{
MOZ_ASSERT_UNREACHABLE
(
"
No
remote
found
!
"
)
;
continue
;
}
remote
-
>
ApplyCache
(
aUpdateType
entry
.
Fields
(
)
)
;
}
if
(
nsCOMPtr
<
nsIObserverService
>
obsService
=
services
:
:
GetObserverService
(
)
)
{
obsService
-
>
NotifyObservers
(
nullptr
NS_ACCESSIBLE_CACHE_TOPIC
nullptr
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvSelectedAccessiblesChanged
(
nsTArray
<
uint64_t
>
&
&
aSelectedIDs
nsTArray
<
uint64_t
>
&
&
aUnselectedIDs
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
for
(
auto
&
id
:
aSelectedIDs
)
{
RemoteAccessible
*
remote
=
GetAccessible
(
id
)
;
if
(
!
remote
)
{
MOZ_ASSERT_UNREACHABLE
(
"
No
remote
found
!
"
)
;
continue
;
}
remote
-
>
UpdateStateCache
(
states
:
:
SELECTED
true
)
;
}
for
(
auto
&
id
:
aUnselectedIDs
)
{
RemoteAccessible
*
remote
=
GetAccessible
(
id
)
;
if
(
!
remote
)
{
MOZ_ASSERT_UNREACHABLE
(
"
No
remote
found
!
"
)
;
continue
;
}
remote
-
>
UpdateStateCache
(
states
:
:
SELECTED
false
)
;
}
if
(
nsCOMPtr
<
nsIObserverService
>
obsService
=
services
:
:
GetObserverService
(
)
)
{
obsService
-
>
NotifyObservers
(
nullptr
NS_ACCESSIBLE_CACHE_TOPIC
nullptr
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvAccessiblesWillMove
(
nsTArray
<
uint64_t
>
&
&
aIDs
)
{
for
(
uint64_t
id
:
aIDs
)
{
mMovingIDs
.
EnsureInserted
(
id
)
;
}
return
IPC_OK
(
)
;
}
#
if
!
defined
(
XP_WIN
)
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvAnnouncementEvent
(
const
uint64_t
&
aID
const
nsAString
&
aAnnouncement
const
uint16_t
&
aPriority
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
GetAccessible
(
aID
)
;
if
(
!
target
)
{
NS_ERROR
(
"
no
proxy
for
event
!
"
)
;
return
IPC_OK
(
)
;
}
#
if
defined
(
ANDROID
)
PlatformAnnouncementEvent
(
target
aAnnouncement
aPriority
)
;
#
endif
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
target
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
RefPtr
<
xpcAccAnnouncementEvent
>
event
=
new
xpcAccAnnouncementEvent
(
nsIAccessibleEvent
:
:
EVENT_ANNOUNCEMENT
xpcAcc
doc
nullptr
false
aAnnouncement
aPriority
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvTextSelectionChangeEvent
(
const
uint64_t
&
aID
nsTArray
<
TextRangeData
>
&
&
aSelection
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
target
=
GetAccessible
(
aID
)
;
if
(
!
target
)
{
NS_ERROR
(
"
no
proxy
for
event
!
"
)
;
return
IPC_OK
(
)
;
}
mTextSelections
.
ClearAndRetainStorage
(
)
;
mTextSelections
.
AppendElements
(
aSelection
)
;
#
ifdef
MOZ_WIDGET_COCOA
PlatformTextSelectionChangeEvent
(
target
aSelection
)
;
#
else
PlatformEvent
(
target
nsIAccessibleEvent
:
:
EVENT_TEXT_SELECTION_CHANGED
)
;
#
endif
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
target
)
;
xpcAccessibleDocument
*
doc
=
nsAccessibilityService
:
:
GetXPCDocument
(
this
)
;
nsINode
*
node
=
nullptr
;
bool
fromUser
=
true
;
RefPtr
<
xpcAccEvent
>
event
=
new
xpcAccEvent
(
nsIAccessibleEvent
:
:
EVENT_TEXT_SELECTION_CHANGED
xpcAcc
doc
node
fromUser
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvRoleChangedEvent
(
const
a11y
:
:
role
&
aRole
const
uint8_t
&
aRoleMapEntryIndex
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
mRole
=
aRole
;
mRoleMapEntryIndex
=
aRoleMapEntryIndex
;
#
ifdef
MOZ_WIDGET_COCOA
PlatformRoleChangedEvent
(
this
aRole
aRoleMapEntryIndex
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvBindChildDoc
(
NotNull
<
PDocAccessibleParent
*
>
aChildDoc
const
uint64_t
&
aID
)
{
ACQUIRE_ANDROID_LOCK
MOZ_ASSERT
(
aID
)
;
if
(
!
aID
)
return
IPC_FAIL
(
this
"
ID
is
0
!
"
)
;
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
MOZ_ASSERT
(
CheckDocTree
(
)
)
;
auto
childDoc
=
static_cast
<
DocAccessibleParent
*
>
(
aChildDoc
.
get
(
)
)
;
childDoc
-
>
Unbind
(
)
;
ipc
:
:
IPCResult
result
=
AddChildDoc
(
childDoc
aID
false
)
;
MOZ_ASSERT
(
result
)
;
MOZ_ASSERT
(
CheckDocTree
(
)
)
;
#
ifdef
DEBUG
if
(
!
result
)
{
return
result
;
}
#
else
result
=
IPC_OK
(
)
;
#
endif
return
result
;
}
ipc
:
:
IPCResult
DocAccessibleParent
:
:
AddChildDoc
(
DocAccessibleParent
*
aChildDoc
uint64_t
aParentID
bool
aCreating
)
{
ProxyEntry
*
e
=
mAccessibles
.
GetEntry
(
aParentID
)
;
if
(
!
e
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Binding
to
nonexistent
proxy
!
"
)
;
#
endif
return
IPC_FAIL
(
this
"
binding
to
nonexistant
proxy
!
"
)
;
}
RemoteAccessible
*
outerDoc
=
e
-
>
mProxy
;
MOZ_ASSERT
(
outerDoc
)
;
if
(
!
outerDoc
-
>
IsOuterDoc
(
)
|
|
outerDoc
-
>
ChildCount
(
)
>
1
|
|
(
outerDoc
-
>
ChildCount
(
)
=
=
1
&
&
!
outerDoc
-
>
RemoteChildAt
(
0
)
-
>
IsDoc
(
)
)
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Binding
to
parent
that
isn
'
t
a
valid
OuterDoc
!
"
)
;
#
endif
return
IPC_FAIL
(
this
"
Binding
to
parent
that
isn
'
t
a
valid
OuterDoc
!
"
)
;
}
if
(
outerDoc
-
>
ChildCount
(
)
=
=
1
)
{
MOZ_ASSERT
(
outerDoc
-
>
RemoteChildAt
(
0
)
-
>
AsDoc
(
)
)
;
outerDoc
-
>
RemoteChildAt
(
0
)
-
>
AsDoc
(
)
-
>
Unbind
(
)
;
}
aChildDoc
-
>
SetParent
(
outerDoc
)
;
outerDoc
-
>
SetChildDoc
(
aChildDoc
)
;
mChildDocs
.
AppendElement
(
aChildDoc
-
>
mActorID
)
;
aChildDoc
-
>
mParentDoc
=
mActorID
;
if
(
aCreating
)
{
ProxyCreated
(
aChildDoc
)
;
}
if
(
aChildDoc
-
>
IsTopLevelInContentProcess
(
)
)
{
auto
embeddedBrowser
=
static_cast
<
dom
:
:
BrowserParent
*
>
(
aChildDoc
-
>
Manager
(
)
)
;
dom
:
:
BrowserBridgeParent
*
bridge
=
embeddedBrowser
-
>
GetBrowserBridgeParent
(
)
;
if
(
bridge
)
{
#
if
defined
(
XP_WIN
)
if
(
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
)
{
aChildDoc
-
>
SetEmulatedWindowHandle
(
mEmulatedWindowHandle
)
;
}
#
endif
FireEvent
(
outerDoc
nsIAccessibleEvent
:
:
EVENT_REORDER
)
;
}
}
return
IPC_OK
(
)
;
}
ipc
:
:
IPCResult
DocAccessibleParent
:
:
AddChildDoc
(
dom
:
:
BrowserBridgeParent
*
aBridge
)
{
MOZ_ASSERT
(
aBridge
-
>
GetEmbedderAccessibleDoc
(
)
=
=
this
)
;
uint64_t
parentId
=
aBridge
-
>
GetEmbedderAccessibleId
(
)
;
MOZ_ASSERT
(
parentId
)
;
if
(
!
mAccessibles
.
GetEntry
(
parentId
)
)
{
mPendingOOPChildDocs
.
Insert
(
aBridge
)
;
return
IPC_OK
(
)
;
}
return
AddChildDoc
(
aBridge
-
>
GetDocAccessibleParent
(
)
parentId
false
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvShutdown
(
)
{
ACQUIRE_ANDROID_LOCK
Destroy
(
)
;
auto
mgr
=
static_cast
<
dom
:
:
BrowserParent
*
>
(
Manager
(
)
)
;
if
(
!
mgr
-
>
IsDestroyed
(
)
)
{
if
(
!
PDocAccessibleParent
:
:
Send__delete__
(
this
)
)
{
return
IPC_FAIL_NO_REASON
(
mgr
)
;
}
}
return
IPC_OK
(
)
;
}
void
DocAccessibleParent
:
:
Destroy
(
)
{
if
(
mShutdown
)
{
return
;
}
mShutdown
=
true
;
mBrowsingContext
=
nullptr
;
#
ifdef
ANDROID
if
(
FocusMgr
(
)
&
&
FocusMgr
(
)
-
>
IsFocusedRemoteDoc
(
this
)
)
{
FocusMgr
(
)
-
>
SetFocusedRemoteDoc
(
nullptr
)
;
}
#
endif
MOZ_DIAGNOSTIC_ASSERT
(
LiveDocs
(
)
.
Contains
(
mActorID
)
)
;
uint32_t
childDocCount
=
mChildDocs
.
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
childDocCount
;
i
+
+
)
{
for
(
uint32_t
j
=
i
+
1
;
j
<
childDocCount
;
j
+
+
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mChildDocs
[
i
]
!
=
mChildDocs
[
j
]
)
;
}
}
int32_t
actorID
=
mActorID
;
for
(
uint32_t
i
=
childDocCount
-
1
;
i
<
childDocCount
;
i
-
-
)
{
DocAccessibleParent
*
thisDoc
=
LiveDocs
(
)
.
Get
(
actorID
)
;
MOZ_ASSERT
(
thisDoc
)
;
if
(
!
thisDoc
)
{
return
;
}
thisDoc
-
>
ChildDocAt
(
i
)
-
>
Destroy
(
)
;
}
for
(
auto
iter
=
mAccessibles
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RemoteAccessible
*
acc
=
iter
.
Get
(
)
-
>
mProxy
;
MOZ_ASSERT
(
acc
!
=
this
)
;
if
(
acc
-
>
IsTable
(
)
)
{
CachedTableAccessible
:
:
Invalidate
(
acc
)
;
}
ProxyDestroyed
(
acc
)
;
iter
.
Remove
(
)
;
}
DocAccessibleParent
*
thisDoc
=
LiveDocs
(
)
.
Get
(
actorID
)
;
MOZ_ASSERT
(
thisDoc
)
;
if
(
!
thisDoc
)
{
return
;
}
mChildren
.
Clear
(
)
;
thisDoc
-
>
mAccessibles
.
Clear
(
)
;
thisDoc
-
>
mChildDocs
.
Clear
(
)
;
DocManager
:
:
NotifyOfRemoteDocShutdown
(
thisDoc
)
;
thisDoc
=
LiveDocs
(
)
.
Get
(
actorID
)
;
MOZ_ASSERT
(
thisDoc
)
;
if
(
!
thisDoc
)
{
return
;
}
ProxyDestroyed
(
thisDoc
)
;
thisDoc
=
LiveDocs
(
)
.
Get
(
actorID
)
;
MOZ_ASSERT
(
thisDoc
)
;
if
(
!
thisDoc
)
{
return
;
}
if
(
DocAccessibleParent
*
parentDoc
=
thisDoc
-
>
ParentDoc
(
)
)
{
parentDoc
-
>
RemoveChildDoc
(
thisDoc
)
;
}
else
if
(
IsTopLevel
(
)
)
{
GetAccService
(
)
-
>
RemoteDocShutdown
(
this
)
;
}
}
void
DocAccessibleParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
MOZ_ASSERT
(
CheckDocTree
(
)
)
;
if
(
!
mShutdown
)
{
ACQUIRE_ANDROID_LOCK
Destroy
(
)
;
}
}
DocAccessibleParent
*
DocAccessibleParent
:
:
ParentDoc
(
)
const
{
if
(
mParentDoc
=
=
kNoParentDoc
)
{
return
nullptr
;
}
return
LiveDocs
(
)
.
Get
(
mParentDoc
)
;
}
bool
DocAccessibleParent
:
:
CheckDocTree
(
)
const
{
size_t
childDocs
=
mChildDocs
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
childDocs
;
i
+
+
)
{
const
DocAccessibleParent
*
childDoc
=
ChildDocAt
(
i
)
;
if
(
!
childDoc
|
|
childDoc
-
>
ParentDoc
(
)
!
=
this
)
return
false
;
if
(
!
childDoc
-
>
CheckDocTree
(
)
)
{
return
false
;
}
}
return
true
;
}
xpcAccessibleGeneric
*
DocAccessibleParent
:
:
GetXPCAccessible
(
RemoteAccessible
*
aProxy
)
{
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
MOZ_ASSERT
(
doc
)
;
return
doc
-
>
GetAccessible
(
aProxy
)
;
}
#
if
defined
(
XP_WIN
)
void
DocAccessibleParent
:
:
MaybeInitWindowEmulation
(
)
{
if
(
!
nsWinUtils
:
:
IsWindowEmulationStarted
(
)
)
{
return
;
}
LocalAccessible
*
outerDoc
=
OuterDocOfRemoteBrowser
(
)
;
if
(
!
outerDoc
)
{
return
;
}
RootAccessible
*
rootDocument
=
outerDoc
-
>
RootAccessible
(
)
;
MOZ_ASSERT
(
rootDocument
)
;
bool
isActive
=
true
;
LayoutDeviceIntRect
rect
(
CW_USEDEFAULT
CW_USEDEFAULT
0
0
)
;
if
(
Compatibility
:
:
IsDolphin
(
)
)
{
rect
=
Bounds
(
)
;
LayoutDeviceIntRect
rootRect
=
rootDocument
-
>
Bounds
(
)
;
rect
.
MoveToX
(
rootRect
.
X
(
)
-
rect
.
X
(
)
)
;
rect
.
MoveToY
(
rect
.
Y
(
)
-
rootRect
.
Y
(
)
)
;
auto
browserParent
=
static_cast
<
dom
:
:
BrowserParent
*
>
(
Manager
(
)
)
;
isActive
=
browserParent
-
>
GetDocShellIsActive
(
)
;
}
RefPtr
<
DocAccessibleParent
>
thisRef
=
this
;
nsWinUtils
:
:
NativeWindowCreateProc
onCreate
(
[
thisRef
]
(
HWND
aHwnd
)
-
>
void
{
:
:
SetPropW
(
aHwnd
kPropNameDocAccParent
reinterpret_cast
<
HANDLE
>
(
thisRef
.
get
(
)
)
)
;
thisRef
-
>
SetEmulatedWindowHandle
(
aHwnd
)
;
}
)
;
HWND
parentWnd
=
reinterpret_cast
<
HWND
>
(
rootDocument
-
>
GetNativeWindow
(
)
)
;
DebugOnly
<
HWND
>
hWnd
=
nsWinUtils
:
:
CreateNativeWindow
(
kClassNameTabContent
parentWnd
rect
.
X
(
)
rect
.
Y
(
)
rect
.
Width
(
)
rect
.
Height
(
)
isActive
&
onCreate
)
;
MOZ_ASSERT
(
hWnd
)
;
}
void
DocAccessibleParent
:
:
SetEmulatedWindowHandle
(
HWND
aWindowHandle
)
{
if
(
!
aWindowHandle
&
&
mEmulatedWindowHandle
&
&
IsTopLevel
(
)
)
{
:
:
DestroyWindow
(
mEmulatedWindowHandle
)
;
}
mEmulatedWindowHandle
=
aWindowHandle
;
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleParent
:
:
RecvFocusEvent
(
const
uint64_t
&
aID
const
LayoutDeviceIntRect
&
aCaretRect
)
{
ACQUIRE_ANDROID_LOCK
if
(
mShutdown
)
{
return
IPC_OK
(
)
;
}
RemoteAccessible
*
proxy
=
GetAccessible
(
aID
)
;
if
(
!
proxy
)
{
NS_ERROR
(
"
no
proxy
for
event
!
"
)
;
return
IPC_OK
(
)
;
}
#
ifdef
ANDROID
if
(
FocusMgr
(
)
)
{
FocusMgr
(
)
-
>
SetFocusedRemoteDoc
(
this
)
;
}
#
endif
mFocus
=
aID
;
PlatformFocusEvent
(
proxy
aCaretRect
)
;
if
(
!
nsCoreUtils
:
:
AccEventObserversExist
(
)
)
{
return
IPC_OK
(
)
;
}
xpcAccessibleGeneric
*
xpcAcc
=
GetXPCAccessible
(
proxy
)
;
xpcAccessibleDocument
*
doc
=
GetAccService
(
)
-
>
GetXPCDocument
(
this
)
;
nsINode
*
node
=
nullptr
;
bool
fromUser
=
true
;
RefPtr
<
xpcAccEvent
>
event
=
new
xpcAccEvent
(
nsIAccessibleEvent
:
:
EVENT_FOCUS
xpcAcc
doc
node
fromUser
)
;
nsCoreUtils
:
:
DispatchAccEvent
(
std
:
:
move
(
event
)
)
;
return
IPC_OK
(
)
;
}
void
DocAccessibleParent
:
:
SelectionRanges
(
nsTArray
<
TextRange
>
*
aRanges
)
const
{
for
(
const
auto
&
data
:
mTextSelections
)
{
auto
*
startAcc
=
const_cast
<
RemoteAccessible
*
>
(
GetAccessible
(
data
.
StartID
(
)
)
)
;
auto
*
endAcc
=
const_cast
<
RemoteAccessible
*
>
(
GetAccessible
(
data
.
EndID
(
)
)
)
;
if
(
!
startAcc
|
|
!
endAcc
)
{
continue
;
}
uint32_t
startCount
=
startAcc
-
>
CharacterCount
(
)
;
if
(
startCount
=
=
0
|
|
data
.
StartOffset
(
)
>
static_cast
<
int32_t
>
(
startCount
)
)
{
continue
;
}
uint32_t
endCount
=
endAcc
-
>
CharacterCount
(
)
;
if
(
endCount
=
=
0
|
|
data
.
EndOffset
(
)
>
static_cast
<
int32_t
>
(
endCount
)
)
{
continue
;
}
aRanges
-
>
AppendElement
(
TextRange
(
const_cast
<
DocAccessibleParent
*
>
(
this
)
startAcc
data
.
StartOffset
(
)
endAcc
data
.
EndOffset
(
)
)
)
;
}
}
Accessible
*
DocAccessibleParent
:
:
FocusedChild
(
)
{
LocalAccessible
*
outerDoc
=
OuterDocOfRemoteBrowser
(
)
;
if
(
!
outerDoc
)
{
return
nullptr
;
}
RootAccessible
*
rootDocument
=
outerDoc
-
>
RootAccessible
(
)
;
return
rootDocument
-
>
FocusedChild
(
)
;
}
void
DocAccessibleParent
:
:
URL
(
nsACString
&
aURL
)
const
{
if
(
!
mBrowsingContext
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
uri
=
mBrowsingContext
-
>
GetCurrentURI
(
)
;
if
(
!
uri
)
{
return
;
}
if
(
uri
-
>
SchemeIs
(
"
data
"
)
|
|
uri
-
>
SchemeIs
(
"
blob
"
)
)
{
return
;
}
nsCOMPtr
<
nsIIOService
>
io
=
mozilla
:
:
components
:
:
IO
:
:
Service
(
)
;
if
(
NS_WARN_IF
(
!
io
)
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
exposableURI
;
if
(
NS_FAILED
(
io
-
>
CreateExposableURI
(
uri
getter_AddRefs
(
exposableURI
)
)
)
|
|
MOZ_UNLIKELY
(
!
exposableURI
)
)
{
return
;
}
exposableURI
-
>
GetSpec
(
aURL
)
;
}
void
DocAccessibleParent
:
:
URL
(
nsAString
&
aURL
)
const
{
nsAutoCString
url
;
URL
(
url
)
;
CopyUTF8toUTF16
(
url
aURL
)
;
}
void
DocAccessibleParent
:
:
MimeType
(
nsAString
&
aMime
)
const
{
if
(
mCachedFields
)
{
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
headerContentType
aMime
)
;
}
}
Relation
DocAccessibleParent
:
:
RelationByType
(
RelationType
aType
)
const
{
if
(
aType
=
=
RelationType
:
:
NODE_CHILD_OF
&
&
IsTopLevel
(
)
)
{
return
Relation
(
Parent
(
)
)
;
}
return
RemoteAccessible
:
:
RelationByType
(
aType
)
;
}
DocAccessibleParent
*
DocAccessibleParent
:
:
GetFrom
(
dom
:
:
BrowsingContext
*
aBrowsingContext
)
{
if
(
!
aBrowsingContext
)
{
return
nullptr
;
}
dom
:
:
BrowserParent
*
bp
=
aBrowsingContext
-
>
Canonical
(
)
-
>
GetBrowserParent
(
)
;
if
(
!
bp
)
{
return
nullptr
;
}
const
ManagedContainer
<
PDocAccessibleParent
>
&
docs
=
bp
-
>
ManagedPDocAccessibleParent
(
)
;
for
(
auto
*
key
:
docs
)
{
auto
*
doc
=
static_cast
<
a11y
:
:
DocAccessibleParent
*
>
(
key
)
;
if
(
doc
-
>
GetBrowsingContext
(
)
=
=
aBrowsingContext
)
{
return
doc
;
}
}
return
nullptr
;
}
size_t
DocAccessibleParent
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
{
size_t
size
=
0
;
size
+
=
RemoteAccessible
:
:
SizeOfExcludingThis
(
aMallocSizeOf
)
;
size
+
=
mReverseRelations
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
auto
i
=
mReverseRelations
.
Iter
(
)
;
!
i
.
Done
(
)
;
i
.
Next
(
)
)
{
size
+
=
i
.
Data
(
)
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
auto
j
=
i
.
Data
(
)
.
Iter
(
)
;
!
j
.
Done
(
)
;
j
.
Next
(
)
)
{
size
+
=
j
.
Data
(
)
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
}
size
+
=
mOnScreenAccessibles
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
size
+
=
mChildDocs
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
size
+
=
mAccessibles
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
auto
i
=
mAccessibles
.
Iter
(
)
;
!
i
.
Done
(
)
;
i
.
Next
(
)
)
{
size
+
=
i
.
Get
(
)
-
>
mProxy
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
size
+
=
mPendingOOPChildDocs
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
size
+
=
mTextSelections
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
return
size
;
}
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOfAccessibilityCache
)
;
NS_IMETHODIMP
DocAccessibleParent
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnon
)
{
nsAutoCString
path
;
if
(
aAnon
)
{
path
=
nsPrintfCString
(
"
explicit
/
a11y
/
cache
(
%
"
PRIu64
"
)
"
mActorID
)
;
}
else
{
nsCString
url
;
URL
(
url
)
;
url
.
ReplaceChar
(
'
/
'
'
\
\
'
)
;
path
=
nsPrintfCString
(
"
explicit
/
a11y
/
cache
(
%
s
)
"
url
.
get
(
)
)
;
}
aHandleReport
-
>
Callback
(
"
"
_ns
path
KIND_HEAP
UNITS_BYTES
SizeOfIncludingThis
(
MallocSizeOfAccessibilityCache
)
nsLiteralCString
(
"
Size
of
the
accessability
cache
for
this
document
.
"
)
aData
)
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
DocAccessibleParent
nsIMemoryReporter
)
;
}
}
