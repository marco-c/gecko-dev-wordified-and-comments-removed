#
include
"
DocAccessibleChild
.
h
"
#
include
"
LocalAccessible
-
inl
.
h
"
#
include
"
RemoteAccessible
.
h
"
#
include
"
HyperTextAccessible
-
inl
.
h
"
namespace
mozilla
{
namespace
a11y
{
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleChild
:
:
RecvScrollToPoint
(
const
uint64_t
&
aID
const
uint32_t
&
aScrollType
const
int32_t
&
aX
const
int32_t
&
aY
)
{
LocalAccessible
*
acc
=
IdToAccessible
(
aID
)
;
if
(
acc
)
{
acc
-
>
ScrollToPoint
(
aScrollType
aX
aY
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleChild
:
:
RecvAnnounce
(
const
uint64_t
&
aID
const
nsAString
&
aAnnouncement
const
uint16_t
&
aPriority
)
{
LocalAccessible
*
acc
=
IdToAccessible
(
aID
)
;
if
(
acc
)
{
acc
-
>
Announce
(
aAnnouncement
aPriority
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleChild
:
:
RecvAddToSelection
(
const
uint64_t
&
aID
const
int32_t
&
aStartOffset
const
int32_t
&
aEndOffset
bool
*
aSucceeded
)
{
*
aSucceeded
=
false
;
HyperTextAccessible
*
acc
=
IdToHyperTextAccessible
(
aID
)
;
if
(
acc
&
&
acc
-
>
IsTextRole
(
)
)
{
*
aSucceeded
=
acc
-
>
AddToSelection
(
aStartOffset
aEndOffset
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleChild
:
:
RecvScrollSubstringToPoint
(
const
uint64_t
&
aID
const
int32_t
&
aStartOffset
const
int32_t
&
aEndOffset
const
uint32_t
&
aCoordinateType
const
int32_t
&
aX
const
int32_t
&
aY
)
{
HyperTextAccessible
*
acc
=
IdToHyperTextAccessible
(
aID
)
;
if
(
acc
)
{
acc
-
>
ScrollSubstringToPoint
(
aStartOffset
aEndOffset
aCoordinateType
aX
aY
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
DocAccessibleChild
:
:
RecvRestoreFocus
(
)
{
if
(
FocusManager
*
focusMgr
=
FocusMgr
(
)
)
{
focusMgr
-
>
ForceFocusEvent
(
)
;
}
return
IPC_OK
(
)
;
}
}
}
