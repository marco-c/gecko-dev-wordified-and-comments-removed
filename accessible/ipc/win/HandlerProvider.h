#
ifndef
mozilla_a11y_HandlerProvider_h
#
define
mozilla_a11y_HandlerProvider_h
#
include
"
mozilla
/
a11y
/
AccessibleHandler
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
mscom
/
IHandlerProvider
.
h
"
#
include
"
mozilla
/
mscom
/
Ptr
.
h
"
#
include
"
mozilla
/
mscom
/
StructStream
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
struct
NEWEST_IA2_INTERFACE
;
namespace
mozilla
{
namespace
mscom
{
class
StructToStream
;
}
namespace
a11y
{
class
HandlerProvider
final
:
public
IGeckoBackChannel
public
mscom
:
:
IHandlerProvider
{
public
:
HandlerProvider
(
REFIID
aIid
mscom
:
:
InterceptorTargetPtr
<
IUnknown
>
aTarget
)
;
STDMETHODIMP
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
GetHandler
(
NotNull
<
CLSID
*
>
aHandlerClsid
)
override
;
STDMETHODIMP
GetHandlerPayloadSize
(
NotNull
<
mscom
:
:
IInterceptor
*
>
aInterceptor
NotNull
<
DWORD
*
>
aOutPayloadSize
)
override
;
STDMETHODIMP
WriteHandlerPayload
(
NotNull
<
mscom
:
:
IInterceptor
*
>
aInterceptor
NotNull
<
IStream
*
>
aStream
)
override
;
STDMETHODIMP_
(
REFIID
)
MarshalAs
(
REFIID
aIid
)
override
;
STDMETHODIMP_
(
REFIID
)
GetEffectiveOutParamIid
(
REFIID
aCallIid
ULONG
aCallMethod
)
override
;
STDMETHODIMP
NewInstance
(
REFIID
aIid
mscom
:
:
InterceptorTargetPtr
<
IUnknown
>
aTarget
NotNull
<
mscom
:
:
IHandlerProvider
*
*
>
aOutNewPayload
)
override
;
STDMETHODIMP
put_HandlerControl
(
long
aPid
IHandlerControl
*
aCtrl
)
override
;
STDMETHODIMP
Refresh
(
DynamicIA2Data
*
aOutData
)
override
;
STDMETHODIMP
get_AllTextInfo
(
BSTR
*
aText
IAccessibleHyperlink
*
*
*
aHyperlinks
long
*
aNHyperlinks
IA2TextSegment
*
*
aAttribRuns
long
*
aNAttribRuns
)
override
;
private
:
~
HandlerProvider
(
)
=
default
;
void
SetHandlerControlOnMainThread
(
DWORD
aPid
mscom
:
:
ProxyUniquePtr
<
IHandlerControl
>
aCtrl
)
;
void
GetAndSerializePayload
(
const
MutexAutoLock
&
NotNull
<
mscom
:
:
IInterceptor
*
>
aInterceptor
)
;
void
BuildStaticIA2Data
(
NotNull
<
mscom
:
:
IInterceptor
*
>
aInterceptor
StaticIA2Data
*
aOutData
)
;
void
BuildDynamicIA2Data
(
DynamicIA2Data
*
aOutIA2Data
)
;
void
BuildInitialIA2Data
(
NotNull
<
mscom
:
:
IInterceptor
*
>
aInterceptor
StaticIA2Data
*
aOutStaticData
DynamicIA2Data
*
aOutDynamicData
)
;
static
void
CleanupStaticIA2Data
(
StaticIA2Data
&
aData
)
;
static
void
CleanupDynamicIA2Data
(
DynamicIA2Data
&
aData
)
;
bool
IsTargetInterfaceCacheable
(
)
;
template
<
typename
Interface
>
HRESULT
ToWrappedObject
(
Interface
*
*
aObj
)
;
void
GetAllTextInfoMainThread
(
BSTR
*
aText
IAccessibleHyperlink
*
*
*
aHyperlinks
long
*
aNHyperlinks
IA2TextSegment
*
*
aAttribRuns
long
*
aNAttribRuns
HRESULT
*
result
)
;
Atomic
<
uint32_t
>
mRefCnt
;
Mutex
mMutex
;
const
IID
mTargetUnkIid
;
mscom
:
:
InterceptorTargetPtr
<
IUnknown
>
mTargetUnk
;
UniquePtr
<
mscom
:
:
StructToStream
>
mSerializer
;
RefPtr
<
IUnknown
>
mFastMarshalUnk
;
}
;
}
}
#
endif
