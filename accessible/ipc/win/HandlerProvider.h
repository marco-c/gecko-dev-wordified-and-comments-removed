#
ifndef
mozilla_a11y_HandlerProvider_h
#
define
mozilla_a11y_HandlerProvider_h
#
include
"
handler
/
AccessibleHandler
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
mscom
/
IHandlerProvider
.
h
"
#
include
"
mozilla
/
mscom
/
Ptr
.
h
"
#
include
"
mozilla
/
mscom
/
StructStream
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
struct
NEWEST_IA2_INTERFACE
;
namespace
mozilla
{
namespace
mscom
{
class
StructToStream
;
}
namespace
a11y
{
class
HandlerProvider
final
:
public
IGeckoBackChannel
public
mscom
:
:
IHandlerProvider
{
public
:
HandlerProvider
(
REFIID
aIid
mscom
:
:
InterceptorTargetPtr
<
IUnknown
>
aTarget
)
;
STDMETHODIMP
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
override
;
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
STDMETHODIMP
GetHandler
(
NotNull
<
CLSID
*
>
aHandlerClsid
)
override
;
STDMETHODIMP
GetHandlerPayloadSize
(
NotNull
<
DWORD
*
>
aOutPayloadSize
)
override
;
STDMETHODIMP
WriteHandlerPayload
(
NotNull
<
IStream
*
>
aStream
)
override
;
STDMETHODIMP_
(
REFIID
)
MarshalAs
(
REFIID
aIid
)
override
;
STDMETHODIMP
NewInstance
(
REFIID
aIid
mscom
:
:
InterceptorTargetPtr
<
IUnknown
>
aTarget
NotNull
<
mscom
:
:
IHandlerProvider
*
*
>
aOutNewPayload
)
override
;
STDMETHODIMP
put_HandlerControl
(
long
aPid
IHandlerControl
*
aCtrl
)
override
;
STDMETHODIMP
Refresh
(
IA2Data
*
aOutData
)
override
;
private
:
~
HandlerProvider
(
)
=
default
;
void
SetHandlerControlOnMainThread
(
DWORD
aPid
mscom
:
:
ProxyUniquePtr
<
IHandlerControl
>
aCtrl
)
;
void
GetAndSerializePayload
(
const
MutexAutoLock
&
)
;
void
BuildIA2Data
(
IA2Data
*
aOutIA2Data
)
;
static
void
ClearIA2Data
(
IA2Data
&
aData
)
;
bool
IsTargetInterfaceCacheable
(
)
;
Atomic
<
uint32_t
>
mRefCnt
;
Mutex
mMutex
;
REFIID
mTargetUnkIid
;
mscom
:
:
InterceptorTargetPtr
<
IUnknown
>
mTargetUnk
;
UniquePtr
<
mscom
:
:
StructToStream
>
mSerializer
;
}
;
}
}
#
endif
