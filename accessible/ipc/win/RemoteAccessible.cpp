#
include
"
Accessible2
.
h
"
#
include
"
RemoteAccessible
.
h
"
#
include
"
ia2AccessibleRelation
.
h
"
#
include
"
ia2AccessibleValue
.
h
"
#
include
"
IGeckoCustom
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
DocAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
DocManager
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
Relation
.
h
"
#
include
"
RelationType
.
h
"
#
include
"
mozilla
/
a11y
/
Role
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
<
comutil
.
h
>
namespace
mozilla
{
namespace
a11y
{
bool
RemoteAccessible
:
:
GetCOMInterface
(
void
*
*
aOutAccessible
)
const
{
if
(
!
aOutAccessible
)
{
return
false
;
}
MOZ_ASSERT
(
!
a11y
:
:
IsCacheActive
(
)
)
;
if
(
!
mCOMProxy
&
&
mSafeToRecurse
)
{
WeakPtr
<
RemoteAccessible
>
thisPtr
=
const_cast
<
RemoteAccessible
*
>
(
this
)
;
MsaaAccessible
*
msaa
=
MsaaAccessible
:
:
GetFrom
(
thisPtr
)
;
bool
isDefunct
=
false
;
VARIANT
realId
=
{
{
{
VT_I4
}
}
}
;
realId
.
ulVal
=
msaa
-
>
GetExistingID
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
realId
.
ulVal
!
=
CHILDID_SELF
)
;
RefPtr
<
IAccessible
>
proxy
=
msaa
-
>
GetIAccessibleFor
(
realId
&
isDefunct
)
;
if
(
!
thisPtr
)
{
*
aOutAccessible
=
nullptr
;
return
false
;
}
thisPtr
-
>
mCOMProxy
=
proxy
;
}
RefPtr
<
IAccessible
>
addRefed
=
mCOMProxy
;
addRefed
.
forget
(
aOutAccessible
)
;
return
!
!
mCOMProxy
;
}
template
<
typename
Interface
>
struct
InterfaceIID
{
}
;
template
<
>
struct
InterfaceIID
<
IAccessibleValue
>
{
static
REFIID
Value
(
)
{
return
IID_IAccessibleValue
;
}
}
;
template
<
>
struct
InterfaceIID
<
IAccessibleText
>
{
static
REFIID
Value
(
)
{
return
IID_IAccessibleText
;
}
}
;
template
<
>
struct
InterfaceIID
<
IAccessibleHyperlink
>
{
static
REFIID
Value
(
)
{
return
IID_IAccessibleHyperlink
;
}
}
;
template
<
>
struct
InterfaceIID
<
IGeckoCustom
>
{
static
REFIID
Value
(
)
{
return
IID_IGeckoCustom
;
}
}
;
template
<
>
struct
InterfaceIID
<
IAccessible2_2
>
{
static
REFIID
Value
(
)
{
return
IID_IAccessible2_2
;
}
}
;
template
<
typename
Interface
>
static
already_AddRefed
<
Interface
>
QueryInterface
(
const
RemoteAccessible
*
aProxy
)
{
RefPtr
<
IAccessible
>
acc
;
if
(
!
aProxy
-
>
GetCOMInterface
(
(
void
*
*
)
getter_AddRefs
(
acc
)
)
)
{
return
nullptr
;
}
RefPtr
<
Interface
>
acc2
;
if
(
FAILED
(
acc
-
>
QueryInterface
(
InterfaceIID
<
Interface
>
:
:
Value
(
)
(
void
*
*
)
getter_AddRefs
(
acc2
)
)
)
)
{
return
nullptr
;
}
return
acc2
.
forget
(
)
;
}
void
RemoteAccessible
:
:
ScrollSubstringToPoint
(
int32_t
aStartOffset
int32_t
aEndOffset
uint32_t
aCoordinateType
int32_t
aX
int32_t
aY
)
{
if
(
a11y
:
:
IsCacheActive
(
)
)
{
return
;
}
RefPtr
<
IAccessibleText
>
acc
=
QueryInterface
<
IAccessibleText
>
(
this
)
;
if
(
!
acc
)
{
return
;
}
IA2CoordinateType
coordType
;
if
(
aCoordinateType
=
=
nsIAccessibleCoordinateType
:
:
COORDTYPE_SCREEN_RELATIVE
)
{
coordType
=
IA2_COORDTYPE_SCREEN_RELATIVE
;
}
else
if
(
aCoordinateType
=
=
nsIAccessibleCoordinateType
:
:
COORDTYPE_PARENT_RELATIVE
)
{
coordType
=
IA2_COORDTYPE_PARENT_RELATIVE
;
}
else
{
MOZ_CRASH
(
"
unsupported
coord
type
"
)
;
}
acc
-
>
scrollSubstringToPoint
(
static_cast
<
long
>
(
aStartOffset
)
static_cast
<
long
>
(
aEndOffset
)
coordType
static_cast
<
long
>
(
aX
)
static_cast
<
long
>
(
aY
)
)
;
}
}
}
