#
ifndef
mozilla_a11y_ProxyAccessible_h
#
define
mozilla_a11y_ProxyAccessible_h
#
include
"
Accessible
.
h
"
#
include
"
mozilla
/
a11y
/
ProxyAccessibleBase
.
h
"
#
include
"
mozilla
/
a11y
/
Role
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsRect
.
h
"
#
include
<
oleacc
.
h
>
namespace
mozilla
{
namespace
a11y
{
class
ProxyAccessible
:
public
ProxyAccessibleBase
<
ProxyAccessible
>
{
public
:
ProxyAccessible
(
uint64_t
aID
ProxyAccessible
*
aParent
DocAccessibleParent
*
aDoc
role
aRole
uint32_t
aInterfaces
)
:
ProxyAccessibleBase
(
aID
aParent
aDoc
aRole
aInterfaces
)
mSafeToRecurse
(
true
)
{
MOZ_COUNT_CTOR
(
ProxyAccessible
)
;
}
~
ProxyAccessible
(
)
{
MOZ_COUNT_DTOR
(
ProxyAccessible
)
;
}
#
include
"
mozilla
/
a11y
/
ProxyAccessibleShared
.
h
"
bool
GetCOMInterface
(
void
*
*
aOutAccessible
)
const
;
void
SetCOMInterface
(
const
RefPtr
<
IAccessible
>
&
aIAccessible
)
{
if
(
aIAccessible
)
{
mCOMProxy
=
aIAccessible
;
}
else
{
mSafeToRecurse
=
false
;
}
}
protected
:
explicit
ProxyAccessible
(
DocAccessibleParent
*
aThisAsDoc
)
:
ProxyAccessibleBase
(
aThisAsDoc
)
{
MOZ_COUNT_CTOR
(
ProxyAccessible
)
;
}
private
:
RefPtr
<
IAccessible
>
mCOMProxy
;
bool
mSafeToRecurse
;
}
;
}
}
#
endif
