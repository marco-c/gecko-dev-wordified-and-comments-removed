include
protocol
PBrowser
;
include
DocAccessibleTypes
;
include
"
mozilla
/
GfxMessageUtils
.
h
"
;
using
mozilla
:
:
a11y
:
:
role
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
using
mozilla
:
:
a11y
:
:
AccType
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
using
mozilla
:
:
a11y
:
:
AccGenericType
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
using
mozilla
:
:
a11y
:
:
CacheUpdateType
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
[
RefCounted
]
using
mozilla
:
:
a11y
:
:
AccAttributes
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
using
mozilla
:
:
WindowsHandle
from
"
mozilla
/
ipc
/
IPCTypes
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntRect
from
"
Units
.
h
"
;
using
mozilla
:
:
gfx
:
:
Matrix4x4
from
"
mozilla
/
gfx
/
Matrix
.
h
"
;
namespace
mozilla
{
namespace
a11y
{
struct
AccessibleData
{
uint64_t
ID
;
role
Role
;
uint32_t
ChildrenCount
;
AccType
Type
;
AccGenericType
GenericTypes
;
uint8_t
RoleMapEntryIndex
;
nullable
AccAttributes
CacheFields
;
}
;
struct
ShowEventData
{
uint64_t
ID
;
uint32_t
Idx
;
AccessibleData
[
]
NewTree
;
bool
EventSuppressed
;
}
;
struct
TextRangeData
{
uint64_t
StartID
;
uint64_t
EndID
;
int32_t
StartOffset
;
int32_t
EndOffset
;
}
;
[
ManualDealloc
ChildImpl
=
virtual
ParentImpl
=
virtual
]
sync
protocol
PDocAccessible
{
manager
PBrowser
;
parent
:
async
Shutdown
(
)
;
async
Event
(
uint64_t
aID
uint32_t
type
)
;
async
ShowEvent
(
ShowEventData
data
bool
aFromUser
)
;
async
HideEvent
(
uint64_t
aRootID
bool
aFromUser
)
;
async
StateChangeEvent
(
uint64_t
aID
uint64_t
aState
bool
aEnabled
)
;
async
CaretMoveEvent
(
uint64_t
aID
LayoutDeviceIntRect
aCaretRect
int32_t
aOffset
bool
aIsAtEndOfLine
bool
aIsSelectionCollapsed
int32_t
aGranularity
)
;
async
TextChangeEvent
(
uint64_t
aID
nsString
aStr
int32_t
aStart
uint32_t
aLen
bool
aIsInsert
bool
aFromUser
)
;
sync
SyncTextChangeEvent
(
uint64_t
aID
nsString
aStr
int32_t
aStart
uint32_t
aLen
bool
aIsInsert
bool
aFromUser
)
;
async
SelectionEvent
(
uint64_t
aID
uint64_t
aWidgetID
uint32_t
aType
)
;
async
RoleChangedEvent
(
role
aRole
uint8_t
aRoleMapEntryIndex
)
;
async
FocusEvent
(
uint64_t
aID
LayoutDeviceIntRect
aCaretRect
)
;
async
VirtualCursorChangeEvent
(
uint64_t
aID
uint64_t
aOldPosition
uint64_t
aPosition
int16_t
aReason
bool
aFromUservcEvent
)
;
async
ScrollingEvent
(
uint64_t
aID
uint64_t
aType
uint32_t
aScrollX
uint32_t
aScrollY
uint32_t
aMaxScrollX
uint32_t
aMaxScrollY
)
;
async
TextSelectionChangeEvent
(
uint64_t
aID
TextRangeData
[
]
aSelection
)
;
async
BindChildDoc
(
PDocAccessible
aChildDoc
uint64_t
aID
)
;
async
Cache
(
CacheUpdateType
aUpdateType
CacheData
[
]
aData
)
;
async
SelectedAccessiblesChanged
(
uint64_t
[
]
aSelectedIDs
uint64_t
[
]
aUnselectedIDs
)
;
async
AccessiblesWillMove
(
uint64_t
[
]
aIDs
)
;
child
:
async
RestoreFocus
(
)
;
async
TakeFocus
(
uint64_t
aID
)
;
async
TakeSelection
(
uint64_t
aID
)
;
async
SetSelected
(
uint64_t
aID
bool
aSelected
)
;
async
ScrollTo
(
uint64_t
aID
uint32_t
aScrollType
)
;
async
SetTextSelection
(
uint64_t
aStartID
int32_t
aStartOffset
uint64_t
aEndID
int32_t
aEndOffset
int32_t
aSelectionNum
)
;
async
RemoveTextSelection
(
uint64_t
aID
int32_t
aSelectionNum
)
;
async
ScrollTextLeafRangeIntoView
(
uint64_t
aStartID
int32_t
aStartOffset
uint64_t
aEndID
int32_t
aEndOffset
uint32_t
aScrollType
)
;
async
ReplaceText
(
uint64_t
aID
nsString
aText
)
;
async
InsertText
(
uint64_t
aID
nsString
aText
int32_t
aPosition
)
;
async
CopyText
(
uint64_t
aID
int32_t
aStartPos
int32_t
aEndPos
)
;
async
CutText
(
uint64_t
aID
int32_t
aStartPos
int32_t
aEndPos
)
;
async
DeleteText
(
uint64_t
aID
int32_t
aStartPos
int32_t
aEndPos
)
;
async
PasteText
(
uint64_t
aID
int32_t
aPosition
)
;
async
VerifyCache
(
uint64_t
aID
uint64_t
aCacheDomain
nullable
AccAttributes
aFields
)
;
async
DoActionAsync
(
uint64_t
aID
uint8_t
aIndex
)
;
async
SetCaretOffset
(
uint64_t
aID
int32_t
aOffset
)
;
async
SetCurValue
(
uint64_t
aID
double
aValue
)
;
async
__delete__
(
)
;
}
;
}
}
