#
ifndef
mozilla_a11y_DocAccessibleParent_h
#
define
mozilla_a11y_DocAccessibleParent_h
#
include
"
nsAccessibilityService
.
h
"
#
include
"
mozilla
/
a11y
/
PDocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
ProxyAccessible
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
xpcAccessibleGeneric
;
class
DocAccessibleParent
:
public
ProxyAccessible
public
PDocAccessibleParent
{
public
:
DocAccessibleParent
(
)
:
ProxyAccessible
(
this
)
mParentDoc
(
nullptr
)
mTopLevel
(
false
)
mShutdown
(
false
)
#
if
defined
(
XP_WIN
)
mEmulatedWindowHandle
(
nullptr
)
#
endif
{
MOZ_COUNT_CTOR_INHERITED
(
DocAccessibleParent
ProxyAccessible
)
;
}
~
DocAccessibleParent
(
)
{
MOZ_COUNT_DTOR_INHERITED
(
DocAccessibleParent
ProxyAccessible
)
;
MOZ_ASSERT
(
mChildDocs
.
Length
(
)
=
=
0
)
;
MOZ_ASSERT
(
!
ParentDoc
(
)
)
;
}
void
SetTopLevel
(
)
{
mTopLevel
=
true
;
}
bool
IsTopLevel
(
)
const
{
return
mTopLevel
;
}
bool
IsShutdown
(
)
const
{
return
mShutdown
;
}
void
MarkAsShutdown
(
)
{
MOZ_ASSERT
(
mChildDocs
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
mAccessibles
.
Count
(
)
=
=
0
)
;
mShutdown
=
true
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvEvent
(
const
uint64_t
&
aID
const
uint32_t
&
aType
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvShowEvent
(
const
ShowEventData
&
aData
const
bool
&
aFromUser
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvHideEvent
(
const
uint64_t
&
aRootID
const
bool
&
aFromUser
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStateChangeEvent
(
const
uint64_t
&
aID
const
uint64_t
&
aState
const
bool
&
aEnabled
)
override
final
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCaretMoveEvent
(
const
uint64_t
&
aID
const
int32_t
&
aOffset
)
override
final
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvTextChangeEvent
(
const
uint64_t
&
aID
const
nsString
&
aStr
const
int32_t
&
aStart
const
uint32_t
&
aLen
const
bool
&
aIsInsert
const
bool
&
aFromUser
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSelectionEvent
(
const
uint64_t
&
aID
const
uint64_t
&
aWidgetID
const
uint32_t
&
aType
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvRoleChangedEvent
(
const
uint32_t
&
aRole
)
override
final
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvBindChildDoc
(
PDocAccessibleParent
*
aChildDoc
const
uint64_t
&
aID
)
override
;
void
Unbind
(
)
{
if
(
DocAccessibleParent
*
parent
=
ParentDoc
(
)
)
{
parent
-
>
RemoveChildDoc
(
this
)
;
}
SetParent
(
nullptr
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
)
override
;
void
Destroy
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
{
MOZ_DIAGNOSTIC_ASSERT
(
CheckDocTree
(
)
)
;
if
(
!
mShutdown
)
Destroy
(
)
;
}
DocAccessibleParent
*
ParentDoc
(
)
const
{
return
mParentDoc
;
}
ipc
:
:
IPCResult
AddChildDoc
(
DocAccessibleParent
*
aChildDoc
uint64_t
aParentID
bool
aCreating
=
true
)
;
void
RemoveChildDoc
(
DocAccessibleParent
*
aChildDoc
)
{
ProxyAccessible
*
parent
=
aChildDoc
-
>
Parent
(
)
;
MOZ_ASSERT
(
parent
)
;
if
(
parent
)
{
aChildDoc
-
>
Parent
(
)
-
>
ClearChildDoc
(
aChildDoc
)
;
}
mChildDocs
.
RemoveElement
(
aChildDoc
)
;
aChildDoc
-
>
mParentDoc
=
nullptr
;
MOZ_ASSERT
(
aChildDoc
-
>
mChildDocs
.
Length
(
)
=
=
0
)
;
}
void
RemoveAccessible
(
ProxyAccessible
*
aAccessible
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mAccessibles
.
GetEntry
(
aAccessible
-
>
ID
(
)
)
)
;
mAccessibles
.
RemoveEntry
(
aAccessible
-
>
ID
(
)
)
;
}
ProxyAccessible
*
GetAccessible
(
uintptr_t
aID
)
{
if
(
!
aID
)
return
this
;
ProxyEntry
*
e
=
mAccessibles
.
GetEntry
(
aID
)
;
return
e
?
e
-
>
mProxy
:
nullptr
;
}
const
ProxyAccessible
*
GetAccessible
(
uintptr_t
aID
)
const
{
return
const_cast
<
DocAccessibleParent
*
>
(
this
)
-
>
GetAccessible
(
aID
)
;
}
size_t
ChildDocCount
(
)
const
{
return
mChildDocs
.
Length
(
)
;
}
const
DocAccessibleParent
*
ChildDocAt
(
size_t
aIdx
)
const
{
return
mChildDocs
[
aIdx
]
;
}
#
if
defined
(
XP_WIN
)
void
SetCOMProxy
(
const
RefPtr
<
IAccessible
>
&
aCOMProxy
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvGetWindowedPluginIAccessible
(
const
WindowsHandle
&
aHwnd
IAccessibleHolder
*
aPluginCOMProxy
)
override
;
void
SetEmulatedWindowHandle
(
HWND
aWindowHandle
)
;
HWND
GetEmulatedWindowHandle
(
)
const
{
return
mEmulatedWindowHandle
;
}
#
endif
private
:
class
ProxyEntry
:
public
PLDHashEntryHdr
{
public
:
explicit
ProxyEntry
(
const
void
*
)
:
mProxy
(
nullptr
)
{
}
ProxyEntry
(
ProxyEntry
&
&
aOther
)
:
mProxy
(
aOther
.
mProxy
)
{
aOther
.
mProxy
=
nullptr
;
}
~
ProxyEntry
(
)
{
delete
mProxy
;
}
typedef
uint64_t
KeyType
;
typedef
const
void
*
KeyTypePointer
;
bool
KeyEquals
(
const
void
*
aKey
)
const
{
return
mProxy
-
>
ID
(
)
=
=
(
uint64_t
)
aKey
;
}
static
const
void
*
KeyToPointer
(
uint64_t
aKey
)
{
return
(
void
*
)
aKey
;
}
static
PLDHashNumber
HashKey
(
const
void
*
aKey
)
{
return
(
uint64_t
)
aKey
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
ProxyAccessible
*
mProxy
;
}
;
uint32_t
AddSubtree
(
ProxyAccessible
*
aParent
const
nsTArray
<
AccessibleData
>
&
aNewTree
uint32_t
aIdx
uint32_t
aIdxInParent
)
;
MOZ_MUST_USE
bool
CheckDocTree
(
)
const
;
xpcAccessibleGeneric
*
GetXPCAccessible
(
ProxyAccessible
*
aProxy
)
;
nsTArray
<
DocAccessibleParent
*
>
mChildDocs
;
DocAccessibleParent
*
mParentDoc
;
#
if
defined
(
XP_WIN
)
HWND
mEmulatedWindowHandle
;
#
endif
nsTHashtable
<
ProxyEntry
>
mAccessibles
;
bool
mTopLevel
;
bool
mShutdown
;
}
;
}
}
#
endif
