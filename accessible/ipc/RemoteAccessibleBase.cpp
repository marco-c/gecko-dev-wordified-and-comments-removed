#
include
"
ARIAMap
.
h
"
#
include
"
CachedTableAccessible
.
h
"
#
include
"
DocAccessible
.
h
"
#
include
"
RemoteAccessibleBase
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessibleParent
.
h
"
#
include
"
mozilla
/
a11y
/
DocManager
.
h
"
#
include
"
mozilla
/
a11y
/
Platform
.
h
"
#
include
"
mozilla
/
a11y
/
RemoteAccessibleBase
.
h
"
#
include
"
mozilla
/
a11y
/
RemoteAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
Role
.
h
"
#
include
"
mozilla
/
a11y
/
TableAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
TableCellAccessible
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
DocumentInlines
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
nsAccessibilityService
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
nsTextEquivUtils
.
h
"
#
include
"
Pivot
.
h
"
#
include
"
Relation
.
h
"
#
include
"
RelationType
.
h
"
#
include
"
TextLeafRange
.
h
"
#
include
"
xpcAccessibleDocument
.
h
"
#
ifdef
A11Y_LOG
#
include
"
Logging
.
h
"
#
define
VERIFY_CACHE
(
domain
)
\
if
(
logging
:
:
IsEnabled
(
logging
:
:
eCache
)
)
{
\
Unused
<
<
mDoc
-
>
SendVerifyCache
(
mID
domain
mCachedFields
)
;
\
}
#
else
#
define
VERIFY_CACHE
(
domain
)
\
do
{
\
}
while
(
0
)
#
endif
namespace
mozilla
{
namespace
a11y
{
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
Shutdown
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
IsDoc
(
)
)
;
xpcAccessibleDocument
*
xpcDoc
=
GetAccService
(
)
-
>
GetCachedXPCDocument
(
Document
(
)
)
;
if
(
xpcDoc
)
{
xpcDoc
-
>
NotifyOfShutdown
(
static_cast
<
Derived
*
>
(
this
)
)
;
}
if
(
IsTable
(
)
|
|
IsTableCell
(
)
)
{
CachedTableAccessible
:
:
Invalidate
(
this
)
;
}
PruneRelationsOnShutdown
(
)
;
uint32_t
childCount
=
mChildren
.
Length
(
)
;
if
(
!
IsOuterDoc
(
)
)
{
for
(
uint32_t
idx
=
0
;
idx
<
childCount
;
idx
+
+
)
mChildren
[
idx
]
-
>
Shutdown
(
)
;
}
else
{
if
(
childCount
>
1
)
{
MOZ_CRASH
(
"
outer
doc
has
too
many
documents
!
"
)
;
}
else
if
(
childCount
=
=
1
)
{
mChildren
[
0
]
-
>
AsDoc
(
)
-
>
Unbind
(
)
;
}
}
mChildren
.
Clear
(
)
;
ProxyDestroyed
(
static_cast
<
Derived
*
>
(
this
)
)
;
mDoc
-
>
RemoveAccessible
(
static_cast
<
Derived
*
>
(
this
)
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
SetChildDoc
(
DocAccessibleParent
*
aChildDoc
)
{
MOZ_ASSERT
(
aChildDoc
)
;
MOZ_ASSERT
(
mChildren
.
Length
(
)
=
=
0
)
;
mChildren
.
AppendElement
(
aChildDoc
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ClearChildDoc
(
DocAccessibleParent
*
aChildDoc
)
{
MOZ_ASSERT
(
aChildDoc
)
;
MOZ_ASSERT
(
mChildren
.
Length
(
)
<
=
1
)
;
mChildren
.
RemoveElement
(
aChildDoc
)
;
}
template
<
class
Derived
>
uint32_t
RemoteAccessibleBase
<
Derived
>
:
:
EmbeddedChildCount
(
)
{
size_t
count
=
0
kids
=
mChildren
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
kids
;
i
+
+
)
{
if
(
mChildren
[
i
]
-
>
IsEmbeddedObject
(
)
)
{
count
+
+
;
}
}
return
count
;
}
template
<
class
Derived
>
int32_t
RemoteAccessibleBase
<
Derived
>
:
:
IndexOfEmbeddedChild
(
Accessible
*
aChild
)
{
size_t
index
=
0
kids
=
mChildren
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
kids
;
i
+
+
)
{
if
(
mChildren
[
i
]
-
>
IsEmbeddedObject
(
)
)
{
if
(
mChildren
[
i
]
=
=
aChild
)
{
return
index
;
}
index
+
+
;
}
}
return
-
1
;
}
template
<
class
Derived
>
Accessible
*
RemoteAccessibleBase
<
Derived
>
:
:
EmbeddedChildAt
(
uint32_t
aChildIdx
)
{
size_t
index
=
0
kids
=
mChildren
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
kids
;
i
+
+
)
{
if
(
!
mChildren
[
i
]
-
>
IsEmbeddedObject
(
)
)
{
continue
;
}
if
(
index
=
=
aChildIdx
)
{
return
mChildren
[
i
]
;
}
index
+
+
;
}
return
nullptr
;
}
template
<
class
Derived
>
LocalAccessible
*
RemoteAccessibleBase
<
Derived
>
:
:
OuterDocOfRemoteBrowser
(
)
const
{
auto
tab
=
static_cast
<
dom
:
:
BrowserParent
*
>
(
mDoc
-
>
Manager
(
)
)
;
dom
:
:
Element
*
frame
=
tab
-
>
GetOwnerElement
(
)
;
NS_ASSERTION
(
frame
"
why
isn
'
t
the
tab
in
a
frame
!
"
)
;
if
(
!
frame
)
return
nullptr
;
DocAccessible
*
chromeDoc
=
GetExistingDocAccessible
(
frame
-
>
OwnerDoc
(
)
)
;
return
chromeDoc
?
chromeDoc
-
>
GetAccessible
(
frame
)
:
nullptr
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
SetParent
(
Derived
*
aParent
)
{
if
(
!
aParent
)
{
mParent
=
kNoParent
;
}
else
{
MOZ_ASSERT
(
!
IsDoc
(
)
|
|
!
aParent
-
>
IsDoc
(
)
)
;
mParent
=
aParent
-
>
ID
(
)
;
}
}
template
<
class
Derived
>
Derived
*
RemoteAccessibleBase
<
Derived
>
:
:
RemoteParent
(
)
const
{
if
(
mParent
=
=
kNoParent
)
{
return
nullptr
;
}
if
(
!
IsDoc
(
)
)
{
return
Document
(
)
-
>
GetAccessible
(
mParent
)
;
}
if
(
AsDoc
(
)
-
>
IsTopLevel
(
)
)
{
return
nullptr
;
}
DocAccessibleParent
*
parentDoc
=
AsDoc
(
)
-
>
ParentDoc
(
)
;
MOZ_ASSERT
(
parentDoc
)
;
MOZ_ASSERT
(
mParent
)
;
return
parentDoc
-
>
GetAccessible
(
mParent
)
;
}
template
<
class
Derived
>
ENameValueFlag
RemoteAccessibleBase
<
Derived
>
:
:
Name
(
nsString
&
aName
)
const
{
ENameValueFlag
nameFlag
=
eNameOK
;
if
(
mCachedFields
)
{
if
(
IsText
(
)
)
{
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
text
aName
)
;
return
eNameOK
;
}
auto
cachedNameFlag
=
mCachedFields
-
>
GetAttribute
<
int32_t
>
(
nsGkAtoms
:
:
explicit_name
)
;
if
(
cachedNameFlag
)
{
nameFlag
=
static_cast
<
ENameValueFlag
>
(
*
cachedNameFlag
)
;
}
if
(
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
name
aName
)
)
{
VERIFY_CACHE
(
CacheDomain
:
:
NameAndDescription
)
;
return
nameFlag
;
}
}
MOZ_ASSERT
(
aName
.
IsEmpty
(
)
)
;
aName
.
SetIsVoid
(
true
)
;
return
nameFlag
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
Description
(
nsString
&
aDescription
)
const
{
if
(
mCachedFields
)
{
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
description
aDescription
)
;
VERIFY_CACHE
(
CacheDomain
:
:
NameAndDescription
)
;
}
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
Value
(
nsString
&
aValue
)
const
{
if
(
mCachedFields
)
{
if
(
mCachedFields
-
>
HasAttribute
(
nsGkAtoms
:
:
aria_valuetext
)
)
{
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
aria_valuetext
aValue
)
;
VERIFY_CACHE
(
CacheDomain
:
:
Value
)
;
return
;
}
if
(
HasNumericValue
(
)
)
{
double
checkValue
=
CurValue
(
)
;
if
(
!
std
:
:
isnan
(
checkValue
)
)
{
aValue
.
AppendFloat
(
checkValue
)
;
}
return
;
}
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
if
(
roleMapEntry
&
&
roleMapEntry
-
>
Is
(
nsGkAtoms
:
:
textbox
)
)
{
nsTextEquivUtils
:
:
GetTextEquivFromSubtree
(
this
aValue
)
;
return
;
}
if
(
IsCombobox
(
)
)
{
const
Accessible
*
option
=
const_cast
<
RemoteAccessibleBase
<
Derived
>
*
>
(
this
)
-
>
GetSelectedItem
(
0
)
;
if
(
option
)
{
option
-
>
Name
(
aValue
)
;
}
else
{
nsTextEquivUtils
:
:
GetTextEquivFromSubtree
(
this
aValue
)
;
}
return
;
}
if
(
IsTextLeaf
(
)
|
|
IsImage
(
)
)
{
if
(
const
Accessible
*
actionAcc
=
ActionAncestor
(
)
)
{
if
(
const_cast
<
Accessible
*
>
(
actionAcc
)
-
>
State
(
)
&
states
:
:
LINKED
)
{
return
actionAcc
-
>
Value
(
aValue
)
;
}
}
}
}
}
template
<
class
Derived
>
double
RemoteAccessibleBase
<
Derived
>
:
:
CurValue
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
value
=
mCachedFields
-
>
GetAttribute
<
double
>
(
nsGkAtoms
:
:
value
)
)
{
VERIFY_CACHE
(
CacheDomain
:
:
Value
)
;
return
*
value
;
}
}
return
UnspecifiedNaN
<
double
>
(
)
;
}
template
<
class
Derived
>
double
RemoteAccessibleBase
<
Derived
>
:
:
MinValue
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
min
=
mCachedFields
-
>
GetAttribute
<
double
>
(
nsGkAtoms
:
:
min
)
)
{
VERIFY_CACHE
(
CacheDomain
:
:
Value
)
;
return
*
min
;
}
}
return
UnspecifiedNaN
<
double
>
(
)
;
}
template
<
class
Derived
>
double
RemoteAccessibleBase
<
Derived
>
:
:
MaxValue
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
max
=
mCachedFields
-
>
GetAttribute
<
double
>
(
nsGkAtoms
:
:
max
)
)
{
VERIFY_CACHE
(
CacheDomain
:
:
Value
)
;
return
*
max
;
}
}
return
UnspecifiedNaN
<
double
>
(
)
;
}
template
<
class
Derived
>
double
RemoteAccessibleBase
<
Derived
>
:
:
Step
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
step
=
mCachedFields
-
>
GetAttribute
<
double
>
(
nsGkAtoms
:
:
step
)
)
{
VERIFY_CACHE
(
CacheDomain
:
:
Value
)
;
return
*
step
;
}
}
return
UnspecifiedNaN
<
double
>
(
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
SetCurValue
(
double
aValue
)
{
if
(
!
HasNumericValue
(
)
|
|
IsProgress
(
)
)
{
return
false
;
}
const
uint32_t
kValueCannotChange
=
states
:
:
READONLY
|
states
:
:
UNAVAILABLE
;
if
(
State
(
)
&
kValueCannotChange
)
{
return
false
;
}
double
checkValue
=
MinValue
(
)
;
if
(
!
std
:
:
isnan
(
checkValue
)
&
&
aValue
<
checkValue
)
{
return
false
;
}
checkValue
=
MaxValue
(
)
;
if
(
!
std
:
:
isnan
(
checkValue
)
&
&
aValue
>
checkValue
)
{
return
false
;
}
Unused
<
<
mDoc
-
>
SendSetCurValue
(
mID
aValue
)
;
return
true
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
ContainsPoint
(
int32_t
aX
int32_t
aY
)
{
if
(
!
BoundsWithOffset
(
Nothing
(
)
true
)
.
Contains
(
aX
aY
)
)
{
return
false
;
}
if
(
!
IsTextLeaf
(
)
)
{
return
true
;
}
auto
lines
=
GetCachedTextLines
(
)
;
if
(
!
lines
)
{
return
true
;
}
uint32_t
length
=
lines
-
>
Length
(
)
;
MOZ_ASSERT
(
length
>
0
"
Line
starts
shouldn
'
t
be
in
cache
if
there
aren
'
t
any
"
)
;
if
(
length
=
=
0
|
|
(
length
=
=
1
&
&
(
*
lines
)
[
0
]
=
=
0
)
)
{
return
true
;
}
int32_t
lineStart
=
0
;
for
(
uint32_t
index
=
0
;
index
<
=
length
;
+
+
index
)
{
int32_t
lineEnd
;
if
(
index
<
length
)
{
int32_t
nextLineStart
=
(
*
lines
)
[
index
]
;
if
(
nextLineStart
=
=
0
)
{
MOZ_ASSERT
(
index
=
=
0
)
;
continue
;
}
lineEnd
=
nextLineStart
-
1
;
}
else
{
lineEnd
=
static_cast
<
int32_t
>
(
nsAccUtils
:
:
TextLength
(
this
)
)
-
1
;
}
MOZ_ASSERT
(
lineEnd
>
=
lineStart
)
;
nsRect
lineRect
=
GetCachedCharRect
(
lineStart
)
;
if
(
lineEnd
>
lineStart
)
{
lineRect
.
UnionRect
(
lineRect
GetCachedCharRect
(
lineEnd
)
)
;
}
if
(
BoundsWithOffset
(
Some
(
lineRect
)
true
)
.
Contains
(
aX
aY
)
)
{
return
true
;
}
lineStart
=
lineEnd
+
1
;
}
return
false
;
}
template
<
class
Derived
>
RemoteAccessible
*
RemoteAccessibleBase
<
Derived
>
:
:
DoFuzzyHittesting
(
)
{
uint32_t
childCount
=
ChildCount
(
)
;
if
(
!
childCount
)
{
return
nullptr
;
}
RemoteAccessible
*
clippedContainer
=
nullptr
;
for
(
uint32_t
i
=
0
;
i
<
childCount
;
i
+
+
)
{
RemoteAccessible
*
child
=
RemoteChildAt
(
i
)
;
if
(
child
-
>
Role
(
)
=
=
roles
:
:
TEXT_CONTAINER
)
{
if
(
child
-
>
IsClipped
(
)
)
{
clippedContainer
=
child
;
break
;
}
}
}
RemoteAccessible
*
maybeTextLeaf
=
clippedContainer
;
while
(
maybeTextLeaf
)
{
bool
continueSearch
=
false
;
childCount
=
maybeTextLeaf
-
>
ChildCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
childCount
;
i
+
+
)
{
RemoteAccessible
*
child
=
maybeTextLeaf
-
>
RemoteChildAt
(
i
)
;
if
(
child
-
>
Role
(
)
=
=
roles
:
:
TEXT_CONTAINER
)
{
maybeTextLeaf
=
child
;
continueSearch
=
true
;
break
;
}
if
(
child
-
>
IsTextLeaf
(
)
)
{
maybeTextLeaf
=
child
;
}
}
if
(
maybeTextLeaf
&
&
maybeTextLeaf
-
>
IsTextLeaf
(
)
)
{
return
maybeTextLeaf
;
}
if
(
!
continueSearch
)
{
break
;
}
}
return
nullptr
;
}
template
<
class
Derived
>
Accessible
*
RemoteAccessibleBase
<
Derived
>
:
:
ChildAtPoint
(
int32_t
aX
int32_t
aY
LocalAccessible
:
:
EWhichChildAtPoint
aWhichChild
)
{
const
bool
hitTesting
=
true
;
if
(
IsOuterDoc
(
)
&
&
aWhichChild
=
=
EWhichChildAtPoint
:
:
DirectChild
)
{
if
(
BoundsWithOffset
(
Nothing
(
)
hitTesting
)
.
Contains
(
aX
aY
)
)
{
return
RemoteFirstChild
(
)
;
}
return
nullptr
;
}
RemoteAccessible
*
lastMatch
=
nullptr
;
if
(
DocAccessibleParent
*
doc
=
IsDoc
(
)
?
AsDoc
(
)
:
mDoc
)
{
if
(
!
doc
-
>
mCachedFields
)
{
return
nullptr
;
}
if
(
auto
maybeViewportCache
=
doc
-
>
mCachedFields
-
>
GetAttribute
<
nsTArray
<
uint64_t
>
>
(
nsGkAtoms
:
:
viewport
)
)
{
const
nsTArray
<
uint64_t
>
&
viewportCache
=
*
maybeViewportCache
;
for
(
auto
id
:
viewportCache
)
{
RemoteAccessible
*
acc
=
doc
-
>
GetAccessible
(
id
)
;
if
(
!
acc
)
{
continue
;
}
if
(
acc
-
>
IsOuterDoc
(
)
&
&
aWhichChild
=
=
EWhichChildAtPoint
:
:
DeepestChild
&
&
acc
-
>
BoundsWithOffset
(
Nothing
(
)
hitTesting
)
.
Contains
(
aX
aY
)
)
{
RemoteAccessible
*
innerDoc
=
acc
-
>
RemoteFirstChild
(
)
;
if
(
innerDoc
)
{
MOZ_ASSERT
(
innerDoc
-
>
IsDoc
(
)
)
;
Accessible
*
deepestAcc
=
innerDoc
-
>
ChildAtPoint
(
aX
aY
EWhichChildAtPoint
:
:
DeepestChild
)
;
MOZ_ASSERT
(
!
deepestAcc
|
|
deepestAcc
-
>
IsRemote
(
)
)
;
lastMatch
=
deepestAcc
?
deepestAcc
-
>
AsRemote
(
)
:
nullptr
;
break
;
}
lastMatch
=
acc
;
break
;
}
if
(
acc
=
=
this
)
{
MOZ_ASSERT
(
!
acc
-
>
IsOuterDoc
(
)
)
;
if
(
!
lastMatch
&
&
BoundsWithOffset
(
Nothing
(
)
hitTesting
)
.
Contains
(
aX
aY
)
)
{
lastMatch
=
acc
;
}
break
;
}
if
(
acc
-
>
ContainsPoint
(
aX
aY
)
)
{
lastMatch
=
acc
;
break
;
}
}
if
(
lastMatch
)
{
RemoteAccessible
*
fuzzyMatch
=
lastMatch
-
>
DoFuzzyHittesting
(
)
;
lastMatch
=
fuzzyMatch
?
fuzzyMatch
:
lastMatch
;
}
}
}
if
(
aWhichChild
=
=
EWhichChildAtPoint
:
:
DirectChild
&
&
lastMatch
)
{
RemoteAccessible
*
parent
=
lastMatch
-
>
RemoteParent
(
)
;
for
(
;
;
)
{
if
(
parent
=
=
this
)
{
break
;
}
if
(
!
parent
|
|
parent
-
>
IsDoc
(
)
)
{
lastMatch
=
nullptr
;
break
;
}
lastMatch
=
parent
;
parent
=
parent
-
>
RemoteParent
(
)
;
}
}
else
if
(
aWhichChild
=
=
EWhichChildAtPoint
:
:
DeepestChild
&
&
lastMatch
&
&
!
IsDoc
(
)
&
&
!
IsAncestorOf
(
lastMatch
)
)
{
lastMatch
=
nullptr
;
}
if
(
!
lastMatch
&
&
BoundsWithOffset
(
Nothing
(
)
hitTesting
)
.
Contains
(
aX
aY
)
)
{
return
this
;
}
return
lastMatch
;
}
template
<
class
Derived
>
Maybe
<
nsRect
>
RemoteAccessibleBase
<
Derived
>
:
:
RetrieveCachedBounds
(
)
const
{
if
(
!
mCachedFields
)
{
return
Nothing
(
)
;
}
Maybe
<
const
nsTArray
<
int32_t
>
&
>
maybeArray
=
mCachedFields
-
>
GetAttribute
<
nsTArray
<
int32_t
>
>
(
nsGkAtoms
:
:
relativeBounds
)
;
if
(
maybeArray
)
{
const
nsTArray
<
int32_t
>
&
relativeBoundsArr
=
*
maybeArray
;
MOZ_ASSERT
(
relativeBoundsArr
.
Length
(
)
=
=
4
"
Incorrectly
sized
bounds
array
"
)
;
nsRect
relativeBoundsRect
(
relativeBoundsArr
[
0
]
relativeBoundsArr
[
1
]
relativeBoundsArr
[
2
]
relativeBoundsArr
[
3
]
)
;
return
Some
(
relativeBoundsRect
)
;
}
return
Nothing
(
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ApplyCrossDocOffset
(
nsRect
&
aBounds
)
const
{
if
(
!
IsDoc
(
)
)
{
return
;
}
RemoteAccessible
*
parentAcc
=
RemoteParent
(
)
;
if
(
!
parentAcc
|
|
!
parentAcc
-
>
IsOuterDoc
(
)
)
{
return
;
}
Maybe
<
const
nsTArray
<
int32_t
>
&
>
maybeOffset
=
parentAcc
-
>
mCachedFields
-
>
GetAttribute
<
nsTArray
<
int32_t
>
>
(
nsGkAtoms
:
:
crossorigin
)
;
if
(
!
maybeOffset
)
{
return
;
}
MOZ_ASSERT
(
maybeOffset
-
>
Length
(
)
=
=
2
)
;
const
nsTArray
<
int32_t
>
&
offset
=
*
maybeOffset
;
aBounds
.
MoveBy
(
offset
[
0
]
offset
[
1
]
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
ApplyTransform
(
nsRect
&
aCumulativeBounds
)
const
{
Maybe
<
const
UniquePtr
<
gfx
:
:
Matrix4x4
>
&
>
maybeTransform
=
mCachedFields
-
>
GetAttribute
<
UniquePtr
<
gfx
:
:
Matrix4x4
>
>
(
nsGkAtoms
:
:
transform
)
;
if
(
!
maybeTransform
)
{
return
false
;
}
auto
mtxInPixels
=
gfx
:
:
Matrix4x4Typed
<
CSSPixel
CSSPixel
>
:
:
FromUnknownMatrix
(
*
(
*
maybeTransform
)
)
;
auto
boundsInPixels
=
CSSRect
:
:
FromAppUnits
(
aCumulativeBounds
)
;
boundsInPixels
=
mtxInPixels
.
TransformBounds
(
boundsInPixels
)
;
aCumulativeBounds
=
CSSRect
:
:
ToAppUnits
(
boundsInPixels
)
;
return
true
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
ApplyScrollOffset
(
nsRect
&
aBounds
)
const
{
Maybe
<
const
nsTArray
<
int32_t
>
&
>
maybeScrollPosition
=
mCachedFields
-
>
GetAttribute
<
nsTArray
<
int32_t
>
>
(
nsGkAtoms
:
:
scrollPosition
)
;
if
(
!
maybeScrollPosition
|
|
maybeScrollPosition
-
>
Length
(
)
!
=
2
)
{
return
false
;
}
const
nsTArray
<
int32_t
>
&
scrollPosition
=
*
maybeScrollPosition
;
nsPoint
scrollOffset
(
-
scrollPosition
[
0
]
-
scrollPosition
[
1
]
)
;
aBounds
.
MoveBy
(
scrollOffset
.
x
scrollOffset
.
y
)
;
return
true
;
}
template
<
class
Derived
>
nsRect
RemoteAccessibleBase
<
Derived
>
:
:
BoundsInAppUnits
(
)
const
{
if
(
dom
:
:
CanonicalBrowsingContext
*
cbc
=
mDoc
-
>
GetBrowsingContext
(
)
-
>
Top
(
)
)
{
if
(
dom
:
:
BrowserParent
*
bp
=
cbc
-
>
GetBrowserParent
(
)
)
{
DocAccessibleParent
*
topDoc
=
bp
-
>
GetTopLevelDocAccessible
(
)
;
if
(
topDoc
&
&
topDoc
-
>
mCachedFields
)
{
auto
appUnitsPerDevPixel
=
topDoc
-
>
mCachedFields
-
>
GetAttribute
<
int32_t
>
(
nsGkAtoms
:
:
_moz_device_pixel_ratio
)
;
MOZ_ASSERT
(
appUnitsPerDevPixel
)
;
return
LayoutDeviceIntRect
:
:
ToAppUnits
(
Bounds
(
)
*
appUnitsPerDevPixel
)
;
}
}
}
return
LayoutDeviceIntRect
:
:
ToAppUnits
(
Bounds
(
)
AppUnitsPerCSSPixel
(
)
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
IsFixedPos
(
)
const
{
MOZ_ASSERT
(
mCachedFields
)
;
if
(
auto
maybePosition
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
position
)
)
{
return
*
maybePosition
=
=
nsGkAtoms
:
:
fixed
;
}
return
false
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
IsOverflowHidden
(
)
const
{
MOZ_ASSERT
(
mCachedFields
)
;
if
(
auto
maybeOverflow
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
overflow
)
)
{
return
*
maybeOverflow
=
=
nsGkAtoms
:
:
hidden
;
}
return
false
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
IsClipped
(
)
const
{
MOZ_ASSERT
(
mCachedFields
)
;
if
(
mCachedFields
-
>
GetAttribute
<
bool
>
(
nsGkAtoms
:
:
clip_rule
)
)
{
return
true
;
}
return
false
;
}
template
<
class
Derived
>
LayoutDeviceIntRect
RemoteAccessibleBase
<
Derived
>
:
:
BoundsWithOffset
(
Maybe
<
nsRect
>
aOffset
bool
aBoundsAreForHittesting
)
const
{
Maybe
<
nsRect
>
maybeBounds
=
RetrieveCachedBounds
(
)
;
if
(
maybeBounds
)
{
nsRect
bounds
=
*
maybeBounds
;
bounds
.
MoveTo
(
0
0
)
;
const
DocAccessibleParent
*
topDoc
=
IsDoc
(
)
?
AsDoc
(
)
:
nullptr
;
if
(
aOffset
.
isSome
(
)
)
{
nsRect
internalRect
=
*
aOffset
;
bounds
.
SetRectX
(
bounds
.
x
+
internalRect
.
x
internalRect
.
width
)
;
bounds
.
SetRectY
(
bounds
.
y
+
internalRect
.
y
internalRect
.
height
)
;
}
Unused
<
<
ApplyTransform
(
bounds
)
;
bounds
.
MoveBy
(
maybeBounds
-
>
TopLeft
(
)
)
;
ApplyCrossDocOffset
(
bounds
)
;
LayoutDeviceIntRect
devPxBounds
;
const
Accessible
*
acc
=
Parent
(
)
;
bool
encounteredFixedContainer
=
IsFixedPos
(
)
;
while
(
acc
&
&
acc
-
>
IsRemote
(
)
)
{
if
(
aBoundsAreForHittesting
&
&
bounds
.
IsEmpty
(
)
)
{
return
LayoutDeviceIntRect
{
}
;
}
RemoteAccessible
*
remoteAcc
=
const_cast
<
Accessible
*
>
(
acc
)
-
>
AsRemote
(
)
;
if
(
Maybe
<
nsRect
>
maybeRemoteBounds
=
remoteAcc
-
>
RetrieveCachedBounds
(
)
)
{
nsRect
remoteBounds
=
*
maybeRemoteBounds
;
if
(
remoteAcc
-
>
IsDoc
(
)
)
{
Maybe
<
float
>
res
=
remoteAcc
-
>
AsDoc
(
)
-
>
mCachedFields
-
>
GetAttribute
<
float
>
(
nsGkAtoms
:
:
resolution
)
;
MOZ_ASSERT
(
res
"
No
cached
document
resolution
found
.
"
)
;
bounds
.
ScaleRoundOut
(
res
.
valueOr
(
1
.
0f
)
)
;
topDoc
=
remoteAcc
-
>
AsDoc
(
)
;
}
remoteAcc
-
>
ApplyCrossDocOffset
(
remoteBounds
)
;
if
(
!
encounteredFixedContainer
)
{
const
bool
hasScrollArea
=
remoteAcc
-
>
ApplyScrollOffset
(
bounds
)
;
if
(
aBoundsAreForHittesting
&
&
(
hasScrollArea
|
|
remoteAcc
-
>
IsOverflowHidden
(
)
)
)
{
nsRect
selfRelativeVisibleBounds
(
0
0
remoteBounds
.
width
remoteBounds
.
height
)
;
bounds
=
bounds
.
SafeIntersect
(
selfRelativeVisibleBounds
)
;
}
}
if
(
remoteAcc
-
>
IsDoc
(
)
)
{
encounteredFixedContainer
=
false
;
}
if
(
!
encounteredFixedContainer
)
{
Unused
<
<
remoteAcc
-
>
ApplyTransform
(
bounds
)
;
bounds
.
MoveBy
(
remoteBounds
.
X
(
)
remoteBounds
.
Y
(
)
)
;
}
if
(
remoteAcc
-
>
IsFixedPos
(
)
)
{
encounteredFixedContainer
=
true
;
}
}
acc
=
acc
-
>
Parent
(
)
;
}
MOZ_ASSERT
(
topDoc
)
;
if
(
topDoc
)
{
auto
appUnitsPerDevPixel
=
topDoc
-
>
mCachedFields
-
>
GetAttribute
<
int32_t
>
(
nsGkAtoms
:
:
_moz_device_pixel_ratio
)
;
MOZ_ASSERT
(
appUnitsPerDevPixel
)
;
if
(
appUnitsPerDevPixel
)
{
devPxBounds
=
LayoutDeviceIntRect
:
:
FromAppUnitsToNearest
(
bounds
*
appUnitsPerDevPixel
)
;
}
}
#
if
!
defined
(
ANDROID
)
if
(
LocalAccessible
*
localAcc
=
acc
?
const_cast
<
Accessible
*
>
(
acc
)
-
>
AsLocal
(
)
:
nullptr
)
{
LayoutDeviceIntRect
localBounds
=
localAcc
-
>
Bounds
(
)
;
devPxBounds
.
MoveBy
(
localBounds
.
X
(
)
localBounds
.
Y
(
)
)
;
}
#
endif
return
devPxBounds
;
}
return
LayoutDeviceIntRect
(
)
;
}
template
<
class
Derived
>
LayoutDeviceIntRect
RemoteAccessibleBase
<
Derived
>
:
:
Bounds
(
)
const
{
return
BoundsWithOffset
(
Nothing
(
)
)
;
}
template
<
class
Derived
>
Relation
RemoteAccessibleBase
<
Derived
>
:
:
RelationByType
(
RelationType
aType
)
const
{
if
(
aType
=
=
RelationType
:
:
CONTAINING_TAB_PANE
)
{
if
(
dom
:
:
CanonicalBrowsingContext
*
cbc
=
mDoc
-
>
GetBrowsingContext
(
)
)
{
if
(
dom
:
:
CanonicalBrowsingContext
*
topCbc
=
cbc
-
>
Top
(
)
)
{
if
(
dom
:
:
BrowserParent
*
bp
=
topCbc
-
>
GetBrowserParent
(
)
)
{
return
Relation
(
bp
-
>
GetTopLevelDocAccessible
(
)
)
;
}
}
}
return
Relation
(
)
;
}
if
(
aType
=
=
RelationType
:
:
LINKS_TO
&
&
Role
(
)
=
=
roles
:
:
LINK
)
{
Pivot
p
=
Pivot
(
mDoc
)
;
nsString
href
;
Value
(
href
)
;
int32_t
i
=
href
.
FindChar
(
'
#
'
)
;
int32_t
len
=
static_cast
<
int32_t
>
(
href
.
Length
(
)
)
;
if
(
i
!
=
-
1
&
&
i
<
(
len
-
1
)
)
{
nsDependentSubstring
anchorName
=
Substring
(
href
i
+
1
len
)
;
MustPruneSameDocRule
rule
;
Accessible
*
nameMatch
=
nullptr
;
for
(
Accessible
*
match
=
p
.
Next
(
mDoc
rule
)
;
match
;
match
=
p
.
Next
(
match
rule
)
)
{
nsString
currID
;
match
-
>
DOMNodeID
(
currID
)
;
MOZ_ASSERT
(
match
-
>
IsRemote
(
)
)
;
if
(
anchorName
.
Equals
(
currID
)
)
{
return
Relation
(
match
-
>
AsRemote
(
)
)
;
}
if
(
!
nameMatch
)
{
nsString
currName
=
match
-
>
AsRemote
(
)
-
>
GetCachedHTMLNameAttribute
(
)
;
if
(
match
-
>
TagName
(
)
=
=
nsGkAtoms
:
:
a
&
&
anchorName
.
Equals
(
currName
)
)
{
nameMatch
=
match
;
}
}
}
return
nameMatch
?
Relation
(
nameMatch
-
>
AsRemote
(
)
)
:
Relation
(
)
;
}
return
Relation
(
)
;
}
if
(
aType
=
=
RelationType
:
:
NODE_CHILD_OF
)
{
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
if
(
roleMapEntry
&
&
(
roleMapEntry
-
>
role
=
=
roles
:
:
OUTLINEITEM
|
|
roleMapEntry
-
>
role
=
=
roles
:
:
LISTITEM
|
|
roleMapEntry
-
>
role
=
=
roles
:
:
ROW
)
)
{
if
(
const
AccGroupInfo
*
groupInfo
=
const_cast
<
RemoteAccessibleBase
<
Derived
>
*
>
(
this
)
-
>
GetOrCreateGroupInfo
(
)
)
{
return
Relation
(
groupInfo
-
>
ConceptualParent
(
)
)
;
}
}
return
Relation
(
)
;
}
if
(
aType
=
=
RelationType
:
:
NODE_PARENT_OF
)
{
const
nsRoleMapEntry
*
roleMapEntry
=
ARIARoleMap
(
)
;
if
(
roleMapEntry
&
&
(
roleMapEntry
-
>
role
=
=
roles
:
:
OUTLINEITEM
|
|
roleMapEntry
-
>
role
=
=
roles
:
:
LISTITEM
|
|
roleMapEntry
-
>
role
=
=
roles
:
:
ROW
|
|
roleMapEntry
-
>
role
=
=
roles
:
:
OUTLINE
|
|
roleMapEntry
-
>
role
=
=
roles
:
:
LIST
|
|
roleMapEntry
-
>
role
=
=
roles
:
:
TREE_TABLE
)
)
{
return
Relation
(
new
ItemIterator
(
this
)
)
;
}
return
Relation
(
)
;
}
if
(
aType
=
=
RelationType
:
:
MEMBER_OF
)
{
Relation
rel
=
Relation
(
)
;
if
(
IsHTMLRadioButton
(
)
)
{
nsString
name
=
GetCachedHTMLNameAttribute
(
)
;
if
(
name
.
IsEmpty
(
)
)
{
return
rel
;
}
RemoteAccessible
*
ancestor
=
RemoteParent
(
)
;
while
(
ancestor
&
&
ancestor
-
>
Role
(
)
!
=
roles
:
:
FORM
&
&
ancestor
!
=
mDoc
)
{
ancestor
=
ancestor
-
>
RemoteParent
(
)
;
}
if
(
ancestor
)
{
Pivot
p
=
Pivot
(
ancestor
)
;
PivotRadioNameRule
rule
(
name
)
;
Accessible
*
match
=
p
.
Next
(
ancestor
rule
)
;
while
(
match
)
{
rel
.
AppendTarget
(
match
-
>
AsRemote
(
)
)
;
match
=
p
.
Next
(
match
rule
)
;
}
}
return
rel
;
}
if
(
IsARIARole
(
nsGkAtoms
:
:
radio
)
)
{
RemoteAccessible
*
currParent
=
RemoteParent
(
)
;
while
(
currParent
&
&
currParent
-
>
Role
(
)
!
=
roles
:
:
RADIO_GROUP
)
{
currParent
=
currParent
-
>
RemoteParent
(
)
;
}
if
(
currParent
&
&
currParent
-
>
Role
(
)
=
=
roles
:
:
RADIO_GROUP
)
{
Pivot
p
=
Pivot
(
currParent
)
;
PivotRoleRule
rule
(
roles
:
:
RADIOBUTTON
)
;
Accessible
*
match
=
p
.
Next
(
currParent
rule
)
;
while
(
match
)
{
MOZ_ASSERT
(
match
-
>
IsRemote
(
)
"
We
should
only
be
traversing
the
remote
tree
.
"
)
;
rel
.
AppendTarget
(
match
-
>
AsRemote
(
)
)
;
match
=
p
.
Next
(
match
rule
)
;
}
}
}
return
rel
;
}
Relation
rel
;
if
(
!
mCachedFields
)
{
return
rel
;
}
for
(
const
auto
&
data
:
kRelationTypeAtoms
)
{
if
(
data
.
mType
!
=
aType
|
|
(
data
.
mValidTag
&
&
TagName
(
)
!
=
data
.
mValidTag
)
)
{
continue
;
}
if
(
auto
maybeIds
=
mCachedFields
-
>
GetAttribute
<
nsTArray
<
uint64_t
>
>
(
data
.
mAtom
)
)
{
rel
.
AppendIter
(
new
RemoteAccIterator
(
*
maybeIds
Document
(
)
)
)
;
}
break
;
}
if
(
auto
accRelMapEntry
=
mDoc
-
>
mReverseRelations
.
Lookup
(
ID
(
)
)
)
{
if
(
auto
reverseIdsEntry
=
accRelMapEntry
.
Data
(
)
.
Lookup
(
aType
)
)
{
rel
.
AppendIter
(
new
RemoteAccIterator
(
reverseIdsEntry
.
Data
(
)
Document
(
)
)
)
;
}
}
return
rel
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
AppendTextTo
(
nsAString
&
aText
uint32_t
aStartOffset
uint32_t
aLength
)
{
if
(
IsText
(
)
)
{
if
(
mCachedFields
)
{
if
(
auto
text
=
mCachedFields
-
>
GetAttribute
<
nsString
>
(
nsGkAtoms
:
:
text
)
)
{
aText
.
Append
(
Substring
(
*
text
aStartOffset
aLength
)
)
;
}
VERIFY_CACHE
(
CacheDomain
:
:
Text
)
;
}
return
;
}
if
(
aStartOffset
!
=
0
|
|
aLength
=
=
0
)
{
return
;
}
if
(
IsHTMLBr
(
)
)
{
aText
+
=
kForcedNewLineChar
;
}
else
if
(
RemoteParent
(
)
&
&
nsAccUtils
:
:
MustPrune
(
RemoteParent
(
)
)
)
{
aText
+
=
kImaginaryEmbeddedObjectChar
;
}
else
{
aText
+
=
kEmbeddedObjectChar
;
}
}
template
<
class
Derived
>
nsTArray
<
bool
>
RemoteAccessibleBase
<
Derived
>
:
:
PreProcessRelations
(
AccAttributes
*
aFields
)
{
nsTArray
<
bool
>
updateTracker
(
ArrayLength
(
kRelationTypeAtoms
)
)
;
for
(
auto
const
&
data
:
kRelationTypeAtoms
)
{
if
(
data
.
mValidTag
)
{
nsAtom
*
tag
=
TagName
(
)
;
if
(
!
tag
)
{
if
(
auto
maybeTag
=
aFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
tag
)
)
{
tag
=
*
maybeTag
;
}
}
MOZ_ASSERT
(
tag
|
|
IsTextLeaf
(
)
|
|
IsDoc
(
)
"
Could
not
fetch
tag
via
TagName
(
)
or
from
initial
cache
push
!
"
)
;
if
(
tag
!
=
data
.
mValidTag
)
{
updateTracker
.
AppendElement
(
false
)
;
continue
;
}
}
nsStaticAtom
*
const
relAtom
=
data
.
mAtom
;
auto
newRelationTargets
=
aFields
-
>
GetAttribute
<
nsTArray
<
uint64_t
>
>
(
relAtom
)
;
bool
shouldAddNewImplicitRels
=
newRelationTargets
&
&
newRelationTargets
-
>
Length
(
)
;
if
(
(
shouldAddNewImplicitRels
|
|
aFields
-
>
GetAttribute
<
DeleteEntry
>
(
relAtom
)
)
&
&
mCachedFields
)
{
if
(
auto
maybeOldIDs
=
mCachedFields
-
>
GetAttribute
<
nsTArray
<
uint64_t
>
>
(
relAtom
)
)
{
for
(
uint64_t
id
:
*
maybeOldIDs
)
{
if
(
auto
reverseRels
=
Document
(
)
-
>
mReverseRelations
.
Lookup
(
id
)
)
{
nsTArray
<
uint64_t
>
&
reverseRelIDs
=
reverseRels
-
>
LookupOrInsert
(
data
.
mReverseType
)
;
DebugOnly
<
bool
>
removed
=
reverseRelIDs
.
RemoveElement
(
ID
(
)
)
;
MOZ_ASSERT
(
removed
"
Can
'
t
find
old
reverse
relation
"
)
;
}
}
}
}
updateTracker
.
AppendElement
(
shouldAddNewImplicitRels
)
;
}
return
updateTracker
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
PostProcessRelations
(
const
nsTArray
<
bool
>
&
aToUpdate
)
{
size_t
updateCount
=
aToUpdate
.
Length
(
)
;
MOZ_ASSERT
(
updateCount
=
=
ArrayLength
(
kRelationTypeAtoms
)
"
Did
not
note
update
status
for
every
relation
type
!
"
)
;
for
(
size_t
i
=
0
;
i
<
updateCount
;
i
+
+
)
{
if
(
aToUpdate
.
ElementAt
(
i
)
)
{
auto
const
&
data
=
kRelationTypeAtoms
[
i
]
;
const
nsTArray
<
uint64_t
>
&
newIDs
=
*
mCachedFields
-
>
GetAttribute
<
nsTArray
<
uint64_t
>
>
(
data
.
mAtom
)
;
for
(
uint64_t
id
:
newIDs
)
{
nsTHashMap
<
RelationType
nsTArray
<
uint64_t
>
>
&
relations
=
Document
(
)
-
>
mReverseRelations
.
LookupOrInsert
(
id
)
;
nsTArray
<
uint64_t
>
&
ids
=
relations
.
LookupOrInsert
(
data
.
mReverseType
)
;
ids
.
AppendElement
(
ID
(
)
)
;
}
}
}
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
PruneRelationsOnShutdown
(
)
{
auto
reverseRels
=
mDoc
-
>
mReverseRelations
.
Lookup
(
ID
(
)
)
;
if
(
!
reverseRels
)
{
return
;
}
for
(
auto
const
&
data
:
kRelationTypeAtoms
)
{
auto
reverseTargetList
=
reverseRels
-
>
Lookup
(
data
.
mReverseType
)
;
if
(
!
reverseTargetList
)
{
continue
;
}
for
(
uint64_t
id
:
*
reverseTargetList
)
{
RemoteAccessible
*
affectedAcc
=
mDoc
-
>
GetAccessible
(
id
)
;
if
(
!
affectedAcc
)
{
continue
;
}
if
(
auto
forwardTargetList
=
affectedAcc
-
>
mCachedFields
-
>
GetMutableAttribute
<
nsTArray
<
uint64_t
>
>
(
data
.
mAtom
)
)
{
forwardTargetList
-
>
RemoveElement
(
ID
(
)
)
;
if
(
!
forwardTargetList
-
>
Length
(
)
)
{
affectedAcc
-
>
mCachedFields
-
>
Remove
(
data
.
mAtom
)
;
}
}
}
}
reverseRels
.
Remove
(
)
;
}
template
<
class
Derived
>
uint32_t
RemoteAccessibleBase
<
Derived
>
:
:
GetCachedTextLength
(
)
{
MOZ_ASSERT
(
!
HasChildren
(
)
)
;
if
(
!
mCachedFields
)
{
return
0
;
}
VERIFY_CACHE
(
CacheDomain
:
:
Text
)
;
auto
text
=
mCachedFields
-
>
GetAttribute
<
nsString
>
(
nsGkAtoms
:
:
text
)
;
if
(
!
text
)
{
return
0
;
}
return
text
-
>
Length
(
)
;
}
template
<
class
Derived
>
Maybe
<
const
nsTArray
<
int32_t
>
&
>
RemoteAccessibleBase
<
Derived
>
:
:
GetCachedTextLines
(
)
{
MOZ_ASSERT
(
!
HasChildren
(
)
)
;
if
(
!
mCachedFields
)
{
return
Nothing
(
)
;
}
VERIFY_CACHE
(
CacheDomain
:
:
Text
)
;
return
mCachedFields
-
>
GetAttribute
<
nsTArray
<
int32_t
>
>
(
nsGkAtoms
:
:
line
)
;
}
template
<
class
Derived
>
nsRect
RemoteAccessibleBase
<
Derived
>
:
:
GetCachedCharRect
(
int32_t
aOffset
)
{
MOZ_ASSERT
(
IsText
(
)
)
;
if
(
!
mCachedFields
)
{
return
nsRect
(
)
;
}
if
(
Maybe
<
const
nsTArray
<
int32_t
>
&
>
maybeCharData
=
mCachedFields
-
>
GetAttribute
<
nsTArray
<
int32_t
>
>
(
nsGkAtoms
:
:
characterData
)
)
{
const
nsTArray
<
int32_t
>
&
charData
=
*
maybeCharData
;
const
int32_t
index
=
aOffset
*
kNumbersInRect
;
if
(
index
<
static_cast
<
int32_t
>
(
charData
.
Length
(
)
)
)
{
return
nsRect
(
charData
[
index
]
charData
[
index
+
1
]
charData
[
index
+
2
]
charData
[
index
+
3
]
)
;
}
MOZ_ASSERT
(
index
=
=
static_cast
<
int32_t
>
(
charData
.
Length
(
)
)
)
;
}
return
nsRect
(
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
DOMNodeID
(
nsString
&
aID
)
const
{
if
(
mCachedFields
)
{
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
id
aID
)
;
VERIFY_CACHE
(
CacheDomain
:
:
DOMNodeIDAndClass
)
;
}
}
#
if
!
defined
(
XP_WIN
)
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ScrollToPoint
(
uint32_t
aScrollType
int32_t
aX
int32_t
aY
)
{
Unused
<
<
mDoc
-
>
SendScrollToPoint
(
mID
aScrollType
aX
aY
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
Announce
(
const
nsString
&
aAnnouncement
uint16_t
aPriority
)
{
Unused
<
<
mDoc
-
>
SendAnnounce
(
mID
aAnnouncement
aPriority
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ScrollSubstringToPoint
(
int32_t
aStartOffset
int32_t
aEndOffset
uint32_t
aCoordinateType
int32_t
aX
int32_t
aY
)
{
Unused
<
<
mDoc
-
>
SendScrollSubstringToPoint
(
mID
aStartOffset
aEndOffset
aCoordinateType
aX
aY
)
;
}
#
endif
template
<
class
Derived
>
RefPtr
<
const
AccAttributes
>
RemoteAccessibleBase
<
Derived
>
:
:
GetCachedTextAttributes
(
)
{
MOZ_ASSERT
(
IsText
(
)
|
|
IsHyperText
(
)
)
;
if
(
mCachedFields
)
{
auto
attrs
=
mCachedFields
-
>
GetAttributeRefPtr
<
AccAttributes
>
(
nsGkAtoms
:
:
style
)
;
VERIFY_CACHE
(
CacheDomain
:
:
Text
)
;
return
attrs
;
}
return
nullptr
;
}
template
<
class
Derived
>
already_AddRefed
<
AccAttributes
>
RemoteAccessibleBase
<
Derived
>
:
:
DefaultTextAttributes
(
)
{
RefPtr
<
const
AccAttributes
>
attrs
=
GetCachedTextAttributes
(
)
;
RefPtr
<
AccAttributes
>
result
=
new
AccAttributes
(
)
;
if
(
attrs
)
{
attrs
-
>
CopyTo
(
result
)
;
}
return
result
.
forget
(
)
;
}
template
<
class
Derived
>
RefPtr
<
const
AccAttributes
>
RemoteAccessibleBase
<
Derived
>
:
:
GetCachedARIAAttributes
(
)
const
{
if
(
mCachedFields
)
{
auto
attrs
=
mCachedFields
-
>
GetAttributeRefPtr
<
AccAttributes
>
(
nsGkAtoms
:
:
aria
)
;
VERIFY_CACHE
(
CacheDomain
:
:
ARIA
)
;
return
attrs
;
}
return
nullptr
;
}
template
<
class
Derived
>
nsString
RemoteAccessibleBase
<
Derived
>
:
:
GetCachedHTMLNameAttribute
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
maybeName
=
mCachedFields
-
>
GetAttribute
<
nsString
>
(
nsGkAtoms
:
:
attributeName
)
)
{
return
*
maybeName
;
}
}
return
nsString
(
)
;
}
template
<
class
Derived
>
uint64_t
RemoteAccessibleBase
<
Derived
>
:
:
State
(
)
{
uint64_t
state
=
0
;
if
(
mCachedFields
)
{
if
(
auto
rawState
=
mCachedFields
-
>
GetAttribute
<
uint64_t
>
(
nsGkAtoms
:
:
state
)
)
{
VERIFY_CACHE
(
CacheDomain
:
:
State
)
;
state
=
*
rawState
;
if
(
!
(
state
&
states
:
:
UNAVAILABLE
)
)
{
state
|
=
states
:
:
ENABLED
|
states
:
:
SENSITIVE
;
}
if
(
state
&
states
:
:
EXPANDABLE
&
&
!
(
state
&
states
:
:
EXPANDED
)
)
{
state
|
=
states
:
:
COLLAPSED
;
}
}
ApplyImplicitState
(
state
)
;
auto
*
cbc
=
mDoc
-
>
GetBrowsingContext
(
)
;
if
(
cbc
&
&
!
cbc
-
>
IsActive
(
)
)
{
state
|
=
states
:
:
OFFSCREEN
;
}
else
{
if
(
!
mDoc
-
>
IsTopLevel
(
)
)
{
Accessible
*
docParent
=
mDoc
-
>
Parent
(
)
;
if
(
NS_WARN_IF
(
!
docParent
|
|
!
docParent
-
>
IsRemote
(
)
)
)
{
return
state
;
}
RemoteAccessible
*
outerDoc
=
docParent
-
>
AsRemote
(
)
;
DocAccessibleParent
*
embeddingDocument
=
outerDoc
-
>
Document
(
)
;
if
(
embeddingDocument
&
&
!
embeddingDocument
-
>
mOnScreenAccessibles
.
Contains
(
outerDoc
-
>
ID
(
)
)
)
{
state
|
=
states
:
:
OFFSCREEN
;
}
else
if
(
this
!
=
mDoc
&
&
!
mDoc
-
>
mOnScreenAccessibles
.
Contains
(
ID
(
)
)
)
{
state
|
=
states
:
:
OFFSCREEN
;
}
}
else
if
(
this
!
=
mDoc
&
&
!
mDoc
-
>
mOnScreenAccessibles
.
Contains
(
ID
(
)
)
)
{
state
|
=
states
:
:
OFFSCREEN
;
}
}
}
return
state
;
}
template
<
class
Derived
>
already_AddRefed
<
AccAttributes
>
RemoteAccessibleBase
<
Derived
>
:
:
Attributes
(
)
{
RefPtr
<
AccAttributes
>
attributes
=
new
AccAttributes
(
)
;
nsAccessibilityService
*
accService
=
GetAccService
(
)
;
if
(
!
accService
)
{
return
attributes
.
forget
(
)
;
}
if
(
mCachedFields
)
{
if
(
auto
tag
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
tag
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
tag
*
tag
)
;
}
GroupPos
groupPos
=
GroupPosition
(
)
;
nsAccUtils
:
:
SetAccGroupAttrs
(
attributes
groupPos
.
level
groupPos
.
setSize
groupPos
.
posInSet
)
;
bool
hierarchical
=
false
;
uint32_t
itemCount
=
AccGroupInfo
:
:
TotalItemCount
(
this
&
hierarchical
)
;
if
(
itemCount
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
child_item_count
static_cast
<
int32_t
>
(
itemCount
)
)
;
}
if
(
hierarchical
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
tree
true
)
;
}
if
(
auto
inputType
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
textInputType
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
textInputType
*
inputType
)
;
}
if
(
RefPtr
<
nsAtom
>
display
=
DisplayStyle
(
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
display
display
)
;
}
if
(
TableCellAccessible
*
cell
=
AsTableCell
(
)
)
{
TableAccessible
*
table
=
cell
-
>
Table
(
)
;
uint32_t
row
=
cell
-
>
RowIdx
(
)
;
uint32_t
col
=
cell
-
>
ColIdx
(
)
;
int32_t
cellIdx
=
table
-
>
CellIndexAt
(
row
col
)
;
if
(
cellIdx
!
=
-
1
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
tableCellIndex
cellIdx
)
;
}
}
if
(
bool
layoutGuess
=
TableIsProbablyForLayout
(
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
layout_guess
layoutGuess
)
;
}
accService
-
>
MarkupAttributes
(
this
attributes
)
;
const
nsRoleMapEntry
*
roleMap
=
ARIARoleMap
(
)
;
nsAutoString
role
;
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
role
role
)
;
if
(
role
.
IsEmpty
(
)
)
{
if
(
roleMap
&
&
roleMap
-
>
roleAtom
!
=
nsGkAtoms
:
:
_empty
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
xmlroles
roleMap
-
>
roleAtom
)
;
}
else
if
(
nsAtom
*
landmark
=
LandmarkRole
(
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
xmlroles
landmark
)
;
}
}
else
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
xmlroles
std
:
:
move
(
role
)
)
;
}
if
(
roleMap
)
{
nsAutoString
live
;
if
(
nsAccUtils
:
:
GetLiveAttrValue
(
roleMap
-
>
liveAttRule
live
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
aria_live
std
:
:
move
(
live
)
)
;
}
}
if
(
auto
ariaAttrs
=
GetCachedARIAAttributes
(
)
)
{
ariaAttrs
-
>
CopyTo
(
attributes
)
;
}
nsAccUtils
:
:
SetLiveContainerAttributes
(
attributes
this
)
;
nsString
id
;
DOMNodeID
(
id
)
;
if
(
!
id
.
IsEmpty
(
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
id
std
:
:
move
(
id
)
)
;
}
nsString
className
;
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
_class
className
)
;
if
(
!
className
.
IsEmpty
(
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
_class
std
:
:
move
(
className
)
)
;
}
if
(
IsImage
(
)
)
{
nsString
src
;
mCachedFields
-
>
GetAttribute
(
nsGkAtoms
:
:
src
src
)
;
if
(
!
src
.
IsEmpty
(
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
src
std
:
:
move
(
src
)
)
;
}
}
}
nsAutoString
name
;
if
(
Name
(
name
)
!
=
eNameFromSubtree
&
&
!
name
.
IsVoid
(
)
)
{
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
explicit_name
true
)
;
}
if
(
HasNumericValue
(
)
)
{
nsString
valuetext
;
Value
(
valuetext
)
;
attributes
-
>
SetAttribute
(
nsGkAtoms
:
:
aria_valuetext
std
:
:
move
(
valuetext
)
)
;
}
return
attributes
.
forget
(
)
;
}
template
<
class
Derived
>
nsAtom
*
RemoteAccessibleBase
<
Derived
>
:
:
TagName
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
tag
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
tag
)
)
{
return
*
tag
;
}
}
return
nullptr
;
}
template
<
class
Derived
>
already_AddRefed
<
nsAtom
>
RemoteAccessibleBase
<
Derived
>
:
:
InputType
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
inputType
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
textInputType
)
)
{
RefPtr
<
nsAtom
>
result
=
*
inputType
;
return
result
.
forget
(
)
;
}
}
return
nullptr
;
}
template
<
class
Derived
>
already_AddRefed
<
nsAtom
>
RemoteAccessibleBase
<
Derived
>
:
:
DisplayStyle
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
display
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
display
)
)
{
RefPtr
<
nsAtom
>
result
=
*
display
;
return
result
.
forget
(
)
;
}
}
return
nullptr
;
}
template
<
class
Derived
>
float
RemoteAccessibleBase
<
Derived
>
:
:
Opacity
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
opacity
=
mCachedFields
-
>
GetAttribute
<
float
>
(
nsGkAtoms
:
:
opacity
)
)
{
return
*
opacity
;
}
}
return
1
.
0f
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
LiveRegionAttributes
(
nsAString
*
aLive
nsAString
*
aRelevant
Maybe
<
bool
>
*
aAtomic
nsAString
*
aBusy
)
const
{
if
(
!
mCachedFields
)
{
return
;
}
RefPtr
<
const
AccAttributes
>
attrs
=
GetCachedARIAAttributes
(
)
;
if
(
!
attrs
)
{
return
;
}
if
(
aLive
)
{
attrs
-
>
GetAttribute
(
nsGkAtoms
:
:
aria_live
*
aLive
)
;
}
if
(
aRelevant
)
{
attrs
-
>
GetAttribute
(
nsGkAtoms
:
:
aria_relevant
*
aRelevant
)
;
}
if
(
aAtomic
)
{
if
(
auto
value
=
attrs
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
aria_atomic
)
)
{
*
aAtomic
=
Some
(
*
value
=
=
nsGkAtoms
:
:
_true
)
;
}
}
if
(
aBusy
)
{
attrs
-
>
GetAttribute
(
nsGkAtoms
:
:
aria_busy
*
aBusy
)
;
}
}
template
<
class
Derived
>
Maybe
<
bool
>
RemoteAccessibleBase
<
Derived
>
:
:
ARIASelected
(
)
const
{
if
(
mCachedFields
)
{
return
mCachedFields
-
>
GetAttribute
<
bool
>
(
nsGkAtoms
:
:
aria_selected
)
;
}
return
Nothing
(
)
;
}
template
<
class
Derived
>
nsAtom
*
RemoteAccessibleBase
<
Derived
>
:
:
GetPrimaryAction
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
action
=
mCachedFields
-
>
GetAttribute
<
RefPtr
<
nsAtom
>
>
(
nsGkAtoms
:
:
action
)
)
{
return
*
action
;
}
}
return
nullptr
;
}
template
<
class
Derived
>
uint8_t
RemoteAccessibleBase
<
Derived
>
:
:
ActionCount
(
)
const
{
uint8_t
actionCount
=
0
;
if
(
mCachedFields
)
{
if
(
HasPrimaryAction
(
)
|
|
ActionAncestor
(
)
)
{
actionCount
+
+
;
}
if
(
mCachedFields
-
>
HasAttribute
(
nsGkAtoms
:
:
longdesc
)
)
{
actionCount
+
+
;
}
VERIFY_CACHE
(
CacheDomain
:
:
Actions
)
;
}
return
actionCount
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
{
if
(
mCachedFields
)
{
aName
.
Truncate
(
)
;
nsAtom
*
action
=
GetPrimaryAction
(
)
;
bool
hasActionAncestor
=
!
action
&
&
ActionAncestor
(
)
;
switch
(
aIndex
)
{
case
0
:
if
(
action
)
{
action
-
>
ToString
(
aName
)
;
}
else
if
(
hasActionAncestor
)
{
aName
.
AssignLiteral
(
"
click
ancestor
"
)
;
}
else
if
(
mCachedFields
-
>
HasAttribute
(
nsGkAtoms
:
:
longdesc
)
)
{
aName
.
AssignLiteral
(
"
showlongdesc
"
)
;
}
break
;
case
1
:
if
(
(
action
|
|
hasActionAncestor
)
&
&
mCachedFields
-
>
HasAttribute
(
nsGkAtoms
:
:
longdesc
)
)
{
aName
.
AssignLiteral
(
"
showlongdesc
"
)
;
}
break
;
default
:
break
;
}
}
VERIFY_CACHE
(
CacheDomain
:
:
Actions
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
DoAction
(
uint8_t
aIndex
)
const
{
if
(
ActionCount
(
)
<
aIndex
+
1
)
{
return
false
;
}
Unused
<
<
mDoc
-
>
SendDoActionAsync
(
mID
aIndex
)
;
return
true
;
}
template
<
class
Derived
>
KeyBinding
RemoteAccessibleBase
<
Derived
>
:
:
AccessKey
(
)
const
{
if
(
mCachedFields
)
{
if
(
auto
value
=
mCachedFields
-
>
GetAttribute
<
uint64_t
>
(
nsGkAtoms
:
:
accesskey
)
)
{
return
KeyBinding
(
*
value
)
;
}
}
return
KeyBinding
(
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
SelectionRanges
(
nsTArray
<
TextRange
>
*
aRanges
)
const
{
Document
(
)
-
>
SelectionRanges
(
aRanges
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
RemoveFromSelection
(
int32_t
aSelectionNum
)
{
MOZ_ASSERT
(
IsHyperText
(
)
)
;
if
(
SelectionCount
(
)
<
=
aSelectionNum
)
{
return
false
;
}
Unused
<
<
mDoc
-
>
SendRemoveTextSelection
(
mID
aSelectionNum
)
;
return
true
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ARIAGroupPosition
(
int32_t
*
aLevel
int32_t
*
aSetSize
int32_t
*
aPosInSet
)
const
{
if
(
!
mCachedFields
)
{
return
;
}
if
(
aLevel
)
{
if
(
auto
level
=
mCachedFields
-
>
GetAttribute
<
int32_t
>
(
nsGkAtoms
:
:
aria_level
)
)
{
*
aLevel
=
*
level
;
}
}
if
(
aSetSize
)
{
if
(
auto
setsize
=
mCachedFields
-
>
GetAttribute
<
int32_t
>
(
nsGkAtoms
:
:
aria_setsize
)
)
{
*
aSetSize
=
*
setsize
;
}
}
if
(
aPosInSet
)
{
if
(
auto
posinset
=
mCachedFields
-
>
GetAttribute
<
int32_t
>
(
nsGkAtoms
:
:
aria_posinset
)
)
{
*
aPosInSet
=
*
posinset
;
}
}
}
template
<
class
Derived
>
AccGroupInfo
*
RemoteAccessibleBase
<
Derived
>
:
:
GetGroupInfo
(
)
const
{
if
(
!
mCachedFields
)
{
return
nullptr
;
}
if
(
auto
groupInfo
=
mCachedFields
-
>
GetAttribute
<
UniquePtr
<
AccGroupInfo
>
>
(
nsGkAtoms
:
:
group
)
)
{
return
groupInfo
-
>
get
(
)
;
}
return
nullptr
;
}
template
<
class
Derived
>
AccGroupInfo
*
RemoteAccessibleBase
<
Derived
>
:
:
GetOrCreateGroupInfo
(
)
{
AccGroupInfo
*
groupInfo
=
GetGroupInfo
(
)
;
if
(
groupInfo
)
{
return
groupInfo
;
}
groupInfo
=
AccGroupInfo
:
:
CreateGroupInfo
(
this
)
;
if
(
groupInfo
)
{
if
(
!
mCachedFields
)
{
mCachedFields
=
new
AccAttributes
(
)
;
}
mCachedFields
-
>
SetAttribute
(
nsGkAtoms
:
:
group
groupInfo
)
;
}
return
groupInfo
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
InvalidateGroupInfo
(
)
{
if
(
mCachedFields
)
{
mCachedFields
-
>
Remove
(
nsGkAtoms
:
:
group
)
;
}
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
GetPositionAndSetSize
(
int32_t
*
aPosInSet
int32_t
*
aSetSize
)
{
if
(
IsHTMLRadioButton
(
)
)
{
*
aSetSize
=
0
;
Relation
rel
=
RelationByType
(
RelationType
:
:
MEMBER_OF
)
;
while
(
Accessible
*
radio
=
rel
.
Next
(
)
)
{
+
+
*
aSetSize
;
if
(
radio
=
=
this
)
{
*
aPosInSet
=
*
aSetSize
;
}
}
return
;
}
Accessible
:
:
GetPositionAndSetSize
(
aPosInSet
aSetSize
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
HasPrimaryAction
(
)
const
{
return
mCachedFields
&
&
mCachedFields
-
>
HasAttribute
(
nsGkAtoms
:
:
action
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
TakeFocus
(
)
const
{
Unused
<
<
mDoc
-
>
SendTakeFocus
(
mID
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ScrollTo
(
uint32_t
aHow
)
const
{
Unused
<
<
mDoc
-
>
SendScrollTo
(
mID
aHow
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
SelectedItems
(
nsTArray
<
Accessible
*
>
*
aItems
)
{
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTED
)
;
for
(
Accessible
*
selected
=
p
.
First
(
rule
)
;
selected
;
selected
=
p
.
Next
(
selected
rule
)
)
{
aItems
-
>
AppendElement
(
selected
)
;
}
}
template
<
class
Derived
>
uint32_t
RemoteAccessibleBase
<
Derived
>
:
:
SelectedItemCount
(
)
{
uint32_t
count
=
0
;
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTED
)
;
for
(
Accessible
*
selected
=
p
.
First
(
rule
)
;
selected
;
selected
=
p
.
Next
(
selected
rule
)
)
{
count
+
+
;
}
return
count
;
}
template
<
class
Derived
>
Accessible
*
RemoteAccessibleBase
<
Derived
>
:
:
GetSelectedItem
(
uint32_t
aIndex
)
{
uint32_t
index
=
0
;
Accessible
*
selected
=
nullptr
;
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTED
)
;
for
(
selected
=
p
.
First
(
rule
)
;
selected
&
&
index
<
aIndex
;
selected
=
p
.
Next
(
selected
rule
)
)
{
index
+
+
;
}
return
selected
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
IsItemSelected
(
uint32_t
aIndex
)
{
uint32_t
index
=
0
;
Accessible
*
selectable
=
nullptr
;
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTABLE
)
;
for
(
selectable
=
p
.
First
(
rule
)
;
selectable
&
&
index
<
aIndex
;
selectable
=
p
.
Next
(
selectable
rule
)
)
{
index
+
+
;
}
return
selectable
&
&
selectable
-
>
State
(
)
&
states
:
:
SELECTED
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
AddItemToSelection
(
uint32_t
aIndex
)
{
uint32_t
index
=
0
;
Accessible
*
selectable
=
nullptr
;
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTABLE
)
;
for
(
selectable
=
p
.
First
(
rule
)
;
selectable
&
&
index
<
aIndex
;
selectable
=
p
.
Next
(
selectable
rule
)
)
{
index
+
+
;
}
if
(
selectable
)
selectable
-
>
SetSelected
(
true
)
;
return
static_cast
<
bool
>
(
selectable
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
RemoveItemFromSelection
(
uint32_t
aIndex
)
{
uint32_t
index
=
0
;
Accessible
*
selectable
=
nullptr
;
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTABLE
)
;
for
(
selectable
=
p
.
First
(
rule
)
;
selectable
&
&
index
<
aIndex
;
selectable
=
p
.
Next
(
selectable
rule
)
)
{
index
+
+
;
}
if
(
selectable
)
selectable
-
>
SetSelected
(
false
)
;
return
static_cast
<
bool
>
(
selectable
)
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
SelectAll
(
)
{
if
(
(
State
(
)
&
states
:
:
MULTISELECTABLE
)
=
=
0
)
{
return
false
;
}
bool
success
=
false
;
Accessible
*
selectable
=
nullptr
;
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTABLE
)
;
for
(
selectable
=
p
.
First
(
rule
)
;
selectable
;
selectable
=
p
.
Next
(
selectable
rule
)
)
{
success
=
true
;
selectable
-
>
SetSelected
(
true
)
;
}
return
success
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
UnselectAll
(
)
{
if
(
(
State
(
)
&
states
:
:
MULTISELECTABLE
)
=
=
0
)
{
return
false
;
}
bool
success
=
false
;
Accessible
*
selectable
=
nullptr
;
Pivot
p
=
Pivot
(
this
)
;
PivotStateRule
rule
(
states
:
:
SELECTABLE
)
;
for
(
selectable
=
p
.
First
(
rule
)
;
selectable
;
selectable
=
p
.
Next
(
selectable
rule
)
)
{
success
=
true
;
selectable
-
>
SetSelected
(
false
)
;
}
return
success
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
TakeSelection
(
)
{
Unused
<
<
mDoc
-
>
SendTakeSelection
(
mID
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
SetSelected
(
bool
aSelect
)
{
Unused
<
<
mDoc
-
>
SendSetSelected
(
mID
aSelect
)
;
}
template
<
class
Derived
>
TableAccessible
*
RemoteAccessibleBase
<
Derived
>
:
:
AsTable
(
)
{
if
(
IsTable
(
)
)
{
return
CachedTableAccessible
:
:
GetFrom
(
this
)
;
}
return
nullptr
;
}
template
<
class
Derived
>
TableCellAccessible
*
RemoteAccessibleBase
<
Derived
>
:
:
AsTableCell
(
)
{
if
(
IsTableCell
(
)
)
{
return
CachedTableCellAccessible
:
:
GetFrom
(
this
)
;
}
return
nullptr
;
}
template
<
class
Derived
>
bool
RemoteAccessibleBase
<
Derived
>
:
:
TableIsProbablyForLayout
(
)
{
if
(
mCachedFields
)
{
if
(
auto
layoutGuess
=
mCachedFields
-
>
GetAttribute
<
bool
>
(
nsGkAtoms
:
:
layout_guess
)
)
{
return
*
layoutGuess
;
}
}
return
false
;
}
template
<
class
Derived
>
nsTArray
<
int32_t
>
&
RemoteAccessibleBase
<
Derived
>
:
:
GetCachedHyperTextOffsets
(
)
{
if
(
mCachedFields
)
{
if
(
auto
offsets
=
mCachedFields
-
>
GetMutableAttribute
<
nsTArray
<
int32_t
>
>
(
nsGkAtoms
:
:
offset
)
)
{
return
*
offsets
;
}
}
nsTArray
<
int32_t
>
newOffsets
;
if
(
!
mCachedFields
)
{
mCachedFields
=
new
AccAttributes
(
)
;
}
mCachedFields
-
>
SetAttribute
(
nsGkAtoms
:
:
offset
std
:
:
move
(
newOffsets
)
)
;
return
*
mCachedFields
-
>
GetMutableAttribute
<
nsTArray
<
int32_t
>
>
(
nsGkAtoms
:
:
offset
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
SetCaretOffset
(
int32_t
aOffset
)
{
Unused
<
<
mDoc
-
>
SendSetCaretOffset
(
mID
aOffset
)
;
}
template
<
class
Derived
>
Maybe
<
int32_t
>
RemoteAccessibleBase
<
Derived
>
:
:
GetIntARIAAttr
(
nsAtom
*
aAttrName
)
const
{
if
(
RefPtr
<
const
AccAttributes
>
attrs
=
GetCachedARIAAttributes
(
)
)
{
if
(
auto
val
=
attrs
-
>
GetAttribute
<
int32_t
>
(
aAttrName
)
)
{
return
val
;
}
}
return
Nothing
(
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
Language
(
nsAString
&
aLocale
)
{
if
(
!
IsHyperText
(
)
)
{
return
;
}
if
(
auto
attrs
=
GetCachedTextAttributes
(
)
)
{
attrs
-
>
GetAttribute
(
nsGkAtoms
:
:
language
aLocale
)
;
}
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
ReplaceText
(
const
nsAString
&
aText
)
{
Unused
<
<
mDoc
-
>
SendReplaceText
(
mID
aText
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
InsertText
(
const
nsAString
&
aText
int32_t
aPosition
)
{
Unused
<
<
mDoc
-
>
SendInsertText
(
mID
aText
aPosition
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
CopyText
(
int32_t
aStartPos
int32_t
aEndPos
)
{
Unused
<
<
mDoc
-
>
SendCopyText
(
mID
aStartPos
aEndPos
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
CutText
(
int32_t
aStartPos
int32_t
aEndPos
)
{
Unused
<
<
mDoc
-
>
SendCutText
(
mID
aStartPos
aEndPos
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
DeleteText
(
int32_t
aStartPos
int32_t
aEndPos
)
{
Unused
<
<
mDoc
-
>
SendDeleteText
(
mID
aStartPos
aEndPos
)
;
}
template
<
class
Derived
>
void
RemoteAccessibleBase
<
Derived
>
:
:
PasteText
(
int32_t
aPosition
)
{
Unused
<
<
mDoc
-
>
SendPasteText
(
mID
aPosition
)
;
}
template
<
class
Derived
>
size_t
RemoteAccessibleBase
<
Derived
>
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
template
<
class
Derived
>
size_t
RemoteAccessibleBase
<
Derived
>
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
{
size_t
size
=
0
;
if
(
mCachedFields
)
{
size
+
=
mCachedFields
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
size
+
=
mChildren
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
return
size
;
}
template
class
RemoteAccessibleBase
<
RemoteAccessible
>
;
}
}
