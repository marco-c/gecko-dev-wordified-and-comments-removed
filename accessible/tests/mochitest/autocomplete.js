const
nsISupports
=
Ci
.
nsISupports
;
const
nsIAutoCompleteResult
=
Ci
.
nsIAutoCompleteResult
;
const
nsIAutoCompleteSearch
=
Ci
.
nsIAutoCompleteSearch
;
const
nsIFactory
=
Ci
.
nsIFactory
;
const
nsIUUIDGenerator
=
Ci
.
nsIUUIDGenerator
;
const
nsIComponentRegistrar
=
Ci
.
nsIComponentRegistrar
;
var
gDefaultAutoCompleteSearch
=
null
;
function
initAutoComplete
(
aValues
aComments
)
{
var
allResults
=
new
ResultsHeap
(
aValues
aComments
)
;
gDefaultAutoCompleteSearch
=
new
AutoCompleteSearch
(
"
test
-
a11y
-
search
"
allResults
)
;
registerAutoCompleteSearch
(
gDefaultAutoCompleteSearch
"
Accessibility
Test
AutoCompleteSearch
"
)
;
}
function
shutdownAutoComplete
(
)
{
unregisterAutoCompleteSearch
(
gDefaultAutoCompleteSearch
)
;
gDefaultAutoCompleteSearch
.
cid
=
null
;
gDefaultAutoCompleteSearch
=
null
;
}
function
registerAutoCompleteSearch
(
aSearch
aDescription
)
{
var
name
=
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
"
+
aSearch
.
name
;
var
uuidGenerator
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
nsIUUIDGenerator
)
;
var
cid
=
uuidGenerator
.
generateUUID
(
)
;
var
componentManager
=
Components
.
manager
.
QueryInterface
(
nsIComponentRegistrar
)
;
componentManager
.
registerFactory
(
cid
aDescription
name
aSearch
)
;
aSearch
.
cid
=
cid
;
}
function
unregisterAutoCompleteSearch
(
aSearch
)
{
var
componentManager
=
Components
.
manager
.
QueryInterface
(
nsIComponentRegistrar
)
;
componentManager
.
unregisterFactory
(
aSearch
.
cid
aSearch
)
;
}
function
ResultsHeap
(
aValues
aComments
)
{
this
.
values
=
aValues
;
this
.
comments
=
aComments
;
}
ResultsHeap
.
prototype
=
{
constructor
:
ResultsHeap
getAutoCompleteResultFor
(
aSearchString
)
{
var
values
=
[
]
comments
=
[
]
;
for
(
var
idx
=
0
;
idx
<
this
.
values
.
length
;
idx
+
+
)
{
if
(
this
.
values
[
idx
]
.
includes
(
aSearchString
)
)
{
values
.
push
(
this
.
values
[
idx
]
)
;
comments
.
push
(
this
.
comments
[
idx
]
)
;
}
}
return
new
AutoCompleteResult
(
values
comments
)
;
}
}
;
function
AutoCompleteSearch
(
aName
aAllResults
)
{
this
.
name
=
aName
;
this
.
allResults
=
aAllResults
;
}
AutoCompleteSearch
.
prototype
=
{
constructor
:
AutoCompleteSearch
startSearch
(
aSearchString
aSearchParam
aPreviousResult
aListener
)
{
var
result
=
this
.
allResults
.
getAutoCompleteResultFor
(
aSearchString
)
;
aListener
.
onSearchResult
(
this
result
)
;
}
stopSearch
(
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIFactory
"
"
nsIAutoCompleteSearch
"
]
)
createInstance
(
iid
)
{
return
this
.
QueryInterface
(
iid
)
;
}
name
:
null
allResults
:
null
}
;
function
AutoCompleteResult
(
aValues
aComments
)
{
this
.
values
=
aValues
;
this
.
comments
=
aComments
;
if
(
this
.
values
.
length
>
0
)
{
this
.
searchResult
=
nsIAutoCompleteResult
.
RESULT_SUCCESS
;
}
else
{
this
.
searchResult
=
nsIAutoCompleteResult
.
NOMATCH
;
}
}
AutoCompleteResult
.
prototype
=
{
constructor
:
AutoCompleteResult
searchString
:
"
"
searchResult
:
null
defaultIndex
:
0
get
matchCount
(
)
{
return
this
.
values
.
length
;
}
getValueAt
(
aIndex
)
{
return
this
.
values
[
aIndex
]
;
}
getLabelAt
(
aIndex
)
{
return
this
.
getValueAt
(
aIndex
)
;
}
getCommentAt
(
aIndex
)
{
return
this
.
comments
[
aIndex
]
;
}
getStyleAt
(
aIndex
)
{
return
null
;
}
getImageAt
(
aIndex
)
{
return
"
"
;
}
getFinalCompleteValueAt
(
aIndex
)
{
return
this
.
getValueAt
(
aIndex
)
;
}
isRemovableAt
(
aRowIndex
)
{
return
true
;
}
removeValueAt
(
aRowIndex
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIAutoCompleteResult
"
]
)
values
:
null
comments
:
null
}
;
