"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
shared
-
head
.
js
"
this
)
;
loadScripts
(
{
name
:
"
common
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
promisified
-
events
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
async
function
waitForIFrameA11yReady
(
iFrameBrowsingContext
)
{
await
SimpleTest
.
promiseFocus
(
window
)
;
await
SpecialPowers
.
spawn
(
iFrameBrowsingContext
[
]
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
function
waitForDocLoad
(
)
{
SpecialPowers
.
executeSoon
(
(
)
=
>
{
const
acc
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
accessibilityService
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIAccessibilityService
)
;
const
accDoc
=
acc
.
getAccessibleFor
(
content
.
document
)
;
let
state
=
{
}
;
accDoc
.
getState
(
state
{
}
)
;
if
(
state
.
value
&
SpecialPowers
.
Ci
.
nsIAccessibleStates
.
STATE_BUSY
)
{
SpecialPowers
.
executeSoon
(
waitForDocLoad
)
;
return
;
}
resolve
(
)
;
}
0
)
;
}
waitForDocLoad
(
)
;
}
)
;
}
)
;
}
async
function
waitForIFrameUpdates
(
)
{
await
new
Promise
(
resolve
=
>
requestAnimationFrame
(
resolve
)
)
;
await
new
Promise
(
resolve
=
>
requestAnimationFrame
(
resolve
)
)
;
}
async
function
spawnTestStates
(
browsingContext
elementId
expectedStates
)
{
function
testStates
(
id
expected
unexpected
)
{
const
acc
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
accessibilityService
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIAccessibilityService
)
;
const
target
=
content
.
document
.
getElementById
(
id
)
;
let
state
=
{
}
;
acc
.
getAccessibleFor
(
target
)
.
getState
(
state
{
}
)
;
if
(
expected
=
=
=
0
)
{
Assert
.
equal
(
state
.
value
expected
)
;
}
else
{
Assert
.
ok
(
state
.
value
&
expected
)
;
}
Assert
.
ok
(
!
(
state
.
value
&
unexpected
)
)
;
}
await
SpecialPowers
.
spawn
(
browsingContext
[
elementId
expectedStates
]
testStates
)
;
}
function
testVisibility
(
acc
shouldBeOffscreen
shouldBeInvisible
)
{
const
[
states
]
=
getStates
(
acc
)
;
let
looksGood
=
shouldBeOffscreen
=
=
(
(
states
&
STATE_OFFSCREEN
)
!
=
0
)
;
looksGood
&
=
shouldBeInvisible
=
=
(
(
states
&
STATE_INVISIBLE
)
!
=
0
)
;
return
looksGood
;
}
