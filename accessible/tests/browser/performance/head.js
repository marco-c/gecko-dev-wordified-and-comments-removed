"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
shared
-
head
.
js
"
this
)
;
loadScripts
(
{
name
:
"
common
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
promisified
-
events
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
const
ALL_A11Y_PERFSTATS_MASK
=
(
1
<
<
29
)
|
(
1
<
<
30
)
|
(
1
<
<
31
)
|
(
1
<
<
32
)
|
(
1
<
<
33
)
|
(
1
<
<
34
)
|
(
1
<
<
35
)
|
(
1
<
<
36
)
|
(
1
<
<
37
)
|
(
1
<
<
38
)
|
(
1
<
<
39
)
|
(
1
<
<
40
)
|
(
1
<
<
41
)
|
(
1
<
<
42
)
|
(
1
<
<
43
)
|
(
1
<
<
44
)
;
const
LOG_PREFIX
=
"
perfMetrics
"
;
function
logToPerfMetrics
(
stat
)
{
info
(
{
LOG_PREFIX
}
|
{
JSON
.
stringify
(
stat
)
}
)
;
}
async
function
timeThis
(
func
)
{
const
start
=
performance
.
now
(
)
;
ChromeUtils
.
setPerfStatsCollectionMask
(
ALL_A11Y_PERFSTATS_MASK
)
;
const
journal
=
{
}
;
await
func
(
)
;
journal
.
A11Y_TotalTime
=
performance
.
now
(
)
-
start
;
const
stats
=
JSON
.
parse
(
await
ChromeUtils
.
collectPerfStats
(
)
)
;
ChromeUtils
.
setPerfStatsCollectionMask
(
0
)
;
stats
.
processes
=
stats
.
processes
.
filter
(
process
=
>
process
.
type
!
=
"
gpu
"
)
;
for
(
const
process
of
stats
.
processes
)
{
process
.
perfstats
.
metrics
=
process
.
perfstats
.
metrics
.
filter
(
metric
=
>
metric
.
metric
.
startsWith
(
"
A11Y_
"
)
&
&
metric
.
count
>
0
)
;
}
stats
.
processes
=
stats
.
processes
.
filter
(
process
=
>
!
!
process
.
perfstats
.
metrics
.
length
)
;
stats
.
processes
=
stats
.
processes
.
filter
(
process
=
>
process
.
type
=
=
"
parent
"
|
|
!
process
.
urls
.
length
|
|
!
process
.
urls
.
includes
(
"
about
:
newtab
"
)
)
;
for
(
const
process
of
stats
.
processes
)
{
for
(
const
stat
of
process
.
perfstats
.
metrics
)
{
journal
[
stat
.
metric
+
"
_
"
+
process
.
type
]
=
stat
.
time
;
if
(
stat
.
count
)
{
journal
[
stat
.
metric
+
"
_Count_
"
+
process
.
type
]
=
stat
.
count
;
}
}
}
logToPerfMetrics
(
journal
)
;
}
