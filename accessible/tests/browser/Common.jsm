"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
CommonUtils
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
MAX_TRIM_LENGTH
=
100
;
const
CommonUtils
=
{
DONOTFAIL_IF_NO_ACC
:
1
DONOTFAIL_IF_NO_INTERFACE
:
2
get
accService
(
)
{
if
(
!
this
.
_accService
)
{
this
.
_accService
=
Cc
[
"
mozilla
.
org
/
accessibilityService
;
1
"
]
.
getService
(
Ci
.
nsIAccessibilityService
)
;
}
return
this
.
_accService
;
}
clearAccService
(
)
{
this
.
_accService
=
null
;
Cu
.
forceGC
(
)
;
}
getAccessibleDOMNodeID
(
accessible
)
{
if
(
accessible
instanceof
Ci
.
nsIAccessibleDocument
)
{
try
{
return
accessible
.
DOMNode
.
body
.
id
;
}
catch
(
e
)
{
}
}
try
{
return
accessible
.
DOMNode
.
id
;
}
catch
(
e
)
{
}
try
{
return
accessible
.
id
;
}
catch
(
e
)
{
}
return
null
;
}
getObjAddress
(
obj
)
{
const
exp
=
/
native
\
s
*
\
s
*
(
0x
[
a
-
f0
-
9
]
+
)
/
g
;
const
match
=
exp
.
exec
(
obj
.
toString
(
)
)
;
if
(
match
)
{
return
match
[
1
]
;
}
return
obj
.
toString
(
)
;
}
getNodePrettyName
(
node
)
{
try
{
let
tag
=
"
"
;
if
(
node
.
nodeType
=
=
Node
.
DOCUMENT_NODE
)
{
tag
=
"
document
"
;
}
else
{
tag
=
node
.
localName
;
if
(
node
.
nodeType
=
=
Node
.
ELEMENT_NODE
&
&
node
.
hasAttribute
(
"
id
"
)
)
{
tag
+
=
id
=
"
{
node
.
getAttribute
(
"
id
"
)
}
"
;
}
}
return
"
{
tag
}
node
"
address
:
{
this
.
getObjAddress
(
node
)
}
;
}
catch
(
e
)
{
return
"
no
node
info
"
;
}
}
roleToString
(
role
)
{
return
this
.
accService
.
getStringRole
(
role
)
;
}
shortenString
(
str
)
{
if
(
str
.
length
<
=
MAX_TRIM_LENGTH
)
{
return
str
;
}
const
trimOffset
=
MAX_TRIM_LENGTH
/
2
;
return
{
str
.
substring
(
0
trimOffset
-
1
)
}
{
str
.
substring
(
str
.
length
-
trimOffset
str
.
length
)
}
;
}
normalizeAccTreeObj
(
obj
)
{
const
key
=
Object
.
keys
(
obj
)
[
0
]
;
const
roleName
=
ROLE_
{
key
}
;
if
(
roleName
in
Ci
.
nsIAccessibleRole
)
{
return
{
role
:
Ci
.
nsIAccessibleRole
[
roleName
]
children
:
obj
[
key
]
}
;
}
return
obj
;
}
stringifyTree
(
obj
)
{
let
text
=
this
.
roleToString
(
obj
.
role
)
+
"
:
[
"
;
if
(
"
children
"
in
obj
)
{
for
(
let
i
=
0
;
i
<
obj
.
children
.
length
;
i
+
+
)
{
const
c
=
this
.
normalizeAccTreeObj
(
obj
.
children
[
i
]
)
;
text
+
=
this
.
stringifyTree
(
c
)
;
if
(
i
<
obj
.
children
.
length
-
1
)
{
text
+
=
"
"
;
}
}
}
return
{
text
}
]
;
}
prettyName
(
identifier
)
{
if
(
identifier
instanceof
Array
)
{
let
msg
=
"
"
;
for
(
let
idx
=
0
;
idx
<
identifier
.
length
;
idx
+
+
)
{
if
(
msg
!
=
"
"
)
{
msg
+
=
"
"
;
}
msg
+
=
this
.
prettyName
(
identifier
[
idx
]
)
;
}
return
msg
;
}
if
(
identifier
instanceof
Ci
.
nsIAccessible
)
{
const
acc
=
this
.
getAccessible
(
identifier
)
;
const
domID
=
this
.
getAccessibleDOMNodeID
(
acc
)
;
let
msg
=
"
[
"
;
try
{
if
(
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
if
(
domID
)
{
msg
+
=
DOM
node
id
:
{
domID
}
;
}
}
else
{
msg
+
=
{
this
.
getNodePrettyName
(
acc
.
DOMNode
)
}
;
}
msg
+
=
role
:
{
this
.
roleToString
(
acc
.
role
)
}
;
if
(
acc
.
name
)
{
msg
+
=
name
:
"
{
this
.
shortenString
(
acc
.
name
)
}
"
;
}
}
catch
(
e
)
{
msg
+
=
"
defunct
"
;
}
if
(
acc
)
{
msg
+
=
address
:
{
this
.
getObjAddress
(
acc
)
}
;
}
msg
+
=
"
]
"
;
return
msg
;
}
if
(
Node
.
isInstance
(
identifier
)
)
{
return
[
{
this
.
getNodePrettyName
(
identifier
)
}
]
;
}
if
(
identifier
&
&
typeof
identifier
=
=
=
"
object
"
)
{
const
treeObj
=
this
.
normalizeAccTreeObj
(
identifier
)
;
if
(
"
role
"
in
treeObj
)
{
return
{
{
this
.
stringifyTree
(
treeObj
)
}
}
;
}
return
JSON
.
stringify
(
identifier
)
;
}
return
"
{
identifier
}
"
;
}
getAccessible
(
accOrElmOrID
interfaces
elmObj
doNotFailIf
doc
)
{
if
(
!
accOrElmOrID
)
{
return
null
;
}
let
elm
=
null
;
if
(
accOrElmOrID
instanceof
Ci
.
nsIAccessible
)
{
try
{
elm
=
accOrElmOrID
.
DOMNode
;
}
catch
(
e
)
{
}
}
else
if
(
Node
.
isInstance
(
accOrElmOrID
)
)
{
elm
=
accOrElmOrID
;
}
else
{
elm
=
doc
.
getElementById
(
accOrElmOrID
)
;
if
(
!
elm
)
{
ok
(
false
Can
'
t
get
DOM
element
for
{
accOrElmOrID
}
)
;
return
null
;
}
}
if
(
elmObj
&
&
typeof
elmObj
=
=
"
object
"
)
{
elmObj
.
value
=
elm
;
}
let
acc
=
accOrElmOrID
instanceof
Ci
.
nsIAccessible
?
accOrElmOrID
:
null
;
if
(
!
acc
)
{
try
{
acc
=
this
.
accService
.
getAccessibleFor
(
elm
)
;
}
catch
(
e
)
{
}
if
(
!
acc
)
{
if
(
!
(
doNotFailIf
&
this
.
DONOTFAIL_IF_NO_ACC
)
)
{
ok
(
false
Can
'
t
get
accessible
for
{
this
.
prettyName
(
accOrElmOrID
)
}
)
;
}
return
null
;
}
}
if
(
!
interfaces
)
{
return
acc
;
}
if
(
!
(
interfaces
instanceof
Array
)
)
{
interfaces
=
[
interfaces
]
;
}
for
(
let
index
=
0
;
index
<
interfaces
.
length
;
index
+
+
)
{
if
(
acc
instanceof
interfaces
[
index
]
)
{
continue
;
}
try
{
acc
.
QueryInterface
(
interfaces
[
index
]
)
;
}
catch
(
e
)
{
if
(
!
(
doNotFailIf
&
this
.
DONOTFAIL_IF_NO_INTERFACE
)
)
{
ok
(
false
Can
'
t
query
{
interfaces
[
index
]
}
for
{
accOrElmOrID
}
)
;
}
return
null
;
}
}
return
acc
;
}
getNode
(
accOrNodeOrID
doc
)
{
if
(
!
accOrNodeOrID
)
{
return
null
;
}
if
(
Node
.
isInstance
(
accOrNodeOrID
)
)
{
return
accOrNodeOrID
;
}
if
(
accOrNodeOrID
instanceof
Ci
.
nsIAccessible
)
{
return
accOrNodeOrID
.
DOMNode
;
}
const
node
=
doc
.
getElementById
(
accOrNodeOrID
)
;
if
(
!
node
)
{
ok
(
false
Can
'
t
get
DOM
element
for
{
accOrNodeOrID
}
)
;
return
null
;
}
return
node
;
}
}
;
