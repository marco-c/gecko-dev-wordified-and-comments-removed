"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
Layout
"
]
;
const
{
Assert
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
)
;
const
{
CommonUtils
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
Common
.
jsm
"
)
;
const
Layout
=
{
zoomDocument
(
doc
zoom
)
{
const
bc
=
BrowsingContext
.
getFromWindow
(
doc
.
defaultView
)
;
bc
.
top
.
fullZoom
=
zoom
;
}
setResolution
(
doc
zoom
)
{
const
windowUtils
=
doc
.
defaultView
.
windowUtils
;
windowUtils
.
setResolutionAndScaleTo
(
zoom
)
;
}
isWithin
(
expected
got
within
msg
)
{
if
(
Math
.
abs
(
got
-
expected
)
<
=
within
)
{
Assert
.
ok
(
true
{
msg
}
-
Got
{
got
}
)
;
}
else
{
Assert
.
ok
(
false
{
msg
}
-
Got
{
got
}
expected
{
expected
}
with
error
of
{
within
}
)
;
}
}
getPos
(
id
)
{
const
accessible
=
CommonUtils
.
getAccessible
(
id
)
;
const
x
=
{
}
;
const
y
=
{
}
;
accessible
.
getBounds
(
x
y
{
}
{
}
)
;
return
[
x
.
value
y
.
value
]
;
}
getBounds
(
id
dpr
)
{
const
accessible
=
CommonUtils
.
getAccessible
(
id
)
;
const
x
=
{
}
;
const
y
=
{
}
;
const
width
=
{
}
;
const
height
=
{
}
;
const
xInCSS
=
{
}
;
const
yInCSS
=
{
}
;
const
widthInCSS
=
{
}
;
const
heightInCSS
=
{
}
;
accessible
.
getBounds
(
x
y
width
height
)
;
accessible
.
getBoundsInCSSPixels
(
xInCSS
yInCSS
widthInCSS
heightInCSS
)
;
this
.
isWithin
(
x
.
value
/
dpr
xInCSS
.
value
1
"
X
in
CSS
pixels
is
calculated
correctly
"
)
;
this
.
isWithin
(
y
.
value
/
dpr
yInCSS
.
value
1
"
Y
in
CSS
pixels
is
calculated
correctly
"
)
;
this
.
isWithin
(
width
.
value
/
dpr
widthInCSS
.
value
1
"
Width
in
CSS
pixels
is
calculated
correctly
"
)
;
this
.
isWithin
(
height
.
value
/
dpr
heightInCSS
.
value
1
"
Height
in
CSS
pixels
is
calculated
correctly
"
)
;
return
[
x
.
value
y
.
value
width
.
value
height
.
value
]
;
}
getRangeExtents
(
id
startOffset
endOffset
coordOrigin
)
{
const
hyperText
=
CommonUtils
.
getAccessible
(
id
[
Ci
.
nsIAccessibleText
]
)
;
const
x
=
{
}
;
const
y
=
{
}
;
const
width
=
{
}
;
const
height
=
{
}
;
hyperText
.
getRangeExtents
(
startOffset
endOffset
x
y
width
height
coordOrigin
)
;
return
[
x
.
value
y
.
value
width
.
value
height
.
value
]
;
}
CSSToDevicePixels
(
win
x
y
width
height
)
{
const
ratio
=
win
.
devicePixelRatio
;
return
[
Math
.
round
(
x
*
ratio
)
Math
.
round
(
y
*
ratio
)
Math
.
round
(
width
*
ratio
)
Math
.
round
(
height
*
ratio
)
]
;
}
getBoundsForDOMElm
(
id
doc
)
{
let
x
=
0
;
let
y
=
0
;
let
width
=
0
;
let
height
=
0
;
const
elm
=
CommonUtils
.
getNode
(
id
doc
)
;
const
elmWindow
=
elm
.
ownerGlobal
;
if
(
elm
.
localName
=
=
"
area
"
)
{
const
mapName
=
elm
.
parentNode
.
getAttribute
(
"
name
"
)
;
const
selector
=
[
usemap
=
"
#
{
mapName
}
"
]
;
const
img
=
elm
.
ownerDocument
.
querySelector
(
selector
)
;
const
areaCoords
=
elm
.
coords
.
split
(
"
"
)
;
const
areaX
=
parseInt
(
areaCoords
[
0
]
10
)
;
const
areaY
=
parseInt
(
areaCoords
[
1
]
10
)
;
const
areaWidth
=
parseInt
(
areaCoords
[
2
]
10
)
-
areaX
;
const
areaHeight
=
parseInt
(
areaCoords
[
3
]
10
)
-
areaY
;
const
rect
=
img
.
getBoundingClientRect
(
)
;
x
=
rect
.
left
+
areaX
;
y
=
rect
.
top
+
areaY
;
width
=
areaWidth
;
height
=
areaHeight
;
}
else
{
const
rect
=
elm
.
getBoundingClientRect
(
)
;
x
=
rect
.
left
;
y
=
rect
.
top
;
width
=
rect
.
width
;
height
=
rect
.
height
;
}
return
this
.
CSSToDevicePixels
(
elmWindow
x
+
elmWindow
.
mozInnerScreenX
y
+
elmWindow
.
mozInnerScreenY
width
height
)
;
}
}
;
