"
use
strict
"
;
function
testChildrenIds
(
acc
expectedIds
)
{
let
ids
=
arrayFromChildren
(
acc
)
.
map
(
child
=
>
getAccessibleDOMNodeID
(
child
)
)
;
Assert
.
deepEqual
(
ids
expectedIds
Children
for
{
getAccessibleDOMNodeID
(
acc
)
}
are
wrong
.
)
;
}
async
function
runTests
(
browser
accDoc
)
{
let
one
=
findAccessibleChildByID
(
accDoc
"
one
"
)
;
let
two
=
findAccessibleChildByID
(
accDoc
"
two
"
)
;
let
three
=
findAccessibleChildByID
(
accDoc
"
three
"
)
;
let
four
=
findAccessibleChildByID
(
accDoc
"
four
"
)
;
testChildrenIds
(
one
[
"
a
"
]
)
;
testChildrenIds
(
two
[
"
b
"
"
c
"
"
d
"
]
)
;
testChildrenIds
(
three
[
]
)
;
let
onReorders
=
waitForEvents
(
{
expected
:
[
[
EVENT_REORDER
"
two
"
]
]
unexpected
:
[
[
EVENT_REORDER
"
one
"
]
[
EVENT_REORDER
"
three
"
]
[
EVENT_REORDER
"
four
"
]
]
}
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
document
.
getElementById
(
"
one
"
)
.
setAttribute
(
"
aria
-
owns
"
"
a
"
)
;
document
.
getElementById
(
"
four
"
)
.
removeAttribute
(
"
aria
-
owns
"
)
;
document
.
getElementById
(
"
two
"
)
.
setAttribute
(
"
aria
-
owns
"
"
d
c
"
)
;
}
)
;
await
onReorders
;
testChildrenIds
(
one
[
"
a
"
]
)
;
testChildrenIds
(
two
[
"
b
"
"
d
"
"
c
"
]
)
;
testChildrenIds
(
three
[
]
)
;
testChildrenIds
(
four
[
"
e
"
]
)
;
onReorders
=
waitForEvent
(
EVENT_REORDER
"
one
"
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
aa
=
document
.
createElement
(
"
li
"
)
;
aa
.
id
=
"
aa
"
;
document
.
getElementById
(
"
one
"
)
.
appendChild
(
aa
)
;
}
)
;
await
onReorders
;
testChildrenIds
(
one
[
"
aa
"
"
a
"
]
)
;
onReorders
=
waitForEvents
(
[
[
EVENT_REORDER
"
two
"
]
[
EVENT_REORDER
"
three
"
]
[
EVENT_REORDER
"
one
"
]
]
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
document
.
getElementById
(
"
one
"
)
.
removeAttribute
(
"
aria
-
owns
"
)
;
document
.
getElementById
(
"
three
"
)
.
setAttribute
(
"
aria
-
owns
"
"
b
d
"
)
;
}
)
;
await
onReorders
;
testChildrenIds
(
one
[
"
a
"
"
aa
"
]
)
;
testChildrenIds
(
two
[
"
c
"
]
)
;
testChildrenIds
(
three
[
"
b
"
"
d
"
]
)
;
}
addAccessibleTask
(
<
ul
id
=
"
one
"
>
<
li
id
=
"
a
"
>
Test
<
/
li
>
<
/
ul
>
<
ul
id
=
"
two
"
aria
-
owns
=
"
d
"
>
<
li
id
=
"
b
"
>
Test
2
<
/
li
>
<
li
id
=
"
c
"
>
Test
3
<
/
li
>
<
/
ul
>
<
ul
id
=
"
three
"
>
<
li
id
=
"
d
"
>
Test
4
<
/
li
>
<
/
ul
>
<
ul
id
=
"
four
"
aria
-
owns
=
"
e
"
>
<
li
id
=
"
e
"
>
Test
5
<
/
li
>
<
/
ul
>
runTests
)
;
