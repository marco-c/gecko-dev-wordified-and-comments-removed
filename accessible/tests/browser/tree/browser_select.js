"
use
strict
"
;
loadScripts
(
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
addAccessibleTask
(
<
select
id
=
"
select
"
>
<
option
id
=
"
a
"
>
optiona
<
/
option
>
<
/
select
>
<
select
id
=
"
select2
"
>
<
option
id
=
"
b
"
>
optionb
<
/
option
>
<
/
select
>
async
function
testSelectAncestorChain
(
browser
accDoc
)
{
const
LOCAL_DROPDOWN_ID
=
"
ContentSelectDropdown
"
;
const
rootAcc
=
getRootAccessible
(
document
)
;
ok
(
rootAcc
"
Root
Accessible
exists
"
)
;
const
optA
=
findAccessibleChildByID
(
accDoc
"
a
"
)
;
const
select
=
findAccessibleChildByID
(
accDoc
"
select
"
)
;
let
remoteAccDropdown
=
select
.
firstChild
;
ok
(
remoteAccDropdown
"
Remote
acc
dropdown
exists
"
)
;
let
isRemote
=
true
;
try
{
remoteAccDropdown
.
id
;
}
catch
(
e
)
{
isRemote
=
false
;
}
if
(
isRemote
)
{
is
(
remoteAccDropdown
.
role
ROLE_COMBOBOX_LIST
"
Select
'
s
first
child
is
the
combobox
list
"
)
;
isnot
(
remoteAccDropdown
.
id
LOCAL_DROPDOWN_ID
"
Remote
dropdown
does
not
match
local
dropdown
'
s
ID
.
"
)
;
is
(
remoteAccDropdown
.
firstChild
optA
"
Remote
dropdown
contains
remote
acc
of
option
A
.
"
)
;
}
let
localAccDropdown
=
findAccessibleChildByID
(
rootAcc
LOCAL_DROPDOWN_ID
)
;
is
(
localAccDropdown
null
"
Local
dropdown
cannot
be
reached
while
select
is
collapsed
"
)
;
await
invokeFocus
(
browser
"
select
"
)
;
let
p
=
waitForEvent
(
EVENT_STATE_CHANGE
LOCAL_DROPDOWN_ID
)
;
EventUtils
.
synthesizeKey
(
"
VK_SPACE
"
)
;
await
p
;
localAccDropdown
=
findAccessibleChildByID
(
rootAcc
LOCAL_DROPDOWN_ID
)
;
ok
(
localAccDropdown
"
Local
dropdown
exists
when
select
is
expanded
.
"
)
;
is
(
localAccDropdown
.
parent
select
"
Dropdown
is
a
child
of
the
select
"
)
;
remoteAccDropdown
=
select
.
firstChild
;
if
(
isRemote
)
{
is
(
remoteAccDropdown
.
role
ROLE_COMBOBOX_LIST
"
Select
'
s
first
child
is
the
combobox
list
"
)
;
isnot
(
remoteAccDropdown
.
id
LOCAL_DROPDOWN_ID
"
Remote
dropdown
does
not
match
local
dropdown
'
s
ID
.
"
)
;
is
(
remoteAccDropdown
.
firstChild
optA
"
Remote
dropdown
contains
remote
acc
of
option
A
.
"
)
;
}
p
=
waitForEvents
(
{
expected
:
[
[
EVENT_HIDE
LOCAL_DROPDOWN_ID
]
]
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
)
;
await
p
;
remoteAccDropdown
=
select
.
firstChild
;
if
(
isRemote
)
{
is
(
remoteAccDropdown
.
role
ROLE_COMBOBOX_LIST
"
Select
'
s
first
child
is
the
combobox
list
"
)
;
isnot
(
remoteAccDropdown
.
id
LOCAL_DROPDOWN_ID
"
Remote
dropdown
does
not
match
local
dropdown
'
s
ID
.
"
)
;
is
(
remoteAccDropdown
.
firstChild
optA
"
Remote
dropdown
contains
remote
acc
of
option
A
.
"
)
;
}
localAccDropdown
=
findAccessibleChildByID
(
rootAcc
LOCAL_DROPDOWN_ID
)
;
is
(
localAccDropdown
null
"
Local
dropdown
cannot
be
reached
while
select
is
collapsed
"
)
;
}
{
chrome
:
true
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
