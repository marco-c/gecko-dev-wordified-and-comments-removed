'
use
strict
'
;
add_task
(
function
*
(
)
{
yield
setE10sPrefs
(
)
;
let
docLoaded
=
waitForEvent
(
Ci
.
nsIAccessibleEvent
.
EVENT_DOCUMENT_LOAD_COMPLETE
'
body
'
)
;
let
a11yInit
=
initPromise
(
)
;
let
accService
=
Cc
[
'
mozilla
.
org
/
accessibilityService
;
1
'
]
.
getService
(
Ci
.
nsIAccessibilityService
)
;
ok
(
accService
'
Service
initialized
'
)
;
yield
a11yInit
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
data
:
text
/
html
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Accessibility
Test
<
/
title
>
<
/
head
>
<
body
id
=
"
body
"
>
<
div
id
=
"
div
"
>
<
/
div
>
<
/
body
>
<
/
html
>
}
function
*
(
browser
)
{
let
docLoadedEvent
=
yield
docLoaded
;
let
docAcc
=
docLoadedEvent
.
accessibleDocument
;
ok
(
docAcc
'
Accessible
document
proxy
is
created
'
)
;
docLoaded
=
null
;
docLoadedEvent
=
null
;
forceGC
(
)
;
let
acc
=
docAcc
.
getChildAt
(
0
)
;
ok
(
acc
'
Accessible
proxy
is
created
'
)
;
let
canShutdown
=
false
;
let
a11yShutdown
=
new
Promise
(
(
resolve
reject
)
=
>
shutdownPromise
(
)
.
then
(
flag
=
>
canShutdown
?
resolve
(
)
:
reject
(
'
Accessible
service
was
shut
down
incorrectly
'
)
)
)
;
accService
=
null
;
ok
(
!
accService
'
Service
is
removed
'
)
;
forceGC
(
)
;
yield
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
acc
=
null
;
ok
(
!
acc
'
Accessible
proxy
is
removed
'
)
;
forceGC
(
)
;
yield
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
canShutdown
=
true
;
docAcc
=
null
;
ok
(
!
docAcc
'
Accessible
document
proxy
is
removed
'
)
;
forceGC
(
)
;
yield
a11yShutdown
;
}
)
;
yield
unsetE10sPrefs
(
)
;
}
)
;
