"
use
strict
"
;
function
setE10sPrefs
(
)
{
return
new
Promise
(
resolve
=
>
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
autostart
"
true
]
]
}
resolve
)
)
;
}
function
unsetE10sPrefs
(
)
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
popPrefEnv
(
resolve
)
;
}
)
;
}
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
shared
-
head
.
js
"
this
)
;
function
a11yConsumersChangedPromise
(
)
{
return
new
Promise
(
resolve
=
>
{
let
observe
=
(
subject
topic
data
)
=
>
{
Services
.
obs
.
removeObserver
(
observe
"
a11y
-
consumers
-
changed
"
)
;
resolve
(
JSON
.
parse
(
data
)
)
;
}
;
Services
.
obs
.
addObserver
(
observe
"
a11y
-
consumers
-
changed
"
)
;
}
)
;
}
function
a11yInitOrShutdownPromise
(
)
{
return
new
Promise
(
resolve
=
>
{
let
observe
=
(
subject
topic
data
)
=
>
{
Services
.
obs
.
removeObserver
(
observe
"
a11y
-
init
-
or
-
shutdown
"
)
;
resolve
(
data
)
;
}
;
Services
.
obs
.
addObserver
(
observe
"
a11y
-
init
-
or
-
shutdown
"
)
;
}
)
;
}
function
contentA11yInitOrShutdownPromise
(
browser
)
{
return
ContentTask
.
spawn
(
browser
{
}
a11yInitOrShutdownPromise
)
;
}
function
promiseOK
(
promise
expected
)
{
return
promise
.
then
(
flag
=
>
flag
=
=
=
expected
?
Promise
.
resolve
(
)
:
Promise
.
reject
(
)
)
;
}
function
initPromise
(
contentBrowser
)
{
let
a11yInitPromise
=
contentBrowser
?
contentA11yInitOrShutdownPromise
(
contentBrowser
)
:
a11yInitOrShutdownPromise
(
)
;
return
promiseOK
(
a11yInitPromise
"
1
"
)
.
then
(
(
)
=
>
ok
(
true
"
Service
initialized
correctly
"
)
(
)
=
>
ok
(
false
"
Service
shutdown
incorrectly
"
)
)
;
}
function
shutdownPromise
(
contentBrowser
)
{
let
a11yShutdownPromise
=
contentBrowser
?
contentA11yInitOrShutdownPromise
(
contentBrowser
)
:
a11yInitOrShutdownPromise
(
)
;
return
promiseOK
(
a11yShutdownPromise
"
0
"
)
.
then
(
(
)
=
>
ok
(
true
"
Service
shutdown
correctly
"
)
(
)
=
>
ok
(
false
"
Service
initialized
incorrectly
"
)
)
;
}
function
waitForEvent
(
eventType
expectedId
)
{
return
new
Promise
(
resolve
=
>
{
let
eventObserver
=
{
observe
(
subject
)
{
let
event
=
subject
.
QueryInterface
(
Ci
.
nsIAccessibleEvent
)
;
let
id
;
try
{
id
=
event
.
accessible
.
id
;
}
catch
(
e
)
{
}
if
(
event
.
eventType
=
=
=
eventType
&
&
id
=
=
=
expectedId
)
{
Services
.
obs
.
removeObserver
(
this
"
accessible
-
event
"
)
;
resolve
(
event
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
eventObserver
"
accessible
-
event
"
)
;
}
)
;
}
