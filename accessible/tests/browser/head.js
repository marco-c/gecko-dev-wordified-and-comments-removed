"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
shared
-
head
.
js
"
this
)
;
const
{
CommonUtils
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
Common
.
sys
.
mjs
"
)
;
function
setE10sPrefs
(
)
{
return
new
Promise
(
resolve
=
>
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
autostart
"
true
]
]
}
resolve
)
)
;
}
function
unsetE10sPrefs
(
)
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
popPrefEnv
(
resolve
)
;
}
)
;
}
function
accConsumersChanged
(
target
)
{
return
target
?
[
SpecialPowers
.
spawn
(
target
[
]
(
)
=
>
content
.
CommonUtils
.
addAccConsumersChangedObserver
(
)
)
SpecialPowers
.
spawn
(
target
[
]
(
)
=
>
content
.
CommonUtils
.
observeAccConsumersChanged
(
)
)
]
:
[
CommonUtils
.
addAccConsumersChangedObserver
(
)
CommonUtils
.
observeAccConsumersChanged
(
)
]
;
}
function
initAccService
(
target
)
{
return
target
?
[
SpecialPowers
.
spawn
(
target
[
]
(
)
=
>
content
.
CommonUtils
.
addAccServiceInitializedObserver
(
)
)
SpecialPowers
.
spawn
(
target
[
]
(
)
=
>
content
.
CommonUtils
.
observeAccServiceInitialized
(
)
)
]
:
[
CommonUtils
.
addAccServiceInitializedObserver
(
)
CommonUtils
.
observeAccServiceInitialized
(
)
]
;
}
function
shutdownAccService
(
target
)
{
return
target
?
[
SpecialPowers
.
spawn
(
target
[
]
(
)
=
>
content
.
CommonUtils
.
addAccServiceShutdownObserver
(
)
)
SpecialPowers
.
spawn
(
target
[
]
(
)
=
>
content
.
CommonUtils
.
observeAccServiceShutdown
(
)
)
]
:
[
CommonUtils
.
addAccServiceShutdownObserver
(
)
CommonUtils
.
observeAccServiceShutdown
(
)
]
;
}
function
waitForEvent
(
eventType
expectedId
)
{
return
new
Promise
(
resolve
=
>
{
let
eventObserver
=
{
observe
(
subject
)
{
let
event
=
subject
.
QueryInterface
(
Ci
.
nsIAccessibleEvent
)
;
let
id
;
try
{
id
=
event
.
accessible
.
id
;
}
catch
(
e
)
{
}
if
(
event
.
eventType
=
=
=
eventType
&
&
id
=
=
=
expectedId
)
{
Services
.
obs
.
removeObserver
(
this
"
accessible
-
event
"
)
;
resolve
(
event
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
eventObserver
"
accessible
-
event
"
)
;
}
)
;
}
