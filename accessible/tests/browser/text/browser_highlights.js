"
use
strict
"
;
loadScripts
(
{
name
:
"
attributes
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
const
boldAttrs
=
{
"
font
-
weight
"
:
"
700
"
}
;
const
highlightAttrs
=
{
mark
:
"
true
"
}
;
const
fragmentAttrs
=
highlightAttrs
;
const
spellingAttrs
=
{
invalid
:
"
spelling
"
}
;
const
grammarAttrs
=
{
invalid
:
"
grammar
"
}
;
const
snippet
=
<
p
id
=
"
first
"
>
The
first
phrase
.
<
/
p
>
<
p
id
=
"
second
"
>
The
<
i
>
second
<
b
>
phrase
.
<
/
b
>
<
/
i
>
<
/
p
>
;
async
function
waitForTextAttrRanges
(
acc
ranges
attrs
shouldWaitForEvent
=
true
)
{
if
(
shouldWaitForEvent
)
{
await
waitForEvent
(
EVENT_TEXT_ATTRIBUTE_CHANGED
)
;
}
await
untilCacheOk
(
(
)
=
>
textAttrRangesMatch
(
acc
ranges
attrs
)
Attr
ranges
match
:
{
JSON
.
stringify
(
ranges
)
}
)
;
}
addAccessibleTask
(
snippet
async
function
testTextFragmentSingleNode
(
browser
docAcc
)
{
const
first
=
findAccessibleChildByID
(
docAcc
"
first
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
4
16
]
]
fragmentAttrs
)
"
first
attr
ranges
correct
"
)
;
const
second
=
findAccessibleChildByID
(
docAcc
"
second
"
)
;
ok
(
textAttrRangesMatch
(
second
[
]
fragmentAttrs
)
"
second
attr
ranges
correct
"
)
;
}
{
chrome
:
true
topLevel
:
true
urlSuffix
:
"
#
:
~
:
text
=
first
%
20phrase
"
}
)
;
addAccessibleTask
(
snippet
async
function
testTextFragmentCrossNode
(
browser
docAcc
)
{
const
first
=
findAccessibleChildByID
(
docAcc
"
first
"
)
;
ok
(
textAttrRangesMatch
(
first
[
]
fragmentAttrs
)
"
first
attr
ranges
correct
"
)
;
const
second
=
findAccessibleChildByID
(
docAcc
"
second
"
)
;
ok
(
textAttrRangesMatch
(
second
[
[
4
11
]
[
11
17
]
]
fragmentAttrs
)
"
second
attr
ranges
correct
"
)
;
testTextAttrs
(
second
11
{
.
.
.
fragmentAttrs
.
.
.
boldAttrs
}
{
}
11
17
true
)
;
testTextAttrs
(
second
17
boldAttrs
{
}
17
18
true
)
;
}
{
chrome
:
true
topLevel
:
true
urlSuffix
:
"
#
:
~
:
text
=
second
%
20phrase
"
}
)
;
add_task
(
async
function
testTextFragmentSamePage
(
)
{
const
docUrl
=
snippetToURL
(
snippet
)
;
const
initialUrl
=
docUrl
+
"
#
:
~
:
text
=
first
%
20phrase
"
;
let
scrolled
=
waitForEvent
(
EVENT_SCROLLING_START
event
=
>
event
.
accessible
.
role
=
=
ROLE_TEXT_LEAF
&
&
getAccessibleDOMNodeID
(
event
.
accessible
.
parent
)
=
=
"
first
"
)
;
await
BrowserTestUtils
.
withNewTab
(
initialUrl
async
function
(
browser
)
{
info
(
"
Waiting
for
scroll
to
first
"
)
;
const
first
=
(
await
scrolled
)
.
accessible
.
parent
;
info
(
"
Checking
ranges
"
)
;
await
waitForTextAttrRanges
(
first
[
[
4
16
]
]
fragmentAttrs
false
)
;
const
second
=
first
.
nextSibling
;
await
waitForTextAttrRanges
(
second
[
]
fragmentAttrs
false
)
;
info
(
"
Navigating
to
second
"
)
;
scrolled
=
waitForEvent
(
EVENT_SCROLLING_START
second
.
getChildAt
(
1
)
)
;
let
rangeCheck
=
waitForTextAttrRanges
(
second
[
[
4
11
]
[
11
17
]
]
fragmentAttrs
true
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
location
.
hash
=
"
#
:
~
:
text
=
second
%
20phrase
"
;
}
)
;
await
scrolled
;
info
(
"
Checking
ranges
"
)
;
await
rangeCheck
;
await
waitForTextAttrRanges
(
first
[
[
4
16
]
]
fragmentAttrs
false
)
;
}
)
;
}
)
;
addAccessibleTask
(
{
snippet
}
<
script
>
const
firstText
=
document
.
getElementById
(
"
first
"
)
.
firstChild
;
/
/
Highlight
the
word
"
first
"
.
const
range1
=
new
Range
(
)
;
range1
.
setStart
(
firstText
4
)
;
range1
.
setEnd
(
firstText
9
)
;
const
highlight1
=
new
Highlight
(
range1
)
;
CSS
.
highlights
.
set
(
"
highlight1
"
highlight1
)
;
<
/
script
>
async
function
testCustomHighlightMutations
(
browser
docAcc
)
{
info
(
"
Checking
initial
highlight
"
)
;
const
first
=
findAccessibleChildByID
(
docAcc
"
first
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
4
9
]
]
highlightAttrs
)
"
first
attr
ranges
correct
"
)
;
const
second
=
findAccessibleChildByID
(
docAcc
"
second
"
)
;
ok
(
textAttrRangesMatch
(
second
[
]
highlightAttrs
)
"
second
attr
ranges
correct
"
)
;
info
(
"
Adding
range2
to
highlight1
"
)
;
let
rangeCheck
=
waitForTextAttrRanges
(
first
[
[
0
3
]
[
4
9
]
]
highlightAttrs
true
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
firstText
=
content
.
document
.
getElementById
(
"
first
"
)
.
firstChild
;
content
.
range2
=
new
content
.
Range
(
)
;
content
.
range2
.
setStart
(
content
.
firstText
0
)
;
content
.
range2
.
setEnd
(
content
.
firstText
3
)
;
content
.
highlight1
=
content
.
CSS
.
highlights
.
get
(
"
highlight1
"
)
;
content
.
highlight1
.
add
(
content
.
range2
)
;
}
)
;
await
rangeCheck
;
info
(
"
Adding
highlight2
"
)
;
rangeCheck
=
waitForTextAttrRanges
(
first
[
[
0
3
]
[
4
9
]
[
10
16
]
]
highlightAttrs
true
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
const
range3
=
new
content
.
Range
(
)
;
range3
.
setStart
(
content
.
firstText
10
)
;
range3
.
setEnd
(
content
.
firstText
16
)
;
const
highlight2
=
new
content
.
Highlight
(
range3
)
;
content
.
CSS
.
highlights
.
set
(
"
highlight2
"
highlight2
)
;
}
)
;
await
rangeCheck
;
info
(
"
Removing
range2
"
)
;
rangeCheck
=
waitForTextAttrRanges
(
first
[
[
4
9
]
[
10
16
]
]
highlightAttrs
true
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
highlight1
.
delete
(
content
.
range2
)
;
}
)
;
await
rangeCheck
;
info
(
"
Removing
highlight1
"
)
;
rangeCheck
=
waitForTextAttrRanges
(
first
[
[
10
16
]
]
highlightAttrs
true
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
CSS
.
highlights
.
delete
(
"
highlight1
"
)
;
}
)
;
await
rangeCheck
;
}
{
chrome
:
true
topLevel
:
true
}
)
;
addAccessibleTask
(
{
snippet
}
<
script
>
const
firstText
=
document
.
getElementById
(
"
first
"
)
.
firstChild
;
/
/
Highlight
the
word
"
The
"
.
const
range1
=
new
Range
(
)
;
range1
.
setStart
(
firstText
0
)
;
range1
.
setEnd
(
firstText
3
)
;
const
highlight
=
new
Highlight
(
range1
)
;
CSS
.
highlights
.
set
(
"
highlight
"
highlight
)
;
/
/
Make
the
word
"
first
"
a
spelling
error
.
const
range2
=
new
Range
(
)
;
range2
.
setStart
(
firstText
4
)
;
range2
.
setEnd
(
firstText
9
)
;
const
spelling
=
new
Highlight
(
range2
)
;
spelling
.
type
=
"
spelling
-
error
"
;
CSS
.
highlights
.
set
(
"
spelling
"
spelling
)
;
/
/
Make
the
word
"
phrase
"
a
grammar
error
.
const
range3
=
new
Range
(
)
;
range3
.
setStart
(
firstText
10
)
;
range3
.
setEnd
(
firstText
16
)
;
const
grammar
=
new
Highlight
(
range3
)
;
grammar
.
type
=
"
grammar
-
error
"
;
CSS
.
highlights
.
set
(
"
grammar
"
grammar
)
;
<
/
script
>
async
function
testCustomHighlightTypes
(
browser
docAcc
)
{
const
first
=
findAccessibleChildByID
(
docAcc
"
first
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
0
3
]
]
highlightAttrs
)
"
first
highlight
ranges
correct
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
4
9
]
]
spellingAttrs
)
"
first
spelling
ranges
correct
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
10
16
]
]
grammarAttrs
)
"
first
grammar
ranges
correct
"
)
;
const
second
=
findAccessibleChildByID
(
docAcc
"
second
"
)
;
ok
(
textAttrRangesMatch
(
second
[
]
highlightAttrs
)
"
second
highlight
ranges
correct
"
)
;
}
{
chrome
:
true
topLevel
:
true
}
)
;
addAccessibleTask
(
{
snippet
}
<
script
>
const
firstText
=
document
.
getElementById
(
"
first
"
)
.
firstChild
;
/
/
Make
the
word
"
The
"
both
a
highlight
and
a
spelling
error
.
const
range1
=
new
Range
(
)
;
range1
.
setStart
(
firstText
0
)
;
range1
.
setEnd
(
firstText
3
)
;
const
highlight1
=
new
Highlight
(
range1
)
;
CSS
.
highlights
.
set
(
"
highlight1
"
highlight1
)
;
const
spelling
=
new
Highlight
(
range1
)
;
spelling
.
type
=
"
spelling
-
error
"
;
CSS
.
highlights
.
set
(
"
spelling
"
spelling
)
;
/
/
Highlight
the
word
"
first
"
.
const
range2
=
new
Range
(
)
;
range2
.
setStart
(
firstText
4
)
;
range2
.
setEnd
(
firstText
9
)
;
highlight1
.
add
(
range2
)
;
/
/
Make
"
fir
"
a
spelling
error
.
const
range3
=
new
Range
(
)
;
range3
.
setStart
(
firstText
4
)
;
range3
.
setEnd
(
firstText
7
)
;
spelling
.
add
(
range3
)
;
/
/
Make
"
rst
"
a
spelling
error
.
const
range4
=
new
Range
(
)
;
range4
.
setStart
(
firstText
6
)
;
range4
.
setEnd
(
firstText
9
)
;
spelling
.
add
(
range4
)
;
/
/
Highlight
the
word
"
phrase
"
.
const
range5
=
new
Range
(
)
;
range5
.
setStart
(
firstText
10
)
;
range5
.
setEnd
(
firstText
16
)
;
highlight1
.
add
(
range5
)
;
/
/
Make
"
ras
"
a
spelling
error
.
const
range6
=
new
Range
(
)
;
range6
.
setStart
(
firstText
12
)
;
range6
.
setEnd
(
firstText
15
)
;
spelling
.
add
(
range6
)
;
const
secondText
=
document
.
querySelector
(
"
#
second
i
"
)
.
firstChild
;
/
/
Highlight
the
word
"
second
"
.
const
range7
=
new
Range
(
)
;
range7
.
setStart
(
secondText
0
)
;
range7
.
setEnd
(
secondText
6
)
;
highlight1
.
add
(
range7
)
;
/
/
Make
"
sec
"
a
spelling
error
.
const
range8
=
new
Range
(
)
;
range8
.
setStart
(
secondText
0
)
;
range8
.
setEnd
(
secondText
3
)
;
spelling
.
add
(
range8
)
;
/
/
Make
"
nd
"
a
spelling
error
.
const
range9
=
new
Range
(
)
;
range9
.
setStart
(
secondText
4
)
;
range9
.
setEnd
(
secondText
6
)
;
spelling
.
add
(
range9
)
;
const
phrase2Text
=
document
.
querySelector
(
"
#
second
b
"
)
.
firstChild
;
/
/
Highlight
the
word
"
phrase
"
.
const
range10
=
new
Range
(
)
;
range10
.
setStart
(
phrase2Text
0
)
;
range10
.
setEnd
(
phrase2Text
6
)
;
highlight1
.
add
(
range10
)
;
/
/
Highlight
"
ras
"
using
a
different
Highlight
.
const
range11
=
new
Range
(
)
;
range11
.
setStart
(
phrase2Text
2
)
;
range11
.
setEnd
(
phrase2Text
5
)
;
const
highlight2
=
new
Highlight
(
range11
)
;
CSS
.
highlights
.
set
(
"
highlight2
"
highlight2
)
;
<
/
script
>
async
function
testCustomHighlightOverlapping
(
browser
docAcc
)
{
const
first
=
findAccessibleChildByID
(
docAcc
"
first
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
0
3
]
[
4
6
]
[
6
7
]
[
7
9
]
[
10
12
]
[
12
15
]
[
15
16
]
]
highlightAttrs
)
"
first
highlight
ranges
correct
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
0
3
]
[
4
6
]
[
6
7
]
[
7
9
]
[
12
15
]
]
spellingAttrs
)
"
first
spelling
ranges
correct
"
)
;
const
second
=
findAccessibleChildByID
(
docAcc
"
second
"
)
;
ok
(
textAttrRangesMatch
(
second
[
[
4
7
]
[
7
8
]
[
8
10
]
[
11
13
]
[
13
16
]
[
16
17
]
]
highlightAttrs
)
"
second
highlight
ranges
correct
"
)
;
ok
(
textAttrRangesMatch
(
second
[
[
4
7
]
[
8
10
]
]
spellingAttrs
)
"
second
spelling
ranges
correct
"
)
;
}
{
chrome
:
true
topLevel
:
true
}
)
;
