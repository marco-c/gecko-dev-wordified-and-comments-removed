"
use
strict
"
;
loadScripts
(
{
name
:
"
attributes
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
const
boldAttrs
=
{
"
font
-
weight
"
:
"
700
"
}
;
const
fragmentAttrs
=
{
mark
:
"
true
"
}
;
const
snippet
=
<
p
id
=
"
first
"
>
The
first
phrase
.
<
/
p
>
<
p
id
=
"
second
"
>
The
<
i
>
second
<
b
>
phrase
.
<
/
b
>
<
/
i
>
<
/
p
>
;
async
function
waitForTextAttrRanges
(
acc
ranges
attrs
shouldWaitForEvent
=
true
)
{
if
(
shouldWaitForEvent
)
{
await
waitForEvent
(
EVENT_TEXT_ATTRIBUTE_CHANGED
)
;
}
await
untilCacheOk
(
(
)
=
>
textAttrRangesMatch
(
acc
ranges
attrs
)
Attr
ranges
match
:
{
JSON
.
stringify
(
ranges
)
}
)
;
}
addAccessibleTask
(
snippet
async
function
testTextFragmentSingleNode
(
browser
docAcc
)
{
const
first
=
findAccessibleChildByID
(
docAcc
"
first
"
)
;
ok
(
textAttrRangesMatch
(
first
[
[
4
16
]
]
fragmentAttrs
)
"
first
attr
ranges
correct
"
)
;
const
second
=
findAccessibleChildByID
(
docAcc
"
second
"
)
;
ok
(
textAttrRangesMatch
(
second
[
]
fragmentAttrs
)
"
second
attr
ranges
correct
"
)
;
}
{
chrome
:
true
topLevel
:
true
urlSuffix
:
"
#
:
~
:
text
=
first
%
20phrase
"
}
)
;
addAccessibleTask
(
snippet
async
function
testTextFragmentCrossNode
(
browser
docAcc
)
{
const
first
=
findAccessibleChildByID
(
docAcc
"
first
"
)
;
ok
(
textAttrRangesMatch
(
first
[
]
fragmentAttrs
)
"
first
attr
ranges
correct
"
)
;
const
second
=
findAccessibleChildByID
(
docAcc
"
second
"
)
;
ok
(
textAttrRangesMatch
(
second
[
[
4
11
]
[
11
17
]
]
fragmentAttrs
)
"
second
attr
ranges
correct
"
)
;
testTextAttrs
(
second
11
{
.
.
.
fragmentAttrs
.
.
.
boldAttrs
}
{
}
11
17
true
)
;
testTextAttrs
(
second
17
boldAttrs
{
}
17
18
true
)
;
}
{
chrome
:
true
topLevel
:
true
urlSuffix
:
"
#
:
~
:
text
=
second
%
20phrase
"
}
)
;
add_task
(
async
function
testTextFragmentSamePage
(
)
{
const
docUrl
=
snippetToURL
(
snippet
)
;
const
initialUrl
=
docUrl
+
"
#
:
~
:
text
=
first
%
20phrase
"
;
let
scrolled
=
waitForEvent
(
EVENT_SCROLLING_START
event
=
>
event
.
accessible
.
role
=
=
ROLE_TEXT_LEAF
&
&
getAccessibleDOMNodeID
(
event
.
accessible
.
parent
)
=
=
"
first
"
)
;
await
BrowserTestUtils
.
withNewTab
(
initialUrl
async
function
(
browser
)
{
info
(
"
Waiting
for
scroll
to
first
"
)
;
const
first
=
(
await
scrolled
)
.
accessible
.
parent
;
info
(
"
Checking
ranges
"
)
;
await
waitForTextAttrRanges
(
first
[
[
4
16
]
]
fragmentAttrs
false
)
;
const
second
=
first
.
nextSibling
;
await
waitForTextAttrRanges
(
second
[
]
fragmentAttrs
false
)
;
info
(
"
Navigating
to
second
"
)
;
scrolled
=
waitForEvent
(
EVENT_SCROLLING_START
second
.
getChildAt
(
1
)
)
;
let
rangeCheck
=
waitForTextAttrRanges
(
second
[
[
4
11
]
[
11
17
]
]
fragmentAttrs
true
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
location
.
hash
=
"
#
:
~
:
text
=
second
%
20phrase
"
;
}
)
;
await
scrolled
;
info
(
"
Checking
ranges
"
)
;
await
rangeCheck
;
await
waitForTextAttrRanges
(
first
[
[
4
16
]
]
fragmentAttrs
false
)
;
}
)
;
}
)
;
