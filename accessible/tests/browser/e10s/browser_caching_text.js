"
use
strict
"
;
loadScripts
(
{
name
:
"
text
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
const
isCacheEnabled
=
Services
.
prefs
.
getBoolPref
(
"
accessibility
.
cache
.
enabled
"
false
)
;
addAccessibleTask
(
<
p
id
=
"
br
"
>
ab
cd
<
br
>
ef
gh
<
/
p
>
<
pre
id
=
"
pre
"
>
ab
cd
ef
gh
<
/
pre
>
<
p
id
=
"
linksStartEnd
"
>
<
a
href
=
"
https
:
/
/
example
.
com
/
"
>
a
<
/
a
>
b
<
a
href
=
"
https
:
/
/
example
.
com
/
"
>
c
<
/
a
>
<
/
p
>
<
p
id
=
"
linksBreaking
"
>
a
<
a
href
=
"
https
:
/
/
example
.
com
/
"
>
b
<
br
>
c
<
/
a
>
d
<
/
p
>
async
function
(
browser
docAcc
)
{
for
(
const
id
of
[
"
br
"
"
pre
"
]
)
{
const
acc
=
findAccessibleChildByID
(
docAcc
id
)
;
if
(
!
isCacheEnabled
&
&
AppConstants
.
platform
=
=
"
win
"
)
{
todo
(
false
"
Cache
disabled
so
RemoteAccessible
doesn
'
t
support
CharacterCount
on
Windows
"
)
;
}
else
{
testCharacterCount
(
[
acc
]
11
)
;
}
testTextAtOffset
(
acc
BOUNDARY_LINE_START
[
[
0
5
"
ab
cd
\
n
"
0
6
]
[
6
11
"
ef
gh
"
6
11
]
]
)
;
testTextAtOffset
(
acc
BOUNDARY_WORD_START
[
[
0
2
"
ab
"
0
3
]
[
3
5
"
cd
\
n
"
3
6
]
[
6
8
"
ef
"
6
9
]
[
9
11
"
gh
"
9
11
]
]
)
;
}
const
linksStartEnd
=
findAccessibleChildByID
(
docAcc
"
linksStartEnd
"
)
;
testTextAtOffset
(
linksStartEnd
BOUNDARY_LINE_START
[
[
0
3
{
kEmbedChar
}
b
{
kEmbedChar
}
0
3
]
]
)
;
testTextAtOffset
(
linksStartEnd
BOUNDARY_WORD_START
[
[
0
3
{
kEmbedChar
}
b
{
kEmbedChar
}
0
3
]
]
)
;
const
linksBreaking
=
findAccessibleChildByID
(
docAcc
"
linksBreaking
"
)
;
testTextAtOffset
(
linksBreaking
BOUNDARY_LINE_START
[
[
0
0
a
{
kEmbedChar
}
0
2
]
[
1
1
a
{
kEmbedChar
}
d
0
3
]
[
2
3
{
kEmbedChar
}
d
1
3
]
]
)
;
if
(
isCacheEnabled
)
{
testTextAtOffset
(
linksBreaking
BOUNDARY_WORD_START
[
[
0
0
a
{
kEmbedChar
}
0
2
]
[
1
1
a
{
kEmbedChar
}
d
0
3
]
[
2
3
{
kEmbedChar
}
d
1
3
]
]
)
;
}
else
{
todo
(
false
"
TextLeafPoint
disabled
so
word
boundaries
are
incorrect
for
linksBreaking
"
)
;
}
}
{
chrome
:
true
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
