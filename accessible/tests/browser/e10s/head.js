'
use
strict
'
;
Services
.
scriptloader
.
loadSubScript
(
'
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
shared
-
head
.
js
'
this
)
;
function
addAccessibleTask
(
doc
task
)
{
add_task
(
function
*
(
)
{
let
url
;
if
(
doc
.
includes
(
'
doc_
'
)
)
{
url
=
{
CURRENT_CONTENT_DIR
}
e10s
/
{
doc
}
;
}
else
{
url
=
data
:
text
/
html
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Accessibility
Test
<
/
title
>
<
/
head
>
<
body
id
=
"
body
"
>
{
doc
}
<
/
body
>
<
/
html
>
;
}
registerCleanupFunction
(
(
)
=
>
{
let
observers
=
Services
.
obs
.
enumerateObservers
(
'
accessible
-
event
'
)
;
while
(
observers
.
hasMoreElements
(
)
)
{
Services
.
obs
.
removeObserver
(
observers
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIObserver
)
'
accessible
-
event
'
)
;
}
}
)
;
let
onDocLoad
=
waitForEvent
(
EVENT_DOCUMENT_LOAD_COMPLETE
'
body
'
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
url
}
function
*
(
browser
)
{
registerCleanupFunction
(
(
)
=
>
{
if
(
browser
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
if
(
tab
&
&
!
tab
.
closing
&
&
tab
.
linkedBrowser
)
{
gBrowser
.
removeTab
(
tab
)
;
}
}
}
)
;
yield
SimpleTest
.
promiseFocus
(
browser
)
;
loadFrameScripts
(
browser
'
let
{
document
window
navigator
}
=
content
;
'
{
name
:
'
common
.
js
'
dir
:
MOCHITESTS_DIR
}
)
;
Logger
.
log
(
e10s
enabled
:
{
Services
.
appinfo
.
browserTabsRemoteAutostart
}
)
;
Logger
.
log
(
Actually
remote
browser
:
{
browser
.
isRemoteBrowser
}
)
;
let
event
=
yield
onDocLoad
;
yield
task
(
browser
event
.
accessible
)
;
}
)
;
}
)
;
}
function
isDefunct
(
accessible
)
{
let
defunct
=
false
;
try
{
let
extState
=
{
}
;
accessible
.
getState
(
{
}
extState
)
;
defunct
=
extState
.
value
&
Ci
.
nsIAccessibleStates
.
EXT_STATE_DEFUNCT
;
}
catch
(
x
)
{
defunct
=
true
;
}
finally
{
if
(
defunct
)
{
Logger
.
log
(
Defunct
accessible
:
{
prettyName
(
accessible
)
}
)
;
}
}
return
defunct
;
}
function
findAccessibleChildByID
(
accessible
id
)
{
if
(
getAccessibleDOMNodeID
(
accessible
)
=
=
=
id
)
{
return
accessible
;
}
for
(
let
i
=
0
;
i
<
accessible
.
children
.
length
;
+
+
i
)
{
let
found
=
findAccessibleChildByID
(
accessible
.
getChildAt
(
i
)
id
)
;
if
(
found
)
{
return
found
;
}
}
}
loadScripts
(
{
name
:
'
common
.
js
'
dir
:
MOCHITESTS_DIR
}
'
e10s
/
events
.
js
'
)
;
