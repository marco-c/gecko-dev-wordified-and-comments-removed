"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
const
snippet
=
<
style
>
#
target
{
width
:
150px
;
height
:
150px
;
background
-
color
:
lightblue
;
}
#
child
{
width
:
100px
;
height
:
100px
;
background
-
color
:
lightgreen
;
}
#
content
-
child
{
width
:
100px
;
height
:
100px
;
background
-
color
:
green
;
display
:
contents
;
}
.
hidden
{
content
-
visibility
:
hidden
;
}
.
auto
{
content
-
visibility
:
auto
;
}
#
hidden
-
subtree
-
2
{
visibility
:
hidden
;
}
<
/
style
>
<
div
class
=
"
hidden
"
id
=
"
target
"
>
<
div
id
=
"
child
"
>
A
<
/
div
>
<
div
id
=
"
content
-
child
"
>
B
<
/
div
>
<
div
id
=
"
hidden
-
subtree
-
1
"
class
=
"
hidden
"
>
C
<
/
div
>
<
div
id
=
"
hidden
-
subtree
-
2
"
>
D
<
/
div
>
<
div
id
=
"
shadow
-
host
"
>
<
/
div
>
<
/
div
>
<
script
>
const
host
=
document
.
querySelector
(
"
#
shadow
-
host
"
)
;
const
shadowRoot
=
host
.
attachShadow
(
{
mode
:
"
open
"
}
)
;
shadowRoot
.
innerHTML
=
"
<
div
id
=
'
shadowDiv
'
>
E
<
/
div
>
"
;
<
/
script
>
;
async
function
setContentVisibility
(
browser
value
)
{
let
mutationPromise
=
waitForEvent
(
EVENT_REORDER
"
target
"
)
;
info
(
Setting
content
-
visibility
:
{
value
}
)
;
await
invokeSetAttribute
(
browser
"
target
"
"
class
"
value
)
;
await
mutationPromise
;
}
addAccessibleTask
(
snippet
async
function
(
browser
accDoc
)
{
const
target
=
findAccessibleChildByID
(
accDoc
"
target
"
)
;
info
(
"
Initial
Accessibility
Structure
Test
"
)
;
testAccessibleTree
(
target
{
SECTION
:
[
]
}
)
;
await
setContentVisibility
(
browser
"
auto
"
)
;
testAccessibleTree
(
target
{
SECTION
:
[
{
SECTION
:
[
{
TEXT_LEAF
:
[
]
}
]
}
{
SECTION
:
[
{
TEXT_LEAF
:
[
]
}
]
}
{
SECTION
:
[
]
}
{
SECTION
:
[
{
SECTION
:
[
{
TEXT_LEAF
:
[
]
}
]
}
]
}
]
}
)
;
await
setContentVisibility
(
browser
"
hidden
"
)
;
testAccessibleTree
(
target
{
SECTION
:
[
]
}
)
;
}
{
iframe
:
true
remoteIframe
:
true
chrome
:
true
}
)
;
