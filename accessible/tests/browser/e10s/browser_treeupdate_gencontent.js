'
use
strict
'
;
loadScripts
(
{
name
:
'
role
.
js
'
dir
:
MOCHITESTS_DIR
}
)
;
addAccessibleTask
(
<
style
>
.
gentext
:
before
{
content
:
"
START
"
}
.
gentext
:
after
{
content
:
"
END
"
}
<
/
style
>
<
div
id
=
"
container1
"
>
<
/
div
>
<
div
id
=
"
container2
"
>
<
div
id
=
"
container2_child
"
>
text
<
/
div
>
<
/
div
>
async
function
(
browser
accDoc
)
{
const
id1
=
'
container1
'
;
const
id2
=
'
container2
'
;
let
container1
=
findAccessibleChildByID
(
accDoc
id1
)
;
let
container2
=
findAccessibleChildByID
(
accDoc
id2
)
;
let
tree
=
{
SECTION
:
[
]
}
;
testAccessibleTree
(
container1
tree
)
;
tree
=
{
SECTION
:
[
{
SECTION
:
[
{
TEXT_LEAF
:
[
]
}
]
}
]
}
;
testAccessibleTree
(
container2
tree
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id1
)
;
await
ContentTask
.
spawn
(
browser
id1
id
=
>
{
let
node
=
content
.
document
.
createElement
(
'
div
'
)
;
node
.
textContent
=
'
text
'
;
node
.
setAttribute
(
'
class
'
'
gentext
'
)
;
content
.
document
.
getElementById
(
id
)
.
appendChild
(
node
)
;
}
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
SECTION
:
[
{
STATICTEXT
:
[
]
}
{
TEXT_LEAF
:
[
]
}
{
STATICTEXT
:
[
]
}
]
}
]
}
;
testAccessibleTree
(
container1
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id2
)
;
await
invokeSetAttribute
(
browser
'
container2_child
'
'
class
'
'
gentext
'
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
SECTION
:
[
{
STATICTEXT
:
[
]
}
{
TEXT_LEAF
:
[
]
}
{
STATICTEXT
:
[
]
}
]
}
]
}
;
testAccessibleTree
(
container2
tree
)
;
}
)
;
