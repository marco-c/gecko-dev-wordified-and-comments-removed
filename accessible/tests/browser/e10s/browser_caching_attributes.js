"
use
strict
"
;
loadScripts
(
{
name
:
"
attributes
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
const
isCacheEnabled
=
Services
.
prefs
.
getBoolPref
(
"
accessibility
.
cache
.
enabled
"
false
)
;
const
defaultAttributes
=
{
"
margin
-
top
"
:
"
0px
"
"
margin
-
right
"
:
"
0px
"
"
margin
-
bottom
"
:
"
0px
"
"
margin
-
left
"
:
"
0px
"
"
text
-
align
"
:
"
start
"
"
text
-
indent
"
:
"
0px
"
id
:
"
textbox
"
tag
:
"
input
"
display
:
"
inline
-
block
"
}
;
const
attributesTests
=
[
{
desc
:
"
Initiall
accessible
attributes
"
expected
:
defaultAttributes
unexpected
:
{
"
line
-
number
"
:
"
1
"
"
explicit
-
name
"
:
"
true
"
"
container
-
live
"
:
"
polite
"
live
:
"
polite
"
}
}
{
desc
:
"
line
-
number
attribute
is
present
when
textbox
is
focused
"
async
action
(
browser
)
{
await
invokeFocus
(
browser
"
textbox
"
)
;
}
waitFor
:
EVENT_FOCUS
expected
:
Object
.
assign
(
{
}
defaultAttributes
{
"
line
-
number
"
:
"
1
"
}
)
unexpected
:
{
"
explicit
-
name
"
:
"
true
"
"
container
-
live
"
:
"
polite
"
live
:
"
polite
"
}
}
{
desc
:
"
aria
-
live
sets
container
-
live
and
live
attributes
"
attrs
:
[
{
attr
:
"
aria
-
live
"
value
:
"
polite
"
}
]
expected
:
Object
.
assign
(
{
}
defaultAttributes
{
"
line
-
number
"
:
"
1
"
"
container
-
live
"
:
"
polite
"
live
:
"
polite
"
}
)
unexpected
:
{
"
explicit
-
name
"
:
"
true
"
}
}
{
desc
:
"
title
attribute
sets
explicit
-
name
attribute
to
true
"
attrs
:
[
{
attr
:
"
title
"
value
:
"
textbox
"
}
]
expected
:
Object
.
assign
(
{
}
defaultAttributes
{
"
line
-
number
"
:
"
1
"
"
explicit
-
name
"
:
"
true
"
"
container
-
live
"
:
"
polite
"
live
:
"
polite
"
}
)
unexpected
:
{
}
}
]
;
addAccessibleTask
(
<
input
id
=
"
textbox
"
value
=
"
hello
"
>
async
function
(
browser
accDoc
)
{
let
textbox
=
findAccessibleChildByID
(
accDoc
"
textbox
"
)
;
for
(
let
{
desc
action
attrs
expected
waitFor
unexpected
}
of
attributesTests
)
{
info
(
desc
)
;
let
onUpdate
;
if
(
waitFor
)
{
onUpdate
=
waitForEvent
(
waitFor
"
textbox
"
)
;
}
if
(
action
)
{
await
action
(
browser
)
;
}
else
if
(
attrs
)
{
for
(
let
{
attr
value
}
of
attrs
)
{
await
invokeSetAttribute
(
browser
"
textbox
"
attr
value
)
;
}
}
await
onUpdate
;
testAttrs
(
textbox
expected
)
;
testAbsentAttrs
(
textbox
unexpected
)
;
}
}
{
topLevel
:
!
isCacheEnabled
iframe
:
!
isCacheEnabled
remoteIframe
:
!
isCacheEnabled
}
)
;
addAccessibleTask
(
<
p
id
=
"
p
"
>
text
<
/
p
>
<
textarea
id
=
"
textarea
"
>
<
/
textarea
>
async
function
(
browser
docAcc
)
{
testAttrs
(
docAcc
{
tag
:
"
body
"
}
true
)
;
const
p
=
findAccessibleChildByID
(
docAcc
"
p
"
)
;
testAttrs
(
p
{
tag
:
"
p
"
}
true
)
;
const
textLeaf
=
p
.
firstChild
;
testAbsentAttrs
(
textLeaf
{
tag
:
"
"
}
)
;
const
textarea
=
findAccessibleChildByID
(
docAcc
"
textarea
"
)
;
testAttrs
(
textarea
{
tag
:
"
textarea
"
}
true
)
;
}
{
chrome
:
true
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
