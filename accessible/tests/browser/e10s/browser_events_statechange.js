"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
function
checkStateChangeEvent
(
event
state
isExtraState
isEnabled
)
{
let
scEvent
=
event
.
QueryInterface
(
nsIAccessibleStateChangeEvent
)
;
is
(
scEvent
.
state
state
"
Correct
state
of
the
statechange
event
.
"
)
;
is
(
scEvent
.
isExtraState
isExtraState
"
Correct
extra
state
bit
of
the
statechange
event
.
"
)
;
is
(
scEvent
.
isEnabled
isEnabled
"
Correct
state
of
statechange
event
state
"
)
;
}
let
iframeSrc
=
data
:
text
/
html
<
html
>
<
head
>
<
meta
charset
=
'
utf
-
8
'
/
>
<
title
>
Inner
Iframe
<
/
title
>
<
/
head
>
<
body
id
=
'
iframe
'
>
<
/
body
>
<
/
html
>
;
addAccessibleTask
(
<
iframe
id
=
"
iframe
"
src
=
"
{
iframeSrc
}
"
>
<
/
iframe
>
<
input
id
=
"
checkbox
"
type
=
"
checkbox
"
/
>
async
function
(
browser
)
{
let
onStateChange
=
waitForEvent
(
EVENT_STATE_CHANGE
"
checkbox
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
checkbox
"
)
.
checked
=
true
;
}
)
;
let
event
=
await
onStateChange
;
checkStateChangeEvent
(
event
STATE_CHECKED
false
true
)
;
testStates
(
event
.
accessible
STATE_CHECKED
0
)
;
onStateChange
=
waitForEvent
(
EVENT_STATE_CHANGE
"
iframe
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
iframe
"
)
.
contentDocument
.
designMode
=
"
on
"
;
}
)
;
event
=
await
onStateChange
;
checkStateChangeEvent
(
event
EXT_STATE_EDITABLE
true
true
)
;
testStates
(
event
.
accessible
0
EXT_STATE_EDITABLE
)
;
}
{
iframe
:
true
remoteIframe
:
true
}
)
;
