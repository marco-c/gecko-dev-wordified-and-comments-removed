"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
const
attributeTests
=
[
{
desc
:
"
Checkbox
with
checked
attribute
set
to
true
should
have
checked
"
+
"
state
"
attrs
:
[
{
attr
:
"
checked
"
value
:
"
true
"
}
]
expected
:
[
STATE_CHECKED
0
]
}
{
desc
:
"
Checkbox
with
no
checked
attribute
should
not
have
checked
state
"
attrs
:
[
{
attr
:
"
checked
"
}
]
expected
:
[
0
0
STATE_CHECKED
]
}
]
;
const
ariaTests
=
[
{
desc
:
"
File
input
has
busy
state
when
aria
-
busy
attribute
is
set
to
true
"
attrs
:
[
{
attr
:
"
aria
-
busy
"
value
:
"
true
"
}
]
expected
:
[
STATE_BUSY
0
STATE_REQUIRED
|
STATE_INVALID
]
}
{
desc
:
"
File
input
has
required
state
when
aria
-
required
attribute
is
set
"
+
"
to
true
"
attrs
:
[
{
attr
:
"
aria
-
required
"
value
:
"
true
"
}
]
expected
:
[
STATE_REQUIRED
0
STATE_INVALID
]
}
{
desc
:
"
File
input
has
invalid
state
when
aria
-
invalid
attribute
is
set
to
"
+
"
true
"
attrs
:
[
{
attr
:
"
aria
-
invalid
"
value
:
"
true
"
}
]
expected
:
[
STATE_INVALID
0
]
}
]
;
const
extraStateTests
=
[
{
desc
:
"
Input
has
no
extra
enabled
state
when
aria
and
native
disabled
"
+
"
attributes
are
set
at
once
"
attrs
:
[
{
attr
:
"
aria
-
disabled
"
value
:
"
true
"
}
{
attr
:
"
disabled
"
value
:
"
true
"
}
]
expected
:
[
0
0
0
EXT_STATE_ENABLED
]
}
{
desc
:
"
Input
has
an
extra
enabled
state
when
aria
and
native
disabled
"
+
"
attributes
are
unset
at
once
"
attrs
:
[
{
attr
:
"
aria
-
disabled
"
}
{
attr
:
"
disabled
"
}
]
expected
:
[
0
EXT_STATE_ENABLED
]
}
]
;
async
function
runStateTests
(
browser
accDoc
id
tests
)
{
let
acc
=
findAccessibleChildByID
(
accDoc
id
)
;
for
(
let
{
desc
attrs
expected
}
of
tests
)
{
const
[
expState
expExtState
absState
absExtState
]
=
expected
;
info
(
desc
)
;
let
onUpdate
=
waitForEvent
(
EVENT_STATE_CHANGE
evt
=
>
{
if
(
getAccessibleDOMNodeID
(
evt
.
accessible
)
!
=
id
)
{
return
false
;
}
const
scEvt
=
evt
.
QueryInterface
(
nsIAccessibleStateChangeEvent
)
;
if
(
scEvt
.
isExtraState
)
{
if
(
scEvt
.
state
&
expExtState
|
|
scEvt
.
state
&
absExtState
)
{
return
true
;
}
return
false
;
}
return
scEvt
.
state
&
expState
|
|
scEvt
.
state
&
absState
;
}
)
;
for
(
let
{
attr
value
}
of
attrs
)
{
await
invokeSetAttribute
(
browser
id
attr
value
)
;
}
await
onUpdate
;
testStates
(
acc
.
.
.
expected
)
;
}
}
addAccessibleTask
(
<
input
id
=
"
checkbox
"
type
=
"
checkbox
"
>
<
input
id
=
"
file
"
type
=
"
file
"
>
<
input
id
=
"
text
"
>
async
function
(
browser
accDoc
)
{
await
runStateTests
(
browser
accDoc
"
checkbox
"
attributeTests
)
;
await
runStateTests
(
browser
accDoc
"
file
"
ariaTests
)
;
await
runStateTests
(
browser
accDoc
"
text
"
extraStateTests
)
;
}
{
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
button
id
=
"
b1
"
>
b1
<
/
button
>
<
button
id
=
"
b2
"
>
b2
<
/
button
>
async
function
(
browser
docAcc
)
{
const
b1
=
findAccessibleChildByID
(
docAcc
"
b1
"
)
;
const
b2
=
findAccessibleChildByID
(
docAcc
"
b2
"
)
;
let
focused
=
waitForEvent
(
EVENT_FOCUS
b1
)
;
await
invokeFocus
(
browser
"
b1
"
)
;
await
focused
;
testStates
(
docAcc
0
0
STATE_FOCUSED
)
;
testStates
(
b1
STATE_FOCUSED
)
;
testStates
(
b2
0
0
STATE_FOCUSED
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
b2
)
;
await
invokeFocus
(
browser
"
b2
"
)
;
await
focused
;
testStates
(
b2
STATE_FOCUSED
)
;
testStates
(
b1
0
0
STATE_FOCUSED
)
;
}
{
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
button
id
=
"
b1
"
>
b1
<
/
button
>
<
button
id
=
"
b2
"
>
b2
<
/
button
>
async
function
(
browser
docAcc
)
{
testStates
(
docAcc
STATE_FOCUSED
)
;
}
)
;
