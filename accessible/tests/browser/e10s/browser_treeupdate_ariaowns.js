"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
async
function
testContainer1
(
browser
accDoc
)
{
const
id
=
"
t1_container
"
;
const
docID
=
getAccessibleDOMNodeID
(
accDoc
)
;
const
acc
=
findAccessibleChildByID
(
accDoc
id
)
;
let
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
{
SECTION
:
[
]
}
]
}
{
PUSHBUTTON
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeSetAttribute
(
browser
id
"
aria
-
owns
"
"
t1_button
t1_subdiv
"
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
{
SECTION
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeSetAttribute
(
browser
id
"
aria
-
owns
"
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
PUSHBUTTON
:
[
]
}
{
CHECKBUTTON
:
[
{
SECTION
:
[
]
}
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeSetAttribute
(
browser
id
"
aria
-
owns
"
"
t1_button
t1_subdiv
"
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
{
SECTION
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
docID
)
;
await
invokeSetAttribute
(
browser
id
"
aria
-
owns
"
"
t1_button
t1_subdiv
t1_group
"
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
{
SECTION
:
[
]
}
{
GROUPING
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeContentTask
(
browser
[
id
]
contentId
=
>
{
let
div
=
content
.
document
.
createElement
(
"
div
"
)
;
div
.
setAttribute
(
"
id
"
"
t1_child3
"
)
;
div
.
setAttribute
(
"
role
"
"
radio
"
)
;
content
.
document
.
getElementById
(
contentId
)
.
appendChild
(
div
)
;
}
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
RADIOBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
{
SECTION
:
[
]
}
{
GROUPING
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
t1_span
"
)
.
remove
(
)
;
}
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
RADIOBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
{
GROUPING
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
docID
)
;
await
invokeSetAttribute
(
browser
"
t1_group
"
"
id
"
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
RADIOBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
docID
)
;
await
invokeSetAttribute
(
browser
"
t1_grouptmp
"
"
id
"
"
t1_group
"
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
RADIOBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
{
GROUPING
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
}
async
function
removeContainer
(
browser
accDoc
)
{
const
id
=
"
t2_container1
"
;
const
acc
=
findAccessibleChildByID
(
accDoc
id
)
;
let
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
t2_container2
"
)
.
removeChild
(
content
.
document
.
getElementById
(
"
t2_container3
"
)
)
;
}
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
]
}
;
testAccessibleTree
(
acc
tree
)
;
}
async
function
stealAndRecacheChildren
(
browser
accDoc
)
{
const
id1
=
"
t3_container1
"
;
const
id2
=
"
t3_container2
"
;
const
acc1
=
findAccessibleChildByID
(
accDoc
id1
)
;
const
acc2
=
findAccessibleChildByID
(
accDoc
id2
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id2
)
;
await
invokeSetAttribute
(
browser
id2
"
aria
-
owns
"
"
t3_child
"
)
;
await
invokeContentTask
(
browser
[
id2
]
id
=
>
{
let
div
=
content
.
document
.
createElement
(
"
div
"
)
;
div
.
setAttribute
(
"
role
"
"
radio
"
)
;
content
.
document
.
getElementById
(
id
)
.
appendChild
(
div
)
;
}
)
;
await
onReorder
;
let
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
]
}
;
testAccessibleTree
(
acc1
tree
)
;
tree
=
{
SECTION
:
[
{
RADIOBUTTON
:
[
]
}
]
}
;
testAccessibleTree
(
acc2
tree
)
;
}
async
function
showHiddenElement
(
browser
accDoc
)
{
const
id
=
"
t4_container1
"
;
const
acc
=
findAccessibleChildByID
(
accDoc
id
)
;
let
tree
=
{
SECTION
:
[
{
RADIOBUTTON
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeSetStyle
(
browser
"
t4_child1
"
"
display
"
"
block
"
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
RADIOBUTTON
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
}
async
function
rearrangeARIAOwns
(
browser
accDoc
)
{
const
id
=
"
t5_container
"
;
const
acc
=
findAccessibleChildByID
(
accDoc
id
)
;
const
tests
=
[
{
val
:
"
t5_checkbox
t5_radio
t5_button
"
roleList
:
[
"
CHECKBUTTON
"
"
RADIOBUTTON
"
"
PUSHBUTTON
"
]
}
{
val
:
"
t5_radio
t5_button
t5_checkbox
"
roleList
:
[
"
RADIOBUTTON
"
"
PUSHBUTTON
"
"
CHECKBUTTON
"
]
}
]
;
for
(
let
{
val
roleList
}
of
tests
)
{
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeSetAttribute
(
browser
id
"
aria
-
owns
"
val
)
;
await
onReorder
;
let
tree
=
{
SECTION
:
[
]
}
;
for
(
let
role
of
roleList
)
{
let
ch
=
{
}
;
ch
[
role
]
=
[
]
;
tree
.
SECTION
.
push
(
ch
)
;
}
testAccessibleTree
(
acc
tree
)
;
}
}
async
function
removeNotARIAOwnedEl
(
browser
accDoc
)
{
const
id
=
"
t6_container
"
;
const
acc
=
findAccessibleChildByID
(
accDoc
id
)
;
let
tree
=
{
SECTION
:
[
{
TEXT_LEAF
:
[
]
}
{
GROUPING
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
await
invokeContentTask
(
browser
[
id
]
contentId
=
>
{
content
.
document
.
getElementById
(
contentId
)
.
removeChild
(
content
.
document
.
getElementById
(
"
t6_span
"
)
)
;
}
)
;
await
onReorder
;
tree
=
{
SECTION
:
[
{
GROUPING
:
[
]
}
]
}
;
testAccessibleTree
(
acc
tree
)
;
}
addAccessibleTask
(
"
e10s
/
doc_treeupdate_ariaowns
.
html
"
async
function
(
browser
accDoc
)
{
await
testContainer1
(
browser
accDoc
)
;
await
removeContainer
(
browser
accDoc
)
;
await
stealAndRecacheChildren
(
browser
accDoc
)
;
await
showHiddenElement
(
browser
accDoc
)
;
await
rearrangeARIAOwns
(
browser
accDoc
)
;
await
removeNotARIAOwnedEl
(
browser
accDoc
)
;
}
{
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
span
id
=
"
a
"
>
<
div
id
=
"
b
"
aria
-
owns
=
"
c
"
>
<
/
div
>
<
/
span
>
<
div
id
=
"
c
"
>
<
iframe
>
<
/
iframe
>
<
/
div
>
<
script
>
document
.
getElementById
(
"
c
"
)
.
setAttribute
(
"
aria
-
owns
"
"
a
"
)
;
<
/
script
>
async
function
(
browser
accDoc
)
{
testAccessibleTree
(
accDoc
{
DOCUMENT
:
[
{
SECTION
:
[
{
SECTION
:
[
{
INTERNAL_FRAME
:
[
{
DOCUMENT
:
[
]
}
]
}
]
}
]
}
]
}
)
;
}
)
;
addAccessibleTask
(
<
input
id
=
'
x
'
>
<
/
input
>
<
div
aria
-
owns
=
'
x
'
>
<
/
div
>
async
function
(
browser
accDoc
)
{
testAccessibleTree
(
accDoc
{
DOCUMENT
:
[
{
SECTION
:
[
{
ENTRY
:
[
]
}
]
}
]
}
)
;
info
(
"
Removing
the
div
that
aria
-
owns
a
DOM
sibling
"
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
accDoc
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
querySelector
(
"
div
"
)
.
remove
(
)
;
}
)
;
await
onReorder
;
info
(
"
Verifying
that
the
formerly
-
owned
child
is
still
present
"
)
;
testAccessibleTree
(
accDoc
{
DOCUMENT
:
[
{
ENTRY
:
[
]
}
]
}
)
;
}
{
chrome
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
input
id
=
'
x
'
>
<
/
input
>
<
input
id
=
'
y
'
>
<
div
aria
-
owns
=
'
x
y
'
>
<
/
div
>
async
function
(
browser
accDoc
)
{
testAccessibleTree
(
accDoc
{
DOCUMENT
:
[
{
SECTION
:
[
{
ENTRY
:
[
]
}
{
ENTRY
:
[
]
}
]
}
]
}
)
;
info
(
"
Removing
the
div
that
aria
-
owns
DOM
siblings
"
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
accDoc
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
querySelector
(
"
div
"
)
.
remove
(
)
;
}
)
;
await
onReorder
;
info
(
"
Verifying
that
the
formerly
-
owned
children
are
still
present
"
)
;
testAccessibleTree
(
accDoc
{
DOCUMENT
:
[
{
ENTRY
:
[
]
}
{
ENTRY
:
[
]
}
]
}
)
;
}
{
chrome
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
container
"
aria
-
owns
=
"
b
d
c
a
"
>
<
div
id
=
"
a
"
role
=
"
button
"
>
<
/
div
>
<
div
id
=
"
b
"
role
=
"
checkbox
"
>
<
/
div
>
<
/
div
>
<
div
id
=
"
c
"
role
=
"
radio
"
>
<
/
div
>
<
div
id
=
"
d
"
>
<
/
div
>
async
function
(
browser
accDoc
)
{
testAccessibleTree
(
accDoc
{
DOCUMENT
:
[
{
SECTION
:
[
{
CHECKBUTTON
:
[
]
}
{
SECTION
:
[
]
}
{
RADIOBUTTON
:
[
]
}
{
PUSHBUTTON
:
[
]
}
]
}
]
}
)
;
info
(
"
Removing
the
div
that
aria
-
owns
other
elements
"
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
accDoc
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
querySelector
(
"
#
container
"
)
.
remove
(
)
;
}
)
;
await
onReorder
;
info
(
"
Verify
DOM
children
are
removed
order
of
remaining
elements
is
correct
"
)
;
testAccessibleTree
(
accDoc
{
DOCUMENT
:
[
{
RADIOBUTTON
:
[
]
}
{
SECTION
:
[
]
}
]
}
)
;
}
{
chrome
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
