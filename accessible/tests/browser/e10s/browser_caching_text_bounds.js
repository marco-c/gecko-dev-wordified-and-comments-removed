"
use
strict
"
;
loadScripts
(
{
name
:
"
layout
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
async
function
testTextNode
(
accDoc
browser
id
)
{
await
testTextRange
(
accDoc
browser
id
0
-
1
)
;
}
async
function
testTextRange
(
accDoc
browser
id
start
end
)
{
const
r
=
await
invokeContentTask
(
browser
[
id
start
end
]
(
_id
_start
_end
)
=
>
{
const
htNode
=
content
.
document
.
getElementById
(
_id
)
;
let
[
eX
eY
eW
eH
]
=
[
Number
.
MAX_SAFE_INTEGER
Number
.
MAX_SAFE_INTEGER
0
0
]
;
let
traversed
=
0
;
let
localStart
=
_start
;
let
endTraversal
=
false
;
for
(
let
element
of
htNode
.
childNodes
)
{
let
isEmbeddedElement
=
false
;
if
(
element
.
length
=
=
undefined
)
{
if
(
!
element
.
firstChild
)
{
continue
;
}
else
{
isEmbeddedElement
=
true
;
}
}
if
(
element
.
length
+
traversed
<
_start
)
{
traversed
+
=
element
.
length
;
localStart
-
=
element
.
length
;
continue
;
}
let
rect
;
if
(
isEmbeddedElement
)
{
rect
=
element
.
getBoundingClientRect
(
)
;
}
else
{
const
range
=
content
.
document
.
createRange
(
)
;
range
.
setStart
(
element
localStart
)
;
if
(
_end
!
=
-
1
&
&
_end
-
traversed
<
=
element
.
length
)
{
endTraversal
=
true
;
range
.
setEnd
(
element
_end
-
traversed
)
;
}
else
{
range
.
setEnd
(
element
element
.
length
)
;
}
rect
=
range
.
getBoundingClientRect
(
)
;
}
const
oldX
=
eX
=
=
Number
.
MAX_SAFE_INTEGER
?
0
:
eX
;
const
oldY
=
eY
=
=
Number
.
MAX_SAFE_INTEGER
?
0
:
eY
;
eX
=
Math
.
min
(
eX
rect
.
x
)
;
eY
=
Math
.
min
(
eY
rect
.
y
)
;
eW
=
Math
.
abs
(
Math
.
max
(
oldX
+
eW
rect
.
x
+
rect
.
width
)
-
eX
)
;
eH
=
Math
.
abs
(
Math
.
max
(
oldY
+
eH
rect
.
y
+
rect
.
height
)
-
eY
)
;
if
(
endTraversal
)
{
break
;
}
localStart
=
0
;
traversed
+
=
element
.
length
;
}
return
[
Math
.
round
(
eX
)
Math
.
round
(
eY
)
Math
.
round
(
eW
)
Math
.
round
(
eH
)
]
;
}
)
;
let
hyperTextNode
=
findAccessibleChildByID
(
accDoc
id
)
;
testTextBounds
(
hyperTextNode
start
end
r
COORDTYPE_PARENT_RELATIVE
)
;
}
addAccessibleTask
(
<
p
id
=
'
p1
'
style
=
'
font
-
family
:
monospace
;
'
>
Tilimilitryamdiya
<
/
p
>
<
p
id
=
'
p2
'
style
=
'
font
-
family
:
monospace
;
'
>
<
/
p
>
<
p
id
=
'
p3
'
dir
=
'
ltr
'
style
=
'
font
-
family
:
monospace
;
'
>
<
/
p
>
<
pre
id
=
'
p4
'
style
=
'
font
-
family
:
monospace
;
'
>
a
%
0abcdef
<
/
pre
>
async
function
(
browser
accDoc
)
{
info
(
"
Testing
simple
LtR
text
"
)
;
if
(
isWinNoCache
)
{
ok
(
true
"
skipping
tests
running
on
windows
without
cache
"
)
;
return
;
}
await
testTextNode
(
accDoc
browser
"
p1
"
)
;
await
testTextNode
(
accDoc
browser
"
p2
"
)
;
await
testTextNode
(
accDoc
browser
"
p3
"
)
;
await
testTextNode
(
accDoc
browser
"
p4
"
)
;
}
{
iframe
:
true
}
)
;
addAccessibleTask
(
<
p
id
=
'
p1
'
style
=
'
font
-
family
:
monospace
;
'
>
Tilimilitryamdiya
<
/
p
>
<
p
id
=
'
p2
'
dir
=
'
ltr
'
style
=
'
font
-
family
:
monospace
;
'
>
<
/
p
>
async
function
(
browser
accDoc
)
{
info
(
"
Testing
partial
ranges
in
LtR
text
"
)
;
await
testTextRange
(
accDoc
browser
"
p1
"
0
4
)
;
await
testTextRange
(
accDoc
browser
"
p1
"
2
8
)
;
await
testTextRange
(
accDoc
browser
"
p1
"
12
17
)
;
await
testTextRange
(
accDoc
browser
"
p2
"
0
4
)
;
await
testTextRange
(
accDoc
browser
"
p2
"
2
8
)
;
await
testTextRange
(
accDoc
browser
"
p2
"
6
11
)
;
}
{
topLevel
:
!
isWinNoCache
iframe
:
!
isWinNoCache
}
)
;
addAccessibleTask
(
<
p
id
=
'
p4
'
dir
=
'
ltr
'
style
=
'
font
-
family
:
monospace
;
'
>
<
br
>
<
/
p
>
<
p
id
=
'
p5
'
dir
=
'
ltr
'
style
=
'
font
-
family
:
monospace
;
'
>
<
br
>
<
/
p
>
<
p
id
=
'
p6
'
style
=
'
font
-
family
:
monospace
;
'
>
hello
world
I
'
m
on
line
one
<
br
>
and
I
'
m
a
separate
line
two
with
slightly
more
text
<
/
p
>
<
p
id
=
'
p7
'
style
=
'
font
-
family
:
monospace
;
'
>
hello
world
<
br
>
hello
world
<
/
p
>
async
function
(
browser
accDoc
)
{
info
(
"
Testing
multiline
LtR
text
"
)
;
await
testTextNode
(
accDoc
browser
"
p4
"
)
;
await
testTextNode
(
accDoc
browser
"
p5
"
)
;
await
testTextNode
(
accDoc
browser
"
p7
"
)
;
}
{
topLevel
:
!
isWinNoCache
iframe
:
!
isWinNoCache
}
)
;
addAccessibleTask
(
<
p
id
=
'
p1
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
Tilimilitryamdiya
<
/
p
>
<
p
id
=
'
p2
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
<
/
p
>
<
p
id
=
'
p3
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
<
/
p
>
<
pre
id
=
'
p4
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
a
%
0abcdef
<
/
pre
>
async
function
(
browser
accDoc
)
{
info
(
"
Testing
simple
RtL
text
"
)
;
await
testTextNode
(
accDoc
browser
"
p1
"
)
;
await
testTextNode
(
accDoc
browser
"
p2
"
)
;
await
testTextNode
(
accDoc
browser
"
p3
"
)
;
await
testTextNode
(
accDoc
browser
"
p4
"
)
;
}
{
topLevel
:
!
isWinNoCache
iframe
:
!
isWinNoCache
}
)
;
addAccessibleTask
(
<
p
id
=
'
p4
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
<
br
>
<
/
p
>
<
p
id
=
'
p5
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
<
br
>
<
/
p
>
<
p
id
=
'
p6
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
hello
world
I
'
m
on
line
one
<
br
>
and
I
'
m
a
separate
line
two
with
slightly
more
text
<
/
p
>
<
p
id
=
'
p7
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
hello
world
<
br
>
hello
world
<
/
p
>
async
function
(
browser
accDoc
)
{
info
(
"
Testing
multiline
RtL
text
"
)
;
await
testTextNode
(
accDoc
browser
"
p4
"
)
;
if
(
!
isCacheEnabled
)
{
await
testTextNode
(
accDoc
browser
"
p5
"
)
;
}
await
testTextNode
(
accDoc
browser
"
p7
"
)
;
}
{
topLevel
:
!
isWinNoCache
iframe
:
!
isWinNoCache
}
)
;
addAccessibleTask
(
<
p
id
=
'
p1
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
Tilimilitryamdiya
<
/
p
>
<
p
id
=
'
p2
'
dir
=
'
rtl
'
style
=
'
font
-
family
:
monospace
;
'
>
<
/
p
>
async
function
(
browser
accDoc
)
{
info
(
"
Testing
partial
ranges
in
RtL
text
"
)
;
await
testTextRange
(
accDoc
browser
"
p1
"
0
4
)
;
await
testTextRange
(
accDoc
browser
"
p1
"
2
8
)
;
await
testTextRange
(
accDoc
browser
"
p1
"
12
17
)
;
await
testTextRange
(
accDoc
browser
"
p2
"
0
4
)
;
await
testTextRange
(
accDoc
browser
"
p2
"
2
8
)
;
await
testTextRange
(
accDoc
browser
"
p2
"
6
10
)
;
}
{
topLevel
:
!
isWinNoCache
iframe
:
!
isWinNoCache
}
)
;
