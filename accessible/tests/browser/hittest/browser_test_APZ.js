"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
addAccessibleTask
(
<
div
id
=
"
test
"
role
=
"
button
"
style
=
"
background
:
green
;
min
-
height
:
10vh
;
max
-
width
:
10vh
;
display
:
inline
-
block
;
"
>
I
am
square
<
/
div
>
<
br
>
<
div
style
=
"
height
:
70vh
;
"
>
hello
world
I
am
large
<
/
div
>
<
br
>
<
h1
id
=
"
heading
"
style
=
"
display
:
inline
-
block
;
"
>
I
am
a
heading
<
/
h1
>
async
function
(
browser
accDoc
)
{
const
test
=
findAccessibleChildByID
(
accDoc
"
test
"
)
;
info
(
"
Hittesting
pre
-
APZ
"
)
;
let
dpr
=
await
getContentDPR
(
browser
)
;
let
[
targetX
targetY
targetW
targetH
]
=
Layout
.
getBounds
(
test
dpr
)
;
let
[
x
y
]
=
Layout
.
getBounds
(
accDoc
dpr
)
;
await
testChildAtPoint
(
dpr
targetX
-
x
+
targetW
/
2
targetY
-
y
+
targetH
/
2
accDoc
test
test
)
;
info
(
"
Pinch
zooming
.
.
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
const
visualScrollPromise
=
new
Promise
(
resolve
=
>
{
content
.
window
.
visualViewport
.
addEventListener
(
"
scroll
"
resolve
{
once
:
true
}
)
;
}
)
;
const
utils
=
SpecialPowers
.
getDOMWindowUtils
(
content
.
window
)
;
utils
.
setResolutionAndScaleTo
(
2
)
;
utils
.
scrollToVisual
(
200
200
utils
.
UPDATE_TYPE_MAIN_THREAD
utils
.
SCROLL_MODE_INSTANT
)
;
await
visualScrollPromise
;
}
)
;
info
(
"
Hittesting
post
-
APZ
"
)
;
dpr
=
await
getContentDPR
(
browser
)
;
let
[
newX
newY
newW
newH
]
=
Layout
.
getBounds
(
test
dpr
)
;
[
x
y
]
=
Layout
.
getBounds
(
accDoc
dpr
)
;
await
testChildAtPoint
(
dpr
newX
-
x
+
newW
/
2
newY
-
y
+
newH
/
2
accDoc
null
null
)
;
info
(
"
Verifying
scaled
bounds
"
)
;
Assert
.
less
(
newX
0
"
X
coord
should
be
smaller
than
0
"
)
;
Assert
.
less
(
newY
0
"
Y
coord
should
be
smaller
than
0
"
)
;
Assert
.
greater
(
newW
targetW
"
Width
should
be
larger
than
old
width
"
)
;
Assert
.
greater
(
newH
targetH
"
Height
should
be
larger
than
old
height
"
)
;
}
{
iframe
:
false
remoteIframe
:
false
}
)
;
addAccessibleTask
(
<
div
id
=
"
test
"
role
=
"
button
"
style
=
"
background
:
green
;
min
-
height
:
10vh
;
max
-
width
:
10vh
;
display
:
inline
-
block
;
"
>
I
am
square
<
/
div
>
<
br
>
<
div
id
=
"
spacer
"
style
=
"
min
-
height
:
70vh
;
display
:
inline
-
block
;
"
>
hello
world
I
am
large
<
/
div
>
<
br
>
<
h1
id
=
"
heading
"
style
=
"
display
:
inline
-
block
;
"
>
I
am
a
heading
<
/
h1
>
async
function
(
browser
accDoc
)
{
const
test
=
findAccessibleChildByID
(
accDoc
"
test
"
)
;
const
heading
=
findAccessibleChildByID
(
accDoc
"
heading
"
)
;
info
(
"
Hittesting
pre
-
APZ
"
)
;
let
dpr
=
await
getContentDPR
(
browser
)
;
let
[
targetX
targetY
targetW
targetH
]
=
Layout
.
getBounds
(
test
dpr
)
;
let
[
x
y
]
=
Layout
.
getBounds
(
accDoc
dpr
)
;
const
origTestX
=
targetX
-
x
+
targetW
/
2
;
const
origTestY
=
targetY
-
y
+
targetH
/
2
;
await
testChildAtPoint
(
dpr
origTestX
origTestY
accDoc
test
test
)
;
[
targetX
targetY
targetW
targetH
]
=
Layout
.
getBounds
(
heading
dpr
)
;
const
origHeadingX
=
targetX
-
x
+
targetW
/
2
;
const
origHeadingY
=
targetY
-
y
+
targetH
/
2
;
await
testChildAtPoint
(
dpr
origHeadingX
origHeadingY
accDoc
heading
heading
.
firstChild
)
;
info
(
"
Pinch
zooming
.
.
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
const
visualScrollPromise
=
new
Promise
(
resolve
=
>
{
content
.
window
.
visualViewport
.
addEventListener
(
"
scroll
"
resolve
{
once
:
true
}
)
;
}
)
;
const
utils
=
SpecialPowers
.
getDOMWindowUtils
(
content
.
window
)
;
utils
.
setResolutionAndScaleTo
(
2
)
;
utils
.
scrollToVisual
(
200
200
utils
.
UPDATE_TYPE_MAIN_THREAD
utils
.
SCROLL_MODE_INSTANT
)
;
await
visualScrollPromise
;
}
)
;
info
(
"
Hittesting
post
-
APZ
pre
-
scroll
"
)
;
dpr
=
await
getContentDPR
(
browser
)
;
let
[
newX
newY
newW
newH
]
=
Layout
.
getBounds
(
heading
dpr
)
;
[
x
y
]
=
Layout
.
getBounds
(
accDoc
dpr
)
;
info
(
"
Testing
heading
at
new
point
"
)
;
await
testChildAtPoint
(
dpr
newX
-
x
+
newW
/
2
newY
-
y
+
newH
/
2
accDoc
null
null
)
;
info
(
"
Testing
heading
at
old
point
"
)
;
await
testChildAtPoint
(
dpr
origHeadingX
origHeadingY
accDoc
accDoc
accDoc
)
;
[
newX
newY
newW
newH
]
=
Layout
.
getBounds
(
test
dpr
)
;
info
(
"
testing
test
at
new
point
"
)
;
await
testChildAtPoint
(
dpr
newX
-
x
+
newW
/
2
newY
-
y
+
newH
/
2
accDoc
null
null
)
;
info
(
"
testing
test
at
old
point
"
)
;
await
testChildAtPoint
(
dpr
origTestX
origTestY
accDoc
accDoc
accDoc
)
;
info
(
"
Scrolling
to
bottom
of
page
.
.
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
const
visualScrollPromise
=
new
Promise
(
resolve
=
>
{
content
.
window
.
visualViewport
.
addEventListener
(
"
scroll
"
resolve
{
once
:
true
}
)
;
}
)
;
const
utils
=
SpecialPowers
.
getDOMWindowUtils
(
content
.
window
)
;
utils
.
scrollToVisual
(
0
content
.
visualViewport
.
height
utils
.
UPDATE_TYPE_MAIN_THREAD
utils
.
SCROLL_MODE_INSTANT
)
;
await
visualScrollPromise
;
}
)
;
info
(
"
Hittesting
post
-
APZ
post
-
scroll
"
)
;
dpr
=
await
getContentDPR
(
browser
)
;
[
newX
newY
newW
newH
]
=
Layout
.
getBounds
(
test
dpr
)
;
[
x
y
]
=
Layout
.
getBounds
(
accDoc
dpr
)
;
info
(
"
testing
test
at
new
point
"
)
;
await
testChildAtPoint
(
dpr
newX
-
x
+
newW
/
2
newY
-
y
+
newH
/
2
accDoc
null
null
)
;
info
(
"
Testing
test
at
old
point
"
)
;
const
spacer
=
findAccessibleChildByID
(
accDoc
"
spacer
"
)
;
await
testChildAtPoint
(
dpr
origTestX
origTestY
accDoc
spacer
spacer
)
;
[
newX
newY
newW
newH
]
=
Layout
.
getBounds
(
heading
dpr
)
;
info
(
"
Testing
heading
at
new
point
"
)
;
await
testChildAtPoint
(
dpr
newX
-
x
+
newW
/
2
newY
-
y
+
newH
/
2
accDoc
heading
heading
.
firstChild
)
;
}
{
iframe
:
false
remoteIframe
:
false
}
)
;
