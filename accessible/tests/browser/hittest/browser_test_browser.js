"
use
strict
"
;
async
function
runTests
(
browser
accDoc
)
{
await
invokeContentTask
(
browser
[
]
(
)
=
>
content
.
document
.
getElementById
(
"
hittest
"
)
.
scrollIntoView
(
true
)
)
;
const
dpr
=
await
getContentDPR
(
browser
)
;
const
hititem
=
findAccessibleChildByID
(
accDoc
"
hititem
"
)
;
const
hittest
=
findAccessibleChildByID
(
accDoc
"
hittest
"
)
;
const
outerDocAcc
=
accDoc
.
parent
;
const
rootAcc
=
CommonUtils
.
getRootAccessible
(
document
)
;
const
[
hitX
hitY
hitWidth
hitHeight
]
=
Layout
.
getBounds
(
hititem
dpr
)
;
const
tgtX
=
hitX
+
hitWidth
/
2
;
const
tgtY
=
hitY
+
hitHeight
/
2
;
let
hitAcc
=
rootAcc
.
getDeepestChildAtPoint
(
tgtX
tgtY
)
;
is
(
hitAcc
hititem
Hit
match
at
{
tgtX
}
{
tgtY
}
(
root
doc
deepest
child
)
.
Found
:
{
prettyName
(
hitAcc
)
}
)
;
const
hitAcc2
=
accDoc
.
getDeepestChildAtPoint
(
tgtX
tgtY
)
;
is
(
hitAcc
hitAcc2
Hit
match
at
{
tgtX
}
{
tgtY
}
(
doc
deepest
child
)
.
Found
:
{
prettyName
(
hitAcc2
)
}
)
;
hitAcc
=
outerDocAcc
.
getChildAtPoint
(
tgtX
tgtY
)
;
is
(
hitAcc
accDoc
Hit
match
at
{
tgtX
}
{
tgtY
}
(
outer
doc
child
)
.
Found
:
{
prettyName
(
hitAcc
)
}
)
;
hitAcc
=
accDoc
.
getChildAtPoint
(
tgtX
tgtY
)
;
is
(
hitAcc
hittest
Hit
match
at
{
tgtX
}
{
tgtY
}
(
doc
child
)
.
Found
:
{
prettyName
(
hitAcc
)
}
)
;
}
addAccessibleTask
(
<
div
id
=
"
hittest
"
>
<
div
id
=
"
hititem
"
>
<
span
role
=
"
img
"
>
img
<
/
span
>
item
<
/
div
>
<
/
div
>
runTests
{
iframe
:
true
remoteIframe
:
true
}
)
;
