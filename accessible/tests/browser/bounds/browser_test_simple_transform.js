"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
addAccessibleTask
(
<
p
id
=
"
translate
"
>
hello
world
<
/
p
>
async
function
(
browser
iframeDocAcc
contentDocAcc
)
{
ok
(
iframeDocAcc
"
IFRAME
document
accessible
is
present
"
)
;
await
testBoundsWithContent
(
iframeDocAcc
"
translate
"
browser
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
let
p
=
content
.
document
.
getElementById
(
"
translate
"
)
;
p
.
style
=
"
transform
:
translate
(
100px
100px
)
;
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
testBoundsWithContent
(
iframeDocAcc
"
translate
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
role
=
"
main
"
style
=
"
translate
:
0
300px
;
"
>
<
p
id
=
"
p1
"
>
hello
<
/
p
>
<
p
id
=
"
p2
"
>
world
<
/
p
>
<
/
div
>
async
function
(
browser
docAcc
)
{
await
testBoundsWithContent
(
docAcc
"
p1
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
p2
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
p
id
=
"
rotate
"
>
hello
world
<
/
p
>
async
function
(
browser
iframeDocAcc
contentDocAcc
)
{
ok
(
iframeDocAcc
"
IFRAME
document
accessible
is
present
"
)
;
await
testBoundsWithContent
(
iframeDocAcc
"
rotate
"
browser
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
let
p
=
content
.
document
.
getElementById
(
"
rotate
"
)
;
p
.
style
=
"
transform
:
rotate
(
-
40deg
)
;
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
testBoundsWithContent
(
iframeDocAcc
"
rotate
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
p
id
=
"
scale
"
>
hello
world
<
/
p
>
async
function
(
browser
iframeDocAcc
contentDocAcc
)
{
ok
(
iframeDocAcc
"
IFRAME
document
accessible
is
present
"
)
;
await
testBoundsWithContent
(
iframeDocAcc
"
scale
"
browser
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
let
p
=
content
.
document
.
getElementById
(
"
scale
"
)
;
p
.
style
=
"
transform
:
scale
(
2
)
;
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
testBoundsWithContent
(
iframeDocAcc
"
scale
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
willChangeTop
"
style
=
"
will
-
change
:
transform
;
"
>
<
p
>
hello
<
/
p
>
<
p
id
=
"
willChangeTopP2
"
>
world
<
/
p
>
<
/
div
>
<
div
role
=
"
group
"
>
<
div
id
=
"
willChangeInner
"
style
=
"
will
-
change
:
transform
;
"
>
<
p
>
hello
<
/
p
>
<
p
id
=
"
willChangeInnerP2
"
>
world
<
/
p
>
<
/
div
>
<
/
div
>
async
function
(
browser
docAcc
)
{
if
(
isCacheEnabled
)
{
let
hasTransform
;
try
{
const
willChangeInner
=
findAccessibleChildByID
(
docAcc
"
willChangeInner
"
)
;
willChangeInner
.
cache
.
getStringProperty
(
"
transform
"
)
;
hasTransform
=
true
;
}
catch
(
e
)
{
hasTransform
=
false
;
}
ok
(
!
hasTransform
"
willChangeInner
has
no
cached
transform
"
)
;
}
await
testBoundsWithContent
(
docAcc
"
willChangeTopP2
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
willChangeInnerP2
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
container
"
>
<
div
style
=
"
transform
:
translate
(
100px
100px
)
;
"
>
<
p
>
test
<
/
p
>
<
/
div
>
<
/
div
>
<
div
id
=
"
div
-
presentational
"
role
=
"
presentation
"
style
=
"
transform
:
translate
(
100px
100px
)
;
"
>
<
p
>
test
<
/
p
>
<
/
div
>
async
function
(
browser
docAcc
)
{
const
tree
=
{
TEXT_CONTAINER
:
[
{
PARAGRAPH
:
[
{
TEXT_LEAF
:
[
]
}
]
}
]
}
;
const
divWithTransform
=
findAccessibleChildByID
(
docAcc
"
container
"
)
.
firstChild
;
testAccessibleTree
(
divWithTransform
tree
)
;
const
divPresentational
=
findAccessibleChildByID
(
docAcc
"
div
-
presentational
"
)
;
testAccessibleTree
(
divPresentational
tree
)
;
await
testBoundsWithContent
(
docAcc
"
div
-
presentational
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
div
-
to
-
transform
"
role
=
"
none
"
style
=
"
position
:
absolute
;
width
:
300px
;
height
:
300px
;
"
>
<
p
>
test
<
/
p
>
<
/
div
>
async
function
(
browser
docAcc
)
{
let
divToTransform
=
findAccessibleChildByID
(
docAcc
"
div
-
to
-
transform
"
)
;
ok
(
!
divToTransform
"
There
should
not
be
a
div
accessible
.
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
let
div
=
content
.
document
.
getElementById
(
"
div
-
to
-
transform
"
)
;
div
.
style
.
transform
=
"
translate
(
100
%
100
%
)
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
divToTransform
=
findAccessibleChildByID
(
docAcc
"
div
-
to
-
transform
"
)
;
const
tree
=
{
TEXT_CONTAINER
:
[
{
PARAGRAPH
:
[
{
TEXT_LEAF
:
[
]
}
]
}
]
}
;
testAccessibleTree
(
divToTransform
tree
)
;
await
testBoundsWithContent
(
docAcc
"
div
-
to
-
transform
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
container
"
>
<
div
id
=
"
transform
"
style
=
"
position
:
absolute
;
transform
:
translate
(
100px
100px
)
;
"
>
<
p
id
=
"
p
"
>
test
<
/
p
>
<
/
div
>
<
/
div
>
async
function
(
browser
docAcc
)
{
await
testBoundsWithContent
(
docAcc
"
transform
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
p
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
scrollable
"
style
=
"
transform
:
rotate
(
180deg
)
;
overflow
:
scroll
;
height
:
500px
;
"
>
<
p
id
=
"
test
"
>
hello
world
<
/
p
>
<
hr
style
=
"
height
:
100vh
;
"
>
<
/
div
>
async
function
(
browser
docAcc
)
{
info
(
"
Testing
that
the
unscrolled
bounds
of
a
transformed
element
are
correct
.
"
)
;
await
testBoundsWithContent
(
docAcc
"
test
"
browser
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
let
elem
=
content
.
document
.
getElementById
(
"
scrollable
"
)
;
elem
.
scrollTo
(
0
elem
.
scrollHeight
)
;
}
)
;
info
(
"
Testing
that
the
scrolled
bounds
of
a
transformed
element
are
correct
.
"
)
;
await
testBoundsWithContent
(
docAcc
"
test
"
browser
)
;
}
{
topLevel
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
