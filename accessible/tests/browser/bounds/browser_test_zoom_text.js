"
use
strict
"
;
async
function
runTests
(
browser
accDoc
)
{
async
function
testTextNode
(
id
)
{
let
hyperTextNode
=
findAccessibleChildByID
(
accDoc
id
)
;
let
textNode
=
hyperTextNode
.
firstChild
;
let
contentDPR
=
await
getContentDPR
(
browser
)
;
let
[
x
y
width
height
]
=
getBounds
(
textNode
contentDPR
)
;
testTextBounds
(
hyperTextNode
0
-
1
[
x
y
width
height
]
COORDTYPE_SCREEN_RELATIVE
)
;
}
async
function
testEmptyInputNode
(
id
)
{
let
inputNode
=
findAccessibleChildByID
(
accDoc
id
)
;
let
[
x
y
width
height
]
=
getBounds
(
inputNode
)
;
testTextBounds
(
inputNode
0
-
1
[
x
y
width
height
]
COORDTYPE_SCREEN_RELATIVE
)
;
testTextBounds
(
inputNode
0
0
[
x
y
width
height
]
COORDTYPE_SCREEN_RELATIVE
)
;
}
await
testTextNode
(
"
p1
"
)
;
await
testTextNode
(
"
p2
"
)
;
await
testEmptyInputNode
(
"
i1
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
const
{
Layout
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
Layout
.
sys
.
mjs
"
)
;
Layout
.
zoomDocument
(
content
.
document
2
.
0
)
;
}
)
;
await
testTextNode
(
"
p1
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
const
{
Layout
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
Layout
.
sys
.
mjs
"
)
;
Layout
.
zoomDocument
(
content
.
document
1
.
0
)
;
}
)
;
}
addAccessibleTask
(
<
p
id
=
'
p1
'
style
=
'
font
-
family
:
monospace
;
'
>
Tilimilitryamdiya
<
/
p
>
<
p
id
=
'
p2
'
>
<
/
p
>
<
form
>
<
input
id
=
'
i1
'
/
>
<
/
form
>
runTests
{
iframe
:
true
remoteIframe
:
true
}
)
;
