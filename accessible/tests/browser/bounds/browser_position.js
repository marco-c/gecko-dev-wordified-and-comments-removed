"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
addAccessibleTask
(
<
div
id
=
"
div
"
style
=
"
position
:
relative
;
left
:
0px
;
top
:
0px
;
width
:
fit
-
content
;
"
>
test
<
/
div
>
async
function
(
browser
docAcc
)
{
await
testBoundsWithContent
(
docAcc
"
div
"
browser
)
;
info
(
"
Changing
left
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
div
"
)
.
style
.
left
=
"
200px
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
testBoundsWithContent
(
docAcc
"
div
"
browser
)
;
info
(
"
Changing
top
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
div
"
)
.
style
.
top
=
"
200px
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
testBoundsWithContent
(
docAcc
"
div
"
browser
)
;
}
{
chrome
:
true
topLevel
:
true
iframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
reflowContainer
"
>
<
p
>
1
<
/
p
>
<
p
id
=
"
reflow2
"
hidden
>
2
<
/
p
>
<
p
id
=
"
reflow3
"
>
3
<
/
p
>
<
/
div
>
<
p
id
=
"
noReflow
"
>
noReflow
<
/
p
>
async
function
(
browser
docAcc
)
{
for
(
const
id
of
[
"
reflowContainer
"
"
reflow3
"
"
noReflow
"
]
)
{
await
testBoundsWithContent
(
docAcc
id
browser
)
;
}
info
(
"
Showing
p2
"
)
;
let
shown
=
waitForEvent
(
EVENT_SHOW
"
reflow2
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
reflow2
"
)
.
hidden
=
false
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
shown
;
for
(
const
id
of
[
"
reflowContainer
"
"
reflow2
"
"
reflow3
"
"
noReflow
"
]
)
{
await
testBoundsWithContent
(
docAcc
id
browser
)
;
}
}
{
chrome
:
true
topLevel
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
"
container
"
>
<
p
style
=
"
height
:
300px
;
"
>
1
<
/
p
>
<
div
class
=
"
pParent
"
>
<
p
id
=
"
p2
"
>
2
<
/
p
>
<
/
div
>
<
/
div
>
async
function
(
browser
docAcc
)
{
const
paraTree
=
{
PARAGRAPH
:
[
{
TEXT_LEAF
:
[
]
}
]
}
;
const
container
=
findAccessibleChildByID
(
docAcc
"
container
"
)
;
testAccessibleTree
(
container
{
SECTION
:
[
paraTree
paraTree
]
}
)
;
await
testBoundsWithContent
(
docAcc
"
p2
"
browser
)
;
info
(
"
Adding
click
listener
to
pParent
"
)
;
let
reordered
=
waitForEvent
(
EVENT_REORDER
container
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
querySelector
(
"
.
pParent
"
)
.
addEventListener
(
"
click
"
function
(
)
{
}
)
;
}
)
;
await
reordered
;
testAccessibleTree
(
container
{
SECTION
:
[
paraTree
{
SECTION
:
[
paraTree
]
}
]
}
)
;
await
testBoundsWithContent
(
docAcc
"
p2
"
browser
)
;
}
{
chrome
:
true
topLevel
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
style
>
ul
li
{
display
:
inline
;
list
-
style
-
type
:
none
;
list
-
style
-
position
:
inside
;
margin
:
0
;
padding
:
0
;
}
<
/
style
>
<
div
id
=
"
container
"
style
=
"
background
:
green
;
max
-
width
:
400px
;
"
>
List
of
information
:
<
ul
id
=
"
list
"
>
<
li
id
=
"
one
"
>
item
one
<
/
li
>
|
<
li
id
=
"
two
"
>
item
two
<
/
li
>
|
<
li
id
=
"
three
"
>
item
three
<
/
li
>
|
<
li
id
=
"
four
"
>
item
four
<
/
li
>
|
<
li
id
=
"
five
"
>
item
five
<
/
li
>
<
/
ul
>
<
/
div
>
async
function
(
browser
docAcc
)
{
await
testBoundsWithContent
(
docAcc
"
list
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
one
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
two
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
three
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
four
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
five
"
browser
)
;
}
{
chrome
:
true
topLevel
:
true
iframe
:
true
}
)
;
