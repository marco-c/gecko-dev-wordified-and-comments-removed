"
use
strict
"
;
async
function
testContentBounds
(
browser
acc
)
{
let
[
expectedX
expectedY
expectedWidth
expectedHeight
]
=
await
getContentBoundsForDOMElm
(
browser
getAccessibleDOMNodeID
(
acc
)
)
;
let
contentDPR
=
await
getContentDPR
(
browser
)
;
let
[
x
y
width
height
]
=
getBounds
(
acc
contentDPR
)
;
let
prettyAccName
=
prettyName
(
acc
)
;
is
(
x
expectedX
"
Wrong
x
coordinate
of
"
+
prettyAccName
)
;
is
(
y
expectedY
"
Wrong
y
coordinate
of
"
+
prettyAccName
)
;
is
(
width
expectedWidth
"
Wrong
width
of
"
+
prettyAccName
)
;
ok
(
height
>
=
expectedHeight
"
Wrong
height
of
"
+
prettyAccName
)
;
}
async
function
runTests
(
browser
accDoc
)
{
let
p1
=
findAccessibleChildByID
(
accDoc
"
p1
"
)
;
let
p2
=
findAccessibleChildByID
(
accDoc
"
p2
"
)
;
let
imgmap
=
findAccessibleChildByID
(
accDoc
"
imgmap
"
)
;
if
(
!
imgmap
.
childCount
)
{
await
waitForEvent
(
EVENT_REORDER
"
imgmap
"
)
;
}
let
area
=
imgmap
.
firstChild
;
await
testContentBounds
(
browser
p1
)
;
await
testContentBounds
(
browser
p2
)
;
await
testContentBounds
(
browser
area
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
const
{
Layout
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
Layout
.
sys
.
mjs
"
)
;
Layout
.
zoomDocument
(
content
.
document
2
.
0
)
;
}
)
;
await
testContentBounds
(
browser
p1
)
;
await
testContentBounds
(
browser
p2
)
;
await
testContentBounds
(
browser
area
)
;
}
addAccessibleTask
(
<
p
id
=
"
p1
"
>
para
1
<
/
p
>
<
p
id
=
"
p2
"
>
para
2
<
/
p
>
<
map
name
=
"
atoz_map
"
id
=
"
map
"
>
<
area
id
=
"
area1
"
href
=
"
http
:
/
/
mozilla
.
org
"
coords
=
17
0
30
14
"
alt
=
"
mozilla
.
org
"
shape
=
"
rect
"
>
<
/
map
>
<
img
id
=
"
imgmap
"
width
=
"
447
"
height
=
"
15
"
usemap
=
"
#
atoz_map
"
src
=
"
http
:
/
/
example
.
com
/
a11y
/
accessible
/
tests
/
mochitest
/
letters
.
gif
"
>
runTests
{
iframe
:
true
remoteIframe
:
true
}
)
;
