"
use
strict
"
;
const
TRANSLATION_OFFSET
=
50
;
const
ELEM_ID
=
"
test
-
elem
-
id
"
;
async
function
invokeSetStyleIframe
(
browser
id
style
value
)
{
if
(
value
)
{
Logger
.
log
(
Setting
{
style
}
style
to
{
value
}
for
iframe
with
id
:
{
id
}
)
;
}
else
{
Logger
.
log
(
Removing
{
style
}
style
from
iframe
with
id
:
{
id
}
)
;
}
await
SpecialPowers
.
spawn
(
browser
[
id
style
value
]
(
iframeId
iframeStyle
iframeValue
)
=
>
{
const
elm
=
content
.
document
.
getElementById
(
iframeId
)
;
if
(
iframeValue
)
{
elm
.
style
[
iframeStyle
]
=
iframeValue
;
}
else
{
delete
elm
.
style
[
iframeStyle
]
;
}
}
)
;
}
function
testBoundsWithOffset
(
browser
iframeDocAcc
id
domElmBounds
offset
)
{
const
acc
=
findAccessibleChildByID
(
iframeDocAcc
id
)
;
const
accX
=
{
}
;
const
accY
=
{
}
;
const
accWidth
=
{
}
;
const
accHeight
=
{
}
;
acc
.
getBounds
(
accX
accY
accWidth
accHeight
)
;
const
addTranslationOffset
=
!
gIsRemoteIframe
;
const
expectedX
=
addTranslationOffset
?
domElmBounds
[
0
]
+
offset
:
domElmBounds
[
0
]
;
const
expectedY
=
addTranslationOffset
?
domElmBounds
[
1
]
+
offset
:
domElmBounds
[
1
]
;
const
expectedWidth
=
domElmBounds
[
2
]
;
const
expectedHeight
=
domElmBounds
[
3
]
;
let
boundsAreEquivalent
=
true
;
boundsAreEquivalent
&
&
=
accX
.
value
=
=
expectedX
;
boundsAreEquivalent
&
&
=
accY
.
value
=
=
expectedY
;
boundsAreEquivalent
&
&
=
accWidth
.
value
=
=
expectedWidth
;
boundsAreEquivalent
&
&
=
accHeight
.
value
=
=
expectedHeight
;
return
boundsAreEquivalent
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
wait300msAfterTabSwitch
"
true
]
]
}
)
;
}
)
;
addAccessibleTask
(
<
div
id
=
'
{
ELEM_ID
}
'
>
hello
world
<
/
div
>
async
function
(
browser
iframeDocAcc
)
{
ok
(
iframeDocAcc
"
IFRAME
document
accessible
is
present
"
)
;
await
testBoundsWithContent
(
iframeDocAcc
ELEM_ID
browser
)
;
await
invokeSetStyleIframe
(
browser
DEFAULT_IFRAME_ID
"
transform
"
translate
(
{
TRANSLATION_OFFSET
}
px
{
TRANSLATION_OFFSET
}
px
)
)
;
await
waitForContentPaint
(
browser
)
;
const
domElmBoundsAfterTranslate
=
await
getContentBoundsForDOMElm
(
browser
ELEM_ID
)
;
await
untilCacheOk
(
(
)
=
>
{
return
testBoundsWithOffset
(
browser
iframeDocAcc
ELEM_ID
domElmBoundsAfterTranslate
TRANSLATION_OFFSET
)
;
}
"
Accessible
bounds
have
changed
in
the
cache
and
match
DOM
bounds
.
"
)
;
const
PADDING_OFFSET
=
100
;
await
invokeSetStyleIframe
(
browser
DEFAULT_IFRAME_ID
"
padding
"
{
PADDING_OFFSET
}
px
)
;
await
waitForContentPaint
(
browser
)
;
const
domElmBoundsAfterAddingPadding
=
await
getContentBoundsForDOMElm
(
browser
ELEM_ID
)
;
await
untilCacheOk
(
(
)
=
>
{
return
testBoundsWithOffset
(
browser
iframeDocAcc
ELEM_ID
domElmBoundsAfterAddingPadding
TRANSLATION_OFFSET
)
;
}
"
Accessible
bounds
have
changed
in
the
cache
and
match
DOM
bounds
.
"
)
;
}
{
topLevel
:
false
iframe
:
true
remoteIframe
:
true
iframeAttrs
:
{
style
:
height
:
100px
;
width
:
100px
;
}
}
)
;
addAccessibleTask
(
<
div
id
=
"
div
"
style
=
"
width
:
30px
;
height
:
30px
"
>
<
/
div
>
async
function
(
browser
accDoc
)
{
const
docWidth
=
(
)
=
>
{
let
width
=
{
}
;
accDoc
.
getBounds
(
{
}
{
}
width
{
}
)
;
return
width
.
value
;
}
;
await
untilCacheIs
(
docWidth
0
"
Doc
width
is
0
"
)
;
await
invokeSetStyleIframe
(
browser
DEFAULT_IFRAME_ID
"
width
"
300px
)
;
await
untilCacheIs
(
docWidth
300
"
Doc
width
is
300
"
)
;
}
{
chrome
:
false
topLevel
:
false
iframe
:
true
remoteIframe
:
true
iframeAttrs
:
{
style
:
"
width
:
0
;
"
}
}
)
;
addAccessibleTask
(
<
ol
id
=
"
ol
"
>
<
iframe
id
=
"
iframe
"
src
=
"
data
:
text
/
html
"
>
<
/
iframe
>
<
/
ol
>
async
function
(
browser
docAcc
)
{
let
iframeDoc
=
findAccessibleChildByID
(
docAcc
"
iframe
"
)
.
firstChild
;
ok
(
iframeDoc
"
Got
the
iframe
document
"
)
;
const
origX
=
{
}
;
const
origY
=
{
}
;
iframeDoc
.
getBounds
(
origX
origY
{
}
{
}
)
;
let
reordered
=
waitForEvent
(
EVENT_REORDER
docAcc
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
iframe
"
)
.
width
=
"
600
"
;
content
.
setTimeout
(
(
)
=
>
(
content
.
document
.
getElementById
(
"
ol
"
)
.
type
=
"
i
"
)
0
)
;
}
)
;
await
reordered
;
const
iframe
=
findAccessibleChildByID
(
docAcc
"
iframe
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
iframe
.
firstChild
)
;
iframeDoc
=
iframe
.
firstChild
;
ok
(
iframeDoc
"
Got
the
iframe
document
after
re
-
creation
"
)
;
const
newX
=
{
}
;
const
newY
=
{
}
;
iframeDoc
.
getBounds
(
newX
newY
{
}
{
}
)
;
ok
(
origX
.
value
=
=
newX
.
value
&
&
origY
.
value
=
=
newY
.
value
"
Iframe
document
x
and
y
are
same
after
iframe
re
-
creation
"
)
;
}
)
;
