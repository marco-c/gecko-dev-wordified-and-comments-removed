"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
addAccessibleTask
(
<
form
>
<
input
type
=
"
checkbox
"
id
=
"
checkbox
"
required
>
<
br
>
<
input
type
=
"
radio
"
id
=
"
radio
"
required
>
<
br
>
<
input
type
=
"
checkbox
"
id
=
"
ariaCheckbox
"
aria
-
required
=
"
true
"
>
<
br
>
<
input
type
=
"
radio
"
id
=
"
ariaRadio
"
aria
-
required
=
"
true
"
>
<
/
form
>
async
(
browser
accDoc
)
=
>
{
let
radio
=
getNativeInterface
(
accDoc
"
radio
"
)
;
is
(
radio
.
getAttributeValue
(
"
AXRequired
"
)
1
"
Correct
required
val
for
radio
"
)
;
let
ariaRadio
=
getNativeInterface
(
accDoc
"
ariaRadio
"
)
;
is
(
ariaRadio
.
getAttributeValue
(
"
AXRequired
"
)
1
"
Correct
required
val
for
ariaRadio
"
)
;
let
checkbox
=
getNativeInterface
(
accDoc
"
checkbox
"
)
;
is
(
checkbox
.
getAttributeValue
(
"
AXRequired
"
)
1
"
Correct
required
val
for
checkbox
"
)
;
let
ariaCheckbox
=
getNativeInterface
(
accDoc
"
ariaCheckbox
"
)
;
is
(
ariaCheckbox
.
getAttributeValue
(
"
AXRequired
"
)
1
"
Correct
required
val
for
ariaCheckbox
"
)
;
let
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
ariaCheckbox
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
ariaCheckbox
"
)
.
setAttribute
(
"
aria
-
required
"
"
false
"
)
;
}
)
;
await
stateChanged
;
is
(
ariaCheckbox
.
getAttributeValue
(
"
AXRequired
"
)
0
"
Correct
required
after
false
set
for
ariaCheckbox
"
)
;
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
ariaCheckbox
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
ariaCheckbox
"
)
.
setAttribute
(
"
aria
-
required
"
"
true
"
)
;
}
)
;
await
stateChanged
;
is
(
ariaCheckbox
.
getAttributeValue
(
"
AXRequired
"
)
1
"
Correct
required
after
true
set
for
ariaCheckbox
"
)
;
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
ariaCheckbox
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
ariaCheckbox
"
)
.
removeAttribute
(
"
aria
-
required
"
)
;
}
)
;
await
stateChanged
;
is
(
ariaCheckbox
.
getAttributeValue
(
"
AXRequired
"
)
0
"
Correct
required
after
removal
for
ariaCheckbox
"
)
;
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
ariaRadio
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
ariaRadio
"
)
.
setAttribute
(
"
aria
-
required
"
"
false
"
)
;
}
)
;
await
stateChanged
;
is
(
ariaRadio
.
getAttributeValue
(
"
AXRequired
"
)
0
"
Correct
required
after
false
set
for
ariaRadio
"
)
;
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
ariaRadio
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
ariaRadio
"
)
.
setAttribute
(
"
aria
-
required
"
"
true
"
)
;
}
)
;
await
stateChanged
;
is
(
ariaRadio
.
getAttributeValue
(
"
AXRequired
"
)
1
"
Correct
required
after
true
set
for
ariaRadio
"
)
;
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
ariaRadio
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
ariaRadio
"
)
.
removeAttribute
(
"
aria
-
required
"
)
;
}
)
;
await
stateChanged
;
is
(
ariaRadio
.
getAttributeValue
(
"
AXRequired
"
)
0
"
Correct
required
after
removal
for
ariaRadio
"
)
;
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
checkbox
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
checkbox
"
)
.
removeAttribute
(
"
required
"
)
;
}
)
;
await
stateChanged
;
is
(
checkbox
.
getAttributeValue
(
"
AXRequired
"
)
0
"
Correct
required
after
removal
for
checkbox
"
)
;
stateChanged
=
waitForEvent
(
EVENT_STATE_CHANGE
"
radio
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
radio
"
)
.
removeAttribute
(
"
required
"
)
;
}
)
;
await
stateChanged
;
is
(
checkbox
.
getAttributeValue
(
"
AXRequired
"
)
0
"
Correct
required
after
removal
for
radio
"
)
;
}
)
;
