"
use
strict
"
;
function
testRangeAtMarker
(
macDoc
marker
attribute
expected
msg
)
{
let
range
=
macDoc
.
getParameterizedAttributeValue
(
attribute
marker
)
;
is
(
stringForRange
(
macDoc
range
)
expected
msg
)
;
}
function
testUIElement
(
macDoc
marker
msg
expectedRole
expectedValue
)
{
let
elem
=
macDoc
.
getParameterizedAttributeValue
(
"
AXUIElementForTextMarker
"
marker
)
;
is
(
elem
.
getAttributeValue
(
"
AXRole
"
)
expectedRole
{
msg
}
:
element
role
matches
)
;
is
(
elem
.
getAttributeValue
(
"
AXValue
"
)
expectedValue
{
msg
}
:
element
value
)
;
let
elemRange
=
macDoc
.
getParameterizedAttributeValue
(
"
AXTextMarkerRangeForUIElement
"
elem
)
;
is
(
stringForRange
(
macDoc
elemRange
)
expectedValue
{
msg
}
:
element
range
matches
element
value
)
;
}
function
testWords
(
macDoc
marker
msg
expectedLeft
expectedRight
)
{
testRangeAtMarker
(
macDoc
marker
"
AXLeftWordTextMarkerRangeForTextMarker
"
expectedLeft
{
msg
}
:
left
word
matches
)
;
testRangeAtMarker
(
macDoc
marker
"
AXRightWordTextMarkerRangeForTextMarker
"
expectedRight
{
msg
}
:
right
word
matches
)
;
}
function
testMarkerIntegrity
(
accDoc
expectedMarkerValues
)
{
let
macDoc
=
accDoc
.
nativeInterface
.
QueryInterface
(
Ci
.
nsIAccessibleMacInterface
)
;
let
count
=
0
;
let
marker
=
macDoc
.
getAttributeValue
(
"
AXStartTextMarker
"
)
;
while
(
marker
)
{
let
index
=
macDoc
.
getParameterizedAttributeValue
(
"
AXIndexForTextMarker
"
marker
)
;
is
(
index
count
Correct
index
in
"
AXNextTextMarkerForTextMarker
"
:
{
count
}
)
;
testWords
(
macDoc
marker
At
index
{
count
}
.
.
.
expectedMarkerValues
[
count
]
.
words
)
;
testUIElement
(
macDoc
marker
At
index
{
count
}
.
.
.
expectedMarkerValues
[
count
]
.
element
)
;
marker
=
macDoc
.
getParameterizedAttributeValue
(
"
AXNextTextMarkerForTextMarker
"
marker
)
;
count
+
+
;
}
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
marker
=
macDoc
.
getParameterizedAttributeValue
(
"
AXTextMarkerForIndex
"
i
)
;
let
index
=
macDoc
.
getParameterizedAttributeValue
(
"
AXIndexForTextMarker
"
marker
)
;
is
(
index
i
Correct
index
in
"
AXTextMarkerForIndex
"
:
{
i
}
)
;
}
ok
(
!
macDoc
.
getParameterizedAttributeValue
(
"
AXNextTextMarkerForTextMarker
"
marker
)
"
Iterated
through
all
markers
"
)
;
marker
=
macDoc
.
getAttributeValue
(
"
AXEndTextMarker
"
)
;
while
(
marker
)
{
count
-
-
;
let
index
=
macDoc
.
getParameterizedAttributeValue
(
"
AXIndexForTextMarker
"
marker
)
;
is
(
index
count
Correct
index
in
"
AXPreviousTextMarkerForTextMarker
"
:
{
count
}
)
;
marker
=
macDoc
.
getParameterizedAttributeValue
(
"
AXPreviousTextMarkerForTextMarker
"
marker
)
;
}
is
(
count
0
"
Iterated
backward
through
all
text
markers
"
)
;
}
addAccessibleTask
(
"
mac
/
doc_textmarker_test
.
html
"
async
(
browser
accDoc
)
=
>
{
const
expectedMarkerValues
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
return
content
.
wrappedJSObject
.
EXPECTED
;
}
)
;
testMarkerIntegrity
(
accDoc
expectedMarkerValues
)
;
}
)
;
