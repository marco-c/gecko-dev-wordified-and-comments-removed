"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
addAccessibleTask
(
<
details
id
=
"
details
"
>
<
summary
id
=
"
summary
"
>
Foo
<
/
summary
>
<
p
>
Bar
<
/
p
>
<
/
details
>
async
(
browser
accDoc
)
=
>
{
let
details
=
getNativeInterface
(
accDoc
"
details
"
)
;
is
(
details
.
getAttributeValue
(
"
AXRole
"
)
"
AXGroup
"
"
Correct
role
for
details
"
)
;
is
(
details
.
getAttributeValue
(
"
AXSubrole
"
)
"
AXDetails
"
"
Correct
subrole
for
details
"
)
;
let
detailsChildren
=
details
.
getAttributeValue
(
"
AXChildren
"
)
;
is
(
detailsChildren
.
length
2
"
collapsed
details
has
two
children
"
)
;
let
summary
=
detailsChildren
[
0
]
;
is
(
summary
.
getAttributeValue
(
"
AXRole
"
)
"
AXButton
"
"
Correct
role
for
summary
"
)
;
is
(
summary
.
getAttributeValue
(
"
AXSubrole
"
)
"
AXSummary
"
"
Correct
subrole
for
summary
"
)
;
is
(
summary
.
getAttributeValue
(
"
AXExpanded
"
)
0
"
Summary
is
collapsed
"
)
;
let
actions
=
summary
.
actionNames
;
ok
(
actions
.
includes
(
"
AXPress
"
)
"
Summary
Has
press
action
"
)
;
let
stateChanged
=
waitForStateChange
(
"
summary
"
STATE_EXPANDED
true
)
;
summary
.
performAction
(
"
AXPress
"
)
;
await
stateChanged
;
is
(
summary
.
getAttributeValue
(
"
AXExpanded
"
)
1
"
Summary
is
expanded
"
)
;
detailsChildren
=
details
.
getAttributeValue
(
"
AXChildren
"
)
;
is
(
detailsChildren
.
length
2
"
expanded
details
also
has
two
children
"
)
;
stateChanged
=
waitForStateChange
(
"
summary
"
STATE_EXPANDED
false
)
;
summary
.
performAction
(
"
AXPress
"
)
;
await
stateChanged
;
is
(
summary
.
getAttributeValue
(
"
AXExpanded
"
)
0
"
Summary
is
collapsed
2
"
)
;
detailsChildren
=
details
.
getAttributeValue
(
"
AXChildren
"
)
;
is
(
detailsChildren
.
length
2
"
collapsed
details
has
two
children
"
)
;
}
)
;
