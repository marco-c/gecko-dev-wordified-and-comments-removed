"
use
strict
"
;
addAccessibleTask
(
<
h1
>
hello
<
a
href
=
"
#
"
id
=
"
a1
"
>
world
<
/
a
>
<
/
h1
>
<
p
>
this
<
b
style
=
"
color
:
red
;
background
-
color
:
yellow
;
"
aria
-
invalid
=
"
spelling
"
>
is
<
/
b
>
<
span
style
=
"
text
-
decoration
:
underline
dotted
green
;
"
>
a
<
/
span
>
<
a
href
=
"
#
"
id
=
"
a2
"
>
test
<
/
a
>
<
/
p
>
async
(
browser
accDoc
)
=
>
{
let
macDoc
=
accDoc
.
nativeInterface
.
QueryInterface
(
Ci
.
nsIAccessibleMacInterface
)
;
let
range
=
macDoc
.
getParameterizedAttributeValue
(
"
AXTextMarkerRangeForUnorderedTextMarkers
"
[
macDoc
.
getAttributeValue
(
"
AXStartTextMarker
"
)
macDoc
.
getAttributeValue
(
"
AXEndTextMarker
"
)
]
)
;
let
attributedText
=
macDoc
.
getParameterizedAttributeValue
(
"
AXAttributedStringForTextMarkerRange
"
range
)
;
let
attributesList
=
attributedText
.
map
(
(
{
string
AXForegroundColor
AXBackgroundColor
AXUnderline
AXUnderlineColor
AXHeadingLevel
AXFont
AXLink
AXMarkedMisspelled
}
)
=
>
[
string
AXForegroundColor
AXBackgroundColor
AXUnderline
AXUnderlineColor
AXHeadingLevel
AXFont
.
AXFontSize
AXLink
?
AXLink
.
getAttributeValue
(
"
AXDOMIdentifier
"
)
:
null
AXMarkedMisspelled
]
)
;
Assert
.
deepEqual
(
attributesList
[
[
"
hello
"
"
#
000000
"
"
#
ffffff
"
null
null
1
32
null
null
]
[
"
world
"
"
#
0000ee
"
"
#
ffffff
"
1
"
#
0000ee
"
1
32
"
a1
"
null
]
[
"
this
"
"
#
000000
"
"
#
ffffff
"
null
null
null
16
null
null
]
[
"
is
"
"
#
ff0000
"
"
#
ffff00
"
null
null
null
16
null
1
]
[
"
"
"
#
000000
"
"
#
ffffff
"
null
null
null
16
null
null
]
[
"
a
"
"
#
000000
"
"
#
ffffff
"
1
"
#
008000
"
null
16
null
null
]
[
"
"
"
#
000000
"
"
#
ffffff
"
null
null
null
16
null
null
]
[
"
test
"
"
#
0000ee
"
"
#
ffffff
"
1
"
#
0000ee
"
null
16
"
a2
"
null
]
]
)
;
}
)
;
addAccessibleTask
(
<
textarea
id
=
"
t
"
>
hello
worlf
i
love
you
<
/
textarea
>
async
(
browser
accDoc
)
=
>
{
let
textArea
=
getNativeInterface
(
accDoc
"
t
"
)
;
let
spellDone
=
waitForEvent
(
EVENT_TEXT_ATTRIBUTE_CHANGED
"
t
"
)
;
textArea
.
setAttributeValue
(
"
AXFocused
"
true
)
;
let
attributedText
=
[
]
;
while
(
true
)
{
await
spellDone
;
let
range
=
textArea
.
getAttributeValue
(
"
AXVisibleCharacterRange
"
)
;
attributedText
=
textArea
.
getParameterizedAttributeValue
(
"
AXAttributedStringForRange
"
NSRange
(
.
.
.
range
)
)
;
if
(
attributedText
.
length
!
=
3
)
{
spellDone
=
waitForEvent
(
EVENT_TEXT_ATTRIBUTE_CHANGED
"
t
"
)
;
}
else
{
break
;
}
}
ok
(
attributedText
[
1
]
.
AXMarkedMisspelled
)
;
}
)
;
addAccessibleTask
(
hello
<
input
id
=
"
input
"
>
world
async
(
browser
accDoc
)
=
>
{
let
macDoc
=
accDoc
.
nativeInterface
.
QueryInterface
(
Ci
.
nsIAccessibleMacInterface
)
;
let
range
=
macDoc
.
getParameterizedAttributeValue
(
"
AXTextMarkerRangeForUnorderedTextMarkers
"
[
macDoc
.
getAttributeValue
(
"
AXStartTextMarker
"
)
macDoc
.
getAttributeValue
(
"
AXEndTextMarker
"
)
]
)
;
let
attributedText
=
macDoc
.
getParameterizedAttributeValue
(
"
AXAttributedStringForTextMarkerRange
"
range
)
;
let
text
=
macDoc
.
getParameterizedAttributeValue
(
"
AXStringForTextMarkerRange
"
range
)
;
is
(
attributedText
.
length
1
"
Empty
input
does
not
break
up
attribute
run
.
"
)
;
is
(
attributedText
[
0
]
.
string
hello
world
"
Attributed
string
is
correct
"
)
;
is
(
text
hello
world
"
Unattributed
string
is
correct
"
)
;
}
)
;
