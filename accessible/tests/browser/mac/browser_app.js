"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
function
getMacAccessible
(
accOrElmOrID
)
{
return
new
Promise
(
resolve
=
>
{
let
intervalId
=
setInterval
(
(
)
=
>
{
let
acc
=
getAccessible
(
accOrElmOrID
)
;
if
(
acc
)
{
clearInterval
(
intervalId
)
;
resolve
(
acc
.
nativeInterface
.
QueryInterface
(
Ci
.
nsIAccessibleMacInterface
)
)
;
}
}
10
)
;
}
)
;
}
add_task
(
async
(
)
=
>
{
let
newTabs
=
await
Promise
.
all
(
[
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
data
:
text
/
html
<
title
>
Two
<
/
title
>
"
)
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
data
:
text
/
html
<
title
>
Three
<
/
title
>
"
)
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
data
:
text
/
html
<
title
>
Four
<
/
title
>
"
)
]
)
;
is
(
gBrowser
.
tabs
.
length
4
"
We
now
have
4
open
tabs
"
)
;
let
tablist
=
await
getMacAccessible
(
"
tabbrowser
-
tabs
"
)
;
is
(
tablist
.
getAttributeValue
(
"
AXRole
"
)
"
AXTabGroup
"
"
Correct
role
for
tablist
"
)
;
let
tabMacAccs
=
tablist
.
getAttributeValue
(
"
AXTabs
"
)
;
is
(
tabMacAccs
.
length
4
"
4
items
in
AXTabs
"
)
;
let
selectedTabs
=
tablist
.
getAttributeValue
(
"
AXSelectedChildren
"
)
;
is
(
selectedTabs
.
length
1
"
one
selected
tab
"
)
;
let
tab
=
selectedTabs
[
0
]
;
is
(
tab
.
getAttributeValue
(
"
AXRole
"
)
"
AXRadioButton
"
"
Correct
role
for
tab
"
)
;
is
(
tab
.
getAttributeValue
(
"
AXSubrole
"
)
"
AXTabButton
"
"
Correct
subrole
for
tab
"
)
;
is
(
tab
.
getAttributeValue
(
"
AXTitle
"
)
"
Four
"
"
Correct
title
for
tab
"
)
;
let
tabToSelect
=
tabMacAccs
[
2
]
;
is
(
tabToSelect
.
getAttributeValue
(
"
AXTitle
"
)
"
Three
"
"
Correct
title
for
tab
"
)
;
let
actions
=
tabToSelect
.
actionNames
;
ok
(
true
actions
)
;
ok
(
actions
.
includes
(
"
AXPress
"
)
"
Has
switch
action
"
)
;
let
evt
=
Promise
.
all
(
[
waitForMacEvent
(
"
AXSelectedChildrenChanged
"
)
waitForMacEvent
(
"
AXFocusedUIElementChanged
"
iface
=
>
iface
.
getAttributeValue
(
"
AXRole
"
)
=
=
"
AXWebArea
"
)
]
)
;
tabToSelect
.
performAction
(
"
AXPress
"
)
;
await
evt
;
selectedTabs
=
tablist
.
getAttributeValue
(
"
AXSelectedChildren
"
)
;
is
(
selectedTabs
.
length
1
"
one
selected
tab
"
)
;
is
(
selectedTabs
[
0
]
.
getAttributeValue
(
"
AXTitle
"
)
"
Three
"
"
Correct
title
for
tab
"
)
;
await
Promise
.
all
(
newTabs
.
map
(
t
=
>
BrowserTestUtils
.
removeTab
(
t
)
)
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
license
"
}
async
browser
=
>
{
let
root
=
await
getMacAccessible
(
document
)
;
let
rootChildCount
=
(
)
=
>
root
.
getAttributeValue
(
"
AXChildren
"
)
.
length
;
is
(
rootChildCount
(
)
5
"
Root
with
no
popups
has
5
children
"
)
;
const
menu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
body
{
type
:
"
contextmenu
"
}
)
;
await
waitForMacEvent
(
"
AXMenuOpened
"
)
;
is
(
rootChildCount
(
)
6
"
Root
has
6
children
"
)
;
let
closed
=
waitForMacEvent
(
"
AXMenuClosed
"
"
contentAreaContextMenu
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
menu
"
hidden
"
)
;
await
closed
;
is
(
rootChildCount
(
)
5
"
Root
has
5
children
"
)
;
document
.
getElementById
(
"
identity
-
box
"
)
.
click
(
)
;
const
identityPopup
=
document
.
getElementById
(
"
identity
-
popup
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
identityPopup
"
shown
"
)
;
is
(
rootChildCount
(
)
6
"
Root
has
6
children
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
identityPopup
"
hidden
"
)
;
is
(
rootChildCount
(
)
5
"
Root
has
5
children
"
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
"
}
async
browser
=
>
{
let
input
=
await
getMacAccessible
(
"
urlbar
-
input
"
)
;
is
(
input
.
getAttributeValue
(
"
AXValue
"
)
"
example
.
com
"
"
Location
bar
has
correct
value
"
)
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
'
data
:
text
/
html
<
a
id
=
"
exampleLink
"
href
=
"
https
:
/
/
example
.
com
"
>
link
<
/
a
>
'
}
async
browser
=
>
{
if
(
!
Services
.
search
.
isInitialized
)
{
let
aStatus
=
await
Services
.
search
.
init
(
)
;
Assert
.
ok
(
Components
.
isSuccessCode
(
aStatus
)
)
;
Assert
.
ok
(
Services
.
search
.
isInitialized
)
;
}
let
menu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
#
exampleLink
"
2
2
{
type
:
"
contextmenu
"
}
browser
)
;
await
waitForMacEvent
(
"
AXMenuOpened
"
)
;
menu
=
await
getMacAccessible
(
menu
)
;
let
menuChildren
=
menu
.
getAttributeValue
(
"
AXChildren
"
)
;
is
(
menuChildren
.
length
15
"
Context
menu
on
link
contains
fifteen
items
"
)
;
for
(
let
i
=
0
;
i
<
menuChildren
.
length
;
i
+
+
)
{
if
(
i
=
=
4
|
|
i
=
=
10
|
|
i
=
=
12
)
{
is
(
menuChildren
[
i
]
.
getAttributeValue
(
"
AXRole
"
)
"
AXSplitter
"
"
found
splitter
in
menu
"
)
;
}
else
{
is
(
menuChildren
[
i
]
.
getAttributeValue
(
"
AXRole
"
)
"
AXMenuItem
"
"
found
menu
item
in
menu
"
)
;
}
}
is
(
menuChildren
[
1
]
.
getAttributeValue
(
"
AXVisibleChildren
"
)
null
"
Submenu
1
has
no
visible
chldren
when
hidden
"
)
;
is
(
menuChildren
[
11
]
.
getAttributeValue
(
"
AXVisibleChildren
"
)
null
"
Submenu
2
has
no
visible
chldren
when
hidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
)
;
await
waitForMacEvent
(
"
AXMenuOpened
"
)
;
menu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
menu
=
await
getMacAccessible
(
menu
)
;
menuChildren
=
menu
.
getAttributeValue
(
"
AXChildren
"
)
;
is
(
menuChildren
[
1
]
.
getAttributeValue
(
"
AXChildren
"
)
.
length
1
"
Submenu
1
has
one
child
when
open
"
)
;
const
subMenu
=
menuChildren
[
1
]
.
getAttributeValue
(
"
AXChildren
"
)
[
0
]
;
is
(
subMenu
.
getAttributeValue
(
"
AXRole
"
)
"
AXMenu
"
"
submenu
has
role
of
menu
"
)
;
const
subMenuChildren
=
subMenu
.
getAttributeValue
(
"
AXChildren
"
)
;
is
(
subMenuChildren
.
length
4
"
sub
menu
has
4
children
"
)
;
is
(
subMenu
.
getAttributeValue
(
"
AXVisibleChildren
"
)
.
length
4
"
submenu
has
4
visible
children
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
waitForMacEvent
(
"
AXMenuClosed
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
waitForMacEvent
(
"
AXMenuClosed
"
)
;
}
)
;
}
)
;
