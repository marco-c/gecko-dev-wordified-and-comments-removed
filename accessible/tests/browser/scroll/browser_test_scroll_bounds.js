"
use
strict
"
;
loadScripts
(
{
name
:
"
layout
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
requestLongerTimeout
(
2
)
;
const
appUnitsPerDevPixel
=
60
;
function
testCachedScrollPosition
(
acc
expectedX
expectedY
)
{
let
cachedPosition
=
"
"
;
try
{
cachedPosition
=
acc
.
cache
.
getStringProperty
(
"
scroll
-
position
"
)
;
}
catch
(
e
)
{
cachedPosition
=
"
0
0
"
;
}
return
(
cachedPosition
=
=
{
expectedX
*
appUnitsPerDevPixel
}
{
expectedY
*
appUnitsPerDevPixel
}
)
;
}
function
getCachedBounds
(
acc
)
{
let
cachedBounds
=
"
"
;
try
{
cachedBounds
=
acc
.
cache
.
getStringProperty
(
"
relative
-
bounds
"
)
;
}
catch
(
e
)
{
ok
(
false
"
Unable
to
fetch
cached
bounds
from
cache
!
"
)
;
}
return
cachedBounds
;
}
addAccessibleTask
(
<
div
id
=
'
square
'
style
=
'
height
:
100px
;
width
:
100px
;
background
:
green
;
margin
-
top
:
3000px
;
margin
-
bottom
:
4000px
;
'
>
<
/
div
>
<
div
id
=
'
rect
'
style
=
'
height
:
40px
;
width
:
200px
;
background
:
blue
;
margin
-
bottom
:
3400px
'
>
<
/
div
>
async
function
(
browser
docAcc
)
{
ok
(
docAcc
"
iframe
document
acc
is
present
"
)
;
await
testBoundsWithContent
(
docAcc
"
square
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
rect
"
browser
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
square
"
)
.
scrollIntoView
(
)
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
testBoundsWithContent
(
docAcc
"
square
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
rect
"
browser
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
const
rect
=
content
.
document
.
getElementById
(
"
rect
"
)
;
rect
.
scrollIntoView
(
)
;
rect
.
style
.
width
=
"
300px
"
;
rect
.
offsetTop
;
rect
.
style
.
width
=
"
200px
"
;
rect
.
offsetTop
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
testBoundsWithContent
(
docAcc
"
square
"
browser
)
;
await
testBoundsWithContent
(
docAcc
"
rect
"
browser
)
;
}
{
iframe
:
true
remoteIframe
:
true
chrome
:
true
}
)
;
addAccessibleTask
(
<
div
id
=
'
square
'
style
=
'
height
:
100px
;
width
:
100px
;
background
:
green
;
margin
-
top
:
3000px
;
margin
-
bottom
:
4000px
;
'
>
<
/
div
>
<
div
id
=
'
rect
'
style
=
'
height
:
40px
;
width
:
200px
;
background
:
blue
;
margin
-
bottom
:
3400px
'
>
<
/
div
>
async
function
(
browser
docAcc
)
{
if
(
!
isCacheEnabled
|
|
!
browser
.
isRemoteBrowser
)
{
return
;
}
ok
(
docAcc
"
iframe
document
acc
is
present
"
)
;
await
untilCacheOk
(
(
)
=
>
testCachedScrollPosition
(
docAcc
0
0
)
"
Correct
initial
scroll
position
.
"
)
;
const
rectAcc
=
findAccessibleChildByID
(
docAcc
"
rect
"
)
;
const
rectInitialBounds
=
getCachedBounds
(
rectAcc
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
square
"
)
.
scrollIntoView
(
)
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
untilCacheOk
(
(
)
=
>
testCachedScrollPosition
(
docAcc
0
3000
)
"
Correct
scroll
position
after
first
scroll
.
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
const
rect
=
content
.
document
.
getElementById
(
"
rect
"
)
;
rect
.
scrollIntoView
(
)
;
rect
.
style
.
width
=
"
300px
"
;
rect
.
offsetTop
;
rect
.
style
.
width
=
"
200px
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
await
untilCacheOk
(
(
)
=
>
testCachedScrollPosition
(
docAcc
0
7100
)
"
Correct
final
scroll
position
.
"
)
;
await
untilCacheIs
(
(
)
=
>
getCachedBounds
(
rectAcc
)
rectInitialBounds
"
Cached
relative
bounds
don
'
t
change
when
scrolling
"
)
;
}
{
iframe
:
true
remoteIframe
:
true
}
)
;
addAccessibleTask
(
<
div
style
=
"
margin
-
top
:
100px
;
margin
-
left
:
75px
;
border
:
1px
solid
;
"
>
<
div
id
=
"
d
"
style
=
"
position
:
fixed
;
"
>
<
button
id
=
"
top
"
>
top
<
/
button
>
<
/
div
>
<
/
div
>
async
function
(
browser
docAcc
)
{
const
origTopBounds
=
await
testBoundsWithContent
(
docAcc
"
top
"
browser
)
;
const
origDBounds
=
await
testBoundsWithContent
(
docAcc
"
d
"
browser
)
;
const
e
=
waitForEvent
(
EVENT_REORDER
docAcc
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
for
(
let
i
=
0
;
i
<
1000
;
+
+
i
)
{
const
div
=
content
.
document
.
createElement
(
"
div
"
)
;
div
.
innerHTML
=
"
<
button
>
{
i
}
<
/
button
>
"
;
content
.
document
.
body
.
append
(
div
)
;
}
}
)
;
await
e
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
window
.
scrollTo
(
0
content
.
document
.
body
.
scrollHeight
)
;
}
)
;
await
waitForContentPaint
(
browser
)
;
let
newTopBounds
=
await
testBoundsWithContent
(
docAcc
"
top
"
browser
)
;
let
newDBounds
=
await
testBoundsWithContent
(
docAcc
"
d
"
browser
)
;
is
(
origTopBounds
[
0
]
newTopBounds
[
0
]
"
x
of
fixed
elem
is
unaffected
by
scrolling
"
)
;
is
(
origTopBounds
[
1
]
newTopBounds
[
1
]
"
y
of
fixed
elem
is
unaffected
by
scrolling
"
)
;
is
(
origTopBounds
[
2
]
newTopBounds
[
2
]
"
width
of
fixed
elem
is
unaffected
by
scrolling
"
)
;
is
(
origTopBounds
[
3
]
newTopBounds
[
3
]
"
height
of
fixed
elem
is
unaffected
by
scrolling
"
)
;
is
(
origDBounds
[
0
]
newTopBounds
[
0
]
"
x
of
fixed
elem
container
is
unaffected
by
scrolling
"
)
;
is
(
origDBounds
[
1
]
newDBounds
[
1
]
"
y
of
fixed
elem
container
is
unaffected
by
scrolling
"
)
;
is
(
origDBounds
[
2
]
newDBounds
[
2
]
"
width
of
fixed
container
elem
is
unaffected
by
scrolling
"
)
;
is
(
origDBounds
[
3
]
newDBounds
[
3
]
"
height
of
fixed
container
elem
is
unaffected
by
scrolling
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
d
"
)
.
style
=
"
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
newTopBounds
=
await
testBoundsWithContent
(
docAcc
"
top
"
browser
)
;
newDBounds
=
await
testBoundsWithContent
(
docAcc
"
d
"
browser
)
;
is
(
origTopBounds
[
0
]
newTopBounds
[
0
]
"
x
of
non
-
fixed
element
remains
accurate
.
"
)
;
ok
(
newTopBounds
[
1
]
<
0
"
y
coordinate
shows
item
scrolled
off
page
"
)
;
is
(
origTopBounds
[
2
]
newTopBounds
[
2
]
"
width
of
non
-
fixed
element
remains
accurate
.
"
)
;
is
(
origTopBounds
[
3
]
newTopBounds
[
3
]
"
height
of
non
-
fixed
element
remains
accurate
.
"
)
;
is
(
origDBounds
[
0
]
newDBounds
[
0
]
"
x
of
non
-
fixed
container
element
remains
accurate
.
"
)
;
ok
(
newDBounds
[
1
]
<
0
"
y
coordinate
shows
container
scrolled
off
page
"
)
;
is
(
origDBounds
[
3
]
newDBounds
[
3
]
"
height
of
non
-
fixed
container
element
remains
accurate
.
"
)
;
await
invokeContentTask
(
browser
[
]
(
)
=
>
{
content
.
document
.
getElementById
(
"
d
"
)
.
style
=
"
position
:
fixed
;
"
;
}
)
;
await
waitForContentPaint
(
browser
)
;
newTopBounds
=
await
testBoundsWithContent
(
docAcc
"
top
"
browser
)
;
newDBounds
=
await
testBoundsWithContent
(
docAcc
"
d
"
browser
)
;
is
(
origTopBounds
[
0
]
newTopBounds
[
0
]
"
x
correct
when
position
:
fixed
is
added
.
"
)
;
is
(
origTopBounds
[
1
]
newTopBounds
[
1
]
"
y
correct
when
position
:
fixed
is
added
.
"
)
;
is
(
origTopBounds
[
2
]
newTopBounds
[
2
]
"
width
correct
when
position
:
fixed
is
added
.
"
)
;
is
(
origTopBounds
[
3
]
newTopBounds
[
3
]
"
height
correct
when
position
:
fixed
is
added
.
"
)
;
is
(
origDBounds
[
0
]
newDBounds
[
0
]
"
x
of
container
correct
when
position
:
fixed
is
added
.
"
)
;
is
(
origDBounds
[
1
]
newDBounds
[
1
]
"
y
of
container
correct
when
position
:
fixed
is
added
.
"
)
;
is
(
origDBounds
[
2
]
newDBounds
[
2
]
"
width
of
container
correct
when
position
:
fixed
is
added
.
"
)
;
is
(
origDBounds
[
3
]
newDBounds
[
3
]
"
height
of
container
correct
when
position
:
fixed
is
added
.
"
)
;
}
{
chrome
:
true
iframe
:
true
remoteIframe
:
true
}
)
;
