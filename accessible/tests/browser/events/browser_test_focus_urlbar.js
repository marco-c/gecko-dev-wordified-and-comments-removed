"
use
strict
"
;
loadScripts
(
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PlacesTestUtils
"
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
function
isEventForAutocompleteItem
(
event
)
{
return
event
.
accessible
.
role
=
=
ROLE_COMBOBOX_OPTION
;
}
function
waitForSearchFinish
(
)
{
return
Promise
.
all
(
[
gURLBar
.
lastQueryContextPromise
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
view
.
isOpen
)
]
)
;
}
async
function
runTests
(
)
{
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
makeURI
(
"
http
:
/
/
example1
.
com
/
blah
"
)
}
{
uri
:
makeURI
(
"
http
:
/
/
example2
.
com
/
blah
"
)
}
{
uri
:
makeURI
(
"
http
:
/
/
example1
.
com
/
"
)
}
{
uri
:
makeURI
(
"
http
:
/
/
example2
.
com
/
"
)
}
]
)
;
let
focused
=
waitForEvent
(
EVENT_FOCUS
event
=
>
event
.
accessible
.
role
=
=
ROLE_EDITCOMBOBOX
)
;
gURLBar
.
focus
(
)
;
let
event
=
await
focused
;
let
textBox
=
event
.
accessible
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
info
(
"
Ensuring
no
focus
change
when
first
text
is
typed
"
)
;
EventUtils
.
sendString
(
"
example
"
)
;
await
waitForSearchFinish
(
)
;
await
TestUtils
.
waitForTick
(
)
;
testStates
(
textBox
STATE_FOCUSED
)
;
info
(
"
Ensuring
no
focus
change
on
backspace
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
waitForSearchFinish
(
)
;
await
TestUtils
.
waitForTick
(
)
;
testStates
(
textBox
STATE_FOCUSED
)
;
info
(
"
Ensuring
no
focus
change
on
text
selection
and
delete
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
{
shiftKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Delete
"
)
;
await
waitForSearchFinish
(
)
;
await
TestUtils
.
waitForTick
(
)
;
testStates
(
textBox
STATE_FOCUSED
)
;
info
(
"
Ensuring
autocomplete
focus
on
down
arrow
(
1
)
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
info
(
"
Ensuring
focus
of
another
autocomplete
item
on
down
arrow
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
info
(
"
Ensuring
focus
of
another
autocomplete
item
on
ctrl
-
n
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
n
"
{
ctrlKey
:
true
}
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
info
(
"
Ensuring
focus
of
another
autocomplete
item
on
ctrl
-
p
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
p
"
{
ctrlKey
:
true
}
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
}
info
(
"
Ensuring
focus
of
another
autocomplete
item
on
up
arrow
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
info
(
"
Ensuring
text
box
focus
on
left
arrow
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
textBox
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
)
;
await
focused
;
testStates
(
textBox
STATE_FOCUSED
)
;
gURLBar
.
view
.
close
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
)
;
info
(
"
Ensuring
autocomplete
focus
on
down
arrow
(
2
)
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
info
(
"
Ensuring
text
box
focus
when
text
is
typed
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
textBox
)
;
EventUtils
.
sendString
(
"
z
"
)
;
await
focused
;
testStates
(
textBox
STATE_FOCUSED
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
waitForSearchFinish
(
)
;
info
(
"
Ensuring
autocomplete
focus
on
down
arrow
(
3
)
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
info
(
"
Ensuring
text
box
focus
on
backspace
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
textBox
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
focused
;
testStates
(
textBox
STATE_FOCUSED
)
;
info
(
"
Ensuring
autocomplete
focus
on
arrow
down
&
up
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
info
(
"
Ensuring
text
box
focus
on
text
selection
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
textBox
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
{
shiftKey
:
true
}
)
;
await
focused
;
testStates
(
textBox
STATE_FOCUSED
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
EventUtils
.
sendString
(
"
ple
"
)
;
info
(
"
Ensuring
autocomplete
focus
on
ctrl
-
n
"
)
;
focused
=
waitForEvent
(
EVENT_FOCUS
isEventForAutocompleteItem
)
;
EventUtils
.
synthesizeKey
(
"
n
"
{
ctrlKey
:
true
}
)
;
event
=
await
focused
;
testStates
(
event
.
accessible
STATE_FOCUSED
)
;
}
}
addAccessibleTask
(
runTests
)
;
