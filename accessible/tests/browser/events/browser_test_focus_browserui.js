"
use
strict
"
;
loadScripts
(
{
name
:
"
states
.
js
"
dir
:
MOCHITESTS_DIR
}
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
async
function
runTests
(
browser
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
fission
.
bfcacheInParent
"
true
]
]
}
)
;
let
onFocus
=
waitForEvent
(
EVENT_FOCUS
"
input
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
}
browser
.
ownerGlobal
)
;
let
evt
=
await
onFocus
;
testStates
(
evt
.
accessible
STATE_FOCUSED
)
;
onFocus
=
waitForEvent
(
EVENT_FOCUS
"
buttonInputDoc
"
)
;
let
url
=
snippetToURL
(
<
input
id
=
"
input
"
type
=
"
button
"
value
=
"
button
"
>
{
contentDocBodyAttrs
:
{
id
:
"
buttonInputDoc
"
}
}
)
;
browser
.
loadURI
(
Services
.
io
.
newURI
(
url
)
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
evt
=
await
onFocus
;
testStates
(
evt
.
accessible
STATE_FOCUSED
)
;
onFocus
=
waitForEvent
(
EVENT_FOCUS
"
input
"
)
;
browser
.
goBack
(
)
;
evt
=
await
onFocus
;
testStates
(
evt
.
accessible
STATE_FOCUSED
)
;
onFocus
=
waitForEvent
(
EVENT_FOCUS
event
=
>
event
.
accessible
.
DOMNode
=
=
gURLBar
.
inputField
)
;
EventUtils
.
synthesizeKey
(
"
t
"
{
accelKey
:
true
}
browser
.
ownerGlobal
)
;
evt
=
await
onFocus
;
testStates
(
evt
.
accessible
STATE_FOCUSED
)
;
onFocus
=
waitForEvent
(
EVENT_FOCUS
"
input
"
)
;
EventUtils
.
synthesizeKey
(
"
w
"
{
accelKey
:
true
}
browser
.
ownerGlobal
)
;
evt
=
await
onFocus
;
testStates
(
evt
.
accessible
STATE_FOCUSED
)
;
}
addAccessibleTask
(
<
input
id
=
"
input
"
>
runTests
)
;
