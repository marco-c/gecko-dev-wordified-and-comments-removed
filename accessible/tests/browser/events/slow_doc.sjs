"
use
strict
"
;
function
setGlobalState
(
key
data
)
{
const
x
=
{
data
QueryInterface
:
ChromeUtils
.
generateQI
(
[
]
)
}
;
x
.
wrappedJSObject
=
x
;
setObjectState
(
key
x
)
;
}
function
getGlobalState
(
key
)
{
let
data
;
getObjectState
(
key
function
(
x
)
{
data
=
x
&
&
x
.
wrappedJSObject
.
data
;
}
)
;
return
data
;
}
function
handleRequest
(
request
response
)
{
const
second
=
request
.
queryString
=
=
"
second
"
;
const
secondInContainer
=
request
.
queryString
=
=
"
secondInContainer
"
;
if
(
second
|
|
secondInContainer
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
no
-
cache
"
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
false
)
;
response
.
write
(
"
<
!
doctype
html
>
"
)
;
response
.
write
(
'
<
p
id
=
"
first
"
>
first
<
/
p
>
'
)
;
if
(
secondInContainer
)
{
response
.
write
(
"
<
section
>
"
)
;
}
response
.
write
(
'
<
script
src
=
"
?
script
"
>
<
/
script
>
'
)
;
response
.
write
(
'
<
p
id
=
"
second
"
>
second
<
/
p
>
'
)
;
if
(
secondInContainer
)
{
response
.
write
(
"
<
/
section
>
"
)
;
}
return
;
}
if
(
request
.
queryString
=
=
"
script
"
)
{
response
.
processAsync
(
)
;
setGlobalState
(
"
a11y
-
script
-
response
"
response
)
;
const
resolve
=
getGlobalState
(
"
a11y
-
script
-
resolve
"
)
;
if
(
resolve
)
{
resolve
(
)
;
}
return
;
}
if
(
request
.
queryString
=
=
"
scriptFinish
"
)
{
response
.
processAsync
(
)
;
const
finish
=
(
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
no
-
cache
"
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
json
"
false
)
;
response
.
write
(
"
true
"
)
;
response
.
finish
(
)
;
const
blockedResponse
=
getGlobalState
(
"
a11y
-
script
-
response
"
)
;
blockedResponse
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
blockedResponse
.
setHeader
(
"
Cache
-
Control
"
"
no
-
cache
"
false
)
;
blockedResponse
.
setHeader
(
"
Content
-
Type
"
"
text
/
javascript
"
false
)
;
blockedResponse
.
write
(
"
;
"
)
;
blockedResponse
.
finish
(
)
;
setGlobalState
(
"
a11y
-
script
-
response
"
undefined
)
;
setGlobalState
(
"
a11y
-
script
-
resolve
"
undefined
)
;
}
;
if
(
getGlobalState
(
"
a11y
-
script
-
response
"
)
)
{
finish
(
)
;
}
else
{
const
promise
=
Promise
.
withResolvers
(
)
;
promise
.
promise
.
then
(
finish
)
;
setGlobalState
(
"
a11y
-
script
-
resolve
"
promise
.
resolve
)
;
}
}
}
