"
use
strict
"
;
loadScripts
(
{
name
:
"
role
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserTestUtils
:
"
resource
:
/
/
testing
-
common
/
BrowserTestUtils
.
jsm
"
UrlbarTestUtils
:
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
jsm
"
}
)
;
async
function
runTests
(
)
{
let
focused
=
waitForEvent
(
EVENT_FOCUS
event
=
>
event
.
accessible
.
role
=
=
ROLE_ENTRY
)
;
info
(
"
Creating
new
window
"
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
addons
"
url
:
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
addons
.
mozilla
.
org
/
"
)
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
;
}
)
;
info
(
"
Focusing
window
"
)
;
newWin
.
focus
(
)
;
await
focused
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
newWin
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
newWin
)
;
let
caretMoved
=
waitForEvent
(
EVENT_TEXT_CARET_MOVED
event
=
>
event
.
accessible
.
role
=
=
ROLE_ENTRY
)
;
info
(
"
Autofilling
after
typing
a
in
new
window
URL
bar
.
"
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
}
newWin
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
newWin
)
;
Assert
.
equal
(
newWin
.
gURLBar
.
inputField
.
value
"
addons
.
mozilla
.
org
/
"
"
autofilled
value
as
expected
"
)
;
info
(
"
Ensuring
caret
moved
on
text
selection
"
)
;
await
caretMoved
;
}
addAccessibleTask
(
runTests
)
;
