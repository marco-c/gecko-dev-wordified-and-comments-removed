'
use
strict
'
;
const
{
interfaces
:
Ci
utils
:
Cu
classes
:
Cc
}
=
Components
;
const
CURRENT_DIR
=
'
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
'
;
const
MOCHITESTS_DIR
=
'
chrome
:
/
/
mochitests
/
content
/
a11y
/
accessible
/
tests
/
mochitest
/
'
;
const
CURRENT_CONTENT_DIR
=
'
http
:
/
/
example
.
com
/
browser
/
accessible
/
tests
/
browser
/
'
;
let
Logger
=
{
dumpToConsole
:
false
dumpToAppConsole
:
false
get
enabled
(
)
{
return
this
.
dumpToConsole
|
|
this
.
dumpToAppConsole
;
}
log
(
msg
)
{
if
(
this
.
enabled
)
{
this
.
logToConsole
(
msg
)
;
this
.
logToAppConsole
(
msg
)
;
}
}
logToConsole
(
msg
)
{
if
(
this
.
dumpToConsole
)
{
dump
(
\
n
{
msg
}
\
n
)
;
}
}
logToAppConsole
(
msg
)
{
if
(
this
.
dumpToAppConsole
)
{
Services
.
console
.
logStringMessage
(
{
msg
}
)
;
}
}
}
;
function
invokeSetAttribute
(
browser
id
attr
value
)
{
if
(
value
)
{
Logger
.
log
(
Setting
{
attr
}
attribute
to
{
value
}
for
node
with
id
:
{
id
}
)
;
}
else
{
Logger
.
log
(
Removing
{
attr
}
attribute
from
node
with
id
:
{
id
}
)
;
}
return
ContentTask
.
spawn
(
browser
[
id
attr
value
]
(
[
contentId
contentAttr
contentValue
]
)
=
>
{
let
elm
=
content
.
document
.
getElementById
(
contentId
)
;
if
(
contentValue
)
{
elm
.
setAttribute
(
contentAttr
contentValue
)
;
}
else
{
elm
.
removeAttribute
(
contentAttr
)
;
}
}
)
;
}
function
invokeSetStyle
(
browser
id
style
value
)
{
if
(
value
)
{
Logger
.
log
(
Setting
{
style
}
style
to
{
value
}
for
node
with
id
:
{
id
}
)
;
}
else
{
Logger
.
log
(
Removing
{
style
}
style
from
node
with
id
:
{
id
}
)
;
}
return
ContentTask
.
spawn
(
browser
[
id
style
value
]
(
[
contentId
contentStyle
contentValue
]
)
=
>
{
let
elm
=
content
.
document
.
getElementById
(
contentId
)
;
if
(
contentValue
)
{
elm
.
style
[
contentStyle
]
=
contentValue
;
}
else
{
delete
elm
.
style
[
contentStyle
]
;
}
}
)
;
}
function
invokeFocus
(
browser
id
)
{
Logger
.
log
(
Setting
focus
on
a
node
with
id
:
{
id
}
)
;
return
ContentTask
.
spawn
(
browser
id
contentId
=
>
{
let
elm
=
content
.
document
.
getElementById
(
contentId
)
;
if
(
elm
instanceof
Ci
.
nsIDOMNSEditableElement
&
&
elm
.
editor
|
|
elm
instanceof
Ci
.
nsIDOMXULTextBoxElement
)
{
elm
.
selectionStart
=
elm
.
selectionEnd
=
elm
.
value
.
length
;
}
elm
.
focus
(
)
;
}
)
;
}
function
loadScripts
(
.
.
.
scripts
)
{
for
(
let
script
of
scripts
)
{
let
path
=
typeof
script
=
=
=
'
string
'
?
{
CURRENT_DIR
}
{
script
}
:
{
script
.
dir
}
{
script
.
name
}
;
Services
.
scriptloader
.
loadSubScript
(
path
this
)
;
}
}
function
loadFrameScripts
(
browser
.
.
.
scripts
)
{
let
mm
=
browser
.
messageManager
;
for
(
let
script
of
scripts
)
{
let
frameScript
;
if
(
typeof
script
=
=
=
'
string
'
)
{
if
(
script
.
includes
(
'
.
js
'
)
)
{
frameScript
=
{
CURRENT_DIR
}
{
script
}
;
}
else
{
frameScript
=
data
:
{
script
}
;
}
}
else
{
frameScript
=
{
script
.
dir
}
{
script
.
name
}
;
}
mm
.
loadFrameScript
(
frameScript
false
true
)
;
}
}
