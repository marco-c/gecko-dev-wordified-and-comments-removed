"
use
strict
"
;
const
{
interfaces
:
Ci
utils
:
Cu
classes
:
Cc
}
=
Components
;
const
CURRENT_DIR
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
accessible
/
tests
/
browser
/
"
;
const
MOCHITESTS_DIR
=
"
chrome
:
/
/
mochitests
/
content
/
a11y
/
accessible
/
tests
/
mochitest
/
"
;
const
CURRENT_CONTENT_DIR
=
"
http
:
/
/
example
.
com
/
browser
/
accessible
/
tests
/
browser
/
"
;
const
LOADED_FRAMESCRIPTS
=
new
Map
(
)
;
let
Logger
=
{
dumpToConsole
:
false
dumpToAppConsole
:
false
get
enabled
(
)
{
return
this
.
dumpToConsole
|
|
this
.
dumpToAppConsole
;
}
log
(
msg
)
{
if
(
this
.
enabled
)
{
this
.
logToConsole
(
msg
)
;
this
.
logToAppConsole
(
msg
)
;
}
}
logToConsole
(
msg
)
{
if
(
this
.
dumpToConsole
)
{
dump
(
\
n
{
msg
}
\
n
)
;
}
}
logToAppConsole
(
msg
)
{
if
(
this
.
dumpToAppConsole
)
{
Services
.
console
.
logStringMessage
(
{
msg
}
)
;
}
}
}
;
function
invokeSetAttribute
(
browser
id
attr
value
)
{
if
(
value
)
{
Logger
.
log
(
Setting
{
attr
}
attribute
to
{
value
}
for
node
with
id
:
{
id
}
)
;
}
else
{
Logger
.
log
(
Removing
{
attr
}
attribute
from
node
with
id
:
{
id
}
)
;
}
return
ContentTask
.
spawn
(
browser
[
id
attr
value
]
(
[
contentId
contentAttr
contentValue
]
)
=
>
{
let
elm
=
content
.
document
.
getElementById
(
contentId
)
;
if
(
contentValue
)
{
elm
.
setAttribute
(
contentAttr
contentValue
)
;
}
else
{
elm
.
removeAttribute
(
contentAttr
)
;
}
}
)
;
}
function
invokeSetStyle
(
browser
id
style
value
)
{
if
(
value
)
{
Logger
.
log
(
Setting
{
style
}
style
to
{
value
}
for
node
with
id
:
{
id
}
)
;
}
else
{
Logger
.
log
(
Removing
{
style
}
style
from
node
with
id
:
{
id
}
)
;
}
return
ContentTask
.
spawn
(
browser
[
id
style
value
]
(
[
contentId
contentStyle
contentValue
]
)
=
>
{
let
elm
=
content
.
document
.
getElementById
(
contentId
)
;
if
(
contentValue
)
{
elm
.
style
[
contentStyle
]
=
contentValue
;
}
else
{
delete
elm
.
style
[
contentStyle
]
;
}
}
)
;
}
function
invokeFocus
(
browser
id
)
{
Logger
.
log
(
Setting
focus
on
a
node
with
id
:
{
id
}
)
;
return
ContentTask
.
spawn
(
browser
id
contentId
=
>
{
let
elm
=
content
.
document
.
getElementById
(
contentId
)
;
if
(
elm
instanceof
Ci
.
nsIDOMNSEditableElement
&
&
elm
.
editor
|
|
elm
instanceof
Ci
.
nsIDOMXULTextBoxElement
)
{
elm
.
selectionStart
=
elm
.
selectionEnd
=
elm
.
value
.
length
;
}
elm
.
focus
(
)
;
}
)
;
}
function
loadScripts
(
.
.
.
scripts
)
{
for
(
let
script
of
scripts
)
{
let
path
=
typeof
script
=
=
=
"
string
"
?
{
CURRENT_DIR
}
{
script
}
:
{
script
.
dir
}
{
script
.
name
}
;
Services
.
scriptloader
.
loadSubScript
(
path
this
)
;
}
}
function
loadFrameScripts
(
browser
.
.
.
scripts
)
{
let
mm
=
browser
.
messageManager
;
for
(
let
script
of
scripts
)
{
let
frameScript
;
if
(
typeof
script
=
=
=
"
string
"
)
{
if
(
script
.
includes
(
"
.
js
"
)
)
{
frameScript
=
{
CURRENT_DIR
}
{
script
}
;
}
else
{
frameScript
=
data
:
{
script
}
;
}
}
else
{
frameScript
=
{
script
.
dir
}
{
script
.
name
}
;
}
let
loadedScriptSet
=
LOADED_FRAMESCRIPTS
.
get
(
frameScript
)
;
if
(
!
loadedScriptSet
)
{
loadedScriptSet
=
new
WeakSet
(
)
;
LOADED_FRAMESCRIPTS
.
set
(
frameScript
loadedScriptSet
)
;
}
else
if
(
loadedScriptSet
.
has
(
browser
)
)
{
continue
;
}
mm
.
loadFrameScript
(
frameScript
false
true
)
;
loadedScriptSet
.
add
(
browser
)
;
}
}
function
snippetToURL
(
snippet
bodyAttrs
=
{
}
)
{
let
attrs
=
Object
.
assign
(
{
}
{
id
:
"
body
"
}
bodyAttrs
)
;
let
attrsString
=
Object
.
entries
(
attrs
)
.
map
(
(
[
attr
value
]
)
=
>
{
attr
}
=
{
JSON
.
stringify
(
value
)
}
)
.
join
(
"
"
)
;
let
encodedDoc
=
btoa
(
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Accessibility
Test
<
/
title
>
<
/
head
>
<
body
{
attrsString
}
>
{
snippet
}
<
/
body
>
<
/
html
>
)
;
return
data
:
text
/
html
;
charset
=
utf
-
8
;
base64
{
encodedDoc
}
;
}
function
addAccessibleTask
(
doc
task
)
{
add_task
(
async
function
(
)
{
let
url
;
if
(
doc
.
includes
(
"
doc_
"
)
)
{
url
=
{
CURRENT_CONTENT_DIR
}
e10s
/
{
doc
}
;
}
else
{
url
=
snippetToURL
(
doc
)
;
}
registerCleanupFunction
(
(
)
=
>
{
let
observers
=
Services
.
obs
.
enumerateObservers
(
"
accessible
-
event
"
)
;
while
(
observers
.
hasMoreElements
(
)
)
{
Services
.
obs
.
removeObserver
(
observers
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIObserver
)
"
accessible
-
event
"
)
;
}
}
)
;
let
onDocLoad
=
waitForEvent
(
EVENT_DOCUMENT_LOAD_COMPLETE
"
body
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
url
}
async
function
(
browser
)
{
registerCleanupFunction
(
(
)
=
>
{
if
(
browser
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
if
(
tab
&
&
!
tab
.
closing
&
&
tab
.
linkedBrowser
)
{
gBrowser
.
removeTab
(
tab
)
;
}
}
}
)
;
await
SimpleTest
.
promiseFocus
(
browser
)
;
loadFrameScripts
(
browser
"
let
{
document
window
navigator
}
=
content
;
"
{
name
:
"
common
.
js
"
dir
:
MOCHITESTS_DIR
}
)
;
Logger
.
log
(
e10s
enabled
:
{
Services
.
appinfo
.
browserTabsRemoteAutostart
}
)
;
Logger
.
log
(
Actually
remote
browser
:
{
browser
.
isRemoteBrowser
}
)
;
let
event
=
await
onDocLoad
;
await
task
(
browser
event
.
accessible
)
;
}
)
;
}
)
;
}
function
isDefunct
(
accessible
)
{
let
defunct
=
false
;
try
{
let
extState
=
{
}
;
accessible
.
getState
(
{
}
extState
)
;
defunct
=
extState
.
value
&
Ci
.
nsIAccessibleStates
.
EXT_STATE_DEFUNCT
;
}
catch
(
x
)
{
defunct
=
true
;
}
finally
{
if
(
defunct
)
{
Logger
.
log
(
Defunct
accessible
:
{
prettyName
(
accessible
)
}
)
;
}
}
return
defunct
;
}
function
getAccessibleTagName
(
acc
)
{
try
{
return
acc
.
attributes
.
getStringProperty
(
"
tag
"
)
;
}
catch
(
e
)
{
return
null
;
}
}
function
findAccessibleChildByID
(
accessible
id
interfaces
)
{
if
(
getAccessibleDOMNodeID
(
accessible
)
=
=
=
id
)
{
return
queryInterfaces
(
accessible
interfaces
)
;
}
for
(
let
i
=
0
;
i
<
accessible
.
children
.
length
;
+
+
i
)
{
let
found
=
findAccessibleChildByID
(
accessible
.
getChildAt
(
i
)
id
)
;
if
(
found
)
{
return
queryInterfaces
(
found
interfaces
)
;
}
}
}
function
queryInterfaces
(
accessible
interfaces
)
{
if
(
!
interfaces
)
{
return
accessible
;
}
for
(
let
iface
of
interfaces
.
filter
(
i
=
>
!
(
accessible
instanceof
i
)
)
)
{
try
{
accessible
.
QueryInterface
(
iface
)
;
}
catch
(
e
)
{
ok
(
false
"
Can
'
t
query
"
+
iface
)
;
}
}
return
accessible
;
}
function
arrayFromChildren
(
accessible
)
{
return
Array
.
from
(
{
length
:
accessible
.
childCount
}
(
c
i
)
=
>
accessible
.
getChildAt
(
i
)
)
;
}
function
forceGC
(
)
{
SpecialPowers
.
gc
(
)
;
SpecialPowers
.
forceShrinkingGC
(
)
;
SpecialPowers
.
forceCC
(
)
;
SpecialPowers
.
gc
(
)
;
SpecialPowers
.
forceShrinkingGC
(
)
;
SpecialPowers
.
forceCC
(
)
;
}
