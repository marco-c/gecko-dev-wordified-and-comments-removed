'
use
strict
'
;
add_task
(
function
*
(
)
{
yield
setE10sPrefs
(
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
data
:
text
/
html
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Accessibility
Test
<
/
title
>
<
/
head
>
<
body
>
<
/
body
>
<
/
html
>
}
function
*
(
browser
)
{
info
(
'
Creating
a
service
in
parent
and
waiting
for
service
to
be
created
'
+
'
in
content
'
)
;
let
parentA11yInit
=
initPromise
(
)
;
let
contentA11yInit
=
initPromise
(
browser
)
;
let
accService
=
Cc
[
'
mozilla
.
org
/
accessibilityService
;
1
'
]
.
getService
(
Ci
.
nsIAccessibilityService
)
;
ok
(
accService
'
Service
initialized
in
parent
'
)
;
yield
Promise
.
all
(
[
parentA11yInit
contentA11yInit
]
)
;
info
(
'
Adding
additional
reference
to
accessibility
service
in
content
'
+
'
process
'
)
;
loadFrameScripts
(
browser
let
accService
=
Components
.
classes
[
'
mozilla
.
org
/
accessibilityService
;
1
'
]
.
getService
(
Components
.
interfaces
.
nsIAccessibilityService
)
;
)
;
info
(
'
Shutting
down
a
service
in
parent
and
making
sure
the
one
in
'
+
'
content
stays
alive
'
)
;
let
contentCanShutdown
=
false
;
let
parentA11yShutdown
=
shutdownPromise
(
)
;
let
contentA11yShutdown
=
new
Promise
(
(
resolve
reject
)
=
>
shutdownPromise
(
browser
)
.
then
(
flag
=
>
contentCanShutdown
?
resolve
(
)
:
reject
(
'
Accessible
service
was
shut
down
incorrectly
'
)
)
)
;
accService
=
null
;
ok
(
!
accService
'
Service
is
removed
in
parent
'
)
;
forceGC
(
)
;
loadFrameScripts
(
browser
Components
.
utils
.
forceGC
(
)
;
)
;
yield
parentA11yShutdown
;
yield
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
info
(
'
Removing
a
service
in
content
'
)
;
contentCanShutdown
=
true
;
loadFrameScripts
(
browser
accService
=
null
;
Components
.
utils
.
forceGC
(
)
;
)
;
yield
contentA11yShutdown
;
yield
unsetE10sPrefs
(
)
;
}
)
;
}
)
;
