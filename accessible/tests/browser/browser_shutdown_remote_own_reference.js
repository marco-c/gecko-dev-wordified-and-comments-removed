"
use
strict
"
;
add_task
(
async
function
(
)
{
await
setE10sPrefs
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
data
:
text
/
html
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Accessibility
Test
<
/
title
>
<
/
head
>
<
body
>
<
/
body
>
<
/
html
>
}
async
function
(
browser
)
{
info
(
"
Creating
a
service
in
parent
and
waiting
for
service
to
be
created
"
+
"
in
content
"
)
;
await
loadContentScripts
(
browser
{
script
:
"
Common
.
sys
.
mjs
"
symbol
:
"
CommonUtils
"
}
)
;
const
[
parentA11yInitObserver
parentA11yInit
]
=
initAccService
(
)
;
const
[
contentA11yInitObserver
contentA11yInit
]
=
initAccService
(
browser
)
;
let
[
contentConsumersChangedObserver
contentConsumersChanged
]
=
accConsumersChanged
(
browser
)
;
await
Promise
.
all
(
[
parentA11yInitObserver
contentA11yInitObserver
contentConsumersChangedObserver
]
)
;
let
accService
=
Cc
[
"
mozilla
.
org
/
accessibilityService
;
1
"
]
.
getService
(
Ci
.
nsIAccessibilityService
)
;
ok
(
accService
"
Service
initialized
in
parent
"
)
;
await
Promise
.
all
(
[
parentA11yInit
contentA11yInit
]
)
;
await
contentConsumersChanged
.
then
(
data
=
>
Assert
.
deepEqual
(
data
{
XPCOM
:
false
MainProcess
:
true
PlatformAPI
:
false
}
"
Accessibility
service
consumers
in
content
are
correct
.
"
)
)
;
info
(
"
Adding
additional
reference
to
accessibility
service
in
content
"
+
"
process
"
)
;
[
contentConsumersChangedObserver
contentConsumersChanged
]
=
accConsumersChanged
(
browser
)
;
await
contentConsumersChangedObserver
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
CommonUtils
.
accService
;
}
)
;
await
contentConsumersChanged
.
then
(
data
=
>
Assert
.
deepEqual
(
data
{
XPCOM
:
true
MainProcess
:
true
PlatformAPI
:
false
}
"
Accessibility
service
consumers
in
content
are
correct
.
"
)
)
;
const
contentConsumers
=
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
content
.
CommonUtils
.
accService
.
getConsumers
(
)
)
;
Assert
.
deepEqual
(
JSON
.
parse
(
contentConsumers
)
{
XPCOM
:
true
MainProcess
:
true
PlatformAPI
:
false
}
"
Accessibility
service
consumers
in
parent
are
correct
.
"
)
;
info
(
"
Shutting
down
a
service
in
parent
and
making
sure
the
one
in
"
+
"
content
stays
alive
"
)
;
let
contentCanShutdown
=
false
;
const
[
parentA11yShutdownObserver
parentA11yShutdown
]
=
shutdownAccService
(
)
;
[
contentConsumersChangedObserver
contentConsumersChanged
]
=
accConsumersChanged
(
browser
)
;
const
[
contentA11yShutdownObserver
contentA11yShutdownPromise
]
=
shutdownAccService
(
browser
)
;
const
contentA11yShutdown
=
new
Promise
(
(
resolve
reject
)
=
>
contentA11yShutdownPromise
.
then
(
flag
=
>
contentCanShutdown
?
resolve
(
)
:
reject
(
"
Accessible
service
was
shut
down
incorrectly
"
)
)
)
;
await
Promise
.
all
(
[
parentA11yShutdownObserver
contentA11yShutdownObserver
contentConsumersChangedObserver
]
)
;
accService
=
null
;
ok
(
!
accService
"
Service
is
removed
in
parent
"
)
;
forceGC
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
SpecialPowers
.
Cu
.
forceGC
(
)
;
}
)
;
await
parentA11yShutdown
;
await
contentConsumersChanged
.
then
(
data
=
>
Assert
.
deepEqual
(
data
{
XPCOM
:
true
MainProcess
:
false
PlatformAPI
:
false
}
"
Accessibility
service
consumers
in
content
are
correct
.
"
)
)
;
await
TestUtils
.
waitForTick
(
)
;
info
(
"
Removing
a
service
in
content
"
)
;
contentCanShutdown
=
true
;
[
contentConsumersChangedObserver
contentConsumersChanged
]
=
accConsumersChanged
(
browser
)
;
await
contentConsumersChangedObserver
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
CommonUtils
.
clearAccService
(
)
;
}
)
;
await
contentA11yShutdown
;
await
contentConsumersChanged
.
then
(
data
=
>
Assert
.
deepEqual
(
data
{
XPCOM
:
false
MainProcess
:
false
PlatformAPI
:
false
}
"
Accessibility
service
consumers
in
content
are
correct
.
"
)
)
;
await
unsetE10sPrefs
(
)
;
}
)
;
}
)
;
