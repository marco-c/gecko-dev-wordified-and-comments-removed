"
use
strict
"
;
const
LiveSetting
=
{
Off
:
0
Polite
:
1
Assertive
:
2
}
;
addUiaTask
(
<
div
id
=
"
polite
"
aria
-
live
=
"
polite
"
>
<
div
id
=
"
inner
"
>
polite
<
/
div
>
<
/
div
>
<
div
id
=
"
assertive
"
aria
-
live
=
"
assertive
"
>
assertive
<
/
div
>
<
div
id
=
"
off
"
aria
-
live
=
"
off
"
>
off
<
/
div
>
<
output
id
=
"
output
"
>
output
<
/
output
>
<
div
id
=
"
none
"
>
none
<
/
div
>
async
function
testLiveSettingProp
(
)
{
await
definePyVar
(
"
doc
"
getDocUia
(
)
)
;
is
(
await
runPython
(
findUiaByDomId
(
doc
"
polite
"
)
.
CurrentLiveSetting
)
LiveSetting
.
Polite
"
polite
has
correct
LiveSetting
"
)
;
if
(
gIsUiaEnabled
)
{
is
(
await
runPython
(
findUiaByDomId
(
doc
"
inner
"
)
.
CurrentLiveSetting
)
LiveSetting
.
Off
"
inner
has
correct
LiveSetting
"
)
;
}
is
(
await
runPython
(
findUiaByDomId
(
doc
"
assertive
"
)
.
CurrentLiveSetting
)
LiveSetting
.
Assertive
"
assertive
has
correct
LiveSetting
"
)
;
is
(
await
runPython
(
findUiaByDomId
(
doc
"
off
"
)
.
CurrentLiveSetting
)
LiveSetting
.
Off
"
off
has
correct
LiveSetting
"
)
;
is
(
await
runPython
(
findUiaByDomId
(
doc
"
output
"
)
.
CurrentLiveSetting
)
LiveSetting
.
Polite
"
output
has
correct
LiveSetting
"
)
;
is
(
await
runPython
(
findUiaByDomId
(
doc
"
none
"
)
.
CurrentLiveSetting
)
LiveSetting
.
Off
"
none
has
correct
LiveSetting
"
)
;
}
)
;
addUiaTask
(
<
div
id
=
"
implicit
"
aria
-
live
=
"
polite
"
>
live
<
/
div
>
<
div
id
=
"
false
"
aria
-
live
=
"
polite
"
aria
-
atomic
=
"
false
"
>
false
<
/
div
>
<
div
id
=
"
true
"
aria
-
live
=
"
polite
"
aria
-
atomic
=
"
true
"
>
true
<
/
div
>
<
div
id
=
"
none
"
>
none
<
/
div
>
async
function
testAtomic
(
)
{
await
definePyVar
(
"
doc
"
getDocUia
(
)
)
;
let
result
=
await
runPython
(
findUiaByDomId
(
doc
"
implicit
"
)
.
CurrentAriaProperties
)
;
isnot
(
result
.
indexOf
(
"
atomic
=
false
"
)
-
1
"
AriaProperties
for
implicit
contains
atomic
=
false
"
)
;
result
=
await
runPython
(
findUiaByDomId
(
doc
"
false
"
)
.
CurrentAriaProperties
)
;
isnot
(
result
.
indexOf
(
"
atomic
=
false
"
)
-
1
"
AriaProperties
for
false
contains
atomic
=
false
"
)
;
result
=
await
runPython
(
findUiaByDomId
(
doc
"
true
"
)
.
CurrentAriaProperties
)
;
isnot
(
result
.
indexOf
(
"
atomic
=
true
"
)
-
1
"
AriaProperties
for
true
contains
atomic
=
true
"
)
;
result
=
await
runPython
(
findUiaByDomId
(
doc
"
none
"
)
.
CurrentAriaProperties
)
;
is
(
result
.
indexOf
(
"
atomic
"
)
-
1
"
AriaProperties
for
none
doesn
'
t
contain
atomic
"
)
;
}
{
uiaEnabled
:
true
uiaDisabled
:
false
}
)
;
