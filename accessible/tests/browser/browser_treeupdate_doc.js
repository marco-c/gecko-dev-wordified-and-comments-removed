'
use
strict
'
;
loadScripts
(
{
name
:
'
role
.
js
'
dir
:
MOCHITESTS_DIR
}
)
;
const
iframeSrc
=
data
:
text
/
html
<
html
>
<
head
>
<
meta
charset
=
'
utf
-
8
'
/
>
<
title
>
Inner
Iframe
<
/
title
>
<
/
head
>
<
body
id
=
'
inner
-
iframe
'
>
<
/
body
>
<
/
html
>
;
addAccessibleTask
(
<
iframe
id
=
"
iframe
"
src
=
"
{
iframeSrc
}
"
>
<
/
iframe
>
function
*
(
browser
accDoc
)
{
const
id
=
'
inner
-
iframe
'
;
let
iframe
=
findAccessibleChildByID
(
accDoc
id
)
;
let
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
]
}
;
testAccessibleTree
(
iframe
tree
)
;
let
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
id
id
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
newHTMLNode
=
docNode
.
createElement
(
'
html
'
)
;
let
newBodyNode
=
docNode
.
createElement
(
'
body
'
)
;
let
newTextNode
=
docNode
.
createTextNode
(
'
New
Wave
'
)
;
newBodyNode
.
id
=
id
;
newBodyNode
.
appendChild
(
newTextNode
)
;
newHTMLNode
.
appendChild
(
newBodyNode
)
;
docNode
.
replaceChild
(
newHTMLNode
docNode
.
documentElement
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
{
role
:
ROLE_TEXT_LEAF
name
:
'
New
Wave
'
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
id
id
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
script
=
docNode
.
createElement
(
'
script
'
)
;
script
.
textContent
=
document
.
open
(
)
;
document
.
write
(
'
<
body
id
=
"
{
id
}
"
>
hello
<
/
body
>
'
)
;
document
.
close
(
)
;
;
docNode
.
body
.
appendChild
(
script
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
{
role
:
ROLE_TEXT_LEAF
name
:
'
hello
'
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
id
id
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
newBodyNode
=
docNode
.
createElement
(
'
body
'
)
;
let
newTextNode
=
docNode
.
createTextNode
(
'
New
Hello
'
)
;
newBodyNode
.
id
=
id
;
newBodyNode
.
appendChild
(
newTextNode
)
;
newBodyNode
.
setAttribute
(
'
role
'
'
button
'
)
;
docNode
.
documentElement
.
replaceChild
(
newBodyNode
docNode
.
body
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_PUSHBUTTON
children
:
[
{
role
:
ROLE_TEXT_LEAF
name
:
'
New
Hello
'
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
id
id
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
script
=
docNode
.
createElement
(
'
script
'
)
;
script
.
textContent
=
function
closeMe
(
)
{
document
.
write
(
'
Works
?
'
)
;
document
.
close
(
)
;
}
window
.
closeMe
=
closeMe
;
document
.
open
(
)
;
document
.
write
(
'
<
body
id
=
"
{
id
}
"
>
<
/
body
>
'
)
;
;
docNode
.
body
.
appendChild
(
script
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
docNode
.
write
(
'
Works
?
'
)
;
docNode
.
close
(
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
{
role
:
ROLE_TEXT_LEAF
name
:
'
Works
?
'
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
docNode
.
removeChild
(
docNode
.
firstChild
)
;
}
)
;
let
event
=
yield
onReorder
;
ok
(
event
.
accessible
instanceof
nsIAccessibleDocument
'
Reorder
should
happen
on
the
document
'
)
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
id
id
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
html
=
docNode
.
createElement
(
'
html
'
)
;
let
body
=
docNode
.
createElement
(
'
body
'
)
;
let
text
=
docNode
.
createTextNode
(
'
Haha
'
)
;
body
.
appendChild
(
text
)
;
body
.
id
=
id
;
html
.
appendChild
(
body
)
;
docNode
.
appendChild
(
html
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
{
role
:
ROLE_TEXT_LEAF
name
:
'
Haha
'
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
docNode
.
documentElement
.
removeChild
(
docNode
.
body
)
;
}
)
;
event
=
yield
onReorder
;
ok
(
event
.
accessible
instanceof
nsIAccessibleDocument
'
Reorder
should
happen
on
the
document
'
)
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
inputNode
=
content
.
window
.
inputNode
=
docNode
.
createElement
(
'
input
'
)
;
docNode
.
documentElement
.
appendChild
(
inputNode
)
;
}
)
;
event
=
yield
onReorder
;
ok
(
event
.
accessible
instanceof
nsIAccessibleDocument
'
Reorder
should
happen
on
the
document
'
)
;
tree
=
{
DOCUMENT
:
[
{
ENTRY
:
[
]
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
docNode
.
documentElement
.
removeChild
(
content
.
window
.
inputNode
)
;
}
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
id
id
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
body
=
docNode
.
createElement
(
'
body
'
)
;
let
text
=
docNode
.
createTextNode
(
'
Yo
ho
ho
i
butylka
roma
!
'
)
;
body
.
appendChild
(
text
)
;
body
.
id
=
id
;
docNode
.
documentElement
.
appendChild
(
body
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_DOCUMENT
children
:
[
{
role
:
ROLE_TEXT_LEAF
name
:
'
Yo
ho
ho
i
butylka
roma
!
'
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
'
iframe
'
)
;
yield
invokeSetAttribute
(
browser
'
iframe
'
'
src
'
data
:
text
/
html
<
html
>
<
body
id
=
"
{
id
}
"
>
<
input
>
<
/
body
>
<
/
html
>
)
;
event
=
yield
onReorder
;
tree
=
{
INTERNAL_FRAME
:
[
{
DOCUMENT
:
[
{
ENTRY
:
[
]
}
]
}
]
}
;
testAccessibleTree
(
event
.
accessible
tree
)
;
iframe
=
findAccessibleChildByID
(
event
.
accessible
id
)
;
onReorder
=
waitForEvent
(
EVENT_REORDER
id
)
;
yield
ContentTask
.
spawn
(
browser
id
id
=
>
{
let
docNode
=
content
.
document
.
getElementById
(
'
iframe
'
)
.
contentDocument
;
let
newBodyNode
=
docNode
.
createElement
(
'
body
'
)
;
let
newTextNode
=
docNode
.
createTextNode
(
'
New
Hello
'
)
;
newBodyNode
.
appendChild
(
newTextNode
)
;
newBodyNode
.
setAttribute
(
'
role
'
'
button
'
)
;
newBodyNode
.
id
=
id
;
docNode
.
documentElement
.
replaceChild
(
newBodyNode
docNode
.
body
)
;
}
)
;
yield
onReorder
;
tree
=
{
role
:
ROLE_PUSHBUTTON
children
:
[
{
role
:
ROLE_TEXT_LEAF
name
:
'
New
Hello
'
}
]
}
;
testAccessibleTree
(
iframe
tree
)
;
}
)
;
