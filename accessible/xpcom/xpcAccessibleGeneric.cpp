#
include
"
xpcAccessibleGeneric
.
h
"
#
include
"
xpcAccessibleDocument
.
h
"
using
namespace
mozilla
:
:
a11y
;
NS_INTERFACE_MAP_BEGIN
(
xpcAccessibleGeneric
)
NS_INTERFACE_MAP_ENTRY
(
nsIAccessible
)
NS_INTERFACE_MAP_ENTRY_CONDITIONAL
(
nsIAccessibleSelectable
mSupportedIfaces
&
eSelectable
)
NS_INTERFACE_MAP_ENTRY_CONDITIONAL
(
nsIAccessibleValue
mSupportedIfaces
&
eValue
)
NS_INTERFACE_MAP_ENTRY_CONDITIONAL
(
nsIAccessibleHyperLink
mSupportedIfaces
&
eHyperLink
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIAccessible
)
NS_INTERFACE_MAP_END
NS_IMPL_ADDREF
(
xpcAccessibleGeneric
)
NS_IMPL_RELEASE
(
xpcAccessibleGeneric
)
xpcAccessibleGeneric
:
:
~
xpcAccessibleGeneric
(
)
{
if
(
mIntl
.
IsNull
(
)
)
{
return
;
}
xpcAccessibleDocument
*
xpcDoc
=
nullptr
;
if
(
mIntl
.
IsAccessible
(
)
)
{
LocalAccessible
*
acc
=
mIntl
.
AsAccessible
(
)
;
if
(
!
acc
-
>
IsDoc
(
)
&
&
!
acc
-
>
IsApplication
(
)
)
{
xpcDoc
=
GetAccService
(
)
-
>
GetXPCDocument
(
acc
-
>
Document
(
)
)
;
xpcDoc
-
>
NotifyOfShutdown
(
acc
)
;
}
}
else
{
ProxyAccessible
*
proxy
=
mIntl
.
AsProxy
(
)
;
if
(
!
proxy
-
>
IsDoc
(
)
)
{
xpcDoc
=
GetAccService
(
)
-
>
GetXPCDocument
(
proxy
-
>
Document
(
)
)
;
xpcDoc
-
>
NotifyOfShutdown
(
proxy
)
;
}
}
}
LocalAccessible
*
xpcAccessibleGeneric
:
:
ToInternalAccessible
(
)
const
{
return
mIntl
.
AsAccessible
(
)
;
}
void
xpcAccessibleGeneric
:
:
Shutdown
(
)
{
mIntl
=
nullptr
;
}
