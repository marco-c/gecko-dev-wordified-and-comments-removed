#
import
"
mozHTMLAccessible
.
h
"
#
import
"
Accessible
-
inl
.
h
"
#
import
"
HyperTextAccessible
.
h
"
#
import
"
nsCocoaUtils
.
h
"
using
namespace
mozilla
:
:
a11y
;
implementation
mozHeadingAccessible
-
(
NSString
*
)
moxTitle
{
nsAutoString
title
;
if
(
Accessible
*
acc
=
mGeckoAccessible
.
AsAccessible
(
)
)
{
mozilla
:
:
ErrorResult
rv
;
acc
-
>
GetContent
(
)
-
>
GetTextContent
(
title
rv
)
;
}
else
if
(
ProxyAccessible
*
proxy
=
mGeckoAccessible
.
AsProxy
(
)
)
{
proxy
-
>
Title
(
title
)
;
}
return
nsCocoaUtils
:
:
ToNSString
(
title
)
;
}
-
(
id
)
moxValue
{
GroupPos
groupPos
;
if
(
Accessible
*
acc
=
mGeckoAccessible
.
AsAccessible
(
)
)
{
groupPos
=
acc
-
>
GroupPosition
(
)
;
}
else
if
(
ProxyAccessible
*
proxy
=
mGeckoAccessible
.
AsProxy
(
)
)
{
groupPos
=
proxy
-
>
GroupPosition
(
)
;
}
return
[
NSNumber
numberWithInt
:
groupPos
.
level
]
;
}
end
implementation
mozLinkAccessible
-
(
NSString
*
)
moxValue
{
return
"
"
;
}
-
(
NSURL
*
)
moxURL
{
nsAutoString
value
;
if
(
Accessible
*
acc
=
mGeckoAccessible
.
AsAccessible
(
)
)
{
acc
-
>
Value
(
value
)
;
}
else
if
(
ProxyAccessible
*
proxy
=
mGeckoAccessible
.
AsProxy
(
)
)
{
proxy
-
>
Value
(
value
)
;
}
NSString
*
urlString
=
value
.
IsEmpty
(
)
?
nil
:
nsCocoaUtils
:
:
ToNSString
(
value
)
;
if
(
!
urlString
)
return
nil
;
return
[
NSURL
URLWithString
:
urlString
]
;
}
-
(
NSNumber
*
)
moxVisited
{
return
(
[
self
stateWithMask
:
states
:
:
TRAVERSED
]
!
=
0
)
;
}
-
(
NSString
*
)
moxRole
{
if
(
!
[
self
stateWithMask
:
states
:
:
LINKED
]
)
{
return
NSAccessibilityGroupRole
;
}
return
[
super
moxRole
]
;
}
end
implementation
MOXSummaryAccessible
-
(
NSNumber
*
)
moxExpanded
{
return
(
[
self
stateWithMask
:
states
:
:
EXPANDED
]
!
=
0
)
;
}
end
implementation
MOXListItemAccessible
-
(
NSString
*
)
moxTitle
{
return
"
"
;
}
end
