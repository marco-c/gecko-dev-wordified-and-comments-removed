#
import
"
mozSelectableElements
.
h
"
implementation
mozSelectableAccessible
-
(
NSArray
*
)
accessibilityAttributeNames
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
static
NSMutableArray
*
attributes
=
nil
;
if
(
!
attributes
)
{
attributes
=
[
[
super
accessibilityAttributeNames
]
mutableCopy
]
;
[
attributes
addObject
:
NSAccessibilitySelectedChildrenAttribute
]
;
}
return
attributes
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
BOOL
)
accessibilityIsAttributeSettable
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN
;
if
(
[
attribute
isEqualToString
:
NSAccessibilitySelectedChildrenAttribute
]
)
{
return
YES
;
}
return
[
super
accessibilityIsAttributeSettable
:
attribute
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_RETURN
(
NO
)
;
}
-
(
void
)
accessibilitySetValue
:
(
id
)
value
forAttribute
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
if
(
[
attribute
isEqualToString
:
NSAccessibilitySelectedChildrenAttribute
]
&
&
[
value
isKindOfClass
:
[
NSArray
class
]
]
)
{
for
(
id
child
in
[
self
selectableChildren
]
)
{
BOOL
selected
=
[
value
indexOfObjectIdenticalTo
:
child
]
!
=
NSNotFound
;
[
child
setSelected
:
selected
]
;
}
}
else
{
[
super
accessibilitySetValue
:
value
forAttribute
:
attribute
]
;
}
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
[
attribute
isEqualToString
:
NSAccessibilitySelectedChildrenAttribute
]
)
{
return
[
self
selectedChildren
]
;
}
return
[
super
accessibilityAttributeValue
:
attribute
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
NSArray
*
)
selectableChildren
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
return
[
[
self
children
]
filteredArrayUsingPredicate
:
[
NSPredicate
predicateWithBlock
:
^
BOOL
(
mozAccessible
*
child
NSDictionary
*
bindings
)
{
return
[
child
isKindOfClass
:
[
mozSelectableChildAccessible
class
]
]
;
}
]
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
NSArray
*
)
selectedChildren
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
return
[
[
self
children
]
filteredArrayUsingPredicate
:
[
NSPredicate
predicateWithBlock
:
^
BOOL
(
mozAccessible
*
child
NSDictionary
*
bindings
)
{
return
[
child
isKindOfClass
:
[
mozSelectableChildAccessible
class
]
]
&
&
[
(
mozSelectableChildAccessible
*
)
child
isSelected
]
;
}
]
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
end
implementation
mozSelectableChildAccessible
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
[
attribute
isEqualToString
:
NSAccessibilitySelectedAttribute
]
)
{
return
[
NSNumber
numberWithBool
:
[
self
isSelected
]
]
;
}
return
[
super
accessibilityAttributeValue
:
attribute
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
BOOL
)
accessibilityIsAttributeSettable
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN
;
if
(
[
attribute
isEqualToString
:
NSAccessibilitySelectedAttribute
]
)
{
return
YES
;
}
return
[
super
accessibilityIsAttributeSettable
:
attribute
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_RETURN
(
NO
)
;
}
-
(
void
)
accessibilitySetValue
:
(
id
)
value
forAttribute
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
if
(
[
attribute
isEqualToString
:
NSAccessibilitySelectedAttribute
]
)
{
[
self
setSelected
:
[
value
boolValue
]
]
;
}
else
{
[
super
accessibilitySetValue
:
value
forAttribute
:
attribute
]
;
}
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
-
(
BOOL
)
isSelected
{
return
[
self
stateWithMask
:
states
:
:
SELECTED
]
!
=
0
;
}
-
(
void
)
setSelected
:
(
BOOL
)
selected
{
uint64_t
state
=
[
self
stateWithMask
:
(
states
:
:
SELECTABLE
|
states
:
:
UNAVAILABLE
)
]
;
if
(
(
state
&
states
:
:
SELECTABLE
)
=
=
0
|
|
(
state
&
states
:
:
UNAVAILABLE
)
!
=
0
)
{
return
;
}
if
(
Accessible
*
acc
=
mGeckoAccessible
.
AsAccessible
(
)
)
{
acc
-
>
SetSelected
(
selected
)
;
}
else
{
mGeckoAccessible
.
AsProxy
(
)
-
>
SetSelected
(
selected
)
;
}
[
self
invalidateState
]
;
}
end
implementation
mozTabGroupAccessible
-
(
NSArray
*
)
accessibilityAttributeNames
{
static
NSMutableArray
*
attributes
=
nil
;
if
(
!
attributes
)
{
attributes
=
[
[
super
accessibilityAttributeNames
]
mutableCopy
]
;
[
attributes
addObject
:
NSAccessibilityContentsAttribute
]
;
[
attributes
addObject
:
NSAccessibilityTabsAttribute
]
;
}
return
attributes
;
}
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
{
if
(
[
attribute
isEqualToString
:
NSAccessibilityContentsAttribute
]
)
return
[
super
children
]
;
if
(
[
attribute
isEqualToString
:
NSAccessibilityTabsAttribute
]
)
return
[
self
selectableChildren
]
;
return
[
super
accessibilityAttributeValue
:
attribute
]
;
}
-
(
id
)
value
{
return
[
[
self
selectedChildren
]
firstObject
]
;
}
end
implementation
mozTabAccessible
-
(
NSString
*
)
roleDescription
{
return
utils
:
:
LocalizedString
(
NS_LITERAL_STRING
(
"
tab
"
)
)
;
}
-
(
NSString
*
)
accessibilityActionDescription
:
(
NSString
*
)
action
{
if
(
[
action
isEqualToString
:
NSAccessibilityPressAction
]
)
{
return
utils
:
:
LocalizedString
(
NS_LITERAL_STRING
(
"
switch
"
)
)
;
}
return
[
super
accessibilityActionDescription
:
action
]
;
}
-
(
id
)
value
{
return
[
NSNumber
numberWithBool
:
[
self
isSelected
]
]
;
}
end
implementation
mozListboxAccessible
-
(
BOOL
)
ignoreChild
:
(
mozAccessible
*
)
child
{
if
(
!
child
|
|
child
-
>
mRole
=
=
roles
:
:
GROUPING
)
{
return
YES
;
}
return
[
super
ignoreChild
:
child
]
;
}
-
(
BOOL
)
disableChild
:
(
mozAccessible
*
)
child
{
return
!
[
child
isKindOfClass
:
[
mozSelectableChildAccessible
class
]
]
;
}
-
(
NSArray
*
)
accessibilityAttributeNames
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
static
NSMutableArray
*
attributes
=
nil
;
if
(
!
attributes
)
{
attributes
=
[
[
super
accessibilityAttributeNames
]
mutableCopy
]
;
[
attributes
addObject
:
NSAccessibilityOrientationAttribute
]
;
}
return
attributes
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
end
implementation
mozOptionAccessible
-
(
NSString
*
)
title
{
return
"
"
;
}
-
(
id
)
value
{
return
[
super
title
]
;
}
end
implementation
mozMenuAccessible
-
(
NSString
*
)
title
{
return
"
"
;
}
-
(
NSString
*
)
accessibilityLabel
{
return
"
"
;
}
-
(
void
)
postNotification
:
(
NSString
*
)
notification
{
[
super
postNotification
:
notification
]
;
if
(
[
notification
isEqualToString
:
"
AXMenuOpened
"
]
)
{
mIsOpened
=
YES
;
}
else
if
(
[
notification
isEqualToString
:
"
AXMenuClosed
"
]
)
{
mIsOpened
=
NO
;
}
}
-
(
void
)
expire
{
if
(
mIsOpened
)
{
[
self
postNotification
:
"
AXMenuClosed
"
]
;
}
[
super
expire
]
;
}
end
implementation
mozMenuItemAccessible
-
(
NSString
*
)
accessibilityLabel
{
return
"
"
;
}
-
(
NSArray
*
)
accessibilityAttributeNames
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
static
NSMutableArray
*
attributes
=
nil
;
if
(
!
attributes
)
{
attributes
=
[
[
super
accessibilityAttributeNames
]
mutableCopy
]
;
[
attributes
addObject
:
"
AXMenuItemMarkChar
"
]
;
}
return
attributes
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
[
attribute
isEqualToString
:
"
AXMenuItemMarkChar
"
]
)
{
Accessible
*
acc
=
mGeckoAccessible
.
AsAccessible
(
)
;
if
(
acc
&
&
acc
-
>
IsContent
(
)
&
&
acc
-
>
GetContent
(
)
-
>
IsXULElement
(
nsGkAtoms
:
:
menuitem
)
)
{
if
(
acc
-
>
ChildCount
(
)
=
=
1
&
&
acc
-
>
FirstChild
(
)
-
>
Role
(
)
=
=
roles
:
:
STATICTEXT
)
{
nsAutoString
marker
;
acc
-
>
FirstChild
(
)
-
>
Name
(
marker
)
;
if
(
marker
.
Length
(
)
=
=
1
)
{
return
nsCocoaUtils
:
:
ToNSString
(
marker
)
;
}
}
}
return
nil
;
}
return
[
super
accessibilityAttributeValue
:
attribute
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
BOOL
)
isSelected
{
return
[
self
stateWithMask
:
states
:
:
FOCUSED
]
!
=
0
;
}
-
(
void
)
handleAccessibleEvent
:
(
uint32_t
)
eventType
{
switch
(
eventType
)
{
case
nsIAccessibleEvent
:
:
EVENT_FOCUS
:
mozAccessible
*
parent
=
(
mozAccessible
*
)
[
self
parent
]
;
[
parent
postNotification
:
NSAccessibilitySelectedChildrenChangedNotification
]
;
break
;
}
[
super
handleAccessibleEvent
:
eventType
]
;
}
end
