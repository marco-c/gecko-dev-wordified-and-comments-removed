#
import
"
mozSelectableElements
.
h
"
implementation
mozSelectableAccessible
-
(
NSArray
*
)
accessibilityAttributeNames
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
static
NSMutableArray
*
attributes
=
nil
;
if
(
!
attributes
)
{
attributes
=
[
[
super
accessibilityAttributeNames
]
mutableCopy
]
;
[
attributes
addObject
:
NSAccessibilitySelectedChildrenAttribute
]
;
}
return
attributes
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
[
attribute
isEqualToString
:
NSAccessibilitySelectedChildrenAttribute
]
)
{
return
[
self
selectedChildren
]
;
}
return
[
super
accessibilityAttributeValue
:
attribute
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
id
)
selectableChildren
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
return
[
[
self
children
]
filteredArrayUsingPredicate
:
[
NSPredicate
predicateWithBlock
:
^
BOOL
(
mozAccessible
*
child
NSDictionary
*
bindings
)
{
return
[
child
isKindOfClass
:
[
mozSelectableChildAccessible
class
]
]
;
}
]
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
id
)
selectedChildren
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
return
[
[
self
children
]
filteredArrayUsingPredicate
:
[
NSPredicate
predicateWithBlock
:
^
BOOL
(
mozAccessible
*
child
NSDictionary
*
bindings
)
{
return
[
child
isKindOfClass
:
[
mozSelectableChildAccessible
class
]
]
&
&
[
[
child
value
]
boolValue
]
;
}
]
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
id
)
value
{
return
[
[
self
selectedChildren
]
firstObject
]
;
}
end
implementation
mozSelectableChildAccessible
-
(
id
)
value
{
return
[
NSNumber
numberWithBool
:
[
self
stateWithMask
:
states
:
:
SELECTED
]
!
=
0
]
;
}
end
implementation
mozTabGroupAccessible
-
(
NSArray
*
)
accessibilityAttributeNames
{
static
NSMutableArray
*
attributes
=
nil
;
if
(
!
attributes
)
{
attributes
=
[
[
super
accessibilityAttributeNames
]
mutableCopy
]
;
[
attributes
addObject
:
NSAccessibilityContentsAttribute
]
;
[
attributes
addObject
:
NSAccessibilityTabsAttribute
]
;
}
return
attributes
;
}
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
{
if
(
[
attribute
isEqualToString
:
NSAccessibilityContentsAttribute
]
)
return
[
super
children
]
;
if
(
[
attribute
isEqualToString
:
NSAccessibilityTabsAttribute
]
)
return
[
self
selectableChildren
]
;
return
[
super
accessibilityAttributeValue
:
attribute
]
;
}
end
implementation
mozTabAccessible
-
(
NSString
*
)
roleDescription
{
return
utils
:
:
LocalizedString
(
NS_LITERAL_STRING
(
"
tab
"
)
)
;
}
-
(
NSString
*
)
accessibilityActionDescription
:
(
NSString
*
)
action
{
if
(
[
action
isEqualToString
:
NSAccessibilityPressAction
]
)
{
return
utils
:
:
LocalizedString
(
NS_LITERAL_STRING
(
"
switch
"
)
)
;
}
return
[
super
accessibilityActionDescription
:
action
]
;
}
end
