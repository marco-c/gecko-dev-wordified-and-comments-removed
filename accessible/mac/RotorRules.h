#
import
"
mozAccessible
.
h
"
#
include
"
Pivot
.
h
"
using
namespace
mozilla
:
:
a11y
;
class
RotorRule
:
public
PivotRule
{
public
:
explicit
RotorRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
;
explicit
RotorRule
(
)
;
uint16_t
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
override
;
private
:
AccessibleOrProxy
mDirectDescendantsFrom
;
}
;
class
RotorRoleRule
final
:
public
RotorRule
{
public
:
explicit
RotorRoleRule
(
role
aRole
AccessibleOrProxy
&
aDirectDescendantsFrom
)
;
explicit
RotorRoleRule
(
role
aRole
)
;
uint16_t
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
override
;
private
:
role
mRole
;
}
;
class
RotorControlRule
final
:
public
RotorRule
{
public
:
explicit
RotorControlRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
;
explicit
RotorControlRule
(
)
;
virtual
uint16_t
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
override
;
}
;
class
RotorLinkRule
:
public
RotorRule
{
public
:
explicit
RotorLinkRule
(
)
;
explicit
RotorLinkRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
;
virtual
uint16_t
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
override
;
}
;
class
RotorVisitedLinkRule
final
:
public
RotorLinkRule
{
public
:
explicit
RotorVisitedLinkRule
(
)
;
explicit
RotorVisitedLinkRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
;
virtual
uint16_t
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
override
;
}
;
class
RotorUnvisitedLinkRule
final
:
public
RotorLinkRule
{
public
:
explicit
RotorUnvisitedLinkRule
(
)
;
explicit
RotorUnvisitedLinkRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
;
virtual
uint16_t
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
override
;
}
;
class
RotorStaticTextRule
:
public
RotorRule
{
public
:
explicit
RotorStaticTextRule
(
)
;
explicit
RotorStaticTextRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
;
virtual
uint16_t
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
override
;
}
;
