#
include
"
DocAccessibleWrap
.
h
"
#
import
"
mozAccessible
.
h
"
#
import
"
MOXTextMarkerDelegate
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
DocAccessibleWrap
:
:
DocAccessibleWrap
(
dom
:
:
Document
*
aDocument
PresShell
*
aPresShell
)
:
DocAccessible
(
aDocument
aPresShell
)
{
}
void
DocAccessibleWrap
:
:
Shutdown
(
)
{
[
MOXTextMarkerDelegate
destroyForDoc
:
this
]
;
DocAccessible
:
:
Shutdown
(
)
;
}
DocAccessibleWrap
:
:
~
DocAccessibleWrap
(
)
{
}
void
DocAccessibleWrap
:
:
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
DocAccessible
:
:
AttributeChanged
(
aElement
aNameSpaceID
aAttribute
aModType
aOldValue
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
aria_live
)
{
Accessible
*
accessible
=
mContent
!
=
aElement
?
GetAccessible
(
aElement
)
:
this
;
if
(
!
accessible
)
{
return
;
}
static
const
dom
:
:
Element
:
:
AttrValuesArray
sLiveRegionValues
[
]
=
{
nsGkAtoms
:
:
OFF
nsGkAtoms
:
:
polite
nsGkAtoms
:
:
assertive
nullptr
}
;
int32_t
attrValue
=
aElement
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
aria_live
sLiveRegionValues
eIgnoreCase
)
;
if
(
attrValue
>
0
)
{
if
(
!
aOldValue
|
|
aOldValue
-
>
IsEmptyString
(
)
|
|
aOldValue
-
>
Equals
(
nsGkAtoms
:
:
OFF
eIgnoreCase
)
)
{
FireDelayedEvent
(
nsIAccessibleEvent
:
:
EVENT_LIVE_REGION_ADDED
accessible
)
;
}
}
else
{
if
(
aOldValue
&
&
(
aOldValue
-
>
Equals
(
nsGkAtoms
:
:
polite
eIgnoreCase
)
|
|
aOldValue
-
>
Equals
(
nsGkAtoms
:
:
assertive
eIgnoreCase
)
)
)
{
FireDelayedEvent
(
nsIAccessibleEvent
:
:
EVENT_LIVE_REGION_REMOVED
accessible
)
;
}
else
if
(
attrValue
=
=
0
)
{
if
(
const
nsRoleMapEntry
*
roleMap
=
accessible
-
>
ARIARoleMap
(
)
)
{
if
(
roleMap
-
>
liveAttRule
=
=
ePoliteLiveAttr
)
{
FireDelayedEvent
(
nsIAccessibleEvent
:
:
EVENT_LIVE_REGION_REMOVED
accessible
)
;
}
}
else
if
(
nsStaticAtom
*
value
=
GetAccService
(
)
-
>
MarkupAttribute
(
aElement
nsGkAtoms
:
:
live
)
)
{
if
(
value
=
=
nsGkAtoms
:
:
polite
|
|
value
=
=
nsGkAtoms
:
:
assertive
)
{
FireDelayedEvent
(
nsIAccessibleEvent
:
:
EVENT_LIVE_REGION_REMOVED
accessible
)
;
}
}
}
}
}
}
void
DocAccessibleWrap
:
:
QueueNewLiveRegion
(
Accessible
*
aAccessible
)
{
if
(
!
aAccessible
)
{
return
;
}
mNewLiveRegions
.
PutEntry
(
aAccessible
-
>
UniqueID
(
)
)
;
}
void
DocAccessibleWrap
:
:
ProcessNewLiveRegions
(
)
{
for
(
auto
iter
=
mNewLiveRegions
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
Accessible
*
liveRegion
=
GetAccessibleByUniqueID
(
const_cast
<
void
*
>
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
)
)
{
FireDelayedEvent
(
nsIAccessibleEvent
:
:
EVENT_LIVE_REGION_ADDED
liveRegion
)
;
}
}
mNewLiveRegions
.
Clear
(
)
;
}
void
DocAccessibleWrap
:
:
DoInitialUpdate
(
)
{
DocAccessible
:
:
DoInitialUpdate
(
)
;
ProcessNewLiveRegions
(
)
;
}
