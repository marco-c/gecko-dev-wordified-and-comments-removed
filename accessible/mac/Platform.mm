#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
Platform
.
h
"
#
include
"
ProxyAccessible
.
h
"
#
include
"
DocAccessibleParent
.
h
"
#
include
"
mozTableAccessible
.
h
"
#
include
"
nsAppShell
.
h
"
namespace
mozilla
{
namespace
a11y
{
static
bool
sA11yShouldBeEnabled
=
false
;
bool
ShouldA11yBeEnabled
(
)
{
EPlatformDisabledState
disabledState
=
PlatformDisabledState
(
)
;
return
(
disabledState
=
=
ePlatformIsForceEnabled
)
|
|
(
(
disabledState
=
=
ePlatformIsEnabled
)
&
&
sA11yShouldBeEnabled
)
;
}
void
PlatformInit
(
)
{
}
void
PlatformShutdown
(
)
{
}
void
ProxyCreated
(
ProxyAccessible
*
aProxy
uint32_t
)
{
Class
type
;
if
(
aProxy
-
>
IsTable
(
)
)
type
=
[
mozTableAccessible
class
]
;
else
if
(
aProxy
-
>
IsTableRow
(
)
)
type
=
[
mozTableRowAccessible
class
]
;
else
if
(
aProxy
-
>
IsTableCell
(
)
)
type
=
[
mozTableCellAccessible
class
]
;
else
type
=
GetTypeFromRole
(
aProxy
-
>
Role
(
)
)
;
uintptr_t
accWrap
=
reinterpret_cast
<
uintptr_t
>
(
aProxy
)
|
IS_PROXY
;
mozAccessible
*
mozWrapper
=
[
[
type
alloc
]
initWithAccessible
:
accWrap
]
;
aProxy
-
>
SetWrapper
(
reinterpret_cast
<
uintptr_t
>
(
mozWrapper
)
)
;
mozAccessible
*
nativeParent
=
nullptr
;
if
(
aProxy
-
>
IsDoc
(
)
&
&
aProxy
-
>
AsDoc
(
)
-
>
IsTopLevel
(
)
)
{
Accessible
*
outerDoc
=
aProxy
-
>
OuterDocOfRemoteBrowser
(
)
;
if
(
outerDoc
)
{
nativeParent
=
GetNativeFromGeckoAccessible
(
outerDoc
)
;
}
}
else
{
ProxyAccessible
*
parent
=
aProxy
-
>
Parent
(
)
;
MOZ_ASSERT
(
parent
|
|
(
aProxy
-
>
IsDoc
(
)
&
&
aProxy
-
>
AsDoc
(
)
-
>
IsTopLevelInContentProcess
(
)
)
"
a
non
-
top
-
level
proxy
is
missing
a
parent
?
"
)
;
nativeParent
=
parent
?
GetNativeFromProxy
(
parent
)
:
nullptr
;
}
if
(
nativeParent
)
{
[
nativeParent
invalidateChildren
]
;
}
}
void
ProxyDestroyed
(
ProxyAccessible
*
aProxy
)
{
mozAccessible
*
nativeParent
=
nil
;
if
(
aProxy
-
>
IsDoc
(
)
&
&
aProxy
-
>
AsDoc
(
)
-
>
IsTopLevel
(
)
)
{
Accessible
*
outerDoc
=
aProxy
-
>
OuterDocOfRemoteBrowser
(
)
;
if
(
outerDoc
)
{
nativeParent
=
GetNativeFromGeckoAccessible
(
outerDoc
)
;
}
}
else
{
if
(
!
aProxy
-
>
Document
(
)
-
>
IsShutdown
(
)
)
{
ProxyAccessible
*
parent
=
aProxy
-
>
Parent
(
)
;
if
(
parent
)
{
nativeParent
=
GetNativeFromProxy
(
parent
)
;
}
}
}
mozAccessible
*
wrapper
=
GetNativeFromProxy
(
aProxy
)
;
[
wrapper
expire
]
;
[
wrapper
release
]
;
aProxy
-
>
SetWrapper
(
0
)
;
if
(
nativeParent
)
{
[
nativeParent
invalidateChildren
]
;
}
}
void
ProxyEvent
(
ProxyAccessible
*
aProxy
uint32_t
aEventType
)
{
if
(
aEventType
=
=
nsIAccessibleEvent
:
:
EVENT_REORDER
&
&
aProxy
-
>
ChildrenCount
(
)
=
=
1
&
&
aProxy
-
>
ChildAt
(
0
)
-
>
IsDoc
(
)
)
{
mozAccessible
*
wrapper
=
GetNativeFromProxy
(
aProxy
)
;
if
(
wrapper
)
{
[
wrapper
invalidateChildren
]
;
}
}
if
(
aEventType
!
=
nsIAccessibleEvent
:
:
EVENT_FOCUS
&
&
aEventType
!
=
nsIAccessibleEvent
:
:
EVENT_VALUE_CHANGE
&
&
aEventType
!
=
nsIAccessibleEvent
:
:
EVENT_TEXT_VALUE_CHANGE
&
&
aEventType
!
=
nsIAccessibleEvent
:
:
EVENT_TEXT_CARET_MOVED
&
&
aEventType
!
=
nsIAccessibleEvent
:
:
EVENT_TEXT_SELECTION_CHANGED
)
return
;
mozAccessible
*
wrapper
=
GetNativeFromProxy
(
aProxy
)
;
if
(
wrapper
)
{
[
wrapper
handleAccessibleEvent
:
aEventType
]
;
}
}
void
ProxyStateChangeEvent
(
ProxyAccessible
*
aProxy
uint64_t
aState
bool
aEnabled
)
{
mozAccessible
*
wrapper
=
GetNativeFromProxy
(
aProxy
)
;
if
(
wrapper
)
{
[
wrapper
stateChanged
:
aState
isEnabled
:
aEnabled
]
;
}
}
void
ProxyCaretMoveEvent
(
ProxyAccessible
*
aTarget
int32_t
aOffset
)
{
mozAccessible
*
wrapper
=
GetNativeFromProxy
(
aTarget
)
;
if
(
wrapper
)
{
[
wrapper
handleAccessibleEvent
:
nsIAccessibleEvent
:
:
EVENT_TEXT_CARET_MOVED
]
;
}
}
void
ProxyTextChangeEvent
(
ProxyAccessible
*
const
nsString
&
int32_t
uint32_t
bool
bool
)
{
}
void
ProxyShowHideEvent
(
ProxyAccessible
*
ProxyAccessible
*
bool
bool
)
{
}
void
ProxySelectionEvent
(
ProxyAccessible
*
aTarget
ProxyAccessible
*
aWidget
uint32_t
aEventType
)
{
mozAccessible
*
wrapper
=
GetNativeFromProxy
(
aWidget
)
;
if
(
wrapper
)
{
[
wrapper
handleAccessibleEvent
:
aEventType
]
;
}
}
}
}
interface
GeckoNSApplication
(
a11y
)
-
(
void
)
accessibilitySetValue
:
(
id
)
value
forAttribute
:
(
NSString
*
)
attribute
;
end
implementation
GeckoNSApplication
(
a11y
)
-
(
void
)
accessibilitySetValue
:
(
id
)
value
forAttribute
:
(
NSString
*
)
attribute
{
if
(
[
attribute
isEqualToString
:
"
AXEnhancedUserInterface
"
]
)
mozilla
:
:
a11y
:
:
sA11yShouldBeEnabled
=
(
[
value
intValue
]
=
=
1
)
;
return
[
super
accessibilitySetValue
:
value
forAttribute
:
attribute
]
;
}
end
