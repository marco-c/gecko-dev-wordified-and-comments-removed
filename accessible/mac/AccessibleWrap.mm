#
include
"
DocAccessible
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
Accessible
-
inl
.
h
"
#
include
"
nsAccUtils
.
h
"
#
include
"
Role
.
h
"
#
include
"
gfxPlatform
.
h
"
#
import
"
mozAccessible
.
h
"
#
import
"
mozActionElements
.
h
"
#
import
"
mozHTMLAccessible
.
h
"
#
import
"
mozSelectableElements
.
h
"
#
import
"
mozTableAccessible
.
h
"
#
import
"
mozTextAccessible
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
AccessibleWrap
:
:
AccessibleWrap
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
Accessible
(
aContent
aDoc
)
mNativeObject
(
nil
)
mNativeInited
(
false
)
{
}
AccessibleWrap
:
:
~
AccessibleWrap
(
)
{
}
mozAccessible
*
AccessibleWrap
:
:
GetNativeObject
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
!
mNativeInited
&
&
!
mNativeObject
)
{
Accessible
*
parent
=
Parent
(
)
;
bool
mustBePruned
=
parent
&
&
nsAccUtils
:
:
MustPrune
(
parent
)
;
if
(
!
IsXULTooltip
(
)
&
&
!
IsDefunct
(
)
&
&
!
mustBePruned
)
{
uintptr_t
accWrap
=
reinterpret_cast
<
uintptr_t
>
(
this
)
;
mNativeObject
=
[
[
GetNativeType
(
)
alloc
]
initWithAccessible
:
accWrap
]
;
}
}
mNativeInited
=
true
;
return
mNativeObject
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
void
AccessibleWrap
:
:
GetNativeInterface
(
void
*
*
aOutInterface
)
{
*
aOutInterface
=
static_cast
<
void
*
>
(
GetNativeObject
(
)
)
;
}
Class
AccessibleWrap
:
:
GetNativeType
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
IsXULTabpanels
(
)
)
return
[
mozPaneAccessible
class
]
;
if
(
IsTable
(
)
)
return
[
mozTableAccessible
class
]
;
if
(
IsTableRow
(
)
)
return
[
mozTableRowAccessible
class
]
;
if
(
IsTableCell
(
)
)
return
[
mozTableCellAccessible
class
]
;
return
GetTypeFromRole
(
Role
(
)
)
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
void
AccessibleWrap
:
:
Shutdown
(
)
{
mNativeInited
=
true
;
if
(
mNativeObject
)
{
[
mNativeObject
expire
]
;
[
mNativeObject
release
]
;
mNativeObject
=
nil
;
}
Accessible
:
:
Shutdown
(
)
;
}
nsresult
AccessibleWrap
:
:
HandleAccEvent
(
AccEvent
*
aEvent
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsresult
rv
=
Accessible
:
:
HandleAccEvent
(
aEvent
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
IPCAccessibilityActive
(
)
)
{
return
NS_OK
;
}
uint32_t
eventType
=
aEvent
-
>
GetEventType
(
)
;
mozAccessible
*
nativeAcc
=
nil
;
switch
(
eventType
)
{
case
nsIAccessibleEvent
:
:
EVENT_FOCUS
:
case
nsIAccessibleEvent
:
:
EVENT_VALUE_CHANGE
:
case
nsIAccessibleEvent
:
:
EVENT_TEXT_VALUE_CHANGE
:
case
nsIAccessibleEvent
:
:
EVENT_TEXT_CARET_MOVED
:
case
nsIAccessibleEvent
:
:
EVENT_TEXT_SELECTION_CHANGED
:
case
nsIAccessibleEvent
:
:
EVENT_DOCUMENT_LOAD_COMPLETE
:
case
nsIAccessibleEvent
:
:
EVENT_MENUPOPUP_START
:
case
nsIAccessibleEvent
:
:
EVENT_MENUPOPUP_END
:
case
nsIAccessibleEvent
:
:
EVENT_REORDER
:
if
(
Accessible
*
accessible
=
aEvent
-
>
GetAccessible
(
)
)
{
accessible
-
>
GetNativeInterface
(
(
void
*
*
)
&
nativeAcc
)
;
if
(
!
nativeAcc
)
{
return
NS_ERROR_FAILURE
;
}
}
break
;
case
nsIAccessibleEvent
:
:
EVENT_SELECTION
:
case
nsIAccessibleEvent
:
:
EVENT_SELECTION_ADD
:
case
nsIAccessibleEvent
:
:
EVENT_SELECTION_REMOVE
:
{
AccSelChangeEvent
*
selEvent
=
downcast_accEvent
(
aEvent
)
;
if
(
Accessible
*
accessible
=
selEvent
-
>
Widget
(
)
)
{
accessible
-
>
GetNativeInterface
(
(
void
*
*
)
&
nativeAcc
)
;
if
(
!
nativeAcc
)
{
return
NS_ERROR_FAILURE
;
}
}
break
;
}
case
nsIAccessibleEvent
:
:
EVENT_STATE_CHANGE
:
if
(
Accessible
*
accessible
=
aEvent
-
>
GetAccessible
(
)
)
{
accessible
-
>
GetNativeInterface
(
(
void
*
*
)
&
nativeAcc
)
;
if
(
nativeAcc
)
{
AccStateChangeEvent
*
event
=
downcast_accEvent
(
aEvent
)
;
[
nativeAcc
stateChanged
:
event
-
>
GetState
(
)
isEnabled
:
event
-
>
IsStateEnabled
(
)
]
;
return
NS_OK
;
}
else
{
return
NS_ERROR_FAILURE
;
}
}
break
;
default
:
break
;
}
if
(
nativeAcc
)
{
[
nativeAcc
handleAccessibleEvent
:
eventType
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
Class
a11y
:
:
GetTypeFromRole
(
roles
:
:
Role
aRole
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
switch
(
aRole
)
{
case
roles
:
:
COMBOBOX
:
return
[
mozPopupButtonAccessible
class
]
;
case
roles
:
:
PUSHBUTTON
:
return
[
mozButtonAccessible
class
]
;
case
roles
:
:
PAGETAB
:
return
[
mozTabAccessible
class
]
;
case
roles
:
:
CHECKBUTTON
:
case
roles
:
:
TOGGLE_BUTTON
:
case
roles
:
:
RADIOBUTTON
:
return
[
mozCheckboxAccessible
class
]
;
case
roles
:
:
SPINBUTTON
:
case
roles
:
:
SLIDER
:
return
[
mozIncrementableAccessible
class
]
;
case
roles
:
:
HEADING
:
return
[
mozHeadingAccessible
class
]
;
case
roles
:
:
PAGETABLIST
:
return
[
mozTabGroupAccessible
class
]
;
case
roles
:
:
ENTRY
:
case
roles
:
:
CAPTION
:
case
roles
:
:
ACCEL_LABEL
:
case
roles
:
:
PASSWORD_TEXT
:
return
[
mozTextAccessible
class
]
;
case
roles
:
:
TEXT_LEAF
:
case
roles
:
:
STATICTEXT
:
return
[
mozTextLeafAccessible
class
]
;
case
roles
:
:
LINK
:
return
[
mozLinkAccessible
class
]
;
case
roles
:
:
LISTBOX
:
return
[
mozListboxAccessible
class
]
;
case
roles
:
:
OPTION
:
{
return
[
mozOptionAccessible
class
]
;
}
case
roles
:
:
COMBOBOX_LIST
:
case
roles
:
:
MENUBAR
:
case
roles
:
:
MENUPOPUP
:
{
return
[
mozMenuAccessible
class
]
;
}
case
roles
:
:
COMBOBOX_OPTION
:
case
roles
:
:
PARENT_MENUITEM
:
case
roles
:
:
MENUITEM
:
{
return
[
mozMenuItemAccessible
class
]
;
}
default
:
return
[
mozAccessible
class
]
;
}
return
nil
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
