#
include
"
AccessibleWrap
.
h
"
#
include
"
ProxyAccessible
.
h
"
#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
"
mozAccessibleProtocol
.
h
"
class
mozRootAccessible
;
namespace
mozilla
{
namespace
a11y
{
inline
id
<
mozAccessible
>
GetObjectOrRepresentedView
(
id
<
mozAccessible
>
aObject
)
{
return
[
aObject
hasRepresentedView
]
?
[
aObject
representedView
]
:
aObject
;
}
inline
mozAccessible
*
GetNativeFromGeckoAccessible
(
Accessible
*
aAccessible
)
{
mozAccessible
*
native
=
nil
;
aAccessible
-
>
GetNativeInterface
(
(
void
*
*
)
&
native
)
;
return
native
;
}
inline
mozAccessible
*
GetNativeFromProxy
(
const
ProxyAccessible
*
aProxy
)
{
return
reinterpret_cast
<
mozAccessible
*
>
(
aProxy
-
>
GetWrapper
(
)
)
;
}
}
}
static
const
uintptr_t
IS_PROXY
=
1
;
interface
mozAccessible
:
NSObject
<
mozAccessible
>
{
uintptr_t
mGeckoAccessible
;
mozilla
:
:
a11y
:
:
role
mRole
;
uint64_t
mCachedState
;
}
-
(
mozilla
:
:
a11y
:
:
AccessibleWrap
*
)
getGeckoAccessible
;
-
(
mozilla
:
:
a11y
:
:
ProxyAccessible
*
)
getProxyAccessible
;
-
(
id
)
initWithAccessible
:
(
uintptr_t
)
aGeckoObj
;
-
(
id
<
mozAccessible
>
)
parent
;
-
(
NSArray
*
)
children
;
-
(
NSValue
*
)
size
;
-
(
NSValue
*
)
position
;
-
(
NSString
*
)
role
;
-
(
NSString
*
)
subrole
;
-
(
NSString
*
)
roleDescription
;
-
(
NSWindow
*
)
window
;
-
(
id
)
value
;
-
(
NSString
*
)
title
;
-
(
NSString
*
)
help
;
-
(
NSString
*
)
orientation
;
-
(
BOOL
)
isEnabled
;
-
(
BOOL
)
isFocused
;
-
(
BOOL
)
canBeFocused
;
-
(
BOOL
)
focus
;
-
(
void
)
handleAccessibleEvent
:
(
uint32_t
)
eventType
;
-
(
void
)
postNotification
:
(
NSString
*
)
notification
;
-
(
id
)
childAt
:
(
uint32_t
)
i
;
-
(
uint64_t
)
state
;
-
(
uint64_t
)
stateWithMask
:
(
uint64_t
)
mask
;
-
(
void
)
stateChanged
:
(
uint64_t
)
state
isEnabled
:
(
BOOL
)
enabled
;
-
(
void
)
invalidateState
;
#
pragma
mark
-
-
(
void
)
expire
;
-
(
BOOL
)
isExpired
;
#
ifdef
DEBUG
-
(
void
)
printHierarchy
;
-
(
void
)
printHierarchyWithLevel
:
(
unsigned
)
numSpaces
;
-
(
void
)
sanityCheckChildren
;
-
(
void
)
sanityCheckChildren
:
(
NSArray
*
)
theChildren
;
#
endif
-
(
BOOL
)
isAccessibilityElement
;
-
(
id
)
accessibilityHitTest
:
(
NSPoint
)
point
;
-
(
id
)
accessibilityFocusedUIElement
;
-
(
NSArray
*
)
accessibilityAttributeNames
;
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
;
-
(
NSUInteger
)
accessibilityArrayAttributeCount
:
(
NSString
*
)
attribute
;
-
(
BOOL
)
accessibilityIsAttributeSettable
:
(
NSString
*
)
attribute
;
-
(
void
)
accessibilitySetValue
:
(
id
)
value
forAttribute
:
(
NSString
*
)
attribute
;
end
