#
ifndef
_MozAccessible_H_
#
define
_MozAccessible_H_
#
include
"
AccessibleWrap
.
h
"
#
include
"
RemoteAccessible
.
h
"
#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
"
MOXAccessibleBase
.
h
"
class
mozRootAccessible
;
namespace
mozilla
{
namespace
a11y
{
inline
mozAccessible
*
GetNativeFromGeckoAccessible
(
mozilla
:
:
a11y
:
:
Accessible
*
aAcc
)
{
if
(
!
aAcc
)
{
return
nil
;
}
if
(
LocalAccessible
*
acc
=
aAcc
-
>
AsLocal
(
)
)
{
mozAccessible
*
native
=
nil
;
acc
-
>
GetNativeInterface
(
(
void
*
*
)
&
native
)
;
return
native
;
}
RemoteAccessible
*
proxy
=
aAcc
-
>
AsRemote
(
)
;
return
reinterpret_cast
<
mozAccessible
*
>
(
proxy
-
>
GetWrapper
(
)
)
;
}
enum
CheckedState
{
kUncheckable
=
-
1
kUnchecked
=
0
kChecked
=
1
kMixed
=
2
}
;
}
}
interface
mozAccessible
:
MOXAccessibleBase
{
mozilla
:
:
a11y
:
:
Accessible
*
mGeckoAccessible
;
mozilla
:
:
a11y
:
:
role
mRole
;
uint64_t
mCachedState
;
nsStaticAtom
*
mARIARole
;
bool
mIsLiveRegion
;
}
-
(
id
)
initWithAccessible
:
(
mozilla
:
:
a11y
:
:
Accessible
*
)
aAcc
;
-
(
mozilla
:
:
a11y
:
:
Accessible
*
)
geckoAccessible
;
-
(
mozilla
:
:
a11y
:
:
Accessible
*
)
geckoDocument
;
-
(
void
)
dealloc
;
-
(
BOOL
)
disableChild
:
(
mozAccessible
*
)
child
;
-
(
void
)
handleAccessibleEvent
:
(
uint32_t
)
eventType
;
-
(
void
)
handleAccessibleTextChangeEvent
:
(
NSString
*
)
change
inserted
:
(
BOOL
)
isInserted
inContainer
:
(
mozilla
:
:
a11y
:
:
Accessible
*
)
container
at
:
(
int32_t
)
start
;
-
(
id
)
childAt
:
(
uint32_t
)
i
;
-
(
uint64_t
)
state
;
-
(
uint64_t
)
stateWithMask
:
(
uint64_t
)
mask
;
-
(
void
)
stateChanged
:
(
uint64_t
)
state
isEnabled
:
(
BOOL
)
enabled
;
-
(
void
)
invalidateState
;
-
(
mozAccessible
*
)
topWebArea
;
-
(
void
)
handleRoleChanged
:
(
mozilla
:
:
a11y
:
:
role
)
newRole
;
-
(
nsStaticAtom
*
)
ARIARole
;
-
(
NSArray
<
mozAccessible
*
>
*
)
getRelationsByType
:
(
mozilla
:
:
a11y
:
:
RelationType
)
relationType
;
#
pragma
mark
-
mozAccessible
protocol
/
widget
-
(
BOOL
)
hasRepresentedView
;
-
(
id
)
representedView
;
-
(
BOOL
)
isRoot
;
#
pragma
mark
-
MOXAccessible
protocol
-
(
BOOL
)
moxBlockSelector
:
(
SEL
)
selector
;
-
(
id
)
moxHitTest
:
(
NSPoint
)
point
;
-
(
id
)
moxFocusedUIElement
;
-
(
id
<
MOXTextMarkerSupport
>
)
moxTextMarkerDelegate
;
-
(
BOOL
)
moxIsLiveRegion
;
-
(
id
<
mozAccessible
>
)
moxParent
;
-
(
NSArray
*
)
moxChildren
;
-
(
NSValue
*
)
moxSize
;
-
(
NSValue
*
)
moxPosition
;
-
(
NSString
*
)
moxRole
;
-
(
NSString
*
)
moxSubrole
;
-
(
NSString
*
)
moxRoleDescription
;
-
(
NSWindow
*
)
moxWindow
;
-
(
id
)
moxValue
;
-
(
NSString
*
)
moxTitle
;
-
(
NSString
*
)
moxLabel
;
-
(
NSString
*
)
moxHelp
;
-
(
NSNumber
*
)
moxEnabled
;
-
(
NSNumber
*
)
moxFocused
;
-
(
NSNumber
*
)
moxSelected
;
-
(
NSNumber
*
)
moxExpanded
;
-
(
NSValue
*
)
moxFrame
;
-
(
NSString
*
)
moxARIACurrent
;
-
(
NSNumber
*
)
moxARIAAtomic
;
-
(
NSString
*
)
moxARIALive
;
-
(
NSString
*
)
moxARIARelevant
;
-
(
id
)
moxTitleUIElement
;
-
(
NSString
*
)
moxDOMIdentifier
;
-
(
NSNumber
*
)
moxRequired
;
-
(
NSNumber
*
)
moxElementBusy
;
-
(
NSArray
*
)
moxLinkedUIElements
;
-
(
NSArray
*
)
moxARIAControls
;
-
(
id
)
moxEditableAncestor
;
-
(
id
)
moxHighestEditableAncestor
;
-
(
id
)
moxFocusableAncestor
;
#
ifndef
RELEASE_OR_BETA
-
(
NSString
*
)
moxMozDebugDescription
;
#
endif
-
(
NSArray
*
)
moxUIElementsForSearchPredicate
:
(
NSDictionary
*
)
searchPredicate
;
-
(
NSNumber
*
)
moxUIElementCountForSearchPredicate
:
(
NSDictionary
*
)
searchPredicate
;
-
(
void
)
moxSetFocused
:
(
NSNumber
*
)
focused
;
-
(
void
)
moxPerformScrollToVisible
;
-
(
void
)
moxPerformShowMenu
;
-
(
void
)
moxPerformPress
;
-
(
BOOL
)
moxIgnoreWithParent
:
(
mozAccessible
*
)
parent
;
-
(
BOOL
)
moxIgnoreChild
:
(
mozAccessible
*
)
child
;
#
pragma
mark
-
-
(
void
)
expire
;
-
(
BOOL
)
isExpired
;
end
#
endif
