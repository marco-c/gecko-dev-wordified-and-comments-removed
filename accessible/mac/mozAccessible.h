#
include
"
AccessibleWrap
.
h
"
#
include
"
ProxyAccessible
.
h
"
#
include
"
AccessibleOrProxy
.
h
"
#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
"
MOXAccessibleBase
.
h
"
class
mozRootAccessible
;
namespace
mozilla
{
namespace
a11y
{
inline
mozAccessible
*
GetNativeFromGeckoAccessible
(
mozilla
:
:
a11y
:
:
AccessibleOrProxy
aAccOrProxy
)
{
MOZ_ASSERT
(
!
aAccOrProxy
.
IsNull
(
)
"
Cannot
get
native
from
null
accessible
"
)
;
if
(
Accessible
*
acc
=
aAccOrProxy
.
AsAccessible
(
)
)
{
mozAccessible
*
native
=
nil
;
acc
-
>
GetNativeInterface
(
(
void
*
*
)
&
native
)
;
return
native
;
}
ProxyAccessible
*
proxy
=
aAccOrProxy
.
AsProxy
(
)
;
return
reinterpret_cast
<
mozAccessible
*
>
(
proxy
-
>
GetWrapper
(
)
)
;
}
}
}
interface
mozAccessible
:
MOXAccessibleBase
{
mozilla
:
:
a11y
:
:
AccessibleOrProxy
mGeckoAccessible
;
mozilla
:
:
a11y
:
:
role
mRole
;
uint64_t
mCachedState
;
}
-
(
id
)
initWithAccessible
:
(
mozilla
:
:
a11y
:
:
AccessibleOrProxy
)
aAccOrProxy
;
-
(
mozilla
:
:
a11y
:
:
AccessibleOrProxy
)
geckoAccessible
;
-
(
id
<
mozAccessible
>
)
parent
;
-
(
NSArray
*
)
children
;
-
(
NSValue
*
)
size
;
-
(
NSValue
*
)
position
;
-
(
NSString
*
)
role
;
-
(
NSString
*
)
subrole
;
-
(
NSString
*
)
roleDescription
;
-
(
NSWindow
*
)
window
;
-
(
id
)
value
;
-
(
NSString
*
)
title
;
-
(
NSString
*
)
help
;
-
(
NSString
*
)
orientation
;
-
(
BOOL
)
isEnabled
;
-
(
BOOL
)
disableChild
:
(
mozAccessible
*
)
child
;
-
(
BOOL
)
isFocused
;
-
(
BOOL
)
canBeFocused
;
-
(
BOOL
)
focus
;
-
(
void
)
handleAccessibleEvent
:
(
uint32_t
)
eventType
;
-
(
id
)
childAt
:
(
uint32_t
)
i
;
-
(
uint64_t
)
state
;
-
(
uint64_t
)
stateWithMask
:
(
uint64_t
)
mask
;
-
(
void
)
stateChanged
:
(
uint64_t
)
state
isEnabled
:
(
BOOL
)
enabled
;
-
(
void
)
invalidateState
;
-
(
BOOL
)
ignoreWithParent
:
(
mozAccessible
*
)
parent
;
-
(
BOOL
)
ignoreChild
:
(
mozAccessible
*
)
child
;
#
pragma
mark
-
-
(
void
)
expire
;
-
(
BOOL
)
isExpired
;
-
(
id
)
moxHitTest
:
(
NSPoint
)
point
;
-
(
id
)
moxFocusedUIElement
;
-
(
BOOL
)
isAccessibilityElement
;
-
(
NSArray
*
)
accessibilityAttributeNames
;
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
;
-
(
BOOL
)
accessibilityIsAttributeSettable
:
(
NSString
*
)
attribute
;
-
(
void
)
accessibilitySetValue
:
(
id
)
value
forAttribute
:
(
NSString
*
)
attribute
;
end
