#
include
"
RootAccessibleWrap
.
h
"
#
import
"
mozRootAccessible
.
h
"
#
import
"
mozView
.
h
"
#
include
"
nsObjCExceptions
.
h
"
using
namespace
mozilla
:
:
a11y
;
static
id
<
mozAccessible
mozView
>
getNativeViewFromRootAccessible
(
Accessible
*
aAccessible
)
{
RootAccessibleWrap
*
root
=
static_cast
<
RootAccessibleWrap
*
>
(
aAccessible
-
>
AsRoot
(
)
)
;
id
<
mozAccessible
mozView
>
nativeView
=
nil
;
root
-
>
GetNativeWidget
(
(
void
*
*
)
&
nativeView
)
;
return
nativeView
;
}
#
pragma
mark
-
implementation
mozRootAccessible
-
(
id
)
initWithAccessible
:
(
uintptr_t
)
aGeckoAccessible
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
NSAssert
(
(
aGeckoAccessible
&
IS_PROXY
)
=
=
0
"
mozRootAccessible
is
never
a
proxy
"
)
;
mParallelView
=
getNativeViewFromRootAccessible
(
(
Accessible
*
)
aGeckoAccessible
)
;
return
[
super
initWithAccessible
:
aGeckoAccessible
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
NSArray
*
)
accessibilityAttributeNames
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
!
[
self
getGeckoAccessible
]
)
return
[
NSArray
array
]
;
static
NSMutableArray
*
attributes
=
nil
;
if
(
!
attributes
)
{
attributes
=
[
[
super
accessibilityAttributeNames
]
mutableCopy
]
;
[
attributes
addObject
:
NSAccessibilityMainAttribute
]
;
[
attributes
addObject
:
NSAccessibilityMinimizedAttribute
]
;
}
return
attributes
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
id
)
accessibilityAttributeValue
:
(
NSString
*
)
attribute
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
[
attribute
isEqualToString
:
NSAccessibilityMainAttribute
]
)
return
[
NSNumber
numberWithBool
:
[
[
self
window
]
isMainWindow
]
]
;
if
(
[
attribute
isEqualToString
:
NSAccessibilityMinimizedAttribute
]
)
return
[
NSNumber
numberWithBool
:
[
[
self
window
]
isMiniaturized
]
]
;
return
[
super
accessibilityAttributeValue
:
attribute
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
id
)
parent
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
if
(
!
mParallelView
)
mParallelView
=
(
id
<
mozView
mozAccessible
>
)
[
self
representedView
]
;
if
(
mParallelView
)
return
[
mParallelView
accessibilityAttributeValue
:
NSAccessibilityParentAttribute
]
;
NSAssert
(
mParallelView
"
we
'
re
a
root
accessible
w
/
o
native
view
?
"
)
;
return
[
super
parent
]
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
BOOL
)
hasRepresentedView
{
return
YES
;
}
-
(
id
)
representedView
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
;
NSAssert
(
mParallelView
"
root
accessible
does
not
have
a
native
parallel
view
.
"
)
;
return
mParallelView
;
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
;
}
-
(
BOOL
)
isRoot
{
return
YES
;
}
end
