#
include
"
RootAccessibleWrap
.
h
"
#
import
"
mozRootAccessible
.
h
"
#
import
"
mozView
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
nsObjCExceptions
.
h
"
using
namespace
mozilla
:
:
a11y
;
static
id
<
mozAccessible
mozView
>
getNativeViewFromRootAccessible
(
LocalAccessible
*
aAccessible
)
{
RootAccessibleWrap
*
root
=
static_cast
<
RootAccessibleWrap
*
>
(
aAccessible
-
>
AsRoot
(
)
)
;
id
<
mozAccessible
mozView
>
nativeView
=
nil
;
root
-
>
GetNativeWidget
(
(
void
*
*
)
&
nativeView
)
;
return
nativeView
;
}
#
pragma
mark
-
implementation
mozRootAccessible
-
(
id
)
initWithAccessible
:
(
mozilla
:
:
a11y
:
:
Accessible
*
)
aAcc
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
MOZ_ASSERT
(
!
aAcc
-
>
IsRemote
(
)
"
mozRootAccessible
is
never
a
proxy
"
)
;
mParallelView
=
getNativeViewFromRootAccessible
(
aAcc
-
>
AsLocal
(
)
)
;
return
[
super
initWithAccessible
:
aAcc
]
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
-
(
NSNumber
*
)
moxMain
{
return
(
[
[
self
moxWindow
]
isMainWindow
]
)
;
}
-
(
NSNumber
*
)
moxMinimized
{
return
(
[
[
self
moxWindow
]
isMiniaturized
]
)
;
}
-
(
id
)
moxUnignoredParent
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
return
[
[
self
representedView
]
accessibilityAttributeValue
:
NSAccessibilityParentAttribute
]
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
-
(
BOOL
)
hasRepresentedView
{
return
YES
;
}
-
(
id
)
representedView
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
MOZ_ASSERT
(
mParallelView
|
|
gfxPlatform
:
:
IsHeadless
(
)
"
root
accessible
does
not
have
a
native
parallel
view
.
"
)
;
return
mParallelView
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
-
(
BOOL
)
isRoot
{
return
YES
;
}
end
