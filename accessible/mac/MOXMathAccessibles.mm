#
import
"
MOXMathAccessibles
.
h
"
#
import
"
MacUtils
.
h
"
using
namespace
mozilla
:
:
a11y
;
implementation
MOXMathRootAccessible
-
(
id
)
moxMathRootRadicand
{
return
[
self
childAt
:
0
]
;
}
-
(
id
)
moxMathRootIndex
{
return
[
self
childAt
:
1
]
;
}
end
implementation
MOXMathSquareRootAccessible
-
(
id
)
moxMathRootRadicand
{
return
[
self
childAt
:
0
]
;
}
end
implementation
MOXMathFractionAccessible
-
(
id
)
moxMathFractionNumerator
{
return
[
self
childAt
:
0
]
;
}
-
(
id
)
moxMathFractionDenominator
{
return
[
self
childAt
:
1
]
;
}
-
(
NSNumber
*
)
moxMathLineThickness
{
if
(
NSString
*
thickness
=
utils
:
:
GetAccAttr
(
self
nsGkAtoms
:
:
linethickness_
)
)
{
NSNumberFormatter
*
formatter
=
[
[
[
NSNumberFormatter
alloc
]
init
]
autorelease
]
;
NSNumber
*
value
=
[
formatter
numberFromString
:
thickness
]
;
return
[
NSNumber
numberWithBool
:
[
value
boolValue
]
]
;
}
else
{
return
[
NSNumber
numberWithInteger
:
0
]
;
}
}
end
implementation
MOXMathSubSupAccessible
-
(
id
)
moxMathBase
{
return
[
self
childAt
:
0
]
;
}
-
(
id
)
moxMathSubscript
{
if
(
mRole
=
=
roles
:
:
MATHML_SUP
)
{
return
nil
;
}
return
[
self
childAt
:
1
]
;
}
-
(
id
)
moxMathSuperscript
{
if
(
mRole
=
=
roles
:
:
MATHML_SUB
)
{
return
nil
;
}
return
[
self
childAt
:
mRole
=
=
roles
:
:
MATHML_SUP
?
1
:
2
]
;
}
end
implementation
MOXMathUnderOverAccessible
-
(
id
)
moxMathBase
{
return
[
self
childAt
:
0
]
;
}
-
(
id
)
moxMathUnder
{
if
(
mRole
=
=
roles
:
:
MATHML_OVER
)
{
return
nil
;
}
return
[
self
childAt
:
1
]
;
}
-
(
id
)
moxMathOver
{
if
(
mRole
=
=
roles
:
:
MATHML_UNDER
)
{
return
nil
;
}
return
[
self
childAt
:
mRole
=
=
roles
:
:
MATHML_OVER
?
1
:
2
]
;
}
end
