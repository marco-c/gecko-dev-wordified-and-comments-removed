#
import
"
RotorRules
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
DocAccessibleParent
.
h
"
using
namespace
mozilla
:
:
a11y
;
RotorRule
:
:
RotorRule
(
Accessible
*
aDirectDescendantsFrom
)
:
mDirectDescendantsFrom
(
aDirectDescendantsFrom
)
{
}
RotorRule
:
:
RotorRule
(
)
:
mDirectDescendantsFrom
(
nullptr
)
{
}
uint16_t
RotorRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE
;
if
(
nsAccUtils
:
:
MustPrune
(
aAcc
)
)
{
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE_SUBTREE
;
}
if
(
mDirectDescendantsFrom
&
&
(
aAcc
!
=
mDirectDescendantsFrom
)
)
{
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE_SUBTREE
;
}
if
(
[
GetNativeFromGeckoAccessible
(
aAcc
)
isAccessibilityElement
]
)
{
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
return
result
;
}
RotorRoleRule
:
:
RotorRoleRule
(
role
aRole
Accessible
*
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
mRole
(
aRole
)
{
}
;
RotorRoleRule
:
:
RotorRoleRule
(
role
aRole
)
:
RotorRule
(
)
mRole
(
aRole
)
{
}
;
uint16_t
RotorRoleRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
&
&
aAcc
-
>
Role
(
)
!
=
mRole
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
return
result
;
}
RotorMacRoleRule
:
:
RotorMacRoleRule
(
NSString
*
aMacRole
Accessible
*
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
mMacRole
(
aMacRole
)
{
[
mMacRole
retain
]
;
}
;
RotorMacRoleRule
:
:
RotorMacRoleRule
(
NSString
*
aMacRole
)
:
RotorRule
(
)
mMacRole
(
aMacRole
)
{
[
mMacRole
retain
]
;
}
;
RotorMacRoleRule
:
:
~
RotorMacRoleRule
(
)
{
[
mMacRole
release
]
;
}
uint16_t
RotorMacRoleRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAcc
)
;
if
(
!
[
[
nativeMatch
moxRole
]
isEqualToString
:
mMacRole
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorControlRule
:
:
RotorControlRule
(
Accessible
*
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
{
}
;
RotorControlRule
:
:
RotorControlRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
RotorControlRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
switch
(
aAcc
-
>
Role
(
)
)
{
case
roles
:
:
PUSHBUTTON
:
case
roles
:
:
SPINBUTTON
:
case
roles
:
:
DETAILS
:
case
roles
:
:
CHECKBUTTON
:
case
roles
:
:
COLOR_CHOOSER
:
case
roles
:
:
BUTTONDROPDOWNGRID
:
case
roles
:
:
LISTBOX
:
case
roles
:
:
COMBOBOX
:
case
roles
:
:
EDITCOMBOBOX
:
case
roles
:
:
RADIOBUTTON
:
case
roles
:
:
RADIO_GROUP
:
case
roles
:
:
PAGETAB
:
case
roles
:
:
SLIDER
:
case
roles
:
:
SWITCH
:
case
roles
:
:
ENTRY
:
case
roles
:
:
OUTLINE
:
case
roles
:
:
PASSWORD_TEXT
:
case
roles
:
:
BUTTONMENU
:
return
result
;
case
roles
:
:
DATE_EDITOR
:
case
roles
:
:
TIME_EDITOR
:
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE_SUBTREE
;
return
result
;
case
roles
:
:
GROUPING
:
{
for
(
unsigned
int
i
=
0
;
i
<
aAcc
-
>
ChildCount
(
)
;
i
+
+
)
{
Accessible
*
currChild
=
aAcc
-
>
ChildAt
(
i
)
;
if
(
currChild
-
>
Role
(
)
=
=
roles
:
:
CHECKBUTTON
|
|
currChild
-
>
Role
(
)
=
=
roles
:
:
SWITCH
|
|
currChild
-
>
Role
(
)
=
=
roles
:
:
SPINBUTTON
|
|
currChild
-
>
Role
(
)
=
=
roles
:
:
RADIOBUTTON
)
{
return
result
;
}
}
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
return
result
;
}
default
:
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorTextEntryRule
:
:
RotorTextEntryRule
(
Accessible
*
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
{
}
;
RotorTextEntryRule
:
:
RotorTextEntryRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
RotorTextEntryRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
if
(
aAcc
-
>
Role
(
)
!
=
roles
:
:
PASSWORD_TEXT
&
&
aAcc
-
>
Role
(
)
!
=
roles
:
:
ENTRY
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorLinkRule
:
:
RotorLinkRule
(
Accessible
*
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
{
}
;
RotorLinkRule
:
:
RotorLinkRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
RotorLinkRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAcc
)
;
if
(
!
[
[
nativeMatch
moxRole
]
isEqualToString
:
"
AXLink
"
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorVisitedLinkRule
:
:
RotorVisitedLinkRule
(
)
:
RotorLinkRule
(
)
{
}
RotorVisitedLinkRule
:
:
RotorVisitedLinkRule
(
Accessible
*
aDirectDescendantsFrom
)
:
RotorLinkRule
(
aDirectDescendantsFrom
)
{
}
uint16_t
RotorVisitedLinkRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorLinkRule
:
:
Match
(
aAcc
)
;
if
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAcc
)
;
if
(
!
[
[
nativeMatch
moxVisited
]
boolValue
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorUnvisitedLinkRule
:
:
RotorUnvisitedLinkRule
(
)
:
RotorLinkRule
(
)
{
}
RotorUnvisitedLinkRule
:
:
RotorUnvisitedLinkRule
(
Accessible
*
aDirectDescendantsFrom
)
:
RotorLinkRule
(
aDirectDescendantsFrom
)
{
}
uint16_t
RotorUnvisitedLinkRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorLinkRule
:
:
Match
(
aAcc
)
;
if
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAcc
)
;
if
(
[
[
nativeMatch
moxVisited
]
boolValue
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorNotMacRoleRule
:
:
RotorNotMacRoleRule
(
NSString
*
aMacRole
Accessible
*
aDirectDescendantsFrom
)
:
RotorMacRoleRule
(
aMacRole
aDirectDescendantsFrom
)
{
}
RotorNotMacRoleRule
:
:
RotorNotMacRoleRule
(
NSString
*
aMacRole
)
:
RotorMacRoleRule
(
aMacRole
)
{
}
uint16_t
RotorNotMacRoleRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAcc
)
;
if
(
[
[
nativeMatch
moxRole
]
isEqualToString
:
mMacRole
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorStaticTextRule
:
:
RotorStaticTextRule
(
Accessible
*
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
{
}
;
RotorStaticTextRule
:
:
RotorStaticTextRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
RotorStaticTextRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAcc
)
;
if
(
!
[
[
nativeMatch
moxRole
]
isEqualToString
:
"
AXStaticText
"
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorHeadingLevelRule
:
:
RotorHeadingLevelRule
(
int32_t
aLevel
Accessible
*
aDirectDescendantsFrom
)
:
RotorRoleRule
(
roles
:
:
HEADING
aDirectDescendantsFrom
)
mLevel
(
aLevel
)
{
}
;
RotorHeadingLevelRule
:
:
RotorHeadingLevelRule
(
int32_t
aLevel
)
:
RotorRoleRule
(
roles
:
:
HEADING
)
mLevel
(
aLevel
)
{
}
;
uint16_t
RotorHeadingLevelRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRoleRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
int32_t
currLevel
=
aAcc
-
>
GroupPosition
(
)
.
level
;
if
(
currLevel
!
=
mLevel
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
uint16_t
RotorLiveRegionRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAcc
)
;
if
(
!
[
nativeMatch
moxIsLiveRegion
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
OutlineRule
:
:
OutlineRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
OutlineRule
:
:
Match
(
Accessible
*
aAcc
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAcc
)
;
if
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
{
if
(
aAcc
-
>
Role
(
)
=
=
roles
:
:
OUTLINE
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE_SUBTREE
;
}
else
if
(
aAcc
-
>
Role
(
)
!
=
roles
:
:
OUTLINEITEM
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
