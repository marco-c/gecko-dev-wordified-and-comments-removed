#
import
"
RotorRules
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
DocAccessibleParent
.
h
"
using
namespace
mozilla
:
:
a11y
;
RotorRule
:
:
RotorRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
mDirectDescendantsFrom
(
aDirectDescendantsFrom
)
{
}
RotorRule
:
:
RotorRule
(
)
:
mDirectDescendantsFrom
(
nullptr
)
{
}
uint16_t
RotorRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE
;
if
(
nsAccUtils
:
:
MustPrune
(
aAccOrProxy
)
)
{
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE_SUBTREE
;
}
if
(
!
mDirectDescendantsFrom
.
IsNull
(
)
&
&
(
aAccOrProxy
!
=
mDirectDescendantsFrom
)
)
{
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE_SUBTREE
;
}
if
(
[
GetNativeFromGeckoAccessible
(
aAccOrProxy
)
isAccessibilityElement
]
)
{
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
return
result
;
}
RotorRoleRule
:
:
RotorRoleRule
(
role
aRole
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
mRole
(
aRole
)
{
}
;
RotorRoleRule
:
:
RotorRoleRule
(
role
aRole
)
:
RotorRule
(
)
mRole
(
aRole
)
{
}
;
uint16_t
RotorRoleRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAccOrProxy
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
&
&
aAccOrProxy
.
Role
(
)
!
=
mRole
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
return
result
;
}
RotorControlRule
:
:
RotorControlRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
{
}
;
RotorControlRule
:
:
RotorControlRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
RotorControlRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAccOrProxy
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
switch
(
aAccOrProxy
.
Role
(
)
)
{
case
roles
:
:
PUSHBUTTON
:
case
roles
:
:
SPINBUTTON
:
case
roles
:
:
DETAILS
:
case
roles
:
:
CHECKBUTTON
:
case
roles
:
:
COLOR_CHOOSER
:
case
roles
:
:
BUTTONDROPDOWNGRID
:
case
roles
:
:
LISTBOX
:
case
roles
:
:
COMBOBOX
:
case
roles
:
:
EDITCOMBOBOX
:
case
roles
:
:
RADIOBUTTON
:
case
roles
:
:
RADIO_GROUP
:
case
roles
:
:
PAGETAB
:
case
roles
:
:
SLIDER
:
case
roles
:
:
SWITCH
:
case
roles
:
:
ENTRY
:
case
roles
:
:
OUTLINE
:
case
roles
:
:
PASSWORD_TEXT
:
return
result
;
case
roles
:
:
DATE_EDITOR
:
case
roles
:
:
TIME_EDITOR
:
result
|
=
nsIAccessibleTraversalRule
:
:
FILTER_IGNORE_SUBTREE
;
return
result
;
case
roles
:
:
GROUPING
:
{
for
(
unsigned
int
i
=
0
;
i
<
aAccOrProxy
.
ChildCount
(
)
;
i
+
+
)
{
AccessibleOrProxy
currChild
=
aAccOrProxy
.
ChildAt
(
i
)
;
if
(
currChild
.
Role
(
)
=
=
roles
:
:
CHECKBUTTON
|
|
currChild
.
Role
(
)
=
=
roles
:
:
SWITCH
|
|
currChild
.
Role
(
)
=
=
roles
:
:
SPINBUTTON
|
|
currChild
.
Role
(
)
=
=
roles
:
:
RADIOBUTTON
)
{
return
result
;
}
}
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
return
result
;
}
default
:
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorLinkRule
:
:
RotorLinkRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
{
}
;
RotorLinkRule
:
:
RotorLinkRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
RotorLinkRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAccOrProxy
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAccOrProxy
)
;
if
(
!
[
[
nativeMatch
moxRole
]
isEqualToString
:
"
AXLink
"
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorVisitedLinkRule
:
:
RotorVisitedLinkRule
(
)
:
RotorLinkRule
(
)
{
}
RotorVisitedLinkRule
:
:
RotorVisitedLinkRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
RotorLinkRule
(
aDirectDescendantsFrom
)
{
}
uint16_t
RotorVisitedLinkRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
RotorLinkRule
:
:
Match
(
aAccOrProxy
)
;
if
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAccOrProxy
)
;
if
(
!
[
[
nativeMatch
moxVisited
]
boolValue
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorUnvisitedLinkRule
:
:
RotorUnvisitedLinkRule
(
)
:
RotorLinkRule
(
)
{
}
RotorUnvisitedLinkRule
:
:
RotorUnvisitedLinkRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
RotorLinkRule
(
aDirectDescendantsFrom
)
{
}
uint16_t
RotorUnvisitedLinkRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
RotorLinkRule
:
:
Match
(
aAccOrProxy
)
;
if
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAccOrProxy
)
;
if
(
[
[
nativeMatch
moxVisited
]
boolValue
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorStaticTextRule
:
:
RotorStaticTextRule
(
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
RotorRule
(
aDirectDescendantsFrom
)
{
}
;
RotorStaticTextRule
:
:
RotorStaticTextRule
(
)
:
RotorRule
(
)
{
}
;
uint16_t
RotorStaticTextRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
RotorRule
:
:
Match
(
aAccOrProxy
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
mozAccessible
*
nativeMatch
=
GetNativeFromGeckoAccessible
(
aAccOrProxy
)
;
if
(
!
[
[
nativeMatch
moxRole
]
isEqualToString
:
"
AXStaticText
"
]
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
RotorHeadingLevelRule
:
:
RotorHeadingLevelRule
(
int32_t
aLevel
AccessibleOrProxy
&
aDirectDescendantsFrom
)
:
RotorRoleRule
(
roles
:
:
HEADING
aDirectDescendantsFrom
)
mLevel
(
aLevel
)
{
}
;
RotorHeadingLevelRule
:
:
RotorHeadingLevelRule
(
int32_t
aLevel
)
:
RotorRoleRule
(
roles
:
:
HEADING
)
mLevel
(
aLevel
)
{
}
;
uint16_t
RotorHeadingLevelRule
:
:
Match
(
const
AccessibleOrProxy
&
aAccOrProxy
)
{
uint16_t
result
=
RotorRoleRule
:
:
Match
(
aAccOrProxy
)
;
if
(
(
result
&
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
)
)
{
int32_t
currLevel
=
0
;
if
(
Accessible
*
acc
=
aAccOrProxy
.
AsAccessible
(
)
)
{
currLevel
=
acc
-
>
GroupPosition
(
)
.
level
;
}
else
if
(
ProxyAccessible
*
proxy
=
aAccOrProxy
.
AsProxy
(
)
)
{
currLevel
=
proxy
-
>
GroupPosition
(
)
.
level
;
}
if
(
currLevel
!
=
mLevel
)
{
result
&
=
~
nsIAccessibleTraversalRule
:
:
FILTER_MATCH
;
}
}
return
result
;
}
