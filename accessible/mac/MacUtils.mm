#
import
"
MacUtils
.
h
"
#
include
"
LocalAccessible
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
mozilla
/
a11y
/
PDocAccessible
.
h
"
namespace
mozilla
{
namespace
a11y
{
namespace
utils
{
NSArray
<
mozAccessible
*
>
*
ConvertToNSArray
(
nsTArray
<
LocalAccessible
*
>
&
aArray
)
{
NSMutableArray
*
nativeArray
=
[
[
[
NSMutableArray
alloc
]
init
]
autorelease
]
;
size_t
totalCount
=
aArray
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
totalCount
;
i
+
+
)
{
LocalAccessible
*
curAccessible
=
aArray
.
ElementAt
(
i
)
;
mozAccessible
*
curNative
=
GetNativeFromGeckoAccessible
(
curAccessible
)
;
if
(
curNative
)
[
nativeArray
addObject
:
GetObjectOrRepresentedView
(
curNative
)
]
;
}
return
nativeArray
;
}
NSArray
<
mozAccessible
*
>
*
ConvertToNSArray
(
nsTArray
<
RemoteAccessible
*
>
&
aArray
)
{
NSMutableArray
*
nativeArray
=
[
[
[
NSMutableArray
alloc
]
init
]
autorelease
]
;
size_t
totalCount
=
aArray
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
totalCount
;
i
+
+
)
{
RemoteAccessible
*
curAccessible
=
aArray
.
ElementAt
(
i
)
;
mozAccessible
*
curNative
=
GetNativeFromGeckoAccessible
(
curAccessible
)
;
if
(
curNative
)
[
nativeArray
addObject
:
GetObjectOrRepresentedView
(
curNative
)
]
;
}
return
nativeArray
;
}
NSString
*
LocalizedString
(
const
nsString
&
aString
)
{
nsString
text
;
Accessible
:
:
TranslateString
(
aString
text
)
;
return
text
.
IsEmpty
(
)
?
nil
:
nsCocoaUtils
:
:
ToNSString
(
text
)
;
}
NSString
*
GetAccAttr
(
mozAccessible
*
aNativeAccessible
nsAtom
*
aAttrName
)
{
nsAutoString
result
;
Accessible
*
acc
=
[
aNativeAccessible
geckoAccessible
]
;
RefPtr
<
AccAttributes
>
attributes
=
acc
-
>
Attributes
(
)
;
if
(
!
attributes
)
{
return
nil
;
}
attributes
-
>
GetAttribute
(
aAttrName
result
)
;
if
(
!
result
.
IsEmpty
(
)
)
{
return
nsCocoaUtils
:
:
ToNSString
(
result
)
;
}
return
nil
;
}
}
}
}
