#
ifndef
_GeckoTextMarker_H_
#
define
_GeckoTextMarker_H_
typedef
CFTypeRef
AXTextMarkerRef
;
typedef
CFTypeRef
AXTextMarkerRangeRef
;
namespace
mozilla
{
namespace
a11y
{
class
AccessibleOrProxy
;
class
GeckoTextMarker
final
{
public
:
GeckoTextMarker
(
const
AccessibleOrProxy
&
aContainer
int32_t
aOffset
)
:
mContainer
(
aContainer
)
mOffset
(
aOffset
)
{
}
GeckoTextMarker
(
const
GeckoTextMarker
&
aPoint
)
:
mContainer
(
aPoint
.
mContainer
)
mOffset
(
aPoint
.
mOffset
)
{
}
GeckoTextMarker
(
AccessibleOrProxy
aDoc
AXTextMarkerRef
aTextMarker
)
;
GeckoTextMarker
(
)
:
mContainer
(
nullptr
)
mOffset
(
0
)
{
}
id
CreateAXTextMarker
(
)
;
bool
operator
<
(
const
GeckoTextMarker
&
aPoint
)
const
;
AccessibleOrProxy
mContainer
;
int32_t
mOffset
;
}
;
class
GeckoTextMarkerRange
final
{
public
:
GeckoTextMarkerRange
(
const
GeckoTextMarker
&
aStart
const
GeckoTextMarker
&
aEnd
)
:
mStart
(
aStart
)
mEnd
(
aEnd
)
{
}
GeckoTextMarkerRange
(
AccessibleOrProxy
aDoc
AXTextMarkerRangeRef
aTextMarkerRange
)
;
id
CreateAXTextMarkerRange
(
)
;
bool
IsValid
(
)
const
{
return
!
mStart
.
mContainer
.
IsNull
(
)
&
&
!
mEnd
.
mContainer
.
IsNull
(
)
;
}
;
NSString
*
Text
(
)
const
;
GeckoTextMarker
mStart
;
GeckoTextMarker
mEnd
;
private
:
int32_t
StartOffset
(
const
AccessibleOrProxy
&
aChild
)
const
;
int32_t
EndOffset
(
const
AccessibleOrProxy
&
aChild
)
const
;
int32_t
LinkCount
(
const
AccessibleOrProxy
&
aContainer
)
const
;
AccessibleOrProxy
LinkAt
(
const
AccessibleOrProxy
&
aContainer
uint32_t
aIndex
)
const
;
void
AppendTextTo
(
const
AccessibleOrProxy
&
aContainer
nsAString
&
aText
uint32_t
aStartOffset
uint32_t
aEndOffset
)
const
;
bool
TextInternal
(
nsAString
&
aText
AccessibleOrProxy
aCurrent
int32_t
aStartIntlOffset
)
const
;
}
;
}
}
#
endif
