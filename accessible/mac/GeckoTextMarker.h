#
ifndef
_GeckoTextMarker_H_
#
define
_GeckoTextMarker_H_
#
include
<
Foundation
/
Foundation
.
h
>
#
import
"
LegacyTextMarker
.
h
"
#
import
"
CachedTextMarker
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
Accessible
;
class
GeckoTextMarkerRange
;
class
GeckoTextMarker
{
public
:
GeckoTextMarker
(
)
;
GeckoTextMarker
(
const
GeckoTextMarker
&
aOther
)
{
mLegacy
=
aOther
.
mLegacy
;
if
(
mLegacy
)
{
mLegacyTextMarker
=
aOther
.
mLegacyTextMarker
;
}
else
{
mCachedTextMarker
=
aOther
.
mCachedTextMarker
;
}
}
explicit
GeckoTextMarker
(
const
LegacyTextMarker
&
aTextMarker
)
:
mLegacy
(
true
)
mLegacyTextMarker
(
aTextMarker
)
{
}
explicit
GeckoTextMarker
(
const
CachedTextMarker
&
aTextMarker
)
:
mLegacy
(
false
)
mCachedTextMarker
(
aTextMarker
)
{
}
explicit
GeckoTextMarker
(
const
TextLeafPoint
&
aTextLeafPoint
)
:
mLegacy
(
false
)
mCachedTextMarker
(
aTextLeafPoint
)
{
}
GeckoTextMarker
(
Accessible
*
aContainer
int32_t
aOffset
)
;
static
GeckoTextMarker
MarkerFromAXTextMarker
(
Accessible
*
aDoc
AXTextMarkerRef
aTextMarker
)
;
static
GeckoTextMarker
MarkerFromIndex
(
Accessible
*
aRoot
int32_t
aIndex
)
;
AXTextMarkerRef
CreateAXTextMarker
(
)
;
bool
Next
(
)
{
return
mLegacy
?
mLegacyTextMarker
.
Next
(
)
:
mCachedTextMarker
.
Next
(
)
;
}
bool
Previous
(
)
{
return
mLegacy
?
mLegacyTextMarker
.
Previous
(
)
:
mCachedTextMarker
.
Previous
(
)
;
}
GeckoTextMarkerRange
LeftWordRange
(
)
const
;
GeckoTextMarkerRange
RightWordRange
(
)
const
;
GeckoTextMarkerRange
LineRange
(
)
const
;
GeckoTextMarkerRange
LeftLineRange
(
)
const
;
GeckoTextMarkerRange
RightLineRange
(
)
const
;
GeckoTextMarkerRange
ParagraphRange
(
)
const
;
GeckoTextMarkerRange
StyleRange
(
)
const
;
Accessible
*
Leaf
(
)
{
return
mLegacy
?
mLegacyTextMarker
.
Leaf
(
)
:
mCachedTextMarker
.
Leaf
(
)
;
}
int32_t
&
Offset
(
)
{
return
mLegacy
?
mLegacyTextMarker
.
mOffset
:
mCachedTextMarker
.
mPoint
.
mOffset
;
}
Accessible
*
Acc
(
)
const
{
return
mLegacy
?
mLegacyTextMarker
.
mContainer
:
mCachedTextMarker
.
mPoint
.
mAcc
;
}
bool
IsValid
(
)
const
{
return
mLegacy
?
mLegacyTextMarker
.
IsValid
(
)
:
mCachedTextMarker
.
IsValid
(
)
;
}
bool
operator
<
(
const
GeckoTextMarker
&
aPoint
)
const
{
return
mLegacy
?
(
mLegacyTextMarker
<
aPoint
.
mLegacyTextMarker
)
:
(
mCachedTextMarker
<
aPoint
.
mCachedTextMarker
)
;
}
bool
operator
=
=
(
const
GeckoTextMarker
&
aPoint
)
const
{
return
mLegacy
?
(
mLegacyTextMarker
=
=
aPoint
.
mLegacyTextMarker
)
:
(
mCachedTextMarker
=
=
aPoint
.
mCachedTextMarker
)
;
}
private
:
bool
mLegacy
;
union
{
LegacyTextMarker
mLegacyTextMarker
;
CachedTextMarker
mCachedTextMarker
;
}
;
friend
class
GeckoTextMarkerRange
;
}
;
class
GeckoTextMarkerRange
{
public
:
GeckoTextMarkerRange
(
)
;
GeckoTextMarkerRange
(
const
GeckoTextMarkerRange
&
aOther
)
{
mLegacy
=
aOther
.
mLegacy
;
if
(
mLegacy
)
{
mLegacyTextMarkerRange
=
aOther
.
mLegacyTextMarkerRange
;
}
else
{
mCachedTextMarkerRange
=
aOther
.
mCachedTextMarkerRange
;
}
}
explicit
GeckoTextMarkerRange
(
const
LegacyTextMarkerRange
&
aTextMarkerRange
)
:
mLegacy
(
true
)
mLegacyTextMarkerRange
(
aTextMarkerRange
)
{
}
explicit
GeckoTextMarkerRange
(
const
CachedTextMarkerRange
&
aTextMarkerRange
)
:
mLegacy
(
false
)
mCachedTextMarkerRange
(
aTextMarkerRange
)
{
}
GeckoTextMarkerRange
(
const
GeckoTextMarker
&
aStart
const
GeckoTextMarker
&
aEnd
)
{
MOZ_ASSERT
(
aStart
.
mLegacy
=
=
aEnd
.
mLegacy
)
;
mLegacy
=
aStart
.
mLegacy
;
if
(
mLegacy
)
{
mLegacyTextMarkerRange
=
LegacyTextMarkerRange
(
aStart
.
mLegacyTextMarker
aEnd
.
mLegacyTextMarker
)
;
}
else
{
mCachedTextMarkerRange
=
CachedTextMarkerRange
(
aStart
.
mCachedTextMarker
aEnd
.
mCachedTextMarker
)
;
}
}
explicit
GeckoTextMarkerRange
(
Accessible
*
aAccessible
)
;
static
GeckoTextMarkerRange
MarkerRangeFromAXTextMarkerRange
(
Accessible
*
aDoc
AXTextMarkerRangeRef
aTextMarkerRange
)
;
AXTextMarkerRangeRef
CreateAXTextMarkerRange
(
)
;
bool
IsValid
(
)
const
{
return
mLegacy
?
mLegacyTextMarkerRange
.
IsValid
(
)
:
mCachedTextMarkerRange
.
IsValid
(
)
;
}
GeckoTextMarker
Start
(
)
{
return
mLegacy
?
GeckoTextMarker
(
mLegacyTextMarkerRange
.
mStart
)
:
GeckoTextMarker
(
mCachedTextMarkerRange
.
mRange
.
Start
(
)
)
;
}
GeckoTextMarker
End
(
)
{
return
mLegacy
?
GeckoTextMarker
(
mLegacyTextMarkerRange
.
mEnd
)
:
GeckoTextMarker
(
mCachedTextMarkerRange
.
mRange
.
End
(
)
)
;
}
NSString
*
Text
(
)
const
{
return
mLegacy
?
mLegacyTextMarkerRange
.
Text
(
)
:
mCachedTextMarkerRange
.
Text
(
)
;
}
NSAttributedString
*
AttributedText
(
)
const
{
return
mLegacy
?
mLegacyTextMarkerRange
.
AttributedText
(
)
:
mCachedTextMarkerRange
.
AttributedText
(
)
;
}
int32_t
Length
(
)
const
{
return
mLegacy
?
mLegacyTextMarkerRange
.
Length
(
)
:
mCachedTextMarkerRange
.
Length
(
)
;
}
NSValue
*
Bounds
(
)
const
{
return
mLegacy
?
mLegacyTextMarkerRange
.
Bounds
(
)
:
mCachedTextMarkerRange
.
Bounds
(
)
;
}
void
Select
(
)
const
{
mLegacy
?
mLegacyTextMarkerRange
.
Select
(
)
:
mCachedTextMarkerRange
.
Select
(
)
;
}
bool
Crop
(
Accessible
*
aContainer
)
{
return
mLegacy
?
mLegacyTextMarkerRange
.
Crop
(
aContainer
)
:
mCachedTextMarkerRange
.
Crop
(
aContainer
)
;
}
private
:
bool
mLegacy
;
union
{
LegacyTextMarkerRange
mLegacyTextMarkerRange
;
CachedTextMarkerRange
mCachedTextMarkerRange
;
}
;
}
;
}
}
#
endif
