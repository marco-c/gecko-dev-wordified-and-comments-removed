#
ifndef
_GeckoTextMarker_H_
#
define
_GeckoTextMarker_H_
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
include
<
Foundation
/
Foundation
.
h
>
#
include
"
TextLeafRange
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
Accessible
;
class
GeckoTextMarkerRange
;
class
GeckoTextMarker
final
{
public
:
GeckoTextMarker
(
Accessible
*
aAcc
int32_t
aOffset
)
;
explicit
GeckoTextMarker
(
const
TextLeafPoint
&
aTextLeafPoint
)
:
mPoint
(
aTextLeafPoint
)
{
}
GeckoTextMarker
(
)
:
mPoint
(
)
{
}
static
GeckoTextMarker
MarkerFromAXTextMarker
(
Accessible
*
aDoc
AXTextMarkerRef
aTextMarker
)
;
static
GeckoTextMarker
MarkerFromIndex
(
Accessible
*
aRoot
int32_t
aIndex
)
;
AXTextMarkerRef
CreateAXTextMarker
(
)
;
bool
Next
(
)
;
bool
Previous
(
)
;
GeckoTextMarkerRange
LeftWordRange
(
)
const
;
GeckoTextMarkerRange
RightWordRange
(
)
const
;
GeckoTextMarkerRange
LineRange
(
)
const
;
GeckoTextMarkerRange
LeftLineRange
(
)
const
;
GeckoTextMarkerRange
RightLineRange
(
)
const
;
GeckoTextMarkerRange
ParagraphRange
(
)
const
;
GeckoTextMarkerRange
StyleRange
(
)
const
;
int32_t
&
Offset
(
)
{
return
mPoint
.
mOffset
;
}
Accessible
*
Leaf
(
)
;
Accessible
*
Acc
(
)
const
{
return
mPoint
.
mAcc
;
}
bool
IsValid
(
)
const
{
return
!
!
mPoint
;
}
;
bool
operator
<
(
const
GeckoTextMarker
&
aOther
)
const
{
return
mPoint
<
aOther
.
mPoint
;
}
bool
operator
=
=
(
const
GeckoTextMarker
&
aOther
)
const
{
return
mPoint
=
=
aOther
.
mPoint
;
}
TextLeafPoint
mPoint
;
}
;
class
GeckoTextMarkerRange
final
{
public
:
GeckoTextMarkerRange
(
const
GeckoTextMarker
&
aStart
const
GeckoTextMarker
&
aEnd
)
:
mRange
(
aStart
.
mPoint
aEnd
.
mPoint
)
{
}
GeckoTextMarkerRange
(
const
TextLeafPoint
&
aStart
const
TextLeafPoint
&
aEnd
)
:
mRange
(
aStart
aEnd
)
{
}
GeckoTextMarkerRange
(
)
{
}
explicit
GeckoTextMarkerRange
(
Accessible
*
aAccessible
)
;
static
GeckoTextMarkerRange
MarkerRangeFromAXTextMarkerRange
(
Accessible
*
aDoc
AXTextMarkerRangeRef
aTextMarkerRange
)
;
AXTextMarkerRangeRef
CreateAXTextMarkerRange
(
)
;
bool
IsValid
(
)
const
{
return
!
!
mRange
.
Start
(
)
&
&
!
!
mRange
.
End
(
)
;
}
;
GeckoTextMarker
Start
(
)
{
return
GeckoTextMarker
(
mRange
.
Start
(
)
)
;
}
GeckoTextMarker
End
(
)
{
return
GeckoTextMarker
(
mRange
.
End
(
)
)
;
}
NSString
*
Text
(
)
const
;
NSAttributedString
*
AttributedText
(
)
const
;
int32_t
Length
(
)
const
;
NSValue
*
Bounds
(
)
const
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
Select
(
)
const
;
bool
Crop
(
Accessible
*
aContainer
)
;
TextLeafRange
mRange
;
}
;
}
}
#
endif
