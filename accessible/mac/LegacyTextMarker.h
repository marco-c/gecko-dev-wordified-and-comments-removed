#
ifndef
_LegacyTextMarker_H_
#
define
_LegacyTextMarker_H_
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
include
<
Foundation
/
Foundation
.
h
>
#
include
"
HyperTextAccessibleWrap
.
h
"
#
include
"
PlatformExtTypes
.
h
"
#
include
"
SDKDeclarations
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
Accessible
;
class
LegacyTextMarkerRange
;
class
LegacyTextMarker
final
{
public
:
LegacyTextMarker
(
Accessible
*
aContainer
int32_t
aOffset
)
:
mContainer
(
aContainer
)
mOffset
(
aOffset
)
{
}
LegacyTextMarker
(
const
LegacyTextMarker
&
aPoint
)
:
mContainer
(
aPoint
.
mContainer
)
mOffset
(
aPoint
.
mOffset
)
{
}
LegacyTextMarker
(
Accessible
*
aDoc
AXTextMarkerRef
aTextMarker
)
;
LegacyTextMarker
(
)
:
mContainer
(
nullptr
)
mOffset
(
0
)
{
}
static
LegacyTextMarker
MarkerFromIndex
(
Accessible
*
aRoot
int32_t
aIndex
)
;
AXTextMarkerRef
CreateAXTextMarker
(
)
;
bool
Next
(
)
;
bool
Previous
(
)
;
LegacyTextMarkerRange
Range
(
EWhichRange
aRangeType
)
;
Accessible
*
Leaf
(
)
;
bool
IsValid
(
)
const
{
return
!
!
mContainer
;
}
;
bool
operator
<
(
const
LegacyTextMarker
&
aPoint
)
const
;
bool
operator
=
=
(
const
LegacyTextMarker
&
aPoint
)
const
{
return
mContainer
=
=
aPoint
.
mContainer
&
&
mOffset
=
=
aPoint
.
mOffset
;
}
Accessible
*
mContainer
;
int32_t
mOffset
;
HyperTextAccessibleWrap
*
ContainerAsHyperTextWrap
(
)
const
{
return
(
mContainer
&
&
mContainer
-
>
IsLocal
(
)
)
?
static_cast
<
HyperTextAccessibleWrap
*
>
(
mContainer
-
>
AsLocal
(
)
-
>
AsHyperText
(
)
)
:
nullptr
;
}
private
:
bool
IsEditableRoot
(
)
;
}
;
class
LegacyTextMarkerRange
final
{
public
:
LegacyTextMarkerRange
(
const
LegacyTextMarker
&
aStart
const
LegacyTextMarker
&
aEnd
)
:
mStart
(
aStart
)
mEnd
(
aEnd
)
{
}
LegacyTextMarkerRange
(
)
{
}
LegacyTextMarkerRange
(
Accessible
*
aDoc
AXTextMarkerRangeRef
aTextMarkerRange
)
;
explicit
LegacyTextMarkerRange
(
Accessible
*
aAccessible
)
;
AXTextMarkerRangeRef
CreateAXTextMarkerRange
(
)
;
bool
IsValid
(
)
const
{
return
!
!
mStart
.
mContainer
&
&
!
!
mEnd
.
mContainer
;
}
;
NSString
*
Text
(
)
const
;
NSAttributedString
*
AttributedText
(
)
const
;
int32_t
Length
(
)
const
;
NSValue
*
Bounds
(
)
const
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
Select
(
)
const
;
bool
Crop
(
Accessible
*
aContainer
)
;
LegacyTextMarker
mStart
;
LegacyTextMarker
mEnd
;
}
;
typedef
LegacyTextMarker
GeckoTextMarker
;
typedef
LegacyTextMarkerRange
GeckoTextMarkerRange
;
}
}
#
endif
