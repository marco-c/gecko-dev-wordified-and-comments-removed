from
__future__
import
print_function
unicode_literals
import
codecs
import
json
import
os
import
subprocess
import
sys
base_dir
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
sys
.
path
.
append
(
os
.
path
.
join
(
base_dir
'
python
'
'
which
'
)
)
sys
.
path
.
append
(
os
.
path
.
join
(
base_dir
'
python
'
'
mozbuild
'
)
)
from
mozbuild
.
configure
import
ConfigureSandbox
def
main
(
argv
)
:
    
config
=
{
}
    
sandbox
=
ConfigureSandbox
(
config
os
.
environ
argv
)
    
sandbox
.
run
(
os
.
path
.
join
(
os
.
path
.
dirname
(
__file__
)
'
moz
.
configure
'
)
)
    
if
sandbox
.
_help
:
        
return
0
    
sanitized_config
=
{
}
    
sanitized_config
[
'
substs
'
]
=
{
        
k
:
v
for
k
v
in
config
.
iteritems
(
)
        
if
k
not
in
(
'
DEFINES
'
'
non_global_defines
'
'
TOPSRCDIR
'
'
TOPOBJDIR
'
)
    
}
    
sanitized_config
[
'
defines
'
]
=
config
[
'
DEFINES
'
]
    
sanitized_config
[
'
non_global_defines
'
]
=
config
[
'
non_global_defines
'
]
    
sanitized_config
[
'
topsrcdir
'
]
=
config
[
'
TOPSRCDIR
'
]
    
sanitized_config
[
'
topobjdir
'
]
=
config
[
'
TOPOBJDIR
'
]
    
print
(
"
Creating
config
.
status
"
file
=
sys
.
stderr
)
    
encoding
=
'
mbcs
'
if
sys
.
platform
=
=
'
win32
'
else
'
utf
-
8
'
    
with
codecs
.
open
(
'
config
.
status
'
'
w
'
encoding
)
as
fh
:
        
fh
.
write
(
'
#
!
%
s
\
n
'
%
config
[
'
PYTHON
'
]
)
        
fh
.
write
(
'
#
coding
=
%
s
\
n
'
%
encoding
)
        
for
k
v
in
sanitized_config
.
iteritems
(
)
:
            
fh
.
write
(
'
%
s
=
'
%
k
)
            
json
.
dump
(
v
fh
sort_keys
=
True
indent
=
4
ensure_ascii
=
False
)
            
fh
.
write
(
'
\
n
'
)
        
fh
.
write
(
"
__all__
=
[
'
topobjdir
'
'
topsrcdir
'
'
defines
'
"
                 
"
'
non_global_defines
'
'
substs
'
]
"
)
        
if
not
config
.
get
(
'
BUILDING_JS
'
)
or
config
.
get
(
'
JS_STANDALONE
'
)
:
            
fh
.
write
(
'
'
'
if
__name__
=
=
'
__main__
'
:
    
args
=
dict
(
[
(
name
globals
(
)
[
name
]
)
for
name
in
__all__
]
)
    
from
mozbuild
.
config_status
import
config_status
    
config_status
(
*
*
args
)
'
'
'
)
    
os
.
chmod
(
'
config
.
status
'
0755
)
    
if
not
config
.
get
(
'
BUILDING_JS
'
)
or
config
.
get
(
'
JS_STANDALONE
'
)
:
        
if
not
config
.
get
(
'
JS_STANDALONE
'
)
:
            
os
.
environ
[
'
WRITE_MOZINFO
'
]
=
'
1
'
        
return
subprocess
.
call
(
[
config
[
'
PYTHON
'
]
'
config
.
status
'
]
)
    
return
0
if
__name__
=
=
'
__main__
'
:
    
sys
.
exit
(
main
(
sys
.
argv
)
)
