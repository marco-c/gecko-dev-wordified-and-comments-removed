#
include
"
nsView
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Poison
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
widget
/
Screen
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsPresArena
.
h
"
#
include
"
nsXULPopupManager
.
h
"
#
include
"
nsIScreen
.
h
"
#
include
"
nsIWidgetListener
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
mozilla
/
StartupTimeline
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
widget
;
nsView
:
:
nsView
(
nsViewManager
*
aViewManager
ViewVisibility
aVisibility
)
:
mViewManager
(
aViewManager
)
mParent
(
nullptr
)
mNextSibling
(
nullptr
)
mFirstChild
(
nullptr
)
mFrame
(
nullptr
)
mVis
(
aVisibility
)
mPosX
(
0
)
mPosY
(
0
)
mWidgetIsTopLevel
(
false
)
mForcedRepaint
(
false
)
mNeedsWindowPropertiesSync
(
false
)
{
MOZ_COUNT_CTOR
(
nsView
)
;
}
void
nsView
:
:
DropMouseGrabbing
(
)
{
if
(
mViewManager
-
>
GetPresShell
(
)
)
{
PresShell
:
:
ClearMouseCaptureOnView
(
this
)
;
}
}
nsView
:
:
~
nsView
(
)
{
MOZ_COUNT_DTOR
(
nsView
)
;
while
(
GetFirstChild
(
)
)
{
nsView
*
child
=
GetFirstChild
(
)
;
if
(
child
-
>
GetViewManager
(
)
=
=
mViewManager
)
{
child
-
>
Destroy
(
)
;
}
else
{
RemoveChild
(
child
)
;
}
}
if
(
mViewManager
)
{
DropMouseGrabbing
(
)
;
nsView
*
rootView
=
mViewManager
-
>
GetRootView
(
)
;
if
(
rootView
)
{
if
(
mParent
)
{
mViewManager
-
>
RemoveChild
(
this
)
;
}
if
(
rootView
=
=
this
)
{
mViewManager
-
>
SetRootView
(
nullptr
)
;
}
}
else
if
(
mParent
)
{
mParent
-
>
RemoveChild
(
this
)
;
}
mViewManager
=
nullptr
;
}
else
if
(
mParent
)
{
mParent
-
>
RemoveChild
(
this
)
;
}
if
(
mPreviousWindow
)
{
mPreviousWindow
-
>
SetPreviouslyAttachedWidgetListener
(
nullptr
)
;
}
DestroyWidget
(
)
;
MOZ_RELEASE_ASSERT
(
!
mFrame
)
;
}
class
DestroyWidgetRunnable
:
public
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
explicit
DestroyWidgetRunnable
(
nsIWidget
*
aWidget
)
:
mozilla
:
:
Runnable
(
"
DestroyWidgetRunnable
"
)
mWidget
(
aWidget
)
{
}
private
:
nsCOMPtr
<
nsIWidget
>
mWidget
;
}
;
NS_IMETHODIMP
DestroyWidgetRunnable
:
:
Run
(
)
{
mWidget
-
>
Destroy
(
)
;
mWidget
=
nullptr
;
return
NS_OK
;
}
void
nsView
:
:
DestroyWidget
(
)
{
if
(
mWindow
)
{
if
(
mWidgetIsTopLevel
)
{
mWindow
-
>
SetAttachedWidgetListener
(
nullptr
)
;
}
else
{
mWindow
-
>
SetWidgetListener
(
nullptr
)
;
nsCOMPtr
<
nsIRunnable
>
widgetDestroyer
=
new
DestroyWidgetRunnable
(
mWindow
)
;
nsCOMPtr
<
nsIThread
>
mainThread
=
do_GetMainThread
(
)
;
if
(
mainThread
)
{
mainThread
-
>
Dispatch
(
widgetDestroyer
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
}
mWindow
=
nullptr
;
}
}
nsView
*
nsView
:
:
GetViewFor
(
const
nsIWidget
*
aWidget
)
{
MOZ_ASSERT
(
aWidget
"
null
widget
ptr
"
)
;
nsIWidgetListener
*
listener
=
aWidget
-
>
GetWidgetListener
(
)
;
if
(
listener
)
{
if
(
nsView
*
view
=
listener
-
>
GetView
(
)
)
{
return
view
;
}
}
listener
=
aWidget
-
>
GetAttachedWidgetListener
(
)
;
return
listener
?
listener
-
>
GetView
(
)
:
nullptr
;
}
void
nsView
:
:
Destroy
(
)
{
this
-
>
~
nsView
(
)
;
mozWritePoison
(
this
sizeof
(
*
this
)
)
;
nsView
:
:
operator
delete
(
this
)
;
}
void
nsView
:
:
SetPosition
(
nscoord
aX
nscoord
aY
)
{
mDimBounds
.
MoveBy
(
aX
-
mPosX
aY
-
mPosY
)
;
mPosX
=
aX
;
mPosY
=
aY
;
NS_ASSERTION
(
GetParent
(
)
|
|
(
aX
=
=
0
&
&
aY
=
=
0
)
"
Don
'
t
try
to
move
the
root
widget
to
something
non
-
zero
"
)
;
ResetWidgetBounds
(
true
false
)
;
}
void
nsView
:
:
ResetWidgetBounds
(
bool
aRecurse
bool
aForceSync
)
{
if
(
mWindow
)
{
if
(
!
aForceSync
)
{
mViewManager
-
>
PostPendingUpdate
(
)
;
}
else
{
DoResetWidgetBounds
(
false
true
)
;
}
return
;
}
if
(
aRecurse
)
{
for
(
nsView
*
v
=
GetFirstChild
(
)
;
v
;
v
=
v
-
>
GetNextSibling
(
)
)
{
v
-
>
ResetWidgetBounds
(
true
aForceSync
)
;
}
}
}
bool
nsView
:
:
IsEffectivelyVisible
(
)
{
for
(
nsView
*
v
=
this
;
v
;
v
=
v
-
>
mParent
)
{
if
(
v
-
>
GetVisibility
(
)
=
=
ViewVisibility
:
:
Hide
)
return
false
;
}
return
true
;
}
static
LayoutDeviceIntRect
MaybeRoundToDisplayPixels
(
const
LayoutDeviceIntRect
&
aRect
TransparencyMode
aTransparency
int32_t
aRound
)
{
if
(
aRound
=
=
1
)
{
return
aRect
;
}
auto
size
=
aTransparency
=
=
TransparencyMode
:
:
Opaque
?
aRect
.
Size
(
)
.
TruncatedToMultiple
(
aRound
)
:
aRect
.
Size
(
)
.
CeiledToMultiple
(
aRound
)
;
Unused
<
<
NS_WARN_IF
(
aTransparency
=
=
TransparencyMode
:
:
Opaque
&
&
size
!
=
aRect
.
Size
(
)
)
;
return
{
aRect
.
TopLeft
(
)
.
RoundedToMultiple
(
aRound
)
size
}
;
}
LayoutDeviceIntRect
nsView
:
:
CalcWidgetBounds
(
WindowType
aType
TransparencyMode
aTransparency
)
{
int32_t
p2a
=
mViewManager
-
>
AppUnitsPerDevPixel
(
)
;
nsRect
viewBounds
(
mDimBounds
)
;
nsView
*
parent
=
GetParent
(
)
;
nsIWidget
*
parentWidget
=
nullptr
;
if
(
parent
)
{
nsPoint
offset
;
parentWidget
=
parent
-
>
GetNearestWidget
(
&
offset
p2a
)
;
viewBounds
+
=
offset
;
if
(
parentWidget
&
&
aType
=
=
WindowType
:
:
Popup
&
&
IsEffectivelyVisible
(
)
)
{
LayoutDeviceIntPoint
screenPoint
=
parentWidget
-
>
WidgetToScreenOffset
(
)
;
viewBounds
+
=
nsPoint
(
NSIntPixelsToAppUnits
(
screenPoint
.
x
p2a
)
NSIntPixelsToAppUnits
(
screenPoint
.
y
p2a
)
)
;
}
}
const
LayoutDeviceIntRect
newBounds
=
[
&
]
{
if
(
aType
!
=
WindowType
:
:
Popup
)
{
return
LayoutDeviceIntRect
:
:
FromUnknownRect
(
viewBounds
.
ToNearestPixels
(
p2a
)
)
;
}
const
bool
opaque
=
aTransparency
=
=
TransparencyMode
:
:
Opaque
;
const
auto
idealBounds
=
LayoutDeviceIntRect
:
:
FromUnknownRect
(
opaque
?
viewBounds
.
ToNearestPixels
(
p2a
)
:
viewBounds
.
ToOutsidePixels
(
p2a
)
)
;
nsIWidget
*
widget
=
parentWidget
?
parentWidget
:
mWindow
.
get
(
)
;
if
(
!
widget
)
{
return
idealBounds
;
}
const
int32_t
round
=
widget
-
>
RoundsWidgetCoordinatesTo
(
)
;
return
MaybeRoundToDisplayPixels
(
idealBounds
aTransparency
round
)
;
}
(
)
;
nsPoint
roundedOffset
(
NSIntPixelsToAppUnits
(
newBounds
.
X
(
)
p2a
)
NSIntPixelsToAppUnits
(
newBounds
.
Y
(
)
p2a
)
)
;
mViewToWidgetOffset
=
nsPoint
(
mPosX
mPosY
)
-
mDimBounds
.
TopLeft
(
)
+
viewBounds
.
TopLeft
(
)
-
roundedOffset
;
return
newBounds
;
}
LayoutDeviceIntRect
nsView
:
:
RecalcWidgetBounds
(
)
{
MOZ_ASSERT
(
mWindow
)
;
return
CalcWidgetBounds
(
mWindow
-
>
GetWindowType
(
)
mWindow
-
>
GetTransparencyMode
(
)
)
;
}
void
nsView
:
:
DoResetWidgetBounds
(
bool
aMoveOnly
bool
aInvalidateChangedSize
)
{
if
(
mViewManager
-
>
GetRootView
(
)
=
=
this
)
{
return
;
}
MOZ_ASSERT
(
mWindow
"
Why
was
this
called
?
?
"
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
mWindow
;
LayoutDeviceIntRect
newBounds
;
WindowType
type
=
widget
-
>
GetWindowType
(
)
;
LayoutDeviceIntRect
curBounds
=
widget
-
>
GetClientBounds
(
)
;
bool
invisiblePopup
=
type
=
=
WindowType
:
:
Popup
&
&
(
(
curBounds
.
IsEmpty
(
)
&
&
mDimBounds
.
IsEmpty
(
)
)
|
|
mVis
=
=
ViewVisibility
:
:
Hide
)
;
if
(
invisiblePopup
)
{
}
else
{
newBounds
=
CalcWidgetBounds
(
type
widget
-
>
GetTransparencyMode
(
)
)
;
invisiblePopup
=
newBounds
.
IsEmpty
(
)
;
}
bool
curVisibility
=
widget
-
>
IsVisible
(
)
;
bool
newVisibility
=
!
invisiblePopup
&
&
IsEffectivelyVisible
(
)
;
if
(
curVisibility
&
&
!
newVisibility
)
{
widget
-
>
Show
(
false
)
;
}
if
(
invisiblePopup
)
{
return
;
}
widget
-
>
ConstrainSize
(
&
newBounds
.
width
&
newBounds
.
height
)
;
bool
changedPos
=
curBounds
.
TopLeft
(
)
!
=
newBounds
.
TopLeft
(
)
;
bool
changedSize
=
curBounds
.
Size
(
)
!
=
newBounds
.
Size
(
)
;
DesktopToLayoutDeviceScale
scale
=
widget
-
>
GetDesktopToDeviceScaleByScreen
(
)
;
DesktopRect
deskRect
=
newBounds
/
scale
;
if
(
changedPos
)
{
if
(
changedSize
&
&
!
aMoveOnly
)
{
widget
-
>
ResizeClient
(
deskRect
aInvalidateChangedSize
)
;
}
else
{
widget
-
>
MoveClient
(
deskRect
.
TopLeft
(
)
)
;
}
}
else
{
if
(
changedSize
&
&
!
aMoveOnly
)
{
widget
-
>
ResizeClient
(
deskRect
.
Size
(
)
aInvalidateChangedSize
)
;
}
}
if
(
!
curVisibility
&
&
newVisibility
)
{
widget
-
>
Show
(
true
)
;
}
}
void
nsView
:
:
SetDimensions
(
const
nsRect
&
aRect
bool
aPaint
bool
aResizeWidget
)
{
nsRect
dims
=
aRect
;
dims
.
MoveBy
(
mPosX
mPosY
)
;
if
(
mDimBounds
.
TopLeft
(
)
=
=
dims
.
TopLeft
(
)
&
&
mDimBounds
.
Size
(
)
=
=
dims
.
Size
(
)
)
{
return
;
}
mDimBounds
=
dims
;
if
(
aResizeWidget
)
{
ResetWidgetBounds
(
false
false
)
;
}
}
void
nsView
:
:
NotifyEffectiveVisibilityChanged
(
bool
aEffectivelyVisible
)
{
if
(
!
aEffectivelyVisible
)
{
DropMouseGrabbing
(
)
;
}
SetForcedRepaint
(
true
)
;
if
(
mWindow
)
{
ResetWidgetBounds
(
false
false
)
;
}
for
(
nsView
*
child
=
mFirstChild
;
child
;
child
=
child
-
>
mNextSibling
)
{
if
(
child
-
>
mVis
=
=
ViewVisibility
:
:
Hide
)
{
continue
;
}
child
-
>
NotifyEffectiveVisibilityChanged
(
aEffectivelyVisible
)
;
}
}
void
nsView
:
:
SetVisibility
(
ViewVisibility
aVisibility
)
{
mVis
=
aVisibility
;
NotifyEffectiveVisibilityChanged
(
IsEffectivelyVisible
(
)
)
;
}
void
nsView
:
:
InvalidateHierarchy
(
)
{
if
(
mViewManager
-
>
GetRootView
(
)
=
=
this
)
mViewManager
-
>
InvalidateHierarchy
(
)
;
for
(
nsView
*
child
=
mFirstChild
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
child
-
>
InvalidateHierarchy
(
)
;
}
void
nsView
:
:
InsertChild
(
nsView
*
aChild
nsView
*
aSibling
)
{
MOZ_ASSERT
(
nullptr
!
=
aChild
"
null
ptr
"
)
;
if
(
nullptr
!
=
aChild
)
{
if
(
nullptr
!
=
aSibling
)
{
#
ifdef
DEBUG
NS_ASSERTION
(
aSibling
-
>
GetParent
(
)
=
=
this
"
tried
to
insert
view
with
invalid
sibling
"
)
;
#
endif
aChild
-
>
SetNextSibling
(
aSibling
-
>
GetNextSibling
(
)
)
;
aSibling
-
>
SetNextSibling
(
aChild
)
;
}
else
{
aChild
-
>
SetNextSibling
(
mFirstChild
)
;
mFirstChild
=
aChild
;
}
aChild
-
>
SetParent
(
this
)
;
nsViewManager
*
vm
=
aChild
-
>
GetViewManager
(
)
;
if
(
vm
-
>
GetRootView
(
)
=
=
aChild
)
{
aChild
-
>
InvalidateHierarchy
(
)
;
}
}
}
void
nsView
:
:
RemoveChild
(
nsView
*
child
)
{
MOZ_ASSERT
(
nullptr
!
=
child
"
null
ptr
"
)
;
if
(
nullptr
!
=
child
)
{
nsView
*
prevKid
=
nullptr
;
nsView
*
kid
=
mFirstChild
;
DebugOnly
<
bool
>
found
=
false
;
while
(
nullptr
!
=
kid
)
{
if
(
kid
=
=
child
)
{
if
(
nullptr
!
=
prevKid
)
{
prevKid
-
>
SetNextSibling
(
kid
-
>
GetNextSibling
(
)
)
;
}
else
{
mFirstChild
=
kid
-
>
GetNextSibling
(
)
;
}
child
-
>
SetParent
(
nullptr
)
;
found
=
true
;
break
;
}
prevKid
=
kid
;
kid
=
kid
-
>
GetNextSibling
(
)
;
}
NS_ASSERTION
(
found
"
tried
to
remove
non
child
"
)
;
nsViewManager
*
vm
=
child
-
>
GetViewManager
(
)
;
if
(
vm
-
>
GetRootView
(
)
=
=
child
)
{
child
-
>
InvalidateHierarchy
(
)
;
}
}
}
struct
DefaultWidgetInitData
:
public
widget
:
:
InitData
{
DefaultWidgetInitData
(
)
:
widget
:
:
InitData
(
)
{
mWindowType
=
WindowType
:
:
Child
;
mClipChildren
=
true
;
mClipSiblings
=
true
;
}
}
;
nsresult
nsView
:
:
CreateWidget
(
nsIWidget
*
aParent
bool
aEnableDragDrop
bool
aResetVisibility
)
{
AssertNoWindow
(
)
;
DefaultWidgetInitData
initData
;
LayoutDeviceIntRect
trect
=
CalcWidgetBounds
(
initData
.
mWindowType
initData
.
mTransparencyMode
)
;
if
(
!
aParent
&
&
GetParent
(
)
)
{
aParent
=
GetParent
(
)
-
>
GetNearestWidget
(
nullptr
)
;
}
if
(
!
aParent
)
{
NS_ERROR
(
"
nsView
:
:
CreateWidget
without
suitable
parent
widget
?
?
"
)
;
return
NS_ERROR_FAILURE
;
}
mWindow
=
aParent
-
>
CreateChild
(
trect
initData
)
;
if
(
!
mWindow
)
{
return
NS_ERROR_FAILURE
;
}
InitializeWindow
(
aEnableDragDrop
aResetVisibility
)
;
return
NS_OK
;
}
nsresult
nsView
:
:
CreateWidgetForPopup
(
widget
:
:
InitData
*
aWidgetInitData
nsIWidget
*
aParent
)
{
AssertNoWindow
(
)
;
MOZ_ASSERT
(
aWidgetInitData
"
Widget
init
data
required
"
)
;
MOZ_ASSERT
(
aWidgetInitData
-
>
mWindowType
=
=
WindowType
:
:
Popup
"
Use
one
of
the
other
CreateWidget
methods
"
)
;
LayoutDeviceIntRect
trect
=
CalcWidgetBounds
(
aWidgetInitData
-
>
mWindowType
aWidgetInitData
-
>
mTransparencyMode
)
;
if
(
!
aParent
&
&
GetParent
(
)
)
{
aParent
=
GetParent
(
)
-
>
GetNearestWidget
(
nullptr
)
;
}
if
(
!
aParent
)
{
NS_ERROR
(
"
nsView
:
:
CreateWidgetForPopup
without
suitable
parent
widget
?
?
"
)
;
return
NS_ERROR_FAILURE
;
}
mWindow
=
aParent
-
>
CreateChild
(
trect
*
aWidgetInitData
)
;
if
(
!
mWindow
)
{
return
NS_ERROR_FAILURE
;
}
InitializeWindow
(
true
true
)
;
return
NS_OK
;
}
void
nsView
:
:
InitializeWindow
(
bool
aEnableDragDrop
bool
aResetVisibility
)
{
MOZ_ASSERT
(
mWindow
"
Must
have
a
window
to
initialize
"
)
;
mWindow
-
>
SetWidgetListener
(
this
)
;
if
(
aEnableDragDrop
)
{
mWindow
-
>
EnableDragDrop
(
true
)
;
}
if
(
aResetVisibility
)
{
SetVisibility
(
GetVisibility
(
)
)
;
}
}
void
nsView
:
:
SetNeedsWindowPropertiesSync
(
)
{
mNeedsWindowPropertiesSync
=
true
;
if
(
mViewManager
)
{
mViewManager
-
>
PostPendingUpdate
(
)
;
}
}
nsresult
nsView
:
:
AttachToTopLevelWidget
(
nsIWidget
*
aWidget
)
{
MOZ_ASSERT
(
aWidget
"
null
widget
ptr
"
)
;
nsIWidgetListener
*
listener
=
aWidget
-
>
GetAttachedWidgetListener
(
)
;
if
(
listener
)
{
nsView
*
oldView
=
listener
-
>
GetView
(
)
;
if
(
oldView
)
{
oldView
-
>
DetachFromTopLevelWidget
(
)
;
}
}
aWidget
-
>
AttachViewToTopLevel
(
!
nsIWidget
:
:
UsePuppetWidgets
(
)
)
;
mWindow
=
aWidget
;
mWindow
-
>
SetAttachedWidgetListener
(
this
)
;
if
(
mWindow
-
>
GetWindowType
(
)
!
=
WindowType
:
:
Invisible
)
{
nsresult
rv
=
mWindow
-
>
AsyncEnableDragDrop
(
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
mWidgetIsTopLevel
=
true
;
RecalcWidgetBounds
(
)
;
return
NS_OK
;
}
nsresult
nsView
:
:
DetachFromTopLevelWidget
(
)
{
MOZ_ASSERT
(
mWidgetIsTopLevel
"
Not
attached
currently
!
"
)
;
MOZ_ASSERT
(
mWindow
"
null
mWindow
for
DetachFromTopLevelWidget
!
"
)
;
mWindow
-
>
SetAttachedWidgetListener
(
nullptr
)
;
nsIWidgetListener
*
listener
=
mWindow
-
>
GetPreviouslyAttachedWidgetListener
(
)
;
if
(
listener
&
&
listener
-
>
GetView
(
)
)
{
listener
-
>
GetView
(
)
-
>
SetPreviousWidget
(
nullptr
)
;
}
mWindow
-
>
SetPreviouslyAttachedWidgetListener
(
this
)
;
mPreviousWindow
=
mWindow
;
mWindow
=
nullptr
;
mWidgetIsTopLevel
=
false
;
return
NS_OK
;
}
void
nsView
:
:
AssertNoWindow
(
)
{
if
(
MOZ_UNLIKELY
(
mWindow
)
)
{
NS_ERROR
(
"
We
already
have
a
window
for
this
view
?
BAD
"
)
;
mWindow
-
>
SetWidgetListener
(
nullptr
)
;
mWindow
-
>
Destroy
(
)
;
mWindow
=
nullptr
;
}
}
void
nsView
:
:
AttachWidgetEventHandler
(
nsIWidget
*
aWidget
)
{
#
ifdef
DEBUG
NS_ASSERTION
(
!
aWidget
-
>
GetWidgetListener
(
)
"
Already
have
a
widget
listener
"
)
;
#
endif
aWidget
-
>
SetWidgetListener
(
this
)
;
}
void
nsView
:
:
DetachWidgetEventHandler
(
nsIWidget
*
aWidget
)
{
NS_ASSERTION
(
!
aWidget
-
>
GetWidgetListener
(
)
|
|
aWidget
-
>
GetWidgetListener
(
)
-
>
GetView
(
)
=
=
this
"
Wrong
view
"
)
;
aWidget
-
>
SetWidgetListener
(
nullptr
)
;
}
#
ifdef
DEBUG
void
nsView
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
int32_t
i
;
for
(
i
=
aIndent
;
-
-
i
>
=
0
;
)
fputs
(
"
"
out
)
;
fprintf
(
out
"
%
p
"
(
void
*
)
this
)
;
if
(
nullptr
!
=
mWindow
)
{
nscoord
p2a
=
mViewManager
-
>
AppUnitsPerDevPixel
(
)
;
LayoutDeviceIntRect
rect
=
mWindow
-
>
GetClientBounds
(
)
;
nsRect
windowBounds
=
LayoutDeviceIntRect
:
:
ToAppUnits
(
rect
p2a
)
;
rect
=
mWindow
-
>
GetBounds
(
)
;
nsRect
nonclientBounds
=
LayoutDeviceIntRect
:
:
ToAppUnits
(
rect
p2a
)
;
nsrefcnt
widgetRefCnt
=
mWindow
.
get
(
)
-
>
AddRef
(
)
-
1
;
mWindow
.
get
(
)
-
>
Release
(
)
;
fprintf
(
out
"
(
widget
=
%
p
[
%
"
PRIuPTR
"
]
pos
=
{
%
d
%
d
%
d
%
d
}
)
"
(
void
*
)
mWindow
widgetRefCnt
nonclientBounds
.
X
(
)
nonclientBounds
.
Y
(
)
windowBounds
.
Width
(
)
windowBounds
.
Height
(
)
)
;
}
nsRect
brect
=
GetBounds
(
)
;
fprintf
(
out
"
{
%
d
%
d
%
d
%
d
}
%
d
%
d
"
brect
.
X
(
)
brect
.
Y
(
)
brect
.
Width
(
)
brect
.
Height
(
)
mPosX
mPosY
)
;
fprintf
(
out
"
vis
=
%
d
frame
=
%
p
<
\
n
"
int
(
mVis
)
mFrame
)
;
for
(
nsView
*
kid
=
mFirstChild
;
kid
;
kid
=
kid
-
>
GetNextSibling
(
)
)
{
NS_ASSERTION
(
kid
-
>
GetParent
(
)
=
=
this
"
incorrect
parent
"
)
;
kid
-
>
List
(
out
aIndent
+
1
)
;
}
for
(
i
=
aIndent
;
-
-
i
>
=
0
;
)
fputs
(
"
"
out
)
;
fputs
(
"
>
\
n
"
out
)
;
}
#
endif
nsPoint
nsView
:
:
GetOffsetTo
(
const
nsView
*
aOther
)
const
{
return
GetOffsetTo
(
aOther
GetViewManager
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
}
nsPoint
nsView
:
:
GetOffsetTo
(
const
nsView
*
aOther
const
int32_t
aAPD
)
const
{
MOZ_ASSERT
(
GetParent
(
)
|
|
!
aOther
|
|
aOther
-
>
GetParent
(
)
|
|
this
=
=
aOther
"
caller
of
(
outer
)
GetOffsetTo
must
not
pass
unrelated
views
"
)
;
nsPoint
offset
(
0
0
)
;
nsPoint
docOffset
(
0
0
)
;
const
nsView
*
v
=
this
;
nsViewManager
*
currVM
=
v
-
>
GetViewManager
(
)
;
int32_t
currAPD
=
currVM
-
>
AppUnitsPerDevPixel
(
)
;
const
nsView
*
root
=
nullptr
;
for
(
;
v
!
=
aOther
&
&
v
;
root
=
v
v
=
v
-
>
GetParent
(
)
)
{
nsViewManager
*
newVM
=
v
-
>
GetViewManager
(
)
;
if
(
newVM
!
=
currVM
)
{
int32_t
newAPD
=
newVM
-
>
AppUnitsPerDevPixel
(
)
;
if
(
newAPD
!
=
currAPD
)
{
offset
+
=
docOffset
.
ScaleToOtherAppUnits
(
currAPD
aAPD
)
;
docOffset
.
x
=
docOffset
.
y
=
0
;
currAPD
=
newAPD
;
}
currVM
=
newVM
;
}
docOffset
+
=
v
-
>
GetPosition
(
)
;
}
offset
+
=
docOffset
.
ScaleToOtherAppUnits
(
currAPD
aAPD
)
;
if
(
v
!
=
aOther
)
{
nsPoint
negOffset
=
aOther
-
>
GetOffsetTo
(
root
aAPD
)
;
offset
-
=
negOffset
;
}
return
offset
;
}
nsPoint
nsView
:
:
GetOffsetToWidget
(
nsIWidget
*
aWidget
)
const
{
nsPoint
pt
;
nsView
*
widgetView
=
GetViewFor
(
aWidget
)
;
if
(
!
widgetView
)
{
return
pt
;
}
pt
=
-
widgetView
-
>
GetOffsetTo
(
this
)
;
pt
+
=
widgetView
-
>
ViewToWidgetOffset
(
)
;
int32_t
widgetAPD
=
widgetView
-
>
GetViewManager
(
)
-
>
AppUnitsPerDevPixel
(
)
;
int32_t
ourAPD
=
GetViewManager
(
)
-
>
AppUnitsPerDevPixel
(
)
;
pt
=
pt
.
ScaleToOtherAppUnits
(
widgetAPD
ourAPD
)
;
return
pt
;
}
nsIWidget
*
nsView
:
:
GetNearestWidget
(
nsPoint
*
aOffset
)
const
{
return
GetNearestWidget
(
aOffset
GetViewManager
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
}
nsIWidget
*
nsView
:
:
GetNearestWidget
(
nsPoint
*
aOffset
const
int32_t
aAPD
)
const
{
nsPoint
pt
(
0
0
)
;
nsPoint
docPt
(
0
0
)
;
const
nsView
*
v
=
this
;
nsViewManager
*
currVM
=
v
-
>
GetViewManager
(
)
;
int32_t
currAPD
=
currVM
-
>
AppUnitsPerDevPixel
(
)
;
for
(
;
v
&
&
!
v
-
>
HasWidget
(
)
;
v
=
v
-
>
GetParent
(
)
)
{
nsViewManager
*
newVM
=
v
-
>
GetViewManager
(
)
;
if
(
newVM
!
=
currVM
)
{
int32_t
newAPD
=
newVM
-
>
AppUnitsPerDevPixel
(
)
;
if
(
newAPD
!
=
currAPD
)
{
pt
+
=
docPt
.
ScaleToOtherAppUnits
(
currAPD
aAPD
)
;
docPt
.
x
=
docPt
.
y
=
0
;
currAPD
=
newAPD
;
}
currVM
=
newVM
;
}
docPt
+
=
v
-
>
GetPosition
(
)
;
}
if
(
!
v
)
{
if
(
aOffset
)
{
pt
+
=
docPt
.
ScaleToOtherAppUnits
(
currAPD
aAPD
)
;
*
aOffset
=
pt
;
}
return
nullptr
;
}
if
(
aOffset
)
{
docPt
+
=
v
-
>
ViewToWidgetOffset
(
)
;
pt
+
=
docPt
.
ScaleToOtherAppUnits
(
currAPD
aAPD
)
;
*
aOffset
=
pt
;
}
return
v
-
>
GetWidget
(
)
;
}
bool
nsView
:
:
IsRoot
(
)
const
{
NS_ASSERTION
(
mViewManager
!
=
nullptr
"
View
manager
is
null
in
nsView
:
:
IsRoot
(
)
"
)
;
return
mViewManager
-
>
GetRootView
(
)
=
=
this
;
}
static
bool
IsPopupWidget
(
nsIWidget
*
aWidget
)
{
return
aWidget
-
>
GetWindowType
(
)
=
=
WindowType
:
:
Popup
;
}
PresShell
*
nsView
:
:
GetPresShell
(
)
{
return
GetViewManager
(
)
-
>
GetPresShell
(
)
;
}
bool
nsView
:
:
WindowMoved
(
nsIWidget
*
aWidget
int32_t
x
int32_t
y
ByMoveToRect
aByMoveToRect
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
&
&
IsPopupWidget
(
aWidget
)
)
{
pm
-
>
PopupMoved
(
mFrame
LayoutDeviceIntPoint
(
x
y
)
aByMoveToRect
=
=
ByMoveToRect
:
:
Yes
)
;
return
true
;
}
return
false
;
}
bool
nsView
:
:
WindowResized
(
nsIWidget
*
aWidget
int32_t
aWidth
int32_t
aHeight
)
{
SetForcedRepaint
(
true
)
;
if
(
this
=
=
mViewManager
-
>
GetRootView
(
)
)
{
RefPtr
<
nsDeviceContext
>
devContext
=
mViewManager
-
>
GetDeviceContext
(
)
;
devContext
-
>
CheckDPIChange
(
)
;
int32_t
p2a
=
devContext
-
>
AppUnitsPerDevPixel
(
)
;
if
(
auto
*
frame
=
GetFrame
(
)
)
{
frame
-
>
InvalidateFrame
(
)
;
}
mViewManager
-
>
SetWindowDimensions
(
NSIntPixelsToAppUnits
(
aWidth
p2a
)
NSIntPixelsToAppUnits
(
aHeight
p2a
)
)
;
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
PresShell
*
presShell
=
mViewManager
-
>
GetPresShell
(
)
;
if
(
presShell
&
&
presShell
-
>
GetDocument
(
)
)
{
pm
-
>
AdjustPopupsOnWindowChange
(
presShell
)
;
}
}
return
true
;
}
if
(
IsPopupWidget
(
aWidget
)
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
pm
-
>
PopupResized
(
mFrame
LayoutDeviceIntSize
(
aWidth
aHeight
)
)
;
return
true
;
}
}
return
false
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
nsView
:
:
DynamicToolbarMaxHeightChanged
(
ScreenIntCoord
aHeight
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Should
be
only
called
for
the
browser
parent
process
"
)
;
MOZ_ASSERT
(
this
=
=
mViewManager
-
>
GetRootView
(
)
"
Should
be
called
for
the
root
view
"
)
;
CallOnAllRemoteChildren
(
[
aHeight
]
(
dom
:
:
BrowserParent
*
aBrowserParent
)
-
>
CallState
{
aBrowserParent
-
>
DynamicToolbarMaxHeightChanged
(
aHeight
)
;
return
CallState
:
:
Continue
;
}
)
;
}
void
nsView
:
:
DynamicToolbarOffsetChanged
(
ScreenIntCoord
aOffset
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Should
be
only
called
for
the
browser
parent
process
"
)
;
MOZ_ASSERT
(
this
=
=
mViewManager
-
>
GetRootView
(
)
"
Should
be
called
for
the
root
view
"
)
;
CallOnAllRemoteChildren
(
[
aOffset
]
(
dom
:
:
BrowserParent
*
aBrowserParent
)
-
>
CallState
{
if
(
!
aBrowserParent
-
>
GetDocShellIsActive
(
)
)
{
return
CallState
:
:
Continue
;
}
aBrowserParent
-
>
DynamicToolbarOffsetChanged
(
aOffset
)
;
return
CallState
:
:
Stop
;
}
)
;
}
void
nsView
:
:
KeyboardHeightChanged
(
ScreenIntCoord
aHeight
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Should
be
only
called
for
the
browser
parent
process
"
)
;
MOZ_ASSERT
(
this
=
=
mViewManager
-
>
GetRootView
(
)
"
Should
be
called
for
the
root
view
"
)
;
CallOnAllRemoteChildren
(
[
aHeight
]
(
dom
:
:
BrowserParent
*
aBrowserParent
)
-
>
CallState
{
if
(
!
aBrowserParent
-
>
GetDocShellIsActive
(
)
)
{
return
CallState
:
:
Continue
;
}
aBrowserParent
-
>
KeyboardHeightChanged
(
aHeight
)
;
return
CallState
:
:
Stop
;
}
)
;
}
#
endif
bool
nsView
:
:
RequestWindowClose
(
nsIWidget
*
aWidget
)
{
if
(
mFrame
&
&
IsPopupWidget
(
aWidget
)
&
&
mFrame
-
>
IsMenuPopupFrame
(
)
)
{
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
pm
-
>
HidePopup
(
mFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
{
HidePopupOption
:
:
DeselectMenu
}
)
;
return
true
;
}
}
return
false
;
}
void
nsView
:
:
WillPaintWindow
(
nsIWidget
*
aWidget
)
{
RefPtr
<
nsViewManager
>
vm
=
mViewManager
;
vm
-
>
WillPaintWindow
(
aWidget
)
;
}
bool
nsView
:
:
PaintWindow
(
nsIWidget
*
aWidget
LayoutDeviceIntRegion
aRegion
)
{
NS_ASSERTION
(
this
=
=
nsView
:
:
GetViewFor
(
aWidget
)
"
wrong
view
for
widget
?
"
)
;
RefPtr
<
nsViewManager
>
vm
=
mViewManager
;
bool
result
=
vm
-
>
PaintWindow
(
aWidget
aRegion
)
;
return
result
;
}
void
nsView
:
:
DidPaintWindow
(
)
{
RefPtr
<
nsViewManager
>
vm
=
mViewManager
;
vm
-
>
DidPaintWindow
(
)
;
}
void
nsView
:
:
DidCompositeWindow
(
mozilla
:
:
layers
:
:
TransactionId
aTransactionId
const
TimeStamp
&
aCompositeStart
const
TimeStamp
&
aCompositeEnd
)
{
PresShell
*
presShell
=
mViewManager
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
;
}
nsAutoScriptBlocker
scriptBlocker
;
nsPresContext
*
context
=
presShell
-
>
GetPresContext
(
)
;
nsRootPresContext
*
rootContext
=
context
-
>
GetRootPresContext
(
)
;
if
(
rootContext
)
{
rootContext
-
>
NotifyDidPaintForSubtree
(
aTransactionId
aCompositeEnd
)
;
}
mozilla
:
:
StartupTimeline
:
:
RecordOnce
(
mozilla
:
:
StartupTimeline
:
:
FIRST_PAINT2
aCompositeEnd
)
;
if
(
aCompositeStart
=
=
aCompositeEnd
)
{
return
;
}
}
void
nsView
:
:
RequestRepaint
(
)
{
if
(
PresShell
*
presShell
=
mViewManager
-
>
GetPresShell
(
)
)
{
presShell
-
>
ScheduleViewManagerFlush
(
)
;
}
}
bool
nsView
:
:
ShouldNotBeVisible
(
)
{
if
(
mFrame
&
&
mFrame
-
>
IsMenuPopupFrame
(
)
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
return
!
pm
|
|
!
pm
-
>
IsPopupOpen
(
mFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
)
;
}
return
false
;
}
nsEventStatus
nsView
:
:
HandleEvent
(
WidgetGUIEvent
*
aEvent
bool
aUseAttachedEvents
)
{
MOZ_ASSERT
(
nullptr
!
=
aEvent
-
>
mWidget
"
null
widget
ptr
"
)
;
nsEventStatus
result
=
nsEventStatus_eIgnore
;
nsView
*
view
;
if
(
aUseAttachedEvents
)
{
nsIWidgetListener
*
listener
=
aEvent
-
>
mWidget
-
>
GetAttachedWidgetListener
(
)
;
view
=
listener
?
listener
-
>
GetView
(
)
:
nullptr
;
}
else
{
view
=
GetViewFor
(
aEvent
-
>
mWidget
)
;
}
if
(
view
)
{
RefPtr
<
nsViewManager
>
vm
=
view
-
>
GetViewManager
(
)
;
vm
-
>
DispatchEvent
(
aEvent
view
&
result
)
;
}
return
result
;
}
void
nsView
:
:
SafeAreaInsetsChanged
(
const
LayoutDeviceIntMargin
&
aSafeAreaInsets
)
{
if
(
!
IsRoot
(
)
)
{
return
;
}
PresShell
*
presShell
=
mViewManager
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
;
}
LayoutDeviceIntMargin
windowSafeAreaInsets
;
const
LayoutDeviceIntRect
windowRect
=
mWindow
-
>
GetScreenBounds
(
)
;
if
(
nsCOMPtr
<
nsIScreen
>
screen
=
mWindow
-
>
GetWidgetScreen
(
)
)
{
windowSafeAreaInsets
=
nsContentUtils
:
:
GetWindowSafeAreaInsets
(
screen
aSafeAreaInsets
windowRect
)
;
}
presShell
-
>
GetPresContext
(
)
-
>
SetSafeAreaInsets
(
windowSafeAreaInsets
)
;
CallOnAllRemoteChildren
(
[
windowSafeAreaInsets
]
(
dom
:
:
BrowserParent
*
aBrowserParent
)
-
>
CallState
{
Unused
<
<
aBrowserParent
-
>
SendSafeAreaInsetsChanged
(
windowSafeAreaInsets
)
;
return
CallState
:
:
Continue
;
}
)
;
}
bool
nsView
:
:
IsPrimaryFramePaintSuppressed
(
)
{
return
StaticPrefs
:
:
layout_show_previous_page
(
)
&
&
mFrame
&
&
mFrame
-
>
PresShell
(
)
-
>
IsPaintingSuppressed
(
)
;
}
void
nsView
:
:
CallOnAllRemoteChildren
(
const
std
:
:
function
<
CallState
(
dom
:
:
BrowserParent
*
)
>
&
aCallback
)
{
PresShell
*
presShell
=
mViewManager
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
;
}
dom
:
:
Document
*
document
=
presShell
-
>
GetDocument
(
)
;
if
(
!
document
)
{
return
;
}
nsPIDOMWindowOuter
*
window
=
document
-
>
GetWindow
(
)
;
if
(
!
window
)
{
return
;
}
nsContentUtils
:
:
CallOnAllRemoteChildren
(
window
aCallback
)
;
}
