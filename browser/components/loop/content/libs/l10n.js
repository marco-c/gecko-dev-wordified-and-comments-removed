'
use
strict
'
;
(
function
(
window
)
{
var
gL10nDetails
;
var
gLanguage
=
'
'
;
var
kPluralFunctions
=
[
[
1
function
(
n
)
{
return
0
}
]
[
2
function
(
n
)
{
return
n
!
=
1
?
1
:
0
}
]
[
2
function
(
n
)
{
return
n
>
1
?
1
:
0
}
]
[
3
function
(
n
)
{
return
n
%
10
=
=
1
&
&
n
%
100
!
=
11
?
1
:
n
!
=
0
?
2
:
0
}
]
[
4
function
(
n
)
{
return
n
=
=
1
|
|
n
=
=
11
?
0
:
n
=
=
2
|
|
n
=
=
12
?
1
:
n
>
0
&
&
n
<
20
?
2
:
3
}
]
[
3
function
(
n
)
{
return
n
=
=
1
?
0
:
n
=
=
0
|
|
n
%
100
>
0
&
&
n
%
100
<
20
?
1
:
2
}
]
[
3
function
(
n
)
{
return
n
%
10
=
=
1
&
&
n
%
100
!
=
11
?
0
:
n
%
10
>
=
2
&
&
(
n
%
100
<
10
|
|
n
%
100
>
=
20
)
?
2
:
1
}
]
[
3
function
(
n
)
{
return
n
%
10
=
=
1
&
&
n
%
100
!
=
11
?
0
:
n
%
10
>
=
2
&
&
n
%
10
<
=
4
&
&
(
n
%
100
<
10
|
|
n
%
100
>
=
20
)
?
1
:
2
}
]
[
3
function
(
n
)
{
return
n
=
=
1
?
0
:
n
>
=
2
&
&
n
<
=
4
?
1
:
2
}
]
[
3
function
(
n
)
{
return
n
=
=
1
?
0
:
n
%
10
>
=
2
&
&
n
%
10
<
=
4
&
&
(
n
%
100
<
10
|
|
n
%
100
>
=
20
)
?
1
:
2
}
]
[
4
function
(
n
)
{
return
n
%
100
=
=
1
?
0
:
n
%
100
=
=
2
?
1
:
n
%
100
=
=
3
|
|
n
%
100
=
=
4
?
2
:
3
}
]
[
5
function
(
n
)
{
return
n
=
=
1
?
0
:
n
=
=
2
?
1
:
n
>
=
3
&
&
n
<
=
6
?
2
:
n
>
=
7
&
&
n
<
=
10
?
3
:
4
}
]
[
6
function
(
n
)
{
return
n
=
=
0
?
5
:
n
=
=
1
?
0
:
n
=
=
2
?
1
:
n
%
100
>
=
3
&
&
n
%
100
<
=
10
?
2
:
n
%
100
>
=
11
&
&
n
%
100
<
=
99
?
3
:
4
}
]
[
4
function
(
n
)
{
return
n
=
=
1
?
0
:
n
=
=
0
|
|
n
%
100
>
0
&
&
n
%
100
<
=
10
?
1
:
n
%
100
>
10
&
&
n
%
100
<
20
?
2
:
3
}
]
[
3
function
(
n
)
{
return
n
%
10
=
=
1
?
0
:
n
%
10
=
=
2
?
1
:
2
}
]
[
2
function
(
n
)
{
return
n
%
10
=
=
1
&
&
n
%
100
!
=
11
?
0
:
1
}
]
[
5
function
(
n
)
{
return
n
%
10
=
=
1
&
&
n
%
100
!
=
11
&
&
n
%
100
!
=
71
&
&
n
%
100
!
=
91
?
0
:
n
%
10
=
=
2
&
&
n
%
100
!
=
12
&
&
n
%
100
!
=
72
&
&
n
%
100
!
=
92
?
1
:
(
n
%
10
=
=
3
|
|
n
%
10
=
=
4
|
|
n
%
10
=
=
9
)
&
&
n
%
100
!
=
13
&
&
n
%
100
!
=
14
&
&
n
%
100
!
=
19
&
&
n
%
100
!
=
73
&
&
n
%
100
!
=
74
&
&
n
%
100
!
=
79
&
&
n
%
100
!
=
93
&
&
n
%
100
!
=
94
&
&
n
%
100
!
=
99
?
2
:
n
%
1000000
=
=
0
&
&
n
!
=
0
?
3
:
4
}
]
]
;
var
gPluralFunc
=
null
;
function
getL10nData
(
key
num
)
{
var
response
=
gL10nDetails
.
getStrings
(
key
)
;
var
data
=
JSON
.
parse
(
response
)
;
if
(
!
data
)
console
.
warn
(
'
[
l10n
]
#
'
+
key
+
'
missing
for
[
'
+
gLanguage
+
'
]
'
)
;
if
(
num
!
=
=
undefined
)
{
for
(
var
prop
in
data
)
{
data
[
prop
]
=
gL10nDetails
.
getPluralForm
(
num
data
[
prop
]
)
;
}
}
return
data
;
}
function
fallbackGetPluralForm
(
num
str
)
{
var
index
=
gPluralFunc
(
num
?
Number
(
num
)
:
0
)
;
var
words
=
str
?
str
.
split
(
/
;
/
)
:
[
"
"
]
;
var
ret
=
index
<
words
.
length
?
words
[
index
]
:
undefined
;
if
(
(
ret
=
=
undefined
)
|
|
(
ret
=
=
"
"
)
)
{
console
.
error
(
"
Index
#
"
+
index
+
"
of
'
"
+
str
+
"
'
for
value
"
+
num
+
"
is
invalid
-
-
plural
rule
#
"
+
aRuleNum
)
;
ret
=
words
[
0
]
;
}
return
ret
;
}
function
substArguments
(
text
args
)
{
if
(
!
args
)
return
text
;
return
text
.
replace
(
/
\
{
\
{
\
s
*
(
\
w
+
)
\
s
*
\
}
\
}
/
g
function
(
all
name
)
{
return
name
in
args
?
args
[
name
]
:
'
{
{
'
+
name
+
'
}
}
'
;
}
)
;
}
function
translateString
(
key
args
fallback
)
{
var
num
;
if
(
args
&
&
(
"
num
"
in
args
)
)
{
num
=
args
.
num
;
}
var
data
=
getL10nData
(
key
num
)
;
if
(
!
data
&
&
fallback
)
data
=
{
textContent
:
fallback
}
;
if
(
!
data
)
return
'
{
{
'
+
key
+
'
}
}
'
;
return
substArguments
(
data
.
textContent
args
)
;
}
function
translateElement
(
element
)
{
if
(
!
element
|
|
!
element
.
dataset
)
return
;
var
key
=
element
.
dataset
.
l10nId
;
var
data
=
getL10nData
(
key
)
;
if
(
!
data
)
return
;
var
args
;
if
(
element
.
dataset
.
l10nArgs
)
try
{
args
=
JSON
.
parse
(
element
.
dataset
.
l10nArgs
)
;
}
catch
(
e
)
{
console
.
warn
(
'
[
l10n
]
could
not
parse
arguments
for
#
'
+
key
+
'
'
)
;
}
for
(
var
k
in
data
)
element
[
k
]
=
substArguments
(
data
[
k
]
args
)
;
}
function
translateFragment
(
element
)
{
element
=
element
|
|
document
.
querySelector
(
'
html
'
)
;
var
children
=
element
.
querySelectorAll
(
'
*
[
data
-
l10n
-
id
]
'
)
;
var
elementCount
=
children
.
length
;
for
(
var
i
=
0
;
i
<
elementCount
;
i
+
+
)
translateElement
(
children
[
i
]
)
;
if
(
element
.
dataset
.
l10nId
)
translateElement
(
element
)
;
}
document
.
mozL10n
=
{
initialize
:
function
(
l10nDetails
)
{
gL10nDetails
=
l10nDetails
;
gLanguage
=
gL10nDetails
.
locale
;
if
(
!
gL10nDetails
.
getPluralForm
&
&
(
"
pluralRule
"
in
gL10nDetails
)
)
{
gPluralFunc
=
kPluralFunctions
[
gL10nDetails
.
pluralRule
]
[
1
]
;
gL10nDetails
.
getPluralForm
=
fallbackGetPluralForm
;
}
translateFragment
(
)
;
}
get
:
translateString
getLanguage
:
function
(
)
{
return
gLanguage
;
}
getDirection
:
function
(
)
{
var
rtlList
=
[
'
ar
'
'
he
'
'
fa
'
'
ps
'
'
ur
'
]
;
return
(
rtlList
.
indexOf
(
gLanguage
)
>
=
0
)
?
'
rtl
'
:
'
ltr
'
;
}
translate
:
translateFragment
}
;
}
)
(
this
)
;
