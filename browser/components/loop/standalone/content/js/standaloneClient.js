var
loop
=
loop
|
|
{
}
;
loop
.
StandaloneClient
=
(
function
(
)
{
"
use
strict
"
;
var
expectedCallsProperties
=
[
"
sessionId
"
"
sessionToken
"
"
apiKey
"
]
;
function
StandaloneClient
(
settings
)
{
settings
=
settings
|
|
{
}
;
if
(
!
settings
.
baseServerUrl
)
{
throw
new
Error
(
"
missing
required
baseServerUrl
"
)
;
}
this
.
settings
=
settings
;
}
StandaloneClient
.
prototype
=
{
_validate
:
function
(
data
properties
)
{
if
(
typeof
data
!
=
=
"
object
"
)
{
throw
new
Error
(
"
Invalid
data
received
from
server
"
)
;
}
properties
.
forEach
(
function
(
property
)
{
if
(
!
data
.
hasOwnProperty
(
property
)
)
{
throw
new
Error
(
"
Invalid
data
received
from
server
-
missing
"
+
property
)
;
}
}
)
;
if
(
properties
.
length
=
=
=
1
)
{
return
data
[
properties
[
0
]
]
;
}
return
data
;
}
_failureHandler
:
function
(
cb
xhrReq
)
{
var
jsonErr
=
JSON
.
parse
(
xhrReq
.
responseText
&
&
xhrReq
.
responseText
|
|
"
{
}
"
)
;
var
message
=
"
HTTP
"
+
xhrReq
.
status
+
"
"
+
xhrReq
.
statusText
;
console
.
error
(
"
Server
error
"
message
jsonErr
)
;
var
err
=
new
Error
(
message
)
;
err
.
errno
=
jsonErr
.
errno
;
cb
(
err
)
;
}
requestCallUrlInfo
:
function
(
loopToken
cb
)
{
if
(
!
loopToken
)
{
throw
new
Error
(
"
Missing
required
parameter
loopToken
"
)
;
}
if
(
!
cb
)
{
throw
new
Error
(
"
Missing
required
callback
function
"
)
;
}
var
url
=
this
.
settings
.
baseServerUrl
+
"
/
calls
/
"
+
loopToken
;
var
xhrReq
=
new
XMLHttpRequest
(
)
;
xhrReq
.
open
(
"
GET
"
url
true
)
;
xhrReq
.
setRequestHeader
(
"
Content
-
type
"
"
application
/
json
"
)
;
xhrReq
.
onload
=
function
(
)
{
var
request
=
xhrReq
;
var
responseJSON
=
JSON
.
parse
(
request
.
responseText
|
|
null
)
;
if
(
request
.
readyState
=
=
=
4
&
&
request
.
status
>
=
200
&
&
request
.
status
<
300
)
{
try
{
cb
(
null
responseJSON
)
;
}
catch
(
err
)
{
console
.
error
(
"
Error
requesting
call
info
"
err
.
message
)
;
cb
(
err
)
;
}
}
else
{
this
.
_failureHandler
(
cb
request
)
;
}
}
.
bind
(
this
xhrReq
)
;
xhrReq
.
send
(
)
;
}
requestCallInfo
:
function
(
loopToken
callType
cb
)
{
if
(
!
loopToken
)
{
throw
new
Error
(
"
missing
required
parameter
loopToken
"
)
;
}
var
url
=
this
.
settings
.
baseServerUrl
+
"
/
calls
/
"
+
loopToken
;
var
xhrReq
=
new
XMLHttpRequest
(
)
;
xhrReq
.
open
(
"
POST
"
url
true
)
;
xhrReq
.
setRequestHeader
(
"
Content
-
type
"
"
application
/
json
"
)
;
xhrReq
.
onload
=
function
(
)
{
var
request
=
xhrReq
;
var
responseJSON
=
JSON
.
parse
(
request
.
responseText
|
|
null
)
;
if
(
request
.
readyState
=
=
=
4
&
&
request
.
status
>
=
200
&
&
request
.
status
<
300
)
{
try
{
cb
(
null
this
.
_validate
(
responseJSON
expectedCallsProperties
)
)
;
}
catch
(
err
)
{
console
.
error
(
"
Error
requesting
call
info
"
err
.
message
)
;
cb
(
err
)
;
}
}
else
{
this
.
_failureHandler
(
cb
request
)
;
}
}
.
bind
(
this
xhrReq
)
;
xhrReq
.
send
(
JSON
.
stringify
(
{
callType
:
callType
channel
:
"
standalone
"
}
)
)
;
}
}
;
return
StandaloneClient
;
}
)
(
)
;
