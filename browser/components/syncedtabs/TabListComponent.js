"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
let
log
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
{
}
)
.
Log
.
repository
.
getLogger
(
"
Sync
.
RemoteTabs
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
BrowserUITelemetry
"
"
resource
:
/
/
/
modules
/
BrowserUITelemetry
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
TabListComponent
"
]
;
function
TabListComponent
(
{
window
store
View
SyncedTabs
clipboardHelper
}
)
{
this
.
_window
=
window
;
this
.
_store
=
store
;
this
.
_View
=
View
;
this
.
_clipboardHelper
=
clipboardHelper
;
this
.
_SyncedTabs
=
SyncedTabs
;
}
TabListComponent
.
prototype
=
{
get
container
(
)
{
return
this
.
_view
.
container
;
}
init
(
)
{
log
.
debug
(
"
Initializing
TabListComponent
"
)
;
this
.
_view
=
new
this
.
_View
(
this
.
_window
{
onSelectRow
:
(
.
.
.
args
)
=
>
this
.
onSelectRow
(
.
.
.
args
)
onOpenTab
:
(
.
.
.
args
)
=
>
this
.
onOpenTab
(
.
.
.
args
)
onMoveSelectionDown
:
(
.
.
.
args
)
=
>
this
.
onMoveSelectionDown
(
.
.
.
args
)
onMoveSelectionUp
:
(
.
.
.
args
)
=
>
this
.
onMoveSelectionUp
(
.
.
.
args
)
onToggleBranch
:
(
.
.
.
args
)
=
>
this
.
onToggleBranch
(
.
.
.
args
)
onBookmarkTab
:
(
.
.
.
args
)
=
>
this
.
onBookmarkTab
(
.
.
.
args
)
onCopyTabLocation
:
(
.
.
.
args
)
=
>
this
.
onCopyTabLocation
(
.
.
.
args
)
onSyncRefresh
:
(
.
.
.
args
)
=
>
this
.
onSyncRefresh
(
.
.
.
args
)
onFilter
:
(
.
.
.
args
)
=
>
this
.
onFilter
(
.
.
.
args
)
onClearFilter
:
(
.
.
.
args
)
=
>
this
.
onClearFilter
(
.
.
.
args
)
onFilterFocus
:
(
.
.
.
args
)
=
>
this
.
onFilterFocus
(
.
.
.
args
)
onFilterBlur
:
(
.
.
.
args
)
=
>
this
.
onFilterBlur
(
.
.
.
args
)
}
)
;
this
.
_store
.
on
(
"
change
"
state
=
>
this
.
_view
.
render
(
state
)
)
;
this
.
_view
.
render
(
{
clients
:
[
]
}
)
;
this
.
_store
.
getData
(
)
;
this
.
_store
.
focusInput
(
)
;
}
uninit
(
)
{
this
.
_view
.
destroy
(
)
;
}
onFilter
(
query
)
{
this
.
_store
.
getData
(
query
)
;
}
onClearFilter
(
)
{
this
.
_store
.
clearFilter
(
)
;
}
onFilterFocus
(
)
{
this
.
_store
.
focusInput
(
)
;
}
onFilterBlur
(
)
{
this
.
_store
.
blurInput
(
)
;
}
onSelectRow
(
position
)
{
this
.
_store
.
selectRow
(
position
[
0
]
position
[
1
]
)
;
}
onMoveSelectionDown
(
)
{
this
.
_store
.
moveSelectionDown
(
)
;
}
onMoveSelectionUp
(
)
{
this
.
_store
.
moveSelectionUp
(
)
;
}
onToggleBranch
(
id
)
{
this
.
_store
.
toggleBranch
(
id
)
;
}
onBookmarkTab
(
uri
title
)
{
this
.
_window
.
top
.
PlacesCommandHook
.
bookmarkLink
(
this
.
_window
.
top
.
PlacesUtils
.
bookmarksMenuFolderId
uri
title
)
.
catch
(
Cu
.
reportError
)
;
}
onOpenTab
(
url
where
params
)
{
this
.
_window
.
openUILinkIn
(
url
where
params
)
;
BrowserUITelemetry
.
countSyncedTabEvent
(
"
open
"
"
sidebar
"
)
;
}
onCopyTabLocation
(
url
)
{
this
.
_clipboardHelper
.
copyString
(
url
)
;
}
onSyncRefresh
(
)
{
this
.
_SyncedTabs
.
syncTabs
(
true
)
;
}
}
;
