(
(
)
=
>
{
"
use
strict
"
;
var
__webpack_modules__
=
(
[
(
(
module
)
=
>
{
module
.
exports
=
React
;
}
)
(
(
module
)
=
>
{
module
.
exports
=
ReactDOM
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
AboutWelcomeUtils
"
:
(
)
=
>
(
AboutWelcomeUtils
)
"
DEFAULT_RTAMO_CONTENT
"
:
(
)
=
>
(
DEFAULT_RTAMO_CONTENT
)
}
)
;
const
page
=
document
.
querySelector
(
"
#
multi
-
stage
-
message
-
root
.
onboardingContainer
[
data
-
page
]
"
)
?
.
dataset
.
page
|
|
document
.
location
.
href
;
const
AboutWelcomeUtils
=
{
handleUserAction
(
action
)
{
return
window
.
AWSendToParent
(
"
SPECIAL_ACTION
"
action
)
;
}
sendImpressionTelemetry
(
messageId
context
)
{
window
.
AWSendEventTelemetry
?
.
(
{
event
:
"
IMPRESSION
"
event_context
:
{
.
.
.
context
page
}
message_id
:
messageId
}
)
;
}
sendActionTelemetry
(
messageId
elementId
eventName
=
"
CLICK_BUTTON
"
)
{
const
ping
=
{
event
:
eventName
event_context
:
{
source
:
elementId
page
}
message_id
:
messageId
}
;
window
.
AWSendEventTelemetry
?
.
(
ping
)
;
}
sendDismissTelemetry
(
messageId
elementId
)
{
if
(
page
!
=
=
"
spotlight
"
)
{
this
.
sendActionTelemetry
(
messageId
elementId
"
DISMISS
"
)
;
}
}
async
fetchFlowParams
(
metricsFlowUri
)
{
let
flowParams
;
try
{
const
response
=
await
fetch
(
metricsFlowUri
{
credentials
:
"
omit
"
}
)
;
if
(
response
.
status
=
=
=
200
)
{
const
{
deviceId
flowId
flowBeginTime
}
=
await
response
.
json
(
)
;
flowParams
=
{
deviceId
flowId
flowBeginTime
}
;
}
else
{
console
.
error
(
"
Non
-
200
response
"
response
)
;
}
}
catch
(
e
)
{
flowParams
=
null
;
}
return
flowParams
;
}
sendEvent
(
type
detail
)
{
document
.
dispatchEvent
(
new
CustomEvent
(
AWPage
:
{
type
}
{
bubbles
:
true
detail
}
)
)
;
}
getLoadingStrategyFor
(
url
)
{
return
url
?
.
startsWith
(
"
http
"
)
?
"
lazy
"
:
"
eager
"
;
}
}
;
const
DEFAULT_RTAMO_CONTENT
=
{
template
:
"
return_to_amo
"
utm_term
:
"
rtamo
"
content
:
{
position
:
"
split
"
title
:
{
string_id
:
"
mr1
-
return
-
to
-
amo
-
subtitle
"
}
has_noodles
:
false
subtitle
:
{
string_id
:
"
mr1
-
return
-
to
-
amo
-
addon
-
title
"
}
backdrop
:
"
var
(
-
-
mr
-
welcome
-
background
-
color
)
var
(
-
-
mr
-
welcome
-
background
-
gradient
)
"
background
:
"
url
(
'
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
mr
-
rtamo
-
background
-
image
.
svg
'
)
no
-
repeat
center
"
progress_bar
:
true
primary_button
:
{
label
:
{
string_id
:
"
mr1
-
return
-
to
-
amo
-
add
-
extension
-
label
"
}
source_id
:
"
ADD_EXTENSION_BUTTON
"
action
:
{
type
:
"
INSTALL_ADDON_FROM_URL
"
data
:
{
url
:
null
telemetrySource
:
"
rtamo
"
}
}
}
secondary_button
:
{
label
:
{
string_id
:
"
onboarding
-
not
-
now
-
button
-
label
"
}
source_id
:
"
RTAMO_START_BROWSING_BUTTON
"
action
:
{
type
:
"
OPEN_AWESOME_BAR
"
}
}
secondary_button_top
:
{
label
:
{
string_id
:
"
mr1
-
onboarding
-
sign
-
in
-
button
-
label
"
}
source_id
:
"
RTAMO_FXA_SIGNIN_BUTTON
"
action
:
{
data
:
{
entrypoint
:
"
activity
-
stream
-
firstrun
"
where
:
"
tab
"
}
type
:
"
SHOW_FIREFOX_ACCOUNTS
"
addFlowParams
:
true
}
}
}
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
MultiStageAboutWelcome
"
:
(
)
=
>
(
MultiStageAboutWelcome
)
"
SecondaryCTA
"
:
(
)
=
>
(
SecondaryCTA
)
"
StepsIndicator
"
:
(
)
=
>
(
StepsIndicator
)
"
ProgressBar
"
:
(
)
=
>
(
ProgressBar
)
"
WelcomeScreen
"
:
(
)
=
>
(
WelcomeScreen
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
3
)
;
var
_MultiStageProtonScreen__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
6
)
;
var
_LanguageSwitcher__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
10
)
;
var
_SubmenuButton__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
15
)
;
var
asrouter_content_src_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
19
)
;
const
TRANSITION_OUT_TIME
=
1000
;
const
LANGUAGE_MISMATCH_SCREEN_ID
=
"
AW_LANGUAGE_MISMATCH
"
;
const
MultiStageAboutWelcome
=
props
=
>
{
let
{
defaultScreens
}
=
props
;
const
didFilter
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useRef
)
(
false
)
;
const
[
didMount
setDidMount
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
false
)
;
const
[
screens
setScreens
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
defaultScreens
)
;
const
[
index
setScreenIndex
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
props
.
startScreen
)
;
const
[
previousOrder
setPreviousOrder
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
props
.
startScreen
-
1
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
(
async
(
)
=
>
{
if
(
!
didMount
)
{
return
;
}
let
screensVisited
=
didFilter
.
current
?
screens
.
slice
(
0
index
)
:
[
]
;
let
upcomingScreens
=
defaultScreens
.
filter
(
s
=
>
!
screensVisited
.
find
(
v
=
>
v
.
id
=
=
=
s
.
id
)
)
.
filter
(
upcomingScreen
=
>
!
(
!
screens
.
find
(
s
=
>
s
.
id
=
=
=
LANGUAGE_MISMATCH_SCREEN_ID
)
&
&
upcomingScreen
.
id
=
=
=
LANGUAGE_MISMATCH_SCREEN_ID
)
)
;
let
filteredScreens
=
screensVisited
.
concat
(
(
await
window
.
AWEvaluateScreenTargeting
(
upcomingScreens
)
)
?
?
upcomingScreens
)
;
setScreens
(
filteredScreens
.
map
(
filtered
=
>
screens
.
find
(
s
=
>
s
.
id
=
=
=
filtered
.
id
)
?
?
filtered
)
)
;
didFilter
.
current
=
true
;
const
screenInitials
=
filteredScreens
.
map
(
(
{
id
}
)
=
>
id
?
.
split
(
"
_
"
)
[
1
]
?
.
[
0
]
)
.
join
(
"
"
)
;
filteredScreens
.
forEach
(
(
screen
order
)
=
>
{
if
(
index
=
=
=
order
)
{
const
messageId
=
{
props
.
message_id
}
_
{
order
}
_
{
screen
.
id
}
_
{
screenInitials
}
;
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendImpressionTelemetry
(
messageId
{
screen_family
:
props
.
message_id
screen_index
:
order
screen_id
:
screen
.
id
screen_initials
:
screenInitials
}
)
;
window
.
AWAddScreenImpression
?
.
(
screen
)
;
}
}
)
;
if
(
props
.
updateHistory
&
&
index
>
window
.
history
.
state
)
{
window
.
history
.
pushState
(
index
"
"
)
;
}
setPreviousOrder
(
index
)
;
}
)
(
)
;
}
[
index
didMount
]
)
;
const
[
flowParams
setFlowParams
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
null
)
;
const
{
metricsFlowUri
}
=
props
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
(
async
(
)
=
>
{
if
(
metricsFlowUri
)
{
setFlowParams
(
await
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
fetchFlowParams
(
metricsFlowUri
)
)
;
}
}
)
(
)
;
}
[
metricsFlowUri
]
)
;
const
[
transition
setTransition
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
props
.
transitions
?
"
in
"
:
"
"
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
if
(
transition
=
=
=
"
in
"
)
{
requestAnimationFrame
(
(
)
=
>
requestAnimationFrame
(
(
)
=
>
setTransition
(
"
"
)
)
)
;
}
}
[
transition
]
)
;
const
handleTransition
=
(
)
=
>
{
if
(
transition
=
=
=
"
out
"
)
{
return
;
}
setTransition
(
props
.
transitions
?
"
out
"
:
"
"
)
;
setTimeout
(
(
)
=
>
{
if
(
index
<
screens
.
length
-
1
)
{
setTransition
(
props
.
transitions
?
"
in
"
:
"
"
)
;
setScreenIndex
(
prevState
=
>
prevState
+
1
)
;
}
else
{
window
.
AWFinish
(
)
;
}
}
props
.
transitions
?
TRANSITION_OUT_TIME
:
0
)
;
}
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
setDidMount
(
true
)
;
if
(
props
.
updateHistory
)
{
const
handler
=
(
{
state
}
)
=
>
{
if
(
transition
=
=
=
"
out
"
)
{
return
;
}
setTransition
(
props
.
transitions
?
"
out
"
:
"
"
)
;
setTimeout
(
(
)
=
>
{
setTransition
(
props
.
transitions
?
"
in
"
:
"
"
)
;
setScreenIndex
(
Math
.
min
(
state
screens
.
length
-
1
)
)
;
}
props
.
transitions
?
TRANSITION_OUT_TIME
:
0
)
;
}
;
const
{
state
}
=
window
.
history
;
if
(
state
)
{
setScreenIndex
(
Math
.
min
(
state
screens
.
length
-
1
)
)
;
setPreviousOrder
(
Math
.
min
(
state
screens
.
length
-
1
)
)
;
}
window
.
addEventListener
(
"
popstate
"
handler
)
;
return
(
)
=
>
window
.
removeEventListener
(
"
popstate
"
handler
)
;
}
return
false
;
}
[
]
)
;
const
[
activeMultiSelects
setActiveMultiSelects
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
{
}
)
;
const
[
activeTheme
setActiveTheme
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
null
)
;
const
[
initialTheme
setInitialTheme
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
null
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
(
async
(
)
=
>
{
let
theme
=
await
window
.
AWGetSelectedTheme
(
)
;
setInitialTheme
(
theme
)
;
setActiveTheme
(
theme
)
;
}
)
(
)
;
}
[
]
)
;
const
{
negotiatedLanguage
langPackInstallPhase
languageFilteredScreens
}
=
(
0
_LanguageSwitcher__WEBPACK_IMPORTED_MODULE_4__
.
useLanguageSwitcher
)
(
props
.
appAndSystemLocaleInfo
screens
index
setScreenIndex
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
setScreens
(
languageFilteredScreens
)
;
}
[
languageFilteredScreens
]
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
Fragment
)
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
outer
-
wrapper
onboardingContainer
proton
transition
-
{
transition
}
style
:
props
.
backdrop
?
{
background
:
props
.
backdrop
}
:
{
}
}
screens
.
map
(
(
screen
order
)
=
>
{
const
isFirstScreen
=
screen
=
=
=
screens
[
0
]
;
const
isLastScreen
=
screen
=
=
=
screens
[
screens
.
length
-
1
]
;
const
totalNumberOfScreens
=
screens
.
length
;
const
isSingleScreen
=
totalNumberOfScreens
=
=
=
1
;
const
setActiveMultiSelect
=
valueOrFn
=
>
setActiveMultiSelects
(
prevState
=
>
(
{
.
.
.
prevState
[
screen
.
id
]
:
typeof
valueOrFn
=
=
=
"
function
"
?
valueOrFn
(
prevState
[
screen
.
id
]
)
:
valueOrFn
}
)
)
;
return
index
=
=
=
order
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
WelcomeScreen
{
key
:
screen
.
id
+
order
id
:
screen
.
id
totalNumberOfScreens
:
totalNumberOfScreens
isFirstScreen
:
isFirstScreen
isLastScreen
:
isLastScreen
isSingleScreen
:
isSingleScreen
order
:
order
previousOrder
:
previousOrder
content
:
screen
.
content
navigate
:
handleTransition
messageId
:
{
props
.
message_id
}
_
{
order
}
_
{
screen
.
id
}
UTMTerm
:
props
.
utm_term
flowParams
:
flowParams
activeTheme
:
activeTheme
initialTheme
:
initialTheme
setActiveTheme
:
setActiveTheme
setInitialTheme
:
setInitialTheme
activeMultiSelect
:
activeMultiSelects
[
screen
.
id
]
setActiveMultiSelect
:
setActiveMultiSelect
autoAdvance
:
screen
.
auto_advance
negotiatedLanguage
:
negotiatedLanguage
langPackInstallPhase
:
langPackInstallPhase
forceHideStepsIndicator
:
screen
.
force_hide_steps_indicator
ariaRole
:
props
.
ariaRole
aboveButtonStepsIndicator
:
screen
.
above_button_steps_indicator
}
)
:
null
;
}
)
)
)
;
}
;
const
SecondaryCTA
=
props
=
>
{
const
targetElement
=
props
.
position
?
secondary_button_
{
props
.
position
}
:
secondary_button
;
let
buttonStyling
=
props
.
content
.
secondary_button
?
.
has_arrow_icon
?
secondary
arrow
-
icon
:
secondary
;
const
isPrimary
=
props
.
content
.
secondary_button
?
.
style
=
=
=
"
primary
"
;
const
isTextLink
=
!
[
"
split
"
"
callout
"
]
.
includes
(
props
.
content
.
position
)
&
&
props
.
content
.
tiles
?
.
type
!
=
=
"
addons
-
picker
"
&
&
!
isPrimary
;
const
isSplitButton
=
props
.
content
.
submenu_button
?
.
attached_to
=
=
=
targetElement
;
let
className
=
"
secondary
-
cta
"
;
if
(
props
.
position
)
{
className
+
=
{
props
.
position
}
;
}
if
(
isSplitButton
)
{
className
+
=
"
split
-
button
-
container
"
;
}
if
(
isTextLink
)
{
buttonStyling
+
=
"
text
-
link
"
;
}
if
(
isPrimary
)
{
buttonStyling
=
props
.
content
.
secondary_button
?
.
has_arrow_icon
?
primary
arrow
-
icon
:
primary
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
className
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
props
.
content
[
targetElement
]
.
text
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
span
"
null
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
props
.
content
[
targetElement
]
.
label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
buttonStyling
value
:
targetElement
onClick
:
props
.
handleAction
}
)
)
isSplitButton
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_SubmenuButton__WEBPACK_IMPORTED_MODULE_5__
.
SubmenuButton
{
content
:
props
.
content
handleAction
:
props
.
handleAction
}
)
:
null
)
;
}
;
const
StepsIndicator
=
props
=
>
{
let
steps
=
[
]
;
for
(
let
i
=
0
;
i
<
props
.
totalNumberOfScreens
;
i
+
+
)
{
let
className
=
{
i
=
=
=
props
.
order
?
"
current
"
:
"
"
}
{
i
<
props
.
order
?
"
complete
"
:
"
"
}
;
steps
.
push
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
key
:
i
className
:
indicator
{
className
}
role
:
"
presentation
"
}
)
)
;
}
return
steps
;
}
;
const
ProgressBar
=
(
{
step
previousStep
totalNumberOfScreens
}
)
=
>
{
const
[
progress
setProgress
]
=
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
useState
(
previousStep
/
totalNumberOfScreens
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
setProgress
(
step
/
totalNumberOfScreens
)
;
}
[
]
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
indicator
"
role
:
"
presentation
"
style
:
{
"
-
-
progress
-
bar
-
progress
"
:
{
progress
*
100
}
%
}
}
)
;
}
;
class
WelcomeScreen
extends
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleAction
=
this
.
handleAction
.
bind
(
this
)
;
}
handleOpenURL
(
action
flowParams
UTMTerm
)
{
let
{
type
data
}
=
action
;
if
(
type
=
=
=
"
SHOW_FIREFOX_ACCOUNTS
"
)
{
let
params
=
{
.
.
.
asrouter_content_src_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_6__
.
BASE_PARAMS
utm_term
:
{
UTMTerm
}
-
screen
}
;
if
(
action
.
addFlowParams
&
&
flowParams
)
{
params
=
{
.
.
.
params
.
.
.
flowParams
}
;
}
data
=
{
.
.
.
data
extraParams
:
params
}
;
}
else
if
(
type
=
=
=
"
OPEN_URL
"
)
{
let
url
=
new
URL
(
data
.
args
)
;
(
0
asrouter_content_src_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_6__
.
addUtmParams
)
(
url
{
UTMTerm
}
-
screen
)
;
if
(
action
.
addFlowParams
&
&
flowParams
)
{
url
.
searchParams
.
append
(
"
device_id
"
flowParams
.
deviceId
)
;
url
.
searchParams
.
append
(
"
flow_id
"
flowParams
.
flowId
)
;
url
.
searchParams
.
append
(
"
flow_begin_time
"
flowParams
.
flowBeginTime
)
;
}
data
=
{
.
.
.
data
args
:
url
.
toString
(
)
}
;
}
return
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
handleUserAction
(
{
type
data
}
)
;
}
async
handleAction
(
event
)
{
let
{
props
}
=
this
;
const
value
=
event
.
currentTarget
.
value
?
?
event
.
currentTarget
.
getAttribute
(
"
value
"
)
;
const
source
=
event
.
source
|
|
value
;
let
targetContent
=
props
.
content
[
value
]
|
|
props
.
content
.
tiles
|
|
props
.
content
.
languageSwitcher
;
if
(
value
=
=
=
"
submenu_button
"
&
&
event
.
action
)
{
targetContent
=
{
action
:
event
.
action
}
;
}
if
(
!
(
targetContent
&
&
targetContent
.
action
)
)
{
return
;
}
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendActionTelemetry
(
props
.
messageId
source
event
.
name
)
;
if
(
value
=
=
=
"
dismiss_button
"
&
&
!
event
.
name
)
{
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendDismissTelemetry
(
props
.
messageId
source
)
;
}
let
{
action
}
=
targetContent
;
action
=
JSON
.
parse
(
JSON
.
stringify
(
action
)
)
;
if
(
action
.
collectSelect
)
{
this
.
setMultiSelectActions
(
action
)
;
}
let
actionResult
;
if
(
[
"
OPEN_URL
"
"
SHOW_FIREFOX_ACCOUNTS
"
]
.
includes
(
action
.
type
)
)
{
actionResult
=
await
this
.
handleOpenURL
(
action
props
.
flowParams
props
.
UTMTerm
)
;
}
else
if
(
action
.
type
)
{
actionResult
=
await
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
handleUserAction
(
action
)
;
if
(
action
.
type
=
=
=
"
FXA_SIGNIN_FLOW
"
)
{
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendActionTelemetry
(
props
.
messageId
actionResult
?
"
sign_in
"
:
"
sign_in_cancel
"
"
FXA_SIGNIN_FLOW
"
)
;
}
const
hasMigrate
=
a
=
>
a
.
type
=
=
=
"
SHOW_MIGRATION_WIZARD
"
|
|
a
.
type
=
=
=
"
MULTI_ACTION
"
&
&
a
.
data
?
.
actions
?
.
some
(
hasMigrate
)
;
if
(
hasMigrate
(
action
)
)
{
await
window
.
AWWaitForMigrationClose
(
)
;
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendActionTelemetry
(
props
.
messageId
"
migrate_close
"
)
;
}
}
if
(
action
.
theme
)
{
let
themeToUse
=
action
.
theme
=
=
=
"
<
event
>
"
?
event
.
currentTarget
.
value
:
this
.
props
.
initialTheme
|
|
action
.
theme
;
this
.
props
.
setActiveTheme
(
themeToUse
)
;
window
.
AWSelectTheme
(
themeToUse
)
;
}
if
(
action
.
persistActiveTheme
)
{
this
.
props
.
setInitialTheme
(
this
.
props
.
activeTheme
)
;
}
const
shouldDoBehavior
=
behavior
=
>
behavior
=
=
=
"
actionResult
"
?
actionResult
:
behavior
;
if
(
shouldDoBehavior
(
action
.
navigate
)
)
{
props
.
navigate
(
)
;
}
if
(
shouldDoBehavior
(
action
.
dismiss
)
)
{
window
.
AWFinish
(
)
;
}
}
setMultiSelectActions
(
action
)
{
let
{
props
}
=
this
;
if
(
action
.
type
!
=
=
"
MULTI_ACTION
"
)
{
console
.
error
(
"
collectSelect
is
only
supported
for
MULTI_ACTION
type
actions
"
)
;
action
.
type
=
"
MULTI_ACTION
"
;
}
if
(
!
Array
.
isArray
(
action
.
data
?
.
actions
)
)
{
console
.
error
(
"
collectSelect
is
only
supported
for
MULTI_ACTION
type
actions
with
an
array
of
actions
"
)
;
action
.
data
=
{
actions
:
[
]
}
;
}
let
multiSelectActions
=
[
]
;
for
(
const
checkbox
of
props
.
content
?
.
tiles
?
.
data
?
?
[
]
)
{
let
checkboxAction
;
if
(
props
.
activeMultiSelect
?
.
includes
(
checkbox
.
id
)
)
{
checkboxAction
=
checkbox
.
checkedAction
?
?
checkbox
.
action
;
}
else
{
checkboxAction
=
checkbox
.
uncheckedAction
;
}
if
(
checkboxAction
)
{
multiSelectActions
.
push
(
checkboxAction
)
;
}
}
action
.
data
.
actions
.
unshift
(
.
.
.
multiSelectActions
)
;
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendActionTelemetry
(
props
.
messageId
props
.
activeMultiSelect
"
SELECT_CHECKBOX
"
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MultiStageProtonScreen__WEBPACK_IMPORTED_MODULE_3__
.
MultiStageProtonScreen
{
content
:
this
.
props
.
content
id
:
this
.
props
.
id
order
:
this
.
props
.
order
previousOrder
:
this
.
props
.
previousOrder
activeTheme
:
this
.
props
.
activeTheme
activeMultiSelect
:
this
.
props
.
activeMultiSelect
setActiveMultiSelect
:
this
.
props
.
setActiveMultiSelect
totalNumberOfScreens
:
this
.
props
.
totalNumberOfScreens
appAndSystemLocaleInfo
:
this
.
props
.
appAndSystemLocaleInfo
negotiatedLanguage
:
this
.
props
.
negotiatedLanguage
langPackInstallPhase
:
this
.
props
.
langPackInstallPhase
handleAction
:
this
.
handleAction
messageId
:
this
.
props
.
messageId
isFirstScreen
:
this
.
props
.
isFirstScreen
isLastScreen
:
this
.
props
.
isLastScreen
isSingleScreen
:
this
.
props
.
isSingleScreen
startsWithCorner
:
this
.
props
.
startsWithCorner
autoAdvance
:
this
.
props
.
autoAdvance
forceHideStepsIndicator
:
this
.
props
.
forceHideStepsIndicator
ariaRole
:
this
.
props
.
ariaRole
aboveButtonStepsIndicator
:
this
.
props
.
aboveButtonStepsIndicator
}
)
;
}
}
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
CONFIGURABLE_STYLES
"
:
(
)
=
>
(
CONFIGURABLE_STYLES
)
"
Localized
"
:
(
)
=
>
(
Localized
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
const
CONFIGURABLE_STYLES
=
[
"
color
"
"
fontSize
"
"
fontWeight
"
"
letterSpacing
"
"
lineHeight
"
"
marginBlock
"
"
marginInline
"
"
paddingBlock
"
"
paddingInline
"
"
whiteSpace
"
]
;
const
ZAP_SIZE_THRESHOLD
=
160
;
const
Localized
=
(
{
text
children
}
)
=
>
{
const
zapRef
=
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createRef
(
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
const
{
current
}
=
zapRef
;
if
(
current
)
{
requestAnimationFrame
(
(
)
=
>
current
?
.
classList
.
replace
(
"
short
"
current
.
getBoundingClientRect
(
)
.
width
>
ZAP_SIZE_THRESHOLD
?
"
long
"
:
"
short
"
)
)
;
}
}
)
;
if
(
!
text
)
{
return
null
;
}
const
props
=
{
children
:
[
]
className
:
"
"
style
:
{
}
.
.
.
children
?
.
props
}
;
const
textNodes
=
Array
.
isArray
(
props
.
children
)
?
props
.
children
:
[
props
.
children
]
;
if
(
text
.
string_id
)
{
props
.
key
=
text
.
string_id
;
props
[
"
data
-
l10n
-
id
"
]
=
text
.
string_id
;
if
(
text
.
args
)
{
props
[
"
data
-
l10n
-
args
"
]
=
JSON
.
stringify
(
text
.
args
)
;
}
}
else
if
(
text
.
raw
)
{
textNodes
.
push
(
text
.
raw
)
;
}
else
if
(
typeof
text
=
=
=
"
string
"
)
{
textNodes
.
push
(
text
)
;
}
if
(
text
.
zap
)
{
props
.
className
+
=
"
welcomeZap
"
;
textNodes
.
push
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
span
"
{
className
:
"
short
zap
"
"
data
-
l10n
-
name
"
:
"
zap
"
ref
:
zapRef
}
text
.
zap
)
)
;
}
if
(
text
.
aria_label
)
{
props
[
"
aria
-
label
"
]
=
text
.
aria_label
;
}
CONFIGURABLE_STYLES
.
forEach
(
style
=
>
{
if
(
text
[
style
]
!
=
=
undefined
)
{
props
.
style
[
style
]
=
text
[
style
]
;
}
}
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
cloneElement
(
children
?
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
span
"
null
)
props
textNodes
.
length
?
textNodes
:
null
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
MultiStageProtonScreen
"
:
(
)
=
>
(
MultiStageProtonScreen
)
"
ProtonScreenActionButtons
"
:
(
)
=
>
(
ProtonScreenActionButtons
)
"
ProtonScreen
"
:
(
)
=
>
(
ProtonScreen
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
3
)
;
var
_MobileDownloads__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
7
)
;
var
_MultiSelect__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
8
)
;
var
_Themes__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
9
)
;
var
_MultiStageAboutWelcome__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
4
)
;
var
_LanguageSwitcher__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
10
)
;
var
_CTAParagraph__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
11
)
;
var
_HeroImage__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
12
)
;
var
_OnboardingVideo__WEBPACK_IMPORTED_MODULE_10__
=
__webpack_require__
(
13
)
;
var
_AdditionalCTA__WEBPACK_IMPORTED_MODULE_11__
=
__webpack_require__
(
14
)
;
var
_EmbeddedMigrationWizard__WEBPACK_IMPORTED_MODULE_12__
=
__webpack_require__
(
16
)
;
var
_AddonsPicker__WEBPACK_IMPORTED_MODULE_13__
=
__webpack_require__
(
17
)
;
var
_LinkParagraph__WEBPACK_IMPORTED_MODULE_14__
=
__webpack_require__
(
18
)
;
const
MultiStageProtonScreen
=
props
=
>
{
const
{
autoAdvance
handleAction
order
}
=
props
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
if
(
autoAdvance
)
{
const
timer
=
setTimeout
(
(
)
=
>
{
handleAction
(
{
currentTarget
:
{
value
:
autoAdvance
}
name
:
"
AUTO_ADVANCE
"
}
)
;
}
20000
)
;
return
(
)
=
>
clearTimeout
(
timer
)
;
}
return
(
)
=
>
{
}
;
}
[
autoAdvance
handleAction
order
]
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
ProtonScreen
{
content
:
props
.
content
id
:
props
.
id
order
:
props
.
order
activeTheme
:
props
.
activeTheme
activeMultiSelect
:
props
.
activeMultiSelect
setActiveMultiSelect
:
props
.
setActiveMultiSelect
totalNumberOfScreens
:
props
.
totalNumberOfScreens
handleAction
:
props
.
handleAction
isFirstScreen
:
props
.
isFirstScreen
isLastScreen
:
props
.
isLastScreen
isSingleScreen
:
props
.
isSingleScreen
previousOrder
:
props
.
previousOrder
autoAdvance
:
props
.
autoAdvance
isRtamo
:
props
.
isRtamo
addonName
:
props
.
addonName
isTheme
:
props
.
isTheme
iconURL
:
props
.
iconURL
messageId
:
props
.
messageId
negotiatedLanguage
:
props
.
negotiatedLanguage
langPackInstallPhase
:
props
.
langPackInstallPhase
forceHideStepsIndicator
:
props
.
forceHideStepsIndicator
ariaRole
:
props
.
ariaRole
aboveButtonStepsIndicator
:
props
.
aboveButtonStepsIndicator
}
)
;
}
;
const
ProtonScreenActionButtons
=
props
=
>
{
const
{
content
addonName
activeMultiSelect
}
=
props
;
const
defaultValue
=
content
.
checkbox
?
.
defaultValue
;
const
[
isChecked
setIsChecked
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
defaultValue
|
|
false
)
;
const
buttonRef
=
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
useRef
(
null
)
;
const
shouldFocusButton
=
content
?
.
primary_button
?
.
should_focus_button
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
if
(
shouldFocusButton
)
{
buttonRef
.
current
?
.
focus
(
)
;
}
}
[
shouldFocusButton
]
)
;
if
(
!
content
.
primary_button
&
&
!
content
.
secondary_button
&
&
!
content
.
additional_button
)
{
return
null
;
}
const
isPrimaryDisabled
=
primaryDisabledValue
=
>
primaryDisabledValue
=
=
=
"
hasActiveMultiSelect
"
?
!
(
activeMultiSelect
?
.
length
>
0
)
:
primaryDisabledValue
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
action
-
buttons
{
content
.
additional_button
?
"
additional
-
cta
-
container
"
:
"
"
}
flow
:
content
.
additional_button
?
.
flow
alignment
:
content
.
additional_button
?
.
alignment
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
primary_button
?
.
label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
ref
:
buttonRef
className
:
{
content
.
primary_button
?
.
style
?
?
"
primary
"
}
{
content
.
primary_button
?
.
has_arrow_icon
?
"
arrow
-
icon
"
:
"
"
}
value
:
isChecked
?
"
checkbox
"
:
"
primary_button
"
disabled
:
isPrimaryDisabled
(
content
.
primary_button
?
.
disabled
)
onClick
:
props
.
handleAction
"
data
-
l10n
-
args
"
:
addonName
?
JSON
.
stringify
(
{
"
addon
-
name
"
:
addonName
}
)
:
"
"
}
)
)
content
.
additional_button
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_AdditionalCTA__WEBPACK_IMPORTED_MODULE_11__
.
AdditionalCTA
{
content
:
content
handleAction
:
props
.
handleAction
}
)
:
null
content
.
checkbox
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
checkbox
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
id
:
"
action
-
checkbox
"
checked
:
isChecked
onChange
:
(
)
=
>
{
setIsChecked
(
!
isChecked
)
;
}
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
checkbox
.
label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
label
"
{
htmlFor
:
"
action
-
checkbox
"
}
)
)
)
:
null
content
.
secondary_button
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MultiStageAboutWelcome__WEBPACK_IMPORTED_MODULE_6__
.
SecondaryCTA
{
content
:
content
handleAction
:
props
.
handleAction
}
)
:
null
)
;
}
;
class
ProtonScreen
extends
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
PureComponent
)
{
componentDidMount
(
)
{
this
.
mainContentHeader
.
focus
(
)
;
}
getScreenClassName
(
isFirstScreen
isLastScreen
includeNoodles
isVideoOnboarding
isAddonsPicker
)
{
const
screenClass
=
screen
-
{
this
.
props
.
order
%
2
!
=
=
0
?
1
:
2
}
;
if
(
isVideoOnboarding
)
{
return
"
with
-
video
"
;
}
if
(
isAddonsPicker
)
{
return
"
addons
-
picker
"
;
}
return
{
isFirstScreen
?
dialog
-
initial
:
}
{
isLastScreen
?
dialog
-
last
:
}
{
includeNoodles
?
with
-
noodles
:
}
{
screenClass
}
;
}
renderTitle
(
{
title
title_logo
}
)
{
if
(
title_logo
)
{
const
{
alignment
.
.
.
rest
}
=
title_logo
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
inline
-
icon
-
container
"
alignment
:
alignment
?
?
"
center
"
}
this
.
renderPicture
(
{
.
.
.
rest
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
title
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
h1
"
{
id
:
"
mainContentHeader
"
}
)
)
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
title
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
h1
"
{
id
:
"
mainContentHeader
"
}
)
)
;
}
renderPicture
(
{
imageURL
=
"
chrome
:
/
/
branding
/
content
/
about
-
logo
.
svg
"
darkModeImageURL
reducedMotionImageURL
darkModeReducedMotionImageURL
alt
=
"
"
width
height
marginBlock
marginInline
className
=
"
logo
-
container
"
}
)
{
function
getLoadingStrategy
(
)
{
for
(
let
url
of
[
imageURL
darkModeImageURL
reducedMotionImageURL
darkModeReducedMotionImageURL
]
)
{
if
(
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
getLoadingStrategyFor
(
url
)
=
=
=
"
lazy
"
)
{
return
"
lazy
"
;
}
}
return
"
eager
"
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
picture
"
{
className
:
className
style
:
{
marginInline
marginBlock
}
}
darkModeReducedMotionImageURL
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
source
"
{
srcSet
:
darkModeReducedMotionImageURL
media
:
"
(
prefers
-
color
-
scheme
:
dark
)
and
(
prefers
-
reduced
-
motion
:
reduce
)
"
}
)
:
null
darkModeImageURL
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
source
"
{
srcSet
:
darkModeImageURL
media
:
"
(
prefers
-
color
-
scheme
:
dark
)
"
}
)
:
null
reducedMotionImageURL
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
source
"
{
srcSet
:
reducedMotionImageURL
media
:
"
(
prefers
-
reduced
-
motion
:
reduce
)
"
}
)
:
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
alt
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
sr
-
only
logo
-
alt
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
img
"
{
className
:
"
brand
-
logo
"
style
:
{
height
width
}
src
:
imageURL
alt
:
"
"
loading
:
getLoadingStrategy
(
)
role
:
alt
?
null
:
"
presentation
"
}
)
)
;
}
renderContentTiles
(
)
{
const
{
content
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
Fragment
)
null
content
.
tiles
&
&
content
.
tiles
.
type
=
=
=
"
addons
-
picker
"
&
&
content
.
tiles
.
data
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_AddonsPicker__WEBPACK_IMPORTED_MODULE_13__
.
AddonsPicker
{
content
:
content
message_id
:
this
.
props
.
messageId
handleAction
:
this
.
props
.
handleAction
}
)
:
null
content
.
tiles
&
&
content
.
tiles
.
type
=
=
=
"
theme
"
&
&
content
.
tiles
.
data
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_Themes__WEBPACK_IMPORTED_MODULE_5__
.
Themes
{
content
:
content
activeTheme
:
this
.
props
.
activeTheme
handleAction
:
this
.
props
.
handleAction
}
)
:
null
content
.
tiles
&
&
content
.
tiles
.
type
=
=
=
"
mobile_downloads
"
&
&
content
.
tiles
.
data
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MobileDownloads__WEBPACK_IMPORTED_MODULE_3__
.
MobileDownloads
{
data
:
content
.
tiles
.
data
handleAction
:
this
.
props
.
handleAction
}
)
:
null
content
.
tiles
&
&
content
.
tiles
.
type
=
=
=
"
multiselect
"
&
&
content
.
tiles
.
data
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MultiSelect__WEBPACK_IMPORTED_MODULE_4__
.
MultiSelect
{
content
:
content
activeMultiSelect
:
this
.
props
.
activeMultiSelect
setActiveMultiSelect
:
this
.
props
.
setActiveMultiSelect
handleAction
:
this
.
props
.
handleAction
}
)
:
null
content
.
tiles
&
&
content
.
tiles
.
type
=
=
=
"
migration
-
wizard
"
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_EmbeddedMigrationWizard__WEBPACK_IMPORTED_MODULE_12__
.
EmbeddedMigrationWizard
{
handleAction
:
this
.
props
.
handleAction
}
)
:
null
)
;
}
renderNoodles
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
Fragment
)
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
noodle
orange
-
L
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
noodle
purple
-
C
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
noodle
solid
-
L
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
noodle
outline
-
L
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
noodle
yellow
-
circle
"
}
)
)
;
}
renderLanguageSwitcher
(
)
{
return
this
.
props
.
content
.
languageSwitcher
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_LanguageSwitcher__WEBPACK_IMPORTED_MODULE_7__
.
LanguageSwitcher
{
content
:
this
.
props
.
content
handleAction
:
this
.
props
.
handleAction
negotiatedLanguage
:
this
.
props
.
negotiatedLanguage
langPackInstallPhase
:
this
.
props
.
langPackInstallPhase
messageId
:
this
.
props
.
messageId
}
)
:
null
;
}
renderDismissButton
(
)
{
const
{
size
marginBlock
marginInline
label
}
=
this
.
props
.
content
.
dismiss_button
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
"
dismiss
-
button
"
onClick
:
this
.
props
.
handleAction
value
:
"
dismiss_button
"
"
data
-
l10n
-
id
"
:
label
?
.
string_id
|
|
"
spotlight
-
dialog
-
close
-
button
"
"
button
-
size
"
:
size
style
:
{
marginBlock
marginInline
}
}
)
;
}
renderStepsIndicator
(
)
{
const
currentStep
=
(
this
.
props
.
order
?
?
0
)
+
1
;
const
previousStep
=
(
this
.
props
.
previousOrder
?
?
-
1
)
+
1
;
const
{
content
totalNumberOfScreens
:
total
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
id
:
"
steps
"
className
:
steps
{
content
.
progress_bar
?
"
progress
-
bar
"
:
"
"
}
"
data
-
l10n
-
id
"
:
content
.
steps_indicator
?
.
string_id
|
|
"
onboarding
-
welcome
-
steps
-
indicator
-
label
"
"
data
-
l10n
-
args
"
:
JSON
.
stringify
(
{
current
:
currentStep
total
:
total
?
?
0
}
)
"
data
-
l10n
-
attrs
"
:
"
aria
-
label
"
role
:
"
progressbar
"
"
aria
-
valuenow
"
:
currentStep
"
aria
-
valuemin
"
:
1
"
aria
-
valuemax
"
:
total
}
content
.
progress_bar
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MultiStageAboutWelcome__WEBPACK_IMPORTED_MODULE_6__
.
ProgressBar
{
step
:
currentStep
previousStep
:
previousStep
totalNumberOfScreens
:
total
}
)
:
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MultiStageAboutWelcome__WEBPACK_IMPORTED_MODULE_6__
.
StepsIndicator
{
order
:
this
.
props
.
order
totalNumberOfScreens
:
total
}
)
)
;
}
renderSecondarySection
(
content
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
section
-
secondary
{
content
.
hide_secondary_section
?
"
with
-
secondary
-
section
-
hidden
"
:
"
"
}
style
:
content
.
background
?
{
background
:
content
.
background
"
-
-
mr
-
secondary
-
background
-
position
-
y
"
:
content
.
split_narrow_bkg_position
}
:
{
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
image_alt_text
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
sr
-
only
image
-
alt
"
role
:
"
img
"
}
)
)
content
.
hero_image
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_HeroImage__WEBPACK_IMPORTED_MODULE_9__
.
HeroImage
{
url
:
content
.
hero_image
.
url
}
)
:
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
Fragment
)
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
message
-
text
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
spacer
-
top
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
hero_text
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
h1
"
null
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
spacer
-
bottom
"
}
)
)
)
)
;
}
renderOrderedContent
(
content
)
{
const
elements
=
[
]
;
for
(
const
item
of
content
)
{
switch
(
item
.
type
)
{
case
"
text
"
:
elements
.
push
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_LinkParagraph__WEBPACK_IMPORTED_MODULE_14__
.
LinkParagraph
{
text_content
:
item
handleAction
:
this
.
props
.
handleAction
}
)
)
;
break
;
case
"
image
"
:
elements
.
push
(
this
.
renderPicture
(
{
imageURL
:
item
.
url
darkModeImageURL
:
item
.
darkModeImageURL
height
:
item
.
height
width
:
item
.
width
alt
:
item
.
alt_text
marginInline
:
item
.
marginInline
className
:
"
inline
-
image
"
}
)
)
;
}
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
Fragment
)
null
elements
)
;
}
render
(
)
{
const
{
autoAdvance
content
isRtamo
isTheme
isFirstScreen
isLastScreen
isSingleScreen
forceHideStepsIndicator
ariaRole
aboveButtonStepsIndicator
}
=
this
.
props
;
const
includeNoodles
=
content
.
has_noodles
;
const
isCenterPosition
=
content
.
position
=
=
=
"
center
"
|
|
!
content
.
position
;
const
hideStepsIndicator
=
autoAdvance
|
|
content
?
.
video_container
|
|
isSingleScreen
|
|
forceHideStepsIndicator
;
const
textColorClass
=
content
.
text_color
?
{
content
.
text_color
}
-
text
:
"
"
;
const
screenClassName
=
isCenterPosition
?
this
.
getScreenClassName
(
isFirstScreen
isLastScreen
includeNoodles
content
?
.
video_container
content
.
tiles
?
.
type
=
=
=
"
addons
-
picker
"
)
:
"
"
;
const
isEmbeddedMigration
=
content
.
tiles
?
.
type
=
=
=
"
migration
-
wizard
"
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
main
"
{
className
:
screen
{
this
.
props
.
id
|
|
"
"
}
{
screenClassName
}
{
textColorClass
}
role
:
ariaRole
?
?
"
alertdialog
"
layout
:
content
.
layout
pos
:
content
.
position
|
|
"
center
"
tabIndex
:
"
-
1
"
"
aria
-
labelledby
"
:
"
mainContentHeader
"
ref
:
input
=
>
{
this
.
mainContentHeader
=
input
;
}
}
isCenterPosition
?
null
:
this
.
renderSecondarySection
(
content
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
section
-
main
{
isEmbeddedMigration
?
"
embedded
-
migration
"
:
"
"
}
"
hide
-
secondary
-
section
"
:
content
.
hide_secondary_section
?
String
(
content
.
hide_secondary_section
)
:
null
role
:
"
document
"
}
content
.
secondary_button_top
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MultiStageAboutWelcome__WEBPACK_IMPORTED_MODULE_6__
.
SecondaryCTA
{
content
:
content
handleAction
:
this
.
props
.
handleAction
position
:
"
top
"
}
)
:
null
includeNoodles
?
this
.
renderNoodles
(
)
:
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
main
-
content
{
hideStepsIndicator
?
"
no
-
steps
"
:
"
"
}
style
:
{
background
:
content
.
background
&
&
isCenterPosition
?
content
.
background
:
null
width
:
content
.
width
&
&
content
.
position
!
=
=
"
split
"
?
content
.
width
:
null
}
}
content
.
logo
?
this
.
renderPicture
(
content
.
logo
)
:
null
isRtamo
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
rtamo
-
icon
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
img
"
{
className
:
{
isTheme
?
"
rtamo
-
theme
-
icon
"
:
"
brand
-
logo
"
}
src
:
this
.
props
.
iconURL
loading
:
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
getLoadingStrategyFor
(
this
.
props
.
iconURL
)
alt
:
"
"
role
:
"
presentation
"
}
)
)
:
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
main
-
content
-
inner
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
welcome
-
text
{
content
.
title_style
|
|
"
"
}
}
content
.
title
?
this
.
renderTitle
(
content
)
:
null
content
.
subtitle
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
subtitle
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
h2
"
{
"
data
-
l10n
-
args
"
:
JSON
.
stringify
(
{
"
addon
-
name
"
:
this
.
props
.
addonName
.
.
.
this
.
props
.
appAndSystemLocaleInfo
?
.
displayNames
}
)
"
aria
-
flowto
"
:
this
.
props
.
messageId
?
.
includes
(
"
FEATURE_TOUR
"
)
?
"
steps
"
:
"
"
}
)
)
:
null
content
.
cta_paragraph
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_CTAParagraph__WEBPACK_IMPORTED_MODULE_8__
.
CTAParagraph
{
content
:
content
.
cta_paragraph
handleAction
:
this
.
props
.
handleAction
}
)
:
null
)
content
.
video_container
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_OnboardingVideo__WEBPACK_IMPORTED_MODULE_10__
.
OnboardingVideo
{
content
:
content
.
video_container
handleAction
:
this
.
props
.
handleAction
}
)
:
null
content
.
above_button_content
?
this
.
renderOrderedContent
(
content
.
above_button_content
)
:
null
this
.
renderContentTiles
(
)
this
.
renderLanguageSwitcher
(
)
!
hideStepsIndicator
&
&
aboveButtonStepsIndicator
?
this
.
renderStepsIndicator
(
)
:
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
ProtonScreenActionButtons
{
content
:
content
addonName
:
this
.
props
.
addonName
handleAction
:
this
.
props
.
handleAction
activeMultiSelect
:
this
.
props
.
activeMultiSelect
}
)
)
!
hideStepsIndicator
&
&
!
aboveButtonStepsIndicator
?
this
.
renderStepsIndicator
(
)
:
null
)
content
.
dismiss_button
?
this
.
renderDismissButton
(
)
:
null
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
info_text
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
span
"
{
className
:
"
info
-
text
"
}
)
)
)
;
}
}
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
MarketplaceButtons
"
:
(
)
=
>
(
MarketplaceButtons
)
"
MobileDownloads
"
:
(
)
=
>
(
MobileDownloads
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
3
)
;
const
MarketplaceButtons
=
props
=
>
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
ul
"
{
className
:
"
mobile
-
download
-
buttons
"
}
props
.
buttons
.
includes
(
"
ios
"
)
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
li
"
{
className
:
"
ios
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
"
data
-
l10n
-
id
"
:
"
spotlight
-
ios
-
marketplace
-
button
"
value
:
"
ios
"
onClick
:
props
.
handleAction
}
)
)
:
null
props
.
buttons
.
includes
(
"
android
"
)
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
li
"
{
className
:
"
android
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
"
data
-
l10n
-
id
"
:
"
spotlight
-
android
-
marketplace
-
button
"
value
:
"
android
"
onClick
:
props
.
handleAction
}
)
)
:
null
)
;
}
;
const
MobileDownloads
=
props
=
>
{
const
{
QR_code
:
QRCode
}
=
props
.
data
;
const
showEmailLink
=
props
.
data
.
email
&
&
window
.
AWSendToDeviceEmailsSupported
(
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
mobile
-
downloads
"
}
QRCode
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
img
"
{
"
data
-
l10n
-
id
"
:
QRCode
.
alt_text
.
string_id
?
QRCode
.
alt_text
.
string_id
:
null
className
:
"
qr
-
code
-
image
"
alt
:
typeof
QRCode
.
alt_text
=
=
=
"
string
"
?
QRCode
.
alt_text
:
"
"
src
:
QRCode
.
image_url
loading
:
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
getLoadingStrategyFor
(
QRCode
.
image_url
)
}
)
:
null
showEmailLink
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
props
.
data
.
email
.
link_text
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
"
email
-
link
"
value
:
"
email_link
"
onClick
:
props
.
handleAction
}
)
)
)
:
null
props
.
data
.
marketplace_buttons
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
MarketplaceButtons
{
buttons
:
props
.
data
.
marketplace_buttons
handleAction
:
props
.
handleAction
}
)
:
null
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
MultiSelect
"
:
(
)
=
>
(
MultiSelect
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
const
MULTI_SELECT_STYLES
=
[
.
.
.
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
CONFIGURABLE_STYLES
"
flexDirection
"
"
flexWrap
"
"
flexFlow
"
"
flexGrow
"
"
flexShrink
"
"
justifyContent
"
"
alignItems
"
"
gap
"
]
;
const
MULTI_SELECT_ICON_STYLES
=
[
.
.
.
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
CONFIGURABLE_STYLES
"
width
"
"
height
"
"
background
"
"
backgroundColor
"
"
backgroundImage
"
"
backgroundSize
"
"
backgroundPosition
"
"
backgroundRepeat
"
"
backgroundOrigin
"
"
backgroundClip
"
"
border
"
"
borderRadius
"
"
appearance
"
"
fill
"
"
stroke
"
"
outline
"
"
outlineOffset
"
"
boxShadow
"
]
;
function
getValidStyle
(
style
validStyles
allowVars
)
{
if
(
!
style
)
{
return
null
;
}
return
Object
.
keys
(
style
)
.
filter
(
key
=
>
validStyles
.
includes
(
key
)
|
|
allowVars
&
&
key
.
startsWith
(
"
-
-
"
)
)
.
reduce
(
(
obj
key
)
=
>
{
obj
[
key
]
=
style
[
key
]
;
return
obj
;
}
{
}
)
;
}
const
MultiSelect
=
(
{
content
activeMultiSelect
setActiveMultiSelect
}
)
=
>
{
const
{
data
}
=
content
.
tiles
;
const
refs
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useRef
)
(
{
}
)
;
const
handleChange
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useCallback
)
(
(
)
=
>
{
const
newActiveMultiSelect
=
[
]
;
Object
.
keys
(
refs
.
current
)
.
forEach
(
key
=
>
{
if
(
refs
.
current
[
key
]
?
.
checked
)
{
newActiveMultiSelect
.
push
(
key
)
;
}
}
)
;
setActiveMultiSelect
(
newActiveMultiSelect
)
;
}
[
setActiveMultiSelect
]
)
;
const
containerStyle
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useMemo
)
(
(
)
=
>
getValidStyle
(
content
.
tiles
.
style
MULTI_SELECT_STYLES
true
)
[
content
.
tiles
.
style
]
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
if
(
!
activeMultiSelect
)
{
let
newActiveMultiSelect
=
[
]
;
data
.
forEach
(
(
{
id
defaultValue
}
)
=
>
{
if
(
defaultValue
&
&
id
)
{
newActiveMultiSelect
.
push
(
id
)
;
}
}
)
;
setActiveMultiSelect
(
newActiveMultiSelect
)
;
}
}
[
]
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
multi
-
select
-
container
"
style
:
containerStyle
}
data
.
map
(
(
{
id
label
icon
type
=
"
checkbox
"
group
style
}
)
=
>
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
key
:
id
+
label
className
:
"
checkbox
-
container
multi
-
select
-
item
"
style
:
getValidStyle
(
style
MULTI_SELECT_STYLES
)
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
input
"
{
type
:
type
id
:
id
value
:
id
name
:
group
checked
:
activeMultiSelect
?
.
includes
(
id
)
style
:
getValidStyle
(
icon
?
.
style
MULTI_SELECT_ICON_STYLES
)
onChange
:
handleChange
ref
:
el
=
>
refs
.
current
[
id
]
=
el
}
)
label
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
label
"
{
htmlFor
:
id
}
)
)
:
null
)
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
Themes
"
:
(
)
=
>
(
Themes
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
const
Themes
=
props
=
>
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
tiles
-
theme
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
fieldset
"
{
className
:
"
tiles
-
theme
-
section
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
props
.
content
.
subtitle
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
legend
"
{
className
:
"
sr
-
only
"
}
)
)
props
.
content
.
tiles
.
data
.
map
(
(
{
theme
label
tooltip
description
}
)
=
>
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
key
:
theme
+
label
text
:
typeof
tooltip
=
=
=
"
object
"
?
tooltip
:
{
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
label
"
{
className
:
"
theme
"
title
:
theme
+
label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
typeof
description
=
=
=
"
object
"
?
description
:
{
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
input
"
{
type
:
"
radio
"
value
:
theme
name
:
"
theme
"
checked
:
theme
=
=
=
props
.
activeTheme
className
:
"
sr
-
only
input
"
onClick
:
props
.
handleAction
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
icon
{
theme
=
=
=
props
.
activeTheme
?
"
selected
"
:
"
"
}
{
theme
}
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
text
"
}
)
)
)
)
)
)
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
useLanguageSwitcher
"
:
(
)
=
>
(
useLanguageSwitcher
)
"
LanguageSwitcher
"
:
(
)
=
>
(
LanguageSwitcher
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
3
)
;
function
useLanguageSwitcher
(
appAndSystemLocaleInfo
screens
screenIndex
setScreenIndex
)
{
const
languageMismatchScreenIndex
=
screens
.
findIndex
(
(
{
id
}
)
=
>
id
=
=
=
"
AW_LANGUAGE_MISMATCH
"
)
;
const
screen
=
screens
[
languageMismatchScreenIndex
]
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
if
(
screen
?
.
content
?
.
languageSwitcher
)
{
for
(
const
text
of
Object
.
values
(
screen
.
content
.
languageSwitcher
)
)
{
if
(
text
?
.
args
&
&
text
.
args
.
negotiatedLanguage
=
=
=
undefined
)
{
text
.
args
.
negotiatedLanguage
=
"
"
;
}
}
}
}
[
screen
]
)
;
const
[
negotiatedLanguage
setNegotiatedLanguage
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
null
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
function
getNegotiatedLanguage
(
)
{
if
(
!
appAndSystemLocaleInfo
)
{
return
;
}
if
(
appAndSystemLocaleInfo
.
matchType
!
=
=
"
language
-
mismatch
"
)
{
return
;
}
(
async
(
)
=
>
{
const
{
langPack
langPackDisplayName
}
=
await
window
.
AWNegotiateLangPackForLanguageMismatch
(
appAndSystemLocaleInfo
)
;
if
(
langPack
)
{
setNegotiatedLanguage
(
{
langPackDisplayName
appDisplayName
:
appAndSystemLocaleInfo
.
displayNames
.
appLanguage
langPack
requestSystemLocales
:
[
langPack
.
target_locale
appAndSystemLocaleInfo
.
appLocaleRaw
]
originalAppLocales
:
[
appAndSystemLocaleInfo
.
appLocaleRaw
]
}
)
;
}
else
{
setNegotiatedLanguage
(
{
langPackDisplayName
:
null
appDisplayName
:
null
langPack
:
null
requestSystemLocales
:
null
}
)
;
}
}
)
(
)
;
}
[
appAndSystemLocaleInfo
]
)
;
const
[
langPackInstallPhase
setLangPackInstallPhase
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
"
before
-
installation
"
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
function
ensureLangPackInstalled
(
)
{
if
(
!
negotiatedLanguage
)
{
return
;
}
setLangPackInstallPhase
(
"
installing
"
)
;
window
.
AWEnsureLangPackInstalled
(
negotiatedLanguage
screen
?
.
content
)
.
then
(
content
=
>
{
screen
.
content
=
content
;
setLangPackInstallPhase
(
"
installed
"
)
;
}
error
=
>
{
console
.
error
(
error
)
;
setLangPackInstallPhase
(
"
installation
-
error
"
)
;
}
)
;
}
[
negotiatedLanguage
screen
]
)
;
const
[
languageFilteredScreens
setLanguageFilteredScreens
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
screens
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
function
filterScreen
(
)
{
if
(
screen
&
&
(
appAndSystemLocaleInfo
?
.
matchType
!
=
=
"
language
-
mismatch
"
|
|
negotiatedLanguage
?
.
langPack
=
=
=
null
)
)
{
if
(
screenIndex
>
languageMismatchScreenIndex
)
{
setScreenIndex
(
screenIndex
-
1
)
;
}
setLanguageFilteredScreens
(
screens
.
filter
(
s
=
>
s
.
id
!
=
=
"
AW_LANGUAGE_MISMATCH
"
)
)
;
}
else
{
setLanguageFilteredScreens
(
screens
)
;
}
}
[
appAndSystemLocaleInfo
?
.
matchType
languageMismatchScreenIndex
negotiatedLanguage
screen
screens
setScreenIndex
]
)
;
return
{
negotiatedLanguage
langPackInstallPhase
languageFilteredScreens
}
;
}
function
LanguageSwitcher
(
props
)
{
const
{
content
handleAction
negotiatedLanguage
langPackInstallPhase
messageId
}
=
props
;
const
[
isAwaitingLangpack
setIsAwaitingLangpack
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
false
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
if
(
isAwaitingLangpack
&
&
langPackInstallPhase
!
=
=
"
installing
"
)
{
window
.
AWSetRequestedLocales
(
negotiatedLanguage
.
requestSystemLocales
)
;
requestAnimationFrame
(
(
)
=
>
{
handleAction
(
{
currentTarget
:
{
value
:
"
download_complete
"
}
}
)
;
}
)
;
}
}
[
handleAction
isAwaitingLangpack
langPackInstallPhase
negotiatedLanguage
?
.
requestSystemLocales
]
)
;
let
showWaitingScreen
=
false
;
let
showPreloadingScreen
=
false
;
let
showReadyScreen
=
false
;
if
(
isAwaitingLangpack
&
&
langPackInstallPhase
!
=
=
"
installed
"
)
{
showWaitingScreen
=
true
;
}
else
if
(
langPackInstallPhase
=
=
=
"
before
-
installation
"
)
{
showPreloadingScreen
=
true
;
}
else
{
showReadyScreen
=
true
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
action
-
buttons
language
-
switcher
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
style
:
{
display
:
showPreloadingScreen
?
"
block
"
:
"
none
"
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
"
primary
"
value
:
"
primary_button
"
disabled
:
true
type
:
"
button
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
img
"
{
className
:
"
language
-
loader
"
src
:
"
chrome
:
/
/
browser
/
skin
/
tabbrowser
/
tab
-
connecting
.
png
"
alt
:
"
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
languageSwitcher
.
waiting
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
secondary
-
cta
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
languageSwitcher
.
skip
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
value
:
"
decline_waiting
"
type
:
"
button
"
className
:
"
secondary
text
-
link
arrow
-
icon
"
onClick
:
handleAction
}
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
style
:
{
display
:
showWaitingScreen
?
"
block
"
:
"
none
"
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
"
primary
"
value
:
"
primary_button
"
disabled
:
true
type
:
"
button
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
img
"
{
className
:
"
language
-
loader
"
src
:
"
chrome
:
/
/
browser
/
skin
/
tabbrowser
/
tab
-
connecting
.
png
"
alt
:
"
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
languageSwitcher
.
downloading
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
secondary
-
cta
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
languageSwitcher
.
cancel
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
type
:
"
button
"
className
:
"
secondary
text
-
link
"
onClick
:
(
)
=
>
{
setIsAwaitingLangpack
(
false
)
;
handleAction
(
{
currentTarget
:
{
value
:
"
cancel_waiting
"
}
}
)
;
}
}
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
style
:
{
display
:
showReadyScreen
?
"
block
"
:
"
none
"
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
"
primary
"
value
:
"
primary_button
"
onClick
:
(
)
=
>
{
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendActionTelemetry
(
messageId
"
download_langpack
"
)
;
setIsAwaitingLangpack
(
true
)
;
}
}
content
.
languageSwitcher
.
switch
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
languageSwitcher
.
switch
}
)
:
negotiatedLanguage
?
.
langPackDisplayName
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
type
:
"
button
"
className
:
"
primary
"
value
:
"
decline
"
onClick
:
event
=
>
{
window
.
AWSetRequestedLocales
(
negotiatedLanguage
.
originalAppLocales
)
;
handleAction
(
event
)
;
}
}
content
.
languageSwitcher
.
continue
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
languageSwitcher
.
continue
}
)
:
negotiatedLanguage
?
.
appDisplayName
)
)
)
)
;
}
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
CTAParagraph
"
:
(
)
=
>
(
CTAParagraph
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
const
CTAParagraph
=
props
=
>
{
const
{
content
handleAction
}
=
props
;
if
(
!
content
?
.
text
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
h2
"
{
className
:
"
cta
-
paragraph
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
text
}
content
.
text
.
string_name
&
&
typeof
handleAction
=
=
=
"
function
"
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
content
.
text
.
string_id
onClick
:
handleAction
onKeyUp
:
event
=
>
[
"
Enter
"
"
"
]
.
includes
(
event
.
key
)
?
handleAction
(
event
)
:
null
value
:
"
cta_paragraph
"
role
:
"
button
"
tabIndex
:
"
0
"
}
"
"
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
a
"
{
role
:
"
button
"
tabIndex
:
"
0
"
"
data
-
l10n
-
name
"
:
content
.
text
.
string_name
}
"
"
)
)
:
null
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
HeroImage
"
:
(
)
=
>
(
HeroImage
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
3
)
;
const
HeroImage
=
props
=
>
{
const
{
height
url
alt
}
=
props
;
if
(
!
url
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
hero
-
image
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
img
"
{
style
:
height
?
{
height
}
:
null
src
:
url
loading
:
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
.
AboutWelcomeUtils
.
getLoadingStrategyFor
(
url
)
alt
:
alt
|
|
"
"
role
:
alt
?
null
:
"
presentation
"
}
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
OnboardingVideo
"
:
(
)
=
>
(
OnboardingVideo
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
const
OnboardingVideo
=
props
=
>
{
const
vidUrl
=
props
.
content
.
video_url
;
const
autoplay
=
props
.
content
.
autoPlay
;
const
handleVideoAction
=
event
=
>
{
props
.
handleAction
(
{
currentTarget
:
{
value
:
event
}
}
)
;
}
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
video
"
{
controls
:
true
autoPlay
:
autoplay
src
:
vidUrl
width
:
"
604px
"
height
:
"
340px
"
onPlay
:
(
)
=
>
handleVideoAction
(
"
video_start
"
)
onEnded
:
(
)
=
>
handleVideoAction
(
"
video_end
"
)
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
source
"
{
src
:
vidUrl
}
)
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
AdditionalCTA
"
:
(
)
=
>
(
AdditionalCTA
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
_SubmenuButton__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
15
)
;
const
AdditionalCTA
=
(
{
content
handleAction
}
)
=
>
{
let
buttonStyle
=
"
"
;
const
isSplitButton
=
content
.
submenu_button
?
.
attached_to
=
=
=
"
additional_button
"
;
let
className
=
"
additional
-
cta
-
box
"
;
if
(
isSplitButton
)
{
className
+
=
"
split
-
button
-
container
"
;
}
if
(
!
content
.
additional_button
?
.
style
)
{
buttonStyle
=
"
primary
"
;
}
else
{
buttonStyle
=
content
.
additional_button
?
.
style
=
=
=
"
link
"
?
"
cta
-
link
"
:
content
.
additional_button
?
.
style
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
className
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
additional_button
?
.
label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
{
buttonStyle
}
additional
-
cta
onClick
:
handleAction
value
:
"
additional_button
"
disabled
:
content
.
additional_button
?
.
disabled
=
=
=
true
}
)
)
isSplitButton
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_SubmenuButton__WEBPACK_IMPORTED_MODULE_2__
.
SubmenuButton
{
content
:
content
handleAction
:
handleAction
}
)
:
null
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
SubmenuButton
"
:
(
)
=
>
(
SubmenuButton
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
const
SubmenuButton
=
props
=
>
{
return
document
.
createXULElement
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
SubmenuButtonInner
props
)
:
null
;
}
;
function
translateMenuitem
(
item
element
)
{
let
{
label
}
=
item
;
if
(
!
label
)
{
return
;
}
if
(
label
.
raw
)
{
element
.
setAttribute
(
"
label
"
label
.
raw
)
;
}
if
(
label
.
access_key
)
{
element
.
setAttribute
(
"
accesskey
"
label
.
access_key
)
;
}
if
(
label
.
aria_label
)
{
element
.
setAttribute
(
"
aria
-
label
"
label
.
aria_label
)
;
}
if
(
label
.
tooltip_text
)
{
element
.
setAttribute
(
"
tooltiptext
"
label
.
tooltip_text
)
;
}
if
(
label
.
string_id
)
{
element
.
setAttribute
(
"
data
-
l10n
-
id
"
label
.
string_id
)
;
if
(
label
.
args
)
{
element
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
label
.
args
)
)
;
}
}
}
function
addMenuitems
(
items
popup
)
{
for
(
let
item
of
items
)
{
switch
(
item
.
type
)
{
case
"
separator
"
:
popup
.
appendChild
(
document
.
createXULElement
(
"
menuseparator
"
)
)
;
break
;
case
"
menu
"
:
let
menu
=
document
.
createXULElement
(
"
menu
"
)
;
menu
.
className
=
"
fxms
-
multi
-
stage
-
menu
"
;
translateMenuitem
(
item
menu
)
;
if
(
item
.
id
)
{
menu
.
value
=
item
.
id
;
}
if
(
item
.
icon
)
{
menu
.
classList
.
add
(
"
menu
-
iconic
"
)
;
menu
.
setAttribute
(
"
image
"
item
.
icon
)
;
}
popup
.
appendChild
(
menu
)
;
let
submenuPopup
=
document
.
createXULElement
(
"
menupopup
"
)
;
menu
.
appendChild
(
submenuPopup
)
;
addMenuitems
(
item
.
submenu
submenuPopup
)
;
break
;
case
"
action
"
:
let
menuitem
=
document
.
createXULElement
(
"
menuitem
"
)
;
translateMenuitem
(
item
menuitem
)
;
menuitem
.
config
=
item
;
if
(
item
.
id
)
{
menuitem
.
value
=
item
.
id
;
}
if
(
item
.
icon
)
{
menuitem
.
classList
.
add
(
"
menuitem
-
iconic
"
)
;
menuitem
.
setAttribute
(
"
image
"
item
.
icon
)
;
}
popup
.
appendChild
(
menuitem
)
;
break
;
}
}
}
const
SubmenuButtonInner
=
(
{
content
handleAction
}
)
=
>
{
const
ref
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useRef
)
(
null
)
;
const
isPrimary
=
content
.
submenu_button
?
.
style
=
=
=
"
primary
"
;
const
onCommand
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useCallback
)
(
event
=
>
{
let
{
config
}
=
event
.
target
;
let
mockEvent
=
{
currentTarget
:
ref
.
current
source
:
config
.
id
name
:
"
command
"
action
:
config
.
action
}
;
handleAction
(
mockEvent
)
;
}
[
handleAction
]
)
;
const
onClick
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useCallback
)
(
(
)
=
>
{
let
button
=
ref
.
current
;
let
submenu
=
button
?
.
querySelector
(
"
.
fxms
-
multi
-
stage
-
submenu
"
)
;
if
(
submenu
&
&
!
button
.
hasAttribute
(
"
open
"
)
)
{
submenu
.
openPopup
(
button
{
position
:
"
after_end
"
}
)
;
}
}
[
]
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
let
button
=
ref
.
current
;
if
(
!
button
|
|
button
.
querySelector
(
"
.
fxms
-
multi
-
stage
-
submenu
"
)
)
{
return
null
;
}
let
menupopup
=
document
.
createXULElement
(
"
menupopup
"
)
;
menupopup
.
className
=
"
fxms
-
multi
-
stage
-
submenu
"
;
addMenuitems
(
content
.
submenu_button
.
submenu
menupopup
)
;
button
.
appendChild
(
menupopup
)
;
let
stylesheet
;
if
(
!
document
.
head
.
querySelector
(
link
[
href
=
"
chrome
:
/
/
global
/
content
/
widgets
.
css
"
]
link
[
href
=
"
chrome
:
/
/
global
/
skin
/
global
.
css
"
]
)
)
{
stylesheet
=
document
.
createElement
(
"
link
"
)
;
stylesheet
.
rel
=
"
stylesheet
"
;
stylesheet
.
href
=
"
chrome
:
/
/
global
/
content
/
widgets
.
css
"
;
document
.
head
.
appendChild
(
stylesheet
)
;
}
if
(
!
menupopup
.
listenersRegistered
)
{
menupopup
.
addEventListener
(
"
command
"
onCommand
)
;
menupopup
.
addEventListener
(
"
popupshowing
"
event
=
>
{
if
(
event
.
target
=
=
=
menupopup
&
&
event
.
target
.
anchorNode
)
{
event
.
target
.
anchorNode
.
toggleAttribute
(
"
open
"
true
)
;
}
}
)
;
menupopup
.
addEventListener
(
"
popuphiding
"
event
=
>
{
if
(
event
.
target
=
=
=
menupopup
&
&
event
.
target
.
anchorNode
)
{
event
.
target
.
anchorNode
.
toggleAttribute
(
"
open
"
false
)
;
}
}
)
;
menupopup
.
listenersRegistered
=
true
;
}
return
(
)
=
>
{
menupopup
?
.
remove
(
)
;
stylesheet
?
.
remove
(
)
;
}
;
}
[
onCommand
]
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
content
.
submenu_button
.
label
?
?
{
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
className
:
submenu
-
button
{
isPrimary
?
"
primary
"
:
"
secondary
"
}
value
:
"
submenu_button
"
onClick
:
onClick
ref
:
ref
}
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
EmbeddedMigrationWizard
"
:
(
)
=
>
(
EmbeddedMigrationWizard
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
const
EmbeddedMigrationWizard
=
(
{
handleAction
}
)
=
>
{
const
ref
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useRef
)
(
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useEffect
)
(
(
)
=
>
{
const
handleBeginMigration
=
(
)
=
>
{
handleAction
(
{
currentTarget
:
{
value
:
"
migrate_start
"
}
source
:
"
primary_button
"
}
)
;
}
;
const
handleClose
=
(
)
=
>
{
handleAction
(
{
currentTarget
:
{
value
:
"
migrate_close
"
}
}
)
;
}
;
const
{
current
}
=
ref
;
current
?
.
addEventListener
(
"
MigrationWizard
:
BeginMigration
"
handleBeginMigration
)
;
current
?
.
addEventListener
(
"
MigrationWizard
:
Close
"
handleClose
)
;
return
(
)
=
>
{
current
?
.
removeEventListener
(
"
MigrationWizard
:
BeginMigration
"
handleBeginMigration
)
;
current
?
.
removeEventListener
(
"
MigrationWizard
:
Close
"
handleClose
)
;
}
;
}
[
]
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
migration
-
wizard
"
{
"
force
-
show
-
import
-
all
"
:
"
false
"
"
auto
-
request
-
state
"
:
"
"
ref
:
ref
}
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
AddonsPicker
"
:
(
)
=
>
(
AddonsPicker
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
3
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
5
)
;
const
AddonsPicker
=
props
=
>
{
const
{
content
}
=
props
;
if
(
!
content
)
{
return
null
;
}
function
handleAction
(
event
)
{
const
{
message_id
}
=
props
;
let
{
action
source_id
}
=
content
.
tiles
.
data
[
event
.
currentTarget
.
value
]
;
let
{
type
data
}
=
action
;
if
(
type
=
=
=
"
INSTALL_ADDON_FROM_URL
"
)
{
if
(
!
data
)
{
return
;
}
}
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
.
AboutWelcomeUtils
.
handleUserAction
(
{
type
data
}
)
;
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
.
AboutWelcomeUtils
.
sendActionTelemetry
(
message_id
source_id
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
addons
-
picker
-
container
"
}
content
.
tiles
.
data
.
map
(
(
{
id
install_label
name
type
description
icon
}
index
)
=
>
name
?
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
key
:
id
className
:
"
addon
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
rtamo
-
icon
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
img
"
{
className
:
{
type
=
=
=
"
theme
"
?
"
rtamo
-
theme
-
icon
"
:
"
brand
-
logo
"
}
src
:
icon
role
:
"
presentation
"
alt
:
"
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
addon
-
details
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_2__
.
Localized
{
text
:
name
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
addon
-
title
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_2__
.
Localized
{
text
:
description
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
addon
-
description
"
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_2__
.
Localized
{
text
:
install_label
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
{
id
:
name
value
:
index
onClick
:
handleAction
className
:
"
primary
"
}
)
)
)
:
null
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
LinkParagraph
"
:
(
)
=
>
(
LinkParagraph
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
const
LinkParagraph
=
props
=
>
{
const
{
text_content
handleAction
}
=
props
;
const
handleParagraphAction
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useCallback
)
(
event
=
>
{
if
(
event
.
target
.
closest
(
"
a
"
)
)
{
handleAction
(
{
.
.
.
event
currentTarget
:
event
.
target
}
)
;
}
}
[
handleAction
]
)
;
const
onKeyPress
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useCallback
)
(
event
=
>
{
if
(
event
.
key
=
=
=
"
Enter
"
&
&
!
event
.
repeat
)
{
handleParagraphAction
(
event
)
;
}
}
[
handleParagraphAction
]
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MSLocalized__WEBPACK_IMPORTED_MODULE_1__
.
Localized
{
text
:
text_content
.
text
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
p
"
{
className
:
text_content
.
font_styles
=
=
=
"
legal
"
?
"
legal
-
paragraph
"
:
"
link
-
paragraph
"
onClick
:
handleParagraphAction
value
:
"
link_paragraph
"
onKeyPress
:
onKeyPress
}
text_content
.
link_keys
?
.
map
(
link
=
>
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
a
"
{
key
:
link
value
:
link
role
:
"
link
"
className
:
"
text
-
link
"
"
data
-
l10n
-
name
"
:
link
tabIndex
:
"
0
"
}
"
"
)
)
)
)
;
}
;
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
BASE_PARAMS
"
:
(
)
=
>
(
BASE_PARAMS
)
"
addUtmParams
"
:
(
)
=
>
(
addUtmParams
)
}
)
;
const
BASE_PARAMS
=
{
utm_source
:
"
activity
-
stream
"
utm_campaign
:
"
firstrun
"
utm_medium
:
"
referral
"
}
;
function
addUtmParams
(
url
utmTerm
)
{
let
returnUrl
=
url
;
if
(
typeof
returnUrl
=
=
=
"
string
"
)
{
returnUrl
=
new
URL
(
url
)
;
}
for
(
let
[
key
value
]
of
Object
.
entries
(
BASE_PARAMS
)
)
{
if
(
!
returnUrl
.
searchParams
.
has
(
key
)
)
{
returnUrl
.
searchParams
.
append
(
key
value
)
;
}
}
returnUrl
.
searchParams
.
append
(
"
utm_term
"
utmTerm
)
;
return
returnUrl
;
}
}
)
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
{
"
ReturnToAMO
"
:
(
)
=
>
(
ReturnToAMO
)
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
3
)
;
var
_MultiStageProtonScreen__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
6
)
;
var
asrouter_content_src_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
19
)
;
class
ReturnToAMO
extends
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
fetchFlowParams
=
this
.
fetchFlowParams
.
bind
(
this
)
;
this
.
handleAction
=
this
.
handleAction
.
bind
(
this
)
;
}
async
fetchFlowParams
(
)
{
if
(
this
.
props
.
metricsFlowUri
)
{
this
.
setState
(
{
flowParams
:
await
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
.
AboutWelcomeUtils
.
fetchFlowParams
(
this
.
props
.
metricsFlowUri
)
}
)
;
}
}
componentDidUpdate
(
)
{
this
.
fetchFlowParams
(
)
;
}
handleAction
(
event
)
{
const
{
content
message_id
url
utm_term
}
=
this
.
props
;
let
{
action
source_id
}
=
content
[
event
.
currentTarget
.
value
]
;
let
{
type
data
}
=
action
;
if
(
type
=
=
=
"
INSTALL_ADDON_FROM_URL
"
)
{
if
(
!
data
)
{
return
;
}
data
=
{
.
.
.
data
url
}
;
}
else
if
(
type
=
=
=
"
SHOW_FIREFOX_ACCOUNTS
"
)
{
let
params
=
{
.
.
.
asrouter_content_src_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_3__
.
BASE_PARAMS
utm_term
:
aboutwelcome
-
{
utm_term
}
-
screen
}
;
if
(
action
.
addFlowParams
&
&
this
.
state
.
flowParams
)
{
params
=
{
.
.
.
params
.
.
.
this
.
state
.
flowParams
}
;
}
data
=
{
.
.
.
data
extraParams
:
params
}
;
}
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
.
AboutWelcomeUtils
.
handleUserAction
(
{
type
data
}
)
;
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
.
AboutWelcomeUtils
.
sendActionTelemetry
(
message_id
source_id
)
;
}
render
(
)
{
const
{
content
type
}
=
this
.
props
;
if
(
!
content
)
{
return
null
;
}
if
(
content
?
.
primary_button
.
label
)
{
content
.
primary_button
.
label
.
string_id
=
type
.
includes
(
"
theme
"
)
?
"
return
-
to
-
amo
-
add
-
theme
-
label
"
:
"
mr1
-
return
-
to
-
amo
-
add
-
extension
-
label
"
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
div
"
{
className
:
"
outer
-
wrapper
onboardingContainer
proton
"
style
:
content
.
backdrop
?
{
background
:
content
.
backdrop
}
:
{
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_MultiStageProtonScreen__WEBPACK_IMPORTED_MODULE_2__
.
MultiStageProtonScreen
{
content
:
content
isRtamo
:
true
isTheme
:
type
.
includes
(
"
theme
"
)
id
:
this
.
props
.
message_id
order
:
this
.
props
.
order
|
|
0
totalNumberOfScreens
:
1
isSingleScreen
:
true
autoAdvance
:
this
.
props
.
auto_advance
iconURL
:
type
.
includes
(
"
theme
"
)
?
this
.
props
.
themeScreenshots
[
0
]
?
.
url
:
this
.
props
.
iconURL
addonName
:
this
.
props
.
name
handleAction
:
this
.
handleAction
}
)
)
;
}
}
ReturnToAMO
.
defaultProps
=
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_1__
.
DEFAULT_RTAMO_CONTENT
;
}
)
]
)
;
var
__webpack_module_cache__
=
{
}
;
function
__webpack_require__
(
moduleId
)
{
var
cachedModule
=
__webpack_module_cache__
[
moduleId
]
;
if
(
cachedModule
!
=
=
undefined
)
{
return
cachedModule
.
exports
;
}
var
module
=
__webpack_module_cache__
[
moduleId
]
=
{
exports
:
{
}
}
;
__webpack_modules__
[
moduleId
]
(
module
module
.
exports
__webpack_require__
)
;
return
module
.
exports
;
}
(
(
)
=
>
{
__webpack_require__
.
n
=
(
module
)
=
>
{
var
getter
=
module
&
&
module
.
__esModule
?
(
)
=
>
(
module
[
'
default
'
]
)
:
(
)
=
>
(
module
)
;
__webpack_require__
.
d
(
getter
{
a
:
getter
}
)
;
return
getter
;
}
;
}
)
(
)
;
(
(
)
=
>
{
__webpack_require__
.
d
=
(
exports
definition
)
=
>
{
for
(
var
key
in
definition
)
{
if
(
__webpack_require__
.
o
(
definition
key
)
&
&
!
__webpack_require__
.
o
(
exports
key
)
)
{
Object
.
defineProperty
(
exports
key
{
enumerable
:
true
get
:
definition
[
key
]
}
)
;
}
}
}
;
}
)
(
)
;
(
(
)
=
>
{
__webpack_require__
.
o
=
(
obj
prop
)
=
>
(
Object
.
prototype
.
hasOwnProperty
.
call
(
obj
prop
)
)
}
)
(
)
;
(
(
)
=
>
{
__webpack_require__
.
r
=
(
exports
)
=
>
{
if
(
typeof
Symbol
!
=
=
'
undefined
'
&
&
Symbol
.
toStringTag
)
{
Object
.
defineProperty
(
exports
Symbol
.
toStringTag
{
value
:
'
Module
'
}
)
;
}
Object
.
defineProperty
(
exports
'
__esModule
'
{
value
:
true
}
)
;
}
;
}
)
(
)
;
var
__webpack_exports__
=
{
}
;
(
(
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
var
react_dom__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
2
)
;
var
react_dom__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_dom__WEBPACK_IMPORTED_MODULE_1__
)
;
var
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
3
)
;
var
_components_MultiStageAboutWelcome__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
4
)
;
var
_components_ReturnToAMO__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
20
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
?
Object
.
assign
.
bind
(
)
:
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
class
AboutWelcome
extends
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
metricsFlowUri
:
null
}
;
this
.
fetchFxAFlowUri
=
this
.
fetchFxAFlowUri
.
bind
(
this
)
;
}
async
fetchFxAFlowUri
(
)
{
this
.
setState
(
{
metricsFlowUri
:
await
window
.
AWGetFxAMetricsFlowURI
?
.
(
)
}
)
;
}
componentDidMount
(
)
{
if
(
!
this
.
props
.
skipFxA
)
{
this
.
fetchFxAFlowUri
(
)
;
}
if
(
document
.
location
.
href
=
=
=
"
about
:
welcome
"
)
{
const
recordImpression
=
domState
=
>
{
const
{
domComplete
domInteractive
}
=
performance
.
getEntriesByType
(
"
navigation
"
)
.
pop
(
)
;
_lib_aboutwelcome_utils__WEBPACK_IMPORTED_MODULE_2__
.
AboutWelcomeUtils
.
sendImpressionTelemetry
(
this
.
props
.
messageId
{
domComplete
domInteractive
mountStart
:
performance
.
getEntriesByName
(
"
mount
"
)
.
pop
(
)
.
startTime
domState
source
:
this
.
props
.
UTMTerm
}
)
;
}
;
if
(
document
.
readyState
=
=
=
"
complete
"
)
{
recordImpression
(
document
.
readyState
)
;
}
else
{
window
.
addEventListener
(
"
load
"
(
)
=
>
recordImpression
(
"
load
"
)
{
once
:
true
}
)
;
}
window
.
AWSendToParent
(
"
SET_WELCOME_MESSAGE_SEEN
"
this
.
props
.
messageId
)
;
}
}
render
(
)
{
const
{
props
}
=
this
;
if
(
props
.
template
=
=
=
"
return_to_amo
"
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_components_ReturnToAMO__WEBPACK_IMPORTED_MODULE_4__
.
ReturnToAMO
{
message_id
:
props
.
messageId
type
:
props
.
type
name
:
props
.
name
url
:
props
.
url
iconURL
:
props
.
iconURL
themeScreenshots
:
props
.
screenshots
metricsFlowUri
:
this
.
state
.
metricsFlowUri
}
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
_components_MultiStageAboutWelcome__WEBPACK_IMPORTED_MODULE_3__
.
MultiStageAboutWelcome
{
message_id
:
props
.
messageId
defaultScreens
:
props
.
screens
updateHistory
:
!
props
.
disableHistoryUpdates
metricsFlowUri
:
this
.
state
.
metricsFlowUri
utm_term
:
props
.
UTMTerm
transitions
:
props
.
transitions
backdrop
:
props
.
backdrop
startScreen
:
props
.
startScreen
|
|
0
appAndSystemLocaleInfo
:
props
.
appAndSystemLocaleInfo
ariaRole
:
props
.
aria_role
}
)
;
}
}
function
ComputeTelemetryInfo
(
welcomeContent
experimentId
branchId
)
{
let
messageId
=
welcomeContent
.
template
=
=
=
"
return_to_amo
"
?
RTAMO_DEFAULT_WELCOME_
{
welcomeContent
.
type
.
toUpperCase
(
)
}
:
"
DEFAULT_ID
"
;
let
UTMTerm
=
"
aboutwelcome
-
default
"
;
if
(
welcomeContent
.
id
)
{
messageId
=
welcomeContent
.
id
.
toUpperCase
(
)
;
}
if
(
experimentId
&
&
branchId
)
{
UTMTerm
=
aboutwelcome
-
{
experimentId
}
-
{
branchId
}
.
toLowerCase
(
)
;
}
return
{
messageId
UTMTerm
}
;
}
async
function
retrieveRenderContent
(
)
{
let
featureConfig
=
await
window
.
AWGetFeatureConfig
(
)
;
let
{
messageId
UTMTerm
}
=
ComputeTelemetryInfo
(
featureConfig
featureConfig
.
slug
featureConfig
.
branch
&
&
featureConfig
.
branch
.
slug
)
;
return
{
featureConfig
messageId
UTMTerm
}
;
}
async
function
mount
(
)
{
let
{
featureConfig
:
aboutWelcomeProps
messageId
UTMTerm
}
=
await
retrieveRenderContent
(
)
;
react_dom__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
render
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
AboutWelcome
_extends
(
{
messageId
:
messageId
UTMTerm
:
UTMTerm
}
aboutWelcomeProps
)
)
document
.
getElementById
(
"
multi
-
stage
-
message
-
root
"
)
)
;
}
performance
.
mark
(
"
mount
"
)
;
mount
(
)
;
}
)
(
)
;
}
)
(
)
;
