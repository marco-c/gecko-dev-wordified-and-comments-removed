const
path
=
require
(
"
path
"
)
;
const
webpack
=
require
(
"
webpack
"
)
;
const
{
ResourceUriPlugin
}
=
require
(
"
.
.
/
newtab
/
tools
/
resourceUriPlugin
"
)
;
const
PATHS
=
{
testEntryFile
:
path
.
resolve
(
__dirname
"
.
/
tests
/
unit
/
unit
-
entry
.
js
"
)
testFilesPattern
:
"
.
/
tests
/
unit
/
unit
-
entry
.
js
"
moduleResolveDirectory
:
__dirname
newtabResolveDirectory
:
"
.
.
/
newtab
"
resourcePathRegEx
:
/
^
resource
:
\
/
\
/
activity
-
stream
\
/
/
coverageReportingPath
:
"
logs
/
coverage
/
"
}
;
const
preprocessors
=
{
}
;
preprocessors
[
PATHS
.
testFilesPattern
]
=
[
"
webpack
"
"
sourcemap
"
]
;
module
.
exports
=
function
(
config
)
{
const
isTDD
=
config
.
tdd
;
const
browsers
=
isTDD
?
[
"
Firefox
"
]
:
[
"
FirefoxHeadless
"
]
;
config
.
set
(
{
singleRun
:
!
isTDD
browsers
customLaunchers
:
{
FirefoxHeadless
:
{
base
:
"
Firefox
"
flags
:
[
"
-
-
headless
"
]
}
}
frameworks
:
[
"
chai
"
"
mocha
"
"
sinon
"
]
reporters
:
[
"
coverage
-
istanbul
"
"
mocha
"
"
json
"
]
jsonReporter
:
{
stdout
:
false
outputFile
:
path
.
join
(
"
logs
"
"
karma
-
run
-
results
.
json
"
)
}
coverageIstanbulReporter
:
{
reports
:
[
"
lcov
"
"
text
-
summary
"
]
"
report
-
config
"
:
{
lcov
:
{
projectRoot
:
"
.
.
/
.
.
/
.
.
"
}
}
dir
:
PATHS
.
coverageReportingPath
thresholds
:
!
isTDD
&
&
{
each
:
{
statements
:
100
lines
:
100
functions
:
100
branches
:
66
overrides
:
{
"
modules
/
*
.
jsm
"
:
{
statements
:
0
lines
:
0
functions
:
0
branches
:
0
}
"
content
-
src
/
lib
/
aboutwelcome
-
utils
.
js
"
:
{
statements
:
50
lines
:
50
functions
:
50
branches
:
0
}
"
content
-
src
/
components
/
LanguageSwitcher
.
jsx
"
:
{
statements
:
0
lines
:
0
functions
:
0
branches
:
0
}
"
content
-
src
/
components
/
EmbeddedMigrationWizard
.
jsx
"
:
{
statements
:
0
lines
:
0
functions
:
0
branches
:
0
}
"
content
-
src
/
components
/
AddonsPicker
.
jsx
"
:
{
statements
:
0
lines
:
0
functions
:
0
branches
:
0
}
"
content
-
src
/
components
/
SubmenuButton
.
jsx
"
:
{
statements
:
0
lines
:
0
functions
:
0
branches
:
0
}
"
content
-
src
/
components
/
*
*
/
*
.
jsx
"
:
{
statements
:
51
.
1
lines
:
52
.
38
functions
:
31
.
2
branches
:
31
.
2
}
"
content
-
src
/
*
*
/
*
.
jsx
"
:
{
statements
:
62
lines
:
60
functions
:
50
branches
:
50
}
}
}
}
}
files
:
[
PATHS
.
testEntryFile
]
preprocessors
webpack
:
{
mode
:
"
none
"
devtool
:
"
inline
-
source
-
map
"
resolveLoader
:
{
alias
:
{
inject
:
path
.
join
(
__dirname
"
.
.
/
newtab
/
loaders
/
inject
-
loader
"
)
}
}
resolve
:
{
extensions
:
[
"
.
js
"
"
.
jsx
"
]
modules
:
[
PATHS
.
moduleResolveDirectory
"
node_modules
"
PATHS
.
newtabResolveDirectory
]
fallback
:
{
stream
:
require
.
resolve
(
"
stream
-
browserify
"
)
buffer
:
require
.
resolve
(
"
buffer
"
)
}
alias
:
{
newtab
:
path
.
join
(
__dirname
"
.
.
/
newtab
"
)
asroutermodules
:
path
.
join
(
__dirname
"
.
.
/
asrouter
/
modules
"
)
}
}
plugins
:
[
new
ResourceUriPlugin
(
{
resourcePathRegEx
:
PATHS
.
resourcePathRegEx
}
)
new
webpack
.
DefinePlugin
(
{
"
process
.
env
.
NODE_ENV
"
:
JSON
.
stringify
(
"
development
"
)
}
)
]
externals
:
{
"
react
/
addons
"
:
true
"
react
/
lib
/
ReactContext
"
:
true
"
react
/
lib
/
ExecutionEnvironment
"
:
true
}
module
:
{
rules
:
[
{
test
:
/
\
.
jsm
/
exclude
:
[
/
node_modules
/
]
use
:
[
{
loader
:
"
babel
-
loader
"
options
:
{
plugins
:
[
[
"
.
.
/
newtab
/
tools
/
babel
-
jsm
-
to
-
commonjs
.
js
"
{
basePaths
:
[
[
PATHS
.
resourcePathRegEx
"
"
]
[
/
^
resource
:
\
/
\
/
\
/
modules
\
/
asrouter
\
/
/
"
asroutermodules
/
"
]
]
removeOtherImports
:
true
replace
:
true
}
]
]
}
}
]
}
{
test
:
/
\
.
js
/
exclude
:
[
/
node_modules
\
/
(
?
!
fluent
\
/
)
.
*
/
/
tests
/
]
loader
:
"
babel
-
loader
"
}
{
test
:
/
\
.
jsx
/
exclude
:
/
node_modules
/
loader
:
"
babel
-
loader
"
options
:
{
presets
:
[
"
babel
/
preset
-
react
"
]
}
}
{
test
:
/
\
.
md
/
use
:
"
raw
-
loader
"
}
{
enforce
:
"
post
"
test
:
/
\
.
js
[
mx
]
?
/
loader
:
"
jsdevtools
/
coverage
-
istanbul
-
loader
"
options
:
{
esModules
:
true
}
include
:
[
path
.
resolve
(
"
content
-
src
"
)
path
.
resolve
(
"
modules
"
)
]
exclude
:
[
path
.
resolve
(
"
tests
"
)
path
.
resolve
(
"
.
.
/
newtab
"
)
]
}
]
}
}
webpackMiddleware
:
{
noInfo
:
true
}
}
)
;
}
;
