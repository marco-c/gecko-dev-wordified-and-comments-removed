"
use
strict
"
;
const
{
NimbusTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
)
;
const
{
AboutWelcomeTelemetry
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
aboutwelcome
/
AboutWelcomeTelemetry
.
sys
.
mjs
"
)
;
const
BASE_SCREEN_CONTENT
=
{
title
:
"
Step
1
"
primary_button
:
{
label
:
"
Next
"
action
:
{
navigate
:
true
}
}
secondary_button
:
{
label
:
"
link
"
}
}
;
const
makeTestContent
=
(
id
contentAdditions
)
=
>
{
return
{
id
content
:
Object
.
assign
(
{
}
BASE_SCREEN_CONTENT
contentAdditions
)
}
;
}
;
async
function
testAboutWelcomeLogoFor
(
logo
=
{
}
)
{
info
(
Testing
logo
:
{
JSON
.
stringify
(
logo
)
}
)
;
let
screens
=
[
makeTestContent
(
"
TEST_LOGO_SELECTION_STEP
"
{
logo
}
)
]
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
screens
)
)
;
let
expected
=
[
.
brand
-
logo
[
src
=
"
{
logo
.
imageURL
?
?
"
chrome
:
/
/
branding
/
content
/
about
-
logo
.
svg
"
}
"
]
[
alt
=
"
"
]
]
;
let
unexpected
=
[
]
;
(
logo
.
alt
?
unexpected
:
expected
)
.
push
(
'
.
brand
-
logo
[
role
=
"
presentation
"
]
'
)
;
(
logo
.
width
?
expected
:
unexpected
)
.
push
(
.
brand
-
logo
[
style
*
=
"
width
"
]
)
;
(
logo
.
height
?
expected
:
unexpected
)
.
push
(
.
brand
-
logo
[
style
*
=
"
height
"
]
)
;
(
logo
.
marginBlock
?
expected
:
unexpected
)
.
push
(
.
logo
-
container
[
style
*
=
"
margin
-
block
"
]
)
;
(
logo
.
marginInline
?
expected
:
unexpected
)
.
push
(
.
logo
-
container
[
style
*
=
"
margin
-
inline
"
]
)
;
(
logo
.
darkModeImageURL
?
expected
:
unexpected
)
.
push
(
.
logo
-
container
source
[
media
=
"
(
prefers
-
color
-
scheme
:
dark
)
"
]
{
logo
.
darkModeImageURL
?
[
srcset
=
"
{
logo
.
darkModeImageURL
}
"
]
:
"
"
}
)
;
(
logo
.
reducedMotionImageURL
?
expected
:
unexpected
)
.
push
(
.
logo
-
container
source
[
media
=
"
(
prefers
-
reduced
-
motion
:
reduce
)
"
]
{
logo
.
reducedMotionImageURL
?
[
srcset
=
"
{
logo
.
reducedMotionImageURL
}
"
]
:
"
"
}
)
;
(
logo
.
darkModeReducedMotionImageURL
?
expected
:
unexpected
)
.
push
(
.
logo
-
container
source
[
media
=
"
(
prefers
-
color
-
scheme
:
dark
)
and
(
prefers
-
reduced
-
motion
:
reduce
)
"
]
{
logo
.
darkModeReducedMotionImageURL
?
[
srcset
=
"
{
logo
.
darkModeReducedMotionImageURL
}
"
]
:
"
"
}
)
;
await
test_screen_content
(
browser
"
renders
screen
with
passed
logo
"
expected
unexpected
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
add_task
(
async
function
test_aboutwelcome_with_noodles
(
)
{
const
TEST_NOODLE_CONTENT
=
makeTestContent
(
"
TEST_NOODLE_STEP
"
{
has_noodles
:
true
}
)
;
const
TEST_NOODLE_JSON
=
JSON
.
stringify
(
[
TEST_NOODLE_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_NOODLE_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
noodles
"
[
"
main
.
TEST_NOODLE_STEP
[
pos
=
'
center
'
]
"
"
div
.
noodle
.
purple
-
C
"
"
div
.
noodle
.
orange
-
L
"
"
div
.
noodle
.
outline
-
L
"
"
div
.
noodle
.
yellow
-
circle
"
]
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_customized_logo
(
)
{
const
TEST_LOGO_URL
=
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
;
const
TEST_LOGO_HEIGHT
=
"
50px
"
;
const
TEST_LOGO_CONTENT
=
makeTestContent
(
"
TEST_LOGO_STEP
"
{
logo
:
{
height
:
TEST_LOGO_HEIGHT
imageURL
:
TEST_LOGO_URL
}
}
)
;
const
TEST_LOGO_JSON
=
JSON
.
stringify
(
[
TEST_LOGO_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_LOGO_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
customized
logo
"
[
"
main
.
TEST_LOGO_STEP
[
pos
=
'
center
'
]
"
.
brand
-
logo
[
src
=
"
{
TEST_LOGO_URL
}
"
]
]
)
;
await
test_element_styles
(
browser
"
.
brand
-
logo
"
{
height
:
TEST_LOGO_HEIGHT
}
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_empty_logo_spacing
(
)
{
const
TEST_LOGO_HEIGHT
=
"
50px
"
;
const
TEST_LOGO_CONTENT
=
makeTestContent
(
"
TEST_LOGO_STEP
"
{
logo
:
{
height
:
TEST_LOGO_HEIGHT
imageURL
:
"
none
"
}
}
)
;
const
TEST_LOGO_JSON
=
JSON
.
stringify
(
[
TEST_LOGO_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_LOGO_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
empty
logo
element
"
[
"
main
.
TEST_LOGO_STEP
[
pos
=
'
center
'
]
"
"
.
brand
-
logo
[
src
=
'
none
'
]
"
]
)
;
await
test_element_styles
(
browser
"
.
brand
-
logo
"
{
height
:
TEST_LOGO_HEIGHT
}
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_title_logo
(
)
{
const
TEST_TITLE_LOGO_URL
=
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
;
const
TEST_CONTENT
=
makeTestContent
(
"
TITLE_LOGO
"
{
title_logo
:
{
imageURL
:
TEST_TITLE_LOGO_URL
}
}
)
;
const
TEST_JSON
=
JSON
.
stringify
(
[
TEST_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
title_logo
"
[
"
.
inline
-
icon
-
container
"
]
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_title_styles
(
)
{
const
TEST_TITLE_STYLE_CONTENT
=
makeTestContent
(
"
TEST_TITLE_STYLE_STEP
"
{
title
:
{
fontSize
:
"
36px
"
fontWeight
:
276
letterSpacing
:
0
raw
:
"
test
"
}
title_style
:
"
fancy
shine
"
}
)
;
const
TEST_TITLE_STYLE_JSON
=
JSON
.
stringify
(
[
TEST_TITLE_STYLE_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_TITLE_STYLE_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
customized
title
style
"
[
div
.
welcome
-
text
.
fancy
.
shine
]
)
;
await
test_element_styles
(
browser
"
#
mainContentHeader
"
{
"
font
-
weight
"
:
"
276
"
"
font
-
size
"
:
"
36px
"
animation
:
"
50s
linear
infinite
shine
"
"
letter
-
spacing
"
:
"
normal
"
}
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_background
(
)
{
const
BACKGROUND_URL
=
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
confetti
.
svg
"
;
const
TEST_BACKGROUND_CONTENT
=
makeTestContent
(
"
TEST_BACKGROUND_STEP
"
{
background
:
url
(
{
BACKGROUND_URL
}
)
no
-
repeat
center
/
cover
}
)
;
const
TEST_BACKGROUND_JSON
=
JSON
.
stringify
(
[
TEST_BACKGROUND_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_BACKGROUND_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
dialog
background
image
"
[
div
.
main
-
content
[
style
*
=
'
{
BACKGROUND_URL
}
'
]
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_dimensions
(
)
{
const
TEST_DIMENSIONS_CONTENT
=
makeTestContent
(
"
TEST_DIMENSIONS_STEP
"
{
width
:
"
100px
"
position
:
"
center
"
}
)
;
const
TEST_DIMENSIONS_JSON
=
JSON
.
stringify
(
[
TEST_DIMENSIONS_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_DIMENSIONS_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
defined
dimensions
"
[
div
.
main
-
content
[
style
*
=
'
width
:
100px
;
'
]
]
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_dismiss_button
(
)
{
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
[
1
2
]
.
map
(
i
=
>
makeTestContent
(
TEST_DISMISS_STEP_
{
i
}
{
dismiss_button
:
{
action
:
{
dismiss
:
true
}
size
:
"
small
"
}
}
)
)
)
)
;
await
test_screen_content
(
browser
"
renders
screen
with
dismiss
button
"
[
'
div
.
section
-
main
button
.
dismiss
-
button
[
button
-
size
=
"
small
"
]
'
]
)
;
await
onButtonClick
(
browser
"
button
.
dismiss
-
button
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
home
"
)
;
is
(
browser
.
currentURI
.
spec
"
about
:
home
"
"
about
:
home
loaded
"
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_split_position
(
)
{
const
TEST_SPLIT_STEP
=
makeTestContent
(
"
TEST_SPLIT_STEP
"
{
position
:
"
split
"
hero_text
:
"
hero
test
"
}
)
;
const
TEST_SPLIT_JSON
=
JSON
.
stringify
(
[
TEST_SPLIT_STEP
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_SPLIT_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
secondary
section
containing
hero
text
"
[
main
.
screen
[
pos
=
"
split
"
]
.
section
-
secondary
.
message
-
text
h1
]
)
;
await
test_element_styles
(
browser
"
main
.
screen
.
section
-
secondary
"
{
display
:
"
flex
"
margin
:
"
auto
0px
auto
auto
"
}
)
;
await
test_element_styles
(
browser
"
.
action
-
buttons
.
secondary
-
cta
.
secondary
"
{
"
background
-
color
"
:
"
color
(
srgb
0
.
0823529
0
.
0784314
0
.
101961
/
0
.
07
)
"
color
:
"
rgb
(
21
20
26
)
"
}
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_url_backdrop
(
)
{
const
TEST_BACKDROP_URL
=
url
(
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
confetti
.
svg
"
)
;
const
TEST_BACKDROP_VALUE
=
#
212121
{
TEST_BACKDROP_URL
}
center
/
cover
no
-
repeat
fixed
;
const
TEST_URL_BACKDROP_CONTENT
=
makeTestContent
(
"
TEST_URL_BACKDROP_STEP
"
)
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
backdrop
:
TEST_BACKDROP_VALUE
screens
:
[
TEST_URL_BACKDROP_CONTENT
]
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
renders
screen
with
background
image
"
[
div
.
outer
-
wrapper
.
onboardingContainer
[
style
*
=
'
{
TEST_BACKDROP_URL
}
'
]
]
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_color_backdrop
(
)
{
const
TEST_BACKDROP_COLOR
=
"
transparent
"
;
const
TEST_BACKDROP_COLOR_CONTENT
=
makeTestContent
(
"
TEST_COLOR_NAME_BACKDROP_STEP
"
)
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
backdrop
:
TEST_BACKDROP_COLOR
screens
:
[
TEST_BACKDROP_COLOR_CONTENT
]
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
renders
screen
with
background
color
"
[
div
.
outer
-
wrapper
.
onboardingContainer
[
style
*
=
'
{
TEST_BACKDROP_COLOR
}
'
]
]
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_text_color_override
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
1
]
]
}
)
;
let
screens
=
[
]
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
screens
.
push
(
makeTestContent
(
"
TEST_TEXT_COLOR_OVERRIDE_STEP
"
{
text_color
:
"
dark
"
background
:
"
white
"
}
)
)
;
}
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
screens
)
)
;
await
test_screen_content
(
browser
"
renders
screen
with
dark
text
"
[
main
.
screen
.
dark
-
text
.
indicator
.
current
.
indicator
:
not
(
.
current
)
]
[
main
.
screen
.
light
-
text
]
)
;
await
test_element_styles
(
browser
"
#
mainContentHeader
"
{
color
:
"
rgb
(
21
20
26
)
"
}
)
;
await
test_element_styles
(
browser
"
.
indicator
:
not
(
.
current
)
"
{
color
:
"
rgb
(
251
251
254
)
"
}
)
;
await
doExperimentCleanup
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_progress_bar
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
0
]
[
"
ui
.
prefersReducedMotion
"
0
]
]
}
)
;
let
screens
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
screens
.
push
(
makeTestContent
(
TEST_MR_PROGRESS_BAR_
{
i
+
1
}
{
position
:
"
split
"
progress_bar
:
true
primary_button
:
{
label
:
"
next
"
action
:
{
navigate
:
true
}
}
}
)
)
;
}
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
screens
)
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
const
progressBar
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
.
progress
-
bar
"
)
)
;
const
indicator
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
.
indicator
"
)
)
;
is
(
content
.
window
.
getComputedStyle
(
progressBar
)
[
"
background
-
color
"
]
"
color
(
srgb
0
.
0823529
0
.
0784314
0
.
101961
/
0
.
25
)
"
"
Correct
progress
bar
background
"
)
;
const
indicatorStyles
=
content
.
window
.
getComputedStyle
(
indicator
)
;
for
(
let
[
key
val
]
of
Object
.
entries
(
{
"
background
-
color
"
:
"
oklch
(
0
.
55
0
.
24
260
)
"
height
:
"
6px
"
"
margin
-
inline
"
:
"
-
1px
"
"
padding
-
block
"
:
"
0px
"
}
)
)
{
is
(
indicatorStyles
[
key
]
val
Correct
indicator
{
key
}
style
)
;
}
const
indicatorX
=
indicator
.
getBoundingClientRect
(
)
.
x
;
content
.
document
.
querySelector
(
"
button
.
primary
"
)
.
click
(
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
.
indicator
"
)
?
.
getBoundingClientRect
(
)
.
x
>
indicatorX
"
Indicator
should
have
grown
"
)
;
}
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_history_updates_disabled
(
)
{
let
screens
=
[
]
;
for
(
let
i
=
1
;
i
<
3
;
i
+
+
)
{
screens
.
push
(
makeTestContent
(
TEST_PUSH_STATE_STEP_
{
i
}
)
)
;
}
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
disableHistoryUpdates
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
screens
)
)
;
let
startHistoryLength
=
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
return
content
.
window
.
history
.
length
;
}
)
;
await
onButtonClick
(
browser
"
button
.
primary
"
)
;
let
endHistoryLength
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
.
TEST_PUSH_STATE_STEP_2
"
)
)
;
return
content
.
window
.
history
.
length
;
}
)
;
Assert
.
strictEqual
(
startHistoryLength
endHistoryLength
"
No
entries
added
to
the
session
'
s
history
stack
with
history
updates
disabled
"
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_logo_selection
(
)
{
await
testAboutWelcomeLogoFor
(
{
imageURL
:
"
chrome
:
/
/
branding
/
content
/
icon16
.
png
"
darkModeImageURL
:
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
reducedMotionImageURL
:
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
darkModeReducedMotionImageURL
:
"
chrome
:
/
/
branding
/
content
/
icon128
.
png
"
alt
:
"
TEST_LOGO_SELECTION_ALT
"
width
:
"
16px
"
height
:
"
16px
"
marginBlock
:
"
0px
"
marginInline
:
"
0px
"
}
)
;
await
testAboutWelcomeLogoFor
(
{
imageURL
:
"
chrome
:
/
/
branding
/
content
/
icon16
.
png
"
darkModeImageURL
:
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
}
)
;
await
testAboutWelcomeLogoFor
(
{
imageURL
:
"
chrome
:
/
/
branding
/
content
/
icon16
.
png
"
reducedMotionImageURL
:
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
}
)
;
await
testAboutWelcomeLogoFor
(
{
imageURL
:
"
chrome
:
/
/
branding
/
content
/
icon16
.
png
"
}
)
;
await
testAboutWelcomeLogoFor
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_start_screen_configured
(
)
{
let
startScreen
=
1
;
let
screens
=
[
]
;
for
(
let
i
=
1
;
i
<
3
;
i
+
+
)
{
screens
.
push
(
makeTestContent
(
TEST_START_STEP_
{
i
}
)
)
;
}
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
startScreen
screens
}
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
spy
=
sandbox
.
spy
(
AboutWelcomeTelemetry
.
prototype
"
sendTelemetry
"
)
;
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
screens
)
)
;
let
secondScreenShown
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
.
TEST_START_STEP_2
"
)
)
;
return
true
;
}
)
;
ok
(
secondScreenShown
Starts
on
second
screen
when
configured
with
startScreen
index
equal
to
{
startScreen
}
)
;
await
test_screen_content
(
browser
"
renders
second
screen
elements
"
[
main
.
screen
"
div
.
secondary
-
cta
"
]
)
;
let
expectedTelemetry
=
sinon
.
match
(
{
event
:
"
IMPRESSION
"
message_id
:
MR_WELCOME_DEFAULT_
{
startScreen
}
_TEST_START_STEP_
{
startScreen
+
1
}
_
{
screens
.
map
(
(
{
id
}
)
=
>
id
?
.
split
(
"
_
"
)
[
1
]
?
.
[
0
]
)
.
join
(
"
"
)
}
}
)
;
if
(
spy
.
calledWith
(
expectedTelemetry
)
)
{
ok
(
true
"
Impression
events
have
the
correct
message
id
with
start
screen
configured
"
)
;
}
else
if
(
spy
.
called
)
{
ok
(
false
Wrong
telemetry
sent
:
{
JSON
.
stringify
(
spy
.
getCalls
(
)
.
map
(
c
=
>
c
.
args
[
0
]
)
null
2
)
}
)
;
}
else
{
ok
(
false
"
No
telemetry
sent
"
)
;
}
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_rdm_property
(
)
{
let
screens
=
[
makeTestContent
(
TEST_NO_RDM
{
no_rdm
:
true
}
)
]
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
render
screen
with
'
no
-
rdm
'
attribute
"
[
"
main
.
TEST_NO_RDM
[
no
-
rdm
]
"
]
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_reverse_dismiss
(
)
{
let
screens
=
[
makeTestContent
(
TEST_REVERSE_DISMISS
{
reverse_split
:
true
position
:
"
split
"
dismiss_button
:
{
action
:
{
dismiss
:
true
}
}
}
)
]
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
render
screen
with
'
reverse_split
'
attribute
"
[
"
main
.
TEST_REVERSE_DISMISS
[
reverse
-
split
]
"
]
)
;
await
test_screen_content
(
browser
"
renders
screen
with
dismiss
button
on
secondary
section
"
[
"
.
section
-
secondary
.
dismiss
-
button
"
]
)
;
await
onButtonClick
(
browser
"
button
.
dismiss
-
button
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
home
"
)
;
is
(
browser
.
currentURI
.
spec
"
about
:
home
"
"
about
:
home
loaded
"
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_fullscreen_property
(
)
{
let
screens
=
[
makeTestContent
(
TEST_FULLSCREEN
{
fullscreen
:
true
}
)
]
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
render
screen
with
'
fullscreen
'
attribute
"
[
"
main
.
TEST_FULLSCREEN
[
fullscreen
]
"
]
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_narrow_property
(
)
{
const
logo
=
JSON
.
stringify
(
[
makeTestContent
(
"
TEST_LOGO_STEP
"
{
logo
:
{
height
:
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
imageURL
:
"
50px
"
}
}
)
]
)
;
let
screens
=
[
makeTestContent
(
TEST_FULLSCREEN
{
narrow
:
true
position
:
"
split
"
logo
}
)
]
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
render
#
multi
-
stage
-
message
-
root
container
with
'
narrow
'
attribute
"
[
"
#
multi
-
stage
-
message
-
root
[
narrow
]
"
]
)
;
await
test_element_styles
(
browser
"
.
section
-
main
"
{
"
margin
-
top
"
:
"
0px
"
width
:
"
400px
"
}
)
;
await
test_element_styles
(
browser
"
.
section
-
secondary
"
{
height
:
"
100px
"
}
)
;
await
test_element_styles
(
browser
"
.
logo
-
container
"
{
"
text
-
align
"
:
"
center
"
}
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_single_select_icon_styles
(
)
{
let
screens
=
[
makeTestContent
(
TEST_SINGLE_SELECT_ICONS
{
tiles
:
{
type
:
"
single
-
select
"
selected
:
"
horizontal
"
action
:
{
picker
:
"
<
event
>
"
}
data
:
[
{
icon
:
{
background
:
center
/
contain
no
-
repeat
url
(
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
fox
-
doodle
-
waving
.
gif
"
)
width
:
"
150px
"
height
:
"
100px
"
marginInline
:
"
10px
"
borderRadius
:
"
5px
"
}
id
:
"
test1
"
label
:
{
raw
:
"
test1
label
"
}
action
:
{
type
:
"
SET_PREF
"
data
:
{
pref
:
{
name
:
"
test1
.
pref
"
value
:
true
}
}
}
}
{
defaultValue
:
true
icon
:
{
background
:
center
/
contain
no
-
repeat
url
(
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
heart
.
webp
"
)
width
:
"
150px
"
height
:
"
100px
"
marginInline
:
"
10px
"
borderRadius
:
"
5px
"
}
id
:
"
test2
"
label
:
{
raw
:
"
test2
label
"
}
action
:
{
type
:
"
SET_PREF
"
data
:
{
pref
:
{
name
:
"
test2
.
pref
"
value
:
false
}
}
}
}
]
}
}
)
]
;
let
doExperimentCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
value
:
{
enabled
:
true
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_element_styles
(
browser
"
.
icon
.
test1
"
{
"
background
-
image
"
:
'
url
(
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
fox
-
doodle
-
waving
.
gif
"
)
'
"
background
-
repeat
"
:
"
no
-
repeat
"
"
background
-
size
"
:
"
contain
"
width
:
"
150px
"
height
:
"
100px
"
"
margin
-
inline
"
:
"
10px
"
"
border
-
radius
"
:
"
5px
"
}
)
;
await
doExperimentCleanup
(
)
;
browser
.
closeBrowser
(
)
;
}
)
;
