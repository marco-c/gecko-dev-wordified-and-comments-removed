"
use
strict
"
;
const
{
AboutWelcomeTelemetry
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
aboutwelcome
/
AboutWelcomeTelemetry
.
sys
.
mjs
"
)
;
const
TEST_DEFAULT_CONTENT
=
[
{
id
:
"
AW_STEP1
"
content
:
{
position
:
"
split
"
title
:
"
Step
1
"
page
:
"
page
1
"
source
:
"
test
"
primary_button
:
{
label
:
"
Next
"
action
:
{
navigate
:
true
}
}
secondary_button
:
{
label
:
"
link
"
}
secondary_button_top
:
{
label
:
"
link
top
"
action
:
{
type
:
"
SHOW_FIREFOX_ACCOUNTS
"
data
:
{
entrypoint
:
"
test
"
}
}
}
}
}
{
id
:
"
AW_STEP2
"
content
:
{
position
:
"
center
"
title
:
"
Step
2
"
page
:
"
page
1
"
source
:
"
test
"
primary_button
:
{
label
:
"
Next
"
action
:
{
navigate
:
true
}
}
secondary_button
:
{
label
:
"
link
"
}
has_noodles
:
true
}
}
]
;
const
TEST_DEFAULT_JSON
=
JSON
.
stringify
(
TEST_DEFAULT_CONTENT
)
;
async
function
openAboutWelcome
(
)
{
await
setAboutWelcomePref
(
true
)
;
await
setAboutWelcomeMultiStage
(
TEST_DEFAULT_JSON
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
welcome
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
return
tab
.
linkedBrowser
;
}
add_task
(
async
function
test_welcome_telemetry
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
"
true
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
Services
.
fog
.
testResetFOG
(
)
;
Assert
.
equal
(
undefined
Glean
.
messagingSystem
.
messageId
.
testGetValue
(
)
)
;
let
pingSubmitted
=
false
;
GleanPings
.
messagingSystem
.
testBeforeNextSubmit
(
(
)
=
>
{
pingSubmitted
=
true
;
const
message
=
Glean
.
messagingSystem
.
messageId
.
testGetValue
(
)
;
Assert
.
ok
(
message
.
startsWith
(
"
MR_WELCOME_DEFAULT
"
)
"
Ping
is
of
an
expected
type
"
)
;
Assert
.
equal
(
Glean
.
messagingSystem
.
unknownKeyCount
.
testGetValue
(
)
undefined
)
;
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
pingSubmitted
"
Ping
was
submitted
callback
was
called
.
"
)
;
pingSubmitted
=
false
;
GleanPings
.
messagingSystem
.
testBeforeNextSubmit
(
(
)
=
>
{
pingSubmitted
=
true
;
if
(
Glean
.
messagingSystem
.
event
.
testGetValue
(
)
=
=
=
"
IMPRESSION
"
)
{
Assert
.
equal
(
Glean
.
messagingSystem
.
eventPage
.
testGetValue
(
)
"
about
:
welcome
"
)
;
const
message
=
Glean
.
messagingSystem
.
messageId
.
testGetValue
(
)
;
Assert
.
ok
(
message
.
startsWith
(
"
MR_WELCOME_DEFAULT
"
)
"
Ping
is
of
an
expected
type
"
)
;
}
else
{
Assert
.
equal
(
Glean
.
messagingSystem
.
event
.
testGetValue
(
)
"
CLICK_BUTTON
"
)
;
Assert
.
equal
(
Glean
.
messagingSystem
.
eventSource
.
testGetValue
(
)
"
primary_button
"
)
;
Assert
.
equal
(
Glean
.
messagingSystem
.
messageId
.
testGetValue
(
)
"
MR_WELCOME_DEFAULT_0_AW_STEP1
"
)
;
}
Assert
.
equal
(
Glean
.
messagingSystem
.
unknownKeyCount
.
testGetValue
(
)
undefined
)
;
}
)
;
await
onButtonClick
(
browser
"
button
.
primary
"
)
;
Assert
.
ok
(
pingSubmitted
"
Ping
was
submitted
callback
was
called
.
"
)
;
}
)
;
