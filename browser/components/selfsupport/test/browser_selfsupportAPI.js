function
prefHas
(
pref
)
{
return
Services
.
prefs
.
getPrefType
(
pref
)
!
=
Ci
.
nsIPrefBranch
.
PREF_INVALID
;
}
function
prefIsSet
(
pref
)
{
return
Services
.
prefs
.
prefHasUserValue
(
pref
)
;
}
function
test_resetPref
(
)
{
const
prefNewName
=
"
browser
.
newpref
.
fake
"
;
Assert
.
ok
(
!
prefHas
(
prefNewName
)
"
pref
should
not
exist
"
)
;
const
prefExistingName
=
"
extensions
.
hotfix
.
id
"
;
Assert
.
ok
(
prefHas
(
prefExistingName
)
"
pref
should
exist
"
)
;
Assert
.
ok
(
!
prefIsSet
(
prefExistingName
)
"
pref
should
not
be
user
-
set
"
)
;
let
prefExistingOriginalValue
=
Services
.
prefs
.
getStringPref
(
prefExistingName
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
setStringPref
(
prefExistingName
prefExistingOriginalValue
)
;
Services
.
prefs
.
deleteBranch
(
prefNewName
)
;
}
)
;
MozSelfSupport
.
resetPref
(
prefNewName
)
;
Assert
.
ok
(
!
prefHas
(
prefNewName
)
"
pref
should
still
not
exist
"
)
;
Services
.
prefs
.
setIntPref
(
prefNewName
10
)
;
Assert
.
ok
(
prefHas
(
prefNewName
)
"
pref
should
exist
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
prefNewName
)
10
"
pref
value
should
be
10
"
)
;
MozSelfSupport
.
resetPref
(
prefNewName
)
;
Assert
.
ok
(
!
prefHas
(
prefNewName
)
"
pref
should
not
exist
any
more
"
)
;
MozSelfSupport
.
resetPref
(
prefExistingName
)
;
Assert
.
ok
(
prefHas
(
prefExistingName
)
"
pref
should
still
exist
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
prefExistingName
)
prefExistingOriginalValue
"
pref
value
should
be
the
same
as
original
"
)
;
Services
.
prefs
.
setStringPref
(
prefExistingName
"
anyone
mozilla
.
org
"
)
;
Assert
.
ok
(
prefHas
(
prefExistingName
)
"
pref
should
exist
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
prefExistingName
)
"
anyone
mozilla
.
org
"
"
pref
value
should
have
changed
"
)
;
MozSelfSupport
.
resetPref
(
prefExistingName
)
;
Assert
.
ok
(
prefHas
(
prefExistingName
)
"
pref
should
still
exist
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
prefExistingName
)
prefExistingOriginalValue
"
pref
value
should
be
the
same
as
original
"
)
;
}
function
test_resetSearchEngines
(
)
{
const
defaultEngineOriginal
=
Services
.
search
.
defaultEngine
;
const
visibleEnginesOriginal
=
Services
.
search
.
getVisibleEngines
(
)
;
MozSelfSupport
.
resetSearchEngines
(
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
defaultEngineOriginal
"
default
engine
should
be
reset
"
)
;
Assert
.
deepEqual
(
Services
.
search
.
getVisibleEngines
(
)
visibleEnginesOriginal
"
default
visible
engines
set
should
be
reset
"
)
;
const
defaultEngineNew
=
visibleEnginesOriginal
[
3
]
;
Assert
.
notEqual
(
defaultEngineOriginal
defaultEngineNew
"
new
default
engine
should
be
different
from
original
"
)
;
Services
.
search
.
defaultEngine
=
defaultEngineNew
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
defaultEngineNew
"
default
engine
should
be
set
to
new
"
)
;
MozSelfSupport
.
resetSearchEngines
(
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
defaultEngineOriginal
"
default
engine
should
be
reset
"
)
;
Assert
.
deepEqual
(
Services
.
search
.
getVisibleEngines
(
)
visibleEnginesOriginal
"
default
visible
engines
set
should
be
reset
"
)
;
const
engineRemoved
=
visibleEnginesOriginal
[
2
]
;
Services
.
search
.
removeEngine
(
engineRemoved
)
;
Assert
.
ok
(
Services
.
search
.
getVisibleEngines
(
)
.
indexOf
(
engineRemoved
)
=
=
-
1
"
removed
engine
should
not
be
visible
any
more
"
)
;
MozSelfSupport
.
resetSearchEngines
(
)
;
Assert
.
equal
(
Services
.
search
.
defaultEngine
defaultEngineOriginal
"
default
engine
should
be
reset
"
)
;
Assert
.
deepEqual
(
Services
.
search
.
getVisibleEngines
(
)
visibleEnginesOriginal
"
default
visible
engines
set
should
be
reset
"
)
;
}
function
test
(
)
{
test_resetPref
(
)
;
test_resetSearchEngines
(
)
;
}
