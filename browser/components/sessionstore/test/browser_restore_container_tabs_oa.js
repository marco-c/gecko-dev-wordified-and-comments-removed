"
use
strict
"
;
const
PATH
=
"
browser
/
browser
/
components
/
sessionstore
/
test
/
empty
.
html
"
;
loadTestSubscript
(
"
.
.
/
.
.
/
.
.
/
base
/
content
/
test
/
tabs
/
helper_origin_attrs_testing
.
js
"
)
;
var
TEST_CASES
=
[
"
https
:
/
/
example
.
com
/
"
+
PATH
"
https
:
/
/
example
.
org
/
"
+
PATH
"
about
:
preferences
"
"
about
:
config
"
]
;
var
remoteTypes
;
var
xulFrameLoaderCreatedCounter
=
{
}
;
function
handleEventLocal
(
aEvent
)
{
if
(
aEvent
.
type
!
=
"
XULFrameLoaderCreated
"
)
{
return
;
}
if
(
"
gBrowser
"
in
aEvent
.
target
.
ownerGlobal
)
{
xulFrameLoaderCreatedCounter
.
numCalledSoFar
+
+
;
}
}
var
NUM_DIFF_TAB_MODES
=
NUM_USER_CONTEXTS
+
1
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
sessionstore
.
restore_on_demand
"
true
]
[
"
browser
.
sessionstore
.
restore_tabs_lazily
"
true
]
[
"
browser
.
newtab
.
preload
"
false
]
[
"
browser
.
tabs
.
remote
.
useOriginAttributesInRemoteType
"
false
]
]
}
)
;
requestLongerTimeout
(
7
)
;
add_task
(
async
function
testWithOA
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
tabs
.
remote
.
useOriginAttributesInRemoteType
"
true
)
;
await
testRestore
(
)
;
}
)
;
if
(
gFissionBrowser
)
{
add_task
(
async
function
testWithoutOA
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
tabs
.
remote
.
useOriginAttributesInRemoteType
"
false
)
;
await
testRestore
(
)
;
}
)
;
}
}
)
;
function
setupRemoteTypes
(
)
{
let
useOriginAttributesInRemoteType
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
remote
.
useOriginAttributesInRemoteType
"
)
;
if
(
gFissionBrowser
&
&
useOriginAttributesInRemoteType
)
{
remoteTypes
=
[
"
webIsolated
=
https
:
/
/
example
.
com
"
"
webIsolated
=
https
:
/
/
example
.
com
^
userContextId
=
1
"
"
webIsolated
=
https
:
/
/
example
.
com
^
userContextId
=
2
"
"
webIsolated
=
https
:
/
/
example
.
com
^
userContextId
=
3
"
"
webIsolated
=
https
:
/
/
example
.
org
"
"
webIsolated
=
https
:
/
/
example
.
org
^
userContextId
=
1
"
"
webIsolated
=
https
:
/
/
example
.
org
^
userContextId
=
2
"
"
webIsolated
=
https
:
/
/
example
.
org
^
userContextId
=
3
"
]
;
}
else
if
(
gFissionBrowser
)
{
remoteTypes
=
[
.
.
.
Array
(
NUM_DIFF_TAB_MODES
)
.
fill
(
"
webIsolated
=
https
:
/
/
example
.
com
"
)
.
.
.
Array
(
NUM_DIFF_TAB_MODES
)
.
fill
(
"
webIsolated
=
https
:
/
/
example
.
org
"
)
]
;
}
else
{
remoteTypes
=
Array
(
NUM_DIFF_TAB_MODES
*
2
)
.
fill
(
"
web
"
)
;
}
remoteTypes
.
push
(
.
.
.
Array
(
NUM_DIFF_TAB_MODES
*
2
)
.
fill
(
null
)
)
;
forgetClosedWindows
(
)
;
is
(
SessionStore
.
getClosedWindowCount
(
)
0
"
starting
with
no
closed
windows
"
)
;
}
async
function
testRestore
(
)
{
setupRemoteTypes
(
)
;
let
newWin
=
await
promiseNewWindowLoaded
(
)
;
var
regularPages
=
[
]
;
var
containerPages
=
{
}
;
for
(
const
uri
of
TEST_CASES
)
{
let
regularPage
=
await
openURIInRegularTab
(
uri
newWin
)
;
regularPages
.
push
(
regularPage
)
;
for
(
var
user_context_id
=
1
;
user_context_id
<
=
NUM_USER_CONTEXTS
;
user_context_id
+
+
)
{
let
containerPage
=
await
openURIInContainer
(
uri
newWin
user_context_id
)
;
containerPages
[
uri
]
=
containerPage
;
}
}
await
TabStateFlusher
.
flushWindow
(
newWin
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
await
forceSaveState
(
)
;
is
(
SessionStore
.
getClosedWindowCount
(
)
1
"
Should
have
restore
data
for
the
closed
window
"
)
;
newWin
=
SessionStore
.
undoCloseWindow
(
0
)
;
await
Promise
.
all
(
[
BrowserTestUtils
.
waitForEvent
(
newWin
"
SSWindowStateReady
"
)
]
)
;
await
BrowserTestUtils
.
waitForEvent
(
newWin
.
gBrowser
.
tabContainer
"
SSTabRestored
"
)
;
var
nonblank_pages_len
=
TEST_CASES
.
length
+
NUM_USER_CONTEXTS
*
TEST_CASES
.
length
;
is
(
newWin
.
gBrowser
.
tabs
.
length
nonblank_pages_len
+
1
"
Correct
number
of
tabs
restored
"
)
;
info
(
Number
of
tabs
restored
:
{
newWin
.
gBrowser
.
tabs
.
length
}
)
;
var
currRemoteType
expectedRemoteType
;
let
loaded
;
for
(
var
tab_idx
=
1
;
tab_idx
<
nonblank_pages_len
;
)
{
info
(
Accessing
regular
tab
at
index
{
tab_idx
}
)
;
var
test_page_data
=
regularPages
.
shift
(
)
;
let
regular_tab
=
newWin
.
gBrowser
.
tabs
[
tab_idx
]
;
let
regular_browser
=
regular_tab
.
linkedBrowser
;
let
correctLocation
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
regular_browser
.
currentURI
.
spec
=
=
test_page_data
.
uri
;
}
)
;
newWin
.
gBrowser
.
selectedTab
=
regular_tab
;
await
TabStateFlusher
.
flush
(
regular_browser
)
;
await
correctLocation
;
currRemoteType
=
regular_browser
.
remoteType
;
expectedRemoteType
=
remoteTypes
.
shift
(
)
;
is
(
currRemoteType
expectedRemoteType
"
correct
remote
type
for
regular
tab
"
)
;
let
page_uri
=
regular_browser
.
currentURI
.
spec
;
info
(
Current
uri
=
{
page_uri
}
)
;
var
userContextId
=
1
;
for
(
var
container_tab_idx
=
tab_idx
+
1
;
container_tab_idx
<
tab_idx
+
1
+
NUM_USER_CONTEXTS
;
container_tab_idx
+
+
userContextId
+
+
)
{
info
(
Accessing
container
tab
at
index
{
container_tab_idx
}
)
;
let
container_tab
=
newWin
.
gBrowser
.
tabs
[
container_tab_idx
]
;
initXulFrameLoaderCreatedCounter
(
xulFrameLoaderCreatedCounter
)
;
container_tab
.
ownerGlobal
.
gBrowser
.
addEventListener
(
"
XULFrameLoaderCreated
"
handleEventLocal
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
container_tab
.
linkedBrowser
false
test_page_data
.
uri
)
;
newWin
.
gBrowser
.
selectedTab
=
container_tab
;
await
TabStateFlusher
.
flush
(
container_tab
.
linkedBrowser
)
;
await
loaded
;
let
uri
=
container_tab
.
linkedBrowser
.
currentURI
.
spec
;
if
(
test_page_data
.
uri
=
=
"
about
:
preferences
"
|
|
test_page_data
.
uri
=
=
"
about
:
config
"
|
|
gFissionBrowser
)
{
todo_is
(
xulFrameLoaderCreatedCounter
.
numCalledSoFar
1
XULFrameLoaderCreated
was
fired
once
when
restoring
{
uri
}
in
container
{
userContextId
}
)
;
}
else
{
is
(
xulFrameLoaderCreatedCounter
.
numCalledSoFar
1
XULFrameLoaderCreated
was
fired
once
when
restoring
{
uri
}
in
container
{
userContextId
}
)
;
}
ok
(
xulFrameLoaderCreatedCounter
.
numCalledSoFar
<
=
2
XULFrameLoaderCreated
was
fired
[
1
2
]
times
when
restoring
{
uri
}
in
container
{
userContextId
}
)
;
container_tab
.
ownerGlobal
.
gBrowser
.
removeEventListener
(
"
XULFrameLoaderCreated
"
handleEventLocal
)
;
currRemoteType
=
container_tab
.
linkedBrowser
.
remoteType
;
expectedRemoteType
=
remoteTypes
.
shift
(
)
;
info
(
Remote
type
for
container
tab
{
userContextId
}
is
{
currRemoteType
}
)
;
is
(
currRemoteType
expectedRemoteType
"
correct
remote
type
for
container
tab
"
)
;
}
tab_idx
=
container_tab_idx
;
}
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
