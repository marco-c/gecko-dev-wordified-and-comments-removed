"
use
strict
"
;
const
RAND
=
Math
.
random
(
)
;
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
"
+
"
browser
/
components
/
sessionstore
/
test
/
browser_sessionStorage
.
html
"
+
"
?
"
+
RAND
;
const
OUTER_VALUE
=
"
outer
-
value
-
"
+
RAND
;
const
INNER_VALUE
=
"
inner
-
value
-
"
+
RAND
;
add_task
(
async
function
session_storage
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
INNER_VALUE
"
sessionStorage
data
for
example
.
com
has
been
serialized
correctly
"
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
OUTER_VALUE
"
sessionStorage
data
for
mochi
.
test
has
been
serialized
correctly
"
)
;
await
modifySessionStorage
(
browser
{
test
:
"
modified1
"
}
{
frameIndex
:
0
}
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
modified1
"
"
sessionStorage
data
for
example
.
com
has
been
serialized
correctly
"
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
OUTER_VALUE
"
sessionStorage
data
for
mochi
.
test
has
been
serialized
correctly
"
)
;
await
modifySessionStorage
(
browser
{
test
:
"
modified
"
}
)
;
await
modifySessionStorage
(
browser
{
test
:
"
modified2
"
}
{
frameIndex
:
0
}
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
modified2
"
"
sessionStorage
data
for
example
.
com
has
been
serialized
correctly
"
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
"
modified
"
"
sessionStorage
data
for
mochi
.
test
has
been
serialized
correctly
"
)
;
let
tab2
=
gBrowser
.
duplicateTab
(
tab
)
;
let
browser2
=
tab2
.
linkedBrowser
;
await
promiseTabRestored
(
tab2
)
;
await
TabStateFlusher
.
flush
(
browser2
)
;
(
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab2
)
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
modified2
"
"
sessionStorage
data
for
example
.
com
has
been
duplicated
correctly
"
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
"
modified
"
"
sessionStorage
data
for
mochi
.
test
has
been
duplicated
correctly
"
)
;
await
modifySessionStorage
(
browser2
{
test
:
"
modified3
"
}
)
;
await
TabStateFlusher
.
flush
(
browser2
)
;
(
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab2
)
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
modified2
"
"
sessionStorage
data
for
example
.
com
has
been
duplicated
correctly
"
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
"
modified3
"
"
sessionStorage
data
for
mochi
.
test
has
been
duplicated
correctly
"
)
;
browser2
.
loadURI
(
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
await
promiseBrowserLoaded
(
browser2
)
;
await
TabStateFlusher
.
flush
(
browser2
)
;
(
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab2
)
)
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
"
modified3
"
"
navigating
retains
correct
storage
data
"
)
;
ok
(
!
storage
[
"
http
:
/
/
example
.
com
"
]
"
storage
data
was
discarded
"
)
;
browser2
.
loadURI
(
"
about
:
mozilla
"
)
;
await
promiseBrowserLoaded
(
browser2
)
;
await
TabStateFlusher
.
flush
(
browser2
)
;
let
state
=
JSON
.
parse
(
ss
.
getTabState
(
tab2
)
)
;
ok
(
!
state
.
hasOwnProperty
(
"
storage
"
)
"
storage
data
was
discarded
"
)
;
await
promiseRemoveTab
(
tab
)
;
await
promiseRemoveTab
(
tab2
)
;
}
)
;
add_task
(
async
function
purge_domain
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
purgeDomainData
(
browser
"
mochi
.
test
"
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
ok
(
!
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
"
sessionStorage
data
for
mochi
.
test
has
been
purged
"
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
INNER_VALUE
"
sessionStorage
data
for
example
.
com
has
been
preserved
"
)
;
await
promiseRemoveTab
(
tab
)
;
}
)
;
add_task
(
async
function
respect_privacy_level
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
+
"
&
secure
"
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
await
promiseRemoveTab
(
tab
)
;
let
[
{
state
:
{
storage
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
OUTER_VALUE
"
http
sessionStorage
data
has
been
saved
"
)
;
is
(
storage
[
"
https
:
/
/
example
.
com
"
]
.
test
INNER_VALUE
"
https
sessionStorage
data
has
been
saved
"
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
privacy_level
"
1
)
;
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
+
"
&
secure
"
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
await
promiseRemoveTab
(
tab
)
;
[
{
state
:
{
storage
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
OUTER_VALUE
"
http
sessionStorage
data
has
been
saved
"
)
;
ok
(
!
storage
[
"
https
:
/
/
example
.
com
"
]
"
https
sessionStorage
data
has
*
not
*
been
saved
"
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
privacy_level
"
2
)
;
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
+
"
&
secure
"
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
let
tab2
=
gBrowser
.
duplicateTab
(
tab
)
;
await
promiseTabRestored
(
tab2
)
;
await
promiseRemoveTab
(
tab
)
;
[
{
state
:
{
storage
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
ok
(
!
storage
"
sessionStorage
data
has
*
not
*
been
saved
"
)
;
while
(
ss
.
getClosedTabCount
(
window
)
>
0
)
{
ss
.
forgetClosedTab
(
window
0
)
;
}
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
privacy_level
"
)
;
await
promiseRemoveTab
(
tab2
)
;
[
{
state
:
{
storage
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
storage
[
"
http
:
/
/
mochi
.
test
:
8888
"
]
.
test
OUTER_VALUE
"
http
sessionStorage
data
has
been
saved
"
)
;
is
(
storage
[
"
https
:
/
/
example
.
com
"
]
.
test
INNER_VALUE
"
https
sessionStorage
data
has
been
saved
"
)
;
}
)
;
function
purgeDomainData
(
browser
domain
)
{
return
sendMessage
(
browser
"
ss
-
test
:
purgeDomainData
"
domain
)
;
}
