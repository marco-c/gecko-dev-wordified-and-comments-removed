"
use
strict
"
;
const
REMOTE_URL
=
"
https
:
/
/
www
.
example
.
com
/
"
;
const
ABOUT_ROBOTS_URL
=
"
about
:
robots
"
;
const
NO_TITLE_URL
=
"
data
:
text
/
plain
foo
"
;
const
BACKUP_STATE
=
SessionStore
.
getBrowserState
(
)
;
registerCleanupFunction
(
(
)
=
>
promiseBrowserState
(
BACKUP_STATE
)
)
;
function
promiseSessionStoreLoads
(
numberOfLoads
)
{
let
loadsSeen
=
0
;
return
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
obs
(
browser
)
{
loadsSeen
+
+
;
if
(
loadsSeen
=
=
numberOfLoads
)
{
resolve
(
)
;
}
if
(
typeof
info
=
=
"
undefined
"
|
|
loadsSeen
>
=
numberOfLoads
)
{
Services
.
obs
.
removeObserver
(
obs
"
sessionstore
-
debug
-
tab
-
restored
"
)
;
}
info
(
"
Saw
load
for
"
+
browser
.
currentURI
.
spec
)
;
}
"
sessionstore
-
debug
-
tab
-
restored
"
)
;
}
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
sessionstore
.
restore_on_demand
"
true
]
[
"
browser
.
sessionstore
.
restore_tabs_lazily
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_pinned_tabs_order
(
)
{
let
allTabsRestored
=
promiseSessionStoreLoads
(
4
)
;
await
promiseBrowserState
(
{
windows
:
[
{
selected
:
4
tabs
:
[
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
ABOUT_ROBOTS_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
NO_TITLE_URL
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
about
:
blank
"
triggeringPrincipal_base64
}
]
}
]
}
]
}
)
;
await
allTabsRestored
;
let
[
tab1
tab2
tab3
tab4
tab5
]
=
gBrowser
.
tabs
;
ok
(
tab1
.
pinned
"
First
tab
is
pinned
"
)
;
ok
(
tab2
.
pinned
"
Second
tab
is
pinned
"
)
;
ok
(
tab3
.
pinned
"
Third
tab
is
pinned
"
)
;
ok
(
!
tab4
.
pinned
"
Fourth
tab
is
not
pinned
"
)
;
ok
(
!
tab5
.
pinned
"
Fifth
tab
is
not
pinned
"
)
;
ok
(
tab4
.
selected
"
Fourth
tab
is
selected
"
)
;
is
(
tab1
.
linkedBrowser
.
currentURI
.
spec
REMOTE_URL
"
First
tab
has
matching
URL
"
)
;
is
(
tab2
.
linkedBrowser
.
currentURI
.
spec
ABOUT_ROBOTS_URL
"
Second
tab
has
matching
URL
"
)
;
is
(
tab3
.
linkedBrowser
.
currentURI
.
spec
NO_TITLE_URL
"
Third
tab
has
matching
URL
"
)
;
await
promiseBrowserState
(
BACKUP_STATE
)
;
}
)
;
add_task
(
async
function
test_selected_pinned_tab_dataloss
(
)
{
let
allTabsRestored
=
promiseSessionStoreLoads
(
3
)
;
await
promiseBrowserState
(
{
windows
:
[
{
selected
:
1
tabs
:
[
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
ABOUT_ROBOTS_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
NO_TITLE_URL
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
about
:
blank
"
triggeringPrincipal_base64
}
]
}
]
}
]
}
)
;
await
allTabsRestored
;
let
[
tab1
tab2
tab3
tab4
tab5
]
=
gBrowser
.
tabs
;
ok
(
tab5
"
Should
have
5
tabs
"
)
;
ok
(
tab1
.
pinned
"
First
tab
is
pinned
"
)
;
ok
(
tab2
.
pinned
"
Second
tab
is
pinned
"
)
;
ok
(
tab3
.
pinned
"
Third
tab
is
pinned
"
)
;
ok
(
tab4
&
&
!
tab4
.
pinned
"
Fourth
tab
is
not
pinned
"
)
;
ok
(
tab5
&
&
!
tab5
.
pinned
"
Fifth
tab
is
not
pinned
"
)
;
ok
(
tab1
&
&
tab1
.
selected
"
First
(
pinned
)
tab
is
selected
"
)
;
is
(
tab1
.
linkedBrowser
.
currentURI
.
spec
REMOTE_URL
"
First
tab
has
matching
URL
"
)
;
is
(
tab2
.
linkedBrowser
.
currentURI
.
spec
ABOUT_ROBOTS_URL
"
Second
tab
has
matching
URL
"
)
;
is
(
tab3
.
linkedBrowser
.
currentURI
.
spec
NO_TITLE_URL
"
Third
tab
has
matching
URL
"
)
;
await
promiseBrowserState
(
BACKUP_STATE
)
;
}
)
;
add_task
(
async
function
test_mixed_pinned_unpinned
(
)
{
let
allTabsRestored
=
promiseSessionStoreLoads
(
4
)
;
await
promiseBrowserState
(
{
windows
:
[
{
selected
:
4
tabs
:
[
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
ABOUT_ROBOTS_URL
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
about
:
blank
"
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
NO_TITLE_URL
triggeringPrincipal_base64
}
]
}
]
}
]
}
)
;
await
allTabsRestored
;
let
[
tab1
tab2
tab3
tab4
tab5
]
=
gBrowser
.
tabs
;
ok
(
tab1
.
pinned
"
First
tab
is
pinned
"
)
;
ok
(
tab2
.
pinned
"
Second
tab
is
pinned
"
)
;
ok
(
tab3
.
pinned
"
Third
tab
is
pinned
"
)
;
ok
(
!
tab4
.
pinned
"
Fourth
tab
is
not
pinned
"
)
;
ok
(
!
tab5
.
pinned
"
Fifth
tab
is
not
pinned
"
)
;
ok
(
tab5
.
selected
"
Fifth
tab
is
selected
"
)
;
is
(
tab1
.
linkedBrowser
.
currentURI
.
spec
REMOTE_URL
"
First
tab
has
matching
URL
"
)
;
is
(
tab2
.
linkedBrowser
.
currentURI
.
spec
ABOUT_ROBOTS_URL
"
Second
tab
has
matching
URL
"
)
;
is
(
tab3
.
linkedBrowser
.
currentURI
.
spec
NO_TITLE_URL
"
Third
tab
has
matching
URL
"
)
;
await
promiseBrowserState
(
BACKUP_STATE
)
;
}
)
;
add_task
(
async
function
test_pinned_tab_dataloss
(
)
{
if
(
!
AppConstants
.
MOZ_CRASHREPORTER
)
{
return
;
}
if
(
SpecialPowers
.
getIntPref
(
"
dom
.
ipc
.
processCount
"
)
>
8
)
{
ok
(
false
"
Process
count
is
greater
than
8
update
the
number
of
pinned
tabs
in
test
.
"
)
;
}
let
allTabsRestored
=
promiseSessionStoreLoads
(
18
)
;
await
promiseBrowserState
(
{
windows
:
[
{
selected
:
18
tabs
:
[
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
pinned
:
true
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
REMOTE_URL
triggeringPrincipal_base64
}
]
}
]
}
]
}
)
;
await
allTabsRestored
;
let
tabs
=
gBrowser
.
tabs
;
BrowserTestUtils
.
crashFrame
(
tabs
[
17
]
.
linkedBrowser
)
;
await
TestUtils
.
topicObserved
(
"
sessionstore
-
state
-
write
-
complete
"
)
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
{
let
tab
=
tabs
[
i
]
;
is
(
tab
.
linkedBrowser
.
currentURI
.
spec
REMOTE_URL
Tab
{
i
+
1
}
should
have
matching
URL
)
;
}
await
promiseBrowserState
(
BACKUP_STATE
)
;
}
)
;
