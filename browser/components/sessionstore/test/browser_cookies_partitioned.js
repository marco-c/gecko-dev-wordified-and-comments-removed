"
use
strict
"
;
const
TEST_HOST
=
"
example
.
com
"
;
const
TEST_URL
=
https
:
/
/
{
TEST_HOST
}
;
const
MAX_EXPIRY
=
Math
.
pow
(
2
62
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
sessionstore
.
interval
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
runTest
(
)
{
Services
.
cookies
.
removeAll
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
Services
.
cookies
.
add
(
TEST_HOST
"
/
"
"
foo
"
"
bar
"
false
false
true
MAX_EXPIRY
{
partitionKey
:
"
(
https
example
.
com
)
"
}
Ci
.
nsICookie
.
SAMESITE_NONE
Ci
.
nsICookie
.
SCHEME_HTTPS
true
)
;
await
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
let
state
=
ss
.
getBrowserState
(
)
;
state
=
JSON
.
parse
(
state
)
;
delete
state
.
cookies
[
0
]
.
isPartitioned
;
state
=
JSON
.
stringify
(
state
)
;
Services
.
cookies
.
removeAll
(
)
;
await
setBrowserState
(
state
)
;
is
(
Services
.
cookies
.
cookies
.
length
1
"
One
cookie
should
be
restored
.
"
)
;
let
cookie
=
Services
.
cookies
.
cookies
[
0
]
;
is
(
cookie
.
name
"
foo
"
"
The
cookie
name
should
be
foo
.
"
)
;
is
(
cookie
.
value
"
bar
"
"
The
cookie
value
should
be
bar
.
"
)
;
ok
(
cookie
.
isPartitioned
"
The
isPartitioned
flag
should
be
set
.
"
)
;
Services
.
cookies
.
removeAll
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
