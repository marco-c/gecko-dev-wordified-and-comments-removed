"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
async
function
test_load_start
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
BrowserTestUtils
.
loadURI
(
browser
"
about
:
mozilla
"
)
;
await
promiseContentMessage
(
browser
"
ss
-
test
:
OnHistoryReplaceEntry
"
)
;
await
promiseRemoveTab
(
tab
)
;
tab
=
ss
.
undoCloseTab
(
window
0
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabRestored
(
tab
)
;
is
(
browser
.
currentURI
.
spec
"
about
:
mozilla
"
"
url
is
correct
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_hashchange
(
)
{
const
PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
example
.
com
/
"
)
;
const
URL
=
PATH
+
"
file_sessionHistory_hashchange
.
html
"
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
one
shistory
entry
"
)
;
browser
.
messageManager
.
sendAsyncMessage
(
"
ss
-
test
:
click
"
{
id
:
"
a
"
}
)
;
await
promiseContentMessage
(
browser
"
ss
-
test
:
hashchange
"
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
2
"
there
are
two
shistory
entries
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_pageshow
(
)
{
const
URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
h1
>
first
<
/
h1
>
"
;
const
URL2
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
h1
>
second
<
/
h1
>
"
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
browser
.
loadURI
(
URL2
)
;
await
promiseBrowserLoaded
(
browser
)
;
let
pageShowPromise
=
ContentTask
.
spawn
(
browser
null
async
(
)
=
>
{
return
ContentTaskUtils
.
waitForEvent
(
this
"
pageshow
"
true
)
;
}
)
;
browser
.
goBack
(
)
;
await
pageShowPromise
;
is
(
browser
.
currentURI
.
spec
URL
"
correct
url
after
going
back
"
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
index
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
index
1
"
first
history
entry
is
selected
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_subframes
(
)
{
const
URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
iframe
src
=
http
%
3A
/
/
example
.
com
/
name
=
t
>
<
/
iframe
>
"
+
"
<
a
id
=
a1
href
=
http
%
3A
/
/
example
.
com
/
1
target
=
t
>
clickme
<
/
a
>
"
+
"
<
a
id
=
a2
href
=
http
%
3A
/
/
example
.
com
/
%
23
target
=
t
>
clickme
<
/
a
>
"
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
one
shistory
entry
"
)
;
is
(
entries
[
0
]
.
children
.
length
1
"
the
entry
has
one
child
"
)
;
browser
.
messageManager
.
sendAsyncMessage
(
"
ss
-
test
:
click
"
{
id
:
"
a1
"
}
)
;
await
promiseBrowserLoaded
(
browser
false
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
2
"
there
now
are
two
shistory
entries
"
)
;
is
(
entries
[
1
]
.
children
.
length
1
"
the
second
entry
has
one
child
"
)
;
browser
.
goBack
(
)
;
await
promiseBrowserLoaded
(
browser
false
)
;
browser
.
messageManager
.
sendAsyncMessage
(
"
ss
-
test
:
click
"
{
id
:
"
a2
"
}
)
;
await
promiseContentMessage
(
browser
"
ss
-
test
:
hashchange
"
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
2
"
there
now
are
two
shistory
entries
"
)
;
is
(
entries
[
1
]
.
children
.
length
1
"
the
second
entry
has
one
child
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_about_page_navigate
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
one
shistory
entry
"
)
;
is
(
entries
[
0
]
.
url
"
about
:
blank
"
"
url
is
correct
"
)
;
is
(
entries
[
0
]
.
title
"
about
:
blank
"
"
title
is
correct
"
)
;
browser
.
loadURI
(
"
about
:
robots
"
)
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
1
"
there
is
one
shistory
entry
"
)
;
is
(
entries
[
0
]
.
url
"
about
:
robots
"
"
url
is
correct
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_pushstate_replacestate
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
http
:
/
/
example
.
com
/
1
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
one
shistory
entry
"
)
;
is
(
entries
[
0
]
.
url
"
http
:
/
/
example
.
com
/
1
"
"
url
is
correct
"
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
content
.
window
.
history
.
pushState
(
{
}
"
"
"
test
-
entry
/
"
)
;
}
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
2
"
there
is
another
shistory
entry
"
)
;
is
(
entries
[
1
]
.
url
"
http
:
/
/
example
.
com
/
test
-
entry
/
"
"
url
is
correct
"
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
content
.
window
.
history
.
replaceState
(
{
}
"
"
"
test
-
entry2
/
"
)
;
}
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
2
"
there
is
still
two
shistory
entries
"
)
;
is
(
entries
[
1
]
.
url
"
http
:
/
/
example
.
com
/
test
-
entry
/
test
-
entry2
/
"
"
url
is
correct
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_slow_subframe_load
(
)
{
const
SLOW_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
"
+
"
sessionstore
/
test
/
browser_sessionHistory_slow
.
sjs
"
;
const
URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
frameset
cols
=
50
%
25
50
%
25
>
"
+
"
<
frame
src
=
'
"
+
SLOW_URL
+
"
'
>
"
+
"
<
/
frameset
>
"
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
one
root
entry
.
.
.
"
)
;
is
(
entries
[
0
]
.
children
.
length
1
"
.
.
.
with
one
child
entries
"
)
;
ok
(
entries
[
0
]
.
url
.
startsWith
(
"
data
:
text
/
html
"
)
"
correct
root
url
"
)
;
is
(
entries
[
0
]
.
children
[
0
]
.
url
SLOW_URL
"
correct
url
for
subframe
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
