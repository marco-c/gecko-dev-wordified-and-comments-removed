const
TEST_URLS
=
[
"
about
:
buildconfig
"
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
sessionstore
/
test
/
browser_speculative_connect
.
html
"
"
"
]
;
async
function
openTabs
(
win
)
{
for
(
let
i
=
0
;
i
<
TEST_URLS
.
length
;
+
+
i
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
TEST_URLS
[
i
]
)
;
}
}
add_task
(
async
function
speculative_connect_restore_on_demand
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
sessionstore
.
restore_on_demand
"
true
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
sessionstore
.
restore_on_demand
"
)
true
"
We
'
re
restoring
on
demand
"
)
;
forgetClosedWindows
(
)
;
let
win
=
await
promiseNewWindowLoaded
(
)
;
await
openTabs
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
let
newWin
=
undoCloseWindow
(
0
)
;
await
BrowserTestUtils
.
waitForEvent
(
newWin
"
load
"
)
;
let
tabs
=
newWin
.
gBrowser
.
tabs
;
is
(
tabs
.
length
TEST_URLS
.
length
+
1
"
Restored
right
number
of
tabs
"
)
;
let
e
=
new
MouseEvent
(
"
mouseover
"
)
;
tabs
[
1
]
.
dispatchEvent
(
e
)
;
ok
(
!
tabs
[
1
]
.
__test_connection_prepared
"
Second
tab
doesn
'
t
have
a
connection
prepared
"
)
;
is
(
tabs
[
1
]
.
__test_connection_url
TEST_URLS
[
0
]
"
Second
tab
has
correct
url
"
)
;
ok
(
SessionStore
.
getLazyTabValue
(
tabs
[
1
]
"
connectionPrepared
"
)
"
Second
tab
should
have
connectionPrepared
flag
after
hovered
"
)
;
tabs
[
2
]
.
dispatchEvent
(
e
)
;
ok
(
tabs
[
2
]
.
__test_connection_prepared
"
Third
tab
has
a
connection
prepared
"
)
;
is
(
tabs
[
2
]
.
__test_connection_url
TEST_URLS
[
1
]
"
Third
tab
has
correct
url
"
)
;
ok
(
SessionStore
.
getLazyTabValue
(
tabs
[
2
]
"
connectionPrepared
"
)
"
Third
tab
should
have
connectionPrepared
flag
after
hovered
"
)
;
tabs
[
3
]
.
dispatchEvent
(
e
)
;
is
(
SessionStore
.
getLazyTabValue
(
tabs
[
3
]
"
connectionPrepared
"
)
undefined
"
Previous
selected
tab
shouldn
'
t
have
connectionPrepared
flag
"
)
;
is
(
tabs
[
3
]
.
__test_connection_prepared
undefined
"
Previous
selected
tab
should
not
have
a
connection
prepared
"
)
;
is
(
tabs
[
3
]
.
__test_connection_url
undefined
"
Previous
selected
tab
should
not
have
a
connection
prepared
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
)
;
add_task
(
async
function
speculative_connect_restore_automatically
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
sessionstore
.
restore_on_demand
"
false
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
sessionstore
.
restore_on_demand
"
)
false
"
We
'
re
restoring
automatically
"
)
;
forgetClosedWindows
(
)
;
let
win
=
await
promiseNewWindowLoaded
(
)
;
await
openTabs
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
let
newWin
=
undoCloseWindow
(
0
)
;
await
BrowserTestUtils
.
waitForEvent
(
newWin
"
load
"
)
;
let
tabs
=
newWin
.
gBrowser
.
tabs
;
is
(
tabs
.
length
TEST_URLS
.
length
+
1
"
Restored
right
number
of
tabs
"
)
;
ok
(
!
tabs
[
1
]
.
__test_connection_prepared
"
Second
tab
doesn
'
t
have
a
connection
prepared
"
)
;
is
(
tabs
[
1
]
.
__test_connection_url
TEST_URLS
[
0
]
"
Second
tab
has
correct
host
url
"
)
;
ok
(
tabs
[
2
]
.
__test_connection_prepared
"
Third
tab
has
a
connection
prepared
"
)
;
is
(
tabs
[
2
]
.
__test_connection_url
TEST_URLS
[
1
]
"
Third
tab
has
correct
host
url
"
)
;
is
(
tabs
[
3
]
.
__test_connection_prepared
undefined
"
Selected
tab
should
not
have
a
connection
prepared
"
)
;
is
(
tabs
[
3
]
.
__test_connection_url
undefined
"
Selected
tab
should
not
have
a
connection
prepared
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
)
;
