function
testWindows
(
windowsToOpen
expectedResults
)
{
return
Task
.
spawn
(
function
*
(
)
{
for
(
let
winData
of
windowsToOpen
)
{
let
features
=
"
chrome
dialog
=
no
"
+
(
winData
.
isPopup
?
"
all
=
no
"
:
"
all
"
)
;
let
url
=
"
http
:
/
/
example
.
com
/
?
window
=
"
+
windowsToOpen
.
length
;
let
openWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
true
url
)
;
openDialog
(
getBrowserURL
(
)
"
"
features
url
)
;
let
win
=
yield
openWindowPromise
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
let
closedWindowData
=
JSON
.
parse
(
ss
.
getClosedWindowData
(
)
)
;
let
numPopups
=
closedWindowData
.
filter
(
function
(
el
i
arr
)
{
return
el
.
isPopup
;
}
)
.
length
;
let
numNormal
=
ss
.
getClosedWindowCount
(
)
-
numPopups
;
let
oResults
=
navigator
.
platform
.
match
(
/
Mac
/
)
?
expectedResults
.
mac
:
expectedResults
.
other
;
is
(
numPopups
oResults
.
popup
"
There
were
"
+
oResults
.
popup
+
"
popup
windows
to
reopen
"
)
;
is
(
numNormal
oResults
.
normal
"
There
were
"
+
oResults
.
normal
+
"
normal
windows
to
repoen
"
)
;
}
)
;
}
add_task
(
function
*
test_closed_window_states
(
)
{
requestLongerTimeout
(
2
)
;
let
windowsToOpen
=
[
{
isPopup
:
false
}
{
isPopup
:
false
}
{
isPopup
:
true
}
{
isPopup
:
true
}
{
isPopup
:
true
}
]
;
let
expectedResults
=
{
mac
:
{
popup
:
3
normal
:
0
}
other
:
{
popup
:
3
normal
:
1
}
}
;
yield
testWindows
(
windowsToOpen
expectedResults
)
;
let
windowsToOpen2
=
[
{
isPopup
:
false
}
{
isPopup
:
false
}
{
isPopup
:
false
}
{
isPopup
:
false
}
{
isPopup
:
false
}
]
;
let
expectedResults2
=
{
mac
:
{
popup
:
0
normal
:
3
}
other
:
{
popup
:
0
normal
:
3
}
}
;
yield
testWindows
(
windowsToOpen2
expectedResults2
)
;
}
)
;
