"
use
strict
"
;
const
{
SessionWriter
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionWriter
.
sys
.
mjs
"
)
;
do_get_profile
(
)
;
const
{
SessionFile
:
{
Paths
}
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionFile
.
sys
.
mjs
"
)
;
const
MAX_ENTRIES
=
9
;
const
URL
=
"
http
:
/
/
example
.
com
/
#
"
;
async
function
prepareWithLimit
(
back
fwd
)
{
SessionWriter
.
init
(
"
empty
"
false
Paths
{
maxSerializeBack
:
back
maxSerializeForward
:
fwd
maxUpgradeBackups
:
3
}
)
;
await
SessionWriter
.
wipe
(
)
;
}
add_setup
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
SessionWriter
.
wipe
(
)
)
;
}
)
;
function
createSessionState
(
index
)
{
let
tabState
=
{
entries
:
[
]
index
}
;
for
(
let
i
=
0
;
i
<
MAX_ENTRIES
;
i
+
+
)
{
tabState
.
entries
.
push
(
{
url
:
URL
+
i
}
)
;
}
return
{
windows
:
[
{
tabs
:
[
tabState
]
}
]
}
;
}
async
function
writeAndParse
(
state
path
options
=
{
}
)
{
let
data
=
structuredClone
(
state
)
;
await
SessionWriter
.
write
(
data
options
)
;
return
IOUtils
.
readJSON
(
path
{
decompress
:
true
}
)
;
}
add_task
(
async
function
test_shistory_cap_none
(
)
{
let
state
=
createSessionState
(
5
)
;
await
prepareWithLimit
(
-
1
-
1
)
;
let
diskState
=
await
writeAndParse
(
state
Paths
.
clean
{
isFinalWrite
:
true
}
)
;
Assert
.
deepEqual
(
state
diskState
"
no
cap
applied
"
)
;
}
)
;
add_task
(
async
function
test_shistory_cap_middle
(
)
{
let
state
=
createSessionState
(
5
)
;
await
prepareWithLimit
(
2
3
)
;
let
diskState
=
await
writeAndParse
(
state
Paths
.
recovery
)
;
Assert
.
deepEqual
(
state
diskState
"
no
cap
applied
"
)
;
diskState
=
await
writeAndParse
(
state
Paths
.
clean
{
isFinalWrite
:
true
}
)
;
let
tabState
=
state
.
windows
[
0
]
.
tabs
[
0
]
;
tabState
.
entries
=
tabState
.
entries
.
slice
(
2
8
)
;
tabState
.
index
=
3
;
Assert
.
deepEqual
(
state
diskState
"
cap
applied
"
)
;
}
)
;
add_task
(
async
function
test_shistory_cap_lower_bound
(
)
{
let
state
=
createSessionState
(
1
)
;
await
prepareWithLimit
(
5
5
)
;
let
diskState
=
await
writeAndParse
(
state
Paths
.
recovery
)
;
Assert
.
deepEqual
(
state
diskState
"
no
cap
applied
"
)
;
diskState
=
await
writeAndParse
(
state
Paths
.
clean
{
isFinalWrite
:
true
}
)
;
let
tabState
=
state
.
windows
[
0
]
.
tabs
[
0
]
;
tabState
.
entries
=
tabState
.
entries
.
slice
(
0
6
)
;
Assert
.
deepEqual
(
state
diskState
"
cap
applied
"
)
;
}
)
;
add_task
(
async
function
test_shistory_cap_upper_bound
(
)
{
let
state
=
createSessionState
(
MAX_ENTRIES
)
;
await
prepareWithLimit
(
5
5
)
;
let
diskState
=
await
writeAndParse
(
state
Paths
.
recovery
)
;
Assert
.
deepEqual
(
state
diskState
"
no
cap
applied
"
)
;
diskState
=
await
writeAndParse
(
state
Paths
.
clean
{
isFinalWrite
:
true
}
)
;
let
tabState
=
state
.
windows
[
0
]
.
tabs
[
0
]
;
tabState
.
entries
=
tabState
.
entries
.
slice
(
3
)
;
tabState
.
index
=
6
;
Assert
.
deepEqual
(
state
diskState
"
cap
applied
"
)
;
}
)
;
