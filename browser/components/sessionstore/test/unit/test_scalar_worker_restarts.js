"
use
strict
"
;
const
Telemetry
=
Services
.
telemetry
;
const
ScalarId
=
"
browser
.
session
.
restore
.
worker_restart_count
"
;
var
profd
=
do_get_profile
(
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionFile
.
jsm
"
this
)
;
add_task
(
async
function
test_ensure_scalar_is_empty
(
)
{
const
scalars
=
Telemetry
.
snapshotScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTOUT
false
)
.
parent
|
|
{
}
;
Assert
.
ok
(
!
(
ScalarId
in
scalars
)
"
Sanity
check
;
no
scalars
should
be
there
yet
.
"
)
;
}
)
;
add_task
(
async
function
test_worker_restart
(
)
{
let
backstagePass
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionFile
.
jsm
"
{
}
)
;
backstagePass
.
SessionFileInternal
.
_workerHealth
.
failures
=
backstagePass
.
kMaxWriteFailures
+
1
;
backstagePass
.
SessionFileInternal
.
_checkWorkerHealth
(
)
;
Assert
.
equal
(
backstagePass
.
SessionFileInternal
.
_workerHealth
.
failures
0
"
Worker
failure
count
should
'
ve
been
reset
.
"
)
;
const
scalars
=
Telemetry
.
snapshotScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTOUT
false
)
.
parent
;
Assert
.
equal
(
scalars
[
ScalarId
]
1
"
Should
be
increased
with
one
hit
.
"
)
;
}
)
;
