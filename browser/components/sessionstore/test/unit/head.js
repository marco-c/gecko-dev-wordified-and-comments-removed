ChromeUtils
.
defineESModuleGetters
(
this
{
SessionStartup
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStartup
.
sys
.
mjs
"
}
)
;
function
afterSessionStartupInitialization
(
cb
)
{
info
(
"
Waiting
for
session
startup
initialization
"
)
;
let
observer
=
function
(
)
{
try
{
info
(
"
Session
startup
initialization
observed
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
sessionstore
-
state
-
finalized
"
)
;
cb
(
)
;
}
catch
(
ex
)
{
do_throw
(
ex
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
"
sessionstore
-
state
-
finalized
"
)
;
const
{
CrashMonitor
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
CrashMonitor
.
jsm
"
)
;
CrashMonitor
.
init
(
)
;
SessionStartup
.
init
(
)
;
}
async
function
writeCompressedFile
(
source
destination
)
{
let
s
=
await
IOUtils
.
read
(
source
)
;
await
IOUtils
.
write
(
destination
s
{
compress
:
true
}
)
;
await
IOUtils
.
remove
(
source
)
;
}
