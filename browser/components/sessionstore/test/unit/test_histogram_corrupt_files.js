"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
this
)
;
const
Telemetry
=
Services
.
telemetry
;
const
Path
=
OS
.
Path
;
const
HistogramId
=
"
FX_SESSION_RESTORE_ALL_FILES_CORRUPT
"
;
var
profd
=
do_get_profile
(
)
;
Cu
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionFile
.
jsm
"
this
)
;
function
promise_reset_session
(
backups
=
{
}
)
{
return
(
async
function
(
)
{
Telemetry
.
getHistogramById
(
HistogramId
)
.
clear
(
)
;
OS
.
File
.
makeDir
(
SessionFile
.
Paths
.
backups
)
;
for
(
let
key
of
SessionFile
.
Paths
.
loadOrder
)
{
if
(
backups
.
hasOwnProperty
(
key
)
)
{
let
s
=
await
OS
.
File
.
read
(
backups
[
key
]
)
;
await
OS
.
File
.
writeAtomic
(
SessionFile
.
Paths
[
key
]
s
{
compression
:
"
lz4
"
}
)
;
}
else
{
await
OS
.
File
.
remove
(
SessionFile
.
Paths
[
key
]
)
;
}
}
}
)
(
)
;
}
add_task
(
async
function
test_ensure_histogram_exists_and_empty
(
)
{
let
s
=
Telemetry
.
getHistogramById
(
HistogramId
)
.
snapshot
(
)
;
Assert
.
equal
(
s
.
sum
0
"
Initially
the
sum
of
probes
is
0
"
)
;
}
)
;
add_task
(
async
function
test_no_files_exist
(
)
{
await
promise_reset_session
(
)
;
await
SessionFile
.
read
(
)
;
let
h
=
Telemetry
.
getHistogramById
(
HistogramId
)
;
let
s
=
h
.
snapshot
(
)
;
Assert
.
equal
(
s
.
counts
[
0
]
1
"
One
probe
for
the
'
false
'
bucket
.
"
)
;
Assert
.
equal
(
s
.
counts
[
1
]
0
"
No
probes
in
the
'
true
'
bucket
.
"
)
;
}
)
;
add_task
(
async
function
test_one_file_valid
(
)
{
let
invalidSession
=
"
data
/
sessionstore_invalid
.
js
"
;
let
validSession
=
"
data
/
sessionstore_valid
.
js
"
;
await
promise_reset_session
(
{
clean
:
invalidSession
cleanBackup
:
validSession
recovery
:
invalidSession
recoveryBackup
:
invalidSession
}
)
;
await
SessionFile
.
read
(
)
;
let
h
=
Telemetry
.
getHistogramById
(
HistogramId
)
;
let
s
=
h
.
snapshot
(
)
;
Assert
.
equal
(
s
.
counts
[
0
]
1
"
One
probe
for
the
'
false
'
bucket
.
"
)
;
Assert
.
equal
(
s
.
counts
[
1
]
0
"
No
probes
in
the
'
true
'
bucket
.
"
)
;
}
)
;
add_task
(
async
function
test_all_files_corrupt
(
)
{
let
invalidSession
=
"
data
/
sessionstore_invalid
.
js
"
;
await
promise_reset_session
(
{
clean
:
invalidSession
cleanBackup
:
invalidSession
recovery
:
invalidSession
recoveryBackup
:
invalidSession
}
)
;
await
SessionFile
.
read
(
)
;
let
h
=
Telemetry
.
getHistogramById
(
HistogramId
)
;
let
s
=
h
.
snapshot
(
)
;
Assert
.
equal
(
s
.
counts
[
1
]
1
"
One
probe
for
the
'
true
'
bucket
.
"
)
;
Assert
.
equal
(
s
.
counts
[
0
]
0
"
No
probes
in
the
'
false
'
bucket
.
"
)
;
}
)
;
