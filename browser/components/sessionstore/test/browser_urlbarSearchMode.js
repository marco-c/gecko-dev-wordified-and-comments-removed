ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarUtils
:
"
moz
-
src
:
/
/
/
browser
/
components
/
urlbar
/
UrlbarUtils
.
sys
.
mjs
"
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
UrlbarTestUtils
"
(
)
=
>
{
const
{
UrlbarTestUtils
:
module
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
)
;
module
.
init
(
this
)
;
return
module
;
}
)
;
add_task
(
async
function
test
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
}
)
;
let
state
=
JSON
.
parse
(
ss
.
getTabState
(
gBrowser
.
selectedTab
)
)
;
Assert
.
ok
(
"
searchMode
"
in
state
"
state
.
searchMode
is
present
after
entering
search
mode
"
)
;
Assert
.
deepEqual
(
state
.
searchMode
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
entry
:
"
oneoff
"
isPreview
:
false
}
"
state
.
searchMode
is
correct
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
let
newState
=
JSON
.
parse
(
ss
.
getTabState
(
gBrowser
.
selectedTab
)
)
;
Assert
.
ok
(
!
newState
.
searchMode
"
state
.
searchMode
is
not
present
after
exiting
search
mode
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
