"
use
strict
"
;
const
URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
a
href
=
%
23
>
clickme
<
/
a
>
"
;
add_task
(
async
function
test_flush
(
)
{
let
tab
=
gBrowser
.
addTab
(
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
a
single
history
entry
"
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
addEventListener
(
"
hashchange
"
function
onHashChange
(
)
{
removeEventListener
(
"
hashchange
"
onHashChange
)
;
resolve
(
)
;
}
)
;
content
.
document
.
querySelector
(
"
a
"
)
.
click
(
)
;
}
)
;
}
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
2
"
there
are
two
shistory
entries
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_crash
(
)
{
let
tab
=
gBrowser
.
addTab
(
URL
)
;
gBrowser
.
selectedTab
=
tab
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
a
single
history
entry
"
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
addEventListener
(
"
hashchange
"
function
onHashChange
(
)
{
removeEventListener
(
"
hashchange
"
onHashChange
)
;
resolve
(
)
;
}
)
;
content
.
document
.
querySelector
(
"
a
"
)
.
click
(
)
;
}
)
;
}
)
;
let
promise1
=
BrowserTestUtils
.
crashBrowser
(
browser
)
;
let
promise2
=
TabStateFlusher
.
flush
(
browser
)
;
await
Promise
.
all
(
[
promise1
promise2
]
)
;
(
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
entries
.
length
1
"
still
only
one
history
entry
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_remove
(
)
{
let
tab
=
gBrowser
.
addTab
(
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
entries
.
length
1
"
there
is
a
single
history
entry
"
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
addEventListener
(
"
hashchange
"
function
onHashChange
(
)
{
removeEventListener
(
"
hashchange
"
onHashChange
)
;
resolve
(
)
;
}
)
;
content
.
document
.
querySelector
(
"
a
"
)
.
click
(
)
;
}
)
;
}
)
;
await
Promise
.
all
(
[
TabStateFlusher
.
flush
(
browser
)
promiseRemoveTab
(
tab
)
]
)
;
}
)
