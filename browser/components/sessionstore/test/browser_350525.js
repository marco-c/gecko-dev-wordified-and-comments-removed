"
use
strict
"
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
]
}
)
;
}
)
;
add_task
(
async
function
(
)
{
function
test
(
aLambda
)
{
try
{
return
aLambda
(
)
|
|
true
;
}
catch
(
ex
)
{
}
return
false
;
}
let
key
=
"
Unique
name
:
"
+
Date
.
now
(
)
;
let
value
=
"
Unique
value
:
"
+
Math
.
random
(
)
;
ok
(
test
(
(
)
=
>
ss
.
setWindowValue
(
window
key
value
)
)
"
set
a
window
value
"
)
;
is
(
ss
.
getWindowValue
(
window
key
)
value
"
stored
window
value
matches
original
"
)
;
ok
(
test
(
(
)
=
>
ss
.
deleteWindowValue
(
window
key
)
)
"
delete
the
window
value
"
)
;
is
(
ss
.
getWindowValue
(
window
key
)
"
"
"
window
value
was
deleted
"
)
;
ok
(
test
(
(
)
=
>
ss
.
deleteWindowValue
(
window
key
)
)
"
delete
non
-
existent
window
value
"
)
;
key
=
"
Unique
name
:
"
+
Math
.
random
(
)
;
value
=
"
Unique
value
:
"
+
Date
.
now
(
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
tab
.
linkedBrowser
.
stop
(
)
;
ok
(
test
(
(
)
=
>
ss
.
setCustomTabValue
(
tab
key
value
)
)
"
store
a
tab
value
"
)
;
is
(
ss
.
getCustomTabValue
(
tab
key
)
value
"
stored
tab
value
match
original
"
)
;
ok
(
test
(
(
)
=
>
ss
.
deleteCustomTabValue
(
tab
key
)
)
"
delete
the
tab
value
"
)
;
is
(
ss
.
getCustomTabValue
(
tab
key
)
"
"
"
tab
value
was
deleted
"
)
;
ok
(
test
(
(
)
=
>
ss
.
deleteCustomTabValue
(
tab
key
)
)
"
delete
non
-
existent
tab
value
"
)
;
await
promiseRemoveTabAndSessionState
(
tab
)
;
let
count
=
ss
.
getClosedTabCount
(
window
)
;
let
max_tabs_undo
=
Services
.
prefs
.
getIntPref
(
"
browser
.
sessionstore
.
max_tabs_undo
"
)
;
ok
(
0
<
=
count
&
&
count
<
=
max_tabs_undo
"
getClosedTabCount
returns
zero
or
at
most
max_tabs_undo
"
)
;
let
testURL
=
"
about
:
mozilla
"
;
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
testURL
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
max_tabs_undo
"
max_tabs_undo
+
1
)
;
registerCleanupFunction
(
(
)
=
>
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
max_tabs_undo
"
)
)
;
await
promiseRemoveTabAndSessionState
(
tab
)
;
let
newcount
=
ss
.
getClosedTabCount
(
window
)
;
ok
(
newcount
>
count
"
after
closing
a
tab
getClosedTabCount
has
been
incremented
"
)
;
tab
=
test
(
(
)
=
>
ss
.
undoCloseTab
(
window
0
)
)
;
ok
(
tab
"
undoCloseTab
doesn
'
t
throw
"
)
;
await
promiseTabRestored
(
tab
)
;
is
(
tab
.
linkedBrowser
.
currentURI
.
spec
testURL
"
correct
tab
was
reopened
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
