const
STATES
=
[
{
shouldBeAdded
:
true
windowState
:
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
"
triggeringPrincipal_base64
title
:
"
example
.
com
"
}
]
}
]
selected
:
1
_closedTabs
:
[
]
}
]
}
}
{
shouldBeAdded
:
false
windowState
:
{
windows
:
[
{
tabs
:
[
{
entries
:
[
]
}
]
_closedTabs
:
[
]
}
]
}
}
{
shouldBeAdded
:
false
windowState
:
{
windows
:
[
{
tabs
:
[
{
entries
:
[
]
}
]
_closedTabs
:
[
{
state
:
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
"
triggeringPrincipal_base64
index
:
1
}
]
}
}
]
}
]
}
}
{
shouldBeAdded
:
false
windowState
:
{
windows
:
[
{
tabs
:
[
{
entries
:
[
]
}
]
_closedTabs
:
[
]
extData
:
{
keyname
:
"
pi
!
=
"
+
Math
.
random
(
)
}
}
]
}
}
]
;
add_task
(
async
function
test_bug_490040
(
)
{
for
(
let
state
of
STATES
)
{
let
startingClosedWindowCount
=
ss
.
getClosedWindowCount
(
)
;
await
pushPrefs
(
[
"
browser
.
sessionstore
.
max_windows_undo
"
startingClosedWindowCount
+
1
]
)
;
let
curClosedWindowCount
=
ss
.
getClosedWindowCount
(
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
ss
.
setWindowState
(
win
JSON
.
stringify
(
state
.
windowState
)
true
)
;
await
promiseWindowRestored
(
win
)
;
if
(
state
.
windowState
.
windows
[
0
]
.
tabs
.
length
)
{
await
BrowserTestUtils
.
browserLoaded
(
win
.
gBrowser
.
selectedBrowser
)
;
}
await
BrowserTestUtils
.
closeWindow
(
win
)
;
is
(
ss
.
getClosedWindowCount
(
)
curClosedWindowCount
+
(
state
.
shouldBeAdded
?
1
:
0
)
"
That
window
should
"
+
(
state
.
shouldBeAdded
?
"
"
:
"
not
"
)
+
"
be
restorable
"
)
;
}
}
)
;
