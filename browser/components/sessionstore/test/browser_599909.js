const
RESTRICT_TOKEN_OPENPAGE
=
"
%
"
;
var
stateBackup
=
ss
.
getBrowserState
(
)
;
function
cleanup
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
restore_on_demand
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
restore_tabs_lazily
"
)
;
ss
.
setBrowserState
(
stateBackup
)
;
executeSoon
(
finish
)
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
sessionstore
.
restore_on_demand
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
sessionstore
.
restore_tabs_lazily
"
false
)
;
let
state
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
1
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
2
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
3
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
4
"
triggeringPrincipal_base64
}
]
}
]
selected
:
1
}
]
}
;
let
tabsForEnsure
=
{
}
;
state
.
windows
[
0
]
.
tabs
.
forEach
(
function
(
tab
)
{
tabsForEnsure
[
tab
.
entries
[
0
]
.
url
]
=
1
;
}
)
;
let
tabsRestoring
=
0
;
let
tabsRestored
=
0
;
function
handleEvent
(
aEvent
)
{
if
(
aEvent
.
type
=
=
"
SSTabRestoring
"
)
tabsRestoring
+
+
;
else
tabsRestored
+
+
;
if
(
tabsRestoring
<
state
.
windows
[
0
]
.
tabs
.
length
|
|
tabsRestored
<
1
)
return
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
SSTabRestoring
"
handleEvent
true
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
SSTabRestored
"
handleEvent
true
)
;
executeSoon
(
function
(
)
{
checkAutocompleteResults
(
tabsForEnsure
cleanup
)
;
}
)
;
}
gBrowser
.
tabContainer
.
addEventListener
(
"
SSTabRestoring
"
handleEvent
true
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
SSTabRestored
"
handleEvent
true
)
;
ss
.
setBrowserState
(
JSON
.
stringify
(
state
)
)
;
}
var
gController
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Ci
.
nsIAutoCompleteController
)
;
function
checkAutocompleteResults
(
aExpected
aCallback
)
{
gController
.
input
=
{
timeout
:
10
textValue
:
"
"
searches
:
[
"
unifiedcomplete
"
]
searchParam
:
"
enable
-
actions
"
popupOpen
:
false
minResultsForPopup
:
0
invalidate
(
)
{
}
disableAutoComplete
:
false
completeDefaultIndex
:
false
get
popup
(
)
{
return
this
;
}
onSearchBegin
(
)
{
}
onSearchComplete
(
)
{
info
(
"
Found
"
+
gController
.
matchCount
+
"
matches
.
"
)
;
for
(
let
i
=
0
;
i
<
gController
.
matchCount
;
i
+
+
)
{
if
(
gController
.
getStyleAt
(
i
)
.
includes
(
"
heuristic
"
)
)
{
info
(
"
Skip
heuristic
match
"
)
;
continue
;
}
let
action
=
gURLBar
.
popup
.
input
.
_parseActionUrl
(
gController
.
getValueAt
(
i
)
)
;
let
uri
=
action
.
params
.
url
;
info
(
"
Search
for
'
"
+
uri
+
"
'
in
open
tabs
.
"
)
;
ok
(
uri
in
aExpected
"
Registered
open
page
found
in
autocomplete
.
"
)
;
delete
aExpected
[
uri
]
;
}
for
(
let
entry
in
aExpected
)
{
ok
(
false
"
'
"
+
entry
+
"
'
not
found
in
autocomplete
.
"
)
;
}
executeSoon
(
aCallback
)
;
}
setSelectedIndex
(
)
{
}
get
searchCount
(
)
{
return
this
.
searches
.
length
;
}
getSearchAt
(
aIndex
)
{
return
this
.
searches
[
aIndex
]
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteInput
Ci
.
nsIAutoCompletePopup
]
)
}
;
info
(
"
Searching
open
pages
.
"
)
;
gController
.
startSearch
(
RESTRICT_TOKEN_OPENPAGE
)
;
}
