"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
]
}
)
;
}
)
;
add_task
(
async
function
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
for
(
let
userContextId
=
1
;
userContextId
<
5
;
userContextId
+
+
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
win
.
gBrowser
"
http
:
/
/
example
.
com
/
"
{
userContextId
}
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
await
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
}
win
.
gBrowser
.
moveTabTo
(
win
.
gBrowser
.
tabs
[
0
]
win
.
gBrowser
.
tabs
.
length
-
1
)
;
let
winState
=
JSON
.
parse
(
ss
.
getWindowState
(
win
)
)
;
for
(
let
i
=
0
;
i
<
4
;
i
+
+
)
{
Assert
.
equal
(
winState
.
windows
[
0
]
.
tabs
[
i
]
.
userContextId
i
+
1
"
1st
Window
:
tabs
[
"
+
i
+
"
]
.
userContextId
should
exist
.
"
)
;
}
let
win2
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
for
(
let
userContextId
=
3
;
userContextId
>
0
;
userContextId
-
-
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
win2
.
gBrowser
"
http
:
/
/
example
.
com
/
"
{
userContextId
}
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
await
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
}
await
setWindowState
(
win2
winState
true
)
;
for
(
let
i
=
0
;
i
<
4
;
i
+
+
)
{
let
browser
=
win2
.
gBrowser
.
tabs
[
i
]
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
{
expectedId
:
i
+
1
}
]
async
function
(
args
)
{
Assert
.
equal
(
docShell
.
getOriginAttributes
(
)
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
args
.
expectedId
"
The
document
has
the
correct
userContextId
"
)
;
}
)
;
}
let
browser
=
win2
.
gBrowser
.
tabs
[
4
]
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
{
expectedId
:
0
}
]
async
function
(
args
)
{
Assert
.
equal
(
docShell
.
getOriginAttributes
(
)
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
args
.
expectedId
"
The
document
has
the
correct
userContextId
"
)
;
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
}
)
;
add_task
(
async
function
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
TabStateFlusher
.
flush
(
win
.
gBrowser
.
selectedBrowser
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
win
.
gBrowser
"
http
:
/
/
example
.
com
/
"
{
userContextId
:
1
}
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
await
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
Assert
.
equal
(
win
.
gBrowser
.
tabs
.
length
2
"
win
should
have
2
tabs
"
)
;
let
winState
=
JSON
.
parse
(
ss
.
getWindowState
(
win
)
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
Assert
.
equal
(
winState
.
windows
[
0
]
.
tabs
[
i
]
.
userContextId
i
"
1st
Window
:
tabs
[
"
+
i
+
"
]
.
userContextId
should
be
"
+
i
)
;
}
let
win2
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
win2
.
gBrowser
"
http
:
/
/
example
.
com
/
"
{
userContextId
:
1
}
)
;
await
promiseBrowserLoaded
(
tab2
.
linkedBrowser
)
;
await
TabStateFlusher
.
flush
(
tab2
.
linkedBrowser
)
;
win2
.
gBrowser
.
moveTabTo
(
win2
.
gBrowser
.
tabs
[
0
]
win2
.
gBrowser
.
tabs
.
length
-
1
)
;
await
TabStateFlusher
.
flush
(
win2
.
gBrowser
.
tabs
[
0
]
.
linkedBrowser
)
;
await
setWindowState
(
win2
winState
true
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
let
browser
=
win2
.
gBrowser
.
tabs
[
i
]
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
{
expectedId
:
i
}
]
async
function
(
args
)
{
Assert
.
equal
(
docShell
.
getOriginAttributes
(
)
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
args
.
expectedId
"
The
document
has
the
correct
userContextId
"
)
;
}
)
;
}
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
}
)
;
