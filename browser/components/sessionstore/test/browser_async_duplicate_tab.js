"
use
strict
"
;
const
PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
example
.
com
/
"
)
;
const
URL
=
PATH
+
"
file_async_duplicate_tab
.
html
"
;
add_task
(
async
function
test_duplicate
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
docShell
.
chromeEventHandler
.
addEventListener
(
"
hashchange
"
function
onHashChange
(
)
{
docShell
.
chromeEventHandler
.
removeEventListener
(
"
hashchange
"
onHashChange
)
;
resolve
(
)
;
}
)
;
content
.
document
.
querySelector
(
"
a
"
)
.
click
(
)
;
}
)
;
}
)
;
let
tab2
=
ss
.
duplicateTab
(
window
tab
)
;
await
promiseTabRestored
(
tab2
)
;
await
TabStateFlusher
.
flush
(
tab2
.
linkedBrowser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab2
)
)
;
is
(
entries
.
length
2
"
there
are
two
shistory
entries
"
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_duplicate_remove
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
docShell
.
chromeEventHandler
.
addEventListener
(
"
hashchange
"
function
onHashChange
(
)
{
docShell
.
chromeEventHandler
.
removeEventListener
(
"
hashchange
"
onHashChange
)
;
resolve
(
)
;
}
)
;
content
.
document
.
querySelector
(
"
a
"
)
.
click
(
)
;
}
)
;
}
)
;
let
tab2
=
ss
.
duplicateTab
(
window
tab
)
;
await
Promise
.
all
(
[
promiseRemoveTabAndSessionState
(
tab
)
promiseTabRestored
(
tab2
)
]
)
;
await
TabStateFlusher
.
flush
(
tab2
.
linkedBrowser
)
;
let
{
entries
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab2
)
)
;
is
(
entries
.
length
2
"
there
are
two
shistory
entries
"
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
