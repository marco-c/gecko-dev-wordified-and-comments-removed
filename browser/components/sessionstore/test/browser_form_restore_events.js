"
use
strict
"
;
const
URL
=
ROOT
+
"
browser_form_restore_events_sample
.
html
"
;
add_task
(
async
function
(
)
{
let
tab
=
gBrowser
.
addTab
(
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
setInputValue
(
browser
{
id
:
"
modify01
"
value
:
Math
.
random
(
)
}
)
;
await
setInputValue
(
browser
{
id
:
"
modify02
"
value
:
Date
.
now
(
)
}
)
;
await
setInputValue
(
browser
{
id
:
"
modify03
"
value
:
Math
.
random
(
)
}
)
;
await
setInputValue
(
browser
{
id
:
"
modify04
"
value
:
Date
.
now
(
)
}
)
;
let
file
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
await
setInputValue
(
browser
{
id
:
"
modify05
"
value
:
file
.
path
}
)
;
await
setSelectedIndex
(
browser
{
id
:
"
modify06
"
index
:
1
}
)
;
await
setMultipleSelected
(
browser
{
id
:
"
modify07
"
indices
:
[
0
1
2
]
}
)
;
await
setInputChecked
(
browser
{
id
:
"
modify08
"
checked
:
true
}
)
;
await
setInputChecked
(
browser
{
id
:
"
modify09
"
checked
:
false
}
)
;
await
setInputChecked
(
browser
{
id
:
"
modify10
"
checked
:
true
}
)
;
await
setInputChecked
(
browser
{
id
:
"
modify11
"
checked
:
true
}
)
;
let
tab2
=
gBrowser
.
duplicateTab
(
tab
)
;
let
browser2
=
tab2
.
linkedBrowser
;
await
promiseTabRestored
(
tab2
)
;
let
inputFired
=
await
getTextContent
(
browser2
{
id
:
"
inputFired
"
}
)
;
inputFired
=
inputFired
.
trim
(
)
.
split
(
)
.
sort
(
)
.
join
(
"
"
)
;
let
changeFired
=
await
getTextContent
(
browser2
{
id
:
"
changeFired
"
}
)
;
changeFired
=
changeFired
.
trim
(
)
.
split
(
)
.
sort
(
)
.
join
(
"
"
)
;
is
(
inputFired
"
modify01
modify02
modify03
modify04
modify05
"
"
input
events
were
only
dispatched
for
modified
input
textarea
fields
"
)
;
is
(
changeFired
"
modify06
modify07
modify08
modify09
modify11
"
"
change
events
were
only
dispatched
for
modified
select
checkbox
radio
fields
"
)
;
gBrowser
.
removeTab
(
tab2
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
