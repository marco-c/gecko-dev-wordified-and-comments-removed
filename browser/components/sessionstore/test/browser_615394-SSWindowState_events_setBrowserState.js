const
lameMultiWindowState
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
1
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
2
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
3
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
4
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
]
selected
:
1
}
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
1
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
2
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
3
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
4
"
triggeringPrincipal_base64
}
]
extData
:
{
uniq
:
r
(
)
}
}
]
selected
:
3
}
]
}
;
function
getOuterWindowID
(
aWindow
)
{
return
aWindow
.
windowUtils
.
outerWindowID
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
let
windowEvents
=
{
}
;
windowEvents
[
getOuterWindowID
(
window
)
]
=
{
busyEventCount
:
0
readyEventCount
:
0
}
;
let
newWindow
;
function
windowObserver
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
domwindowopened
"
)
{
Services
.
ww
.
unregisterNotification
(
windowObserver
)
;
newWindow
=
aSubject
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
newWindow
.
addEventListener
(
"
load
"
function
(
)
{
windowEvents
[
getOuterWindowID
(
newWindow
)
]
=
{
busyEventCount
:
0
readyEventCount
:
0
}
;
newWindow
.
addEventListener
(
"
SSWindowStateBusy
"
onSSWindowStateBusy
)
;
newWindow
.
addEventListener
(
"
SSWindowStateReady
"
onSSWindowStateReady
)
;
}
{
once
:
true
}
)
;
}
}
function
onSSWindowStateBusy
(
aEvent
)
{
windowEvents
[
getOuterWindowID
(
aEvent
.
originalTarget
)
]
.
busyEventCount
+
+
;
}
function
onSSWindowStateReady
(
aEvent
)
{
windowEvents
[
getOuterWindowID
(
aEvent
.
originalTarget
)
]
.
readyEventCount
+
+
;
}
window
.
addEventListener
(
"
SSWindowStateBusy
"
onSSWindowStateBusy
)
;
window
.
addEventListener
(
"
SSWindowStateReady
"
onSSWindowStateReady
)
;
Services
.
ww
.
registerNotification
(
windowObserver
)
;
waitForBrowserState
(
lameMultiWindowState
function
(
)
{
let
checkedWindows
=
0
;
for
(
let
id
of
Object
.
keys
(
windowEvents
)
)
{
let
winEvents
=
windowEvents
[
id
]
;
is
(
winEvents
.
busyEventCount
1
"
window
"
+
id
+
"
busy
event
count
correct
"
)
;
is
(
winEvents
.
readyEventCount
1
"
window
"
+
id
+
"
ready
event
count
correct
"
)
;
checkedWindows
+
+
;
}
is
(
checkedWindows
2
"
checked
2
windows
"
)
;
window
.
removeEventListener
(
"
SSWindowStateBusy
"
onSSWindowStateBusy
)
;
window
.
removeEventListener
(
"
SSWindowStateReady
"
onSSWindowStateReady
)
;
newWindow
.
removeEventListener
(
"
SSWindowStateBusy
"
onSSWindowStateBusy
)
;
newWindow
.
removeEventListener
(
"
SSWindowStateReady
"
onSSWindowStateReady
)
;
newWindow
.
close
(
)
;
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeTab
(
gBrowser
.
tabs
[
1
]
)
;
}
finish
(
)
;
}
)
;
}
