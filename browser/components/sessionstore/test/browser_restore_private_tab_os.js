"
use
strict
"
;
const
TEST_URI
=
"
https
:
/
/
example
.
com
/
"
+
"
browser
/
browser
/
components
/
sessionstore
/
test
/
empty
.
html
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
sessionstore
.
restore_on_demand
"
true
]
[
"
browser
.
sessionstore
.
restore_tabs_lazily
"
true
]
[
"
browser
.
newtab
.
preload
"
false
]
]
}
)
;
}
)
;
add_task
(
async
function
testRestore
(
)
{
forgetClosedWindows
(
)
;
let
win
=
await
promiseNewWindowLoaded
(
{
private
:
true
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
win
.
gBrowser
TEST_URI
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
win
.
gBrowser
.
removeTab
(
tab
)
;
is
(
ss
.
getClosedTabCountForWindow
(
win
)
1
"
there
is
a
single
tab
to
restore
"
)
;
tab
=
SessionStore
.
undoCloseTab
(
win
0
)
;
info
(
Undo
close
tab
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabRestored
(
tab
)
;
info
(
Private
tab
restored
)
;
let
expectedRemoteType
=
gFissionBrowser
?
"
webIsolated
=
https
:
/
/
example
.
com
^
privateBrowsingId
=
1
"
:
"
web
"
;
is
(
browser
.
remoteType
expectedRemoteType
"
correct
remote
type
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
info
(
"
Forgetting
closed
tabs
"
)
;
forgetClosedTabs
(
window
)
;
}
)
;
