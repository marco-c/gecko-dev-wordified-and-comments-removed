"
use
strict
"
;
add_task
(
async
function
test_partitioned_principal_to_inherit
(
)
{
if
(
!
Services
.
appinfo
.
sessionHistoryInParent
)
{
ok
(
true
"
sessionHistoryInParent
is
not
enabled
skipping
the
test
.
"
)
;
return
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
let
browser
=
tab
.
linkedBrowser
;
let
sh
=
browser
.
browsingContext
.
sessionHistory
;
let
entry
=
sh
.
getEntryAtIndex
(
sh
.
count
-
1
)
;
let
partitionedPrincipalToInherit
=
entry
.
partitionedPrincipalToInherit
;
ok
(
partitionedPrincipalToInherit
"
partitionedPrincipalToInherit
is
set
"
)
;
is
(
partitionedPrincipalToInherit
.
originAttributes
.
partitionKey
"
(
https
example
.
com
)
"
"
correct
partitionKey
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_partitioned_Principal_to_inherit_in_iframe
(
)
{
if
(
!
Services
.
appinfo
.
sessionHistoryInParent
)
{
ok
(
true
"
sessionHistoryInParent
is
not
enabled
skipping
the
test
.
"
)
;
return
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
_
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
"
https
:
/
/
example
.
com
"
;
await
new
content
.
Promise
(
resolve
=
>
{
iframe
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
}
)
;
let
sh
=
browser
.
browsingContext
.
sessionHistory
;
let
entry
=
sh
.
getEntryAtIndex
(
sh
.
count
-
1
)
;
let
childEntry
=
entry
.
GetChildAt
(
entry
.
childCount
-
1
)
;
let
partitionedPrincipalToInherit
=
childEntry
.
partitionedPrincipalToInherit
;
ok
(
partitionedPrincipalToInherit
"
partitionedPrincipalToInherit
is
set
"
)
;
is
(
partitionedPrincipalToInherit
.
originNoSuffix
"
https
:
/
/
example
.
com
"
"
correct
originNoSuffix
in
the
same
-
origin
iframe
"
)
;
is
(
partitionedPrincipalToInherit
.
originAttributes
.
partitionKey
"
(
https
example
.
com
)
"
"
correct
partitionKey
in
the
same
-
origin
iframe
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
_
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
"
https
:
/
/
example
.
net
"
;
await
new
content
.
Promise
(
resolve
=
>
{
iframe
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
}
)
;
entry
=
sh
.
getEntryAtIndex
(
sh
.
count
-
1
)
;
childEntry
=
entry
.
GetChildAt
(
entry
.
childCount
-
1
)
;
partitionedPrincipalToInherit
=
childEntry
.
partitionedPrincipalToInherit
;
ok
(
partitionedPrincipalToInherit
"
partitionedPrincipalToInherit
is
set
"
)
;
is
(
partitionedPrincipalToInherit
.
originNoSuffix
"
https
:
/
/
example
.
net
"
"
correct
originNoSuffix
in
the
cross
-
site
iframe
"
)
;
is
(
partitionedPrincipalToInherit
.
originAttributes
.
partitionKey
"
(
https
example
.
com
)
"
"
correct
partitionKey
in
the
cross
-
site
iframe
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_partitioned_Principal_to_inherit_in_ABA_iframe
(
)
{
if
(
!
Services
.
appinfo
.
sessionHistoryInParent
)
{
ok
(
true
"
sessionHistoryInParent
is
not
enabled
skipping
the
test
.
"
)
;
return
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
"
https
:
/
/
example
.
net
"
;
await
new
content
.
Promise
(
resolve
=
>
{
iframe
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
await
SpecialPowers
.
spawn
(
iframe
[
]
async
(
)
=
>
{
let
nestedIframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
nestedIframe
.
src
=
"
https
:
/
/
example
.
com
"
;
await
new
content
.
Promise
(
resolve
=
>
{
nestedIframe
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
nestedIframe
)
;
}
)
;
}
)
;
}
)
;
let
sh
=
browser
.
browsingContext
.
sessionHistory
;
let
entry
=
sh
.
getEntryAtIndex
(
sh
.
count
-
1
)
;
let
childEntry
=
entry
.
GetChildAt
(
entry
.
childCount
-
1
)
;
let
nestedChildEntry
=
childEntry
.
GetChildAt
(
childEntry
.
childCount
-
1
)
;
let
partitionedPrincipalToInherit
=
nestedChildEntry
.
partitionedPrincipalToInherit
;
ok
(
partitionedPrincipalToInherit
"
partitionedPrincipalToInherit
is
set
"
)
;
is
(
partitionedPrincipalToInherit
.
originNoSuffix
"
https
:
/
/
example
.
com
"
"
correct
originNoSuffix
in
the
ABA
iframe
"
)
;
is
(
partitionedPrincipalToInherit
.
originAttributes
.
partitionKey
"
(
https
example
.
com
f
)
"
"
correct
partitionKey
in
the
ABA
iframe
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
