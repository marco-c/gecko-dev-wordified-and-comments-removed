"
use
strict
"
;
const
TEST_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
"
+
"
browser
/
components
/
sessionstore
/
test
/
browser_463206_sample
.
html
"
;
add_task
(
function
*
(
)
{
let
tab
=
gBrowser
.
addTab
(
TEST_URL
)
;
yield
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
function
*
(
)
{
function
typeText
(
aTextField
aValue
)
{
aTextField
.
value
=
aValue
;
let
event
=
aTextField
.
ownerDocument
.
createEvent
(
"
UIEvents
"
)
;
event
.
initUIEvent
(
"
input
"
true
true
aTextField
.
ownerDocument
.
defaultView
0
)
;
aTextField
.
dispatchEvent
(
event
)
;
}
typeText
(
content
.
document
.
getElementById
(
"
out1
"
)
Date
.
now
(
)
)
;
typeText
(
content
.
document
.
getElementsByName
(
"
1
|
#
out2
"
)
[
0
]
Math
.
random
(
)
)
;
typeText
(
content
.
frames
[
0
]
.
frames
[
1
]
.
document
.
getElementById
(
"
in1
"
)
new
Date
(
)
)
;
}
)
;
let
tab2
=
gBrowser
.
duplicateTab
(
tab
)
;
yield
promiseTabRestored
(
tab2
)
;
yield
ContentTask
.
spawn
(
tab2
.
linkedBrowser
null
function
*
(
)
{
Assert
.
notEqual
(
content
.
document
.
getElementById
(
"
out1
"
)
.
value
content
.
frames
[
1
]
.
document
.
getElementById
(
"
out1
"
)
.
value
"
text
isn
'
t
reused
for
frames
"
)
;
Assert
.
notEqual
(
content
.
document
.
getElementsByName
(
"
1
|
#
out2
"
)
[
0
]
.
value
"
"
"
text
containing
|
and
#
is
correctly
restored
"
)
;
Assert
.
equal
(
content
.
frames
[
1
]
.
document
.
getElementById
(
"
out2
"
)
.
value
"
"
"
id
prefixes
can
'
t
be
faked
"
)
;
Assert
.
equal
(
content
.
frames
[
1
]
.
frames
[
0
]
.
document
.
getElementById
(
"
in1
"
)
.
value
"
"
"
id
prefixes
aren
'
t
mixed
up
"
)
;
}
)
;
gBrowser
.
removeTab
(
tab2
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
