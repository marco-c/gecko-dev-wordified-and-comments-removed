"
use
strict
"
;
const
MOCHI_ROOT
=
ROOT
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
if
(
gFissionBrowser
)
{
addCoopTask
(
"
browser_463206_sample
.
html
"
test_restore_text_data_subframes
HTTPSROOT
)
;
}
addNonCoopTask
(
"
browser_463206_sample
.
html
"
test_restore_text_data_subframes
HTTPSROOT
)
;
addNonCoopTask
(
"
browser_463206_sample
.
html
"
test_restore_text_data_subframes
HTTPROOT
)
;
addNonCoopTask
(
"
browser_463206_sample
.
html
"
test_restore_text_data_subframes
MOCHI_ROOT
)
;
async
function
test_restore_text_data_subframes
(
aURL
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
aURL
)
;
await
setPropertyOfFormField
(
tab
.
linkedBrowser
"
#
out1
"
"
value
"
Date
.
now
(
)
.
toString
(
16
)
)
;
await
setPropertyOfFormField
(
tab
.
linkedBrowser
"
input
[
name
=
'
1
|
#
out2
'
]
"
"
value
"
Math
.
random
(
)
)
;
await
setPropertyOfFormField
(
tab
.
linkedBrowser
.
browsingContext
.
children
[
0
]
.
children
[
1
]
"
#
in1
"
"
value
"
new
Date
(
)
)
;
let
tab2
=
gBrowser
.
duplicateTab
(
tab
)
;
let
browser2
=
tab2
.
linkedBrowser
;
await
promiseTabRestored
(
tab2
)
;
isnot
(
await
getPropertyOfFormField
(
browser2
"
#
out1
"
"
value
"
)
await
getPropertyOfFormField
(
browser2
.
browsingContext
.
children
[
1
]
"
#
out1
"
"
value
"
)
"
text
isn
'
t
reused
for
frames
"
)
;
isnot
(
await
getPropertyOfFormField
(
browser2
"
input
[
name
=
'
1
|
#
out2
'
]
"
"
value
"
)
"
"
"
text
containing
|
and
#
is
correctly
restored
"
)
;
is
(
await
getPropertyOfFormField
(
browser2
.
browsingContext
.
children
[
1
]
"
#
out2
"
"
value
"
)
"
"
"
id
prefixes
can
'
t
be
faked
"
)
;
await
SpecialPowers
.
spawn
(
tab2
.
linkedBrowser
[
]
async
function
(
)
{
}
)
;
is
(
await
getPropertyOfFormField
(
browser2
.
browsingContext
.
children
[
1
]
.
children
[
0
]
"
#
in1
"
"
value
"
)
"
"
"
id
prefixes
aren
'
t
mixed
up
"
)
;
gBrowser
.
removeTab
(
tab2
)
;
gBrowser
.
removeTab
(
tab
)
;
}
