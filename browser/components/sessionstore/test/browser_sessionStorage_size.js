"
use
strict
"
;
const
RAND
=
Math
.
random
(
)
;
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
"
+
"
browser
/
components
/
sessionstore
/
test
/
browser_sessionStorage
.
html
"
+
"
?
"
+
RAND
;
const
OUTER_VALUE
=
"
outer
-
value
-
"
+
RAND
;
add_task
(
function
*
test_telemetry
(
)
{
Services
.
telemetry
.
canRecordExtended
=
true
;
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
FX_SESSION_RESTORE_DOM_STORAGE_SIZE_ESTIMATE_CHARS
"
)
;
let
snap1
=
histogram
.
snapshot
(
)
;
let
tab
=
gBrowser
.
addTab
(
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
yield
promiseBrowserLoaded
(
browser
)
;
yield
TabStateFlusher
.
flush
(
browser
)
;
let
snap2
=
histogram
.
snapshot
(
)
;
Assert
.
ok
(
snap2
.
counts
[
5
]
>
snap1
.
counts
[
5
]
)
;
yield
promiseRemoveTab
(
tab
)
;
Services
.
telemetry
.
canRecordExtended
=
false
;
}
)
;
add_task
(
function
*
test_large_content
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
dom_storage_limit
"
5
)
;
let
tab
=
gBrowser
.
addTab
(
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
yield
promiseBrowserLoaded
(
browser
)
;
yield
TabStateFlusher
.
flush
(
browser
)
;
let
state
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
info
(
JSON
.
stringify
(
state
null
"
\
t
"
)
)
;
Assert
.
equal
(
state
.
storage
null
"
We
have
no
storage
for
the
tab
"
)
;
Assert
.
equal
(
state
.
entries
[
0
]
.
title
OUTER_VALUE
)
;
yield
promiseRemoveTab
(
tab
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
dom_storage_limit
"
)
;
}
)
;
