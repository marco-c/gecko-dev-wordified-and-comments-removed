"
use
strict
"
;
const
TEST_URL
=
"
http
:
/
/
example
.
com
"
;
const
MAX_EXPIRY
=
Math
.
pow
(
2
62
)
;
function
getSingleCookie
(
)
{
let
cookies
=
Array
.
from
(
Services
.
cookies
.
cookies
)
;
Assert
.
equal
(
cookies
.
length
1
"
expected
one
cookie
"
)
;
return
cookies
[
0
]
;
}
async
function
verifyRestore
(
sameSiteSetting
)
{
Services
.
cookies
.
removeAll
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
sessionstore
.
interval
"
0
]
]
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
let
r
=
Math
.
floor
(
Math
.
random
(
)
*
MAX_EXPIRY
)
;
Services
.
cookies
.
add
(
TEST_URL
"
/
"
"
name
"
+
r
"
value
"
+
r
false
false
true
MAX_EXPIRY
{
}
sameSiteSetting
)
;
await
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
let
state
=
ss
.
getBrowserState
(
)
;
let
cookie
=
getSingleCookie
(
)
;
Services
.
cookies
.
removeAll
(
)
;
await
setBrowserState
(
state
)
;
let
cookie2
=
getSingleCookie
(
)
;
is
(
cookie2
.
sameSite
cookie
.
sameSite
"
cookie
same
-
site
flag
successfully
restored
"
)
;
Services
.
cookies
.
removeAll
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
tabs
[
1
]
)
;
}
add_task
(
async
function
(
)
{
await
verifyRestore
(
Ci
.
nsICookie
.
SAMESITE_NONE
)
;
await
verifyRestore
(
Ci
.
nsICookie
.
SAMESITE_LAX
)
;
await
verifyRestore
(
Ci
.
nsICookie
.
SAMESITE_STRICT
)
;
}
)
;
