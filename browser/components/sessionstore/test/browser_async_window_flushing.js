add_task
(
function
*
setup
(
)
{
yield
pushPrefs
(
[
"
browser
.
sessionstore
.
debug
.
no_auto_updates
"
true
]
)
;
}
)
;
add_task
(
function
*
test_add_interesting_window
(
)
{
let
initialClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
yield
pushPrefs
(
[
"
browser
.
sessionstore
.
max_windows_undo
"
initialClosedWindows
+
1
]
)
;
let
newWin
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
browser
=
newWin
.
gBrowser
.
selectedBrowser
;
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
content
.
location
=
"
http
:
/
/
example
.
com
"
;
}
)
;
if
(
gMultiProcessBrowser
)
{
yield
BrowserTestUtils
.
waitForEvent
(
newWin
.
gBrowser
.
selectedTab
"
TabRemotenessChange
"
)
;
}
yield
promiseContentMessage
(
browser
"
ss
-
test
:
OnHistoryReplaceEntry
"
)
;
browser
.
userTypedValue
=
null
;
let
domWindowClosed
=
BrowserTestUtils
.
domWindowClosed
(
newWin
)
;
let
windowClosed
=
BrowserTestUtils
.
windowClosed
(
newWin
)
;
newWin
.
close
(
)
;
yield
domWindowClosed
;
let
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
"
We
should
not
have
added
the
window
to
the
closed
windows
array
"
)
;
yield
windowClosed
;
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
+
1
"
We
should
have
added
the
window
to
the
closed
windows
array
"
)
;
}
)
;
add_task
(
function
*
test_remove_uninteresting_window
(
)
{
let
initialClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
yield
pushPrefs
(
[
"
browser
.
sessionstore
.
max_windows_undo
"
initialClosedWindows
+
1
]
)
;
let
newWin
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
browser
=
newWin
.
gBrowser
.
selectedBrowser
;
browser
.
loadURI
(
"
http
:
/
/
example
.
com
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
yield
TabStateFlusher
.
flush
(
browser
)
;
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
docShell
.
setCurrentURI
(
BrowserUtils
.
makeURI
(
"
about
:
blank
"
)
)
;
let
{
sessionHistory
}
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
sessionHistory
.
PurgeHistory
(
sessionHistory
.
count
)
;
}
)
;
let
domWindowClosed
=
BrowserTestUtils
.
domWindowClosed
(
newWin
)
;
let
windowClosed
=
BrowserTestUtils
.
windowClosed
(
newWin
)
;
newWin
.
close
(
)
;
yield
domWindowClosed
;
let
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
+
1
"
We
should
have
added
the
window
to
the
closed
windows
array
"
)
;
yield
windowClosed
;
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
"
We
should
have
removed
the
window
from
the
closed
windows
array
"
)
;
}
)
;
