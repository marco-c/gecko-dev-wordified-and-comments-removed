"
use
strict
"
;
const
PAGE
=
"
http
:
/
/
example
.
com
/
"
;
add_task
(
async
function
test_add_interesting_window
(
)
{
await
pushPrefs
(
[
"
browser
.
sessionstore
.
debug
.
no_auto_updates
"
true
]
)
;
let
initialClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
await
pushPrefs
(
[
"
browser
.
sessionstore
.
max_windows_undo
"
initialClosedWindows
+
1
]
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
browser
=
newWin
.
gBrowser
.
selectedBrowser
;
await
SpecialPowers
.
spawn
(
browser
[
PAGE
]
async
function
(
newPage
)
{
content
.
location
=
newPage
;
}
)
;
if
(
SpecialPowers
.
Services
.
appinfo
.
sessionHistoryInParent
)
{
let
tab
=
newWin
.
gBrowser
.
selectedTab
;
await
promiseOnHistoryReplaceEntry
(
tab
)
;
}
else
{
await
promiseOnHistoryReplaceEntryInChild
(
browser
)
;
}
browser
.
userTypedValue
=
null
;
let
windowClosed
=
BrowserTestUtils
.
windowClosed
(
newWin
)
;
let
handled
=
false
;
whenDomWindowClosedHandled
(
(
)
=
>
{
let
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
"
We
should
not
have
added
the
window
to
the
closed
windows
array
"
)
;
handled
=
true
;
}
)
;
newWin
.
close
(
)
;
await
windowClosed
;
ok
(
handled
"
domwindowclosed
should
already
be
handled
here
"
)
;
let
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
+
1
"
We
should
have
added
the
window
to
the
closed
windows
array
"
)
;
}
)
;
add_task
(
async
function
test_remove_uninteresting_window
(
)
{
await
pushPrefs
(
[
"
browser
.
sessionstore
.
debug
.
no_auto_updates
"
true
]
)
;
let
initialClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
await
pushPrefs
(
[
"
browser
.
sessionstore
.
max_windows_undo
"
initialClosedWindows
+
1
]
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
tab
=
newWin
.
gBrowser
.
selectedTab
;
let
browser
=
tab
.
linkedBrowser
;
BrowserTestUtils
.
loadURI
(
browser
PAGE
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
PAGE
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
docShell
.
setCurrentURI
(
Services
.
io
.
newURI
(
"
about
:
blank
"
)
)
;
if
(
!
SpecialPowers
.
Services
.
appinfo
.
sessionHistoryInParent
)
{
let
{
sessionHistory
}
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
sessionHistory
.
legacySHistory
.
purgeHistory
(
sessionHistory
.
count
)
;
}
}
)
;
if
(
SpecialPowers
.
Services
.
appinfo
.
sessionHistoryInParent
)
{
let
{
sessionHistory
}
=
browser
.
browsingContext
;
sessionHistory
.
purgeHistory
(
sessionHistory
.
count
)
;
}
let
windowClosed
=
BrowserTestUtils
.
windowClosed
(
newWin
)
;
let
handled
=
false
;
whenDomWindowClosedHandled
(
(
)
=
>
{
let
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
+
1
"
We
should
have
added
the
window
to
the
closed
windows
array
"
)
;
handled
=
true
;
}
)
;
newWin
.
close
(
)
;
await
windowClosed
;
ok
(
handled
"
domwindowclosed
should
already
be
handled
here
"
)
;
let
currentClosedWindows
=
ss
.
getClosedWindowCount
(
)
;
is
(
currentClosedWindows
initialClosedWindows
"
We
should
have
removed
the
window
from
the
closed
windows
array
"
)
;
}
)
;
add_task
(
async
function
test_synchronously_remove_window_state
(
)
{
let
state
=
JSON
.
parse
(
ss
.
getBrowserState
(
)
)
;
ok
(
state
"
Make
sure
we
can
get
the
state
"
)
;
let
initialWindows
=
state
.
windows
.
length
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
browser
=
newWin
.
gBrowser
.
selectedBrowser
;
BrowserTestUtils
.
loadURI
(
browser
PAGE
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
PAGE
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
state
=
JSON
.
parse
(
ss
.
getBrowserState
(
)
)
;
is
(
state
.
windows
.
length
initialWindows
+
1
"
The
new
window
to
be
in
the
state
"
)
;
let
windowClosed
=
BrowserTestUtils
.
windowClosed
(
newWin
)
;
newWin
.
close
(
)
;
state
=
JSON
.
parse
(
ss
.
getBrowserState
(
)
)
;
is
(
state
.
windows
.
length
initialWindows
"
The
new
window
should
have
been
removed
from
the
state
"
)
;
await
windowClosed
;
}
)
;
