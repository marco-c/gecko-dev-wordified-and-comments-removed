"
use
strict
"
;
async
function
setupBackgroundTabs
(
testFn
)
{
const
REMOTE_PAGE
=
"
http
:
/
/
www
.
example
.
com
"
;
const
NON_REMOTE_PAGE
=
"
about
:
robots
"
;
let
initialTab
=
gBrowser
.
selectedTab
;
let
initialBrowser
=
initialTab
.
linkedBrowser
;
BrowserTestUtils
.
loadURI
(
initialBrowser
NON_REMOTE_PAGE
)
;
await
BrowserTestUtils
.
browserLoaded
(
initialBrowser
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
REMOTE_PAGE
)
;
let
remoteBrowser1
=
tab1
.
linkedBrowser
;
await
TabStateFlusher
.
flush
(
remoteBrowser1
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
REMOTE_PAGE
)
;
let
remoteBrowser2
=
tab2
.
linkedBrowser
;
await
TabStateFlusher
.
flush
(
remoteBrowser2
)
;
Assert
.
ok
(
remoteBrowser1
.
isRemoteBrowser
"
Browser
should
be
remote
in
order
to
crash
.
"
)
;
Assert
.
ok
(
remoteBrowser2
.
isRemoteBrowser
"
Browser
should
be
remote
in
order
to
crash
.
"
)
;
Assert
.
equal
(
remoteBrowser1
.
frameLoader
.
childID
remoteBrowser2
.
frameLoader
.
childID
"
Both
remote
browsers
should
share
the
same
content
process
.
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
initialTab
)
;
await
testFn
(
[
tab1
tab2
]
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
async
function
crashBackgroundTabs
(
tabs
)
{
Assert
.
ok
(
tabs
.
length
>
0
"
Need
to
crash
at
least
one
tab
.
"
)
;
for
(
let
tab
of
tabs
)
{
Assert
.
ok
(
tab
.
linkedBrowser
.
isRemoteBrowser
"
tab
is
remote
"
)
;
}
let
remotenessChangePromises
=
tabs
.
map
(
t
=
>
{
return
BrowserTestUtils
.
waitForEvent
(
t
"
TabRemotenessChange
"
)
;
}
)
;
let
tabsRevived
=
tabs
.
map
(
t
=
>
{
return
promiseTabRestoring
(
t
)
;
}
)
;
await
BrowserTestUtils
.
crashFrame
(
tabs
[
0
]
.
linkedBrowser
false
)
;
await
Promise
.
all
(
remotenessChangePromises
)
;
await
Promise
.
all
(
tabsRevived
)
;
for
(
let
tab
of
tabs
)
{
Assert
.
ok
(
!
tab
.
linkedBrowser
.
isRemoteBrowser
"
tab
is
not
remote
"
)
;
Assert
.
ok
(
!
tab
.
linkedBrowser
.
hasAttribute
(
"
crashed
"
)
"
tab
is
not
crashed
"
)
;
Assert
.
ok
(
tab
.
hasAttribute
(
"
pending
"
)
"
tab
is
pending
"
)
;
}
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
]
}
)
;
requestLongerTimeout
(
5
)
;
}
)
;
add_task
(
async
function
test_background_crash_simple
(
)
{
await
setupBackgroundTabs
(
async
function
(
[
tab1
tab2
]
)
{
await
crashBackgroundTabs
(
[
tab1
tab2
]
)
;
let
tabCrashedPagePromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab1
.
linkedBrowser
"
AboutTabCrashedReady
"
false
null
true
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
tabCrashedPagePromise
;
let
tabRestored
=
promiseTabRestored
(
tab2
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
tabRestored
;
}
)
;
}
)
;
add_task
(
async
function
test_background_crash_autosubmit_backlogged
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
crashReports
.
unsubmittedCheck
.
autoSubmit2
"
true
]
]
}
)
;
await
setupBackgroundTabs
(
async
function
(
[
tab1
tab2
]
)
{
await
crashBackgroundTabs
(
[
tab1
tab2
]
)
;
let
tabRestored
=
promiseTabRestored
(
tab1
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
tabRestored
;
tabRestored
=
promiseTabRestored
(
tab2
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
tabRestored
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_background_crash_multiple
(
)
{
let
initialTab
=
gBrowser
.
selectedTab
;
await
setupBackgroundTabs
(
async
function
(
[
tab1
tab2
]
)
{
await
crashBackgroundTabs
(
[
tab1
tab2
]
)
;
let
tabCrashedPagePromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab1
.
linkedBrowser
"
AboutTabCrashedReady
"
false
null
true
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
tabCrashedPagePromise
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
initialTab
)
;
await
setupBackgroundTabs
(
async
function
(
[
tab3
tab4
]
)
{
await
crashBackgroundTabs
(
[
tab3
tab4
]
)
;
let
tabRestored
=
promiseTabRestored
(
tab2
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
tabRestored
;
tabCrashedPagePromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab4
.
linkedBrowser
"
AboutTabCrashedReady
"
false
null
true
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab4
)
;
await
tabCrashedPagePromise
;
tabRestored
=
promiseTabRestored
(
tab3
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab3
)
;
await
tabRestored
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_preload_crash
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtab
.
preload
"
)
)
{
return
;
}
NewTabPagePreloading
.
removePreloadedBrowser
(
window
)
;
NewTabPagePreloading
.
maybeCreatePreloadedBrowser
(
window
)
;
await
BrowserTestUtils
.
crashFrame
(
gBrowser
.
preloadedBrowser
false
)
;
Assert
.
ok
(
!
gBrowser
.
preloadedBrowser
)
;
}
)
;
