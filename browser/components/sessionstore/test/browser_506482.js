function
test
(
)
{
waitForExplicitFinish
(
)
;
let
profilePath
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
function
getSessionstoreFile
(
)
{
let
sessionStoreJS
=
profilePath
.
clone
(
)
;
sessionStoreJS
.
append
(
"
sessionstore
.
jsonlz4
"
)
;
return
sessionStoreJS
;
}
function
getSessionstorejsModificationTime
(
)
{
let
file
=
getSessionstoreFile
(
)
;
if
(
file
.
exists
(
)
)
{
return
file
.
lastModifiedTime
;
}
return
-
1
;
}
let
sessionStoreJS
=
getSessionstoreFile
(
)
;
if
(
sessionStoreJS
.
exists
(
)
)
sessionStoreJS
.
remove
(
false
)
;
const
TEST_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
body
style
=
'
width
:
100000px
;
height
:
100000px
;
'
>
<
p
>
top
<
/
p
>
<
/
body
>
"
;
const
PREF_INTERVAL
=
"
browser
.
sessionstore
.
interval
"
;
gPrefService
.
setIntPref
(
PREF_INTERVAL
0
)
;
let
mtime0
=
getSessionstorejsModificationTime
(
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_URL
)
;
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
.
then
(
(
)
=
>
{
setTimeout
(
function
step1
(
)
{
let
mtime1
=
getSessionstorejsModificationTime
(
)
;
isnot
(
mtime1
mtime0
"
initial
sessionstore
.
js
update
"
)
;
gBrowser
.
selectedTab
=
tab
;
tab
.
linkedBrowser
.
contentWindow
.
scrollTo
(
1100
1200
)
;
setTimeout
(
function
step2
(
)
{
let
mtime2
=
getSessionstorejsModificationTime
(
)
;
is
(
mtime2
mtime1
"
tab
selection
and
scrolling
:
sessionstore
.
js
not
updated
"
)
;
if
(
gPrefService
.
prefHasUserValue
(
PREF_INTERVAL
)
)
gPrefService
.
clearUserPref
(
PREF_INTERVAL
)
;
gBrowser
.
removeTab
(
tab
)
;
finish
(
)
;
}
3500
)
;
}
3500
)
;
}
)
;
}
