requestLongerTimeout
(
2
)
;
var
stateBackup
=
JSON
.
parse
(
ss
.
getBrowserState
(
)
)
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
testBug600545
(
)
;
}
function
testBug600545
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
sessionstore
.
resume_from_crash
"
false
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
interval
"
2000
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
resume_from_crash
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
interval
"
)
;
}
)
;
let
state
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
0
"
triggeringPrincipal_base64
}
]
pinned
:
true
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
1
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
2
"
triggeringPrincipal_base64
}
]
}
]
selected
:
2
}
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
3
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
4
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
5
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
6
"
triggeringPrincipal_base64
}
]
}
]
selected
:
3
}
]
}
;
waitForBrowserState
(
state
function
(
)
{
waitForSaveState
(
function
(
)
{
let
expectedNumberOfTabs
=
getStateTabCount
(
state
)
;
let
retrievedState
=
JSON
.
parse
(
ss
.
getBrowserState
(
)
)
;
let
actualNumberOfTabs
=
getStateTabCount
(
retrievedState
)
;
is
(
actualNumberOfTabs
expectedNumberOfTabs
"
Number
of
tabs
in
retreived
session
data
matches
number
of
tabs
set
.
"
)
;
done
(
)
;
}
)
;
}
)
;
}
function
done
(
)
{
let
closeWinPromises
=
[
]
;
for
(
let
currentWindow
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
currentWindow
!
=
window
)
{
closeWinPromises
.
push
(
BrowserTestUtils
.
closeWindow
(
currentWindow
)
)
;
}
}
Promise
.
all
(
closeWinPromises
)
.
then
(
(
)
=
>
{
waitForBrowserState
(
stateBackup
finish
)
;
}
)
;
}
function
getStateTabCount
(
aState
)
{
let
tabCount
=
0
;
for
(
let
i
in
aState
.
windows
)
{
tabCount
+
=
aState
.
windows
[
i
]
.
tabs
.
length
;
}
return
tabCount
;
}
