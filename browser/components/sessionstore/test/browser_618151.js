const
stateBackup
=
ss
.
getBrowserState
(
)
;
const
testState
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
about
:
blank
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
about
:
mozilla
"
triggeringPrincipal_base64
}
]
}
]
}
]
}
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
runNextTest
(
)
;
}
var
tests
=
[
test_setup
test_hang
]
;
function
runNextTest
(
)
{
if
(
tests
.
length
)
{
let
closeWinPromises
=
[
]
;
for
(
let
currentWindow
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
currentWindow
!
=
window
)
{
closeWinPromises
.
push
(
BrowserTestUtils
.
closeWindow
(
currentWindow
)
)
;
}
}
Promise
.
all
(
closeWinPromises
)
.
then
(
(
)
=
>
{
let
currentTest
=
tests
.
shift
(
)
;
info
(
"
running
"
+
currentTest
.
name
)
;
waitForBrowserState
(
testState
currentTest
)
;
}
)
;
}
else
{
ss
.
setBrowserState
(
stateBackup
)
;
executeSoon
(
finish
)
;
}
}
function
test_setup
(
)
{
function
onSSTabRestored
(
aEvent
)
{
gBrowser
.
tabContainer
.
removeEventListener
(
"
SSTabRestored
"
onSSTabRestored
)
;
runNextTest
(
)
;
}
gBrowser
.
tabContainer
.
addEventListener
(
"
SSTabRestored
"
onSSTabRestored
)
;
ss
.
setTabState
(
gBrowser
.
tabs
[
1
]
JSON
.
stringify
(
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
"
triggeringPrincipal_base64
}
]
extData
:
{
foo
:
"
bar
"
}
}
)
)
;
}
function
test_hang
(
)
{
ok
(
true
"
test
didn
'
t
time
out
"
)
;
runNextTest
(
)
;
}
