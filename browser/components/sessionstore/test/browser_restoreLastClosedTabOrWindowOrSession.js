"
use
strict
"
;
const
{
_LastSession
_lastClosedActions
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
sys
.
mjs
"
)
;
async
function
testLastClosedActionsEntries
(
)
{
SessionStore
.
resetLastClosedActions
(
)
;
let
win2
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
BrowserTestUtils
.
startLoadingURIString
(
win2
.
gBrowser
.
selectedBrowser
"
https
:
/
/
www
.
mozilla
.
org
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
win2
.
gBrowser
.
selectedBrowser
)
;
await
openAndCloseTab
(
win2
"
https
:
/
/
example
.
org
/
"
)
;
Assert
.
equal
(
SessionStore
.
lastClosedActions
.
length
1
1
closed
action
has
been
recorded
)
;
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
Assert
.
equal
(
SessionStore
.
lastClosedActions
.
length
2
2
closed
actions
have
been
recorded
)
;
}
add_setup
(
(
)
=
>
{
forgetClosedTabs
(
window
)
;
registerCleanupFunction
(
(
)
=
>
{
forgetClosedTabs
(
window
)
;
}
)
;
SessionStore
.
resetLastClosedActions
(
)
;
}
)
;
add_task
(
async
function
test_undo_last_action
(
)
{
const
state
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
title
:
"
example
.
org
"
url
:
"
https
:
/
/
example
.
org
/
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
title
:
"
example
.
com
"
url
:
"
https
:
/
/
example
.
com
/
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
title
:
"
mozilla
"
url
:
"
https
:
/
/
www
.
mozilla
.
org
/
"
triggeringPrincipal_base64
}
]
}
]
selected
:
3
}
]
}
;
_LastSession
.
setState
(
state
)
;
let
sessionRestored
=
promiseSessionStoreLoads
(
3
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
await
sessionRestored
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
3
"
Window
has
three
tabs
after
session
is
restored
"
)
;
let
win2
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
Assert
.
equal
(
win2
.
gBrowser
.
tabs
.
length
1
"
Second
window
has
one
open
tab
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
win2
.
gBrowser
.
selectedBrowser
"
https
:
/
/
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
win2
.
gBrowser
.
selectedBrowser
)
;
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
let
restoredWinPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
"
https
:
/
/
example
.
com
/
"
}
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
let
restoredWin
=
await
restoredWinPromise
;
Assert
.
equal
(
restoredWin
.
gBrowser
.
tabs
.
length
1
"
First
tab
in
the
second
window
has
been
reopened
"
)
;
await
BrowserTestUtils
.
closeWindow
(
restoredWin
)
;
SessionStore
.
forgetClosedWindow
(
restoredWin
.
index
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
BrowserTestUtils
.
removeTab
(
window
.
gBrowser
.
tabs
[
2
]
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
2
"
Window
has
two
open
tabs
"
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
3
"
Window
now
has
three
open
tabs
"
)
;
let
tab2
=
window
.
gBrowser
.
tabs
[
1
]
;
let
tab3
=
window
.
gBrowser
.
tabs
[
2
]
;
await
triggerClickOn
(
tab2
{
ctrlKey
:
true
}
)
;
Assert
.
equal
(
tab2
.
multiselected
true
)
;
Assert
.
equal
(
tab3
.
multiselected
true
)
;
let
menu
=
await
openTabMenuFor
(
tab3
)
;
let
menuItemCloseTab
=
document
.
getElementById
(
"
context_closeTab
"
)
;
let
tab2Closing
=
BrowserTestUtils
.
waitForTabClosing
(
tab2
)
;
let
tab3Closing
=
BrowserTestUtils
.
waitForTabClosing
(
tab3
)
;
menu
.
activateItem
(
menuItemCloseTab
)
;
await
tab2Closing
;
await
tab3Closing
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
[
0
]
.
selected
true
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
window
.
gBrowser
.
tabs
.
length
=
=
1
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
1
"
Window
now
has
one
open
tab
after
closing
two
multi
-
selected
tabs
"
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
3
"
Window
now
has
three
open
tabs
after
reopening
closed
tabs
"
)
;
BrowserTestUtils
.
removeTab
(
window
.
gBrowser
.
tabs
[
2
]
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
2
"
Window
has
two
open
tabs
"
)
;
SessionStore
.
forgetClosedTab
(
window
0
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
2
"
Window
still
has
two
open
tabs
"
)
;
const
groupedTab
=
BrowserTestUtils
.
addTab
(
window
.
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
groupedTab
.
linkedBrowser
)
;
const
tabGroup
=
window
.
gBrowser
.
addTabGroup
(
[
groupedTab
]
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
3
"
Window
has
three
tabs
after
creating
tab
group
"
)
;
await
TabStateFlusher
.
flushWindow
(
window
)
;
let
removePromise
=
BrowserTestUtils
.
waitForEvent
(
tabGroup
"
TabGroupRemoved
"
)
;
window
.
gBrowser
.
removeTabGroup
(
tabGroup
)
;
await
removePromise
;
restoreLastClosedTabOrWindowOrSession
(
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
3
"
Window
has
three
tabs
after
restoring
tab
group
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabGroups
.
length
1
"
Tab
group
exists
on
the
tab
strip
after
restore
"
)
;
const
groupedTabToSave
=
BrowserTestUtils
.
addTab
(
window
.
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
groupedTabToSave
.
linkedBrowser
)
;
const
tabGroupToSave
=
window
.
gBrowser
.
addTabGroup
(
[
groupedTabToSave
]
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
4
"
Window
has
four
tabs
after
creating
tab
group
"
)
;
await
TabStateFlusher
.
flushWindow
(
window
)
;
tabGroupToSave
.
save
(
)
;
removePromise
=
BrowserTestUtils
.
waitForEvent
(
tabGroupToSave
"
TabGroupRemoved
"
)
;
window
.
gBrowser
.
removeTabGroup
(
tabGroupToSave
)
;
await
removePromise
;
await
TabStateFlusher
.
flushWindow
(
window
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabs
.
length
4
"
Window
has
four
tabs
after
restoring
tab
group
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
tabGroups
.
length
2
"
Tab
group
exists
on
the
tab
strip
after
restore
"
)
;
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
}
)
;
add_task
(
async
function
test_forget_closed_window
(
)
{
await
testLastClosedActionsEntries
(
)
;
SessionStore
.
forgetClosedWindow
(
)
;
Assert
.
ok
(
!
SessionStore
.
lastClosedActions
.
length
0
closed
actions
have
been
recorded
)
;
}
)
;
add_task
(
async
function
test_user_clears_history
(
)
{
await
testLastClosedActionsEntries
(
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
"
)
;
Assert
.
ok
(
!
SessionStore
.
lastClosedActions
.
length
0
closed
actions
have
been
recorded
)
;
}
)
;
add_task
(
async
function
test_reopen_last_tab_if_no_closed_actions
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
(
)
=
>
{
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
"
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
update
=
BrowserTestUtils
.
waitForSessionStoreUpdate
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
update
;
SessionStore
.
resetLastClosedActions
(
)
;
let
promiseTab
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
TEST_URL
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
let
newTab
=
await
promiseTab
;
Assert
.
equal
(
newTab
.
linkedBrowser
.
currentURI
.
spec
TEST_URL
)
;
}
)
;
}
)
;
add_task
(
async
function
test_reopen_last_session_if_no_closed_actions
(
)
{
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
await
TabStateFlusher
.
flushWindow
(
window
)
;
forgetClosedTabs
(
window
)
;
const
state
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
title
:
"
example
.
org
"
url
:
"
https
:
/
/
example
.
org
/
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
title
:
"
example
.
com
"
url
:
"
https
:
/
/
example
.
com
/
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
title
:
"
mozilla
"
url
:
"
https
:
/
/
www
.
mozilla
.
org
/
"
triggeringPrincipal_base64
}
]
}
]
selected
:
3
}
]
}
;
_LastSession
.
setState
(
state
)
;
SessionStore
.
resetLastClosedActions
(
)
;
let
sessionRestored
=
promiseSessionStoreLoads
(
3
)
;
restoreLastClosedTabOrWindowOrSession
(
)
;
await
sessionRestored
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
4
"
Got
the
expected
number
of
tabs
"
)
;
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
}
)
;
