"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
)
;
function
openAndCloseTab
(
window
url
)
{
let
tab
=
window
.
gBrowser
.
addTab
(
url
)
;
yield
promiseBrowserLoaded
(
tab
.
linkedBrowser
true
url
)
;
yield
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
yield
promiseRemoveTab
(
tab
)
;
}
function
*
openWindow
(
url
)
{
let
win
=
yield
promiseNewWindowLoaded
(
)
;
let
flags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_REPLACE_HISTORY
;
win
.
gBrowser
.
selectedBrowser
.
loadURIWithFlags
(
url
flags
)
;
yield
promiseBrowserLoaded
(
win
.
gBrowser
.
selectedBrowser
true
url
)
;
return
win
;
}
add_task
(
function
*
test_undoCloseById
(
)
{
forgetClosedWindows
(
)
;
while
(
SessionStore
.
getClosedTabCount
(
window
)
)
{
SessionStore
.
forgetClosedTab
(
window
0
)
;
}
let
win
=
yield
openWindow
(
"
about
:
robots
"
)
;
yield
openAndCloseTab
(
win
"
about
:
mozilla
"
)
;
let
initialClosedId
=
SessionStore
.
getClosedTabData
(
win
false
)
[
0
]
.
closedId
;
yield
openAndCloseTab
(
win
"
about
:
robots
"
)
;
let
tab
=
SessionStore
.
undoCloseById
(
initialClosedId
+
1
)
;
yield
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
is
(
tab
.
linkedBrowser
.
currentURI
.
spec
"
about
:
robots
"
"
The
expected
tab
was
re
-
opened
"
)
;
let
notTab
=
SessionStore
.
undoCloseById
(
initialClosedId
+
1
)
;
is
(
notTab
undefined
"
Re
-
opened
tab
cannot
be
unClosed
again
by
closedId
"
)
;
let
tab2
=
SessionStore
.
undoCloseById
(
initialClosedId
)
;
yield
promiseBrowserLoaded
(
tab2
.
linkedBrowser
)
;
is
(
tab2
.
linkedBrowser
.
currentURI
.
spec
"
about
:
mozilla
"
"
The
expected
tab
was
re
-
opened
"
)
;
yield
promiseRemoveTab
(
tab
)
;
yield
promiseRemoveTab
(
tab2
)
;
let
win2
=
yield
openWindow
(
"
about
:
mozilla
"
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
yield
BrowserTestUtils
.
closeWindow
(
win2
)
;
win
=
SessionStore
.
undoCloseById
(
initialClosedId
+
5
)
;
yield
BrowserTestUtils
.
waitForEvent
(
win
"
load
"
)
;
yield
BrowserTestUtils
.
waitForEvent
(
win
.
gBrowser
.
tabContainer
"
SSTabRestored
"
)
;
is
(
win
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
"
about
:
mozilla
"
"
The
expected
window
was
re
-
opened
"
)
;
let
notWin
=
SessionStore
.
undoCloseById
(
initialClosedId
+
5
)
;
is
(
notWin
undefined
"
Re
-
opened
window
cannot
be
unClosed
again
by
closedId
"
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
win
=
SessionStore
.
undoCloseById
(
initialClosedId
+
4
)
;
yield
BrowserTestUtils
.
waitForEvent
(
win
"
load
"
)
;
yield
BrowserTestUtils
.
waitForEvent
(
win
.
gBrowser
.
tabContainer
"
SSTabRestored
"
)
;
is
(
win
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
"
about
:
robots
"
"
The
expected
window
was
re
-
opened
"
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
