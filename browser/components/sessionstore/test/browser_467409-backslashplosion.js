"
use
strict
"
;
const
CRASH_STATE
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
about
:
mozilla
"
triggeringPrincipal_base64
}
]
}
]
}
]
}
;
const
STATE
=
createEntries
(
CRASH_STATE
)
;
const
STATE2
=
createEntries
(
{
windows
:
[
{
tabs
:
[
STATE
]
}
]
}
)
;
const
STATE3
=
createEntries
(
JSON
.
stringify
(
CRASH_STATE
)
)
;
function
createEntries
(
sessionData
)
{
return
{
entries
:
[
{
url
:
"
about
:
sessionrestore
"
triggeringPrincipal_base64
}
]
formdata
:
{
id
:
{
sessionData
}
url
:
"
about
:
sessionrestore
"
}
}
;
}
add_task
(
async
function
test_nested_about_sessionrestore
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
promiseTabState
(
tab
STATE
)
;
await
checkState
(
"
test1
"
tab
)
;
await
promiseTabState
(
tab
STATE2
)
;
await
checkState
(
"
test2
"
tab
)
;
await
promiseTabState
(
tab
STATE3
)
;
await
checkState
(
"
test3
"
tab
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
async
function
checkState
(
prefix
tab
)
{
await
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
let
{
formdata
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
ok
(
formdata
.
id
[
"
sessionData
"
]
prefix
+
"
:
we
have
form
data
for
about
:
sessionrestore
"
)
;
let
sessionData_raw
=
JSON
.
stringify
(
formdata
.
id
[
"
sessionData
"
]
)
;
ok
(
!
/
\
\
/
.
test
(
sessionData_raw
)
prefix
+
"
:
#
sessionData
contains
no
backslashes
"
)
;
info
(
sessionData_raw
)
;
let
gotError
=
false
;
try
{
JSON
.
parse
(
formdata
.
id
[
"
sessionData
"
]
)
;
}
catch
(
e
)
{
info
(
prefix
+
"
:
got
error
:
"
+
e
)
;
gotError
=
true
;
}
ok
(
gotError
prefix
+
"
:
attempting
to
JSON
.
parse
form
data
threw
error
"
)
;
}
