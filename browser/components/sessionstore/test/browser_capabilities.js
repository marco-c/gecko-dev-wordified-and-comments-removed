"
use
strict
"
;
add_task
(
async
function
docshell_capabilities
(
)
{
let
tab
=
await
createTab
(
)
;
let
browser
=
tab
.
linkedBrowser
;
let
docShell
=
browser
.
docShell
;
let
flags
=
Object
.
keys
(
docShell
)
.
filter
(
k
=
>
k
.
startsWith
(
"
allow
"
)
)
;
let
state
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
ok
(
!
(
"
disallow
"
in
state
)
"
everything
allowed
by
default
"
)
;
ok
(
flags
.
every
(
f
=
>
docShell
[
f
]
)
"
all
flags
set
to
true
"
)
;
docShell
.
allowImages
=
false
;
docShell
.
allowMetaRedirects
=
false
;
docShell
.
allowJavascript
=
false
;
browser
.
reload
(
)
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
disallowedState
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
let
disallow
=
new
Set
(
disallowedState
.
disallow
.
split
(
"
"
)
)
;
ok
(
disallow
.
has
(
"
Images
"
)
"
images
not
allowed
"
)
;
ok
(
disallow
.
has
(
"
MetaRedirects
"
)
"
meta
redirects
not
allowed
"
)
;
is
(
disallow
.
size
2
"
two
capabilities
disallowed
"
)
;
await
promiseTabState
(
tab
{
entries
:
[
{
url
:
"
about
:
robots
"
triggeringPrincipal_base64
}
]
}
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
state
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
ok
(
!
(
"
disallow
"
in
state
)
"
everything
allowed
again
"
)
;
ok
(
flags
.
every
(
f
=
>
docShell
[
f
]
)
"
all
flags
set
to
true
"
)
;
await
promiseTabState
(
tab
disallowedState
)
;
ok
(
!
docShell
.
allowImages
"
images
not
allowed
"
)
;
ok
(
!
docShell
.
allowMetaRedirects
"
meta
redirects
not
allowed
"
)
;
ok
(
docShell
.
allowJavascript
"
Javascript
still
allowed
"
)
;
state
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
disallow
=
new
Set
(
state
.
disallow
.
split
(
"
"
)
)
;
ok
(
disallow
.
has
(
"
Images
"
)
"
images
not
allowed
anymore
"
)
;
ok
(
disallow
.
has
(
"
MetaRedirects
"
)
"
meta
redirects
not
allowed
anymore
"
)
;
ok
(
!
disallow
.
has
(
"
Javascript
"
)
"
Javascript
still
allowed
"
)
;
is
(
disallow
.
size
2
"
two
capabilities
disallowed
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
async
function
createTab
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
rights
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
return
tab
;
}
