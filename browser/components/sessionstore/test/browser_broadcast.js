"
use
strict
"
;
const
INITIAL_VALUE
=
"
browser_broadcast
.
js
-
initial
-
value
-
"
+
Date
.
now
(
)
;
add_task
(
async
function
flush_on_tabclose
(
)
{
let
tab
=
await
createTabWithStorageData
(
[
"
http
:
/
/
example
.
com
"
]
)
;
let
browser
=
tab
.
linkedBrowser
;
await
modifySessionStorage
(
browser
{
test
:
"
on
-
tab
-
close
"
}
)
;
await
promiseRemoveTab
(
tab
)
;
let
[
{
state
:
{
storage
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
on
-
tab
-
close
"
"
sessionStorage
data
has
been
flushed
on
TabClose
"
)
;
}
)
;
add_task
(
async
function
flush_on_duplicate
(
)
{
let
tab
=
await
createTabWithStorageData
(
[
"
http
:
/
/
example
.
com
"
]
)
;
let
browser
=
tab
.
linkedBrowser
;
await
modifySessionStorage
(
browser
{
test
:
"
on
-
duplicate
"
}
)
;
let
tab2
=
ss
.
duplicateTab
(
window
tab
)
;
await
promiseTabRestored
(
tab2
)
;
await
promiseRemoveTab
(
tab2
)
;
let
[
{
state
:
{
storage
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
on
-
duplicate
"
"
sessionStorage
data
has
been
flushed
when
duplicating
tabs
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
flush_on_windowclose
(
)
{
let
win
=
await
promiseNewWindow
(
)
;
let
tab
=
await
createTabWithStorageData
(
[
"
http
:
/
/
example
.
com
"
]
win
)
;
let
browser
=
tab
.
linkedBrowser
;
await
modifySessionStorage
(
browser
{
test
:
"
on
-
window
-
close
"
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
let
[
{
tabs
:
[
{
storage
}
]
}
]
=
JSON
.
parse
(
ss
.
getClosedWindowData
(
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
on
-
window
-
close
"
"
sessionStorage
data
has
been
flushed
when
closing
a
window
"
)
;
}
)
;
add_task
(
async
function
flush_on_settabstate
(
)
{
let
tab
=
await
createTabWithStorageData
(
[
"
http
:
/
/
example
.
com
"
]
)
;
let
browser
=
tab
.
linkedBrowser
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
state
=
ss
.
getTabState
(
tab
)
;
await
modifySessionStorage
(
browser
{
test
:
"
on
-
set
-
tab
-
state
"
}
)
;
TabStateFlusher
.
flush
(
browser
)
;
await
promiseTabState
(
tab
state
)
;
let
{
storage
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
INITIAL_VALUE
"
sessionStorage
data
has
not
been
overwritten
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
flush_on_tabclose_racy
(
)
{
let
tab
=
await
createTabWithStorageData
(
[
"
http
:
/
/
example
.
com
"
]
)
;
let
browser
=
tab
.
linkedBrowser
;
await
TabStateFlusher
.
flush
(
browser
)
;
await
modifySessionStorage
(
browser
{
test
:
"
on
-
tab
-
close
-
racy
"
}
)
;
TabStateFlusher
.
flush
(
browser
)
;
await
promiseRemoveTab
(
tab
)
;
let
[
{
state
:
{
storage
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
storage
[
"
http
:
/
/
example
.
com
"
]
.
test
"
on
-
tab
-
close
-
racy
"
"
sessionStorage
data
has
been
merged
correctly
to
prevent
data
loss
"
)
;
}
)
;
function
promiseNewWindow
(
)
{
return
new
Promise
(
resolve
=
>
{
whenNewWindowLoaded
(
{
private
:
false
}
resolve
)
;
}
)
;
}
async
function
createTabWithStorageData
(
urls
win
=
window
)
{
let
tab
=
win
.
gBrowser
.
addTab
(
)
;
let
browser
=
tab
.
linkedBrowser
;
for
(
let
url
of
urls
)
{
browser
.
loadURI
(
url
)
;
await
promiseBrowserLoaded
(
browser
)
;
await
modifySessionStorage
(
browser
{
test
:
INITIAL_VALUE
}
)
;
}
return
tab
;
}
