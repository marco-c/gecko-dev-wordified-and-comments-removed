add_task
(
function
*
test
(
)
{
let
testURL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
sessionstore
/
test
/
browser_911547_sample
.
html
"
;
let
tab
=
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
testURL
)
;
gBrowser
.
selectedTab
=
tab
;
let
browser
=
tab
.
linkedBrowser
;
yield
promiseBrowserLoaded
(
browser
)
;
yield
injectInlineScript
(
browser
document
.
getElementById
(
"
test_id
"
)
.
value
=
"
fail
"
;
)
;
let
loadedPromise
=
promiseBrowserLoaded
(
browser
)
;
yield
ContentTask
.
spawn
(
browser
null
function
(
)
{
is
(
content
.
document
.
getElementById
(
"
test_id
"
)
.
value
"
ok
"
"
CSP
should
block
the
inline
script
that
modifies
test_id
"
)
;
content
.
document
.
getElementById
(
"
test_data_link
"
)
.
click
(
)
;
}
)
;
yield
loadedPromise
;
yield
ContentTask
.
spawn
(
browser
null
function
(
)
{
is
(
content
.
document
.
getElementById
(
"
test_id2
"
)
.
value
"
ok
"
"
CSP
should
block
the
script
loaded
by
the
clicked
data
URI
"
)
;
}
)
;
yield
promiseRemoveTab
(
tab
)
;
tab
=
ss
.
undoCloseTab
(
window
0
)
;
yield
promiseTabRestored
(
tab
)
;
browser
=
tab
.
linkedBrowser
;
yield
ContentTask
.
spawn
(
browser
null
function
(
)
{
is
(
content
.
document
.
getElementById
(
"
test_id2
"
)
.
value
"
ok
"
"
CSP
should
block
the
script
loaded
by
the
clicked
data
URI
after
restore
"
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
function
injectInlineScript
(
browser
scriptText
)
{
return
ContentTask
.
spawn
(
browser
scriptText
function
(
text
)
{
let
scriptElt
=
content
.
document
.
createElement
(
"
script
"
)
;
scriptElt
.
type
=
"
text
/
javascript
"
;
scriptElt
.
text
=
text
;
content
.
document
.
body
.
appendChild
(
scriptElt
)
;
}
)
;
}
