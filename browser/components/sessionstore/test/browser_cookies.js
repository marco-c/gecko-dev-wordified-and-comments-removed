"
use
strict
"
;
function
promiseSetCookie
(
cookie
)
{
info
(
Set
-
Cookie
:
{
cookie
}
)
;
return
Promise
.
all
(
[
waitForCookieChanged
(
)
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
cookie
passedCookie
=
>
content
.
document
.
cookie
=
passedCookie
)
]
)
;
}
function
waitForCookieChanged
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
observer
(
subj
topic
data
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
)
;
}
"
cookie
-
changed
"
)
;
}
)
;
}
function
cookieExists
(
host
name
value
)
{
let
{
cookies
:
[
c
]
}
=
JSON
.
parse
(
ss
.
getBrowserState
(
)
)
;
return
c
&
&
c
.
host
=
=
host
&
&
c
.
name
=
=
name
&
&
c
.
value
=
=
value
;
}
add_task
(
function
*
test_setup
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
cookies
.
removeAll
(
)
;
}
)
;
}
)
;
add_task
(
function
*
test_run
(
)
{
Services
.
cookies
.
removeAll
(
)
;
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
"
http
:
/
/
example
.
com
/
"
)
;
yield
promiseBrowserLoaded
(
gBrowser
.
selectedBrowser
)
;
yield
promiseSetCookie
(
"
foo
=
bar
"
)
;
ok
(
cookieExists
(
"
example
.
com
"
"
foo
"
"
bar
"
)
"
cookie
was
added
"
)
;
yield
promiseSetCookie
(
"
foo
=
baz
"
)
;
ok
(
cookieExists
(
"
example
.
com
"
"
foo
"
"
baz
"
)
"
cookie
was
modified
"
)
;
let
expiry
=
new
Date
(
)
;
expiry
.
setDate
(
expiry
.
getDate
(
)
+
2
)
;
yield
promiseSetCookie
(
foo
=
baz
;
Expires
=
{
expiry
.
toUTCString
(
)
}
)
;
ok
(
!
cookieExists
(
"
example
.
com
"
"
foo
"
"
baz
"
)
"
no
longer
a
session
cookie
"
)
;
yield
promiseSetCookie
(
"
foo
=
bar
"
)
;
ok
(
cookieExists
(
"
example
.
com
"
"
foo
"
"
bar
"
)
"
again
a
session
cookie
"
)
;
yield
promiseSetCookie
(
"
foo
=
;
Expires
=
Thu
01
Jan
1970
00
:
00
:
00
GMT
"
)
;
ok
(
!
cookieExists
(
"
example
.
com
"
"
foo
"
"
"
)
"
cookie
was
removed
"
)
;
yield
promiseSetCookie
(
"
foo
=
bar
"
)
;
ok
(
cookieExists
(
"
example
.
com
"
"
foo
"
"
bar
"
)
"
cookie
was
added
"
)
;
Services
.
cookies
.
removeAll
(
)
;
ok
(
!
cookieExists
(
"
example
.
com
"
"
foo
"
"
bar
"
)
"
cookies
were
cleared
"
)
;
yield
promiseRemoveTab
(
gBrowser
.
selectedTab
)
;
}
)
;
