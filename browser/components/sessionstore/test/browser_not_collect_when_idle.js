const
{
MockRegistrar
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
sys
.
mjs
"
)
;
var
idleService
=
{
_observers
:
new
Set
(
)
_activity
:
{
addCalls
:
[
]
removeCalls
:
[
]
observerFires
:
[
]
}
_reset
(
)
{
this
.
_observers
.
clear
(
)
;
this
.
_activity
.
addCalls
=
[
]
;
this
.
_activity
.
removeCalls
=
[
]
;
this
.
_activity
.
observerFires
=
[
]
;
}
_fireObservers
(
state
)
{
for
(
let
observer
of
this
.
_observers
.
values
(
)
)
{
observer
.
observe
(
observer
state
null
)
;
this
.
_activity
.
observerFires
.
push
(
state
)
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIUserIdleService
"
]
)
idleTime
:
19999
addIdleObserver
(
observer
time
)
{
this
.
_observers
.
add
(
observer
)
;
this
.
_activity
.
addCalls
.
push
(
time
)
;
}
removeIdleObserver
(
observer
time
)
{
this
.
_observers
.
delete
(
observer
)
;
this
.
_activity
.
removeCalls
.
push
(
time
)
;
}
}
;
add_task
(
async
function
testIntervalChanges
(
)
{
Cc
[
"
mozilla
.
org
/
widget
/
useridleservice
;
1
"
]
.
getService
(
Ci
.
nsIUserIdleServiceInternal
)
.
resetIdleTimeOut
(
0
)
;
const
PREF_SS_INTERVAL
=
2000
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
interval
"
PREF_SS_INTERVAL
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
idleDelay
"
86400
)
;
let
fakeIdleService
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
widget
/
useridleservice
;
1
"
idleService
)
;
idleService
.
_reset
(
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
interval
"
)
;
MockRegistrar
.
unregister
(
fakeIdleService
)
;
}
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
idleDelay
"
5000
)
;
info
(
"
Waiting
for
sessionstore
-
state
-
write
-
complete
notification
"
)
;
await
TestUtils
.
topicObserved
(
"
sessionstore
-
state
-
write
-
complete
"
)
;
info
(
"
Got
the
sessionstore
-
state
-
write
-
complete
notification
now
testing
idle
mode
"
)
;
idleService
.
_fireObservers
(
"
idle
"
)
;
SessionSaver
.
cancel
(
)
;
let
p1
=
promiseSaveState
(
)
;
SessionSaver
.
runDelayed
(
0
)
;
await
Assert
.
rejects
(
p1
/
Save
state
timeout
/
"
[
Test
1A
]
No
state
write
during
idle
.
"
)
;
await
Assert
.
rejects
(
promiseSaveState
(
)
/
Save
state
timeout
/
"
[
Test
1B
]
Again
:
No
state
write
during
idle
.
"
)
;
info
(
"
Start
to
test
active
mode
.
.
.
"
)
;
idleService
.
_fireObservers
(
"
active
"
)
;
info
(
"
[
Test
2
]
Waiting
for
sessionstore
-
state
-
write
-
complete
during
active
"
)
;
await
TestUtils
.
topicObserved
(
"
sessionstore
-
state
-
write
-
complete
"
)
;
}
)
;
