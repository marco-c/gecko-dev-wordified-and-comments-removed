const
{
Preferences
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
const
Paths
=
SessionFile
.
Paths
;
const
PREF_UPGRADE
=
"
browser
.
sessionstore
.
upgradeBackup
.
latestBuildID
"
;
const
PREF_MAX_UPGRADE_BACKUPS
=
"
browser
.
sessionstore
.
upgradeBackup
.
maxUpgradeBackups
"
;
function
prepareTest
(
)
{
let
result
=
{
}
;
result
.
buildID
=
Services
.
appinfo
.
platformBuildID
;
Services
.
prefs
.
setCharPref
(
PREF_UPGRADE
"
"
)
;
result
.
contents
=
JSON
.
stringify
(
{
"
browser_upgrade_backup
.
js
"
:
Math
.
random
(
)
}
)
;
return
result
;
}
async
function
getUpgradeBackups
(
)
{
let
children
=
await
IOUtils
.
getChildren
(
Paths
.
backups
)
;
return
children
.
filter
(
path
=
>
path
.
startsWith
(
Paths
.
upgradeBackupPrefix
)
)
;
}
add_task
(
async
function
init
(
)
{
await
SessionStore
.
promiseInitialized
;
}
)
;
add_task
(
async
function
test_upgrade_backup
(
)
{
let
test
=
prepareTest
(
)
;
info
(
"
Let
'
s
check
if
we
create
an
upgrade
backup
"
)
;
await
SessionFile
.
wipe
(
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
clean
test
.
contents
{
compress
:
true
}
)
;
await
SessionFile
.
read
(
)
;
await
SessionFile
.
write
(
"
"
)
;
is
(
Services
.
prefs
.
getCharPref
(
PREF_UPGRADE
)
test
.
buildID
"
upgrade
backup
should
be
set
"
)
;
is
(
await
IOUtils
.
exists
(
Paths
.
upgradeBackup
)
true
"
upgrade
backup
file
has
been
created
"
)
;
let
data
=
await
IOUtils
.
read
(
Paths
.
upgradeBackup
{
decompress
:
true
}
)
;
is
(
test
.
contents
new
TextDecoder
(
)
.
decode
(
data
)
"
upgrade
backup
contains
the
expected
contents
"
)
;
info
(
"
Let
'
s
check
that
we
don
'
t
overwrite
this
upgrade
backup
"
)
;
let
newContents
=
JSON
.
stringify
(
{
"
something
else
entirely
"
:
Math
.
random
(
)
}
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
clean
newContents
{
compress
:
true
}
)
;
await
SessionFile
.
read
(
)
;
await
SessionFile
.
write
(
"
"
)
;
data
=
await
IOUtils
.
read
(
Paths
.
upgradeBackup
{
decompress
:
true
}
)
;
is
(
test
.
contents
new
TextDecoder
(
)
.
decode
(
data
)
"
upgrade
backup
hasn
'
t
changed
"
)
;
}
)
;
add_task
(
async
function
test_upgrade_backup_removal
(
)
{
let
test
=
prepareTest
(
)
;
let
maxUpgradeBackups
=
Preferences
.
get
(
PREF_MAX_UPGRADE_BACKUPS
3
)
;
info
(
"
Let
'
s
see
if
we
remove
backups
if
there
are
too
many
"
)
;
await
SessionFile
.
wipe
(
)
;
await
IOUtils
.
makeDirectory
(
Paths
.
backups
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
clean
test
.
contents
{
compress
:
true
}
)
;
if
(
await
IOUtils
.
exists
(
Paths
.
nextUpgradeBackup
)
)
{
await
IOUtils
.
remove
(
Paths
.
nextUpgradeBackup
)
;
}
await
IOUtils
.
writeUTF8
(
Paths
.
upgradeBackupPrefix
+
"
20080101010101
"
"
"
{
compress
:
true
}
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
upgradeBackupPrefix
+
"
20090101010101
"
"
"
{
compress
:
true
}
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
upgradeBackupPrefix
+
"
20100101010101
"
"
"
{
compress
:
true
}
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
upgradeBackupPrefix
+
"
20110101010101
"
"
"
{
compress
:
true
}
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
upgradeBackupPrefix
+
"
20120101010101
"
"
"
{
compress
:
true
}
)
;
await
IOUtils
.
writeUTF8
(
Paths
.
upgradeBackupPrefix
+
"
20130101010101
"
"
"
{
compress
:
true
}
)
;
let
backups
=
await
getUpgradeBackups
(
)
;
await
SessionFile
.
read
(
)
;
await
SessionFile
.
write
(
"
"
)
;
is
(
Services
.
prefs
.
getCharPref
(
PREF_UPGRADE
)
test
.
buildID
"
upgrade
backup
should
be
set
"
)
;
is
(
await
IOUtils
.
exists
(
Paths
.
upgradeBackup
)
true
"
upgrade
backup
file
has
been
created
"
)
;
let
newBackups
=
await
getUpgradeBackups
(
)
;
is
(
newBackups
.
length
maxUpgradeBackups
"
expected
number
of
backups
are
present
after
removing
old
backups
"
)
;
newBackups
=
newBackups
.
filter
(
function
(
backup
)
{
return
!
backups
.
includes
(
backup
)
;
}
)
;
is
(
newBackups
.
length
1
"
one
new
backup
was
created
that
was
not
removed
"
)
;
await
SessionFile
.
write
(
"
"
)
;
backups
=
await
getUpgradeBackups
(
)
;
is
(
backups
.
length
maxUpgradeBackups
"
second
call
to
SessionFile
.
write
(
)
didn
'
t
create
or
remove
more
backups
"
)
;
}
)
;
