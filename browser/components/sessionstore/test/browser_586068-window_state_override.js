const
PREF_RESTORE_ON_DEMAND
=
"
browser
.
sessionstore
.
restore_on_demand
"
;
add_task
(
async
function
test
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_RESTORE_ON_DEMAND
false
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
PREF_RESTORE_ON_DEMAND
)
;
}
)
;
let
state1
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
1
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
2
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
3
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
4
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
com
#
5
"
triggeringPrincipal_base64
}
]
}
]
}
]
}
;
let
state2
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
1
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
2
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
3
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
4
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
#
5
"
triggeringPrincipal_base64
}
]
}
]
}
]
}
;
let
numTabs
=
2
+
state2
.
windows
[
0
]
.
tabs
.
length
;
let
loadCount
=
0
;
let
promiseRestoringTabs
=
new
Promise
(
resolve
=
>
{
gProgressListener
.
setCallback
(
function
(
aBrowser
aNeedRestore
)
{
if
(
+
+
loadCount
=
=
2
)
{
executeSoon
(
(
)
=
>
ss
.
setWindowState
(
window
JSON
.
stringify
(
state2
)
true
)
)
;
}
if
(
loadCount
<
numTabs
)
{
return
;
}
is
(
loadCount
numTabs
"
all
tabs
were
restored
"
)
;
is
(
aNeedRestore
0
"
there
are
no
tabs
left
needing
restore
"
)
;
gProgressListener
.
unsetCallback
(
)
;
resolve
(
)
;
}
)
;
}
)
;
let
backupState
=
ss
.
getBrowserState
(
)
;
ss
.
setWindowState
(
window
JSON
.
stringify
(
state1
)
true
)
;
await
promiseRestoringTabs
;
await
promiseBrowserState
(
backupState
)
;
}
)
;
