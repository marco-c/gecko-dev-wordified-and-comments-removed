"
use
strict
"
;
async
function
createTabWithRandomValue
(
url
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
let
r
=
rand
-
{
Math
.
random
(
)
}
;
ss
.
setCustomTabValue
(
tab
"
foobar
"
r
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
return
{
tab
r
}
;
}
function
isValueInClosedData
(
rval
)
{
return
ss
.
getClosedTabData
(
window
)
.
includes
(
rval
)
;
}
function
restoreClosedTabWithValue
(
rval
)
{
let
closedTabData
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
let
index
=
closedTabData
.
findIndex
(
function
(
data
)
{
return
(
data
.
state
.
extData
&
&
data
.
state
.
extData
.
foobar
)
=
=
rval
;
}
)
;
if
(
index
=
=
-
1
)
{
throw
new
Error
(
"
no
closed
tab
found
for
given
rval
"
)
;
}
return
ss
.
undoCloseTab
(
window
index
)
;
}
function
promiseNewLocationAndHistoryEntryReplaced
(
tab
snippet
)
{
let
browser
=
tab
.
linkedBrowser
;
if
(
SpecialPowers
.
Services
.
appinfo
.
sessionHistoryInParent
)
{
SpecialPowers
.
spawn
(
browser
[
snippet
]
async
function
(
codeSnippet
)
{
let
webNavigation
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
eval
(
codeSnippet
)
;
}
)
;
return
promiseOnHistoryReplaceEntry
(
tab
)
;
}
return
SpecialPowers
.
spawn
(
browser
[
snippet
]
async
function
(
codeSnippet
)
{
let
webNavigation
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
let
shistory
=
webNavigation
.
sessionHistory
.
legacySHistory
;
eval
(
codeSnippet
)
;
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
OnHistoryReplaceEntry
(
)
{
shistory
.
removeSHistoryListener
(
this
)
;
resolve
(
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsISHistoryListener
"
"
nsISupportsWeakReference
"
]
)
}
;
shistory
.
addSHistoryListener
(
listener
)
;
docShell
.
chromeEventHandler
.
addEventListener
(
"
unload
"
function
(
)
{
try
{
shistory
.
removeSHistoryListener
(
listener
)
;
}
catch
(
e
)
{
}
}
)
;
}
)
;
}
)
;
}
add_task
(
async
function
dont_save_empty_tabs
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
about
:
blank
"
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
!
isValueInClosedData
(
r
)
"
closed
tab
not
saved
"
)
;
await
promise
;
ok
(
!
isValueInClosedData
(
r
)
"
closed
tab
not
saved
"
)
;
}
)
;
add_task
(
async
function
save_worthy_tabs_remote
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
https
:
/
/
example
.
com
/
"
)
;
ok
(
tab
.
linkedBrowser
.
isRemoteBrowser
"
browser
is
remote
"
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
await
promise
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
}
)
;
add_task
(
async
function
save_worthy_tabs_nonremote
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
about
:
robots
"
)
;
ok
(
!
tab
.
linkedBrowser
.
isRemoteBrowser
"
browser
is
not
remote
"
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
await
promise
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
}
)
;
add_task
(
async
function
save_worthy_tabs_remote_final
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
ok
(
browser
.
isRemoteBrowser
"
browser
is
remote
"
)
;
let
snippet
=
'
webNavigation
.
loadURI
(
"
https
:
/
/
example
.
com
/
"
\
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
'
;
await
promiseNewLocationAndHistoryEntryReplaced
(
tab
snippet
)
;
ok
(
browser
.
isRemoteBrowser
"
browser
is
still
remote
"
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
!
isValueInClosedData
(
r
)
"
closed
tab
not
saved
"
)
;
await
promise
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
}
)
;
add_task
(
async
function
save_worthy_tabs_nonremote_final
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
ok
(
browser
.
isRemoteBrowser
"
browser
is
remote
"
)
;
await
BrowserTestUtils
.
loadURI
(
browser
"
about
:
robots
"
)
;
ok
(
!
browser
.
isRemoteBrowser
"
browser
is
not
remote
anymore
"
)
;
await
promiseTabRestored
(
tab
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
!
isValueInClosedData
(
r
)
"
closed
tab
not
saved
"
)
;
await
promise
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
}
)
;
add_task
(
async
function
dont_save_empty_tabs_final
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
https
:
/
/
example
.
com
/
"
)
;
let
snippet
=
'
content
.
location
.
replace
(
"
about
:
blank
"
)
'
;
await
promiseNewLocationAndHistoryEntryReplaced
(
tab
snippet
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
await
promise
;
ok
(
!
isValueInClosedData
(
r
)
"
closed
tab
not
saved
"
)
;
}
)
;
add_task
(
async
function
undo_worthy_tabs
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
https
:
/
/
example
.
com
/
"
)
;
ok
(
tab
.
linkedBrowser
.
isRemoteBrowser
"
browser
is
remote
"
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
tab
=
restoreClosedTabWithValue
(
r
)
;
await
promise
;
ok
(
!
isValueInClosedData
(
r
)
"
tab
no
longer
closed
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
forget_worthy_tabs_remote
(
)
{
let
{
tab
r
}
=
await
createTabWithRandomValue
(
"
https
:
/
/
example
.
com
/
"
)
;
ok
(
tab
.
linkedBrowser
.
isRemoteBrowser
"
browser
is
remote
"
)
;
let
promise
=
promiseRemoveTabAndSessionState
(
tab
)
;
ok
(
isValueInClosedData
(
r
)
"
closed
tab
saved
"
)
;
ss
.
forgetClosedTab
(
window
0
)
;
await
promise
;
ok
(
!
isValueInClosedData
(
r
)
"
we
forgot
about
the
tab
"
)
;
}
)
;
