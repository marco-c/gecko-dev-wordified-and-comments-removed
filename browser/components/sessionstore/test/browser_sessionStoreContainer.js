requestLongerTimeout
(
3
)
;
add_task
(
function
*
(
)
{
for
(
let
i
=
0
;
i
<
3
;
+
+
i
)
{
let
tab
=
gBrowser
.
addTab
(
"
http
:
/
/
example
.
com
/
"
{
userContextId
:
i
}
)
;
let
browser
=
tab
.
linkedBrowser
;
yield
promiseBrowserLoaded
(
browser
)
;
let
tab2
=
gBrowser
.
duplicateTab
(
tab
)
;
Assert
.
equal
(
tab2
.
getAttribute
(
"
usercontextid
"
)
i
)
;
let
browser2
=
tab2
.
linkedBrowser
;
yield
promiseTabRestored
(
tab2
)
yield
ContentTask
.
spawn
(
browser2
{
expectedId
:
i
}
function
*
(
args
)
{
let
loadContext
=
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
Assert
.
equal
(
loadContext
.
originAttributes
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
}
)
;
yield
promiseRemoveTab
(
tab
)
;
yield
promiseRemoveTab
(
tab2
)
;
}
}
)
;
add_task
(
function
*
(
)
{
let
tab
=
gBrowser
.
addTab
(
"
http
:
/
/
example
.
com
/
"
{
userContextId
:
1
}
)
;
let
browser
=
tab
.
linkedBrowser
;
yield
promiseBrowserLoaded
(
browser
)
;
gBrowser
.
selectedTab
=
tab
;
let
tab2
=
gBrowser
.
duplicateTab
(
tab
)
;
let
browser2
=
tab2
.
linkedBrowser
;
yield
promiseTabRestored
(
tab2
)
yield
ContentTask
.
spawn
(
browser2
{
expectedId
:
1
}
function
*
(
args
)
{
Assert
.
equal
(
docShell
.
getOriginAttributes
(
)
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
}
)
;
yield
promiseRemoveTab
(
tab
)
;
yield
promiseRemoveTab
(
tab2
)
;
}
)
;
add_task
(
function
*
(
)
{
let
tab
=
gBrowser
.
addTab
(
"
http
:
/
/
example
.
com
/
"
{
userContextId
:
1
}
)
;
let
browser
=
tab
.
linkedBrowser
;
yield
promiseBrowserLoaded
(
browser
)
;
gBrowser
.
removeTab
(
tab
)
;
let
tab2
=
ss
.
undoCloseTab
(
window
0
)
;
Assert
.
equal
(
tab2
.
getAttribute
(
"
usercontextid
"
)
1
)
;
yield
promiseTabRestored
(
tab2
)
;
yield
ContentTask
.
spawn
(
tab2
.
linkedBrowser
{
expectedId
:
1
}
function
*
(
args
)
{
Assert
.
equal
(
docShell
.
getOriginAttributes
(
)
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
}
)
;
yield
promiseRemoveTab
(
tab2
)
;
}
)
;
add_task
(
function
*
(
)
{
let
win
=
window
.
openDialog
(
location
"
_blank
"
"
chrome
all
dialog
=
no
"
)
;
yield
promiseWindowLoaded
(
win
)
;
for
(
let
userContextId
=
1
;
userContextId
<
5
;
userContextId
+
+
)
{
let
tab
=
win
.
gBrowser
.
addTab
(
"
http
:
/
/
example
.
com
/
"
{
userContextId
}
)
;
yield
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
yield
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
}
win
.
gBrowser
.
moveTabTo
(
win
.
gBrowser
.
tabs
[
0
]
win
.
gBrowser
.
tabs
.
length
-
1
)
;
let
winState
=
JSON
.
parse
(
ss
.
getWindowState
(
win
)
)
;
for
(
let
i
=
0
;
i
<
4
;
i
+
+
)
{
Assert
.
equal
(
winState
.
windows
[
0
]
.
tabs
[
i
]
.
userContextId
i
+
1
"
1st
Window
:
tabs
[
"
+
i
+
"
]
.
userContextId
should
exist
.
"
)
;
}
let
win2
=
window
.
openDialog
(
location
"
_blank
"
"
chrome
all
dialog
=
no
"
)
;
yield
promiseWindowLoaded
(
win2
)
;
for
(
let
userContextId
=
3
;
userContextId
>
0
;
userContextId
-
-
)
{
let
tab
=
win2
.
gBrowser
.
addTab
(
"
http
:
/
/
example
.
com
/
"
{
userContextId
}
)
;
yield
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
yield
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
}
ss
.
setWindowState
(
win2
JSON
.
stringify
(
winState
)
true
)
;
for
(
let
i
=
0
;
i
<
4
;
i
+
+
)
{
let
browser
=
win2
.
gBrowser
.
tabs
[
i
]
.
linkedBrowser
;
yield
ContentTask
.
spawn
(
browser
{
expectedId
:
i
+
1
}
function
*
(
args
)
{
Assert
.
equal
(
docShell
.
getOriginAttributes
(
)
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
args
.
expectedId
"
The
document
has
the
correct
userContextId
"
)
;
}
)
;
}
let
browser
=
win2
.
gBrowser
.
tabs
[
4
]
.
linkedBrowser
;
yield
ContentTask
.
spawn
(
browser
{
expectedId
:
0
}
function
*
(
args
)
{
Assert
.
equal
(
docShell
.
getOriginAttributes
(
)
.
userContextId
args
.
expectedId
"
The
docShell
has
the
correct
userContextId
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
args
.
expectedId
"
The
document
has
the
correct
userContextId
"
)
;
}
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
yield
BrowserTestUtils
.
closeWindow
(
win2
)
;
}
)
;
