"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
add_task
(
async
function
(
)
{
const
testUserContextId
=
2
;
const
testCases
=
[
{
url
:
{
TEST_PATH
}
empty
.
html
crossOriginIsolated
:
false
}
{
url
:
{
TEST_PATH
}
coop_coep
.
html
crossOriginIsolated
:
true
}
]
;
for
(
const
testCase
of
testCases
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
testCase
.
url
{
userContextId
:
testUserContextId
}
)
;
await
promiseBrowserLoaded
(
tab
.
linkedBrowser
)
;
is
(
tab
.
userContextId
testUserContextId
The
tab
was
opened
with
the
expected
userContextId
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
testCase
.
crossOriginIsolated
]
async
expectedCrossOriginIsolated
=
>
{
is
(
content
.
window
.
crossOriginIsolated
expectedCrossOriginIsolated
The
tab
was
opened
in
the
expected
crossOriginIsolated
environment
)
;
}
)
;
let
sessionPromise
=
BrowserTestUtils
.
waitForSessionStoreUpdate
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
sessionPromise
;
let
restoredTab
=
SessionStore
.
undoCloseTab
(
window
0
)
;
await
promiseBrowserLoaded
(
restoredTab
.
linkedBrowser
)
;
is
(
restoredTab
.
userContextId
testUserContextId
The
tab
was
restored
with
the
expected
userContextId
)
;
await
SpecialPowers
.
spawn
(
restoredTab
.
linkedBrowser
[
testCase
.
crossOriginIsolated
]
async
expectedCrossOriginIsolated
=
>
{
is
(
content
.
window
.
crossOriginIsolated
expectedCrossOriginIsolated
The
tab
was
restored
in
the
expected
crossOriginIsolated
environment
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
restoredTab
)
;
}
}
)
;
