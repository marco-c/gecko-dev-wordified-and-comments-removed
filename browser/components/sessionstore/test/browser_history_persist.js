"
use
strict
"
;
add_task
(
async
function
check_history_not_persisted
(
)
{
let
tab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
state
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
ok
(
!
state
.
entries
[
0
]
.
persist
"
Should
have
collected
the
persistence
state
"
)
;
await
promiseRemoveTab
(
tab
)
;
browser
=
null
;
tab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabState
(
tab
state
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
let
sessionHistory
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsISHistory
)
;
is
(
sessionHistory
.
count
1
"
Should
be
a
single
history
entry
"
)
;
is
(
sessionHistory
.
getEntryAtIndex
(
0
false
)
.
URI
.
spec
"
about
:
blank
"
"
Should
be
the
right
URL
"
)
;
}
)
;
browser
.
loadURI
(
"
about
:
robots
"
)
;
await
promiseBrowserLoaded
(
browser
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
let
sessionHistory
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsISHistory
)
;
is
(
sessionHistory
.
count
1
"
Should
be
a
single
history
entry
"
)
;
is
(
sessionHistory
.
getEntryAtIndex
(
0
false
)
.
URI
.
spec
"
about
:
robots
"
"
Should
be
the
right
URL
"
)
;
}
)
;
await
promiseRemoveTab
(
tab
)
;
}
)
;
add_task
(
async
function
check_history_default_persisted
(
)
{
let
tab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
let
state
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
;
delete
state
.
entries
[
0
]
.
persist
;
await
promiseRemoveTab
(
tab
)
;
browser
=
null
;
tab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabState
(
tab
state
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
let
sessionHistory
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsISHistory
)
;
is
(
sessionHistory
.
count
1
"
Should
be
a
single
history
entry
"
)
;
is
(
sessionHistory
.
getEntryAtIndex
(
0
false
)
.
URI
.
spec
"
about
:
blank
"
"
Should
be
the
right
URL
"
)
;
}
)
;
browser
.
loadURI
(
"
about
:
robots
"
)
;
await
promiseBrowserLoaded
(
browser
)
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
let
sessionHistory
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsISHistory
)
;
is
(
sessionHistory
.
count
2
"
Should
be
two
history
entries
"
)
;
is
(
sessionHistory
.
getEntryAtIndex
(
0
false
)
.
URI
.
spec
"
about
:
blank
"
"
Should
be
the
right
URL
"
)
;
is
(
sessionHistory
.
getEntryAtIndex
(
1
false
)
.
URI
.
spec
"
about
:
robots
"
"
Should
be
the
right
URL
"
)
;
}
)
;
await
promiseRemoveTab
(
tab
)
;
}
)
;
