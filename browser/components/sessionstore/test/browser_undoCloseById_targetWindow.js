"
use
strict
"
;
async
function
openWindow
(
url
)
{
let
win
=
await
promiseNewWindowLoaded
(
)
;
let
flags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_REPLACE_HISTORY
;
BrowserTestUtils
.
startLoadingURIString
(
win
.
gBrowser
.
selectedBrowser
url
{
flags
}
)
;
await
promiseBrowserLoaded
(
win
.
gBrowser
.
selectedBrowser
true
url
)
;
return
win
;
}
async
function
closeWindow
(
win
)
{
TestUtils
.
waitForTick
(
)
;
let
sessionStoreUpdated
=
TestUtils
.
topicObserved
(
"
sessionstore
-
closed
-
objects
-
changed
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
sessionStoreUpdated
;
}
function
forgetTabsAndWindows
(
)
{
forgetClosedWindows
(
)
;
while
(
SessionStore
.
getClosedTabCount
(
window
)
)
{
SessionStore
.
forgetClosedTab
(
window
0
)
;
}
}
add_task
(
async
function
test_undoCloseById_with_targetWindow
(
)
{
forgetTabsAndWindows
(
)
;
const
winA
=
window
;
const
winB
=
await
openWindow
(
"
about
:
robots
"
)
;
await
SimpleTest
.
promiseFocus
(
winB
)
;
await
openAndCloseTab
(
winB
"
about
:
mozilla
"
)
;
is
(
SessionStore
.
lastClosedObjectType
"
tab
"
"
The
last
closed
object
is
a
tab
"
)
;
const
closedId
=
SessionStore
.
getClosedTabData
(
winB
)
[
0
]
.
closedId
;
let
tabRestored
=
BrowserTestUtils
.
waitForNewTab
(
winA
.
gBrowser
"
about
:
mozilla
"
)
;
SessionStore
.
undoCloseById
(
closedId
undefined
winA
)
;
await
tabRestored
;
is
(
winA
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
"
about
:
mozilla
"
)
;
is
(
SessionStore
.
getClosedTabData
(
winB
)
.
length
0
"
Record
removed
from
the
source
window
'
s
closed
tab
data
"
)
;
BrowserTestUtils
.
removeTab
(
winA
.
gBrowser
.
selectedTab
)
;
await
closeWindow
(
winB
)
;
}
)
;
add_task
(
async
function
test_undoCloseById_with_nonExistent_targetWindow
(
)
{
forgetTabsAndWindows
(
)
;
await
openAndCloseTab
(
window
"
about
:
mozilla
"
)
;
is
(
SessionStore
.
lastClosedObjectType
"
tab
"
"
The
last
closed
object
is
a
tab
"
)
;
const
closedId
=
SessionStore
.
getClosedTabData
(
window
)
[
0
]
.
closedId
;
const
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
newWin
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
Assert
.
throws
(
(
)
=
>
{
SessionStore
.
undoCloseById
(
closedId
undefined
newWin
)
;
}
/
NS_ERROR_ILLEGAL_VALUE
/
)
;
}
)
;
