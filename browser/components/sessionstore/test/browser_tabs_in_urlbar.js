const
RESTRICT_TOKEN_OPENPAGE
=
"
%
"
;
const
{
PlacesTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
sys
.
mjs
"
)
;
const
{
PlacesUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
)
;
const
{
UrlbarProviderOpenTabs
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarProviderOpenTabs
.
jsm
"
)
;
const
{
UrlbarTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
jsm
"
)
;
var
stateBackup
=
ss
.
getBrowserState
(
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
sessionstore
.
restore_on_demand
"
true
]
[
"
browser
.
sessionstore
.
restore_tabs_lazily
"
false
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
ss
.
setBrowserState
(
stateBackup
)
;
}
)
;
info
(
"
Waiting
for
the
Places
DB
to
be
initialized
"
)
;
await
PlacesUtils
.
promiseLargeCacheDBConnection
(
)
;
await
UrlbarProviderOpenTabs
.
promiseDBPopulated
;
}
)
;
add_task
(
async
function
test_unrestored_tabs_listed
(
)
{
const
state
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
1
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
2
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
3
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
http
:
/
/
example
.
org
/
#
4
"
triggeringPrincipal_base64
}
]
}
]
selected
:
1
}
]
}
;
const
tabsForEnsure
=
new
Set
(
)
;
state
.
windows
[
0
]
.
tabs
.
forEach
(
function
(
tab
)
{
tabsForEnsure
.
add
(
tab
.
entries
[
0
]
.
url
)
;
}
)
;
let
tabsRestoring
=
0
;
let
tabsRestored
=
0
;
await
new
Promise
(
resolve
=
>
{
function
handleEvent
(
aEvent
)
{
if
(
aEvent
.
type
=
=
"
SSTabRestoring
"
)
{
tabsRestoring
+
+
;
}
else
{
tabsRestored
+
+
;
}
if
(
tabsRestoring
<
state
.
windows
[
0
]
.
tabs
.
length
|
|
tabsRestored
<
1
)
{
return
;
}
gBrowser
.
tabContainer
.
removeEventListener
(
"
SSTabRestoring
"
handleEvent
true
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
SSTabRestored
"
handleEvent
true
)
;
executeSoon
(
resolve
)
;
}
gBrowser
.
tabContainer
.
addEventListener
(
"
SSTabRestoring
"
handleEvent
true
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
SSTabRestored
"
handleEvent
true
)
;
ss
.
setBrowserState
(
JSON
.
stringify
(
state
)
)
;
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
tabsForEnsure
.
delete
(
gBrowser
.
currentURI
.
spec
)
;
info
(
"
Searching
open
pages
.
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
RESTRICT_TOKEN_OPENPAGE
}
)
;
const
total
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
info
(
Found
{
total
}
matches
)
;
for
(
let
i
=
0
;
i
<
total
;
i
+
+
)
{
const
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
if
(
result
.
heuristic
)
{
info
(
"
Skip
heuristic
match
"
)
;
continue
;
}
const
url
=
result
.
url
;
Assert
.
ok
(
tabsForEnsure
.
has
(
url
)
Should
have
the
found
result
'
{
url
}
'
in
the
expected
list
of
entries
)
;
tabsForEnsure
.
delete
(
url
)
;
}
Assert
.
equal
(
tabsForEnsure
.
size
0
"
Should
have
found
all
the
tabs
"
)
;
}
)
;
