"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
async
function
test_formdata
(
)
{
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
"
+
"
sessionstore
/
test
/
browser_formdata_sample
.
html
"
;
const
OUTER_VALUE
=
"
browser_formdata_
"
+
Math
.
random
(
)
;
const
INNER_VALUE
=
"
browser_formdata_
"
+
Math
.
random
(
)
;
async
function
createAndRemoveTab
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
setInputValue
(
browser
{
id
:
"
txt
"
value
:
OUTER_VALUE
}
)
;
await
setInputValue
(
browser
{
id
:
"
txt
"
value
:
INNER_VALUE
frame
:
0
}
)
;
await
promiseRemoveTab
(
tab
)
;
}
await
createAndRemoveTab
(
)
;
let
[
{
state
:
{
formdata
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
formdata
.
id
.
txt
OUTER_VALUE
"
outer
value
is
correct
"
)
;
is
(
formdata
.
children
[
0
]
.
id
.
txt
INNER_VALUE
"
inner
value
is
correct
"
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
privacy_level
"
1
)
;
await
createAndRemoveTab
(
)
;
[
{
state
:
{
formdata
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
formdata
.
id
.
txt
OUTER_VALUE
"
outer
value
is
correct
"
)
;
ok
(
!
formdata
.
children
"
inner
value
was
*
not
*
stored
"
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
sessionstore
.
privacy_level
"
2
)
;
await
createAndRemoveTab
(
)
;
[
{
state
:
{
formdata
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
ok
(
!
formdata
"
form
data
has
*
not
*
been
stored
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
privacy_level
"
)
;
}
)
;
add_task
(
async
function
test_url_check
(
)
{
const
URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
input
%
20id
=
input
>
"
;
const
VALUE
=
"
value
-
"
+
Math
.
random
(
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
function
restoreStateWithURL
(
url
)
{
let
state
=
{
entries
:
[
{
url
:
URL
triggeringPrincipal_base64
}
]
formdata
:
{
id
:
{
input
:
VALUE
}
}
}
;
if
(
url
)
{
state
.
formdata
.
url
=
url
;
}
return
promiseTabState
(
tab
state
)
.
then
(
(
)
=
>
getInputValue
(
browser
"
input
"
)
)
;
}
is
(
(
await
restoreStateWithURL
(
URL
)
)
VALUE
"
form
data
restored
"
)
;
is
(
(
await
restoreStateWithURL
(
URL
+
"
?
"
)
)
"
"
"
form
data
not
restored
"
)
;
is
(
(
await
restoreStateWithURL
(
)
)
"
"
"
form
data
not
restored
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_nested
(
)
{
const
URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
iframe
src
=
'
data
:
text
/
html
;
charset
=
utf
-
8
"
+
"
<
input
autofocus
=
true
>
'
/
>
"
;
const
FORM_DATA
=
{
children
:
[
{
xpath
:
{
"
/
xhtml
:
html
/
xhtml
:
body
/
xhtml
:
input
"
:
"
M
"
}
url
:
"
data
:
text
/
html
;
charset
=
utf
-
8
<
input
%
20autofocus
=
true
>
"
}
]
}
;
let
tab
=
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
sendMessage
(
browser
"
ss
-
test
:
sendKeyEvent
"
{
key
:
"
m
"
frame
:
0
}
)
;
await
promiseRemoveTab
(
tab
)
;
let
[
{
state
:
{
formdata
}
}
]
=
JSON
.
parse
(
ss
.
getClosedTabData
(
window
)
)
;
is
(
JSON
.
stringify
(
formdata
)
JSON
.
stringify
(
FORM_DATA
)
"
formdata
for
iframe
stored
correctly
"
)
;
tab
=
ss
.
undoCloseTab
(
window
0
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabRestored
(
tab
)
;
await
TabStateFlusher
.
flush
(
browser
)
;
(
{
formdata
}
=
JSON
.
parse
(
ss
.
getTabState
(
tab
)
)
)
;
is
(
JSON
.
stringify
(
formdata
)
JSON
.
stringify
(
FORM_DATA
)
"
formdata
for
iframe
restored
correctly
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_design_mode
(
)
{
const
URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
h1
>
mozilla
<
/
h1
>
"
+
"
<
script
>
document
.
designMode
=
'
on
'
<
/
script
>
"
;
let
tab
=
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
URL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
await
sendMessage
(
browser
"
ss
-
test
:
sendKeyEvent
"
{
key
:
"
m
"
}
)
;
await
promiseRemoveTab
(
tab
)
;
tab
=
ss
.
undoCloseTab
(
window
0
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabRestored
(
tab
)
;
let
html
=
await
getInnerHTML
(
browser
)
;
let
expected
=
"
<
h1
>
Mmozilla
<
/
h1
>
<
script
>
document
.
designMode
=
'
on
'
<
/
script
>
"
;
is
(
html
expected
"
editable
document
has
been
restored
correctly
"
)
;
await
promiseRemoveTab
(
tab
)
;
tab
=
ss
.
undoCloseTab
(
window
0
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabRestored
(
tab
)
;
html
=
await
getInnerHTML
(
browser
)
;
expected
=
"
<
h1
>
Mmozilla
<
/
h1
>
<
script
>
document
.
designMode
=
'
on
'
<
/
script
>
"
;
is
(
html
expected
"
editable
document
has
been
restored
correctly
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
function
getInputValue
(
browser
id
)
{
return
sendMessage
(
browser
"
ss
-
test
:
getInputValue
"
{
id
}
)
;
}
function
setInputValue
(
browser
data
)
{
return
sendMessage
(
browser
"
ss
-
test
:
setInputValue
"
data
)
;
}
function
getInnerHTML
(
browser
)
{
return
sendMessage
(
browser
"
ss
-
test
:
getInnerHTML
"
{
selector
:
"
body
"
}
)
;
}
