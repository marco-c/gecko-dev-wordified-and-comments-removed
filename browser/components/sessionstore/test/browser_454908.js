"
use
strict
"
;
if
(
gFissionBrowser
)
{
addCoopTask
(
"
browser_454908_sample
.
html
"
test_dont_save_passwords
HTTPSROOT
)
;
}
addNonCoopTask
(
"
browser_454908_sample
.
html
"
test_dont_save_passwords
ROOT
)
;
addNonCoopTask
(
"
browser_454908_sample
.
html
"
test_dont_save_passwords
HTTPROOT
)
;
addNonCoopTask
(
"
browser_454908_sample
.
html
"
test_dont_save_passwords
HTTPSROOT
)
;
const
PASS
=
"
pwd
-
"
+
Math
.
random
(
)
;
async
function
test_dont_save_passwords
(
aURL
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
sessionstore
.
privacy_level
"
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
aURL
)
;
let
browser
=
tab
.
linkedBrowser
;
await
promiseBrowserLoaded
(
browser
)
;
let
usernameValue
=
"
User
"
+
Math
.
random
(
)
;
await
setPropertyOfFormField
(
browser
"
#
username
"
"
value
"
usernameValue
)
;
await
setPropertyOfFormField
(
browser
"
#
passwd
"
"
value
"
PASS
)
;
await
promiseRemoveTabAndSessionState
(
tab
)
;
tab
=
ss
.
undoCloseTab
(
window
0
)
;
browser
=
tab
.
linkedBrowser
;
await
promiseTabRestored
(
tab
)
;
let
username
=
await
getPropertyOfFormField
(
browser
"
#
username
"
"
value
"
)
;
is
(
username
usernameValue
"
username
was
saved
/
restored
"
)
;
let
passwd
=
await
getPropertyOfFormField
(
browser
"
#
passwd
"
"
value
"
)
;
is
(
passwd
"
"
"
password
wasn
'
t
saved
/
restored
"
)
;
await
forceSaveState
(
)
;
await
promiseForEachSessionRestoreFile
(
(
state
key
)
=
>
ok
(
!
state
.
includes
(
PASS
)
"
password
has
not
been
written
to
file
"
+
key
)
)
;
gBrowser
.
removeTab
(
tab
)
;
}
