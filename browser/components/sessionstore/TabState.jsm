"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TabState
"
]
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivacyFilter
"
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
PrivacyFilter
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TabStateCache
"
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateCache
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TabAttributes
"
"
resource
:
/
/
/
modules
/
sessionstore
/
TabAttributes
.
jsm
"
)
;
var
TabState
=
Object
.
freeze
(
{
update
(
browser
data
)
{
TabStateInternal
.
update
(
browser
data
)
;
}
collect
(
tab
extData
)
{
return
TabStateInternal
.
collect
(
tab
extData
)
;
}
clone
(
tab
extData
)
{
return
TabStateInternal
.
clone
(
tab
extData
)
;
}
copyFromCache
(
browser
tabData
options
)
{
TabStateInternal
.
copyFromCache
(
browser
tabData
options
)
;
}
}
)
;
var
TabStateInternal
=
{
update
(
browser
{
data
}
)
{
TabStateCache
.
update
(
browser
data
)
;
}
collect
(
tab
extData
)
{
return
this
.
_collectBaseTabData
(
tab
{
extData
}
)
;
}
clone
(
tab
extData
)
{
return
this
.
_collectBaseTabData
(
tab
{
extData
includePrivateData
:
true
}
)
;
}
_collectBaseTabData
(
tab
options
)
{
let
tabData
=
{
entries
:
[
]
lastAccessed
:
tab
.
lastAccessed
}
;
let
browser
=
tab
.
linkedBrowser
;
if
(
tab
.
pinned
)
{
tabData
.
pinned
=
true
;
}
tabData
.
hidden
=
tab
.
hidden
;
if
(
browser
.
audioMuted
)
{
tabData
.
muted
=
true
;
tabData
.
muteReason
=
tab
.
muteReason
;
}
tabData
.
attributes
=
TabAttributes
.
get
(
tab
)
;
if
(
options
.
extData
)
{
tabData
.
extData
=
options
.
extData
;
}
this
.
copyFromCache
(
browser
tabData
options
)
;
if
(
!
(
"
image
"
in
tabData
)
)
{
let
tabbrowser
=
tab
.
ownerGlobal
.
gBrowser
;
tabData
.
image
=
tabbrowser
.
getIcon
(
tab
)
;
}
if
(
!
(
"
userTypedValue
"
in
tabData
)
&
&
browser
.
userTypedValue
)
{
tabData
.
userTypedValue
=
browser
.
userTypedValue
;
tabData
.
userTypedClear
=
browser
.
didStartLoadSinceLastUserTyping
(
)
?
1
:
0
;
}
return
tabData
;
}
copyFromCache
(
browser
tabData
options
=
{
}
)
{
let
data
=
TabStateCache
.
get
(
browser
)
;
if
(
!
data
)
{
return
;
}
let
includePrivateData
=
options
&
&
options
.
includePrivateData
;
for
(
let
key
of
Object
.
keys
(
data
)
)
{
let
value
=
data
[
key
]
;
if
(
!
includePrivateData
)
{
if
(
key
=
=
=
"
storage
"
)
{
value
=
PrivacyFilter
.
filterSessionStorageData
(
value
)
;
}
else
if
(
key
=
=
=
"
formdata
"
)
{
value
=
PrivacyFilter
.
filterFormData
(
value
)
;
}
}
if
(
key
=
=
=
"
history
"
)
{
tabData
.
entries
=
[
.
.
.
value
.
entries
]
;
if
(
value
.
hasOwnProperty
(
"
userContextId
"
)
)
{
tabData
.
userContextId
=
value
.
userContextId
;
}
if
(
value
.
hasOwnProperty
(
"
index
"
)
)
{
tabData
.
index
=
value
.
index
;
}
if
(
value
.
hasOwnProperty
(
"
requestedIndex
"
)
)
{
tabData
.
requestedIndex
=
value
.
requestedIndex
;
}
}
else
{
tabData
[
key
]
=
value
;
}
}
}
}
;
