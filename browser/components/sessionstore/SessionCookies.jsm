"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SessionCookies
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivacyLevel
"
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
PrivacyLevel
.
jsm
"
)
;
const
MAX_EXPIRY
=
Number
.
MAX_SAFE_INTEGER
;
var
SessionCookies
=
Object
.
freeze
(
{
collect
(
)
{
return
SessionCookiesInternal
.
collect
(
)
;
}
restore
(
cookies
)
{
SessionCookiesInternal
.
restore
(
cookies
)
;
}
}
)
;
var
SessionCookiesInternal
=
{
_initialized
:
false
collect
(
)
{
this
.
_ensureInitialized
(
)
;
return
CookieStore
.
toArray
(
)
;
}
restore
(
cookies
)
{
for
(
let
cookie
of
cookies
)
{
let
expiry
=
"
expiry
"
in
cookie
?
cookie
.
expiry
:
MAX_EXPIRY
;
let
cookieObj
=
{
host
:
cookie
.
host
path
:
cookie
.
path
|
|
"
"
name
:
cookie
.
name
|
|
"
"
}
;
let
originAttributes
=
cookie
.
originAttributes
|
|
{
}
;
let
exists
=
false
;
try
{
exists
=
Services
.
cookies
.
cookieExists
(
cookieObj
originAttributes
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
nsCookieService
:
:
CookieExists
failed
with
error
'
{
ex
}
'
for
'
{
JSON
.
stringify
(
cookie
)
}
'
.
)
;
}
if
(
!
exists
)
{
try
{
Services
.
cookies
.
add
(
cookie
.
host
cookie
.
path
|
|
"
"
cookie
.
name
|
|
"
"
cookie
.
value
!
!
cookie
.
secure
!
!
cookie
.
httponly
true
expiry
originAttributes
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
nsCookieService
:
:
Add
failed
with
error
'
{
ex
}
'
for
cookie
{
JSON
.
stringify
(
cookie
)
}
.
)
;
}
}
}
}
observe
(
subject
topic
data
)
{
switch
(
data
)
{
case
"
added
"
:
this
.
_addCookie
(
subject
)
;
break
;
case
"
changed
"
:
this
.
_updateCookie
(
subject
)
;
break
;
case
"
deleted
"
:
this
.
_removeCookie
(
subject
)
;
break
;
case
"
cleared
"
:
CookieStore
.
clear
(
)
;
break
;
case
"
batch
-
deleted
"
:
this
.
_removeCookies
(
subject
)
;
break
;
default
:
throw
new
Error
(
"
Unhandled
session
-
cookie
-
changed
notification
.
"
)
;
}
}
_ensureInitialized
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
_reloadCookies
(
)
;
this
.
_initialized
=
true
;
Services
.
obs
.
addObserver
(
this
"
session
-
cookie
-
changed
"
)
;
Services
.
prefs
.
addObserver
(
"
browser
.
sessionstore
.
privacy_level
"
(
)
=
>
{
this
.
_reloadCookies
(
)
;
}
)
;
}
_addCookie
(
cookie
)
{
cookie
.
QueryInterface
(
Ci
.
nsICookie2
)
;
if
(
cookie
.
isSession
&
&
PrivacyLevel
.
canSave
(
cookie
.
isSecure
)
)
{
CookieStore
.
add
(
cookie
)
;
}
}
_updateCookie
(
cookie
)
{
cookie
.
QueryInterface
(
Ci
.
nsICookie2
)
;
if
(
cookie
.
isSession
&
&
PrivacyLevel
.
canSave
(
cookie
.
isSecure
)
)
{
CookieStore
.
add
(
cookie
)
;
}
else
{
CookieStore
.
delete
(
cookie
)
;
}
}
_removeCookie
(
cookie
)
{
cookie
.
QueryInterface
(
Ci
.
nsICookie2
)
;
if
(
cookie
.
isSession
)
{
CookieStore
.
delete
(
cookie
)
;
}
}
_removeCookies
(
cookies
)
{
for
(
let
i
=
0
;
i
<
cookies
.
length
;
i
+
+
)
{
this
.
_removeCookie
(
cookies
.
queryElementAt
(
i
Ci
.
nsICookie2
)
)
;
}
}
_reloadCookies
(
)
{
CookieStore
.
clear
(
)
;
if
(
!
PrivacyLevel
.
canSave
(
false
)
)
{
return
;
}
for
(
let
cookie
of
Services
.
cookies
.
sessionEnumerator
)
{
this
.
_addCookie
(
cookie
)
;
}
}
}
;
var
CookieStore
=
{
_entries
:
new
Map
(
)
add
(
cookie
)
{
let
jscookie
=
{
host
:
cookie
.
host
value
:
cookie
.
value
}
;
if
(
cookie
.
path
)
{
jscookie
.
path
=
cookie
.
path
;
}
if
(
cookie
.
name
)
{
jscookie
.
name
=
cookie
.
name
;
}
if
(
cookie
.
isSecure
)
{
jscookie
.
secure
=
true
;
}
if
(
cookie
.
isHttpOnly
)
{
jscookie
.
httponly
=
true
;
}
if
(
cookie
.
expiry
<
MAX_EXPIRY
)
{
jscookie
.
expiry
=
cookie
.
expiry
;
}
if
(
cookie
.
originAttributes
)
{
jscookie
.
originAttributes
=
cookie
.
originAttributes
;
}
this
.
_entries
.
set
(
this
.
_getKeyForCookie
(
cookie
)
jscookie
)
;
}
delete
(
cookie
)
{
this
.
_entries
.
delete
(
this
.
_getKeyForCookie
(
cookie
)
)
;
}
clear
(
)
{
this
.
_entries
.
clear
(
)
;
}
toArray
(
)
{
return
[
.
.
.
this
.
_entries
.
values
(
)
]
;
}
_getKeyForCookie
(
cookie
)
{
return
JSON
.
stringify
(
{
host
:
cookie
.
host
name
:
cookie
.
name
path
:
cookie
.
path
attr
:
ChromeUtils
.
originAttributesToSuffix
(
cookie
.
originAttributes
)
}
)
;
}
}
;
