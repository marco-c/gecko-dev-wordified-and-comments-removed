"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
SessionHistory
"
]
;
const
Cu
=
Components
.
utils
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Utils
"
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
Utils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
uuidGenerator
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
function
debug
(
msg
)
{
Services
.
console
.
logStringMessage
(
"
SessionHistory
:
"
+
msg
)
;
}
this
.
SessionHistory
=
Object
.
freeze
(
{
isEmpty
:
function
(
docShell
)
{
return
SessionHistoryInternal
.
isEmpty
(
docShell
)
;
}
collect
:
function
(
docShell
aFromIdx
=
-
1
)
{
return
SessionHistoryInternal
.
collect
(
docShell
aFromIdx
)
;
}
restore
:
function
(
docShell
tabData
)
{
SessionHistoryInternal
.
restore
(
docShell
tabData
)
;
}
}
)
;
var
SessionHistoryInternal
=
{
_docshellUUIDMap
:
new
Map
(
)
isEmpty
:
function
(
docShell
)
{
let
webNavigation
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
let
history
=
webNavigation
.
sessionHistory
;
if
(
!
webNavigation
.
currentURI
)
{
return
true
;
}
let
uri
=
webNavigation
.
currentURI
.
spec
;
return
uri
=
=
"
about
:
blank
"
&
&
history
.
count
=
=
0
;
}
collect
:
function
(
docShell
aFromIdx
=
-
1
)
{
let
loadContext
=
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
let
webNavigation
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
let
history
=
webNavigation
.
sessionHistory
.
QueryInterface
(
Ci
.
nsISHistoryInternal
)
;
let
ihistory
=
history
.
QueryInterface
(
Ci
.
nsISHistory
)
;
let
data
=
{
entries
:
[
]
userContextId
:
loadContext
.
originAttributes
.
userContextId
}
;
if
(
history
&
&
history
.
count
>
0
)
{
for
(
let
txn
=
history
.
rootTransaction
;
txn
;
txn
=
txn
.
next
)
{
let
entry
=
this
.
serializeEntry
(
txn
.
sHEntry
)
;
entry
.
persist
=
txn
.
persist
;
data
.
entries
.
push
(
entry
)
;
}
data
.
index
=
Math
.
min
(
history
.
index
+
1
data
.
entries
.
length
)
;
}
if
(
data
.
entries
.
length
=
=
0
)
{
let
uri
=
webNavigation
.
currentURI
.
spec
;
let
body
=
webNavigation
.
document
.
body
;
if
(
uri
!
=
"
about
:
blank
"
|
|
(
body
&
&
body
.
hasChildNodes
(
)
)
)
{
data
.
entries
.
push
(
{
url
:
uri
triggeringPrincipal_base64
:
Utils
.
SERIALIZED_SYSTEMPRINCIPAL
}
)
;
data
.
index
=
1
;
}
}
if
(
aFromIdx
>
-
1
)
{
data
.
entries
.
splice
(
0
aFromIdx
+
1
)
;
}
data
.
index
+
=
ihistory
.
globalIndexOffset
;
data
.
fromIdx
=
aFromIdx
+
ihistory
.
globalIndexOffset
;
if
(
ihistory
.
globalIndexOffset
+
ihistory
.
count
<
ihistory
.
globalCount
)
{
data
.
toIdx
=
data
.
fromIdx
+
ihistory
.
count
;
}
return
data
;
}
serializeEntry
:
function
(
shEntry
)
{
let
entry
=
{
url
:
shEntry
.
URI
.
spec
}
;
if
(
shEntry
.
title
&
&
shEntry
.
title
!
=
entry
.
url
)
{
entry
.
title
=
shEntry
.
title
;
}
if
(
shEntry
.
isSubFrame
)
{
entry
.
subframe
=
true
;
}
entry
.
charset
=
shEntry
.
URI
.
originCharset
;
let
cacheKey
=
shEntry
.
cacheKey
;
if
(
cacheKey
&
&
cacheKey
instanceof
Ci
.
nsISupportsPRUint32
&
&
cacheKey
.
data
!
=
0
)
{
entry
.
cacheKey
=
cacheKey
.
data
;
}
entry
.
ID
=
shEntry
.
ID
;
entry
.
docshellUUID
=
shEntry
.
docshellID
.
toString
(
)
;
if
(
shEntry
.
referrerURI
)
{
entry
.
referrer
=
shEntry
.
referrerURI
.
spec
;
entry
.
referrerPolicy
=
shEntry
.
referrerPolicy
;
}
if
(
shEntry
.
originalURI
)
{
entry
.
originalURI
=
shEntry
.
originalURI
.
spec
;
}
if
(
shEntry
.
loadReplace
)
{
entry
.
loadReplace
=
shEntry
.
loadReplace
;
}
if
(
shEntry
.
srcdocData
)
entry
.
srcdocData
=
shEntry
.
srcdocData
;
if
(
shEntry
.
isSrcdocEntry
)
entry
.
isSrcdocEntry
=
shEntry
.
isSrcdocEntry
;
if
(
shEntry
.
baseURI
)
entry
.
baseURI
=
shEntry
.
baseURI
.
spec
;
if
(
shEntry
.
contentType
)
entry
.
contentType
=
shEntry
.
contentType
;
if
(
shEntry
.
scrollRestorationIsManual
)
{
entry
.
scrollRestorationIsManual
=
true
;
}
else
{
let
x
=
{
}
y
=
{
}
;
shEntry
.
getScrollPosition
(
x
y
)
;
if
(
x
.
value
!
=
0
|
|
y
.
value
!
=
0
)
entry
.
scroll
=
x
.
value
+
"
"
+
y
.
value
;
}
if
(
shEntry
.
principalToInherit
)
{
try
{
let
principalToInherit
=
Utils
.
serializePrincipal
(
shEntry
.
principalToInherit
)
;
if
(
principalToInherit
)
{
entry
.
triggeringPrincipal_b64
=
principalToInherit
;
entry
.
principalToInherit_base64
=
principalToInherit
;
}
}
catch
(
e
)
{
debug
(
e
)
;
}
}
if
(
shEntry
.
triggeringPrincipal
)
{
try
{
let
triggeringPrincipal
=
Utils
.
serializePrincipal
(
shEntry
.
triggeringPrincipal
)
;
if
(
triggeringPrincipal
)
{
entry
.
triggeringPrincipal_base64
=
triggeringPrincipal
;
}
}
catch
(
e
)
{
debug
(
e
)
;
}
}
entry
.
docIdentifier
=
shEntry
.
BFCacheEntry
.
ID
;
if
(
shEntry
.
stateData
!
=
null
)
{
entry
.
structuredCloneState
=
shEntry
.
stateData
.
getDataAsBase64
(
)
;
entry
.
structuredCloneVersion
=
shEntry
.
stateData
.
formatVersion
;
}
if
(
!
(
shEntry
instanceof
Ci
.
nsISHContainer
)
)
{
return
entry
;
}
if
(
shEntry
.
childCount
>
0
&
&
!
shEntry
.
hasDynamicallyAddedChild
(
)
)
{
let
children
=
[
]
;
for
(
let
i
=
0
;
i
<
shEntry
.
childCount
;
i
+
+
)
{
let
child
=
shEntry
.
GetChildAt
(
i
)
;
if
(
child
)
{
if
(
child
.
URI
.
schemeIs
(
"
wyciwyg
"
)
)
{
children
.
length
=
0
;
break
;
}
children
.
push
(
this
.
serializeEntry
(
child
)
)
;
}
}
if
(
children
.
length
)
{
entry
.
children
=
children
;
}
}
return
entry
;
}
restore
:
function
(
docShell
tabData
)
{
let
webNavigation
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
let
history
=
webNavigation
.
sessionHistory
;
if
(
history
.
count
>
0
)
{
history
.
PurgeHistory
(
history
.
count
)
;
}
history
.
QueryInterface
(
Ci
.
nsISHistoryInternal
)
;
let
idMap
=
{
used
:
{
}
}
;
let
docIdentMap
=
{
}
;
for
(
let
i
=
0
;
i
<
tabData
.
entries
.
length
;
i
+
+
)
{
let
entry
=
tabData
.
entries
[
i
]
;
if
(
!
entry
.
url
)
continue
;
let
persist
=
"
persist
"
in
entry
?
entry
.
persist
:
true
;
history
.
addEntry
(
this
.
deserializeEntry
(
entry
idMap
docIdentMap
)
persist
)
;
}
let
index
=
tabData
.
index
-
1
;
if
(
index
<
history
.
count
&
&
history
.
index
!
=
index
)
{
history
.
getEntryAtIndex
(
index
true
)
;
}
}
deserializeEntry
:
function
(
entry
idMap
docIdentMap
)
{
var
shEntry
=
Cc
[
"
mozilla
.
org
/
browser
/
session
-
history
-
entry
;
1
"
]
.
createInstance
(
Ci
.
nsISHEntry
)
;
shEntry
.
setURI
(
Utils
.
makeURI
(
entry
.
url
entry
.
charset
)
)
;
shEntry
.
setTitle
(
entry
.
title
|
|
entry
.
url
)
;
if
(
entry
.
subframe
)
shEntry
.
setIsSubFrame
(
entry
.
subframe
|
|
false
)
;
shEntry
.
loadType
=
Ci
.
nsIDocShellLoadInfo
.
loadHistory
;
if
(
entry
.
contentType
)
shEntry
.
contentType
=
entry
.
contentType
;
if
(
entry
.
referrer
)
{
shEntry
.
referrerURI
=
Utils
.
makeURI
(
entry
.
referrer
)
;
shEntry
.
referrerPolicy
=
entry
.
referrerPolicy
;
}
if
(
entry
.
originalURI
)
{
shEntry
.
originalURI
=
Utils
.
makeURI
(
entry
.
originalURI
)
;
}
if
(
entry
.
loadReplace
)
{
shEntry
.
loadReplace
=
entry
.
loadReplace
;
}
if
(
entry
.
isSrcdocEntry
)
shEntry
.
srcdocData
=
entry
.
srcdocData
;
if
(
entry
.
baseURI
)
shEntry
.
baseURI
=
Utils
.
makeURI
(
entry
.
baseURI
)
;
if
(
entry
.
cacheKey
)
{
var
cacheKey
=
Cc
[
"
mozilla
.
org
/
supports
-
PRUint32
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRUint32
)
;
cacheKey
.
data
=
entry
.
cacheKey
;
shEntry
.
cacheKey
=
cacheKey
;
}
if
(
entry
.
ID
)
{
var
id
=
idMap
[
entry
.
ID
]
|
|
0
;
if
(
!
id
)
{
for
(
id
=
Date
.
now
(
)
;
id
in
idMap
.
used
;
id
+
+
)
;
idMap
[
entry
.
ID
]
=
id
;
idMap
.
used
[
id
]
=
true
;
}
shEntry
.
ID
=
id
;
}
if
(
entry
.
docshellID
)
{
if
(
!
this
.
_docshellUUIDMap
.
has
(
entry
.
docshellID
)
)
{
this
.
_docshellUUIDMap
.
set
(
entry
.
docshellID
uuidGenerator
.
generateUUID
(
)
.
toString
(
)
)
;
}
entry
.
docshellUUID
=
this
.
_docshellUUIDMap
.
get
(
entry
.
docshellID
)
;
delete
entry
.
docshellID
;
}
if
(
entry
.
docshellUUID
)
{
shEntry
.
docshellID
=
Components
.
ID
(
entry
.
docshellUUID
)
;
}
if
(
entry
.
structuredCloneState
&
&
entry
.
structuredCloneVersion
)
{
shEntry
.
stateData
=
Cc
[
"
mozilla
.
org
/
docshell
/
structured
-
clone
-
container
;
1
"
]
.
createInstance
(
Ci
.
nsIStructuredCloneContainer
)
;
shEntry
.
stateData
.
initFromBase64
(
entry
.
structuredCloneState
entry
.
structuredCloneVersion
)
;
}
if
(
entry
.
scrollRestorationIsManual
)
{
shEntry
.
scrollRestorationIsManual
=
true
;
}
else
if
(
entry
.
scroll
)
{
var
scrollPos
=
(
entry
.
scroll
|
|
"
0
0
"
)
.
split
(
"
"
)
;
scrollPos
=
[
parseInt
(
scrollPos
[
0
]
)
|
|
0
parseInt
(
scrollPos
[
1
]
)
|
|
0
]
;
shEntry
.
setScrollPosition
(
scrollPos
[
0
]
scrollPos
[
1
]
)
;
}
let
childDocIdents
=
{
}
;
if
(
entry
.
docIdentifier
)
{
let
matchingEntry
=
docIdentMap
[
entry
.
docIdentifier
]
;
if
(
!
matchingEntry
)
{
matchingEntry
=
{
shEntry
:
shEntry
childDocIdents
:
childDocIdents
}
;
docIdentMap
[
entry
.
docIdentifier
]
=
matchingEntry
;
}
else
{
shEntry
.
adoptBFCacheEntry
(
matchingEntry
.
shEntry
)
;
childDocIdents
=
matchingEntry
.
childDocIdents
;
}
}
if
(
entry
.
triggeringPrincipal_base64
|
|
entry
.
principalToInherit_base64
)
{
if
(
entry
.
triggeringPrincipal_base64
)
{
shEntry
.
triggeringPrincipal
=
Utils
.
deserializePrincipal
(
entry
.
triggeringPrincipal_base64
)
;
}
if
(
entry
.
principalToInherit_base64
)
{
shEntry
.
principalToInherit
=
Utils
.
deserializePrincipal
(
entry
.
principalToInherit_base64
)
;
}
}
else
if
(
entry
.
triggeringPrincipal_b64
)
{
shEntry
.
triggeringPrincipal
=
Utils
.
deserializePrincipal
(
entry
.
triggeringPrincipal_b64
)
;
shEntry
.
principalToInherit
=
shEntry
.
triggeringPrincipal
;
}
if
(
entry
.
children
&
&
shEntry
instanceof
Ci
.
nsISHContainer
)
{
for
(
var
i
=
0
;
i
<
entry
.
children
.
length
;
i
+
+
)
{
if
(
!
entry
.
children
[
i
]
.
url
)
continue
;
shEntry
.
AddChild
(
this
.
deserializeEntry
(
entry
.
children
[
i
]
idMap
childDocIdents
)
i
)
;
}
}
return
shEntry
;
}
}
;
