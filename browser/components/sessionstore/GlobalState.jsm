"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
GlobalState
"
]
;
const
EXPORTED_METHODS
=
[
"
getState
"
"
clear
"
"
get
"
"
set
"
"
delete
"
"
setFromState
"
]
;
function
GlobalState
(
)
{
let
internal
=
new
GlobalStateInternal
(
)
;
let
external
=
{
}
;
for
(
let
method
of
EXPORTED_METHODS
)
{
external
[
method
]
=
internal
[
method
]
.
bind
(
internal
)
;
}
return
Object
.
freeze
(
external
)
;
}
function
GlobalStateInternal
(
)
{
this
.
state
=
{
}
;
}
GlobalStateInternal
.
prototype
=
{
getState
(
)
{
return
this
.
state
;
}
clear
(
)
{
this
.
state
=
{
}
;
}
get
(
aKey
)
{
return
this
.
state
[
aKey
]
|
|
"
"
;
}
set
(
aKey
aStringValue
)
{
this
.
state
[
aKey
]
=
aStringValue
;
}
delete
(
aKey
)
{
delete
this
.
state
[
aKey
]
;
}
setFromState
(
aState
)
{
this
.
state
=
(
aState
&
&
aState
.
global
)
|
|
{
}
;
}
}
;
