this
.
EXPORTED_SYMBOLS
=
[
"
RecentlyClosedTabsAndWindowsMenuUtils
"
]
;
const
kNSXUL
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
var
Ci
=
Components
.
interfaces
;
var
Cc
=
Components
.
classes
;
var
Cr
=
Components
.
results
;
var
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PluralForm
"
"
resource
:
/
/
gre
/
modules
/
PluralForm
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SessionStore
"
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
)
;
var
navigatorBundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
this
.
RecentlyClosedTabsAndWindowsMenuUtils
=
{
getTabsFragment
(
aWindow
aTagName
aPrefixRestoreAll
=
false
aRestoreAllLabel
=
"
menuRestoreAllTabs
.
label
"
)
{
let
doc
=
aWindow
.
document
;
let
fragment
=
doc
.
createDocumentFragment
(
)
;
if
(
SessionStore
.
getClosedTabCount
(
aWindow
)
!
=
0
)
{
let
closedTabs
=
SessionStore
.
getClosedTabData
(
aWindow
false
)
;
for
(
let
i
=
0
;
i
<
closedTabs
.
length
;
i
+
+
)
{
createEntry
(
aTagName
false
i
closedTabs
[
i
]
doc
closedTabs
[
i
]
.
title
fragment
)
;
}
createRestoreAllEntry
(
doc
fragment
aPrefixRestoreAll
false
aRestoreAllLabel
closedTabs
.
length
aTagName
)
}
return
fragment
;
}
getWindowsFragment
(
aWindow
aTagName
aPrefixRestoreAll
=
false
aRestoreAllLabel
=
"
menuRestoreAllWindows
.
label
"
)
{
let
closedWindowData
=
SessionStore
.
getClosedWindowData
(
false
)
;
let
doc
=
aWindow
.
document
;
let
fragment
=
doc
.
createDocumentFragment
(
)
;
if
(
closedWindowData
.
length
!
=
0
)
{
let
menuLabelString
=
navigatorBundle
.
GetStringFromName
(
"
menuUndoCloseWindowLabel
"
)
;
let
menuLabelStringSingleTab
=
navigatorBundle
.
GetStringFromName
(
"
menuUndoCloseWindowSingleTabLabel
"
)
;
for
(
let
i
=
0
;
i
<
closedWindowData
.
length
;
i
+
+
)
{
let
undoItem
=
closedWindowData
[
i
]
;
let
otherTabsCount
=
undoItem
.
tabs
.
length
-
1
;
let
label
=
(
otherTabsCount
=
=
0
)
?
menuLabelStringSingleTab
:
PluralForm
.
get
(
otherTabsCount
menuLabelString
)
;
let
menuLabel
=
label
.
replace
(
"
#
1
"
undoItem
.
title
)
.
replace
(
"
#
2
"
otherTabsCount
)
;
let
selectedTab
=
undoItem
.
tabs
[
undoItem
.
selected
-
1
]
;
createEntry
(
aTagName
true
i
selectedTab
doc
menuLabel
fragment
)
;
}
createRestoreAllEntry
(
doc
fragment
aPrefixRestoreAll
true
aRestoreAllLabel
closedWindowData
.
length
aTagName
)
;
}
return
fragment
;
}
_undoCloseMiddleClick
(
aEvent
)
{
if
(
aEvent
.
button
!
=
1
)
return
;
aEvent
.
view
.
undoCloseTab
(
aEvent
.
originalTarget
.
getAttribute
(
"
value
"
)
)
;
aEvent
.
view
.
gBrowser
.
moveTabToEnd
(
)
;
let
ancestorPanel
=
aEvent
.
target
.
closest
(
"
panel
"
)
;
if
(
ancestorPanel
)
{
ancestorPanel
.
hidePopup
(
)
;
}
}
}
;
function
setImage
(
aItem
aElement
)
{
let
iconURL
=
aItem
.
image
;
if
(
/
^
https
?
:
/
.
test
(
iconURL
)
)
iconURL
=
"
moz
-
anno
:
favicon
:
"
+
iconURL
;
aElement
.
setAttribute
(
"
image
"
iconURL
)
;
}
function
createEntry
(
aTagName
aIsWindowsFragment
aIndex
aClosedTab
aDocument
aMenuLabel
aFragment
)
{
let
element
=
aDocument
.
createElementNS
(
kNSXUL
aTagName
)
;
element
.
setAttribute
(
"
label
"
aMenuLabel
)
;
if
(
aClosedTab
.
image
)
{
setImage
(
aClosedTab
element
)
;
}
if
(
!
aIsWindowsFragment
)
{
element
.
setAttribute
(
"
value
"
aIndex
)
;
}
if
(
aTagName
=
=
"
menuitem
"
)
{
element
.
setAttribute
(
"
class
"
"
menuitem
-
iconic
bookmark
-
item
menuitem
-
with
-
favicon
"
)
;
}
element
.
setAttribute
(
"
oncommand
"
"
undoClose
"
+
(
aIsWindowsFragment
?
"
Window
"
:
"
Tab
"
)
+
"
(
"
+
aIndex
+
"
)
;
"
)
;
let
tabData
;
tabData
=
aIsWindowsFragment
?
aClosedTab
:
aClosedTab
.
state
;
let
activeIndex
=
(
tabData
.
index
|
|
tabData
.
entries
.
length
)
-
1
;
if
(
activeIndex
>
=
0
&
&
tabData
.
entries
[
activeIndex
]
)
{
element
.
setAttribute
(
"
targetURI
"
tabData
.
entries
[
activeIndex
]
.
url
)
;
}
if
(
!
aIsWindowsFragment
)
{
element
.
addEventListener
(
"
click
"
RecentlyClosedTabsAndWindowsMenuUtils
.
_undoCloseMiddleClick
)
;
}
if
(
aIndex
=
=
0
)
{
element
.
setAttribute
(
"
key
"
"
key_undoClose
"
+
(
aIsWindowsFragment
?
"
Window
"
:
"
Tab
"
)
)
;
}
aFragment
.
appendChild
(
element
)
;
}
function
createRestoreAllEntry
(
aDocument
aFragment
aPrefixRestoreAll
aIsWindowsFragment
aRestoreAllLabel
aEntryCount
aTagName
)
{
let
restoreAllElements
=
aDocument
.
createElementNS
(
kNSXUL
aTagName
)
;
restoreAllElements
.
classList
.
add
(
"
restoreallitem
"
)
;
restoreAllElements
.
setAttribute
(
"
label
"
navigatorBundle
.
GetStringFromName
(
aRestoreAllLabel
)
)
;
restoreAllElements
.
setAttribute
(
"
oncommand
"
"
for
(
var
i
=
0
;
i
<
"
+
aEntryCount
+
"
;
i
+
+
)
undoClose
"
+
(
aIsWindowsFragment
?
"
Window
"
:
"
Tab
"
)
+
"
(
)
;
"
)
;
if
(
aPrefixRestoreAll
)
{
aFragment
.
insertBefore
(
restoreAllElements
aFragment
.
firstChild
)
;
}
else
{
aFragment
.
appendChild
(
aDocument
.
createElementNS
(
kNSXUL
"
menuseparator
"
)
)
;
aFragment
.
appendChild
(
restoreAllElements
)
;
}
}
