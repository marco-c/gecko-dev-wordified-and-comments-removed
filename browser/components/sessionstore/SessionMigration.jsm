"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
SessionMigration
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Utils
"
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
Utils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gEncoder
"
function
(
)
{
return
new
TextEncoder
(
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gDecoder
"
function
(
)
{
return
new
TextDecoder
(
)
;
}
)
;
var
SessionMigrationInternal
=
{
convertState
(
aStateObj
)
{
let
state
=
{
selectedWindow
:
aStateObj
.
selectedWindow
_closedWindows
:
[
]
}
;
state
.
windows
=
aStateObj
.
windows
.
map
(
function
(
oldWin
)
{
var
win
=
{
extData
:
{
}
}
;
win
.
tabs
=
oldWin
.
tabs
.
map
(
function
(
oldTab
)
{
var
tab
=
{
}
;
tab
.
entries
=
oldTab
.
entries
.
map
(
function
(
entry
)
{
return
{
url
:
entry
.
url
triggeringPrincipal_base64
:
entry
.
triggeringPrincipal_base64
title
:
entry
.
title
}
;
}
)
;
tab
.
index
=
oldTab
.
index
;
tab
.
hidden
=
oldTab
.
hidden
;
tab
.
pinned
=
oldTab
.
pinned
;
return
tab
;
}
)
;
win
.
selected
=
oldWin
.
selected
;
win
.
_closedTabs
=
[
]
;
return
win
;
}
)
;
let
url
=
"
about
:
welcomeback
"
;
let
formdata
=
{
id
:
{
sessionData
:
state
}
url
}
;
let
entry
=
{
url
triggeringPrincipal_base64
:
Utils
.
SERIALIZED_SYSTEMPRINCIPAL
}
;
return
{
windows
:
[
{
tabs
:
[
{
entries
:
[
entry
]
formdata
}
]
}
]
}
;
}
readState
(
aPath
)
{
return
(
async
function
(
)
{
let
bytes
=
await
OS
.
File
.
read
(
aPath
{
compression
:
"
lz4
"
}
)
;
let
text
=
gDecoder
.
decode
(
bytes
)
;
let
state
=
JSON
.
parse
(
text
)
;
return
state
;
}
)
(
)
;
}
writeState
(
aPath
aState
)
{
let
bytes
=
gEncoder
.
encode
(
JSON
.
stringify
(
aState
)
)
;
return
OS
.
File
.
writeAtomic
(
aPath
bytes
{
tmpPath
:
aPath
+
"
.
tmp
"
compression
:
"
lz4
"
}
)
;
}
}
;
var
SessionMigration
=
{
migrate
(
aFromPath
aToPath
)
{
return
(
async
function
(
)
{
let
inState
=
await
SessionMigrationInternal
.
readState
(
aFromPath
)
;
let
outState
=
SessionMigrationInternal
.
convertState
(
inState
)
;
await
SessionMigrationInternal
.
writeState
(
aToPath
outState
)
;
}
)
(
)
;
}
}
;
