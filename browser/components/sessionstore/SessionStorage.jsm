"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SessionStorage
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
DOM_STORAGE_LIMIT_PREF
=
"
browser
.
sessionstore
.
dom_storage_limit
"
;
function
getPrincipalForFrame
(
docShell
frame
)
{
let
ssm
=
Services
.
scriptSecurityManager
;
let
uri
=
frame
.
document
.
documentURIObject
;
return
ssm
.
getDocShellCodebasePrincipal
(
uri
docShell
)
;
}
var
SessionStorage
=
Object
.
freeze
(
{
collect
(
content
)
{
return
SessionStorageInternal
.
collect
(
content
)
;
}
restore
(
aDocShell
aStorageData
)
{
SessionStorageInternal
.
restore
(
aDocShell
aStorageData
)
;
}
}
)
;
function
forEachNonDynamicChildFrame
(
frame
cb
)
{
cb
(
frame
)
;
SessionStoreUtils
.
forEachNonDynamicChildFrame
(
frame
subframe
=
>
{
return
forEachNonDynamicChildFrame
(
subframe
cb
)
;
}
)
;
}
var
SessionStorageInternal
=
{
collect
(
content
)
{
let
data
=
{
}
;
let
visitedOrigins
=
new
Set
(
)
;
let
docShell
=
content
.
docShell
;
forEachNonDynamicChildFrame
(
content
frame
=
>
{
let
principal
=
getPrincipalForFrame
(
docShell
frame
)
;
if
(
!
principal
)
{
return
;
}
let
origin
;
try
{
origin
=
principal
.
origin
;
}
catch
(
e
)
{
return
;
}
if
(
visitedOrigins
.
has
(
origin
)
)
{
return
;
}
visitedOrigins
.
add
(
origin
)
;
let
originData
=
this
.
_readEntry
(
principal
docShell
)
;
if
(
Object
.
keys
(
originData
)
.
length
)
{
data
[
origin
]
=
originData
;
}
}
)
;
return
Object
.
keys
(
data
)
.
length
?
data
:
null
;
}
restore
(
aDocShell
aStorageData
)
{
for
(
let
origin
of
Object
.
keys
(
aStorageData
)
)
{
let
data
=
aStorageData
[
origin
]
;
let
principal
;
try
{
let
attrs
=
aDocShell
.
getOriginAttributes
(
)
;
let
dataPrincipal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipalFromOrigin
(
origin
)
;
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
dataPrincipal
.
URI
attrs
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
continue
;
}
let
storageManager
=
aDocShell
.
QueryInterface
(
Ci
.
nsIDOMStorageManager
)
;
let
window
=
aDocShell
.
domWindow
;
let
storage
=
storageManager
.
createStorage
(
window
principal
"
"
aDocShell
.
usePrivateBrowsing
)
;
for
(
let
key
of
Object
.
keys
(
data
)
)
{
try
{
storage
.
setItem
(
key
data
[
key
]
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
}
}
_readEntry
(
aPrincipal
aDocShell
)
{
let
hostData
=
{
}
;
let
storage
;
let
window
=
aDocShell
.
domWindow
;
try
{
let
storageManager
=
aDocShell
.
QueryInterface
(
Ci
.
nsIDOMStorageManager
)
;
storage
=
storageManager
.
getStorage
(
window
aPrincipal
)
;
storage
.
length
;
}
catch
(
e
)
{
storage
=
null
;
}
if
(
!
storage
|
|
!
storage
.
length
)
{
return
hostData
;
}
let
usage
=
window
.
windowUtils
.
getStorageUsage
(
storage
)
;
if
(
usage
>
Services
.
prefs
.
getIntPref
(
DOM_STORAGE_LIMIT_PREF
)
)
{
return
hostData
;
}
for
(
let
i
=
0
;
i
<
storage
.
length
;
i
+
+
)
{
try
{
let
key
=
storage
.
key
(
i
)
;
hostData
[
key
]
=
storage
.
getItem
(
key
)
;
}
catch
(
e
)
{
}
}
return
hostData
;
}
}
;
