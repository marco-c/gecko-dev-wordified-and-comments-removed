"
use
strict
"
;
function
debug
(
msg
)
{
Services
.
console
.
logStringMessage
(
"
SessionStoreContent
:
"
+
msg
)
;
}
var
Cu
=
Components
.
utils
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
this
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormData
"
"
resource
:
/
/
gre
/
modules
/
FormData
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DocShellCapabilities
"
"
resource
:
/
/
/
modules
/
sessionstore
/
DocShellCapabilities
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PageStyle
"
"
resource
:
/
/
/
modules
/
sessionstore
/
PageStyle
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ScrollPosition
"
"
resource
:
/
/
gre
/
modules
/
ScrollPosition
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SessionHistory
"
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionHistory
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SessionStorage
"
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStorage
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
FrameTree
.
jsm
"
this
)
;
var
gFrameTree
=
new
FrameTree
(
this
)
;
Cu
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
ContentRestore
.
jsm
"
this
)
;
XPCOMUtils
.
defineLazyGetter
(
this
'
gContentRestore
'
(
)
=
>
{
return
new
ContentRestore
(
this
)
}
)
;
var
gCurrentEpoch
=
0
;
const
DOM_STORAGE_MAX_CHARS
=
10000000
;
const
TIMEOUT_DISABLED_PREF
=
"
browser
.
sessionstore
.
debug
.
no_auto_updates
"
;
function
createLazy
(
fn
)
{
let
cached
=
false
;
let
cachedValue
=
null
;
return
function
lazy
(
)
{
if
(
!
cached
)
{
cachedValue
=
fn
(
)
;
cached
=
true
;
}
return
cachedValue
;
}
;
}
var
EventListener
=
{
init
:
function
(
)
{
addEventListener
(
"
load
"
this
true
)
;
}
handleEvent
:
function
(
event
)
{
if
(
event
.
target
!
=
content
.
document
)
{
return
;
}
gContentRestore
.
restoreDocument
(
)
;
}
}
;
var
MessageListener
=
{
MESSAGES
:
[
"
SessionStore
:
restoreHistory
"
"
SessionStore
:
restoreTabContent
"
"
SessionStore
:
resetRestore
"
"
SessionStore
:
flush
"
]
init
:
function
(
)
{
this
.
MESSAGES
.
forEach
(
m
=
>
addMessageListener
(
m
this
)
)
;
}
receiveMessage
:
function
(
{
name
data
}
)
{
if
(
!
docShell
)
{
return
;
}
if
(
data
.
epoch
&
&
data
.
epoch
!
=
gCurrentEpoch
)
{
gCurrentEpoch
=
data
.
epoch
;
}
switch
(
name
)
{
case
"
SessionStore
:
restoreHistory
"
:
this
.
restoreHistory
(
data
)
;
break
;
case
"
SessionStore
:
restoreTabContent
"
:
this
.
restoreTabContent
(
data
)
;
break
;
case
"
SessionStore
:
resetRestore
"
:
gContentRestore
.
resetRestore
(
)
;
break
;
case
"
SessionStore
:
flush
"
:
this
.
flush
(
data
)
;
break
;
default
:
debug
(
"
received
unknown
message
'
"
+
name
+
"
'
"
)
;
break
;
}
}
restoreHistory
(
{
epoch
tabData
loadArguments
}
)
{
gContentRestore
.
restoreHistory
(
tabData
loadArguments
{
onLoadStarted
(
)
{
sendSyncMessage
(
"
SessionStore
:
restoreTabContentStarted
"
{
epoch
}
)
;
}
onLoadFinished
(
)
{
sendAsyncMessage
(
"
SessionStore
:
restoreTabContentComplete
"
{
epoch
}
)
;
}
}
)
;
sendSyncMessage
(
"
SessionStore
:
restoreHistoryComplete
"
{
epoch
}
)
;
}
restoreTabContent
(
{
loadArguments
}
)
{
let
epoch
=
gCurrentEpoch
;
let
didStartLoad
=
gContentRestore
.
restoreTabContent
(
loadArguments
(
)
=
>
{
sendAsyncMessage
(
"
SessionStore
:
restoreTabContentComplete
"
{
epoch
}
)
;
}
)
;
sendAsyncMessage
(
"
SessionStore
:
restoreTabContentStarted
"
{
epoch
}
)
;
if
(
!
didStartLoad
)
{
sendAsyncMessage
(
"
SessionStore
:
restoreTabContentComplete
"
{
epoch
}
)
;
}
}
flush
(
{
id
}
)
{
MessageQueue
.
send
(
{
flushID
:
id
}
)
;
}
}
;
var
SessionHistoryListener
=
{
init
:
function
(
)
{
gFrameTree
.
addObserver
(
this
)
;
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
sessionHistory
.
addSHistoryListener
(
this
)
;
if
(
!
SessionHistory
.
isEmpty
(
docShell
)
)
{
this
.
collect
(
)
;
}
addEventListener
(
"
DOMTitleChanged
"
this
)
;
}
uninit
:
function
(
)
{
let
sessionHistory
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
sessionHistory
;
if
(
sessionHistory
)
{
sessionHistory
.
removeSHistoryListener
(
this
)
;
}
}
collect
:
function
(
)
{
if
(
docShell
)
{
MessageQueue
.
push
(
"
history
"
(
)
=
>
SessionHistory
.
collect
(
docShell
)
)
;
}
}
handleEvent
(
event
)
{
this
.
collect
(
)
;
}
onFrameTreeCollected
:
function
(
)
{
this
.
collect
(
)
;
}
onFrameTreeReset
:
function
(
)
{
this
.
collect
(
)
;
}
OnHistoryNewEntry
:
function
(
newURI
)
{
this
.
collect
(
)
;
}
OnHistoryGoBack
:
function
(
backURI
)
{
this
.
collect
(
)
;
return
true
;
}
OnHistoryGoForward
:
function
(
forwardURI
)
{
this
.
collect
(
)
;
return
true
;
}
OnHistoryGotoIndex
:
function
(
index
gotoURI
)
{
this
.
collect
(
)
;
return
true
;
}
OnHistoryPurge
:
function
(
numEntries
)
{
this
.
collect
(
)
;
return
true
;
}
OnHistoryReload
:
function
(
reloadURI
reloadFlags
)
{
this
.
collect
(
)
;
return
true
;
}
OnHistoryReplaceEntry
:
function
(
index
)
{
this
.
collect
(
)
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsISHistoryListener
Ci
.
nsISupportsWeakReference
]
)
}
;
var
ScrollPositionListener
=
{
init
:
function
(
)
{
addEventListener
(
"
scroll
"
this
)
;
gFrameTree
.
addObserver
(
this
)
;
}
handleEvent
:
function
(
event
)
{
let
frame
=
event
.
target
&
&
event
.
target
.
defaultView
;
if
(
frame
&
&
gFrameTree
.
contains
(
frame
)
)
{
MessageQueue
.
push
(
"
scroll
"
(
)
=
>
this
.
collect
(
)
)
;
}
}
onFrameTreeCollected
:
function
(
)
{
MessageQueue
.
push
(
"
scroll
"
(
)
=
>
this
.
collect
(
)
)
;
}
onFrameTreeReset
:
function
(
)
{
MessageQueue
.
push
(
"
scroll
"
(
)
=
>
null
)
;
}
collect
:
function
(
)
{
return
gFrameTree
.
map
(
ScrollPosition
.
collect
)
;
}
}
;
var
FormDataListener
=
{
init
:
function
(
)
{
addEventListener
(
"
input
"
this
true
)
;
addEventListener
(
"
change
"
this
true
)
;
gFrameTree
.
addObserver
(
this
)
;
}
handleEvent
:
function
(
event
)
{
let
frame
=
event
.
target
&
&
event
.
target
.
ownerDocument
&
&
event
.
target
.
ownerDocument
.
defaultView
;
if
(
frame
&
&
gFrameTree
.
contains
(
frame
)
)
{
MessageQueue
.
push
(
"
formdata
"
(
)
=
>
this
.
collect
(
)
)
;
}
}
onFrameTreeReset
:
function
(
)
{
MessageQueue
.
push
(
"
formdata
"
(
)
=
>
null
)
;
}
collect
:
function
(
)
{
return
gFrameTree
.
map
(
FormData
.
collect
)
;
}
}
;
var
PageStyleListener
=
{
init
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
"
author
-
style
-
disabled
-
changed
"
false
)
;
Services
.
obs
.
addObserver
(
this
"
style
-
sheet
-
applicable
-
state
-
changed
"
false
)
;
gFrameTree
.
addObserver
(
this
)
;
}
uninit
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
author
-
style
-
disabled
-
changed
"
)
;
Services
.
obs
.
removeObserver
(
this
"
style
-
sheet
-
applicable
-
state
-
changed
"
)
;
}
observe
:
function
(
subject
topic
)
{
let
frame
=
subject
.
defaultView
;
if
(
frame
&
&
gFrameTree
.
contains
(
frame
)
)
{
MessageQueue
.
push
(
"
pageStyle
"
(
)
=
>
this
.
collect
(
)
)
;
}
}
collect
:
function
(
)
{
return
PageStyle
.
collect
(
docShell
gFrameTree
)
;
}
onFrameTreeCollected
:
function
(
)
{
MessageQueue
.
push
(
"
pageStyle
"
(
)
=
>
this
.
collect
(
)
)
;
}
onFrameTreeReset
:
function
(
)
{
MessageQueue
.
push
(
"
pageStyle
"
(
)
=
>
null
)
;
}
}
;
var
DocShellCapabilitiesListener
=
{
_latestCapabilities
:
"
"
init
:
function
(
)
{
gFrameTree
.
addObserver
(
this
)
;
}
onFrameTreeReset
:
function
(
)
{
let
caps
=
DocShellCapabilities
.
collect
(
docShell
)
.
join
(
"
"
)
;
if
(
caps
!
=
this
.
_latestCapabilities
)
{
this
.
_latestCapabilities
=
caps
;
MessageQueue
.
push
(
"
disallow
"
(
)
=
>
caps
|
|
null
)
;
}
}
}
;
var
SessionStorageListener
=
{
init
:
function
(
)
{
addEventListener
(
"
MozSessionStorageChanged
"
this
true
)
;
Services
.
obs
.
addObserver
(
this
"
browser
:
purge
-
domain
-
data
"
false
)
;
gFrameTree
.
addObserver
(
this
)
;
}
uninit
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
browser
:
purge
-
domain
-
data
"
)
;
}
handleEvent
:
function
(
event
)
{
if
(
gFrameTree
.
contains
(
event
.
target
)
)
{
this
.
collect
(
)
;
}
}
observe
:
function
(
)
{
setTimeout
(
(
)
=
>
this
.
collect
(
)
0
)
;
}
estimateStorageSize
:
function
(
collected
)
{
if
(
!
collected
)
{
return
0
;
}
let
size
=
0
;
for
(
let
host
of
Object
.
keys
(
collected
)
)
{
size
+
=
host
.
length
;
let
perHost
=
collected
[
host
]
;
for
(
let
key
of
Object
.
keys
(
perHost
)
)
{
size
+
=
key
.
length
;
let
perKey
=
perHost
[
key
]
;
size
+
=
perKey
.
length
;
}
}
return
size
;
}
collect
:
function
(
)
{
if
(
docShell
)
{
MessageQueue
.
push
(
"
storage
"
(
)
=
>
{
let
collected
=
SessionStorage
.
collect
(
docShell
gFrameTree
)
;
if
(
collected
=
=
null
)
{
return
collected
;
}
let
size
=
this
.
estimateStorageSize
(
collected
)
;
MessageQueue
.
push
(
"
telemetry
"
(
)
=
>
(
{
FX_SESSION_RESTORE_DOM_STORAGE_SIZE_ESTIMATE_CHARS
:
size
}
)
)
;
if
(
size
>
Preferences
.
get
(
"
browser
.
sessionstore
.
dom_storage_limit
"
DOM_STORAGE_MAX_CHARS
)
)
{
return
{
}
;
}
return
collected
;
}
)
;
}
}
onFrameTreeCollected
:
function
(
)
{
this
.
collect
(
)
;
}
onFrameTreeReset
:
function
(
)
{
this
.
collect
(
)
;
}
}
;
var
PrivacyListener
=
{
init
:
function
(
)
{
docShell
.
addWeakPrivacyTransitionObserver
(
this
)
;
if
(
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
usePrivateBrowsing
)
{
MessageQueue
.
push
(
"
isPrivate
"
(
)
=
>
true
)
;
}
}
privateModeChanged
:
function
(
enabled
)
{
MessageQueue
.
push
(
"
isPrivate
"
(
)
=
>
enabled
|
|
null
)
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIPrivacyTransitionObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
var
MessageQueue
=
{
_data
:
new
Map
(
)
BATCH_DELAY_MS
:
1000
_timeout
:
null
_timeoutDisabled
:
false
get
timeoutDisabled
(
)
{
return
this
.
_timeoutDisabled
;
}
set
timeoutDisabled
(
val
)
{
this
.
_timeoutDisabled
=
val
;
if
(
val
&
&
this
.
_timeout
)
{
clearTimeout
(
this
.
_timeout
)
;
this
.
_timeout
=
null
;
}
return
val
;
}
init
(
)
{
this
.
timeoutDisabled
=
Services
.
prefs
.
getBoolPref
(
TIMEOUT_DISABLED_PREF
)
;
Services
.
prefs
.
addObserver
(
TIMEOUT_DISABLED_PREF
this
false
)
;
}
uninit
(
)
{
Services
.
prefs
.
removeObserver
(
TIMEOUT_DISABLED_PREF
this
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
nsPref
:
changed
"
&
&
data
=
=
TIMEOUT_DISABLED_PREF
)
{
this
.
timeoutDisabled
=
Services
.
prefs
.
getBoolPref
(
TIMEOUT_DISABLED_PREF
)
;
}
}
push
:
function
(
key
fn
)
{
this
.
_data
.
set
(
key
createLazy
(
fn
)
)
;
if
(
!
this
.
_timeout
&
&
!
this
.
_timeoutDisabled
)
{
this
.
_timeout
=
setTimeout
(
(
)
=
>
this
.
send
(
)
this
.
BATCH_DELAY_MS
)
;
}
}
send
:
function
(
options
=
{
}
)
{
if
(
!
docShell
)
{
return
;
}
if
(
this
.
_timeout
)
{
clearTimeout
(
this
.
_timeout
)
;
this
.
_timeout
=
null
;
}
let
flushID
=
(
options
&
&
options
.
flushID
)
|
|
0
;
let
durationMs
=
Date
.
now
(
)
;
let
data
=
{
}
;
let
telemetry
=
{
}
;
for
(
let
[
key
func
]
of
this
.
_data
)
{
let
value
=
func
(
)
;
if
(
key
=
=
"
telemetry
"
)
{
for
(
let
histogramId
of
Object
.
keys
(
value
)
)
{
telemetry
[
histogramId
]
=
value
[
histogramId
]
;
}
}
else
{
data
[
key
]
=
value
;
}
}
durationMs
=
Date
.
now
(
)
-
durationMs
;
telemetry
.
FX_SESSION_RESTORE_CONTENT_COLLECT_DATA_LONGEST_OP_MS
=
durationMs
;
try
{
sendAsyncMessage
(
"
SessionStore
:
update
"
{
data
telemetry
flushID
isFinal
:
options
.
isFinal
|
|
false
epoch
:
gCurrentEpoch
}
)
;
}
catch
(
ex
if
ex
&
&
ex
.
result
=
=
Cr
.
NS_ERROR_OUT_OF_MEMORY
)
{
let
telemetry
=
{
FX_SESSION_RESTORE_SEND_UPDATE_CAUSED_OOM
:
1
}
;
sendAsyncMessage
(
"
SessionStore
:
error
"
{
telemetry
}
)
;
}
}
}
;
EventListener
.
init
(
)
;
MessageListener
.
init
(
)
;
FormDataListener
.
init
(
)
;
PageStyleListener
.
init
(
)
;
SessionHistoryListener
.
init
(
)
;
SessionStorageListener
.
init
(
)
;
ScrollPositionListener
.
init
(
)
;
DocShellCapabilitiesListener
.
init
(
)
;
PrivacyListener
.
init
(
)
;
MessageQueue
.
init
(
)
;
function
handleRevivedTab
(
)
{
if
(
!
content
)
{
removeEventListener
(
"
pagehide
"
handleRevivedTab
)
;
return
;
}
if
(
content
.
document
.
documentURI
.
startsWith
(
"
about
:
tabcrashed
"
)
)
{
if
(
Services
.
appinfo
.
processType
!
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
throw
new
Error
(
"
We
seem
to
be
navigating
away
from
about
:
tabcrashed
in
"
+
"
a
non
-
remote
browser
.
This
should
really
never
happen
.
"
)
;
}
removeEventListener
(
"
pagehide
"
handleRevivedTab
)
;
sendAsyncMessage
(
"
SessionStore
:
crashedTabRevived
"
)
;
}
}
addEventListener
(
"
pagehide
"
handleRevivedTab
)
;
addEventListener
(
"
unload
"
(
)
=
>
{
MessageQueue
.
send
(
{
isFinal
:
true
}
)
;
handleRevivedTab
(
)
;
PageStyleListener
.
uninit
(
)
;
SessionStorageListener
.
uninit
(
)
;
SessionHistoryListener
.
uninit
(
)
;
MessageQueue
.
uninit
(
)
;
gContentRestore
.
resetRestore
(
)
;
}
)
;
