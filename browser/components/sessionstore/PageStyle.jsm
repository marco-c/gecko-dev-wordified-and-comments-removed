"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
PageStyle
"
]
;
const
Ci
=
Components
.
interfaces
;
this
.
PageStyle
=
Object
.
freeze
(
{
collect
(
docShell
frameTree
)
{
return
PageStyleInternal
.
collect
(
docShell
frameTree
)
;
}
restoreTree
(
docShell
data
)
{
PageStyleInternal
.
restoreTree
(
docShell
data
)
;
}
}
)
;
const
NO_STYLE
=
"
_nostyle
"
;
var
PageStyleInternal
=
{
collect
(
docShell
frameTree
)
{
let
result
=
frameTree
.
map
(
(
{
document
:
doc
}
)
=
>
{
let
style
;
if
(
doc
)
{
style
=
doc
.
selectedStyleSheetSet
|
|
doc
.
lastStyleSheetSet
;
}
return
style
?
{
pageStyle
:
style
}
:
null
;
}
)
;
let
markupDocumentViewer
=
docShell
.
contentViewer
;
if
(
markupDocumentViewer
.
authorStyleDisabled
)
{
result
=
result
|
|
{
}
;
result
.
disabled
=
true
;
}
return
result
&
&
Object
.
keys
(
result
)
.
length
?
result
:
null
;
}
restoreTree
(
docShell
data
)
{
let
disabled
=
data
.
disabled
|
|
false
;
let
markupDocumentViewer
=
docShell
.
contentViewer
;
markupDocumentViewer
.
authorStyleDisabled
=
disabled
;
function
restoreFrame
(
root
frameData
)
{
if
(
frameData
.
hasOwnProperty
(
"
pageStyle
"
)
)
{
root
.
document
.
selectedStyleSheetSet
=
frameData
.
pageStyle
;
}
if
(
!
frameData
.
hasOwnProperty
(
"
children
"
)
)
{
return
;
}
let
frames
=
root
.
frames
;
frameData
.
children
.
forEach
(
(
child
index
)
=
>
{
if
(
child
&
&
index
<
frames
.
length
)
{
restoreFrame
(
frames
[
index
]
child
)
;
}
}
)
;
}
let
ifreq
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
;
restoreFrame
(
ifreq
.
getInterface
(
Ci
.
nsIDOMWindow
)
data
)
;
}
}
;
