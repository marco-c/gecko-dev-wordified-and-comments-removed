"
use
strict
"
;
const
SCHEDULED_BACKUPS_ENABLED_PREF
=
"
browser
.
backup
.
scheduled
.
enabled
"
;
add_task
(
async
function
test_enable_backup_encryption_checkbox_confirm
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
preferences
"
async
browser
=
>
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
enableEncryptionStub
=
sandbox
.
stub
(
BackupService
.
prototype
"
enableEncryption
"
)
.
resolves
(
true
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SCHEDULED_BACKUPS_ENABLED_PREF
true
]
]
}
)
;
let
settings
=
browser
.
contentDocument
.
querySelector
(
"
backup
-
settings
"
)
;
settings
.
backupServiceState
.
encryptionEnabled
=
false
;
await
settings
.
requestUpdate
(
)
;
await
settings
.
updateComplete
;
let
sensitiveDataCheckbox
=
settings
.
sensitiveDataCheckboxInputEl
;
Assert
.
ok
(
sensitiveDataCheckbox
"
Sensitive
data
checkbox
should
be
found
"
)
;
Assert
.
ok
(
!
sensitiveDataCheckbox
.
checked
"
Sensitive
data
checkbox
should
not
be
checked
"
)
;
sensitiveDataCheckbox
.
click
(
)
;
await
settings
.
updateComplete
;
let
enableBackupEncryptionDialog
=
settings
.
enableBackupEncryptionDialogEl
;
Assert
.
ok
(
enableBackupEncryptionDialog
?
.
open
"
enable
-
backup
-
encryption
-
dialog
should
be
open
"
)
;
let
enableBackupEncryption
=
settings
.
enableBackupEncryptionEl
;
Assert
.
ok
(
enableBackupEncryption
"
enable
-
backup
-
encryption
should
be
found
"
)
;
let
newPasswordInput
=
enableBackupEncryption
.
inputNewPasswordEl
;
let
repeatPasswordInput
=
enableBackupEncryption
.
inputRepeatPasswordEl
;
let
newPassPromise
=
createMockPassInputEventPromise
(
newPasswordInput
MOCK_PASSWORD
)
;
await
newPassPromise
;
let
confirmButton
=
enableBackupEncryption
.
confirmButtonEl
;
Assert
.
ok
(
confirmButton
"
Confirm
button
should
be
found
"
)
;
Assert
.
ok
(
confirmButton
.
disabled
"
Confirm
button
should
be
disabled
"
)
;
let
matchPassPromise
=
createMockPassInputEventPromise
(
repeatPasswordInput
MOCK_PASSWORD
)
;
await
matchPassPromise
;
let
confirmButtonPromise
=
BrowserTestUtils
.
waitForMutationCondition
(
confirmButton
{
attributes
:
true
}
(
)
=
>
!
confirmButton
.
disabled
)
;
await
confirmButtonPromise
;
ok
(
!
confirmButton
.
disabled
"
Confirm
button
should
no
longer
be
disabled
"
)
;
await
settings
.
updateComplete
;
confirmButton
=
settings
.
enableBackupEncryptionEl
.
confirmButtonEl
;
let
encryptionPromise
=
BrowserTestUtils
.
waitForEvent
(
window
"
enableEncryption
"
)
;
confirmButton
.
click
(
)
;
await
encryptionPromise
;
Assert
.
ok
(
enableEncryptionStub
.
calledOnceWith
(
MOCK_PASSWORD
)
"
BackupService
was
called
to
enable
encryption
with
inputted
password
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
sandbox
.
restore
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_enable_backup_encryption_change_password_confirm
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
preferences
"
async
browser
=
>
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
enableEncryptionStub
=
sandbox
.
stub
(
BackupService
.
prototype
"
enableEncryption
"
)
.
resolves
(
true
)
;
let
disableEncryptionStub
=
sandbox
.
stub
(
BackupService
.
prototype
"
disableEncryption
"
)
.
resolves
(
true
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SCHEDULED_BACKUPS_ENABLED_PREF
true
]
]
}
)
;
let
settings
=
browser
.
contentDocument
.
querySelector
(
"
backup
-
settings
"
)
;
settings
.
backupServiceState
.
encryptionEnabled
=
true
;
await
settings
.
requestUpdate
(
)
;
await
settings
.
updateComplete
;
let
changePasswordButton
=
settings
.
changePasswordButtonEl
;
Assert
.
ok
(
changePasswordButton
"
Change
password
button
should
be
found
"
)
;
changePasswordButton
.
click
(
)
;
await
settings
.
updateComplete
;
let
enableBackupEncryptionDialog
=
settings
.
enableBackupEncryptionDialogEl
;
Assert
.
ok
(
enableBackupEncryptionDialog
?
.
open
"
enable
-
backup
-
encryption
-
dialog
should
be
open
"
)
;
let
enableBackupEncryption
=
settings
.
enableBackupEncryptionEl
;
Assert
.
ok
(
enableBackupEncryption
"
enable
-
backup
-
encryption
should
be
found
"
)
;
let
newPasswordInput
=
enableBackupEncryption
.
inputNewPasswordEl
;
let
repeatPasswordInput
=
enableBackupEncryption
.
inputRepeatPasswordEl
;
const
changedPassword
=
"
changedPassword
"
;
let
newPassPromise
=
createMockPassInputEventPromise
(
newPasswordInput
changedPassword
)
;
await
newPassPromise
;
let
confirmButton
=
enableBackupEncryption
.
confirmButtonEl
;
Assert
.
ok
(
confirmButton
"
Confirm
button
should
be
found
"
)
;
Assert
.
ok
(
confirmButton
.
disabled
"
Confirm
button
should
be
disabled
"
)
;
let
matchPassPromise
=
createMockPassInputEventPromise
(
repeatPasswordInput
changedPassword
)
;
await
matchPassPromise
;
let
confirmButtonPromise
=
BrowserTestUtils
.
waitForMutationCondition
(
confirmButton
{
attributes
:
true
}
(
)
=
>
!
confirmButton
.
disabled
)
;
await
confirmButtonPromise
;
ok
(
!
confirmButton
.
disabled
"
Confirm
button
should
no
longer
be
disabled
"
)
;
await
settings
.
updateComplete
;
confirmButton
=
settings
.
enableBackupEncryptionEl
.
confirmButtonEl
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
window
"
rerunEncryption
"
)
;
confirmButton
.
click
(
)
;
await
promise
;
Assert
.
ok
(
disableEncryptionStub
.
calledOnce
"
BackupService
was
called
to
disable
encryption
first
before
registering
the
changed
password
"
)
;
Assert
.
ok
(
enableEncryptionStub
.
calledOnceWith
(
changedPassword
)
"
BackupService
was
called
to
re
-
run
encryption
with
changed
password
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
sandbox
.
restore
(
)
;
}
)
;
}
)
;
