"
use
strict
"
;
const
{
FormHistoryBackupResource
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
backup
/
FormHistoryBackupResource
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_measure
(
)
{
const
EXPECTED_FORM_HISTORY_DB_SIZE
=
500
;
Services
.
fog
.
testResetFOG
(
)
;
let
tempDir
=
PathUtils
.
tempDir
;
let
tempFormHistoryDBPath
=
PathUtils
.
join
(
tempDir
"
formhistory
.
sqlite
"
)
;
await
createKilobyteSizedFile
(
tempFormHistoryDBPath
EXPECTED_FORM_HISTORY_DB_SIZE
)
;
let
formHistoryBackupResource
=
new
FormHistoryBackupResource
(
)
;
await
formHistoryBackupResource
.
measure
(
tempDir
)
;
let
formHistoryMeasurement
=
Glean
.
browserBackup
.
formHistorySize
.
testGetValue
(
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
"
browser
.
backup
.
form_history_size
"
formHistoryMeasurement
"
Glean
and
telemetry
measurements
for
formhistory
.
sqlite
should
be
equal
"
)
;
Assert
.
equal
(
formHistoryMeasurement
EXPECTED_FORM_HISTORY_DB_SIZE
"
Should
have
collected
the
correct
glean
measurement
for
formhistory
.
sqlite
"
)
;
await
IOUtils
.
remove
(
tempFormHistoryDBPath
)
;
}
)
;
add_task
(
async
function
test_backup
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
formHistoryBackupResource
=
new
FormHistoryBackupResource
(
)
;
let
sourcePath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
FormHistoryBackupResource
-
source
-
test
"
)
;
let
stagingPath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
FormHistoryBackupResource
-
staging
-
test
"
)
;
await
createTestFiles
(
sourcePath
[
{
path
:
"
formhistory
.
sqlite
"
}
]
)
;
let
fakeConnection
=
{
backup
:
sandbox
.
stub
(
)
.
resolves
(
true
)
close
:
sandbox
.
stub
(
)
.
resolves
(
true
)
}
;
sandbox
.
stub
(
Sqlite
"
openConnection
"
)
.
returns
(
fakeConnection
)
;
let
manifestEntry
=
await
formHistoryBackupResource
.
backup
(
stagingPath
sourcePath
)
;
Assert
.
equal
(
manifestEntry
null
"
FormHistoryBackupResource
.
backup
should
return
null
as
its
ManifestEntry
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
calledOnce
"
Called
backup
the
expected
number
of
times
for
all
connections
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
calledWith
(
PathUtils
.
join
(
stagingPath
"
formhistory
.
sqlite
"
)
)
"
Called
backup
on
the
formhistory
.
sqlite
Sqlite
connection
"
)
;
await
maybeRemovePath
(
stagingPath
)
;
await
maybeRemovePath
(
sourcePath
)
;
sandbox
.
restore
(
)
;
}
)
;
