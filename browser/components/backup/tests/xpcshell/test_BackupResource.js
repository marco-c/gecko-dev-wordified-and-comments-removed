"
use
strict
"
;
const
{
bytesToFuzzyKilobytes
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
backup
/
BackupResource
.
sys
.
mjs
"
)
;
const
EXPECTED_KILOBYTES_FOR_XULSTORE
=
1
;
add_task
(
async
function
test_getFileSize
(
)
{
let
file
=
do_get_file
(
"
data
/
test_xulstore
.
json
"
)
;
let
testFilePath
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
test_xulstore
.
json
"
)
;
await
IOUtils
.
copy
(
file
.
path
PathUtils
.
profileDir
)
;
let
size
=
await
BackupResource
.
getFileSize
(
testFilePath
)
;
Assert
.
equal
(
size
EXPECTED_KILOBYTES_FOR_XULSTORE
"
Size
of
the
test_xulstore
.
json
is
rounded
up
to
the
nearest
kilobyte
.
"
)
;
await
IOUtils
.
remove
(
testFilePath
)
;
}
)
;
add_task
(
async
function
test_getDirectorySize
(
)
{
let
file
=
do_get_file
(
"
data
/
test_xulstore
.
json
"
)
;
let
testDir
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
testDir
"
)
;
await
IOUtils
.
makeDirectory
(
testDir
)
;
await
IOUtils
.
copy
(
file
.
path
testDir
)
;
let
nestedTestDir
=
PathUtils
.
join
(
testDir
"
testDir
"
)
;
await
IOUtils
.
makeDirectory
(
nestedTestDir
)
;
await
IOUtils
.
copy
(
file
.
path
nestedTestDir
)
;
let
size
=
await
BackupResource
.
getDirectorySize
(
testDir
)
;
Assert
.
equal
(
size
EXPECTED_KILOBYTES_FOR_XULSTORE
*
2
Total
size
of
the
directory
is
rounded
up
to
the
nearest
kilobyte
and
is
equal
to
twice
the
size
of
the
test_xulstore
.
json
file
)
;
await
IOUtils
.
remove
(
testDir
{
recursive
:
true
}
)
;
}
)
;
add_task
(
async
function
test_bytesToFuzzyKilobytes
(
)
{
let
largeSize
=
bytesToFuzzyKilobytes
(
1234000
)
;
Assert
.
equal
(
largeSize
1230
"
1234
bytes
is
rounded
up
to
the
nearest
tenth
kilobyte
1230
"
)
;
let
smallSize
=
bytesToFuzzyKilobytes
(
3
)
;
Assert
.
equal
(
smallSize
1
"
Sizes
under
10
kilobytes
return
1
kilobyte
"
)
;
}
)
;
