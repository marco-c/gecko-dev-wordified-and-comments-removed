"
use
strict
"
;
const
{
BookmarkJSONUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
BookmarkJSONUtils
.
sys
.
mjs
"
)
;
const
{
PlacesBackupResource
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
backup
/
PlacesBackupResource
.
sys
.
mjs
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
HISTORY_ENABLED_PREF
)
;
Services
.
prefs
.
clearUserPref
(
SANITIZE_ON_SHUTDOWN_PREF
)
;
}
)
;
add_task
(
async
function
test_measure
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
const
EXPECTED_PLACES_DB_SIZE
=
5240
;
const
EXPECTED_FAVICONS_DB_SIZE
=
5240
;
const
tempDir
=
PathUtils
.
tempDir
;
let
tempPlacesDBPath
=
PathUtils
.
join
(
tempDir
"
places
.
sqlite
"
)
;
let
tempFaviconsDBPath
=
PathUtils
.
join
(
tempDir
"
favicons
.
sqlite
"
)
;
await
createKilobyteSizedFile
(
tempPlacesDBPath
EXPECTED_PLACES_DB_SIZE
)
;
await
createKilobyteSizedFile
(
tempFaviconsDBPath
EXPECTED_FAVICONS_DB_SIZE
)
;
let
placesBackupResource
=
new
PlacesBackupResource
(
)
;
await
placesBackupResource
.
measure
(
tempDir
)
;
let
placesMeasurement
=
Glean
.
browserBackup
.
placesSize
.
testGetValue
(
)
;
let
faviconsMeasurement
=
Glean
.
browserBackup
.
faviconsSize
.
testGetValue
(
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
"
browser
.
backup
.
places_size
"
placesMeasurement
"
Glean
and
telemetry
measurements
for
places
.
sqlite
should
be
equal
"
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
"
browser
.
backup
.
favicons_size
"
faviconsMeasurement
"
Glean
and
telemetry
measurements
for
favicons
.
sqlite
should
be
equal
"
)
;
Assert
.
equal
(
placesMeasurement
EXPECTED_PLACES_DB_SIZE
"
Should
have
collected
the
correct
glean
measurement
for
places
.
sqlite
"
)
;
Assert
.
equal
(
faviconsMeasurement
EXPECTED_FAVICONS_DB_SIZE
"
Should
have
collected
the
correct
glean
measurement
for
favicons
.
sqlite
"
)
;
await
maybeRemovePath
(
tempPlacesDBPath
)
;
await
maybeRemovePath
(
tempFaviconsDBPath
)
;
}
)
;
add_task
(
async
function
test_backup
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
const
placesTimeHistogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
BROWSER_BACKUP_PLACES_TIME_MS
"
)
;
const
faviconsTimeHistogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
BROWSER_BACKUP_FAVICONS_TIME_MS
"
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
placesBackupResource
=
new
PlacesBackupResource
(
)
;
let
sourcePath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
source
-
test
"
)
;
let
stagingPath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
staging
-
test
"
)
;
await
createTestFiles
(
sourcePath
[
{
path
:
"
places
.
sqlite
"
}
{
path
:
"
favicons
.
sqlite
"
}
]
)
;
let
fakeConnection
=
{
backup
:
sandbox
.
stub
(
)
.
resolves
(
true
)
close
:
sandbox
.
stub
(
)
.
resolves
(
true
)
}
;
sandbox
.
stub
(
Sqlite
"
openConnection
"
)
.
returns
(
fakeConnection
)
;
let
manifestEntry
=
await
placesBackupResource
.
backup
(
stagingPath
sourcePath
)
;
Assert
.
equal
(
manifestEntry
null
"
PlacesBackupResource
.
backup
should
return
null
as
its
ManifestEntry
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
calledTwice
"
Backup
should
have
been
called
twice
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
firstCall
.
calledWith
(
PathUtils
.
join
(
stagingPath
"
places
.
sqlite
"
)
)
"
places
.
sqlite
should
have
been
backed
up
first
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
secondCall
.
calledWith
(
PathUtils
.
join
(
stagingPath
"
favicons
.
sqlite
"
)
)
"
favicons
.
sqlite
should
have
been
backed
up
second
"
)
;
assertSingleTimeMeasurement
(
Glean
.
browserBackup
.
placesTime
.
testGetValue
(
)
)
;
assertSingleTimeMeasurement
(
Glean
.
browserBackup
.
faviconsTime
.
testGetValue
(
)
)
;
assertHistogramMeasurementQuantity
(
placesTimeHistogram
1
)
;
assertHistogramMeasurementQuantity
(
faviconsTimeHistogram
1
)
;
await
maybeRemovePath
(
stagingPath
)
;
await
maybeRemovePath
(
sourcePath
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_backup_no_saved_history
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
const
placesTimeHistogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
BROWSER_BACKUP_PLACES_TIME_MS
"
)
;
const
faviconsTimeHistogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
BROWSER_BACKUP_FAVICONS_TIME_MS
"
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
placesBackupResource
=
new
PlacesBackupResource
(
)
;
let
sourcePath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
source
-
test
"
)
;
let
stagingPath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
staging
-
test
"
)
;
let
fakeConnection
=
{
backup
:
sandbox
.
stub
(
)
.
resolves
(
true
)
close
:
sandbox
.
stub
(
)
.
resolves
(
true
)
}
;
sandbox
.
stub
(
Sqlite
"
openConnection
"
)
.
returns
(
fakeConnection
)
;
Services
.
prefs
.
setBoolPref
(
HISTORY_ENABLED_PREF
false
)
;
Services
.
prefs
.
setBoolPref
(
SANITIZE_ON_SHUTDOWN_PREF
false
)
;
let
manifestEntry
=
await
placesBackupResource
.
backup
(
stagingPath
sourcePath
)
;
Assert
.
deepEqual
(
manifestEntry
{
bookmarksOnly
:
true
}
"
Should
have
gotten
back
a
ManifestEntry
indicating
that
we
only
copied
"
+
"
bookmarks
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
notCalled
"
No
sqlite
connections
should
have
been
made
with
remember
history
disabled
"
)
;
await
assertFilesExist
(
stagingPath
[
{
path
:
"
bookmarks
.
jsonlz4
"
}
]
)
;
Assert
.
equal
(
Glean
.
browserBackup
.
placesTime
.
testGetValue
(
)
null
"
Should
not
have
timed
places
backup
when
it
did
not
occur
"
)
;
Assert
.
equal
(
Glean
.
browserBackup
.
faviconsTime
.
testGetValue
(
)
null
"
Should
not
have
timed
favicons
backup
when
it
did
not
occur
"
)
;
assertHistogramMeasurementQuantity
(
placesTimeHistogram
0
)
;
assertHistogramMeasurementQuantity
(
faviconsTimeHistogram
0
)
;
await
IOUtils
.
remove
(
PathUtils
.
join
(
stagingPath
"
bookmarks
.
jsonlz4
"
)
)
;
Services
.
prefs
.
setBoolPref
(
HISTORY_ENABLED_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
SANITIZE_ON_SHUTDOWN_PREF
true
)
;
fakeConnection
.
backup
.
resetHistory
(
)
;
manifestEntry
=
await
placesBackupResource
.
backup
(
stagingPath
sourcePath
)
;
Assert
.
deepEqual
(
manifestEntry
{
bookmarksOnly
:
true
}
"
Should
have
gotten
back
a
ManifestEntry
indicating
that
we
only
copied
"
+
"
bookmarks
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
notCalled
"
No
sqlite
connections
should
have
been
made
with
sanitize
shutdown
enabled
"
)
;
await
assertFilesExist
(
stagingPath
[
{
path
:
"
bookmarks
.
jsonlz4
"
}
]
)
;
Assert
.
equal
(
Glean
.
browserBackup
.
placesTime
.
testGetValue
(
)
null
"
Should
not
have
timed
places
backup
when
it
did
not
occur
"
)
;
Assert
.
equal
(
Glean
.
browserBackup
.
faviconsTime
.
testGetValue
(
)
null
"
Should
not
have
timed
favicons
backup
when
it
did
not
occur
"
)
;
assertHistogramMeasurementQuantity
(
placesTimeHistogram
0
)
;
assertHistogramMeasurementQuantity
(
faviconsTimeHistogram
0
)
;
await
maybeRemovePath
(
stagingPath
)
;
await
maybeRemovePath
(
sourcePath
)
;
sandbox
.
restore
(
)
;
Services
.
prefs
.
clearUserPref
(
HISTORY_ENABLED_PREF
)
;
Services
.
prefs
.
clearUserPref
(
SANITIZE_ON_SHUTDOWN_PREF
)
;
}
)
;
add_task
(
async
function
test_backup_private_browsing
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
const
placesTimeHistogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
BROWSER_BACKUP_PLACES_TIME_MS
"
)
;
const
faviconsTimeHistogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
BROWSER_BACKUP_FAVICONS_TIME_MS
"
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
placesBackupResource
=
new
PlacesBackupResource
(
)
;
let
sourcePath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
source
-
test
"
)
;
let
stagingPath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
staging
-
test
"
)
;
let
fakeConnection
=
{
backup
:
sandbox
.
stub
(
)
.
resolves
(
true
)
close
:
sandbox
.
stub
(
)
.
resolves
(
true
)
}
;
sandbox
.
stub
(
Sqlite
"
openConnection
"
)
.
returns
(
fakeConnection
)
;
sandbox
.
stub
(
PrivateBrowsingUtils
"
permanentPrivateBrowsing
"
)
.
value
(
true
)
;
let
manifestEntry
=
await
placesBackupResource
.
backup
(
stagingPath
sourcePath
)
;
Assert
.
deepEqual
(
manifestEntry
{
bookmarksOnly
:
true
}
"
Should
have
gotten
back
a
ManifestEntry
indicating
that
we
only
copied
"
+
"
bookmarks
"
)
;
Assert
.
ok
(
fakeConnection
.
backup
.
notCalled
"
No
sqlite
connections
should
have
been
made
with
permanent
private
browsing
enabled
"
)
;
await
assertFilesExist
(
stagingPath
[
{
path
:
"
bookmarks
.
jsonlz4
"
}
]
)
;
Assert
.
equal
(
Glean
.
browserBackup
.
placesTime
.
testGetValue
(
)
null
"
Should
not
have
timed
places
backup
when
it
did
not
occur
"
)
;
Assert
.
equal
(
Glean
.
browserBackup
.
faviconsTime
.
testGetValue
(
)
null
"
Should
not
have
timed
favicons
backup
when
it
did
not
occur
"
)
;
assertHistogramMeasurementQuantity
(
placesTimeHistogram
0
)
;
assertHistogramMeasurementQuantity
(
faviconsTimeHistogram
0
)
;
await
maybeRemovePath
(
stagingPath
)
;
await
maybeRemovePath
(
sourcePath
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_recover
(
)
{
let
placesBackupResource
=
new
PlacesBackupResource
(
)
;
let
recoveryPath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
recovery
-
test
"
)
;
let
destProfilePath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
test
-
profile
"
)
;
const
simpleCopyFiles
=
[
{
path
:
"
places
.
sqlite
"
}
{
path
:
"
favicons
.
sqlite
"
}
]
;
await
createTestFiles
(
recoveryPath
simpleCopyFiles
)
;
let
postRecoveryEntry
=
await
placesBackupResource
.
recover
(
null
recoveryPath
destProfilePath
)
;
Assert
.
equal
(
postRecoveryEntry
null
"
PlacesBackupResource
.
recover
should
return
null
as
its
post
recovery
entry
"
)
;
await
assertFilesExist
(
destProfilePath
simpleCopyFiles
)
;
await
maybeRemovePath
(
recoveryPath
)
;
await
maybeRemovePath
(
destProfilePath
)
;
}
)
;
add_task
(
async
function
test_recover_bookmarks_only
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
placesBackupResource
=
new
PlacesBackupResource
(
)
;
let
recoveryPath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
recovery
-
test
"
)
;
let
destProfilePath
=
await
IOUtils
.
createUniqueDirectory
(
PathUtils
.
tempDir
"
PlacesBackupResource
-
test
-
profile
"
)
;
let
bookmarksImportStub
=
sandbox
.
stub
(
BookmarkJSONUtils
"
importFromFile
"
)
.
resolves
(
true
)
;
await
createTestFiles
(
recoveryPath
[
{
path
:
"
bookmarks
.
jsonlz4
"
}
]
)
;
let
postRecoveryEntry
=
await
placesBackupResource
.
recover
(
{
bookmarksOnly
:
true
}
recoveryPath
destProfilePath
)
;
let
expectedBookmarksPath
=
PathUtils
.
join
(
recoveryPath
"
bookmarks
.
jsonlz4
"
)
;
Assert
.
deepEqual
(
postRecoveryEntry
{
bookmarksBackupPath
:
expectedBookmarksPath
}
"
PlacesBackupResource
.
recover
should
return
the
expected
post
recovery
entry
"
)
;
for
(
let
placesFile
of
[
"
places
.
sqlite
"
"
favicons
.
sqlite
"
"
bookmarks
.
jsonlz4
"
]
)
{
Assert
.
ok
(
!
(
await
IOUtils
.
exists
(
PathUtils
.
join
(
destProfilePath
placesFile
)
)
)
{
placesFile
}
should
not
exist
in
the
new
profile
)
;
}
await
placesBackupResource
.
postRecovery
(
postRecoveryEntry
)
;
Assert
.
ok
(
bookmarksImportStub
.
calledOnce
"
BookmarkJSONUtils
.
importFromFile
was
called
in
the
postRecovery
step
"
)
;
await
maybeRemovePath
(
recoveryPath
)
;
await
maybeRemovePath
(
destProfilePath
)
;
sandbox
.
restore
(
)
;
}
)
;
