"
use
strict
"
;
const
{
ArchiveUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
backup
/
ArchiveUtils
.
sys
.
mjs
"
)
;
const
{
NonceUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
backup
/
ArchiveEncryption
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_nonce_arithmetic
(
)
{
let
nonce
=
new
Uint8Array
(
16
)
;
NonceUtils
.
incrementNonce
(
nonce
)
;
Assert
.
deepEqual
(
nonce
new
Uint8Array
(
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
]
)
)
;
NonceUtils
.
incrementNonce
(
nonce
255
)
;
Assert
.
deepEqual
(
nonce
new
Uint8Array
(
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
]
)
)
;
NonceUtils
.
incrementNonce
(
nonce
)
;
Assert
.
deepEqual
(
nonce
new
Uint8Array
(
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
]
)
)
;
NonceUtils
.
incrementNonce
(
nonce
255
)
;
Assert
.
deepEqual
(
nonce
new
Uint8Array
(
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
2
0
]
)
)
;
NonceUtils
.
incrementNonce
(
nonce
257
)
;
Assert
.
deepEqual
(
nonce
new
Uint8Array
(
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3
1
]
)
)
;
Assert
.
ok
(
!
NonceUtils
.
lastChunkSetOnNonce
(
nonce
)
"
Last
chunk
bit
hasn
'
t
been
flipped
yet
.
"
)
;
NonceUtils
.
setLastChunkOnNonce
(
nonce
)
;
Assert
.
deepEqual
(
nonce
new
Uint8Array
(
[
0
0
0
0
1
0
0
0
0
0
0
0
0
0
3
1
]
)
)
;
Assert
.
ok
(
NonceUtils
.
lastChunkSetOnNonce
(
nonce
)
"
Last
chunk
bit
was
flipped
.
"
)
;
}
)
;
add_task
(
async
function
test_exceed_size
(
)
{
let
nonce
=
new
Uint8Array
(
16
)
;
NonceUtils
.
incrementNonce
(
nonce
ArchiveUtils
.
ARCHIVE_MAX_BYTES_SIZE
/
ArchiveUtils
.
ARCHIVE_CHUNK_MAX_BYTES_SIZE
)
;
Assert
.
throws
(
(
)
=
>
{
NonceUtils
.
incrementNonce
(
nonce
)
;
}
/
Exceeded
/
)
;
}
)
;
