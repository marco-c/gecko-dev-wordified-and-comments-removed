"
use
strict
"
;
const
{
MigratorBase
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
MigratorBase
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_enabled_migrator
(
)
{
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
wizard
=
dialog
.
querySelector
(
"
migration
-
wizard
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
selector
{
}
prefsWin
)
;
await
new
Promise
(
resolve
=
>
{
shadow
.
querySelector
(
"
panel
-
list
"
)
.
addEventListener
(
"
shown
"
resolve
{
once
:
true
}
)
;
}
)
;
let
panelItem
=
shadow
.
querySelector
(
panel
-
item
[
key
=
"
{
InternalTestingProfileMigrator
.
key
}
"
]
)
;
Assert
.
ok
(
panelItem
"
The
InternalTestingProfileMigrator
panel
-
item
exists
.
"
)
;
panelItem
.
click
(
)
;
Assert
.
ok
(
selector
.
innerText
.
includes
(
"
Internal
Testing
Migrator
"
)
"
Testing
for
enabled
internal
testing
migrator
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_disabling_migrator
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
migrate
.
internal
-
testing
.
enabled
"
false
]
]
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
let
internalTestingMigrator
=
new
InternalTestingProfileMigrator
(
)
;
let
fakeMigrator
=
new
FakeMigrator
(
)
;
let
getMigratorStub
=
sandbox
.
stub
(
MigrationUtils
"
getMigrator
"
)
;
getMigratorStub
.
withArgs
(
"
internal
-
testing
"
)
.
resolves
(
internalTestingMigrator
)
;
getMigratorStub
.
withArgs
(
"
fake
-
migrator
"
)
.
resolves
(
fakeMigrator
)
;
sandbox
.
stub
(
MigrationUtils
"
availableMigratorKeys
"
)
.
get
(
(
)
=
>
{
return
[
"
internal
-
testing
"
"
fake
-
migrator
"
]
;
}
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
wizard
=
dialog
.
querySelector
(
"
migration
-
wizard
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
selector
{
}
prefsWin
)
;
await
new
Promise
(
resolve
=
>
{
shadow
.
querySelector
(
"
panel
-
list
"
)
.
addEventListener
(
"
shown
"
resolve
{
once
:
true
}
)
;
}
)
;
let
panelItem
=
shadow
.
querySelector
(
panel
-
item
[
key
=
"
{
InternalTestingProfileMigrator
.
key
}
"
]
)
;
Assert
.
ok
(
!
panelItem
"
The
panel
-
item
for
the
InternalTestingProfileMigrator
does
not
exist
"
)
;
}
)
;
sandbox
.
restore
(
)
;
}
)
;
class
FakeMigrator
extends
MigratorBase
{
static
get
key
(
)
{
return
"
fake
-
migrator
"
;
}
static
get
displayNameL10nID
(
)
{
return
"
migration
-
wizard
-
migrator
-
display
-
name
-
firefox
"
;
}
getResources
(
)
{
return
Object
.
values
(
MigrationUtils
.
resourceTypes
)
.
map
(
type
=
>
{
return
{
type
migrate
:
callback
=
>
{
callback
(
true
)
;
}
}
;
}
)
;
}
get
enabled
(
)
{
return
true
;
}
}
