"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
migrate
.
chrome
.
get_permissions
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_permissions
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
canGetPermissions
"
)
.
resolves
(
"
/
some
/
path
"
)
;
let
hasPermissionsStub
=
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
hasPermissions
"
)
.
resolves
(
false
)
;
let
testingMigrator
=
await
MigrationUtils
.
getMigrator
(
InternalTestingProfileMigrator
.
key
)
;
Assert
.
ok
(
testingMigrator
"
Got
migrator
even
though
we
don
'
t
yet
have
permission
to
read
its
resources
.
"
)
;
sandbox
.
stub
(
testingMigrator
"
getPermissions
"
)
.
callsFake
(
async
(
)
=
>
{
testingMigrator
.
flushResourceCache
(
)
;
hasPermissionsStub
.
resolves
(
true
)
;
return
Promise
.
resolve
(
true
)
;
}
)
;
let
getResourcesStub
=
sandbox
.
stub
(
testingMigrator
"
getResources
"
)
.
resolves
(
[
]
)
;
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
InternalTestingProfileMigrator
.
testProfile
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
panelItem
=
shadow
.
querySelector
(
panel
-
item
[
key
=
"
{
InternalTestingProfileMigrator
.
key
}
"
]
)
;
panelItem
.
click
(
)
;
let
resourceList
=
shadow
.
querySelector
(
"
.
resource
-
selection
-
details
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
resourceList
)
"
Resources
list
is
hidden
.
"
)
;
let
importButton
=
shadow
.
querySelector
(
"
#
import
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
importButton
)
"
Import
button
hidden
.
"
)
;
let
noPermissionsMessage
=
shadow
.
querySelector
(
"
.
no
-
permissions
-
message
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
noPermissionsMessage
)
"
No
permissions
message
shown
.
"
)
;
let
getPermissionButton
=
shadow
.
querySelector
(
"
#
get
-
permissions
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
getPermissionButton
)
"
Get
permissions
button
shown
.
"
)
;
getResourcesStub
.
restore
(
)
;
hasPermissionsStub
.
restore
(
)
;
let
refreshDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
Ready
"
)
;
getPermissionButton
.
click
(
)
;
await
refreshDone
;
Assert
.
ok
(
true
"
Refreshed
migrator
list
.
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
await
migration
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
doneButton
=
shadow
.
querySelector
(
"
div
[
name
=
'
page
-
progress
'
]
.
done
-
button
"
)
;
await
new
Promise
(
resolve
=
>
prefsWin
.
requestAnimationFrame
(
resolve
)
)
;
Assert
.
equal
(
shadow
.
activeElement
doneButton
"
Done
button
should
be
focused
.
"
)
;
let
dialogClosed
=
BrowserTestUtils
.
waitForEvent
(
dialog
"
close
"
)
;
doneButton
.
click
(
)
;
await
dialogClosed
;
}
)
;
}
)
;
