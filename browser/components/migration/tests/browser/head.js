"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
migration
/
tests
/
browser
/
head
-
common
.
js
"
this
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
const
{
InternalTestingProfileMigrator
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
InternalTestingProfileMigrator
.
sys
.
mjs
"
)
;
const
DIALOG_URL
=
"
chrome
:
/
/
browser
/
content
/
migration
/
migration
-
dialog
-
window
.
html
"
;
const
EXPECTED_QUANTITY
=
123
;
const
RESOURCE_TYPES_WITH_QUANTITIES
=
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
HISTORY
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
FORMDATA
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PAYMENT_METHODS
]
;
async
function
withMigrationWizardDialog
(
taskFn
)
{
let
migrationDialogPromise
=
waitForMigrationWizardDialogTab
(
)
;
await
MigrationUtils
.
showMigrationWizard
(
window
{
}
)
;
let
prefsBrowser
=
await
migrationDialogPromise
;
try
{
await
taskFn
(
prefsBrowser
.
contentWindow
)
;
}
finally
{
if
(
gBrowser
.
tabs
.
length
>
1
)
{
BrowserTestUtils
.
removeTab
(
gBrowser
.
getTabForBrowser
(
prefsBrowser
)
)
;
}
else
{
BrowserTestUtils
.
loadURIString
(
prefsBrowser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
prefsBrowser
)
;
}
}
}
async
function
waitForMigrationWizardDialogTab
(
)
{
let
wizardReady
=
BrowserTestUtils
.
waitForEvent
(
window
"
MigrationWizard
:
Ready
"
)
;
let
tab
;
if
(
gBrowser
.
selectedTab
.
isEmpty
)
{
tab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
url
=
>
{
return
url
.
startsWith
(
"
about
:
preferences
"
)
;
}
)
;
}
else
{
tab
=
await
BrowserTestUtils
.
waitForNewTab
(
gBrowser
url
=
>
{
return
url
.
startsWith
(
"
about
:
preferences
"
)
;
}
)
;
}
await
wizardReady
;
info
(
"
Done
waiting
-
migration
subdialog
loaded
and
ready
.
"
)
;
return
tab
.
linkedBrowser
;
}
async
function
waitForTestMigration
(
availableResourceTypes
expectedResourceTypes
expectedProfile
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
getResources
"
)
.
callsFake
(
aProfile
=
>
{
Assert
.
deepEqual
(
aProfile
expectedProfile
"
Should
have
gotten
the
expected
profile
.
"
)
;
return
Promise
.
resolve
(
availableResourceTypes
.
map
(
resourceType
=
>
{
return
{
type
:
resourceType
migrate
:
(
)
=
>
{
}
}
;
}
)
)
;
}
)
;
sandbox
.
stub
(
MigrationUtils
"
_importQuantities
"
)
.
value
(
{
bookmarks
:
EXPECTED_QUANTITY
history
:
EXPECTED_QUANTITY
logins
:
EXPECTED_QUANTITY
cards
:
EXPECTED_QUANTITY
}
)
;
return
new
Promise
(
resolve
=
>
{
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
migrate
"
)
.
callsFake
(
(
aResourceTypes
aStartup
aProfile
aProgressCallback
)
=
>
{
Assert
.
ok
(
!
aStartup
"
Migrator
should
not
have
been
called
as
a
startup
migration
.
"
)
;
let
bitMask
=
0
;
for
(
let
resourceType
of
expectedResourceTypes
)
{
bitMask
|
=
resourceType
;
}
Assert
.
deepEqual
(
aResourceTypes
bitMask
"
Got
the
expected
resource
types
"
)
;
Assert
.
deepEqual
(
aProfile
expectedProfile
"
Got
the
expected
profile
object
"
)
;
for
(
let
resourceType
of
expectedResourceTypes
)
{
aProgressCallback
(
resourceType
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
Migration
:
Ended
"
)
;
resolve
(
)
;
}
)
;
}
)
.
finally
(
async
(
)
=
>
{
sandbox
.
restore
(
)
;
let
migrator
=
await
MigrationUtils
.
getMigrator
(
InternalTestingProfileMigrator
.
key
)
;
migrator
.
flushResourceCache
(
)
;
}
)
;
}
async
function
selectResourceTypesAndStartMigration
(
wizard
selectedResourceTypes
migratorKey
=
InternalTestingProfileMigrator
.
key
)
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
selector
.
click
(
)
;
await
new
Promise
(
resolve
=
>
{
wizard
.
querySelector
(
"
panel
-
list
"
)
.
addEventListener
(
"
shown
"
resolve
{
once
:
true
}
)
;
}
)
;
let
panelItem
=
wizard
.
querySelector
(
panel
-
item
[
key
=
"
{
migratorKey
}
"
]
)
;
panelItem
.
click
(
)
;
let
resourceTypeList
=
shadow
.
querySelector
(
"
#
resource
-
type
-
list
"
)
;
for
(
let
resourceType
of
getChoosableResourceTypes
(
)
)
{
let
node
=
resourceTypeList
.
querySelector
(
label
[
data
-
resource
-
type
=
"
{
resourceType
}
"
]
)
;
node
.
control
.
checked
=
selectedResourceTypes
.
includes
(
resourceType
)
;
}
let
importButton
=
shadow
.
querySelector
(
"
#
import
"
)
;
importButton
.
click
(
)
;
}
function
assertQuantitiesShown
(
wizard
expectedResourceTypes
)
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
deck
=
shadow
.
querySelector
(
"
#
wizard
-
deck
"
)
;
Assert
.
equal
(
deck
.
selectedViewName
page
-
{
MigrationWizardConstants
.
PAGES
.
PROGRESS
}
)
;
let
progressGroups
=
shadow
.
querySelectorAll
(
"
.
resource
-
progress
-
group
"
)
;
for
(
let
progressGroup
of
progressGroups
)
{
if
(
expectedResourceTypes
.
includes
(
progressGroup
.
dataset
.
resourceType
)
)
{
let
progressIcon
=
progressGroup
.
querySelector
(
"
.
progress
-
icon
"
)
;
let
successText
=
progressGroup
.
querySelector
(
"
.
success
-
text
"
)
.
textContent
;
Assert
.
ok
(
progressIcon
.
classList
.
contains
(
"
completed
"
)
"
Should
be
showing
completed
state
.
"
)
;
if
(
RESOURCE_TYPES_WITH_QUANTITIES
.
includes
(
progressGroup
.
dataset
.
resourceType
)
)
{
if
(
progressGroup
.
dataset
.
resourceType
=
=
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
HISTORY
)
{
Assert
.
notEqual
(
successText
.
indexOf
(
MigrationUtils
.
HISTORY_MAX_AGE_IN_DAYS
)
-
1
Found
expected
maximum
number
of
days
of
history
:
{
successText
}
)
;
}
else
if
(
progressGroup
.
dataset
.
resourceType
=
=
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
FORMDATA
)
{
Assert
.
equal
(
successText
"
Form
history
"
Found
expected
form
data
string
:
{
successText
}
)
;
}
else
{
Assert
.
notEqual
(
successText
.
indexOf
(
EXPECTED_QUANTITY
)
-
1
Found
expected
quantity
in
success
string
:
{
successText
}
)
;
}
}
else
{
Assert
.
equal
(
successText
"
"
"
Expected
the
empty
string
if
the
resource
type
"
+
"
isn
'
t
in
RESOURCE_TYPES_WITH_QUANTITIES
"
)
;
}
}
else
{
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
progressGroup
)
Resource
progress
group
for
{
progressGroup
.
dataset
.
resourceType
}
+
should
be
hidden
.
)
;
}
}
}
