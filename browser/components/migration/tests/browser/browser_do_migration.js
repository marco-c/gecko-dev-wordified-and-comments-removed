"
use
strict
"
;
const
{
sinon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
)
;
const
{
InternalTestingProfileMigrator
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
InternalTestingProfileMigrator
.
sys
.
mjs
"
)
;
async
function
waitForTestMigration
(
availableResourceTypes
expectedResourceTypes
expectedProfile
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
getResources
"
)
.
callsFake
(
(
)
=
>
{
return
Promise
.
resolve
(
availableResourceTypes
.
map
(
resourceType
=
>
{
return
{
type
:
resourceType
migrate
:
(
)
=
>
{
}
}
;
}
)
)
;
}
)
;
return
new
Promise
(
resolve
=
>
{
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
migrate
"
)
.
callsFake
(
(
aResourceTypes
aStartup
aProfile
)
=
>
{
Assert
.
ok
(
!
aStartup
"
Migrator
should
not
have
been
called
as
a
startup
migration
.
"
)
;
Assert
.
deepEqual
(
aResourceTypes
expectedResourceTypes
"
Got
the
expected
resource
types
"
)
;
Assert
.
deepEqual
(
aProfile
expectedProfile
"
Got
the
expected
profile
object
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
Migration
:
Ended
"
)
;
resolve
(
)
;
}
)
;
}
)
.
finally
(
async
(
)
=
>
{
sandbox
.
restore
(
)
;
let
migrator
=
await
MigrationUtils
.
getMigrator
(
InternalTestingProfileMigrator
.
key
)
;
migrator
.
flushResourceCache
(
)
;
}
)
;
}
function
selectResourceTypesAndStartMigration
(
wizard
selectedResourceTypes
)
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
selector
.
value
=
InternalTestingProfileMigrator
.
key
;
selector
.
dispatchEvent
(
new
CustomEvent
(
"
change
"
{
bubbles
:
true
}
)
)
;
let
resourceTypeList
=
shadow
.
querySelector
(
"
#
resource
-
type
-
list
"
)
;
for
(
let
resourceType
in
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
)
{
let
node
=
resourceTypeList
.
querySelector
(
label
[
data
-
resource
-
type
=
"
{
resourceType
}
"
]
)
;
node
.
control
.
checked
=
selectedResourceTypes
.
includes
(
resourceType
)
;
}
let
importButton
=
shadow
.
querySelector
(
"
#
import
"
)
;
importButton
.
click
(
)
;
}
add_task
(
async
function
test_successful_migrations
(
)
{
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
null
)
;
await
withMigrationWizardSubdialog
(
async
subdialogWin
=
>
{
let
dialogBody
=
subdialogWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
#
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
await
migration
;
await
wizardDone
;
}
)
;
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
[
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
null
)
;
await
withMigrationWizardSubdialog
(
async
subdialogWin
=
>
{
let
dialogBody
=
subdialogWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
#
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
await
migration
;
await
wizardDone
;
}
)
;
}
)
;
