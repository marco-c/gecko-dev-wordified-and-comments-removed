"
use
strict
"
;
const
RESOURCE_TYPES_WITH_QUANTITIES
=
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
HISTORY
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
FORMDATA
]
;
function
assertQuantitiesShown
(
wizard
expectedResourceTypes
)
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
deck
=
shadow
.
querySelector
(
"
#
wizard
-
deck
"
)
;
Assert
.
equal
(
deck
.
selectedViewName
page
-
{
MigrationWizardConstants
.
PAGES
.
PROGRESS
}
)
;
let
progressGroups
=
shadow
.
querySelectorAll
(
"
.
resource
-
progress
-
group
"
)
;
for
(
let
progressGroup
of
progressGroups
)
{
if
(
expectedResourceTypes
.
includes
(
progressGroup
.
dataset
.
resourceType
)
)
{
let
progressIcon
=
progressGroup
.
querySelector
(
"
.
progress
-
icon
"
)
;
let
successText
=
progressGroup
.
querySelector
(
"
.
success
-
text
"
)
.
textContent
;
Assert
.
ok
(
progressIcon
.
classList
.
contains
(
"
completed
"
)
"
Should
be
showing
completed
state
.
"
)
;
if
(
RESOURCE_TYPES_WITH_QUANTITIES
.
includes
(
progressGroup
.
dataset
.
resourceType
)
)
{
if
(
progressGroup
.
dataset
.
resourceType
=
=
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
HISTORY
)
{
Assert
.
notEqual
(
successText
.
indexOf
(
MigrationUtils
.
HISTORY_MAX_AGE_IN_DAYS
)
-
1
Found
expected
maximum
number
of
days
of
history
:
{
successText
}
)
;
}
else
if
(
progressGroup
.
dataset
.
resourceType
=
=
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
FORMDATA
)
{
Assert
.
equal
(
successText
"
Form
history
"
Found
expected
form
data
string
:
{
successText
}
)
;
}
else
{
Assert
.
notEqual
(
successText
.
indexOf
(
EXPECTED_QUANTITY
)
-
1
Found
expected
quantity
in
success
string
:
{
successText
}
)
;
}
}
else
{
Assert
.
equal
(
successText
"
"
"
Expected
the
empty
string
if
the
resource
type
"
+
"
isn
'
t
in
RESOURCE_TYPES_WITH_QUANTITIES
"
)
;
}
}
else
{
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
progressGroup
)
Resource
progress
group
for
{
progressGroup
.
dataset
.
resourceType
}
+
should
be
hidden
.
)
;
}
}
}
add_task
(
async
function
test_successful_migrations
(
)
{
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
InternalTestingProfileMigrator
.
testProfile
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
await
new
Promise
(
resolve
=
>
prefsWin
.
requestAnimationFrame
(
resolve
)
)
;
Assert
.
equal
(
shadow
.
activeElement
selector
"
Selector
should
be
focused
.
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
await
migration
;
await
wizardDone
;
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
doneButton
=
shadow
.
querySelector
(
"
#
done
-
button
"
)
;
await
new
Promise
(
resolve
=
>
prefsWin
.
requestAnimationFrame
(
resolve
)
)
;
Assert
.
equal
(
shadow
.
activeElement
doneButton
"
Done
button
should
be
focused
.
"
)
;
let
dialogClosed
=
BrowserTestUtils
.
waitForEvent
(
dialog
"
close
"
)
;
doneButton
.
click
(
)
;
await
dialogClosed
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
}
)
;
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
[
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
InternalTestingProfileMigrator
.
testProfile
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
await
new
Promise
(
resolve
=
>
prefsWin
.
requestAnimationFrame
(
resolve
)
)
;
Assert
.
equal
(
shadow
.
activeElement
selector
"
Selector
should
be
focused
.
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
await
migration
;
await
wizardDone
;
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
doneButton
=
shadow
.
querySelector
(
"
#
done
-
button
"
)
;
await
new
Promise
(
resolve
=
>
prefsWin
.
requestAnimationFrame
(
resolve
)
)
;
Assert
.
equal
(
shadow
.
activeElement
doneButton
"
Done
button
should
be
focused
.
"
)
;
let
dialogClosed
=
BrowserTestUtils
.
waitForEvent
(
dialog
"
close
"
)
;
doneButton
.
click
(
)
;
await
dialogClosed
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
}
)
;
let
allResourceTypeStrs
=
Object
.
values
(
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
)
;
let
allResourceTypes
=
allResourceTypeStrs
.
map
(
resourceTypeStr
=
>
{
return
MigrationUtils
.
resourceTypes
[
resourceTypeStr
]
;
}
)
;
migration
=
waitForTestMigration
(
allResourceTypes
allResourceTypes
InternalTestingProfileMigrator
.
testProfile
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
await
new
Promise
(
resolve
=
>
prefsWin
.
requestAnimationFrame
(
resolve
)
)
;
Assert
.
equal
(
shadow
.
activeElement
selector
"
Selector
should
be
focused
.
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
allResourceTypeStrs
)
;
await
migration
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
allResourceTypeStrs
)
;
}
)
;
}
)
;
add_task
(
async
function
test_invalid_resource_type
(
)
{
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
InternalTestingProfileMigrator
.
testProfile
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
HISTORY
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
FORMDATA
]
)
;
await
migration
;
await
wizardDone
;
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
doneButton
=
shadow
.
querySelector
(
"
#
done
-
button
"
)
;
await
new
Promise
(
resolve
=
>
prefsWin
.
requestAnimationFrame
(
resolve
)
)
;
Assert
.
equal
(
shadow
.
activeElement
doneButton
"
Done
button
should
be
focused
.
"
)
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
let
dialogClosed
=
BrowserTestUtils
.
waitForEvent
(
dialog
"
close
"
)
;
doneButton
.
click
(
)
;
await
dialogClosed
;
}
)
;
}
)
;
