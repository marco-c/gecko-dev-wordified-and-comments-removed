"
use
strict
"
;
const
{
sinon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
)
;
const
{
InternalTestingProfileMigrator
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
InternalTestingProfileMigrator
.
sys
.
mjs
"
)
;
const
RESOURCE_TYPES_WITH_QUANTITIES
=
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
HISTORY
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
;
const
EXPECTED_QUANTITY
=
123
;
async
function
waitForTestMigration
(
availableResourceTypes
expectedResourceTypes
expectedProfile
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
getResources
"
)
.
callsFake
(
(
)
=
>
{
return
Promise
.
resolve
(
availableResourceTypes
.
map
(
resourceType
=
>
{
return
{
type
:
resourceType
migrate
:
(
)
=
>
{
}
}
;
}
)
)
;
}
)
;
sandbox
.
stub
(
MigrationUtils
"
_importQuantities
"
)
.
value
(
{
bookmarks
:
EXPECTED_QUANTITY
history
:
EXPECTED_QUANTITY
logins
:
EXPECTED_QUANTITY
}
)
;
return
new
Promise
(
resolve
=
>
{
sandbox
.
stub
(
InternalTestingProfileMigrator
.
prototype
"
migrate
"
)
.
callsFake
(
(
aResourceTypes
aStartup
aProfile
aProgressCallback
)
=
>
{
Assert
.
ok
(
!
aStartup
"
Migrator
should
not
have
been
called
as
a
startup
migration
.
"
)
;
let
bitMask
=
0
;
for
(
let
resourceType
of
expectedResourceTypes
)
{
bitMask
|
=
resourceType
;
}
Assert
.
deepEqual
(
aResourceTypes
bitMask
"
Got
the
expected
resource
types
"
)
;
Assert
.
deepEqual
(
aProfile
expectedProfile
"
Got
the
expected
profile
object
"
)
;
for
(
let
resourceType
of
expectedResourceTypes
)
{
aProgressCallback
(
resourceType
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
Migration
:
Ended
"
)
;
resolve
(
)
;
}
)
;
}
)
.
finally
(
async
(
)
=
>
{
sandbox
.
restore
(
)
;
let
migrator
=
await
MigrationUtils
.
getMigrator
(
InternalTestingProfileMigrator
.
key
)
;
migrator
.
flushResourceCache
(
)
;
}
)
;
}
function
selectResourceTypesAndStartMigration
(
wizard
selectedResourceTypes
)
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
selector
=
shadow
.
querySelector
(
"
#
browser
-
profile
-
selector
"
)
;
selector
.
value
=
InternalTestingProfileMigrator
.
key
;
selector
.
dispatchEvent
(
new
CustomEvent
(
"
change
"
{
bubbles
:
true
}
)
)
;
let
resourceTypeList
=
shadow
.
querySelector
(
"
#
resource
-
type
-
list
"
)
;
for
(
let
resourceType
in
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
)
{
let
node
=
resourceTypeList
.
querySelector
(
label
[
data
-
resource
-
type
=
"
{
resourceType
}
"
]
)
;
node
.
control
.
checked
=
selectedResourceTypes
.
includes
(
resourceType
)
;
}
let
importButton
=
shadow
.
querySelector
(
"
#
import
"
)
;
importButton
.
click
(
)
;
}
function
assertQuantitiesShown
(
wizard
expectedResourceTypes
)
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
deck
=
shadow
.
querySelector
(
"
#
wizard
-
deck
"
)
;
Assert
.
equal
(
deck
.
selectedViewName
page
-
{
MigrationWizardConstants
.
PAGES
.
PROGRESS
}
)
;
let
progressGroups
=
shadow
.
querySelectorAll
(
"
.
resource
-
progress
-
group
"
)
;
for
(
let
progressGroup
of
progressGroups
)
{
if
(
expectedResourceTypes
.
includes
(
progressGroup
.
dataset
.
resourceType
)
)
{
let
progressIcon
=
progressGroup
.
querySelector
(
"
.
progress
-
icon
"
)
;
let
successText
=
progressGroup
.
querySelector
(
"
.
success
-
text
"
)
.
textContent
;
Assert
.
ok
(
progressIcon
.
classList
.
contains
(
"
completed
"
)
"
Should
be
showing
completed
state
.
"
)
;
if
(
RESOURCE_TYPES_WITH_QUANTITIES
.
includes
(
progressGroup
.
dataset
.
resourceType
)
)
{
Assert
.
notEqual
(
successText
.
indexOf
(
EXPECTED_QUANTITY
)
-
1
Found
expected
quantity
in
success
string
:
{
successText
}
)
;
}
else
{
Assert
.
equal
(
successText
"
"
"
Expected
the
empty
string
if
the
resource
type
"
+
"
isn
'
t
in
RESOURCE_TYPES_WITH_QUANTITIES
"
)
;
}
}
else
{
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
progressGroup
)
Resource
progress
group
for
{
progressGroup
.
dataset
.
resourceType
}
+
should
be
hidden
.
)
;
}
}
}
add_task
(
async
function
test_successful_migrations
(
)
{
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
]
null
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
await
migration
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
}
)
;
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
[
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
null
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
await
migration
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
}
)
;
let
allResourceTypeStrs
=
Object
.
values
(
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
)
;
let
allResourceTypes
=
allResourceTypeStrs
.
map
(
resourceTypeStr
=
>
{
return
MigrationUtils
.
resourceTypes
[
resourceTypeStr
]
;
}
)
;
migration
=
waitForTestMigration
(
allResourceTypes
allResourceTypes
null
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
allResourceTypeStrs
)
;
await
migration
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
allResourceTypeStrs
)
;
}
)
;
}
)
;
