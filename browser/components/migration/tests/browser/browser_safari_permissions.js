"
use
strict
"
;
const
{
SafariProfileMigrator
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
SafariProfileMigrator
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_safari_permissions
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
let
safariMigrator
=
new
SafariProfileMigrator
(
)
;
sandbox
.
stub
(
MigrationUtils
"
getMigrator
"
)
.
resolves
(
safariMigrator
)
;
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
hasPermissions
"
)
.
onFirstCall
(
)
.
resolves
(
false
)
.
onSecondCall
(
)
.
resolves
(
true
)
;
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
getPermissions
"
)
.
resolves
(
true
)
;
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
getResources
"
)
.
callsFake
(
(
)
=
>
{
return
Promise
.
resolve
(
[
{
type
:
MigrationUtils
.
resourceTypes
.
BOOKMARKS
migrate
:
(
)
=
>
{
}
}
]
)
;
}
)
;
let
didMigration
=
new
Promise
(
resolve
=
>
{
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
migrate
"
)
.
callsFake
(
(
aResourceTypes
aStartup
aProfile
aProgressCallback
)
=
>
{
Assert
.
ok
(
!
aStartup
"
Migrator
should
not
have
been
called
as
a
startup
migration
.
"
)
;
aProgressCallback
(
MigrationUtils
.
resourceTypes
.
BOOKMARKS
)
;
Services
.
obs
.
notifyObservers
(
null
"
Migration
:
Ended
"
)
;
resolve
(
)
;
}
)
;
}
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
info
(
"
Choosing
Safari
"
)
;
let
panelItem
=
shadow
.
querySelector
(
panel
-
item
[
key
=
"
{
SafariProfileMigrator
.
key
}
"
]
)
;
panelItem
.
click
(
)
;
let
resourceTypeList
=
shadow
.
querySelector
(
"
#
resource
-
type
-
list
"
)
;
let
resourceNodes
=
resourceTypeList
.
querySelectorAll
(
label
[
data
-
resource
-
type
]
)
;
for
(
let
resourceNode
of
resourceNodes
)
{
resourceNode
.
control
.
checked
=
resourceNode
.
dataset
.
resourceType
=
=
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
;
}
let
deck
=
shadow
.
querySelector
(
"
#
wizard
-
deck
"
)
;
let
switchedToSafariPermissionPage
=
BrowserTestUtils
.
waitForMutationCondition
(
deck
{
attributeFilter
:
[
"
selected
-
view
"
]
}
(
)
=
>
{
return
(
deck
.
getAttribute
(
"
selected
-
view
"
)
=
=
"
page
-
"
+
MigrationWizardConstants
.
PAGES
.
SAFARI_PERMISSION
)
;
}
)
;
let
importButton
=
shadow
.
querySelector
(
"
#
import
"
)
;
importButton
.
click
(
)
;
await
switchedToSafariPermissionPage
;
Assert
.
ok
(
true
"
Went
to
Safari
permission
page
after
attempting
import
.
"
)
;
let
requestPermissions
=
shadow
.
querySelector
(
"
#
safari
-
request
-
permissions
"
)
;
requestPermissions
.
click
(
)
;
await
didMigration
;
Assert
.
ok
(
true
"
Completed
migration
"
)
;
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
doneButton
=
shadow
.
querySelector
(
"
div
[
name
=
'
page
-
progress
'
]
.
done
-
button
"
)
;
let
dialogClosed
=
BrowserTestUtils
.
waitForEvent
(
dialog
"
close
"
)
;
doneButton
.
click
(
)
;
await
dialogClosed
;
await
wizardDone
;
}
)
;
}
)
;
