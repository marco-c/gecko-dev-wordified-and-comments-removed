"
use
strict
"
;
const
{
SafariProfileMigrator
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
SafariProfileMigrator
.
sys
.
mjs
"
)
;
const
{
LoginCSVImport
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
LoginCSVImport
.
sys
.
mjs
"
)
;
const
TEST_FILE_PATH
=
getTestFilePath
(
"
dummy_file
.
csv
"
)
;
const
{
MockFilePicker
}
=
SpecialPowers
;
add_setup
(
async
function
(
)
{
MockFilePicker
.
init
(
window
.
browsingContext
)
;
registerCleanupFunction
(
(
)
=
>
{
MockFilePicker
.
cleanup
(
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
signon
.
management
.
page
.
fileImport
.
enabled
"
true
]
]
}
)
;
}
)
;
async
function
testSafariPasswordHelper
(
expectsFilePicker
migrateBookmarks
shouldPasswordImportFail
taskFn
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
let
safariMigrator
=
new
SafariProfileMigrator
(
)
;
sandbox
.
stub
(
MigrationUtils
"
getMigrator
"
)
.
resolves
(
safariMigrator
)
;
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
hasPermissions
"
)
.
resolves
(
true
)
;
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
getMigrateData
"
)
.
resolves
(
MigrationUtils
.
resourceTypes
.
BOOKMARKS
)
;
let
migrateStub
;
let
didMigration
=
new
Promise
(
resolve
=
>
{
migrateStub
=
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
migrate
"
)
.
callsFake
(
(
aResourceTypes
aStartup
aProfile
aProgressCallback
)
=
>
{
if
(
!
migrateBookmarks
)
{
Assert
.
ok
(
false
"
Should
not
have
called
migrate
when
only
migrating
Safari
passwords
.
"
)
;
}
Assert
.
ok
(
!
aStartup
"
Migrator
should
not
have
been
called
as
a
startup
migration
.
"
)
;
Assert
.
ok
(
aResourceTypes
&
MigrationUtils
.
resourceTypes
.
BOOKMARKS
"
Should
have
requested
to
migrate
the
BOOKMARKS
resource
.
"
)
;
Assert
.
ok
(
!
(
aResourceTypes
&
MigrationUtils
.
resourceTypes
.
PASSWORDS
)
"
Should
not
have
requested
to
migrate
the
PASSWORDS
resource
.
"
)
;
aProgressCallback
(
MigrationUtils
.
resourceTypes
.
BOOKMARKS
true
)
;
Services
.
obs
.
notifyObservers
(
null
"
Migration
:
Ended
"
)
;
resolve
(
)
;
}
)
;
}
)
;
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
EXPECTED_QUANTITY
;
+
+
i
)
{
results
.
push
(
{
result
:
"
added
"
}
)
;
}
let
importFromCSVStub
=
sandbox
.
stub
(
LoginCSVImport
"
importFromCSV
"
)
;
if
(
shouldPasswordImportFail
)
{
importFromCSVStub
.
rejects
(
new
Error
(
"
Some
error
message
"
)
)
;
}
else
{
importFromCSVStub
.
resolves
(
results
)
;
}
sandbox
.
stub
(
MigrationUtils
"
_importQuantities
"
)
.
value
(
{
bookmarks
:
EXPECTED_QUANTITY
}
)
;
let
filePickerShownPromise
;
if
(
expectsFilePicker
)
{
MockFilePicker
.
reset
(
)
;
let
dummyFile
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
dummyFile
.
initWithPath
(
TEST_FILE_PATH
)
;
filePickerShownPromise
=
new
Promise
(
resolve
=
>
{
MockFilePicker
.
showCallback
=
(
)
=
>
{
Assert
.
ok
(
true
"
Filepicker
shown
.
"
)
;
MockFilePicker
.
setFiles
(
[
dummyFile
]
)
;
resolve
(
)
;
}
;
}
)
;
MockFilePicker
.
returnValue
=
MockFilePicker
.
returnOK
;
}
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
info
(
"
Choosing
Safari
"
)
;
let
panelItem
=
shadow
.
querySelector
(
panel
-
item
[
key
=
"
{
SafariProfileMigrator
.
key
}
"
]
)
;
panelItem
.
click
(
)
;
let
resourceTypeList
=
shadow
.
querySelector
(
"
#
resource
-
type
-
list
"
)
;
let
bookmarksNode
=
resourceTypeList
.
querySelector
(
label
[
data
-
resource
-
type
=
"
{
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
}
"
]
)
;
bookmarksNode
.
control
.
checked
=
migrateBookmarks
;
let
passwordsNode
=
resourceTypeList
.
querySelector
(
label
[
data
-
resource
-
type
=
"
{
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
}
"
]
)
;
Assert
.
ok
(
!
passwordsNode
.
hidden
"
PASSWORDS
should
be
available
to
import
from
.
"
)
;
passwordsNode
.
control
.
checked
=
true
;
let
deck
=
shadow
.
querySelector
(
"
#
wizard
-
deck
"
)
;
let
switchedToSafariPermissionPage
=
BrowserTestUtils
.
waitForMutationCondition
(
deck
{
attributeFilter
:
[
"
selected
-
view
"
]
}
(
)
=
>
{
return
(
deck
.
getAttribute
(
"
selected
-
view
"
)
=
=
"
page
-
"
+
MigrationWizardConstants
.
PAGES
.
SAFARI_PASSWORD_PERMISSION
)
;
}
)
;
let
importButton
=
shadow
.
querySelector
(
"
#
import
"
)
;
importButton
.
click
(
)
;
await
switchedToSafariPermissionPage
;
Assert
.
ok
(
true
"
Went
to
Safari
permission
page
after
attempting
import
.
"
)
;
await
taskFn
(
wizard
filePickerShownPromise
importFromCSVStub
didMigration
migrateStub
wizardDone
)
;
let
dialog
=
prefsWin
.
document
.
querySelector
(
"
#
migrationWizardDialog
"
)
;
let
doneButton
=
shadow
.
querySelector
(
"
div
[
name
=
'
page
-
progress
'
]
.
done
-
button
"
)
;
let
dialogClosed
=
BrowserTestUtils
.
waitForEvent
(
dialog
"
close
"
)
;
doneButton
.
click
(
)
;
await
dialogClosed
;
}
)
;
sandbox
.
restore
(
)
;
MockFilePicker
.
reset
(
)
;
}
add_task
(
async
function
test_safari_password_do_import
(
)
{
await
testSafariPasswordHelper
(
true
true
false
async
(
wizard
filePickerShownPromise
importFromCSVStub
didMigration
migrateStub
wizardDone
)
=
>
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
safariPasswordImportSelect
=
shadow
.
querySelector
(
"
#
safari
-
password
-
import
-
select
"
)
;
safariPasswordImportSelect
.
click
(
)
;
await
filePickerShownPromise
;
Assert
.
ok
(
true
"
File
picker
was
shown
.
"
)
;
await
didMigration
;
Assert
.
ok
(
importFromCSVStub
.
called
"
Importing
from
CSV
was
called
.
"
)
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_safari_password_only_do_import
(
)
{
await
testSafariPasswordHelper
(
true
false
false
async
(
wizard
filePickerShownPromise
importFromCSVStub
didMigration
migrateStub
wizardDone
)
=
>
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
safariPasswordImportSelect
=
shadow
.
querySelector
(
"
#
safari
-
password
-
import
-
select
"
)
;
safariPasswordImportSelect
.
click
(
)
;
await
filePickerShownPromise
;
Assert
.
ok
(
true
"
File
picker
was
shown
.
"
)
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
Assert
.
ok
(
importFromCSVStub
.
called
"
Importing
from
CSV
was
called
.
"
)
;
Assert
.
ok
(
!
migrateStub
.
called
"
SafariProfileMigrator
.
migrate
was
not
called
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_safari_password_empty_csv_file
(
)
{
await
testSafariPasswordHelper
(
true
true
true
async
(
wizard
filePickerShownPromise
importFromCSVStub
didMigration
migrateStub
wizardDone
)
=
>
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
safariPasswordImportSelect
=
shadow
.
querySelector
(
"
#
safari
-
password
-
import
-
select
"
)
;
safariPasswordImportSelect
.
click
(
)
;
await
filePickerShownPromise
;
Assert
.
ok
(
true
"
File
picker
was
shown
.
"
)
;
await
didMigration
;
Assert
.
ok
(
importFromCSVStub
.
called
"
Importing
from
CSV
was
called
.
"
)
;
await
wizardDone
;
let
headerL10nID
=
shadow
.
querySelector
(
"
#
progress
-
header
"
)
.
dataset
.
l10nId
;
Assert
.
equal
(
headerL10nID
"
migration
-
wizard
-
progress
-
done
-
with
-
warnings
-
header
"
)
;
let
progressGroup
=
shadow
.
querySelector
(
.
resource
-
progress
-
group
[
data
-
resource
-
type
=
"
{
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
}
"
)
;
let
progressIcon
=
progressGroup
.
querySelector
(
"
.
progress
-
icon
"
)
;
let
messageText
=
progressGroup
.
querySelector
(
"
.
message
-
text
"
)
.
textContent
;
Assert
.
equal
(
progressIcon
.
getAttribute
(
"
state
"
)
"
warning
"
"
Icon
should
be
in
the
warning
state
.
"
)
;
Assert
.
stringMatches
(
messageText
/
file
doesn
t
include
any
valid
password
data
/
)
;
}
)
;
}
)
;
add_task
(
async
function
test_safari_password_skip
(
)
{
await
testSafariPasswordHelper
(
false
true
false
async
(
wizard
filePickerShownPromise
importFromCSVStub
didMigration
migrateStub
wizardDone
)
=
>
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
safariPasswordImportSkip
=
shadow
.
querySelector
(
"
#
safari
-
password
-
import
-
skip
"
)
;
safariPasswordImportSkip
.
click
(
)
;
await
didMigration
;
Assert
.
ok
(
!
MockFilePicker
.
shown
"
Never
showed
the
file
picker
.
"
)
;
Assert
.
ok
(
!
importFromCSVStub
.
called
"
Importing
from
CSV
was
never
called
.
"
)
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_safari_password_disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
signon
.
management
.
page
.
fileImport
.
enabled
"
false
]
]
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
let
safariMigrator
=
new
SafariProfileMigrator
(
)
;
sandbox
.
stub
(
MigrationUtils
"
getMigrator
"
)
.
resolves
(
safariMigrator
)
;
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
hasPermissions
"
)
.
resolves
(
true
)
;
sandbox
.
stub
(
SafariProfileMigrator
.
prototype
"
getMigrateData
"
)
.
resolves
(
MigrationUtils
.
resourceTypes
.
BOOKMARKS
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
info
(
"
Choosing
Safari
"
)
;
let
panelItem
=
shadow
.
querySelector
(
panel
-
item
[
key
=
"
{
SafariProfileMigrator
.
key
}
"
]
)
;
panelItem
.
click
(
)
;
let
resourceTypeList
=
shadow
.
querySelector
(
"
#
resource
-
type
-
list
"
)
;
let
passwordsNode
=
resourceTypeList
.
querySelector
(
label
[
data
-
resource
-
type
=
"
{
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
}
"
]
)
;
Assert
.
ok
(
passwordsNode
.
hidden
"
PASSWORDS
should
not
be
available
to
import
from
.
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
