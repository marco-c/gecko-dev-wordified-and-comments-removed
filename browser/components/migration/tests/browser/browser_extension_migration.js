"
use
strict
"
;
let
gFluentStrings
=
new
Localization
(
[
"
branding
/
brand
.
ftl
"
"
browser
/
migrationWizard
.
ftl
"
]
)
;
async
function
assertExtensionsProgressState
(
wizard
state
description
)
{
let
shadow
=
wizard
.
openOrClosedShadowRoot
;
let
deck
=
shadow
.
querySelector
(
"
#
wizard
-
deck
"
)
;
Assert
.
equal
(
deck
.
selectedViewName
page
-
{
MigrationWizardConstants
.
PAGES
.
PROGRESS
}
)
;
let
progressGroup
=
shadow
.
querySelector
(
.
resource
-
progress
-
group
[
data
-
resource
-
type
=
"
{
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
EXTENSIONS
}
"
)
;
let
progressIcon
=
progressGroup
.
querySelector
(
"
.
progress
-
icon
"
)
;
let
messageText
=
progressGroup
.
querySelector
(
"
span
.
message
-
text
"
)
;
let
supportLink
=
progressGroup
.
querySelector
(
"
.
support
-
text
"
)
;
let
extensionsSuccessLink
=
progressGroup
.
querySelector
(
"
#
extensions
-
success
-
link
"
)
;
if
(
state
=
=
MigrationWizardConstants
.
PROGRESS_VALUE
.
SUCCESS
)
{
Assert
.
stringMatches
(
progressIcon
.
getAttribute
(
"
state
"
)
"
success
"
)
;
Assert
.
stringMatches
(
messageText
.
textContent
"
"
)
;
Assert
.
stringMatches
(
supportLink
.
textContent
"
"
)
;
await
assertSuccessLink
(
extensionsSuccessLink
description
.
message
)
;
}
else
if
(
state
=
=
MigrationWizardConstants
.
PROGRESS_VALUE
.
WARNING
)
{
Assert
.
stringMatches
(
progressIcon
.
getAttribute
(
"
state
"
)
"
warning
"
)
;
Assert
.
stringMatches
(
messageText
.
textContent
description
.
message
)
;
await
assertSupportLink
(
supportLink
description
.
linkURL
description
.
linkText
)
;
await
assertSuccessLink
(
extensionsSuccessLink
"
"
)
;
}
else
if
(
state
=
=
MigrationWizardConstants
.
PROGRESS_VALUE
.
INFO
)
{
Assert
.
stringMatches
(
progressIcon
.
getAttribute
(
"
state
"
)
"
info
"
)
;
Assert
.
stringMatches
(
supportLink
.
textContent
"
"
)
;
await
assertSuccessLink
(
extensionsSuccessLink
description
.
message
)
;
}
}
async
function
assertSuccessLink
(
link
message
)
{
Assert
.
stringMatches
(
link
.
textContent
message
)
;
if
(
message
)
{
let
aboutAddonsOpened
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
addons
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
link
{
}
link
.
ownerGlobal
)
;
let
tab
=
await
aboutAddonsOpened
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
async
function
assertSupportLink
(
link
url
message
)
{
Assert
.
stringMatches
(
link
.
textContent
message
)
;
Assert
.
stringMatches
(
link
.
href
url
)
;
if
(
message
&
&
url
)
{
link
.
href
=
"
about
:
blank
"
;
let
linkOpened
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
link
.
href
)
;
EventUtils
.
synthesizeMouseAtCenter
(
link
{
}
link
.
ownerGlobal
)
;
let
tab
=
await
linkOpened
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
add_task
(
async
function
test_extension_migration_no_matched_extensions
(
)
{
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
EXTENSIONS
]
[
MigrationUtils
.
resourceTypes
.
EXTENSIONS
]
InternalTestingProfileMigrator
.
testProfile
[
MigrationUtils
.
resourceTypes
.
EXTENSIONS
]
3
0
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
EXTENSIONS
]
)
;
await
migration
;
await
wizardDone
;
await
assertExtensionsProgressState
(
wizard
MigrationWizardConstants
.
PROGRESS_VALUE
.
WARNING
{
message
:
await
gFluentStrings
.
formatValue
(
"
migration
-
wizard
-
progress
-
no
-
matched
-
extensions
"
)
linkURL
:
Services
.
urlFormatter
.
formatURLPref
(
"
extensions
.
getAddons
.
link
.
url
"
)
linkText
:
await
gFluentStrings
.
formatValue
(
"
migration
-
wizard
-
progress
-
extensions
-
addons
-
link
"
)
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_extension_migration_partially_matched_extensions
(
)
{
const
TOTAL_EXTENSIONS
=
3
;
const
TOTAL_MATCHES
=
1
;
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
EXTENSIONS
]
[
MigrationUtils
.
resourceTypes
.
EXTENSIONS
]
InternalTestingProfileMigrator
.
testProfile
[
]
TOTAL_EXTENSIONS
TOTAL_MATCHES
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
EXTENSIONS
]
)
;
await
migration
;
await
wizardDone
;
await
assertExtensionsProgressState
(
wizard
MigrationWizardConstants
.
PROGRESS_VALUE
.
INFO
{
message
:
await
gFluentStrings
.
formatValue
(
"
migration
-
wizard
-
progress
-
partial
-
success
-
extensions
"
{
matched
:
TOTAL_MATCHES
quantity
:
TOTAL_EXTENSIONS
}
)
linkText
:
await
gFluentStrings
.
formatValue
(
"
migration
-
wizard
-
progress
-
extensions
-
support
-
link
"
)
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_extension_migration_fully_matched_extensions
(
)
{
const
TOTAL_EXTENSIONS
=
15
;
const
TOTAL_MATCHES
=
TOTAL_EXTENSIONS
;
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
EXTENSIONS
]
[
MigrationUtils
.
resourceTypes
.
EXTENSIONS
]
InternalTestingProfileMigrator
.
testProfile
[
]
TOTAL_EXTENSIONS
TOTAL_MATCHES
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
EXTENSIONS
]
)
;
await
migration
;
await
wizardDone
;
await
assertExtensionsProgressState
(
wizard
MigrationWizardConstants
.
PROGRESS_VALUE
.
SUCCESS
{
message
:
await
gFluentStrings
.
formatValue
(
"
migration
-
wizard
-
progress
-
success
-
extensions
"
{
quantity
:
TOTAL_EXTENSIONS
}
)
linkURL
:
"
"
linkText
:
"
"
}
)
;
}
)
;
}
)
;
