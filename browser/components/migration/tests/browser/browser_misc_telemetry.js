"
use
strict
"
;
const
{
ChromeProfileMigrator
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ChromeProfileMigrator
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_uninstaller_migration
(
)
{
if
(
AppConstants
.
platform
!
=
"
win
"
)
{
return
;
}
Services
.
env
.
set
(
"
MOZ_UNINSTALLER_PROFILE_REFRESH
"
"
1
"
)
;
let
wizardPromise
=
BrowserTestUtils
.
domWindowOpened
(
)
;
executeSoon
(
(
)
=
>
{
MigrationUtils
.
showMigrationWizard
(
null
{
isStartupMigration
:
true
}
)
;
}
)
;
let
wizardWin
=
await
wizardPromise
;
await
BrowserTestUtils
.
waitForEvent
(
wizardWin
"
MigrationWizard
:
Ready
"
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
"
migration
.
uninstaller_profile_refresh
"
1
)
;
Assert
.
equal
(
Services
.
env
.
get
(
"
MOZ_UNINSTALLER_PROFILE_REFRESH
"
)
"
"
"
Cleared
MOZ_UNINSTALLER_PROFILE_REFRESH
environment
variable
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
wizardWin
)
;
}
)
;
add_task
(
async
function
test_discovered_migrators_keyed_scalar
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
sandbox
.
stub
(
MigrationUtils
"
availableMigratorKeys
"
)
.
get
(
(
)
=
>
{
return
[
"
internal
-
testing
"
"
chrome
"
]
;
}
)
;
sandbox
.
stub
(
ChromeProfileMigrator
.
prototype
"
getSourceProfiles
"
)
.
resolves
(
[
{
id
:
"
chrome
-
test
-
1
"
name
:
"
Chrome
test
profile
1
"
}
{
id
:
"
chrome
-
test
-
2
"
name
:
"
Chrome
test
profile
2
"
}
]
)
;
sandbox
.
stub
(
ChromeProfileMigrator
.
prototype
"
getResources
"
)
.
callsFake
(
(
)
=
>
{
return
Promise
.
resolve
(
Object
.
values
(
MigrationUtils
.
resourceType
)
.
map
(
resourceType
=
>
{
return
{
type
:
resourceType
migrate
:
(
)
=
>
{
}
}
;
}
)
)
;
}
)
;
await
withMigrationWizardDialog
(
async
(
)
=
>
{
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
"
migration
.
discovered_migrators
"
InternalTestingProfileMigrator
.
key
1
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
"
migration
.
discovered_migrators
"
ChromeProfileMigrator
.
key
2
)
;
}
)
;
sandbox
.
restore
(
)
;
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
stub
(
MigrationUtils
"
availableMigratorKeys
"
)
.
get
(
(
)
=
>
{
return
[
"
internal
-
testing
"
]
;
}
)
;
sandbox
.
stub
(
ChromeProfileMigrator
.
prototype
"
getSourceProfiles
"
)
.
resolves
(
null
)
;
await
withMigrationWizardDialog
(
async
(
)
=
>
{
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
"
migration
.
discovered_migrators
"
InternalTestingProfileMigrator
.
key
1
)
;
}
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_fx_migration_errors
(
)
{
let
migration
=
waitForTestMigration
(
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
[
MigrationUtils
.
resourceTypes
.
BOOKMARKS
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
InternalTestingProfileMigrator
.
testProfile
[
MigrationUtils
.
resourceTypes
.
PASSWORDS
]
)
;
await
withMigrationWizardDialog
(
async
prefsWin
=
>
{
let
dialogBody
=
prefsWin
.
document
.
body
;
let
wizard
=
dialogBody
.
querySelector
(
"
migration
-
wizard
"
)
;
let
wizardDone
=
BrowserTestUtils
.
waitForEvent
(
wizard
"
MigrationWizard
:
DoneMigration
"
)
;
selectResourceTypesAndStartMigration
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
await
migration
;
await
wizardDone
;
assertQuantitiesShown
(
wizard
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
BOOKMARKS
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
[
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
.
PASSWORDS
]
)
;
}
)
;
}
)
;
