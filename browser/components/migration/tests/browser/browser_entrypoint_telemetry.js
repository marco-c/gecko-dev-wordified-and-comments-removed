"
use
strict
"
;
const
HISTOGRAM_ID
=
"
FX_MIGRATION_ENTRY_POINT_CATEGORICAL
"
;
async
function
showThenCloseMigrationWizardViaEntrypoint
(
entrypoint
)
{
let
openedPromise
=
BrowserTestUtils
.
waitForMigrationWizard
(
window
)
;
MigrationUtils
.
showMigrationWizard
(
window
{
entrypoint
}
)
;
let
wizardTab
=
await
openedPromise
;
Assert
.
ok
(
wizardTab
"
Migration
wizard
opened
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
wizardTab
)
;
}
add_setup
(
async
(
)
=
>
{
let
browser
=
gBrowser
.
selectedBrowser
;
BrowserTestUtils
.
startLoadingURIString
(
browser
"
https
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
)
;
add_task
(
async
function
test_entrypoints
(
)
{
let
histogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
HISTOGRAM_ID
)
;
await
showThenCloseMigrationWizardViaEntrypoint
(
MigrationUtils
.
MIGRATION_ENTRYPOINTS
.
BOOKMARKS
)
;
let
entrypointId
=
MigrationUtils
.
getLegacyMigrationEntrypoint
(
MigrationUtils
.
MIGRATION_ENTRYPOINTS
.
BOOKMARKS
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
entrypointId
1
)
;
histogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
HISTOGRAM_ID
)
;
await
showThenCloseMigrationWizardViaEntrypoint
(
MigrationUtils
.
MIGRATION_ENTRYPOINTS
.
PREFERENCES
)
;
entrypointId
=
MigrationUtils
.
getLegacyMigrationEntrypoint
(
MigrationUtils
.
MIGRATION_ENTRYPOINTS
.
PREFERENCES
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
entrypointId
1
)
;
histogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
HISTOGRAM_ID
)
;
await
showThenCloseMigrationWizardViaEntrypoint
(
undefined
)
;
entrypointId
=
MigrationUtils
.
getLegacyMigrationEntrypoint
(
MigrationUtils
.
MIGRATION_ENTRYPOINTS
.
UNKNOWN
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
entrypointId
1
)
;
}
)
;
