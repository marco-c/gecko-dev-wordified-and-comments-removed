"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
ctypes
"
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
add_task
(
async
function
(
)
{
let
migrator
=
await
MigrationUtils
.
getMigrator
(
"
ie
"
)
;
Assert
.
ok
(
await
migrator
.
isSourceAvailable
(
)
)
;
const
BOOL
=
ctypes
.
bool
;
const
LPCTSTR
=
ctypes
.
char16_t
.
ptr
;
const
DWORD
=
ctypes
.
uint32_t
;
const
LPDWORD
=
DWORD
.
ptr
;
let
wininet
=
ctypes
.
open
(
"
Wininet
"
)
;
let
setIECookie
=
wininet
.
declare
(
"
InternetSetCookieW
"
ctypes
.
winapi_abi
BOOL
LPCTSTR
LPCTSTR
LPCTSTR
)
;
let
getIECookie
=
wininet
.
declare
(
"
InternetGetCookieW
"
ctypes
.
winapi_abi
BOOL
LPCTSTR
LPCTSTR
LPCTSTR
LPDWORD
)
;
let
date
=
(
new
Date
(
)
)
.
getDate
(
)
;
const
COOKIE
=
{
get
host
(
)
{
return
new
URL
(
this
.
href
)
.
host
;
}
href
:
http
:
/
/
mycookietest
.
{
Math
.
random
(
)
}
.
com
name
:
"
testcookie
"
value
:
"
testvalue
"
expiry
:
new
Date
(
new
Date
(
)
.
setDate
(
date
+
2
)
)
}
;
let
data
=
ctypes
.
char16_t
.
array
(
)
(
256
)
;
let
sizeRef
=
DWORD
(
256
)
.
address
(
)
;
registerCleanupFunction
(
(
)
=
>
{
try
{
let
expired
=
new
Date
(
new
Date
(
)
.
setDate
(
date
-
2
)
)
;
let
rv
=
setIECookie
(
COOKIE
.
href
COOKIE
.
name
;
expires
=
{
expired
.
toUTCString
(
)
}
)
;
Assert
.
ok
(
rv
"
Expired
the
IE
cookie
"
)
;
Assert
.
ok
(
!
getIECookie
(
COOKIE
.
href
COOKIE
.
name
data
sizeRef
)
"
The
cookie
has
been
properly
removed
"
)
;
}
catch
(
ex
)
{
}
try
{
wininet
.
close
(
)
;
}
catch
(
ex
)
{
}
}
)
;
let
value
=
{
COOKIE
.
value
}
;
expires
=
{
COOKIE
.
expiry
.
toUTCString
(
)
}
;
let
rv
=
setIECookie
(
COOKIE
.
href
COOKIE
.
name
value
)
;
Assert
.
ok
(
rv
"
Added
a
persistent
IE
cookie
:
"
+
value
)
;
Assert
.
ok
(
getIECookie
(
COOKIE
.
href
COOKIE
.
name
data
sizeRef
)
"
Found
the
added
persistent
IE
cookie
"
)
;
info
(
"
Found
cookie
:
"
+
data
.
readString
(
)
)
;
Assert
.
equal
(
data
.
readString
(
)
{
COOKIE
.
name
}
=
{
COOKIE
.
value
}
"
Found
the
expected
cookie
"
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
COOKIE
.
host
)
0
"
There
are
no
cookies
initially
"
)
;
await
promiseMigration
(
migrator
MigrationUtils
.
resourceTypes
.
COOKIES
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
COOKIE
.
host
)
1
"
Migrated
the
expected
number
of
cookies
"
)
;
let
enumerator
=
Services
.
cookies
.
getCookiesFromHost
(
COOKIE
.
host
{
}
)
;
Assert
.
ok
(
enumerator
.
hasMoreElements
(
)
)
;
let
foundCookie
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
Assert
.
equal
(
foundCookie
.
name
COOKIE
.
name
)
;
Assert
.
equal
(
foundCookie
.
value
COOKIE
.
value
)
;
Assert
.
equal
(
foundCookie
.
host
"
.
"
+
COOKIE
.
host
)
;
Assert
.
equal
(
foundCookie
.
expiry
Math
.
floor
(
COOKIE
.
expiry
/
1000
)
)
;
}
)
;
