"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
MigrationUtils
:
"
resource
:
/
/
/
modules
/
MigrationUtils
.
sys
.
mjs
"
MigrationWizardConstants
:
"
chrome
:
/
/
browser
/
content
/
migration
/
migration
-
wizard
-
constants
.
mjs
"
}
)
;
const
MigrationDialog
=
{
_wiz
:
null
init
(
)
{
addEventListener
(
"
load
"
this
)
;
}
onLoad
(
)
{
this
.
_wiz
=
document
.
getElementById
(
"
wizard
"
)
;
this
.
_wiz
.
addEventListener
(
"
MigrationWizard
:
Close
"
this
)
;
document
.
addEventListener
(
"
keypress
"
this
)
;
let
args
=
window
.
arguments
[
0
]
;
if
(
args
instanceof
Ci
.
nsISupports
)
{
args
=
args
.
wrappedJSObject
;
}
let
observer
=
new
ResizeObserver
(
(
)
=
>
{
window
.
sizeToContent
(
)
;
}
)
;
observer
.
observe
(
this
.
_wiz
)
;
let
panelList
=
this
.
_wiz
.
querySelector
(
"
panel
-
list
"
)
;
let
panel
=
document
.
createXULElement
(
"
panel
"
)
;
panel
.
appendChild
(
panelList
)
;
this
.
_wiz
.
appendChild
(
panel
)
;
customElements
.
whenDefined
(
"
migration
-
wizard
"
)
.
then
(
(
)
=
>
{
if
(
args
.
options
?
.
skipSourceSelection
)
{
this
.
doProfileRefresh
(
args
.
options
.
migratorKey
args
.
options
.
migrator
args
.
options
.
profileId
)
;
}
else
{
this
.
_wiz
.
requestState
(
)
;
}
}
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
load
"
:
{
this
.
onLoad
(
)
;
break
;
}
case
"
keypress
"
:
{
if
(
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
window
.
close
(
)
;
}
break
;
}
case
"
MigrationWizard
:
Close
"
:
{
window
.
close
(
)
;
break
;
}
}
}
async
doProfileRefresh
(
migratorKey
migrator
profileId
)
{
let
profile
=
{
id
:
profileId
}
;
let
resourceTypeData
=
await
migrator
.
getMigrateData
(
profile
)
;
let
resourceTypeStrs
=
[
]
;
for
(
let
type
in
lazy
.
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
)
{
if
(
resourceTypeData
&
lazy
.
MigrationUtils
.
resourceTypes
[
type
]
)
{
resourceTypeStrs
.
push
(
lazy
.
MigrationWizardConstants
.
DISPLAYED_RESOURCE_TYPES
[
type
]
)
;
}
}
this
.
_wiz
.
doAutoImport
(
migratorKey
profile
resourceTypeStrs
)
;
this
.
_wiz
.
addEventListener
(
"
MigrationWizard
:
DoneMigration
"
(
)
=
>
{
setTimeout
(
(
)
=
>
{
window
.
close
(
)
;
}
5000
)
;
}
{
once
:
true
}
)
;
}
}
;
MigrationDialog
.
init
(
)
;
