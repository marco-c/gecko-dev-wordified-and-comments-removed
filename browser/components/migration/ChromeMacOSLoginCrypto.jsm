"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ChromeMacOSLoginCrypto
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyServiceGetter
(
lazy
"
gKeychainUtils
"
"
mozilla
.
org
/
profile
/
migrator
/
keychainmigrationutils
;
1
"
"
nsIKeychainMigrationUtils
"
)
;
const
gTextEncoder
=
new
TextEncoder
(
)
;
const
gTextDecoder
=
new
TextDecoder
(
)
;
const
kCCBlockSizeAES128
=
16
;
const
SALT
=
"
saltysalt
"
;
const
DERIVED_KEY_SIZE_BITS
=
128
;
const
ITERATIONS
=
1003
;
const
ENCRYPTION_VERSION_PREFIX
=
"
v10
"
;
const
IV
=
new
Uint8Array
(
kCCBlockSizeAES128
)
.
fill
(
32
)
;
class
ChromeMacOSLoginCrypto
{
constructor
(
serviceName
accountName
testingPassphrase
=
null
)
{
let
encKey
=
testingPassphrase
;
try
{
encKey
=
lazy
.
gKeychainUtils
.
getGenericPassword
(
serviceName
accountName
)
;
}
catch
(
ex
)
{
if
(
!
testingPassphrase
)
{
throw
ex
;
}
}
this
.
ALGORITHM
=
"
AES
-
CBC
"
;
this
.
_keyPromise
=
crypto
.
subtle
.
importKey
(
"
raw
"
gTextEncoder
.
encode
(
encKey
)
"
PBKDF2
"
false
[
"
deriveKey
"
]
)
.
then
(
key
=
>
{
return
crypto
.
subtle
.
deriveKey
(
{
name
:
"
PBKDF2
"
salt
:
gTextEncoder
.
encode
(
SALT
)
iterations
:
ITERATIONS
hash
:
"
SHA
-
1
"
}
key
{
name
:
this
.
ALGORITHM
length
:
DERIVED_KEY_SIZE_BITS
}
false
[
"
decrypt
"
"
encrypt
"
]
)
;
}
)
.
catch
(
Cu
.
reportError
)
;
}
arrayToString
(
arr
)
{
let
str
=
"
"
;
for
(
let
i
=
0
;
i
<
arr
.
length
;
i
+
+
)
{
str
+
=
String
.
fromCharCode
(
arr
[
i
]
)
;
}
return
str
;
}
stringToArray
(
binary_string
)
{
let
len
=
binary_string
.
length
;
let
bytes
=
new
Uint8Array
(
len
)
;
for
(
var
i
=
0
;
i
<
len
;
i
+
+
)
{
bytes
[
i
]
=
binary_string
.
charCodeAt
(
i
)
;
}
return
bytes
;
}
async
decryptData
(
ciphertextArray
)
{
let
ciphertext
=
this
.
arrayToString
(
ciphertextArray
)
;
if
(
!
ciphertext
.
startsWith
(
ENCRYPTION_VERSION_PREFIX
)
)
{
throw
new
Error
(
"
Unknown
encryption
version
"
)
;
}
let
key
=
await
this
.
_keyPromise
;
if
(
!
key
)
{
throw
new
Error
(
"
Cannot
decrypt
without
a
key
"
)
;
}
let
plaintext
=
await
crypto
.
subtle
.
decrypt
(
{
name
:
this
.
ALGORITHM
iv
:
IV
}
key
this
.
stringToArray
(
ciphertext
.
substring
(
ENCRYPTION_VERSION_PREFIX
.
length
)
)
)
;
return
gTextDecoder
.
decode
(
plaintext
)
;
}
async
encryptData
(
plaintext
)
{
let
key
=
await
this
.
_keyPromise
;
if
(
!
key
)
{
throw
new
Error
(
"
Cannot
encrypt
without
a
key
"
)
;
}
let
ciphertext
=
await
crypto
.
subtle
.
encrypt
(
{
name
:
this
.
ALGORITHM
iv
:
IV
}
key
gTextEncoder
.
encode
(
plaintext
)
)
;
return
(
ENCRYPTION_VERSION_PREFIX
+
String
.
fromCharCode
(
.
.
.
new
Uint8Array
(
ciphertext
)
)
)
;
}
}
