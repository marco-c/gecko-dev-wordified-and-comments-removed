"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
MigrationUtils
"
"
MigratorPrototype
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
const
TOPIC_WILL_IMPORT_BOOKMARKS
=
"
initial
-
migration
-
will
-
import
-
default
-
bookmarks
"
;
const
TOPIC_DID_IMPORT_BOOKMARKS
=
"
initial
-
migration
-
did
-
import
-
default
-
bookmarks
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
BookmarkHTMLUtils
"
"
resource
:
/
/
gre
/
modules
/
BookmarkHTMLUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PromiseUtils
"
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
var
gMigrators
=
null
;
var
gProfileStartup
=
null
;
var
gMigrationBundle
=
null
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gAvailableMigratorKeys
"
function
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
return
[
"
firefox
"
"
edge
"
"
ie
"
"
chrome
"
"
chromium
"
"
safari
"
"
360se
"
"
canary
"
]
;
}
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
return
[
"
firefox
"
"
safari
"
"
chrome
"
"
chromium
"
"
canary
"
]
;
}
if
(
AppConstants
.
XP_UNIX
)
{
return
[
"
firefox
"
"
chrome
"
"
chromium
"
]
;
}
return
[
]
;
}
)
;
function
getMigrationBundle
(
)
{
if
(
!
gMigrationBundle
)
{
gMigrationBundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
migration
/
migration
.
properties
"
)
;
}
return
gMigrationBundle
;
}
this
.
MigratorPrototype
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIBrowserProfileMigrator
]
)
get
sourceProfiles
(
)
{
return
null
;
}
getResources
:
function
MP_getResources
(
aProfile
)
{
throw
new
Error
(
"
getResources
must
be
overridden
"
)
;
}
get
startupOnlyMigrator
(
)
{
return
false
;
}
get
sourceHomePageURL
(
)
{
return
"
"
;
}
get
sourceLocked
(
)
{
return
false
;
}
getMigrateData
:
function
MP_getMigrateData
(
aProfile
)
{
let
resources
=
this
.
_getMaybeCachedResources
(
aProfile
)
;
if
(
!
resources
)
{
return
[
]
;
}
let
types
=
resources
.
map
(
r
=
>
r
.
type
)
;
return
types
.
reduce
(
(
a
b
)
=
>
a
|
=
b
0
)
;
}
migrate
:
function
MP_migrate
(
aItems
aStartup
aProfile
)
{
let
resources
=
this
.
_getMaybeCachedResources
(
aProfile
)
;
if
(
resources
.
length
=
=
0
)
throw
new
Error
(
"
migrate
called
for
a
non
-
existent
source
"
)
;
if
(
aItems
!
=
Ci
.
nsIBrowserProfileMigrator
.
ALL
)
resources
=
resources
.
filter
(
r
=
>
aItems
&
r
.
type
)
;
let
unblockMainThread
=
function
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
tm
.
mainThread
.
dispatch
(
resolve
Ci
.
nsIThread
.
DISPATCH_NORMAL
)
;
}
)
;
}
;
let
doMigrate
=
Task
.
async
(
function
*
(
)
{
let
resourcesGroupedByItems
=
new
Map
(
)
;
resources
.
forEach
(
function
(
resource
)
{
if
(
!
resourcesGroupedByItems
.
has
(
resource
.
type
)
)
{
resourcesGroupedByItems
.
set
(
resource
.
type
new
Set
(
)
)
;
}
resourcesGroupedByItems
.
get
(
resource
.
type
)
.
add
(
resource
)
}
)
;
if
(
resourcesGroupedByItems
.
size
=
=
0
)
throw
new
Error
(
"
No
items
to
import
"
)
;
let
notify
=
function
(
aMsg
aItemType
)
{
Services
.
obs
.
notifyObservers
(
null
aMsg
aItemType
)
;
}
notify
(
"
Migration
:
Started
"
)
;
for
(
let
[
key
value
]
of
resourcesGroupedByItems
)
{
let
migrationType
=
key
itemResources
=
value
;
notify
(
"
Migration
:
ItemBeforeMigrate
"
migrationType
)
;
let
itemSuccess
=
false
;
for
(
let
res
of
itemResources
)
{
let
resource
=
res
;
let
completeDeferred
=
PromiseUtils
.
defer
(
)
;
let
resourceDone
=
function
(
aSuccess
)
{
itemResources
.
delete
(
resource
)
;
itemSuccess
|
=
aSuccess
;
if
(
itemResources
.
size
=
=
0
)
{
notify
(
itemSuccess
?
"
Migration
:
ItemAfterMigrate
"
:
"
Migration
:
ItemError
"
migrationType
)
;
resourcesGroupedByItems
.
delete
(
migrationType
)
;
if
(
resourcesGroupedByItems
.
size
=
=
0
)
{
notify
(
"
Migration
:
Ended
"
)
;
}
}
completeDeferred
.
resolve
(
)
;
}
try
{
resource
.
migrate
(
resourceDone
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
resourceDone
(
false
)
;
}
if
(
migrationType
=
=
MigrationUtils
.
resourceTypes
.
BOOKMARKS
|
|
migrationType
=
=
MigrationUtils
.
resourceTypes
.
HISTORY
)
{
yield
completeDeferred
.
promise
;
}
yield
unblockMainThread
(
)
;
}
}
}
)
;
if
(
MigrationUtils
.
isStartupMigration
&
&
!
this
.
startupOnlyMigrator
)
{
MigrationUtils
.
profileStartup
.
doStartup
(
)
;
const
BOOKMARKS
=
MigrationUtils
.
resourceTypes
.
BOOKMARKS
;
let
migratingBookmarks
=
resources
.
some
(
r
=
>
r
.
type
=
=
BOOKMARKS
)
;
if
(
migratingBookmarks
)
{
let
browserGlue
=
Cc
[
"
mozilla
.
org
/
browser
/
browserglue
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
browserGlue
.
observe
(
null
TOPIC_WILL_IMPORT_BOOKMARKS
"
"
)
;
let
onImportComplete
=
function
(
)
{
browserGlue
.
observe
(
null
TOPIC_DID_IMPORT_BOOKMARKS
"
"
)
;
doMigrate
(
)
;
}
;
BookmarkHTMLUtils
.
importFromURL
(
"
chrome
:
/
/
browser
/
locale
/
bookmarks
.
html
"
true
)
.
then
(
onImportComplete
onImportComplete
)
;
return
;
}
}
doMigrate
(
)
;
}
get
sourceExists
(
)
{
if
(
this
.
startupOnlyMigrator
&
&
!
MigrationUtils
.
isStartupMigration
)
return
false
;
let
exists
=
false
;
try
{
let
profiles
=
this
.
sourceProfiles
;
if
(
!
profiles
)
{
let
resources
=
this
.
_getMaybeCachedResources
(
"
"
)
;
if
(
resources
&
&
resources
.
length
>
0
)
exists
=
true
;
}
else
{
exists
=
profiles
.
length
>
0
;
}
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
return
exists
;
}
_getMaybeCachedResources
:
function
PMB__getMaybeCachedResources
(
aProfile
)
{
let
profileKey
=
aProfile
?
aProfile
.
id
:
"
"
;
if
(
this
.
_resourcesByProfile
)
{
if
(
profileKey
in
this
.
_resourcesByProfile
)
return
this
.
_resourcesByProfile
[
profileKey
]
;
}
else
{
this
.
_resourcesByProfile
=
{
}
;
}
return
this
.
_resourcesByProfile
[
profileKey
]
=
this
.
getResources
(
aProfile
)
;
}
}
;
this
.
MigrationUtils
=
Object
.
freeze
(
{
resourceTypes
:
{
SETTINGS
:
Ci
.
nsIBrowserProfileMigrator
.
SETTINGS
COOKIES
:
Ci
.
nsIBrowserProfileMigrator
.
COOKIES
HISTORY
:
Ci
.
nsIBrowserProfileMigrator
.
HISTORY
FORMDATA
:
Ci
.
nsIBrowserProfileMigrator
.
FORMDATA
PASSWORDS
:
Ci
.
nsIBrowserProfileMigrator
.
PASSWORDS
BOOKMARKS
:
Ci
.
nsIBrowserProfileMigrator
.
BOOKMARKS
OTHERDATA
:
Ci
.
nsIBrowserProfileMigrator
.
OTHERDATA
SESSION
:
Ci
.
nsIBrowserProfileMigrator
.
SESSION
}
wrapMigrateFunction
:
function
MU_wrapMigrateFunction
(
aFunction
aCallback
)
{
return
function
(
)
{
let
success
=
false
;
try
{
aFunction
.
apply
(
null
arguments
)
;
success
=
true
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
aCallback
(
success
)
;
}
}
getLocalizedString
:
function
MU_getLocalizedString
(
aKey
aReplacements
)
{
aKey
=
aKey
.
replace
(
/
_
(
canary
|
chromium
)
/
"
_chrome
"
)
;
const
OVERRIDES
=
{
"
4_firefox
"
:
"
4_firefox_history_and_bookmarks
"
"
64_firefox
"
:
"
64_firefox_other
"
}
;
aKey
=
OVERRIDES
[
aKey
]
|
|
aKey
;
if
(
aReplacements
=
=
=
undefined
)
return
getMigrationBundle
(
)
.
GetStringFromName
(
aKey
)
;
return
getMigrationBundle
(
)
.
formatStringFromName
(
aKey
aReplacements
aReplacements
.
length
)
;
}
createImportedBookmarksFolder
:
Task
.
async
(
function
*
(
sourceNameStr
parentGuid
)
{
let
source
=
this
.
getLocalizedString
(
"
sourceName
"
+
sourceNameStr
)
;
let
title
=
this
.
getLocalizedString
(
"
importedBookmarksFolder
"
[
source
]
)
;
return
(
yield
PlacesUtils
.
bookmarks
.
insert
(
{
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
parentGuid
title
}
)
)
.
guid
;
}
)
get
_migrators
(
)
{
return
gMigrators
?
gMigrators
:
gMigrators
=
new
Map
(
)
;
}
getMigrator
:
function
MU_getMigrator
(
aKey
)
{
let
migrator
=
null
;
if
(
this
.
_migrators
.
has
(
aKey
)
)
{
migrator
=
this
.
_migrators
.
get
(
aKey
)
;
}
else
{
try
{
migrator
=
Cc
[
"
mozilla
.
org
/
profile
/
migrator
;
1
?
app
=
browser
&
type
=
"
+
aKey
]
.
createInstance
(
Ci
.
nsIBrowserProfileMigrator
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
}
this
.
_migrators
.
set
(
aKey
migrator
)
;
}
try
{
return
migrator
&
&
migrator
.
sourceExists
?
migrator
:
null
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
return
null
}
}
getMigratorKeyForDefaultBrowser
(
)
{
const
APP_DESC_TO_KEY
=
{
"
Internet
Explorer
"
:
"
ie
"
"
Safari
"
:
"
safari
"
"
Firefox
"
:
"
firefox
"
"
Google
Chrome
"
:
"
chrome
"
"
Chrome
"
:
"
chrome
"
"
Chromium
"
:
"
chromium
"
"
Chromium
Web
Browser
"
:
"
chromium
"
"
360
\
u5b89
\
u5168
\
u6d4f
\
u89c8
\
u5668
"
:
"
360se
"
}
;
let
browserDesc
=
"
"
;
try
{
let
browserDesc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
.
getApplicationDescription
(
"
http
"
)
;
return
APP_DESC_TO_KEY
[
browserDesc
]
|
|
"
"
;
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Could
not
detect
default
browser
:
"
+
ex
)
;
}
return
"
"
;
}
get
isStartupMigration
(
)
{
return
gProfileStartup
!
=
null
;
}
get
profileStartup
(
)
{
return
gProfileStartup
;
}
showMigrationWizard
:
function
MU_showMigrationWizard
(
aOpener
aParams
)
{
let
features
=
"
chrome
dialog
modal
centerscreen
titlebar
resizable
=
no
"
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
&
&
!
this
.
isStartupMigration
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
Browser
:
MigrationWizard
"
)
;
if
(
win
)
{
win
.
focus
(
)
;
return
;
}
features
=
"
centerscreen
chrome
resizable
=
no
"
;
}
let
params
;
if
(
Array
.
isArray
(
aParams
)
)
{
params
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
for
(
let
item
of
aParams
)
{
let
comtaminatedVal
;
if
(
item
&
&
item
instanceof
Ci
.
nsISupports
)
{
comtaminatedVal
=
item
;
}
else
{
switch
(
typeof
item
)
{
case
"
boolean
"
:
comtaminatedVal
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
comtaminatedVal
.
data
=
item
;
break
;
case
"
number
"
:
comtaminatedVal
=
Cc
[
"
mozilla
.
org
/
supports
-
PRUint32
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRUint32
)
;
comtaminatedVal
.
data
=
item
;
break
;
case
"
string
"
:
comtaminatedVal
=
Cc
[
"
mozilla
.
org
/
supports
-
cstring
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsCString
)
;
comtaminatedVal
.
data
=
item
;
break
;
case
"
undefined
"
:
case
"
object
"
:
if
(
!
item
)
{
comtaminatedVal
=
null
;
break
;
}
default
:
throw
new
Error
(
"
Unexpected
parameter
type
"
+
(
typeof
item
)
+
"
:
"
+
item
)
;
}
}
params
.
appendElement
(
comtaminatedVal
false
)
;
}
}
else
{
params
=
aParams
;
}
Services
.
ww
.
openWindow
(
aOpener
"
chrome
:
/
/
browser
/
content
/
migration
/
migration
.
xul
"
"
_blank
"
features
params
)
;
}
startupMigration
:
function
MU_startupMigrator
(
aProfileStartup
aMigratorKey
aProfileToMigrate
)
{
if
(
!
aProfileStartup
)
{
throw
new
Error
(
"
an
profile
-
startup
instance
is
required
for
startup
-
migration
"
)
;
}
gProfileStartup
=
aProfileStartup
;
let
skipSourcePage
=
false
migrator
=
null
migratorKey
=
"
"
;
if
(
aMigratorKey
)
{
migrator
=
this
.
getMigrator
(
aMigratorKey
)
;
if
(
!
migrator
)
{
this
.
finishMigration
(
)
;
throw
new
Error
(
"
startMigration
was
asked
to
open
auto
-
migrate
from
"
+
"
a
non
-
existent
source
:
"
+
aMigratorKey
)
;
}
migratorKey
=
aMigratorKey
;
skipSourcePage
=
true
;
}
else
{
let
defaultBrowserKey
=
this
.
getMigratorKeyForDefaultBrowser
(
)
;
if
(
defaultBrowserKey
)
{
migrator
=
this
.
getMigrator
(
defaultBrowserKey
)
;
if
(
migrator
)
migratorKey
=
defaultBrowserKey
;
}
}
if
(
!
migrator
)
{
if
(
!
gAvailableMigratorKeys
.
some
(
key
=
>
!
!
this
.
getMigrator
(
key
)
)
)
{
this
.
finishMigration
(
)
;
return
;
}
}
let
migrationEntryPoint
=
this
.
MIGRATION_ENTRYPOINT_FIRSTRUN
;
if
(
migrator
&
&
skipSourcePage
&
&
migratorKey
=
=
AppConstants
.
MOZ_APP_NAME
)
{
migrationEntryPoint
=
this
.
MIGRATION_ENTRYPOINT_FXREFRESH
;
}
let
params
=
[
migrationEntryPoint
migratorKey
migrator
aProfileStartup
skipSourcePage
aProfileToMigrate
]
;
this
.
showMigrationWizard
(
null
params
)
;
}
finishMigration
:
function
MU_finishMigration
(
)
{
gMigrators
=
null
;
gProfileStartup
=
null
;
gMigrationBundle
=
null
;
}
MIGRATION_ENTRYPOINT_UNKNOWN
:
0
MIGRATION_ENTRYPOINT_FIRSTRUN
:
1
MIGRATION_ENTRYPOINT_FXREFRESH
:
2
MIGRATION_ENTRYPOINT_PLACES
:
3
MIGRATION_ENTRYPOINT_PASSWORDS
:
4
_sourceNameToIdMapping
:
{
"
nothing
"
:
1
"
firefox
"
:
2
"
edge
"
:
3
"
ie
"
:
4
"
chrome
"
:
5
"
chromium
"
:
6
"
canary
"
:
7
"
safari
"
:
8
"
360se
"
:
9
}
getSourceIdForTelemetry
(
sourceName
)
{
return
this
.
_sourceNameToIdMapping
[
sourceName
]
|
|
0
;
}
}
)
;
