"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ChromeWindowsLoginCrypto
"
]
;
const
{
ChromeMigrationUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
ChromeMigrationUtils
.
jsm
"
)
;
const
{
OSCrypto
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
OSCrypto
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
AEAD_KEY_LENGTH
=
256
/
8
;
const
ALGORITHM_NAME
=
"
AES
-
GCM
"
;
const
DPAPI_KEY_PREFIX
=
"
DPAPI
"
;
const
ENCRYPTION_VERSION_PREFIX
=
"
v10
"
;
const
NONCE_LENGTH
=
96
/
8
;
const
gTextDecoder
=
new
TextDecoder
(
)
;
const
gTextEncoder
=
new
TextEncoder
(
)
;
class
ChromeWindowsLoginCrypto
{
constructor
(
userDataPathSuffix
)
{
this
.
osCrypto
=
new
OSCrypto
(
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
_keyPromise
"
async
(
)
=
>
{
let
keyData
;
try
{
const
localState
=
await
ChromeMigrationUtils
.
getLocalState
(
userDataPathSuffix
)
;
const
withHeader
=
atob
(
localState
.
os_crypt
.
encrypted_key
)
;
if
(
!
withHeader
.
startsWith
(
DPAPI_KEY_PREFIX
)
)
{
throw
new
Error
(
"
Invalid
key
format
"
)
;
}
const
encryptedKey
=
withHeader
.
slice
(
DPAPI_KEY_PREFIX
.
length
)
;
keyData
=
this
.
osCrypto
.
decryptData
(
encryptedKey
null
"
bytes
"
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
{
userDataPathSuffix
}
os_crypt
key
:
{
ex
}
)
;
keyData
=
AEAD_KEY_LENGTH
;
}
return
crypto
.
subtle
.
importKey
(
"
raw
"
new
Uint8Array
(
keyData
)
ALGORITHM_NAME
false
[
"
decrypt
"
"
encrypt
"
]
)
;
}
)
;
}
finalize
(
)
{
this
.
osCrypto
.
finalize
(
)
;
}
arrayToString
(
arr
)
{
let
str
=
"
"
;
for
(
let
i
=
0
;
i
<
arr
.
length
;
i
+
+
)
{
str
+
=
String
.
fromCharCode
(
arr
[
i
]
)
;
}
return
str
;
}
stringToArray
(
binary_string
)
{
const
len
=
binary_string
.
length
;
const
bytes
=
new
Uint8Array
(
len
)
;
for
(
let
i
=
0
;
i
<
len
;
i
+
+
)
{
bytes
[
i
]
=
binary_string
.
charCodeAt
(
i
)
;
}
return
bytes
;
}
async
decryptData
(
ciphertext
)
{
const
ciphertextString
=
this
.
arrayToString
(
ciphertext
)
;
return
ciphertextString
.
startsWith
(
ENCRYPTION_VERSION_PREFIX
)
?
this
.
_decryptV10
(
ciphertext
)
:
this
.
_decryptUnversioned
(
ciphertextString
)
;
}
async
_decryptUnversioned
(
ciphertext
)
{
return
this
.
osCrypto
.
decryptData
(
ciphertext
)
;
}
async
_decryptV10
(
ciphertext
)
{
const
key
=
await
this
.
_keyPromise
;
if
(
!
key
)
{
throw
new
Error
(
"
Cannot
decrypt
without
a
key
"
)
;
}
const
nonceIndex
=
ENCRYPTION_VERSION_PREFIX
.
length
;
const
cipherIndex
=
nonceIndex
+
NONCE_LENGTH
;
const
iv
=
new
Uint8Array
(
ciphertext
.
slice
(
nonceIndex
cipherIndex
)
)
;
const
algorithm
=
{
name
:
ALGORITHM_NAME
iv
}
;
const
cipherArray
=
new
Uint8Array
(
ciphertext
.
slice
(
cipherIndex
)
)
;
const
plaintext
=
await
crypto
.
subtle
.
decrypt
(
algorithm
key
cipherArray
)
;
return
gTextDecoder
.
decode
(
new
Uint8Array
(
plaintext
)
)
;
}
async
encryptData
(
plaintext
version
=
undefined
)
{
return
version
=
=
=
ENCRYPTION_VERSION_PREFIX
?
this
.
_encryptV10
(
plaintext
)
:
this
.
_encryptUnversioned
(
plaintext
)
;
}
async
_encryptUnversioned
(
plaintext
)
{
return
this
.
osCrypto
.
encryptData
(
plaintext
)
;
}
async
_encryptV10
(
plaintext
)
{
const
key
=
await
this
.
_keyPromise
;
if
(
!
key
)
{
throw
new
Error
(
"
Cannot
encrypt
without
a
key
"
)
;
}
const
iv
=
crypto
.
getRandomValues
(
new
Uint8Array
(
NONCE_LENGTH
)
)
;
const
algorithm
=
{
name
:
ALGORITHM_NAME
iv
}
;
const
plainArray
=
gTextEncoder
.
encode
(
plaintext
)
;
const
ciphertext
=
await
crypto
.
subtle
.
encrypt
(
algorithm
key
plainArray
)
;
return
(
ENCRYPTION_VERSION_PREFIX
+
this
.
arrayToString
(
iv
)
+
this
.
arrayToString
(
new
Uint8Array
(
ciphertext
)
)
)
;
}
}
