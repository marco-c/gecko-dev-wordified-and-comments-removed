import
json
import
os
import
mozpack
.
path
as
mozpath
from
mach
.
decorators
import
Command
SubCommand
from
mozpack
.
manifests
import
InstallManifest
def
run_mach
(
command_context
cmd
*
*
kwargs
)
:
    
return
command_context
.
_mach_context
.
commands
.
dispatch
(
        
cmd
command_context
.
_mach_context
*
*
kwargs
    
)
def
run_npm
(
command_context
args
)
:
    
return
run_mach
(
        
command_context
"
npm
"
args
=
[
*
args
"
-
-
prefix
=
browser
/
components
/
storybook
"
]
    
)
Command
(
    
"
storybook
"
    
category
=
"
misc
"
    
description
=
"
Start
the
Storybook
server
.
This
will
install
npm
dependencies
if
necessary
.
"
)
def
storybook_run
(
command_context
)
:
    
ensure_env
(
command_context
)
    
return
run_npm
(
command_context
args
=
[
"
run
"
"
storybook
"
]
)
SubCommand
(
    
"
storybook
"
"
launch
"
description
=
"
Launch
the
Storybook
site
in
your
local
build
.
"
)
def
storybook_launch
(
command_context
)
:
    
return
run_mach
(
        
command_context
        
"
run
"
        
argv
=
[
"
http
:
/
/
localhost
:
5703
"
]
        
setpref
=
[
"
svg
.
context
-
properties
.
content
.
enabled
=
true
"
]
    
)
SubCommand
(
    
"
storybook
"
    
"
install
"
    
description
=
"
Install
Storybook
node
dependencies
.
"
)
def
storybook_install
(
command_context
)
:
    
return
install_npm_deps
(
command_context
)
SubCommand
(
    
"
storybook
"
    
"
build
"
    
description
=
"
Build
the
Storybook
for
export
.
"
)
def
storybook_build
(
command_context
)
:
    
ensure_env
(
command_context
)
    
return
run_npm
(
command_context
args
=
[
"
run
"
"
build
-
storybook
"
]
)
SubCommand
(
    
"
storybook
"
    
"
manifest
"
    
description
=
"
Create
rewrites
.
js
which
has
mappings
from
chrome
:
/
/
URIs
to
local
paths
.
"
    
"
Requires
a
.
/
mach
build
faster
build
.
Required
for
our
chrome
-
uri
-
loader
.
js
webpack
loader
.
"
)
def
storybook_manifest
(
command_context
)
:
    
config_environment
=
command_context
.
config_environment
    
unified_manifest
=
InstallManifest
(
        
mozpath
.
join
(
config_environment
.
topobjdir
"
faster
"
"
unified_install_dist_bin
"
)
    
)
    
paths
=
{
}
    
for
dest
entry
in
unified_manifest
.
_dests
.
items
(
)
:
        
if
(
            
entry
[
0
]
=
=
1
            
and
(
dest
.
endswith
(
"
.
js
"
)
or
dest
.
endswith
(
"
.
mjs
"
)
)
            
and
(
                
dest
.
startswith
(
"
chrome
/
toolkit
/
"
)
or
dest
.
startswith
(
"
browser
/
chrome
/
"
)
            
)
        
)
:
            
try
:
                
chrome_uri
=
_parse_dest_to_chrome_uri
(
dest
)
                
paths
[
chrome_uri
]
=
os
.
path
.
relpath
(
entry
[
1
]
)
            
except
Exception
as
e
:
                
print
(
'
Error
rewriting
to
chrome
:
/
/
URI
"
{
}
"
[
{
}
]
'
.
format
(
dest
e
)
)
                
pass
    
with
open
(
"
browser
/
components
/
storybook
/
.
storybook
/
rewrites
.
js
"
"
w
"
)
as
f
:
        
f
.
write
(
"
module
.
exports
=
"
)
        
json
.
dump
(
paths
f
indent
=
2
)
def
_parse_dest_to_chrome_uri
(
dest
)
:
    
"
"
"
Turn
a
jar
destination
into
a
chrome
:
/
/
URI
.
Will
raise
an
error
on
unknown
input
.
"
"
"
    
global_start
=
dest
.
find
(
"
global
/
"
)
    
content_start
=
dest
.
find
(
"
content
/
"
)
    
skin_classic_browser
=
"
skin
/
classic
/
browser
/
"
    
browser_skin_start
=
dest
.
find
(
skin_classic_browser
)
    
package
provider
path
=
"
"
"
"
"
"
    
if
global_start
!
=
-
1
:
        
package
=
"
global
"
        
provider
=
"
skin
"
if
"
/
skin
/
"
in
dest
else
"
content
"
        
path
=
dest
[
global_start
+
len
(
"
global
/
"
)
:
]
    
elif
content_start
!
=
-
1
:
        
provider
package
path
=
dest
[
content_start
:
]
.
split
(
"
/
"
2
)
    
elif
browser_skin_start
!
=
-
1
:
        
package
=
"
browser
"
        
provider
=
"
skin
"
        
path
=
dest
[
browser_skin_start
+
len
(
skin_classic_browser
)
:
]
    
return
"
chrome
:
/
/
{
package
}
/
{
provider
}
/
{
path
}
"
.
format
(
        
package
=
package
provider
=
provider
path
=
path
    
)
def
ensure_env
(
command_context
)
:
    
ensure_npm_deps
(
command_context
)
    
storybook_manifest
(
command_context
)
def
ensure_npm_deps
(
command_context
)
:
    
if
not
check_npm_deps
(
command_context
)
:
        
install_npm_deps
(
command_context
)
    
else
:
        
print
(
"
Dependencies
up
to
date
\
n
"
)
def
check_npm_deps
(
command_context
)
:
    
print
(
"
Checking
installed
npm
dependencies
"
)
    
return
not
run_npm
(
command_context
args
=
[
"
ls
"
]
)
def
install_npm_deps
(
command_context
)
:
    
print
(
"
Installing
missing
npm
dependencies
"
)
    
run_npm
(
command_context
args
=
[
"
ci
"
]
)
