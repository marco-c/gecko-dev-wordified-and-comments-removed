const
path
=
require
(
"
path
"
)
;
const
rewrites
=
require
(
"
.
/
rewrites
.
js
"
)
;
const
projectRoot
=
path
.
join
(
process
.
cwd
(
)
"
.
.
/
.
.
/
.
.
"
)
;
function
getReferencedChromeUris
(
source
)
{
const
chromeRegex
=
/
chrome
:
\
/
\
/
.
*
?
\
.
(
js
|
mjs
)
/
g
;
const
matches
=
new
Set
(
)
;
for
(
let
match
of
source
.
matchAll
(
chromeRegex
)
)
{
matches
.
add
(
match
[
0
]
)
;
}
return
[
.
.
.
matches
]
;
}
async
function
rewriteChromeUris
(
source
)
{
const
chromeUriToLocalPath
=
new
Map
(
)
;
let
chromeDependencies
=
getReferencedChromeUris
(
source
)
;
for
(
let
chromeUri
of
chromeDependencies
)
{
let
localRelativePath
=
rewrites
[
chromeUri
]
;
if
(
localRelativePath
)
{
localRelativePath
=
localRelativePath
.
replaceAll
(
"
\
\
"
"
/
"
)
;
chromeUriToLocalPath
.
set
(
chromeUri
localRelativePath
)
;
this
.
addDependency
(
path
.
join
(
projectRoot
localRelativePath
)
)
;
}
}
let
rewrittenSource
=
source
;
for
(
let
[
chromeUri
localPath
]
of
chromeUriToLocalPath
.
entries
(
)
)
{
rewrittenSource
=
rewrittenSource
.
replaceAll
(
chromeUri
localPath
)
;
}
return
rewrittenSource
;
}
module
.
exports
=
async
function
chromeUriLoader
(
source
)
{
const
callback
=
this
.
async
(
)
;
const
newSource
=
await
rewriteChromeUris
.
call
(
this
source
)
;
callback
(
null
newSource
)
;
}
;
