const
path
=
require
(
"
path
"
)
;
const
webpack
=
require
(
"
webpack
"
)
;
const
rewriteChromeUri
=
require
(
"
.
/
chrome
-
uri
-
utils
.
js
"
)
;
const
projectRoot
=
path
.
resolve
(
__dirname
"
.
.
/
.
.
/
.
.
/
.
.
/
"
)
;
module
.
exports
=
{
stories
:
[
"
.
.
/
*
*
/
README
.
*
.
stories
.
md
"
{
projectRoot
}
/
toolkit
/
content
/
widgets
/
*
*
/
*
.
stories
.
(
js
|
jsx
|
mjs
|
ts
|
tsx
|
md
)
{
projectRoot
}
/
browser
/
components
/
aboutlogins
/
content
/
components
/
*
*
/
*
.
stories
.
mjs
"
.
.
/
stories
/
*
*
/
*
.
stories
.
(
js
|
jsx
|
mjs
|
ts
|
tsx
|
md
)
"
{
projectRoot
}
/
toolkit
/
themes
/
shared
/
design
-
system
/
*
*
/
*
.
stories
.
(
js
|
jsx
|
mjs
|
ts
|
tsx
|
md
)
]
addons
:
[
"
storybook
/
addon
-
links
"
{
name
:
"
storybook
/
addon
-
essentials
"
options
:
{
backgrounds
:
false
measure
:
false
outline
:
false
}
}
"
storybook
/
addon
-
a11y
"
path
.
resolve
(
__dirname
"
addon
-
fluent
"
)
path
.
resolve
(
__dirname
"
addon
-
component
-
status
"
)
]
framework
:
"
storybook
/
web
-
components
"
webpackFinal
:
async
(
config
{
configType
}
)
=
>
{
config
.
resolve
.
alias
.
browser
=
{
projectRoot
}
/
browser
;
config
.
resolve
.
alias
.
toolkit
=
{
projectRoot
}
/
toolkit
;
config
.
resolve
.
alias
[
"
toolkit
-
widgets
"
]
=
{
projectRoot
}
/
toolkit
/
content
/
widgets
/
;
config
.
resolve
.
alias
[
"
lit
.
all
.
mjs
"
]
=
{
projectRoot
}
/
toolkit
/
content
/
widgets
/
vendor
/
lit
.
all
.
mjs
;
config
.
resolve
.
alias
[
"
storybook
/
addon
-
docs
"
]
=
"
browser
/
components
/
storybook
/
node_modules
/
storybook
/
addon
-
docs
"
;
config
.
resolve
.
alias
[
"
mdx
-
js
/
react
"
]
=
"
storybook
/
addon
-
docs
/
node_modules
/
mdx
-
js
/
react
"
;
config
.
resolve
.
alias
[
"
lit
-
html
/
directive
-
helpers
.
js
"
]
=
"
lit
.
all
.
mjs
"
;
config
.
resolve
.
alias
[
"
lit
-
html
"
]
=
"
lit
.
all
.
mjs
"
;
config
.
plugins
.
push
(
new
webpack
.
NormalModuleReplacementPlugin
(
/
^
chrome
:
\
/
\
/
/
resource
=
>
{
resource
.
request
=
rewriteChromeUri
(
resource
.
request
)
;
}
)
)
;
config
.
module
.
rules
.
push
(
{
test
:
/
\
.
ftl
/
type
:
"
asset
/
source
"
}
)
;
config
.
module
.
rules
.
push
(
{
test
:
/
\
.
m
?
js
/
exclude
:
/
.
storybook
/
use
:
[
{
loader
:
path
.
resolve
(
__dirname
"
.
/
chrome
-
styles
-
loader
.
js
"
)
}
]
}
)
;
let
cssFileTest
=
/
\
.
css
/
.
toString
(
)
;
let
cssRuleIndex
=
config
.
module
.
rules
.
findIndex
(
rule
=
>
rule
.
test
.
toString
(
)
=
=
=
cssFileTest
)
;
config
.
module
.
rules
[
cssRuleIndex
]
=
{
test
:
/
\
.
css
/
exclude
:
[
/
.
storybook
/
/
node_modules
/
]
type
:
"
asset
/
resource
"
generator
:
{
filename
:
"
[
name
]
.
[
contenthash
]
.
css
"
}
}
;
const
MD_STORY_REGEX
=
/
(
stories
|
story
)
\
.
md
/
;
let
mdxStoryTest
=
/
(
stories
|
story
)
\
.
mdx
/
.
toString
(
)
;
let
mdxRule
=
config
.
module
.
rules
.
find
(
rule
=
>
rule
.
test
.
toString
(
)
=
=
=
mdxStoryTest
)
;
config
.
module
.
rules
.
push
(
{
test
:
MD_STORY_REGEX
use
:
[
.
.
.
mdxRule
.
use
{
loader
:
path
.
resolve
(
__dirname
"
.
/
markdown
-
story
-
loader
.
js
"
)
}
]
}
)
;
let
markdownTest
=
/
\
.
md
/
.
toString
(
)
;
let
markdownRuleIndex
=
config
.
module
.
rules
.
findIndex
(
rule
=
>
rule
.
test
.
toString
(
)
=
=
=
markdownTest
)
;
let
markdownRule
=
config
.
module
.
rules
[
markdownRuleIndex
]
;
config
.
module
.
rules
[
markdownRuleIndex
]
=
{
.
.
.
markdownRule
exclude
:
MD_STORY_REGEX
}
;
config
.
optimization
=
{
splitChunks
:
false
runtimeChunk
:
false
sideEffects
:
false
usedExports
:
false
concatenateModules
:
false
minimizer
:
[
]
}
;
return
config
;
}
core
:
{
builder
:
"
webpack5
"
}
}
;
