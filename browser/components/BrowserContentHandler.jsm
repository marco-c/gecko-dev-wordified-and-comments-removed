var
EXPORTED_SYMBOLS
=
[
"
nsBrowserContentHandler
"
"
nsDefaultCommandLineHandler
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
HeadlessShell
:
"
resource
:
/
/
/
modules
/
HeadlessShell
.
jsm
"
HomePage
:
"
resource
:
/
/
/
modules
/
HomePage
.
jsm
"
LaterRun
:
"
resource
:
/
/
/
modules
/
LaterRun
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
SessionStartup
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStartup
.
jsm
"
ShellService
:
"
resource
:
/
/
/
modules
/
ShellService
.
jsm
"
UpdatePing
:
"
resource
:
/
/
gre
/
modules
/
UpdatePing
.
jsm
"
RemotePages
:
"
resource
:
/
/
gre
/
modules
/
remotepagemanager
/
RemotePageManagerParent
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
WindowsUIUtils
"
"
mozilla
.
org
/
windows
-
ui
-
utils
;
1
"
"
nsIWindowsUIUtils
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
UpdateManager
"
"
mozilla
.
org
/
updates
/
update
-
manager
;
1
"
"
nsIUpdateManager
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gSystemPrincipal
"
(
)
=
>
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
URL
]
)
;
const
NEWINSTALL_PAGE
=
"
about
:
newinstall
"
;
function
shouldLoadURI
(
aURI
)
{
if
(
aURI
&
&
!
aURI
.
schemeIs
(
"
chrome
"
)
)
{
return
true
;
}
dump
(
"
*
*
*
Preventing
external
load
of
chrome
:
URI
into
browser
window
\
n
"
)
;
dump
(
"
Use
-
-
chrome
<
uri
>
instead
\
n
"
)
;
return
false
;
}
function
resolveURIInternal
(
aCmdLine
aArgument
)
{
var
uri
=
aCmdLine
.
resolveURI
(
aArgument
)
;
var
uriFixup
=
Services
.
uriFixup
;
if
(
!
(
uri
instanceof
Ci
.
nsIFileURL
)
)
{
return
uriFixup
.
createFixupURI
(
aArgument
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
)
;
}
try
{
if
(
uri
.
file
.
exists
(
)
)
{
return
uri
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
try
{
uri
=
uriFixup
.
createFixupURI
(
aArgument
0
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
uri
;
}
let
gRemoteInstallPage
=
null
;
function
getNewInstallPage
(
)
{
if
(
!
gRemoteInstallPage
)
{
gRemoteInstallPage
=
new
RemotePages
(
NEWINSTALL_PAGE
)
;
}
return
NEWINSTALL_PAGE
;
}
var
gFirstWindow
=
false
;
const
OVERRIDE_NONE
=
0
;
const
OVERRIDE_NEW_PROFILE
=
1
;
const
OVERRIDE_NEW_MSTONE
=
2
;
const
OVERRIDE_NEW_BUILD_ID
=
3
;
const
OVERRIDE_ALTERNATE_PROFILE
=
4
;
function
needHomepageOverride
(
prefb
)
{
let
pService
=
Cc
[
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
]
.
getService
(
Ci
.
nsIToolkitProfileService
)
;
if
(
pService
.
createdAlternateProfile
)
{
return
OVERRIDE_ALTERNATE_PROFILE
;
}
var
savedmstone
=
prefb
.
getCharPref
(
"
browser
.
startup
.
homepage_override
.
mstone
"
"
"
)
;
if
(
savedmstone
=
=
"
ignore
"
)
{
return
OVERRIDE_NONE
;
}
var
mstone
=
Services
.
appinfo
.
platformVersion
;
var
savedBuildID
=
prefb
.
getCharPref
(
"
browser
.
startup
.
homepage_override
.
buildID
"
"
"
)
;
var
buildID
=
Services
.
appinfo
.
platformBuildID
;
if
(
mstone
!
=
savedmstone
)
{
if
(
savedmstone
)
{
prefb
.
setBoolPref
(
"
browser
.
rights
.
3
.
shown
"
true
)
;
}
prefb
.
setCharPref
(
"
browser
.
startup
.
homepage_override
.
mstone
"
mstone
)
;
prefb
.
setCharPref
(
"
browser
.
startup
.
homepage_override
.
buildID
"
buildID
)
;
return
savedmstone
?
OVERRIDE_NEW_MSTONE
:
OVERRIDE_NEW_PROFILE
;
}
if
(
buildID
!
=
savedBuildID
)
{
prefb
.
setCharPref
(
"
browser
.
startup
.
homepage_override
.
buildID
"
buildID
)
;
return
OVERRIDE_NEW_BUILD_ID
;
}
return
OVERRIDE_NONE
;
}
function
getPostUpdateOverridePage
(
update
defaultOverridePage
)
{
update
=
update
.
QueryInterface
(
Ci
.
nsIWritablePropertyBag
)
;
let
actions
=
update
.
getProperty
(
"
actions
"
)
;
if
(
!
actions
)
{
return
defaultOverridePage
;
}
if
(
actions
.
includes
(
"
silent
"
)
|
|
!
actions
.
includes
(
"
showURL
"
)
)
{
return
"
"
;
}
if
(
!
Services
.
policies
.
isAllowed
(
"
postUpdateCustomPage
"
)
)
{
return
defaultOverridePage
;
}
return
update
.
getProperty
(
"
openURL
"
)
|
|
defaultOverridePage
;
}
function
openBrowserWindow
(
cmdLine
triggeringPrincipal
urlOrUrlList
postData
=
null
forcePrivate
=
false
)
{
let
chromeURL
=
AppConstants
.
BROWSER_CHROME_URL
;
let
args
;
if
(
!
urlOrUrlList
)
{
args
=
[
gBrowserContentHandler
.
defaultArgs
]
;
}
else
{
let
pService
=
Cc
[
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
]
.
getService
(
Ci
.
nsIToolkitProfileService
)
;
if
(
cmdLine
&
&
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
&
&
pService
.
createdAlternateProfile
)
{
let
url
=
getNewInstallPage
(
)
;
if
(
Array
.
isArray
(
urlOrUrlList
)
)
{
urlOrUrlList
.
unshift
(
url
)
;
}
else
{
urlOrUrlList
=
[
url
urlOrUrlList
]
;
}
}
if
(
Array
.
isArray
(
urlOrUrlList
)
)
{
if
(
!
triggeringPrincipal
|
|
!
triggeringPrincipal
.
equals
(
gSystemPrincipal
)
)
{
throw
new
Error
(
"
Can
'
t
open
multiple
URLs
with
something
other
than
system
principal
.
"
)
;
}
let
uriArray
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
urlOrUrlList
.
forEach
(
function
(
uri
)
{
var
sstring
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
sstring
.
data
=
uri
;
uriArray
.
appendElement
(
sstring
)
;
}
)
;
args
=
[
uriArray
]
;
}
else
{
args
=
[
urlOrUrlList
null
null
postData
undefined
undefined
null
null
triggeringPrincipal
]
;
}
}
if
(
cmdLine
&
&
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
blank
"
)
;
if
(
win
)
{
win
.
document
.
documentElement
.
removeAttribute
(
"
windowtype
"
)
;
if
(
forcePrivate
)
{
win
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
usePrivateBrowsing
=
true
;
}
win
.
location
=
chromeURL
;
win
.
arguments
=
args
;
return
;
}
}
if
(
!
urlOrUrlList
)
{
let
[
url
]
=
args
;
args
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
args
.
data
=
url
;
}
else
{
if
(
args
.
length
>
1
)
{
let
string
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
string
.
data
=
args
[
0
]
;
args
[
0
]
=
string
;
}
let
array
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
args
.
forEach
(
a
=
>
{
array
.
appendElement
(
a
)
;
}
)
;
args
=
array
;
}
let
features
=
"
chrome
dialog
=
no
all
"
+
gBrowserContentHandler
.
getFeatures
(
cmdLine
)
;
if
(
forcePrivate
)
{
features
+
=
"
private
"
;
}
Services
.
ww
.
openWindow
(
null
chromeURL
"
_blank
"
features
args
)
;
}
function
openPreferences
(
cmdLine
extraArgs
)
{
openBrowserWindow
(
cmdLine
gSystemPrincipal
"
about
:
preferences
"
)
;
}
function
doSearch
(
searchTerm
cmdLine
)
{
var
engine
=
Services
.
search
.
defaultEngine
;
var
countId
=
(
engine
.
identifier
|
|
"
other
-
"
+
engine
.
name
)
+
"
.
system
"
;
var
count
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
SEARCH_COUNTS
"
)
;
count
.
add
(
countId
)
;
var
submission
=
engine
.
getSubmission
(
searchTerm
null
"
system
"
)
;
openBrowserWindow
(
cmdLine
gSystemPrincipal
submission
.
uri
.
spec
submission
.
postData
)
;
}
function
nsBrowserContentHandler
(
)
{
if
(
!
gBrowserContentHandler
)
{
gBrowserContentHandler
=
this
;
}
return
gBrowserContentHandler
;
}
nsBrowserContentHandler
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsICommandLineHandler
Ci
.
nsIBrowserHandler
Ci
.
nsIContentHandler
Ci
.
nsICommandLineValidator
]
)
handle
:
function
bch_handle
(
cmdLine
)
{
if
(
cmdLine
.
handleFlag
(
"
browser
"
false
)
)
{
openBrowserWindow
(
cmdLine
gSystemPrincipal
)
;
cmdLine
.
preventDefault
=
true
;
}
if
(
cmdLine
.
handleFlag
(
"
remote
"
true
)
)
{
throw
Cr
.
NS_ERROR_ABORT
;
}
var
uriparam
;
try
{
while
(
(
uriparam
=
cmdLine
.
handleFlagWithParam
(
"
new
-
window
"
false
)
)
)
{
let
uri
=
resolveURIInternal
(
cmdLine
uriparam
)
;
if
(
!
shouldLoadURI
(
uri
)
)
{
continue
;
}
openBrowserWindow
(
cmdLine
gSystemPrincipal
uri
.
spec
)
;
cmdLine
.
preventDefault
=
true
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
try
{
while
(
(
uriparam
=
cmdLine
.
handleFlagWithParam
(
"
new
-
tab
"
false
)
)
)
{
let
uri
=
resolveURIInternal
(
cmdLine
uriparam
)
;
handURIToExistingBrowser
(
uri
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
cmdLine
false
gSystemPrincipal
)
;
cmdLine
.
preventDefault
=
true
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
var
chromeParam
=
cmdLine
.
handleFlagWithParam
(
"
chrome
"
false
)
;
if
(
chromeParam
)
{
if
(
chromeParam
=
=
"
chrome
:
/
/
browser
/
content
/
pref
/
pref
.
xul
"
|
|
chromeParam
=
=
"
chrome
:
/
/
browser
/
content
/
preferences
/
preferences
.
xul
"
)
{
openPreferences
(
cmdLine
)
;
cmdLine
.
preventDefault
=
true
;
}
else
{
try
{
let
resolvedURI
=
resolveURIInternal
(
cmdLine
chromeParam
)
;
let
isLocal
=
uri
=
>
{
let
localSchemes
=
new
Set
(
[
"
chrome
"
"
file
"
"
resource
"
]
)
;
if
(
uri
instanceof
Ci
.
nsINestedURI
)
{
uri
=
uri
.
QueryInterface
(
Ci
.
nsINestedURI
)
.
innerMostURI
;
}
return
localSchemes
.
has
(
uri
.
scheme
)
;
}
;
if
(
isLocal
(
resolvedURI
)
)
{
let
features
=
"
chrome
dialog
=
no
all
"
+
this
.
getFeatures
(
cmdLine
)
;
let
argArray
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
argArray
.
appendElement
(
null
)
;
Services
.
ww
.
openWindow
(
null
resolvedURI
.
spec
"
_blank
"
features
argArray
)
;
cmdLine
.
preventDefault
=
true
;
}
else
{
dump
(
"
*
*
*
Preventing
load
of
web
URI
as
chrome
\
n
"
)
;
dump
(
"
If
you
'
re
trying
to
load
a
webpage
do
not
pass
-
-
chrome
.
\
n
"
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
if
(
cmdLine
.
handleFlag
(
"
preferences
"
false
)
)
{
openPreferences
(
cmdLine
)
;
cmdLine
.
preventDefault
=
true
;
}
if
(
cmdLine
.
handleFlag
(
"
silent
"
false
)
)
{
cmdLine
.
preventDefault
=
true
;
}
try
{
var
privateWindowParam
=
cmdLine
.
handleFlagWithParam
(
"
private
-
window
"
false
)
;
if
(
privateWindowParam
)
{
let
forcePrivate
=
true
;
let
resolvedURI
;
if
(
!
PrivateBrowsingUtils
.
enabled
)
{
forcePrivate
=
false
;
resolvedURI
=
Services
.
io
.
newURI
(
"
about
:
privatebrowsing
"
)
;
}
else
{
resolvedURI
=
resolveURIInternal
(
cmdLine
privateWindowParam
)
;
}
handURIToExistingBrowser
(
resolvedURI
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
cmdLine
forcePrivate
gSystemPrincipal
)
;
cmdLine
.
preventDefault
=
true
;
}
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_INVALID_ARG
)
{
throw
e
;
}
if
(
cmdLine
.
handleFlag
(
"
private
-
window
"
false
)
)
{
openBrowserWindow
(
cmdLine
gSystemPrincipal
"
about
:
privatebrowsing
"
null
PrivateBrowsingUtils
.
enabled
)
;
cmdLine
.
preventDefault
=
true
;
}
}
var
searchParam
=
cmdLine
.
handleFlagWithParam
(
"
search
"
false
)
;
if
(
searchParam
)
{
doSearch
(
searchParam
cmdLine
)
;
cmdLine
.
preventDefault
=
true
;
}
if
(
cmdLine
.
handleFlag
(
"
private
"
false
)
&
&
PrivateBrowsingUtils
.
enabled
)
{
PrivateBrowsingUtils
.
enterTemporaryAutoStartMode
(
)
;
if
(
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
blank
"
)
;
if
(
win
)
{
win
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
usePrivateBrowsing
=
true
;
}
}
}
if
(
cmdLine
.
handleFlag
(
"
setDefaultBrowser
"
false
)
)
{
ShellService
.
setDefaultBrowser
(
true
true
)
;
}
var
fileParam
=
cmdLine
.
handleFlagWithParam
(
"
file
"
false
)
;
if
(
fileParam
)
{
var
file
=
cmdLine
.
resolveFile
(
fileParam
)
;
var
fileURI
=
Services
.
io
.
newFileURI
(
file
)
;
openBrowserWindow
(
cmdLine
gSystemPrincipal
fileURI
.
spec
)
;
cmdLine
.
preventDefault
=
true
;
}
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
for
(
var
i
=
cmdLine
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
var
param
=
cmdLine
.
getArgument
(
i
)
;
if
(
param
.
match
(
/
^
\
?
/
)
)
{
cmdLine
.
removeArguments
(
i
i
)
;
cmdLine
.
preventDefault
=
true
;
searchParam
=
param
.
substr
(
2
)
;
doSearch
(
searchParam
cmdLine
)
;
}
}
}
}
get
helpInfo
(
)
{
let
info
=
"
-
-
browser
Open
a
browser
window
.
\
n
"
+
"
-
-
new
-
window
<
url
>
Open
<
url
>
in
a
new
window
.
\
n
"
+
"
-
-
new
-
tab
<
url
>
Open
<
url
>
in
a
new
tab
.
\
n
"
+
"
-
-
private
-
window
<
url
>
Open
<
url
>
in
a
new
private
window
.
\
n
"
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
info
+
=
"
-
-
preferences
Open
Options
dialog
.
\
n
"
;
}
else
{
info
+
=
"
-
-
preferences
Open
Preferences
dialog
.
\
n
"
;
}
info
+
=
"
-
-
screenshot
[
<
path
>
]
Save
screenshot
to
<
path
>
or
in
working
directory
.
\
n
"
;
info
+
=
"
-
-
window
-
size
width
[
height
]
Width
and
optionally
height
of
screenshot
.
\
n
"
;
info
+
=
"
-
-
search
<
term
>
Search
<
term
>
with
your
default
search
engine
.
\
n
"
;
info
+
=
"
-
-
setDefaultBrowser
Set
this
app
as
the
default
browser
.
\
n
"
;
return
info
;
}
get
defaultArgs
(
)
{
var
prefb
=
Services
.
prefs
;
if
(
!
gFirstWindow
)
{
gFirstWindow
=
true
;
if
(
PrivateBrowsingUtils
.
isInTemporaryAutoStartMode
)
{
return
"
about
:
privatebrowsing
"
;
}
}
var
override
;
var
overridePage
=
"
"
;
var
additionalPage
=
"
"
;
var
willRestoreSession
=
false
;
try
{
let
old_mstone
=
Services
.
prefs
.
getCharPref
(
"
browser
.
startup
.
homepage_override
.
mstone
"
"
unknown
"
)
;
let
old_buildId
=
Services
.
prefs
.
getCharPref
(
"
browser
.
startup
.
homepage_override
.
buildID
"
"
unknown
"
)
;
override
=
needHomepageOverride
(
prefb
)
;
if
(
override
!
=
OVERRIDE_NONE
)
{
switch
(
override
)
{
case
OVERRIDE_ALTERNATE_PROFILE
:
overridePage
=
getNewInstallPage
(
)
;
break
;
case
OVERRIDE_NEW_PROFILE
:
overridePage
=
Services
.
urlFormatter
.
formatURLPref
(
"
startup
.
homepage_welcome_url
"
)
;
additionalPage
=
Services
.
urlFormatter
.
formatURLPref
(
"
startup
.
homepage_welcome_url
.
additional
"
)
;
LaterRun
.
enabled
=
true
;
break
;
case
OVERRIDE_NEW_MSTONE
:
willRestoreSession
=
SessionStartup
.
isAutomaticRestoreEnabled
(
)
;
overridePage
=
Services
.
urlFormatter
.
formatURLPref
(
"
startup
.
homepage_override_url
"
)
;
let
update
=
UpdateManager
.
activeUpdate
;
if
(
update
&
&
Services
.
vc
.
compare
(
update
.
appVersion
old_mstone
)
>
0
)
{
overridePage
=
getPostUpdateOverridePage
(
update
overridePage
)
;
UpdatePing
.
handleUpdateSuccess
(
old_mstone
old_buildId
)
;
}
overridePage
=
overridePage
.
replace
(
"
%
OLD_VERSION
%
"
old_mstone
)
;
break
;
case
OVERRIDE_NEW_BUILD_ID
:
if
(
UpdateManager
.
activeUpdate
)
{
UpdatePing
.
handleUpdateSuccess
(
old_mstone
old_buildId
)
;
}
break
;
}
}
}
catch
(
ex
)
{
}
if
(
overridePage
=
=
"
about
:
blank
"
)
{
overridePage
=
"
"
;
}
if
(
!
additionalPage
)
{
additionalPage
=
LaterRun
.
getURL
(
)
|
|
"
"
;
}
if
(
additionalPage
&
&
additionalPage
!
=
"
about
:
blank
"
)
{
if
(
overridePage
)
{
overridePage
+
=
"
|
"
+
additionalPage
;
}
else
{
overridePage
=
additionalPage
;
}
}
var
startPage
=
"
"
;
try
{
var
choice
=
prefb
.
getIntPref
(
"
browser
.
startup
.
page
"
)
;
if
(
choice
=
=
1
|
|
choice
=
=
3
)
{
startPage
=
HomePage
.
get
(
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
if
(
startPage
=
=
"
about
:
blank
"
)
{
startPage
=
"
"
;
}
let
skipStartPage
=
(
override
=
=
OVERRIDE_NEW_PROFILE
|
|
override
=
=
OVERRIDE_ALTERNATE_PROFILE
)
&
&
prefb
.
getBoolPref
(
"
browser
.
startup
.
firstrunSkipsHomepage
"
)
;
if
(
overridePage
&
&
startPage
&
&
!
willRestoreSession
&
&
!
skipStartPage
)
{
return
overridePage
+
"
|
"
+
startPage
;
}
return
overridePage
|
|
startPage
|
|
"
about
:
blank
"
;
}
mFeatures
:
null
getFeatures
:
function
bch_features
(
cmdLine
)
{
if
(
this
.
mFeatures
=
=
=
null
)
{
this
.
mFeatures
=
"
"
;
if
(
cmdLine
)
{
try
{
var
width
=
cmdLine
.
handleFlagWithParam
(
"
width
"
false
)
;
var
height
=
cmdLine
.
handleFlagWithParam
(
"
height
"
false
)
;
if
(
width
)
{
this
.
mFeatures
+
=
"
width
=
"
+
width
;
}
if
(
height
)
{
this
.
mFeatures
+
=
"
height
=
"
+
height
;
}
}
catch
(
e
)
{
}
}
if
(
PrivateBrowsingUtils
.
isInTemporaryAutoStartMode
)
{
this
.
mFeatures
+
=
"
private
"
;
}
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
suppress_first_window_animation
"
)
&
&
!
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
)
{
this
.
mFeatures
+
=
"
suppressanimation
"
;
}
}
return
this
.
mFeatures
;
}
handleContent
:
function
bch_handleContent
(
contentType
context
request
)
{
const
NS_ERROR_WONT_HANDLE_CONTENT
=
0x805d0001
;
try
{
var
webNavInfo
=
Cc
[
"
mozilla
.
org
/
webnavigation
-
info
;
1
"
]
.
getService
(
Ci
.
nsIWebNavigationInfo
)
;
if
(
!
webNavInfo
.
isTypeSupported
(
contentType
null
)
)
{
throw
NS_ERROR_WONT_HANDLE_CONTENT
;
}
}
catch
(
e
)
{
throw
NS_ERROR_WONT_HANDLE_CONTENT
;
}
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
handURIToExistingBrowser
(
request
.
URI
Ci
.
nsIBrowserDOMWindow
.
OPEN_DEFAULTWINDOW
null
false
request
.
loadInfo
.
triggeringPrincipal
)
;
request
.
cancel
(
Cr
.
NS_BINDING_ABORTED
)
;
}
validate
:
function
bch_validate
(
cmdLine
)
{
var
osintFlagIdx
=
cmdLine
.
findFlag
(
"
osint
"
false
)
;
var
urlFlagIdx
=
cmdLine
.
findFlag
(
"
url
"
false
)
;
if
(
urlFlagIdx
>
-
1
&
&
(
osintFlagIdx
>
-
1
|
|
cmdLine
.
state
=
=
Ci
.
nsICommandLine
.
STATE_REMOTE_EXPLICIT
)
)
{
var
urlParam
=
cmdLine
.
getArgument
(
urlFlagIdx
+
1
)
;
if
(
cmdLine
.
length
!
=
urlFlagIdx
+
2
|
|
/
firefoxurl
:
/
i
.
test
(
urlParam
)
)
{
throw
Cr
.
NS_ERROR_ABORT
;
}
var
isDefault
=
false
;
try
{
var
url
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
win10
-
default
-
browser
"
;
if
(
urlParam
=
=
url
)
{
isDefault
=
ShellService
.
isDefaultBrowser
(
false
false
)
;
}
}
catch
(
ex
)
{
}
if
(
isDefault
)
{
throw
Cr
.
NS_ERROR_ABORT
;
}
cmdLine
.
handleFlag
(
"
osint
"
false
)
;
}
}
}
;
var
gBrowserContentHandler
=
new
nsBrowserContentHandler
(
)
;
function
handURIToExistingBrowser
(
uri
location
cmdLine
forcePrivate
triggeringPrincipal
)
{
if
(
!
shouldLoadURI
(
uri
)
)
{
return
;
}
var
allowPrivate
=
forcePrivate
|
|
PrivateBrowsingUtils
.
permanentPrivateBrowsing
;
var
navWin
=
BrowserWindowTracker
.
getTopWindow
(
{
private
:
allowPrivate
}
)
;
if
(
!
navWin
)
{
openBrowserWindow
(
cmdLine
triggeringPrincipal
uri
.
spec
null
forcePrivate
)
;
return
;
}
var
bwin
=
navWin
.
browserDOMWindow
;
bwin
.
openURI
(
uri
null
location
Ci
.
nsIBrowserDOMWindow
.
OPEN_EXTERNAL
triggeringPrincipal
)
;
}
function
nsDefaultCommandLineHandler
(
)
{
}
nsDefaultCommandLineHandler
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsICommandLineHandler
"
]
)
_haveProfile
:
false
handle
:
function
dch_handle
(
cmdLine
)
{
var
urilist
=
[
]
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
if
(
!
this
.
_haveProfile
)
{
try
{
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
this
.
_haveProfile
=
true
;
}
catch
(
e
)
{
while
(
(
ar
=
cmdLine
.
handleFlagWithParam
(
"
url
"
false
)
)
)
{
}
cmdLine
.
preventDefault
=
true
;
}
}
}
try
{
var
ar
;
while
(
(
ar
=
cmdLine
.
handleFlagWithParam
(
"
url
"
false
)
)
)
{
var
uri
=
resolveURIInternal
(
cmdLine
ar
)
;
urilist
.
push
(
uri
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
if
(
cmdLine
.
findFlag
(
"
screenshot
"
true
)
!
=
-
1
)
{
HeadlessShell
.
handleCmdLineArgs
(
cmdLine
urilist
.
filter
(
shouldLoadURI
)
.
map
(
u
=
>
u
.
spec
)
)
;
return
;
}
for
(
let
i
=
0
;
i
<
cmdLine
.
length
;
+
+
i
)
{
var
curarg
=
cmdLine
.
getArgument
(
i
)
;
if
(
curarg
.
match
(
/
^
-
/
)
)
{
Cu
.
reportError
(
"
Warning
:
unrecognized
command
line
flag
"
+
curarg
+
"
\
n
"
)
;
+
+
i
;
}
else
{
try
{
urilist
.
push
(
resolveURIInternal
(
cmdLine
curarg
)
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
Error
opening
URI
'
"
+
curarg
+
"
'
from
the
command
line
:
"
+
e
+
"
\
n
"
)
;
}
}
}
if
(
urilist
.
length
)
{
if
(
cmdLine
.
state
!
=
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
&
&
urilist
.
length
=
=
1
)
{
try
{
handURIToExistingBrowser
(
urilist
[
0
]
Ci
.
nsIBrowserDOMWindow
.
OPEN_DEFAULTWINDOW
cmdLine
false
gSystemPrincipal
)
;
return
;
}
catch
(
e
)
{
}
}
var
URLlist
=
urilist
.
filter
(
shouldLoadURI
)
.
map
(
u
=
>
u
.
spec
)
;
if
(
URLlist
.
length
)
{
openBrowserWindow
(
cmdLine
gSystemPrincipal
URLlist
)
;
}
}
else
if
(
!
cmdLine
.
preventDefault
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
&
&
cmdLine
.
state
!
=
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
&
&
WindowsUIUtils
.
inTabletMode
)
{
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
win
)
{
win
.
focus
(
)
;
return
;
}
}
openBrowserWindow
(
cmdLine
gSystemPrincipal
)
;
}
else
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
blank
"
)
;
if
(
win
)
{
win
.
close
(
)
;
}
}
}
helpInfo
:
"
"
}
;
