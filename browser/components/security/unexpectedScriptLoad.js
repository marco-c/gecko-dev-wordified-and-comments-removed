var
UnexpectedScriptLoadPanel
=
new
(
class
{
#
console
;
#
scriptName
=
"
"
;
get
console
(
)
{
if
(
!
this
.
#
console
)
{
this
.
#
console
=
console
.
createInstance
(
{
maxLogLevelPref
:
"
browser
.
unexpectedScriptLoad
.
logLevel
"
prefix
:
"
UnexpectedScriptLoad
"
}
)
;
}
return
this
.
#
console
;
}
#
lazyElements
;
get
elements
(
)
{
if
(
!
this
.
#
lazyElements
)
{
this
.
#
lazyElements
=
{
dialogCloseButton
:
document
.
querySelector
(
"
.
dialogClose
"
)
reportCheckbox
:
document
.
querySelector
(
"
#
reportCheckbox
"
)
emailCheckbox
:
document
.
querySelector
(
"
#
emailCheckbox
"
)
emailInput
:
document
.
querySelector
(
"
#
emailInput
"
)
allowButton
:
document
.
querySelector
(
"
#
allow
-
button
"
)
blockButton
:
document
.
querySelector
(
"
#
block
-
button
"
)
allowOrDenyLabel
:
document
.
querySelector
(
"
#
allow
-
or
-
deny
-
label
"
)
scriptUrl
:
document
.
querySelector
(
"
.
scriptUrl
"
)
moreInfoLink
:
document
.
querySelector
(
"
#
more
-
info
-
link
"
)
learnMoreLink
:
document
.
querySelector
(
"
#
learn
-
more
-
link
"
)
}
;
}
return
this
.
#
lazyElements
;
}
init
(
)
{
this
.
console
?
.
warn
(
"
UnexpectedScriptLoadPanel
initialized
"
)
;
let
args
=
window
.
arguments
[
0
]
;
let
action
=
args
.
action
;
this
.
#
scriptName
=
args
.
scriptName
;
this
.
elements
.
scriptUrl
.
textContent
=
this
.
#
scriptName
;
if
(
action
=
=
=
"
allow
"
)
{
this
.
setupAllowLayout
(
)
;
Glean
.
unexpectedScriptLoad
.
scriptAllowedOpened
.
record
(
)
;
}
else
if
(
action
=
=
=
"
block
"
)
{
Glean
.
unexpectedScriptLoad
.
scriptBlockedOpened
.
record
(
)
;
this
.
setupBlockLayout
(
)
;
}
this
.
setupEventHandlers
(
)
;
}
setupEventHandlers
(
)
{
this
.
elements
.
dialogCloseButton
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
close
(
true
)
;
}
)
;
this
.
elements
.
moreInfoLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
onLearnMoreLink
(
)
;
}
)
;
this
.
elements
.
learnMoreLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
onLearnMoreLink
(
)
;
}
)
;
this
.
elements
.
allowButton
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
onAllow
(
)
;
}
)
;
this
.
elements
.
blockButton
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
onBlock
(
)
;
}
)
;
this
.
elements
.
emailInput
.
addEventListener
(
"
change
"
e
=
>
{
const
hasEmail
=
this
.
elements
.
emailInput
.
value
.
trim
(
)
!
=
=
"
"
;
if
(
!
hasEmail
)
return
;
setTimeout
(
(
)
=
>
{
this
.
console
?
.
warn
(
Rechecking
checkboxes
)
;
if
(
this
.
elements
.
emailInput
.
value
.
trim
(
)
)
{
this
.
elements
.
emailCheckbox
.
checked
=
true
;
this
.
elements
.
reportCheckbox
.
checked
=
true
;
}
}
0
)
;
e
.
stopPropagation
(
)
;
}
)
;
this
.
elements
.
emailCheckbox
.
addEventListener
(
"
change
"
(
)
=
>
{
if
(
!
this
.
elements
.
emailCheckbox
.
checked
)
{
this
.
elements
.
emailInput
.
value
=
"
"
;
}
}
)
;
this
.
elements
.
reportCheckbox
.
addEventListener
(
"
change
"
(
)
=
>
{
if
(
!
this
.
elements
.
reportCheckbox
.
checked
)
{
this
.
elements
.
emailCheckbox
.
checked
=
false
;
this
.
elements
.
emailInput
.
value
=
"
"
;
}
}
)
;
}
setupAllowLayout
(
)
{
this
.
elements
.
allowOrDenyLabel
.
textContent
=
"
ALLOW
"
;
this
.
elements
.
allowButton
.
setAttribute
(
"
type
"
"
primary
"
)
;
this
.
elements
.
blockButton
.
setAttribute
(
"
type
"
"
"
)
;
}
setupBlockLayout
(
)
{
this
.
elements
.
allowOrDenyLabel
.
textContent
=
"
BLOCK
"
;
this
.
elements
.
reportCheckbox
.
checked
=
true
;
this
.
elements
.
allowButton
.
setAttribute
(
"
type
"
"
"
)
;
this
.
elements
.
blockButton
.
setAttribute
(
"
type
"
"
primary
"
)
;
}
close
(
userDismissed
)
{
this
.
console
?
.
warn
(
"
UnexpectedScriptLoadPanel
is
closing
"
)
;
if
(
userDismissed
)
{
Glean
.
unexpectedScriptLoad
.
dialogDismissed
.
record
(
)
;
}
window
.
close
(
)
;
GleanPings
.
unexpectedScriptLoad
.
submit
(
)
;
}
onLearnMoreLink
(
)
{
Glean
.
unexpectedScriptLoad
.
moreInfoOpened
.
record
(
)
;
this
.
close
(
false
)
;
window
.
top
.
document
.
documentElement
.
removeAttribute
(
"
window
-
modal
-
open
"
)
;
window
.
browsingContext
.
top
.
window
.
openTrustedLinkIn
(
"
https
:
/
/
support
.
mozilla
.
org
/
kb
/
unexpected
-
script
-
load
"
"
tab
"
)
;
}
onBlock
(
)
{
this
.
#
console
.
warn
(
"
UnexpectedScriptLoadPanel
.
onBlock
(
)
called
"
)
;
Glean
.
unexpectedScriptLoad
.
scriptBlocked
.
record
(
)
;
this
.
close
(
false
)
;
}
onAllow
(
)
{
this
.
#
console
.
warn
(
"
UnexpectedScriptLoadPanel
.
onAllow
(
)
called
"
)
;
Glean
.
unexpectedScriptLoad
.
scriptAllowed
.
record
(
)
;
this
.
close
(
false
)
;
}
}
)
(
)
;
UnexpectedScriptLoadPanel
.
init
(
)
;
