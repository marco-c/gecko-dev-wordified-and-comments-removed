import
{
recordTelemetryEvent
}
from
"
.
.
/
aboutLoginsUtils
.
js
"
;
import
ReflectedFluentElement
from
"
.
/
reflected
-
fluent
-
element
.
js
"
;
export
default
class
CopyToClipboardButton
extends
ReflectedFluentElement
{
static
get
BUTTON_RESET_TIMEOUT
(
)
{
return
5000
;
}
constructor
(
)
{
super
(
)
;
this
.
_relatedInput
=
null
;
}
connectedCallback
(
)
{
if
(
this
.
shadowRoot
)
{
return
;
}
let
CopyToClipboardButtonTemplate
=
document
.
querySelector
(
"
#
copy
-
to
-
clipboard
-
button
-
template
"
)
;
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
.
appendChild
(
CopyToClipboardButtonTemplate
.
content
.
cloneNode
(
true
)
)
;
this
.
_copyButton
=
this
.
shadowRoot
.
querySelector
(
"
.
copy
-
button
"
)
;
this
.
_copyButton
.
addEventListener
(
"
click
"
this
)
;
super
.
connectedCallback
(
)
;
}
static
get
reflectedFluentIDs
(
)
{
return
[
"
copy
-
button
-
text
"
"
copied
-
button
-
text
"
]
;
}
static
get
observedAttributes
(
)
{
return
CopyToClipboardButton
.
reflectedFluentIDs
;
}
handleSpecialCaseFluentString
(
attrName
)
{
if
(
attrName
!
=
"
copied
-
button
-
text
"
&
&
attrName
!
=
"
copy
-
button
-
text
"
)
{
return
false
;
}
let
span
=
this
.
shadowRoot
.
querySelector
(
"
.
"
+
attrName
)
;
span
.
textContent
=
this
.
getAttribute
(
attrName
)
;
return
true
;
}
handleEvent
(
event
)
{
if
(
event
.
type
!
=
"
click
"
|
|
event
.
currentTarget
!
=
this
.
_copyButton
)
{
return
;
}
this
.
_copyButton
.
disabled
=
true
;
navigator
.
clipboard
.
writeText
(
this
.
_relatedInput
.
value
)
.
then
(
(
)
=
>
{
this
.
dataset
.
copied
=
true
;
setTimeout
(
(
)
=
>
{
this
.
_copyButton
.
disabled
=
false
;
delete
this
.
dataset
.
copied
;
}
CopyToClipboardButton
.
BUTTON_RESET_TIMEOUT
)
;
}
(
)
=
>
this
.
_copyButton
.
disabled
=
false
)
;
if
(
this
.
dataset
.
telemetryObject
)
{
recordTelemetryEvent
(
{
object
:
this
.
dataset
.
telemetryObject
method
:
"
copy
"
}
)
;
}
}
set
relatedInput
(
val
)
{
this
.
_relatedInput
=
val
;
}
}
customElements
.
define
(
"
copy
-
to
-
clipboard
-
button
"
CopyToClipboardButton
)
;
