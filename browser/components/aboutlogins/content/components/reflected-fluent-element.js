export
default
class
ReflectedFluentElement
extends
HTMLElement
{
_isReflectedAttributePresent
(
attr
)
{
return
this
.
constructor
.
reflectedFluentIDs
.
includes
(
attr
.
name
)
;
}
connectedCallback
(
)
{
this
.
reflectFluentStrings
(
)
;
}
reflectFluentStrings
(
)
{
for
(
let
reflectedFluentID
of
this
.
constructor
.
reflectedFluentIDs
)
{
if
(
this
.
hasAttribute
(
reflectedFluentID
)
)
{
if
(
this
.
handleSpecialCaseFluentString
&
&
this
.
handleSpecialCaseFluentString
(
reflectedFluentID
)
)
{
continue
;
}
let
attrValue
=
this
.
getAttribute
(
reflectedFluentID
)
;
let
shadowedElement
=
this
.
shadowRoot
.
querySelector
(
"
.
"
+
reflectedFluentID
)
;
shadowedElement
.
textContent
=
attrValue
;
}
}
}
attributeChangedCallback
(
attr
oldValue
newValue
)
{
if
(
!
this
.
shadowRoot
)
{
return
;
}
if
(
!
this
.
constructor
.
reflectedFluentIDs
.
includes
(
attr
)
)
{
return
;
}
if
(
this
.
handleSpecialCaseFluentString
&
&
this
.
handleSpecialCaseFluentString
(
attr
)
)
{
return
;
}
let
shadowedElement
=
this
.
shadowRoot
.
querySelector
(
"
.
"
+
attr
)
;
shadowedElement
.
textContent
=
newValue
;
}
}
customElements
.
define
(
"
reflected
-
fluent
-
element
"
ReflectedFluentElement
)
;
