export
default
class
FxAccountsButton
extends
HTMLElement
{
connectedCallback
(
)
{
if
(
this
.
shadowRoot
)
{
return
;
}
let
template
=
document
.
querySelector
(
"
#
fxaccounts
-
button
-
template
"
)
;
let
shadowRoot
=
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
;
document
.
l10n
.
connectRoot
(
shadowRoot
)
;
shadowRoot
.
appendChild
(
template
.
content
.
cloneNode
(
true
)
)
;
this
.
_avatarButton
=
shadowRoot
.
querySelector
(
"
.
fxaccounts
-
avatar
-
button
"
)
;
this
.
_extraText
=
shadowRoot
.
querySelector
(
"
.
fxaccounts
-
extra
-
text
"
)
;
this
.
_enableButton
=
shadowRoot
.
querySelector
(
"
.
fxaccounts
-
enable
-
button
"
)
;
this
.
_loggedOutView
=
shadowRoot
.
querySelector
(
"
.
logged
-
out
-
view
"
)
;
this
.
_loggedInView
=
shadowRoot
.
querySelector
(
"
.
logged
-
in
-
view
"
)
;
this
.
_emailText
=
shadowRoot
.
querySelector
(
"
.
fxaccount
-
email
"
)
;
this
.
_avatarButton
.
addEventListener
(
"
click
"
this
)
;
this
.
_enableButton
.
addEventListener
(
"
click
"
this
)
;
this
.
render
(
)
;
}
handleEvent
(
event
)
{
if
(
event
.
target
=
=
this
.
_avatarButton
)
{
document
.
dispatchEvent
(
new
CustomEvent
(
"
AboutLoginsSyncOptions
"
{
bubbles
:
true
}
)
)
;
return
;
}
if
(
event
.
target
=
=
this
.
_enableButton
)
{
document
.
dispatchEvent
(
new
CustomEvent
(
"
AboutLoginsSyncEnable
"
{
bubbles
:
true
}
)
)
;
}
}
render
(
)
{
this
.
_loggedOutView
.
hidden
=
!
!
this
.
_loggedIn
;
this
.
_loggedInView
.
hidden
=
!
this
.
_loggedIn
;
this
.
_emailText
.
textContent
=
this
.
_email
;
this
.
_avatarButton
.
style
.
setProperty
(
"
-
-
avatar
-
url
"
url
(
{
this
.
_avatarURL
}
)
)
;
}
updateState
(
state
)
{
this
.
_loggedIn
=
state
.
loggedIn
;
this
.
_email
=
state
.
email
;
this
.
_avatarURL
=
state
.
avatarURL
;
this
.
render
(
)
;
}
}
customElements
.
define
(
"
fxaccounts
-
button
"
FxAccountsButton
)
;
