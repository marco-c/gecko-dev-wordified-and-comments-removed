import
{
recordTelemetryEvent
setKeyboardAccessForNonDialogElements
}
from
"
.
/
aboutLoginsUtils
.
js
"
;
const
gElements
=
{
fxAccountsButton
:
document
.
querySelector
(
"
fxaccounts
-
button
"
)
loginList
:
document
.
querySelector
(
"
login
-
list
"
)
loginIntro
:
document
.
querySelector
(
"
login
-
intro
"
)
loginItem
:
document
.
querySelector
(
"
login
-
item
"
)
loginFilter
:
document
.
querySelector
(
"
login
-
filter
"
)
menuButton
:
document
.
querySelector
(
"
menu
-
button
"
)
get
removeAllButton
(
)
{
return
this
.
menuButton
.
shadowRoot
.
querySelector
(
"
.
menuitem
-
remove
-
all
-
logins
"
)
;
}
}
;
let
numberOfLogins
=
0
;
function
updateNoLogins
(
)
{
document
.
documentElement
.
classList
.
toggle
(
"
no
-
logins
"
numberOfLogins
=
=
0
)
;
gElements
.
loginList
.
classList
.
toggle
(
"
no
-
logins
"
numberOfLogins
=
=
0
)
;
gElements
.
loginItem
.
classList
.
toggle
(
"
no
-
logins
"
numberOfLogins
=
=
0
)
;
gElements
.
removeAllButton
.
disabled
=
numberOfLogins
=
=
0
;
}
function
handleAllLogins
(
logins
)
{
gElements
.
loginList
.
setLogins
(
logins
)
;
numberOfLogins
=
logins
.
length
;
updateNoLogins
(
)
;
}
let
fxaLoggedIn
=
null
;
let
passwordSyncEnabled
=
null
;
function
handleSyncState
(
syncState
)
{
gElements
.
fxAccountsButton
.
updateState
(
syncState
)
;
gElements
.
loginIntro
.
updateState
(
syncState
)
;
fxaLoggedIn
=
syncState
.
loggedIn
;
passwordSyncEnabled
=
syncState
.
passwordSyncEnabled
;
}
window
.
addEventListener
(
"
AboutLoginsChromeToContent
"
event
=
>
{
switch
(
event
.
detail
.
messageType
)
{
case
"
AllLogins
"
:
{
document
.
documentElement
.
classList
.
remove
(
"
master
-
password
-
auth
-
required
"
)
;
setKeyboardAccessForNonDialogElements
(
true
)
;
handleAllLogins
(
event
.
detail
.
value
)
;
break
;
}
case
"
LoginAdded
"
:
{
gElements
.
loginList
.
loginAdded
(
event
.
detail
.
value
)
;
gElements
.
loginItem
.
loginAdded
(
event
.
detail
.
value
)
;
numberOfLogins
+
+
;
updateNoLogins
(
)
;
break
;
}
case
"
LoginModified
"
:
{
gElements
.
loginList
.
loginModified
(
event
.
detail
.
value
)
;
gElements
.
loginItem
.
loginModified
(
event
.
detail
.
value
)
;
break
;
}
case
"
LoginRemoved
"
:
{
gElements
.
loginItem
.
loginRemoved
(
event
.
detail
.
value
)
;
gElements
.
loginList
.
loginRemoved
(
event
.
detail
.
value
)
;
numberOfLogins
-
-
;
updateNoLogins
(
)
;
break
;
}
case
"
MasterPasswordAuthRequired
"
:
document
.
documentElement
.
classList
.
add
(
"
master
-
password
-
auth
-
required
"
)
;
setKeyboardAccessForNonDialogElements
(
false
)
;
break
;
case
"
SendFavicons
"
:
{
gElements
.
loginList
.
addFavicons
(
event
.
detail
.
value
)
;
break
;
}
case
"
SetBreaches
"
:
{
gElements
.
loginList
.
setBreaches
(
event
.
detail
.
value
)
;
gElements
.
loginItem
.
setBreaches
(
event
.
detail
.
value
)
;
break
;
}
case
"
SetVulnerableLogins
"
:
{
gElements
.
loginList
.
setVulnerableLogins
(
event
.
detail
.
value
)
;
gElements
.
loginItem
.
setVulnerableLogins
(
event
.
detail
.
value
)
;
break
;
}
case
"
Setup
"
:
{
handleAllLogins
(
event
.
detail
.
value
.
logins
)
;
handleSyncState
(
event
.
detail
.
value
.
syncState
)
;
gElements
.
loginList
.
setSortDirection
(
event
.
detail
.
value
.
selectedSort
)
;
document
.
documentElement
.
classList
.
add
(
"
initialized
"
)
;
gElements
.
loginList
.
classList
.
add
(
"
initialized
"
)
;
break
;
}
case
"
ShowLoginItemError
"
:
{
gElements
.
loginItem
.
showLoginItemError
(
event
.
detail
.
value
)
;
break
;
}
case
"
SyncState
"
:
{
handleSyncState
(
event
.
detail
.
value
)
;
break
;
}
case
"
UpdateBreaches
"
:
{
gElements
.
loginList
.
updateBreaches
(
event
.
detail
.
value
)
;
gElements
.
loginItem
.
updateBreaches
(
event
.
detail
.
value
)
;
break
;
}
case
"
UpdateVulnerableLogins
"
:
{
gElements
.
loginList
.
updateVulnerableLogins
(
event
.
detail
.
value
)
;
gElements
.
loginItem
.
updateVulnerableLogins
(
event
.
detail
.
value
)
;
break
;
}
}
}
)
;
window
.
addEventListener
(
"
AboutLoginsRemoveAllLoginsDialog
"
(
)
=
>
{
let
options
=
{
}
;
if
(
fxaLoggedIn
&
&
passwordSyncEnabled
)
{
options
.
title
=
"
about
-
logins
-
confirm
-
remove
-
all
-
sync
-
dialog
-
title
"
;
options
.
message
=
"
about
-
logins
-
confirm
-
remove
-
all
-
sync
-
dialog
-
message
"
;
}
else
{
options
.
title
=
"
about
-
logins
-
confirm
-
remove
-
all
-
dialog
-
title
"
;
options
.
message
=
"
about
-
logins
-
confirm
-
remove
-
all
-
dialog
-
message
"
;
}
options
.
confirmCheckboxLabel
=
"
about
-
logins
-
confirm
-
remove
-
all
-
dialog
-
checkbox
-
label
"
;
options
.
confirmButtonLabel
=
"
about
-
logins
-
confirm
-
remove
-
all
-
dialog
-
confirm
-
button
"
;
options
.
count
=
numberOfLogins
;
let
dialog
=
document
.
querySelector
(
"
remove
-
logins
-
dialog
"
)
;
let
dialogPromise
=
dialog
.
show
(
options
)
;
try
{
dialogPromise
.
then
(
(
)
=
>
{
window
.
document
.
documentElement
.
classList
.
remove
(
"
login
-
selected
"
)
;
let
removeAllEvt
=
new
CustomEvent
(
"
AboutLoginsRemoveAllLogins
"
{
bubbles
:
true
}
)
;
window
.
dispatchEvent
(
removeAllEvt
)
;
}
(
)
=
>
{
}
)
;
}
catch
(
e
)
{
if
(
e
!
=
undefined
)
{
throw
e
;
}
}
}
)
;
window
.
addEventListener
(
"
AboutLoginsExportPasswordsDialog
"
async
event
=
>
{
recordTelemetryEvent
(
{
object
:
"
export
"
method
:
"
mgmt_menu_item_used
"
}
)
;
let
dialog
=
document
.
querySelector
(
"
confirmation
-
dialog
"
)
;
let
options
=
{
title
:
"
about
-
logins
-
confirm
-
export
-
dialog
-
title
"
message
:
"
about
-
logins
-
confirm
-
export
-
dialog
-
message
"
confirmButtonLabel
:
"
about
-
logins
-
confirm
-
export
-
dialog
-
confirm
-
button
"
}
;
try
{
await
dialog
.
show
(
options
)
;
document
.
dispatchEvent
(
new
CustomEvent
(
"
AboutLoginsExportPasswords
"
{
bubbles
:
true
}
)
)
;
}
catch
(
ex
)
{
}
}
)
;
let
searchParamsChanged
=
false
;
let
{
protocol
pathname
searchParams
}
=
new
URL
(
document
.
location
)
;
recordTelemetryEvent
(
{
method
:
"
open_management
"
object
:
searchParams
.
get
(
"
entryPoint
"
)
|
|
"
direct
"
}
)
;
if
(
searchParams
.
has
(
"
entryPoint
"
)
)
{
searchParams
.
delete
(
"
entryPoint
"
)
;
searchParamsChanged
=
true
;
}
if
(
searchParams
.
has
(
"
filter
"
)
)
{
let
filter
=
searchParams
.
get
(
"
filter
"
)
;
if
(
!
filter
)
{
searchParams
.
delete
(
"
filter
"
)
;
searchParamsChanged
=
true
;
}
}
if
(
searchParamsChanged
)
{
let
newURL
=
protocol
+
pathname
;
let
params
=
searchParams
.
toString
(
)
;
if
(
params
)
{
newURL
+
=
"
?
"
+
params
;
}
window
.
location
.
replace
(
newURL
)
;
}
else
if
(
searchParams
.
has
(
"
filter
"
)
)
{
gElements
.
loginFilter
.
value
=
searchParams
.
get
(
"
filter
"
)
;
}
if
(
!
searchParamsChanged
)
{
gElements
.
loginFilter
.
focus
(
)
;
document
.
dispatchEvent
(
new
CustomEvent
(
"
AboutLoginsInit
"
{
bubbles
:
true
}
)
)
;
}
