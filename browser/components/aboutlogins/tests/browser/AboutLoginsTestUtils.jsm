"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutLoginsTestUtils
"
]
;
class
AboutLoginsTestUtils
{
static
async
getCsvImportSuccessDialogData
(
content
ContentTaskUtils
)
{
let
dialog
=
Cu
.
waiveXrays
(
content
.
document
.
querySelector
(
"
import
-
summary
-
dialog
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
!
dialog
.
hidden
"
Waiting
for
the
dialog
to
be
visible
"
)
;
let
added
=
dialog
.
shadowRoot
.
querySelector
(
"
.
import
-
items
-
added
.
result
-
count
"
)
.
textContent
;
let
modified
=
dialog
.
shadowRoot
.
querySelector
(
"
.
import
-
items
-
modified
.
result
-
count
"
)
.
textContent
;
let
noChange
=
dialog
.
shadowRoot
.
querySelector
(
"
.
import
-
items
-
no
-
change
.
result
-
count
"
)
.
textContent
;
let
errors
=
dialog
.
shadowRoot
.
querySelector
(
"
.
import
-
items
-
errors
.
result
-
count
"
)
.
textContent
;
return
{
added
modified
noChange
errors
l10nFocused
:
dialog
.
shadowRoot
.
activeElement
.
getAttribute
(
"
data
-
l10n
-
id
"
)
}
;
}
static
async
getCsvImportErrorDialogData
(
content
)
{
const
dialog
=
Cu
.
waiveXrays
(
content
.
document
.
querySelector
(
"
import
-
error
-
dialog
"
)
)
;
const
l10nTitle
=
dialog
.
_genericDialog
.
querySelector
(
"
.
error
-
title
"
)
.
getAttribute
(
"
data
-
l10n
-
id
"
)
;
const
l10nDescription
=
dialog
.
_genericDialog
.
querySelector
(
"
.
error
-
description
"
)
.
getAttribute
(
"
data
-
l10n
-
id
"
)
;
return
{
hidden
:
dialog
.
hidden
l10nFocused
:
dialog
.
shadowRoot
.
activeElement
.
getAttribute
(
"
data
-
l10n
-
id
"
)
l10nTitle
l10nDescription
}
;
}
static
async
getCsvImportReportData
(
content
)
{
const
rows
=
[
]
;
for
(
let
element
of
content
.
document
.
querySelectorAll
(
"
.
row
-
details
"
)
)
{
rows
.
push
(
element
.
getAttribute
(
"
data
-
l10n
-
id
"
)
)
;
}
const
added
=
content
.
document
.
querySelector
(
"
.
new
-
logins
.
result
-
count
"
)
.
textContent
;
const
modified
=
content
.
document
.
querySelector
(
"
.
exiting
-
logins
.
result
-
count
"
)
.
textContent
;
const
noChange
=
content
.
document
.
querySelector
(
"
.
duplicate
-
logins
.
result
-
count
"
)
.
textContent
;
const
errors
=
content
.
document
.
querySelector
(
"
.
errors
-
logins
.
result
-
count
"
)
.
textContent
;
return
{
rows
added
modified
noChange
errors
}
;
}
}
