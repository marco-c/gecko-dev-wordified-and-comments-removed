let
{
OSKeyStoreTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
OSKeyStoreTestUtils
.
jsm
"
)
;
add_task
(
async
function
setup
(
)
{
TEST_LOGIN1
=
await
addLogin
(
TEST_LOGIN1
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
logins
"
}
)
;
registerCleanupFunction
(
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
}
)
;
const
gTests
=
[
{
name
:
"
test
contextmenu
on
password
field
in
create
login
view
"
async
setup
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
loginList
=
Cu
.
waiveXrays
(
content
.
document
.
querySelector
(
"
login
-
list
"
)
)
;
let
createButton
=
loginList
.
_createLoginButton
;
createButton
.
click
(
)
;
}
)
;
}
}
]
;
if
(
OSKeyStoreTestUtils
.
canTestOSKeyStoreLogin
(
)
)
{
gTests
[
gTests
.
length
]
=
{
name
:
"
test
contextmenu
on
password
field
in
edit
login
view
"
async
setup
(
browser
)
{
let
osAuthDialogShown
=
OSKeyStoreTestUtils
.
waitForOSKeyStoreLogin
(
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
LoginHelper
.
loginToVanillaObject
(
TEST_LOGIN1
)
]
async
login
=
>
{
let
loginList
=
content
.
document
.
querySelector
(
"
login
-
list
"
)
;
let
loginListItem
=
loginList
.
shadowRoot
.
querySelector
(
"
.
login
-
list
-
item
[
data
-
guid
]
:
not
(
[
hidden
]
)
"
)
;
info
(
"
Clicking
on
the
first
login
"
)
;
loginListItem
.
click
(
)
;
let
loginItem
=
Cu
.
waiveXrays
(
content
.
document
.
querySelector
(
"
login
-
item
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
(
loginItem
.
_login
.
guid
=
=
loginListItem
.
dataset
.
guid
&
&
loginItem
.
_login
.
guid
=
=
login
.
guid
)
;
}
"
Waiting
for
login
item
to
get
populated
"
)
;
let
editButton
=
loginItem
.
shadowRoot
.
querySelector
(
"
.
edit
-
button
"
)
;
editButton
.
click
(
)
;
}
)
;
await
osAuthDialogShown
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
loginItem
=
Cu
.
waiveXrays
(
content
.
document
.
querySelector
(
"
login
-
item
"
)
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
loginItem
.
dataset
.
editing
"
Waiting
for
login
-
item
to
be
in
editing
state
"
)
;
}
)
;
}
}
;
}
async
function
openContextMenuForPasswordInput
(
browser
)
{
const
doc
=
browser
.
ownerDocument
;
const
CONTEXT_MENU
=
doc
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
contextMenuShownPromise
=
BrowserTestUtils
.
waitForEvent
(
CONTEXT_MENU
"
popupshown
"
)
;
let
passwordInputCoords
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
loginItem
=
Cu
.
waiveXrays
(
content
.
document
.
querySelector
(
"
login
-
item
"
)
)
;
let
passwordInput
=
loginItem
.
shadowRoot
.
querySelector
(
"
input
[
name
=
'
password
'
]
"
)
;
passwordInput
.
focus
(
)
;
let
passwordRect
=
passwordInput
.
getBoundingClientRect
(
)
;
content
.
contextmenuPromise
=
new
Promise
(
resolve
=
>
{
content
.
document
.
body
.
addEventListener
(
"
contextmenu
"
event
=
>
{
info
(
Received
event
on
target
:
{
event
.
target
.
nodeName
}
type
:
{
event
.
target
.
type
}
)
;
content
.
console
.
log
(
"
got
contextmenu
event
:
"
event
)
;
resolve
(
event
)
;
}
{
once
:
true
}
)
;
}
)
;
let
coords
=
{
x
:
passwordRect
.
x
+
passwordRect
.
width
/
2
y
:
passwordRect
.
y
+
passwordRect
.
height
/
2
}
;
return
coords
;
}
)
;
let
browserOffsets
=
browser
.
getBoundingClientRect
(
)
;
let
offsetX
=
browserOffsets
.
x
+
passwordInputCoords
.
x
;
let
offsetY
=
browserOffsets
.
y
+
passwordInputCoords
.
y
;
let
eventDetails
=
{
type
:
"
mousedown
"
button
:
2
}
;
await
EventUtils
.
synthesizeMouseAtPoint
(
offsetX
offsetY
eventDetails
)
;
eventDetails
=
{
type
:
"
contextmenu
"
button
:
2
}
;
await
EventUtils
.
synthesizeMouseAtPoint
(
offsetX
offsetY
eventDetails
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
event
=
await
content
.
contextmenuPromise
;
info
(
"
contextmenu
event
target
:
"
+
event
.
target
.
nodeName
)
;
}
)
;
info
(
"
waiting
for
contextMenuShownPromise
"
)
;
await
contextMenuShownPromise
;
return
CONTEXT_MENU
;
}
async
function
testContextMenuOnInputField
(
testData
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
await
SimpleTest
.
promiseFocus
(
browser
.
ownerGlobal
)
;
await
testData
.
setup
(
browser
)
;
info
(
"
test
setup
completed
"
)
;
let
contextMenu
=
await
openContextMenuForPasswordInput
(
browser
)
;
let
fillItem
=
contextMenu
.
querySelector
(
"
#
fill
-
login
"
)
;
ok
(
fillItem
"
fill
menu
item
exists
"
)
;
ok
(
fillItem
&
&
EventUtils
.
isHidden
(
fillItem
)
"
fill
menu
item
is
hidden
"
)
;
let
promiseHidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
info
(
"
Calling
hidePopup
on
contextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
info
(
"
waiting
for
promiseHidden
"
)
;
await
promiseHidden
;
}
for
(
let
testData
of
gTests
)
{
let
tmp
=
{
async
[
testData
.
name
]
(
)
{
await
testContextMenuOnInputField
(
testData
)
;
}
}
;
add_task
(
tmp
[
testData
.
name
]
)
;
}
