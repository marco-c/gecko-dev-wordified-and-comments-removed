let
{
LoginBreaches
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
LoginBreaches
.
jsm
"
)
;
let
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
let
{
_AboutLogins
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
actors
/
AboutLoginsParent
.
jsm
"
)
;
let
{
OSKeyStoreTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
OSKeyStoreTestUtils
.
jsm
"
)
;
let
{
LoginTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
LoginTestUtils
.
jsm
"
)
;
let
nsLoginInfo
=
new
Components
.
Constructor
(
"
mozilla
.
org
/
login
-
manager
/
loginInfo
;
1
"
Ci
.
nsILoginInfo
"
init
"
)
;
let
TEST_LOGIN1
=
new
nsLoginInfo
(
"
https
:
/
/
example
.
com
"
"
https
:
/
/
example
.
com
"
null
"
user1
"
"
pass1
"
"
username
"
"
password
"
)
;
let
TEST_LOGIN2
=
new
nsLoginInfo
(
"
https
:
/
/
2
.
example
.
com
"
"
https
:
/
/
2
.
example
.
com
"
null
"
user2
"
"
pass2
"
"
username
"
"
password
"
)
;
let
TEST_LOGIN3
=
new
nsLoginInfo
(
"
https
:
/
/
breached
.
example
.
com
"
"
https
:
/
/
breached
.
example
.
com
"
null
"
breachedLogin1
"
"
pass3
"
"
breachedLogin
"
"
password
"
)
;
TEST_LOGIN3
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
.
timePasswordChanged
=
123456
;
async
function
addLogin
(
login
)
{
let
storageChangedPromised
=
TestUtils
.
topicObserved
(
"
passwordmgr
-
storage
-
changed
"
(
_
data
)
=
>
data
=
=
"
addLogin
"
)
;
login
=
Services
.
logins
.
addLogin
(
login
)
;
await
storageChangedPromised
;
registerCleanupFunction
(
(
)
=
>
{
let
matchData
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag2
)
;
matchData
.
setPropertyAsAUTF8String
(
"
guid
"
login
.
guid
)
;
let
logins
=
Services
.
logins
.
searchLogins
(
matchData
)
;
if
(
!
logins
.
length
)
{
return
;
}
Services
.
logins
.
removeLogin
(
logins
[
0
]
)
;
}
)
;
return
login
;
}
let
EXPECTED_BREACH
=
null
;
let
EXPECTED_ERROR_MESSAGE
=
null
;
add_setup
(
async
function
setup_head
(
)
{
const
db
=
await
RemoteSettings
(
LoginBreaches
.
REMOTE_SETTINGS_COLLECTION
)
.
db
;
if
(
EXPECTED_BREACH
)
{
await
db
.
create
(
EXPECTED_BREACH
{
useRecordId
:
true
}
)
;
}
await
db
.
importChanges
(
{
}
42
)
;
if
(
EXPECTED_BREACH
)
{
await
RemoteSettings
(
LoginBreaches
.
REMOTE_SETTINGS_COLLECTION
)
.
emit
(
"
sync
"
{
data
:
{
current
:
[
EXPECTED_BREACH
]
}
}
)
;
}
SpecialPowers
.
registerConsoleListener
(
function
onConsoleMessage
(
msg
)
{
if
(
msg
.
isWarning
|
|
!
msg
.
errorMessage
)
{
return
;
}
if
(
msg
.
errorMessage
.
includes
(
'
Unknown
event
:
[
"
jsonfile
"
"
load
"
'
)
)
{
return
;
}
if
(
msg
.
errorMessage
=
=
"
Refreshing
device
list
failed
.
"
|
|
msg
.
errorMessage
=
=
"
Skipping
device
list
refresh
;
not
signed
in
"
)
{
return
;
}
if
(
msg
.
errorMessage
.
includes
(
"
ReferenceError
:
MigrationWizard
is
not
defined
"
)
)
{
return
;
}
if
(
msg
.
errorMessage
.
includes
(
"
Error
detecting
Chrome
profiles
"
)
|
|
msg
.
errorMessage
.
includes
(
"
Library
/
Application
Support
/
Chromium
/
Local
State
(
No
such
file
or
directory
)
"
)
|
|
msg
.
errorMessage
.
includes
(
"
Library
/
Application
Support
/
Google
/
Chrome
/
Local
State
(
No
such
file
or
directory
)
"
)
)
{
return
;
}
if
(
msg
.
errorMessage
.
includes
(
"
Can
'
t
find
profile
directory
.
"
)
)
{
return
;
}
if
(
msg
.
errorMessage
.
includes
(
"
Error
reading
typed
URL
history
"
)
)
{
return
;
}
if
(
msg
.
errorMessage
.
includes
(
EXPECTED_ERROR_MESSAGE
)
)
{
return
;
}
if
(
msg
.
errorMessage
=
=
"
FILE_FORMAT_ERROR
"
)
{
return
;
}
if
(
msg
.
errorMessage
=
=
"
NotFoundError
:
No
such
JSWindowActor
'
MarionetteEvents
'
"
)
{
return
;
}
ok
(
false
msg
.
message
|
|
msg
.
errorMessage
)
;
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
EXPECTED_ERROR_MESSAGE
=
null
;
await
db
.
clear
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
SpecialPowers
.
postConsoleSentinel
(
)
;
}
)
;
}
)
;
function
waitForMPDialog
(
action
)
{
const
BRAND_BUNDLE
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
;
const
BRAND_FULL_NAME
=
BRAND_BUNDLE
.
GetStringFromName
(
"
brandFullName
"
)
;
let
dialogShown
=
TestUtils
.
topicObserved
(
"
common
-
dialog
-
loaded
"
)
;
return
dialogShown
.
then
(
function
(
[
subject
]
)
{
let
dialog
=
subject
.
Dialog
;
let
expected
=
"
Password
Required
-
"
+
BRAND_FULL_NAME
;
is
(
dialog
.
args
.
title
expected
"
Dialog
is
the
Primary
Password
dialog
"
)
;
if
(
action
=
=
"
authenticate
"
)
{
SpecialPowers
.
wrap
(
dialog
.
ui
.
password1Textbox
)
.
setUserInput
(
LoginTestUtils
.
primaryPassword
.
primaryPassword
)
;
dialog
.
ui
.
button0
.
click
(
)
;
}
else
if
(
action
=
=
"
cancel
"
)
{
dialog
.
ui
.
button1
.
click
(
)
;
}
return
BrowserTestUtils
.
waitForEvent
(
window
"
DOMModalDialogClosed
"
)
;
}
)
;
}
function
forceAuthTimeoutAndWaitForMPDialog
(
action
)
{
const
AUTH_TIMEOUT_MS
=
5
*
60
*
1000
;
_AboutLogins
.
_authExpirationTime
-
=
AUTH_TIMEOUT_MS
+
1
;
return
waitForMPDialog
(
action
)
;
}
function
forceAuthTimeoutAndWaitForOSKeyStoreLogin
(
{
loginResult
}
)
{
const
AUTH_TIMEOUT_MS
=
5
*
60
*
1000
;
_AboutLogins
.
_authExpirationTime
-
=
AUTH_TIMEOUT_MS
+
1
;
return
OSKeyStoreTestUtils
.
waitForOSKeyStoreLogin
(
loginResult
)
;
}
