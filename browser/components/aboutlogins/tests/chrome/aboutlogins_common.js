"
use
strict
"
;
function
asyncElementRendered
(
)
{
return
Promise
.
resolve
(
)
;
}
function
importDependencies
(
templateFrame
destinationEl
)
{
let
templates
=
templateFrame
.
contentDocument
.
querySelectorAll
(
"
template
"
)
;
isnot
(
templates
null
"
Check
some
templates
found
"
)
;
for
(
let
template
of
templates
)
{
let
imported
=
document
.
importNode
(
template
true
)
;
destinationEl
.
appendChild
(
imported
)
;
}
}
Object
.
defineProperty
(
document
"
l10n
"
{
configurable
:
true
writable
:
true
value
:
{
connectRoot
(
)
{
}
translateElements
(
)
{
return
Promise
.
resolve
(
)
;
}
getAttributes
(
element
)
{
return
{
id
:
element
.
getAttribute
(
"
data
-
l10n
-
id
"
)
args
:
element
.
getAttribute
(
"
data
-
l10n
-
args
"
)
?
JSON
.
parse
(
element
.
getAttribute
(
"
data
-
l10n
-
args
"
)
)
:
{
}
}
;
}
setAttributes
(
element
id
args
)
{
element
.
setAttribute
(
"
data
-
l10n
-
id
"
id
)
;
if
(
args
)
{
element
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
args
)
)
;
}
else
{
element
.
removeAttribute
(
"
data
-
l10n
-
args
"
)
;
}
}
}
}
)
;
Object
.
defineProperty
(
window
"
AboutLoginsUtils
"
{
configurable
:
true
writable
:
true
value
:
{
getLoginOrigin
(
uriString
)
{
return
uriString
;
}
async
promptForMasterPassword
(
resolve
messageId
)
{
resolve
(
true
)
;
}
doLoginsMatch
(
login1
login2
)
{
return
(
login1
.
origin
=
=
login2
.
origin
&
&
login1
.
username
=
=
login2
.
username
&
&
login1
.
password
=
=
login2
.
password
)
;
}
masterPasswordEnabled
:
false
}
}
)
;
