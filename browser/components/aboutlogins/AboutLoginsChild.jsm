"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutLoginsChild
"
]
;
const
{
LoginHelper
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
ClipboardHelper
"
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
"
nsIClipboardHelper
"
)
;
const
TELEMETRY_EVENT_CATEGORY
=
"
pwmgr
"
;
const
TELEMETRY_MIN_MS_BETWEEN_OPEN_MANAGEMENT
=
5000
;
let
gLastOpenManagementBrowserId
=
null
;
let
gLastOpenManagementEventTime
=
Number
.
NEGATIVE_INFINITY
;
let
gPrimaryPasswordPromise
;
function
recordTelemetryEvent
(
event
)
{
try
{
let
{
method
object
extra
=
{
}
value
=
null
}
=
event
;
Services
.
telemetry
.
recordEvent
(
TELEMETRY_EVENT_CATEGORY
method
object
value
extra
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
"
AboutLoginsChild
:
error
recording
telemetry
event
:
"
+
ex
.
message
)
;
}
}
class
AboutLoginsChild
extends
JSWindowActorChild
{
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
AboutLoginsInit
"
:
{
this
.
#
aboutLoginsInit
(
)
;
break
;
}
case
"
AboutLoginsImportReportInit
"
:
{
this
.
#
aboutLoginsImportReportInit
(
)
;
break
;
}
case
"
AboutLoginsCopyLoginDetail
"
:
{
this
.
#
aboutLoginsCopyLoginDetail
(
event
.
detail
)
;
break
;
}
case
"
AboutLoginsCreateLogin
"
:
{
this
.
#
aboutLoginsCreateLogin
(
event
.
detail
)
;
break
;
}
case
"
AboutLoginsDeleteLogin
"
:
{
this
.
#
aboutLoginsDeleteLogin
(
event
.
detail
)
;
break
;
}
case
"
AboutLoginsExportPasswords
"
:
{
this
.
#
aboutLoginsExportPasswords
(
)
;
break
;
}
case
"
AboutLoginsGetHelp
"
:
{
this
.
#
aboutLoginsGetHelp
(
)
;
break
;
}
case
"
AboutLoginsImportFromBrowser
"
:
{
this
.
#
aboutLoginsImportFromBrowser
(
)
;
break
;
}
case
"
AboutLoginsImportFromFile
"
:
{
this
.
#
aboutLoginsImportFromFile
(
)
;
break
;
}
case
"
AboutLoginsOpenPreferences
"
:
{
this
.
#
aboutLoginsOpenPreferences
(
)
;
break
;
}
case
"
AboutLoginsRecordTelemetryEvent
"
:
{
this
.
#
aboutLoginsRecordTelemetryEvent
(
event
)
;
break
;
}
case
"
AboutLoginsRemoveAllLogins
"
:
{
this
.
#
aboutLoginsRemoveAllLogins
(
)
;
break
;
}
case
"
AboutLoginsSortChanged
"
:
{
this
.
#
aboutLoginsSortChanged
(
event
.
detail
)
;
break
;
}
case
"
AboutLoginsSyncEnable
"
:
{
this
.
#
aboutLoginsSyncEnable
(
)
;
break
;
}
case
"
AboutLoginsSyncOptions
"
:
{
this
.
#
aboutLoginsSyncOptions
(
)
;
break
;
}
case
"
AboutLoginsUpdateLogin
"
:
{
this
.
#
aboutLoginsUpdateLogin
(
event
.
detail
)
;
break
;
}
}
}
#
aboutLoginsInit
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
Subscribe
"
)
;
let
win
=
this
.
browsingContext
.
window
;
let
waivedContent
=
Cu
.
waiveXrays
(
win
)
;
let
that
=
this
;
let
AboutLoginsUtils
=
{
doLoginsMatch
(
loginA
loginB
)
{
return
LoginHelper
.
doLoginsMatch
(
loginA
loginB
{
}
)
;
}
getLoginOrigin
(
uriString
)
{
return
LoginHelper
.
getLoginOrigin
(
uriString
)
;
}
setFocus
(
element
)
{
Services
.
focus
.
setFocus
(
element
Services
.
focus
.
FLAG_BYKEY
)
;
}
async
promptForPrimaryPassword
(
resolve
messageId
)
{
gPrimaryPasswordPromise
=
{
resolve
}
;
that
.
sendAsyncMessage
(
"
AboutLogins
:
PrimaryPasswordRequest
"
messageId
)
;
return
gPrimaryPasswordPromise
;
}
fileImportEnabled
:
Services
.
prefs
.
getBoolPref
(
"
signon
.
management
.
page
.
fileImport
.
enabled
"
)
primaryPasswordEnabled
:
true
passwordRevealVisible
:
true
}
;
waivedContent
.
AboutLoginsUtils
=
Cu
.
cloneInto
(
AboutLoginsUtils
waivedContent
{
cloneFunctions
:
true
}
)
;
}
#
aboutLoginsImportReportInit
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
ImportReportInit
"
)
;
}
#
aboutLoginsCopyLoginDetail
(
detail
)
{
ClipboardHelper
.
copyString
(
detail
ClipboardHelper
.
Sensitive
)
;
}
#
aboutLoginsCreateLogin
(
login
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
CreateLogin
"
{
login
}
)
;
}
#
aboutLoginsDeleteLogin
(
login
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
DeleteLogin
"
{
login
}
)
;
}
#
aboutLoginsExportPasswords
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
ExportPasswords
"
)
;
}
#
aboutLoginsGetHelp
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
GetHelp
"
)
;
}
#
aboutLoginsImportFromBrowser
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
ImportFromBrowser
"
)
;
recordTelemetryEvent
(
{
object
:
"
import_from_browser
"
method
:
"
mgmt_menu_item_used
"
}
)
;
}
#
aboutLoginsImportFromFile
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
ImportFromFile
"
)
;
recordTelemetryEvent
(
{
object
:
"
import_from_csv
"
method
:
"
mgmt_menu_item_used
"
}
)
;
}
#
aboutLoginsOpenPreferences
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
OpenPreferences
"
)
;
recordTelemetryEvent
(
{
object
:
"
preferences
"
method
:
"
mgmt_menu_item_used
"
}
)
;
}
#
aboutLoginsRecordTelemetryEvent
(
event
)
{
let
{
method
}
=
event
.
detail
;
if
(
method
=
=
"
open_management
"
)
{
let
{
docShell
}
=
this
.
browsingContext
;
let
now
=
docShell
.
now
(
)
;
if
(
this
.
browsingContext
.
browserId
=
=
gLastOpenManagementBrowserId
&
&
now
-
gLastOpenManagementEventTime
<
TELEMETRY_MIN_MS_BETWEEN_OPEN_MANAGEMENT
)
{
return
;
}
gLastOpenManagementEventTime
=
now
;
gLastOpenManagementBrowserId
=
this
.
browsingContext
.
browserId
;
}
recordTelemetryEvent
(
event
.
detail
)
;
}
#
aboutLoginsRemoveAllLogins
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
RemoveAllLogins
"
)
;
}
#
aboutLoginsSortChanged
(
detail
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
SortChanged
"
detail
)
;
}
#
aboutLoginsSyncEnable
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
SyncEnable
"
)
;
}
#
aboutLoginsSyncOptions
(
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
SyncOptions
"
)
;
}
#
aboutLoginsUpdateLogin
(
login
)
{
this
.
sendAsyncMessage
(
"
AboutLogins
:
UpdateLogin
"
{
login
}
)
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
AboutLogins
:
ImportReportData
"
:
this
.
#
importReportData
(
message
.
data
)
;
break
;
case
"
AboutLogins
:
PrimaryPasswordResponse
"
:
this
.
#
primaryPasswordResponse
(
message
.
data
)
;
break
;
case
"
AboutLogins
:
RemaskPassword
"
:
this
.
#
remaskPassword
(
message
.
data
)
;
break
;
case
"
AboutLogins
:
Setup
"
:
this
.
#
setup
(
message
.
data
)
;
break
;
default
:
this
.
#
passMessageDataToContent
(
message
)
;
}
}
#
importReportData
(
data
)
{
this
.
sendToContent
(
"
ImportReportData
"
data
)
;
}
#
primaryPasswordResponse
(
data
)
{
if
(
gPrimaryPasswordPromise
)
{
gPrimaryPasswordPromise
.
resolve
(
data
.
result
)
;
recordTelemetryEvent
(
data
.
telemetryEvent
)
;
}
}
#
remaskPassword
(
data
)
{
this
.
sendToContent
(
"
RemaskPassword
"
data
)
;
}
#
setup
(
data
)
{
let
utils
=
Cu
.
waiveXrays
(
this
.
browsingContext
.
window
)
.
AboutLoginsUtils
;
utils
.
primaryPasswordEnabled
=
data
.
primaryPasswordEnabled
;
utils
.
passwordRevealVisible
=
data
.
passwordRevealVisible
;
utils
.
importVisible
=
data
.
importVisible
;
utils
.
supportBaseURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
;
this
.
sendToContent
(
"
Setup
"
data
)
;
}
#
passMessageDataToContent
(
message
)
{
this
.
sendToContent
(
message
.
name
.
replace
(
"
AboutLogins
:
"
"
"
)
message
.
data
)
;
}
sendToContent
(
messageType
detail
)
{
let
win
=
this
.
document
.
defaultView
;
let
message
=
Object
.
assign
(
{
messageType
}
{
value
:
detail
}
)
;
let
event
=
new
win
.
CustomEvent
(
"
AboutLoginsChromeToContent
"
{
detail
:
Cu
.
cloneInto
(
message
win
)
}
)
;
win
.
dispatchEvent
(
event
)
;
}
}
