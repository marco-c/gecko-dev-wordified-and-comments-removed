"
use
strict
"
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
add_setup
(
async
function
setup_tests
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
add_task
(
async
function
colorwaycloset_modal_cancel
(
)
{
await
testInColorwayClosetModal
(
async
(
document
contentWindow
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
const
{
cancelButton
}
=
getColorwayClosetTestElements
(
document
)
;
let
modalClosedPromise
=
BrowserTestUtils
.
waitForEvent
(
contentWindow
"
unload
"
"
Waiting
for
modal
to
close
"
)
;
cancelButton
.
click
(
)
;
info
(
"
Closing
modal
"
)
;
await
modalClosedPromise
;
await
waitForColorwaysTelemetryPromise
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
"
colorways_modal
"
method
:
"
cancel
"
object
:
"
modal
"
}
]
{
category
:
"
colorways_modal
"
object
:
"
modal
"
}
)
;
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
}
)
;
add_task
(
async
function
colorwaycloset_modal_set_colorway
(
)
{
await
testInColorwayClosetModal
(
async
(
document
contentWindow
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
info
(
"
Selecting
colorway
radio
button
"
)
;
const
{
colorwaySelector
colorwayIntensities
setColorwayButton
}
=
getColorwayClosetTestElements
(
document
)
;
const
colorwayFamilyButton
=
colorwaySelector
.
querySelector
(
input
[
value
=
"
{
BALANCED_COLORWAY_THEME_ID
}
"
]
)
;
colorwayFamilyButton
.
click
(
)
;
info
(
"
Selecting
new
intensity
button
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
colorwayIntensities
{
subtree
:
true
attributeFilter
:
[
"
value
"
]
}
(
)
=
>
colorwayIntensities
.
querySelector
(
input
[
value
=
"
{
SOFT_COLORWAY_THEME_ID
}
"
]
)
"
Waiting
for
intensity
button
to
be
available
"
)
;
let
intensitiesChangedPromise
=
BrowserTestUtils
.
waitForEvent
(
colorwayIntensities
"
change
"
"
Waiting
for
intensities
change
event
"
)
;
let
themeChangedPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
const
activeTheme
=
Services
.
prefs
.
getStringPref
(
"
extensions
.
activeThemeID
"
)
;
return
activeTheme
=
=
=
SOFT_COLORWAY_THEME_ID
;
}
"
Waiting
for
the
current
theme
to
change
after
new
intensity
"
)
;
colorwayIntensities
.
querySelector
(
input
[
value
=
"
{
SOFT_COLORWAY_THEME_ID
}
"
]
)
.
click
(
)
;
await
intensitiesChangedPromise
;
await
themeChangedPromise
;
info
(
"
Selecting
set
colorway
button
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
setColorwayButton
{
childList
:
true
attributeFilter
:
[
"
disabled
"
]
}
(
)
=
>
!
setColorwayButton
.
disabled
"
Waiting
for
set
-
colorway
button
to
be
available
for
selection
"
)
;
let
modalClosedPromise
=
BrowserTestUtils
.
waitForEvent
(
contentWindow
"
unload
"
"
Waiting
for
modal
to
close
"
)
;
setColorwayButton
.
click
(
)
;
await
waitForColorwaysTelemetryPromise
(
)
;
info
(
"
Closing
modal
"
)
;
await
modalClosedPromise
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
"
colorways_modal
"
method
:
"
set_colorway
"
object
:
"
modal
"
value
:
null
extra
:
{
colorway_id
:
SOFT_COLORWAY_THEME_ID
}
}
]
{
category
:
"
colorways_modal
"
object
:
"
modal
"
}
)
;
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
}
)
;
add_task
(
async
function
colorwaycloset_modal_set_colorway_no_intensity
(
)
{
await
testInColorwayClosetModal
(
async
(
document
contentWindow
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
const
{
colorwaySelector
setColorwayButton
}
=
getColorwayClosetTestElements
(
document
)
;
info
(
"
Selecting
colorway
radio
button
"
)
;
const
colorwayFamilyButton
=
colorwaySelector
.
querySelector
(
input
[
value
=
"
{
NO_INTENSITY_COLORWAY_THEME_ID
}
"
]
)
;
let
themeChangedPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
const
activeTheme
=
Services
.
prefs
.
getStringPref
(
"
extensions
.
activeThemeID
"
)
;
return
activeTheme
=
=
=
NO_INTENSITY_COLORWAY_THEME_ID
;
}
"
Waiting
for
the
current
theme
to
change
after
new
intensity
"
)
;
colorwayFamilyButton
.
click
(
)
;
await
themeChangedPromise
;
info
(
"
Selecting
set
colorway
button
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
setColorwayButton
{
childList
:
true
attributeFilter
:
[
"
disabled
"
]
}
(
)
=
>
!
setColorwayButton
.
disabled
"
Waiting
for
set
-
colorway
button
to
be
available
for
selection
"
)
;
let
modalClosedPromise
=
BrowserTestUtils
.
waitForEvent
(
contentWindow
"
unload
"
"
Waiting
for
modal
to
close
"
)
;
setColorwayButton
.
click
(
)
;
await
waitForColorwaysTelemetryPromise
(
)
;
info
(
"
Closing
modal
"
)
;
await
modalClosedPromise
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
"
colorways_modal
"
method
:
"
set_colorway
"
object
:
"
modal
"
value
:
null
extra
:
{
colorway_id
:
NO_INTENSITY_COLORWAY_THEME_ID
}
}
]
{
category
:
"
colorways_modal
"
object
:
"
modal
"
}
)
;
Services
.
telemetry
.
clearEvents
(
)
;
}
[
NO_INTENSITY_COLORWAY_THEME_ID
]
)
;
}
)
;
add_task
(
async
function
colorwaycloset_modal_firefox_home
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
startup
.
homepage
"
"
about
:
blank
"
]
]
}
)
;
await
testInColorwayClosetModal
(
async
document
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
const
{
homepageResetContainer
homepageResetApplyButton
homepageResetUndoButton
}
=
getColorwayClosetTestElements
(
document
)
;
ok
(
homepageResetContainer
"
Firefox
Home
banner
is
visible
on
the
modal
"
)
;
ok
(
homepageResetApplyButton
"
Firefox
Home
Apply
button
should
be
visible
"
)
;
homepageResetApplyButton
.
click
(
)
;
await
waitForColorwaysTelemetryPromise
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
"
colorways_modal
"
method
:
"
homepage_reset
"
object
:
"
modal
"
}
]
{
category
:
"
colorways_modal
"
object
:
"
modal
"
}
)
;
ok
(
homepageResetUndoButton
"
Firefox
Home
Undo
button
should
be
visible
"
)
;
homepageResetUndoButton
.
click
(
)
;
await
waitForColorwaysTelemetryPromise
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
"
colorways_modal
"
method
:
"
homepage_reset_undo
"
object
:
"
modal
"
}
]
{
category
:
"
colorways_modal
"
object
:
"
modal
"
}
)
;
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
}
)
;
add_task
(
async
function
colorwaycloset_modal_unknown_source
(
)
{
await
testInColorwayClosetModal
(
async
document
=
>
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
await
waitForColorwaysTelemetryPromise
(
)
;
TelemetryTestUtils
.
assertNumberOfEvents
(
1
{
category
:
"
colorways_modal
"
object
:
"
unknown
"
}
)
;
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
}
)
;
