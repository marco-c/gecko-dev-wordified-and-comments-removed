ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
this
)
;
PromiseTestUtils
.
whitelistRejectionsGlobally
(
/
Too
many
characters
in
placeable
/
)
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
aboutconfig
.
modify
.
boolean
"
true
]
[
"
test
.
aboutconfig
.
modify
.
number
"
1337
]
[
"
test
.
aboutconfig
.
modify
.
string
"
"
the
answer
to
the
life
the
universe
and
everything
"
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
PREF_BOOLEAN_DEFAULT_TRUE
)
;
Services
.
prefs
.
clearUserPref
(
PREF_NUMBER_DEFAULT_ZERO
)
;
Services
.
prefs
.
clearUserPref
(
PREF_STRING_DEFAULT_EMPTY
)
;
}
)
;
}
)
;
add_task
(
async
function
test_add_user_pref
(
)
{
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
PREF_NEW
)
Ci
.
nsIPrefBranch
.
PREF_INVALID
)
;
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
Assert
.
ok
(
!
this
.
getRow
(
PREF_NEW
)
)
;
this
.
search
(
PREF_NEW
)
;
let
row
=
this
.
getRow
(
PREF_NEW
)
;
Assert
.
ok
(
row
.
hasClass
(
"
deleted
"
)
)
;
for
(
let
[
radioIndex
expectedValue
expectedEditingMode
]
of
[
[
0
true
false
]
[
1
0
true
]
[
2
"
"
true
]
]
)
{
row
.
element
.
querySelectorAll
(
"
input
"
)
[
radioIndex
]
.
click
(
)
;
row
.
editColumnButton
.
click
(
)
;
Assert
.
ok
(
!
row
.
hasClass
(
"
deleted
"
)
)
;
Assert
.
ok
(
Preferences
.
get
(
PREF_NEW
)
=
=
=
expectedValue
)
;
Assert
.
equal
(
!
!
row
.
valueInput
expectedEditingMode
)
;
this
.
search
(
PREF_NEW
)
;
row
=
this
.
getRow
(
PREF_NEW
)
;
Assert
.
ok
(
!
row
.
hasClass
(
"
deleted
"
)
)
;
Assert
.
ok
(
!
row
.
valueInput
)
;
row
.
resetColumnButton
.
click
(
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
PREF_NEW
)
Ci
.
nsIPrefBranch
.
PREF_INVALID
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_delete_user_pref
(
)
{
for
(
let
[
radioIndex
testValue
]
of
[
[
0
false
]
[
1
-
1
]
[
2
"
value
"
]
]
)
{
Preferences
.
set
(
PREF_NEW
testValue
)
;
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
let
row
=
this
.
getRow
(
PREF_NEW
)
;
row
.
resetColumnButton
.
click
(
)
;
Assert
.
ok
(
row
.
hasClass
(
"
deleted
"
)
)
;
Assert
.
equal
(
Services
.
prefs
.
getPrefType
(
PREF_NEW
)
Ci
.
nsIPrefBranch
.
PREF_INVALID
)
;
Assert
.
ok
(
row
.
element
.
querySelectorAll
(
"
input
"
)
[
radioIndex
]
.
checked
)
;
row
.
editColumnButton
.
click
(
)
;
Assert
.
ok
(
!
row
.
hasClass
(
"
deleted
"
)
)
;
Assert
.
ok
(
Preferences
.
get
(
PREF_NEW
)
=
=
=
testValue
)
;
row
.
resetColumnButton
.
click
(
)
;
this
.
showAll
(
)
;
Assert
.
ok
(
!
this
.
getRow
(
PREF_NEW
)
)
;
}
)
;
}
}
)
;
add_task
(
async
function
test_reset_user_pref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_BOOLEAN_DEFAULT_TRUE
false
]
[
PREF_STRING_LOCALIZED_MISSING
"
user
-
value
"
]
]
}
)
;
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
let
row
=
this
.
getRow
(
PREF_BOOLEAN_DEFAULT_TRUE
)
;
row
.
resetColumnButton
.
click
(
)
;
Assert
.
ok
(
!
row
.
hasClass
(
"
has
-
user
-
value
"
)
)
;
Assert
.
ok
(
!
row
.
resetColumnButton
)
;
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
PREF_BOOLEAN_DEFAULT_TRUE
)
)
;
Assert
.
equal
(
this
.
getRow
(
PREF_BOOLEAN_DEFAULT_TRUE
)
.
value
"
true
"
)
;
this
.
showAll
(
)
;
row
=
this
.
getRow
(
PREF_BOOLEAN_DEFAULT_TRUE
)
;
Assert
.
ok
(
!
row
.
hasClass
(
"
has
-
user
-
value
"
)
)
;
Assert
.
ok
(
!
row
.
resetColumnButton
)
;
Assert
.
equal
(
this
.
getRow
(
PREF_BOOLEAN_DEFAULT_TRUE
)
.
value
"
true
"
)
;
row
=
this
.
getRow
(
PREF_STRING_LOCALIZED_MISSING
)
;
Assert
.
equal
(
row
.
value
"
user
-
value
"
)
;
row
.
resetColumnButton
.
click
(
)
;
Assert
.
ok
(
!
row
.
hasClass
(
"
has
-
user
-
value
"
)
)
;
Assert
.
ok
(
!
row
.
resetColumnButton
)
;
Assert
.
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
PREF_STRING_LOCALIZED_MISSING
)
)
;
Assert
.
equal
(
this
.
getRow
(
PREF_STRING_LOCALIZED_MISSING
)
.
value
"
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_modify
(
)
{
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
for
(
let
nameOfBoolPref
of
[
"
test
.
aboutconfig
.
modify
.
boolean
"
PREF_BOOLEAN_DEFAULT_TRUE
]
)
{
let
row
=
this
.
getRow
(
nameOfBoolPref
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
row
.
editColumnButton
.
click
(
)
;
Assert
.
equal
(
this
.
getRow
(
nameOfBoolPref
)
.
value
"
"
+
Preferences
.
get
(
nameOfBoolPref
)
)
;
let
prefHasUserValue
=
Services
.
prefs
.
prefHasUserValue
(
nameOfBoolPref
)
;
Assert
.
equal
(
row
.
hasClass
(
"
has
-
user
-
value
"
)
prefHasUserValue
)
;
Assert
.
equal
(
!
!
row
.
resetColumnButton
prefHasUserValue
)
;
}
}
let
row
=
this
.
getRow
(
"
test
.
aboutconfig
.
modify
.
string
"
)
;
row
.
editColumnButton
.
click
(
)
;
row
.
valueInput
.
value
=
"
test
"
;
let
intRow
=
this
.
getRow
(
"
test
.
aboutconfig
.
modify
.
number
"
)
;
intRow
.
editColumnButton
.
click
(
)
;
Assert
.
equal
(
intRow
.
valueInput
.
value
Preferences
.
get
(
"
test
.
aboutconfig
.
modify
.
number
"
)
)
;
Assert
.
ok
(
!
row
.
valueInput
)
;
Assert
.
equal
(
row
.
value
Preferences
.
get
(
"
test
.
aboutconfig
.
modify
.
string
"
)
)
;
for
(
let
invalidValue
of
[
"
"
"
"
"
a
"
"
1
.
5
"
"
-
2147483649
"
"
2147483648
"
]
)
{
intRow
.
valueInput
.
value
=
invalidValue
;
intRow
.
editColumnButton
.
click
(
)
;
Assert
.
ok
(
intRow
.
valueInput
)
;
}
for
(
let
[
prefName
willDelete
]
of
[
[
"
test
.
aboutconfig
.
modify
.
string
"
true
]
[
"
test
.
aboutconfig
.
modify
.
number
"
true
]
[
PREF_NUMBER_DEFAULT_ZERO
false
]
[
PREF_STRING_DEFAULT_EMPTY
false
]
]
)
{
row
=
this
.
getRow
(
prefName
)
;
row
.
editColumnButton
.
click
(
)
;
Assert
.
equal
(
row
.
valueInput
.
value
Preferences
.
get
(
prefName
)
)
;
row
.
valueInput
.
value
=
"
42
"
;
row
.
editColumnButton
.
click
(
)
;
Assert
.
equal
(
Preferences
.
get
(
prefName
)
"
42
"
)
;
Assert
.
equal
(
row
.
value
"
42
"
)
;
Assert
.
ok
(
row
.
hasClass
(
"
has
-
user
-
value
"
)
)
;
row
.
editColumnButton
.
click
(
)
;
Assert
.
equal
(
row
.
valueInput
.
value
Preferences
.
get
(
prefName
)
)
;
row
.
resetColumnButton
.
click
(
)
;
Assert
.
ok
(
!
row
.
hasClass
(
"
has
-
user
-
value
"
)
)
;
Assert
.
equal
(
row
.
hasClass
(
"
deleted
"
)
willDelete
)
;
}
}
)
;
}
)
;
