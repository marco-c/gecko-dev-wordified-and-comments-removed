add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
aboutconfig
.
a
"
"
test
value
1
"
]
[
"
test
.
aboutconfig
.
ab
"
"
test
value
2
"
]
[
"
test
.
aboutconfig
.
bc
"
"
test
value
3
"
]
]
}
)
;
}
)
;
add_task
(
async
function
test_search
(
)
{
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
let
prefArray
=
Services
.
prefs
.
getChildList
(
"
"
)
;
Assert
.
greater
(
this
.
rows
.
length
prefArray
.
length
-
50
)
;
this
.
search
(
"
Wser
.
down
"
)
;
let
filteredPrefArray
=
prefArray
.
filter
(
pref
=
>
pref
.
includes
(
"
wser
.
down
"
)
)
;
Assert
.
equal
(
this
.
rows
.
length
filteredPrefArray
.
length
+
1
)
;
this
.
showAll
(
)
;
Assert
.
equal
(
this
.
searchInput
.
value
"
"
)
;
Assert
.
greater
(
this
.
rows
.
length
prefArray
.
length
-
50
)
;
EventUtils
.
sendKey
(
"
escape
"
)
;
Assert
.
equal
(
this
.
rows
.
length
0
)
;
this
.
search
(
"
aJunkValueasdf
"
)
;
Assert
.
equal
(
this
.
rows
.
length
1
)
;
EventUtils
.
sendKey
(
"
escape
"
)
;
Assert
.
equal
(
this
.
searchInput
.
value
"
"
)
;
Assert
.
equal
(
this
.
rows
.
length
0
)
;
this
.
search
(
"
test
.
aboutconfig
.
a
"
)
;
Assert
.
equal
(
this
.
rows
.
length
2
)
;
this
.
search
(
"
TEST
.
aboutconfig
.
a
"
)
;
Assert
.
equal
(
this
.
rows
.
length
3
)
;
this
.
search
(
"
"
)
;
Assert
.
equal
(
this
.
rows
.
length
0
)
;
}
)
;
}
)
;
add_task
(
async
function
test_search_wildcard
(
)
{
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
const
extra
=
1
;
this
.
search
(
"
test
.
about
*
"
)
;
Assert
.
equal
(
this
.
rows
.
length
3
+
extra
)
;
this
.
search
(
"
test
.
about
*
a
"
)
;
Assert
.
equal
(
this
.
rows
.
length
2
+
extra
)
;
this
.
search
(
"
test
.
about
*
ab
"
)
;
Assert
.
equal
(
this
.
rows
.
length
1
+
extra
)
;
this
.
search
(
"
test
.
aboutcon
*
fig
"
)
;
Assert
.
equal
(
this
.
rows
.
length
3
+
extra
)
;
this
.
search
(
"
test
.
about
*
fig
*
ab
"
)
;
Assert
.
equal
(
this
.
rows
.
length
1
+
extra
)
;
this
.
search
(
"
test
.
about
*
config
*
ab
"
)
;
Assert
.
equal
(
this
.
rows
.
length
1
+
extra
)
;
}
)
;
}
)
;
add_task
(
async
function
test_search_delayed
(
)
{
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
this
.
search
(
"
"
)
;
EventUtils
.
synthesizeKey
(
"
t
"
)
;
EventUtils
.
synthesizeKey
(
"
e
"
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
Assert
.
equal
(
this
.
rows
.
length
0
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
Assert
.
greater
(
this
.
rows
.
length
0
)
;
this
.
search
(
"
test
.
aboutconfig
.
a
"
)
;
Assert
.
equal
(
this
.
rows
.
length
2
)
;
let
prefsTableChanged
=
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
(
)
=
>
{
observer
.
disconnect
(
)
;
resolve
(
)
;
}
)
;
observer
.
observe
(
this
.
prefsTable
{
childList
:
true
}
)
;
for
(
let
element
of
this
.
prefsTable
.
children
)
{
observer
.
observe
(
element
{
attributes
:
true
}
)
;
}
}
)
;
EventUtils
.
synthesizeKey
(
"
b
"
)
;
Assert
.
equal
(
this
.
rows
.
length
2
)
;
await
prefsTableChanged
;
Assert
.
equal
(
this
.
rows
.
length
1
)
;
}
)
;
}
)
;
add_task
(
async
function
test_search_add_row_color
(
)
{
await
AboutConfigTest
.
withNewTab
(
async
function
(
)
{
this
.
search
(
"
test
.
aboutconfig
.
add
"
)
;
Assert
.
equal
(
this
.
rows
.
length
1
)
;
Assert
.
ok
(
!
this
.
getRow
(
"
test
.
aboutconfig
.
add
"
)
.
hasClass
(
"
odd
"
)
)
;
this
.
search
(
"
test
.
aboutconfig
.
b
"
)
;
Assert
.
equal
(
this
.
rows
.
length
2
)
;
Assert
.
ok
(
this
.
getRow
(
"
test
.
aboutconfig
.
b
"
)
.
hasClass
(
"
odd
"
)
)
;
}
)
;
}
)
;
