"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
this
)
;
const
PREF_BOOLEAN_DEFAULT_TRUE
=
"
accessibility
.
typeaheadfind
.
manual
"
;
const
PREF_BOOLEAN_USERVALUE_TRUE
=
"
browser
.
dom
.
window
.
dump
.
enabled
"
;
const
PREF_NUMBER_DEFAULT_ZERO
=
"
accessibility
.
typeaheadfind
.
casesensitive
"
;
const
PREF_STRING_DEFAULT_EMPTY
=
"
browser
.
helperApps
.
neverAsk
.
openFile
"
;
const
PREF_STRING_DEFAULT_NOTEMPTY
=
"
accessibility
.
typeaheadfind
.
soundURL
"
;
const
PREF_STRING_DEFAULT_NOTEMPTY_VALUE
=
"
beep
"
;
const
PREF_STRING_LOCALIZED_MISSING
=
"
gecko
.
handlerService
.
schemes
.
irc
.
1
.
name
"
;
const
PREF_NEW
=
"
test
.
aboutconfig
.
new
"
;
requestLongerTimeout
(
2
)
;
class
AboutConfigRowTest
{
constructor
(
element
)
{
this
.
element
=
element
;
}
querySelector
(
selector
)
{
return
this
.
element
.
querySelector
(
selector
)
;
}
get
nameCell
(
)
{
return
this
.
querySelector
(
"
td
"
)
;
}
get
name
(
)
{
return
this
.
nameCell
.
textContent
;
}
get
valueCell
(
)
{
return
this
.
querySelector
(
"
td
.
cell
-
value
"
)
;
}
get
value
(
)
{
return
this
.
valueCell
.
textContent
;
}
get
valueInput
(
)
{
return
this
.
valueCell
.
querySelector
(
"
input
"
)
;
}
get
editColumnButton
(
)
{
return
this
.
querySelector
(
"
td
.
cell
-
edit
>
button
"
)
;
}
get
resetColumnButton
(
)
{
return
this
.
querySelector
(
"
td
:
last
-
child
>
button
"
)
;
}
hasClass
(
className
)
{
return
this
.
element
.
classList
.
contains
(
className
)
;
}
}
class
AboutConfigTest
{
static
withNewTab
(
testFn
options
=
{
}
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
chrome
:
/
/
browser
/
content
/
aboutconfig
/
aboutconfig
.
html
"
}
async
browser
=
>
{
let
scope
=
new
this
(
browser
)
;
await
scope
.
setupNewTab
(
options
)
;
await
testFn
.
call
(
scope
)
;
}
)
;
}
constructor
(
browser
)
{
this
.
browser
=
browser
;
this
.
document
=
browser
.
contentDocument
;
this
.
window
=
browser
.
contentWindow
;
}
async
setupNewTab
(
options
)
{
await
this
.
document
.
l10n
.
ready
;
if
(
!
options
.
dontBypassWarning
)
{
this
.
bypassWarningButton
.
click
(
)
;
this
.
search
(
)
;
}
}
get
showWarningNextTimeInput
(
)
{
return
this
.
document
.
getElementById
(
"
showWarningNextTime
"
)
;
}
get
bypassWarningButton
(
)
{
return
this
.
document
.
querySelector
(
"
button
.
primary
"
)
;
}
get
searchInput
(
)
{
return
this
.
document
.
getElementById
(
"
search
"
)
;
}
get
prefsTable
(
)
{
return
this
.
document
.
getElementById
(
"
prefs
"
)
;
}
get
rows
(
)
{
let
elements
=
this
.
prefsTable
.
getElementsByTagName
(
"
tr
"
)
;
return
Array
.
map
(
elements
element
=
>
new
AboutConfigRowTest
(
element
)
)
;
}
getRow
(
name
)
{
return
this
.
rows
.
find
(
row
=
>
row
.
name
=
=
name
)
;
}
search
(
value
=
"
"
)
{
this
.
searchInput
.
value
=
value
;
this
.
searchInput
.
focus
(
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
}
assertWarningPage
(
expected
)
{
Assert
.
equal
(
!
!
this
.
showWarningNextTimeInput
expected
)
;
Assert
.
equal
(
!
!
this
.
bypassWarningButton
expected
)
;
Assert
.
equal
(
!
this
.
searchInput
expected
)
;
Assert
.
equal
(
!
this
.
prefsTable
expected
)
;
}
}
