"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DoHConfigController
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Preferences
:
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
}
)
;
const
kGlobalPrefBranch
=
"
doh
-
rollout
"
;
var
kRegionPrefBranch
;
const
kConfigPrefs
=
{
kEnabledPref
:
"
enabled
"
kProvidersPref
:
"
provider
-
list
"
kTRRSelectionEnabledPref
:
"
trr
-
selection
.
enabled
"
kTRRSelectionProvidersPref
:
"
trr
-
selection
.
provider
-
list
"
kTRRSelectionCommitResultPref
:
"
trr
-
selection
.
commit
-
result
"
kProviderSteeringEnabledPref
:
"
provider
-
steering
.
enabled
"
kProviderSteeringListPref
:
"
provider
-
steering
.
provider
-
list
"
}
;
const
kPrefChangedTopic
=
"
nsPref
:
changed
"
;
const
gProvidersCollection
=
lazy
.
RemoteSettings
(
"
doh
-
providers
"
)
;
const
gConfigCollection
=
lazy
.
RemoteSettings
(
"
doh
-
config
"
)
;
function
getPrefValueRegionFirst
(
prefName
)
{
let
regionalPrefName
=
{
kRegionPrefBranch
}
.
{
prefName
}
;
let
regionalPrefValue
=
lazy
.
Preferences
.
get
(
regionalPrefName
)
;
if
(
regionalPrefValue
!
=
=
undefined
)
{
return
regionalPrefValue
;
}
return
lazy
.
Preferences
.
get
(
{
kGlobalPrefBranch
}
.
{
prefName
}
)
;
}
function
getProviderListFromPref
(
prefName
)
{
let
prefVal
=
getPrefValueRegionFirst
(
prefName
)
;
if
(
prefVal
)
{
try
{
return
JSON
.
parse
(
prefVal
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
DoH
provider
list
not
a
valid
JSON
array
:
{
prefName
}
)
;
}
}
return
undefined
;
}
function
makeBaseConfigObject
(
)
{
function
makeConfigProperty
(
{
obj
propName
defaultVal
prefName
isProviderList
}
)
{
let
prefFn
=
isProviderList
?
getProviderListFromPref
:
getPrefValueRegionFirst
;
let
overridePropName
=
"
_
"
+
propName
;
Object
.
defineProperty
(
obj
propName
{
get
(
)
{
let
prefVal
=
prefFn
(
prefName
)
;
if
(
prefVal
!
=
=
undefined
)
{
return
prefVal
;
}
if
(
this
[
overridePropName
]
!
=
=
undefined
)
{
return
this
[
overridePropName
]
;
}
return
defaultVal
;
}
set
(
val
)
{
this
[
overridePropName
]
=
val
;
}
}
)
;
}
let
newConfig
=
{
get
fallbackProviderURI
(
)
{
return
this
.
providerList
[
0
]
?
.
uri
;
}
trrSelection
:
{
}
providerSteering
:
{
}
}
;
makeConfigProperty
(
{
obj
:
newConfig
propName
:
"
enabled
"
defaultVal
:
false
prefName
:
kConfigPrefs
.
kEnabledPref
isProviderList
:
false
}
)
;
makeConfigProperty
(
{
obj
:
newConfig
propName
:
"
providerList
"
defaultVal
:
[
]
prefName
:
kConfigPrefs
.
kProvidersPref
isProviderList
:
true
}
)
;
makeConfigProperty
(
{
obj
:
newConfig
.
trrSelection
propName
:
"
enabled
"
defaultVal
:
false
prefName
:
kConfigPrefs
.
kTRRSelectionEnabledPref
isProviderList
:
false
}
)
;
makeConfigProperty
(
{
obj
:
newConfig
.
trrSelection
propName
:
"
commitResult
"
defaultVal
:
false
prefName
:
kConfigPrefs
.
kTRRSelectionCommitResultPref
isProviderList
:
false
}
)
;
makeConfigProperty
(
{
obj
:
newConfig
.
trrSelection
propName
:
"
providerList
"
defaultVal
:
[
]
prefName
:
kConfigPrefs
.
kTRRSelectionProvidersPref
isProviderList
:
true
}
)
;
makeConfigProperty
(
{
obj
:
newConfig
.
providerSteering
propName
:
"
enabled
"
defaultVal
:
false
prefName
:
kConfigPrefs
.
kProviderSteeringEnabledPref
isProviderList
:
false
}
)
;
makeConfigProperty
(
{
obj
:
newConfig
.
providerSteering
propName
:
"
providerList
"
defaultVal
:
[
]
prefName
:
kConfigPrefs
.
kProviderSteeringListPref
isProviderList
:
true
}
)
;
return
newConfig
;
}
const
DoHConfigController
=
{
initComplete
:
null
_resolveInitComplete
:
null
currentConfig
:
makeBaseConfigObject
(
)
async
loadRegion
(
)
{
await
new
Promise
(
resolve
=
>
{
let
homeRegion
=
lazy
.
Preferences
.
get
(
{
kGlobalPrefBranch
}
.
home
-
region
)
;
if
(
homeRegion
)
{
kRegionPrefBranch
=
{
kGlobalPrefBranch
}
.
{
homeRegion
.
toLowerCase
(
)
}
;
resolve
(
)
;
return
;
}
let
updateRegionAndResolve
=
(
)
=
>
{
kRegionPrefBranch
=
{
kGlobalPrefBranch
}
.
{
lazy
.
Region
.
home
.
toLowerCase
(
)
}
;
lazy
.
Preferences
.
set
(
{
kGlobalPrefBranch
}
.
home
-
region
lazy
.
Region
.
home
)
;
resolve
(
)
;
}
;
if
(
lazy
.
Region
.
home
)
{
updateRegionAndResolve
(
)
;
return
;
}
Services
.
obs
.
addObserver
(
function
obs
(
sub
top
data
)
{
Services
.
obs
.
removeObserver
(
obs
lazy
.
Region
.
REGION_TOPIC
)
;
updateRegionAndResolve
(
)
;
}
lazy
.
Region
.
REGION_TOPIC
)
;
}
)
;
await
this
.
updateFromRemoteSettings
(
)
;
}
async
init
(
)
{
await
this
.
loadRegion
(
)
;
Services
.
prefs
.
addObserver
(
{
kGlobalPrefBranch
}
.
this
true
)
;
gProvidersCollection
.
on
(
"
sync
"
this
.
updateFromRemoteSettings
)
;
gConfigCollection
.
on
(
"
sync
"
this
.
updateFromRemoteSettings
)
;
this
.
_resolveInitComplete
(
)
;
}
async
_uninit
(
)
{
await
this
.
initComplete
;
Services
.
prefs
.
removeObserver
(
{
kGlobalPrefBranch
}
this
)
;
gProvidersCollection
.
off
(
"
sync
"
this
.
updateFromRemoteSettings
)
;
gConfigCollection
.
off
(
"
sync
"
this
.
updateFromRemoteSettings
)
;
this
.
initComplete
=
new
Promise
(
resolve
=
>
{
this
.
_resolveInitComplete
=
resolve
;
}
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
kPrefChangedTopic
:
let
allowedPrefs
=
Object
.
getOwnPropertyNames
(
kConfigPrefs
)
.
map
(
k
=
>
kConfigPrefs
[
k
]
)
;
if
(
!
allowedPrefs
.
some
(
pref
=
>
[
{
kRegionPrefBranch
}
.
{
pref
}
{
kGlobalPrefBranch
}
.
{
pref
}
]
.
includes
(
data
)
)
)
{
break
;
}
this
.
notifyNewConfig
(
)
;
break
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
async
updateFromRemoteSettings
(
)
{
let
providers
=
await
gProvidersCollection
.
get
(
)
;
let
config
=
await
gConfigCollection
.
get
(
)
;
let
providersById
=
new
Map
(
)
;
providers
.
forEach
(
p
=
>
providersById
.
set
(
p
.
id
p
)
)
;
let
configByRegion
=
new
Map
(
)
;
config
.
forEach
(
c
=
>
{
c
.
id
=
c
.
id
.
toLowerCase
(
)
;
configByRegion
.
set
(
c
.
id
c
)
;
}
)
;
let
homeRegion
=
lazy
.
Preferences
.
get
(
{
kGlobalPrefBranch
}
.
home
-
region
)
;
let
localConfig
=
configByRegion
.
get
(
homeRegion
?
.
toLowerCase
(
)
)
|
|
configByRegion
.
get
(
"
global
"
)
;
let
newConfig
=
makeBaseConfigObject
(
)
;
if
(
!
localConfig
)
{
DoHConfigController
.
currentConfig
=
newConfig
;
DoHConfigController
.
notifyNewConfig
(
)
;
return
;
}
if
(
localConfig
.
rolloutEnabled
)
{
newConfig
.
enabled
=
true
;
}
let
parseProviderList
=
(
list
checkFn
)
=
>
{
let
parsedList
=
[
]
;
list
?
.
split
(
"
"
)
?
.
forEach
(
p
=
>
{
p
=
p
.
trim
(
)
;
if
(
!
p
.
length
)
{
return
;
}
p
=
providersById
.
get
(
p
)
;
if
(
!
p
|
|
(
checkFn
&
&
!
checkFn
(
p
)
)
)
{
return
;
}
parsedList
.
push
(
p
)
;
}
)
;
return
parsedList
;
}
;
let
regionalProviders
=
parseProviderList
(
localConfig
.
providers
)
;
if
(
regionalProviders
?
.
length
)
{
newConfig
.
providerList
=
regionalProviders
;
}
if
(
localConfig
.
steeringEnabled
)
{
let
steeringProviders
=
parseProviderList
(
localConfig
.
steeringProviders
p
=
>
p
.
canonicalName
?
.
length
)
;
if
(
steeringProviders
?
.
length
)
{
newConfig
.
providerSteering
.
providerList
=
steeringProviders
;
newConfig
.
providerSteering
.
enabled
=
true
;
}
}
if
(
localConfig
.
autoDefaultEnabled
)
{
let
defaultProviders
=
parseProviderList
(
localConfig
.
autoDefaultProviders
)
;
if
(
defaultProviders
?
.
length
)
{
newConfig
.
trrSelection
.
providerList
=
defaultProviders
;
newConfig
.
trrSelection
.
enabled
=
true
;
}
}
DoHConfigController
.
currentConfig
=
newConfig
;
DoHConfigController
.
notifyNewConfig
(
)
;
}
kConfigUpdateTopic
:
"
doh
-
config
-
updated
"
notifyNewConfig
(
)
{
Services
.
obs
.
notifyObservers
(
null
this
.
kConfigUpdateTopic
)
;
}
}
;
DoHConfigController
.
initComplete
=
new
Promise
(
resolve
=
>
{
DoHConfigController
.
_resolveInitComplete
=
resolve
;
}
)
;
DoHConfigController
.
init
(
)
;
