"
use
strict
"
;
add_task
(
setup
)
;
add_task
(
async
function
testDoorhangerUserReject
(
)
{
setPassingHeuristics
(
)
;
let
promise
=
waitForDoorhanger
(
)
;
let
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
BREADCRUMB_PREF
)
;
Preferences
.
set
(
prefs
.
ENABLED_PREF
true
)
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
BREADCRUMB_PREF
)
true
"
Breadcrumb
saved
.
"
)
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
"
https
:
/
/
example
.
com
/
dns
-
query
"
"
TRR
selection
complete
.
"
)
;
await
checkTRRSelectionTelemetry
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
EXAMPLE_URL
)
;
let
panel
=
await
promise
;
await
ensureTRRMode
(
2
)
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
checkScalars
(
[
[
"
networking
.
doh_heuristics_attempts
"
{
value
:
1
}
]
[
"
networking
.
doh_heuristics_pass_count
"
{
value
:
1
}
]
[
"
networking
.
doh_heuristics_result
"
{
value
:
Heuristics
.
Telemetry
.
pass
}
]
falseExpectations
(
[
]
)
]
)
;
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
DOORHANGER_USER_DECISION_PREF
)
;
let
button
=
panel
.
querySelector
(
"
.
popup
-
notification
-
secondary
-
button
"
)
;
promise
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
await
promise
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
DOORHANGER_USER_DECISION_PREF
)
"
UIDisabled
"
"
Doorhanger
decision
saved
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
ensureTRRMode
(
undefined
)
;
ensureNoHeuristicsTelemetry
(
)
;
is
(
Preferences
.
get
(
prefs
.
BREADCRUMB_PREF
)
undefined
"
Breadcrumb
cleared
.
"
)
;
checkScalars
(
[
[
"
networking
.
doh_heuristics_attempts
"
{
value
:
1
}
]
[
"
networking
.
doh_heuristics_pass_count
"
{
value
:
1
}
]
[
"
networking
.
doh_heuristics_result
"
{
value
:
Heuristics
.
Telemetry
.
optOut
}
]
falseExpectations
(
[
]
)
]
)
;
simulateNetworkChange
(
)
;
await
ensureNoTRRModeChange
(
undefined
)
;
ensureNoHeuristicsTelemetry
(
)
;
await
restartDoHController
(
)
;
ensureNoTRRSelectionTelemetry
(
)
;
await
ensureNoTRRModeChange
(
undefined
)
;
ensureNoHeuristicsTelemetry
(
)
;
setFailingHeuristics
(
)
;
simulateNetworkChange
(
)
;
await
ensureNoTRRModeChange
(
undefined
)
;
ensureNoHeuristicsTelemetry
(
)
;
}
)
;
