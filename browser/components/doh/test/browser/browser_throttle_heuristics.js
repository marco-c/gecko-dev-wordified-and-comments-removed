"
use
strict
"
;
add_task
(
setup
)
;
add_task
(
async
function
testHeuristicsThrottling
(
)
{
let
throttleTimeout
=
0
;
let
rateLimit
=
1
;
let
throttleDoneTopic
=
"
doh
:
heuristics
-
throttle
-
done
"
;
let
throttleExtendTopic
=
"
doh
:
heuristics
-
throttle
-
extend
"
;
Preferences
.
set
(
prefs
.
HEURISTICS_THROTTLE_TIMEOUT_PREF
throttleTimeout
)
;
Preferences
.
set
(
prefs
.
HEURISTICS_THROTTLE_RATE_LIMIT_PREF
rateLimit
)
;
let
throttledPromise
=
TestUtils
.
topicObserved
(
throttleDoneTopic
)
;
setPassingHeuristics
(
)
;
let
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
BREADCRUMB_PREF
)
;
Preferences
.
set
(
prefs
.
ENABLED_PREF
true
)
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
BREADCRUMB_PREF
)
true
"
Breadcrumb
saved
.
"
)
;
await
ensureTRRMode
(
2
)
;
info
(
"
waiting
for
throttle
done
"
)
;
await
throttledPromise
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
throttledPromise
=
TestUtils
.
topicObserved
(
throttleDoneTopic
)
;
simulateNetworkChange
(
)
;
info
(
"
waiting
for
throttle
done
"
)
;
await
throttledPromise
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
netchange
"
)
;
throttledPromise
=
TestUtils
.
topicObserved
(
throttleDoneTopic
)
.
then
(
(
)
=
>
TestUtils
.
topicObserved
(
throttleDoneTopic
)
)
;
simulateNetworkChange
(
)
;
simulateNetworkChange
(
)
;
info
(
"
waiting
for
throttle
done
"
)
;
await
throttledPromise
;
await
checkHeuristicsTelemetryMultiple
(
[
"
netchange
"
"
throttled
"
]
)
;
let
throttleExtendPromise
=
TestUtils
.
topicObserved
(
throttleExtendTopic
)
;
let
throttleExtendPromise2
=
throttleExtendPromise
.
then
(
(
)
=
>
TestUtils
.
topicObserved
(
throttleExtendTopic
)
)
;
throttledPromise
=
throttleExtendPromise2
.
then
(
(
)
=
>
TestUtils
.
topicObserved
(
throttleDoneTopic
)
)
.
then
(
(
)
=
>
TestUtils
.
topicObserved
(
throttleDoneTopic
)
)
;
simulateNetworkChange
(
)
;
simulateNetworkChange
(
)
;
simulateNetworkChange
(
)
;
info
(
"
waiting
for
throttle
extend
"
)
;
await
throttleExtendPromise
;
simulateNetworkChange
(
)
;
simulateNetworkChange
(
)
;
info
(
"
waiting
for
throttle
done
"
)
;
await
throttleExtendPromise2
;
info
(
"
waiting
for
throttle
done
"
)
;
await
throttledPromise
;
await
checkHeuristicsTelemetryMultiple
(
[
"
netchange
"
"
throttled
"
]
)
;
}
)
;
