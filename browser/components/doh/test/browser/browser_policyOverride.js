"
use
strict
"
;
add_task
(
setup
)
;
const
{
EnterprisePolicyTesting
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
EnterprisePolicyTesting
.
sys
.
mjs
"
)
;
add_task
(
async
function
testPolicyOverride
(
)
{
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
EnableTrackingProtection
:
{
Value
:
true
}
}
}
)
;
is
(
Services
.
policies
.
status
Ci
.
nsIEnterprisePolicies
.
ACTIVE
"
Policy
engine
is
active
.
"
)
;
Preferences
.
set
(
prefs
.
ENABLED_PREF
true
)
;
await
waitForStateTelemetry
(
[
"
shutdown
"
"
policyDisabled
"
]
)
;
is
(
Preferences
.
get
(
prefs
.
BREADCRUMB_PREF
)
undefined
"
Breadcrumb
not
saved
.
"
)
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
undefined
"
TRR
selection
not
performed
.
"
)
;
is
(
Preferences
.
get
(
prefs
.
SKIP_HEURISTICS_PREF
)
true
"
Pref
set
to
suppress
CFR
.
"
)
;
ensureNoTRRSelectionTelemetry
(
)
;
await
ensureNoTRRModeChange
(
undefined
)
;
ensureNoHeuristicsTelemetry
(
)
;
simulateNetworkChange
(
)
;
await
ensureNoTRRModeChange
(
undefined
)
;
ensureNoHeuristicsTelemetry
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
}
}
)
;
EnterprisePolicyTesting
.
resetRunOnceState
(
)
;
is
(
Services
.
policies
.
status
Ci
.
nsIEnterprisePolicies
.
INACTIVE
"
Policy
engine
is
inactive
at
the
end
of
the
test
"
)
;
}
)
;
