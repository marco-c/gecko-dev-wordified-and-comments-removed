"
use
strict
"
;
add_task
(
setup
)
;
add_task
(
async
function
testTRRSelect
(
)
{
setPassingHeuristics
(
)
;
let
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
BREADCRUMB_PREF
)
;
Preferences
.
set
(
prefs
.
ENABLED_PREF
true
)
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
BREADCRUMB_PREF
)
true
"
Breadcrumb
saved
.
"
)
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
"
https
:
/
/
example
.
com
/
dns
-
query
"
"
TRR
selection
complete
.
"
)
;
await
ensureTRRMode
(
2
)
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
Preferences
.
reset
(
prefs
.
TRR_SELECT_DRY_RUN_RESULT_PREF
)
;
Preferences
.
reset
(
prefs
.
TRR_SELECT_URI_PREF
)
;
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
TRR_SELECT_URI_PREF
)
;
await
restartDoHController
(
)
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
"
https
:
/
/
example
.
com
/
dns
-
query
"
"
TRR
selection
complete
.
"
)
;
await
ensureTRRMode
(
2
)
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
Preferences
.
set
(
prefs
.
TRR_SELECT_COMMIT_PREF
false
)
;
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
TRR_SELECT_URI_PREF
)
;
await
restartDoHController
(
)
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
"
https
:
/
/
example
.
com
/
1
"
"
Default
TRR
selected
.
"
)
;
try
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
Preferences
.
isSet
(
prefs
.
TRR_SELECT_DRY_RUN_RESULT_PREF
)
;
}
)
;
ok
(
false
"
Dry
run
result
was
cleared
fail
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
Dry
run
result
was
not
cleared
.
"
)
;
}
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_DRY_RUN_RESULT_PREF
)
"
https
:
/
/
example
.
com
/
dns
-
query
"
"
dry
-
run
result
has
the
correct
value
.
"
)
;
await
ensureTRRMode
(
2
)
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
Preferences
.
reset
(
prefs
.
TRR_SELECT_DRY_RUN_RESULT_PREF
)
;
Preferences
.
reset
(
prefs
.
TRR_SELECT_URI_PREF
)
;
await
restartDoHController
(
)
;
try
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
=
=
"
https
:
/
/
example
.
com
/
dns
-
query
"
)
;
}
)
;
ok
(
false
"
Dry
run
result
got
committed
fail
!
"
)
;
}
catch
(
e
)
{
ok
(
true
"
Dry
run
result
did
not
get
committed
"
)
;
}
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
"
https
:
/
/
example
.
com
/
1
"
"
Default
TRR
selected
.
"
)
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_DRY_RUN_RESULT_PREF
)
"
https
:
/
/
example
.
com
/
dns
-
query
"
"
TRR
selection
complete
dry
-
run
result
recorded
.
"
)
;
Preferences
.
set
(
prefs
.
TRR_SELECT_COMMIT_PREF
true
)
;
await
ensureTRRMode
(
2
)
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
Preferences
.
reset
(
prefs
.
TRR_SELECT_URI_PREF
)
;
Preferences
.
set
(
prefs
.
TRR_SELECT_DRY_RUN_RESULT_PREF
"
https
:
/
/
example
.
com
/
2
"
)
;
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
TRR_SELECT_URI_PREF
newVal
=
>
newVal
=
=
"
https
:
/
/
example
.
com
/
2
"
)
;
await
restartDoHController
(
)
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
"
https
:
/
/
example
.
com
/
2
"
"
TRR
selection
complete
existing
dry
-
run
-
result
committed
.
"
)
;
await
ensureTRRMode
(
2
)
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
Preferences
.
reset
(
prefs
.
TRR_SELECT_URI_PREF
)
;
Preferences
.
set
(
prefs
.
TRR_SELECT_DRY_RUN_RESULT_PREF
"
https
:
/
/
example
.
com
/
4
"
)
;
prefPromise
=
TestUtils
.
waitForPrefChange
(
prefs
.
TRR_SELECT_URI_PREF
)
;
await
restartDoHController
(
)
;
await
prefPromise
;
is
(
Preferences
.
get
(
prefs
.
TRR_SELECT_URI_PREF
)
"
https
:
/
/
example
.
com
/
dns
-
query
"
"
TRR
selection
complete
existing
dry
-
run
-
result
discarded
and
refreshed
.
"
)
;
await
ensureTRRMode
(
2
)
;
await
checkHeuristicsTelemetry
(
"
enable_doh
"
"
startup
"
)
;
}
)
;
