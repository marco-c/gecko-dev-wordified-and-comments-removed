"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DoHTestUtils
"
]
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
RemoteSettings
"
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
TestUtils
"
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
const
kConfigCollectionKey
=
"
doh
-
config
"
;
const
kProviderCollectionKey
=
"
doh
-
providers
"
;
const
kConfigUpdateTopic
=
"
doh
-
config
-
updated
"
;
const
kControllerReloadedTopic
=
"
doh
:
controller
-
reloaded
"
;
const
DoHTestUtils
=
{
providers
:
[
{
uri
:
"
https
:
/
/
example
.
com
/
1
"
UIName
:
"
Example
1
"
autoDefault
:
false
canonicalName
:
"
"
id
:
"
example
-
1
"
}
{
uri
:
"
https
:
/
/
example
.
com
/
2
"
UIName
:
"
Example
2
"
autoDefault
:
false
canonicalName
:
"
"
id
:
"
example
-
2
"
}
]
async
loadRemoteSettingsProviders
(
providers
waitForConfigFlushes
=
true
)
{
let
configFlushedPromise
=
this
.
waitForConfigFlush
(
waitForConfigFlushes
)
;
let
providerRS
=
lazy
.
RemoteSettings
(
kProviderCollectionKey
)
;
let
db
=
await
providerRS
.
db
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
providers
{
clear
:
true
}
)
;
await
this
.
triggerSync
(
providerRS
)
;
await
configFlushedPromise
;
}
async
loadRemoteSettingsConfig
(
config
waitForConfigFlushes
=
true
)
{
let
configFlushedPromise
=
this
.
waitForConfigFlush
(
waitForConfigFlushes
)
;
let
configRS
=
lazy
.
RemoteSettings
(
kConfigCollectionKey
)
;
let
db
=
await
configRS
.
db
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
[
config
]
)
;
await
this
.
triggerSync
(
configRS
)
;
await
configFlushedPromise
;
}
async
loadDefaultRemoteSettingsConfig
(
waitForConfigFlushes
=
true
)
{
await
this
.
loadRemoteSettingsProviders
(
this
.
providers
waitForConfigFlushes
)
;
await
this
.
loadRemoteSettingsConfig
(
{
providers
:
"
example
-
1
example
-
2
"
rolloutEnabled
:
false
steeringEnabled
:
false
steeringProviders
:
"
"
autoDefaultEnabled
:
false
autoDefaultProviders
:
"
"
id
:
"
global
"
}
waitForConfigFlushes
)
;
}
async
resetRemoteSettingsConfig
(
waitForConfigFlushes
=
true
)
{
let
providerRS
=
lazy
.
RemoteSettings
(
kProviderCollectionKey
)
;
let
configRS
=
lazy
.
RemoteSettings
(
kConfigCollectionKey
)
;
for
(
let
rs
of
[
providerRS
configRS
]
)
{
let
configFlushedPromise
=
this
.
waitForConfigFlush
(
waitForConfigFlushes
)
;
await
rs
.
db
.
importChanges
(
{
}
Date
.
now
(
)
[
]
{
clear
:
true
}
)
;
await
this
.
triggerSync
(
rs
)
;
await
configFlushedPromise
;
}
await
this
.
loadDefaultRemoteSettingsConfig
(
waitForConfigFlushes
)
;
}
triggerSync
(
rs
)
{
return
rs
.
emit
(
"
sync
"
{
data
:
{
current
:
[
]
}
}
)
;
}
waitForConfigUpdate
(
)
{
return
lazy
.
TestUtils
.
topicObserved
(
kConfigUpdateTopic
)
;
}
waitForControllerReload
(
)
{
return
lazy
.
TestUtils
.
topicObserved
(
kControllerReloadedTopic
)
;
}
waitForConfigFlush
(
shouldWait
=
true
)
{
if
(
!
shouldWait
)
{
return
Promise
.
resolve
(
)
;
}
return
Promise
.
all
(
[
this
.
waitForConfigUpdate
(
)
this
.
waitForControllerReload
(
)
]
)
;
}
}
;
