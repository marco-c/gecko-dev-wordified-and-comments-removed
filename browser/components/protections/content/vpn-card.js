export
default
class
VPNCard
{
constructor
(
document
)
{
this
.
doc
=
document
;
}
init
(
)
{
const
vpnLink
=
this
.
doc
.
getElementById
(
"
get
-
vpn
-
link
"
)
;
const
vpnBannerLink
=
this
.
doc
.
getElementById
(
"
vpn
-
banner
-
link
"
)
;
vpnLink
.
href
=
RPMGetStringPref
(
"
browser
.
contentblocking
.
report
.
vpn
.
url
"
"
"
)
;
vpnBannerLink
.
href
=
RPMGetStringPref
(
"
browser
.
contentblocking
.
report
.
vpn
-
promo
.
url
"
"
"
)
;
vpnLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
vpn_card_link
"
)
;
}
)
;
let
androidVPNAppLink
=
document
.
getElementById
(
"
vpn
-
google
-
playstore
-
link
"
)
;
androidVPNAppLink
.
href
=
RPMGetStringPref
(
"
browser
.
contentblocking
.
report
.
vpn
-
android
.
url
"
)
;
androidVPNAppLink
.
addEventListener
(
"
click
"
(
)
=
>
{
document
.
sendTelemetryEvent
(
"
click
"
"
vpn_app_link_android
"
)
;
}
)
;
let
iosVPNAppLink
=
document
.
getElementById
(
"
vpn
-
app
-
store
-
link
"
)
;
iosVPNAppLink
.
href
=
RPMGetStringPref
(
"
browser
.
contentblocking
.
report
.
vpn
-
ios
.
url
"
)
;
iosVPNAppLink
.
addEventListener
(
"
click
"
(
)
=
>
{
document
.
sendTelemetryEvent
(
"
click
"
"
vpn_app_link_ios
"
)
;
}
)
;
const
vpnBanner
=
this
.
doc
.
querySelector
(
"
.
vpn
-
banner
"
)
;
const
exitIcon
=
vpnBanner
.
querySelector
(
"
.
exit
-
icon
"
)
;
vpnBannerLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
vpn_banner_link
"
)
;
}
)
;
exitIcon
.
addEventListener
(
"
click
"
(
)
=
>
{
vpnBanner
.
classList
.
add
(
"
hidden
"
)
;
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
vpn_banner_close
"
)
;
}
)
;
this
.
showVPNCard
(
)
;
}
async
showVPNCard
(
)
{
const
showVPNBanner
=
this
.
showVPNBanner
.
bind
(
this
)
;
RPMSendQuery
(
"
FetchShowVPNCard
"
{
}
)
.
then
(
shouldShow
=
>
{
if
(
!
shouldShow
)
{
return
;
}
const
vpnCard
=
this
.
doc
.
querySelector
(
"
.
vpn
-
card
"
)
;
RPMSendQuery
(
"
FetchVPNSubStatus
"
{
}
)
.
then
(
async
hasVPN
=
>
{
if
(
hasVPN
)
{
vpnCard
.
classList
.
add
(
"
subscribed
"
)
;
vpnCard
.
querySelector
(
"
.
card
-
title
"
)
.
setAttribute
(
"
data
-
l10n
-
id
"
"
vpn
-
title
-
subscribed
"
)
;
await
RPMSetBoolPref
(
"
browser
.
contentblocking
.
report
.
hide_vpn_banner
"
true
)
;
}
vpnCard
.
classList
.
remove
(
"
hidden
"
)
;
showVPNBanner
(
)
;
}
)
;
}
)
;
}
showVPNBanner
(
)
{
if
(
RPMGetBoolPref
(
"
browser
.
contentblocking
.
report
.
hide_vpn_banner
"
false
)
|
|
!
RPMGetBoolPref
(
"
browser
.
vpn_promo
.
enabled
"
false
)
)
{
return
;
}
const
vpnBanner
=
this
.
doc
.
querySelector
(
"
.
vpn
-
banner
"
)
;
vpnBanner
.
classList
.
remove
(
"
hidden
"
)
;
this
.
doc
.
sendTelemetryEvent
(
"
show
"
"
vpn_banner
"
)
;
RPMSetBoolPref
(
"
browser
.
contentblocking
.
report
.
hide_vpn_banner
"
true
)
;
}
}
