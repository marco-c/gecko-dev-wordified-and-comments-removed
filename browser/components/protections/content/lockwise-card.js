export
default
class
LockwiseCard
{
constructor
(
document
)
{
this
.
doc
=
document
;
}
init
(
)
{
const
openAboutLoginsButton
=
this
.
doc
.
getElementById
(
"
open
-
about
-
logins
-
button
"
)
;
openAboutLoginsButton
.
addEventListener
(
"
click
"
(
)
=
>
{
RPMSendAsyncMessage
(
"
OpenAboutLogins
"
)
;
}
)
;
const
syncLink
=
this
.
doc
.
querySelector
(
"
.
synced
-
devices
-
text
a
"
)
;
syncLink
.
addEventListener
(
"
click
"
(
)
=
>
{
RPMSendAsyncMessage
(
"
OpenSyncPreferences
"
)
;
}
)
;
RPMAddMessageListener
(
"
SendUserLoginsData
"
(
{
data
}
)
=
>
{
this
.
buildContent
(
data
)
;
const
lockwiseCard
=
this
.
doc
.
querySelector
(
"
.
report
-
card
.
lockwise
-
card
.
hidden
"
)
;
lockwiseCard
.
classList
.
remove
(
"
hidden
"
)
;
}
)
;
RPMSendAsyncMessage
(
"
FetchUserLoginsData
"
)
;
}
buildContent
(
data
)
{
const
{
isLoggedIn
numberOfLogins
numberOfSyncedDevices
}
=
data
;
const
title
=
this
.
doc
.
getElementById
(
"
lockwise
-
title
"
)
;
const
headerContent
=
this
.
doc
.
getElementById
(
"
lockwise
-
header
-
content
"
)
;
const
lockwiseBodyContent
=
this
.
doc
.
getElementById
(
"
lockwise
-
body
-
content
"
)
;
const
container
=
isLoggedIn
?
lockwiseBodyContent
.
querySelector
(
"
.
has
-
logins
"
)
:
lockwiseBodyContent
.
querySelector
(
"
.
no
-
logins
"
)
;
container
.
classList
.
remove
(
"
hidden
"
)
;
if
(
isLoggedIn
)
{
title
.
textContent
=
"
Firefox
Lockwise
"
;
headerContent
.
textContent
=
"
Securely
store
and
sync
your
passwords
to
all
your
devices
.
"
;
this
.
renderContentForLoggedInUser
(
container
numberOfLogins
numberOfSyncedDevices
)
;
}
else
{
title
.
textContent
=
"
Never
forget
a
password
again
"
;
headerContent
.
textContent
=
"
Firefox
Lockwise
securely
stores
your
passwords
in
your
browser
.
"
;
}
}
renderContentForLoggedInUser
(
container
storedLogins
syncedDevices
)
{
const
numberOfLoginsBlock
=
container
.
querySelector
(
"
.
number
-
of
-
logins
.
block
"
)
;
numberOfLoginsBlock
.
textContent
=
storedLogins
;
const
syncedDevicesBlock
=
container
.
querySelector
(
"
.
number
-
of
-
synced
-
devices
.
block
"
)
;
syncedDevicesBlock
.
textContent
=
syncedDevices
;
const
syncedDevicesText
=
container
.
querySelector
(
"
.
synced
-
devices
-
text
"
)
;
const
textEl
=
syncedDevicesText
.
querySelector
(
"
span
"
)
;
textEl
.
textContent
=
syncedDevices
>
0
?
Syncing
to
{
syncedDevices
}
other
devices
.
:
"
Not
syncing
to
other
devices
.
"
;
if
(
syncedDevices
=
=
=
0
)
{
const
syncLink
=
syncedDevicesText
.
querySelector
(
"
a
"
)
;
syncLink
.
classList
.
remove
(
"
hidden
"
)
;
}
}
}
