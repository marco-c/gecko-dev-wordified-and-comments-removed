const
MONITOR_URL
=
RPMGetStringPref
(
"
browser
.
contentblocking
.
report
.
monitor
.
url
"
"
"
)
;
const
MONITOR_SIGN_IN_URL
=
RPMGetStringPref
(
"
browser
.
contentblocking
.
report
.
monitor
.
sign_in_url
"
"
"
)
;
const
HOW_IT_WORKS_URL_PREF
=
RPMGetFormatURLPref
(
"
browser
.
contentblocking
.
report
.
monitor
.
how_it_works
.
url
"
)
;
export
default
class
MonitorClass
{
constructor
(
document
)
{
this
.
doc
=
document
;
}
init
(
)
{
this
.
getMonitorData
(
)
;
let
monitorReportLink
=
this
.
doc
.
getElementById
(
"
full
-
report
-
link
"
)
;
monitorReportLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
mtr_report_link
"
)
;
RPMSendAsyncMessage
(
"
ClearMonitorCache
"
)
;
}
)
;
let
monitorAboutLink
=
this
.
doc
.
getElementById
(
"
monitor
-
link
"
)
;
monitorAboutLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
mtr_about_link
"
)
;
}
)
;
}
getMonitorData
(
)
{
RPMSendQuery
(
"
FetchMonitorData
"
{
}
)
.
then
(
monitorData
=
>
{
this
.
buildContent
(
monitorData
)
;
const
monitorUI
=
this
.
doc
.
querySelector
(
"
.
card
.
monitor
-
card
.
loading
"
)
;
monitorUI
.
classList
.
remove
(
"
loading
"
)
;
}
)
;
}
buildContent
(
monitorData
)
{
const
headerContent
=
this
.
doc
.
querySelector
(
"
#
monitor
-
header
-
content
span
"
)
;
const
monitorCard
=
this
.
doc
.
querySelector
(
"
.
card
.
monitor
-
card
"
)
;
if
(
!
monitorData
.
error
)
{
monitorCard
.
classList
.
add
(
"
has
-
logins
"
)
;
headerContent
.
setAttribute
(
"
data
-
l10n
-
id
"
"
monitor
-
header
-
content
-
signed
-
in
"
)
;
this
.
renderContentForUserWithAccount
(
monitorData
)
;
}
else
{
monitorCard
.
classList
.
add
(
"
no
-
logins
"
)
;
const
signUpForMonitorLink
=
this
.
doc
.
getElementById
(
"
sign
-
up
-
for
-
monitor
-
link
"
)
;
signUpForMonitorLink
.
href
=
this
.
buildMonitorUrl
(
monitorData
.
userEmail
)
;
signUpForMonitorLink
.
setAttribute
(
"
data
-
l10n
-
id
"
"
monitor
-
sign
-
up
"
)
;
headerContent
.
setAttribute
(
"
data
-
l10n
-
id
"
"
monitor
-
header
-
content
-
no
-
account
"
)
;
signUpForMonitorLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
mtr_signup_button
"
)
;
}
)
;
}
}
buildMonitorUrl
(
email
=
null
)
{
return
email
?
{
MONITOR_SIGN_IN_URL
}
{
encodeURIComponent
(
email
)
}
:
MONITOR_URL
;
}
renderContentForUserWithAccount
(
monitorData
)
{
const
monitorCardBody
=
this
.
doc
.
querySelector
(
"
.
card
.
monitor
-
card
.
card
-
body
"
)
;
monitorCardBody
.
classList
.
remove
(
"
hidden
"
)
;
const
monitorLinkTag
=
this
.
doc
.
getElementById
(
"
monitor
-
inline
-
link
"
)
;
monitorLinkTag
.
href
=
this
.
buildMonitorUrl
(
monitorData
.
userEmail
)
;
const
howItWorksLink
=
this
.
doc
.
getElementById
(
"
monitor
-
link
"
)
;
howItWorksLink
.
href
=
HOW_IT_WORKS_URL_PREF
;
const
storedEmail
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
stored
-
emails
'
]
"
)
;
const
knownBreaches
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
known
-
breaches
'
]
"
)
;
const
exposedPasswords
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
exposed
-
passwords
'
]
"
)
;
storedEmail
.
textContent
=
monitorData
.
monitoredEmails
;
knownBreaches
.
textContent
=
monitorData
.
numBreaches
;
exposedPasswords
.
textContent
=
monitorData
.
passwords
;
const
infoMonitoredAddresses
=
this
.
doc
.
getElementById
(
"
info
-
monitored
-
addresses
"
)
;
infoMonitoredAddresses
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
count
:
monitorData
.
monitoredEmails
}
)
)
;
infoMonitoredAddresses
.
setAttribute
(
"
data
-
l10n
-
id
"
"
info
-
monitored
-
emails
"
)
;
const
infoKnownBreaches
=
this
.
doc
.
getElementById
(
"
info
-
known
-
breaches
"
)
;
infoKnownBreaches
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
count
:
monitorData
.
numBreaches
}
)
)
;
infoKnownBreaches
.
setAttribute
(
"
data
-
l10n
-
id
"
"
info
-
known
-
breaches
-
found
"
)
;
const
infoExposedPasswords
=
this
.
doc
.
getElementById
(
"
info
-
exposed
-
passwords
"
)
;
infoExposedPasswords
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
count
:
monitorData
.
passwords
}
)
)
;
infoExposedPasswords
.
setAttribute
(
"
data
-
l10n
-
id
"
"
info
-
exposed
-
passwords
-
found
"
)
;
}
}
