export
default
class
MonitorClass
{
constructor
(
document
)
{
this
.
doc
=
document
;
}
init
(
)
{
const
signUpForMonitorButton
=
this
.
doc
.
getElementById
(
"
sign
-
up
-
for
-
monitor
-
button
"
)
;
signUpForMonitorButton
.
addEventListener
(
"
click
"
(
)
=
>
{
console
.
log
(
"
TODO
:
Where
is
this
link
supposed
to
go
.
"
)
;
}
)
;
RPMAddMessageListener
(
"
SendUserLoginsData
"
(
{
data
}
)
=
>
{
this
.
getMonitorData
(
data
)
;
RPMSendAsyncMessage
(
"
FetchMonitorData
"
)
;
}
)
;
}
getMonitorData
(
loginData
)
{
RPMAddMessageListener
(
"
SendMonitorData
"
(
{
data
:
monitorData
}
)
=
>
{
this
.
buildContent
(
loginData
monitorData
)
;
const
monitorCard
=
this
.
doc
.
querySelector
(
"
.
report
-
card
.
monitor
-
card
.
hidden
"
)
;
monitorCard
.
classList
.
remove
(
"
hidden
"
)
;
}
)
;
}
buildContent
(
loginData
monitorData
)
{
const
{
hasFxa
numLogins
}
=
loginData
;
const
isLoggedIn
=
numLogins
>
0
|
|
hasFxa
;
const
headerContent
=
this
.
doc
.
querySelector
(
"
#
monitor
-
header
-
content
span
"
)
;
const
monitorCard
=
this
.
doc
.
querySelector
(
"
.
report
-
card
.
monitor
-
card
"
)
;
if
(
isLoggedIn
&
&
!
monitorData
.
error
)
{
monitorCard
.
classList
.
add
(
"
has
-
logins
"
)
;
headerContent
.
textContent
=
"
Firefox
Monitor
warns
you
if
your
info
has
appeared
in
a
known
data
breach
"
;
this
.
renderContentForUserWithLogins
(
monitorData
)
;
}
else
{
monitorCard
.
classList
.
add
(
"
no
-
logins
"
)
;
const
signUpForMonitorButton
=
this
.
doc
.
getElementById
(
"
sign
-
up
-
for
-
monitor
-
button
"
)
;
signUpForMonitorButton
.
textContent
=
hasFxa
?
"
Turn
on
Monitor
"
:
"
Sign
up
for
Monitor
"
;
headerContent
.
textContent
=
"
Check
Firefox
Monitor
to
see
if
you
'
ve
been
part
of
a
data
breach
and
get
alerts
about
new
breaches
.
"
;
}
}
renderContentForUserWithLogins
(
monitorData
)
{
const
storedEmail
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
stored
-
emails
'
]
"
)
;
const
knownBreaches
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
known
-
breaches
'
]
"
)
;
const
exposedPasswords
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
exposed
-
passwords
'
]
"
)
;
const
exposedLockwisePasswords
=
this
.
doc
.
querySelector
(
"
.
number
-
of
-
breaches
.
block
"
)
;
storedEmail
.
textContent
=
monitorData
.
monitoredEmails
;
knownBreaches
.
textContent
=
monitorData
.
numBreaches
;
exposedPasswords
.
textContent
=
monitorData
.
passwords
;
exposedLockwisePasswords
.
textContent
=
2
;
}
}
