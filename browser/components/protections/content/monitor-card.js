const
MONITOR_SIGN_IN_URL
=
RPMGetStringPref
(
"
browser
.
contentblocking
.
report
.
monitor
.
url
"
"
"
)
;
export
default
class
MonitorClass
{
constructor
(
document
)
{
this
.
doc
=
document
;
}
init
(
)
{
RPMAddMessageListener
(
"
SendUserLoginsData
"
(
{
data
}
)
=
>
{
this
.
getMonitorData
(
data
)
;
RPMSendAsyncMessage
(
"
FetchMonitorData
"
)
;
}
)
;
let
monitorReportLink
=
this
.
doc
.
getElementById
(
"
full
-
report
-
link
"
)
;
monitorReportLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
mtr_report_link
"
)
;
}
)
;
let
monitorAboutLink
=
this
.
doc
.
getElementById
(
"
monitor
-
link
"
)
;
monitorAboutLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
mtr_about_link
"
)
;
}
)
;
let
openLockwise
=
this
.
doc
.
getElementById
(
"
lockwise
-
link
"
)
;
openLockwise
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
lw_open_breach_link
"
)
;
}
)
;
}
getMonitorData
(
loginData
)
{
RPMAddMessageListener
(
"
SendMonitorData
"
(
{
data
:
monitorData
}
)
=
>
{
this
.
buildContent
(
loginData
monitorData
)
;
const
monitorUI
=
this
.
doc
.
querySelector
(
"
.
card
.
monitor
-
card
.
loading
"
)
;
monitorUI
.
classList
.
remove
(
"
loading
"
)
;
}
)
;
}
buildContent
(
loginData
monitorData
)
{
const
{
numLogins
}
=
loginData
;
const
headerContent
=
this
.
doc
.
querySelector
(
"
#
monitor
-
header
-
content
span
"
)
;
const
monitorCard
=
this
.
doc
.
querySelector
(
"
.
card
.
monitor
-
card
"
)
;
if
(
numLogins
>
0
&
&
!
monitorData
.
error
)
{
monitorCard
.
classList
.
add
(
"
has
-
logins
"
)
;
headerContent
.
setAttribute
(
"
data
-
l10n
-
id
"
"
monitor
-
header
-
content
-
logged
-
in
"
)
;
this
.
renderContentForUserWithLogins
(
monitorData
)
;
}
else
{
monitorCard
.
classList
.
add
(
"
no
-
logins
"
)
;
const
signUpForMonitorLink
=
this
.
doc
.
getElementById
(
"
sign
-
up
-
for
-
monitor
-
link
"
)
;
signUpForMonitorLink
.
href
=
this
.
buildMonitorUrl
(
monitorData
.
userEmail
)
;
signUpForMonitorLink
.
setAttribute
(
"
data
-
l10n
-
id
"
"
monitor
-
sign
-
up
"
)
;
headerContent
.
setAttribute
(
"
data
-
l10n
-
id
"
"
monitor
-
header
-
content
"
)
;
signUpForMonitorLink
.
addEventListener
(
"
click
"
(
)
=
>
{
this
.
doc
.
sendTelemetryEvent
(
"
click
"
"
mtr_signup_button
"
)
;
}
)
;
}
}
buildMonitorUrl
(
email
=
null
)
{
let
url
=
MONITOR_SIGN_IN_URL
;
if
(
email
)
{
url
+
=
/
oauth
/
init
?
email
=
{
email
}
&
entrypoint
=
protection_report_monitor
&
utm_source
=
about
-
protections
;
}
else
{
url
+
=
"
/
?
entrypoint
=
protection_report_monitor
&
utm_source
=
about
-
protections
"
;
}
return
url
;
}
renderContentForUserWithLogins
(
monitorData
)
{
const
monitorCardBody
=
this
.
doc
.
querySelector
(
"
.
card
.
monitor
-
card
.
card
-
body
"
)
;
monitorCardBody
.
classList
.
remove
(
"
hidden
"
)
;
const
storedEmail
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
stored
-
emails
'
]
"
)
;
const
knownBreaches
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
known
-
breaches
'
]
"
)
;
const
exposedPasswords
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
exposed
-
passwords
'
]
"
)
;
storedEmail
.
textContent
=
monitorData
.
monitoredEmails
;
knownBreaches
.
textContent
=
monitorData
.
numBreaches
;
exposedPasswords
.
textContent
=
monitorData
.
passwords
;
const
infoMonitoredAddresses
=
this
.
doc
.
getElementById
(
"
info
-
monitored
-
addresses
"
)
;
infoMonitoredAddresses
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
count
:
monitorData
.
monitoredEmails
}
)
)
;
infoMonitoredAddresses
.
setAttribute
(
"
data
-
l10n
-
id
"
"
info
-
monitored
-
addresses
"
)
;
const
infoKnownBreaches
=
this
.
doc
.
getElementById
(
"
info
-
known
-
breaches
"
)
;
infoKnownBreaches
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
count
:
monitorData
.
numBreaches
}
)
)
;
infoKnownBreaches
.
setAttribute
(
"
data
-
l10n
-
id
"
"
info
-
known
-
breaches
"
)
;
const
infoExposedPasswords
=
this
.
doc
.
getElementById
(
"
info
-
exposed
-
passwords
"
)
;
infoExposedPasswords
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
count
:
monitorData
.
passwords
}
)
)
;
infoExposedPasswords
.
setAttribute
(
"
data
-
l10n
-
id
"
"
info
-
exposed
-
passwords
"
)
;
if
(
monitorData
.
potentiallyBreachedLogins
>
0
)
{
const
lockwiseSection
=
this
.
doc
.
querySelector
(
"
.
monitor
-
breached
-
passwords
"
)
;
const
exposedLockwisePasswords
=
this
.
doc
.
querySelector
(
"
span
[
data
-
type
=
'
breached
-
lockwise
-
passwords
'
]
"
)
;
exposedLockwisePasswords
.
textContent
=
monitorData
.
potentiallyBreachedLogins
;
let
breachedPasswordWarning
=
this
.
doc
.
getElementById
(
"
password
-
warning
"
)
;
breachedPasswordWarning
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
count
:
monitorData
.
potentiallyBreachedLogins
}
)
)
;
breachedPasswordWarning
.
setAttribute
(
"
data
-
l10n
-
id
"
"
password
-
warning
"
)
;
lockwiseSection
.
classList
.
remove
(
"
hidden
"
)
;
}
}
}
