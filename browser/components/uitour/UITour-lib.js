if
(
typeof
Mozilla
=
=
"
undefined
"
)
{
var
Mozilla
=
{
}
;
}
(
function
(
)
{
"
use
strict
"
;
if
(
typeof
Mozilla
.
UITour
=
=
"
undefined
"
)
{
Mozilla
.
UITour
=
{
}
;
}
function
_sendEvent
(
action
data
)
{
var
event
=
new
CustomEvent
(
"
mozUITour
"
{
bubbles
:
true
detail
:
{
action
data
:
data
|
|
{
}
}
}
)
;
document
.
dispatchEvent
(
event
)
;
}
function
_generateCallbackID
(
)
{
return
Math
.
random
(
)
.
toString
(
36
)
.
replace
(
/
[
^
a
-
z
]
+
/
g
"
"
)
;
}
function
_waitForCallback
(
callback
)
{
var
id
=
_generateCallbackID
(
)
;
function
listener
(
event
)
{
if
(
typeof
event
.
detail
!
=
"
object
"
)
{
return
;
}
if
(
event
.
detail
.
callbackID
!
=
id
)
{
return
;
}
document
.
removeEventListener
(
"
mozUITourResponse
"
listener
)
;
callback
(
event
.
detail
.
data
)
;
}
document
.
addEventListener
(
"
mozUITourResponse
"
listener
)
;
return
id
;
}
var
notificationListener
=
null
;
function
_notificationListener
(
event
)
{
if
(
typeof
event
.
detail
!
=
"
object
"
)
{
return
;
}
if
(
typeof
notificationListener
!
=
"
function
"
)
{
return
;
}
notificationListener
(
event
.
detail
.
event
event
.
detail
.
params
)
;
}
Mozilla
.
UITour
.
DEFAULT_THEME_CYCLE_DELAY
=
10
*
1000
;
Mozilla
.
UITour
.
CONFIGNAME_SYNC
=
"
sync
"
;
Mozilla
.
UITour
.
CONFIGNAME_AVAILABLETARGETS
=
"
availableTargets
"
;
Mozilla
.
UITour
.
ping
=
function
(
callback
)
{
var
data
=
{
}
;
if
(
callback
)
{
data
.
callbackID
=
_waitForCallback
(
callback
)
;
}
_sendEvent
(
"
ping
"
data
)
;
}
;
Mozilla
.
UITour
.
observe
=
function
(
listener
callback
)
{
notificationListener
=
listener
;
if
(
listener
)
{
document
.
addEventListener
(
"
mozUITourNotification
"
_notificationListener
)
;
Mozilla
.
UITour
.
ping
(
callback
)
;
}
else
{
document
.
removeEventListener
(
"
mozUITourNotification
"
_notificationListener
)
;
}
}
;
Mozilla
.
UITour
.
registerPageID
=
function
(
pageID
)
{
_sendEvent
(
"
registerPageID
"
{
pageID
}
)
;
}
;
Mozilla
.
UITour
.
showHighlight
=
function
(
target
effect
)
{
_sendEvent
(
"
showHighlight
"
{
target
effect
}
)
;
}
;
Mozilla
.
UITour
.
hideHighlight
=
function
(
)
{
_sendEvent
(
"
hideHighlight
"
)
;
}
;
Mozilla
.
UITour
.
showInfo
=
function
(
target
title
text
icon
buttons
options
)
{
var
buttonData
=
[
]
;
if
(
Array
.
isArray
(
buttons
)
)
{
for
(
var
i
=
0
;
i
<
buttons
.
length
;
i
+
+
)
{
buttonData
.
push
(
{
label
:
buttons
[
i
]
.
label
icon
:
buttons
[
i
]
.
icon
style
:
buttons
[
i
]
.
style
callbackID
:
_waitForCallback
(
buttons
[
i
]
.
callback
)
}
)
;
}
}
var
closeButtonCallbackID
targetCallbackID
;
if
(
options
&
&
options
.
closeButtonCallback
)
{
closeButtonCallbackID
=
_waitForCallback
(
options
.
closeButtonCallback
)
;
}
if
(
options
&
&
options
.
targetCallback
)
{
targetCallbackID
=
_waitForCallback
(
options
.
targetCallback
)
;
}
_sendEvent
(
"
showInfo
"
{
target
title
text
icon
buttons
:
buttonData
closeButtonCallbackID
targetCallbackID
}
)
;
}
;
Mozilla
.
UITour
.
hideInfo
=
function
(
)
{
_sendEvent
(
"
hideInfo
"
)
;
}
;
Mozilla
.
UITour
.
showMenu
=
function
(
name
callback
)
{
var
showCallbackID
;
if
(
callback
)
{
showCallbackID
=
_waitForCallback
(
callback
)
;
}
_sendEvent
(
"
showMenu
"
{
name
showCallbackID
}
)
;
}
;
Mozilla
.
UITour
.
hideMenu
=
function
(
name
)
{
_sendEvent
(
"
hideMenu
"
{
name
}
)
;
}
;
Mozilla
.
UITour
.
showNewTab
=
function
(
)
{
_sendEvent
(
"
showNewTab
"
)
;
}
;
Mozilla
.
UITour
.
showProtectionReport
=
function
(
)
{
_sendEvent
(
"
showProtectionReport
"
)
;
}
;
Mozilla
.
UITour
.
getConfiguration
=
function
(
configName
callback
)
{
_sendEvent
(
"
getConfiguration
"
{
callbackID
:
_waitForCallback
(
callback
)
configuration
:
configName
}
)
;
}
;
Mozilla
.
UITour
.
setConfiguration
=
function
(
configName
configValue
)
{
_sendEvent
(
"
setConfiguration
"
{
configuration
:
configName
value
:
configValue
}
)
;
}
;
Mozilla
.
UITour
.
showFirefoxAccounts
=
function
(
extraURLParams
entrypoint
email
)
{
_sendEvent
(
"
showFirefoxAccounts
"
{
extraURLParams
:
JSON
.
stringify
(
extraURLParams
)
entrypoint
email
}
)
;
}
;
Mozilla
.
UITour
.
showConnectAnotherDevice
=
function
(
extraURLParams
)
{
_sendEvent
(
"
showConnectAnotherDevice
"
{
extraURLParams
:
JSON
.
stringify
(
extraURLParams
)
}
)
;
}
;
Mozilla
.
UITour
.
resetFirefox
=
function
(
)
{
_sendEvent
(
"
resetFirefox
"
)
;
}
;
Mozilla
.
UITour
.
addNavBarWidget
=
function
(
name
callback
)
{
_sendEvent
(
"
addNavBarWidget
"
{
name
callbackID
:
_waitForCallback
(
callback
)
}
)
;
}
;
Mozilla
.
UITour
.
setDefaultSearchEngine
=
function
(
identifier
)
{
_sendEvent
(
"
setDefaultSearchEngine
"
{
identifier
}
)
;
}
;
Mozilla
.
UITour
.
setTreatmentTag
=
function
(
name
value
)
{
_sendEvent
(
"
setTreatmentTag
"
{
name
value
}
)
;
}
;
Mozilla
.
UITour
.
getTreatmentTag
=
function
(
name
callback
)
{
_sendEvent
(
"
getTreatmentTag
"
{
name
callbackID
:
_waitForCallback
(
callback
)
}
)
;
}
;
Mozilla
.
UITour
.
setSearchTerm
=
function
(
term
)
{
_sendEvent
(
"
setSearchTerm
"
{
term
}
)
;
}
;
Mozilla
.
UITour
.
openSearchPanel
=
function
(
callback
)
{
_sendEvent
(
"
openSearchPanel
"
{
callbackID
:
_waitForCallback
(
callback
)
}
)
;
}
;
Mozilla
.
UITour
.
forceShowReaderIcon
=
function
(
)
{
_sendEvent
(
"
forceShowReaderIcon
"
)
;
}
;
Mozilla
.
UITour
.
toggleReaderMode
=
function
(
)
{
_sendEvent
(
"
toggleReaderMode
"
)
;
}
;
Mozilla
.
UITour
.
openPreferences
=
function
(
pane
)
{
_sendEvent
(
"
openPreferences
"
{
pane
}
)
;
}
;
Mozilla
.
UITour
.
closeTab
=
function
(
)
{
_sendEvent
(
"
closeTab
"
)
;
}
;
}
)
(
)
;
if
(
typeof
module
!
=
=
"
undefined
"
&
&
module
.
exports
)
{
module
.
exports
=
Mozilla
.
UITour
;
}
