"
use
strict
"
;
var
gTestTab
;
var
gContentAPI
;
var
gContentWindow
;
var
gContentDoc
;
function
test
(
)
{
registerCleanupFunction
(
function
(
)
{
gContentDoc
=
null
;
}
)
;
UITourTest
(
)
;
}
var
tests
=
[
taskify
(
function
*
test_move_tab_to_new_window
(
)
{
const
myDocIdentifier
=
"
Hello
I
'
m
a
unique
expando
to
identify
this
document
.
"
;
let
highlight
=
document
.
getElementById
(
"
UITourHighlight
"
)
;
let
windowDestroyedDeferred
=
Promise
.
defer
(
)
;
let
onDOMWindowDestroyed
=
(
aWindow
)
=
>
{
if
(
gContentWindow
&
&
aWindow
=
=
gContentWindow
)
{
Services
.
obs
.
removeObserver
(
onDOMWindowDestroyed
"
dom
-
window
-
destroyed
"
)
;
windowDestroyedDeferred
.
resolve
(
)
;
}
}
;
let
browserStartupDeferred
=
Promise
.
defer
(
)
;
Services
.
obs
.
addObserver
(
function
onBrowserDelayedStartup
(
aWindow
)
{
Services
.
obs
.
removeObserver
(
onBrowserDelayedStartup
"
browser
-
delayed
-
startup
-
finished
"
)
;
browserStartupDeferred
.
resolve
(
aWindow
)
;
}
"
browser
-
delayed
-
startup
-
finished
"
false
)
;
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
myDocIdentifier
contentMyDocIdentifier
=
>
{
let
onVisibilityChange
=
(
)
=
>
{
if
(
!
content
.
document
.
hidden
)
{
let
win
=
Cu
.
waiveXrays
(
content
)
;
win
.
Mozilla
.
UITour
.
showHighlight
(
"
appMenu
"
)
;
}
}
;
content
.
document
.
addEventListener
(
"
visibilitychange
"
onVisibilityChange
)
;
content
.
document
.
myExpando
=
contentMyDocIdentifier
;
}
)
;
gContentAPI
.
showHighlight
(
"
appMenu
"
)
;
yield
elementVisiblePromise
(
highlight
)
;
gContentWindow
=
gBrowser
.
replaceTabWithWindow
(
gBrowser
.
selectedTab
)
;
yield
browserStartupDeferred
.
promise
;
let
newWindowHighlight
=
gContentWindow
.
document
.
getElementById
(
"
UITourHighlight
"
)
;
yield
elementVisiblePromise
(
newWindowHighlight
)
;
let
selectedTab
=
gContentWindow
.
gBrowser
.
selectedTab
;
yield
ContentTask
.
spawn
(
selectedTab
.
linkedBrowser
myDocIdentifier
contentMyDocIdentifier
=
>
{
is
(
content
.
document
.
myExpando
contentMyDocIdentifier
"
Document
should
be
selected
in
new
window
"
)
;
}
)
;
ok
(
UITour
.
tourBrowsersByWindow
&
&
UITour
.
tourBrowsersByWindow
.
has
(
gContentWindow
)
"
Window
should
be
known
"
)
;
ok
(
UITour
.
tourBrowsersByWindow
.
get
(
gContentWindow
)
.
has
(
selectedTab
.
linkedBrowser
)
"
Selected
browser
should
be
known
"
)
;
gTestTab
=
gContentWindow
.
gBrowser
.
selectedTab
;
let
shownPromise
=
promisePanelShown
(
gContentWindow
)
;
gContentAPI
.
showMenu
(
"
appMenu
"
)
;
yield
shownPromise
;
isnot
(
gContentWindow
.
PanelUI
.
panel
.
state
"
closed
"
"
Panel
should
be
open
"
)
;
ok
(
gContentWindow
.
PanelUI
.
contents
.
children
.
length
>
0
"
Panel
contents
should
have
children
"
)
;
gContentAPI
.
hideHighlight
(
)
;
gContentAPI
.
hideMenu
(
"
appMenu
"
)
;
gTestTab
=
null
;
Services
.
obs
.
addObserver
(
onDOMWindowDestroyed
"
dom
-
window
-
destroyed
"
false
)
;
gContentWindow
.
close
(
)
;
yield
windowDestroyedDeferred
.
promise
;
}
)
]
;
