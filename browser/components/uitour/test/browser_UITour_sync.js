"
use
strict
"
;
var
gTestTab
;
var
gContentAPI
;
var
gContentWindow
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
remote
.
root
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
username
"
)
;
}
)
;
add_task
(
setup_UITourTest
)
;
add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
root
"
"
https
:
/
/
example
.
com
"
)
;
}
)
;
add_UITour_task
(
async
function
test_checkSyncSetup_disabled
(
)
{
let
result
=
await
getConfigurationPromise
(
"
sync
"
)
;
is
(
result
.
setup
false
"
Sync
shouldn
'
t
be
setup
by
default
"
)
;
}
)
;
add_UITour_task
(
async
function
test_checkSyncSetup_enabled
(
)
{
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
username
"
"
uitour
tests
.
mozilla
.
org
"
)
;
let
result
=
await
getConfigurationPromise
(
"
sync
"
)
;
is
(
result
.
setup
true
"
Sync
should
be
setup
"
)
;
}
)
;
add_UITour_task
(
async
function
test_checkSyncCounts
(
)
{
Services
.
prefs
.
setIntPref
(
"
services
.
sync
.
clients
.
devices
.
desktop
"
4
)
;
Services
.
prefs
.
setIntPref
(
"
services
.
sync
.
clients
.
devices
.
mobile
"
5
)
;
Services
.
prefs
.
setIntPref
(
"
services
.
sync
.
numClients
"
9
)
;
let
result
=
await
getConfigurationPromise
(
"
sync
"
)
;
is
(
result
.
mobileDevices
5
"
mobileDevices
should
be
set
"
)
;
is
(
result
.
desktopDevices
4
"
desktopDevices
should
be
set
"
)
;
is
(
result
.
totalDevices
9
"
totalDevices
should
be
set
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
clients
.
devices
.
desktop
"
)
;
result
=
await
getConfigurationPromise
(
"
sync
"
)
;
is
(
result
.
mobileDevices
5
"
mobileDevices
should
be
set
"
)
;
is
(
result
.
desktopDevices
0
"
desktopDevices
should
be
0
"
)
;
is
(
result
.
totalDevices
9
"
totalDevices
should
be
set
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
clients
.
devices
.
mobile
"
)
;
result
=
await
getConfigurationPromise
(
"
sync
"
)
;
is
(
result
.
mobileDevices
0
"
mobileDevices
should
be
0
"
)
;
is
(
result
.
desktopDevices
0
"
desktopDevices
should
be
0
"
)
;
is
(
result
.
totalDevices
9
"
totalDevices
should
be
set
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
numClients
"
)
;
result
=
await
getConfigurationPromise
(
"
sync
"
)
;
is
(
result
.
mobileDevices
0
"
mobileDevices
should
be
0
"
)
;
is
(
result
.
desktopDevices
0
"
desktopDevices
should
be
0
"
)
;
is
(
result
.
totalDevices
0
"
totalDevices
should
be
0
"
)
;
}
)
;
add_UITour_task
(
async
function
test_firefoxAccountsNoParams
(
)
{
info
(
"
Load
https
:
/
/
accounts
.
firefox
.
com
"
)
;
await
gContentAPI
.
showFirefoxAccounts
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
gTestTab
.
linkedBrowser
false
"
https
:
/
/
example
.
com
/
?
context
=
fx_desktop_v3
&
entrypoint
=
uitour
&
action
=
email
&
service
=
sync
"
)
;
}
)
;
add_UITour_task
(
async
function
test_firefoxAccountsValidParams
(
)
{
info
(
"
Load
https
:
/
/
accounts
.
firefox
.
com
"
)
;
await
gContentAPI
.
showFirefoxAccounts
(
{
utm_foo
:
"
foo
"
utm_bar
:
"
bar
"
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
gTestTab
.
linkedBrowser
false
"
https
:
/
/
example
.
com
/
?
context
=
fx_desktop_v3
&
entrypoint
=
uitour
&
action
=
email
&
service
=
sync
&
utm_foo
=
foo
&
utm_bar
=
bar
"
)
;
}
)
;
add_UITour_task
(
async
function
test_firefoxAccountsWithEmail
(
)
{
info
(
"
Load
https
:
/
/
accounts
.
firefox
.
com
"
)
;
await
gContentAPI
.
showFirefoxAccounts
(
null
"
foo
bar
.
com
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
gTestTab
.
linkedBrowser
false
"
https
:
/
/
example
.
com
/
?
context
=
fx_desktop_v3
&
entrypoint
=
uitour
&
email
=
foo
%
40bar
.
com
&
service
=
sync
"
)
;
}
)
;
add_UITour_task
(
async
function
test_firefoxAccountsNonAlphaValue
(
)
{
let
value
=
"
foo
&
/
=
?
:
\
\
\
xa9
"
;
let
expected
=
encodeURIComponent
(
value
)
.
replace
(
/
%
20
/
g
"
+
"
)
;
info
(
"
Load
https
:
/
/
accounts
.
firefox
.
com
"
)
;
await
gContentAPI
.
showFirefoxAccounts
(
{
utm_foo
:
value
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
gTestTab
.
linkedBrowser
false
"
https
:
/
/
example
.
com
/
?
context
=
fx_desktop_v3
&
entrypoint
=
uitour
&
action
=
email
&
service
=
sync
&
utm_foo
=
"
+
expected
)
;
}
)
;
async
function
checkFxANotLoaded
(
)
{
try
{
await
waitForConditionPromise
(
(
)
=
>
{
return
gBrowser
.
selectedBrowser
.
currentURI
.
spec
.
startsWith
(
"
https
:
/
/
example
.
com
"
)
;
}
"
Check
if
FxA
opened
"
)
;
ok
(
false
"
No
FxA
tab
should
have
opened
"
)
;
}
catch
(
ex
)
{
ok
(
true
"
No
FxA
tab
opened
"
)
;
}
}
add_UITour_task
(
async
function
test_firefoxAccountsNonObject
(
)
{
await
gContentAPI
.
showFirefoxAccounts
(
99
)
;
await
checkFxANotLoaded
(
)
;
}
)
;
add_UITour_task
(
async
function
test_firefoxAccountsNonUtmPrefix
(
)
{
await
gContentAPI
.
showFirefoxAccounts
(
{
utm_foo
:
"
foo
"
bar
:
"
bar
"
}
)
;
await
checkFxANotLoaded
(
)
;
}
)
;
add_UITour_task
(
async
function
test_firefoxAccountsNonAlphaName
(
)
{
await
gContentAPI
.
showFirefoxAccounts
(
{
utm_foo
:
"
foo
"
"
utm_bar
=
"
:
"
bar
"
}
)
;
await
checkFxANotLoaded
(
)
;
}
)
;
