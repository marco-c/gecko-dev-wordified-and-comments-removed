const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
}
=
Components
;
const
PHISH_TABLE
=
"
test
-
phish
-
simple
"
;
const
PHISH_URL
=
"
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
a
-
trap
.
html
"
;
const
SECURE_CONTAINER_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
safebrowsing
/
content
/
test
/
empty_file
.
html
"
;
function
waitForDBInit
(
callback
)
{
let
didCallback
=
false
;
function
callbackOnce
(
)
{
Services
.
obs
.
removeObserver
(
obsFunc
"
mozentries
-
update
-
finished
"
)
;
if
(
!
didCallback
)
{
callback
(
)
;
}
didCallback
=
true
;
}
function
obsFunc
(
)
{
ok
(
true
"
Received
internal
event
!
"
)
;
callbackOnce
(
)
;
}
Services
.
obs
.
addObserver
(
obsFunc
"
mozentries
-
update
-
finished
"
false
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
Services
.
io
.
newURI
(
PHISH_URL
)
{
}
)
;
let
dbService
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
dbservice
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierDBService
)
;
dbService
.
lookup
(
principal
PHISH_TABLE
value
=
>
{
if
(
value
=
=
=
PHISH_TABLE
)
{
ok
(
true
"
DB
lookup
success
!
"
)
;
callbackOnce
(
)
;
}
}
)
;
}
add_task
(
function
*
testNormalBrowsing
(
)
{
yield
BrowserTestUtils
.
withNewTab
(
SECURE_CONTAINER_URL
function
*
(
browser
)
{
yield
new
Promise
(
resolve
=
>
waitForDBInit
(
resolve
)
)
;
yield
ContentTask
.
spawn
(
browser
PHISH_URL
function
*
(
aPhishUrl
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
e
=
>
{
removeEventListener
(
'
AboutBlockedLoaded
'
listener
false
true
)
;
resolve
(
)
;
}
;
addEventListener
(
'
AboutBlockedLoaded
'
listener
false
true
)
;
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
aPhishUrl
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
}
)
;
ok
(
true
"
about
:
blocked
is
successfully
loaded
!
"
)
;
}
)
;
}
)
;
