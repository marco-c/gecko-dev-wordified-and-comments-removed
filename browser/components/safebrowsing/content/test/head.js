Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
function
promiseTabLoadEvent
(
tab
url
eventType
=
"
load
"
)
{
info
(
Wait
tab
event
:
{
eventType
}
)
;
function
handle
(
loadedUrl
)
{
if
(
loadedUrl
=
=
=
"
about
:
blank
"
|
|
(
url
&
&
loadedUrl
!
=
=
url
)
)
{
info
(
Skipping
spurious
load
event
for
{
loadedUrl
}
)
;
return
false
;
}
info
(
"
Tab
event
received
:
load
"
)
;
return
true
;
}
let
loaded
;
if
(
eventType
=
=
=
"
load
"
)
{
loaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
handle
)
;
}
else
{
loaded
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
eventType
true
undefined
true
)
;
}
if
(
url
)
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
url
)
;
return
loaded
;
}
Services
.
prefs
.
setCharPref
(
"
urlclassifier
.
malwareTable
"
"
test
-
malware
-
simple
test
-
unwanted
-
simple
"
)
;
Services
.
prefs
.
setCharPref
(
"
urlclassifier
.
phishTable
"
"
test
-
phish
-
simple
"
)
;
Services
.
prefs
.
setCharPref
(
"
urlclassifier
.
blockedTable
"
"
test
-
block
-
simple
"
)
;
SafeBrowsing
.
init
(
)
;
