const
PHISH_TABLE
=
"
moztest
-
phish
-
simple
"
;
const
PHISH_URL
=
"
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
a
-
trap
.
html
"
;
function
promiseTabLoadEvent
(
tab
url
eventType
=
"
load
"
)
{
info
(
Wait
tab
event
:
{
eventType
}
)
;
function
handle
(
loadedUrl
)
{
if
(
loadedUrl
=
=
=
"
about
:
blank
"
|
|
(
url
&
&
loadedUrl
!
=
=
url
)
)
{
info
(
Skipping
spurious
load
event
for
{
loadedUrl
}
)
;
return
false
;
}
info
(
"
Tab
event
received
:
load
"
)
;
return
true
;
}
let
loaded
;
if
(
eventType
=
=
=
"
load
"
)
{
loaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
handle
)
;
}
else
{
loaded
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
eventType
true
undefined
true
)
;
}
if
(
url
)
{
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
url
)
;
}
return
loaded
;
}
function
waitForDBInit
(
callback
)
{
let
didCallback
=
false
;
function
callbackOnce
(
)
{
if
(
!
didCallback
)
{
Services
.
obs
.
removeObserver
(
obsFunc
"
mozentries
-
update
-
finished
"
)
;
callback
(
)
;
}
didCallback
=
true
;
}
function
obsFunc
(
)
{
ok
(
true
"
Received
internal
event
!
"
)
;
callbackOnce
(
)
;
}
Services
.
obs
.
addObserver
(
obsFunc
"
mozentries
-
update
-
finished
"
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
PHISH_URL
)
{
}
)
;
let
dbService
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
dbservice
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierDBService
)
;
dbService
.
lookup
(
principal
PHISH_TABLE
value
=
>
{
if
(
value
=
=
=
PHISH_TABLE
)
{
ok
(
true
"
DB
lookup
success
!
"
)
;
callbackOnce
(
)
;
}
}
)
;
}
Services
.
prefs
.
setCharPref
(
"
urlclassifier
.
malwareTable
"
"
moztest
-
malware
-
simple
moztest
-
unwanted
-
simple
moztest
-
harmful
-
simple
"
)
;
Services
.
prefs
.
setCharPref
(
"
urlclassifier
.
phishTable
"
"
moztest
-
phish
-
simple
"
)
;
Services
.
prefs
.
setCharPref
(
"
urlclassifier
.
blockedTable
"
"
moztest
-
block
-
simple
"
)
;
SafeBrowsing
.
init
(
)
;
