"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutPrivateBrowsingHandler
"
]
;
const
{
RemotePages
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
remotepagemanager
/
RemotePageManagerParent
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
AboutPrivateBrowsingHandler
=
{
_inited
:
false
_topics
:
[
"
OpenPrivateWindow
"
"
SearchHandoff
"
]
init
(
)
{
this
.
pageListener
=
new
RemotePages
(
"
about
:
privatebrowsing
"
)
;
for
(
let
topic
of
this
.
_topics
)
{
this
.
pageListener
.
addMessageListener
(
topic
this
.
receiveMessage
.
bind
(
this
)
)
;
}
this
.
_inited
=
true
;
}
uninit
(
)
{
if
(
!
this
.
_inited
)
{
return
;
}
for
(
let
topic
of
this
.
_topics
)
{
this
.
pageListener
.
removeMessageListener
(
topic
)
;
}
this
.
pageListener
.
destroy
(
)
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
OpenPrivateWindow
"
:
{
let
win
=
aMessage
.
target
.
browser
.
ownerGlobal
;
win
.
OpenBrowserWindow
(
{
private
:
true
}
)
;
break
;
}
case
"
SearchHandoff
"
:
{
let
searchAlias
=
"
"
;
let
searchAliases
=
Services
.
search
.
defaultPrivateEngine
.
wrappedJSObject
.
__internalAliases
;
if
(
searchAliases
&
&
searchAliases
.
length
)
{
searchAlias
=
{
searchAliases
[
0
]
}
;
}
let
urlBar
=
aMessage
.
target
.
browser
.
ownerGlobal
.
gURLBar
;
let
isFirstChange
=
true
;
if
(
!
aMessage
.
data
|
|
!
aMessage
.
data
.
text
)
{
urlBar
.
setHiddenFocus
(
)
;
}
else
{
urlBar
.
search
(
{
searchAlias
}
{
aMessage
.
data
.
text
}
)
;
isFirstChange
=
false
;
}
let
checkFirstChange
=
(
)
=
>
{
if
(
isFirstChange
)
{
isFirstChange
=
false
;
urlBar
.
removeHiddenFocus
(
)
;
urlBar
.
search
(
searchAlias
)
;
aMessage
.
target
.
sendAsyncMessage
(
"
HideSearch
"
)
;
urlBar
.
removeEventListener
(
"
compositionstart
"
checkFirstChange
)
;
urlBar
.
removeEventListener
(
"
paste
"
checkFirstChange
)
;
}
}
;
let
onKeydown
=
ev
=
>
{
if
(
ev
.
key
.
length
=
=
=
1
&
&
!
ev
.
altKey
&
&
!
ev
.
ctrlKey
&
&
!
ev
.
metaKey
)
{
checkFirstChange
(
)
;
}
if
(
ev
.
key
=
=
=
"
Escape
"
)
{
onDone
(
)
;
}
}
;
let
onDone
=
(
)
=
>
{
aMessage
.
target
.
sendAsyncMessage
(
"
ShowSearch
"
)
;
urlBar
.
removeHiddenFocus
(
)
;
urlBar
.
removeEventListener
(
"
keydown
"
onKeydown
)
;
urlBar
.
removeEventListener
(
"
mousedown
"
onDone
)
;
urlBar
.
removeEventListener
(
"
blur
"
onDone
)
;
urlBar
.
removeEventListener
(
"
compositionstart
"
checkFirstChange
)
;
urlBar
.
removeEventListener
(
"
paste
"
checkFirstChange
)
;
}
;
urlBar
.
addEventListener
(
"
keydown
"
onKeydown
)
;
urlBar
.
addEventListener
(
"
mousedown
"
onDone
)
;
urlBar
.
addEventListener
(
"
blur
"
onDone
)
;
urlBar
.
addEventListener
(
"
compositionstart
"
checkFirstChange
)
;
urlBar
.
addEventListener
(
"
paste
"
checkFirstChange
)
;
break
;
}
}
}
}
;
