const
ADD_BOOKMARK_MODE
=
0
;
const
EDIT_BOOKMARK_MODE
=
1
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
var
MicrosummaryPicker
=
{
__mss
:
null
get
_mss
(
)
{
if
(
!
this
.
__mss
)
this
.
__mss
=
Cc
[
"
mozilla
.
org
/
microsummary
/
service
;
1
"
]
.
getService
(
Ci
.
nsIMicrosummaryService
)
;
return
this
.
__mss
;
}
__ios
:
null
get
_ios
(
)
{
if
(
!
this
.
__ios
)
this
.
__ios
=
Cc
[
"
mozilla
.
org
/
network
/
io
-
service
;
1
"
]
.
getService
(
Ci
.
nsIIOService
)
;
return
this
.
__ios
;
}
get
_pageURI
(
)
{
if
(
this
.
_mode
=
=
ADD_BOOKMARK_MODE
)
return
this
.
_ios
.
newURI
(
gArg
.
url
null
null
)
;
else
if
(
this
.
_mode
=
=
EDIT_BOOKMARK_MODE
)
{
var
uriResource
=
BMDS
.
GetTarget
(
gResource
gProperties
[
1
]
true
)
;
if
(
!
uriResource
)
return
null
;
var
uriSpec
=
uriResource
.
QueryInterface
(
Ci
.
nsIRDFLiteral
)
.
Value
;
if
(
!
uriSpec
)
return
null
;
var
uri
;
try
{
uri
=
this
.
_ios
.
newURI
(
uriSpec
null
null
)
;
}
catch
(
e
)
{
return
null
;
}
return
uri
;
}
return
null
;
}
get
_bookmarkID
(
)
{
if
(
this
.
_mode
=
=
ADD_BOOKMARK_MODE
&
&
typeof
gResource
=
=
"
undefined
"
)
return
null
;
return
gResource
;
}
_microsummaries
:
null
get
_mode
(
)
{
if
(
"
gArg
"
in
window
)
return
ADD_BOOKMARK_MODE
;
else
if
(
"
gProperties
"
in
window
)
return
EDIT_BOOKMARK_MODE
;
return
null
;
}
get
enabled
(
)
{
if
(
!
(
"
_enabled
"
in
this
)
)
{
if
(
this
.
_mode
=
=
ADD_BOOKMARK_MODE
)
this
.
_enabled
=
!
(
"
feedURL
"
in
gArg
|
|
gArg
.
bBookmarkAllTabs
)
;
else
if
(
this
.
_mode
=
=
EDIT_BOOKMARK_MODE
)
{
var
bookmarkType
=
BookmarksUtils
.
resolveType
(
gResource
)
;
this
.
_enabled
=
!
(
bookmarkType
=
=
"
Livemark
"
|
|
bookmarkType
=
=
"
BookmarkSeparator
"
|
|
RDFCU
.
IsContainer
(
BMDS
gResource
)
)
;
}
else
this
.
_enabled
=
false
;
}
return
this
.
_enabled
;
}
init
:
function
MSP_init
(
)
{
this
.
_updateUserEnteredNameItem
(
)
;
if
(
this
.
_pageURI
)
{
try
{
this
.
_microsummaries
=
this
.
_mss
.
getMicrosummaries
(
this
.
_pageURI
this
.
_bookmarkID
)
;
}
catch
(
ex
)
{
this
.
_enabled
=
false
;
return
;
}
this
.
_microsummaries
.
addObserver
(
this
.
_observer
)
;
this
.
rebuild
(
)
;
}
}
destroy
:
function
MSP_destroy
(
)
{
if
(
this
.
_pageURI
&
&
this
.
_microsummaries
)
this
.
_microsummaries
.
removeObserver
(
this
.
_observer
)
;
}
rebuild
:
function
MSP_rebuild
(
)
{
var
microsummaryMenuList
=
document
.
getElementById
(
"
name
"
)
;
var
microsummaryMenuPopup
=
document
.
getElementById
(
"
microsummaryMenuPopup
"
)
;
var
activeMicrosummary
;
if
(
microsummaryMenuList
.
menuBoxObject
.
activeChild
)
activeMicrosummary
=
microsummaryMenuList
.
menuBoxObject
.
activeChild
.
microsummary
;
while
(
microsummaryMenuPopup
.
childNodes
.
length
>
2
)
microsummaryMenuPopup
.
removeChild
(
microsummaryMenuPopup
.
lastChild
)
;
var
enumerator
=
this
.
_microsummaries
.
Enumerate
(
)
;
if
(
enumerator
.
hasMoreElements
(
)
)
microsummaryMenuList
.
setAttribute
(
"
droppable
"
"
true
"
)
;
else
microsummaryMenuList
.
setAttribute
(
"
droppable
"
"
false
"
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
var
microsummary
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIMicrosummary
)
;
var
menuItem
=
document
.
createElement
(
"
menuitem
"
)
;
menuItem
.
microsummary
=
microsummary
;
if
(
microsummary
.
content
!
=
null
)
menuItem
.
setAttribute
(
"
label
"
microsummary
.
content
)
;
else
{
menuItem
.
setAttribute
(
"
label
"
microsummary
.
generator
.
name
?
microsummary
.
generator
.
name
:
microsummary
.
generator
.
uri
.
spec
)
;
microsummary
.
update
(
)
;
}
microsummaryMenuPopup
.
appendChild
(
menuItem
)
;
if
(
this
.
_bookmarkID
&
&
this
.
_mss
.
isMicrosummary
(
this
.
_bookmarkID
microsummary
)
)
microsummaryMenuList
.
selectedItem
=
menuItem
;
if
(
activeMicrosummary
&
&
microsummary
=
=
activeMicrosummary
)
microsummaryMenuList
.
menuBoxObject
.
activeChild
=
menuItem
;
}
}
_observer
:
{
interfaces
:
[
Ci
.
nsIMicrosummaryObserver
Ci
.
nsISupports
]
QueryInterface
:
function
(
iid
)
{
if
(
!
iid
.
equals
(
Ci
.
nsIMicrosummaryObserver
)
&
&
!
iid
.
equals
(
Ci
.
nsISupports
)
)
throw
Components
.
results
.
NS_ERROR_NO_INTERFACE
;
return
this
;
}
onContentLoaded
:
function
(
microsummary
)
{
MicrosummaryPicker
.
rebuild
(
)
;
}
onElementAppended
:
function
(
microsummary
)
{
MicrosummaryPicker
.
rebuild
(
)
;
}
}
onInput
:
function
MSP_onInput
(
event
)
{
this
.
_updateUserEnteredNameItem
(
)
;
}
_updateUserEnteredNameItem
:
function
MSP__updateUserEnteredNameItem
(
)
{
var
nameField
=
document
.
getElementById
(
"
name
"
)
;
var
nameItem
=
document
.
getElementById
(
"
userEnteredNameItem
"
)
;
nameItem
.
label
=
nameField
.
value
;
}
commit
:
function
MSP_commit
(
)
{
var
changed
=
false
;
var
menuList
=
document
.
getElementById
(
"
name
"
)
;
if
(
menuList
.
selectedIndex
=
=
-
1
)
menuList
.
selectedIndex
=
0
;
var
newMicrosummary
=
menuList
.
selectedItem
.
microsummary
;
if
(
newMicrosummary
=
=
null
&
&
this
.
_mss
.
hasMicrosummary
(
this
.
_bookmarkID
)
)
{
this
.
_mss
.
removeMicrosummary
(
this
.
_bookmarkID
)
;
changed
=
true
;
}
else
if
(
newMicrosummary
!
=
null
&
&
!
this
.
_mss
.
isMicrosummary
(
this
.
_bookmarkID
newMicrosummary
)
)
{
this
.
_mss
.
setMicrosummary
(
this
.
_bookmarkID
newMicrosummary
)
;
changed
=
true
;
}
return
changed
;
}
}
;
function
debug
(
str
)
{
dump
(
str
+
"
\
n
"
)
;
}
