#
include
"
nsBookmarksService
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIRDFContainer
.
h
"
#
include
"
nsIRDFContainerUtils
.
h
"
#
include
"
nsIRDFService
.
h
"
#
include
"
nsIRDFXMLSerializer
.
h
"
#
include
"
nsIRDFXMLSource
.
h
"
#
include
"
nsIRDFXMLParser
.
h
"
#
include
"
nsRDFCID
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
rdf
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsInt64
.
h
"
#
include
"
nsStringStream
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsICachingChannel
.
h
"
#
include
"
nsICacheVisitor
.
h
"
#
include
"
nsIDOMParser
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMCharacterData
.
h
"
#
include
"
nsIDOMNodeList
.
h
"
#
include
"
nsIDOM3Node
.
h
"
#
include
"
nsIDOMDocumentTraversal
.
h
"
#
include
"
nsIDOMTreeWalker
.
h
"
#
include
"
nsIDOMNodeFilter
.
h
"
#
include
"
nsIDOMDocumentFragment
.
h
"
#
include
"
nsIParser
.
h
"
#
include
"
nsParserCIID
.
h
"
#
include
"
nsIFragmentContentSink
.
h
"
#
include
"
nsIContentSink
.
h
"
#
include
"
nsIDocument
.
h
"
static
NS_DEFINE_CID
(
kCParserCID
NS_PARSER_CID
)
;
extern
nsIRDFResource
*
kRDF_type
;
extern
nsIRDFResource
*
kRDF_nextVal
;
extern
nsIRDFResource
*
kNC_FeedURL
;
extern
nsIRDFResource
*
kNC_LivemarkLock
;
extern
nsIRDFResource
*
kNC_LivemarkExpiration
;
extern
nsIRDFResource
*
kRSS09_channel
;
extern
nsIRDFResource
*
kRSS09_item
;
extern
nsIRDFResource
*
kRSS09_title
;
extern
nsIRDFResource
*
kRSS09_link
;
extern
nsIRDFResource
*
kRSS10_channel
;
extern
nsIRDFResource
*
kRSS10_items
;
extern
nsIRDFResource
*
kRSS10_title
;
extern
nsIRDFResource
*
kRSS10_link
;
extern
nsIRDFResource
*
kDC_date
;
extern
nsIRDFLiteral
*
kTrueLiteral
;
extern
nsIRDFService
*
gRDF
;
extern
nsIRDFContainerUtils
*
gRDFC
;
static
NS_DEFINE_CID
(
kRDFContainerCID
NS_RDFCONTAINER_CID
)
;
static
NS_DEFINE_CID
(
kRDFInMemoryDataSourceCID
NS_RDFINMEMORYDATASOURCE_CID
)
;
nsresult
nsBMSVCClearSeqContainer
(
nsIRDFDataSource
*
aDataSource
nsIRDFResource
*
aResource
)
;
nsresult
nsBMSVCUnmakeSeq
(
nsIRDFDataSource
*
aDataSource
nsIRDFResource
*
aResource
)
;
class
nsFeedLoadListener
:
public
nsIStreamListener
{
public
:
nsFeedLoadListener
(
nsBookmarksService
*
aBMSVC
nsIRDFDataSource
*
aInnerBMDataSource
nsIURI
*
aURI
nsIRDFResource
*
aLivemarkResource
)
:
mBMSVC
(
aBMSVC
)
mInnerBMDataSource
(
aInnerBMDataSource
)
mURI
(
aURI
)
mResource
(
aLivemarkResource
)
mAborted
(
PR_FALSE
)
{
NS_IF_ADDREF
(
mBMSVC
)
;
}
virtual
~
nsFeedLoadListener
(
)
{
NS_IF_RELEASE
(
mBMSVC
)
;
}
NS_DECL_ISUPPORTS
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
void
Abort
(
)
{
mAborted
=
PR_TRUE
;
}
protected
:
static
NS_METHOD
StreamReaderCallback
(
nsIInputStream
*
in
void
*
closure
const
char
*
fromRawSegment
PRUint32
toOffset
PRUint32
count
PRUint32
*
writeCount
)
;
NS_METHOD
TryParseAsRDF
(
)
;
NS_METHOD
TryParseAsSimpleRSS
(
)
;
NS_METHOD
SetResourceTTL
(
PRInt32
ttl
)
;
NS_METHOD
HandleRDFItem
(
nsIRDFDataSource
*
aDS
nsIRDFResource
*
itemResource
nsIRDFResource
*
aLinkResource
nsIRDFResource
*
aTitleResource
)
;
NS_METHOD
FindTextInChildNodes
(
nsIDOMNode
*
aNode
nsAString
&
aString
)
;
NS_METHOD
ParseHTMLFragment
(
nsAString
&
aFragString
nsIDocument
*
aTargetDocument
nsIDOMNode
*
*
outNode
)
;
PRBool
IsLinkValid
(
const
PRUnichar
*
aURI
)
;
nsBookmarksService
*
mBMSVC
;
nsCOMPtr
<
nsIRDFDataSource
>
mInnerBMDataSource
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIRDFResource
>
mResource
;
nsCOMPtr
<
nsIOutputStream
>
mCacheStream
;
nsCOMPtr
<
nsIScriptSecurityManager
>
mSecMan
;
PRBool
mAborted
;
nsCString
mBody
;
nsCOMPtr
<
nsIRDFContainer
>
mLivemarkContainer
;
}
;
NS_IMPL_ISUPPORTS2
(
nsFeedLoadListener
nsIStreamListener
nsIRequestObserver
)
NS_IMETHODIMP
nsFeedLoadListener
:
:
OnStartRequest
(
nsIRequest
*
aResult
nsISupports
*
ctxt
)
{
if
(
mAborted
)
return
NS_ERROR_UNEXPECTED
;
mBody
.
Truncate
(
)
;
return
NS_OK
;
}
NS_METHOD
nsFeedLoadListener
:
:
StreamReaderCallback
(
nsIInputStream
*
aInputStream
void
*
aClosure
const
char
*
aRawSegment
PRUint32
aToOffset
PRUint32
aCount
PRUint32
*
aWriteCount
)
{
nsFeedLoadListener
*
rll
=
(
nsFeedLoadListener
*
)
aClosure
;
rll
-
>
mBody
.
Append
(
aRawSegment
aCount
)
;
*
aWriteCount
=
aCount
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFeedLoadListener
:
:
OnDataAvailable
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsIInputStream
*
aInputStream
PRUint32
aSourceOffset
PRUint32
aCount
)
{
PRUint32
totalRead
;
return
aInputStream
-
>
ReadSegments
(
StreamReaderCallback
(
void
*
)
this
aCount
&
totalRead
)
;
}
NS_IMETHODIMP
nsFeedLoadListener
:
:
OnStopRequest
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsresult
aStatus
)
{
nsresult
rv
;
if
(
mAborted
)
{
mBMSVC
-
>
Unassert
(
mResource
kNC_LivemarkLock
kTrueLiteral
)
;
return
NS_OK
;
}
if
(
NS_FAILED
(
aStatus
)
)
{
SetResourceTTL
(
300
)
;
mBMSVC
-
>
Unassert
(
mResource
kNC_LivemarkLock
kTrueLiteral
)
;
return
NS_OK
;
}
do
{
PRBool
isContainer
=
PR_FALSE
;
rv
=
gRDFC
-
>
IsContainer
(
mInnerBMDataSource
mResource
&
isContainer
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
if
(
!
isContainer
)
{
rv
=
gRDFC
-
>
MakeSeq
(
mInnerBMDataSource
mResource
getter_AddRefs
(
mLivemarkContainer
)
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
}
else
{
rv
=
mBMSVC
-
>
ClearBookmarksContainer
(
mResource
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
mLivemarkContainer
=
do_CreateInstance
(
kRDFContainerCID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
rv
=
mLivemarkContainer
-
>
Init
(
mInnerBMDataSource
mResource
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
}
}
while
(
0
)
;
if
(
NS_FAILED
(
rv
)
)
{
mBMSVC
-
>
Unassert
(
mResource
kNC_LivemarkLock
kTrueLiteral
)
;
return
rv
;
}
mSecMan
=
do_GetService
(
NS_SCRIPTSECURITYMANAGER_CONTRACTID
)
;
rv
=
TryParseAsRDF
(
)
;
if
(
!
NS_SUCCEEDED
(
rv
)
)
{
rv
=
TryParseAsSimpleRSS
(
)
;
}
if
(
!
NS_SUCCEEDED
(
rv
)
)
{
mLivemarkContainer
-
>
AppendElement
(
mBMSVC
-
>
mLivemarkLoadFailedBookmark
)
;
}
PRInt32
ttl
;
if
(
NS_FAILED
(
rv
)
)
{
ttl
=
3600
;
}
else
{
if
(
mBMSVC
-
>
mBookmarksPrefs
)
rv
=
mBMSVC
-
>
mBookmarksPrefs
-
>
GetIntPref
(
"
livemark_refresh_seconds
"
&
ttl
)
;
if
(
!
mBMSVC
-
>
mBookmarksPrefs
|
|
NS_FAILED
(
rv
)
)
ttl
=
3600
;
else
if
(
ttl
<
60
)
ttl
=
60
;
nsCOMPtr
<
nsICachingChannel
>
channel
=
do_QueryInterface
(
aRequest
)
;
if
(
channel
)
{
nsCOMPtr
<
nsISupports
>
cacheToken
;
channel
-
>
GetCacheToken
(
getter_AddRefs
(
cacheToken
)
)
;
if
(
cacheToken
)
{
nsCOMPtr
<
nsICacheEntryInfo
>
entryInfo
=
do_QueryInterface
(
cacheToken
)
;
if
(
entryInfo
)
{
PRUint32
expiresTime
;
if
(
NS_SUCCEEDED
(
entryInfo
-
>
GetExpirationTime
(
&
expiresTime
)
)
)
{
PRInt64
temp64
nowtime
=
PR_Now
(
)
;
PRUint32
nowsec
;
LL_I2L
(
temp64
PR_USEC_PER_SEC
)
;
LL_DIV
(
temp64
nowtime
temp64
)
;
LL_L2UI
(
nowsec
temp64
)
;
if
(
nowsec
>
=
expiresTime
)
{
expiresTime
-
=
nowsec
;
if
(
ttl
<
(
PRInt32
)
expiresTime
)
ttl
=
(
PRInt32
)
expiresTime
;
}
}
}
}
}
}
rv
=
SetResourceTTL
(
ttl
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
SetResourceTTL
failed
on
Livemark
"
)
;
}
rv
=
mBMSVC
-
>
Unassert
(
mResource
kNC_LivemarkLock
kTrueLiteral
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
LivemarkLock
unassert
failed
!
"
)
;
}
return
NS_OK
;
}
nsresult
nsFeedLoadListener
:
:
SetResourceTTL
(
PRInt32
aTTL
)
{
nsresult
rv
;
PRTime
million
temp64
exptime
=
PR_Now
(
)
;
LL_I2L
(
million
PR_USEC_PER_SEC
)
;
LL_I2L
(
temp64
aTTL
)
;
LL_MUL
(
temp64
temp64
million
)
;
LL_ADD
(
exptime
exptime
temp64
)
;
nsCOMPtr
<
nsIRDFDate
>
newNode
;
rv
=
gRDF
-
>
GetDateLiteral
(
exptime
getter_AddRefs
(
newNode
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIRDFNode
>
oldNode
;
rv
=
mInnerBMDataSource
-
>
GetTarget
(
mResource
kNC_LivemarkExpiration
PR_TRUE
getter_AddRefs
(
oldNode
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
rv
=
=
NS_OK
)
{
rv
=
mInnerBMDataSource
-
>
Change
(
mResource
kNC_LivemarkExpiration
oldNode
newNode
)
;
}
else
{
rv
=
mInnerBMDataSource
-
>
Assert
(
mResource
kNC_LivemarkExpiration
newNode
PR_TRUE
)
;
}
if
(
NS_FAILED
(
rv
)
)
return
rv
;
return
NS_OK
;
}
nsresult
nsFeedLoadListener
:
:
TryParseAsRDF
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsIRDFXMLParser
>
rdfparser
(
do_CreateInstance
(
"
mozilla
.
org
/
rdf
/
xml
-
parser
;
1
"
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIRDFDataSource
>
ds
(
do_CreateInstance
(
kRDFInMemoryDataSourceCID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIStreamListener
>
listener
;
rv
=
rdfparser
-
>
ParseAsync
(
ds
mURI
getter_AddRefs
(
listener
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
!
listener
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIStringInputStream
>
stream
=
do_CreateInstance
(
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
)
;
if
(
!
stream
)
return
NS_ERROR_FAILURE
;
rv
=
stream
-
>
SetData
(
mBody
.
get
(
)
mBody
.
Length
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIChannel
>
channel
;
rv
=
NS_NewInputStreamChannel
(
getter_AddRefs
(
channel
)
mURI
stream
NS_LITERAL_CSTRING
(
"
text
/
xml
"
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
listener
-
>
OnStartRequest
(
channel
nsnull
)
;
listener
-
>
OnDataAvailable
(
channel
nsnull
stream
0
mBody
.
Length
(
)
)
;
listener
-
>
OnStopRequest
(
channel
nsnull
NS_OK
)
;
nsIRDFResource
*
RSS_items
=
nsnull
;
nsIRDFResource
*
RSS_title
=
nsnull
;
nsIRDFResource
*
RSS_link
=
nsnull
;
nsCOMPtr
<
nsIRDFResource
>
channelResource
=
nsnull
;
rv
=
ds
-
>
GetSource
(
kRDF_type
kRSS10_channel
PR_TRUE
getter_AddRefs
(
channelResource
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
NS_ERROR_FAILURE
;
if
(
rv
=
=
NS_OK
)
{
RSS_items
=
kRSS10_items
;
RSS_title
=
kRSS10_title
;
RSS_link
=
kRSS10_link
;
}
else
{
rv
=
ds
-
>
GetSource
(
kRDF_type
kRSS09_channel
PR_TRUE
getter_AddRefs
(
channelResource
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
NS_ERROR_FAILURE
;
if
(
rv
=
=
NS_OK
)
{
RSS_items
=
nsnull
;
RSS_title
=
kRSS09_title
;
RSS_link
=
kRSS09_link
;
}
}
if
(
!
channelResource
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsISimpleEnumerator
>
itemsEnumerator
;
if
(
RSS_items
)
{
nsCOMPtr
<
nsIRDFNode
>
itemsNode
;
rv
=
ds
-
>
GetTarget
(
channelResource
RSS_items
PR_TRUE
getter_AddRefs
(
itemsNode
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
rv
=
=
NS_RDF_NO_VALUE
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIRDFContainer
>
itemsContainer
=
do_CreateInstance
(
kRDFContainerCID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
rv
=
itemsContainer
-
>
Init
(
ds
(
nsIRDFResource
*
)
itemsNode
.
get
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
rv
=
itemsContainer
-
>
GetElements
(
getter_AddRefs
(
itemsEnumerator
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
rv
=
=
NS_RDF_NO_VALUE
)
return
NS_ERROR_FAILURE
;
}
else
{
rv
=
ds
-
>
GetSources
(
kRDF_type
kRSS09_item
PR_TRUE
getter_AddRefs
(
itemsEnumerator
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
NS_ERROR_FAILURE
;
}
PRBool
more
;
while
(
NS_SUCCEEDED
(
rv
=
itemsEnumerator
-
>
HasMoreElements
(
&
more
)
)
&
&
more
)
{
nsCOMPtr
<
nsISupports
>
iSupports
;
rv
=
itemsEnumerator
-
>
GetNext
(
getter_AddRefs
(
iSupports
)
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
nsCOMPtr
<
nsIRDFResource
>
item
(
do_QueryInterface
(
iSupports
)
)
;
if
(
!
item
)
{
rv
=
NS_ERROR_UNEXPECTED
;
break
;
}
rv
=
HandleRDFItem
(
ds
item
RSS_link
RSS_title
)
;
}
if
(
NS_FAILED
(
rv
)
)
return
rv
;
#
ifdef
DEBUG_vladimir
NS_WARNING
(
"
>
>
>
>
Success
from
TryParseAsRDF
!
\
n
"
)
;
#
endif
return
NS_OK
;
}
nsresult
nsFeedLoadListener
:
:
ParseHTMLFragment
(
nsAString
&
aFragString
nsIDocument
*
aTargetDocument
nsIDOMNode
*
*
outNode
)
{
NS_ENSURE_ARG
(
aTargetDocument
)
;
nsresult
rv
;
nsCOMPtr
<
nsIParser
>
parser
;
parser
=
do_CreateInstance
(
kCParserCID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIContentSink
>
sink
;
sink
=
do_CreateInstance
(
NS_HTMLFRAGMENTSINK2_CONTRACTID
)
;
NS_ENSURE_TRUE
(
sink
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIFragmentContentSink
>
fragSink
(
do_QueryInterface
(
sink
)
)
;
NS_ENSURE_TRUE
(
fragSink
NS_ERROR_FAILURE
)
;
fragSink
-
>
SetTargetDocument
(
aTargetDocument
)
;
parser
-
>
SetContentSink
(
sink
)
;
parser
-
>
Parse
(
aFragString
(
void
*
)
0
NS_LITERAL_CSTRING
(
"
text
/
html
"
)
PR_TRUE
eDTDMode_fragment
)
;
nsCOMPtr
<
nsIDOMDocumentFragment
>
contextfrag
;
rv
=
fragSink
-
>
GetFragment
(
getter_AddRefs
(
contextfrag
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
CallQueryInterface
(
contextfrag
outNode
)
;
return
rv
;
}
nsresult
nsFeedLoadListener
:
:
FindTextInChildNodes
(
nsIDOMNode
*
aNode
nsAString
&
aString
)
{
NS_ENSURE_ARG
(
aNode
)
;
nsresult
rv
;
nsCOMPtr
<
nsIDOMDocument
>
aDoc
;
aNode
-
>
GetOwnerDocument
(
getter_AddRefs
(
aDoc
)
)
;
nsCOMPtr
<
nsIDOMDocumentTraversal
>
trav
=
do_QueryInterface
(
aDoc
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIDOMTreeWalker
>
walker
;
rv
=
trav
-
>
CreateTreeWalker
(
aNode
nsIDOMNodeFilter
:
:
SHOW_TEXT
|
nsIDOMNodeFilter
:
:
SHOW_CDATA_SECTION
nsnull
PR_TRUE
getter_AddRefs
(
walker
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIDOMNode
>
currentNode
;
walker
-
>
GetCurrentNode
(
getter_AddRefs
(
currentNode
)
)
;
nsCOMPtr
<
nsIDOMCharacterData
>
charTextNode
;
nsAutoString
tempString
;
while
(
currentNode
)
{
charTextNode
=
do_QueryInterface
(
currentNode
)
;
if
(
charTextNode
)
{
charTextNode
-
>
GetData
(
tempString
)
;
aString
.
Append
(
tempString
)
;
}
walker
-
>
NextNode
(
getter_AddRefs
(
currentNode
)
)
;
}
if
(
aString
.
IsEmpty
(
)
)
{
return
NS_ERROR_FAILURE
;
}
else
{
return
NS_OK
;
}
}
nsresult
nsFeedLoadListener
:
:
HandleRDFItem
(
nsIRDFDataSource
*
aDS
nsIRDFResource
*
aItem
nsIRDFResource
*
aLinkResource
nsIRDFResource
*
aTitleResource
)
{
nsresult
rv
;
nsCOMPtr
<
nsIRDFNode
>
linkNode
;
rv
=
aDS
-
>
GetTarget
(
aItem
aLinkResource
PR_TRUE
getter_AddRefs
(
linkNode
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
rv
=
=
NS_RDF_NO_VALUE
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIRDFNode
>
titleNode
;
rv
=
aDS
-
>
GetTarget
(
aItem
aTitleResource
PR_TRUE
getter_AddRefs
(
titleNode
)
)
;
if
(
rv
=
=
NS_RDF_NO_VALUE
)
{
rv
=
aDS
-
>
GetTarget
(
aItem
kDC_date
PR_TRUE
getter_AddRefs
(
titleNode
)
)
;
}
if
(
NS_FAILED
(
rv
)
|
|
rv
=
=
NS_RDF_NO_VALUE
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIRDFLiteral
>
linkLiteral
(
do_QueryInterface
(
linkNode
)
)
;
nsCOMPtr
<
nsIRDFLiteral
>
titleLiteral
(
do_QueryInterface
(
titleNode
)
)
;
if
(
!
linkLiteral
|
|
!
titleLiteral
)
return
NS_ERROR_FAILURE
;
const
PRUnichar
*
linkStr
*
titleStr
;
rv
=
linkLiteral
-
>
GetValueConst
(
&
linkStr
)
;
rv
|
=
titleLiteral
-
>
GetValueConst
(
&
titleStr
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
!
IsLinkValid
(
linkStr
)
)
return
NS_OK
;
nsCOMPtr
<
nsIRDFResource
>
newBM
;
rv
=
mBMSVC
-
>
CreateBookmark
(
titleStr
linkStr
nsnull
nsnull
nsnull
nsnull
getter_AddRefs
(
newBM
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
rv
=
mLivemarkContainer
-
>
AppendElement
(
newBM
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
return
NS_OK
;
}
nsresult
nsFeedLoadListener
:
:
TryParseAsSimpleRSS
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsIDOMParser
>
parser
(
do_CreateInstance
(
"
mozilla
.
org
/
xmlextras
/
domparser
;
1
"
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIDOMDocument
>
xmldoc
;
parser
-
>
Init
(
nsnull
mURI
nsnull
)
;
rv
=
parser
-
>
ParseFromBuffer
(
(
const
PRUint8
*
)
mBody
.
get
(
)
mBody
.
Length
(
)
"
text
/
xml
"
getter_AddRefs
(
xmldoc
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
PRBool
isAtom
=
PR_FALSE
;
nsCOMPtr
<
nsIDOMElement
>
docElement
;
rv
=
xmldoc
-
>
GetDocumentElement
(
getter_AddRefs
(
docElement
)
)
;
if
(
!
docElement
)
return
NS_ERROR_UNEXPECTED
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIDOMNode
>
node
;
rv
=
xmldoc
-
>
GetFirstChild
(
getter_AddRefs
(
node
)
)
;
if
(
!
node
)
return
NS_ERROR_UNEXPECTED
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
PRBool
lookingForChannel
=
PR_FALSE
;
while
(
node
)
{
PRUint16
ntype
;
rv
=
node
-
>
GetNodeType
(
&
ntype
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
ntype
=
=
nsIDOMNode
:
:
ELEMENT_NODE
)
{
nsAutoString
nname
;
rv
=
node
-
>
GetNodeName
(
nname
)
;
if
(
!
lookingForChannel
)
{
if
(
nname
.
Equals
(
NS_LITERAL_STRING
(
"
rss
"
)
)
)
{
lookingForChannel
=
PR_TRUE
;
nsCOMPtr
<
nsIDOMNode
>
temp
;
rv
=
node
-
>
GetFirstChild
(
getter_AddRefs
(
temp
)
)
;
if
(
!
temp
)
return
NS_ERROR_UNEXPECTED
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
node
=
temp
;
continue
;
}
if
(
nname
.
Equals
(
NS_LITERAL_STRING
(
"
feed
"
)
)
)
{
isAtom
=
PR_TRUE
;
break
;
}
}
else
{
if
(
nname
.
Equals
(
NS_LITERAL_STRING
(
"
channel
"
)
)
)
{
break
;
}
}
}
nsCOMPtr
<
nsIDOMNode
>
temp
;
rv
=
node
-
>
GetNextSibling
(
getter_AddRefs
(
temp
)
)
;
if
(
!
temp
)
return
NS_ERROR_UNEXPECTED
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
node
=
temp
;
}
if
(
!
node
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIDOMElement
>
chElement
=
do_QueryInterface
(
node
)
;
if
(
!
chElement
)
return
NS_ERROR_UNEXPECTED
;
int
numMarksAdded
=
0
;
rv
=
chElement
-
>
GetFirstChild
(
getter_AddRefs
(
node
)
)
;
if
(
!
node
)
return
NS_ERROR_UNEXPECTED
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
while
(
node
)
{
PRUint16
ntype
;
rv
=
node
-
>
GetNodeType
(
&
ntype
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
ntype
=
=
nsIDOMNode
:
:
ELEMENT_NODE
)
{
nsAutoString
nname
;
rv
=
node
-
>
GetNodeName
(
nname
)
;
if
(
(
!
isAtom
&
&
nname
.
Equals
(
NS_LITERAL_STRING
(
"
item
"
)
)
)
|
|
(
isAtom
&
&
nname
.
Equals
(
NS_LITERAL_STRING
(
"
entry
"
)
)
)
)
{
nsAutoString
titleStr
;
nsAutoString
linkStr
;
nsAutoString
dateStr
;
nsCOMPtr
<
nsIDOMNode
>
childNode
;
rv
=
node
-
>
GetFirstChild
(
getter_AddRefs
(
childNode
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
while
(
childNode
)
{
PRUint16
childNtype
;
rv
=
childNode
-
>
GetNodeType
(
&
childNtype
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
childNtype
=
=
nsIDOMNode
:
:
ELEMENT_NODE
)
{
nsAutoString
childNname
;
rv
=
childNode
-
>
GetNodeName
(
childNname
)
;
if
(
childNname
.
Equals
(
NS_LITERAL_STRING
(
"
title
"
)
)
)
{
if
(
isAtom
)
{
nsCOMPtr
<
nsIDOMElement
>
titleElem
=
do_QueryInterface
(
childNode
)
;
if
(
!
titleElem
)
break
;
nsAutoString
titleMode
;
nsAutoString
titleType
;
titleElem
-
>
GetAttribute
(
NS_LITERAL_STRING
(
"
type
"
)
titleType
)
;
titleElem
-
>
GetAttribute
(
NS_LITERAL_STRING
(
"
mode
"
)
titleMode
)
;
if
(
titleMode
.
EqualsLiteral
(
"
base64
"
)
)
{
break
;
}
if
(
titleType
.
EqualsLiteral
(
"
text
"
)
|
|
titleType
.
EqualsLiteral
(
"
text
/
plain
"
)
|
|
titleType
.
IsEmpty
(
)
)
{
rv
=
FindTextInChildNodes
(
childNode
titleStr
)
;
}
else
if
(
titleType
.
EqualsLiteral
(
"
html
"
)
|
|
(
titleType
.
EqualsLiteral
(
"
text
/
html
"
)
&
&
!
titleMode
.
EqualsLiteral
(
"
xml
"
)
)
|
|
titleMode
.
EqualsLiteral
(
"
escaped
"
)
)
{
nsAutoString
escapedHTMLStr
;
rv
=
FindTextInChildNodes
(
childNode
escapedHTMLStr
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
nsCOMPtr
<
nsIDOMNode
>
newNode
;
nsCOMPtr
<
nsIDocument
>
doc
=
do_QueryInterface
(
xmldoc
)
;
ParseHTMLFragment
(
escapedHTMLStr
doc
getter_AddRefs
(
newNode
)
)
;
rv
=
FindTextInChildNodes
(
newNode
titleStr
)
;
}
else
if
(
titleType
.
EqualsLiteral
(
"
xhtml
"
)
|
|
titleType
.
EqualsLiteral
(
"
application
/
xhtml
"
)
|
|
titleMode
.
EqualsLiteral
(
"
xml
"
)
)
{
rv
=
FindTextInChildNodes
(
childNode
titleStr
)
;
}
else
{
break
;
}
}
else
{
rv
=
FindTextInChildNodes
(
childNode
titleStr
)
;
}
if
(
NS_FAILED
(
rv
)
)
break
;
}
else
if
(
dateStr
.
IsEmpty
(
)
&
&
(
childNname
.
Equals
(
NS_LITERAL_STRING
(
"
pubDate
"
)
)
|
|
childNname
.
Equals
(
NS_LITERAL_STRING
(
"
updated
"
)
)
)
)
{
rv
=
FindTextInChildNodes
(
childNode
dateStr
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
}
else
if
(
!
isAtom
&
&
childNname
.
Equals
(
NS_LITERAL_STRING
(
"
guid
"
)
)
&
&
linkStr
.
IsEmpty
(
)
)
{
nsCOMPtr
<
nsIDOMElement
>
linkElem
=
do_QueryInterface
(
childNode
)
;
if
(
!
linkElem
)
break
;
nsAutoString
isPermaLink
;
linkElem
-
>
GetAttribute
(
NS_LITERAL_STRING
(
"
isPermaLink
"
)
isPermaLink
)
;
if
(
!
isPermaLink
.
Equals
(
NS_LITERAL_STRING
(
"
false
"
)
)
)
{
rv
=
FindTextInChildNodes
(
childNode
linkStr
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
}
}
else
if
(
childNname
.
Equals
(
NS_LITERAL_STRING
(
"
link
"
)
)
)
{
if
(
isAtom
)
{
nsCOMPtr
<
nsIDOMElement
>
linkElem
=
do_QueryInterface
(
childNode
)
;
if
(
!
linkElem
)
break
;
nsAutoString
rel
;
linkElem
-
>
GetAttribute
(
NS_LITERAL_STRING
(
"
rel
"
)
rel
)
;
if
(
rel
.
Equals
(
NS_LITERAL_STRING
(
"
alternate
"
)
)
|
|
rel
.
IsEmpty
(
)
)
{
rv
=
linkElem
-
>
GetAttribute
(
NS_LITERAL_STRING
(
"
href
"
)
linkStr
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
nsCOMPtr
<
nsIDOM3Node
>
linkElem3
=
do_QueryInterface
(
childNode
)
;
if
(
linkElem3
)
{
nsAutoString
base
;
rv
=
linkElem3
-
>
GetBaseURI
(
base
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
base
.
IsEmpty
(
)
)
{
nsCOMPtr
<
nsIURI
>
baseURI
;
rv
=
NS_NewURI
(
getter_AddRefs
(
baseURI
)
base
)
;
if
(
baseURI
)
{
nsString
absLinkStr
;
if
(
NS_SUCCEEDED
(
NS_MakeAbsoluteURI
(
absLinkStr
linkStr
baseURI
)
)
)
linkStr
=
absLinkStr
;
}
}
}
}
}
else
if
(
linkStr
.
IsEmpty
(
)
)
{
rv
=
FindTextInChildNodes
(
childNode
linkStr
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
}
}
}
if
(
!
titleStr
.
IsEmpty
(
)
&
&
!
linkStr
.
IsEmpty
(
)
)
break
;
nsCOMPtr
<
nsIDOMNode
>
temp
;
rv
=
childNode
-
>
GetNextSibling
(
getter_AddRefs
(
temp
)
)
;
childNode
=
temp
;
if
(
!
childNode
|
|
NS_FAILED
(
rv
)
)
break
;
}
CompressWhitespace
(
titleStr
)
;
linkStr
.
Trim
(
"
\
b
\
t
\
r
\
n
"
)
;
CompressWhitespace
(
dateStr
)
;
if
(
titleStr
.
IsEmpty
(
)
&
&
!
dateStr
.
IsEmpty
(
)
)
titleStr
.
Assign
(
dateStr
)
;
if
(
!
titleStr
.
IsEmpty
(
)
&
&
!
linkStr
.
IsEmpty
(
)
&
&
IsLinkValid
(
linkStr
.
get
(
)
)
)
{
nsCOMPtr
<
nsIRDFResource
>
newBM
;
rv
=
mBMSVC
-
>
CreateBookmark
(
titleStr
.
get
(
)
linkStr
.
get
(
)
nsnull
nsnull
nsnull
nsnull
getter_AddRefs
(
newBM
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
rv
=
mLivemarkContainer
-
>
AppendElement
(
newBM
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
numMarksAdded
+
+
;
}
}
}
nsCOMPtr
<
nsIDOMNode
>
temp
;
rv
=
node
-
>
GetNextSibling
(
getter_AddRefs
(
temp
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
node
=
temp
;
}
if
(
numMarksAdded
>
0
)
{
#
ifdef
DEBUG_vladimir
NS_WARNING
(
"
>
>
>
>
Success
from
TryParseAsSimpleRSS
!
\
n
"
)
;
#
endif
return
NS_OK
;
}
return
NS_OK
;
}
PRBool
nsFeedLoadListener
:
:
IsLinkValid
(
const
PRUnichar
*
aURI
)
{
nsCOMPtr
<
nsIURI
>
linkuri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
linkuri
)
nsDependentString
(
aURI
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
PR_FALSE
;
if
(
!
mSecMan
)
return
PR_FALSE
;
rv
=
mSecMan
-
>
CheckLoadURI
(
mURI
linkuri
nsIScriptSecurityManager
:
:
DISALLOW_INHERIT_PRINCIPAL
)
;
if
(
NS_FAILED
(
rv
)
)
return
PR_FALSE
;
return
PR_TRUE
;
}
PRBool
nsBookmarksService
:
:
LivemarkNeedsUpdate
(
nsIRDFResource
*
aSource
)
{
nsresult
rv
;
PRBool
locked
=
PR_FALSE
;
if
(
NS_SUCCEEDED
(
mInner
-
>
HasAssertion
(
aSource
kNC_LivemarkLock
kTrueLiteral
PR_TRUE
&
locked
)
)
&
&
locked
)
{
return
PR_FALSE
;
}
nsCOMPtr
<
nsIRDFNode
>
expirationNode
;
rv
=
mInner
-
>
GetTarget
(
aSource
kNC_LivemarkExpiration
PR_TRUE
getter_AddRefs
(
expirationNode
)
)
;
if
(
rv
=
=
NS_OK
)
{
nsCOMPtr
<
nsIRDFDate
>
expirationTime
=
do_QueryInterface
(
expirationNode
)
;
PRTime
exprTime
nowTime
=
PR_Now
(
)
;
expirationTime
-
>
GetValue
(
&
exprTime
)
;
if
(
exprTime
>
nowTime
)
{
return
PR_FALSE
;
}
}
return
PR_TRUE
;
}
nsresult
nsBookmarksService
:
:
UpdateLivemarkChildren
(
nsIRDFResource
*
aSource
)
{
nsresult
rv
;
nsCOMPtr
<
nsIRDFNode
>
feedUrlNode
;
rv
=
mInner
-
>
GetTarget
(
aSource
kNC_FeedURL
PR_TRUE
getter_AddRefs
(
feedUrlNode
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
rv
=
=
NS_RDF_NO_VALUE
)
return
NS_OK
;
nsCOMPtr
<
nsIRDFLiteral
>
feedUrlLiteral
=
do_QueryInterface
(
feedUrlNode
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
const
PRUnichar
*
feedUrl
=
nsnull
;
rv
=
feedUrlLiteral
-
>
GetValueConst
(
&
feedUrl
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCString
feedUrlString
=
NS_ConvertUTF16toUTF8
(
feedUrl
)
;
if
(
feedUrlString
.
IsEmpty
(
)
)
return
rv
;
#
define
UNLOCK_AND_RETURN_RV
do
{
Unassert
(
aSource
kNC_LivemarkLock
kTrueLiteral
)
;
return
rv
;
}
while
(
0
)
PRBool
locked
=
PR_FALSE
;
if
(
NS_SUCCEEDED
(
mInner
-
>
HasAssertion
(
aSource
kNC_LivemarkLock
kTrueLiteral
PR_TRUE
&
locked
)
)
&
&
locked
)
{
return
NS_OK
;
}
rv
=
mInner
-
>
Assert
(
aSource
kNC_LivemarkLock
kTrueLiteral
PR_TRUE
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIRDFNode
>
expirationNode
;
rv
=
mInner
-
>
GetTarget
(
aSource
kNC_LivemarkExpiration
PR_TRUE
getter_AddRefs
(
expirationNode
)
)
;
if
(
rv
=
=
NS_OK
)
{
nsCOMPtr
<
nsIRDFDate
>
expirationTime
=
do_QueryInterface
(
expirationNode
)
;
PRTime
exprTime
nowTime
=
PR_Now
(
)
;
expirationTime
-
>
GetValue
(
&
exprTime
)
;
if
(
LL_CMP
(
exprTime
>
nowTime
)
)
{
rv
=
Unassert
(
aSource
kNC_LivemarkLock
kTrueLiteral
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
return
NS_OK
;
}
}
else
{
do
{
nsCOMPtr
<
nsIRDFContainer
>
container
(
do_CreateInstance
(
kRDFContainerCID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
rv
=
container
-
>
Init
(
mInner
aSource
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
rv
=
container
-
>
AppendElement
(
mLivemarkLoadingBookmark
)
;
}
while
(
0
)
;
}
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
feedUrlString
nsnull
nsnull
)
;
if
(
NS_FAILED
(
rv
)
)
UNLOCK_AND_RETURN_RV
;
nsCOMPtr
<
nsFeedLoadListener
>
listener
=
new
nsFeedLoadListener
(
this
mInner
uri
aSource
)
;
nsCOMPtr
<
nsIChannel
>
channel
;
rv
=
NS_NewChannel
(
getter_AddRefs
(
channel
)
uri
nsnull
nsnull
nsnull
nsIRequest
:
:
LOAD_BACKGROUND
|
nsIRequest
:
:
VALIDATE_ALWAYS
)
;
if
(
NS_FAILED
(
rv
)
)
UNLOCK_AND_RETURN_RV
;
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
channel
)
;
if
(
httpChannel
)
{
rv
=
httpChannel
-
>
SetRequestHeader
(
NS_LITERAL_CSTRING
(
"
X
-
Moz
"
)
NS_LITERAL_CSTRING
(
"
livebookmarks
"
)
PR_FALSE
)
;
}
rv
=
channel
-
>
AsyncOpen
(
listener
nsnull
)
;
if
(
NS_FAILED
(
rv
)
)
UNLOCK_AND_RETURN_RV
;
return
NS_OK
;
#
undef
UNLOCK_AND_RETURN_RV
}
nsresult
nsBMSVCClearSeqContainer
(
nsIRDFDataSource
*
aDataSource
nsIRDFResource
*
aResource
)
{
nsresult
rv
;
nsCOMPtr
<
nsIRDFContainer
>
itemsContainer
=
do_CreateInstance
(
kRDFContainerCID
&
rv
)
;
rv
=
itemsContainer
-
>
Init
(
aDataSource
aResource
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
PRInt32
itemsCount
=
0
;
rv
=
itemsContainer
-
>
GetCount
(
&
itemsCount
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
itemsCount
)
{
do
{
nsCOMPtr
<
nsIRDFNode
>
removed
;
rv
=
itemsContainer
-
>
RemoveElementAt
(
itemsCount
PR_TRUE
getter_AddRefs
(
removed
)
)
;
}
while
(
-
-
itemsCount
>
0
)
;
}
return
NS_OK
;
}
nsresult
nsBMSVCUnmakeSeq
(
nsIRDFDataSource
*
aDataSource
nsIRDFResource
*
aResource
)
{
nsresult
rv
;
rv
=
nsBMSVCClearSeqContainer
(
aDataSource
aResource
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIRDFNode
>
old
;
rv
=
aDataSource
-
>
GetTarget
(
aResource
kRDF_nextVal
PR_TRUE
getter_AddRefs
(
old
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aDataSource
-
>
Unassert
(
aResource
kRDF_nextVal
(
nsIRDFResource
*
)
old
.
get
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIRDFResource
>
RDF_instanceOf
;
nsCOMPtr
<
nsIRDFResource
>
RDF_Seq
;
gRDF
-
>
GetResource
(
NS_LITERAL_CSTRING
(
RDF_NAMESPACE_URI
"
instanceOf
"
)
getter_AddRefs
(
RDF_instanceOf
)
)
;
gRDF
-
>
GetResource
(
NS_LITERAL_CSTRING
(
RDF_NAMESPACE_URI
"
Seq
"
)
getter_AddRefs
(
RDF_Seq
)
)
;
rv
=
aDataSource
-
>
Unassert
(
aResource
RDF_instanceOf
RDF_Seq
.
get
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
