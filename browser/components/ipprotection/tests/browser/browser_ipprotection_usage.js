"
use
strict
"
;
const
{
IPPChannelFilter
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPPChannelFilter
.
sys
.
mjs
"
)
;
const
{
IPProtectionUsage
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtectionUsage
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_createConnection_and_proxy
(
)
{
await
withProxyServer
(
async
proxyInfo
=
>
{
const
filter
=
IPPChannelFilter
.
create
(
"
"
proxyInfo
.
host
proxyInfo
.
port
proxyInfo
.
type
)
;
filter
.
start
(
)
;
const
observer
=
new
IPProtectionUsage
(
)
;
observer
.
addIsolationKey
(
filter
.
isolationKey
)
;
observer
.
start
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
http
:
/
/
example
.
com
/
)
;
await
proxyInfo
.
gotConnection
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
Assert
.
greater
(
Glean
.
ipprotection
.
usageRx
.
testGetValue
(
)
.
sum
0
"
usageRx
should
have
recorded
bytes
"
)
;
Assert
.
greater
(
Glean
.
ipprotection
.
usageTx
.
testGetValue
(
)
.
sum
0
"
usageTx
should
record
bytes
for
POST
requests
"
)
;
}
)
;
}
)
;
