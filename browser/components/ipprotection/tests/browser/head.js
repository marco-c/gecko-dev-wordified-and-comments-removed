const
{
IPProtectionPanel
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtectionPanel
.
sys
.
mjs
"
)
;
const
{
IPProtectionWidget
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtection
.
sys
.
mjs
"
)
;
const
{
IPProtection
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtection
.
sys
.
mjs
"
)
;
function
waitForPanelEvent
(
document
eventName
)
{
return
BrowserTestUtils
.
waitForEvent
(
document
eventName
false
event
=
>
{
if
(
event
.
target
.
getAttribute
(
"
viewId
"
)
=
=
=
"
PanelUI
-
ipprotection
"
)
{
return
true
;
}
return
false
;
}
)
;
}
const
defaultState
=
new
IPProtectionPanel
(
)
.
state
;
async
function
openPanel
(
state
=
defaultState
win
=
window
)
{
let
panel
=
IPProtection
.
getPanel
(
win
)
;
panel
.
setState
(
state
)
;
IPProtection
.
openPanel
(
win
)
;
let
panelShownPromise
=
waitForPanelEvent
(
win
.
document
"
popupshown
"
)
;
let
panelInitPromise
=
BrowserTestUtils
.
waitForEvent
(
win
.
document
"
IPProtection
:
Init
"
)
;
await
Promise
.
all
(
[
panelShownPromise
panelInitPromise
]
)
;
let
panelView
=
PanelMultiView
.
getViewNode
(
win
.
document
IPProtectionWidget
.
PANEL_ID
)
;
let
content
=
panelView
.
querySelector
(
IPProtectionPanel
.
CONTENT_TAGNAME
)
;
await
content
.
updateComplete
;
return
content
;
}
async
function
setPanelState
(
state
=
defaultState
win
=
window
)
{
let
panel
=
IPProtection
.
getPanel
(
win
)
;
panel
.
setState
(
state
)
;
let
panelView
=
PanelMultiView
.
getViewNode
(
win
.
document
IPProtectionWidget
.
PANEL_ID
)
;
let
content
=
panelView
.
querySelector
(
IPProtectionPanel
.
CONTENT_TAGNAME
)
;
await
content
.
updateComplete
;
}
async
function
closePanel
(
win
=
window
)
{
let
panel
=
IPProtection
.
getPanel
(
win
)
;
panel
.
setState
(
defaultState
)
;
let
panelHiddenPromise
=
waitForPanelEvent
(
win
.
document
"
popuphidden
"
)
;
panel
.
close
(
)
;
await
panelHiddenPromise
;
}
