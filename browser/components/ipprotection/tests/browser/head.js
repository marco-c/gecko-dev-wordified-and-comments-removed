const
{
IPProtectionPanel
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtectionPanel
.
sys
.
mjs
"
)
;
const
{
IPProtectionWidget
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtection
.
sys
.
mjs
"
)
;
const
{
IPProtection
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtection
.
sys
.
mjs
"
)
;
const
{
HttpServer
HTTP_403
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
)
;
function
waitForPanelEvent
(
document
eventName
)
{
return
BrowserTestUtils
.
waitForEvent
(
document
eventName
false
event
=
>
{
if
(
event
.
target
.
getAttribute
(
"
viewId
"
)
=
=
=
"
PanelUI
-
ipprotection
"
)
{
return
true
;
}
return
false
;
}
)
;
}
const
defaultState
=
new
IPProtectionPanel
(
)
.
state
;
async
function
openPanel
(
state
=
defaultState
win
=
window
)
{
let
panel
=
IPProtection
.
getPanel
(
win
)
;
panel
.
setState
(
state
)
;
IPProtection
.
openPanel
(
win
)
;
let
panelShownPromise
=
waitForPanelEvent
(
win
.
document
"
popupshown
"
)
;
let
panelInitPromise
=
BrowserTestUtils
.
waitForEvent
(
win
.
document
"
IPProtection
:
Init
"
)
;
await
Promise
.
all
(
[
panelShownPromise
panelInitPromise
]
)
;
let
panelView
=
PanelMultiView
.
getViewNode
(
win
.
document
IPProtectionWidget
.
PANEL_ID
)
;
let
content
=
panelView
.
querySelector
(
IPProtectionPanel
.
CONTENT_TAGNAME
)
;
await
content
.
updateComplete
;
return
content
;
}
async
function
setPanelState
(
state
=
defaultState
win
=
window
)
{
let
panel
=
IPProtection
.
getPanel
(
win
)
;
panel
.
setState
(
state
)
;
let
panelView
=
PanelMultiView
.
getViewNode
(
win
.
document
IPProtectionWidget
.
PANEL_ID
)
;
let
content
=
panelView
.
querySelector
(
IPProtectionPanel
.
CONTENT_TAGNAME
)
;
await
content
.
updateComplete
;
}
async
function
closePanel
(
win
=
window
)
{
let
panel
=
IPProtection
.
getPanel
(
win
)
;
panel
.
setState
(
defaultState
)
;
let
panelHiddenPromise
=
waitForPanelEvent
(
win
.
document
"
popuphidden
"
)
;
panel
.
close
(
)
;
await
panelHiddenPromise
;
}
async
function
withProxyServer
(
testFn
)
{
const
server
=
new
HttpServer
(
)
;
let
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
server
.
registerPathHandler
(
"
/
"
(
request
response
)
=
>
{
if
(
request
.
host
!
=
=
"
example
.
com
"
)
{
throw
HTTP_403
;
}
console
.
log
(
"
Received
request
:
"
request
.
method
request
.
path
)
;
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
write
(
"
hello
world
"
)
;
resolve
(
)
;
}
)
;
server
.
registerPathHandler
(
"
CONNECT
"
(
request
_response
)
=
>
{
console
.
log
(
"
Received
request
:
"
request
.
method
request
.
path
)
;
let
hostHeader
=
request
.
getHeader
(
"
host
"
)
;
Assert
.
equal
(
hostHeader
"
example
.
com
:
443
"
'
Host
header
should
be
"
example
.
com
:
443
"
'
)
;
Assert
.
equal
(
request
.
method
"
CONNECT
"
"
Request
method
should
be
CONNECT
"
)
;
resolve
(
)
;
throw
HTTP_403
;
}
)
;
server
.
identity
.
add
(
"
http
"
"
example
.
com
"
"
80
"
)
;
server
.
identity
.
add
(
"
http
"
"
example
.
com
"
"
443
"
)
;
server
.
start
(
-
1
)
;
await
testFn
(
{
host
:
localhost
port
:
server
.
identity
.
primaryPort
type
:
"
http
"
gotConnection
:
promise
}
)
;
return
server
;
}
