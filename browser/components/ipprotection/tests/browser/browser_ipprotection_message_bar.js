"
use
strict
"
;
const
{
ERRORS
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
browser
/
content
/
ipprotection
/
ipprotection
-
constants
.
mjs
"
)
;
add_task
(
async
function
test_generic_error
(
)
{
let
content
=
await
openPanel
(
{
isSignedIn
:
true
error
:
"
"
}
)
;
let
messageBar
=
content
.
shadowRoot
.
querySelector
(
"
ipprotection
-
message
-
bar
"
)
;
Assert
.
ok
(
!
messageBar
"
Message
bar
should
not
be
present
"
)
;
let
messageBarLoadedPromise
=
BrowserTestUtils
.
waitForMutationCondition
(
content
.
shadowRoot
{
childList
:
true
subtree
:
true
}
(
)
=
>
content
.
shadowRoot
.
querySelector
(
"
ipprotection
-
message
-
bar
"
)
)
;
await
setPanelState
(
{
isSignedIn
:
true
error
:
ERRORS
.
GENERIC
}
)
;
await
messageBarLoadedPromise
;
messageBar
=
content
.
shadowRoot
.
querySelector
(
"
ipprotection
-
message
-
bar
"
)
;
Assert
.
ok
(
messageBar
"
Message
bar
should
be
present
"
)
;
Assert
.
ok
(
messageBar
.
mozMessageBarEl
"
Wrapped
moz
-
message
-
bar
should
be
present
"
)
;
Assert
.
equal
(
messageBar
.
type
ERRORS
.
GENERIC
"
Message
bar
should
be
generic
error
"
)
;
await
closePanel
(
)
;
}
)
;
add_task
(
async
function
test_dismiss
(
)
{
let
content
=
await
openPanel
(
{
isSignedIn
:
true
error
:
"
"
}
)
;
let
messageBar
=
content
.
shadowRoot
.
querySelector
(
"
ipprotection
-
message
-
bar
"
)
;
Assert
.
ok
(
!
messageBar
"
Message
bar
should
not
be
present
"
)
;
let
messageBarLoadedPromise
=
BrowserTestUtils
.
waitForMutationCondition
(
content
.
shadowRoot
{
childList
:
true
subtree
:
true
}
(
)
=
>
content
.
shadowRoot
.
querySelector
(
"
ipprotection
-
message
-
bar
"
)
)
;
await
setPanelState
(
{
isSignedIn
:
true
error
:
ERRORS
.
GENERIC
}
)
;
await
messageBarLoadedPromise
;
messageBar
=
content
.
shadowRoot
.
querySelector
(
"
ipprotection
-
message
-
bar
"
)
;
Assert
.
ok
(
messageBar
"
Message
bar
should
be
present
"
)
;
Assert
.
ok
(
messageBar
.
mozMessageBarEl
"
Wrapped
moz
-
message
-
bar
should
be
present
"
)
;
let
closeButton
=
messageBar
.
mozMessageBarEl
.
closeButton
;
Assert
.
ok
(
closeButton
"
Message
bar
should
have
close
button
"
)
;
let
dismissEvent
=
BrowserTestUtils
.
waitForEvent
(
document
messageBar
.
DISMISS_EVENT
)
;
let
messageBarUnloadedPromise
=
BrowserTestUtils
.
waitForMutationCondition
(
content
.
shadowRoot
{
childList
:
true
subtree
:
true
}
(
)
=
>
!
content
.
shadowRoot
.
querySelector
(
"
ipprotection
-
message
-
bar
"
)
)
;
closeButton
.
click
(
)
;
await
dismissEvent
;
Assert
.
ok
(
true
"
Dismiss
event
was
dispatched
"
)
;
await
messageBarUnloadedPromise
;
Assert
.
ok
(
true
"
Message
bar
should
be
not
be
present
"
)
;
await
closePanel
(
)
;
}
)
;
