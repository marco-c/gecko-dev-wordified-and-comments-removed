"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
IPProtectionWidget
:
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtection
.
sys
.
mjs
"
IPProtectionPanel
:
"
resource
:
/
/
/
modules
/
ipprotection
/
IPProtectionPanel
.
sys
.
mjs
"
}
)
;
add_task
(
async
function
test_header_content
(
)
{
let
button
=
document
.
getElementById
(
lazy
.
IPProtectionWidget
.
WIDGET_ID
)
;
let
panelView
=
PanelMultiView
.
getViewNode
(
document
lazy
.
IPProtectionWidget
.
PANEL_ID
)
;
let
panelShownPromise
=
waitForPanelEvent
(
document
"
popupshown
"
)
;
button
.
click
(
)
;
await
panelShownPromise
;
let
header
=
panelView
.
querySelector
(
lazy
.
IPProtectionPanel
.
CONTENT_TAGNAME
)
.
headerEl
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
header
)
"
ipprotection
-
header
component
should
be
present
"
)
;
Assert
.
ok
(
header
.
experimentBadgeEl
"
ipprotection
-
header
experiment
badge
should
be
present
"
)
;
Assert
.
ok
(
header
.
helpButtonEl
"
ipprotection
-
header
help
button
should
be
present
"
)
;
Assert
.
ok
(
header
.
titleEl
"
ipprotection
-
header
title
should
be
present
"
)
;
let
panelHiddenPromise
=
waitForPanelEvent
(
document
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
panelHiddenPromise
;
}
)
;
add_task
(
async
function
test_help_button
(
)
{
let
button
=
document
.
getElementById
(
lazy
.
IPProtectionWidget
.
WIDGET_ID
)
;
let
panelView
=
PanelMultiView
.
getViewNode
(
document
lazy
.
IPProtectionWidget
.
PANEL_ID
)
;
let
panelShownPromise
=
waitForPanelEvent
(
document
"
popupshown
"
)
;
button
.
click
(
)
;
await
panelShownPromise
;
let
header
=
panelView
.
querySelector
(
lazy
.
IPProtectionPanel
.
CONTENT_TAGNAME
)
.
headerEl
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
header
)
"
ipprotection
-
header
component
should
be
present
"
)
;
let
helpButton
=
header
.
helpButtonEl
;
Assert
.
ok
(
helpButton
"
ipprotection
-
header
help
button
should
be
present
"
)
;
let
helpPageEventPromise
=
BrowserTestUtils
.
waitForEvent
(
document
"
IPProtection
:
ShowHelpPage
"
)
;
helpButton
.
click
(
)
;
await
helpPageEventPromise
;
Assert
.
ok
(
true
"
Got
IPProtection
:
ShowHelpPage
event
"
)
;
let
panelHiddenPromise
=
waitForPanelEvent
(
document
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
panelHiddenPromise
;
}
)
;
