"
use
strict
"
;
const
{
HttpServer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
)
;
const
{
GuardianClient
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
GuardianClient
.
sys
.
mjs
"
)
;
function
makeGuardianServer
(
arg
=
{
enroll
:
(
_request
_response
)
=
>
{
}
}
)
{
const
callbacks
=
{
enroll
:
(
_request
_response
)
=
>
{
}
.
.
.
arg
}
;
const
server
=
new
HttpServer
(
)
;
server
.
registerPathHandler
(
"
/
api
/
v1
/
fpn
/
auth
"
callbacks
.
enroll
)
;
server
.
start
(
-
1
)
;
return
server
;
}
const
testGuardianConfig
=
server
=
>
(
{
withToken
:
async
cb
=
>
cb
(
"
test
-
token
"
)
guardianEndpoint
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
fxaOrigin
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
}
)
;
const
testcases
=
[
{
name
:
"
Successful
enrollment
"
responseURL
:
"
/
oauth
/
success
?
code
=
abc123
"
expects
:
{
ok
:
true
error
:
undefined
}
}
{
name
:
"
Failed
enrollment
-
error
in
success
URL
"
responseURL
:
"
/
oauth
/
success
?
error
=
generic_error
"
expects
:
{
ok
:
false
error
:
"
generic_error
"
}
}
]
;
testcases
.
map
(
(
{
name
responseURL
expects
}
)
=
>
{
return
async
(
)
=
>
{
requestLongerTimeout
(
2
)
;
info
(
Running
test
case
:
{
name
}
)
;
const
server
=
makeGuardianServer
(
{
enroll
:
(
request
response
)
=
>
{
info
(
Handling
enroll
request
redirecting
to
{
responseURL
}
)
;
response
.
setStatusLine
(
request
.
httpVersion
302
"
Found
"
)
;
const
redirectURL
=
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
{
responseURL
}
;
response
.
setHeader
(
"
Location
"
redirectURL
false
)
;
response
.
write
(
"
"
)
;
}
}
)
;
const
client
=
new
GuardianClient
(
testGuardianConfig
(
server
)
)
;
try
{
const
result
=
await
client
.
enroll
(
)
;
Assert
.
equal
(
result
.
ok
expects
.
ok
{
name
}
:
ok
should
be
{
expects
.
ok
}
)
;
if
(
expects
.
error
)
{
Assert
.
equal
(
result
.
error
expects
.
error
{
name
}
:
error
should
be
{
expects
.
error
}
)
;
}
else
{
Assert
.
equal
(
result
.
error
undefined
{
name
}
:
error
should
be
undefined
)
;
}
}
finally
{
server
.
stop
(
)
;
}
}
;
}
)
.
forEach
(
test
=
>
add_task
(
test
)
)
;
