"
use
strict
"
;
async
function
expectFocusAfterKey
(
aKey
aFocus
)
{
let
res
=
aKey
.
match
(
/
^
(
Shift
\
+
)
?
(
.
+
)
/
)
;
let
shift
=
Boolean
(
res
[
1
]
)
;
let
key
;
if
(
res
[
2
]
.
length
=
=
1
)
{
key
=
res
[
2
]
;
}
else
{
key
=
"
KEY_
"
+
res
[
2
]
;
}
info
(
"
Waiting
for
focus
on
"
+
aFocus
.
id
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
aFocus
"
focus
"
)
;
EventUtils
.
synthesizeKey
(
key
{
shiftKey
:
shift
}
)
;
await
focused
;
ok
(
true
aFocus
.
id
+
"
focused
after
"
+
aKey
+
"
pressed
"
)
;
}
add_task
(
async
function
test_keyboard_navigation_in_panel
(
)
{
let
content
=
await
openPanel
(
{
isSignedIn
:
true
}
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
content
)
"
ipprotection
-
content
component
should
be
present
"
)
;
await
expectFocusAfterKey
(
"
Tab
"
content
.
connectionToggleEl
)
;
await
expectFocusAfterKey
(
"
Tab
"
content
.
upgradeEl
.
querySelector
(
"
a
"
)
)
;
await
expectFocusAfterKey
(
"
Tab
"
content
.
upgradeEl
.
querySelector
(
"
#
upgrade
-
vpn
-
button
"
)
)
;
await
expectFocusAfterKey
(
"
Tab
"
content
.
headerEl
.
helpButtonEl
)
;
await
expectFocusAfterKey
(
"
Tab
"
content
.
connectionToggleEl
)
;
await
expectFocusAfterKey
(
"
ArrowDown
"
content
.
upgradeEl
.
querySelector
(
"
a
"
)
)
;
await
expectFocusAfterKey
(
"
ArrowDown
"
content
.
upgradeEl
.
querySelector
(
"
#
upgrade
-
vpn
-
button
"
)
)
;
await
expectFocusAfterKey
(
"
ArrowDown
"
content
.
headerEl
.
helpButtonEl
)
;
await
expectFocusAfterKey
(
"
ArrowDown
"
content
.
connectionToggleEl
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
content
.
headerEl
.
helpButtonEl
)
;
await
closePanel
(
)
;
}
)
;
