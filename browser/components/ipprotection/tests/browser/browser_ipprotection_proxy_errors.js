"
use
strict
"
;
const
{
IPPChannelFilter
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPPChannelFilter
.
sys
.
mjs
"
)
;
const
{
IPPNetworkErrorObserver
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
ipprotection
/
IPPNetworkErrorObserver
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_createConnection_and_proxy
(
)
{
const
failConnect
=
async
(
request
response
)
=
>
{
response
.
setStatusLine
(
request
.
httpVersion
500
"
Error
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
response
.
write
(
"
Error
"
)
;
}
;
await
withProxyServer
(
async
proxyInfo
=
>
{
const
filter
=
IPPChannelFilter
.
create
(
"
"
proxyInfo
.
host
proxyInfo
.
port
proxyInfo
.
type
)
;
filter
.
start
(
)
;
const
observer
=
new
IPPNetworkErrorObserver
(
)
;
const
eventFired
=
new
Promise
(
r
=
>
{
observer
.
addEventListener
(
"
proxy
-
http
-
error
"
e
=
>
{
r
(
e
)
;
}
)
;
}
)
;
observer
.
addIsolationKey
(
filter
.
isolationKey
)
;
observer
.
start
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
https
:
/
/
example
.
com
/
false
)
;
const
{
detail
}
=
await
eventFired
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
Assert
.
equal
(
detail
.
httpStatus
500
)
;
Assert
.
equal
(
detail
.
isolationKey
filter
.
isolationKey
)
;
Assert
.
equal
(
detail
.
level
"
error
"
)
;
}
failConnect
)
;
}
)
;
