const
{
PermissionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PermissionTestUtils
.
jsm
"
)
;
const
TEST_PAGE
=
"
http
:
/
/
example
.
net
"
;
const
uri
=
Services
.
io
.
newURI
(
TEST_PAGE
)
;
async
function
disableCookies
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
false
]
]
}
)
;
Services
.
cookies
.
removeAll
(
)
;
PermissionTestUtils
.
add
(
uri
"
cookie
"
Services
.
perms
.
DENY_ACTION
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
firstPartyDomain
:
"
example
.
com
"
}
)
;
PermissionTestUtils
.
add
(
principal
"
cookie
"
Services
.
perms
.
DENY_ACTION
)
;
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
firstPartyDomain
:
"
example
.
org
"
}
)
;
PermissionTestUtils
.
add
(
principal
"
cookie
"
Services
.
perms
.
DENY_ACTION
)
;
}
async
function
ensureCookieNotSet
(
aBrowser
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
sameSite
.
laxByDefault
"
false
]
]
}
)
;
await
SpecialPowers
.
spawn
(
aBrowser
[
]
async
function
(
)
{
content
.
document
.
cookie
=
"
key
=
value
"
;
Assert
.
equal
(
content
.
document
.
cookie
"
"
"
Setting
/
reading
cookies
should
be
disabled
"
+
"
for
this
domain
for
all
origin
attribute
combinations
.
"
)
;
}
)
;
}
IsolationTestTools
.
runTests
(
TEST_PAGE
ensureCookieNotSet
(
)
=
>
true
disableCookies
)
;
async
function
enableCookies
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
false
]
]
}
)
;
Services
.
cookies
.
removeAll
(
)
;
PermissionTestUtils
.
add
(
uri
"
cookie
"
Services
.
perms
.
ALLOW_ACTION
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
firstPartyDomain
:
"
example
.
com
"
}
)
;
PermissionTestUtils
.
add
(
principal
"
cookie
"
Services
.
perms
.
ALLOW_ACTION
)
;
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
firstPartyDomain
:
"
example
.
org
"
}
)
;
PermissionTestUtils
.
add
(
principal
"
cookie
"
Services
.
perms
.
ALLOW_ACTION
)
;
}
async
function
ensureCookieSet
(
aBrowser
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
sameSite
.
laxByDefault
"
false
]
]
}
)
;
await
SpecialPowers
.
spawn
(
aBrowser
[
]
function
(
)
{
content
.
document
.
cookie
=
"
key
=
value
"
;
Assert
.
equal
(
content
.
document
.
cookie
"
key
=
value
"
"
Setting
/
reading
cookies
should
be
"
+
"
enabled
for
this
domain
for
all
origin
attribute
combinations
.
"
)
;
}
)
;
}
IsolationTestTools
.
runTests
(
TEST_PAGE
ensureCookieSet
(
)
=
>
true
enableCookies
)
;
registerCleanupFunction
(
(
)
=
>
{
SpecialPowers
.
clearUserPref
(
"
network
.
cookie
.
sameSite
.
laxByDefault
"
)
;
Services
.
cookies
.
removeAll
(
)
;
}
)
;
