const
{
classes
:
Cc
Constructor
:
CC
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
defineModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
let
EventUtils
=
{
}
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
const
TEST_SITE
=
"
http
:
/
/
example
.
net
"
;
const
TEST_THIRD_PARTY_SITE
=
"
http
:
/
/
mochi
.
test
:
8888
"
;
const
TEST_PAGE
=
TEST_SITE
+
"
/
browser
/
browser
/
components
/
originattributes
/
"
+
"
test
/
browser
/
file_favicon
.
html
"
;
const
FAVICON_URI
=
TEST_SITE
+
"
/
browser
/
browser
/
components
/
originattributes
/
"
+
"
test
/
browser
/
file_favicon
.
png
"
;
const
TEST_THIRD_PARTY_PAGE
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
components
/
"
+
"
originattributes
/
test
/
browser
/
file_favicon_thirdParty
.
html
"
;
const
THIRD_PARTY_FAVICON_URI
=
TEST_THIRD_PARTY_SITE
+
"
/
browser
/
browser
/
components
/
"
+
"
originattributes
/
test
/
browser
/
file_favicon
.
png
"
;
const
USER_CONTEXT_ID_PERSONAL
=
1
;
const
USER_CONTEXT_ID_WORK
=
2
;
let
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
let
makeURI
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
{
}
)
.
BrowserUtils
.
makeURI
;
function
clearAllImageCaches
(
)
{
var
tools
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
imgITools
)
;
var
imageCache
=
tools
.
getImgCacheForDocument
(
window
.
document
)
;
imageCache
.
clearCache
(
true
)
;
imageCache
.
clearCache
(
false
)
;
}
function
clearAllPlacesFavicons
(
)
{
let
faviconService
=
Cc
[
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
]
.
getService
(
Ci
.
nsIFaviconService
)
;
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
places
-
favicons
-
expired
"
)
{
resolve
(
)
;
Services
.
obs
.
removeObserver
(
observer
"
places
-
favicons
-
expired
"
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
places
-
favicons
-
expired
"
)
;
faviconService
.
expireAllFavicons
(
)
;
}
)
;
}
function
FaviconObserver
(
aUserContextId
aExpectedCookie
aPageURI
aFaviconURL
aOnlyXUL
)
{
this
.
reset
(
aUserContextId
aExpectedCookie
aPageURI
aFaviconURL
aOnlyXUL
)
;
}
FaviconObserver
.
prototype
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
modify
-
request
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
reqLoadInfo
=
httpChannel
.
loadInfo
;
let
loadingPrincipal
;
let
triggeringPrincipal
;
if
(
httpChannel
.
URI
.
spec
!
=
=
this
.
_faviconURL
)
{
return
;
}
if
(
reqLoadInfo
)
{
loadingPrincipal
=
reqLoadInfo
.
loadingPrincipal
;
triggeringPrincipal
=
reqLoadInfo
.
triggeringPrincipal
;
}
is
(
reqLoadInfo
.
originAttributes
.
userContextId
this
.
_curUserContextId
"
The
loadInfo
has
correct
userContextId
"
)
;
if
(
loadingPrincipal
.
equals
(
systemPrincipal
)
)
{
this
.
_faviconReqXUL
=
true
;
ok
(
triggeringPrincipal
.
equals
(
this
.
_expectedPrincipal
)
"
The
triggeringPrincipal
of
favicon
loading
from
XUL
should
be
the
content
principal
.
"
)
;
}
else
{
this
.
_faviconReqPlaces
=
true
;
ok
(
loadingPrincipal
.
equals
(
this
.
_expectedPrincipal
)
"
The
loadingPrincipal
of
favicon
loading
from
Places
should
be
the
content
prinicpal
"
)
;
}
let
faviconCookie
=
httpChannel
.
getRequestHeader
(
"
cookie
"
)
;
is
(
faviconCookie
this
.
_expectedCookie
"
The
cookie
of
the
favicon
loading
is
correct
.
"
)
;
}
else
{
ok
(
false
"
Received
unexpected
topic
:
"
aTopic
)
;
}
if
(
this
.
_faviconReqXUL
&
&
this
.
_faviconReqPlaces
)
{
this
.
_faviconLoaded
.
resolve
(
)
;
}
}
reset
(
aUserContextId
aExpectedCookie
aPageURI
aFaviconURL
aOnlyXUL
)
{
this
.
_curUserContextId
=
aUserContextId
;
this
.
_expectedCookie
=
aExpectedCookie
;
this
.
_expectedPrincipal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
aPageURI
{
userContextId
:
aUserContextId
}
)
;
this
.
_faviconReqXUL
=
false
;
this
.
_faviconReqPlaces
=
aOnlyXUL
=
=
=
true
;
this
.
_faviconURL
=
aFaviconURL
;
this
.
_faviconLoaded
=
new
Promise
.
defer
(
)
;
}
get
promise
(
)
{
return
this
.
_faviconLoaded
.
promise
;
}
}
;
function
waitOnFaviconLoaded
(
aFaviconURL
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
onPageChanged
(
uri
attr
value
id
)
{
if
(
attr
=
=
=
Ci
.
nsINavHistoryObserver
.
ATTRIBUTE_FAVICON
&
&
value
=
=
=
aFaviconURL
)
{
resolve
(
)
;
PlacesUtils
.
history
.
removeObserver
(
observer
false
)
;
}
}
}
;
PlacesUtils
.
history
.
addObserver
(
observer
)
;
}
)
;
}
async
function
generateCookies
(
aHost
)
{
let
cookies
=
[
]
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
)
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
)
;
let
tabInfoA
=
await
openTabInUserContext
(
aHost
USER_CONTEXT_ID_PERSONAL
)
;
let
tabInfoB
=
await
openTabInUserContext
(
aHost
USER_CONTEXT_ID_WORK
)
;
await
ContentTask
.
spawn
(
tabInfoA
.
browser
cookies
[
0
]
async
function
(
value
)
{
content
.
document
.
cookie
=
value
;
}
)
;
await
ContentTask
.
spawn
(
tabInfoB
.
browser
cookies
[
1
]
async
function
(
value
)
{
content
.
document
.
cookie
=
value
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfoA
.
tab
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfoB
.
tab
)
;
return
cookies
;
}
async
function
doTest
(
aTestPage
aFaviconHost
aFaviconURL
)
{
let
cookies
=
await
generateCookies
(
aFaviconHost
)
;
let
pageURI
=
makeURI
(
aTestPage
)
;
let
observer
=
new
FaviconObserver
(
USER_CONTEXT_ID_PERSONAL
cookies
[
0
]
pageURI
aFaviconURL
)
;
let
promiseWaitOnFaviconLoaded
=
waitOnFaviconLoaded
(
aFaviconURL
)
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
let
tabInfo
=
await
openTabInUserContext
(
aTestPage
USER_CONTEXT_ID_PERSONAL
)
;
await
observer
.
promise
;
await
promiseWaitOnFaviconLoaded
;
await
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
observer
.
reset
(
USER_CONTEXT_ID_WORK
cookies
[
1
]
pageURI
aFaviconURL
)
;
tabInfo
=
await
openTabInUserContext
(
aTestPage
USER_CONTEXT_ID_WORK
)
;
await
observer
.
promise
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
}
async
function
doTestForAllTabsFavicon
(
aTestPage
aFaviconHost
aFaviconURL
)
{
let
cookies
=
await
generateCookies
(
aFaviconHost
)
;
let
pageURI
=
makeURI
(
aTestPage
)
;
let
tabBrowser
=
document
.
getElementById
(
"
tabbrowser
-
tabs
"
)
;
let
allTabsBtn
=
document
.
getElementById
(
"
alltabs
-
button
"
)
;
tabBrowser
.
setAttribute
(
"
overflow
"
true
)
;
let
observer
=
new
FaviconObserver
(
USER_CONTEXT_ID_PERSONAL
cookies
[
0
]
pageURI
aFaviconURL
true
)
;
let
promiseWaitOnFaviconLoaded
=
waitOnFaviconLoaded
(
aFaviconURL
)
;
let
tabInfo
=
await
openTabInUserContext
(
aTestPage
USER_CONTEXT_ID_PERSONAL
)
;
await
promiseWaitOnFaviconLoaded
;
clearAllImageCaches
(
)
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
let
allTabsPopupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
allTabsBtn
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
allTabsBtn
{
}
)
;
await
observer
.
promise
;
await
allTabsPopupShownPromise
;
let
allTabsPopupHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
allTabsBtn
"
popuphidden
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
allTabsBtn
{
}
)
;
await
allTabsPopupHiddenPromise
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
promiseWaitOnFaviconLoaded
=
waitOnFaviconLoaded
(
aFaviconURL
)
;
tabInfo
=
await
openTabInUserContext
(
aTestPage
USER_CONTEXT_ID_WORK
)
;
await
promiseWaitOnFaviconLoaded
;
clearAllImageCaches
(
)
;
observer
.
reset
(
USER_CONTEXT_ID_WORK
cookies
[
1
]
pageURI
aFaviconURL
true
)
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
allTabsPopupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
allTabsBtn
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
allTabsBtn
{
}
)
;
await
observer
.
promise
;
await
allTabsPopupShownPromise
;
allTabsPopupHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
allTabsBtn
"
popuphidden
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
allTabsBtn
{
}
)
;
await
allTabsPopupHiddenPromise
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
tabBrowser
.
removeAttribute
(
"
overflow
"
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
privacy
.
userContext
.
enabled
"
true
]
]
}
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
cookies
.
removeAll
(
)
;
clearAllImageCaches
(
)
;
Services
.
cache2
.
clear
(
)
;
clearAllPlacesFavicons
(
)
;
}
)
;
add_task
(
async
function
test_favicon_userContextId
(
)
{
clearAllImageCaches
(
)
;
Services
.
cache2
.
clear
(
)
;
await
clearAllPlacesFavicons
(
)
;
await
doTest
(
TEST_PAGE
TEST_SITE
FAVICON_URI
)
;
}
)
;
add_task
(
async
function
test_thirdPartyFavicon_userContextId
(
)
{
clearAllImageCaches
(
)
;
Services
.
cache2
.
clear
(
)
;
await
clearAllPlacesFavicons
(
)
;
await
doTest
(
TEST_THIRD_PARTY_PAGE
TEST_THIRD_PARTY_SITE
THIRD_PARTY_FAVICON_URI
)
;
}
)
;
add_task
(
async
function
test_allTabs_favicon_userContextId
(
)
{
clearAllImageCaches
(
)
;
Services
.
cache2
.
clear
(
)
;
await
clearAllPlacesFavicons
(
)
;
await
doTestForAllTabsFavicon
(
TEST_PAGE
TEST_SITE
FAVICON_URI
)
;
}
)
;
add_task
(
async
function
test_allTabs_thirdPartyFavicon_userContextId
(
)
{
clearAllImageCaches
(
)
;
Services
.
cache2
.
clear
(
)
;
await
clearAllPlacesFavicons
(
)
;
await
doTestForAllTabsFavicon
(
TEST_THIRD_PARTY_PAGE
TEST_THIRD_PARTY_SITE
THIRD_PARTY_FAVICON_URI
)
;
}
)
;
