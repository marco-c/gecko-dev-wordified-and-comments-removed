add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
setBoolPref
(
"
privacy
.
firstparty
.
isolate
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
signon
.
management
.
page
.
enabled
"
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
privacy
.
firstparty
.
isolate
"
)
;
Services
.
prefs
.
clearUserPref
(
"
signon
.
management
.
page
.
enabled
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_remote_window_open_aboutBlank
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
}
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
Assert
.
ok
(
browser
.
isRemoteBrowser
"
should
be
a
remote
browser
"
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
info
(
"
origin
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
ok
(
content
.
document
.
nodePrincipal
.
isNullPrincipal
"
The
principal
of
remote
about
:
blank
should
be
a
NullPrincipal
.
"
)
;
let
str
=
content
.
document
.
nodePrincipal
.
originNoSuffix
;
let
expectDomain
=
str
.
substring
(
"
moz
-
nullprincipal
:
{
"
.
length
str
.
length
-
1
)
+
"
.
mozilla
"
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
expectDomain
"
remote
about
:
blank
should
have
firstPartyDomain
set
to
"
+
expectDomain
)
;
}
)
;
win
.
close
(
)
;
}
)
;
add_task
(
async
function
test_nonremote_window_open_aboutBlank
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
false
}
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
Assert
.
ok
(
!
browser
.
isRemoteBrowser
"
shouldn
'
t
be
a
remote
browser
"
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
info
(
"
origin
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
ok
(
content
.
document
.
nodePrincipal
.
isNullPrincipal
"
The
principal
of
remote
about
:
blank
should
be
a
NullPrincipal
.
"
)
;
let
str
=
content
.
document
.
nodePrincipal
.
originNoSuffix
;
let
expectDomain
=
str
.
substring
(
"
moz
-
nullprincipal
:
{
"
.
length
str
.
length
-
1
)
+
"
.
mozilla
"
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
expectDomain
"
non
-
remote
about
:
blank
should
have
firstPartyDomain
set
to
"
+
expectDomain
)
;
}
)
;
win
.
close
(
)
;
}
)
;
function
frame_script
(
)
{
content
.
document
.
body
.
innerHTML
=
<
a
href
=
"
data
:
text
/
plain
hello
"
id
=
"
test
"
>
hello
<
/
a
>
;
let
element
=
content
.
document
.
getElementById
(
"
test
"
)
;
element
.
click
(
)
;
}
add_task
(
async
function
test_remote_window_open_data_uri
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
data_uri
.
block_toplevel_data_uri_navigations
"
false
]
]
}
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
}
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
let
mm
=
browser
.
messageManager
;
mm
.
loadFrameScript
(
"
data
:
(
"
+
frame_script
.
toString
(
)
+
"
)
(
)
;
"
true
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
function
(
url
)
{
return
url
=
=
"
data
:
text
/
plain
hello
"
;
}
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
info
(
"
origin
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
ok
(
content
.
document
.
nodePrincipal
.
isNullPrincipal
"
The
principal
of
data
:
document
should
be
a
NullPrincipal
.
"
)
;
Assert
.
ok
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
!
=
"
"
"
data
:
URI
should
have
firstPartyDomain
set
.
"
)
;
}
)
;
win
.
close
(
)
;
}
)
;
add_task
(
async
function
test_remote_window_open_data_uri2
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
}
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
const
DATA_URI
=
data
:
text
/
html
<
iframe
id
=
"
iframe1
"
src
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
test2
.
html
"
>
<
/
iframe
>
;
BrowserTestUtils
.
loadURI
(
browser
DATA_URI
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
true
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
info
(
"
origin
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
let
iframe
=
content
.
document
.
getElementById
(
"
iframe1
"
)
;
info
(
"
iframe
principal
:
"
+
iframe
.
contentDocument
.
nodePrincipal
.
origin
)
;
Assert
.
ok
(
content
.
document
.
nodePrincipal
.
isNullPrincipal
"
The
principal
of
data
:
document
should
be
a
NullPrincipal
.
"
)
;
Assert
.
ok
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
!
=
"
"
"
data
:
URI
should
have
firstPartyDomain
set
.
"
)
;
Assert
.
equal
(
iframe
.
contentDocument
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
"
iframe
should
inherit
firstPartyDomain
from
parent
document
.
"
)
;
Assert
.
equal
(
iframe
.
contentDocument
.
cookie
"
test2
=
foo
"
"
iframe
should
have
cookies
"
)
;
}
)
;
win
.
close
(
)
;
}
)
;
add_task
(
async
function
test_aboutURL
(
)
{
let
aboutURLs
=
[
]
;
let
networkURLs
=
[
"
credits
"
"
logins
"
]
;
for
(
let
cid
in
Cc
)
{
let
result
=
cid
.
match
(
/
mozilla
.
org
\
/
network
\
/
protocol
\
/
about
;
1
\
?
what
\
=
(
.
*
)
/
)
;
if
(
!
result
)
{
continue
;
}
let
aboutType
=
result
[
1
]
;
let
contract
=
"
mozilla
.
org
/
network
/
protocol
/
about
;
1
?
what
=
"
+
aboutType
;
try
{
let
am
=
Cc
[
contract
]
.
getService
(
Ci
.
nsIAboutModule
)
;
let
uri
=
Services
.
io
.
newURI
(
"
about
:
"
+
aboutType
)
;
let
flags
=
am
.
getURIFlags
(
uri
)
;
if
(
flags
&
Ci
.
nsIAboutModule
.
URI_SAFE_FOR_UNTRUSTED_CONTENT
&
&
!
(
flags
&
Ci
.
nsIAboutModule
.
HIDE_FROM_ABOUTABOUT
)
&
&
!
networkURLs
.
includes
(
aboutType
)
&
&
aboutType
!
=
=
"
newtab
"
&
&
aboutType
!
=
=
"
protections
"
)
{
aboutURLs
.
push
(
aboutType
)
;
}
}
catch
(
e
)
{
}
}
for
(
let
url
of
aboutURLs
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
"
+
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
let
attrs
=
{
firstPartyDomain
:
"
about
.
ef2a7dd5
-
93bc
-
417f
-
a698
-
142c3116864f
.
mozilla
"
}
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
attrs
url
}
async
function
(
args
)
{
info
(
"
loading
page
about
:
"
+
args
.
url
+
"
origin
is
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
info
(
"
principal
"
+
content
.
document
.
nodePrincipal
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
args
.
attrs
.
firstPartyDomain
"
The
about
page
should
have
firstPartyDomain
set
"
)
;
Assert
.
ok
(
content
.
document
.
nodePrincipal
.
isContentPrincipal
"
The
principal
should
be
a
content
principal
.
"
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
}
)
;
