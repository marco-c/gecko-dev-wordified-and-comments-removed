const
{
classes
:
Cc
Constructor
:
CC
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
const
FIRST_PARTY_ONE
=
"
example
.
com
"
;
const
FIRST_PARTY_TWO
=
"
example
.
org
"
;
const
THIRD_PARTY
=
"
mochi
.
test
:
8888
"
;
const
TEST_SITE_ONE
=
"
http
:
/
/
"
+
FIRST_PARTY_ONE
;
const
TEST_SITE_TWO
=
"
http
:
/
/
"
+
FIRST_PARTY_TWO
;
const
THIRD_PARTY_SITE
=
"
http
:
/
/
"
+
THIRD_PARTY
;
const
TEST_DIRECTORY
=
"
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
"
;
const
TEST_PAGE
=
TEST_DIRECTORY
+
"
file_favicon
.
html
"
;
const
TEST_THIRD_PARTY_PAGE
=
TEST_DIRECTORY
+
"
file_favicon_thirdParty
.
html
"
;
const
TEST_CACHE_PAGE
=
TEST_DIRECTORY
+
"
file_favicon_cache
.
html
"
;
const
FAVICON_URI
=
TEST_DIRECTORY
+
"
file_favicon
.
png
"
;
const
TEST_FAVICON_CACHE_URI
=
TEST_DIRECTORY
+
"
file_favicon_cache
.
png
"
;
let
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
let
makeURI
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
{
}
)
.
BrowserUtils
.
makeURI
;
function
clearAllImageCaches
(
)
{
let
tools
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
imgITools
)
;
let
imageCache
=
tools
.
getImgCacheForDocument
(
window
.
document
)
;
imageCache
.
clearCache
(
true
)
;
imageCache
.
clearCache
(
false
)
;
}
function
clearAllPlacesFavicons
(
)
{
let
faviconService
=
Cc
[
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
]
.
getService
(
Ci
.
nsIFaviconService
)
;
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
places
-
favicons
-
expired
"
)
{
resolve
(
)
;
Services
.
obs
.
removeObserver
(
observer
"
places
-
favicons
-
expired
"
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
places
-
favicons
-
expired
"
)
;
faviconService
.
expireAllFavicons
(
)
;
}
)
;
}
function
observeFavicon
(
aFirstPartyDomain
aExpectedCookie
aPageURI
)
{
let
faviconReqXUL
=
false
;
let
faviconReqPlaces
=
false
;
let
expectedPrincipal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
aPageURI
{
firstPartyDomain
:
aFirstPartyDomain
}
)
;
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
modify
-
request
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
reqLoadInfo
=
httpChannel
.
loadInfo
;
let
loadingPrincipal
=
reqLoadInfo
.
loadingPrincipal
;
let
triggeringPrincipal
=
reqLoadInfo
.
triggeringPrincipal
;
if
(
!
httpChannel
.
URI
.
spec
.
endsWith
(
FAVICON_URI
)
)
{
return
;
}
is
(
reqLoadInfo
.
originAttributes
.
firstPartyDomain
aFirstPartyDomain
"
The
loadInfo
has
correct
first
party
domain
"
)
;
if
(
loadingPrincipal
.
equals
(
systemPrincipal
)
)
{
faviconReqXUL
=
true
;
ok
(
triggeringPrincipal
.
equals
(
expectedPrincipal
)
"
The
triggeringPrincipal
of
favicon
loading
from
XUL
should
be
the
content
principal
.
"
)
;
}
else
{
faviconReqPlaces
=
true
;
ok
(
loadingPrincipal
.
equals
(
expectedPrincipal
)
"
The
loadingPrincipal
of
favicon
loading
from
Places
should
be
the
content
prinicpal
"
)
;
}
let
faviconCookie
=
httpChannel
.
getRequestHeader
(
"
cookie
"
)
;
is
(
faviconCookie
aExpectedCookie
"
The
cookie
of
the
favicon
loading
is
correct
.
"
)
;
}
else
{
ok
(
false
"
Received
unexpected
topic
:
"
aTopic
)
;
}
if
(
faviconReqXUL
&
&
faviconReqPlaces
)
{
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
resolve
(
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
}
)
;
}
function
waitOnFaviconResponse
(
aFaviconURL
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
examine
-
response
"
|
|
aTopic
=
=
=
"
http
-
on
-
examine
-
cached
-
response
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
loadInfo
=
httpChannel
.
loadInfo
;
if
(
httpChannel
.
URI
.
spec
!
=
=
aFaviconURL
)
{
return
;
}
let
result
=
{
topic
:
aTopic
firstPartyDomain
:
loadInfo
.
originAttributes
.
firstPartyDomain
}
;
resolve
(
result
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
cached
-
response
"
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
cached
-
response
"
)
;
}
)
;
}
function
waitOnFaviconLoaded
(
aFaviconURL
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
onPageChanged
(
uri
attr
value
id
)
{
if
(
attr
=
=
=
Ci
.
nsINavHistoryObserver
.
ATTRIBUTE_FAVICON
&
&
value
=
=
=
aFaviconURL
)
{
resolve
(
)
;
PlacesUtils
.
history
.
removeObserver
(
observer
false
)
;
}
}
}
;
PlacesUtils
.
history
.
addObserver
(
observer
)
;
}
)
;
}
async
function
openTab
(
aURL
)
{
let
tab
=
gBrowser
.
addTab
(
aURL
)
;
gBrowser
.
selectedTab
=
tab
;
tab
.
ownerGlobal
.
focus
(
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
return
{
tab
browser
}
;
}
async
function
assignCookiesUnderFirstParty
(
aURL
aFirstParty
aCookieValue
)
{
let
tabInfo
=
await
openTabInFirstParty
(
aURL
aFirstParty
)
;
await
ContentTask
.
spawn
(
tabInfo
.
browser
aCookieValue
async
function
(
value
)
{
content
.
document
.
cookie
=
value
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
}
function
*
generateCookies
(
aThirdParty
)
{
let
cookies
=
[
]
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
)
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
)
;
let
firstSiteURL
;
let
secondSiteURL
;
if
(
aThirdParty
)
{
firstSiteURL
=
THIRD_PARTY_SITE
;
secondSiteURL
=
THIRD_PARTY_SITE
;
}
else
{
firstSiteURL
=
TEST_SITE_ONE
;
secondSiteURL
=
TEST_SITE_TWO
;
}
yield
assignCookiesUnderFirstParty
(
firstSiteURL
TEST_SITE_ONE
cookies
[
0
]
)
;
yield
assignCookiesUnderFirstParty
(
secondSiteURL
TEST_SITE_TWO
cookies
[
1
]
)
;
return
cookies
;
}
async
function
doTest
(
aTestPage
aExpectedCookies
aFaviconURL
)
{
let
firstPageURI
=
makeURI
(
TEST_SITE_ONE
+
aTestPage
)
;
let
secondPageURI
=
makeURI
(
TEST_SITE_TWO
+
aTestPage
)
;
let
promiseFaviconLoaded
=
waitOnFaviconLoaded
(
aFaviconURL
)
;
let
promiseObserveFavicon
=
observeFavicon
(
FIRST_PARTY_ONE
aExpectedCookies
[
0
]
firstPageURI
)
;
let
tabInfo
=
await
openTab
(
TEST_SITE_ONE
+
aTestPage
)
;
await
promiseObserveFavicon
;
await
promiseFaviconLoaded
;
await
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
promiseObserveFavicon
=
observeFavicon
(
FIRST_PARTY_TWO
aExpectedCookies
[
1
]
secondPageURI
)
;
tabInfo
=
await
openTab
(
TEST_SITE_TWO
+
aTestPage
)
;
await
promiseObserveFavicon
;
await
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
privacy
.
firstparty
.
isolate
"
true
]
]
}
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
let
cookieMgr
=
Cc
[
"
mozilla
.
org
/
cookiemanager
;
1
"
]
.
getService
(
Ci
.
nsICookieManager
)
;
cookieMgr
.
removeAll
(
)
;
clearAllImageCaches
(
)
;
let
networkCache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
networkCache
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_favicon_firstParty
(
)
{
for
(
let
testThirdParty
of
[
false
true
]
)
{
clearAllImageCaches
(
)
;
let
networkCache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
networkCache
.
clear
(
)
;
await
clearAllPlacesFavicons
(
)
;
let
cookies
=
await
generateCookies
(
testThirdParty
)
;
if
(
testThirdParty
)
{
await
doTest
(
TEST_THIRD_PARTY_PAGE
cookies
THIRD_PARTY_SITE
+
FAVICON_URI
)
;
}
else
{
await
doTest
(
TEST_PAGE
cookies
TEST_SITE_ONE
+
FAVICON_URI
)
;
}
}
}
)
;
add_task
(
async
function
test_favicon_cache_firstParty
(
)
{
clearAllImageCaches
(
)
;
let
networkCache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
networkCache
.
clear
(
)
;
let
promiseForFaviconLoaded
=
waitOnFaviconLoaded
(
THIRD_PARTY_SITE
+
TEST_FAVICON_CACHE_URI
)
;
let
responsePromise
=
waitOnFaviconResponse
(
THIRD_PARTY_SITE
+
TEST_FAVICON_CACHE_URI
)
;
let
tabInfoA
=
await
openTab
(
TEST_SITE_ONE
+
TEST_CACHE_PAGE
)
;
let
response
=
await
responsePromise
;
is
(
response
.
topic
"
http
-
on
-
examine
-
response
"
"
The
favicon
image
should
be
loaded
through
network
.
"
)
;
is
(
response
.
firstPartyDomain
FIRST_PARTY_ONE
"
We
should
only
observe
the
network
response
for
the
first
first
party
.
"
)
;
await
promiseForFaviconLoaded
;
let
tabInfoB
=
await
openTab
(
TEST_SITE_ONE
+
TEST_CACHE_PAGE
)
;
let
promiseForFaviconResponse
=
waitOnFaviconResponse
(
THIRD_PARTY_SITE
+
TEST_FAVICON_CACHE_URI
)
;
let
tabInfoC
=
await
openTab
(
TEST_SITE_TWO
+
TEST_CACHE_PAGE
)
;
response
=
await
promiseForFaviconResponse
;
is
(
response
.
topic
"
http
-
on
-
examine
-
response
"
"
The
favicon
image
should
be
loaded
through
network
again
.
"
)
;
is
(
response
.
firstPartyDomain
FIRST_PARTY_TWO
"
We
should
only
observe
the
network
response
for
the
second
first
party
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfoA
.
tab
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfoB
.
tab
)
;
await
BrowserTestUtils
.
removeTab
(
tabInfoC
.
tab
)
;
}
)
;
