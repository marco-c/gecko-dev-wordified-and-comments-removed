const
FPD_ONE
=
"
http
:
/
/
example
.
com
"
;
const
FPD_TWO
=
"
http
:
/
/
example
.
org
"
;
const
TEST_BASE
=
"
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
"
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
firstparty
.
isolate
"
true
]
]
}
)
;
}
)
;
async
function
runTestWithOptions
(
aDifferentFPD
aStarTargetOrigin
aBlockAcrossFPD
)
{
let
testPageURL
=
aDifferentFPD
?
FPD_ONE
+
TEST_BASE
+
"
file_postMessage
.
html
"
:
FPD_TWO
+
TEST_BASE
+
"
file_postMessage
.
html
"
;
let
targetOrigin
;
if
(
aStarTargetOrigin
)
{
targetOrigin
=
"
*
"
;
}
else
{
targetOrigin
=
aDifferentFPD
?
FPD_ONE
:
FPD_TWO
;
}
let
senderURL
=
FPD_TWO
+
TEST_BASE
+
file_postMessageSender
.
html
?
{
targetOrigin
}
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testPageURL
)
;
let
senderTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
senderURL
true
)
;
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
senderURL
]
aSenderPath
=
>
{
content
.
open
(
aSenderPath
"
_blank
"
)
;
}
)
;
let
senderTab
=
await
senderTabPromise
;
let
shouldBlock
=
aDifferentFPD
&
&
(
!
aStarTargetOrigin
|
|
aBlockAcrossFPD
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
shouldBlock
]
async
aValue
=
>
{
await
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
message
"
async
function
eventHandler
(
aEvent
)
{
if
(
aEvent
.
data
=
=
=
"
Self
"
)
{
let
display
=
content
.
document
.
getElementById
(
"
display
"
)
;
if
(
aValue
)
{
Assert
.
equal
(
display
.
innerHTML
"
"
"
It
should
not
get
a
message
from
other
OA
.
"
)
;
}
else
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
display
.
innerHTML
=
=
"
Message
"
"
Wait
for
message
to
arrive
"
)
;
Assert
.
equal
(
display
.
innerHTML
"
Message
"
"
It
should
get
a
message
from
the
same
OA
.
"
)
;
}
content
.
removeEventListener
(
"
message
"
eventHandler
)
;
resolve
(
)
;
}
}
)
;
content
.
document
.
getElementById
(
"
button
"
)
.
click
(
)
;
}
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
senderTab
)
;
}
add_task
(
async
function
runTests
(
)
{
for
(
let
useDifferentFPD
of
[
true
false
]
)
{
for
(
let
useStarTargetOrigin
of
[
true
false
]
)
{
for
(
let
enableBlocking
of
[
true
false
]
)
{
if
(
enableBlocking
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
firstparty
.
isolate
.
block_post_message
"
true
]
]
}
)
;
}
await
runTestWithOptions
(
useDifferentFPD
useStarTargetOrigin
enableBlocking
)
;
if
(
enableBlocking
)
{
await
SpecialPowers
.
popPrefEnv
(
)
;
}
}
}
}
}
)
;
