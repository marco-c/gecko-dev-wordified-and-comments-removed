const
BASE_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
"
;
const
EXAMPLE_BASE_URL
=
BASE_URL
.
replace
(
"
mochi
.
test
:
8888
"
"
example
.
com
"
)
;
const
BASE_DOMAIN
=
"
mochi
.
test
"
;
add_setup
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
privacy
.
firstparty
.
isolate
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
security
.
https_first
"
false
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
privacy
.
firstparty
.
isolate
"
)
;
Services
.
prefs
.
clearUserPref
(
"
dom
.
security
.
https_first
"
)
;
Services
.
cookies
.
removeAll
(
)
;
Services
.
cache2
.
clear
(
)
;
}
)
;
}
)
;
add_task
(
async
function
principal_test
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
test_firstParty
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
true
function
(
url
)
{
return
url
=
=
BASE_URL
+
"
test_firstParty
.
html
"
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
firstPartyDomain
:
BASE_DOMAIN
}
]
async
function
(
attrs
)
{
Assert
.
ok
(
true
"
document
principal
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
equal
(
content
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
"
"
"
top
-
level
docShell
shouldn
'
t
have
firstPartyDomain
attribute
.
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
attrs
.
firstPartyDomain
"
The
document
should
have
firstPartyDomain
"
)
;
for
(
let
i
=
1
;
i
<
4
;
i
+
+
)
{
let
iframe
=
content
.
document
.
getElementById
(
"
iframe
"
+
i
)
;
await
SpecialPowers
.
spawn
(
iframe
[
attrs
.
firstPartyDomain
]
function
(
firstPartyDomain
)
{
Assert
.
ok
(
true
"
iframe
principal
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
equal
(
content
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
firstPartyDomain
"
iframe
'
s
docshell
should
have
firstPartyDomain
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
firstPartyDomain
"
iframe
should
have
firstPartyDomain
"
)
;
}
)
;
}
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
cookie_test
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
test_firstParty_cookie
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
true
)
;
let
count
=
0
;
for
(
let
cookie
of
Services
.
cookies
.
cookies
)
{
count
+
+
;
Assert
.
equal
(
cookie
.
value
"
foo
"
"
Cookie
value
should
be
foo
"
)
;
Assert
.
equal
(
cookie
.
originAttributes
.
firstPartyDomain
BASE_DOMAIN
"
Cookie
'
s
origin
attributes
should
be
"
+
BASE_DOMAIN
)
;
}
Assert
.
equal
(
count
2
"
Should
have
two
cookies
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
redirect_test
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
test_firstParty_http_redirect
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
firstPartyDomain
:
"
example
.
com
"
}
]
async
function
(
attrs
)
{
Assert
.
ok
(
true
"
document
principal
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
ok
(
true
"
document
uri
:
"
+
content
.
document
.
documentURI
)
;
Assert
.
equal
(
content
.
document
.
documentURI
"
http
:
/
/
example
.
com
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
dummy
.
html
"
"
The
page
should
have
been
redirected
to
http
:
/
/
example
.
com
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
dummy
.
html
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
attrs
.
firstPartyDomain
"
The
document
should
have
firstPartyDomain
"
)
;
}
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
test_firstParty_html_redirect
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
false
function
(
url
)
{
return
url
=
=
"
http
:
/
/
example
.
com
/
"
;
}
)
;
await
SpecialPowers
.
spawn
(
tab2
.
linkedBrowser
[
{
firstPartyDomain
:
"
example
.
com
"
}
]
async
function
(
attrs
)
{
Assert
.
ok
(
true
"
2nd
tab
document
principal
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
ok
(
true
"
2nd
tab
document
uri
:
"
+
content
.
document
.
documentURI
)
;
Assert
.
equal
(
content
.
document
.
documentURI
"
http
:
/
/
example
.
com
/
"
"
The
page
should
have
been
redirected
to
http
:
/
/
example
.
com
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
attrs
.
firstPartyDomain
"
The
document
should
have
firstPartyDomain
"
)
;
}
)
;
let
tab3
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
test_firstParty_iframe_http_redirect
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab3
.
linkedBrowser
true
function
(
url
)
{
return
url
=
=
BASE_URL
+
"
test_firstParty_iframe_http_redirect
.
html
"
;
}
)
;
await
SpecialPowers
.
spawn
(
tab3
.
linkedBrowser
[
{
firstPartyDomain
:
"
mochi
.
test
"
}
]
async
function
(
attrs
)
{
let
iframe
=
content
.
document
.
getElementById
(
"
iframe1
"
)
;
SpecialPowers
.
spawn
(
iframe
[
attrs
.
firstPartyDomain
]
function
(
firstPartyDomain
)
{
Assert
.
ok
(
true
"
iframe
document
principal
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
ok
(
true
"
iframe
document
uri
:
"
+
content
.
document
.
documentURI
)
;
Assert
.
equal
(
content
.
document
.
documentURI
"
http
:
/
/
example
.
com
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
dummy
.
html
"
"
The
page
should
have
been
redirected
to
http
:
/
/
example
.
com
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
dummy
.
html
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
firstPartyDomain
"
The
iframe
should
have
firstPartyDomain
:
"
+
firstPartyDomain
)
;
}
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
gBrowser
.
removeTab
(
tab2
)
;
gBrowser
.
removeTab
(
tab3
)
;
}
)
;
add_task
(
async
function
postMessage_test
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
test_firstParty_postMessage
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
true
function
(
url
)
{
return
url
=
=
BASE_URL
+
"
dummy
.
html
"
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
Assert
.
ok
(
true
"
document
principal
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
let
value
=
content
.
document
.
getElementById
(
"
message
"
)
.
textContent
;
Assert
.
equal
(
value
"
OK
"
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
openWindow_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
link
.
open_newwindow
"
2
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
window
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
firstPartyDomain
:
"
mochi
.
test
"
}
]
async
function
(
attrs
)
{
let
promise
=
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
message
"
resolve
{
once
:
true
}
)
;
}
)
;
let
w
=
Cu
.
unwaiveXrays
(
content
.
wrappedJSObject
.
open
(
)
)
;
w
.
document
.
body
.
innerHTML
=
<
iframe
id
=
'
iframe1
'
onload
=
"
window
.
opener
.
postMessage
(
'
ready
'
'
*
'
)
;
"
src
=
'
data
:
text
/
plain
test2
'
>
<
/
iframe
>
;
await
promise
;
Assert
.
equal
(
w
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
attrs
.
firstPartyDomain
"
window
.
open
(
)
should
have
correct
firstPartyDomain
attribute
"
)
;
Assert
.
equal
(
w
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
attrs
.
firstPartyDomain
"
The
document
should
have
correct
firstPartyDomain
"
)
;
let
iframe
=
w
.
document
.
getElementById
(
"
iframe1
"
)
;
await
SpecialPowers
.
spawn
(
iframe
[
attrs
.
firstPartyDomain
]
function
(
firstPartyDomain
)
{
Assert
.
equal
(
content
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
firstPartyDomain
"
iframe
'
s
docshell
should
have
correct
rirstPartyDomain
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
firstPartyDomain
"
iframe
should
have
correct
firstPartyDomain
"
)
;
}
)
;
w
.
close
(
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
window_open_redirect_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
link
.
open_newwindow
"
2
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
window_redirect
.
html
"
)
;
let
win
=
await
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
BASE_URL
+
"
dummy
.
html
"
}
)
;
await
SpecialPowers
.
spawn
(
win
.
gBrowser
.
selectedBrowser
[
{
firstPartyDomain
:
"
mochi
.
test
"
}
]
async
function
(
attrs
)
{
Assert
.
equal
(
content
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
attrs
.
firstPartyDomain
"
window
.
open
(
)
should
have
firstPartyDomain
attribute
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
attrs
.
firstPartyDomain
"
The
document
should
have
firstPartyDomain
"
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
window_open_iframe_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
link
.
open_newwindow
"
2
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
window2
.
html
"
)
;
let
url
=
EXAMPLE_BASE_URL
+
"
test_firstParty
.
html
"
;
info
(
"
Waiting
for
window
with
url
"
+
url
)
;
let
win
=
await
BrowserTestUtils
.
waitForNewWindow
(
{
url
}
)
;
await
SpecialPowers
.
spawn
(
win
.
gBrowser
.
selectedBrowser
[
{
firstPartyDomain
:
"
mochi
.
test
"
}
]
async
function
(
attrs
)
{
Assert
.
equal
(
content
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
attrs
.
firstPartyDomain
"
window
.
open
(
)
should
have
firstPartyDomain
attribute
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
"
example
.
com
"
"
The
document
should
have
firstPartyDomain
"
)
;
let
iframe
=
content
.
document
.
getElementById
(
"
iframe1
"
)
;
SpecialPowers
.
spawn
(
iframe
[
]
function
(
)
{
Assert
.
equal
(
content
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
"
example
.
com
"
"
iframe
'
s
docshell
should
have
firstPartyDomain
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
"
example
.
com
"
"
iframe
should
have
firstPartyDomain
"
)
;
}
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
form_test
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
test_form
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
firstPartyDomain
:
"
mochi
.
test
"
}
]
async
function
(
attrs
)
{
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
attrs
.
firstPartyDomain
"
The
document
should
have
firstPartyDomain
"
)
;
let
submit
=
content
.
document
.
getElementById
(
"
submit
"
)
;
submit
.
click
(
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
window_open_form_test
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
link
.
open_newwindow
"
2
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
BASE_URL
+
"
window3
.
html
"
)
;
let
url
=
EXAMPLE_BASE_URL
+
"
test_form
.
html
"
;
info
(
"
Waiting
for
window
with
url
"
+
url
)
;
let
win
=
await
BrowserTestUtils
.
waitForNewWindow
(
{
url
}
)
;
await
SpecialPowers
.
spawn
(
win
.
gBrowser
.
selectedBrowser
[
{
firstPartyDomain
:
"
mochi
.
test
"
}
]
async
function
(
attrs
)
{
Assert
.
equal
(
content
.
docShell
.
getOriginAttributes
(
)
.
firstPartyDomain
attrs
.
firstPartyDomain
"
window
.
open
(
)
should
have
firstPartyDomain
attribute
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
"
example
.
com
"
"
The
document
should
have
firstPartyDomain
"
)
;
let
submit
=
content
.
document
.
getElementById
(
"
submit
"
)
;
submit
.
click
(
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
ip_address_test
(
)
{
const
ipAddr
=
"
127
.
0
.
0
.
1
"
;
const
ipHost
=
http
:
/
/
{
ipAddr
}
/
browser
/
browser
/
components
/
originattributes
/
test
/
browser
/
;
Services
.
prefs
.
setBoolPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
allow_hijacking_localhost
"
)
;
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
ipHost
+
"
test_firstParty
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
true
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
{
firstPartyDomain
:
ipAddr
}
]
async
function
(
attrs
)
{
Assert
.
ok
(
true
"
document
principal
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
firstPartyDomain
attrs
.
firstPartyDomain
"
The
firstPartyDomain
should
be
set
properly
for
the
IP
address
"
)
;
}
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
