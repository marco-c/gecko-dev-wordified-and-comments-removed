requestLongerTimeout
(
2
)
;
let
{
HttpServer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
const
NUM_ISOLATION_LOADS
=
2
;
const
NUM_CACHED_LOADS
=
1
;
let
gHits
=
0
;
let
server
=
new
HttpServer
(
)
;
server
.
registerPathHandler
(
"
/
image
.
png
"
imageHandler
)
;
server
.
registerPathHandler
(
"
/
file
.
html
"
fileHandler
)
;
server
.
start
(
-
1
)
;
let
rcwnEnabled
=
Services
.
prefs
.
getBoolPref
(
"
network
.
http
.
rcwn
.
enabled
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
rcwn
.
enabled
"
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
network
.
http
.
rcwn
.
enabled
"
rcwnEnabled
)
;
server
.
stop
(
(
)
=
>
{
server
=
null
;
}
)
;
}
)
;
let
BASE_URI
=
"
http
:
/
/
localhost
:
"
+
server
.
identity
.
primaryPort
;
let
IMAGE_URI
=
BASE_URI
+
"
/
image
.
png
"
;
let
FILE_URI
=
BASE_URI
+
"
/
file
.
html
"
;
function
imageHandler
(
metadata
response
)
{
info
(
"
XXX
:
loading
image
from
server
"
)
;
gHits
+
+
;
response
.
setHeader
(
"
Cache
-
Control
"
"
max
-
age
=
10000
"
false
)
;
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
image
/
png
"
false
)
;
var
body
=
"
iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAEUlEQVQImWP4z8AAQTAamQkAhpcI
+
DeMzFcAAAAASUVORK5CYII
=
"
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
fileHandler
(
metadata
response
)
{
response
.
setStatusLine
(
metadata
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
text
/
html
"
false
)
;
let
body
=
<
html
>
<
body
>
<
image
src
=
{
IMAGE_URI
}
>
<
/
body
>
<
/
html
>
;
response
.
bodyOutputStream
.
write
(
body
body
.
length
)
;
}
function
doBefore
(
)
{
info
(
"
XXX
resetting
gHits
"
)
;
gHits
=
0
;
info
(
"
XXX
clearing
image
cache
"
)
;
let
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
imageCache
.
clearCache
(
true
)
;
imageCache
.
clearCache
(
false
)
;
info
(
"
XXX
clearning
network
cache
"
)
;
Services
.
cache2
.
clear
(
)
;
}
function
doTest
(
aBrowser
)
{
return
0
;
}
function
doCheck
(
shouldIsolate
a
b
)
{
info
(
XXX
check
:
gHits
=
=
{
gHits
}
shouldIsolate
=
=
{
shouldIsolate
}
)
;
return
shouldIsolate
?
gHits
=
=
NUM_ISOLATION_LOADS
:
gHits
=
=
NUM_CACHED_LOADS
;
}
IsolationTestTools
.
runTests
(
FILE_URI
doTest
doCheck
doBefore
)
;
