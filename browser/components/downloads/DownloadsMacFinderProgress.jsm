"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DownloadsMacFinderProgress
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Downloads
:
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
}
)
;
var
DownloadsMacFinderProgress
=
{
_finderProgresses
:
null
register
(
)
{
if
(
!
this
.
_finderProgresses
)
{
this
.
_finderProgresses
=
new
Map
(
)
;
Downloads
.
getList
(
Downloads
.
ALL
)
.
then
(
list
=
>
list
.
addView
(
this
)
)
;
}
}
onDownloadAdded
(
download
)
{
if
(
download
.
stopped
)
{
return
;
}
let
finderProgress
=
Cc
[
"
mozilla
.
org
/
widget
/
macfinderprogress
;
1
"
]
.
createInstance
(
Ci
.
nsIMacFinderProgress
)
;
let
path
=
download
.
target
.
path
;
finderProgress
.
init
(
path
(
)
=
>
{
download
.
cancel
(
)
.
catch
(
Cu
.
reportError
)
;
download
.
removePartialData
(
)
.
catch
(
Cu
.
reportError
)
;
}
)
;
if
(
download
.
hasProgress
)
{
finderProgress
.
updateProgress
(
download
.
currentBytes
download
.
totalBytes
)
;
}
else
{
finderProgress
.
updateProgress
(
0
0
)
;
}
this
.
_finderProgresses
.
set
(
path
finderProgress
)
;
}
onDownloadChanged
(
download
)
{
let
path
=
download
.
target
.
path
;
let
finderProgress
=
this
.
_finderProgresses
.
get
(
path
)
;
if
(
!
finderProgress
)
{
this
.
onDownloadAdded
(
download
)
;
}
else
if
(
download
.
stopped
)
{
finderProgress
.
end
(
)
;
this
.
_finderProgresses
.
delete
(
path
)
;
}
else
{
finderProgress
.
updateProgress
(
download
.
currentBytes
download
.
totalBytes
)
;
}
}
}
;
