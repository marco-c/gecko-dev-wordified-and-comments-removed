"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DownloadsTaskbar
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
Downloads
:
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gWinTaskbar
"
function
(
)
{
if
(
!
(
"
mozilla
.
org
/
windows
-
taskbar
;
1
"
in
Cc
)
)
{
return
null
;
}
let
winTaskbar
=
Cc
[
"
mozilla
.
org
/
windows
-
taskbar
;
1
"
]
.
getService
(
Ci
.
nsIWinTaskbar
)
;
return
winTaskbar
.
available
&
&
winTaskbar
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gMacTaskbarProgress
"
function
(
)
{
return
(
"
mozilla
.
org
/
widget
/
macdocksupport
;
1
"
in
Cc
&
&
Cc
[
"
mozilla
.
org
/
widget
/
macdocksupport
;
1
"
]
.
getService
(
Ci
.
nsITaskbarProgress
)
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gGtkTaskbarProgress
"
function
(
)
{
return
(
"
mozilla
.
org
/
widget
/
taskbarprogress
/
gtk
;
1
"
in
Cc
&
&
Cc
[
"
mozilla
.
org
/
widget
/
taskbarprogress
/
gtk
;
1
"
]
.
getService
(
Ci
.
nsIGtkTaskbarProgress
)
)
;
}
)
;
var
DownloadsTaskbar
=
{
_summary
:
null
_taskbarProgress
:
null
registerIndicator
(
aBrowserWindow
)
{
if
(
!
this
.
_taskbarProgress
)
{
if
(
gMacTaskbarProgress
)
{
this
.
_taskbarProgress
=
gMacTaskbarProgress
;
Services
.
obs
.
addObserver
(
(
)
=
>
{
this
.
_taskbarProgress
=
null
;
gMacTaskbarProgress
=
null
;
}
"
quit
-
application
-
granted
"
)
;
}
else
if
(
gWinTaskbar
)
{
this
.
_attachIndicator
(
aBrowserWindow
)
;
}
else
if
(
gGtkTaskbarProgress
)
{
this
.
_taskbarProgress
=
gGtkTaskbarProgress
;
this
.
_attachGtkTaskbarProgress
(
aBrowserWindow
)
;
}
else
{
return
;
}
}
if
(
!
this
.
_summary
)
{
Downloads
.
getSummary
(
Downloads
.
ALL
)
.
then
(
summary
=
>
{
if
(
this
.
_summary
)
{
return
undefined
;
}
this
.
_summary
=
summary
;
return
this
.
_summary
.
addView
(
this
)
;
}
)
.
catch
(
Cu
.
reportError
)
;
}
}
_attachIndicator
(
aWindow
)
{
let
{
docShell
}
=
aWindow
.
browsingContext
.
topChromeWindow
;
this
.
_taskbarProgress
=
gWinTaskbar
.
getTaskbarProgress
(
docShell
)
;
if
(
this
.
_summary
)
{
this
.
onSummaryChanged
(
)
;
}
aWindow
.
addEventListener
(
"
unload
"
(
)
=
>
{
let
browserWindow
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
browserWindow
)
{
this
.
_attachIndicator
(
browserWindow
)
;
}
else
{
this
.
_taskbarProgress
=
null
;
}
}
)
;
}
_attachGtkTaskbarProgress
(
aWindow
)
{
this
.
_taskbarProgress
.
setPrimaryWindow
(
aWindow
)
;
if
(
this
.
_summary
)
{
this
.
onSummaryChanged
(
)
;
}
aWindow
.
addEventListener
(
"
unload
"
(
)
=
>
{
let
browserWindow
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
browserWindow
)
{
this
.
_attachGtkTaskbarProgress
(
browserWindow
)
;
}
else
{
this
.
_taskbarProgress
=
null
;
}
}
)
;
}
onSummaryChanged
(
)
{
if
(
!
this
.
_taskbarProgress
)
{
return
;
}
if
(
this
.
_summary
.
allHaveStopped
|
|
this
.
_summary
.
progressTotalBytes
=
=
0
)
{
this
.
_taskbarProgress
.
setProgressState
(
Ci
.
nsITaskbarProgress
.
STATE_NO_PROGRESS
0
0
)
;
}
else
if
(
this
.
_summary
.
allUnknownSize
)
{
this
.
_taskbarProgress
.
setProgressState
(
Ci
.
nsITaskbarProgress
.
STATE_INDETERMINATE
0
0
)
;
}
else
{
let
progressCurrentBytes
=
Math
.
min
(
this
.
_summary
.
progressTotalBytes
this
.
_summary
.
progressCurrentBytes
)
;
this
.
_taskbarProgress
.
setProgressState
(
Ci
.
nsITaskbarProgress
.
STATE_NORMAL
progressCurrentBytes
this
.
_summary
.
progressTotalBytes
)
;
}
}
}
;
