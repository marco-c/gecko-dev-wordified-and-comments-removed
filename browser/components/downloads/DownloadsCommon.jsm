"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DownloadsCommon
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
PluralForm
:
"
resource
:
/
/
gre
/
modules
/
PluralForm
.
jsm
"
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
DownloadHistory
:
"
resource
:
/
/
gre
/
modules
/
DownloadHistory
.
jsm
"
Downloads
:
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
DownloadUIHelper
:
"
resource
:
/
/
gre
/
modules
/
DownloadUIHelper
.
jsm
"
DownloadUtils
:
"
resource
:
/
/
gre
/
modules
/
DownloadUtils
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
DownloadsLogger
"
(
)
=
>
{
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
let
consoleOptions
=
{
maxLogLevelPref
:
"
browser
.
download
.
loglevel
"
prefix
:
"
Downloads
"
}
;
return
new
ConsoleAPI
(
consoleOptions
)
;
}
)
;
const
kDownloadsStringBundleUrl
=
"
chrome
:
/
/
browser
/
locale
/
downloads
/
downloads
.
properties
"
;
const
kDownloadsStringsRequiringFormatting
=
{
sizeWithUnits
:
true
statusSeparator
:
true
statusSeparatorBeforeNumber
:
true
}
;
const
kDownloadsStringsRequiringPluralForm
=
{
otherDownloads3
:
true
}
;
const
kMaxHistoryResultsForLimitedView
=
42
;
const
kPrefBranch
=
Services
.
prefs
.
getBranch
(
"
browser
.
download
.
"
)
;
var
PrefObserver
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
getPref
(
name
)
{
try
{
switch
(
typeof
this
.
prefs
[
name
]
)
{
case
"
boolean
"
:
return
kPrefBranch
.
getBoolPref
(
name
)
;
}
}
catch
(
ex
)
{
}
return
this
.
prefs
[
name
]
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
this
.
prefs
.
hasOwnProperty
(
aData
)
)
{
delete
this
[
aData
]
;
this
[
aData
]
=
this
.
getPref
(
aData
)
;
}
}
register
(
prefs
)
{
this
.
prefs
=
prefs
;
kPrefBranch
.
addObserver
(
"
"
this
true
)
;
for
(
let
key
in
prefs
)
{
let
name
=
key
;
XPCOMUtils
.
defineLazyGetter
(
this
name
function
(
)
{
return
PrefObserver
.
getPref
(
name
)
;
}
)
;
}
}
}
;
PrefObserver
.
register
(
{
animateNotifications
:
true
}
)
;
var
DownloadsCommon
=
{
DOWNLOAD_NOTSTARTED
:
-
1
DOWNLOAD_DOWNLOADING
:
0
DOWNLOAD_FINISHED
:
1
DOWNLOAD_FAILED
:
2
DOWNLOAD_CANCELED
:
3
DOWNLOAD_PAUSED
:
4
DOWNLOAD_BLOCKED_PARENTAL
:
6
DOWNLOAD_DIRTY
:
8
DOWNLOAD_BLOCKED_POLICY
:
9
ATTENTION_NONE
:
"
"
ATTENTION_SUCCESS
:
"
success
"
ATTENTION_WARNING
:
"
warning
"
ATTENTION_SEVERE
:
"
severe
"
get
strings
(
)
{
let
strings
=
{
}
;
let
sb
=
Services
.
strings
.
createBundle
(
kDownloadsStringBundleUrl
)
;
let
enumerator
=
sb
.
getSimpleEnumeration
(
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
string
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIPropertyElement
)
;
let
stringName
=
string
.
key
;
if
(
stringName
in
kDownloadsStringsRequiringFormatting
)
{
strings
[
stringName
]
=
function
(
)
{
return
sb
.
formatStringFromName
(
stringName
Array
.
slice
(
arguments
0
)
arguments
.
length
)
;
}
;
}
else
if
(
stringName
in
kDownloadsStringsRequiringPluralForm
)
{
strings
[
stringName
]
=
function
(
aCount
)
{
let
formattedString
=
sb
.
formatStringFromName
(
stringName
Array
.
slice
(
arguments
0
)
arguments
.
length
)
;
return
PluralForm
.
get
(
aCount
formattedString
)
;
}
;
}
else
{
strings
[
stringName
]
=
string
.
value
;
}
}
delete
this
.
strings
;
return
this
.
strings
=
strings
;
}
get
animateNotifications
(
)
{
return
PrefObserver
.
animateNotifications
;
}
getData
(
window
history
=
false
privateAll
=
false
limited
=
false
)
{
let
isPrivate
=
PrivateBrowsingUtils
.
isContentWindowPrivate
(
window
)
;
if
(
isPrivate
&
&
!
privateAll
)
{
return
PrivateDownloadsData
;
}
if
(
history
)
{
if
(
isPrivate
&
&
privateAll
)
return
LimitedPrivateHistoryDownloadData
;
return
limited
?
LimitedHistoryDownloadsData
:
HistoryDownloadsData
;
}
return
DownloadsData
;
}
initializeAllDataLinks
(
)
{
DownloadsData
.
initializeDataLink
(
)
;
PrivateDownloadsData
.
initializeDataLink
(
)
;
}
getIndicatorData
(
aWindow
)
{
if
(
PrivateBrowsingUtils
.
isContentWindowPrivate
(
aWindow
)
)
{
return
PrivateDownloadsIndicatorData
;
}
return
DownloadsIndicatorData
;
}
getSummary
(
aWindow
aNumToExclude
)
{
if
(
PrivateBrowsingUtils
.
isContentWindowPrivate
(
aWindow
)
)
{
if
(
this
.
_privateSummary
)
{
return
this
.
_privateSummary
;
}
return
this
.
_privateSummary
=
new
DownloadsSummaryData
(
true
aNumToExclude
)
;
}
if
(
this
.
_summary
)
{
return
this
.
_summary
;
}
return
this
.
_summary
=
new
DownloadsSummaryData
(
false
aNumToExclude
)
;
}
_summary
:
null
_privateSummary
:
null
stateOfDownload
(
download
)
{
if
(
!
download
.
stopped
)
{
return
DownloadsCommon
.
DOWNLOAD_DOWNLOADING
;
}
if
(
download
.
succeeded
)
{
return
DownloadsCommon
.
DOWNLOAD_FINISHED
;
}
if
(
download
.
error
)
{
if
(
download
.
error
.
becauseBlockedByParentalControls
)
{
return
DownloadsCommon
.
DOWNLOAD_BLOCKED_PARENTAL
;
}
if
(
download
.
error
.
becauseBlockedByReputationCheck
)
{
return
DownloadsCommon
.
DOWNLOAD_DIRTY
;
}
return
DownloadsCommon
.
DOWNLOAD_FAILED
;
}
if
(
download
.
canceled
)
{
if
(
download
.
hasPartialData
)
{
return
DownloadsCommon
.
DOWNLOAD_PAUSED
;
}
return
DownloadsCommon
.
DOWNLOAD_CANCELED
;
}
return
DownloadsCommon
.
DOWNLOAD_NOTSTARTED
;
}
summarizeDownloads
(
downloads
)
{
let
summary
=
{
numActive
:
0
numPaused
:
0
numDownloading
:
0
totalSize
:
0
totalTransferred
:
0
slowestSpeed
:
Infinity
rawTimeLeft
:
-
1
percentComplete
:
-
1
}
;
for
(
let
download
of
downloads
)
{
summary
.
numActive
+
+
;
if
(
!
download
.
stopped
)
{
summary
.
numDownloading
+
+
;
if
(
download
.
hasProgress
&
&
download
.
speed
>
0
)
{
let
sizeLeft
=
download
.
totalBytes
-
download
.
currentBytes
;
summary
.
rawTimeLeft
=
Math
.
max
(
summary
.
rawTimeLeft
sizeLeft
/
download
.
speed
)
;
summary
.
slowestSpeed
=
Math
.
min
(
summary
.
slowestSpeed
download
.
speed
)
;
}
}
else
if
(
download
.
canceled
&
&
download
.
hasPartialData
)
{
summary
.
numPaused
+
+
;
}
if
(
download
.
succeeded
)
{
summary
.
totalSize
+
=
download
.
target
.
size
;
summary
.
totalTransferred
+
=
download
.
target
.
size
;
}
else
if
(
download
.
hasProgress
)
{
summary
.
totalSize
+
=
download
.
totalBytes
;
summary
.
totalTransferred
+
=
download
.
currentBytes
;
}
}
if
(
summary
.
totalSize
!
=
0
)
{
summary
.
percentComplete
=
Math
.
floor
(
(
summary
.
totalTransferred
/
summary
.
totalSize
)
*
100
)
;
}
if
(
summary
.
slowestSpeed
=
=
Infinity
)
{
summary
.
slowestSpeed
=
0
;
}
return
summary
;
}
smoothSeconds
(
aSeconds
aLastSeconds
)
{
let
shouldApplySmoothing
=
aLastSeconds
>
=
0
&
&
aSeconds
>
aLastSeconds
/
2
;
if
(
shouldApplySmoothing
)
{
let
diff
=
aSeconds
-
aLastSeconds
;
aSeconds
=
aLastSeconds
+
(
diff
<
0
?
.
3
:
.
1
)
*
diff
;
diff
=
aSeconds
-
aLastSeconds
;
let
diffPercent
=
diff
/
aLastSeconds
*
100
;
if
(
Math
.
abs
(
diff
)
<
5
|
|
Math
.
abs
(
diffPercent
)
<
5
)
{
aSeconds
=
aLastSeconds
-
(
diff
<
0
?
.
4
:
.
2
)
;
}
}
return
aLastSeconds
=
Math
.
max
(
aSeconds
1
)
;
}
openDownloadedFile
(
aFile
aMimeInfo
aOwnerWindow
)
{
if
(
!
(
aFile
instanceof
Ci
.
nsIFile
)
)
{
throw
new
Error
(
"
aFile
must
be
a
nsIFile
object
"
)
;
}
if
(
aMimeInfo
&
&
!
(
aMimeInfo
instanceof
Ci
.
nsIMIMEInfo
)
)
{
throw
new
Error
(
"
Invalid
value
passed
for
aMimeInfo
"
)
;
}
if
(
!
(
aOwnerWindow
instanceof
Ci
.
nsIDOMWindow
)
)
{
throw
new
Error
(
"
aOwnerWindow
must
be
a
dom
-
window
object
"
)
;
}
let
isWindowsExe
=
AppConstants
.
platform
=
=
"
win
"
&
&
aFile
.
leafName
.
toLowerCase
(
)
.
endsWith
(
"
.
exe
"
)
;
let
promiseShouldLaunch
;
if
(
aFile
.
isExecutable
(
)
&
&
!
isWindowsExe
)
{
promiseShouldLaunch
=
DownloadUIHelper
.
getPrompter
(
aOwnerWindow
)
.
confirmLaunchExecutable
(
aFile
.
path
)
;
}
else
{
promiseShouldLaunch
=
Promise
.
resolve
(
true
)
;
}
promiseShouldLaunch
.
then
(
shouldLaunch
=
>
{
if
(
!
shouldLaunch
)
{
return
;
}
try
{
if
(
aMimeInfo
&
&
aMimeInfo
.
preferredAction
=
=
aMimeInfo
.
useHelperApp
)
{
aMimeInfo
.
launchWithFile
(
aFile
)
;
return
;
}
}
catch
(
ex
)
{
}
try
{
aFile
.
launch
(
)
;
}
catch
(
ex
)
{
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
.
loadURI
(
NetUtil
.
newURI
(
aFile
)
)
;
}
}
)
.
catch
(
Cu
.
reportError
)
;
}
showDownloadedFile
(
aFile
)
{
if
(
!
(
aFile
instanceof
Ci
.
nsIFile
)
)
{
throw
new
Error
(
"
aFile
must
be
a
nsIFile
object
"
)
;
}
try
{
aFile
.
reveal
(
)
;
}
catch
(
ex
)
{
let
parent
=
aFile
.
parent
;
if
(
parent
)
{
this
.
showDirectory
(
parent
)
;
}
}
}
showDirectory
(
aDirectory
)
{
if
(
!
(
aDirectory
instanceof
Ci
.
nsIFile
)
)
{
throw
new
Error
(
"
aDirectory
must
be
a
nsIFile
object
"
)
;
}
try
{
aDirectory
.
launch
(
)
;
}
catch
(
ex
)
{
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
.
loadURI
(
NetUtil
.
newURI
(
aDirectory
)
)
;
}
}
async
confirmUnblockDownload
(
{
verdict
window
dialogType
}
)
{
let
s
=
DownloadsCommon
.
strings
;
let
title
=
s
.
unblockHeaderUnblock
;
let
firstButtonText
=
s
.
unblockButtonUnblock
;
let
firstButtonAction
=
"
unblock
"
;
let
buttonFlags
=
(
Ci
.
nsIPrompt
.
BUTTON_TITLE_IS_STRING
*
Ci
.
nsIPrompt
.
BUTTON_POS_0
)
+
(
Ci
.
nsIPrompt
.
BUTTON_TITLE_CANCEL
*
Ci
.
nsIPrompt
.
BUTTON_POS_1
)
;
switch
(
dialogType
)
{
case
"
unblock
"
:
buttonFlags
+
=
Ci
.
nsIPrompt
.
BUTTON_POS_1_DEFAULT
;
break
;
case
"
chooseUnblock
"
:
buttonFlags
+
=
(
Ci
.
nsIPrompt
.
BUTTON_TITLE_IS_STRING
*
Ci
.
nsIPrompt
.
BUTTON_POS_2
)
+
Ci
.
nsIPrompt
.
BUTTON_POS_2_DEFAULT
;
break
;
case
"
chooseOpen
"
:
title
=
s
.
unblockHeaderOpen
;
firstButtonText
=
s
.
unblockButtonOpen
;
firstButtonAction
=
"
open
"
;
buttonFlags
+
=
(
Ci
.
nsIPrompt
.
BUTTON_TITLE_IS_STRING
*
Ci
.
nsIPrompt
.
BUTTON_POS_2
)
+
Ci
.
nsIPrompt
.
BUTTON_POS_0_DEFAULT
;
break
;
default
:
Cu
.
reportError
(
"
Unexpected
dialog
type
:
"
+
dialogType
)
;
return
"
cancel
"
;
}
let
message
;
switch
(
verdict
)
{
case
Downloads
.
Error
.
BLOCK_VERDICT_UNCOMMON
:
message
=
s
.
unblockTypeUncommon2
;
break
;
case
Downloads
.
Error
.
BLOCK_VERDICT_POTENTIALLY_UNWANTED
:
message
=
s
.
unblockTypePotentiallyUnwanted2
;
break
;
default
:
message
=
s
.
unblockTypeMalware
;
break
;
}
message
+
=
"
\
n
\
n
"
+
s
.
unblockTip2
;
Services
.
ww
.
registerNotification
(
function
onOpen
(
subj
topic
)
{
if
(
topic
=
=
"
domwindowopened
"
&
&
subj
instanceof
Ci
.
nsIDOMWindow
)
{
subj
.
addEventListener
(
"
DOMContentLoaded
"
function
(
)
{
if
(
subj
.
document
.
documentURI
=
=
"
chrome
:
/
/
global
/
content
/
commonDialog
.
xul
"
)
{
Services
.
ww
.
unregisterNotification
(
onOpen
)
;
let
dialog
=
subj
.
document
.
getElementById
(
"
commonDialog
"
)
;
if
(
dialog
)
{
dialog
.
classList
.
add
(
"
alert
-
dialog
"
)
;
}
}
}
{
once
:
true
}
)
;
}
}
)
;
let
rv
=
Services
.
prompt
.
confirmEx
(
window
title
message
buttonFlags
firstButtonText
null
s
.
unblockButtonConfirmBlock
null
{
}
)
;
return
[
firstButtonAction
"
cancel
"
"
confirmBlock
"
]
[
rv
]
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
.
DownloadsCommon
"
log
"
(
)
=
>
{
return
DownloadsLogger
.
log
.
bind
(
DownloadsLogger
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
.
DownloadsCommon
"
error
"
(
)
=
>
{
return
DownloadsLogger
.
error
.
bind
(
DownloadsLogger
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
DownloadsCommon
"
isWinVistaOrHigher
"
function
(
)
{
let
os
=
Services
.
appinfo
.
OS
;
if
(
os
!
=
"
WINNT
"
)
{
return
false
;
}
return
parseFloat
(
Services
.
sysinfo
.
getProperty
(
"
version
"
)
)
>
=
6
;
}
)
;
function
DownloadsDataCtor
(
{
isPrivate
isHistory
maxHistoryResults
}
=
{
}
)
{
this
.
_isPrivate
=
!
!
isPrivate
;
this
.
oldDownloadStates
=
new
Map
(
)
;
if
(
isHistory
)
{
if
(
isPrivate
)
{
PrivateDownloadsData
.
initializeDataLink
(
)
;
}
DownloadsData
.
initializeDataLink
(
)
;
this
.
_promiseList
=
DownloadsData
.
_promiseList
.
then
(
(
)
=
>
{
return
DownloadHistory
.
getList
(
{
type
:
isPrivate
?
Downloads
.
ALL
:
Downloads
.
PUBLIC
maxHistoryResults
}
)
;
}
)
;
return
;
}
this
.
_promiseList
=
(
async
(
)
=
>
{
await
new
Promise
(
resolve
=
>
this
.
initializeDataLink
=
resolve
)
;
let
list
=
await
Downloads
.
getList
(
isPrivate
?
Downloads
.
PRIVATE
:
Downloads
.
PUBLIC
)
;
await
list
.
addView
(
this
)
;
return
list
;
}
)
(
)
;
}
DownloadsDataCtor
.
prototype
=
{
initializeDataLink
(
)
{
}
_promiseList
:
null
get
downloads
(
)
{
return
this
.
oldDownloadStates
.
keys
(
)
;
}
get
canRemoveFinished
(
)
{
for
(
let
download
of
this
.
downloads
)
{
if
(
download
.
stopped
&
&
!
(
download
.
canceled
&
&
download
.
hasPartialData
)
)
{
return
true
;
}
}
return
false
;
}
removeFinished
(
)
{
Downloads
.
getList
(
this
.
_isPrivate
?
Downloads
.
PRIVATE
:
Downloads
.
PUBLIC
)
.
then
(
list
=
>
list
.
removeFinished
(
)
)
.
catch
(
Cu
.
reportError
)
;
let
indicatorData
=
this
.
_isPrivate
?
PrivateDownloadsIndicatorData
:
DownloadsIndicatorData
;
indicatorData
.
attention
=
DownloadsCommon
.
ATTENTION_NONE
;
}
onDownloadAdded
(
download
)
{
download
.
endTime
=
Date
.
now
(
)
;
this
.
oldDownloadStates
.
set
(
download
DownloadsCommon
.
stateOfDownload
(
download
)
)
;
}
onDownloadChanged
(
download
)
{
let
oldState
=
this
.
oldDownloadStates
.
get
(
download
)
;
let
newState
=
DownloadsCommon
.
stateOfDownload
(
download
)
;
this
.
oldDownloadStates
.
set
(
download
newState
)
;
if
(
oldState
!
=
newState
)
{
if
(
download
.
succeeded
|
|
(
download
.
canceled
&
&
!
download
.
hasPartialData
)
|
|
download
.
error
)
{
download
.
endTime
=
Date
.
now
(
)
;
DownloadHistory
.
updateMetaData
(
download
)
;
}
if
(
download
.
succeeded
|
|
(
download
.
error
&
&
download
.
error
.
becauseBlocked
)
)
{
this
.
_notifyDownloadEvent
(
"
finish
"
)
;
}
}
if
(
!
download
.
newDownloadNotified
)
{
download
.
newDownloadNotified
=
true
;
this
.
_notifyDownloadEvent
(
"
start
"
)
;
}
}
onDownloadRemoved
(
download
)
{
this
.
oldDownloadStates
.
delete
(
download
)
;
}
addView
(
aView
)
{
this
.
_promiseList
.
then
(
list
=
>
list
.
addView
(
aView
)
)
.
catch
(
Cu
.
reportError
)
;
}
removeView
(
aView
)
{
this
.
_promiseList
.
then
(
list
=
>
list
.
removeView
(
aView
)
)
.
catch
(
Cu
.
reportError
)
;
}
get
panelHasShownBefore
(
)
{
try
{
return
Services
.
prefs
.
getBoolPref
(
"
browser
.
download
.
panel
.
shown
"
)
;
}
catch
(
ex
)
{
}
return
false
;
}
set
panelHasShownBefore
(
aValue
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
download
.
panel
.
shown
"
aValue
)
;
return
aValue
;
}
_notifyDownloadEvent
(
aType
)
{
DownloadsCommon
.
log
(
"
Attempting
to
notify
that
a
new
download
has
started
or
finished
.
"
)
;
let
browserWin
=
BrowserWindowTracker
.
getTopWindow
(
{
private
:
this
.
_isPrivate
}
)
;
if
(
!
browserWin
)
{
return
;
}
if
(
this
.
panelHasShownBefore
)
{
DownloadsCommon
.
log
(
"
Showing
new
download
notification
.
"
)
;
browserWin
.
DownloadsIndicatorView
.
showEventNotification
(
aType
)
;
return
;
}
this
.
panelHasShownBefore
=
true
;
browserWin
.
DownloadsPanel
.
showPanel
(
)
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
"
HistoryDownloadsData
"
function
(
)
{
return
new
DownloadsDataCtor
(
{
isHistory
:
true
}
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
LimitedHistoryDownloadsData
"
function
(
)
{
return
new
DownloadsDataCtor
(
{
isHistory
:
true
maxHistoryResults
:
kMaxHistoryResultsForLimitedView
}
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
LimitedPrivateHistoryDownloadData
"
function
(
)
{
return
new
DownloadsDataCtor
(
{
isPrivate
:
true
isHistory
:
true
maxHistoryResults
:
kMaxHistoryResultsForLimitedView
}
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
PrivateDownloadsData
"
function
(
)
{
return
new
DownloadsDataCtor
(
{
isPrivate
:
true
}
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
DownloadsData
"
function
(
)
{
return
new
DownloadsDataCtor
(
)
;
}
)
;
const
DownloadsViewPrototype
=
{
_oldDownloadStates
:
null
_views
:
null
_isPrivate
:
false
addView
(
aView
)
{
if
(
this
.
_views
.
length
=
=
0
)
{
if
(
this
.
_isPrivate
)
{
PrivateDownloadsData
.
addView
(
this
)
;
}
else
{
DownloadsData
.
addView
(
this
)
;
}
}
this
.
_views
.
push
(
aView
)
;
this
.
refreshView
(
aView
)
;
}
refreshView
(
aView
)
{
this
.
_refreshProperties
(
)
;
this
.
_updateView
(
aView
)
;
}
removeView
(
aView
)
{
let
index
=
this
.
_views
.
indexOf
(
aView
)
;
if
(
index
!
=
-
1
)
{
this
.
_views
.
splice
(
index
1
)
;
}
if
(
this
.
_views
.
length
=
=
0
)
{
if
(
this
.
_isPrivate
)
{
PrivateDownloadsData
.
removeView
(
this
)
;
}
else
{
DownloadsData
.
removeView
(
this
)
;
}
}
}
_loading
:
false
onDownloadBatchStarting
(
)
{
this
.
_loading
=
true
;
}
onDownloadBatchEnded
(
)
{
this
.
_loading
=
false
;
this
.
_updateViews
(
)
;
}
onDownloadAdded
(
download
)
{
this
.
_oldDownloadStates
.
set
(
download
DownloadsCommon
.
stateOfDownload
(
download
)
)
;
}
onDownloadStateChanged
(
download
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
onDownloadChanged
(
download
)
{
let
oldState
=
this
.
_oldDownloadStates
.
get
(
download
)
;
let
newState
=
DownloadsCommon
.
stateOfDownload
(
download
)
;
this
.
_oldDownloadStates
.
set
(
download
newState
)
;
if
(
oldState
!
=
newState
)
{
this
.
onDownloadStateChanged
(
download
)
;
}
}
onDownloadRemoved
(
download
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
_refreshProperties
(
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
_updateView
(
)
{
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
}
_updateViews
(
)
{
if
(
this
.
_loading
)
{
return
;
}
this
.
_refreshProperties
(
)
;
this
.
_views
.
forEach
(
this
.
_updateView
this
)
;
}
}
;
function
DownloadsIndicatorDataCtor
(
aPrivate
)
{
this
.
_oldDownloadStates
=
new
WeakMap
(
)
;
this
.
_isPrivate
=
aPrivate
;
this
.
_views
=
[
]
;
}
DownloadsIndicatorDataCtor
.
prototype
=
{
__proto__
:
DownloadsViewPrototype
removeView
(
aView
)
{
DownloadsViewPrototype
.
removeView
.
call
(
this
aView
)
;
if
(
this
.
_views
.
length
=
=
0
)
{
this
.
_itemCount
=
0
;
}
}
onDownloadAdded
(
download
)
{
DownloadsViewPrototype
.
onDownloadAdded
.
call
(
this
download
)
;
this
.
_itemCount
+
+
;
this
.
_updateViews
(
)
;
}
onDownloadStateChanged
(
download
)
{
if
(
!
download
.
succeeded
&
&
download
.
error
&
&
download
.
error
.
reputationCheckVerdict
)
{
switch
(
download
.
error
.
reputationCheckVerdict
)
{
case
Downloads
.
Error
.
BLOCK_VERDICT_UNCOMMON
:
case
Downloads
.
Error
.
BLOCK_VERDICT_POTENTIALLY_UNWANTED
:
if
(
this
.
_attention
!
=
DownloadsCommon
.
ATTENTION_SEVERE
)
{
this
.
attention
=
DownloadsCommon
.
ATTENTION_WARNING
;
}
break
;
case
Downloads
.
Error
.
BLOCK_VERDICT_MALWARE
:
this
.
attention
=
DownloadsCommon
.
ATTENTION_SEVERE
;
break
;
default
:
this
.
attention
=
DownloadsCommon
.
ATTENTION_SEVERE
;
Cu
.
reportError
(
"
Unknown
reputation
verdict
:
"
+
download
.
error
.
reputationCheckVerdict
)
;
}
}
else
if
(
download
.
succeeded
)
{
if
(
this
.
_attention
!
=
DownloadsCommon
.
ATTENTION_SEVERE
&
&
this
.
_attention
!
=
DownloadsCommon
.
ATTENTION_WARNING
)
{
this
.
attention
=
DownloadsCommon
.
ATTENTION_SUCCESS
;
}
}
else
if
(
download
.
error
)
{
if
(
this
.
_attention
!
=
DownloadsCommon
.
ATTENTION_SEVERE
)
{
this
.
attention
=
DownloadsCommon
.
ATTENTION_WARNING
;
}
}
}
onDownloadChanged
(
download
)
{
DownloadsViewPrototype
.
onDownloadChanged
.
call
(
this
download
)
;
this
.
_updateViews
(
)
;
}
onDownloadRemoved
(
download
)
{
this
.
_itemCount
-
-
;
this
.
_updateViews
(
)
;
}
_hasDownloads
:
false
_percentComplete
:
-
1
set
attention
(
aValue
)
{
this
.
_attention
=
aValue
;
this
.
_updateViews
(
)
;
return
aValue
;
}
_attention
:
DownloadsCommon
.
ATTENTION_NONE
set
attentionSuppressed
(
aValue
)
{
this
.
_attentionSuppressed
=
aValue
;
this
.
_attention
=
DownloadsCommon
.
ATTENTION_NONE
;
this
.
_updateViews
(
)
;
return
aValue
;
}
_attentionSuppressed
:
false
_updateView
(
aView
)
{
aView
.
hasDownloads
=
this
.
_hasDownloads
;
aView
.
percentComplete
=
this
.
_percentComplete
;
aView
.
attention
=
this
.
_attentionSuppressed
?
DownloadsCommon
.
ATTENTION_NONE
:
this
.
_attention
;
}
_itemCount
:
0
*
_activeDownloads
(
)
{
let
downloads
=
this
.
_isPrivate
?
PrivateDownloadsData
.
downloads
:
DownloadsData
.
downloads
;
for
(
let
download
of
downloads
)
{
if
(
!
download
.
stopped
|
|
(
download
.
canceled
&
&
download
.
hasPartialData
)
)
{
yield
download
;
}
}
}
_refreshProperties
(
)
{
let
summary
=
DownloadsCommon
.
summarizeDownloads
(
this
.
_activeDownloads
(
)
)
;
this
.
_hasDownloads
=
(
this
.
_itemCount
>
0
)
;
if
(
summary
.
percentComplete
>
=
0
)
{
this
.
_percentComplete
=
summary
.
percentComplete
;
}
else
if
(
summary
.
numDownloading
>
0
)
{
this
.
_percentComplete
=
0
;
}
else
{
this
.
_percentComplete
=
-
1
;
}
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
"
PrivateDownloadsIndicatorData
"
function
(
)
{
return
new
DownloadsIndicatorDataCtor
(
true
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
DownloadsIndicatorData
"
function
(
)
{
return
new
DownloadsIndicatorDataCtor
(
false
)
;
}
)
;
function
DownloadsSummaryData
(
aIsPrivate
aNumToExclude
)
{
this
.
_numToExclude
=
aNumToExclude
;
this
.
_loading
=
false
;
this
.
_downloads
=
[
]
;
this
.
_lastRawTimeLeft
=
-
1
;
this
.
_lastTimeLeft
=
-
1
;
this
.
_showingProgress
=
false
;
this
.
_details
=
"
"
;
this
.
_description
=
"
"
;
this
.
_numActive
=
0
;
this
.
_percentComplete
=
-
1
;
this
.
_oldDownloadStates
=
new
WeakMap
(
)
;
this
.
_isPrivate
=
aIsPrivate
;
this
.
_views
=
[
]
;
}
DownloadsSummaryData
.
prototype
=
{
__proto__
:
DownloadsViewPrototype
removeView
(
aView
)
{
DownloadsViewPrototype
.
removeView
.
call
(
this
aView
)
;
if
(
this
.
_views
.
length
=
=
0
)
{
this
.
_downloads
=
[
]
;
}
}
onDownloadAdded
(
download
)
{
DownloadsViewPrototype
.
onDownloadAdded
.
call
(
this
download
)
;
this
.
_downloads
.
unshift
(
download
)
;
this
.
_updateViews
(
)
;
}
onDownloadStateChanged
(
)
{
this
.
_lastRawTimeLeft
=
-
1
;
this
.
_lastTimeLeft
=
-
1
;
}
onDownloadChanged
(
download
)
{
DownloadsViewPrototype
.
onDownloadChanged
.
call
(
this
download
)
;
this
.
_updateViews
(
)
;
}
onDownloadRemoved
(
download
)
{
let
itemIndex
=
this
.
_downloads
.
indexOf
(
download
)
;
this
.
_downloads
.
splice
(
itemIndex
1
)
;
this
.
_updateViews
(
)
;
}
_updateView
(
aView
)
{
aView
.
showingProgress
=
this
.
_showingProgress
;
aView
.
percentComplete
=
this
.
_percentComplete
;
aView
.
description
=
this
.
_description
;
aView
.
details
=
this
.
_details
;
}
*
_downloadsForSummary
(
)
{
if
(
this
.
_downloads
.
length
>
0
)
{
for
(
let
i
=
this
.
_numToExclude
;
i
<
this
.
_downloads
.
length
;
+
+
i
)
{
yield
this
.
_downloads
[
i
]
;
}
}
}
_refreshProperties
(
)
{
let
summary
=
DownloadsCommon
.
summarizeDownloads
(
this
.
_downloadsForSummary
(
)
)
;
this
.
_description
=
DownloadsCommon
.
strings
.
otherDownloads3
(
summary
.
numDownloading
)
;
this
.
_percentComplete
=
summary
.
percentComplete
;
this
.
_showingProgress
=
summary
.
numDownloading
>
0
;
if
(
summary
.
rawTimeLeft
=
=
-
1
)
{
this
.
_lastRawTimeLeft
=
-
1
;
this
.
_lastTimeLeft
=
-
1
;
this
.
_details
=
"
"
;
}
else
{
if
(
this
.
_lastRawTimeLeft
!
=
summary
.
rawTimeLeft
)
{
this
.
_lastRawTimeLeft
=
summary
.
rawTimeLeft
;
this
.
_lastTimeLeft
=
DownloadsCommon
.
smoothSeconds
(
summary
.
rawTimeLeft
this
.
_lastTimeLeft
)
;
}
[
this
.
_details
]
=
DownloadUtils
.
getDownloadStatusNoRate
(
summary
.
totalTransferred
summary
.
totalSize
summary
.
slowestSpeed
this
.
_lastTimeLeft
)
;
}
}
}
;
