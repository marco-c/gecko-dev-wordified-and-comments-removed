"
use
strict
"
;
add_task
(
async
function
mainTest
(
)
{
await
task_resetState
(
)
;
let
verdicts
=
[
Downloads
.
Error
.
BLOCK_VERDICT_UNCOMMON
Downloads
.
Error
.
BLOCK_VERDICT_MALWARE
Downloads
.
Error
.
BLOCK_VERDICT_POTENTIALLY_UNWANTED
Downloads
.
Error
.
BLOCK_VERDICT_INSECURE
]
;
await
task_addDownloads
(
verdicts
.
map
(
v
=
>
makeDownload
(
v
)
)
)
;
for
(
let
i
=
0
;
i
<
verdicts
.
length
;
i
+
+
)
{
await
task_openPanel
(
)
;
let
item
=
DownloadsView
.
richListBox
.
lastElementChild
;
info
(
"
Open
the
panel
and
click
the
item
to
show
the
subview
.
"
)
;
let
viewPromise
=
promiseViewShown
(
DownloadsBlockedSubview
.
subview
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
)
;
await
viewPromise
;
Assert
.
ok
(
DownloadsBlockedSubview
.
subview
.
getAttribute
(
"
verdict
"
)
verdicts
[
verdicts
.
count
-
i
-
1
]
)
;
info
(
"
Go
back
to
the
main
view
.
"
)
;
viewPromise
=
promiseViewShown
(
DownloadsBlockedSubview
.
mainView
)
;
DownloadsBlockedSubview
.
panelMultiView
.
goBack
(
)
;
await
viewPromise
;
info
(
"
Show
the
subview
again
.
"
)
;
viewPromise
=
promiseViewShown
(
DownloadsBlockedSubview
.
subview
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
)
;
await
viewPromise
;
info
(
"
Click
the
Open
button
.
"
)
;
let
unblockPromise
=
promiseUnblockAndSaveCalled
(
item
)
;
let
hidePromise
=
promisePanelHidden
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
DownloadsBlockedSubview
.
elements
.
unblockButton
{
type
:
"
mousemove
"
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
DownloadsBlockedSubview
.
elements
.
unblockButton
{
}
)
;
info
(
"
waiting
for
unblockOpen
"
)
;
await
unblockPromise
;
info
(
"
waiting
for
hide
panel
"
)
;
await
hidePromise
;
window
.
focus
(
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
info
(
"
Reopen
the
panel
and
show
the
subview
again
.
"
)
;
await
task_openPanel
(
)
;
viewPromise
=
promiseViewShown
(
DownloadsBlockedSubview
.
subview
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
)
;
await
viewPromise
;
info
(
"
Click
the
Remove
button
.
"
)
;
hidePromise
=
promisePanelHidden
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
DownloadsBlockedSubview
.
elements
.
deleteButton
{
}
)
;
info
(
"
Waiting
for
hide
panel
"
)
;
await
hidePromise
;
info
(
"
Open
the
panel
again
and
check
the
item
is
gone
.
"
)
;
await
task_openPanel
(
)
;
Assert
.
ok
(
!
item
.
parentNode
)
;
hidePromise
=
promisePanelHidden
(
)
;
DownloadsPanel
.
hidePanel
(
)
;
await
hidePromise
;
}
await
task_resetState
(
)
;
}
)
;
function
promisePanelHidden
(
)
{
return
BrowserTestUtils
.
waitForEvent
(
DownloadsPanel
.
panel
"
popuphidden
"
)
;
}
function
makeDownload
(
verdict
)
{
return
{
state
:
DownloadsCommon
.
DOWNLOAD_DIRTY
hasBlockedData
:
true
errorObj
:
{
result
:
Cr
.
NS_ERROR_FAILURE
message
:
"
Download
blocked
.
"
becauseBlocked
:
true
becauseBlockedByReputationCheck
:
true
reputationCheckVerdict
:
verdict
}
}
;
}
function
promiseViewShown
(
view
)
{
return
BrowserTestUtils
.
waitForEvent
(
view
"
ViewShown
"
)
;
}
function
promiseUnblockAndSaveCalled
(
item
)
{
return
new
Promise
(
resolve
=
>
{
let
realFn
=
item
.
_shell
.
unblockAndSave
;
item
.
_shell
.
unblockAndSave
=
async
(
)
=
>
{
item
.
_shell
.
unblockAndSave
=
realFn
;
resolve
(
)
;
}
;
}
)
;
}
