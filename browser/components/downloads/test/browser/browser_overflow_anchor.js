const
kForceOverflowWidthPx
=
200
;
registerCleanupFunction
(
async
function
(
)
{
await
task_resetState
(
)
;
}
)
;
add_task
(
async
function
test_overflow_anchor
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
download
.
autohideButton
"
false
]
]
}
)
;
await
task_resetState
(
)
;
let
button
=
CustomizableUI
.
getWidget
(
"
downloads
-
button
"
)
.
forWindow
(
window
)
;
ok
(
!
button
.
overflowed
"
Downloads
button
should
not
be
overflowed
.
"
)
;
is
(
button
.
node
.
getAttribute
(
"
cui
-
areatype
"
)
"
toolbar
"
"
Button
should
know
it
'
s
in
the
toolbar
"
)
;
await
gCustomizeMode
.
addToPanel
(
button
.
node
)
;
let
promise
=
promisePanelOpened
(
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
button
:
0
}
button
.
node
)
;
info
(
"
waiting
for
panel
to
open
"
)
;
await
promise
;
let
panel
=
DownloadsPanel
.
panel
;
let
chevron
=
document
.
getElementById
(
"
nav
-
bar
-
overflow
-
button
"
)
;
let
chevronIcon
=
document
.
getAnonymousElementByAttribute
(
chevron
"
class
"
"
toolbarbutton
-
icon
"
)
;
is
(
panel
.
anchorNode
chevronIcon
"
Panel
should
be
anchored
to
the
chevron
s
icon
.
"
)
;
DownloadsPanel
.
hidePanel
(
)
;
gCustomizeMode
.
addToToolbar
(
button
.
node
)
;
promise
=
promisePanelOpened
(
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
mousedown
"
button
:
0
}
button
.
node
)
;
await
promise
;
let
downloadsAnchor
=
document
.
getAnonymousElementByAttribute
(
button
.
node
"
class
"
"
toolbarbutton
-
badge
-
stack
"
)
;
is
(
panel
.
anchorNode
downloadsAnchor
)
;
DownloadsPanel
.
hidePanel
(
)
;
}
)
;
