registerCleanupFunction
(
async
function
(
)
{
await
task_resetState
(
)
;
}
)
;
add_task
(
async
function
test_basic_functionality
(
)
{
const
DownloadData
=
[
{
state
:
DownloadsCommon
.
DOWNLOAD_NOTSTARTED
}
{
state
:
DownloadsCommon
.
DOWNLOAD_PAUSED
}
{
state
:
DownloadsCommon
.
DOWNLOAD_FINISHED
}
{
state
:
DownloadsCommon
.
DOWNLOAD_FAILED
}
{
state
:
DownloadsCommon
.
DOWNLOAD_CANCELED
}
]
;
await
promiseFocus
(
)
;
await
task_resetState
(
)
;
var
originalCountLimit
=
DownloadsView
.
kItemCountLimit
;
DownloadsView
.
kItemCountLimit
=
DownloadData
.
length
;
registerCleanupFunction
(
function
(
)
{
DownloadsView
.
kItemCountLimit
=
originalCountLimit
;
}
)
;
await
task_addDownloads
(
DownloadData
)
;
await
task_openPanel
(
)
;
let
richlistbox
=
document
.
getElementById
(
"
downloadsListBox
"
)
;
let
itemCount
=
richlistbox
.
itemChildren
.
length
;
for
(
let
i
=
0
;
i
<
itemCount
;
i
+
+
)
{
let
element
=
richlistbox
.
itemChildren
[
itemCount
-
i
-
1
]
;
let
download
=
DownloadsView
.
itemForElement
(
element
)
.
download
;
is
(
DownloadsCommon
.
stateOfDownload
(
download
)
DownloadData
[
i
]
.
state
"
Download
states
match
up
"
)
;
}
}
)
;
