"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
org
/
browser
/
browser
/
components
/
downloads
/
test
/
browser
/
cookies
-
json
.
sjs
"
;
const
{
FileTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
FileTestUtils
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_save_jsonview
(
)
{
Services
.
cookies
.
add
(
"
example
.
org
"
"
/
"
"
cookieKey
"
"
cookieValue
"
false
false
false
Number
.
MAX_SAFE_INTEGER
{
}
Ci
.
nsICookie
.
SAMESITE_LAX
Ci
.
nsICookie
.
SCHEME_HTTPS
)
;
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
.
browsingContext
)
;
let
list
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
let
downloadFinishedPromise
=
promiseDownloadFinished
(
list
)
;
let
saveFile
=
FileTestUtils
.
getTempFile
(
"
cookies
.
sjs
"
)
;
if
(
!
saveFile
.
exists
(
)
)
{
saveFile
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
}
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
_
=
>
{
await
new
Promise
(
resolve
=
>
{
MockFilePicker
.
showCallback
=
function
(
fp
)
{
saveFile
.
append
(
"
testfile
"
)
;
MockFilePicker
.
setFiles
(
[
saveFile
]
)
;
setTimeout
(
(
)
=
>
{
resolve
(
fp
.
defaultString
)
;
}
0
)
;
return
Ci
.
nsIFilePicker
.
returnOK
;
}
;
document
.
getElementById
(
"
Browser
:
SavePage
"
)
.
doCommand
(
)
;
}
)
;
}
)
;
let
download
=
await
downloadFinishedPromise
;
Assert
.
ok
(
download
.
stopped
)
;
Assert
.
ok
(
download
.
hasProgress
)
;
Assert
.
equal
(
download
.
progress
100
)
;
Assert
.
equal
(
download
.
currentBytes
45
)
;
Assert
.
equal
(
download
.
source
.
url
TEST_URL
)
;
Assert
.
equal
(
await
IOUtils
.
readUTF8
(
download
.
target
.
path
)
'
{
"
cookieHeaderValue
"
:
"
cookieKey
=
cookieValue
"
}
'
)
;
Assert
.
equal
(
download
.
target
.
size
45
)
;
MockFilePicker
.
cleanup
(
)
;
}
)
;
