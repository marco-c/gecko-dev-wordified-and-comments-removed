add_task
(
async
function
test_downloads_panel_opens
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
download
.
improvements_to_download_panel
"
true
]
]
}
)
;
info
(
"
waiting
for
panel
to
open
"
)
;
let
promise
=
promisePanelOpened
(
)
;
DownloadsCommon
.
getData
(
window
)
.
_notifyDownloadEvent
(
"
start
"
)
;
is
(
DownloadsPanel
.
isPanelShowing
true
"
Panel
state
should
indicate
a
preparation
to
be
opened
"
)
;
await
promise
;
is
(
DownloadsPanel
.
panel
.
state
"
open
"
"
Panel
should
be
opened
"
)
;
DownloadsPanel
.
hidePanel
(
)
;
}
)
;
add_task
(
async
function
test_downloads_panel_opening_pref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
download
.
improvements_to_download_panel
"
true
]
[
"
browser
.
download
.
alwaysOpenPanel
"
false
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
info
(
"
creating
a
download
and
setting
it
to
in
progress
"
)
;
await
task_addDownloads
(
[
{
state
:
DownloadsCommon
.
DOWNLOAD_DOWNLOADING
}
]
)
;
let
publicList
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
let
downloads
=
await
publicList
.
getAll
(
)
;
downloads
[
0
]
.
stopped
=
false
;
let
oldShowEventNotification
=
DownloadsIndicatorView
.
showEventNotification
;
registerCleanupFunction
(
async
(
)
=
>
{
for
(
let
download
of
downloads
)
{
await
publicList
.
remove
(
download
)
;
}
DownloadsIndicatorView
.
showEventNotification
=
oldShowEventNotification
;
}
)
;
let
promiseDownloadStartedNotification
=
new
Promise
(
resolve
=
>
{
DownloadsIndicatorView
.
showEventNotification
=
aType
=
>
{
if
(
aType
=
=
"
start
"
)
{
resolve
(
)
;
}
}
;
}
)
;
DownloadsCommon
.
getData
(
window
)
.
_notifyDownloadEvent
(
"
start
"
)
;
is
(
DownloadsPanel
.
isPanelShowing
false
"
Panel
state
should
indicate
it
is
not
preparing
to
be
opened
"
)
;
info
(
"
waiting
for
download
to
start
"
)
;
await
promiseDownloadStartedNotification
;
is
(
DownloadsPanel
.
panel
.
state
"
closed
"
"
Panel
should
be
closed
"
)
;
}
)
;
add_task
(
async
function
test_downloads_panel_remains_closed
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
download
.
improvements_to_download_panel
"
true
]
]
}
)
;
await
task_addDownloads
(
[
{
state
:
DownloadsCommon
.
DOWNLOAD_DOWNLOADING
}
{
state
:
DownloadsCommon
.
DOWNLOAD_DOWNLOADING
}
]
)
;
let
publicList
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
let
downloads
=
await
publicList
.
getAll
(
)
;
info
(
"
setting
2
downloads
to
be
in
progress
"
)
;
downloads
[
0
]
.
stopped
=
false
;
downloads
[
1
]
.
stopped
=
false
;
let
oldShowEventNotification
=
DownloadsIndicatorView
.
showEventNotification
;
registerCleanupFunction
(
async
(
)
=
>
{
for
(
let
download
of
downloads
)
{
await
publicList
.
remove
(
download
)
;
}
DownloadsIndicatorView
.
showEventNotification
=
oldShowEventNotification
;
}
)
;
let
promiseDownloadStartedNotification
=
new
Promise
(
resolve
=
>
{
DownloadsIndicatorView
.
showEventNotification
=
aType
=
>
{
if
(
aType
=
=
"
start
"
)
{
DownloadsIndicatorView
.
showEventNotification
=
oldShowEventNotification
;
resolve
(
)
;
}
}
;
}
)
;
DownloadsCommon
.
getData
(
window
)
.
_notifyDownloadEvent
(
"
start
"
)
;
is
(
DownloadsPanel
.
isPanelShowing
false
"
Panel
state
should
NOT
indicate
a
preparation
to
be
opened
"
)
;
await
promiseDownloadStartedNotification
;
is
(
DownloadsPanel
.
panel
.
state
"
closed
"
"
Panel
should
be
closed
"
)
;
}
)
;
