"
use
strict
"
;
registerCleanupFunction
(
(
)
=
>
{
}
)
;
function
*
assertDialogResult
(
{
args
buttonToClick
expectedResult
}
)
{
promiseAlertDialogOpen
(
buttonToClick
)
;
is
(
yield
DownloadsCommon
.
confirmUnblockDownload
(
args
)
expectedResult
)
;
}
add_task
(
async
function
test_unblock_dialog_unblock
(
)
{
for
(
let
verdict
of
[
Downloads
.
Error
.
BLOCK_VERDICT_MALWARE
Downloads
.
Error
.
BLOCK_VERDICT_POTENTIALLY_UNWANTED
Downloads
.
Error
.
BLOCK_VERDICT_UNCOMMON
]
)
{
let
args
=
{
verdict
window
dialogType
:
"
unblock
"
}
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
accept
"
expectedResult
:
"
unblock
"
}
)
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
cancel
"
expectedResult
:
"
cancel
"
}
)
;
}
}
)
;
add_task
(
async
function
test_chooseUnblock_dialog
(
)
{
let
args
=
{
verdict
:
Downloads
.
Error
.
BLOCK_VERDICT_POTENTIALLY_UNWANTED
window
dialogType
:
"
chooseUnblock
"
}
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
accept
"
expectedResult
:
"
unblock
"
}
)
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
cancel
"
expectedResult
:
"
cancel
"
}
)
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
extra1
"
expectedResult
:
"
confirmBlock
"
}
)
;
}
)
;
add_task
(
async
function
test_chooseOpen_dialog
(
)
{
let
args
=
{
verdict
:
Downloads
.
Error
.
BLOCK_VERDICT_UNCOMMON
window
dialogType
:
"
chooseOpen
"
}
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
accept
"
expectedResult
:
"
open
"
}
)
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
cancel
"
expectedResult
:
"
cancel
"
}
)
;
await
assertDialogResult
(
{
args
buttonToClick
:
"
extra1
"
expectedResult
:
"
confirmBlock
"
}
)
;
}
)
;
