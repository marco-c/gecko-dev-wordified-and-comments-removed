"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
WindowsVersionInfo
:
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
WindowsVersionInfo
.
sys
.
mjs
"
}
)
;
const
osVersion
=
Services
.
sysinfo
.
get
(
"
version
"
)
;
const
DEFAULT_APPVERSION
=
{
linux
:
"
5
.
0
(
X11
)
"
win
:
"
5
.
0
(
Windows
)
"
macosx
:
"
5
.
0
(
Macintosh
)
"
android
:
5
.
0
(
Android
{
osVersion
}
)
other
:
"
5
.
0
(
X11
)
"
}
;
const
SPOOFED_APPVERSION
=
{
linux
:
"
5
.
0
(
X11
)
"
win
:
"
5
.
0
(
Windows
)
"
macosx
:
"
5
.
0
(
Macintosh
)
"
android
:
"
5
.
0
(
Android
10
)
"
other
:
"
5
.
0
(
X11
)
"
}
;
let
cpuArch
=
Services
.
sysinfo
.
get
(
"
arch
"
)
;
if
(
cpuArch
=
=
"
x86
-
64
"
)
{
cpuArch
=
"
x86_64
"
;
}
const
DEFAULT_PLATFORM
=
{
linux
:
Linux
{
cpuArch
}
win
:
"
Win32
"
macosx
:
"
MacIntel
"
android
:
Linux
{
cpuArch
}
other
:
Linux
{
cpuArch
}
}
;
const
SPOOFED_PLATFORM
=
{
linux
:
"
Linux
x86_64
"
win
:
"
Win32
"
macosx
:
"
MacIntel
"
android
:
"
Linux
aarch64
"
other
:
"
Linux
x86_64
"
}
;
const
WindowsOscpuPromise
=
(
async
(
)
=
>
{
let
WindowsOscpu
=
null
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
let
isWin11
=
WindowsVersionInfo
.
get
(
)
.
buildNumber
>
=
22000
;
let
isWow64
=
(
await
Services
.
sysinfo
.
processInfo
)
.
isWow64
;
WindowsOscpu
=
cpuArch
=
=
"
x86_64
"
|
|
isWow64
|
|
(
cpuArch
=
=
"
aarch64
"
&
&
isWin11
)
?
"
Windows
NT
10
.
0
;
Win64
;
x64
"
:
"
Windows
NT
10
.
0
"
;
}
return
WindowsOscpu
;
}
)
(
)
;
const
DEFAULT_OSCPU
=
{
linux
:
Linux
{
cpuArch
}
macosx
:
"
Intel
Mac
OS
X
10
.
15
"
android
:
Linux
{
cpuArch
}
other
:
Linux
{
cpuArch
}
}
;
const
SPOOFED_OSCPU
=
{
linux
:
"
Linux
x86_64
"
win
:
"
Windows
NT
10
.
0
;
Win64
;
x64
"
macosx
:
"
Intel
Mac
OS
X
10
.
15
"
android
:
"
Linux
aarch64
"
other
:
"
Linux
x86_64
"
}
;
const
DEFAULT_UA_OS
=
{
linux
:
X11
;
Linux
{
cpuArch
}
macosx
:
"
Macintosh
;
Intel
Mac
OS
X
10
.
15
"
android
:
Android
{
osVersion
}
;
Mobile
other
:
X11
;
Linux
{
cpuArch
}
}
;
const
SPOOFED_UA_NAVIGATOR_OS
=
{
linux
:
"
X11
;
Linux
x86_64
"
win
:
"
Windows
NT
10
.
0
;
Win64
;
x64
"
macosx
:
"
Macintosh
;
Intel
Mac
OS
X
10
.
15
"
android
:
"
Android
10
;
Mobile
"
other
:
"
X11
;
Linux
x86_64
"
}
;
const
SPOOFED_UA_HTTPHEADER_OS
=
{
linux
:
"
Windows
NT
10
.
0
"
win
:
"
Windows
NT
10
.
0
"
macosx
:
"
Windows
NT
10
.
0
"
android
:
"
Android
10
;
Mobile
"
other
:
"
Windows
NT
10
.
0
"
}
;
const
SPOOFED_HW_CONCURRENCY
=
2
;
const
CONST_APPCODENAME
=
"
Mozilla
"
;
const
CONST_APPNAME
=
"
Netscape
"
;
const
CONST_PRODUCT
=
"
Gecko
"
;
const
CONST_PRODUCTSUB
=
"
20100101
"
;
const
CONST_VENDOR
=
"
"
;
const
CONST_VENDORSUB
=
"
"
;
const
appVersion
=
parseInt
(
Services
.
appinfo
.
version
)
;
const
spoofedVersion
=
AppConstants
.
platform
=
=
"
android
"
?
"
115
"
:
appVersion
;
const
LEGACY_UA_GECKO_TRAIL
=
"
20100101
"
;
const
DEFAULT_UA_GECKO_TRAIL
=
{
linux
:
LEGACY_UA_GECKO_TRAIL
win
:
LEGACY_UA_GECKO_TRAIL
macosx
:
LEGACY_UA_GECKO_TRAIL
android
:
{
appVersion
}
.
0
other
:
LEGACY_UA_GECKO_TRAIL
}
;
const
SPOOFED_UA_GECKO_TRAIL
=
{
linux
:
LEGACY_UA_GECKO_TRAIL
win
:
LEGACY_UA_GECKO_TRAIL
macosx
:
LEGACY_UA_GECKO_TRAIL
android
:
{
spoofedVersion
}
.
0
other
:
LEGACY_UA_GECKO_TRAIL
}
;
const
DEFAULT_HARDWARE_CONCURRENCY
=
navigator
.
hardwareConcurrency
;
async
function
testNavigator
(
result
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
is
(
result
.
appVersion
expectedResults
.
appVersion
Checking
{
testDesc
}
navigator
.
appVersion
.
)
;
is
(
result
.
platform
expectedResults
.
platform
Checking
{
testDesc
}
navigator
.
platform
.
)
;
is
(
result
.
userAgent
expectedResults
.
userAgentNavigator
Checking
{
testDesc
}
navigator
.
userAgent
.
)
;
is
(
result
.
userAgentHTTPHeader
expectedResults
.
userAgentHTTPHeader
Checking
{
testDesc
}
userAgentHTTPHeader
.
)
;
is
(
result
.
framer_crossOrigin_userAgentHTTPHeader
expectedResults
.
framer_crossOrigin_userAgentHTTPHeader
Checking
{
testDesc
}
framer
contacting
cross
-
origin
userAgentHTTPHeader
.
)
;
is
(
result
.
framee_crossOrigin_userAgentHTTPHeader
expectedResults
.
framee_crossOrigin_userAgentHTTPHeader
Checking
{
testDesc
}
framee
contacting
cross
-
origin
userAgentHTTPHeader
.
)
;
is
(
result
.
mimeTypesLength
expectedResults
.
mimeTypesLength
Navigator
.
mimeTypes
has
a
length
of
{
expectedResults
.
mimeTypesLength
}
.
)
;
is
(
result
.
pluginsLength
expectedResults
.
pluginsLength
Navigator
.
plugins
has
a
length
of
{
expectedResults
.
pluginsLength
}
.
)
;
is
(
result
.
oscpu
expectedResults
.
oscpu
Checking
{
testDesc
}
navigator
.
oscpu
.
)
;
is
(
result
.
hardwareConcurrency
expectedResults
.
hardwareConcurrency
Checking
{
testDesc
}
navigator
.
hardwareConcurrency
.
)
;
is
(
result
.
appCodeName
CONST_APPCODENAME
"
Navigator
.
appCodeName
reports
correct
constant
value
.
"
)
;
is
(
result
.
appName
CONST_APPNAME
"
Navigator
.
appName
reports
correct
constant
value
.
"
)
;
is
(
result
.
product
CONST_PRODUCT
"
Navigator
.
product
reports
correct
constant
value
.
"
)
;
is
(
result
.
productSub
CONST_PRODUCTSUB
"
Navigator
.
productSub
reports
correct
constant
value
.
"
)
;
is
(
result
.
vendor
CONST_VENDOR
"
Navigator
.
vendor
reports
correct
constant
value
.
"
)
;
is
(
result
.
vendorSub
CONST_VENDORSUB
"
Navigator
.
vendorSub
reports
correct
constant
value
.
"
)
;
is
(
result
.
worker_appVersion
expectedResults
.
appVersion
Checking
{
testDesc
}
worker
navigator
.
appVersion
.
)
;
is
(
result
.
worker_platform
expectedResults
.
platform
Checking
{
testDesc
}
worker
navigator
.
platform
.
)
;
is
(
result
.
worker_userAgent
expectedResults
.
userAgentNavigator
Checking
{
testDesc
}
worker
navigator
.
userAgent
.
)
;
is
(
result
.
worker_hardwareConcurrency
expectedResults
.
hardwareConcurrency
Checking
{
testDesc
}
worker
navigator
.
hardwareConcurrency
.
)
;
is
(
result
.
worker_appCodeName
CONST_APPCODENAME
"
worker
Navigator
.
appCodeName
reports
correct
constant
value
.
"
)
;
is
(
result
.
worker_appName
CONST_APPNAME
"
worker
Navigator
.
appName
reports
correct
constant
value
.
"
)
;
is
(
result
.
worker_product
CONST_PRODUCT
"
worker
Navigator
.
product
reports
correct
constant
value
.
"
)
;
}
let
defaultUserAgent
;
let
spoofedUserAgentNavigator
;
let
spoofedUserAgentHeader
;
let
allNotSpoofed
;
let
allSpoofed
;
add_setup
(
async
(
)
=
>
{
DEFAULT_OSCPU
.
win
=
DEFAULT_UA_OS
.
win
=
await
WindowsOscpuPromise
;
defaultUserAgent
=
Mozilla
/
5
.
0
(
{
DEFAULT_UA_OS
[
AppConstants
.
platform
]
}
;
rv
:
{
appVersion
}
.
0
)
Gecko
/
{
DEFAULT_UA_GECKO_TRAIL
[
AppConstants
.
platform
]
}
Firefox
/
{
appVersion
}
.
0
;
spoofedUserAgentNavigator
=
Mozilla
/
5
.
0
(
{
SPOOFED_UA_NAVIGATOR_OS
[
AppConstants
.
platform
]
}
;
rv
:
{
appVersion
}
.
0
)
Gecko
/
{
SPOOFED_UA_GECKO_TRAIL
[
AppConstants
.
platform
]
}
Firefox
/
{
appVersion
}
.
0
;
spoofedUserAgentHeader
=
Mozilla
/
5
.
0
(
{
SPOOFED_UA_HTTPHEADER_OS
[
AppConstants
.
platform
]
}
;
rv
:
{
appVersion
}
.
0
)
Gecko
/
{
SPOOFED_UA_GECKO_TRAIL
[
AppConstants
.
platform
]
}
Firefox
/
{
appVersion
}
.
0
;
allNotSpoofed
=
{
appVersion
:
DEFAULT_APPVERSION
[
AppConstants
.
platform
]
hardwareConcurrency
:
navigator
.
hardwareConcurrency
mimeTypesLength
:
2
oscpu
:
DEFAULT_OSCPU
[
AppConstants
.
platform
]
platform
:
DEFAULT_PLATFORM
[
AppConstants
.
platform
]
pluginsLength
:
5
userAgentNavigator
:
defaultUserAgent
userAgentHTTPHeader
:
defaultUserAgent
framer_crossOrigin_userAgentHTTPHeader
:
defaultUserAgent
framee_crossOrigin_userAgentHTTPHeader
:
defaultUserAgent
}
;
allSpoofed
=
{
appVersion
:
SPOOFED_APPVERSION
[
AppConstants
.
platform
]
hardwareConcurrency
:
SPOOFED_HW_CONCURRENCY
mimeTypesLength
:
2
oscpu
:
SPOOFED_OSCPU
[
AppConstants
.
platform
]
platform
:
SPOOFED_PLATFORM
[
AppConstants
.
platform
]
pluginsLength
:
5
userAgentNavigator
:
spoofedUserAgentNavigator
userAgentHTTPHeader
:
spoofedUserAgentHeader
framer_crossOrigin_userAgentHTTPHeader
:
spoofedUserAgentHeader
framee_crossOrigin_userAgentHTTPHeader
:
spoofedUserAgentHeader
}
;
}
)
;
const
uri
=
https
:
/
/
{
FRAMER_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_navigator_iframer
.
html
;
requestLongerTimeout
(
2
)
;
let
expectedResults
=
{
}
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
await
defaultsTest
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allSpoofed
)
;
await
simpleRFPTest
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
await
testA
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
await
testB
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allSpoofed
)
;
expectedResults
.
framer_crossOrigin_userAgentHTTPHeader
=
defaultUserAgent
;
expectedResults
.
framee_crossOrigin_userAgentHTTPHeader
=
spoofedUserAgentHeader
;
await
testC
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allSpoofed
)
;
expectedResults
.
framer_crossOrigin_userAgentHTTPHeader
=
defaultUserAgent
;
expectedResults
.
framee_crossOrigin_userAgentHTTPHeader
=
spoofedUserAgentHeader
;
await
testD
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allSpoofed
)
;
await
testE
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allSpoofed
)
;
await
testF
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allSpoofed
)
;
await
testG
(
uri
testNavigator
expectedResults
)
;
}
)
;
add_task
(
async
(
)
=
>
{
expectedResults
=
structuredClone
(
allSpoofed
)
;
await
testH
(
uri
testNavigator
expectedResults
)
;
}
)
;
