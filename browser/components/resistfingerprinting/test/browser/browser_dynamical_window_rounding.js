const
{
RFPHelper
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
RFPHelper
.
sys
.
mjs
"
)
;
const
TEST_CASES
=
[
{
width
:
1250
height
:
1000
}
{
width
:
1500
height
:
1050
}
{
width
:
1120
height
:
760
}
{
width
:
800
height
:
600
}
{
width
:
640
height
:
400
}
{
width
:
500
height
:
350
}
]
;
const
DEFAULT_URL
=
TEST_PATH
+
"
file_dummy
.
html
"
;
const
TEST_EXTENSION_DATA
=
{
manifest
:
{
name
:
"
Test
Extension
"
}
files
:
{
"
test
.
html
"
:
"
Test
"
}
}
;
function
getPlatform
(
)
{
const
{
OS
}
=
Services
.
appinfo
;
if
(
OS
=
=
"
WINNT
"
)
{
return
"
win
"
;
}
else
if
(
OS
=
=
"
Darwin
"
)
{
return
"
mac
"
;
}
return
"
linux
"
;
}
function
handleOSFuzziness
(
aContent
aTarget
)
{
if
(
getPlatform
(
)
=
=
"
win
"
)
{
return
Math
.
abs
(
aContent
-
aTarget
)
<
=
1
;
}
return
aContent
=
=
aTarget
;
}
function
checkForDefaultSetting
(
aContentWidth
aContentHeight
aRealWidth
aRealHeight
)
{
let
targetWidth
=
aRealWidth
-
2
*
RFPHelper
.
steppedRange
(
aRealWidth
true
)
;
let
targetHeight
=
aRealHeight
-
2
*
RFPHelper
.
steppedRange
(
aRealHeight
)
;
if
(
getPlatform
(
)
!
=
"
linux
"
)
{
ok
(
handleOSFuzziness
(
aContentWidth
targetWidth
)
Default
Dimensions
:
The
content
window
width
is
correctly
rounded
into
.
{
aRealWidth
}
px
-
>
{
aContentWidth
}
px
should
equal
{
targetWidth
}
px
)
;
ok
(
handleOSFuzziness
(
aContentHeight
targetHeight
)
Default
Dimensions
:
The
content
window
height
is
correctly
rounded
into
.
{
aRealHeight
}
px
-
>
{
aContentHeight
}
px
should
equal
{
targetHeight
}
px
)
;
return
true
;
}
return
(
handleOSFuzziness
(
aContentWidth
targetWidth
)
&
&
handleOSFuzziness
(
aContentHeight
targetHeight
)
)
;
}
async
function
test_dynamical_window_rounding
(
aWindow
aURL
aCheckFunc
)
{
let
promiseForTheFirstRounding
=
TestUtils
.
topicObserved
(
"
test
:
letterboxing
:
update
-
margin
-
finish
"
)
;
info
(
Open
a
content
tab
on
{
aURL
}
for
testing
.
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
aWindow
.
gBrowser
aURL
)
;
info
(
"
Wait
until
the
margins
are
applied
for
the
opened
tab
.
"
)
;
await
promiseForTheFirstRounding
;
let
getContainerSize
=
aTab
=
>
{
let
browserContainer
=
aWindow
.
gBrowser
.
getBrowserContainer
(
aTab
.
linkedBrowser
)
;
return
{
containerWidth
:
browserContainer
.
clientWidth
containerHeight
:
browserContainer
.
clientHeight
}
;
}
;
for
(
let
{
width
height
}
of
TEST_CASES
)
{
let
caseString
=
"
Case
"
+
width
+
"
x
"
+
height
+
"
:
"
;
let
promiseRounding
=
TestUtils
.
topicObserved
(
"
test
:
letterboxing
:
update
-
margin
-
finish
"
)
;
let
{
containerWidth
containerHeight
}
=
getContainerSize
(
tab
)
;
info
(
caseString
+
"
Resize
the
window
and
wait
until
resize
event
happened
(
currently
"
+
containerWidth
+
"
x
"
+
containerHeight
+
"
)
"
)
;
await
new
Promise
(
resolve
=
>
{
(
{
containerWidth
containerHeight
}
=
getContainerSize
(
tab
)
)
;
info
(
caseString
+
"
Resizing
(
currently
"
+
containerWidth
+
"
x
"
+
containerHeight
+
"
)
"
)
;
aWindow
.
onresize
=
(
)
=
>
{
(
{
containerWidth
containerHeight
}
=
getContainerSize
(
tab
)
)
;
info
(
caseString
+
"
Resized
(
currently
"
+
containerWidth
+
"
x
"
+
containerHeight
+
"
)
"
)
;
if
(
getPlatform
(
)
=
=
"
linux
"
&
&
containerWidth
!
=
width
)
{
info
(
caseString
+
"
We
hit
the
weird
resize
bug
.
Resize
it
again
.
"
)
;
aWindow
.
resizeTo
(
width
height
)
;
}
else
{
resolve
(
)
;
}
}
;
aWindow
.
resizeTo
(
width
height
)
;
}
)
;
(
{
containerWidth
containerHeight
}
=
getContainerSize
(
tab
)
)
;
info
(
caseString
+
"
Waiting
until
margin
has
been
updated
on
browser
element
.
(
currently
"
+
containerWidth
+
"
x
"
+
containerHeight
+
"
)
"
)
;
await
promiseRounding
;
info
(
caseString
+
"
Get
innerWidth
/
Height
from
the
content
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
async
(
)
=
>
{
let
{
contentWidth
contentHeight
}
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
return
{
contentWidth
:
content
.
innerWidth
contentHeight
:
content
.
innerHeight
}
;
}
)
;
info
(
caseString
+
"
Check
the
result
.
"
)
;
return
aCheckFunc
(
contentWidth
contentHeight
containerWidth
containerHeight
)
;
}
"
Default
Dimensions
:
The
content
window
width
is
correctly
rounded
into
.
"
)
;
}
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_customize_width_and_height
(
aWindow
aURL
)
{
const
test_dimensions
=
120x80
200x143
335x255
600x312
742x447
813x558
990x672
1200x733
1470x858
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
resistFingerprinting
.
letterboxing
.
dimensions
"
test_dimensions
]
]
}
)
;
let
dimensions_set
=
test_dimensions
.
split
(
"
"
)
.
map
(
item
=
>
{
let
sizes
=
item
.
split
(
"
x
"
)
.
map
(
size
=
>
parseInt
(
size
10
)
)
;
return
{
width
:
sizes
[
0
]
height
:
sizes
[
1
]
}
;
}
)
;
let
checkDimension
=
(
aContentWidth
aContentHeight
aRealWidth
aRealHeight
)
=
>
{
let
matchingArea
=
aRealWidth
*
aRealHeight
;
let
minWaste
=
Number
.
MAX_SAFE_INTEGER
;
let
targetDimensions
=
undefined
;
for
(
let
dim
of
dimensions_set
)
{
if
(
dim
.
width
>
aRealWidth
|
|
dim
.
height
>
aRealHeight
)
{
continue
;
}
let
waste
=
matchingArea
-
dim
.
width
*
dim
.
height
;
if
(
waste
>
=
0
&
&
waste
<
minWaste
)
{
targetDimensions
=
dim
;
minWaste
=
waste
;
}
}
if
(
getPlatform
(
)
!
=
"
linux
"
)
{
ok
(
handleOSFuzziness
(
aContentWidth
targetDimensions
.
width
)
Custom
Dimension
:
The
content
window
width
is
correctly
rounded
into
.
{
aRealWidth
}
px
-
>
{
aContentWidth
}
px
should
equal
{
targetDimensions
.
width
}
)
;
ok
(
handleOSFuzziness
(
aContentHeight
targetDimensions
.
height
)
Custom
Dimension
:
The
content
window
height
is
correctly
rounded
into
.
{
aRealHeight
}
px
-
>
{
aContentHeight
}
px
should
equal
{
targetDimensions
.
height
}
)
;
return
true
;
}
return
(
handleOSFuzziness
(
aContentWidth
targetDimensions
.
width
)
&
&
handleOSFuzziness
(
aContentHeight
targetDimensions
.
height
)
)
;
}
;
await
test_dynamical_window_rounding
(
aWindow
aURL
checkDimension
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
function
test_no_rounding
(
aTab
)
{
let
stack
=
aTab
.
linkedBrowser
.
closest
(
"
.
browserStack
"
)
;
let
outer
=
stack
.
getBoundingClientRect
(
)
;
let
inner
=
aTab
.
linkedBrowser
.
getBoundingClientRect
(
)
;
is
(
outer
.
width
inner
.
width
"
Outer
and
inner
widths
are
the
same
for
an
exempt
tab
.
"
)
;
is
(
outer
.
height
inner
.
height
"
Outer
and
inner
heights
are
the
same
for
an
exempt
tab
.
"
)
;
}
async
function
test_no_rounding_for
(
aWindow
aURL
)
{
let
width
=
700
;
let
height
=
450
;
if
(
aWindow
.
outerWidth
!
=
width
|
|
aWindow
.
outerHeight
!
=
height
)
{
let
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
aWindow
.
onresize
=
(
)
=
>
resolve
(
)
;
aWindow
.
resizeTo
(
width
height
)
;
await
promise
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
aWindow
.
gBrowser
aURL
)
;
test_no_rounding
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_no_rounding_fullscreen
(
aWindow
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
aWindow
.
gBrowser
DEFAULT_URL
)
;
let
fullscreenPromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
fullscreenchange
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
content
.
document
.
body
.
requestFullscreen
(
)
;
}
)
;
await
fullscreenPromise
;
test_no_rounding
(
tab
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
content
.
document
.
exitFullscreen
(
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_findbar
(
aWindow
)
{
await
new
Promise
(
resolve
=
>
{
aWindow
.
onresize
=
(
)
=
>
resolve
(
)
;
aWindow
.
resizeTo
(
701
451
)
;
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
aWindow
.
gBrowser
TEST_PATH
+
"
file_dummy
.
html
"
)
;
let
promiseRounding
=
TestUtils
.
topicObserved
(
"
test
:
letterboxing
:
update
-
margin
-
finish
"
)
;
let
findBarOpenPromise
=
BrowserTestUtils
.
waitForEvent
(
aWindow
"
findbaropen
"
)
;
EventUtils
.
synthesizeKey
(
"
F
"
{
accelKey
:
true
}
aWindow
)
;
await
findBarOpenPromise
;
await
promiseRounding
;
ok
(
true
"
Margin
updated
when
findbar
opened
"
)
;
promiseRounding
=
TestUtils
.
topicObserved
(
"
test
:
letterboxing
:
update
-
margin
-
finish
"
)
;
let
findBarClosePromise
=
BrowserTestUtils
.
waitForEvent
(
aWindow
"
findbarclose
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
aWindow
)
;
await
findBarClosePromise
;
await
promiseRounding
;
ok
(
true
"
Margin
updated
when
findbar
closed
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
resistFingerprinting
.
letterboxing
"
true
]
[
"
privacy
.
resistFingerprinting
.
letterboxing
.
testing
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
do_tests
(
)
{
let
originalOuterWidth
=
window
.
outerWidth
;
let
originalOuterHeight
=
window
.
outerHeight
;
info
(
"
Run
test
for
the
default
window
rounding
.
"
)
;
await
test_dynamical_window_rounding
(
window
DEFAULT_URL
checkForDefaultSetting
)
;
await
test_dynamical_window_rounding
(
window
"
about
:
blank
"
checkForDefaultSetting
)
;
info
(
"
Run
test
for
the
window
rounding
with
customized
dimensions
.
"
)
;
await
test_customize_width_and_height
(
window
DEFAULT_URL
)
;
await
test_customize_width_and_height
(
window
"
about
:
blank
"
)
;
info
(
"
Run
test
for
no
margin
around
tab
with
the
chrome
privilege
.
"
)
;
await
test_no_rounding_for
(
window
"
about
:
config
"
)
;
info
(
"
Run
test
for
no
margin
around
pdf
.
js
.
"
)
;
await
test_no_rounding_for
(
window
TEST_PATH
+
"
file_pdf
.
pdf
"
)
;
info
(
"
Run
test
for
no
margin
around
view
-
source
:
tab
.
"
)
;
await
test_no_rounding_for
(
window
view
-
source
:
{
DEFAULT_URL
}
)
;
info
(
"
Run
test
for
no
margin
around
extension
tabs
.
"
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
TEST_EXTENSION_DATA
)
;
await
extension
.
startup
(
)
;
await
test_no_rounding_for
(
window
moz
-
extension
:
/
/
{
extension
.
uuid
}
/
test
.
html
)
;
info
(
"
Run
test
for
no
margin
on
fullscreen
"
)
;
await
test_no_rounding_fullscreen
(
window
)
;
await
test_findbar
(
window
)
;
window
.
outerWidth
=
originalOuterWidth
;
window
.
outerHeight
=
originalOuterHeight
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
info
(
"
Run
test
for
the
default
window
rounding
in
new
window
.
"
)
;
await
test_dynamical_window_rounding
(
win
DEFAULT_URL
checkForDefaultSetting
)
;
await
test_dynamical_window_rounding
(
win
"
about
:
blank
"
checkForDefaultSetting
)
;
info
(
"
Run
test
for
the
window
rounding
with
customized
dimensions
in
new
window
.
"
)
;
await
test_customize_width_and_height
(
win
DEFAULT_URL
)
;
await
test_customize_width_and_height
(
win
"
about
:
blank
"
)
;
info
(
"
Run
test
for
no
margin
around
tab
with
the
chrome
privilege
in
new
window
.
"
)
;
await
test_no_rounding_for
(
win
"
about
:
config
"
)
;
info
(
"
Run
test
for
no
margin
around
pdf
.
js
in
new
window
.
"
)
;
await
test_no_rounding_for
(
win
TEST_PATH
+
"
file_pdf
.
pdf
"
)
;
info
(
"
Run
test
for
no
margin
around
view
-
source
:
tab
in
new
window
.
"
)
;
await
test_no_rounding_for
(
win
view
-
source
:
{
DEFAULT_URL
}
)
;
info
(
"
Run
test
for
no
margin
around
extension
tabs
in
new
window
.
"
)
;
await
test_no_rounding_for
(
win
moz
-
extension
:
/
/
{
extension
.
uuid
}
/
test
.
html
)
;
await
test_findbar
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
extension
.
unload
(
)
;
}
)
;
