"
use
strict
"
;
const
SPOOFED_HW_CONCURRENCY
=
2
;
const
DEFAULT_HARDWARE_CONCURRENCY
=
navigator
.
hardwareConcurrency
;
async
function
testHWConcurrency
(
result
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
is
(
result
.
hardwareConcurrency
expectedResults
.
hardwareConcurrency
Checking
{
testDesc
}
navigator
.
hardwareConcurrency
.
)
;
}
const
allNotSpoofed
=
{
hardwareConcurrency
:
DEFAULT_HARDWARE_CONCURRENCY
}
;
const
allSpoofed
=
{
hardwareConcurrency
:
SPOOFED_HW_CONCURRENCY
}
;
const
FRAMER_DOMAIN
=
"
example
.
com
"
;
const
IFRAME_DOMAIN
=
"
example
.
org
"
;
const
CROSS_ORIGIN_DOMAIN
=
"
example
.
net
"
;
const
uri
=
https
:
/
/
{
FRAMER_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_hwconcurrency_aboutblank_iframer
.
html
;
requestLongerTimeout
(
2
)
;
let
expectedResults
=
{
}
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allNotSpoofed
)
)
;
add_task
(
partial
(
defaultsTest
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allSpoofed
)
)
;
add_task
(
partial
(
simpleRFPTest
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allNotSpoofed
)
)
;
add_task
(
partial
(
testA
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allNotSpoofed
)
)
;
add_task
(
partial
(
testB
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allSpoofed
)
)
;
add_task
(
partial
(
testC
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allSpoofed
)
)
;
add_task
(
partial
(
testD
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allSpoofed
)
)
;
add_task
(
partial
(
testE
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allSpoofed
)
)
;
add_task
(
partial
(
testF
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allSpoofed
)
)
;
add_task
(
partial
(
testG
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
JSON
.
parse
(
JSON
.
stringify
(
allSpoofed
)
)
;
add_task
(
partial
(
testH
uri
IFRAME_DOMAIN
CROSS_ORIGIN_DOMAIN
testHWConcurrency
expectedResults
)
)
;
