"
use
strict
"
;
const
SPOOFED_HW_CONCURRENCY
=
2
;
const
DEFAULT_HARDWARE_CONCURRENCY
=
navigator
.
hardwareConcurrency
;
async
function
testHWConcurrency
(
result
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
is
(
result
.
hardwareConcurrency
expectedResults
.
hardwareConcurrency
Checking
{
testDesc
}
navigator
.
hardwareConcurrency
.
)
;
}
const
allNotSpoofed
=
{
hardwareConcurrency
:
DEFAULT_HARDWARE_CONCURRENCY
}
;
const
allSpoofed
=
{
hardwareConcurrency
:
SPOOFED_HW_CONCURRENCY
}
;
const
uri
=
https
:
/
/
{
FRAMER_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_hwconcurrency_iframer
.
html
?
mode
=
iframe
;
requestLongerTimeout
(
2
)
;
let
extraData
=
{
etp_reload
:
true
}
;
let
expectedResults
=
{
}
;
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
add_task
(
defaultsTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
extraData
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
simpleRFPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
extraData
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
simplePBMRFPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
extraData
)
)
;
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
add_task
(
simpleFPPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
extraData
)
)
;
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
add_task
(
simplePBMFPPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
extraData
)
)
;
let
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
pbmode
"
true
]
[
"
privacy
.
fingerprintingProtection
"
true
]
[
"
privacy
.
fingerprintingProtection
.
overrides
"
"
+
NavigatorHWConcurrency
"
]
]
;
let
this_extraData
=
structuredClone
(
extraData
)
;
this_extraData
.
testDesc
=
"
RFP
enabled
in
PBM
FPP
enabled
globally
testing
in
normal
browsing
mode
"
;
expectedResults
=
allNotSpoofed
;
add_task
(
defaultsTest
.
bind
(
null
uri
testHWConcurrency
structuredClone
(
expectedResults
)
this_extraData
structuredClone
(
extraPrefs
)
)
)
;
this_extraData
=
structuredClone
(
extraData
)
;
this_extraData
.
testDesc
=
"
RFP
enabled
in
PBM
FPP
enabled
globally
testing
in
PBM
"
;
this_extraData
.
private_window
=
true
;
expectedResults
=
allSpoofed
;
add_task
(
defaultsTest
.
bind
(
null
uri
testHWConcurrency
structuredClone
(
expectedResults
)
this_extraData
structuredClone
(
extraPrefs
)
)
)
;
