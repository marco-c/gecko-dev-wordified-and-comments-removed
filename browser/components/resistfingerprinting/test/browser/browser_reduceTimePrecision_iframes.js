"
use
strict
"
;
requestLongerTimeout
(
3
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
async
function
testTimePrecision
(
results
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
let
precision
=
extraData
.
precision
;
for
(
let
result
of
results
)
{
let
isRounded
=
isTimeValueRounded
(
result
.
value
precision
)
;
ok
(
isRounded
"
Test
:
"
+
testDesc
+
"
-
'
"
+
"
'
"
+
result
.
name
+
"
'
should
be
rounded
to
nearest
"
+
precision
+
"
ms
;
saw
"
+
result
.
value
)
;
}
}
const
framer_domain
=
"
example
.
com
"
;
const
iframe_domain
=
"
example
.
org
"
;
const
cross_origin_domain
=
"
example
.
net
"
;
const
uri
=
https
:
/
/
{
framer_domain
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_reduceTimePrecision_iframer
.
html
;
let
extraData
=
{
}
;
let
extraPrefs
=
{
}
;
let
precision
=
100
;
let
expectedResults
=
{
}
;
function
addAllTests
(
extraData_
extraPrefs_
)
{
add_task
(
partial
(
defaultsTest
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
simpleRFPTest
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testA
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testB
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testC
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testD
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testE
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testF
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testG
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
partial
(
testH
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
}
precision
=
100
;
extraData
=
{
precision
}
;
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
reduceTimerPrecision
.
microseconds
"
precision
*
1000
]
]
;
addAllTests
(
precision
extraData
extraPrefs
)
;
precision
=
133
;
extraData
=
{
precision
}
;
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
reduceTimerPrecision
.
microseconds
"
precision
*
1000
]
]
;
addAllTests
(
precision
extraData
extraPrefs
)
;
