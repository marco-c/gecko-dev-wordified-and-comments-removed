"
use
strict
"
;
requestLongerTimeout
(
3
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
async
function
testTimePrecision
(
results
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
let
precision
=
undefined
;
if
(
!
expectedResults
.
shouldRFPApply
)
{
precision
=
extraData
.
RTP_Precision
;
}
else
{
precision
=
extraData
.
RFP_Precision
;
}
for
(
let
result
of
results
)
{
let
isRounded
=
isTimeValueRounded
(
result
.
value
precision
)
;
ok
(
isRounded
"
Test
:
"
+
testDesc
+
"
-
'
"
+
"
'
"
+
result
.
name
+
"
'
should
be
rounded
to
nearest
"
+
precision
+
"
ms
;
saw
"
+
result
.
value
)
;
}
}
const
RFP_TIME_ATOM_MS
=
16
.
667
;
const
framer_domain
=
"
example
.
com
"
;
const
iframe_domain
=
"
example
.
org
"
;
const
cross_origin_domain
=
"
example
.
net
"
;
const
uri
=
https
:
/
/
{
framer_domain
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_reduceTimePrecision_iframer
.
html
;
let
extraData
=
{
}
;
let
extraPrefs
=
{
}
;
let
precision
=
100
;
let
expectedResults
=
{
}
;
function
addAllTests
(
extraData_
extraPrefs_
)
{
add_task
(
defaultsTest
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
simpleRFPTest
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testA
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testB
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testC
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testD
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testE
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testF
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testG
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testH
.
bind
(
null
uri
iframe_domain
cross_origin_domain
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
}
precision
=
100
;
extraData
=
{
RFP_Precision
:
precision
RTP_Precision
:
precision
}
;
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
reduceTimerPrecision
.
microseconds
"
precision
*
1000
]
]
;
addAllTests
(
extraData
extraPrefs
)
;
precision
=
133
;
extraData
=
{
RFP_Precision
:
precision
RTP_Precision
:
precision
}
;
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
reduceTimerPrecision
.
microseconds
"
precision
*
1000
]
]
;
addAllTests
(
extraData
extraPrefs
)
;
precision
=
RFP_TIME_ATOM_MS
;
extraData
=
{
RFP_Precision
:
precision
RTP_Precision
:
1
}
;
extraPrefs
=
[
]
;
addAllTests
(
extraData
extraPrefs
)
;
precision
=
RFP_TIME_ATOM_MS
;
extraData
=
{
RFP_Precision
:
RFP_TIME_ATOM_MS
RTP_Precision
:
7
}
;
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
reduceTimerPrecision
.
microseconds
"
7
*
1000
]
]
;
addAllTests
(
extraData
extraPrefs
)
;
