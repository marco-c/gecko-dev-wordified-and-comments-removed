"
use
strict
"
;
requestLongerTimeout
(
3
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
}
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
wait300msAfterTabSwitch
"
true
]
]
}
)
;
}
)
;
async
function
testTimePrecision
(
results
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
let
precision
=
undefined
;
if
(
!
expectedResults
.
shouldRFPApply
)
{
precision
=
extraData
.
Unconditional_Precision
;
}
else
{
precision
=
extraData
.
RFP_Precision
;
}
for
(
let
result
of
results
)
{
if
(
"
error
"
in
result
)
{
ok
(
false
result
.
error
)
;
continue
;
}
let
isRounded
=
isTimeValueRounded
(
result
.
value
precision
)
;
ok
(
isRounded
"
Test
:
"
+
testDesc
+
"
-
'
"
+
"
'
"
+
result
.
name
+
"
'
should
be
rounded
to
nearest
"
+
precision
+
"
ms
;
saw
"
+
result
.
value
)
;
}
}
const
RFP_TIME_ATOM_MS
=
16
.
667
;
const
uri
=
https
:
/
/
{
FRAMER_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_animationapi_iframer
.
html
;
let
extraData
=
{
}
;
let
extraPrefs
=
{
}
;
let
precision
=
100
;
let
expectedResults
=
{
}
;
function
addAllTests
(
extraData_
extraPrefs_
)
{
add_task
(
defaultsTest
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
simpleRFPTest
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testA
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testB
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testC
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testD
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testE
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testF
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testG
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
add_task
(
testH
.
bind
(
null
uri
testTimePrecision
expectedResults
extraData_
extraPrefs_
)
)
;
}
extraData
=
{
RFP_Precision
:
100
Unconditional_Precision
:
0
.
02
}
;
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
reduceTimerPrecision
.
microseconds
"
extraData
.
RFP_Precision
*
1000
]
]
;
addAllTests
(
extraData
extraPrefs
)
;
extraData
=
{
RFP_Precision
:
133
Unconditional_Precision
:
0
.
02
}
;
extraPrefs
=
[
[
"
privacy
.
resistFingerprinting
.
reduceTimerPrecision
.
microseconds
"
extraData
.
RFP_Precision
*
1000
]
]
;
addAllTests
(
extraData
extraPrefs
)
;
extraData
=
{
RFP_Precision
:
RFP_TIME_ATOM_MS
Unconditional_Precision
:
0
.
02
}
;
extraPrefs
=
[
]
;
addAllTests
(
extraData
extraPrefs
)
;
