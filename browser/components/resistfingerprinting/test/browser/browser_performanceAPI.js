const
TEST_PATH
=
"
http
:
/
/
example
.
net
/
browser
/
browser
/
"
+
"
components
/
resistfingerprinting
/
test
/
browser
/
"
const
PERFORMANCE_TIMINGS
=
[
"
navigationStart
"
"
unloadEventStart
"
"
unloadEventEnd
"
"
redirectStart
"
"
redirectEnd
"
"
fetchStart
"
"
domainLookupStart
"
"
domainLookupEnd
"
"
connectStart
"
"
connectEnd
"
"
requestStart
"
"
responseStart
"
"
responseEnd
"
"
domLoading
"
"
domInteractive
"
"
domContentLoadedEventStart
"
"
domContentLoadedEventEnd
"
"
domComplete
"
"
loadEventStart
"
"
loadEventEnd
"
]
;
add_task
(
async
function
runTests
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
privacy
.
resistFingerprinting
"
true
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PATH
+
"
file_dummy
.
html
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
PERFORMANCE_TIMINGS
async
function
(
list
)
{
for
(
let
time
of
list
)
{
is
(
content
.
performance
.
timing
[
time
]
0
The
timing
(
{
time
}
)
is
correctly
spoofed
.
)
;
}
content
.
performance
.
mark
(
"
Test
"
)
;
content
.
performance
.
mark
(
"
Test
-
End
"
)
;
content
.
performance
.
measure
(
"
Test
-
Measure
"
"
Test
"
"
Test
-
End
"
)
;
is
(
content
.
performance
.
getEntries
(
)
.
length
0
"
No
entries
for
performance
.
getEntries
(
)
"
)
;
is
(
content
.
performance
.
getEntriesByType
(
"
resource
"
)
.
length
0
"
No
entries
for
performance
.
getEntriesByType
(
)
"
)
;
is
(
content
.
performance
.
getEntriesByName
(
"
Test
"
"
mark
"
)
.
length
0
"
No
entries
for
performance
.
getEntriesByName
(
)
"
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
