"
use
strict
"
;
function
countDifferencesInUint8Arrays
(
arr1
arr2
)
{
let
count
=
0
;
for
(
let
i
=
0
;
i
<
arr1
.
length
;
i
+
+
)
{
let
diff
=
arr1
[
i
]
^
arr2
[
i
]
;
while
(
diff
>
0
)
{
count
+
=
diff
&
1
;
diff
>
>
=
1
;
}
}
return
count
;
}
async
function
testCanvasRandomization
(
result
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
let
differences
=
countDifferencesInUint8Arrays
(
result
UNMODIFIED_CANVAS_DATA
)
;
Assert
.
greaterOrEqual
(
differences
expectedResults
[
0
]
Checking
{
testDesc
}
for
canvas
randomization
-
did
not
see
enough
random
pixels
.
)
;
Assert
.
lessOrEqual
(
differences
expectedResults
[
1
]
Checking
{
testDesc
}
for
canvas
randomization
-
saw
too
many
random
pixels
.
)
;
}
requestLongerTimeout
(
2
)
;
let
expectedResults
=
{
}
;
var
UNMODIFIED_CANVAS_DATA
=
undefined
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
fingerprintingProtection
"
false
]
[
"
privacy
.
fingerprintingProtection
.
pbmode
"
false
]
[
"
privacy
.
resistFingerprinting
"
false
]
]
}
)
;
let
extractCanvasData
=
function
(
)
{
let
offscreenCanvas
=
new
OffscreenCanvas
(
100
100
)
;
const
context
=
offscreenCanvas
.
getContext
(
"
2d
"
)
;
context
.
fillStyle
=
"
#
EE2222
"
;
context
.
fillRect
(
0
0
100
100
)
;
context
.
fillStyle
=
"
#
2222EE
"
;
context
.
fillRect
(
20
20
100
100
)
;
const
imageData
=
context
.
getImageData
(
0
0
100
100
)
;
return
imageData
.
data
;
}
;
function
runExtractCanvasData
(
tab
)
{
let
code
=
extractCanvasData
.
toString
(
)
;
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
code
]
async
funccode
=
>
{
await
content
.
eval
(
var
extractCanvasData
=
{
funccode
}
)
;
let
result
=
await
content
.
eval
(
extractCanvasData
(
)
)
;
return
result
;
}
)
;
}
const
emptyPage
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
empty
.
html
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
emptyPage
)
;
let
data
=
await
runExtractCanvasData
(
tab
)
;
UNMODIFIED_CANVAS_DATA
=
data
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
const
rfpFullyRandomized
=
[
10000
999999999
]
;
const
fppRandomized
=
[
1
260
]
;
const
noRandom
=
[
0
0
]
;
const
uri
=
https
:
/
/
{
FRAMER_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_canvas_iframer
.
html
?
mode
=
iframe
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
defaultsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
fppRandomized
)
;
add_task
(
defaultsPBMTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
simpleRFPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
simplePBMRFPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
fppRandomized
)
;
add_task
(
simpleFPPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
fppRandomized
)
;
add_task
(
simplePBMFPPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
RFPPBMFPP_NormalMode_NoProtectionsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
fppRandomized
)
;
add_task
(
RFPPBMFPP_NormalMode_ProtectionsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
testA
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
testB
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
testC
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
testD
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
testE
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
testF
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
testG
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
rfpFullyRandomized
)
;
add_task
(
testH
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
