"
use
strict
"
;
async
function
testCanvasRandomization
(
result
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
let
parent
=
result
.
mine
;
let
child
=
result
.
theirs
;
let
unmodified
=
UNMODIFIED_CANVAS_DATA
;
if
(
expectedResults
.
shouldBeRandom
)
{
if
(
expectedResults
.
shouldRFPApply
)
{
Assert
.
notEqual
(
parent
child
Checking
{
testDesc
}
for
RFP
canvas
randomization
parent
!
=
child
+
is
{
parent
!
=
child
}
)
;
Assert
.
notEqual
(
parent
unmodified
Checking
{
testDesc
}
for
RFP
canvas
randomization
parent
!
=
unmodified
+
is
{
parent
!
=
unmodified
}
)
;
}
else
{
Assert
.
equal
(
parent
child
Checking
{
testDesc
}
for
canvas
randomization
parent
=
=
child
+
is
{
parent
=
=
child
}
)
;
Assert
.
notEqual
(
parent
unmodified
Checking
{
testDesc
}
for
canvas
randomization
parent
!
=
unmodified
+
is
{
parent
!
=
unmodified
}
)
;
}
}
else
{
Assert
.
equal
(
parent
child
Checking
{
testDesc
}
for
no
canvas
randomization
parent
=
=
child
+
is
{
parent
=
=
child
}
)
;
Assert
.
equal
(
parent
unmodified
Checking
{
testDesc
}
for
no
canvas
randomization
parent
=
=
unmodified
+
is
{
parent
=
=
unmodified
}
)
;
}
}
requestLongerTimeout
(
2
)
;
var
UNMODIFIED_CANVAS_DATA
=
undefined
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
fingerprintingProtection
.
overrides
"
"
+
EfficientCanvasRandomization
-
CanvasRandomization
"
]
]
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
fingerprintingProtection
"
false
]
[
"
privacy
.
fingerprintingProtection
.
pbmode
"
false
]
[
"
privacy
.
resistFingerprinting
"
false
]
]
}
)
;
function
runExtractCanvasData
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
canvas
=
content
.
document
.
createElement
(
"
canvas
"
)
;
canvas
.
width
=
100
;
canvas
.
height
=
100
;
const
context
=
canvas
.
getContext
(
"
2d
"
)
;
context
.
fillStyle
=
"
#
EE2222
"
;
context
.
fillRect
(
0
0
100
100
)
;
context
.
fillStyle
=
"
#
2222EE
"
;
context
.
fillRect
(
20
20
100
100
)
;
content
.
document
.
body
.
appendChild
(
canvas
)
;
let
url
=
canvas
.
toDataURL
(
)
;
return
url
;
}
)
;
}
const
emptyPage
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
empty
.
html
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
emptyPage
)
;
let
data
=
await
runExtractCanvasData
(
tab
)
;
UNMODIFIED_CANVAS_DATA
=
data
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
let
uri
=
https
:
/
/
{
FRAMER_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_efficientcanvascompare_iframer
.
html
?
mode
=
iframe
;
let
shouldBeRandom
=
{
shouldBeRandom
:
true
}
;
let
noRandom
=
{
shouldBeRandom
:
false
}
;
let
expectedResults
=
undefined
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
defaultsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
defaultsPBMTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simpleRFPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simplePBMRFPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simpleFPPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simplePBMFPPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
RFPPBMFPP_NormalMode_NoProtectionsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
RFPPBMFPP_NormalMode_ProtectionsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
uri
=
https
:
/
/
{
IFRAME_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_efficientcanvascompare_iframer
.
html
?
mode
=
iframe
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
defaultsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simpleRFPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simplePBMRFPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simpleFPPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
simplePBMFPPTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
noRandom
)
;
add_task
(
RFPPBMFPP_NormalMode_NoProtectionsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
expectedResults
=
structuredClone
(
shouldBeRandom
)
;
add_task
(
RFPPBMFPP_NormalMode_ProtectionsTest
.
bind
(
null
uri
testCanvasRandomization
expectedResults
)
)
;
