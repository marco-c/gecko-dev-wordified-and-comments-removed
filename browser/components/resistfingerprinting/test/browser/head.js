"
use
strict
"
;
function
*
calcMaximumAvailSize
(
aChromeWidth
aChromeHeight
)
{
let
chromeUIWidth
;
let
chromeUIHeight
;
let
testPath
=
"
http
:
/
/
example
.
net
/
browser
/
browser
/
"
+
"
components
/
resistFingerprinting
/
test
/
browser
/
"
if
(
!
aChromeWidth
|
|
!
aChromeHeight
)
{
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testPath
+
"
file_dummy
.
html
"
)
;
let
contentSize
=
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
function
*
(
)
{
let
result
=
{
width
:
content
.
innerWidth
height
:
content
.
innerHeight
}
;
return
result
;
}
)
;
chromeUIWidth
=
window
.
outerWidth
-
contentSize
.
width
;
chromeUIHeight
=
window
.
outerHeight
-
contentSize
.
height
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
else
{
chromeUIWidth
=
aChromeWidth
;
chromeUIHeight
=
aChromeHeight
;
}
let
availWidth
=
window
.
screen
.
availWidth
;
let
availHeight
=
window
.
screen
.
availHeight
;
let
availContentWidth
=
Math
.
min
(
1000
availWidth
-
chromeUIWidth
)
;
let
availContentHeight
;
if
(
AppConstants
.
MOZ_WIDGET_GTK
)
{
availContentHeight
=
Math
.
min
(
1000
-
40
+
availHeight
-
chromeUIHeight
)
;
}
else
{
availContentHeight
=
Math
.
min
(
1000
availHeight
-
chromeUIHeight
)
;
}
let
maxAvailWidth
=
availContentWidth
-
(
availContentWidth
%
200
)
;
let
maxAvailHeight
=
availContentHeight
-
(
availContentHeight
%
100
)
;
return
{
maxAvailWidth
maxAvailHeight
}
;
}
function
*
calcPopUpWindowChromeUISize
(
)
{
let
testPath
=
"
http
:
/
/
example
.
net
/
browser
/
browser
/
"
+
"
components
/
resistFingerprinting
/
test
/
browser
/
"
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testPath
+
"
file_dummy
.
html
"
)
;
let
result
=
yield
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
function
*
(
)
{
let
win
;
yield
new
Promise
(
resolve
=
>
{
win
=
content
.
open
(
"
about
:
blank
"
"
"
"
width
=
1000
height
=
1000
"
)
;
win
.
onload
=
(
)
=
>
resolve
(
)
;
}
)
;
let
res
=
{
chromeWidth
:
win
.
outerWidth
-
win
.
innerWidth
chromeHeight
:
win
.
outerHeight
-
win
.
innerHeight
}
;
win
.
close
(
)
;
return
res
;
}
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
return
result
;
}
function
*
testWindowOpen
(
aBrowser
aSettingWidth
aSettingHeight
aTargetWidth
aTargetHeight
aTestOuter
aMaxAvailWidth
aMaxAvailHeight
aPopupChromeUIWidth
aPopupChromeUIHeight
)
{
if
(
aTargetWidth
>
aMaxAvailWidth
)
{
aTargetWidth
=
aMaxAvailWidth
;
}
if
(
aTargetHeight
>
aMaxAvailHeight
)
{
aTargetHeight
=
aMaxAvailHeight
;
}
let
winFeatures
;
if
(
aTestOuter
)
{
winFeatures
=
"
outerWidth
=
"
+
(
aSettingWidth
+
aPopupChromeUIWidth
)
+
"
outerHeight
=
"
+
(
aSettingHeight
+
aPopupChromeUIHeight
)
;
}
else
{
winFeatures
=
"
width
=
"
+
aSettingWidth
+
"
height
=
"
+
aSettingHeight
;
}
let
testParams
=
{
winFeatures
targetWidth
:
aTargetWidth
targetHeight
:
aTargetHeight
}
;
yield
ContentTask
.
spawn
(
aBrowser
testParams
function
*
(
input
)
{
yield
new
Promise
(
resolve
=
>
{
let
win
=
content
.
open
(
"
http
:
/
/
example
.
net
/
"
"
"
input
.
winFeatures
)
;
win
.
onload
=
(
)
=
>
{
is
(
win
.
screen
.
width
input
.
targetWidth
"
The
screen
.
width
has
a
correct
rounded
value
"
)
;
is
(
win
.
screen
.
height
input
.
targetHeight
"
The
screen
.
height
has
a
correct
rounded
value
"
)
;
is
(
win
.
innerWidth
input
.
targetWidth
"
The
window
.
innerWidth
has
a
correct
rounded
value
"
)
;
is
(
win
.
innerHeight
input
.
targetHeight
"
The
window
.
innerHeight
has
a
correct
rounded
value
"
)
;
win
.
close
(
)
resolve
(
)
;
}
;
}
)
;
}
)
;
}
function
*
testWindowSizeSetting
(
aBrowser
aSettingWidth
aSettingHeight
aTargetWidth
aTargetHeight
aInitWidth
aInitHeight
aTestOuter
aMaxAvailWidth
aMaxAvailHeight
aPopupChromeUIWidth
aPopupChromeUIHeight
)
{
if
(
aTargetWidth
>
aMaxAvailWidth
)
{
aTargetWidth
=
aMaxAvailWidth
;
}
if
(
aTargetHeight
>
aMaxAvailHeight
)
{
aTargetHeight
=
aMaxAvailHeight
;
}
let
testParams
=
{
initWidth
:
aInitWidth
initHeight
:
aInitHeight
settingWidth
:
aSettingWidth
+
(
aTestOuter
?
aPopupChromeUIWidth
:
0
)
settingHeight
:
aSettingHeight
+
(
aTestOuter
?
aPopupChromeUIHeight
:
0
)
targetWidth
:
aTargetWidth
targetHeight
:
aTargetHeight
testOuter
:
aTestOuter
}
;
yield
ContentTask
.
spawn
(
aBrowser
testParams
function
*
(
input
)
{
let
win
;
yield
new
Promise
(
resolve
=
>
{
let
initWinFeatures
=
"
width
=
"
+
input
.
initWidth
+
"
height
=
"
+
input
.
initHeight
;
win
=
content
.
open
(
"
http
:
/
/
example
.
net
/
"
"
"
initWinFeatures
)
;
win
.
onload
=
(
)
=
>
resolve
(
)
;
}
)
;
yield
new
Promise
(
resolve
=
>
{
win
.
onresize
=
(
)
=
>
{
is
(
win
.
screen
.
width
input
.
targetWidth
"
The
screen
.
width
has
a
correct
rounded
value
"
)
;
is
(
win
.
innerWidth
input
.
targetWidth
"
The
window
.
innerWidth
has
a
correct
rounded
value
"
)
;
resolve
(
)
;
}
;
if
(
input
.
testOuter
)
{
win
.
outerWidth
=
input
.
settingWidth
;
}
else
{
win
.
innerWidth
=
input
.
settingWidth
;
}
}
)
;
yield
new
Promise
(
resolve
=
>
{
win
.
onresize
=
(
)
=
>
{
is
(
win
.
screen
.
height
input
.
targetHeight
"
The
screen
.
height
has
a
correct
rounded
value
"
)
;
is
(
win
.
innerHeight
input
.
targetHeight
"
The
window
.
innerHeight
has
a
correct
rounded
value
"
)
;
resolve
(
)
;
}
;
if
(
input
.
testOuter
)
{
win
.
outerHeight
=
input
.
settingHeight
;
}
else
{
win
.
innerHeight
=
input
.
settingHeight
;
}
}
)
;
win
.
close
(
)
;
}
)
;
}
