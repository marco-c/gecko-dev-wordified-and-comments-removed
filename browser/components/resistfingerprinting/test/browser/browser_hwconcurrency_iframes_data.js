"
use
strict
"
;
const
SPOOFED_HW_CONCURRENCY
=
SpecialPowers
.
Services
.
appinfo
.
OS
=
=
"
Darwin
"
?
8
:
4
;
const
DEFAULT_HARDWARE_CONCURRENCY
=
navigator
.
hardwareConcurrency
;
async
function
testHWConcurrency
(
result
expectedResults
extraData
)
{
let
testDesc
=
extraData
.
testDesc
;
is
(
result
.
hardwareConcurrency
expectedResults
.
hardwareConcurrency
Checking
{
testDesc
}
navigator
.
hardwareConcurrency
.
)
;
}
add_setup
(
async
function
(
)
{
registerCleanupFunction
(
async
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
privacy
.
trackingprotection
.
allow_list
.
hasUserInteractedWithETPSettings
"
)
;
}
)
;
}
)
;
const
allNotSpoofed
=
{
hardwareConcurrency
:
DEFAULT_HARDWARE_CONCURRENCY
}
;
const
allSpoofed
=
{
hardwareConcurrency
:
SPOOFED_HW_CONCURRENCY
}
;
const
uri
=
https
:
/
/
{
FRAMER_DOMAIN
}
/
browser
/
browser
/
components
/
resistfingerprinting
/
test
/
browser
/
file_hwconcurrency_data_iframer
.
html
;
requestLongerTimeout
(
2
)
;
let
expectedResults
=
{
}
;
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
add_task
(
defaultsTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
simpleRFPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
simplePBMRFPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
simpleFPPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
simplePBMFPPTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
add_task
(
testA
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
add_task
(
testB
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
testC
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
testD
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
testE
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
testF
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
testG
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allSpoofed
)
;
add_task
(
testH
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
expectedResults
=
structuredClone
(
allNotSpoofed
)
;
add_task
(
RFPPBMFPP_NormalMode_NoProtectionsTest
.
bind
(
null
uri
testHWConcurrency
expectedResults
)
)
;
