"
use
strict
"
;
const
PTU
=
SpecialPowers
.
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
PaymentTestUtils
.
jsm
"
{
}
)
.
PaymentTestUtils
;
function
asyncElementRendered
(
)
{
return
Promise
.
resolve
(
)
;
}
function
promiseStateChange
(
store
)
{
return
new
Promise
(
resolve
=
>
{
store
.
subscribe
(
{
stateChangeCallback
(
state
)
{
store
.
unsubscribe
(
this
)
;
resolve
(
state
)
;
}
}
)
;
}
)
;
}
function
promiseContentToChromeMessage
(
messageType
)
{
return
new
Promise
(
resolve
=
>
{
document
.
addEventListener
(
"
paymentContentToChrome
"
function
onCToC
(
event
)
{
if
(
event
.
detail
.
messageType
!
=
messageType
)
{
return
;
}
document
.
removeEventListener
(
"
paymentContentToChrome
"
onCToC
)
;
resolve
(
event
.
detail
)
;
}
)
;
}
)
;
}
function
importDialogDependencies
(
templateFrame
destinationEl
)
{
let
templates
=
templateFrame
.
contentDocument
.
querySelectorAll
(
"
template
"
)
;
isnot
(
templates
null
"
Check
some
templates
found
"
)
;
for
(
let
template
of
templates
)
{
let
imported
=
document
.
importNode
(
template
true
)
;
destinationEl
.
appendChild
(
imported
)
;
}
let
baseURL
=
new
URL
(
"
.
.
/
.
.
/
res
/
"
window
.
location
.
href
)
;
let
stylesheetLinks
=
templateFrame
.
contentDocument
.
querySelectorAll
(
"
link
[
rel
~
=
'
stylesheet
'
]
"
)
;
for
(
let
stylesheet
of
stylesheetLinks
)
{
let
imported
=
document
.
importNode
(
stylesheet
true
)
;
imported
.
href
=
new
URL
(
imported
.
getAttribute
(
"
href
"
)
baseURL
)
;
destinationEl
.
appendChild
(
imported
)
;
}
}
function
deepClone
(
obj
)
{
return
JSON
.
parse
(
JSON
.
stringify
(
obj
)
)
;
}
async
function
fillField
(
field
value
)
{
field
.
focus
(
)
;
if
(
field
.
localName
=
=
"
select
"
)
{
if
(
field
.
value
=
=
value
)
{
return
;
}
field
.
value
=
value
;
field
.
dispatchEvent
(
new
Event
(
"
input
"
{
bubbles
:
true
}
)
)
;
field
.
dispatchEvent
(
new
Event
(
"
change
"
{
bubbles
:
true
}
)
)
;
return
;
}
while
(
field
.
value
)
{
sendKey
(
"
BACK_SPACE
"
)
;
}
sendString
(
value
)
;
}
let
filterFunction
=
null
;
function
registerConsoleFilter
(
filterFn
)
{
filterFunction
=
filterFn
;
}
SpecialPowers
.
registerConsoleListener
(
function
onConsoleMessage
(
msg
)
{
if
(
msg
.
isWarning
|
|
!
msg
.
errorMessage
|
|
msg
.
errorMessage
=
=
"
paymentRequest
.
xhtml
:
"
)
{
return
;
}
if
(
msg
.
category
=
=
"
CSP_CSPViolationWithURI
"
&
&
msg
.
errorMessage
.
includes
(
"
at
inline
"
)
)
{
return
;
}
if
(
msg
.
message
&
&
msg
.
message
.
includes
(
"
Security
Error
:
Content
at
http
:
/
/
mochi
.
test
:
8888
"
)
)
{
if
(
msg
.
message
.
includes
(
"
icon
-
credit
-
card
-
generic
.
svg
"
)
|
|
msg
.
message
.
includes
(
"
accepted
-
cards
.
css
"
)
|
|
msg
.
message
.
includes
(
"
editDialog
-
shared
.
css
"
)
|
|
msg
.
message
.
includes
(
"
editAddress
.
css
"
)
|
|
msg
.
message
.
includes
(
"
editDialog
.
css
"
)
|
|
msg
.
message
.
includes
(
"
editCreditCard
.
css
"
)
)
{
return
;
}
}
if
(
msg
.
message
=
=
"
SENTINEL
"
)
{
filterFunction
=
null
;
}
if
(
filterFunction
&
&
filterFunction
(
msg
)
)
{
return
;
}
ok
(
false
msg
.
message
|
|
msg
.
errorMessage
)
;
}
)
;
SimpleTest
.
registerCleanupFunction
(
function
cleanup
(
)
{
SpecialPowers
.
postConsoleSentinel
(
)
;
}
)
;
