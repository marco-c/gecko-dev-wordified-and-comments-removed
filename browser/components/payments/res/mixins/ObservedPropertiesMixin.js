export
default
function
ObservedPropertiesMixin
(
superClass
)
{
return
class
ObservedProperties
extends
superClass
{
static
kebabToCamelCase
(
name
)
{
return
name
.
replace
(
/
-
(
[
a
-
z
]
)
/
g
(
0
1
)
=
>
1
.
toUpperCase
(
)
)
;
}
constructor
(
)
{
super
(
)
;
this
.
_observedPropertiesMixin
=
{
pendingRender
:
false
}
;
for
(
let
name
of
this
.
constructor
.
observedAttributes
|
|
[
]
)
{
if
(
name
in
this
)
{
continue
;
}
Object
.
defineProperty
(
this
ObservedProperties
.
kebabToCamelCase
(
name
)
{
configurable
:
true
get
(
)
{
return
this
.
getAttribute
(
name
)
;
}
set
(
value
)
{
if
(
value
=
=
=
null
|
|
value
=
=
=
undefined
|
|
value
=
=
=
false
)
{
this
.
removeAttribute
(
name
)
;
}
else
{
this
.
setAttribute
(
name
value
)
;
}
}
}
)
;
}
}
async
_invalidateFromObservedPropertiesMixin
(
)
{
if
(
this
.
_observedPropertiesMixin
.
pendingRender
)
{
return
;
}
this
.
_observedPropertiesMixin
.
pendingRender
=
true
;
await
Promise
.
resolve
(
)
;
try
{
this
.
render
(
)
;
}
finally
{
this
.
_observedPropertiesMixin
.
pendingRender
=
false
;
}
}
attributeChangedCallback
(
attr
oldValue
newValue
)
{
if
(
super
.
attributeChangedCallback
)
{
super
.
attributeChangedCallback
(
attr
oldValue
newValue
)
;
}
if
(
oldValue
=
=
=
newValue
)
{
return
;
}
this
.
_invalidateFromObservedPropertiesMixin
(
)
;
}
}
;
}
