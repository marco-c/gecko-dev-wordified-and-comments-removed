import
PaymentsStore
from
"
.
.
/
PaymentsStore
.
js
"
;
export
let
requestStore
=
new
PaymentsStore
(
{
changesPrevented
:
false
orderDetailsShowing
:
false
"
basic
-
card
-
page
"
:
{
guid
:
null
}
"
address
-
page
"
:
{
guid
:
null
title
:
"
"
}
"
payment
-
summary
"
:
{
}
page
:
{
id
:
"
payment
-
summary
"
previousId
:
null
}
request
:
{
completeStatus
:
"
"
tabId
:
null
topLevelPrincipal
:
{
URI
:
{
displayHost
:
null
}
}
requestId
:
null
paymentMethods
:
[
]
paymentDetails
:
{
id
:
null
totalItem
:
{
label
:
null
amount
:
{
currency
:
null
value
:
0
}
}
displayItems
:
[
]
shippingAddressErrors
:
{
}
shippingOptions
:
[
]
modifiers
:
null
error
:
"
"
}
paymentOptions
:
{
requestPayerName
:
false
requestPayerEmail
:
false
requestPayerPhone
:
false
requestShipping
:
false
shippingType
:
"
shipping
"
}
shippingOption
:
null
}
selectedPayerAddress
:
null
selectedPaymentCard
:
null
selectedPaymentCardSecurityCode
:
null
selectedShippingAddress
:
null
selectedShippingOption
:
null
savedAddresses
:
{
}
savedBasicCards
:
{
}
tempAddresses
:
{
}
tempBasicCards
:
{
}
}
)
;
export
default
function
PaymentStateSubscriberMixin
(
superClass
)
{
return
class
PaymentStateSubscriber
extends
superClass
{
constructor
(
)
{
super
(
)
;
this
.
requestStore
=
requestStore
;
}
connectedCallback
(
)
{
this
.
requestStore
.
subscribe
(
this
)
;
this
.
render
(
this
.
requestStore
.
getState
(
)
)
;
if
(
super
.
connectedCallback
)
{
super
.
connectedCallback
(
)
;
}
}
disconnectedCallback
(
)
{
this
.
requestStore
.
unsubscribe
(
this
)
;
if
(
super
.
disconnectedCallback
)
{
super
.
disconnectedCallback
(
)
;
}
}
stateChangeCallback
(
state
)
{
this
.
render
(
state
)
;
}
}
;
}
