import
ObservedPropertiesMixin
from
"
.
.
/
mixins
/
ObservedPropertiesMixin
.
js
"
;
import
RichOption
from
"
.
/
rich
-
option
.
js
"
;
export
default
class
RichSelect
extends
ObservedPropertiesMixin
(
HTMLElement
)
{
static
get
observedAttributes
(
)
{
return
[
"
disabled
"
"
hidden
"
]
;
}
constructor
(
)
{
super
(
)
;
this
.
popupBox
=
document
.
createElement
(
"
select
"
)
;
}
connectedCallback
(
)
{
this
.
popupBox
.
addEventListener
(
"
change
"
this
)
;
this
.
appendChild
(
this
.
popupBox
)
;
this
.
render
(
)
;
}
get
selectedOption
(
)
{
return
this
.
getOptionByValue
(
this
.
value
)
;
}
get
selectedRichOption
(
)
{
return
this
.
querySelector
(
"
:
scope
>
.
rich
-
select
-
selected
-
option
"
)
;
}
get
value
(
)
{
return
this
.
popupBox
.
value
;
}
set
value
(
guid
)
{
this
.
popupBox
.
value
=
guid
;
this
.
render
(
)
;
}
getOptionByValue
(
value
)
{
return
this
.
popupBox
.
querySelector
(
:
scope
>
[
value
=
"
{
CSS
.
escape
(
value
)
}
"
]
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
change
"
:
{
this
.
render
(
)
;
break
;
}
}
}
render
(
)
{
let
selectedRichOption
=
this
.
querySelector
(
"
:
scope
>
.
rich
-
select
-
selected
-
option
"
)
;
if
(
selectedRichOption
)
{
selectedRichOption
.
remove
(
)
;
}
if
(
this
.
value
)
{
let
optionType
=
this
.
getAttribute
(
"
option
-
type
"
)
;
if
(
!
selectedRichOption
|
|
selectedRichOption
.
localName
!
=
optionType
)
{
selectedRichOption
=
document
.
createElement
(
optionType
)
;
}
let
option
=
this
.
getOptionByValue
(
this
.
value
)
;
let
attributeNames
=
selectedRichOption
.
constructor
.
observedAttributes
;
for
(
let
attributeName
of
attributeNames
)
{
let
attributeValue
=
option
.
getAttribute
(
attributeName
)
;
if
(
attributeValue
)
{
selectedRichOption
.
setAttribute
(
attributeName
attributeValue
)
;
}
else
{
selectedRichOption
.
removeAttribute
(
attributeName
)
;
}
}
}
else
{
selectedRichOption
=
new
RichOption
(
)
;
selectedRichOption
.
textContent
=
"
(
None
selected
)
"
;
}
selectedRichOption
.
classList
.
add
(
"
rich
-
select
-
selected
-
option
"
)
;
selectedRichOption
.
setAttribute
(
"
aria
-
hidden
"
"
true
"
)
;
selectedRichOption
=
this
.
appendChild
(
selectedRichOption
)
;
}
}
customElements
.
define
(
"
rich
-
select
"
RichSelect
)
;
