import
ObservedPropertiesMixin
from
"
.
.
/
mixins
/
ObservedPropertiesMixin
.
js
"
;
export
default
class
CscInput
extends
ObservedPropertiesMixin
(
HTMLElement
)
{
static
get
observedAttributes
(
)
{
return
[
"
back
-
tooltip
"
"
card
-
type
"
"
default
-
value
"
"
disabled
"
"
front
-
tooltip
"
"
placeholder
"
"
value
"
]
;
}
constructor
(
{
useAlwaysVisiblePlaceholder
inputId
}
=
{
}
)
{
super
(
)
;
this
.
useAlwaysVisiblePlaceholder
=
useAlwaysVisiblePlaceholder
;
this
.
_input
=
document
.
createElement
(
"
input
"
)
;
this
.
_input
.
id
=
inputId
|
|
"
"
;
this
.
_input
.
setAttribute
(
"
type
"
"
text
"
)
;
this
.
_input
.
autocomplete
=
"
off
"
;
this
.
_input
.
size
=
3
;
this
.
_input
.
required
=
true
;
this
.
_input
.
pattern
=
"
[
0
-
9
]
{
3
}
"
;
this
.
_input
.
classList
.
add
(
"
security
-
code
"
)
;
if
(
useAlwaysVisiblePlaceholder
)
{
this
.
_label
=
document
.
createElement
(
"
span
"
)
;
this
.
_label
.
dataset
.
localization
=
"
cardCVV
"
;
this
.
_label
.
className
=
"
label
-
text
"
;
}
this
.
_tooltip
=
document
.
createElement
(
"
span
"
)
;
this
.
_tooltip
.
className
=
"
info
-
tooltip
csc
"
;
this
.
_tooltip
.
setAttribute
(
"
tabindex
"
"
0
"
)
;
this
.
_tooltip
.
setAttribute
(
"
role
"
"
tooltip
"
)
;
this
.
appendChild
(
this
.
_input
)
;
if
(
this
.
useAlwaysVisiblePlaceholder
)
{
this
.
appendChild
(
this
.
_label
)
;
}
this
.
appendChild
(
this
.
_tooltip
)
;
}
connectedCallback
(
)
{
this
.
render
(
)
;
}
render
(
)
{
if
(
this
.
value
)
{
this
.
_input
.
value
=
this
.
value
;
}
if
(
this
.
useAlwaysVisiblePlaceholder
)
{
this
.
_label
.
textContent
=
this
.
placeholder
|
|
"
"
;
}
else
{
this
.
_input
.
placeholder
=
this
.
placeholder
|
|
"
"
;
}
if
(
this
.
cardType
=
=
"
amex
"
)
{
this
.
_tooltip
.
setAttribute
(
"
aria
-
label
"
this
.
frontTooltip
|
|
"
"
)
;
}
else
{
this
.
_tooltip
.
setAttribute
(
"
aria
-
label
"
this
.
backTooltip
|
|
"
"
)
;
}
}
get
value
(
)
{
return
this
.
_input
.
value
;
}
get
isValid
(
)
{
return
this
.
_input
.
validity
.
valid
;
}
set
disabled
(
value
)
{
this
.
_input
.
disabled
=
value
;
return
!
!
value
;
}
}
customElements
.
define
(
"
csc
-
input
"
CscInput
)
;
