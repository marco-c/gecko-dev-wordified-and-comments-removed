import
ObservedPropertiesMixin
from
"
.
.
/
mixins
/
ObservedPropertiesMixin
.
js
"
;
import
RichOption
from
"
.
/
rich
-
option
.
js
"
;
export
default
class
AddressOption
extends
ObservedPropertiesMixin
(
RichOption
)
{
static
get
recordAttributes
(
)
{
return
[
"
address
-
level1
"
"
address
-
level2
"
"
country
"
"
email
"
"
guid
"
"
name
"
"
organization
"
"
postal
-
code
"
"
street
-
address
"
"
tel
"
]
;
}
static
get
observedAttributes
(
)
{
return
RichOption
.
observedAttributes
.
concat
(
AddressOption
.
recordAttributes
"
address
-
fields
"
"
break
-
after
-
nth
-
field
"
"
data
-
field
-
separator
"
)
;
}
constructor
(
)
{
super
(
)
;
this
.
_line1
=
document
.
createElement
(
"
div
"
)
;
this
.
_line1
.
classList
.
add
(
"
line
"
)
;
this
.
_line2
=
document
.
createElement
(
"
div
"
)
;
this
.
_line2
.
classList
.
add
(
"
line
"
)
;
for
(
let
name
of
AddressOption
.
recordAttributes
)
{
this
[
_
{
name
}
]
=
document
.
createElement
(
"
span
"
)
;
this
[
_
{
name
}
]
.
classList
.
add
(
name
)
;
let
missingValueString
=
name
.
replace
(
/
(
-
|
^
)
(
[
a
-
z
]
)
/
g
(
0
1
2
)
=
>
{
return
1
.
replace
(
"
-
"
"
"
)
+
2
.
toUpperCase
(
)
;
}
)
+
"
Missing
"
;
this
[
_
{
name
}
]
.
dataset
.
missingString
=
missingValueString
;
}
}
connectedCallback
(
)
{
this
.
appendChild
(
this
.
_line1
)
;
this
.
appendChild
(
this
.
_line2
)
;
super
.
connectedCallback
(
)
;
}
static
formatSingleLineLabel
(
address
addressFields
)
{
return
PaymentDialogUtils
.
getAddressLabel
(
address
addressFields
)
;
}
get
requiredFields
(
)
{
if
(
this
.
hasAttribute
(
"
address
-
fields
"
)
)
{
let
names
=
this
.
getAttribute
(
"
address
-
fields
"
)
.
trim
(
)
.
split
(
/
\
s
+
/
)
;
if
(
names
.
length
)
{
return
names
;
}
}
return
[
"
address
-
level2
"
"
country
"
"
name
"
"
postal
-
code
"
"
street
-
address
"
]
;
}
render
(
)
{
this
.
_line1
.
textContent
=
"
"
;
this
.
_line2
.
textContent
=
"
"
;
for
(
let
name
of
AddressOption
.
recordAttributes
)
{
let
camelCaseName
=
super
.
constructor
.
kebabToCamelCase
(
name
)
;
let
fieldEl
=
this
[
_
{
name
}
]
;
fieldEl
.
textContent
=
this
[
camelCaseName
]
|
|
"
"
;
}
let
{
fieldsOrder
}
=
PaymentDialogUtils
.
getFormFormat
(
this
.
country
)
;
let
requestedVisibleFields
=
this
.
addressFields
|
|
"
mailing
-
address
"
;
let
visibleFields
=
EditAddress
.
computeVisibleFields
(
fieldsOrder
requestedVisibleFields
)
;
let
visibleFieldCount
=
0
;
let
requiredFields
=
this
.
requiredFields
;
let
lineEl
=
this
.
_line1
;
let
breakAfterNthField
=
this
.
breakAfterNthField
|
|
2
;
for
(
let
field
of
visibleFields
)
{
let
fieldEl
=
this
[
_
{
field
.
fieldId
}
]
;
if
(
!
fieldEl
)
{
log
.
warn
(
address
-
option
render
:
'
{
field
.
fieldId
}
'
doesn
'
t
exist
)
;
continue
;
}
if
(
!
fieldEl
.
textContent
&
&
!
requiredFields
.
includes
(
field
.
fieldId
)
)
{
continue
;
}
if
(
lineEl
.
children
.
length
>
0
)
{
lineEl
.
append
(
this
.
dataset
.
fieldSeparator
)
;
}
lineEl
.
appendChild
(
fieldEl
)
;
if
(
+
+
visibleFieldCount
=
=
breakAfterNthField
)
{
lineEl
=
this
.
_line2
;
}
}
}
}
customElements
.
define
(
"
address
-
option
"
AddressOption
)
;
