import
PaymentStateSubscriberMixin
from
"
.
.
/
mixins
/
PaymentStateSubscriberMixin
.
js
"
;
export
default
class
AcceptedCards
extends
PaymentStateSubscriberMixin
(
HTMLElement
)
{
constructor
(
)
{
super
(
)
;
this
.
_listEl
=
document
.
createElement
(
"
ul
"
)
;
this
.
_listEl
.
classList
.
add
(
"
accepted
-
cards
-
list
"
)
;
this
.
_labelEl
=
document
.
createElement
(
"
span
"
)
;
this
.
_labelEl
.
classList
.
add
(
"
accepted
-
cards
-
label
"
)
;
}
connectedCallback
(
)
{
this
.
label
=
this
.
getAttribute
(
"
label
"
)
;
this
.
appendChild
(
this
.
_labelEl
)
;
this
.
_listEl
.
textContent
=
"
"
;
let
allNetworks
=
PaymentDialogUtils
.
getCreditCardNetworks
(
)
;
for
(
let
network
of
allNetworks
)
{
let
item
=
document
.
createElement
(
"
li
"
)
;
item
.
classList
.
add
(
"
accepted
-
cards
-
item
"
)
;
item
.
dataset
.
networkId
=
network
;
item
.
setAttribute
(
"
aria
-
role
"
"
image
"
)
;
item
.
setAttribute
(
"
aria
-
label
"
network
)
;
this
.
_listEl
.
appendChild
(
item
)
;
}
let
isBranded
=
PaymentDialogUtils
.
isOfficialBranding
(
)
;
this
.
classList
.
toggle
(
"
branded
"
isBranded
)
;
this
.
appendChild
(
this
.
_listEl
)
;
super
.
connectedCallback
(
)
;
}
render
(
state
)
{
let
basicCardMethod
=
state
.
request
.
paymentMethods
.
find
(
method
=
>
method
.
supportedMethods
=
=
"
basic
-
card
"
)
;
let
merchantNetworks
=
basicCardMethod
&
&
basicCardMethod
.
data
&
&
basicCardMethod
.
data
.
supportedNetworks
;
if
(
merchantNetworks
&
&
merchantNetworks
.
length
)
{
for
(
let
item
of
this
.
_listEl
.
children
)
{
let
network
=
item
.
dataset
.
networkId
;
item
.
hidden
=
!
(
network
&
&
merchantNetworks
.
includes
(
network
)
)
;
}
this
.
hidden
=
false
;
}
else
{
this
.
hidden
=
true
;
}
}
set
label
(
value
)
{
this
.
_labelEl
.
textContent
=
value
;
}
get
acceptedItems
(
)
{
return
Array
.
from
(
this
.
_listEl
.
children
)
.
filter
(
item
=
>
!
item
.
hidden
)
;
}
}
customElements
.
define
(
"
accepted
-
cards
"
AcceptedCards
)
;
