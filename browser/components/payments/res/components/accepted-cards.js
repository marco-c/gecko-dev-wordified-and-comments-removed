import
PaymentStateSubscriberMixin
from
"
.
.
/
mixins
/
PaymentStateSubscriberMixin
.
js
"
;
import
paymentRequest
from
"
.
.
/
paymentRequest
.
js
"
;
export
default
class
AcceptedCards
extends
PaymentStateSubscriberMixin
(
HTMLElement
)
{
constructor
(
)
{
super
(
)
;
this
.
_listEl
=
document
.
createElement
(
"
ul
"
)
;
this
.
_listEl
.
classList
.
add
(
"
accepted
-
cards
-
list
"
)
;
this
.
_labelEl
=
document
.
createElement
(
"
span
"
)
;
this
.
_labelEl
.
classList
.
add
(
"
accepted
-
cards
-
label
"
)
;
}
connectedCallback
(
)
{
this
.
label
=
this
.
getAttribute
(
"
label
"
)
;
this
.
appendChild
(
this
.
_labelEl
)
;
this
.
_listEl
.
textContent
=
"
"
;
let
allNetworks
=
PaymentDialogUtils
.
getCreditCardNetworks
(
)
;
for
(
let
network
of
allNetworks
)
{
let
item
=
document
.
createElement
(
"
li
"
)
;
item
.
classList
.
add
(
"
accepted
-
cards
-
item
"
)
;
item
.
dataset
.
networkId
=
network
;
this
.
_listEl
.
appendChild
(
item
)
;
}
this
.
appendChild
(
this
.
_listEl
)
;
super
.
connectedCallback
(
)
;
}
render
(
state
)
{
let
acceptedNetworks
=
paymentRequest
.
getAcceptedNetworks
(
state
.
request
)
;
for
(
let
item
of
this
.
_listEl
.
children
)
{
let
network
=
item
.
dataset
.
networkId
;
item
.
hidden
=
!
(
network
&
&
acceptedNetworks
.
includes
(
network
)
)
;
}
}
set
label
(
value
)
{
this
.
_labelEl
.
textContent
=
value
;
}
}
customElements
.
define
(
"
accepted
-
cards
"
AcceptedCards
)
;
