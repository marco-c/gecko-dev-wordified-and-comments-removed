import
PaymentStateSubscriberMixin
from
"
.
.
/
mixins
/
PaymentStateSubscriberMixin
.
js
"
;
import
paymentRequest
from
"
.
.
/
paymentRequest
.
js
"
;
import
"
.
.
/
components
/
currency
-
amount
.
js
"
;
import
"
.
.
/
components
/
payment
-
request
-
page
.
js
"
;
import
"
.
.
/
components
/
accepted
-
cards
.
js
"
;
import
"
.
/
address
-
picker
.
js
"
;
import
"
.
/
address
-
form
.
js
"
;
import
"
.
/
basic
-
card
-
form
.
js
"
;
import
"
.
/
completion
-
error
-
page
.
js
"
;
import
"
.
/
order
-
details
.
js
"
;
import
"
.
/
payment
-
method
-
picker
.
js
"
;
import
"
.
/
shipping
-
option
-
picker
.
js
"
;
export
default
class
PaymentDialog
extends
PaymentStateSubscriberMixin
(
HTMLElement
)
{
constructor
(
)
{
super
(
)
;
this
.
_template
=
document
.
getElementById
(
"
payment
-
dialog
-
template
"
)
;
this
.
_cachedState
=
{
}
;
}
connectedCallback
(
)
{
let
contents
=
document
.
importNode
(
this
.
_template
.
content
true
)
;
this
.
_hostNameEl
=
contents
.
querySelector
(
"
#
host
-
name
"
)
;
this
.
_cancelButton
=
contents
.
querySelector
(
"
#
cancel
"
)
;
this
.
_cancelButton
.
addEventListener
(
"
click
"
this
.
cancelRequest
)
;
this
.
_payButton
=
contents
.
querySelector
(
"
#
pay
"
)
;
this
.
_payButton
.
addEventListener
(
"
click
"
this
)
;
this
.
_viewAllButton
=
contents
.
querySelector
(
"
#
view
-
all
"
)
;
this
.
_viewAllButton
.
addEventListener
(
"
click
"
this
)
;
this
.
_mainContainer
=
contents
.
getElementById
(
"
main
-
container
"
)
;
this
.
_orderDetailsOverlay
=
contents
.
querySelector
(
"
#
order
-
details
-
overlay
"
)
;
this
.
_shippingAddressPicker
=
contents
.
querySelector
(
"
address
-
picker
.
shipping
-
related
"
)
;
this
.
_shippingOptionPicker
=
contents
.
querySelector
(
"
shipping
-
option
-
picker
"
)
;
this
.
_shippingRelatedEls
=
contents
.
querySelectorAll
(
"
.
shipping
-
related
"
)
;
this
.
_payerRelatedEls
=
contents
.
querySelectorAll
(
"
.
payer
-
related
"
)
;
this
.
_payerAddressPicker
=
contents
.
querySelector
(
"
address
-
picker
.
payer
-
related
"
)
;
this
.
_paymentMethodPicker
=
contents
.
querySelector
(
"
payment
-
method
-
picker
"
)
;
this
.
_acceptedCardsList
=
contents
.
querySelector
(
"
accepted
-
cards
"
)
;
this
.
_manageText
=
contents
.
querySelector
(
"
.
manage
-
text
"
)
;
this
.
_manageText
.
addEventListener
(
"
click
"
this
)
;
this
.
_header
=
contents
.
querySelector
(
"
header
"
)
;
this
.
_errorText
=
contents
.
querySelector
(
"
header
>
.
page
-
error
"
)
;
this
.
_disabledOverlay
=
contents
.
getElementById
(
"
disabled
-
overlay
"
)
;
this
.
appendChild
(
contents
)
;
super
.
connectedCallback
(
)
;
}
disconnectedCallback
(
)
{
this
.
_cancelButton
.
removeEventListener
(
"
click
"
this
.
cancelRequest
)
;
this
.
_payButton
.
removeEventListener
(
"
click
"
this
.
pay
)
;
this
.
_viewAllButton
.
removeEventListener
(
"
click
"
this
)
;
super
.
disconnectedCallback
(
)
;
}
handleEvent
(
event
)
{
if
(
event
.
type
=
=
"
click
"
)
{
switch
(
event
.
currentTarget
)
{
case
this
.
_viewAllButton
:
let
orderDetailsShowing
=
!
this
.
requestStore
.
getState
(
)
.
orderDetailsShowing
;
this
.
requestStore
.
setState
(
{
orderDetailsShowing
}
)
;
break
;
case
this
.
_payButton
:
this
.
pay
(
)
;
break
;
case
this
.
_manageText
:
if
(
event
.
target
instanceof
HTMLAnchorElement
)
{
this
.
openPreferences
(
event
)
;
}
break
;
}
}
}
openPreferences
(
event
)
{
paymentRequest
.
openPreferences
(
)
;
event
.
preventDefault
(
)
;
}
cancelRequest
(
)
{
paymentRequest
.
cancel
(
)
;
}
pay
(
)
{
let
state
=
this
.
requestStore
.
getState
(
)
;
let
{
selectedPayerAddress
selectedPaymentCard
selectedPaymentCardSecurityCode
selectedShippingAddress
}
=
state
;
let
data
=
{
selectedPaymentCardGUID
:
selectedPaymentCard
selectedPaymentCardSecurityCode
}
;
data
.
selectedShippingAddressGUID
=
state
.
request
.
paymentOptions
.
requestShipping
?
selectedShippingAddress
:
null
;
data
.
selectedPayerAddressGUID
=
this
.
_isPayerRequested
(
state
.
request
.
paymentOptions
)
?
selectedPayerAddress
:
null
;
paymentRequest
.
pay
(
data
)
;
}
changeShippingAddress
(
shippingAddressGUID
)
{
let
request
=
Object
.
assign
(
{
}
this
.
requestStore
.
getState
(
)
.
request
)
;
request
.
paymentDetails
=
Object
.
assign
(
{
}
request
.
paymentDetails
)
;
request
.
paymentDetails
.
shippingAddressErrors
=
{
}
;
this
.
requestStore
.
setState
(
{
request
}
)
;
paymentRequest
.
changeShippingAddress
(
{
shippingAddressGUID
}
)
;
}
changeShippingOption
(
optionID
)
{
paymentRequest
.
changeShippingOption
(
{
optionID
}
)
;
}
changePaymentMethod
(
selectedPaymentCardBillingAddressGUID
)
{
let
request
=
Object
.
assign
(
{
}
this
.
requestStore
.
getState
(
)
.
request
)
;
request
.
paymentDetails
=
Object
.
assign
(
{
}
request
.
paymentDetails
)
;
request
.
paymentDetails
.
paymentMethodErrors
=
null
;
this
.
requestStore
.
setState
(
{
request
}
)
;
paymentRequest
.
changePaymentMethod
(
{
selectedPaymentCardBillingAddressGUID
}
)
;
}
changePayerAddress
(
payerAddressGUID
)
{
let
request
=
Object
.
assign
(
{
}
this
.
requestStore
.
getState
(
)
.
request
)
;
request
.
paymentDetails
=
Object
.
assign
(
{
}
request
.
paymentDetails
)
;
request
.
paymentDetails
.
payerErrors
=
{
}
;
this
.
requestStore
.
setState
(
{
request
}
)
;
paymentRequest
.
changePayerAddress
(
{
payerAddressGUID
}
)
;
}
_isPayerRequested
(
paymentOptions
)
{
return
paymentOptions
.
requestPayerName
|
|
paymentOptions
.
requestPayerEmail
|
|
paymentOptions
.
requestPayerPhone
;
}
_getAdditionalDisplayItems
(
state
)
{
let
methodId
=
state
.
selectedPaymentCard
;
let
modifier
=
paymentRequest
.
getModifierForPaymentMethod
(
state
methodId
)
;
if
(
modifier
&
&
modifier
.
additionalDisplayItems
)
{
return
modifier
.
additionalDisplayItems
;
}
return
[
]
;
}
_updateCompleteStatus
(
state
)
{
let
{
completeStatus
}
=
state
.
request
;
switch
(
completeStatus
)
{
case
"
fail
"
:
case
"
timeout
"
:
case
"
unknown
"
:
state
.
page
=
{
id
:
completion
-
{
completeStatus
}
-
error
}
;
state
.
changesPrevented
=
false
;
break
;
case
"
"
:
{
state
.
changesPrevented
=
false
;
break
;
}
}
return
state
;
}
async
setStateFromParent
(
state
)
{
let
oldAddresses
=
paymentRequest
.
getAddresses
(
this
.
requestStore
.
getState
(
)
)
;
let
oldBasicCards
=
paymentRequest
.
getBasicCards
(
this
.
requestStore
.
getState
(
)
)
;
if
(
state
.
request
)
{
state
=
this
.
_updateCompleteStatus
(
state
)
;
}
this
.
requestStore
.
setState
(
state
)
;
state
=
this
.
requestStore
.
getState
(
)
;
let
{
selectedPayerAddress
selectedPaymentCard
selectedShippingAddress
selectedShippingOption
}
=
state
;
let
addresses
=
paymentRequest
.
getAddresses
(
state
)
;
let
{
paymentOptions
}
=
state
.
request
;
if
(
paymentOptions
.
requestShipping
)
{
let
shippingOptions
=
state
.
request
.
paymentDetails
.
shippingOptions
;
let
shippingAddress
=
selectedShippingAddress
&
&
addresses
[
selectedShippingAddress
]
;
let
oldShippingAddress
=
selectedShippingAddress
&
&
oldAddresses
[
selectedShippingAddress
]
;
if
(
shippingAddress
)
{
if
(
oldShippingAddress
&
&
shippingAddress
.
guid
=
=
oldShippingAddress
.
guid
&
&
shippingAddress
.
timeLastModified
!
=
oldShippingAddress
.
timeLastModified
)
{
delete
this
.
_cachedState
.
selectedShippingAddress
;
}
}
else
if
(
selectedShippingAddress
!
=
=
null
)
{
log
.
debug
(
"
resetting
invalid
/
deleted
shipping
address
"
)
;
this
.
requestStore
.
setState
(
{
selectedShippingAddress
:
null
}
)
;
}
if
(
shippingOptions
&
&
(
!
selectedShippingOption
|
|
!
shippingOptions
.
find
(
opt
=
>
opt
.
id
=
=
selectedShippingOption
)
)
)
{
this
.
_cachedState
.
selectedShippingOption
=
selectedShippingOption
;
this
.
requestStore
.
setState
(
{
selectedShippingOption
:
state
.
request
.
shippingOption
}
)
;
}
}
let
basicCards
=
paymentRequest
.
getBasicCards
(
state
)
;
let
oldPaymentMethod
=
selectedPaymentCard
&
&
oldBasicCards
[
selectedPaymentCard
]
;
let
paymentMethod
=
selectedPaymentCard
&
&
basicCards
[
selectedPaymentCard
]
;
if
(
oldPaymentMethod
&
&
paymentMethod
.
guid
=
=
oldPaymentMethod
.
guid
&
&
paymentMethod
.
timeLastModified
!
=
oldPaymentMethod
.
timeLastModified
)
{
delete
this
.
_cachedState
.
selectedPaymentCard
;
}
else
{
let
billingAddressGUID
=
paymentMethod
&
&
paymentMethod
.
billingAddressGUID
;
let
billingAddress
=
billingAddressGUID
&
&
addresses
[
billingAddressGUID
]
;
let
oldBillingAddress
=
billingAddressGUID
&
&
oldAddresses
[
billingAddressGUID
]
;
if
(
oldBillingAddress
&
&
billingAddress
&
&
billingAddress
.
timeLastModified
!
=
oldBillingAddress
.
timeLastModified
)
{
delete
this
.
_cachedState
.
selectedPaymentCard
;
}
}
if
(
selectedPaymentCard
&
&
!
basicCards
[
selectedPaymentCard
]
)
{
this
.
requestStore
.
setState
(
{
selectedPaymentCard
:
null
selectedPaymentCardSecurityCode
:
null
}
)
;
}
if
(
this
.
_isPayerRequested
(
state
.
request
.
paymentOptions
)
)
{
let
payerAddress
=
selectedPayerAddress
&
&
addresses
[
selectedPayerAddress
]
;
let
oldPayerAddress
=
selectedPayerAddress
&
&
oldAddresses
[
selectedPayerAddress
]
;
if
(
oldPayerAddress
&
&
payerAddress
&
&
(
(
paymentOptions
.
requestPayerName
&
&
payerAddress
.
name
!
=
oldPayerAddress
.
name
)
|
|
(
paymentOptions
.
requestPayerEmail
&
&
payerAddress
.
email
!
=
oldPayerAddress
.
email
)
|
|
(
paymentOptions
.
requestPayerPhone
&
&
payerAddress
.
tel
!
=
oldPayerAddress
.
tel
)
)
)
{
delete
this
.
_cachedState
.
selectedPayerAddress
;
}
if
(
!
addresses
[
selectedPayerAddress
]
)
{
this
.
requestStore
.
setState
(
{
selectedPayerAddress
:
Object
.
keys
(
addresses
)
[
0
]
|
|
null
}
)
;
}
}
}
_renderPayButton
(
state
)
{
let
completeStatus
=
state
.
request
.
completeStatus
;
switch
(
completeStatus
)
{
case
"
processing
"
:
case
"
success
"
:
case
"
unknown
"
:
{
this
.
_payButton
.
disabled
=
true
;
this
.
_payButton
.
textContent
=
this
.
_payButton
.
dataset
[
completeStatus
+
"
Label
"
]
;
break
;
}
case
"
"
:
{
this
.
_payButton
.
textContent
=
this
.
_payButton
.
dataset
.
label
;
const
INVALID_CLASS_NAME
=
"
invalid
-
selected
-
option
"
;
this
.
_payButton
.
disabled
=
(
state
.
request
.
paymentOptions
.
requestShipping
&
&
(
!
this
.
_shippingAddressPicker
.
selectedOption
|
|
this
.
_shippingAddressPicker
.
classList
.
contains
(
INVALID_CLASS_NAME
)
|
|
!
this
.
_shippingOptionPicker
.
selectedOption
)
)
|
|
(
this
.
_isPayerRequested
(
state
.
request
.
paymentOptions
)
&
&
(
!
this
.
_payerAddressPicker
.
selectedOption
|
|
this
.
_payerAddressPicker
.
classList
.
contains
(
INVALID_CLASS_NAME
)
)
)
|
|
!
this
.
_paymentMethodPicker
.
securityCodeInput
.
isValid
|
|
!
this
.
_paymentMethodPicker
.
selectedOption
|
|
this
.
_paymentMethodPicker
.
classList
.
contains
(
INVALID_CLASS_NAME
)
|
|
state
.
changesPrevented
;
break
;
}
case
"
fail
"
:
case
"
timeout
"
:
{
this
.
_payButton
.
textContent
=
this
.
_payButton
.
dataset
.
label
;
this
.
_payButton
.
disabled
=
true
;
break
;
}
default
:
{
throw
new
Error
(
Invalid
completeStatus
:
{
completeStatus
}
)
;
}
}
}
_renderPayerFields
(
state
)
{
let
paymentOptions
=
state
.
request
.
paymentOptions
;
let
payerRequested
=
this
.
_isPayerRequested
(
paymentOptions
)
;
let
payerAddressForm
=
this
.
querySelector
(
"
address
-
form
[
selected
-
state
-
key
=
'
selectedPayerAddress
'
]
"
)
;
for
(
let
element
of
this
.
_payerRelatedEls
)
{
element
.
hidden
=
!
payerRequested
;
}
if
(
payerRequested
)
{
let
fieldNames
=
new
Set
(
)
;
if
(
paymentOptions
.
requestPayerName
)
{
fieldNames
.
add
(
"
name
"
)
;
}
if
(
paymentOptions
.
requestPayerEmail
)
{
fieldNames
.
add
(
"
email
"
)
;
}
if
(
paymentOptions
.
requestPayerPhone
)
{
fieldNames
.
add
(
"
tel
"
)
;
}
let
addressFields
=
[
.
.
.
fieldNames
]
.
join
(
"
"
)
;
this
.
_payerAddressPicker
.
setAttribute
(
"
address
-
fields
"
addressFields
)
;
if
(
payerAddressForm
.
form
)
{
payerAddressForm
.
form
.
dataset
.
extraRequiredFields
=
addressFields
;
}
if
(
fieldNames
.
size
=
=
3
)
{
this
.
_payerAddressPicker
.
setAttribute
(
"
break
-
after
-
nth
-
field
"
1
)
;
}
else
{
this
.
_payerAddressPicker
.
removeAttribute
(
"
break
-
after
-
nth
-
field
"
)
;
}
}
else
{
this
.
_payerAddressPicker
.
removeAttribute
(
"
address
-
fields
"
)
;
}
}
stateChangeCallback
(
state
)
{
super
.
stateChangeCallback
(
state
)
;
if
(
state
.
request
.
paymentOptions
.
requestShipping
)
{
if
(
state
.
selectedShippingAddress
!
=
this
.
_cachedState
.
selectedShippingAddress
)
{
this
.
changeShippingAddress
(
state
.
selectedShippingAddress
)
;
}
if
(
state
.
selectedShippingOption
!
=
this
.
_cachedState
.
selectedShippingOption
)
{
this
.
changeShippingOption
(
state
.
selectedShippingOption
)
;
}
}
let
selectedPaymentCard
=
state
.
selectedPaymentCard
;
let
basicCards
=
paymentRequest
.
getBasicCards
(
state
)
;
let
billingAddressGUID
=
(
basicCards
[
selectedPaymentCard
]
|
|
{
}
)
.
billingAddressGUID
;
if
(
selectedPaymentCard
!
=
this
.
_cachedState
.
selectedPaymentCard
&
&
billingAddressGUID
)
{
this
.
_cachedState
.
selectedPaymentCard
=
state
.
selectedPaymentCard
;
this
.
changePaymentMethod
(
billingAddressGUID
)
;
}
if
(
this
.
_isPayerRequested
(
state
.
request
.
paymentOptions
)
)
{
if
(
state
.
selectedPayerAddress
!
=
this
.
_cachedState
.
selectedPayerAddress
)
{
this
.
changePayerAddress
(
state
.
selectedPayerAddress
)
;
}
}
this
.
_cachedState
.
selectedShippingAddress
=
state
.
selectedShippingAddress
;
this
.
_cachedState
.
selectedShippingOption
=
state
.
selectedShippingOption
;
this
.
_cachedState
.
selectedPayerAddress
=
state
.
selectedPayerAddress
;
}
render
(
state
)
{
let
request
=
state
.
request
;
let
paymentDetails
=
request
.
paymentDetails
;
this
.
_hostNameEl
.
textContent
=
request
.
topLevelPrincipal
.
URI
.
displayHost
;
let
displayItems
=
request
.
paymentDetails
.
displayItems
|
|
[
]
;
let
additionalItems
=
this
.
_getAdditionalDisplayItems
(
state
)
;
this
.
_viewAllButton
.
hidden
=
!
displayItems
.
length
&
&
!
additionalItems
.
length
;
let
shippingType
=
state
.
request
.
paymentOptions
.
shippingType
|
|
"
shipping
"
;
let
addressPickerLabel
=
this
.
_shippingAddressPicker
.
dataset
[
shippingType
+
"
AddressLabel
"
]
;
this
.
_shippingAddressPicker
.
setAttribute
(
"
label
"
addressPickerLabel
)
;
let
optionPickerLabel
=
this
.
_shippingOptionPicker
.
dataset
[
shippingType
+
"
OptionsLabel
"
]
;
this
.
_shippingOptionPicker
.
setAttribute
(
"
label
"
optionPickerLabel
)
;
let
shippingAddressForm
=
this
.
querySelector
(
"
address
-
form
[
selected
-
state
-
key
=
'
selectedShippingAddress
'
]
"
)
;
shippingAddressForm
.
dataset
.
titleAdd
=
this
.
dataset
[
shippingType
+
"
AddressTitleAdd
"
]
;
shippingAddressForm
.
dataset
.
titleEdit
=
this
.
dataset
[
shippingType
+
"
AddressTitleEdit
"
]
;
let
totalItem
=
paymentRequest
.
getTotalItem
(
state
)
;
let
totalAmountEl
=
this
.
querySelector
(
"
#
total
>
currency
-
amount
"
)
;
totalAmountEl
.
value
=
totalItem
.
amount
.
value
;
totalAmountEl
.
currency
=
totalItem
.
amount
.
currency
;
this
.
_header
.
hidden
=
!
state
.
page
.
onboardingWizard
&
&
state
.
page
.
id
!
=
"
payment
-
summary
"
;
this
.
_orderDetailsOverlay
.
hidden
=
!
state
.
orderDetailsShowing
;
let
genericError
=
"
"
;
if
(
this
.
_shippingAddressPicker
.
selectedOption
&
&
(
!
request
.
paymentDetails
.
shippingOptions
|
|
!
request
.
paymentDetails
.
shippingOptions
.
length
)
)
{
genericError
=
this
.
_errorText
.
dataset
[
shippingType
+
"
GenericError
"
]
;
}
this
.
_errorText
.
textContent
=
paymentDetails
.
error
|
|
genericError
;
let
paymentOptions
=
request
.
paymentOptions
;
for
(
let
element
of
this
.
_shippingRelatedEls
)
{
element
.
hidden
=
!
paymentOptions
.
requestShipping
;
}
this
.
_renderPayerFields
(
state
)
;
let
isMac
=
/
mac
/
i
.
test
(
navigator
.
platform
)
;
for
(
let
manageTextEl
of
this
.
_manageText
.
children
)
{
manageTextEl
.
hidden
=
manageTextEl
.
dataset
.
os
=
=
"
mac
"
?
!
isMac
:
isMac
;
let
link
=
manageTextEl
.
querySelector
(
"
a
"
)
;
link
.
href
=
"
about
:
preferences
#
privacy
-
form
-
autofill
"
;
}
this
.
_renderPayButton
(
state
)
;
for
(
let
page
of
this
.
_mainContainer
.
querySelectorAll
(
"
:
scope
>
.
page
"
)
)
{
page
.
hidden
=
state
.
page
.
id
!
=
page
.
id
;
}
if
(
state
.
changesPrevented
)
{
this
.
setAttribute
(
"
changes
-
prevented
"
"
"
)
;
}
else
{
this
.
removeAttribute
(
"
changes
-
prevented
"
)
;
}
this
.
setAttribute
(
"
complete
-
status
"
request
.
completeStatus
)
;
this
.
_disabledOverlay
.
hidden
=
!
state
.
changesPrevented
;
}
}
customElements
.
define
(
"
payment
-
dialog
"
PaymentDialog
)
;
