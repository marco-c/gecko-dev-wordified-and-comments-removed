import
RichPicker
from
"
.
/
rich
-
picker
.
js
"
;
import
ShippingOption
from
"
.
.
/
components
/
shipping
-
option
.
js
"
;
export
default
class
ShippingOptionPicker
extends
RichPicker
{
constructor
(
)
{
super
(
)
;
this
.
dropdown
.
setAttribute
(
"
option
-
type
"
"
shipping
-
option
"
)
;
}
render
(
state
)
{
this
.
addLink
.
hidden
=
true
;
this
.
editLink
.
hidden
=
true
;
let
shippingOptions
=
state
.
request
.
paymentDetails
.
shippingOptions
|
|
[
]
;
let
desiredOptions
=
[
]
;
for
(
let
option
of
shippingOptions
)
{
let
optionEl
=
this
.
dropdown
.
getOptionByValue
(
option
.
id
)
;
if
(
!
optionEl
)
{
optionEl
=
document
.
createElement
(
"
option
"
)
;
optionEl
.
value
=
option
.
id
;
}
optionEl
.
setAttribute
(
"
label
"
option
.
label
)
;
optionEl
.
setAttribute
(
"
amount
-
currency
"
option
.
amount
.
currency
)
;
optionEl
.
setAttribute
(
"
amount
-
value
"
option
.
amount
.
value
)
;
optionEl
.
textContent
=
ShippingOption
.
formatSingleLineLabel
(
option
)
;
desiredOptions
.
push
(
optionEl
)
;
}
this
.
dropdown
.
popupBox
.
textContent
=
"
"
;
for
(
let
option
of
desiredOptions
)
{
this
.
dropdown
.
popupBox
.
appendChild
(
option
)
;
}
let
selectedShippingOption
=
state
.
selectedShippingOption
;
this
.
dropdown
.
value
=
selectedShippingOption
;
if
(
selectedShippingOption
&
&
selectedShippingOption
!
=
=
this
.
dropdown
.
popupBox
.
value
)
{
throw
new
Error
(
The
option
{
selectedShippingOption
}
+
does
not
exist
in
the
shipping
option
picker
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
change
"
:
{
this
.
onChange
(
event
)
;
break
;
}
}
}
onChange
(
event
)
{
let
selectedOptionId
=
this
.
dropdown
.
value
;
this
.
requestStore
.
setState
(
{
selectedShippingOption
:
selectedOptionId
}
)
;
}
}
customElements
.
define
(
"
shipping
-
option
-
picker
"
ShippingOptionPicker
)
;
