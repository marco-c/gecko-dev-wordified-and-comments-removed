const
defaultTools
=
{
viewGenaiChatSidebar
:
"
aichat
"
viewTabsSidebar
:
"
syncedtabs
"
viewHistorySidebar
:
"
history
"
viewBookmarksSidebar
:
"
bookmarks
"
}
;
var
SidebarController
=
{
makeSidebar
(
{
elementId
.
.
.
rest
}
)
{
return
{
get
sourceL10nEl
(
)
{
return
document
.
getElementById
(
elementId
)
;
}
get
title
(
)
{
let
element
=
document
.
getElementById
(
elementId
)
;
return
element
?
.
getAttribute
(
"
label
"
)
;
}
.
.
.
rest
}
;
}
registerPrefSidebar
(
pref
commandID
config
)
{
const
sidebar
=
this
.
makeSidebar
(
config
)
;
this
.
_sidebars
.
set
(
commandID
sidebar
)
;
let
switcherMenuitem
;
const
updateMenus
=
visible
=
>
{
const
viewItem
=
document
.
getElementById
(
sidebar
.
menuId
)
;
if
(
viewItem
)
{
viewItem
.
hidden
=
!
visible
;
}
let
menuItem
=
document
.
getElementById
(
config
.
elementId
)
;
if
(
visible
&
&
!
menuItem
)
{
switcherMenuitem
=
this
.
createMenuItem
(
commandID
sidebar
)
;
switcherMenuitem
.
setAttribute
(
"
id
"
config
.
elementId
)
;
switcherMenuitem
.
removeAttribute
(
"
type
"
)
;
const
separator
=
this
.
_switcherPanel
.
querySelector
(
"
menuseparator
"
)
;
separator
.
parentNode
.
insertBefore
(
switcherMenuitem
separator
)
;
}
else
{
switcherMenuitem
?
.
remove
(
)
;
}
window
.
dispatchEvent
(
new
CustomEvent
(
"
SidebarItemChanged
"
)
)
;
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
sidebar
"
visible
"
pref
false
(
_pref
_prev
val
)
=
>
updateMenus
(
val
)
)
;
this
.
promiseInitialized
.
then
(
(
)
=
>
updateMenus
(
sidebar
.
visible
)
)
;
}
get
sidebars
(
)
{
if
(
this
.
_sidebars
)
{
return
this
.
_sidebars
;
}
return
this
.
generateSidebarsMap
(
)
;
}
generateSidebarsMap
(
)
{
this
.
_sidebars
=
new
Map
(
[
[
"
viewHistorySidebar
"
this
.
makeSidebar
(
{
elementId
:
"
sidebar
-
switcher
-
history
"
url
:
this
.
sidebarRevampEnabled
?
"
chrome
:
/
/
browser
/
content
/
sidebar
/
sidebar
-
history
.
html
"
:
"
chrome
:
/
/
browser
/
content
/
places
/
historySidebar
.
xhtml
"
menuId
:
"
menu_historySidebar
"
triggerButtonId
:
"
appMenuViewHistorySidebar
"
keyId
:
"
key_gotoHistory
"
menuL10nId
:
"
menu
-
view
-
history
-
button
"
revampL10nId
:
"
sidebar
-
menu
-
history
-
label
"
iconUrl
:
"
chrome
:
/
/
browser
/
content
/
firefoxview
/
view
-
history
.
svg
"
contextMenuId
:
this
.
sidebarRevampEnabled
?
"
sidebar
-
history
-
context
-
menu
"
:
undefined
}
)
]
[
"
viewTabsSidebar
"
this
.
makeSidebar
(
{
elementId
:
"
sidebar
-
switcher
-
tabs
"
url
:
this
.
sidebarRevampEnabled
?
"
chrome
:
/
/
browser
/
content
/
sidebar
/
sidebar
-
syncedtabs
.
html
"
:
"
chrome
:
/
/
browser
/
content
/
syncedtabs
/
sidebar
.
xhtml
"
menuId
:
"
menu_tabsSidebar
"
classAttribute
:
"
sync
-
ui
-
item
"
menuL10nId
:
"
menu
-
view
-
synced
-
tabs
-
sidebar
"
revampL10nId
:
"
sidebar
-
menu
-
synced
-
tabs
-
label
"
iconUrl
:
"
chrome
:
/
/
browser
/
content
/
firefoxview
/
view
-
syncedtabs
.
svg
"
contextMenuId
:
this
.
sidebarRevampEnabled
?
"
sidebar
-
synced
-
tabs
-
context
-
menu
"
:
undefined
}
)
]
[
"
viewBookmarksSidebar
"
this
.
makeSidebar
(
{
elementId
:
"
sidebar
-
switcher
-
bookmarks
"
url
:
"
chrome
:
/
/
browser
/
content
/
places
/
bookmarksSidebar
.
xhtml
"
menuId
:
"
menu_bookmarksSidebar
"
keyId
:
"
viewBookmarksSidebarKb
"
menuL10nId
:
"
menu
-
view
-
bookmarks
"
revampL10nId
:
"
sidebar
-
menu
-
bookmarks
-
label
"
iconUrl
:
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
hollow
.
svg
"
disabled
:
true
}
)
]
]
)
;
this
.
registerPrefSidebar
(
"
browser
.
ml
.
chat
.
enabled
"
"
viewGenaiChatSidebar
"
{
elementId
:
"
sidebar
-
switcher
-
genai
-
chat
"
url
:
"
chrome
:
/
/
browser
/
content
/
genai
/
chat
.
html
"
menuId
:
"
menu_genaiChatSidebar
"
menuL10nId
:
"
menu
-
view
-
genai
-
chat
"
revampL10nId
:
"
sidebar
-
menu
-
genai
-
chat
-
label
"
iconUrl
:
"
chrome
:
/
/
mozapps
/
skin
/
extensions
/
category
-
discover
.
svg
"
}
)
;
if
(
!
this
.
sidebarRevampEnabled
)
{
this
.
registerPrefSidebar
(
"
browser
.
megalist
.
enabled
"
"
viewMegalistSidebar
"
{
elementId
:
"
sidebar
-
switcher
-
megalist
"
url
:
"
chrome
:
/
/
global
/
content
/
megalist
/
megalist
.
html
"
menuId
:
"
menu_megalistSidebar
"
menuL10nId
:
"
menu
-
view
-
megalist
-
sidebar
"
revampL10nId
:
"
sidebar
-
menu
-
megalist
"
}
)
;
}
else
{
this
.
_sidebars
.
set
(
"
viewCustomizeSidebar
"
{
url
:
"
chrome
:
/
/
browser
/
content
/
sidebar
/
sidebar
-
customize
.
html
"
revampL10nId
:
"
sidebar
-
menu
-
customize
-
label
"
iconUrl
:
"
chrome
:
/
/
browser
/
skin
/
preferences
/
category
-
general
.
svg
"
}
)
;
}
return
this
.
_sidebars
;
}
get
toolsAndExtensions
(
)
{
if
(
this
.
_toolsAndExtensions
)
{
return
this
.
_toolsAndExtensions
;
}
this
.
_toolsAndExtensions
=
new
Map
(
)
;
this
.
getTools
(
)
.
forEach
(
tool
=
>
{
this
.
_toolsAndExtensions
.
set
(
tool
.
commandID
tool
)
;
}
)
;
this
.
getExtensions
(
)
.
forEach
(
extension
=
>
{
this
.
_toolsAndExtensions
.
set
(
extension
.
commandID
extension
)
;
}
)
;
return
this
.
_toolsAndExtensions
;
}
get
browser
(
)
{
if
(
this
.
_browser
)
{
return
this
.
_browser
;
}
return
(
this
.
_browser
=
document
.
getElementById
(
"
sidebar
"
)
)
;
}
POSITION_START_PREF
:
"
sidebar
.
position_start
"
DEFAULT_SIDEBAR_ID
:
"
viewBookmarksSidebar
"
TOOLS_PREF
:
"
sidebar
.
main
.
tools
"
lastOpenedId
:
null
_box
:
null
get
_title
(
)
{
if
(
this
.
__title
)
{
return
this
.
__title
;
}
return
(
this
.
__title
=
document
.
getElementById
(
"
sidebar
-
title
"
)
)
;
}
_splitter
:
null
_reversePositionButton
:
null
_switcherPanel
:
null
_switcherTarget
:
null
_switcherArrow
:
null
_inited
:
false
_uninitializing
:
false
_switcherListenersAdded
:
false
_verticalNewTabListenerAdded
:
false
_localesObserverAdded
:
false
_mainResizeObserverAdded
:
false
_mainResizeObserver
:
null
_observer
:
null
_initDeferred
:
Promise
.
withResolvers
(
)
get
promiseInitialized
(
)
{
return
this
.
_initDeferred
.
promise
;
}
get
initialized
(
)
{
return
this
.
_inited
;
}
get
uninitializing
(
)
{
return
this
.
_uninitializing
;
}
get
sidebarContainer
(
)
{
if
(
!
this
.
_sidebarContainer
)
{
this
.
_sidebarContainer
=
document
.
getElementById
(
"
sidebar
-
main
"
)
;
}
return
this
.
_sidebarContainer
;
}
get
sidebarMain
(
)
{
if
(
!
this
.
_sidebarMain
)
{
this
.
_sidebarMain
=
document
.
querySelector
(
"
sidebar
-
main
"
)
;
}
return
this
.
_sidebarMain
;
}
get
toolbarButton
(
)
{
if
(
!
this
.
_toolbarButton
)
{
this
.
_toolbarButton
=
document
.
getElementById
(
"
sidebar
-
button
"
)
;
}
return
this
.
_toolbarButton
;
}
async
init
(
)
{
this
.
_box
=
document
.
getElementById
(
"
sidebar
-
box
"
)
;
this
.
_splitter
=
document
.
getElementById
(
"
sidebar
-
splitter
"
)
;
this
.
_reversePositionButton
=
document
.
getElementById
(
"
sidebar
-
reverse
-
position
"
)
;
this
.
_switcherPanel
=
document
.
getElementById
(
"
sidebarMenu
-
popup
"
)
;
this
.
_switcherTarget
=
document
.
getElementById
(
"
sidebar
-
switcher
-
target
"
)
;
this
.
_switcherArrow
=
document
.
getElementById
(
"
sidebar
-
switcher
-
arrow
"
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
allow_transparent_browser
"
false
)
)
{
this
.
browser
.
setAttribute
(
"
transparent
"
"
true
"
)
;
}
const
menubar
=
document
.
getElementById
(
"
viewSidebarMenu
"
)
;
for
(
const
[
commandID
sidebar
]
of
this
.
sidebars
.
entries
(
)
)
{
if
(
!
Object
.
hasOwn
(
sidebar
"
extensionId
"
)
&
&
commandID
!
=
=
"
viewCustomizeSidebar
"
)
{
const
menuitem
=
this
.
createMenuItem
(
commandID
sidebar
)
;
menubar
.
appendChild
(
menuitem
)
;
}
}
if
(
this
.
_mainResizeObserver
)
{
this
.
_mainResizeObserver
.
disconnect
(
)
;
}
this
.
_mainResizeObserver
=
new
ResizeObserver
(
async
(
[
entry
]
)
=
>
{
let
sidebarBox
=
document
.
getElementById
(
"
sidebar
-
box
"
)
;
sidebarBox
.
style
.
maxWidth
=
calc
(
75vw
-
{
entry
.
contentBoxSize
[
0
]
.
inlineSize
}
px
)
;
}
)
;
if
(
this
.
sidebarRevampEnabled
)
{
if
(
!
customElements
.
get
(
"
sidebar
-
main
"
)
)
{
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
browser
/
content
/
sidebar
/
sidebar
-
main
.
mjs
"
{
global
:
"
current
"
}
)
;
}
this
.
revampComponentsLoaded
=
true
;
this
.
sidebarContainer
.
hidden
=
!
window
.
toolbar
.
visible
|
|
(
this
.
sidebarRevampVisibility
=
=
=
"
hide
-
sidebar
"
&
&
!
this
.
isOpen
)
;
document
.
getElementById
(
"
sidebar
-
header
"
)
.
hidden
=
true
;
if
(
!
this
.
_mainResizeObserverAdded
)
{
this
.
_mainResizeObserver
.
observe
(
this
.
sidebarMain
)
;
this
.
_mainResizeObserverAdded
=
true
;
}
if
(
this
.
sidebarVerticalTabsEnabled
)
{
this
.
toggleTabstrip
(
)
;
}
let
newTabButton
=
document
.
getElementById
(
"
vertical
-
tabs
-
newtab
-
button
"
)
;
if
(
!
this
.
_verticalNewTabListenerAdded
)
{
newTabButton
.
addEventListener
(
"
command
"
event
=
>
{
BrowserCommands
.
openTab
(
{
event
}
)
;
}
)
;
this
.
_verticalNewTabListenerAdded
=
true
;
}
}
else
{
this
.
_switcherCloseButton
=
document
.
getElementById
(
"
sidebar
-
close
"
)
;
if
(
!
this
.
_switcherListenersAdded
)
{
this
.
_switcherCloseButton
.
addEventListener
(
"
command
"
(
)
=
>
{
this
.
hide
(
)
;
}
)
;
this
.
_switcherTarget
.
addEventListener
(
"
command
"
(
)
=
>
{
this
.
toggleSwitcherPanel
(
)
;
}
)
;
this
.
_switcherTarget
.
addEventListener
(
"
keydown
"
event
=
>
{
this
.
handleKeydown
(
event
)
;
}
)
;
this
.
_switcherListenersAdded
=
true
;
}
}
this
.
setPosition
(
)
;
this
.
_inited
=
true
;
if
(
!
this
.
_localesObserverAdded
)
{
Services
.
obs
.
addObserver
(
this
"
intl
:
app
-
locales
-
changed
"
)
;
this
.
_localesObserverAdded
=
true
;
}
this
.
_initDeferred
.
resolve
(
)
;
}
uninit
(
)
{
this
.
_uninitializing
=
true
;
let
enumerator
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
if
(
!
enumerator
.
hasMoreElements
(
)
)
{
let
xulStore
=
Services
.
xulStore
;
xulStore
.
persist
(
this
.
_title
"
value
"
)
;
}
Services
.
obs
.
removeObserver
(
this
"
intl
:
app
-
locales
-
changed
"
)
;
if
(
this
.
_observer
)
{
this
.
_observer
.
disconnect
(
)
;
this
.
_observer
=
null
;
}
if
(
this
.
_mainResizeObserver
)
{
this
.
_mainResizeObserver
.
disconnect
(
)
;
this
.
_mainResizeObserver
=
null
;
}
if
(
this
.
revampComponentsLoaded
)
{
this
.
sidebarMain
.
remove
(
)
;
}
}
observe
(
_subject
topic
_data
)
{
switch
(
topic
)
{
case
"
intl
:
app
-
locales
-
changed
"
:
{
if
(
this
.
isOpen
)
{
this
.
hide
(
)
;
this
.
showInitially
(
this
.
lastOpenedId
)
;
break
;
}
if
(
this
.
revampComponentsLoaded
)
{
this
.
sidebarMain
.
requestUpdate
(
)
;
}
}
}
}
observeTitleChanges
(
element
)
{
if
(
!
element
)
{
return
;
}
let
observer
=
this
.
_observer
;
if
(
!
observer
)
{
observer
=
new
MutationObserver
(
(
)
=
>
{
this
.
title
=
this
.
sidebars
.
get
(
this
.
lastOpenedId
)
.
title
;
}
)
;
this
.
_observer
=
observer
;
}
observer
.
disconnect
(
)
;
observer
.
observe
(
element
{
attributes
:
true
attributeFilter
:
[
"
label
"
]
}
)
;
}
toggleSwitcherPanel
(
)
{
if
(
this
.
_switcherPanel
.
state
=
=
"
open
"
|
|
this
.
_switcherPanel
.
state
=
=
"
showing
"
)
{
this
.
hideSwitcherPanel
(
)
;
}
else
if
(
this
.
_switcherPanel
.
state
=
=
"
closed
"
)
{
this
.
showSwitcherPanel
(
)
;
}
}
handleKeydown
(
event
)
{
switch
(
event
.
key
)
{
case
"
Enter
"
:
case
"
"
:
{
this
.
toggleSwitcherPanel
(
)
;
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
break
;
}
case
"
Escape
"
:
{
this
.
hideSwitcherPanel
(
)
;
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
break
;
}
}
}
hideSwitcherPanel
(
)
{
this
.
_switcherPanel
.
hidePopup
(
)
;
}
showSwitcherPanel
(
)
{
this
.
_switcherPanel
.
addEventListener
(
"
popuphiding
"
(
)
=
>
{
this
.
_switcherTarget
.
classList
.
remove
(
"
active
"
)
;
this
.
_switcherTarget
.
setAttribute
(
"
aria
-
expanded
"
false
)
;
}
{
once
:
true
}
)
;
let
label
=
this
.
_positionStart
=
=
RTL_UI
?
gNavigatorBundle
.
getString
(
"
sidebar
.
moveToLeft
"
)
:
gNavigatorBundle
.
getString
(
"
sidebar
.
moveToRight
"
)
;
this
.
_reversePositionButton
.
setAttribute
(
"
label
"
label
)
;
this
.
_switcherPanel
.
hidden
=
false
;
this
.
_switcherPanel
.
openPopup
(
this
.
_switcherTarget
)
;
this
.
_switcherTarget
.
classList
.
add
(
"
active
"
)
;
this
.
_switcherTarget
.
setAttribute
(
"
aria
-
expanded
"
true
)
;
}
updateShortcut
(
{
keyId
}
)
{
let
menuitem
=
this
.
_switcherPanel
?
.
querySelector
(
[
key
=
"
{
keyId
}
"
]
)
;
if
(
!
menuitem
)
{
return
;
}
menuitem
.
removeAttribute
(
"
acceltext
"
)
;
}
reversePosition
(
)
{
Services
.
prefs
.
setBoolPref
(
this
.
POSITION_START_PREF
!
this
.
_positionStart
)
;
}
setPosition
(
)
{
let
browser
=
document
.
getElementById
(
"
browser
"
)
;
[
.
.
.
browser
.
children
]
.
forEach
(
(
node
i
)
=
>
{
node
.
style
.
order
=
i
+
1
;
}
)
;
let
sidebarContainer
=
document
.
getElementById
(
"
sidebar
-
main
"
)
;
let
sidebarMain
=
document
.
querySelector
(
"
sidebar
-
main
"
)
;
if
(
!
this
.
_positionStart
)
{
let
appcontent
=
document
.
getElementById
(
"
appcontent
"
)
;
let
boxOrdinal
=
this
.
_box
.
style
.
order
;
this
.
_box
.
style
.
order
=
appcontent
.
style
.
order
;
appcontent
.
style
.
order
=
boxOrdinal
;
sidebarContainer
.
style
.
order
=
parseInt
(
this
.
_box
.
style
.
order
)
+
1
;
this
.
_box
.
setAttribute
(
"
positionend
"
true
)
;
sidebarMain
.
setAttribute
(
"
positionend
"
true
)
;
sidebarContainer
.
setAttribute
(
"
positionend
"
true
)
;
}
else
{
this
.
_box
.
removeAttribute
(
"
positionend
"
)
;
sidebarMain
.
removeAttribute
(
"
positionend
"
)
;
sidebarContainer
.
removeAttribute
(
"
positionend
"
)
;
}
this
.
hideSwitcherPanel
(
)
;
let
content
=
SidebarController
.
browser
.
contentWindow
;
if
(
content
&
&
content
.
updatePosition
)
{
content
.
updatePosition
(
)
;
}
}
async
toggleRevampSidebar
(
)
{
await
this
.
promiseInitialized
;
let
wasOpen
=
this
.
isOpen
;
if
(
wasOpen
)
{
this
.
hide
(
)
;
}
let
extensionsArr
=
[
]
;
for
(
const
[
commandID
sidebar
]
of
this
.
sidebars
.
entries
(
)
)
{
if
(
sidebar
.
hasOwnProperty
(
"
extensionId
"
)
)
{
extensionsArr
.
push
(
{
commandID
sidebar
}
)
;
}
}
this
.
sidebars
=
this
.
generateSidebarsMap
(
)
;
for
(
const
extension
of
extensionsArr
)
{
this
.
sidebars
.
set
(
extension
.
commandID
extension
.
sidebar
)
;
}
if
(
!
this
.
sidebarRevampEnabled
)
{
this
.
sidebarMain
.
hidden
=
true
;
document
.
getElementById
(
"
sidebar
-
header
"
)
.
hidden
=
false
;
if
(
this
.
sidebarVerticalTabsEnabled
)
{
Services
.
prefs
.
setBoolPref
(
"
sidebar
.
verticalTabs
"
false
)
;
}
}
else
{
this
.
sidebarMain
.
hidden
=
false
;
}
if
(
!
this
.
_sidebars
.
get
(
this
.
lastOpenedId
)
)
{
this
.
lastOpenedId
=
this
.
DEFAULT_SIDEBAR_ID
;
}
await
this
.
init
(
)
;
}
adoptFromWindow
(
sourceWindow
)
{
let
sourceController
=
sourceWindow
.
SidebarController
;
if
(
!
sourceController
|
|
!
sourceController
.
_box
)
{
return
false
;
}
if
(
!
window
.
toolbar
.
visible
&
&
this
.
sidebarRevampEnabled
)
{
document
.
getElementById
(
"
sidebar
-
main
"
)
.
hidden
=
true
;
return
false
;
}
let
commandID
=
sourceController
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
;
if
(
commandID
)
{
this
.
_box
.
setAttribute
(
"
sidebarcommand
"
commandID
)
;
}
if
(
this
.
sidebarRevampEnabled
&
&
sourceController
.
revampComponentsLoaded
)
{
this
.
promiseInitialized
.
then
(
(
)
=
>
{
this
.
toggleExpanded
(
sourceController
.
sidebarMain
.
expanded
)
;
this
.
sidebarContainer
.
hidden
=
sourceController
.
sidebarContainer
.
hidden
;
this
.
updateToolbarButton
(
)
;
}
)
;
}
if
(
sourceController
.
_box
.
hidden
)
{
return
true
;
}
if
(
!
this
.
sidebars
.
has
(
commandID
)
)
{
return
true
;
}
this
.
_box
.
style
.
width
=
sourceController
.
_box
.
style
.
width
;
this
.
showInitially
(
commandID
)
;
return
true
;
}
windowPrivacyMatches
(
w1
w2
)
{
return
(
PrivateBrowsingUtils
.
isWindowPrivate
(
w1
)
=
=
=
PrivateBrowsingUtils
.
isWindowPrivate
(
w2
)
)
;
}
startDelayedLoad
(
)
{
let
sourceWindow
=
window
.
opener
;
if
(
sourceWindow
)
{
if
(
sourceWindow
.
closed
|
|
sourceWindow
.
location
.
protocol
!
=
"
chrome
:
"
|
|
!
this
.
windowPrivacyMatches
(
sourceWindow
window
)
)
{
return
;
}
if
(
this
.
adoptFromWindow
(
sourceWindow
)
)
{
return
;
}
}
let
wasOpen
=
this
.
_box
.
getAttribute
(
"
checked
"
)
;
if
(
!
wasOpen
)
{
return
;
}
let
commandID
=
this
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
;
if
(
commandID
&
&
this
.
sidebars
.
has
(
commandID
)
)
{
this
.
showInitially
(
commandID
)
;
}
else
{
this
.
_box
.
removeAttribute
(
"
checked
"
)
;
this
.
_box
.
setAttribute
(
"
sidebarcommand
"
"
"
)
;
this
.
lastOpenedId
=
commandID
;
}
}
_fireShowEvent
(
)
{
let
event
=
new
CustomEvent
(
"
SidebarShown
"
{
bubbles
:
true
}
)
;
this
.
_switcherTarget
.
dispatchEvent
(
event
)
;
}
_fireFocusedEvent
(
)
{
let
event
=
new
CustomEvent
(
"
SidebarFocused
"
{
bubbles
:
true
}
)
;
this
.
browser
.
contentWindow
.
dispatchEvent
(
event
)
;
}
get
isOpen
(
)
{
return
!
this
.
_box
.
hidden
;
}
get
currentID
(
)
{
return
this
.
isOpen
?
this
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
:
"
"
;
}
get
currentContextMenu
(
)
{
const
sidebar
=
this
.
sidebars
.
get
(
this
.
currentID
)
;
if
(
!
sidebar
)
{
return
null
;
}
return
document
.
getElementById
(
sidebar
.
contextMenuId
)
;
}
get
title
(
)
{
return
this
.
_title
.
value
;
}
set
title
(
value
)
{
this
.
_title
.
value
=
value
;
}
toggle
(
commandID
=
this
.
lastOpenedId
triggerNode
)
{
if
(
CustomizationHandler
.
isCustomizing
(
)
|
|
CustomizationHandler
.
isExitingCustomizeMode
)
{
return
Promise
.
resolve
(
)
;
}
if
(
!
commandID
)
{
commandID
=
this
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
;
}
if
(
!
commandID
|
|
!
this
.
sidebars
.
has
(
commandID
)
)
{
if
(
this
.
sidebarRevampEnabled
&
&
this
.
sidebars
.
size
)
{
commandID
=
this
.
sidebars
.
keys
(
)
.
next
(
)
.
value
;
}
else
{
commandID
=
this
.
DEFAULT_SIDEBAR_ID
;
}
}
if
(
this
.
isOpen
&
&
commandID
=
=
this
.
currentID
)
{
this
.
hide
(
triggerNode
)
;
return
Promise
.
resolve
(
)
;
}
return
this
.
show
(
commandID
triggerNode
)
;
}
async
_drawImagesToCanvas
(
)
{
let
selectedBrowser
=
gBrowser
.
selectedBrowser
;
let
{
sidebarBackgroundColor
sidebarBrowserWidth
contentBrowserWidth
contentBrowserHeight
}
=
await
window
.
promiseDocumentFlushed
(
(
)
=
>
{
let
results
=
{
}
;
results
.
sidebarBackgroundColor
=
window
.
getComputedStyle
(
this
.
browser
.
parentElement
)
.
backgroundColor
;
results
.
sidebarBrowserWidth
=
this
.
browser
.
clientWidth
;
results
.
contentBrowserWidth
=
selectedBrowser
.
clientWidth
;
results
.
contentBrowserHeight
=
selectedBrowser
.
clientHeight
;
return
results
;
}
)
;
let
width
;
if
(
this
.
sidebarMain
.
open
)
{
width
=
contentBrowserWidth
+
sidebarBrowserWidth
;
}
else
{
width
=
contentBrowserWidth
;
}
let
height
=
contentBrowserHeight
;
let
canvas
=
new
OffscreenCanvas
(
width
height
)
;
let
context
=
canvas
.
getContext
(
"
2d
"
)
;
let
selectedBrowserSnapshot
=
await
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
drawSnapshot
(
null
1
sidebarBackgroundColor
)
;
if
(
this
.
sidebarMain
.
open
)
{
let
sidebarSnapshot
=
await
this
.
browser
.
browsingContext
.
currentWindowGlobal
.
drawSnapshot
(
null
1
sidebarBackgroundColor
)
;
if
(
!
this
.
_positionStart
)
{
context
.
drawImage
(
selectedBrowserSnapshot
0
0
)
;
context
.
drawImage
(
sidebarSnapshot
contentBrowserWidth
0
)
;
}
else
{
context
.
drawImage
(
sidebarSnapshot
0
0
)
;
context
.
drawImage
(
selectedBrowserSnapshot
sidebarBrowserWidth
0
)
;
}
}
else
{
context
.
drawImage
(
selectedBrowserSnapshot
0
0
)
;
}
return
canvas
;
}
async
_animateSidebarMain
(
)
{
this
.
_mainResizeObserver
.
unobserve
(
this
.
sidebarMain
)
;
let
canvas
=
await
this
.
_drawImagesToCanvas
(
)
;
let
initialSidebarMainWidth
=
await
window
.
promiseDocumentFlushed
(
(
)
=
>
this
.
sidebarMain
.
clientWidth
)
;
await
new
Promise
(
resolve
=
>
{
requestAnimationFrame
(
(
)
=
>
{
setTimeout
(
(
)
=
>
{
document
.
documentElement
.
style
.
setProperty
(
-
-
sidebar
-
{
this
.
sidebarMain
.
expanded
?
"
expanded
"
:
"
collapsed
"
}
-
width
{
initialSidebarMainWidth
}
px
)
;
resolve
(
)
;
}
0
)
;
}
)
;
}
)
;
let
blob
=
await
canvas
.
convertToBlob
(
)
;
let
screenshotOverlay
=
document
.
createElement
(
"
div
"
)
;
let
img
=
document
.
createElement
(
"
img
"
)
;
screenshotOverlay
.
classList
.
add
(
"
sidebar
-
animation
-
screenshot
"
)
;
let
url
=
URL
.
createObjectURL
(
blob
)
;
img
.
src
=
url
;
screenshotOverlay
.
appendChild
(
img
)
;
img
.
onload
=
(
)
=
>
{
URL
.
revokeObjectURL
(
img
.
src
)
;
}
;
let
parentHbox
=
this
.
sidebarMain
.
closest
(
"
#
browser
"
)
;
let
parentNode
=
this
.
sidebarMain
.
parentNode
;
if
(
!
this
.
sidebarMain
.
expanded
)
{
screenshotOverlay
.
classList
.
add
(
"
collapsed
"
)
;
if
(
screenshotOverlay
.
classList
.
contains
(
"
expanded
"
)
)
{
screenshotOverlay
.
classList
.
remove
(
"
expanded
"
)
;
}
}
else
{
screenshotOverlay
.
classList
.
add
(
"
expanded
"
)
;
if
(
screenshotOverlay
.
classList
.
contains
(
"
collapsed
"
)
)
{
screenshotOverlay
.
classList
.
remove
(
"
collapsed
"
)
;
}
}
if
(
!
this
.
_positionStart
)
{
screenshotOverlay
.
classList
.
add
(
"
positionend
"
)
;
}
parentHbox
.
insertBefore
(
screenshotOverlay
parentNode
)
;
screenshotOverlay
.
classList
.
add
(
"
translate
"
)
;
if
(
!
this
.
sidebarMain
.
expanded
)
{
requestAnimationFrame
(
(
)
=
>
{
requestAnimationFrame
(
(
)
=
>
{
this
.
toggleExpanded
(
)
;
}
)
;
}
)
;
}
else
{
this
.
expandAfterTranslate
=
true
;
}
screenshotOverlay
.
addEventListener
(
"
animationend
"
this
.
_onScreenshotOverlayAnimationEnd
.
bind
(
this
)
)
;
}
async
_onScreenshotOverlayAnimationEnd
(
e
)
{
if
(
this
.
expandAfterTranslate
&
&
e
.
animationName
.
includes
(
"
translate
-
collapse
"
)
)
{
this
.
toggleExpanded
(
)
;
this
.
expandAfterAnimation
=
false
;
}
if
(
e
.
animationName
.
includes
(
"
translate
"
)
)
{
let
screenshotOverlay
=
document
.
querySelector
(
"
.
sidebar
-
animation
-
screenshot
"
)
;
screenshotOverlay
.
classList
.
remove
(
"
translate
"
)
;
if
(
this
.
sidebarMain
.
expanded
)
{
screenshotOverlay
.
classList
.
add
(
"
expanded
"
)
;
if
(
screenshotOverlay
.
classList
.
contains
(
"
collapsed
"
)
)
{
screenshotOverlay
.
classList
.
remove
(
"
collapsed
"
)
;
}
}
else
{
screenshotOverlay
.
classList
.
add
(
"
collapsed
"
)
;
if
(
screenshotOverlay
.
classList
.
contains
(
"
expanded
"
)
)
{
screenshotOverlay
.
classList
.
remove
(
"
expanded
"
)
;
}
}
screenshotOverlay
.
classList
.
add
(
"
fadeOut
"
)
;
}
if
(
e
.
animationName
.
includes
(
"
opacity
"
)
)
{
let
screenshotOverlay
=
document
.
querySelector
(
"
.
sidebar
-
animation
-
screenshot
"
)
;
screenshotOverlay
.
classList
.
remove
(
"
fadeOut
"
)
;
let
screenshots
=
document
.
querySelectorAll
(
"
.
sidebar
-
animation
-
screenshot
"
)
;
for
(
const
screenshot
of
screenshots
)
{
screenshot
.
remove
(
)
;
}
this
.
_mainResizeObserver
.
observe
(
this
.
sidebarMain
)
;
}
}
async
handleToolbarButtonClick
(
)
{
switch
(
this
.
sidebarRevampVisibility
)
{
case
"
always
-
show
"
:
if
(
!
window
.
gReduceMotion
)
{
this
.
_animateSidebarMain
(
)
;
}
else
{
this
.
toggleExpanded
(
)
;
}
break
;
case
"
hide
-
sidebar
"
:
{
const
isHidden
=
this
.
sidebarContainer
.
hidden
;
if
(
!
isHidden
&
&
this
.
isOpen
)
{
this
.
hide
(
)
;
}
else
if
(
isHidden
)
{
this
.
toggleExpanded
(
true
)
;
}
this
.
sidebarContainer
.
hidden
=
!
isHidden
;
break
;
}
}
}
updateToolbarButton
(
)
{
if
(
!
this
.
sidebarRevampEnabled
|
|
!
this
.
toolbarButton
)
{
return
;
}
switch
(
this
.
sidebarRevampVisibility
)
{
case
"
always
-
show
"
:
this
.
toolbarButton
.
checked
=
this
.
sidebarMain
.
expanded
;
break
;
case
"
hide
-
sidebar
"
:
this
.
toolbarButton
.
checked
=
!
this
.
sidebarContainer
.
hidden
;
break
;
}
}
toggleExpanded
(
force
)
{
this
.
_sidebarMain
.
expanded
=
typeof
force
=
=
"
boolean
"
?
force
:
!
this
.
_sidebarMain
.
expanded
;
gBrowser
.
tabContainer
.
toggleAttribute
(
"
expanded
"
this
.
_sidebarMain
.
expanded
)
;
this
.
updateToolbarButton
(
)
;
}
_loadSidebarExtension
(
commandID
)
{
let
sidebar
=
this
.
sidebars
.
get
(
commandID
)
;
if
(
typeof
sidebar
.
onload
=
=
=
"
function
"
)
{
sidebar
.
onload
(
)
;
}
}
refreshTools
(
)
{
let
changed
=
false
;
const
tools
=
new
Set
(
this
.
sidebarRevampTools
.
split
(
"
"
)
)
;
this
.
toolsAndExtensions
.
forEach
(
(
tool
commandID
)
=
>
{
const
toolID
=
defaultTools
[
commandID
]
;
if
(
toolID
)
{
const
expected
=
!
tools
.
has
(
toolID
)
;
if
(
tool
.
disabled
!
=
expected
)
{
tool
.
disabled
=
expected
;
changed
=
true
;
}
}
}
)
;
if
(
changed
)
{
window
.
dispatchEvent
(
new
CustomEvent
(
"
SidebarItemChanged
"
)
)
;
}
}
toggleTool
(
commandID
)
{
let
toggledTool
=
this
.
toolsAndExtensions
.
get
(
commandID
)
;
toggledTool
.
disabled
=
!
toggledTool
.
disabled
;
if
(
!
toggledTool
.
disabled
)
{
this
.
toolsAndExtensions
.
delete
(
commandID
)
;
this
.
toolsAndExtensions
.
set
(
commandID
toggledTool
)
;
}
if
(
!
Object
.
hasOwn
(
toggledTool
"
extensionId
"
)
)
{
const
tools
=
new
Set
(
this
.
sidebarRevampTools
.
split
(
"
"
)
)
;
const
updatedTools
=
tools
.
has
(
defaultTools
[
commandID
]
)
?
Array
.
from
(
tools
)
.
filter
(
tool
=
>
!
!
tool
&
&
tool
!
=
defaultTools
[
commandID
]
)
:
[
.
.
.
Array
.
from
(
tools
)
.
filter
(
tool
=
>
!
!
tool
)
defaultTools
[
commandID
]
]
;
Services
.
prefs
.
setStringPref
(
this
.
TOOLS_PREF
updatedTools
.
join
(
)
)
;
}
window
.
dispatchEvent
(
new
CustomEvent
(
"
SidebarItemChanged
"
)
)
;
}
addOrUpdateExtension
(
commandID
extension
)
{
if
(
this
.
toolsAndExtensions
.
has
(
commandID
)
)
{
let
extensionToUpdate
=
this
.
toolsAndExtensions
.
get
(
commandID
)
;
extensionToUpdate
.
icon
=
extension
.
icon
;
extensionToUpdate
.
iconUrl
=
extension
.
iconUrl
;
extensionToUpdate
.
tooltiptext
=
extension
.
label
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
SidebarItemChanged
"
)
)
;
}
else
{
this
.
toolsAndExtensions
.
set
(
commandID
{
view
:
commandID
extensionId
:
extension
.
extensionId
icon
:
extension
.
icon
iconUrl
:
extension
.
iconUrl
tooltiptext
:
extension
.
label
disabled
:
false
}
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
SidebarItemAdded
"
)
)
;
}
}
registerExtension
(
commandID
props
)
{
const
sidebar
=
{
title
:
props
.
title
url
:
"
chrome
:
/
/
browser
/
content
/
webext
-
panels
.
xhtml
"
menuId
:
props
.
menuId
switcherMenuId
:
sidebarswitcher_menu_
{
commandID
}
keyId
:
ext
-
key
-
id
-
{
commandID
}
label
:
props
.
title
icon
:
props
.
icon
iconUrl
:
props
.
iconUrl
classAttribute
:
"
menuitem
-
iconic
webextension
-
menuitem
"
extensionId
:
props
.
extensionId
onload
:
props
.
onload
}
;
this
.
sidebars
.
set
(
commandID
sidebar
)
;
const
menuitem
=
this
.
createMenuItem
(
commandID
sidebar
)
;
document
.
getElementById
(
"
viewSidebarMenu
"
)
.
appendChild
(
menuitem
)
;
this
.
addOrUpdateExtension
(
commandID
sidebar
)
;
if
(
!
this
.
sidebarRevampEnabled
)
{
let
switcherMenuitem
=
this
.
createMenuItem
(
commandID
sidebar
)
;
switcherMenuitem
.
setAttribute
(
"
id
"
sidebar
.
switcherMenuId
)
;
switcherMenuitem
.
removeAttribute
(
"
type
"
)
;
let
separator
=
document
.
getElementById
(
"
sidebar
-
extensions
-
separator
"
)
;
separator
.
parentNode
.
insertBefore
(
switcherMenuitem
separator
)
;
}
this
.
_setExtensionAttributes
(
commandID
{
icon
:
props
.
icon
iconUrl
:
props
.
iconUrl
label
:
props
.
title
}
sidebar
)
;
}
createMenuItem
(
commandID
sidebar
)
{
const
menuitem
=
document
.
createXULElement
(
"
menuitem
"
)
;
menuitem
.
setAttribute
(
"
id
"
sidebar
.
menuId
)
;
menuitem
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
menuitem
.
addEventListener
(
"
command
"
(
)
=
>
this
[
menuitem
.
hasAttribute
(
"
type
"
)
?
"
toggle
"
:
"
show
"
]
(
commandID
)
)
;
if
(
sidebar
.
classAttribute
)
{
menuitem
.
setAttribute
(
"
class
"
sidebar
.
classAttribute
)
;
}
if
(
sidebar
.
keyId
)
{
menuitem
.
setAttribute
(
"
key
"
sidebar
.
keyId
)
;
}
if
(
sidebar
.
menuL10nId
)
{
menuitem
.
dataset
.
l10nId
=
sidebar
.
menuL10nId
;
}
if
(
!
window
.
toolbar
.
visible
)
{
menuitem
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
return
menuitem
;
}
setExtensionAttributes
(
commandID
attributes
needsRefresh
)
{
const
sidebar
=
this
.
sidebars
.
get
(
commandID
)
;
this
.
_setExtensionAttributes
(
commandID
attributes
sidebar
needsRefresh
)
;
this
.
addOrUpdateExtension
(
commandID
sidebar
)
;
}
_setExtensionAttributes
(
commandID
{
icon
iconUrl
label
}
sidebar
needsRefresh
=
false
)
{
sidebar
.
icon
=
icon
;
sidebar
.
iconUrl
=
iconUrl
;
sidebar
.
label
=
label
;
const
updateAttributes
=
el
=
>
{
el
.
style
.
setProperty
(
"
-
-
webextension
-
menuitem
-
image
"
sidebar
.
icon
)
;
el
.
setAttribute
(
"
label
"
sidebar
.
label
)
;
}
;
updateAttributes
(
document
.
getElementById
(
sidebar
.
menuId
)
sidebar
)
;
const
switcherMenu
=
document
.
getElementById
(
sidebar
.
switcherMenuId
)
;
if
(
switcherMenu
)
{
updateAttributes
(
switcherMenu
sidebar
)
;
}
if
(
this
.
initialized
&
&
this
.
currentID
=
=
=
commandID
)
{
this
.
title
=
label
;
if
(
this
.
isOpen
&
&
needsRefresh
)
{
this
.
show
(
commandID
)
;
}
}
}
getExtensions
(
)
{
const
extensions
=
[
]
;
for
(
const
[
commandID
sidebar
]
of
this
.
sidebars
.
entries
(
)
)
{
if
(
Object
.
hasOwn
(
sidebar
"
extensionId
"
)
)
{
extensions
.
push
(
{
commandID
view
:
commandID
extensionId
:
sidebar
.
extensionId
iconUrl
:
sidebar
.
iconUrl
tooltiptext
:
sidebar
.
label
disabled
:
false
}
)
;
}
}
return
extensions
;
}
getTools
(
)
{
return
Object
.
keys
(
defaultTools
)
.
map
(
commandID
=
>
{
const
sidebar
=
this
.
sidebars
.
get
(
commandID
)
;
const
disabled
=
!
this
.
sidebarRevampTools
.
split
(
"
"
)
.
includes
(
defaultTools
[
commandID
]
)
;
return
{
commandID
view
:
commandID
iconUrl
:
sidebar
.
iconUrl
l10nId
:
sidebar
.
revampL10nId
disabled
get
hidden
(
)
{
return
!
(
sidebar
.
visible
?
?
true
)
;
}
}
;
}
)
;
}
removeExtension
(
commandID
)
{
const
sidebar
=
this
.
sidebars
.
get
(
commandID
)
;
if
(
!
sidebar
)
{
return
;
}
if
(
this
.
currentID
=
=
=
commandID
)
{
this
.
hide
(
)
;
}
document
.
getElementById
(
sidebar
.
menuId
)
?
.
remove
(
)
;
document
.
getElementById
(
sidebar
.
switcherMenuId
)
?
.
remove
(
)
;
this
.
sidebars
.
delete
(
commandID
)
;
this
.
toolsAndExtensions
.
delete
(
commandID
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
SidebarItemRemoved
"
)
)
;
}
async
show
(
commandID
triggerNode
)
{
let
panelType
=
commandID
.
substring
(
4
commandID
.
length
-
7
)
;
Services
.
telemetry
.
keyedScalarAdd
(
"
sidebar
.
opened
"
panelType
1
)
;
if
(
!
this
.
sidebars
.
has
(
commandID
)
)
{
return
false
;
}
return
this
.
_show
(
commandID
)
.
then
(
(
)
=
>
{
this
.
_loadSidebarExtension
(
commandID
)
;
if
(
triggerNode
)
{
updateToggleControlLabel
(
triggerNode
)
;
}
this
.
updateToolbarButton
(
)
;
this
.
_fireFocusedEvent
(
)
;
return
true
;
}
)
;
}
async
showInitially
(
commandID
)
{
let
panelType
=
commandID
.
substring
(
4
commandID
.
length
-
7
)
;
Services
.
telemetry
.
keyedScalarAdd
(
"
sidebar
.
opened
"
panelType
1
)
;
if
(
!
this
.
sidebars
.
has
(
commandID
)
)
{
return
false
;
}
return
this
.
_show
(
commandID
)
.
then
(
(
)
=
>
{
this
.
_loadSidebarExtension
(
commandID
)
;
return
true
;
}
)
;
}
_show
(
commandID
)
{
return
new
Promise
(
resolve
=
>
{
if
(
this
.
sidebarRevampEnabled
)
{
this
.
_box
.
dispatchEvent
(
new
CustomEvent
(
"
sidebar
-
show
"
{
detail
:
{
viewId
:
commandID
}
}
)
)
;
this
.
_previousExpandedState
=
this
.
sidebarMain
.
expanded
;
this
.
toggleExpanded
(
false
)
;
}
else
{
this
.
hideSwitcherPanel
(
)
;
}
this
.
selectMenuItem
(
commandID
)
;
this
.
_box
.
hidden
=
this
.
_splitter
.
hidden
=
false
;
this
.
_box
.
setAttribute
(
"
checked
"
"
true
"
)
;
this
.
_box
.
setAttribute
(
"
sidebarcommand
"
commandID
)
;
let
{
icon
url
title
sourceL10nEl
contextMenuId
}
=
this
.
sidebars
.
get
(
commandID
)
;
if
(
icon
)
{
this
.
_switcherTarget
.
style
.
setProperty
(
"
-
-
webextension
-
menuitem
-
image
"
icon
)
;
}
else
{
this
.
_switcherTarget
.
style
.
removeProperty
(
"
-
-
webextension
-
menuitem
-
image
"
)
;
}
if
(
contextMenuId
)
{
this
.
_box
.
setAttribute
(
"
context
"
contextMenuId
)
;
}
else
{
this
.
_box
.
removeAttribute
(
"
context
"
)
;
}
this
.
lastOpenedId
=
commandID
;
if
(
!
this
.
sidebarRevampEnabled
)
{
this
.
title
=
title
;
this
.
observeTitleChanges
(
sourceL10nEl
)
;
}
this
.
browser
.
setAttribute
(
"
src
"
url
)
;
if
(
this
.
browser
.
contentDocument
.
location
.
href
!
=
url
)
{
this
.
browser
.
addEventListener
(
"
unload
"
(
)
=
>
{
if
(
this
.
browser
.
loadingTimerID
)
{
clearTimeout
(
this
.
browser
.
loadingTimerID
)
;
delete
this
.
browser
.
loadingTimerID
;
resolve
(
)
;
}
}
)
;
this
.
browser
.
addEventListener
(
"
load
"
(
)
=
>
{
this
.
browser
.
loadingTimerID
=
setTimeout
(
(
)
=
>
{
delete
this
.
browser
.
loadingTimerID
;
resolve
(
)
;
this
.
_fireShowEvent
(
)
;
}
0
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
else
{
resolve
(
)
;
this
.
_fireShowEvent
(
)
;
}
}
)
;
}
hide
(
triggerNode
)
{
if
(
!
this
.
isOpen
)
{
return
;
}
this
.
hideSwitcherPanel
(
)
;
if
(
this
.
sidebarRevampEnabled
)
{
this
.
_box
.
dispatchEvent
(
new
CustomEvent
(
"
sidebar
-
hide
"
)
)
;
this
.
toggleExpanded
(
this
.
sidebarRevampVisibility
=
=
=
"
hide
-
sidebar
"
|
|
this
.
_previousExpandedState
)
;
}
this
.
selectMenuItem
(
"
"
)
;
this
.
browser
.
setAttribute
(
"
src
"
"
about
:
blank
"
)
;
this
.
browser
.
docShell
?
.
createAboutBlankDocumentViewer
(
null
null
)
;
this
.
_box
.
removeAttribute
(
"
checked
"
)
;
this
.
_box
.
removeAttribute
(
"
context
"
)
;
this
.
_box
.
hidden
=
this
.
_splitter
.
hidden
=
true
;
let
selBrowser
=
gBrowser
.
selectedBrowser
;
selBrowser
.
focus
(
)
;
if
(
triggerNode
)
{
updateToggleControlLabel
(
triggerNode
)
;
}
this
.
updateToolbarButton
(
)
;
}
selectMenuItem
(
commandID
)
{
for
(
let
[
id
{
menuId
triggerButtonId
}
]
of
this
.
sidebars
)
{
let
menu
=
document
.
getElementById
(
menuId
)
;
if
(
!
menu
)
{
return
;
}
let
triggerbutton
=
triggerButtonId
&
&
document
.
getElementById
(
triggerButtonId
)
;
if
(
id
=
=
commandID
)
{
menu
.
setAttribute
(
"
checked
"
"
true
"
)
;
if
(
triggerbutton
)
{
triggerbutton
.
setAttribute
(
"
checked
"
"
true
"
)
;
updateToggleControlLabel
(
triggerbutton
)
;
}
}
else
{
menu
.
removeAttribute
(
"
checked
"
)
;
if
(
triggerbutton
)
{
triggerbutton
.
removeAttribute
(
"
checked
"
)
;
updateToggleControlLabel
(
triggerbutton
)
;
}
}
}
}
toggleTabstrip
(
)
{
let
tabStrip
=
document
.
getElementById
(
"
tabbrowser
-
tabs
"
)
;
let
arrowScrollbox
=
gBrowser
.
tabContainer
.
arrowScrollbox
;
let
verticalTabs
=
document
.
getElementById
(
"
vertical
-
tabs
"
)
;
let
tabsToolbarWidgets
=
CustomizableUI
.
getWidgetIdsInArea
(
"
TabsToolbar
"
)
;
let
tabstripPlacement
=
tabsToolbarWidgets
.
findIndex
(
item
=
>
item
=
=
"
tabbrowser
-
tabs
"
)
;
if
(
this
.
sidebarVerticalTabsEnabled
)
{
this
.
toggleExpanded
(
this
.
_sidebarMain
.
expanded
)
;
arrowScrollbox
.
setAttribute
(
"
orient
"
"
vertical
"
)
;
tabStrip
.
setAttribute
(
"
orient
"
"
vertical
"
)
;
verticalTabs
.
append
(
tabStrip
)
;
}
else
{
arrowScrollbox
.
setAttribute
(
"
orient
"
"
horizontal
"
)
;
tabStrip
.
removeAttribute
(
"
expanded
"
)
;
tabStrip
.
setAttribute
(
"
orient
"
"
horizontal
"
)
;
if
(
tabstripPlacement
<
tabsToolbarWidgets
.
length
)
{
document
.
getElementById
(
"
TabsToolbar
-
customization
-
target
"
)
.
insertBefore
(
tabStrip
document
.
getElementById
(
tabsToolbarWidgets
[
tabstripPlacement
+
1
]
)
)
;
}
else
{
document
.
getElementById
(
"
TabsToolbar
-
customization
-
target
"
)
.
append
(
tabStrip
)
;
}
}
verticalTabs
.
toggleAttribute
(
"
visible
"
this
.
sidebarVerticalTabsEnabled
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SidebarController
"
_positionStart
"
SidebarController
.
POSITION_START_PREF
true
(
)
=
>
{
if
(
!
SidebarController
.
uninitializing
)
{
SidebarController
.
setPosition
(
)
;
}
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SidebarController
"
sidebarRevampEnabled
"
"
sidebar
.
revamp
"
false
(
)
=
>
{
if
(
!
SidebarController
.
uninitializing
)
{
SidebarController
.
toggleRevampSidebar
(
)
;
}
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SidebarController
"
sidebarRevampTools
"
"
sidebar
.
main
.
tools
"
"
aichat
syncedtabs
history
"
(
)
=
>
{
if
(
!
SidebarController
.
uninitializing
)
{
SidebarController
.
refreshTools
(
)
;
}
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SidebarController
"
sidebarRevampVisibility
"
"
sidebar
.
visibility
"
"
always
-
show
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SidebarController
"
sidebarVerticalTabsEnabled
"
"
sidebar
.
verticalTabs
"
false
(
)
=
>
{
if
(
!
SidebarController
.
uninitializing
)
{
SidebarController
.
toggleTabstrip
(
)
;
}
}
)
;
