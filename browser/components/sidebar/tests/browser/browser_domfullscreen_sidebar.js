const
{
DOMFullscreenTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
DOMFullscreenTestUtils
.
sys
.
mjs
"
)
;
let
win
;
add_setup
(
async
(
)
=
>
{
DOMFullscreenTestUtils
.
init
(
this
window
)
;
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
waitForBrowserWindowActive
(
win
)
;
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_dom_fullscreen
(
)
{
const
url
=
"
https
:
/
/
example
.
com
/
"
;
const
sidebarLauncher
=
win
.
document
.
getElementById
(
"
sidebar
-
main
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
sidebarLauncher
)
"
Sidebar
launcher
is
initially
visible
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
win
.
gBrowser
url
}
async
browser
=
>
{
await
DOMFullscreenTestUtils
.
changeFullscreen
(
browser
true
)
;
is
(
win
.
document
.
fullscreenElement
browser
"
Entered
DOM
fullscreen
"
)
;
ok
(
BrowserTestUtils
.
isHidden
(
sidebarLauncher
)
"
Sidebar
launcher
is
hidden
in
DOMFullscreen
"
)
;
await
DOMFullscreenTestUtils
.
changeFullscreen
(
browser
false
)
;
ok
(
BrowserTestUtils
.
isVisible
(
sidebarLauncher
)
"
Sidebar
launcher
becomes
visible
when
we
exit
DOMFullscreen
"
)
;
}
)
;
}
)
;
