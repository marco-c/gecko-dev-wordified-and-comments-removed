const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
TouchBarHelper
"
"
mozilla
.
org
/
widget
/
touchbarhelper
;
1
"
"
nsITouchBarHelper
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
TouchBarInput
"
"
mozilla
.
org
/
widget
/
touchbarinput
;
1
"
"
nsITouchBarInput
"
)
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
function
is_element_visible
(
aElement
aMsg
)
{
isnot
(
aElement
null
"
Element
should
not
be
null
when
checking
visibility
"
)
;
ok
(
!
BrowserTestUtils
.
is_hidden
(
aElement
)
aMsg
)
;
}
function
is_element_hidden
(
aElement
aMsg
)
{
isnot
(
aElement
null
"
Element
should
not
be
null
when
checking
visibility
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
aElement
)
aMsg
)
;
}
add_task
(
async
function
updateBookmarkButton
(
)
{
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
AddBookmark
"
)
.
image
.
spec
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
hollow
.
svg
"
"
AddBookmark
image
should
be
unfilled
bookmark
after
event
.
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
bookmark
-
icon
-
updated
"
"
starred
"
)
;
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
AddBookmark
"
)
.
image
.
spec
"
chrome
:
/
/
browser
/
skin
/
bookmark
.
svg
"
"
AddBookmark
image
should
be
filled
bookmark
after
event
.
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
bookmark
-
icon
-
updated
"
"
unstarred
"
)
;
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
AddBookmark
"
)
.
image
.
spec
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
hollow
.
svg
"
"
AddBookmark
image
should
be
unfilled
bookmark
after
event
.
"
)
;
}
)
;
add_task
(
async
function
updateReaderView
(
)
{
const
PREF_READERMODE
=
"
reader
.
parse
-
on
-
load
.
enabled
"
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_READERMODE
true
]
]
}
)
;
var
readerButton
=
document
.
getElementById
(
"
reader
-
mode
-
button
"
)
;
is_element_hidden
(
readerButton
"
Reader
Mode
button
should
be
hidden
.
"
)
;
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
ReaderView
"
)
.
disabled
true
"
ReaderView
Touch
Bar
button
should
be
disabled
by
default
.
"
)
;
let
url
=
TEST_PATH
+
"
readerModeArticle
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
)
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
readerButton
.
hidden
)
;
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
ReaderView
"
)
.
disabled
false
"
ReaderView
Touch
Bar
button
should
be
enabled
on
reader
-
able
pages
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
updateMainButtonInFullscreen
(
)
{
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
OpenLocation
"
)
.
image
.
spec
"
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
"
"
OpenLocation
should
be
displaying
the
search
glass
icon
.
"
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
TEST_PATH
+
"
video_test
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
let
entered
=
waitForFullScreenState
(
gBrowser
.
selectedBrowser
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
entered
;
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
OpenLocation
"
)
.
image
.
spec
"
chrome
:
/
/
browser
/
skin
/
fullscreen
-
exit
.
svg
"
"
OpenLocation
should
be
displaying
the
exit
fullscreen
icon
.
"
)
;
let
exited
=
waitForFullScreenState
(
gBrowser
.
selectedBrowser
false
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
exited
;
Assert
.
equal
(
TouchBarHelper
.
getTouchBarInput
(
"
OpenLocation
"
)
.
image
.
spec
"
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
"
"
OpenLocation
should
be
displaying
the
search
glass
icon
.
"
)
;
}
)
;
function
waitForFullScreenState
(
browser
state
)
{
info
(
"
inside
waitforfullscreenstate
"
)
;
return
new
Promise
(
resolve
=
>
{
let
eventReceived
=
false
;
let
observe
=
(
subject
topic
data
)
=
>
{
if
(
!
eventReceived
)
{
return
;
}
Services
.
obs
.
removeObserver
(
observe
"
fullscreen
-
painted
"
)
;
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
observe
"
fullscreen
-
painted
"
)
;
window
.
addEventListener
(
MozDOMFullscreen
:
{
state
?
"
Entered
"
:
"
Exited
"
}
(
)
=
>
{
eventReceived
=
true
;
}
{
once
:
true
}
)
;
}
)
;
}
