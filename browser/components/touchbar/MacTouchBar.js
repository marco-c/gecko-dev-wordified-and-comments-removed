const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gTouchBarUpdater
"
"
mozilla
.
org
/
widget
/
touchbarupdater
;
1
"
"
nsITouchBarUpdater
"
)
;
function
execCommand
(
commandName
telemetryKey
)
{
let
command
=
TouchBarHelper
.
window
.
document
.
getElementById
(
commandName
)
;
if
(
command
)
{
command
.
doCommand
(
)
;
}
let
telemetry
=
Services
.
telemetry
.
getHistogramById
(
"
TOUCHBAR_BUTTON_PRESSES
"
)
;
telemetry
.
add
(
telemetryKey
)
;
}
function
hexToInt
(
hexString
)
{
if
(
!
hexString
)
{
return
null
;
}
if
(
hexString
.
charAt
(
0
)
=
=
"
#
"
)
{
hexString
=
hexString
.
slice
(
1
)
;
}
let
val
=
parseInt
(
hexString
16
)
;
return
isNaN
(
val
)
?
null
:
val
;
}
const
kInputTypes
=
{
BUTTON
:
"
button
"
LABEL
:
"
label
"
MAIN_BUTTON
:
"
mainButton
"
POPOVER
:
"
popover
"
SCROLLVIEW
:
"
scrollView
"
SCRUBBER
:
"
scrubber
"
}
;
const
kBuiltInInputs
=
{
Back
:
{
title
:
"
back
"
image
:
"
chrome
:
/
/
browser
/
skin
/
back
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
Browser
:
Back
"
"
Back
"
)
}
Forward
:
{
title
:
"
forward
"
image
:
"
chrome
:
/
/
browser
/
skin
/
forward
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
Browser
:
Forward
"
"
Forward
"
)
}
Reload
:
{
title
:
"
reload
"
image
:
"
chrome
:
/
/
browser
/
skin
/
reload
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
Browser
:
Reload
"
"
Reload
"
)
}
Home
:
{
title
:
"
home
"
image
:
"
chrome
:
/
/
browser
/
skin
/
home
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
{
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
win
.
BrowserHome
(
)
;
let
telemetry
=
Services
.
telemetry
.
getHistogramById
(
"
TOUCHBAR_BUTTON_PRESSES
"
)
;
telemetry
.
add
(
"
Home
"
)
;
}
}
Fullscreen
:
{
title
:
"
fullscreen
"
image
:
"
chrome
:
/
/
browser
/
skin
/
fullscreen
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
View
:
FullScreen
"
"
Fullscreen
"
)
}
Find
:
{
title
:
"
find
"
image
:
"
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
cmd_find
"
"
Find
"
)
}
NewTab
:
{
title
:
"
new
-
tab
"
image
:
"
chrome
:
/
/
browser
/
skin
/
add
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
cmd_newNavigatorTabNoEvent
"
"
NewTab
"
)
}
Sidebar
:
{
title
:
"
open
-
sidebar
"
image
:
"
chrome
:
/
/
browser
/
skin
/
sidebars
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
{
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
win
.
SidebarUI
.
toggle
(
)
;
let
telemetry
=
Services
.
telemetry
.
getHistogramById
(
"
TOUCHBAR_BUTTON_PRESSES
"
)
;
telemetry
.
add
(
"
Sidebar
"
)
;
}
}
AddBookmark
:
{
title
:
"
add
-
bookmark
"
image
:
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
hollow
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
Browser
:
AddBookmarkAs
"
"
AddBookmark
"
)
}
ReaderView
:
{
title
:
"
reader
-
view
"
image
:
"
chrome
:
/
/
browser
/
skin
/
readerMode
.
svg
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
execCommand
(
"
View
:
ReaderView
"
"
ReaderView
"
)
disabled
:
true
}
OpenLocation
:
{
title
:
"
open
-
location
"
image
:
"
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
"
type
:
kInputTypes
.
MAIN_BUTTON
callback
:
(
)
=
>
execCommand
(
"
Browser
:
OpenLocation
"
"
OpenLocation
"
)
}
Share
:
{
title
:
"
share
"
image
:
"
chrome
:
/
/
browser
/
skin
/
share
.
svg
"
type
:
kInputTypes
.
SCRUBBER
callback
:
(
)
=
>
execCommand
(
"
cmd_share
"
"
Share
"
)
}
SearchPopover
:
{
title
:
"
search
-
popover
"
image
:
"
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
"
type
:
kInputTypes
.
POPOVER
children
:
{
SearchScrollViewLabel
:
{
title
:
"
search
-
search
-
in
"
type
:
kInputTypes
.
LABEL
}
SearchScrollView
:
{
key
:
"
search
-
scrollview
"
type
:
kInputTypes
.
SCROLLVIEW
children
:
{
Bookmarks
:
{
title
:
"
search
-
bookmarks
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
console
.
log
(
"
Bookmarks
success
!
"
)
}
History
:
{
title
:
"
search
-
history
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
console
.
log
(
"
History
success
!
"
)
}
OpenTabs
:
{
title
:
"
search
-
opentabs
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
console
.
log
(
"
Open
Tabs
success
!
"
)
}
Tags
:
{
title
:
"
search
-
tags
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
console
.
log
(
"
Tags
success
!
"
)
}
Titles
:
{
title
:
"
search
-
titles
"
type
:
kInputTypes
.
BUTTON
callback
:
(
)
=
>
console
.
log
(
"
Titles
success
!
"
)
}
}
}
}
}
}
;
const
kHelperObservers
=
new
Set
(
[
"
bookmark
-
icon
-
updated
"
"
reader
-
mode
-
available
"
"
touchbar
-
location
-
change
"
"
quit
-
application
"
"
intl
:
app
-
locales
-
changed
"
"
urlbar
-
focus
"
"
urlbar
-
blur
"
]
)
;
class
TouchBarHelper
{
constructor
(
)
{
for
(
let
topic
of
kHelperObservers
)
{
Services
.
obs
.
addObserver
(
this
topic
)
;
}
this
.
_searchPopover
=
this
.
getTouchBarInput
(
"
SearchPopover
"
)
;
}
destructor
(
)
{
this
.
_searchPopover
=
null
;
for
(
let
topic
of
kHelperObservers
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
}
}
get
activeTitle
(
)
{
let
tabbrowser
=
TouchBarHelper
.
window
.
ownerGlobal
.
gBrowser
;
let
activeTitle
;
if
(
tabbrowser
)
{
activeTitle
=
tabbrowser
.
selectedBrowser
.
contentTitle
;
}
return
activeTitle
;
}
get
allItems
(
)
{
let
layoutItems
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
for
(
let
inputName
of
Object
.
keys
(
kBuiltInInputs
)
)
{
if
(
typeof
kBuiltInInputs
[
inputName
]
.
context
=
=
"
function
"
)
{
inputName
=
kBuiltInInputs
[
inputName
]
.
context
(
)
;
}
let
input
=
this
.
getTouchBarInput
(
inputName
)
;
if
(
!
input
)
{
continue
;
}
layoutItems
.
appendElement
(
input
)
;
}
return
layoutItems
;
}
static
get
window
(
)
{
return
BrowserWindowTracker
.
getTopWindow
(
)
;
}
get
isUrlbarFocused
(
)
{
return
TouchBarHelper
.
window
.
gURLBar
.
focused
;
}
static
get
baseWindow
(
)
{
return
TouchBarHelper
.
window
.
docShell
.
treeOwner
.
QueryInterface
(
Ci
.
nsIBaseWindow
)
;
}
getTouchBarInput
(
inputName
)
{
if
(
inputName
=
=
"
SearchPopover
"
&
&
this
.
_searchPopover
)
{
return
this
.
_searchPopover
;
}
if
(
!
inputName
|
|
!
kBuiltInInputs
.
hasOwnProperty
(
inputName
)
)
{
return
null
;
}
if
(
typeof
kBuiltInInputs
[
inputName
]
.
context
=
=
"
function
"
)
{
inputName
=
kBuiltInInputs
[
inputName
]
.
context
(
)
;
}
if
(
!
inputName
|
|
!
kBuiltInInputs
.
hasOwnProperty
(
inputName
)
)
{
return
null
;
}
let
inputData
=
kBuiltInInputs
[
inputName
]
;
let
item
=
new
TouchBarInput
(
inputData
)
;
if
(
kBuiltInInputs
[
inputName
]
.
hasOwnProperty
(
"
localTitle
"
)
|
|
!
kBuiltInInputs
[
inputName
]
.
hasOwnProperty
(
"
title
"
)
)
{
return
item
;
}
this
.
_l10n
.
formatValue
(
item
.
key
)
.
then
(
result
=
>
{
item
.
title
=
result
;
kBuiltInInputs
[
inputName
]
.
localTitle
=
result
;
if
(
TouchBarHelper
.
window
)
{
gTouchBarUpdater
.
updateTouchBarInputs
(
TouchBarHelper
.
baseWindow
[
item
]
)
;
}
}
)
;
return
item
;
}
_updateTouchBarInputs
(
.
.
.
inputNames
)
{
if
(
!
TouchBarHelper
.
window
)
{
return
;
}
let
inputs
=
[
]
;
for
(
let
inputName
of
inputNames
)
{
let
input
=
this
.
getTouchBarInput
(
inputName
)
;
if
(
!
input
)
{
continue
;
}
inputs
.
push
(
input
)
;
}
gTouchBarUpdater
.
updateTouchBarInputs
(
TouchBarHelper
.
baseWindow
inputs
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
touchbar
-
location
-
change
"
:
this
.
activeUrl
=
data
;
kBuiltInInputs
.
ReaderView
.
disabled
=
!
data
.
startsWith
(
"
about
:
reader
"
)
;
kBuiltInInputs
.
Back
.
disabled
=
!
TouchBarHelper
.
window
.
gBrowser
.
canGoBack
;
kBuiltInInputs
.
Forward
.
disabled
=
!
TouchBarHelper
.
window
.
gBrowser
.
canGoForward
;
this
.
_updateTouchBarInputs
(
"
ReaderView
"
"
Back
"
"
Forward
"
)
;
break
;
case
"
bookmark
-
icon
-
updated
"
:
data
=
=
"
starred
"
?
(
kBuiltInInputs
.
AddBookmark
.
image
=
"
chrome
:
/
/
browser
/
skin
/
bookmark
.
svg
"
)
:
(
kBuiltInInputs
.
AddBookmark
.
image
=
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
hollow
.
svg
"
)
;
this
.
_updateTouchBarInputs
(
"
AddBookmark
"
)
;
break
;
case
"
reader
-
mode
-
available
"
:
kBuiltInInputs
.
ReaderView
.
disabled
=
false
;
this
.
_updateTouchBarInputs
(
"
ReaderView
"
)
;
break
;
case
"
urlbar
-
focus
"
:
if
(
!
this
.
_searchPopover
)
{
this
.
_searchPopover
=
this
.
getTouchBarInput
(
"
SearchPopover
"
)
;
}
gTouchBarUpdater
.
showPopover
(
TouchBarHelper
.
baseWindow
this
.
_searchPopover
true
)
;
break
;
case
"
urlbar
-
blur
"
:
if
(
!
this
.
_searchPopover
)
{
this
.
_searchPopover
=
this
.
getTouchBarInput
(
"
SearchPopover
"
)
;
}
gTouchBarUpdater
.
showPopover
(
TouchBarHelper
.
baseWindow
this
.
_searchPopover
false
)
;
break
;
case
"
intl
:
app
-
locales
-
changed
"
:
this
.
_searchPopover
=
null
;
for
(
let
input
in
kBuiltInInputs
)
{
delete
input
.
localTitle
;
}
this
.
_updateTouchBarInputs
(
.
.
.
kBuiltInInputs
.
keys
(
)
)
;
break
;
case
"
quit
-
application
"
:
this
.
destructor
(
)
;
break
;
}
}
}
const
helperProto
=
TouchBarHelper
.
prototype
;
helperProto
.
classDescription
=
"
Services
the
Mac
Touch
Bar
"
;
helperProto
.
classID
=
Components
.
ID
(
"
{
ea109912
-
3acc
-
48de
-
b679
-
c23b6a122da5
}
"
)
;
helperProto
.
contractID
=
"
mozilla
.
org
/
widget
/
touchbarhelper
;
1
"
;
helperProto
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsITouchBarHelper
]
)
;
helperProto
.
_l10n
=
new
Localization
(
[
"
browser
/
touchbar
/
touchbar
.
ftl
"
]
)
;
class
TouchBarInput
{
constructor
(
input
)
{
this
.
_key
=
input
.
key
|
|
input
.
title
;
this
.
_title
=
input
.
hasOwnProperty
(
"
localTitle
"
)
?
input
.
localTitle
:
"
"
;
this
.
_image
=
input
.
image
;
this
.
_type
=
input
.
type
;
this
.
_callback
=
input
.
callback
;
this
.
_color
=
hexToInt
(
input
.
color
)
;
this
.
_disabled
=
input
.
hasOwnProperty
(
"
disabled
"
)
?
input
.
disabled
:
false
;
if
(
input
.
children
)
{
this
.
_children
=
[
]
;
let
toLocalize
=
[
]
;
for
(
let
childData
of
Object
.
values
(
input
.
children
)
)
{
let
initializedChild
=
new
TouchBarInput
(
childData
)
;
if
(
!
initializedChild
)
{
continue
;
}
initializedChild
.
type
=
input
.
type
+
"
-
"
+
initializedChild
.
type
;
this
.
_children
.
push
(
initializedChild
)
;
if
(
childData
.
title
&
&
childData
.
title
!
=
"
"
)
{
toLocalize
.
push
(
initializedChild
)
;
}
}
this
.
_localizeChildren
(
toLocalize
)
;
}
}
get
key
(
)
{
return
this
.
_key
;
}
get
title
(
)
{
return
this
.
_title
;
}
set
title
(
title
)
{
this
.
_title
=
title
;
}
get
image
(
)
{
return
this
.
_image
?
PlacesUtils
.
toURI
(
this
.
_image
)
:
null
;
}
set
image
(
image
)
{
this
.
_image
=
image
;
}
get
document
(
)
{
return
BrowserWindowTracker
.
getTopWindow
(
)
.
document
;
}
get
type
(
)
{
return
this
.
_type
=
=
"
"
?
"
button
"
:
this
.
_type
;
}
set
type
(
type
)
{
this
.
_type
=
type
;
}
get
callback
(
)
{
return
this
.
_callback
;
}
set
callback
(
callback
)
{
this
.
_callback
=
callback
;
}
get
color
(
)
{
return
this
.
_color
;
}
set
color
(
color
)
{
this
.
_color
=
this
.
hexToInt
(
color
)
;
}
get
disabled
(
)
{
return
this
.
_disabled
|
|
false
;
}
set
disabled
(
disabled
)
{
this
.
_disabled
=
disabled
;
}
get
children
(
)
{
if
(
!
this
.
_children
)
{
return
null
;
}
let
children
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
for
(
let
child
of
this
.
_children
)
{
children
.
appendElement
(
child
)
;
}
return
children
;
}
async
_localizeChildren
(
children
)
{
let
titles
=
await
helperProto
.
_l10n
.
formatValues
(
children
.
map
(
child
=
>
(
{
id
:
child
.
key
}
)
)
)
;
children
.
forEach
(
function
(
child
index
)
{
child
.
title
=
titles
[
index
]
;
}
)
;
gTouchBarUpdater
.
updateTouchBarInputs
(
TouchBarHelper
.
baseWindow
children
)
;
}
}
const
inputProto
=
TouchBarInput
.
prototype
;
inputProto
.
classDescription
=
"
Represents
an
input
on
the
Mac
Touch
Bar
"
;
inputProto
.
classID
=
Components
.
ID
(
"
{
77441d17
-
f29c
-
49d7
-
982f
-
f20a5ab5a900
}
"
)
;
inputProto
.
contractID
=
"
mozilla
.
org
/
widget
/
touchbarinput
;
1
"
;
inputProto
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsITouchBarInput
]
)
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
TouchBarHelper
TouchBarInput
]
)
;
