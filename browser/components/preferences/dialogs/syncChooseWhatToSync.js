const
lazy
=
{
}
;
ChromeUtils
.
defineLazyGetter
(
lazy
"
fxAccounts
"
(
)
=
>
{
return
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
sys
.
mjs
"
)
.
getFxAccountsSingleton
(
)
;
}
)
;
Preferences
.
addAll
(
[
{
id
:
"
services
.
sync
.
engine
.
addons
"
type
:
"
bool
"
}
{
id
:
"
services
.
sync
.
engine
.
bookmarks
"
type
:
"
bool
"
}
{
id
:
"
services
.
sync
.
engine
.
history
"
type
:
"
bool
"
}
{
id
:
"
services
.
sync
.
engine
.
tabs
"
type
:
"
bool
"
}
{
id
:
"
services
.
sync
.
engine
.
prefs
"
type
:
"
bool
"
}
{
id
:
"
services
.
sync
.
engine
.
passwords
"
type
:
"
bool
"
}
{
id
:
"
services
.
sync
.
engine
.
addresses
"
type
:
"
bool
"
}
{
id
:
"
services
.
sync
.
engine
.
creditcards
"
type
:
"
bool
"
}
]
)
;
let
gSyncChooseWhatToSync
=
{
init
(
)
{
this
.
_setupEventListeners
(
)
;
this
.
_adjustForPrefs
(
)
;
let
options
=
window
.
arguments
[
0
]
;
if
(
options
.
disconnectFun
)
{
document
.
addEventListener
(
"
dialogextra2
"
function
(
)
{
options
.
disconnectFun
(
)
.
then
(
disconnected
=
>
{
if
(
disconnected
)
{
window
.
close
(
)
;
}
}
)
;
}
)
;
}
else
{
document
.
getElementById
(
"
syncChooseOptions
"
)
.
getButton
(
"
extra2
"
)
.
hidden
=
true
;
}
}
_adjustForPrefs
(
)
{
let
enginePrefs
=
[
[
"
services
.
sync
.
engine
.
addresses
"
"
.
sync
-
engine
-
addresses
"
]
[
"
services
.
sync
.
engine
.
creditcards
"
"
.
sync
-
engine
-
creditcards
"
]
]
;
for
(
let
[
enabledPref
className
]
of
enginePrefs
)
{
let
availablePref
=
enabledPref
+
"
.
available
"
;
if
(
Services
.
prefs
.
getBoolPref
(
enabledPref
false
)
)
{
Services
.
prefs
.
setBoolPref
(
availablePref
true
)
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
availablePref
)
)
{
let
elt
=
document
.
querySelector
(
className
)
;
elt
.
hidden
=
true
;
}
}
}
_setupEventListeners
(
)
{
document
.
addEventListener
(
"
dialogaccept
"
(
)
=
>
{
let
settings
=
this
.
_getSyncEngineEnablementChanges
(
)
;
lazy
.
fxAccounts
.
telemetry
.
recordSaveSyncSettings
(
settings
)
.
catch
(
err
=
>
{
console
.
error
(
"
Failed
to
record
save
sync
settings
event
"
err
)
;
}
)
;
}
)
;
}
_getSyncEngineEnablementChanges
(
)
{
let
engines
=
[
"
addons
"
"
bookmarks
"
"
history
"
"
tabs
"
"
prefs
"
"
passwords
"
"
addresses
"
"
creditcards
"
]
;
let
settings
=
{
enabledEngines
:
[
]
disabledEngines
:
[
]
}
;
for
(
let
engine
of
engines
)
{
let
enabledPref
=
"
services
.
sync
.
engine
.
"
+
engine
;
let
checkboxId
=
"
syncEngine
"
+
engine
[
0
]
.
toUpperCase
(
)
+
engine
.
slice
(
1
)
;
let
checkboxValue
=
document
.
getElementById
(
checkboxId
)
.
checked
;
if
(
Services
.
prefs
.
getBoolPref
(
enabledPref
false
)
!
=
=
checkboxValue
)
{
if
(
checkboxValue
=
=
=
true
)
{
settings
.
enabledEngines
.
push
(
engine
)
;
}
else
if
(
checkboxValue
=
=
=
false
)
{
settings
.
disabledEngines
.
push
(
engine
)
;
}
}
}
return
settings
;
}
}
;
window
.
addEventListener
(
"
load
"
(
)
=
>
gSyncChooseWhatToSync
.
init
(
)
)
;
