const
FXA_PAGE_LOGGED_OUT
=
0
;
const
FXA_PAGE_LOGGED_IN
=
1
;
const
FXA_LOGIN_VERIFIED
=
0
;
const
FXA_LOGIN_UNVERIFIED
=
1
;
const
FXA_LOGIN_FAILED
=
2
;
const
SYNC_DISCONNECTED
=
0
;
const
SYNC_CONNECTED
=
1
;
var
gSyncPane
=
{
get
page
(
)
{
return
document
.
getElementById
(
"
weavePrefsDeck
"
)
.
selectedIndex
;
}
set
page
(
val
)
{
document
.
getElementById
(
"
weavePrefsDeck
"
)
.
selectedIndex
=
val
;
}
init
(
)
{
this
.
_setupEventListeners
(
)
;
this
.
setupEnginesUI
(
)
;
this
.
updateSyncUI
(
)
;
document
.
getElementById
(
"
weavePrefsDeck
"
)
.
removeAttribute
(
"
data
-
hidden
-
from
-
search
"
)
;
let
xps
=
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
if
(
xps
.
ready
)
{
this
.
_init
(
)
;
return
;
}
this
.
_showLoadPage
(
xps
)
;
let
onUnload
=
function
(
)
{
window
.
removeEventListener
(
"
unload
"
onUnload
)
;
try
{
Services
.
obs
.
removeObserver
(
onReady
"
weave
:
service
:
ready
"
)
;
}
catch
(
e
)
{
}
}
;
let
onReady
=
(
)
=
>
{
Services
.
obs
.
removeObserver
(
onReady
"
weave
:
service
:
ready
"
)
;
window
.
removeEventListener
(
"
unload
"
onUnload
)
;
this
.
_init
(
)
;
}
;
Services
.
obs
.
addObserver
(
onReady
"
weave
:
service
:
ready
"
)
;
window
.
addEventListener
(
"
unload
"
onUnload
)
;
xps
.
ensureLoaded
(
)
;
}
_showLoadPage
(
)
{
let
maybeAcct
=
false
;
let
username
=
Services
.
prefs
.
getCharPref
(
"
services
.
sync
.
username
"
"
"
)
;
if
(
username
)
{
document
.
getElementById
(
"
fxaEmailAddress
"
)
.
textContent
=
username
;
maybeAcct
=
true
;
}
let
cachedComputerName
=
Services
.
prefs
.
getStringPref
(
"
identity
.
fxaccounts
.
account
.
device
.
name
"
"
"
)
;
if
(
cachedComputerName
)
{
maybeAcct
=
true
;
this
.
_populateComputerName
(
cachedComputerName
)
;
}
this
.
page
=
maybeAcct
?
FXA_PAGE_LOGGED_IN
:
FXA_PAGE_LOGGED_OUT
;
}
_init
(
)
{
Weave
.
Svc
.
Obs
.
add
(
UIState
.
ON_UPDATE
this
.
updateWeavePrefs
this
)
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
Weave
.
Svc
.
Obs
.
remove
(
UIState
.
ON_UPDATE
this
.
updateWeavePrefs
this
)
;
}
)
;
FxAccounts
.
config
.
promiseConnectDeviceURI
(
this
.
_getEntryPoint
(
)
)
.
then
(
connectURI
=
>
{
document
.
getElementById
(
"
connect
-
another
-
device
"
)
.
setAttribute
(
"
href
"
connectURI
)
;
}
)
;
for
(
let
platform
of
[
"
android
"
"
ios
"
]
)
{
let
url
=
Services
.
prefs
.
getCharPref
(
identity
.
mobilepromo
.
{
platform
}
)
+
"
sync
-
preferences
"
;
for
(
let
elt
of
document
.
querySelectorAll
(
.
fxaMobilePromo
-
{
platform
}
)
)
{
elt
.
setAttribute
(
"
href
"
url
)
;
}
}
this
.
updateWeavePrefs
(
)
;
Services
.
obs
.
notifyObservers
(
window
"
sync
-
pane
-
loaded
"
)
;
this
.
_maybeShowSyncAction
(
)
;
}
_maybeShowSyncAction
(
)
{
if
(
location
.
hash
=
=
"
#
sync
"
&
&
UIState
.
get
(
)
.
status
=
=
UIState
.
STATUS_SIGNED_IN
)
{
if
(
location
.
href
.
includes
(
"
action
=
pair
"
)
)
{
gSyncPane
.
pairAnotherDevice
(
)
;
}
else
if
(
location
.
href
.
includes
(
"
action
=
choose
-
what
-
to
-
sync
"
)
)
{
gSyncPane
.
_chooseWhatToSync
(
false
"
callToAction
"
)
;
}
}
}
_toggleComputerNameControls
(
editMode
)
{
let
textbox
=
document
.
getElementById
(
"
fxaSyncComputerName
"
)
;
textbox
.
disabled
=
!
editMode
;
document
.
getElementById
(
"
fxaChangeDeviceName
"
)
.
hidden
=
editMode
;
document
.
getElementById
(
"
fxaCancelChangeDeviceName
"
)
.
hidden
=
!
editMode
;
document
.
getElementById
(
"
fxaSaveChangeDeviceName
"
)
.
hidden
=
!
editMode
;
}
_focusComputerNameTextbox
(
)
{
let
textbox
=
document
.
getElementById
(
"
fxaSyncComputerName
"
)
;
let
valLength
=
textbox
.
value
.
length
;
textbox
.
focus
(
)
;
textbox
.
setSelectionRange
(
valLength
valLength
)
;
}
_blurComputerNameTextbox
(
)
{
document
.
getElementById
(
"
fxaSyncComputerName
"
)
.
blur
(
)
;
}
_focusAfterComputerNameTextbox
(
)
{
Services
.
focus
.
moveFocus
(
window
document
.
getElementById
(
"
fxaSyncComputerName
"
)
Services
.
focus
.
MOVEFOCUS_FORWARD
0
)
;
}
_updateComputerNameValue
(
save
)
{
if
(
save
)
{
let
textbox
=
document
.
getElementById
(
"
fxaSyncComputerName
"
)
;
Weave
.
Service
.
clientsEngine
.
localName
=
textbox
.
value
;
}
this
.
_populateComputerName
(
Weave
.
Service
.
clientsEngine
.
localName
)
;
}
_setupEventListeners
(
)
{
function
setEventListener
(
aId
aEventType
aCallback
)
{
document
.
getElementById
(
aId
)
.
addEventListener
(
aEventType
aCallback
.
bind
(
gSyncPane
)
)
;
}
setEventListener
(
"
openChangeProfileImage
"
"
click
"
function
(
event
)
{
gSyncPane
.
openChangeProfileImage
(
event
)
;
}
)
;
setEventListener
(
"
openChangeProfileImage
"
"
keypress
"
function
(
event
)
{
gSyncPane
.
openChangeProfileImage
(
event
)
;
}
)
;
setEventListener
(
"
fxaChangeDeviceName
"
"
command
"
function
(
)
{
this
.
_toggleComputerNameControls
(
true
)
;
this
.
_focusComputerNameTextbox
(
)
;
}
)
;
setEventListener
(
"
fxaCancelChangeDeviceName
"
"
command
"
function
(
)
{
this
.
_blurComputerNameTextbox
(
)
;
this
.
_toggleComputerNameControls
(
false
)
;
this
.
_updateComputerNameValue
(
false
)
;
this
.
_focusAfterComputerNameTextbox
(
)
;
}
)
;
setEventListener
(
"
fxaSaveChangeDeviceName
"
"
command
"
function
(
)
{
this
.
_blurComputerNameTextbox
(
)
;
this
.
_toggleComputerNameControls
(
false
)
;
this
.
_updateComputerNameValue
(
true
)
;
this
.
_focusAfterComputerNameTextbox
(
)
;
}
)
;
setEventListener
(
"
noFxaSignIn
"
"
command
"
function
(
)
{
gSyncPane
.
signIn
(
)
;
return
false
;
}
)
;
setEventListener
(
"
fxaUnlinkButton
"
"
command
"
function
(
)
{
gSyncPane
.
unlinkFirefoxAccount
(
true
)
;
}
)
;
setEventListener
(
"
verifyFxaAccount
"
"
command
"
gSyncPane
.
verifyFirefoxAccount
)
;
setEventListener
(
"
unverifiedUnlinkFxaAccount
"
"
command
"
function
(
)
{
gSyncPane
.
unlinkFirefoxAccount
(
false
)
;
}
)
;
setEventListener
(
"
rejectReSignIn
"
"
command
"
function
(
)
{
gSyncPane
.
reSignIn
(
this
.
_getEntryPoint
(
)
)
;
}
)
;
setEventListener
(
"
rejectUnlinkFxaAccount
"
"
command
"
function
(
)
{
gSyncPane
.
unlinkFirefoxAccount
(
true
)
;
}
)
;
setEventListener
(
"
fxaSyncComputerName
"
"
keypress
"
function
(
e
)
{
if
(
e
.
keyCode
=
=
KeyEvent
.
DOM_VK_RETURN
)
{
document
.
getElementById
(
"
fxaSaveChangeDeviceName
"
)
.
click
(
)
;
}
else
if
(
e
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
document
.
getElementById
(
"
fxaCancelChangeDeviceName
"
)
.
click
(
)
;
}
}
)
;
setEventListener
(
"
syncSetup
"
"
command
"
function
(
)
{
this
.
_chooseWhatToSync
(
false
"
setupSync
"
)
;
}
)
;
setEventListener
(
"
syncChangeOptions
"
"
command
"
function
(
)
{
this
.
_chooseWhatToSync
(
true
"
manageSyncSettings
"
)
;
}
)
;
setEventListener
(
"
syncNow
"
"
command
"
function
(
)
{
this
.
_updateSyncNow
(
true
)
;
Weave
.
Service
.
sync
(
{
why
:
"
aboutprefs
"
}
)
;
}
)
;
setEventListener
(
"
syncNow
"
"
mouseover
"
function
(
)
{
const
state
=
UIState
.
get
(
)
;
let
tooltiptext
=
state
.
syncing
?
document
.
getElementById
(
"
syncNow
"
)
.
getAttribute
(
"
label
"
)
:
window
.
browsingContext
.
topChromeWindow
.
gSync
.
formatLastSyncDate
(
state
.
lastSync
)
;
document
.
getElementById
(
"
syncNow
"
)
.
setAttribute
(
"
tooltiptext
"
tooltiptext
)
;
}
)
;
}
updateSyncUI
(
)
{
const
state
=
UIState
.
get
(
)
;
const
isSyncEnabled
=
state
.
syncEnabled
;
let
syncStatusTitle
=
document
.
getElementById
(
"
syncStatusTitle
"
)
;
let
syncNowButton
=
document
.
getElementById
(
"
syncNow
"
)
;
let
syncNotConfiguredEl
=
document
.
getElementById
(
"
syncNotConfigured
"
)
;
let
syncConfiguredEl
=
document
.
getElementById
(
"
syncConfigured
"
)
;
if
(
isSyncEnabled
)
{
syncStatusTitle
.
setAttribute
(
"
data
-
l10n
-
id
"
"
prefs
-
syncing
-
on
"
)
;
syncNowButton
.
hidden
=
false
;
syncConfiguredEl
.
hidden
=
false
;
syncNotConfiguredEl
.
hidden
=
true
;
}
else
{
syncStatusTitle
.
setAttribute
(
"
data
-
l10n
-
id
"
"
prefs
-
syncing
-
off
"
)
;
syncNowButton
.
hidden
=
true
;
syncConfiguredEl
.
hidden
=
true
;
syncNotConfiguredEl
.
hidden
=
false
;
}
}
async
_chooseWhatToSync
(
isSyncConfigured
why
=
null
)
{
fxAccounts
.
telemetry
.
recordOpenCWTSMenu
(
why
)
.
catch
(
err
=
>
{
console
.
error
(
"
Failed
to
record
open
CWTS
menu
event
"
err
)
;
}
)
;
if
(
!
isSyncConfigured
)
{
try
{
await
Weave
.
Service
.
updateLocalEnginesState
(
)
;
}
catch
(
err
)
{
console
.
error
(
"
Error
updating
the
local
engines
state
"
err
)
;
}
}
let
params
=
{
}
;
if
(
isSyncConfigured
)
{
params
.
disconnectFun
=
(
)
=
>
this
.
disconnectSync
(
)
;
}
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
syncChooseWhatToSync
.
xhtml
"
{
closingCallback
:
event
=
>
{
if
(
event
.
detail
.
button
=
=
"
accept
"
)
{
if
(
!
isSyncConfigured
)
{
fxAccounts
.
telemetry
.
recordConnection
(
[
"
sync
"
]
"
ui
"
)
.
then
(
(
)
=
>
{
this
.
updateSyncUI
(
)
;
return
Weave
.
Service
.
configure
(
)
;
}
)
.
catch
(
err
=
>
{
console
.
error
(
"
Failed
to
enable
sync
"
err
)
;
}
)
;
}
else
{
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
Weave
.
Service
.
queueSync
(
"
cwts
"
)
;
}
)
;
}
}
const
browser
=
window
.
docShell
.
chromeEventHandler
;
browser
.
loadURI
(
Services
.
io
.
newURI
(
"
about
:
preferences
#
sync
"
)
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
}
params
)
;
}
_updateSyncNow
(
syncing
)
{
let
butSyncNow
=
document
.
getElementById
(
"
syncNow
"
)
;
let
fluentID
=
syncing
?
"
prefs
-
syncing
-
button
"
:
"
prefs
-
sync
-
now
-
button
"
;
if
(
document
.
l10n
.
getAttributes
(
butSyncNow
)
.
id
!
=
fluentID
)
{
butSyncNow
.
removeAttribute
(
"
accesskey
"
)
;
document
.
l10n
.
setAttributes
(
butSyncNow
fluentID
)
;
}
butSyncNow
.
disabled
=
syncing
;
}
updateWeavePrefs
(
)
{
let
service
=
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
let
displayNameLabel
=
document
.
getElementById
(
"
fxaDisplayName
"
)
;
let
fxaEmailAddressLabels
=
document
.
querySelectorAll
(
"
.
l10nArgsEmailAddress
"
)
;
displayNameLabel
.
hidden
=
true
;
this
.
_showLoadPage
(
service
)
;
let
state
=
UIState
.
get
(
)
;
if
(
state
.
status
=
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
this
.
page
=
FXA_PAGE_LOGGED_OUT
;
return
;
}
this
.
page
=
FXA_PAGE_LOGGED_IN
;
let
fxaLoginStatus
=
document
.
getElementById
(
"
fxaLoginStatus
"
)
;
let
syncReady
=
false
;
if
(
state
.
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
fxaLoginStatus
.
selectedIndex
=
FXA_LOGIN_FAILED
;
}
else
if
(
state
.
status
=
=
UIState
.
STATUS_NOT_VERIFIED
)
{
fxaLoginStatus
.
selectedIndex
=
FXA_LOGIN_UNVERIFIED
;
}
else
{
fxaLoginStatus
.
selectedIndex
=
FXA_LOGIN_VERIFIED
;
syncReady
=
true
;
}
fxaEmailAddressLabels
.
forEach
(
label
=
>
{
let
l10nAttrs
=
document
.
l10n
.
getAttributes
(
label
)
;
document
.
l10n
.
setAttributes
(
label
l10nAttrs
.
id
{
email
:
state
.
email
}
)
;
}
)
;
document
.
getElementById
(
"
fxaEmailAddress
"
)
.
textContent
=
state
.
email
;
this
.
_populateComputerName
(
Weave
.
Service
.
clientsEngine
.
localName
)
;
for
(
let
elt
of
document
.
querySelectorAll
(
"
.
needs
-
account
-
ready
"
)
)
{
elt
.
disabled
=
!
syncReady
;
}
document
.
querySelector
(
"
#
fxaLoginVerified
>
.
fxaProfileImage
"
)
.
style
.
removeProperty
(
"
list
-
style
-
image
"
)
;
if
(
state
.
displayName
)
{
fxaLoginStatus
.
setAttribute
(
"
hasName
"
true
)
;
displayNameLabel
.
hidden
=
false
;
document
.
getElementById
(
"
fxaDisplayNameHeading
"
)
.
textContent
=
state
.
displayName
;
}
else
{
fxaLoginStatus
.
removeAttribute
(
"
hasName
"
)
;
}
if
(
state
.
avatarURL
&
&
!
state
.
avatarIsDefault
)
{
let
bgImage
=
'
url
(
"
'
+
state
.
avatarURL
+
'
"
)
'
;
let
profileImageElement
=
document
.
querySelector
(
"
#
fxaLoginVerified
>
.
fxaProfileImage
"
)
;
profileImageElement
.
style
.
listStyleImage
=
bgImage
;
let
img
=
new
Image
(
)
;
img
.
onerror
=
(
)
=
>
{
if
(
profileImageElement
.
style
.
listStyleImage
=
=
=
bgImage
)
{
profileImageElement
.
style
.
removeProperty
(
"
list
-
style
-
image
"
)
;
}
}
;
img
.
src
=
state
.
avatarURL
;
}
FxAccounts
.
config
.
promiseManageURI
(
this
.
_getEntryPoint
(
)
)
.
then
(
accountsManageURI
=
>
{
document
.
getElementById
(
"
verifiedManage
"
)
.
setAttribute
(
"
href
"
accountsManageURI
)
;
}
)
;
let
eltSyncStatus
=
document
.
getElementById
(
"
syncStatusContainer
"
)
;
eltSyncStatus
.
hidden
=
!
syncReady
;
this
.
_updateSyncNow
(
state
.
syncing
)
;
this
.
updateSyncUI
(
)
;
}
_getEntryPoint
(
)
{
let
params
=
URL
.
fromURI
(
document
.
documentURIObject
)
.
searchParams
;
let
entryPoint
=
params
.
get
(
"
entrypoint
"
)
|
|
"
preferences
"
;
entryPoint
=
entryPoint
.
replace
(
/
[
^
-
.
\
w
]
/
g
"
"
)
;
return
entryPoint
;
}
openContentInBrowser
(
url
options
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
)
{
openTrustedLinkIn
(
url
"
tab
"
)
;
return
;
}
win
.
switchToTabHavingURI
(
url
true
options
)
;
}
replaceTabWithUrl
(
url
)
{
let
browser
=
window
.
docShell
.
chromeEventHandler
;
browser
.
loadURI
(
Services
.
io
.
newURI
(
url
)
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
}
)
;
}
async
signIn
(
)
{
if
(
!
(
await
FxAccounts
.
canConnectAccount
(
)
)
)
{
return
;
}
const
url
=
await
FxAccounts
.
config
.
promiseConnectAccountURI
(
this
.
_getEntryPoint
(
)
)
;
this
.
replaceTabWithUrl
(
url
)
;
}
async
reSignIn
(
entrypoint
)
{
const
url
=
await
FxAccounts
.
config
.
promiseConnectAccountURI
(
entrypoint
)
;
this
.
replaceTabWithUrl
(
url
)
;
}
clickOrSpaceOrEnterPressed
(
event
)
{
return
(
(
event
.
type
=
=
"
click
"
&
&
event
.
button
=
=
0
)
|
|
(
event
.
type
=
=
"
keypress
"
&
&
(
event
.
charCode
=
=
KeyEvent
.
DOM_VK_SPACE
|
|
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_RETURN
)
)
)
;
}
openChangeProfileImage
(
event
)
{
if
(
this
.
clickOrSpaceOrEnterPressed
(
event
)
)
{
FxAccounts
.
config
.
promiseChangeAvatarURI
(
this
.
_getEntryPoint
(
)
)
.
then
(
url
=
>
{
this
.
openContentInBrowser
(
url
{
replaceQueryString
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
)
;
event
.
preventDefault
(
)
;
}
}
async
verifyFirefoxAccount
(
)
{
return
this
.
reSignIn
(
"
preferences
-
reverify
"
)
;
}
unlinkFirefoxAccount
(
confirm
)
{
window
.
browsingContext
.
topChromeWindow
.
gSync
.
disconnect
(
{
confirm
}
)
;
}
disconnectSync
(
)
{
return
window
.
browsingContext
.
topChromeWindow
.
gSync
.
disconnect
(
{
confirm
:
true
disconnectAccount
:
false
}
)
;
}
pairAnotherDevice
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
fxaPairDevice
.
xhtml
"
{
features
:
"
resizable
=
no
"
}
)
;
}
_populateComputerName
(
value
)
{
let
textbox
=
document
.
getElementById
(
"
fxaSyncComputerName
"
)
;
if
(
!
textbox
.
hasAttribute
(
"
placeholder
"
)
)
{
textbox
.
setAttribute
(
"
placeholder
"
fxAccounts
.
device
.
getDefaultLocalName
(
)
)
;
}
textbox
.
value
=
value
;
}
setupEnginesUI
(
)
{
let
observe
=
(
elt
prefName
)
=
>
{
elt
.
hidden
=
!
Services
.
prefs
.
getBoolPref
(
prefName
false
)
;
}
;
for
(
let
elt
of
document
.
querySelectorAll
(
"
[
engine_preference
]
"
)
)
{
let
prefName
=
elt
.
getAttribute
(
"
engine_preference
"
)
;
let
obs
=
observe
.
bind
(
null
elt
prefName
)
;
obs
(
)
;
Services
.
prefs
.
addObserver
(
prefName
obs
)
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
Services
.
prefs
.
removeObserver
(
prefName
obs
)
;
}
)
;
}
}
}
;
