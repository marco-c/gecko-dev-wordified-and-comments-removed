"
use
strict
"
;
const
PERMISSIONS_URL
=
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
sitePermissions
.
xhtml
"
;
const
URL
=
"
http
:
/
/
www
.
example
.
com
"
;
const
URI
=
Services
.
io
.
newURI
(
URL
)
;
var
sitePermissionsDialog
;
function
checkPermissionItem
(
origin
state
)
{
let
doc
=
sitePermissionsDialog
.
document
;
let
label
=
doc
.
getElementsByTagName
(
"
label
"
)
[
3
]
;
Assert
.
equal
(
label
.
value
origin
)
;
let
menulist
=
doc
.
getElementsByTagName
(
"
menulist
"
)
[
0
]
;
Assert
.
equal
(
menulist
.
value
state
)
;
}
async
function
openPermissionsDialog
(
)
{
let
dialogOpened
=
promiseLoadSubDialog
(
PERMISSIONS_URL
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
let
doc
=
content
.
document
;
let
settingsButton
=
doc
.
getElementById
(
"
notificationSettingsButton
"
)
;
settingsButton
.
click
(
)
;
}
)
;
sitePermissionsDialog
=
await
dialogOpened
;
await
sitePermissionsDialog
.
document
.
mozSubdialogReady
;
}
add_task
(
async
function
openSitePermissionsDialog
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
await
openPermissionsDialog
(
)
;
}
)
;
add_task
(
async
function
addPermission
(
)
{
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
Assert
.
equal
(
richlistbox
.
itemCount
0
"
Number
of
permission
items
is
0
initially
"
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
Assert
.
equal
(
richlistbox
.
itemCount
1
)
;
checkPermissionItem
(
URL
Services
.
perms
.
ALLOW_ACTION
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
}
)
;
add_task
(
async
function
addPermissionPrivateBrowsing
(
)
{
let
privateBrowsingPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
URI
{
privateBrowsingId
:
1
}
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
Assert
.
equal
(
richlistbox
.
itemCount
0
"
Number
of
permission
items
is
0
initially
"
)
;
PermissionTestUtils
.
add
(
privateBrowsingPrincipal
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
Services
.
perms
.
EXPIRE_SESSION
)
;
Assert
.
equal
(
richlistbox
.
itemCount
0
)
;
PermissionTestUtils
.
remove
(
privateBrowsingPrincipal
"
desktop
-
notification
"
)
;
PermissionTestUtils
.
add
(
privateBrowsingPrincipal
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
Assert
.
equal
(
richlistbox
.
itemCount
0
)
;
PermissionTestUtils
.
remove
(
privateBrowsingPrincipal
"
desktop
-
notification
"
)
;
}
)
;
add_task
(
async
function
observePermissionChange
(
)
{
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
DENY_ACTION
)
;
checkPermissionItem
(
URL
Services
.
perms
.
DENY_ACTION
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
}
)
;
add_task
(
async
function
observePermissionDelete
(
)
{
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
Assert
.
equal
(
richlistbox
.
itemCount
1
"
The
box
contains
one
permission
item
initially
"
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
Assert
.
equal
(
richlistbox
.
itemCount
0
)
;
}
)
;
add_task
(
async
function
onPermissionChange
(
)
{
let
doc
=
sitePermissionsDialog
.
document
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
doc
.
getElementsByAttribute
(
"
value
"
SitePermissions
.
BLOCK
)
[
0
]
.
click
(
)
;
Assert
.
equal
(
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
.
capability
Services
.
perms
.
ALLOW_ACTION
"
Permission
state
does
not
change
before
saving
changes
"
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
.
capability
=
=
Services
.
perms
.
DENY_ACTION
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
}
)
;
add_task
(
async
function
onPermissionDelete
(
)
{
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
richlistbox
.
selectItem
(
richlistbox
.
getItemAtIndex
(
0
)
)
;
doc
.
getElementById
(
"
removePermission
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
richlistbox
.
itemCount
=
=
0
)
;
Assert
.
equal
(
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
.
capability
Services
.
perms
.
ALLOW_ACTION
"
Permission
is
not
deleted
before
saving
changes
"
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
=
=
null
)
;
}
)
;
add_task
(
async
function
onAllPermissionsDelete
(
)
{
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
let
u
=
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
test
.
com
"
)
;
PermissionTestUtils
.
add
(
u
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
doc
.
getElementById
(
"
removeAllPermissions
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
richlistbox
.
itemCount
=
=
0
)
;
Assert
.
equal
(
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
.
capability
Services
.
perms
.
ALLOW_ACTION
)
;
Assert
.
equal
(
PermissionTestUtils
.
getPermissionObject
(
u
"
desktop
-
notification
"
)
.
capability
Services
.
perms
.
ALLOW_ACTION
"
Permissions
are
not
deleted
before
saving
changes
"
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
=
=
null
&
&
PermissionTestUtils
.
getPermissionObject
(
u
"
desktop
-
notification
"
)
=
=
null
)
;
}
)
;
add_task
(
async
function
onPermissionChangeAndDelete
(
)
{
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
doc
.
getElementsByAttribute
(
"
value
"
SitePermissions
.
BLOCK
)
[
0
]
.
click
(
)
;
richlistbox
.
selectItem
(
richlistbox
.
getItemAtIndex
(
0
)
)
;
doc
.
getElementById
(
"
removePermission
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
richlistbox
.
itemCount
=
=
0
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
=
=
null
)
;
}
)
;
add_task
(
async
function
onPermissionChangeCancel
(
)
{
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
doc
.
getElementsByAttribute
(
"
value
"
SitePermissions
.
BLOCK
)
[
0
]
.
click
(
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
cancel
"
)
.
click
(
)
;
Assert
.
equal
(
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
.
capability
Services
.
perms
.
ALLOW_ACTION
"
Permission
state
does
not
change
on
clicking
cancel
"
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
}
)
;
add_task
(
async
function
onPermissionDeleteCancel
(
)
{
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
richlistbox
.
selectItem
(
richlistbox
.
getItemAtIndex
(
0
)
)
;
doc
.
getElementById
(
"
removePermission
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
richlistbox
.
itemCount
=
=
0
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
cancel
"
)
.
click
(
)
;
Assert
.
equal
(
PermissionTestUtils
.
getPermissionObject
(
URI
"
desktop
-
notification
"
)
.
capability
Services
.
perms
.
ALLOW_ACTION
"
Permission
state
does
not
change
on
clicking
cancel
"
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
}
)
;
add_task
(
async
function
onSearch
(
)
{
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
let
searchBox
=
doc
.
getElementById
(
"
searchBox
"
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
searchBox
.
value
=
"
www
.
example
.
com
"
;
let
u
=
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
test
.
com
"
)
;
PermissionTestUtils
.
add
(
u
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
Assert
.
equal
(
doc
.
getElementsByAttribute
(
"
origin
"
"
http
:
/
/
www
.
test
.
com
"
)
[
0
]
null
)
;
Assert
.
equal
(
doc
.
getElementsByAttribute
(
"
origin
"
"
http
:
/
/
www
.
example
.
com
"
)
[
0
]
richlistbox
.
getItemAtIndex
(
0
)
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
PermissionTestUtils
.
remove
(
u
"
desktop
-
notification
"
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
cancel
"
)
.
click
(
)
;
}
)
;
add_task
(
async
function
onPermissionsSort
(
)
{
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
let
u
=
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
test
.
com
"
)
;
PermissionTestUtils
.
add
(
u
"
desktop
-
notification
"
Services
.
perms
.
DENY_ACTION
)
;
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
0
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
example
.
com
"
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
1
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
test
.
com
"
)
;
doc
.
getElementById
(
"
statusCol
"
)
.
click
(
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
0
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
test
.
com
"
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
1
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
example
.
com
"
)
;
doc
.
getElementById
(
"
siteCol
"
)
.
click
(
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
0
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
example
.
com
"
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
1
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
test
.
com
"
)
;
doc
.
getElementById
(
"
siteCol
"
)
.
click
(
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
0
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
test
.
com
"
)
;
Assert
.
equal
(
richlistbox
.
getItemAtIndex
(
1
)
.
getAttribute
(
"
origin
"
)
"
http
:
/
/
www
.
example
.
com
"
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
PermissionTestUtils
.
remove
(
u
"
desktop
-
notification
"
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
cancel
"
)
.
click
(
)
;
}
)
;
add_task
(
async
function
onPermissionDisable
(
)
{
Services
.
prefs
.
setIntPref
(
"
permissions
.
default
.
desktop
-
notification
"
SitePermissions
.
UNKNOWN
)
;
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
checkbox
=
doc
.
getElementById
(
"
permissionsDisableCheckbox
"
)
;
Assert
.
equal
(
checkbox
.
checked
false
)
;
checkbox
.
checked
=
true
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
cancel
"
)
.
click
(
)
;
let
perm
=
Services
.
prefs
.
getIntPref
(
"
permissions
.
default
.
desktop
-
notification
"
)
;
Assert
.
equal
(
perm
SitePermissions
.
UNKNOWN
)
;
await
openPermissionsDialog
(
)
;
doc
=
sitePermissionsDialog
.
document
;
checkbox
=
doc
.
getElementById
(
"
permissionsDisableCheckbox
"
)
;
checkbox
.
checked
=
true
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
.
click
(
)
;
perm
=
Services
.
prefs
.
getIntPref
(
"
permissions
.
default
.
desktop
-
notification
"
)
;
Assert
.
equal
(
perm
SitePermissions
.
BLOCK
)
;
await
openPermissionsDialog
(
)
;
doc
=
sitePermissionsDialog
.
document
;
checkbox
=
doc
.
getElementById
(
"
permissionsDisableCheckbox
"
)
;
Assert
.
equal
(
checkbox
.
checked
true
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
cancel
"
)
.
click
(
)
;
Services
.
prefs
.
setIntPref
(
"
permissions
.
default
.
desktop
-
notification
"
SitePermissions
.
UNKNOWN
)
;
}
)
;
add_task
(
async
function
checkDefaultPermissionState
(
)
{
Services
.
prefs
.
setIntPref
(
"
permissions
.
default
.
desktop
-
notification
"
SitePermissions
.
ALLOW
)
;
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
checkbox
=
doc
.
getElementById
(
"
permissionsDisableCheckbox
"
)
;
Assert
.
equal
(
checkbox
.
checked
false
)
;
checkbox
.
checked
=
true
;
checkbox
.
checked
=
false
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
.
click
(
)
;
let
state
=
Services
.
prefs
.
getIntPref
(
"
permissions
.
default
.
desktop
-
notification
"
)
;
Assert
.
equal
(
state
SitePermissions
.
ALLOW
)
;
Services
.
prefs
.
setIntPref
(
"
permissions
.
default
.
desktop
-
notification
"
SitePermissions
.
UNKNOWN
)
;
}
)
;
add_task
(
async
function
testTabBehaviour
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
accessibility
.
tabfocus
"
7
]
]
}
)
;
PermissionTestUtils
.
add
(
URI
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
let
u
=
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
test
.
com
"
)
;
PermissionTestUtils
.
add
(
u
"
desktop
-
notification
"
Services
.
perms
.
ALLOW_ACTION
)
;
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
sitePermissionsDialog
)
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
is
(
richlistbox
doc
.
activeElement
.
closest
(
"
#
permissionsBox
"
)
"
The
richlistbox
is
focused
after
pressing
tab
once
.
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
sitePermissionsDialog
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
sitePermissionsDialog
)
;
let
menulist
=
doc
.
getElementById
(
"
permissionsBox
"
)
.
itemChildren
[
1
]
.
getElementsByTagName
(
"
menulist
"
)
[
0
]
;
is
(
menulist
doc
.
activeElement
"
The
menulist
inside
the
selected
richlistitem
is
focused
now
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
sitePermissionsDialog
)
;
let
removeButton
=
doc
.
getElementById
(
"
removePermission
"
)
;
is
(
removeButton
doc
.
activeElement
"
The
focus
moves
outside
the
richlistbox
and
onto
the
remove
button
"
)
;
PermissionTestUtils
.
remove
(
URI
"
desktop
-
notification
"
)
;
PermissionTestUtils
.
remove
(
u
"
desktop
-
notification
"
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
cancel
"
)
.
click
(
)
;
}
)
;
add_task
(
async
function
removeTab
(
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
