"
use
strict
"
;
ChromeUtils
.
defineLazyGetter
(
this
"
QuickSuggestTestUtils
"
(
)
=
>
{
const
{
QuickSuggestTestUtils
:
module
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
QuickSuggestTestUtils
.
sys
.
mjs
"
)
;
module
.
init
(
this
)
;
return
module
;
}
)
;
const
{
CustomizableUITestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
sys
.
mjs
"
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
const
CHECKBOX_ID
=
"
searchShowSearchTermCheckbox
"
;
const
PREF_SEARCHTERMS
=
"
browser
.
urlbar
.
showSearchTerms
.
enabled
"
;
const
PREF_FEATUREGATE
=
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
;
add_task
(
async
function
showSearchTermsVisibility_experiment_beforeOpen
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_FEATUREGATE
false
]
]
}
)
;
await
QuickSuggestTestUtils
.
withExperiment
(
{
valueOverrides
:
{
showSearchTermsFeatureGate
:
true
}
callback
:
async
(
)
=
>
{
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CHECKBOX_ID
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
container
)
"
The
option
box
is
visible
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
showSearchTermsVisibility_experiment_afterOpen
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_FEATUREGATE
false
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CHECKBOX_ID
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
container
)
"
The
option
box
is
initially
hidden
.
"
)
;
await
QuickSuggestTestUtils
.
withExperiment
(
{
valueOverrides
:
{
showSearchTermsFeatureGate
:
true
}
callback
:
async
(
)
=
>
{
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
container
)
"
The
option
box
is
visible
"
)
;
}
}
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
container
)
"
The
option
box
is
hidden
again
after
the
experiment
is
uninstalled
.
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
showSearchTerms_checkbox
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_FEATUREGATE
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
option
=
doc
.
getElementById
(
CHECKBOX_ID
)
;
Assert
.
ok
(
option
.
checked
"
Option
box
should
be
checked
.
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_SEARCHTERMS
false
]
]
}
)
;
Assert
.
ok
(
!
option
.
checked
"
Option
box
should
not
be
checked
.
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
PREF_SEARCHTERMS
)
false
"
Preference
should
be
false
if
un
-
checked
.
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
PREF_SEARCHTERMS
)
true
"
Preference
should
be
true
if
checked
.
"
)
;
Services
.
prefs
.
clearUserPref
(
PREF_SEARCHTERMS
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
showSearchTerms_and_searchBar_preference_load
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_FEATUREGATE
true
]
]
}
)
;
await
gCUITestUtils
.
addSearchBar
(
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
checkbox
=
doc
.
getElementById
(
CHECKBOX_ID
)
;
Assert
.
ok
(
checkbox
.
hidden
"
showSearchTerms
checkbox
should
be
hidden
when
search
bar
is
enabled
.
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
add_task
(
async
function
showSearchTerms_and_searchBar_preference_change
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_FEATUREGATE
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
checkbox
=
doc
.
getElementById
(
CHECKBOX_ID
)
;
Assert
.
ok
(
!
checkbox
.
hidden
"
showSearchTerms
checkbox
should
be
shown
.
"
)
;
await
gCUITestUtils
.
addSearchBar
(
)
;
Assert
.
ok
(
checkbox
.
hidden
"
showSearchTerms
checkbox
should
be
hidden
when
search
bar
is
enabled
.
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
gCUITestUtils
.
removeSearchBar
(
)
;
Assert
.
ok
(
!
checkbox
.
hidden
"
showSearchTerms
checkbox
should
be
shown
.
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
