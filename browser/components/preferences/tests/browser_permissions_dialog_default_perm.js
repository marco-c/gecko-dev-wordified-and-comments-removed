"
use
strict
"
;
const
PERMISSIONS_URL
=
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
permissions
.
xhtml
"
;
let
sitePermissionsDialog
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
example
.
com
"
)
{
}
)
;
let
pbPrincipal
=
Services
.
scriptSecurityManager
.
principalWithOA
(
principal
{
privateBrowsingId
:
1
}
)
;
let
principalB
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
org
"
)
{
}
)
;
async
function
addDefaultTestPermissions
(
)
{
let
file
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
file
.
append
(
"
test_default_permissions
"
)
;
await
IOUtils
.
writeUTF8
(
file
.
path
origin
\
tinstall
\
t1
\
t
{
principal
.
origin
}
\
norigin
\
tinstall
\
t1
\
t
{
pbPrincipal
.
origin
}
\
n
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
permissions
.
manager
.
defaultsUrl
"
Services
.
io
.
newFileURI
(
file
)
.
spec
]
]
}
)
;
Services
.
obs
.
notifyObservers
(
null
"
testonly
-
reload
-
permissions
-
from
-
disk
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
IOUtils
.
remove
(
file
.
path
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
obs
.
notifyObservers
(
null
"
testonly
-
reload
-
permissions
-
from
-
disk
"
)
;
}
)
;
}
async
function
openPermissionsDialog
(
)
{
let
dialogOpened
=
promiseLoadSubDialog
(
PERMISSIONS_URL
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
let
doc
=
content
.
document
;
let
settingsButton
=
doc
.
getElementById
(
"
addonExceptions
"
)
;
settingsButton
.
click
(
)
;
}
)
;
sitePermissionsDialog
=
await
dialogOpened
;
await
sitePermissionsDialog
.
document
.
mozSubdialogReady
;
}
add_setup
(
async
function
(
)
{
await
addDefaultTestPermissions
(
)
;
}
)
;
add_task
(
async
function
removeAll
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
await
openPermissionsDialog
(
)
;
let
doc
=
sitePermissionsDialog
.
document
;
let
richlistbox
=
doc
.
getElementById
(
"
permissionsBox
"
)
;
Assert
.
equal
(
richlistbox
.
itemCount
2
"
Should
have
the
two
default
permission
entries
initially
.
"
)
;
info
(
"
Adding
a
new
non
-
default
install
permission
"
)
;
PermissionTestUtils
.
add
(
principalB
"
install
"
Services
.
perms
.
ALLOW_ACTION
)
;
info
(
"
Waiting
for
the
permission
to
appear
in
the
list
.
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
richlistbox
{
childList
:
true
}
(
)
=
>
richlistbox
.
itemCount
=
=
3
)
;
info
(
"
Clicking
remove
all
.
"
)
;
doc
.
getElementById
(
"
removeAllPermissions
"
)
.
click
(
)
;
info
(
"
Waiting
for
all
list
items
to
be
cleared
.
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
richlistbox
{
childList
:
true
}
(
)
=
>
richlistbox
.
itemCount
=
=
0
)
;
let
dialogClosePromise
=
BrowserTestUtils
.
waitForEvent
(
sitePermissionsDialog
"
dialogclosing
"
true
)
;
info
(
"
Accepting
dialog
to
apply
the
changes
.
"
)
;
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
.
click
(
)
;
info
(
"
Waiting
for
dialog
to
close
.
"
)
;
await
dialogClosePromise
;
info
(
"
Waiting
for
all
permissions
to
be
removed
.
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PermissionTestUtils
.
getPermissionObject
(
principal
"
install
"
)
=
=
null
&
&
PermissionTestUtils
.
getPermissionObject
(
pbPrincipal
"
install
"
)
=
=
null
&
&
PermissionTestUtils
.
getPermissionObject
(
principalB
"
install
"
)
=
=
null
)
;
info
(
"
Opening
the
permissions
dialog
again
.
"
)
;
await
openPermissionsDialog
(
)
;
Assert
.
equal
(
richlistbox
.
itemCount
0
"
Permission
list
should
still
be
empty
.
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
Services
.
perms
.
removeAll
(
)
;
}
)
;
