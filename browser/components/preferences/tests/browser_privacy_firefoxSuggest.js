"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarProviderQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarProviderQuickSuggest
.
jsm
"
}
)
;
const
CONTAINER_ID
=
"
firefoxSuggestContainer
"
;
const
MAIN_CHECKBOX_ID
=
"
firefoxSuggestSuggestion
"
;
const
SPONSORED_CHECKBOX_ID
=
"
firefoxSuggestSponsoredSuggestion
"
;
const
EXPECTED_L10N_IDS
=
{
locationBarGroupHeader
:
{
enabled
:
"
addressbar
-
header
-
firefox
-
suggest
"
disabled
:
"
addressbar
-
header
"
}
locationBarSuggestionLabel
:
{
enabled
:
"
addressbar
-
suggest
-
firefox
-
suggest
"
disabled
:
"
addressbar
-
suggest
"
}
}
;
let
originalExperimentPrefDefaultBranchValue
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
requestLongerTimeout
(
3
)
;
}
add_task
(
async
function
init
(
)
{
try
{
originalExperimentPrefDefaultBranchValue
=
Services
.
prefs
.
getDefaultBranch
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
.
getBoolPref
(
"
"
)
;
}
catch
(
ex
)
{
}
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
true
newDefaultBranchValue
:
false
newUserBranchValue
:
false
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
false
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
false
newUserBranchValue
:
false
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
false
initialExpectedVisibility
:
false
newDefaultBranchValue
:
false
newUserBranchValue
:
false
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
true
newDefaultBranchValue
:
true
newUserBranchValue
:
undefined
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
true
newDefaultBranchValue
:
undefined
newUserBranchValue
:
true
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
false
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
true
newUserBranchValue
:
undefined
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
false
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
undefined
newUserBranchValue
:
true
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
false
initialExpectedVisibility
:
false
newDefaultBranchValue
:
true
newUserBranchValue
:
undefined
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
false
initialExpectedVisibility
:
false
newDefaultBranchValue
:
undefined
newUserBranchValue
:
true
newExpectedVisibility
:
true
}
)
;
}
)
;
async
function
doVisibilityTest
(
{
initialDefaultBranchValue
initialUserBranchValue
initialExpectedVisibility
newDefaultBranchValue
newUserBranchValue
newExpectedVisibility
}
)
{
info
(
"
Running
visibility
test
:
"
+
JSON
.
stringify
(
{
initialDefaultBranchValue
initialUserBranchValue
initialExpectedVisibility
newDefaultBranchValue
newUserBranchValue
newExpectedVisibility
}
)
)
;
if
(
initialDefaultBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
getDefaultBranch
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
.
setBoolPref
(
"
"
initialDefaultBranchValue
)
;
}
if
(
initialUserBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
initialUserBranchValue
)
;
}
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
)
initialExpectedVisibility
"
Pref
getter
returns
expected
initial
value
"
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CONTAINER_ID
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
container
)
initialExpectedVisibility
"
The
container
has
the
expected
initial
visibility
"
)
;
for
(
let
[
id
{
enabled
disabled
}
]
of
Object
.
entries
(
EXPECTED_L10N_IDS
)
)
{
Assert
.
equal
(
doc
.
getElementById
(
id
)
.
dataset
.
l10nId
initialExpectedVisibility
?
enabled
:
disabled
"
Initial
l10n
ID
for
element
with
ID
:
"
+
id
)
;
}
if
(
newDefaultBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
getDefaultBranch
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
.
setBoolPref
(
"
"
newDefaultBranchValue
)
;
}
if
(
newUserBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
newUserBranchValue
)
;
}
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
)
newExpectedVisibility
"
Pref
getter
returns
expected
value
after
setting
prefs
"
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
container
)
newExpectedVisibility
"
The
container
has
the
expected
visibility
after
setting
prefs
"
)
;
for
(
let
[
id
{
enabled
disabled
}
]
of
Object
.
entries
(
EXPECTED_L10N_IDS
)
)
{
Assert
.
equal
(
doc
.
getElementById
(
id
)
.
dataset
.
l10nId
newExpectedVisibility
?
enabled
:
disabled
"
New
l10n
ID
for
element
with
ID
:
"
+
id
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
;
if
(
originalExperimentPrefDefaultBranchValue
=
=
=
undefined
)
{
Services
.
prefs
.
deleteBranch
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
;
}
else
{
Services
.
prefs
.
getDefaultBranch
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
.
setBoolPref
(
"
"
originalExperimentPrefDefaultBranchValue
)
;
}
}
add_task
(
async
function
checkboxes_initial_mainTrue_sponsoredTrue
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
false
]
]
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
checkboxes_initial_mainTrue_sponsoredFalse
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
false
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
false
]
]
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
checkboxes_initial_mainFalse_sponsoredTrue
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
false
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
true
]
]
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
checkboxes_initial_mainFalse_sponsoredFalse
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
false
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
false
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
true
]
]
}
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
clickCheckboxes
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
addressBarSection
=
doc
.
getElementById
(
"
locationBarGroup
"
)
;
addressBarSection
.
scrollIntoView
(
)
;
let
sponsoredCheckbox
=
doc
.
getElementById
(
SPONSORED_CHECKBOX_ID
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
sponsoredCheckbox
)
"
The
sponsored
checkbox
is
visible
"
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
}
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
SPONSORED_CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
}
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
The
sponsored
pref
is
false
after
checkbox
click
1
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
SPONSORED_CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
}
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
The
sponsored
pref
is
true
after
checkbox
click
2
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
MAIN_CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
)
"
The
main
pref
is
false
after
checkbox
click
1
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
The
sponsored
pref
remains
true
after
main
checkbox
click
1
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
MAIN_CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
}
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
)
"
The
main
pref
is
true
after
checkbox
click
2
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
The
sponsored
pref
remains
true
after
main
checkbox
click
2
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
SPONSORED_CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
}
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
The
sponsored
pref
is
false
after
checkbox
click
3
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
MAIN_CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
false
checked
:
false
}
}
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
)
"
The
main
pref
is
false
after
checkbox
click
3
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
The
sponsored
pref
remains
false
after
main
checkbox
click
3
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
MAIN_CHECKBOX_ID
{
}
gBrowser
.
selectedBrowser
)
;
assertCheckboxes
(
{
[
MAIN_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
true
}
[
SPONSORED_CHECKBOX_ID
]
:
{
enabled
:
true
checked
:
false
}
}
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
)
"
The
main
pref
is
true
after
checkbox
click
4
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
The
sponsored
pref
remains
false
after
main
checkbox
click
4
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
clickLearnMore
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
addressBarSection
=
doc
.
getElementById
(
"
locationBarGroup
"
)
;
addressBarSection
.
scrollIntoView
(
)
;
let
learnMore
=
doc
.
getElementById
(
"
firefoxSuggestSuggestionLearnMore
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
learnMore
)
"
The
sponsored
checkbox
is
visible
"
)
;
let
tabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
UrlbarProviderQuickSuggest
.
helpUrl
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
learnMore
.
id
{
}
gBrowser
.
selectedBrowser
)
;
info
(
"
Waiting
for
help
page
to
load
in
a
new
tab
"
)
;
await
tabPromise
;
gBrowser
.
removeCurrentTab
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
mainCheckboxDescription_online
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
scenario
"
"
online
"
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
doc
.
getElementById
(
"
firefoxSuggestSuggestionDescription
"
)
)
"
The
main
checkbox
description
is
visible
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
mainCheckboxDescription_offline
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
scenario
"
"
offline
"
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
doc
.
getElementById
(
"
firefoxSuggestSuggestionDescription
"
)
)
"
The
main
checkbox
description
is
hidden
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
function
assertCheckboxes
(
statesByElementID
)
{
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CONTAINER_ID
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
container
)
"
The
container
is
visible
"
)
;
for
(
let
[
id
{
enabled
checked
}
]
of
Object
.
entries
(
statesByElementID
)
)
{
let
checkbox
=
doc
.
getElementById
(
id
)
;
Assert
.
equal
(
checkbox
.
disabled
!
enabled
"
Checkbox
enabled
status
for
ID
:
"
+
id
)
;
Assert
.
equal
(
checkbox
.
checked
checked
"
Checkbox
checked
status
for
ID
:
"
+
id
)
;
}
}
