"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
QuickSuggest
:
"
resource
:
/
/
/
modules
/
QuickSuggest
.
sys
.
mjs
"
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
QuickSuggestTestUtils
"
(
)
=
>
{
const
{
QuickSuggestTestUtils
:
module
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
QuickSuggestTestUtils
.
sys
.
mjs
"
)
;
module
.
init
(
this
)
;
return
module
;
}
)
;
const
CONTAINER_ID
=
"
firefoxSuggestContainer
"
;
const
NONSPONSORED_CHECKBOX_ID
=
"
firefoxSuggestNonsponsored
"
;
const
SPONSORED_CHECKBOX_ID
=
"
firefoxSuggestSponsored
"
;
const
DATA_COLLECTION_CHECKBOX_ID
=
"
firefoxSuggestDataCollection
"
;
const
INFO_BOX_ID
=
"
firefoxSuggestInfoBox
"
;
const
INFO_TEXT_ID
=
"
firefoxSuggestInfoText
"
;
const
LEARN_MORE_CLASS
=
"
firefoxSuggestLearnMore
"
;
const
BUTTON_RESTORE_DISMISSED_ID
=
"
restoreDismissedSuggestions
"
;
const
PREF_URLBAR_QUICKSUGGEST_BLOCKLIST
=
"
browser
.
urlbar
.
quicksuggest
.
blockedDigests
"
;
const
PREF_URLBAR_WEATHER_USER_ENABLED
=
"
browser
.
urlbar
.
suggest
.
weather
"
;
const
EXPECTED_L10N_IDS
=
{
locationBarGroupHeader
:
{
enabled
:
"
addressbar
-
header
-
firefox
-
suggest
"
disabled
:
"
addressbar
-
header
"
}
locationBarSuggestionLabel
:
{
enabled
:
"
addressbar
-
suggest
-
firefox
-
suggest
"
disabled
:
"
addressbar
-
suggest
"
}
}
;
requestLongerTimeout
(
10
)
;
add_task
(
async
function
historyToOffline
(
)
{
await
doVisibilityTest
(
{
initialScenario
:
"
history
"
initialExpectedVisibility
:
false
newScenario
:
"
offline
"
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
historyToOnline
(
)
{
await
doVisibilityTest
(
{
initialScenario
:
"
history
"
initialExpectedVisibility
:
false
newScenario
:
"
online
"
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
offlineToHistory
(
)
{
await
doVisibilityTest
(
{
initialScenario
:
"
offline
"
initialExpectedVisibility
:
true
newScenario
:
"
history
"
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
offlineToOnline
(
)
{
await
doVisibilityTest
(
{
initialScenario
:
"
offline
"
initialExpectedVisibility
:
true
newScenario
:
"
online
"
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
onlineToHistory
(
)
{
await
doVisibilityTest
(
{
initialScenario
:
"
online
"
initialExpectedVisibility
:
true
newScenario
:
"
history
"
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
onlineToOffline
(
)
{
await
doVisibilityTest
(
{
initialScenario
:
"
online
"
initialExpectedVisibility
:
true
newScenario
:
"
offline
"
newExpectedVisibility
:
true
}
)
;
}
)
;
async
function
doVisibilityTest
(
{
initialScenario
initialExpectedVisibility
newScenario
newExpectedVisibility
}
)
{
info
(
"
Running
visibility
test
:
"
+
JSON
.
stringify
(
{
initialScenario
initialExpectedVisibility
newScenario
newExpectedVisibility
}
null
2
)
)
;
await
QuickSuggestTestUtils
.
setScenario
(
initialScenario
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
initialExpectedVisibility
quicksuggest
.
enabled
is
correct
after
setting
initial
scenario
initialExpectedVisibility
=
{
initialExpectedVisibility
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CONTAINER_ID
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
container
)
initialExpectedVisibility
The
container
has
the
expected
initial
visibility
initialExpectedVisibility
=
{
initialExpectedVisibility
}
)
;
for
(
let
[
id
{
enabled
disabled
}
]
of
Object
.
entries
(
EXPECTED_L10N_IDS
)
)
{
Assert
.
equal
(
doc
.
getElementById
(
id
)
.
dataset
.
l10nId
initialExpectedVisibility
?
enabled
:
disabled
Initial
l10n
ID
for
element
with
ID
{
id
}
initialExpectedVisibility
=
{
initialExpectedVisibility
}
)
;
}
await
QuickSuggestTestUtils
.
setScenario
(
newScenario
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
)
newExpectedVisibility
quicksuggest
.
enabled
is
correct
after
setting
new
scenario
newExpectedVisibility
=
{
newExpectedVisibility
}
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
container
)
newExpectedVisibility
The
container
has
the
expected
visibility
after
setting
new
scenario
newExpectedVisibility
=
{
newExpectedVisibility
}
)
;
for
(
let
[
id
{
enabled
disabled
}
]
of
Object
.
entries
(
EXPECTED_L10N_IDS
)
)
{
Assert
.
equal
(
doc
.
getElementById
(
id
)
.
dataset
.
l10nId
newExpectedVisibility
?
enabled
:
disabled
New
l10n
ID
for
element
with
ID
{
id
}
newExpectedVisibility
=
{
newExpectedVisibility
}
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
}
add_task
(
async
function
checkboxesAndInfoBox
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
true
[
SPONSORED_CHECKBOX_ID
]
:
true
[
DATA_COLLECTION_CHECKBOX_ID
]
:
true
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
all
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
false
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
true
[
SPONSORED_CHECKBOX_ID
]
:
true
[
DATA_COLLECTION_CHECKBOX_ID
]
:
false
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
nonsponsored
-
sponsored
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
false
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
true
[
SPONSORED_CHECKBOX_ID
]
:
false
[
DATA_COLLECTION_CHECKBOX_ID
]
:
true
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
nonsponsored
-
data
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
false
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
false
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
true
[
SPONSORED_CHECKBOX_ID
]
:
false
[
DATA_COLLECTION_CHECKBOX_ID
]
:
false
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
nonsponsored
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
false
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
false
[
SPONSORED_CHECKBOX_ID
]
:
true
[
DATA_COLLECTION_CHECKBOX_ID
]
:
true
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
sponsored
-
data
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
false
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
false
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
false
[
SPONSORED_CHECKBOX_ID
]
:
true
[
DATA_COLLECTION_CHECKBOX_ID
]
:
false
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
sponsored
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
false
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
false
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
false
[
SPONSORED_CHECKBOX_ID
]
:
false
[
DATA_COLLECTION_CHECKBOX_ID
]
:
true
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
data
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
false
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
false
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
false
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
false
[
SPONSORED_CHECKBOX_ID
]
:
false
[
DATA_COLLECTION_CHECKBOX_ID
]
:
false
}
)
;
await
assertInfoBox
(
null
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
clickCheckboxes
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
addressBarSection
=
doc
.
getElementById
(
"
locationBarGroup
"
)
;
addressBarSection
.
scrollIntoView
(
)
;
async
function
clickCheckbox
(
id
)
{
let
checkbox
=
doc
.
getElementById
(
id
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
gBrowser
.
selectedBrowser
.
contentWindow
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
true
[
SPONSORED_CHECKBOX_ID
]
:
true
[
DATA_COLLECTION_CHECKBOX_ID
]
:
true
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
all
"
)
;
await
clickCheckbox
(
NONSPONSORED_CHECKBOX_ID
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
)
"
suggest
.
quicksuggest
.
nonsponsored
is
false
after
clicking
non
-
sponsored
checkbox
"
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
false
[
SPONSORED_CHECKBOX_ID
]
:
true
[
DATA_COLLECTION_CHECKBOX_ID
]
:
true
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
sponsored
-
data
"
)
;
await
clickCheckbox
(
SPONSORED_CHECKBOX_ID
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
)
"
suggest
.
quicksuggest
.
nonsponsored
remains
false
after
clicking
sponsored
checkbox
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
suggest
.
quicksuggest
.
sponsored
is
false
after
clicking
sponsored
checkbox
"
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
false
[
SPONSORED_CHECKBOX_ID
]
:
false
[
DATA_COLLECTION_CHECKBOX_ID
]
:
true
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
data
"
)
;
await
clickCheckbox
(
DATA_COLLECTION_CHECKBOX_ID
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
)
"
suggest
.
quicksuggest
.
nonsponsored
remains
false
after
clicking
sponsored
checkbox
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
)
"
suggest
.
quicksuggest
.
sponsored
remains
false
after
clicking
data
collection
checkbox
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
)
"
quicksuggest
.
dataCollection
.
enabled
is
false
after
clicking
data
collection
checkbox
"
)
;
assertPrefUIState
(
{
[
NONSPONSORED_CHECKBOX_ID
]
:
false
[
SPONSORED_CHECKBOX_ID
]
:
false
[
DATA_COLLECTION_CHECKBOX_ID
]
:
false
}
)
;
await
assertInfoBox
(
null
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
clickLearnMore
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
addressBarSection
=
doc
.
getElementById
(
"
locationBarGroup
"
)
;
addressBarSection
.
scrollIntoView
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
await
assertInfoBox
(
"
addressbar
-
firefox
-
suggest
-
info
-
all
"
)
;
let
learnMoreLinks
=
doc
.
querySelectorAll
(
"
.
"
+
LEARN_MORE_CLASS
)
;
Assert
.
equal
(
learnMoreLinks
.
length
3
"
Expected
number
of
learn
-
more
links
are
present
"
)
;
for
(
let
link
of
learnMoreLinks
)
{
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
link
)
"
Learn
-
more
link
is
visible
:
"
+
link
.
id
)
;
}
let
prefsTab
=
gBrowser
.
selectedTab
;
for
(
let
link
of
learnMoreLinks
)
{
let
tabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
QuickSuggest
.
HELP_URL
)
;
info
(
"
Clicking
learn
-
more
link
:
"
+
link
.
id
)
;
Assert
.
ok
(
link
.
id
"
Sanity
check
:
Learn
-
more
link
has
an
ID
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
link
.
id
{
}
gBrowser
.
selectedBrowser
)
;
info
(
"
Waiting
for
help
page
to
load
in
a
new
tab
"
)
;
await
tabPromise
;
gBrowser
.
removeCurrentTab
(
)
;
gBrowser
.
selectedTab
=
prefsTab
;
}
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
restoreDismissedSuggestions
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
addressBarSection
=
doc
.
getElementById
(
"
locationBarGroup
"
)
;
addressBarSection
.
scrollIntoView
(
)
;
let
button
=
doc
.
getElementById
(
BUTTON_RESTORE_DISMISSED_ID
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
PREF_URLBAR_QUICKSUGGEST_BLOCKLIST
"
"
)
"
"
"
Block
list
is
empty
initially
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
PREF_URLBAR_WEATHER_USER_ENABLED
)
"
Weather
suggestions
are
enabled
initially
"
)
;
Assert
.
ok
(
button
.
disabled
"
Restore
button
is
disabled
initially
.
"
)
;
await
QuickSuggest
.
blockedSuggestions
.
add
(
"
https
:
/
/
example
.
com
/
"
)
;
Assert
.
notEqual
(
Services
.
prefs
.
getStringPref
(
PREF_URLBAR_QUICKSUGGEST_BLOCKLIST
"
"
)
"
"
"
Block
list
is
non
-
empty
after
adding
URL
"
)
;
Assert
.
ok
(
!
button
.
disabled
"
Restore
button
is
enabled
after
blocking
URL
.
"
)
;
button
.
click
(
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
PREF_URLBAR_QUICKSUGGEST_BLOCKLIST
"
"
)
"
"
"
Block
list
is
empty
clicking
Restore
button
"
)
;
Assert
.
ok
(
button
.
disabled
"
Restore
button
is
disabled
after
clicking
it
.
"
)
;
Services
.
prefs
.
setBoolPref
(
PREF_URLBAR_WEATHER_USER_ENABLED
false
)
;
Assert
.
ok
(
!
button
.
disabled
"
Restore
button
is
enabled
after
disabling
weather
suggestions
.
"
)
;
button
.
click
(
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
PREF_URLBAR_WEATHER_USER_ENABLED
)
"
Weather
suggestions
are
enabled
after
clicking
Restore
button
"
)
;
Assert
.
ok
(
button
.
disabled
"
Restore
button
is
disabled
after
clicking
it
again
.
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
function
assertPrefUIState
(
stateByElementID
attr
=
"
checked
"
)
{
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CONTAINER_ID
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
container
)
"
The
container
is
visible
"
)
;
for
(
let
[
id
state
]
of
Object
.
entries
(
stateByElementID
)
)
{
let
element
=
doc
.
getElementById
(
id
)
;
Assert
.
equal
(
element
[
attr
]
state
"
Expected
state
for
ID
:
"
+
id
)
;
}
}
async
function
assertInfoBox
(
expectedL10nID
)
{
info
(
"
Checking
info
box
with
expected
l10n
ID
:
"
+
expectedL10nID
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
infoBox
=
doc
.
getElementById
(
INFO_BOX_ID
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_visible
(
infoBox
)
=
=
!
!
expectedL10nID
"
Waiting
for
expected
info
box
visibility
:
"
+
!
!
expectedL10nID
)
;
let
infoIcon
=
infoBox
.
querySelector
(
"
.
info
-
icon
"
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
infoIcon
)
!
!
expectedL10nID
"
The
info
icon
is
visible
iff
a
description
should
be
shown
"
)
;
let
learnMore
=
infoBox
.
querySelector
(
"
.
"
+
LEARN_MORE_CLASS
)
;
Assert
.
ok
(
learnMore
"
Found
the
info
box
learn
more
link
"
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
learnMore
)
!
!
expectedL10nID
"
The
info
box
learn
more
link
is
visible
iff
a
description
should
be
shown
"
)
;
if
(
expectedL10nID
)
{
let
infoText
=
doc
.
getElementById
(
INFO_TEXT_ID
)
;
Assert
.
equal
(
infoText
.
dataset
.
l10nId
expectedL10nID
"
Info
text
has
expected
l10n
ID
"
)
;
}
}
