"
use
strict
"
;
add_task
(
async
function
testInfiniteCancelLoop
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
preferences
.
experimental
"
true
]
]
}
)
;
const
server
=
new
DefinitionServer
(
)
;
server
.
addDefinition
(
{
id
:
"
test
-
featureA
"
isPublic
:
true
preference
:
"
test
.
feature
.
a
"
restartRequired
:
true
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
about
:
preferences
?
definitionsUrl
=
{
encodeURIComponent
(
server
.
definitionsUrl
)
}
#
paneExperimental
)
;
let
doc
=
gBrowser
.
contentDocument
;
let
featureCheckbox
=
doc
.
getElementById
(
"
test
-
featureA
"
)
;
ok
(
featureCheckbox
"
Checkbox
should
exist
"
)
;
let
newWindowPromise
=
BrowserTestUtils
.
domWindowOpened
(
)
;
featureCheckbox
.
click
(
)
;
let
restartWin
=
await
newWindowPromise
;
let
dialog
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
restartWin
.
document
.
querySelector
(
dialog
)
)
;
let
cancelButton
=
dialog
.
shadowRoot
.
querySelector
(
[
dlgtype
=
"
cancel
"
]
)
;
ok
(
cancelButton
"
Cancel
button
should
exist
in
dialog
"
)
;
let
windowClosedPromise
=
BrowserTestUtils
.
domWindowClosed
(
restartWin
)
;
cancelButton
.
click
(
)
;
await
windowClosedPromise
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
