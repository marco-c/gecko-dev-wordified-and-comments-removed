"
use
strict
"
;
add_task
(
async
function
test_exclusions
(
)
{
let
hosts
=
await
addTestData
(
[
{
usage
:
0
origin
:
"
https
:
/
/
account
.
xyz
.
com
"
persisted
:
true
}
{
usage
:
0
origin
:
"
https
:
/
/
shopping
.
xyz
.
com
"
persisted
:
false
}
{
usage
:
1024
origin
:
"
http
:
/
/
cinema
.
bar
.
com
"
persisted
:
true
}
{
usage
:
1024
origin
:
"
http
:
/
/
email
.
bar
.
com
"
persisted
:
false
}
{
usage
:
0
origin
:
"
http
:
/
/
cookies
.
bar
.
com
"
cookies
:
5
persisted
:
false
}
]
)
;
let
updatePromise
=
promiseSiteDataManagerSitesUpdated
(
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
await
updatePromise
;
await
openSiteDataSettingsDialog
(
)
;
assertSitesListed
(
doc
hosts
.
filter
(
host
=
>
host
!
=
"
shopping
.
xyz
.
com
"
)
)
;
await
SiteDataTestUtils
.
clear
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
test_grouping
(
)
{
let
quotaUsage
=
7000000
;
let
testData
=
[
{
usage
:
quotaUsage
origin
:
"
https
:
/
/
account
.
xyz
.
com
^
userContextId
=
1
"
cookies
:
2
persisted
:
true
}
{
usage
:
quotaUsage
origin
:
"
https
:
/
/
account
.
xyz
.
com
"
cookies
:
1
persisted
:
false
}
{
usage
:
quotaUsage
origin
:
"
https
:
/
/
account
.
xyz
.
com
:
123
"
cookies
:
1
persisted
:
false
}
{
usage
:
quotaUsage
origin
:
"
http
:
/
/
account
.
xyz
.
com
"
cookies
:
1
persisted
:
false
}
{
usage
:
quotaUsage
origin
:
"
http
:
/
/
search
.
xyz
.
com
"
cookies
:
3
persisted
:
false
}
{
usage
:
quotaUsage
origin
:
"
http
:
/
/
advanced
.
search
.
xyz
.
com
"
cookies
:
3
persisted
:
true
}
{
usage
:
quotaUsage
origin
:
"
http
:
/
/
xyz
.
com
"
cookies
:
1
persisted
:
false
}
]
;
await
addTestData
(
testData
)
;
let
updatedPromise
=
promiseSiteDataManagerSitesUpdated
(
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
await
updatedPromise
;
await
openSiteDataSettingsDialog
(
)
;
let
win
=
gBrowser
.
selectedBrowser
.
contentWindow
;
let
dialogFrame
=
win
.
gSubDialog
.
_topDialog
.
_frame
;
let
frameDoc
=
dialogFrame
.
contentDocument
;
let
siteItems
=
frameDoc
.
getElementsByTagName
(
"
richlistitem
"
)
;
is
(
siteItems
.
length
1
"
Should
group
sites
across
scheme
port
and
origin
attributes
"
)
;
let
columns
=
siteItems
[
0
]
.
querySelectorAll
(
"
.
item
-
box
>
label
"
)
;
let
expected
=
"
xyz
.
com
"
;
is
(
columns
[
0
]
.
value
expected
"
Should
group
and
list
sites
by
host
"
)
;
let
cookieCount
=
testData
.
reduce
(
(
count
{
cookies
}
)
=
>
count
+
cookies
0
)
;
is
(
columns
[
1
]
.
value
cookieCount
.
toString
(
)
"
Should
group
cookies
across
scheme
port
and
origin
attributes
"
)
;
let
[
value
unit
]
=
DownloadUtils
.
convertByteUnits
(
quotaUsage
*
4
)
;
let
l10nAttributes
=
frameDoc
.
l10n
.
getAttributes
(
columns
[
2
]
)
;
is
(
l10nAttributes
.
id
"
site
-
storage
-
persistent
"
"
Should
show
the
site
as
persistent
if
one
origin
is
persistent
.
"
)
;
ok
(
parseFloat
(
l10nAttributes
.
args
.
value
)
>
=
parseFloat
(
value
)
"
Should
show
the
correct
accumulated
quota
size
.
"
)
;
is
(
l10nAttributes
.
args
.
unit
unit
"
Should
show
the
correct
quota
size
unit
.
"
)
;
await
SiteDataTestUtils
.
clear
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
test_sorting
(
)
{
let
testData
=
[
{
usage
:
1024
origin
:
"
https
:
/
/
account
.
xyz
.
com
"
cookies
:
6
persisted
:
true
}
{
usage
:
1024
*
2
origin
:
"
https
:
/
/
books
.
foo
.
com
"
cookies
:
0
persisted
:
false
}
{
usage
:
1024
*
3
origin
:
"
http
:
/
/
cinema
.
bar
.
com
"
cookies
:
3
persisted
:
true
}
{
usage
:
1024
*
3
origin
:
"
http
:
/
/
vod
.
bar
.
com
"
cookies
:
2
persisted
:
false
}
]
;
await
addTestData
(
testData
)
;
let
updatePromise
=
promiseSiteDataManagerSitesUpdated
(
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
await
updatePromise
;
await
openSiteDataSettingsDialog
(
)
;
let
dialog
=
content
.
gSubDialog
.
_topDialog
;
let
dialogFrame
=
dialog
.
_frame
;
let
frameDoc
=
dialogFrame
.
contentDocument
;
let
hostCol
=
frameDoc
.
getElementById
(
"
hostCol
"
)
;
let
usageCol
=
frameDoc
.
getElementById
(
"
usageCol
"
)
;
let
cookiesCol
=
frameDoc
.
getElementById
(
"
cookiesCol
"
)
;
let
sitesList
=
frameDoc
.
getElementById
(
"
sitesList
"
)
;
function
getHostOrder
(
)
{
let
siteItems
=
sitesList
.
getElementsByTagName
(
"
richlistitem
"
)
;
return
Array
.
from
(
siteItems
)
.
map
(
item
=
>
item
.
getAttribute
(
"
host
"
)
)
;
}
Assert
.
deepEqual
(
getHostOrder
(
)
[
"
bar
.
com
"
"
foo
.
com
"
"
xyz
.
com
"
]
"
Has
sorted
descending
by
usage
"
)
;
usageCol
.
click
(
)
;
Assert
.
deepEqual
(
getHostOrder
(
)
[
"
xyz
.
com
"
"
foo
.
com
"
"
bar
.
com
"
]
"
Has
sorted
ascending
by
usage
"
)
;
usageCol
.
click
(
)
;
Assert
.
deepEqual
(
getHostOrder
(
)
[
"
bar
.
com
"
"
foo
.
com
"
"
xyz
.
com
"
]
"
Has
sorted
descending
by
usage
"
)
;
hostCol
.
click
(
)
;
Assert
.
deepEqual
(
getHostOrder
(
)
[
"
bar
.
com
"
"
foo
.
com
"
"
xyz
.
com
"
]
"
Has
sorted
ascending
by
base
domain
"
)
;
hostCol
.
click
(
)
;
Assert
.
deepEqual
(
getHostOrder
(
)
[
"
xyz
.
com
"
"
foo
.
com
"
"
bar
.
com
"
]
"
Has
sorted
descending
by
base
domain
"
)
;
cookiesCol
.
click
(
)
;
Assert
.
deepEqual
(
getHostOrder
(
)
[
"
foo
.
com
"
"
bar
.
com
"
"
xyz
.
com
"
]
"
Has
sorted
ascending
by
cookies
"
)
;
cookiesCol
.
click
(
)
;
Assert
.
deepEqual
(
getHostOrder
(
)
[
"
xyz
.
com
"
"
bar
.
com
"
"
foo
.
com
"
]
"
Has
sorted
descending
by
cookies
"
)
;
await
SiteDataTestUtils
.
clear
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
