"
use
strict
"
;
const
EXPERIMENT_PREF
=
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
;
const
QUICK_SUGGEST_PREF
=
"
browser
.
urlbar
.
suggest
.
quicksuggest
"
;
const
MAIN_PREF
=
"
browser
.
search
.
suggest
.
enabled
"
;
const
URLBAR_PREF
=
"
browser
.
urlbar
.
suggest
.
searches
"
;
const
CONTAINER_ID
=
"
showQuickSuggestContainer
"
;
const
CHECKBOX_ID
=
"
showQuickSuggest
"
;
const
SEARCH_SUGGESTIONS_DESC_ID
=
"
searchSuggestionsDesc
"
;
const
DESC_EXPERIMENT_DISABLED
=
"
Choose
how
suggestions
from
search
engines
appear
.
"
;
const
DESC_EXPERIMENT_ENABLED
=
"
Choose
how
search
suggestions
appear
.
"
;
let
originalExperimentPrefDefaultBranchValue
;
add_task
(
async
function
init
(
)
{
try
{
originalExperimentPrefDefaultBranchValue
=
Services
.
prefs
.
getDefaultBranch
(
EXPERIMENT_PREF
)
.
getBoolPref
(
"
"
)
;
}
catch
(
ex
)
{
}
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
false
newUserBranchValue
:
false
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
false
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
false
newUserBranchValue
:
false
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
false
initialExpectedVisibility
:
false
newDefaultBranchValue
:
false
newUserBranchValue
:
false
newExpectedVisibility
:
false
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
true
newUserBranchValue
:
undefined
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
undefined
newUserBranchValue
:
true
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
false
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
true
newUserBranchValue
:
undefined
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
false
initialUserBranchValue
:
undefined
initialExpectedVisibility
:
false
newDefaultBranchValue
:
undefined
newUserBranchValue
:
true
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
false
initialExpectedVisibility
:
false
newDefaultBranchValue
:
true
newUserBranchValue
:
undefined
newExpectedVisibility
:
true
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doVisibilityTest
(
{
initialDefaultBranchValue
:
undefined
initialUserBranchValue
:
false
initialExpectedVisibility
:
false
newDefaultBranchValue
:
undefined
newUserBranchValue
:
true
newExpectedVisibility
:
true
}
)
;
}
)
;
async
function
doVisibilityTest
(
{
initialDefaultBranchValue
initialUserBranchValue
initialExpectedVisibility
newDefaultBranchValue
newUserBranchValue
newExpectedVisibility
}
)
{
info
(
"
Running
visibility
test
:
"
+
JSON
.
stringify
(
{
initialDefaultBranchValue
initialUserBranchValue
initialExpectedVisibility
newDefaultBranchValue
newUserBranchValue
newExpectedVisibility
}
)
)
;
if
(
initialDefaultBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
getDefaultBranch
(
EXPERIMENT_PREF
)
.
setBoolPref
(
"
"
initialDefaultBranchValue
)
;
}
if
(
initialUserBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
setBoolPref
(
EXPERIMENT_PREF
initialUserBranchValue
)
;
}
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
EXPERIMENT_PREF
false
)
initialExpectedVisibility
"
Pref
getter
returns
expected
initial
value
"
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CONTAINER_ID
)
;
Assert
.
equal
(
!
BrowserTestUtils
.
is_hidden
(
container
)
initialExpectedVisibility
"
The
container
has
the
expected
initial
visibility
"
)
;
let
desc
=
doc
.
getElementById
(
SEARCH_SUGGESTIONS_DESC_ID
)
;
let
initialExpectedDesc
=
initialExpectedVisibility
?
DESC_EXPERIMENT_ENABLED
:
DESC_EXPERIMENT_DISABLED
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
desc
.
textContent
=
=
initialExpectedDesc
"
Waiting
for
initial
Search
Suggestions
description
:
"
+
initialExpectedDesc
)
;
await
doc
.
l10n
.
translateElements
(
[
desc
]
)
;
Assert
.
equal
(
desc
.
textContent
initialExpectedDesc
"
Initial
Search
Suggestions
description
correct
after
forcing
translation
"
)
;
if
(
newDefaultBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
getDefaultBranch
(
EXPERIMENT_PREF
)
.
setBoolPref
(
"
"
newDefaultBranchValue
)
;
}
if
(
newUserBranchValue
!
=
=
undefined
)
{
Services
.
prefs
.
setBoolPref
(
EXPERIMENT_PREF
newUserBranchValue
)
;
}
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
EXPERIMENT_PREF
false
)
newExpectedVisibility
"
Pref
getter
returns
expected
value
after
setting
prefs
"
)
;
Assert
.
equal
(
!
BrowserTestUtils
.
is_hidden
(
container
)
newExpectedVisibility
"
The
container
has
the
expected
visibility
after
setting
prefs
"
)
;
let
newExpectedDesc
=
newExpectedVisibility
?
DESC_EXPERIMENT_ENABLED
:
DESC_EXPERIMENT_DISABLED
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
desc
.
textContent
=
=
newExpectedDesc
"
Waiting
for
new
Search
Suggestions
description
:
"
+
newExpectedDesc
)
;
await
doc
.
l10n
.
translateElements
(
[
desc
]
)
;
Assert
.
equal
(
desc
.
textContent
newExpectedDesc
"
New
Search
Suggestions
description
correct
after
forcing
translation
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
Services
.
prefs
.
clearUserPref
(
EXPERIMENT_PREF
)
;
if
(
originalExperimentPrefDefaultBranchValue
=
=
=
undefined
)
{
Services
.
prefs
.
deleteBranch
(
EXPERIMENT_PREF
)
;
}
else
{
Services
.
prefs
.
getDefaultBranch
(
EXPERIMENT_PREF
)
.
setBoolPref
(
"
"
originalExperimentPrefDefaultBranchValue
)
;
}
}
add_task
(
async
function
superiorPrefInteraction
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
MAIN_PREF
true
]
[
URLBAR_PREF
true
]
[
EXPERIMENT_PREF
true
]
[
QUICK_SUGGEST_PREF
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
container
=
doc
.
getElementById
(
CONTAINER_ID
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_hidden
(
container
)
"
The
container
is
visible
initially
"
)
;
let
checkbox
=
doc
.
getElementById
(
CHECKBOX_ID
)
;
Assert
.
ok
(
checkbox
.
checked
"
Checkbox
should
be
checked
"
)
;
Assert
.
ok
(
!
checkbox
.
disabled
"
Checkbox
should
be
enabled
"
)
;
for
(
let
superiorPref
of
[
URLBAR_PREF
MAIN_PREF
]
)
{
info
(
Testing
superior
pref
{
superiorPref
}
)
;
Services
.
prefs
.
setBoolPref
(
superiorPref
false
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
QUICK_SUGGEST_PREF
)
"
Pref
should
remain
true
"
)
;
Assert
.
ok
(
!
checkbox
.
checked
"
Checkbox
should
become
unchecked
after
disabling
urlbar
suggestions
"
)
;
Assert
.
ok
(
checkbox
.
disabled
"
Checkbox
should
become
disabled
after
disabling
urlbar
suggestions
"
)
;
Services
.
prefs
.
setBoolPref
(
superiorPref
true
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
QUICK_SUGGEST_PREF
)
"
Pref
should
remain
true
"
)
;
Assert
.
ok
(
checkbox
.
checked
"
Checkbox
should
become
checked
after
re
-
enabling
urlbar
suggestions
"
)
;
Assert
.
ok
(
!
checkbox
.
disabled
"
Checkbox
should
become
enabled
after
re
-
enabling
urlbar
suggestions
"
)
;
Services
.
prefs
.
setBoolPref
(
QUICK_SUGGEST_PREF
false
)
;
Assert
.
ok
(
!
checkbox
.
checked
"
Checkbox
should
become
unchecked
after
setting
pref
to
false
"
)
;
Assert
.
ok
(
!
checkbox
.
disabled
"
Checkbox
should
remain
enabled
after
setting
pref
to
false
"
)
;
Services
.
prefs
.
setBoolPref
(
superiorPref
false
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
QUICK_SUGGEST_PREF
)
"
Pref
should
remain
false
"
)
;
Assert
.
ok
(
!
checkbox
.
checked
"
Checkbox
should
remain
unchecked
after
disabling
urlbar
suggestions
"
)
;
Assert
.
ok
(
checkbox
.
disabled
"
Checkbox
should
become
disabled
after
disabling
urlbar
suggestions
"
)
;
Services
.
prefs
.
setBoolPref
(
superiorPref
true
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
QUICK_SUGGEST_PREF
)
"
Pref
should
remain
false
"
)
;
Assert
.
ok
(
!
checkbox
.
checked
"
Checkbox
should
remain
unchecked
after
re
-
enabling
urlbar
suggestions
"
)
;
Assert
.
ok
(
!
checkbox
.
disabled
"
Checkbox
should
become
enabled
after
re
-
enabling
urlbar
suggestions
"
)
;
Services
.
prefs
.
setBoolPref
(
QUICK_SUGGEST_PREF
true
)
;
Assert
.
ok
(
checkbox
.
checked
"
Checkbox
should
become
checked
after
setting
pref
back
to
true
"
)
;
Assert
.
ok
(
!
checkbox
.
disabled
"
Checkbox
should
remain
enabled
after
setting
pref
back
to
true
"
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
Services
.
prefs
.
clearUserPref
(
QUICK_SUGGEST_PREF
)
;
Services
.
prefs
.
clearUserPref
(
URLBAR_PREF
)
;
Services
.
prefs
.
clearUserPref
(
MAIN_PREF
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
toggle
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
MAIN_PREF
true
]
[
URLBAR_PREF
true
]
[
EXPERIMENT_PREF
true
]
[
QUICK_SUGGEST_PREF
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
search
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
checkbox
=
doc
.
getElementById
(
CHECKBOX_ID
)
;
checkbox
.
scrollIntoView
(
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_hidden
(
checkbox
)
"
The
checkbox
is
visible
"
)
;
Assert
.
ok
(
checkbox
.
checked
"
The
checkbox
is
checked
initially
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
checkbox
.
id
{
}
gBrowser
.
selectedBrowser
)
;
Assert
.
ok
(
!
checkbox
.
checked
"
The
checkbox
is
not
checked
after
first
click
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
QUICK_SUGGEST_PREF
)
"
The
pref
is
false
after
first
click
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
checkbox
.
id
{
}
gBrowser
.
selectedBrowser
)
;
Assert
.
ok
(
checkbox
.
checked
"
The
checkbox
is
checked
after
second
click
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
QUICK_SUGGEST_PREF
)
"
The
pref
is
true
after
second
click
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
QUICK_SUGGEST_PREF
false
]
]
}
)
;
Assert
.
ok
(
!
checkbox
.
checked
"
The
checkbox
is
not
checked
after
setting
the
pref
to
false
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Assert
.
ok
(
checkbox
.
checked
"
The
checkbox
is
checked
after
setting
the
pref
to
true
again
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
