"
use
strict
"
;
const
FEATURE_PREF
=
"
cookiebanners
.
ui
.
desktop
.
enabled
"
;
const
MODE_PREF
=
"
cookiebanners
.
service
.
mode
"
;
const
GROUPBOX_ID
=
"
cookieBannerHandlingGroup
"
;
const
CHECKBOX_ID
=
"
handleCookieBanners
"
;
add_task
(
async
function
test_section_hidden_when_feature_flag_disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FEATURE_PREF
false
]
[
MODE_PREF
Ci
.
nsICookieBannerService
.
MODE_DISABLED
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
preferences
#
privacy
"
}
async
function
(
browser
)
{
let
groupbox
=
browser
.
contentDocument
.
getElementById
(
GROUPBOX_ID
)
;
is_element_hidden
(
groupbox
"
#
cookieBannerHandlingGroup
is
hidden
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_section_shown_when_feature_flag_enabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FEATURE_PREF
true
]
[
MODE_PREF
Ci
.
nsICookieBannerService
.
MODE_DISABLED
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
preferences
#
privacy
"
}
async
function
(
browser
)
{
let
groupbox
=
browser
.
contentDocument
.
getElementById
(
GROUPBOX_ID
)
;
is_element_visible
(
groupbox
"
#
cookieBannerHandlingGroup
is
visible
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_checkbox_unchecked_disabled_mode
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FEATURE_PREF
true
]
[
MODE_PREF
Ci
.
nsICookieBannerService
.
MODE_DISABLED
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
preferences
#
privacy
"
}
async
function
(
browser
)
{
let
checkbox
=
browser
.
contentDocument
.
getElementById
(
CHECKBOX_ID
)
;
ok
(
!
checkbox
.
checked
"
checkbox
is
not
checked
in
DISABLED
mode
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_checkbox_unchecked_detect_only_mode
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FEATURE_PREF
true
]
[
MODE_PREF
Ci
.
nsICookieBannerService
.
MODE_DETECT_ONLY
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
preferences
#
privacy
"
}
async
function
(
browser
)
{
let
checkbox
=
browser
.
contentDocument
.
getElementById
(
CHECKBOX_ID
)
;
ok
(
!
checkbox
.
checked
"
checkbox
is
not
checked
in
DETECT_ONLY
mode
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_checkbox_checked_reject_or_accept_mode
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FEATURE_PREF
true
]
[
MODE_PREF
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
preferences
#
privacy
"
}
async
function
(
browser
)
{
let
checkbox
=
browser
.
contentDocument
.
getElementById
(
CHECKBOX_ID
)
;
ok
(
checkbox
.
checked
"
checkbox
is
checked
in
REJECT_OR_ACCEPT
mode
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_checkbox_checked_reject_mode
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FEATURE_PREF
true
]
[
MODE_PREF
Ci
.
nsICookieBannerService
.
MODE_REJECT
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
preferences
#
privacy
"
}
async
function
(
browser
)
{
let
checkbox
=
browser
.
contentDocument
.
getElementById
(
CHECKBOX_ID
)
;
ok
(
checkbox
.
checked
"
checkbox
is
checked
in
REJECT
mode
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_checkbox_modifies_mode_pref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FEATURE_PREF
true
]
[
MODE_PREF
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
preferences
#
privacy
"
}
async
function
(
browser
)
{
let
checkboxSelector
=
"
#
"
+
CHECKBOX_ID
;
let
checkbox
=
browser
.
contentDocument
.
querySelector
(
checkboxSelector
)
;
let
section
=
browser
.
contentDocument
.
getElementById
(
GROUPBOX_ID
)
;
section
.
scrollIntoView
(
)
;
Assert
.
ok
(
checkbox
.
checked
"
initially
the
checkbox
should
be
checked
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
checkboxSelector
{
}
browser
)
;
Assert
.
ok
(
!
checkbox
.
checked
"
checkbox
should
be
unchecked
"
)
;
Assert
.
equal
(
Ci
.
nsICookieBannerService
.
MODE_DISABLED
Services
.
prefs
.
getIntPref
(
MODE_PREF
)
"
cookie
banner
handling
mode
should
be
set
to
DISABLED
mode
after
unchecking
the
checkbox
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
checkboxSelector
{
}
browser
)
;
Assert
.
ok
(
checkbox
.
checked
"
checkbox
should
be
checked
"
)
;
Assert
.
equal
(
Ci
.
nsICookieBannerService
.
MODE_REJECT_OR_ACCEPT
Services
.
prefs
.
getIntPref
(
MODE_PREF
)
"
cookie
banner
handling
mode
should
be
set
to
REJECT_OR_ACCEPT
mode
after
checking
the
checkbox
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
