function
test
(
)
{
waitForExplicitFinish
(
)
;
const
connectionURL
=
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
connection
.
xhtml
"
;
let
closeable
=
false
;
let
finalTest
=
false
;
let
oldNetworkProxyType
=
Services
.
prefs
.
getIntPref
(
"
network
.
proxy
.
type
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
oldNetworkProxyType
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
share_proxy_settings
"
)
;
for
(
let
proxyType
of
[
"
http
"
"
ssl
"
"
socks
"
]
)
{
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
"
+
proxyType
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
"
+
proxyType
+
"
_port
"
)
;
if
(
proxyType
=
=
"
http
"
)
{
continue
;
}
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
backup
.
"
+
proxyType
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
backup
.
"
+
proxyType
+
"
_port
"
)
;
}
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
mode
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
trr
.
uri
"
)
;
}
)
;
open_preferences
(
async
function
tabOpened
(
aContentWindow
)
{
let
dialog
dialogClosingPromise
dialogElement
;
let
proxyTypePref
sharePref
httpPref
httpPortPref
;
async
function
setDoc
(
)
{
if
(
closeable
)
{
let
dialogClosingEvent
=
await
dialogClosingPromise
;
ok
(
dialogClosingEvent
"
Connection
dialog
closed
"
)
;
}
if
(
finalTest
)
{
gBrowser
.
removeCurrentTab
(
)
;
finish
(
)
;
return
;
}
dialog
=
await
openAndLoadSubDialog
(
connectionURL
)
;
dialogElement
=
dialog
.
document
.
getElementById
(
"
ConnectionsDialog
"
)
;
dialogClosingPromise
=
BrowserTestUtils
.
waitForEvent
(
dialogElement
"
dialogclosing
"
)
;
proxyTypePref
=
dialog
.
Preferences
.
get
(
"
network
.
proxy
.
type
"
)
;
sharePref
=
dialog
.
Preferences
.
get
(
"
network
.
proxy
.
share_proxy_settings
"
)
;
httpPref
=
dialog
.
Preferences
.
get
(
"
network
.
proxy
.
http
"
)
;
httpPortPref
=
dialog
.
Preferences
.
get
(
"
network
.
proxy
.
http_port
"
)
;
}
await
setDoc
(
)
;
proxyTypePref
.
value
=
1
;
sharePref
.
value
=
true
;
httpPref
.
value
=
"
localhost
"
;
httpPortPref
.
value
=
0
;
dialogElement
.
acceptDialog
(
)
;
sharePref
.
value
=
false
;
dialogElement
.
acceptDialog
(
)
;
httpPortPref
.
value
=
80
;
dialogElement
.
acceptDialog
(
)
;
closeable
=
true
;
httpPortPref
.
value
=
80
;
dialogElement
.
acceptDialog
(
)
;
await
setDoc
(
)
;
proxyTypePref
.
value
=
1
;
sharePref
.
value
=
true
;
httpPref
.
value
=
"
localhost
"
;
httpPortPref
.
value
=
80
;
dialogElement
.
acceptDialog
(
)
;
await
setDoc
(
)
;
proxyTypePref
.
value
=
1
;
sharePref
.
value
=
true
;
httpPref
.
value
=
"
"
;
httpPortPref
.
value
=
0
;
dialogElement
.
acceptDialog
(
)
;
await
setDoc
(
)
;
proxyTypePref
.
value
=
0
;
sharePref
.
value
=
true
;
httpPref
.
value
=
"
localhost
"
;
httpPortPref
.
value
=
0
;
finalTest
=
true
;
dialogElement
.
acceptDialog
(
)
;
await
setDoc
(
)
;
}
)
;
}
