"
use
strict
"
;
const
COOKIE_BEHAVIOR_PREF
=
"
network
.
cookie
.
cookieBehavior
"
;
const
COOKIE_BEHAVIOR_PBM_PREF
=
"
network
.
cookie
.
cookieBehavior
.
pbmode
"
;
const
CB_STRICT_FEATURES_PREF
=
"
browser
.
contentblocking
.
features
.
strict
"
;
const
FPI_PREF
=
"
privacy
.
firstparty
.
isolate
"
;
async
function
testCookieBlockingInfoStandard
(
cookieBehavior
cookieBehaviorPBM
isShown
)
{
let
defaults
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
defaults
.
setIntPref
(
COOKIE_BEHAVIOR_PREF
cookieBehavior
)
;
defaults
.
setIntPref
(
COOKIE_BEHAVIOR_PBM_PREF
cookieBehaviorPBM
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
let
standardRadioOption
=
doc
.
getElementById
(
"
standardRadio
"
)
;
standardRadioOption
.
click
(
)
;
let
elts
=
doc
.
querySelectorAll
(
"
#
contentBlockingOptionStandard
.
extra
-
information
-
label
.
all
-
third
-
party
-
cookies
-
private
-
windows
-
option
"
)
;
for
(
let
elt
of
elts
)
{
is
(
elt
.
hidden
!
isShown
The
visibility
of
cookie
blocking
info
for
standard
mode
is
correct
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
}
async
function
testCookieBlockingInfoStrict
(
contentBlockingStrictFeatures
isShown
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CB_STRICT_FEATURES_PREF
contentBlockingStrictFeatures
]
[
FPI_PREF
false
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
let
strictRadioOption
=
doc
.
getElementById
(
"
strictRadio
"
)
;
strictRadioOption
.
click
(
)
;
let
elts
=
doc
.
querySelectorAll
(
"
#
contentBlockingOptionStrict
.
extra
-
information
-
label
.
all
-
third
-
party
-
cookies
-
private
-
windows
-
option
"
)
;
for
(
let
elt
of
elts
)
{
is
(
elt
.
hidden
!
isShown
The
cookie
blocking
info
is
hidden
for
strict
mode
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
}
add_task
(
async
function
runTests
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FPI_PREF
false
]
]
}
)
;
let
defaults
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
let
originalCookieBehavior
=
defaults
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
;
let
originalCookieBehaviorPBM
=
defaults
.
getIntPref
(
COOKIE_BEHAVIOR_PBM_PREF
)
;
await
testCookieBlockingInfoStandard
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
true
)
;
await
testCookieBlockingInfoStandard
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
false
)
;
await
testCookieBlockingInfoStrict
(
"
tp
tpPrivate
cookieBehavior5
cookieBehaviorPBM5
cm
fp
stp
lvl2
lvl2PBM
rp
rpTop
ocsp
"
false
)
;
await
testCookieBlockingInfoStrict
(
"
tp
tpPrivate
cookieBehavior4
cookieBehaviorPBM5
cm
fp
stp
lvl2
lvl2PBM
rp
rpTop
ocsp
"
true
)
;
defaults
.
setIntPref
(
COOKIE_BEHAVIOR_PREF
originalCookieBehavior
)
;
defaults
.
setIntPref
(
COOKIE_BEHAVIOR_PBM_PREF
originalCookieBehaviorPBM
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
