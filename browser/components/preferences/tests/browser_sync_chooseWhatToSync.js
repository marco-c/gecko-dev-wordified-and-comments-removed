"
use
strict
"
;
const
syncPrefs
=
{
"
services
.
sync
.
engine
.
addons
"
:
false
"
services
.
sync
.
engine
.
bookmarks
"
:
true
"
services
.
sync
.
engine
.
history
"
:
true
"
services
.
sync
.
engine
.
tabs
"
:
false
"
services
.
sync
.
engine
.
prefs
"
:
false
"
services
.
sync
.
engine
.
passwords
"
:
false
"
services
.
sync
.
engine
.
addresses
"
:
false
"
services
.
sync
.
engine
.
creditcards
"
:
false
}
;
add_task
(
async
function
testDialogAccept
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
identity
.
fxaccounts
.
enabled
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
paneGeneral
"
{
leaveOpen
:
true
}
)
;
let
callbackCalled
=
false
;
let
syncWindow
=
await
openAndLoadSubDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
syncChooseWhatToSync
.
xhtml
"
null
{
}
(
)
=
>
{
for
(
const
[
prefKey
prefValue
]
of
Object
.
entries
(
syncPrefs
)
)
{
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
prefKey
)
prefValue
{
prefValue
}
is
expected
value
)
;
}
callbackCalled
=
true
;
}
)
;
Assert
.
ok
(
syncWindow
"
Choose
what
to
sync
window
opened
"
)
;
let
syncChooseDialog
=
syncWindow
.
document
.
getElementById
(
"
syncChooseOptions
"
)
;
let
syncCheckboxes
=
syncChooseDialog
.
querySelectorAll
(
"
checkbox
[
preference
]
"
)
;
[
.
.
.
syncCheckboxes
]
.
forEach
(
checkbox
=
>
{
if
(
syncPrefs
[
checkbox
.
getAttribute
(
"
preference
"
)
]
!
=
=
checkbox
.
checked
)
{
checkbox
.
click
(
)
;
}
}
)
;
syncChooseDialog
.
acceptDialog
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
Assert
.
ok
(
callbackCalled
"
Accept
callback
was
called
"
)
;
}
)
;
add_task
(
async
function
testDialogCancel
(
)
{
const
cancelSyncPrefs
=
{
"
services
.
sync
.
engine
.
addons
"
:
true
"
services
.
sync
.
engine
.
bookmarks
"
:
false
"
services
.
sync
.
engine
.
history
"
:
true
"
services
.
sync
.
engine
.
tabs
"
:
true
"
services
.
sync
.
engine
.
prefs
"
:
false
"
services
.
sync
.
engine
.
passwords
"
:
true
"
services
.
sync
.
engine
.
addresses
"
:
true
"
services
.
sync
.
engine
.
creditcards
"
:
false
}
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
identity
.
fxaccounts
.
enabled
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
paneGeneral
"
{
leaveOpen
:
true
}
)
;
let
callbackCalled
=
false
;
let
syncWindow
=
await
openAndLoadSubDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
syncChooseWhatToSync
.
xhtml
"
null
{
}
(
)
=
>
{
for
(
const
[
prefKey
prefValue
]
of
Object
.
entries
(
syncPrefs
)
)
{
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
prefKey
)
prefValue
{
prefValue
}
is
expected
value
)
;
}
callbackCalled
=
true
;
}
)
;
ok
(
syncWindow
"
Choose
what
to
sync
window
opened
"
)
;
let
syncChooseDialog
=
syncWindow
.
document
.
getElementById
(
"
syncChooseOptions
"
)
;
let
syncCheckboxes
=
syncChooseDialog
.
querySelectorAll
(
"
checkbox
[
preference
]
"
)
;
[
.
.
.
syncCheckboxes
]
.
forEach
(
checkbox
=
>
{
if
(
cancelSyncPrefs
[
checkbox
.
getAttribute
(
"
preference
"
)
]
!
=
=
checkbox
.
checked
)
{
checkbox
.
click
(
)
;
}
}
)
;
syncChooseDialog
.
cancelDialog
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
Assert
.
ok
(
callbackCalled
"
Cancel
callback
was
called
"
)
;
}
)
;
