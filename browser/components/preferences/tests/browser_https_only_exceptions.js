add_task
(
async
function
testButtons
(
)
{
await
setHttpsOnlyPref
(
"
off
"
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
panePrivacy
"
{
leaveOpen
:
true
}
)
;
const
exceptionButton
=
gBrowser
.
contentDocument
.
getElementById
(
"
httpsOnlyExceptionButton
"
)
;
is
(
exceptionButton
.
disabled
true
"
HTTPS
-
Only
exception
button
should
be
disabled
when
HTTPS
-
Only
Mode
is
disabled
.
"
)
;
await
setHttpsOnlyPref
(
"
private
"
)
;
is
(
exceptionButton
.
disabled
true
"
HTTPS
-
Only
exception
button
should
be
disabled
when
HTTPS
-
Only
Mode
is
only
enabled
in
private
browsing
.
"
)
;
await
setHttpsOnlyPref
(
"
everywhere
"
)
;
is
(
exceptionButton
.
disabled
false
"
HTTPS
-
Only
exception
button
should
be
enabled
when
HTTPS
-
Only
Mode
enabled
everywhere
.
"
)
;
let
promiseSubDialogLoaded
=
promiseLoadSubDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
permissions
.
xhtml
"
)
;
exceptionButton
.
doCommand
(
)
;
let
win
=
await
promiseSubDialogLoaded
;
const
dialogDoc
=
win
.
document
;
is
(
dialogDoc
.
getElementById
(
"
btnBlock
"
)
.
hidden
true
"
Block
button
should
not
be
visible
in
HTTPS
-
Only
Dialog
.
"
)
;
is
(
dialogDoc
.
getElementById
(
"
btnCookieSession
"
)
.
hidden
true
"
Cookie
specific
allow
button
should
not
be
visible
in
HTTPS
-
Only
Dialog
.
"
)
;
is
(
dialogDoc
.
getElementById
(
"
btnAllow
"
)
.
hidden
true
"
Allow
button
should
not
be
visible
in
HTTPS
-
Only
Dialog
.
"
)
;
is
(
dialogDoc
.
getElementById
(
"
btnHttpsOnlyOff
"
)
.
hidden
false
"
HTTPS
-
Only
off
button
should
be
visible
in
HTTPS
-
Only
Dialog
.
"
)
;
is
(
dialogDoc
.
getElementById
(
"
btnHttpsOnlyOffTmp
"
)
.
hidden
false
"
HTTPS
-
Only
temporary
off
button
should
be
visible
in
HTTPS
-
Only
Dialog
.
"
)
;
await
SpecialPowers
.
flushPrefEnv
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
checkDialogFunctionality
(
)
{
await
setHttpsOnlyPref
(
"
everywhere
"
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
panePrivacy
"
{
leaveOpen
:
true
}
)
;
const
preferencesDoc
=
gBrowser
.
contentDocument
;
await
runTest
(
preferencesDoc
elements
=
>
{
assertListContents
(
elements
[
]
)
;
elements
.
url
.
value
=
"
test
.
com
"
;
elements
.
btnAllow
.
doCommand
(
)
;
assertListContents
(
elements
[
[
"
http
:
/
/
test
.
com
"
elements
.
allowL10nId
]
[
"
https
:
/
/
test
.
com
"
elements
.
allowL10nId
]
]
)
;
}
(
)
=
>
[
{
type
:
"
https
-
only
-
load
-
insecure
"
origin
:
"
http
:
/
/
test
.
com
"
data
:
"
added
"
capability
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
}
{
type
:
"
https
-
only
-
load
-
insecure
"
origin
:
"
https
:
/
/
test
.
com
"
data
:
"
added
"
capability
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
}
]
)
;
await
runTest
(
preferencesDoc
elements
=
>
{
assertListContents
(
elements
[
[
"
http
:
/
/
test
.
com
"
elements
.
allowL10nId
]
[
"
https
:
/
/
test
.
com
"
elements
.
allowL10nId
]
]
)
;
elements
.
url
.
value
=
"
1
.
1
.
1
.
1
:
8080
"
;
elements
.
btnAllowSession
.
doCommand
(
)
;
assertListContents
(
elements
[
[
"
http
:
/
/
test
.
com
"
elements
.
allowL10nId
]
[
"
https
:
/
/
test
.
com
"
elements
.
allowL10nId
]
[
"
http
:
/
/
1
.
1
.
1
.
1
:
8080
"
elements
.
allowSessionL10nId
]
[
"
https
:
/
/
1
.
1
.
1
.
1
:
8080
"
elements
.
allowSessionL10nId
]
]
)
;
}
(
)
=
>
[
{
type
:
"
https
-
only
-
load
-
insecure
"
origin
:
"
http
:
/
/
1
.
1
.
1
.
1
:
8080
"
data
:
"
added
"
capability
:
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW_SESSION
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
}
{
type
:
"
https
-
only
-
load
-
insecure
"
origin
:
"
https
:
/
/
1
.
1
.
1
.
1
:
8080
"
data
:
"
added
"
capability
:
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW_SESSION
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
}
]
)
;
await
runTest
(
preferencesDoc
elements
=
>
{
while
(
elements
.
richlistbox
.
itemCount
)
{
elements
.
richlistbox
.
selectedIndex
=
0
;
elements
.
btnRemove
.
doCommand
(
)
;
}
assertListContents
(
elements
[
]
)
;
}
elements
=
>
{
let
richlistItems
=
elements
.
richlistbox
.
getElementsByAttribute
(
"
origin
"
"
*
"
)
;
let
observances
=
[
]
;
for
(
let
item
of
richlistItems
)
{
observances
.
push
(
{
type
:
"
https
-
only
-
load
-
insecure
"
origin
:
item
.
getAttribute
(
"
origin
"
)
data
:
"
deleted
"
}
)
;
}
return
observances
;
}
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
async
function
setHttpsOnlyPref
(
state
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
state
=
=
=
"
everywhere
"
]
[
"
dom
.
security
.
https_only_mode_pbm
"
state
=
=
=
"
private
"
]
]
}
)
;
}
async
function
runTest
(
preferencesDoc
test
observancesFn
)
{
let
promiseSubDialogLoaded
=
promiseLoadSubDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
dialogs
/
permissions
.
xhtml
"
)
;
preferencesDoc
.
getElementById
(
"
httpsOnlyExceptionButton
"
)
.
doCommand
(
)
;
let
win
=
await
promiseSubDialogLoaded
;
const
doc
=
win
.
document
;
let
elements
=
{
richlistbox
:
doc
.
getElementById
(
"
permissionsBox
"
)
url
:
doc
.
getElementById
(
"
url
"
)
btnAllow
:
doc
.
getElementById
(
"
btnHttpsOnlyOff
"
)
btnAllowSession
:
doc
.
getElementById
(
"
btnHttpsOnlyOffTmp
"
)
btnRemove
:
doc
.
getElementById
(
"
removePermission
"
)
allowL10nId
:
win
.
gPermissionManager
.
_getCapabilityL10nId
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
allowSessionL10nId
:
win
.
gPermissionManager
.
_getCapabilityL10nId
(
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW_SESSION
)
}
;
const
observances
=
observancesFn
(
elements
)
;
await
test
(
elements
)
;
let
btnApplyChanges
=
doc
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
;
let
observeAllPromise
=
createObserveAllPromise
(
observances
)
;
btnApplyChanges
.
doCommand
(
)
;
await
observeAllPromise
;
}
function
assertListContents
(
elements
expected
)
{
is
(
elements
.
richlistbox
.
itemCount
expected
.
length
"
Richlistbox
should
match
the
expected
amount
of
exceptions
.
"
)
;
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
let
website
=
expected
[
i
]
[
0
]
;
let
listItem
=
elements
.
richlistbox
.
getElementsByAttribute
(
"
origin
"
website
)
;
is
(
listItem
.
length
1
"
Each
origin
should
be
unique
"
)
;
is
(
listItem
[
0
]
.
querySelector
(
"
.
website
-
capability
-
value
"
)
.
getAttribute
(
"
data
-
l10n
-
id
"
)
expected
[
i
]
[
1
]
"
List
item
capability
should
match
expected
l10n
-
id
"
)
;
}
}
