ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SiteDataManager
"
"
resource
:
/
/
/
modules
/
SiteDataManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DownloadUtils
"
"
resource
:
/
/
gre
/
modules
/
DownloadUtils
.
jsm
"
)
;
"
use
strict
"
;
let
gSiteDataSettings
=
{
_sites
:
null
_list
:
null
_searchBox
:
null
_prefStrBundle
:
null
init
(
)
{
function
setEventListener
(
id
eventType
callback
)
{
document
.
getElementById
(
id
)
.
addEventListener
(
eventType
callback
.
bind
(
gSiteDataSettings
)
)
;
}
this
.
_list
=
document
.
getElementById
(
"
sitesList
"
)
;
this
.
_searchBox
=
document
.
getElementById
(
"
searchBox
"
)
;
this
.
_prefStrBundle
=
document
.
getElementById
(
"
bundlePreferences
"
)
;
SiteDataManager
.
getSites
(
)
.
then
(
sites
=
>
{
this
.
_sites
=
sites
;
let
sortCol
=
document
.
querySelector
(
"
treecol
[
data
-
isCurrentSortCol
=
true
]
"
)
;
this
.
_sortSites
(
this
.
_sites
sortCol
)
;
this
.
_buildSitesList
(
this
.
_sites
)
;
Services
.
obs
.
notifyObservers
(
null
"
sitedata
-
settings
-
init
"
)
;
}
)
;
let
brandShortName
=
document
.
getElementById
(
"
bundle_brand
"
)
.
getString
(
"
brandShortName
"
)
;
let
settingsDescription
=
document
.
getElementById
(
"
settingsDescription
"
)
;
settingsDescription
.
textContent
=
this
.
_prefStrBundle
.
getFormattedString
(
"
siteDataSettings2
.
description
"
[
brandShortName
]
)
;
setEventListener
(
"
sitesList
"
"
select
"
this
.
onSelect
)
;
setEventListener
(
"
hostCol
"
"
click
"
this
.
onClickTreeCol
)
;
setEventListener
(
"
usageCol
"
"
click
"
this
.
onClickTreeCol
)
;
setEventListener
(
"
statusCol
"
"
click
"
this
.
onClickTreeCol
)
;
setEventListener
(
"
cancel
"
"
command
"
this
.
close
)
;
setEventListener
(
"
save
"
"
command
"
this
.
saveChanges
)
;
setEventListener
(
"
searchBox
"
"
command
"
this
.
onCommandSearch
)
;
setEventListener
(
"
removeAll
"
"
command
"
this
.
onClickRemoveAll
)
;
setEventListener
(
"
removeSelected
"
"
command
"
this
.
onClickRemoveSelected
)
;
}
_updateButtonsState
(
)
{
let
items
=
this
.
_list
.
getElementsByTagName
(
"
richlistitem
"
)
;
let
removeSelectedBtn
=
document
.
getElementById
(
"
removeSelected
"
)
;
let
removeAllBtn
=
document
.
getElementById
(
"
removeAll
"
)
;
removeSelectedBtn
.
disabled
=
this
.
_list
.
selectedItems
.
length
=
=
0
;
removeAllBtn
.
disabled
=
items
.
length
=
=
0
;
let
removeAllBtnLabelStringID
=
"
removeAllSiteData
.
label
"
;
let
removeAllBtnAccesskeyStringID
=
"
removeAllSiteData
.
accesskey
"
;
if
(
this
.
_searchBox
.
value
)
{
removeAllBtnLabelStringID
=
"
removeAllSiteDataShown
.
label
"
;
removeAllBtnAccesskeyStringID
=
"
removeAllSiteDataShown
.
accesskey
"
;
}
removeAllBtn
.
setAttribute
(
"
label
"
this
.
_prefStrBundle
.
getString
(
removeAllBtnLabelStringID
)
)
;
removeAllBtn
.
setAttribute
(
"
accesskey
"
this
.
_prefStrBundle
.
getString
(
removeAllBtnAccesskeyStringID
)
)
;
}
_sortSites
(
sites
col
)
{
let
isCurrentSortCol
=
col
.
getAttribute
(
"
data
-
isCurrentSortCol
"
)
;
let
sortDirection
=
col
.
getAttribute
(
"
data
-
last
-
sortDirection
"
)
|
|
"
ascending
"
;
if
(
isCurrentSortCol
)
{
sortDirection
=
sortDirection
=
=
=
"
ascending
"
?
"
descending
"
:
"
ascending
"
;
}
let
sortFunc
=
null
;
switch
(
col
.
id
)
{
case
"
hostCol
"
:
sortFunc
=
(
a
b
)
=
>
{
let
aHost
=
a
.
host
.
toLowerCase
(
)
;
let
bHost
=
b
.
host
.
toLowerCase
(
)
;
return
aHost
.
localeCompare
(
bHost
)
;
}
;
break
;
case
"
statusCol
"
:
sortFunc
=
(
a
b
)
=
>
{
if
(
a
.
persisted
&
&
!
b
.
persisted
)
{
return
1
;
}
else
if
(
!
a
.
persisted
&
&
b
.
persisted
)
{
return
-
1
;
}
return
0
;
}
;
break
;
case
"
usageCol
"
:
sortFunc
=
(
a
b
)
=
>
a
.
usage
-
b
.
usage
;
break
;
}
if
(
sortDirection
=
=
=
"
descending
"
)
{
sites
.
sort
(
(
a
b
)
=
>
sortFunc
(
b
a
)
)
;
}
else
{
sites
.
sort
(
sortFunc
)
;
}
let
cols
=
this
.
_list
.
querySelectorAll
(
"
treecol
"
)
;
cols
.
forEach
(
c
=
>
{
c
.
removeAttribute
(
"
sortDirection
"
)
;
c
.
removeAttribute
(
"
data
-
isCurrentSortCol
"
)
;
}
)
;
col
.
setAttribute
(
"
data
-
isCurrentSortCol
"
true
)
;
col
.
setAttribute
(
"
sortDirection
"
sortDirection
)
;
col
.
setAttribute
(
"
data
-
last
-
sortDirection
"
sortDirection
)
;
}
_buildSitesList
(
sites
)
{
let
oldItems
=
this
.
_list
.
querySelectorAll
(
"
richlistitem
"
)
;
for
(
let
item
of
oldItems
)
{
item
.
remove
(
)
;
}
let
keyword
=
this
.
_searchBox
.
value
.
toLowerCase
(
)
.
trim
(
)
;
for
(
let
site
of
sites
)
{
let
host
=
site
.
host
;
if
(
keyword
&
&
!
host
.
includes
(
keyword
)
)
{
continue
;
}
if
(
site
.
userAction
=
=
=
"
remove
"
)
{
continue
;
}
let
size
=
DownloadUtils
.
convertByteUnits
(
site
.
usage
)
;
let
item
=
document
.
createElement
(
"
richlistitem
"
)
;
item
.
setAttribute
(
"
host
"
host
)
;
item
.
setAttribute
(
"
usage
"
this
.
_prefStrBundle
.
getFormattedString
(
"
siteUsage
"
size
)
)
;
if
(
site
.
persisted
)
{
item
.
setAttribute
(
"
status
"
this
.
_prefStrBundle
.
getString
(
"
persistent
"
)
)
;
}
this
.
_list
.
appendChild
(
item
)
;
}
this
.
_updateButtonsState
(
)
;
}
_removeSiteItems
(
items
)
{
for
(
let
i
=
items
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
let
item
=
items
[
i
]
;
let
host
=
item
.
getAttribute
(
"
host
"
)
;
let
siteForHost
=
this
.
_sites
.
find
(
site
=
>
site
.
host
=
=
host
)
;
if
(
siteForHost
)
{
siteForHost
.
userAction
=
"
remove
"
;
}
item
.
remove
(
)
;
}
this
.
_updateButtonsState
(
)
;
}
_getBaseDomainFromHost
(
host
)
{
let
result
=
host
;
try
{
result
=
Services
.
eTLD
.
getBaseDomainFromHost
(
host
)
;
}
catch
(
e
)
{
if
(
e
.
result
=
=
Cr
.
NS_ERROR_HOST_IS_IP_ADDRESS
|
|
e
.
result
=
=
Cr
.
NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS
)
{
result
=
host
;
}
else
{
throw
e
;
}
}
return
result
;
}
saveChanges
(
)
{
let
allowed
=
true
;
let
removals
=
new
Set
(
)
;
this
.
_sites
=
this
.
_sites
.
filter
(
site
=
>
{
if
(
site
.
userAction
=
=
=
"
remove
"
)
{
removals
.
add
(
site
.
host
)
;
return
false
;
}
return
true
;
}
)
;
if
(
removals
.
size
>
0
)
{
if
(
this
.
_sites
.
length
=
=
0
)
{
if
(
SiteDataManager
.
promptSiteDataRemoval
(
window
)
)
{
SiteDataManager
.
removeAll
(
)
;
}
}
else
{
let
hostsTable
=
new
Map
(
)
;
for
(
let
host
of
removals
)
{
let
baseDomain
=
this
.
_getBaseDomainFromHost
(
host
)
;
let
hosts
=
hostsTable
.
get
(
baseDomain
)
;
if
(
!
hosts
)
{
hosts
=
[
]
;
hostsTable
.
set
(
baseDomain
hosts
)
;
}
hosts
.
push
(
host
)
;
}
for
(
let
site
of
this
.
_sites
)
{
let
baseDomain
=
this
.
_getBaseDomainFromHost
(
site
.
host
)
;
let
hosts
=
hostsTable
.
get
(
baseDomain
)
;
if
(
hosts
)
{
hosts
.
push
(
site
.
host
)
;
}
}
let
args
=
{
hostsTable
allowed
:
false
}
;
let
features
=
"
centerscreen
chrome
modal
resizable
=
no
"
;
window
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
siteDataRemoveSelected
.
xul
"
"
"
features
args
)
;
allowed
=
args
.
allowed
;
if
(
allowed
)
{
try
{
SiteDataManager
.
remove
(
removals
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
}
this
.
close
(
)
;
}
close
(
)
{
window
.
close
(
)
;
}
onClickTreeCol
(
e
)
{
this
.
_sortSites
(
this
.
_sites
e
.
target
)
;
this
.
_buildSitesList
(
this
.
_sites
)
;
}
onCommandSearch
(
)
{
this
.
_buildSitesList
(
this
.
_sites
)
;
this
.
_list
.
clearSelection
(
)
;
}
onClickRemoveSelected
(
)
{
let
selected
=
this
.
_list
.
selectedItem
;
if
(
selected
)
{
this
.
_removeSiteItems
(
[
selected
]
)
;
}
this
.
_list
.
clearSelection
(
)
;
}
onClickRemoveAll
(
)
{
let
siteItems
=
this
.
_list
.
getElementsByTagName
(
"
richlistitem
"
)
;
if
(
siteItems
.
length
>
0
)
{
this
.
_removeSiteItems
(
siteItems
)
;
}
}
onKeyPress
(
e
)
{
if
(
e
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
this
.
close
(
)
;
}
}
onSelect
(
)
{
this
.
_updateButtonsState
(
)
;
}
}
;
