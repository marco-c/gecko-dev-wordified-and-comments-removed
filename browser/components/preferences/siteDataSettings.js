const
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SiteDataManager
"
"
resource
:
/
/
/
modules
/
SiteDataManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DownloadUtils
"
"
resource
:
/
/
gre
/
modules
/
DownloadUtils
.
jsm
"
)
;
"
use
strict
"
;
let
gSiteDataSettings
=
{
_sites
:
null
_list
:
null
init
(
)
{
this
.
_list
=
document
.
getElementById
(
"
sitesList
"
)
;
SiteDataManager
.
getSites
(
)
.
then
(
sites
=
>
{
this
.
_sites
=
sites
;
this
.
_sortSites
(
this
.
_sites
"
decending
"
)
;
this
.
_buildSitesList
(
this
.
_sites
)
;
}
)
;
}
_sortSites
(
sites
order
)
{
sites
.
sort
(
(
a
b
)
=
>
{
if
(
order
=
=
=
"
ascending
"
)
{
return
a
.
usage
-
b
.
usage
;
}
return
b
.
usage
-
a
.
usage
;
}
)
;
}
_buildSitesList
(
sites
)
{
while
(
this
.
_list
.
childNodes
.
length
>
1
)
{
this
.
_list
.
removeChild
(
this
.
_list
.
lastChild
)
;
}
let
prefStrBundle
=
document
.
getElementById
(
"
bundlePreferences
"
)
;
for
(
let
data
of
sites
)
{
let
statusStrId
=
data
.
status
=
=
=
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
?
"
important
"
:
"
default
"
;
let
size
=
DownloadUtils
.
convertByteUnits
(
data
.
usage
)
;
let
item
=
document
.
createElement
(
"
richlistitem
"
)
;
item
.
setAttribute
(
"
data
-
origin
"
data
.
uri
.
spec
)
;
item
.
setAttribute
(
"
host
"
data
.
uri
.
host
)
;
item
.
setAttribute
(
"
status
"
prefStrBundle
.
getString
(
statusStrId
)
)
;
item
.
setAttribute
(
"
usage
"
prefStrBundle
.
getFormattedString
(
"
siteUsage
"
size
)
)
;
this
.
_list
.
appendChild
(
item
)
;
}
}
}
;
