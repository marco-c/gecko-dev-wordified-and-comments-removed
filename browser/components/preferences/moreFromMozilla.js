var
gMoreFromMozillaPane
=
{
initialized
:
false
_option
:
"
default
"
set
option
(
value
)
{
if
(
!
value
)
{
this
.
_option
=
"
default
"
;
return
;
}
if
(
value
=
=
=
"
default
"
|
|
value
=
=
=
"
simple
"
|
|
value
=
=
=
"
advanced
"
)
{
this
.
_option
=
value
;
}
}
get
option
(
)
{
return
this
.
_option
;
}
getTemplateName
(
)
{
if
(
!
this
.
_option
|
|
this
.
_option
=
=
"
default
"
)
{
return
"
simple
"
;
}
return
this
.
_option
;
}
getURL
(
url
option
hasEmail
)
{
const
URL_PARAMS
=
{
utm_source
:
"
about
-
prefs
"
utm_campaign
:
"
morefrommozilla
"
utm_medium
:
"
firefox
-
desktop
"
entrypoint_experiment
:
"
morefrommozilla
-
experiment
-
1846
"
}
;
const
utm_content
=
{
default
:
"
fxvt
-
default
"
simple
:
"
fxvt
-
113
-
a
-
na
"
advanced
:
"
fxvt
-
113
-
b
-
na
"
}
;
let
pageUrl
=
new
URL
(
url
)
;
for
(
let
[
key
val
]
of
Object
.
entries
(
URL_PARAMS
)
)
{
pageUrl
.
searchParams
.
append
(
key
val
)
;
}
if
(
option
)
{
pageUrl
.
searchParams
.
set
(
"
utm_content
"
{
utm_content
[
option
]
}
{
hasEmail
?
"
-
email
"
:
"
"
}
)
;
pageUrl
.
searchParams
.
set
(
"
entrypoint_variation
"
treatment
-
{
option
}
)
;
}
return
pageUrl
.
toString
(
)
;
}
renderProducts
(
)
{
let
products
=
[
{
id
:
"
firefox
-
mobile
"
title_string_id
:
"
more
-
from
-
moz
-
firefox
-
mobile
-
title
"
description_string_id
:
"
more
-
from
-
moz
-
firefox
-
mobile
-
description
"
button
:
{
id
:
"
fxMobile
"
type
:
"
link
"
label_string_id
:
"
more
-
from
-
moz
-
learn
-
more
-
link
"
actionURL
:
"
https
:
/
/
www
.
mozilla
.
org
/
firefox
/
browsers
/
mobile
/
"
}
qrcode
:
{
title
:
{
string_id
:
"
more
-
from
-
moz
-
qr
-
code
-
box
-
firefox
-
mobile
-
title
"
}
image_src_prefix
:
"
chrome
:
/
/
browser
/
content
/
preferences
/
more
-
from
-
mozilla
-
qr
-
code
"
button
:
{
id
:
"
qr
-
code
-
send
-
email
"
label
:
{
string_id
:
"
more
-
from
-
moz
-
qr
-
code
-
box
-
firefox
-
mobile
-
button
"
}
actionURL
:
"
https
:
/
/
www
.
mozilla
.
org
/
en
-
US
/
firefox
/
mobile
/
get
-
app
"
}
}
}
]
;
if
(
BrowserUtils
.
shouldShowVPNPromo
(
)
)
{
const
vpn
=
{
id
:
"
mozilla
-
vpn
"
title_string_id
:
"
more
-
from
-
moz
-
mozilla
-
vpn
-
title
"
description_string_id
:
"
more
-
from
-
moz
-
mozilla
-
vpn
-
description
"
button
:
{
id
:
"
mozillaVPN
"
label_string_id
:
"
more
-
from
-
moz
-
button
-
mozilla
-
vpn
"
actionURL
:
"
https
:
/
/
www
.
mozilla
.
org
/
products
/
vpn
/
"
}
}
;
products
.
push
(
vpn
)
;
}
const
rally
=
{
id
:
"
mozilla
-
rally
"
title_string_id
:
"
more
-
from
-
moz
-
mozilla
-
rally
-
title
"
description_string_id
:
"
more
-
from
-
moz
-
mozilla
-
rally
-
description
"
button
:
{
id
:
"
mozillaRally
"
label_string_id
:
"
more
-
from
-
moz
-
button
-
mozilla
-
rally
"
actionURL
:
"
https
:
/
/
rally
.
mozilla
.
org
/
"
}
}
;
products
.
push
(
rally
)
;
this
.
_productsContainer
=
document
.
getElementById
(
"
moreFromMozillaCategory
"
)
;
let
frag
=
document
.
createDocumentFragment
(
)
;
this
.
_template
=
document
.
getElementById
(
this
.
getTemplateName
(
)
)
;
if
(
!
this
.
_template
)
{
return
;
}
for
(
let
product
of
products
)
{
let
template
=
this
.
_template
.
content
.
cloneNode
(
true
)
;
let
title
=
template
.
querySelector
(
"
.
product
-
title
"
)
;
let
desc
=
template
.
querySelector
(
"
.
description
"
)
;
title
.
setAttribute
(
"
data
-
l10n
-
id
"
product
.
title_string_id
)
;
title
.
id
=
product
.
id
;
if
(
this
.
option
=
=
=
"
advanced
"
)
{
template
.
querySelector
(
"
vbox
.
advanced
"
)
.
id
=
{
product
.
id
}
-
vbox
;
template
.
querySelector
(
"
.
product
-
img
"
)
.
id
=
{
product
.
id
}
-
image
;
desc
.
setAttribute
(
"
data
-
l10n
-
id
"
{
product
.
description_string_id
}
-
advanced
)
;
}
else
{
desc
.
setAttribute
(
"
data
-
l10n
-
id
"
product
.
description_string_id
)
;
}
let
isLink
=
product
.
button
.
type
=
=
=
"
link
"
;
let
actionElement
=
template
.
querySelector
(
isLink
?
"
.
text
-
link
"
:
"
.
small
-
button
"
)
;
if
(
actionElement
)
{
actionElement
.
hidden
=
false
;
actionElement
.
id
=
{
this
.
option
}
-
{
product
.
button
.
id
}
;
actionElement
.
setAttribute
(
"
data
-
l10n
-
id
"
product
.
button
.
label_string_id
)
;
if
(
isLink
)
{
actionElement
.
setAttribute
(
"
href
"
this
.
getURL
(
product
.
button
.
actionURL
this
.
option
)
)
;
actionElement
.
setAttribute
(
"
target
"
"
_blank
"
)
;
}
else
{
actionElement
.
addEventListener
(
"
command
"
function
(
)
{
let
mainWindow
=
window
.
windowRoot
.
ownerGlobal
;
mainWindow
.
openTrustedLinkIn
(
gMoreFromMozillaPane
.
getURL
(
product
.
button
.
actionURL
gMoreFromMozillaPane
.
option
)
"
tab
"
)
;
}
)
;
}
}
if
(
product
.
qrcode
)
{
let
qrcode
=
template
.
querySelector
(
"
.
qr
-
code
-
box
"
)
;
qrcode
.
setAttribute
(
"
hidden
"
"
false
"
)
;
let
qrcode_title
=
template
.
querySelector
(
"
.
qr
-
code
-
box
-
title
"
)
;
qrcode_title
.
setAttribute
(
"
data
-
l10n
-
id
"
product
.
qrcode
.
title
.
string_id
)
;
let
img
=
template
.
querySelector
(
"
.
qr
-
code
-
box
-
image
"
)
;
img
.
src
=
product
.
qrcode
.
image_src_prefix
+
"
-
"
+
this
.
getTemplateName
(
)
+
"
.
svg
"
;
let
qrc_btn
=
template
.
querySelector
(
"
.
qr
-
code
-
button
"
)
;
qrc_btn
.
id
=
{
this
.
option
}
-
{
product
.
qrcode
.
button
.
id
}
;
qrc_btn
.
setAttribute
(
"
data
-
l10n
-
id
"
product
.
qrcode
.
button
.
label
.
string_id
)
;
qrc_btn
.
setAttribute
(
"
href
"
this
.
getURL
(
product
.
qrcode
.
button
.
actionURL
this
.
option
true
)
)
;
}
frag
.
appendChild
(
template
)
;
}
this
.
_productsContainer
.
appendChild
(
frag
)
;
}
async
init
(
)
{
if
(
this
.
initialized
)
{
return
;
}
this
.
initialized
=
true
;
document
.
getElementById
(
"
moreFromMozillaCategory
"
)
.
removeAttribute
(
"
data
-
hidden
-
from
-
search
"
)
;
document
.
getElementById
(
"
moreFromMozillaCategory
-
header
"
)
.
removeAttribute
(
"
data
-
hidden
-
from
-
search
"
)
;
this
.
renderProducts
(
)
;
}
}
;
