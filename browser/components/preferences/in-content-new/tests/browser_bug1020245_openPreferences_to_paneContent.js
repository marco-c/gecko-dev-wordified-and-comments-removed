Services
.
prefs
.
setBoolPref
(
"
browser
.
preferences
.
instantApply
"
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
preferences
.
instantApply
"
)
;
}
)
;
add_task
(
async
function
(
)
{
let
prefs
=
await
openPreferencesViaOpenPreferencesAPI
(
"
panePrivacy
"
)
;
is
(
prefs
.
selectedPane
"
panePrivacy
"
"
Privacy
pane
was
selected
"
)
;
prefs
=
await
openPreferencesViaHash
(
"
privacy
"
)
;
is
(
prefs
.
selectedPane
"
panePrivacy
"
"
Privacy
pane
is
selected
when
hash
is
'
privacy
'
"
)
;
prefs
=
await
openPreferencesViaOpenPreferencesAPI
(
"
nonexistant
-
category
"
)
;
is
(
prefs
.
selectedPane
"
paneGeneral
"
"
General
pane
is
selected
by
default
when
a
nonexistant
-
category
is
requested
"
)
;
prefs
=
await
openPreferencesViaHash
(
"
nonexistant
-
category
"
)
;
is
(
prefs
.
selectedPane
"
paneGeneral
"
"
General
pane
is
selected
when
hash
is
a
nonexistant
-
category
"
)
;
prefs
=
await
openPreferencesViaHash
(
)
;
is
(
prefs
.
selectedPane
"
paneGeneral
"
"
General
pane
is
selected
by
default
"
)
;
prefs
=
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
-
reports
"
{
leaveOpen
:
true
}
)
;
is
(
prefs
.
selectedPane
"
panePrivacy
"
"
Privacy
pane
is
selected
by
default
"
)
;
let
doc
=
gBrowser
.
contentDocument
;
is
(
doc
.
location
.
hash
"
#
privacy
"
"
The
subcategory
should
be
removed
from
the
URI
"
)
;
ok
(
doc
.
querySelector
(
"
#
locationBarGroup
"
)
.
hidden
"
Location
Bar
prefs
should
be
hidden
when
only
Reports
are
requested
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
(
)
{
let
prefs
=
await
openPreferencesViaOpenPreferencesAPI
(
"
general
"
{
leaveOpen
:
true
}
)
;
is
(
prefs
.
selectedPane
"
paneGeneral
"
"
General
pane
is
selected
by
default
"
)
;
let
doc
=
gBrowser
.
contentDocument
;
is
(
doc
.
location
.
hash
"
#
general
"
"
The
subcategory
should
be
removed
from
the
URI
"
)
;
openPreferences
(
"
privacy
-
reports
"
)
;
let
selectedPane
=
gBrowser
.
contentWindow
.
history
.
state
;
is
(
selectedPane
"
panePrivacy
"
"
Privacy
pane
should
be
selected
"
)
;
is
(
doc
.
location
.
hash
"
#
privacy
"
"
The
subcategory
should
be
removed
from
the
URI
"
)
;
ok
(
doc
.
querySelector
(
"
#
locationBarGroup
"
)
.
hidden
"
Location
Bar
prefs
should
be
hidden
when
only
Reports
are
requested
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
(
)
{
if
(
!
AppConstants
.
MOZ_CRASHREPORTER
)
{
return
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
crashReports
.
unsubmittedCheck
.
autoSubmit
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
-
reports
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
ok
(
doc
.
querySelector
(
"
#
automaticallySubmitCrashesBox
"
)
.
checked
"
Checkbox
for
automatically
submitting
crashes
should
be
checked
when
the
pref
is
true
and
only
Reports
are
requested
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
(
)
{
if
(
!
AppConstants
.
MOZ_CRASHREPORTER
)
{
return
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
crashReports
.
unsubmittedCheck
.
autoSubmit
"
false
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
-
reports
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
ok
(
!
doc
.
querySelector
(
"
#
automaticallySubmitCrashesBox
"
)
.
checked
"
Checkbox
for
automatically
submitting
crashes
should
not
be
checked
when
the
pref
is
false
only
Reports
are
requested
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
function
openPreferencesViaHash
(
aPane
)
{
return
new
Promise
(
resolve
=
>
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
preferences
"
+
(
aPane
?
"
#
"
+
aPane
:
"
"
)
)
;
let
newTabBrowser
=
gBrowser
.
selectedBrowser
;
newTabBrowser
.
addEventListener
(
"
Initialized
"
function
(
)
{
newTabBrowser
.
contentWindow
.
addEventListener
(
"
load
"
function
(
)
{
let
win
=
gBrowser
.
contentWindow
;
let
selectedPane
=
win
.
history
.
state
;
gBrowser
.
removeCurrentTab
(
)
;
resolve
(
{
selectedPane
}
)
;
}
{
once
:
true
}
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
)
;
}
