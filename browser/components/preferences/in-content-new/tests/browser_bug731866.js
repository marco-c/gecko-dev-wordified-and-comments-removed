Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
const
storageManagerDisabled
=
!
SpecialPowers
.
getBoolPref
(
"
browser
.
storageManager
.
enabled
"
)
;
const
offlineGroupDisabled
=
!
SpecialPowers
.
getBoolPref
(
"
browser
.
preferences
.
offlineGroup
.
enabled
"
)
;
const
browserContainersGroupDisabled
=
!
SpecialPowers
.
getBoolPref
(
"
privacy
.
userContext
.
ui
.
enabled
"
)
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
open_preferences
(
runTest
)
;
}
var
gElements
;
function
checkElements
(
expectedPane
)
{
for
(
let
element
of
gElements
)
{
if
(
element
.
nodeName
=
=
"
keyset
"
|
|
element
.
nodeName
=
=
"
preferences
"
|
|
element
.
id
=
=
=
"
drmGroup
"
)
{
continue
;
}
if
(
element
.
id
=
=
"
siteDataGroup
"
&
&
storageManagerDisabled
)
{
is_element_hidden
(
element
"
Disabled
siteDataGroup
should
be
hidden
"
)
;
continue
;
}
if
(
element
.
id
=
=
"
offlineGroup
"
&
&
offlineGroupDisabled
)
{
is_element_hidden
(
element
"
Disabled
offlineGroup
should
be
hidden
"
)
;
continue
;
}
if
(
element
.
id
=
=
"
browserContainersGroup
"
&
&
browserContainersGroupDisabled
)
{
is_element_hidden
(
element
"
Disabled
browserContainersGroup
should
be
hidden
"
)
;
continue
;
}
let
attributeValue
=
element
.
getAttribute
(
"
data
-
category
"
)
;
let
suffix
=
"
(
id
=
"
+
element
.
id
+
"
)
"
;
if
(
attributeValue
=
=
"
pane
"
+
expectedPane
)
{
is_element_visible
(
element
expectedPane
+
"
elements
should
be
visible
"
+
suffix
)
;
}
else
{
is_element_hidden
(
element
"
Elements
not
in
"
+
expectedPane
+
"
should
be
hidden
"
+
suffix
)
;
}
}
}
function
runTest
(
win
)
{
is
(
gBrowser
.
currentURI
.
spec
"
about
:
preferences
"
"
about
:
preferences
loaded
"
)
;
let
tab
=
win
.
document
;
gElements
=
tab
.
getElementById
(
"
mainPrefPane
"
)
.
children
;
let
panes
=
[
"
General
"
"
Search
"
"
Privacy
"
"
Sync
"
]
;
for
(
let
pane
of
panes
)
{
win
.
gotoPref
(
"
pane
"
+
pane
)
;
checkElements
(
pane
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
win
.
close
(
)
;
finish
(
)
;
}
