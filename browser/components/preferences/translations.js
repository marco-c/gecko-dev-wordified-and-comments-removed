ChromeUtils
.
defineESModuleGetters
(
this
{
TranslationsParent
:
"
resource
:
/
/
gre
/
actors
/
TranslationsParent
.
sys
.
mjs
"
}
)
;
let
gTranslationsPane
=
{
init
(
)
{
document
.
getElementById
(
"
translations
-
settings
-
back
-
button
"
)
.
addEventListener
(
"
click
"
function
(
)
{
gotoPref
(
"
general
"
)
;
}
)
;
document
.
getElementById
(
"
translations
-
settings
-
always
-
translate
-
list
"
)
.
addEventListener
(
"
command
"
this
.
addAlwaysLanguage
)
;
document
.
getElementById
(
"
translations
-
settings
-
never
-
translate
-
list
"
)
.
addEventListener
(
"
command
"
this
.
addNeverLanguage
)
;
this
.
buildLanguageDropDowns
(
)
;
this
.
buildDownloadLanguageList
(
)
;
}
async
buildLanguageDropDowns
(
)
{
const
{
fromLanguages
}
=
await
TranslationsParent
.
getSupportedLanguages
(
)
;
let
alwaysLangPopup
=
document
.
getElementById
(
"
translations
-
settings
-
always
-
translate
-
popup
"
)
;
let
neverLangPopup
=
document
.
getElementById
(
"
translations
-
settings
-
never
-
translate
-
popup
"
)
;
for
(
const
{
langTag
displayName
}
of
fromLanguages
)
{
const
alwaysLang
=
document
.
createXULElement
(
"
menuitem
"
)
;
alwaysLang
.
setAttribute
(
"
value
"
langTag
)
;
alwaysLang
.
setAttribute
(
"
label
"
displayName
)
;
alwaysLangPopup
.
appendChild
(
alwaysLang
)
;
const
neverLang
=
document
.
createXULElement
(
"
menuitem
"
)
;
neverLang
.
setAttribute
(
"
value
"
langTag
)
;
neverLang
.
setAttribute
(
"
label
"
displayName
)
;
neverLangPopup
.
appendChild
(
neverLang
)
;
}
}
async
buildDownloadLanguageList
(
)
{
const
supportedLanguages
=
await
TranslationsParent
.
getSupportedLanguages
(
)
;
const
languageList
=
TranslationsParent
.
getLanguageList
(
supportedLanguages
)
;
let
installList
=
document
.
querySelector
(
"
.
translations
-
settings
-
language
-
list
"
)
;
installList
.
querySelector
(
"
moz
-
button
"
)
.
addEventListener
(
"
click
"
installLanguage
)
;
for
(
const
language
of
languageList
)
{
const
languageElement
=
document
.
createElement
(
"
div
"
)
;
languageElement
.
classList
.
add
(
"
translations
-
settings
-
language
"
)
;
const
languageLabel
=
document
.
createElement
(
"
label
"
)
;
languageLabel
.
textContent
=
language
.
displayName
;
languageLabel
.
setAttribute
(
"
value
"
language
.
langTag
)
;
languageLabel
.
id
=
"
translations
-
settings
-
download
-
"
+
language
.
langTag
;
const
installButton
=
document
.
createElement
(
"
moz
-
button
"
)
;
installButton
.
classList
.
add
(
"
translations
-
settings
-
download
-
icon
"
)
;
installButton
.
setAttribute
(
"
type
"
"
ghost
icon
"
)
;
installButton
.
addEventListener
(
"
click
"
installLanguage
)
;
installButton
.
setAttribute
(
"
aria
-
label
"
languageLabel
.
id
)
;
languageElement
.
appendChild
(
installButton
)
;
languageElement
.
appendChild
(
languageLabel
)
;
installList
.
appendChild
(
languageElement
)
;
}
}
addAlwaysLanguage
(
event
)
{
addLanguage
(
event
"
translations
-
settings
-
always
-
translate
-
section
"
deleteAlwaysLanguage
)
;
}
addNeverLanguage
(
event
)
{
addLanguage
(
event
"
translations
-
settings
-
never
-
translate
-
section
"
deleteNeverLanguage
)
;
}
}
;
async
function
addLanguage
(
event
listClass
delHandler
)
{
const
translatePrefix
=
listClass
=
=
=
"
translations
-
settings
-
never
-
translate
-
section
"
?
"
never
"
:
"
always
"
;
let
translateSection
=
document
.
getElementById
(
listClass
)
;
let
languageList
=
translateSection
.
querySelector
(
"
.
translations
-
settings
-
language
-
list
"
)
;
if
(
!
languageList
)
{
let
languageCard
=
document
.
createElement
(
"
div
"
)
;
languageCard
.
classList
.
add
(
"
translations
-
settings
-
languages
-
card
"
)
;
translateSection
.
appendChild
(
languageCard
)
;
let
languageHeader
=
document
.
createElement
(
"
h3
"
)
;
languageCard
.
appendChild
(
languageHeader
)
;
languageHeader
.
setAttribute
(
"
data
-
l10n
-
id
"
"
translations
-
settings
-
language
-
header
"
)
;
languageHeader
.
classList
.
add
(
"
translations
-
settings
-
language
-
header
"
)
;
languageList
=
document
.
createElement
(
"
div
"
)
;
languageList
.
classList
.
add
(
"
translations
-
settings
-
language
-
list
"
)
;
languageCard
.
appendChild
(
languageList
)
;
}
const
languageElement
=
document
.
createElement
(
"
div
"
)
;
languageElement
.
classList
.
add
(
"
translations
-
settings
-
language
"
)
;
languageList
.
insertBefore
(
languageElement
languageList
.
firstChild
)
;
const
languageLabel
=
document
.
createElement
(
"
label
"
)
;
languageLabel
.
textContent
=
event
.
target
.
getAttribute
(
"
label
"
)
;
languageLabel
.
setAttribute
(
"
value
"
event
.
target
.
getAttribute
(
"
value
"
)
)
;
languageLabel
.
id
=
"
translations
-
settings
-
language
-
"
+
translatePrefix
+
"
-
"
+
event
.
target
.
getAttribute
(
"
value
"
)
;
const
delButton
=
document
.
createElement
(
"
moz
-
button
"
)
;
delButton
.
classList
.
add
(
"
translations
-
settings
-
delete
-
icon
"
)
;
delButton
.
setAttribute
(
"
type
"
"
ghost
icon
"
)
;
delButton
.
addEventListener
(
"
click
"
delHandler
)
;
delButton
.
setAttribute
(
"
aria
-
label
"
languageLabel
.
id
)
;
languageElement
.
appendChild
(
delButton
)
;
languageElement
.
appendChild
(
languageLabel
)
;
const
menuList
=
translateSection
.
querySelector
(
"
menulist
"
)
;
await
document
.
l10n
.
translateElements
(
[
menuList
]
)
;
}
function
deleteAlwaysLanguage
(
event
)
{
removeLanguage
(
event
)
;
}
function
deleteNeverLanguage
(
event
)
{
removeLanguage
(
event
)
;
}
function
removeLanguage
(
event
)
{
let
languageCard
=
event
.
target
.
parentNode
.
parentNode
.
parentNode
;
event
.
target
.
parentNode
.
remove
(
)
;
if
(
languageCard
.
children
[
1
]
.
childElementCount
=
=
=
0
)
{
languageCard
.
remove
(
)
;
}
}
function
installLanguage
(
event
)
{
event
.
target
.
classList
.
remove
(
"
translations
-
settings
-
download
-
icon
"
)
;
event
.
target
.
classList
.
add
(
"
translations
-
settings
-
delete
-
icon
"
)
;
event
.
target
.
removeEventListener
(
"
click
"
installLanguage
)
;
event
.
target
.
addEventListener
(
"
click
"
unInstallLanguage
)
;
}
function
unInstallLanguage
(
event
)
{
event
.
target
.
classList
.
remove
(
"
translations
-
settings
-
delete
-
icon
"
)
;
event
.
target
.
classList
.
add
(
"
translations
-
settings
-
download
-
icon
"
)
;
event
.
target
.
removeEventListener
(
"
click
"
unInstallLanguage
)
;
event
.
target
.
addEventListener
(
"
click
"
installLanguage
)
;
}
