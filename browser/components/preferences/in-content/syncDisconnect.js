ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SyncDisconnect
:
"
resource
:
/
/
services
-
sync
/
SyncDisconnect
.
jsm
"
}
)
;
let
gSyncDisconnectDialog
=
{
init
(
)
{
if
(
SyncDisconnect
.
promiseDisconnectFinished
)
{
this
.
waitForCompletion
(
SyncDisconnect
.
promiseDisconnectFinished
)
;
}
}
onDeleteOptionChange
(
)
{
let
eitherChecked
=
document
.
getElementById
(
"
deleteRemoteSyncData
"
)
.
checked
|
|
document
.
getElementById
(
"
deleteRemoteOtherData
"
)
.
checked
;
let
newTitle
=
eitherChecked
?
"
sync
-
disconnect
-
confirm
-
disconnect
-
delete
"
:
"
sync
-
disconnect
-
confirm
-
disconnect
"
;
let
butDisconnect
=
document
.
getElementById
(
"
butDisconnect
"
)
;
document
.
l10n
.
setAttributes
(
butDisconnect
newTitle
)
;
}
accept
(
event
)
{
let
options
=
{
sanitizeSyncData
:
document
.
getElementById
(
"
deleteRemoteSyncData
"
)
.
checked
sanitizeBrowserData
:
document
.
getElementById
(
"
deleteRemoteOtherData
"
)
.
checked
}
;
this
.
waitForCompletion
(
SyncDisconnect
.
disconnect
(
options
)
)
;
}
waitForCompletion
(
promiseComplete
)
{
document
.
getElementById
(
"
deleteOptionsContent
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
deletingContent
"
)
.
hidden
=
false
;
promiseComplete
.
catch
(
ex
=
>
{
console
.
error
(
"
Failed
to
sanitize
"
ex
)
;
}
)
.
then
(
(
)
=
>
{
let
closingEvent
=
new
CustomEvent
(
"
dialogclosing
"
{
bubbles
:
true
detail
:
{
button
:
"
accept
"
}
}
)
;
document
.
documentElement
.
dispatchEvent
(
closingEvent
)
;
close
(
)
;
}
)
;
}
}
;
