XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
var
gSecurityPane
=
{
_pane
:
null
init
:
function
(
)
{
function
setEventListener
(
aId
aEventType
aCallback
)
{
document
.
getElementById
(
aId
)
.
addEventListener
(
aEventType
aCallback
.
bind
(
gSecurityPane
)
)
;
}
this
.
_pane
=
document
.
getElementById
(
"
paneSecurity
"
)
;
this
.
_initMasterPasswordUI
(
)
;
this
.
_initSafeBrowsing
(
)
;
setEventListener
(
"
addonExceptions
"
"
command
"
gSecurityPane
.
showAddonExceptions
)
;
setEventListener
(
"
passwordExceptions
"
"
command
"
gSecurityPane
.
showPasswordExceptions
)
;
setEventListener
(
"
useMasterPassword
"
"
command
"
gSecurityPane
.
updateMasterPasswordButton
)
;
setEventListener
(
"
changeMasterPassword
"
"
command
"
gSecurityPane
.
changeMasterPassword
)
;
setEventListener
(
"
showPasswords
"
"
command
"
gSecurityPane
.
showPasswords
)
;
}
readWarnAddonInstall
:
function
(
)
{
var
warn
=
document
.
getElementById
(
"
xpinstall
.
whitelist
.
required
"
)
;
var
exceptions
=
document
.
getElementById
(
"
addonExceptions
"
)
;
exceptions
.
disabled
=
!
warn
.
value
;
return
undefined
;
}
showAddonExceptions
:
function
(
)
{
var
bundlePrefs
=
document
.
getElementById
(
"
bundlePreferences
"
)
;
var
params
=
this
.
_addonParams
;
if
(
!
params
.
windowTitle
|
|
!
params
.
introText
)
{
params
.
windowTitle
=
bundlePrefs
.
getString
(
"
addons_permissions_title
"
)
;
params
.
introText
=
bundlePrefs
.
getString
(
"
addonspermissionstext
"
)
;
}
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
null
params
)
;
}
_addonParams
:
{
blockVisible
:
false
sessionVisible
:
false
allowVisible
:
true
prefilledHost
:
"
"
permissionType
:
"
install
"
}
readSavePasswords
:
function
(
)
{
var
pref
=
document
.
getElementById
(
"
signon
.
rememberSignons
"
)
;
var
excepts
=
document
.
getElementById
(
"
passwordExceptions
"
)
;
if
(
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
document
.
getElementById
(
"
savePasswords
"
)
.
disabled
=
true
;
excepts
.
disabled
=
true
;
return
false
;
}
else
{
excepts
.
disabled
=
!
pref
.
value
;
return
undefined
;
}
}
showPasswordExceptions
:
function
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
passwordmgr
/
content
/
passwordManagerExceptions
.
xul
"
)
;
}
_initMasterPasswordUI
:
function
(
)
{
var
noMP
=
!
LoginHelper
.
isMasterPasswordSet
(
)
;
var
button
=
document
.
getElementById
(
"
changeMasterPassword
"
)
;
button
.
disabled
=
noMP
;
var
checkbox
=
document
.
getElementById
(
"
useMasterPassword
"
)
;
checkbox
.
checked
=
!
noMP
;
}
_initSafeBrowsing
(
)
{
let
enableSafeBrowsing
=
document
.
getElementById
(
"
enableSafeBrowsing
"
)
;
let
blockDownloads
=
document
.
getElementById
(
"
blockDownloads
"
)
;
let
blockUncommonUnwanted
=
document
.
getElementById
(
"
blockUncommonUnwanted
"
)
;
let
safeBrowsingPhishingPref
=
document
.
getElementById
(
"
browser
.
safebrowsing
.
enabled
"
)
;
let
safeBrowsingMalwarePref
=
document
.
getElementById
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
)
;
let
blockDownloadsPref
=
document
.
getElementById
(
"
browser
.
safebrowsing
.
downloads
.
enabled
"
)
;
let
malwareTable
=
document
.
getElementById
(
"
urlclassifier
.
malwareTable
"
)
;
let
blockUnwantedPref
=
document
.
getElementById
(
"
browser
.
safebrowsing
.
downloads
.
remote
.
block_potentially_unwanted
"
)
;
let
blockUncommonPref
=
document
.
getElementById
(
"
browser
.
safebrowsing
.
downloads
.
remote
.
block_uncommon
"
)
;
enableSafeBrowsing
.
addEventListener
(
"
command
"
function
(
)
{
safeBrowsingPhishingPref
.
value
=
enableSafeBrowsing
.
checked
;
safeBrowsingMalwarePref
.
value
=
enableSafeBrowsing
.
checked
;
if
(
enableSafeBrowsing
.
checked
)
{
blockDownloads
.
removeAttribute
(
"
disabled
"
)
;
if
(
blockDownloads
.
checked
)
{
blockUncommonUnwanted
.
removeAttribute
(
"
disabled
"
)
;
}
}
else
{
blockDownloads
.
setAttribute
(
"
disabled
"
"
true
"
)
;
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
)
;
blockDownloads
.
addEventListener
(
"
command
"
function
(
)
{
blockDownloadsPref
.
value
=
blockDownloads
.
checked
;
if
(
blockDownloads
.
checked
)
{
blockUncommonUnwanted
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
)
;
blockUncommonUnwanted
.
addEventListener
(
"
command
"
function
(
)
{
blockUnwantedPref
.
value
=
blockUncommonUnwanted
.
checked
;
blockUncommonPref
.
value
=
blockUncommonUnwanted
.
checked
;
let
malware
=
malwareTable
.
value
.
split
(
"
"
)
.
filter
(
x
=
>
x
!
=
=
"
goog
-
unwanted
-
shavar
"
&
&
x
!
=
=
"
test
-
unwanted
-
simple
"
)
;
if
(
blockUncommonUnwanted
.
checked
)
{
malware
.
push
(
"
goog
-
unwanted
-
shavar
"
)
;
malware
.
push
(
"
test
-
unwanted
-
simple
"
)
;
}
malware
.
sort
(
)
;
malwareTable
.
value
=
malware
.
join
(
"
"
)
;
}
)
;
enableSafeBrowsing
.
checked
=
safeBrowsingPhishingPref
.
value
&
&
safeBrowsingMalwarePref
.
value
;
if
(
!
enableSafeBrowsing
.
checked
)
{
blockDownloads
.
setAttribute
(
"
disabled
"
"
true
"
)
;
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
blockDownloads
.
checked
=
blockDownloadsPref
.
value
;
if
(
!
blockDownloadsPref
.
value
)
{
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
blockUncommonUnwanted
.
checked
=
blockUnwantedPref
.
value
&
&
blockUncommonPref
.
value
;
}
updateMasterPasswordButton
:
function
(
)
{
var
checkbox
=
document
.
getElementById
(
"
useMasterPassword
"
)
;
var
button
=
document
.
getElementById
(
"
changeMasterPassword
"
)
;
button
.
disabled
=
!
checkbox
.
checked
;
if
(
!
checkbox
.
checked
)
this
.
_removeMasterPassword
(
)
;
else
this
.
changeMasterPassword
(
)
;
this
.
_initMasterPasswordUI
(
)
;
}
_removeMasterPassword
:
function
(
)
{
var
secmodDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
if
(
secmodDB
.
isFIPSEnabled
)
{
var
promptService
=
Cc
[
"
mozilla
.
org
/
embedcomp
/
prompt
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPromptService
)
;
var
bundle
=
document
.
getElementById
(
"
bundlePreferences
"
)
;
promptService
.
alert
(
window
bundle
.
getString
(
"
pw_change_failed_title
"
)
bundle
.
getString
(
"
pw_change2empty_in_fips_mode
"
)
)
;
this
.
_initMasterPasswordUI
(
)
;
}
else
{
gSubDialog
.
open
(
"
chrome
:
/
/
mozapps
/
content
/
preferences
/
removemp
.
xul
"
null
null
this
.
_initMasterPasswordUI
.
bind
(
this
)
)
;
}
}
changeMasterPassword
:
function
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
mozapps
/
content
/
preferences
/
changemp
.
xul
"
"
resizable
=
no
"
null
this
.
_initMasterPasswordUI
.
bind
(
this
)
)
;
}
showPasswords
:
function
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
passwordmgr
/
content
/
passwordManager
.
xul
"
)
;
}
}
;
