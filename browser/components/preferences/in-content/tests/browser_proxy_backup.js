var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
let
oldNetworkProxyType
=
Services
.
prefs
.
getIntPref
(
"
network
.
proxy
.
type
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
oldNetworkProxyType
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
preferences
.
instantApply
"
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
share_proxy_settings
"
)
;
for
(
let
proxyType
of
[
"
http
"
"
ssl
"
"
ftp
"
"
socks
"
]
)
{
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
"
+
proxyType
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
"
+
proxyType
+
"
_port
"
)
;
if
(
proxyType
=
=
"
http
"
)
{
continue
;
}
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
backup
.
"
+
proxyType
)
;
Services
.
prefs
.
clearUserPref
(
"
network
.
proxy
.
backup
.
"
+
proxyType
+
"
_port
"
)
;
}
}
)
;
let
connectionURL
=
"
chrome
:
/
/
browser
/
content
/
preferences
/
connection
.
xhtml
"
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
1
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
proxy
.
share_proxy_settings
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
proxy
.
http
"
"
example
.
com
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
http_port
"
1200
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
proxy
.
ssl
"
"
example
.
com
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
ssl_port
"
1200
)
;
Services
.
prefs
.
setCharPref
(
"
network
.
proxy
.
backup
.
ssl
"
"
127
.
0
.
0
.
1
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
backup
.
ssl_port
"
9050
)
;
open_preferences
(
async
function
tabOpened
(
aContentWindow
)
{
is
(
gBrowser
.
currentURI
.
spec
"
about
:
preferences
"
"
about
:
preferences
loaded
"
)
;
let
dialog
=
await
openAndLoadSubDialog
(
connectionURL
)
;
let
dialogElement
=
dialog
.
document
.
getElementById
(
"
ConnectionsDialog
"
)
;
let
dialogClosingPromise
=
BrowserTestUtils
.
waitForEvent
(
dialogElement
"
dialogclosing
"
)
;
ok
(
dialog
"
connection
window
opened
"
)
;
dialogElement
.
acceptDialog
(
)
;
let
dialogClosingEvent
=
await
dialogClosingPromise
;
ok
(
dialogClosingEvent
"
connection
window
closed
"
)
;
is
(
Services
.
prefs
.
getCharPref
(
"
network
.
proxy
.
backup
.
ssl
"
)
"
127
.
0
.
0
.
1
"
"
Shared
proxy
backup
shouldn
'
t
be
replaced
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
network
.
proxy
.
backup
.
ssl_port
"
)
9050
"
Shared
proxy
port
backup
shouldn
'
t
be
replaced
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
finish
(
)
;
}
)
;
}
