var
win
;
var
feedItem
;
var
container
;
SimpleTest
.
requestCompleteLog
(
)
;
add_task
(
function
*
setup
(
)
{
yield
openPreferencesViaOpenPreferencesAPI
(
"
applications
"
null
{
leaveOpen
:
true
}
)
;
info
(
"
Preferences
page
opened
on
the
applications
pane
.
"
)
;
registerCleanupFunction
(
(
)
=
>
{
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
}
)
;
add_task
(
function
*
getFeedItem
(
)
{
win
=
gBrowser
.
selectedBrowser
.
contentWindow
;
container
=
win
.
document
.
getElementById
(
"
handlersView
"
)
;
feedItem
=
container
.
querySelector
(
"
richlistitem
[
type
=
'
application
/
vnd
.
mozilla
.
maybe
.
feed
'
]
"
)
;
Assert
.
ok
(
feedItem
"
feedItem
is
present
in
handlersView
.
"
)
;
}
)
add_task
(
function
*
selectInternalOptionForFeed
(
)
{
feedItem
.
scrollIntoView
(
)
;
container
.
selectItem
(
feedItem
)
;
Assert
.
ok
(
feedItem
.
selected
"
Should
be
able
to
select
our
item
.
"
)
;
let
list
=
yield
waitForCondition
(
(
)
=
>
win
.
document
.
getAnonymousElementByAttribute
(
feedItem
"
class
"
"
actionsMenu
"
)
)
;
info
(
"
Got
list
after
item
was
selected
"
)
;
let
chooseItems
=
list
.
getElementsByAttribute
(
"
action
"
Ci
.
nsIHandlerInfo
.
handleInternally
)
;
Assert
.
equal
(
chooseItems
.
length
1
"
Should
only
be
one
action
to
handle
internally
"
)
;
let
cmdEvent
=
win
.
document
.
createEvent
(
"
xulcommandevent
"
)
;
cmdEvent
.
initCommandEvent
(
"
command
"
true
true
win
0
false
false
false
false
null
)
;
chooseItems
[
0
]
.
dispatchEvent
(
cmdEvent
)
;
list
=
yield
waitForCondition
(
(
)
=
>
win
.
document
.
getAnonymousElementByAttribute
(
feedItem
"
class
"
"
actionsMenu
"
)
)
;
info
(
"
Got
list
after
item
was
selected
"
)
;
Assert
.
ok
(
list
.
selectedItem
"
Should
have
a
selected
item
.
"
)
;
Assert
.
equal
(
list
.
selectedItem
.
getAttribute
(
"
action
"
)
Ci
.
nsIHandlerInfo
.
handleInternally
"
Newly
selected
item
should
be
the
expected
one
.
"
)
;
}
)
;
add_task
(
function
*
reselectInternalOptionForFeed
(
)
{
let
anotherItem
=
container
.
getItemAtIndex
(
0
)
;
Assert
.
notEqual
(
anotherItem
feedItem
"
This
test
doesn
'
t
expect
the
feed
item
to
be
first
.
"
)
;
container
.
selectItem
(
anotherItem
)
;
yield
waitForCondition
(
(
)
=
>
win
.
document
.
getAnonymousElementByAttribute
(
anotherItem
"
class
"
"
actionsMenu
"
)
)
;
info
(
"
Got
list
after
item
was
selected
"
)
;
container
.
selectItem
(
feedItem
)
;
let
list
=
yield
waitForCondition
(
(
)
=
>
win
.
document
.
getAnonymousElementByAttribute
(
feedItem
"
class
"
"
actionsMenu
"
)
)
;
info
(
"
Got
list
after
item
was
selected
"
)
;
Assert
.
ok
(
list
.
selectedItem
"
Should
have
a
selected
item
"
)
;
Assert
.
equal
(
list
.
selectedItem
.
getAttribute
(
"
action
"
)
Ci
.
nsIHandlerInfo
.
handleInternally
"
Selected
item
should
still
be
the
same
as
the
previously
selected
item
.
"
)
;
}
)
;
