"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CloudStorage
"
"
resource
:
/
/
gre
/
modules
/
CloudStorage
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
const
DROPBOX_DOWNLOAD_FOLDER
=
"
Dropbox
"
;
const
CLOUD_SERVICES_PREF
=
"
cloud
.
services
.
"
;
function
create_subdir
(
dir
subdirname
)
{
let
subdir
=
dir
.
clone
(
)
;
subdir
.
append
(
subdirname
)
;
if
(
subdir
.
exists
(
)
)
{
subdir
.
remove
(
true
)
;
}
subdir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
return
subdir
;
}
function
registerFakePath
(
key
folderName
)
{
let
dirsvc
=
Services
.
dirsvc
.
QueryInterface
(
Ci
.
nsIProperties
)
;
let
profD
=
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
let
file
=
create_subdir
(
profD
folderName
)
;
let
originalFile
;
try
{
originalFile
=
dirsvc
.
get
(
key
Ci
.
nsIFile
)
;
dirsvc
.
undefine
(
key
)
;
}
catch
(
e
)
{
originalFile
=
undefined
;
}
dirsvc
.
set
(
key
file
)
;
registerCleanupFunction
(
(
)
=
>
{
dirsvc
.
undefine
(
key
)
;
if
(
originalFile
)
{
dirsvc
.
set
(
key
originalFile
)
;
}
}
)
;
}
async
function
mock_dropbox
(
)
{
let
downloadFolder
=
FileUtils
.
getFile
(
"
Home
"
[
DROPBOX_DOWNLOAD_FOLDER
"
Downloads
"
]
)
;
if
(
!
downloadFolder
.
exists
(
)
)
{
downloadFolder
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
}
console
.
log
(
downloadFolder
.
path
)
;
registerCleanupFunction
(
(
)
=
>
{
if
(
downloadFolder
.
exists
(
)
)
{
downloadFolder
.
remove
(
true
)
;
}
}
)
;
}
add_task
(
async
function
setup
(
)
{
let
folderName
=
"
CloudStorage
"
;
registerFakePath
(
"
Home
"
folderName
)
;
await
mock_dropbox
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CLOUD_SERVICES_PREF
+
"
api
.
enabled
"
true
]
[
CLOUD_SERVICES_PREF
+
"
storage
.
key
"
"
Dropbox
"
]
]
}
)
;
}
)
;
add_task
(
async
function
test_initProvider
(
)
{
let
preferredProvider
=
await
CloudStorage
.
getPreferredProvider
(
)
;
is
(
preferredProvider
"
Dropbox
"
"
Cloud
Storage
preferred
provider
key
"
)
;
let
isInitialized
=
await
CloudStorage
.
init
(
)
;
is
(
isInitialized
true
"
Providers
Metadata
successfully
initialized
"
)
;
let
providerDisplayName
=
await
CloudStorage
.
getProviderIfInUse
(
)
;
is
(
providerDisplayName
"
Dropbox
"
"
Cloud
Storage
preferred
provider
display
name
"
)
;
}
)
;
add_task
(
async
function
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
general
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
let
saveWhereOptions
=
doc
.
getElementById
(
"
saveWhere
"
)
;
let
saveToCloud
=
doc
.
getElementById
(
"
saveToCloud
"
)
;
is
(
saveWhereOptions
.
itemCount
3
"
Radio
options
count
"
)
;
is_element_visible
(
saveToCloud
"
Save
to
Dropbox
option
is
visible
"
)
;
let
saveTo
=
doc
.
getElementById
(
"
saveTo
"
)
;
ok
(
saveTo
.
selected
"
Ensure
first
option
is
selected
by
default
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
browser
.
download
.
folderList
"
)
1
"
Set
to
system
downloadsfolder
as
the
default
download
location
"
)
;
let
downloadFolder
=
doc
.
getElementById
(
"
downloadFolder
"
)
;
let
chooseFolder
=
doc
.
getElementById
(
"
chooseFolder
"
)
;
is
(
downloadFolder
.
disabled
false
"
downloadFolder
filefield
is
enabled
"
)
;
is
(
chooseFolder
.
disabled
false
"
chooseFolder
button
is
enabled
"
)
;
saveToCloud
.
click
(
)
;
is
(
Services
.
prefs
.
getIntPref
(
"
browser
.
download
.
folderList
"
)
3
"
Default
download
location
is
elsewhere
as
specified
by
cloud
storage
API
"
)
;
is
(
downloadFolder
.
disabled
true
"
downloadFolder
filefield
is
disabled
"
)
;
is
(
chooseFolder
.
disabled
true
"
chooseFolder
button
is
disabled
"
)
;
saveTo
.
click
(
)
;
is
(
downloadFolder
.
disabled
false
"
downloadFolder
filefield
is
enabled
"
)
;
is
(
chooseFolder
.
disabled
false
"
chooseFolder
button
is
enabled
"
)
;
let
alwaysAsk
=
doc
.
getElementById
(
"
alwaysAsk
"
)
;
saveToCloud
.
click
(
)
;
alwaysAsk
.
click
(
)
;
is
(
downloadFolder
.
disabled
true
"
downloadFolder
filefield
is
disabled
"
)
;
is
(
chooseFolder
.
disabled
true
"
chooseFolder
button
is
disabled
"
)
;
saveTo
.
click
(
)
;
ok
(
saveTo
.
selected
"
Reset
back
first
option
as
selected
by
default
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
