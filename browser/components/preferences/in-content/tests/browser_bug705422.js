function
test
(
)
{
waitForExplicitFinish
(
)
;
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
network
.
cookie
.
cookieBehavior
"
0
]
]
}
initTest
)
;
}
function
initTest
(
)
{
const
searchTerm
=
"
example
"
;
const
dummyTerm
=
"
elpmaxe
"
;
Services
.
cookies
.
removeAll
(
)
;
var
vals
=
[
[
searchTerm
+
"
.
com
"
dummyTerm
dummyTerm
]
[
searchTerm
+
"
.
org
"
dummyTerm
dummyTerm
]
[
dummyTerm
+
"
.
com
"
searchTerm
dummyTerm
]
[
dummyTerm
+
"
.
edu
"
searchTerm
+
dummyTerm
dummyTerm
]
[
dummyTerm
+
"
.
net
"
dummyTerm
searchTerm
]
[
dummyTerm
+
"
.
org
"
dummyTerm
searchTerm
+
dummyTerm
]
[
dummyTerm
+
"
.
int
"
dummyTerm
dummyTerm
]
]
;
const
matches
=
6
;
var
cookieSvc
=
Components
.
classes
[
"
mozilla
.
org
/
cookieService
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsICookieService
)
;
var
v
;
for
(
v
in
vals
)
{
let
[
host
name
value
]
=
vals
[
v
]
;
var
cookieUri
=
Services
.
io
.
newURI
(
"
http
:
/
/
"
+
host
)
;
cookieSvc
.
setCookieString
(
cookieUri
null
name
+
"
=
"
+
value
+
"
;
"
null
)
;
}
var
cmd
=
window
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
cookies
.
xul
"
"
Browser
:
Cookies
"
"
"
{
}
)
;
cmd
.
addEventListener
(
"
load
"
function
(
)
{
executeSoon
(
function
(
)
{
runTest
(
cmd
searchTerm
vals
.
length
matches
)
;
}
)
;
}
)
;
}
function
isDisabled
(
win
expectation
)
{
var
disabled
=
win
.
document
.
getElementById
(
"
removeAllCookies
"
)
.
disabled
;
is
(
disabled
expectation
"
Remove
all
cookies
button
has
correct
state
:
"
+
(
expectation
?
"
disabled
"
:
"
enabled
"
)
)
;
}
function
runTest
(
win
searchTerm
cookies
matches
)
{
var
injectedCookies
=
0
injectedEnumerator
=
Services
.
cookies
.
enumerator
;
while
(
injectedEnumerator
.
hasMoreElements
(
)
)
{
injectedCookies
+
+
;
injectedEnumerator
.
getNext
(
)
;
}
is
(
injectedCookies
cookies
"
Number
of
cookies
match
injected
cookies
"
)
;
isDisabled
(
win
false
)
;
win
.
gCookiesWindow
.
setFilter
(
searchTerm
)
;
is
(
win
.
gCookiesWindow
.
_view
.
rowCount
matches
"
Correct
number
of
cookies
shown
after
filter
is
applied
"
)
;
isDisabled
(
win
false
)
;
var
tree
=
win
.
document
.
getElementById
(
"
cookiesList
"
)
;
var
deleteButton
=
win
.
document
.
getElementById
(
"
removeSelectedCookies
"
)
;
var
rect
=
tree
.
treeBoxObject
.
getCoordsForCellItem
(
0
tree
.
columns
[
0
]
"
cell
"
)
;
EventUtils
.
synthesizeMouse
(
tree
.
body
rect
.
x
+
rect
.
width
/
2
rect
.
y
+
rect
.
height
/
2
{
}
win
)
;
EventUtils
.
synthesizeMouseAtCenter
(
deleteButton
{
}
win
)
;
is
(
win
.
gCookiesWindow
.
_view
.
rowCount
matches
-
1
"
Deleted
selected
cookie
"
)
;
EventUtils
.
synthesizeMouse
(
tree
.
body
rect
.
x
+
rect
.
width
/
2
rect
.
y
+
rect
.
height
/
2
{
}
win
)
;
var
eventObj
=
{
}
;
if
(
navigator
.
platform
.
includes
(
"
Mac
"
)
)
eventObj
.
metaKey
=
true
;
else
eventObj
.
ctrlKey
=
true
;
rect
=
tree
.
treeBoxObject
.
getCoordsForCellItem
(
1
tree
.
columns
[
0
]
"
cell
"
)
;
EventUtils
.
synthesizeMouse
(
tree
.
body
rect
.
x
+
rect
.
width
/
2
rect
.
y
+
rect
.
height
/
2
eventObj
win
)
;
EventUtils
.
synthesizeMouseAtCenter
(
deleteButton
{
}
win
)
;
is
(
win
.
gCookiesWindow
.
_view
.
rowCount
matches
-
3
"
Deleted
selected
two
adjacent
cookies
"
)
;
isDisabled
(
win
false
)
;
var
deleteAllButton
=
win
.
document
.
getElementById
(
"
removeAllCookies
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
deleteAllButton
{
}
win
)
;
is
(
win
.
gCookiesWindow
.
_view
.
rowCount
0
"
Deleted
all
matching
cookies
"
)
;
isDisabled
(
win
true
)
;
win
.
gCookiesWindow
.
setFilter
(
"
"
)
;
is
(
win
.
gCookiesWindow
.
_view
.
rowCount
cookies
-
matches
"
Unmatched
cookies
remain
"
)
;
isDisabled
(
win
false
)
;
EventUtils
.
synthesizeMouseAtCenter
(
deleteAllButton
{
}
win
)
;
is
(
win
.
gCookiesWindow
.
_view
.
rowCount
0
"
Deleted
all
cookies
"
)
;
var
remainingCookies
=
0
remainingEnumerator
=
Services
.
cookies
.
enumerator
;
while
(
remainingEnumerator
.
hasMoreElements
(
)
)
{
remainingCookies
+
+
;
remainingEnumerator
.
getNext
(
)
;
}
is
(
remainingCookies
0
"
Zero
cookies
remain
"
)
;
isDisabled
(
win
true
)
;
win
.
close
(
)
;
finish
(
)
;
}
