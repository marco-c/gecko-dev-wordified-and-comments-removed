"
use
strict
"
;
var
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
function
createTemporarySaveDirectory
(
)
{
var
saveDir
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
saveDir
.
append
(
"
testsavedir
"
)
;
if
(
!
saveDir
.
exists
(
)
)
{
info
(
"
create
testsavedir
!
"
)
;
saveDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
}
info
(
"
return
from
createTempSaveDir
:
"
+
saveDir
.
path
)
;
return
saveDir
;
}
add_task
(
async
function
checkCertExportWorks
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
certButton
=
gBrowser
.
selectedBrowser
.
contentDocument
.
getElementById
(
"
viewCertificatesButton
"
)
;
certButton
.
scrollIntoView
(
)
;
let
certDialogLoaded
=
promiseLoadSubDialog
(
"
chrome
:
/
/
pippki
/
content
/
certManager
.
xul
"
)
;
certButton
.
click
(
)
;
let
dialogWin
=
await
certDialogLoaded
;
let
doc
=
dialogWin
.
document
;
doc
.
getElementById
(
"
certmanagertabs
"
)
.
selectedTab
=
doc
.
getElementById
(
"
ca_tab
"
)
;
let
expectedCert
;
let
treeView
=
doc
.
getElementById
(
"
ca
-
tree
"
)
.
treeBoxObject
.
view
;
for
(
let
i
=
0
;
i
<
treeView
.
rowCount
;
i
+
+
)
{
treeView
.
selection
.
select
(
i
)
;
dialogWin
.
getSelectedCerts
(
)
;
let
certs
=
dialogWin
.
selected_certs
;
if
(
certs
&
&
certs
.
length
=
=
1
&
&
certs
[
0
]
)
{
expectedCert
=
certs
[
0
]
;
break
;
}
}
let
exportButton
=
doc
.
getElementById
(
"
ca_exportButton
"
)
;
is
(
exportButton
.
disabled
false
"
Should
enable
export
button
"
)
;
MockFilePicker
.
init
(
dialogWin
)
;
MockFilePicker
.
displayDirectory
=
destDir
;
var
destDir
=
createTemporarySaveDirectory
(
)
;
registerCleanupFunction
(
(
)
=
>
{
destDir
.
remove
(
true
)
;
}
)
;
var
destFile
=
destDir
.
clone
(
)
;
MockFilePicker
.
showCallback
=
function
(
fp
)
{
info
(
"
showCallback
"
)
;
let
fileName
=
fp
.
defaultString
;
info
(
"
fileName
:
"
+
fileName
)
;
destFile
.
append
(
fileName
)
;
MockFilePicker
.
setFiles
(
[
destFile
]
)
;
MockFilePicker
.
filterIndex
=
0
;
info
(
"
done
showCallback
"
)
;
}
;
let
finishedExporting
=
TestUtils
.
topicObserved
(
"
cert
-
export
-
finished
"
)
;
exportButton
.
click
(
)
;
await
finishedExporting
;
if
(
destFile
&
&
destFile
.
exists
(
)
)
{
let
contents
=
await
OS
.
File
.
read
(
destFile
.
path
{
encoding
:
"
utf
-
8
"
}
)
;
is
(
contents
dialogWin
.
getPEMString
(
expectedCert
)
"
Should
have
written
correct
contents
"
)
;
}
else
{
ok
(
false
"
No
cert
saved
!
"
)
;
}
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
