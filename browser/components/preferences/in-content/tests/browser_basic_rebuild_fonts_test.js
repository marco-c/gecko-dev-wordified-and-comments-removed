Services
.
prefs
.
setBoolPref
(
"
browser
.
preferences
.
instantApply
"
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
preferences
.
instantApply
"
)
;
}
)
;
add_task
(
async
function
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
general
"
{
leaveOpen
:
true
}
)
;
await
gBrowser
.
contentWindow
.
gMainPane
.
_selectDefaultLanguageGroupPromise
;
let
doc
=
gBrowser
.
contentDocument
;
let
contentWindow
=
gBrowser
.
contentWindow
;
var
langGroup
=
Services
.
prefs
.
getComplexValue
(
"
font
.
language
.
group
"
Ci
.
nsIPrefLocalizedString
)
.
data
;
is
(
contentWindow
.
Preferences
.
get
(
"
font
.
language
.
group
"
)
.
value
langGroup
"
Language
group
should
be
set
correctly
.
"
)
;
let
defaultFontType
=
Services
.
prefs
.
getCharPref
(
"
font
.
default
.
"
+
langGroup
)
;
let
fontFamily
=
Services
.
prefs
.
getCharPref
(
"
font
.
name
.
"
+
defaultFontType
+
"
.
"
+
langGroup
)
;
let
fontFamilyField
=
doc
.
getElementById
(
"
defaultFont
"
)
;
is
(
fontFamilyField
.
value
fontFamily
"
Font
family
should
be
set
correctly
.
"
)
;
let
defaultFontSize
=
Services
.
prefs
.
getIntPref
(
"
font
.
size
.
variable
.
"
+
langGroup
)
;
let
fontSizeField
=
doc
.
getElementById
(
"
defaultFontSize
"
)
;
is
(
fontSizeField
.
value
defaultFontSize
"
Font
size
should
be
set
correctly
.
"
)
;
let
promiseSubDialogLoaded
=
promiseLoadSubDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
fonts
.
xul
"
)
;
doc
.
getElementById
(
"
advancedFonts
"
)
.
click
(
)
;
let
win
=
await
promiseSubDialogLoaded
;
doc
=
win
.
document
;
win
.
FontBuilder
.
_enumerator
=
{
_list
:
[
"
MockedFont1
"
"
MockedFont2
"
"
MockedFont3
"
]
_defaultFont
:
null
EnumerateFontsAsync
(
lang
type
)
{
return
Promise
.
resolve
(
this
.
_list
)
;
}
EnumerateAllFontsAsync
(
)
{
return
Promise
.
resolve
(
this
.
_list
)
;
}
getDefaultFont
(
)
{
return
this
.
_defaultFont
;
}
getStandardFamilyName
(
name
)
{
return
name
;
}
}
;
win
.
FontBuilder
.
_allFonts
=
null
;
win
.
FontBuilder
.
_langGroupSupported
=
false
;
let
langGroupElement
=
win
.
Preferences
.
get
(
"
font
.
language
.
group
"
)
;
let
selectLangsField
=
doc
.
getElementById
(
"
selectLangs
"
)
;
let
serifField
=
doc
.
getElementById
(
"
serif
"
)
;
let
armenian
=
"
x
-
armn
"
;
let
western
=
"
x
-
western
"
;
function
fontListsRebuilt
(
)
{
return
win
.
gFontsDialog
.
_selectLanguageGroupPromise
;
}
langGroupElement
.
value
=
armenian
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
armenian
;
is
(
serifField
.
value
"
"
"
Font
family
should
not
be
set
.
"
)
;
let
armenianSerifElement
=
win
.
Preferences
.
get
(
"
font
.
name
.
serif
.
x
-
armn
"
)
;
langGroupElement
.
value
=
western
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
western
;
win
.
FontBuilder
.
_enumerator
.
_list
=
[
"
MockedFont2
"
]
;
langGroupElement
.
value
=
armenian
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
armenian
;
is
(
serifField
.
value
"
"
"
Font
family
should
still
be
empty
for
indicating
using
'
default
'
font
.
"
)
;
langGroupElement
.
value
=
western
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
western
;
win
.
FontBuilder
.
_enumerator
.
_list
=
[
]
;
langGroupElement
.
value
=
armenian
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
armenian
;
is
(
serifField
.
value
"
"
"
Font
family
should
not
be
set
.
"
)
;
win
.
FontBuilder
.
_enumerator
.
_list
=
[
"
MockedFont1
"
"
MockedFont2
"
"
MockedFont3
"
]
;
win
.
FontBuilder
.
_enumerator
.
_defaultFont
=
"
MockedFont3
"
;
langGroupElement
.
value
=
armenian
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
armenian
;
is
(
serifField
.
value
"
"
"
Font
family
should
be
empty
even
if
there
is
a
default
font
.
"
)
;
armenianSerifElement
.
value
=
"
MockedFont2
"
;
serifField
.
value
=
"
MockedFont2
"
;
is
(
serifField
.
value
"
MockedFont2
"
"
Font
family
should
be
\
"
MockedFont2
\
"
for
now
.
"
)
;
langGroupElement
.
value
=
western
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
western
;
is
(
serifField
.
value
"
"
"
Font
family
of
other
language
should
not
be
set
.
"
)
;
langGroupElement
.
value
=
armenian
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
armenian
;
is
(
serifField
.
value
"
MockedFont2
"
"
Font
family
should
not
be
changed
even
after
switching
the
language
.
"
)
;
win
.
FontBuilder
.
_enumerator
.
_list
=
[
"
MockedFont1
"
"
MockedFont3
"
]
;
win
.
FontBuilder
.
_enumerator
.
_allFonts
=
[
"
MockedFont1
"
"
MockedFont3
"
]
;
serifField
.
removeAllItems
(
)
;
langGroupElement
.
value
=
armenian
;
await
fontListsRebuilt
(
)
;
selectLangsField
.
value
=
armenian
;
is
(
serifField
.
value
"
"
"
Font
family
should
become
empty
due
to
the
font
uninstalled
.
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
