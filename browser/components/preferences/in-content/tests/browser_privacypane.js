add_task
(
async
function
testBrowserErrorInitialValue
(
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
)
{
return
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
chrome
.
errorReporter
.
enabled
"
true
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
-
reports
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
ok
(
doc
.
querySelector
(
"
#
collectBrowserErrorsBox
"
)
.
checked
"
Checkbox
for
collecting
browser
errors
should
be
checked
when
the
pref
is
true
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
testBrowserErrorLearnMore
(
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
)
{
return
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
chrome
.
errorReporter
.
infoURL
"
"
https
:
/
/
example
.
com
/
%
NAME
%
/
"
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
-
reports
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
is
(
doc
.
querySelector
(
"
#
collectBrowserErrorsLearnMore
"
)
.
href
https
:
/
/
example
.
com
/
{
Services
.
appinfo
.
name
}
/
"
Learn
More
link
for
browser
error
collection
should
have
an
href
set
by
a
pref
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
