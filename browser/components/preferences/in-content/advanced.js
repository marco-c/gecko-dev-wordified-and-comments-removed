Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
DownloadUtils
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoadContextInfo
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
gAdvancedPane
=
{
_inited
:
false
init
(
)
{
function
setEventListener
(
aId
aEventType
aCallback
)
{
document
.
getElementById
(
aId
)
.
addEventListener
(
aEventType
aCallback
.
bind
(
gAdvancedPane
)
)
;
}
this
.
_inited
=
true
;
if
(
AppConstants
.
MOZ_UPDATER
)
{
let
onUnload
=
function
(
)
{
window
.
removeEventListener
(
"
unload
"
onUnload
)
;
Services
.
prefs
.
removeObserver
(
"
app
.
update
.
"
this
)
;
}
.
bind
(
this
)
;
window
.
addEventListener
(
"
unload
"
onUnload
)
;
Services
.
prefs
.
addObserver
(
"
app
.
update
.
"
this
false
)
;
this
.
updateReadPrefs
(
)
;
setEventListener
(
"
updateRadioGroup
"
"
command
"
gAdvancedPane
.
updateWritePrefs
)
;
setEventListener
(
"
showUpdateHistory
"
"
command
"
gAdvancedPane
.
showUpdates
)
;
}
this
.
updateOnScreenKeyboardVisibility
(
)
;
setEventListener
(
"
layers
.
acceleration
.
disabled
"
"
change
"
gAdvancedPane
.
updateHardwareAcceleration
)
;
}
_storedSpellCheck
:
0
readCheckSpelling
(
)
{
var
pref
=
document
.
getElementById
(
"
layout
.
spellcheckDefault
"
)
;
this
.
_storedSpellCheck
=
pref
.
value
;
return
(
pref
.
value
!
=
0
)
;
}
writeCheckSpelling
(
)
{
var
checkbox
=
document
.
getElementById
(
"
checkSpelling
"
)
;
if
(
checkbox
.
checked
)
{
if
(
this
.
_storedSpellCheck
=
=
2
)
{
return
2
;
}
return
1
;
}
return
0
;
}
updateHardwareAcceleration
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
var
fromPref
=
document
.
getElementById
(
"
layers
.
acceleration
.
disabled
"
)
;
var
toPref
=
document
.
getElementById
(
"
gfx
.
direct2d
.
disabled
"
)
;
toPref
.
value
=
fromPref
.
value
;
}
}
updateOnScreenKeyboardVisibility
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
let
minVersion
=
Services
.
prefs
.
getBoolPref
(
"
ui
.
osk
.
require_win10
"
)
?
10
:
6
.
2
;
if
(
Services
.
vc
.
compare
(
Services
.
sysinfo
.
getProperty
(
"
version
"
)
minVersion
)
>
=
0
)
{
document
.
getElementById
(
"
useOnScreenKeyboard
"
)
.
hidden
=
false
;
}
}
}
updateReadPrefs
(
)
{
if
(
AppConstants
.
MOZ_UPDATER
)
{
var
enabledPref
=
document
.
getElementById
(
"
app
.
update
.
enabled
"
)
;
var
autoPref
=
document
.
getElementById
(
"
app
.
update
.
auto
"
)
;
var
radiogroup
=
document
.
getElementById
(
"
updateRadioGroup
"
)
;
if
(
!
enabledPref
.
value
)
radiogroup
.
value
=
"
manual
"
;
else
if
(
autoPref
.
value
)
radiogroup
.
value
=
"
auto
"
;
else
radiogroup
.
value
=
"
checkOnly
"
;
var
canCheck
=
Components
.
classes
[
"
mozilla
.
org
/
updates
/
update
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIApplicationUpdateService
)
.
canCheckForUpdates
;
radiogroup
.
disabled
=
!
canCheck
|
|
enabledPref
.
locked
|
|
autoPref
.
locked
;
if
(
AppConstants
.
MOZ_MAINTENANCE_SERVICE
)
{
var
installed
;
try
{
var
wrk
=
Components
.
classes
[
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
]
.
createInstance
(
Components
.
interfaces
.
nsIWindowsRegKey
)
;
wrk
.
open
(
wrk
.
ROOT_KEY_LOCAL_MACHINE
"
SOFTWARE
\
\
Mozilla
\
\
MaintenanceService
"
wrk
.
ACCESS_READ
|
wrk
.
WOW64_64
)
;
installed
=
wrk
.
readIntValue
(
"
Installed
"
)
;
wrk
.
close
(
)
;
}
catch
(
e
)
{
}
if
(
installed
!
=
1
)
{
document
.
getElementById
(
"
useService
"
)
.
hidden
=
true
;
}
}
}
}
updateWritePrefs
(
)
{
if
(
AppConstants
.
MOZ_UPDATER
)
{
var
enabledPref
=
document
.
getElementById
(
"
app
.
update
.
enabled
"
)
;
var
autoPref
=
document
.
getElementById
(
"
app
.
update
.
auto
"
)
;
var
radiogroup
=
document
.
getElementById
(
"
updateRadioGroup
"
)
;
switch
(
radiogroup
.
value
)
{
case
"
auto
"
:
enabledPref
.
value
=
true
;
autoPref
.
value
=
true
;
break
;
case
"
checkOnly
"
:
enabledPref
.
value
=
true
;
autoPref
.
value
=
false
;
break
;
case
"
manual
"
:
enabledPref
.
value
=
false
;
autoPref
.
value
=
false
;
}
}
}
showUpdates
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
mozapps
/
content
/
update
/
history
.
xul
"
)
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
AppConstants
.
MOZ_UPDATER
)
{
switch
(
aTopic
)
{
case
"
nsPref
:
changed
"
:
this
.
updateReadPrefs
(
)
;
break
;
}
}
}
}
;
