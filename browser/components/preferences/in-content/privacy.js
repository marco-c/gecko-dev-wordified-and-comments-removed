var
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DownloadUtils
"
"
resource
:
/
/
gre
/
modules
/
DownloadUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SiteDataManager
"
"
resource
:
/
/
/
modules
/
SiteDataManager
.
jsm
"
)
;
var
{
PrivateBrowsingUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
PREF_UPLOAD_ENABLED
=
"
datareporting
.
healthreport
.
uploadEnabled
"
;
const
TRACKING_PROTECTION_KEY
=
"
websites
.
trackingProtectionMode
"
;
const
TRACKING_PROTECTION_PREFS
=
[
"
privacy
.
trackingprotection
.
enabled
"
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
]
;
const
PREF_OPT_OUT_STUDIES_ENABLED
=
"
app
.
shield
.
optoutstudies
.
enabled
"
;
const
PREF_NORMANDY_ENABLED
=
"
app
.
normandy
.
enabled
"
;
const
PREF_ADDON_RECOMMENDATIONS_ENABLED
=
"
browser
.
discovery
.
enabled
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
AlertsServiceDND
"
function
(
)
{
try
{
let
alertsService
=
Cc
[
"
mozilla
.
org
/
alerts
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAlertsService
)
.
QueryInterface
(
Ci
.
nsIAlertsDoNotDisturb
)
;
alertsService
.
manualDoNotDisturb
;
return
alertsService
;
}
catch
(
ex
)
{
return
undefined
;
}
}
)
;
Preferences
.
addAll
(
[
{
id
:
"
privacy
.
trackingprotection
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
trackingprotection
.
fingerprinting
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
trackingprotection
.
cryptomining
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
pref
.
privacy
.
disable_button
.
cookie_exceptions
"
type
:
"
bool
"
}
{
id
:
"
pref
.
privacy
.
disable_button
.
view_cookies
"
type
:
"
bool
"
}
{
id
:
"
pref
.
privacy
.
disable_button
.
change_blocklist
"
type
:
"
bool
"
}
{
id
:
"
pref
.
privacy
.
disable_button
.
tracking_protection_exceptions
"
type
:
"
bool
"
}
{
id
:
"
browser
.
urlbar
.
suggest
.
bookmark
"
type
:
"
bool
"
}
{
id
:
"
browser
.
urlbar
.
suggest
.
history
"
type
:
"
bool
"
}
{
id
:
"
browser
.
urlbar
.
suggest
.
openpage
"
type
:
"
bool
"
}
{
id
:
"
places
.
history
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
browser
.
formfill
.
enable
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
history
.
custom
"
type
:
"
bool
"
}
{
id
:
"
network
.
cookie
.
cookieBehavior
"
type
:
"
int
"
}
{
id
:
"
network
.
cookie
.
lifetimePolicy
"
type
:
"
int
"
}
{
id
:
"
network
.
cookie
.
blockFutureCookies
"
type
:
"
bool
"
}
{
id
:
"
browser
.
contentblocking
.
category
"
type
:
"
string
"
}
{
id
:
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
sanitize
.
timeSpan
"
type
:
"
int
"
}
{
id
:
"
privacy
.
donottrackheader
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
media
.
autoplay
.
default
"
type
:
"
int
"
}
{
id
:
"
dom
.
disable_open_during_load
"
type
:
"
bool
"
}
{
id
:
"
signon
.
rememberSignons
"
type
:
"
bool
"
}
{
id
:
"
pref
.
privacy
.
disable_button
.
view_passwords
"
type
:
"
bool
"
}
{
id
:
"
pref
.
privacy
.
disable_button
.
view_passwords_exceptions
"
type
:
"
bool
"
}
{
id
:
"
security
.
default_personal_cert
"
type
:
"
string
"
}
{
id
:
"
security
.
disable_button
.
openCertManager
"
type
:
"
bool
"
}
{
id
:
"
security
.
disable_button
.
openDeviceManager
"
type
:
"
bool
"
}
{
id
:
"
security
.
OCSP
.
enabled
"
type
:
"
int
"
}
{
id
:
"
xpinstall
.
whitelist
.
required
"
type
:
"
bool
"
}
{
id
:
"
browser
.
safebrowsing
.
malware
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
browser
.
safebrowsing
.
phishing
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
browser
.
safebrowsing
.
downloads
.
enabled
"
type
:
"
bool
"
}
{
id
:
"
urlclassifier
.
malwareTable
"
type
:
"
string
"
}
{
id
:
"
browser
.
safebrowsing
.
downloads
.
remote
.
block_potentially_unwanted
"
type
:
"
bool
"
}
{
id
:
"
browser
.
safebrowsing
.
downloads
.
remote
.
block_uncommon
"
type
:
"
bool
"
}
]
)
;
if
(
AppConstants
.
MOZ_DATA_REPORTING
)
{
Preferences
.
addAll
(
[
{
id
:
PREF_OPT_OUT_STUDIES_ENABLED
type
:
"
bool
"
}
{
id
:
PREF_ADDON_RECOMMENDATIONS_ENABLED
type
:
"
bool
"
}
{
id
:
PREF_UPLOAD_ENABLED
type
:
"
bool
"
}
]
)
;
}
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
Preferences
.
add
(
{
id
:
"
browser
.
crashReports
.
unsubmittedCheck
.
autoSubmit2
"
type
:
"
bool
"
}
)
;
}
function
setEventListener
(
aId
aEventType
aCallback
)
{
document
.
getElementById
(
aId
)
.
addEventListener
(
aEventType
aCallback
.
bind
(
gPrivacyPane
)
)
;
}
function
dataCollectionCheckboxHandler
(
{
checkbox
pref
matchPref
=
(
)
=
>
true
isDisabled
=
(
)
=
>
false
}
)
{
function
updateCheckbox
(
)
{
let
collectionEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_UPLOAD_ENABLED
false
)
;
if
(
collectionEnabled
&
&
matchPref
(
)
)
{
if
(
Services
.
prefs
.
getBoolPref
(
pref
false
)
)
{
checkbox
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
else
{
checkbox
.
removeAttribute
(
"
checked
"
)
;
}
checkbox
.
setAttribute
(
"
preference
"
pref
)
;
}
else
{
checkbox
.
removeAttribute
(
"
preference
"
)
;
checkbox
.
removeAttribute
(
"
checked
"
)
;
}
if
(
!
collectionEnabled
|
|
Services
.
prefs
.
prefIsLocked
(
pref
)
|
|
isDisabled
(
)
)
{
checkbox
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
checkbox
.
removeAttribute
(
"
disabled
"
)
;
}
}
Preferences
.
get
(
PREF_UPLOAD_ENABLED
)
.
on
(
"
change
"
updateCheckbox
)
;
updateCheckbox
(
)
;
}
var
gPrivacyPane
=
{
_pane
:
null
_shouldPromptForRestart
:
true
_updateTrackingProtectionUI
(
)
{
let
isLocked
=
TRACKING_PROTECTION_PREFS
.
some
(
pref
=
>
Services
.
prefs
.
prefIsLocked
(
pref
)
)
;
function
setInputsDisabledState
(
isControlled
)
{
let
disabled
=
isLocked
|
|
isControlled
;
let
tpCheckbox
=
document
.
getElementById
(
"
contentBlockingTrackingProtectionCheckbox
"
)
;
document
.
getElementById
(
"
trackingProtectionMenu
"
)
.
disabled
=
disabled
|
|
!
tpCheckbox
.
checked
;
tpCheckbox
.
disabled
=
disabled
;
document
.
getElementById
(
"
standardRadio
"
)
.
disabled
=
isControlled
;
document
.
getElementById
(
"
strictRadio
"
)
.
disabled
=
isControlled
;
document
.
getElementById
(
"
contentBlockingOptionStrict
"
)
.
classList
.
toggle
(
"
disabled
"
isControlled
)
;
document
.
getElementById
(
"
contentBlockingOptionStandard
"
)
.
classList
.
toggle
(
"
disabled
"
isControlled
)
;
let
arrowButtons
=
document
.
querySelectorAll
(
"
button
.
arrowhead
"
)
;
for
(
let
button
of
arrowButtons
)
{
button
.
disabled
=
isControlled
;
}
Services
.
obs
.
notifyObservers
(
window
"
privacy
-
pane
-
tp
-
ui
-
updated
"
)
;
}
let
defaults
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
document
.
getElementById
(
"
contentBlockingCategories
"
)
.
toggleAttribute
(
"
fallback
-
ui
"
defaults
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
=
=
=
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
)
;
if
(
isLocked
)
{
hideControllingExtension
(
TRACKING_PROTECTION_KEY
)
;
setInputsDisabledState
(
false
)
;
}
else
{
handleControllingExtension
(
PREF_SETTING_TYPE
TRACKING_PROTECTION_KEY
)
.
then
(
setInputsDisabledState
)
;
}
}
_initTrackingProtectionExtensionControl
(
)
{
setEventListener
(
"
contentBlockingDisableTrackingProtectionExtension
"
"
command
"
makeDisableControllingExtension
(
PREF_SETTING_TYPE
TRACKING_PROTECTION_KEY
)
)
;
let
trackingProtectionObserver
=
{
observe
(
subject
topic
data
)
{
gPrivacyPane
.
_updateTrackingProtectionUI
(
)
;
}
}
;
for
(
let
pref
of
TRACKING_PROTECTION_PREFS
)
{
Services
.
prefs
.
addObserver
(
pref
trackingProtectionObserver
)
;
}
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
for
(
let
pref
of
TRACKING_PROTECTION_PREFS
)
{
Services
.
prefs
.
removeObserver
(
pref
trackingProtectionObserver
)
;
}
}
)
;
}
_initAutocomplete
(
)
{
Cc
[
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
unifiedcomplete
"
]
.
getService
(
Ci
.
mozIPlacesAutoComplete
)
;
}
init
(
)
{
this
.
_updateSanitizeSettingsButton
(
)
;
this
.
initializeHistoryMode
(
)
;
this
.
updateHistoryModePane
(
)
;
this
.
updatePrivacyMicroControls
(
)
;
this
.
initAutoStartPrivateBrowsingReverter
(
)
;
this
.
_initAutocomplete
(
)
;
this
.
initContentBlocking
(
)
;
this
.
blockAutoplayReadPrefs
(
)
;
this
.
trackingProtectionReadPrefs
(
)
;
this
.
networkCookieBehaviorReadPrefs
(
)
;
this
.
_initTrackingProtectionExtensionControl
(
)
;
Preferences
.
get
(
"
media
.
autoplay
.
default
"
)
.
on
(
"
change
"
gPrivacyPane
.
blockAutoplayReadPrefs
.
bind
(
gPrivacyPane
)
)
;
Preferences
.
get
(
"
privacy
.
trackingprotection
.
enabled
"
)
.
on
(
"
change
"
gPrivacyPane
.
trackingProtectionReadPrefs
.
bind
(
gPrivacyPane
)
)
;
Preferences
.
get
(
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
)
.
on
(
"
change
"
gPrivacyPane
.
trackingProtectionReadPrefs
.
bind
(
gPrivacyPane
)
)
;
Preferences
.
get
(
"
network
.
cookie
.
cookieBehavior
"
)
.
on
(
"
change
"
gPrivacyPane
.
networkCookieBehaviorReadPrefs
.
bind
(
gPrivacyPane
)
)
;
Preferences
.
get
(
"
network
.
cookie
.
lifetimePolicy
"
)
.
on
(
"
change
"
gPrivacyPane
.
networkCookieBehaviorReadPrefs
.
bind
(
gPrivacyPane
)
)
;
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
.
on
(
"
change
"
gPrivacyPane
.
networkCookieBehaviorReadPrefs
.
bind
(
gPrivacyPane
)
)
;
setEventListener
(
"
trackingProtectionExceptions
"
"
command
"
gPrivacyPane
.
showTrackingProtectionExceptions
)
;
Preferences
.
get
(
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
)
.
on
(
"
change
"
gPrivacyPane
.
_updateSanitizeSettingsButton
.
bind
(
gPrivacyPane
)
)
;
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
.
on
(
"
change
"
gPrivacyPane
.
updatePrivacyMicroControls
.
bind
(
gPrivacyPane
)
)
;
setEventListener
(
"
historyMode
"
"
command
"
function
(
)
{
gPrivacyPane
.
updateHistoryModePane
(
)
;
gPrivacyPane
.
updateHistoryModePrefs
(
)
;
gPrivacyPane
.
updatePrivacyMicroControls
(
)
;
gPrivacyPane
.
updateAutostart
(
)
;
}
)
;
setEventListener
(
"
clearHistoryButton
"
"
command
"
function
(
)
{
let
historyMode
=
document
.
getElementById
(
"
historyMode
"
)
;
gPrivacyPane
.
clearPrivateDataNow
(
historyMode
.
value
=
=
"
dontremember
"
)
;
}
)
;
setEventListener
(
"
openSearchEnginePreferences
"
"
click
"
function
(
event
)
{
if
(
event
.
button
=
=
0
)
{
gotoPref
(
"
search
"
)
;
}
return
false
;
}
)
;
setEventListener
(
"
privateBrowsingAutoStart
"
"
command
"
gPrivacyPane
.
updateAutostart
)
;
setEventListener
(
"
cookieExceptions
"
"
command
"
gPrivacyPane
.
showCookieExceptions
)
;
setEventListener
(
"
clearDataSettings
"
"
command
"
gPrivacyPane
.
showClearPrivateDataSettings
)
;
setEventListener
(
"
passwordExceptions
"
"
command
"
gPrivacyPane
.
showPasswordExceptions
)
;
setEventListener
(
"
useMasterPassword
"
"
command
"
gPrivacyPane
.
updateMasterPasswordButton
)
;
setEventListener
(
"
changeMasterPassword
"
"
command
"
gPrivacyPane
.
changeMasterPassword
)
;
setEventListener
(
"
showPasswords
"
"
command
"
gPrivacyPane
.
showPasswords
)
;
setEventListener
(
"
addonExceptions
"
"
command
"
gPrivacyPane
.
showAddonExceptions
)
;
setEventListener
(
"
viewCertificatesButton
"
"
command
"
gPrivacyPane
.
showCertificates
)
;
setEventListener
(
"
viewSecurityDevicesButton
"
"
command
"
gPrivacyPane
.
showSecurityDevices
)
;
this
.
_pane
=
document
.
getElementById
(
"
panePrivacy
"
)
;
this
.
_initMasterPasswordUI
(
)
;
this
.
_initSafeBrowsing
(
)
;
setEventListener
(
"
notificationSettingsButton
"
"
command
"
gPrivacyPane
.
showNotificationExceptions
)
;
setEventListener
(
"
locationSettingsButton
"
"
command
"
gPrivacyPane
.
showLocationExceptions
)
;
setEventListener
(
"
cameraSettingsButton
"
"
command
"
gPrivacyPane
.
showCameraExceptions
)
;
setEventListener
(
"
microphoneSettingsButton
"
"
command
"
gPrivacyPane
.
showMicrophoneExceptions
)
;
setEventListener
(
"
popupPolicyButton
"
"
command
"
gPrivacyPane
.
showPopupExceptions
)
;
setEventListener
(
"
autoplayMediaCheckbox
"
"
command
"
gPrivacyPane
.
toggleAutoplayMedia
)
;
setEventListener
(
"
autoplayMediaPolicyButton
"
"
command
"
gPrivacyPane
.
showAutoplayMediaExceptions
)
;
setEventListener
(
"
notificationsDoNotDisturb
"
"
command
"
gPrivacyPane
.
toggleDoNotDisturbNotifications
)
;
if
(
AlertsServiceDND
)
{
let
notificationsDoNotDisturbBox
=
document
.
getElementById
(
"
notificationsDoNotDisturbBox
"
)
;
notificationsDoNotDisturbBox
.
removeAttribute
(
"
hidden
"
)
;
let
checkbox
=
document
.
getElementById
(
"
notificationsDoNotDisturb
"
)
;
document
.
l10n
.
setAttributes
(
checkbox
"
permissions
-
notification
-
pause
"
)
;
if
(
AlertsServiceDND
.
manualDoNotDisturb
)
{
let
notificationsDoNotDisturb
=
document
.
getElementById
(
"
notificationsDoNotDisturb
"
)
;
notificationsDoNotDisturb
.
setAttribute
(
"
checked
"
true
)
;
}
}
this
.
initSiteDataControls
(
)
;
setEventListener
(
"
clearSiteDataButton
"
"
command
"
gPrivacyPane
.
clearSiteData
)
;
setEventListener
(
"
siteDataSettings
"
"
command
"
gPrivacyPane
.
showSiteDataSettings
)
;
let
url
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
storage
-
permissions
"
;
document
.
getElementById
(
"
siteDataLearnMoreLink
"
)
.
setAttribute
(
"
href
"
url
)
;
let
notificationInfoURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
push
"
;
document
.
getElementById
(
"
notificationPermissionsLearnMore
"
)
.
setAttribute
(
"
href
"
notificationInfoURL
)
;
if
(
AppConstants
.
MOZ_DATA_REPORTING
)
{
this
.
initDataCollection
(
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
this
.
initSubmitCrashes
(
)
;
}
this
.
initSubmitHealthReport
(
)
;
setEventListener
(
"
submitHealthReportBox
"
"
command
"
gPrivacyPane
.
updateSubmitHealthReport
)
;
this
.
initOptOutStudyCheckbox
(
)
;
this
.
initAddonRecommendationsCheckbox
(
)
;
}
this
.
_initA11yState
(
)
;
let
signonBundle
=
document
.
getElementById
(
"
signonBundle
"
)
;
let
pkiBundle
=
document
.
getElementById
(
"
pkiBundle
"
)
;
appendSearchKeywords
(
"
showPasswords
"
[
signonBundle
.
getString
(
"
loginsDescriptionAll2
"
)
]
)
;
appendSearchKeywords
(
"
viewSecurityDevicesButton
"
[
pkiBundle
.
getString
(
"
enable_fips
"
)
]
)
;
if
(
!
PrivateBrowsingUtils
.
enabled
)
{
document
.
getElementById
(
"
privateBrowsingAutoStart
"
)
.
hidden
=
true
;
document
.
querySelector
(
"
menuitem
[
value
=
'
dontremember
'
]
"
)
.
hidden
=
true
;
}
Services
.
obs
.
notifyObservers
(
window
"
privacy
-
pane
-
loaded
"
)
;
}
initSiteDataControls
(
)
{
Services
.
obs
.
addObserver
(
this
"
sitedatamanager
:
sites
-
updated
"
)
;
Services
.
obs
.
addObserver
(
this
"
sitedatamanager
:
updating
-
sites
"
)
;
let
unload
=
(
)
=
>
{
window
.
removeEventListener
(
"
unload
"
unload
)
;
Services
.
obs
.
removeObserver
(
this
"
sitedatamanager
:
sites
-
updated
"
)
;
Services
.
obs
.
removeObserver
(
this
"
sitedatamanager
:
updating
-
sites
"
)
;
}
;
window
.
addEventListener
(
"
unload
"
unload
)
;
SiteDataManager
.
updateSites
(
)
;
}
initContentBlocking
(
)
{
setEventListener
(
"
changeBlockListLink
"
"
click
"
this
.
showBlockLists
)
;
setEventListener
(
"
contentBlockingTrackingProtectionCheckbox
"
"
command
"
this
.
trackingProtectionWritePrefs
)
;
setEventListener
(
"
contentBlockingTrackingProtectionCheckbox
"
"
command
"
this
.
_updateTrackingProtectionUI
)
;
setEventListener
(
"
trackingProtectionMenu
"
"
command
"
this
.
trackingProtectionWritePrefs
)
;
setEventListener
(
"
standardArrow
"
"
command
"
this
.
toggleExpansion
)
;
setEventListener
(
"
strictArrow
"
"
command
"
this
.
toggleExpansion
)
;
setEventListener
(
"
customArrow
"
"
command
"
this
.
toggleExpansion
)
;
Preferences
.
get
(
"
network
.
cookie
.
cookieBehavior
"
)
.
on
(
"
change
"
gPrivacyPane
.
readBlockCookies
.
bind
(
gPrivacyPane
)
)
;
Preferences
.
get
(
"
browser
.
contentblocking
.
category
"
)
.
on
(
"
change
"
gPrivacyPane
.
highlightCBCategory
)
;
let
cryptoMinersOption
=
document
.
getElementById
(
"
contentBlockingCryptominersOption
"
)
;
let
fingerprintersOption
=
document
.
getElementById
(
"
contentBlockingFingerprintersOption
"
)
;
cryptoMinersOption
.
hidden
=
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
contentblocking
.
cryptomining
.
preferences
.
ui
.
enabled
"
)
;
fingerprintersOption
.
hidden
=
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
contentblocking
.
fingerprinting
.
preferences
.
ui
.
enabled
"
)
;
this
.
highlightCBCategory
(
)
;
this
.
readBlockCookies
(
)
;
let
link
=
document
.
getElementById
(
"
contentBlockingLearnMore
"
)
;
let
contentBlockingUrl
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
content
-
blocking
"
;
link
.
setAttribute
(
"
href
"
contentBlockingUrl
)
;
let
contentBlockingTour
=
Services
.
urlFormatter
.
formatURLPref
(
"
privacy
.
trackingprotection
.
introURL
"
)
+
?
step
=
3
&
newtab
=
true
;
let
warningLinks
=
document
.
getElementsByClassName
(
"
content
-
blocking
-
warning
-
learn
-
how
"
)
;
for
(
let
warningLink
of
warningLinks
)
{
warningLink
.
setAttribute
(
"
href
"
contentBlockingTour
)
;
}
}
highlightCBCategory
(
)
{
let
value
=
Preferences
.
get
(
"
browser
.
contentblocking
.
category
"
)
.
value
;
let
standardEl
=
document
.
getElementById
(
"
contentBlockingOptionStandard
"
)
;
let
strictEl
=
document
.
getElementById
(
"
contentBlockingOptionStrict
"
)
;
let
customEl
=
document
.
getElementById
(
"
contentBlockingOptionCustom
"
)
;
standardEl
.
classList
.
remove
(
"
selected
"
)
;
strictEl
.
classList
.
remove
(
"
selected
"
)
;
customEl
.
classList
.
remove
(
"
selected
"
)
;
switch
(
value
)
{
case
"
strict
"
:
strictEl
.
classList
.
add
(
"
selected
"
)
;
break
;
case
"
custom
"
:
customEl
.
classList
.
add
(
"
selected
"
)
;
break
;
case
"
standard
"
:
default
:
standardEl
.
classList
.
add
(
"
selected
"
)
;
break
;
}
}
trackingProtectionReadPrefs
(
)
{
let
enabledPref
=
Preferences
.
get
(
"
privacy
.
trackingprotection
.
enabled
"
)
;
let
pbmPref
=
Preferences
.
get
(
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
)
;
let
tpMenu
=
document
.
getElementById
(
"
trackingProtectionMenu
"
)
;
let
tpCheckbox
=
document
.
getElementById
(
"
contentBlockingTrackingProtectionCheckbox
"
)
;
this
.
_updateTrackingProtectionUI
(
)
;
if
(
enabledPref
.
value
)
{
tpMenu
.
value
=
"
always
"
;
tpCheckbox
.
checked
=
true
;
}
else
if
(
pbmPref
.
value
)
{
tpMenu
.
value
=
"
private
"
;
tpCheckbox
.
checked
=
true
;
}
else
{
tpMenu
.
value
=
"
never
"
;
tpCheckbox
.
checked
=
false
;
}
}
networkCookieBehaviorReadPrefs
(
)
{
let
behavior
=
Preferences
.
get
(
"
network
.
cookie
.
cookieBehavior
"
)
.
value
;
let
blockCookiesMenu
=
document
.
getElementById
(
"
blockCookiesMenu
"
)
;
let
deleteOnCloseCheckbox
=
document
.
getElementById
(
"
deleteOnClose
"
)
;
let
deleteOnCloseNote
=
document
.
getElementById
(
"
deleteOnCloseNote
"
)
;
let
blockCookies
=
(
behavior
!
=
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
)
;
let
cookieBehaviorLocked
=
Services
.
prefs
.
prefIsLocked
(
"
network
.
cookie
.
cookieBehavior
"
)
;
let
blockCookiesControlsDisabled
=
!
blockCookies
|
|
cookieBehaviorLocked
;
blockCookiesMenu
.
disabled
=
blockCookiesControlsDisabled
;
let
completelyBlockCookies
=
(
behavior
=
=
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
)
;
let
privateBrowsing
=
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
.
value
;
let
cookieExpirationLocked
=
Services
.
prefs
.
prefIsLocked
(
"
network
.
cookie
.
lifetimePolicy
"
)
;
deleteOnCloseCheckbox
.
disabled
=
privateBrowsing
|
|
completelyBlockCookies
|
|
cookieExpirationLocked
;
deleteOnCloseNote
.
hidden
=
!
privateBrowsing
;
switch
(
behavior
)
{
case
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
:
break
;
case
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
:
blockCookiesMenu
.
value
=
"
all
-
third
-
parties
"
;
break
;
case
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
:
blockCookiesMenu
.
value
=
"
always
"
;
break
;
case
Ci
.
nsICookieService
.
BEHAVIOR_LIMIT_FOREIGN
:
blockCookiesMenu
.
value
=
"
unvisited
"
;
break
;
case
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
:
blockCookiesMenu
.
value
=
"
trackers
"
;
break
;
}
}
trackingProtectionWritePrefs
(
)
{
let
enabledPref
=
Preferences
.
get
(
"
privacy
.
trackingprotection
.
enabled
"
)
;
let
pbmPref
=
Preferences
.
get
(
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
)
;
let
tpMenu
=
document
.
getElementById
(
"
trackingProtectionMenu
"
)
;
let
tpCheckbox
=
document
.
getElementById
(
"
contentBlockingTrackingProtectionCheckbox
"
)
;
let
value
;
if
(
tpCheckbox
.
checked
)
{
if
(
tpMenu
.
value
=
=
"
never
"
)
{
tpMenu
.
value
=
"
private
"
;
}
value
=
tpMenu
.
value
;
}
else
{
tpMenu
.
value
=
"
never
"
;
value
=
"
never
"
;
}
switch
(
value
)
{
case
"
always
"
:
enabledPref
.
value
=
true
;
pbmPref
.
value
=
true
;
break
;
case
"
private
"
:
enabledPref
.
value
=
false
;
pbmPref
.
value
=
true
;
break
;
case
"
never
"
:
enabledPref
.
value
=
false
;
pbmPref
.
value
=
false
;
break
;
}
}
toggleExpansion
(
e
)
{
let
carat
=
e
.
target
;
carat
.
classList
.
toggle
(
"
up
"
)
;
carat
.
closest
(
"
.
content
-
blocking
-
category
"
)
.
classList
.
toggle
(
"
expanded
"
)
;
}
prefsForKeepingHistory
:
{
"
places
.
history
.
enabled
"
:
true
"
browser
.
formfill
.
enable
"
:
true
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
:
false
}
dependentControls
:
[
"
rememberHistory
"
"
rememberForms
"
"
alwaysClear
"
"
clearDataSettings
"
]
_checkHistoryValues
(
aPrefs
)
{
for
(
let
pref
of
Object
.
keys
(
aPrefs
)
)
{
if
(
Preferences
.
get
(
pref
)
.
value
!
=
aPrefs
[
pref
]
)
return
false
;
}
return
true
;
}
initializeHistoryMode
(
)
{
let
mode
;
let
getVal
=
aPref
=
>
Preferences
.
get
(
aPref
)
.
value
;
if
(
getVal
(
"
privacy
.
history
.
custom
"
)
)
mode
=
"
custom
"
;
else
if
(
this
.
_checkHistoryValues
(
this
.
prefsForKeepingHistory
)
)
{
if
(
getVal
(
"
browser
.
privatebrowsing
.
autostart
"
)
)
mode
=
"
dontremember
"
;
else
mode
=
"
remember
"
;
}
else
mode
=
"
custom
"
;
document
.
getElementById
(
"
historyMode
"
)
.
value
=
mode
;
}
updateHistoryModePane
(
)
{
let
selectedIndex
=
-
1
;
switch
(
document
.
getElementById
(
"
historyMode
"
)
.
value
)
{
case
"
remember
"
:
selectedIndex
=
0
;
break
;
case
"
dontremember
"
:
selectedIndex
=
1
;
break
;
case
"
custom
"
:
selectedIndex
=
2
;
break
;
}
document
.
getElementById
(
"
historyPane
"
)
.
selectedIndex
=
selectedIndex
;
Preferences
.
get
(
"
privacy
.
history
.
custom
"
)
.
value
=
selectedIndex
=
=
2
;
}
updateHistoryModePrefs
(
)
{
let
pref
=
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
;
switch
(
document
.
getElementById
(
"
historyMode
"
)
.
value
)
{
case
"
remember
"
:
if
(
pref
.
value
)
pref
.
value
=
false
;
Preferences
.
get
(
"
places
.
history
.
enabled
"
)
.
value
=
true
;
Preferences
.
get
(
"
browser
.
formfill
.
enable
"
)
.
value
=
true
;
Preferences
.
get
(
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
)
.
value
=
false
;
break
;
case
"
dontremember
"
:
if
(
!
pref
.
value
)
pref
.
value
=
true
;
break
;
}
}
updatePrivacyMicroControls
(
)
{
document
.
getElementById
(
"
deleteOnClose
"
)
.
checked
=
this
.
readDeleteOnClose
(
)
;
let
clearDataSettings
=
document
.
getElementById
(
"
clearDataSettings
"
)
;
if
(
document
.
getElementById
(
"
historyMode
"
)
.
value
=
=
"
custom
"
)
{
let
disabled
=
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
.
value
;
this
.
dependentControls
.
forEach
(
aElement
=
>
{
let
control
=
document
.
getElementById
(
aElement
)
;
let
preferenceId
=
control
.
getAttribute
(
"
preference
"
)
;
if
(
!
preferenceId
)
{
let
dependentControlId
=
control
.
getAttribute
(
"
control
"
)
;
if
(
dependentControlId
)
{
let
dependentControl
=
document
.
getElementById
(
dependentControlId
)
;
preferenceId
=
dependentControl
.
getAttribute
(
"
preference
"
)
;
}
}
let
preference
=
preferenceId
?
Preferences
.
get
(
preferenceId
)
:
{
}
;
control
.
disabled
=
disabled
|
|
preference
.
locked
;
if
(
control
!
=
clearDataSettings
)
{
this
.
ensurePrivacyMicroControlUncheckedWhenDisabled
(
control
)
;
}
}
)
;
clearDataSettings
.
removeAttribute
(
"
hidden
"
)
;
if
(
!
disabled
)
{
this
.
_updateSanitizeSettingsButton
(
)
;
}
}
else
{
clearDataSettings
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
}
ensurePrivacyMicroControlUncheckedWhenDisabled
(
el
)
{
if
(
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
.
value
)
{
el
.
checked
=
false
;
return
false
;
}
return
undefined
;
}
showClearPrivateDataSettings
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
sanitize
.
xul
"
"
resizable
=
no
"
)
;
}
clearPrivateDataNow
(
aClearEverything
)
{
var
ts
=
Preferences
.
get
(
"
privacy
.
sanitize
.
timeSpan
"
)
;
var
timeSpanOrig
=
ts
.
value
;
if
(
aClearEverything
)
{
ts
.
value
=
0
;
}
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
sanitize
.
xul
"
"
resizable
=
no
"
null
(
)
=
>
{
if
(
aClearEverything
)
{
ts
.
value
=
timeSpanOrig
;
}
Services
.
obs
.
notifyObservers
(
null
"
clear
-
private
-
data
"
)
;
}
)
;
}
_updateSanitizeSettingsButton
(
)
{
var
settingsButton
=
document
.
getElementById
(
"
clearDataSettings
"
)
;
var
sanitizeOnShutdownPref
=
Preferences
.
get
(
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
)
;
settingsButton
.
disabled
=
!
sanitizeOnShutdownPref
.
value
;
}
toggleDoNotDisturbNotifications
(
event
)
{
AlertsServiceDND
.
manualDoNotDisturb
=
event
.
target
.
checked
;
}
initAutoStartPrivateBrowsingReverter
(
)
{
let
mode
=
document
.
getElementById
(
"
historyMode
"
)
;
let
autoStart
=
document
.
getElementById
(
"
privateBrowsingAutoStart
"
)
;
this
.
_lastMode
=
mode
.
selectedIndex
;
this
.
_lastCheckState
=
autoStart
.
hasAttribute
(
"
checked
"
)
;
}
_lastMode
:
null
_lastCheckState
:
null
async
updateAutostart
(
)
{
let
mode
=
document
.
getElementById
(
"
historyMode
"
)
;
let
autoStart
=
document
.
getElementById
(
"
privateBrowsingAutoStart
"
)
;
let
pref
=
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
;
if
(
(
mode
.
value
=
=
"
custom
"
&
&
this
.
_lastCheckState
=
=
autoStart
.
checked
)
|
|
(
mode
.
value
=
=
"
remember
"
&
&
!
this
.
_lastCheckState
)
|
|
(
mode
.
value
=
=
"
dontremember
"
&
&
this
.
_lastCheckState
)
)
{
this
.
_lastMode
=
mode
.
selectedIndex
;
this
.
_lastCheckState
=
autoStart
.
hasAttribute
(
"
checked
"
)
;
return
;
}
if
(
!
this
.
_shouldPromptForRestart
)
{
return
;
}
let
buttonIndex
=
await
confirmRestartPrompt
(
autoStart
.
checked
1
true
false
)
;
if
(
buttonIndex
=
=
CONFIRM_RESTART_PROMPT_RESTART_NOW
)
{
pref
.
value
=
autoStart
.
hasAttribute
(
"
checked
"
)
;
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
return
;
}
this
.
_shouldPromptForRestart
=
false
;
if
(
this
.
_lastCheckState
)
{
autoStart
.
checked
=
"
checked
"
;
}
else
{
autoStart
.
removeAttribute
(
"
checked
"
)
;
}
pref
.
value
=
autoStart
.
hasAttribute
(
"
checked
"
)
;
mode
.
selectedIndex
=
this
.
_lastMode
;
mode
.
doCommand
(
)
;
this
.
_shouldPromptForRestart
=
true
;
}
showTrackingProtectionExceptions
(
)
{
let
params
=
{
permissionType
:
"
trackingprotection
"
hideStatusColumn
:
true
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
null
params
)
;
}
showBlockLists
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
blocklists
.
xul
"
null
)
;
}
readDeleteOnClose
(
)
{
let
privateBrowsing
=
Preferences
.
get
(
"
browser
.
privatebrowsing
.
autostart
"
)
.
value
;
if
(
privateBrowsing
)
{
return
true
;
}
let
lifetimePolicy
=
Preferences
.
get
(
"
network
.
cookie
.
lifetimePolicy
"
)
.
value
;
return
lifetimePolicy
=
=
Ci
.
nsICookieService
.
ACCEPT_SESSION
;
}
writeDeleteOnClose
(
)
{
let
checkbox
=
document
.
getElementById
(
"
deleteOnClose
"
)
;
return
checkbox
.
checked
?
Ci
.
nsICookieService
.
ACCEPT_SESSION
:
Ci
.
nsICookieService
.
ACCEPT_NORMALLY
;
}
readBlockCookies
(
)
{
let
pref
=
Preferences
.
get
(
"
network
.
cookie
.
cookieBehavior
"
)
;
let
bcControl
=
document
.
getElementById
(
"
blockCookiesMenu
"
)
;
bcControl
.
disabled
=
pref
.
value
=
=
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
;
}
writeBlockCookies
(
)
{
let
block
=
document
.
getElementById
(
"
contentBlockingBlockCookiesCheckbox
"
)
;
let
blockCookiesMenu
=
document
.
getElementById
(
"
blockCookiesMenu
"
)
;
if
(
block
.
checked
)
{
blockCookiesMenu
.
selectedIndex
=
0
;
return
this
.
writeBlockCookiesFrom
(
)
;
}
return
Ci
.
nsICookieService
.
BEHAVIOR_ACCEPT
;
}
readBlockCookiesFrom
(
)
{
let
pref
=
Preferences
.
get
(
"
network
.
cookie
.
cookieBehavior
"
)
;
switch
(
pref
.
value
)
{
case
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
:
return
"
all
-
third
-
parties
"
;
case
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
:
return
"
always
"
;
case
Ci
.
nsICookieService
.
BEHAVIOR_LIMIT_FOREIGN
:
return
"
unvisited
"
;
case
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
:
return
"
trackers
"
;
default
:
return
undefined
;
}
}
writeBlockCookiesFrom
(
)
{
let
block
=
document
.
getElementById
(
"
blockCookiesMenu
"
)
.
selectedItem
;
switch
(
block
.
value
)
{
case
"
trackers
"
:
return
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
;
case
"
unvisited
"
:
return
Ci
.
nsICookieService
.
BEHAVIOR_LIMIT_FOREIGN
;
case
"
always
"
:
return
Ci
.
nsICookieService
.
BEHAVIOR_REJECT
;
case
"
all
-
third
-
parties
"
:
return
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_FOREIGN
;
default
:
return
undefined
;
}
}
showCookieExceptions
(
)
{
var
params
=
{
blockVisible
:
true
sessionVisible
:
true
allowVisible
:
true
prefilledHost
:
"
"
permissionType
:
"
cookie
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
null
params
)
;
}
showSiteDataSettings
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
siteDataSettings
.
xul
"
)
;
}
toggleSiteData
(
shouldShow
)
{
let
clearButton
=
document
.
getElementById
(
"
clearSiteDataButton
"
)
;
let
settingsButton
=
document
.
getElementById
(
"
siteDataSettings
"
)
;
clearButton
.
disabled
=
!
shouldShow
;
settingsButton
.
disabled
=
!
shouldShow
;
}
showSiteDataLoading
(
)
{
let
totalSiteDataSizeLabel
=
document
.
getElementById
(
"
totalSiteDataSize
"
)
;
document
.
l10n
.
setAttributes
(
totalSiteDataSizeLabel
"
sitedata
-
total
-
size
-
calculating
"
)
;
}
updateTotalDataSizeLabel
(
siteDataUsage
)
{
SiteDataManager
.
getCacheSize
(
)
.
then
(
function
(
cacheUsage
)
{
let
totalSiteDataSizeLabel
=
document
.
getElementById
(
"
totalSiteDataSize
"
)
;
let
totalUsage
=
siteDataUsage
+
cacheUsage
;
let
[
value
unit
]
=
DownloadUtils
.
convertByteUnits
(
totalUsage
)
;
document
.
l10n
.
setAttributes
(
totalSiteDataSizeLabel
"
sitedata
-
total
-
size
"
{
value
unit
}
)
;
}
)
;
}
clearSiteData
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
clearSiteData
.
xul
"
)
;
}
showLocationExceptions
(
)
{
let
params
=
{
permissionType
:
"
geo
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
sitePermissions
.
xul
"
"
resizable
=
yes
"
params
)
;
}
showCameraExceptions
(
)
{
let
params
=
{
permissionType
:
"
camera
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
sitePermissions
.
xul
"
"
resizable
=
yes
"
params
)
;
}
showMicrophoneExceptions
(
)
{
let
params
=
{
permissionType
:
"
microphone
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
sitePermissions
.
xul
"
"
resizable
=
yes
"
params
)
;
}
showNotificationExceptions
(
)
{
let
params
=
{
permissionType
:
"
desktop
-
notification
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
sitePermissions
.
xul
"
"
resizable
=
yes
"
params
)
;
try
{
Services
.
telemetry
.
getHistogramById
(
"
WEB_NOTIFICATION_EXCEPTIONS_OPENED
"
)
.
add
(
)
;
}
catch
(
e
)
{
}
}
blockAutoplayReadPrefs
(
)
{
let
blocked
=
Preferences
.
get
(
"
media
.
autoplay
.
default
"
)
.
value
=
=
Ci
.
nsIAutoplay
.
BLOCKED
;
document
.
getElementById
(
"
autoplayMediaCheckbox
"
)
.
checked
=
blocked
;
}
toggleAutoplayMedia
(
event
)
{
let
blocked
=
event
.
target
.
checked
?
Ci
.
nsIAutoplay
.
BLOCKED
:
Ci
.
nsIAutoplay
.
ALLOWED
;
Services
.
prefs
.
setIntPref
(
"
media
.
autoplay
.
default
"
blocked
)
;
}
showAutoplayMediaExceptions
(
)
{
var
params
=
{
blockVisible
:
true
sessionVisible
:
false
allowVisible
:
true
prefilledHost
:
"
"
permissionType
:
"
autoplay
-
media
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
"
resizable
=
yes
"
params
)
;
}
showPopupExceptions
(
)
{
var
params
=
{
blockVisible
:
false
sessionVisible
:
false
allowVisible
:
true
prefilledHost
:
"
"
permissionType
:
"
popup
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
"
resizable
=
yes
"
params
)
;
}
updateButtons
(
aButtonID
aPreferenceID
)
{
var
button
=
document
.
getElementById
(
aButtonID
)
;
var
preference
=
Preferences
.
get
(
aPreferenceID
)
;
button
.
disabled
=
!
preference
.
value
;
return
undefined
;
}
showPasswordExceptions
(
)
{
var
params
=
{
blockVisible
:
true
sessionVisible
:
false
allowVisible
:
false
hideStatusColumn
:
true
prefilledHost
:
"
"
permissionType
:
"
login
-
saving
"
}
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
null
params
)
;
}
_initMasterPasswordUI
(
)
{
var
noMP
=
!
LoginHelper
.
isMasterPasswordSet
(
)
;
var
button
=
document
.
getElementById
(
"
changeMasterPassword
"
)
;
button
.
disabled
=
noMP
;
var
checkbox
=
document
.
getElementById
(
"
useMasterPassword
"
)
;
checkbox
.
checked
=
!
noMP
;
checkbox
.
disabled
=
noMP
&
&
!
Services
.
policies
.
isAllowed
(
"
createMasterPassword
"
)
;
}
updateMasterPasswordButton
(
)
{
var
checkbox
=
document
.
getElementById
(
"
useMasterPassword
"
)
;
var
button
=
document
.
getElementById
(
"
changeMasterPassword
"
)
;
button
.
disabled
=
!
checkbox
.
checked
;
if
(
!
checkbox
.
checked
)
this
.
_removeMasterPassword
(
)
;
else
this
.
changeMasterPassword
(
)
;
this
.
_initMasterPasswordUI
(
)
;
}
_removeMasterPassword
(
)
{
var
secmodDB
=
Cc
[
"
mozilla
.
org
/
security
/
pkcs11moduledb
;
1
"
]
.
getService
(
Ci
.
nsIPKCS11ModuleDB
)
;
if
(
secmodDB
.
isFIPSEnabled
)
{
var
bundle
=
document
.
getElementById
(
"
bundlePreferences
"
)
;
Services
.
prompt
.
alert
(
window
bundle
.
getString
(
"
pw_change_failed_title
"
)
bundle
.
getString
(
"
pw_change2empty_in_fips_mode
"
)
)
;
this
.
_initMasterPasswordUI
(
)
;
}
else
{
gSubDialog
.
open
(
"
chrome
:
/
/
mozapps
/
content
/
preferences
/
removemp
.
xul
"
null
null
this
.
_initMasterPasswordUI
.
bind
(
this
)
)
;
}
}
changeMasterPassword
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
mozapps
/
content
/
preferences
/
changemp
.
xul
"
"
resizable
=
no
"
null
this
.
_initMasterPasswordUI
.
bind
(
this
)
)
;
}
showPasswords
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
passwordmgr
/
content
/
passwordManager
.
xul
"
)
;
}
readSavePasswords
(
)
{
var
pref
=
Preferences
.
get
(
"
signon
.
rememberSignons
"
)
;
var
excepts
=
document
.
getElementById
(
"
passwordExceptions
"
)
;
if
(
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
document
.
getElementById
(
"
savePasswords
"
)
.
disabled
=
true
;
excepts
.
disabled
=
true
;
return
false
;
}
excepts
.
disabled
=
!
pref
.
value
;
return
undefined
;
}
readWarnAddonInstall
(
)
{
var
warn
=
Preferences
.
get
(
"
xpinstall
.
whitelist
.
required
"
)
;
var
exceptions
=
document
.
getElementById
(
"
addonExceptions
"
)
;
exceptions
.
disabled
=
!
warn
.
value
;
return
undefined
;
}
_initSafeBrowsing
(
)
{
let
enableSafeBrowsing
=
document
.
getElementById
(
"
enableSafeBrowsing
"
)
;
let
blockDownloads
=
document
.
getElementById
(
"
blockDownloads
"
)
;
let
blockUncommonUnwanted
=
document
.
getElementById
(
"
blockUncommonUnwanted
"
)
;
let
safeBrowsingPhishingPref
=
Preferences
.
get
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
)
;
let
safeBrowsingMalwarePref
=
Preferences
.
get
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
)
;
let
blockDownloadsPref
=
Preferences
.
get
(
"
browser
.
safebrowsing
.
downloads
.
enabled
"
)
;
let
malwareTable
=
Preferences
.
get
(
"
urlclassifier
.
malwareTable
"
)
;
let
blockUnwantedPref
=
Preferences
.
get
(
"
browser
.
safebrowsing
.
downloads
.
remote
.
block_potentially_unwanted
"
)
;
let
blockUncommonPref
=
Preferences
.
get
(
"
browser
.
safebrowsing
.
downloads
.
remote
.
block_uncommon
"
)
;
let
learnMoreLink
=
document
.
getElementById
(
"
enableSafeBrowsingLearnMore
"
)
;
let
phishingUrl
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
phishing
-
malware
"
;
learnMoreLink
.
setAttribute
(
"
href
"
phishingUrl
)
;
enableSafeBrowsing
.
addEventListener
(
"
command
"
function
(
)
{
safeBrowsingPhishingPref
.
value
=
enableSafeBrowsing
.
checked
;
safeBrowsingMalwarePref
.
value
=
enableSafeBrowsing
.
checked
;
if
(
enableSafeBrowsing
.
checked
)
{
if
(
blockDownloads
)
{
blockDownloads
.
removeAttribute
(
"
disabled
"
)
;
if
(
blockDownloads
.
checked
)
{
blockUncommonUnwanted
.
removeAttribute
(
"
disabled
"
)
;
}
}
else
{
blockUncommonUnwanted
.
removeAttribute
(
"
disabled
"
)
;
}
}
else
{
if
(
blockDownloads
)
{
blockDownloads
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
)
;
if
(
blockDownloads
)
{
blockDownloads
.
addEventListener
(
"
command
"
function
(
)
{
blockDownloadsPref
.
value
=
blockDownloads
.
checked
;
if
(
blockDownloads
.
checked
)
{
blockUncommonUnwanted
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
)
;
}
blockUncommonUnwanted
.
addEventListener
(
"
command
"
function
(
)
{
blockUnwantedPref
.
value
=
blockUncommonUnwanted
.
checked
;
blockUncommonPref
.
value
=
blockUncommonUnwanted
.
checked
;
let
malware
=
malwareTable
.
value
.
split
(
"
"
)
.
filter
(
x
=
>
x
!
=
=
"
goog
-
unwanted
-
proto
"
&
&
x
!
=
=
"
goog
-
unwanted
-
shavar
"
&
&
x
!
=
=
"
test
-
unwanted
-
simple
"
)
;
if
(
blockUncommonUnwanted
.
checked
)
{
if
(
malware
.
includes
(
"
goog
-
malware
-
shavar
"
)
)
{
malware
.
push
(
"
goog
-
unwanted
-
shavar
"
)
;
}
else
{
malware
.
push
(
"
goog
-
unwanted
-
proto
"
)
;
}
malware
.
push
(
"
test
-
unwanted
-
simple
"
)
;
}
malware
.
sort
(
)
;
malwareTable
.
value
=
malware
.
join
(
"
"
)
;
let
listmanager
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
listmanager
;
1
"
]
.
getService
(
Ci
.
nsIUrlListManager
)
;
if
(
listmanager
)
{
listmanager
.
forceUpdates
(
malwareTable
.
value
)
;
}
}
)
;
enableSafeBrowsing
.
checked
=
safeBrowsingPhishingPref
.
value
&
&
safeBrowsingMalwarePref
.
value
;
if
(
!
enableSafeBrowsing
.
checked
)
{
if
(
blockDownloads
)
{
blockDownloads
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
if
(
blockDownloads
)
{
blockDownloads
.
checked
=
blockDownloadsPref
.
value
;
if
(
!
blockDownloadsPref
.
value
)
{
blockUncommonUnwanted
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
blockUncommonUnwanted
.
checked
=
blockUnwantedPref
.
value
&
&
blockUncommonPref
.
value
;
}
showAddonExceptions
(
)
{
var
params
=
this
.
_addonParams
;
gSubDialog
.
open
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
null
params
)
;
}
_addonParams
:
{
blockVisible
:
false
sessionVisible
:
false
allowVisible
:
true
prefilledHost
:
"
"
permissionType
:
"
install
"
}
readEnableOCSP
(
)
{
var
preference
=
Preferences
.
get
(
"
security
.
OCSP
.
enabled
"
)
;
if
(
preference
.
value
=
=
=
undefined
)
{
return
true
;
}
return
preference
.
value
!
=
0
;
}
writeEnableOCSP
(
)
{
var
checkbox
=
document
.
getElementById
(
"
enableOCSP
"
)
;
var
defaults
=
Services
.
prefs
.
getDefaultBranch
(
null
)
;
var
defaultValue
=
defaults
.
getIntPref
(
"
security
.
OCSP
.
enabled
"
)
;
return
checkbox
.
checked
?
defaultValue
:
0
;
}
showCertificates
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
pippki
/
content
/
certManager
.
xul
"
)
;
}
showSecurityDevices
(
)
{
gSubDialog
.
open
(
"
chrome
:
/
/
pippki
/
content
/
device_manager
.
xul
"
)
;
}
initDataCollection
(
)
{
this
.
_setupLearnMoreLink
(
"
toolkit
.
datacollection
.
infoURL
"
"
dataCollectionPrivacyNotice
"
)
;
}
initSubmitCrashes
(
)
{
this
.
_setupLearnMoreLink
(
"
toolkit
.
crashreporter
.
infoURL
"
"
crashReporterLearnMore
"
)
;
}
_setupLearnMoreLink
(
pref
element
)
{
let
url
=
Services
.
urlFormatter
.
formatURLPref
(
pref
)
;
let
el
=
document
.
getElementById
(
element
)
;
if
(
url
)
{
el
.
setAttribute
(
"
href
"
url
)
;
}
else
{
el
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
}
initSubmitHealthReport
(
)
{
this
.
_setupLearnMoreLink
(
"
datareporting
.
healthreport
.
infoURL
"
"
FHRLearnMore
"
)
;
let
checkbox
=
document
.
getElementById
(
"
submitHealthReportBox
"
)
;
if
(
Services
.
prefs
.
prefIsLocked
(
PREF_UPLOAD_ENABLED
)
|
|
!
AppConstants
.
MOZ_TELEMETRY_REPORTING
)
{
checkbox
.
setAttribute
(
"
disabled
"
"
true
"
)
;
return
;
}
checkbox
.
checked
=
Services
.
prefs
.
getBoolPref
(
PREF_UPLOAD_ENABLED
)
&
&
AppConstants
.
MOZ_TELEMETRY_REPORTING
;
}
updateSubmitHealthReport
(
)
{
let
checkbox
=
document
.
getElementById
(
"
submitHealthReportBox
"
)
;
Services
.
prefs
.
setBoolPref
(
PREF_UPLOAD_ENABLED
checkbox
.
checked
)
;
}
initOptOutStudyCheckbox
(
doc
)
{
const
allowedByPolicy
=
Services
.
policies
.
isAllowed
(
"
Shield
"
)
;
dataCollectionCheckboxHandler
(
{
checkbox
:
document
.
getElementById
(
"
optOutStudiesEnabled
"
)
matchPref
:
(
)
=
>
(
allowedByPolicy
&
&
Services
.
prefs
.
getBoolPref
(
PREF_NORMANDY_ENABLED
false
)
)
isDisabled
:
(
)
=
>
!
allowedByPolicy
pref
:
PREF_OPT_OUT_STUDIES_ENABLED
}
)
;
}
initAddonRecommendationsCheckbox
(
)
{
const
url
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
personalized
-
addons
"
;
document
.
getElementById
(
"
addonRecommendationLearnMore
"
)
.
setAttribute
(
"
href
"
url
)
;
dataCollectionCheckboxHandler
(
{
checkbox
:
document
.
getElementById
(
"
addonRecommendationEnabled
"
)
pref
:
PREF_ADDON_RECOMMENDATIONS_ENABLED
}
)
;
}
observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
sitedatamanager
:
updating
-
sites
"
:
this
.
toggleSiteData
(
false
)
;
this
.
showSiteDataLoading
(
)
;
break
;
case
"
sitedatamanager
:
sites
-
updated
"
:
this
.
toggleSiteData
(
true
)
;
SiteDataManager
.
getTotalUsage
(
)
.
then
(
this
.
updateTotalDataSizeLabel
.
bind
(
this
)
)
;
break
;
}
}
_initA11yState
(
)
{
this
.
_initA11yString
(
)
;
let
checkbox
=
document
.
getElementById
(
"
a11yPrivacyCheckbox
"
)
;
switch
(
Services
.
prefs
.
getIntPref
(
"
accessibility
.
force_disabled
"
)
)
{
case
1
:
checkbox
.
checked
=
true
;
break
;
case
-
1
:
case
0
:
checkbox
.
checked
=
false
;
break
;
}
}
_initA11yString
(
)
{
let
a11yLearnMoreLink
=
Services
.
urlFormatter
.
formatURLPref
(
"
accessibility
.
support
.
url
"
)
;
document
.
getElementById
(
"
a11yLearnMoreLink
"
)
.
setAttribute
(
"
href
"
a11yLearnMoreLink
)
;
}
async
updateA11yPrefs
(
checked
)
{
let
buttonIndex
=
await
confirmRestartPrompt
(
checked
0
true
false
)
;
if
(
buttonIndex
=
=
CONFIRM_RESTART_PROMPT_RESTART_NOW
)
{
Services
.
prefs
.
setIntPref
(
"
accessibility
.
force_disabled
"
checked
?
1
:
0
)
;
Services
.
telemetry
.
scalarSet
(
"
preferences
.
prevent_accessibility_services
"
true
)
;
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
}
document
.
getElementById
(
"
a11yPrivacyCheckbox
"
)
.
checked
=
!
checked
;
}
}
;
