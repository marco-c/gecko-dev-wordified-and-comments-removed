var
gSearchResultsPane
=
{
listSearchTooltips
:
new
Set
(
)
listSearchMenuitemIndicators
:
new
Set
(
)
searchInput
:
null
searchKeywords
:
new
WeakMap
(
)
inited
:
false
init
(
)
{
if
(
this
.
inited
)
{
return
;
}
this
.
inited
=
true
;
this
.
searchInput
=
document
.
getElementById
(
"
searchInput
"
)
;
this
.
searchInput
.
hidden
=
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
preferences
.
search
"
)
;
if
(
!
this
.
searchInput
.
hidden
)
{
this
.
searchInput
.
addEventListener
(
"
input
"
this
)
;
this
.
searchInput
.
addEventListener
(
"
command
"
this
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
this
.
searchInput
.
focus
(
)
;
}
)
;
window
.
requestIdleCallback
(
(
)
=
>
this
.
initializeCategories
(
)
)
;
}
let
helpUrl
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
preferences
"
;
let
helpContainer
=
document
.
getElementById
(
"
need
-
help
"
)
;
helpContainer
.
querySelector
(
"
a
"
)
.
href
=
helpUrl
;
}
handleEvent
(
event
)
{
this
.
initializeCategories
(
)
;
this
.
searchFunction
(
event
)
;
}
queryMatchesContent
(
content
query
)
{
if
(
!
content
|
|
!
query
)
{
return
false
;
}
return
content
.
toLowerCase
(
)
.
includes
(
query
.
toLowerCase
(
)
)
;
}
categoriesInitialized
:
false
initializeCategories
(
)
{
if
(
!
this
.
categoriesInitialized
)
{
this
.
categoriesInitialized
=
true
;
for
(
let
[
category
]
of
gCategoryInits
)
{
if
(
!
category
.
inited
)
{
category
.
init
(
)
;
}
}
}
}
textNodeDescendants
(
node
)
{
if
(
!
node
)
{
return
[
]
;
}
let
all
=
[
]
;
for
(
node
=
node
.
firstChild
;
node
;
node
=
node
.
nextSibling
)
{
if
(
node
.
nodeType
=
=
=
node
.
TEXT_NODE
)
{
all
.
push
(
node
)
;
}
else
{
all
=
all
.
concat
(
this
.
textNodeDescendants
(
node
)
)
;
}
}
return
all
;
}
highlightMatches
(
textNodes
nodeSizes
textSearch
searchPhrase
)
{
if
(
!
searchPhrase
)
{
return
false
;
}
let
indices
=
[
]
;
let
i
=
-
1
;
while
(
(
i
=
textSearch
.
indexOf
(
searchPhrase
i
+
1
)
)
>
=
0
)
{
indices
.
push
(
i
)
;
}
for
(
let
startValue
of
indices
)
{
let
endValue
=
startValue
+
searchPhrase
.
length
;
let
startNode
=
null
;
let
endNode
=
null
;
let
nodeStartIndex
=
null
;
for
(
let
index
=
0
;
index
<
nodeSizes
.
length
;
index
+
+
)
{
let
lengthNodes
=
nodeSizes
[
index
]
;
if
(
!
startNode
&
&
lengthNodes
>
=
startValue
)
{
startNode
=
textNodes
[
index
]
;
nodeStartIndex
=
index
;
if
(
index
>
0
)
{
startValue
-
=
nodeSizes
[
index
-
1
]
;
}
}
if
(
!
endNode
&
&
lengthNodes
>
=
endValue
)
{
endNode
=
textNodes
[
index
]
;
if
(
index
!
=
nodeStartIndex
|
|
index
>
0
)
{
endValue
-
=
nodeSizes
[
index
-
1
]
;
}
}
}
let
range
=
document
.
createRange
(
)
;
range
.
setStart
(
startNode
startValue
)
;
range
.
setEnd
(
endNode
endValue
)
;
this
.
getFindSelection
(
startNode
.
ownerGlobal
)
.
addRange
(
range
)
;
}
return
indices
.
length
>
0
;
}
getFindSelection
(
win
)
{
let
docShell
=
win
.
docShell
;
let
controller
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsISelectionDisplay
)
.
QueryInterface
(
Ci
.
nsISelectionController
)
;
let
selection
=
controller
.
getSelection
(
Ci
.
nsISelectionController
.
SELECTION_FIND
)
;
selection
.
setColors
(
"
currentColor
"
"
#
ffe900
"
"
currentColor
"
"
#
003eaa
"
)
;
return
selection
;
}
async
searchFunction
(
event
)
{
let
query
=
event
.
target
.
value
.
trim
(
)
.
toLowerCase
(
)
;
if
(
this
.
query
=
=
query
)
{
return
;
}
let
subQuery
=
this
.
query
&
&
query
.
includes
(
this
.
query
)
;
this
.
query
=
query
;
this
.
getFindSelection
(
window
)
.
removeAllRanges
(
)
;
this
.
removeAllSearchTooltips
(
)
;
this
.
removeAllSearchMenuitemIndicators
(
)
;
if
(
this
.
telemetryTimer
)
{
clearTimeout
(
this
.
telemetryTimer
)
;
}
let
srHeader
=
document
.
getElementById
(
"
header
-
searchResults
"
)
;
let
noResultsEl
=
document
.
getElementById
(
"
no
-
results
-
message
"
)
;
srHeader
.
hidden
=
!
this
.
query
;
if
(
this
.
query
)
{
gotoPref
(
"
paneSearchResults
"
)
;
let
resultsFound
=
false
;
let
rootPreferencesChildren
=
[
.
.
.
document
.
querySelectorAll
(
"
#
mainPrefPane
>
*
:
not
(
[
data
-
hidden
-
from
-
search
]
)
"
)
]
;
if
(
subQuery
)
{
rootPreferencesChildren
=
rootPreferencesChildren
.
filter
(
el
=
>
!
el
.
hidden
)
;
}
for
(
let
child
of
rootPreferencesChildren
)
{
if
(
child
.
hidden
)
{
child
.
classList
.
add
(
"
visually
-
hidden
"
)
;
child
.
hidden
=
false
;
}
}
let
ts
=
performance
.
now
(
)
;
let
FRAME_THRESHOLD
=
1000
/
60
;
for
(
let
child
of
rootPreferencesChildren
)
{
if
(
performance
.
now
(
)
-
ts
>
FRAME_THRESHOLD
)
{
for
(
let
anchorNode
of
this
.
listSearchTooltips
)
{
this
.
createSearchTooltip
(
anchorNode
this
.
query
)
;
}
ts
=
await
new
Promise
(
resolve
=
>
window
.
requestAnimationFrame
(
resolve
)
)
;
if
(
query
!
=
=
this
.
query
)
{
return
;
}
}
if
(
!
child
.
classList
.
contains
(
"
header
"
)
&
&
!
child
.
classList
.
contains
(
"
subcategory
"
)
&
&
await
this
.
searchWithinNode
(
child
this
.
query
)
)
{
child
.
classList
.
remove
(
"
visually
-
hidden
"
)
;
let
groupbox
=
child
.
closest
(
"
groupbox
"
)
;
let
groupHeader
=
groupbox
&
&
groupbox
.
querySelector
(
"
.
search
-
header
"
)
;
if
(
groupHeader
)
{
groupHeader
.
hidden
=
false
;
}
resultsFound
=
true
;
}
else
{
child
.
classList
.
add
(
"
visually
-
hidden
"
)
;
}
}
noResultsEl
.
hidden
=
!
!
resultsFound
;
noResultsEl
.
setAttribute
(
"
query
"
this
.
query
)
;
let
msgQueryElem
=
document
.
getElementById
(
"
sorry
-
message
-
query
"
)
;
msgQueryElem
.
textContent
=
this
.
query
;
if
(
resultsFound
)
{
for
(
let
anchorNode
of
this
.
listSearchTooltips
)
{
this
.
createSearchTooltip
(
anchorNode
this
.
query
)
;
}
if
(
this
.
query
.
length
>
=
2
)
{
this
.
telemetryTimer
=
setTimeout
(
(
)
=
>
{
Services
.
telemetry
.
keyedScalarAdd
(
"
preferences
.
search_query
"
this
.
query
1
)
;
}
1000
)
;
}
}
}
else
{
noResultsEl
.
hidden
=
true
;
document
.
getElementById
(
"
sorry
-
message
-
query
"
)
.
textContent
=
"
"
;
gotoPref
(
"
paneGeneral
"
)
;
for
(
let
element
of
document
.
querySelectorAll
(
"
.
search
-
header
"
)
)
{
element
.
hidden
=
true
;
}
}
window
.
dispatchEvent
(
new
CustomEvent
(
"
PreferencesSearchCompleted
"
{
detail
:
query
}
)
)
;
}
async
searchWithinNode
(
nodeObject
searchPhrase
)
{
let
matchesFound
=
false
;
if
(
nodeObject
.
childElementCount
=
=
0
|
|
nodeObject
.
tagName
=
=
"
label
"
|
|
nodeObject
.
tagName
=
=
"
description
"
|
|
nodeObject
.
tagName
=
=
"
menulist
"
)
{
let
simpleTextNodes
=
this
.
textNodeDescendants
(
nodeObject
)
;
for
(
let
node
of
simpleTextNodes
)
{
let
result
=
this
.
highlightMatches
(
[
node
]
[
node
.
length
]
node
.
textContent
.
toLowerCase
(
)
searchPhrase
)
;
matchesFound
=
matchesFound
|
|
result
;
}
let
nodeSizes
=
[
]
;
let
allNodeText
=
"
"
;
let
runningSize
=
0
;
let
accessKeyTextNodes
=
[
]
;
let
anons
=
document
.
getAnonymousNodes
(
nodeObject
)
;
if
(
anons
)
{
for
(
let
anon
of
anons
)
{
accessKeyTextNodes
.
push
(
.
.
.
this
.
textNodeDescendants
(
anon
)
)
;
}
}
if
(
nodeObject
.
tagName
=
=
"
label
"
|
|
nodeObject
.
tagName
=
=
"
description
"
)
{
accessKeyTextNodes
.
push
(
.
.
.
simpleTextNodes
)
;
}
for
(
let
node
of
accessKeyTextNodes
)
{
runningSize
+
=
node
.
textContent
.
length
;
allNodeText
+
=
node
.
textContent
;
nodeSizes
.
push
(
runningSize
)
;
}
let
complexTextNodesResult
=
this
.
highlightMatches
(
accessKeyTextNodes
nodeSizes
allNodeText
.
toLowerCase
(
)
searchPhrase
)
;
let
labelResult
=
this
.
queryMatchesContent
(
nodeObject
.
getAttribute
(
"
label
"
)
searchPhrase
)
;
let
valueResult
=
nodeObject
.
tagName
!
=
=
"
menuitem
"
&
&
nodeObject
.
tagName
!
=
=
"
radio
"
?
this
.
queryMatchesContent
(
nodeObject
.
getAttribute
(
"
value
"
)
searchPhrase
)
:
false
;
let
keywordsResult
=
nodeObject
.
hasAttribute
(
"
search
-
l10n
-
ids
"
)
&
&
await
this
.
matchesSearchL10nIDs
(
nodeObject
searchPhrase
)
;
if
(
!
keywordsResult
)
{
keywordsResult
=
!
keywordsResult
&
&
nodeObject
.
hasAttribute
(
"
searchkeywords
"
)
&
&
this
.
queryMatchesContent
(
nodeObject
.
getAttribute
(
"
searchkeywords
"
)
searchPhrase
)
;
}
if
(
keywordsResult
&
&
(
nodeObject
.
tagName
=
=
=
"
button
"
|
|
nodeObject
.
tagName
=
=
"
menulist
"
)
)
{
this
.
listSearchTooltips
.
add
(
nodeObject
)
;
}
if
(
keywordsResult
&
&
nodeObject
.
tagName
=
=
=
"
menuitem
"
)
{
nodeObject
.
setAttribute
(
"
indicator
"
"
true
"
)
;
this
.
listSearchMenuitemIndicators
.
add
(
nodeObject
)
;
let
menulist
=
nodeObject
.
closest
(
"
menulist
"
)
;
menulist
.
setAttribute
(
"
indicator
"
"
true
"
)
;
this
.
listSearchMenuitemIndicators
.
add
(
menulist
)
;
}
if
(
(
nodeObject
.
tagName
=
=
"
button
"
|
|
nodeObject
.
tagName
=
=
"
menulist
"
|
|
nodeObject
.
tagName
=
=
"
menuitem
"
)
&
&
(
labelResult
|
|
valueResult
|
|
keywordsResult
)
)
{
nodeObject
.
setAttribute
(
"
highlightable
"
"
true
"
)
;
}
matchesFound
=
matchesFound
|
|
complexTextNodesResult
|
|
labelResult
|
|
valueResult
|
|
keywordsResult
;
}
if
(
nodeObject
.
tagName
=
=
"
deck
"
&
&
nodeObject
.
id
!
=
"
historyPane
"
)
{
let
index
=
nodeObject
.
selectedIndex
;
if
(
index
!
=
-
1
)
{
let
result
=
await
this
.
searchChildNodeIfVisible
(
nodeObject
index
searchPhrase
)
;
matchesFound
=
matchesFound
|
|
result
;
}
}
else
{
for
(
let
i
=
0
;
i
<
nodeObject
.
childNodes
.
length
;
i
+
+
)
{
let
result
=
await
this
.
searchChildNodeIfVisible
(
nodeObject
i
searchPhrase
)
;
matchesFound
=
matchesFound
|
|
result
;
}
}
return
matchesFound
;
}
async
searchChildNodeIfVisible
(
nodeObject
index
searchPhrase
)
{
let
result
=
false
;
if
(
!
nodeObject
.
childNodes
[
index
]
.
hidden
&
&
nodeObject
.
getAttribute
(
"
data
-
hidden
-
from
-
search
"
)
!
=
=
"
true
"
)
{
result
=
await
this
.
searchWithinNode
(
nodeObject
.
childNodes
[
index
]
searchPhrase
)
;
if
(
result
&
&
nodeObject
.
tagName
=
=
=
"
menulist
"
)
{
this
.
listSearchTooltips
.
add
(
nodeObject
)
;
}
}
return
result
;
}
async
matchesSearchL10nIDs
(
nodeObject
searchPhrase
)
{
if
(
!
this
.
searchKeywords
.
has
(
nodeObject
)
)
{
const
refs
=
nodeObject
.
getAttribute
(
"
search
-
l10n
-
ids
"
)
.
split
(
"
"
)
.
map
(
s
=
>
s
.
trim
(
)
.
split
(
"
.
"
)
)
.
filter
(
s
=
>
s
[
0
]
.
length
>
0
)
;
const
messages
=
await
document
.
l10n
.
formatMessages
(
refs
.
map
(
ref
=
>
(
{
id
:
ref
[
0
]
}
)
)
)
;
let
keywords
=
messages
.
map
(
(
msg
i
)
=
>
{
let
[
refId
refAttr
]
=
refs
[
i
]
;
if
(
!
msg
)
{
console
.
error
(
Missing
search
l10n
id
"
{
refId
}
"
)
;
return
null
;
}
if
(
refAttr
)
{
let
attr
=
msg
.
attributes
&
&
msg
.
attributes
.
find
(
a
=
>
a
.
name
=
=
=
refAttr
)
;
if
(
!
attr
)
{
console
.
error
(
Missing
search
l10n
id
"
{
refId
}
.
{
refAttr
}
"
)
;
return
null
;
}
if
(
attr
.
value
=
=
=
"
"
)
{
console
.
error
(
Empty
value
added
to
search
-
l10n
-
ids
"
{
refId
}
.
{
refAttr
}
"
)
;
}
return
attr
.
value
;
}
if
(
msg
.
value
=
=
=
"
"
)
{
console
.
error
(
Empty
value
added
to
search
-
l10n
-
ids
"
{
refId
}
"
)
;
}
return
msg
.
value
;
}
)
.
filter
(
keyword
=
>
keyword
!
=
=
null
)
.
join
(
"
"
)
;
this
.
searchKeywords
.
set
(
nodeObject
keywords
)
;
return
this
.
queryMatchesContent
(
keywords
searchPhrase
)
;
}
return
this
.
queryMatchesContent
(
this
.
searchKeywords
.
get
(
nodeObject
)
searchPhrase
)
;
}
createSearchTooltip
(
anchorNode
query
)
{
if
(
anchorNode
.
tooltipNode
)
{
return
;
}
let
searchTooltip
=
anchorNode
.
ownerDocument
.
createXULElement
(
"
span
"
)
;
let
searchTooltipText
=
anchorNode
.
ownerDocument
.
createXULElement
(
"
span
"
)
;
searchTooltip
.
className
=
"
search
-
tooltip
"
;
searchTooltipText
.
textContent
=
query
;
searchTooltip
.
appendChild
(
searchTooltipText
)
;
anchorNode
.
tooltipNode
=
searchTooltip
;
anchorNode
.
parentElement
.
classList
.
add
(
"
search
-
tooltip
-
parent
"
)
;
anchorNode
.
parentElement
.
appendChild
(
searchTooltip
)
;
this
.
calculateTooltipPosition
(
anchorNode
)
;
}
calculateTooltipPosition
(
anchorNode
)
{
let
searchTooltip
=
anchorNode
.
tooltipNode
;
let
tooltipRect
=
searchTooltip
.
getBoundingClientRect
(
)
;
searchTooltip
.
style
.
setProperty
(
"
left
"
calc
(
50
%
-
{
(
tooltipRect
.
width
/
2
)
}
px
)
)
;
}
removeAllSearchTooltips
(
)
{
for
(
let
anchorNode
of
this
.
listSearchTooltips
)
{
anchorNode
.
parentElement
.
classList
.
remove
(
"
search
-
tooltip
-
parent
"
)
;
if
(
anchorNode
.
tooltipNode
)
{
anchorNode
.
tooltipNode
.
remove
(
)
;
}
anchorNode
.
tooltipNode
=
null
;
}
this
.
listSearchTooltips
.
clear
(
)
;
}
removeAllSearchMenuitemIndicators
(
)
{
for
(
let
node
of
this
.
listSearchMenuitemIndicators
)
{
node
.
removeAttribute
(
"
indicator
"
)
;
}
this
.
listSearchMenuitemIndicators
.
clear
(
)
;
}
}
;
