"
use
strict
"
;
add_task
(
async
function
test_fullpageScreenshot
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
screenshot
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
let
screenshotBtn
=
document
.
getElementById
(
"
screenshot
-
button
"
)
;
Assert
.
ok
(
screenshotBtn
"
The
screenshots
button
was
added
to
the
nav
bar
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
helper
.
triggerUIFromToolbar
(
)
;
let
panel
=
gBrowser
.
selectedBrowser
.
ownerDocument
.
querySelector
(
"
#
screenshotsPagePanel
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
panel
{
attributes
:
true
}
(
)
=
>
{
return
BrowserTestUtils
.
is_visible
(
panel
)
;
}
)
;
ok
(
BrowserTestUtils
.
is_visible
(
panel
)
"
Panel
buttons
are
visible
"
)
;
let
visiblePage
=
panel
.
querySelector
(
"
screenshots
-
buttons
"
)
.
shadowRoot
.
querySelector
(
"
.
full
-
page
"
)
;
visiblePage
.
click
(
)
;
let
dialog
=
helper
.
getDialog
(
)
;
let
img
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
img
=
dialog
.
_frame
.
contentDocument
.
querySelector
(
"
img
#
placeholder
-
image
"
)
;
if
(
img
)
{
return
true
;
}
return
false
;
}
"
Waiting
for
img
to
be
added
to
dialog
box
"
)
;
ok
(
img
"
Screenshot
exists
and
is
in
the
dialog
box
"
)
;
let
copyButton
=
dialog
.
_frame
.
contentDocument
.
querySelector
(
"
.
highlight
-
button
-
copy
"
)
;
ok
(
copyButton
"
Got
the
copy
button
"
)
;
let
clipboardChanged
=
helper
.
waitForRawClipboardChange
(
)
;
copyButton
.
click
(
)
;
info
(
"
Waiting
for
clipboard
change
"
)
;
await
clipboardChanged
;
let
result
=
await
helper
.
getImageSizeFromClipboard
(
)
;
info
(
"
result
:
"
+
JSON
.
stringify
(
result
null
2
)
)
;
info
(
"
contentInfo
:
"
+
JSON
.
stringify
(
contentInfo
null
2
)
)
;
Assert
.
equal
(
contentInfo
.
width
result
.
scrollWidth
"
Widths
should
be
equal
"
)
;
Assert
.
equal
(
contentInfo
.
height
result
.
scrollHeight
"
Heights
should
be
equal
"
)
;
}
)
;
}
)
;
