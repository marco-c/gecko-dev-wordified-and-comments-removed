"
use
strict
"
;
add_task
(
async
function
dragTest
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
let
expected
=
Math
.
floor
(
490
*
(
await
getContentDevicePixelRatio
(
browser
)
)
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
10
10
500
500
)
;
let
clipboardChanged
=
helper
.
waitForRawClipboardChange
(
expected
expected
)
;
await
helper
.
clickCopyButton
(
)
;
info
(
"
Waiting
for
clipboard
change
"
)
;
let
result
=
await
clipboardChanged
;
info
(
"
result
:
"
+
JSON
.
stringify
(
result
null
2
)
)
;
Assert
.
equal
(
result
.
width
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
width
)
;
Assert
.
equal
(
result
.
height
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
height
)
;
}
)
;
}
)
;
add_task
(
async
function
dragTest1Point5Zoom
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
const
zoom
=
1
.
5
;
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
helper
.
zoomBrowser
(
zoom
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
let
expected
=
Math
.
floor
(
50
*
(
await
getContentDevicePixelRatio
(
browser
)
)
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
300
100
350
150
)
;
let
clipboardChanged
=
helper
.
waitForRawClipboardChange
(
expected
expected
)
;
await
helper
.
clickCopyButton
(
)
;
info
(
"
Waiting
for
clipboard
change
"
)
;
let
result
=
await
clipboardChanged
;
result
.
zoom
=
zoom
;
result
.
devicePixelRatio
=
window
.
devicePixelRatio
;
result
.
contentDevicePixelRatio
=
await
getContentDevicePixelRatio
(
browser
)
;
info
(
"
result
:
"
+
JSON
.
stringify
(
result
null
2
)
)
;
Assert
.
equal
(
result
.
width
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
width
)
;
Assert
.
equal
(
result
.
height
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
height
)
;
}
)
;
}
)
;
add_task
(
async
function
clickOverlayResetState
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
10
10
100
100
)
;
mouse
.
click
(
200
200
)
;
await
helper
.
waitForStateChange
(
"
crosshairs
"
)
;
let
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
crosshairs
"
"
The
state
is
back
to
crosshairs
"
)
;
}
)
;
}
)
;
add_task
(
async
function
overlayCancelButton
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
10
10
300
300
)
;
await
helper
.
clickCancelButton
(
)
;
await
helper
.
waitForOverlayClosed
(
)
;
ok
(
!
(
await
helper
.
isOverlayInitialized
(
)
)
"
Overlay
is
not
initialized
"
)
;
}
)
;
}
)
;
add_task
(
async
function
preserveBoxSizeWhenMovingOutOfWindowBounds
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
SHORT_TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
let
expected
=
Math
.
floor
(
490
*
(
await
getContentDevicePixelRatio
(
browser
)
)
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
10
10
500
500
)
;
let
startX
=
10
;
let
startY
=
10
;
let
endX
=
500
;
let
endY
=
500
;
mouse
.
down
(
Math
.
floor
(
(
endX
-
startX
)
/
2
)
Math
.
floor
(
(
endY
-
startY
)
/
2
)
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
let
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
10
10
)
;
mouse
.
move
(
contentInfo
.
clientWidth
-
10
contentInfo
.
clientHeight
-
10
)
;
mouse
.
up
(
Math
.
floor
(
(
endX
-
startX
)
/
2
)
Math
.
floor
(
(
endY
-
startY
)
/
2
)
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
let
clipboardChanged
=
helper
.
waitForRawClipboardChange
(
expected
expected
)
;
await
helper
.
clickCopyButton
(
)
;
info
(
"
Waiting
for
clipboard
change
"
)
;
let
result
=
await
clipboardChanged
;
info
(
"
result
:
"
+
JSON
.
stringify
(
result
null
2
)
)
;
Assert
.
equal
(
result
.
width
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
width
)
;
Assert
.
equal
(
result
.
height
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
height
)
;
}
)
;
}
)
;
add_task
(
async
function
resizeAllEdges
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
let
expected
=
Math
.
floor
(
300
*
(
await
getContentDevicePixelRatio
(
browser
)
)
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
10
10
500
500
)
;
let
startX
=
10
;
let
startY
=
10
;
let
endX
=
500
;
let
endY
=
500
;
let
x
=
Math
.
floor
(
(
endX
-
startX
)
/
2
)
;
mouse
.
down
(
x
10
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
let
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
x
100
)
;
mouse
.
up
(
x
100
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
mouse
.
down
(
x
500
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
x
400
)
;
mouse
.
up
(
x
400
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
let
y
=
Math
.
floor
(
(
endY
-
startY
)
/
2
)
;
mouse
.
down
(
500
y
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
400
y
)
;
mouse
.
up
(
400
y
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
mouse
.
down
(
10
y
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
100
y
)
;
mouse
.
up
(
100
y
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
let
clipboardChanged
=
helper
.
waitForRawClipboardChange
(
expected
expected
)
;
helper
.
endX
=
400
;
helper
.
endY
=
400
;
await
helper
.
clickCopyButton
(
)
;
info
(
"
Waiting
for
clipboard
change
"
)
;
let
result
=
await
clipboardChanged
;
info
(
"
result
:
"
+
JSON
.
stringify
(
result
null
2
)
)
;
Assert
.
equal
(
result
.
width
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
width
)
;
Assert
.
equal
(
result
.
height
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
height
)
;
}
)
;
}
)
;
add_task
(
async
function
resizeAllCorners
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
let
contentInfo
=
await
helper
.
getContentDimensions
(
)
;
ok
(
contentInfo
"
Got
dimensions
back
from
the
content
"
)
;
let
expected
=
Math
.
floor
(
300
*
(
await
getContentDevicePixelRatio
(
browser
)
)
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
10
10
500
500
)
;
mouse
.
down
(
500
10
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
let
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
450
50
)
;
mouse
.
up
(
450
50
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
mouse
.
down
(
450
500
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
400
450
)
;
mouse
.
up
(
400
450
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
mouse
.
down
(
10
450
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
50
400
)
;
mouse
.
up
(
50
400
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
mouse
.
down
(
50
50
)
;
await
helper
.
waitForStateChange
(
"
resizing
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
resizing
"
"
The
overlay
is
in
the
resizing
state
"
)
;
mouse
.
move
(
100
100
)
;
mouse
.
up
(
100
100
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
overlay
is
in
the
selected
state
"
)
;
let
clipboardChanged
=
helper
.
waitForRawClipboardChange
(
expected
expected
)
;
helper
.
endX
=
400
;
helper
.
endY
=
400
;
await
helper
.
clickCopyButton
(
)
;
info
(
"
Waiting
for
clipboard
change
"
)
;
let
result
=
await
clipboardChanged
;
info
(
"
result
:
"
+
JSON
.
stringify
(
result
null
2
)
)
;
Assert
.
equal
(
result
.
width
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
width
)
;
Assert
.
equal
(
result
.
height
expected
The
copied
image
from
the
overlay
is
{
expected
}
px
in
height
)
;
}
)
;
}
)
;
add_task
(
async
function
test_otherMouseButtons
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
let
helper
=
new
ScreenshotsHelper
(
browser
)
;
helper
.
triggerUIFromToolbar
(
)
;
await
helper
.
waitForOverlay
(
)
;
await
helper
.
dragOverlay
(
10
10
100
100
)
;
mouse
.
click
(
200
200
{
button
:
1
}
)
;
mouse
.
click
(
200
200
{
button
:
2
}
)
;
await
TestUtils
.
waitForTick
(
)
;
await
helper
.
waitForStateChange
(
"
selected
"
)
;
let
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
selected
"
"
The
state
is
still
in
the
selected
state
"
)
;
mouse
.
click
(
200
200
)
;
await
helper
.
waitForStateChange
(
"
crosshairs
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
crosshairs
"
"
The
state
is
in
the
crosshairs
state
"
)
;
mouse
.
down
(
10
10
{
button
:
1
}
)
;
mouse
.
move
(
100
100
{
button
:
1
}
)
;
mouse
.
up
(
100
100
{
button
:
1
}
)
;
await
TestUtils
.
waitForTick
(
)
;
await
helper
.
waitForStateChange
(
"
crosshairs
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
crosshairs
"
"
The
state
is
still
in
the
crosshairs
state
"
)
;
mouse
.
down
(
10
10
{
button
:
2
}
)
;
mouse
.
move
(
100
100
{
button
:
2
}
)
;
mouse
.
up
(
100
100
{
button
:
2
}
)
;
await
TestUtils
.
waitForTick
(
)
;
await
helper
.
waitForStateChange
(
"
crosshairs
"
)
;
state
=
await
helper
.
getOverlayState
(
)
;
Assert
.
equal
(
state
"
crosshairs
"
"
The
state
is
still
in
the
crosshairs
state
"
)
;
}
)
;
}
)
;
