"
use
strict
"
;
{
class
ScreenshotsButtons
extends
MozXULElement
{
static
get
markup
(
)
{
return
<
html
:
link
rel
=
"
stylesheet
"
href
=
"
chrome
:
/
/
global
/
skin
/
global
.
css
"
/
>
<
html
:
link
rel
=
"
stylesheet
"
href
=
"
chrome
:
/
/
browser
/
content
/
screenshots
/
screenshots
-
buttons
.
css
"
/
>
<
html
:
button
class
=
"
visible
-
page
footer
-
button
"
data
-
l10n
-
id
=
"
screenshots
-
save
-
visible
-
button
"
>
<
/
html
:
button
>
<
html
:
button
class
=
"
full
-
page
footer
-
button
"
data
-
l10n
-
id
=
"
screenshots
-
save
-
page
-
button
"
>
<
/
html
:
button
>
;
}
connectedCallback
(
)
{
const
shadowRoot
=
this
.
attachShadow
(
{
mode
:
"
open
"
}
)
;
document
.
l10n
.
connectRoot
(
shadowRoot
)
;
let
fragment
=
MozXULElement
.
parseXULToFragment
(
this
.
constructor
.
markup
)
;
this
.
shadowRoot
.
append
(
fragment
)
;
let
button1
=
shadowRoot
.
querySelector
(
"
.
visible
-
page
"
)
;
button1
.
onclick
=
function
(
)
{
Services
.
obs
.
notifyObservers
(
gBrowser
.
ownerGlobal
"
screenshots
-
take
-
screenshot
"
"
visible
"
)
;
}
;
let
button2
=
shadowRoot
.
querySelector
(
"
.
full
-
page
"
)
;
button2
.
onclick
=
function
(
)
{
Services
.
obs
.
notifyObservers
(
gBrowser
.
ownerGlobal
"
screenshots
-
take
-
screenshot
"
"
full
-
page
"
)
;
}
;
}
disconnectedCallback
(
)
{
document
.
l10n
.
disconnectRoot
(
this
.
shadowRoot
)
;
}
focusFirst
(
focusOptions
)
{
this
.
shadowRoot
.
querySelector
(
"
button
:
enabled
"
)
.
focus
(
focusOptions
)
;
}
}
customElements
.
define
(
"
screenshots
-
buttons
"
ScreenshotsButtons
{
extends
:
"
toolbar
"
}
)
;
}
