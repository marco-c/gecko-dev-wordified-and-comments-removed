"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ScreenshotsUtils
"
"
ScreenshotsComponentParent
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Downloads
:
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
}
)
;
const
PanelPosition
=
"
bottomright
topright
"
;
const
PanelOffsetX
=
-
33
;
const
PanelOffsetY
=
-
8
;
class
ScreenshotsComponentParent
extends
JSWindowActorParent
{
receiveMessage
(
message
)
{
let
browser
=
message
.
target
.
browsingContext
.
topFrameElement
;
switch
(
message
.
name
)
{
case
"
Screenshots
:
CancelScreenshot
"
:
ScreenshotsUtils
.
closePanel
(
browser
)
;
break
;
case
"
Screenshots
:
CopyScreenshot
"
:
ScreenshotsUtils
.
closePanel
(
browser
true
)
;
let
copyBox
=
message
.
data
;
ScreenshotsUtils
.
copyToClipboard
(
copyBox
browser
)
;
break
;
case
"
Screenshots
:
DownloadScreenshot
"
:
ScreenshotsUtils
.
closePanel
(
browser
true
)
;
let
{
title
downloadBox
}
=
message
.
data
;
ScreenshotsUtils
.
download
(
title
downloadBox
browser
)
;
break
;
}
}
didDestroy
(
)
{
let
browser
=
this
.
browsingContext
.
topFrameElement
;
if
(
browser
)
{
ScreenshotsUtils
.
closePanel
(
browser
false
)
;
}
}
}
var
ScreenshotsUtils
=
{
initialized
:
false
initialize
(
)
{
if
(
!
this
.
initialized
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
screenshots
.
browser
.
component
.
enabled
"
false
)
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
menuitem
-
screenshot
"
)
;
Services
.
obs
.
addObserver
(
this
"
screenshots
-
take
-
screenshot
"
)
;
this
.
initialized
=
true
;
if
(
Cu
.
isInAutomation
)
{
Services
.
obs
.
notifyObservers
(
null
"
screenshots
-
component
-
initialized
"
)
;
}
}
}
uninitialize
(
)
{
if
(
this
.
initialized
)
{
Services
.
obs
.
removeObserver
(
this
"
menuitem
-
screenshot
"
)
;
Services
.
obs
.
removeObserver
(
this
"
screenshots
-
take
-
screenshot
"
)
;
this
.
initialized
=
false
;
}
}
observe
(
subj
topic
data
)
{
let
{
gBrowser
}
=
subj
;
let
browser
=
gBrowser
.
selectedBrowser
;
let
zoom
=
subj
.
ZoomManager
.
getZoomForBrowser
(
browser
)
;
switch
(
topic
)
{
case
"
menuitem
-
screenshot
"
:
let
success
=
this
.
closeDialogBox
(
browser
)
;
if
(
!
success
|
|
data
=
=
=
"
retry
"
)
{
this
.
togglePreview
(
browser
)
;
}
break
;
case
"
screenshots
-
take
-
screenshot
"
:
this
.
closePanel
(
browser
)
;
let
dialogBox
=
gBrowser
.
getTabDialogBox
(
browser
)
;
let
{
dialog
}
=
dialogBox
.
open
(
chrome
:
/
/
browser
/
content
/
screenshots
/
screenshots
.
html
?
browsingContextId
=
{
browser
.
browsingContext
.
id
}
{
features
:
"
resizable
=
no
"
sizeTo
:
"
available
"
allowDuplicateDialogs
:
false
}
)
;
this
.
doScreenshot
(
browser
dialog
zoom
data
)
;
}
return
null
;
}
notify
(
window
type
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
screenshots
.
browser
.
component
.
enabled
"
)
)
{
Services
.
obs
.
notifyObservers
(
window
.
event
.
currentTarget
.
ownerGlobal
"
menuitem
-
screenshot
"
)
;
}
else
{
Services
.
obs
.
notifyObservers
(
null
"
menuitem
-
screenshot
-
extension
"
type
)
;
}
}
getActor
(
browser
)
{
let
actor
=
browser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
ScreenshotsComponent
"
)
;
return
actor
;
}
openPanel
(
browser
)
{
let
actor
=
this
.
getActor
(
browser
)
;
actor
.
sendQuery
(
"
Screenshots
:
ShowOverlay
"
)
;
this
.
createOrDisplayButtons
(
browser
)
;
}
closePanel
(
browser
closeOverlay
=
true
)
{
let
buttonsPanel
=
browser
.
ownerDocument
.
querySelector
(
"
#
screenshotsPagePanel
"
)
;
if
(
buttonsPanel
&
&
buttonsPanel
.
state
!
=
=
"
closed
"
)
{
buttonsPanel
.
hidePopup
(
)
;
}
if
(
closeOverlay
)
{
let
actor
=
this
.
getActor
(
browser
)
;
actor
.
sendQuery
(
"
Screenshots
:
HideOverlay
"
)
;
}
}
togglePreview
(
browser
)
{
let
buttonsPanel
=
browser
.
ownerDocument
.
querySelector
(
"
#
screenshotsPagePanel
"
)
;
if
(
buttonsPanel
&
&
buttonsPanel
.
state
!
=
=
"
closed
"
)
{
buttonsPanel
.
hidePopup
(
)
;
let
actor
=
this
.
getActor
(
browser
)
;
return
actor
.
sendQuery
(
"
Screenshots
:
HideOverlay
"
)
;
}
let
actor
=
this
.
getActor
(
browser
)
;
actor
.
sendQuery
(
"
Screenshots
:
ShowOverlay
"
)
;
return
this
.
createOrDisplayButtons
(
browser
)
;
}
getDialog
(
browser
)
{
let
currTabDialogBox
=
browser
.
tabDialogBox
;
let
browserContextId
=
browser
.
browsingContext
.
id
;
if
(
currTabDialogBox
)
{
currTabDialogBox
.
getTabDialogManager
(
)
;
let
manager
=
currTabDialogBox
.
getTabDialogManager
(
)
;
let
dialogs
=
manager
.
hasDialogs
&
&
manager
.
dialogs
;
if
(
dialogs
.
length
)
{
for
(
let
dialog
of
dialogs
)
{
if
(
dialog
.
_openedURL
.
endsWith
(
browsingContextId
=
{
browserContextId
}
)
&
&
dialog
.
_openedURL
.
includes
(
"
screenshots
.
html
"
)
)
{
return
dialog
;
}
}
}
}
return
null
;
}
closeDialogBox
(
browser
)
{
let
dialog
=
this
.
getDialog
(
browser
)
;
if
(
dialog
)
{
dialog
.
close
(
)
;
return
true
;
}
return
false
;
}
createOrDisplayButtons
(
browser
)
{
let
doc
=
browser
.
ownerDocument
;
let
buttonsPanel
=
doc
.
querySelector
(
"
#
screenshotsPagePanel
"
)
;
if
(
!
buttonsPanel
)
{
let
template
=
doc
.
querySelector
(
"
#
screenshotsPagePanelTemplate
"
)
;
let
clone
=
template
.
content
.
cloneNode
(
true
)
;
template
.
replaceWith
(
clone
)
;
buttonsPanel
=
doc
.
querySelector
(
"
#
screenshotsPagePanel
"
)
;
}
let
anchor
=
doc
.
querySelector
(
"
#
navigator
-
toolbox
"
)
;
buttonsPanel
.
openPopup
(
anchor
PanelPosition
PanelOffsetX
PanelOffsetY
)
;
}
fetchFullPageBounds
(
browser
)
{
let
actor
=
this
.
getActor
(
browser
)
;
return
actor
.
sendQuery
(
"
Screenshots
:
getFullPageBounds
"
)
;
}
fetchVisibleBounds
(
browser
)
{
let
actor
=
this
.
getActor
(
browser
)
;
return
actor
.
sendQuery
(
"
Screenshots
:
getVisibleBounds
"
)
;
}
async
doScreenshot
(
browser
dialog
zoom
type
)
{
await
dialog
.
_dialogReady
;
let
screenshotsUI
=
dialog
.
_frame
.
contentDocument
.
createElement
(
"
screenshots
-
ui
"
)
;
dialog
.
_frame
.
contentDocument
.
body
.
appendChild
(
screenshotsUI
)
;
let
rect
;
if
(
type
=
=
=
"
full
-
page
"
)
{
(
{
rect
}
=
await
this
.
fetchFullPageBounds
(
browser
)
)
;
}
else
{
(
{
rect
}
=
await
this
.
fetchVisibleBounds
(
browser
)
)
;
}
return
this
.
takeScreenshot
(
browser
dialog
rect
zoom
)
;
}
async
takeScreenshot
(
browser
dialog
rect
zoom
)
{
let
browsingContext
=
BrowsingContext
.
get
(
browser
.
browsingContext
.
id
)
;
let
snapshot
=
await
browsingContext
.
currentWindowGlobal
.
drawSnapshot
(
rect
zoom
"
rgb
(
255
255
255
)
"
)
;
let
canvas
=
dialog
.
_frame
.
contentDocument
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
html
:
canvas
"
)
;
let
context
=
canvas
.
getContext
(
"
2d
"
)
;
canvas
.
width
=
snapshot
.
width
;
canvas
.
height
=
snapshot
.
height
;
context
.
drawImage
(
snapshot
0
0
)
;
canvas
.
toBlob
(
function
(
blob
)
{
let
newImg
=
dialog
.
_frame
.
contentDocument
.
createElement
(
"
img
"
)
;
let
url
=
URL
.
createObjectURL
(
blob
)
;
newImg
.
id
=
"
placeholder
-
image
"
;
newImg
.
src
=
url
;
dialog
.
_frame
.
contentDocument
.
getElementById
(
"
preview
-
image
-
div
"
)
.
appendChild
(
newImg
)
;
if
(
Cu
.
isInAutomation
)
{
Services
.
obs
.
notifyObservers
(
null
"
screenshots
-
preview
-
ready
"
)
;
}
}
)
;
snapshot
.
close
(
)
;
}
async
copyToClipboard
(
box
browser
)
{
const
imageTools
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
;
let
rect
=
new
DOMRect
(
box
.
x1
box
.
y1
box
.
width
box
.
height
)
;
let
{
ZoomManager
}
=
browser
.
ownerGlobal
;
let
zoom
=
ZoomManager
.
getZoomForBrowser
(
browser
)
;
let
browsingContext
=
BrowsingContext
.
get
(
browser
.
browsingContext
.
id
)
;
let
snapshot
=
await
browsingContext
.
currentWindowGlobal
.
drawSnapshot
(
rect
zoom
"
rgb
(
255
255
255
)
"
)
;
let
canvas
=
browser
.
ownerDocument
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
html
:
canvas
"
)
;
let
context
=
canvas
.
getContext
(
"
2d
"
)
;
canvas
.
width
=
snapshot
.
width
;
canvas
.
height
=
snapshot
.
height
;
context
.
drawImage
(
snapshot
0
0
)
;
canvas
.
toBlob
(
function
(
blob
)
{
let
newImg
=
browser
.
ownerDocument
.
createElement
(
"
img
"
)
;
let
url
=
URL
.
createObjectURL
(
blob
)
;
newImg
.
onload
=
function
(
)
{
URL
.
revokeObjectURL
(
url
)
;
}
;
newImg
.
src
=
url
;
let
reader
=
new
FileReader
(
)
;
reader
.
readAsDataURL
(
blob
)
;
reader
.
onloadend
=
function
(
)
{
let
base64data
=
reader
.
result
;
const
base64Data
=
base64data
.
replace
(
"
data
:
image
/
png
;
base64
"
"
"
)
;
const
image
=
atob
(
base64Data
)
;
const
imgDecoded
=
imageTools
.
decodeImageFromBuffer
(
image
image
.
length
"
image
/
png
"
)
;
const
transferable
=
Cc
[
"
mozilla
.
org
/
widget
/
transferable
;
1
"
]
.
createInstance
(
Ci
.
nsITransferable
)
;
transferable
.
init
(
null
)
;
transferable
.
addDataFlavor
(
"
image
/
png
"
)
;
transferable
.
setTransferData
(
"
image
/
png
"
imgDecoded
)
;
Services
.
clipboard
.
setData
(
transferable
null
Services
.
clipboard
.
kGlobalClipboard
)
;
}
;
}
)
;
snapshot
.
close
(
)
;
}
async
download
(
title
box
browser
)
{
let
rect
=
new
DOMRect
(
box
.
x1
box
.
y1
box
.
width
box
.
height
)
;
let
{
ZoomManager
}
=
browser
.
ownerGlobal
;
let
zoom
=
ZoomManager
.
getZoomForBrowser
(
browser
)
;
let
browsingContext
=
BrowsingContext
.
get
(
browser
.
browsingContext
.
id
)
;
let
snapshot
=
await
browsingContext
.
currentWindowGlobal
.
drawSnapshot
(
rect
zoom
"
rgb
(
255
255
255
)
"
)
;
let
canvas
=
browser
.
ownerDocument
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
html
:
canvas
"
)
;
let
context
=
canvas
.
getContext
(
"
2d
"
)
;
canvas
.
width
=
snapshot
.
width
;
canvas
.
height
=
snapshot
.
height
;
context
.
drawImage
(
snapshot
0
0
)
;
canvas
.
toBlob
(
async
function
(
blob
)
{
let
url
=
URL
.
createObjectURL
(
blob
)
;
let
filename
=
ScreenshotsUtils
.
getFilename
(
title
)
;
if
(
!
url
)
{
return
;
}
if
(
!
filename
.
match
(
/
.
png
/
i
)
)
{
filename
+
=
"
.
png
"
;
}
const
downloadsDir
=
await
lazy
.
Downloads
.
getPreferredDownloadsDirectory
(
)
;
const
downloadsDirExists
=
await
IOUtils
.
exists
(
downloadsDir
)
;
if
(
downloadsDirExists
)
{
filename
=
PathUtils
.
join
(
downloadsDir
filename
)
;
}
const
sourceURI
=
Services
.
io
.
newURI
(
url
)
;
const
targetFile
=
new
lazy
.
FileUtils
.
File
(
filename
)
;
try
{
const
download
=
await
lazy
.
Downloads
.
createDownload
(
{
source
:
sourceURI
target
:
targetFile
}
)
;
const
list
=
await
lazy
.
Downloads
.
getList
(
lazy
.
Downloads
.
ALL
)
;
list
.
add
(
download
)
;
await
download
.
start
(
)
;
URL
.
revokeObjectURL
(
url
)
;
}
catch
(
ex
)
{
}
}
)
;
snapshot
.
close
(
)
;
}
getFilename
(
filenameTitle
)
{
const
date
=
new
Date
(
)
;
filenameTitle
=
filenameTitle
.
replace
(
/
[
\
\
/
]
/
g
"
_
"
)
.
replace
(
/
[
\
u200e
\
u200f
\
u202a
-
\
u202e
]
/
g
"
"
)
.
replace
(
/
[
\
x00
-
\
x1f
\
x7f
-
\
x9f
:
*
?
|
"
<
>
;
+
=
\
[
\
]
]
+
/
g
"
"
)
.
replace
(
/
^
[
\
s
\
u180e
.
]
+
|
[
\
s
\
u180e
.
]
+
/
g
"
"
)
;
filenameTitle
=
filenameTitle
.
replace
(
/
\
s
{
1
4000
}
/
g
"
"
)
;
const
currentDateTime
=
new
Date
(
date
.
getTime
(
)
-
date
.
getTimezoneOffset
(
)
*
60
*
1000
)
.
toISOString
(
)
;
const
filenameDate
=
currentDateTime
.
substring
(
0
10
)
;
const
filenameTime
=
currentDateTime
.
substring
(
11
19
)
.
replace
(
/
:
/
g
"
-
"
)
;
let
clipFilename
=
Screenshot
{
filenameDate
}
at
{
filenameTime
}
{
filenameTitle
}
;
let
suffix
=
"
"
;
for
(
let
cropSize
=
246
;
cropSize
>
=
0
;
cropSize
-
=
32
)
{
if
(
new
Blob
(
[
clipFilename
]
)
.
size
>
246
)
{
clipFilename
=
clipFilename
.
substring
(
0
cropSize
)
;
suffix
=
"
[
.
.
.
]
"
;
}
else
{
break
;
}
}
clipFilename
+
=
suffix
;
let
extension
=
"
.
png
"
;
return
clipFilename
+
extension
;
}
}
;
