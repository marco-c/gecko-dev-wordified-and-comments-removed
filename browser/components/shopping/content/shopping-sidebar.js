"
use
strict
"
;
{
class
ShoppingSidebar
extends
MozXULElement
{
#
browser
;
#
initialized
;
static
get
observedAttributes
(
)
{
return
[
"
url
"
]
;
}
static
get
markup
(
)
{
return
<
browser
class
=
"
shopping
-
sidebar
"
autoscroll
=
"
false
"
disablefullscreen
=
"
true
"
disablehistory
=
"
true
"
flex
=
"
1
"
message
=
"
true
"
remotetype
=
"
privilegedabout
"
remote
=
"
true
"
selectmenulist
=
"
contentselectdropdown
"
src
=
"
chrome
:
/
/
browser
/
content
/
shopping
/
shopping
.
html
"
type
=
"
content
"
/
>
;
}
constructor
(
)
{
super
(
)
;
}
connectedCallback
(
)
{
this
.
initialize
(
)
;
}
initialize
(
)
{
if
(
this
.
#
initialized
)
{
return
;
}
this
.
appendChild
(
this
.
constructor
.
fragment
)
;
this
.
#
browser
=
this
.
querySelector
(
"
.
shopping
-
sidebar
"
)
;
this
.
#
initialized
=
true
;
}
attributeChangedCallback
(
name
oldValue
newValue
)
{
if
(
newValue
)
{
this
.
initialize
(
)
;
}
this
.
update
(
newValue
)
;
}
update
(
productURL
)
{
if
(
!
productURL
)
{
this
.
#
browser
.
src
=
"
chrome
:
/
/
browser
/
content
/
shopping
/
shopping
.
html
"
;
return
;
}
this
.
#
browser
.
src
=
"
chrome
:
/
/
browser
/
content
/
shopping
/
shopping
.
html
?
url
=
"
+
productURL
;
}
}
customElements
.
define
(
"
shopping
-
sidebar
"
ShoppingSidebar
)
;
}
