"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ShoppingUtils
:
"
resource
:
/
/
/
modules
/
ShoppingUtils
.
sys
.
mjs
"
}
)
;
const
{
SpecialMessageActions
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
messaging
-
system
/
lib
/
SpecialMessageActions
.
sys
.
mjs
"
)
;
function
setOnboardingPrefs
(
states
=
{
}
)
{
if
(
Object
.
hasOwn
(
states
"
handledAutoActivate
"
)
)
{
ShoppingUtils
.
handledAutoActivate
=
!
!
states
.
handledAutoActivate
;
}
if
(
Object
.
hasOwn
(
states
"
lastAutoActivate
"
)
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
shopping
.
experience2023
.
lastAutoActivate
"
states
.
lastAutoActivate
)
;
}
if
(
Object
.
hasOwn
(
states
"
autoActivateCount
"
)
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
shopping
.
experience2023
.
autoActivateCount
"
states
.
autoActivateCount
)
;
}
if
(
Object
.
hasOwn
(
states
"
optedIn
"
)
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
shopping
.
experience2023
.
optedIn
"
states
.
optedIn
)
;
}
if
(
Object
.
hasOwn
(
states
"
active
"
)
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
states
.
active
)
;
}
if
(
Object
.
hasOwn
(
states
"
telemetryEnabled
"
)
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
"
states
.
telemetryEnabled
)
;
}
if
(
Object
.
hasOwn
(
states
"
autoOpenEnabled
"
)
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
shopping
.
experience2023
.
autoOpen
.
enabled
"
states
.
autoOpenEnabled
)
;
}
}
add_setup
(
async
function
setup
(
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
registerCleanupFunction
(
(
)
=
>
setOnboardingPrefs
(
{
active
:
true
optedIn
:
1
lastAutoActivate
:
0
autoActivateCount
:
0
handledAutoActivate
:
false
telementryEnabled
:
false
autoOpenEnabled
:
false
}
)
)
;
}
)
;
add_task
(
async
function
test_onOptIn
(
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
telemetryEnabled
:
true
autoOpenEnabled
:
true
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
{
PRODUCT_TEST_URL
}
]
async
_args
=
>
{
await
ContentTaskUtils
.
waitForMutationCondition
(
content
.
document
{
childList
:
true
subtree
:
true
}
(
)
=
>
!
!
content
.
document
.
querySelector
(
"
shopping
-
container
.
primary
"
)
)
;
let
primary
=
content
.
document
.
querySelector
(
"
shopping
-
container
.
primary
"
)
;
primary
.
click
(
)
;
}
)
;
}
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
let
events
=
Glean
.
shopping
.
surfaceOptInClicked
.
testGetValue
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
let
_events
=
Glean
.
shopping
.
surfaceOptInClicked
.
testGetValue
(
)
;
return
_events
?
.
length
>
0
;
}
)
;
Assert
.
greater
(
events
.
length
0
)
;
Assert
.
equal
(
events
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
events
[
0
]
.
name
"
surface_opt_in_clicked
"
)
;
}
)
;
async
function
linkParagraphClickLinks
(
)
{
const
sandbox
=
sinon
.
createSandbox
(
)
;
let
handleActionStub
=
sandbox
.
stub
(
SpecialMessageActions
"
handleAction
"
)
.
withArgs
(
sandbox
.
match
(
{
type
:
"
OPEN_URL
"
}
)
)
;
let
handleActionStubCalled
=
new
Promise
(
resolve
=
>
handleActionStub
.
callsFake
(
resolve
)
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
{
PRODUCT_TEST_URL
}
]
async
_args
=
>
{
await
ContentTaskUtils
.
waitForMutationCondition
(
content
.
document
{
childList
:
true
subtree
:
true
}
(
)
=
>
!
!
content
.
document
.
querySelector
(
"
.
legal
-
paragraph
a
[
value
=
'
terms_of_use
'
]
"
)
)
;
let
termsOfUse
=
content
.
document
.
querySelector
(
"
shopping
-
container
.
legal
-
paragraph
a
[
value
=
'
terms_of_use
'
]
"
)
;
termsOfUse
.
click
(
)
;
}
)
;
}
)
;
await
handleActionStubCalled
;
handleActionStub
.
resetHistory
(
)
;
handleActionStubCalled
=
new
Promise
(
resolve
=
>
handleActionStub
.
callsFake
(
resolve
)
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
{
PRODUCT_TEST_URL
}
]
async
_args
=
>
{
await
ContentTaskUtils
.
waitForMutationCondition
(
content
.
document
{
childList
:
true
subtree
:
true
}
(
)
=
>
!
!
content
.
document
.
querySelector
(
"
.
legal
-
paragraph
a
[
value
=
'
terms_of_use
'
]
"
)
)
;
let
privacyPolicy
=
content
.
document
.
querySelector
(
"
shopping
-
container
.
legal
-
paragraph
a
[
value
=
'
privacy_policy
'
]
"
)
;
privacyPolicy
.
click
(
)
;
}
)
;
}
)
;
await
handleActionStubCalled
;
handleActionStub
.
resetHistory
(
)
;
handleActionStubCalled
=
new
Promise
(
resolve
=
>
handleActionStub
.
callsFake
(
resolve
)
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
{
PRODUCT_TEST_URL
}
]
async
_args
=
>
{
await
ContentTaskUtils
.
waitForMutationCondition
(
content
.
document
{
childList
:
true
subtree
:
true
}
(
)
=
>
content
.
document
.
querySelector
(
"
.
link
-
paragraph
a
"
)
)
;
let
learnMore
=
content
.
document
.
querySelector
(
"
shopping
-
container
.
link
-
paragraph
a
[
value
=
'
learn_more
'
]
"
)
;
learnMore
.
click
(
)
;
}
)
;
}
)
;
await
handleActionStubCalled
;
sandbox
.
restore
(
)
;
}
add_task
(
async
function
test_linkParagraph
(
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
telemetryEnabled
:
true
autoOpenEnabled
:
true
}
)
;
await
linkParagraphClickLinks
(
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
let
privacyEvents
=
Glean
.
shopping
.
surfaceShowPrivacyPolicyClicked
.
testGetValue
(
)
;
Assert
.
greater
(
privacyEvents
.
length
0
)
;
Assert
.
equal
(
privacyEvents
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
privacyEvents
[
0
]
.
name
"
surface_show_privacy_policy_clicked
"
)
;
let
tosEvents
=
Glean
.
shopping
.
surfaceShowTermsClicked
.
testGetValue
(
)
;
Assert
.
greater
(
tosEvents
.
length
0
)
;
Assert
.
equal
(
tosEvents
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
tosEvents
[
0
]
.
name
"
surface_show_terms_clicked
"
)
;
let
learnMoreEvents
=
Glean
.
shopping
.
surfaceLearnMoreClicked
.
testGetValue
(
)
;
Assert
.
greater
(
learnMoreEvents
.
length
0
)
;
Assert
.
equal
(
learnMoreEvents
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
learnMoreEvents
[
0
]
.
name
"
surface_learn_more_clicked
"
)
;
}
)
;
add_task
(
async
function
test_onboarding_auto_activate_opt_in
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
userprefs
.
cfr
.
features
"
true
]
]
}
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
lastAutoActivate
:
0
autoActivateCount
:
0
handledAutoActivate
:
false
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Global
toggle
should
be
activated
to
open
the
sidebar
on
PDPs
"
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
1
lastAutoActivate
:
0
autoActivateCount
:
1
handledAutoActivate
:
false
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Global
toggle
should
not
activate
again
since
user
is
opted
in
"
)
;
}
)
;
add_task
(
async
function
test_onboarding_auto_activate_not_now
(
)
{
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
lastAutoActivate
:
0
autoActivateCount
:
0
handledAutoActivate
:
false
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Global
toggle
should
be
activated
to
open
the
sidebar
on
PDPs
"
)
;
setOnboardingPrefs
(
{
active
:
false
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Global
toggle
should
not
activate
again
this
session
"
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
lastAutoActivate
:
0
autoActivateCount
:
0
handledAutoActivate
:
true
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Shopping
sidebar
should
not
auto
-
activate
if
auto
-
activated
previously
this
session
"
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
lastAutoActivate
:
Date
.
now
(
)
/
1000
autoActivateCount
:
1
handledAutoActivate
:
false
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Shopping
sidebar
should
not
auto
-
activate
if
last
auto
-
activation
was
less
than
24
hours
ago
"
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
lastAutoActivate
:
0
autoActivateCount
:
2
handledAutoActivate
:
false
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Shopping
sidebar
should
not
auto
-
activate
if
it
has
already
been
auto
-
activated
twice
"
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
lastAutoActivate
:
Date
.
now
(
)
/
1000
-
2
*
24
*
60
*
60
autoActivateCount
:
1
handledAutoActivate
:
false
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Shopping
sidebar
should
auto
-
activate
a
second
time
if
all
conditions
are
met
"
)
;
}
)
;
add_task
(
async
function
test_deactivate_sidebar_if_user_turns_off_cfr
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
userprefs
.
cfr
.
features
"
false
]
]
}
)
;
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
lastAutoActivate
:
0
autoActivateCount
:
0
handledAutoActivate
:
false
autoOpenEnabled
:
true
}
)
;
ShoppingUtils
.
handleAutoActivateOnProduct
(
)
;
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
)
"
Shopping
sidebar
should
not
auto
-
activate
if
Recommended
features
is
turned
off
"
)
;
}
)
;
