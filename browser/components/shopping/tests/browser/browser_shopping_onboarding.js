"
use
strict
"
;
add_task
(
async
function
test_showOnboarding_notOptedIn
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
0
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
shoppingContainer
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
"
shopping
-
container
"
)
;
let
containerElem
=
shoppingContainer
.
shadowRoot
.
getElementById
(
"
shopping
-
container
"
)
;
let
messageSlot
=
containerElem
.
getElementsByTagName
(
"
slot
"
)
;
ok
(
messageSlot
.
length
message
slot
element
exists
)
;
is
(
messageSlot
[
0
]
.
name
"
multi
-
stage
-
message
-
slot
"
"
multi
-
stage
-
message
-
slot
showing
opt
-
in
message
rendered
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_hideOnboarding_optedIn
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
1
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
shoppingContainer
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
"
shopping
-
container
"
)
;
let
containerElem
=
shoppingContainer
.
shadowRoot
.
getElementById
(
"
shopping
-
container
"
)
;
let
messageSlot
=
containerElem
.
getElementsByTagName
(
"
slot
"
)
;
ok
(
!
messageSlot
.
length
message
slot
element
doesn
'
t
exist
)
;
}
)
;
}
)
;
}
)
;
