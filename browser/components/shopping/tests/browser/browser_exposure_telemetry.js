"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ShoppingUtils
:
"
resource
:
/
/
/
modules
/
ShoppingUtils
.
sys
.
mjs
"
}
)
;
const
PRODUCT_PAGE
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
/
product
/
B09TJGHL5F
"
)
;
const
WALMART_PAGE
=
Services
.
io
.
newURI
(
"
https
:
/
/
www
.
walmart
.
com
/
ip
/
Utz
-
Cheese
-
Balls
-
23
-
Oz
/
15543964
"
)
;
const
WALMART_OTHER_PAGE
=
Services
.
io
.
newURI
(
"
https
:
/
/
www
.
walmart
.
com
/
ip
/
Utz
-
Gluten
-
Free
-
Cheese
-
Balls
-
23
-
0
-
OZ
/
10898644
"
)
;
async
function
setup
(
pref
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
browser
.
shopping
.
experience2023
.
{
pref
}
true
]
]
}
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
async
function
teardown
(
pref
)
{
await
SpecialPowers
.
popPrefEnv
(
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
ShoppingUtils
.
lastWalmartURI
=
null
;
}
async
function
runTest
(
{
aLocationURI
aFlags
expected
}
)
{
async
function
_run
(
)
{
Assert
.
equal
(
undefined
Glean
.
shopping
.
productPageVisits
.
testGetValue
(
)
)
;
ShoppingUtils
.
onLocationChange
(
aLocationURI
aFlags
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Assert
.
equal
(
expected
Glean
.
shopping
.
productPageVisits
.
testGetValue
(
)
)
;
}
await
setup
(
"
enabled
"
)
;
await
_run
(
)
;
await
teardown
(
"
enabled
"
)
;
await
setup
(
"
control
"
)
;
await
_run
(
)
;
await
teardown
(
"
control
"
)
;
}
add_task
(
async
function
test_shopping_exposure_new_page
(
)
{
await
runTest
(
{
aLocationURI
:
PRODUCT_PAGE
aFlags
:
0
expected
:
1
}
)
;
}
)
;
add_task
(
async
function
test_shopping_exposure_reload_page
(
)
{
await
runTest
(
{
aLocationURI
:
PRODUCT_PAGE
aFlags
:
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_RELOAD
expected
:
1
}
)
;
}
)
;
add_task
(
async
function
test_shopping_exposure_session_restore_page
(
)
{
await
runTest
(
{
aLocationURI
:
PRODUCT_PAGE
aFlags
:
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SESSION_STORE
expected
:
1
}
)
;
}
)
;
add_task
(
async
function
test_shopping_exposure_ignore_same_page
(
)
{
await
runTest
(
{
aLocationURI
:
PRODUCT_PAGE
aFlags
:
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
expected
:
undefined
}
)
;
}
)
;
add_task
(
async
function
test_shopping_exposure_count_same_page_pushstate
(
)
{
await
runTest
(
{
aLocationURI
:
WALMART_PAGE
aFlags
:
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
expected
:
1
}
)
;
}
)
;
add_task
(
async
function
test_shopping_exposure_ignore_pushstate_repeats
(
)
{
async
function
_run
(
)
{
let
aFlags
=
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
;
Assert
.
equal
(
undefined
Glean
.
shopping
.
productPageVisits
.
testGetValue
(
)
)
;
ShoppingUtils
.
lastWalmartURI
=
WALMART_PAGE
;
ShoppingUtils
.
onLocationChange
(
WALMART_PAGE
aFlags
)
;
ShoppingUtils
.
onLocationChange
(
WALMART_OTHER_PAGE
aFlags
)
;
ShoppingUtils
.
onLocationChange
(
WALMART_OTHER_PAGE
aFlags
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Assert
.
equal
(
1
Glean
.
shopping
.
productPageVisits
.
testGetValue
(
)
)
;
}
await
setup
(
"
enabled
"
)
;
await
_run
(
)
;
await
teardown
(
"
enabled
"
)
;
await
setup
(
"
control
"
)
;
await
_run
(
)
;
await
teardown
(
"
control
"
)
;
}
)
;
