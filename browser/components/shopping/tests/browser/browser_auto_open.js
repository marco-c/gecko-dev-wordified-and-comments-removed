"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ShoppingUtils
:
"
resource
:
/
/
/
modules
/
ShoppingUtils
.
sys
.
mjs
"
}
)
;
const
ACTIVE_PREF
=
"
browser
.
shopping
.
experience2023
.
active
"
;
const
AUTO_OPEN_ENABLED_PREF
=
"
browser
.
shopping
.
experience2023
.
autoOpen
.
enabled
"
;
const
AUTO_OPEN_USER_ENABLED_PREF
=
"
browser
.
shopping
.
experience2023
.
autoOpen
.
userEnabled
"
;
const
PRODUCT_PAGE
=
"
https
:
/
/
example
.
com
/
product
/
B09TJGHL5F
"
;
const
productURI
=
Services
.
io
.
newURI
(
PRODUCT_PAGE
)
;
async
function
trigger_auto_open_flow
(
expectedActivePrefValue
)
{
Services
.
prefs
.
setBoolPref
(
ACTIVE_PREF
false
)
;
ShoppingUtils
.
onLocationChange
(
productURI
0
)
;
await
TestUtils
.
waitForTick
(
)
;
Assert
.
equal
(
expectedActivePrefValue
Services
.
prefs
.
getBoolPref
(
ACTIVE_PREF
false
)
)
;
}
add_task
(
async
function
test_auto_open
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
1
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
enabled
"
true
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
userEnabled
"
true
]
]
}
)
;
await
trigger_auto_open_flow
(
true
)
;
}
)
;
add_task
(
async
function
test_auto_open_disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
1
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
enabled
"
false
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
userEnabled
"
true
]
]
}
)
;
await
trigger_auto_open_flow
(
false
)
;
}
)
;
add_task
(
async
function
test_auto_open_user_disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
1
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
enabled
"
true
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
userEnabled
"
false
]
]
}
)
;
await
trigger_auto_open_flow
(
false
)
;
}
)
;
add_task
(
async
function
test_auto_open_not_opted_in
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
0
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
enabled
"
true
]
[
"
browser
.
shopping
.
experience2023
.
autoOpen
.
userEnabled
"
true
]
]
}
)
;
await
trigger_auto_open_flow
(
false
)
;
}
)
;
