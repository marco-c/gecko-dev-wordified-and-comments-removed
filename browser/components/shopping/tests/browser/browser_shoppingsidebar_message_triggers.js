"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ShoppingUtils
:
"
resource
:
/
/
/
modules
/
ShoppingUtils
.
sys
.
mjs
"
}
)
;
const
{
ASRouter
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
asrouter
/
ASRouter
.
sys
.
mjs
"
)
;
const
{
FeatureCalloutMessages
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
asrouter
/
FeatureCalloutMessages
.
sys
.
mjs
"
)
;
const
OPTED_IN_PREF
=
"
browser
.
shopping
.
experience2023
.
optedIn
"
;
const
ACTIVE_PREF
=
"
browser
.
shopping
.
experience2023
.
active
"
;
const
CFR_ENABLED_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
userprefs
.
cfr
.
features
"
;
const
CONTENT_PAGE
=
"
https
:
/
/
example
.
com
"
;
const
PRODUCT_PAGE
=
"
https
:
/
/
example
.
com
/
product
/
B09TJGHL5F
"
;
add_setup
(
async
function
setup
(
)
{
ShoppingUtils
.
handledAutoActivate
=
true
;
registerCleanupFunction
(
(
)
=
>
{
ShoppingUtils
.
handledAutoActivate
=
false
;
}
)
;
}
)
;
add_task
(
async
function
test_fakespot_callouts_opted_in_flow
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CFR_ENABLED_PREF
true
]
]
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
routeCFRMessageStub
=
sandbox
.
stub
(
ASRouter
"
routeCFRMessage
"
)
.
withArgs
(
sinon
.
match
.
any
sinon
.
match
.
any
sinon
.
match
(
{
id
:
"
shoppingProductPageWithSidebarClosed
"
}
)
)
;
await
ASRouter
.
_updateMessageProviders
(
)
;
await
ASRouter
.
loadMessagesFromAllProviders
(
ASRouter
.
state
.
providers
.
filter
(
p
=
>
p
.
id
=
=
=
"
onboarding
"
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
ACTIVE_PREF
true
]
[
OPTED_IN_PREF
0
]
]
}
)
;
let
pdpTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PRODUCT_PAGE
)
;
let
pdpBrowser
=
pdpTab
.
linkedBrowser
;
let
pdpBrowserPanel
=
gBrowser
.
getPanel
(
pdpBrowser
)
;
let
isSidebarVisible
=
(
)
=
>
{
let
sidebar
=
pdpBrowserPanel
.
querySelector
(
"
shopping
-
sidebar
"
)
;
return
sidebar
&
&
BrowserTestUtils
.
isVisible
(
sidebar
)
;
}
;
await
BrowserTestUtils
.
waitForMutationCondition
(
pdpBrowserPanel
{
childList
:
true
attributeFilter
:
[
"
hidden
"
]
}
isSidebarVisible
)
;
ok
(
isSidebarVisible
(
)
"
Shopping
sidebar
should
be
open
on
a
product
page
"
)
;
ok
(
routeCFRMessageStub
.
neverCalledWithMatch
(
sinon
.
match
.
any
sinon
.
match
.
any
sinon
.
match
(
{
id
:
"
shoppingProductPageWithSidebarClosed
"
}
)
)
"
shoppingProductPageWithSidebarClosed
should
not
fire
when
sidebar
is
active
"
)
;
let
prefChanged
=
TestUtils
.
waitForPrefChange
(
OPTED_IN_PREF
value
=
>
value
=
=
=
1
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
OPTED_IN_PREF
1
]
]
}
)
;
await
prefChanged
;
let
shoppingProductPageWithSidebarClosedMsg
=
new
Promise
(
resolve
=
>
{
routeCFRMessageStub
.
callsFake
(
(
message
browser
trigger
)
=
>
{
if
(
trigger
.
id
=
=
=
"
shoppingProductPageWithSidebarClosed
"
&
&
trigger
.
context
.
isSidebarClosing
)
{
resolve
(
message
?
.
id
)
;
}
}
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
ACTIVE_PREF
false
]
]
}
)
;
is
(
await
shoppingProductPageWithSidebarClosedMsg
"
FAKESPOT_CALLOUT_CLOSED_OPTED_IN_DEFAULT
"
"
Should
route
the
expected
message
:
FAKESPOT_CALLOUT_CLOSED_OPTED_IN_DEFAULT
"
)
;
BrowserTestUtils
.
removeTab
(
pdpTab
)
;
shoppingProductPageWithSidebarClosedMsg
=
new
Promise
(
resolve
=
>
{
routeCFRMessageStub
.
callsFake
(
(
message
browser
trigger
)
=
>
{
if
(
trigger
.
id
=
=
=
"
shoppingProductPageWithSidebarClosed
"
&
&
!
trigger
.
context
.
isSidebarClosing
)
{
resolve
(
message
?
.
id
)
;
}
}
)
;
}
)
;
pdpTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PRODUCT_PAGE
)
;
isnot
(
await
shoppingProductPageWithSidebarClosedMsg
"
FAKESPOT_CALLOUT_PDP_OPTED_IN_DEFAULT
"
"
Should
not
route
the
on
-
PDP
message
because
the
on
-
close
message
was
seen
recently
"
)
;
BrowserTestUtils
.
removeTab
(
pdpTab
)
;
let
lastClosedDate
=
Date
.
now
(
)
-
25
*
60
*
60
*
1000
;
await
ASRouter
.
setState
(
state
=
>
{
const
messageImpressions
=
{
.
.
.
state
.
messageImpressions
}
;
messageImpressions
.
FAKESPOT_CALLOUT_CLOSED_OPTED_IN_DEFAULT
=
[
lastClosedDate
]
;
ASRouter
.
_storage
.
set
(
"
messageImpressions
"
messageImpressions
)
;
return
{
messageImpressions
}
;
}
)
;
shoppingProductPageWithSidebarClosedMsg
=
new
Promise
(
resolve
=
>
{
routeCFRMessageStub
.
callsFake
(
(
message
browser
trigger
)
=
>
{
if
(
trigger
.
id
=
=
=
"
shoppingProductPageWithSidebarClosed
"
&
&
!
trigger
.
context
.
isSidebarClosing
)
{
resolve
(
message
?
.
id
)
;
}
}
)
;
}
)
;
pdpTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PRODUCT_PAGE
)
;
is
(
await
shoppingProductPageWithSidebarClosedMsg
"
FAKESPOT_CALLOUT_PDP_OPTED_IN_DEFAULT
"
"
Should
route
the
on
-
PDP
message
"
)
;
BrowserTestUtils
.
removeTab
(
pdpTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
ASRouter
.
setState
(
state
=
>
{
const
messageImpressions
=
{
.
.
.
state
.
messageImpressions
}
;
delete
messageImpressions
.
FAKESPOT_CALLOUT_CLOSED_OPTED_IN_DEFAULT
;
ASRouter
.
_storage
.
set
(
"
messageImpressions
"
messageImpressions
)
;
return
{
messageImpressions
}
;
}
)
;
sandbox
.
restore
(
)
;
await
ASRouter
.
_updateMessageProviders
(
)
;
await
ASRouter
.
loadMessagesFromAllProviders
(
ASRouter
.
state
.
providers
.
filter
(
p
=
>
p
.
id
=
=
=
"
onboarding
"
)
)
;
}
)
;
add_task
(
async
function
test_fakespot_callouts_not_opted_in_flow
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CFR_ENABLED_PREF
true
]
]
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
routeCFRMessageStub
=
sandbox
.
stub
(
ASRouter
"
routeCFRMessage
"
)
.
withArgs
(
sinon
.
match
.
any
sinon
.
match
.
any
sinon
.
match
(
{
id
:
"
shoppingProductPageWithSidebarClosed
"
}
)
)
;
await
ASRouter
.
_updateMessageProviders
(
)
;
await
ASRouter
.
loadMessagesFromAllProviders
(
ASRouter
.
state
.
providers
.
filter
(
p
=
>
p
.
id
=
=
=
"
onboarding
"
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
ACTIVE_PREF
true
]
[
OPTED_IN_PREF
0
]
]
}
)
;
let
pdpTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PRODUCT_PAGE
)
;
let
pdpBrowser
=
pdpTab
.
linkedBrowser
;
let
pdpBrowserPanel
=
gBrowser
.
getPanel
(
pdpBrowser
)
;
let
isSidebarVisible
=
(
)
=
>
{
let
sidebar
=
pdpBrowserPanel
.
querySelector
(
"
shopping
-
sidebar
"
)
;
return
sidebar
&
&
BrowserTestUtils
.
isVisible
(
sidebar
)
;
}
;
await
BrowserTestUtils
.
waitForMutationCondition
(
pdpBrowserPanel
{
childList
:
true
attributeFilter
:
[
"
hidden
"
]
}
isSidebarVisible
)
;
ok
(
isSidebarVisible
(
)
"
Shopping
sidebar
should
be
open
on
a
product
page
"
)
;
let
shoppingProductPageWithSidebarClosedMsg
=
new
Promise
(
resolve
=
>
{
routeCFRMessageStub
.
callsFake
(
(
message
browser
trigger
)
=
>
{
if
(
trigger
.
id
=
=
=
"
shoppingProductPageWithSidebarClosed
"
&
&
trigger
.
context
.
isSidebarClosing
)
{
resolve
(
message
?
.
id
)
;
}
}
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
ACTIVE_PREF
false
]
]
}
)
;
is
(
await
shoppingProductPageWithSidebarClosedMsg
"
FAKESPOT_CALLOUT_CLOSED_NOT_OPTED_IN_DEFAULT
"
"
Should
route
the
expected
message
:
FAKESPOT_CALLOUT_CLOSED_NOT_OPTED_IN_DEFAULT
"
)
;
BrowserTestUtils
.
removeTab
(
pdpTab
)
;
let
lastClosedDate
=
Date
.
now
(
)
-
25
*
60
*
60
*
1000
;
await
ASRouter
.
setState
(
state
=
>
{
const
messageImpressions
=
{
.
.
.
state
.
messageImpressions
}
;
messageImpressions
.
FAKESPOT_CALLOUT_CLOSED_NOT_OPTED_IN_DEFAULT
=
[
lastClosedDate
]
;
ASRouter
.
_storage
.
set
(
"
messageImpressions
"
messageImpressions
)
;
return
{
messageImpressions
}
;
}
)
;
shoppingProductPageWithSidebarClosedMsg
=
new
Promise
(
resolve
=
>
{
routeCFRMessageStub
.
callsFake
(
(
message
browser
trigger
)
=
>
{
if
(
trigger
.
id
=
=
=
"
shoppingProductPageWithSidebarClosed
"
&
&
!
trigger
.
context
.
isSidebarClosing
)
{
resolve
(
message
?
.
id
)
;
}
}
)
;
}
)
;
pdpTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PRODUCT_PAGE
)
;
isnot
(
await
shoppingProductPageWithSidebarClosedMsg
"
FAKESPOT_CALLOUT_PDP_OPTED_IN_DEFAULT
"
"
Should
not
route
the
on
-
PDP
message
because
the
user
is
not
opted
in
"
)
;
BrowserTestUtils
.
removeTab
(
pdpTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
ASRouter
.
setState
(
state
=
>
{
const
messageImpressions
=
{
.
.
.
state
.
messageImpressions
}
;
delete
messageImpressions
.
FAKESPOT_CALLOUT_CLOSED_NOT_OPTED_IN_DEFAULT
;
ASRouter
.
_storage
.
set
(
"
messageImpressions
"
messageImpressions
)
;
return
{
messageImpressions
}
;
}
)
;
sandbox
.
restore
(
)
;
await
ASRouter
.
_updateMessageProviders
(
)
;
await
ASRouter
.
loadMessagesFromAllProviders
(
ASRouter
.
state
.
providers
.
filter
(
p
=
>
p
.
id
=
=
=
"
onboarding
"
)
)
;
}
)
;
