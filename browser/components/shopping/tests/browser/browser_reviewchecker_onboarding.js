"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ShoppingUtils
:
"
resource
:
/
/
/
modules
/
ShoppingUtils
.
sys
.
mjs
"
}
)
;
const
{
SpecialMessageActions
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
messaging
-
system
/
lib
/
SpecialMessageActions
.
sys
.
mjs
"
)
;
const
PRODUCT_URI
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
/
product
/
B09TJGHL5F
"
)
;
const
CONTENT_PAGE_URI
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
const
UNSUPPORTED_NON_PDP_URI
=
Services
.
io
.
newURI
(
"
about
:
about
"
)
;
const
REVIEW_CHECKER_ACTOR
=
"
ReviewChecker
"
;
function
setOnboardingPrefs
(
states
=
{
}
)
{
if
(
Object
.
hasOwn
(
states
"
handledAutoActivate
"
)
)
{
ShoppingUtils
.
handledAutoActivate
=
!
!
states
.
handledAutoActivate
;
}
if
(
Object
.
hasOwn
(
states
"
lastAutoActivate
"
)
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
shopping
.
experience2023
.
lastAutoActivate
"
states
.
lastAutoActivate
)
;
}
if
(
Object
.
hasOwn
(
states
"
autoActivateCount
"
)
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
shopping
.
experience2023
.
autoActivateCount
"
states
.
autoActivateCount
)
;
}
if
(
Object
.
hasOwn
(
states
"
optedIn
"
)
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
shopping
.
experience2023
.
optedIn
"
states
.
optedIn
)
;
}
if
(
Object
.
hasOwn
(
states
"
active
"
)
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
shopping
.
experience2023
.
active
"
states
.
active
)
;
}
if
(
Object
.
hasOwn
(
states
"
telemetryEnabled
"
)
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
"
states
.
telemetryEnabled
)
;
}
}
add_setup
(
async
function
setup
(
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
registerCleanupFunction
(
(
)
=
>
setOnboardingPrefs
(
{
active
:
true
optedIn
:
1
lastAutoActivate
:
0
autoActivateCount
:
0
handledAutoActivate
:
false
telementryEnabled
:
false
}
)
)
;
}
)
;
add_task
(
async
function
test_showOnboarding_notOptedIn
(
)
{
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
telemetryEnabled
:
true
}
)
;
Services
.
fog
.
testResetFOG
(
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
let
actor
=
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getExistingActor
(
REVIEW_CHECKER_ACTOR
)
;
actor
.
updateCurrentURL
(
PRODUCT_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
shoppingContainer
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
"
shopping
-
container
"
)
;
let
containerElem
=
shoppingContainer
.
shadowRoot
.
getElementById
(
"
shopping
-
container
"
)
;
let
messageSlot
=
containerElem
.
getElementsByTagName
(
"
slot
"
)
;
ok
(
messageSlot
.
length
message
slot
element
exists
)
;
is
(
messageSlot
[
0
]
.
name
"
multi
-
stage
-
message
-
slot
"
"
multi
-
stage
-
message
-
slot
showing
opt
-
in
message
rendered
"
)
;
ok
(
!
content
.
document
.
getElementById
(
"
multi
-
stage
-
message
-
root
"
)
.
hidden
"
message
is
shown
"
)
;
ok
(
content
.
document
.
querySelector
(
"
.
FS_OPT_IN_SIDEBAR_VARIANT
"
)
"
Rendered
correct
message
"
)
;
}
)
;
}
)
;
if
(
!
AppConstants
.
platform
!
=
"
linux
"
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
const
events
=
Glean
.
shopping
.
surfaceOnboardingDisplayed
.
testGetValue
(
)
;
if
(
events
)
{
Assert
.
greater
(
events
.
length
0
)
;
Assert
.
equal
(
events
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
events
[
0
]
.
name
"
surface_onboarding_displayed
"
)
;
}
else
{
info
(
"
Failed
to
get
Glean
value
due
to
unknown
bug
.
See
bug
1862389
.
"
)
;
}
}
}
)
;
add_task
(
async
function
test_showOnboarding_notOptedIn_supported
(
)
{
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
telemetryEnabled
:
true
}
)
;
Services
.
fog
.
testResetFOG
(
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
let
actor
=
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getExistingActor
(
REVIEW_CHECKER_ACTOR
)
;
actor
.
updateCurrentURL
(
CONTENT_PAGE_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
shoppingContainer
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
"
shopping
-
container
"
)
;
let
containerElem
=
shoppingContainer
.
shadowRoot
.
getElementById
(
"
shopping
-
container
"
)
;
let
messageSlot
=
containerElem
.
getElementsByTagName
(
"
slot
"
)
;
ok
(
messageSlot
.
length
message
slot
element
exists
)
;
is
(
messageSlot
[
0
]
.
name
"
multi
-
stage
-
message
-
slot
"
"
multi
-
stage
-
message
-
slot
showing
opt
-
in
message
rendered
"
)
;
ok
(
!
content
.
document
.
getElementById
(
"
multi
-
stage
-
message
-
root
"
)
.
hidden
"
message
is
shown
"
)
;
ok
(
content
.
document
.
querySelector
(
"
.
FS_OPT_IN_SIDEBAR_VARIANT
"
)
"
Rendered
correct
message
"
)
;
}
)
;
}
)
;
if
(
!
AppConstants
.
platform
!
=
"
linux
"
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
const
events
=
Glean
.
shopping
.
surfaceOnboardingDisplayed
.
testGetValue
(
)
;
if
(
events
)
{
Assert
.
greater
(
events
.
length
0
)
;
Assert
.
equal
(
events
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
events
[
0
]
.
name
"
surface_onboarding_displayed
"
)
;
}
else
{
info
(
"
Failed
to
get
Glean
value
due
to
unknown
bug
.
See
bug
1862389
.
"
)
;
}
}
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_showOnboarding_notOptedIn_integrated_sidebar_unsupported
(
)
{
setOnboardingPrefs
(
{
active
:
false
optedIn
:
0
telemetryEnabled
:
true
}
)
;
Services
.
fog
.
testResetFOG
(
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
let
actor
=
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getExistingActor
(
REVIEW_CHECKER_ACTOR
)
;
actor
.
updateCurrentURL
(
UNSUPPORTED_NON_PDP_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
shoppingContainer
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
"
shopping
-
container
"
)
;
let
containerElem
=
shoppingContainer
.
shadowRoot
.
getElementById
(
"
shopping
-
container
"
)
;
let
messageSlot
=
containerElem
.
getElementsByTagName
(
"
slot
"
)
;
ok
(
messageSlot
.
length
message
slot
element
exists
)
;
is
(
messageSlot
[
0
]
.
name
"
multi
-
stage
-
message
-
slot
"
"
multi
-
stage
-
message
-
slot
showing
opt
-
in
message
rendered
"
)
;
ok
(
!
content
.
document
.
getElementById
(
"
multi
-
stage
-
message
-
root
"
)
.
hidden
"
message
is
shown
"
)
;
ok
(
content
.
document
.
querySelector
(
"
.
FS_OPT_IN_SIDEBAR_VARIANT_UNSUPPORTED_NON_PDP
"
)
"
Rendered
correct
message
"
)
;
}
)
;
}
)
;
if
(
!
AppConstants
.
platform
!
=
"
linux
"
)
{
await
Services
.
fog
.
testFlushAllChildren
(
)
;
const
events
=
Glean
.
shopping
.
surfaceOnboardingDisplayed
.
testGetValue
(
)
;
if
(
events
)
{
Assert
.
greater
(
events
.
length
0
)
;
Assert
.
equal
(
events
[
0
]
.
category
"
shopping
"
)
;
Assert
.
equal
(
events
[
0
]
.
name
"
surface_onboarding_displayed
"
)
;
}
else
{
info
(
"
Failed
to
get
Glean
value
due
to
unknown
bug
.
See
bug
1862389
.
"
)
;
}
}
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_hideOnboarding_optedIn
(
)
{
setOnboardingPrefs
(
{
active
:
false
optedIn
:
1
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
let
actor
=
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getExistingActor
(
REVIEW_CHECKER_ACTOR
)
;
actor
.
updateCurrentURL
(
PRODUCT_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
"
shopping
-
container
"
)
;
ok
(
content
.
document
.
getElementById
(
"
multi
-
stage
-
message
-
root
"
)
.
hidden
"
message
is
hidden
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_hideOnboarding_OptIn_AfterSurveySeen
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
0
]
[
"
browser
.
shopping
.
experience2023
.
survey
.
enabled
"
true
]
[
"
browser
.
shopping
.
experience2023
.
survey
.
hasSeen
"
true
]
[
"
browser
.
shopping
.
experience2023
.
survey
.
pdpVisits
"
5
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
url
:
"
about
:
shoppingsidebar
"
gBrowser
}
async
browser
=
>
{
let
actor
=
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getExistingActor
(
REVIEW_CHECKER_ACTOR
)
;
actor
.
updateCurrentURL
(
PRODUCT_URI
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
shoppingContainer
=
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
shopping
-
container
"
)
"
shopping
-
container
"
)
;
ok
(
!
content
.
document
.
getElementById
(
"
multi
-
stage
-
message
-
root
"
)
.
hidden
"
opt
-
in
message
is
shown
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
let
optedInPrefChanged
=
TestUtils
.
waitForPrefChange
(
"
browser
.
shopping
.
experience2023
.
optedIn
"
value
=
>
value
=
=
=
1
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
shopping
.
experience2023
.
optedIn
"
1
]
]
}
)
;
await
optedInPrefChanged
;
await
shoppingContainer
.
wrappedJSObject
.
updateComplete
;
ok
(
content
.
document
.
getElementById
(
"
multi
-
stage
-
message
-
root
"
)
.
hidden
"
opt
-
in
message
is
hidden
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
