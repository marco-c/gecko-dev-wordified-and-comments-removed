"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PanelPopup
"
"
resource
:
/
/
/
modules
/
ExtensionPopups
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
var
{
IconDetails
}
=
ExtensionUtils
;
let
pageActionMap
=
new
WeakMap
(
)
;
this
.
pageAction
=
class
extends
ExtensionAPI
{
static
for
(
extension
)
{
return
pageActionMap
.
get
(
extension
)
;
}
onManifestEntry
(
entryName
)
{
let
{
extension
}
=
this
;
let
options
=
extension
.
manifest
.
page_action
;
this
.
id
=
makeWidgetId
(
extension
.
id
)
+
"
-
page
-
action
"
;
this
.
tabManager
=
extension
.
tabManager
;
this
.
defaults
=
{
show
:
false
title
:
options
.
default_title
|
|
extension
.
name
icon
:
IconDetails
.
normalize
(
{
path
:
options
.
default_icon
}
extension
)
popup
:
options
.
default_popup
|
|
"
"
}
;
this
.
browserStyle
=
options
.
browser_style
|
|
false
;
if
(
options
.
browser_style
=
=
=
null
)
{
this
.
extension
.
logger
.
warn
(
"
Please
specify
whether
you
want
browser_style
"
+
"
or
not
in
your
page_action
options
.
"
)
;
}
this
.
tabContext
=
new
TabContext
(
tab
=
>
Object
.
create
(
this
.
defaults
)
extension
)
;
this
.
tabContext
.
on
(
"
location
-
change
"
this
.
handleLocationChange
.
bind
(
this
)
)
;
this
.
buttons
=
new
WeakMap
(
)
;
EventEmitter
.
decorate
(
this
)
;
pageActionMap
.
set
(
extension
this
)
;
}
onShutdown
(
reason
)
{
pageActionMap
.
delete
(
this
.
extension
)
;
this
.
tabContext
.
shutdown
(
)
;
for
(
let
window
of
windowTracker
.
browserWindows
(
)
)
{
if
(
this
.
buttons
.
has
(
window
)
)
{
this
.
buttons
.
get
(
window
)
.
remove
(
)
;
window
.
document
.
removeEventListener
(
"
popupshowing
"
this
)
;
}
}
}
getProperty
(
tab
prop
)
{
return
this
.
tabContext
.
get
(
tab
)
[
prop
]
;
}
setProperty
(
tab
prop
value
)
{
if
(
value
!
=
null
)
{
this
.
tabContext
.
get
(
tab
)
[
prop
]
=
value
;
}
else
{
delete
this
.
tabContext
.
get
(
tab
)
[
prop
]
;
}
if
(
tab
.
selected
)
{
this
.
updateButton
(
tab
.
ownerGlobal
)
;
}
}
updateButton
(
window
)
{
let
tabData
=
this
.
tabContext
.
get
(
window
.
gBrowser
.
selectedTab
)
;
if
(
!
(
tabData
.
show
|
|
this
.
buttons
.
has
(
window
)
)
)
{
return
;
}
let
button
=
this
.
getButton
(
window
)
;
if
(
tabData
.
show
)
{
let
title
=
tabData
.
title
|
|
this
.
extension
.
name
;
button
.
setAttribute
(
"
tooltiptext
"
title
)
;
button
.
setAttribute
(
"
aria
-
label
"
title
)
;
let
escape
=
str
=
>
str
.
replace
(
/
[
\
\
\
s
"
]
/
g
encodeURIComponent
)
;
let
getIcon
=
size
=
>
escape
(
IconDetails
.
getPreferredIcon
(
tabData
.
icon
this
.
extension
size
)
.
icon
)
;
button
.
setAttribute
(
"
style
"
-
-
webextension
-
urlbar
-
image
:
url
(
"
{
getIcon
(
16
)
}
"
)
;
-
-
webextension
-
urlbar
-
image
-
2x
:
url
(
"
{
getIcon
(
32
)
}
"
)
;
)
;
button
.
classList
.
add
(
"
webextension
-
page
-
action
"
)
;
}
button
.
hidden
=
!
tabData
.
show
;
}
addButton
(
window
)
{
let
document
=
window
.
document
;
let
button
=
document
.
createElement
(
"
image
"
)
;
button
.
id
=
this
.
id
;
button
.
setAttribute
(
"
class
"
"
urlbar
-
icon
"
)
;
button
.
addEventListener
(
"
click
"
this
)
;
document
.
addEventListener
(
"
popupshowing
"
this
)
;
document
.
getElementById
(
"
urlbar
-
icons
"
)
.
appendChild
(
button
)
;
return
button
;
}
getButton
(
window
)
{
if
(
!
this
.
buttons
.
has
(
window
)
)
{
let
button
=
this
.
addButton
(
window
)
;
this
.
buttons
.
set
(
window
button
)
;
}
return
this
.
buttons
.
get
(
window
)
;
}
triggerAction
(
window
)
{
let
pageAction
=
pageActionMap
.
get
(
this
.
extension
)
;
if
(
pageAction
.
getProperty
(
window
.
gBrowser
.
selectedTab
"
show
"
)
)
{
pageAction
.
handleClick
(
window
)
;
}
}
handleEvent
(
event
)
{
const
window
=
event
.
target
.
ownerGlobal
;
switch
(
event
.
type
)
{
case
"
click
"
:
if
(
event
.
button
=
=
=
0
)
{
this
.
handleClick
(
window
)
;
}
break
;
case
"
popupshowing
"
:
const
menu
=
event
.
target
;
const
trigger
=
menu
.
triggerNode
;
if
(
menu
.
id
=
=
=
"
toolbar
-
context
-
menu
"
&
&
trigger
&
&
trigger
.
id
=
=
=
this
.
id
)
{
global
.
actionContextMenu
(
{
extension
:
this
.
extension
onPageAction
:
true
menu
:
menu
}
)
;
}
break
;
}
}
handleClick
(
window
)
{
let
tab
=
window
.
gBrowser
.
selectedTab
;
let
popupURL
=
this
.
tabContext
.
get
(
tab
)
.
popup
;
this
.
tabManager
.
addActiveTabPermission
(
tab
)
;
if
(
popupURL
)
{
new
PanelPopup
(
this
.
extension
this
.
getButton
(
window
)
popupURL
this
.
browserStyle
)
;
}
else
{
this
.
emit
(
"
click
"
tab
)
;
}
}
handleLocationChange
(
eventType
tab
fromBrowse
)
{
if
(
fromBrowse
)
{
this
.
tabContext
.
clear
(
tab
)
;
}
this
.
updateButton
(
tab
.
ownerGlobal
)
;
}
getAPI
(
context
)
{
let
{
extension
}
=
context
;
const
{
tabManager
}
=
extension
;
const
pageAction
=
this
;
return
{
pageAction
:
{
onClicked
:
new
SingletonEventManager
(
context
"
pageAction
.
onClicked
"
fire
=
>
{
let
listener
=
(
evt
tab
)
=
>
{
fire
.
async
(
tabManager
.
convert
(
tab
)
)
;
}
;
pageAction
.
on
(
"
click
"
listener
)
;
return
(
)
=
>
{
pageAction
.
off
(
"
click
"
listener
)
;
}
;
}
)
.
api
(
)
show
(
tabId
)
{
let
tab
=
tabTracker
.
getTab
(
tabId
)
;
pageAction
.
setProperty
(
tab
"
show
"
true
)
;
}
hide
(
tabId
)
{
let
tab
=
tabTracker
.
getTab
(
tabId
)
;
pageAction
.
setProperty
(
tab
"
show
"
false
)
;
}
setTitle
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
pageAction
.
setProperty
(
tab
"
title
"
details
.
title
|
|
null
)
;
}
getTitle
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
title
=
pageAction
.
getProperty
(
tab
"
title
"
)
;
return
Promise
.
resolve
(
title
)
;
}
setIcon
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
icon
=
IconDetails
.
normalize
(
details
extension
context
)
;
pageAction
.
setProperty
(
tab
"
icon
"
icon
)
;
}
setPopup
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
url
=
details
.
popup
&
&
context
.
uri
.
resolve
(
details
.
popup
)
;
pageAction
.
setProperty
(
tab
"
popup
"
url
)
;
}
getPopup
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
popup
=
pageAction
.
getProperty
(
tab
"
popup
"
)
;
return
Promise
.
resolve
(
popup
)
;
}
}
}
;
}
}
;
global
.
pageActionFor
=
this
.
pageAction
.
for
;
