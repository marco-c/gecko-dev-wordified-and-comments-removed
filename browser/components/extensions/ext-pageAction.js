"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PageActions
"
"
resource
:
/
/
/
modules
/
PageActions
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PanelPopup
"
"
resource
:
/
/
/
modules
/
ExtensionPopups
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryStopwatch
"
"
resource
:
/
/
gre
/
modules
/
TelemetryStopwatch
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
var
{
IconDetails
StartupCache
}
=
ExtensionParent
;
const
popupOpenTimingHistogram
=
"
WEBEXT_PAGEACTION_POPUP_OPEN_MS
"
;
let
pageActionMap
=
new
WeakMap
(
)
;
this
.
pageAction
=
class
extends
ExtensionAPI
{
static
for
(
extension
)
{
return
pageActionMap
.
get
(
extension
)
;
}
async
onManifestEntry
(
entryName
)
{
let
{
extension
}
=
this
;
let
options
=
extension
.
manifest
.
page_action
;
let
widgetId
=
makeWidgetId
(
extension
.
id
)
;
this
.
id
=
widgetId
+
"
-
page
-
action
"
;
this
.
tabManager
=
extension
.
tabManager
;
this
.
defaults
=
{
show
:
false
title
:
options
.
default_title
|
|
extension
.
name
popup
:
options
.
default_popup
|
|
"
"
}
;
this
.
browserStyle
=
options
.
browser_style
|
|
false
;
if
(
options
.
browser_style
=
=
=
null
)
{
this
.
extension
.
logger
.
warn
(
"
Please
specify
whether
you
want
browser_style
"
+
"
or
not
in
your
page_action
options
.
"
)
;
}
this
.
tabContext
=
new
TabContext
(
tab
=
>
Object
.
create
(
this
.
defaults
)
extension
)
;
this
.
tabContext
.
on
(
"
location
-
change
"
this
.
handleLocationChange
.
bind
(
this
)
)
;
pageActionMap
.
set
(
extension
this
)
;
this
.
defaults
.
icon
=
await
StartupCache
.
get
(
extension
[
"
pageAction
"
"
default_icon
"
]
(
)
=
>
IconDetails
.
normalize
(
{
path
:
options
.
default_icon
}
extension
)
)
;
if
(
!
this
.
browserPageAction
)
{
this
.
browserPageAction
=
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
id
:
widgetId
title
:
this
.
defaults
.
title
iconURL
:
this
.
defaults
.
icon
shownInUrlbar
:
true
disabled
:
true
onCommand
:
(
event
buttonNode
)
=
>
{
this
.
handleClick
(
event
.
target
.
ownerGlobal
)
;
}
}
)
)
;
}
}
onShutdown
(
reason
)
{
pageActionMap
.
delete
(
this
.
extension
)
;
this
.
tabContext
.
shutdown
(
)
;
if
(
this
.
browserPageAction
)
{
this
.
browserPageAction
.
remove
(
)
;
this
.
browserPageAction
=
null
;
}
}
getProperty
(
tab
prop
)
{
return
this
.
tabContext
.
get
(
tab
)
[
prop
]
;
}
setProperty
(
tab
prop
value
)
{
if
(
value
!
=
null
)
{
this
.
tabContext
.
get
(
tab
)
[
prop
]
=
value
;
}
else
{
delete
this
.
tabContext
.
get
(
tab
)
[
prop
]
;
}
if
(
tab
.
selected
)
{
this
.
updateButton
(
tab
.
ownerGlobal
)
;
}
}
updateButton
(
window
)
{
let
tabData
=
this
.
tabContext
.
get
(
window
.
gBrowser
.
selectedTab
)
;
let
title
=
tabData
.
title
|
|
this
.
extension
.
name
;
this
.
browserPageAction
.
setTitle
(
title
window
)
;
this
.
browserPageAction
.
setTooltip
(
title
window
)
;
this
.
browserPageAction
.
setDisabled
(
!
tabData
.
show
window
)
;
let
iconURL
;
if
(
typeof
(
tabData
.
icon
)
=
=
"
string
"
)
{
iconURL
=
IconDetails
.
escapeUrl
(
tabData
.
icon
)
;
}
else
{
iconURL
=
Object
.
entries
(
tabData
.
icon
)
.
reduce
(
(
memo
[
size
url
]
)
=
>
{
memo
[
size
]
=
IconDetails
.
escapeUrl
(
url
)
;
return
memo
;
}
{
}
)
;
}
this
.
browserPageAction
.
setIconURL
(
iconURL
window
)
;
}
triggerAction
(
window
)
{
let
pageAction
=
pageActionMap
.
get
(
this
.
extension
)
;
if
(
pageAction
.
getProperty
(
window
.
gBrowser
.
selectedTab
"
show
"
)
)
{
pageAction
.
handleClick
(
window
)
;
}
}
async
handleClick
(
window
)
{
TelemetryStopwatch
.
start
(
popupOpenTimingHistogram
this
)
;
let
tab
=
window
.
gBrowser
.
selectedTab
;
let
popupURL
=
this
.
tabContext
.
get
(
tab
)
.
popup
;
this
.
tabManager
.
addActiveTabPermission
(
tab
)
;
if
(
popupURL
)
{
let
popup
=
new
PanelPopup
(
this
.
extension
window
.
document
popupURL
this
.
browserStyle
)
;
await
popup
.
contentReady
;
window
.
BrowserPageActions
.
togglePanelForAction
(
this
.
browserPageAction
popup
.
panel
)
;
TelemetryStopwatch
.
finish
(
popupOpenTimingHistogram
this
)
;
}
else
{
TelemetryStopwatch
.
cancel
(
popupOpenTimingHistogram
this
)
;
this
.
emit
(
"
click
"
tab
)
;
}
}
handleLocationChange
(
eventType
tab
fromBrowse
)
{
if
(
fromBrowse
)
{
this
.
tabContext
.
clear
(
tab
)
;
}
this
.
updateButton
(
tab
.
ownerGlobal
)
;
}
getAPI
(
context
)
{
let
{
extension
}
=
context
;
const
{
tabManager
}
=
extension
;
const
pageAction
=
this
;
return
{
pageAction
:
{
onClicked
:
new
InputEventManager
(
context
"
pageAction
.
onClicked
"
fire
=
>
{
let
listener
=
(
evt
tab
)
=
>
{
context
.
withPendingBrowser
(
tab
.
linkedBrowser
(
)
=
>
fire
.
sync
(
tabManager
.
convert
(
tab
)
)
)
;
}
;
pageAction
.
on
(
"
click
"
listener
)
;
return
(
)
=
>
{
pageAction
.
off
(
"
click
"
listener
)
;
}
;
}
)
.
api
(
)
show
(
tabId
)
{
let
tab
=
tabTracker
.
getTab
(
tabId
)
;
pageAction
.
setProperty
(
tab
"
show
"
true
)
;
}
hide
(
tabId
)
{
let
tab
=
tabTracker
.
getTab
(
tabId
)
;
pageAction
.
setProperty
(
tab
"
show
"
false
)
;
}
setTitle
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
pageAction
.
setProperty
(
tab
"
title
"
details
.
title
|
|
null
)
;
}
getTitle
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
title
=
pageAction
.
getProperty
(
tab
"
title
"
)
;
return
Promise
.
resolve
(
title
)
;
}
setIcon
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
icon
=
IconDetails
.
normalize
(
details
extension
context
)
;
pageAction
.
setProperty
(
tab
"
icon
"
icon
)
;
}
setPopup
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
url
=
details
.
popup
&
&
context
.
uri
.
resolve
(
details
.
popup
)
;
if
(
url
&
&
!
context
.
checkLoadURL
(
url
)
)
{
return
Promise
.
reject
(
{
message
:
Access
denied
for
URL
{
url
}
}
)
;
}
pageAction
.
setProperty
(
tab
"
popup
"
url
)
;
}
getPopup
(
details
)
{
let
tab
=
tabTracker
.
getTab
(
details
.
tabId
)
;
let
popup
=
pageAction
.
getProperty
(
tab
"
popup
"
)
;
return
Promise
.
resolve
(
popup
)
;
}
openPopup
:
function
(
)
{
let
window
=
windowTracker
.
topWindow
;
pageAction
.
triggerAction
(
window
)
;
}
}
}
;
}
}
;
global
.
pageActionFor
=
this
.
pageAction
.
for
;
