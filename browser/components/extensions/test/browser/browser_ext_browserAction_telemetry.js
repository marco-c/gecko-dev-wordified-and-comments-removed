"
use
strict
"
;
const
TIMING_HISTOGRAM
=
"
WEBEXT_BROWSERACTION_POPUP_OPEN_MS
"
;
const
RESULT_HISTOGRAM
=
"
WEBEXT_BROWSERACTION_POPUP_PRELOAD_RESULT_COUNT
"
;
const
CATEGORIES
=
[
"
popupShown
"
"
clearAfterHover
"
"
clearAfterMousedown
"
]
;
function
assertOnlyOneTypeSet
(
snapshot
category
)
{
let
categoryIndex
=
CATEGORIES
.
indexOf
(
category
)
;
Assert
.
equal
(
snapshot
.
counts
[
categoryIndex
]
1
Should
have
seen
the
{
category
}
count
increment
.
)
;
Assert
.
equal
(
snapshot
.
counts
.
reduce
(
(
a
b
)
=
>
a
+
b
)
1
"
Should
only
be
1
collected
value
.
"
)
;
}
add_task
(
async
function
testBrowserActionTelemetryTiming
(
)
{
let
extensionOptions
=
{
manifest
:
{
"
browser_action
"
:
{
"
default_popup
"
:
"
popup
.
html
"
"
browser_style
"
:
true
}
}
files
:
{
"
popup
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
<
div
>
<
/
div
>
<
/
body
>
<
/
html
>
}
}
;
let
extension1
=
ExtensionTestUtils
.
loadExtension
(
extensionOptions
)
;
let
extension2
=
ExtensionTestUtils
.
loadExtension
(
extensionOptions
)
;
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
TIMING_HISTOGRAM
)
;
histogram
.
clear
(
)
;
is
(
histogram
.
snapshot
(
)
.
sum
0
No
data
recorded
for
histogram
:
{
TIMING_HISTOGRAM
}
.
)
;
await
extension1
.
startup
(
)
;
await
extension2
.
startup
(
)
;
is
(
histogram
.
snapshot
(
)
.
sum
0
No
data
recorded
for
histogram
after
startup
:
{
TIMING_HISTOGRAM
}
.
)
;
clickBrowserAction
(
extension1
)
;
await
awaitExtensionPanel
(
extension1
)
;
let
sumOld
=
histogram
.
snapshot
(
)
.
sum
;
ok
(
sumOld
>
0
Data
recorded
for
first
extension
for
histogram
:
{
TIMING_HISTOGRAM
}
.
)
;
await
closeBrowserAction
(
extension1
)
;
clickBrowserAction
(
extension2
)
;
await
awaitExtensionPanel
(
extension2
)
;
let
sumNew
=
histogram
.
snapshot
(
)
.
sum
;
ok
(
sumNew
>
sumOld
Data
recorded
for
second
extension
for
histogram
:
{
TIMING_HISTOGRAM
}
.
)
;
sumOld
=
sumNew
;
await
closeBrowserAction
(
extension2
)
;
clickBrowserAction
(
extension2
)
;
await
awaitExtensionPanel
(
extension2
)
;
sumNew
=
histogram
.
snapshot
(
)
.
sum
;
ok
(
sumNew
>
sumOld
Data
recorded
for
second
opening
of
popup
for
histogram
:
{
TIMING_HISTOGRAM
}
.
)
;
sumOld
=
sumNew
;
await
closeBrowserAction
(
extension2
)
;
clickBrowserAction
(
extension1
)
;
await
awaitExtensionPanel
(
extension1
)
;
sumNew
=
histogram
.
snapshot
(
)
.
sum
;
ok
(
sumNew
>
sumOld
Data
recorded
for
second
opening
of
popup
for
histogram
:
{
TIMING_HISTOGRAM
}
.
)
;
await
extension1
.
unload
(
)
;
await
extension2
.
unload
(
)
;
}
)
;
add_task
(
async
function
testBrowserActionTelemetryResults
(
)
{
let
extensionOptions
=
{
manifest
:
{
"
browser_action
"
:
{
"
default_popup
"
:
"
popup
.
html
"
"
browser_style
"
:
true
}
}
files
:
{
"
popup
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
<
div
>
<
/
div
>
<
/
body
>
<
/
html
>
}
}
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
extensionOptions
)
;
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
RESULT_HISTOGRAM
)
;
histogram
.
clear
(
)
;
is
(
histogram
.
snapshot
(
)
.
sum
0
No
data
recorded
for
histogram
:
{
TIMING_HISTOGRAM
}
.
)
;
await
extension
.
startup
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
{
type
:
"
mouseover
"
}
window
)
;
let
widget
=
getBrowserActionWidget
(
extension
)
.
forWindow
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
widget
.
node
{
type
:
"
mouseover
"
button
:
0
}
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
widget
.
node
{
type
:
"
mouseout
"
button
:
0
}
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mousemove
"
}
window
)
;
assertOnlyOneTypeSet
(
histogram
.
snapshot
(
)
"
clearAfterHover
"
)
;
histogram
.
clear
(
)
;
clickBrowserAction
(
extension
)
;
await
awaitExtensionPanel
(
extension
)
;
assertOnlyOneTypeSet
(
histogram
.
snapshot
(
)
"
popupShown
"
)
;
await
extension
.
unload
(
)
;
}
)
;
