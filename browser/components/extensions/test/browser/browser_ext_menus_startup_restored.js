"
use
strict
"
;
function
getMenuExtension
(
id
background
)
{
return
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
manifest
:
{
manifest_version
:
3
browser_specific_settings
:
{
gecko
:
{
id
}
}
action
:
{
default_area
:
"
navbar
"
}
permissions
:
[
"
menus
"
]
}
background
}
)
;
}
add_task
(
async
function
test_menu_create_id
(
)
{
const
controlExtension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
"
control
mochi
.
test
"
}
}
}
background
:
(
)
=
>
{
browser
.
runtime
.
onMessageExternal
.
addListener
(
message
=
>
browser
.
test
.
sendMessage
(
message
)
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
}
)
;
await
controlExtension
.
startup
(
)
;
await
controlExtension
.
awaitMessage
(
"
ready
"
)
;
const
menuExtension
=
getMenuExtension
(
"
menu
mochi
.
test
"
(
)
=
>
{
browser
.
runtime
.
onInstalled
.
addListener
(
(
)
=
>
{
browser
.
menus
.
create
(
{
id
:
"
testItem
"
contexts
:
[
"
action
"
]
title
:
"
testItem
"
}
(
)
=
>
{
browser
.
runtime
.
sendMessage
(
"
control
mochi
.
test
"
"
installed
"
)
;
}
)
;
}
)
;
browser
.
runtime
.
sendMessage
(
"
control
mochi
.
test
"
"
done
"
)
;
}
)
;
await
menuExtension
.
startup
(
)
;
await
controlExtension
.
awaitMessage
(
"
done
"
)
;
await
controlExtension
.
awaitMessage
(
"
installed
"
)
;
const
buttonId
=
{
makeWidgetId
(
menuExtension
.
id
)
}
-
browser
-
action
;
Assert
.
ok
(
!
!
window
.
document
.
getElementById
(
buttonId
)
"
Button
should
have
been
created
"
)
;
const
menu
=
await
openActionContextMenu
(
menuExtension
"
browser
"
)
;
Assert
.
ok
(
[
.
.
.
menu
.
children
]
.
map
(
e
=
>
e
.
label
)
.
includes
(
"
testItem
"
)
"
Context
menu
should
have
been
created
"
)
;
await
closeActionContextMenu
(
)
;
let
menuAddon
=
await
AddonManager
.
getAddonByID
(
"
menu
mochi
.
test
"
)
;
await
menuAddon
.
disable
(
)
;
Assert
.
ok
(
!
window
.
document
.
getElementById
(
buttonId
)
"
Button
should
have
been
removed
"
)
;
await
menuAddon
.
enable
(
)
;
await
controlExtension
.
awaitMessage
(
"
done
"
)
;
Assert
.
ok
(
!
!
window
.
document
.
getElementById
(
buttonId
)
"
Button
should
have
been
re
-
created
"
)
;
const
menu2
=
await
openActionContextMenu
(
menuExtension
"
browser
"
)
;
Assert
.
ok
(
[
.
.
.
menu2
.
children
]
.
map
(
e
=
>
e
.
label
)
.
includes
(
"
testItem
"
)
"
Context
menu
should
have
been
restored
"
)
;
await
closeActionContextMenu
(
)
;
await
menuExtension
.
unload
(
)
;
Assert
.
ok
(
!
window
.
document
.
getElementById
(
buttonId
)
"
Button
should
have
been
removed
"
)
;
const
noMenuExtension
=
getMenuExtension
(
"
menu
mochi
.
test
"
(
)
=
>
{
browser
.
runtime
.
sendMessage
(
"
control
mochi
.
test
"
"
done
"
)
;
}
)
;
await
noMenuExtension
.
startup
(
)
;
await
controlExtension
.
awaitMessage
(
"
done
"
)
;
Assert
.
ok
(
!
!
window
.
document
.
getElementById
(
buttonId
)
"
Button
should
have
been
re
-
created
"
)
;
const
menu3
=
await
openActionContextMenu
(
noMenuExtension
"
browser
"
)
;
Assert
.
ok
(
!
[
.
.
.
menu3
.
children
]
.
map
(
e
=
>
e
.
label
)
.
includes
(
"
testItem
"
)
"
Context
menu
should
not
have
been
restored
"
)
;
await
closeActionContextMenu
(
)
;
await
noMenuExtension
.
unload
(
)
;
await
controlExtension
.
unload
(
)
;
}
)
;
