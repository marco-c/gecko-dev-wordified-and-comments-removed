"
use
strict
"
;
const
promiseEnableUnifiedExtensions
=
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
unifiedExtensions
.
enabled
"
true
]
]
}
)
;
return
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
}
;
const
promiseDisableUnifiedExtensions
=
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
unifiedExtensions
.
enabled
"
false
]
]
}
)
;
return
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
}
;
const
getListView
=
win
=
>
{
const
{
panel
}
=
win
.
gUnifiedExtensions
;
ok
(
panel
"
expected
panel
to
be
created
"
)
;
return
panel
.
querySelector
(
"
#
unified
-
extensions
-
view
"
)
;
}
;
const
openExtensionsPanel
=
async
win
=
>
{
const
{
button
}
=
win
.
gUnifiedExtensions
;
ok
(
button
"
expected
button
"
)
;
const
listView
=
getListView
(
win
)
;
ok
(
listView
"
expected
list
view
"
)
;
const
viewShown
=
BrowserTestUtils
.
waitForEvent
(
listView
"
ViewShown
"
)
;
button
.
click
(
)
;
await
viewShown
;
}
;
const
closeExtensionsPanel
=
async
win
=
>
{
const
{
button
}
=
win
.
gUnifiedExtensions
;
ok
(
button
"
expected
button
"
)
;
const
hidden
=
BrowserTestUtils
.
waitForEvent
(
win
.
document
"
popuphidden
"
true
)
;
button
.
click
(
)
;
await
hidden
;
}
;
const
getUnifiedExtensionsItem
=
(
win
extensionId
)
=
>
{
return
getListView
(
win
)
.
querySelector
(
unified
-
extensions
-
item
[
extension
-
id
=
"
{
extensionId
}
"
]
)
;
}
;
const
openUnifiedExtensionsContextMenu
=
async
(
win
extensionId
)
=
>
{
const
button
=
getUnifiedExtensionsItem
(
win
extensionId
)
.
querySelector
(
"
.
unified
-
extensions
-
item
-
open
-
menu
"
)
;
ok
(
button
"
expected
'
open
menu
'
button
"
)
;
button
.
scrollIntoView
(
{
block
:
"
center
"
}
)
;
const
menu
=
win
.
document
.
getElementById
(
"
unified
-
extensions
-
context
-
menu
"
)
;
ok
(
menu
"
expected
menu
"
)
;
const
shown
=
BrowserTestUtils
.
waitForEvent
(
menu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
win
)
;
await
shown
;
return
menu
;
}
;
const
clickUnifiedExtensionsItem
=
async
(
win
extensionId
forceEnableButton
=
false
)
=
>
{
await
openExtensionsPanel
(
win
)
;
const
item
=
getUnifiedExtensionsItem
(
win
extensionId
)
;
ok
(
item
expected
item
for
{
extensionId
}
)
;
if
(
forceEnableButton
)
{
let
actionButton
=
item
.
querySelector
(
"
.
unified
-
extensions
-
item
-
action
"
)
;
actionButton
.
disabled
=
false
;
ok
(
!
actionButton
.
disabled
"
action
button
was
force
-
enabled
"
)
;
}
item
.
scrollIntoView
(
{
block
:
"
center
"
}
)
;
const
popupHidden
=
BrowserTestUtils
.
waitForEvent
(
win
.
document
"
popuphidden
"
true
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
}
win
)
;
await
popupHidden
;
}
;
let
extensionsCreated
=
0
;
const
createExtensions
=
(
arrayOfManifestData
{
useAddonManager
=
true
}
=
{
}
)
=
>
{
return
arrayOfManifestData
.
map
(
manifestData
=
>
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
default
-
extension
-
name
"
applications
:
{
gecko
:
{
id
:
ext
-
{
extensionsCreated
+
+
}
}
}
.
.
.
manifestData
}
useAddonManager
:
useAddonManager
?
"
temporary
"
:
undefined
}
)
)
;
}
;
