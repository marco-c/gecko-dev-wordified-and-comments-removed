"
use
strict
"
;
add_task
(
async
function
test_create_error
(
)
{
let
waitForConsole
=
new
Promise
(
resolve
=
>
{
SimpleTest
.
waitForExplicitFinish
(
)
;
SimpleTest
.
monitorConsole
(
resolve
[
{
message
:
/
Unchecked
lastError
value
:
Error
:
ID
already
exists
:
some_id
/
forbid
:
true
}
{
message
:
/
Unchecked
lastError
value
:
Error
:
Could
not
find
any
MenuItem
with
id
:
noCb
/
}
{
message
:
/
Unchecked
lastError
value
:
Error
:
Could
not
find
any
MenuItem
with
id
:
cbIgnoreError
/
}
]
)
;
}
)
;
async
function
background
(
)
{
await
new
Promise
(
resolve
=
>
{
browser
.
menus
.
create
(
{
id
:
"
some_id
"
title
:
"
menu
item
"
}
(
)
=
>
{
browser
.
test
.
assertEq
(
null
browser
.
runtime
.
lastError
"
Expected
no
error
"
)
;
resolve
(
)
;
}
)
;
}
)
;
await
new
Promise
(
resolve
=
>
{
browser
.
menus
.
create
(
{
id
:
"
some_id
"
title
:
"
menu
item
"
}
(
)
=
>
{
browser
.
test
.
assertEq
(
"
ID
already
exists
:
some_id
"
browser
.
runtime
.
lastError
.
message
"
Expected
error
"
)
;
resolve
(
)
;
}
)
;
}
)
;
browser
.
menus
.
create
(
{
id
:
"
noCb
"
parentId
:
"
noCb
"
title
:
"
menu
item
"
}
)
;
await
new
Promise
(
resolve
=
>
{
browser
.
menus
.
create
(
{
id
:
"
cbIgnoreError
"
parentId
:
"
cbIgnoreError
"
title
:
"
menu
item
"
}
(
)
=
>
{
resolve
(
)
;
}
)
;
}
)
;
await
browser
.
menus
.
removeAll
(
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
menus
"
]
}
background
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
extension
.
unload
(
)
;
SimpleTest
.
endMonitorConsole
(
)
;
await
waitForConsole
;
}
)
;
add_task
(
async
function
test_update_error
(
)
{
async
function
background
(
)
{
const
id
=
browser
.
menus
.
create
(
{
title
:
"
menu
item
"
}
)
;
await
browser
.
test
.
assertRejects
(
browser
.
menus
.
update
(
id
{
parentId
:
"
bogus
"
}
)
"
Could
not
find
any
MenuItem
with
id
:
bogus
"
"
menus
.
update
with
invalid
parentMenuId
should
fail
"
)
;
await
browser
.
test
.
assertRejects
(
browser
.
menus
.
update
(
id
{
parentId
:
id
}
)
"
MenuItem
cannot
be
an
ancestor
(
or
self
)
of
its
new
parent
.
"
"
menus
.
update
cannot
assign
itself
as
the
parent
of
a
menu
.
"
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
menus
"
]
}
background
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_invalid_documentUrlPatterns
(
)
{
const
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
menus
"
]
}
async
background
(
)
{
await
new
Promise
(
resolve
=
>
{
browser
.
menus
.
create
(
{
title
:
"
invalid
url
"
contexts
:
[
"
tab
"
]
documentUrlPatterns
:
[
"
test1
"
]
}
(
)
=
>
{
browser
.
test
.
assertEq
(
"
Invalid
url
pattern
:
test1
"
browser
.
runtime
.
lastError
.
message
"
Expected
invalid
match
pattern
"
)
;
resolve
(
)
;
}
)
;
}
)
;
await
new
Promise
(
resolve
=
>
{
browser
.
menus
.
create
(
{
title
:
"
invalid
url
"
contexts
:
[
"
link
"
]
targetUrlPatterns
:
[
"
test2
"
]
}
(
)
=
>
{
browser
.
test
.
assertEq
(
"
Invalid
url
pattern
:
test2
"
browser
.
runtime
.
lastError
.
message
"
Expected
invalid
match
pattern
"
)
;
resolve
(
)
;
}
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
extension
.
unload
(
)
;
}
)
;
