"
use
strict
"
;
add_task
(
function
*
testExecuteScriptAtOnUpdated
(
)
{
const
BASE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
extensions
/
test
/
browser
/
"
;
const
URL
=
BASE
+
"
file_iframe_document
.
html
"
;
function
background
(
)
{
let
ignore
=
false
;
let
url
;
browser
.
tabs
.
onUpdated
.
addListener
(
(
tabId
changeInfo
tab
)
=
>
{
if
(
url
&
&
changeInfo
.
status
=
=
=
"
loading
"
&
&
tab
.
url
=
=
=
url
&
&
!
ignore
)
{
ignore
=
true
;
browser
.
tabs
.
executeScript
(
tabId
{
code
:
"
document
.
URL
"
}
)
.
then
(
results
=
>
{
browser
.
test
.
assertEq
(
url
results
[
0
]
"
Content
script
should
run
"
)
;
browser
.
test
.
notifyPass
(
"
executeScript
-
at
-
onUpdated
"
)
;
}
error
=
>
{
browser
.
test
.
fail
(
Unexpected
error
:
{
error
}
:
:
{
error
.
stack
}
)
;
browser
.
test
.
notifyFail
(
"
executeScript
-
at
-
onUpdated
"
)
;
}
)
;
browser
.
test
.
log
(
Found
expected
navigation
to
{
url
}
)
;
}
else
{
browser
.
tabs
.
executeScript
(
tabId
{
code
:
"
"
}
)
;
}
}
)
;
browser
.
test
.
onMessage
.
addListener
(
testUrl
=
>
{
url
=
testUrl
;
browser
.
test
.
sendMessage
(
"
open
-
test
-
tab
"
)
;
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
permissions
"
:
[
"
http
:
/
/
mochi
.
test
/
"
"
tabs
"
]
}
background
}
)
;
yield
extension
.
startup
(
)
;
extension
.
sendMessage
(
URL
)
;
yield
extension
.
awaitMessage
(
"
open
-
test
-
tab
"
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL
true
)
;
yield
extension
.
awaitFinish
(
"
executeScript
-
at
-
onUpdated
"
)
;
yield
extension
.
unload
(
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
