"
use
strict
"
;
add_task
(
async
function
test_adopt_tab_or_group_around_collapsed_group
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
temporary
"
manifest
:
{
permissions
:
[
"
tabGroups
"
"
tabHide
"
]
}
async
background
(
)
{
const
{
id
:
tabId
windowId
:
otherWinId
}
=
await
browser
.
tabs
.
create
(
{
}
)
;
const
{
id
:
windowId
tabs
:
[
{
id
:
tabId0
}
]
}
=
await
browser
.
windows
.
create
(
{
}
)
;
const
{
id
:
tabId1
}
=
await
browser
.
tabs
.
create
(
{
windowId
}
)
;
const
{
id
:
tabId2
}
=
await
browser
.
tabs
.
create
(
{
windowId
}
)
;
const
{
id
:
tabId3
}
=
await
browser
.
tabs
.
create
(
{
windowId
}
)
;
const
{
id
:
tabId4
}
=
await
browser
.
tabs
.
create
(
{
windowId
}
)
;
const
{
id
:
tabId5
}
=
await
browser
.
tabs
.
create
(
{
windowId
}
)
;
const
groupId
=
await
browser
.
tabs
.
group
(
{
createProperties
:
{
windowId
}
tabIds
:
[
tabId1
tabId2
tabId3
]
}
)
;
await
browser
.
tabs
.
hide
(
tabId0
)
;
await
browser
.
tabGroups
.
update
(
groupId
{
collapsed
:
true
}
)
;
await
browser
.
tabs
.
update
(
tabId4
{
active
:
true
}
)
;
await
browser
.
tabs
.
hide
(
tabId5
)
;
const
tabs
=
await
browser
.
tabs
.
query
(
{
windowId
}
)
;
browser
.
test
.
assertDeepEq
(
[
true
false
false
false
false
true
]
tabs
.
map
(
t
=
>
t
.
hidden
)
"
tabs
.
Tab
.
hidden
property
is
true
for
hidden
tabs
only
(
not
collapsed
)
"
)
;
browser
.
test
.
assertDeepEq
(
[
-
1
groupId
groupId
groupId
-
1
-
1
]
tabs
.
map
(
t
=
>
t
.
groupId
)
"
Sanity
check
:
Three
of
the
tabs
are
in
the
expected
tab
group
"
)
;
async
function
putTabInGroupInOtherWindow
(
)
{
const
newGroupId
=
await
browser
.
tabs
.
group
(
{
tabIds
:
tabId
createProperties
:
{
windowId
:
otherWinId
}
}
)
;
const
tab
=
await
browser
.
tabs
.
get
(
tabId
)
;
browser
.
test
.
assertDeepEq
(
{
groupId
:
newGroupId
windowId
:
otherWinId
}
{
groupId
:
tab
.
groupId
windowId
:
tab
.
windowId
}
"
Sanity
check
:
tab
is
in
group
back
in
other
window
"
)
;
return
newGroupId
;
}
let
[
movedTab
]
=
await
browser
.
tabs
.
move
(
tabId
{
windowId
index
:
2
}
)
;
browser
.
test
.
assertDeepEq
(
{
index
:
2
groupId
}
{
index
:
movedTab
.
index
groupId
:
movedTab
.
groupId
}
"
Tab
moved
to
position
between
invisible
tabs
in
collapsed
group
"
)
;
const
groupIdToMove1
=
await
putTabInGroupInOtherWindow
(
)
;
await
browser
.
tabGroups
.
move
(
groupIdToMove1
{
windowId
index
:
1
}
)
;
const
movedTab1
=
await
browser
.
tabs
.
get
(
tabId
)
;
browser
.
test
.
assertDeepEq
(
{
index
:
1
groupId
:
groupIdToMove1
windowId
}
{
index
:
movedTab1
.
index
groupId
:
movedTab1
.
groupId
windowId
:
movedTab1
.
windowId
}
"
Tab
group
moved
to
position
before
collapsed
group
after
hidden
tab
"
)
;
const
groupIdToMove2
=
await
putTabInGroupInOtherWindow
(
)
;
await
browser
.
test
.
assertRejects
(
browser
.
tabGroups
.
move
(
groupIdToMove2
{
windowId
index
:
2
}
)
"
Cannot
move
the
group
to
an
index
that
is
in
the
middle
of
another
group
.
"
"
Should
reject
attempt
to
move
group
in
middle
of
group
"
)
;
const
groupIdToMove3
=
await
putTabInGroupInOtherWindow
(
)
;
await
browser
.
test
.
assertRejects
(
browser
.
tabGroups
.
move
(
groupIdToMove3
{
windowId
index
:
3
}
)
"
Cannot
move
the
group
to
an
index
that
is
in
the
middle
of
another
group
.
"
"
Should
reject
attempt
to
move
before
end
of
group
"
)
;
const
groupIdToMove4
=
await
putTabInGroupInOtherWindow
(
)
;
await
browser
.
tabGroups
.
move
(
groupIdToMove4
{
windowId
index
:
4
}
)
;
const
movedTab4
=
await
browser
.
tabs
.
get
(
tabId
)
;
browser
.
test
.
assertDeepEq
(
{
index
:
4
groupId
:
groupIdToMove4
windowId
}
{
index
:
movedTab4
.
index
groupId
:
movedTab4
.
groupId
windowId
:
movedTab4
.
windowId
}
"
Tab
group
moved
to
position
after
collapsed
group
"
)
;
const
groupIdToMove5
=
await
putTabInGroupInOtherWindow
(
)
;
await
browser
.
tabGroups
.
move
(
groupIdToMove5
{
windowId
index
:
5
}
)
;
const
movedTab5
=
await
browser
.
tabs
.
get
(
tabId
)
;
browser
.
test
.
assertDeepEq
(
{
index
:
5
groupId
:
groupIdToMove5
windowId
}
{
index
:
movedTab5
.
index
groupId
:
movedTab5
.
groupId
windowId
:
movedTab5
.
windowId
}
"
Tab
group
moved
to
position
before
the
last
tab
(
which
is
hidden
)
"
)
;
for
(
let
index
of
[
6
-
1
7
1000
]
)
{
const
groupIdToMoveEnd
=
await
putTabInGroupInOtherWindow
(
)
;
await
browser
.
tabGroups
.
move
(
groupIdToMoveEnd
{
windowId
index
}
)
;
const
movedTabEnd
=
await
browser
.
tabs
.
get
(
tabId
)
;
browser
.
test
.
assertDeepEq
(
{
index
:
6
groupId
:
groupIdToMoveEnd
windowId
}
{
index
:
movedTabEnd
.
index
groupId
:
movedTabEnd
.
groupId
windowId
:
movedTabEnd
.
windowId
}
Tab
group
moved
to
position
at
end
(
{
index
}
)
after
hidden
tab
)
;
}
await
browser
.
windows
.
remove
(
windowId
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
extension
.
unload
(
)
;
}
)
;
