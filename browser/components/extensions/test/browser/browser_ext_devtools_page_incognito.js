"
use
strict
"
;
loadTestSubscript
(
"
head_devtools
.
js
"
)
;
async
function
testIncognito
(
incognitoOverride
)
{
let
privateAllowed
=
incognitoOverride
=
=
"
spanning
"
;
function
devtools_page
(
privateAllowed
)
{
if
(
!
privateAllowed
)
{
browser
.
test
.
fail
(
"
Extension
devtools_page
should
not
be
created
on
private
tabs
if
not
allowed
"
)
;
}
browser
.
test
.
sendMessage
(
"
devtools_page
:
loaded
"
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
devtools_page
:
"
devtools_page
.
html
"
}
incognitoOverride
files
:
{
"
devtools_page
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
script
src
=
"
devtools_page
.
js
"
>
<
/
script
>
<
/
head
>
<
/
html
>
"
devtools_page
.
js
"
:
(
{
devtools_page
}
)
(
{
privateAllowed
}
)
}
}
)
;
let
existingPrivateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
extension
.
startup
(
)
;
await
openToolboxForTab
(
existingPrivateWindow
.
gBrowser
.
selectedTab
)
;
if
(
privateAllowed
)
{
await
extension
.
awaitMessage
(
"
devtools_page
:
loaded
"
)
;
}
ok
(
true
Opened
toolbox
on
an
existing
private
window
(
extension
{
incognitoOverride
}
)
)
;
let
newPrivateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
openToolboxForTab
(
newPrivateWindow
.
gBrowser
.
selectedTab
)
;
if
(
privateAllowed
)
{
await
extension
.
awaitMessage
(
"
devtools_page
:
loaded
"
)
;
}
ok
(
true
Opened
toolbox
on
a
newprivate
window
(
extension
{
incognitoOverride
}
)
)
;
await
closeToolboxForTab
(
existingPrivateWindow
.
gBrowser
.
selectedTab
)
;
await
closeToolboxForTab
(
newPrivateWindow
.
gBrowser
.
selectedTab
)
;
await
BrowserTestUtils
.
closeWindow
(
existingPrivateWindow
)
;
await
BrowserTestUtils
.
closeWindow
(
newPrivateWindow
)
;
await
extension
.
unload
(
)
;
}
add_task
(
async
function
test_devtools_page_not_allowed
(
)
{
await
testIncognito
(
)
;
}
)
;
add_task
(
async
function
test_devtools_page_allowed
(
)
{
await
testIncognito
(
"
spanning
"
)
;
}
)
;
