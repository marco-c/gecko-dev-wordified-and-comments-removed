"
use
strict
"
;
const
{
require
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
devtools
/
shared
/
loader
/
Loader
.
sys
.
mjs
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
Toolbox
}
=
require
(
"
devtools
/
client
/
framework
/
toolbox
"
)
;
const
{
CommandsFactory
}
=
require
(
"
devtools
/
shared
/
commands
/
commands
-
factory
"
)
;
async
function
setupToolboxTest
(
extensionId
)
{
const
commands
=
await
CommandsFactory
.
forAddon
(
extensionId
)
;
await
commands
.
targetCommand
.
startListening
(
)
;
const
toolbox
=
await
gDevTools
.
showToolbox
(
commands
{
hostType
:
Toolbox
.
HostType
.
WINDOW
}
)
;
async
function
waitFor
(
condition
)
{
while
(
!
condition
(
)
)
{
await
new
Promise
(
done
=
>
window
.
setTimeout
(
done
1000
)
)
;
}
}
const
netmonitor
=
await
toolbox
.
selectTool
(
"
netmonitor
"
)
;
const
expectedURL
=
"
http
:
/
/
mochi
.
test
:
8888
/
?
test_netmonitor
=
1
"
;
await
toolbox
.
commands
.
scriptCommand
.
execute
(
doFetchHTTPRequest
(
"
{
expectedURL
}
"
)
;
)
;
await
waitFor
(
(
)
=
>
{
return
!
netmonitor
.
panelWin
.
document
.
querySelector
(
"
.
request
-
list
-
empty
-
notice
"
)
;
}
)
;
let
{
store
}
=
netmonitor
.
panelWin
;
function
filterRequest
(
request
)
{
return
request
.
url
=
=
=
expectedURL
;
}
let
requests
;
await
waitFor
(
(
)
=
>
{
requests
=
Array
.
from
(
store
.
getState
(
)
.
requests
.
requests
.
values
(
)
)
.
filter
(
filterRequest
)
;
return
!
!
requests
.
length
;
}
)
;
await
toolbox
.
commands
.
scriptCommand
.
execute
(
testNetworkRequestReceived
(
{
JSON
.
stringify
(
requests
)
}
)
;
)
;
await
toolbox
.
destroy
(
)
;
await
commands
.
destroy
(
)
;
}
add_task
(
async
function
test_addon_debugging_netmonitor_panel
(
)
{
const
EXTENSION_ID
=
"
test
-
monitor
-
panel
mozilla
"
;
function
background
(
)
{
let
expectedURL
;
window
.
doFetchHTTPRequest
=
async
function
(
urlToFetch
)
{
expectedURL
=
urlToFetch
;
await
fetch
(
urlToFetch
)
;
}
;
window
.
testNetworkRequestReceived
=
async
function
(
requests
)
{
browser
.
test
.
log
(
"
Addon
Debugging
Netmonitor
panel
collected
requests
:
"
+
JSON
.
stringify
(
requests
)
)
;
browser
.
test
.
assertEq
(
1
requests
.
length
"
Got
one
request
logged
"
)
;
browser
.
test
.
assertEq
(
"
GET
"
requests
[
0
]
.
method
"
Got
a
GET
request
"
)
;
browser
.
test
.
assertEq
(
expectedURL
requests
[
0
]
.
url
"
Got
the
expected
request
url
"
)
;
browser
.
test
.
notifyPass
(
"
netmonitor_request_logged
"
)
;
}
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
useAddonManager
:
"
temporary
"
manifest
:
{
permissions
:
[
"
http
:
/
/
mochi
.
test
/
"
]
applications
:
{
gecko
:
{
id
:
EXTENSION_ID
}
}
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
const
onToolboxClose
=
setupToolboxTest
(
EXTENSION_ID
)
;
await
Promise
.
all
(
[
extension
.
awaitFinish
(
"
netmonitor_request_logged
"
)
onToolboxClose
]
)
;
info
(
"
Addon
Toolbox
closed
"
)
;
await
extension
.
unload
(
)
;
}
)
;
