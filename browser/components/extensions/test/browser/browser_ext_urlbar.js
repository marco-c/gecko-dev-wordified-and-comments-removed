"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
jsm
"
UrlbarProviderExtension
:
"
resource
:
/
/
/
modules
/
UrlbarProviderExtension
.
jsm
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
UrlbarTestUtils
:
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
jsm
"
}
)
;
async
function
loadTipExtension
(
options
=
{
}
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
options
=
>
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
restricting
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
return
[
{
type
:
"
tip
"
source
:
"
local
"
heuristic
:
true
payload
:
{
text
:
"
Test
"
buttonText
:
"
OK
"
data
:
"
testData
"
buttonUrl
:
options
.
buttonUrl
helpUrl
:
options
.
helpUrl
}
}
]
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultPicked
.
addListener
(
(
payload
details
)
=
>
{
browser
.
test
.
assertEq
(
payload
.
text
"
Test
"
"
payload
.
text
"
)
;
browser
.
test
.
assertEq
(
payload
.
buttonText
"
OK
"
"
payload
.
buttonText
"
)
;
browser
.
test
.
assertEq
(
payload
.
data
"
testData
"
"
payload
.
data
"
)
;
browser
.
test
.
sendMessage
(
"
onResultPicked
received
"
details
)
;
}
"
test
"
)
;
}
)
;
}
}
)
;
await
ext
.
startup
(
)
;
ext
.
sendMessage
(
options
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
"
Waiting
for
provider
to
be
registered
"
)
;
Assert
.
ok
(
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
"
Provider
should
have
been
registered
"
)
;
return
ext
;
}
add_task
(
async
function
setUp
(
)
{
let
originalTimeout
=
UrlbarProviderExtension
.
notificationTimeout
;
UrlbarProviderExtension
.
notificationTimeout
=
5000
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarProviderExtension
.
notificationTimeout
=
originalTimeout
;
}
)
;
}
)
;
add_task
(
async
function
tip_onResultPicked_mainButton_noURL_enter
(
)
{
let
ext
=
await
loadTipExtension
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
test
"
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
ext
.
awaitMessage
(
"
onResultPicked
received
"
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
tip_onResultPicked_mainButton_noURL_mouse
(
)
{
let
ext
=
await
loadTipExtension
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
test
"
}
)
;
let
mainButton
=
document
.
querySelector
(
"
#
urlbarView
-
row
-
0
.
urlbarView
-
tip
-
button
"
)
;
Assert
.
ok
(
mainButton
)
;
EventUtils
.
synthesizeMouseAtCenter
(
mainButton
{
}
)
;
await
ext
.
awaitMessage
(
"
onResultPicked
received
"
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
tip_onResultPicked_mainButton_url_enter
(
)
{
let
ext
=
await
loadTipExtension
(
{
buttonUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
test
"
}
)
;
let
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
ext
.
onMessage
(
"
onResultPicked
received
"
(
)
=
>
{
Assert
.
ok
(
false
"
onResultPicked
should
not
be
called
"
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
loadedPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
http
:
/
/
example
.
com
/
"
)
;
}
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
tip_onResultPicked_mainButton_url_mouse
(
)
{
let
ext
=
await
loadTipExtension
(
{
buttonUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
test
"
}
)
;
let
mainButton
=
document
.
querySelector
(
"
#
urlbarView
-
row
-
0
.
urlbarView
-
tip
-
button
"
)
;
Assert
.
ok
(
mainButton
)
;
let
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
ext
.
onMessage
(
"
onResultPicked
received
"
(
)
=
>
{
Assert
.
ok
(
false
"
onResultPicked
should
not
be
called
"
)
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
mainButton
{
}
)
;
await
loadedPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
http
:
/
/
example
.
com
/
"
)
;
}
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
tip_onResultPicked_helpButton_url_enter
(
)
{
let
ext
=
await
loadTipExtension
(
{
helpUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
test
"
}
)
;
let
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
ext
.
onMessage
(
"
onResultPicked
received
"
(
)
=
>
{
Assert
.
ok
(
false
"
onResultPicked
should
not
be
called
"
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
loadedPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
http
:
/
/
example
.
com
/
"
)
;
}
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
tip_onResultPicked_helpButton_url_mouse
(
)
{
let
ext
=
await
loadTipExtension
(
{
helpUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
test
"
}
)
;
let
helpButton
=
document
.
querySelector
(
"
#
urlbarView
-
row
-
0
.
urlbarView
-
tip
-
help
"
)
;
Assert
.
ok
(
helpButton
)
;
let
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
ext
.
onMessage
(
"
onResultPicked
received
"
(
)
=
>
{
Assert
.
ok
(
false
"
onResultPicked
should
not
be
called
"
)
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
helpButton
{
}
)
;
await
loadedPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
http
:
/
/
example
.
com
/
"
)
;
}
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
search
(
)
{
gURLBar
.
blur
(
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
:
(
)
=
>
{
browser
.
urlbar
.
search
(
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
context
=
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
"
)
;
Assert
.
equal
(
context
.
searchString
"
test
"
)
;
Assert
.
ok
(
gURLBar
.
focused
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
focused
"
)
"
true
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
searchEmpty
(
)
{
gURLBar
.
blur
(
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
restricting
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
return
[
{
type
:
"
tip
"
source
:
"
local
"
heuristic
:
true
payload
:
{
text
:
"
Test
"
buttonText
:
"
OK
"
}
}
]
;
}
"
test
"
)
;
browser
.
urlbar
.
search
(
"
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
"
Waiting
for
provider
to
be
registered
"
)
;
let
context
=
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
)
;
Assert
.
equal
(
context
.
searchString
"
"
)
;
Assert
.
equal
(
context
.
results
.
length
1
)
;
Assert
.
equal
(
context
.
results
[
0
]
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
)
;
Assert
.
ok
(
gURLBar
.
focused
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
focused
"
)
"
true
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
searchFocusFalse
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
example
.
com
/
test1
"
"
http
:
/
/
example
.
com
/
test2
"
]
)
;
gURLBar
.
blur
(
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
:
(
)
=
>
{
browser
.
urlbar
.
search
(
"
test
"
{
focus
:
false
}
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
context
=
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
"
)
;
Assert
.
equal
(
context
.
searchString
"
test
"
)
;
Assert
.
ok
(
!
gURLBar
.
focused
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
focused
"
)
)
;
let
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
equal
(
resultCount
3
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
;
Assert
.
equal
(
result
.
title
"
test
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
result
.
url
"
http
:
/
/
example
.
com
/
test2
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
2
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
result
.
url
"
http
:
/
/
example
.
com
/
test1
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
searchFocusFalseEmpty
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
example
.
com
/
test1
"
"
http
:
/
/
example
.
com
/
test2
"
]
)
;
gURLBar
.
blur
(
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
:
(
)
=
>
{
browser
.
urlbar
.
search
(
"
"
{
focus
:
false
}
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
context
=
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
)
;
Assert
.
equal
(
context
.
searchString
"
"
)
;
Assert
.
ok
(
!
gURLBar
.
focused
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
focused
"
)
)
;
let
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
equal
(
resultCount
2
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
result
.
url
"
http
:
/
/
example
.
com
/
test2
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
result
.
url
"
http
:
/
/
example
.
com
/
test1
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
focusSelectFalse
(
)
{
gURLBar
.
blur
(
)
;
gURLBar
.
value
=
"
test
"
;
Assert
.
ok
(
!
gURLBar
.
focused
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
focused
"
)
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
:
(
)
=
>
{
browser
.
urlbar
.
focus
(
)
;
}
}
)
;
await
ext
.
startup
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
focused
)
;
Assert
.
ok
(
gURLBar
.
focused
)
;
Assert
.
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
gURLBar
.
selectionEnd
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
focusSelectTrue
(
)
{
gURLBar
.
blur
(
)
;
gURLBar
.
value
=
"
test
"
;
Assert
.
ok
(
!
gURLBar
.
focused
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
focused
"
)
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
:
(
)
=
>
{
browser
.
urlbar
.
focus
(
true
)
;
}
}
)
;
await
ext
.
startup
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
focused
)
;
Assert
.
ok
(
gURLBar
.
focused
)
;
Assert
.
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
0
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
test
"
.
length
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
closeView
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
test
"
}
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
background
:
(
)
=
>
{
browser
.
urlbar
.
closeView
(
)
;
}
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
ext
.
startup
(
)
)
;
await
ext
.
unload
(
)
;
}
)
;
