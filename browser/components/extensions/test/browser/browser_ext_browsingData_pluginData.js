"
use
strict
"
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
pluginHost
"
"
mozilla
.
org
/
plugin
/
host
;
1
"
"
nsIPluginHost
"
)
;
const
TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
/
"
)
;
const
TEST_URL
=
TEST_ROOT
+
"
file_clearplugindata
.
html
"
;
const
REFERENCE_DATE
=
Date
.
now
(
)
;
add_task
(
async
function
testPluginData
(
)
{
function
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
async
(
msg
options
)
=
>
{
if
(
msg
=
=
"
removePluginData
"
)
{
await
browser
.
browsingData
.
removePluginData
(
options
)
;
}
else
{
await
browser
.
browsingData
.
remove
(
options
{
pluginData
:
true
}
)
;
}
browser
.
test
.
sendMessage
(
"
pluginDataRemoved
"
)
;
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
manifest
:
{
permissions
:
[
"
browsingData
"
]
}
}
)
;
async
function
testRemovalMethod
(
method
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
extension
.
sendMessage
(
method
{
}
)
;
await
extension
.
awaitMessage
(
"
pluginDataRemoved
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
extension
.
sendMessage
(
method
{
since
:
REFERENCE_DATE
-
20000
}
)
;
await
extension
.
awaitMessage
(
"
pluginDataRemoved
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
extension
.
sendMessage
(
method
{
since
:
REFERENCE_DATE
-
1000000
}
)
;
await
extension
.
awaitMessage
(
"
pluginDataRemoved
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
extension
.
sendMessage
(
method
{
hostnames
:
[
"
bar
.
com
"
"
baz
.
com
"
]
}
)
;
await
extension
.
awaitMessage
(
"
pluginDataRemoved
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
extension
.
sendMessage
(
method
{
hostnames
:
[
]
}
)
;
await
extension
.
awaitMessage
(
"
pluginDataRemoved
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
waitForExplicitFinish
(
)
;
await
extension
.
startup
(
)
;
await
testRemovalMethod
(
"
removePluginData
"
)
;
await
testRemovalMethod
(
"
remove
"
)
;
await
extension
.
unload
(
)
;
ok
(
true
"
should
get
to
the
end
without
throwing
an
exception
"
)
;
finish
(
)
;
}
)
;
