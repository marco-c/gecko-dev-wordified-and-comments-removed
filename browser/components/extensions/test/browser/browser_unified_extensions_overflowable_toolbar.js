"
use
strict
"
;
loadTestSubscript
(
"
head_unified_extensions
.
js
"
)
;
const
NUM_EXTENSIONS
=
5
;
const
OVERFLOW_WINDOW_WIDTH_PX
=
450
;
const
DEFAULT_WIDGET_IDS
=
[
"
home
-
button
"
"
library
-
button
"
"
zoom
-
controls
"
"
search
-
container
"
"
sidebar
-
button
"
]
;
add_setup
(
async
function
(
)
{
for
(
const
widgetID
of
DEFAULT_WIDGET_IDS
)
{
CustomizableUI
.
addWidgetToArea
(
widgetID
CustomizableUI
.
AREA_NAVBAR
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
await
CustomizableUI
.
reset
(
)
;
}
)
;
}
)
;
function
getChildrenIDs
(
parent
)
{
return
Array
.
from
(
parent
.
children
)
.
map
(
child
=
>
child
.
id
)
;
}
async
function
withWindowOverflowed
(
win
taskFn
)
{
const
doc
=
win
.
document
;
const
navbar
=
doc
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
const
signpostWidgetID
=
"
home
-
button
"
;
const
manifests
=
[
]
;
for
(
let
i
=
0
;
i
<
NUM_EXTENSIONS
;
+
+
i
)
{
manifests
.
push
(
{
name
:
Extension
#
{
i
}
browser_action
:
{
}
}
)
;
}
const
extensions
=
createExtensions
(
manifests
)
;
await
Promise
.
all
(
extensions
.
map
(
extension
=
>
extension
.
startup
(
)
)
)
;
const
originalNavBarIDs
=
getChildrenIDs
(
CustomizableUI
.
getCustomizationTarget
(
navbar
)
)
;
const
originalWindowWidth
=
win
.
outerWidth
;
win
.
resizeTo
(
OVERFLOW_WINDOW_WIDTH_PX
win
.
outerHeight
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
navbar
.
hasAttribute
(
"
overflowing
"
)
&
&
doc
.
getElementById
(
signpostWidgetID
)
.
getAttribute
(
"
overflowedItem
"
)
=
=
"
true
"
)
;
}
)
;
Assert
.
ok
(
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
have
an
overflowing
toolbar
.
"
)
;
const
defaultList
=
doc
.
getElementById
(
navbar
.
getAttribute
(
"
default
-
overflowtarget
"
)
)
;
const
unifiedExtensionList
=
doc
.
getElementById
(
navbar
.
getAttribute
(
"
addon
-
webext
-
overflowtarget
"
)
)
;
const
extensionIDs
=
extensions
.
map
(
extension
=
>
extension
.
id
)
;
try
{
await
taskFn
(
defaultList
unifiedExtensionList
extensionIDs
)
;
}
finally
{
win
.
resizeTo
(
originalWindowWidth
win
.
outerHeight
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
doc
.
getElementById
(
signpostWidgetID
)
.
hasAttribute
(
"
overflowedItem
"
)
;
}
)
;
const
currentNavBarIDs
=
getChildrenIDs
(
CustomizableUI
.
getCustomizationTarget
(
navbar
)
)
;
Assert
.
deepEqual
(
originalNavBarIDs
currentNavBarIDs
)
;
await
Promise
.
all
(
extensions
.
map
(
extension
=
>
extension
.
unload
(
)
)
)
;
}
}
add_task
(
async
function
test_overflowable_toolbar
(
)
{
let
win
=
await
promiseEnableUnifiedExtensions
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
await
withWindowOverflowed
(
win
async
(
defaultList
unifiedExtensionList
extensionIDs
)
=
>
{
let
defaultListIDs
=
getChildrenIDs
(
defaultList
)
;
for
(
const
widgetID
of
DEFAULT_WIDGET_IDS
)
{
Assert
.
ok
(
defaultListIDs
.
includes
(
widgetID
)
Default
overflow
list
should
have
{
widgetID
}
)
;
}
Assert
.
ok
(
unifiedExtensionList
.
children
.
length
"
Should
have
items
in
the
Unified
Extension
list
.
"
)
;
for
(
const
child
of
Array
.
from
(
unifiedExtensionList
.
children
)
)
{
Assert
.
ok
(
extensionIDs
.
includes
(
child
.
dataset
.
extensionid
)
Unified
Extensions
overflow
list
should
have
{
child
.
dataset
.
extensionid
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_overflowable_toolbar_legacy
(
)
{
let
win
=
await
promiseDisableUnifiedExtensions
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
await
withWindowOverflowed
(
win
async
(
defaultList
unifiedExtensionList
extensionIDs
)
=
>
{
const
defaultListIDs
=
getChildrenIDs
(
defaultList
)
;
for
(
const
widgetID
of
DEFAULT_WIDGET_IDS
)
{
Assert
.
ok
(
defaultListIDs
.
includes
(
widgetID
)
Default
overflow
list
should
have
{
widgetID
}
)
;
}
for
(
const
extensionID
of
extensionIDs
)
{
Assert
.
ok
(
defaultList
.
querySelector
(
[
data
-
extensionid
=
'
{
extensionID
}
'
]
)
Default
list
should
have
{
extensionID
}
)
;
}
Assert
.
equal
(
unifiedExtensionList
.
children
.
length
0
"
Unified
Extension
overflow
list
should
be
empty
.
"
)
;
}
)
;
}
)
;
