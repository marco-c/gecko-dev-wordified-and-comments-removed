"
use
strict
"
;
async
function
focusButtonAndPressKeyWithDelay
(
key
elem
modifiers
)
{
elem
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
;
elem
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
key
{
type
:
"
keydown
"
modifiers
}
)
;
await
new
Promise
(
executeSoon
)
;
EventUtils
.
synthesizeKey
(
key
{
type
:
"
keyup
"
modifiers
}
)
;
elem
.
removeAttribute
(
"
tabindex
"
)
;
elem
.
blur
(
)
;
}
add_task
(
async
function
testKeyBrowserAction
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
browser_action
:
{
default_area
:
"
navbar
"
}
}
async
background
(
)
{
let
counter
=
0
;
browser
.
browserAction
.
onClicked
.
addListener
(
(
)
=
>
{
counter
+
+
;
}
)
;
browser
.
test
.
onMessage
.
addListener
(
async
msg
=
>
{
browser
.
test
.
assertEq
(
"
checkCounter
"
msg
"
expected
check
counter
message
"
)
;
browser
.
test
.
sendMessage
(
"
counter
"
counter
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
let
button
=
getBrowserActionWidget
(
extension
)
.
forWindow
(
window
)
.
node
.
querySelector
(
"
.
unified
-
extensions
-
item
-
action
-
button
"
)
;
await
promiseAnimationFrame
(
window
)
;
await
showBrowserAction
(
extension
window
)
;
await
focusButtonAndPressKeyWithDelay
(
"
"
button
{
}
)
;
extension
.
sendMessage
(
"
checkCounter
"
)
;
let
counter
=
await
extension
.
awaitMessage
(
"
counter
"
)
;
is
(
counter
1
"
Key
only
triggered
button
once
"
)
;
await
extension
.
unload
(
)
;
}
)
;
