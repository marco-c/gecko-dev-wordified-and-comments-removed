"
use
strict
"
;
const
PAGE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
extensions
/
test
/
browser
/
context
.
html
"
;
function
loadExtensionWithMenusApi
(
)
{
async
function
background
(
)
{
function
shownHandler
(
)
{
browser
.
test
.
sendMessage
(
"
onShown
fired
"
)
;
}
browser
.
menus
.
onShown
.
addListener
(
shownHandler
)
;
browser
.
test
.
onMessage
.
addListener
(
(
method
.
.
.
params
)
=
>
{
let
result
;
if
(
method
=
=
=
"
*
remove
onShown
listener
"
)
{
browser
.
menus
.
onShown
.
removeListener
(
shownHandler
)
;
result
=
Promise
.
resolve
(
)
;
}
else
if
(
method
=
=
=
"
create
"
)
{
result
=
new
Promise
(
resolve
=
>
{
browser
.
menus
.
create
(
params
[
0
]
resolve
)
;
}
)
;
}
else
{
result
=
browser
.
menus
[
method
]
(
.
.
.
params
)
;
}
result
.
then
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
{
method
}
-
result
)
;
}
)
;
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
manifest
:
{
browser_action
:
{
default_area
:
"
navbar
"
}
permissions
:
[
"
menus
"
]
}
}
)
;
extension
.
callMenuApi
=
async
function
(
method
.
.
.
params
)
{
info
(
Calling
{
method
}
(
{
JSON
.
stringify
(
params
)
}
)
)
;
extension
.
sendMessage
(
method
.
.
.
params
)
;
return
extension
.
awaitMessage
(
{
method
}
-
result
)
;
}
;
extension
.
removeOnShownListener
=
async
function
(
)
{
extension
.
callMenuApi
(
"
*
remove
onShown
listener
"
)
;
}
;
extension
.
getXULElementByMenuId
=
id
=
>
{
if
(
typeof
id
!
=
"
number
"
)
{
id
=
_
{
id
}
;
}
let
xulId
=
{
makeWidgetId
(
extension
.
id
)
}
-
menuitem
-
{
id
}
;
return
document
.
getElementById
(
xulId
)
;
}
;
return
extension
;
}
async
function
testRefreshMenusWhileVisible
(
{
contexts
doOpenMenu
doCloseMenu
}
)
{
let
extension
=
loadExtensionWithMenusApi
(
)
;
await
extension
.
startup
(
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
abc
"
title
:
"
first
"
contexts
}
)
;
let
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
null
"
Menu
item
should
not
be
visible
"
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
null
"
Menu
item
should
still
not
be
visible
"
)
;
await
doOpenMenu
(
extension
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
first
"
"
expected
label
"
)
;
await
extension
.
awaitMessage
(
"
onShown
fired
"
)
;
await
extension
.
callMenuApi
(
"
update
"
"
abc
"
{
title
:
"
updated
first
"
}
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
def
"
title
:
"
second
"
contexts
}
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
first
"
"
expected
unchanged
label
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
def
"
)
;
is
(
elem
null
"
Second
menu
item
should
not
be
visible
"
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
updated
first
"
"
expected
updated
label
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
def
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
second
"
"
expected
second
label
"
)
;
await
extension
.
callMenuApi
(
"
update
"
"
abc
"
{
enabled
:
false
}
)
;
await
extension
.
callMenuApi
(
"
update
"
"
def
"
{
enabled
:
false
}
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
.
getAttribute
(
"
disabled
"
)
"
true
"
"
1st
menu
item
should
be
disabled
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
def
"
)
;
is
(
elem
.
getAttribute
(
"
disabled
"
)
"
true
"
"
2nd
menu
item
should
be
disabled
"
)
;
await
extension
.
callMenuApi
(
"
remove
"
"
abc
"
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
def
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
second
"
"
other
menu
item
should
exist
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
null
"
removed
menu
item
should
be
gone
"
)
;
await
extension
.
callMenuApi
(
"
removeAll
"
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
def
"
)
;
is
(
elem
null
"
all
menu
items
should
be
gone
"
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
abc
"
title
:
"
re
-
used
"
contexts
}
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
re
-
used
"
"
menu
item
should
be
created
"
)
;
await
doCloseMenu
(
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
null
"
menu
item
must
be
gone
"
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
abc
"
)
;
is
(
elem
null
"
menu
item
must
still
be
gone
"
)
;
await
extension
.
unload
(
)
;
}
async
function
testRefreshOther
(
{
contexts
doOpenMenu
doCloseMenu
expectOtherItems
}
)
{
let
extension
=
loadExtensionWithMenusApi
(
)
;
let
other_extension
=
loadExtensionWithMenusApi
(
)
;
await
extension
.
startup
(
)
;
await
other_extension
.
startup
(
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
action_item
"
title
:
"
visible
menu
item
"
contexts
:
contexts
}
)
;
await
other_extension
.
callMenuApi
(
"
create
"
{
id
:
"
action_item
"
title
:
"
other
menu
item
"
contexts
:
contexts
}
)
;
await
doOpenMenu
(
extension
)
;
await
extension
.
awaitMessage
(
"
onShown
fired
"
)
;
if
(
expectOtherItems
)
{
await
other_extension
.
awaitMessage
(
"
onShown
fired
"
)
;
}
let
elem
=
extension
.
getXULElementByMenuId
(
"
action_item
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
visible
menu
item
"
"
extension
menu
shown
"
)
;
elem
=
other_extension
.
getXULElementByMenuId
(
"
action_item
"
)
;
if
(
expectOtherItems
)
{
is
(
elem
.
getAttribute
(
"
label
"
)
"
other
menu
item
"
"
other
extension
'
s
menu
is
also
shown
"
)
;
}
else
{
is
(
elem
null
"
other
extension
'
s
menu
should
be
hidden
"
)
;
}
await
extension
.
callMenuApi
(
"
update
"
"
action_item
"
{
title
:
"
changed
"
}
)
;
await
other_extension
.
callMenuApi
(
"
update
"
"
action_item
"
{
title
:
"
foo
"
}
)
;
await
other_extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
action_item
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
visible
menu
item
"
"
extension
menu
shown
"
)
;
elem
=
other_extension
.
getXULElementByMenuId
(
"
action_item
"
)
;
if
(
expectOtherItems
)
{
is
(
elem
.
getAttribute
(
"
label
"
)
"
foo
"
"
other
extension
'
s
item
is
updated
"
)
;
}
else
{
is
(
elem
null
"
other
extension
'
s
menu
should
still
be
hidden
"
)
;
}
await
doCloseMenu
(
)
;
await
extension
.
unload
(
)
;
await
other_extension
.
unload
(
)
;
}
add_task
(
async
function
refresh_menus_with_browser_action
(
)
{
const
args
=
{
contexts
:
[
"
browser_action
"
]
async
doOpenMenu
(
extension
)
{
await
openActionContextMenu
(
extension
"
browser
"
)
;
}
async
doCloseMenu
(
)
{
await
closeActionContextMenu
(
)
;
}
}
;
await
testRefreshMenusWhileVisible
(
args
)
;
args
.
expectOtherItems
=
false
;
await
testRefreshOther
(
args
)
;
}
)
;
add_task
(
async
function
refresh_menus_with_tab
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
)
;
const
args
=
{
contexts
:
[
"
tab
"
]
async
doOpenMenu
(
)
{
await
openTabContextMenu
(
)
;
}
async
doCloseMenu
(
)
{
await
closeTabContextMenu
(
)
;
}
}
;
await
testRefreshMenusWhileVisible
(
args
)
;
args
.
expectOtherItems
=
true
;
await
testRefreshOther
(
args
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
refresh_menus_with_tools_menu
(
)
{
const
args
=
{
contexts
:
[
"
tools_menu
"
]
async
doOpenMenu
(
)
{
await
openToolsMenu
(
)
;
}
async
doCloseMenu
(
)
{
await
closeToolsMenu
(
)
;
}
}
;
await
testRefreshMenusWhileVisible
(
args
)
;
args
.
expectOtherItems
=
true
;
await
testRefreshOther
(
args
)
;
}
)
;
add_task
(
async
function
refresh_menus_with_page
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
)
;
const
args
=
{
contexts
:
[
"
page
"
]
async
doOpenMenu
(
)
{
await
openContextMenu
(
"
body
"
)
;
}
async
doCloseMenu
(
)
{
await
closeExtensionContextMenu
(
)
;
}
}
;
await
testRefreshMenusWhileVisible
(
args
)
;
args
.
expectOtherItems
=
true
;
await
testRefreshOther
(
args
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
refresh_without_menus_at_onShown
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
)
;
let
extension
=
loadExtensionWithMenusApi
(
)
;
await
extension
.
startup
(
)
;
const
doOpenMenu
=
(
)
=
>
openContextMenu
(
"
body
"
)
;
const
doCloseMenu
=
(
)
=
>
closeExtensionContextMenu
(
)
;
await
doOpenMenu
(
)
;
await
extension
.
awaitMessage
(
"
onShown
fired
"
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
too
late
"
title
:
"
created
after
shown
"
}
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
let
elem
=
extension
.
getXULElementByMenuId
(
"
too
late
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
created
after
shown
"
"
extension
without
visible
menu
items
can
add
new
items
"
)
;
await
extension
.
callMenuApi
(
"
update
"
"
too
late
"
{
title
:
"
the
menu
item
"
}
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
too
late
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
the
menu
item
"
"
label
should
change
"
)
;
await
doCloseMenu
(
)
;
await
doOpenMenu
(
)
;
await
extension
.
awaitMessage
(
"
onShown
fired
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
too
late
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
the
menu
item
"
"
previously
registered
item
"
)
;
await
doCloseMenu
(
)
;
await
extension
.
unload
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
refresh_without_onShown
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
)
;
let
extension
=
loadExtensionWithMenusApi
(
)
;
await
extension
.
startup
(
)
;
await
extension
.
removeOnShownListener
(
)
;
const
doOpenMenu
=
(
)
=
>
openContextMenu
(
"
body
"
)
;
const
doCloseMenu
=
(
)
=
>
closeExtensionContextMenu
(
)
;
await
doOpenMenu
(
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
too
late
"
title
:
"
created
after
shown
"
}
)
;
is
(
extension
.
getXULElementByMenuId
(
"
too
late
"
)
null
"
item
created
after
shown
is
not
visible
before
refresh
"
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
let
elem
=
extension
.
getXULElementByMenuId
(
"
too
late
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
created
after
shown
"
"
refresh
updates
the
menu
even
without
onShown
"
)
;
await
doCloseMenu
(
)
;
await
extension
.
unload
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
refresh_menus_during_navigation
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
+
"
?
1
"
)
;
let
extension
=
loadExtensionWithMenusApi
(
)
;
await
extension
.
startup
(
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
item1
"
title
:
"
item1
"
contexts
:
[
"
browser_action
"
]
documentUrlPatterns
:
[
"
*
:
/
/
*
/
*
?
1
*
"
]
}
)
;
await
extension
.
callMenuApi
(
"
create
"
{
id
:
"
item2
"
title
:
"
item2
"
contexts
:
[
"
browser_action
"
]
documentUrlPatterns
:
[
"
*
:
/
/
*
/
*
?
2
*
"
]
}
)
;
await
openActionContextMenu
(
extension
"
browser
"
)
;
await
extension
.
awaitMessage
(
"
onShown
fired
"
)
;
let
elem
=
extension
.
getXULElementByMenuId
(
"
item1
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
item1
"
"
menu
item
1
should
be
shown
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
item2
"
)
;
is
(
elem
null
"
menu
item
2
should
be
hidden
"
)
;
BrowserTestUtils
.
loadURIString
(
tab
.
linkedBrowser
PAGE
+
"
?
2
"
)
;
await
BrowserTestUtils
.
browserStopped
(
tab
.
linkedBrowser
)
;
await
extension
.
callMenuApi
(
"
refresh
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
item1
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
item1
"
"
menu
item
1
should
still
be
shown
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
item2
"
)
;
is
(
elem
null
"
menu
item
2
should
still
be
hidden
"
)
;
await
closeActionContextMenu
(
)
;
await
openActionContextMenu
(
extension
"
browser
"
)
;
await
extension
.
awaitMessage
(
"
onShown
fired
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
item1
"
)
;
is
(
elem
null
"
menu
item
1
should
be
hidden
"
)
;
elem
=
extension
.
getXULElementByMenuId
(
"
item2
"
)
;
is
(
elem
.
getAttribute
(
"
label
"
)
"
item2
"
"
menu
item
2
should
be
shown
"
)
;
await
closeActionContextMenu
(
)
;
await
extension
.
unload
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
