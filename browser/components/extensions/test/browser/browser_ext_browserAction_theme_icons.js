"
use
strict
"
;
const
BACKGROUND
=
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4
/
/
8
/
w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg
=
=
"
;
const
LIGHT_THEME_COLORS
=
{
"
accentcolor
"
:
"
#
FFF
"
"
textcolor
"
:
"
#
000
"
}
;
const
DARK_THEME_COLORS
=
{
"
accentcolor
"
:
"
#
000
"
"
textcolor
"
:
"
#
FFF
"
}
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
webextensions
.
themes
.
enabled
"
true
]
]
}
)
;
}
)
;
async
function
testBrowserAction
(
extension
expectedIcon
)
{
let
browserActionWidget
=
getBrowserActionWidget
(
extension
)
;
await
promiseAnimationFrame
(
)
;
let
browserActionButton
=
browserActionWidget
.
forWindow
(
window
)
.
node
;
ok
(
getListStyleImage
(
browserActionButton
)
.
includes
(
expectedIcon
)
Expected
browser
action
icon
to
be
{
expectedIcon
}
)
;
}
async
function
testStaticTheme
(
options
)
{
let
{
themeType
themeIcons
withDefaultIcon
}
=
options
;
let
manifest
=
{
"
browser_action
"
:
{
"
theme_icons
"
:
themeIcons
}
}
;
if
(
withDefaultIcon
)
{
manifest
.
browser_action
.
default_icon
=
"
default
.
png
"
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
}
)
;
await
extension
.
startup
(
)
;
let
expectedDefaultIcon
=
withDefaultIcon
?
"
default
.
png
"
:
"
dark
.
png
"
;
await
testBrowserAction
(
extension
expectedDefaultIcon
)
;
let
theme
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
theme
"
:
{
"
images
"
:
{
"
headerURL
"
:
"
background
.
png
"
}
"
colors
"
:
themeType
=
=
=
"
light
"
?
LIGHT_THEME_COLORS
:
DARK_THEME_COLORS
}
}
files
:
{
"
background
.
png
"
:
BACKGROUND
}
}
)
;
await
theme
.
startup
(
)
;
if
(
themeType
=
=
"
light
"
)
{
await
testBrowserAction
(
extension
"
dark
.
png
"
)
;
}
else
{
await
testBrowserAction
(
extension
"
light
.
png
"
)
;
}
await
theme
.
unload
(
)
;
await
testBrowserAction
(
extension
expectedDefaultIcon
)
;
await
extension
.
unload
(
)
;
}
add_task
(
async
function
browseraction_theme_icons_light_theme
(
)
{
await
testStaticTheme
(
{
themeType
:
"
light
"
themeIcons
:
[
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
19
}
]
withDefaultIcon
:
true
}
)
;
await
testStaticTheme
(
{
themeType
:
"
light
"
themeIcons
:
[
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
16
}
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
32
}
]
withDefaultIcon
:
false
}
)
;
}
)
;
add_task
(
async
function
browseraction_theme_icons_dark_theme
(
)
{
await
testStaticTheme
(
{
themeType
:
"
dark
"
themeIcons
:
[
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
19
}
]
withDefaultIcon
:
true
}
)
;
await
testStaticTheme
(
{
themeType
:
"
dark
"
themeIcons
:
[
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
16
}
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
32
}
]
withDefaultIcon
:
false
}
)
;
}
)
;
add_task
(
async
function
browseraction_theme_icons_dynamic_theme
(
)
{
let
themeExtension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
theme
"
]
}
files
:
{
"
background
.
png
"
:
BACKGROUND
}
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
(
msg
colors
)
=
>
{
if
(
msg
=
=
=
"
update
-
theme
"
)
{
browser
.
theme
.
update
(
{
"
images
"
:
{
"
headerURL
"
:
"
background
.
png
"
}
"
colors
"
:
colors
}
)
;
browser
.
test
.
sendMessage
(
"
theme
-
updated
"
)
;
}
}
)
;
}
}
)
;
await
themeExtension
.
startup
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
browser_action
"
:
{
"
default_icon
"
:
"
default
.
png
"
"
theme_icons
"
:
[
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
16
}
{
"
light
"
:
"
light
.
png
"
"
dark
"
:
"
dark
.
png
"
"
size
"
:
32
}
]
}
}
}
)
;
await
extension
.
startup
(
)
;
await
testBrowserAction
(
extension
"
default
.
png
"
)
;
themeExtension
.
sendMessage
(
"
update
-
theme
"
LIGHT_THEME_COLORS
)
;
await
themeExtension
.
awaitMessage
(
"
theme
-
updated
"
)
;
await
testBrowserAction
(
extension
"
dark
.
png
"
)
;
themeExtension
.
sendMessage
(
"
update
-
theme
"
DARK_THEME_COLORS
)
;
await
themeExtension
.
awaitMessage
(
"
theme
-
updated
"
)
;
await
testBrowserAction
(
extension
"
light
.
png
"
)
;
await
themeExtension
.
unload
(
)
;
await
testBrowserAction
(
extension
"
default
.
png
"
)
;
await
extension
.
unload
(
)
;
}
)
;
