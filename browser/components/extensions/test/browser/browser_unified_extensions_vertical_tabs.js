"
use
strict
"
;
loadTestSubscript
(
"
head_unified_extensions
.
js
"
)
;
async
function
installTabstripExtension
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
browser_action
:
{
browser_style
:
true
default_area
:
"
tabstrip
"
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
return
extension
;
}
add_setup
(
async
function
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
await
CustomizableUI
.
reset
(
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
sidebar
.
revamp
"
true
]
[
"
sidebar
.
verticalTabs
"
false
]
]
}
)
;
}
)
;
add_task
(
async
function
test_widgets_in_tabstrip
(
)
{
const
extension
=
await
installTabstripExtension
(
)
;
const
tabstripCUITarget
=
CustomizableUI
.
getCustomizationTarget
(
document
.
querySelector
(
"
#
TabsToolbar
"
)
)
;
const
actionNode
=
tabstripCUITarget
.
querySelector
(
"
.
webextension
-
browser
-
action
"
)
;
is
(
actionNode
&
&
actionNode
.
dataset
.
extensionid
extension
.
id
"
Found
the
installed
extension
in
the
tabstrip
toolbar
"
)
;
let
widgetId
=
AppUiTestInternals
.
getBrowserActionWidgetId
(
extension
.
id
)
;
ok
(
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_TABSTRIP
)
.
includes
(
widgetId
)
"
Extension
widget
is
in
the
tabstrip
"
)
;
let
toolbarChanged
=
BrowserTestUtils
.
waitForEvent
(
window
"
toolbarvisibilitychange
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
sidebar
.
verticalTabs
"
true
]
]
}
)
;
await
toolbarChanged
;
ok
(
BrowserTestUtils
.
isHidden
(
tabstripCUITarget
)
"
The
tabstrip
toolbar
is
now
hidden
"
)
;
ok
(
!
tabstripCUITarget
.
querySelector
(
"
.
webextension
-
browser
-
action
"
)
"
There
are
no
webextension
widget
nodes
in
the
tabstrip
toolbar
anymore
"
)
;
ok
(
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_TABSTRIP
)
.
includes
(
widgetId
)
"
CUI
still
thinks
the
extension
widget
is
in
the
tabstrip
"
)
;
await
openExtensionsPanel
(
)
;
ok
(
getUnifiedExtensionsItem
(
extension
.
id
)
"
The
extension
is
represented
as
an
item
in
the
unified
extensions
panel
"
)
;
await
closeExtensionsPanel
(
)
;
toolbarChanged
=
BrowserTestUtils
.
waitForEvent
(
window
"
toolbarvisibilitychange
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
toolbarChanged
;
ok
(
BrowserTestUtils
.
isVisible
(
tabstripCUITarget
)
"
The
tabstrip
toolbar
is
now
visible
"
)
;
ok
(
tabstripCUITarget
.
querySelector
(
"
.
webextension
-
browser
-
action
"
)
"
The
webextension
widget
is
back
in
the
tabstrip
toolbar
"
)
;
ok
(
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_TABSTRIP
)
.
includes
(
widgetId
)
"
Extension
widget
is
still
in
the
tabstrip
"
)
;
ok
(
!
document
.
querySelector
(
"
#
nav
-
bar
.
webextension
-
browser
-
action
"
)
"
There
are
currently
no
webextension
widgets
in
the
nav
-
bar
toolbar
"
)
;
CustomizableUI
.
addWidgetToArea
(
widgetId
CustomizableUI
.
AREA_NAVBAR
)
;
ok
(
document
.
querySelector
(
"
#
nav
-
bar
.
webextension
-
browser
-
action
"
)
"
The
webextension
widget
is
now
in
the
nav
-
bar
toolbar
"
)
;
ok
(
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_NAVBAR
)
.
includes
(
widgetId
)
"
Extension
widget
is
now
in
the
nav
-
bar
"
)
;
await
extension
.
unload
(
)
;
await
CustomizableUI
.
reset
(
)
;
}
)
;
async
function
unpinFromToolbar
(
extension
win
=
window
)
{
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
extension
.
id
win
)
;
const
pinToToolbarItem
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
pin
-
to
-
toolbar
"
)
;
ok
(
pinToToolbarItem
"
expected
'
pin
to
toolbar
'
menu
item
"
)
;
is
(
pinToToolbarItem
.
getAttribute
(
"
checked
"
)
"
true
"
"
pin
menu
item
is
currently
checked
"
)
;
const
hidden
=
BrowserTestUtils
.
waitForEvent
(
win
.
gUnifiedExtensions
.
panel
"
popuphidden
"
true
)
;
contextMenu
.
activateItem
(
pinToToolbarItem
)
;
await
hidden
;
}
add_task
(
async
function
test_unpin_from_tabstrip_while_hidden
(
)
{
const
tabstripCUITarget
=
document
.
querySelector
(
"
#
TabsToolbar
"
)
;
const
extension
=
await
installTabstripExtension
(
)
;
const
widgetId
=
AppUiTestInternals
.
getBrowserActionWidgetId
(
extension
.
id
)
;
is
(
CustomizableUI
.
getPlacementOfWidget
(
widgetId
)
?
.
area
CustomizableUI
.
AREA_TABSTRIP
widget
located
in
correct
area
)
;
let
toolbarChanged
=
BrowserTestUtils
.
waitForEvent
(
window
"
toolbarvisibilitychange
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
sidebar
.
verticalTabs
"
true
]
]
}
)
;
await
toolbarChanged
;
ok
(
BrowserTestUtils
.
isHidden
(
tabstripCUITarget
)
"
The
tabstrip
area
is
hidden
"
)
;
await
openExtensionsPanel
(
)
;
ok
(
getUnifiedExtensionsItem
(
extension
.
id
)
"
The
extension
is
represented
as
an
item
in
the
unified
extensions
panel
"
)
;
await
unpinFromToolbar
(
extension
window
)
;
is
(
window
.
gUnifiedExtensions
.
panel
.
state
"
closed
"
"
The
panel
was
closed
by
the
context
menu
action
"
)
;
is
(
CustomizableUI
.
getPlacementOfWidget
(
widgetId
)
?
.
area
CustomizableUI
.
AREA_ADDONS
widget
moved
to
the
addons
area
)
;
toolbarChanged
=
BrowserTestUtils
.
waitForEvent
(
window
"
toolbarvisibilitychange
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
toolbarChanged
;
ok
(
!
tabstripCUITarget
.
querySelector
(
"
.
webextension
-
browser
-
action
"
)
"
There
are
no
extension
widgets
in
the
tabstrip
"
)
;
let
widget
=
getBrowserActionWidget
(
extension
)
;
is
(
CustomizableUI
.
getPlacementOfWidget
(
widget
.
id
)
?
.
area
CustomizableUI
.
AREA_ADDONS
widget
remained
in
correct
area
)
;
await
extension
.
unload
(
)
;
await
CustomizableUI
.
reset
(
)
;
}
)
;
