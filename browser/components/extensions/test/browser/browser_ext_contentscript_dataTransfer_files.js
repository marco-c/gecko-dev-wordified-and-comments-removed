"
use
strict
"
;
const
TEST_ORIGIN
=
"
http
:
/
/
mochi
.
test
:
8888
"
;
const
TEST_BASEURL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
TEST_ORIGIN
)
;
const
TEST_URL
=
{
TEST_BASEURL
}
file_dataTransfer_files
.
html
;
add_task
(
async
function
test_contentAndUserScripts_dataTransfer_files
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
http
:
/
/
mochi
.
test
/
"
]
user_scripts
:
{
}
}
background
:
async
function
(
)
{
await
browser
.
contentScripts
.
register
(
{
js
:
[
{
file
:
"
content_script
.
js
"
}
]
matches
:
[
"
http
:
/
/
mochi
.
test
/
*
"
]
runAt
:
"
document_start
"
}
)
;
await
browser
.
userScripts
.
register
(
{
js
:
[
{
file
:
"
user_script
.
js
"
}
]
matches
:
[
"
http
:
/
/
mochi
.
test
/
*
"
]
runAt
:
"
document_start
"
}
)
;
browser
.
test
.
sendMessage
(
"
scripts
-
registered
"
)
;
}
files
:
{
"
content_script
.
js
"
:
function
(
)
{
document
.
addEventListener
(
"
drop
"
function
(
e
)
{
const
files
=
e
.
dataTransfer
.
files
|
|
[
]
;
document
.
querySelector
(
"
#
result
-
content
-
script
"
)
.
textContent
=
files
[
0
]
?
.
name
;
}
{
once
:
true
capture
:
true
}
)
;
this
.
exportFunction
(
(
)
=
>
{
const
results
=
{
contentScript
:
document
.
querySelector
(
"
#
result
-
content
-
script
"
)
.
textContent
userScript
:
document
.
querySelector
(
"
#
result
-
user
-
script
"
)
.
textContent
pageScript
:
document
.
querySelector
(
"
#
result
-
page
-
script
"
)
.
textContent
}
;
browser
.
test
.
sendMessage
(
"
test
-
done
"
results
)
;
}
window
{
defineAs
:
"
testDone
"
}
)
;
}
"
user_script
.
js
"
:
function
(
)
{
document
.
addEventListener
(
"
drop
"
function
(
e
)
{
const
files
=
e
.
dataTransfer
.
files
|
|
[
]
;
document
.
querySelector
(
"
#
result
-
user
-
script
"
)
.
textContent
=
files
[
0
]
?
.
name
;
}
{
once
:
true
capture
:
true
}
)
;
}
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
scripts
-
registered
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
const
results
=
await
extension
.
awaitMessage
(
"
test
-
done
"
)
;
const
expectedFilename
=
"
testfile
.
html
"
;
Assert
.
deepEqual
(
results
{
contentScript
:
expectedFilename
userScript
:
expectedFilename
pageScript
:
expectedFilename
}
"
Got
the
expected
drag
and
drop
filenames
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
extension
.
unload
(
)
;
}
)
;
