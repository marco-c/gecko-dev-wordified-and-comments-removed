"
use
strict
"
;
SimpleTest
.
requestCompleteLog
(
)
;
loadTestSubscript
(
"
head_sessions
.
js
"
)
;
const
{
TabStateFlusher
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateFlusher
.
sys
.
mjs
"
)
;
async
function
openAndCloseTab
(
window
url
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
window
.
gBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
true
url
)
;
await
TabStateFlusher
.
flush
(
tab
.
linkedBrowser
)
;
let
sessionUpdatePromise
=
BrowserTestUtils
.
waitForSessionStoreUpdate
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
sessionUpdatePromise
;
}
async
function
run_test_extension
(
incognitoOverride
testData
)
{
const
initialURL
=
gBrowser
.
selectedBrowser
.
currentURI
.
spec
;
function
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
async
(
msg
sessionId
)
=
>
{
let
result
;
try
{
result
=
await
browser
.
sessions
.
restore
(
sessionId
)
;
}
catch
(
e
)
{
result
=
{
error
:
e
.
message
}
;
}
browser
.
test
.
sendMessage
(
"
result
"
result
)
;
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
sessions
"
"
tabs
"
]
}
background
incognitoOverride
}
)
;
await
extension
.
startup
(
)
;
let
privateWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
privateWin
.
gBrowser
testData
.
private
.
initialTabURL
)
;
await
openAndCloseTab
(
window
testData
.
notPrivate
.
tabToClose
)
;
let
{
closedId
:
nonPrivateClosedTabId
pos
:
nonPrivateIndex
}
=
SessionStore
.
getClosedTabDataForWindow
(
window
)
[
0
]
;
if
(
!
testData
.
notPrivate
.
expected
.
error
)
{
testData
.
notPrivate
.
expected
.
index
=
nonPrivateIndex
;
}
info
(
"
open
&
close
a
tab
in
the
private
window
with
URL
:
"
+
testData
.
private
.
tabToClose
)
;
await
openAndCloseTab
(
privateWin
testData
.
private
.
tabToClose
)
;
let
{
pos
:
privateIndex
}
=
SessionStore
.
getClosedTabDataForWindow
(
privateWin
)
[
0
]
;
if
(
!
testData
.
private
.
expected
.
error
)
{
testData
.
private
.
expected
.
index
=
privateIndex
;
}
await
SimpleTest
.
promiseFocus
(
window
)
;
info
(
"
Sending
'
restore
'
to
attempt
restore
the
closed
private
tab
"
)
;
extension
.
sendMessage
(
"
restore
"
)
;
let
sessionStoreChanged
=
TestUtils
.
topicObserved
(
"
sessionstore
-
closed
-
objects
-
changed
"
)
;
let
extResult
=
await
extension
.
awaitMessage
(
"
result
"
)
;
let
result
=
{
}
;
if
(
extResult
.
tab
)
{
await
sessionStoreChanged
;
await
BrowserTestUtils
.
browserLoaded
(
privateWin
.
gBrowser
.
selectedTab
.
linkedBrowser
true
testData
.
private
.
tabToClose
)
;
for
(
let
pname
of
Object
.
keys
(
testData
.
private
.
expected
)
)
{
result
[
pname
]
=
extResult
.
tab
[
pname
]
;
}
result
.
url
=
privateWin
.
gBrowser
.
selectedTab
.
linkedBrowser
.
currentURI
.
spec
;
}
else
{
result
.
error
=
extResult
.
error
.
replace
(
/
sessionId
\
s
+
\
d
+
/
"
sessionId
"
)
;
}
Assert
.
deepEqual
(
result
testData
.
private
.
expected
"
Restoring
the
private
tab
didn
'
t
match
expected
result
"
)
;
await
SimpleTest
.
promiseFocus
(
privateWin
)
;
info
(
"
Sending
'
restore
'
to
restore
the
non
-
private
tab
"
)
;
extension
.
sendMessage
(
"
restore
"
String
(
nonPrivateClosedTabId
)
)
;
sessionStoreChanged
=
TestUtils
.
topicObserved
(
"
sessionstore
-
closed
-
objects
-
changed
"
)
;
extResult
=
await
extension
.
awaitMessage
(
"
result
"
)
;
result
=
{
}
;
if
(
extResult
.
tab
)
{
await
sessionStoreChanged
;
await
BrowserTestUtils
.
browserLoaded
(
window
.
gBrowser
.
selectedTab
.
linkedBrowser
true
testData
.
notPrivate
.
tabToClose
)
;
for
(
let
pname
of
Object
.
keys
(
testData
.
notPrivate
.
expected
)
)
{
result
[
pname
]
=
extResult
.
tab
[
pname
]
;
}
result
.
url
=
window
.
gBrowser
.
selectedTab
.
linkedBrowser
.
currentURI
.
spec
;
}
else
{
result
.
error
=
extResult
.
error
.
replace
(
/
sessionId
\
s
+
\
d
+
/
"
sessionId
"
)
;
}
Assert
.
deepEqual
(
result
testData
.
notPrivate
.
expected
"
Restoring
the
non
-
private
tab
didn
'
t
match
expected
result
"
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWin
)
;
for
(
let
tab
of
gBrowser
.
tabs
.
filter
(
tab
=
>
!
tab
.
hidden
&
&
tab
.
linkedBrowser
.
currentURI
.
spec
!
=
=
initialURL
)
)
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
await
extension
.
unload
(
)
;
}
add_task
(
async
function
test_sessions_get_recently_closed_private_incognito_spanning
(
)
{
await
run_test_extension
(
"
spanning
"
{
private
:
{
initialTabURL
:
"
https
:
/
/
example
.
com
/
"
tabToClose
:
"
https
:
/
/
example
.
org
/
?
private
"
expected
:
{
url
:
"
https
:
/
/
example
.
org
/
?
private
"
incognito
:
true
}
}
notPrivate
:
{
initialTabURL
:
"
https
:
/
/
example
.
com
/
"
tabToClose
:
"
https
:
/
/
example
.
org
/
?
notprivate
"
expected
:
{
url
:
"
https
:
/
/
example
.
org
/
?
notprivate
"
incognito
:
false
}
}
}
)
;
}
)
;
add_task
(
async
function
test_sessions_get_recently_closed_private_incognito_not_allowed
(
)
{
await
run_test_extension
(
"
not_allowed
"
{
private
:
{
initialTabURL
:
"
https
:
/
/
example
.
com
/
"
tabToClose
:
"
https
:
/
/
example
.
org
/
?
private
"
expected
:
{
error
:
"
Could
not
restore
object
using
sessionId
.
"
}
}
notPrivate
:
{
initialTabURL
:
"
https
:
/
/
example
.
com
/
"
tabToClose
:
"
https
:
/
/
example
.
org
/
?
notprivate
"
expected
:
{
url
:
"
https
:
/
/
example
.
org
/
?
notprivate
"
incognito
:
false
}
}
}
)
;
}
)
;
add_task
(
async
function
test_sessions_get_recently_closed_private_incognito_spanning
(
)
{
await
run_test_extension
(
"
spanning
"
{
private
:
{
initialTabURL
:
"
https
:
/
/
example
.
com
/
"
tabToClose
:
"
https
:
/
/
example
.
org
/
?
private
"
expected
:
{
url
:
"
https
:
/
/
example
.
org
/
?
private
"
incognito
:
true
}
}
notPrivate
:
{
initialTabURL
:
"
https
:
/
/
example
.
com
/
"
tabToClose
:
"
https
:
/
/
example
.
org
/
?
notprivate
"
expected
:
{
url
:
"
https
:
/
/
example
.
org
/
?
notprivate
"
incognito
:
false
}
}
}
)
;
}
)
;
