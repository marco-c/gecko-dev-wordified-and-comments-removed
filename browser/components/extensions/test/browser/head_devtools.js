"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
loader
"
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gDevTools
"
(
)
=
>
{
const
{
gDevTools
}
=
loader
.
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
return
gDevTools
;
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DevToolsShim
"
"
chrome
:
/
/
devtools
-
startup
/
content
/
DevToolsShim
.
jsm
"
)
;
const
TOOLBOX_BLANK_PANEL_ID
=
"
testBlankPanel
"
;
async
function
registerBlankToolboxPanel
(
)
{
const
testBlankPanel
=
{
id
:
TOOLBOX_BLANK_PANEL_ID
url
:
"
about
:
blank
"
label
:
"
Blank
Tool
"
isTargetSupported
(
)
{
return
true
;
}
build
(
iframeWindow
toolbox
)
{
return
Promise
.
resolve
(
{
target
:
toolbox
.
target
toolbox
:
toolbox
isReady
:
true
panelDoc
:
iframeWindow
.
document
destroy
(
)
{
}
}
)
;
}
}
;
registerCleanupFunction
(
(
)
=
>
{
gDevTools
.
unregisterTool
(
testBlankPanel
.
id
)
;
}
)
;
gDevTools
.
registerTool
(
testBlankPanel
)
;
}
async
function
openToolboxForTab
(
tab
panelId
=
TOOLBOX_BLANK_PANEL_ID
)
{
if
(
panelId
=
=
TOOLBOX_BLANK_PANEL_ID
&
&
!
gDevTools
.
getToolDefinition
(
panelId
)
)
{
info
(
Registering
{
TOOLBOX_BLANK_PANEL_ID
}
tool
to
the
developer
tools
)
;
registerBlankToolboxPanel
(
)
;
}
const
toolbox
=
await
gDevTools
.
showToolboxForTab
(
tab
{
toolId
:
panelId
}
)
;
const
{
url
outerWindowID
}
=
toolbox
.
target
.
form
;
info
(
Developer
toolbox
opened
on
panel
"
{
panelId
}
"
for
target
{
JSON
.
stringify
(
{
url
outerWindowID
}
)
}
)
;
return
toolbox
;
}
async
function
closeToolboxForTab
(
tab
)
{
await
gDevTools
.
closeToolboxForTab
(
tab
)
;
const
tabUrl
=
tab
.
linkedBrowser
.
currentURI
.
spec
;
info
(
Developer
toolbox
closed
for
tab
"
{
tabUrl
}
"
)
;
}
function
assertDevToolsExtensionEnabled
(
uuid
enabled
)
{
for
(
let
toolbox
of
DevToolsShim
.
getToolboxes
(
)
)
{
is
(
enabled
!
!
toolbox
.
isWebExtensionEnabled
(
uuid
)
extension
is
{
enabled
?
"
enabled
"
:
"
disabled
"
}
on
toolbox
)
;
}
}
async
function
navigateToWithDevToolsOpen
(
tab
uri
isErrorPage
=
false
)
{
const
toolbox
=
await
gDevTools
.
getToolboxForTab
(
tab
)
;
const
target
=
toolbox
.
target
;
const
onTargetSwitched
=
toolbox
.
commands
.
targetCommand
.
once
(
"
switched
-
target
"
)
;
const
onNavigate
=
target
.
once
(
"
navigate
"
)
;
const
targetFollowsWindowLifecycle
=
target
.
targetForm
.
followWindowGlobalLifeCycle
;
info
(
Load
document
"
{
uri
}
"
)
;
const
browser
=
gBrowser
.
selectedBrowser
;
const
currentPID
=
browser
.
browsingContext
.
currentWindowGlobal
.
osPid
;
const
currentBrowsingContextID
=
browser
.
browsingContext
.
id
;
const
onBrowserLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
null
isErrorPage
)
;
BrowserTestUtils
.
loadURI
(
browser
uri
)
;
info
(
Waiting
for
page
to
be
loaded
)
;
await
onBrowserLoaded
;
info
(
page
loaded
)
;
const
switchedToAnotherProcess
=
currentPID
!
=
=
browser
.
browsingContext
.
currentWindowGlobal
.
osPid
;
const
switchedToAnotherBrowsingContext
=
currentBrowsingContextID
!
=
=
browser
.
browsingContext
.
id
;
if
(
switchedToAnotherProcess
|
|
targetFollowsWindowLifecycle
|
|
switchedToAnotherBrowsingContext
)
{
info
(
Waiting
for
target
switch
)
;
await
onTargetSwitched
;
info
(
switched
-
target
emitted
)
;
}
else
{
info
(
Waiting
for
target
'
navigate
'
event
)
;
await
onNavigate
;
info
(
'
navigate
'
emitted
)
;
}
}
