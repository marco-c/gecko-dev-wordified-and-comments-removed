"
use
strict
"
;
add_task
(
async
function
testExecuteScript
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
true
)
;
async
function
background
(
)
{
let
tab
;
const
BASE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
extensions
/
test
/
browser
/
"
;
const
URL
=
BASE
+
"
file_iframe_document
.
sjs
"
;
const
MAX_TRIES
=
10
;
try
{
[
tab
]
=
await
browser
.
tabs
.
query
(
{
active
:
true
currentWindow
:
true
}
)
;
let
success
=
false
;
for
(
let
tries
=
0
;
!
success
&
&
tries
<
MAX_TRIES
;
tries
+
+
)
{
let
url
=
{
URL
}
?
r
=
{
Math
.
random
(
)
}
;
let
loadingPromise
=
new
Promise
(
resolve
=
>
{
browser
.
tabs
.
onUpdated
.
addListener
(
function
listener
(
tabId
changed
tab_
)
{
if
(
tabId
=
=
tab
.
id
&
&
changed
.
status
=
=
"
loading
"
&
&
tab_
.
url
=
=
url
)
{
browser
.
tabs
.
onUpdated
.
removeListener
(
listener
)
;
resolve
(
)
;
}
}
)
;
}
)
;
await
browser
.
tabs
.
update
(
{
url
}
)
;
await
loadingPromise
;
let
states
=
await
Promise
.
all
(
[
browser
.
tabs
.
executeScript
(
{
code
:
"
document
.
readyState
"
}
)
browser
.
tabs
.
executeScript
(
{
code
:
"
document
.
readyState
"
runAt
:
"
document_idle
"
}
)
browser
.
tabs
.
executeScript
(
{
code
:
"
document
.
readyState
"
runAt
:
"
document_end
"
}
)
browser
.
tabs
.
executeScript
(
{
code
:
"
document
.
readyState
"
runAt
:
"
document_start
"
}
)
]
.
reverse
(
)
)
;
browser
.
test
.
log
(
Got
states
:
{
states
}
)
;
browser
.
test
.
assertTrue
(
states
[
1
]
=
=
"
interactive
"
|
|
states
[
1
]
=
=
"
complete
"
document_end
state
is
valid
:
{
states
[
1
]
}
)
;
browser
.
test
.
assertTrue
(
states
[
2
]
=
=
"
complete
"
document_idle
state
is
valid
:
{
states
[
2
]
}
)
;
success
=
(
states
[
0
]
=
=
"
loading
"
&
&
states
[
1
]
=
=
"
interactive
"
&
&
states
[
2
]
=
=
"
complete
"
&
&
states
[
3
]
=
=
"
complete
"
)
;
}
browser
.
test
.
assertTrue
(
success
"
Got
the
earliest
expected
states
at
least
once
"
)
;
browser
.
test
.
notifyPass
(
"
executeScript
-
runAt
"
)
;
}
catch
(
e
)
{
browser
.
test
.
fail
(
Error
:
{
e
}
:
:
{
e
.
stack
}
)
;
browser
.
test
.
notifyFail
(
"
executeScript
-
runAt
"
)
;
}
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
permissions
"
:
[
"
http
:
/
/
mochi
.
test
/
"
"
tabs
"
]
}
background
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitFinish
(
"
executeScript
-
runAt
"
)
;
await
extension
.
unload
(
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
