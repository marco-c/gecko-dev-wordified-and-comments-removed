"
use
strict
"
;
SimpleTest
.
requestCompleteLog
(
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
head_sessions
.
js
"
gTestPath
)
.
href
this
)
;
add_task
(
function
*
test_sessions_get_recently_closed_private
(
)
{
function
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
(
msg
filter
)
=
>
{
if
(
msg
=
=
"
check
-
sessions
"
)
{
browser
.
sessions
.
getRecentlyClosed
(
filter
)
.
then
(
recentlyClosed
=
>
{
browser
.
test
.
sendMessage
(
"
recentlyClosed
"
recentlyClosed
)
;
}
)
;
}
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
sessions
"
"
tabs
"
]
}
background
}
)
;
let
privateWin
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
yield
extension
.
startup
(
)
;
let
{
Management
:
{
global
:
{
WindowManager
}
}
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
{
}
)
;
let
privateWinId
=
WindowManager
.
getId
(
privateWin
)
;
extension
.
sendMessage
(
"
check
-
sessions
"
)
;
let
recentlyClosed
=
yield
extension
.
awaitMessage
(
"
recentlyClosed
"
)
;
recordInitialTimestamps
(
recentlyClosed
.
map
(
item
=
>
item
.
lastModified
)
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
privateWin
.
gBrowser
"
http
:
/
/
example
.
com
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
privateWin
.
gBrowser
"
http
:
/
/
example
.
com
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
extension
.
sendMessage
(
"
check
-
sessions
"
)
;
recentlyClosed
=
yield
extension
.
awaitMessage
(
"
recentlyClosed
"
)
;
checkRecentlyClosed
(
recentlyClosed
.
filter
(
onlyNewItemsFilter
)
2
privateWinId
true
)
;
yield
BrowserTestUtils
.
closeWindow
(
privateWin
)
;
extension
.
sendMessage
(
"
check
-
sessions
"
)
;
recentlyClosed
=
yield
extension
.
awaitMessage
(
"
recentlyClosed
"
)
;
is
(
recentlyClosed
.
filter
(
onlyNewItemsFilter
)
.
length
0
"
the
closed
private
window
info
was
not
found
in
recently
closed
data
"
)
;
yield
extension
.
unload
(
)
;
}
)
;
