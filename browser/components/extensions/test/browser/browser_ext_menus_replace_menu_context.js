"
use
strict
"
;
function
getVisibleChildrenIds
(
menuElem
)
{
return
Array
.
from
(
menuElem
.
children
)
.
filter
(
elem
=
>
!
elem
.
hidden
)
.
map
(
elem
=
>
elem
.
id
|
|
elem
.
tagName
)
;
}
function
checkIsDefaultMenuItemVisible
(
visibleMenuItemIds
)
{
ok
(
visibleMenuItemIds
.
includes
(
"
context
-
openlink
"
)
The
default
'
Open
Link
in
New
Tab
'
menu
item
should
be
in
{
visibleMenuItemIds
}
.
)
;
}
add_task
(
async
function
overrideContext_with_context
(
)
{
function
background
(
)
{
browser
.
test
.
onMessage
.
addListener
(
async
(
msg
tabId
)
=
>
{
browser
.
test
.
assertEq
(
"
testTabAccess
"
msg
Expected
message
in
{
browser
.
runtime
.
id
}
)
;
let
tab
=
await
browser
.
tabs
.
get
(
tabId
)
;
if
(
!
tab
.
url
)
{
browser
.
test
.
sendMessage
(
"
testTabAccessDone
"
false
)
;
return
;
}
try
{
let
[
url
]
=
await
browser
.
tabs
.
executeScript
(
tabId
{
code
:
"
document
.
URL
"
}
)
;
browser
.
test
.
assertEq
(
"
http
:
/
/
example
.
com
/
?
SomeTab
"
url
"
Expected
successful
executeScript
"
)
;
}
catch
(
e
)
{
browser
.
test
.
fail
(
Failed
to
execute
script
at
{
tabId
}
(
{
tab
.
url
}
)
:
{
e
}
)
;
}
browser
.
test
.
sendMessage
(
"
testTabAccessDone
"
true
)
;
}
)
;
browser
.
menus
.
onShown
.
addListener
(
(
info
tab
)
=
>
{
browser
.
test
.
sendMessage
(
"
onShown
"
{
menuIds
:
info
.
menuIds
contexts
:
info
.
contexts
bookmarkId
:
info
.
bookmarkId
tabId
:
tab
&
&
tab
.
id
}
)
;
}
)
;
browser
.
menus
.
onClicked
.
addListener
(
(
info
tab
)
=
>
{
browser
.
test
.
sendMessage
(
"
onClicked
"
{
menuItemId
:
info
.
menuItemId
bookmarkId
:
info
.
bookmarkId
tabId
:
tab
&
&
tab
.
id
}
)
;
}
)
;
browser
.
menus
.
create
(
{
id
:
"
tab_context
"
title
:
"
tab_context
"
contexts
:
[
"
tab
"
]
}
)
;
browser
.
menus
.
create
(
{
id
:
"
bookmark_context
"
title
:
"
bookmark_context
"
contexts
:
[
"
bookmark
"
]
}
)
;
browser
.
menus
.
create
(
{
id
:
"
link_context
"
title
:
"
link_context
"
}
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
menu_items_registered
"
)
;
}
)
;
if
(
browser
.
runtime
.
id
=
=
=
"
menu
-
test
-
extension
"
)
{
browser
.
tabs
.
create
(
{
url
:
"
tab
.
html
"
}
)
;
}
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
"
menu
-
test
-
extension
"
}
}
permissions
:
[
"
menus
"
"
menus
.
overrideContext
"
"
tabs
"
"
bookmarks
"
"
<
all_urls
>
"
]
}
files
:
{
"
tab
.
html
"
:
<
!
DOCTYPE
html
>
<
meta
charset
=
"
utf
-
8
"
>
<
a
href
=
"
http
:
/
/
example
.
com
/
"
>
Link
<
/
a
>
<
script
src
=
"
tab
.
js
"
>
<
/
script
>
"
tab
.
js
"
:
async
(
)
=
>
{
let
[
tab
]
=
await
browser
.
tabs
.
query
(
{
url
:
"
http
:
/
/
example
.
com
/
?
SomeTab
"
}
)
;
let
bookmark
=
await
browser
.
bookmarks
.
create
(
{
title
:
"
Bookmark
for
menu
test
"
url
:
"
http
:
/
/
example
.
com
/
bookmark
"
}
)
;
let
testCases
=
[
{
context
:
"
tab
"
tabId
:
tab
.
id
}
{
context
:
"
bookmark
"
bookmarkId
:
bookmark
.
id
}
{
context
:
"
tab
"
tabId
:
123456789
}
]
;
document
.
addEventListener
(
"
contextmenu
"
(
)
=
>
{
browser
.
menus
.
overrideContext
(
testCases
.
shift
(
)
)
;
browser
.
test
.
sendMessage
(
"
oncontextmenu_in_dom
"
)
;
}
)
;
browser
.
test
.
sendMessage
(
"
setup_ready
"
{
bookmarkId
:
bookmark
.
id
tabId
:
tab
.
id
}
)
;
}
}
background
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
/
?
SomeTab
"
)
;
let
otherExtension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
"
other
-
test
-
extension
"
}
}
permissions
:
[
"
menus
"
"
bookmarks
"
"
activeTab
"
]
}
background
}
)
;
await
otherExtension
.
startup
(
)
;
await
otherExtension
.
awaitMessage
(
"
menu_items_registered
"
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
menu_items_registered
"
)
;
let
{
bookmarkId
tabId
}
=
await
extension
.
awaitMessage
(
"
setup_ready
"
)
;
info
(
Set
up
test
with
tabId
=
{
tabId
}
and
bookmarkId
=
{
bookmarkId
}
.
)
;
{
let
menu
=
await
openContextMenu
(
"
a
"
)
;
await
extension
.
awaitMessage
(
"
oncontextmenu_in_dom
"
)
;
for
(
let
ext
of
[
extension
otherExtension
]
)
{
info
(
Testing
menu
from
{
ext
.
id
}
after
changing
context
to
tab
)
;
Assert
.
deepEqual
(
await
ext
.
awaitMessage
(
"
onShown
"
)
{
menuIds
:
[
"
tab_context
"
]
contexts
:
[
"
tab
"
]
bookmarkId
:
undefined
tabId
}
"
Expected
onShown
details
after
changing
context
to
tab
"
)
;
}
Assert
.
deepEqual
(
getVisibleChildrenIds
(
menu
)
[
{
makeWidgetId
(
extension
.
id
)
}
-
menuitem
-
_tab_context
menuseparator
{
makeWidgetId
(
otherExtension
.
id
)
}
-
menuitem
-
_tab_context
]
"
Expected
menu
items
after
changing
context
to
tab
"
)
;
extension
.
sendMessage
(
"
testTabAccess
"
tabId
)
;
ok
(
await
extension
.
awaitMessage
(
"
testTabAccessDone
"
)
"
Extension
has
access
via
permissions
"
)
;
otherExtension
.
sendMessage
(
"
testTabAccess
"
tabId
)
;
isnot
(
await
otherExtension
.
awaitMessage
(
"
testTabAccessDone
"
)
"
Other
extension
should
not
have
activeTab
permissions
yet
.
"
)
;
let
menuItems
=
menu
.
getElementsByAttribute
(
"
label
"
"
tab_context
"
)
;
is
(
menuItems
.
length
2
"
There
are
two
menu
items
with
label
'
tab_context
'
"
)
;
await
closeExtensionContextMenu
(
menuItems
[
1
]
)
;
Assert
.
deepEqual
(
await
otherExtension
.
awaitMessage
(
"
onClicked
"
)
{
menuItemId
:
"
tab_context
"
bookmarkId
:
undefined
tabId
}
"
Expected
onClicked
details
after
changing
context
to
tab
"
)
;
otherExtension
.
sendMessage
(
"
testTabAccess
"
tabId
)
;
ok
(
await
otherExtension
.
awaitMessage
(
"
testTabAccessDone
"
)
"
Other
extension
should
have
activeTab
permissions
.
"
)
;
}
{
let
menu
=
await
openContextMenu
(
"
a
"
)
;
await
extension
.
awaitMessage
(
"
oncontextmenu_in_dom
"
)
;
for
(
let
ext
of
[
extension
otherExtension
]
)
{
info
(
Testing
menu
from
{
ext
.
id
}
after
changing
context
to
bookmark
)
;
let
shownInfo
=
await
ext
.
awaitMessage
(
"
onShown
"
)
;
Assert
.
deepEqual
(
shownInfo
{
menuIds
:
[
"
bookmark_context
"
]
contexts
:
[
"
bookmark
"
]
bookmarkId
tabId
:
undefined
}
"
Expected
onShown
details
after
changing
context
to
bookmark
"
)
;
}
Assert
.
deepEqual
(
getVisibleChildrenIds
(
menu
)
[
{
makeWidgetId
(
extension
.
id
)
}
-
menuitem
-
_bookmark_context
menuseparator
{
makeWidgetId
(
otherExtension
.
id
)
}
-
menuitem
-
_bookmark_context
]
"
Expected
menu
items
after
changing
context
to
bookmark
"
)
;
await
closeContextMenu
(
menu
)
;
}
{
let
menu
=
await
openContextMenu
(
"
a
"
)
;
await
extension
.
awaitMessage
(
"
oncontextmenu_in_dom
"
)
;
checkIsDefaultMenuItemVisible
(
getVisibleChildrenIds
(
menu
)
)
;
await
closeContextMenu
(
menu
)
;
}
await
extension
.
unload
(
)
;
await
otherExtension
.
unload
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
