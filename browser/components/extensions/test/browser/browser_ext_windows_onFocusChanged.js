"
use
strict
"
;
async
function
openNonBrowserWindow
(
)
{
info
(
"
Opening
non
-
browser
window
"
)
;
const
win
=
Services
.
ww
.
openWindow
(
window
"
chrome
:
/
/
extensions
/
content
/
dummy
.
xhtml
"
"
_blank
"
"
chrome
dialog
=
no
all
"
null
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
info
(
"
Opened
and
focused
non
-
browser
window
"
)
;
return
win
;
}
function
simulateFocusChanged
(
)
{
const
{
Management
:
{
global
:
{
windowTracker
}
}
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
sys
.
mjs
"
)
;
ok
(
windowTracker
.
_listeners
.
has
(
"
blur
"
)
"
windowTracker
has
blur
listener
"
)
;
let
blurListeners
=
windowTracker
.
_listeners
.
get
(
"
blur
"
)
;
is
(
blurListeners
.
size
1
"
windowTracker
has
one
blur
listener
"
)
;
let
blurListenerFromOnFocusChanged
=
blurListeners
.
values
(
)
.
next
(
)
.
value
;
info
(
Simulating
onFocusChanged
listener
:
{
blurListenerFromOnFocusChanged
}
)
;
blurListenerFromOnFocusChanged
(
)
;
}
add_task
(
async
function
test_onFocusChanged_when_open_non_browser_window
(
)
{
function
background
(
)
{
let
winIdPromise
;
let
seenWindowId
=
false
;
browser
.
windows
.
onFocusChanged
.
addListener
(
async
windowId
=
>
{
let
initialWindowId
=
await
winIdPromise
;
if
(
!
seenWindowId
)
{
if
(
windowId
=
=
=
-
1
)
{
browser
.
test
.
log
(
"
Ignore
windowId
-
1
from
switch
to
initial
window
"
)
;
return
;
}
browser
.
test
.
assertEq
(
initialWindowId
windowId
"
Got
initial
window
"
)
;
seenWindowId
=
true
;
}
browser
.
test
.
log
(
onFocusChange
:
windowId
=
{
windowId
}
)
;
browser
.
test
.
sendMessage
(
"
onFocusChanged
"
windowId
)
;
}
)
;
browser
.
test
.
onMessage
.
addListener
(
async
msg
=
>
{
browser
.
test
.
assertEq
(
"
closeWindow
"
msg
"
expected
message
"
)
;
await
browser
.
windows
.
remove
(
await
winIdPromise
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
)
;
winIdPromise
=
browser
.
windows
.
create
(
{
}
)
.
then
(
win
=
>
win
.
id
)
;
winIdPromise
.
then
(
windowId
=
>
browser
.
test
.
sendMessage
(
"
initialWindow
"
windowId
)
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
}
)
;
await
extension
.
startup
(
)
;
let
[
initialWindowId
focusedWindowId
]
=
await
Promise
.
all
(
[
extension
.
awaitMessage
(
"
initialWindow
"
)
extension
.
awaitMessage
(
"
onFocusChanged
"
)
]
)
;
is
(
initialWindowId
focusedWindowId
"
New
browser
window
has
focus
"
)
;
const
win
=
await
openNonBrowserWindow
(
)
;
let
newFocusedWindowId
=
await
extension
.
awaitMessage
(
"
onFocusChanged
"
)
;
is
(
newFocusedWindowId
-
1
"
After
losing
focus
windowId
is
-
1
"
)
;
extension
.
sendMessage
(
"
closeWindow
"
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
extension
.
unload
(
)
;
win
.
close
(
)
;
}
)
;
add_task
(
async
function
test_simulate_onFocusChanged_with_non_browser_window
(
)
{
const
win
=
await
openNonBrowserWindow
(
)
;
function
background
(
)
{
let
count
=
0
;
browser
.
windows
.
onFocusChanged
.
addListener
(
windowId
=
>
{
browser
.
test
.
assertEq
(
1
+
+
count
"
expect
one
fake
onFocusChanged
event
"
)
;
browser
.
test
.
assertEq
(
-
1
windowId
"
When
non
-
browser
window
is
focused
windowId
is
-
1
.
"
)
;
browser
.
test
.
sendMessage
(
"
done
"
)
;
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
background
}
)
;
await
extension
.
startup
(
)
;
is
(
Services
.
focus
.
activeWindow
win
"
Non
-
browser
window
is
focused
"
)
;
simulateFocusChanged
(
)
;
info
(
"
Waiting
for
onFocusChanged
to
be
triggered
"
)
;
await
extension
.
awaitMessage
(
"
done
"
)
;
await
extension
.
unload
(
)
;
win
.
close
(
)
;
}
)
;
