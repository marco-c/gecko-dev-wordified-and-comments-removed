"
use
strict
"
;
requestLongerTimeout
(
2
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AbuseReporter
"
"
resource
:
/
/
gre
/
modules
/
AbuseReporter
.
jsm
"
)
;
const
{
EnterprisePolicyTesting
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
EnterprisePolicyTesting
.
sys
.
mjs
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
TELEMETRY_EVENTS_FILTERS
=
{
category
:
"
addonsManager
"
method
:
"
action
"
}
;
loadTestSubscript
(
"
head_unified_extensions
.
js
"
)
;
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
report
dialog
closed
/
)
;
const
promiseExtensionUninstalled
=
extensionId
=
>
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
}
;
listener
.
onUninstalled
=
addon
=
>
{
if
(
addon
.
id
=
=
extensionId
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
}
)
;
}
;
function
waitClosedWindow
(
win
)
{
return
new
Promise
(
resolve
=
>
{
function
onWindowClosed
(
)
{
if
(
win
&
&
!
win
.
closed
)
{
return
;
}
Services
.
obs
.
removeObserver
(
onWindowClosed
"
xul
-
window
-
destroyed
"
)
;
resolve
(
)
;
}
Services
.
obs
.
addObserver
(
onWindowClosed
"
xul
-
window
-
destroyed
"
)
;
}
)
;
}
let
win
;
add_setup
(
async
function
(
)
{
win
=
await
promiseEnableUnifiedExtensions
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
test_context_menu
(
)
{
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
item
=
getUnifiedExtensionsItem
(
win
extension
.
id
)
;
ok
(
item
"
expected
an
item
for
the
extension
"
)
;
const
menuButton
=
item
.
querySelector
(
"
.
unified
-
extensions
-
item
-
open
-
menu
"
)
;
ok
(
menuButton
"
expected
'
open
menu
'
button
"
)
;
let
messageHover
=
item
.
querySelector
(
"
.
unified
-
extensions
-
item
-
message
-
hover
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
item
.
querySelector
(
"
.
unified
-
extensions
-
item
-
message
-
default
"
)
)
"
expected
message
to
be
visible
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
messageHover
)
"
expected
'
hover
message
'
to
be
hidden
"
)
;
let
hovered
=
BrowserTestUtils
.
waitForEvent
(
menuButton
"
mouseover
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
menuButton
{
type
:
"
mouseover
"
}
win
)
;
await
hovered
;
is
(
item
.
getAttribute
(
"
secondary
-
button
-
hovered
"
)
"
true
"
"
expected
secondary
-
button
-
hovered
attr
on
the
item
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
item
.
querySelector
(
"
.
unified
-
extensions
-
item
-
message
-
default
"
)
)
"
expected
message
to
be
hidden
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
messageHover
)
"
expected
'
hover
message
'
to
be
visible
"
)
;
Assert
.
deepEqual
(
win
.
document
.
l10n
.
getAttributes
(
messageHover
)
{
id
:
"
unified
-
extensions
-
item
-
message
-
manage
"
args
:
null
}
"
expected
correct
l10n
attributes
for
the
message
displayed
on
secondary
button
hovered
"
)
;
let
notHovered
=
BrowserTestUtils
.
waitForEvent
(
menuButton
"
mouseout
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
{
type
:
"
mouseover
"
}
win
)
;
await
notHovered
;
ok
(
!
item
.
hasAttribute
(
"
secondary
-
button
-
hovered
"
)
"
expected
no
secondary
-
button
-
hovered
attr
on
the
item
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
item
.
querySelector
(
"
.
unified
-
extensions
-
item
-
message
-
default
"
)
)
"
expected
message
to
be
visible
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
messageHover
)
"
expected
'
hover
message
'
to
be
hidden
"
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
const
doc
=
contextMenu
.
ownerDocument
;
const
manageButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
manage
-
extension
"
)
;
ok
(
manageButton
"
expected
manage
button
"
)
;
is
(
manageButton
.
hidden
false
"
expected
manage
button
to
be
visible
"
)
;
is
(
manageButton
.
disabled
false
"
expected
manage
button
to
be
enabled
"
)
;
Assert
.
deepEqual
(
doc
.
l10n
.
getAttributes
(
manageButton
)
{
id
:
"
unified
-
extensions
-
context
-
menu
-
manage
-
extension
"
args
:
null
}
"
expected
correct
l10n
attributes
for
manage
button
"
)
;
const
removeButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
remove
-
extension
"
)
;
ok
(
removeButton
"
expected
remove
button
"
)
;
is
(
removeButton
.
hidden
false
"
expected
remove
button
to
be
visible
"
)
;
is
(
removeButton
.
disabled
false
"
expected
remove
button
to
be
enabled
"
)
;
Assert
.
deepEqual
(
doc
.
l10n
.
getAttributes
(
removeButton
)
{
id
:
"
unified
-
extensions
-
context
-
menu
-
remove
-
extension
"
args
:
null
}
"
expected
correct
l10n
attributes
for
remove
button
"
)
;
const
reportButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
report
-
extension
"
)
;
ok
(
reportButton
"
expected
report
button
"
)
;
is
(
reportButton
.
hidden
false
"
expected
report
button
to
be
visible
"
)
;
is
(
reportButton
.
disabled
false
"
expected
report
button
to
be
enabled
"
)
;
Assert
.
deepEqual
(
doc
.
l10n
.
getAttributes
(
reportButton
)
{
id
:
"
unified
-
extensions
-
context
-
menu
-
report
-
extension
"
args
:
null
}
"
expected
correct
l10n
attributes
for
report
button
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
await
closeExtensionsPanel
(
win
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_context_menu_report_button_hidden_when_abuse_report_disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
abuseReport
.
enabled
"
false
]
]
}
)
;
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
const
reportButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
report
-
extension
"
)
;
ok
(
reportButton
"
expected
report
button
"
)
;
is
(
reportButton
.
hidden
true
"
expected
report
button
to
be
hidden
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
await
closeExtensionsPanel
(
win
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_context_menu_remove_button_disabled_when_extension_cannot_be_uninstalled
(
)
{
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
Extensions
:
{
Locked
:
[
extension
.
id
]
}
}
}
)
;
await
openExtensionsPanel
(
win
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
const
removeButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
remove
-
extension
"
)
;
ok
(
removeButton
"
expected
remove
button
"
)
;
is
(
removeButton
.
disabled
true
"
expected
remove
button
to
be
disabled
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
await
closeExtensionsPanel
(
win
)
;
await
extension
.
unload
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
"
"
)
;
}
)
;
add_task
(
async
function
test_manage_extension
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
BrowserTestUtils
.
loadURI
(
win
.
gBrowser
.
selectedBrowser
"
about
:
robots
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
win
.
gBrowser
.
selectedBrowser
)
;
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
const
manageButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
manage
-
extension
"
)
;
ok
(
manageButton
"
expected
manage
button
"
)
;
const
hidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
const
aboutAddons
=
BrowserTestUtils
.
waitForNewTab
(
win
.
gBrowser
"
about
:
addons
"
true
)
;
contextMenu
.
activateItem
(
manageButton
)
;
const
[
aboutAddonsTab
]
=
await
Promise
.
all
(
[
aboutAddons
hidden
]
)
;
BrowserTestUtils
.
removeTab
(
aboutAddonsTab
)
;
await
extension
.
unload
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
unifiedExtensions
"
value
:
null
extra
:
{
addonId
:
extension
.
id
action
:
"
manage
"
}
}
]
TELEMETRY_EVENTS_FILTERS
)
;
}
)
;
add_task
(
async
function
test_report_extension
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
abuseReport
.
enabled
"
true
]
]
}
)
;
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
win
.
gBrowser
}
async
(
)
=
>
{
await
openExtensionsPanel
(
win
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
const
reportButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
report
-
extension
"
)
;
ok
(
reportButton
"
expected
report
button
"
)
;
const
hidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
const
abuseReportOpen
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
AbuseReporter
.
getOpenDialog
(
)
"
wait
for
the
abuse
report
dialog
to
have
been
opened
"
)
;
contextMenu
.
activateItem
(
reportButton
)
;
const
[
reportDialogWindow
]
=
await
Promise
.
all
(
[
abuseReportOpen
hidden
]
)
;
const
reportDialogParams
=
reportDialogWindow
.
arguments
[
0
]
.
wrappedJSObject
;
is
(
reportDialogParams
.
report
.
addon
.
id
extension
.
id
"
abuse
report
dialog
has
the
expected
addon
id
"
)
;
is
(
reportDialogParams
.
report
.
reportEntryPoint
"
unified_context_menu
"
"
abuse
report
dialog
has
the
expected
reportEntryPoint
"
)
;
let
promiseClosedWindow
=
waitClosedWindow
(
)
;
reportDialogWindow
.
close
(
)
;
await
promiseClosedWindow
;
}
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_remove_extension
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
const
removeButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
remove
-
extension
"
)
;
ok
(
removeButton
"
expected
remove
button
"
)
;
const
{
prompt
}
=
Services
;
const
promptService
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPromptService
"
]
)
confirmEx
(
)
{
return
0
;
}
}
;
Services
.
prompt
=
promptService
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prompt
=
prompt
;
}
)
;
const
uninstalled
=
promiseExtensionUninstalled
(
extension
.
id
)
;
const
hidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
contextMenu
.
activateItem
(
removeButton
)
;
await
Promise
.
all
(
[
uninstalled
hidden
]
)
;
await
extension
.
unload
(
)
;
Services
.
prompt
=
prompt
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
unifiedExtensions
"
value
:
"
accepted
"
extra
:
{
addonId
:
extension
.
id
action
:
"
uninstall
"
}
}
]
TELEMETRY_EVENTS_FILTERS
)
;
}
)
;
add_task
(
async
function
test_remove_extension_cancelled
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
const
removeButton
=
contextMenu
.
querySelector
(
"
.
unified
-
extensions
-
context
-
menu
-
remove
-
extension
"
)
;
ok
(
removeButton
"
expected
remove
button
"
)
;
const
{
prompt
}
=
Services
;
const
promptService
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPromptService
"
]
)
confirmEx
(
)
{
return
1
;
}
}
;
Services
.
prompt
=
promptService
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prompt
=
prompt
;
}
)
;
const
hidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
contextMenu
.
activateItem
(
removeButton
)
;
await
hidden
;
await
openExtensionsPanel
(
win
)
;
const
item
=
getUnifiedExtensionsItem
(
win
extension
.
id
)
;
is
(
item
.
querySelector
(
"
.
unified
-
extensions
-
item
-
name
"
)
.
textContent
"
an
extension
"
"
expected
extension
to
still
be
listed
"
)
;
await
closeExtensionsPanel
(
win
)
;
await
extension
.
unload
(
)
;
Services
.
prompt
=
prompt
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
unifiedExtensions
"
value
:
"
cancelled
"
extra
:
{
addonId
:
extension
.
id
action
:
"
uninstall
"
}
}
]
TELEMETRY_EVENTS_FILTERS
)
;
}
)
;
add_task
(
async
function
test_open_context_menu_on_click
(
)
{
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
button
=
getUnifiedExtensionsItem
(
win
extension
.
id
)
.
querySelector
(
"
.
unified
-
extensions
-
item
-
open
-
menu
"
)
;
ok
(
button
"
expected
'
open
menu
'
button
"
)
;
const
contextMenu
=
win
.
document
.
getElementById
(
"
unified
-
extensions
-
context
-
menu
"
)
;
ok
(
contextMenu
"
expected
menu
"
)
;
const
shown
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
type
:
"
contextmenu
"
}
win
)
;
await
shown
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
await
closeExtensionsPanel
(
win
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_open_context_menu_with_keyboard
(
)
{
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
button
=
getUnifiedExtensionsItem
(
win
extension
.
id
)
.
querySelector
(
"
.
unified
-
extensions
-
item
-
open
-
menu
"
)
;
ok
(
button
"
expected
'
open
menu
'
button
"
)
;
button
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
;
const
contextMenu
=
win
.
document
.
getElementById
(
"
unified
-
extensions
-
context
-
menu
"
)
;
ok
(
contextMenu
"
expected
menu
"
)
;
let
shown
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
button
.
focus
(
)
;
is
(
button
win
.
document
.
activeElement
"
expected
button
to
be
focused
"
)
;
EventUtils
.
synthesizeKey
(
"
"
{
}
win
)
;
await
shown
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
shown
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
button
.
focus
(
)
;
is
(
button
win
.
document
.
activeElement
"
expected
button
to
be
focused
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
win
)
;
await
shown
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
await
closeExtensionsPanel
(
win
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_context_menu_without_browserActionFor_global
(
)
{
const
{
ExtensionParent
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
const
{
browserActionFor
}
=
ExtensionParent
.
apiManager
.
global
;
const
cleanup
=
(
)
=
>
{
ExtensionParent
.
apiManager
.
global
.
browserActionFor
=
browserActionFor
;
}
;
registerCleanupFunction
(
cleanup
)
;
delete
ExtensionParent
.
apiManager
.
global
.
browserActionFor
;
const
[
extension
]
=
createExtensions
(
[
{
name
:
"
an
extension
"
}
]
)
;
await
extension
.
startup
(
)
;
await
openExtensionsPanel
(
win
)
;
const
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extension
.
id
)
;
is
(
contextMenu
.
childElementCount
3
"
expected
3
menu
items
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
await
closeExtensionsPanel
(
win
)
;
await
extension
.
unload
(
)
;
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_browser_action_context_menu
(
)
{
const
extWithMenuBrowserAction
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
browser_action
:
{
}
permissions
:
[
"
contextMenus
"
]
}
background
(
)
{
browser
.
contextMenus
.
create
(
{
id
:
"
some
-
menu
-
id
"
title
:
"
Click
me
!
"
contexts
:
[
"
all
"
]
}
(
)
=
>
browser
.
test
.
sendMessage
(
"
ready
"
)
)
;
}
useAddonManager
:
"
temporary
"
}
)
;
const
extWithSubMenuBrowserAction
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
browser_action
:
{
}
permissions
:
[
"
contextMenus
"
]
}
background
(
)
{
browser
.
contextMenus
.
create
(
{
id
:
"
some
-
menu
-
id
"
title
:
"
Open
sub
-
menu
"
contexts
:
[
"
all
"
]
}
)
;
browser
.
contextMenus
.
create
(
{
id
:
"
some
-
sub
-
menu
-
id
"
parentId
:
"
some
-
menu
-
id
"
title
:
"
Click
me
!
"
contexts
:
[
"
all
"
]
}
(
)
=
>
browser
.
test
.
sendMessage
(
"
ready
"
)
)
;
}
useAddonManager
:
"
temporary
"
}
)
;
const
extWithMenuPageAction
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
page_action
:
{
}
permissions
:
[
"
contextMenus
"
]
}
background
(
)
{
browser
.
contextMenus
.
create
(
{
id
:
"
some
-
menu
-
id
"
title
:
"
Click
me
!
"
contexts
:
[
"
all
"
]
}
(
)
=
>
browser
.
test
.
sendMessage
(
"
ready
"
)
)
;
}
useAddonManager
:
"
temporary
"
}
)
;
const
extWithoutMenu1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
extension
without
any
menu
"
}
useAddonManager
:
"
temporary
"
}
)
;
const
extWithoutMenu2
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
browser_action
:
{
}
name
:
"
extension
with
a
browser
action
but
no
menu
"
}
useAddonManager
:
"
temporary
"
}
)
;
const
extensions
=
[
extWithMenuBrowserAction
extWithMenuPageAction
extWithSubMenuBrowserAction
extWithoutMenu1
extWithoutMenu2
]
;
await
Promise
.
all
(
extensions
.
map
(
extension
=
>
extension
.
startup
(
)
)
)
;
await
extWithMenuBrowserAction
.
awaitMessage
(
"
ready
"
)
;
await
extWithMenuPageAction
.
awaitMessage
(
"
ready
"
)
;
await
extWithSubMenuBrowserAction
.
awaitMessage
(
"
ready
"
)
;
await
openExtensionsPanel
(
win
)
;
info
(
"
extension
with
browser
action
and
a
menu
"
)
;
let
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extWithMenuBrowserAction
.
id
)
;
is
(
contextMenu
.
childElementCount
5
"
expected
5
menu
items
"
)
;
const
[
item
separator
]
=
contextMenu
.
children
;
is
(
item
.
getAttribute
(
"
label
"
)
"
Click
me
!
"
"
expected
menu
item
as
first
child
"
)
;
is
(
separator
.
tagName
"
menuseparator
"
"
expected
separator
after
last
menu
item
created
by
the
extension
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
info
(
"
extension
with
page
action
and
a
menu
"
)
;
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extWithMenuPageAction
.
id
)
;
is
(
contextMenu
.
childElementCount
3
"
expected
3
menu
items
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
info
(
"
extension
with
no
browser
action
and
no
menu
"
)
;
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extWithoutMenu1
.
id
)
;
is
(
contextMenu
.
childElementCount
3
"
expected
3
menu
items
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
info
(
"
extension
with
browser
action
and
no
menu
"
)
;
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extWithoutMenu2
.
id
)
;
is
(
contextMenu
.
childElementCount
3
"
expected
3
menu
items
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
info
(
"
extension
with
browser
action
and
menu
+
sub
-
menu
"
)
;
contextMenu
=
await
openUnifiedExtensionsContextMenu
(
win
extWithSubMenuBrowserAction
.
id
)
;
is
(
contextMenu
.
childElementCount
5
"
expected
5
menu
items
"
)
;
const
popup
=
await
openSubmenu
(
contextMenu
.
children
[
0
]
)
;
is
(
popup
.
children
.
length
1
"
expected
1
submenu
item
"
)
;
is
(
popup
.
children
[
0
]
.
getAttribute
(
"
label
"
)
"
Click
me
!
"
"
expected
menu
item
"
)
;
is
(
contextMenu
.
childElementCount
5
"
expected
5
menu
items
"
)
;
await
closeChromeContextMenu
(
contextMenu
.
id
null
win
)
;
await
closeExtensionsPanel
(
win
)
;
await
Promise
.
all
(
extensions
.
map
(
extension
=
>
extension
.
unload
(
)
)
)
;
}
)
;
