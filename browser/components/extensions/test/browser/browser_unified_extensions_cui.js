"
use
strict
"
;
loadTestSubscript
(
"
head_unified_extensions
.
js
"
)
;
add_task
(
async
function
test_hide_panel_when_customizing
(
)
{
await
openExtensionsPanel
(
)
;
let
panel
=
gUnifiedExtensions
.
panel
;
Assert
.
equal
(
panel
.
state
"
open
"
)
;
let
panelHidden
=
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
hidden
"
)
;
CustomizableUI
.
dispatchToolboxEvent
(
"
customizationstarting
"
{
}
)
;
await
panelHidden
;
Assert
.
equal
(
panel
.
state
"
closed
"
)
;
CustomizableUI
.
dispatchToolboxEvent
(
"
aftercustomization
"
{
}
)
;
}
)
;
add_task
(
async
function
test_extension_in_collapsed_area
(
)
{
const
extensions
=
createExtensions
(
[
{
name
:
"
extension1
"
browser_action
:
{
default_area
:
"
navbar
"
default_popup
:
"
popup
.
html
"
}
browser_specific_settings
:
{
gecko
:
{
id
:
"
unified
-
extensions
-
cui
ext
-
1
"
}
}
}
{
name
:
"
extension2
"
browser_action
:
{
default_area
:
"
navbar
"
}
browser_specific_settings
:
{
gecko
:
{
id
:
"
unified
-
extensions
-
cui
ext
-
2
"
}
}
}
]
{
files
:
{
"
popup
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
body
>
<
h1
>
test
popup
<
/
h1
>
<
script
src
=
"
popup
.
js
"
>
<
/
script
>
<
body
>
<
/
html
>
"
popup
.
js
"
:
function
(
)
{
browser
.
test
.
sendMessage
(
"
test
-
popup
-
opened
"
)
;
}
}
}
)
;
await
Promise
.
all
(
extensions
.
map
(
extension
=
>
extension
.
startup
(
)
)
)
;
await
openExtensionsPanel
(
)
;
for
(
const
extension
of
extensions
)
{
let
item
=
getUnifiedExtensionsItem
(
extension
.
id
)
;
Assert
.
ok
(
!
item
extension
with
ID
=
{
extension
.
id
}
should
not
appear
in
the
panel
)
;
}
await
closeExtensionsPanel
(
)
;
const
bookmarksToolbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_BOOKMARKS
)
;
const
firstExtensionWidgetID
=
AppUiTestInternals
.
getBrowserActionWidgetId
(
extensions
[
0
]
.
id
)
;
CustomizableUI
.
addWidgetToArea
(
firstExtensionWidgetID
CustomizableUI
.
AREA_BOOKMARKS
)
;
await
promiseSetToolbarVisibility
(
bookmarksToolbar
false
)
;
await
openExtensionsPanel
(
)
;
let
item
=
getUnifiedExtensionsItem
(
extensions
[
0
]
.
id
)
;
Assert
.
ok
(
item
"
extension
placed
in
the
collapsed
toolbar
should
appear
in
the
panel
"
)
;
let
widget
=
getBrowserActionWidget
(
extensions
[
0
]
)
.
forWindow
(
window
)
;
ok
(
widget
"
Got
a
widget
for
the
extension
button
overflowed
into
the
panel
"
)
;
widget
.
node
.
querySelector
(
"
.
unified
-
extensions
-
item
-
action
-
button
"
)
.
click
(
)
;
const
promisePanelBrowser
=
AppUiTestDelegate
.
awaitExtensionPanel
(
window
extensions
[
0
]
.
id
true
)
;
await
extensions
[
0
]
.
awaitMessage
(
"
test
-
popup
-
opened
"
)
;
const
extPanelBrowser
=
await
promisePanelBrowser
;
ok
(
extPanelBrowser
"
Got
a
action
panel
browser
"
)
;
closeBrowserAction
(
extensions
[
0
]
)
;
await
promiseSetToolbarVisibility
(
bookmarksToolbar
true
)
;
await
openExtensionsPanel
(
)
;
for
(
const
extension
of
extensions
)
{
let
item
=
getUnifiedExtensionsItem
(
extension
.
id
)
;
Assert
.
ok
(
!
item
extension
with
ID
=
{
extension
.
id
}
should
not
appear
in
the
panel
)
;
}
await
closeExtensionsPanel
(
)
;
await
promiseSetToolbarVisibility
(
bookmarksToolbar
false
)
;
await
openExtensionsPanel
(
)
;
item
=
getUnifiedExtensionsItem
(
extensions
[
0
]
.
id
)
;
Assert
.
ok
(
item
"
extension
should
reappear
in
the
panel
"
)
;
await
closeExtensionsPanel
(
)
;
for
(
const
widgetId
of
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_BOOKMARKS
)
.
filter
(
widgetId
=
>
widgetId
!
=
=
firstExtensionWidgetID
)
)
{
CustomizableUI
.
removeWidgetFromArea
(
widgetId
)
;
}
await
promiseSetToolbarVisibility
(
bookmarksToolbar
true
)
;
await
openExtensionsPanel
(
)
;
for
(
const
extension
of
extensions
)
{
let
item
=
getUnifiedExtensionsItem
(
extension
.
id
)
;
Assert
.
ok
(
!
item
extension
with
ID
=
{
extension
.
id
}
should
not
appear
in
the
panel
)
;
}
await
closeExtensionsPanel
(
)
;
await
Promise
.
all
(
extensions
.
map
(
extension
=
>
extension
.
unload
(
)
)
)
;
await
CustomizableUI
.
reset
(
)
;
}
)
;
