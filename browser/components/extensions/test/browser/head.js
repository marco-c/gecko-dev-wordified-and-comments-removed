"
use
strict
"
;
var
{
CustomizableUI
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
function
makeWidgetId
(
id
)
{
id
=
id
.
toLowerCase
(
)
;
return
id
.
replace
(
/
[
^
a
-
z0
-
9_
-
]
/
g
"
_
"
)
;
}
var
focusWindow
=
Task
.
async
(
function
*
focusWindow
(
win
)
{
let
fm
=
Cc
[
"
mozilla
.
org
/
focus
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIFocusManager
)
;
if
(
fm
.
activeWindow
=
=
win
)
{
return
;
}
let
promise
=
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
focus
"
function
listener
(
)
{
win
.
removeEventListener
(
"
focus
"
listener
true
)
;
resolve
(
)
;
}
true
)
;
}
)
;
win
.
focus
(
)
;
yield
promise
;
}
)
;
function
clickBrowserAction
(
extension
win
=
window
)
{
let
browserActionId
=
makeWidgetId
(
extension
.
id
)
+
"
-
browser
-
action
"
;
let
elem
=
win
.
document
.
getElementById
(
browserActionId
)
;
EventUtils
.
synthesizeMouseAtCenter
(
elem
{
}
win
)
;
return
new
Promise
(
SimpleTest
.
executeSoon
)
;
}
function
clickPageAction
(
extension
win
=
window
)
{
SetPageProxyState
(
"
valid
"
)
;
let
pageActionId
=
makeWidgetId
(
extension
.
id
)
+
"
-
page
-
action
"
;
let
elem
=
win
.
document
.
getElementById
(
pageActionId
)
;
EventUtils
.
synthesizeMouseAtCenter
(
elem
{
}
win
)
;
return
new
Promise
(
SimpleTest
.
executeSoon
)
;
}
