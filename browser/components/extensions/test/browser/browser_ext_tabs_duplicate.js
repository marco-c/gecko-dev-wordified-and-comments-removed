"
use
strict
"
;
add_task
(
function
*
testDuplicateTab
(
)
{
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
net
/
"
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
permissions
"
:
[
"
tabs
"
]
}
background
:
function
(
)
{
browser
.
tabs
.
query
(
{
lastFocusedWindow
:
true
}
function
(
tabs
)
{
let
source
=
tabs
[
1
]
;
browser
.
tabs
.
move
(
source
.
id
{
index
:
0
}
(
)
=
>
{
browser
.
tabs
.
duplicate
(
source
.
id
(
tab
)
=
>
{
browser
.
test
.
assertEq
(
"
http
:
/
/
example
.
net
/
"
tab
.
url
)
;
browser
.
test
.
assertEq
(
1
tab
.
index
)
;
browser
.
test
.
assertTrue
(
tab
.
selected
)
;
browser
.
test
.
notifyPass
(
"
tabs
.
duplicate
"
)
;
}
)
;
}
)
;
}
)
;
}
}
)
;
yield
extension
.
startup
(
)
;
yield
extension
.
awaitFinish
(
"
tabs
.
duplicate
"
)
;
yield
extension
.
unload
(
)
;
while
(
gBrowser
.
tabs
[
0
]
.
linkedBrowser
.
currentURI
.
spec
=
=
=
"
http
:
/
/
example
.
net
/
"
)
{
yield
BrowserTestUtils
.
removeTab
(
gBrowser
.
tabs
[
0
]
)
;
}
}
)
;
add_task
(
function
*
testDuplicatePinnedTab
(
)
{
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
net
/
"
)
;
gBrowser
.
pinTab
(
tab
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
permissions
"
:
[
"
tabs
"
]
}
background
:
function
(
)
{
browser
.
tabs
.
query
(
{
lastFocusedWindow
:
true
}
function
(
tabs
)
{
browser
.
tabs
.
duplicate
(
tabs
[
0
]
.
id
(
tab
)
=
>
{
browser
.
test
.
assertEq
(
"
http
:
/
/
example
.
net
/
"
tab
.
url
)
;
browser
.
test
.
assertEq
(
1
tab
.
index
)
;
browser
.
test
.
assertTrue
(
tab
.
pinned
)
;
browser
.
test
.
notifyPass
(
"
tabs
.
duplicate
.
pinned
"
)
;
}
)
;
}
)
;
}
}
)
;
yield
extension
.
startup
(
)
;
yield
extension
.
awaitFinish
(
"
tabs
.
duplicate
.
pinned
"
)
;
yield
extension
.
unload
(
)
;
while
(
gBrowser
.
tabs
[
0
]
.
linkedBrowser
.
currentURI
.
spec
=
=
=
"
http
:
/
/
example
.
net
/
"
)
{
yield
BrowserTestUtils
.
removeTab
(
gBrowser
.
tabs
[
0
]
)
;
}
}
)
;
