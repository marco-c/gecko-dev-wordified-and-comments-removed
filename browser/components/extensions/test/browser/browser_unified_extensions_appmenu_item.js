"
use
strict
"
;
loadTestSubscript
(
"
head_unified_extensions
.
js
"
)
;
const
{
CustomizableUITestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
sys
.
mjs
"
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
function
menuItemThatOpensAboutAddons
(
)
{
return
PanelUI
.
panel
.
querySelector
(
"
#
appMenu
-
extensions
-
themes
-
button
"
)
;
}
function
menuItemThatOpensExtensionsPanel
(
)
{
return
PanelUI
.
panel
.
querySelector
(
"
#
appMenu
-
unified
-
extensions
-
button
"
)
;
}
add_task
(
async
function
test_appmenu_when_button_is_always_shown
(
)
{
await
gCUITestUtils
.
openMainMenu
(
)
;
ok
(
BrowserTestUtils
.
isVisible
(
menuItemThatOpensAboutAddons
(
)
)
"
'
Extensions
and
themes
'
menu
item
is
visible
by
default
"
)
;
ok
(
BrowserTestUtils
.
isHidden
(
menuItemThatOpensExtensionsPanel
(
)
)
"
'
Extensions
'
menu
item
is
hidden
by
default
"
)
;
await
gCUITestUtils
.
hideMainMenu
(
)
;
}
)
;
add_task
(
async
function
test_appmenu_when_button_is_hidden
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
unifiedExtensions
.
button
.
always_visible
"
false
]
]
}
)
;
await
gCUITestUtils
.
openMainMenu
(
)
;
ok
(
BrowserTestUtils
.
isHidden
(
menuItemThatOpensAboutAddons
(
)
)
"
'
Extensions
and
themes
'
menu
item
is
hidden
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
menuItemThatOpensExtensionsPanel
(
)
)
"
'
Extensions
'
menu
item
is
shown
"
)
;
await
gCUITestUtils
.
hideMainMenu
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_appmenu_extensions_opens_panel
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
unifiedExtensions
.
button
.
always_visible
"
false
]
]
}
)
;
await
gCUITestUtils
.
openMainMenu
(
)
;
assertExtensionsButtonHidden
(
)
;
menuItemThatOpensExtensionsPanel
(
)
.
click
(
)
;
is
(
PanelUI
.
panel
.
state
"
closed
"
"
Menu
closed
after
clicking
Extensions
"
)
;
const
listView
=
getListView
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
listView
"
ViewShown
"
)
;
ok
(
PanelView
.
forNode
(
listView
)
.
active
"
Extensions
panel
is
shown
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
listView
.
querySelector
(
"
#
unified
-
extensions
-
manage
-
extensions
"
)
)
"
'
Manage
Extensions
'
option
is
visible
"
)
;
ok
(
gUnifiedExtensions
.
hasExtensionsInPanel
(
)
"
Sanity
check
:
has
extensions
"
)
;
assertExtensionsButtonVisible
(
)
;
await
closeExtensionsPanel
(
)
;
assertExtensionsButtonHidden
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_appmenu_extensions_opens_when_no_extensions
(
)
{
const
origGetActivePolicies
=
gUnifiedExtensions
.
getActivePolicies
;
gUnifiedExtensions
.
getActivePolicies
=
(
)
=
>
[
]
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
unifiedExtensions
.
button
.
always_visible
"
false
]
]
}
)
;
await
gCUITestUtils
.
openMainMenu
(
)
;
const
listener
=
(
)
=
>
{
ok
(
false
"
Extensions
Panel
should
not
be
shown
"
)
;
}
;
gUnifiedExtensions
.
panel
.
addEventListener
(
"
popupshowing
"
listener
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
robots
"
}
async
(
)
=
>
{
let
tabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
addons
"
)
;
assertExtensionsButtonHidden
(
)
;
menuItemThatOpensExtensionsPanel
(
)
.
click
(
)
;
assertExtensionsButtonHidden
(
)
;
info
(
"
Verifying
that
about
:
addons
is
opened
"
)
;
BrowserTestUtils
.
removeTab
(
await
tabPromise
)
;
}
)
;
assertExtensionsButtonHidden
(
)
;
gUnifiedExtensions
.
panel
.
removeEventListener
(
"
popupshowing
"
listener
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
gUnifiedExtensions
.
getActivePolicies
=
origGetActivePolicies
;
}
)
;
