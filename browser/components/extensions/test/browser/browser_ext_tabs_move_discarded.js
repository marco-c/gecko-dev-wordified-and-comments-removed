"
use
strict
"
;
add_task
(
async
function
move_discarded_to_window
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
tabs
"
]
}
background
:
async
function
(
)
{
let
url
=
"
https
:
/
/
example
.
com
/
"
;
let
tab
=
await
browser
.
tabs
.
create
(
{
url
discarded
:
true
}
)
;
browser
.
test
.
assertEq
(
true
tab
.
discarded
"
Tab
should
be
discarded
"
)
;
browser
.
test
.
assertEq
(
url
tab
.
url
"
Tab
URL
should
be
correct
"
)
;
let
{
id
:
windowId
}
=
await
browser
.
windows
.
create
(
)
;
[
tab
]
=
await
browser
.
tabs
.
move
(
tab
.
id
{
windowId
index
:
-
1
}
)
;
browser
.
test
.
assertTrue
(
tab
.
discarded
"
Tab
should
still
be
discarded
"
)
;
browser
.
test
.
assertEq
(
url
tab
.
url
"
Tab
URL
should
still
be
correct
"
)
;
await
browser
.
windows
.
remove
(
windowId
)
;
browser
.
test
.
notifyPass
(
"
tabs
.
move
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitFinish
(
"
tabs
.
move
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
move_hidden_discarded_to_window
(
)
{
let
extensionWithoutTabsPermission
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
https
:
/
/
example
.
com
/
"
]
}
background
(
)
{
browser
.
tabs
.
onUpdated
.
addListener
(
(
tabId
changeInfo
tab
)
=
>
{
if
(
changeInfo
.
hidden
)
{
browser
.
test
.
assertEq
(
tab
.
url
"
https
:
/
/
example
.
com
/
?
hideme
"
"
tab
.
url
is
correctly
observed
without
tabs
permission
"
)
;
browser
.
test
.
sendMessage
(
"
onUpdated_checked
"
)
;
}
}
)
;
browser
.
tabs
.
onUpdated
.
addListener
(
(
tabId
changeInfo
)
=
>
{
browser
.
test
.
assertTrue
(
changeInfo
.
hidden
"
tab
was
hidden
"
)
;
browser
.
test
.
sendMessage
(
"
onUpdated_urls_filter
"
)
;
}
{
properties
:
[
"
hidden
"
]
urls
:
[
"
https
:
/
/
example
.
com
/
?
hideme
"
]
}
)
;
}
}
)
;
await
extensionWithoutTabsPermission
.
startup
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
tabs
"
"
tabHide
"
]
}
useAddonManager
:
"
temporary
"
async
background
(
)
{
let
url
=
"
https
:
/
/
example
.
com
/
?
hideme
"
;
let
tab
=
await
browser
.
tabs
.
create
(
{
url
discarded
:
true
}
)
;
await
browser
.
tabs
.
hide
(
tab
.
id
)
;
let
{
id
:
windowId
}
=
await
browser
.
windows
.
create
(
)
;
[
tab
]
=
await
browser
.
tabs
.
move
(
tab
.
id
{
windowId
index
:
-
1
}
)
;
browser
.
test
.
assertTrue
(
tab
.
discarded
"
Tab
should
still
be
discarded
"
)
;
browser
.
test
.
assertTrue
(
tab
.
hidden
"
Tab
should
still
be
hidden
"
)
;
browser
.
test
.
assertEq
(
url
tab
.
url
"
Tab
URL
should
still
be
correct
"
)
;
await
browser
.
windows
.
remove
(
windowId
)
;
browser
.
test
.
notifyPass
(
"
move_hidden_discarded_to_window
"
)
;
}
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitFinish
(
"
move_hidden_discarded_to_window
"
)
;
await
extension
.
unload
(
)
;
await
extensionWithoutTabsPermission
.
awaitMessage
(
"
onUpdated_checked
"
)
;
await
extensionWithoutTabsPermission
.
awaitMessage
(
"
onUpdated_urls_filter
"
)
;
await
extensionWithoutTabsPermission
.
unload
(
)
;
}
)
;
