"
use
strict
"
;
function
*
testHasNoPermission
(
params
)
{
let
contentSetup
=
params
.
contentSetup
|
|
(
(
)
=
>
Promise
.
resolve
(
)
)
;
function
background
(
contentSetup
)
{
browser
.
runtime
.
onMessage
.
addListener
(
(
msg
sender
)
=
>
{
browser
.
test
.
assertEq
(
msg
"
second
script
ran
"
"
second
script
ran
"
)
;
browser
.
test
.
notifyPass
(
"
executeScript
"
)
;
}
)
;
browser
.
test
.
onMessage
.
addListener
(
msg
=
>
{
browser
.
test
.
assertEq
(
msg
"
execute
-
script
"
)
;
browser
.
tabs
.
query
(
{
currentWindow
:
true
}
tabs
=
>
{
browser
.
tabs
.
executeScript
(
{
file
:
"
script
.
js
"
}
)
;
browser
.
tabs
.
executeScript
(
tabs
[
1
]
.
id
{
file
:
"
second
-
script
.
js
"
}
)
;
}
)
;
}
)
;
contentSetup
(
)
.
then
(
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
)
;
}
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
params
.
manifest
background
:
(
{
background
}
)
(
{
contentSetup
}
)
files
:
{
"
script
.
js
"
:
function
(
)
{
browser
.
runtime
.
sendMessage
(
"
first
script
ran
"
)
;
}
"
second
-
script
.
js
"
:
function
(
)
{
browser
.
runtime
.
sendMessage
(
"
second
script
ran
"
)
;
}
}
}
)
;
yield
extension
.
startup
(
)
;
yield
extension
.
awaitMessage
(
"
ready
"
)
;
if
(
params
.
setup
)
{
yield
params
.
setup
(
extension
)
;
}
extension
.
sendMessage
(
"
execute
-
script
"
)
;
yield
extension
.
awaitFinish
(
"
executeScript
"
)
;
yield
extension
.
unload
(
)
;
}
add_task
(
function
*
testBadPermissions
(
)
{
let
tab1
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
)
;
let
tab2
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
info
(
"
Test
no
special
permissions
"
)
;
yield
testHasNoPermission
(
{
manifest
:
{
"
permissions
"
:
[
"
http
:
/
/
example
.
com
/
"
]
}
}
)
;
info
(
"
Test
tabs
permissions
"
)
;
yield
testHasNoPermission
(
{
manifest
:
{
"
permissions
"
:
[
"
http
:
/
/
example
.
com
/
"
"
tabs
"
]
}
}
)
;
info
(
"
Test
active
tab
browser
action
no
click
"
)
;
yield
testHasNoPermission
(
{
manifest
:
{
"
permissions
"
:
[
"
http
:
/
/
example
.
com
/
"
"
activeTab
"
]
"
browser_action
"
:
{
}
}
}
)
;
info
(
"
Test
active
tab
page
action
no
click
"
)
;
yield
testHasNoPermission
(
{
manifest
:
{
"
permissions
"
:
[
"
http
:
/
/
example
.
com
/
"
"
activeTab
"
]
"
page_action
"
:
{
}
}
contentSetup
(
)
{
return
new
Promise
(
resolve
=
>
{
browser
.
tabs
.
query
(
{
active
:
true
currentWindow
:
true
}
tabs
=
>
{
browser
.
pageAction
.
show
(
tabs
[
0
]
.
id
)
;
resolve
(
)
;
}
)
;
}
)
;
}
}
)
;
yield
BrowserTestUtils
.
removeTab
(
tab2
)
;
yield
BrowserTestUtils
.
removeTab
(
tab1
)
;
}
)
;
