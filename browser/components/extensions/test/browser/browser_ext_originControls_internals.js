"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
add_task
(
async
function
getState_for_partially_initialized_extension
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
/
"
)
;
const
id
=
"
dummy
middle
"
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
}
}
permissions
:
[
"
*
:
/
/
*
/
*
"
]
}
}
)
;
await
extension
.
startup
(
)
;
let
policy
=
WebExtensionPolicy
.
getByID
(
id
)
;
let
tabManager
=
policy
.
extension
.
tabManager
;
policy
.
extension
.
tabManager
=
undefined
;
Assert
.
deepEqual
(
OriginControls
.
getState
(
policy
tab
)
{
noAccess
:
true
}
"
getState
should
return
noAccess
for
a
(
simulated
)
uninitialized
extension
"
)
;
policy
.
extension
.
tabManager
=
tabManager
;
Assert
.
deepEqual
(
OriginControls
.
getState
(
policy
tab
)
{
allDomains
:
true
hasAccess
:
true
}
"
getState
should
return
allDomains
+
hasAccess
for
extension
with
*
:
/
/
*
/
*
"
)
;
await
extension
.
unload
(
)
;
Assert
.
deepEqual
(
OriginControls
.
getState
(
policy
tab
)
{
allDomains
:
true
hasAccess
:
true
}
"
getState
should
not
throw
upon
encountering
an
unloaded
extension
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
