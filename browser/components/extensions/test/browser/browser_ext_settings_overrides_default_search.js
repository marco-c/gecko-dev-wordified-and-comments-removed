"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
const
EXTENSION1_ID
=
"
extension1
mozilla
.
com
"
;
const
EXTENSION2_ID
=
"
extension2
mozilla
.
com
"
;
var
defaultEngineName
;
async
function
restoreDefaultEngine
(
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
defaultEngineName
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
}
add_task
(
async
function
setup
(
)
{
defaultEngineName
=
(
await
Services
.
search
.
getDefault
(
)
)
.
name
;
registerCleanupFunction
(
restoreDefaultEngine
)
;
}
)
;
add_task
(
async
function
test_extension_setting_default_engine
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext1
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
Default
engine
is
{
defaultEngineName
}
)
;
}
)
;
add_task
(
async
function
test_extension_setting_default_engine_external
(
)
{
const
NAME
=
"
Example
Engine
"
;
async
function
startExtension
(
win
=
window
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
NAME
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
let
[
panel
]
=
await
Promise
.
all
(
[
promisePopupNotificationShown
(
"
addon
-
webext
-
defaultsearch
"
win
)
extension
.
startup
(
)
]
)
;
isnot
(
panel
null
"
Doorhanger
was
displayed
for
non
-
built
-
in
default
engine
"
)
;
return
{
panel
extension
}
;
}
let
{
panel
extension
}
=
await
startExtension
(
)
;
panel
.
secondaryButton
.
click
(
)
;
await
Promise
.
resolve
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
"
Default
engine
was
not
changed
after
rejecting
prompt
"
)
;
await
extension
.
unload
(
)
;
(
{
panel
extension
}
=
await
startExtension
(
)
)
;
panel
.
button
.
click
(
)
;
await
Promise
.
resolve
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
NAME
"
Default
engine
was
changed
after
accepting
prompt
"
)
;
await
extension
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
"
Default
engine
is
reverted
after
uninstalling
extension
.
"
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
about
:
blank
"
)
;
(
{
extension
}
=
await
startExtension
(
win
)
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
"
Default
engine
is
unchanged
when
prompt
is
dismissed
"
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_extension_setting_multiple_default_engine
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
let
ext2
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
Twitter
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext2
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
await
ext2
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext1
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
Default
engine
is
{
defaultEngineName
}
)
;
}
)
;
add_task
(
async
function
test_extension_setting_multiple_default_engine_reversed
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
let
ext2
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
Twitter
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext2
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
await
ext1
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
await
ext2
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
Default
engine
is
{
defaultEngineName
}
)
;
}
)
;
add_task
(
async
function
test_user_changing_default_engine
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Twitter
"
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
await
ext1
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
restoreDefaultEngine
(
)
;
}
)
;
add_task
(
async
function
test_user_change_with_disabling
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
EXTENSION1_ID
}
}
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Twitter
"
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
let
disabledPromise
=
awaitEvent
(
"
shutdown
"
EXTENSION1_ID
)
;
let
addon
=
await
AddonManager
.
getAddonByID
(
EXTENSION1_ID
)
;
await
addon
.
disable
(
)
;
await
disabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
let
enabledPromise
=
awaitEvent
(
"
ready
"
EXTENSION1_ID
)
;
await
addon
.
enable
(
)
;
await
enabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
await
ext1
.
unload
(
)
;
await
restoreDefaultEngine
(
)
;
}
)
;
add_task
(
async
function
test_two_addons_with_first_disabled_before_second
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
EXTENSION1_ID
}
}
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
let
ext2
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
EXTENSION2_ID
}
}
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
Twitter
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
let
disabledPromise
=
awaitEvent
(
"
shutdown
"
EXTENSION1_ID
)
;
let
addon1
=
await
AddonManager
.
getAddonByID
(
EXTENSION1_ID
)
;
await
addon1
.
disable
(
)
;
await
disabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
Default
engine
is
{
defaultEngineName
}
)
;
await
ext2
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
let
enabledPromise
=
awaitEvent
(
"
ready
"
EXTENSION1_ID
)
;
await
addon1
.
enable
(
)
;
await
enabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
await
ext2
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext1
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
Default
engine
is
{
defaultEngineName
}
)
;
}
)
;
add_task
(
async
function
test_two_addons_with_first_disabled
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
EXTENSION1_ID
}
}
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
let
ext2
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
EXTENSION2_ID
}
}
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
Twitter
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext2
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
let
disabledPromise
=
awaitEvent
(
"
shutdown
"
EXTENSION1_ID
)
;
let
addon1
=
await
AddonManager
.
getAddonByID
(
EXTENSION1_ID
)
;
await
addon1
.
disable
(
)
;
await
disabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
let
enabledPromise
=
awaitEvent
(
"
ready
"
EXTENSION1_ID
)
;
await
addon1
.
enable
(
)
;
await
enabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
await
ext2
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext1
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
Default
engine
is
{
defaultEngineName
}
)
;
}
)
;
add_task
(
async
function
test_two_addons_with_second_disabled
(
)
{
let
ext1
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
EXTENSION1_ID
}
}
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
DuckDuckGo
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
let
ext2
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
applications
:
{
gecko
:
{
id
:
EXTENSION2_ID
}
}
"
chrome_settings_overrides
"
:
{
"
search_provider
"
:
{
"
name
"
:
"
Twitter
"
"
search_url
"
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
"
is_default
"
:
true
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
ext1
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext2
.
startup
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
let
disabledPromise
=
awaitEvent
(
"
shutdown
"
EXTENSION2_ID
)
;
let
addon2
=
await
AddonManager
.
getAddonByID
(
EXTENSION2_ID
)
;
await
addon2
.
disable
(
)
;
await
disabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
let
enabledPromise
=
awaitEvent
(
"
ready
"
EXTENSION2_ID
)
;
await
addon2
.
enable
(
)
;
await
enabledPromise
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Twitter
"
"
Default
engine
is
Twitter
"
)
;
await
ext2
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
DuckDuckGo
"
"
Default
engine
is
DuckDuckGo
"
)
;
await
ext1
.
unload
(
)
;
is
(
(
await
Services
.
search
.
getDefault
(
)
)
.
name
defaultEngineName
Default
engine
is
{
defaultEngineName
}
)
;
}
)
;
