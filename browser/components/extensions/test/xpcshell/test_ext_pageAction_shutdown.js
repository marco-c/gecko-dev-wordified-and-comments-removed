"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
PageActions
"
"
resource
:
/
/
/
modules
/
PageActions
.
jsm
"
)
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
const
{
createAppInfo
promiseShutdownManager
promiseStartupManager
}
=
AddonTestUtils
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
58
"
)
;
function
makeWidgetId
(
id
)
{
id
=
id
.
toLowerCase
(
)
;
return
id
.
replace
(
/
[
^
a
-
z0
-
9_
-
]
/
g
"
_
"
)
;
}
add_task
(
async
function
testAppShutdown
(
)
{
let
extensionData
=
{
useAddonManager
:
"
permanent
"
manifest
:
{
page_action
:
{
default_title
:
"
test_ext_pageAction_shutdown
.
js
"
browser_style
:
false
}
}
}
;
PageActions
.
init
(
)
;
await
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
extensionData
)
;
await
extension
.
startup
(
)
;
let
actionID
=
makeWidgetId
(
extension
.
id
)
;
let
action
=
PageActions
.
actionForID
(
actionID
)
;
Assert
.
equal
(
action
.
pinnedToUrlbar
true
)
;
await
promiseShutdownManager
(
)
;
PageActions
.
_reset
(
)
;
await
promiseStartupManager
(
)
;
await
extension
.
awaitStartup
(
)
;
action
=
PageActions
.
actionForID
(
actionID
)
;
Assert
.
equal
(
action
.
pinnedToUrlbar
true
)
;
action
.
pinnedToUrlbar
=
false
;
await
promiseShutdownManager
(
)
;
PageActions
.
_reset
(
)
;
await
promiseStartupManager
(
)
;
await
extension
.
awaitStartup
(
)
;
action
=
PageActions
.
actionForID
(
actionID
)
;
Assert
.
equal
(
action
.
pinnedToUrlbar
true
)
;
await
extension
.
unload
(
)
;
await
promiseShutdownManager
(
)
;
}
)
;
