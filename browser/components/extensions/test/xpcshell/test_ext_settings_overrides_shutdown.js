"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionParent
"
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
settings
.
default_bucket
"
)
;
add_task
(
async
function
shutdown_during_search_provider_startup
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
permanent
"
manifest
:
{
chrome_settings_overrides
:
{
search_provider
:
{
is_default
:
true
name
:
"
dummy
name
"
search_url
:
"
https
:
/
/
example
.
com
/
"
}
}
}
}
)
;
info
(
"
Starting
up
search
extension
"
)
;
await
extension
.
startup
(
)
;
let
extStartPromise
=
AddonTestUtils
.
waitForSearchProviderStartup
(
extension
{
expectPending
:
true
}
)
;
let
initialized
=
false
;
ExtensionParent
.
apiManager
.
global
.
searchInitialized
.
then
(
(
)
=
>
{
initialized
=
true
;
}
)
;
await
extension
.
addon
.
disable
(
)
;
info
(
"
Extension
managed
to
shut
down
despite
the
uninitialized
search
"
)
;
Assert
.
ok
(
!
initialized
"
Search
service
should
not
have
been
initialized
"
)
;
extension
.
addon
.
enable
(
)
;
await
extension
.
awaitStartup
(
)
;
let
uninstallingPromise
=
new
Promise
(
resolve
=
>
{
let
Management
=
ExtensionParent
.
apiManager
;
Management
.
on
(
"
uninstall
"
function
listener
(
eventName
{
id
}
)
{
Management
.
off
(
"
uninstall
"
listener
)
;
Assert
.
equal
(
id
extension
.
id
"
Expected
extension
"
)
;
resolve
(
)
;
}
)
;
}
)
;
let
extRestartPromise
=
AddonTestUtils
.
waitForSearchProviderStartup
(
extension
{
expectPending
:
true
}
)
;
let
uninstalledPromise
=
extension
.
addon
.
uninstall
(
)
;
let
uninstalled
=
false
;
uninstalledPromise
.
then
(
(
)
=
>
{
uninstalled
=
true
;
}
)
;
await
uninstallingPromise
;
Assert
.
ok
(
!
uninstalled
"
Uninstall
should
not
be
finished
yet
"
)
;
Assert
.
ok
(
!
initialized
"
Search
service
should
still
be
uninitialized
"
)
;
await
Services
.
search
.
init
(
)
;
Assert
.
ok
(
initialized
"
Search
service
should
be
initialized
"
)
;
await
extStartPromise
;
await
extRestartPromise
;
await
uninstalledPromise
;
await
AddonTestUtils
.
promiseShutdownManager
(
)
;
}
)
;
