"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProviderExtension
:
"
resource
:
/
/
/
modules
/
UrlbarProviderExtension
.
jsm
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
UrlbarQueryContext
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
42
"
)
;
const
ORIGINAL_NOTIFICATION_TIMEOUT
=
UrlbarProviderExtension
.
notificationTimeout
;
add_task
(
async
function
startup
(
)
{
Services
.
prefs
.
setCharPref
(
"
browser
.
search
.
region
"
"
US
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
geoSpecificDefaults
"
false
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
search
.
addonLoadTimeout
"
0
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
engine
=
await
Services
.
search
.
addEngineWithDetails
(
"
Test
engine
"
{
template
:
"
http
:
/
/
example
.
com
/
?
s
=
%
S
"
alias
:
"
testengine
"
}
)
;
Services
.
search
.
defaultEngine
=
engine
;
UrlbarProviderExtension
.
notificationTimeout
=
5000
;
}
)
;
add_task
(
async
function
test_urlbar_without_urlbar_permission
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
isPrivileged
:
true
background
(
)
{
browser
.
test
.
assertEq
(
browser
.
urlbar
undefined
"
'
urlbar
'
permission
is
required
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_urlbar_no_privilege
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
background
(
)
{
browser
.
test
.
assertEq
(
browser
.
urlbar
undefined
"
'
urlbar
'
permission
is
privileged
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_registerProvider
(
)
{
let
providers
=
UrlbarProvidersManager
.
providers
.
slice
(
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
for
(
let
state
of
[
"
active
"
"
inactive
"
"
restricting
"
]
)
{
let
name
=
Test
-
{
state
}
;
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
browser
.
test
.
assertFalse
(
query
.
isPrivate
"
Context
is
non
private
"
)
;
browser
.
test
.
assertEq
(
query
.
maxResults
10
"
Check
maxResults
"
)
;
browser
.
test
.
assertTrue
(
query
.
searchString
"
SearchString
is
non
empty
"
)
;
browser
.
test
.
assertTrue
(
Array
.
isArray
(
query
.
acceptableSources
)
"
acceptableSources
is
an
array
"
)
;
return
state
;
}
name
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
[
]
name
)
;
}
}
}
)
;
await
ext
.
startup
(
)
;
Assert
.
greater
(
UrlbarProvidersManager
.
providers
.
length
providers
.
length
"
Providers
have
been
added
"
)
;
let
queryContext
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
*
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
queryContext
)
;
for
(
let
provider
of
UrlbarProvidersManager
.
providers
)
{
if
(
!
provider
.
name
.
startsWith
(
"
Test
"
)
)
{
continue
;
}
let
[
state
]
=
provider
.
name
.
split
(
"
-
"
)
;
let
isActive
=
state
!
=
"
inactive
"
;
let
restricting
=
state
=
=
"
restricting
"
;
Assert
.
equal
(
isActive
provider
.
isActive
(
queryContext
)
"
Check
active
callback
"
)
;
Assert
.
equal
(
restricting
provider
.
isRestricting
(
queryContext
)
"
Check
restrict
callback
"
)
;
}
await
ext
.
unload
(
)
;
Assert
.
deepEqual
(
UrlbarProvidersManager
.
providers
providers
"
Should
return
to
the
default
providers
"
)
;
}
)
;
add_task
(
async
function
test_onProviderResultsRequested
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
active
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
browser
.
test
.
assertFalse
(
query
.
isPrivate
)
;
browser
.
test
.
assertEq
(
query
.
maxResults
10
)
;
browser
.
test
.
assertEq
(
query
.
searchString
"
test
"
)
;
browser
.
test
.
assertTrue
(
Array
.
isArray
(
query
.
acceptableSources
)
)
;
return
[
{
type
:
"
remote_tab
"
source
:
"
tabs
"
payload
:
{
title
:
"
Test
remote_tab
-
tabs
result
"
url
:
"
http
:
/
/
example
.
com
/
remote_tab
-
tabs
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
suggestion
:
"
Test
search
-
search
result
"
engine
:
"
Test
engine
"
}
}
{
type
:
"
tab
"
source
:
"
tabs
"
payload
:
{
title
:
"
Test
tab
-
tabs
result
"
url
:
"
http
:
/
/
example
.
com
/
tab
-
tabs
"
}
}
{
type
:
"
tip
"
source
:
"
local
"
payload
:
{
text
:
"
Test
tip
-
local
result
text
"
buttonText
:
"
Test
tip
-
local
result
button
text
"
buttonUrl
:
"
http
:
/
/
example
.
com
/
tip
-
button
"
helpUrl
:
"
http
:
/
/
example
.
com
/
tip
-
help
"
}
}
{
type
:
"
url
"
source
:
"
history
"
payload
:
{
title
:
"
Test
url
-
history
result
"
url
:
"
http
:
/
/
example
.
com
/
url
-
history
"
}
}
]
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
Assert
.
ok
(
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
let
expectedResults
=
[
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
title
:
"
test
"
heuristic
:
true
payload
:
{
query
:
"
test
"
engine
:
"
Test
engine
"
suggestion
:
undefined
keyword
:
undefined
icon
:
"
"
keywordOffer
:
false
}
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
title
:
"
Test
search
-
search
result
"
heuristic
:
false
payload
:
{
engine
:
"
Test
engine
"
suggestion
:
"
Test
search
-
search
result
"
}
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
title
:
"
Test
remote_tab
-
tabs
result
"
heuristic
:
false
payload
:
{
title
:
"
Test
remote_tab
-
tabs
result
"
url
:
"
http
:
/
/
example
.
com
/
remote_tab
-
tabs
"
displayUrl
:
"
example
.
com
/
remote_tab
-
tabs
"
}
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
title
:
"
Test
tab
-
tabs
result
"
heuristic
:
false
payload
:
{
title
:
"
Test
tab
-
tabs
result
"
url
:
"
http
:
/
/
example
.
com
/
tab
-
tabs
"
displayUrl
:
"
example
.
com
/
tab
-
tabs
"
}
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
TIP
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
title
:
"
"
heuristic
:
false
payload
:
{
text
:
"
Test
tip
-
local
result
text
"
buttonText
:
"
Test
tip
-
local
result
button
text
"
buttonUrl
:
"
http
:
/
/
example
.
com
/
tip
-
button
"
helpUrl
:
"
http
:
/
/
example
.
com
/
tip
-
help
"
}
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
title
:
"
Test
url
-
history
result
"
heuristic
:
false
payload
:
{
title
:
"
Test
url
-
history
result
"
url
:
"
http
:
/
/
example
.
com
/
url
-
history
"
displayUrl
:
"
example
.
com
/
url
-
history
"
}
}
]
;
Assert
.
ok
(
context
.
results
.
every
(
r
=
>
r
.
suggestedIndex
=
=
-
1
)
)
;
let
actualResults
=
context
.
results
.
map
(
r
=
>
(
{
type
:
r
.
type
source
:
r
.
source
title
:
r
.
title
heuristic
:
r
.
heuristic
payload
:
r
.
payload
}
)
)
;
Assert
.
deepEqual
(
actualResults
expectedResults
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_onProviderResultsRequested_searchEngines
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
restricting
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
return
[
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
engine
:
"
Test
engine
"
suggestion
:
"
engine
specified
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
keyword
:
"
testengine
"
suggestion
:
"
keyword
specified
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
url
:
"
http
:
/
/
example
.
com
/
?
s
"
suggestion
:
"
url
specified
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
engine
:
"
Test
engine
"
keyword
:
"
testengine
"
url
:
"
http
:
/
/
example
.
com
/
?
s
"
suggestion
:
"
engine
keyword
and
url
specified
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
keyword
:
"
testengine
"
url
:
"
http
:
/
/
example
.
com
/
?
s
"
suggestion
:
"
keyword
and
url
specified
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
suggestion
:
"
no
engine
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
engine
:
"
bogus
"
suggestion
:
"
no
matching
engine
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
keyword
:
"
bogus
"
suggestion
:
"
no
matching
keyword
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
url
:
"
http
:
/
/
bogus
-
no
-
search
-
engine
.
com
/
"
suggestion
:
"
no
matching
url
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
url
:
"
bogus
"
suggestion
:
"
invalid
url
"
}
}
{
type
:
"
search
"
source
:
"
search
"
payload
:
{
url
:
"
foo
:
bar
"
suggestion
:
"
url
with
no
hostname
"
}
}
]
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
let
expectedResults
=
[
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engine
:
"
Test
engine
"
title
:
"
engine
specified
"
heuristic
:
false
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engine
:
"
Test
engine
"
title
:
"
keyword
specified
"
heuristic
:
false
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engine
:
"
Test
engine
"
title
:
"
url
specified
"
heuristic
:
false
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engine
:
"
Test
engine
"
title
:
"
engine
keyword
and
url
specified
"
heuristic
:
false
}
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engine
:
"
Test
engine
"
title
:
"
keyword
and
url
specified
"
heuristic
:
false
}
]
;
let
actualResults
=
context
.
results
.
map
(
r
=
>
(
{
type
:
r
.
type
source
:
r
.
source
engine
:
r
.
payload
.
engine
|
|
null
title
:
r
.
title
heuristic
:
r
.
heuristic
}
)
)
;
Assert
.
deepEqual
(
actualResults
expectedResults
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_activeAndInactiveProviders
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
for
(
let
behavior
of
[
"
active
"
"
inactive
"
]
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
behavior
;
}
behavior
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
browser
.
test
.
assertEq
(
behavior
"
active
"
"
onResultsRequested
should
be
fired
only
for
the
active
provider
"
)
;
return
[
{
type
:
"
url
"
source
:
"
history
"
payload
:
{
title
:
Test
result
{
behavior
}
url
:
http
:
/
/
example
.
com
/
{
behavior
}
}
}
]
;
}
behavior
)
;
}
}
}
)
;
await
ext
.
startup
(
)
;
let
active
=
UrlbarProvidersManager
.
getProvider
(
"
active
"
)
;
let
inactive
=
UrlbarProvidersManager
.
getProvider
(
"
inactive
"
)
;
Assert
.
ok
(
active
)
;
Assert
.
ok
(
inactive
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
Assert
.
ok
(
active
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
inactive
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
active
.
isRestricting
(
context
)
)
;
Assert
.
ok
(
!
inactive
.
isRestricting
(
context
)
)
;
Assert
.
equal
(
context
.
results
.
length
2
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
Assert
.
equal
(
context
.
results
[
1
]
.
title
"
Test
result
active
"
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_threeActiveProviders
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
name
=
test
-
{
i
}
;
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
active
"
;
}
name
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
return
[
{
type
:
"
url
"
source
:
"
history
"
payload
:
{
title
:
Test
result
{
i
}
url
:
http
:
/
/
example
.
com
/
{
i
}
}
}
]
;
}
name
)
;
}
}
}
)
;
await
ext
.
startup
(
)
;
let
providers
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
name
=
test
-
{
i
}
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
name
)
;
Assert
.
ok
(
provider
)
;
providers
.
push
(
provider
)
;
}
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
for
(
let
provider
of
providers
)
{
Assert
.
ok
(
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
}
Assert
.
equal
(
context
.
results
.
length
4
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
for
(
let
i
=
0
;
i
<
providers
.
length
;
i
+
+
)
{
Assert
.
equal
(
context
.
results
[
i
+
1
]
.
title
Test
result
{
i
}
)
;
}
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_threeInactiveProviders
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
browser
.
test
.
notifyFail
(
"
onResultsRequested
fired
for
inactive
provider
"
)
;
}
test
-
{
i
}
)
;
}
}
}
)
;
await
ext
.
startup
(
)
;
let
providers
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
name
=
test
-
{
i
}
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
name
)
;
Assert
.
ok
(
provider
)
;
providers
.
push
(
provider
)
;
}
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
for
(
let
provider
of
providers
)
{
Assert
.
ok
(
!
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
}
Assert
.
equal
(
context
.
results
.
length
1
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_activeInactiveAndRestrictingProviders
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
for
(
let
behavior
of
[
"
active
"
"
inactive
"
"
restricting
"
]
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
behavior
;
}
behavior
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
browser
.
test
.
assertEq
(
behavior
"
restricting
"
"
onResultsRequested
should
be
fired
for
the
restricting
provider
"
)
;
return
[
{
type
:
"
url
"
source
:
"
history
"
payload
:
{
title
:
Test
result
{
behavior
}
url
:
http
:
/
/
example
.
com
/
{
behavior
}
}
}
]
;
}
behavior
)
;
}
}
}
)
;
await
ext
.
startup
(
)
;
let
providers
=
{
}
;
for
(
let
behavior
of
[
"
active
"
"
inactive
"
"
restricting
"
]
)
{
let
provider
=
UrlbarProvidersManager
.
getProvider
(
behavior
)
;
Assert
.
ok
(
provider
)
;
providers
[
behavior
]
=
provider
;
}
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
Assert
.
ok
(
providers
.
active
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
providers
.
active
.
isRestricting
(
context
)
)
;
Assert
.
ok
(
!
providers
.
inactive
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
providers
.
inactive
.
isRestricting
(
context
)
)
;
Assert
.
ok
(
providers
.
restricting
.
isActive
(
context
)
)
;
Assert
.
ok
(
providers
.
restricting
.
isRestricting
(
context
)
)
;
Assert
.
equal
(
context
.
results
.
length
1
)
;
Assert
.
equal
(
context
.
results
[
0
]
.
title
"
Test
result
restricting
"
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_onResultsRequestedNotImplemented
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
active
"
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
Assert
.
ok
(
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
Assert
.
equal
(
context
.
results
.
length
1
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_badPayload
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
active
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
async
query
=
>
{
return
[
{
type
:
"
url
"
source
:
"
history
"
payload
:
"
this
is
a
bad
payload
"
}
{
type
:
"
url
"
source
:
"
history
"
payload
:
{
title
:
"
Test
result
"
url
:
"
http
:
/
/
example
.
com
/
"
}
}
]
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
Assert
.
equal
(
context
.
results
.
length
2
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
Assert
.
equal
(
context
.
results
[
1
]
.
title
"
Test
result
"
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_onQueryCanceled
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
active
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onQueryCanceled
.
addListener
(
query
=
>
{
browser
.
test
.
notifyPass
(
"
canceled
"
)
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
let
startPromise
=
controller
.
startQuery
(
context
)
;
controller
.
cancelQuery
(
)
;
await
startPromise
;
await
ext
.
awaitFinish
(
"
canceled
"
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_onBehaviorRequestedTimeout
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
async
query
=
>
{
await
new
Promise
(
r
=
>
setTimeout
(
r
500
)
)
;
return
"
active
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
browser
.
test
.
notifyFail
(
"
onResultsRequested
fired
for
inactive
provider
"
)
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
let
currentTimeout
=
UrlbarProviderExtension
.
notificationTimeout
;
UrlbarProviderExtension
.
notificationTimeout
=
0
;
await
controller
.
startQuery
(
context
)
;
UrlbarProviderExtension
.
notificationTimeout
=
currentTimeout
;
Assert
.
ok
(
!
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
Assert
.
equal
(
context
.
results
.
length
1
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_onResultsRequestedTimeout
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
active
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
async
query
=
>
{
await
new
Promise
(
r
=
>
setTimeout
(
r
600
)
)
;
return
[
{
type
:
"
url
"
source
:
"
history
"
payload
:
{
title
:
"
Test
result
"
url
:
"
http
:
/
/
example
.
com
/
"
}
}
]
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
let
currentTimeout
=
UrlbarProviderExtension
.
notificationTimeout
;
UrlbarProviderExtension
.
notificationTimeout
=
ORIGINAL_NOTIFICATION_TIMEOUT
;
await
controller
.
startQuery
(
context
)
;
UrlbarProviderExtension
.
notificationTimeout
=
currentTimeout
;
Assert
.
ok
(
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
Assert
.
equal
(
context
.
results
.
length
1
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_privateBrowsing_not_allowed
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
incognito
:
"
not_allowed
"
}
isPrivileged
:
true
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
browser
.
test
.
notifyFail
(
"
onBehaviorRequested
fired
in
private
browsing
"
)
;
}
"
Test
-
private
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
browser
.
test
.
notifyFail
(
"
onResultsRequested
fired
in
private
browsing
"
)
;
}
"
Test
-
private
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
queryContext
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
true
maxResults
:
10
searchString
:
"
*
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
queryContext
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
Test
-
private
"
)
;
Assert
.
ok
(
!
provider
.
isActive
(
{
}
)
"
Check
provider
is
inactive
"
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_privateBrowsing_not_allowed_onQueryCanceled
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
incognito
:
"
not_allowed
"
}
isPrivileged
:
true
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
browser
.
test
.
notifyFail
(
"
onBehaviorRequested
fired
in
private
browsing
"
)
;
}
"
test
"
)
;
browser
.
urlbar
.
onQueryCanceled
.
addListener
(
query
=
>
{
browser
.
test
.
notifyFail
(
"
onQueryCanceled
fired
in
private
browsing
"
)
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
true
maxResults
:
10
searchString
:
"
*
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
let
startPromise
=
controller
.
startQuery
(
context
)
;
controller
.
cancelQuery
(
)
;
await
startPromise
;
Assert
.
ok
(
!
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_privateBrowsing_allowed
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
let
name
=
"
Test
-
private
"
;
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
browser
.
test
.
sendMessage
(
"
onBehaviorRequested
"
)
;
return
"
active
"
;
}
name
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
browser
.
test
.
sendMessage
(
"
onResultsRequested
"
)
;
return
[
]
;
}
name
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
Test
-
private
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
true
maxResults
:
10
searchString
:
"
*
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
Assert
.
ok
(
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
await
Promise
.
all
(
[
"
onBehaviorRequested
"
"
onResultsRequested
"
]
.
map
(
msg
=
>
ext
.
awaitMessage
(
msg
)
)
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_privateBrowsing_allowed_onQueryCanceled
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
let
name
=
"
Test
-
private
"
;
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
browser
.
test
.
sendMessage
(
"
onBehaviorRequested
"
)
;
return
"
active
"
;
}
name
)
;
browser
.
urlbar
.
onQueryCanceled
.
addListener
(
query
=
>
{
browser
.
test
.
sendMessage
(
"
onQueryCanceled
"
)
;
}
name
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
Test
-
private
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
true
maxResults
:
10
searchString
:
"
*
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
let
startPromise
=
controller
.
startQuery
(
context
)
;
controller
.
cancelQuery
(
)
;
await
startPromise
;
Assert
.
ok
(
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
await
Promise
.
all
(
[
"
onBehaviorRequested
"
"
onQueryCanceled
"
]
.
map
(
msg
=
>
ext
.
awaitMessage
(
msg
)
)
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_nonPrivateBrowsing
(
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
incognito
:
"
not_allowed
"
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
background
(
)
{
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
active
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
return
[
{
type
:
"
url
"
source
:
"
history
"
payload
:
{
title
:
"
Test
result
"
url
:
"
http
:
/
/
example
.
com
/
"
}
suggestedIndex
:
1
}
]
;
}
"
test
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
;
Assert
.
ok
(
provider
)
;
let
context
=
new
UrlbarQueryContext
(
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
searchString
:
"
test
"
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
await
controller
.
startQuery
(
context
)
;
Assert
.
ok
(
provider
.
isActive
(
context
)
)
;
Assert
.
ok
(
!
provider
.
isRestricting
(
context
)
)
;
Assert
.
equal
(
context
.
results
.
length
2
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
heuristic
)
;
Assert
.
equal
(
context
.
results
[
1
]
.
title
"
Test
result
"
)
;
Assert
.
equal
(
context
.
results
[
1
]
.
suggestedIndex
1
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
test_setOpenViewOnFocus
(
)
{
let
getPrefValue
=
(
)
=
>
UrlbarPrefs
.
get
(
"
openViewOnFocus
"
)
;
Assert
.
equal
(
getPrefValue
(
)
false
"
Open
-
view
-
on
-
focus
mode
should
be
disabled
by
default
"
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
useAddonManager
:
"
temporary
"
async
background
(
)
{
await
browser
.
urlbar
.
openViewOnFocus
.
set
(
{
value
:
true
}
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
}
)
;
await
ext
.
startup
(
)
;
await
ext
.
awaitMessage
(
"
ready
"
)
;
Assert
.
equal
(
getPrefValue
(
)
true
"
Successfully
enabled
the
open
-
view
-
on
-
focus
mode
"
)
;
await
ext
.
unload
(
)
;
Assert
.
equal
(
getPrefValue
(
)
false
"
Open
-
view
-
on
-
focus
mode
should
be
reset
after
unloading
the
add
-
on
"
)
;
}
)
;
add_task
(
async
function
test_engagementTelemetry
(
)
{
let
getPrefValue
=
(
)
=
>
UrlbarPrefs
.
get
(
"
eventTelemetry
.
enabled
"
)
;
Assert
.
equal
(
getPrefValue
(
)
false
"
Engagement
telemetry
should
be
disabled
by
default
"
)
;
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
}
isPrivileged
:
true
incognitoOverride
:
"
spanning
"
useAddonManager
:
"
temporary
"
background
(
)
{
browser
.
urlbar
.
engagementTelemetry
.
set
(
{
value
:
true
}
)
;
}
}
)
;
await
ext
.
startup
(
)
;
Assert
.
equal
(
getPrefValue
(
)
true
"
Successfully
enabled
the
engagement
telemetry
"
)
;
await
ext
.
unload
(
)
;
Assert
.
equal
(
getPrefValue
(
)
false
"
Engagement
telemetry
should
be
reset
after
unloading
the
add
-
on
"
)
;
}
)
;
