"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Extension
"
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionData
"
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionTestUtils
"
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
HttpServer
"
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Schemas
"
"
resource
:
/
/
gre
/
modules
/
Schemas
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TestUtils
"
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
ExtensionTestUtils
.
init
(
this
)
;
function
createHttpServer
(
port
=
-
1
)
{
let
server
=
new
HttpServer
(
)
;
server
.
start
(
port
)
;
do_register_cleanup
(
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
server
.
stop
(
resolve
)
;
}
)
;
}
)
;
return
server
;
}
var
promiseConsoleOutput
=
async
function
(
task
)
{
const
DONE
=
=
=
=
console
listener
{
Math
.
random
(
)
}
done
=
=
=
;
let
listener
;
let
messages
=
[
]
;
let
awaitListener
=
new
Promise
(
resolve
=
>
{
listener
=
msg
=
>
{
if
(
msg
=
=
DONE
)
{
resolve
(
)
;
}
else
{
void
(
msg
instanceof
Ci
.
nsIConsoleMessage
)
;
messages
.
push
(
msg
)
;
}
}
;
}
)
;
Services
.
console
.
registerListener
(
listener
)
;
try
{
let
result
=
await
task
(
)
;
Services
.
console
.
logStringMessage
(
DONE
)
;
await
awaitListener
;
return
{
messages
result
}
;
}
finally
{
Services
.
console
.
unregisterListener
(
listener
)
;
}
}
;
