"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ExtensionControlledPopup
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionSettingsStore
"
"
resource
:
/
/
gre
/
modules
/
ExtensionSettingsStore
.
jsm
"
)
;
let
{
makeWidgetId
}
=
ExtensionUtils
;
XPCOMUtils
.
defineLazyGetter
(
this
"
strBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
global
/
locale
/
extensions
.
properties
"
)
;
}
)
;
const
PREF_BRANCH_INSTALLED_ADDON
=
"
extensions
.
installedDistroAddon
.
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
distributionAddonsList
"
function
(
)
{
let
addonList
=
Services
.
prefs
.
getChildList
(
PREF_BRANCH_INSTALLED_ADDON
)
.
map
(
id
=
>
id
.
replace
(
PREF_BRANCH_INSTALLED_ADDON
"
"
)
)
;
return
new
Set
(
addonList
)
;
}
)
;
class
ExtensionControlledPopup
{
constructor
(
opts
)
{
this
.
confirmedType
=
opts
.
confirmedType
;
this
.
observerTopic
=
opts
.
observerTopic
;
this
.
anchorId
=
opts
.
anchorId
;
this
.
popupnotificationId
=
opts
.
popupnotificationId
;
this
.
settingType
=
opts
.
settingType
;
this
.
settingKey
=
opts
.
settingKey
;
this
.
descriptionId
=
opts
.
descriptionId
;
this
.
descriptionMessageId
=
opts
.
descriptionMessageId
;
this
.
getLocalizedDescription
=
opts
.
getLocalizedDescription
;
this
.
learnMoreMessageId
=
opts
.
learnMoreMessageId
;
this
.
learnMoreLink
=
opts
.
learnMoreLink
;
this
.
onObserverAdded
=
opts
.
onObserverAdded
;
this
.
onObserverRemoved
=
opts
.
onObserverRemoved
;
this
.
beforeDisableAddon
=
opts
.
beforeDisableAddon
;
this
.
observerRegistered
=
false
;
}
get
topWindow
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
}
userHasConfirmed
(
id
)
{
if
(
distributionAddonsList
.
has
(
id
)
)
{
return
true
;
}
let
setting
=
ExtensionSettingsStore
.
getSetting
(
this
.
confirmedType
id
)
;
return
!
!
(
setting
&
&
setting
.
value
)
;
}
async
setConfirmation
(
id
)
{
await
ExtensionSettingsStore
.
initialize
(
)
;
return
ExtensionSettingsStore
.
addSetting
(
id
this
.
confirmedType
id
true
(
)
=
>
false
)
;
}
async
clearConfirmation
(
id
)
{
await
ExtensionSettingsStore
.
initialize
(
)
;
return
ExtensionSettingsStore
.
removeSetting
(
id
this
.
confirmedType
id
)
;
}
observe
(
subject
topic
data
)
{
this
.
removeObserver
(
)
;
let
targetWindow
;
if
(
subject
&
&
subject
.
document
)
{
targetWindow
=
subject
;
}
this
.
topWindow
.
requestIdleCallback
(
(
)
=
>
this
.
open
(
targetWindow
)
)
;
}
removeObserver
(
)
{
if
(
this
.
observerRegistered
)
{
Services
.
obs
.
removeObserver
(
this
this
.
observerTopic
)
;
this
.
observerRegistered
=
false
;
if
(
this
.
onObserverRemoved
)
{
this
.
onObserverRemoved
(
)
;
}
}
}
async
addObserver
(
extensionId
)
{
await
ExtensionSettingsStore
.
initialize
(
)
;
if
(
!
this
.
observerRegistered
&
&
!
this
.
userHasConfirmed
(
extensionId
)
)
{
Services
.
obs
.
addObserver
(
this
this
.
observerTopic
)
;
this
.
observerRegistered
=
true
;
if
(
this
.
onObserverAdded
)
{
this
.
onObserverAdded
(
)
;
}
}
}
async
open
(
targetWindow
extensionId
)
{
await
ExtensionSettingsStore
.
initialize
(
)
;
this
.
removeObserver
(
)
;
if
(
!
extensionId
)
{
let
item
=
ExtensionSettingsStore
.
getSetting
(
this
.
settingType
this
.
settingKey
)
;
extensionId
=
item
&
&
item
.
id
;
}
if
(
!
extensionId
|
|
this
.
userHasConfirmed
(
extensionId
)
)
{
return
;
}
let
win
=
targetWindow
|
|
this
.
topWindow
;
let
doc
=
win
.
document
;
let
panel
=
doc
.
getElementById
(
"
extension
-
notification
-
panel
"
)
;
let
popupnotification
=
doc
.
getElementById
(
this
.
popupnotificationId
)
;
let
urlBarWasFocused
=
win
.
gURLBar
.
focused
;
if
(
!
popupnotification
)
{
throw
new
Error
(
No
popupnotification
found
for
id
"
{
this
.
popupnotificationId
}
"
)
;
}
let
addon
=
await
AddonManager
.
getAddonByID
(
extensionId
)
;
this
.
populateDescription
(
doc
addon
)
;
let
handleCommand
=
async
(
event
)
=
>
{
panel
.
hidePopup
(
)
;
if
(
event
.
originalTarget
.
getAttribute
(
"
anonid
"
)
=
=
"
button
"
)
{
await
this
.
setConfirmation
(
extensionId
)
;
}
else
{
if
(
this
.
beforeDisableAddon
)
{
await
this
.
beforeDisableAddon
(
this
win
)
;
}
addon
.
disable
(
)
;
}
if
(
urlBarWasFocused
)
{
win
.
gURLBar
.
focus
(
)
;
}
}
;
panel
.
addEventListener
(
"
command
"
handleCommand
)
;
panel
.
addEventListener
(
"
popuphidden
"
(
)
=
>
{
popupnotification
.
hidden
=
true
;
panel
.
removeEventListener
(
"
command
"
handleCommand
)
;
}
{
once
:
true
}
)
;
let
anchorButton
;
if
(
this
.
anchorId
)
{
anchorButton
=
doc
.
getElementById
(
this
.
anchorId
)
;
}
else
{
let
action
=
CustomizableUI
.
getWidget
(
{
makeWidgetId
(
extensionId
)
}
-
browser
-
action
)
;
if
(
action
)
{
action
=
action
.
areaType
=
=
"
toolbar
"
&
&
action
.
forWindow
(
win
)
.
node
;
}
anchorButton
=
action
|
|
doc
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
}
let
anchor
=
doc
.
getAnonymousElementByAttribute
(
anchorButton
"
class
"
"
toolbarbutton
-
icon
"
)
;
panel
.
hidden
=
false
;
popupnotification
.
hidden
=
false
;
panel
.
openPopup
(
anchor
)
;
}
getAddonDetails
(
doc
addon
)
{
const
defaultIcon
=
"
chrome
:
/
/
mozapps
/
skin
/
extensions
/
extensionGeneric
.
svg
"
;
let
image
=
doc
.
createElement
(
"
image
"
)
;
image
.
setAttribute
(
"
src
"
addon
.
iconURL
|
|
defaultIcon
)
;
image
.
classList
.
add
(
"
extension
-
controlled
-
icon
"
)
;
let
addonDetails
=
doc
.
createDocumentFragment
(
)
;
addonDetails
.
appendChild
(
image
)
;
addonDetails
.
appendChild
(
doc
.
createTextNode
(
"
"
+
addon
.
name
)
)
;
return
addonDetails
;
}
populateDescription
(
doc
addon
)
{
let
description
=
doc
.
getElementById
(
this
.
descriptionId
)
;
description
.
textContent
=
"
"
;
let
addonDetails
=
this
.
getAddonDetails
(
doc
addon
)
;
let
message
=
strBundle
.
GetStringFromName
(
this
.
descriptionMessageId
)
;
if
(
this
.
getLocalizedDescription
)
{
description
.
appendChild
(
this
.
getLocalizedDescription
(
doc
message
addonDetails
)
)
;
}
else
{
description
.
appendChild
(
BrowserUtils
.
getLocalizedFragment
(
doc
message
addonDetails
)
)
;
}
let
link
=
doc
.
createElement
(
"
label
"
)
;
link
.
setAttribute
(
"
class
"
"
learnMore
text
-
link
"
)
;
link
.
href
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
this
.
learnMoreLink
;
link
.
textContent
=
strBundle
.
GetStringFromName
(
this
.
learnMoreMessageId
)
;
description
.
appendChild
(
link
)
;
}
}
