"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
BrowsingDataDelegate
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
makeRange
"
(
)
=
>
{
const
{
ExtensionParent
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
return
ExtensionParent
.
apiManager
.
global
.
makeRange
;
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Preferences
:
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
Sanitizer
:
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
}
)
;
class
BrowsingDataDelegate
{
constructor
(
extension
)
{
}
handleRemoval
(
dataType
options
)
{
switch
(
dataType
)
{
case
"
downloads
"
:
return
Sanitizer
.
items
.
downloads
.
clear
(
makeRange
(
options
)
)
;
case
"
formData
"
:
return
Sanitizer
.
items
.
formdata
.
clear
(
makeRange
(
options
)
)
;
case
"
history
"
:
return
Sanitizer
.
items
.
history
.
clear
(
makeRange
(
options
)
)
;
default
:
return
undefined
;
}
}
settings
(
)
{
const
PREF_DOMAIN
=
"
privacy
.
cpd
.
"
;
const
PREF_LIST
=
[
"
cache
"
"
cookies
"
"
history
"
"
formdata
"
"
downloads
"
]
;
let
clearRange
=
Sanitizer
.
getClearRange
(
)
;
let
since
=
clearRange
?
clearRange
[
0
]
/
1000
:
0
;
let
options
=
{
since
}
;
let
dataToRemove
=
{
}
;
let
dataRemovalPermitted
=
{
}
;
for
(
let
item
of
PREF_LIST
)
{
const
name
=
item
=
=
=
"
formdata
"
?
"
formData
"
:
item
;
dataToRemove
[
name
]
=
Preferences
.
get
(
{
PREF_DOMAIN
}
{
item
}
)
;
dataRemovalPermitted
[
name
]
=
true
;
}
return
Promise
.
resolve
(
{
options
dataToRemove
dataRemovalPermitted
}
)
;
}
}
