"
use
strict
"
;
global
.
EventEmitter
=
ExtensionUtils
.
EventEmitter
;
const
getSender
=
(
extension
target
sender
)
=
>
{
let
tabId
;
if
(
"
tabId
"
in
sender
)
{
tabId
=
sender
.
tabId
;
delete
sender
.
tabId
;
}
else
if
(
target
instanceof
Ci
.
nsIDOMXULElement
)
{
tabId
=
tabTracker
.
getBrowserData
(
target
)
.
tabId
;
}
if
(
tabId
)
{
let
tab
=
extension
.
tabManager
.
get
(
tabId
null
)
;
if
(
tab
)
{
sender
.
tab
=
tab
.
convert
(
)
;
}
}
}
;
global
.
tabGetSender
=
getSender
;
extensions
.
on
(
"
uninstall
"
(
msg
extension
)
=
>
{
if
(
extension
.
uninstallURL
)
{
let
browser
=
windowTracker
.
topWindow
.
gBrowser
;
browser
.
addTab
(
extension
.
uninstallURL
{
relatedToCurrent
:
true
}
)
;
}
}
)
;
extensions
.
on
(
"
page
-
shutdown
"
(
type
context
)
=
>
{
if
(
context
.
viewType
=
=
"
tab
"
)
{
if
(
context
.
extension
.
id
!
=
=
context
.
xulBrowser
.
contentPrincipal
.
addonId
)
{
return
;
}
let
{
gBrowser
}
=
context
.
xulBrowser
.
ownerGlobal
;
if
(
gBrowser
)
{
let
nativeTab
=
gBrowser
.
getTabForBrowser
(
context
.
xulBrowser
)
;
if
(
nativeTab
)
{
gBrowser
.
removeTab
(
nativeTab
)
;
}
}
}
}
)
;
global
.
openOptionsPage
=
(
extension
)
=
>
{
let
window
=
windowTracker
.
topWindow
;
if
(
!
window
)
{
return
Promise
.
reject
(
{
message
:
"
No
browser
window
available
"
}
)
;
}
if
(
extension
.
manifest
.
options_ui
.
open_in_tab
)
{
window
.
switchToTabHavingURI
(
extension
.
manifest
.
options_ui
.
page
true
{
triggeringPrincipal
:
extension
.
principal
}
)
;
return
Promise
.
resolve
(
)
;
}
let
viewId
=
addons
:
/
/
detail
/
{
encodeURIComponent
(
extension
.
id
)
}
/
preferences
;
return
window
.
BrowserOpenAddonsMgr
(
viewId
)
;
}
;
