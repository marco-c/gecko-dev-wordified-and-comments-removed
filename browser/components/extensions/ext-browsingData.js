"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Sanitizer
"
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
cookieMgr
"
"
mozilla
.
org
/
cookiemanager
;
1
"
"
nsICookieManager
"
)
;
const
YIELD_PERIOD
=
10
;
const
PREF_DOMAIN
=
"
privacy
.
cpd
.
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
sanitizer
"
(
)
=
>
{
let
sanitizer
=
new
Sanitizer
(
)
;
sanitizer
.
prefDomain
=
PREF_DOMAIN
;
return
sanitizer
;
}
)
;
function
makeRange
(
options
)
{
return
(
options
.
since
=
=
null
)
?
null
:
[
PlacesUtils
.
toPRTime
(
options
.
since
)
PlacesUtils
.
toPRTime
(
Date
.
now
(
)
)
]
;
}
function
clearCache
(
)
{
return
sanitizer
.
items
.
cache
.
clear
(
)
;
}
let
clearCookies
=
Task
.
async
(
function
*
(
options
)
{
let
yieldCounter
=
0
;
if
(
options
.
since
)
{
let
cookiesEnum
=
cookieMgr
.
enumerator
;
while
(
cookiesEnum
.
hasMoreElements
(
)
)
{
let
cookie
=
cookiesEnum
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
if
(
cookie
.
creationTime
>
PlacesUtils
.
toPRTime
(
options
.
since
)
)
{
cookieMgr
.
remove
(
cookie
.
host
cookie
.
name
cookie
.
path
false
cookie
.
originAttributes
)
;
if
(
+
+
yieldCounter
%
YIELD_PERIOD
=
=
0
)
{
yield
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
}
}
}
else
{
cookieMgr
.
removeAll
(
)
;
}
}
)
;
function
clearDownloads
(
options
)
{
return
sanitizer
.
items
.
downloads
.
clear
(
makeRange
(
options
)
)
;
}
function
clearFormData
(
options
)
{
return
sanitizer
.
items
.
formdata
.
clear
(
makeRange
(
options
)
)
;
}
function
clearHistory
(
options
)
{
return
sanitizer
.
items
.
history
.
clear
(
makeRange
(
options
)
)
;
}
function
clearPluginData
(
options
)
{
return
sanitizer
.
items
.
pluginData
.
clear
(
makeRange
(
options
)
)
;
}
function
doRemoval
(
options
dataToRemove
extension
)
{
if
(
options
.
originTypes
&
&
(
options
.
originTypes
.
protectedWeb
|
|
options
.
originTypes
.
extension
)
)
{
return
Promise
.
reject
(
{
message
:
"
Firefox
does
not
support
protectedWeb
or
extension
as
originTypes
.
"
}
)
;
}
let
removalPromises
=
[
]
;
let
invalidDataTypes
=
[
]
;
for
(
let
dataType
in
dataToRemove
)
{
if
(
dataToRemove
[
dataType
]
)
{
switch
(
dataType
)
{
case
"
cache
"
:
removalPromises
.
push
(
clearCache
(
)
)
;
break
;
case
"
cookies
"
:
removalPromises
.
push
(
clearCookies
(
options
)
)
;
break
;
case
"
downloads
"
:
removalPromises
.
push
(
clearDownloads
(
options
)
)
;
break
;
case
"
formData
"
:
removalPromises
.
push
(
clearFormData
(
options
)
)
;
break
;
case
"
history
"
:
removalPromises
.
push
(
clearHistory
(
options
)
)
;
break
;
case
"
pluginData
"
:
removalPromises
.
push
(
clearPluginData
(
options
)
)
;
break
;
default
:
invalidDataTypes
.
push
(
dataType
)
;
}
}
}
if
(
extension
&
&
invalidDataTypes
.
length
)
{
extension
.
logger
.
warn
(
Firefox
does
not
support
dataTypes
:
{
invalidDataTypes
.
toString
(
)
}
.
)
;
}
return
Promise
.
all
(
removalPromises
)
;
}
extensions
.
registerSchemaAPI
(
"
browsingData
"
"
addon_parent
"
context
=
>
{
let
{
extension
}
=
context
;
return
{
browsingData
:
{
settings
(
)
{
const
PREF_DOMAIN
=
"
privacy
.
cpd
.
"
;
const
PREF_LIST
=
[
"
cache
"
"
cookies
"
"
history
"
"
formdata
"
"
downloads
"
]
;
let
since
=
Sanitizer
.
getClearRange
(
)
[
0
]
/
1000
;
let
options
=
{
since
}
;
let
dataToRemove
=
{
}
;
let
dataRemovalPermitted
=
{
}
;
for
(
let
item
of
PREF_LIST
)
{
dataToRemove
[
item
]
=
Preferences
.
get
(
{
PREF_DOMAIN
}
{
item
}
)
;
dataRemovalPermitted
[
item
]
=
true
;
}
dataToRemove
.
formData
=
Preferences
.
get
(
{
PREF_DOMAIN
}
formdata
)
;
dataRemovalPermitted
.
formData
=
true
;
return
Promise
.
resolve
(
{
options
dataToRemove
dataRemovalPermitted
}
)
;
}
remove
(
options
dataToRemove
)
{
return
doRemoval
(
options
dataToRemove
extension
)
;
}
removeCache
(
options
)
{
return
doRemoval
(
options
{
cache
:
true
}
)
;
}
removeCookies
(
options
)
{
return
doRemoval
(
options
{
cookies
:
true
}
)
;
}
removeDownloads
(
options
)
{
return
doRemoval
(
options
{
downloads
:
true
}
)
;
}
removeFormData
(
options
)
{
return
doRemoval
(
options
{
formData
:
true
}
)
;
}
removeHistory
(
options
)
{
return
doRemoval
(
options
{
history
:
true
}
)
;
}
removePluginData
(
options
)
{
return
doRemoval
(
options
{
pluginData
:
true
}
)
;
}
}
}
;
}
)
;
