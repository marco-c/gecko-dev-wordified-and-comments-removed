"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
const
{
promiseDocumentLoaded
SingletonEventManager
}
=
ExtensionUtils
;
const
{
EventEmitter
}
=
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
{
}
)
;
class
ChildDevToolsPanel
extends
EventEmitter
{
constructor
(
context
{
id
}
)
{
super
(
)
;
this
.
context
=
context
;
this
.
context
.
callOnClose
(
this
)
;
this
.
id
=
id
;
this
.
_panelContext
=
null
;
this
.
mm
=
context
.
messageManager
;
this
.
mm
.
addMessageListener
(
"
Extension
:
DevToolsPanelShown
"
this
)
;
this
.
mm
.
addMessageListener
(
"
Extension
:
DevToolsPanelHidden
"
this
)
;
}
get
panelContext
(
)
{
if
(
this
.
_panelContext
)
{
return
this
.
_panelContext
;
}
for
(
let
view
of
this
.
context
.
extension
.
devtoolsViews
)
{
if
(
view
.
viewType
=
=
=
"
devtools_panel
"
&
&
view
.
devtoolsToolboxInfo
.
toolboxPanelId
=
=
=
this
.
id
)
{
this
.
_panelContext
=
view
;
return
view
;
}
}
return
null
;
}
receiveMessage
(
{
name
data
}
)
{
if
(
!
this
.
panelContext
|
|
!
this
.
panelContext
.
contentWindow
)
{
return
;
}
if
(
!
data
|
|
data
.
toolboxPanelId
!
=
=
this
.
id
)
{
return
;
}
switch
(
name
)
{
case
"
Extension
:
DevToolsPanelShown
"
:
this
.
onParentPanelShown
(
)
;
break
;
case
"
Extension
:
DevToolsPanelHidden
"
:
this
.
onParentPanelHidden
(
)
;
break
;
}
}
onParentPanelShown
(
)
{
const
{
document
}
=
this
.
panelContext
.
contentWindow
;
promiseDocumentLoaded
(
document
)
.
then
(
(
)
=
>
{
this
.
emit
(
"
shown
"
this
.
panelContext
.
contentWindow
)
;
}
)
;
}
onParentPanelHidden
(
)
{
this
.
emit
(
"
hidden
"
)
;
}
api
(
)
{
return
{
onShown
:
new
SingletonEventManager
(
this
.
context
"
devtoolsPanel
.
onShown
"
fire
=
>
{
const
listener
=
(
eventName
panelContentWindow
)
=
>
{
fire
.
asyncWithoutClone
(
panelContentWindow
)
;
}
;
this
.
on
(
"
shown
"
listener
)
;
return
(
)
=
>
{
this
.
off
(
"
shown
"
listener
)
;
}
;
}
)
.
api
(
)
onHidden
:
new
SingletonEventManager
(
this
.
context
"
devtoolsPanel
.
onHidden
"
fire
=
>
{
const
listener
=
(
)
=
>
{
fire
.
async
(
)
;
}
;
this
.
on
(
"
hidden
"
listener
)
;
return
(
)
=
>
{
this
.
off
(
"
hidden
"
listener
)
;
}
;
}
)
.
api
(
)
}
;
}
close
(
)
{
this
.
mm
.
removeMessageListener
(
"
Extension
:
DevToolsPanelShown
"
this
)
;
this
.
mm
.
removeMessageListener
(
"
Extension
:
DevToolsPanelHidden
"
this
)
;
this
.
_panelContext
=
null
;
this
.
context
=
null
;
}
}
extensions
.
registerSchemaAPI
(
"
devtools
.
panels
"
"
devtools_child
"
context
=
>
{
return
{
devtools
:
{
panels
:
{
create
(
title
icon
url
)
{
return
context
.
cloneScope
.
Promise
.
resolve
(
)
.
then
(
async
(
)
=
>
{
const
panelId
=
await
context
.
childManager
.
callParentAsyncFunction
(
"
devtools
.
panels
.
create
"
[
title
icon
url
]
)
;
const
devtoolsPanel
=
new
ChildDevToolsPanel
(
context
{
id
:
panelId
}
)
;
const
devtoolsPanelAPI
=
Cu
.
cloneInto
(
devtoolsPanel
.
api
(
)
context
.
cloneScope
{
cloneFunctions
:
true
}
)
;
return
devtoolsPanelAPI
;
}
)
;
}
}
}
}
;
}
)
;
