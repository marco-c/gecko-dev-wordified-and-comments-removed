"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
var
{
EventManager
DefaultWeakMap
ignoreEvent
runSafe
}
=
ExtensionUtils
;
var
browserActionMap
=
new
WeakMap
(
)
;
function
browserActionOf
(
extension
)
{
return
browserActionMap
.
get
(
extension
)
;
}
var
nextActionId
=
0
;
function
BrowserAction
(
options
extension
)
{
this
.
extension
=
extension
;
this
.
id
=
makeWidgetId
(
extension
.
id
)
+
"
-
browser
-
action
"
;
this
.
widget
=
null
;
let
title
=
extension
.
localize
(
options
.
default_title
|
|
"
"
)
;
let
popup
=
extension
.
localize
(
options
.
default_popup
|
|
"
"
)
;
if
(
popup
)
{
popup
=
extension
.
baseURI
.
resolve
(
popup
)
;
}
this
.
defaults
=
{
title
:
title
badgeText
:
"
"
badgeBackgroundColor
:
null
icon
:
IconDetails
.
normalize
(
{
path
:
options
.
default_icon
}
extension
null
true
)
popup
:
popup
}
;
this
.
tabContext
=
new
TabContext
(
tab
=
>
Object
.
create
(
this
.
defaults
)
extension
)
;
EventEmitter
.
decorate
(
this
)
;
}
BrowserAction
.
prototype
=
{
build
(
)
{
let
widget
=
CustomizableUI
.
createWidget
(
{
id
:
this
.
id
type
:
"
custom
"
removable
:
true
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
onBuild
:
document
=
>
{
let
node
=
document
.
createElement
(
"
toolbarbutton
"
)
;
node
.
id
=
this
.
id
;
node
.
setAttribute
(
"
class
"
"
toolbarbutton
-
1
chromeclass
-
toolbar
-
additional
badged
-
button
"
)
;
node
.
setAttribute
(
"
constrain
-
size
"
"
true
"
)
;
this
.
updateButton
(
node
this
.
defaults
)
;
let
tabbrowser
=
document
.
defaultView
.
gBrowser
;
node
.
addEventListener
(
"
command
"
event
=
>
{
let
tab
=
tabbrowser
.
selectedTab
;
let
popup
=
this
.
getProperty
(
tab
"
popup
"
)
;
if
(
popup
)
{
this
.
togglePopup
(
node
popup
)
;
}
else
{
this
.
emit
(
"
click
"
)
;
}
}
)
;
return
node
;
}
}
)
;
this
.
tabContext
.
on
(
"
tab
-
select
"
(
evt
tab
)
=
>
{
this
.
updateWindow
(
tab
.
ownerDocument
.
defaultView
)
;
}
)
this
.
widget
=
widget
;
}
togglePopup
(
node
popupResource
)
{
openPanel
(
node
popupResource
this
.
extension
)
;
}
updateButton
(
node
tabData
)
{
if
(
tabData
.
title
)
{
node
.
setAttribute
(
"
tooltiptext
"
tabData
.
title
)
;
node
.
setAttribute
(
"
label
"
tabData
.
title
)
;
node
.
setAttribute
(
"
aria
-
label
"
tabData
.
title
)
;
}
else
{
node
.
removeAttribute
(
"
tooltiptext
"
)
;
node
.
removeAttribute
(
"
label
"
)
;
node
.
removeAttribute
(
"
aria
-
label
"
)
;
}
if
(
tabData
.
badgeText
)
{
node
.
setAttribute
(
"
badge
"
tabData
.
badgeText
)
;
}
else
{
node
.
removeAttribute
(
"
badge
"
)
;
}
let
badgeNode
=
node
.
ownerDocument
.
getAnonymousElementByAttribute
(
node
'
class
'
'
toolbarbutton
-
badge
'
)
;
if
(
badgeNode
)
{
let
color
=
tabData
.
badgeBackgroundColor
;
if
(
Array
.
isArray
(
color
)
)
{
color
=
rgb
(
{
color
[
0
]
}
{
color
[
1
]
}
{
color
[
2
]
}
)
;
}
badgeNode
.
style
.
backgroundColor
=
color
|
|
"
"
;
}
let
iconURL
=
IconDetails
.
getURL
(
tabData
.
icon
node
.
ownerDocument
.
defaultView
this
.
extension
)
;
node
.
setAttribute
(
"
image
"
iconURL
)
;
}
updateWindow
(
window
)
{
let
widget
=
this
.
widget
.
forWindow
(
window
)
;
if
(
widget
)
{
let
tab
=
window
.
gBrowser
.
selectedTab
;
this
.
updateButton
(
widget
.
node
this
.
tabContext
.
get
(
tab
)
)
;
}
}
updateOnChange
(
tab
)
{
if
(
tab
)
{
if
(
tab
.
selected
)
{
this
.
updateWindow
(
tab
.
ownerDocument
.
defaultView
)
;
}
}
else
{
for
(
let
window
of
WindowListManager
.
browserWindows
(
)
)
{
this
.
updateWindow
(
window
)
;
}
}
}
setProperty
(
tab
prop
value
)
{
if
(
tab
=
=
null
)
{
this
.
defaults
[
prop
]
=
value
;
}
else
{
this
.
tabContext
.
get
(
tab
)
[
prop
]
=
value
;
}
this
.
updateOnChange
(
tab
)
;
}
getProperty
(
tab
prop
)
{
if
(
tab
=
=
null
)
{
return
this
.
defaults
[
prop
]
;
}
else
{
return
this
.
tabContext
.
get
(
tab
)
[
prop
]
;
}
}
shutdown
(
)
{
this
.
tabContext
.
shutdown
(
)
;
CustomizableUI
.
destroyWidget
(
this
.
id
)
;
}
}
;
extensions
.
on
(
"
manifest_browser_action
"
(
type
directive
extension
manifest
)
=
>
{
let
browserAction
=
new
BrowserAction
(
manifest
.
browser_action
extension
)
;
browserAction
.
build
(
)
;
browserActionMap
.
set
(
extension
browserAction
)
;
}
)
;
extensions
.
on
(
"
shutdown
"
(
type
extension
)
=
>
{
if
(
browserActionMap
.
has
(
extension
)
)
{
browserActionMap
.
get
(
extension
)
.
shutdown
(
)
;
browserActionMap
.
delete
(
extension
)
;
}
}
)
;
extensions
.
registerAPI
(
(
extension
context
)
=
>
{
return
{
browserAction
:
{
onClicked
:
new
EventManager
(
context
"
browserAction
.
onClicked
"
fire
=
>
{
let
listener
=
(
)
=
>
{
let
tab
=
TabManager
.
activeTab
;
fire
(
TabManager
.
convert
(
extension
tab
)
)
;
}
;
browserActionOf
(
extension
)
.
on
(
"
click
"
listener
)
;
return
(
)
=
>
{
browserActionOf
(
extension
)
.
off
(
"
click
"
listener
)
;
}
;
}
)
.
api
(
)
setTitle
:
function
(
details
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
browserActionOf
(
extension
)
.
setProperty
(
tab
"
title
"
details
.
title
)
;
}
getTitle
:
function
(
details
callback
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
let
title
=
browserActionOf
(
extension
)
.
getProperty
(
tab
"
title
"
)
;
runSafe
(
context
callback
title
)
;
}
setIcon
:
function
(
details
callback
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
let
icon
=
IconDetails
.
normalize
(
details
extension
context
)
;
browserActionOf
(
extension
)
.
setProperty
(
tab
"
icon
"
icon
)
;
}
setBadgeText
:
function
(
details
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
browserActionOf
(
extension
)
.
setProperty
(
tab
"
badgeText
"
details
.
text
)
;
}
getBadgeText
:
function
(
details
callback
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
let
text
=
browserActionOf
(
extension
)
.
getProperty
(
tab
"
badgeText
"
)
;
runSafe
(
context
callback
text
)
;
}
setPopup
:
function
(
details
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
let
url
=
details
.
popup
&
&
context
.
uri
.
resolve
(
details
.
popup
)
;
browserActionOf
(
extension
)
.
setProperty
(
tab
"
popup
"
url
)
;
}
getPopup
:
function
(
details
callback
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
let
popup
=
browserActionOf
(
extension
)
.
getProperty
(
tab
"
popup
"
)
;
runSafe
(
context
callback
popup
)
;
}
setBadgeBackgroundColor
:
function
(
details
)
{
let
color
=
details
.
color
;
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
browserActionOf
(
extension
)
.
setProperty
(
tab
"
badgeBackgroundColor
"
details
.
color
)
;
}
getBadgeBackgroundColor
:
function
(
details
callback
)
{
let
tab
=
details
.
tabId
?
TabManager
.
getTab
(
details
.
tabId
)
:
null
;
let
color
=
browserActionOf
(
extension
)
.
getProperty
(
tab
"
badgeBackgroundColor
"
)
;
runSafe
(
context
callback
color
)
;
}
}
}
;
}
)
;
