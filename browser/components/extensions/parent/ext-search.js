"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
searchLoadInBackground
"
"
browser
.
search
.
context
.
loadInBackground
"
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
"
btoa
"
]
)
;
var
{
ExtensionError
}
=
ExtensionUtils
;
async
function
getDataURI
(
resourceURI
)
{
let
response
=
await
fetch
(
resourceURI
)
;
let
buffer
=
await
response
.
arrayBuffer
(
)
;
let
contentType
=
response
.
headers
.
get
(
"
content
-
type
"
)
.
split
(
"
"
)
;
let
bytes
=
new
Uint8Array
(
buffer
)
;
let
str
=
String
.
fromCharCode
.
apply
(
null
bytes
)
;
return
data
:
{
contentType
[
0
]
}
;
base64
{
btoa
(
str
)
}
;
}
this
.
search
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
search
:
{
async
get
(
)
{
await
searchInitialized
;
let
engines
=
Services
.
search
.
getEngines
(
)
;
let
visibleEngines
=
engines
.
filter
(
engine
=
>
!
engine
.
hidden
)
;
return
Promise
.
all
(
visibleEngines
.
map
(
async
engine
=
>
{
let
favicon_url
=
null
;
if
(
engine
.
iconURI
)
{
if
(
engine
.
iconURI
.
spec
.
startsWith
(
"
resource
:
"
)
|
|
engine
.
iconURI
.
spec
.
startsWith
(
"
chrome
:
"
)
)
{
favicon_url
=
await
getDataURI
(
engine
.
iconURI
.
spec
)
;
}
else
{
favicon_url
=
engine
.
iconURI
.
spec
;
}
}
return
{
name
:
engine
.
name
is_default
:
engine
=
=
=
Services
.
search
.
currentEngine
alias
:
engine
.
alias
favicon_url
}
;
}
)
)
;
}
async
search
(
name
searchTerms
tabId
)
{
await
searchInitialized
;
let
engine
=
Services
.
search
.
getEngineByName
(
name
)
;
if
(
!
engine
)
{
throw
new
ExtensionError
(
{
name
}
was
not
found
)
;
}
let
submission
=
engine
.
getSubmission
(
searchTerms
null
"
webextension
"
)
;
let
options
=
{
postData
:
submission
.
postData
triggeringPrincipal
:
context
.
principal
}
;
if
(
tabId
=
=
=
null
)
{
let
browser
=
context
.
pendingEventBrowser
|
|
context
.
xulBrowser
;
let
{
gBrowser
}
=
browser
.
ownerGlobal
;
if
(
!
gBrowser
|
|
!
gBrowser
.
addTab
)
{
browser
=
browser
.
ownerDocument
.
docShell
.
chromeEventHandler
;
(
{
gBrowser
}
=
browser
.
ownerGlobal
)
;
}
if
(
!
gBrowser
|
|
!
gBrowser
.
addTab
)
{
throw
new
ExtensionError
(
"
Unable
to
locate
a
browser
.
"
)
;
}
let
nativeTab
=
gBrowser
.
addTab
(
submission
.
uri
.
spec
options
)
;
if
(
!
searchLoadInBackground
)
{
gBrowser
.
selectedTab
=
nativeTab
;
}
}
else
{
let
tab
=
tabTracker
.
getTab
(
tabId
)
;
tab
.
linkedBrowser
.
loadURI
(
submission
.
uri
.
spec
options
)
;
}
}
}
}
;
}
}
;
