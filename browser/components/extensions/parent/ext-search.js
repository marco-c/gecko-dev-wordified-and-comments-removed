"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
{
ExtensionError
}
=
ExtensionUtils
;
this
.
search
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
search
:
{
async
get
(
)
{
await
searchInitialized
;
let
visibleEngines
=
await
Services
.
search
.
getVisibleEngines
(
)
;
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
return
Promise
.
all
(
visibleEngines
.
map
(
async
engine
=
>
{
let
favIconUrl
;
if
(
engine
.
iconURI
)
{
if
(
engine
.
iconURI
.
schemeIs
(
"
moz
-
extension
"
)
&
&
engine
.
iconURI
.
host
!
=
=
context
.
extension
.
uuid
)
{
favIconUrl
=
await
ExtensionUtils
.
makeDataURI
(
engine
.
iconURI
.
spec
)
;
}
else
{
favIconUrl
=
engine
.
iconURI
.
spec
;
}
}
return
{
name
:
engine
.
name
isDefault
:
engine
.
name
=
=
=
defaultEngine
.
name
alias
:
engine
.
alias
|
|
undefined
favIconUrl
}
;
}
)
)
;
}
async
search
(
searchProperties
)
{
await
searchInitialized
;
let
engine
;
if
(
searchProperties
.
engine
)
{
engine
=
Services
.
search
.
getEngineByName
(
searchProperties
.
engine
)
;
if
(
!
engine
)
{
throw
new
ExtensionError
(
{
searchProperties
.
engine
}
was
not
found
)
;
}
}
const
tab
=
searchProperties
.
tabId
?
tabTracker
.
getTab
(
searchProperties
.
tabId
)
:
null
;
await
windowTracker
.
topWindow
.
BrowserSearch
.
loadSearchFromExtension
(
searchProperties
.
query
engine
tab
context
.
principal
)
;
}
}
}
;
}
}
;
