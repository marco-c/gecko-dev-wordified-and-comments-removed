"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
SearchUIUtils
:
"
resource
:
/
/
/
modules
/
SearchUIUtils
.
sys
.
mjs
"
}
)
;
var
{
ExtensionError
}
=
ExtensionUtils
;
const
dispositionMap
=
{
CURRENT_TAB
:
"
current
"
NEW_TAB
:
"
tab
"
NEW_WINDOW
:
"
window
"
}
;
this
.
search
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
function
getTarget
(
{
tabId
disposition
defaultDisposition
}
)
{
let
tab
where
;
if
(
disposition
)
{
if
(
tabId
)
{
throw
new
ExtensionError
(
Cannot
set
both
'
disposition
'
and
'
tabId
'
)
;
}
where
=
dispositionMap
[
disposition
]
;
}
else
if
(
tabId
)
{
tab
=
tabTracker
.
getTab
(
tabId
)
;
}
else
{
where
=
dispositionMap
[
defaultDisposition
]
;
}
return
{
tab
where
}
;
}
return
{
search
:
{
async
get
(
)
{
await
Services
.
search
.
promiseInitialized
;
let
visibleEngines
=
await
Services
.
search
.
getVisibleEngines
(
)
;
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
return
Promise
.
all
(
visibleEngines
.
map
(
async
engine
=
>
{
let
favIconUrl
=
await
engine
.
getIconURL
(
)
;
if
(
favIconUrl
&
&
(
favIconUrl
.
startsWith
(
"
blob
:
"
)
|
|
(
favIconUrl
.
startsWith
(
"
moz
-
extension
:
"
)
&
&
!
favIconUrl
.
startsWith
(
context
.
extension
.
baseURL
)
)
)
)
{
favIconUrl
=
await
ExtensionUtils
.
makeDataURI
(
favIconUrl
)
;
}
return
{
name
:
engine
.
name
isDefault
:
engine
.
name
=
=
=
defaultEngine
.
name
alias
:
engine
.
alias
|
|
undefined
favIconUrl
}
;
}
)
)
;
}
async
search
(
searchProperties
)
{
await
Services
.
search
.
promiseInitialized
;
let
engine
;
if
(
searchProperties
.
engine
)
{
engine
=
Services
.
search
.
getEngineByName
(
searchProperties
.
engine
)
;
if
(
!
engine
)
{
throw
new
ExtensionError
(
{
searchProperties
.
engine
}
was
not
found
)
;
}
}
let
{
tab
where
}
=
getTarget
(
{
tabId
:
searchProperties
.
tabId
disposition
:
searchProperties
.
disposition
defaultDisposition
:
"
NEW_TAB
"
}
)
;
await
SearchUIUtils
.
loadSearchFromExtension
(
{
window
:
windowTracker
.
topWindow
query
:
searchProperties
.
query
where
engine
tab
triggeringPrincipal
:
context
.
principal
}
)
;
}
async
query
(
queryProperties
)
{
await
Services
.
search
.
promiseInitialized
;
let
{
tab
where
}
=
getTarget
(
{
tabId
:
queryProperties
.
tabId
disposition
:
queryProperties
.
disposition
defaultDisposition
:
"
CURRENT_TAB
"
}
)
;
await
SearchUIUtils
.
loadSearchFromExtension
(
{
window
:
windowTracker
.
topWindow
query
:
queryProperties
.
text
where
tab
triggeringPrincipal
:
context
.
principal
}
)
;
}
}
}
;
}
}
;
