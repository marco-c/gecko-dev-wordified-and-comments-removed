"
use
strict
"
;
const
{
AddonStudies
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
normandy
/
lib
/
AddonStudies
.
jsm
"
)
;
const
{
ClientID
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ClientID
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
this
.
normandyAddonStudy
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
let
{
extension
}
=
context
;
return
{
normandyAddonStudy
:
{
async
getStudy
(
)
{
const
studies
=
await
AddonStudies
.
getAll
(
)
;
return
studies
.
find
(
study
=
>
study
.
addonId
=
=
=
extension
.
id
)
;
}
async
endStudy
(
reason
)
{
const
study
=
await
this
.
getStudy
(
)
;
await
AddonStudies
.
markAsEnded
(
study
reason
)
;
const
addon
=
await
AddonManager
.
getAddonByID
(
study
.
addonId
)
;
if
(
addon
)
{
await
addon
.
uninstall
(
)
;
}
}
async
getClientMetadata
(
)
{
return
{
updateChannel
:
Services
.
appinfo
.
defaultUpdateChannel
fxVersion
:
Services
.
appinfo
.
version
clientID
:
await
ClientID
.
getClientID
(
)
}
;
}
onUnenroll
:
new
EventManager
(
{
context
name
:
"
normandyAddonStudy
.
onUnenroll
"
register
:
fire
=
>
{
const
listener
=
async
reason
=
>
{
await
fire
.
async
(
reason
)
;
}
;
AddonStudies
.
addUnenrollListener
(
extension
.
id
listener
)
;
return
(
)
=
>
{
AddonStudies
.
removeUnenrollListener
(
extension
.
id
listener
)
;
}
;
}
}
)
.
api
(
)
}
}
;
}
}
;
