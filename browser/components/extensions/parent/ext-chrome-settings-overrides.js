"
use
strict
"
;
var
{
ExtensionPreferencesManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionPreferencesManager
.
jsm
"
)
;
var
{
ExtensionParent
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionPermissions
"
"
resource
:
/
/
gre
/
modules
/
ExtensionPermissions
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionSettingsStore
"
"
resource
:
/
/
gre
/
modules
/
ExtensionSettingsStore
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionControlledPopup
"
"
resource
:
/
/
/
modules
/
ExtensionControlledPopup
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
HomePage
"
"
resource
:
/
/
/
modules
/
HomePage
.
jsm
"
)
;
const
DEFAULT_SEARCH_STORE_TYPE
=
"
default_search
"
;
const
DEFAULT_SEARCH_SETTING_NAME
=
"
defaultSearch
"
;
const
HOMEPAGE_PREF
=
"
browser
.
startup
.
homepage
"
;
const
HOMEPAGE_PRIVATE_ALLOWED
=
"
browser
.
startup
.
homepage_override
.
privateAllowed
"
;
const
HOMEPAGE_EXTENSION_CONTROLLED
=
"
browser
.
startup
.
homepage_override
.
extensionControlled
"
;
const
HOMEPAGE_CONFIRMED_TYPE
=
"
homepageNotification
"
;
const
HOMEPAGE_SETTING_TYPE
=
"
prefs
"
;
const
HOMEPAGE_SETTING_NAME
=
"
homepage_override
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
homepagePopup
"
(
)
=
>
{
return
new
ExtensionControlledPopup
(
{
confirmedType
:
HOMEPAGE_CONFIRMED_TYPE
observerTopic
:
"
browser
-
open
-
homepage
-
start
"
popupnotificationId
:
"
extension
-
homepage
-
notification
"
settingType
:
HOMEPAGE_SETTING_TYPE
settingKey
:
HOMEPAGE_SETTING_NAME
descriptionId
:
"
extension
-
homepage
-
notification
-
description
"
descriptionMessageId
:
"
homepageControlled
.
message
"
learnMoreMessageId
:
"
homepageControlled
.
learnMore
"
learnMoreLink
:
"
extension
-
home
"
preferencesLocation
:
"
home
-
homeOverride
"
preferencesEntrypoint
:
"
addon
-
manage
-
home
-
override
"
async
beforeDisableAddon
(
popup
win
)
{
let
gBrowser
=
win
.
gBrowser
;
let
tab
=
gBrowser
.
selectedTab
;
await
replaceUrlInTab
(
gBrowser
tab
"
about
:
blank
"
)
;
Services
.
prefs
.
addObserver
(
HOMEPAGE_PREF
async
function
prefObserver
(
)
{
Services
.
prefs
.
removeObserver
(
HOMEPAGE_PREF
prefObserver
)
;
let
loaded
=
waitForTabLoaded
(
tab
)
;
win
.
BrowserHome
(
)
;
await
loaded
;
popup
.
open
(
)
;
}
)
;
}
}
)
;
}
)
;
async
function
handleInitialHomepagePopup
(
extensionId
homepageUrl
)
{
if
(
Services
.
prefs
.
getIntPref
(
"
browser
.
startup
.
page
"
)
=
=
1
&
&
windowTracker
.
topWindow
)
{
let
{
gBrowser
}
=
windowTracker
.
topWindow
;
let
tab
=
gBrowser
.
selectedTab
;
let
currentUrl
=
gBrowser
.
currentURI
.
spec
;
if
(
currentUrl
!
=
homepageUrl
&
&
currentUrl
=
=
"
about
:
blank
"
)
{
await
waitForTabLoaded
(
tab
)
;
currentUrl
=
gBrowser
.
currentURI
.
spec
;
}
if
(
currentUrl
=
=
homepageUrl
&
&
gBrowser
.
selectedTab
=
=
tab
)
{
homepagePopup
.
open
(
)
;
return
;
}
}
homepagePopup
.
addObserver
(
extensionId
)
;
}
async
function
handleHomepageUrl
(
extension
homepageUrl
)
{
let
inControl
=
await
ExtensionPreferencesManager
.
setSetting
(
extension
.
id
"
homepage_override
"
homepageUrl
)
;
if
(
inControl
)
{
Services
.
prefs
.
setBoolPref
(
HOMEPAGE_PRIVATE_ALLOWED
extension
.
privateBrowsingAllowed
)
;
Services
.
prefs
.
setBoolPref
(
HOMEPAGE_EXTENSION_CONTROLLED
true
)
;
if
(
extension
.
startupReason
=
=
"
APP_STARTUP
"
)
{
handleInitialHomepagePopup
(
extension
.
id
homepageUrl
)
;
}
else
{
homepagePopup
.
addObserver
(
extension
.
id
)
;
}
}
extension
.
on
(
"
add
-
permissions
"
async
(
ignoreEvent
permissions
)
=
>
{
if
(
permissions
.
permissions
.
includes
(
"
internal
:
privateBrowsingAllowed
"
)
)
{
let
item
=
await
ExtensionPreferencesManager
.
getSetting
(
"
homepage_override
"
)
;
if
(
item
&
&
item
.
id
=
=
extension
.
id
)
{
Services
.
prefs
.
setBoolPref
(
HOMEPAGE_PRIVATE_ALLOWED
true
)
;
}
}
}
)
;
extension
.
on
(
"
remove
-
permissions
"
async
(
ignoreEvent
permissions
)
=
>
{
if
(
permissions
.
permissions
.
includes
(
"
internal
:
privateBrowsingAllowed
"
)
)
{
let
item
=
await
ExtensionPreferencesManager
.
getSetting
(
"
homepage_override
"
)
;
if
(
item
&
&
item
.
id
=
=
extension
.
id
)
{
Services
.
prefs
.
setBoolPref
(
HOMEPAGE_PRIVATE_ALLOWED
false
)
;
}
}
}
)
;
}
var
pendingSearchSetupTasks
=
new
Map
(
)
;
this
.
chrome_settings_overrides
=
class
extends
ExtensionAPI
{
static
async
processDefaultSearchSetting
(
action
id
)
{
await
ExtensionSettingsStore
.
initialize
(
)
;
let
item
=
ExtensionSettingsStore
.
getSetting
(
DEFAULT_SEARCH_STORE_TYPE
DEFAULT_SEARCH_SETTING_NAME
id
)
;
if
(
!
item
)
{
return
;
}
let
control
=
await
ExtensionSettingsStore
.
getLevelOfControl
(
id
DEFAULT_SEARCH_STORE_TYPE
DEFAULT_SEARCH_SETTING_NAME
)
;
item
=
ExtensionSettingsStore
[
action
]
(
id
DEFAULT_SEARCH_STORE_TYPE
DEFAULT_SEARCH_SETTING_NAME
)
;
if
(
item
&
&
control
=
=
"
controlled_by_this_extension
"
)
{
try
{
let
engine
=
Services
.
search
.
getEngineByName
(
item
.
value
|
|
item
.
initialValue
)
;
if
(
engine
)
{
Services
.
search
.
defaultEngine
=
engine
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
static
async
removeEngine
(
id
)
{
try
{
await
Services
.
search
.
removeWebExtensionEngine
(
id
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
static
removeSearchSettings
(
id
)
{
return
Promise
.
all
(
[
this
.
processDefaultSearchSetting
(
"
removeSetting
"
id
)
this
.
removeEngine
(
id
)
]
)
;
}
static
async
onUninstall
(
id
)
{
let
searchStartupPromise
=
pendingSearchSetupTasks
.
get
(
id
)
;
if
(
searchStartupPromise
)
{
await
searchStartupPromise
.
catch
(
Cu
.
reportError
)
;
}
return
Promise
.
all
(
[
this
.
removeSearchSettings
(
id
)
homepagePopup
.
clearConfirmation
(
id
)
]
)
;
}
static
async
onUpdate
(
id
manifest
)
{
if
(
!
manifest
?
.
chrome_settings_overrides
?
.
homepage
)
{
ExtensionPreferencesManager
.
removeSetting
(
id
"
homepage_override
"
)
;
}
let
search_provider
=
manifest
?
.
chrome_settings_overrides
?
.
search_provider
;
if
(
!
search_provider
)
{
this
.
removeSearchSettings
(
id
)
;
}
else
if
(
!
search_provider
.
is_default
)
{
chrome_settings_overrides
.
processDefaultSearchSetting
(
"
removeSetting
"
id
)
;
}
}
static
async
onDisable
(
id
)
{
homepagePopup
.
clearConfirmation
(
id
)
;
await
chrome_settings_overrides
.
processDefaultSearchSetting
(
"
disable
"
id
)
;
await
chrome_settings_overrides
.
removeEngine
(
id
)
;
}
async
onManifestEntry
(
entryName
)
{
let
{
extension
}
=
this
;
let
{
manifest
}
=
extension
;
let
homepageUrl
=
manifest
.
chrome_settings_overrides
.
homepage
;
if
(
homepageUrl
)
{
const
ignoreHomePageUrl
=
await
HomePage
.
shouldIgnore
(
homepageUrl
)
;
if
(
ignoreHomePageUrl
)
{
Services
.
telemetry
.
recordEvent
(
"
homepage
"
"
preference
"
"
ignore
"
"
set_blocked_extension
"
{
webExtensionId
:
extension
.
id
}
)
;
}
else
{
await
handleHomepageUrl
(
extension
homepageUrl
)
;
}
}
if
(
manifest
.
chrome_settings_overrides
.
search_provider
)
{
let
searchStartupPromise
=
this
.
processSearchProviderManifestEntry
(
)
.
finally
(
(
)
=
>
{
if
(
pendingSearchSetupTasks
.
get
(
extension
.
id
)
=
=
=
searchStartupPromise
)
{
pendingSearchSetupTasks
.
delete
(
extension
.
id
)
;
ExtensionParent
.
apiManager
.
emit
(
"
searchEngineProcessed
"
extension
)
;
}
}
)
;
pendingSearchSetupTasks
.
set
(
extension
.
id
searchStartupPromise
)
;
}
}
async
ensureSetting
(
engineName
disable
=
false
)
{
let
{
extension
}
=
this
;
await
ExtensionSettingsStore
.
initialize
(
)
;
let
item
=
ExtensionSettingsStore
.
getSetting
(
DEFAULT_SEARCH_STORE_TYPE
DEFAULT_SEARCH_SETTING_NAME
extension
.
id
)
;
if
(
!
item
)
{
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
item
=
await
ExtensionSettingsStore
.
addSetting
(
extension
.
id
DEFAULT_SEARCH_STORE_TYPE
DEFAULT_SEARCH_SETTING_NAME
engineName
(
)
=
>
defaultEngine
.
name
)
;
disable
=
disable
|
|
[
"
ADDON_UPGRADE
"
"
ADDON_DOWNGRADE
"
"
ADDON_ENABLE
"
]
.
includes
(
extension
.
startupReason
)
;
}
if
(
disable
&
&
item
?
.
enabled
!
=
=
false
)
{
item
=
await
ExtensionSettingsStore
.
disable
(
extension
.
id
DEFAULT_SEARCH_STORE_TYPE
DEFAULT_SEARCH_SETTING_NAME
)
;
}
return
item
;
}
async
promptDefaultSearch
(
engineName
)
{
let
{
extension
}
=
this
;
let
engine
=
Services
.
search
.
getEngineByName
(
engineName
)
;
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
if
(
defaultEngine
.
name
=
=
engine
.
name
)
{
return
;
}
await
this
.
ensureSetting
(
engineName
true
)
;
let
subject
=
{
wrappedJSObject
:
{
browser
:
windowTracker
.
topWindow
?
.
gBrowser
.
selectedBrowser
id
:
extension
.
id
name
:
extension
.
name
icon
:
extension
.
iconURL
currentEngine
:
defaultEngine
.
name
newEngine
:
engineName
async
respond
(
allow
)
{
if
(
allow
)
{
await
chrome_settings_overrides
.
processDefaultSearchSetting
(
"
enable
"
extension
.
id
)
;
Services
.
search
.
defaultEngine
=
Services
.
search
.
getEngineByName
(
engineName
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
webextension
-
defaultsearch
-
prompt
-
response
"
)
;
}
}
}
;
Services
.
obs
.
notifyObservers
(
subject
"
webextension
-
defaultsearch
-
prompt
"
)
;
}
async
processSearchProviderManifestEntry
(
)
{
let
{
extension
}
=
this
;
let
{
manifest
}
=
extension
;
let
searchProvider
=
manifest
.
chrome_settings_overrides
.
search_provider
;
if
(
!
searchProvider
.
is_default
)
{
await
this
.
addSearchEngine
(
)
;
return
;
}
await
searchInitialized
;
if
(
!
this
.
extension
)
{
Cu
.
reportError
(
Extension
shut
down
before
search
provider
was
registered
)
;
return
;
}
let
engineName
=
searchProvider
.
name
.
trim
(
)
;
let
result
=
await
Services
.
search
.
maybeSetAndOverrideDefault
(
extension
)
;
if
(
result
.
canChangeToAppProvided
)
{
await
this
.
setDefault
(
engineName
true
)
;
}
if
(
!
result
.
canInstallEngine
)
{
return
;
}
await
this
.
addSearchEngine
(
)
;
if
(
extension
.
startupReason
=
=
=
"
ADDON_INSTALL
"
)
{
await
this
.
promptDefaultSearch
(
engineName
)
;
}
else
{
await
this
.
setDefault
(
engineName
)
;
}
}
async
setDefault
(
engineName
skipEnablePrompt
=
false
)
{
let
{
extension
}
=
this
;
if
(
extension
.
startupReason
=
=
=
"
ADDON_INSTALL
"
)
{
let
item
=
await
this
.
ensureSetting
(
engineName
)
;
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
item
.
value
)
)
;
}
else
if
(
[
"
ADDON_UPGRADE
"
"
ADDON_DOWNGRADE
"
"
ADDON_ENABLE
"
]
.
includes
(
extension
.
startupReason
)
)
{
let
control
=
await
ExtensionSettingsStore
.
getLevelOfControl
(
extension
.
id
DEFAULT_SEARCH_STORE_TYPE
DEFAULT_SEARCH_SETTING_NAME
)
;
if
(
control
=
=
=
"
controlled_by_this_extension
"
)
{
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
engineName
)
)
;
}
else
if
(
control
=
=
=
"
controllable_by_this_extension
"
)
{
if
(
skipEnablePrompt
)
{
await
chrome_settings_overrides
.
processDefaultSearchSetting
(
"
enable
"
extension
.
id
)
;
Services
.
search
.
defaultEngine
=
Services
.
search
.
getEngineByName
(
engineName
)
;
}
else
if
(
extension
.
startupReason
=
=
"
ADDON_ENABLE
"
)
{
await
this
.
promptDefaultSearch
(
engineName
)
;
}
}
}
}
async
addSearchEngine
(
)
{
let
{
extension
}
=
this
;
try
{
await
Services
.
search
.
addEnginesFromExtension
(
extension
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
return
false
;
}
return
true
;
}
}
;
ExtensionPreferencesManager
.
addSetting
(
"
homepage_override
"
{
prefNames
:
[
HOMEPAGE_PREF
HOMEPAGE_EXTENSION_CONTROLLED
HOMEPAGE_PRIVATE_ALLOWED
]
async
onPrefsChanged
(
item
)
{
if
(
item
.
id
)
{
homepagePopup
.
addObserver
(
item
.
id
)
;
let
policy
=
ExtensionParent
.
WebExtensionPolicy
.
getByID
(
item
.
id
)
;
let
allowed
=
policy
&
&
policy
.
privateBrowsingAllowed
;
if
(
!
policy
)
{
let
perms
=
await
ExtensionPermissions
.
get
(
item
.
id
)
;
allowed
=
perms
.
permissions
.
includes
(
"
internal
:
privateBrowsingAllowed
"
)
;
}
Services
.
prefs
.
setBoolPref
(
HOMEPAGE_PRIVATE_ALLOWED
allowed
)
;
Services
.
prefs
.
setBoolPref
(
HOMEPAGE_EXTENSION_CONTROLLED
true
)
;
}
else
{
homepagePopup
.
removeObserver
(
)
;
Services
.
prefs
.
clearUserPref
(
HOMEPAGE_PRIVATE_ALLOWED
)
;
Services
.
prefs
.
clearUserPref
(
HOMEPAGE_EXTENSION_CONTROLLED
)
;
}
}
setCallback
(
value
)
{
return
{
[
HOMEPAGE_PREF
]
:
value
[
HOMEPAGE_EXTENSION_CONTROLLED
]
:
!
!
value
[
HOMEPAGE_PRIVATE_ALLOWED
]
:
false
}
;
}
}
)
;
