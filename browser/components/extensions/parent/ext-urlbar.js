"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarContextualTip
:
"
resource
:
/
/
/
modules
/
UrlbarContextualTip
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProviderExtension
:
"
resource
:
/
/
/
modules
/
UrlbarProviderExtension
.
jsm
"
}
)
;
var
{
ExtensionPreferencesManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionPreferencesManager
.
jsm
"
)
;
var
{
getSettingsAPI
}
=
ExtensionPreferencesManager
;
ExtensionPreferencesManager
.
addSetting
(
"
openViewOnFocus
"
{
prefNames
:
[
"
browser
.
urlbar
.
openViewOnFocus
"
]
setCallback
(
value
)
{
return
{
[
this
.
prefNames
[
0
]
]
:
value
}
;
}
}
)
;
ExtensionPreferencesManager
.
addSetting
(
"
engagementTelemetry
"
{
prefNames
:
[
"
browser
.
urlbar
.
eventTelemetry
.
enabled
"
]
setCallback
(
value
)
{
return
{
[
this
.
prefNames
[
0
]
]
:
value
}
;
}
}
)
;
let
idOfExtUsingContextualTip
=
null
;
this
.
urlbar
=
class
extends
ExtensionAPI
{
onShutdown
(
)
{
if
(
idOfExtUsingContextualTip
=
=
=
this
.
extension
.
id
)
{
for
(
let
w
of
windowTracker
.
browserWindows
(
)
)
{
w
.
gURLBar
.
view
.
removeContextualTip
(
)
;
}
idOfExtUsingContextualTip
=
null
;
}
}
_registerExtensionToUseContextualTip
(
)
{
if
(
idOfExtUsingContextualTip
=
=
null
)
{
idOfExtUsingContextualTip
=
this
.
extension
.
id
;
}
if
(
idOfExtUsingContextualTip
!
=
=
this
.
extension
.
id
)
{
throw
new
Error
(
"
There
was
an
attempt
to
use
the
contextual
tip
API
but
"
+
"
another
extension
is
already
using
the
contextual
tip
API
.
"
)
;
}
}
_registerClickListener
(
type
)
{
return
fire
=
>
{
this
.
_registerExtensionToUseContextualTip
(
)
;
const
listener
=
window
=
>
{
const
windowId
=
this
.
extension
.
windowManager
.
wrapWindow
(
window
)
.
id
;
fire
.
async
(
windowId
)
;
}
;
UrlbarContextualTip
.
addClickListener
(
type
listener
)
;
return
(
)
=
>
{
UrlbarContextualTip
.
removeClickListener
(
type
listener
)
;
}
;
}
;
}
getAPI
(
context
)
{
return
{
urlbar
:
{
onBehaviorRequested
:
new
EventManager
(
{
context
name
:
"
urlbar
.
onBehaviorRequested
"
register
:
(
fire
providerName
)
=
>
{
let
provider
=
UrlbarProviderExtension
.
getOrCreate
(
providerName
)
;
provider
.
setEventListener
(
"
behaviorRequested
"
async
queryContext
=
>
{
if
(
queryContext
.
isPrivate
&
&
!
context
.
privateBrowsingAllowed
)
{
return
"
inactive
"
;
}
return
fire
.
async
(
queryContext
)
.
catch
(
error
=
>
{
throw
context
.
normalizeError
(
error
)
;
}
)
;
}
)
;
return
(
)
=
>
provider
.
setEventListener
(
"
behaviorRequested
"
null
)
;
}
}
)
.
api
(
)
onQueryCanceled
:
new
EventManager
(
{
context
name
:
"
urlbar
.
onQueryCanceled
"
register
:
(
fire
providerName
)
=
>
{
let
provider
=
UrlbarProviderExtension
.
getOrCreate
(
providerName
)
;
provider
.
setEventListener
(
"
queryCanceled
"
async
queryContext
=
>
{
if
(
queryContext
.
isPrivate
&
&
!
context
.
privateBrowsingAllowed
)
{
return
;
}
await
fire
.
async
(
queryContext
)
.
catch
(
error
=
>
{
throw
context
.
normalizeError
(
error
)
;
}
)
;
}
)
;
return
(
)
=
>
provider
.
setEventListener
(
"
queryCanceled
"
null
)
;
}
}
)
.
api
(
)
onResultsRequested
:
new
EventManager
(
{
context
name
:
"
urlbar
.
onResultsRequested
"
register
:
(
fire
providerName
)
=
>
{
let
provider
=
UrlbarProviderExtension
.
getOrCreate
(
providerName
)
;
provider
.
setEventListener
(
"
resultsRequested
"
async
queryContext
=
>
{
if
(
queryContext
.
isPrivate
&
&
!
context
.
privateBrowsingAllowed
)
{
return
[
]
;
}
return
fire
.
async
(
queryContext
)
.
catch
(
error
=
>
{
throw
context
.
normalizeError
(
error
)
;
}
)
;
}
)
;
return
(
)
=
>
provider
.
setEventListener
(
"
resultsRequested
"
null
)
;
}
}
)
.
api
(
)
openViewOnFocus
:
getSettingsAPI
(
context
.
extension
.
id
"
openViewOnFocus
"
(
)
=
>
UrlbarPrefs
.
get
(
"
openViewOnFocus
"
)
)
engagementTelemetry
:
getSettingsAPI
(
context
.
extension
.
id
"
engagementTelemetry
"
(
)
=
>
UrlbarPrefs
.
get
(
"
eventTelemetry
.
enabled
"
)
)
contextualTip
:
{
set
:
details
=
>
{
this
.
_registerExtensionToUseContextualTip
(
)
;
const
mostRecentWindow
=
windowTracker
.
getTopNormalWindow
(
context
)
;
mostRecentWindow
.
gURLBar
.
view
.
setContextualTip
(
details
)
;
}
remove
:
(
)
=
>
{
this
.
_registerExtensionToUseContextualTip
(
)
;
const
mostRecentWindow
=
windowTracker
.
getTopNormalWindow
(
context
)
;
mostRecentWindow
.
gURLBar
.
view
.
hideContextualTip
(
)
;
}
onButtonClicked
:
new
EventManager
(
{
context
name
:
"
urlbar
.
contextualTip
.
onButtonClicked
"
register
:
this
.
_registerClickListener
(
"
button
"
)
}
)
.
api
(
)
onLinkClicked
:
new
EventManager
(
{
context
name
:
"
urlbar
.
contextualTip
.
onLinkClicked
"
register
:
this
.
_registerClickListener
(
"
link
"
)
}
)
.
api
(
)
}
}
}
;
}
}
;
