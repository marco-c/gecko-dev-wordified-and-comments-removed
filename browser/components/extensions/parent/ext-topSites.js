"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
sys
.
mjs
"
NewTabUtils
:
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
sys
.
mjs
"
getSearchProvider
:
"
resource
:
/
/
activity
-
stream
/
lib
/
SearchShortcuts
.
sys
.
mjs
"
shortURL
:
"
resource
:
/
/
activity
-
stream
/
lib
/
ShortURL
.
sys
.
mjs
"
}
)
;
const
SHORTCUTS_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
improvesearch
.
topSiteSearchShortcuts
"
;
const
TOPSITES_FEED_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topsites
"
;
this
.
topSites
=
class
extends
ExtensionAPI
{
getAPI
(
)
{
return
{
topSites
:
{
get
:
async
function
(
options
)
{
let
getNewtabSites
=
options
.
newtab
&
&
Services
.
prefs
.
getBoolPref
(
TOPSITES_FEED_PREF
false
)
;
let
links
=
getNewtabSites
?
AboutNewTab
.
getTopSites
(
)
:
await
NewTabUtils
.
activityStreamLinks
.
getTopSites
(
{
ignoreBlocked
:
options
.
includeBlocked
onePerDomain
:
options
.
onePerDomain
numItems
:
options
.
limit
includeFavicon
:
options
.
includeFavicon
}
)
;
if
(
options
.
includePinned
&
&
!
getNewtabSites
)
{
let
pinnedLinks
=
NewTabUtils
.
pinnedLinks
.
links
;
if
(
options
.
includeFavicon
)
{
pinnedLinks
=
NewTabUtils
.
activityStreamProvider
.
_faviconBytesToDataURI
(
await
NewTabUtils
.
activityStreamProvider
.
_addFavicons
(
pinnedLinks
)
)
;
}
pinnedLinks
.
forEach
(
(
pinnedLink
index
)
=
>
{
if
(
pinnedLink
&
&
(
!
pinnedLink
.
searchTopSite
|
|
options
.
includeSearchShortcuts
)
)
{
links
=
links
.
filter
(
link
=
>
link
.
url
!
=
pinnedLink
.
url
&
&
(
!
options
.
onePerDomain
|
|
NewTabUtils
.
extractSite
(
link
.
url
)
!
=
pinnedLink
.
baseDomain
)
)
;
links
.
splice
(
index
0
pinnedLink
)
;
}
}
)
;
}
if
(
options
.
includeSearchShortcuts
&
&
Services
.
prefs
.
getBoolPref
(
SHORTCUTS_PREF
false
)
&
&
!
getNewtabSites
)
{
links
=
links
.
map
(
link
=
>
{
let
searchProvider
=
getSearchProvider
(
shortURL
(
link
)
)
;
if
(
searchProvider
)
{
link
.
searchTopSite
=
true
;
link
.
label
=
searchProvider
.
keyword
;
link
.
url
=
searchProvider
.
url
;
}
return
link
;
}
)
;
}
if
(
typeof
options
.
limit
=
=
"
number
"
)
{
links
=
links
.
slice
(
0
options
.
limit
)
;
}
const
makeDataURI
=
url
=
>
url
&
&
ExtensionUtils
.
makeDataURI
(
url
)
;
return
Promise
.
all
(
links
.
map
(
async
link
=
>
(
{
type
:
link
.
searchTopSite
?
"
search
"
:
"
url
"
url
:
link
.
url
title
:
link
.
label
|
|
link
.
title
|
|
link
.
hostname
|
|
"
"
favicon
:
options
.
includeFavicon
?
link
.
favicon
|
|
(
await
makeDataURI
(
link
.
tippyTopIcon
)
)
|
|
null
:
null
}
)
)
)
;
}
}
}
;
}
}
;
