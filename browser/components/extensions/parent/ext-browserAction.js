"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
clearTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionTelemetry
"
"
resource
:
/
/
gre
/
modules
/
ExtensionTelemetry
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ViewPopup
"
"
resource
:
/
/
/
modules
/
ExtensionPopups
.
jsm
"
)
;
var
{
DefaultWeakMap
ExtensionError
}
=
ExtensionUtils
;
var
{
ExtensionParent
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
)
;
var
{
IconDetails
StartupCache
}
=
ExtensionParent
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
InspectorUtils
"
]
)
;
const
POPUP_PRELOAD_TIMEOUT_MS
=
200
;
const
browserActionMap
=
new
WeakMap
(
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
browserAreas
"
(
)
=
>
{
return
{
"
navbar
"
:
CustomizableUI
.
AREA_NAVBAR
"
menupanel
"
:
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
"
tabstrip
"
:
CustomizableUI
.
AREA_TABSTRIP
"
personaltoolbar
"
:
CustomizableUI
.
AREA_BOOKMARKS
}
;
}
)
;
this
.
browserAction
=
class
extends
ExtensionAPI
{
static
for
(
extension
)
{
return
browserActionMap
.
get
(
extension
)
;
}
async
onManifestEntry
(
entryName
)
{
let
{
extension
}
=
this
;
let
options
=
extension
.
manifest
.
browser_action
;
this
.
iconData
=
new
DefaultWeakMap
(
icons
=
>
this
.
getIconData
(
icons
)
)
;
let
widgetId
=
makeWidgetId
(
extension
.
id
)
;
this
.
id
=
{
widgetId
}
-
browser
-
action
;
this
.
viewId
=
PanelUI
-
webext
-
{
widgetId
}
-
browser
-
action
-
view
;
this
.
widget
=
null
;
this
.
pendingPopup
=
null
;
this
.
pendingPopupTimeout
=
null
;
this
.
eventQueue
=
[
]
;
this
.
tabManager
=
extension
.
tabManager
;
this
.
defaults
=
{
enabled
:
true
title
:
options
.
default_title
|
|
extension
.
name
badgeText
:
"
"
badgeBackgroundColor
:
[
0xd9
0
0
255
]
badgeDefaultColor
:
[
255
255
255
255
]
badgeTextColor
:
null
popup
:
options
.
default_popup
|
|
"
"
area
:
browserAreas
[
options
.
default_area
|
|
"
navbar
"
]
}
;
this
.
globals
=
Object
.
create
(
this
.
defaults
)
;
this
.
browserStyle
=
options
.
browser_style
;
browserActionMap
.
set
(
extension
this
)
;
this
.
defaults
.
icon
=
await
StartupCache
.
get
(
extension
[
"
browserAction
"
"
default_icon
"
]
(
)
=
>
IconDetails
.
normalize
(
{
path
:
options
.
default_icon
|
|
extension
.
manifest
.
icons
iconType
:
"
browserAction
"
themeIcons
:
options
.
theme_icons
}
extension
)
)
;
this
.
iconData
.
set
(
this
.
defaults
.
icon
await
StartupCache
.
get
(
extension
[
"
browserAction
"
"
default_icon_data
"
]
(
)
=
>
this
.
getIconData
(
this
.
defaults
.
icon
)
)
)
;
this
.
tabContext
=
new
TabContext
(
target
=
>
{
let
window
=
target
.
ownerGlobal
;
if
(
target
=
=
=
window
)
{
return
this
.
globals
;
}
return
this
.
tabContext
.
get
(
window
)
;
}
)
;
this
.
tabContext
.
on
(
"
location
-
change
"
this
.
handleLocationChange
.
bind
(
this
)
)
;
this
.
build
(
)
;
}
handleLocationChange
(
eventType
tab
fromBrowse
)
{
if
(
fromBrowse
)
{
this
.
tabContext
.
clear
(
tab
)
;
this
.
updateOnChange
(
tab
)
;
}
}
onShutdown
(
)
{
browserActionMap
.
delete
(
this
.
extension
)
;
this
.
tabContext
.
shutdown
(
)
;
CustomizableUI
.
destroyWidget
(
this
.
id
)
;
this
.
clearPopup
(
)
;
}
build
(
)
{
let
widget
=
CustomizableUI
.
createWidget
(
{
id
:
this
.
id
viewId
:
this
.
viewId
type
:
"
view
"
removable
:
true
label
:
this
.
defaults
.
title
|
|
this
.
extension
.
name
tooltiptext
:
this
.
defaults
.
title
|
|
"
"
defaultArea
:
this
.
defaults
.
area
showInPrivateBrowsing
:
this
.
extension
.
privateBrowsingAllowed
localized
:
false
onBeforeCreated
:
document
=
>
{
let
view
=
document
.
createXULElement
(
"
panelview
"
)
;
view
.
id
=
this
.
viewId
;
view
.
setAttribute
(
"
flex
"
"
1
"
)
;
view
.
setAttribute
(
"
extension
"
true
)
;
document
.
getElementById
(
"
appMenu
-
viewCache
"
)
.
appendChild
(
view
)
;
if
(
this
.
extension
.
hasPermission
(
"
menus
"
)
|
|
this
.
extension
.
hasPermission
(
"
contextMenus
"
)
)
{
document
.
addEventListener
(
"
popupshowing
"
this
)
;
}
}
onDestroyed
:
document
=
>
{
document
.
removeEventListener
(
"
popupshowing
"
this
)
;
let
view
=
document
.
getElementById
(
this
.
viewId
)
;
if
(
view
)
{
this
.
clearPopup
(
)
;
CustomizableUI
.
hidePanelForNode
(
view
)
;
view
.
remove
(
)
;
}
}
onCreated
:
node
=
>
{
node
.
classList
.
add
(
"
webextension
-
browser
-
action
"
)
;
node
.
setAttribute
(
"
badged
"
"
true
"
)
;
node
.
setAttribute
(
"
constrain
-
size
"
"
true
"
)
;
node
.
setAttribute
(
"
data
-
extensionid
"
this
.
extension
.
id
)
;
node
.
onmousedown
=
event
=
>
this
.
handleEvent
(
event
)
;
node
.
onmouseover
=
event
=
>
this
.
handleEvent
(
event
)
;
node
.
onmouseout
=
event
=
>
this
.
handleEvent
(
event
)
;
this
.
updateButton
(
node
this
.
globals
true
)
;
}
onViewShowing
:
async
event
=
>
{
const
{
extension
}
=
this
;
ExtensionTelemetry
.
browserActionPopupOpen
.
stopwatchStart
(
extension
this
)
;
let
document
=
event
.
target
.
ownerDocument
;
let
tabbrowser
=
document
.
defaultView
.
gBrowser
;
let
tab
=
tabbrowser
.
selectedTab
;
let
popupURL
=
this
.
getProperty
(
tab
"
popup
"
)
;
this
.
tabManager
.
addActiveTabPermission
(
tab
)
;
if
(
popupURL
)
{
try
{
let
popup
=
this
.
getPopup
(
document
.
defaultView
popupURL
)
;
let
attachPromise
=
popup
.
attach
(
event
.
target
)
;
event
.
detail
.
addBlocker
(
attachPromise
)
;
await
attachPromise
;
ExtensionTelemetry
.
browserActionPopupOpen
.
stopwatchFinish
(
extension
this
)
;
if
(
this
.
eventQueue
.
length
)
{
ExtensionTelemetry
.
browserActionPreloadResult
.
histogramAdd
(
{
category
:
"
popupShown
"
extension
}
)
;
this
.
eventQueue
=
[
]
;
}
}
catch
(
e
)
{
ExtensionTelemetry
.
browserActionPopupOpen
.
stopwatchCancel
(
extension
this
)
;
Cu
.
reportError
(
e
)
;
event
.
preventDefault
(
)
;
}
}
else
{
ExtensionTelemetry
.
browserActionPopupOpen
.
stopwatchCancel
(
extension
this
)
;
event
.
preventDefault
(
)
;
this
.
emit
(
"
click
"
tabbrowser
.
selectedBrowser
)
;
CustomizableUI
.
hidePanelForNode
(
event
.
target
)
;
}
}
}
)
;
this
.
tabContext
.
on
(
"
tab
-
select
"
(
evt
tab
)
=
>
{
this
.
updateWindow
(
tab
.
ownerGlobal
)
;
}
)
;
this
.
widget
=
widget
;
}
async
triggerAction
(
window
)
{
let
popup
=
ViewPopup
.
for
(
this
.
extension
window
)
;
if
(
popup
)
{
popup
.
closePopup
(
)
;
return
;
}
let
widget
=
this
.
widget
.
forWindow
(
window
)
;
let
tab
=
window
.
gBrowser
.
selectedTab
;
if
(
!
widget
.
node
|
|
!
this
.
getProperty
(
tab
"
enabled
"
)
)
{
return
;
}
if
(
this
.
getProperty
(
tab
"
popup
"
)
)
{
if
(
this
.
widget
.
areaType
=
=
CustomizableUI
.
TYPE_MENU_PANEL
)
{
await
window
.
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
}
let
event
=
new
window
.
CustomEvent
(
"
command
"
{
bubbles
:
true
cancelable
:
true
}
)
;
widget
.
node
.
dispatchEvent
(
event
)
;
}
else
{
this
.
tabManager
.
addActiveTabPermission
(
tab
)
;
this
.
emit
(
"
click
"
)
;
}
}
handleEvent
(
event
)
{
let
button
=
event
.
target
;
let
window
=
button
.
ownerGlobal
;
switch
(
event
.
type
)
{
case
"
mousedown
"
:
if
(
event
.
button
=
=
0
)
{
let
tab
=
window
.
gBrowser
.
selectedTab
;
let
popupURL
=
this
.
getProperty
(
tab
"
popup
"
)
;
let
enabled
=
this
.
getProperty
(
tab
"
enabled
"
)
;
if
(
popupURL
&
&
enabled
&
&
(
this
.
pendingPopup
|
|
!
ViewPopup
.
for
(
this
.
extension
window
)
)
)
{
this
.
eventQueue
.
push
(
"
Mousedown
"
)
;
if
(
!
this
.
tabManager
.
hasActiveTabPermission
(
tab
)
)
{
this
.
tabManager
.
addActiveTabPermission
(
tab
)
;
this
.
tabToRevokeDuringClearPopup
=
tab
;
}
this
.
pendingPopup
=
this
.
getPopup
(
window
popupURL
)
;
window
.
addEventListener
(
"
mouseup
"
this
true
)
;
}
else
{
this
.
clearPopup
(
)
;
}
}
break
;
case
"
mouseup
"
:
if
(
event
.
button
=
=
0
)
{
this
.
clearPopupTimeout
(
)
;
if
(
this
.
pendingPopup
)
{
let
node
=
window
.
gBrowser
&
&
this
.
widget
.
forWindow
(
window
)
.
node
;
if
(
node
&
&
node
.
contains
(
event
.
originalTarget
)
)
{
this
.
pendingPopupTimeout
=
setTimeout
(
(
)
=
>
this
.
clearPopup
(
)
POPUP_PRELOAD_TIMEOUT_MS
)
;
}
else
{
this
.
clearPopup
(
)
;
}
}
}
break
;
case
"
mouseover
"
:
{
let
tab
=
window
.
gBrowser
.
selectedTab
;
let
popupURL
=
this
.
getProperty
(
tab
"
popup
"
)
;
let
enabled
=
this
.
getProperty
(
tab
"
enabled
"
)
;
if
(
popupURL
&
&
enabled
&
&
(
this
.
pendingPopup
|
|
!
ViewPopup
.
for
(
this
.
extension
window
)
)
)
{
this
.
eventQueue
.
push
(
"
Hover
"
)
;
this
.
pendingPopup
=
this
.
getPopup
(
window
popupURL
true
)
;
}
break
;
}
case
"
mouseout
"
:
if
(
this
.
pendingPopup
)
{
if
(
this
.
eventQueue
.
length
)
{
ExtensionTelemetry
.
browserActionPreloadResult
.
histogramAdd
(
{
category
:
clearAfter
{
this
.
eventQueue
.
pop
(
)
}
extension
:
this
.
extension
}
)
;
this
.
eventQueue
=
[
]
;
}
this
.
clearPopup
(
)
;
}
break
;
case
"
popupshowing
"
:
const
menu
=
event
.
target
;
const
trigger
=
menu
.
triggerNode
;
const
node
=
window
.
document
.
getElementById
(
this
.
id
)
;
const
contexts
=
[
"
toolbar
-
context
-
menu
"
"
customizationPanelItemContextMenu
"
]
;
if
(
contexts
.
includes
(
menu
.
id
)
&
&
node
&
&
node
.
contains
(
trigger
)
)
{
global
.
actionContextMenu
(
{
extension
:
this
.
extension
onBrowserAction
:
true
menu
:
menu
}
)
;
}
break
;
}
}
getPopup
(
window
popupURL
blockParser
=
false
)
{
this
.
clearPopupTimeout
(
)
;
let
{
pendingPopup
}
=
this
;
this
.
pendingPopup
=
null
;
if
(
pendingPopup
)
{
if
(
pendingPopup
.
window
=
=
=
window
&
&
pendingPopup
.
popupURL
=
=
=
popupURL
)
{
if
(
!
blockParser
)
{
pendingPopup
.
unblockParser
(
)
;
}
return
pendingPopup
;
}
pendingPopup
.
destroy
(
)
;
}
let
fixedWidth
=
this
.
widget
.
areaType
=
=
CustomizableUI
.
TYPE_MENU_PANEL
|
|
this
.
widget
.
forWindow
(
window
)
.
overflowed
;
return
new
ViewPopup
(
this
.
extension
window
popupURL
this
.
browserStyle
fixedWidth
blockParser
)
;
}
clearPopup
(
)
{
this
.
clearPopupTimeout
(
)
;
if
(
this
.
pendingPopup
)
{
if
(
this
.
tabToRevokeDuringClearPopup
)
{
this
.
tabManager
.
revokeActiveTabPermission
(
this
.
tabToRevokeDuringClearPopup
)
;
}
this
.
pendingPopup
.
destroy
(
)
;
this
.
pendingPopup
=
null
;
}
this
.
tabToRevokeDuringClearPopup
=
null
;
}
clearPopupTimeout
(
)
{
if
(
this
.
pendingPopup
)
{
this
.
pendingPopup
.
window
.
removeEventListener
(
"
mouseup
"
this
true
)
;
}
if
(
this
.
pendingPopupTimeout
)
{
clearTimeout
(
this
.
pendingPopupTimeout
)
;
this
.
pendingPopupTimeout
=
null
;
}
}
updateButton
(
node
tabData
sync
=
false
)
{
let
title
=
tabData
.
title
|
|
this
.
extension
.
name
;
let
callback
=
(
)
=
>
{
node
.
setAttribute
(
"
tooltiptext
"
title
)
;
node
.
setAttribute
(
"
label
"
title
)
;
if
(
tabData
.
badgeText
)
{
node
.
setAttribute
(
"
badge
"
tabData
.
badgeText
)
;
}
else
{
node
.
removeAttribute
(
"
badge
"
)
;
}
if
(
tabData
.
enabled
)
{
node
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
node
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
let
serializeColor
=
(
[
r
g
b
a
]
)
=
>
rgba
(
{
r
}
{
g
}
{
b
}
{
a
/
255
}
)
;
node
.
setAttribute
(
"
badgeStyle
"
[
background
-
color
:
{
serializeColor
(
tabData
.
badgeBackgroundColor
)
}
color
:
{
serializeColor
(
this
.
getTextColor
(
tabData
)
)
}
]
.
join
(
"
;
"
)
)
;
let
style
=
this
.
iconData
.
get
(
tabData
.
icon
)
;
node
.
setAttribute
(
"
style
"
style
)
;
}
;
if
(
sync
)
{
callback
(
)
;
}
else
{
node
.
ownerGlobal
.
requestAnimationFrame
(
callback
)
;
}
}
getIconData
(
icons
)
{
let
getIcon
=
(
icon
theme
)
=
>
{
if
(
typeof
icon
=
=
=
"
object
"
)
{
return
IconDetails
.
escapeUrl
(
icon
[
theme
]
)
;
}
return
IconDetails
.
escapeUrl
(
icon
)
;
}
;
let
getStyle
=
(
name
icon
)
=
>
{
return
-
-
webextension
-
{
name
}
:
url
(
"
{
getIcon
(
icon
"
default
"
)
}
"
)
;
-
-
webextension
-
{
name
}
-
light
:
url
(
"
{
getIcon
(
icon
"
light
"
)
}
"
)
;
-
-
webextension
-
{
name
}
-
dark
:
url
(
"
{
getIcon
(
icon
"
dark
"
)
}
"
)
;
;
}
;
let
icon16
=
IconDetails
.
getPreferredIcon
(
icons
this
.
extension
16
)
.
icon
;
let
icon32
=
IconDetails
.
getPreferredIcon
(
icons
this
.
extension
32
)
.
icon
;
return
{
getStyle
(
"
menupanel
-
image
"
icon16
)
}
{
getStyle
(
"
menupanel
-
image
-
2x
"
icon32
)
}
{
getStyle
(
"
toolbar
-
image
"
icon16
)
}
{
getStyle
(
"
toolbar
-
image
-
2x
"
icon32
)
}
;
}
updateWindow
(
window
)
{
let
node
=
this
.
widget
.
forWindow
(
window
)
.
node
;
if
(
node
)
{
let
tab
=
window
.
gBrowser
.
selectedTab
;
this
.
updateButton
(
node
this
.
tabContext
.
get
(
tab
)
)
;
}
}
updateOnChange
(
target
)
{
if
(
target
)
{
let
window
=
target
.
ownerGlobal
;
if
(
target
=
=
=
window
|
|
target
.
selected
)
{
this
.
updateWindow
(
window
)
;
}
}
else
{
for
(
let
window
of
windowTracker
.
browserWindows
(
)
)
{
this
.
updateWindow
(
window
)
;
}
}
}
getTargetFromDetails
(
{
tabId
windowId
}
)
{
if
(
tabId
!
=
null
&
&
windowId
!
=
null
)
{
throw
new
ExtensionError
(
"
Only
one
of
tabId
and
windowId
can
be
specified
.
"
)
;
}
if
(
tabId
!
=
null
)
{
return
tabTracker
.
getTab
(
tabId
)
;
}
else
if
(
windowId
!
=
null
)
{
return
windowTracker
.
getWindow
(
windowId
)
;
}
return
null
;
}
getContextData
(
target
)
{
if
(
target
)
{
return
this
.
tabContext
.
get
(
target
)
;
}
return
this
.
globals
;
}
setProperty
(
target
prop
value
)
{
let
values
=
this
.
getContextData
(
target
)
;
if
(
value
=
=
=
null
)
{
delete
values
[
prop
]
;
}
else
{
values
[
prop
]
=
value
;
}
this
.
updateOnChange
(
target
)
;
return
values
;
}
getProperty
(
target
prop
)
{
return
this
.
getContextData
(
target
)
[
prop
]
;
}
setPropertyFromDetails
(
details
prop
value
)
{
return
this
.
setProperty
(
this
.
getTargetFromDetails
(
details
)
prop
value
)
;
}
getPropertyFromDetails
(
details
prop
)
{
return
this
.
getProperty
(
this
.
getTargetFromDetails
(
details
)
prop
)
;
}
getTextColor
(
values
)
{
let
{
badgeTextColor
}
=
values
;
if
(
badgeTextColor
)
{
return
badgeTextColor
;
}
let
{
badgeDefaultColor
}
=
values
;
if
(
badgeDefaultColor
)
{
return
badgeDefaultColor
;
}
let
[
r
g
b
]
=
values
.
badgeBackgroundColor
.
slice
(
0
3
)
.
map
(
function
(
channel
)
{
channel
/
=
255
;
if
(
channel
<
=
0
.
03928
)
{
return
channel
/
12
.
92
;
}
return
(
(
channel
+
0
.
055
)
/
1
.
055
)
*
*
2
.
4
;
}
)
;
let
lum
=
0
.
2126
*
r
+
0
.
7152
*
g
+
0
.
0722
*
b
;
let
channel
=
1
.
05
*
0
.
05
<
(
lum
+
0
.
05
)
*
*
2
?
0
:
255
;
let
result
=
[
channel
channel
channel
255
]
;
while
(
!
Object
.
getOwnPropertyDescriptor
(
values
"
badgeDefaultColor
"
)
)
{
values
=
Object
.
getPrototypeOf
(
values
)
;
}
values
.
badgeDefaultColor
=
result
;
return
result
;
}
getAPI
(
context
)
{
let
{
extension
}
=
context
;
let
{
tabManager
}
=
extension
;
let
browserAction
=
this
;
function
parseColor
(
color
kind
)
{
if
(
typeof
color
=
=
"
string
"
)
{
let
rgba
=
InspectorUtils
.
colorToRGBA
(
color
)
;
if
(
!
rgba
)
{
throw
new
ExtensionError
(
Invalid
badge
{
kind
}
color
:
"
{
color
}
"
)
;
}
color
=
[
rgba
.
r
rgba
.
g
rgba
.
b
Math
.
round
(
rgba
.
a
*
255
)
]
;
}
return
color
;
}
return
{
browserAction
:
{
onClicked
:
new
EventManager
(
{
context
name
:
"
browserAction
.
onClicked
"
inputHandling
:
true
register
:
fire
=
>
{
let
listener
=
(
event
browser
)
=
>
{
context
.
withPendingBrowser
(
browser
(
)
=
>
fire
.
sync
(
tabManager
.
convert
(
tabTracker
.
activeTab
)
)
)
;
}
;
browserAction
.
on
(
"
click
"
listener
)
;
return
(
)
=
>
{
browserAction
.
off
(
"
click
"
listener
)
;
}
;
}
}
)
.
api
(
)
enable
:
function
(
tabId
)
{
browserAction
.
setPropertyFromDetails
(
{
tabId
}
"
enabled
"
true
)
;
}
disable
:
function
(
tabId
)
{
browserAction
.
setPropertyFromDetails
(
{
tabId
}
"
enabled
"
false
)
;
}
isEnabled
:
function
(
details
)
{
return
browserAction
.
getPropertyFromDetails
(
details
"
enabled
"
)
;
}
setTitle
:
function
(
details
)
{
browserAction
.
setPropertyFromDetails
(
details
"
title
"
details
.
title
)
;
}
getTitle
:
function
(
details
)
{
return
browserAction
.
getPropertyFromDetails
(
details
"
title
"
)
;
}
setIcon
:
function
(
details
)
{
details
.
iconType
=
"
browserAction
"
;
let
icon
=
IconDetails
.
normalize
(
details
extension
context
)
;
if
(
!
Object
.
keys
(
icon
)
.
length
)
{
icon
=
null
;
}
browserAction
.
setPropertyFromDetails
(
details
"
icon
"
icon
)
;
}
setBadgeText
:
function
(
details
)
{
browserAction
.
setPropertyFromDetails
(
details
"
badgeText
"
details
.
text
)
;
}
getBadgeText
:
function
(
details
)
{
return
browserAction
.
getPropertyFromDetails
(
details
"
badgeText
"
)
;
}
setPopup
:
function
(
details
)
{
let
url
=
details
.
popup
&
&
context
.
uri
.
resolve
(
details
.
popup
)
;
if
(
url
&
&
!
context
.
checkLoadURL
(
url
)
)
{
return
Promise
.
reject
(
{
message
:
Access
denied
for
URL
{
url
}
}
)
;
}
browserAction
.
setPropertyFromDetails
(
details
"
popup
"
url
)
;
}
getPopup
:
function
(
details
)
{
return
browserAction
.
getPropertyFromDetails
(
details
"
popup
"
)
;
}
setBadgeBackgroundColor
:
function
(
details
)
{
let
color
=
parseColor
(
details
.
color
"
background
"
)
;
let
values
=
browserAction
.
setPropertyFromDetails
(
details
"
badgeBackgroundColor
"
color
)
;
if
(
color
=
=
=
null
)
{
delete
values
.
badgeDefaultColor
;
}
else
{
values
.
badgeDefaultColor
=
null
;
}
}
getBadgeBackgroundColor
:
function
(
details
callback
)
{
return
browserAction
.
getPropertyFromDetails
(
details
"
badgeBackgroundColor
"
)
;
}
setBadgeTextColor
:
function
(
details
)
{
let
color
=
parseColor
(
details
.
color
"
text
"
)
;
browserAction
.
setPropertyFromDetails
(
details
"
badgeTextColor
"
color
)
;
}
getBadgeTextColor
:
function
(
details
)
{
let
target
=
browserAction
.
getTargetFromDetails
(
details
)
;
let
values
=
browserAction
.
getContextData
(
target
)
;
return
browserAction
.
getTextColor
(
values
)
;
}
openPopup
:
function
(
)
{
let
window
=
windowTracker
.
topWindow
;
browserAction
.
triggerAction
(
window
)
;
}
}
}
;
}
}
;
global
.
browserActionFor
=
this
.
browserAction
.
for
;
