"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ExtensionSettingsStore
"
"
resource
:
/
/
gre
/
modules
/
ExtensionSettingsStore
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
aboutNewTabService
"
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
"
nsIAboutNewTabService
"
)
;
const
STORE_TYPE
=
"
url_overrides
"
;
const
NEW_TAB_SETTING_NAME
=
"
newTabURL
"
;
this
.
urlOverrides
=
class
extends
ExtensionAPI
{
processNewTabSetting
(
action
)
{
let
{
extension
}
=
this
;
let
item
=
ExtensionSettingsStore
[
action
]
(
extension
.
id
STORE_TYPE
NEW_TAB_SETTING_NAME
)
;
if
(
item
)
{
aboutNewTabService
.
newTabURL
=
item
.
value
|
|
item
.
initialValue
;
}
}
async
onManifestEntry
(
entryName
)
{
let
{
extension
}
=
this
;
let
{
manifest
}
=
extension
;
await
ExtensionSettingsStore
.
initialize
(
)
;
if
(
manifest
.
chrome_url_overrides
.
newtab
)
{
extension
.
callOnClose
(
{
close
:
(
)
=
>
{
switch
(
extension
.
shutdownReason
)
{
case
"
ADDON_DISABLE
"
:
this
.
processNewTabSetting
(
"
disable
"
)
;
break
;
case
"
ADDON_DOWNGRADE
"
:
case
"
ADDON_UPGRADE
"
:
case
"
ADDON_UNINSTALL
"
:
this
.
processNewTabSetting
(
"
removeSetting
"
)
;
break
;
}
}
}
)
;
let
url
=
extension
.
baseURI
.
resolve
(
manifest
.
chrome_url_overrides
.
newtab
)
;
let
item
=
await
ExtensionSettingsStore
.
addSetting
(
extension
.
id
STORE_TYPE
NEW_TAB_SETTING_NAME
url
(
)
=
>
aboutNewTabService
.
newTabURL
)
;
if
(
[
"
ADDON_ENABLE
"
"
ADDON_UPGRADE
"
"
ADDON_DOWNGRADE
"
]
.
includes
(
extension
.
startupReason
)
)
{
item
=
ExtensionSettingsStore
.
enable
(
extension
.
id
STORE_TYPE
NEW_TAB_SETTING_NAME
)
;
}
if
(
item
)
{
aboutNewTabService
.
newTabURL
=
item
.
value
|
|
item
.
initialValue
;
}
}
}
}
;
