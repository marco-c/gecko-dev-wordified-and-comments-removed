"
use
strict
"
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
aboutNewTabService
"
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
"
nsIAboutNewTabService
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
let
overrides
=
{
newtab
:
[
]
home
:
[
]
}
;
function
resetPage
(
page
)
{
switch
(
page
)
{
case
"
newtab
"
:
aboutNewTabService
.
resetNewTabURL
(
)
;
break
;
case
"
home
"
:
Preferences
.
reset
(
"
browser
.
startup
.
homepage
"
)
;
break
;
default
:
throw
new
Error
(
"
Unrecognized
override
type
"
)
;
}
}
function
overridePage
(
page
url
)
{
switch
(
page
)
{
case
"
newtab
"
:
aboutNewTabService
.
newTabURL
=
url
;
break
;
case
"
home
"
:
Preferences
.
set
(
"
browser
.
startup
.
homepage
"
url
)
;
break
;
default
:
throw
new
Error
(
"
Unrecognized
override
type
"
)
;
}
}
function
updatePage
(
page
)
{
if
(
overrides
[
page
]
.
length
)
{
overridePage
(
page
overrides
[
page
]
[
0
]
.
url
)
;
}
else
{
resetPage
(
page
)
;
}
}
extensions
.
on
(
"
manifest_chrome_url_overrides
"
(
type
directive
extension
manifest
)
=
>
{
if
(
Object
.
keys
(
overrides
)
.
length
>
1
)
{
extension
.
manifestError
(
"
Extensions
can
override
only
one
page
.
"
)
;
}
for
(
let
page
of
Object
.
keys
(
overrides
)
)
{
if
(
manifest
.
chrome_url_overrides
[
page
]
)
{
let
relativeURL
=
manifest
.
chrome_url_overrides
[
page
]
;
let
url
=
extension
.
baseURI
.
resolve
(
relativeURL
)
;
overrides
[
page
]
.
push
(
{
id
:
extension
.
id
url
}
)
;
updatePage
(
page
)
;
break
;
}
}
}
)
;
extensions
.
on
(
"
shutdown
"
(
type
extension
)
=
>
{
for
(
let
page
of
Object
.
keys
(
overrides
)
)
{
let
i
=
overrides
[
page
]
.
findIndex
(
o
=
>
o
.
id
=
=
=
extension
.
id
)
;
if
(
i
!
=
=
-
1
)
{
overrides
[
page
]
.
splice
(
i
1
)
;
updatePage
(
page
)
;
}
}
}
)
;
