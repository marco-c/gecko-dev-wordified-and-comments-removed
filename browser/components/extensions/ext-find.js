"
use
strict
"
;
this
.
find
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
let
loadedFrameScripts
=
{
}
;
return
{
find
:
{
find
(
queryphrase
params
)
{
params
=
params
|
|
{
}
;
params
.
queryphrase
=
queryphrase
;
return
this
.
runFindOperation
(
params
"
CollectResults
"
)
;
}
highlightResults
(
params
)
{
params
=
params
|
|
{
}
;
return
this
.
runFindOperation
(
params
"
HighlightResults
"
)
;
}
removeHighlighting
(
tabId
)
{
let
tab
=
tabId
?
tabTracker
.
getTab
(
tabId
)
:
tabTracker
.
activeTab
;
tab
.
linkedBrowser
.
messageManager
.
sendAsyncMessage
(
"
ext
-
Finder
:
clearHighlighting
"
)
;
}
runFindOperation
(
params
message
)
{
let
{
tabId
}
=
params
;
let
tab
=
tabId
?
tabTracker
.
getTab
(
tabId
)
:
tabTracker
.
activeTab
;
let
browser
=
tab
.
linkedBrowser
;
let
mm
=
browser
.
messageManager
;
tabId
=
tabId
|
|
tabTracker
.
getId
(
tab
)
;
if
(
!
loadedFrameScripts
[
tabId
]
)
{
mm
.
loadFrameScript
(
"
chrome
:
/
/
global
/
content
/
find
-
content
.
js
"
false
true
)
;
loadedFrameScripts
[
tabId
]
=
true
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
mm
.
addMessageListener
(
ext
-
Finder
:
{
message
}
Finished
function
messageListener
(
message
)
{
mm
.
removeMessageListener
(
ext
-
Finder
:
{
message
}
Finished
messageListener
)
;
switch
(
message
.
data
)
{
case
"
Success
"
:
resolve
(
)
;
break
;
case
"
OutOfRange
"
:
reject
(
{
message
:
"
index
supplied
was
out
of
range
"
}
)
;
break
;
case
"
NoResults
"
:
reject
(
{
message
:
"
no
search
results
to
highlight
"
}
)
;
break
;
}
resolve
(
message
.
data
)
;
}
)
;
mm
.
sendAsyncMessage
(
ext
-
Finder
:
{
message
}
params
)
;
}
)
;
}
}
}
;
}
}
;
