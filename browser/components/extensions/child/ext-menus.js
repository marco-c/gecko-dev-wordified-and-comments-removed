"
use
strict
"
;
var
{
withHandlingUserInput
}
=
ExtensionCommon
;
var
gNextMenuItemID
=
0
;
var
gPropHandlers
=
new
Map
(
)
;
class
ContextMenusClickPropHandler
{
constructor
(
context
)
{
this
.
context
=
context
;
this
.
onclickMap
=
new
Map
(
)
;
this
.
dispatchEvent
=
this
.
dispatchEvent
.
bind
(
this
)
;
}
dispatchEvent
(
info
tab
)
{
let
onclick
=
this
.
onclickMap
.
get
(
info
.
menuItemId
)
;
if
(
onclick
)
{
withHandlingUserInput
(
this
.
context
.
contentWindow
(
)
=
>
onclick
(
info
tab
)
)
;
}
}
setListener
(
id
onclick
)
{
if
(
this
.
onclickMap
.
size
=
=
=
0
)
{
this
.
context
.
childManager
.
getParentEvent
(
"
menusInternal
.
onClicked
"
)
.
addListener
(
this
.
dispatchEvent
)
;
this
.
context
.
callOnClose
(
this
)
;
}
this
.
onclickMap
.
set
(
id
onclick
)
;
let
propHandlerMap
=
gPropHandlers
.
get
(
this
.
context
.
extension
)
;
if
(
!
propHandlerMap
)
{
propHandlerMap
=
new
Map
(
)
;
}
else
{
let
propHandler
=
propHandlerMap
.
get
(
id
)
;
if
(
propHandler
&
&
propHandler
!
=
=
this
)
{
propHandler
.
unsetListener
(
id
)
;
}
}
propHandlerMap
.
set
(
id
this
)
;
gPropHandlers
.
set
(
this
.
context
.
extension
propHandlerMap
)
;
}
unsetListener
(
id
)
{
if
(
!
this
.
onclickMap
.
delete
(
id
)
)
{
return
;
}
if
(
this
.
onclickMap
.
size
=
=
=
0
)
{
this
.
context
.
childManager
.
getParentEvent
(
"
menusInternal
.
onClicked
"
)
.
removeListener
(
this
.
dispatchEvent
)
;
this
.
context
.
forgetOnClose
(
this
)
;
}
let
propHandlerMap
=
gPropHandlers
.
get
(
this
.
context
.
extension
)
;
propHandlerMap
.
delete
(
id
)
;
if
(
propHandlerMap
.
size
=
=
=
0
)
{
gPropHandlers
.
delete
(
this
.
context
.
extension
)
;
}
}
unsetListenerFromAnyContext
(
id
)
{
let
propHandlerMap
=
gPropHandlers
.
get
(
this
.
context
.
extension
)
;
let
propHandler
=
propHandlerMap
&
&
propHandlerMap
.
get
(
id
)
;
if
(
propHandler
)
{
propHandler
.
unsetListener
(
id
)
;
}
}
deleteAllListenersFromExtension
(
)
{
let
propHandlerMap
=
gPropHandlers
.
get
(
this
.
context
.
extension
)
;
if
(
propHandlerMap
)
{
for
(
let
[
id
propHandler
]
of
propHandlerMap
)
{
propHandler
.
unsetListener
(
id
)
;
}
}
}
close
(
)
{
for
(
let
id
of
this
.
onclickMap
.
keys
(
)
)
{
this
.
unsetListener
(
id
)
;
}
}
}
this
.
menusInternal
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
let
onClickedProp
=
new
ContextMenusClickPropHandler
(
context
)
;
let
api
=
{
menus
:
{
create
(
createProperties
callback
)
{
if
(
createProperties
.
id
=
=
=
null
)
{
createProperties
.
id
=
+
+
gNextMenuItemID
;
}
let
{
onclick
}
=
createProperties
;
delete
createProperties
.
onclick
;
context
.
childManager
.
callParentAsyncFunction
(
"
menusInternal
.
create
"
[
createProperties
]
)
.
then
(
(
)
=
>
{
if
(
onclick
)
{
onClickedProp
.
setListener
(
createProperties
.
id
onclick
)
;
}
if
(
callback
)
{
context
.
runSafeWithoutClone
(
callback
)
;
}
}
)
.
catch
(
error
=
>
{
context
.
withLastError
(
error
null
(
)
=
>
{
if
(
callback
)
{
context
.
runSafeWithoutClone
(
callback
)
;
}
}
)
;
}
)
;
return
createProperties
.
id
;
}
update
(
id
updateProperties
)
{
let
{
onclick
}
=
updateProperties
;
delete
updateProperties
.
onclick
;
return
context
.
childManager
.
callParentAsyncFunction
(
"
menusInternal
.
update
"
[
id
updateProperties
]
)
.
then
(
(
)
=
>
{
if
(
onclick
)
{
onClickedProp
.
setListener
(
id
onclick
)
;
}
else
if
(
onclick
=
=
=
null
)
{
onClickedProp
.
unsetListenerFromAnyContext
(
id
)
;
}
}
)
;
}
remove
(
id
)
{
onClickedProp
.
unsetListenerFromAnyContext
(
id
)
;
return
context
.
childManager
.
callParentAsyncFunction
(
"
menusInternal
.
remove
"
[
id
]
)
;
}
removeAll
(
)
{
onClickedProp
.
deleteAllListenersFromExtension
(
)
;
return
context
.
childManager
.
callParentAsyncFunction
(
"
menusInternal
.
removeAll
"
[
]
)
;
}
onClicked
:
new
EventManager
(
{
context
name
:
"
menus
.
onClicked
"
register
:
fire
=
>
{
let
listener
=
(
info
tab
)
=
>
{
withHandlingUserInput
(
context
.
contentWindow
(
)
=
>
fire
.
sync
(
info
tab
)
)
;
}
;
let
event
=
context
.
childManager
.
getParentEvent
(
"
menusInternal
.
onClicked
"
)
;
event
.
addListener
(
listener
)
;
return
(
)
=
>
{
event
.
removeListener
(
listener
)
;
}
;
}
}
)
.
api
(
)
}
}
;
const
result
=
{
}
;
if
(
context
.
extension
.
hasPermission
(
"
menus
"
)
)
{
result
.
menus
=
api
.
menus
;
}
if
(
context
.
extension
.
hasPermission
(
"
contextMenus
"
)
)
{
result
.
contextMenus
=
api
.
menus
;
}
return
result
;
}
}
;
