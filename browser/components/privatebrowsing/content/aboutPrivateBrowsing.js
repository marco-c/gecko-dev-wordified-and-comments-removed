document
.
addEventListener
(
"
DOMContentLoaded
"
function
(
)
{
if
(
!
RPMIsWindowPrivate
(
)
)
{
document
.
documentElement
.
classList
.
remove
(
"
private
"
)
;
document
.
documentElement
.
classList
.
add
(
"
normal
"
)
;
document
.
getElementById
(
"
startPrivateBrowsing
"
)
.
addEventListener
(
"
click
"
function
(
)
{
RPMSendAsyncMessage
(
"
OpenPrivateWindow
"
)
;
}
)
;
return
;
}
document
.
getElementById
(
"
private
-
browsing
-
myths
"
)
.
setAttribute
(
"
href
"
RPMGetFormatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
private
-
browsing
-
myths
"
)
;
const
privateSearchBanner
=
document
.
getElementById
(
"
search
-
banner
"
)
;
RPMAddMessageListener
(
"
ShowSearchBanner
"
msg
=
>
{
if
(
msg
.
data
.
show
)
{
document
.
l10n
.
setAttributes
(
document
.
getElementById
(
"
about
-
private
-
browsing
-
search
-
banner
-
title
"
)
"
about
-
private
-
browsing
-
search
-
banner
-
title
"
{
engineName
:
msg
.
data
.
engineName
}
)
;
privateSearchBanner
.
removeAttribute
(
"
hidden
"
)
;
document
.
body
.
classList
.
add
(
"
showBanner
"
)
;
}
document
.
documentElement
.
setAttribute
(
"
SearchBannerInitialized
"
true
)
;
}
)
;
RPMSendAsyncMessage
(
"
ShouldShowSearchBanner
"
)
;
function
hideSearchBanner
(
)
{
privateSearchBanner
.
setAttribute
(
"
hidden
"
"
true
"
)
;
document
.
body
.
classList
.
remove
(
"
showBanner
"
)
;
RPMSendAsyncMessage
(
"
SearchBannerDismissed
"
)
;
}
document
.
getElementById
(
"
search
-
banner
-
close
-
button
"
)
.
addEventListener
(
"
click
"
(
)
=
>
{
hideSearchBanner
(
)
;
}
)
;
let
openSearchOptions
=
document
.
getElementById
(
"
about
-
private
-
browsing
-
search
-
banner
-
description
"
)
;
let
openSearchOptionsEvtHandler
=
evt
=
>
{
if
(
evt
.
target
.
id
=
=
"
open
-
search
-
options
-
link
"
&
&
(
evt
.
keyCode
=
=
evt
.
DOM_VK_RETURN
|
|
evt
.
type
=
=
"
click
"
)
)
{
RPMSendAsyncMessage
(
"
OpenSearchPreferences
"
)
;
hideSearchBanner
(
)
;
}
}
;
openSearchOptions
.
addEventListener
(
"
click
"
openSearchOptionsEvtHandler
)
;
openSearchOptions
.
addEventListener
(
"
keypress
"
openSearchOptionsEvtHandler
)
;
let
btn
=
document
.
getElementById
(
"
search
-
handoff
-
button
"
)
;
let
editable
=
document
.
getElementById
(
"
fake
-
editable
"
)
;
let
HIDE_SEARCH_TOPIC
=
"
HideSearch
"
;
let
SHOW_SEARCH_TOPIC
=
"
ShowSearch
"
;
let
SEARCH_HANDOFF_TOPIC
=
"
SearchHandoff
"
;
function
showSearch
(
)
{
btn
.
classList
.
remove
(
"
focused
"
)
;
btn
.
classList
.
remove
(
"
hidden
"
)
;
RPMRemoveMessageListener
(
SHOW_SEARCH_TOPIC
showSearch
)
;
}
function
hideSearch
(
)
{
btn
.
classList
.
add
(
"
hidden
"
)
;
}
function
handoffSearch
(
text
)
{
RPMSendAsyncMessage
(
SEARCH_HANDOFF_TOPIC
{
text
}
)
;
RPMAddMessageListener
(
SHOW_SEARCH_TOPIC
showSearch
)
;
if
(
text
)
{
hideSearch
(
)
;
}
else
{
btn
.
classList
.
add
(
"
focused
"
)
;
RPMAddMessageListener
(
HIDE_SEARCH_TOPIC
hideSearch
)
;
}
}
btn
.
addEventListener
(
"
focus
"
function
(
)
{
handoffSearch
(
)
;
}
)
;
btn
.
addEventListener
(
"
click
"
function
(
)
{
handoffSearch
(
)
;
}
)
;
editable
.
addEventListener
(
"
drop
"
function
(
ev
)
{
ev
.
preventDefault
(
)
;
let
text
=
ev
.
dataTransfer
.
getData
(
"
text
"
)
;
if
(
text
)
{
handoffSearch
(
text
)
;
}
}
)
;
editable
.
addEventListener
(
"
paste
"
function
(
ev
)
{
ev
.
preventDefault
(
)
;
handoffSearch
(
ev
.
clipboardData
.
getData
(
"
Text
"
)
)
;
}
)
;
let
input
=
document
.
getElementById
(
"
dummy
-
input
"
)
;
new
window
.
ContentSearchUIController
(
input
input
.
parentNode
"
aboutprivatebrowsing
"
"
aboutprivatebrowsing
"
true
)
;
}
)
;
