const
TEST_SITE
=
"
http
:
/
/
mochi
.
test
:
8888
"
;
const
TEST_CACHE_SITE
=
"
http
:
/
/
www
.
example
.
com
"
;
const
TEST_DIRECTORY
=
"
/
browser
/
browser
/
components
/
privatebrowsing
/
test
/
browser
/
"
;
const
TEST_PAGE
=
TEST_SITE
+
TEST_DIRECTORY
+
"
file_favicon
.
html
"
;
const
TEST_CACHE_PAGE
=
TEST_CACHE_SITE
+
TEST_DIRECTORY
+
"
file_favicon
.
html
"
;
const
FAVICON_URI
=
TEST_SITE
+
TEST_DIRECTORY
+
"
file_favicon
.
png
"
;
const
FAVICON_CACHE_URI
=
TEST_CACHE_SITE
+
TEST_DIRECTORY
+
"
file_favicon
.
png
"
;
let
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
let
makeURI
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
{
}
)
.
BrowserUtils
.
makeURI
;
function
clearAllImageCaches
(
)
{
let
tools
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
imgITools
)
;
let
imageCache
=
tools
.
getImgCacheForDocument
(
window
.
document
)
;
imageCache
.
clearCache
(
true
)
;
imageCache
.
clearCache
(
false
)
;
}
function
clearAllPlacesFavicons
(
)
{
let
faviconService
=
Cc
[
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
]
.
getService
(
Ci
.
nsIFaviconService
)
;
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
places
-
favicons
-
expired
"
)
{
resolve
(
)
;
Services
.
obs
.
removeObserver
(
observer
"
places
-
favicons
-
expired
"
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
places
-
favicons
-
expired
"
)
;
faviconService
.
expireAllFavicons
(
)
;
}
)
;
}
function
observeFavicon
(
aIsPrivate
aExpectedCookie
aPageURI
)
{
let
attr
=
{
}
;
if
(
aIsPrivate
)
{
attr
.
privateBrowsingId
=
1
;
}
let
expectedPrincipal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
aPageURI
attr
)
;
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
modify
-
request
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
reqLoadInfo
=
httpChannel
.
loadInfo
;
let
loadingPrincipal
=
reqLoadInfo
.
loadingPrincipal
;
if
(
httpChannel
.
URI
.
spec
!
=
=
FAVICON_URI
)
{
return
;
}
if
(
aIsPrivate
)
{
is
(
reqLoadInfo
.
originAttributes
.
privateBrowsingId
1
"
The
loadInfo
has
correct
privateBrowsingId
"
)
;
}
else
{
is
(
reqLoadInfo
.
originAttributes
.
privateBrowsingId
0
"
The
loadInfo
has
correct
privateBrowsingId
"
)
;
}
ok
(
loadingPrincipal
.
equals
(
expectedPrincipal
)
"
The
loadingPrincipal
of
favicon
loading
from
Places
should
be
the
content
prinicpal
"
)
;
let
faviconCookie
=
httpChannel
.
getRequestHeader
(
"
cookie
"
)
;
is
(
faviconCookie
aExpectedCookie
"
The
cookie
of
the
favicon
loading
is
correct
.
"
)
;
}
else
{
ok
(
false
"
Received
unexpected
topic
:
"
aTopic
)
;
}
resolve
(
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
modify
-
request
"
)
;
}
)
;
}
function
waitOnFaviconResponse
(
aFaviconURL
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
examine
-
response
"
|
|
aTopic
=
=
=
"
http
-
on
-
examine
-
cached
-
response
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
loadInfo
=
httpChannel
.
loadInfo
;
if
(
httpChannel
.
URI
.
spec
!
=
=
aFaviconURL
)
{
return
;
}
let
result
=
{
topic
:
aTopic
privateBrowsingId
:
loadInfo
.
originAttributes
.
privateBrowsingId
}
;
resolve
(
result
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
cached
-
response
"
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
cached
-
response
"
)
;
}
)
;
}
function
waitOnFaviconLoaded
(
aFaviconURL
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
onPageChanged
(
uri
attr
value
id
)
{
if
(
attr
=
=
=
Ci
.
nsINavHistoryObserver
.
ATTRIBUTE_FAVICON
&
&
value
=
=
=
aFaviconURL
)
{
resolve
(
)
;
PlacesUtils
.
history
.
removeObserver
(
observer
false
)
;
}
}
}
;
PlacesUtils
.
history
.
addObserver
(
observer
)
;
}
)
;
}
async
function
assignCookies
(
aBrowser
aURL
aCookieValue
)
{
let
tabInfo
=
await
openTab
(
aBrowser
aURL
)
;
await
ContentTask
.
spawn
(
tabInfo
.
browser
aCookieValue
async
function
(
value
)
{
content
.
document
.
cookie
=
value
;
}
)
;
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
}
async
function
openTab
(
aBrowser
aURL
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
aBrowser
aURL
)
;
aBrowser
.
selectedTab
=
tab
;
tab
.
ownerGlobal
.
focus
(
)
;
let
browser
=
aBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
return
{
tab
browser
}
;
}
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
cookies
.
removeAll
(
)
;
clearAllImageCaches
(
)
;
Services
.
cache2
.
clear
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_favicon_privateBrowsing
(
)
{
clearAllImageCaches
(
)
;
await
clearAllPlacesFavicons
(
)
;
let
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
pageURI
=
makeURI
(
TEST_PAGE
)
;
let
cookies
=
[
]
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
+
"
=
1
"
)
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
+
"
=
1
"
)
;
await
assignCookies
(
privateWindow
.
gBrowser
TEST_SITE
cookies
[
0
]
)
;
await
assignCookies
(
gBrowser
TEST_SITE
cookies
[
1
]
)
;
let
promiseObserveFavicon
=
observeFavicon
(
true
cookies
[
0
]
pageURI
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
TEST_PAGE
}
)
;
let
tabInfo
=
await
openTab
(
privateWindow
.
gBrowser
TEST_PAGE
)
;
info
(
"
Waiting
until
favicon
requests
are
all
made
in
private
window
.
"
)
;
await
promiseObserveFavicon
;
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
await
new
Promise
(
executeSoon
)
;
promiseObserveFavicon
=
observeFavicon
(
false
cookies
[
1
]
pageURI
)
;
tabInfo
=
await
openTab
(
gBrowser
TEST_PAGE
)
;
info
(
"
Waiting
until
favicon
requests
are
all
made
in
non
-
private
window
.
"
)
;
await
promiseObserveFavicon
;
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
add_task
(
async
function
test_favicon_cache_privateBrowsing
(
)
{
clearAllImageCaches
(
)
;
Services
.
cache2
.
clear
(
)
;
await
clearAllPlacesFavicons
(
)
;
let
promiseFaviconLoaded
=
waitOnFaviconLoaded
(
FAVICON_CACHE_URI
)
;
let
promiseFaviconResponse
=
waitOnFaviconResponse
(
FAVICON_CACHE_URI
)
;
let
tabInfoNonPrivate
=
await
openTab
(
gBrowser
TEST_CACHE_PAGE
)
;
let
response
=
await
promiseFaviconResponse
;
await
promiseFaviconLoaded
;
is
(
response
.
topic
"
http
-
on
-
examine
-
response
"
"
The
favicon
image
should
be
loaded
through
network
.
"
)
;
is
(
response
.
privateBrowsingId
0
"
We
should
observe
the
network
response
for
the
non
-
private
tab
.
"
)
;
let
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
TEST_CACHE_PAGE
}
)
;
promiseFaviconResponse
=
waitOnFaviconResponse
(
FAVICON_CACHE_URI
)
;
let
tabInfoPrivate
=
await
openTab
(
privateWindow
.
gBrowser
TEST_CACHE_PAGE
)
;
response
=
await
promiseFaviconResponse
;
is
(
response
.
topic
"
http
-
on
-
examine
-
response
"
"
The
favicon
image
should
be
loaded
through
the
network
again
.
"
)
;
is
(
response
.
privateBrowsingId
1
"
We
should
observe
the
network
response
for
the
private
tab
.
"
)
;
BrowserTestUtils
.
removeTab
(
tabInfoPrivate
.
tab
)
;
BrowserTestUtils
.
removeTab
(
tabInfoNonPrivate
.
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
