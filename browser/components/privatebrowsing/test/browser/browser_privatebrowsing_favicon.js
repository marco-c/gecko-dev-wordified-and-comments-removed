const
{
classes
:
Cc
Constructor
:
CC
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
TEST_SITE
=
"
http
:
/
/
mochi
.
test
:
8888
"
;
const
TEST_DIRECTORY
=
"
/
browser
/
browser
/
components
/
privatebrowsing
/
test
/
browser
/
"
;
const
TEST_PAGE
=
TEST_SITE
+
TEST_DIRECTORY
+
"
file_favicon
.
html
"
;
const
FAVICON_URI
=
TEST_SITE
+
TEST_DIRECTORY
+
"
file_favicon
.
png
"
;
let
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
let
makeURI
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
{
}
)
.
BrowserUtils
.
makeURI
;
function
clearAllImageCaches
(
)
{
var
tools
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
imgITools
)
;
var
imageCache
=
tools
.
getImgCacheForDocument
(
window
.
document
)
;
imageCache
.
clearCache
(
true
)
;
imageCache
.
clearCache
(
false
)
;
}
function
observeFavicon
(
aIsPrivate
aExpectedCookie
aPageURI
)
{
let
faviconReqXUL
=
false
;
let
faviconReqPlaces
=
false
;
let
attr
=
{
}
;
if
(
aIsPrivate
)
{
attr
.
privateBrowsingId
=
1
;
}
let
expectedPrincipal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
aPageURI
attr
)
;
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
modify
-
request
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
reqLoadInfo
=
httpChannel
.
loadInfo
;
let
loadingPrincipal
=
reqLoadInfo
.
loadingPrincipal
;
let
triggeringPrincipal
=
reqLoadInfo
.
triggeringPrincipal
;
if
(
httpChannel
.
URI
.
spec
!
=
=
FAVICON_URI
)
{
return
;
}
if
(
aIsPrivate
)
{
is
(
reqLoadInfo
.
originAttributes
.
privateBrowsingId
1
"
The
loadInfo
has
correct
privateBrowsingId
"
)
;
}
else
{
is
(
reqLoadInfo
.
originAttributes
.
privateBrowsingId
0
"
The
loadInfo
has
correct
privateBrowsingId
"
)
;
}
if
(
loadingPrincipal
.
equals
(
systemPrincipal
)
)
{
faviconReqXUL
=
true
;
ok
(
triggeringPrincipal
.
equals
(
expectedPrincipal
)
"
The
triggeringPrincipal
of
favicon
loading
from
XUL
should
be
the
content
principal
.
"
)
;
}
else
{
faviconReqPlaces
=
true
;
ok
(
loadingPrincipal
.
equals
(
expectedPrincipal
)
"
The
loadingPrincipal
of
favicon
loading
from
Places
should
be
the
content
prinicpal
"
)
;
}
let
faviconCookie
=
httpChannel
.
getRequestHeader
(
"
cookie
"
)
;
is
(
faviconCookie
aExpectedCookie
"
The
cookie
of
the
favicon
loading
is
correct
.
"
)
;
}
else
{
ok
(
false
"
Received
unexpected
topic
:
"
aTopic
)
;
}
if
(
faviconReqXUL
&
&
faviconReqPlaces
)
{
resolve
(
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
modify
-
request
"
false
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
modify
-
request
"
false
)
;
}
)
;
}
function
waitOnFaviconResponse
(
aFaviconURL
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
http
-
on
-
examine
-
response
"
|
|
aTopic
=
=
=
"
http
-
on
-
examine
-
cached
-
response
"
)
{
let
httpChannel
=
aSubject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
loadInfo
=
httpChannel
.
loadInfo
;
if
(
httpChannel
.
URI
.
spec
!
=
=
aFaviconURL
)
{
return
;
}
let
result
=
{
topic
:
aTopic
privateBrowsingId
:
loadInfo
.
originAttributes
.
privateBrowsingId
}
;
resolve
(
result
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
response
"
false
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
cached
-
response
"
false
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
response
"
false
)
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
cached
-
response
"
false
)
;
}
)
;
}
function
*
assignCookies
(
aBrowser
aURL
aCookieValue
)
{
let
tabInfo
=
yield
openTab
(
aBrowser
aURL
)
;
yield
ContentTask
.
spawn
(
tabInfo
.
browser
aCookieValue
function
*
(
value
)
{
content
.
document
.
cookie
=
value
;
}
)
;
yield
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
}
function
*
openTab
(
aBrowser
aURL
)
{
let
tab
=
aBrowser
.
addTab
(
aURL
)
;
aBrowser
.
selectedTab
=
tab
;
tab
.
ownerGlobal
.
focus
(
)
;
let
browser
=
aBrowser
.
getBrowserForTab
(
tab
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
return
{
tab
browser
}
;
}
registerCleanupFunction
(
(
)
=
>
{
let
cookieMgr
=
Cc
[
"
mozilla
.
org
/
cookiemanager
;
1
"
]
.
getService
(
Ci
.
nsICookieManager
)
;
cookieMgr
.
removeAll
(
)
;
clearAllImageCaches
(
)
;
let
networkCache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
networkCache
.
clear
(
)
;
}
)
;
add_task
(
function
*
test_favicon_privateBrowsing
(
)
{
clearAllImageCaches
(
)
;
let
privateWindow
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
pageURI
=
makeURI
(
TEST_PAGE
)
;
let
cookies
=
[
]
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
)
;
cookies
.
push
(
Math
.
random
(
)
.
toString
(
)
)
;
yield
assignCookies
(
gBrowser
TEST_SITE
cookies
[
0
]
)
;
yield
assignCookies
(
privateWindow
.
gBrowser
TEST_SITE
cookies
[
1
]
)
;
let
promiseObserveFavicon
=
observeFavicon
(
false
cookies
[
0
]
pageURI
)
;
let
tabInfo
=
yield
openTab
(
gBrowser
TEST_PAGE
)
;
yield
promiseObserveFavicon
;
yield
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
promiseObserveFavicon
=
observeFavicon
(
true
cookies
[
1
]
pageURI
)
;
tabInfo
=
yield
openTab
(
privateWindow
.
gBrowser
TEST_PAGE
)
;
yield
promiseObserveFavicon
;
yield
BrowserTestUtils
.
removeTab
(
tabInfo
.
tab
)
;
yield
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
add_task
(
function
*
test_favicon_cache_privateBrowsing
(
)
{
clearAllImageCaches
(
)
;
let
networkCache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
networkCache
.
clear
(
)
;
let
privateWindow
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
tabInfoPrivateA
=
yield
openTab
(
privateWindow
.
gBrowser
TEST_PAGE
)
;
let
response
=
yield
waitOnFaviconResponse
(
FAVICON_URI
)
;
is
(
response
.
topic
"
http
-
on
-
examine
-
response
"
"
The
favicon
image
should
be
loaded
through
the
network
.
"
)
;
is
(
response
.
privateBrowsingId
1
"
We
should
observe
the
network
response
for
the
private
tab
.
"
)
;
let
tabInfoPrivateB
=
yield
openTab
(
privateWindow
.
gBrowser
TEST_PAGE
)
;
response
=
yield
waitOnFaviconResponse
(
FAVICON_URI
)
;
is
(
response
.
topic
"
http
-
on
-
examine
-
response
"
"
The
favicon
image
should
be
loaded
through
the
network
.
"
)
;
is
(
response
.
privateBrowsingId
1
"
We
should
observe
the
network
response
for
the
private
tab
.
"
)
;
let
tabInfoNonPrivate
=
yield
openTab
(
gBrowser
TEST_PAGE
)
;
response
=
yield
waitOnFaviconResponse
(
FAVICON_URI
)
;
is
(
response
.
topic
"
http
-
on
-
examine
-
response
"
"
The
favicon
image
should
be
loaded
through
network
again
.
"
)
;
is
(
response
.
privateBrowsingId
0
"
We
should
observe
the
network
response
for
the
non
-
private
tab
.
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tabInfoPrivateA
.
tab
)
;
yield
BrowserTestUtils
.
removeTab
(
tabInfoPrivateB
.
tab
)
;
yield
BrowserTestUtils
.
removeTab
(
tabInfoNonPrivate
.
tab
)
;
yield
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
