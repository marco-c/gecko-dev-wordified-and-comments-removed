const
POPUP_BODY_BASE64
=
btoa
(
<
a
href
=
"
http
:
/
/
example
.
com
/
"
target
=
"
_blank
"
id
=
"
second
"
>
Now
click
this
<
/
a
>
)
;
const
POPUP_LINK
=
data
:
text
/
html
;
charset
=
utf
-
8
;
base64
{
POPUP_BODY_BASE64
}
;
const
WINDOW_BODY
=
data
:
text
/
html
<
a
href
=
"
%
23
"
id
=
"
first
"
onclick
=
"
window
.
open
(
'
{
POPUP_LINK
}
'
'
_blank
'
'
width
=
630
height
=
500
'
)
"
>
First
click
this
.
<
/
a
>
;
add_task
(
async
function
test_private_popup_window_opens_private_tabs
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
security
.
data_uri
.
block_toplevel_data_uri_navigations
"
false
]
]
}
)
;
let
privWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
ok
(
PrivateBrowsingUtils
.
isWindowPrivate
(
privWin
)
"
Opened
a
private
browsing
window
.
"
)
;
let
privBrowser
=
privWin
.
gBrowser
.
selectedBrowser
;
await
BrowserTestUtils
.
loadURI
(
privBrowser
WINDOW_BODY
)
;
await
BrowserTestUtils
.
browserLoaded
(
privBrowser
)
;
let
openedPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
POPUP_LINK
}
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
first
"
{
}
privBrowser
)
;
let
popupWin
=
await
openedPromise
;
ok
(
PrivateBrowsingUtils
.
isWindowPrivate
(
popupWin
)
"
Popup
window
was
private
.
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
privWin
.
gBrowser
)
;
let
popupBrowser
=
popupWin
.
gBrowser
.
selectedBrowser
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
second
"
{
}
popupBrowser
)
;
let
newPrivTab
=
await
newTabPromise
;
ok
(
PrivateBrowsingUtils
.
isBrowserPrivate
(
newPrivTab
.
linkedBrowser
)
"
Newly
opened
tab
should
be
private
.
"
)
;
BrowserTestUtils
.
removeTab
(
newPrivTab
)
;
await
BrowserTestUtils
.
closeWindow
(
popupWin
)
;
await
BrowserTestUtils
.
closeWindow
(
privWin
)
;
}
)
;
