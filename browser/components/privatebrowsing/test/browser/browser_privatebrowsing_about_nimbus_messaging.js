add_task
(
async
function
test_experiment_messaging_system
(
)
{
const
LOCALE
=
Services
.
locale
.
appLocaleAsBCP47
;
let
doExperimentCleanup
=
await
setupMSExperimentWithMessage
(
{
id
:
"
PB_NEWTAB_MESSAGING_SYSTEM
"
template
:
"
pb_newtab
"
content
:
{
promoEnabled
:
true
infoEnabled
:
true
infoBody
:
"
fluent
:
about
-
private
-
browsing
-
info
-
title
"
promoLinkText
:
"
fluent
:
about
-
private
-
browsing
-
prominent
-
cta
"
infoLinkUrl
:
"
http
:
/
/
foo
.
example
.
com
/
%
LOCALE
%
"
promoLinkUrl
:
"
http
:
/
/
bar
.
example
.
com
/
%
LOCALE
%
"
}
priority
:
5
targeting
:
"
true
"
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
let
events
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
true
)
.
content
;
info
(
"
waiting
for
events
to
clear
but
:
"
)
;
info
(
JSON
.
stringify
(
events
)
)
;
return
!
events
|
|
!
events
.
length
;
}
"
Waiting
for
telemetry
events
to
get
cleared
"
)
;
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
true
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
{
win
tab
}
=
await
openTabAndWaitForRender
(
)
;
await
SpecialPowers
.
spawn
(
tab
[
LOCALE
]
async
function
(
locale
)
{
const
infoBody
=
content
.
document
.
getElementById
(
"
info
-
body
"
)
;
const
promoLink
=
content
.
document
.
getElementById
(
"
private
-
browsing
-
vpn
-
link
"
)
;
is
(
infoBody
.
textContent
"
You
re
in
a
Private
Window
"
"
should
render
infoBody
with
fluent
"
)
;
is
(
promoLink
.
textContent
"
Stay
private
with
Mozilla
VPN
"
"
should
render
promoLinkText
with
fluent
"
)
;
is
(
content
.
document
.
querySelector
(
"
.
info
a
"
)
.
getAttribute
(
"
href
"
)
"
http
:
/
/
foo
.
example
.
com
/
"
+
locale
"
should
format
the
infoLinkUrl
url
"
)
;
is
(
content
.
document
.
querySelector
(
"
.
info
a
"
)
.
getAttribute
(
"
target
"
)
"
_blank
"
"
should
open
info
url
in
new
tab
"
)
;
is
(
content
.
document
.
querySelector
(
"
.
promo
button
"
)
.
getAttribute
(
"
target
"
)
"
_blank
"
"
should
open
promo
url
in
new
tab
"
)
;
}
)
;
await
waitForTelemetryEvent
(
"
normandy
"
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
method
:
"
expose
"
extra
:
{
featureId
:
"
pbNewtab
"
}
}
]
{
category
:
"
normandy
"
}
{
process
:
"
content
"
}
)
;
Services
.
telemetry
.
clearEvents
(
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
doExperimentCleanup
(
)
;
}
)
;
