"
use
strict
"
;
add_task
(
async
function
test
(
)
{
const
TEST_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
privatebrowsing
/
test
/
browser
/
browser_privatebrowsing_placesTitleNoUpdate
.
html
"
const
TITLE_1
=
"
Title
1
"
;
const
TITLE_2
=
"
Title
2
"
;
await
PlacesUtils
.
history
.
clear
(
)
;
let
promiseTitleChanged
=
PlacesTestUtils
.
waitForNotification
(
"
onTitleChanged
"
(
uri
title
)
=
>
uri
.
spec
=
=
TEST_URL
"
history
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
info
(
"
Wait
for
a
title
change
notification
.
"
)
;
await
promiseTitleChanged
;
is
(
(
await
PlacesUtils
.
history
.
fetch
(
TEST_URL
)
)
.
title
TITLE_1
"
The
title
matches
the
orignal
title
after
first
visit
"
)
;
promiseTitleChanged
=
PlacesTestUtils
.
waitForNotification
(
"
onTitleChanged
"
(
uri
title
)
=
>
uri
.
spec
=
=
TEST_URL
"
history
"
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
TEST_URL
title
:
TITLE_2
}
)
;
info
(
"
Wait
for
a
title
change
notification
.
"
)
;
await
promiseTitleChanged
;
is
(
(
await
PlacesUtils
.
history
.
fetch
(
TEST_URL
)
)
.
title
TITLE_2
"
The
title
matches
the
orignal
title
after
updating
visit
"
)
;
let
privateWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
closeWindow
(
privateWin
)
;
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
privateWin
.
gBrowser
TEST_URL
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
is
(
(
await
PlacesUtils
.
history
.
fetch
(
TEST_URL
)
)
.
title
TITLE_2
"
The
title
remains
the
same
after
visiting
in
private
window
"
)
;
}
)
;
