add_task
(
async
function
(
)
{
await
testShiftClickOpensNewWindow
(
"
back
-
button
"
)
;
}
)
;
add_task
(
async
function
(
)
{
await
testShiftClickOpensNewWindow
(
"
forward
-
button
"
)
;
}
)
;
async
function
createPrivateWindow
(
)
{
const
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
privateWindow
.
gBrowser
"
http
:
/
/
example
.
com
"
)
;
await
SpecialPowers
.
spawn
(
privateWindow
.
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
history
.
pushState
(
{
}
"
first
item
"
"
first
-
item
.
html
"
)
;
content
.
history
.
pushState
(
{
}
"
second
item
"
"
second
-
item
.
html
"
)
;
content
.
history
.
pushState
(
{
}
"
third
item
"
"
third
-
item
.
html
"
)
;
content
.
history
.
back
(
)
;
}
)
;
await
TestUtils
.
topicObserved
(
"
sessionstore
-
state
-
write
-
complete
"
)
;
await
new
Promise
(
resolve
=
>
SessionStore
.
getSessionHistory
(
privateWindow
.
gBrowser
.
selectedTab
resolve
)
)
;
info
(
"
Private
window
created
"
)
;
return
privateWindow
;
}
async
function
testShiftClickOpensNewWindow
(
buttonId
)
{
const
privateWindow
=
await
createPrivateWindow
(
)
;
const
button
=
privateWindow
.
document
.
getElementById
(
buttonId
)
;
const
newPrivateWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
shiftKey
:
true
}
privateWindow
)
;
info
(
"
Waiting
for
new
private
browser
to
open
"
)
;
const
newPrivateWindow
=
await
newPrivateWindowPromise
;
ok
(
PrivateBrowsingUtils
.
isBrowserPrivate
(
newPrivateWindow
.
gBrowser
)
"
New
window
is
private
"
)
;
await
Promise
.
all
(
[
BrowserTestUtils
.
closeWindow
(
privateWindow
)
BrowserTestUtils
.
closeWindow
(
newPrivateWindow
)
]
)
;
info
(
"
Closed
all
windows
"
)
;
}
