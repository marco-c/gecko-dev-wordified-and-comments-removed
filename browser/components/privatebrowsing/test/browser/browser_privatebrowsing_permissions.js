"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
"
;
const
TEST_PRINCIPAL
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
TEST_URL
)
{
privateBrowsingId
:
1
}
)
;
async
function
checkNotificationPermission
(
tab
isAllowExpected
)
{
let
permission
=
Services
.
perms
.
testExactPermissionFromPrincipal
(
TEST_PRINCIPAL
"
desktop
-
notification
"
)
;
is
(
permission
isAllowExpected
?
Services
.
perms
.
ALLOW_ACTION
:
Services
.
perms
.
UNKNOWN_ACTION
Permission
{
isAllowExpected
?
"
should
"
:
"
should
not
"
}
exist
in
permission
manager
)
;
await
SpecialPowers
.
spawn
(
tab
[
isAllowExpected
]
_isAllowExpected
=
>
{
is
(
content
.
Notification
.
permission
_isAllowExpected
?
"
granted
"
:
"
default
"
The
notification
API
{
_isAllowExpected
?
"
should
"
:
"
should
not
"
}
allow
notification
)
;
}
)
;
}
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
webnotifications
.
requireuserinteraction
"
false
]
]
}
)
;
let
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
privateTab
=
privateWindow
.
gBrowser
.
selectedBrowser
;
info
(
"
Checking
permissions
before
test
"
)
;
await
checkNotificationPermission
(
privateTab
false
)
;
BrowserTestUtils
.
startLoadingURIString
(
privateTab
TEST_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
privateTab
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
privateWindow
.
PopupNotifications
.
panel
"
popupshown
"
)
;
await
SpecialPowers
.
spawn
(
privateTab
[
]
(
)
=
>
{
content
.
Notification
.
requestPermission
(
)
;
}
)
;
await
popupShown
;
let
notification
=
privateWindow
.
PopupNotifications
.
panel
.
firstElementChild
;
let
popupHidden
=
BrowserTestUtils
.
waitForEvent
(
privateWindow
.
PopupNotifications
.
panel
"
popuphidden
"
)
;
notification
.
button
.
click
(
)
;
await
popupHidden
;
info
(
"
Checking
permissions
after
permission
was
granted
"
)
;
await
checkNotificationPermission
(
privateTab
true
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
privateTab
=
privateWindow
.
gBrowser
.
selectedBrowser
;
BrowserTestUtils
.
startLoadingURIString
(
privateTab
TEST_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
privateTab
)
;
info
(
"
Checking
permissions
after
pbm
window
got
reopened
"
)
;
await
checkNotificationPermission
(
privateTab
false
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
