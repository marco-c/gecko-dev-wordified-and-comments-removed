add_task
(
function
*
test
(
)
{
let
windowsToClose
=
[
]
;
let
windowsToReset
=
[
]
;
function
promiseLocationChange
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
onLocationChange
(
subj
topic
data
)
{
Services
.
obs
.
removeObserver
(
onLocationChange
topic
)
;
resolve
(
)
;
}
"
browser
-
fullZoom
:
location
-
change
"
false
)
;
}
)
;
}
function
promiseTestReady
(
aIsZoomedWindow
aWindow
)
{
let
browser
=
aWindow
.
gBrowser
.
selectedBrowser
;
return
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
.
then
(
(
)
=
>
{
return
Promise
.
all
(
[
BrowserTestUtils
.
browserLoaded
(
browser
)
promiseLocationChange
(
)
]
)
;
}
)
.
then
(
(
)
=
>
doTest
(
aIsZoomedWindow
aWindow
)
)
;
}
function
doTest
(
aIsZoomedWindow
aWindow
)
{
if
(
aIsZoomedWindow
)
{
is
(
aWindow
.
ZoomManager
.
zoom
1
"
Zoom
level
for
freshly
loaded
about
:
blank
should
be
1
"
)
;
aWindow
.
FullZoom
.
enlarge
(
)
;
isnot
(
aWindow
.
ZoomManager
.
zoom
1
"
Zoom
level
for
about
:
blank
should
be
changed
"
)
;
return
;
}
is
(
aWindow
.
ZoomManager
.
zoom
1
"
Zoom
level
for
about
:
privatebrowsing
should
be
reset
"
)
;
}
function
testOnWindow
(
options
callback
)
{
return
BrowserTestUtils
.
openNewBrowserWindow
(
options
)
.
then
(
(
win
)
=
>
{
windowsToClose
.
push
(
win
)
;
windowsToReset
.
push
(
win
)
;
return
win
;
}
)
;
}
yield
testOnWindow
(
{
}
)
.
then
(
win
=
>
promiseTestReady
(
true
win
)
)
;
yield
testOnWindow
(
{
private
:
true
}
)
.
then
(
win
=
>
promiseTestReady
(
false
win
)
)
;
windowsToReset
.
forEach
(
(
win
)
=
>
win
.
FullZoom
.
reset
(
)
)
;
yield
Promise
.
all
(
windowsToClose
.
map
(
win
=
>
BrowserTestUtils
.
closeWindow
(
win
)
)
)
;
}
)
;
