add_task
(
async
function
test
(
)
{
const
TEST_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
"
+
"
privatebrowsing
/
test
/
browser
/
title
.
sjs
"
;
let
cm
=
Services
.
cookies
;
function
cleanup
(
)
{
cm
.
removeAll
(
)
;
return
PlacesUtils
.
history
.
clear
(
)
;
}
await
cleanup
(
)
;
registerCleanupFunction
(
cleanup
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
let
promiseTitleChanged
=
PlacesTestUtils
.
waitForNotification
(
"
onTitleChanged
"
(
uri
title
)
=
>
uri
.
spec
=
=
TEST_URL
"
history
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
TEST_URL
)
;
await
promiseTitleChanged
;
await
BrowserTestUtils
.
waitForCondition
(
async
function
(
)
{
let
entry
=
await
PlacesUtils
.
history
.
fetch
(
TEST_URL
)
;
return
entry
&
&
entry
.
title
=
=
"
No
Cookie
"
;
}
"
The
page
should
be
loaded
without
any
cookie
for
the
first
time
"
)
;
promiseTitleChanged
=
PlacesTestUtils
.
waitForNotification
(
"
onTitleChanged
"
(
uri
title
)
=
>
uri
.
spec
=
=
TEST_URL
"
history
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
TEST_URL
)
;
await
promiseTitleChanged
;
await
BrowserTestUtils
.
waitForCondition
(
async
function
(
)
{
let
entry
=
await
PlacesUtils
.
history
.
fetch
(
TEST_URL
)
;
return
entry
&
&
entry
.
title
=
=
"
Cookie
"
;
}
"
The
page
should
be
loaded
with
a
cookie
for
the
second
time
"
)
;
await
cleanup
(
)
;
promiseTitleChanged
=
PlacesTestUtils
.
waitForNotification
(
"
onTitleChanged
"
(
uri
title
)
=
>
uri
.
spec
=
=
TEST_URL
"
history
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
TEST_URL
)
;
await
promiseTitleChanged
;
await
BrowserTestUtils
.
waitForCondition
(
async
function
(
)
{
let
entry
=
await
PlacesUtils
.
history
.
fetch
(
TEST_URL
)
;
return
entry
&
&
entry
.
title
=
=
"
No
Cookie
"
;
}
"
The
page
should
be
loaded
without
any
cookie
again
"
)
;
let
win2
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
let
promisePBExit
=
TestUtils
.
topicObserved
(
"
last
-
pb
-
context
-
exited
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
await
promisePBExit
;
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win2
.
gBrowser
TEST_URL
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
is
(
(
await
PlacesUtils
.
history
.
fetch
(
TEST_URL
)
)
.
title
"
No
Cookie
"
"
The
title
remains
the
same
after
visiting
in
private
window
"
)
;
}
)
;
