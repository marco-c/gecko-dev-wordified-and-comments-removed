const
{
Region
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
)
;
const
{
ASRouter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouter
.
jsm
"
)
;
const
initialHomeRegion
=
Region
.
_home
;
const
intialCurrentRegion
=
Region
.
_current
;
async
function
setupRegions
(
home
current
)
{
Region
.
_setHomeRegion
(
home
|
|
"
"
)
;
Region
.
_setCurrentRegion
(
current
|
|
"
"
)
;
}
add_task
(
async
function
test_focus_promo_in_allowed_region
(
)
{
ASRouter
.
resetMessageState
(
)
;
const
allowedRegion
=
"
ES
"
;
setupRegions
(
allowedRegion
allowedRegion
)
;
const
{
win
tab
}
=
await
openTabAndWaitForRender
(
)
;
await
SpecialPowers
.
spawn
(
tab
[
]
async
function
(
)
{
const
promoContainer
=
content
.
document
.
querySelector
(
"
.
promo
"
)
;
ok
(
promoContainer
"
Focus
promo
is
shown
for
allowed
region
"
)
;
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
setupRegions
(
initialHomeRegion
intialCurrentRegion
)
;
}
)
;
add_task
(
async
function
test_focus_promo_in_disallowed_region
(
)
{
ASRouter
.
resetMessageState
(
)
;
const
disallowedRegion
=
"
CN
"
;
setupRegions
(
disallowedRegion
)
;
const
{
win
tab
}
=
await
openTabAndWaitForRender
(
)
;
await
SpecialPowers
.
spawn
(
tab
[
]
async
function
(
)
{
const
promoContainer
=
content
.
document
.
querySelector
(
"
.
promo
"
)
;
ok
(
!
promoContainer
"
Focus
promo
is
not
shown
for
disallowed
region
"
)
;
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
setupRegions
(
initialHomeRegion
intialCurrentRegion
)
;
}
)
;
