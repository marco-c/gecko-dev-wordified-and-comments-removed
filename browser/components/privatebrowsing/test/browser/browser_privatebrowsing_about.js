const
TP_PB_ENABLED_PREF
=
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
;
const
CB_ENABLED_PREF
=
"
browser
.
contentblocking
.
enabled
"
;
async
function
openAboutPrivateBrowsing
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
waitForTabURL
:
"
about
:
privatebrowsing
"
}
)
;
let
tab
=
win
.
gBrowser
.
selectedBrowser
;
return
{
win
tab
}
;
}
async
function
testLinkOpensTab
(
{
win
tab
elementId
expectedUrl
}
)
{
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
win
.
gBrowser
expectedUrl
)
;
await
ContentTask
.
spawn
(
tab
elementId
async
function
(
elemId
)
{
content
.
document
.
getElementById
(
elemId
)
.
click
(
)
;
}
)
;
let
newTab
=
await
newTabPromise
;
ok
(
true
Clicking
{
elementId
}
opened
{
expectedUrl
}
in
a
new
tab
.
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
async
function
testLinkOpensUrl
(
{
win
tab
elementId
expectedUrl
}
)
{
let
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
)
;
await
ContentTask
.
spawn
(
tab
elementId
async
function
(
elemId
)
{
content
.
document
.
getElementById
(
elemId
)
.
click
(
)
;
}
)
;
await
loadedPromise
;
is
(
tab
.
currentURI
.
spec
expectedUrl
Clicking
{
elementId
}
opened
{
expectedUrl
}
in
the
same
tab
.
)
;
}
add_task
(
async
function
test_links
(
)
{
Services
.
prefs
.
setCharPref
(
"
app
.
support
.
baseURL
"
"
https
:
/
/
example
.
com
/
"
)
;
Services
.
prefs
.
setCharPref
(
"
privacy
.
trackingprotection
.
introURL
"
"
https
:
/
/
example
.
com
/
tour
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
privacy
.
trackingprotection
.
introURL
"
)
;
Services
.
prefs
.
clearUserPref
(
"
app
.
support
.
baseURL
"
)
;
}
)
;
let
{
win
tab
}
=
await
openAboutPrivateBrowsing
(
)
;
await
testLinkOpensTab
(
{
win
tab
elementId
:
"
learnMore
"
expectedUrl
:
"
https
:
/
/
example
.
com
/
private
-
browsing
"
}
)
;
await
testLinkOpensUrl
(
{
win
tab
elementId
:
"
startTour
"
expectedUrl
:
"
https
:
/
/
example
.
com
/
tour
?
variation
=
1
"
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
