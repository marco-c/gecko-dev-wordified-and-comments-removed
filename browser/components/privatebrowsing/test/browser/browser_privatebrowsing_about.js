const
{
UrlbarTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
jsm
"
)
;
async
function
testLinkOpensUrl
(
{
win
tab
elementId
expectedUrl
}
)
{
let
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
)
;
await
ContentTask
.
spawn
(
tab
elementId
async
function
(
elemId
)
{
content
.
document
.
getElementById
(
elemId
)
.
click
(
)
;
}
)
;
await
loadedPromise
;
is
(
tab
.
currentURI
.
spec
expectedUrl
Clicking
{
elementId
}
opened
{
expectedUrl
}
in
the
same
tab
.
)
;
}
let
expectedEngineAlias
;
let
expectedIconURL
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
"
true
]
]
}
)
;
const
originalPrivateDefault
=
await
Services
.
search
.
getDefaultPrivate
(
)
;
const
privateEngine
=
await
Services
.
search
.
getEngineByName
(
"
DuckDuckGo
"
)
;
await
Services
.
search
.
setDefaultPrivate
(
privateEngine
)
;
expectedEngineAlias
=
privateEngine
.
wrappedJSObject
.
__internalAliases
[
0
]
;
expectedIconURL
=
privateEngine
.
iconURI
.
spec
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
setDefaultPrivate
(
originalPrivateDefault
)
;
}
)
;
}
)
;
add_task
(
async
function
test_myths_link
(
)
{
Services
.
prefs
.
setCharPref
(
"
app
.
support
.
baseURL
"
"
https
:
/
/
example
.
com
/
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
app
.
support
.
baseURL
"
)
;
}
)
;
let
{
win
tab
}
=
await
openAboutPrivateBrowsing
(
)
;
await
testLinkOpensUrl
(
{
win
tab
elementId
:
"
private
-
browsing
-
myths
"
expectedUrl
:
"
https
:
/
/
example
.
com
/
private
-
browsing
-
myths
"
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
function
urlBarHasHiddenFocus
(
win
)
{
return
(
win
.
gURLBar
.
hasAttribute
(
"
focused
"
)
&
&
win
.
gURLBar
.
textbox
.
classList
.
contains
(
"
hidden
-
focus
"
)
)
;
}
function
urlBarHasNormalFocus
(
win
)
{
return
(
win
.
gURLBar
.
hasAttribute
(
"
focused
"
)
&
&
!
win
.
gURLBar
.
textbox
.
classList
.
contains
(
"
hidden
-
focus
"
)
)
;
}
add_task
(
async
function
test_search_icon
(
)
{
let
{
win
tab
}
=
await
openAboutPrivateBrowsing
(
)
;
await
ContentTask
.
spawn
(
tab
expectedIconURL
async
function
(
iconURL
)
{
is
(
content
.
document
.
body
.
getAttribute
(
"
style
"
)
-
-
newtab
-
search
-
icon
:
url
(
{
iconURL
}
)
;
"
Should
have
the
correct
icon
URL
for
the
logo
"
)
;
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_search_handoff_on_keydown
(
)
{
let
{
win
tab
}
=
await
openAboutPrivateBrowsing
(
)
;
await
ContentTask
.
spawn
(
tab
null
async
function
(
)
{
let
btn
=
content
.
document
.
getElementById
(
"
search
-
handoff
-
button
"
)
;
btn
.
click
(
)
;
ok
(
btn
.
classList
.
contains
(
"
focused
"
)
"
in
-
content
search
has
focus
styles
"
)
;
}
)
;
ok
(
urlBarHasHiddenFocus
(
win
)
"
url
bar
has
hidden
focused
"
)
;
await
new
Promise
(
r
=
>
EventUtils
.
synthesizeKey
(
"
f
"
{
}
win
r
)
)
;
await
ContentTask
.
spawn
(
tab
null
async
function
(
)
{
ok
(
content
.
document
.
getElementById
(
"
search
-
handoff
-
button
"
)
.
classList
.
contains
(
"
hidden
"
)
"
in
-
content
search
is
hidden
"
)
;
}
)
;
ok
(
urlBarHasNormalFocus
(
win
)
"
url
bar
has
normal
focused
"
)
;
is
(
win
.
gURLBar
.
value
{
expectedEngineAlias
}
f
"
url
bar
has
search
text
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
await
new
Promise
(
r
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
win
r
)
)
;
await
ContentTask
.
spawn
(
tab
null
async
function
(
)
{
ok
(
!
content
.
document
.
getElementById
(
"
search
-
handoff
-
button
"
)
.
classList
.
contains
(
"
hidden
"
)
"
in
-
content
search
is
not
hidden
"
)
;
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_search_handoff_on_composition_start
(
)
{
let
{
win
tab
}
=
await
openAboutPrivateBrowsing
(
)
;
await
ContentTask
.
spawn
(
tab
null
async
function
(
)
{
content
.
document
.
getElementById
(
"
search
-
handoff
-
button
"
)
.
click
(
)
;
}
)
;
ok
(
urlBarHasHiddenFocus
(
win
)
"
url
bar
has
hidden
focused
"
)
;
await
new
Promise
(
r
=
>
EventUtils
.
synthesizeComposition
(
{
type
:
"
compositionstart
"
}
win
r
)
)
;
ok
(
urlBarHasNormalFocus
(
win
)
"
url
bar
has
normal
focused
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_search_handoff_on_paste
(
)
{
let
{
win
tab
}
=
await
openAboutPrivateBrowsing
(
)
;
await
ContentTask
.
spawn
(
tab
null
async
function
(
)
{
content
.
document
.
getElementById
(
"
search
-
handoff
-
button
"
)
.
click
(
)
;
}
)
;
ok
(
urlBarHasHiddenFocus
(
win
)
"
url
bar
has
hidden
focused
"
)
;
var
helper
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIClipboardHelper
)
;
helper
.
copyString
(
"
words
"
)
;
await
new
Promise
(
r
=
>
EventUtils
.
synthesizeKey
(
"
v
"
{
accelKey
:
true
}
win
r
)
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
ok
(
urlBarHasNormalFocus
(
win
)
"
url
bar
has
normal
focused
"
)
;
is
(
win
.
gURLBar
.
value
{
expectedEngineAlias
}
words
"
url
bar
has
search
text
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
