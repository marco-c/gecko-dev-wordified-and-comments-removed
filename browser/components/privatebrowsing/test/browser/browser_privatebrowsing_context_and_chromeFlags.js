"
use
strict
"
;
function
assertWindowIsPrivate
(
win
)
{
let
winDocShell
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
;
let
chromeFlags
=
winDocShell
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
treeOwner
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIXULWindow
)
.
chromeFlags
;
if
(
!
win
.
gBrowser
.
selectedBrowser
.
hasContentOpener
)
{
Assert
.
ok
(
chromeFlags
&
Ci
.
nsIWebBrowserChrome
.
CHROME_PRIVATE_WINDOW
"
Should
have
the
private
window
chrome
flag
"
)
;
}
let
loadContext
=
winDocShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
Assert
.
ok
(
loadContext
.
usePrivateBrowsing
"
The
parent
window
should
be
using
private
browsing
"
)
;
return
ContentTask
.
spawn
(
win
.
gBrowser
.
selectedBrowser
null
function
*
(
)
{
let
loadContext
=
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
Assert
.
ok
(
loadContext
.
usePrivateBrowsing
"
Content
docShell
should
be
using
private
browsing
"
)
;
}
)
;
}
add_task
(
function
*
test_context_and_chromeFlags
(
)
{
let
win
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
yield
assertWindowIsPrivate
(
win
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
let
newWinPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
yield
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
content
.
open
(
"
http
:
/
/
example
.
com
"
"
_blank
"
"
width
=
100
height
=
100
"
)
;
}
)
;
let
win2
=
yield
newWinPromise
;
yield
assertWindowIsPrivate
(
win2
)
;
yield
BrowserTestUtils
.
closeWindow
(
win2
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
