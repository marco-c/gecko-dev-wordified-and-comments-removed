const
fs
=
require
(
"
fs
"
)
;
const
{
mkdir
}
=
require
(
"
shelljs
"
)
;
const
path
=
require
(
"
path
"
)
;
const
DEFAULT_OPTIONS
=
{
addonPath
:
"
.
.
"
baseUrl
:
"
resource
:
/
/
activity
-
stream
/
"
}
;
function
templateHTML
(
options
)
{
const
debugString
=
options
.
debug
?
"
-
dev
"
:
"
"
;
const
scripts
=
[
"
chrome
:
/
/
browser
/
content
/
contentSearchUI
.
js
"
"
chrome
:
/
/
browser
/
content
/
contentSearchHandoffUI
.
js
"
"
chrome
:
/
/
browser
/
content
/
contentTheme
.
js
"
{
options
.
baseUrl
}
vendor
/
react
{
debugString
}
.
js
{
options
.
baseUrl
}
vendor
/
react
-
dom
{
debugString
}
.
js
{
options
.
baseUrl
}
vendor
/
prop
-
types
.
js
{
options
.
baseUrl
}
vendor
/
redux
.
js
{
options
.
baseUrl
}
vendor
/
react
-
redux
.
js
{
options
.
baseUrl
}
vendor
/
react
-
transition
-
group
.
js
{
options
.
baseUrl
}
data
/
content
/
activity
-
stream
.
bundle
.
js
{
options
.
baseUrl
}
data
/
content
/
newtab
-
render
.
js
]
;
const
scriptRender
=
\
n
{
scripts
.
map
(
script
=
>
<
script
src
=
"
{
script
}
"
>
<
/
script
>
)
.
join
(
"
\
n
"
)
}
;
return
<
!
-
-
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
-
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
-
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
-
-
>
<
!
doctype
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
meta
http
-
equiv
=
"
Content
-
Security
-
Policy
"
content
=
"
default
-
src
'
none
'
;
object
-
src
'
none
'
;
script
-
src
resource
:
chrome
:
;
connect
-
src
https
:
;
img
-
src
https
:
data
:
blob
:
;
style
-
src
'
unsafe
-
inline
'
;
"
>
<
title
data
-
l10n
-
id
=
"
newtab
-
page
-
title
"
>
<
/
title
>
<
link
rel
=
"
icon
"
type
=
"
image
/
png
"
href
=
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
/
>
<
link
rel
=
"
localization
"
href
=
"
branding
/
brand
.
ftl
"
/
>
<
link
rel
=
"
localization
"
href
=
"
browser
/
branding
/
brandings
.
ftl
"
/
>
<
link
rel
=
"
localization
"
href
=
"
browser
/
newtab
/
newtab
.
ftl
"
/
>
<
link
rel
=
"
stylesheet
"
href
=
"
chrome
:
/
/
browser
/
content
/
contentSearchUI
.
css
"
/
>
<
link
rel
=
"
stylesheet
"
href
=
"
chrome
:
/
/
activity
-
stream
/
content
/
css
/
activity
-
stream
.
css
"
/
>
<
/
head
>
<
body
class
=
"
activity
-
stream
"
>
<
div
id
=
"
header
-
asrouter
-
container
"
role
=
"
presentation
"
>
<
/
div
>
<
div
id
=
"
root
"
>
<
/
div
>
<
div
id
=
"
footer
-
asrouter
-
container
"
role
=
"
presentation
"
>
<
/
div
>
{
options
.
noscripts
?
"
"
:
scriptRender
}
<
/
body
>
<
/
html
>
.
trimLeft
(
)
;
}
function
writeFiles
(
destPath
filesMap
options
)
{
for
(
const
[
file
templater
]
of
filesMap
)
{
console
.
log
(
"
\
x1b
[
32m
"
{
file
}
"
\
x1b
[
0m
"
)
;
fs
.
writeFileSync
(
path
.
join
(
destPath
file
)
templater
(
{
options
}
)
)
;
}
}
const
STATIC_FILES
=
new
Map
(
[
[
"
activity
-
stream
.
html
"
(
{
options
}
)
=
>
templateHTML
(
options
)
]
[
"
activity
-
stream
-
debug
.
html
"
(
{
options
}
)
=
>
templateHTML
(
Object
.
assign
(
{
}
options
{
debug
:
true
}
)
)
]
[
"
activity
-
stream
-
noscripts
.
html
"
(
{
options
}
)
=
>
templateHTML
(
Object
.
assign
(
{
}
options
{
noscripts
:
true
}
)
)
]
]
)
;
function
main
(
)
{
const
args
=
require
(
"
minimist
"
)
(
process
.
argv
.
slice
(
2
)
{
alias
:
{
addonPath
:
"
a
"
baseUrl
:
"
b
"
}
}
)
;
const
options
=
Object
.
assign
(
{
debug
:
false
}
DEFAULT_OPTIONS
args
|
|
{
}
)
;
const
addonPath
=
path
.
resolve
(
__dirname
options
.
addonPath
)
;
const
prerenderedPath
=
path
.
join
(
addonPath
"
prerendered
"
)
;
console
.
log
(
Writing
prerendered
files
to
{
prerenderedPath
}
:
)
;
mkdir
(
"
-
p
"
prerenderedPath
)
;
writeFiles
(
prerenderedPath
STATIC_FILES
options
)
;
}
main
(
)
;
