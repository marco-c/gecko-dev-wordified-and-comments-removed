"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
EXTRAS_FIELD_NAMES
=
[
"
addon_version
"
"
session_id
"
"
page
"
"
user_prefs
"
"
action_position
"
]
;
this
.
UTEventReporting
=
class
UTEventReporting
{
constructor
(
)
{
Services
.
telemetry
.
setEventRecordingEnabled
(
"
activity_stream
"
true
)
;
this
.
sendUserEvent
=
this
.
sendUserEvent
.
bind
(
this
)
;
this
.
sendSessionEndEvent
=
this
.
sendSessionEndEvent
.
bind
(
this
)
;
}
_createExtras
(
data
)
{
let
utExtras
=
Object
.
assign
(
{
}
data
)
;
for
(
let
field
of
Object
.
keys
(
utExtras
)
)
{
if
(
EXTRAS_FIELD_NAMES
.
includes
(
field
)
)
{
utExtras
[
field
]
=
String
(
utExtras
[
field
]
)
;
continue
;
}
delete
utExtras
[
field
]
;
}
return
utExtras
;
}
sendUserEvent
(
data
)
{
let
mainFields
=
[
"
event
"
"
source
"
]
;
let
eventFields
=
mainFields
.
map
(
field
=
>
String
(
data
[
field
]
)
|
|
null
)
;
Services
.
telemetry
.
recordEvent
(
"
activity_stream
"
"
event
"
.
.
.
eventFields
this
.
_createExtras
(
data
)
)
;
}
sendSessionEndEvent
(
data
)
{
Services
.
telemetry
.
recordEvent
(
"
activity_stream
"
"
end
"
"
session
"
String
(
data
.
session_duration
)
this
.
_createExtras
(
data
)
)
;
}
uninit
(
)
{
Services
.
telemetry
.
setEventRecordingEnabled
(
"
activity_stream
"
false
)
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
UTEventReporting
"
]
;
