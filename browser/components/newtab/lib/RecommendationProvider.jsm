"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
PersonalityProvider
"
"
resource
:
/
/
activity
-
stream
/
lib
/
PersonalityProvider
/
PersonalityProvider
.
jsm
"
)
;
const
{
actionTypes
:
at
actionCreators
:
ac
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
)
;
const
PREF_PERSONALIZATION_MODEL_KEYS
=
"
discoverystream
.
personalization
.
modelKeys
"
;
const
PREF_PERSONALIZATION
=
"
discoverystream
.
personalization
.
enabled
"
;
class
RecommendationProvider
{
setProvider
(
scores
)
{
if
(
this
.
provider
)
{
return
;
}
this
.
provider
=
new
PersonalityProvider
(
this
.
modelKeys
)
;
this
.
provider
.
setScores
(
scores
)
;
}
async
init
(
)
{
if
(
this
.
provider
&
&
this
.
provider
.
init
)
{
await
this
.
provider
.
init
(
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_PERSONALIZATION_INIT
}
)
)
;
}
}
get
modelKeys
(
)
{
if
(
!
this
.
_modelKeys
)
{
this
.
_modelKeys
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION_MODEL_KEYS
]
;
}
return
this
.
_modelKeys
;
}
getScores
(
)
{
return
this
.
provider
.
getScores
(
)
;
}
async
calculateItemRelevanceScore
(
item
)
{
if
(
this
.
provider
)
{
const
scoreResult
=
await
this
.
provider
.
calculateItemRelevanceScore
(
item
)
;
if
(
scoreResult
=
=
=
0
|
|
scoreResult
)
{
item
.
score
=
scoreResult
;
}
}
}
teardown
(
)
{
if
(
this
.
provider
&
&
this
.
provider
.
teardown
)
{
this
.
provider
.
teardown
(
)
;
}
}
resetState
(
)
{
this
.
_modelKeys
=
null
;
this
.
provider
=
null
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
DISCOVERY_STREAM_CONFIG_CHANGE
:
this
.
teardown
(
)
;
this
.
resetState
(
)
;
break
;
case
at
.
PREF_CHANGED
:
switch
(
action
.
data
.
name
)
{
case
PREF_PERSONALIZATION_MODEL_KEYS
:
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_CONFIG_RESET
}
)
)
;
break
;
}
break
;
case
at
.
DISCOVERY_STREAM_PERSONALIZATION_TOGGLE
:
let
enabled
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION
]
;
this
.
store
.
dispatch
(
ac
.
SetPref
(
PREF_PERSONALIZATION
!
enabled
)
)
;
break
;
}
}
}
const
EXPORTED_SYMBOLS
=
[
"
RecommendationProvider
"
]
;
