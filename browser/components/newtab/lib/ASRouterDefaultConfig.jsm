"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ASRouterDefaultConfig
"
]
;
const
{
ASRouter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouter
.
jsm
"
)
;
const
{
ASRouterTelemetry
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterTelemetry
.
jsm
"
)
;
const
{
ASRouterParentProcessMessageHandler
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterParentProcessMessageHandler
.
jsm
"
)
;
const
{
SpecialMessageActions
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
messaging
-
system
/
lib
/
SpecialMessageActions
.
jsm
"
)
;
const
{
ASRouterPreferences
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterPreferences
.
jsm
"
)
;
const
{
QueryCache
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterTargeting
.
jsm
"
)
;
const
{
ActivityStreamStorage
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamStorage
.
jsm
"
)
;
const
createStorage
=
async
(
)
=
>
{
const
dbStore
=
new
ActivityStreamStorage
(
{
storeNames
:
[
"
snippets
"
]
}
)
;
try
{
await
dbStore
.
db
;
}
catch
(
e
)
{
return
Promise
.
reject
(
e
)
;
}
return
dbStore
.
getDbTable
(
"
snippets
"
)
;
}
;
const
ASRouterDefaultConfig
=
(
)
=
>
{
const
router
=
ASRouter
;
const
telemetry
=
new
ASRouterTelemetry
(
)
;
const
messageHandler
=
new
ASRouterParentProcessMessageHandler
(
{
router
preferences
:
ASRouterPreferences
specialMessageActions
:
SpecialMessageActions
queryCache
:
QueryCache
sendTelemetry
:
telemetry
.
sendTelemetry
}
)
;
return
{
router
messageHandler
createStorage
}
;
}
;
