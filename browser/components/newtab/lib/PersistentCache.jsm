"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
this
.
PersistentCache
=
class
PersistentCache
{
constructor
(
name
preload
=
false
)
{
this
.
name
=
name
;
this
.
_filename
=
activity
-
stream
.
{
name
}
.
json
;
if
(
preload
)
{
this
.
_load
(
)
;
}
}
async
set
(
key
value
)
{
const
data
=
await
this
.
_load
(
)
;
data
[
key
]
=
value
;
await
this
.
_persist
(
data
)
;
}
async
get
(
key
)
{
const
data
=
await
this
.
_load
(
)
;
return
key
?
data
[
key
]
:
data
;
}
_load
(
)
{
return
(
this
.
_cache
|
|
(
this
.
_cache
=
new
Promise
(
async
(
resolve
reject
)
=
>
{
let
filepath
;
try
{
filepath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
localProfileDir
this
.
_filename
)
;
}
catch
(
error
)
{
reject
(
error
)
;
return
;
}
let
file
;
try
{
file
=
await
fetch
(
file
:
/
/
{
filepath
}
)
;
}
catch
(
error
)
{
}
let
data
=
{
}
;
if
(
file
)
{
try
{
data
=
await
file
.
json
(
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
Failed
to
parse
{
this
.
_filename
}
:
{
error
.
message
}
)
;
}
}
resolve
(
data
)
;
}
)
)
)
;
}
_persist
(
data
)
{
const
filepath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
localProfileDir
this
.
_filename
)
;
return
OS
.
File
.
writeAtomic
(
filepath
JSON
.
stringify
(
data
)
{
tmpPath
:
{
filepath
}
.
tmp
}
)
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
PersistentCache
"
]
;
