"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
RemoteL10n
:
"
resource
:
/
/
activity
-
stream
/
lib
/
RemoteL10n
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
lazy
{
AlertsService
:
[
"
mozilla
.
org
/
alerts
-
service
;
1
"
"
nsIAlertsService
"
]
}
)
;
const
ToastNotification
=
{
get
AlertsService
(
)
{
return
lazy
.
AlertsService
;
}
sendUserEventTelemetry
(
event
message
dispatch
)
{
const
ping
=
{
message_id
:
message
.
id
event
}
;
dispatch
(
{
type
:
"
TOAST_NOTIFICATION_TELEMETRY
"
data
:
{
action
:
"
toast_notification_user_event
"
.
.
.
ping
}
}
)
;
}
async
showToastNotification
(
message
dispatch
)
{
let
{
content
}
=
message
;
let
title
=
await
lazy
.
RemoteL10n
.
formatLocalizableText
(
content
.
title
)
;
let
body
=
await
lazy
.
RemoteL10n
.
formatLocalizableText
(
content
.
body
)
;
this
.
sendUserEventTelemetry
(
"
IMPRESSION
"
message
dispatch
)
;
dispatch
(
{
type
:
"
IMPRESSION
"
data
:
message
}
)
;
let
alert
=
Cc
[
"
mozilla
.
org
/
alert
-
notification
;
1
"
]
.
createInstance
(
Ci
.
nsIAlertNotification
)
;
alert
.
init
(
null
content
.
image_url
title
body
true
content
.
tag
null
null
content
.
data
null
null
content
.
requireInteraction
)
;
alert
.
initActions
(
content
.
actions
|
|
[
]
)
;
this
.
AlertsService
.
showAlert
(
alert
)
;
return
true
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
ToastNotification
"
]
;
