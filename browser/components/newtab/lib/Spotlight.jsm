"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
AboutWelcomeTelemetry
:
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
lib
/
AboutWelcomeTelemetry
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
AWTelemetry
"
(
)
=
>
new
lazy
.
AboutWelcomeTelemetry
(
)
)
;
const
Spotlight
=
{
sendUserEventTelemetry
(
event
message
dispatch
)
{
const
message_id
=
message
.
content
.
id
;
const
ping
=
{
message_id
event
}
;
dispatch
(
{
type
:
"
SPOTLIGHT_TELEMETRY
"
data
:
{
action
:
"
spotlight_user_event
"
.
.
.
ping
}
}
)
;
}
defaultDispatch
(
message
)
{
if
(
message
.
type
=
=
=
"
SPOTLIGHT_TELEMETRY
"
)
{
const
{
message_id
event
}
=
message
.
data
;
lazy
.
AWTelemetry
.
sendTelemetry
(
{
message_id
event
}
)
;
}
}
async
showSpotlightDialog
(
browser
message
dispatch
=
this
.
defaultDispatch
)
{
const
win
=
browser
.
ownerGlobal
;
if
(
win
.
gDialogBox
.
isOpen
)
{
return
false
;
}
const
spotlight_url
=
"
chrome
:
/
/
browser
/
content
/
spotlight
.
html
"
;
const
dispatchCFRAction
=
message
.
content
?
.
metrics
=
=
=
"
block
"
?
(
)
=
>
{
}
:
dispatch
;
let
params
=
{
primaryBtn
:
false
secondaryBtn
:
false
}
;
this
.
sendUserEventTelemetry
(
"
IMPRESSION
"
message
dispatchCFRAction
)
;
dispatchCFRAction
(
{
type
:
"
IMPRESSION
"
data
:
message
}
)
;
if
(
message
.
content
?
.
modal
=
=
=
"
tab
"
)
{
let
{
closedPromise
}
=
win
.
gBrowser
.
getTabDialogBox
(
browser
)
.
open
(
spotlight_url
{
features
:
"
resizable
=
no
"
allowDuplicateDialogs
:
false
}
[
message
.
content
params
]
)
;
await
closedPromise
;
}
else
{
await
win
.
gDialogBox
.
open
(
spotlight_url
[
message
.
content
params
]
)
;
}
this
.
sendUserEventTelemetry
(
"
DISMISS
"
message
dispatchCFRAction
)
;
return
true
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
Spotlight
"
]
;
