"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
UserDomainAffinityProvider
"
"
resource
:
/
/
activity
-
stream
/
lib
/
UserDomainAffinityProvider
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PersonalityProvider
"
"
resource
:
/
/
activity
-
stream
/
lib
/
PersonalityProvider
/
PersonalityProvider
.
jsm
"
)
;
const
{
actionTypes
:
at
actionCreators
:
ac
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
perfService
"
"
resource
:
/
/
activity
-
stream
/
common
/
PerfService
.
jsm
"
)
;
const
PREF_PERSONALIZATION_VERSION
=
"
discoverystream
.
personalization
.
version
"
;
const
PREF_PERSONALIZATION_MODEL_KEYS
=
"
discoverystream
.
personalization
.
modelKeys
"
;
this
.
RecommendationProviderSwitcher
=
class
RecommendationProviderSwitcher
{
setAffinityProvider
(
.
.
.
args
)
{
const
{
affinityProviderV2
}
=
this
;
if
(
affinityProviderV2
&
&
affinityProviderV2
.
modelKeys
)
{
this
.
affinityProvider
=
new
PersonalityProvider
(
.
.
.
args
{
modelKeys
:
affinityProviderV2
.
modelKeys
dispatch
:
this
.
store
.
dispatch
}
)
;
return
;
}
const
start
=
perfService
.
absNow
(
)
;
this
.
affinityProvider
=
new
UserDomainAffinityProvider
(
.
.
.
args
)
;
this
.
store
.
dispatch
(
ac
.
PerfEvent
(
{
event
:
"
topstories
.
domain
.
affinity
.
calculation
.
ms
"
value
:
Math
.
round
(
perfService
.
absNow
(
)
-
start
)
}
)
)
;
}
async
init
(
)
{
if
(
this
.
affinityProvider
&
&
this
.
affinityProvider
.
init
)
{
await
this
.
affinityProvider
.
init
(
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_PERSONALIZATION_INIT
}
)
)
;
}
}
setVersion
(
)
{
const
version
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION_VERSION
]
;
const
modelKeys
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION_MODEL_KEYS
]
;
if
(
version
=
=
=
2
&
&
modelKeys
)
{
this
.
affinityProviderV2
=
{
modelKeys
:
modelKeys
.
split
(
"
"
)
.
map
(
i
=
>
i
.
trim
(
)
)
}
;
}
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_PERSONALIZATION_VERSION
data
:
{
version
}
}
)
)
;
}
getAffinities
(
)
{
return
this
.
affinityProvider
.
getAffinities
(
)
;
}
dispatchRelevanceScoreDuration
(
scoreStart
)
{
if
(
this
.
affinityProvider
)
{
if
(
this
.
affinityProvider
.
dispatchRelevanceScoreDuration
)
{
this
.
affinityProvider
.
dispatchRelevanceScoreDuration
(
scoreStart
)
;
}
else
{
this
.
store
.
dispatch
(
ac
.
PerfEvent
(
{
event
:
"
PERSONALIZATION_V1_ITEM_RELEVANCE_SCORE_DURATION
"
value
:
Math
.
round
(
perfService
.
absNow
(
)
-
scoreStart
)
}
)
)
;
}
}
}
async
calculateItemRelevanceScore
(
item
)
{
if
(
this
.
affinityProvider
)
{
const
scoreResult
=
await
this
.
affinityProvider
.
calculateItemRelevanceScore
(
item
)
;
if
(
scoreResult
=
=
=
0
|
|
scoreResult
)
{
item
.
score
=
scoreResult
;
}
}
}
teardown
(
)
{
if
(
this
.
affinityProvider
&
&
this
.
affinityProvider
.
teardown
)
{
this
.
affinityProvider
.
teardown
(
)
;
}
}
resetState
(
)
{
this
.
affinityProviderV2
=
null
;
this
.
affinityProvider
=
null
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
setVersion
(
)
;
break
;
case
at
.
DISCOVERY_STREAM_CONFIG_CHANGE
:
this
.
teardown
(
)
;
this
.
resetState
(
)
;
this
.
setVersion
(
)
;
break
;
case
at
.
PREF_CHANGED
:
switch
(
action
.
data
.
name
)
{
case
PREF_PERSONALIZATION_VERSION
:
case
PREF_PERSONALIZATION_MODEL_KEYS
:
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_CONFIG_RESET
}
)
)
;
break
;
}
break
;
case
at
.
DISCOVERY_STREAM_PERSONALIZATION_VERSION_TOGGLE
:
let
version
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION_VERSION
]
;
this
.
store
.
dispatch
(
ac
.
SetPref
(
PREF_PERSONALIZATION_VERSION
version
=
=
=
1
?
2
:
1
)
)
;
break
;
}
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
RecommendationProviderSwitcher
"
]
;
