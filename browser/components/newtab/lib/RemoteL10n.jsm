"
use
strict
"
;
const
RS_DOWNLOADED_FILE_SUBDIR
=
"
settings
/
main
/
ms
-
language
-
packs
"
;
const
USE_REMOTE_L10N_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
useRemoteL10n
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
const
ALL_LOCALES
=
new
Set
(
[
"
ach
"
"
af
"
"
an
"
"
ar
"
"
ast
"
"
az
"
"
be
"
"
bg
"
"
bn
"
"
bo
"
"
br
"
"
brx
"
"
bs
"
"
ca
"
"
ca
-
valencia
"
"
cak
"
"
ckb
"
"
cs
"
"
cy
"
"
da
"
"
de
"
"
dsb
"
"
el
"
"
en
-
CA
"
"
en
-
GB
"
"
eo
"
"
es
-
AR
"
"
es
-
CL
"
"
es
-
ES
"
"
es
-
MX
"
"
et
"
"
eu
"
"
fa
"
"
ff
"
"
fi
"
"
fr
"
"
fy
-
NL
"
"
ga
-
IE
"
"
gd
"
"
gl
"
"
gn
"
"
gu
-
IN
"
"
he
"
"
hi
-
IN
"
"
hr
"
"
hsb
"
"
hu
"
"
hy
-
AM
"
"
hye
"
"
ia
"
"
id
"
"
is
"
"
it
"
"
ja
"
"
ja
-
JP
-
mac
"
"
ka
"
"
kab
"
"
kk
"
"
km
"
"
kn
"
"
ko
"
"
lij
"
"
lo
"
"
lt
"
"
ltg
"
"
lv
"
"
meh
"
"
mk
"
"
mr
"
"
ms
"
"
my
"
"
nb
-
NO
"
"
ne
-
NP
"
"
nl
"
"
nn
-
NO
"
"
oc
"
"
pa
-
IN
"
"
pl
"
"
pt
-
BR
"
"
pt
-
PT
"
"
rm
"
"
ro
"
"
ru
"
"
scn
"
"
si
"
"
sk
"
"
sl
"
"
son
"
"
sq
"
"
sr
"
"
sv
-
SE
"
"
szl
"
"
ta
"
"
te
"
"
th
"
"
tl
"
"
tr
"
"
trs
"
"
uk
"
"
ur
"
"
uz
"
"
vi
"
"
wo
"
"
xh
"
"
zh
-
CN
"
"
zh
-
TW
"
]
)
;
class
_RemoteL10n
{
constructor
(
)
{
this
.
_l10n
=
null
;
}
createElement
(
doc
elem
options
=
{
}
)
{
let
node
;
if
(
options
.
content
&
&
options
.
content
.
string_id
)
{
node
=
doc
.
createElement
(
"
remote
-
text
"
)
;
}
else
{
node
=
doc
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
elem
)
;
}
if
(
options
.
classList
)
{
node
.
classList
.
add
(
options
.
classList
)
;
}
this
.
setString
(
node
options
)
;
return
node
;
}
setString
(
el
{
content
attributes
=
{
}
}
)
{
if
(
content
&
&
content
.
string_id
)
{
for
(
let
[
fluentId
value
]
of
Object
.
entries
(
attributes
)
)
{
el
.
setAttribute
(
fluent
-
variable
-
{
fluentId
}
value
)
;
}
el
.
setAttribute
(
"
fluent
-
remote
-
id
"
content
.
string_id
)
;
}
else
{
el
.
textContent
=
content
;
}
}
_createDOML10n
(
)
{
async
function
*
generateBundles
(
resourceIds
)
{
const
appLocale
=
Services
.
locale
.
appLocaleAsBCP47
;
const
appLocales
=
Services
.
locale
.
appLocalesAsBCP47
;
const
l10nFluentDir
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
localProfileDir
RS_DOWNLOADED_FILE_SUBDIR
)
;
const
fs
=
new
L10nFileSource
(
"
cfr
"
[
appLocale
]
file
:
/
/
{
l10nFluentDir
}
/
)
;
const
resource
=
await
fs
.
fetchFile
(
appLocale
"
asrouter
.
ftl
"
)
;
for
await
(
let
bundle
of
L10nRegistry
.
getInstance
(
)
.
generateBundles
(
appLocales
.
slice
(
0
1
)
resourceIds
)
)
{
if
(
resource
)
{
bundle
.
addResource
(
resource
{
allowOverrides
:
true
}
)
;
}
yield
bundle
;
}
yield
*
L10nRegistry
.
generateBundles
(
appLocales
.
slice
(
1
)
resourceIds
)
;
}
return
new
DOMLocalization
(
[
"
browser
/
newtab
/
asrouter
.
ftl
"
"
browser
/
branding
/
brandings
.
ftl
"
"
browser
/
branding
/
sync
-
brand
.
ftl
"
"
branding
/
brand
.
ftl
"
"
browser
/
defaultBrowserNotification
.
ftl
"
]
false
Services
.
prefs
.
getBoolPref
(
USE_REMOTE_L10N_PREF
true
)
?
{
generateBundles
}
:
{
}
)
;
}
get
l10n
(
)
{
if
(
!
this
.
_l10n
)
{
this
.
_l10n
=
this
.
_createDOML10n
(
)
;
}
return
this
.
_l10n
;
}
reloadL10n
(
)
{
this
.
_l10n
=
null
;
}
isLocaleSupported
(
locale
)
{
return
locale
=
=
=
"
en
-
US
"
|
|
ALL_LOCALES
.
has
(
locale
)
;
}
}
this
.
RemoteL10n
=
new
_RemoteL10n
(
)
;
const
EXPORTED_SYMBOLS
=
[
"
RemoteL10n
"
"
_RemoteL10n
"
]
;
