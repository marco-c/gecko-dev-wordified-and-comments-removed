"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
RemoteL10n
:
"
resource
:
/
/
activity
-
stream
/
lib
/
RemoteL10n
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
PROTON_ENABLED
"
"
browser
.
proton
.
enabled
"
false
)
;
class
InfoBarNotification
{
constructor
(
message
dispatch
)
{
this
.
_dispatch
=
dispatch
;
this
.
dispatchUserAction
=
this
.
dispatchUserAction
.
bind
(
this
)
;
this
.
buttonCallback
=
this
.
buttonCallback
.
bind
(
this
)
;
this
.
infobarCallback
=
this
.
infobarCallback
.
bind
(
this
)
;
this
.
message
=
message
;
this
.
notification
=
null
;
}
showNotification
(
browser
)
{
let
{
content
}
=
this
.
message
;
let
{
gBrowser
}
=
browser
.
ownerGlobal
;
let
doc
=
gBrowser
.
ownerDocument
;
let
notificationContainer
;
if
(
content
.
type
=
=
=
"
global
"
)
{
notificationContainer
=
browser
.
ownerGlobal
.
gHighPriorityNotificationBox
;
}
else
{
notificationContainer
=
gBrowser
.
getNotificationBox
(
browser
)
;
}
let
priority
=
content
.
priority
|
|
(
PROTON_ENABLED
?
notificationContainer
.
PRIORITY_SYSTEM
:
notificationContainer
.
PRIORITY_INFO_MEDIUM
)
;
this
.
notification
=
notificationContainer
.
appendNotification
(
this
.
formatMessageConfig
(
doc
content
.
text
)
this
.
message
.
id
content
.
icon
|
|
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
priority
content
.
buttons
.
map
(
b
=
>
this
.
formatButtonConfig
(
b
)
)
this
.
infobarCallback
)
;
this
.
addImpression
(
)
;
}
formatMessageConfig
(
doc
content
)
{
let
docFragment
=
doc
.
createDocumentFragment
(
)
;
docFragment
.
appendChild
(
RemoteL10n
.
createElement
(
doc
"
span
"
{
content
}
)
)
;
return
docFragment
;
}
formatButtonConfig
(
button
)
{
let
btnConfig
=
{
callback
:
this
.
buttonCallback
.
.
.
button
}
;
if
(
button
.
label
.
string_id
)
{
btnConfig
[
"
l10n
-
id
"
]
=
button
.
label
.
string_id
;
}
return
btnConfig
;
}
addImpression
(
)
{
this
.
_dispatch
(
{
type
:
"
IMPRESSION
"
data
:
this
.
message
}
)
;
this
.
sendUserEventTelemetry
(
"
IMPRESSION
"
)
;
}
buttonCallback
(
notificationBox
btnDescription
target
)
{
this
.
dispatchUserAction
(
btnDescription
.
action
target
.
ownerGlobal
.
gBrowser
.
selectedBrowser
)
;
let
isPrimary
=
target
.
classList
.
contains
(
"
primary
"
)
;
let
eventName
=
isPrimary
?
"
CLICK_PRIMARY_BUTTON
"
:
"
CLICK_SECONDARY_BUTTON
"
;
this
.
sendUserEventTelemetry
(
eventName
)
;
}
dispatchUserAction
(
action
selectedBrowser
)
{
this
.
_dispatch
(
{
type
:
"
USER_ACTION
"
data
:
action
}
selectedBrowser
)
;
}
infobarCallback
(
eventType
)
{
if
(
eventType
=
=
=
"
removed
"
)
{
this
.
notification
=
null
;
InfoBar
.
_activeInfobar
=
null
;
}
else
if
(
this
.
notification
)
{
this
.
sendUserEventTelemetry
(
"
DISMISSED
"
)
;
this
.
notification
=
null
;
InfoBar
.
_activeInfobar
=
null
;
}
}
sendUserEventTelemetry
(
event
)
{
const
ping
=
{
message_id
:
this
.
message
.
id
event
}
;
this
.
_dispatch
(
{
type
:
"
INFOBAR_TELEMETRY
"
data
:
{
action
:
"
infobar_user_event
"
.
.
.
ping
}
}
)
;
}
}
const
InfoBar
=
{
_activeInfobar
:
null
maybeLoadCustomElement
(
win
)
{
if
(
!
win
.
customElements
.
get
(
"
remote
-
text
"
)
)
{
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
activity
-
stream
/
data
/
custom
-
elements
/
paragraph
.
js
"
win
)
;
}
}
maybeInsertFTL
(
win
)
{
win
.
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
newtab
/
asrouter
.
ftl
"
)
;
win
.
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
defaultBrowserNotification
.
ftl
"
)
;
}
showInfoBarMessage
(
browser
message
dispatch
)
{
if
(
this
.
_activeInfobar
)
{
return
null
;
}
const
win
=
browser
.
ownerGlobal
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
return
null
;
}
this
.
maybeLoadCustomElement
(
win
)
;
this
.
maybeInsertFTL
(
win
)
;
let
notification
=
new
InfoBarNotification
(
message
dispatch
)
;
notification
.
showNotification
(
browser
)
;
this
.
_activeInfobar
=
true
;
return
notification
;
}
}
;
this
.
InfoBar
=
InfoBar
;
const
EXPORTED_SYMBOLS
=
[
"
InfoBar
"
]
;
