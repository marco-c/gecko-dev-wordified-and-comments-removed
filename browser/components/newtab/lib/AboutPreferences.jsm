"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
actionTypes
:
at
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
)
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
const
PREFERENCES_LOADED_EVENT
=
"
home
-
pane
-
loaded
"
;
const
PREFS_BEFORE_SECTIONS
=
[
{
id
:
"
search
"
pref
:
{
feed
:
"
showSearch
"
titleString
:
"
home
-
prefs
-
search
-
header
"
}
icon
:
"
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
"
}
{
id
:
"
topsites
"
pref
:
{
feed
:
"
feeds
.
topsites
"
titleString
:
"
home
-
prefs
-
topsites
-
header
"
descString
:
"
home
-
prefs
-
topsites
-
description
"
}
icon
:
"
topsites
"
maxRows
:
4
rowsPref
:
"
topSitesRows
"
}
]
;
const
PREFS_AFTER_SECTIONS
=
[
{
id
:
"
snippets
"
pref
:
{
feed
:
"
feeds
.
snippets
"
titleString
:
"
home
-
prefs
-
snippets
-
header
"
descString
:
"
home
-
prefs
-
snippets
-
description
"
}
icon
:
"
info
"
}
]
;
this
.
AboutPreferences
=
class
AboutPreferences
{
init
(
)
{
Services
.
obs
.
addObserver
(
this
PREFERENCES_LOADED_EVENT
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
PREFERENCES_LOADED_EVENT
)
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
case
at
.
SETTINGS_OPEN
:
action
.
_target
.
browser
.
ownerGlobal
.
openPreferences
(
"
paneHome
"
)
;
break
;
case
at
.
OPEN_WEBEXT_SETTINGS
:
action
.
_target
.
browser
.
ownerGlobal
.
BrowserOpenAddonsMgr
(
addons
:
/
/
detail
/
{
encodeURIComponent
(
action
.
data
)
}
)
;
break
;
}
}
handleDiscoverySettings
(
sections
)
{
let
sectionsCopy
=
JSON
.
parse
(
JSON
.
stringify
(
sections
)
)
;
sectionsCopy
.
forEach
(
obj
=
>
{
if
(
obj
.
id
=
=
=
"
topstories
"
)
{
obj
.
rowsPref
=
"
"
;
}
}
)
;
return
sectionsCopy
;
}
observe
(
window
)
{
const
discoveryStreamConfig
=
this
.
store
.
getState
(
)
.
DiscoveryStream
.
config
;
let
sections
=
this
.
store
.
getState
(
)
.
Sections
;
if
(
discoveryStreamConfig
.
enabled
)
{
sections
=
this
.
handleDiscoverySettings
(
sections
)
;
}
this
.
renderPreferences
(
window
[
.
.
.
PREFS_BEFORE_SECTIONS
.
.
.
sections
.
.
.
PREFS_AFTER_SECTIONS
]
)
;
}
renderPreferences
(
{
document
Preferences
gHomePane
}
prefStructure
)
{
const
createAppend
=
(
tag
parent
options
)
=
>
parent
.
appendChild
(
document
.
createXULElement
(
tag
options
)
)
;
const
getString
=
message
=
>
typeof
message
!
=
=
"
object
"
?
message
:
message
.
id
;
const
linkPref
=
(
element
name
type
)
=
>
{
const
fullPref
=
browser
.
newtabpage
.
activity
-
stream
.
{
name
}
;
element
.
setAttribute
(
"
preference
"
fullPref
)
;
Preferences
.
add
(
{
id
:
fullPref
type
}
)
;
element
.
disabled
=
Preferences
.
get
(
fullPref
)
.
locked
;
}
;
const
homeGroup
=
document
.
getElementById
(
"
homepageGroup
"
)
;
const
contentsGroup
=
homeGroup
.
insertAdjacentElement
(
"
afterend
"
homeGroup
.
cloneNode
(
)
)
;
contentsGroup
.
id
=
"
homeContentsGroup
"
;
contentsGroup
.
setAttribute
(
"
data
-
subcategory
"
"
contents
"
)
;
const
homeHeader
=
createAppend
(
"
label
"
contentsGroup
)
.
appendChild
(
document
.
createElementNS
(
HTML_NS
"
h2
"
)
)
;
document
.
l10n
.
setAttributes
(
homeHeader
"
home
-
prefs
-
content
-
header
"
)
;
const
homeDescription
=
createAppend
(
"
description
"
contentsGroup
)
;
document
.
l10n
.
setAttributes
(
homeDescription
"
home
-
prefs
-
content
-
description
"
)
;
prefStructure
.
forEach
(
sectionData
=
>
{
const
{
id
pref
:
prefData
icon
=
"
webextension
"
maxRows
rowsPref
shouldHidePref
}
=
sectionData
;
const
{
feed
:
name
titleString
=
{
}
descString
nestedPrefs
=
[
]
}
=
prefData
|
|
{
}
;
if
(
shouldHidePref
)
{
return
;
}
const
iconUrl
=
!
icon
.
search
(
/
^
(
chrome
|
moz
-
extension
|
resource
)
:
/
)
?
icon
:
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
glyph
-
{
icon
}
-
16
.
svg
;
const
sectionVbox
=
createAppend
(
"
vbox
"
contentsGroup
)
;
sectionVbox
.
setAttribute
(
"
data
-
subcategory
"
id
)
;
const
checkbox
=
createAppend
(
"
checkbox
"
sectionVbox
)
;
checkbox
.
classList
.
add
(
"
section
-
checkbox
"
)
;
checkbox
.
setAttribute
(
"
src
"
iconUrl
)
;
document
.
l10n
.
setAttributes
(
checkbox
getString
(
titleString
)
titleString
.
values
)
;
linkPref
(
checkbox
name
"
bool
"
)
;
if
(
id
=
=
=
"
topstories
"
)
{
const
sponsoredHbox
=
createAppend
(
"
hbox
"
sectionVbox
)
;
sponsoredHbox
.
setAttribute
(
"
align
"
"
center
"
)
;
sponsoredHbox
.
appendChild
(
checkbox
)
;
checkbox
.
classList
.
add
(
"
tail
-
with
-
learn
-
more
"
)
;
const
link
=
createAppend
(
"
label
"
sponsoredHbox
{
is
:
"
text
-
link
"
}
)
;
link
.
classList
.
add
(
"
learn
-
sponsored
"
)
;
link
.
setAttribute
(
"
href
"
sectionData
.
pref
.
learnMore
.
link
.
href
)
;
document
.
l10n
.
setAttributes
(
link
sectionData
.
pref
.
learnMore
.
link
.
id
)
;
}
const
detailVbox
=
createAppend
(
"
vbox
"
sectionVbox
)
;
detailVbox
.
classList
.
add
(
"
indent
"
)
;
if
(
descString
)
{
const
label
=
createAppend
(
"
label
"
detailVbox
)
;
label
.
classList
.
add
(
"
indent
"
)
;
document
.
l10n
.
setAttributes
(
label
getString
(
descString
)
descString
.
values
)
;
if
(
rowsPref
&
&
maxRows
)
{
const
detailHbox
=
createAppend
(
"
hbox
"
detailVbox
)
;
detailHbox
.
setAttribute
(
"
align
"
"
center
"
)
;
label
.
setAttribute
(
"
flex
"
1
)
;
detailHbox
.
appendChild
(
label
)
;
const
tooltipBox
=
createAppend
(
"
hbox
"
detailHbox
)
;
const
menulist
=
createAppend
(
"
menulist
"
tooltipBox
)
;
menulist
.
setAttribute
(
"
crop
"
"
none
"
)
;
const
menupopup
=
createAppend
(
"
menupopup
"
menulist
)
;
for
(
let
num
=
1
;
num
<
=
maxRows
;
num
+
+
)
{
const
item
=
createAppend
(
"
menuitem
"
menupopup
)
;
document
.
l10n
.
setAttributes
(
item
"
home
-
prefs
-
sections
-
rows
-
option
"
{
num
}
)
;
item
.
setAttribute
(
"
value
"
num
)
;
}
linkPref
(
menulist
rowsPref
"
int
"
)
;
}
}
const
subChecks
=
[
]
;
const
fullName
=
browser
.
newtabpage
.
activity
-
stream
.
{
sectionData
.
pref
.
feed
}
;
const
pref
=
Preferences
.
get
(
fullName
)
;
nestedPrefs
.
forEach
(
nested
=
>
{
const
subcheck
=
createAppend
(
"
checkbox
"
detailVbox
)
;
subcheck
.
classList
.
add
(
"
indent
"
)
;
document
.
l10n
.
setAttributes
(
subcheck
nested
.
titleString
)
;
linkPref
(
subcheck
nested
.
name
"
bool
"
)
;
subChecks
.
push
(
subcheck
)
;
subcheck
.
disabled
=
!
pref
.
_value
;
subcheck
.
hidden
=
nested
.
hidden
;
}
)
;
pref
.
on
(
"
change
"
(
)
=
>
{
subChecks
.
forEach
(
subcheck
=
>
{
subcheck
.
disabled
=
!
pref
.
_value
;
}
)
;
}
)
;
}
)
;
gHomePane
.
toggleRestoreDefaultsBtn
(
)
;
}
}
;
this
.
PREFERENCES_LOADED_EVENT
=
PREFERENCES_LOADED_EVENT
;
const
EXPORTED_SYMBOLS
=
[
"
AboutPreferences
"
"
PREFERENCES_LOADED_EVENT
"
]
;
