"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
actionTypes
:
at
actionCreators
:
ac
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
PersistentCache
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
PersistentCache
.
jsm
"
{
}
)
;
const
CACHE_KEY
=
"
discovery_stream
"
;
const
LAYOUT_UPDATE_TIME
=
30
*
60
*
1000
;
const
COMPONENT_FEEDS_UPDATE_TIME
=
30
*
60
*
1000
;
const
SPOCS_FEEDS_UPDATE_TIME
=
30
*
60
*
1000
;
const
CONFIG_PREF_NAME
=
"
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
config
"
;
this
.
DiscoveryStreamFeed
=
class
DiscoveryStreamFeed
{
constructor
(
)
{
this
.
loaded
=
false
;
this
.
cache
=
new
PersistentCache
(
CACHE_KEY
true
)
;
this
.
_prefCache
=
{
}
;
}
get
config
(
)
{
if
(
this
.
_prefCache
.
config
)
{
return
this
.
_prefCache
.
config
;
}
try
{
this
.
_prefCache
.
config
=
JSON
.
parse
(
Services
.
prefs
.
getStringPref
(
CONFIG_PREF_NAME
"
"
)
)
;
}
catch
(
e
)
{
this
.
_prefCache
.
config
=
{
}
;
Cu
.
reportError
(
Could
not
parse
preference
.
Try
resetting
{
CONFIG_PREF_NAME
}
in
about
:
config
.
)
;
}
return
this
.
_prefCache
.
config
;
}
get
showSpocs
(
)
{
return
this
.
store
.
getState
(
)
.
Prefs
.
values
.
showSponsored
&
&
this
.
config
.
show_spocs
;
}
setupPrefs
(
)
{
Services
.
prefs
.
addObserver
(
CONFIG_PREF_NAME
this
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_CONFIG_SETUP
data
:
this
.
config
}
)
)
;
}
uninitPrefs
(
)
{
Services
.
prefs
.
removeObserver
(
CONFIG_PREF_NAME
this
)
;
this
.
_prefCache
=
{
}
;
}
observe
(
aSubject
aTopic
aPrefName
)
{
if
(
aPrefName
=
=
=
CONFIG_PREF_NAME
)
{
this
.
_prefCache
.
config
=
null
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_CONFIG_CHANGE
data
:
this
.
config
}
)
)
;
}
}
async
fetchLayout
(
)
{
const
endpoint
=
this
.
config
.
layout_endpoint
;
if
(
!
endpoint
)
{
Cu
.
reportError
(
"
No
endpoint
configured
for
pocket
so
could
not
fetch
layout
"
)
;
return
null
;
}
try
{
const
response
=
await
fetch
(
endpoint
{
credentials
:
"
omit
"
}
)
;
if
(
!
response
.
ok
)
{
throw
new
Error
(
Layout
endpoint
returned
unexpected
status
:
{
response
.
status
}
)
;
}
return
response
.
json
(
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
Failed
to
fetch
layout
:
{
error
.
message
}
)
;
}
return
null
;
}
async
fetchSpocs
(
)
{
const
{
DiscoveryStream
}
=
this
.
store
.
getState
(
)
;
const
endpoint
=
DiscoveryStream
.
spocs
.
spocs_endpoint
;
if
(
!
endpoint
)
{
Cu
.
reportError
(
"
No
endpoint
configured
for
pocket
so
could
not
fetch
spocs
"
)
;
return
null
;
}
try
{
const
response
=
await
fetch
(
endpoint
{
credentials
:
"
omit
"
}
)
;
if
(
!
response
.
ok
)
{
throw
new
Error
(
Spocs
endpoint
returned
unexpected
status
:
{
response
.
status
}
)
;
}
return
response
.
json
(
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
Failed
to
fetch
spocs
:
{
error
.
message
}
)
;
}
return
null
;
}
async
loadLayout
(
)
{
const
cachedData
=
await
this
.
cache
.
get
(
)
|
|
{
}
;
let
{
layout
:
layoutResponse
}
=
cachedData
;
if
(
!
layoutResponse
|
|
!
(
Date
.
now
(
)
-
layoutResponse
.
_timestamp
<
LAYOUT_UPDATE_TIME
)
)
{
layoutResponse
=
await
this
.
fetchLayout
(
)
;
if
(
layoutResponse
&
&
layoutResponse
.
layout
)
{
layoutResponse
.
_timestamp
=
Date
.
now
(
)
;
await
this
.
cache
.
set
(
"
layout
"
layoutResponse
)
;
}
else
{
Cu
.
reportError
(
"
No
response
for
response
.
layout
prop
"
)
;
}
}
if
(
layoutResponse
&
&
layoutResponse
.
layout
)
{
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_LAYOUT_UPDATE
data
:
{
layout
:
layoutResponse
.
layout
lastUpdated
:
layoutResponse
.
_timestamp
}
}
)
)
;
}
if
(
layoutResponse
&
&
layoutResponse
.
spocs
&
&
layoutResponse
.
spocs
.
url
)
{
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_ENDPOINT
data
:
layoutResponse
.
spocs
.
url
}
)
)
;
}
}
async
loadComponentFeeds
(
)
{
const
{
DiscoveryStream
}
=
this
.
store
.
getState
(
)
;
const
newFeeds
=
{
}
;
if
(
DiscoveryStream
&
&
DiscoveryStream
.
layout
)
{
for
(
let
row
of
DiscoveryStream
.
layout
)
{
if
(
!
row
|
|
!
row
.
components
)
{
continue
;
}
for
(
let
component
of
row
.
components
)
{
if
(
component
&
&
component
.
feed
)
{
const
{
url
}
=
component
.
feed
;
newFeeds
[
url
]
=
await
this
.
getComponentFeed
(
url
)
;
}
}
}
await
this
.
cache
.
set
(
"
feeds
"
newFeeds
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_FEEDS_UPDATE
data
:
newFeeds
}
)
)
;
}
}
async
loadSpocs
(
)
{
const
cachedData
=
await
this
.
cache
.
get
(
)
|
|
{
}
;
let
spocs
;
if
(
this
.
showSpocs
)
{
spocs
=
cachedData
.
spocs
;
if
(
!
spocs
|
|
!
(
Date
.
now
(
)
-
spocs
.
lastUpdated
<
SPOCS_FEEDS_UPDATE_TIME
)
)
{
const
spocsResponse
=
await
this
.
fetchSpocs
(
)
;
if
(
spocsResponse
)
{
spocs
=
{
lastUpdated
:
Date
.
now
(
)
data
:
spocsResponse
}
;
await
this
.
cache
.
set
(
"
spocs
"
spocs
)
;
}
else
{
Cu
.
reportError
(
"
No
response
for
spocs_endpoint
prop
"
)
;
}
}
}
spocs
=
spocs
|
|
{
lastUpdated
:
Date
.
now
(
)
data
:
{
}
}
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_UPDATE
data
:
{
lastUpdated
:
spocs
.
lastUpdated
spocs
:
spocs
.
data
}
}
)
)
;
}
async
getComponentFeed
(
feedUrl
)
{
const
cachedData
=
await
this
.
cache
.
get
(
)
|
|
{
}
;
const
{
feeds
}
=
cachedData
;
let
feed
=
feeds
&
&
feeds
[
feedUrl
]
;
if
(
!
feed
|
|
!
(
Date
.
now
(
)
-
feed
.
lastUpdated
<
COMPONENT_FEEDS_UPDATE_TIME
)
)
{
const
feedResponse
=
await
this
.
fetchComponentFeed
(
feedUrl
)
;
if
(
feedResponse
)
{
feed
=
{
lastUpdated
:
Date
.
now
(
)
data
:
feedResponse
}
;
}
else
{
Cu
.
reportError
(
"
No
response
for
feed
"
)
;
}
}
return
feed
;
}
async
fetchComponentFeed
(
feedUrl
)
{
try
{
const
response
=
await
fetch
(
feedUrl
{
credentials
:
"
omit
"
}
)
;
if
(
!
response
.
ok
)
{
throw
new
Error
(
Component
feed
endpoint
returned
unexpected
status
:
{
response
.
status
}
)
;
}
return
response
.
json
(
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
Failed
to
fetch
Component
feed
:
{
error
.
message
}
)
;
}
return
null
;
}
async
enable
(
)
{
await
this
.
loadLayout
(
)
;
await
this
.
loadComponentFeeds
(
)
;
await
this
.
loadSpocs
(
)
;
this
.
loaded
=
true
;
}
async
disable
(
)
{
await
this
.
clearCache
(
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_LAYOUT_RESET
}
)
)
;
this
.
loaded
=
false
;
}
async
clearCache
(
)
{
await
this
.
cache
.
set
(
"
layout
"
{
}
)
;
await
this
.
cache
.
set
(
"
feeds
"
{
}
)
;
await
this
.
cache
.
set
(
"
spocs
"
{
}
)
;
}
async
onPrefChange
(
)
{
if
(
this
.
config
.
enabled
)
{
await
this
.
clearCache
(
)
;
await
this
.
enable
(
)
;
}
if
(
this
.
loaded
&
&
!
this
.
config
.
enabled
)
{
await
this
.
disable
(
)
;
}
}
async
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
setupPrefs
(
)
;
if
(
this
.
config
.
enabled
)
{
await
this
.
enable
(
)
;
}
break
;
case
at
.
DISCOVERY_STREAM_CONFIG_SET_VALUE
:
Services
.
prefs
.
setStringPref
(
CONFIG_PREF_NAME
JSON
.
stringify
(
{
.
.
.
this
.
config
[
action
.
data
.
name
]
:
action
.
data
.
value
}
)
)
;
break
;
case
at
.
DISCOVERY_STREAM_CONFIG_CHANGE
:
await
this
.
onPrefChange
(
)
;
break
;
case
at
.
UNINIT
:
this
.
uninitPrefs
(
)
;
break
;
case
at
.
PREF_CHANGED
:
if
(
action
.
data
.
name
=
=
=
"
showSponsored
"
)
{
await
this
.
loadSpocs
(
)
;
}
break
;
}
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
DiscoveryStreamFeed
"
]
;
