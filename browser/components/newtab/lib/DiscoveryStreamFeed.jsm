"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NewTabUtils
"
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
RemoteSettings
"
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
const
{
setTimeout
clearTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
const
{
actionTypes
:
at
actionCreators
:
ac
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Region
"
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PersistentCache
"
"
resource
:
/
/
activity
-
stream
/
lib
/
PersistentCache
.
jsm
"
)
;
const
CACHE_KEY
=
"
discovery_stream
"
;
const
LAYOUT_UPDATE_TIME
=
30
*
60
*
1000
;
const
STARTUP_CACHE_EXPIRE_TIME
=
7
*
24
*
60
*
60
*
1000
;
const
COMPONENT_FEEDS_UPDATE_TIME
=
30
*
60
*
1000
;
const
SPOCS_FEEDS_UPDATE_TIME
=
30
*
60
*
1000
;
const
DEFAULT_RECS_EXPIRE_TIME
=
60
*
60
*
1000
;
const
MIN_PERSONALIZATION_UPDATE_TIME
=
12
*
60
*
60
*
1000
;
const
MAX_LIFETIME_CAP
=
500
;
const
FETCH_TIMEOUT
=
45
*
1000
;
const
PREF_CONFIG
=
"
discoverystream
.
config
"
;
const
PREF_ENDPOINTS
=
"
discoverystream
.
endpoints
"
;
const
PREF_IMPRESSION_ID
=
"
browser
.
newtabpage
.
activity
-
stream
.
impressionId
"
;
const
PREF_ENABLED
=
"
discoverystream
.
enabled
"
;
const
PREF_HARDCODED_BASIC_LAYOUT
=
"
discoverystream
.
hardcoded
-
basic
-
layout
"
;
const
PREF_SPOCS_ENDPOINT
=
"
discoverystream
.
spocs
-
endpoint
"
;
const
PREF_SPOCS_ENDPOINT_QUERY
=
"
discoverystream
.
spocs
-
endpoint
-
query
"
;
const
PREF_REGION_BASIC_LAYOUT
=
"
discoverystream
.
region
-
basic
-
layout
"
;
const
PREF_USER_TOPSTORIES
=
"
feeds
.
section
.
topstories
"
;
const
PREF_SYSTEM_TOPSTORIES
=
"
feeds
.
system
.
topstories
"
;
const
PREF_SPOCS_CLEAR_ENDPOINT
=
"
discoverystream
.
endpointSpocsClear
"
;
const
PREF_SHOW_SPONSORED
=
"
showSponsored
"
;
const
PREF_SPOC_IMPRESSIONS
=
"
discoverystream
.
spoc
.
impressions
"
;
const
PREF_FLIGHT_BLOCKS
=
"
discoverystream
.
flight
.
blocks
"
;
const
PREF_REC_IMPRESSIONS
=
"
discoverystream
.
rec
.
impressions
"
;
const
PREF_COLLECTIONS_ENABLED
=
"
discoverystream
.
sponsored
-
collections
.
enabled
"
;
const
PREF_POCKET_BUTTON
=
"
extensions
.
pocket
.
enabled
"
;
const
PREF_COLLECTION_DISMISSIBLE
=
"
discoverystream
.
isCollectionDismissible
"
;
const
PREF_PERSONALIZATION
=
"
discoverystream
.
personalization
.
enabled
"
;
const
PREF_PERSONALIZATION_OVERRIDE
=
"
discoverystream
.
personalization
.
override
"
;
let
getHardcodedLayout
;
this
.
DiscoveryStreamFeed
=
class
DiscoveryStreamFeed
{
constructor
(
)
{
this
.
loaded
=
false
;
this
.
cache
=
new
PersistentCache
(
CACHE_KEY
true
)
;
this
.
locale
=
Services
.
locale
.
appLocaleAsBCP47
;
this
.
_impressionId
=
this
.
getOrCreateImpressionId
(
)
;
this
.
_prefCache
=
{
}
;
}
getOrCreateImpressionId
(
)
{
let
impressionId
=
Services
.
prefs
.
getCharPref
(
PREF_IMPRESSION_ID
"
"
)
;
if
(
!
impressionId
)
{
impressionId
=
String
(
Services
.
uuid
.
generateUUID
(
)
)
;
Services
.
prefs
.
setCharPref
(
PREF_IMPRESSION_ID
impressionId
)
;
}
return
impressionId
;
}
finalLayoutEndpoint
(
url
apiKey
)
{
if
(
url
.
includes
(
"
apiKey
"
)
&
&
!
apiKey
)
{
throw
new
Error
(
Layout
Endpoint
-
An
API
key
was
specified
but
none
configured
:
{
url
}
)
;
}
return
url
.
replace
(
"
apiKey
"
apiKey
)
;
}
get
config
(
)
{
if
(
this
.
_prefCache
.
config
)
{
return
this
.
_prefCache
.
config
;
}
try
{
this
.
_prefCache
.
config
=
JSON
.
parse
(
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_CONFIG
]
)
;
const
layoutUrl
=
this
.
_prefCache
.
config
.
layout_endpoint
;
const
apiKeyPref
=
this
.
_prefCache
.
config
.
api_key_pref
;
if
(
layoutUrl
&
&
apiKeyPref
)
{
const
apiKey
=
Services
.
prefs
.
getCharPref
(
apiKeyPref
"
"
)
;
this
.
_prefCache
.
config
.
layout_endpoint
=
this
.
finalLayoutEndpoint
(
layoutUrl
apiKey
)
;
}
}
catch
(
e
)
{
this
.
_prefCache
.
config
=
{
}
;
Cu
.
reportError
(
Could
not
parse
preference
.
Try
resetting
{
PREF_CONFIG
}
in
about
:
config
.
{
e
}
)
;
}
this
.
_prefCache
.
config
.
enabled
=
this
.
_prefCache
.
config
.
enabled
&
&
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_ENABLED
]
;
return
this
.
_prefCache
.
config
;
}
resetConfigDefauts
(
)
{
this
.
store
.
dispatch
(
{
type
:
at
.
CLEAR_PREF
data
:
{
name
:
PREF_CONFIG
}
}
)
;
}
get
region
(
)
{
return
Region
.
home
;
}
get
showSpocs
(
)
{
return
(
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_SHOW_SPONSORED
]
&
&
this
.
config
.
show_spocs
)
;
}
get
showStories
(
)
{
return
(
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_SYSTEM_TOPSTORIES
]
&
&
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_USER_TOPSTORIES
]
)
;
}
get
personalized
(
)
{
const
spocsPersonalized
=
this
.
store
.
getState
(
)
.
Prefs
.
values
?
.
pocketConfig
?
.
spocsPersonalized
;
const
recsPersonalized
=
this
.
store
.
getState
(
)
.
Prefs
.
values
?
.
pocketConfig
?
.
recsPersonalized
;
const
personalization
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION
]
;
const
overrideState
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION_OVERRIDE
]
;
return
(
personalization
&
&
!
overrideState
&
&
!
!
this
.
recommendationProvider
&
&
(
spocsPersonalized
|
|
recsPersonalized
)
)
;
}
get
recommendationProvider
(
)
{
if
(
this
.
_recommendationProvider
)
{
return
this
.
_recommendationProvider
;
}
this
.
_recommendationProvider
=
this
.
store
.
feeds
.
get
(
"
feeds
.
recommendationprovider
"
)
;
return
this
.
_recommendationProvider
;
}
setupPrefs
(
isStartup
=
false
)
{
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_CONFIG_SETUP
data
:
this
.
config
meta
:
{
isStartup
}
}
)
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_COLLECTION_DISMISSIBLE_TOGGLE
data
:
{
value
:
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_COLLECTION_DISMISSIBLE
]
}
meta
:
{
isStartup
}
}
)
)
;
}
uninitPrefs
(
)
{
this
.
_prefCache
=
{
}
;
}
async
fetchFromEndpoint
(
rawEndpoint
options
=
{
}
)
{
if
(
!
rawEndpoint
)
{
Cu
.
reportError
(
"
Tried
to
fetch
endpoint
but
none
was
configured
.
"
)
;
return
null
;
}
const
apiKeyPref
=
this
.
_prefCache
.
config
.
api_key_pref
;
const
apiKey
=
Services
.
prefs
.
getCharPref
(
apiKeyPref
"
"
)
;
const
endpoint
=
rawEndpoint
.
replace
(
"
apiKey
"
apiKey
)
.
replace
(
"
locale
"
this
.
locale
)
.
replace
(
"
region
"
this
.
region
)
;
try
{
const
allowed
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_ENDPOINTS
]
.
split
(
"
"
)
;
if
(
!
allowed
.
some
(
prefix
=
>
endpoint
.
startsWith
(
prefix
)
)
)
{
throw
new
Error
(
Not
one
of
allowed
prefixes
(
{
allowed
}
)
)
;
}
const
controller
=
new
AbortController
(
)
;
const
{
signal
}
=
controller
;
const
fetchPromise
=
fetch
(
endpoint
{
.
.
.
options
credentials
:
"
omit
"
signal
}
)
;
const
timeoutId
=
setTimeout
(
(
)
=
>
{
controller
.
abort
(
)
;
}
FETCH_TIMEOUT
)
;
const
response
=
await
fetchPromise
;
if
(
!
response
.
ok
)
{
throw
new
Error
(
Unexpected
status
(
{
response
.
status
}
)
)
;
}
clearTimeout
(
timeoutId
)
;
return
response
.
json
(
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
Failed
to
fetch
{
endpoint
}
:
{
error
.
message
}
)
;
}
return
null
;
}
isExpired
(
{
cachedData
key
url
isStartup
}
)
{
const
{
layout
spocs
feeds
}
=
cachedData
;
const
updateTimePerComponent
=
{
layout
:
LAYOUT_UPDATE_TIME
spocs
:
SPOCS_FEEDS_UPDATE_TIME
feed
:
COMPONENT_FEEDS_UPDATE_TIME
}
;
const
EXPIRATION_TIME
=
isStartup
?
STARTUP_CACHE_EXPIRE_TIME
:
updateTimePerComponent
[
key
]
;
switch
(
key
)
{
case
"
layout
"
:
if
(
this
.
config
.
hardcoded_layout
)
{
return
false
;
}
return
!
layout
|
|
!
(
Date
.
now
(
)
-
layout
.
lastUpdated
<
EXPIRATION_TIME
)
;
case
"
spocs
"
:
return
!
spocs
|
|
!
(
Date
.
now
(
)
-
spocs
.
lastUpdated
<
EXPIRATION_TIME
)
;
case
"
feed
"
:
return
(
!
feeds
|
|
!
feeds
[
url
]
|
|
!
(
Date
.
now
(
)
-
feeds
[
url
]
.
lastUpdated
<
EXPIRATION_TIME
)
)
;
default
:
throw
new
Error
(
{
key
}
is
not
a
valid
key
)
;
}
}
async
_checkExpirationPerComponent
(
)
{
const
cachedData
=
(
await
this
.
cache
.
get
(
)
)
|
|
{
}
;
const
{
feeds
}
=
cachedData
;
return
{
layout
:
this
.
isExpired
(
{
cachedData
key
:
"
layout
"
}
)
spocs
:
this
.
isExpired
(
{
cachedData
key
:
"
spocs
"
}
)
feeds
:
!
feeds
|
|
Object
.
keys
(
feeds
)
.
some
(
url
=
>
this
.
isExpired
(
{
cachedData
key
:
"
feed
"
url
}
)
)
}
;
}
async
checkIfAnyCacheExpired
(
)
{
const
expirationPerComponent
=
await
this
.
_checkExpirationPerComponent
(
)
;
return
(
expirationPerComponent
.
layout
|
|
expirationPerComponent
.
spocs
|
|
expirationPerComponent
.
feeds
)
;
}
async
fetchLayout
(
isStartup
)
{
const
cachedData
=
(
await
this
.
cache
.
get
(
)
)
|
|
{
}
;
let
{
layout
}
=
cachedData
;
if
(
this
.
isExpired
(
{
cachedData
key
:
"
layout
"
isStartup
}
)
)
{
const
layoutResponse
=
await
this
.
fetchFromEndpoint
(
this
.
config
.
layout_endpoint
)
;
if
(
layoutResponse
&
&
layoutResponse
.
layout
)
{
layout
=
{
lastUpdated
:
Date
.
now
(
)
spocs
:
layoutResponse
.
spocs
layout
:
layoutResponse
.
layout
status
:
"
success
"
}
;
await
this
.
cache
.
set
(
"
layout
"
layout
)
;
}
else
{
Cu
.
reportError
(
"
No
response
for
response
.
layout
prop
"
)
;
}
}
return
layout
;
}
updatePlacements
(
sendUpdate
layout
isStartup
=
false
)
{
const
placements
=
[
]
;
const
placementsMap
=
{
}
;
for
(
const
row
of
layout
.
filter
(
r
=
>
r
.
components
&
&
r
.
components
.
length
)
)
{
for
(
const
component
of
row
.
components
)
{
if
(
component
.
placement
)
{
if
(
!
placementsMap
[
component
.
placement
.
name
]
)
{
placementsMap
[
component
.
placement
.
name
]
=
component
.
placement
;
placements
.
push
(
component
.
placement
)
;
}
}
}
}
if
(
placements
.
length
)
{
sendUpdate
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_PLACEMENTS
data
:
{
placements
}
meta
:
{
isStartup
}
}
)
;
}
}
addEndpointQuery
(
url
query
)
{
if
(
!
query
)
{
return
url
;
}
const
urlObject
=
new
URL
(
url
)
;
const
params
=
new
URLSearchParams
(
query
)
;
for
(
let
[
key
val
]
of
params
.
entries
(
)
)
{
urlObject
.
searchParams
.
append
(
key
val
)
;
}
return
urlObject
.
toString
(
)
;
}
parseSpocPositions
(
csvPositions
)
{
let
spocPositions
;
try
{
spocPositions
=
csvPositions
.
map
(
index
=
>
{
let
parsedInt
=
parseInt
(
index
10
)
;
if
(
!
isNaN
(
parsedInt
)
&
&
parsedInt
>
=
0
)
{
return
parsedInt
;
}
throw
new
Error
(
"
Bad
input
"
)
;
}
)
;
}
catch
(
e
)
{
spocPositions
=
undefined
;
}
return
spocPositions
;
}
async
loadLayout
(
sendUpdate
isStartup
)
{
let
layoutResp
=
{
}
;
let
url
=
"
"
;
if
(
!
this
.
config
.
hardcoded_layout
)
{
layoutResp
=
await
this
.
fetchLayout
(
isStartup
)
;
}
if
(
!
layoutResp
|
|
!
layoutResp
.
layout
)
{
const
isBasicLayout
=
this
.
config
.
hardcoded_basic_layout
|
|
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_HARDCODED_BASIC_LAYOUT
]
|
|
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_REGION_BASIC_LAYOUT
]
;
const
sponsoredCollectionsEnabled
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_COLLECTIONS_ENABLED
]
;
const
pocketButtonEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_POCKET_BUTTON
)
;
const
pocketConfig
=
this
.
store
.
getState
(
)
.
Prefs
.
values
?
.
pocketConfig
|
|
{
}
;
let
items
=
isBasicLayout
?
3
:
21
;
if
(
pocketConfig
.
compactLayout
|
|
pocketConfig
.
fourCardLayout
|
|
pocketConfig
.
hybridLayout
)
{
items
=
isBasicLayout
?
4
:
24
;
}
layoutResp
=
getHardcodedLayout
(
{
items
sponsoredCollectionsEnabled
spocPositions
:
this
.
parseSpocPositions
(
pocketConfig
.
spocPositions
?
.
split
(
)
)
compactLayout
:
pocketConfig
.
compactLayout
hybridLayout
:
pocketConfig
.
hybridLayout
hideCardBackground
:
pocketConfig
.
hideCardBackground
fourCardLayout
:
pocketConfig
.
fourCardLayout
loadMore
:
pocketConfig
.
loadMore
lastCardMessageEnabled
:
pocketConfig
.
lastCardMessageEnabled
pocketButtonEnabled
saveToPocketCard
:
pocketButtonEnabled
&
&
pocketConfig
.
saveToPocketCard
newFooterSection
:
pocketConfig
.
newFooterSection
hideDescriptions
:
pocketConfig
.
hideDescriptions
compactGrid
:
pocketConfig
.
compactGrid
compactImages
:
pocketConfig
.
compactImages
imageGradient
:
pocketConfig
.
imageGradient
newSponsoredLabel
:
pocketConfig
.
newSponsoredLabel
titleLines
:
pocketConfig
.
titleLines
descLines
:
pocketConfig
.
descLines
essentialReadsHeader
:
this
.
locale
.
startsWith
(
"
en
-
"
)
&
&
pocketConfig
.
essentialReadsHeader
editorsPicksHeader
:
this
.
locale
.
startsWith
(
"
en
-
"
)
&
&
pocketConfig
.
editorsPicksHeader
readTime
:
pocketConfig
.
readTime
}
)
;
}
sendUpdate
(
{
type
:
at
.
DISCOVERY_STREAM_LAYOUT_UPDATE
data
:
layoutResp
meta
:
{
isStartup
}
}
)
;
if
(
layoutResp
.
spocs
)
{
url
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_SPOCS_ENDPOINT
]
|
|
this
.
config
.
spocs_endpoint
|
|
layoutResp
.
spocs
.
url
;
const
spocsEndpointQuery
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_SPOCS_ENDPOINT_QUERY
]
;
url
=
this
.
addEndpointQuery
(
url
spocsEndpointQuery
)
;
if
(
url
&
&
url
!
=
=
this
.
store
.
getState
(
)
.
DiscoveryStream
.
spocs
.
spocs_endpoint
)
{
sendUpdate
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_ENDPOINT
data
:
{
url
}
meta
:
{
isStartup
}
}
)
;
this
.
updatePlacements
(
sendUpdate
layoutResp
.
layout
isStartup
)
;
}
}
}
buildFeedPromise
(
{
newFeedsPromises
newFeeds
}
isStartup
=
false
sendUpdate
)
{
return
component
=
>
{
const
{
url
}
=
component
.
feed
;
if
(
!
newFeeds
[
url
]
)
{
newFeeds
[
url
]
=
{
}
;
const
feedPromise
=
this
.
getComponentFeed
(
url
isStartup
)
;
feedPromise
.
then
(
feed
=
>
{
newFeeds
[
url
]
=
this
.
filterRecommendations
(
feed
)
;
sendUpdate
(
{
type
:
at
.
DISCOVERY_STREAM_FEED_UPDATE
data
:
{
feed
:
newFeeds
[
url
]
url
}
meta
:
{
isStartup
}
}
)
;
}
)
.
catch
(
error
=
>
{
Cu
.
reportError
(
Error
trying
to
load
component
feed
{
url
}
:
{
error
}
)
;
}
)
;
newFeedsPromises
.
push
(
feedPromise
)
;
}
}
;
}
filterRecommendations
(
feed
)
{
if
(
feed
&
&
feed
.
data
&
&
feed
.
data
.
recommendations
&
&
feed
.
data
.
recommendations
.
length
)
{
const
{
data
:
recommendations
}
=
this
.
filterBlocked
(
feed
.
data
.
recommendations
)
;
return
{
.
.
.
feed
data
:
{
.
.
.
feed
.
data
recommendations
}
}
;
}
return
feed
;
}
reduceFeedComponents
(
isStartup
sendUpdate
)
{
return
(
accumulator
row
)
=
>
{
row
.
components
.
filter
(
component
=
>
component
&
&
component
.
feed
)
.
forEach
(
this
.
buildFeedPromise
(
accumulator
isStartup
sendUpdate
)
)
;
return
accumulator
;
}
;
}
buildFeedPromises
(
layout
isStartup
sendUpdate
)
{
const
initialData
=
{
newFeedsPromises
:
[
]
newFeeds
:
{
}
}
;
return
layout
.
filter
(
row
=
>
row
&
&
row
.
components
)
.
reduce
(
this
.
reduceFeedComponents
(
isStartup
sendUpdate
)
initialData
)
;
}
async
loadComponentFeeds
(
sendUpdate
isStartup
=
false
)
{
const
{
DiscoveryStream
}
=
this
.
store
.
getState
(
)
;
if
(
!
DiscoveryStream
|
|
!
DiscoveryStream
.
layout
)
{
return
;
}
this
.
componentFeedFetched
=
false
;
const
{
newFeedsPromises
newFeeds
}
=
this
.
buildFeedPromises
(
DiscoveryStream
.
layout
isStartup
sendUpdate
)
;
await
Promise
.
all
(
newFeedsPromises
)
;
if
(
this
.
componentFeedFetched
)
{
this
.
cleanUpTopRecImpressionPref
(
newFeeds
)
;
}
await
this
.
cache
.
set
(
"
feeds
"
newFeeds
)
;
sendUpdate
(
{
type
:
at
.
DISCOVERY_STREAM_FEEDS_UPDATE
meta
:
{
isStartup
}
}
)
;
}
getPlacements
(
)
{
const
{
placements
}
=
this
.
store
.
getState
(
)
.
DiscoveryStream
.
spocs
;
if
(
!
placements
|
|
!
placements
.
length
)
{
return
[
{
name
:
"
spocs
"
}
]
;
}
return
placements
;
}
placementsForEach
(
callback
)
{
this
.
getPlacements
(
)
.
forEach
(
callback
)
;
}
normalizeSpocsItems
(
spocs
)
{
const
items
=
spocs
.
items
|
|
spocs
;
const
title
=
spocs
.
title
|
|
"
"
;
const
context
=
spocs
.
context
|
|
"
"
;
const
sponsor
=
spocs
.
sponsor
|
|
"
"
;
const
{
sponsored_by_override
}
=
spocs
;
const
{
flight_id
}
=
spocs
;
return
{
items
title
context
sponsor
sponsored_by_override
.
.
.
(
flight_id
?
{
flight_id
}
:
{
}
)
}
;
}
personalizationOverride
(
overrideCommand
)
{
const
overrideState
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION_OVERRIDE
]
;
const
personalization
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_PERSONALIZATION
]
;
if
(
overrideCommand
&
&
personalization
&
&
!
overrideState
)
{
this
.
store
.
dispatch
(
ac
.
SetPref
(
PREF_PERSONALIZATION_OVERRIDE
true
)
)
;
}
if
(
!
overrideCommand
&
&
overrideState
)
{
this
.
store
.
dispatch
(
{
type
:
at
.
CLEAR_PREF
data
:
{
name
:
PREF_PERSONALIZATION_OVERRIDE
}
}
)
;
}
}
updateSponsoredCollectionsPref
(
collectionEnabled
=
false
)
{
const
currentState
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_COLLECTIONS_ENABLED
]
;
if
(
currentState
!
=
=
collectionEnabled
)
{
this
.
store
.
dispatch
(
ac
.
SetPref
(
PREF_COLLECTIONS_ENABLED
collectionEnabled
)
)
;
}
}
async
loadSpocs
(
sendUpdate
isStartup
)
{
const
cachedData
=
(
await
this
.
cache
.
get
(
)
)
|
|
{
}
;
let
spocsState
;
const
{
placements
}
=
this
.
store
.
getState
(
)
.
DiscoveryStream
.
spocs
;
if
(
this
.
showSpocs
)
{
spocsState
=
cachedData
.
spocs
;
if
(
this
.
isExpired
(
{
cachedData
key
:
"
spocs
"
isStartup
}
)
)
{
const
endpoint
=
this
.
store
.
getState
(
)
.
DiscoveryStream
.
spocs
.
spocs_endpoint
;
const
headers
=
new
Headers
(
)
;
headers
.
append
(
"
content
-
type
"
"
application
/
json
"
)
;
const
apiKeyPref
=
this
.
_prefCache
.
config
.
api_key_pref
;
const
apiKey
=
Services
.
prefs
.
getCharPref
(
apiKeyPref
"
"
)
;
const
spocsResponse
=
await
this
.
fetchFromEndpoint
(
endpoint
{
method
:
"
POST
"
headers
body
:
JSON
.
stringify
(
{
pocket_id
:
this
.
_impressionId
version
:
2
consumer_key
:
apiKey
.
.
.
(
placements
.
length
?
{
placements
}
:
{
}
)
}
)
}
)
;
if
(
spocsResponse
)
{
spocsState
=
{
lastUpdated
:
Date
.
now
(
)
spocs
:
{
.
.
.
spocsResponse
}
}
;
if
(
spocsResponse
.
settings
&
&
spocsResponse
.
settings
.
feature_flags
)
{
this
.
personalizationOverride
(
!
spocsResponse
.
settings
.
feature_flags
.
spoc_v2
)
;
this
.
updateSponsoredCollectionsPref
(
spocsResponse
.
settings
.
feature_flags
.
collections
)
;
}
const
spocsResultPromises
=
this
.
getPlacements
(
)
.
map
(
async
placement
=
>
{
const
freshSpocs
=
spocsState
.
spocs
[
placement
.
name
]
;
if
(
!
freshSpocs
)
{
return
;
}
const
{
items
:
normalizedSpocsItems
title
context
sponsor
sponsored_by_override
}
=
this
.
normalizeSpocsItems
(
freshSpocs
)
;
if
(
!
normalizedSpocsItems
|
|
!
normalizedSpocsItems
.
length
)
{
spocsState
.
spocs
=
{
.
.
.
spocsState
.
spocs
[
placement
.
name
]
:
{
title
context
items
:
[
]
}
}
;
return
;
}
const
{
data
:
migratedSpocs
}
=
this
.
migrateFlightId
(
normalizedSpocsItems
)
;
const
{
data
:
capResult
}
=
this
.
frequencyCapSpocs
(
migratedSpocs
)
;
const
{
data
:
blockedResults
}
=
this
.
filterBlocked
(
capResult
)
;
const
{
data
:
scoredResults
}
=
await
this
.
scoreItems
(
blockedResults
"
spocs
"
)
;
spocsState
.
spocs
=
{
.
.
.
spocsState
.
spocs
[
placement
.
name
]
:
{
title
context
sponsor
sponsored_by_override
items
:
scoredResults
}
}
;
}
)
;
await
Promise
.
all
(
spocsResultPromises
)
;
this
.
cleanUpFlightImpressionPref
(
spocsState
.
spocs
)
;
await
this
.
cache
.
set
(
"
spocs
"
{
lastUpdated
:
spocsState
.
lastUpdated
spocs
:
spocsState
.
spocs
}
)
;
}
else
{
Cu
.
reportError
(
"
No
response
for
spocs_endpoint
prop
"
)
;
}
}
}
spocsState
=
spocsState
&
&
spocsState
.
spocs
?
spocsState
:
{
lastUpdated
:
Date
.
now
(
)
spocs
:
{
}
}
;
sendUpdate
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_UPDATE
data
:
{
lastUpdated
:
spocsState
.
lastUpdated
spocs
:
spocsState
.
spocs
}
meta
:
{
isStartup
}
}
)
;
}
async
clearSpocs
(
)
{
const
endpoint
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_SPOCS_CLEAR_ENDPOINT
]
;
if
(
!
endpoint
)
{
return
;
}
const
headers
=
new
Headers
(
)
;
headers
.
append
(
"
content
-
type
"
"
application
/
json
"
)
;
await
this
.
fetchFromEndpoint
(
endpoint
{
method
:
"
DELETE
"
headers
body
:
JSON
.
stringify
(
{
pocket_id
:
this
.
_impressionId
}
)
}
)
;
}
async
loadPersonalizationScoresCache
(
isStartup
=
false
)
{
const
cachedData
=
(
await
this
.
cache
.
get
(
)
)
|
|
{
}
;
const
{
personalization
}
=
cachedData
;
if
(
this
.
personalized
&
&
personalization
&
&
personalization
.
scores
)
{
this
.
recommendationProvider
.
setProvider
(
personalization
.
scores
)
;
this
.
personalizationLastUpdated
=
personalization
.
_timestamp
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_PERSONALIZATION_LAST_UPDATED
data
:
{
lastUpdated
:
this
.
personalizationLastUpdated
}
meta
:
{
isStartup
}
}
)
)
;
}
}
async
updatePersonalizationScores
(
)
{
if
(
!
this
.
personalized
|
|
Date
.
now
(
)
-
this
.
personalizationLastUpdated
<
MIN_PERSONALIZATION_UPDATE_TIME
)
{
return
;
}
this
.
recommendationProvider
.
setProvider
(
)
;
await
this
.
recommendationProvider
.
init
(
)
;
const
personalization
=
{
scores
:
this
.
recommendationProvider
.
getScores
(
)
}
;
this
.
personalizationLastUpdated
=
Date
.
now
(
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_PERSONALIZATION_LAST_UPDATED
data
:
{
lastUpdated
:
this
.
personalizationLastUpdated
}
}
)
)
;
personalization
.
_timestamp
=
this
.
personalizationLastUpdated
;
this
.
cache
.
set
(
"
personalization
"
personalization
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
idle
-
daily
"
:
this
.
updatePersonalizationScores
(
)
;
break
;
case
"
nsPref
:
changed
"
:
if
(
data
=
=
=
PREF_POCKET_BUTTON
)
{
this
.
configReset
(
)
;
}
break
;
}
}
sortItem
(
a
b
)
{
if
(
a
.
priority
=
=
=
b
.
priority
)
{
return
b
.
score
-
a
.
score
;
}
else
if
(
!
a
.
priority
|
|
a
.
priority
<
=
0
)
{
return
1
;
}
else
if
(
!
b
.
priority
|
|
b
.
priority
<
=
0
)
{
return
-
1
;
}
return
a
.
priority
-
b
.
priority
;
}
async
scoreItems
(
items
type
)
{
const
spocsPersonalized
=
this
.
store
.
getState
(
)
.
Prefs
.
values
?
.
pocketConfig
?
.
spocsPersonalized
;
const
recsPersonalized
=
this
.
store
.
getState
(
)
.
Prefs
.
values
?
.
pocketConfig
?
.
recsPersonalized
;
const
personalizedByType
=
type
=
=
=
"
feed
"
?
recsPersonalized
:
spocsPersonalized
;
const
data
=
(
await
Promise
.
all
(
items
.
map
(
item
=
>
this
.
scoreItem
(
item
personalizedByType
)
)
)
)
.
sort
(
this
.
sortItem
)
;
return
{
data
}
;
}
async
scoreItem
(
item
personalizedByType
)
{
item
.
score
=
item
.
item_score
;
if
(
item
.
score
!
=
=
0
&
&
!
item
.
score
)
{
item
.
score
=
1
;
}
if
(
this
.
personalized
&
&
personalizedByType
)
{
await
this
.
recommendationProvider
.
calculateItemRelevanceScore
(
item
)
;
}
return
item
;
}
filterBlocked
(
data
)
{
if
(
data
&
&
data
.
length
)
{
let
flights
=
this
.
readDataPref
(
PREF_FLIGHT_BLOCKS
)
;
const
filteredItems
=
data
.
filter
(
item
=
>
{
const
blocked
=
NewTabUtils
.
blockedLinks
.
isBlocked
(
{
url
:
item
.
url
}
)
|
|
flights
[
item
.
flight_id
]
;
return
!
blocked
;
}
)
;
return
{
data
:
filteredItems
}
;
}
return
{
data
}
;
}
migrateFlightId
(
spocs
)
{
if
(
spocs
&
&
spocs
.
length
)
{
return
{
data
:
spocs
.
map
(
s
=
>
{
return
{
.
.
.
s
.
.
.
(
s
.
flight_id
|
|
s
.
campaign_id
?
{
flight_id
:
s
.
flight_id
|
|
s
.
campaign_id
}
:
{
}
)
.
.
.
(
s
.
caps
?
{
caps
:
{
.
.
.
s
.
caps
flight
:
s
.
caps
.
flight
|
|
s
.
caps
.
campaign
}
}
:
{
}
)
}
;
}
)
}
;
}
return
{
data
:
spocs
}
;
}
frequencyCapSpocs
(
spocs
)
{
if
(
spocs
&
&
spocs
.
length
)
{
const
impressions
=
this
.
readDataPref
(
PREF_SPOC_IMPRESSIONS
)
;
const
caps
=
[
]
;
const
result
=
spocs
.
filter
(
s
=
>
{
const
isBelow
=
this
.
isBelowFrequencyCap
(
impressions
s
)
;
if
(
!
isBelow
)
{
caps
.
push
(
s
)
;
}
return
isBelow
;
}
)
;
if
(
caps
.
length
)
{
this
.
store
.
dispatch
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_CAPS
data
:
caps
}
)
;
}
return
{
data
:
result
filtered
:
caps
}
;
}
return
{
data
:
spocs
filtered
:
[
]
}
;
}
isBelowFrequencyCap
(
impressions
spoc
)
{
const
flightImpressions
=
impressions
[
spoc
.
flight_id
]
;
if
(
!
flightImpressions
)
{
return
true
;
}
const
lifetime
=
spoc
.
caps
&
&
spoc
.
caps
.
lifetime
;
const
lifeTimeCap
=
Math
.
min
(
lifetime
|
|
MAX_LIFETIME_CAP
MAX_LIFETIME_CAP
)
;
const
lifeTimeCapExceeded
=
flightImpressions
.
length
>
=
lifeTimeCap
;
if
(
lifeTimeCapExceeded
)
{
return
false
;
}
const
flightCap
=
spoc
.
caps
&
&
spoc
.
caps
.
flight
;
if
(
flightCap
)
{
const
flightCapExceeded
=
flightImpressions
.
filter
(
i
=
>
Date
.
now
(
)
-
i
<
flightCap
.
period
*
1000
)
.
length
>
=
flightCap
.
count
;
return
!
flightCapExceeded
;
}
return
true
;
}
async
retryFeed
(
feed
)
{
const
{
url
}
=
feed
;
const
result
=
await
this
.
getComponentFeed
(
url
)
;
const
newFeed
=
this
.
filterRecommendations
(
result
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_FEED_UPDATE
data
:
{
feed
:
newFeed
url
}
}
)
)
;
}
async
getComponentFeed
(
feedUrl
isStartup
)
{
const
cachedData
=
(
await
this
.
cache
.
get
(
)
)
|
|
{
}
;
const
{
feeds
}
=
cachedData
;
let
feed
=
feeds
?
feeds
[
feedUrl
]
:
null
;
if
(
this
.
isExpired
(
{
cachedData
key
:
"
feed
"
url
:
feedUrl
isStartup
}
)
)
{
const
feedResponse
=
await
this
.
fetchFromEndpoint
(
feedUrl
)
;
if
(
feedResponse
)
{
const
{
data
:
scoredItems
}
=
await
this
.
scoreItems
(
feedResponse
.
recommendations
"
feed
"
)
;
const
{
recsExpireTime
}
=
feedResponse
.
settings
;
const
recommendations
=
this
.
rotate
(
scoredItems
recsExpireTime
)
;
this
.
componentFeedFetched
=
true
;
feed
=
{
lastUpdated
:
Date
.
now
(
)
data
:
{
settings
:
feedResponse
.
settings
recommendations
status
:
"
success
"
}
}
;
}
else
{
Cu
.
reportError
(
"
No
response
for
feed
"
)
;
}
}
return
(
feed
|
|
{
data
:
{
status
:
"
failed
"
}
}
)
;
}
async
_maybeUpdateCachedData
(
)
{
const
expirationPerComponent
=
await
this
.
_checkExpirationPerComponent
(
)
;
if
(
expirationPerComponent
.
layout
)
{
await
this
.
loadLayout
(
this
.
store
.
dispatch
)
;
}
if
(
expirationPerComponent
.
spocs
)
{
await
this
.
loadSpocs
(
this
.
store
.
dispatch
)
;
}
if
(
expirationPerComponent
.
feeds
)
{
await
this
.
loadComponentFeeds
(
this
.
store
.
dispatch
)
;
}
}
async
refreshAll
(
options
=
{
}
)
{
const
personalizationCacheLoadPromise
=
this
.
loadPersonalizationScoresCache
(
options
.
isStartup
)
;
const
spocsPersonalized
=
this
.
store
.
getState
(
)
.
Prefs
.
values
?
.
pocketConfig
?
.
spocsPersonalized
;
const
recsPersonalized
=
this
.
store
.
getState
(
)
.
Prefs
.
values
?
.
pocketConfig
?
.
recsPersonalized
;
let
expirationPerComponent
=
{
}
;
if
(
this
.
personalized
)
{
expirationPerComponent
=
await
this
.
_checkExpirationPerComponent
(
)
;
}
await
this
.
refreshContent
(
options
)
;
if
(
this
.
personalized
)
{
personalizationCacheLoadPromise
.
then
(
(
)
=
>
{
const
initPromise
=
this
.
recommendationProvider
.
init
(
)
;
initPromise
.
then
(
(
)
=
>
{
const
{
feeds
spocs
}
=
this
.
store
.
getState
(
)
.
DiscoveryStream
;
if
(
recsPersonalized
&
&
feeds
.
loaded
&
&
expirationPerComponent
.
feeds
)
{
this
.
scoreFeeds
(
feeds
)
;
}
if
(
spocsPersonalized
&
&
spocs
.
loaded
&
&
expirationPerComponent
.
spocs
)
{
this
.
scoreSpocs
(
spocs
)
;
}
}
)
;
}
)
;
}
}
async
scoreFeeds
(
feedsState
)
{
if
(
feedsState
.
data
)
{
const
feeds
=
{
}
;
const
feedsPromises
=
Object
.
keys
(
feedsState
.
data
)
.
map
(
url
=
>
{
let
feed
=
feedsState
.
data
[
url
]
;
const
feedPromise
=
this
.
scoreItems
(
feed
.
data
.
recommendations
"
feed
"
)
;
feedPromise
.
then
(
(
{
data
:
scoredItems
}
)
=
>
{
const
{
recsExpireTime
}
=
feed
.
data
.
settings
;
const
recommendations
=
this
.
rotate
(
scoredItems
recsExpireTime
)
;
feed
=
{
.
.
.
feed
data
:
{
.
.
.
feed
.
data
recommendations
}
}
;
feeds
[
url
]
=
feed
;
this
.
store
.
dispatch
(
ac
.
AlsoToPreloaded
(
{
type
:
at
.
DISCOVERY_STREAM_FEED_UPDATE
data
:
{
feed
url
}
}
)
)
;
}
)
;
return
feedPromise
;
}
)
;
await
Promise
.
all
(
feedsPromises
)
;
await
this
.
cache
.
set
(
"
feeds
"
feeds
)
;
}
}
async
scoreSpocs
(
spocsState
)
{
const
spocsResultPromises
=
this
.
getPlacements
(
)
.
map
(
async
placement
=
>
{
const
nextSpocs
=
spocsState
.
data
[
placement
.
name
]
|
|
{
}
;
const
{
items
}
=
nextSpocs
;
if
(
!
items
|
|
!
items
.
length
)
{
return
;
}
const
{
data
:
scoreResult
}
=
await
this
.
scoreItems
(
items
"
spocs
"
)
;
spocsState
.
data
=
{
.
.
.
spocsState
.
data
[
placement
.
name
]
:
{
.
.
.
nextSpocs
items
:
scoreResult
}
}
;
}
)
;
await
Promise
.
all
(
spocsResultPromises
)
;
await
this
.
cache
.
set
(
"
spocs
"
{
lastUpdated
:
spocsState
.
lastUpdated
spocs
:
spocsState
.
data
}
)
;
this
.
store
.
dispatch
(
ac
.
AlsoToPreloaded
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_UPDATE
data
:
{
lastUpdated
:
spocsState
.
lastUpdated
spocs
:
spocsState
.
data
}
}
)
)
;
}
async
refreshContent
(
options
=
{
}
)
{
const
{
updateOpenTabs
isStartup
}
=
options
;
const
dispatch
=
updateOpenTabs
?
action
=
>
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
action
)
)
:
this
.
store
.
dispatch
;
await
this
.
loadLayout
(
dispatch
isStartup
)
;
if
(
this
.
showStories
)
{
await
Promise
.
all
(
[
this
.
loadSpocs
(
dispatch
isStartup
)
.
catch
(
error
=
>
Cu
.
reportError
(
Error
trying
to
load
spocs
feeds
:
{
error
}
)
)
this
.
loadComponentFeeds
(
dispatch
isStartup
)
.
catch
(
error
=
>
Cu
.
reportError
(
Error
trying
to
load
component
feeds
:
{
error
}
)
)
]
)
;
if
(
isStartup
)
{
await
this
.
_maybeUpdateCachedData
(
)
;
}
}
}
rotate
(
recommendations
recsExpireTime
)
{
const
maxImpressionAge
=
Math
.
max
(
recsExpireTime
*
1000
|
|
DEFAULT_RECS_EXPIRE_TIME
DEFAULT_RECS_EXPIRE_TIME
)
;
const
impressions
=
this
.
readDataPref
(
PREF_REC_IMPRESSIONS
)
;
const
expired
=
[
]
;
const
active
=
[
]
;
for
(
const
item
of
recommendations
)
{
if
(
impressions
[
item
.
id
]
&
&
Date
.
now
(
)
-
impressions
[
item
.
id
]
>
=
maxImpressionAge
)
{
expired
.
push
(
item
)
;
}
else
{
active
.
push
(
item
)
;
}
}
return
active
.
concat
(
expired
)
;
}
enableStories
(
)
{
if
(
this
.
config
.
enabled
&
&
this
.
loaded
)
{
this
.
refreshAll
(
{
updateOpenTabs
:
true
}
)
;
}
}
async
enable
(
)
{
await
this
.
refreshAll
(
{
updateOpenTabs
:
true
isStartup
:
true
}
)
;
Services
.
obs
.
addObserver
(
this
"
idle
-
daily
"
)
;
this
.
loaded
=
true
;
}
async
reset
(
)
{
this
.
resetDataPrefs
(
)
;
await
this
.
resetCache
(
)
;
if
(
this
.
loaded
)
{
Services
.
obs
.
removeObserver
(
this
"
idle
-
daily
"
)
;
}
this
.
resetState
(
)
;
}
async
resetCache
(
)
{
await
this
.
resetAllCache
(
)
;
}
async
resetContentCache
(
)
{
await
this
.
cache
.
set
(
"
layout
"
{
}
)
;
await
this
.
cache
.
set
(
"
feeds
"
{
}
)
;
await
this
.
cache
.
set
(
"
spocs
"
{
}
)
;
}
async
resetAllCache
(
)
{
await
this
.
resetContentCache
(
)
;
await
this
.
cache
.
set
(
"
personalization
"
{
}
)
;
}
resetDataPrefs
(
)
{
this
.
writeDataPref
(
PREF_SPOC_IMPRESSIONS
{
}
)
;
this
.
writeDataPref
(
PREF_REC_IMPRESSIONS
{
}
)
;
this
.
writeDataPref
(
PREF_FLIGHT_BLOCKS
{
}
)
;
}
resetState
(
)
{
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_LAYOUT_RESET
}
)
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_COLLECTION_DISMISSIBLE_TOGGLE
data
:
{
value
:
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_COLLECTION_DISMISSIBLE
]
}
}
)
)
;
this
.
personalizationLastUpdated
=
null
;
this
.
loaded
=
false
;
}
async
onPrefChange
(
)
{
await
this
.
reset
(
)
;
if
(
this
.
config
.
enabled
)
{
await
this
.
enable
(
)
;
}
}
configReset
(
)
{
this
.
_prefCache
.
config
=
null
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_CONFIG_CHANGE
data
:
this
.
config
}
)
)
;
}
recordFlightImpression
(
flightId
)
{
let
impressions
=
this
.
readDataPref
(
PREF_SPOC_IMPRESSIONS
)
;
const
timeStamps
=
impressions
[
flightId
]
|
|
[
]
;
timeStamps
.
push
(
Date
.
now
(
)
)
;
impressions
=
{
.
.
.
impressions
[
flightId
]
:
timeStamps
}
;
this
.
writeDataPref
(
PREF_SPOC_IMPRESSIONS
impressions
)
;
}
recordTopRecImpressions
(
recId
)
{
let
impressions
=
this
.
readDataPref
(
PREF_REC_IMPRESSIONS
)
;
if
(
!
impressions
[
recId
]
)
{
impressions
=
{
.
.
.
impressions
[
recId
]
:
Date
.
now
(
)
}
;
this
.
writeDataPref
(
PREF_REC_IMPRESSIONS
impressions
)
;
}
}
recordBlockFlightId
(
flightId
)
{
const
flights
=
this
.
readDataPref
(
PREF_FLIGHT_BLOCKS
)
;
if
(
!
flights
[
flightId
]
)
{
flights
[
flightId
]
=
1
;
this
.
writeDataPref
(
PREF_FLIGHT_BLOCKS
flights
)
;
}
}
cleanUpFlightImpressionPref
(
data
)
{
let
flightIds
=
[
]
;
this
.
placementsForEach
(
placement
=
>
{
const
newSpocs
=
data
[
placement
.
name
]
;
if
(
!
newSpocs
)
{
return
;
}
const
items
=
newSpocs
.
items
|
|
[
]
;
flightIds
=
[
.
.
.
flightIds
.
.
.
items
.
map
(
s
=
>
{
s
.
flight_id
}
)
]
;
}
)
;
if
(
flightIds
&
&
flightIds
.
length
)
{
this
.
cleanUpImpressionPref
(
id
=
>
!
flightIds
.
includes
(
id
)
PREF_SPOC_IMPRESSIONS
)
;
}
}
cleanUpTopRecImpressionPref
(
newFeeds
)
{
const
activeStories
=
Object
.
keys
(
newFeeds
)
.
filter
(
currentValue
=
>
newFeeds
[
currentValue
]
.
data
)
.
reduce
(
(
accumulator
currentValue
)
=
>
{
const
{
recommendations
}
=
newFeeds
[
currentValue
]
.
data
;
return
accumulator
.
concat
(
recommendations
.
map
(
i
=
>
{
i
.
id
}
)
)
;
}
[
]
)
;
this
.
cleanUpImpressionPref
(
id
=
>
!
activeStories
.
includes
(
id
)
PREF_REC_IMPRESSIONS
)
;
}
writeDataPref
(
pref
impressions
)
{
this
.
store
.
dispatch
(
ac
.
SetPref
(
pref
JSON
.
stringify
(
impressions
)
)
)
;
}
readDataPref
(
pref
)
{
const
prefVal
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
pref
]
;
return
prefVal
?
JSON
.
parse
(
prefVal
)
:
{
}
;
}
cleanUpImpressionPref
(
isExpired
pref
)
{
const
impressions
=
this
.
readDataPref
(
pref
)
;
let
changed
=
false
;
Object
.
keys
(
impressions
)
.
forEach
(
id
=
>
{
if
(
isExpired
(
id
)
)
{
changed
=
true
;
delete
impressions
[
id
]
;
}
}
)
;
if
(
changed
)
{
this
.
writeDataPref
(
pref
impressions
)
;
}
}
onPocketConfigChanged
(
)
{
const
dispatch
=
action
=
>
this
.
store
.
dispatch
(
ac
.
AlsoToPreloaded
(
action
)
)
;
this
.
loadLayout
(
dispatch
false
)
;
}
async
onPrefChangedAction
(
action
)
{
switch
(
action
.
data
.
name
)
{
case
PREF_CONFIG
:
case
PREF_ENABLED
:
case
PREF_HARDCODED_BASIC_LAYOUT
:
case
PREF_SPOCS_ENDPOINT
:
case
PREF_SPOCS_ENDPOINT_QUERY
:
case
PREF_PERSONALIZATION
:
this
.
configReset
(
)
;
break
;
case
PREF_COLLECTIONS_ENABLED
:
this
.
onPocketConfigChanged
(
)
;
break
;
case
PREF_USER_TOPSTORIES
:
case
PREF_SYSTEM_TOPSTORIES
:
if
(
!
action
.
data
.
value
)
{
this
.
clearSpocs
(
)
;
}
else
{
this
.
enableStories
(
)
;
}
break
;
case
PREF_SHOW_SPONSORED
:
if
(
!
action
.
data
.
value
)
{
this
.
clearSpocs
(
)
;
}
await
this
.
loadSpocs
(
update
=
>
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
update
)
)
)
;
break
;
}
}
async
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
setupPrefs
(
true
)
;
if
(
this
.
config
.
enabled
)
{
await
this
.
enable
(
)
;
}
Services
.
prefs
.
addObserver
(
PREF_POCKET_BUTTON
this
)
;
break
;
case
at
.
DISCOVERY_STREAM_DEV_SYSTEM_TICK
:
case
at
.
SYSTEM_TICK
:
if
(
this
.
config
.
enabled
&
&
this
.
loaded
&
&
(
await
this
.
checkIfAnyCacheExpired
(
)
)
)
{
await
this
.
refreshAll
(
{
updateOpenTabs
:
false
}
)
;
}
break
;
case
at
.
DISCOVERY_STREAM_DEV_IDLE_DAILY
:
Services
.
obs
.
notifyObservers
(
null
"
idle
-
daily
"
)
;
break
;
case
at
.
DISCOVERY_STREAM_DEV_SYNC_RS
:
RemoteSettings
.
pollChanges
(
)
;
break
;
case
at
.
DISCOVERY_STREAM_DEV_EXPIRE_CACHE
:
await
this
.
resetContentCache
(
)
;
break
;
case
at
.
DISCOVERY_STREAM_CONFIG_SET_VALUE
:
this
.
store
.
dispatch
(
ac
.
SetPref
(
PREF_CONFIG
JSON
.
stringify
(
{
.
.
.
JSON
.
parse
(
this
.
store
.
getState
(
)
.
Prefs
.
values
[
PREF_CONFIG
]
)
[
action
.
data
.
name
]
:
action
.
data
.
value
}
)
)
)
;
break
;
case
at
.
DISCOVERY_STREAM_CONFIG_RESET
:
this
.
configReset
(
)
;
break
;
case
at
.
DISCOVERY_STREAM_CONFIG_RESET_DEFAULTS
:
this
.
resetConfigDefauts
(
)
;
break
;
case
at
.
DISCOVERY_STREAM_RETRY_FEED
:
this
.
retryFeed
(
action
.
data
.
feed
)
;
break
;
case
at
.
DISCOVERY_STREAM_CONFIG_CHANGE
:
await
this
.
onPrefChange
(
)
;
break
;
case
at
.
DISCOVERY_STREAM_IMPRESSION_STATS
:
if
(
action
.
data
.
tiles
&
&
action
.
data
.
tiles
[
0
]
&
&
action
.
data
.
tiles
[
0
]
.
id
)
{
this
.
recordTopRecImpressions
(
action
.
data
.
tiles
[
0
]
.
id
)
;
}
break
;
case
at
.
DISCOVERY_STREAM_SPOC_IMPRESSION
:
if
(
this
.
showSpocs
)
{
this
.
recordFlightImpression
(
action
.
data
.
flightId
)
;
const
spocsState
=
this
.
store
.
getState
(
)
.
DiscoveryStream
.
spocs
;
let
frequencyCapped
=
[
]
;
this
.
placementsForEach
(
placement
=
>
{
const
spocs
=
spocsState
.
data
[
placement
.
name
]
;
if
(
!
spocs
|
|
!
spocs
.
items
)
{
return
;
}
const
{
data
:
capResult
filtered
}
=
this
.
frequencyCapSpocs
(
spocs
.
items
)
;
frequencyCapped
=
[
.
.
.
frequencyCapped
.
.
.
filtered
]
;
spocsState
.
data
=
{
.
.
.
spocsState
.
data
[
placement
.
name
]
:
{
.
.
.
spocs
items
:
capResult
}
}
;
}
)
;
if
(
frequencyCapped
.
length
)
{
await
this
.
cache
.
set
(
"
spocs
"
{
lastUpdated
:
spocsState
.
lastUpdated
spocs
:
spocsState
.
data
}
)
;
this
.
store
.
dispatch
(
ac
.
AlsoToPreloaded
(
{
type
:
at
.
DISCOVERY_STREAM_SPOCS_UPDATE
data
:
{
lastUpdated
:
spocsState
.
lastUpdated
spocs
:
spocsState
.
data
}
}
)
)
;
}
}
break
;
case
at
.
PLACES_LINK_BLOCKED
:
if
(
this
.
showSpocs
)
{
let
blockedItems
=
[
]
;
const
spocsState
=
this
.
store
.
getState
(
)
.
DiscoveryStream
.
spocs
;
this
.
placementsForEach
(
placement
=
>
{
const
spocs
=
spocsState
.
data
[
placement
.
name
]
;
if
(
spocs
&
&
spocs
.
items
&
&
spocs
.
items
.
length
)
{
const
blockedResults
=
[
]
;
const
blocks
=
spocs
.
items
.
filter
(
s
=
>
{
const
blocked
=
s
.
url
=
=
=
action
.
data
.
url
;
if
(
!
blocked
)
{
blockedResults
.
push
(
s
)
;
}
return
blocked
;
}
)
;
blockedItems
=
[
.
.
.
blockedItems
.
.
.
blocks
]
;
spocsState
.
data
=
{
.
.
.
spocsState
.
data
[
placement
.
name
]
:
{
.
.
.
spocs
items
:
blockedResults
}
}
;
}
}
)
;
if
(
blockedItems
.
length
)
{
await
this
.
cache
.
set
(
"
spocs
"
{
lastUpdated
:
spocsState
.
lastUpdated
spocs
:
spocsState
.
data
}
)
;
this
.
store
.
dispatch
(
ac
.
AlsoToPreloaded
(
{
type
:
at
.
DISCOVERY_STREAM_LINK_BLOCKED
data
:
action
.
data
}
)
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_SPOC_BLOCKED
data
:
action
.
data
}
)
)
;
break
;
}
}
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
DISCOVERY_STREAM_LINK_BLOCKED
data
:
action
.
data
}
)
)
;
break
;
case
at
.
UNINIT
:
this
.
uninitPrefs
(
)
;
this
.
_recommendationProvider
=
null
;
Services
.
prefs
.
removeObserver
(
PREF_POCKET_BUTTON
this
)
;
break
;
case
at
.
BLOCK_URL
:
{
action
.
data
.
forEach
(
site
=
>
{
const
{
flight_id
}
=
site
;
if
(
flight_id
)
{
this
.
recordBlockFlightId
(
flight_id
)
;
}
}
)
;
break
;
}
case
at
.
PREF_CHANGED
:
await
this
.
onPrefChangedAction
(
action
)
;
if
(
action
.
data
.
name
=
=
=
"
pocketConfig
"
)
{
await
this
.
onPocketConfigChanged
(
action
.
data
.
value
)
;
}
break
;
}
}
}
;
getHardcodedLayout
=
(
{
items
=
21
spocPositions
=
[
2
4
11
20
]
sponsoredCollectionsEnabled
=
false
compactLayout
=
false
hybridLayout
=
false
hideCardBackground
=
false
fourCardLayout
=
false
loadMore
=
false
lastCardMessageEnabled
=
false
newFooterSection
=
false
pocketButtonEnabled
=
false
saveToPocketCard
=
false
hideDescriptions
=
true
compactGrid
=
false
compactImages
=
false
imageGradient
=
false
newSponsoredLabel
=
false
titleLines
=
3
descLines
=
3
essentialReadsHeader
=
false
editorsPicksHeader
=
false
readTime
=
false
}
)
=
>
(
{
lastUpdate
:
Date
.
now
(
)
spocs
:
{
url
:
"
https
:
/
/
spocs
.
getpocket
.
com
/
spocs
"
}
layout
:
[
{
width
:
12
components
:
[
{
type
:
"
TopSites
"
header
:
{
title
:
{
id
:
"
newtab
-
section
-
header
-
topsites
"
}
}
properties
:
{
}
}
.
.
.
(
sponsoredCollectionsEnabled
?
[
{
type
:
"
CollectionCardGrid
"
properties
:
{
items
:
3
}
pocketButtonEnabled
header
:
{
title
:
"
"
}
placement
:
{
name
:
"
sponsored
-
collection
"
ad_types
:
[
3617
]
zone_ids
:
[
217759
218031
]
}
spocs
:
{
probability
:
1
positions
:
[
{
index
:
0
}
{
index
:
1
}
{
index
:
2
}
]
}
}
]
:
[
]
)
{
type
:
"
Message
"
essentialReadsHeader
editorsPicksHeader
header
:
{
title
:
{
id
:
"
newtab
-
section
-
header
-
pocket
"
values
:
{
provider
:
"
Pocket
"
}
}
subtitle
:
"
"
link_text
:
{
id
:
"
newtab
-
pocket
-
learn
-
more
"
}
link_url
:
"
https
:
/
/
getpocket
.
com
/
firefox
/
new_tab_learn_more
"
icon
:
"
chrome
:
/
/
global
/
skin
/
icons
/
pocket
.
svg
"
}
properties
:
{
}
styles
:
{
"
.
ds
-
message
"
:
"
margin
-
bottom
:
-
20px
"
}
}
{
type
:
"
CardGrid
"
properties
:
{
items
hybridLayout
hideCardBackground
:
hideCardBackground
|
|
compactLayout
fourCardLayout
:
fourCardLayout
|
|
compactLayout
hideDescriptions
:
hideDescriptions
|
|
compactLayout
compactImages
imageGradient
newSponsoredLabel
:
newSponsoredLabel
|
|
compactLayout
titleLines
:
(
compactLayout
&
&
3
)
|
|
titleLines
descLines
compactGrid
essentialReadsHeader
editorsPicksHeader
readTime
:
readTime
|
|
compactLayout
}
loadMore
lastCardMessageEnabled
pocketButtonEnabled
saveToPocketCard
cta_variant
:
"
link
"
header
:
{
title
:
"
"
}
placement
:
{
name
:
"
spocs
"
ad_types
:
[
3617
]
zone_ids
:
[
217758
217995
]
}
feed
:
{
embed_reference
:
null
url
:
"
https
:
/
/
getpocket
.
cdn
.
mozilla
.
net
/
v3
/
firefox
/
global
-
recs
?
version
=
3
&
consumer_key
=
apiKey
&
locale_lang
=
locale
&
region
=
region
&
count
=
30
"
}
spocs
:
{
probability
:
1
positions
:
spocPositions
.
map
(
position
=
>
{
return
{
index
:
position
}
;
}
)
}
}
{
type
:
"
Navigation
"
newFooterSection
properties
:
{
alignment
:
"
left
-
align
"
links
:
[
{
name
:
"
Self
improvement
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
/
self
-
improvement
?
utm_source
=
pocket
-
newtab
"
}
{
name
:
"
Food
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
/
food
?
utm_source
=
pocket
-
newtab
"
}
{
name
:
"
Entertainment
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
/
entertainment
?
utm_source
=
pocket
-
newtab
"
}
{
name
:
"
Health
&
fitness
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
/
health
?
utm_source
=
pocket
-
newtab
"
}
{
name
:
"
Science
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
/
science
?
utm_source
=
pocket
-
newtab
"
}
{
name
:
"
More
recommendations
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
?
utm_source
=
pocket
-
newtab
"
}
]
extraLinks
:
[
{
name
:
"
Career
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
/
career
?
utm_source
=
pocket
-
newtab
"
}
{
name
:
"
Technology
"
url
:
"
https
:
/
/
getpocket
.
com
/
explore
/
technology
?
utm_source
=
pocket
-
newtab
"
}
]
privacyNoticeURL
:
{
url
:
"
https
:
/
/
www
.
mozilla
.
org
/
privacy
/
firefox
/
#
suggest
-
relevant
-
content
"
title
:
{
id
:
"
newtab
-
section
-
menu
-
privacy
-
notice
"
}
}
}
header
:
{
title
:
{
id
:
"
newtab
-
pocket
-
read
-
more
"
}
}
styles
:
{
"
.
ds
-
navigation
"
:
"
margin
-
top
:
-
10px
;
"
}
}
.
.
.
(
newFooterSection
?
[
{
type
:
"
PrivacyLink
"
properties
:
{
url
:
"
https
:
/
/
www
.
mozilla
.
org
/
privacy
/
firefox
/
"
title
:
{
id
:
"
newtab
-
section
-
menu
-
privacy
-
notice
"
}
}
}
]
:
[
]
)
]
}
]
}
)
;
const
EXPORTED_SYMBOLS
=
[
"
DiscoveryStreamFeed
"
]
;
