"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
actionCreators
:
ac
actionTypes
:
at
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
TippyTopProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
TippyTopProvider
.
jsm
"
{
}
)
;
const
{
insertPinned
TOP_SITES_MAX_SITES_PER_ROW
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Reducers
.
jsm
"
{
}
)
;
const
{
Dedupe
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Dedupe
.
jsm
"
{
}
)
;
const
{
shortURL
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ShortURL
.
jsm
"
{
}
)
;
const
{
getDefaultOptions
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamStorage
.
jsm
"
{
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
filterAdult
"
"
resource
:
/
/
activity
-
stream
/
lib
/
FilterAdult
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
LinksCache
"
"
resource
:
/
/
activity
-
stream
/
lib
/
LinksCache
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NewTabUtils
"
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Screenshots
"
"
resource
:
/
/
activity
-
stream
/
lib
/
Screenshots
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PageThumbs
"
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
)
;
const
DEFAULT_SITES_PREF
=
"
default
.
sites
"
;
const
DEFAULT_TOP_SITES
=
[
]
;
const
FRECENCY_THRESHOLD
=
100
+
1
;
const
MIN_FAVICON_SIZE
=
96
;
const
CACHED_LINK_PROPS_TO_MIGRATE
=
[
"
screenshot
"
"
customScreenshot
"
]
;
const
PINNED_FAVICON_PROPS_TO_MIGRATE
=
[
"
favicon
"
"
faviconRef
"
"
faviconSize
"
]
;
const
SECTION_ID
=
"
topsites
"
;
const
ROWS_PREF
=
"
topSitesRows
"
;
const
NO_DEFAULT_SEARCH_TILE_EXP_PREF
=
"
improvesearch
.
noDefaultSearchTile
"
;
const
SEARCH_FILTERS
=
[
"
google
"
"
search
.
yahoo
"
"
yahoo
"
"
bing
"
"
ask
"
"
duckduckgo
"
]
;
function
getShortURLForCurrentSearch
(
)
{
const
url
=
shortURL
(
{
url
:
Services
.
search
.
currentEngine
.
searchForm
}
)
;
return
url
;
}
this
.
TopSitesFeed
=
class
TopSitesFeed
{
constructor
(
)
{
this
.
_tippyTopProvider
=
new
TippyTopProvider
(
)
;
this
.
_currentSearchHostname
=
null
;
this
.
dedupe
=
new
Dedupe
(
this
.
_dedupeKey
)
;
this
.
frecentCache
=
new
LinksCache
(
NewTabUtils
.
activityStreamLinks
"
getTopSites
"
CACHED_LINK_PROPS_TO_MIGRATE
(
oldOptions
newOptions
)
=
>
!
(
oldOptions
.
numItems
>
=
newOptions
.
numItems
)
)
;
this
.
pinnedCache
=
new
LinksCache
(
NewTabUtils
.
pinnedLinks
"
links
"
[
.
.
.
CACHED_LINK_PROPS_TO_MIGRATE
.
.
.
PINNED_FAVICON_PROPS_TO_MIGRATE
]
)
;
PageThumbs
.
addExpirationFilter
(
this
)
;
}
init
(
)
{
this
.
refreshDefaults
(
this
.
store
.
getState
(
)
.
Prefs
.
values
[
DEFAULT_SITES_PREF
]
)
;
this
.
_storage
=
this
.
store
.
dbStorage
.
getDbTable
(
"
sectionPrefs
"
)
;
this
.
refresh
(
{
broadcast
:
true
}
)
;
Services
.
obs
.
addObserver
(
this
"
browser
-
search
-
engine
-
modified
"
)
;
this
.
_currentSearchHostname
=
getShortURLForCurrentSearch
(
)
;
}
uninit
(
)
{
PageThumbs
.
removeExpirationFilter
(
this
)
;
Services
.
obs
.
removeObserver
(
this
"
browser
-
search
-
engine
-
modified
"
)
;
this
.
_currentSearchHostname
=
null
;
}
observe
(
subj
topic
data
)
{
if
(
topic
=
=
=
"
browser
-
search
-
engine
-
modified
"
&
&
data
=
=
=
"
engine
-
current
"
&
&
this
.
store
.
getState
(
)
.
Prefs
.
values
[
NO_DEFAULT_SEARCH_TILE_EXP_PREF
]
)
{
this
.
_currentSearchHostname
=
getShortURLForCurrentSearch
(
)
;
this
.
refresh
(
{
broadcast
:
true
}
)
;
}
}
_dedupeKey
(
site
)
{
return
site
&
&
site
.
hostname
;
}
refreshDefaults
(
sites
)
{
DEFAULT_TOP_SITES
.
length
=
0
;
if
(
sites
)
{
for
(
const
url
of
sites
.
split
(
"
"
)
)
{
const
site
=
{
isDefault
:
true
url
}
;
site
.
hostname
=
shortURL
(
site
)
;
DEFAULT_TOP_SITES
.
push
(
site
)
;
}
}
}
filterForThumbnailExpiration
(
callback
)
{
const
{
rows
}
=
this
.
store
.
getState
(
)
.
TopSites
;
callback
(
rows
.
reduce
(
(
acc
site
)
=
>
{
acc
.
push
(
site
.
url
)
;
if
(
site
.
customScreenshotURL
)
{
acc
.
push
(
site
.
customScreenshotURL
)
;
}
return
acc
;
}
[
]
)
)
;
}
isExperimentOnAndLinkFilteredSearch
(
hostname
)
{
if
(
!
this
.
store
.
getState
(
)
.
Prefs
.
values
[
NO_DEFAULT_SEARCH_TILE_EXP_PREF
]
)
{
return
false
;
}
if
(
SEARCH_FILTERS
.
includes
(
hostname
)
|
|
hostname
=
=
=
this
.
_currentSearchHostname
)
{
return
true
;
}
return
false
;
}
async
getLinksWithDefaults
(
)
{
const
numItems
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
ROWS_PREF
]
*
TOP_SITES_MAX_SITES_PER_ROW
;
const
frecent
=
(
await
this
.
frecentCache
.
request
(
{
numItems
topsiteFrecency
:
FRECENCY_THRESHOLD
}
)
)
.
reduce
(
(
validLinks
link
)
=
>
{
const
hostname
=
shortURL
(
link
)
;
if
(
!
this
.
isExperimentOnAndLinkFilteredSearch
(
hostname
)
)
{
validLinks
.
push
(
{
.
.
.
link
hostname
}
)
;
}
return
validLinks
;
}
[
]
)
;
const
notBlockedDefaultSites
=
DEFAULT_TOP_SITES
.
filter
(
link
=
>
{
if
(
NewTabUtils
.
blockedLinks
.
isBlocked
(
{
url
:
link
.
url
}
)
)
{
return
false
;
}
else
if
(
this
.
isExperimentOnAndLinkFilteredSearch
(
link
.
hostname
)
)
{
return
false
;
}
return
true
;
}
)
;
const
plainPinned
=
await
this
.
pinnedCache
.
request
(
)
;
const
pinned
=
await
Promise
.
all
(
plainPinned
.
map
(
async
link
=
>
{
if
(
!
link
)
{
return
link
;
}
const
finder
=
other
=
>
other
.
url
=
=
=
link
.
url
;
const
frecentSite
=
frecent
.
find
(
finder
)
;
if
(
frecentSite
&
&
link
.
customScreenshotURL
)
{
delete
frecentSite
.
screenshot
;
}
const
copy
=
Object
.
assign
(
{
}
frecentSite
|
|
{
isDefault
:
!
!
notBlockedDefaultSites
.
find
(
finder
)
}
link
{
hostname
:
shortURL
(
link
)
}
)
;
if
(
!
copy
.
favicon
)
{
try
{
NewTabUtils
.
activityStreamProvider
.
_faviconBytesToDataURI
(
await
NewTabUtils
.
activityStreamProvider
.
_addFavicons
(
[
copy
]
)
)
;
for
(
const
prop
of
PINNED_FAVICON_PROPS_TO_MIGRATE
)
{
copy
.
__sharedCache
.
updateLink
(
prop
copy
[
prop
]
)
;
}
}
catch
(
e
)
{
}
}
return
copy
;
}
)
)
;
const
[
dedupedFrecent
dedupedDefaults
]
=
this
.
dedupe
.
group
(
pinned
frecent
notBlockedDefaultSites
)
;
const
dedupedUnpinned
=
[
.
.
.
dedupedFrecent
.
.
.
dedupedDefaults
]
;
const
checkedAdult
=
this
.
store
.
getState
(
)
.
Prefs
.
values
.
filterAdult
?
filterAdult
(
dedupedUnpinned
)
:
dedupedUnpinned
;
const
withPinned
=
insertPinned
(
checkedAdult
pinned
)
.
slice
(
0
numItems
)
;
for
(
const
link
of
withPinned
)
{
if
(
link
)
{
if
(
link
.
customScreenshotURL
)
{
this
.
_fetchScreenshot
(
link
link
.
customScreenshotURL
)
;
}
else
{
this
.
_fetchIcon
(
link
)
;
}
delete
link
.
__sharedCache
;
link
.
typedBonus
=
true
;
}
}
return
withPinned
;
}
async
refresh
(
options
=
{
}
)
{
if
(
!
this
.
_tippyTopProvider
.
initialized
)
{
await
this
.
_tippyTopProvider
.
init
(
)
;
}
const
links
=
await
this
.
getLinksWithDefaults
(
)
;
const
newAction
=
{
type
:
at
.
TOP_SITES_UPDATED
data
:
{
links
}
}
;
let
storedPrefs
;
try
{
storedPrefs
=
await
this
.
_storage
.
get
(
SECTION_ID
)
|
|
{
}
;
}
catch
(
e
)
{
storedPrefs
=
{
}
;
Cu
.
reportError
(
"
Problem
getting
stored
prefs
for
TopSites
"
)
;
}
newAction
.
data
.
pref
=
getDefaultOptions
(
storedPrefs
)
;
if
(
options
.
broadcast
)
{
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
newAction
)
)
;
}
else
{
this
.
store
.
dispatch
(
ac
.
AlsoToPreloaded
(
newAction
)
)
;
}
}
async
_fetchIcon
(
link
)
{
if
(
link
.
favicon
&
&
link
.
faviconSize
>
=
MIN_FAVICON_SIZE
)
{
return
;
}
this
.
_tippyTopProvider
.
processSite
(
link
)
;
if
(
link
.
tippyTopIcon
)
{
return
;
}
this
.
_requestRichIcon
(
link
.
url
)
;
await
this
.
_fetchScreenshot
(
link
link
.
url
)
;
}
async
_fetchScreenshot
(
link
url
)
{
if
(
link
.
screenshot
)
{
return
;
}
await
Screenshots
.
maybeCacheScreenshot
(
link
url
"
screenshot
"
screenshot
=
>
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
data
:
{
screenshot
url
:
link
.
url
}
type
:
at
.
SCREENSHOT_UPDATED
}
)
)
)
;
}
async
getScreenshotPreview
(
url
target
)
{
const
preview
=
await
Screenshots
.
getScreenshotForURL
(
url
)
|
|
"
"
;
this
.
store
.
dispatch
(
ac
.
OnlyToOneContent
(
{
data
:
{
url
preview
}
type
:
at
.
PREVIEW_RESPONSE
}
target
)
)
;
}
_requestRichIcon
(
url
)
{
this
.
store
.
dispatch
(
{
type
:
at
.
RICH_ICON_MISSING
data
:
{
url
}
}
)
;
}
updateSectionPrefs
(
collapsed
)
{
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
TOP_SITES_PREFS_UPDATED
data
:
{
pref
:
collapsed
}
}
)
)
;
}
_broadcastPinnedSitesUpdated
(
)
{
this
.
pinnedCache
.
expire
(
)
;
this
.
refresh
(
{
broadcast
:
true
}
)
;
}
async
_pinSiteAt
(
{
customScreenshotURL
label
url
}
index
)
{
const
toPin
=
{
url
}
;
if
(
label
)
{
toPin
.
label
=
label
;
}
if
(
customScreenshotURL
)
{
toPin
.
customScreenshotURL
=
customScreenshotURL
;
}
NewTabUtils
.
pinnedLinks
.
pin
(
toPin
index
)
;
await
this
.
_clearLinkCustomScreenshot
(
{
customScreenshotURL
url
}
)
;
}
async
_clearLinkCustomScreenshot
(
site
)
{
if
(
site
.
customScreenshotURL
!
=
=
undefined
)
{
const
pinned
=
await
this
.
pinnedCache
.
request
(
)
;
const
link
=
pinned
.
find
(
pin
=
>
pin
&
&
pin
.
url
=
=
=
site
.
url
)
;
if
(
link
&
&
link
.
customScreenshotURL
!
=
=
site
.
customScreenshotURL
)
{
link
.
__sharedCache
.
updateLink
(
"
screenshot
"
undefined
)
;
}
}
}
async
pin
(
action
)
{
const
{
site
index
}
=
action
.
data
;
if
(
index
>
=
0
)
{
await
this
.
_pinSiteAt
(
site
index
)
;
this
.
_broadcastPinnedSitesUpdated
(
)
;
}
else
{
if
(
index
=
=
=
-
1
)
{
NewTabUtils
.
blockedLinks
.
unblock
(
{
url
:
site
.
url
}
)
;
this
.
frecentCache
.
expire
(
)
;
}
this
.
insert
(
action
)
;
}
}
unpin
(
action
)
{
const
{
site
}
=
action
.
data
;
NewTabUtils
.
pinnedLinks
.
unpin
(
site
)
;
this
.
_broadcastPinnedSitesUpdated
(
)
;
}
_insertPin
(
site
index
draggedFromIndex
)
{
const
topSitesCount
=
this
.
store
.
getState
(
)
.
Prefs
.
values
[
ROWS_PREF
]
*
TOP_SITES_MAX_SITES_PER_ROW
;
if
(
index
>
=
topSitesCount
)
{
return
;
}
let
pinned
=
NewTabUtils
.
pinnedLinks
.
links
;
if
(
!
pinned
[
index
]
)
{
this
.
_pinSiteAt
(
site
index
)
;
}
else
{
pinned
[
draggedFromIndex
]
=
null
;
let
holeIndex
=
index
;
const
indexStep
=
index
>
draggedFromIndex
?
-
1
:
1
;
while
(
pinned
[
holeIndex
]
)
{
holeIndex
+
=
indexStep
;
}
if
(
holeIndex
>
=
topSitesCount
|
|
holeIndex
<
0
)
{
holeIndex
=
topSitesCount
-
1
;
}
const
shiftingStep
=
holeIndex
>
index
?
-
1
:
1
;
while
(
holeIndex
!
=
=
index
)
{
const
nextIndex
=
holeIndex
+
shiftingStep
;
this
.
_pinSiteAt
(
pinned
[
nextIndex
]
holeIndex
)
;
holeIndex
=
nextIndex
;
}
this
.
_pinSiteAt
(
site
index
)
;
}
}
async
insert
(
action
)
{
let
{
index
}
=
action
.
data
;
if
(
!
(
index
>
0
)
)
{
index
=
0
;
}
this
.
_insertPin
(
action
.
data
.
site
index
action
.
data
.
draggedFromIndex
!
=
=
undefined
?
action
.
data
.
draggedFromIndex
:
this
.
store
.
getState
(
)
.
Prefs
.
values
[
ROWS_PREF
]
*
TOP_SITES_MAX_SITES_PER_ROW
)
;
await
this
.
_clearLinkCustomScreenshot
(
action
.
data
.
site
)
;
this
.
_broadcastPinnedSitesUpdated
(
)
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
SYSTEM_TICK
:
this
.
refresh
(
{
broadcast
:
false
}
)
;
break
;
case
at
.
MIGRATION_COMPLETED
:
case
at
.
PLACES_HISTORY_CLEARED
:
case
at
.
PLACES_LINK_DELETED
:
this
.
frecentCache
.
expire
(
)
;
this
.
refresh
(
{
broadcast
:
true
}
)
;
break
;
case
at
.
PLACES_LINKS_CHANGED
:
this
.
frecentCache
.
expire
(
)
;
this
.
refresh
(
{
broadcast
:
false
}
)
;
break
;
case
at
.
PLACES_LINK_BLOCKED
:
this
.
frecentCache
.
expire
(
)
;
this
.
pinnedCache
.
expire
(
)
;
this
.
refresh
(
{
broadcast
:
true
}
)
;
break
;
case
at
.
PREF_CHANGED
:
if
(
action
.
data
.
name
=
=
=
DEFAULT_SITES_PREF
)
{
this
.
refreshDefaults
(
action
.
data
.
value
)
;
}
else
if
(
[
ROWS_PREF
NO_DEFAULT_SEARCH_TILE_EXP_PREF
]
.
includes
(
action
.
data
.
name
)
)
{
this
.
refresh
(
{
broadcast
:
true
}
)
;
}
break
;
case
at
.
UPDATE_SECTION_PREFS
:
if
(
action
.
data
.
id
=
=
=
SECTION_ID
)
{
this
.
updateSectionPrefs
(
action
.
data
.
value
)
;
}
break
;
case
at
.
PREFS_INITIAL_VALUES
:
this
.
refreshDefaults
(
action
.
data
[
DEFAULT_SITES_PREF
]
)
;
break
;
case
at
.
TOP_SITES_PIN
:
this
.
pin
(
action
)
;
break
;
case
at
.
TOP_SITES_UNPIN
:
this
.
unpin
(
action
)
;
break
;
case
at
.
TOP_SITES_INSERT
:
this
.
insert
(
action
)
;
break
;
case
at
.
PREVIEW_REQUEST
:
this
.
getScreenshotPreview
(
action
.
data
.
url
action
.
meta
.
fromTarget
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
}
}
}
;
this
.
DEFAULT_TOP_SITES
=
DEFAULT_TOP_SITES
;
const
EXPORTED_SYMBOLS
=
[
"
TopSitesFeed
"
"
DEFAULT_TOP_SITES
"
]
;
