"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
actionTypes
:
at
actionUtils
:
au
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
)
;
const
{
Prefs
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
)
;
const
{
classifySite
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
SiteClassifier
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ASRouterPreferences
"
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterPreferences
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
perfService
"
"
resource
:
/
/
activity
-
stream
/
common
/
PerfService
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AboutNewTabStartupRecorder
"
"
resource
:
/
/
/
modules
/
AboutNewTabService
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PingCentre
"
"
resource
:
/
/
/
modules
/
PingCentre
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
UTEventReporting
"
"
resource
:
/
/
activity
-
stream
/
lib
/
UTEventReporting
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
UpdateUtils
"
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
HomePage
"
"
resource
:
/
/
/
modules
/
HomePage
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionSettingsStore
"
"
resource
:
/
/
gre
/
modules
/
ExtensionSettingsStore
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ClientID
"
"
resource
:
/
/
gre
/
modules
/
ClientID
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
TelemetrySession
:
"
resource
:
/
/
gre
/
modules
/
TelemetrySession
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
gUUIDGenerator
:
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
]
aboutNewTabService
:
[
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
"
nsIAboutNewTabService
"
]
}
)
;
const
ACTIVITY_STREAM_ID
=
"
activity
-
stream
"
;
const
DOMWINDOW_OPENED_TOPIC
=
"
domwindowopened
"
;
const
DOMWINDOW_UNLOAD_TOPIC
=
"
unload
"
;
const
TAB_PINNED_EVENT
=
"
TabPinned
"
;
const
USER_PREFS_ENCODING
=
{
showSearch
:
1
<
<
0
"
feeds
.
topsites
"
:
1
<
<
1
"
feeds
.
section
.
topstories
"
:
1
<
<
2
"
feeds
.
section
.
highlights
"
:
1
<
<
3
"
feeds
.
snippets
"
:
1
<
<
4
showSponsored
:
1
<
<
5
"
asrouter
.
userprefs
.
cfr
.
addons
"
:
1
<
<
6
"
asrouter
.
userprefs
.
cfr
.
features
"
:
1
<
<
7
}
;
const
PREF_IMPRESSION_ID
=
"
impressionId
"
;
const
TELEMETRY_PREF
=
"
telemetry
"
;
const
EVENTS_TELEMETRY_PREF
=
"
telemetry
.
ut
.
events
"
;
const
STRUCTURED_INGESTION_TELEMETRY_PREF
=
"
telemetry
.
structuredIngestion
"
;
const
STRUCTURED_INGESTION_ENDPOINT_PREF
=
"
telemetry
.
structuredIngestion
.
endpoint
"
;
const
STRUCTURED_INGESTION_NAMESPACE_AS
=
"
activity
-
stream
"
;
const
STRUCTURED_INGESTION_NAMESPACE_MS
=
"
messaging
-
system
"
;
const
TIMESTAMP_MISSING_VALUE
=
-
1
;
const
ONBOARDING_ALLOWED_PAGE_VALUES
=
[
"
about
:
welcome
"
"
about
:
home
"
"
about
:
newtab
"
]
;
XPCOMUtils
.
defineLazyGetter
(
this
"
browserSessionId
"
(
)
=
>
TelemetrySession
.
getMetadata
(
"
"
)
.
sessionId
)
;
this
.
TelemetryFeed
=
class
TelemetryFeed
{
constructor
(
options
)
{
this
.
sessions
=
new
Map
(
)
;
this
.
_prefs
=
new
Prefs
(
)
;
this
.
_impressionId
=
this
.
getOrCreateImpressionId
(
)
;
this
.
_aboutHomeSeen
=
false
;
this
.
_classifySite
=
classifySite
;
this
.
_addWindowListeners
=
this
.
_addWindowListeners
.
bind
(
this
)
;
this
.
handleEvent
=
this
.
handleEvent
.
bind
(
this
)
;
}
get
telemetryEnabled
(
)
{
return
this
.
_prefs
.
get
(
TELEMETRY_PREF
)
;
}
get
eventTelemetryEnabled
(
)
{
return
this
.
_prefs
.
get
(
EVENTS_TELEMETRY_PREF
)
;
}
get
structuredIngestionTelemetryEnabled
(
)
{
return
this
.
_prefs
.
get
(
STRUCTURED_INGESTION_TELEMETRY_PREF
)
;
}
get
structuredIngestionEndpointBase
(
)
{
return
this
.
_prefs
.
get
(
STRUCTURED_INGESTION_ENDPOINT_PREF
)
;
}
get
telemetryClientId
(
)
{
Object
.
defineProperty
(
this
"
telemetryClientId
"
{
value
:
ClientID
.
getClientID
(
)
}
)
;
return
this
.
telemetryClientId
;
}
init
(
)
{
Services
.
obs
.
addObserver
(
this
.
browserOpenNewtabStart
"
browser
-
open
-
newtab
-
start
"
)
;
Services
.
obs
.
addObserver
(
this
.
_addWindowListeners
DOMWINDOW_OPENED_TOPIC
)
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
this
.
_addWindowListeners
(
win
)
;
}
Services
.
telemetry
.
scalarSet
(
"
deletion
.
request
.
impression_id
"
this
.
_impressionId
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
TAB_PINNED_EVENT
:
this
.
countPinnedTab
(
event
.
target
)
;
break
;
case
DOMWINDOW_UNLOAD_TOPIC
:
this
.
_removeWindowListeners
(
event
.
target
)
;
break
;
}
}
_removeWindowListeners
(
win
)
{
win
.
removeEventListener
(
DOMWINDOW_UNLOAD_TOPIC
this
.
handleEvent
)
;
win
.
removeEventListener
(
TAB_PINNED_EVENT
this
.
handleEvent
)
;
}
_addWindowListeners
(
win
)
{
win
.
addEventListener
(
DOMWINDOW_UNLOAD_TOPIC
this
.
handleEvent
)
;
win
.
addEventListener
(
TAB_PINNED_EVENT
this
.
handleEvent
)
;
}
countPinnedTab
(
target
source
=
"
TAB_CONTEXT_MENU
"
)
{
const
win
=
target
.
ownerGlobal
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
return
;
}
const
event
=
Object
.
assign
(
this
.
createPing
(
)
{
action
:
"
activity_stream_user_event
"
event
:
TAB_PINNED_EVENT
.
toUpperCase
(
)
value
:
{
total_pinned_tabs
:
this
.
countTotalPinnedTabs
(
)
}
source
page
:
"
n
/
a
"
session_id
:
"
n
/
a
"
}
)
;
this
.
sendEvent
(
event
)
;
}
countTotalPinnedTabs
(
)
{
let
pinnedTabs
=
0
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
win
.
closed
|
|
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
continue
;
}
for
(
let
tab
of
win
.
gBrowser
.
tabs
)
{
pinnedTabs
+
=
tab
.
pinned
?
1
:
0
;
}
}
return
pinnedTabs
;
}
getOrCreateImpressionId
(
)
{
let
impressionId
=
this
.
_prefs
.
get
(
PREF_IMPRESSION_ID
)
;
if
(
!
impressionId
)
{
impressionId
=
String
(
gUUIDGenerator
.
generateUUID
(
)
)
;
this
.
_prefs
.
set
(
PREF_IMPRESSION_ID
impressionId
)
;
}
return
impressionId
;
}
browserOpenNewtabStart
(
)
{
perfService
.
mark
(
"
browser
-
open
-
newtab
-
start
"
)
;
}
setLoadTriggerInfo
(
port
)
{
let
data_to_save
;
try
{
data_to_save
=
{
load_trigger_ts
:
perfService
.
getMostRecentAbsMarkStartByName
(
"
browser
-
open
-
newtab
-
start
"
)
load_trigger_type
:
"
menu_plus_or_keyboard
"
}
;
}
catch
(
e
)
{
return
;
}
this
.
saveSessionPerfData
(
port
data_to_save
)
;
}
get
pingCentre
(
)
{
Object
.
defineProperty
(
this
"
pingCentre
"
{
value
:
new
PingCentre
(
{
topic
:
ACTIVITY_STREAM_ID
}
)
}
)
;
return
this
.
pingCentre
;
}
get
utEvents
(
)
{
Object
.
defineProperty
(
this
"
utEvents
"
{
value
:
new
UTEventReporting
(
)
}
)
;
return
this
.
utEvents
;
}
get
userPreferences
(
)
{
let
prefs
=
0
;
for
(
const
pref
of
Object
.
keys
(
USER_PREFS_ENCODING
)
)
{
if
(
this
.
_prefs
.
get
(
pref
)
)
{
prefs
|
=
USER_PREFS_ENCODING
[
pref
]
;
}
}
return
prefs
;
}
get
isInCFRCohort
(
)
{
for
(
let
provider
of
ASRouterPreferences
.
providers
)
{
if
(
provider
.
id
=
=
=
"
cfr
"
&
&
provider
.
enabled
&
&
provider
.
cohort
)
{
return
true
;
}
}
return
false
;
}
addSession
(
id
url
)
{
let
load_trigger_type
=
"
unexpected
"
;
let
load_trigger_ts
;
if
(
!
this
.
_aboutHomeSeen
&
&
url
=
=
=
"
about
:
home
"
)
{
this
.
_aboutHomeSeen
=
true
;
load_trigger_type
=
"
first_window_opened
"
;
load_trigger_ts
=
perfService
.
timeOrigin
;
}
const
session
=
{
session_id
:
String
(
gUUIDGenerator
.
generateUUID
(
)
)
page
:
url
?
url
:
"
unknown
"
perf
:
{
load_trigger_type
is_preloaded
:
false
}
}
;
if
(
load_trigger_ts
)
{
session
.
perf
.
load_trigger_ts
=
load_trigger_ts
;
}
this
.
sessions
.
set
(
id
session
)
;
return
session
;
}
endSession
(
portID
)
{
const
session
=
this
.
sessions
.
get
(
portID
)
;
if
(
!
session
)
{
return
;
}
this
.
sendDiscoveryStreamLoadedContent
(
portID
session
)
;
this
.
sendDiscoveryStreamImpressions
(
portID
session
)
;
if
(
session
.
perf
.
visibility_event_rcvd_ts
)
{
session
.
session_duration
=
Math
.
round
(
perfService
.
absNow
(
)
-
session
.
perf
.
visibility_event_rcvd_ts
)
;
session
.
perf
.
visibility_event_rcvd_ts
=
Math
.
round
(
session
.
perf
.
visibility_event_rcvd_ts
)
;
session
.
perf
.
load_trigger_ts
=
Math
.
round
(
session
.
perf
.
load_trigger_ts
|
|
TIMESTAMP_MISSING_VALUE
)
;
session
.
perf
.
topsites_first_painted_ts
=
Math
.
round
(
session
.
perf
.
topsites_first_painted_ts
|
|
TIMESTAMP_MISSING_VALUE
)
;
}
else
{
this
.
sessions
.
delete
(
portID
)
;
return
;
}
let
sessionEndEvent
=
this
.
createSessionEndEvent
(
session
)
;
this
.
sendEvent
(
sessionEndEvent
)
;
this
.
sendUTEvent
(
sessionEndEvent
this
.
utEvents
.
sendSessionEndEvent
)
;
this
.
sessions
.
delete
(
portID
)
;
}
sendDiscoveryStreamImpressions
(
port
session
)
{
const
{
impressionSets
}
=
session
;
if
(
!
impressionSets
)
{
return
;
}
Object
.
keys
(
impressionSets
)
.
forEach
(
source
=
>
{
const
payload
=
this
.
createImpressionStats
(
port
{
source
tiles
:
impressionSets
[
source
]
}
)
;
this
.
sendStructuredIngestionEvent
(
payload
STRUCTURED_INGESTION_NAMESPACE_AS
"
impression
-
stats
"
"
1
"
)
;
}
)
;
}
sendDiscoveryStreamLoadedContent
(
port
session
)
{
const
{
loadedContentSets
}
=
session
;
if
(
!
loadedContentSets
)
{
return
;
}
Object
.
keys
(
loadedContentSets
)
.
forEach
(
source
=
>
{
const
tiles
=
loadedContentSets
[
source
]
;
const
payload
=
this
.
createImpressionStats
(
port
{
source
tiles
loaded
:
tiles
.
length
}
)
;
this
.
sendStructuredIngestionEvent
(
payload
STRUCTURED_INGESTION_NAMESPACE_AS
"
impression
-
stats
"
"
1
"
)
;
}
)
;
}
handleNewTabInit
(
action
)
{
const
session
=
this
.
addSession
(
au
.
getPortIdOfSender
(
action
)
action
.
data
.
url
)
;
session
.
perf
.
is_preloaded
=
action
.
data
.
browser
.
getAttribute
(
"
preloadedState
"
)
=
=
=
"
preloaded
"
;
}
createPing
(
portID
)
{
const
ping
=
{
addon_version
:
Services
.
appinfo
.
appBuildID
locale
:
Services
.
locale
.
appLocaleAsBCP47
user_prefs
:
this
.
userPreferences
}
;
if
(
portID
)
{
const
session
=
this
.
sessions
.
get
(
portID
)
|
|
this
.
addSession
(
portID
)
;
Object
.
assign
(
ping
{
session_id
:
session
.
session_id
}
)
;
if
(
session
.
page
)
{
Object
.
assign
(
ping
{
page
:
session
.
page
}
)
;
}
}
return
ping
;
}
createImpressionStats
(
portID
data
)
{
return
Object
.
assign
(
this
.
createPing
(
portID
)
data
{
action
:
"
activity_stream_impression_stats
"
impression_id
:
this
.
_impressionId
client_id
:
"
n
/
a
"
session_id
:
"
n
/
a
"
}
)
;
}
createSpocsFillPing
(
data
)
{
return
Object
.
assign
(
this
.
createPing
(
null
)
data
{
impression_id
:
this
.
_impressionId
session_id
:
"
n
/
a
"
}
)
;
}
createUserEvent
(
action
)
{
return
Object
.
assign
(
this
.
createPing
(
au
.
getPortIdOfSender
(
action
)
)
action
.
data
{
action
:
"
activity_stream_user_event
"
}
)
;
}
createUndesiredEvent
(
action
)
{
return
Object
.
assign
(
this
.
createPing
(
au
.
getPortIdOfSender
(
action
)
)
{
value
:
0
}
action
.
data
{
action
:
"
activity_stream_undesired_event
"
}
)
;
}
createPerformanceEvent
(
action
)
{
return
Object
.
assign
(
this
.
createPing
(
)
action
.
data
{
action
:
"
activity_stream_performance_event
"
}
)
;
}
createSessionEndEvent
(
session
)
{
return
Object
.
assign
(
this
.
createPing
(
)
{
session_id
:
session
.
session_id
page
:
session
.
page
session_duration
:
session
.
session_duration
action
:
"
activity_stream_session
"
perf
:
session
.
perf
profile_creation_date
:
TelemetryEnvironment
.
currentEnvironment
.
profile
.
resetDate
|
|
TelemetryEnvironment
.
currentEnvironment
.
profile
.
creationDate
}
)
;
}
async
createASRouterEvent
(
action
)
{
let
event
=
{
.
.
.
action
.
data
addon_version
:
Services
.
appinfo
.
appBuildID
locale
:
Services
.
locale
.
appLocaleAsBCP47
}
;
const
session
=
this
.
sessions
.
get
(
au
.
getPortIdOfSender
(
action
)
)
;
if
(
event
.
event_context
&
&
typeof
event
.
event_context
=
=
=
"
object
"
)
{
event
.
event_context
=
JSON
.
stringify
(
event
.
event_context
)
;
}
switch
(
event
.
action
)
{
case
"
cfr_user_event
"
:
event
=
await
this
.
applyCFRPolicy
(
event
)
;
break
;
case
"
snippets_local_testing_user_event
"
:
case
"
snippets_user_event
"
:
event
=
await
this
.
applySnippetsPolicy
(
event
)
;
break
;
case
"
whats
-
new
-
panel_user_event
"
:
case
"
onboarding_user_event
"
:
event
=
await
this
.
applyOnboardingPolicy
(
event
session
)
;
break
;
case
"
asrouter_undesired_event
"
:
event
=
this
.
applyUndesiredEventPolicy
(
event
)
;
break
;
default
:
event
=
{
ping
:
event
}
;
break
;
}
return
event
;
}
async
applyCFRPolicy
(
ping
)
{
if
(
UpdateUtils
.
getUpdateChannel
(
true
)
=
=
=
"
release
"
&
&
!
this
.
isInCFRCohort
)
{
ping
.
message_id
=
"
n
/
a
"
;
ping
.
impression_id
=
this
.
_impressionId
;
}
else
{
ping
.
client_id
=
await
this
.
telemetryClientId
;
}
delete
ping
.
action
;
return
{
ping
pingType
:
"
cfr
"
}
;
}
async
applySnippetsPolicy
(
ping
)
{
ping
.
client_id
=
await
this
.
telemetryClientId
;
delete
ping
.
action
;
return
{
ping
pingType
:
"
snippets
"
}
;
}
async
applyOnboardingPolicy
(
ping
session
)
{
ping
.
client_id
=
await
this
.
telemetryClientId
;
ping
.
browser_session_id
=
browserSessionId
;
if
(
ping
.
action
=
=
=
"
onboarding_user_event
"
&
&
session
&
&
session
.
page
)
{
let
event_context
;
try
{
event_context
=
ping
.
event_context
?
JSON
.
parse
(
ping
.
event_context
)
:
{
}
;
}
catch
(
e
)
{
event_context
=
{
value
:
ping
.
event_context
}
;
}
if
(
ONBOARDING_ALLOWED_PAGE_VALUES
.
includes
(
session
.
page
)
)
{
event_context
.
page
=
session
.
page
;
}
else
{
Cu
.
reportError
(
Invalid
'
page
'
for
Onboarding
event
:
{
session
.
page
}
)
;
}
ping
.
event_context
=
JSON
.
stringify
(
event_context
)
;
}
delete
ping
.
action
;
return
{
ping
pingType
:
"
onboarding
"
}
;
}
applyUndesiredEventPolicy
(
ping
)
{
ping
.
impression_id
=
this
.
_impressionId
;
delete
ping
.
action
;
return
{
ping
pingType
:
"
undesired
-
events
"
}
;
}
sendEvent
(
event_object
)
{
switch
(
event_object
.
action
)
{
case
"
activity_stream_user_event
"
:
this
.
sendEventPing
(
event_object
)
;
break
;
case
"
activity_stream_session
"
:
this
.
sendSessionPing
(
event_object
)
;
break
;
}
}
async
sendEventPing
(
ping
)
{
delete
ping
.
action
;
ping
.
client_id
=
await
this
.
telemetryClientId
;
ping
.
browser_session_id
=
browserSessionId
;
if
(
ping
.
value
&
&
typeof
ping
.
value
=
=
=
"
object
"
)
{
ping
.
value
=
JSON
.
stringify
(
ping
.
value
)
;
}
this
.
sendStructuredIngestionEvent
(
ping
STRUCTURED_INGESTION_NAMESPACE_AS
"
events
"
1
)
;
}
async
sendSessionPing
(
ping
)
{
delete
ping
.
action
;
ping
.
client_id
=
await
this
.
telemetryClientId
;
this
.
sendStructuredIngestionEvent
(
ping
STRUCTURED_INGESTION_NAMESPACE_AS
"
sessions
"
1
)
;
}
sendUTEvent
(
event_object
eventFunction
)
{
if
(
this
.
telemetryEnabled
&
&
this
.
eventTelemetryEnabled
)
{
eventFunction
(
event_object
)
;
}
}
_generateStructuredIngestionEndpoint
(
namespace
pingType
version
)
{
const
uuid
=
gUUIDGenerator
.
generateUUID
(
)
.
toString
(
)
;
const
docID
=
uuid
.
slice
(
1
-
1
)
;
const
extension
=
{
namespace
}
/
{
pingType
}
/
{
version
}
/
{
docID
}
;
return
{
this
.
structuredIngestionEndpointBase
}
/
{
extension
}
;
}
sendStructuredIngestionEvent
(
eventObject
namespace
pingType
version
)
{
if
(
this
.
telemetryEnabled
&
&
this
.
structuredIngestionTelemetryEnabled
)
{
this
.
pingCentre
.
sendStructuredIngestionPing
(
eventObject
this
.
_generateStructuredIngestionEndpoint
(
namespace
pingType
version
)
{
filter
:
ACTIVITY_STREAM_ID
}
)
;
}
}
handleImpressionStats
(
action
)
{
const
payload
=
this
.
createImpressionStats
(
au
.
getPortIdOfSender
(
action
)
action
.
data
)
;
this
.
sendStructuredIngestionEvent
(
payload
STRUCTURED_INGESTION_NAMESPACE_AS
"
impression
-
stats
"
"
1
"
)
;
}
handleUserEvent
(
action
)
{
let
userEvent
=
this
.
createUserEvent
(
action
)
;
this
.
sendEvent
(
userEvent
)
;
this
.
sendUTEvent
(
userEvent
this
.
utEvents
.
sendUserEvent
)
;
}
async
handleASRouterUserEvent
(
action
)
{
const
{
ping
pingType
}
=
await
this
.
createASRouterEvent
(
action
)
;
if
(
!
pingType
)
{
Cu
.
reportError
(
"
Unknown
ping
type
for
ASRouter
telemetry
"
)
;
return
;
}
this
.
sendStructuredIngestionEvent
(
ping
STRUCTURED_INGESTION_NAMESPACE_MS
pingType
"
1
"
)
;
}
handleUndesiredEvent
(
action
)
{
this
.
sendEvent
(
this
.
createUndesiredEvent
(
action
)
)
;
}
handleTrailheadEnrollEvent
(
action
)
{
if
(
this
.
telemetryEnabled
)
{
this
.
utEvents
.
sendTrailheadEnrollEvent
(
action
.
data
)
;
}
}
async
sendPageTakeoverData
(
)
{
if
(
this
.
telemetryEnabled
)
{
const
value
=
{
}
;
let
newtabAffected
=
false
;
let
homeAffected
=
false
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
enabled
"
)
&
&
aboutNewTabService
.
overridden
&
&
!
aboutNewTabService
.
newTabURL
.
startsWith
(
"
moz
-
extension
:
/
/
"
)
)
{
value
.
newtab_url_category
=
await
this
.
_classifySite
(
aboutNewTabService
.
newTabURL
)
;
newtabAffected
=
true
;
}
await
ExtensionSettingsStore
.
initialize
(
)
;
const
newtabExtensionInfo
=
ExtensionSettingsStore
.
getSetting
(
"
url_overrides
"
"
newTabURL
"
)
;
if
(
newtabExtensionInfo
&
&
newtabExtensionInfo
.
id
)
{
value
.
newtab_extension_id
=
newtabExtensionInfo
.
id
;
newtabAffected
=
true
;
}
const
homePageURL
=
HomePage
.
get
(
)
;
if
(
!
[
"
about
:
home
"
"
about
:
blank
"
]
.
includes
(
homePageURL
)
&
&
!
homePageURL
.
startsWith
(
"
moz
-
extension
:
/
/
"
)
)
{
value
.
home_url_category
=
await
this
.
_classifySite
(
homePageURL
)
;
homeAffected
=
true
;
}
const
homeExtensionInfo
=
ExtensionSettingsStore
.
getSetting
(
"
prefs
"
"
homepage_override
"
)
;
if
(
homeExtensionInfo
&
&
homeExtensionInfo
.
id
)
{
value
.
home_extension_id
=
homeExtensionInfo
.
id
;
homeAffected
=
true
;
}
let
page
;
if
(
newtabAffected
&
&
homeAffected
)
{
page
=
"
both
"
;
}
else
if
(
newtabAffected
)
{
page
=
"
about
:
newtab
"
;
}
else
if
(
homeAffected
)
{
page
=
"
about
:
home
"
;
}
if
(
page
)
{
const
event
=
Object
.
assign
(
this
.
createPing
(
)
{
action
:
"
activity_stream_user_event
"
event
:
"
PAGE_TAKEOVER_DATA
"
value
page
session_id
:
"
n
/
a
"
}
)
;
this
.
sendEvent
(
event
)
;
}
}
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
this
.
sendPageTakeoverData
(
)
;
break
;
case
at
.
NEW_TAB_INIT
:
this
.
handleNewTabInit
(
action
)
;
break
;
case
at
.
NEW_TAB_UNLOAD
:
this
.
endSession
(
au
.
getPortIdOfSender
(
action
)
)
;
break
;
case
at
.
SAVE_SESSION_PERF_DATA
:
this
.
saveSessionPerfData
(
au
.
getPortIdOfSender
(
action
)
action
.
data
)
;
break
;
case
at
.
TELEMETRY_IMPRESSION_STATS
:
this
.
handleImpressionStats
(
action
)
;
break
;
case
at
.
DISCOVERY_STREAM_IMPRESSION_STATS
:
this
.
handleDiscoveryStreamImpressionStats
(
au
.
getPortIdOfSender
(
action
)
action
.
data
)
;
break
;
case
at
.
DISCOVERY_STREAM_LOADED_CONTENT
:
this
.
handleDiscoveryStreamLoadedContent
(
au
.
getPortIdOfSender
(
action
)
action
.
data
)
;
break
;
case
at
.
DISCOVERY_STREAM_SPOCS_FILL
:
this
.
handleDiscoveryStreamSpocsFill
(
action
.
data
)
;
break
;
case
at
.
TELEMETRY_UNDESIRED_EVENT
:
this
.
handleUndesiredEvent
(
action
)
;
break
;
case
at
.
TELEMETRY_USER_EVENT
:
this
.
handleUserEvent
(
action
)
;
break
;
case
at
.
AS_ROUTER_TELEMETRY_USER_EVENT
:
this
.
handleASRouterUserEvent
(
action
)
;
break
;
case
at
.
TELEMETRY_PERFORMANCE_EVENT
:
this
.
sendEvent
(
this
.
createPerformanceEvent
(
action
)
)
;
break
;
case
at
.
TRAILHEAD_ENROLL_EVENT
:
this
.
handleTrailheadEnrollEvent
(
action
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
}
}
handleDiscoveryStreamImpressionStats
(
port
data
)
{
let
session
=
this
.
sessions
.
get
(
port
)
;
if
(
!
session
)
{
throw
new
Error
(
"
Session
does
not
exist
.
"
)
;
}
const
impressionSets
=
session
.
impressionSets
|
|
{
}
;
const
impressions
=
impressionSets
[
data
.
source
]
|
|
[
]
;
data
.
tiles
.
forEach
(
tile
=
>
impressions
.
push
(
{
id
:
tile
.
id
pos
:
tile
.
pos
.
.
.
(
tile
.
shim
?
{
shim
:
tile
.
shim
}
:
{
}
)
}
)
)
;
impressionSets
[
data
.
source
]
=
impressions
;
session
.
impressionSets
=
impressionSets
;
}
handleDiscoveryStreamLoadedContent
(
port
data
)
{
let
session
=
this
.
sessions
.
get
(
port
)
;
if
(
!
session
)
{
throw
new
Error
(
"
Session
does
not
exist
.
"
)
;
}
const
loadedContentSets
=
session
.
loadedContentSets
|
|
{
}
;
const
loadedContents
=
loadedContentSets
[
data
.
source
]
|
|
[
]
;
data
.
tiles
.
forEach
(
tile
=
>
loadedContents
.
push
(
{
id
:
tile
.
id
pos
:
tile
.
pos
}
)
)
;
loadedContentSets
[
data
.
source
]
=
loadedContents
;
session
.
loadedContentSets
=
loadedContentSets
;
}
handleDiscoveryStreamSpocsFill
(
data
)
{
const
payload
=
this
.
createSpocsFillPing
(
data
)
;
this
.
sendStructuredIngestionEvent
(
payload
STRUCTURED_INGESTION_NAMESPACE_AS
"
spoc
-
fills
"
"
1
"
)
;
}
saveSessionPerfData
(
port
data
)
{
let
session
=
this
.
sessions
.
get
(
port
)
;
if
(
data
.
visibility_event_rcvd_ts
&
&
session
.
page
!
=
=
"
about
:
home
"
)
{
this
.
setLoadTriggerInfo
(
port
)
;
}
let
timestamp
=
data
.
topsites_first_painted_ts
;
if
(
timestamp
&
&
session
.
page
=
=
=
"
about
:
home
"
&
&
!
HomePage
.
overridden
&
&
Services
.
prefs
.
getIntPref
(
"
browser
.
startup
.
page
"
)
=
=
=
1
)
{
AboutNewTabStartupRecorder
.
maybeRecordTopsitesPainted
(
timestamp
)
;
}
Object
.
assign
(
session
.
perf
data
)
;
}
uninit
(
)
{
try
{
Services
.
obs
.
removeObserver
(
this
.
browserOpenNewtabStart
"
browser
-
open
-
newtab
-
start
"
)
;
Services
.
obs
.
removeObserver
(
this
.
_addWindowListeners
DOMWINDOW_OPENED_TOPIC
)
;
}
catch
(
e
)
{
}
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
this
"
pingCentre
"
)
)
{
this
.
pingCentre
.
uninit
(
)
;
}
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
this
"
utEvents
"
)
)
{
this
.
utEvents
.
uninit
(
)
;
}
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
TelemetryFeed
"
"
USER_PREFS_ENCODING
"
"
PREF_IMPRESSION_ID
"
"
TELEMETRY_PREF
"
"
EVENTS_TELEMETRY_PREF
"
"
STRUCTURED_INGESTION_TELEMETRY_PREF
"
"
STRUCTURED_INGESTION_ENDPOINT_PREF
"
]
;
