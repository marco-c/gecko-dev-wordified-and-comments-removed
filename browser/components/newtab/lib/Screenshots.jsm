"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
Screenshots
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
BackgroundPageThumbs
"
"
resource
:
/
/
gre
/
modules
/
BackgroundPageThumbs
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
PageThumbs
"
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
)
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
}
)
;
const
GREY_10
=
"
#
F9F9FA
"
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
gPrivilegedAboutProcessEnabled
"
"
browser
.
tabs
.
remote
.
separatePrivilegedContentProcess
"
false
)
;
const
Screenshots
=
{
async
getScreenshotForURL
(
url
)
{
try
{
await
lazy
.
BackgroundPageThumbs
.
captureIfMissing
(
url
{
backgroundColor
:
GREY_10
}
)
;
if
(
lazy
.
gPrivilegedAboutProcessEnabled
)
{
return
lazy
.
PageThumbs
.
getThumbnailURL
(
url
)
;
}
const
imgPath
=
lazy
.
PageThumbs
.
getThumbnailPath
(
url
)
;
const
filePathResponse
=
await
fetch
(
file
:
/
/
{
imgPath
}
)
;
const
fileContents
=
await
filePathResponse
.
blob
(
)
;
if
(
fileContents
.
size
=
=
=
0
)
{
return
null
;
}
return
{
path
:
imgPath
data
:
fileContents
}
;
}
catch
(
err
)
{
console
.
error
(
getScreenshot
(
{
url
}
)
failed
:
{
err
}
)
;
}
try
{
await
lazy
.
PageThumbs
.
_store
(
url
url
null
true
)
;
}
catch
(
err
)
{
}
return
null
;
}
_shouldGetScreenshots
(
)
{
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
!
lazy
.
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
return
true
;
}
}
return
false
;
}
async
maybeCacheScreenshot
(
link
url
property
onScreenshot
)
{
if
(
!
this
.
_shouldGetScreenshots
(
)
)
{
return
;
}
if
(
!
link
.
__sharedCache
)
{
link
.
__sharedCache
=
{
updateLink
(
prop
val
)
{
link
[
prop
]
=
val
;
}
}
;
}
const
cache
=
link
.
__sharedCache
;
if
(
cache
.
fetchingScreenshot
|
|
link
[
property
]
!
=
=
undefined
)
{
return
;
}
cache
.
fetchingScreenshot
=
this
.
getScreenshotForURL
(
url
)
;
const
screenshot
=
await
cache
.
fetchingScreenshot
;
delete
cache
.
fetchingScreenshot
;
cache
.
updateLink
(
property
screenshot
)
;
onScreenshot
(
screenshot
)
;
}
}
;
