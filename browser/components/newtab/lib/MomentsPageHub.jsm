"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
setInterval
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
clearInterval
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
}
)
;
const
SYSTEM_TICK_INTERVAL
=
5
*
60
*
1000
;
const
HOMEPAGE_OVERRIDE_PREF
=
"
browser
.
startup
.
homepage_override
.
once
"
;
class
_MomentsPageHub
{
constructor
(
)
{
this
.
id
=
"
moments
-
page
-
hub
"
;
this
.
state
=
{
}
;
this
.
checkHomepageOverridePref
=
this
.
checkHomepageOverridePref
.
bind
(
this
)
;
}
async
init
(
waitForInitialized
{
handleMessageRequest
addImpression
blockMessageById
dispatch
}
)
{
this
.
_handleMessageRequest
=
handleMessageRequest
;
this
.
_addImpression
=
addImpression
;
this
.
_blockMessageById
=
blockMessageById
;
this
.
_dispatch
=
dispatch
;
await
waitForInitialized
;
this
.
messageRequest
(
{
triggerId
:
"
momentsUpdate
"
template
:
"
update_action
"
}
)
;
const
_intervalId
=
setInterval
(
(
)
=
>
this
.
checkHomepageOverridePref
(
)
SYSTEM_TICK_INTERVAL
)
;
this
.
state
=
{
_intervalId
}
;
}
_sendTelemetry
(
ping
)
{
this
.
_dispatch
(
{
type
:
"
MOMENTS_PAGE_TELEMETRY
"
data
:
{
action
:
"
moments_user_event
"
.
.
.
ping
}
}
)
;
}
sendUserEventTelemetry
(
message
)
{
this
.
_sendTelemetry
(
{
message_id
:
message
.
id
bucket_id
:
message
.
id
event
:
"
MOMENTS_PAGE_SET
"
}
)
;
}
getExpirationDate
(
expireDelta
)
{
return
Date
.
now
(
)
+
expireDelta
;
}
executeAction
(
message
)
{
const
{
id
data
}
=
message
.
content
.
action
;
switch
(
id
)
{
case
"
moments
-
wnp
"
:
const
{
url
expireDelta
}
=
data
;
let
{
expire
}
=
data
;
if
(
!
expire
)
{
expire
=
this
.
getExpirationDate
(
expireDelta
)
;
}
Services
.
prefs
.
setStringPref
(
HOMEPAGE_OVERRIDE_PREF
JSON
.
stringify
(
{
message_id
:
message
.
id
url
expire
}
)
)
;
this
.
sendUserEventTelemetry
(
message
)
;
this
.
_addImpression
(
message
)
;
this
.
_blockMessageById
(
message
.
id
)
;
break
;
}
}
async
messageRequest
(
{
triggerId
template
}
)
{
const
telemetryObject
=
{
triggerId
}
;
TelemetryStopwatch
.
start
(
"
MS_MESSAGE_REQUEST_TIME_MS
"
telemetryObject
)
;
const
message
=
await
this
.
_handleMessageRequest
(
{
triggerId
template
}
)
;
TelemetryStopwatch
.
finish
(
"
MS_MESSAGE_REQUEST_TIME_MS
"
telemetryObject
)
;
if
(
message
)
{
this
.
executeAction
(
message
)
;
}
}
checkHomepageOverridePref
(
)
{
this
.
messageRequest
(
{
triggerId
:
"
momentsUpdate
"
template
:
"
update_action
"
}
)
;
}
uninit
(
)
{
clearInterval
(
this
.
state
.
_intervalId
)
;
this
.
state
=
{
}
;
}
}
this
.
_MomentsPageHub
=
_MomentsPageHub
;
this
.
MomentsPageHub
=
new
_MomentsPageHub
(
)
;
const
EXPORTED_SYMBOLS
=
[
"
_MomentsPageHub
"
"
MomentsPageHub
"
]
;
