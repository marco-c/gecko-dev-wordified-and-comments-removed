const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyServiceGetter
(
lazy
"
IDNService
"
"
mozilla
.
org
/
network
/
idn
-
service
;
1
"
"
nsIIDNService
"
)
;
function
handleIDNHost
(
hostname
)
{
try
{
return
lazy
.
IDNService
.
convertToDisplayIDN
(
hostname
{
}
)
;
}
catch
(
e
)
{
return
hostname
;
}
}
function
getETLD
(
host
)
{
try
{
return
Services
.
eTLD
.
getPublicSuffixFromHost
(
host
)
;
}
catch
(
err
)
{
return
"
"
;
}
}
function
shortURL
(
{
url
}
)
{
if
(
!
url
)
{
return
"
"
;
}
let
parsed
;
try
{
parsed
=
new
URL
(
url
)
;
}
catch
(
ex
)
{
return
url
;
}
const
hostname
=
parsed
.
hostname
.
replace
(
/
^
www
\
.
/
i
"
"
)
;
const
eTLD
=
getETLD
(
hostname
)
;
const
eTLDExtra
=
eTLD
.
length
?
-
(
eTLD
.
length
+
1
)
:
Infinity
;
return
(
handleIDNHost
(
hostname
.
slice
(
0
eTLDExtra
)
|
|
hostname
)
|
|
parsed
.
pathname
|
|
parsed
.
href
)
;
}
const
EXPORTED_SYMBOLS
=
[
"
shortURL
"
"
getETLD
"
]
;
