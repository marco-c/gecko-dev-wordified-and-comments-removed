"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ASRouterNewTabHook
"
]
;
class
ASRouterNewTabHookInstance
{
constructor
(
)
{
this
.
_newTabMessageHandler
=
null
;
this
.
_parentProcessMessageHandler
=
null
;
this
.
_router
=
null
;
this
.
_clearChildMessages
=
(
.
.
.
params
)
=
>
this
.
_newTabMessageHandler
=
=
=
null
?
Promise
.
resolve
(
)
:
this
.
_newTabMessageHandler
.
clearChildMessages
(
.
.
.
params
)
;
this
.
_clearChildProviders
=
(
.
.
.
params
)
=
>
this
.
_newTabMessageHandler
=
=
=
null
?
Promise
.
resolve
(
)
:
this
.
_newTabMessageHandler
.
clearChildProviders
(
.
.
.
params
)
;
this
.
_updateAdminState
=
(
.
.
.
params
)
=
>
this
.
_newTabMessageHandler
=
=
=
null
?
Promise
.
resolve
(
)
:
this
.
_newTabMessageHandler
.
updateAdminState
(
.
.
.
params
)
;
}
async
initialize
(
{
messageHandler
router
createStorage
}
)
{
this
.
_parentProcessMessageHandler
=
messageHandler
;
this
.
_router
=
router
;
if
(
!
this
.
_router
.
initialized
)
{
const
storage
=
await
createStorage
(
)
;
await
this
.
_router
.
init
(
{
storage
sendTelemetry
:
this
.
_parentProcessMessageHandler
.
handleTelemetry
dispatchCFRAction
:
this
.
_parentProcessMessageHandler
.
handleCFRAction
clearChildMessages
:
this
.
_clearChildMessages
clearChildProviders
:
this
.
_clearChildProviders
updateAdminState
:
this
.
_updateAdminState
}
)
;
}
}
destroy
(
)
{
if
(
this
.
_router
?
.
initialized
)
{
this
.
disconnect
(
)
;
this
.
_router
.
uninit
(
)
;
}
}
connect
(
newTabMessageHandler
)
{
this
.
_newTabMessageHandler
=
newTabMessageHandler
;
return
this
.
_parentProcessMessageHandler
;
}
disconnect
(
)
{
this
.
_newTabMessageHandler
=
null
;
}
}
class
AwaitSingleton
{
constructor
(
)
{
this
.
instance
=
null
;
const
initialized
=
new
Promise
(
resolve
=
>
{
this
.
setInstance
=
instance
=
>
{
this
.
setInstance
=
(
)
=
>
{
}
;
this
.
instance
=
instance
;
resolve
(
instance
)
;
}
;
}
)
;
this
.
getInstance
=
(
)
=
>
initialized
;
}
}
const
ASRouterNewTabHook
=
(
(
)
=
>
{
const
singleton
=
new
AwaitSingleton
(
)
;
const
instance
=
new
ASRouterNewTabHookInstance
(
)
;
return
{
getInstance
:
singleton
.
getInstance
createInstance
:
async
params
=
>
{
await
instance
.
initialize
(
params
)
;
singleton
.
setInstance
(
instance
)
;
}
destroy
:
(
)
=
>
{
instance
.
destroy
(
)
;
}
}
;
}
)
(
)
;
