"
use
strict
"
;
const
{
actionCreators
:
ac
actionTypes
:
at
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Prefs
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
}
)
;
this
.
PrefsFeed
=
class
PrefsFeed
{
constructor
(
prefMap
)
{
this
.
_prefMap
=
prefMap
;
this
.
_prefs
=
new
Prefs
(
)
;
this
.
onExperimentUpdated
=
this
.
onExperimentUpdated
.
bind
(
this
)
;
this
.
onPocketExperimentUpdated
=
this
.
onPocketExperimentUpdated
.
bind
(
this
)
;
}
onPrefChanged
(
name
value
)
{
const
prefItem
=
this
.
_prefMap
.
get
(
name
)
;
if
(
prefItem
)
{
this
.
store
.
dispatch
(
ac
[
prefItem
.
skipBroadcast
?
"
OnlyToMain
"
:
"
BroadcastToContent
"
]
(
{
type
:
at
.
PREF_CHANGED
data
:
{
name
value
}
}
)
)
;
}
}
_setStringPref
(
values
key
defaultValue
)
{
this
.
_setPref
(
values
key
defaultValue
Services
.
prefs
.
getStringPref
)
;
}
_setBoolPref
(
values
key
defaultValue
)
{
this
.
_setPref
(
values
key
defaultValue
Services
.
prefs
.
getBoolPref
)
;
}
_setIntPref
(
values
key
defaultValue
)
{
this
.
_setPref
(
values
key
defaultValue
Services
.
prefs
.
getIntPref
)
;
}
_setPref
(
values
key
defaultValue
getPrefFunction
)
{
let
value
=
getPrefFunction
(
browser
.
newtabpage
.
activity
-
stream
.
{
key
}
defaultValue
)
;
values
[
key
]
=
value
;
this
.
_prefMap
.
set
(
key
{
value
}
)
;
}
onExperimentUpdated
(
event
reason
)
{
const
value
=
NimbusFeatures
.
newtab
.
getAllVariables
(
)
|
|
{
}
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
PREF_CHANGED
data
:
{
name
:
"
featureConfig
"
value
}
}
)
)
;
}
onPocketExperimentUpdated
(
event
reason
)
{
const
value
=
NimbusFeatures
.
pocketNewtab
.
getAllVariables
(
)
|
|
{
}
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
PREF_CHANGED
data
:
{
name
:
"
pocketConfig
"
value
}
}
)
)
;
}
init
(
)
{
this
.
_prefs
.
observeBranch
(
this
)
;
NimbusFeatures
.
newtab
.
onUpdate
(
this
.
onExperimentUpdated
)
;
NimbusFeatures
.
pocketNewtab
.
onUpdate
(
this
.
onPocketExperimentUpdated
)
;
this
.
_storage
=
this
.
store
.
dbStorage
.
getDbTable
(
"
sectionPrefs
"
)
;
const
values
=
{
}
;
for
(
const
name
of
this
.
_prefMap
.
keys
(
)
)
{
values
[
name
]
=
this
.
_prefs
.
get
(
name
)
;
}
values
.
isPrivateBrowsingEnabled
=
PrivateBrowsingUtils
.
enabled
;
values
.
platform
=
AppConstants
.
platform
;
if
(
Region
.
home
)
{
values
.
region
=
Region
.
home
;
this
.
geo
=
values
.
region
;
}
else
if
(
this
.
geo
!
=
=
"
"
)
{
Services
.
obs
.
addObserver
(
this
Region
.
REGION_TOPIC
)
;
this
.
geo
=
"
"
;
}
values
.
fxa_endpoint
=
Services
.
prefs
.
getStringPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
fxaccounts
.
endpoint
"
"
https
:
/
/
accounts
.
firefox
.
com
"
)
;
values
.
appUpdateChannel
=
Services
.
prefs
.
getStringPref
(
"
app
.
update
.
channel
"
"
"
)
;
let
searchTopSiteExperimentPrefValue
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
improvesearch
.
topSiteSearchShortcuts
"
)
;
values
[
"
improvesearch
.
topSiteSearchShortcuts
"
]
=
searchTopSiteExperimentPrefValue
;
this
.
_prefMap
.
set
(
"
improvesearch
.
topSiteSearchShortcuts
"
{
value
:
searchTopSiteExperimentPrefValue
}
)
;
values
.
mayHaveSponsoredTopSites
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
topsites
.
useRemoteSetting
"
)
;
let
handoffToAwesomebarPrefValue
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
improvesearch
.
handoffToAwesomebar
"
)
;
values
[
"
improvesearch
.
handoffToAwesomebar
"
]
=
handoffToAwesomebarPrefValue
;
this
.
_prefMap
.
set
(
"
improvesearch
.
handoffToAwesomebar
"
{
value
:
handoffToAwesomebarPrefValue
}
)
;
let
placeholderPrefValue
=
Services
.
prefs
.
getStringPref
(
"
browser
.
urlbar
.
placeholderName
"
"
"
)
;
values
[
"
urlbar
.
placeholderName
"
]
=
placeholderPrefValue
;
this
.
_prefMap
.
set
(
"
urlbar
.
placeholderName
"
{
value
:
placeholderPrefValue
}
)
;
let
colorwayClosetPrefValue
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
colorway
-
closet
.
enabled
"
)
;
values
[
"
colorway
-
closet
.
enabled
"
]
=
colorwayClosetPrefValue
;
this
.
_prefMap
.
set
(
"
colorway
-
closet
.
enabled
"
{
value
:
colorwayClosetPrefValue
}
)
;
values
.
featureConfig
=
NimbusFeatures
.
newtab
.
getAllVariables
(
)
|
|
{
}
;
values
.
pocketConfig
=
NimbusFeatures
.
pocketNewtab
.
getAllVariables
(
)
|
|
{
}
;
this
.
_setBoolPref
(
values
"
logowordmark
.
alwaysVisible
"
false
)
;
this
.
_setBoolPref
(
values
"
feeds
.
section
.
topstories
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
enabled
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
sponsored
-
collections
.
enabled
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
isCollectionDismissible
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
hardcoded
-
basic
-
layout
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
recs
.
personalized
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
spocs
.
personalized
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
personalization
.
enabled
"
false
)
;
this
.
_setBoolPref
(
values
"
discoverystream
.
personalization
.
override
"
)
;
this
.
_setStringPref
(
values
"
discoverystream
.
personalization
.
modelKeys
"
"
"
)
;
this
.
_setStringPref
(
values
"
discoverystream
.
spocs
-
endpoint
"
"
"
)
;
this
.
_setStringPref
(
values
"
discoverystream
.
spocs
-
endpoint
-
query
"
"
"
)
;
this
.
_setStringPref
(
values
"
newNewtabExperience
.
colors
"
"
"
)
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
PREFS_INITIAL_VALUES
data
:
values
meta
:
{
isStartup
:
true
}
}
)
)
;
}
uninit
(
)
{
this
.
removeListeners
(
)
;
}
removeListeners
(
)
{
this
.
_prefs
.
ignoreBranch
(
this
)
;
NimbusFeatures
.
newtab
.
off
(
this
.
onExperimentUpdated
)
;
NimbusFeatures
.
pocketNewtab
.
off
(
this
.
onPocketExperimentUpdated
)
;
if
(
this
.
geo
=
=
=
"
"
)
{
Services
.
obs
.
removeObserver
(
this
Region
.
REGION_TOPIC
)
;
}
}
async
_setIndexedDBPref
(
id
value
)
{
const
name
=
id
=
=
=
"
topsites
"
?
id
:
feeds
.
section
.
{
id
}
;
try
{
await
this
.
_storage
.
set
(
name
value
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
Could
not
set
section
preferences
.
"
)
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
Region
.
REGION_TOPIC
:
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
PREF_CHANGED
data
:
{
name
:
"
region
"
value
:
Region
.
home
}
}
)
)
;
break
;
}
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
case
at
.
CLEAR_PREF
:
Services
.
prefs
.
clearUserPref
(
this
.
_prefs
.
_branchStr
+
action
.
data
.
name
)
;
break
;
case
at
.
SET_PREF
:
this
.
_prefs
.
set
(
action
.
data
.
name
action
.
data
.
value
)
;
break
;
case
at
.
UPDATE_SECTION_PREFS
:
this
.
_setIndexedDBPref
(
action
.
data
.
id
action
.
data
.
value
)
;
break
;
}
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
PrefsFeed
"
]
;
