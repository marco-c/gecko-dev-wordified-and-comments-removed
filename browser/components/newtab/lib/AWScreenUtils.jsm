const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
ASRouter
:
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouter
.
jsm
"
}
)
;
const
AWScreenUtils
=
{
async
removeScreens
(
screens
callback
)
{
for
(
let
i
=
0
;
i
<
screens
?
.
length
;
i
+
+
)
{
if
(
await
callback
(
screens
[
i
]
i
)
)
{
screens
.
splice
(
i
-
-
1
)
;
}
}
}
async
evaluateScreenTargeting
(
targeting
)
{
const
result
=
await
lazy
.
ASRouter
.
evaluateExpression
(
{
expression
:
targeting
}
)
;
if
(
result
?
.
evaluationStatus
?
.
success
)
{
return
result
.
evaluationStatus
.
result
;
}
return
true
;
}
async
evaluateTargetingAndRemoveScreens
(
screens
)
{
await
this
.
removeScreens
(
screens
async
screen
=
>
{
if
(
screen
.
targeting
=
=
=
undefined
)
{
return
false
;
}
const
result
=
await
this
.
evaluateScreenTargeting
(
screen
.
targeting
)
;
return
!
result
;
}
)
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
AWScreenUtils
"
]
;
