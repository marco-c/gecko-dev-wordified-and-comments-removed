"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
UITour
:
"
resource
:
/
/
/
modules
/
UITour
.
jsm
"
}
)
;
const
{
ASRouterActions
:
ra
actionCreators
:
ac
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
CFRMessageProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
CFRMessageProvider
.
jsm
"
{
}
)
;
const
{
OnboardingMessageProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
OnboardingMessageProvider
.
jsm
"
{
}
)
;
const
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
{
}
)
;
const
{
CFRPageActions
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
CFRPageActions
.
jsm
"
{
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ASRouterTargeting
"
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterTargeting
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ASRouterTriggerListeners
"
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterTriggerListeners
.
jsm
"
)
;
const
INCOMING_MESSAGE_NAME
=
"
ASRouter
:
child
-
to
-
parent
"
;
const
OUTGOING_MESSAGE_NAME
=
"
ASRouter
:
parent
-
to
-
child
"
;
const
MESSAGE_PROVIDER_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
messageProviders
"
;
const
ONE_DAY_IN_MS
=
24
*
60
*
60
*
1000
;
const
DEFAULT_WHITELIST_HOSTS
=
{
"
activity
-
stream
-
icons
.
services
.
mozilla
.
com
"
:
"
production
"
"
snippets
-
admin
.
mozilla
.
org
"
:
"
preview
"
}
;
const
SNIPPETS_ENDPOINT_WHITELIST
=
"
browser
.
newtab
.
activity
-
stream
.
asrouter
.
whitelistHosts
"
;
const
MAX_MESSAGE_LIFETIME_CAP
=
100
;
const
LOCAL_MESSAGE_PROVIDERS
=
{
OnboardingMessageProvider
CFRMessageProvider
}
;
const
STARTPAGE_VERSION
=
"
0
.
1
.
0
"
;
const
MessageLoaderUtils
=
{
_localLoader
(
provider
)
{
return
provider
.
messages
;
}
async
_remoteLoader
(
provider
)
{
let
remoteMessages
=
[
]
;
if
(
provider
.
url
)
{
try
{
const
response
=
await
fetch
(
provider
.
url
)
;
if
(
response
.
status
!
=
=
204
&
&
(
response
.
ok
|
|
response
.
status
=
=
=
302
)
)
{
remoteMessages
=
(
await
response
.
json
(
)
)
.
messages
.
map
(
msg
=
>
(
{
.
.
.
msg
provider_url
:
provider
.
url
}
)
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
return
remoteMessages
;
}
async
_remoteSettingsLoader
(
provider
)
{
let
messages
=
[
]
;
if
(
provider
.
bucket
)
{
try
{
messages
=
await
MessageLoaderUtils
.
_getRemoteSettingsMessages
(
provider
.
bucket
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
return
messages
;
}
_getRemoteSettingsMessages
(
bucket
)
{
return
RemoteSettings
(
bucket
)
.
get
(
{
filters
:
{
locale
:
Services
.
locale
.
getAppLocaleAsLangTag
(
)
}
}
)
;
}
_getMessageLoader
(
provider
)
{
switch
(
provider
.
type
)
{
case
"
remote
"
:
return
this
.
_remoteLoader
;
case
"
remote
-
settings
"
:
return
this
.
_remoteSettingsLoader
;
case
"
local
"
:
default
:
return
this
.
_localLoader
;
}
}
shouldProviderUpdate
(
provider
currentTime
=
Date
.
now
(
)
)
{
return
(
!
(
provider
.
lastUpdated
>
=
0
)
|
|
currentTime
-
provider
.
lastUpdated
>
provider
.
updateCycleInMs
)
;
}
async
loadMessagesForProvider
(
provider
)
{
const
messages
=
(
await
this
.
_getMessageLoader
(
provider
)
(
provider
)
)
.
map
(
msg
=
>
(
{
.
.
.
msg
provider
:
provider
.
id
}
)
)
;
const
lastUpdated
=
Date
.
now
(
)
;
return
{
messages
lastUpdated
}
;
}
async
installAddonFromURL
(
browser
url
)
{
try
{
const
aUri
=
Services
.
io
.
newURI
(
url
)
;
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
const
install
=
await
AddonManager
.
getInstallForURL
(
aUri
.
spec
"
application
/
x
-
xpinstall
"
)
;
await
AddonManager
.
installAddonFromWebpage
(
"
application
/
x
-
xpinstall
"
browser
systemPrincipal
install
)
;
}
catch
(
e
)
{
}
}
}
;
this
.
MessageLoaderUtils
=
MessageLoaderUtils
;
class
_ASRouter
{
constructor
(
messageProviderPref
=
MESSAGE_PROVIDER_PREF
localProviders
=
LOCAL_MESSAGE_PROVIDERS
)
{
this
.
initialized
=
false
;
this
.
messageChannel
=
null
;
this
.
dispatchToAS
=
null
;
this
.
_storage
=
null
;
this
.
_resetInitialization
(
)
;
this
.
_state
=
{
lastMessageId
:
null
providers
:
[
]
messageBlockList
:
[
]
providerBlockList
:
[
]
messageImpressions
:
{
}
providerImpressions
:
{
}
messages
:
[
]
}
;
this
.
_triggerHandler
=
this
.
_triggerHandler
.
bind
(
this
)
;
this
.
_messageProviderPref
=
messageProviderPref
;
this
.
_localProviders
=
localProviders
;
this
.
onMessage
=
this
.
onMessage
.
bind
(
this
)
;
this
.
_handleTargetingError
=
this
.
_handleTargetingError
.
bind
(
this
)
;
}
async
observe
(
aSubject
aTopic
aPrefName
)
{
if
(
aPrefName
=
=
=
this
.
_messageProviderPref
)
{
this
.
_updateMessageProviders
(
)
;
}
await
this
.
loadMessagesFromAllProviders
(
)
;
}
_updateMessageProviders
(
)
{
const
existingPreviewProvider
=
this
.
state
.
providers
.
find
(
p
=
>
p
.
id
=
=
=
"
preview
"
)
;
const
providers
=
existingPreviewProvider
?
[
existingPreviewProvider
]
:
[
]
;
const
providersJSON
=
Services
.
prefs
.
getStringPref
(
this
.
_messageProviderPref
"
"
)
;
try
{
JSON
.
parse
(
providersJSON
)
.
forEach
(
provider
=
>
{
if
(
provider
.
enabled
)
{
providers
.
push
(
provider
)
;
}
}
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
Problem
parsing
JSON
message
provider
pref
for
ASRouter
"
)
;
}
providers
.
forEach
(
provider
=
>
{
if
(
provider
.
type
=
=
=
"
local
"
&
&
!
provider
.
messages
)
{
const
localProvider
=
this
.
_localProviders
[
provider
.
localProvider
]
;
provider
.
messages
=
localProvider
?
localProvider
.
getMessages
(
)
:
[
]
;
}
if
(
provider
.
type
=
=
=
"
remote
"
&
&
provider
.
url
)
{
provider
.
url
=
provider
.
url
.
replace
(
/
%
STARTPAGE_VERSION
%
/
g
STARTPAGE_VERSION
)
;
provider
.
url
=
Services
.
urlFormatter
.
formatURL
(
provider
.
url
)
;
}
provider
.
lastUpdated
=
undefined
;
}
)
;
const
providerIDs
=
providers
.
map
(
p
=
>
p
.
id
)
;
this
.
setState
(
prevState
=
>
(
{
providers
messages
:
[
.
.
.
prevState
.
messages
.
filter
(
message
=
>
providerIDs
.
includes
(
message
.
provider
)
)
]
}
)
)
;
}
get
state
(
)
{
return
this
.
_state
;
}
set
state
(
value
)
{
throw
new
Error
(
"
Do
not
modify
this
.
state
directy
.
Instead
call
this
.
setState
(
newState
)
"
)
;
}
_resetInitialization
(
)
{
this
.
initialized
=
false
;
this
.
waitForInitialized
=
new
Promise
(
resolve
=
>
{
this
.
_finishInitializing
=
(
)
=
>
{
this
.
initialized
=
true
;
resolve
(
)
;
}
;
}
)
;
}
async
loadMessagesFromAllProviders
(
)
{
const
needsUpdate
=
this
.
state
.
providers
.
filter
(
provider
=
>
MessageLoaderUtils
.
shouldProviderUpdate
(
provider
)
)
;
if
(
needsUpdate
.
length
)
{
let
newState
=
{
messages
:
[
]
providers
:
[
]
}
;
for
(
const
provider
of
this
.
state
.
providers
)
{
if
(
needsUpdate
.
includes
(
provider
)
)
{
const
{
messages
lastUpdated
}
=
await
MessageLoaderUtils
.
loadMessagesForProvider
(
provider
)
;
newState
.
providers
.
push
(
{
.
.
.
provider
lastUpdated
}
)
;
newState
.
messages
=
[
.
.
.
newState
.
messages
.
.
.
messages
]
;
}
else
{
let
messages
=
this
.
state
.
messages
.
filter
(
msg
=
>
msg
.
provider
=
=
=
provider
.
id
)
;
newState
.
providers
.
push
(
provider
)
;
newState
.
messages
=
[
.
.
.
newState
.
messages
.
.
.
messages
]
;
}
}
const
unseenListeners
=
new
Set
(
ASRouterTriggerListeners
.
keys
(
)
)
;
for
(
const
{
trigger
}
of
newState
.
messages
)
{
if
(
trigger
&
&
ASRouterTriggerListeners
.
has
(
trigger
.
id
)
)
{
ASRouterTriggerListeners
.
get
(
trigger
.
id
)
.
init
(
this
.
_triggerHandler
trigger
.
params
)
;
unseenListeners
.
delete
(
trigger
.
id
)
;
}
}
for
(
const
triggerID
of
unseenListeners
)
{
ASRouterTriggerListeners
.
get
(
triggerID
)
.
uninit
(
)
;
}
await
this
.
setState
(
this
.
_removePreviewEndpoint
(
newState
)
)
;
await
this
.
cleanupImpressions
(
)
;
}
}
async
init
(
channel
storage
dispatchToAS
)
{
this
.
messageChannel
=
channel
;
this
.
messageChannel
.
addMessageListener
(
INCOMING_MESSAGE_NAME
this
.
onMessage
)
;
Services
.
prefs
.
addObserver
(
this
.
_messageProviderPref
this
)
;
this
.
_storage
=
storage
;
this
.
WHITELIST_HOSTS
=
this
.
_loadSnippetsWhitelistHosts
(
)
;
this
.
dispatchToAS
=
dispatchToAS
;
this
.
dispatch
=
this
.
dispatch
.
bind
(
this
)
;
const
messageBlockList
=
await
this
.
_storage
.
get
(
"
messageBlockList
"
)
|
|
[
]
;
const
providerBlockList
=
await
this
.
_storage
.
get
(
"
providerBlockList
"
)
|
|
[
]
;
const
messageImpressions
=
await
this
.
_storage
.
get
(
"
messageImpressions
"
)
|
|
{
}
;
const
providerImpressions
=
await
this
.
_storage
.
get
(
"
providerImpressions
"
)
|
|
{
}
;
await
this
.
setState
(
{
messageBlockList
providerBlockList
messageImpressions
providerImpressions
}
)
;
this
.
_updateMessageProviders
(
)
;
await
this
.
loadMessagesFromAllProviders
(
)
;
this
.
_finishInitializing
(
)
;
}
uninit
(
)
{
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_ALL
"
}
)
;
this
.
messageChannel
.
removeMessageListener
(
INCOMING_MESSAGE_NAME
this
.
onMessage
)
;
this
.
messageChannel
=
null
;
this
.
dispatchToAS
=
null
;
Services
.
prefs
.
removeObserver
(
this
.
_messageProviderPref
this
)
;
for
(
const
listener
of
ASRouterTriggerListeners
.
values
(
)
)
{
listener
.
uninit
(
)
;
}
this
.
_resetInitialization
(
)
;
}
setState
(
callbackOrObj
)
{
const
newState
=
(
typeof
callbackOrObj
=
=
=
"
function
"
)
?
callbackOrObj
(
this
.
state
)
:
callbackOrObj
;
this
.
_state
=
{
.
.
.
this
.
state
.
.
.
newState
}
;
return
new
Promise
(
resolve
=
>
{
this
.
_onStateChanged
(
this
.
state
)
;
resolve
(
)
;
}
)
;
}
getMessageById
(
id
)
{
return
this
.
state
.
messages
.
find
(
message
=
>
message
.
id
=
=
=
id
)
;
}
_onStateChanged
(
state
)
{
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
ADMIN_SET_STATE
"
data
:
state
}
)
;
}
_handleTargetingError
(
type
error
message
)
{
Cu
.
reportError
(
error
)
;
if
(
this
.
dispatchToAS
)
{
this
.
dispatchToAS
(
ac
.
ASRouterUserEvent
(
{
message_id
:
message
.
id
action
:
"
asrouter_undesired_event
"
event
:
"
TARGETING_EXPRESSION_ERROR
"
value
:
type
}
)
)
;
}
}
_findMessage
(
candidateMessages
trigger
)
{
const
messages
=
candidateMessages
.
filter
(
m
=
>
this
.
isBelowFrequencyCaps
(
m
)
)
;
return
ASRouterTargeting
.
findMatchingMessage
(
{
messages
trigger
onError
:
this
.
_handleTargetingError
}
)
;
}
_orderBundle
(
bundle
)
{
return
bundle
.
sort
(
(
a
b
)
=
>
a
.
order
-
b
.
order
)
;
}
isBelowFrequencyCaps
(
message
)
{
const
{
providers
messageImpressions
providerImpressions
}
=
this
.
state
;
const
provider
=
providers
.
find
(
p
=
>
p
.
id
=
=
=
message
.
provider
)
;
const
impressionsForMessage
=
messageImpressions
[
message
.
id
]
;
const
impressionsForProvider
=
providerImpressions
[
message
.
provider
]
;
return
(
this
.
_isBelowItemFrequencyCap
(
message
impressionsForMessage
MAX_MESSAGE_LIFETIME_CAP
)
&
&
this
.
_isBelowItemFrequencyCap
(
provider
impressionsForProvider
)
)
;
}
_isBelowItemFrequencyCap
(
item
impressions
maxLifetimeCap
=
Infinity
)
{
if
(
item
&
&
item
.
frequency
&
&
impressions
&
&
impressions
.
length
)
{
if
(
item
.
frequency
.
lifetime
&
&
impressions
.
length
>
=
Math
.
min
(
item
.
frequency
.
lifetime
maxLifetimeCap
)
)
{
return
false
;
}
if
(
item
.
frequency
.
custom
)
{
const
now
=
Date
.
now
(
)
;
for
(
const
setting
of
item
.
frequency
.
custom
)
{
let
{
period
}
=
setting
;
if
(
period
=
=
=
"
daily
"
)
{
period
=
ONE_DAY_IN_MS
;
}
const
impressionsInPeriod
=
impressions
.
filter
(
t
=
>
(
now
-
t
)
<
period
)
;
if
(
impressionsInPeriod
.
length
>
=
setting
.
cap
)
{
return
false
;
}
}
}
}
return
true
;
}
async
_getBundledMessages
(
originalMessage
target
trigger
force
=
false
)
{
let
result
=
[
{
content
:
originalMessage
.
content
id
:
originalMessage
.
id
order
:
originalMessage
.
order
|
|
0
}
]
;
let
bundledMessagesOfSameTemplate
=
this
.
_getUnblockedMessages
(
)
.
filter
(
msg
=
>
msg
.
bundled
&
&
msg
.
template
=
=
=
originalMessage
.
template
&
&
msg
.
id
!
=
=
originalMessage
.
id
)
;
if
(
force
)
{
for
(
const
message
of
bundledMessagesOfSameTemplate
)
{
result
.
push
(
{
content
:
message
.
content
id
:
message
.
id
}
)
;
if
(
result
.
length
=
=
=
originalMessage
.
bundled
)
{
break
;
}
}
}
else
{
while
(
bundledMessagesOfSameTemplate
.
length
)
{
const
message
=
await
this
.
_findMessage
(
bundledMessagesOfSameTemplate
trigger
)
;
if
(
!
message
)
{
break
;
}
result
.
push
(
{
content
:
message
.
content
id
:
message
.
id
order
:
message
.
order
|
|
0
}
)
;
bundledMessagesOfSameTemplate
.
splice
(
bundledMessagesOfSameTemplate
.
findIndex
(
msg
=
>
msg
.
id
=
=
=
message
.
id
)
1
)
;
if
(
result
.
length
=
=
=
originalMessage
.
bundled
)
{
break
;
}
}
}
if
(
result
.
length
<
originalMessage
.
bundled
)
{
return
null
;
}
return
{
bundle
:
this
.
_orderBundle
(
result
)
provider
:
originalMessage
.
provider
template
:
originalMessage
.
template
}
;
}
_getUnblockedMessages
(
)
{
let
{
state
}
=
this
;
return
state
.
messages
.
filter
(
item
=
>
!
state
.
messageBlockList
.
includes
(
item
.
id
)
&
&
!
state
.
providerBlockList
.
includes
(
item
.
provider
)
)
;
}
async
_sendMessageToTarget
(
message
target
trigger
force
=
false
)
{
if
(
!
message
)
{
try
{
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_ALL
"
}
)
;
}
catch
(
e
)
{
}
}
else
if
(
message
.
bundled
)
{
const
bundledMessages
=
await
this
.
_getBundledMessages
(
message
target
trigger
force
)
;
const
action
=
bundledMessages
?
{
type
:
"
SET_BUNDLED_MESSAGES
"
data
:
bundledMessages
}
:
{
type
:
"
CLEAR_ALL
"
}
;
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
action
)
;
}
else
if
(
message
.
template
=
=
=
"
cfr_doorhanger
"
)
{
if
(
force
)
{
CFRPageActions
.
forceRecommendation
(
target
message
this
.
dispatch
)
;
}
else
{
CFRPageActions
.
addRecommendation
(
target
trigger
.
param
message
this
.
dispatch
)
;
}
}
else
{
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
SET_MESSAGE
"
data
:
message
}
)
;
}
}
async
addImpression
(
message
)
{
const
provider
=
this
.
state
.
providers
.
find
(
p
=
>
p
.
id
=
=
=
message
.
provider
)
;
if
(
message
.
frequency
|
|
(
provider
&
&
provider
.
frequency
)
)
{
const
time
=
Date
.
now
(
)
;
await
this
.
setState
(
state
=
>
{
const
messageImpressions
=
this
.
_addImpressionForItem
(
state
message
"
messageImpressions
"
time
)
;
const
providerImpressions
=
this
.
_addImpressionForItem
(
state
provider
"
providerImpressions
"
time
)
;
return
{
messageImpressions
providerImpressions
}
;
}
)
;
}
}
_addImpressionForItem
(
state
item
impressionsString
time
)
{
const
impressions
=
{
.
.
.
state
[
impressionsString
]
}
;
if
(
item
.
frequency
)
{
impressions
[
item
.
id
]
=
impressions
[
item
.
id
]
?
[
.
.
.
impressions
[
item
.
id
]
]
:
[
]
;
impressions
[
item
.
id
]
.
push
(
time
)
;
this
.
_storage
.
set
(
impressionsString
impressions
)
;
}
return
impressions
;
}
getLongestPeriod
(
message
)
{
if
(
!
message
.
frequency
|
|
!
message
.
frequency
.
custom
)
{
return
null
;
}
return
message
.
frequency
.
custom
.
sort
(
(
a
b
)
=
>
b
.
period
-
a
.
period
)
[
0
]
.
period
;
}
async
cleanupImpressions
(
)
{
await
this
.
setState
(
state
=
>
{
const
messageImpressions
=
this
.
_cleanupImpressionsForItems
(
state
state
.
messages
"
messageImpressions
"
)
;
const
providerImpressions
=
this
.
_cleanupImpressionsForItems
(
state
state
.
providers
"
providerImpressions
"
)
;
return
{
messageImpressions
providerImpressions
}
;
}
)
;
}
_cleanupImpressionsForItems
(
state
items
impressionsString
)
{
const
impressions
=
{
.
.
.
state
[
impressionsString
]
}
;
let
needsUpdate
=
false
;
Object
.
keys
(
impressions
)
.
forEach
(
id
=
>
{
const
[
item
]
=
items
.
filter
(
x
=
>
x
.
id
=
=
=
id
)
;
if
(
!
item
|
|
!
item
.
frequency
|
|
!
Array
.
isArray
(
impressions
[
id
]
)
)
{
delete
impressions
[
id
]
;
needsUpdate
=
true
;
return
;
}
if
(
!
impressions
[
id
]
.
length
)
{
return
;
}
if
(
item
.
frequency
.
custom
&
&
!
item
.
frequency
.
lifetime
)
{
const
now
=
Date
.
now
(
)
;
impressions
[
id
]
=
impressions
[
id
]
.
filter
(
t
=
>
(
now
-
t
)
<
this
.
getLongestPeriod
(
item
)
)
;
needsUpdate
=
true
;
}
}
)
;
if
(
needsUpdate
)
{
this
.
_storage
.
set
(
impressionsString
impressions
)
;
}
return
impressions
;
}
async
sendNextMessage
(
target
trigger
)
{
const
msgs
=
this
.
_getUnblockedMessages
(
)
;
let
message
=
null
;
const
previewMsgs
=
this
.
state
.
messages
.
filter
(
item
=
>
item
.
provider
=
=
=
"
preview
"
)
;
if
(
previewMsgs
.
length
)
{
[
message
]
=
previewMsgs
;
}
else
{
message
=
await
this
.
_findMessage
(
msgs
trigger
)
;
}
if
(
previewMsgs
.
length
)
{
await
this
.
setState
(
state
=
>
(
{
lastMessageId
:
message
.
id
messages
:
state
.
messages
.
filter
(
m
=
>
m
.
id
!
=
=
message
.
id
)
}
)
)
;
}
else
{
await
this
.
setState
(
{
lastMessageId
:
message
?
message
.
id
:
null
}
)
;
}
await
this
.
_sendMessageToTarget
(
message
target
trigger
)
;
}
async
setMessageById
(
id
target
force
=
true
action
=
{
}
)
{
await
this
.
setState
(
{
lastMessageId
:
id
}
)
;
const
newMessage
=
this
.
getMessageById
(
id
)
;
await
this
.
_sendMessageToTarget
(
newMessage
target
action
.
data
force
)
;
}
async
blockMessageById
(
idOrIds
)
{
const
idsToBlock
=
Array
.
isArray
(
idOrIds
)
?
idOrIds
:
[
idOrIds
]
;
await
this
.
setState
(
state
=
>
{
const
messageBlockList
=
[
.
.
.
state
.
messageBlockList
.
.
.
idsToBlock
]
;
const
messageImpressions
=
{
.
.
.
state
.
messageImpressions
}
;
idsToBlock
.
forEach
(
id
=
>
delete
messageImpressions
[
id
]
)
;
this
.
_storage
.
set
(
"
messageBlockList
"
messageBlockList
)
;
return
{
messageBlockList
messageImpressions
}
;
}
)
;
}
async
blockProviderById
(
idOrIds
)
{
const
idsToBlock
=
Array
.
isArray
(
idOrIds
)
?
idOrIds
:
[
idOrIds
]
;
await
this
.
setState
(
state
=
>
{
const
providerBlockList
=
[
.
.
.
state
.
providerBlockList
.
.
.
idsToBlock
]
;
const
providerImpressions
=
{
.
.
.
state
.
providerImpressions
}
;
idsToBlock
.
forEach
(
id
=
>
delete
providerImpressions
[
id
]
)
;
this
.
_storage
.
set
(
"
providerBlockList
"
providerBlockList
)
;
return
{
providerBlockList
providerImpressions
}
;
}
)
;
}
_validPreviewEndpoint
(
url
)
{
try
{
const
endpoint
=
new
URL
(
url
)
;
if
(
!
this
.
WHITELIST_HOSTS
[
endpoint
.
host
]
)
{
Cu
.
reportError
(
The
preview
URL
host
{
endpoint
.
host
}
is
not
in
the
whitelist
.
)
;
}
if
(
endpoint
.
protocol
!
=
=
"
https
:
"
)
{
Cu
.
reportError
(
"
The
URL
protocol
is
not
https
.
"
)
;
}
return
(
endpoint
.
protocol
=
=
=
"
https
:
"
&
&
this
.
WHITELIST_HOSTS
[
endpoint
.
host
]
)
;
}
catch
(
e
)
{
return
false
;
}
}
_loadSnippetsWhitelistHosts
(
)
{
let
additionalHosts
=
[
]
;
const
whitelistPrefValue
=
Services
.
prefs
.
getStringPref
(
SNIPPETS_ENDPOINT_WHITELIST
"
"
)
;
try
{
additionalHosts
=
JSON
.
parse
(
whitelistPrefValue
)
;
}
catch
(
e
)
{
if
(
whitelistPrefValue
)
{
Cu
.
reportError
(
Pref
{
SNIPPETS_ENDPOINT_WHITELIST
}
value
is
not
valid
JSON
)
;
}
}
if
(
!
additionalHosts
.
length
)
{
return
DEFAULT_WHITELIST_HOSTS
;
}
return
additionalHosts
.
reduce
(
(
whitelist_hosts
host
)
=
>
{
whitelist_hosts
[
host
]
=
"
preview
"
;
Services
.
console
.
logStringMessage
(
Adding
{
host
}
to
whitelist
hosts
.
)
;
return
whitelist_hosts
;
}
{
.
.
.
DEFAULT_WHITELIST_HOSTS
}
)
;
}
async
_triggerHandler
(
target
trigger
)
{
await
this
.
onMessage
(
{
target
data
:
{
type
:
"
TRIGGER
"
data
:
{
trigger
}
}
}
)
;
}
_removePreviewEndpoint
(
state
)
{
state
.
providers
=
state
.
providers
.
filter
(
p
=
>
p
.
id
!
=
=
"
preview
"
)
;
return
state
;
}
async
_addPreviewEndpoint
(
url
)
{
const
providers
=
[
.
.
.
this
.
state
.
providers
]
;
if
(
this
.
_validPreviewEndpoint
(
url
)
&
&
!
providers
.
find
(
p
=
>
p
.
url
=
=
=
url
)
)
{
providers
.
push
(
{
id
:
"
preview
"
type
:
"
remote
"
url
updateCycleInMs
:
0
}
)
;
await
this
.
setState
(
{
providers
}
)
;
}
}
async
handleUserAction
(
{
data
:
action
target
}
)
{
switch
(
action
.
type
)
{
case
ra
.
OPEN_PRIVATE_BROWSER_WINDOW
:
target
.
browser
.
ownerGlobal
.
OpenBrowserWindow
(
{
private
:
true
}
)
;
break
;
case
ra
.
OPEN_URL
:
target
.
browser
.
ownerGlobal
.
openLinkIn
(
action
.
data
.
url
"
tabshifted
"
{
private
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
}
)
;
break
;
case
ra
.
OPEN_ABOUT_PAGE
:
target
.
browser
.
ownerGlobal
.
openTrustedLinkIn
(
about
:
{
action
.
data
.
page
}
"
tab
"
)
;
break
;
case
ra
.
OPEN_APPLICATIONS_MENU
:
UITour
.
showMenu
(
target
.
browser
.
ownerGlobal
action
.
data
.
target
)
;
break
;
case
ra
.
INSTALL_ADDON_FROM_URL
:
await
MessageLoaderUtils
.
installAddonFromURL
(
target
.
browser
action
.
data
.
url
)
;
break
;
}
}
dispatch
(
action
target
)
{
this
.
onMessage
(
{
data
:
action
target
}
)
;
}
async
onMessage
(
{
data
:
action
target
}
)
{
switch
(
action
.
type
)
{
case
"
USER_ACTION
"
:
if
(
action
.
data
.
type
in
ra
)
{
await
this
.
handleUserAction
(
{
data
:
action
.
data
target
}
)
;
}
break
;
case
"
CONNECT_UI_REQUEST
"
:
case
"
GET_NEXT_MESSAGE
"
:
case
"
TRIGGER
"
:
await
this
.
waitForInitialized
;
if
(
action
.
data
&
&
action
.
data
.
endpoint
)
{
await
this
.
_addPreviewEndpoint
(
action
.
data
.
endpoint
.
url
)
;
}
await
this
.
loadMessagesFromAllProviders
(
)
;
await
this
.
sendNextMessage
(
target
(
action
.
data
&
&
action
.
data
.
trigger
)
|
|
{
}
)
;
break
;
case
"
BLOCK_MESSAGE_BY_ID
"
:
await
this
.
blockMessageById
(
action
.
data
.
id
)
;
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_MESSAGE
"
data
:
{
id
:
action
.
data
.
id
}
}
)
;
break
;
case
"
BLOCK_PROVIDER_BY_ID
"
:
await
this
.
blockProviderById
(
action
.
data
.
id
)
;
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_PROVIDER
"
data
:
{
id
:
action
.
data
.
id
}
}
)
;
break
;
case
"
BLOCK_BUNDLE
"
:
await
this
.
blockMessageById
(
action
.
data
.
bundle
.
map
(
b
=
>
b
.
id
)
)
;
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_BUNDLE
"
}
)
;
break
;
case
"
UNBLOCK_MESSAGE_BY_ID
"
:
await
this
.
setState
(
state
=
>
{
const
messageBlockList
=
[
.
.
.
state
.
messageBlockList
]
;
messageBlockList
.
splice
(
messageBlockList
.
indexOf
(
action
.
data
.
id
)
1
)
;
this
.
_storage
.
set
(
"
messageBlockList
"
messageBlockList
)
;
return
{
messageBlockList
}
;
}
)
;
break
;
case
"
UNBLOCK_PROVIDER_BY_ID
"
:
await
this
.
setState
(
state
=
>
{
const
providerBlockList
=
[
.
.
.
state
.
providerBlockList
]
;
providerBlockList
.
splice
(
providerBlockList
.
indexOf
(
action
.
data
.
id
)
1
)
;
this
.
_storage
.
set
(
"
providerBlockList
"
providerBlockList
)
;
return
{
providerBlockList
}
;
}
)
;
break
;
case
"
UNBLOCK_BUNDLE
"
:
await
this
.
setState
(
state
=
>
{
const
messageBlockList
=
[
.
.
.
state
.
messageBlockList
]
;
for
(
let
message
of
action
.
data
.
bundle
)
{
messageBlockList
.
splice
(
messageBlockList
.
indexOf
(
message
.
id
)
1
)
;
}
this
.
_storage
.
set
(
"
messageBlockList
"
messageBlockList
)
;
return
{
messageBlockList
}
;
}
)
;
break
;
case
"
OVERRIDE_MESSAGE
"
:
await
this
.
setMessageById
(
action
.
data
.
id
target
true
action
)
;
break
;
case
"
ADMIN_CONNECT_STATE
"
:
if
(
action
.
data
&
&
action
.
data
.
endpoint
)
{
this
.
_addPreviewEndpoint
(
action
.
data
.
endpoint
.
url
)
;
await
this
.
loadMessagesFromAllProviders
(
)
;
}
else
{
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
ADMIN_SET_STATE
"
data
:
this
.
state
}
)
;
}
break
;
case
"
IMPRESSION
"
:
await
this
.
addImpression
(
action
.
data
)
;
break
;
}
}
}
this
.
_ASRouter
=
_ASRouter
;
this
.
ASRouter
=
new
_ASRouter
(
)
;
const
EXPORTED_SYMBOLS
=
[
"
_ASRouter
"
"
ASRouter
"
"
MessageLoaderUtils
"
]
;
