const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
IndexedDB
"
"
resource
:
/
/
gre
/
modules
/
IndexedDB
.
jsm
"
)
;
class
ActivityStreamStorage
{
constructor
(
{
storeNames
telemetry
}
)
{
if
(
!
storeNames
)
{
throw
new
Error
(
"
storeNames
required
"
)
;
}
this
.
dbName
=
"
ActivityStream
"
;
this
.
dbVersion
=
3
;
this
.
storeNames
=
storeNames
;
this
.
telemetry
=
telemetry
;
}
get
db
(
)
{
return
this
.
_db
|
|
(
this
.
_db
=
this
.
createOrOpenDb
(
)
)
;
}
getDbTable
(
storeName
)
{
if
(
this
.
storeNames
.
includes
(
storeName
)
)
{
return
{
get
:
this
.
_get
.
bind
(
this
storeName
)
getAll
:
this
.
_getAll
.
bind
(
this
storeName
)
set
:
this
.
_set
.
bind
(
this
storeName
)
}
;
}
throw
new
Error
(
Store
name
{
storeName
}
does
not
exist
.
)
;
}
async
_getStore
(
storeName
)
{
return
(
await
this
.
db
)
.
objectStore
(
storeName
"
readwrite
"
)
;
}
_get
(
storeName
key
)
{
return
this
.
_requestWrapper
(
async
(
)
=
>
(
await
this
.
_getStore
(
storeName
)
)
.
get
(
key
)
)
;
}
_getAll
(
storeName
)
{
return
this
.
_requestWrapper
(
async
(
)
=
>
(
await
this
.
_getStore
(
storeName
)
)
.
getAll
(
)
)
;
}
_set
(
storeName
key
value
)
{
return
this
.
_requestWrapper
(
async
(
)
=
>
(
await
this
.
_getStore
(
storeName
)
)
.
put
(
value
key
)
)
;
}
_openDatabase
(
)
{
return
lazy
.
IndexedDB
.
open
(
this
.
dbName
{
version
:
this
.
dbVersion
}
db
=
>
{
this
.
storeNames
.
forEach
(
store
=
>
{
if
(
!
db
.
objectStoreNames
.
contains
(
store
)
)
{
this
.
_requestWrapper
(
(
)
=
>
db
.
createObjectStore
(
store
)
)
;
}
}
)
;
}
)
;
}
async
createOrOpenDb
(
)
{
try
{
const
db
=
await
this
.
_openDatabase
(
)
;
return
db
;
}
catch
(
e
)
{
if
(
this
.
telemetry
)
{
this
.
telemetry
.
handleUndesiredEvent
(
{
event
:
"
INDEXEDDB_OPEN_FAILED
"
}
)
;
}
await
lazy
.
IndexedDB
.
deleteDatabase
(
this
.
dbName
)
;
return
this
.
_openDatabase
(
)
;
}
}
async
_requestWrapper
(
request
)
{
let
result
=
null
;
try
{
result
=
await
request
(
)
;
}
catch
(
e
)
{
if
(
this
.
telemetry
)
{
this
.
telemetry
.
handleUndesiredEvent
(
{
event
:
"
TRANSACTION_FAILED
"
}
)
;
}
throw
e
;
}
return
result
;
}
}
function
getDefaultOptions
(
options
)
{
return
{
collapsed
:
!
!
options
.
collapsed
}
;
}
const
EXPORTED_SYMBOLS
=
[
"
ActivityStreamStorage
"
"
getDefaultOptions
"
]
;
