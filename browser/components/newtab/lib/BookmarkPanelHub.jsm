"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
FxAccounts
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
class
_BookmarkPanelHub
{
constructor
(
)
{
this
.
_id
=
"
BookmarkPanelHub
"
;
this
.
_trigger
=
{
id
:
"
bookmark
-
panel
"
}
;
this
.
_handleMessageRequest
=
null
;
this
.
_addImpression
=
null
;
this
.
_dispatch
=
null
;
this
.
_initialized
=
false
;
this
.
_response
=
null
;
this
.
_l10n
=
null
;
this
.
messageRequest
=
this
.
messageRequest
.
bind
(
this
)
;
this
.
toggleRecommendation
=
this
.
toggleRecommendation
.
bind
(
this
)
;
this
.
sendUserEventTelemetry
=
this
.
sendUserEventTelemetry
.
bind
(
this
)
;
this
.
collapseMessage
=
this
.
collapseMessage
.
bind
(
this
)
;
}
init
(
handleMessageRequest
addImpression
dispatch
)
{
this
.
_handleMessageRequest
=
handleMessageRequest
;
this
.
_addImpression
=
addImpression
;
this
.
_dispatch
=
dispatch
;
this
.
_l10n
=
new
DOMLocalization
(
[
]
)
;
this
.
_initialized
=
true
;
}
uninit
(
)
{
this
.
_l10n
=
null
;
this
.
_initialized
=
false
;
this
.
_handleMessageRequest
=
null
;
this
.
_addImpression
=
null
;
this
.
_dispatch
=
null
;
this
.
_response
=
null
;
}
async
messageRequest
(
target
win
)
{
if
(
!
this
.
_initialized
)
{
return
false
;
}
if
(
this
.
_response
&
&
this
.
_response
.
win
=
=
=
win
&
&
this
.
_response
.
url
=
=
=
target
.
url
&
&
this
.
_response
.
content
)
{
this
.
showMessage
(
this
.
_response
.
content
target
win
)
;
return
true
;
}
this
.
_removeContainer
(
target
)
;
const
response
=
await
this
.
_handleMessageRequest
(
{
triggerId
:
this
.
_trigger
.
id
}
)
;
return
this
.
onResponse
(
response
target
win
)
;
}
onResponse
(
response
target
win
)
{
this
.
_response
=
{
.
.
.
response
collapsed
:
false
target
win
url
:
target
.
url
}
;
if
(
response
&
&
response
.
content
)
{
win
.
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
newtab
/
asrouter
.
ftl
"
)
;
win
.
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
branding
/
sync
-
brand
.
ftl
"
)
;
this
.
showMessage
(
response
.
content
target
win
)
;
this
.
sendImpression
(
)
;
this
.
sendUserEventTelemetry
(
"
IMPRESSION
"
win
)
;
}
else
{
this
.
hideMessage
(
target
)
;
}
target
.
infoButton
.
disabled
=
!
response
;
return
!
!
response
;
}
showMessage
(
message
target
win
)
{
if
(
this
.
_response
&
&
this
.
_response
.
collapsed
)
{
this
.
toggleRecommendation
(
false
)
;
return
;
}
const
createElement
=
elem
=
>
target
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
elem
)
;
let
recommendation
=
target
.
container
.
querySelector
(
"
#
cfrMessageContainer
"
)
;
if
(
!
recommendation
)
{
recommendation
=
createElement
(
"
div
"
)
;
const
headerContainer
=
createElement
(
"
div
"
)
;
headerContainer
.
classList
.
add
(
"
cfrMessageHeader
"
)
;
recommendation
.
setAttribute
(
"
id
"
"
cfrMessageContainer
"
)
;
recommendation
.
addEventListener
(
"
click
"
async
e
=
>
{
target
.
hidePopup
(
)
;
const
url
=
await
FxAccounts
.
config
.
promiseConnectAccountURI
(
"
bookmark
"
)
;
win
.
ownerGlobal
.
openLinkIn
(
url
"
tabshifted
"
{
private
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
csp
:
null
}
)
;
this
.
sendUserEventTelemetry
(
"
CLICK
"
win
)
;
}
)
;
recommendation
.
style
.
color
=
message
.
color
;
recommendation
.
style
.
background
=
-
moz
-
linear
-
gradient
(
-
45deg
{
message
.
background_color_1
}
0
%
{
message
.
background_color_2
}
70
%
)
;
const
close
=
createElement
(
"
button
"
)
;
close
.
setAttribute
(
"
id
"
"
cfrClose
"
)
;
close
.
setAttribute
(
"
aria
-
label
"
"
close
"
)
;
close
.
style
.
color
=
message
.
color
;
close
.
addEventListener
(
"
click
"
e
=
>
{
this
.
sendUserEventTelemetry
(
"
DISMISS
"
win
)
;
this
.
collapseMessage
(
)
;
target
.
close
(
e
)
;
}
)
;
const
title
=
createElement
(
"
h1
"
)
;
title
.
setAttribute
(
"
id
"
"
editBookmarkPanelRecommendationTitle
"
)
;
const
content
=
createElement
(
"
p
"
)
;
content
.
setAttribute
(
"
id
"
"
editBookmarkPanelRecommendationContent
"
)
;
const
cta
=
createElement
(
"
button
"
)
;
cta
.
setAttribute
(
"
id
"
"
editBookmarkPanelRecommendationCta
"
)
;
if
(
message
.
text
.
string_id
)
{
this
.
_l10n
.
setAttributes
(
close
message
.
close_button
.
tooltiptext
.
string_id
)
;
this
.
_l10n
.
setAttributes
(
title
message
.
title
.
string_id
)
;
this
.
_l10n
.
setAttributes
(
content
message
.
text
.
string_id
)
;
this
.
_l10n
.
setAttributes
(
cta
message
.
cta
.
string_id
)
;
}
else
{
close
.
setAttribute
(
"
title
"
message
.
close_button
.
tooltiptext
)
;
title
.
textContent
=
message
.
title
;
content
.
textContent
=
message
.
text
;
cta
.
textContent
=
message
.
cta
;
}
headerContainer
.
appendChild
(
title
)
;
headerContainer
.
appendChild
(
close
)
;
recommendation
.
appendChild
(
headerContainer
)
;
recommendation
.
appendChild
(
content
)
;
recommendation
.
appendChild
(
cta
)
;
target
.
container
.
appendChild
(
recommendation
)
;
}
this
.
toggleRecommendation
(
true
)
;
this
.
_adjustPanelHeight
(
win
recommendation
)
;
}
async
_adjustPanelHeight
(
window
messageContainer
)
{
const
{
document
}
=
window
;
const
screenshotContainer
=
document
.
getElementById
(
"
editBookmarkPanelImage
"
)
;
await
document
.
l10n
.
translateElements
(
[
messageContainer
]
)
;
window
.
requestAnimationFrame
(
(
)
=
>
{
let
{
height
}
=
messageContainer
.
getBoundingClientRect
(
)
;
if
(
height
>
150
)
{
messageContainer
.
classList
.
add
(
"
longMessagePadding
"
)
;
height
=
messageContainer
.
getBoundingClientRect
(
)
.
height
;
screenshotContainer
.
style
.
height
=
{
height
}
px
;
}
}
)
;
}
_restorePanelHeight
(
window
)
{
const
{
document
}
=
window
;
document
.
getElementById
(
"
editBookmarkPanelImage
"
)
.
style
.
height
=
"
"
;
}
toggleRecommendation
(
visible
)
{
if
(
!
this
.
_response
)
{
return
;
}
const
{
target
}
=
this
.
_response
;
if
(
visible
=
=
=
undefined
)
{
target
.
infoButton
.
checked
=
!
target
.
infoButton
.
checked
;
}
else
{
target
.
infoButton
.
checked
=
visible
;
}
if
(
target
.
infoButton
.
checked
)
{
this
.
_response
.
collapsed
=
false
;
target
.
container
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
target
.
container
.
setAttribute
(
"
disabled
"
"
disabled
"
)
;
}
}
collapseMessage
(
)
{
this
.
_response
.
collapsed
=
true
;
this
.
toggleRecommendation
(
false
)
;
}
_removeContainer
(
target
)
{
if
(
target
|
|
(
this
.
_response
&
&
this
.
_response
.
target
)
)
{
const
container
=
(
target
|
|
this
.
_response
.
target
)
.
container
.
querySelector
(
"
#
cfrMessageContainer
"
)
;
if
(
container
)
{
this
.
_restorePanelHeight
(
this
.
_response
.
win
)
;
container
.
remove
(
)
;
}
}
}
hideMessage
(
target
)
{
this
.
_removeContainer
(
target
)
;
this
.
toggleRecommendation
(
false
)
;
this
.
_response
=
null
;
}
_forceShowMessage
(
target
message
)
{
const
doc
=
target
.
browser
.
ownerGlobal
.
gBrowser
.
ownerDocument
;
const
win
=
target
.
browser
.
ownerGlobal
.
window
;
const
panelTarget
=
{
container
:
doc
.
getElementById
(
"
editBookmarkPanelRecommendation
"
)
infoButton
:
doc
.
getElementById
(
"
editBookmarkPanelInfoButton
"
)
document
:
doc
close
:
e
=
>
{
e
.
stopPropagation
(
)
;
this
.
toggleRecommendation
(
false
)
;
}
}
;
this
.
hideMessage
(
panelTarget
)
;
this
.
_response
=
{
target
:
panelTarget
win
}
;
win
.
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
newtab
/
asrouter
.
ftl
"
)
;
win
.
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
branding
/
sync
-
brand
.
ftl
"
)
;
this
.
showMessage
(
message
.
content
panelTarget
win
)
;
}
sendImpression
(
)
{
this
.
_addImpression
(
this
.
_response
)
;
}
sendUserEventTelemetry
(
event
win
)
{
if
(
!
PrivateBrowsingUtils
.
isBrowserPrivate
(
win
.
ownerGlobal
.
gBrowser
.
selectedBrowser
)
)
{
this
.
_sendTelemetry
(
{
message_id
:
this
.
_response
.
id
bucket_id
:
this
.
_response
.
id
event
}
)
;
}
}
_sendTelemetry
(
ping
)
{
this
.
_dispatch
(
{
type
:
"
DOORHANGER_TELEMETRY
"
data
:
{
action
:
"
cfr_user_event
"
source
:
"
CFR
"
.
.
.
ping
}
}
)
;
}
}
this
.
_BookmarkPanelHub
=
_BookmarkPanelHub
;
this
.
BookmarkPanelHub
=
new
_BookmarkPanelHub
(
)
;
const
EXPORTED_SYMBOLS
=
[
"
BookmarkPanelHub
"
"
_BookmarkPanelHub
"
]
;
