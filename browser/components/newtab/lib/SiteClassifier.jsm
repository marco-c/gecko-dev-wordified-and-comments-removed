"
use
strict
"
;
const
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
function
_hasParams
(
criteria
params
)
{
for
(
let
param
of
criteria
)
{
const
val
=
params
.
get
(
param
.
key
)
;
if
(
val
=
=
=
null
|
|
(
param
.
value
&
&
param
.
value
!
=
=
val
)
|
|
(
param
.
prefix
&
&
!
val
.
startsWith
(
param
.
prefix
)
)
)
{
return
false
;
}
}
return
true
;
}
async
function
classifySite
(
url
RS
=
RemoteSettings
)
{
let
category
=
"
other
"
;
let
parsedURL
;
for
(
let
_url
of
[
url
https
:
/
/
{
url
}
]
)
{
try
{
parsedURL
=
new
URL
(
_url
)
;
break
;
}
catch
(
e
)
{
}
}
if
(
parsedURL
)
{
const
hostname
=
parsedURL
.
hostname
.
replace
(
/
^
www
\
.
/
i
"
"
)
;
const
params
=
parsedURL
.
searchParams
;
const
siteTypes
=
await
RS
(
"
sites
-
classification
"
)
.
get
(
)
;
const
sortedSiteTypes
=
siteTypes
.
sort
(
(
x
y
)
=
>
(
y
.
weight
|
|
0
)
-
(
x
.
weight
|
|
0
)
)
;
for
(
let
type
of
sortedSiteTypes
)
{
for
(
let
criteria
of
type
.
criteria
)
{
if
(
criteria
.
url
&
&
criteria
.
url
!
=
=
url
)
{
continue
;
}
if
(
criteria
.
hostname
&
&
criteria
.
hostname
!
=
=
hostname
)
{
continue
;
}
if
(
criteria
.
sld
&
&
criteria
.
sld
!
=
=
hostname
.
split
(
"
.
"
)
[
0
]
)
{
continue
;
}
if
(
criteria
.
params
&
&
!
_hasParams
(
criteria
.
params
params
)
)
{
continue
;
}
return
type
.
type
;
}
}
}
return
category
;
}
const
EXPORTED_SYMBOLS
=
[
"
classifySite
"
]
;
