"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
NewTabUtils
:
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
sys
.
mjs
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
Utils
:
"
resource
:
/
/
services
-
settings
/
Utils
.
sys
.
mjs
"
}
)
;
const
{
BasePromiseWorker
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PromiseWorker
.
sys
.
mjs
"
)
;
const
RECIPE_NAME
=
"
personality
-
provider
-
recipe
"
;
const
MODELS_NAME
=
"
personality
-
provider
-
models
"
;
class
PersonalityProvider
{
constructor
(
modelKeys
)
{
this
.
modelKeys
=
modelKeys
;
this
.
onSync
=
this
.
onSync
.
bind
(
this
)
;
this
.
setup
(
)
;
}
setScores
(
scores
)
{
this
.
scores
=
scores
|
|
{
}
;
this
.
interestConfig
=
this
.
scores
.
interestConfig
;
this
.
interestVector
=
this
.
scores
.
interestVector
;
}
get
personalityProviderWorker
(
)
{
if
(
this
.
_personalityProviderWorker
)
{
return
this
.
_personalityProviderWorker
;
}
this
.
_personalityProviderWorker
=
new
BasePromiseWorker
(
"
resource
:
/
/
activity
-
stream
/
lib
/
PersonalityProvider
/
PersonalityProvider
.
worker
.
mjs
"
{
type
:
"
module
"
}
)
;
return
this
.
_personalityProviderWorker
;
}
get
baseAttachmentsURL
(
)
{
return
this
.
_getBaseAttachmentsURL
(
)
;
}
async
_getBaseAttachmentsURL
(
)
{
if
(
this
.
_baseAttachmentsURL
)
{
return
this
.
_baseAttachmentsURL
;
}
const
server
=
lazy
.
Utils
.
SERVER_URL
;
const
serverInfo
=
await
(
await
fetch
(
{
server
}
/
{
credentials
:
"
omit
"
}
)
)
.
json
(
)
;
const
{
capabilities
:
{
attachments
:
{
base_url
}
}
}
=
serverInfo
;
this
.
_baseAttachmentsURL
=
base_url
;
return
this
.
_baseAttachmentsURL
;
}
setup
(
)
{
this
.
setupSyncAttachment
(
RECIPE_NAME
)
;
this
.
setupSyncAttachment
(
MODELS_NAME
)
;
}
teardown
(
)
{
this
.
teardownSyncAttachment
(
RECIPE_NAME
)
;
this
.
teardownSyncAttachment
(
MODELS_NAME
)
;
if
(
this
.
_personalityProviderWorker
)
{
this
.
_personalityProviderWorker
.
terminate
(
)
;
}
}
setupSyncAttachment
(
collection
)
{
lazy
.
RemoteSettings
(
collection
)
.
on
(
"
sync
"
this
.
onSync
)
;
}
teardownSyncAttachment
(
collection
)
{
lazy
.
RemoteSettings
(
collection
)
.
off
(
"
sync
"
this
.
onSync
)
;
}
onSync
(
event
)
{
this
.
personalityProviderWorker
.
post
(
"
onSync
"
[
event
]
)
;
}
getAttachment
(
record
)
{
return
this
.
personalityProviderWorker
.
post
(
"
getAttachment
"
[
record
]
)
;
}
async
getRecipe
(
)
{
if
(
!
this
.
recipes
|
|
!
this
.
recipes
.
length
)
{
const
result
=
await
lazy
.
RemoteSettings
(
RECIPE_NAME
)
.
get
(
)
;
this
.
recipes
=
await
Promise
.
all
(
result
.
map
(
async
record
=
>
(
{
.
.
.
(
await
this
.
getAttachment
(
record
)
)
recordKey
:
record
.
key
}
)
)
)
;
}
return
this
.
recipes
[
0
]
;
}
async
fetchHistory
(
columns
beginTimeSecs
endTimeSecs
)
{
let
sql
=
SELECT
url
title
visit_count
frecency
last_visit_date
description
FROM
moz_places
WHERE
last_visit_date
>
=
{
beginTimeSecs
*
1000000
}
AND
last_visit_date
<
{
endTimeSecs
*
1000000
}
;
columns
.
forEach
(
requiredColumn
=
>
{
sql
+
=
AND
IFNULL
(
{
requiredColumn
}
'
'
)
<
>
'
'
;
}
)
;
sql
+
=
"
LIMIT
30000
"
;
const
{
activityStreamProvider
}
=
lazy
.
NewTabUtils
;
const
history
=
await
activityStreamProvider
.
executePlacesQuery
(
sql
{
columns
params
:
{
}
}
)
;
return
history
;
}
async
getHistory
(
)
{
let
endTimeSecs
=
new
Date
(
)
.
getTime
(
)
/
1000
;
let
beginTimeSecs
=
endTimeSecs
-
this
.
interestConfig
.
history_limit_secs
;
if
(
!
this
.
interestConfig
|
|
!
this
.
interestConfig
.
history_required_fields
|
|
!
this
.
interestConfig
.
history_required_fields
.
length
)
{
return
[
]
;
}
let
history
=
await
this
.
fetchHistory
(
this
.
interestConfig
.
history_required_fields
beginTimeSecs
endTimeSecs
)
;
return
history
;
}
async
setBaseAttachmentsURL
(
)
{
await
this
.
personalityProviderWorker
.
post
(
"
setBaseAttachmentsURL
"
[
await
this
.
baseAttachmentsURL
]
)
;
}
async
setInterestConfig
(
)
{
this
.
interestConfig
=
this
.
interestConfig
|
|
(
await
this
.
getRecipe
(
)
)
;
await
this
.
personalityProviderWorker
.
post
(
"
setInterestConfig
"
[
this
.
interestConfig
]
)
;
}
async
setInterestVector
(
)
{
await
this
.
personalityProviderWorker
.
post
(
"
setInterestVector
"
[
this
.
interestVector
]
)
;
}
async
fetchModels
(
)
{
const
models
=
await
lazy
.
RemoteSettings
(
MODELS_NAME
)
.
get
(
)
;
return
this
.
personalityProviderWorker
.
post
(
"
fetchModels
"
[
models
]
)
;
}
async
generateTaggers
(
)
{
await
this
.
personalityProviderWorker
.
post
(
"
generateTaggers
"
[
this
.
modelKeys
]
)
;
}
async
generateRecipeExecutor
(
)
{
await
this
.
personalityProviderWorker
.
post
(
"
generateRecipeExecutor
"
)
;
}
async
createInterestVector
(
)
{
const
history
=
await
this
.
getHistory
(
)
;
const
interestVectorResult
=
await
this
.
personalityProviderWorker
.
post
(
"
createInterestVector
"
[
history
]
)
;
return
interestVectorResult
;
}
async
init
(
callback
)
{
await
this
.
setBaseAttachmentsURL
(
)
;
await
this
.
setInterestConfig
(
)
;
if
(
!
this
.
interestConfig
)
{
return
;
}
const
fetchModelsResult
=
await
this
.
fetchModels
(
)
;
if
(
!
fetchModelsResult
.
ok
)
{
return
;
}
await
this
.
generateTaggers
(
)
;
await
this
.
generateRecipeExecutor
(
)
;
if
(
!
this
.
interestVector
)
{
const
interestVectorResult
=
await
this
.
createInterestVector
(
)
;
if
(
!
interestVectorResult
.
ok
)
{
return
;
}
this
.
interestVector
=
interestVectorResult
.
interestVector
;
}
await
this
.
setInterestVector
(
)
;
this
.
initialized
=
true
;
if
(
callback
)
{
callback
(
)
;
}
}
async
calculateItemRelevanceScore
(
pocketItem
)
{
if
(
!
this
.
initialized
)
{
return
pocketItem
.
item_score
|
|
1
;
}
const
itemRelevanceScore
=
await
this
.
personalityProviderWorker
.
post
(
"
calculateItemRelevanceScore
"
[
pocketItem
]
)
;
if
(
!
itemRelevanceScore
)
{
return
-
1
;
}
const
{
scorableItem
rankingVector
}
=
itemRelevanceScore
;
pocketItem
.
scorableItem
=
scorableItem
;
pocketItem
.
rankingVector
=
rankingVector
;
return
rankingVector
.
score
;
}
getScores
(
)
{
return
{
interestConfig
:
this
.
interestConfig
interestVector
:
this
.
interestVector
}
;
}
}
const
EXPORTED_SYMBOLS
=
[
"
PersonalityProvider
"
]
;
