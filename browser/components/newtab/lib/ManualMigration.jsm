"
use
strict
"
;
const
{
actionCreators
:
ac
actionTypes
:
at
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
MIGRATION_ENDED_EVENT
=
"
Migration
:
Ended
"
;
const
MS_PER_DAY
=
86400000
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
MigrationUtils
"
"
resource
:
/
/
/
modules
/
MigrationUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ProfileAge
"
"
resource
:
/
/
gre
/
modules
/
ProfileAge
.
jsm
"
)
;
this
.
ManualMigration
=
class
ManualMigration
{
constructor
(
)
{
Services
.
obs
.
addObserver
(
this
MIGRATION_ENDED_EVENT
)
;
}
get
migrationLastShownDate
(
)
{
return
this
.
store
.
getState
(
)
.
Prefs
.
values
.
migrationLastShownDate
;
}
set
migrationLastShownDate
(
newDate
)
{
this
.
store
.
dispatch
(
ac
.
SetPref
(
"
migrationLastShownDate
"
newDate
)
)
;
}
get
migrationRemainingDays
(
)
{
return
this
.
store
.
getState
(
)
.
Prefs
.
values
.
migrationRemainingDays
;
}
set
migrationRemainingDays
(
newDate
)
{
this
.
store
.
dispatch
(
ac
.
SetPref
(
"
migrationRemainingDays
"
newDate
)
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
MIGRATION_ENDED_EVENT
)
;
}
async
isMigrationMessageExpired
(
)
{
let
profileAge
=
await
ProfileAge
(
)
;
let
profileCreationDate
=
await
profileAge
.
created
;
let
daysSinceProfileCreation
=
(
Date
.
now
(
)
-
profileCreationDate
)
/
MS_PER_DAY
;
if
(
daysSinceProfileCreation
>
3
)
{
return
true
;
}
let
migrationLastShownDate
=
new
Date
(
this
.
migrationLastShownDate
*
1000
)
;
let
today
=
new
Date
(
)
;
today
=
new
Date
(
today
.
getFullYear
(
)
today
.
getMonth
(
)
today
.
getDate
(
)
)
;
if
(
migrationLastShownDate
<
today
)
{
let
migrationRemainingDays
=
this
.
migrationRemainingDays
-
1
;
this
.
migrationRemainingDays
=
migrationRemainingDays
;
this
.
migrationLastShownDate
=
today
.
valueOf
(
)
/
1000
;
if
(
migrationRemainingDays
<
=
0
)
{
return
true
;
}
}
return
false
;
}
async
expireIfNecessary
(
alreadyExpired
)
{
if
(
!
alreadyExpired
&
&
await
this
.
isMigrationMessageExpired
(
)
)
{
this
.
expireMigration
(
)
;
}
}
expireMigration
(
)
{
this
.
store
.
dispatch
(
ac
.
SetPref
(
"
migrationExpired
"
true
)
)
;
}
observe
(
)
{
this
.
expireMigration
(
)
;
this
.
store
.
dispatch
(
{
type
:
at
.
MIGRATION_COMPLETED
}
)
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
PREFS_INITIAL_VALUES
:
this
.
expireIfNecessary
(
action
.
data
.
migrationExpired
)
;
break
;
case
at
.
MIGRATION_START
:
MigrationUtils
.
showMigrationWizard
(
action
.
_target
.
browser
.
ownerGlobal
[
MigrationUtils
.
MIGRATION_ENTRYPOINT_NEWTAB
]
)
;
break
;
case
at
.
MIGRATION_CANCEL
:
this
.
expireMigration
(
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
}
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
ManualMigration
"
]
;
