"
use
strict
"
;
const
{
JSONFile
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
const
{
PromiseUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Downloader
"
"
resource
:
/
/
services
-
settings
/
Attachments
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
KintoHttpClient
"
"
resource
:
/
/
services
-
common
/
kinto
-
http
-
client
.
js
"
)
;
const
RS_SERVER_PREF
=
"
services
.
settings
.
server
"
;
const
RS_MAIN_BUCKET
=
"
main
"
;
const
RS_COLLECTION
=
"
ms
-
images
"
;
const
RS_DOWNLOAD_MAX_RETRIES
=
2
;
const
REMOTE_IMAGES_PATH
=
PathUtils
.
join
(
PathUtils
.
localProfileDir
"
settings
"
RS_MAIN_BUCKET
RS_COLLECTION
)
;
const
REMOTE_IMAGES_DB_PATH
=
PathUtils
.
join
(
REMOTE_IMAGES_PATH
"
db
.
json
"
)
;
const
CLEANUP_FINISHED_TOPIC
=
"
remote
-
images
:
cleanup
-
finished
"
;
const
IMAGE_EXPIRY_DURATION
=
30
*
24
*
60
*
60
;
class
_RemoteImages
{
#
dbPromise
;
constructor
(
)
{
this
.
#
dbPromise
=
null
;
Services
.
obs
.
addObserver
(
(
)
=
>
this
.
#
cleanup
(
)
"
remote
-
settings
:
changes
-
poll
-
end
"
)
;
this
.
withDb
(
(
)
=
>
{
}
)
;
}
async
#
loadDB
(
)
{
let
db
;
if
(
!
(
await
IOUtils
.
exists
(
REMOTE_IMAGES_DB_PATH
)
)
)
{
db
=
await
this
.
#
migrate
(
)
;
}
else
{
db
=
new
JSONFile
(
{
path
:
REMOTE_IMAGES_DB_PATH
}
)
;
await
db
.
load
(
)
;
}
return
db
;
}
reset
(
)
{
return
this
.
withDb
(
async
db
=
>
{
await
db
.
_save
(
)
;
this
.
#
dbPromise
=
null
;
}
)
;
}
async
withDb
(
fn
)
{
const
dbPromise
=
this
.
#
dbPromise
?
?
this
.
#
loadDB
(
)
;
const
{
resolve
promise
}
=
PromiseUtils
.
defer
(
)
;
this
.
#
dbPromise
=
promise
;
const
db
=
await
dbPromise
;
try
{
return
await
fn
(
db
)
;
}
finally
{
resolve
(
db
)
;
}
}
async
patchMessage
(
message
replaceWith
=
"
imageURL
"
)
{
if
(
!
!
message
&
&
!
!
message
.
imageId
)
{
const
{
imageId
}
=
message
;
const
blobURL
=
await
this
.
load
(
imageId
)
;
delete
message
.
imageId
;
message
[
replaceWith
]
=
blobURL
;
return
(
)
=
>
this
.
unload
(
blobURL
)
;
}
return
null
;
}
load
(
imageId
)
{
return
this
.
withDb
(
async
db
=
>
{
const
recordId
=
this
.
#
getRecordId
(
imageId
)
;
let
blob
;
if
(
db
.
data
.
images
[
recordId
]
)
{
try
{
blob
=
await
this
.
#
readFromDisk
(
db
recordId
)
;
}
catch
(
e
)
{
if
(
!
(
e
instanceof
Components
.
Exception
&
&
e
.
name
=
=
=
"
NS_ERROR_FILE_NOT_FOUND
"
)
)
{
throw
e
;
}
}
}
if
(
typeof
blob
=
=
=
"
undefined
"
)
{
blob
=
await
this
.
#
download
(
db
recordId
)
;
}
return
URL
.
createObjectURL
(
blob
)
;
}
)
;
}
unload
(
url
)
{
URL
.
revokeObjectURL
(
url
)
;
}
#
cleanup
(
)
{
return
this
.
withDb
(
async
db
=
>
{
const
now
=
Date
.
now
(
)
;
await
Promise
.
all
(
Object
.
values
(
db
.
data
.
images
)
.
filter
(
entry
=
>
now
-
entry
.
lastLoaded
>
=
IMAGE_EXPIRY_DURATION
)
.
map
(
entry
=
>
{
const
path
=
PathUtils
.
join
(
REMOTE_IMAGES_PATH
entry
.
recordId
)
;
delete
db
.
data
.
images
[
entry
.
recordId
]
;
return
IOUtils
.
remove
(
path
)
.
catch
(
e
=
>
{
Cu
.
reportError
(
Could
not
remove
remote
image
{
entry
.
recordId
}
:
{
e
}
)
;
}
)
;
}
)
)
;
db
.
saveSoon
(
)
;
Services
.
obs
.
notifyObservers
(
null
CLEANUP_FINISHED_TOPIC
)
;
}
)
;
}
#
getRecordId
(
imageId
)
{
const
idx
=
imageId
.
lastIndexOf
(
"
.
"
)
;
if
(
idx
=
=
=
-
1
)
{
return
imageId
;
}
return
imageId
.
substring
(
0
idx
)
;
}
async
#
readFromDisk
(
db
recordId
)
{
const
path
=
PathUtils
.
join
(
REMOTE_IMAGES_PATH
recordId
)
;
try
{
const
blob
=
await
File
.
createFromFileName
(
path
{
type
:
db
.
data
.
images
[
recordId
]
.
mimetype
}
)
;
db
.
data
.
images
[
recordId
]
.
lastLoaded
=
Date
.
now
(
)
;
return
blob
;
}
catch
(
e
)
{
delete
db
.
data
.
images
[
recordId
]
;
throw
e
;
}
finally
{
db
.
saveSoon
(
)
;
}
}
async
#
download
(
db
recordId
)
{
const
client
=
new
KintoHttpClient
(
Services
.
prefs
.
getStringPref
(
RS_SERVER_PREF
)
)
;
const
record
=
await
client
.
bucket
(
RS_MAIN_BUCKET
)
.
collection
(
RS_COLLECTION
)
.
getRecord
(
recordId
)
;
const
downloader
=
new
Downloader
(
RS_MAIN_BUCKET
RS_COLLECTION
)
;
const
arrayBuffer
=
await
downloader
.
downloadAsBytes
(
record
.
data
{
retries
:
RS_DOWNLOAD_MAX_RETRIES
}
)
;
const
path
=
PathUtils
.
join
(
REMOTE_IMAGES_PATH
recordId
)
;
IOUtils
.
write
(
path
new
Uint8Array
(
arrayBuffer
)
)
;
db
.
data
.
images
[
recordId
]
=
{
recordId
mimetype
:
record
.
data
.
attachment
.
mimetype
hash
:
record
.
data
.
attachment
.
hash
lastLoaded
:
Date
.
now
(
)
}
;
db
.
saveSoon
(
)
;
return
new
Blob
(
[
arrayBuffer
]
{
type
:
record
.
data
.
attachment
.
mimetype
}
)
;
}
async
#
migrate
(
)
{
let
children
;
try
{
children
=
await
IOUtils
.
getChildren
(
REMOTE_IMAGES_PATH
)
;
await
Promise
.
all
(
children
.
map
(
async
path
=
>
{
try
{
await
IOUtils
.
remove
(
path
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
RemoteImages
could
not
delete
{
path
}
:
{
e
}
)
;
}
}
)
)
;
}
catch
(
e
)
{
if
(
!
(
DOMException
.
isInstance
(
e
)
&
&
e
.
name
=
=
=
"
NotFoundError
"
)
)
{
throw
e
;
}
}
await
IOUtils
.
makeDirectory
(
REMOTE_IMAGES_PATH
)
;
const
db
=
new
JSONFile
(
{
path
:
REMOTE_IMAGES_DB_PATH
}
)
;
db
.
data
=
{
version
:
1
images
:
{
}
}
;
db
.
saveSoon
(
)
;
return
db
;
}
}
const
RemoteImages
=
new
_RemoteImages
(
)
;
const
EXPORTED_SYMBOLS
=
[
"
RemoteImages
"
"
REMOTE_IMAGES_PATH
"
"
REMOTE_IMAGES_DB_PATH
"
]
;
