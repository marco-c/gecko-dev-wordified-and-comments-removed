"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
this
.
ASRouterTriggerListeners
=
new
Map
(
[
[
"
openURL
"
{
_initialized
:
false
_triggerHandler
:
null
_hosts
:
null
init
(
triggerHandler
hosts
=
[
]
)
{
if
(
!
this
.
_initialized
)
{
this
.
onLocationChange
=
this
.
onLocationChange
.
bind
(
this
)
;
Services
.
ww
.
registerNotification
(
this
)
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
win
.
closed
|
|
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
continue
;
}
win
.
gBrowser
.
addTabsProgressListener
(
this
)
;
}
this
.
_initialized
=
true
;
}
this
.
_triggerHandler
=
triggerHandler
;
if
(
this
.
_hosts
)
{
hosts
.
forEach
(
h
=
>
this
.
_hosts
.
add
(
h
)
)
;
}
else
{
this
.
_hosts
=
new
Set
(
hosts
)
;
}
}
uninit
(
)
{
if
(
this
.
_initialized
)
{
Services
.
ww
.
unregisterNotification
(
this
)
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
win
.
closed
|
|
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
continue
;
}
win
.
gBrowser
.
removeTabsProgressListener
(
this
)
;
}
this
.
_initialized
=
false
;
this
.
_triggerHandler
=
null
;
this
.
_hosts
=
null
;
}
}
onLocationChange
(
aBrowser
aWebProgress
aRequest
aLocationURI
aFlags
)
{
const
location
=
aLocationURI
?
aLocationURI
.
spec
:
"
"
;
if
(
location
&
&
aWebProgress
.
isTopLevel
)
{
try
{
const
host
=
(
new
URL
(
location
)
)
.
hostname
;
if
(
this
.
_hosts
.
has
(
host
)
)
{
this
.
_triggerHandler
(
aBrowser
.
messageManager
{
id
:
"
openURL
"
param
:
host
}
)
;
}
}
catch
(
e
)
{
}
}
}
observe
(
win
topic
data
)
{
let
onLoad
;
switch
(
topic
)
{
case
"
domwindowopened
"
:
if
(
!
(
win
instanceof
Ci
.
nsIDOMWindow
)
|
|
win
.
closed
|
|
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
break
;
}
onLoad
=
(
)
=
>
{
if
(
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
=
=
=
"
navigator
:
browser
"
)
{
win
.
gBrowser
.
addTabsProgressListener
(
this
)
;
}
}
;
win
.
addEventListener
(
"
load
"
onLoad
{
once
:
true
}
)
;
break
;
case
"
domwindowclosed
"
:
if
(
(
win
instanceof
Ci
.
nsIDOMWindow
)
&
&
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
=
=
=
"
navigator
:
browser
"
)
{
win
.
gBrowser
.
removeTabsProgressListener
(
this
)
;
}
break
;
}
}
}
]
]
)
;
const
EXPORTED_SYMBOLS
=
[
"
ASRouterTriggerListeners
"
]
;
