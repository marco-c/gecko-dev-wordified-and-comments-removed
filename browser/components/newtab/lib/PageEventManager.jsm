"
use
strict
"
;
class
PageEventManager
{
_listeners
=
new
Map
(
)
;
constructor
(
doc
)
{
this
.
doc
=
doc
;
}
on
(
params
callback
)
{
if
(
this
.
_listeners
.
has
(
params
)
)
{
return
;
}
const
{
type
selectors
options
=
{
}
}
=
params
;
const
controller
=
new
AbortController
(
)
;
const
opt
=
{
capture
:
!
!
options
.
capture
passive
:
!
options
.
preventDefault
signal
:
controller
.
signal
}
;
const
targets
=
this
.
doc
.
querySelectorAll
(
selectors
)
;
for
(
const
target
of
targets
)
{
target
.
addEventListener
(
type
callback
opt
)
;
}
this
.
_listeners
.
set
(
params
controller
)
;
}
off
(
params
)
{
const
controller
=
this
.
_listeners
.
get
(
params
)
;
if
(
!
controller
)
{
return
;
}
controller
.
abort
(
)
;
this
.
_listeners
.
delete
(
params
)
;
}
once
(
params
callback
)
{
const
wrappedCallback
=
(
.
.
.
args
)
=
>
{
this
.
off
(
params
)
;
callback
(
.
.
.
args
)
;
}
;
this
.
on
(
params
wrappedCallback
)
;
}
clear
(
)
{
for
(
const
controller
of
this
.
_listeners
.
values
(
)
)
{
controller
.
abort
(
)
;
}
this
.
_listeners
.
clear
(
)
;
}
}
const
EXPORTED_SYMBOLS
=
[
"
PageEventManager
"
]
;
