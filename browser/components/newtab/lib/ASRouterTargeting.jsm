const
{
FilterExpressions
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
FilterExpressions
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ASRouterPreferences
"
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterPreferences
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NewTabUtils
"
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ProfileAge
"
"
resource
:
/
/
gre
/
modules
/
ProfileAge
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ShellService
"
"
resource
:
/
/
/
modules
/
ShellService
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryEnvironment
"
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AttributionCode
"
"
resource
:
/
/
/
modules
/
AttributionCode
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
UpdateManager
"
"
mozilla
.
org
/
updates
/
update
-
manager
;
1
"
"
nsIUpdateManager
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
TrackingDBService
"
"
mozilla
.
org
/
tracking
-
db
-
service
;
1
"
"
nsITrackingDBService
"
)
;
const
FXA_USERNAME_PREF
=
"
services
.
sync
.
username
"
;
const
FXA_ENABLED_PREF
=
"
identity
.
fxaccounts
.
enabled
"
;
const
SEARCH_REGION_PREF
=
"
browser
.
search
.
region
"
;
const
MOZ_JEXL_FILEPATH
=
"
mozjexl
"
;
const
{
activityStreamProvider
:
asProvider
}
=
NewTabUtils
;
const
FRECENT_SITES_UPDATE_INTERVAL
=
6
*
60
*
60
*
1000
;
const
FRECENT_SITES_IGNORE_BLOCKED
=
false
;
const
FRECENT_SITES_NUM_ITEMS
=
25
;
const
FRECENT_SITES_MIN_FRECENCY
=
100
;
function
CachedTargetingGetter
(
property
options
=
null
updateInterval
=
FRECENT_SITES_UPDATE_INTERVAL
)
{
return
{
_lastUpdated
:
0
_value
:
null
expire
(
)
{
this
.
_lastUpdated
=
0
;
this
.
_value
=
null
;
}
async
get
(
)
{
const
now
=
Date
.
now
(
)
;
if
(
now
-
this
.
_lastUpdated
>
=
updateInterval
)
{
this
.
_value
=
await
asProvider
[
property
]
(
options
)
;
this
.
_lastUpdated
=
now
;
}
return
this
.
_value
;
}
}
;
}
function
CheckBrowserNeedsUpdate
(
updateInterval
=
FRECENT_SITES_UPDATE_INTERVAL
)
{
const
UpdateChecker
=
Cc
[
"
mozilla
.
org
/
updates
/
update
-
checker
;
1
"
]
;
const
checker
=
{
_lastUpdated
:
0
_value
:
null
setUp
(
value
)
{
this
.
_lastUpdated
=
Date
.
now
(
)
;
this
.
_value
=
value
;
}
expire
(
)
{
this
.
_lastUpdated
=
0
;
this
.
_value
=
null
;
}
get
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
now
=
Date
.
now
(
)
;
const
updateServiceListener
=
{
onCheckComplete
(
request
updates
)
{
checker
.
_value
=
updates
.
length
>
0
;
resolve
(
checker
.
_value
)
;
}
onError
(
request
update
)
{
reject
(
request
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIUpdateCheckListener
"
]
)
}
;
if
(
UpdateChecker
&
&
now
-
this
.
_lastUpdated
>
=
updateInterval
)
{
const
checkerInstance
=
UpdateChecker
.
createInstance
(
Ci
.
nsIUpdateChecker
)
;
checkerInstance
.
checkForUpdates
(
updateServiceListener
true
)
;
this
.
_lastUpdated
=
now
;
}
else
{
resolve
(
this
.
_value
)
;
}
}
)
;
}
}
;
return
checker
;
}
const
QueryCache
=
{
expireAll
(
)
{
Object
.
keys
(
this
.
queries
)
.
forEach
(
query
=
>
{
this
.
queries
[
query
]
.
expire
(
)
;
}
)
;
}
queries
:
{
TopFrecentSites
:
new
CachedTargetingGetter
(
"
getTopFrecentSites
"
{
ignoreBlocked
:
FRECENT_SITES_IGNORE_BLOCKED
numItems
:
FRECENT_SITES_NUM_ITEMS
topsiteFrecency
:
FRECENT_SITES_MIN_FRECENCY
onePerDomain
:
true
includeFavicon
:
false
}
)
TotalBookmarksCount
:
new
CachedTargetingGetter
(
"
getTotalBookmarksCount
"
)
CheckBrowserNeedsUpdate
:
new
CheckBrowserNeedsUpdate
(
)
}
}
;
function
sortMessagesByWeightedRank
(
messages
)
{
return
messages
.
map
(
message
=
>
(
{
message
rank
:
Math
.
pow
(
Math
.
random
(
)
1
/
message
.
weight
)
}
)
)
.
sort
(
(
a
b
)
=
>
b
.
rank
-
a
.
rank
)
.
map
(
(
{
message
}
)
=
>
message
)
;
}
function
sortMessagesByTargeting
(
messages
)
{
return
messages
.
sort
(
(
a
b
)
=
>
{
if
(
a
.
targeting
&
&
!
b
.
targeting
)
{
return
-
1
;
}
if
(
!
a
.
targeting
&
&
b
.
targeting
)
{
return
1
;
}
return
0
;
}
)
;
}
function
sortMessagesByPriority
(
messages
)
{
return
messages
.
sort
(
(
a
b
)
=
>
{
if
(
isNaN
(
a
.
priority
)
&
&
isNaN
(
b
.
priority
)
)
{
return
0
;
}
if
(
!
isNaN
(
a
.
priority
)
&
&
isNaN
(
b
.
priority
)
)
{
return
-
1
;
}
if
(
isNaN
(
a
.
priority
)
&
&
!
isNaN
(
b
.
priority
)
)
{
return
1
;
}
if
(
a
.
priority
>
b
.
priority
)
{
return
-
1
;
}
if
(
a
.
priority
<
b
.
priority
)
{
return
1
;
}
return
0
;
}
)
;
}
const
TargetingGetters
=
{
get
locale
(
)
{
return
Services
.
locale
.
appLocaleAsLangTag
;
}
get
localeLanguageCode
(
)
{
return
(
Services
.
locale
.
appLocaleAsLangTag
&
&
Services
.
locale
.
appLocaleAsLangTag
.
substr
(
0
2
)
)
;
}
get
browserSettings
(
)
{
const
{
settings
}
=
TelemetryEnvironment
.
currentEnvironment
;
return
{
attribution
:
settings
.
attribution
update
:
settings
.
update
}
;
}
get
attributionData
(
)
{
return
AttributionCode
.
getCachedAttributionData
(
)
;
}
get
currentDate
(
)
{
return
new
Date
(
)
;
}
get
profileAgeCreated
(
)
{
return
ProfileAge
(
)
.
then
(
times
=
>
times
.
created
)
;
}
get
profileAgeReset
(
)
{
return
ProfileAge
(
)
.
then
(
times
=
>
times
.
reset
)
;
}
get
usesFirefoxSync
(
)
{
return
Services
.
prefs
.
prefHasUserValue
(
FXA_USERNAME_PREF
)
;
}
get
isFxAEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
FXA_ENABLED_PREF
true
)
;
}
get
sync
(
)
{
return
{
desktopDevices
:
Services
.
prefs
.
getIntPref
(
"
services
.
sync
.
clients
.
devices
.
desktop
"
0
)
mobileDevices
:
Services
.
prefs
.
getIntPref
(
"
services
.
sync
.
clients
.
devices
.
mobile
"
0
)
totalDevices
:
Services
.
prefs
.
getIntPref
(
"
services
.
sync
.
numClients
"
0
)
}
;
}
get
xpinstallEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
xpinstall
.
enabled
"
true
)
;
}
get
addonsInfo
(
)
{
return
AddonManager
.
getActiveAddons
(
[
"
extension
"
"
service
"
]
)
.
then
(
(
{
addons
fullData
}
)
=
>
{
const
info
=
{
}
;
for
(
const
addon
of
addons
)
{
info
[
addon
.
id
]
=
{
version
:
addon
.
version
type
:
addon
.
type
isSystem
:
addon
.
isSystem
isWebExtension
:
addon
.
isWebExtension
}
;
if
(
fullData
)
{
Object
.
assign
(
info
[
addon
.
id
]
{
name
:
addon
.
name
userDisabled
:
addon
.
userDisabled
installDate
:
addon
.
installDate
}
)
;
}
}
return
{
addons
:
info
isFullData
:
fullData
}
;
}
)
;
}
get
searchEngines
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
search
.
getVisibleEngines
(
)
.
then
(
engines
=
>
{
resolve
(
{
current
:
Services
.
search
.
defaultEngine
.
identifier
installed
:
engines
.
map
(
engine
=
>
engine
.
identifier
)
.
filter
(
engine
=
>
engine
)
}
)
;
}
)
.
catch
(
(
)
=
>
resolve
(
{
installed
:
[
]
current
:
"
"
}
)
)
;
}
)
;
}
get
isDefaultBrowser
(
)
{
try
{
return
ShellService
.
isDefaultBrowser
(
)
;
}
catch
(
e
)
{
}
return
null
;
}
get
devToolsOpenedCount
(
)
{
return
Services
.
prefs
.
getIntPref
(
"
devtools
.
selfxss
.
count
"
)
;
}
get
topFrecentSites
(
)
{
return
QueryCache
.
queries
.
TopFrecentSites
.
get
(
)
.
then
(
sites
=
>
sites
.
map
(
site
=
>
(
{
url
:
site
.
url
host
:
new
URL
(
site
.
url
)
.
hostname
frecency
:
site
.
frecency
lastVisitDate
:
site
.
lastVisitDate
}
)
)
)
;
}
get
pinnedSites
(
)
{
return
NewTabUtils
.
pinnedLinks
.
links
.
map
(
site
=
>
site
?
{
url
:
site
.
url
host
:
new
URL
(
site
.
url
)
.
hostname
searchTopSite
:
site
.
searchTopSite
}
:
{
}
)
;
}
get
providerCohorts
(
)
{
return
ASRouterPreferences
.
providers
.
reduce
(
(
prev
current
)
=
>
{
prev
[
current
.
id
]
=
current
.
cohort
|
|
"
"
;
return
prev
;
}
{
}
)
;
}
get
totalBookmarksCount
(
)
{
return
QueryCache
.
queries
.
TotalBookmarksCount
.
get
(
)
;
}
get
firefoxVersion
(
)
{
return
parseInt
(
AppConstants
.
MOZ_APP_VERSION
.
match
(
/
\
d
+
/
)
10
)
;
}
get
region
(
)
{
return
Services
.
prefs
.
getStringPref
(
SEARCH_REGION_PREF
"
"
)
;
}
get
needsUpdate
(
)
{
return
QueryCache
.
queries
.
CheckBrowserNeedsUpdate
.
get
(
)
;
}
get
hasPinnedTabs
(
)
{
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
win
.
closed
|
|
!
win
.
ownerGlobal
.
gBrowser
)
{
continue
;
}
if
(
win
.
ownerGlobal
.
gBrowser
.
visibleTabs
.
filter
(
t
=
>
t
.
pinned
)
.
length
)
{
return
true
;
}
}
return
false
;
}
get
hasAccessedFxAPanel
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
identity
.
fxaccounts
.
toolbar
.
accessed
"
true
)
;
}
get
isWhatsNewPanelEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
browser
.
messaging
-
system
.
whatsNewPanel
.
enabled
"
false
)
;
}
get
earliestFirefoxVersion
(
)
{
if
(
UpdateManager
.
updateCount
)
{
const
earliestFirefoxVersion
=
UpdateManager
.
getUpdateAt
(
UpdateManager
.
updateCount
-
1
)
.
previousAppVersion
;
return
parseInt
(
earliestFirefoxVersion
.
match
(
/
\
d
+
/
)
10
)
;
}
return
null
;
}
get
isFxABadgeEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
browser
.
messaging
-
system
.
fxatoolbarbadge
.
enabled
"
false
)
;
}
get
totalBlockedCount
(
)
{
return
TrackingDBService
.
sumAllEvents
(
)
;
}
}
;
this
.
ASRouterTargeting
=
{
Environment
:
TargetingGetters
ERROR_TYPES
:
{
MALFORMED_EXPRESSION
:
"
MALFORMED_EXPRESSION
"
OTHER_ERROR
:
"
OTHER_ERROR
"
}
combineContexts
(
contextA
=
{
}
contextB
=
{
}
)
{
const
sameProperty
=
Object
.
keys
(
contextA
)
.
find
(
p
=
>
Object
.
keys
(
contextB
)
.
includes
(
p
)
)
;
if
(
sameProperty
)
{
Cu
.
reportError
(
Property
{
sameProperty
}
exists
in
both
contexts
and
is
overwritten
.
)
;
}
const
context
=
{
}
;
Object
.
defineProperties
(
context
Object
.
getOwnPropertyDescriptors
(
contextA
)
)
;
Object
.
defineProperties
(
context
Object
.
getOwnPropertyDescriptors
(
contextB
)
)
;
return
context
;
}
isMatch
(
filterExpression
customContext
)
{
return
FilterExpressions
.
eval
(
filterExpression
this
.
combineContexts
(
this
.
Environment
customContext
)
)
;
}
isTriggerMatch
(
trigger
=
{
}
candidateMessageTrigger
=
{
}
)
{
if
(
trigger
.
id
!
=
=
candidateMessageTrigger
.
id
)
{
return
false
;
}
else
if
(
!
candidateMessageTrigger
.
params
&
&
!
candidateMessageTrigger
.
patterns
)
{
return
true
;
}
if
(
!
trigger
.
param
)
{
return
false
;
}
return
(
(
candidateMessageTrigger
.
params
&
&
candidateMessageTrigger
.
params
.
includes
(
trigger
.
param
.
host
)
)
|
|
(
candidateMessageTrigger
.
patterns
&
&
new
MatchPatternSet
(
candidateMessageTrigger
.
patterns
)
.
matches
(
trigger
.
param
.
url
)
)
)
;
}
async
checkMessageTargeting
(
message
context
onError
)
{
if
(
!
message
.
targeting
)
{
return
true
;
}
let
result
;
try
{
result
=
await
this
.
isMatch
(
message
.
targeting
context
)
;
}
catch
(
error
)
{
Cu
.
reportError
(
error
)
;
if
(
onError
)
{
const
type
=
error
.
fileName
.
includes
(
MOZ_JEXL_FILEPATH
)
?
this
.
ERROR_TYPES
.
MALFORMED_EXPRESSION
:
this
.
ERROR_TYPES
.
OTHER_ERROR
;
onError
(
type
error
message
)
;
}
result
=
false
;
}
return
result
;
}
_getSortedMessages
(
messages
)
{
const
weightSortedMessages
=
sortMessagesByWeightedRank
(
[
.
.
.
messages
]
)
;
const
sortedMessages
=
sortMessagesByTargeting
(
weightSortedMessages
)
;
return
sortMessagesByPriority
(
sortedMessages
)
;
}
_getCombinedContext
(
trigger
context
)
{
const
triggerContext
=
trigger
?
trigger
.
context
:
{
}
;
return
this
.
combineContexts
(
context
triggerContext
)
;
}
_isMessageMatch
(
message
trigger
context
onError
)
{
return
(
message
&
&
(
trigger
?
this
.
isTriggerMatch
(
trigger
message
.
trigger
)
:
!
message
.
trigger
)
&
&
this
.
checkMessageTargeting
(
message
context
onError
)
)
;
}
async
findMatchingMessage
(
{
messages
trigger
context
onError
}
)
{
const
sortedMessages
=
this
.
_getSortedMessages
(
messages
)
;
const
combinedContext
=
this
.
_getCombinedContext
(
trigger
context
)
;
for
(
const
candidate
of
sortedMessages
)
{
if
(
await
this
.
_isMessageMatch
(
candidate
trigger
combinedContext
onError
)
)
{
return
candidate
;
}
}
return
null
;
}
async
findAllMatchingMessages
(
{
messages
trigger
context
onError
}
)
{
const
sortedMessages
=
this
.
_getSortedMessages
(
messages
)
;
const
combinedContext
=
this
.
_getCombinedContext
(
trigger
context
)
;
const
matchingMessages
=
[
]
;
for
(
const
candidate
of
sortedMessages
)
{
if
(
await
this
.
_isMessageMatch
(
candidate
trigger
combinedContext
onError
)
)
{
matchingMessages
.
push
(
candidate
)
;
}
}
return
matchingMessages
;
}
}
;
this
.
QueryCache
=
QueryCache
;
this
.
CachedTargetingGetter
=
CachedTargetingGetter
;
this
.
EXPORTED_SYMBOLS
=
[
"
ASRouterTargeting
"
"
QueryCache
"
"
CachedTargetingGetter
"
]
;
