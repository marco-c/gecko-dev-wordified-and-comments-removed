"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
const
ACTIVITY_STREAM_PREF_BRANCH
=
"
browser
.
newtabpage
.
activity
-
stream
.
"
;
this
.
Prefs
=
class
Prefs
extends
Preferences
{
constructor
(
branch
=
ACTIVITY_STREAM_PREF_BRANCH
)
{
super
(
{
branch
}
)
;
this
.
_branchObservers
=
new
Map
(
)
;
}
ignoreBranch
(
listener
)
{
const
observer
=
this
.
_branchObservers
.
get
(
listener
)
;
this
.
_prefBranch
.
removeObserver
(
"
"
observer
)
;
this
.
_branchObservers
.
delete
(
listener
)
;
}
observeBranch
(
listener
)
{
const
observer
=
(
subject
topic
pref
)
=
>
{
listener
.
onPrefChanged
(
pref
this
.
get
(
pref
)
)
;
}
;
this
.
_prefBranch
.
addObserver
(
"
"
observer
)
;
this
.
_branchObservers
.
set
(
listener
observer
)
;
}
}
;
this
.
DefaultPrefs
=
class
DefaultPrefs
extends
Preferences
{
constructor
(
config
branch
=
ACTIVITY_STREAM_PREF_BRANCH
)
{
super
(
{
branch
defaultBranch
:
true
}
)
;
this
.
_config
=
config
;
}
init
(
)
{
const
IS_UNOFFICIAL_BUILD
=
!
AppConstants
.
MOZILLA_OFFICIAL
;
for
(
const
pref
of
this
.
_config
.
keys
(
)
)
{
try
{
if
(
this
.
get
(
pref
)
!
=
=
undefined
)
{
continue
;
}
}
catch
(
ex
)
{
}
const
prefConfig
=
this
.
_config
.
get
(
pref
)
;
let
value
;
if
(
IS_UNOFFICIAL_BUILD
&
&
"
value_local_dev
"
in
prefConfig
)
{
value
=
prefConfig
.
value_local_dev
;
}
else
{
value
=
prefConfig
.
value
;
}
try
{
this
.
set
(
pref
value
)
;
}
catch
(
ex
)
{
}
}
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
DefaultPrefs
"
"
Prefs
"
]
;
