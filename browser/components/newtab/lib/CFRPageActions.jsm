"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
POPUP_NOTIFICATION_ID
=
"
contextual
-
feature
-
recommendation
"
;
const
ANIMATION_BUTTON_ID
=
"
cfr
-
notification
-
footer
-
animation
-
button
"
;
const
ANIMATION_LABEL_ID
=
"
cfr
-
notification
-
footer
-
animation
-
label
"
;
const
SUMO_BASE_URL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
;
const
ADDONS_API_URL
=
"
https
:
/
/
services
.
addons
.
mozilla
.
org
/
api
/
v3
/
addons
/
addon
"
;
const
ANIMATIONS_ENABLED_PREF
=
"
toolkit
.
cosmeticAnimations
.
enabled
"
;
const
DELAY_BEFORE_EXPAND_MS
=
1000
;
const
CATEGORY_ICONS
=
{
cfrAddons
:
"
webextensions
-
icon
"
cfrFeatures
:
"
recommendations
-
icon
"
}
;
let
RecommendationMap
=
new
WeakMap
(
)
;
let
PageActionMap
=
new
WeakMap
(
)
;
class
PageAction
{
constructor
(
win
dispatchToASRouter
)
{
this
.
window
=
win
;
this
.
urlbar
=
win
.
document
.
getElementById
(
"
urlbar
"
)
;
this
.
container
=
win
.
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
"
)
;
this
.
button
=
win
.
document
.
getElementById
(
"
cfr
-
button
"
)
;
this
.
label
=
win
.
document
.
getElementById
(
"
cfr
-
label
"
)
;
this
.
_dispatchToASRouter
=
dispatchToASRouter
;
this
.
_popupStateChange
=
this
.
_popupStateChange
.
bind
(
this
)
;
this
.
_collapse
=
this
.
_collapse
.
bind
(
this
)
;
this
.
_showPopupOnClick
=
this
.
_showPopupOnClick
.
bind
(
this
)
;
this
.
dispatchUserAction
=
this
.
dispatchUserAction
.
bind
(
this
)
;
this
.
_l10n
=
new
DOMLocalization
(
[
"
browser
/
newtab
/
asrouter
.
ftl
"
"
browser
/
branding
/
brandings
.
ftl
"
"
browser
/
branding
/
sync
-
brand
.
ftl
"
"
branding
/
brand
.
ftl
"
]
)
;
this
.
stateTransitionTimeoutIDs
=
[
]
;
XPCOMUtils
.
defineLazyGetter
(
this
"
isDarkTheme
"
(
)
=
>
{
try
{
return
this
.
window
.
document
.
documentElement
.
hasAttribute
(
"
lwt
-
toolbar
-
field
-
brighttext
"
)
;
}
catch
(
e
)
{
return
false
;
}
}
)
;
}
addImpression
(
recommendation
)
{
this
.
_dispatchImpression
(
recommendation
)
;
if
(
!
!
recommendation
.
id
&
&
!
!
recommendation
.
content
.
bucket_id
)
{
this
.
_sendTelemetry
(
{
message_id
:
recommendation
.
id
bucket_id
:
recommendation
.
content
.
bucket_id
event
:
"
IMPRESSION
"
}
)
;
}
}
async
showAddressBarNotifier
(
recommendation
shouldExpand
=
false
)
{
this
.
container
.
hidden
=
false
;
this
.
label
.
value
=
await
this
.
getStrings
(
recommendation
.
content
.
notification_text
)
;
this
.
button
.
setAttribute
(
"
tooltiptext
"
await
this
.
getStrings
(
recommendation
.
content
.
notification_text
)
)
;
this
.
button
.
setAttribute
(
"
data
-
cfr
-
icon
"
CATEGORY_ICONS
[
recommendation
.
content
.
category
]
)
;
let
[
{
width
}
]
=
await
this
.
window
.
promiseDocumentFlushed
(
(
)
=
>
this
.
label
.
getClientRects
(
)
)
;
this
.
urlbar
.
style
.
setProperty
(
"
-
-
cfr
-
label
-
width
"
{
width
}
px
)
;
this
.
container
.
addEventListener
(
"
click
"
this
.
_showPopupOnClick
)
;
this
.
urlbar
.
addEventListener
(
"
focus
"
this
.
_collapse
)
;
if
(
shouldExpand
)
{
this
.
_clearScheduledStateChanges
(
)
;
this
.
_expand
(
DELAY_BEFORE_EXPAND_MS
)
;
this
.
addImpression
(
recommendation
)
;
}
}
hideAddressBarNotifier
(
)
{
this
.
container
.
hidden
=
true
;
this
.
_clearScheduledStateChanges
(
)
;
this
.
urlbar
.
removeAttribute
(
"
cfr
-
recommendation
-
state
"
)
;
this
.
container
.
removeEventListener
(
"
click
"
this
.
_showPopupOnClick
)
;
this
.
urlbar
.
removeEventListener
(
"
focus
"
this
.
_collapse
)
;
if
(
this
.
currentNotification
)
{
this
.
window
.
PopupNotifications
.
remove
(
this
.
currentNotification
)
;
this
.
currentNotification
=
null
;
}
}
_expand
(
delay
)
{
if
(
delay
>
0
)
{
this
.
stateTransitionTimeoutIDs
.
push
(
this
.
window
.
setTimeout
(
(
)
=
>
{
this
.
urlbar
.
setAttribute
(
"
cfr
-
recommendation
-
state
"
"
expanded
"
)
;
}
delay
)
)
;
}
else
{
this
.
_clearScheduledStateChanges
(
)
;
this
.
urlbar
.
setAttribute
(
"
cfr
-
recommendation
-
state
"
"
expanded
"
)
;
}
}
_collapse
(
delay
)
{
if
(
delay
>
0
)
{
this
.
stateTransitionTimeoutIDs
.
push
(
this
.
window
.
setTimeout
(
(
)
=
>
{
if
(
this
.
urlbar
.
getAttribute
(
"
cfr
-
recommendation
-
state
"
)
=
=
=
"
expanded
"
)
{
this
.
urlbar
.
setAttribute
(
"
cfr
-
recommendation
-
state
"
"
collapsed
"
)
;
}
}
delay
)
)
;
}
else
{
this
.
_clearScheduledStateChanges
(
)
;
if
(
this
.
urlbar
.
getAttribute
(
"
cfr
-
recommendation
-
state
"
)
=
=
=
"
expanded
"
)
{
this
.
urlbar
.
setAttribute
(
"
cfr
-
recommendation
-
state
"
"
collapsed
"
)
;
}
}
if
(
this
.
onAnimationButtonClick
)
{
this
.
window
.
document
.
getElementById
(
ANIMATION_BUTTON_ID
)
.
removeEventListener
(
"
click
"
this
.
onAnimationButtonClick
)
;
delete
this
.
onAnimationButtonClick
;
}
}
_clearScheduledStateChanges
(
)
{
while
(
this
.
stateTransitionTimeoutIDs
.
length
>
0
)
{
this
.
window
.
clearTimeout
(
this
.
stateTransitionTimeoutIDs
.
pop
(
)
)
;
}
}
_popupStateChange
(
state
)
{
if
(
[
"
dismissed
"
"
removed
"
]
.
includes
(
state
)
)
{
this
.
_collapse
(
)
;
if
(
this
.
currentNotification
)
{
this
.
window
.
PopupNotifications
.
remove
(
this
.
currentNotification
)
;
this
.
currentNotification
=
null
;
}
}
}
dispatchUserAction
(
action
)
{
this
.
_dispatchToASRouter
(
{
type
:
"
USER_ACTION
"
data
:
action
}
{
browser
:
this
.
window
.
gBrowser
.
selectedBrowser
}
)
;
}
_dispatchImpression
(
message
)
{
this
.
_dispatchToASRouter
(
{
type
:
"
IMPRESSION
"
data
:
message
}
)
;
}
_sendTelemetry
(
ping
)
{
this
.
_dispatchToASRouter
(
{
type
:
"
DOORHANGER_TELEMETRY
"
data
:
{
action
:
"
cfr_user_event
"
source
:
"
CFR
"
.
.
.
ping
}
}
)
;
}
_blockMessage
(
messageID
)
{
this
.
_dispatchToASRouter
(
{
type
:
"
BLOCK_MESSAGE_BY_ID
"
data
:
{
id
:
messageID
}
}
)
;
}
async
getStrings
(
string
subAttribute
=
"
"
)
{
if
(
!
string
.
string_id
)
{
if
(
subAttribute
)
{
if
(
string
.
attributes
)
{
return
string
.
attributes
[
subAttribute
]
;
}
Cu
.
reportError
(
String
{
string
.
value
}
does
not
contain
any
attributes
)
;
return
subAttribute
;
}
if
(
typeof
string
.
value
=
=
=
"
string
"
)
{
const
stringWithAttributes
=
new
String
(
string
.
value
)
;
stringWithAttributes
.
attributes
=
string
.
attributes
;
return
stringWithAttributes
;
}
return
string
;
}
const
[
localeStrings
]
=
await
this
.
_l10n
.
formatMessages
(
[
{
id
:
string
.
string_id
args
:
string
.
args
}
]
)
;
const
mainString
=
new
String
(
localeStrings
.
value
)
;
if
(
localeStrings
.
attributes
)
{
const
attributes
=
localeStrings
.
attributes
.
reduce
(
(
acc
attribute
)
=
>
{
acc
[
attribute
.
name
]
=
attribute
.
value
;
return
acc
;
}
{
}
)
;
mainString
.
attributes
=
attributes
;
}
return
subAttribute
?
mainString
.
attributes
[
subAttribute
]
:
mainString
;
}
async
_setAddonAuthorAndRating
(
document
content
)
{
const
author
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
author
"
)
;
const
footerFilledStars
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
footer
-
filled
-
stars
"
)
;
const
footerEmptyStars
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
footer
-
empty
-
stars
"
)
;
const
footerUsers
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
footer
-
users
"
)
;
const
footerSpacer
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
footer
-
spacer
"
)
;
author
.
textContent
=
await
this
.
getStrings
(
{
string_id
:
"
cfr
-
doorhanger
-
extension
-
author
"
args
:
{
name
:
content
.
addon
.
author
}
}
)
;
const
{
rating
}
=
content
.
addon
;
if
(
rating
)
{
const
MAX_RATING
=
5
;
const
STARS_WIDTH
=
17
*
MAX_RATING
;
const
calcWidth
=
stars
=
>
{
(
stars
/
MAX_RATING
)
*
STARS_WIDTH
}
px
;
footerFilledStars
.
style
.
width
=
calcWidth
(
rating
)
;
footerEmptyStars
.
style
.
width
=
calcWidth
(
MAX_RATING
-
rating
)
;
const
ratingString
=
await
this
.
getStrings
(
{
string_id
:
"
cfr
-
doorhanger
-
extension
-
rating
"
args
:
{
total
:
rating
}
}
"
tooltiptext
"
)
;
footerFilledStars
.
setAttribute
(
"
tooltiptext
"
ratingString
)
;
footerEmptyStars
.
setAttribute
(
"
tooltiptext
"
ratingString
)
;
}
else
{
footerFilledStars
.
style
.
width
=
"
"
;
footerEmptyStars
.
style
.
width
=
"
"
;
footerFilledStars
.
removeAttribute
(
"
tooltiptext
"
)
;
footerEmptyStars
.
removeAttribute
(
"
tooltiptext
"
)
;
}
const
{
users
}
=
content
.
addon
;
if
(
users
)
{
footerUsers
.
setAttribute
(
"
value
"
await
this
.
getStrings
(
{
string_id
:
"
cfr
-
doorhanger
-
extension
-
total
-
users
"
args
:
{
total
:
users
}
}
)
)
;
footerUsers
.
removeAttribute
(
"
hidden
"
)
;
}
else
{
footerUsers
.
setAttribute
(
"
hidden
"
true
)
;
footerUsers
.
removeAttribute
(
"
value
"
)
;
}
if
(
rating
|
|
users
)
{
footerSpacer
.
removeAttribute
(
"
hidden
"
)
;
}
else
{
footerSpacer
.
setAttribute
(
"
hidden
"
true
)
;
}
}
_createElementAndAppend
(
{
type
id
}
parent
)
{
let
element
=
this
.
window
.
document
.
createXULElement
(
type
)
;
if
(
id
)
{
element
.
setAttribute
(
"
id
"
id
)
;
}
parent
.
appendChild
(
element
)
;
return
element
;
}
async
_renderPinTabAnimation
(
)
{
const
ANIMATION_CONTAINER_ID
=
"
cfr
-
notification
-
footer
-
pintab
-
animation
-
container
"
;
const
footer
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
footer
"
)
;
let
animationContainer
=
this
.
window
.
document
.
getElementById
(
ANIMATION_CONTAINER_ID
)
;
if
(
!
animationContainer
)
{
animationContainer
=
this
.
_createElementAndAppend
(
{
type
:
"
vbox
"
id
:
ANIMATION_CONTAINER_ID
}
footer
)
;
let
controlsContainer
=
this
.
_createElementAndAppend
(
{
type
:
"
hbox
"
id
:
"
cfr
-
notification
-
footer
-
animation
-
controls
"
}
animationContainer
)
;
this
.
_createElementAndAppend
(
{
type
:
"
vbox
"
}
controlsContainer
)
.
setAttribute
(
"
flex
"
1
)
;
let
animationButton
=
this
.
_createElementAndAppend
(
{
type
:
"
hbox
"
id
:
ANIMATION_BUTTON_ID
}
controlsContainer
)
;
this
.
_createElementAndAppend
(
{
type
:
"
label
"
id
:
ANIMATION_LABEL_ID
}
animationButton
)
;
}
animationContainer
.
toggleAttribute
(
"
animate
"
Services
.
prefs
.
getBoolPref
(
ANIMATIONS_ENABLED_PREF
true
)
)
;
animationContainer
.
removeAttribute
(
"
paused
"
)
;
this
.
window
.
document
.
getElementById
(
ANIMATION_LABEL_ID
)
.
textContent
=
await
this
.
getStrings
(
{
string_id
:
"
cfr
-
doorhanger
-
pintab
-
animation
-
pause
"
}
)
;
if
(
!
this
.
onAnimationButtonClick
)
{
let
animationButton
=
this
.
window
.
document
.
getElementById
(
ANIMATION_BUTTON_ID
)
;
this
.
onAnimationButtonClick
=
async
(
)
=
>
{
let
animationLabel
=
this
.
window
.
document
.
getElementById
(
ANIMATION_LABEL_ID
)
;
if
(
animationContainer
.
toggleAttribute
(
"
paused
"
)
)
{
animationLabel
.
textContent
=
await
this
.
getStrings
(
{
string_id
:
"
cfr
-
doorhanger
-
pintab
-
animation
-
resume
"
}
)
;
}
else
{
animationLabel
.
textContent
=
await
this
.
getStrings
(
{
string_id
:
"
cfr
-
doorhanger
-
pintab
-
animation
-
pause
"
}
)
;
}
}
;
animationButton
.
addEventListener
(
"
click
"
this
.
onAnimationButtonClick
)
;
}
}
async
_renderPopup
(
message
browser
)
{
const
{
id
content
}
=
message
;
const
headerLabel
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
header
-
label
"
)
;
const
headerLink
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
header
-
link
"
)
;
const
headerImage
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
header
-
image
"
)
;
const
footerText
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
footer
-
text
"
)
;
const
footerLink
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
footer
-
learn
-
more
-
link
"
)
;
const
{
primary
secondary
}
=
content
.
buttons
;
let
primaryActionCallback
;
let
options
=
{
}
;
let
panelTitle
;
headerLabel
.
value
=
await
this
.
getStrings
(
content
.
heading_text
)
;
headerLink
.
setAttribute
(
"
href
"
SUMO_BASE_URL
+
content
.
info_icon
.
sumo_path
)
;
headerLink
.
setAttribute
(
this
.
window
.
RTL_UI
?
"
left
"
:
"
right
"
0
)
;
headerImage
.
setAttribute
(
"
tooltiptext
"
await
this
.
getStrings
(
content
.
info_icon
.
label
"
tooltiptext
"
)
)
;
headerLink
.
onclick
=
(
)
=
>
this
.
_sendTelemetry
(
{
message_id
:
id
bucket_id
:
content
.
bucket_id
event
:
"
RATIONALE
"
}
)
;
this
.
window
.
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
setAttribute
(
"
data
-
notification
-
category
"
content
.
layout
)
;
this
.
window
.
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
setAttribute
(
"
data
-
notification
-
bucket
"
content
.
bucket_id
)
;
switch
(
content
.
layout
)
{
case
"
icon_and_message
"
:
const
author
=
this
.
window
.
document
.
getElementById
(
"
cfr
-
notification
-
author
"
)
;
author
.
textContent
=
await
this
.
getStrings
(
content
.
text
)
;
primaryActionCallback
=
(
)
=
>
{
this
.
_blockMessage
(
id
)
;
this
.
dispatchUserAction
(
primary
.
action
)
;
this
.
hideAddressBarNotifier
(
)
;
this
.
_sendTelemetry
(
{
message_id
:
id
bucket_id
:
content
.
bucket_id
event
:
"
ENABLE
"
}
)
;
RecommendationMap
.
delete
(
browser
)
;
}
;
let
getIcon
=
(
)
=
>
{
if
(
content
.
icon_dark_theme
&
&
this
.
isDarkTheme
)
{
return
content
.
icon_dark_theme
;
}
return
content
.
icon
;
}
;
let
learnMoreURL
=
content
.
learn_more
?
SUMO_BASE_URL
+
content
.
learn_more
:
null
;
panelTitle
=
await
this
.
getStrings
(
content
.
heading_text
)
;
options
=
{
popupIconURL
:
getIcon
(
)
popupIconClass
:
content
.
icon_class
learnMoreURL
}
;
break
;
case
"
message_and_animation
"
:
footerText
.
textContent
=
await
this
.
getStrings
(
content
.
text
)
;
const
stepsContainerId
=
"
cfr
-
notification
-
feature
-
steps
"
;
let
stepsContainer
=
this
.
window
.
document
.
getElementById
(
stepsContainerId
)
;
primaryActionCallback
=
(
)
=
>
{
this
.
_blockMessage
(
id
)
;
this
.
dispatchUserAction
(
primary
.
action
)
;
this
.
hideAddressBarNotifier
(
)
;
this
.
_sendTelemetry
(
{
message_id
:
id
bucket_id
:
content
.
bucket_id
event
:
"
PIN
"
}
)
;
RecommendationMap
.
delete
(
browser
)
;
}
;
panelTitle
=
await
this
.
getStrings
(
content
.
heading_text
)
;
if
(
content
.
descriptionDetails
)
{
if
(
stepsContainer
)
{
stepsContainer
.
remove
(
)
;
stepsContainer
=
stepsContainer
.
cloneNode
(
false
)
;
}
else
{
stepsContainer
=
this
.
window
.
document
.
createXULElement
(
"
vbox
"
)
;
stepsContainer
.
setAttribute
(
"
id
"
stepsContainerId
)
;
}
footerText
.
parentNode
.
appendChild
(
stepsContainer
)
;
for
(
let
step
of
content
.
descriptionDetails
.
steps
)
{
const
li
=
this
.
window
.
document
.
createXULElement
(
"
li
"
)
;
this
.
_l10n
.
setAttributes
(
li
step
.
string_id
)
;
stepsContainer
.
appendChild
(
li
)
;
}
await
this
.
_l10n
.
translateElements
(
[
.
.
.
stepsContainer
.
children
]
)
;
}
await
this
.
_renderPinTabAnimation
(
)
;
break
;
default
:
panelTitle
=
await
this
.
getStrings
(
content
.
addon
.
title
)
;
await
this
.
_setAddonAuthorAndRating
(
this
.
window
.
document
content
)
;
footerText
.
textContent
=
await
this
.
getStrings
(
content
.
text
)
;
options
=
{
popupIconURL
:
content
.
addon
.
icon
}
;
footerLink
.
value
=
await
this
.
getStrings
(
{
string_id
:
"
cfr
-
doorhanger
-
extension
-
learn
-
more
-
link
"
}
)
;
footerLink
.
setAttribute
(
"
href
"
content
.
addon
.
amo_url
)
;
footerLink
.
onclick
=
(
)
=
>
this
.
_sendTelemetry
(
{
message_id
:
id
bucket_id
:
content
.
bucket_id
event
:
"
LEARN_MORE
"
}
)
;
primaryActionCallback
=
async
(
)
=
>
{
primary
.
action
.
data
.
url
=
await
CFRPageActions
.
_fetchLatestAddonVersion
(
content
.
addon
.
id
)
;
this
.
_blockMessage
(
id
)
;
this
.
dispatchUserAction
(
primary
.
action
)
;
this
.
hideAddressBarNotifier
(
)
;
this
.
_sendTelemetry
(
{
message_id
:
id
bucket_id
:
content
.
bucket_id
event
:
"
INSTALL
"
}
)
;
RecommendationMap
.
delete
(
browser
)
;
}
;
}
const
primaryBtnStrings
=
await
this
.
getStrings
(
primary
.
label
)
;
const
mainAction
=
{
label
:
primaryBtnStrings
accessKey
:
primaryBtnStrings
.
attributes
.
accesskey
callback
:
primaryActionCallback
}
;
let
_renderSecondaryButtonAction
=
async
(
event
button
)
=
>
{
let
label
=
await
this
.
getStrings
(
button
.
label
)
;
let
{
attributes
}
=
label
;
return
{
label
accessKey
:
attributes
.
accesskey
callback
:
(
)
=
>
{
if
(
button
.
action
)
{
this
.
dispatchUserAction
(
button
.
action
)
;
}
else
{
this
.
_blockMessage
(
id
)
;
this
.
hideAddressBarNotifier
(
)
;
RecommendationMap
.
delete
(
browser
)
;
}
this
.
_sendTelemetry
(
{
message_id
:
id
bucket_id
:
content
.
bucket_id
event
}
)
;
}
}
;
}
;
const
defaultSecondaryEvent
=
[
"
DISMISS
"
"
BLOCK
"
"
MANAGE
"
]
;
const
secondaryActions
=
await
Promise
.
all
(
secondary
.
map
(
(
button
i
)
=
>
{
return
_renderSecondaryButtonAction
(
button
.
event
|
|
defaultSecondaryEvent
[
i
]
button
)
;
}
)
)
;
this
.
currentNotification
=
this
.
window
.
PopupNotifications
.
show
(
browser
POPUP_NOTIFICATION_ID
panelTitle
"
cfr
"
mainAction
secondaryActions
{
.
.
.
options
hideClose
:
true
eventCallback
:
this
.
_popupStateChange
}
)
;
}
async
_showPopupOnClick
(
event
)
{
const
browser
=
this
.
window
.
gBrowser
.
selectedBrowser
;
if
(
!
RecommendationMap
.
has
(
browser
)
)
{
this
.
hideAddressBarNotifier
(
)
;
return
;
}
const
message
=
RecommendationMap
.
get
(
browser
)
;
this
.
_clearScheduledStateChanges
(
browser
message
)
;
await
this
.
showPopup
(
)
;
}
async
showPopup
(
)
{
const
browser
=
this
.
window
.
gBrowser
.
selectedBrowser
;
const
message
=
RecommendationMap
.
get
(
browser
)
;
const
{
id
content
}
=
message
;
browser
.
cfrpopupnotificationanchor
=
this
.
window
.
document
.
getElementById
(
content
.
anchor_id
)
|
|
this
.
container
;
this
.
_sendTelemetry
(
{
message_id
:
id
bucket_id
:
content
.
bucket_id
event
:
"
CLICK_DOORHANGER
"
}
)
;
await
this
.
_renderPopup
(
message
browser
)
;
}
}
function
isHostMatch
(
browser
host
)
{
return
(
browser
.
documentURI
.
scheme
.
startsWith
(
"
http
"
)
&
&
browser
.
documentURI
.
host
=
=
=
host
)
;
}
const
CFRPageActions
=
{
RecommendationMap
PageActionMap
updatePageActions
(
browser
)
{
const
win
=
browser
.
ownerGlobal
;
const
pageAction
=
PageActionMap
.
get
(
win
)
;
if
(
!
pageAction
|
|
browser
!
=
=
win
.
gBrowser
.
selectedBrowser
)
{
return
;
}
if
(
RecommendationMap
.
has
(
browser
)
)
{
const
recommendation
=
RecommendationMap
.
get
(
browser
)
;
if
(
!
recommendation
.
content
.
skip_address_bar_notifier
&
&
(
isHostMatch
(
browser
recommendation
.
host
)
|
|
!
recommendation
.
host
)
)
{
pageAction
.
showAddressBarNotifier
(
recommendation
)
;
}
else
if
(
recommendation
.
retain
)
{
pageAction
.
hideAddressBarNotifier
(
)
;
recommendation
.
retain
=
false
;
}
else
{
RecommendationMap
.
delete
(
browser
)
;
pageAction
.
hideAddressBarNotifier
(
)
;
}
}
else
{
pageAction
.
hideAddressBarNotifier
(
)
;
}
}
async
_fetchLatestAddonVersion
(
id
)
{
let
url
=
null
;
try
{
const
response
=
await
fetch
(
{
ADDONS_API_URL
}
/
{
id
}
/
{
credentials
:
"
omit
"
}
)
;
if
(
response
.
status
!
=
=
204
&
&
response
.
ok
)
{
const
json
=
await
response
.
json
(
)
;
url
=
json
.
current_version
.
files
[
0
]
.
url
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
"
Failed
to
get
the
latest
add
-
on
version
for
this
recommendation
"
)
;
}
return
url
;
}
async
forceRecommendation
(
browser
recommendation
dispatchToASRouter
)
{
const
win
=
browser
.
browser
.
ownerGlobal
;
const
{
id
content
}
=
recommendation
;
RecommendationMap
.
set
(
browser
.
browser
{
id
retain
:
true
content
}
)
;
if
(
!
PageActionMap
.
has
(
win
)
)
{
PageActionMap
.
set
(
win
new
PageAction
(
win
dispatchToASRouter
)
)
;
}
if
(
content
.
skip_address_bar_notifier
)
{
await
PageActionMap
.
get
(
win
)
.
showPopup
(
)
;
PageActionMap
.
get
(
win
)
.
addImpression
(
recommendation
)
;
}
else
{
await
PageActionMap
.
get
(
win
)
.
showAddressBarNotifier
(
recommendation
true
)
;
}
return
true
;
}
async
addRecommendation
(
browser
host
recommendation
dispatchToASRouter
)
{
const
win
=
browser
.
ownerGlobal
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
return
false
;
}
if
(
browser
!
=
=
win
.
gBrowser
.
selectedBrowser
|
|
(
host
&
&
!
isHostMatch
(
browser
host
)
)
)
{
return
false
;
}
if
(
RecommendationMap
.
has
(
browser
)
)
{
return
false
;
}
const
{
id
content
}
=
recommendation
;
RecommendationMap
.
set
(
browser
{
id
host
retain
:
true
content
}
)
;
if
(
!
PageActionMap
.
has
(
win
)
)
{
PageActionMap
.
set
(
win
new
PageAction
(
win
dispatchToASRouter
)
)
;
}
if
(
content
.
skip_address_bar_notifier
)
{
await
PageActionMap
.
get
(
win
)
.
showPopup
(
)
;
PageActionMap
.
get
(
win
)
.
addImpression
(
recommendation
)
;
}
else
{
await
PageActionMap
.
get
(
win
)
.
showAddressBarNotifier
(
recommendation
true
)
;
}
return
true
;
}
clearRecommendations
(
)
{
for
(
const
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
win
.
closed
|
|
!
PageActionMap
.
has
(
win
)
)
{
continue
;
}
PageActionMap
.
get
(
win
)
.
hideAddressBarNotifier
(
)
;
}
PageActionMap
=
new
WeakMap
(
)
;
RecommendationMap
=
new
WeakMap
(
)
;
this
.
PageActionMap
=
PageActionMap
;
this
.
RecommendationMap
=
RecommendationMap
;
}
}
;
this
.
PageAction
=
PageAction
;
this
.
CFRPageActions
=
CFRPageActions
;
const
EXPORTED_SYMBOLS
=
[
"
CFRPageActions
"
"
PageAction
"
]
;
