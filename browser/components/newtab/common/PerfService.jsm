"
use
strict
"
;
if
(
typeof
ChromeUtils
!
=
=
"
undefined
"
)
{
var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
}
let
usablePerfObj
;
if
(
typeof
Services
!
=
=
"
undefined
"
)
{
usablePerfObj
=
Services
.
appShell
.
hiddenDOMWindow
.
performance
;
}
else
if
(
typeof
performance
!
=
=
"
undefined
"
)
{
usablePerfObj
=
performance
;
}
else
{
usablePerfObj
=
{
now
(
)
{
}
mark
(
)
{
}
}
;
}
function
_PerfService
(
options
)
{
if
(
options
&
&
options
.
performanceObj
)
{
this
.
_perf
=
options
.
performanceObj
;
}
else
{
this
.
_perf
=
usablePerfObj
;
}
}
_PerfService
.
prototype
=
{
mark
:
function
mark
(
str
)
{
this
.
_perf
.
mark
(
str
)
;
}
getEntriesByName
:
function
getEntriesByName
(
name
type
)
{
return
this
.
_perf
.
getEntriesByName
(
name
type
)
;
}
get
timeOrigin
(
)
{
return
this
.
_perf
.
timeOrigin
;
}
absNow
:
function
absNow
(
)
{
return
this
.
timeOrigin
+
this
.
_perf
.
now
(
)
;
}
getMostRecentAbsMarkStartByName
(
name
)
{
let
entries
=
this
.
getEntriesByName
(
name
"
mark
"
)
;
if
(
!
entries
.
length
)
{
throw
new
Error
(
No
marks
with
the
name
{
name
}
)
;
}
let
mostRecentEntry
=
entries
[
entries
.
length
-
1
]
;
return
this
.
_perf
.
timeOrigin
+
mostRecentEntry
.
startTime
;
}
}
;
this
.
perfService
=
new
_PerfService
(
)
;
const
EXPORTED_SYMBOLS
=
[
"
_PerfService
"
"
perfService
"
]
;
