const
DATABASE_NAME
=
"
snippets_db
"
;
const
DATABASE_VERSION
=
1
;
const
SNIPPETS_OBJECTSTORE_NAME
=
"
snippets
"
;
export
const
SNIPPETS_UPDATE_INTERVAL_MS
=
14400000
;
const
SNIPPETS_ENABLED_EVENT
=
"
Snippets
:
Enabled
"
;
const
SNIPPETS_DISABLED_EVENT
=
"
Snippets
:
Disabled
"
;
import
{
actionCreators
as
ac
actionTypes
as
at
}
from
"
common
/
Actions
.
jsm
"
;
export
class
SnippetsMap
extends
Map
{
constructor
(
dispatch
)
{
super
(
)
;
this
.
_db
=
null
;
this
.
_dispatch
=
dispatch
;
}
set
(
key
value
)
{
super
.
set
(
key
value
)
;
return
this
.
_dbTransaction
(
db
=
>
db
.
put
(
value
key
)
)
;
}
delete
(
key
)
{
super
.
delete
(
key
)
;
return
this
.
_dbTransaction
(
db
=
>
db
.
delete
(
key
)
)
;
}
clear
(
)
{
super
.
clear
(
)
;
this
.
_dispatch
(
ac
.
OnlyToMain
(
{
type
:
at
.
SNIPPETS_BLOCKLIST_CLEARED
}
)
)
;
return
this
.
_dbTransaction
(
db
=
>
db
.
clear
(
)
)
;
}
get
blockList
(
)
{
return
this
.
get
(
"
blockList
"
)
|
|
[
]
;
}
async
blockSnippetById
(
id
)
{
if
(
!
id
)
{
return
;
}
const
{
blockList
}
=
this
;
if
(
!
blockList
.
includes
(
id
)
)
{
blockList
.
push
(
id
)
;
this
.
_dispatch
(
ac
.
AlsoToMain
(
{
type
:
at
.
SNIPPETS_BLOCKLIST_UPDATED
data
:
id
}
)
)
;
await
this
.
set
(
"
blockList
"
blockList
)
;
}
}
disableOnboarding
(
)
{
}
showFirefoxAccounts
(
)
{
this
.
_dispatch
(
ac
.
AlsoToMain
(
{
type
:
at
.
SHOW_FIREFOX_ACCOUNTS
}
)
)
;
}
getTotalBookmarksCount
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
_dispatch
(
ac
.
OnlyToMain
(
{
type
:
at
.
TOTAL_BOOKMARKS_REQUEST
}
)
)
;
global
.
RPMAddMessageListener
(
"
ActivityStream
:
MainToContent
"
function
onMessage
(
{
data
:
action
}
)
{
if
(
action
.
type
=
=
=
at
.
TOTAL_BOOKMARKS_RESPONSE
)
{
resolve
(
action
.
data
)
;
global
.
RPMRemoveMessageListener
(
"
ActivityStream
:
MainToContent
"
onMessage
)
;
}
}
)
;
}
)
;
}
getAddonsInfo
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
_dispatch
(
ac
.
OnlyToMain
(
{
type
:
at
.
ADDONS_INFO_REQUEST
}
)
)
;
global
.
RPMAddMessageListener
(
"
ActivityStream
:
MainToContent
"
function
onMessage
(
{
data
:
action
}
)
{
if
(
action
.
type
=
=
=
at
.
ADDONS_INFO_RESPONSE
)
{
resolve
(
action
.
data
)
;
global
.
RPMRemoveMessageListener
(
"
ActivityStream
:
MainToContent
"
onMessage
)
;
}
}
)
;
}
)
;
}
async
connect
(
)
{
const
db
=
await
this
.
_openDB
(
)
;
await
this
.
_restoreFromDb
(
db
)
;
this
.
_db
=
db
;
}
_dbTransaction
(
modifier
)
{
if
(
!
this
.
_db
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
transaction
=
modifier
(
this
.
_db
.
transaction
(
SNIPPETS_OBJECTSTORE_NAME
"
readwrite
"
)
.
objectStore
(
SNIPPETS_OBJECTSTORE_NAME
)
)
;
transaction
.
onsuccess
=
event
=
>
resolve
(
)
;
transaction
.
onerror
=
event
=
>
reject
(
transaction
.
error
)
;
}
)
;
}
_openDB
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
openRequest
=
indexedDB
.
open
(
DATABASE_NAME
DATABASE_VERSION
)
;
openRequest
.
onerror
=
event
=
>
{
indexedDB
.
deleteDatabase
(
DATABASE_NAME
)
;
reject
(
event
)
;
}
;
openRequest
.
onupgradeneeded
=
event
=
>
{
const
db
=
event
.
target
.
result
;
if
(
!
db
.
objectStoreNames
.
contains
(
SNIPPETS_OBJECTSTORE_NAME
)
)
{
db
.
createObjectStore
(
SNIPPETS_OBJECTSTORE_NAME
)
;
}
}
;
openRequest
.
onsuccess
=
event
=
>
{
let
db
=
event
.
target
.
result
;
db
.
onerror
=
err
=
>
console
.
error
(
err
)
;
db
.
onversionchange
=
versionChangeEvent
=
>
versionChangeEvent
.
target
.
close
(
)
;
resolve
(
db
)
;
}
;
}
)
;
}
_restoreFromDb
(
db
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
cursorRequest
;
try
{
cursorRequest
=
db
.
transaction
(
SNIPPETS_OBJECTSTORE_NAME
)
.
objectStore
(
SNIPPETS_OBJECTSTORE_NAME
)
.
openCursor
(
)
;
}
catch
(
err
)
{
reject
(
err
)
;
return
;
}
cursorRequest
.
onerror
=
event
=
>
reject
(
event
)
;
cursorRequest
.
onsuccess
=
event
=
>
{
let
cursor
=
event
.
target
.
result
;
if
(
cursor
)
{
if
(
cursor
.
value
!
=
=
"
blockList
"
)
{
this
.
set
(
cursor
.
key
cursor
.
value
)
;
}
cursor
.
continue
(
)
;
}
else
{
resolve
(
)
;
}
}
;
}
)
;
}
}
export
class
SnippetsProvider
{
constructor
(
dispatch
)
{
global
.
gSnippetsMap
=
new
SnippetsMap
(
dispatch
)
;
this
.
_onAction
=
this
.
_onAction
.
bind
(
this
)
;
}
get
snippetsMap
(
)
{
return
global
.
gSnippetsMap
;
}
async
_refreshSnippets
(
)
{
const
cachedVersion
=
this
.
snippetsMap
.
get
(
"
snippets
-
cached
-
version
"
)
;
if
(
cachedVersion
!
=
=
this
.
appData
.
version
)
{
this
.
snippetsMap
.
clear
(
)
;
}
const
lastUpdate
=
this
.
snippetsMap
.
get
(
"
snippets
-
last
-
update
"
)
;
const
needsUpdate
=
!
(
lastUpdate
>
=
0
)
|
|
Date
.
now
(
)
-
lastUpdate
>
SNIPPETS_UPDATE_INTERVAL_MS
;
if
(
needsUpdate
&
&
this
.
appData
.
snippetsURL
)
{
this
.
snippetsMap
.
set
(
"
snippets
-
last
-
update
"
Date
.
now
(
)
)
;
try
{
const
response
=
await
fetch
(
this
.
appData
.
snippetsURL
)
;
if
(
response
.
status
=
=
=
200
)
{
const
payload
=
await
response
.
text
(
)
;
this
.
snippetsMap
.
set
(
"
snippets
"
payload
)
;
this
.
snippetsMap
.
set
(
"
snippets
-
cached
-
version
"
this
.
appData
.
version
)
;
}
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
}
_noSnippetFallback
(
)
{
}
_showRemoteSnippets
(
)
{
const
snippetsEl
=
document
.
getElementById
(
this
.
elementId
)
;
const
payload
=
this
.
snippetsMap
.
get
(
"
snippets
"
)
;
if
(
!
snippetsEl
)
{
throw
new
Error
(
No
element
was
found
with
id
'
{
this
.
elementId
}
'
.
)
;
}
if
(
!
payload
)
{
throw
new
Error
(
"
No
remote
snippets
were
found
in
gSnippetsMap
.
"
)
;
}
if
(
typeof
payload
!
=
=
"
string
"
)
{
throw
new
Error
(
"
Snippet
payload
was
incorrectly
formatted
"
)
;
}
snippetsEl
.
innerHTML
=
payload
;
for
(
const
scriptEl
of
snippetsEl
.
getElementsByTagName
(
"
script
"
)
)
{
const
relocatedScript
=
document
.
createElement
(
"
script
"
)
;
relocatedScript
.
text
=
scriptEl
.
text
;
scriptEl
.
parentNode
.
replaceChild
(
relocatedScript
scriptEl
)
;
}
}
_onAction
(
msg
)
{
if
(
msg
.
data
.
type
=
=
=
at
.
SNIPPET_BLOCKED
)
{
if
(
!
this
.
snippetsMap
.
blockList
.
includes
(
msg
.
data
.
data
)
)
{
this
.
snippetsMap
.
set
(
"
blockList
"
this
.
snippetsMap
.
blockList
.
concat
(
msg
.
data
.
data
)
)
;
document
.
getElementById
(
"
snippets
-
container
"
)
.
style
.
display
=
"
none
"
;
}
}
}
async
init
(
options
)
{
Object
.
assign
(
this
{
appData
:
{
}
elementId
:
"
snippets
"
connect
:
true
}
options
)
;
if
(
global
.
RPMAddMessageListener
)
{
global
.
RPMAddMessageListener
(
"
ActivityStream
:
MainToContent
"
this
.
_onAction
)
;
}
if
(
this
.
connect
)
{
try
{
await
this
.
snippetsMap
.
connect
(
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
for
(
const
key
of
Object
.
keys
(
this
.
appData
)
)
{
if
(
key
=
=
=
"
blockList
"
)
{
this
.
snippetsMap
.
set
(
"
blockList
"
this
.
appData
[
key
]
)
;
}
else
{
this
.
snippetsMap
.
set
(
appData
.
{
key
}
this
.
appData
[
key
]
)
;
}
}
await
this
.
_refreshSnippets
(
)
;
try
{
this
.
_showRemoteSnippets
(
)
;
}
catch
(
e
)
{
this
.
_noSnippetFallback
(
e
)
;
}
window
.
dispatchEvent
(
new
Event
(
SNIPPETS_ENABLED_EVENT
)
)
;
this
.
initialized
=
true
;
}
uninit
(
)
{
window
.
dispatchEvent
(
new
Event
(
SNIPPETS_DISABLED_EVENT
)
)
;
if
(
global
.
RPMRemoveMessageListener
)
{
global
.
RPMRemoveMessageListener
(
"
ActivityStream
:
MainToContent
"
this
.
_onAction
)
;
}
this
.
initialized
=
false
;
}
}
export
function
addSnippetsSubscriber
(
store
)
{
const
snippets
=
new
SnippetsProvider
(
store
.
dispatch
)
;
let
initializing
=
false
;
store
.
subscribe
(
async
(
)
=
>
{
const
state
=
store
.
getState
(
)
;
if
(
state
.
Prefs
.
values
[
"
feeds
.
snippets
"
]
&
&
state
.
ASRouter
.
initialized
&
&
state
.
ASRouter
.
allowLegacySnippets
&
&
!
state
.
Prefs
.
values
.
disableSnippets
&
&
state
.
Snippets
.
initialized
&
&
!
snippets
.
initialized
&
&
!
initializing
&
&
location
.
href
!
=
=
"
about
:
welcome
"
)
{
initializing
=
true
;
await
snippets
.
init
(
{
appData
:
state
.
Snippets
}
)
;
if
(
state
.
Prefs
.
values
[
"
asrouter
.
devtoolsEnabled
"
]
)
{
console
.
log
(
"
Legacy
snippets
initialized
"
)
;
}
initializing
=
false
;
}
else
if
(
(
state
.
Prefs
.
values
[
"
feeds
.
snippets
"
]
=
=
=
false
|
|
state
.
Prefs
.
values
.
disableSnippets
=
=
=
true
|
|
(
state
.
ASRouter
.
initialized
&
&
!
state
.
ASRouter
.
allowLegacySnippets
)
)
&
&
snippets
.
initialized
)
{
snippets
.
uninit
(
)
;
if
(
state
.
Prefs
.
values
[
"
asrouter
.
devtoolsEnabled
"
]
)
{
console
.
log
(
"
Legacy
snippets
removed
"
)
;
}
}
}
)
;
return
{
snippets
}
;
}
