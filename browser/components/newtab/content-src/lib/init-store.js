import
{
actionCreators
as
ac
actionTypes
as
at
actionUtils
as
au
}
from
"
common
/
Actions
.
jsm
"
;
import
{
applyMiddleware
combineReducers
createStore
}
from
"
redux
"
;
export
const
MERGE_STORE_ACTION
=
"
NEW_TAB_INITIAL_STATE
"
;
export
const
OUTGOING_MESSAGE_NAME
=
"
ActivityStream
:
ContentToMain
"
;
export
const
INCOMING_MESSAGE_NAME
=
"
ActivityStream
:
MainToContent
"
;
export
const
EARLY_QUEUED_ACTIONS
=
[
at
.
SAVE_SESSION_PERF_DATA
]
;
function
mergeStateReducer
(
mainReducer
)
{
return
(
prevState
action
)
=
>
{
if
(
action
.
type
=
=
=
MERGE_STORE_ACTION
)
{
return
{
.
.
.
prevState
.
.
.
action
.
data
}
;
}
return
mainReducer
(
prevState
action
)
;
}
;
}
const
messageMiddleware
=
store
=
>
next
=
>
action
=
>
{
const
skipLocal
=
action
.
meta
&
&
action
.
meta
.
skipLocal
;
if
(
au
.
isSendToMain
(
action
)
)
{
RPMSendAsyncMessage
(
OUTGOING_MESSAGE_NAME
action
)
;
}
if
(
!
skipLocal
)
{
next
(
action
)
;
}
}
;
export
const
rehydrationMiddleware
=
(
{
getState
}
)
=
>
{
getState
.
didRehydrate
=
false
;
getState
.
didRequestInitialState
=
false
;
return
next
=
>
action
=
>
{
if
(
getState
.
didRehydrate
)
{
return
next
(
action
)
;
}
const
isMergeStoreAction
=
action
.
type
=
=
=
MERGE_STORE_ACTION
;
const
isRehydrationRequest
=
action
.
type
=
=
=
at
.
NEW_TAB_STATE_REQUEST
;
if
(
isRehydrationRequest
)
{
getState
.
didRequestInitialState
=
true
;
return
next
(
action
)
;
}
if
(
isMergeStoreAction
)
{
getState
.
didRehydrate
=
true
;
return
next
(
action
)
;
}
if
(
getState
.
didRequestInitialState
&
&
action
.
type
=
=
=
at
.
INIT
)
{
return
next
(
ac
.
AlsoToMain
(
{
type
:
at
.
NEW_TAB_STATE_REQUEST
}
)
)
;
}
if
(
au
.
isBroadcastToContent
(
action
)
|
|
au
.
isSendToOneContent
(
action
)
|
|
au
.
isSendToPreloaded
(
action
)
)
{
return
null
;
}
return
next
(
action
)
;
}
;
}
;
export
const
queueEarlyMessageMiddleware
=
(
{
getState
}
)
=
>
{
getState
.
earlyActionQueue
=
[
]
;
getState
.
receivedFromMain
=
false
;
return
next
=
>
action
=
>
{
if
(
getState
.
receivedFromMain
)
{
next
(
action
)
;
}
else
if
(
au
.
isFromMain
(
action
)
)
{
next
(
action
)
;
getState
.
receivedFromMain
=
true
;
getState
.
earlyActionQueue
.
forEach
(
next
)
;
getState
.
earlyActionQueue
.
length
=
0
;
}
else
if
(
EARLY_QUEUED_ACTIONS
.
includes
(
action
.
type
)
)
{
getState
.
earlyActionQueue
.
push
(
action
)
;
}
else
{
next
(
action
)
;
}
}
;
}
;
export
function
initStore
(
reducers
)
{
const
store
=
createStore
(
mergeStateReducer
(
combineReducers
(
reducers
)
)
global
.
RPMAddMessageListener
&
&
applyMiddleware
(
rehydrationMiddleware
queueEarlyMessageMiddleware
messageMiddleware
)
)
;
if
(
global
.
RPMAddMessageListener
)
{
global
.
RPMAddMessageListener
(
INCOMING_MESSAGE_NAME
msg
=
>
{
try
{
store
.
dispatch
(
msg
.
data
)
;
}
catch
(
ex
)
{
console
.
error
(
"
Content
msg
:
"
msg
"
Dispatch
error
:
"
ex
)
;
dump
(
Content
msg
:
{
JSON
.
stringify
(
msg
)
}
\
nDispatch
error
:
{
ex
}
\
n
{
ex
.
stack
}
)
;
}
}
)
;
}
return
store
;
}
