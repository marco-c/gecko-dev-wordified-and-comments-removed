"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AboutWelcomeChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ExperimentAPI
:
"
resource
:
/
/
messaging
-
system
/
experiments
/
ExperimentAPI
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
const
{
Logger
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
messaging
-
system
/
lib
/
Logger
.
jsm
"
)
;
return
new
Logger
(
"
AboutWelcomeChild
"
)
;
}
)
;
function
_parseOverrideContent
(
value
)
{
let
result
=
{
}
;
try
{
result
=
value
?
JSON
.
parse
(
value
)
:
{
}
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
result
;
}
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
multiStageAboutWelcomeContent
"
"
browser
.
aboutwelcome
.
overrideContent
"
"
"
null
_parseOverrideContent
)
;
class
AboutWelcomeChild
extends
JSWindowActorChild
{
actorCreated
(
)
{
this
.
exportFunctions
(
)
;
this
.
initWebProgressListener
(
)
;
}
initWebProgressListener
(
)
{
const
webProgress
=
this
.
manager
.
browsingContext
.
top
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
const
listener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
}
;
listener
.
onLocationChange
=
(
aWebProgress
aRequest
aLocation
aFlags
)
=
>
{
log
.
debug
(
onLocationChange
handled
:
{
aWebProgress
.
DOMWindow
}
)
;
this
.
AWSendToParent
(
"
LOCATION_CHANGED
"
)
;
}
;
webProgress
.
addProgressListener
(
listener
Ci
.
nsIWebProgress
.
NOTIFY_LOCATION
)
;
}
sendToPage
(
action
)
{
log
.
debug
(
Sending
to
page
:
{
action
.
type
}
)
;
const
win
=
this
.
document
.
defaultView
;
const
event
=
new
win
.
CustomEvent
(
"
AboutWelcomeChromeToContent
"
{
detail
:
Cu
.
cloneInto
(
action
win
)
}
)
;
win
.
dispatchEvent
(
event
)
;
}
exportFunctions
(
)
{
let
window
=
this
.
contentWindow
;
Cu
.
exportFunction
(
this
.
AWGetStartupData
.
bind
(
this
)
window
{
defineAs
:
"
AWGetStartupData
"
}
)
;
Cu
.
exportFunction
(
this
.
AWGetMultiStageScreens
.
bind
(
this
)
window
{
defineAs
:
"
AWGetMultiStageScreens
"
}
)
;
Cu
.
exportFunction
(
this
.
AWGetFxAMetricsFlowURI
.
bind
(
this
)
window
{
defineAs
:
"
AWGetFxAMetricsFlowURI
"
}
)
;
Cu
.
exportFunction
(
this
.
AWSendEventTelemetry
.
bind
(
this
)
window
{
defineAs
:
"
AWSendEventTelemetry
"
}
)
;
Cu
.
exportFunction
(
this
.
AWSendToParent
.
bind
(
this
)
window
{
defineAs
:
"
AWSendToParent
"
}
)
;
Cu
.
exportFunction
(
this
.
AWWaitForMigrationClose
.
bind
(
this
)
window
{
defineAs
:
"
AWWaitForMigrationClose
"
}
)
;
}
wrapPromise
(
promise
)
{
return
new
this
.
contentWindow
.
Promise
(
(
resolve
reject
)
=
>
promise
.
then
(
resolve
reject
)
)
;
}
AWGetMultiStageScreens
(
)
{
return
Cu
.
cloneInto
(
multiStageAboutWelcomeContent
|
|
{
}
this
.
contentWindow
)
;
}
AWGetStartupData
(
)
{
let
experimentData
;
try
{
experimentData
=
ExperimentAPI
.
getExperiment
(
{
group
:
"
aboutwelcome
"
}
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
if
(
experimentData
&
&
experimentData
.
slug
)
{
log
.
debug
(
Loading
about
:
welcome
with
experiment
:
{
experimentData
.
slug
}
)
;
}
else
{
log
.
debug
(
"
Loading
about
:
welcome
without
experiment
"
)
;
}
return
Cu
.
cloneInto
(
experimentData
|
|
{
}
this
.
contentWindow
)
;
}
AWGetFxAMetricsFlowURI
(
)
{
return
this
.
wrapPromise
(
this
.
sendQuery
(
"
AWPage
:
FXA_METRICS_FLOW_URI
"
)
)
;
}
AWSendEventTelemetry
(
eventData
)
{
this
.
AWSendToParent
(
"
TELEMETRY_EVENT
"
{
.
.
.
eventData
event_context
:
{
.
.
.
eventData
.
event_context
page
:
"
about
:
welcome
"
}
}
)
;
}
AWSendToParent
(
type
data
)
{
this
.
sendAsyncMessage
(
AWPage
:
{
type
}
data
)
;
}
AWWaitForMigrationClose
(
)
{
return
this
.
wrapPromise
(
this
.
sendQuery
(
"
AWPage
:
WAIT_FOR_MIGRATION_CLOSE
"
)
)
;
}
handleEvent
(
event
)
{
log
.
debug
(
Received
page
event
{
event
.
type
}
)
;
}
}
