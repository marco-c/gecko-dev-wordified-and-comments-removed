"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AboutWelcomeChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ExperimentAPI
:
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
lib
/
AboutWelcomeExperimentAPI
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
const
{
AboutWelcomeLog
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
lib
/
AboutWelcomeLog
.
jsm
"
)
;
return
new
AboutWelcomeLog
(
"
AboutWelcomeChild
.
jsm
"
)
;
}
)
;
class
AboutWelcomeChild
extends
JSWindowActorChild
{
actorCreated
(
)
{
this
.
exportFunctions
(
)
;
}
sendToPage
(
action
)
{
log
.
debug
(
Sending
to
page
:
{
action
.
type
}
)
;
const
win
=
this
.
document
.
defaultView
;
const
event
=
new
win
.
CustomEvent
(
"
AboutWelcomeChromeToContent
"
{
detail
:
Cu
.
cloneInto
(
action
win
)
}
)
;
win
.
dispatchEvent
(
event
)
;
}
exportFunctions
(
)
{
let
window
=
this
.
contentWindow
;
Cu
.
exportFunction
(
this
.
AWGetStartupData
.
bind
(
this
)
window
{
defineAs
:
"
AWGetStartupData
"
}
)
;
Cu
.
exportFunction
(
this
.
AWGetFxAMetricsFlowURI
.
bind
(
this
)
window
{
defineAs
:
"
AWGetFxAMetricsFlowURI
"
}
)
;
Cu
.
exportFunction
(
this
.
AWSendEventTelemetry
.
bind
(
this
)
window
{
defineAs
:
"
AWSendEventTelemetry
"
}
)
;
Cu
.
exportFunction
(
this
.
AWSendToParent
.
bind
(
this
)
window
{
defineAs
:
"
AWSendToParent
"
}
)
;
}
wrapPromise
(
promise
)
{
return
new
this
.
contentWindow
.
Promise
(
(
resolve
reject
)
=
>
promise
.
then
(
resolve
reject
)
)
;
}
AWGetStartupData
(
)
{
const
experimentData
=
ExperimentAPI
.
getExperiment
(
{
group
:
"
aboutwelcome
"
}
)
;
return
Cu
.
cloneInto
(
experimentData
this
.
contentWindow
)
;
}
AWGetFxAMetricsFlowURI
(
)
{
return
this
.
wrapPromise
(
this
.
sendQuery
(
"
AWPage
:
FXA_METRICS_FLOW_URI
"
)
)
;
}
AWSendEventTelemetry
(
eventData
)
{
this
.
AWSendToParent
(
"
TELEMETRY_EVENT
"
{
.
.
.
eventData
event_context
:
{
.
.
.
eventData
.
event_context
page
:
"
about
:
welcome
"
}
}
)
;
}
AWSendToParent
(
type
data
)
{
this
.
sendAsyncMessage
(
AWPage
:
{
type
}
data
)
;
}
handleEvent
(
event
)
{
log
.
debug
(
Received
page
event
{
event
.
type
}
)
;
}
}
