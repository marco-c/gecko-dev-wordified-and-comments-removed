"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AboutWelcomeTelemetry
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
AttributionCode
:
"
resource
:
/
/
/
modules
/
AttributionCode
.
sys
.
mjs
"
ClientID
:
"
resource
:
/
/
gre
/
modules
/
ClientID
.
sys
.
mjs
"
PingCentre
:
"
resource
:
/
/
/
modules
/
PingCentre
.
sys
.
mjs
"
TelemetrySession
:
"
resource
:
/
/
gre
/
modules
/
TelemetrySession
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
structuredIngestionEndpointBase
"
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
.
structuredIngestion
.
endpoint
"
"
"
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
telemetryClientId
"
(
)
=
>
lazy
.
ClientID
.
getClientID
(
)
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
browserSessionId
"
(
)
=
>
lazy
.
TelemetrySession
.
getMetadata
(
"
"
)
.
sessionId
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
log
"
(
)
=
>
{
const
{
Logger
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
messaging
-
system
/
lib
/
Logger
.
sys
.
mjs
"
)
;
return
new
Logger
(
"
AboutWelcomeTelemetry
"
)
;
}
)
;
const
TELEMETRY_TOPIC
=
"
about
:
welcome
"
;
const
PING_TYPE
=
"
onboarding
"
;
const
PING_VERSION
=
"
1
"
;
const
STRUCTURED_INGESTION_NAMESPACE_MS
=
"
messaging
-
system
"
;
class
AboutWelcomeTelemetry
{
constructor
(
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
telemetryEnabled
"
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
"
false
)
;
}
get
pingCentre
(
)
{
Object
.
defineProperty
(
this
"
pingCentre
"
{
value
:
new
lazy
.
PingCentre
(
{
topic
:
TELEMETRY_TOPIC
}
)
}
)
;
return
this
.
pingCentre
;
}
_generateStructuredIngestionEndpoint
(
)
{
const
uuid
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
;
const
docID
=
uuid
.
slice
(
1
-
1
)
;
const
extension
=
{
STRUCTURED_INGESTION_NAMESPACE_MS
}
/
{
PING_TYPE
}
/
{
PING_VERSION
}
/
{
docID
}
;
return
{
lazy
.
structuredIngestionEndpointBase
}
/
{
extension
}
;
}
_maybeAttachAttribution
(
ping
)
{
const
attribution
=
lazy
.
AttributionCode
.
getCachedAttributionData
(
)
;
if
(
attribution
&
&
Object
.
keys
(
attribution
)
.
length
)
{
ping
.
attribution
=
attribution
;
}
return
ping
;
}
async
_createPing
(
event
)
{
if
(
event
.
event_context
&
&
typeof
event
.
event_context
=
=
=
"
object
"
)
{
event
.
event_context
=
JSON
.
stringify
(
event
.
event_context
)
;
}
let
ping
=
{
.
.
.
event
addon_version
:
Services
.
appinfo
.
appBuildID
locale
:
Services
.
locale
.
appLocaleAsBCP47
client_id
:
await
lazy
.
telemetryClientId
browser_session_id
:
lazy
.
browserSessionId
}
;
return
this
.
_maybeAttachAttribution
(
ping
)
;
}
async
sendTelemetry
(
event
)
{
if
(
!
this
.
telemetryEnabled
)
{
return
;
}
const
ping
=
await
this
.
_createPing
(
event
)
;
try
{
this
.
submitGleanPingForPing
(
ping
)
;
}
catch
(
e
)
{
Glean
.
messagingSystem
.
gleanPingForPingFailures
.
add
(
1
)
;
}
this
.
pingCentre
.
sendStructuredIngestionPing
(
ping
this
.
_generateStructuredIngestionEndpoint
(
)
STRUCTURED_INGESTION_NAMESPACE_MS
)
;
}
submitGleanPingForPing
(
ping
)
{
lazy
.
log
.
debug
(
Submitting
Glean
ping
for
{
JSON
.
stringify
(
ping
)
}
)
;
let
event_context
=
ping
?
.
event_context
;
if
(
typeof
event_context
=
=
=
"
string
"
)
{
try
{
event_context
=
JSON
.
parse
(
event_context
)
;
if
(
event_context
?
.
page
=
=
=
"
about
:
shoppingsidebar
"
)
{
this
.
handleShoppingPings
(
ping
event_context
)
;
}
}
catch
(
e
)
{
if
(
event_context
.
length
&
&
event_context
.
includes
(
"
{
"
)
)
{
Glean
.
messagingSystem
.
eventContextParseError
.
add
(
1
)
;
}
}
}
if
(
event_context
?
.
reason
)
{
Glean
.
messagingSystem
.
eventReason
.
set
(
event_context
.
reason
)
;
}
if
(
event_context
?
.
page
)
{
Glean
.
messagingSystem
.
eventPage
.
set
(
event_context
.
page
)
;
}
if
(
event_context
?
.
source
)
{
Glean
.
messagingSystem
.
eventSource
.
set
(
event_context
.
source
)
;
}
if
(
event_context
)
{
Glean
.
messagingSystem
.
eventContext
.
set
(
JSON
.
stringify
(
event_context
)
)
;
}
if
(
"
attribution
"
in
ping
)
{
for
(
const
[
key
value
]
of
Object
.
entries
(
ping
.
attribution
)
)
{
const
camelKey
=
this
.
_snakeToCamelCase
(
key
)
;
try
{
Glean
.
messagingSystemAttribution
[
camelKey
]
.
set
(
value
)
;
}
catch
(
e
)
{
Glean
.
messagingSystemAttribution
.
unknownKeys
[
camelKey
]
.
add
(
1
)
;
}
}
}
const
handledKeys
=
[
"
event_context
"
"
attribution
"
]
;
for
(
const
[
key
value
]
of
Object
.
entries
(
ping
)
)
{
if
(
handledKeys
.
includes
(
key
)
)
{
continue
;
}
const
camelKey
=
this
.
_snakeToCamelCase
(
key
)
;
try
{
if
(
typeof
value
=
=
=
"
object
"
)
{
Glean
.
messagingSystem
.
invalidNestedData
[
camelKey
]
.
add
(
1
)
;
}
else
{
Glean
.
messagingSystem
[
camelKey
]
.
set
(
value
)
;
}
}
catch
(
e
)
{
Glean
.
messagingSystem
.
unknownKeys
[
camelKey
]
.
add
(
1
)
;
Glean
.
messagingSystem
.
unknownKeyCount
.
add
(
1
)
;
}
}
GleanPings
.
messagingSystem
.
submit
(
)
;
}
_snakeToCamelCase
(
s
)
{
return
s
.
toString
(
)
.
replace
(
/
_
(
[
a
-
z
]
)
/
gi
(
_str
group
)
=
>
{
return
group
.
toUpperCase
(
)
;
}
)
;
}
handleShoppingPings
(
ping
event_context
)
{
if
(
ping
?
.
message_id
.
startsWith
(
"
FAKESPOT_OPTIN_DEFAULT
"
)
)
{
switch
(
ping
?
.
event
)
{
case
"
CLICK_BUTTON
"
:
switch
(
event_context
?
.
source
)
{
case
"
privacy_policy
"
:
Glean
.
shopping
.
surfaceShowPrivacyPolicyClicked
.
record
(
)
;
break
;
case
"
terms_of_use
"
:
Glean
.
shopping
.
surfaceShowTermsClicked
.
record
(
)
;
break
;
case
"
primary_button
"
:
Glean
.
shopping
.
surfaceOptInClicked
.
record
(
)
;
break
;
case
"
secondary_button
"
:
Glean
.
shopping
.
surfaceNotNowClicked
.
record
(
)
;
break
;
}
break
;
case
"
IMPRESSION
"
:
Glean
.
shopping
.
surfaceOnboardingDisplayed
.
record
(
{
configuration
:
ping
?
.
message_id
}
)
;
break
;
}
}
}
}
