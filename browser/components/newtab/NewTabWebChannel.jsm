"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
NewTabWebChannel
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NewTabPrefsProvider
"
"
resource
:
/
/
/
modules
/
NewTabPrefsProvider
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
NewTabRemoteResources
"
"
resource
:
/
/
/
modules
/
NewTabRemoteResources
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
WebChannel
"
"
resource
:
/
/
gre
/
modules
/
WebChannel
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
EventEmitter
"
function
(
)
{
const
{
EventEmitter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
{
}
)
;
return
EventEmitter
;
}
)
;
const
CHAN_ID
=
"
newtab
"
;
const
PREF_ENABLED
=
"
browser
.
newtabpage
.
remote
"
;
const
PREF_MODE
=
"
browser
.
newtabpage
.
remote
.
mode
"
;
let
NewTabWebChannelImpl
=
function
NewTabWebChannelImpl
(
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_handlePrefChange
=
this
.
_handlePrefChange
.
bind
(
this
)
;
this
.
_incomingMessage
=
this
.
_incomingMessage
.
bind
(
this
)
;
}
;
NewTabWebChannelImpl
.
prototype
=
{
_prefs
:
{
}
_channel
:
null
_principals
:
null
_browsers
:
null
get
chanId
(
)
{
return
CHAN_ID
;
}
get
numBrowsers
(
)
{
return
this
.
_getBrowserRefs
(
)
.
length
;
}
get
origin
(
)
{
if
(
!
(
this
.
_prefs
.
mode
in
NewTabRemoteResources
.
MODE_CHANNEL_MAP
)
)
{
this
.
_prefs
.
mode
=
"
production
"
;
}
return
NewTabRemoteResources
.
MODE_CHANNEL_MAP
[
this
.
_prefs
.
mode
]
.
origin
;
}
_unloadAll
(
)
{
if
(
this
.
_principals
!
=
null
)
{
this
.
_principals
=
new
WeakMap
(
)
;
}
this
.
_browsers
=
new
Set
(
)
;
this
.
emit
(
"
targetUnloadAll
"
)
;
}
_isBrowserKnown
(
browser
)
{
for
(
let
bRef
of
this
.
_getBrowserRefs
(
)
)
{
let
b
=
bRef
.
get
(
)
;
if
(
b
&
&
b
.
permanentKey
=
=
=
browser
.
permanentKey
)
{
return
true
;
}
}
return
false
;
}
_getBrowserRefs
(
)
{
if
(
!
this
.
_browsers
)
{
return
[
]
;
}
let
refs
=
[
]
;
for
(
let
bRef
of
this
.
_browsers
)
{
let
browser
=
bRef
.
get
(
)
;
if
(
browser
&
&
browser
.
documentURI
)
{
refs
.
push
(
bRef
)
;
}
else
{
this
.
_principals
.
delete
(
browser
)
;
this
.
_browsers
.
delete
(
bRef
)
;
this
.
emit
(
"
targetUnload
"
)
;
}
}
return
refs
;
}
_incomingMessage
(
id
message
target
)
{
if
(
this
.
chanId
!
=
=
id
)
{
Cu
.
reportError
(
new
Error
(
"
NewTabWebChannel
unexpected
message
destination
"
)
)
;
}
if
(
!
this
.
_isBrowserKnown
(
target
.
browser
)
)
{
this
.
_browsers
.
add
(
Cu
.
getWeakReference
(
target
.
browser
)
)
;
this
.
_principals
.
set
(
target
.
browser
Cu
.
getWeakReference
(
target
.
principal
)
)
;
this
.
emit
(
"
targetAdd
"
)
;
}
try
{
let
msg
=
JSON
.
parse
(
message
)
;
this
.
emit
(
msg
.
type
{
data
:
msg
.
data
target
}
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
broadcast
(
actionType
message
)
{
for
(
let
bRef
of
this
.
_getBrowserRefs
(
)
)
{
let
browser
=
bRef
.
get
(
)
;
try
{
let
principal
=
this
.
_principals
.
get
(
browser
)
.
get
(
)
;
if
(
principal
&
&
browser
&
&
browser
.
documentURI
)
{
this
.
_channel
.
send
(
{
type
:
actionType
data
:
message
}
{
browser
principal
}
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
new
Error
(
"
NewTabWebChannel
WeakRef
is
dead
"
)
)
;
this
.
_principals
.
delete
(
browser
)
;
}
}
}
send
(
actionType
message
target
)
{
try
{
this
.
_channel
.
send
(
{
type
:
actionType
data
:
message
}
target
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
_handlePrefChange
(
prefName
newState
forceState
)
{
switch
(
prefName
)
{
case
PREF_ENABLED
:
if
(
!
this
.
_prefs
.
enabled
&
&
newState
)
{
this
.
setupState
(
)
;
}
else
if
(
this
.
_prefs
.
enabled
&
&
!
newState
)
{
this
.
tearDownState
(
)
;
}
break
;
case
PREF_MODE
:
if
(
this
.
_prefs
.
mode
!
=
=
newState
)
{
this
.
tearDownState
(
)
;
this
.
setupState
(
)
;
}
break
;
}
}
setupState
(
)
{
this
.
_prefs
.
enabled
=
Services
.
prefs
.
getBoolPref
(
PREF_ENABLED
false
)
;
let
mode
=
Services
.
prefs
.
getStringPref
(
PREF_MODE
"
production
"
)
;
if
(
!
(
mode
in
NewTabRemoteResources
.
MODE_CHANNEL_MAP
)
)
{
mode
=
"
production
"
;
}
this
.
_prefs
.
mode
=
mode
;
this
.
_principals
=
new
WeakMap
(
)
;
this
.
_browsers
=
new
Set
(
)
;
if
(
this
.
_prefs
.
enabled
)
{
this
.
_channel
=
new
WebChannel
(
this
.
chanId
Services
.
io
.
newURI
(
this
.
origin
)
)
;
this
.
_channel
.
listen
(
this
.
_incomingMessage
)
;
}
}
tearDownState
(
)
{
if
(
this
.
_channel
)
{
this
.
_channel
.
stopListening
(
)
;
}
this
.
_prefs
=
{
}
;
this
.
_unloadAll
(
)
;
this
.
_channel
=
null
;
this
.
_principals
=
null
;
this
.
_browsers
=
null
;
}
init
(
)
{
this
.
setupState
(
)
;
NewTabPrefsProvider
.
prefs
.
on
(
PREF_ENABLED
this
.
_handlePrefChange
)
;
NewTabPrefsProvider
.
prefs
.
on
(
PREF_MODE
this
.
_handlePrefChange
)
;
}
uninit
(
)
{
this
.
tearDownState
(
)
;
NewTabPrefsProvider
.
prefs
.
off
(
PREF_ENABLED
this
.
_handlePrefChange
)
;
NewTabPrefsProvider
.
prefs
.
off
(
PREF_MODE
this
.
_handlePrefChange
)
;
}
}
;
let
NewTabWebChannel
=
new
NewTabWebChannelImpl
(
)
;
