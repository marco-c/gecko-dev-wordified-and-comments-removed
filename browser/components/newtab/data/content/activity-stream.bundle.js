(
function
(
modules
)
{
var
installedModules
=
{
}
;
function
__webpack_require__
(
moduleId
)
{
if
(
installedModules
[
moduleId
]
)
{
return
installedModules
[
moduleId
]
.
exports
;
}
var
module
=
installedModules
[
moduleId
]
=
{
i
:
moduleId
l
:
false
exports
:
{
}
}
;
modules
[
moduleId
]
.
call
(
module
.
exports
module
module
.
exports
__webpack_require__
)
;
module
.
l
=
true
;
return
module
.
exports
;
}
__webpack_require__
.
m
=
modules
;
__webpack_require__
.
c
=
installedModules
;
__webpack_require__
.
d
=
function
(
exports
name
getter
)
{
if
(
!
__webpack_require__
.
o
(
exports
name
)
)
{
Object
.
defineProperty
(
exports
name
{
enumerable
:
true
get
:
getter
}
)
;
}
}
;
__webpack_require__
.
r
=
function
(
exports
)
{
if
(
typeof
Symbol
!
=
=
'
undefined
'
&
&
Symbol
.
toStringTag
)
{
Object
.
defineProperty
(
exports
Symbol
.
toStringTag
{
value
:
'
Module
'
}
)
;
}
Object
.
defineProperty
(
exports
'
__esModule
'
{
value
:
true
}
)
;
}
;
__webpack_require__
.
t
=
function
(
value
mode
)
{
if
(
mode
&
1
)
value
=
__webpack_require__
(
value
)
;
if
(
mode
&
8
)
return
value
;
if
(
(
mode
&
4
)
&
&
typeof
value
=
=
=
'
object
'
&
&
value
&
&
value
.
__esModule
)
return
value
;
var
ns
=
Object
.
create
(
null
)
;
__webpack_require__
.
r
(
ns
)
;
Object
.
defineProperty
(
ns
'
default
'
{
enumerable
:
true
value
:
value
}
)
;
if
(
mode
&
2
&
&
typeof
value
!
=
'
string
'
)
for
(
var
key
in
value
)
__webpack_require__
.
d
(
ns
key
function
(
key
)
{
return
value
[
key
]
;
}
.
bind
(
null
key
)
)
;
return
ns
;
}
;
__webpack_require__
.
n
=
function
(
module
)
{
var
getter
=
module
&
&
module
.
__esModule
?
function
getDefault
(
)
{
return
module
[
'
default
'
]
;
}
:
function
getModuleExports
(
)
{
return
module
;
}
;
__webpack_require__
.
d
(
getter
'
a
'
getter
)
;
return
getter
;
}
;
__webpack_require__
.
o
=
function
(
object
property
)
{
return
Object
.
prototype
.
hasOwnProperty
.
call
(
object
property
)
;
}
;
__webpack_require__
.
p
=
"
"
;
return
__webpack_require__
(
__webpack_require__
.
s
=
0
)
;
}
)
(
[
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
content_src_lib_snippets__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
3
)
;
var
content_src_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
4
)
;
var
content_src_components_Base_Base__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
12
)
;
var
content_src_lib_detect_user_session_start__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
38
)
;
var
content_src_lib_asroutercontent__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
39
)
;
var
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
7
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_7___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_7__
)
;
var
react__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_8___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_8__
)
;
var
react_dom__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
10
)
;
var
react_dom__WEBPACK_IMPORTED_MODULE_9___default
=
__webpack_require__
.
n
(
react_dom__WEBPACK_IMPORTED_MODULE_9__
)
;
var
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_10__
=
__webpack_require__
(
43
)
;
const
store
=
Object
(
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_6__
[
"
initStore
"
]
)
(
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_10__
[
"
reducers
"
]
global
.
gActivityStreamPrerenderedState
)
;
const
asrouterContent
=
new
content_src_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_2__
[
"
ASRouterContent
"
]
(
)
;
new
content_src_lib_detect_user_session_start__WEBPACK_IMPORTED_MODULE_4__
[
"
DetectUserSessionStart
"
]
(
store
)
.
sendEventOrAddListener
(
)
;
if
(
!
global
.
gActivityStreamPrerenderedState
)
{
store
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_STATE_REQUEST
}
)
)
;
}
react_dom__WEBPACK_IMPORTED_MODULE_9___default
.
a
.
hydrate
(
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
react_redux__WEBPACK_IMPORTED_MODULE_7__
[
"
Provider
"
]
{
store
:
store
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_Base_Base__WEBPACK_IMPORTED_MODULE_3__
[
"
Base
"
]
{
isFirstrun
:
global
.
document
.
location
.
href
=
=
=
"
about
:
welcome
"
isPrerendered
:
!
!
global
.
gActivityStreamPrerenderedState
locale
:
global
.
document
.
documentElement
.
lang
strings
:
global
.
gActivityStreamStrings
}
)
)
document
.
getElementById
(
"
root
"
)
)
;
Object
(
content_src_lib_asroutercontent__WEBPACK_IMPORTED_MODULE_5__
[
"
enableASRouterContent
"
]
)
(
store
asrouterContent
)
;
Object
(
content_src_lib_snippets__WEBPACK_IMPORTED_MODULE_1__
[
"
addSnippetsSubscriber
"
]
)
(
store
)
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
exports
)
{
var
g
;
g
=
(
function
(
)
{
return
this
;
}
)
(
)
;
try
{
g
=
g
|
|
Function
(
"
return
this
"
)
(
)
|
|
(
1
eval
)
(
"
this
"
)
;
}
catch
(
e
)
{
if
(
typeof
window
=
=
=
"
object
"
)
g
=
window
;
}
module
.
exports
=
g
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
MAIN_MESSAGE_TYPE
"
function
(
)
{
return
MAIN_MESSAGE_TYPE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
CONTENT_MESSAGE_TYPE
"
function
(
)
{
return
CONTENT_MESSAGE_TYPE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
PRELOAD_MESSAGE_TYPE
"
function
(
)
{
return
PRELOAD_MESSAGE_TYPE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
UI_CODE
"
function
(
)
{
return
UI_CODE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
BACKGROUND_PROCESS
"
function
(
)
{
return
BACKGROUND_PROCESS
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
globalImportContext
"
function
(
)
{
return
globalImportContext
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
actionTypes
"
function
(
)
{
return
actionTypes
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterActions
"
function
(
)
{
return
ASRouterActions
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
actionCreators
"
function
(
)
{
return
actionCreators
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
actionUtils
"
function
(
)
{
return
actionUtils
;
}
)
;
var
MAIN_MESSAGE_TYPE
=
"
ActivityStream
:
Main
"
;
var
CONTENT_MESSAGE_TYPE
=
"
ActivityStream
:
Content
"
;
var
PRELOAD_MESSAGE_TYPE
=
"
ActivityStream
:
PreloadedBrowser
"
;
var
UI_CODE
=
1
;
var
BACKGROUND_PROCESS
=
2
;
const
globalImportContext
=
typeof
Window
=
=
=
"
undefined
"
?
BACKGROUND_PROCESS
:
UI_CODE
;
const
actionTypes
=
{
}
;
for
(
const
type
of
[
"
ADDONS_INFO_REQUEST
"
"
ADDONS_INFO_RESPONSE
"
"
ARCHIVE_FROM_POCKET
"
"
AS_ROUTER_TELEMETRY_USER_EVENT
"
"
BLOCK_URL
"
"
BOOKMARK_URL
"
"
COPY_DOWNLOAD_LINK
"
"
DELETE_BOOKMARK_BY_ID
"
"
DELETE_FROM_POCKET
"
"
DELETE_HISTORY_URL
"
"
DIALOG_CANCEL
"
"
DIALOG_OPEN
"
"
DISABLE_ONBOARDING
"
"
DOWNLOAD_CHANGED
"
"
FILL_SEARCH_TERM
"
"
INIT
"
"
MIGRATION_CANCEL
"
"
MIGRATION_COMPLETED
"
"
MIGRATION_START
"
"
NEW_TAB_INIT
"
"
NEW_TAB_INITIAL_STATE
"
"
NEW_TAB_LOAD
"
"
NEW_TAB_REHYDRATED
"
"
NEW_TAB_STATE_REQUEST
"
"
NEW_TAB_UNLOAD
"
"
OPEN_DOWNLOAD_FILE
"
"
OPEN_LINK
"
"
OPEN_NEW_WINDOW
"
"
OPEN_PRIVATE_WINDOW
"
"
OPEN_WEBEXT_SETTINGS
"
"
PAGE_PRERENDERED
"
"
PLACES_BOOKMARK_ADDED
"
"
PLACES_BOOKMARK_REMOVED
"
"
PLACES_HISTORY_CLEARED
"
"
PLACES_LINKS_CHANGED
"
"
PLACES_LINK_BLOCKED
"
"
PLACES_LINK_DELETED
"
"
PLACES_SAVED_TO_POCKET
"
"
POCKET_WAITING_FOR_SPOC
"
"
PREFS_INITIAL_VALUES
"
"
PREF_CHANGED
"
"
PREVIEW_REQUEST
"
"
PREVIEW_REQUEST_CANCEL
"
"
PREVIEW_RESPONSE
"
"
REMOVE_DOWNLOAD_FILE
"
"
RICH_ICON_MISSING
"
"
SAVE_SESSION_PERF_DATA
"
"
SAVE_TO_POCKET
"
"
SCREENSHOT_UPDATED
"
"
SECTION_DEREGISTER
"
"
SECTION_DISABLE
"
"
SECTION_ENABLE
"
"
SECTION_MOVE
"
"
SECTION_OPTIONS_CHANGED
"
"
SECTION_REGISTER
"
"
SECTION_UPDATE
"
"
SECTION_UPDATE_CARD
"
"
SETTINGS_CLOSE
"
"
SETTINGS_OPEN
"
"
SET_PREF
"
"
SHOW_DOWNLOAD_FILE
"
"
SHOW_FIREFOX_ACCOUNTS
"
"
SKIPPED_SIGNIN
"
"
SNIPPETS_BLOCKLIST_CLEARED
"
"
SNIPPETS_BLOCKLIST_UPDATED
"
"
SNIPPETS_DATA
"
"
SNIPPETS_RESET
"
"
SNIPPET_BLOCKED
"
"
SUBMIT_EMAIL
"
"
SYSTEM_TICK
"
"
TELEMETRY_IMPRESSION_STATS
"
"
TELEMETRY_PERFORMANCE_EVENT
"
"
TELEMETRY_UNDESIRED_EVENT
"
"
TELEMETRY_USER_EVENT
"
"
TOP_SITES_CANCEL_EDIT
"
"
TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL
"
"
TOP_SITES_EDIT
"
"
TOP_SITES_INSERT
"
"
TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL
"
"
TOP_SITES_PIN
"
"
TOP_SITES_PREFS_UPDATED
"
"
TOP_SITES_UNPIN
"
"
TOP_SITES_UPDATED
"
"
TOTAL_BOOKMARKS_REQUEST
"
"
TOTAL_BOOKMARKS_RESPONSE
"
"
UNINIT
"
"
UPDATE_PINNED_SEARCH_SHORTCUTS
"
"
UPDATE_SEARCH_SHORTCUTS
"
"
UPDATE_SECTION_PREFS
"
"
WEBEXT_CLICK
"
"
WEBEXT_DISMISS
"
]
)
{
actionTypes
[
type
]
=
type
;
}
const
ASRouterActions
=
{
}
;
for
(
const
type
of
[
"
INSTALL_ADDON_FROM_URL
"
"
OPEN_APPLICATIONS_MENU
"
"
OPEN_PRIVATE_BROWSER_WINDOW
"
"
OPEN_URL
"
"
OPEN_ABOUT_PAGE
"
]
)
{
ASRouterActions
[
type
]
=
type
;
}
function
_RouteMessage
(
action
options
)
{
const
meta
=
action
.
meta
?
Object
.
assign
(
{
}
action
.
meta
)
:
{
}
;
if
(
!
options
|
|
!
options
.
from
|
|
!
options
.
to
)
{
throw
new
Error
(
"
Routed
Messages
must
have
options
as
the
second
parameter
and
must
at
least
include
a
.
from
and
.
to
property
.
"
)
;
}
[
"
from
"
"
to
"
"
toTarget
"
"
fromTarget
"
"
skipMain
"
"
skipLocal
"
]
.
forEach
(
o
=
>
{
if
(
typeof
options
[
o
]
!
=
=
"
undefined
"
)
{
meta
[
o
]
=
options
[
o
]
;
}
else
if
(
meta
[
o
]
)
{
delete
meta
[
o
]
;
}
}
)
;
return
Object
.
assign
(
{
}
action
{
meta
}
)
;
}
function
AlsoToMain
(
action
fromTarget
skipLocal
)
{
return
_RouteMessage
(
action
{
from
:
CONTENT_MESSAGE_TYPE
to
:
MAIN_MESSAGE_TYPE
fromTarget
skipLocal
}
)
;
}
function
OnlyToMain
(
action
fromTarget
)
{
return
AlsoToMain
(
action
fromTarget
true
)
;
}
function
BroadcastToContent
(
action
)
{
return
_RouteMessage
(
action
{
from
:
MAIN_MESSAGE_TYPE
to
:
CONTENT_MESSAGE_TYPE
}
)
;
}
function
AlsoToOneContent
(
action
target
skipMain
)
{
if
(
!
target
)
{
throw
new
Error
(
"
You
must
provide
a
target
ID
as
the
second
parameter
of
AlsoToOneContent
.
If
you
want
to
send
to
all
content
processes
use
BroadcastToContent
"
)
;
}
return
_RouteMessage
(
action
{
from
:
MAIN_MESSAGE_TYPE
to
:
CONTENT_MESSAGE_TYPE
toTarget
:
target
skipMain
}
)
;
}
function
OnlyToOneContent
(
action
target
)
{
return
AlsoToOneContent
(
action
target
true
)
;
}
function
AlsoToPreloaded
(
action
)
{
return
_RouteMessage
(
action
{
from
:
MAIN_MESSAGE_TYPE
to
:
PRELOAD_MESSAGE_TYPE
}
)
;
}
function
UserEvent
(
data
)
{
return
AlsoToMain
(
{
type
:
actionTypes
.
TELEMETRY_USER_EVENT
data
}
)
;
}
function
ASRouterUserEvent
(
data
)
{
return
AlsoToMain
(
{
type
:
actionTypes
.
AS_ROUTER_TELEMETRY_USER_EVENT
data
}
)
;
}
function
UndesiredEvent
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
TELEMETRY_UNDESIRED_EVENT
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
function
PerfEvent
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
TELEMETRY_PERFORMANCE_EVENT
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
function
ImpressionStats
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
TELEMETRY_IMPRESSION_STATS
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
function
SetPref
(
name
value
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
SET_PREF
data
:
{
name
value
}
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
function
WebExtEvent
(
type
data
importContext
=
globalImportContext
)
{
if
(
!
data
|
|
!
data
.
source
)
{
throw
new
Error
(
"
WebExtEvent
actions
should
include
a
property
\
"
source
\
"
the
id
of
the
webextension
that
should
receive
the
event
.
"
)
;
}
const
action
=
{
type
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
var
actionCreators
=
{
BroadcastToContent
UserEvent
ASRouterUserEvent
UndesiredEvent
PerfEvent
ImpressionStats
AlsoToOneContent
OnlyToOneContent
AlsoToMain
OnlyToMain
AlsoToPreloaded
SetPref
WebExtEvent
}
;
var
actionUtils
=
{
isSendToMain
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
return
action
.
meta
.
to
=
=
=
MAIN_MESSAGE_TYPE
&
&
action
.
meta
.
from
=
=
=
CONTENT_MESSAGE_TYPE
;
}
isBroadcastToContent
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
if
(
action
.
meta
.
to
=
=
=
CONTENT_MESSAGE_TYPE
&
&
!
action
.
meta
.
toTarget
)
{
return
true
;
}
return
false
;
}
isSendToOneContent
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
if
(
action
.
meta
.
to
=
=
=
CONTENT_MESSAGE_TYPE
&
&
action
.
meta
.
toTarget
)
{
return
true
;
}
return
false
;
}
isSendToPreloaded
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
return
action
.
meta
.
to
=
=
=
PRELOAD_MESSAGE_TYPE
&
&
action
.
meta
.
from
=
=
=
MAIN_MESSAGE_TYPE
;
}
isFromMain
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
return
action
.
meta
.
from
=
=
=
MAIN_MESSAGE_TYPE
&
&
action
.
meta
.
to
=
=
=
CONTENT_MESSAGE_TYPE
;
}
getPortIdOfSender
(
action
)
{
return
action
.
meta
&
&
action
.
meta
.
fromTarget
|
|
null
;
}
_RouteMessage
}
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
SNIPPETS_UPDATE_INTERVAL_MS
"
function
(
)
{
return
SNIPPETS_UPDATE_INTERVAL_MS
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
SnippetsMap
"
function
(
)
{
return
SnippetsMap
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
SnippetsProvider
"
function
(
)
{
return
SnippetsProvider
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
addSnippetsSubscriber
"
function
(
)
{
return
addSnippetsSubscriber
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
function
_asyncToGenerator
(
fn
)
{
return
function
(
)
{
var
gen
=
fn
.
apply
(
this
arguments
)
;
return
new
Promise
(
function
(
resolve
reject
)
{
function
step
(
key
arg
)
{
try
{
var
info
=
gen
[
key
]
(
arg
)
;
var
value
=
info
.
value
;
}
catch
(
error
)
{
reject
(
error
)
;
return
;
}
if
(
info
.
done
)
{
resolve
(
value
)
;
}
else
{
return
Promise
.
resolve
(
value
)
.
then
(
function
(
value
)
{
step
(
"
next
"
value
)
;
}
function
(
err
)
{
step
(
"
throw
"
err
)
;
}
)
;
}
}
return
step
(
"
next
"
)
;
}
)
;
}
;
}
const
DATABASE_NAME
=
"
snippets_db
"
;
const
DATABASE_VERSION
=
1
;
const
SNIPPETS_OBJECTSTORE_NAME
=
"
snippets
"
;
const
SNIPPETS_UPDATE_INTERVAL_MS
=
14400000
;
const
SNIPPETS_ENABLED_EVENT
=
"
Snippets
:
Enabled
"
;
const
SNIPPETS_DISABLED_EVENT
=
"
Snippets
:
Disabled
"
;
class
SnippetsMap
extends
Map
{
constructor
(
dispatch
)
{
super
(
)
;
this
.
_db
=
null
;
this
.
_dispatch
=
dispatch
;
}
set
(
key
value
)
{
super
.
set
(
key
value
)
;
return
this
.
_dbTransaction
(
db
=
>
db
.
put
(
value
key
)
)
;
}
delete
(
key
)
{
super
.
delete
(
key
)
;
return
this
.
_dbTransaction
(
db
=
>
db
.
delete
(
key
)
)
;
}
clear
(
)
{
super
.
clear
(
)
;
this
.
_dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SNIPPETS_BLOCKLIST_CLEARED
}
)
)
;
return
this
.
_dbTransaction
(
db
=
>
db
.
clear
(
)
)
;
}
get
blockList
(
)
{
return
this
.
get
(
"
blockList
"
)
|
|
[
]
;
}
blockSnippetById
(
id
)
{
var
_this
=
this
;
return
_asyncToGenerator
(
function
*
(
)
{
if
(
!
id
)
{
return
;
}
const
{
blockList
}
=
_this
;
if
(
!
blockList
.
includes
(
id
)
)
{
blockList
.
push
(
id
)
;
_this
.
_dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SNIPPETS_BLOCKLIST_UPDATED
data
:
id
}
)
)
;
yield
_this
.
set
(
"
blockList
"
blockList
)
;
}
}
)
(
)
;
}
disableOnboarding
(
)
{
this
.
_dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DISABLE_ONBOARDING
}
)
)
;
}
showFirefoxAccounts
(
)
{
this
.
_dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SHOW_FIREFOX_ACCOUNTS
}
)
)
;
}
getTotalBookmarksCount
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
_dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOTAL_BOOKMARKS_REQUEST
}
)
)
;
global
.
RPMAddMessageListener
(
"
ActivityStream
:
MainToContent
"
function
onMessage
(
{
data
:
action
}
)
{
if
(
action
.
type
=
=
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOTAL_BOOKMARKS_RESPONSE
)
{
resolve
(
action
.
data
)
;
global
.
RPMRemoveMessageListener
(
"
ActivityStream
:
MainToContent
"
onMessage
)
;
}
}
)
;
}
)
;
}
getAddonsInfo
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
_dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
ADDONS_INFO_REQUEST
}
)
)
;
global
.
RPMAddMessageListener
(
"
ActivityStream
:
MainToContent
"
function
onMessage
(
{
data
:
action
}
)
{
if
(
action
.
type
=
=
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
ADDONS_INFO_RESPONSE
)
{
resolve
(
action
.
data
)
;
global
.
RPMRemoveMessageListener
(
"
ActivityStream
:
MainToContent
"
onMessage
)
;
}
}
)
;
}
)
;
}
connect
(
)
{
var
_this2
=
this
;
return
_asyncToGenerator
(
function
*
(
)
{
const
db
=
yield
_this2
.
_openDB
(
)
;
yield
_this2
.
_restoreFromDb
(
db
)
;
_this2
.
_db
=
db
;
}
)
(
)
;
}
_dbTransaction
(
modifier
)
{
if
(
!
this
.
_db
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
transaction
=
modifier
(
this
.
_db
.
transaction
(
SNIPPETS_OBJECTSTORE_NAME
"
readwrite
"
)
.
objectStore
(
SNIPPETS_OBJECTSTORE_NAME
)
)
;
transaction
.
onsuccess
=
event
=
>
resolve
(
)
;
transaction
.
onerror
=
event
=
>
reject
(
transaction
.
error
)
;
}
)
;
}
_openDB
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
openRequest
=
indexedDB
.
open
(
DATABASE_NAME
DATABASE_VERSION
)
;
openRequest
.
onerror
=
event
=
>
{
indexedDB
.
deleteDatabase
(
DATABASE_NAME
)
;
reject
(
event
)
;
}
;
openRequest
.
onupgradeneeded
=
event
=
>
{
const
db
=
event
.
target
.
result
;
if
(
!
db
.
objectStoreNames
.
contains
(
SNIPPETS_OBJECTSTORE_NAME
)
)
{
db
.
createObjectStore
(
SNIPPETS_OBJECTSTORE_NAME
)
;
}
}
;
openRequest
.
onsuccess
=
event
=
>
{
let
db
=
event
.
target
.
result
;
db
.
onerror
=
err
=
>
console
.
error
(
err
)
;
db
.
onversionchange
=
versionChangeEvent
=
>
versionChangeEvent
.
target
.
close
(
)
;
resolve
(
db
)
;
}
;
}
)
;
}
_restoreFromDb
(
db
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
cursorRequest
;
try
{
cursorRequest
=
db
.
transaction
(
SNIPPETS_OBJECTSTORE_NAME
)
.
objectStore
(
SNIPPETS_OBJECTSTORE_NAME
)
.
openCursor
(
)
;
}
catch
(
err
)
{
reject
(
err
)
;
return
;
}
cursorRequest
.
onerror
=
event
=
>
reject
(
event
)
;
cursorRequest
.
onsuccess
=
event
=
>
{
let
cursor
=
event
.
target
.
result
;
if
(
cursor
)
{
if
(
cursor
.
value
!
=
=
"
blockList
"
)
{
this
.
set
(
cursor
.
key
cursor
.
value
)
;
}
cursor
.
continue
(
)
;
}
else
{
resolve
(
)
;
}
}
;
}
)
;
}
}
class
SnippetsProvider
{
constructor
(
dispatch
)
{
global
.
gSnippetsMap
=
new
SnippetsMap
(
dispatch
)
;
this
.
_onAction
=
this
.
_onAction
.
bind
(
this
)
;
}
get
snippetsMap
(
)
{
return
global
.
gSnippetsMap
;
}
_refreshSnippets
(
)
{
var
_this3
=
this
;
return
_asyncToGenerator
(
function
*
(
)
{
const
cachedVersion
=
_this3
.
snippetsMap
.
get
(
"
snippets
-
cached
-
version
"
)
;
if
(
cachedVersion
!
=
=
_this3
.
appData
.
version
)
{
_this3
.
snippetsMap
.
clear
(
)
;
}
const
lastUpdate
=
_this3
.
snippetsMap
.
get
(
"
snippets
-
last
-
update
"
)
;
const
needsUpdate
=
!
(
lastUpdate
>
=
0
)
|
|
Date
.
now
(
)
-
lastUpdate
>
SNIPPETS_UPDATE_INTERVAL_MS
;
if
(
needsUpdate
&
&
_this3
.
appData
.
snippetsURL
)
{
_this3
.
snippetsMap
.
set
(
"
snippets
-
last
-
update
"
Date
.
now
(
)
)
;
try
{
const
response
=
yield
fetch
(
_this3
.
appData
.
snippetsURL
)
;
if
(
response
.
status
=
=
=
200
)
{
const
payload
=
yield
response
.
text
(
)
;
_this3
.
snippetsMap
.
set
(
"
snippets
"
payload
)
;
_this3
.
snippetsMap
.
set
(
"
snippets
-
cached
-
version
"
_this3
.
appData
.
version
)
;
}
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
}
)
(
)
;
}
_noSnippetFallback
(
)
{
}
_forceOnboardingVisibility
(
shouldBeVisible
)
{
const
onboardingEl
=
document
.
getElementById
(
"
onboarding
-
notification
-
bar
"
)
;
if
(
onboardingEl
)
{
onboardingEl
.
style
.
display
=
shouldBeVisible
?
"
"
:
"
none
"
;
}
}
_showRemoteSnippets
(
)
{
const
snippetsEl
=
document
.
getElementById
(
this
.
elementId
)
;
const
payload
=
this
.
snippetsMap
.
get
(
"
snippets
"
)
;
if
(
!
snippetsEl
)
{
throw
new
Error
(
No
element
was
found
with
id
'
{
this
.
elementId
}
'
.
)
;
}
if
(
!
payload
)
{
throw
new
Error
(
"
No
remote
snippets
were
found
in
gSnippetsMap
.
"
)
;
}
if
(
typeof
payload
!
=
=
"
string
"
)
{
throw
new
Error
(
"
Snippet
payload
was
incorrectly
formatted
"
)
;
}
snippetsEl
.
innerHTML
=
payload
;
for
(
const
scriptEl
of
snippetsEl
.
getElementsByTagName
(
"
script
"
)
)
{
const
relocatedScript
=
document
.
createElement
(
"
script
"
)
;
relocatedScript
.
text
=
scriptEl
.
text
;
scriptEl
.
parentNode
.
replaceChild
(
relocatedScript
scriptEl
)
;
}
}
_onAction
(
msg
)
{
if
(
msg
.
data
.
type
=
=
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SNIPPET_BLOCKED
)
{
if
(
!
this
.
snippetsMap
.
blockList
.
includes
(
msg
.
data
.
data
)
)
{
this
.
snippetsMap
.
set
(
"
blockList
"
this
.
snippetsMap
.
blockList
.
concat
(
msg
.
data
.
data
)
)
;
document
.
getElementById
(
"
snippets
-
container
"
)
.
style
.
display
=
"
none
"
;
}
}
}
init
(
options
)
{
var
_this4
=
this
;
return
_asyncToGenerator
(
function
*
(
)
{
Object
.
assign
(
_this4
{
appData
:
{
}
elementId
:
"
snippets
"
connect
:
true
}
options
)
;
if
(
global
.
RPMAddMessageListener
)
{
global
.
RPMAddMessageListener
(
"
ActivityStream
:
MainToContent
"
_this4
.
_onAction
)
;
}
if
(
_this4
.
connect
)
{
try
{
yield
_this4
.
snippetsMap
.
connect
(
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
for
(
const
key
of
Object
.
keys
(
_this4
.
appData
)
)
{
if
(
key
=
=
=
"
blockList
"
)
{
_this4
.
snippetsMap
.
set
(
"
blockList
"
_this4
.
appData
[
key
]
)
;
}
else
{
_this4
.
snippetsMap
.
set
(
appData
.
{
key
}
_this4
.
appData
[
key
]
)
;
}
}
yield
_this4
.
_refreshSnippets
(
)
;
try
{
_this4
.
_showRemoteSnippets
(
)
;
}
catch
(
e
)
{
_this4
.
_noSnippetFallback
(
e
)
;
}
window
.
dispatchEvent
(
new
Event
(
SNIPPETS_ENABLED_EVENT
)
)
;
_this4
.
_forceOnboardingVisibility
(
true
)
;
_this4
.
initialized
=
true
;
}
)
(
)
;
}
uninit
(
)
{
window
.
dispatchEvent
(
new
Event
(
SNIPPETS_DISABLED_EVENT
)
)
;
this
.
_forceOnboardingVisibility
(
false
)
;
if
(
global
.
RPMRemoveMessageListener
)
{
global
.
RPMRemoveMessageListener
(
"
ActivityStream
:
MainToContent
"
this
.
_onAction
)
;
}
this
.
initialized
=
false
;
}
}
function
addSnippetsSubscriber
(
store
)
{
const
snippets
=
new
SnippetsProvider
(
store
.
dispatch
)
;
let
initializing
=
false
;
store
.
subscribe
(
_asyncToGenerator
(
function
*
(
)
{
const
state
=
store
.
getState
(
)
;
let
snippetsEnabled
=
false
;
try
{
snippetsEnabled
=
JSON
.
parse
(
state
.
Prefs
.
values
[
"
asrouter
.
messageProviders
"
]
)
.
find
(
function
(
i
)
{
return
i
.
id
=
=
=
"
snippets
"
;
}
)
.
enabled
;
}
catch
(
e
)
{
}
const
isASRouterEnabled
=
state
.
Prefs
.
values
.
asrouterExperimentEnabled
&
&
snippetsEnabled
;
if
(
state
.
Prefs
.
values
[
"
feeds
.
snippets
"
]
&
&
!
isASRouterEnabled
&
&
!
state
.
Prefs
.
values
.
disableSnippets
&
&
state
.
Snippets
.
initialized
&
&
!
snippets
.
initialized
&
&
!
initializing
&
&
location
.
href
!
=
=
"
about
:
welcome
"
)
{
initializing
=
true
;
yield
snippets
.
init
(
{
appData
:
state
.
Snippets
}
)
;
initializing
=
false
;
}
else
if
(
(
state
.
Prefs
.
values
[
"
feeds
.
snippets
"
]
=
=
=
false
|
|
state
.
Prefs
.
values
.
disableSnippets
=
=
=
true
)
&
&
snippets
.
initialized
)
{
snippets
.
uninit
(
)
;
}
}
)
)
;
return
{
snippets
}
;
}
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterUtils
"
function
(
)
{
return
ASRouterUtils
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
convertLinks
"
function
(
)
{
return
convertLinks
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterUISurface
"
function
(
)
{
return
ASRouterUISurface
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterContent
"
function
(
)
{
return
ASRouterContent
;
}
)
;
var
fluent_react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
41
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
2
)
;
var
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
7
)
;
var
_components_ImpressionsWrapper_ImpressionsWrapper__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
9
)
;
var
fluent__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
40
)
;
var
_templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
44
)
;
var
react__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_6___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_6__
)
;
var
react_dom__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
10
)
;
var
react_dom__WEBPACK_IMPORTED_MODULE_7___default
=
__webpack_require__
.
n
(
react_dom__WEBPACK_IMPORTED_MODULE_7__
)
;
var
_template_utils__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
11
)
;
var
_templates_SimpleSnippet_SimpleSnippet__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
42
)
;
var
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
const
INCOMING_MESSAGE_NAME
=
"
ASRouter
:
parent
-
to
-
child
"
;
const
OUTGOING_MESSAGE_NAME
=
"
ASRouter
:
child
-
to
-
parent
"
;
const
ASRouterUtils
=
{
addListener
(
listener
)
{
global
.
RPMAddMessageListener
(
INCOMING_MESSAGE_NAME
listener
)
;
}
removeListener
(
listener
)
{
global
.
RPMRemoveMessageListener
(
INCOMING_MESSAGE_NAME
listener
)
;
}
sendMessage
(
action
)
{
global
.
RPMSendAsyncMessage
(
OUTGOING_MESSAGE_NAME
action
)
;
}
blockById
(
id
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
BLOCK_MESSAGE_BY_ID
"
data
:
{
id
}
}
)
;
}
blockBundle
(
bundle
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
BLOCK_BUNDLE
"
data
:
{
bundle
}
}
)
;
}
executeAction
(
button_action
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
USER_ACTION
"
data
:
button_action
}
)
;
}
unblockById
(
id
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
UNBLOCK_MESSAGE_BY_ID
"
data
:
{
id
}
}
)
;
}
unblockBundle
(
bundle
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
UNBLOCK_BUNDLE
"
data
:
{
bundle
}
}
)
;
}
getNextMessage
(
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
GET_NEXT_MESSAGE
"
}
)
;
}
overrideMessage
(
id
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
OVERRIDE_MESSAGE
"
data
:
{
id
}
}
)
;
}
sendTelemetry
(
ping
)
{
const
payload
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
ASRouterUserEvent
(
ping
)
;
global
.
RPMSendAsyncMessage
(
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_2__
[
"
OUTGOING_MESSAGE_NAME
"
]
payload
)
;
}
getEndpoint
(
)
{
if
(
window
.
location
.
href
.
includes
(
"
endpoint
"
)
)
{
const
params
=
new
URLSearchParams
(
window
.
location
.
href
.
slice
(
window
.
location
.
href
.
indexOf
(
"
endpoint
"
)
)
)
;
try
{
const
endpoint
=
new
URL
(
params
.
get
(
"
endpoint
"
)
)
;
return
{
url
:
endpoint
.
href
snippetId
:
params
.
get
(
"
snippetId
"
)
}
;
}
catch
(
e
)
{
}
}
return
null
;
}
}
;
function
shouldSendImpressionOnUpdate
(
nextProps
prevProps
)
{
return
nextProps
.
message
.
id
&
&
(
!
prevProps
.
message
|
|
prevProps
.
message
.
id
!
=
=
nextProps
.
message
.
id
)
;
}
function
generateMessages
(
content
)
{
const
cx
=
new
fluent__WEBPACK_IMPORTED_MODULE_4__
[
"
MessageContext
"
]
(
"
en
-
US
"
)
;
cx
.
addMessages
(
RichTextSnippet
=
{
content
}
)
;
return
[
cx
]
;
}
const
ALLOWED_TAGS
=
{
b
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
b
"
null
)
i
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
i
"
null
)
u
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
u
"
null
)
strong
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
strong
"
null
)
em
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
em
"
null
)
br
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
br
"
null
)
}
;
function
convertLinks
(
links
sendClick
)
{
if
(
links
)
{
return
Object
.
keys
(
links
)
.
reduce
(
(
acc
linkTag
)
=
>
{
acc
[
linkTag
]
=
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
a
"
{
href
:
Object
(
_template_utils__WEBPACK_IMPORTED_MODULE_8__
[
"
safeURI
"
]
)
(
links
[
linkTag
]
.
url
)
"
data
-
metric
"
:
links
[
linkTag
]
.
metric
onClick
:
sendClick
}
)
;
return
acc
;
}
{
}
)
;
}
return
null
;
}
function
RichText
(
props
)
{
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
fluent_react__WEBPACK_IMPORTED_MODULE_0__
[
"
Localized
"
]
_extends
(
{
id
:
"
RichTextSnippet
"
}
ALLOWED_TAGS
convertLinks
(
props
.
links
props
.
sendClick
)
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
span
"
null
props
.
text
)
)
;
}
class
ASRouterUISurface
extends
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onMessageFromParent
=
this
.
onMessageFromParent
.
bind
(
this
)
;
this
.
sendClick
=
this
.
sendClick
.
bind
(
this
)
;
this
.
sendImpression
=
this
.
sendImpression
.
bind
(
this
)
;
this
.
sendUserActionTelemetry
=
this
.
sendUserActionTelemetry
.
bind
(
this
)
;
this
.
state
=
{
message
:
{
}
bundle
:
{
}
}
;
}
sendUserActionTelemetry
(
extraProps
=
{
}
)
{
const
{
message
bundle
}
=
this
.
state
;
if
(
!
message
&
&
!
extraProps
.
message_id
)
{
throw
new
Error
(
You
must
provide
a
message_id
for
bundled
messages
)
;
}
const
eventType
=
{
message
.
provider
|
|
bundle
.
provider
}
_user_event
;
ASRouterUtils
.
sendTelemetry
(
Object
.
assign
(
{
message_id
:
message
.
id
|
|
extraProps
.
message_id
source
:
extraProps
.
id
action
:
eventType
}
extraProps
)
)
;
}
sendImpression
(
extraProps
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
IMPRESSION
"
data
:
this
.
state
.
message
}
)
;
this
.
sendUserActionTelemetry
(
Object
.
assign
(
{
event
:
"
IMPRESSION
"
}
extraProps
)
)
;
}
sendClick
(
event
)
{
const
metric
=
{
value
:
event
.
target
.
dataset
.
metric
id
:
"
NEWTAB_FOOTER_BAR_CONTENT
"
}
;
this
.
sendUserActionTelemetry
(
Object
.
assign
(
{
event
:
"
CLICK_BUTTON
"
}
metric
)
)
;
}
onBlockById
(
id
)
{
return
(
)
=
>
ASRouterUtils
.
blockById
(
id
)
;
}
clearBundle
(
bundle
)
{
return
(
)
=
>
ASRouterUtils
.
blockBundle
(
bundle
)
;
}
onMessageFromParent
(
{
data
:
action
}
)
{
switch
(
action
.
type
)
{
case
"
SET_MESSAGE
"
:
this
.
setState
(
{
message
:
action
.
data
}
)
;
break
;
case
"
SET_BUNDLED_MESSAGES
"
:
this
.
setState
(
{
bundle
:
action
.
data
}
)
;
break
;
case
"
CLEAR_MESSAGE
"
:
if
(
action
.
data
.
id
=
=
=
this
.
state
.
message
.
id
)
{
this
.
setState
(
{
message
:
{
}
}
)
;
}
break
;
case
"
CLEAR_PROVIDER
"
:
if
(
action
.
data
.
id
=
=
=
this
.
state
.
message
.
provider
)
{
this
.
setState
(
{
message
:
{
}
}
)
;
}
break
;
case
"
CLEAR_BUNDLE
"
:
if
(
this
.
state
.
bundle
.
bundle
)
{
this
.
setState
(
{
bundle
:
{
}
}
)
;
}
break
;
case
"
CLEAR_ALL
"
:
this
.
setState
(
{
message
:
{
}
bundle
:
{
}
}
)
;
}
}
componentWillMount
(
)
{
const
endpoint
=
ASRouterUtils
.
getEndpoint
(
)
;
ASRouterUtils
.
addListener
(
this
.
onMessageFromParent
)
;
if
(
this
.
props
.
document
.
location
.
href
=
=
=
"
about
:
welcome
"
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
TRIGGER
"
data
:
{
trigger
:
{
id
:
"
firstRun
"
}
}
}
)
;
}
else
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
CONNECT_UI_REQUEST
"
data
:
{
endpoint
}
}
)
;
}
}
componentWillUnmount
(
)
{
ASRouterUtils
.
removeListener
(
this
.
onMessageFromParent
)
;
}
renderSnippets
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_components_ImpressionsWrapper_ImpressionsWrapper__WEBPACK_IMPORTED_MODULE_3__
[
"
ImpressionsWrapper
"
]
{
id
:
"
NEWTAB_FOOTER_BAR
"
message
:
this
.
state
.
message
sendImpression
:
this
.
sendImpression
shouldSendImpressionOnUpdate
:
shouldSendImpressionOnUpdate
document
:
this
.
props
.
document
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
fluent_react__WEBPACK_IMPORTED_MODULE_0__
[
"
LocalizationProvider
"
]
{
messages
:
generateMessages
(
this
.
state
.
message
.
content
.
text
)
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_templates_SimpleSnippet_SimpleSnippet__WEBPACK_IMPORTED_MODULE_9__
[
"
SimpleSnippet
"
]
_extends
(
{
}
this
.
state
.
message
{
richText
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
RichText
{
text
:
this
.
state
.
message
.
content
.
text
links
:
this
.
state
.
message
.
content
.
links
sendClick
:
this
.
sendClick
}
)
UISurface
:
"
NEWTAB_FOOTER_BAR
"
getNextMessage
:
ASRouterUtils
.
getNextMessage
onBlock
:
this
.
onBlockById
(
this
.
state
.
message
.
id
)
onAction
:
ASRouterUtils
.
executeAction
sendUserActionTelemetry
:
this
.
sendUserActionTelemetry
}
)
)
)
)
;
}
renderOnboarding
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_5__
[
"
OnboardingMessage
"
]
_extends
(
{
}
this
.
state
.
bundle
{
UISurface
:
"
NEWTAB_OVERLAY
"
onAction
:
ASRouterUtils
.
executeAction
onDoneButton
:
this
.
clearBundle
(
this
.
state
.
bundle
.
bundle
)
getNextMessage
:
ASRouterUtils
.
getNextMessage
sendUserActionTelemetry
:
this
.
sendUserActionTelemetry
}
)
)
;
}
render
(
)
{
const
{
message
bundle
}
=
this
.
state
;
if
(
!
message
.
id
&
&
!
bundle
.
template
)
{
return
null
;
}
if
(
bundle
.
template
=
=
=
"
onboarding
"
)
{
return
this
.
renderOnboarding
(
)
;
}
return
this
.
renderSnippets
(
)
;
}
}
ASRouterUISurface
.
defaultProps
=
{
document
:
global
.
document
}
;
class
ASRouterContent
{
constructor
(
)
{
this
.
initialized
=
false
;
this
.
containerElement
=
null
;
}
_mount
(
)
{
this
.
containerElement
=
global
.
document
.
getElementById
(
"
snippets
-
container
"
)
;
react_dom__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
render
(
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
ASRouterUISurface
null
)
this
.
containerElement
)
;
}
_unmount
(
)
{
react_dom__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
unmountComponentAtNode
(
this
.
containerElement
)
;
}
init
(
)
{
this
.
_mount
(
)
;
this
.
initialized
=
true
;
}
uninit
(
)
{
if
(
this
.
initialized
)
{
this
.
_unmount
(
)
;
this
.
initialized
=
false
;
}
}
}
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
exports
)
{
module
.
exports
=
React
;
}
)
(
function
(
module
exports
)
{
module
.
exports
=
PropTypes
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
MERGE_STORE_ACTION
"
function
(
)
{
return
MERGE_STORE_ACTION
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
OUTGOING_MESSAGE_NAME
"
function
(
)
{
return
OUTGOING_MESSAGE_NAME
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
INCOMING_MESSAGE_NAME
"
function
(
)
{
return
INCOMING_MESSAGE_NAME
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
EARLY_QUEUED_ACTIONS
"
function
(
)
{
return
EARLY_QUEUED_ACTIONS
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
rehydrationMiddleware
"
function
(
)
{
return
rehydrationMiddleware
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
queueEarlyMessageMiddleware
"
function
(
)
{
return
queueEarlyMessageMiddleware
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
initStore
"
function
(
)
{
return
initStore
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
8
)
;
var
redux__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
redux__WEBPACK_IMPORTED_MODULE_1__
)
;
const
MERGE_STORE_ACTION
=
"
NEW_TAB_INITIAL_STATE
"
;
const
OUTGOING_MESSAGE_NAME
=
"
ActivityStream
:
ContentToMain
"
;
const
INCOMING_MESSAGE_NAME
=
"
ActivityStream
:
MainToContent
"
;
const
EARLY_QUEUED_ACTIONS
=
[
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
PAGE_PRERENDERED
]
;
function
mergeStateReducer
(
mainReducer
)
{
return
(
prevState
action
)
=
>
{
if
(
action
.
type
=
=
=
MERGE_STORE_ACTION
)
{
return
Object
.
assign
(
{
}
prevState
action
.
data
)
;
}
return
mainReducer
(
prevState
action
)
;
}
;
}
const
messageMiddleware
=
store
=
>
next
=
>
action
=
>
{
const
skipLocal
=
action
.
meta
&
&
action
.
meta
.
skipLocal
;
if
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isSendToMain
(
action
)
)
{
RPMSendAsyncMessage
(
OUTGOING_MESSAGE_NAME
action
)
;
}
if
(
!
skipLocal
)
{
next
(
action
)
;
}
}
;
const
rehydrationMiddleware
=
store
=
>
next
=
>
action
=
>
{
if
(
store
.
_didRehydrate
)
{
return
next
(
action
)
;
}
const
isMergeStoreAction
=
action
.
type
=
=
=
MERGE_STORE_ACTION
;
const
isRehydrationRequest
=
action
.
type
=
=
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_STATE_REQUEST
;
if
(
isRehydrationRequest
)
{
store
.
_didRequestInitialState
=
true
;
return
next
(
action
)
;
}
if
(
isMergeStoreAction
)
{
store
.
_didRehydrate
=
true
;
return
next
(
action
)
;
}
if
(
store
.
_didRequestInitialState
&
&
action
.
type
=
=
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
INIT
)
{
return
next
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_STATE_REQUEST
}
)
)
;
}
if
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isBroadcastToContent
(
action
)
|
|
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isSendToOneContent
(
action
)
|
|
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isSendToPreloaded
(
action
)
)
{
return
null
;
}
return
next
(
action
)
;
}
;
const
queueEarlyMessageMiddleware
=
store
=
>
next
=
>
action
=
>
{
if
(
store
.
_receivedFromMain
)
{
next
(
action
)
;
}
else
if
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isFromMain
(
action
)
)
{
next
(
action
)
;
store
.
_receivedFromMain
=
true
;
if
(
store
.
_earlyActionQueue
)
{
store
.
_earlyActionQueue
.
forEach
(
next
)
;
store
.
_earlyActionQueue
=
[
]
;
}
}
else
if
(
EARLY_QUEUED_ACTIONS
.
includes
(
action
.
type
)
)
{
store
.
_earlyActionQueue
=
store
.
_earlyActionQueue
|
|
[
]
;
store
.
_earlyActionQueue
.
push
(
action
)
;
}
else
{
next
(
action
)
;
}
}
;
function
initStore
(
reducers
initialState
)
{
const
store
=
Object
(
redux__WEBPACK_IMPORTED_MODULE_1__
[
"
createStore
"
]
)
(
mergeStateReducer
(
Object
(
redux__WEBPACK_IMPORTED_MODULE_1__
[
"
combineReducers
"
]
)
(
reducers
)
)
initialState
global
.
RPMAddMessageListener
&
&
Object
(
redux__WEBPACK_IMPORTED_MODULE_1__
[
"
applyMiddleware
"
]
)
(
rehydrationMiddleware
queueEarlyMessageMiddleware
messageMiddleware
)
)
;
store
.
_didRehydrate
=
false
;
store
.
_didRequestInitialState
=
false
;
if
(
global
.
RPMAddMessageListener
)
{
global
.
RPMAddMessageListener
(
INCOMING_MESSAGE_NAME
msg
=
>
{
try
{
store
.
dispatch
(
msg
.
data
)
;
}
catch
(
ex
)
{
console
.
error
(
"
Content
msg
:
"
msg
"
Dispatch
error
:
"
ex
)
;
dump
(
Content
msg
:
{
JSON
.
stringify
(
msg
)
}
\
nDispatch
error
:
{
ex
}
\
n
{
ex
.
stack
}
)
;
}
}
)
;
}
return
store
;
}
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
exports
)
{
module
.
exports
=
Redux
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
VISIBLE
"
function
(
)
{
return
VISIBLE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
VISIBILITY_CHANGE_EVENT
"
function
(
)
{
return
VISIBILITY_CHANGE_EVENT
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ImpressionsWrapper
"
function
(
)
{
return
ImpressionsWrapper
;
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
class
ImpressionsWrapper
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
sendImpressionOrAddListener
(
)
{
if
(
this
.
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
props
.
sendImpression
(
{
id
:
this
.
props
.
id
}
)
;
}
else
{
if
(
this
.
_onVisibilityChange
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
this
.
_onVisibilityChange
=
(
)
=
>
{
if
(
this
.
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
props
.
sendImpression
(
{
id
:
this
.
props
.
id
}
)
;
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
;
this
.
props
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
componentWillUnmount
(
)
{
if
(
this
.
_onVisibilityChange
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
componentDidMount
(
)
{
if
(
this
.
props
.
sendOnMount
)
{
this
.
sendImpressionOrAddListener
(
)
;
}
}
componentDidUpdate
(
prevProps
)
{
if
(
this
.
props
.
shouldSendImpressionOnUpdate
(
this
.
props
prevProps
)
)
{
this
.
sendImpressionOrAddListener
(
)
;
}
}
render
(
)
{
return
this
.
props
.
children
;
}
}
ImpressionsWrapper
.
defaultProps
=
{
document
:
global
.
document
sendOnMount
:
true
}
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
exports
)
{
module
.
exports
=
ReactDOM
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
safeURI
"
function
(
)
{
return
safeURI
;
}
)
;
function
safeURI
(
url
)
{
if
(
!
url
)
{
return
"
"
;
}
const
{
protocol
}
=
new
URL
(
url
)
;
const
isAllowed
=
[
"
http
:
"
"
https
:
"
"
data
:
"
"
resource
:
"
"
chrome
:
"
]
.
includes
(
protocol
)
;
if
(
!
isAllowed
)
{
console
.
warn
(
The
protocol
{
protocol
}
is
not
allowed
for
template
URLs
.
)
;
}
return
isAllowed
?
url
:
"
"
;
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
_Base
"
function
(
)
{
return
_Base
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
BaseContent
"
function
(
)
{
return
BaseContent
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
Base
"
function
(
)
{
return
Base
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
)
;
var
content_src_components_ASRouterAdmin_ASRouterAdmin__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
14
)
;
var
content_src_components_ConfirmDialog_ConfirmDialog__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
15
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_4___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
)
;
var
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
17
)
;
var
content_src_components_ManualMigration_ManualMigration__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
18
)
;
var
common_PrerenderData_jsm__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
19
)
;
var
react__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_8___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_8__
)
;
var
content_src_components_Search_Search__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
20
)
;
var
content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_10__
=
__webpack_require__
(
22
)
;
var
content_src_components_StartupOverlay_StartupOverlay__WEBPACK_IMPORTED_MODULE_11__
=
__webpack_require__
(
37
)
;
const
PrefsButton
=
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
injectIntl
"
]
)
(
props
=
>
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
prefs
-
button
"
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
button
"
{
className
:
"
icon
icon
-
settings
"
onClick
:
props
.
onClick
title
:
props
.
intl
.
formatMessage
(
{
id
:
"
settings_pane_button_label
"
}
)
}
)
)
)
;
function
addLocaleDataForReactIntl
(
locale
)
{
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
addLocaleData
"
]
)
(
[
{
locale
parentLocale
:
"
en
"
}
]
)
;
}
function
debounce
(
func
wait
)
{
let
timer
;
return
(
.
.
.
args
)
=
>
{
if
(
timer
)
{
return
;
}
let
wakeUp
=
(
)
=
>
{
timer
=
null
;
}
;
timer
=
setTimeout
(
wakeUp
wait
)
;
func
.
apply
(
this
args
)
;
}
;
}
class
_Base
extends
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
PureComponent
{
componentWillMount
(
)
{
const
{
App
locale
}
=
this
.
props
;
this
.
sendNewTabRehydrated
(
App
)
;
addLocaleDataForReactIntl
(
locale
)
;
if
(
this
.
props
.
isFirstrun
)
{
global
.
document
.
body
.
classList
.
add
(
"
welcome
"
"
hide
-
main
"
)
;
}
}
componentDidMount
(
)
{
if
(
this
.
props
.
isPrerendered
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_STATE_REQUEST
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
PAGE_PRERENDERED
}
)
)
;
}
}
componentWillUnmount
(
)
{
this
.
updateTheme
(
)
;
}
hasTopStoriesSectionChanged
(
nextProps
)
{
const
nPropsSections
=
nextProps
.
Sections
.
find
(
section
=
>
section
.
id
=
=
=
"
topstories
"
)
;
const
tPropsSections
=
this
.
props
.
Sections
.
find
(
section
=
>
section
.
id
=
=
=
"
topstories
"
)
;
if
(
nPropsSections
&
&
nPropsSections
.
options
)
{
if
(
!
tPropsSections
|
|
!
tPropsSections
.
options
)
{
return
true
;
}
if
(
nPropsSections
.
options
.
show_spocs
!
=
=
tPropsSections
.
options
.
show_spocs
)
{
return
true
;
}
if
(
nPropsSections
.
options
.
stories_endpoint
!
=
=
tPropsSections
.
options
.
stories_endpoint
)
{
return
true
;
}
}
return
false
;
}
componentWillUpdate
(
nextProps
)
{
this
.
updateTheme
(
)
;
if
(
this
.
hasTopStoriesSectionChanged
(
nextProps
)
)
{
this
.
renderNotified
=
false
;
}
this
.
sendNewTabRehydrated
(
nextProps
.
App
)
;
}
updateTheme
(
)
{
const
bodyClassName
=
[
"
activity
-
stream
"
document
.
body
.
classList
.
contains
(
"
welcome
"
)
?
"
welcome
"
:
"
"
document
.
body
.
classList
.
contains
(
"
hide
-
main
"
)
?
"
hide
-
main
"
:
"
"
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
global
.
document
.
body
.
className
=
bodyClassName
;
}
sendNewTabRehydrated
(
App
)
{
if
(
App
&
&
App
.
initialized
&
&
!
this
.
renderNotified
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_REHYDRATED
data
:
{
}
}
)
)
;
this
.
renderNotified
=
true
;
}
}
render
(
)
{
const
{
props
}
=
this
;
const
{
App
locale
strings
}
=
props
;
const
{
initialized
}
=
App
;
const
prefs
=
props
.
Prefs
.
values
;
if
(
prefs
.
asrouterExperimentEnabled
&
&
window
.
location
.
hash
=
=
=
"
#
asrouter
"
)
{
return
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_ASRouterAdmin_ASRouterAdmin__WEBPACK_IMPORTED_MODULE_2__
[
"
ASRouterAdmin
"
]
null
)
;
}
if
(
!
props
.
isPrerendered
&
&
!
initialized
)
{
return
null
;
}
let
isOnboardingEnabled
=
false
;
try
{
isOnboardingEnabled
=
JSON
.
parse
(
prefs
[
"
asrouter
.
messageProviders
"
]
)
.
find
(
i
=
>
i
.
id
=
=
=
"
onboarding
"
)
.
enabled
;
}
catch
(
e
)
{
}
if
(
isOnboardingEnabled
)
{
global
.
document
.
body
.
classList
.
add
(
"
hide
-
onboarding
"
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
IntlProvider
"
]
{
locale
:
locale
messages
:
strings
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__
[
"
ErrorBoundary
"
]
{
className
:
"
base
-
content
-
fallback
"
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
BaseContent
this
.
props
)
)
)
;
}
}
class
BaseContent
extends
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
openPreferences
=
this
.
openPreferences
.
bind
(
this
)
;
this
.
onWindowScroll
=
debounce
(
this
.
onWindowScroll
.
bind
(
this
)
5
)
;
this
.
state
=
{
fixedSearch
:
false
}
;
}
componentDidMount
(
)
{
global
.
addEventListener
(
"
scroll
"
this
.
onWindowScroll
)
;
}
componentWillUnmount
(
)
{
global
.
removeEventListener
(
"
scroll
"
this
.
onWindowScroll
)
;
}
onWindowScroll
(
)
{
const
SCROLL_THRESHOLD
=
34
;
if
(
global
.
scrollY
>
SCROLL_THRESHOLD
&
&
!
this
.
state
.
fixedSearch
)
{
this
.
setState
(
{
fixedSearch
:
true
}
)
;
}
else
if
(
global
.
scrollY
<
=
SCROLL_THRESHOLD
&
&
this
.
state
.
fixedSearch
)
{
this
.
setState
(
{
fixedSearch
:
false
}
)
;
}
}
openPreferences
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SETTINGS_OPEN
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
OPEN_NEWTAB_PREFS
"
}
)
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
App
}
=
props
;
const
{
initialized
}
=
App
;
const
prefs
=
props
.
Prefs
.
values
;
const
shouldBeFixedToTop
=
common_PrerenderData_jsm__WEBPACK_IMPORTED_MODULE_7__
[
"
PrerenderData
"
]
.
arePrefsValid
(
name
=
>
prefs
[
name
]
)
;
const
outerClassName
=
[
"
outer
-
wrapper
"
shouldBeFixedToTop
&
&
"
fixed
-
to
-
top
"
prefs
.
showSearch
&
&
this
.
state
.
fixedSearch
&
&
"
fixed
-
search
"
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
outerClassName
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
main
"
null
prefs
.
showSearch
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
non
-
collapsible
-
section
"
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__
[
"
ErrorBoundary
"
]
null
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_Search_Search__WEBPACK_IMPORTED_MODULE_9__
[
"
Search
"
]
null
)
)
)
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
body
-
wrapper
{
initialized
?
"
on
"
:
"
"
}
}
!
prefs
.
migrationExpired
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
non
-
collapsible
-
section
"
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_ManualMigration_ManualMigration__WEBPACK_IMPORTED_MODULE_6__
[
"
ManualMigration
"
]
null
)
)
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_10__
[
"
Sections
"
]
null
)
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
PrefsButton
{
onClick
:
this
.
openPreferences
}
)
)
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_ConfirmDialog_ConfirmDialog__WEBPACK_IMPORTED_MODULE_3__
[
"
ConfirmDialog
"
]
null
)
)
)
this
.
props
.
isFirstrun
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_StartupOverlay_StartupOverlay__WEBPACK_IMPORTED_MODULE_11__
[
"
StartupOverlay
"
]
null
)
)
;
}
}
const
Base
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
[
"
connect
"
]
)
(
state
=
>
(
{
App
:
state
.
App
Prefs
:
state
.
Prefs
Sections
:
state
.
Sections
}
)
)
(
_Base
)
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
exports
)
{
module
.
exports
=
ReactIntl
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterAdmin
"
function
(
)
{
return
ASRouterAdmin
;
}
)
;
var
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
4
)
;
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
class
ASRouterAdmin
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onMessage
=
this
.
onMessage
.
bind
(
this
)
;
this
.
findOtherBundledMessagesOfSameTemplate
=
this
.
findOtherBundledMessagesOfSameTemplate
.
bind
(
this
)
;
this
.
state
=
{
}
;
}
onMessage
(
{
data
:
action
}
)
{
if
(
action
.
type
=
=
=
"
ADMIN_SET_STATE
"
)
{
this
.
setState
(
action
.
data
)
;
}
}
componentWillMount
(
)
{
const
endpoint
=
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
getEndpoint
(
)
;
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
ADMIN_CONNECT_STATE
"
data
:
{
endpoint
}
}
)
;
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
addListener
(
this
.
onMessage
)
;
}
componentWillUnmount
(
)
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
removeListener
(
this
.
onMessage
)
;
}
findOtherBundledMessagesOfSameTemplate
(
template
)
{
return
this
.
state
.
messages
.
filter
(
msg
=
>
msg
.
template
=
=
=
template
&
&
msg
.
bundled
)
;
}
handleBlock
(
msg
)
{
if
(
msg
.
bundled
)
{
let
bundle
=
this
.
findOtherBundledMessagesOfSameTemplate
(
msg
.
template
)
;
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
blockBundle
(
bundle
)
;
}
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
blockById
(
msg
.
id
)
;
}
handleUnblock
(
msg
)
{
if
(
msg
.
bundled
)
{
let
bundle
=
this
.
findOtherBundledMessagesOfSameTemplate
(
msg
.
template
)
;
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
unblockBundle
(
bundle
)
;
}
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
unblockById
(
msg
.
id
)
;
}
handleOverride
(
id
)
{
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
overrideMessage
(
id
)
;
}
renderMessageItem
(
msg
)
{
const
isCurrent
=
msg
.
id
=
=
=
this
.
state
.
lastMessageId
;
const
isBlocked
=
this
.
state
.
messageBlockList
.
includes
(
msg
.
id
)
;
const
impressions
=
this
.
state
.
messageImpressions
[
msg
.
id
]
?
this
.
state
.
impressions
[
msg
.
id
]
.
length
:
0
;
let
itemClassName
=
"
message
-
item
"
;
if
(
isCurrent
)
{
itemClassName
+
=
"
current
"
;
}
if
(
isBlocked
)
{
itemClassName
+
=
"
blocked
"
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
tr
"
{
className
:
itemClassName
key
:
msg
.
id
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
id
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
null
msg
.
id
"
"
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
br
"
null
)
)
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
button
{
isBlocked
?
"
"
:
"
primary
"
}
onClick
:
isBlocked
?
this
.
handleUnblock
(
msg
)
:
this
.
handleBlock
(
msg
)
}
isBlocked
?
"
Unblock
"
:
"
Block
"
)
isBlocked
?
null
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
"
onClick
:
this
.
handleOverride
(
msg
.
id
)
}
"
Show
"
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
br
"
null
)
"
(
"
impressions
"
impressions
)
"
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
summary
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
pre
"
null
JSON
.
stringify
(
msg
null
2
)
)
)
)
;
}
renderMessages
(
)
{
if
(
!
this
.
state
.
messages
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
tbody
"
null
this
.
state
.
messages
.
map
(
msg
=
>
this
.
renderMessageItem
(
msg
)
)
)
)
;
}
renderProviders
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
tbody
"
null
this
.
state
.
providers
.
map
(
(
provider
i
)
=
>
{
let
label
=
"
(
local
)
"
;
if
(
provider
.
type
=
=
=
"
remote
"
)
{
label
=
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
target
:
"
_blank
"
href
:
provider
.
url
}
provider
.
url
)
;
}
else
if
(
provider
.
type
=
=
=
"
remote
-
settings
"
)
{
label
=
{
provider
.
bucket
}
(
Remote
Settings
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
key
:
i
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
td
"
null
provider
.
id
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
td
"
null
label
)
)
;
}
)
)
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
asrouter
-
admin
outer
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
h1
"
null
"
AS
Router
Admin
"
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
primary
"
onClick
:
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterUtils
"
]
.
getNextMessage
}
"
Refresh
Current
Message
"
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
h2
"
null
"
Message
Providers
"
)
this
.
state
.
providers
?
this
.
renderProviders
(
)
:
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
h2
"
null
"
Messages
"
)
this
.
renderMessages
(
)
)
;
}
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_ConfirmDialog
"
function
(
)
{
return
_ConfirmDialog
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ConfirmDialog
"
function
(
)
{
return
ConfirmDialog
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_2___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
)
;
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
class
_ConfirmDialog
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
_handleCancelBtn
=
this
.
_handleCancelBtn
.
bind
(
this
)
;
this
.
_handleConfirmBtn
=
this
.
_handleConfirmBtn
.
bind
(
this
)
;
}
_handleCancelBtn
(
)
{
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DIALOG_CANCEL
}
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DIALOG_CANCEL
source
:
this
.
props
.
data
.
eventSource
}
)
)
;
}
_handleConfirmBtn
(
)
{
this
.
props
.
data
.
onConfirm
.
forEach
(
this
.
props
.
dispatch
)
;
}
_renderModalMessage
(
)
{
const
message_body
=
this
.
props
.
data
.
body_string_id
;
if
(
!
message_body
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
null
message_body
.
map
(
msg
=
>
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
p
"
{
key
:
msg
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
[
"
FormattedMessage
"
]
{
id
:
msg
}
)
)
)
)
;
}
render
(
)
{
if
(
!
this
.
props
.
visible
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
confirmation
-
dialog
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
-
overlay
"
onClick
:
this
.
_handleCancelBtn
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
section
"
{
className
:
"
modal
-
message
"
}
this
.
props
.
data
.
icon
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
icon
icon
-
spacer
icon
-
{
this
.
props
.
data
.
icon
}
}
)
this
.
_renderModalMessage
(
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
section
"
{
className
:
"
actions
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
onClick
:
this
.
_handleCancelBtn
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
[
"
FormattedMessage
"
]
{
id
:
this
.
props
.
data
.
cancel_button_string_id
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
"
onClick
:
this
.
_handleConfirmBtn
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
[
"
FormattedMessage
"
]
{
id
:
this
.
props
.
data
.
confirm_button_string_id
}
)
)
)
)
)
;
}
}
const
ConfirmDialog
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
[
"
connect
"
]
)
(
state
=
>
state
.
Dialog
)
(
_ConfirmDialog
)
;
}
)
(
function
(
module
exports
)
{
module
.
exports
=
ReactRedux
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ErrorBoundaryFallback
"
function
(
)
{
return
ErrorBoundaryFallback
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ErrorBoundary
"
function
(
)
{
return
ErrorBoundary
;
}
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
)
;
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
class
ErrorBoundaryFallback
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
windowObj
=
this
.
props
.
windowObj
|
|
window
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
onClick
(
)
{
this
.
windowObj
.
location
.
reload
(
true
)
;
}
render
(
)
{
const
defaultClass
=
"
as
-
error
-
fallback
"
;
let
className
;
if
(
"
className
"
in
this
.
props
)
{
className
=
{
this
.
props
.
className
}
{
defaultClass
}
;
}
else
{
className
=
defaultClass
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
className
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
{
defaultMessage
:
"
Oops
something
went
wrong
loading
this
content
.
"
id
:
"
error_fallback_default_info
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
href
:
"
#
"
className
:
"
reload
-
button
"
onClick
:
this
.
onClick
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
{
defaultMessage
:
"
Refresh
page
to
try
again
.
"
id
:
"
error_fallback_default_refresh_suggestion
"
}
)
)
)
)
;
}
}
ErrorBoundaryFallback
.
defaultProps
=
{
className
:
"
as
-
error
-
fallback
"
}
;
class
ErrorBoundary
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
hasError
:
false
}
;
}
componentDidCatch
(
error
info
)
{
this
.
setState
(
{
hasError
:
true
}
)
;
}
render
(
)
{
if
(
!
this
.
state
.
hasError
)
{
return
this
.
props
.
children
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
this
.
props
.
FallbackComponent
{
className
:
this
.
props
.
className
}
)
;
}
}
ErrorBoundary
.
defaultProps
=
{
FallbackComponent
:
ErrorBoundaryFallback
}
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_ManualMigration
"
function
(
)
{
return
_ManualMigration
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ManualMigration
"
function
(
)
{
return
ManualMigration
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_2___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
)
;
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
class
_ManualMigration
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onLaunchTour
=
this
.
onLaunchTour
.
bind
(
this
)
;
this
.
onCancelTour
=
this
.
onCancelTour
.
bind
(
this
)
;
}
onLaunchTour
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
MIGRATION_START
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
MIGRATION_START
}
)
)
;
}
onCancelTour
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
MIGRATION_CANCEL
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
MIGRATION_CANCEL
}
)
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
manual
-
migration
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
p
"
null
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
import
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
[
"
FormattedMessage
"
]
{
id
:
"
manual_migration_explanation2
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
manual
-
migration
-
actions
actions
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
className
:
"
dismiss
"
onClick
:
this
.
onCancelTour
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
[
"
FormattedMessage
"
]
{
id
:
"
manual_migration_cancel_button
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
onClick
:
this
.
onLaunchTour
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
[
"
FormattedMessage
"
]
{
id
:
"
manual_migration_import_button
"
}
)
)
)
)
;
}
}
const
ManualMigration
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
[
"
connect
"
]
)
(
)
(
_ManualMigration
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_PrerenderData
"
function
(
)
{
return
_PrerenderData
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
PrerenderData
"
function
(
)
{
return
PrerenderData
;
}
)
;
class
_PrerenderData
{
constructor
(
options
)
{
this
.
initialPrefs
=
options
.
initialPrefs
;
this
.
initialSections
=
options
.
initialSections
;
this
.
_setValidation
(
options
.
validation
)
;
}
get
validation
(
)
{
return
this
.
_validation
;
}
set
validation
(
value
)
{
this
.
_setValidation
(
value
)
;
}
get
invalidatingPrefs
(
)
{
return
this
.
_invalidatingPrefs
;
}
_setValidation
(
value
=
[
]
)
{
this
.
_validation
=
value
;
this
.
_invalidatingPrefs
=
value
.
reduce
(
(
result
next
)
=
>
{
if
(
typeof
next
=
=
=
"
string
"
)
{
result
.
push
(
next
)
;
return
result
;
}
else
if
(
next
&
&
next
.
oneOf
)
{
return
result
.
concat
(
next
.
oneOf
)
;
}
else
if
(
next
&
&
next
.
indexedDB
)
{
return
result
.
concat
(
next
.
indexedDB
)
;
}
throw
new
Error
(
"
Your
validation
configuration
is
not
properly
configured
"
)
;
}
[
]
)
;
}
arePrefsValid
(
getPref
indexedDBPrefs
)
{
for
(
const
prefs
of
this
.
validation
)
{
if
(
prefs
&
&
prefs
.
oneOf
&
&
!
prefs
.
oneOf
.
some
(
name
=
>
getPref
(
name
)
=
=
=
this
.
initialPrefs
[
name
]
)
)
{
return
false
;
}
else
if
(
indexedDBPrefs
&
&
prefs
&
&
prefs
.
indexedDB
)
{
const
anyModifiedPrefs
=
prefs
.
indexedDB
.
some
(
prefName
=
>
indexedDBPrefs
.
some
(
pref
=
>
pref
&
&
pref
[
prefName
]
)
)
;
if
(
anyModifiedPrefs
)
{
return
false
;
}
}
else
if
(
getPref
(
prefs
)
!
=
=
this
.
initialPrefs
[
prefs
]
)
{
return
false
;
}
}
return
true
;
}
}
var
PrerenderData
=
new
_PrerenderData
(
{
initialPrefs
:
{
"
migrationExpired
"
:
true
"
feeds
.
topsites
"
:
true
"
showSearch
"
:
true
"
topSitesRows
"
:
1
"
feeds
.
section
.
topstories
"
:
true
"
feeds
.
section
.
highlights
"
:
true
"
sectionOrder
"
:
"
topsites
topstories
highlights
"
"
collapsed
"
:
false
}
validation
:
[
"
feeds
.
topsites
"
"
showSearch
"
"
topSitesRows
"
"
sectionOrder
"
{
oneOf
:
[
"
feeds
.
section
.
topstories
"
"
feeds
.
section
.
highlights
"
]
}
{
indexedDB
:
[
"
collapsed
"
]
}
]
initialSections
:
[
{
enabled
:
true
icon
:
"
pocket
"
id
:
"
topstories
"
order
:
1
title
:
{
id
:
"
header_recommended_by
"
values
:
{
provider
:
"
Pocket
"
}
}
}
{
enabled
:
true
id
:
"
highlights
"
icon
:
"
highlights
"
order
:
2
title
:
{
id
:
"
header_highlights
"
}
}
]
}
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_Search
"
function
(
)
{
return
_Search
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
Search
"
function
(
)
{
return
Search
;
}
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
2
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_2___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
)
;
var
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
21
)
;
var
react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_4___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_4__
)
;
class
_Search
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
this
.
onInputMount
=
this
.
onInputMount
.
bind
(
this
)
;
}
handleEvent
(
event
)
{
if
(
event
.
detail
.
type
=
=
=
"
Search
"
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
SEARCH
"
}
)
)
;
}
}
onClick
(
event
)
{
window
.
gContentSearchController
.
search
(
event
)
;
}
componentWillUnmount
(
)
{
delete
window
.
gContentSearchController
;
}
onInputMount
(
input
)
{
if
(
input
)
{
const
healthReportKey
=
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_3__
[
"
IS_NEWTAB
"
]
?
"
newtab
"
:
"
abouthome
"
;
const
searchSource
=
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_3__
[
"
IS_NEWTAB
"
]
?
"
newtab
"
:
"
homepage
"
;
window
.
gContentSearchController
=
new
ContentSearchUIController
(
input
input
.
parentNode
healthReportKey
searchSource
)
;
addEventListener
(
"
ContentSearchClient
"
this
)
;
}
else
{
window
.
gContentSearchController
=
null
;
removeEventListener
(
"
ContentSearchClient
"
this
)
;
}
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
search
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
search
-
inner
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
label
"
{
htmlFor
:
"
newtab
-
search
-
text
"
className
:
"
search
-
label
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
className
:
"
sr
-
only
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
{
id
:
"
search_web_placeholder
"
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
id
:
"
newtab
-
search
-
text
"
maxLength
:
"
256
"
placeholder
:
this
.
props
.
intl
.
formatMessage
(
{
id
:
"
search_web_placeholder
"
}
)
ref
:
this
.
onInputMount
title
:
this
.
props
.
intl
.
formatMessage
(
{
id
:
"
search_web_placeholder
"
}
)
type
:
"
search
"
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
id
:
"
searchSubmit
"
className
:
"
search
-
button
"
onClick
:
this
.
onClick
title
:
this
.
props
.
intl
.
formatMessage
(
{
id
:
"
search_button
"
}
)
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
className
:
"
sr
-
only
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
{
id
:
"
search_button
"
}
)
)
)
)
)
;
}
}
const
Search
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
[
"
connect
"
]
)
(
)
(
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
injectIntl
"
]
)
(
_Search
)
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
IS_NEWTAB
"
function
(
)
{
return
IS_NEWTAB
;
}
)
;
const
IS_NEWTAB
=
global
.
document
&
&
global
.
document
.
documentURI
=
=
=
"
about
:
newtab
"
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
Section
"
function
(
)
{
return
Section
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
SectionIntl
"
function
(
)
{
return
SectionIntl
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_Sections
"
function
(
)
{
return
_Sections
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
Sections
"
function
(
)
{
return
Sections
;
}
)
;
var
content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
45
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
2
)
;
var
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
27
)
;
var
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
30
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_5___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_5__
)
;
var
react__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_6___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_6__
)
;
var
content_src_components_Topics_Topics__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
32
)
;
var
content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
33
)
;
var
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
const
CARDS_PER_ROW_DEFAULT
=
3
;
const
CARDS_PER_ROW_COMPACT_WIDE
=
4
;
function
getFormattedMessage
(
message
)
{
return
typeof
message
=
=
=
"
string
"
?
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
span
"
null
message
)
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
message
)
;
}
class
Section
extends
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
PureComponent
{
get
numRows
(
)
{
const
{
rowsPref
maxRows
Prefs
}
=
this
.
props
;
return
rowsPref
?
Prefs
.
values
[
rowsPref
]
:
maxRows
;
}
_dispatchImpressionStats
(
)
{
const
{
props
}
=
this
;
let
cardsPerRow
=
CARDS_PER_ROW_DEFAULT
;
if
(
props
.
compactCards
&
&
global
.
matchMedia
(
(
min
-
width
:
1072px
)
)
.
matches
)
{
cardsPerRow
=
CARDS_PER_ROW_COMPACT_WIDE
;
}
const
maxCards
=
cardsPerRow
*
this
.
numRows
;
const
cards
=
props
.
rows
.
slice
(
0
maxCards
)
;
if
(
this
.
needsImpressionStats
(
cards
)
)
{
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_2__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
props
.
eventSource
tiles
:
cards
.
map
(
link
=
>
(
{
id
:
link
.
guid
}
)
)
}
)
)
;
this
.
impressionCardGuids
=
cards
.
map
(
link
=
>
link
.
guid
)
;
}
}
sendImpressionStatsOrAddListener
(
)
{
const
{
props
}
=
this
;
if
(
!
props
.
shouldSendImpressionStats
|
|
!
props
.
dispatch
)
{
return
;
}
if
(
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
_dispatchImpressionStats
(
)
;
}
else
{
if
(
this
.
_onVisibilityChange
)
{
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
this
.
_onVisibilityChange
=
(
)
=
>
{
if
(
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
if
(
!
this
.
props
.
pref
.
collapsed
)
{
this
.
_dispatchImpressionStats
(
)
;
}
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
;
props
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
componentDidMount
(
)
{
if
(
this
.
props
.
rows
.
length
&
&
!
this
.
props
.
pref
.
collapsed
)
{
this
.
sendImpressionStatsOrAddListener
(
)
;
}
}
componentDidUpdate
(
prevProps
)
{
const
{
props
}
=
this
;
const
isCollapsed
=
props
.
pref
.
collapsed
;
const
wasCollapsed
=
prevProps
.
pref
.
collapsed
;
if
(
props
.
rows
.
length
&
&
(
props
.
rows
!
=
=
prevProps
.
rows
&
&
!
isCollapsed
|
|
wasCollapsed
&
&
!
isCollapsed
)
)
{
this
.
sendImpressionStatsOrAddListener
(
)
;
}
}
componentWillUnmount
(
)
{
if
(
this
.
_onVisibilityChange
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
needsImpressionStats
(
cards
)
{
if
(
!
this
.
impressionCardGuids
|
|
this
.
impressionCardGuids
.
length
!
=
=
cards
.
length
)
{
return
true
;
}
for
(
let
i
=
0
;
i
<
cards
.
length
;
i
+
+
)
{
if
(
cards
[
i
]
.
guid
!
=
=
this
.
impressionCardGuids
[
i
]
)
{
return
true
;
}
}
return
false
;
}
render
(
)
{
const
{
id
eventSource
title
icon
rows
emptyState
dispatch
compactCards
contextMenuOptions
initialized
disclaimer
pref
privacyNoticeURL
isFirst
isLast
}
=
this
.
props
;
const
waitingForSpoc
=
id
=
=
=
"
topstories
"
&
&
this
.
props
.
Pocket
.
waitingForSpoc
;
const
maxCardsPerRow
=
compactCards
?
CARDS_PER_ROW_COMPACT_WIDE
:
CARDS_PER_ROW_DEFAULT
;
const
{
numRows
}
=
this
;
const
maxCards
=
maxCardsPerRow
*
numRows
;
const
maxCardsOnNarrow
=
CARDS_PER_ROW_DEFAULT
*
numRows
;
const
shouldShowTopics
=
id
=
=
=
"
topstories
"
&
&
(
!
this
.
props
.
topics
|
|
this
.
props
.
topics
.
length
>
0
)
;
const
realRows
=
rows
.
slice
(
0
maxCards
)
;
const
shouldShowEmptyState
=
initialized
&
&
!
rows
.
length
;
const
cards
=
[
]
;
if
(
!
shouldShowEmptyState
)
{
for
(
let
i
=
0
;
i
<
maxCards
;
i
+
+
)
{
const
link
=
realRows
[
i
]
;
const
className
=
i
>
=
maxCardsOnNarrow
?
"
hide
-
for
-
narrow
"
:
"
"
;
let
usePlaceholder
=
!
link
;
if
(
!
usePlaceholder
&
&
i
=
=
=
2
&
&
waitingForSpoc
)
{
usePlaceholder
=
true
;
}
cards
.
push
(
!
usePlaceholder
?
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_0__
[
"
Card
"
]
{
key
:
i
index
:
i
className
:
className
dispatch
:
dispatch
link
:
link
contextMenuOptions
:
contextMenuOptions
eventSource
:
eventSource
shouldSendImpressionStats
:
this
.
props
.
shouldSendImpressionStats
isWebExtension
:
this
.
props
.
isWebExtension
}
)
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_0__
[
"
PlaceholderCard
"
]
{
key
:
i
className
:
className
}
)
)
;
}
}
const
sectionClassName
=
[
"
section
"
compactCards
?
"
compact
-
cards
"
:
"
normal
-
cards
"
]
.
join
(
"
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_4__
[
"
ComponentPerfTimer
"
]
this
.
props
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_3__
[
"
CollapsibleSection
"
]
{
className
:
sectionClassName
icon
:
icon
title
:
title
id
:
id
eventSource
:
eventSource
disclaimer
:
disclaimer
collapsed
:
this
.
props
.
pref
.
collapsed
showPrefName
:
pref
&
&
pref
.
feed
|
|
id
privacyNoticeURL
:
privacyNoticeURL
Prefs
:
this
.
props
.
Prefs
isFirst
:
isFirst
isLast
:
isLast
dispatch
:
this
.
props
.
dispatch
isWebExtension
:
this
.
props
.
isWebExtension
}
!
shouldShowEmptyState
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
ul
"
{
className
:
"
section
-
list
"
style
:
{
padding
:
0
}
}
cards
)
shouldShowEmptyState
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
empty
-
state
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
empty
-
state
"
}
emptyState
.
icon
&
&
emptyState
.
icon
.
startsWith
(
"
moz
-
extension
:
/
/
"
)
?
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
img
"
{
className
:
"
empty
-
state
-
icon
icon
"
style
:
{
"
background
-
image
"
:
url
(
'
{
emptyState
.
icon
}
'
)
}
}
)
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
img
"
{
className
:
empty
-
state
-
icon
icon
icon
-
{
emptyState
.
icon
}
}
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
p
"
{
className
:
"
empty
-
state
-
message
"
}
getFormattedMessage
(
emptyState
.
message
)
)
)
)
shouldShowTopics
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_Topics_Topics__WEBPACK_IMPORTED_MODULE_7__
[
"
Topics
"
]
{
topics
:
this
.
props
.
topics
read_more_endpoint
:
this
.
props
.
read_more_endpoint
}
)
)
)
;
}
}
Section
.
defaultProps
=
{
document
:
global
.
document
rows
:
[
]
emptyState
:
{
}
pref
:
{
}
title
:
"
"
}
;
const
SectionIntl
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_5__
[
"
connect
"
]
)
(
state
=
>
(
{
Prefs
:
state
.
Prefs
Pocket
:
state
.
Pocket
}
)
)
(
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
injectIntl
"
]
)
(
Section
)
)
;
class
_Sections
extends
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
PureComponent
{
renderSections
(
)
{
const
sections
=
[
]
;
const
enabledSections
=
this
.
props
.
Sections
.
filter
(
section
=
>
section
.
enabled
)
;
const
{
sectionOrder
"
feeds
.
topsites
"
:
showTopSites
}
=
this
.
props
.
Prefs
.
values
;
const
expectedCount
=
enabledSections
.
length
+
~
~
showTopSites
;
for
(
const
sectionId
of
sectionOrder
.
split
(
"
"
)
)
{
const
commonProps
=
{
key
:
sectionId
isFirst
:
sections
.
length
=
=
=
0
isLast
:
sections
.
length
=
=
=
expectedCount
-
1
}
;
if
(
sectionId
=
=
=
"
topsites
"
&
&
showTopSites
)
{
sections
.
push
(
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_8__
[
"
TopSites
"
]
commonProps
)
)
;
}
else
{
const
section
=
enabledSections
.
find
(
s
=
>
s
.
id
=
=
=
sectionId
)
;
if
(
section
)
{
sections
.
push
(
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
SectionIntl
_extends
(
{
}
section
commonProps
)
)
)
;
}
}
}
return
sections
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
sections
-
list
"
}
this
.
renderSections
(
)
)
;
}
}
const
Sections
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_5__
[
"
connect
"
]
)
(
state
=
>
(
{
Sections
:
state
.
Sections
Prefs
:
state
.
Prefs
}
)
)
(
_Sections
)
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
GetPlatformString
"
function
(
)
{
return
GetPlatformString
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
LinkMenuOptions
"
function
(
)
{
return
LinkMenuOptions
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
const
_OpenInPrivateWindow
=
site
=
>
(
{
id
:
"
menu_action_open_private_window
"
icon
:
"
new
-
window
-
private
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_PRIVATE_WINDOW
data
:
{
url
:
site
.
url
referrer
:
site
.
referrer
}
}
)
userEvent
:
"
OPEN_PRIVATE_WINDOW
"
}
)
;
const
GetPlatformString
=
platform
=
>
{
switch
(
platform
)
{
case
"
win
"
:
return
"
menu_action_show_file_windows
"
;
case
"
macosx
"
:
return
"
menu_action_show_file_mac_os
"
;
case
"
linux
"
:
return
"
menu_action_show_file_linux
"
;
default
:
return
"
menu_action_show_file_default
"
;
}
}
;
const
LinkMenuOptions
=
{
Separator
:
(
)
=
>
(
{
type
:
"
separator
"
}
)
EmptyItem
:
(
)
=
>
(
{
type
:
"
empty
"
}
)
RemoveBookmark
:
site
=
>
(
{
id
:
"
menu_action_remove_bookmark
"
icon
:
"
bookmark
-
added
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DELETE_BOOKMARK_BY_ID
data
:
site
.
bookmarkGuid
}
)
userEvent
:
"
BOOKMARK_DELETE
"
}
)
AddBookmark
:
site
=
>
(
{
id
:
"
menu_action_bookmark
"
icon
:
"
bookmark
-
hollow
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
BOOKMARK_URL
data
:
{
url
:
site
.
url
title
:
site
.
title
type
:
site
.
type
}
}
)
userEvent
:
"
BOOKMARK_ADD
"
}
)
OpenInNewWindow
:
site
=
>
(
{
id
:
"
menu_action_open_new_window
"
icon
:
"
new
-
window
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_NEW_WINDOW
data
:
{
referrer
:
site
.
referrer
typedBonus
:
site
.
typedBonus
url
:
site
.
url
}
}
)
userEvent
:
"
OPEN_NEW_WINDOW
"
}
)
BlockUrl
:
(
site
index
eventSource
)
=
>
(
{
id
:
"
menu_action_dismiss
"
icon
:
"
dismiss
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
BLOCK_URL
data
:
{
url
:
site
.
open_url
|
|
site
.
url
pocket_id
:
site
.
pocket_id
}
}
)
impression
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
eventSource
block
:
0
tiles
:
[
{
id
:
site
.
guid
pos
:
index
}
]
}
)
userEvent
:
"
BLOCK
"
}
)
WebExtDismiss
:
(
site
index
eventSource
)
=
>
(
{
id
:
"
menu_action_webext_dismiss
"
string_id
:
"
menu_action_dismiss
"
icon
:
"
dismiss
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
WebExtEvent
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
WEBEXT_DISMISS
{
source
:
eventSource
url
:
site
.
url
action_position
:
index
}
)
}
)
DeleteUrl
:
(
site
index
eventSource
isEnabled
siteInfo
)
=
>
(
{
id
:
"
menu_action_delete
"
icon
:
"
delete
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DIALOG_OPEN
data
:
{
onConfirm
:
[
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DELETE_HISTORY_URL
data
:
{
url
:
site
.
url
pocket_id
:
site
.
pocket_id
forceBlock
:
site
.
bookmarkGuid
}
}
)
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
Object
.
assign
(
{
event
:
"
DELETE
"
source
:
eventSource
action_position
:
index
}
siteInfo
)
)
]
eventSource
body_string_id
:
[
"
confirm_history_delete_p1
"
"
confirm_history_delete_notice_p2
"
]
confirm_button_string_id
:
"
menu_action_delete
"
cancel_button_string_id
:
"
topsites_form_cancel_button
"
icon
:
"
modal
-
delete
"
}
}
userEvent
:
"
DIALOG_OPEN
"
}
)
ShowFile
:
(
site
index
eventSource
isEnabled
siteInfo
platform
)
=
>
(
{
id
:
GetPlatformString
(
platform
)
icon
:
"
search
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SHOW_DOWNLOAD_FILE
data
:
{
url
:
site
.
url
}
}
)
}
)
OpenFile
:
site
=
>
(
{
id
:
"
menu_action_open_file
"
icon
:
"
open
-
file
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_DOWNLOAD_FILE
data
:
{
url
:
site
.
url
}
}
)
}
)
CopyDownloadLink
:
site
=
>
(
{
id
:
"
menu_action_copy_download_link
"
icon
:
"
copy
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
COPY_DOWNLOAD_LINK
data
:
{
url
:
site
.
url
}
}
)
}
)
GoToDownloadPage
:
site
=
>
(
{
id
:
"
menu_action_go_to_download_page
"
icon
:
"
download
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
{
url
:
site
.
referrer
}
}
)
disabled
:
!
site
.
referrer
}
)
RemoveDownload
:
site
=
>
(
{
id
:
"
menu_action_remove_download
"
icon
:
"
delete
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
REMOVE_DOWNLOAD_FILE
data
:
{
url
:
site
.
url
}
}
)
}
)
PinTopSite
:
(
{
url
searchTopSite
label
}
index
)
=
>
(
{
id
:
"
menu_action_pin
"
icon
:
"
pin
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_PIN
data
:
{
site
:
Object
.
assign
(
{
url
}
searchTopSite
&
&
{
searchTopSite
label
}
)
index
}
}
)
userEvent
:
"
PIN
"
}
)
UnpinTopSite
:
site
=
>
(
{
id
:
"
menu_action_unpin
"
icon
:
"
unpin
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_UNPIN
data
:
{
site
:
{
url
:
site
.
url
}
}
}
)
userEvent
:
"
UNPIN
"
}
)
SaveToPocket
:
(
site
index
eventSource
)
=
>
(
{
id
:
"
menu_action_save_to_pocket
"
icon
:
"
pocket
-
save
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_TO_POCKET
data
:
{
site
:
{
url
:
site
.
url
title
:
site
.
title
}
}
}
)
impression
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
eventSource
pocket
:
0
tiles
:
[
{
id
:
site
.
guid
pos
:
index
}
]
}
)
userEvent
:
"
SAVE_TO_POCKET
"
}
)
DeleteFromPocket
:
site
=
>
(
{
id
:
"
menu_action_delete_pocket
"
icon
:
"
delete
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DELETE_FROM_POCKET
data
:
{
pocket_id
:
site
.
pocket_id
}
}
)
userEvent
:
"
DELETE_FROM_POCKET
"
}
)
ArchiveFromPocket
:
site
=
>
(
{
id
:
"
menu_action_archive_pocket
"
icon
:
"
check
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
ARCHIVE_FROM_POCKET
data
:
{
pocket_id
:
site
.
pocket_id
}
}
)
userEvent
:
"
ARCHIVE_FROM_POCKET
"
}
)
EditTopSite
:
(
site
index
)
=
>
(
{
id
:
"
edit_topsites_button_text
"
icon
:
"
edit
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
data
:
{
index
}
}
}
)
CheckBookmark
:
site
=
>
site
.
bookmarkGuid
?
LinkMenuOptions
.
RemoveBookmark
(
site
)
:
LinkMenuOptions
.
AddBookmark
(
site
)
CheckPinTopSite
:
(
site
index
)
=
>
site
.
isPinned
?
LinkMenuOptions
.
UnpinTopSite
(
site
)
:
LinkMenuOptions
.
PinTopSite
(
site
index
)
CheckSavedToPocket
:
(
site
index
)
=
>
site
.
pocket_id
?
LinkMenuOptions
.
DeleteFromPocket
(
site
)
:
LinkMenuOptions
.
SaveToPocket
(
site
index
)
CheckBookmarkOrArchive
:
site
=
>
site
.
pocket_id
?
LinkMenuOptions
.
ArchiveFromPocket
(
site
)
:
LinkMenuOptions
.
CheckBookmark
(
site
)
OpenInPrivateWindow
:
(
site
index
eventSource
isEnabled
)
=
>
isEnabled
?
_OpenInPrivateWindow
(
site
)
:
LinkMenuOptions
.
EmptyItem
(
)
}
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_LinkMenu
"
function
(
)
{
return
_LinkMenu
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
LinkMenu
"
function
(
)
{
return
LinkMenu
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
)
;
var
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
25
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_3___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_3__
)
;
var
content_src_lib_link_menu_options__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
23
)
;
var
react__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_5___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_5__
)
;
const
DEFAULT_SITE_MENU_OPTIONS
=
[
"
CheckPinTopSite
"
"
EditTopSite
"
"
Separator
"
"
OpenInNewWindow
"
"
OpenInPrivateWindow
"
"
Separator
"
"
BlockUrl
"
]
;
class
_LinkMenu
extends
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
PureComponent
{
getOptions
(
)
{
const
{
props
}
=
this
;
const
{
site
index
source
isPrivateBrowsingEnabled
siteInfo
platform
}
=
props
;
const
propOptions
=
!
site
.
isDefault
|
|
site
.
searchTopSite
?
props
.
options
:
DEFAULT_SITE_MENU_OPTIONS
;
const
options
=
propOptions
.
map
(
o
=
>
content_src_lib_link_menu_options__WEBPACK_IMPORTED_MODULE_4__
[
"
LinkMenuOptions
"
]
[
o
]
(
site
index
source
isPrivateBrowsingEnabled
siteInfo
platform
)
)
.
map
(
option
=
>
{
const
{
action
impression
id
string_id
type
userEvent
}
=
option
;
if
(
!
type
&
&
id
)
{
option
.
label
=
props
.
intl
.
formatMessage
(
{
id
:
string_id
|
|
id
}
)
;
option
.
onClick
=
(
)
=
>
{
props
.
dispatch
(
action
)
;
if
(
userEvent
)
{
const
userEventData
=
Object
.
assign
(
{
event
:
userEvent
source
action_position
:
index
}
siteInfo
)
;
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
userEventData
)
)
;
}
if
(
impression
&
&
props
.
shouldSendImpressionStats
)
{
props
.
dispatch
(
impression
)
;
}
}
;
}
return
option
;
}
)
;
options
[
0
]
.
first
=
true
;
options
[
options
.
length
-
1
]
.
last
=
true
;
return
options
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_2__
[
"
ContextMenu
"
]
{
onUpdate
:
this
.
props
.
onUpdate
options
:
this
.
getOptions
(
)
}
)
;
}
}
const
getState
=
state
=
>
(
{
isPrivateBrowsingEnabled
:
state
.
Prefs
.
values
.
isPrivateBrowsingEnabled
platform
:
state
.
Prefs
.
values
.
platform
}
)
;
const
LinkMenu
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
[
"
connect
"
]
)
(
getState
)
(
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_3__
[
"
injectIntl
"
]
)
(
_LinkMenu
)
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
ContextMenu
"
function
(
)
{
return
ContextMenu
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ContextMenuItem
"
function
(
)
{
return
ContextMenuItem
;
}
)
;
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
class
ContextMenu
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
hideContext
=
this
.
hideContext
.
bind
(
this
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
hideContext
(
)
{
this
.
props
.
onUpdate
(
false
)
;
}
componentDidMount
(
)
{
setTimeout
(
(
)
=
>
{
global
.
addEventListener
(
"
click
"
this
.
hideContext
)
;
}
0
)
;
}
componentWillUnmount
(
)
{
global
.
removeEventListener
(
"
click
"
this
.
hideContext
)
;
}
onClick
(
event
)
{
event
.
stopPropagation
(
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
"
context
-
menu
"
onClick
:
this
.
onClick
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
ul
"
{
role
:
"
menu
"
className
:
"
context
-
menu
-
list
"
}
this
.
props
.
options
.
map
(
(
option
i
)
=
>
option
.
type
=
=
=
"
separator
"
?
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
li
"
{
key
:
i
className
:
"
separator
"
}
)
:
option
.
type
!
=
=
"
empty
"
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
ContextMenuItem
{
key
:
i
option
:
option
hideContext
:
this
.
hideContext
}
)
)
)
)
;
}
}
class
ContextMenuItem
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
this
.
onKeyDown
=
this
.
onKeyDown
.
bind
(
this
)
;
}
onClick
(
)
{
this
.
props
.
hideContext
(
)
;
this
.
props
.
option
.
onClick
(
)
;
}
onKeyDown
(
event
)
{
const
{
option
}
=
this
.
props
;
switch
(
event
.
key
)
{
case
"
Tab
"
:
if
(
event
.
shiftKey
&
&
option
.
first
|
|
!
event
.
shiftKey
&
&
option
.
last
)
{
this
.
props
.
hideContext
(
)
;
}
break
;
case
"
Enter
"
:
this
.
props
.
hideContext
(
)
;
option
.
onClick
(
)
;
break
;
}
}
render
(
)
{
const
{
option
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
li
"
{
role
:
"
menuitem
"
className
:
"
context
-
menu
-
item
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
a
"
{
onClick
:
this
.
onClick
onKeyDown
:
this
.
onKeyDown
tabIndex
:
"
0
"
className
:
option
.
disabled
?
"
disabled
"
:
"
"
}
option
.
icon
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
icon
icon
-
spacer
icon
-
{
option
.
icon
}
}
)
option
.
label
)
)
;
}
}
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
ScreenshotUtils
"
function
(
)
{
return
ScreenshotUtils
;
}
)
;
const
ScreenshotUtils
=
{
isBlob
(
isLocal
image
)
{
return
!
!
(
image
&
&
image
.
path
&
&
(
!
isLocal
&
&
image
.
data
|
|
isLocal
&
&
image
.
url
)
)
;
}
createLocalImageObject
(
remoteImage
)
{
if
(
!
remoteImage
)
{
return
null
;
}
if
(
this
.
isBlob
(
false
remoteImage
)
)
{
return
{
url
:
global
.
URL
.
createObjectURL
(
remoteImage
.
data
)
path
:
remoteImage
.
path
}
;
}
return
{
url
:
remoteImage
}
;
}
maybeRevokeBlobObjectURL
(
localImage
)
{
if
(
this
.
isBlob
(
true
localImage
)
)
{
global
.
URL
.
revokeObjectURL
(
localImage
.
url
)
;
}
}
isRemoteImageLocal
(
localImage
remoteImage
)
{
if
(
remoteImage
&
&
localImage
)
{
return
this
.
isBlob
(
false
remoteImage
)
?
localImage
.
path
=
=
=
remoteImage
.
path
:
localImage
.
url
=
=
=
remoteImage
;
}
return
!
remoteImage
&
&
!
localImage
;
}
}
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
Disclaimer
"
function
(
)
{
return
Disclaimer
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
DisclaimerIntl
"
function
(
)
{
return
DisclaimerIntl
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_CollapsibleSection
"
function
(
)
{
return
_CollapsibleSection
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
CollapsibleSection
"
function
(
)
{
return
CollapsibleSection
;
}
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
2
)
;
var
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
17
)
;
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
var
content_src_components_SectionMenu_SectionMenu__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
28
)
;
var
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
29
)
;
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
function
getFormattedMessage
(
message
)
{
return
typeof
message
=
=
=
"
string
"
?
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
null
message
)
:
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
message
)
;
}
class
Disclaimer
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onAcknowledge
=
this
.
onAcknowledge
.
bind
(
this
)
;
}
onAcknowledge
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
SetPref
(
this
.
props
.
disclaimerPref
false
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
DISCLAIMER_ACKED
"
source
:
this
.
props
.
eventSource
}
)
)
;
}
render
(
)
{
const
{
disclaimer
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
disclaimer
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
disclaimer
-
text
"
}
getFormattedMessage
(
disclaimer
.
text
)
disclaimer
.
link
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
a
"
{
href
:
disclaimer
.
link
.
href
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
}
getFormattedMessage
(
disclaimer
.
link
.
title
|
|
disclaimer
.
link
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
onClick
:
this
.
onAcknowledge
}
getFormattedMessage
(
disclaimer
.
button
)
)
)
;
}
}
const
DisclaimerIntl
=
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
injectIntl
"
]
)
(
Disclaimer
)
;
class
_CollapsibleSection
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onBodyMount
=
this
.
onBodyMount
.
bind
(
this
)
;
this
.
onHeaderClick
=
this
.
onHeaderClick
.
bind
(
this
)
;
this
.
onTransitionEnd
=
this
.
onTransitionEnd
.
bind
(
this
)
;
this
.
enableOrDisableAnimation
=
this
.
enableOrDisableAnimation
.
bind
(
this
)
;
this
.
onMenuButtonClick
=
this
.
onMenuButtonClick
.
bind
(
this
)
;
this
.
onMenuButtonMouseEnter
=
this
.
onMenuButtonMouseEnter
.
bind
(
this
)
;
this
.
onMenuButtonMouseLeave
=
this
.
onMenuButtonMouseLeave
.
bind
(
this
)
;
this
.
onMenuUpdate
=
this
.
onMenuUpdate
.
bind
(
this
)
;
this
.
state
=
{
enableAnimation
:
true
isAnimating
:
false
menuButtonHover
:
false
showContextMenu
:
false
}
;
}
componentWillMount
(
)
{
this
.
props
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
enableOrDisableAnimation
)
;
}
componentWillUpdate
(
nextProps
)
{
if
(
!
this
.
props
.
collapsed
&
&
nextProps
.
collapsed
)
{
this
.
sectionBody
.
scrollHeight
;
}
}
componentWillUnmount
(
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
enableOrDisableAnimation
)
;
}
enableOrDisableAnimation
(
)
{
const
visible
=
this
.
props
.
document
.
visibilityState
=
=
=
VISIBLE
;
if
(
this
.
state
.
enableAnimation
!
=
=
visible
)
{
this
.
setState
(
{
enableAnimation
:
visible
}
)
;
}
}
onBodyMount
(
node
)
{
this
.
sectionBody
=
node
;
}
onHeaderClick
(
)
{
if
(
!
this
.
sectionBody
|
|
this
.
props
.
collapsed
=
=
=
undefined
)
{
return
;
}
this
.
setState
(
{
isAnimating
:
true
maxHeight
:
{
this
.
sectionBody
.
scrollHeight
}
px
}
)
;
const
{
action
userEvent
}
=
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_5__
[
"
SectionMenuOptions
"
]
.
CheckCollapsed
(
this
.
props
)
;
this
.
props
.
dispatch
(
action
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
userEvent
source
:
this
.
props
.
source
}
)
)
;
}
onTransitionEnd
(
event
)
{
if
(
event
.
target
=
=
=
event
.
currentTarget
)
{
this
.
setState
(
{
isAnimating
:
false
}
)
;
}
}
renderIcon
(
)
{
const
{
icon
}
=
this
.
props
;
if
(
icon
&
&
icon
.
startsWith
(
"
moz
-
extension
:
/
/
"
)
)
{
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
"
style
:
{
backgroundImage
:
url
(
'
{
icon
}
'
)
}
}
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
icon
icon
-
small
-
spacer
icon
-
{
icon
|
|
"
webextension
"
}
}
)
;
}
onMenuButtonClick
(
event
)
{
event
.
preventDefault
(
)
;
this
.
setState
(
{
showContextMenu
:
true
}
)
;
}
onMenuButtonMouseEnter
(
)
{
this
.
setState
(
{
menuButtonHover
:
true
}
)
;
}
onMenuButtonMouseLeave
(
)
{
this
.
setState
(
{
menuButtonHover
:
false
}
)
;
}
onMenuUpdate
(
showContextMenu
)
{
this
.
setState
(
{
showContextMenu
}
)
;
}
render
(
)
{
const
isCollapsible
=
this
.
props
.
collapsed
!
=
=
undefined
;
const
{
enableAnimation
isAnimating
maxHeight
menuButtonHover
showContextMenu
}
=
this
.
state
;
const
{
id
eventSource
collapsed
disclaimer
title
extraMenuOptions
showPrefName
privacyNoticeURL
dispatch
isFirst
isLast
isWebExtension
}
=
this
.
props
;
const
disclaimerPref
=
section
.
{
id
}
.
showDisclaimer
;
const
needsDisclaimer
=
disclaimer
&
&
this
.
props
.
Prefs
.
values
[
disclaimerPref
]
;
const
active
=
menuButtonHover
|
|
showContextMenu
;
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
section
"
{
className
:
collapsible
-
section
{
this
.
props
.
className
}
{
enableAnimation
?
"
animation
-
enabled
"
:
"
"
}
{
collapsed
?
"
collapsed
"
:
"
"
}
{
active
?
"
active
"
:
"
"
}
"
data
-
section
-
id
"
:
id
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
top
-
bar
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
h3
"
{
className
:
"
section
-
title
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
click
-
target
"
onClick
:
this
.
onHeaderClick
}
this
.
renderIcon
(
)
getFormattedMessage
(
title
)
isCollapsible
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
collapsible
-
arrow
icon
{
collapsed
?
"
icon
-
arrowhead
-
forward
-
small
"
:
"
icon
-
arrowhead
-
down
-
small
"
}
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
className
:
"
context
-
menu
-
button
icon
"
onClick
:
this
.
onMenuButtonClick
onMouseEnter
:
this
.
onMenuButtonMouseEnter
onMouseLeave
:
this
.
onMenuButtonMouseLeave
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
sr
-
only
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
{
id
:
"
section_context_menu_button_sr
"
}
)
)
)
showContextMenu
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_SectionMenu_SectionMenu__WEBPACK_IMPORTED_MODULE_4__
[
"
SectionMenu
"
]
{
id
:
id
extraOptions
:
extraMenuOptions
eventSource
:
eventSource
showPrefName
:
showPrefName
privacyNoticeURL
:
privacyNoticeURL
collapsed
:
collapsed
onUpdate
:
this
.
onMenuUpdate
isFirst
:
isFirst
isLast
:
isLast
dispatch
:
dispatch
isWebExtension
:
isWebExtension
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_2__
[
"
ErrorBoundary
"
]
{
className
:
"
section
-
body
-
fallback
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
section
-
body
{
isAnimating
?
"
animating
"
:
"
"
}
onTransitionEnd
:
this
.
onTransitionEnd
ref
:
this
.
onBodyMount
style
:
isAnimating
&
&
!
collapsed
?
{
maxHeight
}
:
null
}
needsDisclaimer
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
DisclaimerIntl
{
disclaimerPref
:
disclaimerPref
disclaimer
:
disclaimer
eventSource
:
eventSource
dispatch
:
this
.
props
.
dispatch
}
)
this
.
props
.
children
)
)
)
;
}
}
_CollapsibleSection
.
defaultProps
=
{
document
:
global
.
document
|
|
{
addEventListener
:
(
)
=
>
{
}
removeEventListener
:
(
)
=
>
{
}
visibilityState
:
"
hidden
"
}
Prefs
:
{
values
:
{
}
}
}
;
const
CollapsibleSection
=
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
injectIntl
"
]
)
(
_CollapsibleSection
)
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_SectionMenu
"
function
(
)
{
return
_SectionMenu
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
SectionMenu
"
function
(
)
{
return
SectionMenu
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
25
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_2___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
)
;
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
var
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
29
)
;
const
DEFAULT_SECTION_MENU_OPTIONS
=
[
"
MoveUp
"
"
MoveDown
"
"
Separator
"
"
RemoveSection
"
"
CheckCollapsed
"
"
Separator
"
"
ManageSection
"
]
;
const
WEBEXT_SECTION_MENU_OPTIONS
=
[
"
MoveUp
"
"
MoveDown
"
"
Separator
"
"
CheckCollapsed
"
"
Separator
"
"
ManageWebExtension
"
]
;
class
_SectionMenu
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
getOptions
(
)
{
const
{
props
}
=
this
;
const
propOptions
=
props
.
isWebExtension
?
[
.
.
.
WEBEXT_SECTION_MENU_OPTIONS
]
:
[
.
.
.
DEFAULT_SECTION_MENU_OPTIONS
]
;
if
(
props
.
extraOptions
)
{
propOptions
.
splice
(
0
0
.
.
.
props
.
extraOptions
"
Separator
"
)
;
}
if
(
props
.
privacyNoticeURL
)
{
propOptions
.
splice
(
-
1
0
"
PrivacyNotice
"
)
;
}
const
options
=
propOptions
.
map
(
o
=
>
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_4__
[
"
SectionMenuOptions
"
]
[
o
]
(
props
)
)
.
map
(
option
=
>
{
const
{
action
id
type
userEvent
}
=
option
;
if
(
!
type
&
&
id
)
{
option
.
label
=
props
.
intl
.
formatMessage
(
{
id
}
)
;
option
.
onClick
=
(
)
=
>
{
props
.
dispatch
(
action
)
;
if
(
userEvent
)
{
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
userEvent
source
:
props
.
source
}
)
)
;
}
}
;
}
return
option
;
}
)
;
options
[
0
]
.
first
=
true
;
options
[
options
.
length
-
1
]
.
last
=
true
;
return
options
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_1__
[
"
ContextMenu
"
]
{
onUpdate
:
this
.
props
.
onUpdate
options
:
this
.
getOptions
(
)
}
)
;
}
}
const
SectionMenu
=
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_2__
[
"
injectIntl
"
]
)
(
_SectionMenu
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
SectionMenuOptions
"
function
(
)
{
return
SectionMenuOptions
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
const
SectionMenuOptions
=
{
Separator
:
(
)
=
>
(
{
type
:
"
separator
"
}
)
MoveUp
:
section
=
>
(
{
id
:
"
section_menu_action_move_up
"
icon
:
"
arrowhead
-
up
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SECTION_MOVE
data
:
{
id
:
section
.
id
direction
:
-
1
}
}
)
userEvent
:
"
MENU_MOVE_UP
"
disabled
:
!
!
section
.
isFirst
}
)
MoveDown
:
section
=
>
(
{
id
:
"
section_menu_action_move_down
"
icon
:
"
arrowhead
-
down
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SECTION_MOVE
data
:
{
id
:
section
.
id
direction
:
+
1
}
}
)
userEvent
:
"
MENU_MOVE_DOWN
"
disabled
:
!
!
section
.
isLast
}
)
RemoveSection
:
section
=
>
(
{
id
:
"
section_menu_action_remove_section
"
icon
:
"
dismiss
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
SetPref
(
section
.
showPrefName
false
)
userEvent
:
"
MENU_REMOVE
"
}
)
CollapseSection
:
section
=
>
(
{
id
:
"
section_menu_action_collapse_section
"
icon
:
"
minimize
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
UPDATE_SECTION_PREFS
data
:
{
id
:
section
.
id
value
:
{
collapsed
:
true
}
}
}
)
userEvent
:
"
MENU_COLLAPSE
"
}
)
ExpandSection
:
section
=
>
(
{
id
:
"
section_menu_action_expand_section
"
icon
:
"
maximize
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
UPDATE_SECTION_PREFS
data
:
{
id
:
section
.
id
value
:
{
collapsed
:
false
}
}
}
)
userEvent
:
"
MENU_EXPAND
"
}
)
ManageSection
:
section
=
>
(
{
id
:
"
section_menu_action_manage_section
"
icon
:
"
settings
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SETTINGS_OPEN
}
)
userEvent
:
"
MENU_MANAGE
"
}
)
ManageWebExtension
:
section
=
>
(
{
id
:
"
section_menu_action_manage_webext
"
icon
:
"
settings
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_WEBEXT_SETTINGS
data
:
section
.
id
}
)
}
)
AddTopSite
:
section
=
>
(
{
id
:
"
section_menu_action_add_topsite
"
icon
:
"
add
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
data
:
{
index
:
-
1
}
}
userEvent
:
"
MENU_ADD_TOPSITE
"
}
)
AddSearchShortcut
:
section
=
>
(
{
id
:
"
section_menu_action_add_search_engine
"
icon
:
"
search
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL
}
userEvent
:
"
MENU_ADD_SEARCH
"
}
)
PrivacyNotice
:
section
=
>
(
{
id
:
"
section_menu_action_privacy_notice
"
icon
:
"
info
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
{
url
:
section
.
privacyNoticeURL
}
}
)
userEvent
:
"
MENU_PRIVACY_NOTICE
"
}
)
CheckCollapsed
:
section
=
>
section
.
collapsed
?
SectionMenuOptions
.
ExpandSection
(
section
)
:
SectionMenuOptions
.
CollapseSection
(
section
)
}
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ComponentPerfTimer
"
function
(
)
{
return
ComponentPerfTimer
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
31
)
;
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
const
RECORDED_SECTIONS
=
[
"
highlights
"
"
topsites
"
]
;
class
ComponentPerfTimer
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
Component
{
constructor
(
props
)
{
super
(
props
)
;
this
.
perfSvc
=
this
.
props
.
perfSvc
|
|
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
perfService
"
]
;
this
.
_sendBadStateEvent
=
this
.
_sendBadStateEvent
.
bind
(
this
)
;
this
.
_sendPaintedEvent
=
this
.
_sendPaintedEvent
.
bind
(
this
)
;
this
.
_reportMissingData
=
false
;
this
.
_timestampHandled
=
false
;
this
.
_recordedFirstRender
=
false
;
}
componentDidMount
(
)
{
if
(
!
RECORDED_SECTIONS
.
includes
(
this
.
props
.
id
)
)
{
return
;
}
this
.
_maybeSendPaintedEvent
(
)
;
}
componentDidUpdate
(
)
{
if
(
!
RECORDED_SECTIONS
.
includes
(
this
.
props
.
id
)
)
{
return
;
}
this
.
_maybeSendPaintedEvent
(
)
;
}
_afterFramePaint
(
callback
)
{
requestAnimationFrame
(
(
)
=
>
setTimeout
(
callback
0
)
)
;
}
_maybeSendBadStateEvent
(
)
{
if
(
!
this
.
props
.
initialized
)
{
this
.
_reportMissingData
=
true
;
}
else
if
(
this
.
_reportMissingData
)
{
this
.
_reportMissingData
=
false
;
this
.
_sendBadStateEvent
(
)
;
}
}
_maybeSendPaintedEvent
(
)
{
if
(
this
.
_timestampHandled
|
|
!
this
.
props
.
initialized
)
{
return
;
}
this
.
_timestampHandled
=
true
;
this
.
_afterFramePaint
(
this
.
_sendPaintedEvent
)
;
}
_ensureFirstRenderTsRecorded
(
)
{
if
(
!
this
.
_recordedFirstRender
)
{
this
.
_recordedFirstRender
=
true
;
const
key
=
{
this
.
props
.
id
}
_first_render_ts
;
this
.
perfSvc
.
mark
(
key
)
;
}
}
_sendBadStateEvent
(
)
{
const
dataReadyKey
=
{
this
.
props
.
id
}
_data_ready_ts
;
this
.
perfSvc
.
mark
(
dataReadyKey
)
;
try
{
const
firstRenderKey
=
{
this
.
props
.
id
}
_first_render_ts
;
const
value
=
parseInt
(
this
.
perfSvc
.
getMostRecentAbsMarkStartByName
(
dataReadyKey
)
-
this
.
perfSvc
.
getMostRecentAbsMarkStartByName
(
firstRenderKey
)
10
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
data
:
{
[
{
this
.
props
.
id
}
_data_late_by_ms
]
:
value
}
}
)
)
;
}
catch
(
ex
)
{
}
}
_sendPaintedEvent
(
)
{
if
(
this
.
props
.
id
!
=
=
"
topsites
"
)
{
return
;
}
const
key
=
{
this
.
props
.
id
}
_first_painted_ts
;
this
.
perfSvc
.
mark
(
key
)
;
try
{
const
data
=
{
}
;
data
[
key
]
=
this
.
perfSvc
.
getMostRecentAbsMarkStartByName
(
key
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
data
}
)
)
;
}
catch
(
ex
)
{
}
}
render
(
)
{
if
(
RECORDED_SECTIONS
.
includes
(
this
.
props
.
id
)
)
{
this
.
_ensureFirstRenderTsRecorded
(
)
;
this
.
_maybeSendBadStateEvent
(
)
;
}
return
this
.
props
.
children
;
}
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_PerfService
"
function
(
)
{
return
_PerfService
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
perfService
"
function
(
)
{
return
perfService
;
}
)
;
if
(
typeof
ChromeUtils
!
=
=
"
undefined
"
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
}
let
usablePerfObj
;
if
(
typeof
Services
!
=
=
"
undefined
"
)
{
usablePerfObj
=
Services
.
appShell
.
hiddenDOMWindow
.
performance
;
}
else
if
(
typeof
performance
!
=
=
"
undefined
"
)
{
usablePerfObj
=
performance
;
}
else
{
usablePerfObj
=
{
now
(
)
{
}
mark
(
)
{
}
}
;
}
function
_PerfService
(
options
)
{
if
(
options
&
&
options
.
performanceObj
)
{
this
.
_perf
=
options
.
performanceObj
;
}
else
{
this
.
_perf
=
usablePerfObj
;
}
}
_PerfService
.
prototype
=
{
mark
:
function
mark
(
str
)
{
this
.
_perf
.
mark
(
str
)
;
}
getEntriesByName
:
function
getEntriesByName
(
name
type
)
{
return
this
.
_perf
.
getEntriesByName
(
name
type
)
;
}
get
timeOrigin
(
)
{
return
this
.
_perf
.
timeOrigin
;
}
absNow
:
function
absNow
(
)
{
return
this
.
timeOrigin
+
this
.
_perf
.
now
(
)
;
}
getMostRecentAbsMarkStartByName
(
name
)
{
let
entries
=
this
.
getEntriesByName
(
name
"
mark
"
)
;
if
(
!
entries
.
length
)
{
throw
new
Error
(
No
marks
with
the
name
{
name
}
)
;
}
let
mostRecentEntry
=
entries
[
entries
.
length
-
1
]
;
return
this
.
_perf
.
timeOrigin
+
mostRecentEntry
.
startTime
;
}
}
;
var
perfService
=
new
_PerfService
(
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
Topic
"
function
(
)
{
return
Topic
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
Topics
"
function
(
)
{
return
Topics
;
}
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_0___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
)
;
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
class
Topic
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
render
(
)
{
const
{
url
name
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
key
:
name
className
:
"
topic
-
link
"
href
:
url
}
name
)
)
;
}
}
class
Topics
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
render
(
)
{
const
{
topics
read_more_endpoint
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
topic
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
{
id
:
"
pocket_read_more
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
ul
"
null
topics
&
&
topics
.
map
(
t
=
>
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
Topic
{
key
:
t
.
name
url
:
t
.
url
name
:
t
.
name
}
)
)
)
read_more_endpoint
&
&
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
className
:
"
topic
-
read
-
more
"
href
:
read_more_endpoint
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_0__
[
"
FormattedMessage
"
]
{
id
:
"
pocket_read_even_more
"
}
)
)
)
;
}
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
_TopSites
"
function
(
)
{
return
_TopSites
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TopSites
"
function
(
)
{
return
TopSites
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
34
)
;
var
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
27
)
;
var
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
30
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_4___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_5___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_5__
)
;
var
react__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_6___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_6__
)
;
var
_SearchShortcutsForm__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
35
)
;
var
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
43
)
;
var
_TopSiteForm__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
46
)
;
var
_TopSite__WEBPACK_IMPORTED_MODULE_10__
=
__webpack_require__
(
36
)
;
var
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
function
topSiteIconType
(
link
)
{
if
(
link
.
customScreenshotURL
)
{
return
"
custom_screenshot
"
;
}
if
(
link
.
tippyTopIcon
|
|
link
.
faviconRef
=
=
=
"
tippytop
"
)
{
return
"
tippytop
"
;
}
if
(
link
.
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
MIN_RICH_FAVICON_SIZE
"
]
)
{
return
"
rich_icon
"
;
}
if
(
link
.
screenshot
&
&
link
.
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
MIN_CORNER_FAVICON_SIZE
"
]
)
{
return
"
screenshot_with_icon
"
;
}
if
(
link
.
screenshot
)
{
return
"
screenshot
"
;
}
return
"
no_image
"
;
}
function
countTopSitesIconsTypes
(
topSites
)
{
const
countTopSitesTypes
=
(
acc
link
)
=
>
{
acc
[
topSiteIconType
(
link
)
]
+
+
;
return
acc
;
}
;
return
topSites
.
reduce
(
countTopSitesTypes
{
"
custom_screenshot
"
:
0
"
screenshot_with_icon
"
:
0
"
screenshot
"
:
0
"
tippytop
"
:
0
"
rich_icon
"
:
0
"
no_image
"
:
0
}
)
;
}
class
_TopSites
extends
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onEditFormClose
=
this
.
onEditFormClose
.
bind
(
this
)
;
this
.
onSearchShortcutsFormClose
=
this
.
onSearchShortcutsFormClose
.
bind
(
this
)
;
}
_dispatchTopSitesStats
(
)
{
const
topSites
=
this
.
_getVisibleTopSites
(
)
;
const
topSitesIconsStats
=
countTopSitesIconsTypes
(
topSites
)
;
const
topSitesPinned
=
topSites
.
filter
(
site
=
>
!
!
site
.
isPinned
)
.
length
;
const
searchShortcuts
=
topSites
.
filter
(
site
=
>
!
!
site
.
searchTopSite
)
.
length
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
data
:
{
topsites_icon_stats
:
topSitesIconsStats
topsites_pinned
:
topSitesPinned
topsites_search_shortcuts
:
searchShortcuts
}
}
)
)
;
}
_getVisibleTopSites
(
)
{
let
sitesPerRow
=
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_8__
[
"
TOP_SITES_MAX_SITES_PER_ROW
"
]
;
if
(
!
global
.
matchMedia
(
(
min
-
width
:
1072px
)
)
.
matches
)
{
sitesPerRow
-
=
2
;
}
return
this
.
props
.
TopSites
.
rows
.
slice
(
0
this
.
props
.
TopSitesRows
*
sitesPerRow
)
;
}
componentDidUpdate
(
)
{
this
.
_dispatchTopSitesStats
(
)
;
}
componentDidMount
(
)
{
this
.
_dispatchTopSitesStats
(
)
;
}
onEditFormClose
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
TOP_SITES_EDIT_CLOSE
"
}
)
)
;
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_CANCEL_EDIT
}
)
;
}
onSearchShortcutsFormClose
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
SEARCH_EDIT_CLOSE
"
}
)
)
;
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL
}
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
editForm
showSearchShortcutsForm
}
=
props
.
TopSites
;
const
extraMenuOptions
=
[
"
AddTopSite
"
]
;
if
(
props
.
Prefs
.
values
[
"
improvesearch
.
topSiteSearchShortcuts
"
]
)
{
extraMenuOptions
.
push
(
"
AddSearchShortcut
"
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__
[
"
ComponentPerfTimer
"
]
{
id
:
"
topsites
"
initialized
:
props
.
TopSites
.
initialized
dispatch
:
props
.
dispatch
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
[
"
CollapsibleSection
"
]
{
className
:
"
top
-
sites
"
icon
:
"
topsites
"
id
:
"
topsites
"
title
:
{
id
:
"
header_top_sites
"
}
extraMenuOptions
:
extraMenuOptions
showPrefName
:
"
feeds
.
topsites
"
eventSource
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
collapsed
:
props
.
TopSites
.
pref
?
props
.
TopSites
.
pref
.
collapsed
:
undefined
isFirst
:
props
.
isFirst
isLast
:
props
.
isLast
dispatch
:
props
.
dispatch
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_TopSite__WEBPACK_IMPORTED_MODULE_10__
[
"
TopSiteList
"
]
{
TopSites
:
props
.
TopSites
TopSitesRows
:
props
.
TopSitesRows
dispatch
:
props
.
dispatch
intl
:
props
.
intl
topSiteIconType
:
topSiteIconType
}
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
edit
-
topsites
-
wrapper
"
}
editForm
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
edit
-
topsites
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
-
overlay
"
onClick
:
this
.
onEditFormClose
}
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_TopSiteForm__WEBPACK_IMPORTED_MODULE_9__
[
"
TopSiteForm
"
]
_extends
(
{
site
:
props
.
TopSites
.
rows
[
editForm
.
index
]
onClose
:
this
.
onEditFormClose
dispatch
:
this
.
props
.
dispatch
intl
:
this
.
props
.
intl
}
editForm
)
)
)
)
showSearchShortcutsForm
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
edit
-
search
-
shortcuts
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
-
overlay
"
onClick
:
this
.
onSearchShortcutsFormClose
}
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_SearchShortcutsForm__WEBPACK_IMPORTED_MODULE_7__
[
"
SearchShortcutsForm
"
]
{
TopSites
:
props
.
TopSites
onClose
:
this
.
onSearchShortcutsFormClose
dispatch
:
this
.
props
.
dispatch
}
)
)
)
)
)
)
;
}
}
const
TopSites
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
[
"
connect
"
]
)
(
state
=
>
(
{
TopSites
:
state
.
TopSites
Prefs
:
state
.
Prefs
TopSitesRows
:
state
.
Prefs
.
values
.
topSitesRows
}
)
)
(
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_5__
[
"
injectIntl
"
]
)
(
_TopSites
)
)
;
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_SOURCE
"
function
(
)
{
return
TOP_SITES_SOURCE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_CONTEXT_MENU_OPTIONS
"
function
(
)
{
return
TOP_SITES_CONTEXT_MENU_OPTIONS
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
"
function
(
)
{
return
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
MIN_RICH_FAVICON_SIZE
"
function
(
)
{
return
MIN_RICH_FAVICON_SIZE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
MIN_CORNER_FAVICON_SIZE
"
function
(
)
{
return
MIN_CORNER_FAVICON_SIZE
;
}
)
;
const
TOP_SITES_SOURCE
=
"
TOP_SITES
"
;
const
TOP_SITES_CONTEXT_MENU_OPTIONS
=
[
"
CheckPinTopSite
"
"
EditTopSite
"
"
Separator
"
"
OpenInNewWindow
"
"
OpenInPrivateWindow
"
"
Separator
"
"
BlockUrl
"
"
DeleteUrl
"
]
;
const
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
=
[
"
CheckPinTopSite
"
"
Separator
"
"
BlockUrl
"
]
;
const
MIN_RICH_FAVICON_SIZE
=
96
;
const
MIN_CORNER_FAVICON_SIZE
=
16
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
SearchShortcutsForm
"
function
(
)
{
return
SearchShortcutsForm
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
)
;
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
var
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
34
)
;
class
SelectableSearchShortcut
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
render
(
)
{
const
{
shortcut
selected
}
=
this
.
props
;
const
imageStyle
=
{
backgroundImage
:
url
(
"
{
shortcut
.
tippyTopIcon
}
"
)
}
;
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
outer
search
-
shortcut
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
id
:
shortcut
.
keyword
name
:
shortcut
.
keyword
checked
:
selected
onChange
:
this
.
props
.
onChange
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
label
"
{
htmlFor
:
shortcut
.
keyword
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
inner
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
span
"
null
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
tile
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
rich
-
icon
"
style
:
imageStyle
"
data
-
fallback
"
:
"
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
search
-
topsite
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
title
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
span
"
{
dir
:
"
auto
"
}
shortcut
.
keyword
)
)
)
)
)
)
;
}
}
class
SearchShortcutsForm
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleChange
=
this
.
handleChange
.
bind
(
this
)
;
this
.
onCancelButtonClick
=
this
.
onCancelButtonClick
.
bind
(
this
)
;
this
.
onSaveButtonClick
=
this
.
onSaveButtonClick
.
bind
(
this
)
;
const
shortcuts
=
[
]
;
const
{
rows
searchShortcuts
}
=
props
.
TopSites
;
searchShortcuts
.
forEach
(
shortcut
=
>
{
shortcuts
.
push
(
Object
.
assign
(
{
}
shortcut
{
isSelected
:
!
!
rows
.
find
(
row
=
>
row
&
&
row
.
isPinned
&
&
row
.
searchTopSite
&
&
row
.
label
=
=
=
shortcut
.
keyword
)
}
)
)
;
}
)
;
this
.
state
=
{
shortcuts
}
;
}
handleChange
(
event
)
{
const
{
target
}
=
event
;
const
{
name
checked
}
=
target
;
this
.
setState
(
prevState
=
>
{
const
shortcuts
=
prevState
.
shortcuts
.
slice
(
)
;
let
shortcut
=
shortcuts
.
find
(
(
{
keyword
}
)
=
>
keyword
=
=
=
name
)
;
shortcut
.
isSelected
=
checked
;
return
{
shortcuts
}
;
}
)
;
}
onCancelButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
this
.
props
.
onClose
(
)
;
}
onSaveButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
const
{
rows
}
=
this
.
props
.
TopSites
;
const
pinQueue
=
[
]
;
const
unpinQueue
=
[
]
;
this
.
state
.
shortcuts
.
forEach
(
shortcut
=
>
{
const
alreadyPinned
=
rows
.
find
(
row
=
>
row
&
&
row
.
isPinned
&
&
row
.
searchTopSite
&
&
row
.
label
=
=
=
shortcut
.
keyword
)
;
if
(
shortcut
.
isSelected
&
&
!
alreadyPinned
)
{
pinQueue
.
push
(
this
.
_searchTopSite
(
shortcut
)
)
;
}
else
if
(
!
shortcut
.
isSelected
&
&
alreadyPinned
)
{
unpinQueue
.
push
(
{
url
:
alreadyPinned
.
url
searchVendor
:
shortcut
.
shortURL
}
)
;
}
}
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
UPDATE_PINNED_SEARCH_SHORTCUTS
data
:
{
addedShortcuts
:
pinQueue
deletedShortcuts
:
unpinQueue
}
}
)
)
;
pinQueue
.
forEach
(
shortcut
=
>
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_3__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
SEARCH_EDIT_ADD
"
value
:
{
search_vendor
:
shortcut
.
searchVendor
}
}
)
)
;
}
)
;
unpinQueue
.
forEach
(
shortcut
=
>
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_3__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
SEARCH_EDIT_DELETE
"
value
:
{
search_vendor
:
shortcut
.
searchVendor
}
}
)
)
;
}
)
;
this
.
props
.
onClose
(
)
;
}
_searchTopSite
(
shortcut
)
{
return
{
url
:
shortcut
.
url
searchTopSite
:
true
label
:
shortcut
.
keyword
searchVendor
:
shortcut
.
shortURL
}
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
form
"
{
className
:
"
topsite
-
form
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
search
-
shortcuts
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
h3
"
{
className
:
"
section
-
title
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
section_menu_action_add_search_engine
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
null
this
.
state
.
shortcuts
.
map
(
shortcut
=
>
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
SelectableSearchShortcut
{
key
:
shortcut
.
keyword
shortcut
:
shortcut
selected
:
shortcut
.
isSelected
onChange
:
this
.
handleChange
}
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
section
"
{
className
:
"
actions
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
button
"
{
className
:
"
cancel
"
type
:
"
button
"
onClick
:
this
.
onCancelButtonClick
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
topsites_form_cancel_button
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
"
type
:
"
submit
"
onClick
:
this
.
onSaveButtonClick
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
topsites_form_save_button
"
}
)
)
)
)
;
}
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TopSiteLink
"
function
(
)
{
return
TopSiteLink
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TopSite
"
function
(
)
{
return
TopSite
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TopSitePlaceholder
"
function
(
)
{
return
TopSitePlaceholder
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_TopSiteList
"
function
(
)
{
return
_TopSiteList
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TopSiteList
"
function
(
)
{
return
TopSiteList
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
)
;
var
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
34
)
;
var
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
24
)
;
var
react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_4___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_4__
)
;
var
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
26
)
;
var
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
43
)
;
var
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
class
TopSiteLink
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
screenshotImage
:
null
}
;
this
.
onDragEvent
=
this
.
onDragEvent
.
bind
(
this
)
;
this
.
onKeyPress
=
this
.
onKeyPress
.
bind
(
this
)
;
}
_allowDrop
(
e
)
{
return
e
.
dataTransfer
.
types
.
includes
(
"
text
/
topsite
-
index
"
)
;
}
onDragEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
click
"
:
if
(
this
.
dragged
)
{
event
.
preventDefault
(
)
;
}
break
;
case
"
dragstart
"
:
this
.
dragged
=
true
;
event
.
dataTransfer
.
effectAllowed
=
"
move
"
;
event
.
dataTransfer
.
setData
(
"
text
/
topsite
-
index
"
this
.
props
.
index
)
;
event
.
target
.
blur
(
)
;
this
.
props
.
onDragEvent
(
event
this
.
props
.
index
this
.
props
.
link
this
.
props
.
title
)
;
break
;
case
"
dragend
"
:
this
.
props
.
onDragEvent
(
event
)
;
break
;
case
"
dragenter
"
:
case
"
dragover
"
:
case
"
drop
"
:
if
(
this
.
_allowDrop
(
event
)
)
{
event
.
preventDefault
(
)
;
this
.
props
.
onDragEvent
(
event
this
.
props
.
index
)
;
}
break
;
case
"
mousedown
"
:
if
(
event
.
button
=
=
=
1
&
&
this
.
props
.
link
.
searchTopSite
)
{
event
.
preventDefault
(
)
;
}
this
.
dragged
=
false
;
break
;
}
}
static
getNextStateFromProps
(
nextProps
prevState
)
{
const
{
screenshot
}
=
nextProps
.
link
;
const
imageInState
=
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
isRemoteImageLocal
(
prevState
.
screenshotImage
screenshot
)
;
if
(
imageInState
)
{
return
null
;
}
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
prevState
.
screenshotImage
)
;
return
{
screenshotImage
:
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
createLocalImageObject
(
screenshot
)
}
;
}
componentWillMount
(
)
{
const
nextState
=
TopSiteLink
.
getNextStateFromProps
(
this
.
props
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
componentWillReceiveProps
(
nextProps
)
{
const
nextState
=
TopSiteLink
.
getNextStateFromProps
(
nextProps
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
componentWillUnmount
(
)
{
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
this
.
state
.
screenshotImage
)
;
}
onKeyPress
(
event
)
{
if
(
this
.
props
.
link
.
searchTopSite
&
&
event
.
key
=
=
=
"
Enter
"
)
{
this
.
props
.
onClick
(
event
)
;
}
}
render
(
)
{
const
{
children
className
defaultStyle
isDraggable
link
onClick
title
}
=
this
.
props
;
const
topSiteOuterClassName
=
top
-
site
-
outer
{
className
?
{
className
}
:
"
"
}
{
link
.
isDragged
?
"
dragged
"
:
"
"
}
{
link
.
searchTopSite
?
"
search
-
shortcut
"
:
"
"
}
;
const
{
tippyTopIcon
faviconSize
}
=
link
;
const
[
letterFallback
]
=
title
;
let
imageClassName
;
let
imageStyle
;
let
showSmallFavicon
=
false
;
let
smallFaviconStyle
;
let
smallFaviconFallback
;
let
hasScreenshotImage
=
this
.
state
.
screenshotImage
&
&
this
.
state
.
screenshotImage
.
url
;
if
(
defaultStyle
)
{
smallFaviconFallback
=
false
;
}
else
if
(
link
.
searchTopSite
)
{
imageClassName
=
"
top
-
site
-
icon
rich
-
icon
"
;
imageStyle
=
{
backgroundColor
:
link
.
backgroundColor
backgroundImage
:
url
(
{
tippyTopIcon
}
)
}
;
smallFaviconStyle
=
{
backgroundImage
:
url
(
{
tippyTopIcon
}
)
}
;
}
else
if
(
link
.
customScreenshotURL
)
{
imageClassName
=
"
top
-
site
-
icon
rich
-
icon
"
;
imageStyle
=
{
backgroundColor
:
link
.
backgroundColor
backgroundImage
:
hasScreenshotImage
?
url
(
{
this
.
state
.
screenshotImage
.
url
}
)
:
"
none
"
}
;
}
else
if
(
tippyTopIcon
|
|
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
MIN_RICH_FAVICON_SIZE
"
]
)
{
imageClassName
=
"
top
-
site
-
icon
rich
-
icon
"
;
imageStyle
=
{
backgroundColor
:
link
.
backgroundColor
backgroundImage
:
url
(
{
tippyTopIcon
|
|
link
.
favicon
}
)
}
;
}
else
{
imageClassName
=
screenshot
{
hasScreenshotImage
?
"
active
"
:
"
"
}
;
imageStyle
=
{
backgroundImage
:
hasScreenshotImage
?
url
(
{
this
.
state
.
screenshotImage
.
url
}
)
:
"
none
"
}
;
if
(
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
MIN_CORNER_FAVICON_SIZE
"
]
)
{
showSmallFavicon
=
true
;
smallFaviconStyle
=
{
backgroundImage
:
url
(
{
link
.
favicon
}
)
}
;
}
else
if
(
hasScreenshotImage
)
{
showSmallFavicon
=
true
;
smallFaviconFallback
=
true
;
}
}
let
draggableProps
=
{
}
;
if
(
isDraggable
)
{
draggableProps
=
{
onClick
:
this
.
onDragEvent
onDragEnd
:
this
.
onDragEvent
onDragStart
:
this
.
onDragEvent
onMouseDown
:
this
.
onDragEvent
}
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
_extends
(
{
className
:
topSiteOuterClassName
onDrop
:
this
.
onDragEvent
onDragOver
:
this
.
onDragEvent
onDragEnter
:
this
.
onDragEvent
onDragLeave
:
this
.
onDragEvent
}
draggableProps
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
inner
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
href
:
!
link
.
searchTopSite
&
&
link
.
url
tabIndex
:
"
0
"
onKeyPress
:
this
.
onKeyPress
onClick
:
onClick
draggable
:
true
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
tile
"
"
aria
-
hidden
"
:
true
"
data
-
fallback
"
:
letterFallback
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
imageClassName
style
:
imageStyle
}
)
link
.
searchTopSite
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
search
-
topsite
"
}
)
showSmallFavicon
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
default
-
icon
"
"
data
-
fallback
"
:
smallFaviconFallback
&
&
letterFallback
style
:
smallFaviconStyle
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
title
{
link
.
isPinned
?
"
pinned
"
:
"
"
}
}
link
.
isPinned
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
icon
icon
-
pin
-
small
"
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
dir
:
"
auto
"
}
title
)
)
)
children
)
)
;
}
}
TopSiteLink
.
defaultProps
=
{
title
:
"
"
link
:
{
}
isDraggable
:
true
}
;
class
TopSite
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
showContextMenu
:
false
}
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
this
.
onMenuButtonClick
=
this
.
onMenuButtonClick
.
bind
(
this
)
;
this
.
onMenuUpdate
=
this
.
onMenuUpdate
.
bind
(
this
)
;
}
_getTelemetryInfo
(
)
{
const
value
=
{
icon_type
:
this
.
props
.
link
.
iconType
}
;
if
(
this
.
props
.
link
.
isPinned
)
{
value
.
card_type
=
"
pinned
"
;
}
if
(
this
.
props
.
link
.
searchTopSite
)
{
value
.
card_type
=
"
search
"
;
value
.
search_vendor
=
this
.
props
.
link
.
hostname
;
}
return
{
value
}
;
}
userEvent
(
event
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
Object
.
assign
(
{
event
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_SOURCE
"
]
action_position
:
this
.
props
.
index
}
this
.
_getTelemetryInfo
(
)
)
)
)
;
}
onLinkClick
(
event
)
{
this
.
userEvent
(
"
CLICK
"
)
;
event
.
preventDefault
(
)
;
const
{
altKey
button
ctrlKey
metaKey
shiftKey
}
=
event
;
if
(
!
this
.
props
.
link
.
searchTopSite
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
Object
.
assign
(
this
.
props
.
link
{
event
:
{
altKey
button
ctrlKey
metaKey
shiftKey
}
}
)
}
)
)
;
}
else
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
FILL_SEARCH_TERM
data
:
{
label
:
this
.
props
.
link
.
label
}
}
)
)
;
}
}
onMenuButtonClick
(
event
)
{
event
.
preventDefault
(
)
;
this
.
props
.
onActivate
(
this
.
props
.
index
)
;
this
.
setState
(
{
showContextMenu
:
true
}
)
;
}
onMenuUpdate
(
showContextMenu
)
{
this
.
setState
(
{
showContextMenu
}
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
link
}
=
props
;
const
isContextMenuOpen
=
this
.
state
.
showContextMenu
&
&
props
.
activeIndex
=
=
=
props
.
index
;
const
title
=
link
.
label
|
|
link
.
hostname
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSiteLink
_extends
(
{
}
props
{
onClick
:
this
.
onLinkClick
onDragEvent
:
this
.
props
.
onDragEvent
className
:
{
props
.
className
|
|
"
"
}
{
isContextMenuOpen
?
"
active
"
:
"
"
}
title
:
title
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
context
-
menu
-
button
icon
"
onClick
:
this
.
onMenuButtonClick
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
className
:
"
sr
-
only
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
context_menu_button_sr
"
values
:
{
title
}
}
)
)
)
isContextMenuOpen
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_3__
[
"
LinkMenu
"
]
{
dispatch
:
props
.
dispatch
index
:
props
.
index
onUpdate
:
this
.
onMenuUpdate
options
:
link
.
searchTopSite
?
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
"
]
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_CONTEXT_MENU_OPTIONS
"
]
site
:
link
siteInfo
:
this
.
_getTelemetryInfo
(
)
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_SOURCE
"
]
}
)
)
)
;
}
}
TopSite
.
defaultProps
=
{
link
:
{
}
onActivate
(
)
{
}
}
;
class
TopSitePlaceholder
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onEditButtonClick
=
this
.
onEditButtonClick
.
bind
(
this
)
;
}
onEditButtonClick
(
)
{
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
data
:
{
index
:
this
.
props
.
index
}
}
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSiteLink
_extends
(
{
}
this
.
props
{
className
:
placeholder
{
this
.
props
.
className
|
|
"
"
}
isDraggable
:
false
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
context
-
menu
-
button
edit
-
button
icon
"
title
:
this
.
props
.
intl
.
formatMessage
(
{
id
:
"
edit_topsites_edit_button
"
}
)
onClick
:
this
.
onEditButtonClick
}
)
)
;
}
}
class
_TopSiteList
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
static
get
DEFAULT_STATE
(
)
{
return
{
activeIndex
:
null
draggedIndex
:
null
draggedSite
:
null
draggedTitle
:
null
topSitesPreview
:
null
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
_TopSiteList
.
DEFAULT_STATE
;
this
.
onDragEvent
=
this
.
onDragEvent
.
bind
(
this
)
;
this
.
onActivate
=
this
.
onActivate
.
bind
(
this
)
;
}
componentWillReceiveProps
(
nextProps
)
{
if
(
this
.
state
.
draggedSite
)
{
const
prevTopSites
=
this
.
props
.
TopSites
&
&
this
.
props
.
TopSites
.
rows
;
const
newTopSites
=
nextProps
.
TopSites
&
&
nextProps
.
TopSites
.
rows
;
if
(
prevTopSites
&
&
prevTopSites
[
this
.
state
.
draggedIndex
]
&
&
prevTopSites
[
this
.
state
.
draggedIndex
]
.
url
=
=
=
this
.
state
.
draggedSite
.
url
&
&
(
!
newTopSites
[
this
.
state
.
draggedIndex
]
|
|
newTopSites
[
this
.
state
.
draggedIndex
]
.
url
!
=
=
this
.
state
.
draggedSite
.
url
)
)
{
this
.
setState
(
_TopSiteList
.
DEFAULT_STATE
)
;
}
}
}
userEvent
(
event
index
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_SOURCE
"
]
action_position
:
index
}
)
)
;
}
onDragEvent
(
event
index
link
title
)
{
switch
(
event
.
type
)
{
case
"
dragstart
"
:
this
.
dropped
=
false
;
this
.
setState
(
{
draggedIndex
:
index
draggedSite
:
link
draggedTitle
:
title
activeIndex
:
null
}
)
;
this
.
userEvent
(
"
DRAG
"
index
)
;
break
;
case
"
dragend
"
:
if
(
!
this
.
dropped
)
{
this
.
setState
(
_TopSiteList
.
DEFAULT_STATE
)
;
}
break
;
case
"
dragenter
"
:
if
(
index
=
=
=
this
.
state
.
draggedIndex
)
{
this
.
setState
(
{
topSitesPreview
:
null
}
)
;
}
else
{
this
.
setState
(
{
topSitesPreview
:
this
.
_makeTopSitesPreview
(
index
)
}
)
;
}
break
;
case
"
drop
"
:
if
(
index
!
=
=
this
.
state
.
draggedIndex
)
{
this
.
dropped
=
true
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_INSERT
data
:
{
site
:
Object
.
assign
(
{
url
:
this
.
state
.
draggedSite
.
url
label
:
this
.
state
.
draggedTitle
customScreenshotURL
:
this
.
state
.
draggedSite
.
customScreenshotURL
}
this
.
state
.
draggedSite
.
searchTopSite
&
&
{
searchTopSite
:
true
}
)
index
draggedFromIndex
:
this
.
state
.
draggedIndex
}
}
)
)
;
this
.
userEvent
(
"
DROP
"
index
)
;
}
break
;
}
}
_getTopSites
(
)
{
let
topSites
=
this
.
props
.
TopSites
.
rows
.
slice
(
)
;
topSites
.
length
=
this
.
props
.
TopSitesRows
*
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_6__
[
"
TOP_SITES_MAX_SITES_PER_ROW
"
]
;
return
topSites
;
}
_makeTopSitesPreview
(
index
)
{
const
topSites
=
this
.
_getTopSites
(
)
;
topSites
[
this
.
state
.
draggedIndex
]
=
null
;
const
pinnedOnly
=
topSites
.
map
(
site
=
>
site
&
&
site
.
isPinned
?
site
:
null
)
;
const
unpinned
=
topSites
.
filter
(
site
=
>
site
&
&
!
site
.
isPinned
)
;
const
siteToInsert
=
Object
.
assign
(
{
}
this
.
state
.
draggedSite
{
isPinned
:
true
isDragged
:
true
}
)
;
if
(
!
pinnedOnly
[
index
]
)
{
pinnedOnly
[
index
]
=
siteToInsert
;
}
else
{
let
holeIndex
=
index
;
const
indexStep
=
index
>
this
.
state
.
draggedIndex
?
-
1
:
1
;
while
(
pinnedOnly
[
holeIndex
]
)
{
holeIndex
+
=
indexStep
;
}
const
shiftingStep
=
index
>
this
.
state
.
draggedIndex
?
1
:
-
1
;
while
(
holeIndex
!
=
=
index
)
{
const
nextIndex
=
holeIndex
+
shiftingStep
;
pinnedOnly
[
holeIndex
]
=
pinnedOnly
[
nextIndex
]
;
holeIndex
=
nextIndex
;
}
pinnedOnly
[
index
]
=
siteToInsert
;
}
const
preview
=
pinnedOnly
;
for
(
let
i
=
0
;
i
<
preview
.
length
;
i
+
+
)
{
if
(
!
preview
[
i
]
)
{
preview
[
i
]
=
unpinned
.
shift
(
)
|
|
null
;
}
}
return
preview
;
}
onActivate
(
index
)
{
this
.
setState
(
{
activeIndex
:
index
}
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
topSites
=
this
.
state
.
topSitesPreview
|
|
this
.
_getTopSites
(
)
;
const
topSitesUI
=
[
]
;
const
commonProps
=
{
onDragEvent
:
this
.
onDragEvent
dispatch
:
props
.
dispatch
intl
:
props
.
intl
}
;
let
holeIndex
=
0
;
const
maxNarrowVisibleIndex
=
props
.
TopSitesRows
*
6
;
for
(
let
i
=
0
l
=
topSites
.
length
;
i
<
l
;
i
+
+
)
{
const
link
=
topSites
[
i
]
&
&
Object
.
assign
(
{
}
topSites
[
i
]
{
iconType
:
this
.
props
.
topSiteIconType
(
topSites
[
i
]
)
}
)
;
const
slotProps
=
{
key
:
link
?
link
.
url
:
holeIndex
+
+
index
:
i
}
;
if
(
i
>
=
maxNarrowVisibleIndex
)
{
slotProps
.
className
=
"
hide
-
for
-
narrow
"
;
}
topSitesUI
.
push
(
!
link
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSitePlaceholder
_extends
(
{
}
slotProps
commonProps
)
)
:
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSite
_extends
(
{
link
:
link
activeIndex
:
this
.
state
.
activeIndex
onActivate
:
this
.
onActivate
}
slotProps
commonProps
)
)
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
ul
"
{
className
:
top
-
sites
-
list
{
this
.
state
.
draggedSite
?
"
dnd
-
active
"
:
"
"
}
}
topSitesUI
)
;
}
}
const
TopSiteList
=
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
injectIntl
"
]
)
(
_TopSiteList
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_StartupOverlay
"
function
(
)
{
return
_StartupOverlay
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
StartupOverlay
"
function
(
)
{
return
StartupOverlay
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
13
)
;
var
react_intl__WEBPACK_IMPORTED_MODULE_1___default
=
__webpack_require__
.
n
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
16
)
;
var
react_redux__WEBPACK_IMPORTED_MODULE_2___default
=
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
)
;
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
5
)
;
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
function
_asyncToGenerator
(
fn
)
{
return
function
(
)
{
var
gen
=
fn
.
apply
(
this
arguments
)
;
return
new
Promise
(
function
(
resolve
reject
)
{
function
step
(
key
arg
)
{
try
{
var
info
=
gen
[
key
]
(
arg
)
;
var
value
=
info
.
value
;
}
catch
(
error
)
{
reject
(
error
)
;
return
;
}
if
(
info
.
done
)
{
resolve
(
value
)
;
}
else
{
return
Promise
.
resolve
(
value
)
.
then
(
function
(
value
)
{
step
(
"
next
"
value
)
;
}
function
(
err
)
{
step
(
"
throw
"
err
)
;
}
)
;
}
}
return
step
(
"
next
"
)
;
}
)
;
}
;
}
class
_StartupOverlay
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onInputChange
=
this
.
onInputChange
.
bind
(
this
)
;
this
.
onSubmit
=
this
.
onSubmit
.
bind
(
this
)
;
this
.
clickSkip
=
this
.
clickSkip
.
bind
(
this
)
;
this
.
initScene
=
this
.
initScene
.
bind
(
this
)
;
this
.
removeOverlay
=
this
.
removeOverlay
.
bind
(
this
)
;
this
.
onInputInvalid
=
this
.
onInputInvalid
.
bind
(
this
)
;
this
.
state
=
{
emailInput
:
"
"
overlayRemoved
:
false
flowId
:
"
"
flowBeginTime
:
0
}
;
this
.
didFetch
=
false
;
}
componentWillUpdate
(
)
{
var
_this
=
this
;
return
_asyncToGenerator
(
function
*
(
)
{
if
(
_this
.
props
.
fxa_endpoint
&
&
!
_this
.
didFetch
)
{
try
{
_this
.
didFetch
=
true
;
const
fxaParams
=
"
entrypoint
=
activity
-
stream
-
firstrun
&
utm_source
=
activity
-
stream
&
utm_campaign
=
firstrun
&
form_type
=
email
"
;
const
response
=
yield
fetch
(
{
_this
.
props
.
fxa_endpoint
}
/
metrics
-
flow
?
{
fxaParams
}
)
;
if
(
response
.
status
=
=
=
200
)
{
const
{
flowId
flowBeginTime
}
=
yield
response
.
json
(
)
;
_this
.
setState
(
{
flowId
flowBeginTime
}
)
;
}
}
catch
(
error
)
{
_this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TELEMETRY_UNDESIRED_EVENT
data
:
{
value
:
"
FXA_METRICS_ERROR
"
}
}
)
)
;
}
}
}
)
(
)
;
}
componentDidMount
(
)
{
this
.
initScene
(
)
;
}
initScene
(
)
{
setTimeout
(
(
)
=
>
{
this
.
setState
(
{
show
:
true
}
)
;
}
10
)
;
}
removeOverlay
(
)
{
window
.
removeEventListener
(
"
visibilitychange
"
this
.
removeOverlay
)
;
document
.
body
.
classList
.
remove
(
"
hide
-
main
"
)
;
this
.
setState
(
{
show
:
false
}
)
;
setTimeout
(
(
)
=
>
{
document
.
body
.
classList
.
remove
(
"
welcome
"
)
;
this
.
setState
(
{
overlayRemoved
:
true
}
)
;
}
400
)
;
}
onInputChange
(
e
)
{
let
error
=
e
.
target
.
previousSibling
;
this
.
setState
(
{
emailInput
:
e
.
target
.
value
}
)
;
error
.
classList
.
remove
(
"
active
"
)
;
e
.
target
.
classList
.
remove
(
"
invalid
"
)
;
}
onSubmit
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
SUBMIT_EMAIL
"
}
)
)
;
window
.
addEventListener
(
"
visibilitychange
"
this
.
removeOverlay
)
;
}
clickSkip
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
SKIPPED_SIGNIN
"
}
)
)
;
this
.
removeOverlay
(
)
;
}
onInputInvalid
(
e
)
{
let
error
=
e
.
target
.
previousSibling
;
error
.
classList
.
add
(
"
active
"
)
;
e
.
target
.
classList
.
add
(
"
invalid
"
)
;
e
.
preventDefault
(
)
;
e
.
target
.
focus
(
)
;
}
render
(
)
{
if
(
this
.
state
.
overlayRemoved
)
{
return
null
;
}
let
termsLink
=
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
a
"
{
href
:
{
this
.
props
.
fxa_endpoint
}
/
legal
/
terms
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_terms_of_service
"
}
)
)
;
let
privacyLink
=
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
a
"
{
href
:
{
this
.
props
.
fxa_endpoint
}
/
legal
/
privacy
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_privacy_notice
"
}
)
)
;
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
overlay
-
wrapper
{
this
.
state
.
show
?
"
show
"
:
"
"
}
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
background
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
firstrun
-
scene
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fxaccounts
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
firstrun
-
left
-
divider
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
h1
"
{
className
:
"
firstrun
-
title
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_title
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
p
"
{
className
:
"
firstrun
-
content
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_content
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
a
"
{
className
:
"
firstrun
-
link
"
href
:
"
https
:
/
/
www
.
mozilla
.
org
/
firefox
/
features
/
sync
/
"
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_learn_more_link
"
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
firstrun
-
sign
-
in
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
p
"
{
className
:
"
form
-
header
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_form_header
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
sub
-
header
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_form_sub_header
"
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
form
"
{
method
:
"
get
"
action
:
this
.
props
.
fxa_endpoint
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
onSubmit
:
this
.
onSubmit
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
service
"
type
:
"
hidden
"
value
:
"
sync
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
action
"
type
:
"
hidden
"
value
:
"
email
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
context
"
type
:
"
hidden
"
value
:
"
fx_desktop_v3
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
entrypoint
"
type
:
"
hidden
"
value
:
"
activity
-
stream
-
firstrun
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
utm_source
"
type
:
"
hidden
"
value
:
"
activity
-
stream
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
utm_campaign
"
type
:
"
hidden
"
value
:
"
firstrun
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
flow_id
"
type
:
"
hidden
"
value
:
this
.
state
.
flowId
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
name
:
"
flow_begin_time
"
type
:
"
hidden
"
value
:
this
.
state
.
flowBeginTime
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
error
"
}
this
.
props
.
intl
.
formatMessage
(
{
id
:
"
firstrun_invalid_input
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
className
:
"
email
-
input
"
name
:
"
email
"
type
:
"
email
"
required
:
"
true
"
onInvalid
:
this
.
onInputInvalid
placeholder
:
this
.
props
.
intl
.
formatMessage
(
{
id
:
"
firstrun_email_input_placeholder
"
}
)
onChange
:
this
.
onInputChange
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
extra
-
links
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_extra_legal_links
"
values
:
{
terms
:
termsLink
privacy
:
privacyLink
}
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
className
:
"
continue
-
button
"
type
:
"
submit
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_continue_to_login
"
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
className
:
"
skip
-
button
"
disabled
:
!
!
this
.
state
.
emailInput
onClick
:
this
.
clickSkip
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
FormattedMessage
"
]
{
id
:
"
firstrun_skip_login
"
}
)
)
)
)
)
)
;
}
}
const
getState
=
state
=
>
(
{
fxa_endpoint
:
state
.
Prefs
.
values
.
fxa_endpoint
}
)
;
const
StartupOverlay
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
[
"
connect
"
]
)
(
getState
)
(
Object
(
react_intl__WEBPACK_IMPORTED_MODULE_1__
[
"
injectIntl
"
]
)
(
_StartupOverlay
)
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
(
function
(
global
)
{
__webpack_require__
.
d
(
__webpack_exports__
"
DetectUserSessionStart
"
function
(
)
{
return
DetectUserSessionStart
;
}
)
;
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
var
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
31
)
;
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
class
DetectUserSessionStart
{
constructor
(
store
options
=
{
}
)
{
this
.
_store
=
store
;
this
.
document
=
options
.
document
|
|
global
.
document
;
this
.
_perfService
=
options
.
perfService
|
|
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
perfService
"
]
;
this
.
_onVisibilityChange
=
this
.
_onVisibilityChange
.
bind
(
this
)
;
}
sendEventOrAddListener
(
)
{
if
(
this
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
_sendEvent
(
)
;
}
else
{
this
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
_sendEvent
(
)
{
this
.
_perfService
.
mark
(
"
visibility_event_rcvd_ts
"
)
;
try
{
let
visibility_event_rcvd_ts
=
this
.
_perfService
.
getMostRecentAbsMarkStartByName
(
"
visibility_event_rcvd_ts
"
)
;
this
.
_store
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
data
:
{
visibility_event_rcvd_ts
}
}
)
)
;
}
catch
(
ex
)
{
}
}
_onVisibilityChange
(
)
{
if
(
this
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
_sendEvent
(
)
;
this
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
}
}
.
call
(
this
__webpack_require__
(
1
)
)
)
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
enableASRouterContent
"
function
(
)
{
return
enableASRouterContent
;
}
)
;
function
enableASRouterContent
(
store
asrouterContent
)
{
store
.
subscribe
(
(
)
=
>
{
const
state
=
store
.
getState
(
)
;
if
(
state
.
Prefs
.
values
.
asrouterExperimentEnabled
&
&
!
asrouterContent
.
initialized
)
{
asrouterContent
.
init
(
)
;
}
else
if
(
!
state
.
Prefs
.
values
.
asrouterExperimentEnabled
&
&
asrouterContent
.
initialized
)
{
asrouterContent
.
uninit
(
)
;
}
}
)
;
return
{
asrouterContent
}
;
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
const
MAX_PLACEABLES
=
100
;
const
entryIdentifierRe
=
/
-
?
[
a
-
zA
-
Z
]
[
a
-
zA
-
Z0
-
9_
-
]
*
/
y
;
const
identifierRe
=
/
[
a
-
zA
-
Z
]
[
a
-
zA
-
Z0
-
9_
-
]
*
/
y
;
const
functionIdentifierRe
=
/
^
[
A
-
Z
]
[
A
-
Z_
?
-
]
*
/
;
class
RuntimeParser
{
getResource
(
string
)
{
this
.
_source
=
string
;
this
.
_index
=
0
;
this
.
_length
=
string
.
length
;
this
.
entries
=
{
}
;
const
errors
=
[
]
;
this
.
skipWS
(
)
;
while
(
this
.
_index
<
this
.
_length
)
{
try
{
this
.
getEntry
(
)
;
}
catch
(
e
)
{
if
(
e
instanceof
SyntaxError
)
{
errors
.
push
(
e
)
;
this
.
skipToNextEntryStart
(
)
;
}
else
{
throw
e
;
}
}
this
.
skipWS
(
)
;
}
return
[
this
.
entries
errors
]
;
}
getEntry
(
)
{
if
(
this
.
_index
!
=
=
0
&
&
this
.
_source
[
this
.
_index
-
1
]
!
=
=
"
\
n
"
)
{
throw
this
.
error
(
Expected
an
entry
to
start
at
the
beginning
of
the
file
or
on
a
new
line
.
)
;
}
const
ch
=
this
.
_source
[
this
.
_index
]
;
if
(
ch
=
=
=
"
/
"
|
|
ch
=
=
=
"
#
"
&
&
[
"
"
"
#
"
"
\
n
"
]
.
includes
(
this
.
_source
[
this
.
_index
+
1
]
)
)
{
this
.
skipComment
(
)
;
return
;
}
if
(
ch
=
=
=
"
[
"
)
{
this
.
skipSection
(
)
;
return
;
}
this
.
getMessage
(
)
;
}
skipSection
(
)
{
this
.
_index
+
=
1
;
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
[
"
)
{
throw
this
.
error
(
'
Expected
"
[
[
"
to
open
a
section
'
)
;
}
this
.
_index
+
=
1
;
this
.
skipInlineWS
(
)
;
this
.
getVariantName
(
)
;
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
]
"
|
|
this
.
_source
[
this
.
_index
+
1
]
!
=
=
"
]
"
)
{
throw
this
.
error
(
'
Expected
"
]
]
"
to
close
a
section
'
)
;
}
this
.
_index
+
=
2
;
}
getMessage
(
)
{
const
id
=
this
.
getEntryIdentifier
(
)
;
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
=
"
)
{
this
.
_index
+
+
;
}
this
.
skipInlineWS
(
)
;
const
val
=
this
.
getPattern
(
)
;
if
(
id
.
startsWith
(
"
-
"
)
&
&
val
=
=
=
null
)
{
throw
this
.
error
(
"
Expected
term
to
have
a
value
"
)
;
}
let
attrs
=
null
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
"
)
{
const
lineStart
=
this
.
_index
;
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
.
"
)
{
this
.
_index
=
lineStart
;
attrs
=
this
.
getAttributes
(
)
;
}
}
if
(
attrs
=
=
=
null
&
&
typeof
val
=
=
=
"
string
"
)
{
this
.
entries
[
id
]
=
val
;
}
else
{
if
(
val
=
=
=
null
&
&
attrs
=
=
=
null
)
{
throw
this
.
error
(
"
Expected
message
to
have
a
value
or
attributes
"
)
;
}
this
.
entries
[
id
]
=
{
}
;
if
(
val
!
=
=
null
)
{
this
.
entries
[
id
]
.
val
=
val
;
}
if
(
attrs
!
=
=
null
)
{
this
.
entries
[
id
]
.
attrs
=
attrs
;
}
}
}
skipWS
(
)
{
let
ch
=
this
.
_source
[
this
.
_index
]
;
while
(
ch
=
=
=
"
"
|
|
ch
=
=
=
"
\
n
"
|
|
ch
=
=
=
"
\
t
"
|
|
ch
=
=
=
"
\
r
"
)
{
ch
=
this
.
_source
[
+
+
this
.
_index
]
;
}
}
skipInlineWS
(
)
{
let
ch
=
this
.
_source
[
this
.
_index
]
;
while
(
ch
=
=
=
"
"
|
|
ch
=
=
=
"
\
t
"
)
{
ch
=
this
.
_source
[
+
+
this
.
_index
]
;
}
}
skipBlankLines
(
)
{
while
(
true
)
{
const
ptr
=
this
.
_index
;
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
\
n
"
)
{
this
.
_index
+
=
1
;
}
else
{
this
.
_index
=
ptr
;
break
;
}
}
}
getIdentifier
(
re
=
identifierRe
)
{
re
.
lastIndex
=
this
.
_index
;
const
result
=
re
.
exec
(
this
.
_source
)
;
if
(
result
=
=
=
null
)
{
this
.
_index
+
=
1
;
throw
this
.
error
(
Expected
an
identifier
[
{
re
.
toString
(
)
}
]
)
;
}
this
.
_index
=
re
.
lastIndex
;
return
result
[
0
]
;
}
getEntryIdentifier
(
)
{
return
this
.
getIdentifier
(
entryIdentifierRe
)
;
}
getVariantName
(
)
{
let
name
=
"
"
;
const
start
=
this
.
_index
;
let
cc
=
this
.
_source
.
charCodeAt
(
this
.
_index
)
;
if
(
cc
>
=
97
&
&
cc
<
=
122
|
|
cc
>
=
65
&
&
cc
<
=
90
|
|
cc
=
=
=
95
|
|
cc
=
=
=
32
)
{
cc
=
this
.
_source
.
charCodeAt
(
+
+
this
.
_index
)
;
}
else
{
throw
this
.
error
(
"
Expected
a
keyword
(
starting
with
[
a
-
zA
-
Z_
]
)
"
)
;
}
while
(
cc
>
=
97
&
&
cc
<
=
122
|
|
cc
>
=
65
&
&
cc
<
=
90
|
|
cc
>
=
48
&
&
cc
<
=
57
|
|
cc
=
=
=
95
|
|
cc
=
=
=
45
|
|
cc
=
=
=
32
)
{
cc
=
this
.
_source
.
charCodeAt
(
+
+
this
.
_index
)
;
}
while
(
this
.
_source
.
charCodeAt
(
this
.
_index
-
1
)
=
=
=
32
)
{
this
.
_index
-
-
;
}
name
+
=
this
.
_source
.
slice
(
start
this
.
_index
)
;
return
{
type
:
"
varname
"
name
}
;
}
getString
(
)
{
const
start
=
this
.
_index
+
1
;
while
(
+
+
this
.
_index
<
this
.
_length
)
{
const
ch
=
this
.
_source
[
this
.
_index
]
;
if
(
ch
=
=
=
'
"
'
)
{
break
;
}
if
(
ch
=
=
=
"
\
n
"
)
{
throw
this
.
error
(
"
Unterminated
string
expression
"
)
;
}
}
return
this
.
_source
.
substring
(
start
this
.
_index
+
+
)
;
}
getPattern
(
)
{
const
start
=
this
.
_index
;
let
eol
=
this
.
_source
.
indexOf
(
"
\
n
"
this
.
_index
)
;
if
(
eol
=
=
=
-
1
)
{
eol
=
this
.
_length
;
}
const
firstLineContent
=
start
!
=
=
eol
?
this
.
_source
.
slice
(
start
eol
)
:
null
;
if
(
firstLineContent
&
&
firstLineContent
.
includes
(
"
{
"
)
)
{
return
this
.
getComplexPattern
(
)
;
}
this
.
_index
=
eol
+
1
;
this
.
skipBlankLines
(
)
;
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
"
)
{
return
firstLineContent
;
}
const
lineStart
=
this
.
_index
;
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
.
"
)
{
this
.
_index
=
lineStart
;
return
firstLineContent
;
}
if
(
firstLineContent
)
{
this
.
_index
=
start
;
}
return
this
.
getComplexPattern
(
)
;
}
getComplexPattern
(
)
{
let
buffer
=
"
"
;
const
content
=
[
]
;
let
placeables
=
0
;
let
ch
=
this
.
_source
[
this
.
_index
]
;
while
(
this
.
_index
<
this
.
_length
)
{
if
(
ch
=
=
=
"
\
n
"
)
{
this
.
_index
+
+
;
const
blankLinesStart
=
this
.
_index
;
this
.
skipBlankLines
(
)
;
const
blankLinesEnd
=
this
.
_index
;
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
"
)
{
break
;
}
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
}
"
|
|
this
.
_source
[
this
.
_index
]
=
=
=
"
[
"
|
|
this
.
_source
[
this
.
_index
]
=
=
=
"
*
"
|
|
this
.
_source
[
this
.
_index
]
=
=
=
"
.
"
)
{
this
.
_index
=
blankLinesEnd
;
break
;
}
buffer
+
=
this
.
_source
.
substring
(
blankLinesStart
blankLinesEnd
)
;
if
(
buffer
.
length
|
|
content
.
length
)
{
buffer
+
=
"
\
n
"
;
}
ch
=
this
.
_source
[
this
.
_index
]
;
continue
;
}
else
if
(
ch
=
=
=
"
\
\
"
)
{
const
ch2
=
this
.
_source
[
this
.
_index
+
1
]
;
if
(
ch2
=
=
=
'
"
'
|
|
ch2
=
=
=
"
{
"
|
|
ch2
=
=
=
"
\
\
"
)
{
ch
=
ch2
;
this
.
_index
+
+
;
}
}
else
if
(
ch
=
=
=
"
{
"
)
{
if
(
buffer
.
length
)
{
content
.
push
(
buffer
)
;
}
if
(
placeables
>
MAX_PLACEABLES
-
1
)
{
throw
this
.
error
(
Too
many
placeables
maximum
allowed
is
{
MAX_PLACEABLES
}
)
;
}
buffer
=
"
"
;
content
.
push
(
this
.
getPlaceable
(
)
)
;
this
.
_index
+
+
;
ch
=
this
.
_source
[
this
.
_index
]
;
placeables
+
+
;
continue
;
}
if
(
ch
)
{
buffer
+
=
ch
;
}
this
.
_index
+
+
;
ch
=
this
.
_source
[
this
.
_index
]
;
}
if
(
content
.
length
=
=
=
0
)
{
return
buffer
.
length
?
buffer
:
null
;
}
if
(
buffer
.
length
)
{
content
.
push
(
buffer
)
;
}
return
content
;
}
getPlaceable
(
)
{
const
start
=
+
+
this
.
_index
;
this
.
skipWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
*
"
|
|
this
.
_source
[
this
.
_index
]
=
=
=
"
[
"
&
&
this
.
_source
[
this
.
_index
+
1
]
!
=
=
"
]
"
)
{
const
variants
=
this
.
getVariants
(
)
;
return
{
type
:
"
sel
"
exp
:
null
vars
:
variants
[
0
]
def
:
variants
[
1
]
}
;
}
this
.
_index
=
start
;
this
.
skipInlineWS
(
)
;
const
selector
=
this
.
getSelectorExpression
(
)
;
this
.
skipWS
(
)
;
const
ch
=
this
.
_source
[
this
.
_index
]
;
if
(
ch
=
=
=
"
}
"
)
{
if
(
selector
.
type
=
=
=
"
attr
"
&
&
selector
.
id
.
name
.
startsWith
(
"
-
"
)
)
{
throw
this
.
error
(
"
Attributes
of
private
messages
cannot
be
interpolated
.
"
)
;
}
return
selector
;
}
if
(
ch
!
=
=
"
-
"
|
|
this
.
_source
[
this
.
_index
+
1
]
!
=
=
"
>
"
)
{
throw
this
.
error
(
'
Expected
"
}
"
or
"
-
>
"
'
)
;
}
if
(
selector
.
type
=
=
=
"
ref
"
)
{
throw
this
.
error
(
"
Message
references
cannot
be
used
as
selectors
.
"
)
;
}
if
(
selector
.
type
=
=
=
"
var
"
)
{
throw
this
.
error
(
"
Variants
cannot
be
used
as
selectors
.
"
)
;
}
if
(
selector
.
type
=
=
=
"
attr
"
&
&
!
selector
.
id
.
name
.
startsWith
(
"
-
"
)
)
{
throw
this
.
error
(
"
Attributes
of
public
messages
cannot
be
used
as
selectors
.
"
)
;
}
this
.
_index
+
=
2
;
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
\
n
"
)
{
throw
this
.
error
(
"
Variants
should
be
listed
in
a
new
line
"
)
;
}
this
.
skipWS
(
)
;
const
variants
=
this
.
getVariants
(
)
;
if
(
variants
[
0
]
.
length
=
=
=
0
)
{
throw
this
.
error
(
"
Expected
members
for
the
select
expression
"
)
;
}
return
{
type
:
"
sel
"
exp
:
selector
vars
:
variants
[
0
]
def
:
variants
[
1
]
}
;
}
getSelectorExpression
(
)
{
const
literal
=
this
.
getLiteral
(
)
;
if
(
literal
.
type
!
=
=
"
ref
"
)
{
return
literal
;
}
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
.
"
)
{
this
.
_index
+
+
;
const
name
=
this
.
getIdentifier
(
)
;
this
.
_index
+
+
;
return
{
type
:
"
attr
"
id
:
literal
name
}
;
}
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
[
"
)
{
this
.
_index
+
+
;
const
key
=
this
.
getVariantKey
(
)
;
this
.
_index
+
+
;
return
{
type
:
"
var
"
id
:
literal
key
}
;
}
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
(
"
)
{
this
.
_index
+
+
;
const
args
=
this
.
getCallArgs
(
)
;
if
(
!
functionIdentifierRe
.
test
(
literal
.
name
)
)
{
throw
this
.
error
(
"
Function
names
must
be
all
upper
-
case
"
)
;
}
this
.
_index
+
+
;
literal
.
type
=
"
fun
"
;
return
{
type
:
"
call
"
fun
:
literal
args
}
;
}
return
literal
;
}
getCallArgs
(
)
{
const
args
=
[
]
;
while
(
this
.
_index
<
this
.
_length
)
{
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
)
"
)
{
return
args
;
}
const
exp
=
this
.
getSelectorExpression
(
)
;
if
(
exp
.
type
!
=
=
"
ref
"
)
{
args
.
push
(
exp
)
;
}
else
{
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
:
"
)
{
this
.
_index
+
+
;
this
.
skipInlineWS
(
)
;
const
val
=
this
.
getSelectorExpression
(
)
;
if
(
typeof
val
=
=
=
"
string
"
|
|
Array
.
isArray
(
val
)
|
|
val
.
type
=
=
=
"
num
"
)
{
args
.
push
(
{
type
:
"
narg
"
name
:
exp
.
name
val
}
)
;
}
else
{
this
.
_index
=
this
.
_source
.
lastIndexOf
(
"
:
"
this
.
_index
)
+
1
;
throw
this
.
error
(
"
Expected
string
in
quotes
number
.
"
)
;
}
}
else
{
args
.
push
(
exp
)
;
}
}
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
)
"
)
{
break
;
}
else
if
(
this
.
_source
[
this
.
_index
]
=
=
=
"
"
)
{
this
.
_index
+
+
;
}
else
{
throw
this
.
error
(
'
Expected
"
"
or
"
)
"
'
)
;
}
}
return
args
;
}
getNumber
(
)
{
let
num
=
"
"
;
let
cc
=
this
.
_source
.
charCodeAt
(
this
.
_index
)
;
if
(
cc
=
=
=
45
)
{
num
+
=
"
-
"
;
cc
=
this
.
_source
.
charCodeAt
(
+
+
this
.
_index
)
;
}
if
(
cc
<
48
|
|
cc
>
57
)
{
throw
this
.
error
(
Unknown
literal
"
{
num
}
"
)
;
}
while
(
cc
>
=
48
&
&
cc
<
=
57
)
{
num
+
=
this
.
_source
[
this
.
_index
+
+
]
;
cc
=
this
.
_source
.
charCodeAt
(
this
.
_index
)
;
}
if
(
cc
=
=
=
46
)
{
num
+
=
this
.
_source
[
this
.
_index
+
+
]
;
cc
=
this
.
_source
.
charCodeAt
(
this
.
_index
)
;
if
(
cc
<
48
|
|
cc
>
57
)
{
throw
this
.
error
(
Unknown
literal
"
{
num
}
"
)
;
}
while
(
cc
>
=
48
&
&
cc
<
=
57
)
{
num
+
=
this
.
_source
[
this
.
_index
+
+
]
;
cc
=
this
.
_source
.
charCodeAt
(
this
.
_index
)
;
}
}
return
{
type
:
"
num
"
val
:
num
}
;
}
getAttributes
(
)
{
const
attrs
=
{
}
;
while
(
this
.
_index
<
this
.
_length
)
{
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
"
)
{
break
;
}
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
.
"
)
{
break
;
}
this
.
_index
+
+
;
const
key
=
this
.
getIdentifier
(
)
;
this
.
skipInlineWS
(
)
;
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
=
"
)
{
throw
this
.
error
(
'
Expected
"
=
"
'
)
;
}
this
.
_index
+
+
;
this
.
skipInlineWS
(
)
;
const
val
=
this
.
getPattern
(
)
;
if
(
val
=
=
=
null
)
{
throw
this
.
error
(
"
Expected
attribute
to
have
a
value
"
)
;
}
if
(
typeof
val
=
=
=
"
string
"
)
{
attrs
[
key
]
=
val
;
}
else
{
attrs
[
key
]
=
{
val
}
;
}
this
.
skipBlankLines
(
)
;
}
return
attrs
;
}
getVariants
(
)
{
const
variants
=
[
]
;
let
index
=
0
;
let
defaultIndex
;
while
(
this
.
_index
<
this
.
_length
)
{
const
ch
=
this
.
_source
[
this
.
_index
]
;
if
(
(
ch
!
=
=
"
[
"
|
|
this
.
_source
[
this
.
_index
+
1
]
=
=
=
"
[
"
)
&
&
ch
!
=
=
"
*
"
)
{
break
;
}
if
(
ch
=
=
=
"
*
"
)
{
this
.
_index
+
+
;
defaultIndex
=
index
;
}
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
[
"
)
{
throw
this
.
error
(
'
Expected
"
[
"
'
)
;
}
this
.
_index
+
+
;
const
key
=
this
.
getVariantKey
(
)
;
this
.
skipInlineWS
(
)
;
const
val
=
this
.
getPattern
(
)
;
if
(
val
=
=
=
null
)
{
throw
this
.
error
(
"
Expected
variant
to
have
a
value
"
)
;
}
variants
[
index
+
+
]
=
{
key
val
}
;
this
.
skipWS
(
)
;
}
return
[
variants
defaultIndex
]
;
}
getVariantKey
(
)
{
const
cc
=
this
.
_source
.
charCodeAt
(
this
.
_index
)
;
let
literal
;
if
(
cc
>
=
48
&
&
cc
<
=
57
|
|
cc
=
=
=
45
)
{
literal
=
this
.
getNumber
(
)
;
}
else
{
literal
=
this
.
getVariantName
(
)
;
}
if
(
this
.
_source
[
this
.
_index
]
!
=
=
"
]
"
)
{
throw
this
.
error
(
'
Expected
"
]
"
'
)
;
}
this
.
_index
+
+
;
return
literal
;
}
getLiteral
(
)
{
const
cc0
=
this
.
_source
.
charCodeAt
(
this
.
_index
)
;
if
(
cc0
=
=
=
36
)
{
this
.
_index
+
+
;
return
{
type
:
"
ext
"
name
:
this
.
getIdentifier
(
)
}
;
}
const
cc1
=
cc0
=
=
=
45
?
this
.
_source
.
charCodeAt
(
this
.
_index
+
1
)
:
cc0
;
if
(
cc1
>
=
97
&
&
cc1
<
=
122
|
|
cc1
>
=
65
&
&
cc1
<
=
90
)
{
return
{
type
:
"
ref
"
name
:
this
.
getEntryIdentifier
(
)
}
;
}
if
(
cc1
>
=
48
&
&
cc1
<
=
57
)
{
return
this
.
getNumber
(
)
;
}
if
(
cc0
=
=
=
34
)
{
return
this
.
getString
(
)
;
}
throw
this
.
error
(
"
Expected
literal
"
)
;
}
skipComment
(
)
{
let
eol
=
this
.
_source
.
indexOf
(
"
\
n
"
this
.
_index
)
;
while
(
eol
!
=
=
-
1
&
&
(
this
.
_source
[
eol
+
1
]
=
=
=
"
/
"
&
&
this
.
_source
[
eol
+
2
]
=
=
=
"
/
"
|
|
this
.
_source
[
eol
+
1
]
=
=
=
"
#
"
&
&
[
"
"
"
#
"
]
.
includes
(
this
.
_source
[
eol
+
2
]
)
)
)
{
this
.
_index
=
eol
+
3
;
eol
=
this
.
_source
.
indexOf
(
"
\
n
"
this
.
_index
)
;
if
(
eol
=
=
=
-
1
)
{
break
;
}
}
if
(
eol
=
=
=
-
1
)
{
this
.
_index
=
this
.
_length
;
}
else
{
this
.
_index
=
eol
+
1
;
}
}
error
(
message
)
{
return
new
SyntaxError
(
message
)
;
}
skipToNextEntryStart
(
)
{
let
start
=
this
.
_index
;
while
(
true
)
{
if
(
start
=
=
=
0
|
|
this
.
_source
[
start
-
1
]
=
=
=
"
\
n
"
)
{
const
cc
=
this
.
_source
.
charCodeAt
(
start
)
;
if
(
cc
>
=
97
&
&
cc
<
=
122
|
|
cc
>
=
65
&
&
cc
<
=
90
|
|
cc
=
=
=
47
|
|
cc
=
=
=
91
)
{
this
.
_index
=
start
;
return
;
}
}
start
=
this
.
_source
.
indexOf
(
"
\
n
"
start
)
;
if
(
start
=
=
=
-
1
)
{
this
.
_index
=
this
.
_length
;
return
;
}
start
+
+
;
}
}
}
function
parse
(
string
)
{
const
parser
=
new
RuntimeParser
(
)
;
return
parser
.
getResource
(
string
)
;
}
class
FluentType
{
constructor
(
value
opts
)
{
this
.
value
=
value
;
this
.
opts
=
opts
;
}
valueOf
(
)
{
return
this
.
value
;
}
toString
(
)
{
throw
new
Error
(
"
Subclasses
of
FluentType
must
implement
toString
.
"
)
;
}
}
class
FluentNone
extends
FluentType
{
toString
(
)
{
return
this
.
value
|
|
"
?
?
?
"
;
}
}
class
FluentNumber
extends
FluentType
{
constructor
(
value
opts
)
{
super
(
parseFloat
(
value
)
opts
)
;
}
toString
(
ctx
)
{
try
{
const
nf
=
ctx
.
_memoizeIntlObject
(
Intl
.
NumberFormat
this
.
opts
)
;
return
nf
.
format
(
this
.
value
)
;
}
catch
(
e
)
{
return
this
.
value
;
}
}
match
(
ctx
other
)
{
if
(
other
instanceof
FluentNumber
)
{
return
this
.
value
=
=
=
other
.
value
;
}
return
false
;
}
}
class
FluentDateTime
extends
FluentType
{
constructor
(
value
opts
)
{
super
(
new
Date
(
value
)
opts
)
;
}
toString
(
ctx
)
{
try
{
const
dtf
=
ctx
.
_memoizeIntlObject
(
Intl
.
DateTimeFormat
this
.
opts
)
;
return
dtf
.
format
(
this
.
value
)
;
}
catch
(
e
)
{
return
this
.
value
;
}
}
}
class
FluentSymbol
extends
FluentType
{
toString
(
)
{
return
this
.
value
;
}
match
(
ctx
other
)
{
if
(
other
instanceof
FluentSymbol
)
{
return
this
.
value
=
=
=
other
.
value
;
}
else
if
(
typeof
other
=
=
=
"
string
"
)
{
return
this
.
value
=
=
=
other
;
}
else
if
(
other
instanceof
FluentNumber
)
{
const
pr
=
ctx
.
_memoizeIntlObject
(
Intl
.
PluralRules
other
.
opts
)
;
return
this
.
value
=
=
=
pr
.
select
(
other
.
value
)
;
}
return
false
;
}
}
var
builtins
=
(
{
"
NUMBER
"
:
(
[
arg
]
opts
)
=
>
new
FluentNumber
(
arg
.
valueOf
(
)
merge
(
arg
.
opts
opts
)
)
"
DATETIME
"
:
(
[
arg
]
opts
)
=
>
new
FluentDateTime
(
arg
.
valueOf
(
)
merge
(
arg
.
opts
opts
)
)
}
)
;
function
merge
(
argopts
opts
)
{
return
Object
.
assign
(
{
}
argopts
values
(
opts
)
)
;
}
function
values
(
opts
)
{
const
unwrapped
=
{
}
;
for
(
const
[
name
opt
]
of
Object
.
entries
(
opts
)
)
{
unwrapped
[
name
]
=
opt
.
valueOf
(
)
;
}
return
unwrapped
;
}
const
MAX_PLACEABLE_LENGTH
=
2500
;
const
FSI
=
"
\
u2068
"
;
const
PDI
=
"
\
u2069
"
;
function
DefaultMember
(
env
members
def
)
{
if
(
members
[
def
]
)
{
return
members
[
def
]
;
}
const
{
errors
}
=
env
;
errors
.
push
(
new
RangeError
(
"
No
default
"
)
)
;
return
new
FluentNone
(
)
;
}
function
MessageReference
(
env
{
name
}
)
{
const
{
ctx
errors
}
=
env
;
const
message
=
name
.
startsWith
(
"
-
"
)
?
ctx
.
_terms
.
get
(
name
)
:
ctx
.
_messages
.
get
(
name
)
;
if
(
!
message
)
{
const
err
=
name
.
startsWith
(
"
-
"
)
?
new
ReferenceError
(
Unknown
term
:
{
name
}
)
:
new
ReferenceError
(
Unknown
message
:
{
name
}
)
;
errors
.
push
(
err
)
;
return
new
FluentNone
(
name
)
;
}
return
message
;
}
function
VariantExpression
(
env
{
id
key
}
)
{
const
message
=
MessageReference
(
env
id
)
;
if
(
message
instanceof
FluentNone
)
{
return
message
;
}
const
{
ctx
errors
}
=
env
;
const
keyword
=
Type
(
env
key
)
;
function
isVariantList
(
node
)
{
return
Array
.
isArray
(
node
)
&
&
node
[
0
]
.
type
=
=
=
"
sel
"
&
&
node
[
0
]
.
exp
=
=
=
null
;
}
if
(
isVariantList
(
message
.
val
)
)
{
for
(
const
variant
of
message
.
val
[
0
]
.
vars
)
{
const
variantKey
=
Type
(
env
variant
.
key
)
;
if
(
keyword
.
match
(
ctx
variantKey
)
)
{
return
variant
;
}
}
}
errors
.
push
(
new
ReferenceError
(
Unknown
variant
:
{
keyword
.
toString
(
ctx
)
}
)
)
;
return
Type
(
env
message
)
;
}
function
AttributeExpression
(
env
{
id
name
}
)
{
const
message
=
MessageReference
(
env
id
)
;
if
(
message
instanceof
FluentNone
)
{
return
message
;
}
if
(
message
.
attrs
)
{
for
(
const
attrName
in
message
.
attrs
)
{
if
(
name
=
=
=
attrName
)
{
return
message
.
attrs
[
name
]
;
}
}
}
const
{
errors
}
=
env
;
errors
.
push
(
new
ReferenceError
(
Unknown
attribute
:
{
name
}
)
)
;
return
Type
(
env
message
)
;
}
function
SelectExpression
(
env
{
exp
vars
def
}
)
{
if
(
exp
=
=
=
null
)
{
return
DefaultMember
(
env
vars
def
)
;
}
const
selector
=
Type
(
env
exp
)
;
if
(
selector
instanceof
FluentNone
)
{
return
DefaultMember
(
env
vars
def
)
;
}
for
(
const
variant
of
vars
)
{
const
key
=
Type
(
env
variant
.
key
)
;
const
keyCanMatch
=
key
instanceof
FluentNumber
|
|
key
instanceof
FluentSymbol
;
if
(
!
keyCanMatch
)
{
continue
;
}
const
{
ctx
}
=
env
;
if
(
key
.
match
(
ctx
selector
)
)
{
return
variant
;
}
}
return
DefaultMember
(
env
vars
def
)
;
}
function
Type
(
env
expr
)
{
if
(
typeof
expr
=
=
=
"
string
"
|
|
expr
instanceof
FluentNone
)
{
return
expr
;
}
if
(
Array
.
isArray
(
expr
)
)
{
return
Pattern
(
env
expr
)
;
}
switch
(
expr
.
type
)
{
case
"
varname
"
:
return
new
FluentSymbol
(
expr
.
name
)
;
case
"
num
"
:
return
new
FluentNumber
(
expr
.
val
)
;
case
"
ext
"
:
return
ExternalArgument
(
env
expr
)
;
case
"
fun
"
:
return
FunctionReference
(
env
expr
)
;
case
"
call
"
:
return
CallExpression
(
env
expr
)
;
case
"
ref
"
:
{
const
message
=
MessageReference
(
env
expr
)
;
return
Type
(
env
message
)
;
}
case
"
attr
"
:
{
const
attr
=
AttributeExpression
(
env
expr
)
;
return
Type
(
env
attr
)
;
}
case
"
var
"
:
{
const
variant
=
VariantExpression
(
env
expr
)
;
return
Type
(
env
variant
)
;
}
case
"
sel
"
:
{
const
member
=
SelectExpression
(
env
expr
)
;
return
Type
(
env
member
)
;
}
case
undefined
:
{
if
(
expr
.
val
!
=
=
null
&
&
expr
.
val
!
=
=
undefined
)
{
return
Type
(
env
expr
.
val
)
;
}
const
{
errors
}
=
env
;
errors
.
push
(
new
RangeError
(
"
No
value
"
)
)
;
return
new
FluentNone
(
)
;
}
default
:
return
new
FluentNone
(
)
;
}
}
function
ExternalArgument
(
env
{
name
}
)
{
const
{
args
errors
}
=
env
;
if
(
!
args
|
|
!
args
.
hasOwnProperty
(
name
)
)
{
errors
.
push
(
new
ReferenceError
(
Unknown
external
:
{
name
}
)
)
;
return
new
FluentNone
(
name
)
;
}
const
arg
=
args
[
name
]
;
if
(
arg
instanceof
FluentType
)
{
return
arg
;
}
switch
(
typeof
arg
)
{
case
"
string
"
:
return
arg
;
case
"
number
"
:
return
new
FluentNumber
(
arg
)
;
case
"
object
"
:
if
(
arg
instanceof
Date
)
{
return
new
FluentDateTime
(
arg
)
;
}
default
:
errors
.
push
(
new
TypeError
(
Unsupported
external
type
:
{
name
}
{
typeof
arg
}
)
)
;
return
new
FluentNone
(
name
)
;
}
}
function
FunctionReference
(
env
{
name
}
)
{
const
{
ctx
:
{
_functions
}
errors
}
=
env
;
const
func
=
_functions
[
name
]
|
|
builtins
[
name
]
;
if
(
!
func
)
{
errors
.
push
(
new
ReferenceError
(
Unknown
function
:
{
name
}
(
)
)
)
;
return
new
FluentNone
(
{
name
}
(
)
)
;
}
if
(
typeof
func
!
=
=
"
function
"
)
{
errors
.
push
(
new
TypeError
(
Function
{
name
}
(
)
is
not
callable
)
)
;
return
new
FluentNone
(
{
name
}
(
)
)
;
}
return
func
;
}
function
CallExpression
(
env
{
fun
args
}
)
{
const
callee
=
FunctionReference
(
env
fun
)
;
if
(
callee
instanceof
FluentNone
)
{
return
callee
;
}
const
posargs
=
[
]
;
const
keyargs
=
{
}
;
for
(
const
arg
of
args
)
{
if
(
arg
.
type
=
=
=
"
narg
"
)
{
keyargs
[
arg
.
name
]
=
Type
(
env
arg
.
val
)
;
}
else
{
posargs
.
push
(
Type
(
env
arg
)
)
;
}
}
try
{
return
callee
(
posargs
keyargs
)
;
}
catch
(
e
)
{
return
new
FluentNone
(
)
;
}
}
function
Pattern
(
env
ptn
)
{
const
{
ctx
dirty
errors
}
=
env
;
if
(
dirty
.
has
(
ptn
)
)
{
errors
.
push
(
new
RangeError
(
"
Cyclic
reference
"
)
)
;
return
new
FluentNone
(
)
;
}
dirty
.
add
(
ptn
)
;
const
result
=
[
]
;
const
useIsolating
=
ctx
.
_useIsolating
&
&
ptn
.
length
>
1
;
for
(
const
elem
of
ptn
)
{
if
(
typeof
elem
=
=
=
"
string
"
)
{
result
.
push
(
elem
)
;
continue
;
}
const
part
=
Type
(
env
elem
)
.
toString
(
ctx
)
;
if
(
useIsolating
)
{
result
.
push
(
FSI
)
;
}
if
(
part
.
length
>
MAX_PLACEABLE_LENGTH
)
{
errors
.
push
(
new
RangeError
(
"
Too
many
characters
in
placeable
"
+
(
{
part
.
length
}
max
allowed
is
{
MAX_PLACEABLE_LENGTH
}
)
)
)
;
result
.
push
(
part
.
slice
(
MAX_PLACEABLE_LENGTH
)
)
;
}
else
{
result
.
push
(
part
)
;
}
if
(
useIsolating
)
{
result
.
push
(
PDI
)
;
}
}
dirty
.
delete
(
ptn
)
;
return
result
.
join
(
"
"
)
;
}
function
resolve
(
ctx
args
message
errors
=
[
]
)
{
const
env
=
{
ctx
args
errors
dirty
:
new
WeakSet
(
)
}
;
return
Type
(
env
message
)
.
toString
(
ctx
)
;
}
class
context_MessageContext
{
constructor
(
locales
{
functions
=
{
}
useIsolating
=
true
}
=
{
}
)
{
this
.
locales
=
Array
.
isArray
(
locales
)
?
locales
:
[
locales
]
;
this
.
_terms
=
new
Map
(
)
;
this
.
_messages
=
new
Map
(
)
;
this
.
_functions
=
functions
;
this
.
_useIsolating
=
useIsolating
;
this
.
_intls
=
new
WeakMap
(
)
;
}
get
messages
(
)
{
return
this
.
_messages
[
Symbol
.
iterator
]
(
)
;
}
hasMessage
(
id
)
{
return
this
.
_messages
.
has
(
id
)
;
}
getMessage
(
id
)
{
return
this
.
_messages
.
get
(
id
)
;
}
addMessages
(
source
)
{
const
[
entries
errors
]
=
parse
(
source
)
;
for
(
const
id
in
entries
)
{
if
(
id
.
startsWith
(
"
-
"
)
)
{
if
(
this
.
_terms
.
has
(
id
)
)
{
errors
.
push
(
Attempt
to
override
an
existing
term
:
"
{
id
}
"
)
;
continue
;
}
this
.
_terms
.
set
(
id
entries
[
id
]
)
;
}
else
{
if
(
this
.
_messages
.
has
(
id
)
)
{
errors
.
push
(
Attempt
to
override
an
existing
message
:
"
{
id
}
"
)
;
continue
;
}
this
.
_messages
.
set
(
id
entries
[
id
]
)
;
}
}
return
errors
;
}
format
(
message
args
errors
)
{
if
(
typeof
message
=
=
=
"
string
"
)
{
return
message
;
}
if
(
typeof
message
.
val
=
=
=
"
string
"
)
{
return
message
.
val
;
}
if
(
message
.
val
=
=
=
undefined
)
{
return
null
;
}
return
resolve
(
this
args
message
errors
)
;
}
_memoizeIntlObject
(
ctor
opts
)
{
const
cache
=
this
.
_intls
.
get
(
ctor
)
|
|
{
}
;
const
id
=
JSON
.
stringify
(
opts
)
;
if
(
!
cache
[
id
]
)
{
cache
[
id
]
=
new
ctor
(
this
.
locales
opts
)
;
this
.
_intls
.
set
(
ctor
cache
)
;
}
return
cache
[
id
]
;
}
}
function
_asyncToGenerator
(
fn
)
{
return
function
(
)
{
var
gen
=
fn
.
apply
(
this
arguments
)
;
return
new
Promise
(
function
(
resolve
reject
)
{
function
step
(
key
arg
)
{
try
{
var
info
=
gen
[
key
]
(
arg
)
;
var
value
=
info
.
value
;
}
catch
(
error
)
{
reject
(
error
)
;
return
;
}
if
(
info
.
done
)
{
resolve
(
value
)
;
}
else
{
return
Promise
.
resolve
(
value
)
.
then
(
function
(
value
)
{
step
(
"
next
"
value
)
;
}
function
(
err
)
{
step
(
"
throw
"
err
)
;
}
)
;
}
}
return
step
(
"
next
"
)
;
}
)
;
}
;
}
class
CachedIterable
{
constructor
(
iterable
)
{
if
(
Symbol
.
asyncIterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
asyncIterator
]
(
)
;
}
else
if
(
Symbol
.
iterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
iterator
]
(
)
;
}
else
{
throw
new
TypeError
(
"
Argument
must
implement
the
iteration
protocol
.
"
)
;
}
this
.
seen
=
[
]
;
}
[
Symbol
.
iterator
]
(
)
{
const
{
seen
iterator
}
=
this
;
let
cur
=
0
;
return
{
next
(
)
{
if
(
seen
.
length
<
=
cur
)
{
seen
.
push
(
iterator
.
next
(
)
)
;
}
return
seen
[
cur
+
+
]
;
}
}
;
}
[
Symbol
.
asyncIterator
]
(
)
{
const
{
seen
iterator
}
=
this
;
let
cur
=
0
;
return
{
next
(
)
{
return
_asyncToGenerator
(
function
*
(
)
{
if
(
seen
.
length
<
=
cur
)
{
seen
.
push
(
(
yield
iterator
.
next
(
)
)
)
;
}
return
seen
[
cur
+
+
]
;
}
)
(
)
;
}
}
;
}
touchNext
(
)
{
const
{
seen
iterator
}
=
this
;
if
(
seen
.
length
=
=
=
0
|
|
seen
[
seen
.
length
-
1
]
.
done
=
=
=
false
)
{
seen
.
push
(
iterator
.
next
(
)
)
;
}
}
}
function
_asyncIterator
(
iterable
)
{
if
(
typeof
Symbol
=
=
=
"
function
"
)
{
if
(
Symbol
.
asyncIterator
)
{
var
method
=
iterable
[
Symbol
.
asyncIterator
]
;
if
(
method
!
=
null
)
return
method
.
call
(
iterable
)
;
}
if
(
Symbol
.
iterator
)
{
return
iterable
[
Symbol
.
iterator
]
(
)
;
}
}
throw
new
TypeError
(
"
Object
is
not
async
iterable
"
)
;
}
function
fallback_asyncToGenerator
(
fn
)
{
return
function
(
)
{
var
gen
=
fn
.
apply
(
this
arguments
)
;
return
new
Promise
(
function
(
resolve
reject
)
{
function
step
(
key
arg
)
{
try
{
var
info
=
gen
[
key
]
(
arg
)
;
var
value
=
info
.
value
;
}
catch
(
error
)
{
reject
(
error
)
;
return
;
}
if
(
info
.
done
)
{
resolve
(
value
)
;
}
else
{
return
Promise
.
resolve
(
value
)
.
then
(
function
(
value
)
{
step
(
"
next
"
value
)
;
}
function
(
err
)
{
step
(
"
throw
"
err
)
;
}
)
;
}
}
return
step
(
"
next
"
)
;
}
)
;
}
;
}
function
mapContextSync
(
iterable
ids
)
{
if
(
!
Array
.
isArray
(
ids
)
)
{
return
getContextForId
(
iterable
ids
)
;
}
return
ids
.
map
(
id
=
>
getContextForId
(
iterable
id
)
)
;
}
function
getContextForId
(
iterable
id
)
{
for
(
const
context
of
iterable
)
{
if
(
context
.
hasMessage
(
id
)
)
{
return
context
;
}
}
return
null
;
}
let
mapContextAsync
=
(
(
)
=
>
{
var
_ref
=
fallback_asyncToGenerator
(
function
*
(
iterable
ids
)
{
if
(
!
Array
.
isArray
(
ids
)
)
{
var
_iteratorNormalCompletion
=
true
;
var
_didIteratorError
=
false
;
var
_iteratorError
=
undefined
;
try
{
for
(
var
_iterator
=
_asyncIterator
(
iterable
)
_step
_value
;
_step
=
yield
_iterator
.
next
(
)
_iteratorNormalCompletion
=
_step
.
done
_value
=
yield
_step
.
value
!
_iteratorNormalCompletion
;
_iteratorNormalCompletion
=
true
)
{
const
context
=
_value
;
if
(
context
.
hasMessage
(
ids
)
)
{
return
context
;
}
}
}
catch
(
err
)
{
_didIteratorError
=
true
;
_iteratorError
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion
&
&
_iterator
.
return
)
{
yield
_iterator
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError
)
{
throw
_iteratorError
;
}
}
}
}
let
remainingCount
=
ids
.
length
;
const
foundContexts
=
new
Array
(
remainingCount
)
.
fill
(
null
)
;
var
_iteratorNormalCompletion2
=
true
;
var
_didIteratorError2
=
false
;
var
_iteratorError2
=
undefined
;
try
{
for
(
var
_iterator2
=
_asyncIterator
(
iterable
)
_step2
_value2
;
_step2
=
yield
_iterator2
.
next
(
)
_iteratorNormalCompletion2
=
_step2
.
done
_value2
=
yield
_step2
.
value
!
_iteratorNormalCompletion2
;
_iteratorNormalCompletion2
=
true
)
{
const
context
=
_value2
;
for
(
let
index
=
0
;
index
<
ids
.
length
;
index
+
+
)
{
const
id
=
ids
[
index
]
;
if
(
!
foundContexts
[
index
]
&
&
context
.
hasMessage
(
id
)
)
{
foundContexts
[
index
]
=
context
;
remainingCount
-
-
;
}
if
(
remainingCount
=
=
=
0
)
{
return
foundContexts
;
}
}
}
}
catch
(
err
)
{
_didIteratorError2
=
true
;
_iteratorError2
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion2
&
&
_iterator2
.
return
)
{
yield
_iterator2
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError2
)
{
throw
_iteratorError2
;
}
}
}
return
foundContexts
;
}
)
;
return
function
mapContextAsync
(
_x
_x2
)
{
return
_ref
.
apply
(
this
arguments
)
;
}
;
}
)
(
)
;
function
nonBlank
(
line
)
{
return
!
/
^
\
s
*
/
.
test
(
line
)
;
}
function
countIndent
(
line
)
{
const
[
indent
]
=
line
.
match
(
/
^
\
s
*
/
)
;
return
indent
.
length
;
}
function
ftl
(
strings
)
{
const
[
code
]
=
strings
;
const
lines
=
code
.
split
(
"
\
n
"
)
.
filter
(
nonBlank
)
;
const
indents
=
lines
.
map
(
countIndent
)
;
const
common
=
Math
.
min
(
.
.
.
indents
)
;
const
indent
=
new
RegExp
(
^
\
\
s
{
{
common
}
}
)
;
return
lines
.
map
(
line
=
>
line
.
replace
(
indent
"
"
)
)
.
join
(
"
\
n
"
)
;
}
__webpack_require__
.
d
(
__webpack_exports__
"
_parse
"
function
(
)
{
return
parse
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
MessageContext
"
function
(
)
{
return
context_MessageContext
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
MessageArgument
"
function
(
)
{
return
FluentType
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
MessageNumberArgument
"
function
(
)
{
return
FluentNumber
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
MessageDateTimeArgument
"
function
(
)
{
return
FluentDateTime
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
CachedIterable
"
function
(
)
{
return
CachedIterable
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
mapContextSync
"
function
(
)
{
return
mapContextSync
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
mapContextAsync
"
function
(
)
{
return
mapContextAsync
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ftl
"
function
(
)
{
return
ftl
;
}
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
var
external_React_
=
__webpack_require__
(
5
)
;
var
external_PropTypes_
=
__webpack_require__
(
6
)
;
var
external_PropTypes_default
=
__webpack_require__
.
n
(
external_PropTypes_
)
;
var
src
=
__webpack_require__
(
40
)
;
class
localization_ReactLocalization
{
constructor
(
messages
)
{
this
.
contexts
=
new
src
[
"
CachedIterable
"
]
(
messages
)
;
this
.
subs
=
new
Set
(
)
;
}
subscribe
(
comp
)
{
this
.
subs
.
add
(
comp
)
;
}
unsubscribe
(
comp
)
{
this
.
subs
.
delete
(
comp
)
;
}
setMessages
(
messages
)
{
this
.
contexts
=
new
src
[
"
CachedIterable
"
]
(
messages
)
;
this
.
subs
.
forEach
(
comp
=
>
comp
.
relocalize
(
)
)
;
}
getMessageContext
(
id
)
{
return
Object
(
src
[
"
mapContextSync
"
]
)
(
this
.
contexts
id
)
;
}
formatCompound
(
mcx
msg
args
)
{
const
value
=
mcx
.
format
(
msg
args
)
;
if
(
msg
.
attrs
)
{
var
attrs
=
{
}
;
for
(
const
name
of
Object
.
keys
(
msg
.
attrs
)
)
{
attrs
[
name
]
=
mcx
.
format
(
msg
.
attrs
[
name
]
args
)
;
}
}
return
{
value
attrs
}
;
}
getString
(
id
args
fallback
)
{
const
mcx
=
this
.
getMessageContext
(
id
)
;
if
(
mcx
=
=
=
null
)
{
return
fallback
|
|
id
;
}
const
msg
=
mcx
.
getMessage
(
id
)
;
return
mcx
.
format
(
msg
args
)
;
}
}
function
isReactLocalization
(
props
propName
)
{
const
prop
=
props
[
propName
]
;
if
(
prop
instanceof
localization_ReactLocalization
)
{
return
null
;
}
return
new
Error
(
The
{
propName
}
context
field
must
be
an
instance
of
ReactLocalization
.
)
;
}
class
provider_LocalizationProvider
extends
external_React_
[
"
Component
"
]
{
constructor
(
props
)
{
super
(
props
)
;
const
{
messages
}
=
props
;
if
(
messages
=
=
=
undefined
)
{
throw
new
Error
(
"
LocalizationProvider
must
receive
the
messages
prop
.
"
)
;
}
if
(
!
messages
[
Symbol
.
iterator
]
)
{
throw
new
Error
(
"
The
messages
prop
must
be
an
iterable
.
"
)
;
}
this
.
l10n
=
new
localization_ReactLocalization
(
messages
)
;
}
getChildContext
(
)
{
return
{
l10n
:
this
.
l10n
}
;
}
componentWillReceiveProps
(
next
)
{
const
{
messages
}
=
next
;
if
(
messages
!
=
=
this
.
props
.
messages
)
{
this
.
l10n
.
setMessages
(
messages
)
;
}
}
render
(
)
{
return
external_React_
[
"
Children
"
]
.
only
(
this
.
props
.
children
)
;
}
}
provider_LocalizationProvider
.
childContextTypes
=
{
l10n
:
isReactLocalization
}
;
provider_LocalizationProvider
.
propTypes
=
{
children
:
external_PropTypes_default
.
a
.
element
.
isRequired
messages
:
isIterable
}
;
function
isIterable
(
props
propName
componentName
)
{
const
prop
=
props
[
propName
]
;
if
(
Symbol
.
iterator
in
Object
(
prop
)
)
{
return
null
;
}
return
new
Error
(
The
{
propName
}
prop
supplied
to
{
componentName
}
must
be
an
iterable
.
)
;
}
function
withLocalization
(
Inner
)
{
class
WithLocalization
extends
external_React_
[
"
Component
"
]
{
componentDidMount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
subscribe
(
this
)
;
}
}
componentWillUnmount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
unsubscribe
(
this
)
;
}
}
relocalize
(
)
{
this
.
forceUpdate
(
)
;
}
getString
(
id
args
fallback
)
{
const
{
l10n
}
=
this
.
context
;
if
(
!
l10n
)
{
return
fallback
|
|
id
;
}
return
l10n
.
getString
(
id
args
fallback
)
;
}
render
(
)
{
return
Object
(
external_React_
[
"
createElement
"
]
)
(
Inner
Object
.
assign
(
{
getString
:
(
.
.
.
args
)
=
>
this
.
getString
(
.
.
.
args
)
}
this
.
props
)
)
;
}
}
WithLocalization
.
displayName
=
WithLocalization
(
{
displayName
(
Inner
)
}
)
;
WithLocalization
.
contextTypes
=
{
l10n
:
isReactLocalization
}
;
return
WithLocalization
;
}
function
displayName
(
component
)
{
return
component
.
displayName
|
|
component
.
name
|
|
"
Component
"
;
}
const
TEMPLATE
=
document
.
createElement
(
"
template
"
)
;
function
parseMarkup
(
str
)
{
TEMPLATE
.
innerHTML
=
str
;
return
TEMPLATE
.
content
;
}
var
omittedCloseTags
=
{
area
:
true
base
:
true
br
:
true
col
:
true
embed
:
true
hr
:
true
img
:
true
input
:
true
keygen
:
true
link
:
true
meta
:
true
param
:
true
source
:
true
track
:
true
wbr
:
true
}
;
var
vendor_omittedCloseTags
=
(
omittedCloseTags
)
;
var
voidElementTags
=
Object
.
assign
(
{
menuitem
:
true
}
vendor_omittedCloseTags
)
;
var
vendor_voidElementTags
=
(
voidElementTags
)
;
const
reMarkup
=
/
<
|
&
#
?
\
w
+
;
/
;
function
toArguments
(
props
)
{
const
args
=
{
}
;
const
elems
=
{
}
;
for
(
const
[
propname
propval
]
of
Object
.
entries
(
props
)
)
{
if
(
propname
.
startsWith
(
"
"
)
)
{
const
name
=
propname
.
substr
(
1
)
;
args
[
name
]
=
propval
;
}
else
if
(
Object
(
external_React_
[
"
isValidElement
"
]
)
(
propval
)
)
{
const
name
=
propname
.
toLowerCase
(
)
;
elems
[
name
]
=
propval
;
}
}
return
[
args
elems
]
;
}
class
localized_Localized
extends
external_React_
[
"
Component
"
]
{
componentDidMount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
subscribe
(
this
)
;
}
}
componentWillUnmount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
unsubscribe
(
this
)
;
}
}
relocalize
(
)
{
this
.
forceUpdate
(
)
;
}
render
(
)
{
const
{
l10n
}
=
this
.
context
;
const
{
id
attrs
children
}
=
this
.
props
;
const
elem
=
external_React_
[
"
Children
"
]
.
only
(
children
)
;
if
(
!
l10n
)
{
return
elem
;
}
const
mcx
=
l10n
.
getMessageContext
(
id
)
;
if
(
mcx
=
=
=
null
)
{
return
elem
;
}
const
msg
=
mcx
.
getMessage
(
id
)
;
const
[
args
elems
]
=
toArguments
(
this
.
props
)
;
const
{
value
:
messageValue
attrs
:
messageAttrs
}
=
l10n
.
formatCompound
(
mcx
msg
args
)
;
if
(
attrs
&
&
messageAttrs
)
{
var
localizedProps
=
{
}
;
for
(
const
[
name
value
]
of
Object
.
entries
(
messageAttrs
)
)
{
if
(
attrs
[
name
]
)
{
localizedProps
[
name
]
=
value
;
}
}
}
if
(
elem
.
type
in
vendor_voidElementTags
)
{
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
)
;
}
if
(
messageValue
=
=
=
null
)
{
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
)
;
}
if
(
!
reMarkup
.
test
(
messageValue
)
)
{
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
messageValue
)
;
}
const
translationNodes
=
Array
.
from
(
parseMarkup
(
messageValue
)
.
childNodes
)
;
const
translatedChildren
=
translationNodes
.
map
(
childNode
=
>
{
if
(
childNode
.
nodeType
=
=
=
childNode
.
TEXT_NODE
)
{
return
childNode
.
textContent
;
}
if
(
!
elems
.
hasOwnProperty
(
childNode
.
localName
)
)
{
return
childNode
.
textContent
;
}
const
sourceChild
=
elems
[
childNode
.
localName
]
;
if
(
sourceChild
.
type
in
vendor_voidElementTags
)
{
return
sourceChild
;
}
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
sourceChild
null
childNode
.
textContent
)
;
}
)
;
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
.
.
.
translatedChildren
)
;
}
}
localized_Localized
.
contextTypes
=
{
l10n
:
isReactLocalization
}
;
localized_Localized
.
propTypes
=
{
children
:
external_PropTypes_default
.
a
.
element
.
isRequired
}
;
__webpack_require__
.
d
(
__webpack_exports__
"
LocalizationProvider
"
function
(
)
{
return
provider_LocalizationProvider
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
withLocalization
"
function
(
)
{
return
withLocalization
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
Localized
"
function
(
)
{
return
localized_Localized
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
ReactLocalization
"
function
(
)
{
return
localization_ReactLocalization
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
isReactLocalization
"
function
(
)
{
return
isReactLocalization
;
}
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
var
external_React_
=
__webpack_require__
(
5
)
;
var
external_React_default
=
__webpack_require__
.
n
(
external_React_
)
;
const
ALLOWED_STYLE_TAGS
=
[
"
color
"
"
backgroundColor
"
]
;
const
Button
=
props
=
>
{
const
style
=
{
}
;
for
(
const
tag
of
ALLOWED_STYLE_TAGS
)
{
if
(
typeof
props
[
tag
]
!
=
=
"
undefined
"
)
{
style
[
tag
]
=
props
[
tag
]
;
}
}
if
(
style
.
backgroundColor
)
{
style
.
border
=
"
0
"
;
}
return
external_React_default
.
a
.
createElement
(
"
button
"
{
onClick
:
props
.
onClick
className
:
props
.
className
|
|
"
ASRouterButton
"
style
:
style
}
props
.
children
)
;
}
;
var
template_utils
=
__webpack_require__
(
11
)
;
class
SnippetBase_SnippetBase
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onBlockClicked
=
this
.
onBlockClicked
.
bind
(
this
)
;
}
onBlockClicked
(
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
BLOCK
"
id
:
this
.
props
.
UISurface
}
)
;
this
.
props
.
onBlock
(
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
containerClassName
=
SnippetBaseContainer
{
props
.
className
?
{
props
.
className
}
:
"
"
}
;
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
containerClassName
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
innerWrapper
"
}
props
.
children
)
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
blockButton
"
onClick
:
this
.
onBlockClicked
}
)
)
;
}
}
__webpack_require__
.
d
(
__webpack_exports__
"
SimpleSnippet
"
function
(
)
{
return
SimpleSnippet_SimpleSnippet
;
}
)
;
var
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
const
DEFAULT_ICON_PATH
=
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
;
class
SimpleSnippet_SimpleSnippet
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onButtonClick
=
this
.
onButtonClick
.
bind
(
this
)
;
}
onButtonClick
(
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
id
:
this
.
props
.
UISurface
}
)
;
this
.
props
.
onAction
(
this
.
props
.
content
.
button_action
)
;
}
renderTitle
(
)
{
const
{
title
}
=
this
.
props
.
content
;
return
title
?
external_React_default
.
a
.
createElement
(
"
h3
"
{
className
:
"
title
"
}
title
)
:
null
;
}
renderTitleIcon
(
)
{
const
titleIcon
=
Object
(
template_utils
[
"
safeURI
"
]
)
(
this
.
props
.
content
.
title_icon
)
;
return
titleIcon
?
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
titleIcon
"
style
:
{
backgroundImage
:
url
(
"
{
titleIcon
}
"
)
}
}
)
:
null
;
}
renderButton
(
)
{
const
{
props
}
=
this
;
if
(
!
props
.
content
.
button_action
)
{
return
null
;
}
return
external_React_default
.
a
.
createElement
(
Button
{
onClick
:
this
.
onButtonClick
color
:
props
.
content
.
button_color
backgroundColor
:
props
.
content
.
button_background_color
}
props
.
content
.
button_label
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
className
=
SimpleSnippet
{
props
.
content
.
tall
?
"
tall
"
:
"
"
}
;
return
external_React_default
.
a
.
createElement
(
SnippetBase_SnippetBase
_extends
(
{
}
props
{
className
:
className
}
)
external_React_default
.
a
.
createElement
(
"
img
"
{
src
:
Object
(
template_utils
[
"
safeURI
"
]
)
(
props
.
content
.
icon
)
|
|
DEFAULT_ICON_PATH
className
:
"
icon
"
}
)
external_React_default
.
a
.
createElement
(
"
div
"
null
this
.
renderTitleIcon
(
)
"
"
this
.
renderTitle
(
)
"
"
external_React_default
.
a
.
createElement
(
"
p
"
{
className
:
"
body
"
}
props
.
richText
|
|
props
.
content
.
text
)
)
external_React_default
.
a
.
createElement
(
"
div
"
null
this
.
renderButton
(
)
)
)
;
}
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
var
Actions
=
__webpack_require__
(
2
)
;
class
Dedupe
{
constructor
(
createKey
)
{
this
.
createKey
=
createKey
|
|
this
.
defaultCreateKey
;
}
defaultCreateKey
(
item
)
{
return
item
;
}
group
(
.
.
.
groups
)
{
const
globalKeys
=
new
Set
(
)
;
const
result
=
[
]
;
for
(
const
values
of
groups
)
{
const
valueMap
=
new
Map
(
)
;
for
(
const
value
of
values
)
{
const
key
=
this
.
createKey
(
value
)
;
if
(
!
globalKeys
.
has
(
key
)
&
&
!
valueMap
.
has
(
key
)
)
{
valueMap
.
set
(
key
value
)
;
}
}
result
.
push
(
valueMap
)
;
valueMap
.
forEach
(
(
value
key
)
=
>
globalKeys
.
add
(
key
)
)
;
}
return
result
.
map
(
m
=
>
Array
.
from
(
m
.
values
(
)
)
)
;
}
}
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_DEFAULT_ROWS
"
function
(
)
{
return
TOP_SITES_DEFAULT_ROWS
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_MAX_SITES_PER_ROW
"
function
(
)
{
return
TOP_SITES_MAX_SITES_PER_ROW
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
INITIAL_STATE
"
function
(
)
{
return
INITIAL_STATE
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
insertPinned
"
function
(
)
{
return
insertPinned
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
reducers
"
function
(
)
{
return
reducers
;
}
)
;
const
TOP_SITES_DEFAULT_ROWS
=
1
;
const
TOP_SITES_MAX_SITES_PER_ROW
=
8
;
const
dedupe
=
new
Dedupe
(
site
=
>
site
&
&
site
.
url
)
;
const
INITIAL_STATE
=
{
App
:
{
initialized
:
false
}
Snippets
:
{
initialized
:
false
}
TopSites
:
{
initialized
:
false
rows
:
[
]
editForm
:
null
showSearchShortcutsForm
:
false
searchShortcuts
:
[
]
}
Prefs
:
{
initialized
:
false
values
:
{
}
}
Dialog
:
{
visible
:
false
data
:
{
}
}
Sections
:
[
]
Pocket
:
{
waitingForSpoc
:
true
}
}
;
function
App
(
prevState
=
INITIAL_STATE
.
App
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
INIT
:
return
Object
.
assign
(
{
}
prevState
action
.
data
|
|
{
}
{
initialized
:
true
}
)
;
default
:
return
prevState
;
}
}
function
insertPinned
(
links
pinned
)
{
const
pinnedUrls
=
pinned
.
map
(
link
=
>
link
&
&
link
.
url
)
;
let
newLinks
=
links
.
filter
(
link
=
>
link
?
!
pinnedUrls
.
includes
(
link
.
url
)
:
false
)
;
newLinks
=
newLinks
.
map
(
link
=
>
{
if
(
link
&
&
link
.
isPinned
)
{
delete
link
.
isPinned
;
delete
link
.
pinIndex
;
}
return
link
;
}
)
;
pinned
.
forEach
(
(
val
index
)
=
>
{
if
(
!
val
)
{
return
;
}
let
link
=
Object
.
assign
(
{
}
val
{
isPinned
:
true
pinIndex
:
index
}
)
;
if
(
index
>
newLinks
.
length
)
{
newLinks
[
index
]
=
link
;
}
else
{
newLinks
.
splice
(
index
0
link
)
;
}
}
)
;
return
newLinks
;
}
function
TopSites
(
prevState
=
INITIAL_STATE
.
TopSites
action
)
{
let
hasMatch
;
let
newRows
;
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_UPDATED
:
if
(
!
action
.
data
|
|
!
action
.
data
.
links
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
initialized
:
true
rows
:
action
.
data
.
links
}
action
.
data
.
pref
?
{
pref
:
action
.
data
.
pref
}
:
{
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_PREFS_UPDATED
:
return
Object
.
assign
(
{
}
prevState
{
pref
:
action
.
data
.
pref
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
:
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
action
.
data
.
index
previewResponse
:
null
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_CANCEL_EDIT
:
return
Object
.
assign
(
{
}
prevState
{
editForm
:
null
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL
:
return
Object
.
assign
(
{
}
prevState
{
showSearchShortcutsForm
:
true
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL
:
return
Object
.
assign
(
{
}
prevState
{
showSearchShortcutsForm
:
false
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREVIEW_RESPONSE
:
if
(
!
prevState
.
editForm
|
|
action
.
data
.
url
!
=
=
prevState
.
editForm
.
previewUrl
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
prevState
.
editForm
.
index
previewResponse
:
action
.
data
.
preview
previewUrl
:
action
.
data
.
url
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST
:
if
(
!
prevState
.
editForm
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
prevState
.
editForm
.
index
previewResponse
:
null
previewUrl
:
action
.
data
.
url
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST_CANCEL
:
if
(
!
prevState
.
editForm
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
prevState
.
editForm
.
index
previewResponse
:
null
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
SCREENSHOT_UPDATED
:
newRows
=
prevState
.
rows
.
map
(
row
=
>
{
if
(
row
&
&
row
.
url
=
=
=
action
.
data
.
url
)
{
hasMatch
=
true
;
return
Object
.
assign
(
{
}
row
{
screenshot
:
action
.
data
.
screenshot
}
)
;
}
return
row
;
}
)
;
return
hasMatch
?
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
:
prevState
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_ADDED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
newRows
=
prevState
.
rows
.
map
(
site
=
>
{
if
(
site
&
&
site
.
url
=
=
=
action
.
data
.
url
)
{
const
{
bookmarkGuid
bookmarkTitle
dateAdded
}
=
action
.
data
;
return
Object
.
assign
(
{
}
site
{
bookmarkGuid
bookmarkTitle
bookmarkDateCreated
:
dateAdded
}
)
;
}
return
site
;
}
)
;
return
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_REMOVED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
newRows
=
prevState
.
rows
.
map
(
site
=
>
{
if
(
site
&
&
site
.
url
=
=
=
action
.
data
.
url
)
{
const
newSite
=
Object
.
assign
(
{
}
site
)
;
delete
newSite
.
bookmarkGuid
;
delete
newSite
.
bookmarkTitle
;
delete
newSite
.
bookmarkDateCreated
;
return
newSite
;
}
return
site
;
}
)
;
return
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_LINK_DELETED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
newRows
=
prevState
.
rows
.
filter
(
site
=
>
action
.
data
.
url
!
=
=
site
.
url
)
;
return
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
;
case
Actions
[
"
actionTypes
"
]
.
UPDATE_SEARCH_SHORTCUTS
:
return
Object
.
assign
(
{
}
prevState
{
searchShortcuts
:
action
.
data
.
searchShortcuts
}
)
;
default
:
return
prevState
;
}
}
function
Dialog
(
prevState
=
INITIAL_STATE
.
Dialog
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
DIALOG_OPEN
:
return
Object
.
assign
(
{
}
prevState
{
visible
:
true
data
:
action
.
data
}
)
;
case
Actions
[
"
actionTypes
"
]
.
DIALOG_CANCEL
:
return
Object
.
assign
(
{
}
prevState
{
visible
:
false
}
)
;
case
Actions
[
"
actionTypes
"
]
.
DELETE_HISTORY_URL
:
return
Object
.
assign
(
{
}
INITIAL_STATE
.
Dialog
)
;
default
:
return
prevState
;
}
}
function
Prefs
(
prevState
=
INITIAL_STATE
.
Prefs
action
)
{
let
newValues
;
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
PREFS_INITIAL_VALUES
:
return
Object
.
assign
(
{
}
prevState
{
initialized
:
true
values
:
action
.
data
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREF_CHANGED
:
newValues
=
Object
.
assign
(
{
}
prevState
.
values
)
;
newValues
[
action
.
data
.
name
]
=
action
.
data
.
value
;
return
Object
.
assign
(
{
}
prevState
{
values
:
newValues
}
)
;
default
:
return
prevState
;
}
}
function
Sections
(
prevState
=
INITIAL_STATE
.
Sections
action
)
{
let
hasMatch
;
let
newState
;
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
SECTION_DEREGISTER
:
return
prevState
.
filter
(
section
=
>
section
.
id
!
=
=
action
.
data
)
;
case
Actions
[
"
actionTypes
"
]
.
SECTION_REGISTER
:
newState
=
prevState
.
map
(
section
=
>
{
if
(
section
&
&
section
.
id
=
=
=
action
.
data
.
id
)
{
hasMatch
=
true
;
return
Object
.
assign
(
{
}
section
action
.
data
)
;
}
return
section
;
}
)
;
if
(
!
hasMatch
)
{
const
initialized
=
!
!
(
action
.
data
.
rows
&
&
action
.
data
.
rows
.
length
>
0
)
;
const
section
=
Object
.
assign
(
{
title
:
"
"
rows
:
[
]
enabled
:
false
}
action
.
data
{
initialized
}
)
;
newState
.
push
(
section
)
;
}
return
newState
;
case
Actions
[
"
actionTypes
"
]
.
SECTION_UPDATE
:
newState
=
prevState
.
map
(
section
=
>
{
if
(
section
&
&
section
.
id
=
=
=
action
.
data
.
id
)
{
const
initialized
=
action
.
data
.
rows
?
{
initialized
:
true
}
:
{
}
;
if
(
action
.
data
.
rows
&
&
action
.
data
.
rows
.
length
>
0
&
&
section
.
rows
.
find
(
card
=
>
card
.
pinned
)
)
{
const
rows
=
Array
.
from
(
action
.
data
.
rows
)
;
section
.
rows
.
forEach
(
(
card
index
)
=
>
{
if
(
card
.
pinned
)
{
rows
.
splice
(
index
0
card
)
;
}
}
)
;
return
Object
.
assign
(
{
}
section
initialized
Object
.
assign
(
{
}
action
.
data
{
rows
}
)
)
;
}
return
Object
.
assign
(
{
}
section
initialized
action
.
data
)
;
}
return
section
;
}
)
;
if
(
!
action
.
data
.
dedupeConfigurations
)
{
return
newState
;
}
action
.
data
.
dedupeConfigurations
.
forEach
(
dedupeConf
=
>
{
newState
=
newState
.
map
(
section
=
>
{
if
(
section
.
id
=
=
=
dedupeConf
.
id
)
{
const
dedupedRows
=
dedupeConf
.
dedupeFrom
.
reduce
(
(
rows
dedupeSectionId
)
=
>
{
const
dedupeSection
=
newState
.
find
(
s
=
>
s
.
id
=
=
=
dedupeSectionId
)
;
const
[
newRows
]
=
dedupe
.
group
(
dedupeSection
.
rows
rows
)
;
return
newRows
;
}
section
.
rows
)
;
return
Object
.
assign
(
{
}
section
{
rows
:
dedupedRows
}
)
;
}
return
section
;
}
)
;
}
)
;
return
newState
;
case
Actions
[
"
actionTypes
"
]
.
SECTION_UPDATE_CARD
:
return
prevState
.
map
(
section
=
>
{
if
(
section
&
&
section
.
id
=
=
=
action
.
data
.
id
&
&
section
.
rows
)
{
const
newRows
=
section
.
rows
.
map
(
card
=
>
{
if
(
card
.
url
=
=
=
action
.
data
.
url
)
{
return
Object
.
assign
(
{
}
card
action
.
data
.
options
)
;
}
return
card
;
}
)
;
return
Object
.
assign
(
{
}
section
{
rows
:
newRows
}
)
;
}
return
section
;
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_ADDED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
map
(
item
=
>
{
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
const
{
bookmarkGuid
bookmarkTitle
dateAdded
}
=
action
.
data
;
return
Object
.
assign
(
{
}
item
{
bookmarkGuid
bookmarkTitle
bookmarkDateCreated
:
dateAdded
type
:
"
bookmark
"
}
)
;
}
return
item
;
}
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_SAVED_TO_POCKET
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
map
(
item
=
>
{
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
return
Object
.
assign
(
{
}
item
{
open_url
:
action
.
data
.
open_url
pocket_id
:
action
.
data
.
pocket_id
title
:
action
.
data
.
title
type
:
"
pocket
"
}
)
;
}
return
item
;
}
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_REMOVED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
map
(
item
=
>
{
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
const
newSite
=
Object
.
assign
(
{
}
item
)
;
delete
newSite
.
bookmarkGuid
;
delete
newSite
.
bookmarkTitle
;
delete
newSite
.
bookmarkDateCreated
;
if
(
!
newSite
.
type
|
|
newSite
.
type
=
=
=
"
bookmark
"
)
{
newSite
.
type
=
"
history
"
;
}
return
newSite
;
}
return
item
;
}
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_LINK_DELETED
:
case
Actions
[
"
actionTypes
"
]
.
PLACES_LINK_BLOCKED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
filter
(
site
=
>
site
.
url
!
=
=
action
.
data
.
url
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
DELETE_FROM_POCKET
:
case
Actions
[
"
actionTypes
"
]
.
ARCHIVE_FROM_POCKET
:
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
filter
(
site
=
>
site
.
pocket_id
!
=
=
action
.
data
.
pocket_id
)
}
)
)
;
default
:
return
prevState
;
}
}
function
Snippets
(
prevState
=
INITIAL_STATE
.
Snippets
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_DATA
:
return
Object
.
assign
(
{
}
prevState
{
initialized
:
true
}
action
.
data
)
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPET_BLOCKED
:
return
Object
.
assign
(
{
}
prevState
{
blockList
:
prevState
.
blockList
.
concat
(
action
.
data
)
}
)
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_BLOCKLIST_CLEARED
:
return
Object
.
assign
(
{
}
prevState
{
blockList
:
[
]
}
)
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_RESET
:
return
INITIAL_STATE
.
Snippets
;
default
:
return
prevState
;
}
}
function
Pocket
(
prevState
=
INITIAL_STATE
.
Pocket
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
POCKET_WAITING_FOR_SPOC
:
return
Object
.
assign
(
{
}
prevState
{
waitingForSpoc
:
action
.
data
}
)
;
default
:
return
prevState
;
}
}
var
reducers
=
{
TopSites
App
Snippets
Prefs
Dialog
Sections
Pocket
}
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
var
external_React_
=
__webpack_require__
(
5
)
;
var
external_React_default
=
__webpack_require__
.
n
(
external_React_
)
;
class
ModalOverlay_ModalOverlay
extends
external_React_default
.
a
.
PureComponent
{
componentWillMount
(
)
{
this
.
setState
(
{
active
:
true
}
)
;
document
.
body
.
classList
.
add
(
"
modal
-
open
"
)
;
}
componentWillUnmount
(
)
{
document
.
body
.
classList
.
remove
(
"
modal
-
open
"
)
;
this
.
setState
(
{
active
:
false
}
)
;
}
render
(
)
{
const
{
active
}
=
this
.
state
;
const
{
title
button_label
}
=
this
.
props
;
return
external_React_default
.
a
.
createElement
(
"
div
"
null
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
modalOverlayOuter
{
active
?
"
active
"
:
"
"
}
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
modalOverlayInner
{
active
?
"
active
"
:
"
"
}
}
external_React_default
.
a
.
createElement
(
"
h2
"
null
"
"
title
"
"
)
this
.
props
.
children
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
footer
"
}
external_React_default
.
a
.
createElement
(
"
button
"
{
tabIndex
:
"
2
"
onClick
:
this
.
props
.
onDoneButton
className
:
"
button
primary
modalButton
"
}
"
"
button_label
"
"
)
)
)
)
;
}
}
__webpack_require__
.
d
(
__webpack_exports__
"
OnboardingMessage
"
function
(
)
{
return
OnboardingMessage_OnboardingMessage
;
}
)
;
var
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
class
OnboardingMessage_OnboardingCard
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
onClick
(
)
{
const
{
props
}
=
this
;
const
ping
=
{
event
:
"
CLICK_BUTTON
"
message_id
:
props
.
id
id
:
props
.
UISurface
includeClientID
:
true
}
;
props
.
sendUserActionTelemetry
(
ping
)
;
props
.
onAction
(
props
.
content
.
button_action
)
;
}
render
(
)
{
const
{
content
}
=
this
.
props
;
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
onboardingMessage
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
onboardingMessageImage
{
content
.
icon
}
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
onboardingContent
"
}
external_React_default
.
a
.
createElement
(
"
span
"
null
external_React_default
.
a
.
createElement
(
"
h3
"
null
"
"
content
.
title
"
"
)
external_React_default
.
a
.
createElement
(
"
p
"
null
"
"
content
.
text
"
"
)
)
external_React_default
.
a
.
createElement
(
"
span
"
null
external_React_default
.
a
.
createElement
(
"
button
"
{
tabIndex
:
"
1
"
className
:
"
button
onboardingButton
"
onClick
:
this
.
onClick
}
"
"
content
.
button_label
"
"
)
)
)
)
;
}
}
class
OnboardingMessage_OnboardingMessage
extends
external_React_default
.
a
.
PureComponent
{
render
(
)
{
const
{
props
}
=
this
;
return
external_React_default
.
a
.
createElement
(
ModalOverlay_ModalOverlay
_extends
(
{
}
props
{
button_label
:
"
Start
Browsing
"
title
:
"
Welcome
to
Firefox
"
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
onboardingMessageContainer
"
}
props
.
bundle
.
map
(
message
=
>
external_React_default
.
a
.
createElement
(
OnboardingMessage_OnboardingCard
_extends
(
{
key
:
message
.
id
sendUserActionTelemetry
:
props
.
sendUserActionTelemetry
onAction
:
props
.
onAction
UISurface
:
props
.
UISurface
}
message
)
)
)
)
)
;
}
}
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
var
Actions
=
__webpack_require__
(
2
)
;
const
cardContextTypes
=
{
history
:
{
intlID
:
"
type_label_visited
"
icon
:
"
history
-
item
"
}
bookmark
:
{
intlID
:
"
type_label_bookmarked
"
icon
:
"
bookmark
-
added
"
}
trending
:
{
intlID
:
"
type_label_recommended
"
icon
:
"
trending
"
}
now
:
{
intlID
:
"
type_label_now
"
icon
:
"
now
"
}
pocket
:
{
intlID
:
"
type_label_pocket
"
icon
:
"
pocket
"
}
download
:
{
intlID
:
"
type_label_downloaded
"
icon
:
"
download
"
}
}
;
var
external_ReactRedux_
=
__webpack_require__
(
16
)
;
var
external_ReactIntl_
=
__webpack_require__
(
13
)
;
var
link_menu_options
=
__webpack_require__
(
23
)
;
var
LinkMenu
=
__webpack_require__
(
24
)
;
var
external_React_
=
__webpack_require__
(
5
)
;
var
external_React_default
=
__webpack_require__
.
n
(
external_React_
)
;
var
screenshot_utils
=
__webpack_require__
(
26
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
_Card
"
function
(
)
{
return
Card_Card
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
Card
"
function
(
)
{
return
Card
;
}
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
PlaceholderCard
"
function
(
)
{
return
PlaceholderCard
;
}
)
;
function
_asyncToGenerator
(
fn
)
{
return
function
(
)
{
var
gen
=
fn
.
apply
(
this
arguments
)
;
return
new
Promise
(
function
(
resolve
reject
)
{
function
step
(
key
arg
)
{
try
{
var
info
=
gen
[
key
]
(
arg
)
;
var
value
=
info
.
value
;
}
catch
(
error
)
{
reject
(
error
)
;
return
;
}
if
(
info
.
done
)
{
resolve
(
value
)
;
}
else
{
return
Promise
.
resolve
(
value
)
.
then
(
function
(
value
)
{
step
(
"
next
"
value
)
;
}
function
(
err
)
{
step
(
"
throw
"
err
)
;
}
)
;
}
}
return
step
(
"
next
"
)
;
}
)
;
}
;
}
const
gImageLoading
=
new
Map
(
)
;
class
Card_Card
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
activeCard
:
null
imageLoaded
:
false
showContextMenu
:
false
cardImage
:
null
}
;
this
.
onMenuButtonClick
=
this
.
onMenuButtonClick
.
bind
(
this
)
;
this
.
onMenuUpdate
=
this
.
onMenuUpdate
.
bind
(
this
)
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
}
maybeLoadImage
(
)
{
var
_this
=
this
;
return
_asyncToGenerator
(
function
*
(
)
{
const
{
cardImage
}
=
_this
.
state
;
if
(
!
cardImage
)
{
return
;
}
const
imageUrl
=
cardImage
.
url
;
if
(
!
_this
.
state
.
imageLoaded
)
{
if
(
!
gImageLoading
.
has
(
imageUrl
)
)
{
const
loaderPromise
=
new
Promise
(
function
(
resolve
reject
)
{
const
loader
=
new
Image
(
)
;
loader
.
addEventListener
(
"
load
"
resolve
)
;
loader
.
addEventListener
(
"
error
"
reject
)
;
loader
.
src
=
imageUrl
;
}
)
;
gImageLoading
.
set
(
imageUrl
loaderPromise
)
;
loaderPromise
.
catch
(
function
(
ex
)
{
return
ex
;
}
)
.
then
(
function
(
)
{
return
gImageLoading
.
delete
(
imageUrl
)
;
}
)
.
catch
(
)
;
}
yield
gImageLoading
.
get
(
imageUrl
)
;
if
(
screenshot_utils
[
"
ScreenshotUtils
"
]
.
isRemoteImageLocal
(
_this
.
state
.
cardImage
_this
.
props
.
link
.
image
)
&
&
!
_this
.
state
.
imageLoaded
)
{
_this
.
setState
(
{
imageLoaded
:
true
}
)
;
}
}
}
)
(
)
;
}
static
getNextStateFromProps
(
nextProps
prevState
)
{
const
{
image
}
=
nextProps
.
link
;
const
imageInState
=
screenshot_utils
[
"
ScreenshotUtils
"
]
.
isRemoteImageLocal
(
prevState
.
cardImage
image
)
;
let
nextState
=
null
;
if
(
!
imageInState
&
&
nextProps
.
link
)
{
nextState
=
{
imageLoaded
:
false
}
;
}
if
(
imageInState
)
{
return
nextState
;
}
screenshot_utils
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
prevState
.
cardImage
)
;
nextState
=
nextState
|
|
{
}
;
nextState
.
cardImage
=
screenshot_utils
[
"
ScreenshotUtils
"
]
.
createLocalImageObject
(
image
)
;
return
nextState
;
}
onMenuButtonClick
(
event
)
{
event
.
preventDefault
(
)
;
this
.
setState
(
{
activeCard
:
this
.
props
.
index
showContextMenu
:
true
}
)
;
}
_getTelemetryInfo
(
)
{
if
(
this
.
props
.
link
.
type
!
=
=
"
history
"
)
{
return
{
value
:
{
card_type
:
this
.
props
.
link
.
type
}
}
;
}
return
null
;
}
onLinkClick
(
event
)
{
event
.
preventDefault
(
)
;
if
(
this
.
props
.
link
.
type
=
=
=
"
download
"
)
{
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
Actions
[
"
actionTypes
"
]
.
SHOW_DOWNLOAD_FILE
data
:
this
.
props
.
link
}
)
)
;
}
else
{
const
{
altKey
button
ctrlKey
metaKey
shiftKey
}
=
event
;
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
Actions
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
Object
.
assign
(
this
.
props
.
link
{
event
:
{
altKey
button
ctrlKey
metaKey
shiftKey
}
}
)
}
)
)
;
}
if
(
this
.
props
.
isWebExtension
)
{
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
WebExtEvent
(
Actions
[
"
actionTypes
"
]
.
WEBEXT_CLICK
{
source
:
this
.
props
.
eventSource
url
:
this
.
props
.
link
.
url
action_position
:
this
.
props
.
index
}
)
)
;
}
else
{
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
UserEvent
(
Object
.
assign
(
{
event
:
"
CLICK
"
source
:
this
.
props
.
eventSource
action_position
:
this
.
props
.
index
}
this
.
_getTelemetryInfo
(
)
)
)
)
;
if
(
this
.
props
.
shouldSendImpressionStats
)
{
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
this
.
props
.
eventSource
click
:
0
tiles
:
[
{
id
:
this
.
props
.
link
.
guid
pos
:
this
.
props
.
index
}
]
}
)
)
;
}
}
}
onMenuUpdate
(
showContextMenu
)
{
this
.
setState
(
{
showContextMenu
}
)
;
}
componentDidMount
(
)
{
this
.
maybeLoadImage
(
)
;
}
componentDidUpdate
(
)
{
this
.
maybeLoadImage
(
)
;
}
componentWillMount
(
)
{
const
nextState
=
Card_Card
.
getNextStateFromProps
(
this
.
props
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
componentWillReceiveProps
(
nextProps
)
{
const
nextState
=
Card_Card
.
getNextStateFromProps
(
nextProps
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
componentWillUnmount
(
)
{
screenshot_utils
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
this
.
state
.
cardImage
)
;
}
render
(
)
{
const
{
index
className
link
dispatch
contextMenuOptions
eventSource
shouldSendImpressionStats
}
=
this
.
props
;
const
{
props
}
=
this
;
const
isContextMenuOpen
=
this
.
state
.
showContextMenu
&
&
this
.
state
.
activeCard
=
=
=
index
;
const
{
icon
intlID
}
=
cardContextTypes
[
link
.
type
=
=
=
"
now
"
?
"
trending
"
:
link
.
type
]
|
|
{
}
;
const
hasImage
=
this
.
state
.
cardImage
|
|
link
.
hasImage
;
const
imageStyle
=
{
backgroundImage
:
this
.
state
.
cardImage
?
url
(
{
this
.
state
.
cardImage
.
url
}
)
:
"
none
"
}
;
const
outerClassName
=
[
"
card
-
outer
"
className
isContextMenuOpen
&
&
"
active
"
props
.
placeholder
&
&
"
placeholder
"
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
return
external_React_default
.
a
.
createElement
(
"
li
"
{
className
:
outerClassName
}
external_React_default
.
a
.
createElement
(
"
a
"
{
href
:
link
.
type
=
=
=
"
pocket
"
?
link
.
open_url
:
link
.
url
onClick
:
!
props
.
placeholder
?
this
.
onLinkClick
:
undefined
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
preview
-
image
-
outer
"
}
hasImage
&
&
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
card
-
preview
-
image
{
this
.
state
.
imageLoaded
?
"
loaded
"
:
"
"
}
style
:
imageStyle
}
)
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
details
"
}
link
.
type
=
=
=
"
download
"
&
&
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
host
-
name
alternate
"
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
Object
(
link_menu_options
[
"
GetPlatformString
"
]
)
(
this
.
props
.
platform
)
}
)
)
link
.
hostname
&
&
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
host
-
name
"
}
link
.
hostname
.
slice
(
0
100
)
link
.
type
=
=
=
"
download
"
&
&
\
u2014
{
link
.
description
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
[
"
card
-
text
"
icon
?
"
"
:
"
no
-
context
"
link
.
description
?
"
"
:
"
no
-
description
"
link
.
hostname
?
"
"
:
"
no
-
host
-
name
"
]
.
join
(
"
"
)
}
external_React_default
.
a
.
createElement
(
"
h4
"
{
className
:
"
card
-
title
"
dir
:
"
auto
"
}
link
.
title
)
external_React_default
.
a
.
createElement
(
"
p
"
{
className
:
"
card
-
description
"
dir
:
"
auto
"
}
link
.
description
)
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
context
"
}
icon
&
&
!
link
.
context
&
&
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
card
-
context
-
icon
icon
icon
-
{
icon
}
}
)
link
.
icon
&
&
link
.
context
&
&
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
card
-
context
-
icon
icon
"
style
:
{
backgroundImage
:
url
(
'
{
link
.
icon
}
'
)
}
}
)
intlID
&
&
!
link
.
context
&
&
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
context
-
label
"
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
intlID
defaultMessage
:
"
Visited
"
}
)
)
link
.
context
&
&
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
context
-
label
"
}
link
.
context
)
)
)
)
)
!
props
.
placeholder
&
&
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
context
-
menu
-
button
icon
"
onClick
:
this
.
onMenuButtonClick
}
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
sr
-
only
"
}
Open
context
menu
for
{
link
.
title
}
)
)
isContextMenuOpen
&
&
external_React_default
.
a
.
createElement
(
LinkMenu
[
"
LinkMenu
"
]
{
dispatch
:
dispatch
index
:
index
source
:
eventSource
onUpdate
:
this
.
onMenuUpdate
options
:
link
.
contextMenuOptions
|
|
contextMenuOptions
site
:
link
siteInfo
:
this
.
_getTelemetryInfo
(
)
shouldSendImpressionStats
:
shouldSendImpressionStats
}
)
)
;
}
}
Card_Card
.
defaultProps
=
{
link
:
{
}
}
;
const
Card
=
Object
(
external_ReactRedux_
[
"
connect
"
]
)
(
state
=
>
(
{
platform
:
state
.
Prefs
.
values
.
platform
}
)
)
(
Card_Card
)
;
const
PlaceholderCard
=
props
=
>
external_React_default
.
a
.
createElement
(
Card
{
placeholder
:
true
className
:
props
.
className
}
)
;
}
)
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
var
Actions
=
__webpack_require__
(
2
)
;
var
external_ReactIntl_
=
__webpack_require__
(
13
)
;
var
external_React_
=
__webpack_require__
(
5
)
;
var
external_React_default
=
__webpack_require__
.
n
(
external_React_
)
;
var
TopSitesConstants
=
__webpack_require__
(
34
)
;
class
TopSiteFormInput_TopSiteFormInput
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
validationError
:
this
.
props
.
validationError
}
;
this
.
onChange
=
this
.
onChange
.
bind
(
this
)
;
this
.
onMount
=
this
.
onMount
.
bind
(
this
)
;
}
componentWillReceiveProps
(
nextProps
)
{
if
(
nextProps
.
shouldFocus
&
&
!
this
.
props
.
shouldFocus
)
{
this
.
input
.
focus
(
)
;
}
if
(
nextProps
.
validationError
&
&
!
this
.
props
.
validationError
)
{
this
.
setState
(
{
validationError
:
true
}
)
;
}
if
(
this
.
state
.
validationError
&
&
!
nextProps
.
value
)
{
this
.
setState
(
{
validationError
:
false
}
)
;
}
}
onChange
(
ev
)
{
if
(
this
.
state
.
validationError
)
{
this
.
setState
(
{
validationError
:
false
}
)
;
}
this
.
props
.
onChange
(
ev
)
;
}
onMount
(
input
)
{
this
.
input
=
input
;
}
render
(
)
{
const
showClearButton
=
this
.
props
.
value
&
&
this
.
props
.
onClear
;
const
{
typeUrl
}
=
this
.
props
;
const
{
validationError
}
=
this
.
state
;
return
external_React_default
.
a
.
createElement
(
"
label
"
null
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
this
.
props
.
titleId
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
field
{
typeUrl
?
"
url
"
:
"
"
}
{
validationError
?
"
invalid
"
:
"
"
}
}
this
.
props
.
loading
?
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
loading
-
container
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
loading
-
animation
"
}
)
)
:
showClearButton
&
&
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
icon
icon
-
clear
-
input
"
onClick
:
this
.
props
.
onClear
}
)
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
text
"
value
:
this
.
props
.
value
ref
:
this
.
onMount
onChange
:
this
.
onChange
placeholder
:
this
.
props
.
intl
.
formatMessage
(
{
id
:
this
.
props
.
placeholderId
}
)
autoFocus
:
this
.
props
.
shouldFocus
disabled
:
this
.
props
.
loading
}
)
validationError
&
&
external_React_default
.
a
.
createElement
(
"
aside
"
{
className
:
"
error
-
tooltip
"
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
this
.
props
.
errorMessageId
}
)
)
)
)
;
}
}
TopSiteFormInput_TopSiteFormInput
.
defaultProps
=
{
showClearButton
:
false
value
:
"
"
validationError
:
false
}
;
var
TopSite
=
__webpack_require__
(
36
)
;
__webpack_require__
.
d
(
__webpack_exports__
"
TopSiteForm
"
function
(
)
{
return
TopSiteForm_TopSiteForm
;
}
)
;
class
TopSiteForm_TopSiteForm
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
const
{
site
}
=
props
;
this
.
state
=
{
label
:
site
?
site
.
label
|
|
site
.
hostname
:
"
"
url
:
site
?
site
.
url
:
"
"
validationError
:
false
customScreenshotUrl
:
site
?
site
.
customScreenshotURL
:
"
"
showCustomScreenshotForm
:
site
?
site
.
customScreenshotURL
:
false
}
;
this
.
onClearScreenshotInput
=
this
.
onClearScreenshotInput
.
bind
(
this
)
;
this
.
onLabelChange
=
this
.
onLabelChange
.
bind
(
this
)
;
this
.
onUrlChange
=
this
.
onUrlChange
.
bind
(
this
)
;
this
.
onCancelButtonClick
=
this
.
onCancelButtonClick
.
bind
(
this
)
;
this
.
onClearUrlClick
=
this
.
onClearUrlClick
.
bind
(
this
)
;
this
.
onDoneButtonClick
=
this
.
onDoneButtonClick
.
bind
(
this
)
;
this
.
onCustomScreenshotUrlChange
=
this
.
onCustomScreenshotUrlChange
.
bind
(
this
)
;
this
.
onPreviewButtonClick
=
this
.
onPreviewButtonClick
.
bind
(
this
)
;
this
.
onEnableScreenshotUrlForm
=
this
.
onEnableScreenshotUrlForm
.
bind
(
this
)
;
this
.
validateUrl
=
this
.
validateUrl
.
bind
(
this
)
;
}
onLabelChange
(
event
)
{
this
.
setState
(
{
"
label
"
:
event
.
target
.
value
}
)
;
}
onUrlChange
(
event
)
{
this
.
setState
(
{
url
:
event
.
target
.
value
validationError
:
false
}
)
;
}
onClearUrlClick
(
)
{
this
.
setState
(
{
url
:
"
"
validationError
:
false
}
)
;
}
onEnableScreenshotUrlForm
(
)
{
this
.
setState
(
{
showCustomScreenshotForm
:
true
}
)
;
}
_updateCustomScreenshotInput
(
customScreenshotUrl
)
{
this
.
setState
(
{
customScreenshotUrl
validationError
:
false
}
)
;
this
.
props
.
dispatch
(
{
type
:
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST_CANCEL
}
)
;
}
onCustomScreenshotUrlChange
(
event
)
{
this
.
_updateCustomScreenshotInput
(
event
.
target
.
value
)
;
}
onClearScreenshotInput
(
)
{
this
.
_updateCustomScreenshotInput
(
"
"
)
;
}
onCancelButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
this
.
props
.
onClose
(
)
;
}
onDoneButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
if
(
this
.
validateForm
(
)
)
{
const
site
=
{
url
:
this
.
cleanUrl
(
this
.
state
.
url
)
}
;
const
{
index
}
=
this
.
props
;
if
(
this
.
state
.
label
!
=
=
"
"
)
{
site
.
label
=
this
.
state
.
label
;
}
if
(
this
.
state
.
customScreenshotUrl
)
{
site
.
customScreenshotURL
=
this
.
cleanUrl
(
this
.
state
.
customScreenshotUrl
)
;
}
else
if
(
this
.
props
.
site
&
&
this
.
props
.
site
.
customScreenshotURL
)
{
site
.
customScreenshotURL
=
null
;
}
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
Actions
[
"
actionTypes
"
]
.
TOP_SITES_PIN
data
:
{
site
index
}
}
)
)
;
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
TopSitesConstants
[
"
TOP_SITES_SOURCE
"
]
event
:
"
TOP_SITES_EDIT
"
action_position
:
index
}
)
)
;
this
.
props
.
onClose
(
)
;
}
}
onPreviewButtonClick
(
event
)
{
event
.
preventDefault
(
)
;
if
(
this
.
validateForm
(
)
)
{
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST
data
:
{
url
:
this
.
cleanUrl
(
this
.
state
.
customScreenshotUrl
)
}
}
)
)
;
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
TopSitesConstants
[
"
TOP_SITES_SOURCE
"
]
event
:
"
PREVIEW_REQUEST
"
}
)
)
;
}
}
cleanUrl
(
url
)
{
if
(
!
url
.
startsWith
(
"
http
:
"
)
&
&
!
url
.
startsWith
(
"
https
:
"
)
)
{
return
http
:
/
/
{
url
}
;
}
return
url
;
}
_tryParseUrl
(
url
)
{
try
{
return
new
URL
(
url
)
;
}
catch
(
e
)
{
return
null
;
}
}
validateUrl
(
url
)
{
const
validProtocols
=
[
"
http
:
"
"
https
:
"
]
;
const
urlObj
=
this
.
_tryParseUrl
(
url
)
|
|
this
.
_tryParseUrl
(
this
.
cleanUrl
(
url
)
)
;
return
urlObj
&
&
validProtocols
.
includes
(
urlObj
.
protocol
)
;
}
validateCustomScreenshotUrl
(
)
{
const
{
customScreenshotUrl
}
=
this
.
state
;
return
!
customScreenshotUrl
|
|
this
.
validateUrl
(
customScreenshotUrl
)
;
}
validateForm
(
)
{
const
validate
=
this
.
validateUrl
(
this
.
state
.
url
)
&
&
this
.
validateCustomScreenshotUrl
(
)
;
if
(
!
validate
)
{
this
.
setState
(
{
validationError
:
true
}
)
;
}
return
validate
;
}
_renderCustomScreenshotInput
(
)
{
const
{
customScreenshotUrl
}
=
this
.
state
;
const
requestFailed
=
this
.
props
.
previewResponse
=
=
=
"
"
;
const
validationError
=
this
.
state
.
validationError
&
&
!
this
.
validateCustomScreenshotUrl
(
)
|
|
requestFailed
;
const
shouldFocus
=
validationError
&
&
this
.
validateUrl
(
this
.
state
.
url
)
|
|
!
customScreenshotUrl
;
const
isLoading
=
this
.
props
.
previewResponse
=
=
=
null
&
&
customScreenshotUrl
&
&
this
.
props
.
previewUrl
=
=
=
this
.
cleanUrl
(
customScreenshotUrl
)
;
if
(
!
this
.
state
.
showCustomScreenshotForm
)
{
return
external_React_default
.
a
.
createElement
(
"
a
"
{
className
:
"
enable
-
custom
-
image
-
input
"
onClick
:
this
.
onEnableScreenshotUrlForm
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
"
topsites_form_use_image_link
"
}
)
)
;
}
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
custom
-
image
-
input
-
container
"
}
external_React_default
.
a
.
createElement
(
TopSiteFormInput_TopSiteFormInput
{
errorMessageId
:
requestFailed
?
"
topsites_form_image_validation
"
:
"
topsites_form_url_validation
"
loading
:
isLoading
onChange
:
this
.
onCustomScreenshotUrlChange
onClear
:
this
.
onClearScreenshotInput
shouldFocus
:
shouldFocus
typeUrl
:
true
value
:
customScreenshotUrl
validationError
:
validationError
titleId
:
"
topsites_form_image_url_label
"
placeholderId
:
"
topsites_form_url_placeholder
"
intl
:
this
.
props
.
intl
}
)
)
;
}
render
(
)
{
const
{
customScreenshotUrl
}
=
this
.
state
;
const
requestFailed
=
this
.
props
.
previewResponse
=
=
=
"
"
;
const
showAsAdd
=
!
this
.
props
.
site
;
const
previous
=
this
.
props
.
site
&
&
this
.
props
.
site
.
customScreenshotURL
|
|
"
"
;
const
changed
=
customScreenshotUrl
&
&
this
.
cleanUrl
(
customScreenshotUrl
)
!
=
=
previous
;
const
previewMode
=
changed
&
&
!
this
.
props
.
previewResponse
;
const
previewLink
=
Object
.
assign
(
{
}
this
.
props
.
site
)
;
if
(
this
.
props
.
previewResponse
)
{
previewLink
.
screenshot
=
this
.
props
.
previewResponse
;
previewLink
.
customScreenshotURL
=
this
.
props
.
previewUrl
;
}
return
external_React_default
.
a
.
createElement
(
"
form
"
{
className
:
"
topsite
-
form
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
form
-
input
-
container
"
}
external_React_default
.
a
.
createElement
(
"
h3
"
{
className
:
"
section
-
title
"
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
showAsAdd
?
"
topsites_form_add_header
"
:
"
topsites_form_edit_header
"
}
)
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
fields
-
and
-
preview
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
form
-
wrapper
"
}
external_React_default
.
a
.
createElement
(
TopSiteFormInput_TopSiteFormInput
{
onChange
:
this
.
onLabelChange
value
:
this
.
state
.
label
titleId
:
"
topsites_form_title_label
"
placeholderId
:
"
topsites_form_title_placeholder
"
intl
:
this
.
props
.
intl
}
)
external_React_default
.
a
.
createElement
(
TopSiteFormInput_TopSiteFormInput
{
onChange
:
this
.
onUrlChange
shouldFocus
:
this
.
state
.
validationError
&
&
!
this
.
validateUrl
(
this
.
state
.
url
)
value
:
this
.
state
.
url
onClear
:
this
.
onClearUrlClick
validationError
:
this
.
state
.
validationError
&
&
!
this
.
validateUrl
(
this
.
state
.
url
)
titleId
:
"
topsites_form_url_label
"
typeUrl
:
true
placeholderId
:
"
topsites_form_url_placeholder
"
errorMessageId
:
"
topsites_form_url_validation
"
intl
:
this
.
props
.
intl
}
)
this
.
_renderCustomScreenshotInput
(
)
)
external_React_default
.
a
.
createElement
(
TopSite
[
"
TopSiteLink
"
]
{
link
:
previewLink
defaultStyle
:
requestFailed
title
:
this
.
state
.
label
}
)
)
)
external_React_default
.
a
.
createElement
(
"
section
"
{
className
:
"
actions
"
}
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
cancel
"
type
:
"
button
"
onClick
:
this
.
onCancelButtonClick
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
"
topsites_form_cancel_button
"
}
)
)
previewMode
?
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
preview
"
type
:
"
submit
"
onClick
:
this
.
onPreviewButtonClick
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
"
topsites_form_preview_button
"
}
)
)
:
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
"
type
:
"
submit
"
onClick
:
this
.
onDoneButtonClick
}
external_React_default
.
a
.
createElement
(
external_ReactIntl_
[
"
FormattedMessage
"
]
{
id
:
showAsAdd
?
"
topsites_form_add_button
"
:
"
topsites_form_save_button
"
}
)
)
)
)
;
}
}
TopSiteForm_TopSiteForm
.
defaultProps
=
{
site
:
null
index
:
-
1
}
;
}
)
]
)
;
