"
use
strict
"
;
let
Ci
=
Components
.
interfaces
;
let
Cu
=
Components
.
utils
;
const
XHTML_NAMESPACE
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
RemoteAboutNewTab
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
URL
"
]
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
RemotePages
"
"
resource
:
/
/
gre
/
modules
/
RemotePageManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
RemoteNewTabUtils
"
"
resource
:
/
/
/
modules
/
RemoteNewTabUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
BackgroundPageThumbs
"
"
resource
:
/
/
gre
/
modules
/
BackgroundPageThumbs
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PageThumbs
"
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DirectoryLinksProvider
"
"
resource
:
/
/
/
modules
/
DirectoryLinksProvider
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
RemoteNewTabLocation
"
"
resource
:
/
/
/
modules
/
RemoteNewTabLocation
.
jsm
"
)
;
let
RemoteAboutNewTab
=
{
pageListener
:
null
init
:
function
(
)
{
this
.
pageListener
=
new
RemotePages
(
"
about
:
remote
-
newtab
"
)
;
this
.
pageListener
.
addMessageListener
(
"
NewTab
:
InitializeGrid
"
this
.
initializeGrid
.
bind
(
this
)
)
;
this
.
pageListener
.
addMessageListener
(
"
NewTab
:
UpdateGrid
"
this
.
updateGrid
.
bind
(
this
)
)
;
this
.
pageListener
.
addMessageListener
(
"
NewTab
:
CaptureBackgroundPageThumbs
"
this
.
captureBackgroundPageThumb
.
bind
(
this
)
)
;
this
.
pageListener
.
addMessageListener
(
"
NewTab
:
PageThumbs
"
this
.
createPageThumb
.
bind
(
this
)
)
;
this
.
pageListener
.
addMessageListener
(
"
NewTabFrame
:
GetInit
"
this
.
initContentFrame
.
bind
(
this
)
)
;
this
.
_addObservers
(
)
;
}
initializeGrid
:
function
(
message
)
{
RemoteNewTabUtils
.
links
.
populateCache
(
(
)
=
>
{
message
.
target
.
sendAsyncMessage
(
"
NewTab
:
InitializeLinks
"
{
links
:
RemoteNewTabUtils
.
links
.
getLinks
(
)
enhancedLinks
:
this
.
getEnhancedLinks
(
)
}
)
;
}
)
;
}
initContentFrame
:
function
(
message
)
{
message
.
target
.
sendAsyncMessage
(
"
NewTabFrame
:
Init
"
{
href
:
RemoteNewTabLocation
.
href
origin
:
RemoteNewTabLocation
.
origin
}
)
;
}
updateGrid
:
function
(
message
)
{
message
.
target
.
sendAsyncMessage
(
"
NewTab
:
UpdateLinks
"
{
links
:
RemoteNewTabUtils
.
links
.
getLinks
(
)
enhancedLinks
:
this
.
getEnhancedLinks
(
)
}
)
;
}
captureBackgroundPageThumb
:
Task
.
async
(
function
*
(
message
)
{
try
{
yield
BackgroundPageThumbs
.
captureIfMissing
(
message
.
data
.
link
.
url
)
;
this
.
createPageThumb
(
message
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
"
error
:
"
+
err
)
;
}
}
)
createPageThumb
:
function
(
message
)
{
let
imgSrc
=
PageThumbs
.
getThumbnailURL
(
message
.
data
.
link
.
url
)
;
let
doc
=
Services
.
appShell
.
hiddenDOMWindow
.
document
;
let
img
=
doc
.
createElementNS
(
XHTML_NAMESPACE
"
img
"
)
;
let
canvas
=
doc
.
createElementNS
(
XHTML_NAMESPACE
"
canvas
"
)
;
let
enhanced
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
enhanced
"
)
;
img
.
onload
=
function
(
e
)
{
canvas
.
width
=
img
.
naturalWidth
;
canvas
.
height
=
img
.
naturalHeight
;
var
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
ctx
.
drawImage
(
this
0
0
this
.
naturalWidth
this
.
naturalHeight
)
;
canvas
.
toBlob
(
function
(
blob
)
{
let
host
=
new
URL
(
message
.
data
.
link
.
url
)
.
host
;
RemoteAboutNewTab
.
pageListener
.
sendAsyncMessage
(
"
NewTab
:
RegularThumbnailURI
"
{
thumbPath
:
"
/
pagethumbs
/
"
+
host
enhanced
url
:
message
.
data
.
link
.
url
blob
}
)
;
}
)
;
}
;
img
.
src
=
imgSrc
;
}
getEnhancedLinks
:
function
(
)
{
let
enhancedLinks
=
[
]
;
for
(
let
link
of
RemoteNewTabUtils
.
links
.
getLinks
(
)
)
{
if
(
link
)
{
enhancedLinks
.
push
(
DirectoryLinksProvider
.
getEnhancedLink
(
link
)
)
;
}
}
return
enhancedLinks
;
}
observe
:
function
(
aSubject
aTopic
aData
)
{
let
extraData
;
let
refreshPage
=
false
;
if
(
aTopic
=
=
=
"
browser
:
purge
-
session
-
history
"
)
{
RemoteNewTabUtils
.
links
.
resetCache
(
)
;
RemoteNewTabUtils
.
links
.
populateCache
(
(
)
=
>
{
this
.
pageListener
.
sendAsyncMessage
(
"
NewTab
:
UpdateLinks
"
{
links
:
RemoteNewTabUtils
.
links
.
getLinks
(
)
enhancedLinks
:
this
.
getEnhancedLinks
(
)
}
)
;
}
)
;
}
if
(
extraData
!
=
=
undefined
|
|
aTopic
=
=
=
"
page
-
thumbnail
:
create
"
)
{
if
(
aTopic
!
=
=
"
page
-
thumbnail
:
create
"
)
{
aTopic
=
aData
;
}
this
.
pageListener
.
sendAsyncMessage
(
"
NewTab
:
Observe
"
{
topic
:
aTopic
data
:
extraData
}
)
;
}
}
_addObservers
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
"
page
-
thumbnail
:
create
"
true
)
;
Services
.
obs
.
addObserver
(
this
"
browser
:
purge
-
session
-
history
"
true
)
;
}
_removeObservers
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
page
-
thumbnail
:
create
"
)
;
Services
.
obs
.
removeObserver
(
this
"
browser
:
purge
-
session
-
history
"
)
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
uninit
:
function
(
)
{
this
.
_removeObservers
(
)
;
this
.
pageListener
.
destroy
(
)
;
this
.
pageListener
=
null
;
}
}
;
