"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AboutNewTab
"
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
)
;
const
TOPIC_APP_QUIT
=
"
quit
-
application
-
granted
"
;
const
TOPIC_LOCALES_CHANGE
=
"
intl
:
app
-
locales
-
changed
"
;
const
ACTIVITY_STREAM_LOCALES
=
"
en
-
US
ach
an
ar
ast
az
be
bg
bn
-
BD
bn
-
IN
br
bs
ca
cak
crh
cs
cy
da
de
dsb
el
en
-
CA
en
-
GB
eo
es
-
AR
es
-
CL
es
-
ES
es
-
MX
et
eu
fa
ff
fi
fr
fy
-
NL
ga
-
IE
gd
gl
gn
gu
-
IN
he
hi
-
IN
hr
hsb
hu
hy
-
AM
ia
id
it
ja
ka
kab
kk
km
kn
ko
lij
lo
lt
ltg
lv
mk
ml
mr
ms
my
nb
-
NO
ne
-
NP
nl
nn
-
NO
pa
-
IN
pl
pt
-
BR
pt
-
PT
rm
ro
ru
si
sk
sl
sq
sr
sv
-
SE
ta
te
th
tl
tr
uk
ur
uz
vi
zh
-
CN
zh
-
TW
"
.
split
(
"
"
)
;
const
ABOUT_URL
=
"
about
:
newtab
"
;
const
IS_MAIN_PROCESS
=
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
;
const
IS_RELEASE_OR_BETA
=
AppConstants
.
RELEASE_OR_BETA
;
const
PREF_ACTIVITY_STREAM_PRERENDER_ENABLED
=
"
browser
.
newtabpage
.
activity
-
stream
.
prerender
"
;
const
PREF_ACTIVITY_STREAM_DEBUG
=
"
browser
.
newtabpage
.
activity
-
stream
.
debug
"
;
function
AboutNewTabService
(
)
{
Services
.
obs
.
addObserver
(
this
TOPIC_APP_QUIT
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_LOCALES_CHANGE
)
;
Services
.
prefs
.
addObserver
(
PREF_ACTIVITY_STREAM_PRERENDER_ENABLED
this
)
;
if
(
!
IS_RELEASE_OR_BETA
)
{
Services
.
prefs
.
addObserver
(
PREF_ACTIVITY_STREAM_DEBUG
this
)
;
}
this
.
toggleActivityStream
(
true
)
;
this
.
initialized
=
true
;
if
(
IS_MAIN_PROCESS
)
{
AboutNewTab
.
init
(
)
;
}
}
AboutNewTabService
.
prototype
=
{
_newTabURL
:
ABOUT_URL
_activityStreamEnabled
:
false
_activityStreamPrerender
:
false
_activityStreamPath
:
"
"
_activityStreamDebug
:
false
_overridden
:
false
willNotifyUser
:
false
classID
:
Components
.
ID
(
"
{
dfcd2adc
-
7867
-
4d3a
-
ba70
-
17501f208142
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAboutNewTabService
Ci
.
nsIObserver
]
)
_xpcom_categories
:
[
{
service
:
true
}
]
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
nsPref
:
changed
"
:
if
(
data
=
=
=
PREF_ACTIVITY_STREAM_PRERENDER_ENABLED
)
{
this
.
_activityStreamPrerender
=
Services
.
prefs
.
getBoolPref
(
PREF_ACTIVITY_STREAM_PRERENDER_ENABLED
)
;
this
.
notifyChange
(
)
;
}
else
if
(
!
IS_RELEASE_OR_BETA
&
&
data
=
=
=
PREF_ACTIVITY_STREAM_DEBUG
)
{
this
.
_activityStreamDebug
=
Services
.
prefs
.
getBoolPref
(
PREF_ACTIVITY_STREAM_DEBUG
false
)
;
this
.
updatePrerenderedPath
(
)
;
this
.
notifyChange
(
)
;
}
break
;
case
TOPIC_APP_QUIT
:
this
.
uninit
(
)
;
if
(
IS_MAIN_PROCESS
)
{
AboutNewTab
.
uninit
(
)
;
}
break
;
case
TOPIC_LOCALES_CHANGE
:
this
.
updatePrerenderedPath
(
)
;
this
.
notifyChange
(
)
;
break
;
}
}
notifyChange
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
newtab
-
url
-
changed
"
this
.
_newTabURL
)
;
}
toggleActivityStream
(
stateEnabled
forceState
=
false
)
{
if
(
!
forceState
&
&
(
this
.
overridden
|
|
stateEnabled
=
=
=
this
.
activityStreamEnabled
)
)
{
return
false
;
}
if
(
stateEnabled
)
{
this
.
_activityStreamEnabled
=
true
;
}
else
{
this
.
_activityStreamEnabled
=
false
;
}
this
.
_activityStreamPrerender
=
Services
.
prefs
.
getBoolPref
(
PREF_ACTIVITY_STREAM_PRERENDER_ENABLED
)
;
if
(
!
IS_RELEASE_OR_BETA
)
{
this
.
_activityStreamDebug
=
Services
.
prefs
.
getBoolPref
(
PREF_ACTIVITY_STREAM_DEBUG
false
)
;
}
this
.
updatePrerenderedPath
(
)
;
this
.
_newtabURL
=
ABOUT_URL
;
return
true
;
}
updatePrerenderedPath
(
)
{
this
.
_activityStreamPath
=
{
this
.
_activityStreamDebug
?
"
static
"
:
this
.
activityStreamLocale
}
/
;
}
get
defaultURL
(
)
{
return
[
"
resource
:
/
/
activity
-
stream
/
prerendered
/
"
this
.
_activityStreamPath
"
activity
-
stream
"
this
.
_activityStreamPrerender
?
"
-
prerendered
"
:
"
"
this
.
_activityStreamDebug
?
"
-
debug
"
:
"
"
"
.
html
"
]
.
join
(
"
"
)
;
}
get
newTabURL
(
)
{
return
this
.
_newTabURL
;
}
set
newTabURL
(
aNewTabURL
)
{
aNewTabURL
=
aNewTabURL
.
trim
(
)
;
if
(
aNewTabURL
=
=
=
ABOUT_URL
)
{
this
.
resetNewTabURL
(
)
;
return
;
}
else
if
(
aNewTabURL
=
=
=
"
"
)
{
aNewTabURL
=
"
about
:
blank
"
;
}
this
.
toggleActivityStream
(
false
)
;
this
.
_newTabURL
=
aNewTabURL
;
this
.
_overridden
=
true
;
this
.
notifyChange
(
)
;
}
get
overridden
(
)
{
return
this
.
_overridden
;
}
get
activityStreamEnabled
(
)
{
return
this
.
_activityStreamEnabled
;
}
get
activityStreamPrerender
(
)
{
return
this
.
_activityStreamPrerender
;
}
get
activityStreamDebug
(
)
{
return
this
.
_activityStreamDebug
;
}
get
activityStreamLocale
(
)
{
return
Services
.
locale
.
negotiateLanguages
(
Services
.
locale
.
getAppLocalesAsLangTags
(
)
ACTIVITY_STREAM_LOCALES
"
en
-
US
"
)
[
0
]
;
}
resetNewTabURL
(
)
{
this
.
_overridden
=
false
;
this
.
_newTabURL
=
ABOUT_URL
;
this
.
toggleActivityStream
(
true
true
)
;
this
.
notifyChange
(
)
;
}
uninit
(
)
{
if
(
!
this
.
initialized
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
TOPIC_APP_QUIT
)
;
Services
.
obs
.
removeObserver
(
this
TOPIC_LOCALES_CHANGE
)
;
Services
.
prefs
.
removeObserver
(
PREF_ACTIVITY_STREAM_PRERENDER_ENABLED
this
)
;
if
(
!
IS_RELEASE_OR_BETA
)
{
Services
.
prefs
.
removeObserver
(
PREF_ACTIVITY_STREAM_DEBUG
this
)
;
}
this
.
initialized
=
false
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
AboutNewTabService
]
)
;
