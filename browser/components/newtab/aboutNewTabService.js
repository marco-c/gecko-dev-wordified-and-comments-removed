"
use
strict
"
;
const
{
utils
:
Cu
interfaces
:
Ci
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
UpdateUtils
"
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NewTabPrefsProvider
"
"
resource
:
/
/
/
modules
/
NewTabPrefsProvider
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Locale
"
"
resource
:
/
/
gre
/
modules
/
Locale
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MODE_CHANNEL_MAP
"
"
resource
:
/
/
/
modules
/
NewTabRemoteResources
.
jsm
"
)
;
const
LOCAL_NEWTAB_URL
=
"
chrome
:
/
/
browser
/
content
/
newtab
/
newTab
.
xhtml
"
;
const
REMOTE_NEWTAB_PATH
=
"
/
v
%
VERSION
%
/
%
CHANNEL
%
/
%
LOCALE
%
/
index
.
html
"
;
const
ABOUT_URL
=
"
about
:
newtab
"
;
const
PREF_REMOTE_ENABLED
=
"
browser
.
newtabpage
.
remote
"
;
const
PREF_REMOTE_CS_TEST
=
"
browser
.
newtabpage
.
remote
.
content
-
signing
-
test
"
;
const
PREF_MATCH_OS_LOCALE
=
"
intl
.
locale
.
matchOS
"
;
const
PREF_SELECTED_LOCALE
=
"
general
.
useragent
.
locale
"
;
const
PREF_REMOTE_MODE
=
"
browser
.
newtabpage
.
remote
.
mode
"
;
const
VALID_CHANNELS
=
new
Set
(
[
"
esr
"
"
release
"
"
beta
"
"
aurora
"
"
nightly
"
]
)
;
const
REMOTE_NEWTAB_VERSION
=
"
0
"
;
function
AboutNewTabService
(
)
{
NewTabPrefsProvider
.
prefs
.
on
(
PREF_REMOTE_ENABLED
this
.
_handleToggleEvent
.
bind
(
this
)
)
;
this
.
_updateRemoteMaybe
=
this
.
_updateRemoteMaybe
.
bind
(
this
)
;
this
.
toggleRemote
(
Services
.
prefs
.
getBoolPref
(
PREF_REMOTE_ENABLED
)
)
;
}
AboutNewTabService
.
prototype
=
{
_newTabURL
:
ABOUT_URL
_remoteEnabled
:
false
_remoteURL
:
null
_overridden
:
false
classID
:
Components
.
ID
(
"
{
dfcd2adc
-
7867
-
4d3a
-
ba70
-
17501f208142
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAboutNewTabService
]
)
_xpcom_categories
:
[
{
service
:
true
}
]
_handleToggleEvent
(
prefName
stateEnabled
forceState
)
{
if
(
this
.
toggleRemote
(
stateEnabled
forceState
)
)
{
Services
.
obs
.
notifyObservers
(
null
"
newtab
-
url
-
changed
"
ABOUT_URL
)
;
}
}
toggleRemote
(
stateEnabled
forceState
)
{
if
(
!
forceState
&
&
(
this
.
_overriden
|
|
stateEnabled
=
=
=
this
.
_remoteEnabled
)
)
{
return
false
;
}
let
csTest
=
Services
.
prefs
.
getBoolPref
(
PREF_REMOTE_CS_TEST
)
;
if
(
stateEnabled
)
{
if
(
!
csTest
)
{
this
.
_remoteURL
=
this
.
generateRemoteURL
(
)
;
}
else
{
this
.
_remoteURL
=
this
.
_newTabURL
;
}
NewTabPrefsProvider
.
prefs
.
on
(
PREF_SELECTED_LOCALE
this
.
_updateRemoteMaybe
)
;
NewTabPrefsProvider
.
prefs
.
on
(
PREF_MATCH_OS_LOCALE
this
.
_updateRemoteMaybe
)
;
NewTabPrefsProvider
.
prefs
.
on
(
PREF_REMOTE_MODE
this
.
_updateRemoteMaybe
)
;
this
.
_remoteEnabled
=
true
;
}
else
{
NewTabPrefsProvider
.
prefs
.
off
(
PREF_SELECTED_LOCALE
this
.
_updateRemoteMaybe
)
;
NewTabPrefsProvider
.
prefs
.
off
(
PREF_MATCH_OS_LOCALE
this
.
_updateRemoteMaybe
)
;
NewTabPrefsProvider
.
prefs
.
off
(
PREF_REMOTE_MODE
this
.
_updateRemoteMaybe
)
;
this
.
_remoteEnabled
=
false
;
}
if
(
!
csTest
)
{
this
.
_newTabURL
=
ABOUT_URL
;
}
return
true
;
}
generateRemoteURL
(
)
{
let
releaseName
=
this
.
releaseFromUpdateChannel
(
UpdateUtils
.
UpdateChannel
)
;
let
path
=
REMOTE_NEWTAB_PATH
.
replace
(
"
%
VERSION
%
"
REMOTE_NEWTAB_VERSION
)
.
replace
(
"
%
LOCALE
%
"
Locale
.
getLocale
(
)
)
.
replace
(
"
%
CHANNEL
%
"
releaseName
)
;
let
mode
=
Services
.
prefs
.
getCharPref
(
PREF_REMOTE_MODE
"
production
"
)
;
if
(
!
(
mode
in
MODE_CHANNEL_MAP
)
)
{
mode
=
"
production
"
;
}
return
MODE_CHANNEL_MAP
[
mode
]
.
origin
+
path
;
}
get
defaultURL
(
)
{
let
csTest
=
Services
.
prefs
.
getBoolPref
(
PREF_REMOTE_CS_TEST
)
;
if
(
this
.
_remoteEnabled
|
|
csTest
)
{
return
this
.
_remoteURL
;
}
return
LOCAL_NEWTAB_URL
;
}
_updateRemoteMaybe
(
)
{
if
(
!
this
.
_remoteEnabled
|
|
this
.
_overridden
)
{
return
;
}
let
url
=
this
.
generateRemoteURL
(
)
;
if
(
url
!
=
=
this
.
_remoteURL
)
{
this
.
_remoteURL
=
url
;
Services
.
obs
.
notifyObservers
(
null
"
newtab
-
url
-
changed
"
this
.
_remoteURL
)
;
}
}
releaseFromUpdateChannel
(
channelName
)
{
return
VALID_CHANNELS
.
has
(
channelName
)
?
channelName
:
"
nightly
"
;
}
get
newTabURL
(
)
{
return
this
.
_newTabURL
;
}
get
remoteVersion
(
)
{
return
REMOTE_NEWTAB_VERSION
;
}
get
remoteReleaseName
(
)
{
return
this
.
releaseFromUpdateChannel
(
UpdateUtils
.
UpdateChannel
)
;
}
set
newTabURL
(
aNewTabURL
)
{
let
csTest
=
Services
.
prefs
.
getBoolPref
(
PREF_REMOTE_CS_TEST
)
;
aNewTabURL
=
aNewTabURL
.
trim
(
)
;
if
(
aNewTabURL
=
=
=
ABOUT_URL
)
{
this
.
resetNewTabURL
(
)
;
return
;
}
else
if
(
aNewTabURL
=
=
=
"
"
)
{
aNewTabURL
=
"
about
:
blank
"
;
}
let
remoteURL
=
this
.
generateRemoteURL
(
)
;
let
prefRemoteEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_REMOTE_ENABLED
)
;
let
isResetLocal
=
!
prefRemoteEnabled
&
&
aNewTabURL
=
=
=
LOCAL_NEWTAB_URL
;
let
isResetRemote
=
prefRemoteEnabled
&
&
aNewTabURL
=
=
=
remoteURL
;
if
(
isResetLocal
|
|
isResetRemote
)
{
if
(
this
.
_overriden
&
&
!
csTest
)
{
this
.
resetNewTabURL
(
)
;
}
return
;
}
if
(
!
csTest
)
{
this
.
toggleRemote
(
false
)
;
}
else
{
this
.
_remoteURL
=
aNewTabURL
;
}
this
.
_newTabURL
=
aNewTabURL
;
this
.
_overridden
=
true
;
Services
.
obs
.
notifyObservers
(
null
"
newtab
-
url
-
changed
"
this
.
_newTabURL
)
;
}
get
overridden
(
)
{
return
this
.
_overridden
;
}
get
remoteEnabled
(
)
{
return
this
.
_remoteEnabled
;
}
resetNewTabURL
(
)
{
this
.
_overridden
=
false
;
this
.
_newTabURL
=
ABOUT_URL
;
this
.
toggleRemote
(
Services
.
prefs
.
getBoolPref
(
PREF_REMOTE_ENABLED
)
true
)
;
Services
.
obs
.
notifyObservers
(
null
"
newtab
-
url
-
changed
"
this
.
_newTabURL
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
AboutNewTabService
]
)
;
