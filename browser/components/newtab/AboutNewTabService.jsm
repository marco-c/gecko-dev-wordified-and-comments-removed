"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AboutNewTabStubService
"
"
AboutHomeStartupCacheChild
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
E10SUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
const
PREF_ABOUT_HOME_CACHE_ENABLED
=
"
browser
.
startup
.
homepage
.
abouthome_cache
.
enabled
"
;
const
PREF_SEPARATE_ABOUT_WELCOME
=
"
browser
.
aboutwelcome
.
enabled
"
;
const
SEPARATE_ABOUT_WELCOME_URL
=
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
aboutwelcome
.
html
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
BasePromiseWorker
"
"
resource
:
/
/
gre
/
modules
/
PromiseWorker
.
jsm
"
)
;
const
CACHE_WORKER_URL
=
"
resource
:
/
/
activity
-
stream
/
lib
/
cache
-
worker
.
js
"
;
const
IS_PRIVILEGED_PROCESS
=
Services
.
appinfo
.
remoteType
=
=
=
E10SUtils
.
PRIVILEGEDABOUT_REMOTE_TYPE
;
const
PREF_SEPARATE_PRIVILEGEDABOUT_CONTENT_PROCESS
=
"
browser
.
tabs
.
remote
.
separatePrivilegedContentProcess
"
;
const
PREF_ACTIVITY_STREAM_DEBUG
=
"
browser
.
newtabpage
.
activity
-
stream
.
debug
"
;
const
AboutHomeStartupCacheChild
=
{
_initted
:
false
STATE_RESPONSE_MESSAGE
:
"
AboutHomeStartupCache
:
State
:
Response
"
STATE_REQUEST_MESSAGE
:
"
AboutHomeStartupCache
:
State
:
Request
"
init
(
pageInputStream
scriptInputStream
)
{
if
(
!
IS_PRIVILEGED_PROCESS
)
{
throw
new
Error
(
"
Can
only
instantiate
in
the
privileged
about
content
processes
.
"
)
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
PREF_ABOUT_HOME_CACHE_ENABLED
false
)
)
{
return
;
}
if
(
this
.
_initted
)
{
throw
new
Error
(
"
AboutHomeStartupCacheChild
already
initted
.
"
)
;
}
this
.
_pageInputStream
=
pageInputStream
;
this
.
_scriptInputStream
=
scriptInputStream
;
this
.
_initted
=
true
;
}
maybeGetCachedPageChannel
(
uri
loadInfo
)
{
if
(
!
this
.
_initted
)
{
return
null
;
}
let
isScriptRequest
=
uri
.
query
=
=
=
"
jscache
"
;
if
(
!
isScriptRequest
)
{
try
{
if
(
!
this
.
_scriptInputStream
.
available
(
)
|
|
!
this
.
_pageInputStream
.
available
(
)
)
{
return
null
;
}
}
catch
(
e
)
{
if
(
e
.
result
=
=
=
Cr
.
NS_BASE_STREAM_CLOSED
)
{
return
null
;
}
throw
e
;
}
}
let
channel
=
Cc
[
"
mozilla
.
org
/
network
/
input
-
stream
-
channel
;
1
"
]
.
createInstance
(
Ci
.
nsIInputStreamChannel
)
;
channel
.
QueryInterface
(
Ci
.
nsIChannel
)
;
channel
.
setURI
(
uri
)
;
channel
.
loadInfo
=
loadInfo
;
channel
.
contentStream
=
isScriptRequest
?
this
.
_scriptInputStream
:
this
.
_pageInputStream
;
return
channel
;
}
getAboutHomeState
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
cpmm
.
addMessageListener
(
this
.
STATE_RESPONSE_MESSAGE
m
=
>
{
Services
.
cpmm
.
removeMessageListener
(
this
.
STATE_RESPONSE_MESSAGE
this
)
;
resolve
(
m
.
data
.
state
)
;
}
)
;
Services
.
cpmm
.
sendAsyncMessage
(
this
.
STATE_REQUEST_MESSAGE
)
;
}
)
;
}
_constructionPromise
:
null
constructAndSendCache
(
)
{
if
(
!
IS_PRIVILEGED_PROCESS
)
{
throw
new
Error
(
"
Wrong
process
type
.
"
)
;
}
if
(
this
.
_constructionPromise
)
{
return
this
.
_constructionPromise
;
}
return
(
this
.
_constructionPromise
=
(
async
(
)
=
>
{
try
{
let
worker
=
this
.
getOrCreateWorker
(
)
;
let
state
=
await
this
.
getAboutHomeState
(
)
;
let
{
page
script
}
=
await
worker
.
post
(
"
construct
"
[
state
]
)
;
let
pageInputStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
pageInputStream
.
setUTF8Data
(
page
)
;
let
scriptInputStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
scriptInputStream
.
setUTF8Data
(
script
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
AboutHomeStartupCache
:
PopulateCache
"
{
pageInputStream
scriptInputStream
}
)
;
}
finally
{
this
.
_constructionPromise
=
null
;
}
}
)
(
)
)
;
}
_cacheWorker
:
null
getOrCreateWorker
(
)
{
if
(
this
.
_cacheWorker
)
{
return
this
.
_cacheWorker
;
}
this
.
_cacheWorker
=
new
BasePromiseWorker
(
CACHE_WORKER_URL
)
;
return
this
.
_cacheWorker
;
}
}
;
class
BaseAboutNewTabService
{
constructor
(
)
{
if
(
!
AppConstants
.
RELEASE_OR_BETA
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
activityStreamDebug
"
PREF_ACTIVITY_STREAM_DEBUG
false
)
;
}
else
{
this
.
activityStreamDebug
=
false
;
}
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
isSeparateAboutWelcome
"
PREF_SEPARATE_ABOUT_WELCOME
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
privilegedAboutProcessEnabled
"
PREF_SEPARATE_PRIVILEGEDABOUT_CONTENT_PROCESS
false
)
;
this
.
classID
=
Components
.
ID
(
"
{
cb36c925
-
3adc
-
49b3
-
b720
-
a5cc49d8a40e
}
"
)
;
this
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAboutNewTabService
Ci
.
nsIObserver
]
)
;
}
get
defaultURL
(
)
{
return
[
"
resource
:
/
/
activity
-
stream
/
prerendered
/
"
"
activity
-
stream
"
this
.
activityStreamDebug
&
&
!
this
.
privilegedAboutProcessEnabled
?
"
-
debug
"
:
"
"
this
.
privilegedAboutProcessEnabled
?
"
-
noscripts
"
:
"
"
"
.
html
"
]
.
join
(
"
"
)
;
}
get
welcomeURL
(
)
{
if
(
this
.
isSeparateAboutWelcome
)
{
return
SEPARATE_ABOUT_WELCOME_URL
;
}
return
this
.
defaultURL
;
}
aboutHomeChannel
(
uri
loadInfo
)
{
throw
Components
.
Exception
(
"
AboutHomeChannel
not
implemented
for
this
process
.
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
class
AboutNewTabChildService
extends
BaseAboutNewTabService
{
aboutHomeChannel
(
uri
loadInfo
)
{
if
(
IS_PRIVILEGED_PROCESS
)
{
let
cacheChannel
=
AboutHomeStartupCacheChild
.
maybeGetCachedPageChannel
(
uri
loadInfo
)
;
if
(
cacheChannel
)
{
return
cacheChannel
;
}
}
let
pageURI
=
Services
.
io
.
newURI
(
this
.
defaultURL
)
;
let
fileChannel
=
Services
.
io
.
newChannelFromURIWithLoadInfo
(
pageURI
loadInfo
)
;
fileChannel
.
originalURI
=
uri
;
return
fileChannel
;
}
}
function
AboutNewTabStubService
(
)
{
if
(
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
return
new
BaseAboutNewTabService
(
)
;
}
return
new
AboutNewTabChildService
(
)
;
}
