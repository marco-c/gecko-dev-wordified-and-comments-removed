"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AboutNewTabStubService
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
E10SUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
const
PREF_SEPARATE_ABOUT_WELCOME
=
"
browser
.
aboutwelcome
.
enabled
"
;
const
SEPARATE_ABOUT_WELCOME_URL
=
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
aboutwelcome
.
html
"
;
const
TOPIC_APP_QUIT
=
"
quit
-
application
-
granted
"
;
const
TOPIC_CONTENT_DOCUMENT_INTERACTIVE
=
"
content
-
document
-
interactive
"
;
const
BASE_URL
=
"
resource
:
/
/
activity
-
stream
/
"
;
const
ACTIVITY_STREAM_PAGES
=
new
Set
(
[
"
home
"
"
newtab
"
"
welcome
"
]
)
;
const
IS_PRIVILEGED_PROCESS
=
Services
.
appinfo
.
remoteType
=
=
=
E10SUtils
.
PRIVILEGEDABOUT_REMOTE_TYPE
;
const
PREF_SEPARATE_PRIVILEGEDABOUT_CONTENT_PROCESS
=
"
browser
.
tabs
.
remote
.
separatePrivilegedContentProcess
"
;
const
PREF_ACTIVITY_STREAM_DEBUG
=
"
browser
.
newtabpage
.
activity
-
stream
.
debug
"
;
class
BaseAboutNewTabService
{
constructor
(
)
{
if
(
!
AppConstants
.
RELEASE_OR_BETA
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
activityStreamDebug
"
PREF_ACTIVITY_STREAM_DEBUG
false
)
;
}
else
{
this
.
activityStreamDebug
=
false
;
}
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
isSeparateAboutWelcome
"
PREF_SEPARATE_ABOUT_WELCOME
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
privilegedAboutProcessEnabled
"
PREF_SEPARATE_PRIVILEGEDABOUT_CONTENT_PROCESS
false
)
;
this
.
classID
=
Components
.
ID
(
"
{
cb36c925
-
3adc
-
49b3
-
b720
-
a5cc49d8a40e
}
"
)
;
this
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAboutNewTabService
Ci
.
nsIObserver
]
)
;
}
get
defaultURL
(
)
{
return
[
"
resource
:
/
/
activity
-
stream
/
prerendered
/
"
"
activity
-
stream
"
this
.
activityStreamDebug
&
&
!
this
.
privilegedAboutProcessEnabled
?
"
-
debug
"
:
"
"
this
.
privilegedAboutProcessEnabled
?
"
-
noscripts
"
:
"
"
"
.
html
"
]
.
join
(
"
"
)
;
}
get
welcomeURL
(
)
{
if
(
this
.
isSeparateAboutWelcome
)
{
return
SEPARATE_ABOUT_WELCOME_URL
;
}
return
this
.
defaultURL
;
}
}
class
AboutNewTabChildService
extends
BaseAboutNewTabService
{
constructor
(
)
{
super
(
)
;
if
(
this
.
privilegedAboutProcessEnabled
)
{
Services
.
obs
.
addObserver
(
this
TOPIC_CONTENT_DOCUMENT_INTERACTIVE
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_APP_QUIT
)
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
TOPIC_APP_QUIT
:
{
Services
.
obs
.
removeObserver
(
this
TOPIC_CONTENT_DOCUMENT_INTERACTIVE
)
;
Services
.
obs
.
removeObserver
(
this
TOPIC_APP_QUIT
)
;
break
;
}
case
TOPIC_CONTENT_DOCUMENT_INTERACTIVE
:
{
if
(
!
this
.
privilegedAboutProcessEnabled
|
|
!
IS_PRIVILEGED_PROCESS
)
{
return
;
}
const
win
=
subject
.
defaultView
;
if
(
win
=
=
=
null
)
{
return
;
}
if
(
!
ACTIVITY_STREAM_PAGES
.
has
(
win
.
location
.
pathname
)
)
{
return
;
}
if
(
this
.
isSeparateAboutWelcome
&
&
win
.
location
.
pathname
.
includes
(
"
welcome
"
)
)
{
return
;
}
const
onLoaded
=
(
)
=
>
{
const
debugString
=
this
.
activityStreamDebug
?
"
-
dev
"
:
"
"
;
const
scripts
=
[
"
chrome
:
/
/
browser
/
content
/
contentSearchUI
.
js
"
"
chrome
:
/
/
browser
/
content
/
contentSearchHandoffUI
.
js
"
"
chrome
:
/
/
browser
/
content
/
contentTheme
.
js
"
{
BASE_URL
}
vendor
/
react
{
debugString
}
.
js
{
BASE_URL
}
vendor
/
react
-
dom
{
debugString
}
.
js
{
BASE_URL
}
vendor
/
prop
-
types
.
js
{
BASE_URL
}
vendor
/
react
-
transition
-
group
.
js
{
BASE_URL
}
vendor
/
redux
.
js
{
BASE_URL
}
vendor
/
react
-
redux
.
js
{
BASE_URL
}
data
/
content
/
activity
-
stream
.
bundle
.
js
]
;
for
(
let
script
of
scripts
)
{
Services
.
scriptloader
.
loadSubScript
(
script
win
)
;
}
}
;
win
.
addEventListener
(
"
DOMContentLoaded
"
onLoaded
{
once
:
true
}
)
;
const
onUnloaded
=
(
)
=
>
{
win
.
removeEventListener
(
"
DOMContentLoaded
"
onLoaded
)
;
}
;
win
.
addEventListener
(
"
unload
"
onUnloaded
{
once
:
true
}
)
;
break
;
}
}
}
}
function
AboutNewTabStubService
(
)
{
if
(
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
return
new
BaseAboutNewTabService
(
)
;
}
return
new
AboutNewTabChildService
(
)
;
}
