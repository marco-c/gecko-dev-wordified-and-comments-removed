"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AboutNewTabStubService
"
"
AboutHomeStartupCacheChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
E10SUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
}
)
;
const
PREF_ABOUT_HOME_CACHE_TESTING
=
"
browser
.
startup
.
homepage
.
abouthome_cache
.
testing
"
;
const
ABOUT_WELCOME_URL
=
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
aboutwelcome
.
html
"
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
BasePromiseWorker
"
"
resource
:
/
/
gre
/
modules
/
PromiseWorker
.
jsm
"
)
;
const
CACHE_WORKER_URL
=
"
resource
:
/
/
activity
-
stream
/
lib
/
cache
-
worker
.
js
"
;
const
IS_PRIVILEGED_PROCESS
=
Services
.
appinfo
.
remoteType
=
=
=
E10SUtils
.
PRIVILEGEDABOUT_REMOTE_TYPE
;
const
PREF_SEPARATE_PRIVILEGEDABOUT_CONTENT_PROCESS
=
"
browser
.
tabs
.
remote
.
separatePrivilegedContentProcess
"
;
const
PREF_ACTIVITY_STREAM_DEBUG
=
"
browser
.
newtabpage
.
activity
-
stream
.
debug
"
;
const
AboutHomeStartupCacheChild
=
{
_initted
:
false
CACHE_REQUEST_MESSAGE
:
"
AboutHomeStartupCache
:
CacheRequest
"
CACHE_RESPONSE_MESSAGE
:
"
AboutHomeStartupCache
:
CacheResponse
"
CACHE_USAGE_RESULT_MESSAGE
:
"
AboutHomeStartupCache
:
UsageResult
"
STATES
:
{
UNAVAILABLE
:
0
UNCONSUMED
:
1
PAGE_CONSUMED
:
2
PAGE_AND_SCRIPT_CONSUMED
:
3
FAILED
:
4
}
REQUEST_TYPE
:
{
PAGE
:
0
SCRIPT
:
1
}
_state
:
0
_consumerBCID
:
null
init
(
pageInputStream
scriptInputStream
)
{
if
(
!
IS_PRIVILEGED_PROCESS
&
&
!
Services
.
prefs
.
getBoolPref
(
PREF_ABOUT_HOME_CACHE_TESTING
false
)
)
{
throw
new
Error
(
"
Can
only
instantiate
in
the
privileged
about
content
processes
.
"
)
;
}
if
(
!
lazy
.
NimbusFeatures
.
abouthomecache
.
getVariable
(
"
enabled
"
)
)
{
return
;
}
if
(
this
.
_initted
)
{
throw
new
Error
(
"
AboutHomeStartupCacheChild
already
initted
.
"
)
;
}
Services
.
obs
.
addObserver
(
this
"
memory
-
pressure
"
)
;
Services
.
cpmm
.
addMessageListener
(
this
.
CACHE_REQUEST_MESSAGE
this
)
;
this
.
_pageInputStream
=
pageInputStream
;
this
.
_scriptInputStream
=
scriptInputStream
;
this
.
_initted
=
true
;
this
.
setState
(
this
.
STATES
.
UNCONSUMED
)
;
}
uninit
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
PREF_ABOUT_HOME_CACHE_TESTING
false
)
)
{
throw
new
Error
(
"
Cannot
uninit
AboutHomeStartupCacheChild
unless
testing
.
"
)
;
}
if
(
!
this
.
_initted
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
"
memory
-
pressure
"
)
;
Services
.
cpmm
.
removeMessageListener
(
this
.
CACHE_REQUEST_MESSAGE
this
)
;
if
(
this
.
_cacheWorker
)
{
this
.
_cacheWorker
.
terminate
(
)
;
this
.
_cacheWorker
=
null
;
}
this
.
_pageInputStream
=
null
;
this
.
_scriptInputStream
=
null
;
this
.
_initted
=
false
;
this
.
_state
=
this
.
STATES
.
UNAVAILABLE
;
this
.
_consumerBCID
=
null
;
}
maybeGetCachedPageChannel
(
uri
loadInfo
)
{
if
(
!
this
.
_initted
)
{
return
null
;
}
if
(
this
.
_state
>
=
this
.
STATES
.
PAGE_AND_SCRIPT_CONSUMED
)
{
return
null
;
}
let
requestType
=
uri
.
query
=
=
=
"
jscache
"
?
this
.
REQUEST_TYPE
.
SCRIPT
:
this
.
REQUEST_TYPE
.
PAGE
;
if
(
(
requestType
=
=
=
this
.
REQUEST_TYPE
.
PAGE
&
&
this
.
_state
!
=
=
this
.
STATES
.
UNCONSUMED
)
|
|
(
requestType
=
=
=
this
.
REQUEST_TYPE_SCRIPT
&
&
this
.
_state
!
=
=
this
.
STATES
.
PAGE_CONSUMED
)
)
{
return
null
;
}
if
(
requestType
=
=
=
this
.
REQUEST_TYPE
.
PAGE
)
{
try
{
if
(
!
this
.
_scriptInputStream
.
available
(
)
|
|
!
this
.
_pageInputStream
.
available
(
)
)
{
this
.
setState
(
this
.
STATES
.
FAILED
)
;
this
.
reportUsageResult
(
false
)
;
return
null
;
}
}
catch
(
e
)
{
this
.
setState
(
this
.
STATES
.
FAILED
)
;
if
(
e
.
result
=
=
=
Cr
.
NS_BASE_STREAM_CLOSED
)
{
this
.
reportUsageResult
(
false
)
;
return
null
;
}
throw
e
;
}
}
if
(
requestType
=
=
=
this
.
REQUEST_TYPE
.
SCRIPT
&
&
this
.
_consumerBCID
!
=
=
loadInfo
.
browsingContextID
)
{
this
.
setState
(
this
.
STATES
.
FAILED
)
;
return
null
;
}
let
channel
=
Cc
[
"
mozilla
.
org
/
network
/
input
-
stream
-
channel
;
1
"
]
.
createInstance
(
Ci
.
nsIInputStreamChannel
)
;
channel
.
QueryInterface
(
Ci
.
nsIChannel
)
;
channel
.
setURI
(
uri
)
;
channel
.
loadInfo
=
loadInfo
;
channel
.
contentStream
=
requestType
=
=
=
this
.
REQUEST_TYPE
.
PAGE
?
this
.
_pageInputStream
:
this
.
_scriptInputStream
;
if
(
requestType
=
=
=
this
.
REQUEST_TYPE
.
SCRIPT
)
{
this
.
setState
(
this
.
STATES
.
PAGE_AND_SCRIPT_CONSUMED
)
;
this
.
reportUsageResult
(
true
)
;
}
else
{
this
.
setState
(
this
.
STATES
.
PAGE_CONSUMED
)
;
this
.
_consumerBCID
=
loadInfo
.
browsingContextID
;
}
return
channel
;
}
async
constructAndSendCache
(
state
)
{
if
(
!
IS_PRIVILEGED_PROCESS
)
{
throw
new
Error
(
"
Wrong
process
type
.
"
)
;
}
let
worker
=
this
.
getOrCreateWorker
(
)
;
TelemetryStopwatch
.
start
(
"
FX_ABOUTHOME_CACHE_CONSTRUCTION
"
)
;
let
{
page
script
}
=
await
worker
.
post
(
"
construct
"
[
state
]
)
.
finally
(
(
)
=
>
{
TelemetryStopwatch
.
finish
(
"
FX_ABOUTHOME_CACHE_CONSTRUCTION
"
)
;
}
)
;
let
pageInputStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
pageInputStream
.
setUTF8Data
(
page
)
;
let
scriptInputStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
scriptInputStream
.
setUTF8Data
(
script
)
;
Services
.
cpmm
.
sendAsyncMessage
(
this
.
CACHE_RESPONSE_MESSAGE
{
pageInputStream
scriptInputStream
}
)
;
}
_cacheWorker
:
null
getOrCreateWorker
(
)
{
if
(
this
.
_cacheWorker
)
{
return
this
.
_cacheWorker
;
}
this
.
_cacheWorker
=
new
lazy
.
BasePromiseWorker
(
CACHE_WORKER_URL
)
;
return
this
.
_cacheWorker
;
}
receiveMessage
(
message
)
{
if
(
message
.
name
=
=
=
this
.
CACHE_REQUEST_MESSAGE
)
{
let
{
state
}
=
message
.
data
;
this
.
constructAndSendCache
(
state
)
;
}
}
reportUsageResult
(
success
)
{
Services
.
cpmm
.
sendAsyncMessage
(
this
.
CACHE_USAGE_RESULT_MESSAGE
{
success
}
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
memory
-
pressure
"
&
&
this
.
_cacheWorker
)
{
this
.
_cacheWorker
.
terminate
(
)
;
this
.
_cacheWorker
=
null
;
}
}
setState
(
state
)
{
if
(
state
>
this
.
_state
)
{
this
.
_state
=
state
;
}
else
{
console
.
error
(
"
AboutHomeStartupCacheChild
could
not
transition
from
state
"
+
{
this
.
_state
}
to
{
state
}
new
Error
(
)
.
stack
)
;
}
}
}
;
class
BaseAboutNewTabService
{
constructor
(
)
{
if
(
!
AppConstants
.
RELEASE_OR_BETA
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
activityStreamDebug
"
PREF_ACTIVITY_STREAM_DEBUG
false
)
;
}
else
{
this
.
activityStreamDebug
=
false
;
}
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
privilegedAboutProcessEnabled
"
PREF_SEPARATE_PRIVILEGEDABOUT_CONTENT_PROCESS
false
)
;
this
.
classID
=
Components
.
ID
(
"
{
cb36c925
-
3adc
-
49b3
-
b720
-
a5cc49d8a40e
}
"
)
;
this
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIAboutNewTabService
"
"
nsIObserver
"
]
)
;
}
get
defaultURL
(
)
{
return
[
"
resource
:
/
/
activity
-
stream
/
prerendered
/
"
"
activity
-
stream
"
this
.
activityStreamDebug
&
&
!
this
.
privilegedAboutProcessEnabled
?
"
-
debug
"
:
"
"
this
.
privilegedAboutProcessEnabled
?
"
-
noscripts
"
:
"
"
"
.
html
"
]
.
join
(
"
"
)
;
}
get
welcomeURL
(
)
{
lazy
.
NimbusFeatures
.
aboutwelcome
.
recordExposureEvent
(
{
once
:
true
}
)
;
if
(
lazy
.
NimbusFeatures
.
aboutwelcome
.
getVariable
(
"
enabled
"
)
?
?
true
)
{
return
ABOUT_WELCOME_URL
;
}
return
this
.
defaultURL
;
}
aboutHomeChannel
(
uri
loadInfo
)
{
throw
Components
.
Exception
(
"
AboutHomeChannel
not
implemented
for
this
process
.
"
Cr
.
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
class
AboutNewTabChildService
extends
BaseAboutNewTabService
{
aboutHomeChannel
(
uri
loadInfo
)
{
if
(
IS_PRIVILEGED_PROCESS
)
{
let
cacheChannel
=
AboutHomeStartupCacheChild
.
maybeGetCachedPageChannel
(
uri
loadInfo
)
;
if
(
cacheChannel
)
{
return
cacheChannel
;
}
}
let
pageURI
=
Services
.
io
.
newURI
(
this
.
defaultURL
)
;
let
fileChannel
=
Services
.
io
.
newChannelFromURIWithLoadInfo
(
pageURI
loadInfo
)
;
fileChannel
.
originalURI
=
uri
;
return
fileChannel
;
}
}
function
AboutNewTabStubService
(
)
{
if
(
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
return
new
BaseAboutNewTabService
(
)
;
}
return
new
AboutNewTabChildService
(
)
;
}
