"
use
strict
"
;
let
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
aboutNewTabService
"
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
"
nsIAboutNewTabService
"
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
remote
"
false
)
;
aboutNewTabService
.
resetNewTabURL
(
)
;
}
)
;
add_task
(
function
*
redirector_ignores_override
(
)
{
let
overrides
=
[
"
chrome
:
/
/
browser
/
content
/
downloads
/
contentAreaDownloadsView
.
xul
"
"
about
:
home
"
]
;
for
(
let
overrideURL
of
overrides
)
{
let
notificationPromise
=
nextChangeNotificationPromise
(
overrideURL
newtab
page
now
points
to
{
overrideURL
}
)
;
aboutNewTabService
.
newTabURL
=
overrideURL
;
yield
notificationPromise
;
Assert
.
ok
(
aboutNewTabService
.
overridden
"
url
has
been
overridden
"
)
;
let
tabOptions
=
{
gBrowser
url
:
"
about
:
newtab
"
}
;
yield
BrowserTestUtils
.
withNewTab
(
tabOptions
function
*
(
browser
)
{
yield
ContentTask
.
spawn
(
browser
{
}
function
*
(
)
{
is
(
content
.
location
.
href
"
about
:
newtab
"
"
Got
right
URL
"
)
;
is
(
content
.
document
.
location
.
href
"
about
:
newtab
"
"
Got
right
URL
"
)
;
is
(
content
.
document
.
nodePrincipal
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
"
nodePrincipal
should
match
systemPrincipal
"
)
;
}
)
;
}
)
;
}
}
)
;
add_task
(
function
*
override_loads_in_browser
(
)
{
let
overrides
=
[
"
chrome
:
/
/
browser
/
content
/
downloads
/
contentAreaDownloadsView
.
xul
"
"
about
:
home
"
"
about
:
home
"
]
;
for
(
let
overrideURL
of
overrides
)
{
let
notificationPromise
=
nextChangeNotificationPromise
(
overrideURL
.
trim
(
)
newtab
page
now
points
to
{
overrideURL
}
)
;
aboutNewTabService
.
newTabURL
=
overrideURL
;
yield
notificationPromise
;
Assert
.
ok
(
aboutNewTabService
.
overridden
"
url
has
been
overridden
"
)
;
BrowserOpenTab
(
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
yield
ContentTask
.
spawn
(
browser
{
url
:
overrideURL
}
function
*
(
args
)
{
is
(
content
.
location
.
href
args
.
url
.
trim
(
)
"
Got
right
URL
"
)
;
is
(
content
.
document
.
location
.
href
args
.
url
.
trim
(
)
"
Got
right
URL
"
)
;
}
)
;
yield
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
}
)
;
add_task
(
function
*
override_blank_loads_in_browser
(
)
{
let
overrides
=
[
"
"
"
"
"
\
n
\
t
"
"
about
:
blank
"
]
;
for
(
let
overrideURL
of
overrides
)
{
let
notificationPromise
=
nextChangeNotificationPromise
(
"
about
:
blank
"
"
newtab
page
now
points
to
about
:
blank
"
)
;
aboutNewTabService
.
newTabURL
=
overrideURL
;
yield
notificationPromise
;
Assert
.
ok
(
aboutNewTabService
.
overridden
"
url
has
been
overridden
"
)
;
BrowserOpenTab
(
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
yield
ContentTask
.
spawn
(
browser
{
}
function
*
(
)
{
is
(
content
.
location
.
href
"
about
:
blank
"
"
Got
right
URL
"
)
;
is
(
content
.
document
.
location
.
href
"
about
:
blank
"
"
Got
right
URL
"
)
;
}
)
;
yield
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
}
)
;
function
nextChangeNotificationPromise
(
aNewURL
testMessage
)
{
return
TestUtils
.
topicObserved
(
"
newtab
-
url
-
changed
"
function
observer
(
aSubject
aData
)
{
Assert
.
equal
(
aData
aNewURL
testMessage
)
;
return
true
;
}
.
bind
(
this
)
)
;
}
