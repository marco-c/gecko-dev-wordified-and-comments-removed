"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
aboutNewTabService
"
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
"
nsIAboutNewTabService
"
)
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
newtab
/
tests
/
browser
/
dummy_page
.
html
"
;
add_task
(
function
*
open_newtab
(
)
{
let
notificationPromise
=
nextChangeNotificationPromise
(
TEST_URL
"
newtab
page
now
points
to
test
url
"
)
;
aboutNewTabService
.
newTabURL
=
TEST_URL
;
yield
notificationPromise
;
Assert
.
ok
(
aboutNewTabService
.
overridden
"
url
has
been
overridden
"
)
;
BrowserOpenTab
(
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
yield
ContentTask
.
spawn
(
browser
{
url
:
TEST_URL
}
function
*
(
args
)
{
is
(
content
.
document
.
location
.
href
args
.
url
"
document
.
location
should
match
the
external
resource
"
)
;
is
(
content
.
document
.
documentURI
args
.
url
"
document
.
documentURI
should
match
the
external
resource
"
)
;
is
(
content
.
document
.
nodePrincipal
.
URI
.
spec
args
.
url
"
nodePrincipal
should
match
the
external
resource
"
)
;
}
)
;
yield
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
function
nextChangeNotificationPromise
(
aNewURL
testMessage
)
{
return
TestUtils
.
topicObserved
(
"
newtab
-
url
-
changed
"
function
observer
(
aSubject
aData
)
{
Assert
.
equal
(
aData
aNewURL
testMessage
)
;
return
true
;
}
.
bind
(
this
)
)
;
}
