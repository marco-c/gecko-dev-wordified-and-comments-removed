"
use
strict
"
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NewTabSearchProvider
"
"
resource
:
/
/
/
modules
/
NewTabSearchProvider
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ContentSearch
"
"
resource
:
/
/
/
modules
/
ContentSearch
.
jsm
"
)
;
do_get_profile
(
)
;
function
run_test
(
)
{
run_next_test
(
)
;
}
function
hasProp
(
obj
)
{
return
function
(
aProp
)
{
ok
(
obj
.
hasOwnProperty
(
aProp
)
expect
to
have
property
{
aProp
}
)
;
}
;
}
add_task
(
function
*
test_search
(
)
{
ContentSearch
.
init
(
)
;
let
observerPromise
=
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
observer
(
aSubject
aTopic
aData
)
{
if
(
aData
=
=
=
"
init
-
complete
"
&
&
aTopic
=
=
=
"
browser
-
search
-
service
"
)
{
Services
.
obs
.
removeObserver
(
observer
"
browser
-
search
-
service
"
)
;
resolve
(
)
;
}
}
"
browser
-
search
-
service
"
false
)
;
}
)
;
Services
.
search
.
init
(
)
;
yield
observerPromise
;
do_check_true
(
Services
.
search
.
isInitialized
)
;
let
state
=
yield
NewTabSearchProvider
.
search
.
asyncGetState
(
)
;
let
stateProps
=
hasProp
(
state
)
;
[
"
engines
"
"
currentEngine
"
]
.
forEach
(
stateProps
)
;
let
{
currentEngine
}
=
state
;
equal
(
currentEngine
.
name
Services
.
search
.
currentEngine
.
name
"
Current
engine
has
been
correctly
set
"
)
;
var
engineProps
=
hasProp
(
currentEngine
)
;
[
"
name
"
"
placeholder
"
"
iconBuffer
"
]
.
forEach
(
engineProps
)
;
Services
.
search
.
addEngineWithDetails
(
"
TestSearch1
"
"
"
"
"
"
"
"
GET
"
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
)
;
Services
.
search
.
addEngineWithDetails
(
"
TestSearch2
"
"
"
"
"
"
"
"
GET
"
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
)
;
Services
.
search
.
defaultEngine
=
Services
.
search
.
getEngineByName
(
"
TestSearch1
"
)
;
let
engineName
=
"
TestSearch2
"
;
NewTabSearchProvider
.
search
.
init
(
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
NewTabSearchProvider
.
search
.
once
(
"
browser
-
search
-
engine
-
modified
"
(
name
data
)
=
>
{
resolve
(
[
name
data
.
name
]
)
;
}
)
;
}
)
;
Services
.
search
.
currentEngine
=
Services
.
search
.
getEngineByName
(
engineName
)
;
let
expectedEngineName
=
Services
.
search
.
currentEngine
.
name
;
let
[
eventName
actualEngineName
]
=
yield
promise
;
equal
(
eventName
"
browser
-
search
-
engine
-
modified
"
emitter
sent
the
correct
event
{
eventName
}
)
;
equal
(
expectedEngineName
actualEngineName
emitter
set
the
correct
engine
{
expectedEngineName
}
)
;
NewTabSearchProvider
.
search
.
uninit
(
)
;
}
)
;
