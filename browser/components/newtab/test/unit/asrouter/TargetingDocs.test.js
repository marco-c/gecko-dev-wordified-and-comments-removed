import
{
ASRouterTargeting
}
from
"
lib
/
ASRouterTargeting
.
jsm
"
;
import
docs
from
"
content
-
src
/
asrouter
/
docs
/
targeting
-
attributes
.
md
"
;
const
SKIP_DOCS
=
[
]
;
const
MESSAGE_CONTEXT_ATTRIBUTES
=
[
"
previousSessionEnd
"
"
trailheadInterrupt
"
"
trailheadTriplet
"
]
;
function
getHeadingsFromDocs
(
)
{
const
re
=
/
#
#
#
(
\
w
+
)
/
g
;
const
found
=
[
]
;
let
match
=
1
;
while
(
match
)
{
match
=
re
.
exec
(
docs
)
;
if
(
match
)
{
found
.
push
(
match
[
1
]
)
;
}
}
return
found
;
}
function
getTOCFromDocs
(
)
{
const
re
=
/
#
#
Available
attributes
\
n
+
(
[
^
]
+
)
\
n
+
#
#
Detailed
usage
/
;
const
sectionMatch
=
docs
.
match
(
re
)
;
if
(
!
sectionMatch
)
{
return
[
]
;
}
const
[
listText
]
=
sectionMatch
;
const
re2
=
/
\
[
(
\
w
+
)
\
]
/
g
;
const
found
=
[
]
;
let
match
=
1
;
while
(
match
)
{
match
=
re2
.
exec
(
listText
)
;
if
(
match
)
{
found
.
push
(
match
[
1
]
)
;
}
}
return
found
;
}
describe
(
"
ASRTargeting
docs
"
(
)
=
>
{
const
DOCS_TARGETING_HEADINGS
=
getHeadingsFromDocs
(
)
;
const
DOCS_TOC
=
getTOCFromDocs
(
)
;
const
ASRTargetingAttributes
=
[
.
.
.
Object
.
keys
(
ASRouterTargeting
.
Environment
)
.
filter
(
attribute
=
>
!
SKIP_DOCS
.
includes
(
attribute
)
)
.
.
.
MESSAGE_CONTEXT_ATTRIBUTES
]
;
describe
(
"
All
targeting
params
documented
in
targeting
-
attributes
.
md
"
(
)
=
>
{
for
(
const
targetingParam
of
ASRTargetingAttributes
)
{
it
(
should
have
docs
and
table
of
contents
entry
for
{
targetingParam
}
(
)
=
>
{
assert
.
include
(
DOCS_TARGETING_HEADINGS
targetingParam
Didn
'
t
find
the
heading
:
#
#
#
\
{
targetingParam
}
\
)
;
assert
.
include
(
DOCS_TOC
targetingParam
Didn
'
t
find
a
table
of
contents
entry
for
{
targetingParam
}
)
;
}
)
;
}
}
)
;
describe
(
"
No
extra
attributes
in
targeting
-
attributes
.
md
"
(
)
=
>
{
const
whitelist
=
[
"
personalizedCfrThreshold
"
"
personalizedCfrScores
"
]
;
for
(
const
targetingParam
of
DOCS_TARGETING_HEADINGS
.
filter
(
doc
=
>
!
whitelist
.
includes
(
doc
)
)
)
{
it
(
should
have
an
implementation
for
{
targetingParam
}
in
ASRouterTargeting
.
Environment
(
)
=
>
{
assert
.
include
(
ASRTargetingAttributes
targetingParam
Didn
'
t
find
an
implementation
for
{
targetingParam
}
)
;
}
)
;
}
}
)
;
}
)
;
