import
{
CFRMessageProvider
}
from
"
lib
/
CFRMessageProvider
.
jsm
"
;
const
messages
=
CFRMessageProvider
.
getMessages
(
)
;
const
REGULAR_IDS
=
[
"
FACEBOOK_CONTAINER
"
"
GOOGLE_TRANSLATE
"
"
YOUTUBE_ENHANCE
"
]
;
describe
(
"
CFRMessageProvider
"
(
)
=
>
{
it
(
"
should
have
a
total
of
9
messages
"
(
)
=
>
{
assert
.
lengthOf
(
messages
9
)
;
}
)
;
it
(
"
should
have
one
message
each
for
the
three
regular
addons
"
(
)
=
>
{
for
(
const
id
of
REGULAR_IDS
)
{
const
cohort3
=
messages
.
find
(
msg
=
>
msg
.
id
=
=
=
{
id
}
_3
)
;
assert
.
ok
(
cohort3
contains
three
day
cohort
for
{
id
}
)
;
assert
.
deepEqual
(
cohort3
.
frequency
{
lifetime
:
3
}
"
three
day
cohort
has
the
right
frequency
cap
"
)
;
assert
.
notInclude
(
cohort3
.
targeting
providerCohorts
.
cfr
)
;
}
}
)
;
it
(
"
should
always
have
xpinstallEnabled
as
targeting
if
it
is
an
addon
"
(
)
=
>
{
for
(
const
message
of
messages
)
{
if
(
!
message
.
content
.
layout
)
{
assert
.
include
(
message
.
targeting
(
xpinstallEnabled
=
=
true
)
)
;
}
}
}
)
;
it
(
"
should
restrict
all
messages
to
en
locale
for
now
(
PIN
TAB
is
handled
separately
)
"
(
)
=
>
{
for
(
const
message
of
messages
.
filter
(
m
=
>
!
m
.
content
.
layout
)
)
{
assert
.
include
(
message
.
targeting
localeLanguageCode
=
=
"
en
"
)
;
}
}
)
;
it
(
"
should
restrict
locale
for
PIN_TAB
message
"
(
)
=
>
{
const
pinTabMessage
=
messages
.
find
(
m
=
>
m
.
id
=
=
=
"
PIN_TAB
"
)
;
assert
.
lengthOf
(
pinTabMessage
.
targeting
.
match
(
/
en
-
|
fr
|
de
/
g
)
8
)
;
}
)
;
it
(
"
should
contain
www
.
version
of
the
hosts
"
(
)
=
>
{
const
pinTabMessage
=
messages
.
find
(
m
=
>
m
.
id
=
=
=
"
PIN_TAB
"
)
;
assert
.
isTrue
(
!
!
pinTabMessage
.
trigger
.
params
.
filter
(
host
=
>
host
.
startsWith
(
"
www
.
"
)
)
.
length
)
;
}
)
;
}
)
;
