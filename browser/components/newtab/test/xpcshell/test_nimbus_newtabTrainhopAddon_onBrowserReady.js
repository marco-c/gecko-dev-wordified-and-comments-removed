"
use
strict
"
;
add_task
(
{
pref_set
:
[
[
TRAINHOP_SCHEDULED_UPDATE_STATE_TIMEOUT_PREF
100
]
[
TRAINHOP_SCHEDULED_UPDATE_STATE_DELAY_PREF
100
]
[
"
toolkit
.
asyncshutdown
.
testing
"
true
]
]
}
async
function
test_scheduled_updateAddonState_onBrowserReady
(
)
{
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
const
sandbox
=
sinon
.
createSandbox
(
)
;
const
asyncAssertNoPendingInstalls
=
async
(
)
=
>
{
Assert
.
deepEqual
(
await
AddonManager
.
getAllInstalls
(
)
[
]
"
Expect
no
pending
install
to
be
found
"
)
;
}
;
const
promiseInstallPostponed
=
AddonTestUtils
.
promiseInstallEvent
(
"
onInstallPostponed
"
)
;
const
updateAddonVersion
=
{
BUILTIN_ADDON_VERSION
}
.
123
;
const
{
nimbusFeatureCleanup
}
=
await
setupNimbusTrainhopAddon
(
{
updateAddonVersion
}
)
;
AboutNewTab
.
onBrowserReady
(
)
;
await
promiseInstallPostponed
;
const
{
pendingInstall
}
=
await
asyncAssertNimbusTrainhopAddonStaged
(
{
updateAddonVersion
}
)
;
await
cancelPendingInstall
(
pendingInstall
)
;
await
asyncAssertNoPendingInstalls
(
)
;
const
loggerWarnSpy
=
sandbox
.
spy
(
AboutNewTabResourceMapping
.
logger
"
warn
"
)
;
await
nimbusFeatureCleanup
(
)
;
await
AboutNewTabResourceMapping
.
_updateAddonStateDeferredTask
?
.
_runningPromise
;
await
asyncAssertNoPendingInstalls
(
)
;
Assert
.
deepEqual
(
loggerWarnSpy
.
getCalls
(
)
.
map
(
spyCall
=
>
spyCall
.
args
)
[
]
"
Expect
no
warning
to
be
logged
by
updateTrainhopAddonState
when
not
enrolled
"
)
;
sandbox
.
restore
(
)
;
AboutNewTab
.
activityStream
=
null
;
const
{
AsyncShutdown
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
sys
.
mjs
"
)
;
AsyncShutdown
.
appShutdownConfirmed
.
_trigger
(
)
;
}
)
;
