"
use
strict
"
;
add_task
(
async
function
test_download_and_staged_install_trainhop_addon
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
assertNewTabResourceMapping
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
BUILTIN_LOCATION_NAME
}
)
;
assertTrainhopAddonNimbusExposure
(
{
expectedExposure
:
false
}
)
;
const
updateAddonVersion
=
{
BUILTIN_ADDON_VERSION
}
.
123
;
const
{
nimbusFeatureCleanup
}
=
await
setupNimbusTrainhopAddon
(
{
updateAddonVersion
}
)
;
assertTrainhopAddonVersionPref
(
updateAddonVersion
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
const
{
pendingInstall
}
=
await
asyncAssertNimbusTrainhopAddonStaged
(
{
updateAddonVersion
}
)
;
assertNewTabResourceMapping
(
)
;
assertTrainhopAddonNimbusExposure
(
{
expectedExposure
:
false
}
)
;
await
cancelPendingInstall
(
pendingInstall
)
;
await
nimbusFeatureCleanup
(
)
;
assertTrainhopAddonVersionPref
(
"
"
)
;
}
)
;
add_task
(
async
function
test_trainhop_addon_download_errors
(
)
{
server
.
registerPathHandler
(
"
/
data
/
invalid
-
zip
.
xpi
"
(
_request
response
)
=
>
{
response
.
write
(
"
NOT_A_VALID_XPI
"
)
;
}
)
;
const
brokenManifestXPI
=
await
AddonTestUtils
.
createTempXPIFile
(
{
"
manifest
.
json
"
:
"
not
valid
JSON
"
}
)
;
server
.
registerPathHandler
(
"
/
data
/
broken
-
manifest
.
xpi
"
(
request
response
)
=
>
{
server
.
_handler
.
_writeFileResponse
(
request
brokenManifestXPI
response
)
;
}
)
;
const
invalidManifestXPI
=
AddonTestUtils
.
createTempWebExtensionFile
(
{
manifest
:
{
version
:
{
BUILTIN_ADDON_VERSION
}
.
123
browser_specific_settings
:
{
gecko
:
{
id
:
BUILTIN_ADDON_ID
}
}
background
:
{
scripts
:
"
it
-
should
-
be
-
an
-
array
.
js
"
}
}
}
)
;
server
.
registerPathHandler
(
"
/
data
/
invalid
-
manifest
.
xpi
"
(
request
response
)
=
>
{
server
.
_handler
.
_writeFileResponse
(
request
invalidManifestXPI
response
)
;
}
)
;
const
invalidSignatureXPI
=
AddonTestUtils
.
createTempWebExtensionFile
(
{
manifest
:
{
version
:
{
BUILTIN_ADDON_VERSION
}
.
123
browser_specific_settings
:
{
gecko
:
{
id
:
BUILTIN_ADDON_ID
}
}
}
}
)
;
server
.
registerPathHandler
(
"
/
data
/
invalid
-
signature
.
xpi
"
(
request
response
)
=
>
{
server
.
_handler
.
_writeFileResponse
(
request
invalidSignatureXPI
response
)
;
}
)
;
await
ExperimentAPI
.
ready
(
)
;
await
testDownloadError
(
"
data
/
non
-
existing
.
xpi
"
)
;
await
testDownloadError
(
"
data
/
invalid
-
zip
.
xpi
"
)
;
await
testDownloadError
(
"
data
/
broken
-
manifest
.
xpi
"
)
;
await
testDownloadError
(
"
data
/
invalid
-
manifest
.
xpi
"
{
BUILTIN_ADDON_VERSION
}
.
123
)
;
const
oldUsePrivilegedSignatures
=
AddonTestUtils
.
usePrivilegedSignatures
;
AddonTestUtils
.
usePrivilegedSignatures
=
false
;
await
testDownloadError
(
"
data
/
invalid
-
signature
.
xpi
"
{
BUILTIN_ADDON_VERSION
}
.
123
AddonManager
.
STATE_CANCELLED
)
;
AddonTestUtils
.
usePrivilegedSignatures
=
oldUsePrivilegedSignatures
;
async
function
testDownloadError
(
xpi_download_path
addon_version
=
"
9999
.
0
"
expectedInstallState
=
AddonManager
.
STATE_DOWNLOAD_FAILED
)
{
Services
.
fog
.
testResetFOG
(
)
;
const
nimbusFeatureCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
TRAINHOP_NIMBUS_FEATURE_ID
value
:
{
xpi_download_path
addon_version
}
}
{
isRollout
:
true
}
)
;
const
promiseDownloadFailed
=
AddonTestUtils
.
promiseInstallEvent
(
"
onDownloadFailed
"
)
;
const
promiseDownloadEnded
=
AddonTestUtils
.
promiseInstallEvent
(
"
onDownloadEnded
"
)
;
info
(
"
Trigger
download
and
install
train
-
hop
add
-
on
version
"
)
;
const
promiseTrainhopRequest
=
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
info
(
"
Wait
for
AddonManager
onDownloadFailed
"
)
;
const
[
install
]
=
await
Promise
.
race
(
[
promiseDownloadFailed
promiseDownloadEnded
]
)
;
Assert
.
equal
(
install
.
state
expectedInstallState
Expect
install
state
to
be
{
AddonManager
.
_states
.
get
(
expectedInstallState
)
}
)
;
info
(
"
Wait
for
updateTrainhopAddonState
call
to
be
resolved
as
expected
"
)
;
await
promiseTrainhopRequest
;
Assert
.
deepEqual
(
await
AddonManager
.
getAllInstalls
(
)
[
]
"
Expect
no
pending
install
to
be
found
"
)
;
assertTrainhopAddonNimbusExposure
(
{
expectedExposure
:
false
}
)
;
await
nimbusFeatureCleanup
(
)
;
}
}
)
;
add_task
(
async
function
test_trainhop_cancel_on_version_check
(
)
{
await
testTrainhopCancelOnVersionCheck
(
{
updateAddonVersion
:
BUILTIN_ADDON_VERSION
message
:
"
Test
train
-
hop
add
-
on
version
equal
to
the
built
-
in
add
-
on
version
"
}
)
;
await
testTrainhopCancelOnVersionCheck
(
{
updateAddonVersion
:
"
140
.
0
.
1
"
message
:
"
Test
train
-
hop
add
-
on
version
lower
than
the
built
-
in
add
-
on
version
"
}
)
;
async
function
testTrainhopCancelOnVersionCheck
(
{
updateAddonVersion
message
}
)
{
Services
.
fog
.
testResetFOG
(
)
;
info
(
message
)
;
assertNewTabResourceMapping
(
)
;
assertTrainhopAddonNimbusExposure
(
{
expectedExposure
:
false
}
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
"
app
-
builtin
-
addons
"
}
)
;
const
{
nimbusFeatureCleanup
}
=
await
setupNimbusTrainhopAddon
(
{
updateAddonVersion
}
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
Assert
.
deepEqual
(
await
AddonManager
.
getAllInstalls
(
)
[
]
"
Expect
no
pending
install
to
be
found
"
)
;
info
(
"
Verify
the
built
-
in
version
is
still
the
one
installed
"
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
"
app
-
builtin
-
addons
"
version
:
BUILTIN_ADDON_VERSION
}
)
;
assertNewTabResourceMapping
(
)
;
assertTrainhopAddonNimbusExposure
(
{
expectedExposure
:
false
}
)
;
await
nimbusFeatureCleanup
(
)
;
}
}
)
;
add_task
(
async
function
test_trainhop_addon_after_browser_restart
(
)
{
assertNewTabResourceMapping
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
BUILTIN_LOCATION_NAME
}
)
;
assertTrainhopAddonVersionPref
(
"
"
)
;
const
updateAddonVersion
=
{
BUILTIN_ADDON_VERSION
}
.
123
;
const
{
nimbusFeatureCleanup
}
=
await
setupNimbusTrainhopAddon
(
{
updateAddonVersion
}
)
;
assertTrainhopAddonVersionPref
(
updateAddonVersion
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
await
asyncAssertNimbusTrainhopAddonStaged
(
{
updateAddonVersion
}
)
;
assertNewTabResourceMapping
(
)
;
info
(
"
Simulated
browser
restart
while
train
-
hop
add
-
on
is
pending
installation
"
)
;
mockAboutNewTabUninit
(
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
AboutNewTab
.
init
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
PROFILE_LOCATION_NAME
version
:
updateAddonVersion
}
)
;
const
trainhopAddonPolicy
=
WebExtensionPolicy
.
getByID
(
BUILTIN_ADDON_ID
)
;
Assert
.
equal
(
trainhopAddonPolicy
?
.
extension
?
.
version
updateAddonVersion
"
Got
newtab
WebExtensionPolicy
instance
for
the
train
-
hop
add
-
on
version
"
)
;
assertNewTabResourceMapping
(
trainhopAddonPolicy
.
extension
.
rootURI
.
spec
)
;
Assert
.
deepEqual
(
await
AddonManager
.
getAllInstalls
(
)
[
]
"
Expect
no
pending
install
to
be
found
"
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
Assert
.
deepEqual
(
await
AddonManager
.
getAllInstalls
(
)
[
]
"
Expect
no
additional
pending
install
for
the
same
train
-
hop
add
-
on
version
"
)
;
assertTrainhopAddonNimbusExposure
(
{
expectedExposure
:
true
}
)
;
assertTrainhopAddonVersionPref
(
updateAddonVersion
)
;
info
(
"
Simulate
newtabTrainhopAddon
nimbus
feature
unenrolled
"
)
;
await
nimbusFeatureCleanup
(
)
;
assertTrainhopAddonVersionPref
(
"
"
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
assertNewTabResourceMapping
(
trainhopAddonPolicy
.
extension
.
rootURI
.
spec
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
PROFILE_LOCATION_NAME
version
:
updateAddonVersion
}
)
;
info
(
"
Simulated
browser
restart
while
newtabTrainhopAddon
nimbus
feature
is
unenrolled
"
)
;
mockAboutNewTabUninit
(
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
AboutNewTab
.
init
(
)
;
assertNewTabResourceMapping
(
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
BUILTIN_LOCATION_NAME
version
:
BUILTIN_ADDON_VERSION
}
)
;
}
)
;
add_task
(
async
function
test_builtin_version_upgrades
(
)
{
assertNewTabResourceMapping
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
BUILTIN_LOCATION_NAME
version
:
BUILTIN_ADDON_VERSION
}
)
;
assertTrainhopAddonVersionPref
(
"
"
)
;
const
updateAddonVersion
=
{
BUILTIN_ADDON_VERSION
}
.
123
;
const
{
nimbusFeatureCleanup
}
=
await
setupNimbusTrainhopAddon
(
{
updateAddonVersion
}
)
;
assertTrainhopAddonVersionPref
(
updateAddonVersion
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
await
asyncAssertNimbusTrainhopAddonStaged
(
{
updateAddonVersion
}
)
;
assertNewTabResourceMapping
(
)
;
info
(
"
Simulated
browser
restart
while
train
-
hop
add
-
on
is
pending
installation
"
)
;
mockAboutNewTabUninit
(
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
AboutNewTab
.
init
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
PROFILE_LOCATION_NAME
version
:
updateAddonVersion
}
)
;
const
trainhopAddonPolicy
=
WebExtensionPolicy
.
getByID
(
BUILTIN_ADDON_ID
)
;
Assert
.
equal
(
trainhopAddonPolicy
?
.
extension
?
.
version
updateAddonVersion
"
Got
newtab
WebExtensionPolicy
instance
for
the
train
-
hop
add
-
on
version
"
)
;
assertNewTabResourceMapping
(
trainhopAddonPolicy
.
extension
.
rootURI
.
spec
)
;
info
(
"
Simulated
browser
restart
with
a
builtin
add
-
on
version
higher
than
the
train
-
hop
add
-
on
version
"
)
;
const
fakeUpdatedBuiltinVersion
=
"
9999
.
0
"
;
const
restoreBuiltinAddonsSubstitution
=
await
overrideBuiltinAddonsSubstitution
(
fakeUpdatedBuiltinVersion
)
;
mockAboutNewTabUninit
(
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
AboutNewTab
.
init
(
)
;
assertNewTabResourceMapping
(
)
;
await
AboutNewTabResourceMapping
.
updateTrainhopAddonState
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
BUILTIN_LOCATION_NAME
version
:
fakeUpdatedBuiltinVersion
}
)
;
Assert
.
deepEqual
(
await
AddonManager
.
getAllInstalls
(
)
[
]
"
Expect
no
pending
install
to
be
found
"
)
;
mockAboutNewTabUninit
(
)
;
await
restoreBuiltinAddonsSubstitution
(
)
;
await
AddonTestUtils
.
promiseRestartManager
(
)
;
AboutNewTab
.
init
(
)
;
assertNewTabResourceMapping
(
)
;
await
asyncAssertNewTabAddon
(
{
locationName
:
BUILTIN_LOCATION_NAME
version
:
BUILTIN_ADDON_VERSION
}
)
;
await
nimbusFeatureCleanup
(
)
;
async
function
overrideBuiltinAddonsSubstitution
(
updatedBuiltinVersion
)
{
const
{
ExtensionTestCommon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
sys
.
mjs
"
)
;
const
fakeBuiltinAddonsDir
=
AddonTestUtils
.
tempDir
.
clone
(
)
;
fakeBuiltinAddonsDir
.
append
(
"
builtin
-
addons
-
override
"
)
;
const
addonDir
=
fakeBuiltinAddonsDir
.
clone
(
)
;
addonDir
.
append
(
"
newtab
"
)
;
await
AddonTestUtils
.
promiseWriteFilesToDir
(
addonDir
.
path
ExtensionTestCommon
.
generateFiles
(
{
manifest
:
{
version
:
updatedBuiltinVersion
browser_specific_settings
:
{
gecko
:
{
id
:
BUILTIN_ADDON_ID
}
}
}
}
)
)
;
const
resProto
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
]
.
getService
(
Ci
.
nsIResProtocolHandler
)
;
let
defaultBuiltinAddonsSubstitution
=
resProto
.
getSubstitution
(
"
builtin
-
addons
"
)
;
resProto
.
setSubstitutionWithFlags
(
"
builtin
-
addons
"
Services
.
io
.
newFileURI
(
fakeBuiltinAddonsDir
)
Ci
.
nsISubstitutingProtocolHandler
.
ALLOW_CONTENT_ACCESS
)
;
const
mockedManifest
=
await
fetch
(
"
resource
:
/
/
builtin
-
addons
/
newtab
/
manifest
.
json
"
)
.
then
(
r
=
>
r
.
json
(
)
)
;
Assert
.
equal
(
mockedManifest
.
version
fakeUpdatedBuiltinVersion
"
Got
the
expected
manifest
version
in
the
mocked
builtin
add
-
on
manifest
"
)
;
await
overrideBuiltinsNewTabVersion
(
updatedBuiltinVersion
)
;
return
async
(
)
=
>
{
await
overrideBuiltinsNewTabVersion
(
BUILTIN_ADDON_VERSION
)
;
resProto
.
setSubstitutionWithFlags
(
"
builtin
-
addons
"
defaultBuiltinAddonsSubstitution
Ci
.
nsISubstitutingProtocolHandler
.
ALLOW_CONTENT_ACCESS
)
;
fakeBuiltinAddonsDir
.
remove
(
true
)
;
}
;
}
async
function
overrideBuiltinsNewTabVersion
(
addon_version
)
{
const
builtinsConfig
=
await
fetch
(
"
chrome
:
/
/
browser
/
content
/
built_in_addons
.
json
"
)
.
then
(
res
=
>
res
.
json
(
)
)
;
await
AddonTestUtils
.
overrideBuiltIns
(
{
system
:
[
]
builtins
:
builtinsConfig
.
builtins
.
filter
(
entry
=
>
entry
.
addon_id
=
=
=
BUILTIN_ADDON_ID
)
.
map
(
entry
=
>
{
entry
.
addon_version
=
addon_version
;
return
entry
;
}
)
}
)
;
}
}
)
;
