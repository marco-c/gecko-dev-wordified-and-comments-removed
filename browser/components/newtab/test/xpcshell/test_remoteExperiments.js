const
{
CFRMessageProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
CFRMessageProvider
.
jsm
"
)
;
add_task
(
async
function
test_multiMessageTreatment
(
)
{
const
{
experimentValidator
}
=
await
makeValidators
(
)
;
let
messages
=
await
CFRMessageProvider
.
getMessages
(
)
;
let
featureValue
=
{
template
:
"
multi
"
messages
}
;
assertValidates
(
experimentValidator
featureValue
Multi
-
message
treatment
validates
as
MessagingExperiment
)
;
for
(
const
message
of
messages
)
{
assertValidates
(
experimentValidator
message
Message
{
message
.
id
}
validates
as
MessagingExperiment
)
;
}
messages
.
push
(
{
id
:
"
INVALID_MESSAGE
"
template
:
"
cfr_doorhanger
"
}
)
;
const
result
=
experimentValidator
.
validate
(
featureValue
)
;
Assert
.
ok
(
!
(
result
.
valid
&
&
result
.
errors
.
length
=
=
=
0
)
"
Multi
-
message
treatment
with
invalid
message
fails
validation
"
)
;
}
)
;
