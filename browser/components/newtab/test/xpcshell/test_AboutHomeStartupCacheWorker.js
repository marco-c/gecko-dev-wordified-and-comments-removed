"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
SearchTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
sys
.
mjs
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
SearchTestUtils
.
init
(
this
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
const
{
AboutNewTab
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
)
;
const
{
PREFS_CONFIG
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStream
.
jsm
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
BasePromiseWorker
:
"
resource
:
/
/
gre
/
modules
/
PromiseWorker
.
sys
.
mjs
"
}
)
;
const
CACHE_WORKER_URL
=
"
resource
:
/
/
activity
-
stream
/
lib
/
cache
-
worker
.
js
"
;
const
NEWTAB_RENDER_URL
=
"
resource
:
/
/
activity
-
stream
/
data
/
content
/
newtab
-
render
.
js
"
;
add_setup
(
async
function
(
)
{
do_get_profile
(
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
let
server
=
AddonTestUtils
.
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
server
.
registerDirectory
(
"
/
"
do_get_cwd
(
)
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
section
.
topstories
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topstories
"
true
)
;
let
defaultDSConfig
=
JSON
.
parse
(
PREFS_CONFIG
.
get
(
"
discoverystream
.
config
"
)
.
getValue
(
{
geo
:
"
US
"
locale
:
"
en
-
US
"
}
)
)
;
let
newConfig
=
Object
.
assign
(
defaultDSConfig
{
show_spocs
:
false
hardcoded_layout
:
false
layout_endpoint
:
"
http
:
/
/
example
.
com
/
ds_layout
.
json
"
}
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
config
"
JSON
.
stringify
(
newConfig
)
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
endpoints
"
http
:
/
/
example
.
com
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
.
structuredIngestion
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
ping
-
centre
.
telemetry
"
false
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
Test
engine
"
keyword
:
"
testengine
"
search_url_get_params
:
"
s
=
{
searchTerms
}
"
}
{
setAsDefault
:
true
}
)
;
AboutNewTab
.
init
(
)
;
AboutNewTab
.
onBrowserReady
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
feed
=
AboutNewTab
.
activityStream
.
store
.
feeds
.
get
(
"
feeds
.
discoverystreamfeed
"
)
;
return
feed
?
.
loaded
;
}
)
;
}
)
;
add_task
(
async
function
test_cache_worker
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
allow_parent_unrestricted_js_loads
"
)
;
}
)
;
let
state
=
AboutNewTab
.
activityStream
.
store
.
getState
(
)
;
let
cacheWorker
=
new
BasePromiseWorker
(
CACHE_WORKER_URL
)
;
let
{
page
script
}
=
await
cacheWorker
.
post
(
"
construct
"
[
state
]
)
;
ok
(
!
!
page
.
length
"
Got
page
content
"
)
;
ok
(
!
!
script
.
length
"
Got
script
content
"
)
;
equal
(
page
.
indexOf
(
"
{
{
MARKUP
}
}
"
)
-
1
"
Page
template
should
have
{
{
MARKUP
}
}
replaced
"
)
;
equal
(
page
.
indexOf
(
"
{
{
CACHE_TIME
}
}
"
)
-
1
"
Page
template
should
have
{
{
CACHE_TIME
}
}
replaced
"
)
;
equal
(
script
.
indexOf
(
"
{
{
STATE
}
}
"
)
-
1
"
Script
template
should
have
{
{
STATE
}
}
replaced
"
)
;
let
sandbox
=
Cu
.
Sandbox
(
Cu
.
getGlobalForObject
(
{
}
)
)
;
let
passedState
=
null
;
sandbox
.
window
=
{
NewtabRenderUtils
:
{
renderCache
(
aState
)
{
passedState
=
aState
;
}
}
}
;
Cu
.
evalInSandbox
(
script
sandbox
)
;
Services
.
scriptloader
.
loadSubScript
(
NEWTAB_RENDER_URL
sandbox
)
;
equal
(
sandbox
.
window
.
__FROM_STARTUP_CACHE__
true
"
Should
have
set
__FROM_STARTUP_CACHE__
to
true
"
)
;
state
.
App
.
isForStartupCache
=
true
;
state
=
JSON
.
parse
(
JSON
.
stringify
(
state
)
)
;
Assert
.
deepEqual
(
passedState
state
"
Should
have
called
renderCache
with
the
expected
state
"
)
;
let
parser
=
new
DOMParser
(
)
;
let
doc
=
parser
.
parseFromString
(
page
"
text
/
html
"
)
;
let
root
=
doc
.
getElementById
(
"
root
"
)
;
ok
(
root
.
childElementCount
"
There
are
children
on
the
root
node
"
)
;
equal
(
Array
.
from
(
root
.
querySelectorAll
(
"
.
ds
-
card
"
)
)
.
length
3
"
There
are
3
DSCards
"
)
;
let
cardHostname
=
doc
.
querySelector
(
"
[
data
-
section
-
id
=
'
topstories
'
]
.
source
"
)
.
innerText
;
equal
(
cardHostname
"
bbc
.
com
"
"
Card
hostname
is
bbc
.
com
"
)
;
let
placeholders
=
doc
.
querySelectorAll
(
"
.
ds
-
card
.
placeholder
"
)
;
equal
(
placeholders
.
length
2
"
There
should
be
2
placeholders
"
)
;
}
)
;
add_task
(
async
function
test_cache_worker_exception
(
)
{
let
cacheWorker
=
new
BasePromiseWorker
(
CACHE_WORKER_URL
)
;
let
{
page
script
}
=
await
cacheWorker
.
post
(
"
construct
"
[
null
]
)
;
equal
(
page
null
"
Should
have
gotten
a
null
page
nsIInputStream
"
)
;
equal
(
script
null
"
Should
have
gotten
a
null
script
nsIInputStream
"
)
;
}
)
;
