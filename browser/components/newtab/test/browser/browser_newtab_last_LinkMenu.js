"
use
strict
"
;
async
function
setupPrefs
(
)
{
sinon
.
stub
(
DiscoveryStreamFeed
.
prototype
"
generateFeedUrl
"
)
.
returns
(
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
newtab
/
test
/
browser
/
topstories
.
json
"
)
;
await
setDefaultTopSites
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
config
"
JSON
.
stringify
(
{
api_key_pref
:
"
extensions
.
pocket
.
oAuthConsumerKey
"
collapsible
:
true
enabled
:
true
personalized
:
false
}
)
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
endpoints
"
"
https
:
/
/
example
.
com
"
]
]
}
)
;
}
async
function
resetPrefs
(
)
{
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
let
initialHeight
;
let
initialWidth
;
function
setSize
(
width
height
)
{
initialHeight
=
window
.
innerHeight
;
initialWidth
=
window
.
innerWidth
;
let
resizePromise
=
BrowserTestUtils
.
waitForEvent
(
window
"
resize
"
false
)
;
window
.
resizeTo
(
width
height
)
;
return
resizePromise
;
}
function
resetSize
(
)
{
let
resizePromise
=
BrowserTestUtils
.
waitForEvent
(
window
"
resize
"
false
)
;
window
.
resizeTo
(
initialWidth
initialHeight
)
;
return
resizePromise
;
}
add_task
(
async
function
test_newtab_last_LinkMenu
(
)
{
await
setupPrefs
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
newtab
"
false
)
;
let
browser
=
tab
.
linkedBrowser
;
await
waitForPreloaded
(
browser
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
content
.
document
.
getElementById
(
"
root
"
)
.
children
.
length
)
"
Should
render
activity
stream
content
"
)
;
await
setSize
(
600
450
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
.
top
-
site
-
outer
:
nth
-
child
(
2n
)
.
context
-
menu
-
button
"
)
"
Wait
for
the
Pocket
card
and
button
"
)
;
const
topsiteOuter
=
content
.
document
.
querySelector
(
"
.
top
-
site
-
outer
:
nth
-
child
(
2n
)
"
)
;
const
topsiteContextMenuButton
=
topsiteOuter
.
querySelector
(
"
.
context
-
menu
-
button
"
)
;
topsiteContextMenuButton
.
click
(
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
topsiteOuter
.
classList
.
contains
(
"
active
"
)
"
Wait
for
the
menu
to
be
active
"
)
;
is
(
content
.
window
.
scrollMaxX
0
"
there
should
be
no
horizontal
scroll
bar
"
)
;
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
.
ds
-
card
:
nth
-
child
(
1n
)
.
context
-
menu
-
button
"
)
"
Wait
for
the
Pocket
card
and
button
"
)
;
const
dsCard
=
content
.
document
.
querySelector
(
"
.
ds
-
card
:
nth
-
child
(
1n
)
"
)
;
const
dsCarContextMenuButton
=
dsCard
.
querySelector
(
"
.
context
-
menu
-
button
"
)
;
dsCarContextMenuButton
.
click
(
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
dsCard
.
classList
.
contains
(
"
active
"
)
"
Wait
for
the
menu
to
be
active
"
)
;
is
(
content
.
window
.
scrollMaxX
0
"
there
should
be
no
horizontal
scroll
bar
"
)
;
}
)
;
await
resetSize
(
)
;
await
resetPrefs
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
sinon
.
restore
(
)
;
}
)
;
