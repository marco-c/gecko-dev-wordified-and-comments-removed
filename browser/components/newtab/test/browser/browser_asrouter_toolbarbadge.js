const
{
OnboardingMessageProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
OnboardingMessageProvider
.
jsm
"
)
;
const
{
ToolbarBadgeHub
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ToolbarBadgeHub
.
jsm
"
)
;
add_task
(
async
function
test_setup
(
)
{
registerCleanupFunction
(
(
)
=
>
{
if
(
PanelUI
.
protonAppMenuEnabled
)
{
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
}
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
toolbar
.
accessed
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_fxa_badge_shown_nodelay
(
)
{
const
[
msg
]
=
(
await
OnboardingMessageProvider
.
getMessages
(
)
)
.
filter
(
(
{
id
}
)
=
>
id
=
=
=
"
FXA_ACCOUNTS_BADGE
"
)
;
Assert
.
ok
(
msg
"
FxA
test
message
exists
"
)
;
msg
.
content
.
delay
=
undefined
;
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
fxaButton
=
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
;
fxaButton
.
click
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Initially
element
is
not
badged
"
)
;
ToolbarBadgeHub
.
registerBadgeNotificationListener
(
msg
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Wait
for
element
to
be
badged
"
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Wait
for
element
to
be
badged
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
fxaButton
=
document
.
getElementById
(
msg
.
content
.
target
)
;
fxaButton
.
click
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Button
should
no
longer
be
badged
"
)
;
}
)
;
add_task
(
async
function
test_fxa_badge_shown_withdelay
(
)
{
const
[
msg
]
=
(
await
OnboardingMessageProvider
.
getMessages
(
)
)
.
filter
(
(
{
id
}
)
=
>
id
=
=
=
"
FXA_ACCOUNTS_BADGE
"
)
;
Assert
.
ok
(
msg
"
FxA
test
message
exists
"
)
;
msg
.
content
.
delay
=
1
;
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
fxaButton
=
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
;
fxaButton
.
click
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Initially
element
is
not
badged
"
)
;
ToolbarBadgeHub
.
registerBadgeNotificationListener
(
msg
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Wait
for
element
to
be
badged
"
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Wait
for
element
to
be
badged
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
fxaButton
=
document
.
getElementById
(
msg
.
content
.
target
)
;
fxaButton
.
click
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
browserWindow
.
document
.
getElementById
(
msg
.
content
.
target
)
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
.
classList
.
contains
(
"
feature
-
callout
"
)
"
Button
should
no
longer
be
badged
"
)
;
}
)
;
