const
{
PanelTestProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
PanelTestProvider
.
jsm
"
)
;
const
{
MomentsPageHub
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
MomentsPageHub
.
jsm
"
)
;
const
{
RemoteSettings
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
)
;
const
{
ASRouter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouter
.
jsm
"
)
;
const
HOMEPAGE_OVERRIDE_PREF
=
"
browser
.
startup
.
homepage_override
.
once
"
;
add_task
(
async
function
test_with_rs_messages
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
providers
.
whats
-
new
-
panel
"
{
"
id
"
:
"
cfr
"
"
enabled
"
:
true
"
type
"
:
"
remote
-
settings
"
"
bucket
"
:
"
cfr
"
"
updateCycleInMs
"
:
0
}
]
]
}
)
;
const
[
msg
]
=
(
await
PanelTestProvider
.
getMessages
(
)
)
.
filter
(
(
{
template
}
)
=
>
template
=
=
=
"
update_action
"
)
;
const
initialMessageCount
=
ASRouter
.
state
.
messages
.
length
;
const
client
=
RemoteSettings
(
"
cfr
"
)
;
await
client
.
db
.
importChanges
(
{
}
Date
.
now
(
)
[
{
.
.
.
msg
id
:
MOMENTS_MOCHITEST_
{
Date
.
now
(
)
}
targeting
:
"
true
"
}
]
{
clear
:
true
}
)
;
await
ASRouter
.
_updateMessageProviders
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
async
(
)
=
>
{
await
ASRouter
.
loadMessagesFromAllProviders
(
)
;
return
ASRouter
.
state
.
messages
.
length
>
initialMessageCount
;
}
"
Messages
did
not
load
"
)
;
await
MomentsPageHub
.
messageRequest
(
{
triggerId
:
"
momentsUpdate
"
template
:
"
update_action
"
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
Services
.
prefs
.
getStringPref
(
HOMEPAGE_OVERRIDE_PREF
"
"
)
.
length
;
}
"
Pref
value
was
not
set
"
)
;
let
value
=
Services
.
prefs
.
getStringPref
(
HOMEPAGE_OVERRIDE_PREF
"
"
)
;
is
(
JSON
.
parse
(
value
)
.
url
msg
.
content
.
action
.
data
.
url
"
Correct
value
set
"
)
;
msg
.
content
.
action
.
data
.
url
=
"
https
:
/
/
www
.
mozilla
.
org
/
#
mochitest
"
;
await
client
.
db
.
create
(
{
.
.
.
msg
id
:
MOMENTS_MOCHITEST_
{
Date
.
now
(
)
}
priority
:
2
targeting
:
"
true
"
}
)
;
Services
.
prefs
.
clearUserPref
(
HOMEPAGE_OVERRIDE_PREF
)
;
let
prevLength
=
ASRouter
.
state
.
messages
.
length
;
await
BrowserTestUtils
.
waitForCondition
(
async
(
)
=
>
{
await
ASRouter
.
loadMessagesFromAllProviders
(
)
;
return
ASRouter
.
state
.
messages
.
length
>
prevLength
;
}
"
Messages
did
not
load
"
)
;
await
MomentsPageHub
.
messageRequest
(
{
triggerId
:
"
momentsUpdate
"
template
:
"
update_action
"
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
Services
.
prefs
.
getStringPref
(
HOMEPAGE_OVERRIDE_PREF
"
"
)
.
length
;
}
"
Pref
value
was
not
set
"
)
;
value
=
Services
.
prefs
.
getStringPref
(
HOMEPAGE_OVERRIDE_PREF
"
"
)
;
is
(
JSON
.
parse
(
value
)
.
url
msg
.
content
.
action
.
data
.
url
"
Correct
value
set
for
higher
priority
message
"
)
;
await
client
.
db
.
clear
(
)
;
const
previousMessageCount
=
ASRouter
.
state
.
messages
.
length
;
await
BrowserTestUtils
.
waitForCondition
(
async
(
)
=
>
{
await
ASRouter
.
loadMessagesFromAllProviders
(
)
;
return
ASRouter
.
state
.
messages
.
length
<
previousMessageCount
;
}
"
ASRouter
messages
should
have
been
removed
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
ASRouter
.
_updateMessageProviders
(
)
;
}
)
;
