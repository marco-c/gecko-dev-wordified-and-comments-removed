"
use
strict
"
;
add_task
(
async
function
test_process_crash
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
home
"
async
browser
=
>
{
await
simulateRestart
(
browser
)
;
let
origProcManager
=
AboutHomeStartupCache
.
_procManager
;
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
Assert
.
notEqual
(
origProcManager
AboutHomeStartupCache
.
_procManager
"
Should
have
dropped
the
reference
to
the
crashed
process
"
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
home
"
async
browser
=
>
{
await
ensureDynamicAboutHome
(
browser
AboutHomeStartupCache
.
CACHE_RESULT_SCALARS
.
VALID_AND_USED
)
;
await
simulateRestart
(
browser
)
;
}
)
;
let
latestProcManager
=
AboutHomeStartupCache
.
_procManager
;
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
"
async
browser
=
>
{
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
Assert
.
equal
(
latestProcManager
AboutHomeStartupCache
.
_procManager
"
Should
still
have
the
reference
to
the
privileged
about
process
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_process_crash_while_requesting_streams
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
home
"
async
browser
=
>
{
await
simulateRestart
(
browser
)
;
let
cacheStreamsPromise
=
AboutHomeStartupCache
.
requestCache
(
)
;
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
let
cacheStreams
=
await
cacheStreamsPromise
;
if
(
!
cacheStreams
.
pageInputStream
&
&
!
cacheStreams
.
scriptInputStream
)
{
Assert
.
ok
(
true
"
Page
and
script
input
streams
are
null
.
"
)
;
}
else
{
info
(
"
Received
the
streams
.
Checking
that
they
'
re
readable
.
"
)
;
Assert
.
ok
(
cacheStreams
.
pageInputStream
.
available
(
)
"
Bytes
available
for
page
stream
"
)
;
Assert
.
ok
(
cacheStreams
.
scriptInputStream
.
available
(
)
"
Bytes
available
for
script
stream
"
)
;
}
}
)
;
}
)
;
