"
use
strict
"
;
let
{
AboutHomeStartupCache
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
BrowserGlue
.
jsm
"
)
;
{
const
{
PREFS_CONFIG
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStream
.
jsm
"
)
;
let
defaultDSConfig
=
JSON
.
parse
(
PREFS_CONFIG
.
get
(
"
discoverystream
.
config
"
)
.
getValue
(
{
geo
:
"
US
"
locale
:
"
en
-
US
"
}
)
)
;
let
newConfig
=
Object
.
assign
(
defaultDSConfig
{
show_spocs
:
false
hardcoded_layout
:
false
layout_endpoint
:
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
newtab
/
test
/
browser
/
ds_layout
.
json
"
}
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
config
"
JSON
.
stringify
(
newConfig
)
)
;
}
async
function
simulateRestart
(
browser
{
withAutoShutdownWrite
ensureCacheWinsRace
expectTimeout
}
=
{
withAutoShutdownWrite
:
true
ensureCacheWinsRace
:
true
expectTimeout
:
false
}
)
{
info
(
"
Simulating
restart
of
the
browser
"
)
;
if
(
browser
.
remoteType
!
=
=
E10SUtils
.
PRIVILEGEDABOUT_REMOTE_TYPE
)
{
throw
new
Error
(
"
prepareLoadFromCache
should
only
be
called
on
a
browser
"
+
"
loaded
in
the
privileged
about
content
process
.
"
)
;
}
if
(
withAutoShutdownWrite
&
&
AboutHomeStartupCache
.
initted
)
{
info
(
"
Simulating
shutdown
write
"
)
;
let
timedOut
=
!
(
await
AboutHomeStartupCache
.
onShutdown
(
expectTimeout
)
)
;
if
(
timedOut
&
&
!
expectTimeout
)
{
Assert
.
ok
(
false
"
AboutHomeStartupCache
shutdown
unexpectedly
timed
out
.
"
)
;
}
else
if
(
!
timedOut
&
&
expectTimeout
)
{
Assert
.
ok
(
false
"
AboutHomeStartupCache
shutdown
failed
to
time
out
.
"
)
;
}
info
(
"
Shutdown
write
done
"
)
;
}
else
{
info
(
"
Intentionally
skipping
shutdown
write
"
)
;
}
AboutHomeStartupCache
.
uninit
(
)
;
info
(
"
Waiting
for
AboutHomeStartupCacheChild
to
uninit
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
{
AboutHomeStartupCacheChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
AboutNewTabService
.
jsm
"
)
;
AboutHomeStartupCacheChild
.
uninit
(
)
;
}
)
;
info
(
"
AboutHomeStartupCacheChild
uninitted
"
)
;
AboutHomeStartupCache
.
init
(
)
;
if
(
AboutHomeStartupCache
.
initted
)
{
let
processManager
=
browser
.
messageManager
.
processMessageManager
;
let
pp
=
browser
.
browsingContext
.
currentWindowGlobal
.
domProcess
;
let
{
childID
}
=
pp
;
AboutHomeStartupCache
.
onContentProcessCreated
(
childID
processManager
pp
)
;
info
(
"
Waiting
for
AboutHomeStartupCache
cache
entry
"
)
;
await
AboutHomeStartupCache
.
ensureCacheEntry
(
)
;
info
(
"
Got
AboutHomeStartupCache
cache
entry
"
)
;
if
(
ensureCacheWinsRace
)
{
info
(
"
Ensuring
cache
bytes
are
available
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
{
AboutHomeStartupCacheChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
AboutNewTabService
.
jsm
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
let
pageStream
=
AboutHomeStartupCacheChild
.
_pageInputStream
;
let
scriptStream
=
AboutHomeStartupCacheChild
.
_scriptInputStream
;
return
(
pageStream
&
&
pageStream
.
available
(
)
&
&
scriptStream
&
&
scriptStream
.
available
(
)
)
;
}
)
;
}
)
;
}
}
info
(
"
Waiting
for
about
:
home
to
load
"
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
home
"
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
home
"
)
;
await
loaded
;
info
(
"
about
:
home
loaded
"
)
;
}
async
function
injectIntoCache
(
page
script
)
{
if
(
!
page
|
|
!
script
)
{
throw
new
Error
(
"
Cannot
injectIntoCache
with
falsey
values
"
)
;
}
if
(
!
page
.
includes
(
id
=
"
root
"
)
)
{
throw
new
Error
(
"
Page
markup
must
include
a
root
node
.
"
)
;
}
await
AboutHomeStartupCache
.
ensureCacheEntry
(
)
;
let
pageInputStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
pageInputStream
.
setUTF8Data
(
page
)
;
let
scriptInputStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
scriptInputStream
.
setUTF8Data
(
script
)
;
await
AboutHomeStartupCache
.
populateCache
(
pageInputStream
scriptInputStream
)
;
}
async
function
clearCache
(
)
{
info
(
"
Test
is
clearing
the
cache
"
)
;
AboutHomeStartupCache
.
clearCache
(
)
;
await
AboutHomeStartupCache
.
ensureCacheEntry
(
)
;
info
(
"
Test
has
cleared
the
cache
.
"
)
;
}
function
assertCacheResultScalar
(
cacheResultScalar
)
{
let
parentScalars
=
Services
.
telemetry
.
getSnapshotForScalars
(
"
main
"
)
.
parent
;
Assert
.
equal
(
parentScalars
[
"
browser
.
startup
.
abouthome_cache_result
"
]
cacheResultScalar
"
Expected
the
right
value
set
to
browser
.
startup
.
abouthome_cache_result
"
+
"
scalar
.
"
)
;
}
async
function
ensureCachedAboutHome
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
scripts
=
Array
.
from
(
content
.
document
.
querySelectorAll
(
"
script
"
)
)
;
Assert
.
ok
(
!
!
scripts
.
length
"
There
should
be
page
scripts
.
"
)
;
let
[
lastScript
]
=
scripts
.
reverse
(
)
;
Assert
.
equal
(
lastScript
.
src
"
about
:
home
?
jscache
"
"
Found
about
:
home
?
jscache
script
tag
indicating
the
cached
doc
"
)
;
Assert
.
ok
(
Cu
.
waiveXrays
(
content
)
.
__FROM_STARTUP_CACHE__
"
Should
have
found
window
.
__FROM_STARTUP_CACHE__
"
)
;
Assert
.
ok
(
content
.
document
.
body
.
classList
.
contains
(
"
activity
-
stream
"
)
"
Should
have
found
activity
-
stream
class
on
<
body
>
element
"
)
;
Assert
.
ok
(
content
.
document
.
querySelector
(
"
[
data
-
section
-
id
=
'
topsites
'
]
"
)
"
Should
have
found
the
Discovery
Stream
top
sites
.
"
)
;
}
)
;
assertCacheResultScalar
(
AboutHomeStartupCache
.
CACHE_RESULT_SCALARS
.
VALID_AND_USED
)
;
}
async
function
ensureDynamicAboutHome
(
browser
expectedResultScalar
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
scripts
=
Array
.
from
(
content
.
document
.
querySelectorAll
(
"
script
"
)
)
;
Assert
.
equal
(
scripts
.
length
0
"
There
should
be
no
page
scripts
.
"
)
;
Assert
.
equal
(
Cu
.
waiveXrays
(
content
)
.
__FROM_STARTUP_CACHE__
undefined
"
Should
not
have
found
window
.
__FROM_STARTUP_CACHE__
"
)
;
Assert
.
ok
(
content
.
document
.
body
.
classList
.
contains
(
"
activity
-
stream
"
)
"
Should
have
found
activity
-
stream
class
on
<
body
>
element
"
)
;
Assert
.
ok
(
content
.
document
.
querySelector
(
"
[
data
-
section
-
id
=
'
topsites
'
]
"
)
"
Should
have
found
the
Discovery
Stream
top
sites
.
"
)
;
}
)
;
assertCacheResultScalar
(
expectedResultScalar
)
;
}
