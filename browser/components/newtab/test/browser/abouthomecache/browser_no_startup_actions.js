"
use
strict
"
;
add_task
(
async
function
test_no_startup_actions
(
)
{
await
withFullyLoadedAboutHome
(
async
browser
=
>
{
await
simulateRestart
(
browser
)
;
await
clearCache
(
)
;
await
simulateRestart
(
browser
)
;
await
ensureCachedAboutHome
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
xrayWindow
=
ChromeUtils
.
waiveXrays
(
content
)
;
xrayWindow
.
nonStartupActions
=
[
]
;
xrayWindow
.
startupActions
=
[
]
;
xrayWindow
.
RPMAddMessageListener
(
"
ActivityStream
:
MainToContent
"
msg
=
>
{
if
(
msg
.
data
.
meta
.
isStartup
)
{
xrayWindow
.
startupActions
.
push
(
msg
.
data
)
;
}
else
{
xrayWindow
.
nonStartupActions
.
push
(
msg
.
data
)
;
}
}
)
;
}
)
;
AboutNewTab
.
activityStream
.
uninit
(
)
;
AboutNewTab
.
onBrowserReady
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
feed
=
AboutNewTab
.
activityStream
.
store
.
feeds
.
get
(
"
feeds
.
discoverystreamfeed
"
)
;
return
feed
?
.
loaded
;
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
2000
)
)
;
let
[
startupActions
nonStartupActions
]
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
xrayWindow
=
ChromeUtils
.
waiveXrays
(
content
)
;
return
[
xrayWindow
.
startupActions
xrayWindow
.
nonStartupActions
]
;
}
)
;
Assert
.
ok
(
!
!
startupActions
.
length
"
Should
have
seen
startup
actions
.
"
)
;
info
(
Saw
{
startupActions
.
length
}
startup
actions
.
)
;
Assert
.
equal
(
nonStartupActions
.
length
2
"
Should
be
no
non
-
ads
non
-
startup
actions
.
"
)
;
Assert
.
equal
(
nonStartupActions
[
0
]
.
type
"
DISCOVERY_STREAM_SPOCS_UPDATE
"
"
Should
be
a
single
DISCOVERY_STREAM_SPOCS_UPDATE
action
"
)
;
Assert
.
equal
(
nonStartupActions
[
1
]
.
type
"
TOP_SITES_UPDATED
"
"
Should
be
a
single
TOP_SITES_UPDATED
action
"
)
;
if
(
nonStartupActions
.
length
)
{
for
(
let
action
of
nonStartupActions
)
{
info
(
Non
-
startup
action
:
{
action
.
type
}
)
;
}
}
}
)
;
}
)
;
