"
use
strict
"
;
const
{
SponsorProtection
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
browser
/
components
/
newtab
/
SponsorProtection
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_no_measure_when_unprotected
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
browser
=
>
{
Assert
.
ok
(
!
SponsorProtection
.
isProtectedBrowser
(
browser
)
"
Browser
does
not
have
protection
applied
.
"
)
;
Assert
.
equal
(
Glean
.
newtab
.
sponsNavTrafficSent
.
testGetValue
(
)
null
"
Should
not
have
recorded
any
sent
traffic
"
)
;
Assert
.
equal
(
Glean
.
newtab
.
sponsNavTrafficRecvd
.
testGetValue
(
)
null
"
Should
not
have
recorded
any
received
traffic
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_measure_when_protected
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
browser
=
>
{
Assert
.
ok
(
!
SponsorProtection
.
isProtectedBrowser
(
browser
)
"
Browser
does
not
have
protection
applied
yet
.
"
)
;
SponsorProtection
.
addProtectedBrowser
(
browser
)
;
Assert
.
ok
(
SponsorProtection
.
isProtectedBrowser
(
browser
)
"
Browser
now
has
sponsor
protection
applied
.
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
await
content
.
fetch
(
"
/
"
{
method
:
"
POST
"
body
:
JSON
.
stringify
(
{
here
:
"
are
some
bytes
"
}
)
}
)
;
}
)
;
const
originalSentTraffic
=
Glean
.
newtab
.
sponsNavTrafficSent
.
testGetValue
(
)
.
sum
;
Assert
.
greater
(
originalSentTraffic
0
"
Should
have
recorded
some
sent
traffic
"
)
;
const
originalReceivedTraffic
=
Glean
.
newtab
.
sponsNavTrafficRecvd
.
testGetValue
(
)
.
sum
;
Assert
.
greater
(
originalReceivedTraffic
0
"
Should
have
recorded
some
received
traffic
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
await
content
.
fetch
(
"
/
"
{
method
:
"
POST
"
body
:
JSON
.
stringify
(
{
here
:
"
I
go
sending
bytes
again
"
}
)
}
)
;
}
)
;
const
secondSentTraffic
=
Glean
.
newtab
.
sponsNavTrafficSent
.
testGetValue
(
)
.
sum
;
Assert
.
greater
(
secondSentTraffic
originalSentTraffic
"
Should
have
recorded
some
more
sent
traffic
"
)
;
const
secondReceivedTraffic
=
Glean
.
newtab
.
sponsNavTrafficRecvd
.
testGetValue
(
)
.
sum
;
Assert
.
greater
(
secondReceivedTraffic
originalReceivedTraffic
"
Should
have
recorded
some
more
received
traffic
"
)
;
SponsorProtection
.
removeProtectedBrowser
(
browser
)
;
Assert
.
ok
(
!
SponsorProtection
.
isProtectedBrowser
(
browser
)
"
Browser
does
not
have
protection
applied
anymore
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
await
content
.
fetch
(
"
/
"
{
method
:
"
POST
"
body
:
JSON
.
stringify
(
{
here
:
"
are
some
more
bytes
!
"
}
)
}
)
;
}
)
;
Assert
.
equal
(
Glean
.
newtab
.
sponsNavTrafficSent
.
testGetValue
(
)
.
sum
secondSentTraffic
"
Should
not
have
recorded
any
additional
sent
traffic
"
)
;
Assert
.
equal
(
Glean
.
newtab
.
sponsNavTrafficRecvd
.
testGetValue
(
)
.
sum
secondReceivedTraffic
"
Should
not
have
recorded
any
additional
received
traffic
"
)
;
}
)
;
}
)
;
