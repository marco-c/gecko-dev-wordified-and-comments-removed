"
use
strict
"
;
const
{
AboutWelcomeParent
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
actors
/
AboutWelcomeParent
.
sys
.
mjs
"
)
;
const
TEST_PROTON_CONTENT
=
[
{
id
:
"
AW_PIN_FIREFOX_STEP1
"
content
:
{
position
:
"
corner
"
title
:
"
Step
1
"
primary_button
:
{
label
:
"
Pin
Firefox
"
action
:
{
navigate
:
true
}
}
has_noodles
:
true
}
}
{
id
:
"
AW_SET_DEFAULT_STEP2
"
content
:
{
title
:
"
Step
2
"
primary_button
:
{
label
:
"
Set
Default
"
action
:
{
navigate
:
true
}
}
secondary_button
:
{
label
:
"
Next
"
action
:
{
navigate
:
true
}
}
has_noodles
:
true
}
}
]
;
const
TEST_PROTON_JSON
=
JSON
.
stringify
(
TEST_PROTON_CONTENT
)
;
async
function
openAboutWelcome
(
)
{
await
setAboutWelcomePref
(
true
)
;
await
setAboutWelcomeMultiStage
(
TEST_PROTON_JSON
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
welcome
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
return
tab
.
linkedBrowser
;
}
add_task
(
async
function
test_AWMultistage_RemovePinScreen
(
)
{
await
pushPrefs
(
[
"
browser
.
shell
.
checkDefaultBrowser
"
true
]
)
;
const
sandbox
=
sinon
.
createSandbox
(
)
;
const
pinStub
=
sandbox
.
stub
(
AboutWelcomeParent
"
doesAppNeedPin
"
)
.
returns
(
true
)
;
sandbox
.
stub
(
AboutWelcomeParent
"
isDefaultBrowser
"
)
.
returns
(
false
)
;
let
browser
=
await
openAboutWelcome
(
)
;
let
aboutWelcomeActor
=
await
getAboutWelcomeParent
(
browser
)
;
sandbox
.
spy
(
aboutWelcomeActor
"
onContentMessage
"
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
await
onButtonClick
(
browser
"
button
.
primary
"
)
;
pinStub
.
returns
(
false
)
;
await
test_screen_content
(
browser
"
multistage
step
2
"
[
"
main
.
AW_SET_DEFAULT_STEP2
"
]
[
"
main
.
AW_PIN_FIREFOX_STEP1
"
]
)
;
await
onButtonClick
(
browser
"
button
.
secondary
"
)
;
const
{
callCount
}
=
aboutWelcomeActor
.
onContentMessage
;
ok
(
callCount
>
=
2
{
callCount
}
Stub
called
twice
to
handle
click
action
and
Telemetry
)
;
for
(
let
i
=
0
;
i
<
callCount
;
i
+
+
)
{
const
call
=
aboutWelcomeActor
.
onContentMessage
.
getCall
(
i
)
;
info
(
Call
#
{
i
}
:
{
call
.
args
[
0
]
}
{
JSON
.
stringify
(
call
.
args
[
1
]
)
}
)
;
}
await
test_screen_content
(
browser
"
home
"
[
"
body
.
activity
-
stream
"
]
[
"
div
.
onboardingContainer
"
]
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
browser
.
canGoBack
)
;
browser
.
goBack
(
)
;
await
test_screen_content
(
browser
"
multistage
proton
step
1
"
[
"
main
.
AW_ONLY_DEFAULT
"
]
[
"
main
.
AW_PIN_FIREFOX_STEP1
"
]
)
;
await
test_element_styles
(
browser
"
nav
.
steps
"
{
display
:
"
none
"
}
)
;
}
)
;
