const
{
CFRPageActions
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
CFRPageActions
.
jsm
"
{
}
)
;
const
{
ASRouterTriggerListeners
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterTriggerListeners
.
jsm
"
{
}
)
;
const
{
ASRouter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouter
.
jsm
"
{
}
)
;
function
trigger_cfr_panel
(
browser
trigger
action
=
{
type
:
"
FOO
"
}
)
{
return
CFRPageActions
.
addRecommendation
(
browser
trigger
{
content
:
{
notification_text
:
"
Mochitest
"
heading_text
:
"
Mochitest
"
info_icon
:
{
label
:
{
attributes
:
{
tooltiptext
:
"
Why
am
I
seeing
this
"
}
}
sumo_path
:
"
extensionrecommendations
"
}
addon
:
{
title
:
"
Addon
name
"
icon
:
"
foo
"
author
:
"
Author
name
"
amo_url
:
"
https
:
/
/
example
.
com
"
}
text
:
"
Mochitest
"
buttons
:
{
primary
:
{
label
:
{
value
:
"
OK
"
attributes
:
{
accesskey
:
"
O
"
}
}
action
:
{
type
:
action
.
type
data
:
{
url
:
action
.
url
}
}
}
secondary
:
[
{
label
:
{
value
:
"
Cancel
"
attributes
:
{
accesskey
:
"
C
"
}
}
}
{
label
:
{
value
:
"
Cancel
1
"
attributes
:
{
accesskey
:
"
A
"
}
}
}
{
label
:
{
value
:
"
Cancel
2
"
attributes
:
{
accesskey
:
"
B
"
}
}
}
]
}
}
}
ASRouter
.
dispatch
)
;
}
add_task
(
async
function
setup
(
)
{
const
{
_maybeAddAddonInstallURL
}
=
CFRPageActions
;
CFRPageActions
.
_maybeAddAddonInstallURL
=
x
=
>
x
;
registerCleanupFunction
(
(
)
=
>
{
CFRPageActions
.
_maybeAddAddonInstallURL
=
_maybeAddAddonInstallURL
;
}
)
;
}
)
;
add_task
(
async
function
test_cfr_notification_show
(
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
await
BrowserTestUtils
.
loadURI
(
browser
"
http
:
/
/
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
http
:
/
/
example
.
com
/
"
)
;
const
response
=
await
trigger_cfr_panel
(
browser
"
example
.
com
"
)
;
Assert
.
ok
(
response
"
Should
return
true
if
addRecommendation
checks
were
successful
"
)
;
const
showPanel
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
"
)
.
click
(
)
;
await
showPanel
;
Assert
.
ok
(
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
hidden
=
=
=
false
"
Panel
should
be
visible
"
)
;
Assert
.
ok
(
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
button
)
;
let
hidePanel
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
button
.
click
(
)
;
await
hidePanel
;
Assert
.
equal
(
PopupNotifications
.
_currentNotifications
.
length
0
"
Should
have
removed
the
notification
"
)
;
}
)
;
add_task
(
async
function
test_cfr_addon_install
(
)
{
const
browser
=
gBrowser
.
selectedBrowser
;
await
BrowserTestUtils
.
loadURI
(
browser
"
http
:
/
/
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
http
:
/
/
example
.
com
/
"
)
;
const
response
=
await
trigger_cfr_panel
(
browser
"
example
.
com
"
{
type
:
"
INSTALL_ADDON_FROM_URL
"
url
:
"
http
:
/
/
example
.
com
"
}
)
;
Assert
.
ok
(
response
"
Should
return
true
if
addRecommendation
checks
were
successful
"
)
;
const
showPanel
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
"
)
.
click
(
)
;
await
showPanel
;
Assert
.
ok
(
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
hidden
=
=
=
false
"
Panel
should
be
visible
"
)
;
Assert
.
ok
(
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
button
)
;
const
hidePanel
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
button
.
click
(
)
;
await
hidePanel
;
await
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
let
[
notification
]
=
PopupNotifications
.
panel
.
childNodes
;
Assert
.
ok
(
notification
.
id
=
=
=
"
addon
-
progress
-
notification
"
|
|
notification
.
id
=
=
=
"
addon
-
install
-
failed
-
notification
"
"
Should
try
to
install
the
addon
"
)
;
}
)
;
add_task
(
async
function
test_onLocationChange_cb
(
)
{
let
count
=
0
;
const
triggerHandler
=
(
)
=
>
+
+
count
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
newtab
/
test
/
browser
/
blue_page
.
html
"
;
ASRouterTriggerListeners
.
get
(
"
openURL
"
)
.
init
(
triggerHandler
[
"
example
.
com
"
]
)
;
const
browser
=
gBrowser
.
selectedBrowser
;
await
BrowserTestUtils
.
loadURI
(
browser
"
http
:
/
/
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
http
:
/
/
example
.
com
/
"
)
;
Assert
.
equal
(
count
1
"
Count
navigation
to
example
.
com
"
)
;
await
BrowserTestUtils
.
loadURI
(
browser
"
http
:
/
/
example
.
com
/
#
foo
"
)
;
await
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
"
http
:
/
/
example
.
com
/
#
foo
"
)
;
Assert
.
equal
(
count
1
"
It
should
ignore
same
page
navigation
"
)
;
await
BrowserTestUtils
.
loadURI
(
browser
TEST_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_URL
)
;
Assert
.
equal
(
count
2
"
We
moved
to
a
new
document
"
)
;
}
)
;
