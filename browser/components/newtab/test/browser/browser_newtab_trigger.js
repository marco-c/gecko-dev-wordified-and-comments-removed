"
use
strict
"
;
const
{
ASRouter
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouter
.
sys
.
mjs
"
)
;
let
sendTriggerMessageSpy
;
add_setup
(
function
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
sendTriggerMessageSpy
=
sandbox
.
spy
(
ASRouter
"
sendTriggerMessage
"
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_newtab_trigger
(
)
{
sendTriggerMessageSpy
.
resetHistory
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
newtab
"
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
sendTriggerMessageSpy
.
called
"
After
about
:
newtab
finishes
loading
"
)
;
Assert
.
equal
(
sendTriggerMessageSpy
.
firstCall
.
args
[
0
]
.
id
"
defaultBrowserCheck
"
"
Found
the
expected
trigger
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
sendTriggerMessageSpy
.
resetHistory
(
)
;
}
)
;
add_task
(
async
function
test_abouthome_trigger
(
)
{
sendTriggerMessageSpy
.
resetHistory
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
home
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
sendTriggerMessageSpy
.
called
"
After
about
:
newtab
finishes
loading
"
)
;
Assert
.
equal
(
sendTriggerMessageSpy
.
firstCall
.
args
[
0
]
.
id
"
defaultBrowserCheck
"
"
Found
the
expected
trigger
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
sendTriggerMessageSpy
.
resetHistory
(
)
;
}
)
;
