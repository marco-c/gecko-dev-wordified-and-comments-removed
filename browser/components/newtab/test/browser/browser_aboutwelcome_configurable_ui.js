"
use
strict
"
;
const
{
ExperimentFakes
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
jsm
"
)
;
const
BASE_SCREEN_CONTENT
=
{
title
:
"
Step
1
"
primary_button
:
{
label
:
"
Next
"
action
:
{
navigate
:
true
}
}
secondary_button
:
{
label
:
"
link
"
}
}
;
const
makeTestContent
=
(
id
contentAdditions
)
=
>
{
return
{
id
content
:
Object
.
assign
(
{
}
BASE_SCREEN_CONTENT
contentAdditions
)
}
;
}
;
async
function
openAboutWelcome
(
json
)
{
if
(
json
)
{
await
setAboutWelcomeMultiStage
(
json
)
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
welcome
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
return
tab
.
linkedBrowser
;
}
add_task
(
async
function
test_aboutwelcome_with_noodles
(
)
{
const
TEST_NOODLE_CONTENT
=
makeTestContent
(
"
TEST_NOODLE_STEP
"
{
has_noodles
:
true
}
)
;
const
TEST_NOODLE_JSON
=
JSON
.
stringify
(
[
TEST_NOODLE_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_NOODLE_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
noodles
"
[
"
main
.
TEST_NOODLE_STEP
[
pos
=
'
center
'
]
"
"
div
.
noodle
.
purple
-
C
"
"
div
.
noodle
.
orange
-
L
"
"
div
.
noodle
.
outline
-
L
"
"
div
.
noodle
.
yellow
-
circle
"
]
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_customized_logo
(
)
{
const
TEST_LOGO_URL
=
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
;
const
TEST_LOGO_CONTENT
=
makeTestContent
(
"
TEST_LOGO_STEP
"
{
logo
:
{
height
:
"
50px
"
imageURL
:
TEST_LOGO_URL
}
}
)
;
const
TEST_LOGO_JSON
=
JSON
.
stringify
(
[
TEST_LOGO_CONTENT
]
)
;
const
LOGO_HEIGHT
=
TEST_LOGO_CONTENT
.
content
.
logo
.
height
;
let
browser
=
await
openAboutWelcome
(
TEST_LOGO_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
customized
logo
"
[
"
main
.
TEST_LOGO_STEP
[
pos
=
'
center
'
]
"
div
.
brand
-
logo
]
)
;
await
test_element_styles
(
browser
"
div
.
brand
-
logo
"
{
height
:
LOGO_HEIGHT
"
background
-
image
"
:
url
(
"
{
TEST_LOGO_URL
}
"
)
}
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_url_backdrop
(
)
{
const
TEST_BACKDROP_URL
=
url
(
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
proton
-
bkg
.
avif
"
)
;
const
TEST_BACKDROP_VALUE
=
#
212121
{
TEST_BACKDROP_URL
}
center
/
cover
no
-
repeat
fixed
;
const
TEST_URL_BACKDROP_CONTENT
=
makeTestContent
(
"
TEST_URL_BACKDROP_STEP
"
)
;
let
doExperimentCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
enabled
:
true
value
:
{
backdrop
:
TEST_BACKDROP_VALUE
screens
:
[
TEST_URL_BACKDROP_CONTENT
]
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
renders
screen
with
background
image
"
[
div
.
outer
-
wrapper
.
onboardingContainer
[
style
*
=
'
{
TEST_BACKDROP_URL
}
'
]
]
)
;
await
doExperimentCleanup
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_color_backdrop
(
)
{
const
TEST_BACKDROP_COLOR
=
"
transparent
"
;
const
TEST_BACKDROP_COLOR_CONTENT
=
makeTestContent
(
"
TEST_COLOR_NAME_BACKDROP_STEP
"
)
;
let
doExperimentCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
enabled
:
true
value
:
{
backdrop
:
TEST_BACKDROP_COLOR
screens
:
[
TEST_BACKDROP_COLOR_CONTENT
]
}
}
)
;
let
browser
=
await
openAboutWelcome
(
)
;
await
test_screen_content
(
browser
"
renders
screen
with
background
color
"
[
div
.
outer
-
wrapper
.
onboardingContainer
[
style
*
=
'
{
TEST_BACKDROP_COLOR
}
'
]
]
)
;
await
doExperimentCleanup
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_title_styles
(
)
{
const
TEST_TITLE_STYLE_CONTENT
=
makeTestContent
(
"
TEST_TITLE_STYLE_STEP
"
{
title
:
{
fontSize
:
"
36px
"
fontWeight
:
276
letterSpacing
:
0
raw
:
"
test
"
}
title_style
:
"
fancy
shine
"
}
)
;
const
TEST_TITLE_STYLE_JSON
=
JSON
.
stringify
(
[
TEST_TITLE_STYLE_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_TITLE_STYLE_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
customized
title
style
"
[
div
.
welcome
-
text
.
fancy
.
shine
]
)
;
await
test_element_styles
(
browser
"
#
mainContentHeader
"
{
"
font
-
weight
"
:
"
276
"
"
font
-
size
"
:
"
36px
"
animation
:
"
50s
linear
0s
infinite
normal
none
running
shine
"
"
letter
-
spacing
"
:
"
normal
"
}
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_background
(
)
{
const
BACKGROUND_URL
=
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
proton
-
bkg
.
avif
"
;
const
TEST_BACKGROUND_CONTENT
=
makeTestContent
(
"
TEST_BACKGROUND_STEP
"
{
background
:
url
(
{
BACKGROUND_URL
}
)
no
-
repeat
center
/
cover
}
)
;
const
TEST_BACKGROUND_JSON
=
JSON
.
stringify
(
[
TEST_BACKGROUND_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_BACKGROUND_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
with
dialog
background
image
"
[
div
.
main
-
content
[
style
*
=
'
{
BACKGROUND_URL
}
'
]
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_text_color_override
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
systemUsesDarkTheme
"
1
]
]
}
)
;
let
screens
=
[
]
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
screens
.
push
(
makeTestContent
(
"
TEST_TEXT_COLOR_OVERRIDE_STEP
"
{
text_color
:
"
dark
"
background
:
"
white
"
}
)
)
;
}
let
doExperimentCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
enabled
:
true
value
:
{
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
screens
)
)
;
await
test_screen_content
(
browser
"
renders
screen
with
dark
text
"
[
main
.
screen
.
dark
-
text
.
indicator
.
current
.
indicator
:
not
(
.
current
)
]
[
main
.
screen
.
light
-
text
]
)
;
await
test_element_styles
(
browser
"
#
mainContentHeader
"
{
color
:
"
rgb
(
21
20
26
)
"
}
)
;
await
test_element_styles
(
browser
"
.
indicator
:
not
(
.
current
)
"
{
color
:
"
rgb
(
251
251
254
)
"
}
)
;
await
doExperimentCleanup
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_with_progress_bar
(
)
{
let
screens
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
screens
.
push
(
makeTestContent
(
"
TEST_PROGRESS_BAR_OVERRIDE_STEP
"
{
progress_bar
:
true
primary_button
:
{
label
:
"
next
"
action
:
{
navigate
:
true
}
}
}
)
)
;
}
let
doExperimentCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
"
aboutwelcome
"
enabled
:
true
value
:
{
screens
}
}
)
;
let
browser
=
await
openAboutWelcome
(
JSON
.
stringify
(
screens
)
)
;
await
onButtonClick
(
browser
"
button
.
primary
"
)
;
await
test_element_styles
(
browser
"
.
indicator
"
{
height
:
"
6px
"
"
padding
-
block
"
:
"
0px
"
margin
:
"
0px
"
}
)
;
await
test_element_styles
(
browser
"
.
indicator
.
complete
"
{
"
border
-
color
"
:
"
rgb
(
0
221
255
)
"
}
)
;
await
test_element_styles
(
browser
"
.
indicator
.
current
"
{
"
border
-
color
"
:
"
rgb
(
0
221
255
)
"
}
)
;
await
test_element_styles
(
browser
"
.
indicator
:
not
(
.
current
)
:
not
(
.
complete
)
"
{
"
border
-
color
"
:
"
rgb
(
251
251
254
)
"
}
)
;
await
doExperimentCleanup
(
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_dismiss_button
(
)
{
const
TEST_DISMISS_CONTENT
=
makeTestContent
(
"
TEST_DISMISS_STEP
"
{
dismiss_button
:
{
action
:
{
navigate
:
true
}
}
}
)
;
const
TEST_DISMISS_JSON
=
JSON
.
stringify
(
[
TEST_DISMISS_CONTENT
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_DISMISS_JSON
)
;
let
aboutWelcomeActor
=
await
getAboutWelcomeParent
(
browser
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
spy
(
aboutWelcomeActor
"
onContentMessage
"
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
await
onButtonClick
(
browser
"
button
.
dismiss
-
button
"
)
;
const
{
callCount
}
=
aboutWelcomeActor
.
onContentMessage
;
ok
(
callCount
>
=
1
{
callCount
}
Stub
was
called
)
;
}
)
;
add_task
(
async
function
test_aboutwelcome_split_position
(
)
{
const
TEST_SPLIT_STEP
=
makeTestContent
(
"
TEST_SPLIT_STEP
"
{
position
:
"
split
"
hero_text
:
"
hero
test
"
}
)
;
const
TEST_SPLIT_JSON
=
JSON
.
stringify
(
[
TEST_SPLIT_STEP
]
)
;
let
browser
=
await
openAboutWelcome
(
TEST_SPLIT_JSON
)
;
await
test_screen_content
(
browser
"
renders
screen
secondary
section
containing
hero
text
"
[
main
.
screen
[
pos
=
"
split
"
]
.
section
-
secondary
.
message
-
text
h1
]
)
;
await
test_element_styles
(
browser
"
main
.
screen
.
section
-
secondary
"
{
display
:
"
flex
"
margin
:
"
auto
0px
auto
auto
"
}
)
;
await
test_element_styles
(
browser
"
.
action
-
buttons
.
secondary
-
cta
.
secondary
"
{
"
background
-
color
"
:
"
rgb
(
240
240
244
)
"
color
:
"
rgb
(
0
0
0
)
"
}
)
;
}
)
;
