"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PanelMultiView
"
"
PanelView
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
}
)
;
const
BLOCKERS_TIMEOUT_MS
=
10000
;
const
TRANSITION_PHASES
=
Object
.
freeze
(
{
START
:
1
PREPARE
:
2
TRANSITION
:
3
}
)
;
let
gNodeToObjectMap
=
new
WeakMap
(
)
;
let
gWindowsWithUnloadHandler
=
new
WeakSet
(
)
;
let
gMultiLineElementsMap
=
new
WeakMap
(
)
;
var
AssociatedToNode
=
class
{
constructor
(
node
)
{
this
.
node
=
node
;
this
.
_blockersPromise
=
Promise
.
resolve
(
)
;
}
static
forNode
(
node
)
{
let
associatedToNode
=
gNodeToObjectMap
.
get
(
node
)
;
if
(
!
associatedToNode
)
{
associatedToNode
=
new
this
(
node
)
;
gNodeToObjectMap
.
set
(
node
associatedToNode
)
;
}
return
associatedToNode
;
}
get
document
(
)
{
return
this
.
node
.
ownerDocument
;
}
get
window
(
)
{
return
this
.
node
.
ownerGlobal
;
}
get
_dwu
(
)
{
if
(
this
.
__dwu
)
return
this
.
__dwu
;
return
this
.
__dwu
=
this
.
window
.
windowUtils
;
}
dispatchCustomEvent
(
eventName
detail
cancelable
=
false
)
{
let
event
=
new
this
.
window
.
CustomEvent
(
eventName
{
detail
bubbles
:
true
cancelable
}
)
;
this
.
node
.
dispatchEvent
(
event
)
;
return
event
.
defaultPrevented
;
}
async
dispatchAsyncEvent
(
eventName
)
{
let
blockersPromise
=
this
.
_blockersPromise
.
catch
(
(
)
=
>
{
}
)
;
return
this
.
_blockersPromise
=
blockersPromise
.
then
(
async
(
)
=
>
{
let
blockers
=
new
Set
(
)
;
let
cancel
=
this
.
dispatchCustomEvent
(
eventName
{
addBlocker
(
promise
)
{
blockers
.
add
(
promise
.
catch
(
ex
=
>
{
Cu
.
reportError
(
ex
)
;
return
true
;
}
)
)
;
}
}
true
)
;
if
(
blockers
.
size
)
{
let
timeoutPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
window
.
setTimeout
(
reject
BLOCKERS_TIMEOUT_MS
)
;
}
)
;
try
{
let
results
=
await
Promise
.
race
(
[
Promise
.
all
(
blockers
)
timeoutPromise
]
)
;
cancel
=
cancel
|
|
results
.
some
(
result
=
>
result
=
=
=
false
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
new
Error
(
One
of
the
blockers
for
{
eventName
}
timed
out
.
)
)
;
return
true
;
}
}
return
cancel
;
}
)
;
}
}
;
var
PanelMultiView
=
class
extends
AssociatedToNode
{
static
async
openPopup
(
panelNode
.
.
.
args
)
{
let
panelMultiViewNode
=
panelNode
.
querySelector
(
"
panelmultiview
"
)
;
if
(
panelMultiViewNode
)
{
return
this
.
forNode
(
panelMultiViewNode
)
.
openPopup
(
.
.
.
args
)
;
}
panelNode
.
openPopup
(
.
.
.
args
)
;
return
true
;
}
static
hidePopup
(
panelNode
)
{
let
panelMultiViewNode
=
panelNode
.
querySelector
(
"
panelmultiview
"
)
;
if
(
panelMultiViewNode
)
{
this
.
forNode
(
panelMultiViewNode
)
.
hidePopup
(
)
;
}
else
{
panelNode
.
hidePopup
(
)
;
}
}
static
removePopup
(
panelNode
)
{
try
{
let
panelMultiViewNode
=
panelNode
.
querySelector
(
"
panelmultiview
"
)
;
if
(
panelMultiViewNode
)
{
let
panelMultiView
=
this
.
forNode
(
panelMultiViewNode
)
;
panelMultiView
.
_moveOutKids
(
)
;
panelMultiView
.
disconnect
(
)
;
}
}
finally
{
panelNode
.
remove
(
)
;
}
}
static
ensureUnloadHandlerRegistered
(
window
)
{
if
(
gWindowsWithUnloadHandler
.
has
(
window
)
)
{
return
;
}
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
for
(
let
panelMultiViewNode
of
window
.
document
.
querySelectorAll
(
"
panelmultiview
"
)
)
{
this
.
forNode
(
panelMultiViewNode
)
.
disconnect
(
)
;
}
}
{
once
:
true
}
)
;
gWindowsWithUnloadHandler
.
add
(
window
)
;
}
get
_panel
(
)
{
return
this
.
node
.
parentNode
;
}
set
_transitioning
(
val
)
{
if
(
val
)
{
this
.
node
.
setAttribute
(
"
transitioning
"
"
true
"
)
;
}
else
{
this
.
node
.
removeAttribute
(
"
transitioning
"
)
;
}
}
get
_screenManager
(
)
{
if
(
this
.
__screenManager
)
return
this
.
__screenManager
;
return
this
.
__screenManager
=
Cc
[
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
]
.
getService
(
Ci
.
nsIScreenManager
)
;
}
constructor
(
node
)
{
super
(
node
)
;
this
.
_openPopupPromise
=
Promise
.
resolve
(
false
)
;
this
.
_openPopupCancelCallback
=
(
)
=
>
{
}
;
}
connect
(
)
{
this
.
connected
=
true
;
PanelMultiView
.
ensureUnloadHandlerRegistered
(
this
.
window
)
;
let
viewContainer
=
this
.
_viewContainer
=
this
.
document
.
createElement
(
"
box
"
)
;
viewContainer
.
classList
.
add
(
"
panel
-
viewcontainer
"
)
;
let
viewStack
=
this
.
_viewStack
=
this
.
document
.
createElement
(
"
box
"
)
;
viewStack
.
classList
.
add
(
"
panel
-
viewstack
"
)
;
viewContainer
.
append
(
viewStack
)
;
let
offscreenViewContainer
=
this
.
document
.
createElement
(
"
box
"
)
;
offscreenViewContainer
.
classList
.
add
(
"
panel
-
viewcontainer
"
"
offscreen
"
)
;
let
offscreenViewStack
=
this
.
_offscreenViewStack
=
this
.
document
.
createElement
(
"
box
"
)
;
offscreenViewStack
.
classList
.
add
(
"
panel
-
viewstack
"
)
;
offscreenViewContainer
.
append
(
offscreenViewStack
)
;
this
.
node
.
prepend
(
offscreenViewContainer
)
;
this
.
node
.
prepend
(
viewContainer
)
;
this
.
openViews
=
[
]
;
this
.
_panel
.
addEventListener
(
"
popupshowing
"
this
)
;
this
.
_panel
.
addEventListener
(
"
popuppositioned
"
this
)
;
this
.
_panel
.
addEventListener
(
"
popuphidden
"
this
)
;
this
.
_panel
.
addEventListener
(
"
popupshown
"
this
)
;
let
cs
=
this
.
window
.
getComputedStyle
(
this
.
document
.
documentElement
)
;
this
.
_dir
=
cs
.
direction
;
[
"
goBack
"
"
showSubView
"
]
.
forEach
(
method
=
>
{
Object
.
defineProperty
(
this
.
node
method
{
enumerable
:
true
value
:
(
.
.
.
args
)
=
>
this
[
method
]
(
.
.
.
args
)
}
)
;
}
)
;
}
disconnect
(
)
{
if
(
!
this
.
node
|
|
!
this
.
connected
)
return
;
this
.
_panel
.
removeEventListener
(
"
mousemove
"
this
)
;
this
.
_panel
.
removeEventListener
(
"
popupshowing
"
this
)
;
this
.
_panel
.
removeEventListener
(
"
popuppositioned
"
this
)
;
this
.
_panel
.
removeEventListener
(
"
popupshown
"
this
)
;
this
.
_panel
.
removeEventListener
(
"
popuphidden
"
this
)
;
this
.
window
.
removeEventListener
(
"
keydown
"
this
)
;
this
.
node
=
this
.
_openPopupPromise
=
this
.
_openPopupCancelCallback
=
this
.
_viewContainer
=
this
.
_viewStack
=
this
.
__dwu
=
this
.
_transitionDetails
=
null
;
}
async
openPopup
(
.
.
.
args
)
{
let
canCancel
=
true
;
let
cancelCallback
=
this
.
_openPopupCancelCallback
=
(
)
=
>
{
if
(
canCancel
&
&
this
.
node
)
{
canCancel
=
false
;
this
.
dispatchCustomEvent
(
"
popuphidden
"
)
;
}
}
;
let
openPopupPromise
=
this
.
_openPopupPromise
.
catch
(
(
)
=
>
{
return
false
;
}
)
;
return
this
.
_openPopupPromise
=
openPopupPromise
.
then
(
async
wasShown
=
>
{
if
(
!
this
.
node
)
{
return
false
;
}
if
(
wasShown
&
&
[
"
open
"
"
showing
"
]
.
includes
(
this
.
_panel
.
state
)
)
{
return
true
;
}
try
{
if
(
!
this
.
connected
)
{
this
.
connect
(
)
;
}
if
(
!
(
await
this
.
_showMainView
(
)
)
)
{
cancelCallback
(
)
;
}
}
catch
(
ex
)
{
cancelCallback
(
)
;
throw
ex
;
}
if
(
!
canCancel
|
|
!
this
.
node
)
{
return
false
;
}
try
{
canCancel
=
false
;
this
.
_panel
.
openPopup
(
.
.
.
args
)
;
return
true
;
}
catch
(
ex
)
{
this
.
dispatchCustomEvent
(
"
popuphidden
"
)
;
throw
ex
;
}
}
)
;
}
hidePopup
(
)
{
if
(
!
this
.
node
|
|
!
this
.
connected
)
{
return
;
}
if
(
[
"
open
"
"
showing
"
]
.
includes
(
this
.
_panel
.
state
)
)
{
this
.
_panel
.
hidePopup
(
)
;
}
else
{
this
.
_openPopupCancelCallback
(
)
;
}
this
.
closeAllViews
(
)
;
}
_moveOutKids
(
)
{
let
viewCacheId
=
this
.
node
.
getAttribute
(
"
viewCacheId
"
)
;
if
(
!
viewCacheId
)
{
return
;
}
let
subviews
=
Array
.
from
(
this
.
_viewStack
.
childNodes
)
;
let
viewCache
=
this
.
document
.
getElementById
(
viewCacheId
)
;
for
(
let
subview
of
subviews
)
{
viewCache
.
appendChild
(
subview
)
;
}
}
showSubView
(
viewIdOrNode
anchor
)
{
this
.
_showSubView
(
viewIdOrNode
anchor
)
.
catch
(
Cu
.
reportError
)
;
}
async
_showSubView
(
viewIdOrNode
anchor
)
{
let
viewNode
=
typeof
viewIdOrNode
=
=
"
string
"
?
this
.
document
.
getElementById
(
viewIdOrNode
)
:
viewIdOrNode
;
if
(
!
viewNode
)
{
Cu
.
reportError
(
new
Error
(
Subview
{
viewIdOrNode
}
doesn
'
t
exist
.
)
)
;
return
;
}
if
(
!
this
.
openViews
.
length
)
{
Cu
.
reportError
(
new
Error
(
Cannot
show
a
subview
in
a
closed
panel
.
)
)
;
return
;
}
let
prevPanelView
=
this
.
openViews
[
this
.
openViews
.
length
-
1
]
;
let
nextPanelView
=
PanelView
.
forNode
(
viewNode
)
;
if
(
this
.
openViews
.
includes
(
nextPanelView
)
)
{
Cu
.
reportError
(
new
Error
(
Subview
{
viewNode
.
id
}
is
already
open
.
)
)
;
return
;
}
if
(
!
prevPanelView
.
active
)
{
return
;
}
prevPanelView
.
active
=
false
;
if
(
anchor
)
{
anchor
.
setAttribute
(
"
open
"
"
true
"
)
;
}
try
{
if
(
!
(
await
this
.
_openView
(
nextPanelView
)
)
)
{
if
(
prevPanelView
.
isOpenIn
(
this
)
)
{
prevPanelView
.
active
=
true
;
}
return
;
}
prevPanelView
.
captureKnownSize
(
)
;
nextPanelView
.
mainview
=
false
;
nextPanelView
.
headerText
=
viewNode
.
getAttribute
(
"
title
"
)
|
|
(
anchor
&
&
anchor
.
getAttribute
(
"
label
"
)
)
;
nextPanelView
.
minMaxWidth
=
prevPanelView
.
knownWidth
;
if
(
anchor
)
{
viewNode
.
classList
.
add
(
"
PanelUI
-
subView
"
)
;
}
await
this
.
_transitionViews
(
prevPanelView
.
node
viewNode
false
anchor
)
;
}
finally
{
if
(
anchor
)
{
anchor
.
removeAttribute
(
"
open
"
)
;
}
}
this
.
_activateView
(
nextPanelView
)
;
}
goBack
(
)
{
this
.
_goBack
(
)
.
catch
(
Cu
.
reportError
)
;
}
async
_goBack
(
)
{
if
(
this
.
openViews
.
length
<
2
)
{
return
;
}
let
prevPanelView
=
this
.
openViews
[
this
.
openViews
.
length
-
1
]
;
let
nextPanelView
=
this
.
openViews
[
this
.
openViews
.
length
-
2
]
;
if
(
!
prevPanelView
.
active
)
{
return
;
}
prevPanelView
.
active
=
false
;
prevPanelView
.
captureKnownSize
(
)
;
await
this
.
_transitionViews
(
prevPanelView
.
node
nextPanelView
.
node
true
)
;
this
.
_closeLatestView
(
)
;
this
.
_activateView
(
nextPanelView
)
;
}
async
_showMainView
(
)
{
let
nextPanelView
=
PanelView
.
forNode
(
this
.
document
.
getElementById
(
this
.
node
.
getAttribute
(
"
mainViewId
"
)
)
)
;
let
oldPanelMultiViewNode
=
nextPanelView
.
node
.
panelMultiView
;
if
(
oldPanelMultiViewNode
)
{
PanelMultiView
.
forNode
(
oldPanelMultiViewNode
)
.
hidePopup
(
)
;
await
this
.
window
.
promiseDocumentFlushed
(
(
)
=
>
{
}
)
;
}
if
(
!
(
await
this
.
_openView
(
nextPanelView
)
)
)
{
return
false
;
}
nextPanelView
.
mainview
=
true
;
nextPanelView
.
headerText
=
"
"
;
nextPanelView
.
minMaxWidth
=
0
;
nextPanelView
.
visible
=
true
;
nextPanelView
.
descriptionHeightWorkaround
(
)
;
return
true
;
}
async
_openView
(
panelView
)
{
if
(
panelView
.
node
.
parentNode
!
=
this
.
_viewStack
)
{
this
.
_viewStack
.
appendChild
(
panelView
.
node
)
;
}
panelView
.
node
.
panelMultiView
=
this
.
node
;
this
.
openViews
.
push
(
panelView
)
;
let
canceled
=
await
panelView
.
dispatchAsyncEvent
(
"
ViewShowing
"
)
;
if
(
!
this
.
openViews
.
length
)
{
return
false
;
}
if
(
canceled
)
{
this
.
_closeLatestView
(
)
;
return
false
;
}
let
{
style
}
=
panelView
.
node
;
style
.
removeProperty
(
"
outline
"
)
;
style
.
removeProperty
(
"
width
"
)
;
return
true
;
}
_activateView
(
panelView
)
{
if
(
panelView
.
isOpenIn
(
this
)
)
{
panelView
.
active
=
true
;
panelView
.
dispatchCustomEvent
(
"
ViewShown
"
)
;
}
}
_closeLatestView
(
)
{
let
panelView
=
this
.
openViews
.
pop
(
)
;
panelView
.
clearNavigation
(
)
;
panelView
.
dispatchCustomEvent
(
"
ViewHiding
"
)
;
panelView
.
node
.
panelMultiView
=
null
;
panelView
.
visible
=
false
;
}
closeAllViews
(
)
{
while
(
this
.
openViews
.
length
)
{
this
.
_closeLatestView
(
)
;
}
}
async
_transitionViews
(
previousViewNode
viewNode
reverse
)
{
const
{
window
}
=
this
;
let
nextPanelView
=
PanelView
.
forNode
(
viewNode
)
;
let
prevPanelView
=
PanelView
.
forNode
(
previousViewNode
)
;
let
details
=
this
.
_transitionDetails
=
{
phase
:
TRANSITION_PHASES
.
START
}
;
let
olderView
=
reverse
?
nextPanelView
:
prevPanelView
;
this
.
_viewContainer
.
style
.
minHeight
=
olderView
.
knownHeight
+
"
px
"
;
this
.
_viewContainer
.
style
.
height
=
prevPanelView
.
knownHeight
+
"
px
"
;
this
.
_viewContainer
.
style
.
width
=
prevPanelView
.
knownWidth
+
"
px
"
;
let
rect
=
this
.
_panel
.
getOuterScreenRect
(
)
;
this
.
_panel
.
setAttribute
(
"
width
"
rect
.
width
)
;
this
.
_panel
.
setAttribute
(
"
height
"
rect
.
height
)
;
let
viewRect
;
if
(
reverse
)
{
viewRect
=
{
width
:
nextPanelView
.
knownWidth
height
:
nextPanelView
.
knownHeight
}
;
nextPanelView
.
visible
=
true
;
}
else
if
(
viewNode
.
customRectGetter
)
{
let
width
=
prevPanelView
.
knownWidth
;
let
height
=
prevPanelView
.
knownHeight
;
viewRect
=
Object
.
assign
(
{
height
width
}
viewNode
.
customRectGetter
(
)
)
;
nextPanelView
.
visible
=
true
;
let
header
=
viewNode
.
firstChild
;
if
(
header
&
&
header
.
classList
.
contains
(
"
panel
-
header
"
)
)
{
viewRect
.
height
+
=
await
window
.
promiseDocumentFlushed
(
(
)
=
>
{
return
this
.
_dwu
.
getBoundsWithoutFlushing
(
header
)
.
height
;
}
)
;
}
await
nextPanelView
.
descriptionHeightWorkaround
(
)
;
}
else
{
this
.
_offscreenViewStack
.
style
.
minHeight
=
olderView
.
knownHeight
+
"
px
"
;
this
.
_offscreenViewStack
.
appendChild
(
viewNode
)
;
nextPanelView
.
visible
=
true
;
await
nextPanelView
.
descriptionHeightWorkaround
(
)
;
viewRect
=
await
window
.
promiseDocumentFlushed
(
(
)
=
>
{
return
this
.
_dwu
.
getBoundsWithoutFlushing
(
viewNode
)
;
}
)
;
if
(
!
nextPanelView
.
isOpenIn
(
this
)
)
{
return
;
}
this
.
_viewStack
.
appendChild
(
viewNode
)
;
this
.
_offscreenViewStack
.
style
.
removeProperty
(
"
min
-
height
"
)
;
}
this
.
_transitioning
=
true
;
details
.
phase
=
TRANSITION_PHASES
.
PREPARE
;
let
moveToLeft
=
(
this
.
_dir
=
=
"
rtl
"
&
&
!
reverse
)
|
|
(
this
.
_dir
=
=
"
ltr
"
&
&
reverse
)
;
let
deltaX
=
prevPanelView
.
knownWidth
;
let
deepestNode
=
reverse
?
previousViewNode
:
viewNode
;
if
(
reverse
)
this
.
_viewStack
.
style
.
marginInlineStart
=
"
-
"
+
deltaX
+
"
px
"
;
this
.
_viewStack
.
style
.
transition
=
"
transform
var
(
-
-
animation
-
easing
-
function
)
"
+
"
var
(
-
-
panelui
-
subview
-
transition
-
duration
)
"
;
this
.
_viewStack
.
style
.
willChange
=
"
transform
"
;
deepestNode
.
style
.
outline
=
"
1px
solid
var
(
-
-
panel
-
separator
-
color
)
"
;
await
window
.
promiseDocumentFlushed
(
(
)
=
>
{
}
)
;
if
(
!
nextPanelView
.
isOpenIn
(
this
)
)
{
return
;
}
this
.
_viewContainer
.
style
.
height
=
viewRect
.
height
+
"
px
"
;
this
.
_viewContainer
.
style
.
width
=
viewRect
.
width
+
"
px
"
;
this
.
_panel
.
removeAttribute
(
"
width
"
)
;
this
.
_panel
.
removeAttribute
(
"
height
"
)
;
viewNode
.
style
.
width
=
viewRect
.
width
+
"
px
"
;
details
.
phase
=
TRANSITION_PHASES
.
TRANSITION
;
this
.
_viewStack
.
style
.
transform
=
"
translateX
(
"
+
(
moveToLeft
?
"
"
:
"
-
"
)
+
deltaX
+
"
px
)
"
;
await
new
Promise
(
resolve
=
>
{
details
.
resolve
=
resolve
;
this
.
_viewContainer
.
addEventListener
(
"
transitionend
"
details
.
listener
=
ev
=
>
{
if
(
ev
.
target
!
=
this
.
_viewStack
|
|
ev
.
propertyName
!
=
"
transform
"
)
return
;
this
.
_viewContainer
.
removeEventListener
(
"
transitionend
"
details
.
listener
)
;
delete
details
.
listener
;
resolve
(
)
;
}
)
;
this
.
_viewContainer
.
addEventListener
(
"
transitioncancel
"
details
.
cancelListener
=
ev
=
>
{
if
(
ev
.
target
!
=
this
.
_viewStack
)
return
;
this
.
_viewContainer
.
removeEventListener
(
"
transitioncancel
"
details
.
cancelListener
)
;
delete
details
.
cancelListener
;
resolve
(
)
;
}
)
;
}
)
;
if
(
!
nextPanelView
.
isOpenIn
(
this
)
)
{
return
;
}
prevPanelView
.
visible
=
false
;
nextPanelView
.
node
.
style
.
removeProperty
(
"
width
"
)
;
deepestNode
.
style
.
removeProperty
(
"
outline
"
)
;
this
.
_cleanupTransitionPhase
(
)
;
nextPanelView
.
focusSelectedElement
(
)
;
}
_cleanupTransitionPhase
(
)
{
if
(
!
this
.
_transitionDetails
)
{
return
;
}
let
{
phase
resolve
listener
cancelListener
}
=
this
.
_transitionDetails
;
this
.
_transitionDetails
=
null
;
if
(
phase
>
=
TRANSITION_PHASES
.
START
)
{
this
.
_panel
.
removeAttribute
(
"
width
"
)
;
this
.
_panel
.
removeAttribute
(
"
height
"
)
;
this
.
_viewContainer
.
style
.
removeProperty
(
"
height
"
)
;
this
.
_viewContainer
.
style
.
removeProperty
(
"
width
"
)
;
}
if
(
phase
>
=
TRANSITION_PHASES
.
PREPARE
)
{
this
.
_transitioning
=
false
;
this
.
_viewStack
.
style
.
removeProperty
(
"
margin
-
inline
-
start
"
)
;
this
.
_viewStack
.
style
.
removeProperty
(
"
transition
"
)
;
}
if
(
phase
>
=
TRANSITION_PHASES
.
TRANSITION
)
{
this
.
_viewStack
.
style
.
removeProperty
(
"
transform
"
)
;
if
(
listener
)
this
.
_viewContainer
.
removeEventListener
(
"
transitionend
"
listener
)
;
if
(
cancelListener
)
this
.
_viewContainer
.
removeEventListener
(
"
transitioncancel
"
cancelListener
)
;
if
(
resolve
)
resolve
(
)
;
}
}
_calculateMaxHeight
(
)
{
let
anchorBox
=
this
.
_panel
.
anchorNode
.
boxObject
;
let
screen
=
this
.
_screenManager
.
screenForRect
(
anchorBox
.
screenX
anchorBox
.
screenY
anchorBox
.
width
anchorBox
.
height
)
;
let
availTop
=
{
}
availHeight
=
{
}
;
screen
.
GetAvailRect
(
{
}
availTop
{
}
availHeight
)
;
let
cssAvailTop
=
availTop
.
value
/
screen
.
defaultCSSScaleFactor
;
let
maxHeight
;
if
(
this
.
_panel
.
alignmentPosition
.
startsWith
(
"
before_
"
)
)
{
maxHeight
=
anchorBox
.
screenY
-
cssAvailTop
;
}
else
{
let
anchorScreenBottom
=
anchorBox
.
screenY
+
anchorBox
.
height
;
let
cssAvailHeight
=
availHeight
.
value
/
screen
.
defaultCSSScaleFactor
;
maxHeight
=
cssAvailTop
+
cssAvailHeight
-
anchorScreenBottom
;
}
const
EXTRA_MARGIN_PX
=
20
;
maxHeight
-
=
EXTRA_MARGIN_PX
;
return
maxHeight
;
}
handleEvent
(
aEvent
)
{
if
(
aEvent
.
type
.
startsWith
(
"
popup
"
)
&
&
aEvent
.
target
!
=
this
.
_panel
)
{
return
;
}
switch
(
aEvent
.
type
)
{
case
"
keydown
"
:
let
currentView
=
this
.
openViews
[
this
.
openViews
.
length
-
1
]
;
currentView
.
keyNavigation
(
aEvent
this
.
_dir
)
;
break
;
case
"
mousemove
"
:
this
.
openViews
.
forEach
(
panelView
=
>
panelView
.
clearNavigation
(
)
)
;
break
;
case
"
popupshowing
"
:
{
this
.
_viewContainer
.
setAttribute
(
"
panelopen
"
"
true
"
)
;
if
(
!
this
.
node
.
hasAttribute
(
"
disablekeynav
"
)
)
{
this
.
window
.
addEventListener
(
"
keydown
"
this
)
;
this
.
_panel
.
addEventListener
(
"
mousemove
"
this
)
;
}
break
;
}
case
"
popuppositioned
"
:
{
this
.
_panel
.
autoPosition
=
false
;
if
(
this
.
_panel
.
state
=
=
"
showing
"
)
{
let
maxHeight
=
this
.
_calculateMaxHeight
(
)
;
this
.
_viewStack
.
style
.
maxHeight
=
maxHeight
+
"
px
"
;
this
.
_offscreenViewStack
.
style
.
maxHeight
=
maxHeight
+
"
px
"
;
}
break
;
}
case
"
popupshown
"
:
let
mainPanelView
=
this
.
openViews
[
0
]
;
mainPanelView
.
descriptionHeightWorkaround
(
true
)
.
catch
(
Cu
.
reportError
)
;
this
.
_activateView
(
mainPanelView
)
;
break
;
case
"
popuphidden
"
:
{
this
.
_transitioning
=
false
;
this
.
_viewContainer
.
removeAttribute
(
"
panelopen
"
)
;
this
.
_cleanupTransitionPhase
(
)
;
this
.
window
.
removeEventListener
(
"
keydown
"
this
)
;
this
.
_panel
.
removeEventListener
(
"
mousemove
"
this
)
;
this
.
closeAllViews
(
)
;
this
.
_viewContainer
.
style
.
removeProperty
(
"
min
-
height
"
)
;
this
.
_viewStack
.
style
.
removeProperty
(
"
max
-
height
"
)
;
this
.
_viewContainer
.
style
.
removeProperty
(
"
width
"
)
;
this
.
_viewContainer
.
style
.
removeProperty
(
"
height
"
)
;
this
.
dispatchCustomEvent
(
"
PanelMultiViewHidden
"
)
;
break
;
}
}
}
}
;
var
PanelView
=
class
extends
AssociatedToNode
{
constructor
(
node
)
{
super
(
node
)
;
this
.
active
=
false
;
}
isOpenIn
(
panelMultiView
)
{
return
this
.
node
.
panelMultiView
=
=
panelMultiView
.
node
;
}
set
mainview
(
value
)
{
if
(
value
)
{
this
.
node
.
setAttribute
(
"
mainview
"
true
)
;
}
else
{
this
.
node
.
removeAttribute
(
"
mainview
"
)
;
}
}
set
visible
(
value
)
{
if
(
value
)
{
this
.
node
.
setAttribute
(
"
visible
"
true
)
;
}
else
{
this
.
node
.
removeAttribute
(
"
visible
"
)
;
this
.
active
=
false
;
}
}
set
minMaxWidth
(
value
)
{
let
style
=
this
.
node
.
style
;
if
(
value
)
{
style
.
minWidth
=
style
.
maxWidth
=
value
+
"
px
"
;
}
else
{
style
.
removeProperty
(
"
min
-
width
"
)
;
style
.
removeProperty
(
"
max
-
width
"
)
;
}
}
set
headerText
(
value
)
{
let
header
=
this
.
node
.
firstChild
;
if
(
header
&
&
header
.
classList
.
contains
(
"
panel
-
header
"
)
)
{
if
(
value
)
{
header
.
querySelector
(
"
label
"
)
.
setAttribute
(
"
value
"
value
)
;
}
else
{
header
.
remove
(
)
;
}
return
;
}
if
(
!
value
)
{
return
;
}
header
=
this
.
document
.
createElement
(
"
box
"
)
;
header
.
classList
.
add
(
"
panel
-
header
"
)
;
let
backButton
=
this
.
document
.
createElement
(
"
toolbarbutton
"
)
;
backButton
.
className
=
"
subviewbutton
subviewbutton
-
iconic
subviewbutton
-
back
"
;
backButton
.
setAttribute
(
"
closemenu
"
"
none
"
)
;
backButton
.
setAttribute
(
"
tabindex
"
"
0
"
)
;
backButton
.
setAttribute
(
"
aria
-
label
"
gBundle
.
GetStringFromName
(
"
panel
.
back
"
)
)
;
backButton
.
addEventListener
(
"
command
"
(
)
=
>
{
this
.
node
.
panelMultiView
.
goBack
(
)
;
backButton
.
blur
(
)
;
}
)
;
let
label
=
this
.
document
.
createElement
(
"
label
"
)
;
label
.
setAttribute
(
"
value
"
value
)
;
header
.
append
(
backButton
label
)
;
this
.
node
.
prepend
(
header
)
;
}
dispatchCustomEvent
(
.
.
.
args
)
{
CustomizableUI
.
ensureSubviewListeners
(
this
.
node
)
;
return
super
.
dispatchCustomEvent
(
.
.
.
args
)
;
}
captureKnownSize
(
)
{
let
rect
=
this
.
_dwu
.
getBoundsWithoutFlushing
(
this
.
node
)
;
this
.
knownWidth
=
rect
.
width
;
this
.
knownHeight
=
rect
.
height
;
}
async
descriptionHeightWorkaround
(
allowSyncReflows
=
false
)
{
if
(
!
this
.
node
.
hasAttribute
(
"
descriptionheightworkaround
"
)
)
{
return
;
}
let
items
=
[
]
;
let
collectItems
=
(
)
=
>
{
let
isMultiline
=
"
:
not
(
:
-
moz
-
any
(
[
hidden
]
[
value
]
:
empty
)
)
"
;
let
selector
=
[
"
description
"
+
isMultiline
"
label
"
+
isMultiline
"
toolbarbutton
[
wrap
]
:
not
(
[
hidden
]
)
"
]
.
join
(
"
"
)
;
for
(
let
element
of
this
.
node
.
querySelectorAll
(
selector
)
)
{
if
(
element
.
closest
(
"
[
hidden
]
"
)
)
{
continue
;
}
element
=
element
.
labelElement
|
|
element
;
let
bounds
=
element
.
getBoundingClientRect
(
)
;
let
previous
=
gMultiLineElementsMap
.
get
(
element
)
;
if
(
!
bounds
.
width
|
|
!
bounds
.
height
|
|
(
previous
&
&
element
.
textContent
=
=
previous
.
textContent
&
&
bounds
.
width
=
=
previous
.
bounds
.
width
)
)
{
continue
;
}
items
.
push
(
{
element
}
)
;
}
}
;
if
(
allowSyncReflows
)
{
collectItems
(
)
;
}
else
{
await
this
.
window
.
promiseDocumentFlushed
(
collectItems
)
;
if
(
!
this
.
node
.
panelMultiView
)
{
return
;
}
}
for
(
let
item
of
items
)
{
item
.
element
.
style
.
removeProperty
(
"
height
"
)
;
}
let
measureItems
=
(
)
=
>
{
for
(
let
item
of
items
)
{
item
.
bounds
=
item
.
element
.
getBoundingClientRect
(
)
;
}
}
;
if
(
allowSyncReflows
)
{
measureItems
(
)
;
}
else
{
await
this
.
window
.
promiseDocumentFlushed
(
measureItems
)
;
if
(
!
this
.
node
.
panelMultiView
)
{
return
;
}
}
for
(
let
{
element
bounds
}
of
items
)
{
gMultiLineElementsMap
.
set
(
element
{
bounds
textContent
:
element
.
textContent
}
)
;
element
.
style
.
height
=
bounds
.
height
+
"
px
"
;
}
}
get
_navigableElements
(
)
{
if
(
this
.
__navigableElements
)
{
return
this
.
__navigableElements
;
}
let
navigableElements
=
Array
.
from
(
this
.
node
.
querySelectorAll
(
"
:
-
moz
-
any
(
button
toolbarbutton
menulist
.
text
-
link
)
:
not
(
[
disabled
]
)
"
)
)
;
let
dwu
=
this
.
_dwu
;
return
this
.
__navigableElements
=
navigableElements
.
filter
(
element
=
>
{
if
(
!
element
.
hasAttribute
(
"
tabindex
"
)
)
{
element
.
setAttribute
(
"
tabindex
"
"
0
"
)
;
}
if
(
element
.
hasAttribute
(
"
disabled
"
)
)
{
return
false
;
}
let
bounds
=
dwu
.
getBoundsWithoutFlushing
(
element
)
;
return
bounds
.
width
>
0
&
&
bounds
.
height
>
0
;
}
)
;
}
get
selectedElement
(
)
{
return
this
.
_selectedElement
&
&
this
.
_selectedElement
.
get
(
)
;
}
set
selectedElement
(
value
)
{
if
(
!
value
)
{
delete
this
.
_selectedElement
;
}
else
{
this
.
_selectedElement
=
Cu
.
getWeakReference
(
value
)
;
}
}
focusFirstNavigableElement
(
)
{
this
.
selectedElement
=
this
.
_navigableElements
[
0
]
;
this
.
focusSelectedElement
(
)
;
}
moveSelection
(
isDown
)
{
let
buttons
=
this
.
_navigableElements
;
let
lastSelected
=
this
.
selectedElement
;
let
newButton
=
null
;
let
maxIdx
=
buttons
.
length
-
1
;
if
(
lastSelected
)
{
let
buttonIndex
=
buttons
.
indexOf
(
lastSelected
)
;
if
(
buttonIndex
!
=
-
1
)
{
do
{
buttonIndex
=
buttonIndex
+
(
isDown
?
1
:
-
1
)
;
}
while
(
buttons
[
buttonIndex
]
&
&
buttons
[
buttonIndex
]
.
disabled
)
;
if
(
isDown
&
&
buttonIndex
>
maxIdx
)
buttonIndex
=
0
;
else
if
(
!
isDown
&
&
buttonIndex
<
0
)
buttonIndex
=
maxIdx
;
newButton
=
buttons
[
buttonIndex
]
;
}
else
{
let
allButtons
=
lastSelected
.
closest
(
"
panelview
"
)
.
getElementsByTagName
(
"
toolbarbutton
"
)
;
let
maxAllButtonIdx
=
allButtons
.
length
-
1
;
let
allButtonIndex
=
allButtons
.
indexOf
(
lastSelected
)
;
while
(
allButtonIndex
>
=
0
&
&
allButtonIndex
<
=
maxAllButtonIdx
)
{
allButtonIndex
+
+
;
buttonIndex
=
buttons
.
indexOf
(
allButtons
[
allButtonIndex
]
)
;
if
(
buttonIndex
!
=
-
1
)
{
newButton
=
buttons
[
isDown
?
buttonIndex
:
buttonIndex
-
1
]
;
break
;
}
}
}
}
if
(
!
newButton
)
{
newButton
=
buttons
[
isDown
?
0
:
maxIdx
]
;
}
this
.
selectedElement
=
newButton
;
return
newButton
;
}
keyNavigation
(
event
dir
)
{
if
(
!
this
.
active
)
{
return
;
}
let
buttons
=
this
.
_navigableElements
;
if
(
!
buttons
.
length
)
{
return
;
}
let
stop
=
(
)
=
>
{
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
}
;
let
keyCode
=
event
.
code
;
switch
(
keyCode
)
{
case
"
ArrowDown
"
:
case
"
ArrowUp
"
:
case
"
Tab
"
:
{
stop
(
)
;
let
isDown
=
(
keyCode
=
=
"
ArrowDown
"
)
|
|
(
keyCode
=
=
"
Tab
"
&
&
!
event
.
shiftKey
)
;
let
button
=
this
.
moveSelection
(
isDown
)
;
button
.
focus
(
)
;
break
;
}
case
"
ArrowLeft
"
:
case
"
ArrowRight
"
:
{
stop
(
)
;
if
(
(
dir
=
=
"
ltr
"
&
&
keyCode
=
=
"
ArrowLeft
"
)
|
|
(
dir
=
=
"
rtl
"
&
&
keyCode
=
=
"
ArrowRight
"
)
)
{
this
.
node
.
panelMultiView
.
goBack
(
)
;
break
;
}
let
button
=
this
.
selectedElement
;
if
(
!
button
|
|
!
button
.
classList
.
contains
(
"
subviewbutton
-
nav
"
)
)
{
break
;
}
}
case
"
Space
"
:
case
"
Enter
"
:
{
let
button
=
this
.
selectedElement
;
if
(
!
button
)
break
;
stop
(
)
;
button
.
doCommand
(
)
;
let
clickEvent
=
new
event
.
target
.
ownerGlobal
.
MouseEvent
(
"
click
"
{
"
bubbles
"
:
true
}
)
;
button
.
dispatchEvent
(
clickEvent
)
;
break
;
}
}
}
focusSelectedElement
(
)
{
let
selected
=
this
.
selectedElement
;
if
(
selected
)
{
selected
.
focus
(
)
;
}
}
clearNavigation
(
)
{
delete
this
.
__navigableElements
;
let
selected
=
this
.
selectedElement
;
if
(
selected
)
{
selected
.
blur
(
)
;
this
.
selectedElement
=
null
;
}
}
}
;
