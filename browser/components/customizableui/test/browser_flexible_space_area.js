"
use
strict
"
;
function
getSpringCount
(
area
)
{
return
CustomizableUI
.
getWidgetIdsInArea
(
area
)
.
filter
(
id
=
>
id
.
includes
(
"
spring
"
)
)
.
length
;
}
add_task
(
async
function
test_flexible_space_addition
(
)
{
await
startCustomizing
(
)
;
let
palette
=
document
.
getElementById
(
"
customization
-
palette
"
)
;
CustomizableUI
.
setToolbarVisibility
(
CustomizableUI
.
AREA_BOOKMARKS
true
)
;
let
areas
=
[
CustomizableUI
.
AREA_NAVBAR
CustomizableUI
.
AREA_BOOKMARKS
]
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
areas
.
push
(
CustomizableUI
.
AREA_MENUBAR
)
;
}
for
(
let
area
of
areas
)
{
let
spacer
=
palette
.
querySelector
(
"
toolbarspring
"
)
;
let
toolbar
=
document
.
getElementById
(
area
)
;
toolbar
=
CustomizableUI
.
getCustomizationTarget
(
toolbar
)
;
let
springCount
=
getSpringCount
(
area
)
;
simulateItemDrag
(
spacer
toolbar
)
;
is
(
springCount
+
1
getSpringCount
(
area
)
"
Should
now
have
an
extra
spring
"
)
;
let
newSpacer
=
palette
.
querySelector
(
"
toolbarspring
"
)
;
ok
(
newSpacer
"
Should
have
created
a
new
spring
"
)
;
}
}
)
;
registerCleanupFunction
(
async
function
asyncCleanup
(
)
{
await
endCustomizing
(
)
;
await
resetCustomization
(
)
;
}
)
;
