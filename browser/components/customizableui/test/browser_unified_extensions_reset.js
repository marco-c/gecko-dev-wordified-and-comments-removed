"
use
strict
"
;
add_task
(
async
function
test_reset_with_unified_extensions_ui
(
)
{
if
(
!
gUnifiedExtensions
.
isEnabled
)
{
ok
(
true
"
This
test
isn
'
t
relevant
if
Unified
Extensions
UI
isn
'
t
enabled
.
"
)
;
return
;
}
const
kWebExtensionWidgetIDs
=
[
"
ext0
-
browser
-
action
"
"
ext1
-
browser
-
action
"
"
ext2
-
browser
-
action
"
"
ext3
-
browser
-
action
"
"
ext4
-
browser
-
action
"
"
ext5
-
browser
-
action
"
"
ext6
-
browser
-
action
"
"
ext7
-
browser
-
action
"
"
ext8
-
browser
-
action
"
"
ext9
-
browser
-
action
"
"
ext10
-
browser
-
action
"
]
;
for
(
let
widgetID
of
kWebExtensionWidgetIDs
)
{
CustomizableUI
.
createWidget
(
{
id
:
widgetID
label
:
"
Test
extension
widget
"
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
webExtension
:
true
}
)
;
}
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
0
]
CustomizableUI
.
AREA_TABSTRIP
)
;
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
1
]
CustomizableUI
.
AREA_TABSTRIP
)
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
2
]
CustomizableUI
.
AREA_MENUBAR
)
;
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
3
]
CustomizableUI
.
AREA_MENUBAR
)
;
}
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
4
]
CustomizableUI
.
AREA_BOOKMARKS
)
;
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
5
]
CustomizableUI
.
AREA_BOOKMARKS
)
;
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
6
]
CustomizableUI
.
AREA_ADDONS
)
;
CustomizableUI
.
addWidgetToArea
(
kWebExtensionWidgetIDs
[
7
]
CustomizableUI
.
AREA_ADDONS
)
;
CustomizableUI
.
reset
(
)
;
Assert
.
ok
(
gUnifiedExtensions
.
panel
"
Should
have
found
the
panel
.
"
)
;
for
(
let
widgetID
of
kWebExtensionWidgetIDs
)
{
let
{
area
}
=
CustomizableUI
.
getPlacementOfWidget
(
widgetID
)
;
Assert
.
equal
(
area
CustomizableUI
.
AREA_ADDONS
)
;
let
widget
=
CustomizableUI
.
getWidget
(
widgetID
)
.
forWindow
(
window
)
;
Assert
.
equal
(
widget
.
node
.
parentElement
.
id
CustomizableUI
.
AREA_ADDONS
)
;
CustomizableUI
.
destroyWidget
(
widgetID
)
;
}
}
)
;
