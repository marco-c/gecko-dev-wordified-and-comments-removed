"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
<
html
>
<
body
>
<
/
body
>
<
/
html
>
"
;
function
synthesizeNativeMouseClickAtCenterAsync
(
aElement
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
eventOccurred
(
e
)
{
aElement
.
removeEventListener
(
"
mouseup
"
eventOccurred
true
)
;
resolve
(
)
;
}
aElement
.
addEventListener
(
"
mouseup
"
eventOccurred
true
)
;
EventUtils
.
synthesizeNativeMouseClickAtCenter
(
aElement
resolve
)
;
}
)
;
}
add_task
(
async
function
test_PanelMultiView_toggle_with_other_popup
(
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
TEST_URL
}
)
;
registerCleanupFunction
(
(
)
=
>
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TEST_URL
}
async
function
(
browser
)
{
await
gCUITestUtils
.
openMainMenu
(
)
;
StarUI
.
_createPanelIfNeeded
(
)
;
let
bookmarkPanel
=
document
.
getElementById
(
"
editBookmarkPanel
"
)
;
let
shown
=
BrowserTestUtils
.
waitForEvent
(
bookmarkPanel
"
popupshown
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
bookmarkPanel
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
D
"
{
accelKey
:
true
}
)
;
await
shown
;
let
clickFn
=
(
)
=
>
synthesizeNativeMouseClickAtCenterAsync
(
document
.
getElementById
(
"
PanelUI
-
button
"
)
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
await
gCUITestUtils
.
hidePanelMultiView
(
PanelUI
.
panel
clickFn
)
;
await
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
await
gCUITestUtils
.
openMainMenu
(
)
;
Assert
.
equal
(
PanelUI
.
panel
.
state
"
open
"
)
;
}
else
{
shown
=
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
mainView
"
ViewShown
"
)
;
clickFn
(
)
;
await
shown
;
}
await
gCUITestUtils
.
hideMainMenu
(
)
;
await
hidden
;
}
)
;
}
)
;
