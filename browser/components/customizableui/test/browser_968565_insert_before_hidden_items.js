"
use
strict
"
;
const
kHidden1Id
=
"
test
-
hidden
-
button
-
1
"
;
const
kHidden2Id
=
"
test
-
hidden
-
button
-
2
"
;
var
navbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
add_task
(
async
function
(
)
{
ok
(
CustomizableUI
.
inDefaultState
"
Should
be
in
the
default
state
"
)
;
let
placements
=
CustomizableUI
.
getWidgetsInArea
(
CustomizableUI
.
AREA_NAVBAR
)
;
let
lastVisible
=
null
;
for
(
let
widgetGroup
of
placements
.
reverse
(
)
)
{
let
widget
=
widgetGroup
.
forWindow
(
window
)
;
if
(
widget
&
&
widget
.
node
&
&
!
widget
.
node
.
hidden
)
{
lastVisible
=
widget
.
node
;
break
;
}
}
if
(
!
lastVisible
)
{
ok
(
false
"
Apparently
there
are
no
visible
items
in
the
nav
-
bar
.
"
)
;
}
info
(
"
The
last
visible
item
in
the
nav
-
bar
has
ID
:
"
+
lastVisible
.
id
)
;
let
hidden1
=
createDummyXULButton
(
kHidden1Id
"
You
can
'
t
see
me
"
)
;
let
hidden2
=
createDummyXULButton
(
kHidden2Id
"
You
can
'
t
see
me
either
.
"
)
;
hidden1
.
hidden
=
hidden2
.
hidden
=
true
;
CustomizableUI
.
addWidgetToArea
(
kHidden1Id
"
nav
-
bar
"
)
;
CustomizableUI
.
addWidgetToArea
(
kHidden2Id
"
nav
-
bar
"
)
;
await
startCustomizing
(
)
;
let
homeButton
=
document
.
getElementById
(
"
home
-
button
"
)
;
let
navbarTarget
=
CustomizableUI
.
getCustomizationTarget
(
navbar
)
;
simulateItemDrag
(
homeButton
navbarTarget
"
end
"
)
;
await
endCustomizing
(
)
;
is
(
homeButton
.
previousElementSibling
.
id
lastVisible
.
id
"
The
downloads
button
should
be
placed
after
the
last
visible
item
.
"
)
;
await
resetCustomization
(
)
;
}
)
;
