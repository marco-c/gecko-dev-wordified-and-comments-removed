"
use
strict
"
;
const
PREF_UI_DENSITY
=
"
browser
.
uidensity
"
;
const
PREF_AUTO_TOUCH_MODE
=
"
browser
.
touchmode
.
auto
"
;
async
function
testModeButton
(
mode
modePref
)
{
await
startCustomizing
(
)
;
let
win
=
document
.
getElementById
(
"
main
-
window
"
)
;
let
popupButton
=
document
.
getElementById
(
"
customization
-
uidensity
-
button
"
)
;
let
popup
=
document
.
getElementById
(
"
customization
-
uidensity
-
menu
"
)
;
let
popupShownPromise
=
popupShown
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
popupButton
{
}
)
;
await
popupShownPromise
;
let
button
=
document
.
getElementById
(
"
customization
-
uidensity
-
menu
-
button
-
"
+
mode
)
;
let
normalButton
=
document
.
getElementById
(
"
customization
-
uidensity
-
menu
-
button
-
normal
"
)
;
is
(
normalButton
.
getAttribute
(
"
active
"
)
"
true
"
"
Normal
mode
button
should
be
active
by
default
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
type
:
"
mouseover
"
}
)
;
await
BrowserTestUtils
.
waitForAttribute
(
"
uidensity
"
win
mode
)
;
is
(
win
.
getAttribute
(
"
uidensity
"
)
mode
UI
Density
should
be
set
to
{
mode
}
on
{
mode
}
button
hover
.
)
;
is
(
Services
.
prefs
.
getIntPref
(
PREF_UI_DENSITY
)
window
.
gUIDensity
.
MODE_NORMAL
UI
Density
pref
should
still
be
set
to
normal
on
{
mode
}
button
hover
.
)
;
EventUtils
.
synthesizeMouseAtCenter
(
normalButton
{
type
:
"
mouseover
"
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
win
.
hasAttribute
(
"
uidensity
"
)
)
;
ok
(
!
win
.
hasAttribute
(
"
uidensity
"
)
UI
Density
should
be
reset
when
no
longer
hovering
the
{
mode
}
button
.
)
;
let
popupHiddenPromise
=
popupHidden
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
await
popupHiddenPromise
;
is
(
win
.
getAttribute
(
"
uidensity
"
)
mode
UI
Density
should
be
set
to
{
mode
}
on
{
mode
}
button
click
.
)
;
is
(
Services
.
prefs
.
getIntPref
(
PREF_UI_DENSITY
)
modePref
UI
Density
pref
should
be
set
to
{
mode
}
when
clicking
the
{
mode
}
button
.
)
;
popupShownPromise
=
popupShown
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
popupButton
{
}
)
;
await
popupShownPromise
;
is
(
button
.
getAttribute
(
"
active
"
)
"
true
"
{
mode
}
mode
button
should
be
active
.
)
;
popupHiddenPromise
=
popupHidden
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
popupButton
{
}
)
;
await
popupHiddenPromise
;
await
endCustomizing
(
)
;
await
startCustomizing
(
)
;
popupShownPromise
=
popupShown
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
popupButton
{
}
)
;
await
popupShownPromise
;
is
(
button
.
getAttribute
(
"
active
"
)
"
true
"
{
mode
}
mode
button
should
be
active
after
entering
and
exiting
customize
mode
.
)
;
popupHiddenPromise
=
popupHidden
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
normalButton
{
}
)
;
await
popupHiddenPromise
;
ok
(
!
win
.
hasAttribute
(
"
uidensity
"
)
"
UI
Density
should
be
reset
when
clicking
the
normal
button
.
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
PREF_UI_DENSITY
)
window
.
gUIDensity
.
MODE_NORMAL
"
UI
Density
pref
should
be
set
to
normal
.
"
)
;
popupShownPromise
=
popupShown
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
popupButton
{
}
)
;
await
popupShownPromise
;
popupHiddenPromise
=
popupHidden
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
await
popupHiddenPromise
;
is
(
win
.
getAttribute
(
"
uidensity
"
)
mode
UI
Density
should
be
set
to
{
mode
}
on
{
mode
}
button
click
.
)
;
is
(
Services
.
prefs
.
getIntPref
(
PREF_UI_DENSITY
)
modePref
UI
Density
pref
should
be
set
to
{
mode
}
when
clicking
the
{
mode
}
button
.
)
;
await
gCustomizeMode
.
reset
(
)
;
ok
(
!
win
.
hasAttribute
(
"
uidensity
"
)
"
UI
Density
should
be
reset
when
clicking
the
normal
button
.
"
)
;
is
(
Services
.
prefs
.
getIntPref
(
PREF_UI_DENSITY
)
window
.
gUIDensity
.
MODE_NORMAL
"
UI
Density
pref
should
be
set
to
normal
.
"
)
;
await
endCustomizing
(
)
;
}
add_task
(
async
function
test_compact_mode_button
(
)
{
await
testModeButton
(
"
compact
"
window
.
gUIDensity
.
MODE_COMPACT
)
;
}
)
;
add_task
(
async
function
test_touch_mode_button
(
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
is
(
document
.
getElementById
(
"
customization
-
uidensity
-
menu
-
button
-
touch
"
)
null
"
There
'
s
no
touch
option
on
Mac
OSX
"
)
;
return
;
}
await
testModeButton
(
"
touch
"
window
.
gUIDensity
.
MODE_TOUCH
)
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
await
startCustomizing
(
)
;
let
popupButton
=
document
.
getElementById
(
"
customization
-
uidensity
-
button
"
)
;
let
popup
=
document
.
getElementById
(
"
customization
-
uidensity
-
menu
"
)
;
let
popupShownPromise
=
popupShown
(
popup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
popupButton
{
}
)
;
await
popupShownPromise
;
let
checkbox
=
document
.
getElementById
(
"
customization
-
uidensity
-
autotouchmode
-
checkbox
"
)
;
ok
(
checkbox
.
checked
"
Checkbox
should
be
checked
by
default
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
is
(
Services
.
prefs
.
getBoolPref
(
PREF_AUTO_TOUCH_MODE
)
false
"
Automatic
Touch
Mode
is
off
when
the
checkbox
is
unchecked
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
is
(
Services
.
prefs
.
getBoolPref
(
PREF_AUTO_TOUCH_MODE
)
true
"
Automatic
Touch
Mode
is
on
when
the
checkbox
is
checked
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
is
(
Services
.
prefs
.
getBoolPref
(
PREF_AUTO_TOUCH_MODE
)
false
"
Automatic
Touch
Mode
is
off
when
the
checkbox
is
unchecked
.
"
)
;
await
gCustomizeMode
.
reset
(
)
;
is
(
Services
.
prefs
.
getBoolPref
(
PREF_AUTO_TOUCH_MODE
)
true
"
Automatic
Touch
Mode
is
on
when
the
checkbox
is
checked
.
"
)
;
}
}
)
;
add_task
(
async
function
cleanup
(
)
{
await
endCustomizing
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_UI_DENSITY
)
;
Services
.
prefs
.
clearUserPref
(
PREF_AUTO_TOUCH_MODE
)
;
}
)
;
