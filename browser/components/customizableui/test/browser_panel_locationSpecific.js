"
use
strict
"
;
add_task
(
async
function
(
)
{
let
specificPanel
=
document
.
createXULElement
(
"
panel
"
)
;
specificPanel
.
setAttribute
(
"
locationspecific
"
"
true
"
)
;
specificPanel
.
setAttribute
(
"
noautohide
"
"
true
"
)
;
specificPanel
.
height
=
"
100px
"
;
specificPanel
.
width
=
"
100px
"
;
let
generalPanel
=
document
.
createXULElement
(
"
panel
"
)
;
generalPanel
.
setAttribute
(
"
noautohide
"
"
true
"
)
;
generalPanel
.
height
=
"
100px
"
;
generalPanel
.
width
=
"
100px
"
;
let
anchor
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
anchor
.
appendChild
(
specificPanel
)
;
anchor
.
appendChild
(
generalPanel
)
;
is
(
specificPanel
.
state
"
closed
"
"
specificPanel
starts
as
closed
"
)
;
is
(
generalPanel
.
state
"
closed
"
"
generalPanel
starts
as
closed
"
)
;
let
specificPanelPromise
=
BrowserTestUtils
.
waitForEvent
(
specificPanel
"
popupshown
"
)
;
specificPanel
.
openPopupAtScreen
(
0
0
)
;
await
specificPanelPromise
;
is
(
specificPanel
.
state
"
open
"
"
specificPanel
has
been
opened
"
)
;
let
generalPanelPromise
=
BrowserTestUtils
.
waitForEvent
(
generalPanel
"
popupshown
"
)
;
generalPanel
.
openPopupAtScreen
(
100
0
)
;
await
generalPanelPromise
;
is
(
generalPanel
.
state
"
open
"
"
generalPanel
has
been
opened
"
)
;
let
specificPanelHiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
specificPanel
"
popuphidden
"
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
BrowserTestUtils
.
loadURI
(
browser
"
http
:
/
/
mochi
.
test
:
8888
/
#
0
"
)
;
await
loaded
;
await
specificPanelHiddenPromise
;
is
(
specificPanel
.
state
"
closed
"
"
specificPanel
panel
is
closed
after
location
change
"
)
;
is
(
generalPanel
.
state
"
open
"
"
generalPanel
is
still
open
after
location
change
"
)
;
specificPanel
.
remove
(
)
;
generalPanel
.
remove
(
)
;
}
)
;
