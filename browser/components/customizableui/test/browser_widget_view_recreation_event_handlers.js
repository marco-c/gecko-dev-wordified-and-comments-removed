"
use
strict
"
;
const
kWidgetId
=
"
test
-
browser_widget_view_recreation_event_handlers
"
;
const
kWidgetViewId
=
kWidgetId
+
"
-
view
"
;
add_task
(
async
function
testAddOnBeforeCreatedWidget
(
)
{
const
view
=
document
.
createXULElement
(
"
panelview
"
)
;
view
.
id
=
kWidgetViewId
;
document
.
getElementById
(
"
appMenu
-
viewCache
"
)
.
appendChild
(
view
)
;
let
onViewShowing
=
false
;
function
createAndClickWidget
(
)
{
onViewShowing
=
false
;
CustomizableUI
.
createWidget
(
{
id
:
kWidgetId
type
:
"
view
"
viewId
:
kWidgetViewId
onViewShowing
(
)
{
onViewShowing
=
true
;
}
}
)
;
CustomizableUI
.
addWidgetToArea
(
kWidgetId
CustomizableUI
.
AREA_NAVBAR
)
;
document
.
getElementById
(
kWidgetId
)
.
click
(
)
;
return
subviewShown
(
view
)
;
}
async
function
hideAndDestroyWidget
(
)
{
const
panel
=
view
.
closest
(
"
panel
"
)
;
await
gCUITestUtils
.
hidePanelMultiView
(
panel
(
)
=
>
PanelMultiView
.
hidePopup
(
panel
)
)
;
CustomizableUI
.
destroyWidget
(
kWidgetId
)
;
}
await
createAndClickWidget
(
)
;
ok
(
onViewShowing
"
onViewShowing
should
have
been
called
"
)
;
await
hideAndDestroyWidget
(
)
;
await
createAndClickWidget
(
)
;
ok
(
onViewShowing
"
onViewShowing
should
have
been
called
after
destroying
"
+
"
the
widget
and
recreating
it
"
)
;
await
hideAndDestroyWidget
(
)
;
}
)
;
registerCleanupFunction
(
async
function
cleanup
(
)
{
await
resetCustomization
(
)
;
const
view
=
document
.
getElementById
(
kWidgetViewId
)
;
view
.
remove
(
)
;
}
)
;
