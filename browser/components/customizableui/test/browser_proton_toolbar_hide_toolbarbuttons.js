"
use
strict
"
;
let
CustomizableUIBSPass
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
null
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
HomePage
"
"
resource
:
/
/
/
modules
/
HomePage
.
jsm
"
)
;
const
kPrefProtonToolbarEnabled
=
"
browser
.
proton
.
enabled
"
;
const
kPrefProtonToolbarVersion
=
"
browser
.
proton
.
toolbar
.
version
"
;
const
kPrefHomeButtonUsed
=
"
browser
.
engagement
.
home
-
button
.
has
-
used
"
;
const
kPrefLibraryButtonUsed
=
"
browser
.
engagement
.
library
-
button
.
has
-
used
"
;
const
kPrefSidebarButtonUsed
=
"
browser
.
engagement
.
sidebar
-
button
.
has
-
used
"
;
async
function
testToolbarButtons
(
aActions
)
{
let
{
shouldRemoveHomeButton
shouldRemoveLibraryButton
shouldRemoveSidebarButton
shouldUpdateVersion
}
=
aActions
;
const
defaultPlacements
=
[
"
back
-
button
"
"
forward
-
button
"
"
stop
-
reload
-
button
"
"
home
-
button
"
"
customizableui
-
special
-
spring1
"
"
urlbar
-
container
"
"
customizableui
-
special
-
spring2
"
"
downloads
-
button
"
"
library
-
button
"
"
sidebar
-
button
"
"
fxa
-
toolbar
-
menu
-
button
"
]
;
let
oldState
=
CustomizableUIBSPass
.
gSavedState
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
kPrefProtonToolbarVersion
)
0
"
Toolbar
proton
version
is
0
"
)
;
let
{
CustomizableUIInternal
}
=
CustomizableUIBSPass
;
CustomizableUIBSPass
.
gSavedState
=
{
placements
:
{
"
nav
-
bar
"
:
defaultPlacements
}
}
;
CustomizableUIInternal
.
_updateForNewProtonVersion
(
)
;
let
navbarPlacements
=
CustomizableUIBSPass
.
gSavedState
.
placements
[
"
nav
-
bar
"
]
;
let
includesHomeButton
=
navbarPlacements
.
includes
(
"
home
-
button
"
)
;
let
includesLibraryButton
=
navbarPlacements
.
includes
(
"
library
-
button
"
)
;
let
includesSidebarButton
=
navbarPlacements
.
includes
(
"
sidebar
-
button
"
)
;
Assert
.
equal
(
!
includesHomeButton
shouldRemoveHomeButton
"
Correctly
handles
home
button
"
)
;
Assert
.
equal
(
!
includesLibraryButton
shouldRemoveLibraryButton
"
Correctly
handles
library
button
"
)
;
Assert
.
equal
(
!
includesSidebarButton
shouldRemoveSidebarButton
"
Correctly
handles
sidebar
button
"
)
;
let
toolbarVersion
=
Services
.
prefs
.
getIntPref
(
kPrefProtonToolbarVersion
)
;
if
(
shouldUpdateVersion
)
{
Assert
.
ok
(
toolbarVersion
>
=
1
"
Toolbar
proton
version
updated
"
)
;
}
else
{
Assert
.
ok
(
toolbarVersion
=
=
0
"
Toolbar
proton
version
not
updated
"
)
;
}
CustomizableUIBSPass
.
gSavedState
=
oldState
;
}
add_task
(
async
function
testButtonRemoval
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
kPrefHomeButtonUsed
false
]
[
kPrefLibraryButtonUsed
false
]
[
kPrefSidebarButtonUsed
false
]
]
}
)
;
let
tests
=
[
{
prefs
:
[
[
kPrefProtonToolbarEnabled
true
]
]
actions
:
{
shouldRemoveHomeButton
:
true
shouldRemoveLibraryButton
:
true
shouldRemoveSidebarButton
:
true
shouldUpdateVersion
:
true
}
}
{
prefs
:
[
[
kPrefProtonToolbarEnabled
true
]
[
kPrefHomeButtonUsed
true
]
]
actions
:
{
shouldRemoveHomeButton
:
false
shouldRemoveLibraryButton
:
true
shouldRemoveSidebarButton
:
true
shouldUpdateVersion
:
true
}
}
{
prefs
:
[
[
kPrefProtonToolbarEnabled
false
]
]
actions
:
{
shouldRemoveHomeButton
:
false
shouldRemoveLibraryButton
:
false
shouldRemoveSidebarButton
:
false
shouldUpdateVersion
:
false
}
}
{
prefs
:
[
[
kPrefProtonToolbarEnabled
true
]
]
actions
:
{
shouldRemoveHomeButton
:
false
shouldRemoveLibraryButton
:
true
shouldRemoveSidebarButton
:
true
shouldUpdateVersion
:
true
}
async
fn
(
)
{
HomePage
.
safeSet
(
"
https
:
/
/
example
.
com
"
)
;
}
}
{
prefs
:
[
[
kPrefProtonToolbarEnabled
true
]
[
kPrefLibraryButtonUsed
true
]
]
actions
:
{
shouldRemoveHomeButton
:
true
shouldRemoveLibraryButton
:
false
shouldRemoveSidebarButton
:
true
shouldUpdateVersion
:
true
}
}
{
prefs
:
[
[
kPrefProtonToolbarEnabled
true
]
[
kPrefSidebarButtonUsed
true
]
]
actions
:
{
shouldRemoveHomeButton
:
true
shouldRemoveLibraryButton
:
true
shouldRemoveSidebarButton
:
false
shouldUpdateVersion
:
true
}
}
]
;
for
(
let
test
of
tests
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
kPrefProtonToolbarVersion
0
]
.
.
.
test
.
prefs
]
}
)
;
if
(
test
.
fn
)
{
await
test
.
fn
(
)
;
}
testToolbarButtons
(
test
.
actions
)
;
HomePage
.
reset
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
}
)
;
add_task
(
async
function
testNullSavedState
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
kPrefProtonToolbarVersion
0
]
[
kPrefProtonToolbarEnabled
true
]
]
}
)
;
let
oldState
=
CustomizableUIBSPass
.
gSavedState
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
kPrefProtonToolbarVersion
)
0
"
Toolbar
proton
version
is
0
"
)
;
let
{
CustomizableUIInternal
}
=
CustomizableUIBSPass
;
CustomizableUIInternal
.
initialize
(
)
;
Assert
.
ok
(
Services
.
prefs
.
getIntPref
(
kPrefProtonToolbarVersion
)
>
=
1
"
Toolbar
proton
version
updated
"
)
;
let
navbarPlacements
=
CustomizableUIBSPass
.
gAreas
.
get
(
"
nav
-
bar
"
)
.
get
(
"
defaultPlacements
"
)
;
Assert
.
ok
(
!
navbarPlacements
.
includes
(
"
home
-
button
"
)
"
Home
button
isn
'
t
included
by
default
"
)
;
Assert
.
ok
(
!
navbarPlacements
.
includes
(
"
library
-
button
"
)
"
Library
button
isn
'
t
included
by
default
"
)
;
Assert
.
ok
(
!
navbarPlacements
.
includes
(
"
sidebar
-
button
"
)
"
Sidebar
button
isn
'
t
included
by
default
"
)
;
CustomizableUIBSPass
.
gSavedState
=
oldState
;
await
SpecialPowers
.
popPrefEnv
(
)
;
CustomizableUIInternal
.
initialize
(
)
;
}
)
;
add_task
(
async
function
testNoNavbarPlacements
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
kPrefProtonToolbarVersion
0
]
[
kPrefProtonToolbarEnabled
true
]
]
}
)
;
let
oldState
=
CustomizableUIBSPass
.
gSavedState
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
kPrefProtonToolbarVersion
)
0
"
Toolbar
proton
version
is
0
"
)
;
let
{
CustomizableUIInternal
}
=
CustomizableUIBSPass
;
CustomizableUIBSPass
.
gSavedState
=
{
placements
:
{
"
widget
-
overflow
-
fixed
-
list
"
:
[
]
}
}
;
CustomizableUIInternal
.
_updateForNewProtonVersion
(
)
;
Assert
.
ok
(
true
"
_updateForNewProtonVersion
didn
'
t
throw
"
)
;
CustomizableUIBSPass
.
gSavedState
=
oldState
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
testNullPlacements
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
kPrefProtonToolbarVersion
0
]
[
kPrefProtonToolbarEnabled
true
]
]
}
)
;
let
oldState
=
CustomizableUIBSPass
.
gSavedState
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
kPrefProtonToolbarVersion
)
0
"
Toolbar
proton
version
is
0
"
)
;
let
{
CustomizableUIInternal
}
=
CustomizableUIBSPass
;
CustomizableUIBSPass
.
gSavedState
=
{
}
;
CustomizableUIInternal
.
_updateForNewProtonVersion
(
)
;
Assert
.
ok
(
true
"
_updateForNewProtonVersion
didn
'
t
throw
"
)
;
CustomizableUIBSPass
.
gSavedState
=
oldState
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
