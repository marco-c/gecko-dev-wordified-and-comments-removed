"
use
strict
"
;
var
navbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
registerCleanupFunction
(
async
function
asyncCleanup
(
)
{
await
resetCustomization
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
originalWindowWidth
=
window
.
outerWidth
;
ok
(
!
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
start
with
a
non
-
overflowing
toolbar
.
"
)
;
ok
(
CustomizableUI
.
inDefaultState
"
Should
start
in
default
state
.
"
)
;
let
oldChildCount
=
navbar
.
customizationTarget
.
childElementCount
;
window
.
resizeTo
(
kForceOverflowWidthPx
window
.
outerHeight
)
;
await
waitForCondition
(
(
)
=
>
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
ok
(
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
have
an
overflowing
toolbar
.
"
)
;
ok
(
CustomizableUI
.
inDefaultState
"
Should
still
be
in
default
state
when
overflowing
.
"
)
;
ok
(
navbar
.
customizationTarget
.
childElementCount
<
oldChildCount
"
Should
have
fewer
children
.
"
)
;
window
.
resizeTo
(
originalWindowWidth
window
.
outerHeight
)
;
await
waitForCondition
(
(
)
=
>
!
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
ok
(
!
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
no
longer
have
an
overflowing
toolbar
.
"
)
;
ok
(
CustomizableUI
.
inDefaultState
"
Should
still
be
in
default
state
now
we
'
re
no
longer
overflowing
.
"
)
;
let
placementCounter
=
0
;
let
placements
=
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_NAVBAR
)
;
for
(
let
node
of
navbar
.
customizationTarget
.
children
)
{
if
(
node
.
getAttribute
(
"
skipintoolbarset
"
)
=
=
"
true
"
)
{
continue
;
}
is
(
placements
[
placementCounter
+
+
]
node
.
id
"
Nodes
should
match
after
overflow
"
)
;
}
is
(
placements
.
length
placementCounter
"
Should
have
as
many
nodes
as
expected
"
)
;
is
(
navbar
.
customizationTarget
.
childElementCount
oldChildCount
"
Number
of
nodes
should
match
"
)
;
}
)
;
add_task
(
async
function
(
)
{
ok
(
CustomizableUI
.
inDefaultState
"
Should
start
in
default
state
.
"
)
;
await
startCustomizing
(
)
;
ok
(
CustomizableUI
.
inDefaultState
"
Should
be
in
default
state
in
customization
mode
.
"
)
;
await
endCustomizing
(
)
;
ok
(
CustomizableUI
.
inDefaultState
"
Should
be
in
default
state
after
customization
mode
.
"
)
;
}
)
;
