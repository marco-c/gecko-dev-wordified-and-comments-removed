"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
kTestBarID
=
"
testBar
"
;
const
kWidgetID
=
"
characterencoding
-
button
"
;
function
createTestBar
(
)
{
let
testBar
=
document
.
createXULElement
(
"
toolbar
"
)
;
testBar
.
id
=
kTestBarID
;
testBar
.
setAttribute
(
"
customizable
"
"
true
"
)
;
CustomizableUI
.
registerArea
(
kTestBarID
{
type
:
CustomizableUI
.
TYPE_TOOLBAR
}
)
;
gNavToolbox
.
appendChild
(
testBar
)
;
return
testBar
;
}
function
checkRestoredPresence
(
aWidgetID
)
{
return
(
async
function
(
)
{
let
testBar
=
createTestBar
(
)
;
CustomizableUI
.
addWidgetToArea
(
aWidgetID
kTestBarID
)
;
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
aWidgetID
)
;
is
(
placement
.
area
kTestBarID
"
Expected
"
+
aWidgetID
+
"
to
be
in
the
test
toolbar
"
)
;
CustomizableUI
.
unregisterArea
(
testBar
.
id
)
;
testBar
.
remove
(
)
;
placement
=
CustomizableUI
.
getPlacementOfWidget
(
aWidgetID
)
;
is
(
placement
null
"
Expected
"
+
aWidgetID
+
"
to
be
in
the
palette
"
)
;
testBar
=
createTestBar
(
)
;
await
startCustomizing
(
)
;
placement
=
CustomizableUI
.
getPlacementOfWidget
(
aWidgetID
)
;
is
(
placement
.
area
kTestBarID
"
Expected
"
+
aWidgetID
+
"
to
be
in
the
test
toolbar
"
)
;
await
endCustomizing
(
)
;
CustomizableUI
.
unregisterArea
(
testBar
.
id
)
;
testBar
.
remove
(
)
;
await
resetCustomization
(
)
;
}
)
(
)
;
}
add_task
(
async
function
(
)
{
await
checkRestoredPresence
(
"
downloads
-
button
"
)
;
await
checkRestoredPresence
(
"
characterencoding
-
button
"
)
;
}
)
;
