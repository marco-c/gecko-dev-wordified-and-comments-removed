"
use
strict
"
;
var
gNavBar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
var
gOverflowList
=
document
.
getElementById
(
gNavBar
.
getAttribute
(
"
overflowtarget
"
)
)
;
const
kBookmarksButton
=
"
bookmarks
-
menu
-
button
"
;
const
kBookmarksItems
=
"
personal
-
bookmarks
"
;
const
kOriginalWindowWidth
=
window
.
outerWidth
;
const
kSmallWidth
=
400
;
function
bookmarksMenuPanelShown
(
)
{
return
new
Promise
(
resolve
=
>
{
let
bookmarksMenuPopup
=
document
.
getElementById
(
"
BMB_bookmarksPopup
"
)
;
let
onTransitionEnd
=
(
e
)
=
>
{
if
(
e
.
target
=
=
bookmarksMenuPopup
)
{
bookmarksMenuPopup
.
removeEventListener
(
"
transitionend
"
onTransitionEnd
)
;
resolve
(
)
;
}
}
bookmarksMenuPopup
.
addEventListener
(
"
transitionend
"
onTransitionEnd
)
;
}
)
;
}
function
checkPlacesContextMenu
(
aItemWithContextMenu
)
{
return
(
async
function
(
)
{
let
contextMenu
=
document
.
getElementById
(
"
placesContext
"
)
;
let
newBookmarkItem
=
document
.
getElementById
(
"
placesContext_new
:
bookmark
"
)
;
info
(
"
Waiting
for
context
menu
on
"
+
aItemWithContextMenu
.
id
)
;
let
shownPromise
=
popupShown
(
contextMenu
)
;
EventUtils
.
synthesizeMouseAtCenter
(
aItemWithContextMenu
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
shownPromise
;
ok
(
!
newBookmarkItem
.
hasAttribute
(
"
disabled
"
)
"
New
bookmark
item
shouldn
'
t
be
disabled
"
)
;
info
(
"
Closing
context
menu
"
)
;
await
closePopup
(
contextMenu
)
;
}
)
(
)
;
}
function
checkSpecialContextMenus
(
)
{
return
(
async
function
(
)
{
let
bookmarksMenuButton
=
document
.
getElementById
(
kBookmarksButton
)
;
let
bookmarksMenuPopup
=
document
.
getElementById
(
"
BMB_bookmarksPopup
"
)
;
const
kSpecialItemIDs
=
{
"
BMB_bookmarksToolbar
"
:
"
BMB_bookmarksToolbarPopup
"
"
BMB_unsortedBookmarks
"
:
"
BMB_unsortedBookmarksPopup
"
}
;
let
shownPromise
=
bookmarksMenuPanelShown
(
)
;
if
(
!
AppConstants
.
MOZ_PHOTON_THEME
)
{
bookmarksMenuButton
=
document
.
getAnonymousElementByAttribute
(
bookmarksMenuButton
"
anonid
"
"
dropmarker
"
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
bookmarksMenuButton
{
}
)
;
info
(
"
Waiting
for
bookmarks
menu
popup
to
show
after
clicking
dropmarker
.
"
)
await
shownPromise
;
for
(
let
menuID
in
kSpecialItemIDs
)
{
let
menuItem
=
document
.
getElementById
(
menuID
)
;
let
menuPopup
=
document
.
getElementById
(
kSpecialItemIDs
[
menuID
]
)
;
info
(
"
Waiting
to
open
menu
for
"
+
menuID
)
;
shownPromise
=
popupShown
(
menuPopup
)
;
menuPopup
.
openPopup
(
menuItem
null
0
0
false
false
null
)
;
await
shownPromise
;
await
checkPlacesContextMenu
(
menuPopup
)
;
info
(
"
Closing
menu
for
"
+
menuID
)
;
await
closePopup
(
menuPopup
)
;
}
info
(
"
Closing
bookmarks
menu
"
)
;
await
closePopup
(
bookmarksMenuPopup
)
;
}
)
(
)
;
}
function
closePopup
(
aPopup
)
{
let
hiddenPromise
=
popupHidden
(
aPopup
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
)
;
return
hiddenPromise
;
}
function
checkBookmarksItemsChevronContextMenu
(
)
{
return
(
async
function
(
)
{
let
chevronPopup
=
document
.
getElementById
(
"
PlacesChevronPopup
"
)
;
let
shownPromise
=
popupShown
(
chevronPopup
)
;
let
chevron
=
document
.
getElementById
(
"
PlacesChevron
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
chevron
{
}
)
;
info
(
"
Waiting
for
bookmark
toolbar
item
chevron
popup
to
show
"
)
;
await
shownPromise
;
await
waitForCondition
(
(
)
=
>
{
for
(
let
child
of
chevronPopup
.
children
)
{
if
(
child
.
style
.
visibility
!
=
"
hidden
"
)
return
true
;
}
return
false
;
}
)
;
await
checkPlacesContextMenu
(
chevronPopup
)
;
info
(
"
Waiting
for
bookmark
toolbar
item
chevron
popup
to
close
"
)
;
await
closePopup
(
chevronPopup
)
;
}
)
(
)
;
}
function
overflowEverything
(
)
{
info
(
"
Waiting
for
overflow
"
)
;
window
.
resizeTo
(
kSmallWidth
window
.
outerHeight
)
;
return
waitForCondition
(
(
)
=
>
gNavBar
.
hasAttribute
(
"
overflowing
"
)
)
;
}
function
stopOverflowing
(
)
{
info
(
"
Waiting
until
we
stop
overflowing
"
)
;
window
.
resizeTo
(
kOriginalWindowWidth
window
.
outerHeight
)
;
return
waitForCondition
(
(
)
=
>
!
gNavBar
.
hasAttribute
(
"
overflowing
"
)
)
;
}
function
checkOverflowing
(
aID
)
{
ok
(
!
gNavBar
.
querySelector
(
"
#
"
+
aID
)
"
Item
with
ID
"
+
aID
+
"
should
no
longer
be
in
the
gNavBar
"
)
;
let
item
=
gOverflowList
.
querySelector
(
"
#
"
+
aID
)
;
ok
(
item
"
Item
with
ID
"
+
aID
+
"
should
be
overflowing
"
)
;
is
(
item
.
getAttribute
(
"
overflowedItem
"
)
"
true
"
"
Item
with
ID
"
+
aID
+
"
should
have
overflowedItem
attribute
"
)
;
}
function
checkNotOverflowing
(
aID
)
{
ok
(
!
gOverflowList
.
querySelector
(
"
#
"
+
aID
)
"
Item
with
ID
"
+
aID
+
"
should
no
longer
be
overflowing
"
)
;
let
item
=
gNavBar
.
querySelector
(
"
#
"
+
aID
)
;
ok
(
item
"
Item
with
ID
"
+
aID
+
"
should
be
in
the
nav
bar
"
)
;
ok
(
!
item
.
hasAttribute
(
"
overflowedItem
"
)
"
Item
with
ID
"
+
aID
+
"
should
not
have
overflowedItem
attribute
"
)
;
}
add_task
(
async
function
testOverflowingBookmarksButtonContextMenu
(
)
{
ok
(
!
gNavBar
.
hasAttribute
(
"
overflowing
"
)
"
Should
start
with
a
non
-
overflowing
toolbar
.
"
)
;
ok
(
CustomizableUI
.
inDefaultState
"
Should
start
in
default
state
.
"
)
;
await
checkSpecialContextMenus
(
)
;
await
overflowEverything
(
)
;
checkOverflowing
(
kBookmarksButton
)
;
await
stopOverflowing
(
)
;
checkNotOverflowing
(
kBookmarksButton
)
;
await
checkSpecialContextMenus
(
)
;
}
)
;
add_task
(
async
function
testOverflowingBookmarksItemsContextMenu
(
)
{
info
(
"
Ensuring
panel
is
ready
.
"
)
;
await
PanelUI
.
ensureReady
(
)
;
let
bookmarksToolbarItems
=
document
.
getElementById
(
kBookmarksItems
)
;
gCustomizeMode
.
addToToolbar
(
bookmarksToolbarItems
)
;
await
checkPlacesContextMenu
(
bookmarksToolbarItems
)
;
await
overflowEverything
(
)
;
checkOverflowing
(
kBookmarksItems
)
gCustomizeMode
.
addToPanel
(
bookmarksToolbarItems
)
;
await
stopOverflowing
(
)
;
gCustomizeMode
.
addToToolbar
(
bookmarksToolbarItems
)
;
await
checkPlacesContextMenu
(
bookmarksToolbarItems
)
;
}
)
;
add_task
(
async
function
testOverflowingBookmarksItemsChevronContextMenu
(
)
{
let
bookmarksToolbarItems
=
document
.
getElementById
(
kBookmarksItems
)
;
gCustomizeMode
.
addToToolbar
(
bookmarksToolbarItems
)
;
let
placesToolbarItems
=
document
.
getElementById
(
"
PlacesToolbarItems
"
)
;
let
placesChevron
=
document
.
getElementById
(
"
PlacesChevron
"
)
;
placesToolbarItems
.
style
.
maxWidth
=
"
10px
"
;
info
(
"
Waiting
for
chevron
to
no
longer
be
collapsed
"
)
;
await
waitForCondition
(
(
)
=
>
!
placesChevron
.
collapsed
)
;
await
checkBookmarksItemsChevronContextMenu
(
)
;
await
overflowEverything
(
)
;
checkOverflowing
(
kBookmarksItems
)
;
await
stopOverflowing
(
)
;
checkNotOverflowing
(
kBookmarksItems
)
;
await
checkBookmarksItemsChevronContextMenu
(
)
;
placesToolbarItems
.
style
.
removeProperty
(
"
max
-
width
"
)
;
}
)
;
add_task
(
async
function
asyncCleanup
(
)
{
window
.
resizeTo
(
kOriginalWindowWidth
window
.
outerHeight
)
;
await
resetCustomization
(
)
;
}
)
;
