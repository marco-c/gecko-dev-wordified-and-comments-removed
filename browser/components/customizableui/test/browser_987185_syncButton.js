"
use
strict
"
;
var
syncService
=
{
}
;
Components
.
utils
.
import
(
"
resource
:
/
/
services
-
sync
/
service
.
js
"
syncService
)
;
var
needsSetup
;
var
originalSync
;
var
service
=
syncService
.
Service
;
var
syncWasCalled
=
false
;
add_task
(
function
*
testSyncButtonFunctionality
(
)
{
info
(
"
Check
Sync
button
functionality
"
)
;
storeInitialValues
(
)
;
mockFunctions
(
)
;
CustomizableUI
.
addWidgetToArea
(
"
sync
-
button
"
CustomizableUI
.
AREA_PANEL
)
;
yield
PanelUI
.
show
(
)
;
info
(
"
The
panel
menu
was
opened
"
)
;
let
syncButton
=
document
.
getElementById
(
"
sync
-
button
"
)
;
ok
(
syncButton
"
The
Sync
button
was
added
to
the
Panel
Menu
"
)
;
syncButton
.
click
(
)
;
let
syncPanel
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
"
)
;
ok
(
syncPanel
.
getAttribute
(
"
current
"
)
"
Sync
Panel
is
in
view
"
)
;
let
syncNowButton
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
syncnow
"
)
;
syncNowButton
.
click
(
)
;
info
(
"
The
sync
button
was
clicked
"
)
;
yield
waitForCondition
(
(
)
=
>
syncWasCalled
)
;
}
)
;
add_task
(
function
*
asyncCleanup
(
)
{
yield
resetCustomization
(
)
;
ok
(
CustomizableUI
.
inDefaultState
"
The
panel
UI
is
in
default
state
again
.
"
)
;
if
(
isPanelUIOpen
(
)
)
{
let
panelHidePromise
=
promisePanelHidden
(
window
)
;
PanelUI
.
hide
(
)
;
yield
panelHidePromise
;
}
restoreValues
(
)
;
}
)
;
function
mockFunctions
(
)
{
gSyncUI
.
_needsSetup
=
(
)
=
>
Promise
.
resolve
(
false
)
;
service
.
errorHandler
.
syncAndReportErrors
=
mocked_syncAndReportErrors
;
}
function
mocked_syncAndReportErrors
(
)
{
syncWasCalled
=
true
;
}
function
restoreValues
(
)
{
gSyncUI
.
_needsSetup
=
needsSetup
;
service
.
sync
=
originalSync
;
}
function
storeInitialValues
(
)
{
needsSetup
=
gSyncUI
.
_needsSetup
;
originalSync
=
service
.
sync
;
}
