"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
CustomizableUITestUtils
"
]
;
const
{
Assert
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
)
;
const
{
BrowserTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
BrowserTestUtils
.
jsm
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
class
CustomizableUITestUtils
{
constructor
(
window
)
{
this
.
window
=
window
;
this
.
document
=
window
.
document
;
this
.
PanelUI
=
window
.
PanelUI
;
}
async
openPanelMultiView
(
panel
mainView
openFn
)
{
if
(
panel
.
state
=
=
"
open
"
)
{
Assert
.
ok
(
true
"
A
previous
test
left
the
panel
open
.
This
should
be
"
+
"
fixed
but
we
can
still
do
a
best
-
effort
recovery
and
"
+
"
assume
that
the
requested
view
will
be
made
visible
.
"
)
;
await
openFn
(
)
;
return
;
}
if
(
panel
.
state
=
=
"
hiding
"
)
{
Assert
.
ok
(
true
"
A
previous
test
requested
the
panel
to
close
but
"
+
"
didn
'
t
wait
for
the
operation
to
complete
.
While
"
+
"
the
test
should
be
fixed
we
can
still
continue
.
"
)
;
}
else
{
Assert
.
equal
(
panel
.
state
"
closed
"
"
The
panel
is
closed
to
begin
with
.
"
)
;
}
let
promiseShown
=
BrowserTestUtils
.
waitForEvent
(
mainView
"
ViewShown
"
)
;
await
openFn
(
)
;
await
promiseShown
;
}
async
hidePanelMultiView
(
panel
closeFn
)
{
Assert
.
ok
(
panel
.
state
=
=
"
open
"
"
The
panel
is
open
to
begin
with
.
"
)
;
let
promiseHidden
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
await
closeFn
(
)
;
await
promiseHidden
;
}
async
openMainMenu
(
)
{
await
this
.
openPanelMultiView
(
this
.
PanelUI
.
panel
this
.
PanelUI
.
mainView
(
)
=
>
this
.
PanelUI
.
show
(
)
)
;
}
async
hideMainMenu
(
)
{
await
this
.
hidePanelMultiView
(
this
.
PanelUI
.
panel
(
)
=
>
this
.
PanelUI
.
hide
(
)
)
;
}
async
addSearchBar
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
search
-
container
"
CustomizableUI
.
AREA_NAVBAR
CustomizableUI
.
getPlacementOfWidget
(
"
urlbar
-
container
"
)
.
position
+
1
)
;
await
this
.
window
.
promiseDocumentFlushed
(
(
)
=
>
{
}
)
;
let
navbar
=
this
.
window
.
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
navbar
.
overflowable
.
_lastOverflowCounter
=
=
=
0
;
}
)
;
let
searchbar
=
this
.
window
.
document
.
getElementById
(
"
searchbar
"
)
;
if
(
!
searchbar
)
{
throw
new
Error
(
"
The
search
bar
should
exist
.
"
)
;
}
if
(
searchbar
.
closest
(
"
#
widget
-
overflow
"
)
)
{
throw
new
Error
(
"
The
search
bar
should
not
overflow
from
the
nav
bar
.
"
+
"
This
test
fails
if
the
screen
resolution
is
small
and
"
+
"
the
search
bar
overflows
from
the
nav
bar
.
"
)
;
}
return
searchbar
;
}
removeSearchBar
(
)
{
CustomizableUI
.
removeWidgetFromArea
(
"
search
-
container
"
)
;
}
}
