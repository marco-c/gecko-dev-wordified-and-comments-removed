"
use
strict
"
;
add_task
(
async
function
(
)
{
let
navbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
ok
(
!
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
start
with
a
non
-
overflowing
toolbar
.
"
)
;
ensureToolbarOverflow
(
window
)
;
let
oldChildCount
=
CustomizableUI
.
getCustomizationTarget
(
navbar
)
.
childElementCount
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
ok
(
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
have
an
overflowing
toolbar
.
"
)
;
Assert
.
less
(
CustomizableUI
.
getCustomizationTarget
(
navbar
)
.
childElementCount
oldChildCount
"
Should
have
fewer
children
.
"
)
;
let
newWindow
=
await
openAndLoadWindow
(
)
;
let
otherNavBar
=
newWindow
.
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
otherNavBar
.
hasAttribute
(
"
overflowing
"
)
)
;
ok
(
otherNavBar
.
hasAttribute
(
"
overflowing
"
)
"
Other
window
should
have
an
overflowing
toolbar
.
"
)
;
await
promiseWindowClosed
(
newWindow
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
ok
(
!
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
no
longer
have
an
overflowing
toolbar
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
asyncCleanup
(
)
{
await
resetCustomization
(
)
;
}
)
;
