let
isMac
=
navigator
.
platform
.
indexOf
(
"
Mac
"
)
=
=
0
;
function
checkState
(
allowCut
desc
testWindow
=
window
)
{
is
(
testWindow
.
document
.
getElementById
(
"
cmd_cut
"
)
.
getAttribute
(
"
disabled
"
)
=
=
"
true
"
!
allowCut
desc
+
"
-
cut
"
)
;
is
(
testWindow
.
document
.
getElementById
(
"
cmd_paste
"
)
.
getAttribute
(
"
disabled
"
)
=
=
"
true
"
false
desc
+
"
-
paste
"
)
;
}
function
expectCommandUpdate
(
count
testWindow
=
window
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
overrideController
=
{
supportsCommand
(
cmd
)
{
return
cmd
=
=
"
cmd_delete
"
;
}
isCommandEnabled
(
cmd
)
{
if
(
!
count
)
{
ok
(
false
"
unexpected
update
"
)
;
reject
(
)
;
}
if
(
!
-
-
count
)
{
testWindow
.
gURLBar
.
controllers
.
removeControllerAt
(
0
overrideController
)
;
testWindow
.
gBrowser
.
selectedBrowser
.
controllers
.
removeControllerAt
(
0
overrideController
)
;
resolve
(
true
)
;
}
}
}
;
if
(
!
count
)
{
SimpleTest
.
executeSoon
(
(
)
=
>
{
testWindow
.
gURLBar
.
controllers
.
removeControllerAt
(
0
overrideController
)
;
testWindow
.
gBrowser
.
selectedBrowser
.
controllers
.
removeControllerAt
(
0
overrideController
)
;
resolve
(
false
)
;
}
)
;
}
testWindow
.
gURLBar
.
controllers
.
insertControllerAt
(
0
overrideController
)
;
testWindow
.
gBrowser
.
selectedBrowser
.
controllers
.
insertControllerAt
(
0
overrideController
)
;
}
)
;
}
add_task
(
async
function
test_init
(
)
{
let
clipboardHelper
=
Cc
[
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
]
.
getService
(
Ci
.
nsIClipboardHelper
)
;
await
new
Promise
(
resolve
=
>
{
SimpleTest
.
waitForClipboard
(
"
Sample
"
function
(
)
{
clipboardHelper
.
copyString
(
"
Sample
"
)
;
}
resolve
)
;
}
)
;
await
gCUITestUtils
.
openMainMenu
(
)
;
await
gCUITestUtils
.
hideMainMenu
(
)
;
}
)
;
add_task
(
async
function
test_panelui_opened
(
)
{
document
.
commandDispatcher
.
unlock
(
)
;
gURLBar
.
focus
(
)
;
gURLBar
.
value
=
"
test
"
;
await
gCUITestUtils
.
openMainMenu
(
)
;
checkState
(
false
"
Update
when
edit
-
controls
is
on
panel
and
visible
"
)
;
let
overridePromise
=
expectCommandUpdate
(
1
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
checkState
(
true
"
Update
when
edit
-
controls
is
on
panel
and
selection
changed
"
)
;
overridePromise
=
expectCommandUpdate
(
0
)
;
await
gCUITestUtils
.
hideMainMenu
(
)
;
await
overridePromise
;
checkState
(
true
"
Update
when
edit
-
controls
is
on
panel
and
hidden
"
)
;
overridePromise
=
expectCommandUpdate
(
isMac
?
1
:
0
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
checkState
(
true
"
Update
when
edit
-
controls
is
on
panel
hidden
and
selection
changed
"
)
;
}
)
;
add_task
(
async
function
test_panelui_customize_to_toolbar
(
)
{
await
startCustomizing
(
)
;
let
navbar
=
document
.
getElementById
(
"
nav
-
bar
"
)
;
simulateItemDrag
(
document
.
getElementById
(
"
edit
-
controls
"
)
CustomizableUI
.
getCustomizationTarget
(
navbar
)
"
end
"
)
;
await
endCustomizing
(
)
;
updateEditUIVisibility
(
)
;
gURLBar
.
blur
(
)
;
let
overridePromise
=
expectCommandUpdate
(
1
)
;
gURLBar
.
select
(
)
;
gURLBar
.
focus
(
)
;
gURLBar
.
value
=
"
other
"
;
await
overridePromise
;
checkState
(
false
"
Update
when
edit
-
controls
on
toolbar
and
focused
"
)
;
overridePromise
=
expectCommandUpdate
(
1
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
checkState
(
true
"
Update
when
edit
-
controls
on
toolbar
and
selection
changed
"
)
;
const
kOverflowPanel
=
document
.
getElementById
(
"
widget
-
overflow
"
)
;
let
originalWidth
=
window
.
outerWidth
;
registerCleanupFunction
(
async
function
(
)
{
kOverflowPanel
.
removeAttribute
(
"
animate
"
)
;
window
.
resizeTo
(
originalWidth
window
.
outerHeight
)
;
await
waitForCondition
(
(
)
=
>
!
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
CustomizableUI
.
reset
(
)
;
}
)
;
window
.
resizeTo
(
kForceOverflowWidthPx
window
.
outerHeight
)
;
await
waitForCondition
(
(
)
=
>
navbar
.
hasAttribute
(
"
overflowing
"
)
&
&
!
navbar
.
querySelector
(
"
edit
-
controls
"
)
)
;
overridePromise
=
expectCommandUpdate
(
isMac
?
1
:
0
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
checkState
(
true
"
Update
when
edit
-
controls
is
on
overflow
panel
hidden
and
selection
changed
"
)
;
overridePromise
=
expectCommandUpdate
(
1
)
;
await
navbar
.
overflowable
.
show
(
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
kOverflowPanel
.
hidePopup
(
)
;
overridePromise
=
expectCommandUpdate
(
isMac
?
1
:
0
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
window
.
resizeTo
(
originalWidth
window
.
outerHeight
)
;
await
waitForCondition
(
(
)
=
>
!
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
CustomizableUI
.
addWidgetToArea
(
"
edit
-
controls
"
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
updateEditUIVisibility
(
)
;
overridePromise
=
expectCommandUpdate
(
isMac
?
1
:
0
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
overridePromise
=
expectCommandUpdate
(
1
)
;
await
navbar
.
overflowable
.
show
(
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
kOverflowPanel
.
hidePopup
(
)
;
overridePromise
=
expectCommandUpdate
(
isMac
?
1
:
0
)
;
gURLBar
.
select
(
)
;
await
overridePromise
;
}
)
;
add_task
(
async
function
test_panelui_customize_to_palette
(
)
{
await
startCustomizing
(
)
;
let
palette
=
document
.
getElementById
(
"
customization
-
palette
"
)
;
simulateItemDrag
(
document
.
getElementById
(
"
edit
-
controls
"
)
palette
)
;
await
endCustomizing
(
)
;
updateEditUIVisibility
(
)
;
let
overridePromise
=
expectCommandUpdate
(
isMac
?
1
:
0
)
;
gURLBar
.
focus
(
)
;
gURLBar
.
value
=
"
other
"
;
gURLBar
.
select
(
)
;
await
overridePromise
;
checkState
(
true
"
Update
when
edit
-
controls
is
on
palette
hidden
and
selection
changed
"
)
;
}
)
;
add_task
(
async
function
finish
(
)
{
await
resetCustomization
(
)
;
}
)
;
add_task
(
async
function
test_initial_state
(
)
{
let
testWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
testWindow
)
;
testWindow
.
gBrowser
.
selectedTab
.
focus
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
testWindow
.
gURLBar
.
focused
)
;
let
overridePromise
=
expectCommandUpdate
(
isMac
testWindow
)
;
testWindow
.
gURLBar
.
focus
(
)
;
testWindow
.
gURLBar
.
value
=
"
test
"
;
await
overridePromise
;
checkState
(
!
isMac
"
No
update
when
edit
-
controls
is
on
panel
and
not
visible
"
testWindow
)
;
await
BrowserTestUtils
.
closeWindow
(
testWindow
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
}
)
;
