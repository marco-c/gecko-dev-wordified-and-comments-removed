"
use
strict
"
;
var
button
menuButton
;
add_task
(
async
function
plain_button
(
)
{
button
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
button
.
id
=
"
browser_940307_button
"
;
button
.
setAttribute
(
"
label
"
"
Button
"
)
;
gNavToolbox
.
palette
.
appendChild
(
button
)
;
CustomizableUI
.
addWidgetToArea
(
button
.
id
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
await
waitForOverflowButtonShown
(
)
;
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
let
hiddenAgain
=
promiseOverflowHidden
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
await
hiddenAgain
;
CustomizableUI
.
removeWidgetFromArea
(
button
.
id
)
;
button
.
remove
(
)
;
}
)
;
add_task
(
async
function
searchbar_in_panel
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
search
-
container
"
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
await
waitForOverflowButtonShown
(
)
;
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
let
searchbar
=
document
.
getElementById
(
"
searchbar
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
"
value
"
in
searchbar
&
&
searchbar
.
value
=
=
=
"
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
suggest
.
enabled
"
false
]
]
}
)
;
let
dontShowPopup
=
e
=
>
e
.
preventDefault
(
)
;
let
searchbarPopup
=
searchbar
.
textbox
.
popup
;
searchbarPopup
.
addEventListener
(
"
popupshowing
"
dontShowPopup
)
;
searchbar
.
value
=
"
foo
"
;
searchbar
.
focus
(
)
;
let
contextMenuShown
=
new
Promise
(
resolve
=
>
{
let
listener
=
event
=
>
{
if
(
searchbar
.
_menupopup
&
&
event
.
target
=
=
searchbar
.
_menupopup
)
{
window
.
removeEventListener
(
"
popupshown
"
listener
)
;
resolve
(
searchbar
.
_menupopup
)
;
}
}
;
window
.
addEventListener
(
"
popupshown
"
listener
)
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
searchbar
{
type
:
"
contextmenu
"
button
:
2
}
)
;
let
contextmenu
=
await
contextMenuShown
;
ok
(
isOverflowOpen
(
)
"
Panel
should
still
be
open
"
)
;
let
selectAll
=
contextmenu
.
querySelector
(
"
[
cmd
=
'
cmd_selectAll
'
]
"
)
;
let
contextMenuHidden
=
promisePanelElementHidden
(
window
contextmenu
)
;
contextmenu
.
activateItem
(
selectAll
)
;
await
contextMenuHidden
;
ok
(
isOverflowOpen
(
)
"
Panel
should
still
be
open
"
)
;
let
hiddenPanelPromise
=
promiseOverflowHidden
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
hiddenPanelPromise
;
ok
(
!
isOverflowOpen
(
)
"
Panel
should
no
longer
be
open
"
)
;
searchbarPopup
.
removeEventListener
(
"
popupshowing
"
dontShowPopup
)
;
gURLBar
.
select
(
)
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
disabled_button_in_panel
(
)
{
button
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
button
.
id
=
"
browser_946166_button_disabled
"
;
button
.
setAttribute
(
"
disabled
"
"
true
"
)
;
button
.
setAttribute
(
"
label
"
"
Button
"
)
;
gNavToolbox
.
palette
.
appendChild
(
button
)
;
CustomizableUI
.
addWidgetToArea
(
button
.
id
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
await
waitForOverflowButtonShown
(
)
;
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
AccessibilityUtils
.
setEnv
(
{
mustBeEnabled
:
false
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
AccessibilityUtils
.
resetEnv
(
)
;
is
(
PanelUI
.
overflowPanel
.
state
"
open
"
"
Popup
stays
open
"
)
;
button
.
removeAttribute
(
"
disabled
"
)
;
let
hiddenAgain
=
promiseOverflowHidden
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
await
hiddenAgain
;
button
.
remove
(
)
;
}
)
;
registerCleanupFunction
(
async
function
(
)
{
if
(
button
&
&
button
.
parentNode
)
{
button
.
remove
(
)
;
}
if
(
menuButton
&
&
menuButton
.
parentNode
)
{
menuButton
.
remove
(
)
;
}
if
(
isOverflowOpen
(
)
)
{
let
panelHiddenPromise
=
promiseOverflowHidden
(
window
)
;
PanelUI
.
overflowPanel
.
hidePopup
(
)
;
await
panelHiddenPromise
;
}
CustomizableUI
.
reset
(
)
;
}
)
;
