"
use
strict
"
;
requestLongerTimeout
(
2
)
;
let
{
SyncedTabs
}
=
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
SyncedTabs
.
jsm
"
{
}
)
;
let
{
UIState
}
=
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
UIState
.
jsm
"
{
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
UITour
"
"
resource
:
/
/
/
modules
/
UITour
.
jsm
"
)
;
const
DECKINDEX_TABS
=
0
;
const
DECKINDEX_TABSDISABLED
=
1
;
const
DECKINDEX_FETCHING
=
2
;
const
DECKINDEX_NOCLIENTS
=
3
;
var
initialLocation
=
gBrowser
.
currentURI
.
spec
;
var
newTab
=
null
;
function
updateTabsPanel
(
)
{
let
promiseTabsUpdated
=
promiseObserverNotified
(
"
synced
-
tabs
-
menu
:
test
:
tabs
-
updated
"
)
;
Services
.
obs
.
notifyObservers
(
null
SyncedTabs
.
TOPIC_TABS_CHANGED
)
;
return
promiseTabsUpdated
;
}
let
mockedInternal
=
{
get
isConfiguredToSyncTabs
(
)
{
return
true
;
}
getTabClients
(
)
{
return
Promise
.
resolve
(
[
]
)
;
}
syncTabs
(
)
{
return
Promise
.
resolve
(
)
;
}
hasSyncedThisSession
:
false
}
;
add_task
(
async
function
setup
(
)
{
let
oldInternal
=
SyncedTabs
.
_internal
;
SyncedTabs
.
_internal
=
mockedInternal
;
let
origNotifyStateUpdated
=
UIState
.
_internal
.
notifyStateUpdated
;
UIState
.
_internal
.
notifyStateUpdated
=
(
)
=
>
{
}
;
gSync
.
init
(
)
;
registerCleanupFunction
(
(
)
=
>
{
UIState
.
_internal
.
notifyStateUpdated
=
origNotifyStateUpdated
;
SyncedTabs
.
_internal
=
oldInternal
;
}
)
;
}
)
;
async
function
openPrefsFromMenuPanel
(
expectedPanelId
entryPoint
)
{
info
(
"
Check
Sync
button
functionality
"
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
signup
.
uri
"
"
http
:
/
/
example
.
com
/
"
)
;
CustomizableUI
.
addWidgetToArea
(
"
sync
-
button
"
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
await
waitForOverflowButtonShown
(
)
;
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
if
(
entryPoint
=
=
"
uitour
"
)
{
UITour
.
tourBrowsersByWindow
.
set
(
window
new
Set
(
)
)
;
UITour
.
tourBrowsersByWindow
.
get
(
window
)
.
add
(
gBrowser
.
selectedBrowser
)
;
}
let
syncButton
=
document
.
getElementById
(
"
sync
-
button
"
)
;
ok
(
syncButton
"
The
Sync
button
was
added
to
the
Panel
Menu
"
)
;
let
tabsUpdatedPromise
=
promiseObserverNotified
(
"
synced
-
tabs
-
menu
:
test
:
tabs
-
updated
"
)
;
let
syncPanel
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
"
)
;
let
viewShownPromise
=
BrowserTestUtils
.
waitForEvent
(
syncPanel
"
ViewShown
"
)
;
syncButton
.
click
(
)
;
await
Promise
.
all
(
[
tabsUpdatedPromise
viewShownPromise
]
)
;
ok
(
syncPanel
.
getAttribute
(
"
current
"
)
"
Sync
Panel
is
in
view
"
)
;
let
subpanel
=
document
.
getElementById
(
expectedPanelId
)
ok
(
!
subpanel
.
hidden
"
sync
setup
element
is
visible
"
)
;
let
setupButton
=
subpanel
.
querySelector
(
"
.
PanelUI
-
remotetabs
-
prefs
-
button
"
)
;
setupButton
.
click
(
)
;
await
new
Promise
(
resolve
=
>
{
let
handler
=
async
(
e
)
=
>
{
if
(
e
.
originalTarget
!
=
gBrowser
.
selectedBrowser
.
contentDocument
|
|
e
.
target
.
location
.
href
=
=
"
about
:
blank
"
)
{
info
(
"
Skipping
spurious
'
load
'
event
for
"
+
e
.
target
.
location
.
href
)
;
return
;
}
gBrowser
.
selectedBrowser
.
removeEventListener
(
"
load
"
handler
true
)
;
resolve
(
)
;
}
gBrowser
.
selectedBrowser
.
addEventListener
(
"
load
"
handler
true
)
;
}
)
;
newTab
=
gBrowser
.
selectedTab
;
is
(
gBrowser
.
currentURI
.
spec
"
about
:
preferences
?
entrypoint
=
"
+
entryPoint
+
"
#
sync
"
"
Firefox
Sync
preference
page
opened
with
menupanel
entrypoint
"
)
;
ok
(
!
isOverflowOpen
(
)
"
The
panel
closed
"
)
;
if
(
isOverflowOpen
(
)
)
{
await
hideOverflow
(
)
;
}
}
function
hideOverflow
(
)
{
let
panelHidePromise
=
promiseOverflowHidden
(
window
)
;
PanelUI
.
overflowPanel
.
hidePopup
(
)
;
return
panelHidePromise
;
}
async
function
asyncCleanup
(
)
{
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
remote
.
signup
.
uri
"
)
;
await
resetCustomization
(
)
;
ok
(
CustomizableUI
.
inDefaultState
"
The
panel
UI
is
in
default
state
again
.
"
)
;
BrowserTestUtils
.
addTab
(
gBrowser
initialLocation
)
;
gBrowser
.
removeTab
(
newTab
)
;
UITour
.
tourBrowsersByWindow
.
delete
(
window
)
;
}
add_task
(
async
function
(
)
{
gSync
.
updateAllUI
(
{
status
:
UIState
.
STATUS_NOT_CONFIGURED
}
)
;
await
openPrefsFromMenuPanel
(
"
PanelUI
-
remotetabs
-
setupsync
"
"
synced
-
tabs
"
)
;
}
)
;
add_task
(
asyncCleanup
)
;
add_task
(
async
function
(
)
{
gSync
.
updateAllUI
(
{
status
:
UIState
.
STATUS_LOGIN_FAILED
email
:
"
foo
bar
.
com
"
}
)
;
await
openPrefsFromMenuPanel
(
"
PanelUI
-
remotetabs
-
reauthsync
"
"
synced
-
tabs
"
)
}
)
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
setCharPref
(
"
identity
.
mobilepromo
.
android
"
"
http
:
/
/
example
.
com
/
?
os
=
android
&
tail
=
"
)
;
Services
.
prefs
.
setCharPref
(
"
identity
.
mobilepromo
.
ios
"
"
http
:
/
/
example
.
com
/
?
os
=
ios
&
tail
=
"
)
;
gSync
.
updateAllUI
(
{
status
:
UIState
.
STATUS_SIGNED_IN
email
:
"
foo
bar
.
com
"
}
)
;
let
syncPanel
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
"
)
;
let
links
=
syncPanel
.
querySelectorAll
(
"
.
remotetabs
-
promo
-
link
"
)
;
is
(
links
.
length
2
"
found
2
links
as
expected
"
)
;
for
(
let
link
of
links
)
{
for
(
let
button
=
0
;
button
<
2
;
button
+
+
)
{
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
button
}
link
window
)
;
ok
(
!
isOverflowOpen
(
)
"
click
closed
the
panel
"
)
;
is
(
gBrowser
.
tabs
.
length
2
"
there
'
s
a
new
tab
"
)
;
await
new
Promise
(
resolve
=
>
{
if
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
=
=
"
about
:
blank
"
)
{
gBrowser
.
selectedBrowser
.
addEventListener
(
"
load
"
function
(
e
)
{
resolve
(
)
;
}
{
capture
:
true
once
:
true
}
)
;
return
;
}
resolve
(
)
;
}
)
;
let
os
=
link
.
getAttribute
(
"
mobile
-
promo
-
os
"
)
;
let
expectedUrl
=
http
:
/
/
example
.
com
/
?
os
=
{
os
}
&
tail
=
synced
-
tabs
;
is
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
expectedUrl
"
correct
URL
"
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
}
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
for
(
let
link
of
links
)
{
EventUtils
.
sendMouseEvent
(
{
type
:
"
click
"
button
:
2
}
link
window
)
;
ok
(
isOverflowOpen
(
)
"
panel
remains
open
after
right
-
click
"
)
;
is
(
gBrowser
.
tabs
.
length
1
"
no
new
tab
was
opened
"
)
;
}
await
hideOverflow
(
)
;
Services
.
prefs
.
clearUserPref
(
"
identity
.
mobilepromo
.
android
"
)
;
Services
.
prefs
.
clearUserPref
(
"
identity
.
mobilepromo
.
ios
"
)
;
}
)
;
add_task
(
async
function
(
)
{
gSync
.
updateAllUI
(
{
status
:
UIState
.
STATUS_SIGNED_IN
email
:
"
foo
bar
.
com
"
}
)
;
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
let
tabsUpdatedPromise
=
promiseObserverNotified
(
"
synced
-
tabs
-
menu
:
test
:
tabs
-
updated
"
)
;
let
syncPanel
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
"
)
;
let
viewShownPromise
=
BrowserTestUtils
.
waitForEvent
(
syncPanel
"
ViewShown
"
)
;
let
syncButton
=
document
.
getElementById
(
"
sync
-
button
"
)
;
syncButton
.
click
(
)
;
await
Promise
.
all
(
[
tabsUpdatedPromise
viewShownPromise
]
)
;
ok
(
syncPanel
.
getAttribute
(
"
current
"
)
"
Sync
Panel
is
in
view
"
)
;
let
subpanel
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
main
"
)
ok
(
!
subpanel
.
hidden
"
main
pane
is
visible
"
)
;
let
deck
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
deck
"
)
;
is
(
deck
.
selectedIndex
DECKINDEX_FETCHING
"
first
deck
entry
is
visible
"
)
;
mockedInternal
.
getTabClients
=
(
)
=
>
{
return
Promise
.
resolve
(
[
]
)
;
}
mockedInternal
.
hasSyncedThisSession
=
true
;
await
updateTabsPanel
(
)
;
is
(
deck
.
selectedIndex
DECKINDEX_NOCLIENTS
"
no
-
clients
deck
entry
is
visible
"
)
;
mockedInternal
.
getTabClients
=
(
)
=
>
{
return
Promise
.
resolve
(
[
{
id
:
"
guid_mobile
"
type
:
"
client
"
name
:
"
My
Phone
"
lastModified
:
1492201200
tabs
:
[
]
}
{
id
:
"
guid_desktop
"
type
:
"
client
"
name
:
"
My
Desktop
"
lastModified
:
1492201200
tabs
:
[
{
title
:
"
http
:
/
/
example
.
com
/
10
"
lastUsed
:
10
}
{
title
:
"
http
:
/
/
example
.
com
/
1
"
lastUsed
:
1
}
{
title
:
"
http
:
/
/
example
.
com
/
5
"
lastUsed
:
5
}
]
}
{
id
:
"
guid_second_desktop
"
name
:
"
My
Other
Desktop
"
lastModified
:
1492201200
tabs
:
[
{
title
:
"
http
:
/
/
example
.
com
/
6
"
lastUsed
:
6
}
]
}
]
)
;
}
;
await
updateTabsPanel
(
)
;
is
(
deck
.
selectedIndex
DECKINDEX_TABS
"
no
-
clients
deck
entry
is
visible
"
)
;
let
tabList
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
tabslist
"
)
;
let
node
=
tabList
.
firstChild
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
client
"
"
node
is
a
client
entry
"
)
;
is
(
node
.
textContent
"
My
Desktop
"
"
correct
client
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
tab
"
"
node
is
a
tab
"
)
;
is
(
node
.
getAttribute
(
"
label
"
)
"
http
:
/
/
example
.
com
/
10
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
tab
"
"
node
is
a
tab
"
)
;
is
(
node
.
getAttribute
(
"
label
"
)
"
http
:
/
/
example
.
com
/
5
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
tab
"
"
node
is
a
tab
"
)
;
is
(
node
.
getAttribute
(
"
label
"
)
"
http
:
/
/
example
.
com
/
1
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
nodeName
"
menuseparator
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
client
"
"
node
is
a
client
entry
"
)
;
is
(
node
.
textContent
"
My
Other
Desktop
"
"
correct
client
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
tab
"
"
node
is
a
tab
"
)
;
is
(
node
.
getAttribute
(
"
label
"
)
"
http
:
/
/
example
.
com
/
6
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
nodeName
"
menuseparator
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
client
"
"
node
is
a
client
entry
"
)
;
is
(
node
.
textContent
"
My
Phone
"
"
correct
client
"
)
;
node
=
node
.
nextSibling
;
is
(
node
.
nodeName
"
label
"
"
node
is
a
label
"
)
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
"
"
node
is
neither
a
tab
nor
a
client
"
)
;
node
=
node
.
nextSibling
;
is
(
node
null
"
no
more
entries
"
)
;
let
didSync
=
false
;
let
oldDoSync
=
gSync
.
doSync
;
gSync
.
doSync
=
function
(
)
{
didSync
=
true
;
gSync
.
doSync
=
oldDoSync
;
}
let
syncNowButton
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
syncnow
"
)
;
is
(
syncNowButton
.
disabled
false
)
;
syncNowButton
.
click
(
)
;
ok
(
didSync
"
clicking
the
button
called
the
correct
function
"
)
;
await
hideOverflow
(
)
;
}
)
;
add_task
(
async
function
(
)
{
mockedInternal
.
getTabClients
=
(
)
=
>
{
return
Promise
.
resolve
(
[
{
id
:
"
guid_desktop
"
type
:
"
client
"
name
:
"
My
Desktop
"
lastModified
:
1492201200
tabs
:
function
(
)
{
let
allTabsDesktop
=
[
]
;
for
(
let
i
=
1
;
i
<
=
77
;
i
+
+
)
{
allTabsDesktop
.
push
(
{
title
:
"
Tab
#
"
+
i
}
)
;
}
return
allTabsDesktop
;
}
(
)
}
]
)
;
}
;
gSync
.
updateAllUI
(
{
status
:
UIState
.
STATUS_SIGNED_IN
email
:
"
foo
bar
.
com
"
}
)
;
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
let
tabsUpdatedPromise
=
promiseObserverNotified
(
"
synced
-
tabs
-
menu
:
test
:
tabs
-
updated
"
)
;
let
syncPanel
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
"
)
;
let
viewShownPromise
=
BrowserTestUtils
.
waitForEvent
(
syncPanel
"
ViewShown
"
)
;
let
syncButton
=
document
.
getElementById
(
"
sync
-
button
"
)
;
syncButton
.
click
(
)
;
await
Promise
.
all
(
[
tabsUpdatedPromise
viewShownPromise
]
)
;
ok
(
syncPanel
.
getAttribute
(
"
current
"
)
"
Sync
Panel
is
in
view
"
)
;
let
subpanel
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
main
"
)
ok
(
!
subpanel
.
hidden
"
main
pane
is
visible
"
)
;
let
deck
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
deck
"
)
;
is
(
deck
.
selectedIndex
DECKINDEX_TABS
"
we
should
be
showing
tabs
"
)
;
function
checkTabsPage
(
tabsShownCount
showMoreLabel
)
{
let
tabList
=
document
.
getElementById
(
"
PanelUI
-
remotetabs
-
tabslist
"
)
;
let
node
=
tabList
.
firstChild
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
client
"
"
node
is
a
client
entry
"
)
;
is
(
node
.
textContent
"
My
Desktop
"
"
correct
client
"
)
;
for
(
let
i
=
0
;
i
<
tabsShownCount
;
i
+
+
)
{
node
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
tab
"
"
node
is
a
tab
"
)
;
is
(
node
.
getAttribute
(
"
label
"
)
"
Tab
#
"
+
(
i
+
1
)
"
the
tab
is
the
correct
one
"
)
;
}
let
showMoreButton
;
if
(
showMoreLabel
)
{
node
=
showMoreButton
=
node
.
nextSibling
;
is
(
node
.
getAttribute
(
"
itemtype
"
)
"
showmorebutton
"
"
node
is
a
show
more
button
"
)
;
is
(
node
.
getAttribute
(
"
label
"
)
showMoreLabel
)
;
}
node
=
node
.
nextSibling
;
is
(
node
null
"
no
more
entries
"
)
;
return
showMoreButton
;
}
let
showMoreButton
;
function
clickShowMoreButton
(
)
{
let
promise
=
promiseObserverNotified
(
"
synced
-
tabs
-
menu
:
test
:
tabs
-
updated
"
)
;
showMoreButton
.
click
(
)
;
return
promise
;
}
showMoreButton
=
checkTabsPage
(
25
"
Show
More
"
)
;
await
clickShowMoreButton
(
)
;
showMoreButton
=
checkTabsPage
(
50
"
Show
More
"
)
;
await
clickShowMoreButton
(
)
;
showMoreButton
=
checkTabsPage
(
72
"
Show
All
"
)
;
await
clickShowMoreButton
(
)
;
checkTabsPage
(
77
null
)
;
await
hideOverflow
(
)
;
}
)
;
