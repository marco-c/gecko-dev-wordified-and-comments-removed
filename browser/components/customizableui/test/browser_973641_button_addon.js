"
use
strict
"
;
const
kButton
=
"
test_button_for_addon
"
;
var
initialLocation
=
gBrowser
.
currentURI
.
spec
;
add_task
(
async
function
(
)
{
info
(
"
Check
addon
button
functionality
"
)
;
let
widgetSpec
=
{
id
:
kButton
type
:
"
button
"
onClick
(
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
addons
"
)
;
}
}
;
CustomizableUI
.
createWidget
(
widgetSpec
)
;
CustomizableUI
.
addWidgetToArea
(
kButton
CustomizableUI
.
AREA_NAVBAR
)
;
let
addonButton
=
document
.
getElementById
(
kButton
)
;
let
navBar
=
document
.
getElementById
(
"
nav
-
bar
"
)
;
ok
(
addonButton
"
Addon
button
exists
"
)
;
ok
(
navBar
.
contains
(
addonButton
)
"
Addon
button
is
in
the
navbar
"
)
;
await
checkButtonFunctionality
(
addonButton
)
;
resetTabs
(
)
;
CustomizableUI
.
addWidgetToArea
(
kButton
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
ok
(
!
navBar
.
contains
(
addonButton
)
"
Addon
button
was
removed
from
the
browser
bar
"
)
;
await
waitForOverflowButtonShown
(
)
;
await
document
.
getElementById
(
"
nav
-
bar
"
)
.
overflowable
.
show
(
)
;
var
panelMenu
=
document
.
getElementById
(
"
widget
-
overflow
-
mainView
"
)
;
let
addonButtonInPanel
=
panelMenu
.
getElementsByAttribute
(
"
id
"
kButton
)
;
ok
(
panelMenu
.
contains
(
addonButton
)
"
Addon
button
was
added
to
the
Panel
Menu
"
)
;
await
checkButtonFunctionality
(
addonButtonInPanel
[
0
]
)
;
}
)
;
add_task
(
async
function
asyncCleanup
(
)
{
resetTabs
(
)
;
await
resetCustomization
(
)
;
ok
(
CustomizableUI
.
inDefaultState
"
The
UI
is
in
default
state
again
.
"
)
;
CustomizableUI
.
destroyWidget
(
kButton
)
;
}
)
;
function
resetTabs
(
)
{
while
(
gBrowser
.
tabs
.
length
>
1
)
{
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
BrowserTestUtils
.
addTab
(
gBrowser
initialLocation
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
async
function
checkButtonFunctionality
(
aButton
)
{
aButton
.
click
(
)
;
await
waitForCondition
(
(
)
=
>
gBrowser
.
currentURI
&
&
gBrowser
.
currentURI
.
spec
=
=
"
about
:
addons
"
)
;
}
