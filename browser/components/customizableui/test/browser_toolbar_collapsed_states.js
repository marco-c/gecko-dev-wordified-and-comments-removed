"
use
strict
"
;
function
assertCollapsedToolbarIds
(
expected
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
let
menubarIndex
=
expected
.
indexOf
(
CustomizableUI
.
AREA_MENUBAR
)
;
if
(
menubarIndex
!
=
-
1
)
{
expected
.
splice
(
menubarIndex
1
)
;
}
}
let
collapsedIds
=
CustomizableUI
.
getCollapsedToolbarIds
(
window
)
;
Assert
.
equal
(
collapsedIds
.
size
expected
.
length
)
;
for
(
let
expectedId
of
expected
)
{
Assert
.
ok
(
collapsedIds
.
has
(
expectedId
)
{
expectedId
}
should
be
collapsed
)
;
}
}
registerCleanupFunction
(
async
(
)
=
>
{
await
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
test_toolbar_collapsed_states
(
)
{
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_BOOKMARKS
CustomizableUI
.
AREA_MENUBAR
]
)
;
let
bookmarksToolbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_BOOKMARKS
)
;
setToolbarVisibility
(
bookmarksToolbar
"
newtab
"
)
;
let
newTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
"
about
:
newtab
"
waitForLoad
:
false
}
)
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_MENUBAR
]
)
;
await
BrowserTestUtils
.
removeTab
(
newTab
)
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_BOOKMARKS
CustomizableUI
.
AREA_MENUBAR
]
)
;
setToolbarVisibility
(
bookmarksToolbar
"
always
"
)
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_MENUBAR
]
)
;
setToolbarVisibility
(
bookmarksToolbar
"
never
"
)
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_BOOKMARKS
CustomizableUI
.
AREA_MENUBAR
]
)
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
let
menubarActive
=
BrowserTestUtils
.
waitForEvent
(
window
"
DOMMenuBarActive
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_ALT
"
{
}
)
;
await
menubarActive
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_BOOKMARKS
CustomizableUI
.
AREA_MENUBAR
]
)
;
let
menubarInactive
=
BrowserTestUtils
.
waitForEvent
(
window
"
DOMMenuBarInactive
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
)
;
await
menubarInactive
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_BOOKMARKS
CustomizableUI
.
AREA_MENUBAR
]
)
;
let
menubar
=
document
.
getElementById
(
CustomizableUI
.
AREA_MENUBAR
)
;
setToolbarVisibility
(
menubar
true
)
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_BOOKMARKS
]
)
;
setToolbarVisibility
(
menubar
false
)
;
assertCollapsedToolbarIds
(
[
CustomizableUI
.
AREA_BOOKMARKS
CustomizableUI
.
AREA_MENUBAR
]
)
;
}
}
)
;
