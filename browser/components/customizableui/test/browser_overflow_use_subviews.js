"
use
strict
"
;
const
kOverflowPanel
=
document
.
getElementById
(
"
widget
-
overflow
"
)
;
var
gOriginalWidth
;
registerCleanupFunction
(
async
function
(
)
{
kOverflowPanel
.
removeAttribute
(
"
animate
"
)
;
window
.
resizeTo
(
gOriginalWidth
window
.
outerHeight
)
;
await
waitForCondition
(
(
)
=
>
!
document
.
getElementById
(
"
nav
-
bar
"
)
.
hasAttribute
(
"
overflowing
"
)
)
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
check_developer_subview_in_overflow
(
)
{
kOverflowPanel
.
setAttribute
(
"
animate
"
"
false
"
)
;
gOriginalWidth
=
window
.
outerWidth
;
CustomizableUI
.
addWidgetToArea
(
"
developer
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
if
(
isNotReleaseOrBeta
(
)
)
{
CustomizableUI
.
addWidgetToArea
(
"
webcompat
-
reporter
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
}
let
navbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
ok
(
!
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
start
with
a
non
-
overflowing
toolbar
.
"
)
;
window
.
resizeTo
(
400
window
.
outerHeight
)
;
await
waitForCondition
(
(
)
=
>
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
let
chevron
=
document
.
getElementById
(
"
nav
-
bar
-
overflow
-
button
"
)
;
let
shownPanelPromise
=
promisePanelElementShown
(
window
kOverflowPanel
)
;
chevron
.
click
(
)
;
await
shownPanelPromise
;
let
developerView
=
document
.
getElementById
(
"
PanelUI
-
developer
"
)
;
let
button
=
document
.
getElementById
(
"
developer
-
button
"
)
;
let
subviewShownPromise
=
subviewShown
(
developerView
)
;
button
.
click
(
)
;
await
subviewShownPromise
;
let
hasSubviews
=
!
!
kOverflowPanel
.
querySelector
(
"
photonpanelmultiview
"
)
;
let
expectedPanel
=
hasSubviews
?
kOverflowPanel
:
document
.
getElementById
(
"
customizationui
-
widget
-
panel
"
)
;
is
(
developerView
.
closest
(
"
panel
"
)
expectedPanel
"
Should
be
inside
the
panel
"
)
;
expectedPanel
.
hidePopup
(
)
;
await
Promise
.
resolve
(
)
;
}
)
;
add_task
(
async
function
check_downloads_panel_in_overflow
(
)
{
let
navbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
ok
(
navbar
.
hasAttribute
(
"
overflowing
"
)
"
Should
still
be
overflowing
"
)
;
let
chevron
=
document
.
getElementById
(
"
nav
-
bar
-
overflow
-
button
"
)
;
let
shownPanelPromise
=
promisePanelElementShown
(
window
kOverflowPanel
)
;
chevron
.
click
(
)
;
await
shownPanelPromise
;
let
button
=
document
.
getElementById
(
"
downloads
-
button
"
)
;
button
.
click
(
)
;
await
waitForCondition
(
(
)
=
>
{
let
panel
=
document
.
getElementById
(
"
downloadsPanel
"
)
;
return
panel
&
&
panel
.
state
!
=
"
closed
"
;
}
)
;
let
downloadsPanel
=
document
.
getElementById
(
"
downloadsPanel
"
)
;
isnot
(
downloadsPanel
.
state
"
closed
"
"
Should
be
attempting
to
show
the
downloads
panel
.
"
)
;
downloadsPanel
.
hidePopup
(
)
;
}
)
;
