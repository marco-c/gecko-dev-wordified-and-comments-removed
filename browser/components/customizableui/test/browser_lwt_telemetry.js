"
use
strict
"
;
add_task
(
function
clearTelemetry
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
add_task
(
async
function
testCustomize
(
)
{
let
getMoreURL
=
"
about
:
blank
#
getMoreThemes
"
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
lightweightThemes
.
getMoreURL
"
getMoreURL
]
]
}
)
;
await
startCustomizing
(
)
;
let
footerRow
=
document
.
getElementById
(
"
customization
-
lwtheme
-
menu
-
footer
"
)
;
let
[
manageButton
getMoreButton
]
=
footerRow
.
childNodes
;
let
waitForNewTab
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
addons
"
)
;
manageButton
.
click
(
)
;
let
addonsTab
=
await
waitForNewTab
;
is
(
gBrowser
.
currentURI
.
spec
"
about
:
addons
"
"
Manage
opened
about
:
addons
"
)
;
BrowserTestUtils
.
removeTab
(
addonsTab
)
;
waitForNewTab
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
getMoreURL
)
;
getMoreButton
.
click
(
)
;
addonsTab
=
await
waitForNewTab
;
is
(
gBrowser
.
currentURI
.
spec
getMoreURL
"
Get
more
opened
AMO
"
)
;
BrowserTestUtils
.
removeTab
(
addonsTab
)
;
let
snapshot
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
true
)
;
ok
(
snapshot
.
parent
&
&
snapshot
.
parent
.
length
>
0
"
Got
parent
telemetry
events
in
the
snapshot
"
)
;
let
relatedEvents
=
snapshot
.
parent
.
filter
(
(
[
timestamp
category
method
object
]
)
=
>
category
=
=
"
addonsManager
"
&
&
object
=
=
"
customize
"
)
.
map
(
relatedEvent
=
>
relatedEvent
.
slice
(
2
6
)
)
;
Assert
.
deepEqual
(
relatedEvents
[
[
"
link
"
"
customize
"
"
manageThemes
"
]
[
"
link
"
"
customize
"
"
getThemes
"
]
]
"
The
events
are
recorded
correctly
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
documentElement
.
getAttribute
(
"
customizing
"
)
=
=
"
true
"
)
;
await
endCustomizing
(
)
;
}
)
;
