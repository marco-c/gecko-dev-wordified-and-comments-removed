"
use
strict
"
;
function
isFullscreenSizeMode
(
)
{
let
sizemode
=
document
.
documentElement
.
getAttribute
(
"
sizemode
"
)
;
return
sizemode
=
=
"
fullscreen
"
;
}
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
photon
.
structure
.
enabled
"
false
]
]
}
)
;
let
shownPanelPromise
=
promisePanelShown
(
window
)
;
PanelUI
.
toggle
(
{
type
:
"
command
"
}
)
;
await
shownPanelPromise
;
let
hiddenPanelPromise
=
promisePanelHidden
(
window
)
;
PanelUI
.
toggle
(
{
type
:
"
command
"
}
)
;
await
hiddenPanelPromise
;
let
fullscreenButton
=
document
.
getElementById
(
"
fullscreen
-
button
"
)
;
ok
(
!
fullscreenButton
.
checked
"
Fullscreen
button
should
not
be
checked
when
not
in
fullscreen
.
"
)
ok
(
!
isFullscreenSizeMode
(
)
"
Should
not
be
in
fullscreen
sizemode
before
we
enter
fullscreen
.
"
)
;
BrowserFullScreen
(
)
;
await
waitForCondition
(
(
)
=
>
isFullscreenSizeMode
(
)
)
;
ok
(
fullscreenButton
.
checked
"
Fullscreen
button
should
be
checked
when
in
fullscreen
.
"
)
await
startCustomizing
(
)
;
let
fullscreenButtonWrapper
=
document
.
getElementById
(
"
wrapper
-
fullscreen
-
button
"
)
;
ok
(
fullscreenButtonWrapper
.
hasAttribute
(
"
itemobserves
"
)
"
Observer
should
be
moved
to
wrapper
"
)
;
fullscreenButton
=
document
.
getElementById
(
"
fullscreen
-
button
"
)
;
ok
(
!
fullscreenButton
.
hasAttribute
(
"
observes
"
)
"
Observer
should
be
removed
from
button
"
)
;
ok
(
!
fullscreenButton
.
checked
"
Fullscreen
button
should
no
longer
be
checked
during
customization
mode
"
)
;
await
endCustomizing
(
)
;
BrowserFullScreen
(
)
;
fullscreenButton
=
document
.
getElementById
(
"
fullscreen
-
button
"
)
;
await
waitForCondition
(
(
)
=
>
!
isFullscreenSizeMode
(
)
)
;
ok
(
!
fullscreenButton
.
checked
"
Fullscreen
button
should
not
be
checked
when
not
in
fullscreen
.
"
)
}
)
;
