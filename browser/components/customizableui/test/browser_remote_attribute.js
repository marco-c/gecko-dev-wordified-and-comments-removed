"
use
strict
"
;
add_setup
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
pocket
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
check_remote_attribute
(
)
{
let
pocketPanelShown
=
popupShown
(
document
)
;
let
pocketButton
=
document
.
getElementById
(
"
save
-
to
-
pocket
-
button
"
)
;
pocketButton
.
click
(
)
;
await
pocketPanelShown
;
let
pocketPanel
=
document
.
getElementById
(
"
customizationui
-
widget
-
panel
"
)
;
is
(
pocketPanel
.
getAttribute
(
"
remote
"
)
"
true
"
"
Pocket
panel
has
remote
attribute
"
)
;
let
pocketPanelHidden
=
popupHidden
(
pocketPanel
)
;
pocketPanel
.
hidePopup
(
)
;
await
pocketPanelHidden
;
}
)
;
add_task
(
async
function
check_remote_attribute_overflow
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
overflowPanel
=
win
.
document
.
getElementById
(
"
widget
-
overflow
"
)
;
overflowPanel
.
setAttribute
(
"
animate
"
"
false
"
)
;
win
.
resizeTo
(
kForceOverflowWidthPx
win
.
outerHeight
)
;
let
navbar
=
win
.
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
navbar
.
hasAttribute
(
"
overflowing
"
)
)
;
let
overflowPanelShown
=
popupShown
(
overflowPanel
)
;
let
overflowPanelButton
=
win
.
document
.
getElementById
(
"
nav
-
bar
-
overflow
-
button
"
)
;
overflowPanelButton
.
click
(
)
;
await
overflowPanelShown
;
let
pocketButton
=
win
.
document
.
getElementById
(
"
save
-
to
-
pocket
-
button
"
)
;
pocketButton
.
click
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
win
.
document
"
ViewShown
"
)
;
is
(
overflowPanel
.
getAttribute
(
"
remote
"
)
"
true
"
"
Pocket
overflow
panel
has
remote
attribute
"
)
;
let
overflowPanelHidden
=
popupHidden
(
overflowPanel
)
;
overflowPanel
.
hidePopup
(
)
;
await
overflowPanelHidden
;
overflowPanel
.
removeAttribute
(
"
animate
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
