"
use
strict
"
;
const
kHiddenButtonID
=
"
fake
-
hidden
-
button
"
;
const
kDisplayNoneButtonID
=
"
display
-
none
-
button
"
;
const
kWebExtensionButtonID1
=
"
fake
-
webextension
-
button
-
1
"
;
const
kWebExtensionButtonID2
=
"
fake
-
webextension
-
button
-
2
"
;
let
gWin
=
null
;
add_setup
(
async
function
(
)
{
gWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
widgetIDs
=
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_NAVBAR
)
;
for
(
let
widgetID
of
widgetIDs
)
{
if
(
CustomizableUI
.
isWidgetRemovable
(
widgetID
)
)
{
CustomizableUI
.
removeWidgetFromArea
(
widgetID
)
;
}
}
CustomizableUI
.
createWidget
(
{
id
:
kWebExtensionButtonID1
label
:
"
Test
WebExtension
widget
1
"
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
webExtension
:
true
}
)
;
CustomizableUI
.
createWidget
(
{
id
:
kWebExtensionButtonID2
label
:
"
Test
WebExtension
widget
2
"
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
webExtension
:
true
}
)
;
for
(
let
webExtID
of
[
kWebExtensionButtonID1
kWebExtensionButtonID2
]
)
{
let
webExtNode
=
CustomizableUI
.
getWidget
(
webExtID
)
.
forWindow
(
gWin
)
.
node
;
webExtNode
.
style
.
minWidth
=
"
100px
"
;
}
CustomizableUI
.
createWidget
(
{
id
:
kHiddenButtonID
label
:
"
Test
hidden
=
true
widget
"
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
}
)
;
let
hiddenButtonNode
=
CustomizableUI
.
getWidget
(
kHiddenButtonID
)
.
forWindow
(
gWin
)
.
node
;
hiddenButtonNode
.
hidden
=
true
;
CustomizableUI
.
createWidget
(
{
id
:
kDisplayNoneButtonID
label
:
"
Test
display
:
none
widget
"
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
}
)
;
let
displayNoneButtonNode
=
CustomizableUI
.
getWidget
(
kDisplayNoneButtonID
)
.
forWindow
(
gWin
)
.
node
;
displayNoneButtonNode
.
style
.
display
=
"
none
"
;
registerCleanupFunction
(
async
(
)
=
>
{
CustomizableUI
.
destroyWidget
(
kWebExtensionButtonID1
)
;
CustomizableUI
.
destroyWidget
(
kWebExtensionButtonID2
)
;
CustomizableUI
.
destroyWidget
(
kHiddenButtonID
)
;
CustomizableUI
.
destroyWidget
(
kDisplayNoneButtonID
)
;
await
BrowserTestUtils
.
closeWindow
(
gWin
)
;
await
CustomizableUI
.
reset
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_hidden_widget_overflow
(
)
{
gWin
.
resizeTo
(
kForceOverflowWidthPx
window
.
outerHeight
)
;
let
webExtNode
=
CustomizableUI
.
getWidget
(
kWebExtensionButtonID1
)
.
forWindow
(
gWin
)
.
node
;
await
BrowserTestUtils
.
waitForMutationCondition
(
webExtNode
{
attributes
:
true
}
(
)
=
>
{
return
webExtNode
.
hasAttribute
(
"
overflowedItem
"
)
;
}
)
;
let
hiddenButtonNode
=
CustomizableUI
.
getWidget
(
kHiddenButtonID
)
.
forWindow
(
gWin
)
.
node
;
Assert
.
ok
(
hiddenButtonNode
.
hasAttribute
(
"
overflowedItem
"
)
"
Hidden
button
should
be
overflowed
.
"
)
;
let
overflowButton
=
gWin
.
document
.
getElementById
(
"
nav
-
bar
-
overflow
-
button
"
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_visible
(
overflowButton
)
"
Overflow
panel
button
should
be
hidden
.
"
)
;
}
)
;
