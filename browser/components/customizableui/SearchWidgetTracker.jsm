"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
SearchWidgetTracker
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
const
WIDGET_ID
=
"
search
-
container
"
;
const
PREF_NAME
=
"
browser
.
search
.
widget
.
inNavBar
"
;
const
SearchWidgetTracker
=
{
init
(
)
{
this
.
onWidgetAdded
=
this
.
onWidgetRemoved
=
(
widgetId
area
)
=
>
{
if
(
widgetId
=
=
WIDGET_ID
&
&
area
=
=
CustomizableUI
.
AREA_NAVBAR
)
{
this
.
syncPreferenceWithWidget
(
)
;
}
}
;
this
.
onWidgetReset
=
this
.
onWidgetUndoMove
=
node
=
>
{
if
(
node
.
id
=
=
WIDGET_ID
)
{
this
.
syncPreferenceWithWidget
(
)
;
}
}
;
CustomizableUI
.
addListener
(
this
)
;
Services
.
prefs
.
addObserver
(
PREF_NAME
(
)
=
>
this
.
syncWidgetWithPreference
(
)
)
;
this
.
syncPreferenceWithWidget
(
)
;
}
onCustomizeEnd
(
)
{
this
.
syncPreferenceWithWidget
(
)
;
}
syncPreferenceWithWidget
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_NAME
this
.
widgetIsInNavBar
)
;
}
syncWidgetWithPreference
(
)
{
let
newValue
=
Services
.
prefs
.
getBoolPref
(
PREF_NAME
)
;
if
(
newValue
=
=
this
.
widgetIsInNavBar
)
{
return
;
}
if
(
newValue
)
{
CustomizableUI
.
addWidgetToArea
(
WIDGET_ID
CustomizableUI
.
AREA_NAVBAR
CustomizableUI
.
getPlacementOfWidget
(
"
urlbar
-
container
"
)
.
position
+
1
)
;
}
else
{
CustomizableUI
.
removeWidgetFromArea
(
WIDGET_ID
)
;
}
}
get
widgetIsInNavBar
(
)
{
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
WIDGET_ID
)
;
return
placement
?
placement
.
area
=
=
CustomizableUI
.
AREA_NAVBAR
:
false
;
}
}
;
