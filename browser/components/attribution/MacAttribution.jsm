"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
MacAttribution
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
ConsoleAPI
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
.
ConsoleAPI
;
let
consoleOptions
=
{
maxLogLevel
:
"
error
"
maxLogLevelPref
:
"
browser
.
attribution
.
mac
.
loglevel
"
prefix
:
"
MacAttribution
"
}
;
return
new
ConsoleAPI
(
consoleOptions
)
;
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Subprocess
"
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
jsm
"
)
;
function
getQuarantineDatabasePath
(
)
{
let
file
=
Services
.
dirsvc
.
get
(
"
Home
"
Ci
.
nsIFile
)
;
file
.
append
(
"
Library
"
)
;
file
.
append
(
"
Preferences
"
)
;
file
.
append
(
"
com
.
apple
.
LaunchServices
.
QuarantineEventsV2
"
)
;
return
file
.
path
;
}
async
function
getQuarantineAttributes
(
path
)
{
let
bytes
=
await
IOUtils
.
getMacXAttr
(
path
"
com
.
apple
.
quarantine
"
)
;
if
(
!
bytes
)
{
throw
new
Components
.
Exception
(
No
macOS
quarantine
xattrs
found
for
{
path
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
}
let
string
=
new
TextDecoder
(
"
utf
-
8
"
)
.
decode
(
bytes
)
;
let
parts
=
string
.
split
(
"
;
"
)
;
if
(
!
parts
.
length
)
{
throw
new
Components
.
Exception
(
macOS
quarantine
data
is
not
;
separated
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
let
guid
=
parts
[
parts
.
length
-
1
]
;
if
(
guid
.
length
!
=
36
)
{
throw
new
Components
.
Exception
(
macOS
quarantine
data
guid
is
not
length
36
:
{
guid
.
length
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
return
{
guid
parts
}
;
}
async
function
queryQuarantineDatabase
(
guid
path
=
getQuarantineDatabasePath
(
)
)
{
let
query
=
SELECT
COUNT
(
*
)
LSQuarantineOriginURLString
FROM
LSQuarantineEvent
WHERE
LSQuarantineEventIdentifier
=
'
{
guid
}
'
ORDER
BY
LSQuarantineTimeStamp
DESC
LIMIT
1
;
let
proc
=
await
Subprocess
.
call
(
{
command
:
"
/
usr
/
bin
/
sqlite3
"
arguments
:
[
path
query
]
environment
:
{
}
stderr
:
"
stdout
"
}
)
;
let
stdout
=
await
proc
.
stdout
.
readString
(
)
;
let
{
exitCode
}
=
await
proc
.
wait
(
)
;
if
(
exitCode
!
=
0
)
{
throw
new
Components
.
Exception
(
"
Failed
to
run
sqlite3
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
let
parts
=
stdout
.
split
(
"
|
"
2
)
;
if
(
parts
.
length
!
=
2
)
{
throw
new
Components
.
Exception
(
"
Failed
to
parse
sqlite3
output
"
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
if
(
parts
[
0
]
.
trim
(
)
=
=
"
0
"
)
{
throw
new
Components
.
Exception
(
Quarantine
database
does
not
contain
URL
for
guid
{
guid
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
return
parts
[
1
]
.
trim
(
)
;
}
var
MacAttribution
=
{
get
applicationPath
(
)
{
return
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
.
parent
.
parent
.
path
;
}
async
getReferrerUrl
(
path
=
this
.
applicationPath
)
{
log
.
debug
(
getReferrerUrl
(
{
JSON
.
stringify
(
path
)
}
)
)
;
let
guid
;
try
{
guid
=
(
await
getQuarantineAttributes
(
path
)
)
.
guid
;
}
catch
(
ex
)
{
throw
new
Components
.
Exception
(
No
macOS
quarantine
GUID
found
for
{
path
}
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
}
log
.
debug
(
getReferrerUrl
:
guid
:
{
guid
}
)
;
let
url
=
"
"
;
try
{
url
=
await
queryQuarantineDatabase
(
guid
)
;
log
.
debug
(
getReferrerUrl
:
url
:
{
url
}
)
;
}
catch
(
ex
)
{
throw
new
Components
.
Exception
(
No
macOS
quarantine
referrer
URL
found
for
{
path
}
with
GUID
{
guid
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
}
return
url
;
}
}
;
