"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AttributionCode
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
URL
"
]
)
;
const
ATTR_CODE_MAX_LENGTH
=
1010
;
const
ATTR_CODE_VALUE_REGEX
=
/
[
a
-
zA
-
Z0
-
9_
%
\
\
-
\
\
.
\
\
(
\
\
)
]
*
/
;
const
ATTR_CODE_FIELD_SEPARATOR
=
"
%
26
"
;
const
ATTR_CODE_KEY_VALUE_SEPARATOR
=
"
%
3D
"
;
const
ATTR_CODE_KEYS
=
[
"
source
"
"
medium
"
"
campaign
"
"
content
"
"
experiment
"
"
variation
"
"
ua
"
]
;
let
gCachedAttrData
=
null
;
var
AttributionCode
=
{
get
attributionFile
(
)
{
let
file
=
Services
.
dirsvc
.
get
(
"
LocalAppData
"
Ci
.
nsIFile
)
;
file
.
append
(
Services
.
appinfo
.
vendor
|
|
"
mozilla
"
)
;
file
.
append
(
AppConstants
.
MOZ_APP_NAME
)
;
file
.
append
(
"
postSigningData
"
)
;
return
file
;
}
async
writeAttributionFile
(
code
)
{
const
file
=
AttributionCode
.
attributionFile
;
await
OS
.
File
.
makeDir
(
file
.
parent
.
path
{
ignoreExisting
:
true
from
:
file
.
parent
.
parent
.
path
}
)
;
await
OS
.
File
.
writeAtomic
(
file
.
path
code
)
;
}
get
allowedCodeKeys
(
)
{
return
[
.
.
.
ATTR_CODE_KEYS
]
;
}
parseAttributionCode
(
code
)
{
if
(
code
.
length
>
ATTR_CODE_MAX_LENGTH
)
{
return
{
}
;
}
let
isValid
=
true
;
let
parsed
=
{
}
;
for
(
let
param
of
code
.
split
(
ATTR_CODE_FIELD_SEPARATOR
)
)
{
let
[
key
value
]
=
param
.
split
(
ATTR_CODE_KEY_VALUE_SEPARATOR
2
)
;
if
(
key
&
&
ATTR_CODE_KEYS
.
includes
(
key
)
)
{
if
(
value
&
&
ATTR_CODE_VALUE_REGEX
.
test
(
value
)
)
{
parsed
[
key
]
=
value
;
}
}
else
{
isValid
=
false
;
break
;
}
}
if
(
isValid
)
{
return
parsed
;
}
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_ATTRIBUTION_ERRORS
"
)
.
add
(
"
decode_error
"
)
;
return
{
}
;
}
serializeAttributionData
(
data
)
{
let
s
=
"
"
;
for
(
let
key
of
ATTR_CODE_KEYS
)
{
if
(
key
in
data
)
{
let
value
=
data
[
key
]
;
if
(
s
)
{
s
+
=
ATTR_CODE_FIELD_SEPARATOR
;
}
s
+
=
{
key
}
{
ATTR_CODE_KEY_VALUE_SEPARATOR
}
{
value
}
;
}
}
return
s
;
}
async
getAttrDataAsync
(
)
{
if
(
gCachedAttrData
!
=
null
)
{
return
gCachedAttrData
;
}
gCachedAttrData
=
{
}
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
let
bytes
;
try
{
bytes
=
await
OS
.
File
.
read
(
this
.
attributionFile
.
path
)
;
}
catch
(
ex
)
{
if
(
ex
instanceof
OS
.
File
.
Error
&
&
ex
.
becauseNoSuchFile
)
{
return
gCachedAttrData
;
}
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_ATTRIBUTION_ERRORS
"
)
.
add
(
"
read_error
"
)
;
}
if
(
bytes
)
{
try
{
let
decoder
=
new
TextDecoder
(
)
;
let
code
=
decoder
.
decode
(
bytes
)
;
gCachedAttrData
=
this
.
parseAttributionCode
(
code
)
;
}
catch
(
ex
)
{
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_ATTRIBUTION_ERRORS
"
)
.
add
(
"
decode_error
"
)
;
}
}
}
else
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
const
{
MacAttribution
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
MacAttribution
.
jsm
"
)
;
try
{
let
referrer
=
await
MacAttribution
.
getReferrerUrl
(
)
;
let
params
=
new
URL
(
referrer
)
.
searchParams
;
for
(
let
key
of
ATTR_CODE_KEYS
)
{
for
(
let
paramKey
of
[
utm_
{
key
}
funnel_
{
key
}
key
]
)
{
if
(
params
.
has
(
paramKey
)
)
{
let
value
=
encodeURIComponent
(
params
.
get
(
paramKey
)
)
;
if
(
value
&
&
ATTR_CODE_VALUE_REGEX
.
test
(
value
)
)
{
gCachedAttrData
[
key
]
=
value
;
}
}
}
}
}
catch
(
ex
)
{
}
}
return
gCachedAttrData
;
}
getCachedAttributionData
(
)
{
return
gCachedAttrData
;
}
async
deleteFileAsync
(
)
{
try
{
await
OS
.
File
.
remove
(
this
.
attributionFile
.
path
)
;
}
catch
(
ex
)
{
}
}
_clearCache
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
if
(
env
.
exists
(
"
XPCSHELL_TEST_PROFILE_DIR
"
)
)
{
gCachedAttrData
=
null
;
}
}
}
;
