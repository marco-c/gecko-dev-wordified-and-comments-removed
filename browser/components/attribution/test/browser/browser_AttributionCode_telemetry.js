ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryTestUtils
"
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
{
sinon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
)
;
add_task
(
async
function
test_parse_error
(
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
const
{
MacAttribution
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
MacAttribution
.
jsm
"
)
;
let
attributionSvc
=
Cc
[
"
mozilla
.
org
/
mac
-
attribution
;
1
"
]
.
getService
(
Ci
.
nsIMacAttributionService
)
;
attributionSvc
.
setReferrerUrl
(
MacAttribution
.
applicationPath
"
"
true
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
}
)
;
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_ATTRIBUTION_ERRORS
"
)
;
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
histogram
.
clear
(
)
;
let
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
{
}
"
Shouldn
'
t
be
able
to
get
a
result
if
the
file
doesn
'
t
exist
"
)
;
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
await
AttributionCode
.
writeAttributionFile
(
AppConstants
.
platform
=
=
"
macosx
"
?
"
invalid
"
:
"
"
)
;
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
{
}
"
Should
have
failed
to
parse
"
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
INDEX_DECODE_ERROR
1
)
;
histogram
.
clear
(
)
;
}
)
;
add_task
(
async
function
test_read_error
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
}
)
;
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_ATTRIBUTION_ERRORS
"
)
;
const
sandbox
=
sinon
.
createSandbox
(
)
;
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
histogram
.
clear
(
)
;
const
exists
=
sandbox
.
stub
(
OS
.
File
"
exists
"
)
;
exists
.
resolves
(
true
)
;
const
read
=
sandbox
.
stub
(
OS
.
File
"
read
"
)
;
read
.
throws
(
(
)
=
>
new
Error
(
"
read_error
"
)
)
;
await
AttributionCode
.
getAttrDataAsync
(
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
INDEX_READ_ERROR
1
)
;
histogram
.
clear
(
)
;
sandbox
.
restore
(
)
;
}
)
;
