ChromeUtils
.
defineESModuleGetters
(
this
{
TelemetryTestUtils
:
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
}
)
;
const
{
AttributionIOUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
AttributionCode
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_parse_error
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
}
)
;
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_ATTRIBUTION_ERRORS
"
)
;
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
histogram
.
clear
(
)
;
let
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
{
}
"
Shouldn
'
t
be
able
to
get
a
result
if
the
file
doesn
'
t
exist
"
)
;
if
(
AppConstants
.
platform
=
=
=
"
win
"
&
&
!
Services
.
sysinfo
.
getProperty
(
"
hasWinPackageId
"
)
)
{
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
await
AttributionCode
.
writeAttributionFile
(
"
"
)
;
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
{
}
"
Should
have
failed
to
parse
"
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
INDEX_DECODE_ERROR
1
)
;
histogram
.
clear
(
)
;
}
}
)
;
add_task
(
async
function
test_read_error
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
}
)
;
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_ATTRIBUTION_ERRORS
"
)
;
await
AttributionCode
.
deleteFileAsync
(
)
;
AttributionCode
.
_clearCache
(
)
;
histogram
.
clear
(
)
;
let
oldExists
=
AttributionIOUtils
.
exists
;
AttributionIOUtils
.
exists
=
(
)
=
>
true
;
let
oldRead
=
AttributionIOUtils
.
read
;
AttributionIOUtils
.
read
=
(
)
=
>
{
throw
new
Error
(
"
read_error
"
)
;
}
;
let
oldMsixCampaignId
=
AttributionCode
.
msixCampaignId
;
AttributionCode
.
msixCampaignId
=
async
(
)
=
>
{
throw
new
Error
(
"
read_error
"
)
;
}
;
registerCleanupFunction
(
(
)
=
>
{
AttributionIOUtils
.
exists
=
oldExists
;
AttributionIOUtils
.
read
=
oldRead
;
AttributionCode
.
msixCampaignId
=
oldMsixCampaignId
;
}
)
;
await
AttributionCode
.
getAttrDataAsync
(
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
INDEX_READ_ERROR
1
)
;
histogram
.
clear
(
)
;
}
)
;
