"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
add_task
(
async
function
testValidAttrCodes
(
)
{
let
appPath
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
.
parent
.
parent
.
path
;
let
attributionSvc
=
Cc
[
"
mozilla
.
org
/
mac
-
attribution
;
1
"
]
.
getService
(
Ci
.
nsIMacAttributionService
)
;
for
(
let
entry
of
validAttrCodes
)
{
let
url
=
http
:
/
/
example
.
com
?
{
encodeURI
(
decodeURIComponent
(
entry
.
code
)
)
}
;
attributionSvc
.
setReferrerUrl
(
appPath
url
true
)
;
let
referrer
=
attributionSvc
.
getReferrerUrl
(
appPath
)
;
equal
(
referrer
url
"
overwrite
referrer
url
"
)
;
AttributionCode
.
_clearCache
(
)
;
let
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
entry
.
parsed
"
Parsed
code
should
match
expected
value
code
was
:
"
+
entry
.
code
)
;
attributionSvc
.
setReferrerUrl
(
appPath
"
http
:
/
/
test
.
com
"
false
)
;
referrer
=
attributionSvc
.
getReferrerUrl
(
appPath
)
;
equal
(
referrer
url
"
update
referrer
url
"
)
;
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
entry
.
parsed
"
Parsed
code
should
match
expected
value
code
was
:
"
+
entry
.
code
)
;
}
}
)
;
add_task
(
async
function
testInvalidAttrCodes
(
)
{
let
appPath
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
.
parent
.
parent
.
path
;
let
attributionSvc
=
Cc
[
"
mozilla
.
org
/
mac
-
attribution
;
1
"
]
.
getService
(
Ci
.
nsIMacAttributionService
)
;
for
(
let
code
of
invalidAttrCodes
)
{
let
url
=
http
:
/
/
example
.
com
?
{
code
}
;
let
referrer
;
try
{
attributionSvc
.
setReferrerUrl
(
appPath
url
true
)
;
referrer
=
attributionSvc
.
getReferrerUrl
(
appPath
)
;
}
catch
(
ex
)
{
continue
;
}
if
(
!
referrer
)
{
continue
;
}
equal
(
referrer
url
"
overwrite
referrer
url
"
)
;
AttributionCode
.
_clearCache
(
)
;
let
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
{
}
"
Code
should
have
failed
to
parse
:
"
+
code
)
;
}
}
)
;
