"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
add_task
(
async
(
)
=
>
{
await
setupStubs
(
)
;
}
)
;
add_task
(
async
function
testValidAttrCodes
(
)
{
let
currentCode
=
null
;
for
(
let
entry
of
validAttrCodes
)
{
currentCode
=
entry
.
code
;
if
(
AppConstants
.
platform
=
=
=
"
win
"
&
&
Services
.
sysinfo
.
getProperty
(
"
hasWinPackageId
"
)
)
{
sinon
.
stub
(
AttributionCode
"
msixCampaignId
"
)
.
get
(
(
)
=
>
decodeURIComponent
(
currentCode
)
)
;
}
else
{
await
AttributionCode
.
writeAttributionFile
(
currentCode
)
;
}
AttributionCode
.
_clearCache
(
)
;
let
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
entry
.
parsed
"
Parsed
code
should
match
expected
value
code
was
:
"
+
currentCode
)
;
}
AttributionCode
.
_clearCache
(
)
;
}
)
;
add_task
(
async
function
testInvalidAttrCodes
(
)
{
let
currentCode
=
null
;
for
(
let
code
of
invalidAttrCodes
)
{
currentCode
=
code
;
if
(
AppConstants
.
platform
=
=
=
"
win
"
&
&
Services
.
sysinfo
.
getProperty
(
"
hasWinPackageId
"
)
)
{
if
(
code
.
includes
(
"
not
set
"
)
)
{
continue
;
}
sinon
.
stub
(
AttributionCode
"
msixCampaignId
"
)
.
get
(
(
)
=
>
decodeURIComponent
(
currentCode
)
)
;
}
else
{
await
AttributionCode
.
writeAttributionFile
(
currentCode
)
;
}
AttributionCode
.
_clearCache
(
)
;
let
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
{
}
"
Code
should
have
failed
to
parse
:
"
+
currentCode
)
;
}
AttributionCode
.
_clearCache
(
)
;
}
)
;
let
condition
=
{
skip_if
:
(
)
=
>
AppConstants
.
platform
=
=
=
"
win
"
&
&
Services
.
sysinfo
.
getProperty
(
"
hasWinPackageId
"
)
}
;
add_task
(
condition
async
function
testDeletedFile
(
)
{
await
AttributionCode
.
writeAttributionFile
(
validAttrCodes
[
0
]
.
code
)
;
let
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
validAttrCodes
[
0
]
.
parsed
"
The
code
should
be
readable
directly
from
the
file
"
)
;
await
AttributionCode
.
deleteFileAsync
(
)
;
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
validAttrCodes
[
0
]
.
parsed
"
The
code
should
be
readable
from
the
cache
"
)
;
AttributionCode
.
_clearCache
(
)
;
result
=
await
AttributionCode
.
getAttrDataAsync
(
)
;
Assert
.
deepEqual
(
result
{
}
"
Shouldn
'
t
be
able
to
get
a
code
after
file
is
deleted
and
cache
is
cleared
"
)
;
}
)
;
