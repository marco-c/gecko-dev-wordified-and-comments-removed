var
TranslationsPanel
=
new
(
class
{
#
console
;
detectedLanguages
=
null
;
get
console
(
)
{
if
(
!
this
.
#
console
)
{
this
.
#
console
=
console
.
createInstance
(
{
maxLogLevelPref
:
"
browser
.
translations
.
logLevel
"
prefix
:
"
Translations
"
}
)
;
}
return
this
.
#
console
;
}
#
lazyElements
;
get
elements
(
)
{
if
(
!
this
.
#
lazyElements
)
{
const
wrapper
=
document
.
getElementById
(
"
template
-
translations
-
panel
"
)
;
const
panel
=
wrapper
.
content
.
firstElementChild
;
wrapper
.
replaceWith
(
wrapper
.
content
)
;
const
settingsButton
=
document
.
getElementById
(
"
translations
-
panel
-
settings
"
)
;
for
(
const
header
of
panel
.
querySelectorAll
(
"
.
panel
-
header
"
)
)
{
if
(
header
.
contains
(
settingsButton
)
)
{
continue
;
}
header
.
appendChild
(
settingsButton
.
cloneNode
(
true
)
)
;
}
this
.
#
lazyElements
=
{
panel
settingsButton
}
;
const
getter
=
(
name
id
)
=
>
{
let
element
;
Object
.
defineProperty
(
this
.
#
lazyElements
name
{
get
:
(
)
=
>
{
if
(
!
element
)
{
element
=
document
.
getElementById
(
id
)
;
}
if
(
!
element
)
{
throw
new
Error
(
Could
not
find
"
{
name
}
"
at
"
#
{
id
}
"
.
)
;
}
return
element
;
}
}
)
;
}
;
getter
(
"
appMenuButton
"
"
PanelUI
-
menu
-
button
"
)
;
getter
(
"
button
"
"
translations
-
button
"
)
;
getter
(
"
buttonLocale
"
"
translations
-
button
-
locale
"
)
;
getter
(
"
buttonCircleArrows
"
"
translations
-
button
-
circle
-
arrows
"
)
;
getter
(
"
defaultTranslate
"
"
translations
-
panel
-
translate
"
)
;
getter
(
"
error
"
"
translations
-
panel
-
error
"
)
;
getter
(
"
errorMessage
"
"
translations
-
panel
-
error
-
message
"
)
;
getter
(
"
errorMessageHint
"
"
translations
-
panel
-
error
-
message
-
hint
"
)
;
getter
(
"
errorHintAction
"
"
translations
-
panel
-
translate
-
hint
-
action
"
)
;
getter
(
"
fromMenuList
"
"
translations
-
panel
-
from
"
)
;
getter
(
"
header
"
"
translations
-
panel
-
header
"
)
;
getter
(
"
langSelection
"
"
translations
-
panel
-
lang
-
selection
"
)
;
getter
(
"
multiview
"
"
translations
-
panel
-
multiview
"
)
;
getter
(
"
notNowButton
"
"
translations
-
panel
-
not
-
now
"
)
;
getter
(
"
restoreButton
"
"
translations
-
panel
-
restore
-
button
"
)
;
getter
(
"
toMenuList
"
"
translations
-
panel
-
to
"
)
;
getter
(
"
unsupportedHint
"
"
translations
-
panel
-
error
-
unsupported
-
hint
"
)
;
}
return
this
.
#
lazyElements
;
}
#
lastHintCommand
=
null
;
#
showError
(
{
message
hint
actionText
:
hintCommandText
actionCommand
:
hintCommand
}
)
{
const
{
error
errorMessage
errorMessageHint
errorHintAction
}
=
this
.
elements
;
error
.
hidden
=
false
;
document
.
l10n
.
setAttributes
(
errorMessage
message
)
;
if
(
hint
)
{
errorMessageHint
.
hidden
=
false
;
document
.
l10n
.
setAttributes
(
errorMessageHint
hint
)
;
}
else
{
errorMessageHint
.
hidden
=
true
;
}
if
(
hintCommand
&
&
hintCommandText
)
{
errorHintAction
.
removeEventListener
(
"
command
"
this
.
#
lastHintCommand
)
;
this
.
#
lastHintCommand
=
hintCommand
;
errorHintAction
.
addEventListener
(
"
command
"
hintCommand
)
;
errorHintAction
.
hidden
=
false
;
document
.
l10n
.
setAttributes
(
errorHintAction
hintCommandText
)
;
}
else
{
errorHintAction
.
hidden
=
true
;
}
}
#
getTranslationsActor
(
)
{
const
actor
=
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
Translations
"
)
;
if
(
!
actor
)
{
throw
new
Error
(
"
Unable
to
get
the
TranslationsParent
"
)
;
}
return
actor
;
}
async
#
fetchDetectedLanguages
(
)
{
this
.
detectedLanguages
=
await
this
.
#
getTranslationsActor
(
)
.
getLangTagsForTranslation
(
)
;
return
this
.
detectedLanguages
;
}
async
#
getCachedDetectedLanguages
(
)
{
if
(
!
this
.
detectedLanguages
)
{
return
this
.
#
fetchDetectedLanguages
(
)
;
}
return
this
.
detectedLanguages
;
}
#
langListsPhase
=
"
uninitialized
"
;
async
#
ensureLangListsBuilt
(
)
{
switch
(
this
.
#
langListsPhase
)
{
case
"
initialized
"
:
return
;
case
"
error
"
:
this
.
#
langListsPhase
=
"
uninitialized
"
;
break
;
case
"
uninitialized
"
:
break
;
default
:
this
.
console
.
error
(
"
Unknown
langList
phase
"
this
.
#
langListsPhase
)
;
}
try
{
const
{
languagePairs
fromLanguages
toLanguages
}
=
await
this
.
#
getTranslationsActor
(
)
.
getSupportedLanguages
(
)
;
if
(
languagePairs
.
length
=
=
=
0
)
{
throw
new
Error
(
"
No
translation
languages
were
retrieved
.
"
)
;
}
const
{
panel
}
=
this
.
elements
;
const
fromPopups
=
panel
.
querySelectorAll
(
"
.
translations
-
panel
-
language
-
menupopup
-
from
"
)
;
const
toPopups
=
panel
.
querySelectorAll
(
"
.
translations
-
panel
-
language
-
menupopup
-
to
"
)
;
for
(
const
popup
of
fromPopups
)
{
for
(
const
{
langTag
isBeta
displayName
}
of
fromLanguages
)
{
const
fromMenuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
fromMenuItem
.
setAttribute
(
"
value
"
langTag
)
;
if
(
isBeta
)
{
document
.
l10n
.
setAttributes
(
fromMenuItem
"
translations
-
panel
-
displayname
-
beta
"
{
language
:
displayName
}
)
;
}
else
{
fromMenuItem
.
setAttribute
(
"
label
"
displayName
)
;
}
popup
.
appendChild
(
fromMenuItem
)
;
}
}
for
(
const
popup
of
toPopups
)
{
for
(
const
{
langTag
isBeta
displayName
}
of
toLanguages
)
{
const
toMenuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
toMenuItem
.
setAttribute
(
"
value
"
langTag
)
;
if
(
isBeta
)
{
document
.
l10n
.
setAttributes
(
toMenuItem
"
translations
-
panel
-
displayname
-
beta
"
{
language
:
displayName
}
)
;
}
else
{
toMenuItem
.
setAttribute
(
"
label
"
displayName
)
;
}
popup
.
appendChild
(
toMenuItem
)
;
}
}
this
.
#
langListsPhase
=
"
initialized
"
;
}
catch
(
error
)
{
this
.
console
.
error
(
error
)
;
this
.
#
langListsPhase
=
"
error
"
;
}
}
async
#
showDefaultView
(
force
=
false
)
{
const
{
fromMenuList
multiview
panel
error
toMenuList
defaultTranslate
langSelection
}
=
this
.
elements
;
if
(
this
.
#
langListsPhase
=
=
=
"
error
"
)
{
const
{
restoreButton
notNowButton
header
errorHintAction
}
=
this
.
elements
;
this
.
#
showError
(
{
message
:
"
translations
-
panel
-
error
-
load
-
languages
"
hint
:
"
translations
-
panel
-
error
-
load
-
languages
-
hint
"
actionText
:
"
translations
-
panel
-
error
-
load
-
languages
-
hint
-
button
"
actionCommand
:
(
)
=
>
this
.
#
reloadLangList
(
)
}
)
;
document
.
l10n
.
setAttributes
(
header
"
translations
-
panel
-
header
"
)
;
defaultTranslate
.
disabled
=
true
;
restoreButton
.
hidden
=
true
;
notNowButton
.
hidden
=
false
;
langSelection
.
hidden
=
true
;
errorHintAction
.
disabled
=
false
;
return
;
}
fromMenuList
.
value
=
"
"
;
error
.
hidden
=
true
;
langSelection
.
hidden
=
false
;
const
langTags
=
await
this
.
#
fetchDetectedLanguages
(
)
;
if
(
langTags
?
.
isDocLangTagSupported
|
|
force
)
{
const
{
header
restoreButton
notNowButton
}
=
this
.
elements
;
document
.
l10n
.
setAttributes
(
header
"
translations
-
panel
-
header
"
)
;
if
(
langTags
?
.
isDocLangTagSupported
)
{
fromMenuList
.
value
=
langTags
?
.
docLangTag
?
?
"
"
;
}
else
{
fromMenuList
.
value
=
"
"
;
}
toMenuList
.
value
=
langTags
?
.
userLangTag
?
?
"
"
;
this
.
onChangeLanguages
(
)
;
restoreButton
.
hidden
=
true
;
notNowButton
.
hidden
=
false
;
multiview
.
setAttribute
(
"
mainViewId
"
"
translations
-
panel
-
view
-
default
"
)
;
}
else
{
const
{
unsupportedHint
}
=
this
.
elements
;
multiview
.
setAttribute
(
"
mainViewId
"
"
translations
-
panel
-
view
-
unsupported
-
language
"
)
;
let
language
;
if
(
langTags
?
.
docLangTag
)
{
const
displayNames
=
new
Intl
.
DisplayNames
(
undefined
{
type
:
"
language
"
fallback
:
"
none
"
}
)
;
language
=
displayNames
.
of
(
langTags
.
docLangTag
)
;
}
if
(
language
)
{
document
.
l10n
.
setAttributes
(
unsupportedHint
"
translations
-
panel
-
error
-
unsupported
-
hint
-
known
"
{
language
}
)
;
}
else
{
document
.
l10n
.
setAttributes
(
unsupportedHint
"
translations
-
panel
-
error
-
unsupported
-
hint
-
unknown
"
)
;
}
}
panel
.
addEventListener
(
"
ViewShown
"
(
)
=
>
{
if
(
!
fromMenuList
.
value
)
{
fromMenuList
.
focus
(
)
;
}
if
(
!
toMenuList
.
value
)
{
toMenuList
.
focus
(
)
;
}
}
{
once
:
true
}
)
;
}
async
#
updateSettingsMenuLanguageCheckboxStates
(
)
{
const
{
docLangTag
isDocLangTagSupported
}
=
await
this
.
#
getCachedDetectedLanguages
(
)
;
const
{
panel
}
=
this
.
elements
;
const
alwaysTranslateMenuItems
=
panel
.
querySelectorAll
(
"
.
always
-
translate
-
language
-
menuitem
"
)
;
const
neverTranslateMenuItems
=
panel
.
querySelectorAll
(
"
.
never
-
translate
-
language
-
menuitem
"
)
;
if
(
!
docLangTag
|
|
!
isDocLangTagSupported
|
|
docLangTag
=
=
=
new
Intl
.
Locale
(
Services
.
locale
.
appLocaleAsBCP47
)
.
language
)
{
for
(
const
menuitem
of
alwaysTranslateMenuItems
)
{
menuitem
.
disabled
=
true
;
}
for
(
const
menuitem
of
neverTranslateMenuItems
)
{
menuitem
.
disabled
=
true
;
}
return
;
}
const
alwaysTranslateLanguage
=
TranslationsParent
.
shouldAlwaysTranslateLanguage
(
docLangTag
)
;
const
neverTranslateLanguage
=
TranslationsParent
.
shouldNeverTranslateLanguage
(
docLangTag
)
;
for
(
const
menuitem
of
alwaysTranslateMenuItems
)
{
menuitem
.
setAttribute
(
"
checked
"
alwaysTranslateLanguage
?
"
true
"
:
"
false
"
)
;
menuitem
.
disabled
=
false
;
}
for
(
const
menuitem
of
neverTranslateMenuItems
)
{
menuitem
.
setAttribute
(
"
checked
"
neverTranslateLanguage
?
"
true
"
:
"
false
"
)
;
menuitem
.
disabled
=
false
;
}
}
async
#
updateSettingsMenuSiteCheckboxStates
(
)
{
const
{
panel
}
=
this
.
elements
;
const
neverTranslateSiteMenuItems
=
panel
.
querySelectorAll
(
"
.
never
-
translate
-
site
-
menuitem
"
)
;
const
neverTranslateSite
=
await
this
.
#
getTranslationsActor
(
)
.
shouldNeverTranslateSite
(
)
;
for
(
const
menuitem
of
neverTranslateSiteMenuItems
)
{
menuitem
.
setAttribute
(
"
checked
"
neverTranslateSite
?
"
true
"
:
"
false
"
)
;
}
}
async
#
populateSettingsMenuItems
(
)
{
const
{
docLangTag
}
=
await
this
.
#
getCachedDetectedLanguages
(
)
;
const
{
panel
}
=
this
.
elements
;
const
alwaysTranslateMenuItems
=
panel
.
querySelectorAll
(
"
.
always
-
translate
-
language
-
menuitem
"
)
;
const
neverTranslateMenuItems
=
panel
.
querySelectorAll
(
"
.
never
-
translate
-
language
-
menuitem
"
)
;
let
docLangDisplayName
;
if
(
docLangTag
)
{
const
displayNames
=
new
Services
.
intl
.
DisplayNames
(
undefined
{
type
:
"
language
"
fallback
:
"
none
"
}
)
;
docLangDisplayName
=
displayNames
.
of
(
docLangTag
)
;
}
for
(
const
menuitem
of
alwaysTranslateMenuItems
)
{
if
(
docLangDisplayName
)
{
document
.
l10n
.
setAttributes
(
menuitem
"
translations
-
panel
-
settings
-
always
-
translate
-
language
"
{
language
:
docLangDisplayName
}
)
;
}
else
{
document
.
l10n
.
setAttributes
(
menuitem
"
translations
-
panel
-
settings
-
always
-
translate
-
unknown
-
language
"
)
;
}
}
for
(
const
menuitem
of
neverTranslateMenuItems
)
{
if
(
docLangDisplayName
)
{
document
.
l10n
.
setAttributes
(
menuitem
"
translations
-
panel
-
settings
-
never
-
translate
-
language
"
{
language
:
docLangDisplayName
}
)
;
}
else
{
document
.
l10n
.
setAttributes
(
menuitem
"
translations
-
panel
-
settings
-
never
-
translate
-
unknown
-
language
"
)
;
}
}
await
Promise
.
all
(
[
this
.
#
updateSettingsMenuLanguageCheckboxStates
(
)
this
.
#
updateSettingsMenuSiteCheckboxStates
(
)
]
)
;
}
async
#
showRevisitView
(
{
fromLanguage
toLanguage
}
)
{
const
{
header
fromMenuList
toMenuList
restoreButton
notNowButton
}
=
this
.
elements
;
fromMenuList
.
value
=
fromLanguage
;
toMenuList
.
value
=
toLanguage
;
this
.
onChangeLanguages
(
)
;
restoreButton
.
hidden
=
false
;
notNowButton
.
hidden
=
true
;
const
displayNames
=
new
Services
.
intl
.
DisplayNames
(
undefined
{
type
:
"
language
"
}
)
;
document
.
l10n
.
setAttributes
(
header
"
translations
-
panel
-
revisit
-
header
"
{
fromLanguage
:
displayNames
.
of
(
fromLanguage
)
toLanguage
:
displayNames
.
of
(
toLanguage
)
}
)
;
}
onChangeRevisitTo
(
)
{
const
{
revisitTranslate
revisitMenuList
}
=
this
.
elements
;
revisitTranslate
.
disabled
=
!
revisitMenuList
.
value
;
}
onChangeLanguages
(
)
{
const
{
defaultTranslate
toMenuList
fromMenuList
}
=
this
.
elements
;
defaultTranslate
.
disabled
=
toMenuList
.
value
=
=
=
fromMenuList
.
value
|
|
!
toMenuList
.
value
|
|
!
fromMenuList
.
value
;
}
async
onChangeSourceLanguage
(
event
)
{
const
{
panel
}
=
this
.
elements
;
panel
.
addEventListener
(
"
popuphidden
"
async
(
)
=
>
{
}
{
once
:
true
}
)
;
PanelMultiView
.
hidePopup
(
panel
)
;
await
this
.
#
showDefaultView
(
true
/
*
force
this
view
to
be
shown
*
/
)
;
PanelMultiView
.
openPopup
(
panel
this
.
elements
.
appMenuButton
{
position
:
"
bottomright
topright
"
triggeringEvent
:
event
}
)
.
catch
(
error
=
>
this
.
console
.
error
(
error
)
)
;
}
async
#
reloadLangList
(
)
{
try
{
await
this
.
#
ensureLangListsBuilt
(
)
;
await
this
.
#
showDefaultView
(
)
;
}
catch
(
error
)
{
this
.
elements
.
errorHintAction
.
disabled
=
false
;
}
}
async
open
(
event
)
{
const
{
panel
button
}
=
this
.
elements
;
await
this
.
#
ensureLangListsBuilt
(
)
;
const
{
requestedTranslationPair
}
=
this
.
#
getTranslationsActor
(
)
.
languageState
;
if
(
requestedTranslationPair
)
{
await
this
.
#
showRevisitView
(
requestedTranslationPair
)
.
catch
(
error
=
>
{
this
.
console
.
error
(
error
)
;
}
)
;
}
else
{
await
this
.
#
showDefaultView
(
)
.
catch
(
error
=
>
{
this
.
console
.
error
(
error
)
;
}
)
;
}
this
.
#
populateSettingsMenuItems
(
)
;
const
targetButton
=
button
.
contains
(
event
.
target
)
?
button
:
this
.
elements
.
appMenuButton
;
PanelMultiView
.
openPopup
(
panel
targetButton
{
position
:
"
bottomright
topright
"
triggerEvent
:
event
}
)
.
catch
(
error
=
>
this
.
console
.
error
(
error
)
)
;
}
#
hideTranslationsButton
(
)
{
const
{
button
buttonLocale
buttonCircleArrows
}
=
this
.
elements
;
button
.
hidden
=
true
;
buttonLocale
.
hidden
=
true
;
buttonCircleArrows
.
hidden
=
true
;
button
.
removeAttribute
(
"
translationsactive
"
)
;
}
#
isTranslationsActive
(
)
{
const
{
requestedTranslationPair
}
=
this
.
#
getTranslationsActor
(
)
.
languageState
;
return
requestedTranslationPair
!
=
=
null
;
}
async
onTranslate
(
)
{
PanelMultiView
.
hidePopup
(
this
.
elements
.
panel
)
;
const
actor
=
this
.
#
getTranslationsActor
(
)
;
actor
.
translate
(
this
.
elements
.
fromMenuList
.
value
this
.
elements
.
toMenuList
.
value
)
;
}
onCancel
(
)
{
PanelMultiView
.
hidePopup
(
this
.
elements
.
panel
)
;
}
openSettingsPopup
(
button
)
{
this
.
#
updateSettingsMenuLanguageCheckboxStates
(
)
;
this
.
#
updateSettingsMenuSiteCheckboxStates
(
)
;
const
popup
=
button
.
querySelector
(
"
menupopup
"
)
;
popup
.
openPopup
(
button
)
;
}
openManageLanguages
(
)
{
const
window
=
gBrowser
.
selectedBrowser
.
browsingContext
.
top
.
embedderElement
.
ownerGlobal
;
window
.
openTrustedLinkIn
(
"
about
:
preferences
#
general
-
translations
"
"
tab
"
)
;
}
async
onAlwaysTranslateLanguage
(
)
{
const
{
docLangTag
}
=
await
this
.
#
getCachedDetectedLanguages
(
)
;
if
(
!
docLangTag
)
{
throw
new
Error
(
"
Expected
to
have
a
document
language
tag
.
"
)
;
}
const
toggledOn
=
TranslationsParent
.
toggleAlwaysTranslateLanguagePref
(
docLangTag
)
;
const
translationsActive
=
this
.
#
isTranslationsActive
(
)
;
this
.
#
updateSettingsMenuLanguageCheckboxStates
(
)
;
if
(
toggledOn
&
&
!
translationsActive
)
{
await
this
.
onTranslate
(
)
;
}
else
if
(
!
toggledOn
&
&
translationsActive
)
{
await
this
.
onRestore
(
)
;
}
}
async
onNeverTranslateLanguage
(
)
{
const
{
docLangTag
}
=
await
this
.
#
getCachedDetectedLanguages
(
)
;
if
(
!
docLangTag
)
{
throw
new
Error
(
"
Expected
to
have
a
document
language
tag
.
"
)
;
}
TranslationsParent
.
toggleNeverTranslateLanguagePref
(
docLangTag
)
;
this
.
#
updateSettingsMenuLanguageCheckboxStates
(
)
;
if
(
this
.
#
isTranslationsActive
(
)
)
{
await
this
.
onRestore
(
)
;
}
else
{
this
.
#
hideTranslationsButton
(
)
;
}
}
async
onNeverTranslateSite
(
)
{
await
this
.
#
getTranslationsActor
(
)
.
toggleNeverTranslateSitePermissions
(
)
;
this
.
#
updateSettingsMenuSiteCheckboxStates
(
)
;
if
(
this
.
#
isTranslationsActive
(
)
)
{
await
this
.
onRestore
(
)
;
}
else
{
this
.
#
hideTranslationsButton
(
)
;
}
}
async
onRestore
(
)
{
const
{
panel
}
=
this
.
elements
;
PanelMultiView
.
hidePopup
(
panel
)
;
const
{
docLangTag
}
=
await
this
.
#
getCachedDetectedLanguages
(
)
;
if
(
!
docLangTag
)
{
throw
new
Error
(
"
Expected
to
have
a
document
language
tag
.
"
)
;
}
this
.
#
getTranslationsActor
(
)
.
restorePage
(
docLangTag
)
;
}
handleEvent
=
async
event
=
>
{
switch
(
event
.
type
)
{
case
"
TranslationsParent
:
LanguageState
"
:
const
{
detectedLanguages
requestedTranslationPair
error
isEngineReady
}
=
event
.
detail
;
const
{
panel
button
buttonLocale
buttonCircleArrows
}
=
this
.
elements
;
const
hasSupportedLanguage
=
detectedLanguages
?
.
docLangTag
&
&
detectedLanguages
?
.
userLangTag
&
&
detectedLanguages
?
.
isDocLangTagSupported
;
if
(
detectedLanguages
)
{
TranslationsPanel
.
detectedLanguages
=
detectedLanguages
;
}
const
shouldNeverTranslate
=
async
(
)
=
>
{
return
Boolean
(
TranslationsParent
.
shouldNeverTranslateLanguage
(
detectedLanguages
?
.
docLangTag
)
|
|
(
await
this
.
#
getTranslationsActor
(
)
.
shouldNeverTranslateSite
(
)
)
)
;
}
;
if
(
requestedTranslationPair
|
|
error
|
|
(
hasSupportedLanguage
&
&
!
(
await
shouldNeverTranslate
(
)
)
)
)
{
button
.
hidden
=
false
;
if
(
requestedTranslationPair
)
{
button
.
setAttribute
(
"
translationsactive
"
true
)
;
if
(
isEngineReady
)
{
buttonLocale
.
hidden
=
false
;
buttonCircleArrows
.
hidden
=
true
;
buttonLocale
.
innerText
=
requestedTranslationPair
.
toLanguage
;
}
else
{
buttonCircleArrows
.
hidden
=
false
;
buttonLocale
.
hidden
=
true
;
}
}
else
{
button
.
removeAttribute
(
"
translationsactive
"
)
;
buttonLocale
.
hidden
=
true
;
buttonCircleArrows
.
hidden
=
true
;
}
}
else
{
this
.
#
hideTranslationsButton
(
)
;
}
switch
(
error
)
{
case
null
:
this
.
elements
.
error
.
hidden
=
true
;
break
;
case
"
engine
-
load
-
failure
"
:
this
.
elements
.
error
.
hidden
=
false
;
this
.
#
showError
(
{
message
:
"
translations
-
panel
-
error
-
translating
"
}
)
;
const
targetButton
=
button
.
hidden
?
this
.
elements
.
appMenuButton
:
button
;
PanelMultiView
.
openPopup
(
panel
targetButton
{
position
:
"
bottomright
topright
"
}
)
.
catch
(
panelError
=
>
this
.
console
.
error
(
panelError
)
)
;
break
;
default
:
console
.
error
(
"
Unknown
translation
error
"
error
)
;
}
break
;
}
}
;
}
)
(
)
;
