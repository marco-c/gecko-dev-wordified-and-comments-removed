var
TranslationsPanel
=
new
(
class
{
#
console
;
get
console
(
)
{
if
(
!
this
.
#
console
)
{
this
.
#
console
=
console
.
createInstance
(
{
maxLogLevelPref
:
"
browser
.
translations
.
logLevel
"
prefix
:
"
Translations
"
}
)
;
}
return
this
.
#
console
;
}
#
lazyElements
;
get
elements
(
)
{
if
(
!
this
.
#
lazyElements
)
{
const
wrapper
=
document
.
getElementById
(
"
template
-
translations
-
panel
"
)
;
const
panel
=
wrapper
.
content
.
firstElementChild
;
wrapper
.
replaceWith
(
wrapper
.
content
)
;
this
.
#
lazyElements
=
{
panel
get
button
(
)
{
delete
this
.
button
;
return
(
this
.
button
=
document
.
getElementById
(
"
translations
-
button
"
)
)
;
}
get
fromMenuPopup
(
)
{
delete
this
.
fromMenuPopup
;
return
(
this
.
fromMenuPopup
=
document
.
getElementById
(
"
translations
-
panel
-
from
-
menupopup
"
)
)
;
}
get
toMenuPopup
(
)
{
delete
this
.
toMenuPopup
;
return
(
this
.
toMenuPopup
=
document
.
getElementById
(
"
translations
-
panel
-
to
-
menupopup
"
)
)
;
}
get
multiview
(
)
{
delete
this
.
multiview
;
return
(
this
.
multiview
=
document
.
getElementById
(
"
translations
-
panel
-
multiview
"
)
)
;
}
get
dualView
(
)
{
delete
this
.
dualView
;
return
(
this
.
dualView
=
document
.
getElementById
(
"
translations
-
panel
-
view
-
dual
"
)
)
;
}
get
restoreView
(
)
{
delete
this
.
restoreView
;
return
(
this
.
restoreView
=
document
.
getElementById
(
"
translations
-
panel
-
view
-
restore
"
)
)
;
}
get
fromMenuList
(
)
{
delete
this
.
fromMenuList
;
return
(
this
.
fromMenuList
=
document
.
getElementById
(
"
translations
-
panel
-
from
"
)
)
;
}
get
toMenuList
(
)
{
delete
this
.
toMenuList
;
return
(
this
.
toMenuList
=
document
.
getElementById
(
"
translations
-
panel
-
to
"
)
)
;
}
get
restoreLabel
(
)
{
delete
this
.
restoreLabel
;
return
(
this
.
restoreLabel
=
document
.
getElementById
(
"
translations
-
panel
-
restore
-
label
"
)
)
;
}
}
;
}
return
this
.
#
lazyElements
;
}
#
getTranslationsActor
(
)
{
const
actor
=
gBrowser
.
selectedBrowser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
Translations
"
)
;
if
(
!
actor
)
{
throw
new
Error
(
"
Unable
to
get
the
TranslationsParent
"
)
;
}
return
actor
;
}
#
langListsPhase
=
"
uninitialized
"
;
async
#
ensureLangListsBuilt
(
)
{
switch
(
this
.
#
langListsPhase
)
{
case
"
initialized
"
:
return
;
case
"
error
"
:
this
.
#
langListsPhase
=
"
uninitialized
"
;
break
;
case
"
uninitialized
"
:
break
;
default
:
this
.
console
.
error
(
"
Unknown
langList
phase
"
this
.
#
langListsPhase
)
;
}
try
{
const
languages
=
await
this
.
#
getTranslationsActor
(
)
.
getSupportedLanguages
(
)
;
if
(
languages
.
length
=
=
=
0
)
{
throw
new
Error
(
"
No
translation
languages
were
retrieved
.
"
)
;
}
for
(
const
{
langTag
displayName
}
of
languages
)
{
const
fromMenuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
fromMenuItem
.
setAttribute
(
"
label
"
displayName
)
;
fromMenuItem
.
setAttribute
(
"
value
"
langTag
)
;
this
.
elements
.
fromMenuPopup
.
appendChild
(
fromMenuItem
)
;
const
toMenuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
toMenuItem
.
setAttribute
(
"
label
"
displayName
)
;
toMenuItem
.
setAttribute
(
"
value
"
langTag
)
;
this
.
elements
.
toMenuPopup
.
appendChild
(
toMenuItem
)
;
}
this
.
#
langListsPhase
=
"
initialized
"
;
}
catch
(
error
)
{
this
.
#
langListsPhase
=
"
error
"
;
}
}
async
#
setDualView
(
langListBuilt
)
{
const
actor
=
this
.
#
getTranslationsActor
(
)
;
const
{
fromMenuList
toMenuList
multiview
}
=
this
.
elements
;
multiview
.
setAttribute
(
"
mainViewId
"
"
translations
-
panel
-
view
-
dual
"
)
;
fromMenuList
.
value
=
"
"
;
toMenuList
.
value
=
"
"
;
const
langTags
=
await
actor
.
getLangTagsForTranslation
(
)
;
await
langListBuilt
;
if
(
langTags
)
{
const
{
docLangTag
appLangTag
}
=
langTags
;
fromMenuList
.
value
=
docLangTag
;
toMenuList
.
value
=
appLangTag
;
}
else
{
this
.
console
.
error
(
"
No
language
tags
for
translation
were
found
.
"
)
;
}
}
#
displayNames
=
{
}
;
#
setRestoreView
(
{
fromLanguage
toLanguage
}
)
{
const
{
multiview
restoreLabel
}
=
this
.
elements
;
let
fromDisplayName
=
this
.
#
displayNames
[
fromLanguage
]
;
let
toDisplayName
=
this
.
#
displayNames
[
toLanguage
]
;
if
(
!
fromDisplayName
|
|
!
toDisplayName
)
{
const
displayNames
=
new
Services
.
intl
.
DisplayNames
(
undefined
{
type
:
"
language
"
}
)
;
fromDisplayName
=
displayNames
.
of
(
fromLanguage
)
;
toDisplayName
=
displayNames
.
of
(
toLanguage
)
;
this
.
#
displayNames
[
fromDisplayName
]
=
fromLanguage
;
this
.
#
displayNames
[
toDisplayName
]
=
toLanguage
;
}
multiview
.
setAttribute
(
"
mainViewId
"
"
translations
-
panel
-
view
-
restore
"
)
;
restoreLabel
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
fromLanguage
:
fromDisplayName
toLanguage
:
toDisplayName
}
)
)
;
}
open
(
event
)
{
const
{
panel
button
}
=
this
.
elements
;
const
{
requestedTranslationPair
}
=
this
.
#
getTranslationsActor
(
)
.
languageState
;
if
(
requestedTranslationPair
)
{
this
.
#
setRestoreView
(
requestedTranslationPair
)
;
}
else
{
this
.
#
setDualView
(
this
.
#
ensureLangListsBuilt
(
)
)
;
}
PanelMultiView
.
openPopup
(
panel
button
{
position
:
"
bottomright
topright
"
triggerEvent
:
event
}
)
.
catch
(
error
=
>
this
.
console
.
error
(
error
)
)
;
}
async
onTranslate
(
)
{
PanelMultiView
.
hidePopup
(
this
.
elements
.
panel
)
;
const
actor
=
this
.
#
getTranslationsActor
(
)
;
actor
.
translate
(
document
.
getElementById
(
"
translations
-
panel
-
from
"
)
.
value
document
.
getElementById
(
"
translations
-
panel
-
to
"
)
.
value
)
;
}
onRestore
(
)
{
const
{
panel
}
=
this
.
elements
;
PanelMultiView
.
hidePopup
(
panel
)
;
this
.
#
getTranslationsActor
(
)
.
restorePage
(
)
;
}
handleEvent
=
event
=
>
{
switch
(
event
.
type
)
{
case
"
TranslationsParent
:
LanguageState
"
:
const
{
detectedLanguages
requestedTranslationPair
}
=
event
.
detail
;
const
{
button
}
=
this
.
elements
;
if
(
detectedLanguages
)
{
button
.
hidden
=
false
;
if
(
requestedTranslationPair
)
{
button
.
setAttribute
(
"
translationsactive
"
true
)
;
}
else
{
button
.
removeAttribute
(
"
translationsactive
"
)
;
}
}
else
{
button
.
removeAttribute
(
"
translationsactive
"
)
;
button
.
hidden
=
true
;
}
break
;
}
}
;
}
)
(
)
;
