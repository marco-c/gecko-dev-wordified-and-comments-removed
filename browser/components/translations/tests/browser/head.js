"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
components
/
translations
/
tests
/
browser
/
shared
-
head
.
js
"
this
)
;
const
getIntlDisplayName
=
(
(
)
=
>
{
let
displayNames
=
null
;
return
langTag
=
>
{
if
(
!
displayNames
)
{
displayNames
=
new
Services
.
intl
.
DisplayNames
(
undefined
{
type
:
"
language
"
fallback
:
"
none
"
}
)
;
}
return
displayNames
.
of
(
langTag
)
;
}
;
}
)
(
)
;
async
function
assertTranslationsButton
(
visibleAssertions
message
)
{
const
elements
=
{
button
:
document
.
getElementById
(
"
translations
-
button
"
)
icon
:
document
.
getElementById
(
"
translations
-
button
-
icon
"
)
circleArrows
:
document
.
getElementById
(
"
translations
-
button
-
circle
-
arrows
"
)
locale
:
document
.
getElementById
(
"
translations
-
button
-
locale
"
)
}
;
for
(
const
[
name
element
]
of
Object
.
entries
(
elements
)
)
{
if
(
!
element
)
{
throw
new
Error
(
"
Could
not
find
the
"
+
name
)
;
}
}
try
{
await
waitForCondition
(
(
)
=
>
{
for
(
const
[
name
visible
]
of
Object
.
entries
(
visibleAssertions
)
)
{
if
(
elements
[
name
]
.
hidden
=
=
=
visible
)
{
return
false
;
}
}
return
true
;
}
message
)
;
}
catch
(
error
)
{
for
(
const
[
name
expected
]
of
Object
.
entries
(
visibleAssertions
)
)
{
is
(
!
elements
[
name
]
.
hidden
expected
Visibility
for
"
{
name
}
"
)
;
}
}
ok
(
true
message
)
;
return
elements
;
}
async
function
openTranslationsSettingsMenuViaTranslationsButton
(
)
{
await
closeTranslationsPanelIfOpen
(
)
;
const
{
button
}
=
await
assertTranslationsButton
(
{
button
:
true
}
"
The
button
is
available
.
"
)
;
await
waitForTranslationsPopupEvent
(
"
popupshown
"
(
)
=
>
{
click
(
button
"
Opening
the
popup
"
)
;
}
)
;
const
gearIcons
=
getAllByL10nId
(
"
translations
-
panel
-
settings
-
button
"
)
;
for
(
const
gearIcon
of
gearIcons
)
{
if
(
gearIcon
.
hidden
)
{
continue
;
}
click
(
gearIcon
"
Open
the
settings
menu
"
)
;
info
(
"
Waiting
for
settings
menu
to
open
.
"
)
;
const
manageLanguages
=
await
waitForCondition
(
(
)
=
>
maybeGetByL10nId
(
"
translations
-
panel
-
settings
-
manage
-
languages
"
)
)
;
ok
(
manageLanguages
"
The
manage
languages
item
should
be
visible
in
the
settings
menu
.
"
)
;
return
;
}
}
async
function
openTranslationsSettingsMenuViaAppMenu
(
)
{
await
openTranslationsPanelViaAppMenu
(
)
;
const
gearIcons
=
getAllByL10nId
(
"
translations
-
panel
-
settings
-
button
"
)
;
for
(
const
gearIcon
of
gearIcons
)
{
if
(
gearIcon
.
hidden
)
{
continue
;
}
click
(
gearIcon
"
Open
the
settings
menu
"
)
;
info
(
"
Waiting
for
settings
menu
to
open
.
"
)
;
const
manageLanguages
=
await
waitForCondition
(
(
)
=
>
maybeGetByL10nId
(
"
translations
-
panel
-
settings
-
manage
-
languages
"
)
)
;
ok
(
manageLanguages
"
The
manage
languages
item
should
be
visible
in
the
settings
menu
.
"
)
;
return
;
}
}
async
function
openTranslationsPanelViaAppMenu
(
)
{
await
closeTranslationsPanelIfOpen
(
)
;
const
appMenuButton
=
getById
(
"
PanelUI
-
menu
-
button
"
)
;
click
(
appMenuButton
"
Opening
the
app
-
menu
button
"
)
;
await
BrowserTestUtils
.
waitForEvent
(
window
.
PanelUI
.
mainView
"
ViewShown
"
)
;
const
translateSiteButton
=
getById
(
"
appMenu
-
translate
-
button
"
)
;
is
(
translateSiteButton
.
disabled
false
"
The
app
-
menu
translate
button
should
be
enabled
"
)
;
await
waitForTranslationsPopupEvent
(
"
popupshown
"
(
)
=
>
{
click
(
translateSiteButton
)
;
}
)
;
}
async
function
toggleAlwaysTranslateLanguage
(
)
{
const
alwaysTranslateLanguage
=
getByL10nId
(
"
translations
-
panel
-
settings
-
always
-
translate
-
language
"
)
;
info
(
"
Toggle
the
always
-
translate
-
language
menuitem
"
)
;
await
alwaysTranslateLanguage
.
doCommand
(
)
;
await
closeSettingsMenuIfOpen
(
)
;
}
async
function
toggleNeverTranslateLanguage
(
)
{
const
neverTranslateLanguage
=
getByL10nId
(
"
translations
-
panel
-
settings
-
never
-
translate
-
language
"
)
;
info
(
"
Toggle
the
never
-
translate
-
language
menuitem
"
)
;
await
neverTranslateLanguage
.
doCommand
(
)
;
await
closeSettingsMenuIfOpen
(
)
;
}
async
function
toggleNeverTranslateSite
(
)
{
const
neverTranslateSite
=
getByL10nId
(
"
translations
-
panel
-
settings
-
never
-
translate
-
site
"
)
;
info
(
"
Toggle
the
never
-
translate
-
site
menuitem
"
)
;
await
neverTranslateSite
.
doCommand
(
)
;
await
closeSettingsMenuIfOpen
(
)
;
}
async
function
assertIsAlwaysTranslateLanguage
(
langTag
{
checked
=
true
disabled
=
false
}
)
{
await
assertCheckboxState
(
"
translations
-
panel
-
settings
-
always
-
translate
-
language
"
{
langTag
checked
disabled
}
)
;
}
async
function
assertIsNeverTranslateLanguage
(
langTag
{
checked
=
true
disabled
=
false
}
)
{
await
assertCheckboxState
(
"
translations
-
panel
-
settings
-
never
-
translate
-
language
"
{
langTag
checked
disabled
}
)
;
}
async
function
assertIsNeverTranslateSite
(
url
{
checked
=
true
disabled
=
false
}
)
{
await
assertCheckboxState
(
"
translations
-
panel
-
settings
-
never
-
translate
-
site
"
{
checked
disabled
}
)
;
}
async
function
assertCheckboxState
(
dataL10nId
{
langTag
=
null
checked
=
true
disabled
=
false
}
)
{
const
menuItems
=
getAllByL10nId
(
dataL10nId
)
;
for
(
const
menuItem
of
menuItems
)
{
if
(
langTag
)
{
const
{
args
:
{
language
}
}
=
document
.
l10n
.
getAttributes
(
menuItem
)
;
is
(
language
getIntlDisplayName
(
langTag
)
Should
match
expected
language
display
name
for
{
dataL10nId
}
)
;
}
is
(
menuItem
.
disabled
disabled
Should
match
expected
disabled
state
for
{
dataL10nId
}
)
;
await
waitForCondition
(
(
)
=
>
menuItem
.
getAttribute
(
"
checked
"
)
=
=
=
(
checked
?
"
true
"
:
"
false
"
)
"
Waiting
for
checkbox
state
"
)
;
is
(
menuItem
.
getAttribute
(
"
checked
"
)
checked
?
"
true
"
:
"
false
"
Should
match
expected
checkbox
state
for
{
dataL10nId
}
)
;
}
}
async
function
navigate
(
url
message
)
{
await
closeTranslationsPanelIfOpen
(
)
;
info
(
message
)
;
BrowserTestUtils
.
loadURIString
(
gBrowser
.
selectedBrowser
BLANK_PAGE
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
loadURIString
(
gBrowser
.
selectedBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
}
async
function
addTab
(
url
)
{
info
(
Adding
tab
for
+
url
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
true
)
;
return
{
tab
removeTab
(
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
;
}
async
function
switchTab
(
tab
)
{
info
(
"
Switching
tabs
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
}
function
click
(
button
message
)
{
info
(
message
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
}
function
isVisible
(
element
)
{
if
(
element
.
offsetParent
=
=
=
null
)
{
return
false
;
}
const
win
=
element
.
ownerDocument
.
ownerGlobal
;
const
{
visibility
display
}
=
win
.
getComputedStyle
(
element
)
;
return
visibility
=
=
=
"
visible
"
&
&
display
!
=
=
"
none
"
;
}
function
getByL10nId
(
l10nId
doc
=
document
)
{
const
elements
=
doc
.
querySelectorAll
(
[
data
-
l10n
-
id
=
"
{
l10nId
}
"
]
)
;
if
(
elements
.
length
=
=
=
0
)
{
throw
new
Error
(
"
Could
not
find
the
element
by
l10n
id
:
"
+
l10nId
)
;
}
for
(
const
element
of
elements
)
{
if
(
isVisible
(
element
)
)
{
return
element
;
}
}
throw
new
Error
(
"
The
element
is
not
visible
in
the
DOM
:
"
+
l10nId
)
;
}
function
getAllByL10nId
(
l10nId
doc
=
document
)
{
const
elements
=
doc
.
querySelectorAll
(
[
data
-
l10n
-
id
=
"
{
l10nId
}
"
]
)
;
console
.
log
(
doc
)
;
if
(
elements
.
length
=
=
=
0
)
{
throw
new
Error
(
"
Could
not
find
the
element
by
l10n
id
:
"
+
l10nId
)
;
}
return
elements
;
}
function
getById
(
id
doc
=
document
)
{
const
element
=
doc
.
getElementById
(
id
)
;
if
(
!
element
)
{
throw
new
Error
(
"
Could
not
find
the
element
by
id
:
#
"
+
id
)
;
}
if
(
isVisible
(
element
)
)
{
return
element
;
}
throw
new
Error
(
"
The
element
is
not
visible
in
the
DOM
:
#
"
+
id
)
;
}
function
maybeGetByL10nId
(
l10nId
doc
=
document
)
{
const
selector
=
[
data
-
l10n
-
id
=
"
{
l10nId
}
"
]
;
const
elements
=
doc
.
querySelectorAll
(
selector
)
;
for
(
const
element
of
elements
)
{
if
(
isVisible
(
element
)
)
{
return
element
;
}
}
return
null
;
}
async
function
waitForTranslationsPopupEvent
(
eventName
callback
)
{
const
panel
=
document
.
getElementById
(
"
translations
-
panel
"
)
;
if
(
!
panel
)
{
throw
new
Error
(
"
Unable
to
find
the
translations
panel
element
.
"
)
;
}
const
promise
=
BrowserTestUtils
.
waitForEvent
(
panel
eventName
)
;
await
callback
(
)
;
info
(
"
Waiting
for
the
translations
panel
popup
to
be
shown
"
)
;
await
promise
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
async
function
waitForViewShown
(
callback
)
{
const
panel
=
document
.
getElementById
(
"
translations
-
panel
"
)
;
if
(
!
panel
)
{
throw
new
Error
(
"
Unable
to
find
the
translations
panel
element
.
"
)
;
}
const
promise
=
BrowserTestUtils
.
waitForEvent
(
panel
"
ViewShown
"
)
;
callback
(
)
;
info
(
"
Waiting
for
the
translations
panel
view
to
be
shown
"
)
;
await
promise
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
const
FRENCH_PAGE_URL
=
TRANSLATIONS_TESTER_FR
;
const
ENGLISH_PAGE_URL
=
TRANSLATIONS_TESTER_EN
;
const
SPANISH_PAGE_URL
=
TRANSLATIONS_TESTER_ES
;
const
SPANISH_PAGE_URL_2
=
TRANSLATIONS_TESTER_ES_2
;
const
SPANISH_PAGE_URL_DOT_ORG
=
TRANSLATIONS_TESTER_ES_DOT_ORG
;
const
LANGUAGE_PAIRS
=
[
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
fr
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
fr
"
}
{
fromLang
:
"
en
"
toLang
:
"
uk
"
}
{
fromLang
:
"
uk
"
toLang
:
"
en
"
}
]
;
