"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
components
/
translations
/
tests
/
browser
/
shared
-
head
.
js
"
this
)
;
function
assertTranslationsButton
(
assertion
message
)
{
return
TestUtils
.
waitForCondition
(
(
)
=
>
{
const
button
=
document
.
getElementById
(
"
translations
-
button
"
)
;
if
(
!
button
)
{
return
false
;
}
if
(
assertion
(
button
)
)
{
ok
(
button
message
)
;
return
button
;
}
return
false
;
}
message
)
;
}
function
navigate
(
url
message
)
{
info
(
message
)
;
BrowserTestUtils
.
loadURIString
(
gBrowser
.
selectedBrowser
url
)
;
}
async
function
addTab
(
url
)
{
info
(
Adding
tab
for
+
url
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
true
)
;
return
{
tab
removeTab
(
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
;
}
async
function
switchTab
(
tab
)
{
info
(
"
Switching
tabs
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
}
function
click
(
button
message
)
{
info
(
message
)
;
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
}
function
getByL10nId
(
l10nId
)
{
const
element
=
document
.
querySelector
(
[
data
-
l10n
-
id
=
"
{
l10nId
}
"
]
)
;
if
(
!
element
)
{
throw
new
Error
(
"
Could
not
find
the
element
by
l10n
id
:
"
+
l10nId
)
;
}
const
{
visibility
display
}
=
window
.
getComputedStyle
(
element
)
;
if
(
visibility
!
=
=
"
visible
"
|
|
display
=
=
=
"
none
"
)
{
throw
new
Error
(
"
The
element
is
not
visible
in
the
DOM
:
"
+
l10nId
)
;
}
return
element
;
}
function
waitForTranslationsPopupEvent
(
eventName
)
{
return
new
Promise
(
resolve
=
>
{
const
panel
=
document
.
getElementById
(
"
translations
-
panel
"
)
;
if
(
!
panel
)
{
throw
new
Error
(
"
Unable
to
find
the
translations
panel
element
.
"
)
;
}
function
handleEvent
(
event
)
{
if
(
event
.
type
=
=
=
eventName
)
{
panel
.
removeEventListener
(
eventName
handleEvent
)
;
setTimeout
(
resolve
0
)
;
}
}
panel
.
addEventListener
(
eventName
handleEvent
)
;
}
)
;
}
