"
use
strict
"
;
add_task
(
async
function
test_select_translations_panel_init_failure_cancel
(
)
{
const
{
cleanup
runInPage
}
=
await
loadTestPage
(
{
page
:
SELECT_TEST_PAGE_URL
languagePairs
:
LANGUAGE_PAIRS
prefs
:
[
[
"
browser
.
translations
.
select
.
enable
"
true
]
]
}
)
;
TranslationsPanelShared
.
simulateLangListError
(
)
;
await
SelectTranslationsTestUtils
.
openPanel
(
runInPage
{
selectFrenchSentence
:
true
openAtFrenchSentence
:
true
onOpenPanel
:
SelectTranslationsTestUtils
.
assertPanelViewInitFailure
}
)
;
await
SelectTranslationsTestUtils
.
clickCancelButton
(
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_select_translations_panel_init_failure_try_again_into_translation
(
)
{
const
{
cleanup
runInPage
resolveDownloads
rejectDownloads
}
=
await
loadTestPage
(
{
page
:
SELECT_TEST_PAGE_URL
languagePairs
:
LANGUAGE_PAIRS
prefs
:
[
[
"
browser
.
translations
.
select
.
enable
"
true
]
]
}
)
;
TranslationsPanelShared
.
simulateLangListError
(
)
;
await
SelectTranslationsTestUtils
.
openPanel
(
runInPage
{
selectFrenchSentence
:
true
openAtFrenchSentence
:
true
onOpenPanel
:
SelectTranslationsTestUtils
.
assertPanelViewInitFailure
}
)
;
TranslationsPanelShared
.
simulateLangListError
(
)
;
await
SelectTranslationsTestUtils
.
waitForPanelPopupEvent
(
"
popupshown
"
SelectTranslationsTestUtils
.
clickTryAgainButton
SelectTranslationsTestUtils
.
assertPanelViewInitFailure
)
;
await
SelectTranslationsTestUtils
.
waitForPanelPopupEvent
(
"
popupshown
"
async
(
)
=
>
SelectTranslationsTestUtils
.
clickTryAgainButton
(
{
downloadHandler
:
rejectDownloads
}
)
SelectTranslationsTestUtils
.
assertPanelViewTranslationFailure
)
;
await
SelectTranslationsTestUtils
.
clickTryAgainButton
(
{
downloadHandler
:
resolveDownloads
viewAssertion
:
SelectTranslationsTestUtils
.
assertPanelViewTranslated
}
)
;
await
SelectTranslationsTestUtils
.
clickDoneButton
(
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_select_translations_panel_init_failure_try_again_into_unsupported
(
)
{
const
{
cleanup
runInPage
}
=
await
loadTestPage
(
{
page
:
SELECT_TEST_PAGE_URL
languagePairs
:
[
{
fromLang
:
"
fr
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
fr
"
}
]
prefs
:
[
[
"
browser
.
translations
.
select
.
enable
"
true
]
]
}
)
;
TranslationsPanelShared
.
simulateLangListError
(
)
;
await
SelectTranslationsTestUtils
.
openPanel
(
runInPage
{
selectSpanishSection
:
true
openAtSpanishSection
:
true
onOpenPanel
:
SelectTranslationsTestUtils
.
assertPanelViewInitFailure
}
)
;
TranslationsPanelShared
.
simulateLangListError
(
)
;
await
SelectTranslationsTestUtils
.
waitForPanelPopupEvent
(
"
popupshown
"
SelectTranslationsTestUtils
.
clickTryAgainButton
SelectTranslationsTestUtils
.
assertPanelViewInitFailure
)
;
await
SelectTranslationsTestUtils
.
waitForPanelPopupEvent
(
"
popupshown
"
SelectTranslationsTestUtils
.
clickTryAgainButton
SelectTranslationsTestUtils
.
assertPanelViewUnsupportedLanguage
)
;
await
SelectTranslationsTestUtils
.
clickDoneButton
(
)
;
await
cleanup
(
)
;
}
)
;
