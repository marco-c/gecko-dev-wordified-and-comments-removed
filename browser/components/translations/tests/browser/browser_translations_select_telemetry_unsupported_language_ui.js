"
use
strict
"
;
add_task
(
async
function
test_select_translations_panel_telemetry_unsupported_language_ui
(
)
{
const
{
cleanup
runInPage
resolveDownloads
}
=
await
loadTestPage
(
{
page
:
SELECT_TEST_PAGE_URL
languagePairs
:
[
{
fromLang
:
"
fr
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
fr
"
}
]
prefs
:
[
[
"
browser
.
translations
.
select
.
enable
"
true
]
]
}
)
;
await
SelectTranslationsTestUtils
.
openPanel
(
runInPage
{
selectSpanishSection
:
true
openAtSpanishSection
:
true
onOpenPanel
:
SelectTranslationsTestUtils
.
assertPanelViewUnsupportedLanguage
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
open
{
expectedEventCount
:
1
expectNewFlowId
:
true
finalValuePredicates
:
[
value
=
>
value
.
extra
.
document_language
=
=
=
"
es
"
value
=
>
value
.
extra
.
from_language
=
=
=
"
es
"
value
=
>
value
.
extra
.
to_language
=
=
=
"
en
"
value
=
>
value
.
extra
.
top_preferred_language
=
=
=
"
en
"
]
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
unsupportedLanguageMessage
{
expectedEventCount
:
1
finalValuePredicates
:
[
value
=
>
value
.
extra
.
document_language
=
=
=
"
es
"
value
=
>
value
.
extra
.
detected_language
=
=
=
"
es
"
]
}
)
;
await
SelectTranslationsTestUtils
.
clickDoneButton
(
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
doneButton
{
expectedEventCount
:
1
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
close
{
expectedEventCount
:
1
}
)
;
await
SelectTranslationsTestUtils
.
openPanel
(
runInPage
{
openAtFrenchHyperlink
:
true
onOpenPanel
:
SelectTranslationsTestUtils
.
assertPanelViewUnsupportedLanguage
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
open
{
expectedEventCount
:
2
expectNewFlowId
:
true
finalValuePredicates
:
[
value
=
>
value
.
extra
.
document_language
=
=
=
"
es
"
value
=
>
value
.
extra
.
from_language
=
=
=
"
es
"
value
=
>
value
.
extra
.
to_language
=
=
=
"
en
"
value
=
>
value
.
extra
.
top_preferred_language
=
=
=
"
en
"
]
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
unsupportedLanguageMessage
{
expectedEventCount
:
2
finalValuePredicates
:
[
value
=
>
value
.
extra
.
document_language
=
=
=
"
es
"
value
=
>
value
.
extra
.
detected_language
=
=
=
"
es
"
]
}
)
;
await
SelectTranslationsTestUtils
.
changeSelectedTryAnotherSourceLanguage
(
"
fr
"
)
;
await
SelectTranslationsTestUtils
.
clickTranslateButton
(
{
downloadHandler
:
resolveDownloads
viewAssertion
:
SelectTranslationsTestUtils
.
assertPanelViewTranslated
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
translateButton
{
expectedEventCount
:
1
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translations
.
translationRequest
{
expectedEventCount
:
1
finalValuePredicates
:
[
value
=
>
value
.
extra
.
document_language
=
=
=
"
es
"
value
=
>
value
.
extra
.
from_language
=
=
=
"
fr
"
value
=
>
value
.
extra
.
to_language
=
=
=
"
en
"
value
=
>
value
.
extra
.
top_preferred_language
=
=
=
"
en
"
value
=
>
value
.
extra
.
request_target
=
=
=
"
select
"
value
=
>
value
.
extra
.
auto_translate
=
=
=
"
false
"
value
=
>
value
.
extra
.
source_text_code_units
=
=
=
(
AppConstants
.
platform
=
=
=
"
win
"
?
"
2064
"
:
"
2041
"
)
value
=
>
value
.
extra
.
source_text_word_count
=
=
=
"
358
"
]
}
)
;
await
SelectTranslationsTestUtils
.
clickDoneButton
(
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
doneButton
{
expectedEventCount
:
2
}
)
;
await
TestTranslationsTelemetry
.
assertEvent
(
Glean
.
translationsSelectTranslationsPanel
.
close
{
expectedEventCount
:
2
}
)
;
await
cleanup
(
)
;
}
)
;
