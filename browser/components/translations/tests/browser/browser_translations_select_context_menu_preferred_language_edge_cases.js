"
use
strict
"
;
add_task
(
async
function
test_translate_selection_menuitem_preferred_language_edge_cases
(
)
{
const
{
cleanup
runInPage
}
=
await
loadTestPage
(
{
page
:
SELECT_TEST_PAGE_URL
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
fr
"
}
{
fromLang
:
"
fr
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
pl
"
}
{
fromLang
:
"
pl
"
toLang
:
"
en
"
}
{
fromLang
:
"
fi
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
sl
"
}
]
prefs
:
[
[
"
browser
.
translations
.
select
.
enable
"
true
]
]
}
)
;
await
FullPageTranslationsTestUtils
.
assertPageIsUntranslated
(
runInPage
)
;
await
SelectTranslationsTestUtils
.
testContextMenuItemWithLocales
(
{
runInPage
systemLocales
:
[
]
appLocales
:
[
]
webLanguages
:
[
]
expectedTargetLanguage
:
"
en
"
}
)
;
await
SelectTranslationsTestUtils
.
testContextMenuItemWithLocales
(
{
runInPage
appLocales
:
[
"
fi
"
"
fr
"
"
en
-
US
"
]
webLanguages
:
[
"
zh
"
]
expectedTargetLanguage
:
"
fr
"
}
)
;
await
SelectTranslationsTestUtils
.
testContextMenuItemWithLocales
(
{
runInPage
appLocales
:
[
"
zh
"
"
uk
"
"
fr
"
"
en
-
US
"
]
webLanguages
:
[
"
fi
"
]
expectedTargetLanguage
:
"
fr
"
}
)
;
await
SelectTranslationsTestUtils
.
testContextMenuItemWithLocales
(
{
runInPage
appLocales
:
[
"
zh
"
"
fi
"
"
sl
"
"
fr
"
"
en
-
US
"
]
webLanguages
:
[
"
fi
"
"
zh
"
]
expectedTargetLanguage
:
"
sl
"
}
)
;
await
SelectTranslationsTestUtils
.
testContextMenuItemWithLocales
(
{
runInPage
systemLocales
:
[
"
zh
-
TW
"
"
zh
-
CN
"
"
de
"
]
appLocales
:
[
"
pt
-
BR
"
"
ja
"
]
webLanguages
:
[
"
cs
"
"
hu
"
]
expectedTargetLanguage
:
"
en
"
}
)
;
await
cleanup
(
)
;
}
)
;
