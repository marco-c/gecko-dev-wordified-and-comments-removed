"
use
strict
"
;
add_task
(
async
function
test_revisit_view_updates_with_auto_translate_success
(
)
{
const
{
cleanup
resolveDownloads
runInPage
}
=
await
loadTestPage
(
{
page
:
SPANISH_PAGE_URL
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
]
prefs
:
[
[
"
browser
.
translations
.
alwaysTranslateLanguages
"
"
"
]
]
}
)
;
await
assertTranslationsButton
(
{
button
:
true
circleArrows
:
false
locale
:
false
icon
:
true
}
"
The
translations
button
is
visible
.
"
)
;
info
(
"
Simulate
clicking
always
-
translate
-
language
in
the
settings
menu
"
+
"
adding
the
document
language
to
the
alwaysTranslateLanguages
pref
"
)
;
await
openTranslationsPanel
(
{
onOpenPanel
:
assertPanelDefaultView
}
)
;
await
openTranslationsSettingsMenu
(
)
;
await
assertIsAlwaysTranslateLanguage
(
"
es
"
{
checked
:
false
}
)
;
await
clickAlwaysTranslateLanguage
(
)
;
await
assertIsAlwaysTranslateLanguage
(
"
es
"
{
checked
:
true
}
)
;
await
assertTranslationsButton
(
{
button
:
true
circleArrows
:
true
locale
:
false
icon
:
true
}
"
The
icon
presents
the
loading
indicator
.
"
)
;
await
resolveDownloads
(
1
)
;
await
assertPageIsTranslated
(
"
es
"
"
en
"
runInPage
)
;
info
(
"
Navigate
to
a
page
in
an
unsupported
language
"
)
;
await
navigate
(
FRENCH_PAGE_URL
)
;
await
assertTranslationsButton
(
{
button
:
false
}
"
The
translations
button
should
be
unavailable
.
"
)
;
info
(
"
Open
the
translations
panel
to
show
the
default
unsupported
language
view
.
"
)
;
await
openTranslationsPanel
(
{
openFromAppMenu
:
true
onOpenPanel
:
assertPanelUnsupportedLanguageView
}
)
;
ok
(
getByL10nId
(
"
translations
-
panel
-
error
-
unsupported
"
)
"
The
unsupported
title
is
shown
.
"
)
;
ok
(
getByL10nId
(
"
translations
-
panel
-
error
-
unsupported
-
hint
-
known
"
)
"
The
unsupported
language
message
is
shown
.
"
)
;
ok
(
getByL10nId
(
"
translations
-
panel
-
learn
-
more
-
link
"
)
"
The
learn
more
link
is
available
"
)
;
info
(
"
Navigate
back
to
the
spanish
page
.
"
)
;
await
navigate
(
SPANISH_PAGE_URL_DOT_ORG
)
;
await
assertTranslationsButton
(
{
button
:
true
circleArrows
:
true
locale
:
false
icon
:
true
}
"
The
icon
presents
the
loading
indicator
.
"
)
;
await
resolveDownloads
(
1
)
;
await
assertPageIsTranslated
(
"
es
"
"
en
"
runInPage
)
;
await
openTranslationsPanel
(
{
openFromAppMenu
:
true
onOpenPanel
:
assertPanelRevisitView
}
)
;
info
(
"
Waiting
to
find
the
translations
panel
revisit
header
.
"
)
;
const
header
=
await
waitForCondition
(
(
)
=
>
maybeGetByL10nId
(
"
translations
-
panel
-
revisit
-
header
"
)
)
;
ok
(
header
"
The
revisit
panel
header
is
there
.
"
)
;
ok
(
!
maybeGetByL10nId
(
"
translations
-
panel
-
error
-
unsupported
"
)
"
The
unsupported
header
is
hidden
.
"
)
;
await
cleanup
(
)
;
}
)
;
