"
use
strict
"
;
add_task
(
async
function
test_revisit_view_updates_with_auto_translate_success
(
)
{
const
{
cleanup
resolveDownloads
runInPage
}
=
await
loadTestPage
(
{
page
:
SPANISH_PAGE_URL
languagePairs
:
[
{
fromLang
:
"
en
"
toLang
:
"
es
"
}
{
fromLang
:
"
es
"
toLang
:
"
en
"
}
]
}
)
;
await
FullPageTranslationsTestUtils
.
assertTranslationsButton
(
{
button
:
true
circleArrows
:
false
locale
:
false
icon
:
true
}
"
The
translations
button
is
visible
.
"
)
;
await
openTranslationsPanel
(
{
onOpenPanel
:
assertPanelDefaultView
}
)
;
await
openTranslationsSettingsMenu
(
)
;
await
assertIsAlwaysTranslateLanguage
(
"
es
"
{
checked
:
false
}
)
;
await
clickAlwaysTranslateLanguage
(
{
downloadHandler
:
resolveDownloads
}
)
;
await
assertIsAlwaysTranslateLanguage
(
"
es
"
{
checked
:
true
}
)
;
await
FullPageTranslationsTestUtils
.
assertPageIsTranslated
(
"
es
"
"
en
"
runInPage
)
;
await
navigate
(
"
Navigate
to
a
page
in
an
unsupported
language
"
{
url
:
FRENCH_PAGE_URL
}
)
;
await
FullPageTranslationsTestUtils
.
assertTranslationsButton
(
{
button
:
false
}
"
The
translations
button
should
be
unavailable
.
"
)
;
await
openTranslationsPanel
(
{
openFromAppMenu
:
true
onOpenPanel
:
assertPanelUnsupportedLanguageView
}
)
;
await
navigate
(
"
Navigate
back
to
the
Spanish
page
.
"
{
url
:
SPANISH_PAGE_URL_DOT_ORG
downloadHandler
:
resolveDownloads
}
)
;
await
FullPageTranslationsTestUtils
.
assertPageIsTranslated
(
"
es
"
"
en
"
runInPage
)
;
await
openTranslationsPanel
(
{
openFromAppMenu
:
true
onOpenPanel
:
assertPanelRevisitView
}
)
;
await
cleanup
(
)
;
}
)
;
