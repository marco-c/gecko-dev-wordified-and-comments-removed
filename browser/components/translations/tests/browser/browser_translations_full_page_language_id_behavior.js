"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
cases
=
[
{
page
:
SPANISH_PAGE_URL
alwaysTranslateLanguages
:
"
es
"
translatePage
:
"
es
"
message
:
"
Auto
-
translate
since
the
declared
language
and
identified
language
agree
"
}
{
page
:
SPANISH_PAGE_URL
offerTranslation
:
"
es
"
message
:
"
The
declared
language
and
identified
language
agree
offer
a
translation
"
}
{
page
:
SPANISH_PAGE_SHORT_URL
alwaysTranslateLanguages
:
"
es
"
translatePage
:
"
es
"
message
:
"
The
declared
language
and
identified
language
agree
offer
a
translation
even
"
+
"
though
the
page
has
a
short
amount
of
content
.
"
}
{
page
:
SPANISH_PAGE_SHORT_URL
offerTranslation
:
"
es
"
message
:
"
The
declared
language
and
identified
language
agree
offer
a
translation
"
}
{
page
:
SPANISH_PAGE_MISMATCH_URL
alwaysTranslateLanguages
:
"
es
"
buttonShown
:
true
message
:
"
The
declared
and
(
confident
)
detected
language
disagree
.
Only
show
the
button
do
not
auto
-
translate
.
"
}
{
page
:
SPANISH_PAGE_MISMATCH_URL
buttonShown
:
true
message
:
"
The
declared
and
(
confident
)
detected
language
disagree
.
Only
show
the
button
do
not
offer
.
"
}
{
page
:
SPANISH_PAGE_MISMATCH_SHORT_URL
alwaysTranslateLanguages
:
"
es
"
buttonShown
:
true
message
:
"
The
declared
and
(
low
-
confidence
)
detected
language
disagree
.
Only
show
the
button
do
not
auto
-
translate
.
"
}
{
page
:
SPANISH_PAGE_MISMATCH_SHORT_URL
buttonShown
:
true
message
:
"
The
declared
and
(
low
-
confidence
)
detected
language
disagree
.
Only
show
the
button
do
not
offer
.
"
}
{
page
:
SPANISH_PAGE_UNDECLARED_URL
alwaysTranslateLanguages
:
"
es
fr
"
translatePage
:
"
es
"
message
:
"
There
is
no
declared
language
but
there
is
high
confidence
in
the
detected
language
so
go
ahead
and
auto
-
translate
.
"
}
{
page
:
SPANISH_PAGE_UNDECLARED_URL
offerTranslation
:
"
es
"
message
:
"
There
is
no
declared
language
but
there
is
high
confidence
in
the
detected
language
so
go
ahead
and
offer
.
"
}
{
page
:
SPANISH_PAGE_MISMATCH_SHORT_URL
alwaysTranslateLanguages
:
"
es
"
buttonShown
:
true
message
:
"
A
language
was
detected
but
it
was
so
low
confidence
only
show
the
button
.
"
}
{
page
:
SPANISH_PAGE_MISMATCH_SHORT_URL
buttonShown
:
true
message
:
"
A
language
was
detected
but
it
was
so
low
confidence
only
show
the
button
.
"
}
]
;
add_task
(
async
function
test_language_identification_behavior
(
)
{
for
(
const
[
caseNo
testCase
]
of
Object
.
entries
(
cases
)
)
{
const
{
page
message
alwaysTranslateLanguages
neverTranslateLanguages
translatePage
offerTranslation
buttonShown
}
=
testCase
;
info
(
Testing
Case
{
Number
(
caseNo
)
+
1
}
)
;
TranslationsParent
.
testAutomaticPopup
=
true
;
let
wasPopupShown
=
false
;
window
.
FullPageTranslationsPanel
.
elements
;
const
{
promise
:
popupShown
resolve
}
=
Promise
.
withResolvers
(
)
;
const
panel
=
window
.
document
.
getElementById
(
"
full
-
page
-
translations
-
panel
"
)
;
function
handlePopupShown
(
)
{
wasPopupShown
=
true
;
panel
.
removeEventListener
(
"
popupshown
"
handlePopupShown
)
;
resolve
(
)
;
}
panel
.
addEventListener
(
"
popupshown
"
handlePopupShown
)
;
const
{
cleanup
runInPage
win
}
=
await
loadTestPage
(
{
page
languagePairs
:
LANGUAGE_PAIRS
autoDownloadFromRemoteSettings
:
true
contentEagerMode
:
true
prefs
:
[
[
"
browser
.
translations
.
alwaysTranslateLanguages
"
alwaysTranslateLanguages
]
[
"
browser
.
translations
.
neverTranslateLanguages
"
neverTranslateLanguages
]
]
}
)
;
let
outcomes
=
0
;
if
(
buttonShown
)
{
outcomes
+
+
;
}
if
(
offerTranslation
)
{
outcomes
+
+
;
}
if
(
translatePage
)
{
outcomes
+
+
;
}
if
(
outcomes
!
=
=
1
)
{
throw
new
Error
(
"
Expected
only
1
main
outcome
.
"
)
;
}
if
(
buttonShown
|
|
offerTranslation
|
|
translatePage
)
{
await
FullPageTranslationsTestUtils
.
assertTranslationsButton
(
{
button
:
true
circleArrows
:
false
locale
:
translatePage
icon
:
true
}
offerTranslation
?
"
The
translation
button
is
visible
"
:
message
)
;
}
else
{
await
FullPageTranslationsTestUtils
.
assertTranslationsButton
(
{
button
:
false
}
"
The
translations
button
is
not
visible
.
"
)
;
}
if
(
translatePage
)
{
await
FullPageTranslationsTestUtils
.
assertAllPageContentIsTranslated
(
{
fromLanguage
:
translatePage
toLanguage
:
"
en
"
runInPage
message
}
)
;
}
else
{
await
FullPageTranslationsTestUtils
.
assertPageIsUntranslated
(
runInPage
message
)
;
}
if
(
offerTranslation
)
{
await
popupShown
;
ok
(
wasPopupShown
message
)
;
FullPageTranslationsTestUtils
.
assertSelectedFromLanguage
(
{
win
langTag
:
offerTranslation
}
)
;
FullPageTranslationsTestUtils
.
assertSelectedToLanguage
(
{
win
langTag
:
"
en
"
}
)
;
}
else
{
is
(
wasPopupShown
false
"
A
translation
was
not
offered
"
)
;
}
TranslationsParent
.
testAutomaticPopup
=
false
;
panel
.
removeEventListener
(
"
popupshown
"
handlePopupShown
)
;
await
cleanup
(
)
;
}
}
)
;
