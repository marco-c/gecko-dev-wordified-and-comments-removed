"
use
strict
"
;
add_task
(
async
function
test_select_translations_panel_translate_on_change_from_language
(
)
{
const
{
cleanup
runInPage
resolveDownloads
}
=
await
loadTestPage
(
{
page
:
SELECT_TEST_PAGE_URL
languagePairs
:
[
{
fromLang
:
"
fr
"
toLang
:
"
en
"
}
{
fromLang
:
"
en
"
toLang
:
"
fr
"
}
]
prefs
:
[
[
"
browser
.
translations
.
select
.
enable
"
true
]
]
}
)
;
await
SelectTranslationsTestUtils
.
openPanel
(
runInPage
{
selectSpanishSection
:
true
openAtSpanishSection
:
true
expectedFromLanguage
:
null
expectedToLanguage
:
"
en
"
onOpenPanel
:
SelectTranslationsTestUtils
.
assertPanelViewNoFromLangSelected
}
)
;
await
SelectTranslationsTestUtils
.
changeSelectedFromLanguage
(
[
"
fr
"
]
{
openDropdownMenu
:
true
downloadHandler
:
resolveDownloads
onChangeLanguage
:
SelectTranslationsTestUtils
.
assertPanelViewTranslated
}
)
;
await
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_select_translations_panel_translate_on_change_to_language
(
)
{
const
{
cleanup
runInPage
resolveDownloads
}
=
await
loadTestPage
(
{
page
:
SELECT_TEST_PAGE_URL
languagePairs
:
LANGUAGE_PAIRS
prefs
:
[
[
"
browser
.
translations
.
select
.
enable
"
true
]
]
}
)
;
await
SelectTranslationsTestUtils
.
openPanel
(
runInPage
{
selectEnglishSection
:
true
openAtEnglishSection
:
true
expectedFromLanguage
:
"
en
"
expectedToLanguage
:
null
onOpenPanel
:
SelectTranslationsTestUtils
.
assertPanelViewNoToLangSelected
}
)
;
await
SelectTranslationsTestUtils
.
changeSelectedToLanguage
(
[
"
es
"
]
{
openDropdownMenu
:
true
downloadHandler
:
resolveDownloads
onChangeLanguage
:
SelectTranslationsTestUtils
.
assertPanelViewTranslated
}
)
;
await
cleanup
(
)
;
}
)
;
