const
Cm
=
Components
.
manager
;
Cm
.
QueryInterface
(
Ci
.
nsIServiceManager
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
firstPaintNotification
=
"
widget
-
first
-
paint
"
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
firstPaintNotification
=
"
xul
-
window
-
visible
"
;
let
win
canvas
;
let
paints
=
[
]
;
let
afterPaintListener
=
(
)
=
>
{
let
width
height
;
canvas
.
width
=
width
=
win
.
innerWidth
;
canvas
.
height
=
height
=
win
.
innerHeight
;
if
(
width
<
1
|
|
height
<
1
)
return
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
{
alpha
:
false
willReadFrequently
:
true
}
)
;
ctx
.
drawWindow
(
win
0
0
width
height
"
white
"
ctx
.
DRAWWINDOW_DO_NOT_FLUSH
|
ctx
.
DRAWWINDOW_DRAW_VIEW
|
ctx
.
DRAWWINDOW_ASYNC_DECODE_IMAGES
|
ctx
.
DRAWWINDOW_USE_WIDGET_LAYERS
)
;
paints
.
push
(
{
data
:
ctx
.
getImageData
(
0
0
width
height
)
.
data
width
height
}
)
;
}
;
function
startupRecorder
(
)
{
this
.
wrappedJSObject
=
this
;
this
.
loader
=
Cc
[
"
mozilla
.
org
/
moz
/
jsloader
;
1
"
]
.
getService
(
Ci
.
xpcIJSModuleLoader
)
;
this
.
data
=
{
images
:
{
"
image
-
drawing
"
:
new
Set
(
)
"
image
-
loading
"
:
new
Set
(
)
}
code
:
{
}
}
;
this
.
done
=
new
Promise
(
resolve
=
>
{
this
.
_resolve
=
resolve
;
}
)
;
}
startupRecorder
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
11c095b2
-
e42e
-
4bdf
-
9dd0
-
aed87595f6a4
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
record
(
name
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
startup
.
record
"
false
)
)
return
;
this
.
data
.
code
[
name
]
=
{
components
:
this
.
loader
.
loadedComponents
(
)
modules
:
this
.
loader
.
loadedModules
(
)
services
:
Object
.
keys
(
Cc
)
.
filter
(
c
=
>
{
try
{
return
Cm
.
isServiceInstantiatedByContractID
(
c
Ci
.
nsISupports
)
;
}
catch
(
e
)
{
return
false
;
}
}
)
}
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
app
-
startup
"
)
{
let
topics
=
[
"
profile
-
do
-
change
"
"
toplevel
-
window
-
ready
"
"
image
-
loading
"
"
image
-
drawing
"
firstPaintNotification
"
sessionstore
-
windows
-
restored
"
]
;
for
(
let
t
of
topics
)
Services
.
obs
.
addObserver
(
this
t
)
;
return
;
}
if
(
topic
=
=
"
image
-
drawing
"
|
|
topic
=
=
"
image
-
loading
"
)
{
this
.
data
.
images
[
topic
]
.
add
(
data
)
;
return
;
}
Services
.
obs
.
removeObserver
(
this
topic
)
;
if
(
topic
=
=
firstPaintNotification
&
&
Services
.
prefs
.
getBoolPref
(
"
browser
.
startup
.
record
"
false
)
)
{
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
canvas
=
win
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
canvas
"
)
;
canvas
.
mozOpaque
=
true
;
afterPaintListener
(
)
;
win
.
addEventListener
(
"
MozAfterPaint
"
afterPaintListener
)
;
}
if
(
topic
=
=
"
sessionstore
-
windows
-
restored
"
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
startup
.
record
"
false
)
)
{
this
.
_resolve
(
)
;
this
.
_resolve
=
null
;
return
;
}
Services
.
tm
.
dispatchToMainThread
(
this
.
record
.
bind
(
this
"
before
handling
user
events
"
)
)
;
(
function
waitForIdle
(
callback
count
=
10
)
{
if
(
count
)
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
waitForIdle
(
callback
count
-
1
)
)
;
else
callback
(
)
;
}
)
(
(
)
=
>
{
this
.
record
(
"
before
becoming
idle
"
)
;
Services
.
obs
.
removeObserver
(
this
"
image
-
drawing
"
)
;
Services
.
obs
.
removeObserver
(
this
"
image
-
loading
"
)
;
win
.
removeEventListener
(
"
MozAfterPaint
"
afterPaintListener
)
;
win
=
null
;
this
.
data
.
frames
=
paints
;
paints
=
null
;
this
.
_resolve
(
)
;
this
.
_resolve
=
null
;
}
)
;
}
else
{
const
topicsToNames
=
{
"
profile
-
do
-
change
"
:
"
before
profile
selection
"
"
toplevel
-
window
-
ready
"
:
"
before
opening
first
browser
window
"
}
;
topicsToNames
[
firstPaintNotification
]
=
"
before
first
paint
"
;
this
.
record
(
topicsToNames
[
topic
]
)
;
}
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
startupRecorder
]
)
;
