const
{
classes
:
Cc
utils
:
Cu
interfaces
:
Ci
manager
:
Cm
}
=
Components
;
Cm
.
QueryInterface
(
Ci
.
nsIServiceManager
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
firstPaintNotification
=
"
widget
-
first
-
paint
"
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
firstPaintNotification
=
"
xul
-
window
-
visible
"
;
function
startupRecorder
(
)
{
this
.
wrappedJSObject
=
this
;
this
.
loader
=
Cc
[
"
mozilla
.
org
/
moz
/
jsloader
;
1
"
]
.
getService
(
Ci
.
xpcIJSModuleLoader
)
;
this
.
data
=
{
}
;
}
startupRecorder
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
11c095b2
-
e42e
-
4bdf
-
9dd0
-
aed87595f6a4
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
record
(
name
)
{
this
.
data
[
name
]
=
{
components
:
this
.
loader
.
loadedComponents
(
)
modules
:
this
.
loader
.
loadedModules
(
)
services
:
Object
.
keys
(
Cc
)
.
filter
(
c
=
>
{
try
{
Cm
.
isServiceInstantiatedByContractID
(
c
Ci
.
nsISupports
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
)
}
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
app
-
startup
"
)
{
let
topics
=
[
"
profile
-
do
-
change
"
"
toplevel
-
window
-
ready
"
firstPaintNotification
"
sessionstore
-
windows
-
restored
"
]
;
for
(
let
t
of
topics
)
Services
.
obs
.
addObserver
(
this
t
)
;
return
;
}
Services
.
obs
.
removeObserver
(
this
topic
)
;
if
(
topic
=
=
"
sessionstore
-
windows
-
restored
"
)
{
Services
.
tm
.
idleDispatchToMainThread
(
this
.
record
.
bind
(
this
"
before
handling
user
events
"
)
)
;
}
else
{
const
topicsToNames
=
{
"
profile
-
do
-
change
"
:
"
before
profile
selection
"
"
toplevel
-
window
-
ready
"
:
"
before
opening
first
browser
window
"
}
;
topicsToNames
[
firstPaintNotification
]
=
"
before
first
paint
"
;
this
.
record
(
topicsToNames
[
topic
]
)
;
}
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
startupRecorder
]
)
;
