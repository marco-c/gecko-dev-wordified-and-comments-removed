const
TOPIC_BROWSERGLUE_TEST
=
"
browser
-
glue
-
test
"
;
const
TOPICDATA_BROWSERGLUE_TEST
=
"
force
-
ui
-
migration
"
;
const
UI_VERSION
=
138
;
const
gBrowserGlue
=
Cc
[
"
mozilla
.
org
/
browser
/
browserglue
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
function
checkConstraint
(
state
origin
type
)
{
Assert
.
equal
(
state
Services
.
perms
.
testExactPermissionFromPrincipal
(
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
origin
)
type
)
{
origin
}
of
type
{
type
}
was
set
to
:
{
state
}
)
;
}
add_task
(
async
function
test_resettingDefaults
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
migration
.
version
"
)
;
Services
.
perms
.
removeAll
(
)
;
}
)
;
Services
.
perms
.
removeAll
(
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
migration
.
version
"
UI_VERSION
)
;
let
pm
=
Services
.
perms
;
let
originInfos
=
[
[
"
https
:
/
/
www
.
mozilla
.
org
"
"
uitour
"
]
[
"
https
:
/
/
support
.
mozilla
.
org
"
"
uitour
"
]
[
"
about
:
home
"
"
uitour
"
]
[
"
about
:
newtab
"
"
uitour
"
]
[
"
https
:
/
/
addons
.
mozilla
.
org
"
"
install
"
]
[
"
https
:
/
/
support
.
mozilla
.
org
"
"
remote
-
troubleshooting
"
]
[
"
about
:
welcome
"
"
autoplay
-
media
"
]
]
;
for
(
let
originInfo
of
originInfos
)
{
pm
.
addFromPrincipal
(
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
originInfo
[
0
]
)
originInfo
[
1
]
pm
.
UNKNOWN_ACTION
)
;
}
for
(
let
originInfo
of
originInfos
)
{
checkConstraint
(
pm
.
UNKNOWN_ACTION
originInfo
[
0
]
originInfo
[
1
]
)
;
}
gBrowserGlue
.
observe
(
null
TOPIC_BROWSERGLUE_TEST
TOPICDATA_BROWSERGLUE_TEST
)
;
for
(
let
originInfo
of
originInfos
)
{
checkConstraint
(
pm
.
ALLOW_ACTION
originInfo
[
0
]
originInfo
[
1
]
)
;
}
}
)
;
add_task
(
async
function
test_resettingDenyAction
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
migration
.
version
"
)
;
Services
.
perms
.
removeAll
(
)
;
}
)
;
Services
.
perms
.
removeAll
(
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
migration
.
version
"
UI_VERSION
)
;
let
pm
=
Services
.
perms
;
const
origin
=
"
https
:
/
/
www
.
mozilla
.
org
"
;
const
type
=
"
uitour
"
;
pm
.
addFromPrincipal
(
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
origin
)
type
pm
.
DENY_ACTION
)
;
checkConstraint
(
pm
.
DENY_ACTION
origin
type
)
;
gBrowserGlue
.
observe
(
null
TOPIC_BROWSERGLUE_TEST
TOPICDATA_BROWSERGLUE_TEST
)
;
checkConstraint
(
pm
.
DENY_ACTION
origin
type
)
;
}
)
;
