const
PREF_CACHED_FILE_EXISTENCE
=
"
distribution
.
iniFile
.
exists
.
value
"
;
const
PREF_CACHED_FILE_APPVERSION
=
"
distribution
.
iniFile
.
exists
.
appversion
"
;
const
PREF_LOAD_FROM_PROFILE
=
"
distribution
.
testing
.
loadFromProfile
"
;
const
gTestDir
=
do_get_cwd
(
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
add_task
(
async
function
(
)
{
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_FILE_APPVERSION
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_FILE_EXISTENCE
)
;
setupTest
(
)
;
let
{
DistributionCustomizer
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
distribution
.
js
"
)
;
let
distribution
=
new
DistributionCustomizer
(
)
;
copyDistributionToProfile
(
)
;
let
exists
=
distribution
.
_hasDistributionIni
;
Assert
.
ok
(
exists
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
PREF_CACHED_FILE_EXISTENCE
undefined
)
true
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
PREF_CACHED_FILE_APPVERSION
"
unknown
"
)
AppConstants
.
MOZ_APP_VERSION
)
;
deleteDistribution
(
)
;
delete
distribution
.
_hasDistributionIni
;
exists
=
distribution
.
_hasDistributionIni
;
Assert
.
ok
(
exists
)
;
Services
.
prefs
.
clearUserPref
(
PREF_CACHED_FILE_EXISTENCE
)
;
delete
distribution
.
_hasDistributionIni
;
exists
=
distribution
.
_hasDistributionIni
;
Assert
.
ok
(
!
exists
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
PREF_CACHED_FILE_EXISTENCE
undefined
)
false
)
;
copyDistributionToProfile
(
)
;
delete
distribution
.
_hasDistributionIni
;
exists
=
distribution
.
_hasDistributionIni
;
Assert
.
ok
(
!
exists
)
;
Services
.
prefs
.
setStringPref
(
PREF_CACHED_FILE_APPVERSION
"
older
version
"
)
;
delete
distribution
.
_hasDistributionIni
;
exists
=
distribution
.
_hasDistributionIni
;
Assert
.
ok
(
exists
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
PREF_CACHED_FILE_EXISTENCE
undefined
)
true
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
PREF_CACHED_FILE_APPVERSION
"
unknown
"
)
AppConstants
.
MOZ_APP_VERSION
)
;
}
)
;
function
copyDistributionToProfile
(
)
{
let
distroDir
=
gProfD
.
clone
(
)
;
distroDir
.
leafName
=
"
distribution
"
;
let
iniFile
=
distroDir
.
clone
(
)
;
iniFile
.
append
(
"
distribution
.
ini
"
)
;
if
(
iniFile
.
exists
(
)
)
{
iniFile
.
remove
(
false
)
;
print
(
"
distribution
.
ini
already
exists
did
some
test
forget
to
cleanup
?
"
)
;
}
let
testDistributionFile
=
gTestDir
.
clone
(
)
;
testDistributionFile
.
append
(
"
distribution
.
ini
"
)
;
testDistributionFile
.
copyTo
(
distroDir
"
distribution
.
ini
"
)
;
Assert
.
ok
(
testDistributionFile
.
exists
(
)
)
;
}
function
deleteDistribution
(
)
{
let
distroDir
=
gProfD
.
clone
(
)
;
distroDir
.
leafName
=
"
distribution
"
;
let
iniFile
=
distroDir
.
clone
(
)
;
iniFile
.
append
(
"
distribution
.
ini
"
)
;
iniFile
.
remove
(
false
)
;
}
function
setupTest
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_LOAD_FROM_PROFILE
true
)
;
}
do_register_cleanup
(
function
(
)
{
deleteDistribution
(
)
;
Services
.
prefs
.
clearUserPref
(
PREF_LOAD_FROM_PROFILE
)
;
}
)
;
