"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Integration
.
jsm
"
this
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
ContentPermissionPrompt
"
"
mozilla
.
org
/
content
-
permission
/
prompt
;
1
"
"
nsIContentPermissionPrompt
"
)
;
function
MockContentPermissionType
(
type
)
{
this
.
type
=
type
;
}
MockContentPermissionType
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIContentPermissionType
]
)
wrappedJSObject
:
this
}
;
function
MockContentPermissionRequest
(
typesArray
)
{
this
.
types
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
for
(
let
type
of
typesArray
)
{
this
.
types
.
appendElement
(
type
)
;
}
}
MockContentPermissionRequest
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIContentPermissionRequest
]
)
wrappedJSObject
:
this
cancel
(
)
{
this
.
cancelled
=
true
;
}
cancelled
:
false
principal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
;
add_task
(
async
function
test_empty_types
(
)
{
let
mockRequest
=
new
MockContentPermissionRequest
(
[
]
)
;
Assert
.
throws
(
(
)
=
>
{
ContentPermissionPrompt
.
prompt
(
mockRequest
)
;
}
/
NS_ERROR_UNEXPECTED
/
"
Should
have
thrown
NS_ERROR_UNEXPECTED
.
"
)
;
Assert
.
ok
(
mockRequest
.
cancelled
"
Should
have
cancelled
the
request
.
"
)
;
}
)
;
add_task
(
async
function
test_multiple_types
(
)
{
let
mockRequest
=
new
MockContentPermissionRequest
(
[
new
MockContentPermissionType
(
"
test1
"
)
new
MockContentPermissionType
(
"
test2
"
)
]
)
;
Assert
.
throws
(
(
)
=
>
{
ContentPermissionPrompt
.
prompt
(
mockRequest
)
;
}
/
NS_ERROR_UNEXPECTED
/
)
;
Assert
.
ok
(
mockRequest
.
cancelled
"
Should
have
cancelled
the
request
.
"
)
;
}
)
;
add_task
(
async
function
test_not_permission_type
(
)
{
let
mockRequest
=
new
MockContentPermissionRequest
(
[
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
]
)
}
]
)
;
Assert
.
throws
(
(
)
=
>
{
ContentPermissionPrompt
.
prompt
(
mockRequest
)
;
}
/
NS_NOINTERFACE
/
)
;
Assert
.
ok
(
mockRequest
.
cancelled
"
Should
have
cancelled
the
request
.
"
)
;
}
)
;
add_task
(
async
function
test_unrecognized_type
(
)
{
let
mockRequest
=
new
MockContentPermissionRequest
(
[
new
MockContentPermissionType
(
"
test1
"
)
]
)
;
Assert
.
throws
(
(
)
=
>
{
ContentPermissionPrompt
.
prompt
(
mockRequest
)
;
}
/
NS_ERROR_FAILURE
/
)
;
Assert
.
ok
(
mockRequest
.
cancelled
"
Should
have
cancelled
the
request
.
"
)
;
}
)
;
add_task
(
async
function
test_working_request
(
)
{
let
mockType
=
new
MockContentPermissionType
(
"
test
-
permission
-
type
"
)
;
let
mockRequest
=
new
MockContentPermissionRequest
(
[
mockType
]
)
;
let
didPrompt
=
false
;
let
mockPermissionPrompt
=
{
prompt
(
)
{
didPrompt
=
true
;
}
}
;
let
integration
=
(
base
)
=
>
(
{
createPermissionPrompt
(
type
request
)
{
Assert
.
equal
(
type
"
test
-
permission
-
type
"
)
;
Assert
.
ok
(
Object
.
is
(
request
.
wrappedJSObject
mockRequest
.
wrappedJSObject
)
)
;
return
mockPermissionPrompt
;
}
}
)
;
try
{
Integration
.
contentPermission
.
register
(
integration
)
;
ContentPermissionPrompt
.
prompt
(
mockRequest
)
;
Assert
.
ok
(
!
mockRequest
.
cancelled
"
Should
not
have
cancelled
the
request
.
"
)
;
Assert
.
ok
(
didPrompt
"
Should
have
tried
to
show
the
prompt
"
)
;
}
finally
{
Integration
.
contentPermission
.
unregister
(
integration
)
;
}
}
)
;
