"
use
strict
"
;
const
PRIVILEGEDABOUT_PROCESS_PREF
=
"
browser
.
tabs
.
remote
.
separatePrivilegedContentProcess
"
;
const
PRIVILEGEDABOUT_PROCESS_ENABLED
=
Services
.
prefs
.
getBoolPref
(
PRIVILEGEDABOUT_PROCESS_PREF
)
;
const
REMOTE_BROWSER_SHOWN
=
"
remote
-
browser
-
shown
"
;
const
EXPECTED_ABOUTHOME_REMOTE_TYPE
=
PRIVILEGEDABOUT_PROCESS_ENABLED
?
E10SUtils
.
PRIVILEGEDABOUT_REMOTE_TYPE
:
E10SUtils
.
DEFAULT_REMOTE_TYPE
;
async
function
assertOneRemoteBrowserShown
(
aCmdLine
aExpectedURL
aRemoteType
)
{
let
shownRemoteBrowsers
=
0
;
let
observer
=
(
)
=
>
{
shownRemoteBrowsers
+
+
;
}
;
Services
.
obs
.
addObserver
(
observer
REMOTE_BROWSER_SHOWN
)
;
let
newWinPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
aExpectedURL
}
)
;
let
cmdLineHandler
=
Cc
[
"
mozilla
.
org
/
browser
/
final
-
clh
;
1
"
]
.
getService
(
Ci
.
nsICommandLineHandler
)
;
cmdLineHandler
.
handle
(
aCmdLine
)
;
let
newWin
=
await
newWinPromise
;
Services
.
obs
.
removeObserver
(
observer
REMOTE_BROWSER_SHOWN
)
;
if
(
aRemoteType
=
=
E10SUtils
.
WEB_REMOTE_TYPE
)
{
Assert
.
ok
(
E10SUtils
.
isWebRemoteType
(
newWin
.
gBrowser
.
selectedBrowser
.
remoteType
)
)
;
}
else
{
Assert
.
equal
(
newWin
.
gBrowser
.
selectedBrowser
.
remoteType
aRemoteType
)
;
}
Assert
.
equal
(
shownRemoteBrowsers
1
"
Should
have
only
shown
1
remote
browser
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
function
constructOnePageCmdLine
(
aURL
)
{
return
Cu
.
createCommandLine
(
[
"
-
url
"
aURL
]
null
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
)
;
}
add_task
(
async
function
setup
(
)
{
NewTabPagePreloading
.
removePreloadedBrowser
(
window
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtab
.
preload
"
false
]
[
"
browser
.
startup
.
homepage
"
"
about
:
home
"
]
[
"
browser
.
startup
.
page
"
1
]
]
}
)
;
}
)
;
add_task
(
async
function
test_default_args_and_homescreen
(
)
{
let
cmdLine
=
Cu
.
createCommandLine
(
[
]
null
Ci
.
nsICommandLine
.
STATE_INITIAL_LAUNCH
)
;
await
assertOneRemoteBrowserShown
(
cmdLine
"
about
:
home
"
EXPECTED_ABOUTHOME_REMOTE_TYPE
)
;
}
)
;
add_task
(
async
function
test_abouthome_arg
(
)
{
const
URI
=
"
about
:
home
"
;
let
cmdLine
=
constructOnePageCmdLine
(
URI
)
;
await
assertOneRemoteBrowserShown
(
cmdLine
URI
EXPECTED_ABOUTHOME_REMOTE_TYPE
)
;
}
)
;
add_task
(
async
function
test_examplecom_arg
(
)
{
const
URI
=
"
http
:
/
/
example
.
com
/
"
;
let
cmdLine
=
constructOnePageCmdLine
(
URI
)
;
await
assertOneRemoteBrowserShown
(
cmdLine
URI
E10SUtils
.
DEFAULT_REMOTE_TYPE
)
;
}
)
;
