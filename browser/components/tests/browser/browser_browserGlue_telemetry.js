"
use
strict
"
;
add_task
(
function
check_startup_pinned_telemetry
(
)
{
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
)
;
switch
(
AppConstants
.
platform
)
{
case
"
win
"
:
if
(
AppConstants
.
platform
=
=
=
"
win
"
&
&
Services
.
sysinfo
.
getProperty
(
"
hasWinPackageId
"
)
)
{
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_taskbar_pinned
"
)
;
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_taskbar_pinned_private
"
)
;
}
else
{
TelemetryTestUtils
.
assertScalar
(
scalars
"
os
.
environment
.
is_taskbar_pinned
"
false
"
Pin
set
on
win
"
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
"
os
.
environment
.
is_taskbar_pinned_private
"
false
"
Pin
private
set
on
win
"
)
;
}
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_kept_in_dock
"
)
;
break
;
case
"
macosx
"
:
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_taskbar_pinned
"
)
;
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_taskbar_pinned_private
"
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
"
os
.
environment
.
is_kept_in_dock
"
false
"
Dock
set
on
mac
"
)
;
break
;
default
:
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_taskbar_pinned
"
)
;
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_taskbar_pinned_private
"
)
;
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_kept_in_dock
"
)
;
break
;
}
}
)
;
add_task
(
function
check_is_default_handler_telemetry
(
)
{
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
)
;
const
handlers
=
[
"
.
pdf
"
"
mailto
"
]
;
switch
(
AppConstants
.
platform
)
{
case
"
win
"
:
{
Assert
.
ok
(
"
os
.
environment
.
is_default_handler
"
in
scalars
)
;
const
keys
=
Object
.
keys
(
scalars
[
"
os
.
environment
.
is_default_handler
"
]
)
;
handlers
.
every
(
x
=
>
{
Assert
.
ok
(
keys
.
includes
(
x
)
{
x
}
handler
present
in
telemetry
)
;
return
true
;
}
)
;
if
(
Cu
.
isInAutomation
)
{
handlers
.
every
(
x
=
>
{
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
os
.
environment
.
is_default_handler
x
false
Not
default
{
x
}
handler
on
Windows
)
;
return
true
;
}
)
;
}
break
;
}
default
:
TelemetryTestUtils
.
assertScalarUnset
(
scalars
"
os
.
environment
.
is_default_handler
"
)
;
break
;
}
}
)
;
