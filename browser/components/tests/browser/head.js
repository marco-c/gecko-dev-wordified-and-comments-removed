"
use
strict
"
;
const
{
sinon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
)
;
let
didMockShell
=
false
;
function
mockShell
(
overrides
=
{
}
)
{
if
(
!
didMockShell
)
{
sinon
.
stub
(
window
"
getShellService
"
)
;
registerCleanupFunction
(
(
)
=
>
{
getShellService
.
restore
(
)
;
}
)
;
didMockShell
=
true
;
}
let
mock
=
{
canPin
:
false
isDefault
:
false
isPinned
:
false
checkPinCurrentAppToTaskbar
(
)
{
if
(
!
this
.
canPin
)
{
throw
Error
;
}
}
isCurrentAppPinnedToTaskbarAsync
(
)
{
return
Promise
.
resolve
(
this
.
isPinned
)
;
}
isDefaultBrowser
(
)
{
return
this
.
isDefault
;
}
QueryInterface
(
)
{
return
this
;
}
get
shellService
(
)
{
return
this
;
}
pinCurrentAppToTaskbar
:
sinon
.
stub
(
)
setAsDefault
:
sinon
.
stub
(
)
.
.
.
overrides
}
;
mock
=
new
Proxy
(
mock
{
get
(
target
prop
)
{
return
(
prop
in
target
?
target
:
ShellService
)
[
prop
]
;
}
}
)
;
getShellService
.
returns
(
mock
)
;
return
mock
;
}
