"
use
strict
"
;
const
{
ClientID
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ClientID
.
sys
.
mjs
"
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
const
{
UIState
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
sync
/
UIState
.
sys
.
mjs
"
)
;
const
FAKE_UID
=
"
0123456789abcdef0123456789abcdef
"
;
let
gClientID
=
null
;
add_setup
(
async
(
)
=
>
{
gClientID
=
await
ClientID
.
getClientID
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
identity
.
fxaccounts
.
telemetry
.
clientAssociationPing
.
enabled
"
true
]
]
}
)
;
}
)
;
async
function
testMockUIState
(
status
taskFn
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
stub
(
UIState
"
get
"
)
.
returns
(
{
status
lastSync
:
new
Date
(
)
email
:
"
test
example
.
com
"
uid
:
FAKE_UID
}
)
;
Services
.
obs
.
notifyObservers
(
null
UIState
.
ON_UPDATE
)
;
try
{
let
checkValues
=
new
Promise
(
resolve
=
>
{
GleanPings
.
fxAccounts
.
testBeforeNextSubmit
(
(
)
=
>
{
taskFn
(
)
;
resolve
(
)
;
}
)
;
}
)
;
GleanPings
.
fxAccounts
.
submit
(
)
;
await
checkValues
;
}
finally
{
sandbox
.
restore
(
)
;
}
}
add_task
(
async
function
test_client_association_logged_in
(
)
{
await
testMockUIState
(
UIState
.
STATUS_SIGNED_IN
async
(
)
=
>
{
Assert
.
equal
(
Glean
.
clientAssociation
.
uid
.
testGetValue
(
)
FAKE_UID
"
Got
expected
account
uid
"
)
;
Assert
.
equal
(
Glean
.
clientAssociation
.
legacyClientId
.
testGetValue
(
)
gClientID
"
Got
expected
legacy
telemetry
client
ID
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_client_association_not_logged_in
(
)
{
for
(
let
status
of
[
UIState
.
STATUS_NOT_CONFIGURED
UIState
.
STATUS_LOGIN_FAILED
UIState
.
STATUS_NOT_VERIFIED
]
)
{
await
testMockUIState
(
status
async
(
)
=
>
{
Assert
.
equal
(
Glean
.
clientAssociation
.
uid
.
testGetValue
(
)
null
"
No
value
set
for
account
uid
"
)
;
Assert
.
equal
(
Glean
.
clientAssociation
.
legacyClientId
.
testGetValue
(
)
null
"
No
value
set
for
legacy
telemetry
client
ID
"
)
;
}
)
;
}
}
)
;
