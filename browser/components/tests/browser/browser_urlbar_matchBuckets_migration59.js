const
SEARCHBAR_WIDGET_ID
=
"
search
-
container
"
;
const
PREF_NAME
=
"
browser
.
urlbar
.
matchBuckets
"
;
const
SEARCHBAR_PRESENT_PREF_VALUE
=
"
general
:
5
suggestion
:
Infinity
"
;
add_task
(
async
function
test
(
)
{
Assert
.
equal
(
CustomizableUI
.
getPlacementOfWidget
(
SEARCHBAR_WIDGET_ID
)
null
"
Searchbar
should
not
be
placed
initially
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
PREF_NAME
"
"
)
"
"
"
Pref
should
be
cleared
initially
"
)
;
let
widgetPromise
=
promiseWidget
(
"
onWidgetAdded
"
)
;
CustomizableUI
.
addWidgetToArea
(
SEARCHBAR_WIDGET_ID
CustomizableUI
.
AREA_NAVBAR
)
;
info
(
"
Waiting
for
searchbar
to
be
added
"
)
;
await
widgetPromise
;
messageBrowserGlue
(
"
force
-
ui
-
migration
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
PREF_NAME
"
"
)
"
"
"
Pref
should
remain
cleared
even
though
searchbar
present
"
)
;
forceBrowserGlueUpdatePref
(
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
PREF_NAME
"
"
)
SEARCHBAR_PRESENT_PREF_VALUE
"
Pref
should
be
set
to
show
history
first
"
)
;
let
customValue
=
"
test
:
Infinity
"
;
Services
.
prefs
.
setCharPref
(
PREF_NAME
customValue
)
;
forceBrowserGlueUpdatePref
(
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
PREF_NAME
"
"
)
customValue
"
Pref
should
remain
the
custom
value
"
)
;
widgetPromise
=
promiseWidget
(
"
onWidgetRemoved
"
)
;
CustomizableUI
.
removeWidgetFromArea
(
SEARCHBAR_WIDGET_ID
)
;
info
(
"
Waiting
for
searchbar
to
be
removed
"
)
;
await
widgetPromise
;
forceBrowserGlueUpdatePref
(
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
PREF_NAME
"
"
)
customValue
"
Pref
should
remain
the
custom
value
"
)
;
Services
.
prefs
.
clearUserPref
(
PREF_NAME
)
;
forceBrowserGlueUpdatePref
(
)
;
Assert
.
equal
(
Services
.
prefs
.
getCharPref
(
PREF_NAME
"
"
)
"
"
"
Pref
should
remain
cleared
"
)
;
}
)
;
function
promiseWidget
(
observerName
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
}
;
listener
[
observerName
]
=
widgetID
=
>
{
if
(
widgetID
=
=
SEARCHBAR_WIDGET_ID
)
{
CustomizableUI
.
removeListener
(
listener
)
;
executeSoon
(
resolve
)
;
}
}
;
CustomizableUI
.
addListener
(
listener
)
;
}
)
;
}
function
messageBrowserGlue
(
msgName
)
{
Cc
[
"
mozilla
.
org
/
browser
/
browserglue
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
.
observe
(
null
"
browser
-
glue
-
test
"
msgName
)
;
}
function
forceBrowserGlueUpdatePref
(
)
{
messageBrowserGlue
(
"
migrateMatchBucketsPrefForUIVersion60
"
)
;
}
