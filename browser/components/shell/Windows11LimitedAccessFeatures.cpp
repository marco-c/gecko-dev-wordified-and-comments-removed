#
include
"
Windows11LimitedAccessFeatures
.
h
"
#
ifndef
__MINGW32__
#
include
"
nsString
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
<
wrl
.
h
>
#
include
<
inspectable
.
h
>
#
include
<
roapi
.
h
>
#
include
<
windows
.
services
.
store
.
h
>
#
include
<
windows
.
foundation
.
h
>
using
namespace
Microsoft
:
:
WRL
;
using
namespace
Microsoft
:
:
WRL
:
:
Wrappers
;
using
namespace
ABI
:
:
Windows
;
using
namespace
ABI
:
:
Windows
:
:
Foundation
;
using
namespace
ABI
:
:
Windows
:
:
ApplicationModel
;
struct
LimitedAccessFeatureInfo
{
const
WCHAR
*
feature
;
const
WCHAR
*
token
;
const
WCHAR
*
attestation
;
}
;
static
LimitedAccessFeatureInfo
limitedAccessFeatureInfo
[
]
=
{
{
MOZ_WINDOWS_TASKBAR_PINNING_API_FEATURE
MOZ_WINDOWS_TASKBAR_PINNING_API_KEY
MOZ_WINDOWS_TASKBAR_PINNING_API_ATTRIBUTION
}
}
;
class
Win11LimitedAccessFeatures
:
public
Win11LimitedAccessFeaturesInterface
{
public
:
using
AtomicState
=
mozilla
:
:
Atomic
<
int
mozilla
:
:
SequentiallyConsistent
>
;
mozilla
:
:
Result
<
bool
HRESULT
>
Unlock
(
Win11LimitedAccessFeatureType
feature
)
override
;
private
:
AtomicState
&
GetState
(
Win11LimitedAccessFeatureType
feature
)
;
mozilla
:
:
Result
<
bool
HRESULT
>
UnlockImplementation
(
Win11LimitedAccessFeatureType
feature
)
;
static
AtomicState
mTaskbarState
;
static
AtomicState
mDefaultState
;
enum
State
{
Uninitialized
Locked
Unlocked
}
;
}
;
Win11LimitedAccessFeatures
:
:
AtomicState
Win11LimitedAccessFeatures
:
:
mTaskbarState
(
Win11LimitedAccessFeatures
:
:
Uninitialized
)
;
Win11LimitedAccessFeatures
:
:
AtomicState
Win11LimitedAccessFeatures
:
:
mDefaultState
(
Win11LimitedAccessFeatures
:
:
Uninitialized
)
;
RefPtr
<
Win11LimitedAccessFeaturesInterface
>
CreateWin11LimitedAccessFeaturesInterface
(
)
{
RefPtr
<
Win11LimitedAccessFeaturesInterface
>
result
(
new
Win11LimitedAccessFeatures
(
)
)
;
return
result
;
}
mozilla
:
:
Result
<
bool
HRESULT
>
Win11LimitedAccessFeatures
:
:
Unlock
(
Win11LimitedAccessFeatureType
feature
)
{
AtomicState
&
atomicState
=
GetState
(
feature
)
;
int
state
=
atomicState
;
if
(
state
!
=
Uninitialized
)
{
return
(
state
=
=
Unlocked
)
;
}
auto
result
=
UnlockImplementation
(
feature
)
;
int
newState
=
Locked
;
if
(
!
result
.
isErr
(
)
&
&
result
.
unwrap
(
)
)
{
newState
=
Unlocked
;
}
atomicState
=
newState
;
return
result
;
}
Win11LimitedAccessFeatures
:
:
AtomicState
&
Win11LimitedAccessFeatures
:
:
GetState
(
Win11LimitedAccessFeatureType
feature
)
{
switch
(
feature
)
{
case
Win11LimitedAccessFeatureType
:
:
Taskbar
:
return
mTaskbarState
;
default
:
MOZ_ASSERT
(
false
"
Unhandled
feature
type
!
Add
a
new
atomic
state
variable
add
"
"
that
entry
to
the
switch
statement
above
and
add
the
proper
"
"
entries
for
the
feature
and
the
token
.
"
)
;
return
mDefaultState
;
}
}
mozilla
:
:
Result
<
bool
HRESULT
>
Win11LimitedAccessFeatures
:
:
UnlockImplementation
(
Win11LimitedAccessFeatureType
feature
)
{
ComPtr
<
ILimitedAccessFeaturesStatics
>
limitedAccessFeatures
;
ComPtr
<
ILimitedAccessFeatureRequestResult
>
limitedAccessFeaturesResult
;
HRESULT
hr
=
RoGetActivationFactory
(
HStringReference
(
RuntimeClass_Windows_ApplicationModel_LimitedAccessFeatures
)
.
Get
(
)
IID_ILimitedAccessFeaturesStatics
&
limitedAccessFeatures
)
;
if
(
!
SUCCEEDED
(
hr
)
)
{
return
mozilla
:
:
Err
(
hr
)
;
}
const
auto
&
lafInfo
=
limitedAccessFeatureInfo
[
static_cast
<
int
>
(
feature
)
]
;
hr
=
limitedAccessFeatures
-
>
TryUnlockFeature
(
HStringReference
(
lafInfo
.
feature
)
.
Get
(
)
HStringReference
(
lafInfo
.
token
)
.
Get
(
)
HStringReference
(
lafInfo
.
attestation
)
.
Get
(
)
&
limitedAccessFeaturesResult
)
;
if
(
!
SUCCEEDED
(
hr
)
)
{
return
mozilla
:
:
Err
(
hr
)
;
}
LimitedAccessFeatureStatus
status
;
hr
=
limitedAccessFeaturesResult
-
>
get_Status
(
&
status
)
;
if
(
!
SUCCEEDED
(
hr
)
)
{
return
mozilla
:
:
Err
(
hr
)
;
}
int
state
=
Unlocked
;
if
(
(
status
!
=
LimitedAccessFeatureStatus_Available
)
&
&
(
status
!
=
LimitedAccessFeatureStatus_AvailableWithoutToken
)
)
{
state
=
Locked
;
}
return
(
state
=
=
Unlocked
)
;
}
#
else
RefPtr
<
Win11LimitedAccessFeaturesInterface
>
CreateWin11LimitedAccessFeaturesInterface
(
)
{
RefPtr
<
Win11LimitedAccessFeaturesInterface
>
result
;
return
result
;
}
#
endif
