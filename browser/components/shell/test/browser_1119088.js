const
NS_OSX_PICTURE_DOCUMENTS_DIR
=
"
Pct
"
;
let
kPythonPath
=
"
/
usr
/
bin
/
python
"
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
macosx
"
23
.
0
)
)
{
kPythonPath
=
"
/
usr
/
local
/
bin
/
python3
"
;
}
const
kDesktopCheckerScriptPath
=
"
browser
/
browser
/
components
/
shell
/
test
/
mac_desktop_image
.
py
"
;
const
kDefaultBackgroundImage_10_14
=
"
/
Library
/
Desktop
Pictures
/
Solid
Colors
/
Teal
.
png
"
;
const
kDefaultBackgroundImage_10_15
=
"
/
System
/
Library
/
Desktop
Pictures
/
Solid
Colors
/
Teal
.
png
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
sys
.
mjs
"
}
)
;
function
getPythonExecutableFile
(
)
{
let
python
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
info
(
Using
python
at
location
{
kPythonPath
}
)
;
python
.
initWithPath
(
kPythonPath
)
;
return
python
;
}
function
createProcess
(
)
{
return
Cc
[
"
mozilla
.
org
/
process
/
util
;
1
"
]
.
createInstance
(
Ci
.
nsIProcess
)
;
}
function
setDesktopBackgroundCLI
(
imagePath
)
{
let
setBackgroundProcess
=
createProcess
(
)
;
setBackgroundProcess
.
init
(
getPythonExecutableFile
(
)
)
;
let
args
=
[
kDesktopCheckerScriptPath
"
-
-
verbose
"
"
-
-
set
-
background
-
image
"
imagePath
]
;
setBackgroundProcess
.
run
(
true
args
args
.
length
)
;
return
setBackgroundProcess
.
exitValue
;
}
function
checkDesktopBackgroundCLI
(
imagePath
)
{
let
checkBackgroundProcess
=
createProcess
(
)
;
checkBackgroundProcess
.
init
(
getPythonExecutableFile
(
)
)
;
let
args
=
[
kDesktopCheckerScriptPath
"
-
-
verbose
"
"
-
-
check
-
background
-
image
"
imagePath
]
;
checkBackgroundProcess
.
run
(
true
args
args
.
length
)
;
return
checkBackgroundProcess
.
exitValue
;
}
function
setAndCheckDesktopBackgroundCLI
(
imagePath
)
{
Assert
.
ok
(
FileUtils
.
File
(
imagePath
)
.
exists
(
)
{
imagePath
}
exists
)
;
let
setExitCode
=
setDesktopBackgroundCLI
(
imagePath
)
;
Assert
.
ok
(
setExitCode
=
=
0
Setting
background
via
CLI
to
{
imagePath
}
)
;
let
checkExitCode
=
checkDesktopBackgroundCLI
(
imagePath
)
;
Assert
.
ok
(
checkExitCode
=
=
0
Checking
background
via
CLI
is
{
imagePath
}
)
;
}
function
restoreDefaultBackground
(
)
{
let
defaultBackgroundPath
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
macosx
"
19
)
)
{
defaultBackgroundPath
=
kDefaultBackgroundImage_10_15
;
}
else
{
defaultBackgroundPath
=
kDefaultBackgroundImage_10_14
;
}
setAndCheckDesktopBackgroundCLI
(
defaultBackgroundPath
)
;
}
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
logo
"
}
async
(
)
=
>
{
let
dirSvc
=
Cc
[
"
mozilla
.
org
/
file
/
directory_service
;
1
"
]
.
getService
(
Ci
.
nsIDirectoryServiceProvider
)
;
let
uuidGenerator
=
Services
.
uuid
;
let
shellSvc
=
Cc
[
"
mozilla
.
org
/
browser
/
shell
-
service
;
1
"
]
.
getService
(
Ci
.
nsIShellService
)
;
restoreDefaultBackground
(
)
;
let
uuid
=
uuidGenerator
.
generateUUID
(
)
.
toString
(
)
.
replace
(
/
\
W
/
g
"
"
)
;
let
backgroundImage
=
dirSvc
.
getFile
(
NS_OSX_PICTURE_DOCUMENTS_DIR
{
}
)
;
backgroundImage
.
append
(
uuid
+
"
.
png
"
)
;
if
(
backgroundImage
.
exists
(
)
)
{
backgroundImage
.
remove
(
false
)
;
}
Assert
.
ok
(
!
gBrowser
.
selectedBrowser
.
isRemoteBrowser
"
image
can
be
accessed
synchronously
from
the
parent
process
"
)
;
let
image
=
gBrowser
.
selectedBrowser
.
contentDocument
.
images
[
0
]
;
info
(
Setting
/
saving
desktop
background
to
{
backgroundImage
.
path
}
)
;
shellSvc
.
setDesktopBackground
(
image
0
backgroundImage
.
leafName
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
backgroundImage
.
exists
(
)
)
;
info
(
{
backgroundImage
.
path
}
downloaded
)
;
Assert
.
ok
(
FileUtils
.
File
(
backgroundImage
.
path
)
.
exists
(
)
{
backgroundImage
.
path
}
exists
)
;
let
exitCode
=
checkDesktopBackgroundCLI
(
backgroundImage
.
path
)
;
Assert
.
ok
(
exitCode
=
=
0
background
should
be
{
backgroundImage
.
path
}
)
;
restoreDefaultBackground
(
)
;
backgroundImage
.
remove
(
false
)
;
}
)
;
}
)
;
