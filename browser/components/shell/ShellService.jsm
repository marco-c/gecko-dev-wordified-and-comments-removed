"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ShellService
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
let
ShellServiceInternal
=
{
get
canSetDesktopBackground
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
|
|
AppConstants
.
platform
=
=
"
macosx
"
)
{
return
true
;
}
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
if
(
this
.
shellService
)
{
let
linuxShellService
=
this
.
shellService
.
QueryInterface
(
Ci
.
nsIGNOMEShellService
)
;
return
linuxShellService
.
canSetDesktopBackground
;
}
}
return
false
;
}
_checkedThisSession
:
false
get
shouldCheckDefaultBrowser
(
)
{
if
(
this
.
_checkedThisSession
)
{
return
false
;
}
return
Services
.
prefs
.
getBoolPref
(
"
browser
.
shell
.
checkDefaultBrowser
"
)
;
}
set
shouldCheckDefaultBrowser
(
shouldCheck
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
shell
.
checkDefaultBrowser
"
!
!
shouldCheck
)
;
}
isDefaultBrowser
(
startupCheck
forAllTypes
)
{
if
(
startupCheck
)
{
this
.
_checkedThisSession
=
true
;
}
if
(
this
.
shellService
)
{
return
this
.
shellService
.
isDefaultBrowser
(
startupCheck
forAllTypes
)
;
}
}
}
;
XPCOMUtils
.
defineLazyServiceGetter
(
ShellServiceInternal
"
shellService
"
"
mozilla
.
org
/
browser
/
shell
-
service
;
1
"
Ci
.
nsIShellService
)
;
this
.
ShellService
=
new
Proxy
(
ShellServiceInternal
{
get
(
target
name
)
{
return
name
in
target
?
target
[
name
]
:
target
.
shellService
[
name
]
;
}
}
)
;
