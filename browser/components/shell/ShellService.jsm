"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ShellService
"
]
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
Subprocess
:
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
jsm
"
WindowsRegistry
:
"
resource
:
/
/
gre
/
modules
/
WindowsRegistry
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
XreDirProvider
"
"
mozilla
.
org
/
xre
/
directory
-
provider
;
1
"
"
nsIXREDirProvider
"
)
;
let
ShellServiceInternal
=
{
get
canSetDesktopBackground
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
|
|
AppConstants
.
platform
=
=
"
macosx
"
)
{
return
true
;
}
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
if
(
this
.
shellService
)
{
let
linuxShellService
=
this
.
shellService
.
QueryInterface
(
Ci
.
nsIGNOMEShellService
)
;
return
linuxShellService
.
canSetDesktopBackground
;
}
}
return
false
;
}
isDefaultBrowserOptOut
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
let
optOutValue
=
WindowsRegistry
.
readRegKey
(
Ci
.
nsIWindowsRegKey
.
ROOT_KEY_CURRENT_USER
"
Software
\
\
Mozilla
\
\
Firefox
"
"
DefaultBrowserOptOut
"
)
;
WindowsRegistry
.
removeRegKey
(
Ci
.
nsIWindowsRegKey
.
ROOT_KEY_CURRENT_USER
"
Software
\
\
Mozilla
\
\
Firefox
"
"
DefaultBrowserOptOut
"
)
;
if
(
optOutValue
=
=
"
True
"
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
shell
.
checkDefaultBrowser
"
false
)
;
return
true
;
}
}
return
false
;
}
_checkedThisSession
:
false
get
shouldCheckDefaultBrowser
(
)
{
if
(
this
.
_checkedThisSession
)
{
return
false
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
shell
.
checkDefaultBrowser
"
)
)
{
return
false
;
}
if
(
this
.
isDefaultBrowserOptOut
(
)
)
{
return
false
;
}
return
true
;
}
set
shouldCheckDefaultBrowser
(
shouldCheck
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
shell
.
checkDefaultBrowser
"
!
!
shouldCheck
)
;
}
isDefaultBrowser
(
startupCheck
forAllTypes
)
{
if
(
startupCheck
)
{
this
.
_checkedThisSession
=
true
;
}
if
(
this
.
shellService
)
{
return
this
.
shellService
.
isDefaultBrowser
(
forAllTypes
)
;
}
return
false
;
}
_callExternalDefaultBrowserAgent
(
options
=
{
}
)
{
const
wdba
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
;
wdba
.
leafName
=
"
default
-
browser
-
agent
.
exe
"
;
return
Subprocess
.
call
(
{
.
.
.
options
command
:
options
.
command
|
|
wdba
.
path
}
)
;
}
_userChoiceImpossibleTelemetryResult
(
)
{
if
(
!
ShellService
.
checkAllProgIDsExist
(
)
)
{
return
"
ErrProgID
"
;
}
if
(
!
ShellService
.
checkBrowserUserChoiceHashes
(
)
)
{
return
"
ErrHash
"
;
}
return
null
;
}
async
setAsDefaultUserChoice
(
)
{
if
(
AppConstants
.
platform
!
=
"
win
"
)
{
throw
new
Error
(
"
Windows
-
only
"
)
;
}
let
telemetryResult
=
"
ErrOther
"
;
try
{
telemetryResult
=
this
.
_userChoiceImpossibleTelemetryResult
(
)
?
?
"
ErrOther
"
;
if
(
telemetryResult
=
=
"
ErrProgID
"
)
{
throw
new
Error
(
"
checkAllProgIDsExist
(
)
failed
"
)
;
}
if
(
telemetryResult
=
=
"
ErrHash
"
)
{
throw
new
Error
(
"
checkBrowserUserChoiceHashes
(
)
failed
"
)
;
}
const
aumi
=
XreDirProvider
.
getInstallHash
(
)
;
telemetryResult
=
"
ErrLaunchExe
"
;
const
exeArgs
=
[
"
set
-
default
-
browser
-
user
-
choice
"
aumi
]
;
if
(
NimbusFeatures
.
shellService
.
getVariable
(
"
setDefaultPDFHandler
"
)
)
{
exeArgs
.
push
(
"
.
pdf
"
)
;
}
const
exeProcess
=
await
this
.
_callExternalDefaultBrowserAgent
(
{
arguments
:
exeArgs
}
)
;
telemetryResult
=
"
ErrOther
"
;
const
S_OK
=
0
;
const
STILL_ACTIVE
=
0x103
;
const
MOZ_E_NO_PROGID
=
0xa0000001
;
const
MOZ_E_HASH_CHECK
=
0xa0000002
;
const
MOZ_E_REJECTED
=
0xa0000003
;
const
MOZ_E_BUILD
=
0xa0000004
;
const
exeWaitTimeoutMs
=
2000
;
const
exeWaitPromise
=
exeProcess
.
wait
(
)
;
const
timeoutPromise
=
new
Promise
(
function
(
resolve
reject
)
{
setTimeout
(
(
)
=
>
resolve
(
{
exitCode
:
STILL_ACTIVE
}
)
exeWaitTimeoutMs
)
;
}
)
;
const
{
exitCode
}
=
await
Promise
.
race
(
[
exeWaitPromise
timeoutPromise
]
)
;
if
(
exitCode
!
=
S_OK
)
{
telemetryResult
=
new
Map
(
[
[
STILL_ACTIVE
"
ErrExeTimeout
"
]
[
MOZ_E_NO_PROGID
"
ErrExeProgID
"
]
[
MOZ_E_HASH_CHECK
"
ErrExeHash
"
]
[
MOZ_E_REJECTED
"
ErrExeRejected
"
]
[
MOZ_E_BUILD
"
ErrBuild
"
]
]
)
.
get
(
exitCode
)
?
?
"
ErrExeOther
"
;
throw
new
Error
(
WDBA
nonzero
exit
code
{
exitCode
}
:
{
telemetryResult
}
)
;
}
telemetryResult
=
"
Success
"
;
}
finally
{
try
{
const
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_SET_DEFAULT_USER_CHOICE_RESULT
"
)
;
histogram
.
add
(
telemetryResult
)
;
}
catch
(
ex
)
{
}
}
}
setDefaultBrowser
(
claimAllTypes
forAllUsers
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
&
&
NimbusFeatures
.
shellService
.
getVariable
(
"
setDefaultBrowserUserChoice
"
)
)
{
this
.
setAsDefaultUserChoice
(
)
.
catch
(
err
=
>
{
Cu
.
reportError
(
err
)
;
this
.
shellService
.
setDefaultBrowser
(
claimAllTypes
forAllUsers
)
;
}
)
;
return
;
}
this
.
shellService
.
setDefaultBrowser
(
claimAllTypes
forAllUsers
)
;
}
setAsDefault
(
)
{
let
claimAllTypes
=
true
;
let
setAsDefaultError
=
false
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
try
{
let
version
=
Services
.
sysinfo
.
getProperty
(
"
version
"
)
;
claimAllTypes
=
parseFloat
(
version
)
<
6
.
2
;
}
catch
(
ex
)
{
}
}
try
{
ShellService
.
setDefaultBrowser
(
claimAllTypes
false
)
;
}
catch
(
ex
)
{
setAsDefaultError
=
true
;
Cu
.
reportError
(
ex
)
;
}
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_IS_USER_DEFAULT
"
)
.
add
(
!
setAsDefaultError
)
;
Services
.
telemetry
.
getHistogramById
(
"
BROWSER_SET_DEFAULT_ERROR
"
)
.
add
(
setAsDefaultError
)
;
}
async
doesAppNeedPin
(
)
{
if
(
Services
.
appinfo
.
processType
!
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
throw
new
Components
.
Exception
(
"
Can
'
t
determine
pinned
from
child
process
"
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
}
if
(
NimbusFeatures
.
shellService
.
getVariable
(
"
disablePin
"
)
)
{
return
false
;
}
try
{
this
.
shellService
.
QueryInterface
(
Ci
.
nsIWindowsShellService
)
.
checkPinCurrentAppToTaskbar
(
)
;
return
!
(
await
this
.
shellService
.
isCurrentAppPinnedToTaskbarAsync
(
)
)
;
}
catch
(
ex
)
{
}
try
{
return
!
this
.
macDockSupport
.
isAppInDock
;
}
catch
(
ex
)
{
}
return
false
;
}
async
pinToTaskbar
(
)
{
if
(
await
this
.
doesAppNeedPin
(
)
)
{
try
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
this
.
shellService
.
pinCurrentAppToTaskbar
(
)
;
}
else
{
this
.
macDockSupport
.
ensureAppIsPinnedToDock
(
)
;
}
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
}
;
XPCOMUtils
.
defineLazyServiceGetters
(
ShellServiceInternal
{
shellService
:
[
"
mozilla
.
org
/
browser
/
shell
-
service
;
1
"
"
nsIShellService
"
]
macDockSupport
:
[
"
mozilla
.
org
/
widget
/
macdocksupport
;
1
"
"
nsIMacDockSupport
"
]
}
)
;
var
ShellService
=
new
Proxy
(
ShellServiceInternal
{
get
(
target
name
)
{
if
(
name
in
target
)
{
return
target
[
name
]
;
}
if
(
target
.
shellService
)
{
return
target
.
shellService
[
name
]
;
}
Services
.
console
.
logStringMessage
(
{
name
}
not
found
in
ShellService
:
{
target
.
shellService
}
)
;
return
undefined
;
}
}
)
;
