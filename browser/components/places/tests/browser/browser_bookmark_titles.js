var
tests
=
[
{
url
:
"
http
:
/
/
example
.
com
/
browser
/
browser
/
components
/
places
/
tests
/
browser
/
dummy_page
.
html
"
title
:
"
Dummy
test
page
"
isError
:
false
}
{
url
:
"
data
:
text
/
html
;
charset
=
utf
-
8
<
title
>
test
%
20data
:
%
20url
<
/
title
>
"
title
:
"
test
data
:
url
"
isError
:
false
}
{
url
:
"
data
:
application
/
xhtml
+
xml
"
title
:
"
data
:
application
/
xhtml
+
xml
"
isError
:
true
}
{
url
:
"
https
:
/
/
untrusted
.
example
.
com
/
somepage
.
html
"
title
:
"
https
:
/
/
untrusted
.
example
.
com
/
somepage
.
html
"
isError
:
true
}
]
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
bookmarks
.
editDialog
.
showForNewBookmarks
"
false
]
]
}
)
;
add_task
(
async
function
check_default_bookmark_title
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
www
.
example
.
com
/
"
)
;
let
browser
=
tab
.
linkedBrowser
;
for
(
let
{
url
title
isError
}
of
tests
)
{
let
promiseLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
url
isError
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
url
)
;
await
promiseLoaded
;
await
checkBookmark
(
url
title
)
;
}
BrowserOffline
.
toggleOfflineStatus
(
)
;
let
proxy
=
Services
.
prefs
.
getIntPref
(
"
network
.
proxy
.
type
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
0
)
;
registerCleanupFunction
(
function
(
)
{
BrowserOffline
.
toggleOfflineStatus
(
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
proxy
)
;
}
)
;
Services
.
cache2
.
clear
(
)
;
let
{
url
title
}
=
tests
[
0
]
;
let
promiseLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
null
true
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
url
)
;
await
promiseLoaded
;
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
Assert
.
equal
(
content
.
document
.
documentURI
.
substring
(
0
14
)
"
about
:
neterror
"
"
Offline
mode
successfully
simulated
network
outage
.
"
)
;
}
)
;
await
checkBookmark
(
url
title
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
async
function
checkBookmark
(
url
expected_title
)
{
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
url
"
Trying
to
bookmark
the
expected
uri
"
)
;
let
promiseBookmark
=
PlacesTestUtils
.
waitForNotification
(
"
bookmark
-
added
"
events
=
>
events
.
some
(
(
{
url
:
eventUrl
}
)
=
>
eventUrl
=
=
gBrowser
.
selectedBrowser
.
currentURI
.
spec
)
)
;
PlacesCommandHook
.
bookmarkPage
(
)
;
await
promiseBookmark
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
)
;
Assert
.
ok
(
bookmark
"
Found
the
expected
bookmark
"
)
;
Assert
.
equal
(
bookmark
.
title
expected_title
"
Bookmark
got
a
good
default
title
.
"
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
;
}
