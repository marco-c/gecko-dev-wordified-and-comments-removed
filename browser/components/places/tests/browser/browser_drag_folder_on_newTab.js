"
use
strict
"
;
add_task
(
async
function
setup
(
)
{
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
let
wasCollapsed
=
toolbar
.
collapsed
;
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
true
)
;
}
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
registerCleanupFunction
(
async
function
(
)
{
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
false
)
;
}
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
const
TEST_FOLDER_NAME
=
"
Test
folder
"
;
add_task
(
async
function
test_change_location_from_Toolbar
(
)
{
let
newTabButton
=
document
.
getElementById
(
"
new
-
tab
-
button
"
)
;
let
children
=
[
{
title
:
"
first
"
url
:
"
http
:
/
/
www
.
mochi
.
test
/
first
"
}
{
title
:
"
second
"
url
:
"
http
:
/
/
www
.
mochi
.
test
/
second
"
}
{
type
:
PlacesUtils
.
bookmarks
.
TYPE_SEPARATOR
}
{
title
:
"
third
"
url
:
"
http
:
/
/
www
.
mochi
.
test
/
third
"
}
]
;
let
guid
=
PlacesUtils
.
history
.
makeGuid
(
)
;
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
:
[
{
guid
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
title
:
TEST_FOLDER_NAME
children
}
]
}
)
;
let
folder
=
getToolbarNodeForItemGuid
(
guid
)
;
let
loadedPromises
=
children
.
filter
(
item
=
>
"
url
"
in
item
)
.
map
(
item
=
>
BrowserTestUtils
.
waitForNewTab
(
gBrowser
item
.
url
false
true
)
)
;
let
srcX
=
10
srcY
=
10
;
let
stepX
=
0
stepY
=
-
5
;
EventUtils
.
synthesizeMouse
(
folder
srcX
+
stepX
srcY
+
stepY
{
type
:
"
mousemove
"
}
)
;
await
EventUtils
.
synthesizePlainDragAndDrop
(
{
srcElement
:
folder
destElement
:
newTabButton
srcX
srcY
stepX
stepY
}
)
;
let
tabs
=
await
Promise
.
all
(
loadedPromises
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
ok
(
true
)
;
}
)
;
