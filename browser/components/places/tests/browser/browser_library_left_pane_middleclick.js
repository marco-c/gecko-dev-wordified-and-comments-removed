const
URIs
=
[
"
about
:
license
"
"
about
:
mozilla
"
]
;
var
gLibrary
=
null
;
add_task
(
async
function
test_setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
places
.
history
.
enabled
"
false
]
]
}
)
;
gLibrary
=
await
promiseLibrary
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
gLibrary
.
PlacesOrganizer
.
selectLeftPaneQuery
(
"
UnfiledBookmarks
"
)
;
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
promiseLibraryClosed
(
gLibrary
)
;
}
)
;
}
)
;
add_task
(
async
function
test_open_folder_in_tabs
(
)
{
let
children
=
URIs
.
map
(
url
=
>
{
return
{
title
:
"
Title
"
url
}
}
)
;
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
[
{
title
:
"
Folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
}
]
}
)
;
gLibrary
.
PlacesOrganizer
.
selectLeftPaneQuery
(
"
UnfiledBookmarks
"
)
;
Assert
.
notEqual
(
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
null
"
We
correctly
have
selection
in
the
Library
left
pane
"
)
;
var
folderNode
=
gLibrary
.
ContentTree
.
view
.
view
.
nodeForTreeIndex
(
0
)
;
Assert
.
equal
(
folderNode
.
title
"
Folder
"
"
Found
folder
in
the
right
pane
"
)
;
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
.
containerOpen
=
true
;
let
promiseLoaded
=
Promise
.
all
(
URIs
.
map
(
uri
=
>
BrowserTestUtils
.
waitForNewTab
(
gBrowser
uri
false
true
)
)
)
;
let
bookmarkedNode
=
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
.
getChild
(
0
)
;
mouseEventOnCell
(
gLibrary
.
PlacesOrganizer
.
_places
gLibrary
.
PlacesOrganizer
.
_places
.
view
.
treeIndexForNode
(
bookmarkedNode
)
0
{
button
:
1
}
)
;
let
tabs
=
await
promiseLoaded
;
Assert
.
ok
(
true
"
Expected
tabs
were
loaded
"
)
;
await
Promise
.
all
(
tabs
.
map
(
tab
=
>
BrowserTestUtils
.
removeTab
(
tab
)
)
)
;
}
)
;
function
mouseEventOnCell
(
aTree
aRowIndex
aColumnIndex
aEventDetails
)
{
var
selection
=
aTree
.
view
.
selection
;
selection
.
select
(
aRowIndex
)
;
aTree
.
treeBoxObject
.
ensureRowIsVisible
(
aRowIndex
)
;
var
column
=
aTree
.
columns
[
aColumnIndex
]
;
var
rect
=
aTree
.
treeBoxObject
.
getCoordsForCellItem
(
aRowIndex
column
"
text
"
)
;
EventUtils
.
synthesizeMouse
(
aTree
.
body
rect
.
x
rect
.
y
aEventDetails
gLibrary
)
;
}
