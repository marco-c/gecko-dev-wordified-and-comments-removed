"
use
strict
"
;
const
TEST_URL
=
"
about
:
about
"
;
let
bookmarkPanel
;
let
folders
;
let
win
;
add_task
(
async
function
setup
(
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
win
.
gBrowser
opening
:
TEST_URL
waitForStateStop
:
true
}
)
;
let
oldTimeout
=
win
.
StarUI
.
_autoCloseTimeout
;
win
.
StarUI
.
_autoCloseTimeout
=
6000000
;
win
.
StarUI
.
_createPanelIfNeeded
(
)
;
bookmarkPanel
=
win
.
document
.
getElementById
(
"
editBookmarkPanel
"
)
;
bookmarkPanel
.
setAttribute
(
"
animate
"
false
)
;
registerCleanupFunction
(
async
(
)
=
>
{
bookmarkPanel
=
null
;
win
.
StarUI
.
_autoCloseTimeout
=
oldTimeout
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
win
=
null
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
async
function
checkSelection
(
)
{
let
menuList
=
win
.
document
.
getElementById
(
"
editBMPanel_folderMenuList
"
)
;
let
expectedFolder
=
win
.
gBookmarksToolbar2h2020
?
"
BookmarksToolbarFolderTitle
"
:
"
OtherBookmarksFolderTitle
"
;
Assert
.
equal
(
menuList
.
label
PlacesUtils
.
getString
(
expectedFolder
)
Should
have
{
expectedFolder
}
selected
by
default
)
;
Assert
.
equal
(
menuList
.
getAttribute
(
"
selectedGuid
"
)
await
PlacesUIUtils
.
defaultParentGuid
"
Should
have
the
correct
default
guid
selected
"
)
;
let
hiddenPromise
=
promisePopupHidden
(
win
.
document
.
getElementById
(
"
editBookmarkPanel
"
)
)
;
win
.
document
.
getElementById
(
"
editBookmarkPanelRemoveButton
"
)
.
click
(
)
;
await
hiddenPromise
;
}
add_task
(
async
function
test_star_location
(
)
{
await
clickBookmarkStar
(
win
)
;
await
checkSelection
(
)
;
}
)
;
add_task
(
async
function
test_shortcut_location
(
)
{
let
shownPromise
=
promisePopupShown
(
win
.
document
.
getElementById
(
"
editBookmarkPanel
"
)
)
;
win
.
document
.
getElementById
(
"
Browser
:
AddBookmarkAs
"
)
.
doCommand
(
)
;
await
shownPromise
;
await
checkSelection
(
)
;
}
)
;
