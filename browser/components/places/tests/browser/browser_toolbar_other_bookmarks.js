"
use
strict
"
;
const
BOOKMARKS_H2_2020_PREF
=
"
browser
.
toolbars
.
bookmarks
.
2h2020
"
;
const
bookmarksInfo
=
[
{
title
:
"
firefox
"
url
:
"
http
:
/
/
example
.
com
"
}
{
title
:
"
rules
"
url
:
"
http
:
/
/
example
.
com
/
2
"
}
{
title
:
"
yo
"
url
:
"
http
:
/
/
example
.
com
/
2
"
}
]
;
add_task
(
async
function
setup
(
)
{
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
let
wasCollapsed
=
toolbar
.
collapsed
;
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
true
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
false
)
;
}
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
add_task
(
async
function
testShowingOtherBookmarksInToolbar
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
BOOKMARKS_H2_2020_PREF
true
]
]
}
)
;
info
(
"
Check
visibility
of
an
empty
Other
Bookmarks
folder
.
"
)
;
testIsOtherBookmarksCollapsed
(
"
true
"
)
;
info
(
"
Ensure
folder
appears
in
toolbar
when
a
new
bookmark
is
added
.
"
)
;
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
bookmarksInfo
}
)
;
testIsOtherBookmarksCollapsed
(
"
false
"
)
;
info
(
"
Ensure
folder
disappears
from
toolbar
when
no
bookmarks
are
present
.
"
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmarks
)
;
info
(
"
Add
bookmarks
to
the
Bookmarks
Toolbar
folder
.
"
)
;
testIsOtherBookmarksCollapsed
(
"
true
"
)
;
}
)
;
add_task
(
async
function
testOtherBookmarksVisibilityWhenMovingBookmarks
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
BOOKMARKS_H2_2020_PREF
true
]
]
}
)
;
info
(
"
Add
bookmarks
to
Bookmarks
Toolbar
.
"
)
;
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
:
bookmarksInfo
}
)
;
testIsOtherBookmarksCollapsed
(
"
true
"
)
;
info
(
"
Move
toolbar
bookmarks
to
Other
Bookmarks
folder
.
"
)
;
await
PlacesUtils
.
bookmarks
.
moveToFolder
(
bookmarks
.
map
(
b
=
>
b
.
guid
)
PlacesUtils
.
bookmarks
.
unfiledGuid
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
testIsOtherBookmarksCollapsed
(
"
false
"
)
;
info
(
"
Move
bookmarks
from
Other
Bookmarks
back
to
the
toolbar
.
"
)
;
await
PlacesUtils
.
bookmarks
.
moveToFolder
(
bookmarks
.
map
(
b
=
>
b
.
guid
)
PlacesUtils
.
bookmarks
.
toolbarGuid
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
testIsOtherBookmarksCollapsed
(
"
true
"
)
;
}
)
;
add_task
(
async
function
testOtherBookmarksMenuPopup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
BOOKMARKS_H2_2020_PREF
true
]
]
}
)
;
info
(
"
Add
bookmarks
to
Other
Bookmarks
folder
.
"
)
;
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
bookmarksInfo
}
)
;
let
otherBookmarks
=
document
.
getElementById
(
"
OtherBookmarks
"
)
;
await
BrowserTestUtils
.
waitForAttribute
(
"
collapsed
"
otherBookmarks
"
false
"
)
;
info
(
"
Check
the
popup
menu
has
correct
number
of
children
.
"
)
;
await
openMenuPopup
(
)
;
testNumberOfMenuPopupChildren
(
3
)
;
await
closeMenuPopup
(
)
;
info
(
"
Remove
a
bookmark
.
"
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmarks
[
0
]
)
;
await
openMenuPopup
(
)
;
testNumberOfMenuPopupChildren
(
2
)
;
await
closeMenuPopup
(
)
;
}
)
;
async
function
testIsOtherBookmarksCollapsed
(
expected
)
{
info
(
"
Test
whether
or
not
the
'
Other
Bookmarks
'
folder
is
visible
.
"
)
;
let
otherBookmarks
=
document
.
getElementById
(
"
OtherBookmarks
"
)
;
await
BrowserTestUtils
.
waitForAttribute
(
"
collapsed
"
otherBookmarks
expected
)
;
ok
(
true
Other
Bookmarks
folder
collapsed
state
should
be
{
expected
}
.
)
;
}
function
testNumberOfMenuPopupChildren
(
expected
)
{
let
popup
=
document
.
getElementById
(
"
OtherBookmarksPopup
"
)
;
let
items
=
popup
.
querySelectorAll
(
"
menuitem
"
)
;
is
(
items
.
length
expected
Number
of
menu
items
should
be
{
expected
}
.
)
;
}
async
function
openMenuPopup
(
)
{
let
popup
=
document
.
getElementById
(
"
OtherBookmarksPopup
"
)
;
let
target
=
document
.
getElementById
(
"
OtherBookmarks
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
target
{
}
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
popup
"
shown
"
)
;
}
async
function
closeMenuPopup
(
)
{
let
popup
=
document
.
getElementById
(
"
OtherBookmarksPopup
"
)
;
info
(
"
Closing
menu
popup
.
"
)
;
popup
.
hidePopup
(
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
popup
"
hidden
"
)
;
}
