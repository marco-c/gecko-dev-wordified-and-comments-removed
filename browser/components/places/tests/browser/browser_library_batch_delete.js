const
TEST_URL
=
"
http
:
/
/
www
.
batch
.
delete
.
me
/
"
;
var
gLibrary
;
add_task
(
async
function
test_setup
(
)
{
gLibrary
=
await
promiseLibrary
(
)
;
registerCleanupFunction
(
function
(
)
{
PlacesUtils
.
bookmarks
.
removeFolderChildren
(
PlacesUtils
.
unfiledBookmarksFolderId
)
;
gLibrary
.
close
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_create_and_batch_remove_bookmarks
(
)
{
let
testURI
=
makeURI
(
TEST_URL
)
;
PlacesUtils
.
history
.
runInBatchMode
(
{
runBatched
(
aUserData
)
{
let
folder
=
PlacesUtils
.
bookmarks
.
createFolder
(
PlacesUtils
.
unfiledBookmarksFolderId
"
deleteme
"
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
PlacesUtils
.
bookmarks
.
createFolder
(
PlacesUtils
.
unfiledBookmarksFolderId
"
keepme
"
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
)
;
for
(
let
i
=
0
;
i
<
10
;
i
+
+
)
{
PlacesUtils
.
bookmarks
.
insertBookmark
(
folder
testURI
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
bm
"
+
i
)
;
}
}
}
null
)
;
let
PO
=
gLibrary
.
PlacesOrganizer
;
PO
.
selectLeftPaneQuery
(
"
UnfiledBookmarks
"
)
;
Assert
.
notEqual
(
PO
.
_places
.
selectedNode
null
"
Selected
unsorted
bookmarks
"
)
;
let
unsortedNode
=
PlacesUtils
.
asContainer
(
PO
.
_places
.
selectedNode
)
;
unsortedNode
.
containerOpen
=
true
;
Assert
.
equal
(
unsortedNode
.
childCount
2
"
Unsorted
node
has
2
children
"
)
;
let
folderNode
=
unsortedNode
.
getChild
(
0
)
;
Assert
.
equal
(
folderNode
.
title
"
deleteme
"
"
Folder
found
in
unsorted
bookmarks
"
)
;
PO
.
_places
.
selectNode
(
folderNode
)
;
Assert
.
equal
(
PO
.
_places
.
selectedNode
.
title
"
deleteme
"
"
Folder
node
selected
"
)
;
Assert
.
ok
(
PO
.
_places
.
controller
.
isCommandEnabled
(
"
cmd_delete
"
)
"
Delete
command
is
enabled
"
)
;
PO
.
_places
.
controller
.
doCommand
(
"
cmd_delete
"
)
;
Assert
.
ok
(
!
PlacesUtils
.
bookmarks
.
isBookmarked
(
testURI
)
"
Bookmark
has
been
correctly
removed
"
)
;
Assert
.
equal
(
unsortedNode
.
childCount
1
"
Unsorted
node
has
1
child
"
)
;
Assert
.
equal
(
PO
.
_places
.
selectedNode
.
title
"
keepme
"
"
Folder
node
selected
"
)
;
unsortedNode
.
containerOpen
=
false
;
}
)
;
add_task
(
async
function
test_ensure_correct_selection_and_functionality
(
)
{
let
PO
=
gLibrary
.
PlacesOrganizer
;
let
ContentTree
=
gLibrary
.
ContentTree
;
PO
.
selectLeftPaneQuery
(
"
History
"
)
;
PO
.
selectLeftPaneQuery
(
"
UnfiledBookmarks
"
)
;
ContentTree
.
view
.
selectNode
(
ContentTree
.
view
.
result
.
root
.
getChild
(
0
)
)
;
Assert
.
equal
(
ContentTree
.
view
.
selectedNode
.
title
"
keepme
"
"
Found
folder
in
content
pane
"
)
;
PlacesUtils
.
bookmarks
.
insertBookmark
(
PlacesUtils
.
unfiledBookmarksFolderId
makeURI
(
TEST_URL
)
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
"
bm
"
)
;
Assert
.
equal
(
ContentTree
.
view
.
result
.
root
.
childCount
2
"
Right
pane
was
correctly
updated
"
)
;
}
)
;
