add_task
(
async
function
(
)
{
const
PAGE_URI
=
NetUtil
.
newURI
(
"
http
:
/
/
places
.
test
/
"
)
;
const
ICON_URI
=
NetUtil
.
newURI
(
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
places
/
tests
/
browser
/
favicon
-
normal16
.
png
"
)
;
info
(
"
Uncollapse
the
personal
toolbar
if
needed
"
)
;
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
let
wasCollapsed
=
toolbar
.
collapsed
;
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
true
)
;
registerCleanupFunction
(
async
function
(
)
{
await
promiseSetToolbarVisibility
(
toolbar
false
)
;
}
)
;
}
info
(
"
Open
the
bookmarks
sidebar
"
)
;
let
sidebar
=
document
.
getElementById
(
"
sidebar
"
)
;
let
promiseSidebarLoaded
=
new
Promise
(
resolve
=
>
{
sidebar
.
addEventListener
(
"
load
"
resolve
{
capture
:
true
once
:
true
}
)
;
}
)
;
SidebarUI
.
show
(
"
viewBookmarksSidebar
"
)
;
registerCleanupFunction
(
(
)
=
>
{
SidebarUI
.
hide
(
)
;
}
)
;
await
promiseSidebarLoaded
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
url
:
PAGE_URI
title
:
"
test
icon
"
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
}
)
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
3000
)
;
}
)
;
let
toolbarElt
=
getNodeForToolbarItem
(
bm
.
guid
)
;
let
toolbarShot1
=
TestUtils
.
screenshotArea
(
toolbarElt
window
)
;
let
sidebarRect
=
await
getRectForSidebarItem
(
bm
.
guid
)
;
let
sidebarShot1
=
TestUtils
.
screenshotArea
(
sidebarRect
window
)
;
await
new
Promise
(
resolve
=
>
{
PlacesUtils
.
favicons
.
setAndFetchFaviconForPage
(
PAGE_URI
ICON_URI
true
PlacesUtils
.
favicons
.
FAVICON_LOAD_NON_PRIVATE
resolve
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
)
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
3000
)
;
}
)
;
let
toolbarShot2
=
TestUtils
.
screenshotArea
(
toolbarElt
window
)
;
if
(
toolbarShot1
!
=
toolbarShot2
)
{
info
(
"
Before
toolbar
:
"
+
toolbarShot1
)
;
info
(
"
After
toolbar
:
"
+
toolbarShot2
)
;
}
Assert
.
notEqual
(
toolbarShot1
toolbarShot2
"
The
UI
should
have
updated
"
)
;
let
sidebarShot2
=
TestUtils
.
screenshotArea
(
sidebarRect
window
)
;
if
(
sidebarShot1
!
=
sidebarShot2
)
{
info
(
"
Before
sidebar
:
"
+
sidebarShot1
)
;
info
(
"
After
sidebar
:
"
+
sidebarShot2
)
;
}
Assert
.
notEqual
(
sidebarShot1
sidebarShot2
"
The
UI
should
have
updated
"
)
;
}
)
;
function
getNodeForToolbarItem
(
guid
)
{
return
Array
.
from
(
document
.
getElementById
(
"
PlacesToolbarItems
"
)
.
childNodes
)
.
find
(
child
=
>
child
.
_placesNode
&
&
child
.
_placesNode
.
bookmarkGuid
=
=
guid
)
;
}
async
function
getRectForSidebarItem
(
guid
)
{
let
sidebar
=
document
.
getElementById
(
"
sidebar
"
)
;
let
tree
=
sidebar
.
contentDocument
.
getElementById
(
"
bookmarks
-
view
"
)
;
tree
.
selectItems
(
[
guid
]
)
;
let
rect
=
{
}
;
[
rect
.
left
rect
.
top
rect
.
width
rect
.
height
]
=
tree
.
treeBoxObject
.
selectionRegion
.
getRects
(
)
;
rect
.
left
+
=
sidebar
.
getBoundingClientRect
(
)
.
left
;
rect
.
top
+
=
sidebar
.
getBoundingClientRect
(
)
.
top
;
return
rect
;
}
