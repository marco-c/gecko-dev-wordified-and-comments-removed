const
TEST_URL
=
"
http
:
/
/
dummy
.
mozilla
.
org
/
"
;
const
TEST_DOWNLOAD_URL
=
"
http
:
/
/
dummy
.
mozilla
.
org
/
dummy
.
pdf
"
;
var
gLibrary
;
async
function
search
(
aFolderGuid
aSearchStr
)
{
let
doc
=
gLibrary
.
document
;
let
folderTree
=
doc
.
getElementById
(
"
placesList
"
)
;
let
contentTree
=
doc
.
getElementById
(
"
placeContent
"
)
;
if
(
aFolderGuid
)
{
folderTree
.
selectItems
(
[
aFolderGuid
]
)
;
Assert
.
notEqual
(
folderTree
.
selectedNode
null
"
Sanity
check
:
left
pane
tree
should
have
selection
after
selecting
!
"
)
;
if
(
aFolderGuid
!
=
=
PlacesUtils
.
virtualDownloadsGuid
)
{
Assert
.
equal
(
folderTree
.
selectedNode
.
uri
contentTree
.
place
"
Content
tree
'
s
folder
should
be
what
was
selected
in
the
left
pane
"
)
;
}
}
let
searchBox
=
doc
.
getElementById
(
"
searchFilter
"
)
;
searchBox
.
value
=
aSearchStr
;
gLibrary
.
PlacesSearchBox
.
search
(
searchBox
.
value
)
;
let
query
=
{
}
;
PlacesUtils
.
history
.
queryStringToQuery
(
contentTree
.
result
.
root
.
uri
query
{
}
)
;
if
(
aSearchStr
)
{
Assert
.
equal
(
query
.
value
.
searchTerms
aSearchStr
"
Content
tree
'
s
searchTerms
should
be
text
in
search
box
"
)
;
}
else
{
Assert
.
equal
(
query
.
value
.
hasSearchTerms
false
"
Content
tree
'
s
searchTerms
should
not
exist
after
search
reset
"
)
;
}
}
add_task
(
async
function
test
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
Services
.
io
.
newURI
(
TEST_URL
)
visitDate
:
Date
.
now
(
)
*
1000
transition
:
PlacesUtils
.
history
.
TRANSITION_TYPED
}
{
uri
:
Services
.
io
.
newURI
(
TEST_DOWNLOAD_URL
)
visitDate
:
Date
.
now
(
)
*
1000
transition
:
PlacesUtils
.
history
.
TRANSITION_DOWNLOAD
}
]
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
dummy
"
url
:
TEST_URL
}
)
;
PlacesUtils
.
tagging
.
tagURI
(
Services
.
io
.
newURI
(
TEST_URL
)
[
"
dummyTag
"
]
)
;
gLibrary
=
await
promiseLibrary
(
)
;
const
rootsToTest
=
[
PlacesUtils
.
virtualAllBookmarksGuid
PlacesUtils
.
virtualHistoryGuid
PlacesUtils
.
virtualDownloadsGuid
]
;
for
(
let
root
of
rootsToTest
)
{
await
search
(
root
"
dummy
"
)
;
}
await
promiseLibraryClosed
(
gLibrary
)
;
PlacesUtils
.
tagging
.
untagURI
(
Services
.
io
.
newURI
(
TEST_URL
)
[
"
dummyTag
"
]
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
