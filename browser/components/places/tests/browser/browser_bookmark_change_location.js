"
use
strict
"
;
const
TEST_URL
=
"
about
:
buildconfig
"
;
const
TEST_URL2
=
"
about
:
config
"
;
const
TEST_URL3
=
"
about
:
credits
"
;
add_task
(
async
function
setup
(
)
{
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
let
wasCollapsed
=
toolbar
.
collapsed
;
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
true
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
false
)
;
}
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_change_location_from_Toolbar
(
)
{
let
toolbarBookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
"
url
:
TEST_URL
}
)
;
let
toolbarNode
=
getToolbarNodeForItemGuid
(
toolbarBookmark
.
guid
)
;
await
withBookmarksDialog
(
false
async
function
openPropertiesDialog
(
)
{
let
placesContext
=
document
.
getElementById
(
"
placesContext
"
)
;
let
promisePopup
=
BrowserTestUtils
.
waitForEvent
(
placesContext
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
toolbarNode
{
button
:
2
type
:
"
contextmenu
"
}
)
;
await
promisePopup
;
let
properties
=
document
.
getElementById
(
"
placesContext_show_bookmark
:
info
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
properties
{
}
)
;
}
async
function
test
(
dialogWin
)
{
let
locationPicker
=
dialogWin
.
document
.
getElementById
(
"
editBMPanel_locationField
"
)
;
Assert
.
equal
(
locationPicker
.
value
TEST_URL
"
The
location
is
the
expected
one
.
"
)
;
let
promiseLocationChange
=
PlacesTestUtils
.
waitForNotification
(
"
onItemChanged
"
(
id
parentId
index
itemUrl
)
=
>
itemUrl
=
=
=
TEST_URL2
)
;
fillBookmarkTextField
(
"
editBMPanel_locationField
"
TEST_URL2
dialogWin
false
)
;
await
waitForCondition
(
(
)
=
>
locationPicker
.
value
=
=
=
TEST_URL2
"
The
location
is
correct
after
update
.
"
)
;
locationPicker
.
blur
(
)
;
await
promiseLocationChange
;
Assert
.
equal
(
dialogWin
.
gEditItemOverlay
.
uri
.
spec
TEST_URL2
"
The
location
is
the
expected
one
.
"
)
;
locationPicker
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
dialogWin
)
;
let
updatedBm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
toolbarBookmark
.
guid
)
;
Assert
.
equal
(
updatedBm
.
url
TEST_URL2
"
Should
have
updated
the
bookmark
location
in
the
database
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_change_location_from_Sidebar
(
)
{
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
:
TEST_URL2
}
)
;
await
withSidebarTree
(
"
bookmarks
"
async
function
(
tree
)
{
tree
.
selectItems
(
[
bm
.
guid
]
)
;
await
withBookmarksDialog
(
false
function
openPropertiesDialog
(
)
{
tree
.
controller
.
doCommand
(
"
placesCmd_show
:
info
"
)
;
}
async
function
test
(
dialogWin
)
{
let
locationPicker
=
dialogWin
.
document
.
getElementById
(
"
editBMPanel_locationField
"
)
;
Assert
.
equal
(
locationPicker
.
value
TEST_URL2
"
The
location
is
the
expected
one
.
"
)
;
let
promiseLocationChange
=
PlacesTestUtils
.
waitForNotification
(
"
onItemChanged
"
(
id
parentId
index
itemUrl
)
=
>
itemUrl
=
=
=
TEST_URL3
)
;
fillBookmarkTextField
(
"
editBMPanel_locationField
"
TEST_URL3
dialogWin
false
)
;
await
waitForCondition
(
(
)
=
>
locationPicker
.
value
=
=
=
TEST_URL3
"
The
location
is
correct
after
update
.
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
dialogWin
)
;
await
promiseLocationChange
;
let
updatedBm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
bm
.
guid
)
;
Assert
.
equal
(
updatedBm
.
url
TEST_URL3
"
Should
have
updated
the
bookmark
location
in
the
database
.
"
)
;
}
)
;
}
)
;
}
)
;
