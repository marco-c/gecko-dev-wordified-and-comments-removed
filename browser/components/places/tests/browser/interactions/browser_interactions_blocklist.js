const
ALLOWED_TEST_URL
=
"
https
:
/
/
example
.
com
/
"
;
const
BLOCKED_TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
InteractionsBlocklist
:
"
resource
:
/
/
/
modules
/
InteractionsBlocklist
.
jsm
"
}
)
;
add_task
(
async
function
setup
(
)
{
let
oldBlocklistValue
=
Services
.
prefs
.
getStringPref
(
"
places
.
interactions
.
customBlocklist
"
"
[
]
"
)
;
Services
.
prefs
.
setStringPref
(
"
places
.
interactions
.
customBlocklist
"
"
[
]
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
setStringPref
(
"
places
.
interactions
.
customBlocklist
"
oldBlocklistValue
)
;
}
)
;
}
)
;
async
function
loadBlockedUrl
(
expectRecording
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
ALLOWED_TEST_URL
async
browser
=
>
{
Interactions
.
_pageViewStartTime
=
Cu
.
now
(
)
-
10000
;
BrowserTestUtils
.
loadURI
(
browser
BLOCKED_TEST_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
BLOCKED_TEST_URL
)
;
await
assertDatabaseValues
(
[
{
url
:
ALLOWED_TEST_URL
totalViewTime
:
10000
}
]
)
;
Interactions
.
_pageViewStartTime
=
Cu
.
now
(
)
-
20000
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
if
(
expectRecording
)
{
await
assertDatabaseValues
(
[
{
url
:
ALLOWED_TEST_URL
totalViewTime
:
10000
}
{
url
:
BLOCKED_TEST_URL
totalViewTime
:
20000
}
]
)
;
}
else
{
await
assertDatabaseValues
(
[
{
url
:
ALLOWED_TEST_URL
totalViewTime
:
10000
}
]
)
;
}
}
)
;
}
add_task
(
async
function
test
(
)
{
info
(
"
Record
BLOCKED_TEST_URL
because
it
is
not
yet
blocklisted
.
"
)
;
await
loadBlockedUrl
(
true
)
;
info
(
"
Add
BLOCKED_TEST_URL
to
the
blocklist
and
verify
it
is
not
recorded
.
"
)
;
let
blockedRegex
=
/
^
(
https
?
:
\
/
\
/
)
?
example
\
.
com
\
/
browser
/
i
;
InteractionsBlocklist
.
addRegexToBlocklist
(
blockedRegex
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
"
places
.
interactions
.
customBlocklist
"
"
[
]
"
)
JSON
.
stringify
(
[
blockedRegex
.
toString
(
)
]
)
)
;
await
loadBlockedUrl
(
false
)
;
info
(
"
Remove
BLOCKED_TEST_URL
from
the
blocklist
and
verify
it
is
recorded
.
"
)
;
InteractionsBlocklist
.
removeRegexFromBlocklist
(
blockedRegex
)
;
Assert
.
equal
(
Services
.
prefs
.
getStringPref
(
"
places
.
interactions
.
customBlocklist
"
"
[
]
"
)
JSON
.
stringify
(
[
]
)
)
;
await
loadBlockedUrl
(
true
)
;
}
)
;
