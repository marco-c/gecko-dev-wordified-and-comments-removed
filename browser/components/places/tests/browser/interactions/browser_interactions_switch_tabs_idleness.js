const
TEST_URL
=
"
https
:
/
/
example
.
com
/
"
;
const
TEST_URL2
=
"
https
:
/
/
example
.
com
/
browser
"
;
add_task
(
async
function
test_interactions_switch_tabs
(
)
{
await
Interactions
.
reset
(
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
TEST_URL
}
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_URL2
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
false
TEST_URL2
)
;
info
(
"
Switch
to
second
tab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
]
)
;
info
(
"
Switch
to
first
tab
again
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
]
)
;
info
(
"
Switch
to
second
tab
again
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
]
)
;
}
)
;
add_task
(
async
function
test_interactions_switch_tabs_delayed
(
)
{
await
Interactions
.
reset
(
)
;
info
(
"
Reduce
delay
threshold
so
any
tab
switch
results
in
a
new
interaction
.
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
places
.
interactions
.
breakupIfNoUpdatesForSeconds
"
0
]
]
}
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
TEST_URL
}
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_URL2
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
false
TEST_URL2
)
;
info
(
"
Switch
to
second
tab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
]
)
;
info
(
"
Switch
to
first
tab
again
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
{
url
:
TEST_URL2
}
]
)
;
info
(
"
Switch
to
second
tab
again
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
{
url
:
TEST_URL2
}
{
url
:
TEST_URL
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
{
url
:
TEST_URL2
}
{
url
:
TEST_URL
}
{
url
:
TEST_URL2
}
]
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
