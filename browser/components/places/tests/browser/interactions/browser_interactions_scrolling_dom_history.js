"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
places
/
tests
/
browser
/
interactions
/
scrolling
.
html
"
;
const
TEST_URL2
=
"
https
:
/
/
example
.
com
/
browser
"
;
async
function
waitForScrollEvent
(
aBrowser
aTask
)
{
let
promise
=
BrowserTestUtils
.
waitForContentEvent
(
aBrowser
"
scroll
"
)
;
await
SpecialPowers
.
spawn
(
aBrowser
[
]
(
)
=
>
{
}
)
;
await
aTask
(
)
;
await
promise
;
}
add_task
(
async
function
test_scroll_pushState
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
const
heading
=
content
.
document
.
getElementById
(
"
heading
"
)
;
heading
.
focus
(
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
await
ContentTask
.
spawn
(
browser
TEST_URL2
url
=
>
{
content
.
history
.
pushState
(
null
"
"
url
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
scrollingDistanceIsGreaterThan
:
0
scrollingTimeIsGreaterThan
:
0
}
{
url
:
TEST_URL2
scrollingDistanceIsGreaterThan
:
0
scrollingTimeIsGreaterThan
:
0
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_scroll_pushState_sameUrl
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
const
heading
=
content
.
document
.
getElementById
(
"
heading
"
)
;
heading
.
focus
(
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
await
ContentTask
.
spawn
(
browser
TEST_URL
url
=
>
{
content
.
history
.
pushState
(
null
"
"
url
)
;
}
)
;
await
assertDatabaseValues
(
[
]
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
scrollingDistanceIsGreaterThan
:
0
scrollingTimeIsGreaterThan
:
0
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_scroll_replaceState
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
const
heading
=
content
.
document
.
getElementById
(
"
heading
"
)
;
heading
.
focus
(
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
await
ContentTask
.
spawn
(
browser
TEST_URL2
url
=
>
{
content
.
history
.
replaceState
(
null
"
"
url
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
scrollingDistanceIsGreaterThan
:
0
scrollingTimeIsGreaterThan
:
0
}
{
url
:
TEST_URL2
scrollingDistanceIsGreaterThan
:
0
scrollingTimeIsGreaterThan
:
0
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_scroll_replaceState_sameUrl
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
const
heading
=
content
.
document
.
getElementById
(
"
heading
"
)
;
heading
.
focus
(
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
await
ContentTask
.
spawn
(
browser
TEST_URL
url
=
>
{
content
.
history
.
replaceState
(
null
"
"
url
)
;
}
)
;
await
assertDatabaseValues
(
[
]
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
scrollingDistanceIsGreaterThan
:
0
scrollingTimeIsGreaterThan
:
0
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_scroll_hashchange
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
const
heading
=
content
.
document
.
getElementById
(
"
heading
"
)
;
heading
.
focus
(
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
await
ContentTask
.
spawn
(
browser
TEST_URL
+
"
#
foo
"
url
=
>
{
content
.
history
.
replaceState
(
null
"
"
url
)
;
}
)
;
await
waitForScrollEvent
(
browser
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
scrollingDistanceIsGreaterThan
:
0
scrollingTimeIsGreaterThan
:
0
}
]
)
;
}
)
;
}
)
;
