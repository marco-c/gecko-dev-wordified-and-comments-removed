"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
places
/
tests
/
browser
/
keyword_form
.
html
"
;
const
TEST_URL2
=
"
https
:
/
/
example
.
com
/
browser
"
;
const
TEST_URL3
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
contextMenu
/
subtst_contextmenu_input
.
html
"
;
const
sentence
=
"
The
quick
brown
fox
jumps
over
the
lazy
dog
.
"
;
const
sentenceFragments
=
[
"
The
quick
"
"
brown
fox
"
"
jumps
over
the
lazy
dog
.
"
]
;
const
longSentence
=
"
Lorem
ipsum
dolor
sit
amet
consectetur
adipiscing
elit
.
Maecenas
ut
purus
a
libero
cursus
scelerisque
.
In
hac
habitasse
platea
dictumst
.
Quisque
posuere
ante
sed
consequat
volutpat
.
"
;
const
POST_TYPING_DELAY
=
100
;
async
function
sendTextToInput
(
browser
text
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
const
input
=
content
.
document
.
querySelector
(
"
#
form1
>
input
[
name
=
'
search
'
]
"
)
;
input
.
focus
(
)
;
input
.
value
=
"
"
;
}
)
;
for
(
let
char
of
text
)
{
await
EventUtils
.
sendString
(
char
)
;
}
await
SpecialPowers
.
spawn
(
browser
[
{
text
}
]
async
function
(
args
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
querySelector
(
"
#
form1
>
input
[
name
=
'
search
'
]
"
)
.
value
=
=
args
.
text
"
Text
has
been
set
on
input
"
)
;
}
)
;
}
add_task
(
async
function
test_load_and_navigate_away_no_keypresses
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
BrowserTestUtils
.
loadURI
(
browser
TEST_URL2
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_URL2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
0
exactTypingTime
:
0
}
{
url
:
TEST_URL2
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_load_type_and_navigate_away
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
sendTextToInput
(
browser
sentence
)
;
BrowserTestUtils
.
loadURI
(
browser
TEST_URL2
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_URL2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentence
.
length
typingTimeIsGreaterThan
:
0
}
]
)
;
BrowserTestUtils
.
loadURI
(
browser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
about
:
blank
"
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentence
.
length
typingTimeIsGreaterThan
:
0
}
{
url
:
TEST_URL2
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_no_typing_close_tab
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
}
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
}
)
;
add_task
(
async
function
test_typing_close_tab
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
sendTextToInput
(
browser
sentence
)
;
}
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentence
.
length
typingTimeIsGreaterThan
:
0
}
]
)
;
}
)
;
add_task
(
async
function
test_single_key_typing_and_delay
(
)
{
await
Interactions
.
reset
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
const
text
=
[
"
T
"
"
h
"
"
e
"
]
;
for
(
let
i
=
0
;
i
<
text
.
length
;
i
+
+
)
{
await
sendTextToInput
(
browser
text
[
i
]
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
POST_TYPING_DELAY
)
)
;
}
}
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
}
)
;
add_task
(
async
function
test_double_key_typing_and_delay
(
)
{
await
Interactions
.
reset
(
)
;
const
text
=
[
"
Ab
"
"
cd
"
"
ef
"
]
;
const
testStartTime
=
Cu
.
now
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
for
(
let
i
=
0
;
i
<
text
.
length
;
i
+
+
)
{
await
sendTextToInput
(
browser
text
[
i
]
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
POST_TYPING_DELAY
)
)
;
}
}
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
text
.
reduce
(
(
accumulator
current
)
=
>
accumulator
+
current
.
length
0
)
typingTimeIsLessThan
:
Cu
.
now
(
)
-
testStartTime
}
]
)
;
}
)
;
add_task
(
async
function
test_typing_and_delay
(
)
{
await
Interactions
.
reset
(
)
;
const
testStartTime
=
Cu
.
now
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
for
(
let
i
=
0
;
i
<
sentenceFragments
.
length
;
i
+
+
)
{
await
sendTextToInput
(
browser
sentenceFragments
[
i
]
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
POST_TYPING_DELAY
)
)
;
}
}
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentenceFragments
.
reduce
(
(
accumulator
current
)
=
>
accumulator
+
current
.
length
0
)
typingTimeIsGreaterThan
:
0
typingTimeIsLessThan
:
Cu
.
now
(
)
-
testStartTime
}
]
)
;
}
)
;
add_task
(
async
function
test_typing_and_reload
(
)
{
await
Interactions
.
reset
(
)
;
const
testStartTime
=
Cu
.
now
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
sendTextToInput
(
browser
sentenceFragments
[
0
]
)
;
info
(
"
reload
"
)
;
browser
.
reload
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_URL
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentenceFragments
[
0
]
.
length
typingTimeIsGreaterThan
:
0
}
]
)
;
await
sendTextToInput
(
browser
sentenceFragments
[
1
]
)
;
info
(
"
reload
"
)
;
browser
.
reload
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_URL
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentenceFragments
[
0
]
.
length
typingTimeIsGreaterThan
:
0
typingTimeIsLessThan
:
Cu
.
now
(
)
-
testStartTime
}
{
url
:
TEST_URL
keypresses
:
sentenceFragments
[
1
]
.
length
typingTimeIsGreaterThan
:
0
typingTimeIsLessThan
:
Cu
.
now
(
)
-
testStartTime
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
test_switch_tabs_no_typing
(
)
{
await
Interactions
.
reset
(
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
TEST_URL
}
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_URL2
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
false
TEST_URL2
)
;
info
(
"
Switch
to
second
tab
"
)
;
gBrowser
.
selectedTab
=
tab2
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
test_typing_switch_tabs
(
)
{
await
Interactions
.
reset
(
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
TEST_URL
}
)
;
await
sendTextToInput
(
tab1
.
linkedBrowser
sentence
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_URL3
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
false
TEST_URL3
)
;
info
(
"
Switch
to
second
tab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentence
.
length
typingTimeIsGreaterThan
:
0
}
]
)
;
const
tab1TyingTime
=
await
getDatabaseValue
(
TEST_URL
"
typingTime
"
)
;
info
(
"
Switch
back
to
first
tab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentence
.
length
exactTypingTime
:
tab1TyingTime
}
{
url
:
TEST_URL3
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
info
(
"
Switch
back
to
the
second
tab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentence
.
length
exactTypingTime
:
tab1TyingTime
}
{
url
:
TEST_URL3
keypresses
:
0
exactTypingTime
:
0
}
]
)
;
await
SpecialPowers
.
spawn
(
tab2
.
linkedBrowser
[
]
function
(
)
{
const
input
=
content
.
document
.
getElementById
(
"
input_text
"
)
;
input
.
focus
(
)
;
}
)
;
await
EventUtils
.
sendString
(
longSentence
)
;
await
TestUtils
.
waitForTick
(
)
;
info
(
"
Switch
back
to
first
tab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
assertDatabaseValues
(
[
{
url
:
TEST_URL
keypresses
:
sentence
.
length
exactTypingTime
:
tab1TyingTime
}
{
url
:
TEST_URL3
keypresses
:
longSentence
.
length
typingTimeIsGreaterThan
:
0
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
