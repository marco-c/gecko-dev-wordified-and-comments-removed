let
gLibrary
;
add_task
(
async
function
(
)
{
gLibrary
=
await
promiseLibrary
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
gLibrary
.
close
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
gLibrary
.
PlacesOrganizer
.
_places
.
focus
(
)
;
info
(
"
Bug
430148
-
Remove
or
hide
the
more
/
less
button
in
details
pane
.
.
.
"
)
;
let
PO
=
gLibrary
.
PlacesOrganizer
;
let
ContentTree
=
gLibrary
.
ContentTree
;
let
infoBoxExpanderWrapper
=
getAndCheckElmtById
(
"
infoBoxExpanderWrapper
"
)
;
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
www
.
mozilla
.
org
/
"
)
;
PO
.
selectLeftPaneBuiltIn
(
"
AllBookmarks
"
)
;
isnot
(
PO
.
_places
.
selectedNode
null
"
Correctly
selected
all
bookmarks
node
.
"
)
;
checkInfoBoxSelected
(
)
;
ok
(
infoBoxExpanderWrapper
.
hidden
"
Expander
button
is
hidden
for
all
bookmarks
node
.
"
)
;
checkAddInfoFieldsCollapsed
(
PO
)
;
PO
.
selectLeftPaneBuiltIn
(
"
History
"
)
;
isnot
(
PO
.
_places
.
selectedNode
null
"
Correctly
selected
history
node
.
"
)
;
checkInfoBoxSelected
(
)
;
ok
(
infoBoxExpanderWrapper
.
hidden
"
Expander
button
is
hidden
for
history
node
.
"
)
;
checkAddInfoFieldsCollapsed
(
PO
)
;
var
historyNode
=
PO
.
_places
.
selectedNode
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
historyNode
.
containerOpen
=
true
;
var
childNode
=
historyNode
.
getChild
(
0
)
;
isnot
(
childNode
null
"
History
node
first
child
is
not
null
.
"
)
;
PO
.
_places
.
selectNode
(
childNode
)
;
checkInfoBoxSelected
(
)
;
ok
(
infoBoxExpanderWrapper
.
hidden
"
Expander
button
is
hidden
for
history
child
node
.
"
)
;
checkAddInfoFieldsCollapsed
(
PO
)
;
var
view
=
ContentTree
.
view
.
view
;
ok
(
view
.
rowCount
>
0
"
History
item
exists
.
"
)
;
view
.
selection
.
select
(
0
)
;
ok
(
infoBoxExpanderWrapper
.
hidden
"
Expander
button
is
hidden
for
history
item
.
"
)
;
checkAddInfoFieldsCollapsed
(
PO
)
;
historyNode
.
containerOpen
=
false
;
PO
.
selectLeftPaneBuiltIn
(
"
BookmarksMenu
"
)
;
isnot
(
PO
.
_places
.
selectedNode
null
"
Correctly
selected
bookmarks
menu
node
.
"
)
;
checkInfoBoxSelected
(
)
;
ok
(
infoBoxExpanderWrapper
.
hidden
"
Expander
button
is
hidden
for
bookmarks
menu
node
.
"
)
;
checkAddInfoFieldsCollapsed
(
PO
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
"
place
:
folder
=
BOOKMARKS_MENU
&
folder
=
UNFILED_BOOKMARKS
&
folder
=
TOOLBAR
"
+
"
&
queryType
=
"
+
Ci
.
nsINavHistoryQueryOptions
.
QUERY_TYPE_BOOKMARKS
+
"
&
sort
=
"
+
Ci
.
nsINavHistoryQueryOptions
.
SORT_BY_DATEADDED_DESCENDING
+
"
&
maxResults
=
10
"
+
"
&
excludeQueries
=
1
"
title
:
"
Recent
Bookmarks
"
index
:
0
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
"
http
:
/
/
mozilla
.
org
/
"
title
:
"
Mozilla
"
index
:
1
}
)
;
var
menuNode
=
PO
.
_places
.
selectedNode
.
QueryInterface
(
Ci
.
nsINavHistoryContainerResultNode
)
;
menuNode
.
containerOpen
=
true
;
childNode
=
menuNode
.
getChild
(
0
)
;
isnot
(
childNode
null
"
Bookmarks
menu
child
node
exists
.
"
)
;
is
(
childNode
.
title
"
Recent
Bookmarks
"
"
Correctly
selected
recently
bookmarked
node
.
"
)
;
PO
.
_places
.
selectNode
(
childNode
)
;
checkInfoBoxSelected
(
)
;
ok
(
!
infoBoxExpanderWrapper
.
hidden
"
Expander
button
is
not
hidden
for
recently
bookmarked
node
.
"
)
;
checkAddInfoFieldsNotCollapsed
(
PO
)
;
view
=
ContentTree
.
view
.
view
;
ok
(
view
.
rowCount
>
0
"
Bookmark
item
exists
.
"
)
;
view
.
selection
.
select
(
0
)
;
checkInfoBoxSelected
(
)
;
ok
(
!
infoBoxExpanderWrapper
.
hidden
"
Expander
button
is
not
hidden
for
bookmark
item
.
"
)
;
checkAddInfoFieldsNotCollapsed
(
PO
)
;
ok
(
true
"
Checking
additional
info
fields
visibiity
for
bookmark
item
"
)
;
var
expanderButton
=
getAndCheckElmtById
(
"
infoBoxExpander
"
)
;
PO
.
_additionalInfoFields
.
forEach
(
function
(
id
)
{
ok
(
getAndCheckElmtById
(
id
)
.
hidden
"
Additional
info
field
correctly
hidden
by
default
:
#
"
+
id
)
;
}
)
;
expanderButton
.
click
(
)
;
PO
.
_additionalInfoFields
.
forEach
(
function
(
id
)
{
ok
(
!
getAndCheckElmtById
(
id
)
.
hidden
"
Additional
info
field
correctly
unhidden
after
toggle
:
#
"
+
id
)
;
}
)
;
expanderButton
.
click
(
)
;
PO
.
_additionalInfoFields
.
forEach
(
function
(
id
)
{
ok
(
getAndCheckElmtById
(
id
)
.
hidden
"
Additional
info
field
correctly
hidden
after
toggle
:
#
"
+
id
)
;
}
)
;
menuNode
.
containerOpen
=
false
;
}
)
;
function
checkInfoBoxSelected
(
)
{
is
(
getAndCheckElmtById
(
"
detailsDeck
"
)
.
selectedIndex
1
"
Selected
element
in
detailsDeck
is
infoBox
.
"
)
;
}
function
checkAddInfoFieldsCollapsed
(
PO
)
{
PO
.
_additionalInfoFields
.
forEach
(
id
=
>
{
ok
(
getAndCheckElmtById
(
id
)
.
collapsed
Additional
info
field
should
be
collapsed
:
#
{
id
}
)
;
}
)
;
}
function
checkAddInfoFieldsNotCollapsed
(
PO
)
{
ok
(
PO
.
_additionalInfoFields
.
some
(
id
=
>
!
getAndCheckElmtById
(
id
)
.
collapsed
)
Some
additional
info
field
should
not
be
collapsed
.
)
;
}
function
getAndCheckElmtById
(
id
)
{
var
elmt
=
gLibrary
.
document
.
getElementById
(
id
)
;
isnot
(
elmt
null
"
Correctly
got
element
:
#
"
+
id
)
;
return
elmt
;
}
