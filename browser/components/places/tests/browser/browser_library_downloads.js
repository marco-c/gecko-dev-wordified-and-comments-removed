add_task
(
async
function
test
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
mozilla
.
org
"
transition
:
PlacesUtils
.
history
.
TRANSITION_TYPED
}
{
uri
:
"
http
:
/
/
google
.
com
"
transition
:
PlacesUtils
.
history
.
TRANSITION_DOWNLOAD
}
{
uri
:
"
http
:
/
/
en
.
wikipedia
.
org
"
transition
:
PlacesUtils
.
history
.
TRANSITION_TYPED
}
{
uri
:
"
http
:
/
/
ubuntu
.
org
"
transition
:
PlacesUtils
.
history
.
TRANSITION_DOWNLOAD
}
]
)
;
let
library
=
await
promiseLibrary
(
"
Downloads
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
library
.
close
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
Assert
.
notEqual
(
library
.
PlacesOrganizer
.
_places
.
selectedNode
null
"
Downloads
is
present
and
selected
"
)
;
let
testURIs
=
[
"
http
:
/
/
ubuntu
.
org
/
"
"
http
:
/
/
google
.
com
/
"
]
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
library
.
ContentArea
.
currentView
.
associatedElement
.
children
.
length
=
=
testURIs
.
length
)
;
for
(
let
element
of
library
.
ContentArea
.
currentView
.
associatedElement
.
children
)
{
Assert
.
equal
(
element
.
_shell
.
download
.
source
.
url
testURIs
.
shift
(
)
"
URI
matches
"
)
;
}
}
)
;
