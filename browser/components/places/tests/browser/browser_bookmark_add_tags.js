"
use
strict
"
;
const
bookmarkPanel
=
document
.
getElementById
(
"
editBookmarkPanel
"
)
;
const
bookmarkStar
=
BookmarkingUI
.
star
;
async
function
clickBookmarkStar
(
)
{
let
shownPromise
=
promisePopupShown
(
bookmarkPanel
)
;
bookmarkStar
.
click
(
)
;
await
shownPromise
;
}
async
function
hideBookmarksPanel
(
callback
)
{
let
hiddenPromise
=
promisePopupHidden
(
bookmarkPanel
)
;
callback
(
)
;
await
hiddenPromise
;
}
add_task
(
async
function
test_add_bookmark_tags_from_bookmarkProperties
(
)
{
const
TEST_URL
=
"
about
:
robots
"
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
TEST_URL
waitForStateStop
:
true
}
)
;
registerCleanupFunction
(
async
function
(
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
let
bookmarkPanelTitle
=
document
.
getElementById
(
"
editBookmarkPanelTitle
"
)
;
await
hideBookmarksPanel
(
async
(
)
=
>
{
await
clickBookmarkStar
(
)
;
Assert
.
equal
(
bookmarkPanelTitle
.
value
gNavigatorBundle
.
getString
(
"
editBookmarkPanel
.
newBookmarkTitle
"
)
"
Bookmark
title
is
correct
"
)
;
Assert
.
equal
(
bookmarkStar
.
getAttribute
(
"
starred
"
)
"
true
"
"
Page
is
starred
"
)
;
}
)
;
await
clickBookmarkStar
(
)
;
Assert
.
equal
(
bookmarkPanelTitle
.
value
gNavigatorBundle
.
getString
(
"
editBookmarkPanel
.
editBookmarkTitle
"
)
"
Bookmark
title
is
correct
"
)
;
let
promiseNotification
=
PlacesTestUtils
.
waitForNotification
(
"
onItemAdded
"
(
id
parentId
index
type
itemUrl
)
=
>
{
if
(
itemUrl
!
=
=
null
)
{
return
itemUrl
.
equals
(
Services
.
io
.
newURI
(
TEST_URL
)
)
;
}
return
true
;
}
)
;
await
fillBookmarkTextField
(
"
editBMPanel_tagsField
"
"
tag1
"
window
)
;
await
promiseNotification
;
let
bookmarks
=
[
]
;
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
:
TEST_URL
}
bm
=
>
bookmarks
.
push
(
bm
)
)
;
Assert
.
equal
(
PlacesUtils
.
tagging
.
getTagsForURI
(
Services
.
io
.
newURI
(
TEST_URL
)
)
.
length
1
"
Found
the
right
number
of
tags
"
)
;
Assert
.
deepEqual
(
PlacesUtils
.
tagging
.
getTagsForURI
(
Services
.
io
.
newURI
(
TEST_URL
)
)
[
"
tag1
"
]
)
;
let
doneButton
=
document
.
getElementById
(
"
editBookmarkPanelDoneButton
"
)
;
await
hideBookmarksPanel
(
(
)
=
>
doneButton
.
click
(
)
)
;
await
clickBookmarkStar
(
)
;
promiseNotification
=
PlacesTestUtils
.
waitForNotification
(
"
onItemChanged
"
(
id
property
)
=
>
property
=
=
"
tags
"
)
;
await
fillBookmarkTextField
(
"
editBMPanel_tagsField
"
"
tag1
tag2
tag3
"
window
)
;
await
promiseNotification
;
await
hideBookmarksPanel
(
(
)
=
>
doneButton
.
click
(
)
)
;
bookmarks
=
[
]
;
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
:
TEST_URL
}
bm
=
>
bookmarks
.
push
(
bm
)
)
;
Assert
.
equal
(
bookmarks
.
length
1
"
Only
one
bookmark
should
exist
"
)
;
Assert
.
equal
(
PlacesUtils
.
tagging
.
getTagsForURI
(
Services
.
io
.
newURI
(
TEST_URL
)
)
.
length
3
"
Found
the
right
number
of
tags
"
)
;
Assert
.
deepEqual
(
PlacesUtils
.
tagging
.
getTagsForURI
(
Services
.
io
.
newURI
(
TEST_URL
)
)
[
"
tag1
"
"
tag2
"
"
tag3
"
]
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_add_bookmark_tags_from_library
(
)
{
const
uri
=
"
http
:
/
/
example
.
com
/
"
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
url
:
uri
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
}
)
;
let
library
=
await
promiseLibrary
(
"
UnfiledBookmarks
"
)
;
registerCleanupFunction
(
async
function
(
)
{
await
promiseLibraryClosed
(
library
)
;
}
)
;
let
bookmarkNode
=
library
.
ContentTree
.
view
.
selectedNode
;
Assert
.
equal
(
bookmarkNode
.
uri
"
http
:
/
/
example
.
com
/
"
"
Found
the
expected
bookmark
"
)
;
fillBookmarkTextField
(
"
editBMPanel_tagsField
"
"
tag1
"
library
)
;
await
waitForCondition
(
(
)
=
>
bookmarkNode
.
tags
=
=
=
"
tag1
"
"
Node
tag
is
correct
"
)
;
fillBookmarkTextField
(
"
editBMPanel_tagsField
"
"
tag1
tag2
"
library
)
;
await
waitForCondition
(
(
)
=
>
bookmarkNode
.
tags
=
=
=
"
tag1
tag2
"
"
Node
tag
is
correct
"
)
;
let
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
Services
.
io
.
newURI
(
uri
)
)
;
Assert
.
equal
(
tags
.
length
2
"
Found
the
right
number
of
tags
"
)
;
Assert
.
deepEqual
(
tags
[
"
tag1
"
"
tag2
"
]
"
Found
the
expected
tags
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_add_bookmark_tags_from_sidebar
(
)
{
const
TEST_URL
=
"
about
:
buildconfig
"
;
let
bookmarks
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
TEST_URL
title
:
"
Bookmark
Title
"
}
)
;
await
withSidebarTree
(
"
bookmarks
"
async
function
(
tree
)
{
tree
.
selectItems
(
[
bookmarks
.
guid
]
)
;
await
addTags
(
[
"
tag1
"
]
tree
[
"
tag1
"
]
)
;
await
addTags
(
[
"
tag2
"
"
tag3
"
]
tree
[
"
tag1
"
"
tag2
"
"
tag3
"
]
)
;
}
)
;
async
function
addTags
(
tagValue
tree
expected
)
{
await
withBookmarksDialog
(
false
function
openPropertiesDialog
(
)
{
tree
.
controller
.
doCommand
(
"
placesCmd_show
:
info
"
)
;
}
async
function
test
(
dialogWin
)
{
PlacesUtils
.
tagging
.
tagURI
(
makeURI
(
TEST_URL
)
tagValue
)
;
let
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
Services
.
io
.
newURI
(
TEST_URL
)
)
;
Assert
.
deepEqual
(
tags
expected
"
Tags
field
is
correctly
populated
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
dialogWin
)
;
}
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
