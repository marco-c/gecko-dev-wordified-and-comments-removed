"
use
strict
"
;
add_task
(
async
function
(
)
{
let
testTag
=
"
foo
"
;
let
testTagUpper
=
"
Foo
"
;
let
testURI
=
Services
.
io
.
newURI
(
"
http
:
/
/
www
.
example
.
com
/
"
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
type
:
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
title
:
"
mozilla
"
url
:
testURI
}
)
;
StarUI
.
_createPanelIfNeeded
(
)
;
ok
(
gEditItemOverlay
"
gEditItemOverlay
is
in
context
"
)
;
let
node
=
await
PlacesUIUtils
.
promiseNodeLikeFromFetchInfo
(
bm
)
;
gEditItemOverlay
.
initPanel
(
{
node
}
)
;
document
.
getElementById
(
"
editBMPanel_tagsField
"
)
.
value
=
testTag
;
let
promiseNotification
=
PlacesTestUtils
.
waitForNotification
(
"
onItemChanged
"
(
id
property
)
=
>
property
=
=
"
tags
"
)
;
gEditItemOverlay
.
onTagsFieldChange
(
)
;
await
promiseNotification
;
is
(
PlacesUtils
.
tagging
.
getTagsForURI
(
testURI
)
[
0
]
testTag
"
tags
match
"
)
;
document
.
getElementById
(
"
editBMPanel_tagsField
"
)
.
value
=
testTagUpper
;
promiseNotification
=
PlacesTestUtils
.
waitForNotification
(
"
bookmark
-
title
-
changed
"
(
)
=
>
true
"
places
"
)
;
gEditItemOverlay
.
onTagsFieldChange
(
)
;
await
promiseNotification
;
is
(
PlacesUtils
.
tagging
.
getTagsForURI
(
testURI
)
[
0
]
testTagUpper
"
tags
match
"
)
;
PlacesUtils
.
tagging
.
untagURI
(
testURI
[
testTag
]
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
.
guid
)
;
}
)
;
