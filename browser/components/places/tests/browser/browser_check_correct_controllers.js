"
use
strict
"
;
add_task
(
async
function
test
(
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
title
:
"
Plain
Bob
"
url
:
"
http
:
/
/
example
.
com
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
;
}
)
;
let
sidebarBox
=
document
.
getElementById
(
"
sidebar
-
box
"
)
;
is
(
sidebarBox
.
hidden
true
"
The
sidebar
should
be
hidden
"
)
;
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
let
wasCollapsed
=
toolbar
.
collapsed
;
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
true
)
;
}
let
sidebar
=
await
promiseLoadedSidebar
(
"
viewBookmarksSidebar
"
)
;
registerCleanupFunction
(
(
)
=
>
{
SidebarUI
.
hide
(
)
;
}
)
;
let
tree
=
sidebar
.
contentDocument
.
getElementById
(
"
bookmarks
-
view
"
)
;
tree
.
focus
(
)
;
let
controller
=
PlacesUIUtils
.
getControllerForCommand
(
window
"
placesCmd_copy
"
)
;
let
treeController
=
tree
.
controllers
.
getControllerForCommand
(
"
placesCmd_copy
"
)
;
ok
(
controller
=
=
treeController
"
tree
controller
was
returned
"
)
;
let
toolbarItems
=
document
.
getElementById
(
"
PlacesToolbarItems
"
)
;
EventUtils
.
synthesizeMouse
(
toolbarItems
.
childNodes
[
0
]
4
4
{
type
:
"
contextmenu
"
button
:
2
}
window
)
;
controller
=
PlacesUIUtils
.
getControllerForCommand
(
window
"
placesCmd_copy
"
)
;
let
toolbarController
=
document
.
getElementById
(
"
PlacesToolbar
"
)
.
controllers
.
getControllerForCommand
(
"
placesCmd_copy
"
)
;
ok
(
controller
=
=
toolbarController
"
the
toolbar
controller
was
returned
"
)
;
document
.
getElementById
(
"
placesContext
"
)
.
hidePopup
(
)
;
tree
.
focus
(
)
;
controller
=
PlacesUIUtils
.
getControllerForCommand
(
window
"
placesCmd_copy
"
)
;
ok
(
controller
=
=
treeController
"
tree
controller
was
returned
"
)
;
if
(
wasCollapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
false
)
;
}
}
)
;
function
promiseLoadedSidebar
(
cmd
)
{
return
new
Promise
(
resolve
=
>
{
let
sidebar
=
document
.
getElementById
(
"
sidebar
"
)
;
sidebar
.
addEventListener
(
"
load
"
function
(
)
{
executeSoon
(
(
)
=
>
resolve
(
sidebar
)
)
;
}
{
capture
:
true
once
:
true
}
)
;
SidebarUI
.
show
(
cmd
)
;
}
)
;
}
