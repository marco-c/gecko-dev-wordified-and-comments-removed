registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
add_task
(
async
function
test_tags
(
)
{
const
TEST_URI
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
/
"
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
type
:
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
url
:
TEST_URI
title
:
"
example
page
"
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
index
:
0
}
)
;
PlacesUtils
.
tagging
.
tagURI
(
TEST_URI
[
"
test
"
]
)
;
let
library
=
await
promiseLibrary
(
)
;
let
PO
=
library
.
PlacesOrganizer
;
PO
.
selectLeftPaneBuiltIn
(
"
Tags
"
)
;
let
tagsNode
=
PO
.
_places
.
selectedNode
;
Assert
.
notEqual
(
tagsNode
null
"
Should
have
a
valid
selection
"
)
;
let
tagsTitle
=
PlacesUtils
.
getString
(
"
TagsFolderTitle
"
)
;
Assert
.
equal
(
tagsNode
.
title
tagsTitle
"
Should
have
selected
the
Tags
node
"
)
;
PlacesUtils
.
asContainer
(
tagsNode
)
.
containerOpen
=
true
;
let
tag
=
tagsNode
.
getChild
(
0
)
;
PO
.
_places
.
selectNode
(
tag
)
;
Assert
.
equal
(
PO
.
_places
.
selectedNode
.
title
"
test
"
"
Should
have
selected
the
created
tag
"
)
;
PO
.
_places
.
controller
.
doCommand
(
"
cmd_delete
"
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
let
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
TEST_URI
)
;
Assert
.
equal
(
tags
.
length
0
"
There
should
be
no
tags
for
the
URI
"
)
;
tagsNode
.
containerOpen
=
false
;
library
.
close
(
)
;
}
)
;
