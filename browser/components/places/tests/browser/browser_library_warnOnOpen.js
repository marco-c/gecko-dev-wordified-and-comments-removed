"
use
strict
"
;
var
gLibrary
=
null
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
places
.
history
.
enabled
"
false
]
]
}
)
;
gLibrary
=
await
promiseLibrary
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
gLibrary
.
PlacesOrganizer
.
selectLeftPaneBuiltIn
(
"
UnfiledBookmarks
"
)
;
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
promiseLibraryClosed
(
gLibrary
)
;
}
)
;
}
)
;
add_task
(
async
function
test_warnOnOpenFolder
(
)
{
const
MAX_LINKS
=
16
;
let
children
=
[
]
;
for
(
let
i
=
0
;
i
<
MAX_LINKS
;
i
+
+
)
{
children
.
push
(
{
title
:
Folder
Target
{
i
}
url
:
http
:
/
/
example
{
i
}
.
com
}
)
;
}
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
[
{
title
:
"
bigFolder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
}
]
}
)
;
info
(
"
Pushed
test
folder
into
the
bookmarks
tree
"
)
;
gLibrary
.
PlacesOrganizer
.
selectLeftPaneBuiltIn
(
"
UnfiledBookmarks
"
)
;
info
(
"
Got
selection
in
the
Library
left
pane
"
)
;
gLibrary
.
ContentTree
.
view
.
view
.
nodeForTreeIndex
(
0
)
;
info
(
"
Got
bigFolder
in
the
right
pane
"
)
;
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
.
containerOpen
=
true
;
let
promiseLoaded
=
BrowserTestUtils
.
promiseAlertDialog
(
"
cancel
"
)
;
let
bookmarkedNode
=
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
.
getChild
(
0
)
;
mouseEventOnCell
(
gLibrary
.
PlacesOrganizer
.
_places
gLibrary
.
PlacesOrganizer
.
_places
.
view
.
treeIndexForNode
(
bookmarkedNode
)
0
{
button
:
1
}
)
;
await
promiseLoaded
;
Assert
.
ok
(
true
"
Expected
dialog
was
shown
when
attempting
to
open
folder
with
lots
of
links
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
test_warnOnOpenLinks
(
)
{
const
MAX_LINKS
=
16
;
let
children
=
[
]
;
for
(
let
i
=
0
;
i
<
MAX_LINKS
;
i
+
+
)
{
children
.
push
(
{
title
:
Highlighted
Target
{
i
}
url
:
http
:
/
/
example
{
i
}
.
com
}
)
;
}
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
}
)
;
info
(
"
Pushed
test
folder
into
the
bookmarks
tree
"
)
;
gLibrary
.
PlacesOrganizer
.
selectLeftPaneBuiltIn
(
"
BookmarksToolbar
"
)
;
info
(
"
Got
selection
in
the
Library
left
pane
"
)
;
gLibrary
.
ContentTree
.
view
.
selectAll
(
)
;
let
placesContext
=
gLibrary
.
document
.
getElementById
(
"
placesContext
"
)
;
let
promiseContextMenu
=
BrowserTestUtils
.
waitForEvent
(
placesContext
"
popupshown
"
)
;
synthesizeClickOnSelectedTreeCell
(
gLibrary
.
ContentTree
.
view
{
button
:
2
type
:
"
contextmenu
"
}
)
;
await
promiseContextMenu
;
info
(
"
Context
menu
opened
as
expected
"
)
;
let
openTabs
=
gLibrary
.
document
.
getElementById
(
"
placesContext_openBookmarkLinks
:
tabs
"
)
;
let
promiseLoaded
=
BrowserTestUtils
.
promiseAlertDialog
(
"
cancel
"
)
;
placesContext
.
activateItem
(
openTabs
{
}
)
;
await
promiseLoaded
;
Assert
.
ok
(
true
"
Expected
dialog
was
shown
when
attempting
to
open
lots
of
selected
links
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
function
mouseEventOnCell
(
aTree
aRowIndex
aColumnIndex
aEventDetails
)
{
var
selection
=
aTree
.
view
.
selection
;
selection
.
select
(
aRowIndex
)
;
aTree
.
ensureRowIsVisible
(
aRowIndex
)
;
var
column
=
aTree
.
columns
[
aColumnIndex
]
;
var
rect
=
aTree
.
getCoordsForCellItem
(
aRowIndex
column
"
text
"
)
;
EventUtils
.
synthesizeMouse
(
aTree
.
body
rect
.
x
rect
.
y
aEventDetails
gLibrary
)
;
}
