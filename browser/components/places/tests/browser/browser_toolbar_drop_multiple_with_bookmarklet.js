add_task
(
async
function
test
(
)
{
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
ok
(
toolbar
"
PersonalToolbar
should
not
be
null
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
if
(
toolbar
.
collapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
true
)
;
registerCleanupFunction
(
function
(
)
{
return
promiseSetToolbarVisibility
(
toolbar
false
)
;
}
)
;
}
let
placesItems
=
document
.
getElementById
(
"
PlacesToolbarItems
"
)
;
Assert
.
ok
(
placesItems
"
PlacesToolbarItems
should
not
be
null
"
)
;
let
simulateDragDrop
=
async
function
(
aEffect
aMimeType
)
{
let
urls
=
[
"
https
:
/
/
example
.
com
/
1
/
"
javascript
:
(
(
)
=
>
{
alert
(
'
Hello
World
!
'
)
;
}
)
(
)
;
"
https
:
/
/
example
.
com
/
2
/
"
]
;
let
data
=
urls
.
map
(
spec
=
>
spec
+
"
\
n
"
+
spec
)
.
join
(
"
\
n
"
)
;
EventUtils
.
synthesizeDrop
(
toolbar
placesItems
[
[
{
type
:
aMimeType
data
}
]
]
aEffect
window
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
for
(
let
url
of
urls
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
)
;
Assert
.
ok
(
!
bookmark
"
There
should
be
no
bookmark
"
)
;
}
}
;
let
mimeType
=
[
"
text
/
x
-
moz
-
url
"
]
;
let
effects
=
[
"
copy
"
"
link
"
]
;
for
(
let
effect
of
effects
)
{
await
simulateDragDrop
(
effect
mimeType
)
;
}
}
)
;
