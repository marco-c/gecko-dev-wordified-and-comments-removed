const
URIs
=
[
"
about
:
license
"
"
about
:
mozilla
"
]
;
var
gLibrary
=
null
;
var
gTests
=
[
]
;
add_task
(
async
function
test_setup
(
)
{
requestLongerTimeout
(
2
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
places
.
history
.
enabled
"
false
]
]
}
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
gLibrary
=
await
promiseLibrary
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
gLibrary
.
PlacesOrganizer
.
selectLeftPaneBuiltIn
(
"
UnfiledBookmarks
"
)
;
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
.
containerOpen
=
false
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
promiseLibraryClosed
(
gLibrary
)
;
}
)
;
}
)
;
gTests
.
push
(
{
desc
:
"
Open
bookmark
in
a
new
tab
.
"
URIs
:
[
"
about
:
buildconfig
"
]
_bookmark
:
null
async
setup
(
)
{
this
.
_bookmark
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
Title
"
url
:
this
.
URIs
[
0
]
}
)
;
gLibrary
.
PlacesOrganizer
.
selectLeftPaneBuiltIn
(
"
UnfiledBookmarks
"
)
;
Assert
.
notEqual
(
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
null
"
We
correctly
have
selection
in
the
Library
left
pane
"
)
;
var
bookmarkNode
=
gLibrary
.
ContentTree
.
view
.
view
.
nodeForTreeIndex
(
0
)
;
Assert
.
equal
(
bookmarkNode
.
uri
this
.
URIs
[
0
]
"
Found
bookmark
in
the
right
pane
"
)
;
}
async
cleanup
(
)
{
await
PlacesUtils
.
bookmarks
.
remove
(
this
.
_bookmark
)
;
}
}
)
;
gTests
.
push
(
{
desc
:
"
Open
a
folder
in
tabs
.
"
URIs
:
[
"
about
:
buildconfig
"
"
about
:
mozilla
"
]
_bookmarks
:
null
async
setup
(
)
{
let
children
=
this
.
URIs
.
map
(
url
=
>
{
return
{
title
:
"
Title
"
url
}
;
}
)
;
this
.
_bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
[
{
title
:
"
Folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
}
]
}
)
;
gLibrary
.
PlacesOrganizer
.
selectLeftPaneBuiltIn
(
"
UnfiledBookmarks
"
)
;
isnot
(
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
null
"
We
correctly
have
selection
in
the
Library
left
pane
"
)
;
var
folderNode
=
gLibrary
.
ContentTree
.
view
.
view
.
nodeForTreeIndex
(
0
)
;
is
(
folderNode
.
title
"
Folder
"
"
Found
folder
in
the
right
pane
"
)
;
}
async
cleanup
(
)
{
await
PlacesUtils
.
bookmarks
.
remove
(
this
.
_bookmarks
[
0
]
)
;
}
}
)
;
gTests
.
push
(
{
desc
:
"
Open
a
query
in
tabs
.
"
URIs
:
[
"
about
:
buildconfig
"
"
about
:
mozilla
"
]
_bookmarks
:
null
_query
:
null
async
setup
(
)
{
let
children
=
this
.
URIs
.
map
(
url
=
>
{
return
{
title
:
"
Title
"
url
}
;
}
)
;
this
.
_bookmarks
=
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
[
{
title
:
"
Folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
children
}
]
}
)
;
var
hs
=
PlacesUtils
.
history
;
var
options
=
hs
.
getNewQueryOptions
(
)
;
options
.
queryType
=
Ci
.
nsINavHistoryQueryOptions
.
QUERY_TYPE_BOOKMARKS
;
var
query
=
hs
.
getNewQuery
(
)
;
query
.
searchTerms
=
"
about
:
"
;
var
queryString
=
hs
.
queryToQueryString
(
query
options
)
;
this
.
_query
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
index
:
0
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
Query
"
url
:
queryString
}
)
;
gLibrary
.
PlacesOrganizer
.
selectLeftPaneBuiltIn
(
"
UnfiledBookmarks
"
)
;
isnot
(
gLibrary
.
PlacesOrganizer
.
_places
.
selectedNode
null
"
We
correctly
have
selection
in
the
Library
left
pane
"
)
;
var
folderNode
=
gLibrary
.
ContentTree
.
view
.
view
.
nodeForTreeIndex
(
0
)
;
is
(
folderNode
.
title
"
Query
"
"
Found
query
in
the
right
pane
"
)
;
}
async
cleanup
(
)
{
await
PlacesUtils
.
bookmarks
.
remove
(
this
.
_bookmarks
[
0
]
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
this
.
_query
)
;
}
}
)
;
async
function
runTest
(
test
)
{
info
(
"
Start
of
test
:
"
+
test
.
desc
)
;
await
test
.
setup
(
)
;
gLibrary
.
focus
(
)
;
await
SimpleTest
.
promiseFocus
(
gLibrary
)
;
let
promiseLoaded
=
Promise
.
all
(
test
.
URIs
.
map
(
uri
=
>
BrowserTestUtils
.
waitForNewTab
(
gBrowser
uri
false
true
)
)
)
;
mouseEventOnCell
(
gLibrary
.
ContentTree
.
view
0
0
{
button
:
1
}
)
;
let
tabs
=
await
promiseLoaded
;
Assert
.
ok
(
true
"
Expected
tabs
were
loaded
"
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
await
test
.
cleanup
(
)
;
}
add_task
(
async
function
test_all
(
)
{
for
(
let
test
of
gTests
)
{
await
runTest
(
test
)
;
}
}
)
;
function
mouseEventOnCell
(
aTree
aRowIndex
aColumnIndex
aEventDetails
)
{
var
selection
=
aTree
.
view
.
selection
;
selection
.
select
(
aRowIndex
)
;
aTree
.
treeBoxObject
.
ensureRowIsVisible
(
aRowIndex
)
;
var
column
=
aTree
.
columns
[
aColumnIndex
]
;
var
rect
=
aTree
.
treeBoxObject
.
getCoordsForCellItem
(
aRowIndex
column
"
text
"
)
;
EventUtils
.
synthesizeMouse
(
aTree
.
body
rect
.
x
rect
.
y
aEventDetails
gLibrary
)
;
}
