"
use
strict
"
;
let
library
;
let
PlacesOrganizer
;
function
assertSelectedRowIsVisible
(
selectedRow
msg
)
{
let
firstRow
=
library
.
ContentTree
.
view
.
getFirstVisibleRow
(
)
;
let
lastRow
=
library
.
ContentTree
.
view
.
getLastVisibleRow
(
)
;
Assert
.
ok
(
firstRow
<
=
selectedRow
&
&
lastRow
>
=
selectedRow
msg
)
;
}
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
library
=
await
promiseLibrary
(
"
UnfiledBookmarks
"
)
;
let
baseUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
let
nBookmarks
=
library
.
ContentTree
.
view
.
getLastVisibleRow
(
)
+
5
;
let
bookmarks
=
new
Array
(
nBookmarks
)
;
bookmarks
[
0
]
=
{
title
:
"
Test
Folder
"
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
}
;
for
(
let
index
=
1
;
index
<
nBookmarks
;
+
+
index
)
{
bookmarks
[
index
]
=
{
title
:
Example
Bookmark
{
index
+
10
}
url
:
baseUrl
+
index
+
10
type
:
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
}
;
}
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
children
:
bookmarks
}
)
;
await
promiseLibraryClosed
(
library
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
promiseLibraryClosed
(
library
)
;
}
)
;
}
)
;
add_task
(
async
function
test_click_bookmark
(
)
{
library
=
await
promiseLibrary
(
"
UnfiledBookmarks
"
)
;
let
selectedRow
=
library
.
ContentTree
.
view
.
getLastVisibleRow
(
)
;
let
node
=
library
.
ContentTree
.
view
.
view
.
nodeForTreeIndex
(
selectedRow
)
;
library
.
ContentTree
.
view
.
selectNode
(
node
)
;
synthesizeClickOnSelectedTreeCell
(
library
.
ContentTree
.
view
)
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
500
)
;
}
)
;
assertSelectedRowIsVisible
(
selectedRow
"
Selected
row
is
visible
"
)
;
await
promiseLibraryClosed
(
library
)
;
}
)
;
add_task
(
async
function
test_click_bookmark_on_sort
(
)
{
library
=
await
promiseLibrary
(
"
UnfiledBookmarks
"
)
;
let
selectedRow
=
library
.
ContentTree
.
view
.
getLastVisibleRow
(
)
;
library
.
ViewMenu
.
setSortColumn
(
0
"
descending
"
)
;
let
node
=
library
.
ContentTree
.
view
.
view
.
nodeForTreeIndex
(
selectedRow
)
;
library
.
ContentTree
.
view
.
selectNode
(
node
)
;
synthesizeClickOnSelectedTreeCell
(
library
.
ContentTree
.
view
)
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
500
)
;
}
)
;
assertSelectedRowIsVisible
(
selectedRow
"
Selected
row
is
visible
after
sort
"
)
;
}
)
;
