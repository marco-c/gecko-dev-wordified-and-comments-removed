"
use
strict
"
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
add_task
(
async
function
test_places_search_telemetry
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
let
cumulativeSearchesHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
PLACES_SEARCHBAR_CUMULATIVE_SEARCHES
"
)
;
cumulativeSearchesHistogram
.
clear
(
)
;
let
cumulativeFilterCountHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
PLACES_SEARCHBAR_CUMULATIVE_FILTER_COUNT
"
)
;
cumulativeFilterCountHistogram
.
clear
(
)
;
let
pages
=
[
"
https
:
/
/
sidebar
.
mozilla
.
org
/
a
"
"
https
:
/
/
sidebar
.
mozilla
.
org
/
b
"
"
https
:
/
/
sidebar
.
mozilla
.
org
/
c
"
"
https
:
/
/
www
.
mozilla
.
org
/
d
"
]
;
const
firstNodeIndex
=
0
;
let
time
=
Date
.
now
(
)
;
let
places
=
[
]
;
for
(
let
i
=
0
;
i
<
pages
.
length
;
i
+
+
)
{
places
.
push
(
{
uri
:
NetUtil
.
newURI
(
pages
[
i
]
)
visitDate
:
(
time
-
i
)
*
1000
transition
:
PlacesUtils
.
history
.
TRANSITION_TYPED
}
)
;
}
await
PlacesTestUtils
.
addVisits
(
places
)
;
await
withSidebarTree
(
"
history
"
async
function
(
)
{
let
sidebar
=
window
.
SidebarUI
.
browser
;
let
tree
=
sidebar
.
contentDocument
.
getElementById
(
"
historyTree
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
tree
.
view
.
nodeForTreeIndex
(
firstNodeIndex
)
)
;
info
(
"
Sidebar
was
opened
and
populated
"
)
;
sidebar
.
contentDocument
.
getElementById
(
"
bylastvisited
"
)
.
doCommand
(
)
;
info
(
"
Search
filter
was
changed
to
bylastvisited
"
)
;
let
searchBox
=
sidebar
.
contentDocument
.
getElementById
(
"
search
-
box
"
)
;
searchBox
.
value
=
"
sidebar
.
mozilla
"
;
searchBox
.
doCommand
(
)
;
info
(
"
Tree
was
searched
with
sting
sidebar
.
mozilla
"
)
;
searchBox
.
value
=
"
"
;
searchBox
.
doCommand
(
)
;
info
(
"
Search
was
reset
"
)
;
searchBox
.
value
=
"
sidebar
.
mozilla
"
;
searchBox
.
doCommand
(
)
;
info
(
"
Second
search
was
performed
"
)
;
tree
.
selectNode
(
tree
.
view
.
nodeForTreeIndex
(
firstNodeIndex
)
)
;
synthesizeClickOnSelectedTreeCell
(
tree
{
button
:
1
}
)
;
info
(
"
First
link
was
selected
and
then
clicked
on
"
)
;
}
)
;
TelemetryTestUtils
.
assertHistogram
(
cumulativeSearchesHistogram
2
1
)
;
info
(
"
Cumulative
search
telemetry
looks
right
"
)
;
TelemetryTestUtils
.
assertHistogram
(
cumulativeFilterCountHistogram
1
1
)
;
info
(
"
Cumulative
search
filter
telemetry
looks
right
"
)
;
cumulativeSearchesHistogram
.
clear
(
)
;
cumulativeFilterCountHistogram
.
clear
(
)
;
await
withSidebarTree
(
"
history
"
async
function
(
)
{
let
sidebar
=
window
.
SidebarUI
.
browser
;
let
tree
=
sidebar
.
contentDocument
.
getElementById
(
"
historyTree
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
tree
.
view
.
nodeForTreeIndex
(
firstNodeIndex
)
)
;
info
(
"
Sidebar
was
opened
and
populated
"
)
;
sidebar
.
contentDocument
.
getElementById
(
"
byday
"
)
.
doCommand
(
)
;
info
(
"
First
search
filter
applied
"
)
;
sidebar
.
contentDocument
.
getElementById
(
"
bylastvisited
"
)
.
doCommand
(
)
;
info
(
"
Second
search
filter
applied
"
)
;
sidebar
.
contentDocument
.
getElementById
(
"
byday
"
)
.
doCommand
(
)
;
info
(
"
Third
search
filter
applied
"
)
;
let
searchBox
=
sidebar
.
contentDocument
.
getElementById
(
"
search
-
box
"
)
;
searchBox
.
value
=
"
sidebar
.
mozilla
"
;
searchBox
.
doCommand
(
)
;
tree
.
selectNode
(
tree
.
view
.
nodeForTreeIndex
(
firstNodeIndex
)
)
;
synthesizeClickOnSelectedTreeCell
(
tree
{
button
:
1
}
)
;
}
)
;
TelemetryTestUtils
.
assertHistogram
(
cumulativeSearchesHistogram
1
1
)
;
TelemetryTestUtils
.
assertHistogram
(
cumulativeFilterCountHistogram
3
1
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
cumulativeSearchesHistogram
.
clear
(
)
;
cumulativeFilterCountHistogram
.
clear
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
