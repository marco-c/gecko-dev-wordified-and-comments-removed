var
EventUtils
=
{
}
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
add_task
(
async
function
test
(
)
{
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
ok
(
toolbar
"
PersonalToolbar
should
not
be
null
"
)
;
if
(
toolbar
.
collapsed
)
{
await
promiseSetToolbarVisibility
(
toolbar
true
)
;
registerCleanupFunction
(
function
(
)
{
return
promiseSetToolbarVisibility
(
toolbar
false
)
;
}
)
;
}
let
placesItems
=
document
.
getElementById
(
"
PlacesToolbarItems
"
)
;
ok
(
placesItems
"
PlacesToolbarItems
should
not
be
null
"
)
;
ok
(
placesItems
.
localName
=
=
"
scrollbox
"
"
PlacesToolbarItems
should
not
be
null
"
)
;
let
simulateDragDrop
=
async
function
(
aEffect
aMimeType
)
{
const
url
=
"
http
:
/
/
www
.
mozilla
.
org
/
D1995729
-
A152
-
4e30
-
8329
-
469B01F30AA7
"
;
let
promiseItemAddedNotification
=
PlacesTestUtils
.
waitForNotification
(
"
bookmark
-
added
"
events
=
>
events
.
some
(
(
{
url
:
eventUrl
}
)
=
>
eventUrl
=
=
url
)
)
;
EventUtils
.
synthesizeDrop
(
toolbar
placesItems
[
[
{
type
:
aMimeType
data
:
url
}
]
]
aEffect
window
)
;
await
promiseItemAddedNotification
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
)
;
Assert
.
ok
(
bookmark
"
There
should
be
exactly
one
bookmark
"
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
.
guid
)
;
Assert
.
equal
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
)
null
"
URI
should
be
removed
"
)
;
}
;
let
simulateDragDropMultiple
=
async
function
(
aEffect
aMimeType
)
{
const
urls
=
[
"
http
:
/
/
www
.
mozilla
.
org
/
C54263C6
-
A484
-
46CF
-
8E2B
-
FE131586348A
"
"
http
:
/
/
www
.
mozilla
.
org
/
71381257
-
61E6
-
4376
-
AF7C
-
BF3C5FD8870D
"
"
http
:
/
/
www
.
mozilla
.
org
/
091A88BD
-
5743
-
4C16
-
A005
-
3D2EA3A3B71E
"
]
;
let
data
;
if
(
aMimeType
=
=
"
text
/
x
-
moz
-
url
"
)
{
data
=
urls
.
map
(
spec
=
>
spec
+
"
\
n
"
+
spec
)
.
join
(
"
\
n
"
)
;
}
else
{
data
=
urls
.
join
(
"
\
n
"
)
;
}
let
promiseItemAddedNotification
=
PlacesTestUtils
.
waitForNotification
(
"
bookmark
-
added
"
events
=
>
events
.
some
(
(
{
url
}
)
=
>
url
=
=
urls
[
2
]
)
)
;
EventUtils
.
synthesizeDrop
(
toolbar
placesItems
[
[
{
type
:
aMimeType
data
}
]
]
aEffect
window
)
;
await
promiseItemAddedNotification
;
for
(
let
url
of
urls
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
)
;
Assert
.
equal
(
typeof
bookmark
"
object
"
"
There
should
be
exactly
one
bookmark
"
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
.
guid
)
;
Assert
.
equal
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
)
null
"
URI
should
be
removed
"
)
;
}
}
;
let
mimeTypes
=
[
"
text
/
plain
"
"
text
/
x
-
moz
-
url
"
]
;
let
effects
=
[
"
move
"
"
copy
"
"
link
"
]
;
for
(
let
effect
of
effects
)
{
for
(
let
mimeType
of
mimeTypes
)
{
await
simulateDragDrop
(
effect
mimeType
)
;
await
simulateDragDropMultiple
(
effect
mimeType
)
;
}
}
}
)
;
