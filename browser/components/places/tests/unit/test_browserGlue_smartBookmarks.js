const
PREF_SMART_BOOKMARKS_VERSION
=
"
browser
.
places
.
smartBookmarksVersion
"
;
const
PREF_AUTO_EXPORT_HTML
=
"
browser
.
bookmarks
.
autoExportHTML
"
;
const
PREF_IMPORT_BOOKMARKS_HTML
=
"
browser
.
places
.
importBookmarksHTML
"
;
const
PREF_RESTORE_DEFAULT_BOOKMARKS
=
"
browser
.
bookmarks
.
restore_default_bookmarks
"
;
function
run_test
(
)
{
remove_bookmarks_html
(
)
;
remove_all_JSON_backups
(
)
;
run_next_test
(
)
;
}
do_register_cleanup
(
(
)
=
>
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
)
;
function
countFolderChildren
(
aFolderItemId
)
{
let
rootNode
=
PlacesUtils
.
getFolderContents
(
aFolderItemId
)
.
root
;
let
cc
=
rootNode
.
childCount
;
for
(
let
i
=
0
;
i
<
cc
;
i
+
+
)
{
let
node
=
rootNode
.
getChild
(
i
)
;
let
title
=
PlacesUtils
.
nodeIsSeparator
(
node
)
?
"
-
-
-
"
:
node
.
title
;
print
(
"
Found
child
(
"
+
i
+
"
)
:
"
+
title
)
;
}
rootNode
.
containerOpen
=
false
;
return
cc
;
}
add_task
(
async
function
setup
(
)
{
Cc
[
"
mozilla
.
org
/
browser
/
browserglue
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
let
promiseComplete
=
promiseTopicObserved
(
"
places
-
browser
-
init
-
complete
"
)
;
Assert
.
equal
(
PlacesUtils
.
history
.
databaseStatus
PlacesUtils
.
history
.
DATABASE_STATUS_CREATE
)
;
await
promiseComplete
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
PREF_AUTO_EXPORT_HTML
)
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
PREF_RESTORE_DEFAULT_BOOKMARKS
)
)
;
Assert
.
throws
(
(
)
=
>
Services
.
prefs
.
getBoolPref
(
PREF_IMPORT_BOOKMARKS_HTML
)
)
;
}
)
;
add_task
(
async
function
test_version_0
(
)
{
do_print
(
"
All
smart
bookmarks
are
created
if
smart
bookmarks
version
is
0
.
"
)
;
Assert
.
ok
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
)
;
Assert
.
ok
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
0
}
)
)
;
Services
.
prefs
.
setIntPref
(
PREF_SMART_BOOKMARKS_VERSION
0
)
;
await
rebuildSmartBookmarks
(
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
PREF_SMART_BOOKMARKS_VERSION
)
SMART_BOOKMARKS_VERSION
)
;
}
)
;
add_task
(
async
function
test_version_change
(
)
{
do_print
(
"
An
existing
smart
bookmark
is
replaced
when
version
changes
.
"
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
;
await
checkItemHasAnnotation
(
bm
.
guid
SMART_BOOKMARKS_ANNO
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
:
bm
.
guid
title
:
"
new
title
"
}
)
;
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
guid
:
bm
.
guid
}
)
;
Assert
.
equal
(
bm
.
title
"
new
title
"
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
Services
.
prefs
.
setIntPref
(
PREF_SMART_BOOKMARKS_VERSION
1
)
;
await
rebuildSmartBookmarks
(
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
;
await
checkItemHasAnnotation
(
bm
.
guid
SMART_BOOKMARKS_ANNO
)
;
Assert
.
notEqual
(
bm
.
title
"
new
title
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
PREF_SMART_BOOKMARKS_VERSION
)
SMART_BOOKMARKS_VERSION
)
;
}
)
;
add_task
(
async
function
test_version_change_pos
(
)
{
do_print
(
"
bookmarks
position
is
retained
when
version
changes
.
"
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
0
}
)
;
await
checkItemHasAnnotation
(
bm
.
guid
SMART_BOOKMARKS_ANNO
)
;
let
firstItemTitle
=
bm
.
title
;
Services
.
prefs
.
setIntPref
(
PREF_SMART_BOOKMARKS_VERSION
1
)
;
await
rebuildSmartBookmarks
(
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
0
}
)
;
await
checkItemHasAnnotation
(
bm
.
guid
SMART_BOOKMARKS_ANNO
)
;
Assert
.
equal
(
bm
.
title
firstItemTitle
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
PREF_SMART_BOOKMARKS_VERSION
)
SMART_BOOKMARKS_VERSION
)
;
}
)
;
add_task
(
async
function
test_version_change_pos_moved
(
)
{
do_print
(
"
moved
bookmarks
position
is
retained
when
version
changes
.
"
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
let
bm1
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
0
}
)
;
await
checkItemHasAnnotation
(
bm1
.
guid
SMART_BOOKMARKS_ANNO
)
;
let
firstItemTitle
=
bm1
.
title
;
await
PlacesUtils
.
bookmarks
.
update
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
guid
:
bm1
.
guid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
}
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
}
)
;
Assert
.
equal
(
bm
.
guid
bm1
.
guid
)
;
Services
.
prefs
.
setIntPref
(
PREF_SMART_BOOKMARKS_VERSION
1
)
;
await
rebuildSmartBookmarks
(
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
bm1
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
}
)
;
await
checkItemHasAnnotation
(
bm1
.
guid
SMART_BOOKMARKS_ANNO
)
;
Assert
.
equal
(
bm1
.
title
firstItemTitle
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
guid
:
bm1
.
guid
index
:
1
}
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
PREF_SMART_BOOKMARKS_VERSION
)
SMART_BOOKMARKS_VERSION
)
;
}
)
;
add_task
(
async
function
test_recreation
(
)
{
do_print
(
"
An
explicitly
removed
smart
bookmark
should
not
be
recreated
.
"
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
.
guid
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
Services
.
prefs
.
setIntPref
(
PREF_SMART_BOOKMARKS_VERSION
1
)
;
await
rebuildSmartBookmarks
(
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
PREF_SMART_BOOKMARKS_VERSION
)
SMART_BOOKMARKS_VERSION
)
;
}
)
;
add_task
(
async
function
test_recreation_version_0
(
)
{
do_print
(
"
Even
if
a
smart
bookmark
has
been
removed
recreate
it
if
version
is
0
.
"
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
Services
.
prefs
.
setIntPref
(
PREF_SMART_BOOKMARKS_VERSION
0
)
;
await
rebuildSmartBookmarks
(
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
toolbarFolderId
)
SMART_BOOKMARKS_ON_TOOLBAR
+
DEFAULT_BOOKMARKS_ON_TOOLBAR
)
;
Assert
.
equal
(
countFolderChildren
(
PlacesUtils
.
bookmarksMenuFolderId
)
SMART_BOOKMARKS_ON_MENU
+
DEFAULT_BOOKMARKS_ON_MENU
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
PREF_SMART_BOOKMARKS_VERSION
)
SMART_BOOKMARKS_VERSION
)
;
}
)
;
