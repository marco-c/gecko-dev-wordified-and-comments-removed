const
PREF_IMPORT_BOOKMARKS_HTML
=
"
browser
.
places
.
importBookmarksHTML
"
;
const
PREF_RESTORE_DEFAULT_BOOKMARKS
=
"
browser
.
bookmarks
.
restore_default_bookmarks
"
;
const
PREF_AUTO_EXPORT_HTML
=
"
browser
.
bookmarks
.
autoExportHTML
"
;
Cc
[
"
mozilla
.
org
/
browser
/
browserglue
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
add_task
(
async
function
setup
(
)
{
create_bookmarks_html
(
"
bookmarks
.
glue
.
html
"
)
;
remove_all_JSON_backups
(
)
;
create_JSON_backup
(
"
bookmarks
.
glue
.
json
"
)
;
registerCleanupFunction
(
function
(
)
{
remove_bookmarks_html
(
)
;
remove_all_JSON_backups
(
)
;
return
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
function
simulatePlacesInit
(
)
{
info
(
"
Simulate
Places
init
"
)
;
let
{
PlacesBrowserStartup
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
browser
/
components
/
places
/
PlacesBrowserStartup
.
sys
.
mjs
"
)
;
PlacesBrowserStartup
.
_placesInitialized
=
false
;
PlacesBrowserStartup
.
initPlaces
(
)
;
return
TestUtils
.
topicObserved
(
"
places
-
browser
-
init
-
complete
"
)
;
}
add_task
(
async
function
test_checkPreferences
(
)
{
let
promiseComplete
=
promiseTopicObserved
(
"
places
-
browser
-
init
-
complete
"
)
;
Assert
.
equal
(
PlacesUtils
.
history
.
databaseStatus
PlacesUtils
.
history
.
DATABASE_STATUS_CREATE
)
;
await
promiseComplete
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
PREF_AUTO_EXPORT_HTML
)
)
;
Assert
.
throws
(
(
)
=
>
Services
.
prefs
.
getBoolPref
(
PREF_IMPORT_BOOKMARKS_HTML
)
/
NS_ERROR_UNEXPECTED
/
)
;
Assert
.
throws
(
(
)
=
>
Services
.
prefs
.
getBoolPref
(
PREF_RESTORE_DEFAULT_BOOKMARKS
)
/
NS_ERROR_UNEXPECTED
/
)
;
}
)
;
add_task
(
async
function
test_import
(
)
{
info
(
"
Import
from
bookmarks
.
html
if
importBookmarksHTML
is
true
.
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
Assert
.
ok
(
!
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
)
)
;
Services
.
prefs
.
setBoolPref
(
PREF_IMPORT_BOOKMARKS_HTML
true
)
;
await
simulatePlacesInit
(
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
;
Assert
.
equal
(
bm
.
title
"
example
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
PREF_IMPORT_BOOKMARKS_HTML
)
)
;
}
)
;
add_task
(
async
function
test_restore
(
)
{
info
(
"
restore
from
default
bookmarks
.
html
if
"
+
"
restore_default_bookmarks
is
true
.
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
Assert
.
ok
(
!
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
)
)
;
Services
.
prefs
.
setBoolPref
(
PREF_RESTORE_DEFAULT_BOOKMARKS
true
)
;
await
simulatePlacesInit
(
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
0
}
)
;
let
chanTitle
=
AppConstants
.
NIGHTLY_BUILD
?
"
Firefox
Nightly
Resources
"
:
"
Mozilla
Firefox
"
;
Assert
.
equal
(
bm
.
title
chanTitle
"
Default
bookmarks
folder
restored
.
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
PREF_RESTORE_DEFAULT_BOOKMARKS
)
)
;
}
)
;
add_task
(
async
function
test_restore_import
(
)
{
info
(
"
setting
both
importBookmarksHTML
and
"
+
"
restore_default_bookmarks
should
restore
defaults
.
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
Assert
.
ok
(
!
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
)
)
;
Services
.
prefs
.
setBoolPref
(
PREF_IMPORT_BOOKMARKS_HTML
true
)
;
Services
.
prefs
.
setBoolPref
(
PREF_RESTORE_DEFAULT_BOOKMARKS
true
)
;
await
simulatePlacesInit
(
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
0
}
)
;
let
chanTitle
=
AppConstants
.
NIGHTLY_BUILD
?
"
Firefox
Nightly
Resources
"
:
"
Mozilla
Firefox
"
;
Assert
.
equal
(
bm
.
title
chanTitle
"
Default
bookmarks
folder
restored
.
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
PREF_RESTORE_DEFAULT_BOOKMARKS
)
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
PREF_IMPORT_BOOKMARKS_HTML
)
)
;
}
)
;
