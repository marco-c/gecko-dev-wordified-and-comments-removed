const
SMART_BOOKMARKS_PREF
=
"
browser
.
places
.
smartBookmarksVersion
"
;
var
gluesvc
=
Cc
[
"
mozilla
.
org
/
browser
/
browserglue
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
;
gluesvc
.
observe
(
null
"
initial
-
migration
-
will
-
import
-
default
-
bookmarks
"
"
"
)
;
add_task
(
async
function
smart_bookmarks_disabled
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
-
1
)
;
await
rebuildSmartBookmarks
(
)
;
let
smartBookmarkItemIds
=
PlacesUtils
.
annotations
.
getItemsWithAnnotation
(
SMART_BOOKMARKS_ANNO
)
;
Assert
.
equal
(
smartBookmarkItemIds
.
length
0
)
;
do_print
(
"
check
that
pref
has
not
been
bumped
up
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
)
-
1
)
;
}
)
;
add_task
(
async
function
create_smart_bookmarks
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
0
)
;
await
rebuildSmartBookmarks
(
)
;
let
smartBookmarkItemIds
=
PlacesUtils
.
annotations
.
getItemsWithAnnotation
(
SMART_BOOKMARKS_ANNO
)
;
Assert
.
notEqual
(
smartBookmarkItemIds
.
length
0
)
;
do_print
(
"
check
that
pref
has
been
bumped
up
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
)
>
0
)
;
}
)
;
add_task
(
async
function
remove_smart_bookmark_and_restore
(
)
{
let
smartBookmarkItemIds
=
PlacesUtils
.
annotations
.
getItemsWithAnnotation
(
SMART_BOOKMARKS_ANNO
)
;
let
smartBookmarksCount
=
smartBookmarkItemIds
.
length
;
do_print
(
"
remove
one
smart
bookmark
and
restore
"
)
;
let
guid
=
await
PlacesUtils
.
promiseItemGuid
(
smartBookmarkItemIds
[
0
]
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
guid
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
0
)
;
await
rebuildSmartBookmarks
(
)
;
smartBookmarkItemIds
=
PlacesUtils
.
annotations
.
getItemsWithAnnotation
(
SMART_BOOKMARKS_ANNO
)
;
Assert
.
equal
(
smartBookmarkItemIds
.
length
smartBookmarksCount
)
;
do_print
(
"
check
that
pref
has
been
bumped
up
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
)
>
0
)
;
}
)
;
add_task
(
async
function
move_smart_bookmark_rename_and_restore
(
)
{
let
smartBookmarkItemIds
=
PlacesUtils
.
annotations
.
getItemsWithAnnotation
(
SMART_BOOKMARKS_ANNO
)
;
let
smartBookmarksCount
=
smartBookmarkItemIds
.
length
;
do_print
(
"
smart
bookmark
should
be
restored
in
place
"
)
;
let
guid
=
await
PlacesUtils
.
promiseItemGuid
(
smartBookmarkItemIds
[
0
]
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
let
oldTitle
=
bm
.
title
;
let
subfolder
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
bm
.
parentGuid
title
:
"
test
"
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
type
:
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
}
)
;
await
PlacesUtils
.
bookmarks
.
update
(
{
guid
parentGuid
:
subfolder
.
guid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
title
:
"
new
title
"
}
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
0
)
;
await
rebuildSmartBookmarks
(
)
;
smartBookmarkItemIds
=
PlacesUtils
.
annotations
.
getItemsWithAnnotation
(
SMART_BOOKMARKS_ANNO
)
;
Assert
.
equal
(
smartBookmarkItemIds
.
length
smartBookmarksCount
)
;
guid
=
await
PlacesUtils
.
promiseItemGuid
(
smartBookmarkItemIds
[
0
]
)
;
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
Assert
.
equal
(
bm
.
parentGuid
subfolder
.
guid
)
;
Assert
.
equal
(
bm
.
title
oldTitle
)
;
do_print
(
"
check
that
pref
has
been
bumped
up
"
)
;
Assert
.
ok
(
Services
.
prefs
.
getIntPref
(
"
browser
.
places
.
smartBookmarksVersion
"
)
>
0
)
;
}
)
;
