function
run_test
(
)
{
create_bookmarks_html
(
"
bookmarks
.
glue
.
html
"
)
;
clearDB
(
)
;
run_next_test
(
)
;
}
registerCleanupFunction
(
remove_bookmarks_html
)
;
add_task
(
async
function
test_migrate_bookmarks
(
)
{
Assert
.
equal
(
PlacesUtils
.
history
.
databaseStatus
PlacesUtils
.
history
.
DATABASE_STATUS_CREATE
)
;
let
{
PlacesBrowserStartup
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
browser
/
components
/
places
/
PlacesBrowserStartup
.
sys
.
mjs
"
)
;
PlacesBrowserStartup
.
willImportDefaultBookmarks
(
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
PlacesUtils
.
bookmarks
.
DEFAULT_INDEX
type
:
PlacesUtils
.
bookmarks
.
TYPE_BOOKMARK
url
:
"
http
:
/
/
mozilla
.
org
/
"
title
:
"
migrated
"
}
)
;
let
promise
=
promiseTopicObserved
(
"
places
-
browser
-
init
-
complete
"
)
;
PlacesBrowserStartup
.
didImportDefaultBookmarks
(
)
;
await
promise
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
0
}
)
;
Assert
.
equal
(
bm
.
title
"
migrated
"
)
;
Assert
.
ok
(
!
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
index
:
1
}
)
)
)
;
Assert
.
ok
(
!
(
await
PlacesUtils
.
bookmarks
.
fetch
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
index
:
0
}
)
)
)
;
}
)
;
