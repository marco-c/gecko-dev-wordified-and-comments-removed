const
TEST_URL1
=
"
https
:
/
/
example
.
com
/
"
;
const
TEST_URL2
=
"
https
:
/
/
example
.
com
/
12345
"
;
const
TEST_URL3
=
"
https
:
/
/
example
.
com
/
14235
"
;
const
TEST_URL4
=
"
https
:
/
/
example
.
com
/
14345
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SnapshotSelector
:
"
resource
:
/
/
/
modules
/
SnapshotSelector
.
jsm
"
}
)
;
add_task
(
async
function
setup
(
)
{
let
now
=
Date
.
now
(
)
;
await
addInteractions
(
[
{
url
:
TEST_URL1
created_at
:
now
-
2000
}
{
url
:
TEST_URL2
created_at
:
now
-
1000
}
{
url
:
TEST_URL3
created_at
:
now
-
3000
}
]
)
;
let
selector
=
new
SnapshotSelector
(
2
)
;
let
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
selector
.
rebuild
(
)
;
let
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
]
)
;
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL1
}
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL1
}
]
)
;
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
selector
.
setUrl
(
TEST_URL1
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
]
)
;
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
selector
.
setUrl
(
TEST_URL2
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL1
}
]
)
;
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL2
}
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL1
}
]
)
;
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL3
}
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL1
}
{
url
:
TEST_URL3
}
]
)
;
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
selector
.
setUrl
(
TEST_URL3
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL2
}
{
url
:
TEST_URL1
}
]
)
;
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
selector
.
setUrl
(
TEST_URL4
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL2
}
{
url
:
TEST_URL1
}
]
)
;
await
reset
(
)
;
}
)
;
