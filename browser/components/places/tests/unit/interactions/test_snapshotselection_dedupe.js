let
now
=
Date
.
now
(
)
;
const
TEST_DATA
=
[
{
url
:
"
https
:
/
/
example
.
com
/
1
?
foo
=
135246
"
title
:
"
Example1
"
created_at
:
now
-
2000
}
{
url
:
"
https
:
/
/
example
.
com
/
1
"
title
:
"
Example1
"
created_at
:
now
-
1000
}
{
url
:
"
https
:
/
/
example
.
com
/
1
?
bar
=
142536
"
title
:
"
Example1
"
created_at
:
now
-
3000
}
{
url
:
"
https
:
/
/
example
.
com
/
foo
"
title
:
"
Other
"
created_at
:
now
-
40000
}
{
url
:
"
https
:
/
/
example
.
com
/
2
?
foo
=
531245
"
title
:
"
Example2
"
created_at
:
now
-
10000
pinned
:
true
}
{
url
:
"
https
:
/
/
example
.
com
/
2
?
foo
=
341256
"
title
:
"
Example2
"
created_at
:
now
-
1000
}
{
url
:
"
https
:
/
/
example
.
com
/
relevant
"
title
:
"
Relevant
"
created_at
:
now
-
50000
}
]
;
add_setup
(
async
(
)
=
>
{
Services
.
prefs
.
setIntPref
(
"
browser
.
places
.
snapshots
.
threshold
"
-
10
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
pinebuild
.
snapshots
.
relevancy
.
enabled
"
false
)
;
await
addInteractions
(
TEST_DATA
)
;
for
(
let
{
url
pinned
}
of
TEST_DATA
)
{
await
Snapshots
.
add
(
{
url
userPersisted
:
pinned
?
Snapshots
.
USER_PERSISTED
.
PINNED
:
Snapshots
.
USER_PERSISTED
.
NO
}
)
;
}
}
)
;
add_task
(
async
function
test_dedupe
(
)
{
let
selector
=
new
SnapshotSelector
(
{
count
:
5
filterAdult
:
false
getCurrentSessionUrls
:
(
)
=
>
new
Set
(
)
}
)
;
let
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
selector
.
rebuild
(
)
;
let
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
"
https
:
/
/
example
.
com
/
1
"
title
:
"
Example1
"
}
{
url
:
"
https
:
/
/
example
.
com
/
2
?
foo
=
341256
"
title
:
"
Example2
"
}
{
url
:
"
https
:
/
/
example
.
com
/
foo
"
title
:
"
Other
"
}
{
url
:
"
https
:
/
/
example
.
com
/
relevant
"
title
:
"
Relevant
"
}
]
)
;
}
)
;
add_task
(
async
function
test_relevancy_dedupe
(
)
{
let
selector
=
new
SnapshotSelector
(
{
count
:
10
filterAdult
:
false
sourceWeights
:
{
CommonReferrer
:
0
Overlapping
:
3
}
getCurrentSessionUrls
:
(
)
=
>
new
Set
(
)
}
)
;
selector
.
setUrl
(
"
https
:
/
/
example
.
com
/
relevant
"
)
;
let
snapshotPromise
=
selector
.
once
(
"
snapshots
-
updated
"
)
;
selector
.
rebuild
(
)
;
let
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
"
https
:
/
/
example
.
com
/
2
?
foo
=
531245
"
title
:
"
Example2
"
userPersisted
:
Snapshots
.
USER_PERSISTED
.
PINNED
}
{
url
:
"
https
:
/
/
example
.
com
/
1
"
title
:
"
Example1
"
}
{
url
:
"
https
:
/
/
example
.
com
/
foo
"
title
:
"
Other
"
}
]
)
;
}
)
;
