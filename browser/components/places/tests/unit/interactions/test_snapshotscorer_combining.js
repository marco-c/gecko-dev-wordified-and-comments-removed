const
TEST_URL1
=
"
https
:
/
/
example
.
com
/
"
;
const
TEST_URL2
=
"
https
:
/
/
invalid
.
com
/
"
;
add_task
(
async
function
setup
(
)
{
let
now
=
Date
.
now
(
)
;
SnapshotScorer
.
overrideCurrentTimeForTests
(
now
)
;
await
addInteractions
(
[
{
url
:
TEST_URL1
created_at
:
now
}
]
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL1
userPersisted
:
Snapshots
.
USER_PERSISTED
.
MANUAL
}
)
;
await
addInteractions
(
[
{
url
:
TEST_URL2
created_at
:
now
}
]
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL2
userPersisted
:
Snapshots
.
USER_PERSISTED
.
MANUAL
}
)
;
}
)
;
add_task
(
async
function
test_combining_throw_away_first
(
)
{
let
snapshot1a
=
await
Snapshots
.
get
(
TEST_URL1
)
;
let
snapshot1b
=
await
Snapshots
.
get
(
TEST_URL1
)
;
let
snapshot2
=
await
Snapshots
.
get
(
TEST_URL2
)
;
snapshot1a
.
overlappingVisitScore
=
0
.
5
;
snapshot2
.
overlappingVisitScore
=
0
.
5
;
snapshot1b
.
overlappingVisitScore
=
1
.
0
;
let
combined
=
SnapshotScorer
.
combineAndScore
(
{
getCurrentSessionUrls
:
(
)
=
>
new
Set
(
[
TEST_URL1
TEST_URL2
]
)
}
[
snapshot1a
]
[
snapshot1b
snapshot2
]
)
;
assertSnapshotScores
(
combined
[
{
url
:
TEST_URL1
score
:
6
}
{
url
:
TEST_URL2
score
:
4
.
5
}
]
)
;
}
)
;
add_task
(
async
function
test_combining_throw_away_second_and_sort
(
)
{
let
snapshot1
=
await
Snapshots
.
get
(
TEST_URL1
)
;
let
snapshot2a
=
await
Snapshots
.
get
(
TEST_URL2
)
;
let
snapshot2b
=
await
Snapshots
.
get
(
TEST_URL2
)
;
snapshot1
.
overlappingVisitScore
=
0
.
5
;
snapshot2a
.
overlappingVisitScore
=
1
.
0
;
snapshot2b
.
overlappingVisitScore
=
0
.
5
;
let
combined
=
SnapshotScorer
.
combineAndScore
(
{
getCurrentSessionUrls
:
(
)
=
>
new
Set
(
[
TEST_URL1
TEST_URL2
]
)
}
[
snapshot2a
]
[
snapshot1
snapshot2b
]
)
;
assertSnapshotScores
(
combined
[
{
url
:
TEST_URL2
score
:
6
}
{
url
:
TEST_URL1
score
:
4
.
5
}
]
)
;
}
)
;
