const
TEST_URL1
=
"
https
:
/
/
example
.
com
/
"
;
const
TEST_URL2
=
"
https
:
/
/
invalid
.
com
/
"
;
const
TEST_URL3
=
"
https
:
/
/
foo
.
com
/
"
;
const
TEST_URL4
=
"
https
:
/
/
bar
.
com
/
"
;
const
TEST_URL5
=
"
https
:
/
/
something
.
com
/
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
FilterAdult
:
"
resource
:
/
/
activity
-
stream
/
lib
/
FilterAdult
.
jsm
"
}
)
;
async
function
addSnapshotAndFilter
(
url
)
{
await
PlacesTestUtils
.
addVisits
(
url
)
;
await
Snapshots
.
add
(
{
url
userPersisted
:
true
}
)
;
FilterAdult
.
addDomainToList
(
url
)
;
}
add_task
(
async
function
setup
(
)
{
let
now
=
Date
.
now
(
)
;
await
addInteractions
(
[
{
url
:
TEST_URL1
created_at
:
now
-
2000
}
]
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL1
}
)
;
await
addSnapshotAndFilter
(
TEST_URL2
)
;
}
)
;
add_task
(
async
function
test_interactions_adult_basic
(
)
{
let
anySelector
=
new
SnapshotSelector
(
2
false
)
;
let
adultFilterSelector
=
new
SnapshotSelector
(
2
true
)
;
let
snapshotPromise
=
anySelector
.
once
(
"
snapshots
-
updated
"
)
;
anySelector
.
rebuild
(
)
;
let
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL2
userPersisted
:
true
}
{
url
:
TEST_URL1
}
]
)
;
snapshotPromise
=
adultFilterSelector
.
once
(
"
snapshots
-
updated
"
)
;
adultFilterSelector
.
rebuild
(
)
;
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL1
}
]
)
;
anySelector
.
destroy
(
)
;
adultFilterSelector
.
destroy
(
)
;
}
)
;
add_task
(
async
function
test_interactions_adult_filter_multiple
(
)
{
await
addSnapshotAndFilter
(
TEST_URL3
)
;
await
addSnapshotAndFilter
(
TEST_URL4
)
;
await
addInteractions
(
[
{
url
:
TEST_URL5
created_at
:
Date
.
now
(
)
-
2000
}
]
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL5
}
)
;
let
adultFilterSelector
=
new
SnapshotSelector
(
2
true
)
;
let
snapshotPromise
=
adultFilterSelector
.
once
(
"
snapshots
-
updated
"
)
;
adultFilterSelector
.
rebuild
(
)
;
let
snapshots
=
await
snapshotPromise
;
await
assertSnapshotList
(
snapshots
[
{
url
:
TEST_URL5
}
{
url
:
TEST_URL1
}
]
)
;
adultFilterSelector
.
destroy
(
)
;
}
)
;
