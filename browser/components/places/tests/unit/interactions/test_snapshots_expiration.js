XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
SNAPSHOT_EXPIRE_DAYS
"
"
browser
.
places
.
snapshots
.
expiration
.
days
"
210
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
SNAPSHOT_USERMANAGED_EXPIRE_DAYS
"
"
browser
.
places
.
snapshots
.
expiration
.
userManaged
.
days
"
420
)
;
const
now
=
Date
.
now
(
)
;
const
MS_PER_DAY
=
86400000
;
let
groupSerial
=
0
;
let
gSnapshots
=
[
{
url
:
"
https
:
/
/
example
.
com
/
1
"
userPersisted
:
Snapshots
.
USER_PERSISTED
.
MANUAL
created_at
:
now
-
(
1
+
SNAPSHOT_USERMANAGED_EXPIRE_DAYS
)
*
MS_PER_DAY
shouldExpire
:
true
}
{
url
:
"
https
:
/
/
example
.
com
/
2
"
userPersisted
:
Snapshots
.
USER_PERSISTED
.
MANUAL
created_at
:
now
-
(
1
+
SNAPSHOT_EXPIRE_DAYS
)
*
MS_PER_DAY
shouldExpire
:
false
}
{
url
:
"
https
:
/
/
example
.
com
/
3
"
created_at
:
now
-
(
1
+
SNAPSHOT_USERMANAGED_EXPIRE_DAYS
)
*
MS_PER_DAY
group
:
test
-
group
-
{
groupSerial
+
+
}
shouldExpire
:
true
}
{
url
:
"
https
:
/
/
example
.
com
/
4
"
created_at
:
now
-
(
1
+
SNAPSHOT_EXPIRE_DAYS
)
*
MS_PER_DAY
group
:
test
-
group
-
{
groupSerial
+
+
}
shouldExpire
:
false
}
{
url
:
"
https
:
/
/
example
.
com
/
5
"
created_at
:
now
-
(
1
+
SNAPSHOT_EXPIRE_DAYS
)
*
MS_PER_DAY
shouldExpire
:
true
}
{
url
:
"
https
:
/
/
example
.
com
/
6
"
created_at
:
now
-
MS_PER_DAY
shouldExpire
:
false
}
{
url
:
"
https
:
/
/
example
.
com
/
7
"
created_at
:
now
-
(
1
+
SNAPSHOT_USERMANAGED_EXPIRE_DAYS
)
*
MS_PER_DAY
tombstone
:
true
shouldExpire
:
false
}
]
;
add_task
(
async
function
setup
(
)
{
await
addInteractions
(
gSnapshots
)
;
for
(
let
snapshot
of
gSnapshots
)
{
await
Snapshots
.
add
(
snapshot
)
;
if
(
snapshot
.
group
)
{
await
SnapshotGroups
.
add
(
{
title
:
snapshot
.
group
builder
:
"
user
"
}
[
snapshot
.
url
]
)
;
}
if
(
snapshot
.
tombstone
)
{
await
Snapshots
.
delete
(
snapshot
.
url
)
;
}
}
Services
.
prefs
.
setBoolPref
(
"
browser
.
places
.
interactions
.
enabled
"
true
)
;
await
SnapshotMonitor
.
observe
(
null
"
test
-
trigger
-
builders
"
)
;
let
groups
=
await
SnapshotGroups
.
query
(
{
skipMinimum
:
true
}
)
;
Assert
.
equal
(
groups
.
length
1
+
groupSerial
"
Should
return
the
expected
number
of
snapshot
groups
"
)
;
assertSnapshotGroup
(
groups
[
0
]
{
title
:
"
example
"
builder
:
"
domain
"
builderMetadata
:
{
domain
:
"
example
.
com
"
title
:
"
example
"
}
snapshotCount
:
gSnapshots
.
filter
(
s
=
>
!
s
.
tombstone
)
.
length
}
)
;
}
)
;
add_task
(
async
function
test_idle_expiration
(
)
{
await
SnapshotMonitor
.
observe
(
{
onIdle
:
true
}
"
test
-
expiration
"
)
;
let
remaining
=
await
Snapshots
.
query
(
{
includeTombstones
:
true
}
)
;
for
(
let
snapshot
of
gSnapshots
)
{
let
index
=
remaining
.
findIndex
(
s
=
>
s
.
url
=
=
snapshot
.
url
)
;
if
(
snapshot
.
shouldExpire
)
{
Assert
.
equal
(
index
-
1
{
snapshot
.
url
}
should
have
been
removed
)
;
}
else
{
Assert
.
greater
(
index
-
1
{
snapshot
.
url
}
should
not
have
been
removed
)
;
remaining
.
splice
(
index
1
)
;
}
}
Assert
.
ok
(
!
remaining
.
length
All
the
snapshots
should
be
processed
:
{
JSON
.
stringify
(
remaining
)
}
)
;
}
)
;
add_task
(
async
function
test_active_limited_expiration
(
)
{
let
expiredSnapshots
=
[
{
url
:
"
https
:
/
/
example
.
com
/
8
"
created_at
:
now
-
(
SNAPSHOT_USERMANAGED_EXPIRE_DAYS
+
1
)
*
86400000
}
{
url
:
"
https
:
/
/
example
.
com
/
9
"
created_at
:
now
-
(
SNAPSHOT_USERMANAGED_EXPIRE_DAYS
+
1
)
*
86400000
}
]
;
for
(
let
snapshot
of
expiredSnapshots
)
{
await
addInteractions
(
[
snapshot
]
)
;
await
Snapshots
.
add
(
snapshot
)
;
}
let
snapshots
=
await
Snapshots
.
query
(
{
includeTombstones
:
true
}
)
;
info
(
"
expire
again
without
setting
lastExpirationTime
should
be
a
no
-
op
"
)
;
let
expirationChunkSize
=
1
;
await
SnapshotMonitor
.
observe
(
{
expirationChunkSize
}
"
test
-
expiration
"
)
;
Assert
.
equal
(
(
await
Snapshots
.
query
(
{
includeTombstones
:
true
}
)
)
.
length
snapshots
.
length
"
No
snapshot
should
have
been
expired
.
"
)
;
info
(
"
expire
again
for
real
"
)
;
await
SnapshotMonitor
.
observe
(
{
expirationChunkSize
lastExpirationTime
:
now
-
24
*
86400000
}
"
test
-
expiration
"
)
;
let
remaining
=
await
Snapshots
.
query
(
{
includeTombstones
:
true
}
)
;
let
count
=
0
;
for
(
let
snapshot
of
expiredSnapshots
)
{
let
index
=
remaining
.
findIndex
(
s
=
>
s
.
url
=
=
snapshot
.
url
)
;
if
(
index
=
=
-
1
)
{
count
+
+
;
}
}
Assert
.
equal
(
count
expiredSnapshots
.
length
-
expirationChunkSize
"
Check
the
expected
number
of
snapshots
have
been
expired
"
)
;
}
)
;
