XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PageDataSchema
:
"
resource
:
/
/
/
modules
/
pagedata
/
PageDataSchema
.
jsm
"
PageDataService
:
"
resource
:
/
/
/
modules
/
pagedata
/
PageDataService
.
jsm
"
}
)
;
async
function
reset_interactions_snapshots
(
)
{
await
Interactions
.
reset
(
)
;
await
Snapshots
.
reset
(
)
;
}
async
function
create_interaction_and_snapshot
(
{
url
=
"
https
:
/
/
example
.
com
/
"
referrer
=
"
"
}
=
{
}
)
{
await
addInteractions
(
[
{
url
referrer
}
]
)
;
await
Snapshots
.
add
(
{
url
}
)
;
}
add_task
(
async
function
test_query_no_referrer
(
)
{
await
reset_interactions_snapshots
(
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
}
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
}
)
;
await
assertCommonReferrerSnapshots
(
[
]
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
}
)
;
await
assertCommonReferrerSnapshots
(
[
]
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
}
)
;
}
)
;
add_task
(
async
function
test_query_no_common_referrer
(
)
{
await
reset_interactions_snapshots
(
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_search
"
}
{
url
:
"
https
:
/
/
example
.
com
/
"
}
]
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
}
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrer
:
"
https
:
/
/
example
.
com
"
}
)
;
await
assertCommonReferrerSnapshots
(
[
]
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
product_search
"
}
)
;
await
assertCommonReferrerSnapshots
(
[
]
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
"
}
)
;
}
)
;
add_task
(
async
function
test_query_common_referrer
(
)
{
await
reset_interactions_snapshots
(
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_search
"
}
]
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
}
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
}
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_c
"
}
)
;
let
context
=
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
product_search
"
}
;
await
assertCommonReferrerSnapshots
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
commonReferrerScoreEqualTo
:
1
.
0
}
]
context
)
;
context
=
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
product_search
"
}
;
await
assertCommonReferrerSnapshots
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
commonReferrerScoreEqualTo
:
1
.
0
}
]
context
)
;
context
=
{
url
:
"
https
:
/
/
example
.
com
/
product_c
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
product_search
"
}
;
await
assertCommonReferrerSnapshots
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
commonReferrerScoreEqualTo
:
1
.
0
}
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
commonReferrerScoreEqualTo
:
1
.
0
}
]
context
)
;
}
)
;
add_task
(
async
function
test_query_common_referrer_multiple_interaction
(
)
{
await
reset_interactions_snapshots
(
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_search
"
}
{
url
:
"
https
:
/
/
example
.
com
/
top_level_search
"
}
]
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
created_at
:
Date
.
now
(
)
}
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrer
:
"
https
:
/
/
example
.
com
/
top_level_search
"
created_at
:
Date
.
now
(
)
+
60000
}
]
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
}
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
}
]
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
}
)
;
let
context
=
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
product_search
"
}
;
await
assertCommonReferrerSnapshots
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
commonReferrerScoreEqualTo
:
1
.
0
}
]
context
)
;
context
=
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
top_level_search
"
}
;
await
assertCommonReferrerSnapshots
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
commonReferrerScoreEqualTo
:
1
.
0
}
]
context
)
;
context
=
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
different_path
"
}
;
await
assertCommonReferrerSnapshots
(
[
]
context
)
;
}
)
;
add_task
(
async
function
test_query_common_referrer_multiple_interactions_page_data
(
)
{
await
reset_interactions_snapshots
(
)
;
PageDataService
.
pageDataDiscovered
(
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
date
:
Date
.
now
(
)
siteName
:
"
Example
site
name
"
description
:
"
Example
site
description
"
data
:
{
[
PageDataSchema
.
DATA_TYPE
.
PRODUCT
]
:
{
price
:
{
value
:
276
currency
:
"
USD
"
}
}
}
}
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_search
"
}
]
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
created_at
:
Date
.
now
(
)
}
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
created_at
:
Date
.
now
(
)
+
60000
}
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
created_at
:
Date
.
now
(
)
+
120000
}
]
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_a
"
}
)
;
await
addInteractions
(
[
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrer
:
"
https
:
/
/
example
.
com
/
product_search
"
}
]
)
;
await
create_interaction_and_snapshot
(
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
}
)
;
let
context
=
{
url
:
"
https
:
/
/
example
.
com
/
product_b
"
referrerUrl
:
"
https
:
/
/
example
.
com
/
product_search
"
}
;
let
snapshot
=
await
Snapshots
.
queryCommonReferrer
(
context
.
url
context
.
referrerUrl
)
;
Assert
.
equal
(
snapshot
.
length
1
"
One
shapshot
should
be
found
"
)
;
Assert
.
equal
(
snapshot
[
0
]
.
url
"
https
:
/
/
example
.
com
/
product_a
"
"
Correct
snapshot
should
be
found
"
)
;
Assert
.
equal
(
snapshot
[
0
]
.
siteName
"
Example
site
name
"
"
Site
name
should
be
found
"
)
;
Assert
.
equal
(
snapshot
[
0
]
.
description
"
Example
site
description
"
"
Site
description
should
be
found
"
)
;
Assert
.
equal
(
snapshot
[
0
]
.
pageData
.
size
1
"
Should
have
1
item
of
page
data
.
"
)
;
Assert
.
deepEqual
(
snapshot
[
0
]
.
pageData
.
get
(
PageDataSchema
.
DATA_TYPE
.
PRODUCT
)
{
price
:
{
value
:
276
currency
:
"
USD
"
}
}
"
Should
have
the
right
price
.
"
)
;
}
)
;
