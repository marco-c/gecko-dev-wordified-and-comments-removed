const
TEST_URL1
=
"
https
:
/
/
example
.
com
/
"
;
const
TEST_URL2
=
"
https
:
/
/
example
.
com
/
12345
"
;
const
TEST_URL3
=
"
https
:
/
/
example
.
com
/
14235
"
;
add_task
(
async
function
maxViewTime
(
)
{
let
now
=
Date
.
now
(
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
places
.
interactions
.
snapshotCriteria
"
JSON
.
stringify
(
[
{
property
:
"
total_view_time
"
aggregator
:
"
max
"
cutoff
:
30000
}
]
)
)
;
await
assertUrlNotification
(
TOPIC_ADDED
[
TEST_URL1
TEST_URL3
]
(
)
=
>
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
40000
created_at
:
now
-
1000
}
{
url
:
TEST_URL2
totalViewTime
:
20000
created_at
:
now
-
2000
}
{
url
:
TEST_URL2
totalViewTime
:
20000
created_at
:
now
-
3000
}
{
url
:
TEST_URL3
totalViewTime
:
20000
documentType
:
Interactions
.
DOCUMENT_TYPE
.
MEDIA
created_at
:
now
-
3000
}
{
url
:
TEST_URL3
totalViewTime
:
20000
documentType
:
Interactions
.
DOCUMENT_TYPE
.
GENERIC
created_at
:
now
-
4000
}
{
url
:
TEST_URL3
totalViewTime
:
30000
documentType
:
Interactions
.
DOCUMENT_TYPE
.
MEDIA
created_at
:
now
-
5000
}
]
)
)
;
await
assertSnapshots
(
[
{
url
:
TEST_URL1
userPersisted
:
false
documentType
:
Interactions
.
DOCUMENT_TYPE
.
GENERIC
}
{
url
:
TEST_URL3
userPersisted
:
false
documentType
:
Interactions
.
DOCUMENT_TYPE
.
MEDIA
}
]
)
;
await
reset
(
)
;
}
)
;
add_task
(
async
function
cumulative
(
)
{
Services
.
prefs
.
setCharPref
(
"
browser
.
places
.
interactions
.
snapshotCriteria
"
JSON
.
stringify
(
[
{
property
:
"
total_view_time
"
aggregator
:
"
sum
"
cutoff
:
30000
}
]
)
)
;
await
assertTopicNotObserved
(
TOPIC_ADDED
(
)
=
>
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
20000
}
]
)
)
;
Assert
.
strictEqual
(
await
Snapshots
.
get
(
TEST_URL1
true
)
null
"
Should
not
have
created
this
snapshot
yet
.
"
)
;
await
assertUrlNotification
(
TOPIC_ADDED
[
TEST_URL1
]
(
)
=
>
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
20000
}
]
)
)
;
await
assertSnapshots
(
[
{
url
:
TEST_URL1
userPersisted
:
false
}
]
)
;
await
assertTopicNotObserved
(
TOPIC_ADDED
(
)
=
>
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
20000
}
]
)
)
;
await
reset
(
)
;
}
)
;
add_task
(
async
function
tombstoned
(
)
{
let
removedAt
=
new
Date
(
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
places
.
interactions
.
snapshotCriteria
"
JSON
.
stringify
(
[
{
property
:
"
total_view_time
"
aggregator
:
"
sum
"
cutoff
:
30000
}
]
)
)
;
await
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
1000
}
]
)
;
Assert
.
strictEqual
(
await
Snapshots
.
get
(
TEST_URL1
true
)
null
"
Should
not
have
created
this
snapshot
yet
.
"
)
;
await
Snapshots
.
add
(
{
url
:
TEST_URL1
userPersisted
:
true
}
)
;
assertSnapshot
(
await
Snapshots
.
get
(
TEST_URL1
true
)
{
url
:
TEST_URL1
userPersisted
:
true
}
)
;
await
assertTopicNotObserved
(
TOPIC_ADDED
(
)
=
>
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
40000
}
]
)
)
;
assertSnapshot
(
await
Snapshots
.
get
(
TEST_URL1
true
)
{
url
:
TEST_URL1
userPersisted
:
true
}
)
;
await
assertUrlNotification
(
TOPIC_DELETED
[
TEST_URL1
]
(
)
=
>
Snapshots
.
delete
(
TEST_URL1
)
)
;
assertSnapshot
(
await
Snapshots
.
get
(
TEST_URL1
true
)
{
url
:
TEST_URL1
userPersisted
:
true
removedAt
}
)
;
await
assertTopicNotObserved
(
TOPIC_ADDED
(
)
=
>
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
40000
}
]
)
)
;
assertSnapshot
(
await
Snapshots
.
get
(
TEST_URL1
true
)
{
url
:
TEST_URL1
userPersisted
:
true
removedAt
}
)
;
await
reset
(
)
;
}
)
;
add_task
(
async
function
multipleCriteria
(
)
{
let
now
=
Date
.
now
(
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
places
.
interactions
.
snapshotCriteria
"
JSON
.
stringify
(
[
{
property
:
"
total_view_time
"
aggregator
:
"
min
"
cutoff
:
10000
}
{
property
:
"
key_presses
"
aggregator
:
"
avg
"
cutoff
:
20
}
]
)
)
;
await
addInteractions
(
[
{
url
:
TEST_URL1
totalViewTime
:
10000
created_at
:
now
-
1000
}
{
url
:
TEST_URL1
totalViewTime
:
20000
created_at
:
now
-
1000
}
{
url
:
TEST_URL2
keypresses
:
10
created_at
:
now
-
2000
}
{
url
:
TEST_URL2
keypresses
:
50
created_at
:
now
-
2000
}
{
url
:
TEST_URL2
keypresses
:
20
created_at
:
now
-
2000
}
{
url
:
TEST_URL3
totalViewTime
:
30000
keypresses
:
10
created_at
:
now
-
3000
}
{
url
:
TEST_URL3
totalViewTime
:
5000
keypresses
:
10
created_at
:
now
-
3000
}
]
)
;
await
assertSnapshots
(
[
{
url
:
TEST_URL1
}
{
url
:
TEST_URL2
}
]
)
;
await
reset
(
)
;
}
)
;
