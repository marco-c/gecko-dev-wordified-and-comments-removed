const
EXPORTED_SYMBOLS
=
[
"
SnapshotSelector
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
DeferredTask
:
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
FilterAdult
:
"
resource
:
/
/
activity
-
stream
/
lib
/
FilterAdult
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
Snapshots
:
"
resource
:
/
/
/
modules
/
Snapshots
.
jsm
"
SnapshotScorer
:
"
resource
:
/
/
/
modules
/
SnapshotScorer
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logConsole
"
function
(
)
{
return
console
.
createInstance
(
{
prefix
:
"
SnapshotSelector
"
maxLogLevel
:
Services
.
prefs
.
getBoolPref
(
"
browser
.
places
.
interactions
.
log
"
false
)
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
class
SnapshotSelector
extends
EventEmitter
{
static
#
selectors
=
new
Set
(
)
;
static
rebuildAll
(
)
{
for
(
let
selector
of
SnapshotSelector
.
#
selectors
)
{
selector
.
rebuild
(
)
;
}
}
#
context
=
{
count
:
undefined
filterAdult
:
false
selectOverlappingVisits
:
false
selectCommonReferrer
:
false
url
:
undefined
referrerUrl
:
undefined
type
:
undefined
getCurrentSessionUrls
:
undefined
}
;
#
task
=
null
;
constructor
(
{
count
=
5
filterAdult
=
false
selectOverlappingVisits
=
false
selectCommonReferrer
=
false
getCurrentSessionUrls
=
(
)
=
>
new
Set
(
)
}
)
{
super
(
)
;
this
.
#
task
=
new
DeferredTask
(
(
)
=
>
this
.
#
buildSnapshots
(
)
.
catch
(
console
.
error
)
500
)
;
this
.
#
context
.
count
=
count
;
this
.
#
context
.
filterAdult
=
filterAdult
;
this
.
#
context
.
selectOverlappingVisits
=
selectOverlappingVisits
;
this
.
#
context
.
selectCommonReferrer
=
selectCommonReferrer
;
this
.
#
context
.
getCurrentSessionUrls
=
getCurrentSessionUrls
;
SnapshotSelector
.
#
selectors
.
add
(
this
)
;
}
destroy
(
)
{
this
.
#
task
.
disarm
(
)
;
this
.
#
task
.
finalize
(
)
;
this
.
#
task
=
null
;
SnapshotSelector
.
#
selectors
.
delete
(
this
)
;
}
rebuild
(
)
{
if
(
!
this
.
#
task
)
{
return
;
}
this
.
#
task
.
arm
(
)
;
}
#
snapshotsGenerated
(
snapshots
)
{
if
(
!
this
.
#
task
)
{
return
;
}
logConsole
.
debug
(
"
Generated
snapshots
"
snapshots
.
map
(
s
=
>
s
.
url
)
)
;
this
.
emit
(
"
snapshots
-
updated
"
snapshots
)
;
}
async
#
buildSnapshots
(
)
{
if
(
this
.
#
context
.
selectOverlappingVisits
|
|
this
.
#
context
.
selectCommonReferrer
)
{
await
this
.
#
buildRelevancySnapshots
(
)
;
return
;
}
if
(
!
this
.
#
task
)
{
return
;
}
let
context
=
{
.
.
.
this
.
#
context
}
;
logConsole
.
debug
(
"
Building
snapshots
"
context
)
;
let
snapshots
=
await
Snapshots
.
query
(
{
limit
:
context
.
filterAdult
?
context
.
count
*
4
:
context
.
count
+
1
type
:
context
.
type
}
)
;
snapshots
=
snapshots
.
filter
(
snapshot
=
>
{
if
(
snapshot
.
url
=
=
context
.
url
)
{
return
false
;
}
return
!
context
.
filterAdult
|
|
!
FilterAdult
.
isAdultUrl
(
snapshot
.
url
)
;
}
)
.
slice
(
0
context
.
count
)
;
this
.
#
snapshotsGenerated
(
snapshots
)
;
}
async
#
buildRelevancySnapshots
(
)
{
if
(
!
this
.
#
task
)
{
return
;
}
let
context
=
{
.
.
.
this
.
#
context
}
;
logConsole
.
debug
(
"
Building
overlapping
snapshots
"
context
)
;
let
snapshots
=
[
]
;
if
(
context
.
selectOverlappingVisits
)
{
snapshots
=
await
Snapshots
.
queryOverlapping
(
context
.
url
)
;
logConsole
.
debug
(
"
Found
overlapping
snapshots
:
"
snapshots
.
map
(
s
=
>
s
.
url
)
)
;
}
if
(
context
.
selectCommonReferrer
&
&
context
.
referrerUrl
&
&
context
.
referrerUrl
!
=
"
"
)
{
let
commonReferrerSnapshots
=
await
Snapshots
.
queryCommonReferrer
(
context
.
url
context
.
referrerUrl
)
;
logConsole
.
debug
(
"
Found
common
referrer
snapshots
:
"
commonReferrerSnapshots
.
map
(
s
=
>
s
.
url
)
)
;
snapshots
=
snapshots
.
concat
(
commonReferrerSnapshots
)
;
}
if
(
context
.
filterAdult
)
{
snapshots
=
snapshots
.
filter
(
snapshot
=
>
{
return
!
FilterAdult
.
isAdultUrl
(
snapshot
.
url
)
;
}
)
;
}
snapshots
=
SnapshotScorer
.
combineAndScore
(
this
.
#
context
.
getCurrentSessionUrls
(
)
snapshots
)
;
snapshots
=
snapshots
.
slice
(
0
context
.
count
)
;
logConsole
.
debug
(
"
Reduced
final
candidates
:
"
snapshots
.
map
(
s
=
>
s
.
url
)
)
;
this
.
#
snapshotsGenerated
(
snapshots
)
;
}
setUrl
(
url
referrerUrl
)
{
if
(
this
.
#
context
.
url
=
=
url
&
&
this
.
#
context
.
referrerUrl
=
=
referrerUrl
)
{
return
;
}
this
.
#
context
.
url
=
url
;
this
.
#
context
.
referrerUrl
=
referrerUrl
;
this
.
rebuild
(
)
;
}
setUrlAndRebuildNow
(
url
referrerUrl
)
{
if
(
this
.
#
context
.
url
=
=
url
&
&
this
.
#
context
.
referrerUrl
=
=
referrerUrl
)
{
return
;
}
this
.
#
context
.
url
=
url
;
this
.
#
context
.
referrerUrl
=
referrerUrl
;
this
.
#
buildSnapshots
(
)
;
}
async
setType
(
type
)
{
if
(
this
.
#
context
.
type
=
=
=
type
)
{
return
;
}
this
.
#
context
.
type
=
type
;
this
.
rebuild
(
)
;
}
}
Services
.
obs
.
addObserver
(
SnapshotSelector
.
rebuildAll
"
places
-
snapshots
-
added
"
)
;
Services
.
obs
.
addObserver
(
SnapshotSelector
.
rebuildAll
"
places
-
snapshots
-
deleted
"
)
;
Services
.
obs
.
addObserver
(
SnapshotSelector
.
rebuildAll
"
places
-
metadata
-
updated
"
)
;
