const
EXPORTED_SYMBOLS
=
[
"
SnapshotSelector
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
DeferredTask
:
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
FilterAdult
:
"
resource
:
/
/
activity
-
stream
/
lib
/
FilterAdult
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
Snapshots
:
"
resource
:
/
/
/
modules
/
Snapshots
.
jsm
"
SnapshotScorer
:
"
resource
:
/
/
/
modules
/
SnapshotScorer
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logConsole
"
function
(
)
{
return
console
.
createInstance
(
{
prefix
:
"
SnapshotSelector
"
maxLogLevel
:
Services
.
prefs
.
getBoolPref
(
"
browser
.
places
.
interactions
.
log
"
false
)
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
class
SnapshotSelector
extends
EventEmitter
{
static
#
selectors
=
new
Set
(
)
;
static
rebuildAll
(
)
{
for
(
let
selector
of
SnapshotSelector
.
#
selectors
)
{
selector
.
rebuild
(
)
;
}
}
#
context
=
{
count
:
undefined
filterAdult
:
false
sourceWeights
:
null
url
:
undefined
type
:
undefined
getCurrentSessionUrls
:
undefined
}
;
#
task
=
null
;
constructor
(
{
count
=
5
filterAdult
=
false
sourceWeights
=
undefined
getCurrentSessionUrls
=
(
)
=
>
new
Set
(
)
}
)
{
super
(
)
;
this
.
#
task
=
new
DeferredTask
(
(
)
=
>
this
.
#
buildSnapshots
(
)
.
catch
(
console
.
error
)
500
)
;
this
.
#
context
.
count
=
count
;
this
.
#
context
.
filterAdult
=
filterAdult
;
if
(
sourceWeights
|
|
Services
.
prefs
.
getBoolPref
(
"
browser
.
pinebuild
.
snapshots
.
relevancy
.
enabled
"
false
)
)
{
let
branch
=
Services
.
prefs
.
getBranch
(
"
browser
.
snapshots
.
source
.
"
)
;
let
weights
=
Object
.
fromEntries
(
branch
.
getChildList
(
"
"
)
.
map
(
name
=
>
[
name
branch
.
getIntPref
(
name
0
)
]
)
)
;
Object
.
assign
(
weights
sourceWeights
?
?
{
}
)
;
this
.
#
context
.
sourceWeights
=
new
Map
(
Object
.
entries
(
weights
)
)
;
}
this
.
#
context
.
getCurrentSessionUrls
=
getCurrentSessionUrls
;
SnapshotSelector
.
#
selectors
.
add
(
this
)
;
}
destroy
(
)
{
this
.
#
task
.
disarm
(
)
;
this
.
#
task
.
finalize
(
)
;
this
.
#
task
=
null
;
SnapshotSelector
.
#
selectors
.
delete
(
this
)
;
}
rebuild
(
)
{
if
(
!
this
.
#
task
)
{
return
;
}
this
.
#
task
.
arm
(
)
;
}
#
snapshotsGenerated
(
snapshots
)
{
if
(
!
this
.
#
task
)
{
return
;
}
logConsole
.
debug
(
"
Generated
snapshots
"
snapshots
.
map
(
s
=
>
s
.
url
)
)
;
this
.
emit
(
"
snapshots
-
updated
"
snapshots
)
;
}
async
#
buildSnapshots
(
)
{
if
(
this
.
#
context
.
sourceWeights
)
{
await
this
.
#
buildRelevancySnapshots
(
)
;
return
;
}
if
(
!
this
.
#
task
)
{
return
;
}
let
context
=
{
.
.
.
this
.
#
context
}
;
logConsole
.
debug
(
"
Building
snapshots
"
context
)
;
let
snapshots
=
await
Snapshots
.
query
(
{
limit
:
context
.
filterAdult
?
context
.
count
*
4
:
context
.
count
+
1
type
:
context
.
type
}
)
;
snapshots
=
snapshots
.
filter
(
snapshot
=
>
{
if
(
snapshot
.
url
=
=
context
.
url
)
{
return
false
;
}
return
!
context
.
filterAdult
|
|
!
FilterAdult
.
isAdultUrl
(
snapshot
.
url
)
;
}
)
.
slice
(
0
context
.
count
)
;
this
.
#
snapshotsGenerated
(
snapshots
)
;
}
async
#
buildRelevancySnapshots
(
)
{
if
(
!
this
.
#
task
)
{
return
;
}
let
context
=
{
.
.
.
this
.
#
context
}
;
logConsole
.
debug
(
"
Building
relevant
snapshots
"
context
)
;
let
recommendationGroups
=
await
Promise
.
all
(
Object
.
entries
(
Snapshots
.
recommendationSources
)
.
map
(
async
(
[
key
source
]
)
=
>
{
let
weight
=
context
.
sourceWeights
.
get
(
key
)
?
?
0
;
if
(
weight
=
=
0
)
{
return
{
recommendations
:
[
]
weight
}
;
}
let
recommendations
=
await
source
(
context
)
;
logConsole
.
debug
(
Found
{
key
}
recommendations
:
recommendations
.
map
(
r
=
>
r
.
snapshot
.
url
)
)
;
return
{
recommendations
weight
}
;
}
)
)
;
let
recommendations
=
SnapshotScorer
.
combineAndScore
(
context
.
.
.
recommendationGroups
)
;
let
snapshots
=
recommendations
.
slice
(
0
context
.
count
)
.
map
(
r
=
>
r
.
snapshot
)
;
logConsole
.
debug
(
"
Reduced
final
candidates
:
"
snapshots
.
map
(
s
=
>
s
.
url
)
)
;
this
.
#
snapshotsGenerated
(
snapshots
)
;
}
setUrl
(
url
)
{
url
=
Snapshots
.
stripFragments
(
url
)
;
if
(
this
.
#
context
.
url
=
=
url
)
{
return
;
}
this
.
#
context
.
url
=
url
;
this
.
rebuild
(
)
;
}
setUrlAndRebuildNow
(
url
)
{
url
=
Snapshots
.
stripFragments
(
url
)
;
if
(
this
.
#
context
.
url
=
=
url
)
{
return
;
}
this
.
#
context
.
url
=
url
;
this
.
#
buildSnapshots
(
)
;
}
async
setType
(
type
)
{
if
(
this
.
#
context
.
type
=
=
=
type
)
{
return
;
}
this
.
#
context
.
type
=
type
;
this
.
rebuild
(
)
;
}
}
Services
.
obs
.
addObserver
(
SnapshotSelector
.
rebuildAll
"
places
-
snapshots
-
added
"
)
;
Services
.
obs
.
addObserver
(
SnapshotSelector
.
rebuildAll
"
places
-
snapshots
-
deleted
"
)
;
Services
.
obs
.
addObserver
(
SnapshotSelector
.
rebuildAll
"
places
-
metadata
-
updated
"
)
;
