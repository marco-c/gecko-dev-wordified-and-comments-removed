const
EXPORTED_SYMBOLS
=
[
"
PinnedGroupBuilder
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Snapshots
:
"
resource
:
/
/
/
modules
/
Snapshots
.
jsm
"
SnapshotGroups
:
"
resource
:
/
/
/
modules
/
SnapshotGroups
.
jsm
"
}
)
;
const
PinnedGroupBuilder
=
new
(
class
PinnedGroupBuilder
{
#
group
=
null
;
async
rebuild
(
snapshots
)
{
await
this
.
#
maybeLoadGroup
(
)
;
let
urls
=
snapshots
.
filter
(
s
=
>
s
.
userPersisted
=
=
Snapshots
.
USER_PERSISTED
.
PINNED
)
.
map
(
u
=
>
u
.
url
)
;
if
(
urls
.
length
=
=
this
.
#
group
.
urls
.
size
&
&
urls
.
every
(
u
=
>
this
.
#
group
.
urls
.
has
(
u
)
)
)
{
return
;
}
this
.
#
group
.
urls
=
new
Set
(
urls
)
;
await
this
.
#
updateGroup
(
this
.
#
group
.
urls
)
;
}
async
update
(
{
addedItems
removedUrls
}
)
{
await
this
.
#
maybeLoadGroup
(
)
;
let
changed
=
false
;
for
(
let
{
url
userPersisted
}
of
addedItems
.
values
(
)
)
{
if
(
userPersisted
!
=
Snapshots
.
USER_PERSISTED
.
PINNED
)
{
continue
;
}
if
(
!
this
.
#
group
.
urls
.
has
(
url
)
)
{
changed
=
true
;
this
.
#
group
.
urls
.
add
(
url
)
;
}
}
for
(
let
url
of
removedUrls
.
values
(
)
)
{
if
(
this
.
#
group
.
urls
.
has
(
url
)
)
{
changed
=
true
;
this
.
#
group
.
urls
.
delete
(
url
)
;
}
}
if
(
!
changed
)
{
return
;
}
await
this
.
#
updateGroup
(
this
.
#
group
.
urls
)
;
}
async
#
updateGroup
(
)
{
if
(
this
.
#
group
.
id
=
=
undefined
&
&
!
this
.
#
group
.
urls
.
size
)
{
return
;
}
if
(
this
.
#
group
.
id
=
=
undefined
)
{
let
id
=
await
SnapshotGroups
.
add
(
this
.
#
group
this
.
#
group
.
urls
)
;
this
.
#
group
.
id
=
id
;
}
else
{
await
SnapshotGroups
.
updateUrls
(
this
.
#
group
.
id
this
.
#
group
.
urls
)
;
}
}
async
#
maybeLoadGroup
(
)
{
if
(
this
.
#
group
)
{
return
;
}
let
groups
=
await
SnapshotGroups
.
query
(
{
builder
:
"
pinned
"
limit
:
-
1
skipMinimum
:
true
}
)
;
if
(
!
groups
.
length
)
{
this
.
#
group
=
this
.
#
generateEmptyGroup
(
)
;
return
;
}
if
(
groups
.
length
>
1
)
{
console
.
error
(
"
Should
only
be
one
pinned
group
in
the
database
"
)
;
}
this
.
#
group
=
groups
[
0
]
;
this
.
#
group
.
urls
=
new
Set
(
await
SnapshotGroups
.
getUrls
(
{
id
:
this
.
#
group
.
id
}
)
)
;
}
#
generateEmptyGroup
(
)
{
return
{
title
:
"
"
builder
:
"
pinned
"
builderMetadata
:
{
fluentTitle
:
{
id
:
"
snapshot
-
group
-
pinned
-
header
"
}
}
urls
:
new
Set
(
)
}
;
}
async
reset
(
)
{
await
SnapshotGroups
.
delete
(
this
.
#
group
.
id
)
;
this
.
#
group
=
null
;
}
}
)
(
)
;
