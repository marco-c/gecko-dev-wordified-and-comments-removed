"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
InteractionsChild
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
InteractionsBlocklist
:
"
resource
:
/
/
/
modules
/
InteractionsBlocklist
.
jsm
"
}
)
;
class
InteractionsChild
extends
JSWindowActorChild
{
actorCreated
(
)
{
this
.
isContentWindowPrivate
=
PrivateBrowsingUtils
.
isContentWindowPrivate
(
this
.
contentWindow
)
;
}
async
handleEvent
(
event
)
{
if
(
this
.
isContentWindowPrivate
)
{
return
;
}
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
let
docInfo
=
this
.
#
getDocumentInfo
(
)
;
if
(
!
docInfo
|
|
!
this
.
docShell
.
currentDocumentChannel
)
{
this
.
sendAsyncMessage
(
"
Interactions
:
PageHide
"
)
;
return
;
}
if
(
this
.
docShell
.
currentDocumentChannel
instanceof
Ci
.
nsIHttpChannel
&
&
!
this
.
docShell
.
currentDocumentChannel
.
requestSucceeded
)
{
return
;
}
this
.
sendAsyncMessage
(
"
Interactions
:
PageLoaded
"
docInfo
)
;
break
;
}
case
"
pagehide
"
:
{
if
(
!
this
.
docShell
.
currentDocumentChannel
)
{
return
;
}
if
(
!
this
.
docShell
.
currentDocumentChannel
.
requestSucceeded
)
{
return
;
}
let
docInfo
=
await
this
.
#
getDocumentInfo
(
)
;
if
(
docInfo
)
{
this
.
sendAsyncMessage
(
"
Interactions
:
PageHide
"
)
;
}
break
;
}
}
}
#
getDocumentInfo
(
)
{
let
doc
=
this
.
document
;
let
requirements
=
InteractionsBlocklist
.
urlRequirements
.
get
(
doc
.
documentURIObject
.
scheme
+
"
:
"
)
;
if
(
!
requirements
|
|
(
requirements
.
extension
&
&
!
doc
.
documentURIObject
.
spec
.
endsWith
(
requirements
.
extension
)
)
)
{
return
null
;
}
let
referrer
;
if
(
doc
.
referrer
)
{
referrer
=
Services
.
io
.
newURI
(
doc
.
referrer
)
;
}
return
{
isActive
:
this
.
manager
.
browsingContext
.
isActive
url
:
doc
.
documentURIObject
.
specIgnoringRef
referrer
:
referrer
?
.
specIgnoringRef
}
;
}
}
