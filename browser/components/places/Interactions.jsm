"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Interactions
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
idleService
:
[
"
mozilla
.
org
/
widget
/
useridleservice
;
1
"
"
nsIUserIdleService
"
]
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
pageViewIdleTime
"
"
browser
.
places
.
interactions
.
pageViewIdleTime
"
60
)
;
const
DOMWINDOW_OPENED_TOPIC
=
"
domwindowopened
"
;
class
_Interactions
{
#
interactions
=
new
WeakMap
(
)
;
#
activeWindow
=
undefined
;
#
userIsIdle
=
false
;
_pageViewStartTime
=
Cu
.
now
(
)
;
init
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
places
.
interactions
.
enabled
"
false
)
)
{
return
;
}
this
.
logConsole
=
console
.
createInstance
(
{
prefix
:
"
InteractionsManager
"
maxLogLevel
:
Services
.
prefs
.
getBoolPref
(
"
browser
.
places
.
interactions
.
log
"
false
)
?
"
Debug
"
:
"
Warn
"
}
)
;
this
.
logConsole
.
debug
(
"
init
"
)
;
ChromeUtils
.
registerWindowActor
(
"
Interactions
"
{
parent
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
InteractionsParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
InteractionsChild
.
jsm
"
group
:
"
browsers
"
events
:
{
DOMContentLoaded
:
{
}
pagehide
:
{
mozSystemGroup
:
true
}
}
}
}
)
;
this
.
#
activeWindow
=
Services
.
wm
.
getMostRecentBrowserWindow
(
)
;
for
(
let
win
of
BrowserWindowTracker
.
orderedWindows
)
{
if
(
!
win
.
closed
)
{
this
.
#
registerWindow
(
win
)
;
}
}
Services
.
obs
.
addObserver
(
this
DOMWINDOW_OPENED_TOPIC
true
)
;
idleService
.
addIdleObserver
(
this
pageViewIdleTime
)
;
}
registerNewInteraction
(
browser
docInfo
)
{
let
interaction
=
this
.
#
interactions
.
get
(
browser
)
;
if
(
interaction
&
&
interaction
.
url
!
=
docInfo
.
url
)
{
this
.
registerEndOfInteraction
(
browser
)
;
}
this
.
logConsole
.
debug
(
"
New
interaction
"
docInfo
)
;
interaction
=
{
url
:
docInfo
.
url
totalViewTime
:
0
}
;
this
.
#
interactions
.
set
(
browser
interaction
)
;
if
(
docInfo
.
isActive
&
&
browser
.
ownerGlobal
=
=
this
.
#
activeWindow
)
{
this
.
_pageViewStartTime
=
Cu
.
now
(
)
;
}
}
registerEndOfInteraction
(
browser
)
{
if
(
!
browser
)
{
return
;
}
this
.
logConsole
.
debug
(
"
End
of
interaction
"
)
;
this
.
#
updateInteraction
(
browser
)
;
this
.
#
interactions
.
delete
(
browser
)
;
}
#
updateInteraction
(
browser
=
undefined
)
{
if
(
!
this
.
#
activeWindow
|
|
(
browser
&
&
browser
.
ownerGlobal
!
=
this
.
#
activeWindow
)
)
{
this
.
logConsole
.
debug
(
"
No
update
due
to
no
active
window
"
)
;
return
;
}
if
(
this
.
#
userIsIdle
)
{
this
.
logConsole
.
debug
(
"
No
update
due
to
user
is
idle
"
)
;
return
;
}
if
(
!
browser
)
{
browser
=
this
.
#
activeWindow
.
gBrowser
.
selectedTab
.
linkedBrowser
;
}
let
interaction
=
this
.
#
interactions
.
get
(
browser
)
;
if
(
!
interaction
)
{
this
.
logConsole
.
debug
(
"
No
interaction
to
update
"
)
;
return
;
}
interaction
.
totalViewTime
+
=
Cu
.
now
(
)
-
this
.
_pageViewStartTime
;
this
.
_pageViewStartTime
=
Cu
.
now
(
)
;
this
.
_updateDatabase
(
interaction
)
;
}
#
onActivateWindow
(
win
)
{
this
.
logConsole
.
debug
(
"
Activate
window
"
)
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
return
;
}
this
.
#
activeWindow
=
win
;
this
.
_pageViewStartTime
=
Cu
.
now
(
)
;
}
#
onDeactivateWindow
(
win
)
{
this
.
logConsole
.
debug
(
"
Deactivate
window
"
)
;
this
.
#
updateInteraction
(
)
;
this
.
#
activeWindow
=
undefined
;
}
#
onTabSelect
(
previousBrowser
)
{
this
.
logConsole
.
debug
(
"
Tab
switch
notified
"
)
;
this
.
#
updateInteraction
(
previousBrowser
)
;
this
.
_pageViewStartTime
=
Cu
.
now
(
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
TabSelect
"
:
this
.
#
onTabSelect
(
event
.
detail
.
previousTab
.
linkedBrowser
)
;
break
;
case
"
activate
"
:
this
.
#
onActivateWindow
(
event
.
target
)
;
break
;
case
"
deactivate
"
:
this
.
#
onDeactivateWindow
(
event
.
target
)
;
break
;
case
"
unload
"
:
this
.
#
unregisterWindow
(
event
.
target
)
;
break
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
DOMWINDOW_OPENED_TOPIC
:
this
.
#
onWindowOpen
(
subject
)
;
break
;
case
"
idle
"
:
this
.
logConsole
.
debug
(
"
idle
"
)
;
this
.
#
updateInteraction
(
)
;
this
.
#
userIsIdle
=
true
;
break
;
case
"
active
"
:
this
.
logConsole
.
debug
(
"
active
"
)
;
this
.
#
userIsIdle
=
false
;
this
.
_pageViewStartTime
=
Cu
.
now
(
)
;
break
;
}
}
#
registerWindow
(
win
)
{
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
return
;
}
win
.
addEventListener
(
"
TabSelect
"
this
true
)
;
win
.
addEventListener
(
"
deactivate
"
this
true
)
;
win
.
addEventListener
(
"
activate
"
this
true
)
;
}
#
unregisterWindow
(
win
)
{
win
.
removeEventListener
(
"
TabSelect
"
this
true
)
;
win
.
removeEventListener
(
"
deactivate
"
this
true
)
;
win
.
removeEventListener
(
"
activate
"
this
true
)
;
}
#
onWindowOpen
(
win
)
{
win
.
addEventListener
(
"
load
"
(
)
=
>
{
if
(
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
!
=
"
navigator
:
browser
"
)
{
return
;
}
this
.
#
registerWindow
(
win
)
;
}
{
once
:
true
}
)
;
}
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
;
async
_updateDatabase
(
interactionInfo
)
{
this
.
logConsole
.
debug
(
"
Would
update
database
:
"
interactionInfo
)
;
}
}
const
Interactions
=
new
_Interactions
(
)
;
