document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
const
placesContext
=
document
.
getElementById
(
"
placesContext
"
)
;
placesContext
.
addEventListener
(
"
popupshowing
"
event
=
>
PlacesUIUtils
.
placesContextShowing
(
event
)
)
;
placesContext
.
addEventListener
(
"
popuphiding
"
event
=
>
PlacesUIUtils
.
placesContextHiding
(
event
)
)
;
placesContext
.
addEventListener
(
"
command
"
event
=
>
{
switch
(
event
.
target
.
id
)
{
case
"
placesContext_openBookmarkContainer
:
tabs
"
:
case
"
placesContext_openBookmarkLinks
:
tabs
"
:
case
"
placesContext_openContainer
:
tabs
"
:
case
"
placesContext_openLinks
:
tabs
"
:
PlacesUIUtils
.
openSelectionInTabs
(
event
)
;
break
;
}
}
)
;
const
containerPopup
=
document
.
getElementById
(
"
placesContext_open_newcontainertab_popup
"
)
;
containerPopup
.
addEventListener
(
"
command
"
event
=
>
PlacesUIUtils
.
openInContainerTab
(
event
)
)
;
containerPopup
.
addEventListener
(
"
popupshowing
"
event
=
>
PlacesUIUtils
.
createContainerTabMenu
(
event
)
)
;
const
containerHistoryPopup
=
document
.
getElementById
(
"
sidebar
-
history
-
context
-
menu
-
container
-
popup
"
)
;
containerHistoryPopup
.
addEventListener
(
"
command
"
event
=
>
PlacesUIUtils
.
openInContainerTab
(
event
)
)
;
containerHistoryPopup
.
addEventListener
(
"
popupshowing
"
event
=
>
PlacesUIUtils
.
createContainerTabMenu
(
event
)
)
;
}
{
once
:
true
}
)
;
