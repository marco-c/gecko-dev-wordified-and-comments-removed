var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
CustomizableUI
:
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
PlacesUIUtils
:
"
resource
:
/
/
/
modules
/
PlacesUIUtils
.
jsm
"
PlacesTransactions
:
"
resource
:
/
/
gre
/
modules
/
PlacesTransactions
.
jsm
"
}
)
;
var
gEditItemOverlay
=
{
transactionPromises
:
null
_staticFoldersListBuilt
:
false
_didChangeFolder
:
false
_paneInfo
:
null
_setPaneInfo
(
aInitInfo
)
{
if
(
!
aInitInfo
)
{
return
(
this
.
_paneInfo
=
null
)
;
}
if
(
"
uris
"
in
aInitInfo
&
&
"
node
"
in
aInitInfo
)
{
throw
new
Error
(
"
ambiguous
pane
info
"
)
;
}
if
(
!
(
"
uris
"
in
aInitInfo
)
&
&
!
(
"
node
"
in
aInitInfo
)
)
{
throw
new
Error
(
"
Neither
node
nor
uris
set
for
pane
info
"
)
;
}
let
node
=
"
node
"
in
aInitInfo
?
aInitInfo
.
node
:
null
;
let
itemId
=
node
?
node
.
itemId
:
-
1
;
let
itemGuid
=
node
?
PlacesUtils
.
getConcreteItemGuid
(
node
)
:
null
;
let
isItem
=
itemId
!
=
-
1
;
let
isFolderShortcut
=
isItem
&
&
node
.
type
=
=
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER_SHORTCUT
;
let
isTag
=
node
&
&
PlacesUtils
.
nodeIsTagQuery
(
node
)
;
let
tag
=
null
;
if
(
isTag
)
{
tag
=
PlacesUtils
.
asQuery
(
node
)
.
query
.
tags
.
length
=
=
1
?
node
.
query
.
tags
[
0
]
:
node
.
title
;
}
let
isURI
=
node
&
&
PlacesUtils
.
nodeIsURI
(
node
)
;
let
uri
=
isURI
|
|
isTag
?
Services
.
io
.
newURI
(
node
.
uri
)
:
null
;
let
title
=
node
?
node
.
title
:
null
;
let
isBookmark
=
isItem
&
&
isURI
;
let
bulkTagging
=
!
node
;
let
uris
=
bulkTagging
?
aInitInfo
.
uris
:
null
;
let
visibleRows
=
new
Set
(
)
;
let
isParentReadOnly
=
false
;
let
postData
=
aInitInfo
.
postData
;
let
parentGuid
=
null
;
if
(
node
&
&
isItem
)
{
if
(
!
node
.
parent
|
|
(
node
.
parent
.
itemId
>
0
&
&
!
node
.
parent
.
bookmarkGuid
)
)
{
throw
new
Error
(
"
Cannot
use
an
incomplete
node
to
initialize
the
edit
bookmark
panel
"
)
;
}
let
parent
=
node
.
parent
;
isParentReadOnly
=
!
PlacesUtils
.
nodeIsFolder
(
parent
)
;
parentGuid
=
parent
.
bookmarkGuid
;
}
let
focusedElement
=
aInitInfo
.
focusedElement
;
let
onPanelReady
=
aInitInfo
.
onPanelReady
;
return
(
this
.
_paneInfo
=
{
itemId
itemGuid
parentGuid
isItem
isURI
uri
title
isBookmark
isFolderShortcut
isParentReadOnly
bulkTagging
uris
visibleRows
postData
isTag
focusedElement
onPanelReady
tag
}
)
;
}
get
initialized
(
)
{
return
this
.
_paneInfo
!
=
null
;
}
get
itemId
(
)
{
if
(
!
this
.
initialized
|
|
this
.
_paneInfo
.
isTag
|
|
this
.
_paneInfo
.
bulkTagging
)
{
return
-
1
;
}
return
this
.
_paneInfo
.
itemId
;
}
get
uri
(
)
{
if
(
!
this
.
initialized
)
{
return
null
;
}
if
(
this
.
_paneInfo
.
bulkTagging
)
{
return
this
.
_paneInfo
.
uris
[
0
]
;
}
return
this
.
_paneInfo
.
uri
;
}
get
multiEdit
(
)
{
return
this
.
initialized
&
&
this
.
_paneInfo
.
bulkTagging
;
}
get
readOnly
(
)
{
return
(
!
this
.
initialized
|
|
this
.
_paneInfo
.
isFolderShortcut
|
|
(
!
this
.
_paneInfo
.
isItem
&
&
!
this
.
_paneInfo
.
isTag
)
|
|
(
this
.
_paneInfo
.
isParentReadOnly
&
&
!
this
.
_paneInfo
.
isBookmark
&
&
!
this
.
_paneInfo
.
isTag
)
)
;
}
get
didChangeFolder
(
)
{
return
this
.
_didChangeFolder
;
}
_firstEditedField
:
"
"
_initNamePicker
(
)
{
if
(
this
.
_paneInfo
.
bulkTagging
)
{
throw
new
Error
(
"
_initNamePicker
called
unexpectedly
"
)
;
}
this
.
_initTextField
(
this
.
_namePicker
this
.
_paneInfo
.
title
|
|
this
.
_paneInfo
.
tag
|
|
"
"
)
;
}
_initLocationField
(
)
{
if
(
!
this
.
_paneInfo
.
isURI
)
{
throw
new
Error
(
"
_initLocationField
called
unexpectedly
"
)
;
}
this
.
_initTextField
(
this
.
_locationField
this
.
_paneInfo
.
uri
.
spec
)
;
}
async
_initKeywordField
(
newKeyword
=
"
"
)
{
if
(
!
this
.
_paneInfo
.
isBookmark
)
{
throw
new
Error
(
"
_initKeywordField
called
unexpectedly
"
)
;
}
this
.
_keyword
=
newKeyword
;
this
.
_initTextField
(
this
.
_keywordField
newKeyword
)
;
if
(
!
newKeyword
)
{
let
entries
=
[
]
;
await
PlacesUtils
.
keywords
.
fetch
(
{
url
:
this
.
_paneInfo
.
uri
.
spec
}
e
=
>
entries
.
push
(
e
)
)
;
if
(
entries
.
length
)
{
let
existingKeyword
=
entries
[
0
]
.
keyword
;
let
postData
=
this
.
_paneInfo
.
postData
;
if
(
postData
)
{
let
sameEntry
=
entries
.
find
(
e
=
>
e
.
postData
=
=
=
postData
)
;
existingKeyword
=
sameEntry
?
sameEntry
.
keyword
:
"
"
;
}
if
(
existingKeyword
)
{
this
.
_keyword
=
existingKeyword
;
this
.
_initTextField
(
this
.
_keywordField
this
.
_keyword
)
;
}
}
}
}
initPanel
(
aInfo
)
{
if
(
typeof
aInfo
!
=
"
object
"
|
|
aInfo
=
=
=
null
)
{
throw
new
Error
(
"
aInfo
must
be
an
object
.
"
)
;
}
if
(
"
node
"
in
aInfo
)
{
try
{
aInfo
.
node
.
type
;
}
catch
(
e
)
{
return
;
}
}
if
(
this
.
initialized
)
{
this
.
uninitPanel
(
false
)
;
}
this
.
_didChangeFolder
=
false
;
this
.
transactionPromises
=
[
]
;
let
{
parentGuid
isItem
isURI
isBookmark
bulkTagging
uris
visibleRows
focusedElement
onPanelReady
}
=
this
.
_setPaneInfo
(
aInfo
)
;
if
(
aInfo
.
isNewBookmark
&
&
parentGuid
=
=
PlacesUtils
.
bookmarks
.
toolbarGuid
)
{
this
.
_autoshowBookmarksToolbar
(
)
;
}
let
showOrCollapse
=
(
rowId
isAppropriateForInput
nameInHiddenRows
=
null
)
=
>
{
let
visible
=
isAppropriateForInput
;
if
(
visible
&
&
"
hiddenRows
"
in
aInfo
&
&
nameInHiddenRows
)
{
visible
&
=
!
aInfo
.
hiddenRows
.
includes
(
nameInHiddenRows
)
;
}
if
(
visible
)
{
visibleRows
.
add
(
rowId
)
;
}
return
!
(
this
.
_element
(
rowId
)
.
collapsed
=
!
visible
)
;
}
;
if
(
showOrCollapse
(
"
nameRow
"
!
bulkTagging
"
name
"
)
)
{
this
.
_initNamePicker
(
)
;
this
.
_namePicker
.
readOnly
=
this
.
readOnly
;
}
showOrCollapse
(
"
locationRow
"
isURI
"
location
"
)
;
if
(
isURI
)
{
this
.
_initLocationField
(
)
;
this
.
_locationField
.
readOnly
=
this
.
readOnly
;
}
if
(
showOrCollapse
(
"
keywordRow
"
isBookmark
"
keyword
"
)
)
{
this
.
_initKeywordField
(
)
.
catch
(
Cu
.
reportError
)
;
this
.
_keywordField
.
readOnly
=
this
.
readOnly
;
}
if
(
showOrCollapse
(
"
tagsRow
"
isURI
|
|
bulkTagging
"
tags
"
)
)
{
this
.
_initTagsField
(
)
;
}
else
if
(
!
this
.
_element
(
"
tagsSelectorRow
"
)
.
collapsed
)
{
this
.
toggleTagsSelector
(
)
.
catch
(
Cu
.
reportError
)
;
}
if
(
showOrCollapse
(
"
folderRow
"
isItem
"
folderPicker
"
)
)
{
this
.
_initFolderMenuList
(
parentGuid
)
.
catch
(
Cu
.
reportError
)
;
}
if
(
showOrCollapse
(
"
selectionCount
"
bulkTagging
)
)
{
this
.
_element
(
"
itemsCountText
"
)
.
value
=
PlacesUIUtils
.
getPluralString
(
"
detailsPane
.
itemsCountLabel
"
uris
.
length
[
uris
.
length
]
)
;
}
let
focusElement
=
(
)
=
>
{
let
elt
;
if
(
focusedElement
=
=
=
"
preferred
"
)
{
elt
=
this
.
_element
(
Services
.
prefs
.
getCharPref
(
"
browser
.
bookmarks
.
editDialog
.
firstEditField
"
)
)
;
}
else
if
(
focusedElement
=
=
=
"
first
"
)
{
elt
=
document
.
querySelector
(
"
vbox
:
not
(
[
collapsed
=
true
]
)
>
input
"
)
;
}
if
(
elt
)
{
elt
.
focus
(
{
preventScroll
:
true
}
)
;
elt
.
select
(
)
;
}
}
;
if
(
onPanelReady
)
{
onPanelReady
(
focusElement
)
;
}
else
{
focusElement
(
)
;
}
}
_getCommonTags
(
)
{
if
(
"
_cachedCommonTags
"
in
this
.
_paneInfo
)
{
return
this
.
_paneInfo
.
_cachedCommonTags
;
}
let
uris
=
[
.
.
.
this
.
_paneInfo
.
uris
]
;
let
firstURI
=
uris
.
shift
(
)
;
let
commonTags
=
new
Set
(
PlacesUtils
.
tagging
.
getTagsForURI
(
firstURI
)
)
;
if
(
commonTags
.
size
=
=
0
)
{
return
(
this
.
_cachedCommonTags
=
[
]
)
;
}
for
(
let
uri
of
uris
)
{
let
curentURITags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
uri
)
;
for
(
let
tag
of
commonTags
)
{
if
(
!
curentURITags
.
includes
(
tag
)
)
{
commonTags
.
delete
(
tag
)
;
if
(
commonTags
.
size
=
=
0
)
{
return
(
this
.
_paneInfo
.
cachedCommonTags
=
[
]
)
;
}
}
}
}
return
(
this
.
_paneInfo
.
_cachedCommonTags
=
[
.
.
.
commonTags
]
)
;
}
_initTextField
(
aElement
aValue
)
{
if
(
aElement
.
value
!
=
aValue
)
{
aElement
.
value
=
aValue
;
let
transactionManager
;
try
{
transactionManager
=
aElement
.
editor
.
transactionManager
;
}
catch
(
e
)
{
if
(
!
(
e
instanceof
TypeError
)
&
&
e
.
result
!
=
Cr
.
NS_ERROR_FAILURE
)
{
throw
e
;
}
}
if
(
transactionManager
)
{
transactionManager
.
clear
(
)
;
}
}
}
_appendFolderItemToMenupopup
(
aMenupopup
aFolderGuid
aTitle
)
{
this
.
_element
(
"
foldersSeparator
"
)
.
hidden
=
false
;
var
folderMenuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
folderMenuItem
.
folderGuid
=
aFolderGuid
;
folderMenuItem
.
setAttribute
(
"
label
"
aTitle
)
;
folderMenuItem
.
className
=
"
menuitem
-
iconic
folder
-
icon
"
;
aMenupopup
.
appendChild
(
folderMenuItem
)
;
return
folderMenuItem
;
}
async
_initFolderMenuList
(
aSelectedFolderGuid
)
{
var
menupopup
=
this
.
_folderMenuList
.
menupopup
;
while
(
menupopup
.
children
.
length
>
6
)
{
menupopup
.
removeChild
(
menupopup
.
lastElementChild
)
;
}
if
(
!
this
.
_staticFoldersListBuilt
)
{
let
unfiledItem
=
this
.
_element
(
"
unfiledRootItem
"
)
;
unfiledItem
.
label
=
PlacesUtils
.
getString
(
"
OtherBookmarksFolderTitle
"
)
;
unfiledItem
.
folderGuid
=
PlacesUtils
.
bookmarks
.
unfiledGuid
;
let
bmMenuItem
=
this
.
_element
(
"
bmRootItem
"
)
;
bmMenuItem
.
label
=
PlacesUtils
.
getString
(
"
BookmarksMenuFolderTitle
"
)
;
bmMenuItem
.
folderGuid
=
PlacesUtils
.
bookmarks
.
menuGuid
;
let
toolbarItem
=
this
.
_element
(
"
toolbarFolderItem
"
)
;
toolbarItem
.
label
=
PlacesUtils
.
getString
(
"
BookmarksToolbarFolderTitle
"
)
;
toolbarItem
.
folderGuid
=
PlacesUtils
.
bookmarks
.
toolbarGuid
;
this
.
_staticFoldersListBuilt
=
true
;
}
let
lastUsedFolderGuids
=
await
PlacesUtils
.
metadata
.
get
(
PlacesUIUtils
.
LAST_USED_FOLDERS_META_KEY
[
]
)
;
this
.
_recentFolders
=
[
]
;
for
(
let
guid
of
lastUsedFolderGuids
)
{
let
bm
=
await
PlacesUtils
.
bookmarks
.
fetch
(
guid
)
;
if
(
bm
)
{
let
title
=
PlacesUtils
.
bookmarks
.
getLocalizedTitle
(
bm
)
;
this
.
_recentFolders
.
push
(
{
guid
title
}
)
;
}
}
var
numberOfItems
=
Math
.
min
(
PlacesUIUtils
.
maxRecentFolders
this
.
_recentFolders
.
length
)
;
for
(
let
i
=
0
;
i
<
numberOfItems
;
i
+
+
)
{
await
this
.
_appendFolderItemToMenupopup
(
menupopup
this
.
_recentFolders
[
i
]
.
guid
this
.
_recentFolders
[
i
]
.
title
)
;
}
let
title
=
(
await
PlacesUtils
.
bookmarks
.
fetch
(
aSelectedFolderGuid
)
)
.
title
;
var
defaultItem
=
this
.
_getFolderMenuItem
(
aSelectedFolderGuid
title
)
;
this
.
_folderMenuList
.
selectedItem
=
defaultItem
;
this
.
_onFolderListSelected
(
)
;
this
.
_folderMenuList
.
addEventListener
(
"
select
"
this
)
;
this
.
_folderMenuListListenerAdded
=
true
;
this
.
_element
(
"
foldersSeparator
"
)
.
hidden
=
menupopup
.
children
.
length
<
=
6
;
this
.
_folderMenuList
.
disabled
=
this
.
readOnly
;
}
_onFolderListSelected
(
)
{
let
folderGuid
=
this
.
selectedFolderGuid
;
if
(
folderGuid
)
{
this
.
_folderMenuList
.
setAttribute
(
"
selectedGuid
"
folderGuid
)
;
}
else
{
this
.
_folderMenuList
.
removeAttribute
(
"
selectedGuid
"
)
;
}
}
_element
(
aID
)
{
return
document
.
getElementById
(
"
editBMPanel_
"
+
aID
)
;
}
uninitPanel
(
aHideCollapsibleElements
)
{
if
(
aHideCollapsibleElements
)
{
var
folderTreeRow
=
this
.
_element
(
"
folderTreeRow
"
)
;
if
(
!
folderTreeRow
.
collapsed
)
{
this
.
toggleFolderTreeVisibility
(
)
;
}
var
tagsSelectorRow
=
this
.
_element
(
"
tagsSelectorRow
"
)
;
if
(
!
tagsSelectorRow
.
collapsed
)
{
this
.
toggleTagsSelector
(
)
.
catch
(
Cu
.
reportError
)
;
}
}
if
(
this
.
_folderMenuListListenerAdded
)
{
this
.
_folderMenuList
.
removeEventListener
(
"
select
"
this
)
;
this
.
_folderMenuListListenerAdded
=
false
;
}
this
.
_setPaneInfo
(
null
)
;
this
.
_firstEditedField
=
"
"
;
this
.
_didChangeFolder
=
false
;
this
.
transactionPromises
=
[
]
;
}
get
selectedFolderGuid
(
)
{
return
(
this
.
_folderMenuList
.
selectedItem
&
&
this
.
_folderMenuList
.
selectedItem
.
folderGuid
)
;
}
onTagsFieldChange
(
)
{
if
(
this
.
_paneInfo
&
&
(
this
.
_paneInfo
.
isURI
|
|
this
.
_paneInfo
.
bulkTagging
)
)
{
this
.
_updateTags
(
)
.
then
(
anyChanges
=
>
{
if
(
anyChanges
&
&
this
.
_paneInfo
)
{
this
.
_mayUpdateFirstEditField
(
"
tagsField
"
)
;
}
}
Cu
.
reportError
)
;
}
}
_getTagsChanges
(
aCurrentTags
)
{
let
inputTags
=
this
.
_getTagsArrayFromTagsInputField
(
)
;
if
(
!
inputTags
.
length
&
&
!
aCurrentTags
.
length
)
{
return
{
newTags
:
[
]
removedTags
:
[
]
}
;
}
if
(
!
inputTags
.
length
)
{
return
{
newTags
:
[
]
removedTags
:
aCurrentTags
}
;
}
if
(
!
aCurrentTags
.
length
)
{
return
{
newTags
:
inputTags
removedTags
:
[
]
}
;
}
let
lcInputTags
=
inputTags
.
map
(
t
=
>
t
.
toLowerCase
(
)
)
;
let
removedTags
=
aCurrentTags
.
filter
(
t
=
>
!
lcInputTags
.
includes
(
t
.
toLowerCase
(
)
)
)
;
let
newTags
=
inputTags
.
filter
(
t
=
>
!
aCurrentTags
.
includes
(
t
)
)
;
return
{
removedTags
newTags
}
;
}
_setTagsFromTagsInputField
(
aCurrentTags
aURIs
)
{
let
{
removedTags
newTags
}
=
this
.
_getTagsChanges
(
aCurrentTags
)
;
if
(
removedTags
.
length
+
newTags
.
length
=
=
0
)
{
return
false
;
}
let
setTags
=
async
(
)
=
>
{
let
promises
=
[
]
;
if
(
removedTags
.
length
)
{
let
promise
=
PlacesTransactions
.
Untag
(
{
urls
:
aURIs
tags
:
removedTags
}
)
.
transact
(
)
.
catch
(
Cu
.
reportError
)
;
this
.
transactionPromises
.
push
(
promise
)
;
promises
.
push
(
promise
)
;
}
if
(
newTags
.
length
)
{
let
promise
=
PlacesTransactions
.
Tag
(
{
urls
:
aURIs
tags
:
newTags
}
)
.
transact
(
)
.
catch
(
Cu
.
reportError
)
;
this
.
transactionPromises
.
push
(
promise
)
;
promises
.
push
(
promise
)
;
}
for
(
let
promise
of
promises
)
{
await
promise
;
}
}
;
if
(
window
.
document
.
documentElement
.
id
=
=
"
places
"
)
{
PlacesTransactions
.
batch
(
setTags
)
;
}
else
{
setTags
(
)
;
}
return
true
;
}
async
_updateTags
(
)
{
let
uris
=
this
.
_paneInfo
.
bulkTagging
?
this
.
_paneInfo
.
uris
:
[
this
.
_paneInfo
.
uri
]
;
let
currentTags
=
this
.
_paneInfo
.
bulkTagging
?
await
this
.
_getCommonTags
(
)
:
PlacesUtils
.
tagging
.
getTagsForURI
(
uris
[
0
]
)
;
let
anyChanges
=
this
.
_setTagsFromTagsInputField
(
currentTags
uris
)
;
if
(
!
anyChanges
)
{
return
false
;
}
if
(
!
this
.
_paneInfo
)
{
return
false
;
}
currentTags
=
this
.
_paneInfo
.
bulkTagging
?
this
.
_getCommonTags
(
)
:
PlacesUtils
.
tagging
.
getTagsForURI
(
this
.
_paneInfo
.
uri
)
;
this
.
_initTextField
(
this
.
_tagsField
currentTags
.
join
(
"
"
)
false
)
;
return
true
;
}
_mayUpdateFirstEditField
(
aNewField
)
{
if
(
this
.
_paneInfo
.
bulkTagging
|
|
this
.
_firstEditedField
)
{
return
;
}
this
.
_firstEditedField
=
aNewField
;
Services
.
prefs
.
setCharPref
(
"
browser
.
bookmarks
.
editDialog
.
firstEditField
"
aNewField
)
;
}
async
onNamePickerChange
(
)
{
if
(
this
.
readOnly
|
|
!
(
this
.
_paneInfo
.
isItem
|
|
this
.
_paneInfo
.
isTag
)
)
{
return
;
}
if
(
this
.
_paneInfo
.
isTag
)
{
let
tag
=
this
.
_namePicker
.
value
;
if
(
!
tag
|
|
tag
.
includes
(
"
&
"
)
)
{
this
.
_initNamePicker
(
)
;
return
;
}
let
oldTag
=
this
.
_paneInfo
.
tag
;
this
.
_paneInfo
.
tag
=
tag
;
let
title
=
this
.
_paneInfo
.
title
;
if
(
title
=
=
oldTag
)
{
this
.
_paneInfo
.
title
=
tag
;
}
let
promise
=
PlacesTransactions
.
RenameTag
(
{
oldTag
tag
}
)
.
transact
(
)
;
this
.
transactionPromises
.
push
(
promise
.
catch
(
Cu
.
reportError
)
)
;
await
promise
;
return
;
}
this
.
_mayUpdateFirstEditField
(
"
namePicker
"
)
;
let
promise
=
PlacesTransactions
.
EditTitle
(
{
guid
:
this
.
_paneInfo
.
itemGuid
title
:
this
.
_namePicker
.
value
}
)
.
transact
(
)
;
this
.
transactionPromises
.
push
(
promise
.
catch
(
Cu
.
reportError
)
)
;
await
promise
;
}
onLocationFieldChange
(
)
{
if
(
this
.
readOnly
|
|
!
this
.
_paneInfo
.
isBookmark
)
{
return
;
}
let
newURI
;
try
{
newURI
=
Services
.
uriFixup
.
getFixupURIInfo
(
this
.
_locationField
.
value
)
.
preferredURI
;
}
catch
(
ex
)
{
return
;
}
if
(
this
.
_paneInfo
.
uri
.
equals
(
newURI
)
)
{
return
;
}
let
guid
=
this
.
_paneInfo
.
itemGuid
;
this
.
transactionPromises
.
push
(
PlacesTransactions
.
EditUrl
(
{
guid
url
:
newURI
}
)
.
transact
(
)
.
catch
(
Cu
.
reportError
)
)
;
}
onKeywordFieldChange
(
)
{
if
(
this
.
readOnly
|
|
!
this
.
_paneInfo
.
isBookmark
)
{
return
;
}
let
oldKeyword
=
this
.
_keyword
;
let
keyword
=
(
this
.
_keyword
=
this
.
_keywordField
.
value
)
;
let
postData
=
this
.
_paneInfo
.
postData
;
let
guid
=
this
.
_paneInfo
.
itemGuid
;
this
.
transactionPromises
.
push
(
PlacesTransactions
.
EditKeyword
(
{
guid
keyword
postData
oldKeyword
}
)
.
transact
(
)
.
catch
(
Cu
.
reportError
)
)
;
}
toggleFolderTreeVisibility
(
)
{
let
expander
=
this
.
_element
(
"
foldersExpander
"
)
;
let
folderTreeRow
=
this
.
_element
(
"
folderTreeRow
"
)
;
let
wasCollapsed
=
folderTreeRow
.
collapsed
;
expander
.
classList
.
toggle
(
"
expander
-
up
"
wasCollapsed
)
;
expander
.
classList
.
toggle
(
"
expander
-
down
"
!
wasCollapsed
)
;
if
(
!
wasCollapsed
)
{
expander
.
setAttribute
(
"
tooltiptext
"
expander
.
getAttribute
(
"
tooltiptextdown
"
)
)
;
folderTreeRow
.
collapsed
=
true
;
this
.
_element
(
"
chooseFolderSeparator
"
)
.
hidden
=
this
.
_element
(
"
chooseFolderMenuItem
"
)
.
hidden
=
false
;
this
.
_folderTree
.
stopEditing
(
false
)
;
this
.
_folderTree
.
view
=
null
;
}
else
{
expander
.
setAttribute
(
"
tooltiptext
"
expander
.
getAttribute
(
"
tooltiptextup
"
)
)
;
folderTreeRow
.
collapsed
=
false
;
const
FOLDER_TREE_PLACE_URI
=
"
place
:
excludeItems
=
1
&
excludeQueries
=
1
&
type
=
"
+
Ci
.
nsINavHistoryQueryOptions
.
RESULTS_AS_ROOTS_QUERY
;
this
.
_folderTree
.
place
=
FOLDER_TREE_PLACE_URI
;
this
.
_element
(
"
chooseFolderSeparator
"
)
.
hidden
=
this
.
_element
(
"
chooseFolderMenuItem
"
)
.
hidden
=
true
;
this
.
_folderTree
.
selectItems
(
[
this
.
_paneInfo
.
parentGuid
]
)
;
this
.
_folderTree
.
focus
(
)
;
}
}
_getFolderMenuItem
(
aFolderGuid
aTitle
)
{
let
menupopup
=
this
.
_folderMenuList
.
menupopup
;
let
menuItem
=
Array
.
prototype
.
find
.
call
(
menupopup
.
children
item
=
>
item
.
folderGuid
=
=
=
aFolderGuid
)
;
if
(
menuItem
!
=
=
undefined
)
{
return
menuItem
;
}
if
(
menupopup
.
children
.
length
=
=
4
+
PlacesUIUtils
.
maxRecentFolders
)
{
menupopup
.
removeChild
(
menupopup
.
lastElementChild
)
;
}
return
this
.
_appendFolderItemToMenupopup
(
menupopup
aFolderGuid
aTitle
)
;
}
async
onFolderMenuListCommand
(
aEvent
)
{
if
(
!
this
.
_paneInfo
)
{
return
;
}
if
(
aEvent
.
target
.
id
=
=
"
editBMPanel_chooseFolderMenuItem
"
)
{
let
item
=
this
.
_getFolderMenuItem
(
this
.
_paneInfo
.
parentGuid
this
.
_paneInfo
.
title
)
;
this
.
_folderMenuList
.
selectedItem
=
item
;
setTimeout
(
(
)
=
>
this
.
toggleFolderTreeVisibility
(
)
100
)
;
return
;
}
let
containerGuid
=
this
.
_folderMenuList
.
selectedItem
.
folderGuid
;
if
(
this
.
_paneInfo
.
parentGuid
!
=
containerGuid
&
&
this
.
_paneInfo
.
itemGuid
!
=
containerGuid
)
{
let
promise
=
PlacesTransactions
.
Move
(
{
guid
:
this
.
_paneInfo
.
itemGuid
newParentGuid
:
containerGuid
}
)
.
transact
(
)
;
this
.
transactionPromises
.
push
(
promise
.
catch
(
Cu
.
reportError
)
)
;
await
promise
;
if
(
containerGuid
=
=
PlacesUtils
.
bookmarks
.
toolbarGuid
)
{
this
.
_autoshowBookmarksToolbar
(
)
;
}
this
.
_didChangeFolder
=
true
;
}
var
folderTreeRow
=
this
.
_element
(
"
folderTreeRow
"
)
;
if
(
!
folderTreeRow
.
collapsed
)
{
var
selectedNode
=
this
.
_folderTree
.
selectedNode
;
if
(
!
selectedNode
|
|
PlacesUtils
.
getConcreteItemGuid
(
selectedNode
)
!
=
containerGuid
)
{
this
.
_folderTree
.
selectItems
(
[
containerGuid
]
)
;
}
}
}
_autoshowBookmarksToolbar
(
)
{
let
neverShowToolbar
=
Services
.
prefs
.
getCharPref
(
"
browser
.
toolbars
.
bookmarks
.
visibility
"
"
newtab
"
)
=
=
"
never
"
;
let
toolbar
=
document
.
getElementById
(
"
PersonalToolbar
"
)
;
if
(
!
toolbar
.
collapsed
|
|
neverShowToolbar
)
{
return
;
}
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
personal
-
bookmarks
"
)
;
let
area
=
placement
&
&
placement
.
area
;
if
(
area
!
=
CustomizableUI
.
AREA_BOOKMARKS
)
{
return
;
}
setToolbarVisibility
(
toolbar
true
false
)
;
}
onFolderTreeSelect
(
)
{
if
(
this
.
_element
(
"
folderTreeRow
"
)
.
collapsed
)
{
return
;
}
var
selectedNode
=
this
.
_folderTree
.
selectedNode
;
this
.
_element
(
"
newFolderButton
"
)
.
disabled
=
!
this
.
_folderTree
.
insertionPoint
|
|
!
selectedNode
;
if
(
!
selectedNode
)
{
return
;
}
var
folderGuid
=
PlacesUtils
.
getConcreteItemGuid
(
selectedNode
)
;
if
(
this
.
_folderMenuList
.
selectedItem
.
folderGuid
=
=
folderGuid
)
{
return
;
}
var
folderItem
=
this
.
_getFolderMenuItem
(
folderGuid
selectedNode
.
title
)
;
this
.
_folderMenuList
.
selectedItem
=
folderItem
;
folderItem
.
doCommand
(
)
;
}
async
_rebuildTagsSelectorList
(
)
{
let
tagsSelector
=
this
.
_element
(
"
tagsSelector
"
)
;
let
tagsSelectorRow
=
this
.
_element
(
"
tagsSelectorRow
"
)
;
if
(
tagsSelectorRow
.
collapsed
)
{
return
;
}
let
selectedIndex
=
tagsSelector
.
selectedIndex
;
let
selectedTag
=
selectedIndex
>
=
0
?
tagsSelector
.
selectedItem
.
label
:
null
;
while
(
tagsSelector
.
hasChildNodes
(
)
)
{
tagsSelector
.
removeChild
(
tagsSelector
.
lastElementChild
)
;
}
let
tagsInField
=
this
.
_getTagsArrayFromTagsInputField
(
)
;
let
allTags
=
await
PlacesUtils
.
bookmarks
.
fetchTags
(
)
;
let
fragment
=
document
.
createDocumentFragment
(
)
;
for
(
let
i
=
0
;
i
<
allTags
.
length
;
i
+
+
)
{
let
tag
=
allTags
[
i
]
.
name
;
let
elt
=
document
.
createXULElement
(
"
richlistitem
"
)
;
elt
.
appendChild
(
document
.
createXULElement
(
"
image
"
)
)
;
let
label
=
document
.
createXULElement
(
"
label
"
)
;
label
.
setAttribute
(
"
value
"
tag
)
;
elt
.
appendChild
(
label
)
;
if
(
tagsInField
.
includes
(
tag
)
)
{
elt
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
fragment
.
appendChild
(
elt
)
;
if
(
selectedTag
=
=
=
tag
)
{
selectedIndex
=
i
;
}
}
tagsSelector
.
appendChild
(
fragment
)
;
if
(
selectedIndex
>
=
0
&
&
tagsSelector
.
itemCount
>
0
)
{
selectedIndex
=
Math
.
min
(
selectedIndex
tagsSelector
.
itemCount
-
1
)
;
tagsSelector
.
selectedIndex
=
selectedIndex
;
tagsSelector
.
ensureIndexIsVisible
(
selectedIndex
)
;
}
let
event
=
new
CustomEvent
(
"
BookmarkTagsSelectorUpdated
"
{
bubbles
:
true
}
)
;
tagsSelector
.
dispatchEvent
(
event
)
;
}
async
toggleTagsSelector
(
)
{
var
tagsSelector
=
this
.
_element
(
"
tagsSelector
"
)
;
var
tagsSelectorRow
=
this
.
_element
(
"
tagsSelectorRow
"
)
;
var
expander
=
this
.
_element
(
"
tagsSelectorExpander
"
)
;
expander
.
classList
.
toggle
(
"
expander
-
up
"
tagsSelectorRow
.
collapsed
)
;
expander
.
classList
.
toggle
(
"
expander
-
down
"
!
tagsSelectorRow
.
collapsed
)
;
if
(
tagsSelectorRow
.
collapsed
)
{
expander
.
setAttribute
(
"
tooltiptext
"
expander
.
getAttribute
(
"
tooltiptextup
"
)
)
;
tagsSelectorRow
.
collapsed
=
false
;
await
this
.
_rebuildTagsSelectorList
(
)
;
tagsSelector
.
addEventListener
(
"
mousedown
"
this
)
;
tagsSelector
.
addEventListener
(
"
keypress
"
this
)
;
}
else
{
expander
.
setAttribute
(
"
tooltiptext
"
expander
.
getAttribute
(
"
tooltiptextdown
"
)
)
;
tagsSelectorRow
.
collapsed
=
true
;
tagsSelector
.
removeEventListener
(
"
mousedown
"
this
)
;
tagsSelector
.
removeEventListener
(
"
keypress
"
this
)
;
}
}
_getTagsArrayFromTagsInputField
(
)
{
let
tags
=
this
.
_element
(
"
tagsField
"
)
.
value
;
return
tags
.
trim
(
)
.
split
(
/
\
s
*
\
s
*
/
)
.
filter
(
tag
=
>
!
!
tag
.
length
)
;
}
async
newFolder
(
)
{
let
ip
=
this
.
_folderTree
.
insertionPoint
;
if
(
!
ip
)
{
ip
=
new
PlacesInsertionPoint
(
{
parentId
:
PlacesUtils
.
bookmarksMenuFolderId
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
}
)
;
}
let
title
=
this
.
_element
(
"
newFolderButton
"
)
.
label
;
let
promise
=
PlacesTransactions
.
NewFolder
(
{
parentGuid
:
ip
.
guid
title
index
:
await
ip
.
getIndex
(
)
}
)
.
transact
(
)
;
this
.
transactionPromises
.
push
(
promise
.
catch
(
Cu
.
reportError
)
)
;
let
guid
=
await
promise
;
this
.
_folderTree
.
focus
(
)
;
this
.
_folderTree
.
selectItems
(
[
ip
.
guid
]
)
;
PlacesUtils
.
asContainer
(
this
.
_folderTree
.
selectedNode
)
.
containerOpen
=
true
;
this
.
_folderTree
.
selectItems
(
[
guid
]
)
;
this
.
_folderTree
.
startEditing
(
this
.
_folderTree
.
view
.
selection
.
currentIndex
this
.
_folderTree
.
columns
.
getFirstColumn
(
)
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
mousedown
"
:
if
(
event
.
button
=
=
0
)
{
let
item
=
event
.
target
.
closest
(
"
richlistbox
richlistitem
"
)
;
if
(
item
.
localName
=
=
"
richlistitem
"
)
{
this
.
toggleItemCheckbox
(
item
)
;
}
}
break
;
case
"
keypress
"
:
if
(
event
.
key
=
=
"
"
)
{
let
item
=
event
.
target
.
currentItem
;
if
(
item
)
{
this
.
toggleItemCheckbox
(
item
)
;
}
}
break
;
case
"
unload
"
:
this
.
uninitPanel
(
false
)
;
break
;
case
"
select
"
:
this
.
_onFolderListSelected
(
)
;
break
;
}
}
toggleItemCheckbox
(
item
)
{
let
tags
=
this
.
_getTagsArrayFromTagsInputField
(
)
;
let
curTagIndex
=
tags
.
indexOf
(
item
.
label
)
;
let
tagsSelector
=
this
.
_element
(
"
tagsSelector
"
)
;
tagsSelector
.
selectedItem
=
item
;
if
(
!
item
.
hasAttribute
(
"
checked
"
)
)
{
item
.
setAttribute
(
"
checked
"
"
true
"
)
;
if
(
curTagIndex
=
=
-
1
)
{
tags
.
push
(
item
.
label
)
;
}
}
else
{
item
.
removeAttribute
(
"
checked
"
)
;
if
(
curTagIndex
!
=
-
1
)
{
tags
.
splice
(
curTagIndex
1
)
;
}
}
this
.
_element
(
"
tagsField
"
)
.
value
=
tags
.
join
(
"
"
)
;
this
.
_updateTags
(
)
;
}
_initTagsField
(
)
{
let
tags
;
if
(
this
.
_paneInfo
.
isURI
)
{
tags
=
PlacesUtils
.
tagging
.
getTagsForURI
(
this
.
_paneInfo
.
uri
)
;
}
else
if
(
this
.
_paneInfo
.
bulkTagging
)
{
tags
=
this
.
_getCommonTags
(
)
;
}
else
{
throw
new
Error
(
"
_promiseTagsStr
called
unexpectedly
"
)
;
}
this
.
_initTextField
(
this
.
_tagsField
tags
.
join
(
"
"
)
)
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
gEditItemOverlay
"
_folderTree
"
(
)
=
>
{
if
(
!
customElements
.
get
(
"
places
-
tree
"
)
)
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
browser
/
content
/
places
/
places
-
tree
.
js
"
window
)
;
}
gEditItemOverlay
.
_element
(
"
folderTreeRow
"
)
.
prepend
(
MozXULElement
.
parseXULToFragment
(
<
tree
id
=
"
editBMPanel_folderTree
"
flex
=
"
1
"
class
=
"
placesTree
"
is
=
"
places
-
tree
"
height
=
"
150
"
minheight
=
"
150
"
editable
=
"
true
"
onselect
=
"
gEditItemOverlay
.
onFolderTreeSelect
(
)
;
"
disableUserActions
=
"
true
"
hidecolumnpicker
=
"
true
"
>
<
treecols
>
<
treecol
anonid
=
"
title
"
flex
=
"
1
"
primary
=
"
true
"
hideheader
=
"
true
"
/
>
<
/
treecols
>
<
treechildren
flex
=
"
1
"
/
>
<
/
tree
>
)
)
;
return
gEditItemOverlay
.
_element
(
"
folderTree
"
)
;
}
)
;
for
(
let
elt
of
[
"
folderMenuList
"
"
namePicker
"
"
locationField
"
"
keywordField
"
"
tagsField
"
]
)
{
let
eltScoped
=
elt
;
XPCOMUtils
.
defineLazyGetter
(
gEditItemOverlay
_
{
eltScoped
}
(
)
=
>
gEditItemOverlay
.
_element
(
eltScoped
)
)
;
}
