ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
uidensity
=
window
.
top
.
document
.
documentElement
.
getAttribute
(
"
uidensity
"
)
;
if
(
uidensity
)
{
document
.
documentElement
.
setAttribute
(
"
uidensity
"
uidensity
)
;
}
var
SidebarUtils
=
{
handleTreeClick
:
function
SU_handleTreeClick
(
aTree
aEvent
aGutterSelect
)
{
if
(
aEvent
.
button
=
=
2
)
return
;
var
tbo
=
aTree
.
treeBoxObject
;
var
cell
=
tbo
.
getCellAt
(
aEvent
.
clientX
aEvent
.
clientY
)
;
if
(
cell
.
row
=
=
-
1
|
|
cell
.
childElt
=
=
"
twisty
"
)
return
;
var
mouseInGutter
=
false
;
if
(
aGutterSelect
)
{
var
rect
=
tbo
.
getCoordsForCellItem
(
cell
.
row
cell
.
col
"
image
"
)
;
var
isRTL
=
window
.
getComputedStyle
(
aTree
)
.
direction
=
=
"
rtl
"
;
if
(
isRTL
)
mouseInGutter
=
aEvent
.
clientX
>
rect
.
x
;
else
mouseInGutter
=
aEvent
.
clientX
<
rect
.
x
;
}
var
metaKey
=
AppConstants
.
platform
=
=
=
"
macosx
"
?
aEvent
.
metaKey
:
aEvent
.
ctrlKey
;
var
modifKey
=
metaKey
|
|
aEvent
.
shiftKey
;
var
isContainer
=
tbo
.
view
.
isContainer
(
cell
.
row
)
;
var
openInTabs
=
isContainer
&
&
(
aEvent
.
button
=
=
1
|
|
(
aEvent
.
button
=
=
0
&
&
modifKey
)
)
&
&
PlacesUtils
.
hasChildURIs
(
aTree
.
view
.
nodeForTreeIndex
(
cell
.
row
)
)
;
if
(
aEvent
.
button
=
=
0
&
&
isContainer
&
&
!
openInTabs
)
{
tbo
.
view
.
toggleOpenState
(
cell
.
row
)
;
}
else
if
(
!
mouseInGutter
&
&
openInTabs
&
&
aEvent
.
originalTarget
.
localName
=
=
"
treechildren
"
)
{
tbo
.
view
.
selection
.
select
(
cell
.
row
)
;
PlacesUIUtils
.
openContainerNodeInTabs
(
aTree
.
selectedNode
aEvent
aTree
)
;
}
else
if
(
!
mouseInGutter
&
&
!
isContainer
&
&
aEvent
.
originalTarget
.
localName
=
=
"
treechildren
"
)
{
tbo
.
view
.
selection
.
select
(
cell
.
row
)
;
PlacesUIUtils
.
openNodeWithEvent
(
aTree
.
selectedNode
aEvent
)
;
}
}
handleTreeKeyPress
:
function
SU_handleTreeKeyPress
(
aEvent
)
{
let
node
=
aEvent
.
target
.
selectedNode
;
if
(
node
)
{
if
(
aEvent
.
keyCode
=
=
KeyEvent
.
DOM_VK_RETURN
)
PlacesUIUtils
.
openNodeWithEvent
(
node
aEvent
)
;
}
}
handleTreeMouseMove
:
function
SU_handleTreeMouseMove
(
aEvent
)
{
if
(
aEvent
.
target
.
localName
!
=
"
treechildren
"
)
return
;
var
tree
=
aEvent
.
target
.
parentNode
;
var
tbo
=
tree
.
treeBoxObject
;
var
cell
=
tbo
.
getCellAt
(
aEvent
.
clientX
aEvent
.
clientY
)
;
if
(
cell
.
row
!
=
-
1
)
{
var
node
=
tree
.
view
.
nodeForTreeIndex
(
cell
.
row
)
;
if
(
PlacesUtils
.
nodeIsURI
(
node
)
)
this
.
setMouseoverURL
(
node
.
uri
)
;
else
this
.
setMouseoverURL
(
"
"
)
;
}
else
this
.
setMouseoverURL
(
"
"
)
;
}
setMouseoverURL
:
function
SU_setMouseoverURL
(
aURL
)
{
if
(
top
.
XULBrowserWindow
)
{
top
.
XULBrowserWindow
.
setOverLink
(
aURL
null
)
;
}
}
}
;
