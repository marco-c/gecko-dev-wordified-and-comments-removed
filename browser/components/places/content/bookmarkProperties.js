ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
BOOKMARK_ITEM
=
0
;
const
BOOKMARK_FOLDER
=
1
;
const
LIVEMARK_CONTAINER
=
2
;
const
ACTION_EDIT
=
0
;
const
ACTION_ADD
=
1
;
var
elementsHeight
=
new
Map
(
)
;
var
BookmarkPropertiesPanel
=
{
__strings
:
null
get
_strings
(
)
{
if
(
!
this
.
__strings
)
{
this
.
__strings
=
document
.
getElementById
(
"
stringBundle
"
)
;
}
return
this
.
__strings
;
}
_action
:
null
_itemType
:
null
_itemId
:
-
1
_uri
:
null
_loadInSidebar
:
false
_title
:
"
"
_description
:
"
"
_URIs
:
[
]
_keyword
:
"
"
_postData
:
null
_charSet
:
"
"
_feedURI
:
null
_siteURI
:
null
_defaultInsertionPoint
:
null
_hiddenRows
:
[
]
_getAcceptLabel
:
function
BPP__getAcceptLabel
(
)
{
if
(
this
.
_action
=
=
ACTION_ADD
)
{
if
(
this
.
_URIs
.
length
)
return
this
.
_strings
.
getString
(
"
dialogAcceptLabelAddMulti
"
)
;
if
(
this
.
_itemType
=
=
LIVEMARK_CONTAINER
)
return
this
.
_strings
.
getString
(
"
dialogAcceptLabelAddLivemark
"
)
;
if
(
this
.
_dummyItem
|
|
this
.
_loadInSidebar
)
return
this
.
_strings
.
getString
(
"
dialogAcceptLabelAddItem
"
)
;
return
this
.
_strings
.
getString
(
"
dialogAcceptLabelSaveItem
"
)
;
}
return
this
.
_strings
.
getString
(
"
dialogAcceptLabelEdit
"
)
;
}
_getDialogTitle
:
function
BPP__getDialogTitle
(
)
{
if
(
this
.
_action
=
=
ACTION_ADD
)
{
if
(
this
.
_itemType
=
=
BOOKMARK_ITEM
)
return
this
.
_strings
.
getString
(
"
dialogTitleAddBookmark
"
)
;
if
(
this
.
_itemType
=
=
LIVEMARK_CONTAINER
)
return
this
.
_strings
.
getString
(
"
dialogTitleAddLivemark
"
)
;
NS_ASSERT
(
this
.
_itemType
=
=
BOOKMARK_FOLDER
"
Unknown
item
type
"
)
;
if
(
this
.
_URIs
.
length
)
return
this
.
_strings
.
getString
(
"
dialogTitleAddMulti
"
)
;
return
this
.
_strings
.
getString
(
"
dialogTitleAddFolder
"
)
;
}
if
(
this
.
_action
=
=
ACTION_EDIT
)
{
return
this
.
_strings
.
getFormattedString
(
"
dialogTitleEdit
"
[
this
.
_title
]
)
;
}
return
"
"
;
}
async
_determineItemInfo
(
)
{
let
dialogInfo
=
window
.
arguments
[
0
]
;
this
.
_action
=
dialogInfo
.
action
=
=
"
add
"
?
ACTION_ADD
:
ACTION_EDIT
;
this
.
_hiddenRows
=
dialogInfo
.
hiddenRows
?
dialogInfo
.
hiddenRows
:
[
]
;
if
(
this
.
_action
=
=
ACTION_ADD
)
{
NS_ASSERT
(
"
type
"
in
dialogInfo
"
missing
type
property
for
add
action
"
)
;
if
(
"
title
"
in
dialogInfo
)
this
.
_title
=
dialogInfo
.
title
;
if
(
"
defaultInsertionPoint
"
in
dialogInfo
)
{
this
.
_defaultInsertionPoint
=
dialogInfo
.
defaultInsertionPoint
;
}
else
{
this
.
_defaultInsertionPoint
=
new
InsertionPoint
(
{
parentId
:
PlacesUtils
.
bookmarksMenuFolderId
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
}
)
;
}
switch
(
dialogInfo
.
type
)
{
case
"
bookmark
"
:
this
.
_itemType
=
BOOKMARK_ITEM
;
if
(
"
uri
"
in
dialogInfo
)
{
NS_ASSERT
(
dialogInfo
.
uri
instanceof
Ci
.
nsIURI
"
uri
property
should
be
a
uri
object
"
)
;
this
.
_uri
=
dialogInfo
.
uri
;
if
(
typeof
(
this
.
_title
)
!
=
"
string
"
)
{
this
.
_title
=
await
PlacesUtils
.
history
.
fetch
(
this
.
_uri
)
|
|
this
.
_uri
.
spec
;
}
}
else
{
this
.
_uri
=
Services
.
io
.
newURI
(
"
about
:
blank
"
)
;
this
.
_title
=
this
.
_strings
.
getString
(
"
newBookmarkDefault
"
)
;
this
.
_dummyItem
=
true
;
}
if
(
"
loadBookmarkInSidebar
"
in
dialogInfo
)
this
.
_loadInSidebar
=
dialogInfo
.
loadBookmarkInSidebar
;
if
(
"
keyword
"
in
dialogInfo
)
{
this
.
_keyword
=
dialogInfo
.
keyword
;
this
.
_isAddKeywordDialog
=
true
;
if
(
"
postData
"
in
dialogInfo
)
this
.
_postData
=
dialogInfo
.
postData
;
if
(
"
charSet
"
in
dialogInfo
)
this
.
_charSet
=
dialogInfo
.
charSet
;
}
break
;
case
"
folder
"
:
this
.
_itemType
=
BOOKMARK_FOLDER
;
if
(
!
this
.
_title
)
{
if
(
"
URIList
"
in
dialogInfo
)
{
this
.
_title
=
this
.
_strings
.
getString
(
"
bookmarkAllTabsDefault
"
)
;
this
.
_URIs
=
dialogInfo
.
URIList
;
}
else
this
.
_title
=
this
.
_strings
.
getString
(
"
newFolderDefault
"
)
;
this
.
_dummyItem
=
true
;
}
break
;
case
"
livemark
"
:
this
.
_itemType
=
LIVEMARK_CONTAINER
;
if
(
"
feedURI
"
in
dialogInfo
)
this
.
_feedURI
=
dialogInfo
.
feedURI
;
if
(
"
siteURI
"
in
dialogInfo
)
this
.
_siteURI
=
dialogInfo
.
siteURI
;
if
(
!
this
.
_title
)
{
if
(
this
.
_feedURI
)
{
this
.
_title
=
await
PlacesUtils
.
history
.
fetch
(
this
.
_feedURI
)
|
|
this
.
_feedURI
.
spec
;
}
else
this
.
_title
=
this
.
_strings
.
getString
(
"
newLivemarkDefault
"
)
;
}
}
if
(
"
description
"
in
dialogInfo
)
this
.
_description
=
dialogInfo
.
description
;
}
else
{
this
.
_node
=
dialogInfo
.
node
;
this
.
_title
=
this
.
_node
.
title
;
if
(
PlacesUtils
.
nodeIsFolder
(
this
.
_node
)
)
this
.
_itemType
=
BOOKMARK_FOLDER
;
else
if
(
PlacesUtils
.
nodeIsURI
(
this
.
_node
)
)
this
.
_itemType
=
BOOKMARK_ITEM
;
}
}
async
onDialogLoad
(
)
{
await
this
.
_determineItemInfo
(
)
;
document
.
title
=
this
.
_getDialogTitle
(
)
;
let
acceptButton
=
document
.
documentElement
.
getButton
(
"
accept
"
)
;
acceptButton
.
disabled
=
true
;
this
.
_initDialog
(
)
.
catch
(
ex
=
>
{
Components
.
utils
.
reportError
(
Failed
to
initialize
dialog
:
{
ex
}
)
;
}
)
;
}
async
_initDialog
(
)
{
let
acceptButton
=
document
.
documentElement
.
getButton
(
"
accept
"
)
;
acceptButton
.
label
=
this
.
_getAcceptLabel
(
)
;
let
acceptButtonDisabled
=
false
;
this
.
_height
=
window
.
outerHeight
;
this
.
_mutationObserver
=
new
MutationObserver
(
mutations
=
>
{
for
(
let
mutation
of
mutations
)
{
let
target
=
mutation
.
target
;
let
id
=
target
.
id
;
if
(
!
/
^
editBMPanel_
.
*
(
Row
|
Checkbox
)
/
.
test
(
id
)
)
continue
;
let
collapsed
=
target
.
getAttribute
(
"
collapsed
"
)
=
=
=
"
true
"
;
let
wasCollapsed
=
mutation
.
oldValue
=
=
=
"
true
"
;
if
(
collapsed
=
=
wasCollapsed
)
continue
;
if
(
collapsed
)
{
this
.
_height
-
=
elementsHeight
.
get
(
id
)
;
elementsHeight
.
delete
(
id
)
;
}
else
{
elementsHeight
.
set
(
id
target
.
boxObject
.
height
)
;
this
.
_height
+
=
elementsHeight
.
get
(
id
)
;
}
window
.
resizeTo
(
window
.
outerWidth
this
.
_height
)
;
}
}
)
;
this
.
_mutationObserver
.
observe
(
document
{
subtree
:
true
attributeOldValue
:
true
attributeFilter
:
[
"
collapsed
"
]
}
)
;
window
.
addEventListener
(
"
resize
"
this
)
;
switch
(
this
.
_action
)
{
case
ACTION_EDIT
:
gEditItemOverlay
.
initPanel
(
{
node
:
this
.
_node
hiddenRows
:
this
.
_hiddenRows
focusedElement
:
"
first
"
}
)
;
acceptButtonDisabled
=
gEditItemOverlay
.
readOnly
;
break
;
case
ACTION_ADD
:
this
.
_node
=
await
this
.
_promiseNewItem
(
)
;
gEditItemOverlay
.
initPanel
(
{
node
:
this
.
_node
hiddenRows
:
this
.
_hiddenRows
postData
:
this
.
_postData
focusedElement
:
"
first
"
}
)
;
let
locationField
=
this
.
_element
(
"
locationField
"
)
;
if
(
locationField
.
value
=
=
"
about
:
blank
"
)
locationField
.
value
=
"
"
;
if
(
this
.
_itemType
=
=
BOOKMARK_ITEM
)
acceptButtonDisabled
=
!
this
.
_inputIsValid
(
)
;
break
;
}
if
(
!
gEditItemOverlay
.
readOnly
)
{
if
(
this
.
_itemType
=
=
BOOKMARK_ITEM
)
{
this
.
_element
(
"
locationField
"
)
.
addEventListener
(
"
input
"
this
)
;
if
(
this
.
_isAddKeywordDialog
)
{
this
.
_element
(
"
keywordField
"
)
.
addEventListener
(
"
input
"
this
)
;
}
}
}
acceptButton
.
disabled
=
acceptButtonDisabled
;
}
handleEvent
:
function
BPP_handleEvent
(
aEvent
)
{
var
target
=
aEvent
.
target
;
switch
(
aEvent
.
type
)
{
case
"
input
"
:
if
(
target
.
id
=
=
"
editBMPanel_locationField
"
|
|
target
.
id
=
=
"
editBMPanel_keywordField
"
)
{
document
.
documentElement
.
getButton
(
"
accept
"
)
.
disabled
=
!
this
.
_inputIsValid
(
)
;
}
break
;
case
"
resize
"
:
for
(
let
[
id
oldHeight
]
of
elementsHeight
)
{
let
newHeight
=
document
.
getElementById
(
id
)
.
boxObject
.
height
;
this
.
_height
+
=
-
oldHeight
+
newHeight
;
elementsHeight
.
set
(
id
newHeight
)
;
}
break
;
}
}
QueryInterface
:
function
BPP_QueryInterface
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIDOMEventListener
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
return
this
;
throw
Cr
.
NS_NOINTERFACE
;
}
_element
:
function
BPP__element
(
aID
)
{
return
document
.
getElementById
(
"
editBMPanel_
"
+
aID
)
;
}
onDialogUnload
(
)
{
this
.
_mutationObserver
.
disconnect
(
)
;
delete
this
.
_mutationObserver
;
window
.
removeEventListener
(
"
resize
"
this
)
;
this
.
_element
(
"
locationField
"
)
.
removeEventListener
(
"
input
"
this
)
;
}
onDialogAccept
(
)
{
document
.
commandDispatcher
.
focusedElement
.
blur
(
)
;
gEditItemOverlay
.
uninitPanel
(
true
)
;
window
.
arguments
[
0
]
.
performed
=
true
;
}
onDialogCancel
(
)
{
gEditItemOverlay
.
uninitPanel
(
true
)
;
window
.
arguments
[
0
]
.
performed
=
false
;
}
_inputIsValid
:
function
BPP__inputIsValid
(
)
{
if
(
this
.
_itemType
=
=
BOOKMARK_ITEM
&
&
!
this
.
_containsValidURI
(
"
locationField
"
)
)
return
false
;
if
(
this
.
_isAddKeywordDialog
&
&
!
this
.
_element
(
"
keywordField
"
)
.
value
.
length
)
return
false
;
return
true
;
}
_containsValidURI
:
function
BPP__containsValidURI
(
aTextboxID
)
{
try
{
var
value
=
this
.
_element
(
aTextboxID
)
.
value
;
if
(
value
)
{
PlacesUIUtils
.
createFixedURI
(
value
)
;
return
true
;
}
}
catch
(
e
)
{
}
return
false
;
}
async
_getInsertionPointDetails
(
)
{
return
[
this
.
_defaultInsertionPoint
.
itemId
await
this
.
_defaultInsertionPoint
.
getIndex
(
)
this
.
_defaultInsertionPoint
.
guid
]
;
}
async
_promiseNewItem
(
)
{
let
[
containerId
index
parentGuid
]
=
await
this
.
_getInsertionPointDetails
(
)
;
let
annotations
=
[
]
;
if
(
this
.
_description
)
{
annotations
.
push
(
{
name
:
PlacesUIUtils
.
DESCRIPTION_ANNO
value
:
this
.
_description
}
)
;
}
if
(
this
.
_loadInSidebar
)
{
annotations
.
push
(
{
name
:
PlacesUIUtils
.
LOAD_IN_SIDEBAR_ANNO
value
:
true
}
)
;
}
let
itemGuid
;
let
info
=
{
parentGuid
index
title
:
this
.
_title
annotations
}
;
if
(
this
.
_itemType
=
=
BOOKMARK_ITEM
)
{
info
.
url
=
this
.
_uri
;
if
(
this
.
_keyword
)
info
.
keyword
=
this
.
_keyword
;
if
(
this
.
_postData
)
info
.
postData
=
this
.
_postData
;
if
(
this
.
_charSet
&
&
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
PlacesUtils
.
setCharsetForURI
(
this
.
_uri
this
.
_charSet
)
;
itemGuid
=
await
PlacesTransactions
.
NewBookmark
(
info
)
.
transact
(
)
;
}
else
if
(
this
.
_itemType
=
=
LIVEMARK_CONTAINER
)
{
info
.
feedUrl
=
this
.
_feedURI
;
if
(
this
.
_siteURI
)
info
.
siteUrl
=
this
.
_siteURI
;
itemGuid
=
await
PlacesTransactions
.
NewLivemark
(
info
)
.
transact
(
)
;
}
else
if
(
this
.
_itemType
=
=
BOOKMARK_FOLDER
)
{
info
.
children
=
this
.
_URIs
.
map
(
item
=
>
{
return
{
url
:
item
.
uri
title
:
item
.
title
}
;
}
)
;
itemGuid
=
await
PlacesTransactions
.
NewFolder
(
info
)
.
transact
(
)
;
}
else
{
throw
new
Error
(
unexpected
value
for
_itemType
:
{
this
.
_itemType
}
)
;
}
this
.
_itemGuid
=
itemGuid
;
this
.
_itemId
=
await
PlacesUtils
.
promiseItemId
(
itemGuid
)
;
return
Object
.
freeze
(
{
itemId
:
this
.
_itemId
bookmarkGuid
:
this
.
_itemGuid
title
:
this
.
_title
uri
:
this
.
_uri
?
this
.
_uri
.
spec
:
"
"
type
:
this
.
_itemType
=
=
BOOKMARK_ITEM
?
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_URI
:
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER
parent
:
{
itemId
:
containerId
bookmarkGuid
:
parentGuid
type
:
Ci
.
nsINavHistoryResultNode
.
RESULT_TYPE_FOLDER
}
}
)
;
}
}
;
