const
{
LinkPreview
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
browser
/
components
/
genai
/
LinkPreview
.
sys
.
mjs
"
)
;
const
{
LinkPreviewModel
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
browser
/
components
/
genai
/
LinkPreviewModel
.
sys
.
mjs
"
)
;
const
{
Region
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Region
.
sys
.
mjs
"
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
const
TEST_LINK_URL
=
"
https
:
/
/
example
.
com
"
;
add_task
(
async
function
test_pref_updates_existing_cards
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
true
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
]
]
}
)
;
const
generateStub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
;
const
READABLE_PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
READABLE_PAGE_URL
{
}
)
;
const
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
const
card
=
panel
.
querySelector
(
"
link
-
preview
-
card
"
)
;
ok
(
card
"
card
created
for
link
preview
"
)
;
is
(
card
.
optin
true
"
card
has
optin
=
true
initially
"
)
;
is
(
card
.
collapsed
false
"
card
has
collapsed
=
false
initially
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
optin
"
false
]
]
}
)
;
is
(
card
.
optin
false
"
card
optin
updated
to
false
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
true
]
]
}
)
;
is
(
card
.
collapsed
true
"
card
collapsed
updated
to
true
"
)
;
panel
.
remove
(
)
;
generateStub
.
restore
(
)
;
LinkPreview
.
keyboardComboActive
=
false
;
}
)
;
add_task
(
async
function
test_no_keypoints_when_optin_false
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
false
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
]
]
}
)
;
const
generateStub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
{
}
)
;
let
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
is
(
generateStub
.
callCount
0
"
generateTextAI
should
not
be
called
when
optin
is
false
"
)
;
panel
.
remove
(
)
;
LinkPreview
.
keyboardComboActive
=
false
;
generateStub
.
restore
(
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
ml
.
linkPreview
.
optin
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
ml
.
linkPreview
.
collapsed
"
)
;
}
)
;
add_task
(
async
function
test_no_keypoints_when_collapsed_true
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
true
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
true
]
]
}
)
;
const
generateStub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
;
const
READABLE_PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
READABLE_PAGE_URL
{
}
)
;
const
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
is
(
generateStub
.
callCount
0
"
generateTextAI
should
not
be
called
when
collapsed
is
true
"
)
;
const
card
=
panel
.
querySelector
(
"
link
-
preview
-
card
"
)
;
ok
(
card
"
card
created
for
link
preview
"
)
;
ok
(
!
card
.
generating
"
card
should
not
be
in
generating
state
"
)
;
is
(
card
.
optin
true
"
card
has
optin
=
true
"
)
;
is
(
card
.
collapsed
true
"
card
has
collapsed
=
true
"
)
;
panel
.
remove
(
)
;
generateStub
.
restore
(
)
;
LinkPreview
.
keyboardComboActive
=
false
;
}
)
;
add_task
(
async
function
test_generate_keypoints_when_opted_in
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
true
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
]
]
}
)
;
let
onDownload
toResolve
;
const
stub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
.
callsFake
(
async
(
text
options
)
=
>
{
onDownload
=
options
.
onDownload
;
toResolve
=
Promise
.
withResolvers
(
)
;
return
toResolve
.
promise
;
}
)
;
const
READABLE_PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
READABLE_PAGE_URL
{
}
)
;
const
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
is
(
stub
.
callCount
1
"
generateTextAI
should
be
called
when
optin
=
true
and
collapsed
=
false
"
)
;
const
card
=
panel
.
querySelector
(
"
link
-
preview
-
card
"
)
;
onDownload
(
false
)
;
ok
(
card
"
card
created
for
link
preview
"
)
;
ok
(
card
.
generating
"
card
should
be
in
generating
state
"
)
;
is
(
card
.
optin
true
"
card
has
optin
=
true
"
)
;
is
(
card
.
collapsed
false
"
card
has
collapsed
=
false
"
)
;
if
(
toResolve
)
{
toResolve
.
resolve
(
)
;
await
LinkPreview
.
lastRequest
;
}
panel
.
remove
(
)
;
stub
.
restore
(
)
;
LinkPreview
.
keyboardComboActive
=
false
;
}
)
;
add_task
(
async
function
test_no_keypoints_when_opted_in_but_collapsed
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
true
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
true
]
]
}
)
;
const
generateStub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
;
const
READABLE_PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
READABLE_PAGE_URL
{
}
)
;
const
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
is
(
generateStub
.
callCount
0
"
generateTextAI
should
not
be
called
when
collapsed
is
true
"
)
;
const
card
=
panel
.
querySelector
(
"
link
-
preview
-
card
"
)
;
ok
(
card
"
card
created
for
link
preview
"
)
;
ok
(
!
card
.
generating
"
card
should
not
be
in
generating
state
"
)
;
is
(
card
.
optin
true
"
card
has
optin
=
true
"
)
;
is
(
card
.
collapsed
true
"
card
has
collapsed
=
true
"
)
;
panel
.
remove
(
)
;
generateStub
.
restore
(
)
;
LinkPreview
.
keyboardComboActive
=
false
;
}
)
;
add_task
(
async
function
test_model_optin_deny_action
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
false
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
]
]
}
)
;
const
generateStub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
;
const
READABLE_PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
READABLE_PAGE_URL
{
}
)
;
const
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
const
card
=
panel
.
querySelector
(
"
link
-
preview
-
card
"
)
;
ok
(
card
"
card
created
for
link
preview
"
)
;
const
modelOptinElement
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
if
(
card
.
shadowRoot
)
{
return
card
.
shadowRoot
.
querySelector
(
"
model
-
optin
"
)
;
}
return
null
;
}
"
Waiting
for
model
-
optin
element
"
)
;
ok
(
modelOptinElement
"
model
-
optin
element
is
present
"
)
;
const
optinDenyEvent
=
new
CustomEvent
(
"
MlModelOptinDeny
"
{
bubbles
:
true
composed
:
true
}
)
;
modelOptinElement
.
dispatchEvent
(
optinDenyEvent
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
ml
.
linkPreview
.
optin
"
)
false
"
optin
preference
should
remain
false
after
denying
"
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
ml
.
linkPreview
.
collapsed
"
)
true
"
collapsed
preference
should
be
true
after
denying
"
)
;
is
(
generateStub
.
callCount
0
"
generateTextAI
should
not
be
called
after
user
denies
opt
-
in
"
)
;
panel
.
remove
(
)
;
generateStub
.
restore
(
)
;
LinkPreview
.
keyboardComboActive
=
false
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
ml
.
linkPreview
.
optin
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
)
;
}
)
;
add_task
(
async
function
test_model_optin_confirm_action
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
false
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
]
]
}
)
;
const
generateStub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
;
const
READABLE_PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
READABLE_PAGE_URL
{
}
)
;
const
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
const
card
=
panel
.
querySelector
(
"
link
-
preview
-
card
"
)
;
ok
(
card
"
card
created
for
link
preview
"
)
;
const
modelOptinElement
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
if
(
card
.
shadowRoot
)
{
return
card
.
shadowRoot
.
querySelector
(
"
model
-
optin
"
)
;
}
return
null
;
}
"
Waiting
for
model
-
optin
element
"
)
;
ok
(
modelOptinElement
"
model
-
optin
element
is
present
"
)
;
const
optinConfirmEvent
=
new
CustomEvent
(
"
MlModelOptinConfirm
"
{
bubbles
:
true
composed
:
true
}
)
;
modelOptinElement
.
dispatchEvent
(
optinConfirmEvent
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
ml
.
linkPreview
.
optin
"
)
true
"
optin
preference
should
be
set
to
true
after
confirming
"
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
ml
.
linkPreview
.
collapsed
"
)
false
"
collapsed
preference
should
remain
false
after
confirming
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
generateStub
.
callCount
>
0
"
Waiting
for
generateTextAI
to
be
called
"
)
;
Assert
.
greater
(
generateStub
.
callCount
0
"
generateTextAI
should
be
called
after
user
confirms
opt
-
in
"
)
;
panel
.
remove
(
)
;
generateStub
.
restore
(
)
;
LinkPreview
.
keyboardComboActive
=
false
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
ml
.
linkPreview
.
optin
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
)
;
}
)
;
add_task
(
async
function
test_no_optin_or_keypoints_in_disallowed_region
(
)
{
const
currentRegion
=
Region
.
home
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
[
"
browser
.
ml
.
linkPreview
.
optin
"
false
]
[
"
browser
.
ml
.
linkPreview
.
collapsed
"
false
]
[
"
browser
.
ml
.
linkPreview
.
noKeyPointsRegions
"
currentRegion
]
]
}
)
;
const
generateStub
=
sinon
.
stub
(
LinkPreviewModel
"
generateTextAI
"
)
;
LinkPreview
.
keyboardComboActive
=
true
;
XULBrowserWindow
.
setOverLink
(
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
genai
/
tests
/
browser
/
data
/
readableEn
.
html
"
{
}
)
;
let
panel
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
link
-
preview
-
panel
"
)
)
;
await
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
const
card
=
panel
.
querySelector
(
"
link
-
preview
-
card
"
)
;
ok
(
card
"
card
created
for
link
preview
"
)
;
ok
(
!
LinkPreview
.
canShowKeyPoints
"
LinkPreview
should
indicate
key
points
cannot
be
shown
"
)
;
const
modelOptinElement
=
card
.
shadowRoot
.
querySelector
(
"
model
-
optin
"
)
;
ok
(
!
modelOptinElement
"
model
-
optin
element
should
NOT
be
present
"
)
;
is
(
generateStub
.
callCount
0
"
generateTextAI
should
not
be
called
in
a
disallowed
region
"
)
;
panel
.
remove
(
)
;
generateStub
.
restore
(
)
;
}
)
;
