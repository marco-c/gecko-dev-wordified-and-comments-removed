const
{
LinkPreview
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
browser
/
components
/
genai
/
LinkPreview
.
sys
.
mjs
"
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
const
TEST_LINK_URL
=
"
https
:
/
/
example
.
com
"
;
add_task
(
async
function
test_link_preview_with_alt_key_event
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
true
]
]
}
)
;
let
stub
=
sinon
.
stub
(
LinkPreview
"
_maybeLinkPreview
"
)
;
let
keydownEvent
=
new
KeyboardEvent
(
"
keydown
"
{
bubbles
:
true
cancelable
:
true
altKey
:
true
}
)
;
window
.
dispatchEvent
(
keydownEvent
)
;
XULBrowserWindow
.
setOverLink
(
TEST_LINK_URL
{
}
)
;
ok
(
stub
.
calledWith
(
window
)
"
_maybeLinkPreview
was
called
with
the
correct
window
"
)
;
stub
.
restore
(
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
ml
.
linkPreview
.
enabled
"
)
;
}
)
;
add_task
(
async
function
test_no_event_triggered_when_disabled_with_alt_key
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
linkPreview
.
enabled
"
false
]
]
}
)
;
let
stub
=
sinon
.
stub
(
LinkPreview
"
_maybeLinkPreview
"
)
;
let
keydownEvent
=
new
KeyboardEvent
(
"
keydown
"
{
bubbles
:
true
cancelable
:
true
altKey
:
true
}
)
;
window
.
dispatchEvent
(
keydownEvent
)
;
XULBrowserWindow
.
setOverLink
(
TEST_LINK_URL
{
}
)
;
ok
(
!
stub
.
called
"
_maybeLinkPreview
should
not
be
called
when
the
feature
is
disabled
"
)
;
stub
.
restore
(
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
ml
.
linkPreview
.
enabled
"
)
;
}
)
;
