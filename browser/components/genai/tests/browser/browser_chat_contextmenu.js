async
function
openContextMenu
(
)
{
const
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
const
promise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
null
0
0
{
type
:
"
contextmenu
"
}
gBrowser
.
selectedBrowser
)
;
await
promise
;
}
async
function
hideContextMenu
(
)
{
const
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
const
promise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
contextMenu
.
hidePopup
(
)
;
await
promise
;
}
add_task
(
async
function
test_hidden_menu
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
openContextMenu
(
)
;
Assert
.
ok
(
document
.
getElementById
(
"
context
-
ask
-
chat
"
)
.
hidden
"
Ask
chat
menu
is
hidden
"
)
;
await
hideContextMenu
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_menu_enabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
chat
.
provider
"
"
http
:
/
/
localhost
:
8080
"
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
openContextMenu
(
)
;
Assert
.
ok
(
!
document
.
getElementById
(
"
context
-
ask
-
chat
"
)
.
hidden
"
Ask
chat
menu
is
shown
"
)
;
await
hideContextMenu
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_open_tab
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
chat
.
provider
"
"
http
:
/
/
localhost
:
8080
"
]
[
"
browser
.
ml
.
chat
.
sidebar
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
const
origTabs
=
gBrowser
.
tabs
.
length
;
await
openContextMenu
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
(
)
=
>
document
.
getElementById
(
"
context
-
ask
-
chat
"
)
.
getItemAtIndex
(
0
)
.
click
(
)
)
;
await
hideContextMenu
(
)
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
origTabs
+
1
"
Chat
opened
tabs
"
)
;
Assert
.
ok
(
!
SidebarController
.
isOpen
"
Chat
did
not
open
sidebar
"
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
}
)
;
add_task
(
async
function
test_open_sidebar
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
ml
.
chat
.
provider
"
"
http
:
/
/
localhost
:
8080
"
]
[
"
browser
.
ml
.
chat
.
sidebar
"
true
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
const
origTabs
=
gBrowser
.
tabs
.
length
;
await
openContextMenu
(
)
;
document
.
getElementById
(
"
context
-
ask
-
chat
"
)
.
getItemAtIndex
(
0
)
.
click
(
)
;
await
hideContextMenu
(
)
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
origTabs
"
Chat
did
not
open
tab
"
)
;
Assert
.
ok
(
SidebarController
.
isOpen
"
Chat
opened
sidebar
"
)
;
SidebarController
.
hide
(
)
;
}
)
;
const
events
=
Glean
.
genaiChatbot
.
contextmenuPromptClick
.
testGetValue
(
)
;
Assert
.
equal
(
events
.
length
1
"
One
context
menu
click
"
)
;
Assert
.
equal
(
events
[
0
]
.
extra
.
prompt
"
summarize
"
"
Picked
summarize
"
)
;
Assert
.
equal
(
events
[
0
]
.
extra
.
provider
"
localhost
"
"
With
localhost
"
)
;
Assert
.
equal
(
events
[
0
]
.
extra
.
selection
"
0
"
"
No
selection
"
)
;
}
)
;
