"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
SaveToPocket
:
"
chrome
:
/
/
pocket
/
content
/
SaveToPocket
.
sys
.
mjs
"
}
)
;
function
test_runner
(
test
)
{
let
testTask
=
async
(
)
=
>
{
const
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
stub
(
pktApi
"
isUserLoggedIn
"
)
.
callsFake
(
(
)
=
>
true
)
;
sandbox
.
stub
(
pktApi
"
addLink
"
)
.
callsFake
(
(
)
=
>
true
)
;
try
{
await
test
(
{
sandbox
}
)
;
}
finally
{
sandbox
.
restore
(
)
;
}
}
;
Object
.
defineProperty
(
testTask
"
name
"
{
value
:
test
.
name
}
)
;
add_task
(
testTask
)
;
}
async
function
isPocketPanelShown
(
)
{
info
(
"
clicking
on
pocket
button
in
toolbar
"
)
;
let
pocketPanelShowing
=
BrowserTestUtils
.
waitForEvent
(
document
"
popupshown
"
true
)
;
return
pocketPanelShowing
;
}
async
function
isPocketPanelHidden
(
)
{
let
pocketPanelHidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
)
;
return
pocketPanelHidden
;
}
function
fakeSavingPage
(
)
{
SaveToPocket
.
itemSaved
(
)
;
SaveToPocket
.
updateToolbarNodeState
(
window
)
;
}
function
checkPanelOpen
(
)
{
let
pocketButton
=
document
.
getElementById
(
"
save
-
to
-
pocket
-
button
"
)
;
is
(
pocketButton
.
open
true
"
Pocket
button
is
open
"
)
;
is
(
pocketButton
.
getAttribute
(
"
pocketed
"
)
"
true
"
"
Pocket
item
is
pocketed
"
)
;
}
function
checkPanelClosed
(
)
{
let
pocketButton
=
document
.
getElementById
(
"
save
-
to
-
pocket
-
button
"
)
;
is
(
pocketButton
.
open
false
"
Pocket
button
is
closed
"
)
;
is
(
pocketButton
.
getAttribute
(
"
pocketed
"
)
"
"
"
Pocket
item
is
not
pocketed
"
)
;
}
test_runner
(
async
function
test_pocketButtonState_changeTabs
(
{
sandbox
}
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
pocket
/
test
/
test
.
html
"
)
;
let
pocketPanelShown
=
isPocketPanelShown
(
)
;
let
pocketButton
=
document
.
getElementById
(
"
save
-
to
-
pocket
-
button
"
)
;
pocketButton
.
click
(
)
;
await
pocketPanelShown
;
fakeSavingPage
(
)
;
checkPanelOpen
(
)
;
let
pocketPanelHidden
=
isPocketPanelHidden
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
0
]
)
;
await
pocketPanelHidden
;
checkPanelClosed
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
test_runner
(
async
function
test_pocketButtonState_changeLocation
(
{
sandbox
}
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
pocket
/
test
/
test
.
html
"
)
;
let
pocketPanelShown
=
isPocketPanelShown
(
)
;
let
pocketButton
=
document
.
getElementById
(
"
save
-
to
-
pocket
-
button
"
)
;
pocketButton
.
click
(
)
;
await
pocketPanelShown
;
fakeSavingPage
(
)
;
checkPanelOpen
(
)
;
let
pocketPanelHidden
=
isPocketPanelHidden
(
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
"
about
:
robots
"
)
;
await
loaded
;
await
pocketPanelHidden
;
checkPanelClosed
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
