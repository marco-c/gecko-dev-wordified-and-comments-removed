let
enabledOnStartup
=
false
;
function
promisePocketEnabled
(
)
{
if
(
Services
.
prefs
.
getPrefType
(
"
extensions
.
pocket
.
enabled
"
)
!
=
Services
.
prefs
.
PREF_INVALID
&
&
Services
.
prefs
.
getBoolPref
(
"
extensions
.
pocket
.
enabled
"
)
)
{
info
(
"
pocket
was
already
enabled
assuming
enabled
by
default
for
tests
"
)
;
enabledOnStartup
=
true
;
return
Promise
.
resolve
(
true
)
;
}
info
(
"
pocket
is
not
enabled
"
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
pocket
.
enabled
"
true
)
;
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
PageActions
.
actionForID
(
"
pocket
"
)
;
}
)
;
}
function
promisePocketDisabled
(
)
{
if
(
Services
.
prefs
.
getPrefType
(
"
extensions
.
pocket
.
enabled
"
)
=
=
Services
.
prefs
.
PREF_INVALID
|
|
!
Services
.
prefs
.
getBoolPref
(
"
extensions
.
pocket
.
enabled
"
)
)
{
info
(
"
pocket
-
button
already
disabled
"
)
;
return
Promise
.
resolve
(
true
)
;
}
info
(
"
reset
pocket
enabled
pref
"
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
pocket
.
enabled
"
false
)
;
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
PageActions
.
actionForID
(
"
pocket
"
)
;
}
)
;
}
function
promisePocketReset
(
)
{
if
(
enabledOnStartup
)
{
info
(
"
reset
is
enabling
pocket
addon
"
)
;
return
promisePocketEnabled
(
)
;
}
info
(
"
reset
is
disabling
pocket
addon
"
)
;
return
promisePocketDisabled
(
)
;
}
function
checkElements
(
expectPresent
l
)
{
for
(
let
id
of
l
)
{
let
el
=
document
.
getElementById
(
id
)
|
|
gNavToolbox
.
palette
.
querySelector
(
"
#
"
+
id
)
;
is
(
!
!
el
&
&
!
el
.
hidden
expectPresent
"
element
"
+
id
+
(
expectPresent
?
"
is
"
:
"
is
not
"
)
+
"
present
"
)
;
}
}
