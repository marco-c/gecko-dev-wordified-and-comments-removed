"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
pktTelemetry
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
PingCentre
"
"
resource
:
/
/
/
modules
/
PingCentre
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
pktApi
"
"
chrome
:
/
/
pocket
/
content
/
pktApi
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
}
)
;
const
STRUCTURED_INGESTION_NAMESPACE_AS
=
"
activity
-
stream
"
;
const
STRUCTURED_INGESTION_ENDPOINT_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
.
structuredIngestion
.
endpoint
"
;
const
POCKET_TELEMETRY_TOPIC
=
"
pocket
"
;
const
PREF_IMPRESSION_ID
=
"
browser
.
newtabpage
.
activity
-
stream
.
impressionId
"
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
pingCentre
"
(
)
=
>
{
return
new
lazy
.
PingCentre
(
{
topic
:
POCKET_TELEMETRY_TOPIC
}
)
;
}
)
;
var
pktTelemetry
=
{
get
structuredIngestionEndpointBase
(
)
{
if
(
!
this
.
_structuredIngestionEndpointBase
)
{
this
.
_structuredIngestionEndpointBase
=
Services
.
prefs
.
getStringPref
(
STRUCTURED_INGESTION_ENDPOINT_PREF
"
"
)
;
}
return
this
.
_structuredIngestionEndpointBase
;
}
get
impressionId
(
)
{
if
(
!
this
.
_impressionId
)
{
this
.
_impressionId
=
this
.
getOrCreateImpressionId
(
)
;
}
return
this
.
_impressionId
;
}
getOrCreateImpressionId
(
)
{
let
impressionId
=
Services
.
prefs
.
getStringPref
(
PREF_IMPRESSION_ID
"
"
)
;
if
(
!
impressionId
)
{
impressionId
=
String
(
Services
.
uuid
.
generateUUID
(
)
)
;
Services
.
prefs
.
setStringPref
(
PREF_IMPRESSION_ID
impressionId
)
;
}
return
impressionId
;
}
createPingPayload
(
data
)
{
return
{
.
.
.
data
impression_id
:
this
.
impressionId
pocket_logged_in_status
:
lazy
.
pktApi
.
isUserLoggedIn
(
)
profile_creation_date
:
this
.
_profileCreationDate
(
)
}
;
}
_profileCreationDate
(
)
{
return
(
lazy
.
TelemetryEnvironment
.
currentEnvironment
.
profile
.
resetDate
|
|
lazy
.
TelemetryEnvironment
.
currentEnvironment
.
profile
.
creationDate
)
;
}
_generateUUID
(
)
{
return
String
(
Services
.
uuid
.
generateUUID
(
)
)
;
}
_generateStructuredIngestionEndpoint
(
)
{
const
uuid
=
this
.
_generateUUID
(
)
;
const
docID
=
uuid
.
slice
(
1
-
1
)
;
const
extension
=
{
STRUCTURED_INGESTION_NAMESPACE_AS
}
/
pocket
-
button
/
1
/
{
docID
}
;
return
{
this
.
structuredIngestionEndpointBase
}
/
{
extension
}
;
}
sendStructuredIngestionEvent
(
eventObject
)
{
lazy
.
pingCentre
.
sendStructuredIngestionPing
(
eventObject
this
.
_generateStructuredIngestionEndpoint
(
)
)
;
}
}
;
