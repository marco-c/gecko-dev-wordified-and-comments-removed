ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ReaderMode
"
"
resource
:
/
/
gre
/
modules
/
ReaderMode
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
pktApi
"
"
chrome
:
/
/
pocket
/
content
/
pktApi
.
jsm
"
)
;
var
pktUI
=
(
function
(
)
{
var
_panelId
=
0
;
var
overflowMenuWidth
=
230
;
var
overflowMenuHeight
=
475
;
var
savePanelWidth
=
350
;
var
savePanelHeights
=
{
collapsed
:
153
expanded
:
272
}
;
function
tryToSaveCurrentPage
(
)
{
tryToSaveUrl
(
getCurrentUrl
(
)
getCurrentTitle
(
)
)
;
}
function
tryToSaveUrl
(
url
title
)
{
if
(
pktApi
.
isUserLoggedIn
(
)
)
{
saveAndShowConfirmation
(
url
title
)
;
return
;
}
showSignUp
(
)
;
}
function
showSignUp
(
)
{
if
(
pktApi
.
getSignupPanelTabTestVariant
(
)
=
=
"
v2
"
)
{
let
site
=
Services
.
prefs
.
getCharPref
(
"
extensions
.
pocket
.
site
"
)
;
openTabWithUrl
(
"
https
:
/
/
"
+
site
+
"
/
firefox_learnmore
?
s
=
ffi
&
t
=
autoredirect
&
tv
=
page_learnmore
&
src
=
ff_ext
"
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
null
)
;
getPanel
(
)
.
hidePopup
(
)
;
return
;
}
getFirefoxAccountSignedInUser
(
function
(
userdata
)
{
var
fxasignedin
=
typeof
userdata
=
=
"
object
"
&
&
userdata
!
=
=
null
?
"
1
"
:
"
0
"
;
var
startheight
=
490
;
var
inOverflowMenu
=
isInOverflowMenu
(
)
;
var
controlvariant
=
pktApi
.
getSignupPanelTabTestVariant
(
)
=
=
"
control
"
;
if
(
inOverflowMenu
)
{
startheight
=
overflowMenuHeight
;
}
else
{
startheight
=
460
;
if
(
fxasignedin
=
=
"
1
"
)
{
startheight
=
406
;
}
}
if
(
!
controlvariant
)
{
startheight
=
427
;
}
var
variant
;
if
(
inOverflowMenu
)
{
variant
=
"
overflow
"
;
}
else
{
variant
=
"
storyboard_lm
"
;
}
showPanel
(
"
about
:
pocket
-
signup
?
pockethost
=
"
+
Services
.
prefs
.
getCharPref
(
"
extensions
.
pocket
.
site
"
)
+
"
&
fxasignedin
=
"
+
fxasignedin
+
"
&
variant
=
"
+
variant
+
"
&
controlvariant
=
"
+
controlvariant
+
"
&
inoverflowmenu
=
"
+
inOverflowMenu
+
"
&
locale
=
"
+
getUILocale
(
)
{
width
:
inOverflowMenu
?
overflowMenuWidth
:
300
height
:
startheight
}
)
;
}
)
;
}
function
saveAndShowConfirmation
(
url
title
)
{
if
(
typeof
url
!
=
=
"
undefined
"
&
&
url
.
startsWith
(
"
about
:
reader
?
url
=
"
)
)
{
url
=
ReaderMode
.
getOriginalUrl
(
url
)
;
}
var
isValidURL
=
typeof
url
!
=
=
"
undefined
"
&
&
(
url
.
startsWith
(
"
http
"
)
|
|
url
.
startsWith
(
"
https
"
)
)
;
var
inOverflowMenu
=
isInOverflowMenu
(
)
;
var
startheight
=
pktApi
.
isPremiumUser
(
)
&
&
isValidURL
?
savePanelHeights
.
expanded
:
savePanelHeights
.
collapsed
;
if
(
inOverflowMenu
)
{
startheight
=
overflowMenuHeight
;
}
getFirefoxAccountSignedInUser
(
function
(
userdata
)
{
var
panelId
=
showPanel
(
"
about
:
pocket
-
saved
?
pockethost
=
"
+
Services
.
prefs
.
getCharPref
(
"
extensions
.
pocket
.
site
"
)
+
"
&
premiumStatus
=
"
+
(
pktApi
.
isPremiumUser
(
)
?
"
1
"
:
"
0
"
)
+
"
&
fxasignedin
=
"
+
(
typeof
userdata
=
=
"
object
"
&
&
userdata
!
=
=
null
?
"
1
"
:
"
0
"
)
+
"
&
inoverflowmenu
=
"
+
inOverflowMenu
+
"
&
locale
=
"
+
getUILocale
(
)
{
onShow
(
)
{
var
saveLinkMessageId
=
"
saveLink
"
;
getPanelFrame
(
)
.
setAttribute
(
"
itemAdded
"
"
false
"
)
;
if
(
!
isValidURL
)
{
let
error
=
{
message
:
"
Only
links
can
be
saved
"
localizedKey
:
"
onlylinkssaved
"
}
;
pktUIMessaging
.
sendErrorMessageToPanel
(
panelId
saveLinkMessageId
error
)
;
return
;
}
if
(
!
navigator
.
onLine
)
{
let
error
=
{
message
:
"
You
must
be
connected
to
the
Internet
in
order
to
save
to
Pocket
.
Please
connect
to
the
Internet
and
try
again
.
"
}
;
pktUIMessaging
.
sendErrorMessageToPanel
(
panelId
saveLinkMessageId
error
)
;
return
;
}
var
options
=
{
success
(
data
request
)
{
var
item
=
data
.
item
;
var
ho2
=
data
.
ho2
;
var
accountState
=
data
.
account_state
;
var
displayName
=
data
.
display_name
;
var
successResponse
=
{
status
:
"
success
"
accountState
displayName
item
ho2
}
;
pktUIMessaging
.
sendMessageToPanel
(
panelId
saveLinkMessageId
successResponse
)
;
getPanelFrame
(
)
.
setAttribute
(
"
itemAdded
"
"
true
"
)
;
}
error
(
error
request
)
{
if
(
request
.
status
=
=
=
401
)
{
showSignUp
(
)
;
return
;
}
var
errorMessage
=
error
.
message
|
|
"
There
was
an
error
when
trying
to
save
to
Pocket
.
"
;
var
panelError
=
{
message
:
errorMessage
}
;
pktUIMessaging
.
sendErrorMessageToPanel
(
panelId
saveLinkMessageId
panelError
)
;
}
}
;
if
(
typeof
title
!
=
=
"
undefined
"
)
{
options
.
title
=
title
;
}
pktApi
.
addLink
(
url
options
)
;
}
width
:
inOverflowMenu
?
overflowMenuWidth
:
savePanelWidth
height
:
startheight
}
)
;
}
)
;
}
function
showPanel
(
url
options
)
{
_panelId
+
=
1
;
url
+
=
"
&
panelId
=
"
+
_panelId
;
var
iframe
=
getPanelFrame
(
)
;
options
.
onShow
=
options
.
onShow
|
|
(
(
)
=
>
{
}
)
;
registerEventMessages
(
)
;
iframe
.
setAttribute
(
"
src
"
url
)
;
if
(
iframe
.
contentDocument
&
&
iframe
.
contentDocument
.
readyState
=
=
"
complete
"
&
&
iframe
.
contentDocument
.
documentURI
!
=
"
about
:
blank
"
)
{
options
.
onShow
(
)
;
}
else
{
iframe
.
addEventListener
(
"
load
"
options
.
onShow
{
once
:
true
capture
:
true
}
)
;
}
resizePanel
(
{
width
:
options
.
width
height
:
options
.
height
}
)
;
return
_panelId
;
}
function
resizePanel
(
options
)
{
var
iframe
=
getPanelFrame
(
)
;
iframe
.
style
.
width
=
options
.
width
+
"
px
"
;
iframe
.
style
.
height
=
options
.
height
+
"
px
"
;
}
function
registerEventMessages
(
)
{
var
iframe
=
getPanelFrame
(
)
;
var
didInitAttributeKey
=
"
did_init
"
;
var
didInitMessageListener
=
iframe
.
getAttribute
(
didInitAttributeKey
)
;
if
(
typeof
didInitMessageListener
!
=
=
"
undefined
"
&
&
didInitMessageListener
=
=
1
)
{
return
;
}
iframe
.
setAttribute
(
didInitAttributeKey
1
)
;
var
_showMessageId
=
"
show
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_showMessageId
function
(
panelId
data
)
{
pktUIMessaging
.
sendMessageToPanel
(
panelId
_showMessageId
)
;
}
)
;
var
_openTabWithUrlMessageId
=
"
openTabWithUrl
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_openTabWithUrlMessageId
function
(
panelId
data
contentPrincipal
csp
)
{
try
{
urlSecurityCheck
(
data
.
url
contentPrincipal
Services
.
scriptSecurityManager
.
DISALLOW_INHERIT_PRINCIPAL
)
;
}
catch
(
ex
)
{
return
;
}
var
url
=
data
.
url
;
openTabWithUrl
(
url
contentPrincipal
csp
)
;
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_openTabWithUrlMessageId
url
)
;
}
)
;
var
_closeMessageId
=
"
close
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_closeMessageId
function
(
panelId
data
)
{
getPanel
(
)
.
hidePopup
(
)
;
}
)
;
var
_getCurrentURLMessageId
=
"
getCurrentURL
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_getCurrentURLMessageId
function
(
panelId
data
)
{
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_getCurrentURLMessageId
getCurrentUrl
(
)
)
;
}
)
;
var
_getArticleInfoMessageId
=
"
getArticleInfo
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_getArticleInfoMessageId
function
(
panelId
data
)
{
pktApi
.
getArticleInfo
(
getCurrentUrl
(
)
{
success
(
res
req
)
{
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_getArticleInfoMessageId
res
)
;
}
error
(
err
req
)
{
err
.
fallback_title
=
getCurrentTitle
(
)
;
err
.
fallback_domain
=
new
URL
(
getCurrentUrl
(
)
)
.
hostname
;
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_getArticleInfoMessageId
err
)
;
}
}
)
;
}
)
;
var
_getMobileDownloadMessageId
=
"
getMobileDownload
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_getMobileDownloadMessageId
function
(
panelId
data
)
{
pktApi
.
getMobileDownload
(
{
success
(
res
req
)
{
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_getMobileDownloadMessageId
res
)
;
}
error
(
err
req
)
{
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_getMobileDownloadMessageId
err
)
;
}
}
)
;
}
)
;
var
_resizePanelMessageId
=
"
resizePanel
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_resizePanelMessageId
function
(
panelId
data
)
{
resizePanel
(
data
)
;
}
)
;
pktUIMessaging
.
addMessageListener
(
iframe
"
listenerReady
"
function
(
panelId
data
)
{
}
)
;
pktUIMessaging
.
addMessageListener
(
iframe
"
collapseSavePanel
"
function
(
panelId
data
)
{
if
(
!
pktApi
.
isPremiumUser
(
)
&
&
!
isInOverflowMenu
(
)
)
{
resizePanel
(
{
width
:
savePanelWidth
height
:
savePanelHeights
.
collapsed
}
)
;
}
}
)
;
pktUIMessaging
.
addMessageListener
(
iframe
"
expandSavePanel
"
function
(
panelId
data
)
{
if
(
!
isInOverflowMenu
(
)
)
{
resizePanel
(
{
width
:
savePanelWidth
height
:
savePanelHeights
.
expanded
}
)
;
}
}
)
;
var
_getTagsMessageId
=
"
getTags
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_getTagsMessageId
function
(
panelId
data
)
{
pktApi
.
getTags
(
function
(
tags
usedTags
)
{
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_getTagsMessageId
{
tags
usedTags
}
)
;
}
)
;
}
)
;
var
_getSuggestedTagsMessageId
=
"
getSuggestedTags
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_getSuggestedTagsMessageId
function
(
panelId
data
)
{
pktApi
.
getSuggestedTagsForURL
(
data
.
url
{
success
(
data
response
)
{
var
suggestedTags
=
data
.
suggested_tags
;
var
successResponse
=
{
status
:
"
success
"
value
:
{
suggestedTags
}
}
;
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_getSuggestedTagsMessageId
successResponse
)
;
}
error
(
error
response
)
{
pktUIMessaging
.
sendErrorResponseMessageToPanel
(
panelId
_getSuggestedTagsMessageId
error
)
;
}
}
)
;
}
)
;
var
_addTagsMessageId
=
"
addTags
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_addTagsMessageId
function
(
panelId
data
)
{
pktApi
.
addTagsToURL
(
data
.
url
data
.
tags
{
success
(
data
response
)
{
var
successResponse
=
{
status
:
"
success
"
}
;
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_addTagsMessageId
successResponse
)
;
}
error
(
error
response
)
{
pktUIMessaging
.
sendErrorResponseMessageToPanel
(
panelId
_addTagsMessageId
error
)
;
}
}
)
;
}
)
;
var
_deleteItemMessageId
=
"
deleteItem
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_deleteItemMessageId
function
(
panelId
data
)
{
pktApi
.
deleteItem
(
data
.
itemId
{
success
(
data
response
)
{
var
successResponse
=
{
status
:
"
success
"
}
;
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_deleteItemMessageId
successResponse
)
;
getPanelFrame
(
)
.
setAttribute
(
"
itemAdded
"
"
false
"
)
;
}
error
(
error
response
)
{
pktUIMessaging
.
sendErrorResponseMessageToPanel
(
panelId
_deleteItemMessageId
error
)
;
}
}
)
;
}
)
;
var
_initL10NMessageId
=
"
initL10N
"
;
pktUIMessaging
.
addMessageListener
(
iframe
_initL10NMessageId
function
(
panelId
data
)
{
var
strings
=
{
}
;
var
bundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
pocket
.
properties
"
)
;
for
(
let
str
of
bundle
.
getSimpleEnumeration
(
)
)
{
if
(
str
.
key
in
data
)
{
strings
[
str
.
key
]
=
bundle
.
formatStringFromName
(
str
.
key
data
[
str
.
key
]
)
;
}
else
{
strings
[
str
.
key
]
=
str
.
value
;
}
}
pktUIMessaging
.
sendResponseMessageToPanel
(
panelId
_initL10NMessageId
{
strings
dir
:
Services
.
locale
.
isAppLocaleRTL
?
"
rtl
"
:
"
ltr
"
}
)
;
}
)
;
}
function
openTabWithUrl
(
url
aTriggeringPrincipal
aCsp
)
{
let
recentWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
recentWindow
)
{
Cu
.
reportError
(
"
Pocket
:
No
open
browser
windows
to
openTabWithUrl
"
)
;
return
;
}
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
recentWindow
)
|
|
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
recentWindow
.
openWebLinkIn
(
url
"
tab
"
{
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
}
)
;
return
;
}
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
win
.
openWebLinkIn
(
url
"
tab
"
{
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
}
)
;
return
;
}
}
recentWindow
.
openWebLinkIn
(
url
"
window
"
{
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
}
)
;
}
function
getCurrentUrl
(
)
{
return
gBrowser
.
currentURI
.
spec
;
}
function
getCurrentTitle
(
)
{
return
gBrowser
.
contentTitle
;
}
function
getPanel
(
)
{
var
frame
=
getPanelFrame
(
)
;
var
panel
=
frame
;
while
(
panel
&
&
panel
.
localName
!
=
"
panel
"
)
{
panel
=
panel
.
parentNode
;
}
return
panel
;
}
var
photonPageActionPanelFrame
;
function
setPhotonPageActionPanelFrame
(
frame
)
{
photonPageActionPanelFrame
=
frame
;
}
function
getPanelFrame
(
)
{
return
photonPageActionPanelFrame
;
}
function
isInOverflowMenu
(
)
{
return
false
;
}
function
getFirefoxAccountSignedInUser
(
callback
)
{
fxAccounts
.
getSignedInUser
(
)
.
then
(
userData
=
>
{
callback
(
userData
)
;
}
)
.
then
(
null
error
=
>
{
callback
(
)
;
}
)
;
}
function
getUILocale
(
)
{
return
Services
.
locale
.
appLocaleAsLangTag
;
}
return
{
setPhotonPageActionPanelFrame
getPanelFrame
openTabWithUrl
tryToSaveUrl
tryToSaveCurrentPage
}
;
}
)
(
)
;
var
pktUIMessaging
=
(
function
(
)
{
function
prefixedMessageId
(
messageId
)
{
return
"
PKT_
"
+
messageId
;
}
function
addMessageListener
(
iframe
messageId
callback
)
{
iframe
.
addEventListener
(
prefixedMessageId
(
messageId
)
function
(
e
)
{
var
nodePrincipal
=
e
.
target
.
nodePrincipal
;
if
(
!
nodePrincipal
|
|
!
nodePrincipal
.
URI
|
|
!
nodePrincipal
.
URI
.
spec
.
startsWith
(
"
about
:
pocket
"
)
)
{
return
;
}
var
payload
=
JSON
.
parse
(
e
.
target
.
getAttribute
(
"
payload
"
)
)
[
0
]
;
var
panelId
=
payload
.
panelId
;
var
data
=
payload
.
data
;
var
csp
=
e
.
target
.
ownerDocument
.
csp
;
callback
(
panelId
data
nodePrincipal
csp
)
;
e
.
target
.
remove
(
)
;
}
false
true
)
;
}
function
sendMessageToPanel
(
panelId
messageId
payload
)
{
if
(
!
isPanelIdValid
(
panelId
)
)
{
return
;
}
var
panelFrame
=
pktUI
.
getPanelFrame
(
)
;
if
(
!
isPocketPanelFrameValid
(
panelFrame
)
)
{
return
;
}
var
doc
=
panelFrame
.
contentWindow
.
document
;
var
documentElement
=
doc
.
documentElement
;
var
panelMessageId
=
prefixedMessageId
(
panelId
+
"
_
"
+
messageId
)
;
var
AnswerEvt
=
doc
.
createElement
(
"
PKTMessage
"
)
;
AnswerEvt
.
setAttribute
(
"
payload
"
JSON
.
stringify
(
[
payload
]
)
)
;
documentElement
.
appendChild
(
AnswerEvt
)
;
var
event
=
doc
.
createEvent
(
"
HTMLEvents
"
)
;
event
.
initEvent
(
panelMessageId
true
false
)
;
AnswerEvt
.
dispatchEvent
(
event
)
;
}
function
sendResponseMessageToPanel
(
panelId
messageId
payload
)
{
var
responseMessageId
=
messageId
+
"
Response
"
;
sendMessageToPanel
(
panelId
responseMessageId
payload
)
;
}
function
sendErrorMessageToPanel
(
panelId
messageId
error
)
{
var
errorResponse
=
{
status
:
"
error
"
error
}
;
sendMessageToPanel
(
panelId
messageId
errorResponse
)
;
}
function
sendErrorResponseMessageToPanel
(
panelId
messageId
error
)
{
var
errorResponse
=
{
status
:
"
error
"
error
}
;
sendResponseMessageToPanel
(
panelId
messageId
errorResponse
)
;
}
function
isPanelIdValid
(
panelId
)
{
if
(
panelId
=
=
=
0
)
{
console
.
warn
(
"
Tried
to
send
message
to
panel
with
id
0
.
"
)
;
return
false
;
}
return
true
;
}
function
isPocketPanelFrameValid
(
panelFrame
)
{
if
(
typeof
panelFrame
=
=
=
"
undefined
"
)
{
console
.
warn
(
"
Pocket
panel
frame
is
undefined
"
)
;
return
false
;
}
var
contentWindow
=
panelFrame
.
contentWindow
;
if
(
typeof
contentWindow
=
=
"
undefined
"
)
{
console
.
warn
(
"
Pocket
panel
frame
content
window
is
undefined
"
)
;
return
false
;
}
var
doc
=
contentWindow
.
document
;
if
(
typeof
doc
=
=
=
"
undefined
"
)
{
console
.
warn
(
"
Pocket
panel
frame
content
window
document
is
undefined
"
)
;
return
false
;
}
var
documentElement
=
doc
.
documentElement
;
if
(
typeof
documentElement
=
=
=
"
undefined
"
)
{
console
.
warn
(
"
Pocket
panel
frame
content
window
document
document
element
is
undefined
"
)
;
return
false
;
}
return
true
;
}
return
{
addMessageListener
sendMessageToPanel
sendResponseMessageToPanel
sendErrorMessageToPanel
sendErrorResponseMessageToPanel
}
;
}
)
(
)
;
