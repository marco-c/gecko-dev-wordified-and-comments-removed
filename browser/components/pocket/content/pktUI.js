ChromeUtils
.
defineESModuleGetters
(
this
{
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ReaderMode
"
"
resource
:
/
/
gre
/
modules
/
ReaderMode
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
pktApi
"
"
chrome
:
/
/
pocket
/
content
/
pktApi
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SaveToPocket
"
"
chrome
:
/
/
pocket
/
content
/
SaveToPocket
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
pktTelemetry
"
"
chrome
:
/
/
pocket
/
content
/
pktTelemetry
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExperimentAPI
"
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
}
)
;
const
POCKET_ONSAVERECS_PREF
=
"
extensions
.
pocket
.
onSaveRecs
"
;
const
POCKET_ONSAVERECS_LOCLES_PREF
=
"
extensions
.
pocket
.
onSaveRecs
.
locales
"
;
const
POCKET_HOME_PREF
=
"
extensions
.
pocket
.
showHome
"
;
var
pktUI
=
(
function
(
)
{
let
_titleToSave
=
"
"
;
let
_urlToSave
=
"
"
;
const
initialPanelSize
=
{
signup
:
{
height
:
315
width
:
328
}
saved
:
{
height
:
110
width
:
350
}
home
:
{
height
:
251
width
:
328
}
home_no_topics
:
{
height
:
86
width
:
328
}
}
;
var
onSaveRecsEnabledPref
;
var
onSaveRecsLocalesPref
;
var
pocketHomePref
;
function
initPrefs
(
)
{
onSaveRecsEnabledPref
=
Services
.
prefs
.
getBoolPref
(
POCKET_ONSAVERECS_PREF
false
)
;
onSaveRecsLocalesPref
=
Services
.
prefs
.
getStringPref
(
POCKET_ONSAVERECS_LOCLES_PREF
"
"
)
;
pocketHomePref
=
Services
.
prefs
.
getBoolPref
(
POCKET_HOME_PREF
)
;
}
initPrefs
(
)
;
function
tryToSaveCurrentPage
(
)
{
tryToSaveUrl
(
getCurrentUrl
(
)
getCurrentTitle
(
)
)
;
}
function
tryToSaveUrl
(
url
title
)
{
if
(
typeof
url
!
=
=
"
undefined
"
&
&
url
.
startsWith
(
"
about
:
reader
?
url
=
"
)
)
{
url
=
ReaderMode
.
getOriginalUrl
(
url
)
;
}
if
(
!
pktApi
.
isUserLoggedIn
(
)
)
{
showSignUp
(
)
;
return
;
}
_titleToSave
=
title
;
_urlToSave
=
url
;
if
(
!
pocketHomePref
|
|
isValidURL
(
)
)
{
saveAndShowConfirmation
(
)
;
return
;
}
showPocketHome
(
)
;
}
function
showSignUp
(
)
{
getFirefoxAccountSignedInUser
(
function
(
userdata
)
{
showPanel
(
"
about
:
pocket
-
signup
?
"
+
"
emailButton
=
"
+
NimbusFeatures
.
saveToPocket
.
getVariable
(
"
emailButton
"
)
signup
)
;
}
)
;
}
function
getAndShowRecsForItem
(
item
options
)
{
var
onSaveRecsEnabled
=
onSaveRecsEnabledPref
&
&
onSaveRecsLocalesPref
.
includes
(
getUILocale
(
)
)
;
if
(
onSaveRecsEnabled
&
&
item
&
&
item
.
resolved_id
&
&
item
.
resolved_id
!
=
=
"
0
"
)
{
pktApi
.
getRecsForItem
(
item
.
resolved_id
options
)
;
}
}
function
saveAndShowConfirmation
(
)
{
getFirefoxAccountSignedInUser
(
function
(
userdata
)
{
showPanel
(
"
about
:
pocket
-
saved
?
premiumStatus
=
"
+
(
pktApi
.
isPremiumUser
(
)
?
"
1
"
:
"
0
"
)
+
"
&
fxasignedin
=
"
+
(
typeof
userdata
=
=
"
object
"
&
&
userdata
!
=
=
null
?
"
1
"
:
"
0
"
)
saved
)
;
}
)
;
}
function
showPocketHome
(
)
{
const
hideRecentSaves
=
NimbusFeatures
.
saveToPocket
.
getVariable
(
"
hideRecentSaves
"
)
;
const
locale
=
getUILocale
(
)
;
let
panel
=
home_no_topics
;
if
(
locale
.
startsWith
(
"
en
-
"
)
)
{
panel
=
home
;
}
showPanel
(
about
:
pocket
-
home
?
hiderecentsaves
=
{
hideRecentSaves
}
panel
)
;
}
function
showPanel
(
urlString
panel
)
{
const
locale
=
getUILocale
(
)
;
const
options
=
initialPanelSize
[
panel
]
;
resizePanel
(
{
width
:
options
.
width
height
:
options
.
height
}
)
;
const
saveToPocketExperiment
=
ExperimentAPI
.
getExperiment
(
{
featureId
:
"
saveToPocket
"
}
)
;
const
pocketNewtabExperiment
=
ExperimentAPI
.
getExperiment
(
{
featureId
:
"
pocketNewtab
"
}
)
;
let
utmSource
=
"
firefox_pocket_save_button
"
;
let
utmCampaign
=
saveToPocketExperiment
?
.
slug
|
|
pocketNewtabExperiment
?
.
slug
;
let
utmContent
=
saveToPocketExperiment
?
.
branch
?
.
slug
|
|
pocketNewtabExperiment
?
.
branch
?
.
slug
;
const
url
=
new
URL
(
urlString
)
;
url
.
searchParams
.
append
(
"
utmSource
"
utmSource
)
;
if
(
utmCampaign
&
&
utmContent
)
{
url
.
searchParams
.
append
(
"
utmCampaign
"
utmCampaign
)
;
url
.
searchParams
.
append
(
"
utmContent
"
utmContent
)
;
}
url
.
searchParams
.
append
(
"
locale
"
locale
)
;
var
frame
=
getPanelFrame
(
)
;
frame
.
setAttribute
(
"
src
"
url
.
href
)
;
}
function
onShowSignup
(
)
{
SaveToPocket
.
itemDeleted
(
)
;
pktTelemetry
.
sendStructuredIngestionEvent
(
pktTelemetry
.
createPingPayload
(
{
events
:
[
{
action
:
"
click
"
source
:
"
save_button
"
}
]
}
)
)
;
}
async
function
onShowHome
(
)
{
pktTelemetry
.
sendStructuredIngestionEvent
(
pktTelemetry
.
createPingPayload
(
{
events
:
[
{
action
:
"
click
"
source
:
"
home_button
"
}
]
}
)
)
;
if
(
!
NimbusFeatures
.
saveToPocket
.
getVariable
(
"
hideRecentSaves
"
)
)
{
let
recentSaves
=
await
pktApi
.
getRecentSavesCache
(
)
;
if
(
recentSaves
)
{
pktUIMessaging
.
sendMessageToPanel
(
"
PKT_renderRecentSaves
"
recentSaves
)
;
}
else
{
pktUIMessaging
.
sendMessageToPanel
(
"
PKT_loadingRecentSaves
"
recentSaves
)
;
pktApi
.
getRecentSaves
(
{
success
(
data
)
{
pktUIMessaging
.
sendMessageToPanel
(
"
PKT_renderRecentSaves
"
data
)
;
}
error
(
error
)
{
pktUIMessaging
.
sendErrorMessageToPanel
(
"
PKT_renderRecentSaves
"
error
)
;
}
}
)
;
}
}
}
function
onShowSaved
(
)
{
var
saveLinkMessageId
=
"
PKT_saveLink
"
;
if
(
!
isValidURL
(
)
)
{
let
errorData
=
{
localizedKey
:
"
pocket
-
panel
-
saved
-
error
-
only
-
links
"
}
;
pktUIMessaging
.
sendErrorMessageToPanel
(
saveLinkMessageId
errorData
)
;
return
;
}
if
(
!
navigator
.
onLine
)
{
let
errorData
=
{
localizedKey
:
"
pocket
-
panel
-
saved
-
error
-
no
-
internet
"
}
;
pktUIMessaging
.
sendErrorMessageToPanel
(
saveLinkMessageId
errorData
)
;
return
;
}
pktTelemetry
.
sendStructuredIngestionEvent
(
pktTelemetry
.
createPingPayload
(
{
events
:
[
{
action
:
"
click
"
source
:
"
save_button
"
}
]
}
)
)
;
var
options
=
{
success
(
data
request
)
{
var
item
=
data
.
item
;
var
ho2
=
data
.
ho2
;
var
accountState
=
data
.
account_state
;
var
displayName
=
data
.
display_name
;
var
successResponse
=
{
status
:
"
success
"
accountState
displayName
item
ho2
}
;
pktUIMessaging
.
sendMessageToPanel
(
saveLinkMessageId
successResponse
)
;
SaveToPocket
.
itemSaved
(
)
;
if
(
!
NimbusFeatures
.
saveToPocket
.
getVariable
(
"
hideRecentSaves
"
)
)
{
if
(
item
?
.
resolved_id
&
&
item
?
.
resolved_id
!
=
=
"
0
"
)
{
pktApi
.
getArticleInfo
(
item
.
resolved_url
{
success
(
data
)
{
pktUIMessaging
.
sendMessageToPanel
(
"
PKT_articleInfoFetched
"
data
)
;
}
done
(
)
{
pktUIMessaging
.
sendMessageToPanel
(
"
PKT_getArticleInfoAttempted
"
)
;
}
}
)
;
}
else
{
pktUIMessaging
.
sendMessageToPanel
(
"
PKT_getArticleInfoAttempted
"
)
;
}
}
getAndShowRecsForItem
(
item
{
success
(
data
)
{
pktUIMessaging
.
sendMessageToPanel
(
"
PKT_renderItemRecs
"
data
)
;
if
(
data
?
.
recommendations
?
.
[
0
]
?
.
experiment
)
{
const
payload
=
pktTelemetry
.
createPingPayload
(
{
model
:
data
.
recommendations
[
0
]
.
experiment
events
:
data
.
recommendations
.
map
(
(
item
index
)
=
>
(
{
action
:
"
impression
"
position
:
index
source
:
"
on_save_recs
"
}
)
)
}
)
;
pktTelemetry
.
sendStructuredIngestionEvent
(
payload
)
;
}
}
}
)
;
}
error
(
error
request
)
{
if
(
request
.
status
=
=
=
401
)
{
showSignUp
(
)
;
return
;
}
let
errorData
=
{
localizedKey
:
"
pocket
-
panel
-
saved
-
error
-
generic
"
}
;
pktUIMessaging
.
sendErrorMessageToPanel
(
saveLinkMessageId
errorData
)
;
}
}
;
if
(
typeof
_titleToSave
!
=
=
"
undefined
"
)
{
options
.
title
=
_titleToSave
;
}
pktApi
.
addLink
(
_urlToSave
options
)
;
}
function
resizePanel
(
options
=
{
}
)
{
var
frame
=
getPanelFrame
(
)
;
frame
.
style
.
width
=
options
.
width
+
"
px
"
;
frame
.
style
.
height
=
options
.
height
+
"
px
"
;
}
function
openTabWithUrl
(
url
aTriggeringPrincipal
aCsp
)
{
let
recentWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
recentWindow
)
{
Cu
.
reportError
(
"
Pocket
:
No
open
browser
windows
to
openTabWithUrl
"
)
;
return
;
}
closePanel
(
)
;
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
recentWindow
)
|
|
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
recentWindow
.
openWebLinkIn
(
url
"
tab
"
{
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
}
)
;
return
;
}
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
win
.
openWebLinkIn
(
url
"
tab
"
{
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
}
)
;
return
;
}
}
recentWindow
.
openWebLinkIn
(
url
"
window
"
{
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
}
)
;
}
function
onOpenTabWithUrl
(
data
contentPrincipal
csp
)
{
try
{
urlSecurityCheck
(
data
.
url
contentPrincipal
Services
.
scriptSecurityManager
.
DISALLOW_INHERIT_PRINCIPAL
)
;
}
catch
(
ex
)
{
return
;
}
if
(
data
.
source
)
{
const
{
position
source
model
}
=
data
;
const
payload
=
pktTelemetry
.
createPingPayload
(
{
.
.
.
(
model
?
{
model
}
:
{
}
)
events
:
[
{
action
:
"
click
"
source
.
.
.
(
position
|
|
position
=
=
=
0
?
{
position
}
:
{
}
)
}
]
}
)
;
pktTelemetry
.
sendStructuredIngestionEvent
(
payload
)
;
}
var
url
=
data
.
url
;
openTabWithUrl
(
url
contentPrincipal
csp
)
;
}
function
onOpenTabWithPocketUrl
(
data
contentPrincipal
csp
)
{
try
{
urlSecurityCheck
(
data
.
url
contentPrincipal
Services
.
scriptSecurityManager
.
DISALLOW_INHERIT_PRINCIPAL
)
;
}
catch
(
ex
)
{
return
;
}
const
{
url
position
model
}
=
data
;
if
(
model
&
&
(
position
|
|
position
=
=
=
0
)
)
{
const
payload
=
pktTelemetry
.
createPingPayload
(
{
model
events
:
[
{
action
:
"
click
"
position
source
:
"
on_save_recs
"
}
]
}
)
;
pktTelemetry
.
sendStructuredIngestionEvent
(
payload
)
;
}
openTabWithUrl
(
url
contentPrincipal
csp
)
;
}
function
getCurrentUrl
(
)
{
return
gBrowser
.
currentURI
.
spec
;
}
function
getCurrentTitle
(
)
{
return
gBrowser
.
contentTitle
;
}
function
closePanel
(
)
{
getPanelFrame
(
)
?
.
closest
(
"
panel
"
)
?
.
hidePopup
(
)
;
}
var
toolbarPanelFrame
;
function
setToolbarPanelFrame
(
frame
)
{
toolbarPanelFrame
=
frame
;
}
function
getPanelFrame
(
)
{
return
toolbarPanelFrame
;
}
function
isValidURL
(
)
{
return
(
typeof
_urlToSave
!
=
=
"
undefined
"
&
&
(
_urlToSave
.
startsWith
(
"
http
"
)
|
|
_urlToSave
.
startsWith
(
"
https
"
)
)
)
;
}
function
getFirefoxAccountSignedInUser
(
callback
)
{
fxAccounts
.
getSignedInUser
(
)
.
then
(
userData
=
>
{
callback
(
userData
)
;
}
)
.
then
(
null
error
=
>
{
callback
(
)
;
}
)
;
}
function
getUILocale
(
)
{
return
Services
.
locale
.
appLocaleAsBCP47
;
}
return
{
setToolbarPanelFrame
getPanelFrame
initPrefs
showPanel
getUILocale
openTabWithUrl
onOpenTabWithUrl
onOpenTabWithPocketUrl
onShowSaved
onShowSignup
onShowHome
getAndShowRecsForItem
tryToSaveUrl
tryToSaveCurrentPage
resizePanel
closePanel
}
;
}
)
(
)
;
var
pktUIMessaging
=
(
function
(
)
{
function
sendMessageToPanel
(
messageId
payload
)
{
var
panelFrame
=
pktUI
.
getPanelFrame
(
)
;
if
(
!
panelFrame
)
{
console
.
warn
(
"
Pocket
panel
frame
is
undefined
"
)
;
return
;
}
const
aboutPocketActor
=
panelFrame
?
.
browsingContext
?
.
currentWindowGlobal
?
.
getActor
(
"
AboutPocket
"
)
;
aboutPocketActor
?
.
sendAsyncMessage
(
messageId
payload
)
;
}
function
sendErrorMessageToPanel
(
messageId
error
)
{
var
errorResponse
=
{
status
:
"
error
"
error
}
;
sendMessageToPanel
(
messageId
errorResponse
)
;
}
return
{
sendMessageToPanel
sendErrorMessageToPanel
}
;
}
)
(
)
;
