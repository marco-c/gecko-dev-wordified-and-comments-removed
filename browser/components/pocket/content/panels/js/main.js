import
HomeOverlay
from
"
.
/
home
/
overlay
.
js
"
;
import
SignupOverlay
from
"
.
/
signup
/
overlay
.
js
"
;
import
SavedOverlay
from
"
.
/
saved
/
overlay
.
js
"
;
import
pktPanelMessaging
from
"
.
/
messages
.
js
"
;
var
PKT_PANEL
=
function
(
)
{
}
;
PKT_PANEL
.
prototype
=
{
initHome
(
)
{
this
.
overlay
=
new
HomeOverlay
(
)
;
this
.
init
(
)
;
}
initSignup
(
)
{
this
.
overlay
=
new
SignupOverlay
(
)
;
this
.
init
(
)
;
}
initSaved
(
)
{
this
.
overlay
=
new
SavedOverlay
(
)
;
this
.
init
(
)
;
}
setupObservers
(
)
{
this
.
setupMutationObserver
(
)
;
this
.
setupIntersectionObserver
(
)
;
}
init
(
)
{
if
(
this
.
inited
)
{
return
;
}
this
.
setupObservers
(
)
;
this
.
inited
=
true
;
}
resizeParent
(
)
{
let
clientHeight
=
document
.
body
.
clientHeight
;
if
(
this
.
overlay
.
tagsDropdownOpen
)
{
clientHeight
=
Math
.
max
(
clientHeight
252
)
;
}
if
(
clientHeight
)
{
pktPanelMessaging
.
sendMessage
(
"
PKT_resizePanel
"
{
width
:
document
.
body
.
clientWidth
height
:
clientHeight
}
)
;
}
}
setupIntersectionObserver
(
)
{
const
observer
=
new
IntersectionObserver
(
entries
=
>
{
if
(
entries
.
find
(
e
=
>
e
.
isIntersecting
)
)
{
this
.
resizeParent
(
)
;
observer
.
unobserve
(
document
.
body
)
;
}
}
)
;
observer
.
observe
(
document
.
body
)
;
}
setupMutationObserver
(
)
{
const
targetNode
=
document
.
body
;
const
config
=
{
attributes
:
false
childList
:
true
subtree
:
true
}
;
const
callback
=
(
mutationList
observer
)
=
>
{
mutationList
.
forEach
(
mutation
=
>
{
switch
(
mutation
.
type
)
{
case
"
childList
"
:
{
this
.
resizeParent
(
)
;
break
;
}
}
}
)
;
}
;
const
observer
=
new
MutationObserver
(
callback
)
;
observer
.
observe
(
targetNode
config
)
;
}
create
(
)
{
this
.
overlay
.
create
(
)
;
}
}
;
window
.
PKT_PANEL
=
PKT_PANEL
;
window
.
pktPanelMessaging
=
pktPanelMessaging
;
