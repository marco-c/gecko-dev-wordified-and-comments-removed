(
(
)
=
>
{
"
use
strict
"
;
var
__webpack_modules__
=
(
{
122
:
(
(
__unused_webpack_module
__unused_webpack___webpack_exports__
__webpack_require__
)
=
>
{
var
react
=
__webpack_require__
(
294
)
;
var
react_dom
=
__webpack_require__
(
935
)
;
;
function
PopularTopicsLegacy
(
props
)
{
return
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
h3
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
home
-
explore
-
popular
-
topics
"
}
)
react
.
createElement
(
"
ul
"
null
props
.
topics
.
map
(
item
=
>
react
.
createElement
(
"
li
"
{
key
:
item
-
{
item
.
topic
}
}
react
.
createElement
(
"
a
"
{
className
:
"
pkt_ext_topic
"
href
:
https
:
/
/
{
props
.
pockethost
}
/
explore
/
{
item
.
topic
}
?
utm_source
=
{
props
.
utmsource
}
}
item
.
title
react
.
createElement
(
"
span
"
{
className
:
"
pkt_ext_chevron_right
"
}
)
)
)
)
)
react
.
createElement
(
"
a
"
{
className
:
"
pkt_ext_discover
"
href
:
https
:
/
/
{
props
.
pockethost
}
/
explore
?
utm_source
=
{
props
.
utmsource
}
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
home
-
discover
-
more
"
}
)
)
;
}
const
PopularTopicsLegacy_PopularTopicsLegacy
=
(
PopularTopicsLegacy
)
;
;
function
Header
(
props
)
{
return
react
.
createElement
(
"
h1
"
{
className
:
"
stp_header
"
}
react
.
createElement
(
"
div
"
{
className
:
"
stp_header_logo
"
}
)
props
.
children
)
;
}
const
Header_Header
=
(
Header
)
;
;
var
pktPanelMessaging
=
{
removeMessageListener
(
messageId
callback
)
{
RPMRemoveMessageListener
(
messageId
callback
)
;
}
addMessageListener
(
messageId
callback
=
(
)
=
>
{
}
)
{
RPMAddMessageListener
(
messageId
callback
)
;
}
sendMessage
(
messageId
payload
=
{
}
callback
)
{
if
(
callback
)
{
const
responseMessageId
=
{
messageId
}
_response
;
var
responseListener
=
responsePayload
=
>
{
callback
(
responsePayload
)
;
this
.
removeMessageListener
(
responseMessageId
responseListener
)
;
}
;
this
.
addMessageListener
(
responseMessageId
responseListener
)
;
}
RPMSendAsyncMessage
(
messageId
payload
)
;
}
clickHelper
(
element
{
source
=
"
"
position
}
)
{
element
?
.
addEventListener
(
click
event
=
>
{
event
.
preventDefault
(
)
;
this
.
sendMessage
(
"
PKT_openTabWithUrl
"
{
url
:
event
.
currentTarget
.
getAttribute
(
href
)
source
position
}
)
;
}
)
;
}
log
(
)
{
RPMSendAsyncMessage
(
"
PKT_log
"
arguments
)
;
}
}
;
const
messages
=
(
pktPanelMessaging
)
;
;
function
TelemetryLink
(
props
)
{
function
onClick
(
event
)
{
if
(
props
.
onClick
)
{
props
.
onClick
(
event
)
;
}
else
{
event
.
preventDefault
(
)
;
messages
.
sendMessage
(
"
PKT_openTabWithUrl
"
{
url
:
event
.
currentTarget
.
getAttribute
(
href
)
source
:
props
.
source
model
:
props
.
model
position
:
props
.
position
}
)
;
}
}
return
react
.
createElement
(
"
a
"
{
href
:
props
.
href
onClick
:
onClick
target
:
"
_blank
"
className
:
props
.
className
}
props
.
children
)
;
}
const
TelemetryLink_TelemetryLink
=
(
TelemetryLink
)
;
;
function
ArticleUrl
(
props
)
{
if
(
props
.
savedArticle
|
|
!
props
.
url
)
{
return
react
.
createElement
(
"
div
"
{
className
:
"
stp_article_list_saved_article
"
}
props
.
children
)
;
}
return
react
.
createElement
(
TelemetryLink_TelemetryLink
{
className
:
"
stp_article_list_link
"
href
:
props
.
url
source
:
props
.
source
position
:
props
.
position
model
:
props
.
model
}
props
.
children
)
;
}
function
Article
(
props
)
{
function
encodeThumbnail
(
rawSource
)
{
return
rawSource
?
https
:
/
/
img
-
getpocket
.
cdn
.
mozilla
.
net
/
80x80
/
filters
:
format
(
jpeg
)
:
quality
(
60
)
:
no_upscale
(
)
:
strip_exif
(
)
/
{
encodeURIComponent
(
rawSource
)
}
:
null
;
}
const
{
article
savedArticle
position
source
model
utmParams
}
=
props
;
const
url
=
new
URL
(
article
.
url
|
|
article
.
resolved_url
|
|
"
"
)
;
const
urlSearchParams
=
new
URLSearchParams
(
utmParams
)
;
for
(
let
[
key
val
]
of
urlSearchParams
.
entries
(
)
)
{
url
.
searchParams
.
set
(
key
val
)
;
}
const
thumbnail
=
article
.
thumbnail
|
|
encodeThumbnail
(
article
?
.
top_image_url
|
|
article
?
.
images
?
.
[
"
1
"
]
?
.
src
)
;
const
alt
=
article
.
alt
|
|
"
thumbnail
image
"
;
const
title
=
article
.
title
|
|
article
.
resolved_title
;
const
publisher
=
article
.
publisher
|
|
article
.
domain_metadata
?
.
name
|
|
article
.
resolved_domain
;
return
react
.
createElement
(
"
li
"
{
className
:
"
stp_article_list_item
"
}
react
.
createElement
(
ArticleUrl
{
url
:
url
.
href
savedArticle
:
savedArticle
position
:
position
source
:
source
model
:
model
utmParams
:
utmParams
}
react
.
createElement
(
react
.
Fragment
null
thumbnail
?
react
.
createElement
(
"
img
"
{
className
:
"
stp_article_list_thumb
"
src
:
thumbnail
alt
:
alt
}
)
:
react
.
createElement
(
"
div
"
{
className
:
"
stp_article_list_thumb_placeholder
"
}
)
react
.
createElement
(
"
div
"
{
className
:
"
stp_article_list_meta
"
}
react
.
createElement
(
"
header
"
{
className
:
"
stp_article_list_header
"
}
title
)
react
.
createElement
(
"
p
"
{
className
:
"
stp_article_list_publisher
"
}
publisher
)
)
)
)
)
;
}
function
ArticleList
(
props
)
{
return
react
.
createElement
(
"
ul
"
{
className
:
"
stp_article_list
"
}
props
.
articles
?
.
map
(
(
article
position
)
=
>
react
.
createElement
(
Article
{
article
:
article
savedArticle
:
props
.
savedArticle
position
:
position
source
:
props
.
source
model
:
props
.
model
utmParams
:
props
.
utmParams
}
)
)
)
;
}
const
ArticleList_ArticleList
=
(
ArticleList
)
;
;
function
PopularTopics
(
props
)
{
return
react
.
createElement
(
"
ul
"
{
className
:
"
stp_popular_topics
"
}
props
.
topics
?
.
map
(
(
topic
position
)
=
>
react
.
createElement
(
"
li
"
{
key
:
item
-
{
topic
.
topic
}
className
:
"
stp_popular_topic
"
}
react
.
createElement
(
TelemetryLink_TelemetryLink
{
className
:
"
stp_popular_topic_link
"
href
:
https
:
/
/
{
props
.
pockethost
}
/
explore
/
{
topic
.
topic
}
?
{
props
.
utmParams
}
source
:
props
.
source
position
:
position
}
topic
.
title
)
)
)
)
;
}
const
PopularTopics_PopularTopics
=
(
PopularTopics
)
;
;
function
Button
(
props
)
{
return
react
.
createElement
(
TelemetryLink_TelemetryLink
{
href
:
props
.
url
onClick
:
props
.
onClick
className
:
stp_button
{
props
?
.
style
&
&
stp_button_
{
props
.
style
}
}
source
:
props
.
source
}
props
.
children
)
;
}
const
Button_Button
=
(
Button
)
;
;
function
Home
(
props
)
{
const
{
locale
topics
pockethost
hideRecentSaves
utmSource
utmCampaign
utmContent
}
=
props
;
const
[
{
articles
status
}
setArticlesState
]
=
(
0
react
.
useState
)
(
{
articles
:
[
]
status
:
"
"
}
)
;
const
utmParams
=
utm_source
=
{
utmSource
}
{
utmCampaign
&
&
utmContent
?
&
utm_campaign
=
{
utmCampaign
}
&
utm_content
=
{
utmContent
}
:
}
;
(
0
react
.
useEffect
)
(
(
)
=
>
{
if
(
!
hideRecentSaves
)
{
messages
.
addMessageListener
(
"
PKT_loadingRecentSaves
"
function
(
resp
)
{
setArticlesState
(
{
articles
status
:
"
loading
"
}
)
;
}
)
;
messages
.
addMessageListener
(
"
PKT_renderRecentSaves
"
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
data
.
status
=
=
=
"
error
"
)
{
setArticlesState
(
{
articles
:
[
]
status
:
"
error
"
}
)
;
return
;
}
setArticlesState
(
{
articles
:
data
status
:
"
success
"
}
)
;
}
)
;
}
messages
.
sendMessage
(
"
PKT_show_home
"
)
;
}
[
]
)
;
let
recentSavesSection
=
null
;
if
(
status
=
=
=
"
error
"
|
|
hideRecentSaves
)
{
recentSavesSection
=
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
home
-
new
-
user
-
cta
"
}
)
;
}
else
if
(
status
=
=
=
"
loading
"
)
{
recentSavesSection
=
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
home
-
most
-
recent
-
saves
-
loading
"
}
)
;
}
else
if
(
status
=
=
=
"
success
"
)
{
if
(
articles
?
.
length
)
{
recentSavesSection
=
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
home
-
most
-
recent
-
saves
"
}
)
articles
.
length
>
3
?
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
ArticleList_ArticleList
{
articles
:
articles
.
slice
(
0
3
)
source
:
"
home_recent_save
"
utmParams
:
utmParams
}
)
react
.
createElement
(
"
span
"
{
className
:
"
stp_button_wide
"
}
react
.
createElement
(
Button_Button
{
style
:
"
secondary
"
url
:
https
:
/
/
{
pockethost
}
/
a
?
{
utmParams
}
source
:
"
home_view_list
"
}
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
button
-
show
-
all
"
}
)
)
)
)
:
react
.
createElement
(
ArticleList_ArticleList
{
articles
:
articles
source
:
"
home_recent_save
"
utmParams
:
utmParams
}
)
)
;
}
else
{
recentSavesSection
=
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
home
-
new
-
user
-
cta
"
}
)
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
home
-
new
-
user
-
message
"
}
)
)
;
}
}
return
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel_container
"
}
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel
stp_panel_home
"
}
react
.
createElement
(
Header_Header
null
react
.
createElement
(
Button_Button
{
style
:
"
primary
"
url
:
https
:
/
/
{
pockethost
}
/
a
?
{
utmParams
}
source
:
"
home_view_list
"
}
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
header
-
my
-
list
"
}
)
)
)
react
.
createElement
(
"
hr
"
null
)
recentSavesSection
react
.
createElement
(
"
hr
"
null
)
pockethost
&
&
locale
?
.
startsWith
(
"
en
"
)
&
&
topics
?
.
length
&
&
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
}
"
Explore
popular
topics
:
"
)
react
.
createElement
(
PopularTopics_PopularTopics
{
topics
:
topics
pockethost
:
pockethost
utmParams
:
utmParams
source
:
"
home_popular_topic
"
}
)
)
)
)
;
}
const
Home_Home
=
(
Home
)
;
;
var
HomeOverlay
=
function
(
options
)
{
this
.
inited
=
false
;
this
.
active
=
false
;
this
.
parseHTML
=
function
(
htmlString
)
{
const
parser
=
new
DOMParser
(
)
;
return
parser
.
parseFromString
(
htmlString
text
/
html
)
.
documentElement
;
}
;
this
.
setupClickEvents
=
function
(
)
{
messages
.
clickHelper
(
document
.
querySelector
(
.
pkt_ext_mylist
)
{
source
:
home_view_list
}
)
;
messages
.
clickHelper
(
document
.
querySelector
(
.
pkt_ext_discover
)
{
source
:
home_discover
}
)
;
document
.
querySelectorAll
(
.
pkt_ext_topic
)
.
forEach
(
(
el
position
)
=
>
{
messages
.
clickHelper
(
el
{
source
:
home_topic
position
}
)
;
}
)
;
}
;
}
;
HomeOverlay
.
prototype
=
{
create
(
{
pockethost
}
)
{
const
{
searchParams
}
=
new
URL
(
window
.
location
.
href
)
;
const
locale
=
searchParams
.
get
(
locale
)
|
|
;
const
layoutRefresh
=
searchParams
.
get
(
layoutRefresh
)
=
=
=
true
;
const
hideRecentSaves
=
searchParams
.
get
(
hiderecentsaves
)
=
=
=
true
;
const
utmSource
=
searchParams
.
get
(
utmSource
)
;
const
utmCampaign
=
searchParams
.
get
(
utmCampaign
)
;
const
utmContent
=
searchParams
.
get
(
utmContent
)
;
if
(
this
.
active
)
{
return
;
}
this
.
active
=
true
;
if
(
layoutRefresh
)
{
react_dom
.
render
(
react
.
createElement
(
Home_Home
{
locale
:
locale
hideRecentSaves
:
hideRecentSaves
pockethost
:
pockethost
utmSource
:
utmSource
utmCampaign
:
utmCampaign
utmContent
:
utmContent
topics
:
[
{
title
:
"
Technology
"
topic
:
"
technology
"
}
{
title
:
"
Self
Improvement
"
topic
:
"
self
-
improvement
"
}
{
title
:
"
Food
"
topic
:
"
food
"
}
{
title
:
"
Parenting
"
topic
:
"
parenting
"
}
{
title
:
"
Science
"
topic
:
"
science
"
}
{
title
:
"
Entertainment
"
topic
:
"
entertainment
"
}
{
title
:
"
Career
"
topic
:
"
career
"
}
{
title
:
"
Health
"
topic
:
"
health
"
}
{
title
:
"
Travel
"
topic
:
"
travel
"
}
{
title
:
"
Must
-
Reads
"
topic
:
"
must
-
reads
"
}
]
}
)
document
.
querySelector
(
body
)
)
;
}
else
{
const
enableLocalizedExploreMore
=
false
;
const
templateData
=
{
pockethost
utmsource
:
firefox
-
button
}
;
document
.
querySelector
(
body
)
.
append
(
this
.
parseHTML
(
Handlebars
.
templates
.
home_shell
(
templateData
)
)
)
;
if
(
locale
.
startsWith
(
"
en
"
)
)
{
react_dom
.
render
(
react
.
createElement
(
PopularTopicsLegacy_PopularTopicsLegacy
{
pockethost
:
templateData
.
pockethost
utmsource
:
templateData
.
utmsource
topics
:
[
{
title
:
"
Self
Improvement
"
topic
:
"
self
-
improvement
"
}
{
title
:
"
Food
"
topic
:
"
food
"
}
{
title
:
"
Entertainment
"
topic
:
"
entertainment
"
}
{
title
:
"
Science
"
topic
:
"
science
"
}
]
}
)
document
.
querySelector
(
.
pkt_ext_more
)
)
;
}
else
if
(
enableLocalizedExploreMore
)
{
document
.
querySelector
(
.
pkt_ext_more
)
.
append
(
this
.
parseHTML
(
Handlebars
.
templates
.
explore_more
(
)
)
)
;
}
this
.
setupClickEvents
(
)
;
messages
.
sendMessage
(
"
PKT_show_home
"
)
;
}
}
}
;
const
overlay
=
(
HomeOverlay
)
;
;
function
Signup
(
props
)
{
const
{
locale
pockethost
utmSource
utmCampaign
utmContent
}
=
props
;
const
utmParams
=
utm_source
=
{
utmSource
}
{
utmCampaign
&
&
utmContent
?
&
utm_campaign
=
{
utmCampaign
}
&
utm_content
=
{
utmContent
}
:
}
;
return
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel_container
"
}
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel
stp_panel_signup
"
}
react
.
createElement
(
Header_Header
null
react
.
createElement
(
Button_Button
{
style
:
"
secondary
"
url
:
https
:
/
/
{
pockethost
}
/
login
?
{
utmParams
}
source
:
"
log_in
"
}
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
signup
-
login
"
}
)
)
)
react
.
createElement
(
"
hr
"
null
)
locale
?
.
startsWith
(
"
en
"
)
?
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
div
"
{
className
:
"
stp_signup_content_wrapper
"
}
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
signup
-
cta
-
a
-
fix
"
}
)
react
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
signup
-
cta
-
b
"
}
)
)
react
.
createElement
(
"
div
"
{
className
:
"
stp_signup_content_wrapper
"
}
react
.
createElement
(
"
hr
"
null
)
)
react
.
createElement
(
"
div
"
{
className
:
"
stp_signup_content_wrapper
"
}
react
.
createElement
(
"
div
"
{
className
:
"
stp_signup_img_rainbow_reader
"
}
)
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
}
"
Get
thought
-
provoking
article
recommendations
"
)
react
.
createElement
(
"
p
"
null
"
Find
stories
that
go
deep
into
a
subject
or
offer
a
new
perspective
.
"
)
)
)
:
react
.
createElement
(
"
div
"
{
className
:
"
stp_signup_content_wrapper
"
}
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
signup
-
cta
-
a
-
fix
"
}
)
react
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
signup
-
cta
-
b
-
short
"
}
)
react
.
createElement
(
"
strong
"
null
react
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
signup
-
cta
-
c
"
}
)
)
)
react
.
createElement
(
"
hr
"
null
)
react
.
createElement
(
"
span
"
{
className
:
"
stp_button_wide
"
}
react
.
createElement
(
Button_Button
{
style
:
"
primary
"
url
:
https
:
/
/
{
pockethost
}
/
ff_signup
?
{
utmParams
}
source
:
"
sign_up_1
"
}
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
button
-
activate
"
}
)
)
)
)
)
;
}
const
Signup_Signup
=
(
Signup
)
;
;
var
SignupOverlay
=
function
(
options
)
{
this
.
inited
=
false
;
this
.
active
=
false
;
this
.
setupClickEvents
=
function
(
)
{
messages
.
clickHelper
(
document
.
querySelector
(
.
pkt_ext_learnmore
)
{
source
:
learn_more
}
)
;
messages
.
clickHelper
(
document
.
querySelector
(
.
signup
-
btn
-
firefox
)
{
source
:
sign_up_1
}
)
;
messages
.
clickHelper
(
document
.
querySelector
(
.
signup
-
btn
-
email
)
{
source
:
sign_up_2
}
)
;
messages
.
clickHelper
(
document
.
querySelector
(
.
pkt_ext_login
)
{
source
:
log_in
}
)
;
}
;
this
.
create
=
function
(
{
pockethost
}
)
{
const
parser
=
new
DOMParser
(
)
;
let
elBody
=
document
.
querySelector
(
body
)
;
const
{
searchParams
}
=
new
URL
(
window
.
location
.
href
)
;
const
isEmailSignupEnabled
=
searchParams
.
get
(
emailButton
)
=
=
=
true
;
const
locale
=
searchParams
.
get
(
locale
)
|
|
;
const
language
=
locale
.
split
(
-
)
[
0
]
.
toLowerCase
(
)
;
const
layoutRefresh
=
searchParams
.
get
(
layoutRefresh
)
=
=
=
true
;
const
utmSource
=
searchParams
.
get
(
utmSource
)
;
const
utmCampaign
=
searchParams
.
get
(
utmCampaign
)
;
const
utmContent
=
searchParams
.
get
(
utmContent
)
;
if
(
this
.
active
)
{
return
;
}
this
.
active
=
true
;
if
(
layoutRefresh
)
{
document
.
querySelector
(
.
pkt_ext_containersignup
)
?
.
classList
.
add
(
stp_signup_body
)
;
document
.
querySelector
(
.
pkt_ext_containersignup
)
?
.
classList
.
remove
(
pkt_ext_containersignup
)
;
react_dom
.
render
(
react
.
createElement
(
Signup_Signup
{
pockethost
:
pockethost
utmSource
:
utmSource
utmCampaign
:
utmCampaign
utmContent
:
utmContent
locale
:
locale
}
)
document
.
querySelector
(
body
)
)
;
}
else
{
const
templateData
=
{
pockethost
utmCampaign
:
utmCampaign
|
|
firefox_door_hanger_menu
utmSource
:
utmContent
|
|
control
}
;
if
(
language
)
{
elBody
.
classList
.
add
(
pkt_ext_signup_
{
language
}
)
;
}
elBody
.
append
(
parser
.
parseFromString
(
Handlebars
.
templates
.
signup_shell
(
templateData
)
text
/
html
)
.
documentElement
)
;
if
(
!
isEmailSignupEnabled
)
{
document
.
querySelector
(
.
btn
-
container
-
email
)
.
remove
(
)
;
}
this
.
setupClickEvents
(
)
;
}
messages
.
sendMessage
(
"
PKT_show_signup
"
)
;
}
;
}
;
const
signup_overlay
=
(
SignupOverlay
)
;
;
function
TagPicker
(
props
)
{
const
[
tags
setTags
]
=
(
0
react
.
useState
)
(
props
.
tags
)
;
const
[
duplicateTag
setDuplicateTag
]
=
(
0
react
.
useState
)
(
null
)
;
const
[
inputValue
setInputValue
]
=
(
0
react
.
useState
)
(
"
"
)
;
const
[
usedTags
setUsedTags
]
=
(
0
react
.
useState
)
(
[
]
)
;
const
[
{
tagInputStatus
tagInputErrorMessage
}
setTagInputStatus
]
=
(
0
react
.
useState
)
(
{
tagInputStatus
:
"
"
tagInputErrorMessage
:
"
"
}
)
;
const
inputToSubmit
=
inputValue
.
trim
(
)
;
const
tagsToSubmit
=
[
.
.
.
tags
.
.
.
(
inputToSubmit
?
[
inputToSubmit
]
:
[
]
)
]
;
let
handleKeyDown
=
e
=
>
{
const
enterKey
=
e
.
keyCode
=
=
=
13
;
const
commaKey
=
e
.
keyCode
=
=
=
188
;
const
tabKey
=
inputValue
&
&
e
.
keyCode
=
=
=
9
;
if
(
commaKey
|
|
enterKey
|
|
tabKey
)
{
e
.
preventDefault
(
)
;
if
(
inputValue
)
{
addTag
(
)
;
}
else
if
(
enterKey
)
{
submitTags
(
)
;
}
}
}
;
let
addTag
=
(
)
=
>
{
let
newDuplicateTag
=
tags
.
find
(
item
=
>
item
=
=
=
inputToSubmit
)
;
if
(
!
inputToSubmit
?
.
length
)
{
return
;
}
setInputValue
(
)
;
if
(
!
newDuplicateTag
)
{
setTags
(
tagsToSubmit
)
;
}
else
{
setDuplicateTag
(
newDuplicateTag
)
;
setTimeout
(
(
)
=
>
{
setDuplicateTag
(
null
)
;
}
1000
)
;
}
}
;
let
removeTag
=
index
=
>
{
let
updatedTags
=
tags
.
slice
(
0
)
;
updatedTags
.
splice
(
index
1
)
;
setTags
(
updatedTags
)
;
}
;
let
submitTags
=
(
)
=
>
{
if
(
!
props
.
itemUrl
|
|
!
tagsToSubmit
?
.
length
)
{
return
;
}
setTagInputStatus
(
{
tagInputStatus
:
"
waiting
"
tagInputErrorMessage
:
"
"
}
)
;
messages
.
sendMessage
(
"
PKT_addTags
"
{
url
:
props
.
itemUrl
tags
:
tagsToSubmit
}
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
data
.
status
=
=
=
"
success
"
)
{
setTagInputStatus
(
{
tagInputStatus
:
"
success
"
tagInputErrorMessage
:
"
"
}
)
;
}
else
if
(
data
.
status
=
=
=
"
error
"
)
{
setTagInputStatus
(
{
tagInputStatus
:
"
error
"
tagInputErrorMessage
:
data
.
error
.
message
}
)
;
}
}
)
;
}
;
(
0
react
.
useEffect
)
(
(
)
=
>
{
messages
.
sendMessage
(
"
PKT_getTags
"
{
}
resp
=
>
setUsedTags
(
resp
?
.
data
?
.
tags
)
)
;
}
[
]
)
;
return
react
.
createElement
(
"
div
"
{
className
:
"
stp_tag_picker
"
}
!
tagInputStatus
&
&
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
h3
"
{
className
:
"
header_small
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
signup
-
add
-
tags
"
}
)
react
.
createElement
(
"
div
"
{
className
:
"
stp_tag_picker_tags
"
}
tags
.
map
(
(
tag
i
)
=
>
react
.
createElement
(
"
div
"
{
className
:
stp_tag_picker_tag
{
duplicateTag
=
=
=
tag
?
stp_tag_picker_tag_duplicate
:
}
}
tag
react
.
createElement
(
"
button
"
{
onClick
:
(
)
=
>
removeTag
(
i
)
className
:
stp_tag_picker_tag_remove
}
"
X
"
)
)
)
react
.
createElement
(
"
div
"
{
className
:
"
stp_tag_picker_input_wrapper
"
}
react
.
createElement
(
"
input
"
{
className
:
"
stp_tag_picker_input
"
type
:
"
text
"
list
:
"
tag
-
list
"
value
:
inputValue
onChange
:
e
=
>
setInputValue
(
e
.
target
.
value
)
onKeyDown
:
e
=
>
handleKeyDown
(
e
)
maxlength
:
"
25
"
}
)
react
.
createElement
(
"
datalist
"
{
id
:
"
tag
-
list
"
}
usedTags
.
map
(
item
=
>
react
.
createElement
(
"
option
"
{
key
:
item
value
:
item
}
)
)
)
react
.
createElement
(
"
button
"
{
className
:
"
stp_tag_picker_button
"
disabled
:
!
tagsToSubmit
?
.
length
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
save
-
tags
"
onClick
:
(
)
=
>
submitTags
(
)
}
)
)
)
)
tagInputStatus
=
=
=
"
waiting
"
&
&
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
processing
-
tags
"
}
)
tagInputStatus
=
=
=
"
success
"
&
&
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
tags
-
saved
"
}
)
tagInputStatus
=
=
=
"
error
"
&
&
react
.
createElement
(
"
h3
"
{
className
:
"
header_small
"
}
tagInputErrorMessage
)
)
;
}
const
TagPicker_TagPicker
=
(
TagPicker
)
;
;
function
Saved
(
props
)
{
const
{
locale
pockethost
utmSource
utmCampaign
utmContent
}
=
props
;
const
[
{
savedStatus
savedErrorId
itemId
itemUrl
}
setSavedStatusState
]
=
(
0
react
.
useState
)
(
{
savedStatus
:
"
loading
"
}
)
;
const
[
{
removedStatus
removedErrorMessage
}
setRemovedStatusState
]
=
(
0
react
.
useState
)
(
{
}
)
;
const
[
savedStory
setSavedStoryState
]
=
(
0
react
.
useState
)
(
)
;
const
[
{
similarRecs
similarRecsModel
}
setSimilarRecsState
]
=
(
0
react
.
useState
)
(
{
}
)
;
const
utmParams
=
utm_source
=
{
utmSource
}
{
utmCampaign
&
&
utmContent
?
&
utm_campaign
=
{
utmCampaign
}
&
utm_content
=
{
utmContent
}
:
}
;
function
removeItem
(
event
)
{
event
.
preventDefault
(
)
;
setRemovedStatusState
(
{
removedStatus
:
"
removing
"
}
)
;
messages
.
sendMessage
(
"
PKT_deleteItem
"
{
itemId
}
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
data
.
status
=
=
"
success
"
)
{
setRemovedStatusState
(
{
removedStatus
:
"
removed
"
}
)
;
}
else
if
(
data
.
status
=
=
"
error
"
)
{
let
errorMessage
=
"
"
;
if
(
data
.
error
.
message
&
&
locale
?
.
startsWith
(
"
en
"
)
)
{
errorMessage
=
data
.
error
.
message
;
}
setRemovedStatusState
(
{
removedStatus
:
"
error
"
removedErrorMessage
:
errorMessage
}
)
;
}
}
)
;
}
(
0
react
.
useEffect
)
(
(
)
=
>
{
messages
.
addMessageListener
(
"
PKT_saveLink
"
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
data
.
status
=
=
"
error
"
)
{
setSavedStatusState
(
{
savedStatus
:
"
error
"
savedErrorId
:
data
?
.
error
?
.
localizedKey
|
|
"
pocket
-
panel
-
saved
-
error
-
generic
"
}
)
;
return
;
}
setSavedStatusState
(
{
savedStatus
:
"
success
"
itemId
:
data
.
item
?
.
item_id
itemUrl
:
data
.
item
?
.
given_url
savedErrorId
:
"
"
}
)
;
}
)
;
messages
.
addMessageListener
(
"
PKT_renderSavedStory
"
function
(
resp
)
{
setSavedStoryState
(
resp
?
.
data
?
.
item_preview
)
;
}
)
;
messages
.
addMessageListener
(
"
PKT_renderItemRecs
"
function
(
resp
)
{
const
{
data
}
=
resp
;
const
model
=
data
?
.
recommendations
?
.
[
0
]
?
.
experiment
|
|
"
"
;
setSimilarRecsState
(
{
similarRecs
:
data
?
.
recommendations
?
.
map
(
rec
=
>
rec
.
item
)
similarRecsModel
:
model
}
)
;
}
)
;
messages
.
sendMessage
(
"
PKT_show_saved
"
)
;
}
[
]
)
;
if
(
savedStatus
=
=
=
"
error
"
)
{
return
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel_container
"
}
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel
stp_panel_error
"
}
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel_error_icon
"
}
)
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
error
-
not
-
saved
"
}
)
react
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
savedErrorId
}
)
)
)
;
}
return
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel_container
"
}
react
.
createElement
(
"
div
"
{
className
:
"
stp_panel
stp_panel_saved
"
}
react
.
createElement
(
Header_Header
null
react
.
createElement
(
Button_Button
{
style
:
"
primary
"
url
:
https
:
/
/
{
pockethost
}
/
a
?
{
utmParams
}
source
:
"
view_list
"
}
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
header
-
my
-
list
"
}
)
)
)
react
.
createElement
(
"
hr
"
null
)
!
removedStatus
&
&
savedStatus
=
=
=
"
success
"
&
&
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
header_flex
"
}
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
page
-
saved
-
b
"
}
)
react
.
createElement
(
Button_Button
{
style
:
"
text
"
onClick
:
removeItem
}
react
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
button
-
remove
"
}
)
)
)
savedStory
&
&
react
.
createElement
(
ArticleList_ArticleList
{
articles
:
[
savedStory
]
savedArticle
:
true
}
)
react
.
createElement
(
TagPicker_TagPicker
{
tags
:
[
]
itemUrl
:
itemUrl
}
)
similarRecs
?
.
length
&
&
locale
?
.
startsWith
(
"
en
"
)
&
&
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
hr
"
null
)
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
}
"
Similar
Stories
"
)
react
.
createElement
(
ArticleList_ArticleList
{
articles
:
similarRecs
source
:
"
on_save_recs
"
model
:
similarRecsModel
utmParams
:
utmParams
}
)
)
)
savedStatus
=
=
=
"
loading
"
&
&
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
saving
-
tags
"
}
)
removedStatus
=
=
=
"
removing
"
&
&
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
header_center
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
processing
-
remove
"
}
)
removedStatus
=
=
=
"
removed
"
&
&
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
header_center
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
removed
"
}
)
removedStatus
=
=
=
"
error
"
&
&
react
.
createElement
(
react
.
Fragment
null
react
.
createElement
(
"
h3
"
{
className
:
"
header_large
"
"
data
-
l10n
-
id
"
:
"
pocket
-
panel
-
saved
-
error
-
remove
"
}
)
removedErrorMessage
&
&
react
.
createElement
(
"
p
"
null
removedErrorMessage
)
)
)
)
;
}
const
Saved_Saved
=
(
Saved
)
;
;
var
SavedOverlay
=
function
(
options
)
{
var
myself
=
this
;
this
.
inited
=
false
;
this
.
active
=
false
;
this
.
savedItemId
=
0
;
this
.
savedUrl
=
"
"
;
this
.
userTags
=
[
]
;
this
.
tagsDropdownOpen
=
false
;
this
.
parseHTML
=
function
(
htmlString
)
{
const
parser
=
new
DOMParser
(
)
;
return
parser
.
parseFromString
(
htmlString
text
/
html
)
.
documentElement
;
}
;
this
.
fillTagContainer
=
function
(
tags
container
tagclass
)
{
while
(
container
.
firstChild
)
{
container
.
firstChild
.
remove
(
)
;
}
for
(
let
i
=
0
;
i
<
tags
.
length
;
i
+
+
)
{
let
newtag
=
this
.
parseHTML
(
<
li
class
=
"
{
tagclass
}
"
>
<
a
href
=
"
#
"
class
=
"
token_tag
"
>
{
tags
[
i
]
}
<
/
a
>
<
/
li
>
)
;
container
.
append
(
newtag
)
;
}
}
;
this
.
fillUserTags
=
function
(
)
{
messages
.
sendMessage
(
"
PKT_getTags
"
{
}
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
typeof
data
=
=
"
object
"
&
&
typeof
data
.
tags
=
=
"
object
"
)
{
myself
.
userTags
=
data
.
tags
;
}
}
)
;
}
;
this
.
fillSuggestedTags
=
function
(
)
{
if
(
!
document
.
querySelector
(
.
pkt_ext_suggestedtag_detail
)
)
{
myself
.
suggestedTagsLoaded
=
true
;
return
;
}
document
.
querySelector
(
.
pkt_ext_subshell
)
.
style
.
display
=
block
;
messages
.
sendMessage
(
"
PKT_getSuggestedTags
"
{
url
:
myself
.
savedUrl
}
function
(
resp
)
{
const
{
data
}
=
resp
;
document
.
querySelector
(
.
pkt_ext_suggestedtag_detail
)
.
classList
.
remove
(
pkt_ext_suggestedtag_detail_loading
)
;
if
(
data
.
status
=
=
"
success
"
)
{
var
newtags
=
[
]
;
for
(
let
i
=
0
;
i
<
data
.
value
.
suggestedTags
.
length
;
i
+
+
)
{
newtags
.
push
(
data
.
value
.
suggestedTags
[
i
]
.
tag
)
;
}
myself
.
suggestedTagsLoaded
=
true
;
myself
.
fillTagContainer
(
newtags
document
.
querySelector
(
.
pkt_ext_suggestedtag_detail
ul
)
"
token_suggestedtag
"
)
;
}
else
if
(
data
.
status
=
=
"
error
"
)
{
let
elMsg
=
myself
.
parseHTML
(
<
p
class
=
"
suggestedtag_msg
"
>
{
data
.
error
.
message
}
<
/
p
>
)
;
document
.
querySelector
(
.
pkt_ext_suggestedtag_detail
)
.
append
(
elMsg
)
;
this
.
suggestedTagsLoaded
=
true
;
}
}
)
;
}
;
this
.
closePopup
=
function
(
)
{
messages
.
sendMessage
(
"
PKT_close
"
)
;
}
;
this
.
checkValidTagSubmit
=
function
(
)
{
let
inputlength
=
document
.
querySelector
(
.
pkt_ext_tag_input_wrapper
.
token
-
input
-
input
-
token
input
)
.
value
.
trim
(
)
.
length
;
if
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
token
-
input
-
token
)
|
|
inputlength
>
0
&
&
inputlength
<
26
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_btn
)
.
classList
.
remove
(
pkt_ext_btn_disabled
)
;
}
else
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_btn
)
.
classList
.
add
(
pkt_ext_btn_disabled
)
;
}
myself
.
updateSlidingTagList
(
)
;
}
;
this
.
updateSlidingTagList
=
function
(
)
{
let
cssDir
=
document
.
dir
=
=
=
ltr
?
left
:
right
;
let
offsetDir
=
document
.
dir
=
=
=
ltr
?
offsetLeft
:
offsetRight
;
let
elTokenInputList
=
document
.
querySelector
(
.
token
-
input
-
list
)
;
let
inputleft
=
document
.
querySelector
(
.
token
-
input
-
input
-
token
input
)
[
offsetDir
]
;
let
listleft
=
elTokenInputList
[
offsetDir
]
;
let
listleftnatural
=
listleft
-
parseInt
(
getComputedStyle
(
elTokenInputList
)
[
cssDir
]
)
;
let
leftwidth
=
document
.
querySelector
(
.
pkt_ext_tag_input_wrapper
)
.
offsetWidth
;
if
(
inputleft
+
listleft
+
20
>
leftwidth
)
{
elTokenInputList
.
style
[
cssDir
]
=
{
Math
.
min
(
(
inputleft
+
listleftnatural
-
leftwidth
+
20
)
*
-
1
0
)
}
px
;
}
else
{
elTokenInputList
.
style
[
cssDir
]
=
0
;
}
}
;
this
.
checkPlaceholderStatus
=
function
(
)
{
if
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_tag_input_wrapper
.
token
-
input
-
token
)
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
token
-
input
-
input
-
token
input
)
.
setAttribute
(
placeholder
)
;
}
else
{
let
elTokenInput
=
document
.
querySelector
(
.
pkt_ext_containersaved
.
token
-
input
-
input
-
token
input
)
;
elTokenInput
.
setAttribute
(
placeholder
document
.
querySelector
(
.
pkt_ext_tag_input
)
.
getAttribute
(
placeholder
)
)
;
elTokenInput
.
style
.
width
=
200px
;
}
}
;
this
.
initTagInput
=
function
(
)
{
var
inputwrapper
=
(
"
.
pkt_ext_tag_input_wrapper
"
)
;
inputwrapper
.
find
(
"
.
pkt_ext_tag_input
"
)
.
tokenInput
(
[
]
{
searchDelay
:
200
minChars
:
1
animateDropdown
:
false
noResultsHideDropdown
:
true
scrollKeyboard
:
true
emptyInputLength
:
200
search_function
(
term
cb
)
{
var
returnlist
=
[
]
;
if
(
term
.
length
)
{
var
limit
=
15
;
var
r
=
new
RegExp
(
"
^
"
+
term
)
;
for
(
var
i
=
0
;
i
<
myself
.
userTags
.
length
;
i
+
+
)
{
if
(
r
.
test
(
myself
.
userTags
[
i
]
)
&
&
limit
>
0
)
{
returnlist
.
push
(
{
name
:
myself
.
userTags
[
i
]
}
)
;
limit
-
-
;
}
}
}
if
(
!
(
"
.
token
-
input
-
dropdown
-
tag
"
)
.
data
(
"
init
"
)
)
{
(
"
.
token
-
input
-
dropdown
-
tag
"
)
.
css
(
"
width
"
inputwrapper
.
outerWidth
(
)
)
.
data
(
"
init
"
)
;
inputwrapper
.
append
(
(
"
.
token
-
input
-
dropdown
-
tag
"
)
)
;
}
cb
(
returnlist
)
;
}
validateItem
(
item
)
{
const
text
=
item
.
name
;
if
(
.
trim
(
text
)
.
length
>
25
|
|
!
.
trim
(
text
)
.
length
)
{
if
(
text
.
length
>
25
)
{
myself
.
showTagsLocalizedError
(
"
pocket
-
panel
-
saved
-
error
-
tag
-
length
"
)
;
this
.
changestamp
=
Date
.
now
(
)
;
setTimeout
(
function
(
)
{
(
"
.
token
-
input
-
input
-
token
input
"
)
.
val
(
text
)
.
focus
(
)
;
}
10
)
;
}
return
false
;
}
myself
.
hideTagsError
(
)
;
return
true
;
}
textToData
(
text
)
{
return
{
name
:
myself
.
sanitizeText
(
text
.
toLowerCase
(
)
)
}
;
}
onReady
(
)
{
(
"
.
token
-
input
-
dropdown
"
)
.
addClass
(
"
token
-
input
-
dropdown
-
tag
"
)
;
inputwrapper
.
find
(
"
.
token
-
input
-
input
-
token
input
"
)
.
attr
(
"
data
-
l10n
-
id
"
inputwrapper
.
find
(
"
.
pkt_ext_tag_input
"
)
.
attr
(
"
data
-
l10n
-
id
"
)
)
.
css
(
"
width
"
"
200px
"
)
;
if
(
(
"
.
pkt_ext_suggestedtag_detail
"
)
.
length
)
{
(
"
.
pkt_ext_containersaved
"
)
.
find
(
"
.
pkt_ext_suggestedtag_detail
"
)
.
on
(
"
click
"
"
.
token_tag
"
function
(
e
)
{
e
.
preventDefault
(
)
;
var
tag
=
(
e
.
target
)
;
if
(
(
this
)
.
parents
(
"
.
pkt_ext_suggestedtag_detail_disabled
"
)
.
length
)
{
return
;
}
inputwrapper
.
find
(
"
.
pkt_ext_tag_input
"
)
.
tokenInput
(
"
add
"
{
id
:
inputwrapper
.
find
(
"
.
token
-
input
-
token
"
)
.
length
name
:
tag
.
text
(
)
}
)
;
tag
.
addClass
(
"
token
-
suggestedtag
-
inactive
"
)
;
(
"
.
token
-
input
-
input
-
token
input
"
)
.
focus
(
)
;
}
)
;
}
(
"
.
token
-
input
-
list
"
)
.
on
(
"
keydown
"
"
input
"
function
(
e
)
{
if
(
e
.
which
=
=
37
)
{
myself
.
updateSlidingTagList
(
)
;
}
if
(
e
.
which
=
=
=
9
)
{
(
"
a
.
pkt_ext_learn_more
"
)
.
focus
(
)
;
}
}
)
.
on
(
"
keypress
"
"
input
"
function
(
e
)
{
if
(
e
.
which
=
=
13
)
{
if
(
typeof
this
.
changestamp
=
=
"
undefined
"
|
|
Date
.
now
(
)
-
this
.
changestamp
>
250
)
{
e
.
preventDefault
(
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_btn
)
.
click
(
)
;
}
}
}
)
.
on
(
"
keyup
"
"
input
"
function
(
e
)
{
myself
.
checkValidTagSubmit
(
)
;
}
)
;
myself
.
checkPlaceholderStatus
(
)
;
}
onAdd
(
)
{
myself
.
checkValidTagSubmit
(
)
;
this
.
changestamp
=
Date
.
now
(
)
;
myself
.
hideInactiveTags
(
)
;
myself
.
checkPlaceholderStatus
(
)
;
}
onDelete
(
)
{
myself
.
checkValidTagSubmit
(
)
;
this
.
changestamp
=
Date
.
now
(
)
;
myself
.
showActiveTags
(
)
;
myself
.
checkPlaceholderStatus
(
)
;
}
onShowDropdown
(
)
{
myself
.
tagsDropdownOpen
=
true
;
}
onHideDropdown
(
)
{
myself
.
tagsDropdownOpen
=
false
;
}
}
)
;
(
"
body
"
)
.
on
(
"
keydown
"
function
(
e
)
{
var
key
=
e
.
keyCode
|
|
e
.
which
;
if
(
key
=
=
8
)
{
var
selected
=
(
"
.
token
-
input
-
selected
-
token
"
)
;
if
(
selected
.
length
)
{
e
.
preventDefault
(
)
;
e
.
stopImmediatePropagation
(
)
;
inputwrapper
.
find
(
"
.
pkt_ext_tag_input
"
)
.
tokenInput
(
"
remove
"
{
name
:
selected
.
find
(
"
p
"
)
.
text
(
)
}
)
;
}
}
else
if
(
(
e
.
target
)
.
parent
(
)
.
hasClass
(
"
token
-
input
-
input
-
token
"
)
)
{
e
.
stopImmediatePropagation
(
)
;
}
}
)
;
}
;
this
.
disableInput
=
function
(
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_item_actions
)
.
classList
.
add
(
"
pkt_ext_item_actions_disabled
"
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_btn
)
.
classList
.
add
(
"
pkt_ext_btn_disabled
"
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_tag_input_wrapper
)
.
classList
.
add
(
"
pkt_ext_tag_input_wrapper_disabled
"
)
;
if
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_suggestedtag_detail
)
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_suggestedtag_detail
)
.
classList
.
add
(
"
pkt_ext_suggestedtag_detail_disabled
"
)
;
}
}
;
this
.
enableInput
=
function
(
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_item_actions
)
.
classList
.
remove
(
"
pkt_ext_item_actions_disabled
"
)
;
this
.
checkValidTagSubmit
(
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_tag_input_wrapper
)
.
classList
.
remove
(
"
pkt_ext_tag_input_wrapper_disabled
"
)
;
if
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_suggestedtag_detail
)
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_suggestedtag_detail
)
.
classList
.
remove
(
"
pkt_ext_suggestedtag_detail_disabled
"
)
;
}
}
;
this
.
initAddTagInput
=
function
(
)
{
document
.
querySelector
(
.
pkt_ext_btn
)
.
addEventListener
(
click
e
=
>
{
e
.
preventDefault
(
)
;
if
(
e
.
target
.
classList
.
contains
(
pkt_ext_btn_disabled
)
|
|
document
.
querySelector
(
.
pkt_ext_edit_msg_active
.
pkt_ext_edit_msg_error
)
)
{
return
;
}
myself
.
disableInput
(
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_detail
h2
)
"
pocket
-
panel
-
saved
-
processing
-
tags
"
)
;
let
originaltags
=
[
]
;
document
.
querySelectorAll
(
.
token
-
input
-
token
p
)
.
forEach
(
el
=
>
{
let
text
=
el
.
textContent
.
trim
(
)
;
if
(
text
.
length
)
{
originaltags
.
push
(
text
)
;
}
}
)
;
messages
.
sendMessage
(
"
PKT_addTags
"
{
url
:
myself
.
savedUrl
tags
:
originaltags
}
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
data
.
status
=
=
"
success
"
)
{
myself
.
showStateFinalLocalizedMsg
(
"
pocket
-
panel
-
saved
-
tags
-
saved
"
)
;
}
else
if
(
data
.
status
=
=
"
error
"
)
{
let
elEditMsg
=
document
.
querySelector
(
.
pkt_ext_edit_msg
)
;
elEditMsg
.
classList
.
add
(
pkt_ext_edit_msg_error
pkt_ext_edit_msg_active
)
;
elEditMsg
.
textContent
=
data
.
error
.
message
;
}
}
)
;
}
)
;
}
;
this
.
initRemovePageInput
=
function
(
)
{
document
.
querySelector
(
.
pkt_ext_removeitem
)
.
addEventListener
(
click
e
=
>
{
document
.
querySelector
(
.
pkt_ext_subshell
)
.
style
.
display
=
none
;
if
(
e
.
target
.
closest
(
.
pkt_ext_item_actions_disabled
)
)
{
e
.
preventDefault
(
)
;
return
;
}
if
(
e
.
target
.
classList
.
contains
(
pkt_ext_removeitem
)
)
{
e
.
preventDefault
(
)
;
myself
.
disableInput
(
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_detail
h2
)
"
pocket
-
panel
-
saved
-
processing
-
remove
"
)
;
messages
.
sendMessage
(
"
PKT_deleteItem
"
{
itemId
:
myself
.
savedItemId
}
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
data
.
status
=
=
"
success
"
)
{
myself
.
showStateFinalLocalizedMsg
(
"
pocket
-
panel
-
saved
-
page
-
removed
"
)
;
}
else
if
(
data
.
status
=
=
"
error
"
)
{
let
elEditMsg
=
document
.
querySelector
(
.
pkt_ext_edit_msg
)
;
elEditMsg
.
classList
.
add
(
pkt_ext_edit_msg_error
pkt_ext_edit_msg_active
)
;
elEditMsg
.
textContent
=
data
.
error
.
message
;
}
}
)
;
}
}
)
;
}
;
this
.
initOpenListInput
=
function
(
)
{
messages
.
clickHelper
(
document
.
querySelector
(
.
pkt_ext_openpocket
)
{
source
:
view_list
}
)
;
}
;
this
.
showTagsLocalizedError
=
function
(
l10nId
)
{
document
.
querySelector
(
.
pkt_ext_edit_msg
)
?
.
classList
.
add
(
pkt_ext_edit_msg_error
pkt_ext_edit_msg_active
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
.
pkt_ext_edit_msg
)
l10nId
)
;
document
.
querySelector
(
.
pkt_ext_tag_detail
)
?
.
classList
.
add
(
pkt_ext_tag_error
)
;
}
;
this
.
hideTagsError
=
function
(
)
{
document
.
querySelector
(
.
pkt_ext_edit_msg
)
?
.
classList
.
remove
(
pkt_ext_edit_msg_error
pkt_ext_edit_msg_active
)
;
document
.
querySelector
(
.
pkt_ext_edit_msg
)
.
textContent
=
;
document
.
querySelector
(
pkt_ext_tag_detail
)
?
.
classList
.
remove
(
pkt_ext_tag_error
)
;
}
;
this
.
showActiveTags
=
function
(
)
{
if
(
!
document
.
querySelector
(
.
pkt_ext_suggestedtag_detail
)
)
{
return
;
}
let
activeTokens
=
[
]
;
document
.
querySelectorAll
(
.
token
-
input
-
token
p
)
.
forEach
(
el
=
>
{
activeTokens
.
push
(
el
.
textContent
)
;
}
)
;
let
elInactiveTags
=
document
.
querySelectorAll
(
.
pkt_ext_suggestedtag_detail
.
token_tag_inactive
)
;
elInactiveTags
.
forEach
(
el
=
>
{
if
(
!
activeTokens
.
includes
(
el
.
textContent
)
)
{
el
.
classList
.
remove
(
token_tag_inactive
)
;
}
}
)
;
}
;
this
.
hideInactiveTags
=
function
(
)
{
if
(
!
document
.
querySelector
(
.
pkt_ext_suggestedtag_detail
)
)
{
return
;
}
let
activeTokens
=
[
]
;
document
.
querySelectorAll
(
.
token
-
input
-
token
p
)
.
forEach
(
el
=
>
{
activeTokens
.
push
(
el
.
textContent
)
;
}
)
;
let
elActiveTags
=
document
.
querySelectorAll
(
.
token_tag
:
not
(
.
token_tag_inactive
)
)
;
elActiveTags
.
forEach
(
el
=
>
{
if
(
activeTokens
.
includes
(
el
.
textContent
)
)
{
el
.
classList
.
add
(
token_tag_inactive
)
;
}
}
)
;
}
;
this
.
showStateSaved
=
function
(
initobj
)
{
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
.
pkt_ext_detail
h2
"
)
"
pocket
-
panel
-
saved
-
page
-
saved
"
)
;
document
.
querySelector
(
.
pkt_ext_btn
)
.
classList
.
add
(
pkt_ext_btn_disabled
)
;
if
(
typeof
initobj
.
item
=
=
"
object
"
)
{
this
.
savedItemId
=
initobj
.
item
.
item_id
;
this
.
savedUrl
=
initobj
.
item
.
given_url
;
}
document
.
querySelector
(
.
pkt_ext_containersaved
)
.
classList
.
add
(
pkt_ext_container_detailactive
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
)
.
classList
.
remove
(
pkt_ext_container_finalstate
)
;
myself
.
fillUserTags
(
)
;
if
(
!
myself
.
suggestedTagsLoaded
)
{
myself
.
fillSuggestedTags
(
)
;
}
}
;
this
.
renderItemRecs
=
function
(
data
)
{
if
(
data
?
.
recommendations
?
.
length
)
{
data
.
recommendations
=
data
.
recommendations
.
map
(
rec
=
>
{
let
rawSource
=
rec
?
.
item
?
.
top_image_url
|
|
rec
?
.
item
?
.
images
[
"
1
"
]
?
.
src
;
if
(
rec
?
.
item
?
.
resolved_url
&
&
!
rec
.
item
.
resolved_url
.
match
(
/
\
?
/
)
)
{
rec
.
item
.
resolved_url
=
{
rec
.
item
.
resolved_url
}
?
utm_source
=
pocket
-
ff
-
recs
;
}
rec
.
item
.
encodedThumbURL
=
rawSource
?
encodeURIComponent
(
rawSource
)
:
null
;
return
rec
;
}
)
;
const
model
=
data
.
recommendations
[
0
]
.
experiment
;
const
renderedRecs
=
Handlebars
.
templates
.
item_recs
(
data
)
;
document
.
querySelector
(
body
)
.
classList
.
add
(
recs_enabled
)
;
document
.
querySelector
(
.
pkt_ext_subshell
)
.
style
.
display
=
block
;
document
.
querySelector
(
.
pkt_ext_item_recs
)
.
append
(
myself
.
parseHTML
(
renderedRecs
)
)
;
messages
.
clickHelper
(
document
.
querySelector
(
.
pkt_ext_learn_more
)
{
source
:
recs_learn_more
}
)
;
document
.
querySelectorAll
(
.
pkt_ext_item_recs_link
)
.
forEach
(
(
el
position
)
=
>
{
el
.
addEventListener
(
click
e
=
>
{
e
.
preventDefault
(
)
;
messages
.
sendMessage
(
PKT_openTabWithPocketUrl
{
url
:
el
.
getAttribute
(
href
)
model
position
}
)
;
}
)
;
}
)
;
}
}
;
this
.
sanitizeText
=
function
(
s
)
{
var
sanitizeMap
=
{
"
&
"
:
"
&
amp
;
"
"
<
"
:
"
&
lt
;
"
"
>
"
:
"
&
gt
;
"
'
"
'
:
"
&
quot
;
"
"
'
"
:
"
&
#
39
;
"
}
;
if
(
typeof
s
!
=
=
"
string
"
)
{
return
"
"
;
}
return
String
(
s
)
.
replace
(
/
[
&
<
>
"
'
]
/
g
function
(
str
)
{
return
sanitizeMap
[
str
]
;
}
)
;
}
;
this
.
showStateFinalLocalizedMsg
=
function
(
l10nId
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_tag_detail
)
.
addEventListener
(
transitionend
(
)
=
>
{
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_detail
h2
)
l10nId
)
;
}
{
once
:
true
}
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
)
.
classList
.
add
(
pkt_ext_container_finalstate
)
;
}
;
this
.
showStateLocalizedError
=
function
(
headlineL10nId
detailL10nId
)
{
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_detail
h2
)
headlineL10nId
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
.
pkt_ext_containersaved
.
pkt_ext_detail
h3
)
detailL10nId
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
)
.
classList
.
add
(
pkt_ext_container_detailactive
pkt_ext_container_finalstate
pkt_ext_container_finalerrorstate
)
;
}
;
}
;
SavedOverlay
.
prototype
=
{
create
(
{
pockethost
}
)
{
if
(
this
.
active
)
{
return
;
}
this
.
active
=
true
;
var
myself
=
this
;
const
{
searchParams
}
=
new
URL
(
window
.
location
.
href
)
;
const
premiumStatus
=
searchParams
.
get
(
premiumStatus
)
=
=
1
;
const
locale
=
searchParams
.
get
(
locale
)
|
|
;
const
language
=
locale
.
split
(
-
)
[
0
]
.
toLowerCase
(
)
;
const
layoutRefresh
=
searchParams
.
get
(
layoutRefresh
)
=
=
=
true
;
const
utmSource
=
searchParams
.
get
(
utmSource
)
;
const
utmCampaign
=
searchParams
.
get
(
utmCampaign
)
;
const
utmContent
=
searchParams
.
get
(
utmContent
)
;
if
(
layoutRefresh
)
{
document
.
querySelector
(
.
pkt_ext_containersaved
)
?
.
classList
.
add
(
stp_saved_body
)
;
document
.
querySelector
(
.
pkt_ext_containersaved
)
?
.
classList
.
remove
(
pkt_ext_containersaved
)
;
react_dom
.
render
(
react
.
createElement
(
Saved_Saved
{
locale
:
locale
pockethost
:
pockethost
utmSource
:
utmSource
utmCampaign
:
utmCampaign
utmContent
:
utmContent
}
)
document
.
querySelector
(
body
)
)
;
}
else
{
const
templateData
=
{
pockethost
}
;
if
(
language
)
{
document
.
querySelector
(
body
)
.
classList
.
add
(
pkt_ext_saved_
{
language
}
)
;
}
const
parser
=
new
DOMParser
(
)
;
document
.
querySelector
(
body
)
.
append
(
.
.
.
parser
.
parseFromString
(
Handlebars
.
templates
.
saved_shell
(
templateData
)
text
/
html
)
.
body
.
childNodes
)
;
if
(
premiumStatus
&
&
!
document
.
querySelector
(
.
pkt_ext_suggestedtag_detail
)
)
{
let
elSubshell
=
document
.
querySelector
(
body
.
pkt_ext_subshell
)
;
let
elPremiumShellElements
=
parser
.
parseFromString
(
Handlebars
.
templates
.
saved_premiumshell
(
templateData
)
text
/
html
)
.
body
.
childNodes
;
elPremiumShellElements
=
[
]
.
slice
.
call
(
elPremiumShellElements
)
.
reverse
(
)
;
elPremiumShellElements
.
forEach
(
el
=
>
{
elSubshell
.
insertBefore
(
el
elSubshell
.
firstChild
)
;
}
)
;
}
this
.
initTagInput
(
)
;
this
.
initAddTagInput
(
)
;
this
.
initRemovePageInput
(
)
;
this
.
initOpenListInput
(
)
;
messages
.
addMessageListener
(
"
PKT_saveLink
"
function
(
resp
)
{
const
{
data
}
=
resp
;
if
(
data
.
status
=
=
"
error
"
)
{
let
errorLocalizedKey
=
data
?
.
error
?
.
localizedKey
|
|
"
pocket
-
panel
-
saved
-
error
-
generic
"
;
myself
.
showStateLocalizedError
(
"
pocket
-
panel
-
saved
-
error
-
not
-
saved
"
errorLocalizedKey
)
;
return
;
}
myself
.
showStateSaved
(
data
)
;
}
)
;
messages
.
addMessageListener
(
"
PKT_renderItemRecs
"
function
(
resp
)
{
const
{
data
}
=
resp
;
myself
.
renderItemRecs
(
data
)
;
}
)
;
messages
.
sendMessage
(
"
PKT_show_saved
"
)
;
}
}
}
;
const
saved_overlay
=
(
SavedOverlay
)
;
;
var
StyleGuideOverlay
=
function
(
options
)
{
}
;
StyleGuideOverlay
.
prototype
=
{
create
(
)
{
react_dom
.
render
(
react
.
createElement
(
"
div
"
null
react
.
createElement
(
"
h3
"
null
"
JSX
Components
:
"
)
react
.
createElement
(
"
h4
"
{
className
:
"
stp_styleguide_h4
"
}
"
Button
"
)
react
.
createElement
(
Button_Button
{
style
:
"
text
"
url
:
"
https
:
/
/
example
.
org
"
source
:
"
styleguide
"
}
"
Text
Button
"
)
react
.
createElement
(
"
br
"
null
)
react
.
createElement
(
Button_Button
{
style
:
"
primary
"
url
:
"
https
:
/
/
example
.
org
"
source
:
"
styleguide
"
}
"
Primary
Button
"
)
react
.
createElement
(
"
br
"
null
)
react
.
createElement
(
Button_Button
{
style
:
"
secondary
"
url
:
"
https
:
/
/
example
.
org
"
source
:
"
styleguide
"
}
"
Secondary
Button
"
)
react
.
createElement
(
"
span
"
{
className
:
"
stp_button_wide
"
}
react
.
createElement
(
Button_Button
{
style
:
"
primary
"
url
:
"
https
:
/
/
example
.
org
"
source
:
"
styleguide
"
}
"
Primary
Wide
Button
"
)
)
react
.
createElement
(
"
span
"
{
className
:
"
stp_button_wide
"
}
react
.
createElement
(
Button_Button
{
style
:
"
secondary
"
url
:
"
https
:
/
/
example
.
org
"
source
:
"
styleguide
"
}
"
Secondary
Wide
Button
"
)
)
react
.
createElement
(
"
h4
"
{
className
:
"
stp_styleguide_h4
"
}
"
Header
"
)
react
.
createElement
(
Header_Header
null
react
.
createElement
(
Button_Button
{
style
:
"
primary
"
url
:
"
https
:
/
/
example
.
org
"
source
:
"
styleguide
"
}
"
View
My
List
"
)
)
react
.
createElement
(
"
h4
"
{
className
:
"
stp_styleguide_h4
"
}
"
PopularTopics
"
)
react
.
createElement
(
PopularTopics_PopularTopics
{
pockethost
:
getpocket
.
com
source
:
styleguide
utmParams
:
utm_source
=
styleguide
topics
:
[
{
title
:
"
Self
Improvement
"
topic
:
"
self
-
improvement
"
}
{
title
:
"
Food
"
topic
:
"
food
"
}
{
title
:
"
Entertainment
"
topic
:
"
entertainment
"
}
{
title
:
"
Science
"
topic
:
"
science
"
}
]
}
)
react
.
createElement
(
"
h4
"
{
className
:
"
stp_styleguide_h4
"
}
"
ArticleList
"
)
react
.
createElement
(
ArticleList_ArticleList
{
source
:
styleguide
articles
:
[
{
title
:
"
Article
Title
"
publisher
:
"
Publisher
"
thumbnail
:
"
https
:
/
/
img
-
getpocket
.
cdn
.
mozilla
.
net
/
80x80
/
https
:
/
/
www
.
raritanheadwaters
.
org
/
wp
-
content
/
uploads
/
2020
/
04
/
red
-
fox
.
jpg
"
url
:
"
https
:
/
/
example
.
org
"
alt
:
"
Alt
Text
"
}
{
title
:
"
Article
Title
(
No
Publisher
)
"
thumbnail
:
"
https
:
/
/
img
-
getpocket
.
cdn
.
mozilla
.
net
/
80x80
/
https
:
/
/
www
.
raritanheadwaters
.
org
/
wp
-
content
/
uploads
/
2020
/
04
/
red
-
fox
.
jpg
"
url
:
"
https
:
/
/
example
.
org
"
alt
:
"
Alt
Text
"
}
{
title
:
"
Article
Title
(
No
Thumbnail
)
"
publisher
:
"
Publisher
"
url
:
"
https
:
/
/
example
.
org
"
alt
:
"
Alt
Text
"
}
]
}
)
react
.
createElement
(
"
h4
"
{
className
:
"
stp_styleguide_h4
"
}
"
TagPicker
"
)
react
.
createElement
(
TagPicker_TagPicker
{
tags
:
[
futurism
politics
mozilla
]
}
)
react
.
createElement
(
"
h3
"
null
"
Typography
:
"
)
react
.
createElement
(
"
h2
"
{
className
:
"
header_large
"
}
"
.
header_large
"
)
react
.
createElement
(
"
h3
"
{
className
:
"
header_medium
"
}
"
.
header_medium
"
)
react
.
createElement
(
"
p
"
null
"
paragraph
"
)
react
.
createElement
(
"
h3
"
null
"
Native
Elements
:
"
)
react
.
createElement
(
"
h4
"
{
className
:
"
stp_styleguide_h4
"
}
"
Horizontal
Rule
"
)
react
.
createElement
(
"
hr
"
null
)
)
document
.
querySelector
(
#
stp_style_guide_components
)
)
;
}
}
;
const
style_guide_overlay
=
(
StyleGuideOverlay
)
;
;
var
PKT_PANEL
=
function
(
)
{
}
;
PKT_PANEL
.
prototype
=
{
initHome
(
)
{
this
.
overlay
=
new
overlay
(
)
;
this
.
init
(
)
;
}
initSignup
(
)
{
this
.
overlay
=
new
signup_overlay
(
)
;
this
.
init
(
)
;
}
initSaved
(
)
{
this
.
overlay
=
new
saved_overlay
(
)
;
this
.
init
(
)
;
}
initStyleGuide
(
)
{
this
.
overlay
=
new
style_guide_overlay
(
)
;
this
.
init
(
)
;
}
setupObservers
(
)
{
this
.
setupMutationObserver
(
)
;
this
.
setupIntersectionObserver
(
)
;
}
init
(
)
{
if
(
this
.
inited
)
{
return
;
}
this
.
setupObservers
(
)
;
this
.
inited
=
true
;
}
resizeParent
(
)
{
let
clientHeight
=
document
.
body
.
clientHeight
;
if
(
this
.
overlay
.
tagsDropdownOpen
)
{
clientHeight
=
Math
.
max
(
clientHeight
252
)
;
}
if
(
clientHeight
)
{
messages
.
sendMessage
(
"
PKT_resizePanel
"
{
width
:
document
.
body
.
clientWidth
height
:
clientHeight
}
)
;
}
}
setupIntersectionObserver
(
)
{
const
observer
=
new
IntersectionObserver
(
entries
=
>
{
if
(
entries
.
find
(
e
=
>
e
.
isIntersecting
)
)
{
this
.
resizeParent
(
)
;
observer
.
unobserve
(
document
.
body
)
;
}
}
)
;
observer
.
observe
(
document
.
body
)
;
}
setupMutationObserver
(
)
{
const
targetNode
=
document
.
body
;
const
config
=
{
attributes
:
false
childList
:
true
subtree
:
true
}
;
const
callback
=
(
mutationList
observer
)
=
>
{
mutationList
.
forEach
(
mutation
=
>
{
switch
(
mutation
.
type
)
{
case
"
childList
"
:
{
this
.
resizeParent
(
)
;
break
;
}
}
}
)
;
}
;
const
observer
=
new
MutationObserver
(
callback
)
;
observer
.
observe
(
targetNode
config
)
;
}
create
(
)
{
const
pockethost
=
RPMGetStringPref
(
"
extensions
.
pocket
.
site
"
)
|
|
"
getpocket
.
com
"
;
this
.
overlay
.
create
(
{
pockethost
}
)
;
}
}
;
window
.
PKT_PANEL
=
PKT_PANEL
;
window
.
pktPanelMessaging
=
messages
;
}
)
}
)
;
var
__webpack_module_cache__
=
{
}
;
function
__webpack_require__
(
moduleId
)
{
var
cachedModule
=
__webpack_module_cache__
[
moduleId
]
;
if
(
cachedModule
!
=
=
undefined
)
{
return
cachedModule
.
exports
;
}
var
module
=
__webpack_module_cache__
[
moduleId
]
=
{
exports
:
{
}
}
;
__webpack_modules__
[
moduleId
]
(
module
module
.
exports
__webpack_require__
)
;
return
module
.
exports
;
}
__webpack_require__
.
m
=
__webpack_modules__
;
(
(
)
=
>
{
var
deferred
=
[
]
;
__webpack_require__
.
O
=
(
result
chunkIds
fn
priority
)
=
>
{
if
(
chunkIds
)
{
priority
=
priority
|
|
0
;
for
(
var
i
=
deferred
.
length
;
i
>
0
&
&
deferred
[
i
-
1
]
[
2
]
>
priority
;
i
-
-
)
deferred
[
i
]
=
deferred
[
i
-
1
]
;
deferred
[
i
]
=
[
chunkIds
fn
priority
]
;
return
;
}
var
notFulfilled
=
Infinity
;
for
(
var
i
=
0
;
i
<
deferred
.
length
;
i
+
+
)
{
var
[
chunkIds
fn
priority
]
=
deferred
[
i
]
;
var
fulfilled
=
true
;
for
(
var
j
=
0
;
j
<
chunkIds
.
length
;
j
+
+
)
{
if
(
(
priority
&
1
=
=
=
0
|
|
notFulfilled
>
=
priority
)
&
&
Object
.
keys
(
__webpack_require__
.
O
)
.
every
(
(
key
)
=
>
(
__webpack_require__
.
O
[
key
]
(
chunkIds
[
j
]
)
)
)
)
{
chunkIds
.
splice
(
j
-
-
1
)
;
}
else
{
fulfilled
=
false
;
if
(
priority
<
notFulfilled
)
notFulfilled
=
priority
;
}
}
if
(
fulfilled
)
{
deferred
.
splice
(
i
-
-
1
)
var
r
=
fn
(
)
;
if
(
r
!
=
=
undefined
)
result
=
r
;
}
}
return
result
;
}
;
}
)
(
)
;
(
(
)
=
>
{
__webpack_require__
.
o
=
(
obj
prop
)
=
>
(
Object
.
prototype
.
hasOwnProperty
.
call
(
obj
prop
)
)
}
)
(
)
;
(
(
)
=
>
{
var
installedChunks
=
{
179
:
0
}
;
__webpack_require__
.
O
.
j
=
(
chunkId
)
=
>
(
installedChunks
[
chunkId
]
=
=
=
0
)
;
var
webpackJsonpCallback
=
(
parentChunkLoadingFunction
data
)
=
>
{
var
[
chunkIds
moreModules
runtime
]
=
data
;
var
moduleId
chunkId
i
=
0
;
if
(
chunkIds
.
some
(
(
id
)
=
>
(
installedChunks
[
id
]
!
=
=
0
)
)
)
{
for
(
moduleId
in
moreModules
)
{
if
(
__webpack_require__
.
o
(
moreModules
moduleId
)
)
{
__webpack_require__
.
m
[
moduleId
]
=
moreModules
[
moduleId
]
;
}
}
if
(
runtime
)
var
result
=
runtime
(
__webpack_require__
)
;
}
if
(
parentChunkLoadingFunction
)
parentChunkLoadingFunction
(
data
)
;
for
(
;
i
<
chunkIds
.
length
;
i
+
+
)
{
chunkId
=
chunkIds
[
i
]
;
if
(
__webpack_require__
.
o
(
installedChunks
chunkId
)
&
&
installedChunks
[
chunkId
]
)
{
installedChunks
[
chunkId
]
[
0
]
(
)
;
}
installedChunks
[
chunkIds
[
i
]
]
=
0
;
}
return
__webpack_require__
.
O
(
result
)
;
}
var
chunkLoadingGlobal
=
self
[
"
webpackChunksave_to_pocket_ff
"
]
=
self
[
"
webpackChunksave_to_pocket_ff
"
]
|
|
[
]
;
chunkLoadingGlobal
.
forEach
(
webpackJsonpCallback
.
bind
(
null
0
)
)
;
chunkLoadingGlobal
.
push
=
webpackJsonpCallback
.
bind
(
null
chunkLoadingGlobal
.
push
.
bind
(
chunkLoadingGlobal
)
)
;
}
)
(
)
;
var
__webpack_exports__
=
__webpack_require__
.
O
(
undefined
[
736
]
(
)
=
>
(
__webpack_require__
(
122
)
)
)
__webpack_exports__
=
__webpack_require__
.
O
(
__webpack_exports__
)
;
}
)
(
)
;
