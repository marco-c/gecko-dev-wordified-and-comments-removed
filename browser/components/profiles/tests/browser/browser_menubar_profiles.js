"
use
strict
"
;
async
function
waitForUIUpdate
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
}
add_task
(
async
function
test_pref_toggles_menu
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
profiles
.
enabled
"
false
]
]
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
profiles
.
enabled
"
true
]
]
}
)
;
await
waitForUIUpdate
(
)
;
let
menu
=
document
.
getElementById
(
"
profiles
-
menu
"
)
;
Assert
.
equal
(
menu
.
hidden
false
"
menu
should
be
visible
when
preffed
on
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
waitForUIUpdate
(
)
;
Assert
.
equal
(
menu
.
hidden
true
"
menu
should
be
hidden
when
preffed
off
"
)
;
}
)
;
add_task
(
async
function
test_menu_contents_no_profiles
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
profiles
.
enabled
"
true
]
]
}
)
;
let
popup
=
document
.
getElementById
(
"
menu_ProfilesPopup
"
)
;
SelectableProfileService
.
uninit
(
)
;
await
waitForUIUpdate
(
)
;
let
updated
=
new
Promise
(
resolve
=
>
{
popup
.
addEventListener
(
"
popupshown
"
resolve
{
once
:
true
}
)
;
}
)
;
popup
.
dispatchEvent
(
new
MouseEvent
(
"
popupshowing
"
{
bubbles
:
true
}
)
)
;
popup
.
dispatchEvent
(
new
MouseEvent
(
"
popupshown
"
{
bubbles
:
true
}
)
)
;
await
updated
;
let
newProfileMenuItem
=
popup
.
querySelector
(
"
#
menu_newProfile
"
)
;
ok
(
!
!
newProfileMenuItem
"
should
be
a
'
new
profile
'
menu
item
"
)
;
let
manageProfilesMenuItem
=
popup
.
querySelector
(
"
#
menu_manageProfiles
"
)
;
ok
(
!
!
manageProfilesMenuItem
"
should
be
a
'
manage
profiles
'
menu
item
"
)
;
let
profileMenuItems
=
popup
.
querySelectorAll
(
"
menuitem
[
profileid
]
"
)
;
Assert
.
equal
(
profileMenuItems
.
length
0
"
should
not
be
any
profile
items
in
the
menu
"
)
;
}
)
;
