"
use
strict
"
;
async
function
openPreferencesViaOpenPreferencesAPI
(
aPane
aOptions
)
{
let
finalPaneEvent
=
Services
.
prefs
.
getBoolPref
(
"
identity
.
fxaccounts
.
enabled
"
)
?
"
sync
-
pane
-
loaded
"
:
"
privacy
-
pane
-
loaded
"
;
let
finalPrefPaneLoaded
=
TestUtils
.
topicObserved
(
finalPaneEvent
(
)
=
>
true
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
{
allowInheritPrincipal
:
true
}
)
;
openPreferences
(
aPane
aOptions
)
;
let
newTabBrowser
=
gBrowser
.
selectedBrowser
;
if
(
!
newTabBrowser
.
contentWindow
)
{
await
BrowserTestUtils
.
waitForEvent
(
newTabBrowser
"
Initialized
"
true
)
;
await
BrowserTestUtils
.
waitForEvent
(
newTabBrowser
.
contentWindow
"
load
"
)
;
await
finalPrefPaneLoaded
;
}
let
win
=
gBrowser
.
contentWindow
;
let
selectedPane
=
win
.
history
.
state
;
if
(
!
aOptions
|
|
!
aOptions
.
leaveOpen
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
return
{
selectedPane
}
;
}
function
promiseLoadSubDialog
(
aURL
)
{
return
new
Promise
(
resolve
=
>
{
content
.
gSubDialog
.
_dialogStack
.
addEventListener
(
"
dialogopen
"
function
dialogopen
(
aEvent
)
{
if
(
aEvent
.
detail
.
dialog
.
_frame
.
contentWindow
.
location
=
=
"
about
:
blank
"
)
{
return
;
}
content
.
gSubDialog
.
_dialogStack
.
removeEventListener
(
"
dialogopen
"
dialogopen
)
;
is
(
aEvent
.
detail
.
dialog
.
_frame
.
contentWindow
.
location
.
toString
(
)
aURL
"
Check
the
proper
URL
is
loaded
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
aEvent
.
detail
.
dialog
.
_overlay
)
"
Overlay
is
visible
"
)
;
let
expectedStyleSheetURLs
=
aEvent
.
detail
.
dialog
.
_injectedStyleSheets
.
slice
(
0
)
;
for
(
let
styleSheet
of
aEvent
.
detail
.
dialog
.
_frame
.
contentDocument
.
styleSheets
)
{
let
i
=
expectedStyleSheetURLs
.
indexOf
(
styleSheet
.
href
)
;
if
(
i
>
=
0
)
{
info
(
"
found
"
+
styleSheet
.
href
)
;
expectedStyleSheetURLs
.
splice
(
i
1
)
;
}
}
is
(
expectedStyleSheetURLs
.
length
0
"
All
expectedStyleSheetURLs
should
have
been
found
"
)
;
executeSoon
(
(
)
=
>
resolve
(
aEvent
.
detail
.
dialog
.
_frame
.
contentWindow
)
)
;
}
)
;
}
)
;
}
add_task
(
async
function
testHiddenWhenDisabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
profiles
.
enabled
"
false
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
paneGeneral
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
let
profilesCategory
=
doc
.
getElementById
(
"
profilesGroup
"
)
;
ok
(
profilesCategory
"
The
category
exists
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
profilesCategory
)
"
The
category
is
hidden
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
testEnabled
(
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
paneGeneral
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
let
profilesCategory
=
doc
.
getElementById
(
"
profilesGroup
"
)
;
ok
(
SelectableProfileService
.
isEnabled
"
Profiles
should
be
enabled
"
)
;
ok
(
profilesCategory
"
The
category
exists
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
profilesCategory
)
"
The
category
is
visible
"
)
;
let
learnMore
=
doc
.
getElementById
(
"
profile
-
management
-
learn
-
more
"
)
;
Assert
.
equal
(
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
/
support
-
dummy
/
profile
-
management
"
learnMore
.
href
"
Learn
More
link
should
have
expected
URL
"
)
;
let
promiseSubDialogLoaded
=
promiseLoadSubDialog
(
"
about
:
profilemanager
"
)
;
let
profilesButton
=
doc
.
getElementById
(
"
manage
-
profiles
"
)
;
profilesButton
.
click
(
)
;
await
promiseSubDialogLoaded
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
testPrivacyInfoEnabled
(
)
{
ok
(
SelectableProfileService
.
isEnabled
"
service
should
be
enabled
"
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
doc
=
gBrowser
.
contentDocument
;
let
profilesNote
=
doc
.
getElementById
(
"
preferences
-
privacy
-
profiles
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
profilesNote
)
"
The
profiles
note
is
visible
"
)
;
let
promiseSubDialogLoaded
=
promiseLoadSubDialog
(
"
about
:
profilemanager
"
)
;
let
profilesButton
=
doc
.
getElementById
(
"
dataCollectionViewProfiles
"
)
;
profilesButton
.
click
(
)
;
await
promiseSubDialogLoaded
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
testPrivacyInfoHiddenWhenDisabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
profiles
.
enabled
"
false
]
[
"
toolkit
.
profiles
.
storeID
"
"
"
]
]
}
)
;
gProfileService
.
currentProfile
.
storeID
=
null
;
await
SelectableProfileService
.
uninit
(
)
;
await
SelectableProfileService
.
init
(
)
;
ok
(
!
SelectableProfileService
.
isEnabled
"
service
should
not
be
enabled
"
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
profilesNote
=
gBrowser
.
contentDocument
.
getElementById
(
"
preferences
-
privacy
-
profiles
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
profilesNote
)
"
The
profiles
note
is
hidden
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
