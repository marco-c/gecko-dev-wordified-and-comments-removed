"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
OpenGraphPageData
"
]
;
const
{
PageDataCollector
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
pagedata
/
PageDataCollector
.
jsm
"
)
;
const
RELEVANT_TAGS
=
[
"
title
"
"
site_name
"
"
image
"
"
type
"
"
url
"
]
;
class
OpenGraphPageData
extends
PageDataCollector
{
async
init
(
)
{
return
this
.
#
collect
(
)
;
}
#
collectOpenGraphTags
(
tags
)
{
let
pageData
=
Object
.
fromEntries
(
RELEVANT_TAGS
.
map
(
tag
=
>
[
tag
undefined
]
)
)
;
for
(
let
tag
of
tags
)
{
let
propertyName
=
tag
.
getAttribute
(
"
property
"
)
.
substring
(
3
)
;
if
(
RELEVANT_TAGS
.
includes
(
propertyName
)
)
{
pageData
[
propertyName
]
=
tag
.
getAttribute
(
"
content
"
)
;
}
}
return
pageData
;
}
#
collect
(
)
{
let
items
=
new
Map
(
)
;
let
insert
=
(
type
item
)
=
>
{
let
data
=
items
.
get
(
type
)
;
if
(
!
data
)
{
data
=
[
]
;
items
.
set
(
type
data
)
;
}
data
.
push
(
item
)
;
}
;
let
openGraphTags
=
this
.
document
.
querySelectorAll
(
"
meta
[
property
^
=
'
og
:
'
"
)
;
if
(
!
openGraphTags
.
length
)
{
return
[
]
;
}
insert
(
PageDataCollector
.
DATA_TYPE
.
GENERAL
this
.
#
collectOpenGraphTags
(
openGraphTags
)
)
;
return
Array
.
from
(
items
(
[
type
data
]
)
=
>
(
{
type
data
}
)
)
;
}
}
