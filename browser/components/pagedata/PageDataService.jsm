"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PageDataService
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logConsole
"
function
(
)
{
return
console
.
createInstance
(
{
prefix
:
"
PageData
"
maxLogLevel
:
Services
.
prefs
.
getBoolPref
(
"
browser
.
pagedata
.
log
"
false
)
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
const
PageDataService
=
new
(
class
PageDataService
extends
EventEmitter
{
#
pageDataCache
=
new
Map
(
)
;
constructor
(
)
{
super
(
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
pagedata
.
enabled
"
false
)
)
{
return
;
}
logConsole
.
debug
(
"
Service
started
"
)
;
}
pageDataDiscovered
(
url
data
)
{
let
pageData
=
{
url
date
:
Date
.
now
(
)
data
}
;
this
.
#
pageDataCache
.
set
(
url
pageData
)
;
if
(
data
.
length
)
{
this
.
emit
(
"
page
-
data
"
pageData
)
;
}
}
getCached
(
url
)
{
return
this
.
#
pageDataCache
.
get
(
url
)
?
?
null
;
}
async
queueFetch
(
url
)
{
let
cached
=
this
.
#
pageDataCache
.
get
(
url
)
;
if
(
cached
)
{
return
cached
;
}
let
pageData
=
{
url
date
:
Date
.
now
(
)
data
:
[
]
}
;
this
.
#
pageDataCache
.
set
(
url
pageData
)
;
if
(
pageData
.
data
.
length
)
{
this
.
emit
(
"
page
-
data
"
pageData
)
;
}
return
pageData
;
}
}
)
(
)
;
