"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PageDataParent
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
PageDataService
:
"
resource
:
/
/
/
modules
/
pagedata
/
PageDataService
.
jsm
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
}
)
;
class
PageDataParent
extends
JSWindowActorParent
{
#
deferredCollection
=
null
;
collectPageData
(
)
{
if
(
!
this
.
#
deferredCollection
)
{
this
.
#
deferredCollection
=
lazy
.
PromiseUtils
.
defer
(
)
;
this
.
sendQuery
(
"
PageData
:
Collect
"
)
.
then
(
this
.
#
deferredCollection
.
resolve
this
.
#
deferredCollection
.
reject
)
;
}
return
this
.
#
deferredCollection
.
promise
;
}
didDestroy
(
)
{
this
.
#
deferredCollection
?
.
resolve
(
null
)
;
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
PageData
:
DocumentReady
"
:
lazy
.
PageDataService
.
pageLoaded
(
this
msg
.
data
.
url
)
;
break
;
}
}
}
