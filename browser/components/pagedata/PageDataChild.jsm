"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PageDataChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
OpenGraphPageData
:
"
resource
:
/
/
/
modules
/
pagedata
/
OpenGraphPageData
.
jsm
"
PageDataSchema
:
"
resource
:
/
/
/
modules
/
pagedata
/
PageDataSchema
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
SchemaOrgPageData
:
"
resource
:
/
/
/
modules
/
pagedata
/
SchemaOrgPageData
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logConsole
"
function
(
)
{
return
console
.
createInstance
(
{
prefix
:
"
PageData
"
maxLogLevel
:
Services
.
prefs
.
getBoolPref
(
"
browser
.
pagedata
.
log
"
false
)
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
READY_DELAY
"
"
browser
.
pagedata
.
readyDelay
"
500
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
DATA_COLLECTORS
"
function
(
)
{
return
[
SchemaOrgPageData
OpenGraphPageData
]
;
}
)
;
class
PageDataChild
extends
JSWindowActorChild
{
#
isContentWindowPrivate
=
true
;
#
deferTimer
=
null
;
actorCreated
(
)
{
this
.
#
isContentWindowPrivate
=
PrivateBrowsingUtils
.
isContentWindowPrivate
(
this
.
contentWindow
)
;
}
didDestroy
(
)
{
if
(
this
.
#
deferTimer
)
{
this
.
#
deferTimer
.
cancel
(
)
;
}
}
#
deferReady
(
)
{
if
(
!
this
.
#
deferTimer
)
{
this
.
#
deferTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
}
this
.
#
deferTimer
.
initWithCallback
(
(
)
=
>
{
this
.
#
deferTimer
=
null
;
this
.
sendAsyncMessage
(
"
PageData
:
DocumentReady
"
{
url
:
this
.
document
.
documentURI
}
)
;
}
READY_DELAY
Ci
.
nsITimer
.
TYPE_ONE_SHOT_LOW_PRIORITY
)
;
}
async
#
collectData
(
)
{
logConsole
.
debug
(
"
Starting
collection
"
this
.
document
.
documentURI
)
;
let
pending
=
DATA_COLLECTORS
.
map
(
async
collector
=
>
{
try
{
return
await
collector
.
collect
(
this
.
document
)
;
}
catch
(
e
)
{
logConsole
.
error
(
"
Error
collecting
page
data
"
e
)
;
return
{
}
;
}
}
)
;
let
pageDataList
=
await
Promise
.
all
(
pending
)
;
let
pageData
=
pageDataList
.
reduce
(
PageDataSchema
.
coalescePageData
{
date
:
Date
.
now
(
)
url
:
this
.
document
.
documentURI
}
)
;
try
{
return
PageDataSchema
.
validatePageData
(
pageData
)
;
}
catch
(
e
)
{
logConsole
.
error
(
"
Failed
to
collect
valid
page
data
"
e
)
;
return
null
;
}
}
receiveMessage
(
msg
)
{
if
(
this
.
#
isContentWindowPrivate
)
{
return
undefined
;
}
switch
(
msg
.
name
)
{
case
"
PageData
:
CheckLoaded
"
:
if
(
this
.
document
.
readystate
=
=
"
complete
"
)
{
this
.
#
deferReady
(
)
;
}
break
;
case
"
PageData
:
Collect
"
:
return
this
.
#
collectData
(
)
;
}
return
undefined
;
}
handleEvent
(
event
)
{
if
(
this
.
#
isContentWindowPrivate
)
{
return
;
}
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
case
"
pageshow
"
:
this
.
#
deferReady
(
)
;
break
;
}
}
}
