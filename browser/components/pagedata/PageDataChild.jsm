"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PageDataChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
SchemaOrgPageData
:
"
resource
:
/
/
/
modules
/
pagedata
/
SchemaOrgPageData
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logConsole
"
function
(
)
{
return
console
.
createInstance
(
{
prefix
:
"
PageData
"
maxLogLevel
:
Services
.
prefs
.
getBoolPref
(
"
browser
.
pagedata
.
log
"
false
)
?
"
Debug
"
:
"
Warn
"
}
)
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
READY_DELAY
"
"
browser
.
pagedata
.
readyDelay
"
500
)
;
function
getCollectors
(
document
)
{
return
[
new
SchemaOrgPageData
(
document
)
]
;
}
class
PageDataChild
extends
JSWindowActorChild
{
#
isContentWindowPrivate
=
true
;
#
deferTimer
=
null
;
#
collectors
=
null
;
actorCreated
(
)
{
this
.
#
isContentWindowPrivate
=
PrivateBrowsingUtils
.
isContentWindowPrivate
(
this
.
contentWindow
)
;
}
didDestroy
(
)
{
if
(
this
.
#
deferTimer
)
{
this
.
#
deferTimer
.
cancel
(
)
;
}
}
#
deferReady
(
)
{
if
(
!
this
.
#
deferTimer
)
{
this
.
#
deferTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
}
this
.
#
deferTimer
.
initWithCallback
(
(
)
=
>
{
this
.
#
deferTimer
=
null
;
this
.
sendAsyncMessage
(
"
PageData
:
DocumentReady
"
{
url
:
this
.
document
.
documentURI
}
)
;
}
READY_DELAY
Ci
.
nsITimer
.
TYPE_ONE_SHOT_LOW_PRIORITY
)
;
}
#
buildData
(
)
{
if
(
!
this
.
#
collectors
)
{
return
[
]
;
}
let
results
=
[
]
;
for
(
let
data
of
this
.
#
collectors
.
values
(
)
)
{
if
(
data
!
=
=
null
)
{
results
=
results
.
concat
(
data
)
;
}
}
return
results
;
}
async
#
beginCollection
(
)
{
if
(
this
.
#
collectors
!
=
=
null
)
{
return
this
.
#
buildData
(
)
;
}
logConsole
.
debug
(
"
Starting
collection
"
this
.
document
.
documentURI
)
;
this
.
#
collectors
=
new
Map
(
)
;
let
pending
=
[
]
;
for
(
let
collector
of
getCollectors
(
this
.
document
)
)
{
pending
.
push
(
collector
.
init
(
)
.
then
(
data
=
>
{
this
.
#
collectors
.
set
(
collector
data
)
;
}
error
=
>
{
this
.
#
collectors
.
set
(
collector
[
]
)
;
logConsole
.
error
(
Failed
collecting
page
data
error
)
;
}
)
)
;
}
await
Promise
.
all
(
pending
)
;
return
this
.
#
buildData
(
)
;
}
receiveMessage
(
msg
)
{
if
(
this
.
#
isContentWindowPrivate
)
{
return
undefined
;
}
switch
(
msg
.
name
)
{
case
"
PageData
:
CheckLoaded
"
:
if
(
this
.
document
.
readystate
=
=
"
complete
"
)
{
this
.
#
deferReady
(
)
;
}
break
;
case
"
PageData
:
Collect
"
:
return
this
.
#
beginCollection
(
)
;
}
return
undefined
;
}
handleEvent
(
event
)
{
if
(
this
.
#
isContentWindowPrivate
)
{
return
;
}
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
case
"
pageshow
"
:
this
.
#
deferReady
(
)
;
break
;
}
}
}
