"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PageDataChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
PageDataSchema
:
"
resource
:
/
/
/
modules
/
pagedata
/
PageDataSchema
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
READY_DELAY
"
"
browser
.
pagedata
.
readyDelay
"
500
)
;
class
PageDataChild
extends
JSWindowActorChild
{
#
isContentWindowPrivate
=
true
;
#
deferTimer
=
null
;
actorCreated
(
)
{
this
.
#
isContentWindowPrivate
=
lazy
.
PrivateBrowsingUtils
.
isContentWindowPrivate
(
this
.
contentWindow
)
;
}
didDestroy
(
)
{
if
(
this
.
#
deferTimer
)
{
this
.
#
deferTimer
.
cancel
(
)
;
}
}
#
deferReady
(
)
{
if
(
!
this
.
#
deferTimer
)
{
this
.
#
deferTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
}
this
.
#
deferTimer
.
initWithCallback
(
(
)
=
>
{
this
.
#
deferTimer
=
null
;
this
.
sendAsyncMessage
(
"
PageData
:
DocumentReady
"
{
url
:
this
.
document
.
documentURI
}
)
;
}
lazy
.
READY_DELAY
Ci
.
nsITimer
.
TYPE_ONE_SHOT_LOW_PRIORITY
)
;
}
receiveMessage
(
msg
)
{
if
(
this
.
#
isContentWindowPrivate
)
{
return
undefined
;
}
switch
(
msg
.
name
)
{
case
"
PageData
:
CheckLoaded
"
:
if
(
this
.
document
.
readystate
=
=
"
complete
"
)
{
this
.
#
deferReady
(
)
;
}
break
;
case
"
PageData
:
Collect
"
:
return
lazy
.
PageDataSchema
.
collectPageData
(
this
.
document
)
;
}
return
undefined
;
}
handleEvent
(
event
)
{
if
(
this
.
#
isContentWindowPrivate
)
{
return
;
}
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
case
"
pageshow
"
:
this
.
#
deferReady
(
)
;
break
;
}
}
}
