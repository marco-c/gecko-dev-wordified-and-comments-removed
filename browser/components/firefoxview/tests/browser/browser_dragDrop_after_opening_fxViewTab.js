add_task
(
async
function
(
)
{
info
(
"
Setting
browser
to
RTL
locale
"
)
;
await
BrowserTestUtils
.
enableRtlLocale
(
)
;
const
TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
let
newTab
=
gBrowser
.
tabs
[
0
]
;
let
waitForTestTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
TEST_ROOT
+
"
file_new_tab_page
.
html
"
)
;
let
testTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_ROOT
+
"
file_new_tab_page
.
html
"
)
;
await
waitForTestTabPromise
;
let
linkSrcEl
=
document
.
querySelector
(
"
a
"
)
;
ok
(
linkSrcEl
"
Link
exists
"
)
;
let
dropPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
drop
"
)
;
is
(
gBrowser
.
visibleTabs
.
length
2
"
There
should
be
2
tabs
"
)
;
info
(
"
Opening
Firefox
View
tab
"
)
;
await
openFirefoxViewTab
(
window
)
;
is
(
gBrowser
.
visibleTabs
.
length
2
"
There
should
still
be
2
visible
tabs
after
opening
Firefox
View
tab
"
)
;
info
(
"
Switching
to
test
tab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
testTab
)
;
let
waitForDraggedTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
https
:
/
/
example
.
com
/
#
test
"
)
;
info
(
"
Dragging
link
between
test
tab
and
new
tab
"
)
;
EventUtils
.
synthesizeDrop
(
linkSrcEl
testTab
[
[
{
type
:
"
text
/
plain
"
data
:
"
https
:
/
/
example
.
com
/
#
test
"
}
]
]
"
link
"
window
window
{
clientX
:
testTab
.
getBoundingClientRect
(
)
.
right
}
)
;
info
(
"
Waiting
for
drop
event
"
)
;
await
dropPromise
;
info
(
"
Waiting
for
dragged
tab
to
be
created
"
)
;
let
draggedTab
=
await
waitForDraggedTabPromise
;
is
(
gBrowser
.
visibleTabs
.
length
3
"
There
should
be
3
tabs
"
)
;
is
(
gBrowser
.
visibleTabs
.
indexOf
(
newTab
)
0
"
New
tab
should
still
be
rightmost
visible
tab
"
)
;
is
(
gBrowser
.
visibleTabs
.
indexOf
(
draggedTab
)
1
"
Dragged
link
should
positioned
at
new
index
"
)
;
is
(
gBrowser
.
visibleTabs
.
indexOf
(
testTab
)
2
"
Test
tab
should
be
to
the
left
of
dragged
tab
"
)
;
BrowserTestUtils
.
removeTab
(
draggedTab
)
;
BrowserTestUtils
.
removeTab
(
testTab
)
;
BrowserTestUtils
.
removeTab
(
FirefoxViewHandler
.
tab
)
;
await
BrowserTestUtils
.
disableRtlLocale
(
)
;
}
)
;
