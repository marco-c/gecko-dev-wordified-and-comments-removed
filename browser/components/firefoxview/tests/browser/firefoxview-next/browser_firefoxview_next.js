add_task
(
async
function
test_aria_roles
(
)
{
await
withFirefoxView
(
{
}
async
browser
=
>
{
const
{
document
}
=
browser
.
contentWindow
;
is
(
document
.
location
.
href
"
about
:
firefoxview
"
)
;
is
(
document
.
querySelector
(
"
main
"
)
.
getAttribute
(
"
role
"
)
"
application
"
"
The
main
element
has
role
=
'
application
'
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
"
)
;
let
recentlyClosedComponent
=
document
.
querySelector
(
"
view
-
recentlyclosed
[
slot
=
recentlyclosed
]
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
recentlyClosedComponent
.
fullyUpdated
)
;
let
recentlyClosedEmptyState
=
recentlyClosedComponent
.
emptyState
;
let
descriptionEls
=
recentlyClosedEmptyState
.
descriptionEls
;
is
(
descriptionEls
[
1
]
.
querySelector
(
"
a
"
)
.
getAttribute
(
"
aria
-
details
"
)
"
card
-
container
"
"
The
link
within
the
recently
closed
empty
state
has
the
expected
'
aria
-
details
'
attribute
.
"
)
;
let
syncedTabsComponent
=
document
.
querySelector
(
"
view
-
syncedtabs
[
slot
=
syncedtabs
]
"
)
;
let
syncedTabsEmptyState
=
syncedTabsComponent
.
emptyState
;
is
(
syncedTabsEmptyState
.
querySelector
(
"
button
"
)
.
getAttribute
(
"
aria
-
details
"
)
"
empty
-
container
"
"
The
button
within
the
synced
tabs
empty
state
has
the
expected
'
aria
-
details
'
attribute
.
"
)
;
const
tab
=
async
shiftKey
=
>
{
info
(
Tab
{
shiftKey
?
"
+
Shift
"
:
"
"
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
}
)
;
}
;
recentlyClosedComponent
.
cardEl
.
summaryEl
.
focus
(
)
;
ok
(
recentlyClosedComponent
.
cardEl
.
summaryEl
.
matches
(
"
:
focus
"
)
"
Focus
should
be
on
the
summary
element
within
the
recently
closed
card
-
container
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
recentlyClosedComponent
.
fullyUpdated
)
;
await
tab
(
)
;
ok
(
descriptionEls
[
1
]
.
querySelector
(
"
a
"
)
.
matches
(
"
:
focus
"
)
"
Focus
should
be
on
the
link
within
the
recently
closed
empty
state
"
)
;
await
tab
(
)
;
const
shadowRoot
=
SpecialPowers
.
wrap
(
syncedTabsComponent
)
.
openOrClosedShadowRoot
;
ok
(
shadowRoot
.
querySelector
(
"
card
-
container
"
)
.
summaryEl
.
matches
(
"
:
focus
"
)
"
Focus
should
be
on
summary
element
of
the
synced
tabs
card
-
container
"
)
;
await
tab
(
)
;
ok
(
syncedTabsEmptyState
.
querySelector
(
"
button
"
)
.
matches
(
"
:
focus
"
)
"
Focus
should
be
on
button
element
of
the
synced
tabs
empty
state
"
)
;
}
)
;
}
)
;
add_task
(
async
function
firefoxview_next_icon
(
)
{
let
viewButton
=
window
.
document
.
querySelector
(
"
#
firefox
-
view
-
button
"
)
;
let
style
=
window
.
getComputedStyle
(
viewButton
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
tabs
.
firefox
-
view
-
newIcon
"
false
)
;
ok
(
style
.
listStyleImage
.
includes
"
chrome
:
/
/
branding
/
content
/
about
-
logo
.
png
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
tabs
.
firefox
-
view
-
newIcon
"
true
)
;
ok
(
style
.
listStyleImage
.
includes
"
chrome
:
/
/
browser
/
skin
/
firefox
-
view
.
svg
"
)
;
}
)
;
