const
INSTALLER_PREFS_BRANCH
=
"
installer
.
"
;
const
INSTALLER_PREFS_LIST
=
[
"
installer
.
taskbarpin
.
win10
.
enabled
"
]
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
function
InstallerPrefs
(
prefsList
)
{
this
.
prefsList
=
prefsList
|
|
INSTALLER_PREFS_LIST
;
XPCOMUtils
.
defineLazyGetter
(
this
"
_registryKeyPath
"
function
(
)
{
const
app
=
AppConstants
.
MOZ_APP_NAME
;
const
vendor
=
Services
.
appinfo
.
vendor
|
|
"
Mozilla
"
;
const
xreDirProvider
=
Cc
[
"
mozilla
.
org
/
xre
/
directory
-
provider
;
1
"
]
.
getService
(
Ci
.
nsIXREDirProvider
)
;
const
installHash
=
xreDirProvider
.
getInstallHash
(
)
;
return
Software
\
\
{
vendor
}
\
\
{
app
}
\
\
Installer
\
\
{
installHash
}
;
}
)
;
}
InstallerPrefs
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
cd8a6995
-
1f19
-
4cdd
-
9ed1
-
d6263302f594
}
"
)
contractID
:
"
mozilla
.
org
/
installerprefs
;
1
"
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
profile
-
after
-
change
"
:
{
if
(
AppConstants
.
platform
!
=
"
win
"
|
|
!
this
.
prefsList
|
|
!
this
.
prefsList
.
length
)
{
break
;
}
const
regKey
=
this
.
_openRegKey
(
)
;
this
.
_reflectPrefsToRegistry
(
regKey
)
;
this
.
_registerPrefListeners
(
)
;
regKey
.
close
(
)
;
break
;
}
case
"
nsPref
:
changed
"
:
{
const
regKey
=
this
.
_openRegKey
(
)
;
if
(
this
.
prefsList
.
includes
(
data
)
)
{
this
.
_reflectOnePrefToRegistry
(
regKey
data
)
;
}
regKey
.
close
(
)
;
break
;
}
}
}
_registerPrefListeners
(
)
{
Services
.
prefs
.
addObserver
(
INSTALLER_PREFS_BRANCH
this
)
;
}
_cleanRegistryKey
(
regKey
)
{
for
(
let
i
=
regKey
.
valueCount
-
1
;
i
>
=
0
;
-
-
i
)
{
const
name
=
regKey
.
getValueName
(
i
)
;
if
(
name
.
startsWith
(
INSTALLER_PREFS_BRANCH
)
)
{
regKey
.
removeValue
(
name
)
;
}
}
}
_reflectPrefsToRegistry
(
regKey
)
{
this
.
_cleanRegistryKey
(
regKey
)
;
this
.
prefsList
.
forEach
(
pref
=
>
this
.
_reflectOnePrefToRegistry
(
regKey
pref
)
)
;
}
_reflectOnePrefToRegistry
(
regKey
pref
)
{
if
(
!
pref
.
startsWith
(
INSTALLER_PREFS_BRANCH
)
)
{
return
;
}
const
value
=
Services
.
prefs
.
getBoolPref
(
pref
false
)
;
if
(
value
)
{
regKey
.
writeIntValue
(
pref
1
)
;
}
else
{
try
{
regKey
.
removeValue
(
pref
)
;
}
catch
(
ex
)
{
}
}
}
_openRegKey
(
)
{
const
key
=
Cc
[
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
]
.
createInstance
(
Ci
.
nsIWindowsRegKey
)
;
key
.
create
(
key
.
ROOT_KEY_CURRENT_USER
this
.
_registryKeyPath
key
.
ACCESS_READ
|
key
.
ACCESS_WRITE
|
key
.
WOW64_64
)
;
return
key
;
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
InstallerPrefs
"
]
;
