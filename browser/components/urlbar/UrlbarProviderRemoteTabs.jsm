"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderRemoteTabs
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
SyncedTabs
:
"
resource
:
/
/
services
-
sync
/
SyncedTabs
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
}
)
;
let
_cache
=
null
;
const
RECENT_REMOTE_TAB_THRESHOLD_MS
=
72
*
60
*
60
*
1000
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
weaveXPCService
"
function
(
)
{
try
{
return
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
}
catch
(
ex
)
{
}
return
null
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
showRemoteIconsPref
"
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
showRemoteTabsPref
"
"
services
.
sync
.
syncedTabs
.
showRemoteTabs
"
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
syncUsernamePref
"
"
services
.
sync
.
username
"
)
;
function
escapeRegExp
(
string
)
{
return
string
.
replace
(
/
[
.
*
+
?
^
{
}
(
)
|
[
\
]
\
\
]
/
g
"
\
\
&
"
)
;
}
class
ProviderRemoteTabs
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
Services
.
obs
.
addObserver
(
this
.
observe
"
weave
:
engine
:
sync
:
finish
"
)
;
Services
.
obs
.
addObserver
(
this
.
observe
"
weave
:
service
:
start
-
over
"
)
;
}
get
name
(
)
{
return
"
RemoteTabs
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
NETWORK
;
}
isActive
(
queryContext
)
{
return
(
lazy
.
syncUsernamePref
&
&
lazy
.
showRemoteTabsPref
&
&
lazy
.
UrlbarPrefs
.
get
(
"
suggest
.
remotetab
"
)
&
&
queryContext
.
sources
.
includes
(
UrlbarUtils
.
RESULT_SOURCE
.
TABS
)
&
&
lazy
.
weaveXPCService
&
&
lazy
.
weaveXPCService
.
ready
&
&
lazy
.
weaveXPCService
.
enabled
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
searchString
=
queryContext
.
tokens
.
map
(
t
=
>
t
.
value
)
.
join
(
"
"
)
;
let
re
=
new
RegExp
(
escapeRegExp
(
searchString
)
"
i
"
)
;
let
tabsData
=
await
this
.
ensureCache
(
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
;
}
let
resultsAdded
=
0
;
let
staleTabs
=
[
]
;
for
(
let
{
tab
client
}
of
tabsData
)
{
if
(
!
searchString
|
|
searchString
=
=
lazy
.
UrlbarTokenizer
.
RESTRICT
.
OPENPAGE
|
|
re
.
test
(
tab
.
url
)
|
|
(
tab
.
title
&
&
re
.
test
(
tab
.
title
)
)
)
{
if
(
lazy
.
showRemoteIconsPref
)
{
if
(
!
tab
.
icon
)
{
tab
.
icon
=
UrlbarUtils
.
getIconForUrl
(
tab
.
url
)
;
}
else
{
tab
.
icon
=
lazy
.
PlacesUtils
.
favicons
.
getFaviconLinkForIcon
(
Services
.
io
.
newURI
(
tab
.
icon
)
)
.
spec
;
}
}
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
UrlbarUtils
.
RESULT_SOURCE
.
TABS
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
url
:
[
tab
.
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
title
:
[
tab
.
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
device
:
client
.
name
icon
:
lazy
.
showRemoteIconsPref
?
tab
.
icon
:
"
"
lastUsed
:
(
tab
.
lastUsed
|
|
0
)
*
1000
}
)
)
;
if
(
tab
.
lastUsed
<
=
(
Date
.
now
(
)
-
RECENT_REMOTE_TAB_THRESHOLD_MS
)
/
1000
)
{
staleTabs
.
push
(
result
)
;
}
else
{
addCallback
(
this
result
)
;
resultsAdded
+
+
;
}
}
if
(
resultsAdded
=
=
queryContext
.
maxResults
)
{
break
;
}
}
while
(
staleTabs
.
length
&
&
resultsAdded
<
queryContext
.
maxResults
)
{
addCallback
(
this
staleTabs
.
shift
(
)
)
;
resultsAdded
+
+
;
}
}
async
buildItems
(
)
{
let
tabsData
=
[
]
;
if
(
lazy
.
weaveXPCService
.
ready
)
{
let
clients
=
await
lazy
.
SyncedTabs
.
getTabClients
(
)
;
lazy
.
SyncedTabs
.
sortTabClientsByLastUsed
(
clients
)
;
for
(
let
client
of
clients
)
{
for
(
let
tab
of
client
.
tabs
)
{
tabsData
.
push
(
{
tab
client
}
)
;
}
}
}
return
tabsData
;
}
async
ensureCache
(
)
{
if
(
!
_cache
)
{
_cache
=
await
this
.
buildItems
(
)
;
}
return
_cache
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
weave
:
engine
:
sync
:
finish
"
:
if
(
data
=
=
"
tabs
"
)
{
_cache
=
null
;
}
break
;
case
"
weave
:
service
:
start
-
over
"
:
_cache
=
null
;
break
;
default
:
break
;
}
}
}
var
UrlbarProviderRemoteTabs
=
new
ProviderRemoteTabs
(
)
;
