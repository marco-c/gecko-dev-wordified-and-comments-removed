"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarSearchOneOffs
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SearchOneOffs
:
"
resource
:
/
/
/
modules
/
SearchOneOffs
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
const
LOCAL_MODES
=
new
Map
(
[
[
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
{
restrict
:
UrlbarTokenizer
.
RESTRICT
.
BOOKMARK
pref
:
"
suggest
.
bookmark
"
}
]
[
UrlbarUtils
.
RESULT_SOURCE
.
TABS
{
restrict
:
UrlbarTokenizer
.
RESTRICT
.
OPENPAGE
pref
:
"
suggest
.
openpage
"
}
]
[
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
restrict
:
UrlbarTokenizer
.
RESTRICT
.
HISTORY
pref
:
"
suggest
.
history
"
}
]
]
)
;
class
UrlbarSearchOneOffs
extends
SearchOneOffs
{
constructor
(
view
)
{
super
(
view
.
panel
.
querySelector
(
"
.
search
-
one
-
offs
"
)
)
;
this
.
view
=
view
;
this
.
input
=
view
.
input
;
UrlbarPrefs
.
addObserver
(
this
)
;
this
.
_setupOneOffsHorizontalKeyNavigation
(
)
;
}
get
localButtons
(
)
{
return
this
.
getSelectableButtons
(
false
)
.
filter
(
b
=
>
b
.
source
)
;
}
enable
(
enable
)
{
if
(
enable
)
{
this
.
telemetryOrigin
=
"
urlbar
"
;
this
.
style
.
display
=
"
"
;
this
.
textbox
=
this
.
view
.
input
.
inputField
;
if
(
this
.
view
.
isOpen
)
{
this
.
_rebuild
(
)
;
}
this
.
view
.
controller
.
addQueryListener
(
this
)
;
}
else
{
this
.
telemetryOrigin
=
null
;
this
.
style
.
display
=
"
none
"
;
this
.
textbox
=
null
;
this
.
view
.
controller
.
removeQueryListener
(
this
)
;
}
}
onViewOpen
(
)
{
this
.
_on_popupshowing
(
)
;
}
onViewClose
(
)
{
this
.
_on_popuphidden
(
)
;
}
get
hasView
(
)
{
return
this
.
style
.
display
!
=
"
none
"
;
}
get
isViewOpen
(
)
{
return
this
.
view
.
isOpen
;
}
get
selectedViewIndex
(
)
{
return
this
.
view
.
selectedElementIndex
;
}
set
selectedViewIndex
(
val
)
{
this
.
view
.
selectedElementIndex
=
val
;
}
closeView
(
)
{
if
(
this
.
view
)
{
this
.
view
.
close
(
)
;
}
}
handleSearchCommand
(
event
searchMode
forceNewTab
=
false
)
{
if
(
this
.
selectedButton
=
=
this
.
view
.
oneOffSearchButtons
.
settingsButtonCompact
)
{
this
.
input
.
controller
.
engagementEvent
.
discard
(
)
;
this
.
selectedButton
.
doCommand
(
)
;
return
;
}
let
startQueryParams
=
{
allowAutofill
:
!
searchMode
.
engineName
&
&
searchMode
.
source
!
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
event
}
;
let
userTypedSearchString
=
this
.
input
.
value
&
&
this
.
input
.
getAttribute
(
"
pageproxystate
"
)
!
=
"
valid
"
;
let
engine
=
Services
.
search
.
getEngineByName
(
searchMode
.
engineName
)
;
let
{
where
params
}
=
this
.
_whereToOpen
(
event
forceNewTab
)
;
if
(
!
this
.
view
.
oneOffsRefresh
|
|
(
userTypedSearchString
&
&
engine
&
&
(
event
.
shiftKey
|
|
where
!
=
"
current
"
)
)
)
{
this
.
input
.
handleNavigation
(
{
event
oneOffParams
:
{
openWhere
:
where
openParams
:
params
engine
:
this
.
selectedButton
.
engine
}
}
)
;
this
.
selectedButton
=
null
;
return
;
}
this
.
selectedButton
=
null
;
switch
(
where
)
{
case
"
current
"
:
{
this
.
input
.
setSearchMode
(
searchMode
)
;
this
.
input
.
startQuery
(
startQueryParams
)
;
break
;
}
case
"
tab
"
:
{
let
newTab
=
this
.
input
.
window
.
gBrowser
.
addTrustedTab
(
"
about
:
newtab
"
)
;
this
.
input
.
setSearchModeForBrowser
(
searchMode
newTab
.
linkedBrowser
)
;
if
(
userTypedSearchString
)
{
newTab
.
linkedBrowser
.
userTypedValue
=
this
.
input
.
value
;
}
if
(
!
params
?
.
inBackground
)
{
this
.
input
.
window
.
gBrowser
.
selectedTab
=
newTab
;
newTab
.
ownerGlobal
.
gURLBar
.
startQuery
(
startQueryParams
)
;
}
break
;
}
default
:
{
this
.
input
.
setSearchMode
(
searchMode
)
;
this
.
input
.
startQuery
(
startQueryParams
)
;
this
.
input
.
select
(
)
;
}
}
}
setTooltipForEngineButton
(
button
)
{
let
aliases
=
button
.
engine
.
aliases
;
if
(
!
aliases
.
length
)
{
super
.
setTooltipForEngineButton
(
button
)
;
return
;
}
this
.
document
.
l10n
.
setAttributes
(
button
"
search
-
one
-
offs
-
engine
-
with
-
alias
"
{
engineName
:
button
.
engine
.
name
alias
:
aliases
[
0
]
}
)
;
}
onPrefChanged
(
changedPref
)
{
let
prefs
=
[
.
.
.
LOCAL_MODES
.
values
(
)
]
.
map
(
(
{
pref
}
)
=
>
pref
)
;
prefs
.
push
(
"
update2
"
"
update2
.
localOneOffs
"
"
update2
.
oneOffsRefresh
"
)
;
if
(
prefs
.
includes
(
changedPref
)
)
{
this
.
_engines
=
null
;
}
this
.
_setupOneOffsHorizontalKeyNavigation
(
)
;
}
_setupOneOffsHorizontalKeyNavigation
(
)
{
this
.
disableOneOffsHorizontalKeyNavigation
=
UrlbarPrefs
.
get
(
"
update2
"
)
&
&
UrlbarPrefs
.
get
(
"
update2
.
disableOneOffsHorizontalKeyNavigation
"
)
;
}
_rebuildEngineList
(
engines
)
{
super
.
_rebuildEngineList
(
engines
)
;
if
(
!
this
.
view
.
oneOffsRefresh
|
|
!
UrlbarPrefs
.
get
(
"
update2
.
localOneOffs
"
)
)
{
return
;
}
for
(
let
[
source
{
restrict
pref
}
]
of
LOCAL_MODES
)
{
if
(
!
UrlbarPrefs
.
get
(
pref
)
)
{
continue
;
}
let
name
=
UrlbarUtils
.
getResultSourceName
(
source
)
;
let
button
=
this
.
document
.
createXULElement
(
"
button
"
)
;
button
.
id
=
urlbar
-
engine
-
one
-
off
-
item
-
{
name
}
;
button
.
setAttribute
(
"
class
"
"
searchbar
-
engine
-
one
-
off
-
item
"
)
;
this
.
document
.
l10n
.
setAttributes
(
button
search
-
one
-
offs
-
{
name
}
{
restrict
}
)
;
button
.
source
=
source
;
this
.
buttons
.
appendChild
(
button
)
;
}
}
_on_click
(
event
)
{
if
(
!
this
.
view
.
oneOffsRefresh
)
{
super
.
_on_click
(
event
)
;
return
;
}
if
(
event
.
button
=
=
2
)
{
return
;
}
let
button
=
event
.
originalTarget
;
if
(
!
button
.
engine
&
&
!
button
.
source
)
{
return
;
}
this
.
selectedButton
=
button
;
this
.
handleSearchCommand
(
event
{
engineName
:
button
.
engine
?
.
name
source
:
button
.
source
entry
:
"
oneoff
"
}
)
;
}
_on_contextmenu
(
event
)
{
if
(
this
.
view
.
oneOffsRefresh
)
{
event
.
preventDefault
(
)
;
return
;
}
super
.
_on_contextmenu
(
event
)
;
}
}
