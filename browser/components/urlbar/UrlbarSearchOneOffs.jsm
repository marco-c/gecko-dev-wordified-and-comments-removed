"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarSearchOneOffs
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SearchOneOffs
:
"
resource
:
/
/
/
modules
/
SearchOneOffs
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
}
)
;
class
UrlbarSearchOneOffs
extends
SearchOneOffs
{
constructor
(
view
)
{
super
(
view
.
panel
.
querySelector
(
"
.
search
-
one
-
offs
"
)
)
;
this
.
view
=
view
;
this
.
input
=
view
.
input
;
}
enable
(
enable
)
{
if
(
enable
)
{
this
.
telemetryOrigin
=
"
urlbar
"
;
this
.
style
.
display
=
"
"
;
this
.
textbox
=
this
.
view
.
input
.
inputField
;
if
(
this
.
view
.
isOpen
)
{
this
.
_rebuild
(
)
;
}
this
.
view
.
controller
.
addQueryListener
(
this
)
;
}
else
{
this
.
telemetryOrigin
=
null
;
this
.
style
.
display
=
"
none
"
;
this
.
textbox
=
null
;
this
.
view
.
controller
.
removeQueryListener
(
this
)
;
}
}
onViewOpen
(
)
{
this
.
_on_popupshowing
(
)
;
}
onViewClose
(
)
{
this
.
_on_popuphidden
(
)
;
}
get
isViewOpen
(
)
{
return
this
.
view
.
isOpen
;
}
get
selectedViewIndex
(
)
{
return
this
.
view
.
selectedElementIndex
;
}
set
selectedViewIndex
(
val
)
{
this
.
view
.
selectedElementIndex
=
val
;
}
closeView
(
)
{
if
(
this
.
view
)
{
this
.
view
.
close
(
)
;
}
}
handleSearchCommand
(
event
engine
forceNewTab
=
false
)
{
if
(
!
this
.
view
.
oneOffsRefresh
)
{
let
{
where
params
}
=
this
.
_whereToOpen
(
event
forceNewTab
)
;
this
.
input
.
handleCommand
(
event
where
params
)
;
return
;
}
this
.
input
.
setSearchMode
(
engine
)
;
this
.
selectedButton
=
null
;
this
.
input
.
startQuery
(
{
allowAutofill
:
false
event
}
)
;
}
setTooltipForEngineButton
(
button
)
{
let
aliases
=
UrlbarSearchUtils
.
aliasesForEngine
(
button
.
engine
)
;
if
(
!
aliases
.
length
)
{
super
.
setTooltipForEngineButton
(
button
)
;
return
;
}
this
.
document
.
l10n
.
setAttributes
(
button
"
search
-
one
-
offs
-
engine
-
with
-
alias
"
{
engineName
:
button
.
engine
.
name
alias
:
aliases
[
0
]
}
)
;
}
}
