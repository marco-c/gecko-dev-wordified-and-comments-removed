"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarContextualTip
"
]
;
let
clickListeners
=
new
Map
(
[
[
"
button
"
new
Set
(
)
]
[
"
link
"
new
Set
(
)
]
]
)
;
function
callClickListeners
(
element
window
)
{
for
(
let
clickListener
of
clickListeners
.
get
(
element
)
)
{
clickListener
(
window
)
;
}
}
class
UrlbarContextualTip
{
constructor
(
view
)
{
this
.
document
=
view
.
document
;
this
.
view
=
view
;
this
.
_create
(
)
;
}
_create
(
)
{
this
.
_elements
=
{
}
;
const
fragment
=
this
.
document
.
createDocumentFragment
(
)
;
this
.
_elements
.
container
=
this
.
document
.
createElement
(
"
div
"
)
;
this
.
_elements
.
container
.
id
=
"
urlbar
-
contextual
-
tip
"
;
this
.
_elements
.
icon
=
this
.
document
.
createElement
(
"
div
"
)
;
this
.
_elements
.
icon
.
id
=
"
urlbar
-
contextual
-
tip
-
icon
"
;
this
.
_elements
.
title
=
this
.
document
.
createElement
(
"
div
"
)
;
this
.
_elements
.
title
.
id
=
"
urlbar
-
contextual
-
tip
-
title
"
;
this
.
_elements
.
button
=
this
.
document
.
createElement
(
"
button
"
)
;
this
.
_elements
.
button
.
id
=
"
urlbar
-
contextual
-
tip
-
button
"
;
this
.
_elements
.
link
=
this
.
document
.
createElement
(
"
a
"
)
;
this
.
_elements
.
link
.
id
=
"
urlbar
-
contextual
-
tip
-
link
"
;
this
.
_elements
.
container
.
appendChild
(
this
.
_elements
.
icon
)
;
this
.
_elements
.
container
.
appendChild
(
this
.
_elements
.
title
)
;
this
.
_elements
.
container
.
appendChild
(
this
.
_elements
.
button
)
;
this
.
_elements
.
container
.
appendChild
(
this
.
_elements
.
link
)
;
fragment
.
appendChild
(
this
.
_elements
.
container
)
;
this
.
view
.
panel
.
prepend
(
fragment
)
;
this
.
_elements
.
button
.
addEventListener
(
"
click
"
(
)
=
>
{
callClickListeners
(
"
button
"
this
.
document
.
ownerGlobal
)
;
}
)
;
this
.
_elements
.
link
.
addEventListener
(
"
click
"
(
)
=
>
{
callClickListeners
(
"
link
"
this
.
document
.
ownerGlobal
)
;
}
)
;
}
remove
(
)
{
this
.
_elements
.
container
.
remove
(
)
;
this
.
_elements
=
null
;
}
set
(
details
)
{
let
{
title
buttonTitle
linkTitle
}
=
details
;
this
.
_elements
.
title
.
textContent
=
title
;
this
.
_elements
.
button
.
textContent
=
buttonTitle
;
this
.
_elements
.
button
.
classList
.
toggle
(
"
hidden
"
!
buttonTitle
)
;
this
.
_elements
.
link
.
textContent
=
linkTitle
;
this
.
_elements
.
link
.
classList
.
toggle
(
"
hidden
"
!
linkTitle
)
;
this
.
_elements
.
container
.
classList
.
remove
(
"
hidden
"
)
;
}
hide
(
)
{
if
(
!
this
.
_elements
.
container
.
classList
.
contains
(
"
hidden
"
)
)
{
this
.
_elements
.
container
.
classList
.
add
(
"
hidden
"
)
;
}
}
static
addClickListener
(
element
clickListener
)
{
clickListeners
.
get
(
element
)
.
add
(
clickListener
)
;
}
static
removeClickListener
(
element
clickListener
)
{
clickListeners
.
get
(
element
)
.
delete
(
clickListener
)
;
}
}
