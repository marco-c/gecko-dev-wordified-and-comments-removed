"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderAliasEngines
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
}
)
;
class
ProviderAliasEngines
extends
UrlbarProvider
{
get
name
(
)
{
return
"
AliasEngines
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
isActive
(
queryContext
)
{
return
(
(
!
queryContext
.
restrictSource
|
|
queryContext
.
restrictSource
=
=
lazy
.
UrlbarTokenizer
.
RESTRICT
.
SEARCH
)
&
&
!
queryContext
.
searchMode
&
&
queryContext
.
tokens
.
length
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
alias
=
queryContext
.
tokens
[
0
]
?
.
value
;
let
engine
=
await
lazy
.
UrlbarSearchUtils
.
engineForAlias
(
alias
queryContext
.
searchString
)
;
if
(
!
engine
|
|
instance
!
=
this
.
queryInstance
)
{
return
;
}
let
query
=
UrlbarUtils
.
substringAfter
(
queryContext
.
searchString
alias
)
;
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
engine
.
name
keyword
:
alias
query
:
query
.
trimStart
(
)
icon
:
engine
.
iconURI
?
.
spec
}
)
)
;
result
.
heuristic
=
true
;
addCallback
(
this
result
)
;
}
}
var
UrlbarProviderAliasEngines
=
new
ProviderAliasEngines
(
)
;
