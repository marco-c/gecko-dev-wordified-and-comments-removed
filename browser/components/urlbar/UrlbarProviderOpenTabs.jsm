"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderOpenTabs
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
repository
.
getLogger
(
"
Urlbar
.
Provider
.
OpenTabs
"
)
)
;
class
ProviderOpenTabs
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
openTabs
=
new
Map
(
)
;
this
.
queries
=
new
Map
(
)
;
}
async
promiseDb
(
)
{
if
(
this
.
_db
)
{
return
this
.
_db
;
}
let
conn
=
await
PlacesUtils
.
promiseLargeCacheDBConnection
(
)
;
UrlbarProvidersManager
.
runInCriticalSection
(
async
(
)
=
>
{
await
conn
.
execute
(
CREATE
TEMP
TABLE
IF
NOT
EXISTS
moz_openpages_temp
(
url
TEXT
userContextId
INTEGER
open_count
INTEGER
PRIMARY
KEY
(
url
userContextId
)
)
)
;
await
conn
.
execute
(
CREATE
TEMP
TRIGGER
IF
NOT
EXISTS
moz_openpages_temp_afterupdate_trigger
AFTER
UPDATE
OF
open_count
ON
moz_openpages_temp
FOR
EACH
ROW
WHEN
NEW
.
open_count
=
0
BEGIN
DELETE
FROM
moz_openpages_temp
WHERE
url
=
NEW
.
url
AND
userContextId
=
NEW
.
userContextId
;
END
)
;
}
)
.
catch
(
Cu
.
reportError
)
;
for
(
let
[
userContextId
urls
]
of
this
.
openTabs
)
{
for
(
let
url
of
urls
)
{
await
addToMemoryTable
(
conn
url
userContextId
)
.
catch
(
Cu
.
reportError
)
;
}
}
return
(
this
.
_db
=
conn
)
;
}
get
name
(
)
{
return
"
OpenTabs
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
queryContext
)
{
return
false
;
}
isRestricting
(
queryContext
)
{
return
false
;
}
async
registerOpenTab
(
url
userContextId
=
0
)
{
if
(
!
this
.
openTabs
.
has
(
userContextId
)
)
{
this
.
openTabs
.
set
(
userContextId
[
]
)
;
}
this
.
openTabs
.
get
(
userContextId
)
.
push
(
url
)
;
if
(
this
.
_db
)
{
await
addToMemoryTable
(
this
.
_db
url
userContextId
)
;
}
}
async
unregisterOpenTab
(
url
userContextId
=
0
)
{
let
openTabs
=
this
.
openTabs
.
get
(
userContextId
)
;
if
(
openTabs
)
{
let
index
=
openTabs
.
indexOf
(
url
)
;
if
(
index
!
=
-
1
)
{
openTabs
.
splice
(
index
1
)
;
if
(
this
.
_db
)
{
await
removeFromMemoryTable
(
this
.
_db
url
userContextId
)
;
}
}
}
}
async
startQuery
(
queryContext
addCallback
)
{
logger
.
info
(
Starting
query
for
{
queryContext
.
searchString
}
)
;
let
instance
=
{
}
;
this
.
queries
.
set
(
queryContext
instance
)
;
let
conn
=
await
this
.
promiseDb
(
)
;
await
conn
.
executeCached
(
SELECT
url
userContextId
FROM
moz_openpages_temp
{
}
(
row
cancel
)
=
>
{
if
(
!
this
.
queries
.
has
(
queryContext
)
)
{
cancel
(
)
;
return
;
}
addCallback
(
this
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
UrlbarUtils
.
RESULT_SOURCE
.
TABS
{
url
:
row
.
getResultByName
(
"
url
"
)
userContextId
:
row
.
getResultByName
(
"
userContextId
"
)
}
)
)
;
}
)
;
this
.
queries
.
delete
(
queryContext
)
;
}
cancelQuery
(
queryContext
)
{
logger
.
info
(
Canceling
query
for
{
queryContext
.
searchString
}
)
;
this
.
queries
.
delete
(
queryContext
)
;
}
}
var
UrlbarProviderOpenTabs
=
new
ProviderOpenTabs
(
)
;
async
function
addToMemoryTable
(
conn
url
userContextId
)
{
return
UrlbarProvidersManager
.
runInCriticalSection
(
async
(
)
=
>
{
await
conn
.
executeCached
(
INSERT
OR
REPLACE
INTO
moz_openpages_temp
(
url
userContextId
open_count
)
VALUES
(
:
url
:
userContextId
IFNULL
(
(
SELECT
open_count
+
1
FROM
moz_openpages_temp
WHERE
url
=
:
url
AND
userContextId
=
:
userContextId
)
1
)
)
{
url
userContextId
}
)
;
}
)
;
}
async
function
removeFromMemoryTable
(
conn
url
userContextId
)
{
return
UrlbarProvidersManager
.
runInCriticalSection
(
async
(
)
=
>
{
await
conn
.
executeCached
(
UPDATE
moz_openpages_temp
SET
open_count
=
open_count
-
1
WHERE
url
=
:
url
AND
userContextId
=
:
userContextId
{
url
userContextId
}
)
;
}
)
;
}
