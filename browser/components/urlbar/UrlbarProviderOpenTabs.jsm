"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderOpenTabs
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
UrlbarProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
const
PRIVATE_USER_CONTEXT_ID
=
-
1
;
class
UrlbarProviderOpenTabs
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
OpenTabs
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
queryContext
)
{
return
false
;
}
static
memoryTableInitialized
=
false
;
static
_openTabs
=
new
Map
(
)
;
static
getOpenTabs
(
userContextId
isInPrivateWindow
)
{
userContextId
=
UrlbarProviderOpenTabs
.
getUserContextIdForOpenPagesTable
(
userContextId
isInPrivateWindow
)
;
return
UrlbarProviderOpenTabs
.
_openTabs
.
get
(
userContextId
)
;
}
static
getUserContextIdForOpenPagesTable
(
userContextId
isInPrivateWindow
)
{
return
isInPrivateWindow
?
PRIVATE_USER_CONTEXT_ID
:
userContextId
;
}
static
promiseDBPopulated
=
PlacesUtils
.
largeCacheDBConnDeferred
.
promise
.
then
(
async
(
)
=
>
{
UrlbarProviderOpenTabs
.
memoryTableInitialized
=
true
;
for
(
let
[
userContextId
urls
]
of
UrlbarProviderOpenTabs
.
_openTabs
)
{
for
(
let
url
of
urls
)
{
await
addToMemoryTable
(
url
userContextId
)
.
catch
(
Cu
.
reportError
)
;
}
}
}
)
;
static
async
registerOpenTab
(
url
userContextId
isInPrivateWindow
)
{
userContextId
=
UrlbarProviderOpenTabs
.
getUserContextIdForOpenPagesTable
(
userContextId
isInPrivateWindow
)
;
if
(
!
UrlbarProviderOpenTabs
.
_openTabs
.
has
(
userContextId
)
)
{
UrlbarProviderOpenTabs
.
_openTabs
.
set
(
userContextId
[
]
)
;
}
UrlbarProviderOpenTabs
.
_openTabs
.
get
(
userContextId
)
.
push
(
url
)
;
await
addToMemoryTable
(
url
userContextId
)
.
catch
(
Cu
.
reportError
)
;
}
static
async
unregisterOpenTab
(
url
userContextId
isInPrivateWindow
)
{
userContextId
=
UrlbarProviderOpenTabs
.
getUserContextIdForOpenPagesTable
(
userContextId
isInPrivateWindow
)
;
let
openTabs
=
UrlbarProviderOpenTabs
.
_openTabs
.
get
(
userContextId
)
;
if
(
openTabs
)
{
let
index
=
openTabs
.
indexOf
(
url
)
;
if
(
index
!
=
-
1
)
{
openTabs
.
splice
(
index
1
)
;
await
removeFromMemoryTable
(
url
userContextId
)
.
catch
(
Cu
.
reportError
)
;
}
}
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
conn
=
await
PlacesUtils
.
promiseLargeCacheDBConnection
(
)
;
await
UrlbarProviderOpenTabs
.
promiseDBPopulated
;
await
conn
.
executeCached
(
SELECT
url
userContextId
FROM
moz_openpages_temp
{
}
(
row
cancel
)
=
>
{
if
(
instance
!
=
this
.
queryInstance
)
{
cancel
(
)
;
return
;
}
addCallback
(
this
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
UrlbarUtils
.
RESULT_SOURCE
.
TABS
{
url
:
row
.
getResultByName
(
"
url
"
)
userContextId
:
row
.
getResultByName
(
"
userContextId
"
)
}
)
)
;
}
)
;
}
}
async
function
addToMemoryTable
(
url
userContextId
)
{
if
(
!
UrlbarProviderOpenTabs
.
memoryTableInitialized
)
{
return
;
}
await
UrlbarProvidersManager
.
runInCriticalSection
(
async
(
)
=
>
{
let
conn
=
await
PlacesUtils
.
promiseLargeCacheDBConnection
(
)
;
await
conn
.
executeCached
(
INSERT
OR
REPLACE
INTO
moz_openpages_temp
(
url
userContextId
open_count
)
VALUES
(
:
url
:
userContextId
IFNULL
(
(
SELECT
open_count
+
1
FROM
moz_openpages_temp
WHERE
url
=
:
url
AND
userContextId
=
:
userContextId
)
1
)
)
{
url
userContextId
}
)
;
}
)
;
}
async
function
removeFromMemoryTable
(
url
userContextId
)
{
if
(
!
UrlbarProviderOpenTabs
.
memoryTableInitialized
)
{
return
;
}
await
UrlbarProvidersManager
.
runInCriticalSection
(
async
(
)
=
>
{
let
conn
=
await
PlacesUtils
.
promiseLargeCacheDBConnection
(
)
;
await
conn
.
executeCached
(
UPDATE
moz_openpages_temp
SET
open_count
=
open_count
-
1
WHERE
url
=
:
url
AND
userContextId
=
:
userContextId
{
url
userContextId
}
)
;
}
)
;
}
