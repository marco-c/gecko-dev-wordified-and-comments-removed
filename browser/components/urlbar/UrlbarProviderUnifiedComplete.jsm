"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderUnifiedComplete
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
unifiedComplete
"
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
unifiedcomplete
"
"
nsIAutoCompleteSearch
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
repository
.
getLogger
(
"
Urlbar
.
Provider
.
UnifiedComplete
"
)
)
;
class
ProviderUnifiedComplete
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
queries
=
new
Map
(
)
;
}
get
name
(
)
{
return
"
UnifiedComplete
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
IMMEDIATE
;
}
isActive
(
queryContext
)
{
return
true
;
}
isRestricting
(
queryContext
)
{
return
false
;
}
async
startQuery
(
queryContext
addCallback
)
{
logger
.
info
(
Starting
query
for
{
queryContext
.
searchString
}
)
;
let
instance
=
{
}
;
this
.
queries
.
set
(
queryContext
instance
)
;
let
params
=
[
"
enable
-
actions
"
]
;
params
.
push
(
max
-
results
:
{
queryContext
.
maxResults
}
)
;
params
.
push
(
insert
-
method
:
{
UrlbarUtils
.
INSERTMETHOD
.
APPEND
}
)
;
if
(
queryContext
.
isPrivate
)
{
params
.
push
(
"
private
-
window
"
)
;
if
(
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
params
.
push
(
"
disable
-
private
-
actions
"
)
;
}
}
if
(
queryContext
.
userContextId
)
{
params
.
push
(
user
-
context
-
id
:
{
queryContext
.
userContextId
}
}
)
;
}
if
(
!
queryContext
.
allowAutofill
)
{
params
.
push
(
"
prohibit
-
autofill
"
)
;
}
let
urls
=
new
Set
(
)
;
await
new
Promise
(
resolve
=
>
{
let
listener
=
{
onSearchResult
(
_
result
)
{
let
{
done
matches
}
=
convertResultToMatches
(
queryContext
result
urls
)
;
for
(
let
match
of
matches
)
{
addCallback
(
UrlbarProviderUnifiedComplete
match
)
;
}
if
(
done
)
{
delete
this
.
_resolveSearch
;
resolve
(
)
;
}
}
}
;
this
.
_resolveSearch
=
resolve
;
unifiedComplete
.
startSearch
(
queryContext
.
searchString
params
.
join
(
"
"
)
null
listener
)
;
}
)
;
this
.
queries
.
delete
(
queryContext
)
;
}
cancelQuery
(
queryContext
)
{
logger
.
info
(
Canceling
query
for
{
queryContext
.
searchString
}
)
;
this
.
queries
.
delete
(
queryContext
)
;
unifiedComplete
.
stopSearch
(
)
;
if
(
this
.
_resolveSearch
)
{
this
.
_resolveSearch
(
)
;
}
}
}
var
UrlbarProviderUnifiedComplete
=
new
ProviderUnifiedComplete
(
)
;
function
convertResultToMatches
(
context
result
urls
)
{
let
matches
=
[
]
;
let
done
=
[
Ci
.
nsIAutoCompleteResult
.
RESULT_IGNORED
Ci
.
nsIAutoCompleteResult
.
RESULT_FAILURE
Ci
.
nsIAutoCompleteResult
.
RESULT_NOMATCH
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
]
.
includes
(
result
.
searchResult
)
|
|
result
.
errorDescription
;
for
(
let
i
=
0
;
i
<
result
.
matchCount
;
+
+
i
)
{
let
url
=
result
.
getFinalCompleteValueAt
(
i
)
;
if
(
urls
.
has
(
url
)
)
{
continue
;
}
urls
.
add
(
url
)
;
let
style
=
result
.
getStyleAt
(
i
)
;
let
isHeuristic
=
i
=
=
0
&
&
style
.
includes
(
"
heuristic
"
)
;
let
match
=
makeUrlbarResult
(
context
.
tokens
{
url
icon
:
result
.
getImageAt
(
i
)
style
comment
:
result
.
getCommentAt
(
i
)
firstToken
:
context
.
tokens
[
0
]
isHeuristic
}
)
;
if
(
!
match
)
{
continue
;
}
if
(
isHeuristic
)
{
if
(
style
.
includes
(
"
autofill
"
)
&
&
result
.
defaultIndex
=
=
0
)
{
let
autofillValue
=
result
.
getValueAt
(
i
)
;
if
(
autofillValue
.
toLocaleLowerCase
(
)
.
startsWith
(
context
.
searchString
.
toLocaleLowerCase
(
)
)
)
{
match
.
autofill
=
{
value
:
context
.
searchString
+
autofillValue
.
substring
(
context
.
searchString
.
length
)
selectionStart
:
context
.
searchString
.
length
selectionEnd
:
autofillValue
.
length
}
;
}
}
context
.
preselected
=
true
;
match
.
heuristic
=
true
;
}
matches
.
push
(
match
)
;
}
return
{
matches
done
}
;
}
function
makeUrlbarResult
(
tokens
info
)
{
let
action
=
PlacesUtils
.
parseActionUrl
(
info
.
url
)
;
if
(
action
)
{
switch
(
action
.
type
)
{
case
"
searchengine
"
:
{
let
keywordOffer
=
UrlbarUtils
.
KEYWORD_OFFER
.
NONE
;
if
(
action
.
params
.
alias
&
&
!
action
.
params
.
searchQuery
.
trim
(
)
&
&
action
.
params
.
alias
.
startsWith
(
"
"
)
)
{
keywordOffer
=
info
.
isHeuristic
?
UrlbarUtils
.
KEYWORD_OFFER
.
HIDE
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
;
}
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
engine
:
[
action
.
params
.
engineName
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
suggestion
:
[
action
.
params
.
searchSuggestion
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
keyword
:
[
action
.
params
.
alias
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
query
:
[
action
.
params
.
searchQuery
.
trim
(
)
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
info
.
icon
]
keywordOffer
}
)
)
;
}
case
"
keyword
"
:
{
let
title
=
info
.
comment
;
if
(
!
title
)
{
title
=
Services
.
textToSubURI
.
unEscapeURIForUI
(
"
UTF
-
8
"
action
.
params
.
url
)
;
}
else
if
(
tokens
&
&
tokens
.
length
>
1
)
{
title
=
UrlbarUtils
.
strings
.
formatStringFromName
(
"
bookmarkKeywordSearch
"
[
info
.
comment
tokens
.
slice
(
1
)
.
map
(
t
=
>
t
.
value
)
.
join
(
"
"
)
]
)
;
}
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
KEYWORD
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
title
:
[
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
url
:
[
action
.
params
.
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
info
.
firstToken
.
value
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
input
:
[
action
.
params
.
input
]
postData
:
[
action
.
params
.
postData
]
icon
:
[
info
.
icon
]
}
)
)
;
}
case
"
extension
"
:
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_NETWORK
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
title
:
[
info
.
comment
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
content
:
[
action
.
params
.
content
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
action
.
params
.
keyword
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
info
.
icon
]
}
)
)
;
case
"
remotetab
"
:
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
UrlbarUtils
.
RESULT_SOURCE
.
TABS
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
url
:
[
action
.
params
.
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
title
:
[
info
.
comment
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
device
:
[
action
.
params
.
deviceName
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
info
.
icon
]
}
)
)
;
case
"
switchtab
"
:
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
UrlbarUtils
.
RESULT_SOURCE
.
TABS
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
url
:
[
action
.
params
.
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
title
:
[
info
.
comment
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
device
:
[
action
.
params
.
deviceName
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
info
.
icon
]
}
)
)
;
case
"
visiturl
"
:
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
title
:
[
info
.
comment
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
url
:
[
action
.
params
.
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
info
.
icon
]
}
)
)
;
default
:
Cu
.
reportError
(
Unexpected
action
type
:
{
action
.
type
}
)
;
return
null
;
}
}
if
(
info
.
style
.
includes
(
"
priority
-
search
"
)
)
{
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
engine
:
[
info
.
comment
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
info
.
icon
]
}
)
)
;
}
let
source
;
let
tags
=
[
]
;
let
comment
=
info
.
comment
;
if
(
info
.
style
.
includes
(
"
bookmark
"
)
)
{
source
=
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
;
}
else
if
(
info
.
style
.
includes
(
"
preloaded
-
top
-
sites
"
)
)
{
source
=
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
;
}
else
{
source
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
;
}
if
(
info
.
style
.
includes
(
"
tag
"
)
)
{
[
comment
tags
]
=
info
.
comment
.
split
(
UrlbarUtils
.
TITLE_TAGS_SEPARATOR
)
;
if
(
source
!
=
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
)
{
tags
=
"
"
;
}
tags
=
tags
.
split
(
"
"
)
.
map
(
t
=
>
t
.
trim
(
)
)
.
filter
(
tag
=
>
{
let
lowerCaseTag
=
tag
.
toLocaleLowerCase
(
)
;
return
tokens
.
some
(
token
=
>
lowerCaseTag
.
includes
(
token
.
lowerCaseValue
)
)
;
}
)
.
sort
(
)
;
}
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
source
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
tokens
{
url
:
[
info
.
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
info
.
icon
]
title
:
[
comment
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
tags
:
[
tags
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
}
)
)
;
}
