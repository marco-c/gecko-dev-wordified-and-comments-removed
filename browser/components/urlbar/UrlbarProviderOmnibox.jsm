"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderOmnibox
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
SkippableTimer
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
ExtensionSearchHandler
:
"
resource
:
/
/
gre
/
modules
/
ExtensionSearchHandler
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
}
)
;
const
MAXIMUM_ALLOWED_EXTENSION_TIME_MS
=
3000
;
class
ProviderOmnibox
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
Omnibox
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
isActive
(
queryContext
)
{
if
(
queryContext
.
tokens
[
0
]
&
&
queryContext
.
tokens
[
0
]
.
value
.
length
&
&
lazy
.
ExtensionSearchHandler
.
isKeywordRegistered
(
queryContext
.
tokens
[
0
]
.
value
)
&
&
UrlbarUtils
.
substringAfter
(
queryContext
.
searchString
queryContext
.
tokens
[
0
]
.
value
)
)
{
return
true
;
}
if
(
lazy
.
ExtensionSearchHandler
.
hasActiveInputSession
(
)
)
{
lazy
.
ExtensionSearchHandler
.
handleInputCancelled
(
)
;
}
return
false
;
}
getPriority
(
queryContext
)
{
return
0
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
keyword
=
queryContext
.
tokens
[
0
]
.
value
;
let
description
=
lazy
.
ExtensionSearchHandler
.
getDescription
(
keyword
)
;
let
heuristicResult
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_NETWORK
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
description
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
content
:
[
queryContext
.
searchString
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
queryContext
.
tokens
[
0
]
.
value
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
UrlbarUtils
.
ICON
.
EXTENSION
}
)
)
;
heuristicResult
.
heuristic
=
true
;
addCallback
(
this
heuristicResult
)
;
let
data
=
{
keyword
text
:
queryContext
.
searchString
inPrivateWindow
:
queryContext
.
isPrivate
}
;
this
.
_resultsPromise
=
lazy
.
ExtensionSearchHandler
.
handleSearch
(
data
suggestions
=
>
{
if
(
instance
!
=
this
.
queryInstance
)
{
return
;
}
for
(
let
suggestion
of
suggestions
)
{
let
content
=
{
queryContext
.
tokens
[
0
]
.
value
}
{
suggestion
.
content
}
;
if
(
content
=
=
heuristicResult
.
payload
.
content
)
{
continue
;
}
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_NETWORK
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
suggestion
.
description
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
content
:
[
content
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
queryContext
.
tokens
[
0
]
.
value
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
UrlbarUtils
.
ICON
.
EXTENSION
}
)
)
;
addCallback
(
this
result
)
;
}
}
)
;
let
timeoutPromise
=
new
SkippableTimer
(
{
name
:
"
ProviderOmnibox
"
time
:
MAXIMUM_ALLOWED_EXTENSION_TIME_MS
logger
:
this
.
logger
}
)
.
promise
;
await
Promise
.
race
(
[
timeoutPromise
this
.
_resultsPromise
]
)
.
catch
(
ex
=
>
this
.
logger
.
error
(
ex
)
)
;
}
}
var
UrlbarProviderOmnibox
=
new
ProviderOmnibox
(
)
;
