"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
QueryContext
"
"
UrlbarController
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
)
;
class
QueryContext
{
constructor
(
options
=
{
}
)
{
this
.
_checkRequiredOptions
(
options
[
"
searchString
"
"
lastKey
"
"
maxResults
"
"
isPrivate
"
]
)
;
this
.
autoFill
=
!
!
options
.
autoFill
;
}
_checkRequiredOptions
(
options
optionNames
)
{
for
(
let
optionName
of
optionNames
)
{
if
(
!
(
optionName
in
options
)
)
{
throw
new
Error
(
Missing
or
empty
{
optionName
}
provided
to
QueryContext
)
;
}
this
[
optionName
]
=
options
[
optionName
]
;
}
}
}
class
UrlbarController
{
constructor
(
options
=
{
}
)
{
this
.
manager
=
options
.
manager
|
|
UrlbarProvidersManager
;
this
.
_listeners
=
new
Set
(
)
;
}
async
startQuery
(
queryContext
)
{
queryContext
.
autoFill
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
autoFill
"
true
)
;
this
.
_notify
(
"
onQueryStarted
"
queryContext
)
;
await
this
.
manager
.
startQuery
(
queryContext
this
)
;
}
cancelQuery
(
queryContext
)
{
this
.
manager
.
cancelQuery
(
queryContext
)
;
this
.
_notify
(
"
onQueryCancelled
"
queryContext
)
;
}
receiveResults
(
queryContext
)
{
this
.
_notify
(
"
onQueryResults
"
queryContext
)
;
}
addQueryListener
(
listener
)
{
if
(
!
listener
|
|
typeof
listener
!
=
"
object
"
)
{
throw
new
TypeError
(
"
Expected
listener
to
be
an
object
"
)
;
}
this
.
_listeners
.
add
(
listener
)
;
}
removeQueryListener
(
listener
)
{
this
.
_listeners
.
delete
(
listener
)
;
}
tabContextChanged
(
)
{
}
_notify
(
name
.
.
.
params
)
{
for
(
let
listener
of
this
.
_listeners
)
{
try
{
listener
[
name
]
(
.
.
.
params
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
}
