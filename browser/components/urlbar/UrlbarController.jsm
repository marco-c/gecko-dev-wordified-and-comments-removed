"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
QueryContext
"
"
UrlbarController
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
}
)
;
class
QueryContext
{
constructor
(
options
=
{
}
)
{
this
.
_checkRequiredOptions
(
options
[
"
searchString
"
"
lastKey
"
"
maxResults
"
"
isPrivate
"
]
)
;
this
.
autoFill
=
!
!
options
.
autoFill
;
}
_checkRequiredOptions
(
options
optionNames
)
{
for
(
let
optionName
of
optionNames
)
{
if
(
!
(
optionName
in
options
)
)
{
throw
new
Error
(
Missing
or
empty
{
optionName
}
provided
to
QueryContext
)
;
}
this
[
optionName
]
=
options
[
optionName
]
;
}
}
}
class
UrlbarController
{
constructor
(
options
=
{
}
)
{
if
(
!
options
.
browserWindow
)
{
throw
new
Error
(
"
Missing
options
:
browserWindow
"
)
;
}
if
(
!
options
.
browserWindow
.
location
|
|
options
.
browserWindow
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
throw
new
Error
(
"
browserWindow
should
be
an
actual
browser
window
.
"
)
;
}
this
.
manager
=
options
.
manager
|
|
UrlbarProvidersManager
;
this
.
browserWindow
=
options
.
browserWindow
;
this
.
_listeners
=
new
Set
(
)
;
}
setInput
(
input
)
{
this
.
input
=
input
;
}
setView
(
view
)
{
this
.
view
=
view
;
}
async
startQuery
(
queryContext
)
{
queryContext
.
autoFill
=
UrlbarPrefs
.
get
(
"
autoFill
"
)
;
this
.
_notify
(
"
onQueryStarted
"
queryContext
)
;
await
this
.
manager
.
startQuery
(
queryContext
this
)
;
this
.
_notify
(
"
onQueryFinished
"
queryContext
)
;
}
cancelQuery
(
queryContext
)
{
this
.
manager
.
cancelQuery
(
queryContext
)
;
this
.
_notify
(
"
onQueryCancelled
"
queryContext
)
;
}
receiveResults
(
queryContext
)
{
this
.
_notify
(
"
onQueryResults
"
queryContext
)
;
}
addQueryListener
(
listener
)
{
if
(
!
listener
|
|
typeof
listener
!
=
"
object
"
)
{
throw
new
TypeError
(
"
Expected
listener
to
be
an
object
"
)
;
}
this
.
_listeners
.
add
(
listener
)
;
}
removeQueryListener
(
listener
)
{
this
.
_listeners
.
delete
(
listener
)
;
}
tabContextChanged
(
)
{
}
handleKeyNavigation
(
event
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
&
&
this
.
view
.
isOpen
&
&
event
.
ctrlKey
&
&
(
event
.
key
=
=
"
n
"
|
|
event
.
key
=
=
"
p
"
)
)
{
this
.
view
.
selectNextItem
(
{
reverse
:
event
.
key
=
=
"
p
"
}
)
;
event
.
preventDefault
(
)
;
return
;
}
switch
(
event
.
keyCode
)
{
case
KeyEvent
.
DOM_VK_RETURN
:
if
(
AppConstants
.
platform
=
=
"
macosx
"
&
&
event
.
metaKey
)
{
event
.
preventDefault
(
)
;
}
this
.
input
.
handleCommand
(
event
)
;
return
;
case
KeyEvent
.
DOM_VK_TAB
:
this
.
view
.
selectNextItem
(
{
reverse
:
event
.
shiftKey
}
)
;
event
.
preventDefault
(
)
;
break
;
case
KeyEvent
.
DOM_VK_DOWN
:
if
(
!
event
.
ctrlKey
&
&
!
event
.
altKey
)
{
this
.
view
.
selectNextItem
(
)
;
event
.
preventDefault
(
)
;
}
break
;
case
KeyEvent
.
DOM_VK_UP
:
if
(
!
event
.
ctrlKey
&
&
!
event
.
altKey
)
{
this
.
view
.
selectNextItem
(
{
reverse
:
true
}
)
;
event
.
preventDefault
(
)
;
}
break
;
}
}
_notify
(
name
.
.
.
params
)
{
for
(
let
listener
of
this
.
_listeners
)
{
try
{
listener
[
name
]
(
.
.
.
params
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
}
