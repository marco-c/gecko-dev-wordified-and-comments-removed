"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderBookmarkKeywords
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
KeywordUtils
:
"
resource
:
/
/
gre
/
modules
/
KeywordUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
}
)
;
class
ProviderBookmarkKeywords
extends
UrlbarProvider
{
get
name
(
)
{
return
"
BookmarkKeywords
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
isActive
(
queryContext
)
{
return
(
(
!
queryContext
.
restrictSource
|
|
queryContext
.
restrictSource
=
=
lazy
.
UrlbarTokenizer
.
RESTRICT
.
BOOKMARK
)
&
&
!
queryContext
.
searchMode
&
&
queryContext
.
tokens
.
length
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
keyword
=
queryContext
.
tokens
[
0
]
?
.
value
;
let
searchString
=
UrlbarUtils
.
substringAfter
(
queryContext
.
searchString
keyword
)
.
trim
(
)
;
let
{
entry
url
postData
}
=
await
lazy
.
KeywordUtils
.
getBindableKeyword
(
keyword
searchString
)
;
if
(
!
entry
|
|
!
url
)
{
return
;
}
let
title
;
if
(
entry
.
url
.
host
&
&
searchString
)
{
title
=
UrlbarUtils
.
strings
.
formatStringFromName
(
"
bookmarkKeywordSearch
"
[
entry
.
url
.
host
queryContext
.
tokens
.
slice
(
1
)
.
map
(
t
=
>
t
.
value
)
.
join
(
"
"
)
]
)
;
}
else
{
title
=
UrlbarUtils
.
unEscapeURIForUI
(
url
)
;
}
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
KEYWORD
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
url
:
[
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
keyword
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
input
:
queryContext
.
searchString
postData
icon
:
UrlbarUtils
.
getIconForUrl
(
entry
.
url
)
}
)
)
;
result
.
heuristic
=
true
;
addCallback
(
this
result
)
;
}
}
var
UrlbarProviderBookmarkKeywords
=
new
ProviderBookmarkKeywords
(
)
;
