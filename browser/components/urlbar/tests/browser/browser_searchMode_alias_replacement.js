"
use
strict
"
;
const
ALIAS
=
"
testalias
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
let
defaultEngine
aliasEngine
;
add_task
(
async
function
setup
(
)
{
defaultEngine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
)
;
defaultEngine
.
alias
=
"
default
"
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
Services
.
search
.
setDefault
(
defaultEngine
)
;
aliasEngine
=
await
Services
.
search
.
addEngineWithDetails
(
"
Test
"
{
alias
:
ALIAS
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
Services
.
search
.
removeEngine
(
aliasEngine
)
;
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
incompleteAlias
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
ALIAS
.
slice
(
0
-
1
)
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
Assert
.
equal
(
gURLBar
.
value
ALIAS
.
slice
(
0
-
1
)
+
"
"
"
The
typed
value
should
be
unchanged
except
for
the
space
.
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
noTrailingSpace
(
)
{
let
value
=
ALIAS
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
noTrailingSpace_typed
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
ALIAS
.
slice
(
0
-
1
)
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
ALIAS
.
slice
(
-
1
)
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
Assert
.
equal
(
gURLBar
.
value
ALIAS
"
The
typed
value
should
be
the
full
alias
.
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
trailingSpace
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
ALIAS
+
"
"
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
aliasEngine
.
name
entry
:
"
typed
"
}
)
;
Assert
.
ok
(
!
gURLBar
.
value
"
The
urlbar
value
should
be
cleared
.
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
trailingSpace_typed
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
ALIAS
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
aliasEngine
.
name
entry
:
"
typed
"
}
)
;
Assert
.
ok
(
!
gURLBar
.
value
"
The
urlbar
value
should
be
cleared
.
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
trailingSpace_query
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
ALIAS
+
"
query
"
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
aliasEngine
.
name
entry
:
"
typed
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
query
"
"
The
urlbar
value
should
be
the
query
.
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
