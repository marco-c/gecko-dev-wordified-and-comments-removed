"
use
strict
"
;
const
TEST_ENGINE_NAME
=
"
Test
"
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
]
}
)
;
let
testEngine
=
await
Services
.
search
.
addEngineWithDetails
(
TEST_ENGINE_NAME
{
alias
:
"
test
"
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
removeEngine
(
testEngine
)
;
}
)
;
}
)
;
add_task
(
async
function
tokenAlias
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
}
)
;
let
result
;
while
(
gURLBar
.
searchMode
?
.
engineName
!
=
TEST_ENGINE_NAME
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
window
)
;
let
index
=
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
index
)
;
let
expectedSearchMode
=
{
engineName
:
result
.
searchParams
.
engine
isPreview
:
true
entry
:
"
keywordoffer
"
}
;
if
(
UrlbarUtils
.
WEB_ENGINE_NAMES
.
has
(
result
.
searchParams
.
engine
)
)
{
expectedSearchMode
.
source
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
;
}
await
UrlbarTestUtils
.
assertSearchMode
(
window
expectedSearchMode
)
;
}
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
result
.
searchParams
.
engine
entry
:
"
keywordoffer
"
}
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
}
)
;
add_task
(
async
function
startTyping
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
}
)
;
while
(
gURLBar
.
searchMode
?
.
engineName
!
=
TEST_ENGINE_NAME
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
window
)
;
}
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
TEST_ENGINE_NAME
isPreview
:
true
entry
:
"
keywordoffer
"
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
M
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
TEST_ENGINE_NAME
entry
:
"
keywordoffer
"
}
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
}
)
;
add_task
(
async
function
topSites
(
)
{
await
updateTopSites
(
sites
=
>
sites
&
&
sites
[
0
]
&
&
sites
[
0
]
.
searchTopSite
true
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
fireInputEvent
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
window
)
;
let
searchTopSite
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
searchTopSite
.
searchParams
.
engine
isPreview
:
true
entry
:
"
topsites_urlbar
"
}
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
}
)
;
add_task
(
async
function
closeView
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
}
)
;
while
(
gURLBar
.
searchMode
?
.
engineName
!
=
TEST_ENGINE_NAME
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
window
)
;
}
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
TEST_ENGINE_NAME
isPreview
:
true
entry
:
"
keywordoffer
"
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
gURLBar
.
blur
(
)
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
tabSwitch
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
}
)
;
while
(
gURLBar
.
searchMode
?
.
engineName
!
=
TEST_ENGINE_NAME
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
window
)
;
}
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
TEST_ENGINE_NAME
isPreview
:
true
entry
:
"
keywordoffer
"
}
)
;
let
tab1
=
gBrowser
.
selectedTab
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
