"
use
strict
"
;
add_task
(
async
function
activeTab
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
skipUnload
:
true
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
ex
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
engine
.
name
entry
:
"
oneoff
"
}
)
;
await
extension
.
unload
(
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
}
)
;
add_task
(
async
function
backgroundTab
(
)
{
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
skipUnload
:
true
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
ex
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
)
;
let
tab1
=
gBrowser
.
selectedTab
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
engine
.
name
entry
:
"
oneoff
"
}
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
extension
.
unload
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
backgroundWindow
(
)
{
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
skipUnload
:
true
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
let
win1
=
window
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win1
value
:
"
ex
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
win1
)
;
let
win2
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
win1
.
focus
(
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
win1
{
engineName
:
engine
.
name
entry
:
"
oneoff
"
}
)
;
win2
.
focus
(
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
win2
null
)
;
await
extension
.
unload
(
)
;
win1
.
focus
(
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
win1
null
)
;
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
}
)
;
