"
use
strict
"
;
const
serverInfo
=
{
scheme
:
"
http
"
host
:
"
localhost
"
port
:
20709
}
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
true
]
[
"
browser
.
search
.
separatePrivateDefault
.
urlbarResult
.
enabled
"
true
]
[
"
browser
.
search
.
separatePrivateDefault
"
true
]
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
/
"
transition
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
]
)
;
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
url
:
getRootDirectory
(
gTestPath
)
+
"
searchSuggestionEngine
.
xml
"
setAsDefault
:
true
setAsDefaultPrivate
:
true
}
)
;
let
engine2
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
url
:
getRootDirectory
(
gTestPath
)
+
"
POSTSearchEngine
.
xml
"
}
)
;
await
Services
.
search
.
moveEngine
(
engine2
0
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch
"
keyword
:
"
alias
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
async
function
AssertNoPrivateResult
(
win
)
{
let
count
=
await
UrlbarTestUtils
.
getResultCount
(
win
)
;
Assert
.
ok
(
count
>
0
"
Sanity
check
result
count
"
)
;
for
(
let
i
=
0
;
i
<
count
;
+
+
i
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
win
i
)
;
Assert
.
ok
(
result
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
|
|
!
result
.
searchParams
.
inPrivateWindow
"
Check
this
result
is
not
a
'
Search
in
a
Private
Window
'
one
"
)
;
}
}
async
function
AssertPrivateResult
(
win
engine
isPrivateEngine
)
{
let
count
=
await
UrlbarTestUtils
.
getResultCount
(
win
)
;
Assert
.
ok
(
count
>
1
"
Sanity
check
result
count
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Check
result
type
"
)
;
Assert
.
ok
(
result
.
searchParams
.
inPrivateWindow
"
Check
inPrivateWindow
"
)
;
Assert
.
equal
(
result
.
searchParams
.
isPrivateEngine
isPrivateEngine
"
Check
isPrivateEngine
"
)
;
Assert
.
equal
(
result
.
searchParams
.
engine
engine
.
name
"
Check
the
search
engine
"
)
;
return
result
;
}
add_task
(
async
function
test_nonsearch
(
)
{
info
(
"
Test
that
'
Search
in
a
Private
Window
'
does
not
appear
with
non
-
search
results
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
exa
"
}
)
;
await
AssertNoPrivateResult
(
window
)
;
}
)
;
add_task
(
async
function
test_search
(
)
{
info
(
"
Test
that
'
Search
in
a
Private
Window
'
appears
with
only
search
results
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
unique198273982173
"
}
)
;
await
AssertPrivateResult
(
window
await
Services
.
search
.
getDefault
(
)
false
)
;
}
)
;
add_task
(
async
function
test_search_urlbar_result_disabled
(
)
{
info
(
"
Test
that
'
Search
in
a
Private
Window
'
does
not
appear
when
disabled
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
.
urlbarResult
.
enabled
"
false
]
]
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
unique198273982173
"
}
)
;
await
AssertNoPrivateResult
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_search_disabled_suggestions
(
)
{
info
(
"
Test
that
'
Search
in
a
Private
Window
'
appears
if
suggestions
are
disabled
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
false
]
]
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
unique198273982173
"
}
)
;
await
AssertPrivateResult
(
window
await
Services
.
search
.
getDefault
(
)
false
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
