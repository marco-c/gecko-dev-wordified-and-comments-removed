"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
a
test
page
"
;
add_task
(
async
function
test_setup
(
)
{
await
SearchTestUtils
.
installSearchExtension
(
)
;
let
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
registerCleanupFunction
(
async
function
cleanup
(
)
{
while
(
gBrowser
.
tabs
.
length
>
1
)
{
BrowserTestUtils
.
removeTab
(
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
)
;
}
await
Services
.
search
.
setDefault
(
originalEngine
)
;
}
)
;
}
)
;
function
simulateURLBarDrop
(
content
)
{
EventUtils
.
synthesizeDrop
(
document
.
getElementById
(
"
home
-
button
"
)
gURLBar
.
inputField
[
[
content
]
]
"
copy
"
window
)
;
}
add_task
(
async
function
checkDragURL
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
function
(
browser
)
{
info
(
"
Check
dragging
a
normal
url
to
the
urlbar
"
)
;
const
DRAG_URL
=
"
http
:
/
/
www
.
example
.
com
/
"
;
simulateURLBarDrop
(
{
type
:
"
text
/
plain
"
data
:
DRAG_URL
}
)
;
Assert
.
equal
(
gURLBar
.
value
TEST_URL
"
URL
bar
value
should
not
have
changed
"
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
userTypedValue
null
"
Stored
URL
bar
value
should
not
have
changed
"
)
;
}
)
;
}
)
;
add_task
(
async
function
checkDragForbiddenURL
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
function
(
browser
)
{
for
(
let
url
of
[
"
chrome
:
/
/
browser
/
content
/
aboutDialog
.
xhtml
"
"
file
:
/
/
/
"
"
javascript
:
"
"
javascript
:
void
(
0
)
"
"
java
\
r
\
ns
\
ncript
:
void
(
0
)
"
"
javascript
:
void
(
0
)
"
"
\
u00A0java
\
nscript
:
void
(
0
)
"
"
javascript
:
document
.
domain
"
"
javascript
:
javascript
:
alert
(
'
hi
!
'
)
"
]
)
{
info
(
Check
dragging
"
{
url
}
"
to
the
URL
bar
)
;
simulateURLBarDrop
(
{
type
:
"
text
/
plain
"
data
:
url
}
)
;
Assert
.
notEqual
(
gURLBar
.
value
url
Shouldn
'
t
be
allowed
to
drop
{
url
}
on
URL
bar
)
;
}
}
)
;
}
)
;
add_task
(
async
function
checkDragText
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
info
(
"
Check
dragging
multi
word
text
to
the
urlbar
"
)
;
const
TEXT
=
"
Firefox
is
awesome
"
;
const
TEXT_URL
=
"
https
:
/
/
example
.
com
/
?
q
=
Firefox
+
is
+
awesome
"
;
let
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
browser
false
TEXT_URL
)
;
simulateURLBarDrop
(
{
type
:
"
text
/
plain
"
data
:
TEXT
}
)
;
await
promiseLoad
;
info
(
"
Check
dragging
single
word
text
to
the
urlbar
"
)
;
const
WORD
=
"
Firefox
"
;
const
WORD_URL
=
"
https
:
/
/
example
.
com
/
?
q
=
Firefox
"
;
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
browser
false
WORD_URL
)
;
simulateURLBarDrop
(
{
type
:
"
text
/
plain
"
data
:
WORD
}
)
;
await
promiseLoad
;
}
)
;
}
)
;
