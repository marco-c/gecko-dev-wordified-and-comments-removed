"
use
strict
"
;
requestLongerTimeout
(
5
)
;
add_setup
(
async
function
(
)
{
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
origin
(
)
{
await
addVisits
(
"
http
:
/
/
example
.
com
/
"
)
;
await
search
(
{
searchString
:
"
ex
"
valueBefore
:
"
ex
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
exa
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
EXAM
"
valueBefore
:
"
EXAMple
.
com
/
"
valueAfter
:
"
EXAMple
.
com
/
"
placeholderAfter
:
"
EXAMple
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
eXaMp
"
valueBefore
:
"
eXaMple
.
com
/
"
valueAfter
:
"
eXaMple
.
com
/
"
placeholderAfter
:
"
eXaMple
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
exampL
"
valueBefore
:
"
exampLe
.
com
/
"
valueAfter
:
"
exampLe
.
com
/
"
placeholderAfter
:
"
exampLe
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
url
(
)
{
await
addVisits
(
"
http
:
/
/
example
.
com
/
aaa
/
bbb
/
ccc
"
)
;
await
search
(
{
searchString
:
"
example
.
com
/
a
"
valueBefore
:
"
example
.
com
/
a
"
valueAfter
:
"
example
.
com
/
aaa
/
"
placeholderAfter
:
"
example
.
com
/
aaa
/
"
}
)
;
await
search
(
{
searchString
:
"
EXAmple
.
com
/
aA
"
valueBefore
:
"
EXAmple
.
com
/
aAa
/
"
valueAfter
:
"
EXAmple
.
com
/
aAa
/
"
placeholderAfter
:
"
EXAmple
.
com
/
aAa
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aAa
"
valueBefore
:
"
example
.
com
/
aAa
/
"
valueAfter
:
"
example
.
com
/
aAa
/
"
placeholderAfter
:
"
example
.
com
/
aAa
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aaa
/
"
valueBefore
:
"
example
.
com
/
aaa
/
"
valueAfter
:
"
example
.
com
/
aaa
/
"
placeholderAfter
:
"
example
.
com
/
aaa
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aaa
/
b
"
valueBefore
:
"
example
.
com
/
aaa
/
b
"
valueAfter
:
"
example
.
com
/
aaa
/
bbb
/
"
placeholderAfter
:
"
example
.
com
/
aaa
/
bbb
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aAa
/
bB
"
valueBefore
:
"
example
.
com
/
aAa
/
bBb
/
"
valueAfter
:
"
example
.
com
/
aAa
/
bBb
/
"
placeholderAfter
:
"
example
.
com
/
aAa
/
bBb
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aAa
/
bBb
"
valueBefore
:
"
example
.
com
/
aAa
/
bBb
/
"
valueAfter
:
"
example
.
com
/
aAa
/
bBb
/
"
placeholderAfter
:
"
example
.
com
/
aAa
/
bBb
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aaa
/
bbb
/
"
valueBefore
:
"
example
.
com
/
aaa
/
bbb
/
"
valueAfter
:
"
example
.
com
/
aaa
/
bbb
/
"
placeholderAfter
:
"
example
.
com
/
aaa
/
bbb
/
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aaa
/
bbb
/
c
"
valueBefore
:
"
example
.
com
/
aaa
/
bbb
/
c
"
valueAfter
:
"
example
.
com
/
aaa
/
bbb
/
ccc
"
placeholderAfter
:
"
example
.
com
/
aaa
/
bbb
/
ccc
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aAa
/
bBb
/
cC
"
valueBefore
:
"
example
.
com
/
aAa
/
bBb
/
cCc
"
valueAfter
:
"
example
.
com
/
aAa
/
bBb
/
cCc
"
placeholderAfter
:
"
example
.
com
/
aAa
/
bBb
/
cCc
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
aaa
/
bbb
/
ccc
"
valueBefore
:
"
example
.
com
/
aaa
/
bbb
/
ccc
"
valueAfter
:
"
example
.
com
/
aaa
/
bbb
/
ccc
"
placeholderAfter
:
"
example
.
com
/
aaa
/
bbb
/
ccc
"
}
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
adaptiveHistory
(
)
{
UrlbarPrefs
.
set
(
"
autoFill
.
adaptiveHistory
.
enabled
"
true
)
;
await
addVisits
(
"
http
:
/
/
example
.
com
/
test
"
)
;
await
UrlbarUtils
.
addToInputHistory
(
"
http
:
/
/
example
.
com
/
test
"
"
exa
"
)
;
await
search
(
{
searchString
:
"
exa
"
valueBefore
:
"
exa
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
EXAM
"
valueBefore
:
"
EXAMple
.
com
/
test
"
valueAfter
:
"
EXAMple
.
com
/
test
"
placeholderAfter
:
"
EXAMple
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
eXaMpLe
"
valueBefore
:
"
eXaMpLe
.
com
/
test
"
valueAfter
:
"
eXaMpLe
.
com
/
test
"
placeholderAfter
:
"
eXaMpLe
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
example
.
"
valueBefore
:
"
example
.
com
/
test
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
example
.
c
"
valueBefore
:
"
example
.
com
/
test
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
"
valueBefore
:
"
example
.
com
/
test
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
"
valueBefore
:
"
example
.
com
/
test
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
T
"
valueBefore
:
"
example
.
com
/
Test
"
valueAfter
:
"
example
.
com
/
Test
"
placeholderAfter
:
"
example
.
com
/
Test
"
}
)
;
await
search
(
{
searchString
:
"
eXaMple
.
com
/
tE
"
valueBefore
:
"
eXaMple
.
com
/
tEst
"
valueAfter
:
"
eXaMple
.
com
/
tEst
"
placeholderAfter
:
"
eXaMple
.
com
/
tEst
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
tes
"
valueBefore
:
"
example
.
com
/
test
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
example
.
com
/
test
"
valueBefore
:
"
example
.
com
/
test
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
UrlbarPrefs
.
clear
(
"
autoFill
.
adaptiveHistory
.
enabled
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
tokenAlias
(
)
{
await
SearchTestUtils
.
installSearchExtension
(
{
keyword
:
"
__example
"
}
)
;
await
search
(
{
searchString
:
"
__ex
"
valueBefore
:
"
__ex
"
valueAfter
:
"
__example
"
placeholderAfter
:
"
__example
"
}
)
;
await
search
(
{
searchString
:
"
__exa
"
valueBefore
:
"
__example
"
valueAfter
:
"
__example
"
placeholderAfter
:
"
__example
"
}
)
;
await
search
(
{
searchString
:
"
__EXAM
"
valueBefore
:
"
__EXAMple
"
valueAfter
:
"
__EXAMple
"
placeholderAfter
:
"
__EXAMple
"
}
)
;
await
search
(
{
searchString
:
"
__eXaMp
"
valueBefore
:
"
__eXaMple
"
valueAfter
:
"
__eXaMple
"
placeholderAfter
:
"
__eXaMple
"
}
)
;
await
search
(
{
searchString
:
"
__exampl
"
valueBefore
:
"
__example
"
valueAfter
:
"
__example
"
placeholderAfter
:
"
__example
"
}
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noAutofill
(
)
{
await
addVisits
(
"
http
:
/
/
example
.
com
/
"
)
;
await
search
(
{
searchString
:
"
ex
"
valueBefore
:
"
ex
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
moz
"
valueBefore
:
"
moz
"
valueAfter
:
"
moz
"
placeholderAfter
:
"
"
}
)
;
await
search
(
{
searchString
:
"
ex
"
valueBefore
:
"
ex
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
exa
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
EXAM
"
valueBefore
:
"
EXAMple
.
com
/
"
valueAfter
:
"
EXAMple
.
com
/
"
placeholderAfter
:
"
EXAMple
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
eXaMp
"
valueBefore
:
"
eXaMple
.
com
/
"
valueAfter
:
"
eXaMple
.
com
/
"
placeholderAfter
:
"
eXaMple
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
exampl
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
differentAutofill
(
)
{
await
addVisits
(
"
http
:
/
/
mozilla
.
org
/
"
"
http
:
/
/
example
.
com
/
"
)
;
await
search
(
{
searchString
:
"
moz
"
valueBefore
:
"
moz
"
valueAfter
:
"
mozilla
.
org
/
"
placeholderAfter
:
"
mozilla
.
org
/
"
}
)
;
await
search
(
{
searchString
:
"
ex
"
valueBefore
:
"
ex
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
exa
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
EXAm
"
valueBefore
:
"
EXAmple
.
com
/
"
valueAfter
:
"
EXAmple
.
com
/
"
placeholderAfter
:
"
EXAmple
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
moz
"
valueBefore
:
"
moz
"
valueAfter
:
"
mozilla
.
org
/
"
placeholderAfter
:
"
mozilla
.
org
/
"
}
)
;
await
search
(
{
searchString
:
"
mozi
"
valueBefore
:
"
mozilla
.
org
/
"
valueAfter
:
"
mozilla
.
org
/
"
placeholderAfter
:
"
mozilla
.
org
/
"
}
)
;
await
search
(
{
searchString
:
"
MOZil
"
valueBefore
:
"
MOZilla
.
org
/
"
valueAfter
:
"
MOZilla
.
org
/
"
placeholderAfter
:
"
MOZilla
.
org
/
"
}
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
bookmarkKeyword
(
)
{
await
addVisits
(
"
https
:
/
/
example
.
com
/
"
)
;
await
PlacesUtils
.
keywords
.
insert
(
{
keyword
:
"
ex
"
url
:
"
https
:
/
/
somekeyword
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
e
"
valueBefore
:
"
e
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
search
(
{
searchString
:
"
ex
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
ex
"
placeholderAfter
:
"
"
}
)
;
await
search
(
{
searchString
:
"
exa
"
valueBefore
:
"
exa
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
await
PlacesUtils
.
keywords
.
remove
(
"
ex
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noURIFragmentMatch1
(
)
{
await
addVisits
(
"
https
:
/
/
example
.
com
/
#
TEST
"
)
;
const
testData
=
[
{
desc
:
"
Autofill
example
.
com
/
#
TEST
then
search
for
example
.
com
/
#
Te
"
searches
:
[
{
searchString
:
"
example
.
com
/
#
T
"
valueBefore
:
"
example
.
com
/
#
T
"
valueAfter
:
"
example
.
com
/
#
TEST
"
placeholderAfter
:
"
example
.
com
/
#
TEST
"
}
{
searchString
:
"
example
.
com
/
#
Te
"
valueBefore
:
"
example
.
com
/
#
Te
"
valueAfter
:
"
example
.
com
/
#
Te
"
placeholderAfter
:
"
"
}
]
}
{
desc
:
"
Autofill
https
:
/
/
example
.
com
/
#
TEST
then
search
for
https
:
/
/
example
.
com
/
#
Te
"
searches
:
[
{
searchString
:
"
https
:
/
/
example
.
com
/
#
T
"
valueBefore
:
"
https
:
/
/
example
.
com
/
#
T
"
valueAfter
:
"
https
:
/
/
example
.
com
/
#
TEST
"
placeholderAfter
:
"
https
:
/
/
example
.
com
/
#
TEST
"
}
{
searchString
:
"
https
:
/
/
example
.
com
/
#
Te
"
valueBefore
:
"
https
:
/
/
example
.
com
/
#
Te
"
valueAfter
:
"
https
:
/
/
example
.
com
/
#
Te
"
placeholderAfter
:
"
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
#
TEST
then
search
for
example
.
com
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
#
T
"
valueBefore
:
"
example
.
com
/
#
T
"
valueAfter
:
"
example
.
com
/
#
TEST
"
placeholderAfter
:
"
example
.
com
/
#
TEST
"
}
{
searchString
:
"
example
.
com
/
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
]
;
for
(
const
{
desc
searches
}
of
testData
)
{
info
(
"
Running
subtest
:
"
+
desc
)
;
for
(
let
i
=
0
;
i
<
searches
.
length
;
i
+
+
)
{
info
(
"
Doing
search
at
index
"
+
i
)
;
await
search
(
searches
[
i
]
)
;
}
info
(
"
Doing
extra
search
to
clear
placeholder
"
)
;
await
search
(
{
searchString
:
"
no
match
"
valueBefore
:
"
no
match
"
valueAfter
:
"
no
match
"
placeholderAfter
:
"
"
}
)
;
}
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noURIFragmentMatch2
(
)
{
await
addVisits
(
"
https
:
/
/
example
.
com
/
foo
#
TEST
"
)
;
const
testData
=
[
{
desc
:
"
Autofill
example
.
com
/
foo
#
TEST
then
search
for
example
.
com
/
foo
#
Te
"
searches
:
[
{
searchString
:
"
example
.
com
/
foo
#
T
"
valueBefore
:
"
example
.
com
/
foo
#
T
"
valueAfter
:
"
example
.
com
/
foo
#
TEST
"
placeholderAfter
:
"
example
.
com
/
foo
#
TEST
"
}
{
searchString
:
"
example
.
com
/
foo
#
Te
"
valueBefore
:
"
example
.
com
/
foo
#
Te
"
valueAfter
:
"
example
.
com
/
foo
#
Te
"
placeholderAfter
:
"
"
}
]
}
{
desc
:
"
Autofill
https
:
/
/
example
.
com
/
foo
#
TEST
then
search
for
https
:
/
/
example
.
com
/
foo
#
Te
"
searches
:
[
{
searchString
:
"
https
:
/
/
example
.
com
/
foo
#
T
"
valueBefore
:
"
https
:
/
/
example
.
com
/
foo
#
T
"
valueAfter
:
"
https
:
/
/
example
.
com
/
foo
#
TEST
"
placeholderAfter
:
"
https
:
/
/
example
.
com
/
foo
#
TEST
"
}
{
searchString
:
"
https
:
/
/
example
.
com
/
foo
#
Te
"
valueBefore
:
"
https
:
/
/
example
.
com
/
foo
#
Te
"
valueAfter
:
"
https
:
/
/
example
.
com
/
foo
#
Te
"
placeholderAfter
:
"
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
foo
#
TEST
then
search
for
example
.
com
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
foo
#
T
"
valueBefore
:
"
example
.
com
/
foo
#
T
"
valueAfter
:
"
example
.
com
/
foo
#
TEST
"
placeholderAfter
:
"
example
.
com
/
foo
#
TEST
"
}
{
searchString
:
"
example
.
com
/
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
]
;
for
(
const
{
desc
searches
}
of
testData
)
{
info
(
"
Running
subtest
:
"
+
desc
)
;
for
(
let
i
=
0
;
i
<
searches
.
length
;
i
+
+
)
{
info
(
"
Doing
search
at
index
"
+
i
)
;
await
search
(
searches
[
i
]
)
;
}
info
(
"
Doing
extra
search
to
clear
placeholder
"
)
;
await
search
(
{
searchString
:
"
no
match
"
valueBefore
:
"
no
match
"
valueAfter
:
"
no
match
"
placeholderAfter
:
"
"
}
)
;
}
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noPathMatch
(
)
{
await
addVisits
(
"
http
:
/
/
example
.
com
/
shallow
/
deep
/
file
"
)
;
const
testData
=
[
{
desc
:
"
Autofill
example
.
com
/
shallow
/
then
search
for
exam
"
searches
:
[
{
searchString
:
"
example
.
com
/
s
"
valueBefore
:
"
example
.
com
/
s
"
valueAfter
:
"
example
.
com
/
shallow
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
"
}
{
searchString
:
"
exam
"
valueBefore
:
"
exam
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
then
search
for
example
.
com
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
s
"
valueBefore
:
"
example
.
com
/
s
"
valueAfter
:
"
example
.
com
/
shallow
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
"
}
{
searchString
:
"
example
.
com
/
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
then
search
for
exam
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
d
"
valueBefore
:
"
example
.
com
/
shallow
/
d
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
"
}
{
searchString
:
"
exam
"
valueBefore
:
"
exam
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
then
search
for
example
.
com
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
d
"
valueBefore
:
"
example
.
com
/
shallow
/
d
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
"
}
{
searchString
:
"
example
.
com
/
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
then
search
for
example
.
com
/
s
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
d
"
valueBefore
:
"
example
.
com
/
shallow
/
d
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
"
}
{
searchString
:
"
example
.
com
/
s
"
valueBefore
:
"
example
.
com
/
s
"
valueAfter
:
"
example
.
com
/
shallow
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
then
search
for
example
.
com
/
shallow
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
d
"
valueBefore
:
"
example
.
com
/
shallow
/
d
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
"
}
{
searchString
:
"
example
.
com
/
shallow
/
"
valueBefore
:
"
example
.
com
/
shallow
/
"
valueAfter
:
"
example
.
com
/
shallow
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
file
then
search
for
exam
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
}
{
searchString
:
"
exam
"
valueBefore
:
"
exam
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
file
then
search
for
example
.
com
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
}
{
searchString
:
"
example
.
com
/
"
valueBefore
:
"
example
.
com
/
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
file
then
search
for
example
.
com
/
s
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
}
{
searchString
:
"
example
.
com
/
s
"
valueBefore
:
"
example
.
com
/
s
"
valueAfter
:
"
example
.
com
/
shallow
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
file
then
search
for
example
.
com
/
shallow
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
}
{
searchString
:
"
example
.
com
/
shallow
/
"
valueBefore
:
"
example
.
com
/
shallow
/
"
valueAfter
:
"
example
.
com
/
shallow
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
file
then
search
for
example
.
com
/
shallow
/
d
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
}
{
searchString
:
"
example
.
com
/
shallow
/
d
"
valueBefore
:
"
example
.
com
/
shallow
/
d
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
"
}
]
}
{
desc
:
"
Autofill
example
.
com
/
shallow
/
deep
/
file
then
search
for
example
.
com
/
shallow
/
deep
/
"
searches
:
[
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
f
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
}
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
fi
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
file
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
file
"
}
{
searchString
:
"
example
.
com
/
shallow
/
deep
/
"
valueBefore
:
"
example
.
com
/
shallow
/
deep
/
"
valueAfter
:
"
example
.
com
/
shallow
/
deep
/
"
placeholderAfter
:
"
example
.
com
/
shallow
/
deep
/
"
}
]
}
]
;
for
(
const
{
desc
searches
}
of
testData
)
{
info
(
"
Running
subtest
:
"
+
desc
)
;
for
(
let
i
=
0
;
i
<
searches
.
length
;
i
+
+
)
{
info
(
"
Doing
search
at
index
"
+
i
)
;
await
search
(
searches
[
i
]
)
;
}
info
(
"
Doing
extra
search
to
clear
placeholder
"
)
;
await
search
(
{
searchString
:
"
no
match
"
valueBefore
:
"
no
match
"
valueAfter
:
"
no
match
"
placeholderAfter
:
"
"
}
)
;
}
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noAdaptiveHistoryMatch
(
)
{
UrlbarPrefs
.
set
(
"
autoFill
.
adaptiveHistory
.
enabled
"
true
)
;
await
addVisits
(
"
http
:
/
/
example
.
com
/
test
"
)
;
await
UrlbarUtils
.
addToInputHistory
(
"
http
:
/
/
example
.
com
/
test
"
"
exam
"
)
;
await
search
(
{
searchString
:
"
example
"
valueBefore
:
"
example
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
exam
"
valueBefore
:
"
example
.
com
/
test
"
valueAfter
:
"
example
.
com
/
test
"
placeholderAfter
:
"
example
.
com
/
test
"
}
)
;
await
search
(
{
searchString
:
"
ex
"
valueBefore
:
"
ex
"
valueAfter
:
"
example
.
com
/
"
placeholderAfter
:
"
example
.
com
/
"
}
)
;
UrlbarPrefs
.
clear
(
"
autoFill
.
adaptiveHistory
.
enabled
"
)
;
await
cleanUp
(
)
;
}
)
;
async
function
addVisits
(
.
.
.
urls
)
{
for
(
let
url
of
urls
)
{
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
url
)
;
}
}
}
async
function
cleanUp
(
)
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
gURLBar
.
blur
(
)
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
