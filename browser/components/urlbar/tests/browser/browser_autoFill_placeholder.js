"
use
strict
"
;
add_task
(
async
function
init
(
)
{
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
origin
(
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
ex
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
searchAndCheck
(
"
exa
"
"
example
.
com
/
"
)
;
await
searchAndCheck
(
"
EXAM
"
"
EXAMple
.
com
/
"
)
;
await
searchAndCheck
(
"
eXaMp
"
"
eXaMple
.
com
/
"
)
;
await
searchAndCheck
(
"
exampl
"
"
example
.
com
/
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
tokenAlias
(
)
{
await
SearchTestUtils
.
installSearchExtension
(
{
keyword
:
"
__example
"
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
__ex
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
__example
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
__ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
__example
"
.
length
)
;
await
searchAndCheck
(
"
__exa
"
"
__example
"
)
;
await
searchAndCheck
(
"
__EXAM
"
"
__EXAMple
"
)
;
await
searchAndCheck
(
"
__eXaMp
"
"
__eXaMple
"
)
;
await
searchAndCheck
(
"
__exampl
"
"
__example
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noMatch1
(
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
ex
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
gURLBar
.
value
=
"
moz
"
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
moz
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
moz
"
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
ex
"
fireInputEvent
:
true
}
)
;
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
searchAndCheck
(
"
exa
"
"
example
.
com
/
"
)
;
await
searchAndCheck
(
"
EXAM
"
"
EXAMple
.
com
/
"
)
;
await
searchAndCheck
(
"
eXaMp
"
"
eXaMple
.
com
/
"
)
;
await
searchAndCheck
(
"
exampl
"
"
example
.
com
/
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noMatch2
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
mozilla
.
org
/
"
"
http
:
/
/
example
.
com
/
"
]
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
moz
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
mozilla
.
org
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
mozilla
.
org
/
"
.
length
)
;
gURLBar
.
value
=
"
ex
"
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
ex
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
ex
"
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
searchAndCheck
(
"
exa
"
"
example
.
com
/
"
)
;
await
searchAndCheck
(
"
EXAm
"
"
EXAmple
.
com
/
"
)
;
gURLBar
.
value
=
"
moz
"
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
moz
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
moz
"
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
mozilla
.
org
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
mozilla
.
org
/
"
.
length
)
;
await
searchAndCheck
(
"
mozi
"
"
mozilla
.
org
/
"
)
;
await
searchAndCheck
(
"
MOZil
"
"
MOZilla
.
org
/
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
clear_placeholder_for_keyword_or_alias
(
)
{
info
(
"
Clear
the
autofill
placeholder
if
a
keyword
is
typed
"
)
;
await
PlacesTestUtils
.
addVisits
(
"
https
:
/
/
example
.
com
/
"
)
;
await
PlacesUtils
.
keywords
.
insert
(
{
keyword
:
"
ex
"
url
:
"
https
:
/
/
somekeyword
.
com
/
"
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
keyword
:
"
exam
"
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
keywords
.
remove
(
"
ex
"
)
;
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
e
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
e
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
searchAndCheck
(
"
ex
"
"
example
.
com
/
"
"
ex
"
)
;
await
searchAndCheck
(
"
EXA
"
"
EXAmple
.
com
/
"
"
EXAmple
.
com
/
"
)
;
await
searchAndCheck
(
"
eXaM
"
"
eXaMple
.
com
/
"
"
eXaMple
.
com
/
"
)
;
await
searchAndCheck
(
"
examp
"
"
example
.
com
/
"
"
example
.
com
/
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
clear_placeholder_for_uri_fragment
(
)
{
info
(
"
Clear
the
autofill
placeholder
if
the
value
has
uri
fragment
that
does
not
match
with
placeholder
"
)
;
await
PlacesTestUtils
.
addVisits
(
"
https
:
/
/
example
.
com
/
#
TEST
"
)
;
const
testData
=
[
{
input
:
"
https
:
/
/
example
.
com
/
#
T
"
autofilled
:
"
https
:
/
/
example
.
com
/
#
TEST
"
invalidInput
:
"
https
:
/
/
example
.
com
/
#
t
"
}
{
input
:
"
example
.
com
/
#
T
"
autofilled
:
"
example
.
com
/
#
TEST
"
invalidInput
:
"
example
.
com
/
#
t
"
}
{
input
:
"
example
.
com
/
#
T
"
autofilled
:
"
example
.
com
/
#
TEST
"
invalidInput
:
"
example
.
com
/
"
}
]
;
for
(
const
{
input
autofilled
invalidInput
}
of
testData
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
input
fireInputEvent
:
true
}
)
;
await
searchAndCheck
(
input
autofilled
)
;
await
searchAndCheck
(
invalidInput
invalidInput
)
;
await
searchAndCheck
(
input
input
)
;
}
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
clear_placeholder_for_deep_path
(
)
{
info
(
"
Check
if
not
autofill
if
the
value
expresses
parent
directory
"
)
;
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
shallow
/
deep
/
file
"
)
;
const
testData
=
[
{
input
:
"
example
.
com
/
s
"
autofilled
:
"
example
.
com
/
shallow
/
"
invalidInput
:
"
example
.
com
/
"
}
{
input
:
"
example
.
com
/
shallow
/
d
"
autofilled
:
"
example
.
com
/
shallow
/
deep
/
"
invalidInput
:
"
example
.
com
/
shallow
/
"
}
{
input
:
"
example
.
com
/
shallow
/
deep
/
f
"
autofilled
:
"
example
.
com
/
shallow
/
deep
/
file
"
invalidInput
:
"
example
.
com
/
shallow
/
deep
/
"
}
]
;
for
(
const
{
input
autofilled
invalidInput
}
of
testData
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
input
fireInputEvent
:
true
}
)
;
await
searchAndCheck
(
input
autofilled
)
;
await
searchAndCheck
(
invalidInput
invalidInput
)
;
}
await
cleanUp
(
)
;
}
)
;
async
function
searchAndCheck
(
searchString
expectedAutofillValue
onCompleteValue
=
"
"
)
{
gURLBar
.
value
=
searchString
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
expectedAutofillValue
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
expectedAutofillValue
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
if
(
onCompleteValue
)
{
Assert
.
equal
(
gURLBar
.
value
onCompleteValue
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
onCompleteValue
.
length
)
;
}
}
async
function
cleanUp
(
)
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
gURLBar
.
blur
(
)
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
