"
use
strict
"
;
add_task
(
async
function
init
(
)
{
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
origin
(
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
"
)
;
await
promiseAutocompleteResultPopup
(
"
ex
"
window
true
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
searchAndCheck
(
"
exa
"
"
example
.
com
/
"
)
;
await
searchAndCheck
(
"
EXAM
"
"
EXAMple
.
com
/
"
)
;
await
searchAndCheck
(
"
eXaMp
"
"
eXaMple
.
com
/
"
)
;
await
searchAndCheck
(
"
exampl
"
"
example
.
com
/
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
tokenAlias
(
)
{
await
Services
.
search
.
addEngineWithDetails
(
"
Test
"
{
alias
:
"
__example
"
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
registerCleanupFunction
(
async
function
(
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
"
Test
"
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
}
)
;
await
promiseAutocompleteResultPopup
(
"
__ex
"
window
true
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
__example
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
__ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
__example
"
.
length
)
;
await
searchAndCheck
(
"
__exa
"
"
__example
"
)
;
await
searchAndCheck
(
"
__EXAM
"
"
__EXAMple
"
)
;
await
searchAndCheck
(
"
__eXaMp
"
"
__eXaMple
"
)
;
await
searchAndCheck
(
"
__exampl
"
"
__example
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noMatch1
(
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
"
)
;
await
promiseAutocompleteResultPopup
(
"
ex
"
window
true
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
gURLBar
.
value
=
"
moz
"
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
moz
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
moz
"
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
promiseAutocompleteResultPopup
(
"
ex
"
window
true
)
;
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
searchAndCheck
(
"
exa
"
"
example
.
com
/
"
)
;
await
searchAndCheck
(
"
EXAM
"
"
EXAMple
.
com
/
"
)
;
await
searchAndCheck
(
"
eXaMp
"
"
eXaMple
.
com
/
"
)
;
await
searchAndCheck
(
"
exampl
"
"
example
.
com
/
"
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
noMatch2
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
mozilla
.
org
/
"
"
http
:
/
/
example
.
com
/
"
]
)
;
await
promiseAutocompleteResultPopup
(
"
moz
"
window
true
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
mozilla
.
org
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
mozilla
.
org
/
"
.
length
)
;
gURLBar
.
value
=
"
ex
"
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
ex
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
ex
"
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
searchAndCheck
(
"
exa
"
"
example
.
com
/
"
)
;
await
searchAndCheck
(
"
EXAm
"
"
EXAmple
.
com
/
"
)
;
gURLBar
.
value
=
"
moz
"
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
moz
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
moz
"
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
mozilla
.
org
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
moz
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
mozilla
.
org
/
"
.
length
)
;
await
searchAndCheck
(
"
mozi
"
"
mozilla
.
org
/
"
)
;
await
searchAndCheck
(
"
MOZil
"
"
MOZilla
.
org
/
"
)
;
await
cleanUp
(
)
;
}
)
;
async
function
searchAndCheck
(
searchString
expectedAutofillValue
)
{
gURLBar
.
value
=
searchString
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
expectedAutofillValue
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
expectedAutofillValue
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
}
async
function
cleanUp
(
)
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
