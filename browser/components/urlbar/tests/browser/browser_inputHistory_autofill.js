"
use
strict
"
;
let
addToInputHistorySpy
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
autoFill
.
adaptiveHistory
.
enabled
"
true
]
]
}
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
addToInputHistorySpy
=
sandbox
.
spy
(
UrlbarUtils
"
addToInputHistory
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
}
)
;
add_task
(
async
function
bumped
(
)
{
let
input
=
"
exam
"
;
let
tests
=
[
{
url
:
"
http
:
/
/
example
.
com
/
test
"
searchString
:
"
exam
"
}
{
url
:
"
http
:
/
/
example
.
com
/
test
"
searchString
:
"
example
"
}
{
url
:
"
http
:
/
/
www
.
example
.
com
/
test
"
searchString
:
"
exam
"
}
]
;
for
(
let
{
url
searchString
}
of
tests
)
{
info
(
"
Running
subtest
:
"
+
JSON
.
stringify
(
{
url
searchString
}
)
)
;
await
PlacesTestUtils
.
addVisits
(
url
)
;
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
await
UrlbarUtils
.
addToInputHistory
(
url
input
)
;
addToInputHistorySpy
.
resetHistory
(
)
;
let
initialUseCount
=
await
getUseCount
(
{
url
input
}
)
;
info
(
"
Got
initial
use
count
:
"
+
initialUseCount
)
;
await
triggerAutofillAndPickResult
(
searchString
"
example
.
com
/
test
"
)
;
let
calls
=
addToInputHistorySpy
.
getCalls
(
)
;
Assert
.
equal
(
calls
.
length
1
"
UrlbarUtils
.
addToInputHistory
(
)
called
once
"
)
;
Assert
.
deepEqual
(
calls
[
0
]
.
args
[
url
input
]
"
UrlbarUtils
.
addToInputHistory
(
)
called
with
expected
args
"
)
;
Assert
.
greater
(
await
getUseCount
(
{
url
input
}
)
initialUseCount
"
New
use
count
>
initial
use
count
"
)
;
if
(
searchString
!
=
input
)
{
Assert
.
strictEqual
(
await
getUseCount
(
{
input
:
searchString
}
)
undefined
"
Search
string
not
present
in
input
history
:
"
+
searchString
)
;
}
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesTestUtils
.
clearInputHistory
(
)
;
addToInputHistorySpy
.
resetHistory
(
)
;
}
}
)
;
add_task
(
async
function
notBumped_origin
(
)
{
let
url
=
"
http
:
/
/
example
.
com
/
test
"
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
url
)
;
}
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
await
triggerAutofillAndPickResult
(
"
exam
"
"
example
.
com
/
"
)
;
let
calls
=
addToInputHistorySpy
.
getCalls
(
)
;
Assert
.
equal
(
calls
.
length
0
"
UrlbarUtils
.
addToInputHistory
(
)
not
called
"
)
;
Assert
.
strictEqual
(
await
getUseCount
(
{
url
}
)
undefined
"
URL
not
present
in
input
history
:
"
+
url
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
notBumped_url
(
)
{
let
url
=
"
http
:
/
/
example
.
com
/
test
"
;
await
PlacesTestUtils
.
addVisits
(
url
)
;
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
await
triggerAutofillAndPickResult
(
"
example
.
com
/
t
"
"
example
.
com
/
test
"
)
;
let
calls
=
addToInputHistorySpy
.
getCalls
(
)
;
Assert
.
equal
(
calls
.
length
0
"
UrlbarUtils
.
addToInputHistory
(
)
not
called
"
)
;
Assert
.
strictEqual
(
await
getUseCount
(
{
url
}
)
undefined
"
URL
not
present
in
input
history
:
"
+
url
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
async
function
triggerAutofillAndPickResult
(
searchString
autofilledValue
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
"
Result
is
autofill
"
)
;
Assert
.
equal
(
gURLBar
.
value
autofilledValue
"
gURLBar
.
value
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
"
selectionStart
"
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
autofilledValue
.
length
"
selectionEnd
"
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
loadPromise
;
}
)
;
}
async
function
getUseCount
(
{
url
=
undefined
input
=
undefined
}
)
{
return
PlacesUtils
.
withConnectionWrapper
(
"
test
:
:
getUseCount
"
async
db
=
>
{
let
rows
;
if
(
input
&
&
url
)
{
rows
=
await
db
.
executeCached
(
SELECT
i
.
use_count
FROM
moz_inputhistory
i
JOIN
moz_places
h
ON
h
.
id
=
i
.
place_id
WHERE
h
.
url
=
:
url
AND
i
.
input
=
:
input
{
url
input
}
)
;
}
else
if
(
url
)
{
rows
=
await
db
.
executeCached
(
SELECT
i
.
use_count
FROM
moz_inputhistory
i
JOIN
moz_places
h
ON
h
.
id
=
i
.
place_id
WHERE
h
.
url
=
:
url
{
url
}
)
;
}
else
if
(
input
)
{
rows
=
await
db
.
executeCached
(
SELECT
use_count
FROM
moz_inputhistory
i
WHERE
input
=
:
input
{
input
}
)
;
}
return
rows
[
0
]
?
.
getResultByIndex
(
0
)
;
}
)
;
}
