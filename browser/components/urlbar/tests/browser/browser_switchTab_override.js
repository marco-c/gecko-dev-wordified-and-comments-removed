"
use
strict
"
;
const
TEST_URL
=
{
TEST_BASE_URL
}
dummy_page
.
html
;
add_task
(
async
function
test_switchtab_override
(
)
{
info
(
"
Opening
first
tab
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
info
(
"
Opening
and
selecting
second
tab
"
)
;
let
secondTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
registerCleanupFunction
(
(
)
=
>
{
try
{
gBrowser
.
removeTab
(
tab
)
;
gBrowser
.
removeTab
(
secondTab
)
;
}
catch
(
ex
)
{
}
}
)
;
info
(
"
Wait
for
autocomplete
"
)
;
await
promiseAutocompleteResultPopup
(
"
dummy_page
"
)
;
info
(
"
Select
second
autocomplete
popup
entry
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
UrlbarTestUtils
.
getSelectedIndex
(
window
)
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
)
;
const
allLabels
=
document
.
getElementById
(
"
urlbar
-
display
-
box
"
)
.
children
;
for
(
let
label
of
allLabels
)
{
if
(
label
.
id
=
=
"
switchtab
"
)
{
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
label
)
)
;
}
else
{
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
label
)
)
;
}
}
info
(
"
Override
switch
-
to
-
tab
"
)
;
let
deferred
=
PromiseUtils
.
defer
(
)
;
let
onTabSelect
=
event
=
>
{
deferred
.
reject
(
new
Error
(
"
Should
have
overridden
switch
to
tab
"
)
)
;
}
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
onTabSelect
)
;
registerCleanupFunction
(
(
)
=
>
{
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
onTabSelect
)
;
}
)
;
BrowserTestUtils
.
browserLoaded
(
secondTab
.
linkedBrowser
)
.
then
(
deferred
.
resolve
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Shift
"
{
type
:
"
keydown
"
}
)
;
for
(
let
label
of
allLabels
)
{
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
label
)
)
;
}
registerCleanupFunction
(
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Shift
"
{
type
:
"
keyup
"
}
)
;
}
)
;
let
attribute
=
UrlbarPrefs
.
get
(
"
quantumbar
"
)
?
"
actionoverride
"
:
"
noactions
"
;
Assert
.
ok
(
UrlbarTestUtils
.
getPanel
(
window
)
.
hasAttribute
(
attribute
)
"
We
should
be
overriding
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
info
(
gURLBar
.
value
=
{
gURLBar
.
value
}
)
;
await
deferred
.
promise
;
Assert
.
ok
(
!
UrlbarTestUtils
.
getPanel
(
window
)
.
hasAttribute
(
attribute
)
"
We
should
not
be
overriding
anymore
"
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
gBrowser
.
removeTab
(
tab
)
;
gBrowser
.
removeTab
(
secondTab
)
;
}
)
;
