"
use
strict
"
;
add_task
(
async
function
switchTabs
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quickactions
"
false
]
]
}
)
;
let
tabs
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
/
"
+
i
}
)
;
tabs
.
push
(
tab
)
;
}
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
0
]
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
1
]
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
0
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
oneoff
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
2
]
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
tab
2
"
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
}
)
;
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
0
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
oneoff
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
1
]
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
2
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
entry
:
"
oneoff
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
tab
2
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
{
clickClose
:
true
}
)
;
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
0
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
oneoff
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
2
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
tab
2
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
0
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
oneoff
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
{
clickClose
:
true
}
)
;
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
2
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
tab
2
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
0
]
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
Assert
.
equal
(
gURLBar
.
value
"
test
"
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
slow_load
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
false
]
]
}
)
;
const
engineName
=
"
Test
"
;
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
engineName
}
{
skipUnload
:
true
}
)
;
const
originalTab
=
gBrowser
.
selectedTab
;
const
newTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
engineName
}
)
;
const
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
newTab
.
linkedBrowser
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
originalTab
)
;
await
loadPromise
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
newTab
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
slow_load_guaranteed
(
)
{
const
engineName
=
"
Test
"
;
let
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
engineName
}
{
skipUnload
:
true
}
)
;
const
backgroundTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
backgroundTab
.
ownerGlobal
.
gURLBar
.
searchMode
=
{
engineName
}
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
backgroundTab
.
linkedBrowser
)
;
BrowserTestUtils
.
loadURIString
(
backgroundTab
.
linkedBrowser
"
http
:
/
/
example
.
com
/
?
search
=
test
"
)
;
await
loadPromise
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
backgroundTab
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
removeTab
(
backgroundTab
)
;
await
extension
.
unload
(
)
;
}
)
;
add_task
(
async
function
userTypedValue_empty
(
)
{
await
doUserTypedValueTest
(
"
"
)
;
}
)
;
add_task
(
async
function
userTypedValue_nonEmpty
(
)
{
await
doUserTypedValueTest
(
"
foo
bar
"
)
;
}
)
;
async
function
doUserTypedValueTest
(
searchString
)
{
let
value
=
{
UrlbarTokenizer
.
RESTRICT
.
BOOKMARK
}
{
searchString
}
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
typed
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
searchString
"
Sanity
check
:
Value
is
the
search
string
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
typed
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
searchString
"
Value
should
remain
the
search
string
after
switching
back
"
)
;
gURLBar
.
handleRevert
(
)
;
}
