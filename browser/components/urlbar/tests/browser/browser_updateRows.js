"
use
strict
"
;
let
TEST_BASE_URL
=
"
example
.
com
/
"
;
if
(
UrlbarPrefs
.
get
(
"
update1
.
view
.
stripHttps
"
)
)
{
TEST_BASE_URL
=
"
http
:
/
/
"
+
TEST_BASE_URL
;
}
add_task
(
async
function
init
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
urlToTip
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
example
.
com
/
testxx
"
"
http
:
/
/
example
.
com
/
test
"
]
)
;
let
provider
=
new
TestProvider
(
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
text
:
"
This
is
a
test
tip
.
"
buttonText
:
"
OK
"
helpUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
]
)
;
provider
.
isActive
=
context
=
>
context
.
searchString
=
=
"
testx
"
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
waitForFocus
}
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
URL
{
title
:
"
test
visit
for
http
:
/
/
example
.
com
/
test
"
tagsContainer
:
null
titleSeparator
:
null
action
:
"
"
url
:
TEST_BASE_URL
+
"
test
"
}
[
"
tipButton
"
"
helpButton
"
]
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
TIP
{
title
:
"
This
is
a
test
tip
.
"
tipButton
:
"
OK
"
helpButton
:
null
}
[
"
tagsContainer
"
"
titleSeparator
"
"
action
"
"
url
"
]
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
URL
{
title
:
"
test
visit
for
http
:
/
/
example
.
com
/
testxx
"
tagsContainer
:
null
titleSeparator
:
null
action
:
"
"
url
:
TEST_BASE_URL
+
"
testxx
"
}
[
"
tipButton
"
"
helpButton
"
]
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
TIP
{
title
:
"
This
is
a
test
tip
.
"
tipButton
:
"
OK
"
helpButton
:
null
}
[
"
tagsContainer
"
"
titleSeparator
"
"
action
"
"
url
"
]
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
tipToURL
(
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
testx
"
)
;
let
provider
=
new
TestProvider
(
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
text
:
"
This
is
a
test
tip
.
"
buttonText
:
"
OK
"
helpUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
]
)
;
provider
.
isActive
=
context
=
>
[
"
test
"
"
testxx
"
]
.
includes
(
context
.
searchString
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
waitForFocus
}
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
TIP
{
title
:
"
This
is
a
test
tip
.
"
tipButton
:
"
OK
"
helpButton
:
null
}
[
"
tagsContainer
"
"
titleSeparator
"
"
action
"
"
url
"
]
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
URL
{
title
:
"
test
visit
for
http
:
/
/
example
.
com
/
testx
"
tagsContainer
:
null
titleSeparator
:
null
action
:
"
"
url
:
TEST_BASE_URL
+
"
testx
"
}
[
"
tipButton
"
"
helpButton
"
]
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
TIP
{
title
:
"
This
is
a
test
tip
.
"
tipButton
:
"
OK
"
helpButton
:
null
}
[
"
tagsContainer
"
"
titleSeparator
"
"
action
"
"
url
"
]
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResult
(
1
UrlbarUtils
.
RESULT_TYPE
.
URL
{
title
:
"
test
visit
for
http
:
/
/
example
.
com
/
testx
"
tagsContainer
:
null
titleSeparator
:
null
action
:
"
"
url
:
TEST_BASE_URL
+
"
testx
"
}
[
"
tipButton
"
"
helpButton
"
]
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
async
function
checkResult
(
index
type
presentElements
absentElements
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
index
)
;
Assert
.
equal
(
result
.
type
type
"
Expected
result
type
"
)
;
for
(
let
[
name
value
]
of
Object
.
entries
(
presentElements
)
)
{
let
element
=
result
.
element
.
row
.
_elements
.
get
(
name
)
;
Assert
.
ok
(
element
{
name
}
should
be
present
)
;
if
(
typeof
value
=
=
"
string
"
)
{
Assert
.
equal
(
element
.
textContent
value
{
name
}
value
should
be
correct
)
;
}
}
for
(
let
name
of
absentElements
)
{
let
element
=
result
.
element
.
row
.
_elements
.
get
(
name
)
;
Assert
.
ok
(
!
element
{
name
}
should
be
absent
)
;
}
}
class
TestProvider
extends
UrlbarProvider
{
constructor
(
results
)
{
super
(
)
;
this
.
_results
=
results
;
}
get
name
(
)
{
return
"
TestProvider
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
context
)
{
return
true
;
}
async
startQuery
(
context
addCallback
)
{
for
(
const
result
of
this
.
_results
)
{
addCallback
(
this
result
)
;
}
}
cancelQuery
(
context
)
{
}
pickResult
(
result
)
{
}
}
