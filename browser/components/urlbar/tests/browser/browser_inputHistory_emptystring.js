"
use
strict
"
;
async
function
checkInputHistory
(
len
=
0
)
{
await
PlacesUtils
.
withConnectionWrapper
(
"
test
:
:
checkInputHistory
"
async
db
=
>
{
let
rows
=
await
db
.
executeCached
(
SELECT
input
FROM
moz_inputhistory
)
;
Assert
.
equal
(
rows
.
length
len
"
There
should
only
be
1
entry
"
)
;
if
(
len
)
{
Assert
.
equal
(
rows
[
0
]
.
getResultByIndex
(
0
)
"
"
"
Input
should
be
empty
"
)
;
}
}
)
;
}
const
TEST_URL
=
"
http
:
/
/
example
.
com
/
"
;
async
function
do_test
(
openFn
pickMethod
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
function
(
browser
)
{
await
PlacesTestUtils
.
clearInputHistory
(
)
;
await
openFn
(
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
let
promise
=
BrowserTestUtils
.
waitForDocLoadAndStopIt
(
TEST_URL
browser
)
;
if
(
pickMethod
=
=
"
keyboard
"
)
{
info
(
Test
pressing
Enter
)
;
EventUtils
.
sendKey
(
"
down
"
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
}
else
{
info
(
"
Test
with
click
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
EventUtils
.
synthesizeMouseAtCenter
(
result
.
element
.
row
{
}
)
;
}
await
promise
;
await
checkInputHistory
(
1
)
;
}
)
;
}
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
TEST_URL
)
;
}
await
updateTopSites
(
sites
=
>
sites
&
&
sites
[
0
]
&
&
sites
[
0
]
.
url
=
=
TEST_URL
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_history_no_search_terms
(
)
{
for
(
let
pickMethod
of
[
"
keyboard
"
"
mouse
"
]
)
{
for
(
let
openFn
of
[
(
)
=
>
{
info
(
"
Test
opening
panel
with
down
key
"
)
;
gURLBar
.
focus
(
)
;
EventUtils
.
sendKey
(
"
down
"
)
;
}
async
(
)
=
>
{
info
(
"
Test
opening
panel
on
focus
"
)
;
gURLBar
.
blur
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
textbox
{
}
)
;
}
async
(
)
=
>
{
info
(
"
Test
opening
panel
on
focus
on
a
page
"
)
;
let
selectedBrowser
=
gBrowser
.
selectedBrowser
;
BrowserTestUtils
.
loadURI
(
selectedBrowser
"
http
:
/
/
example
.
org
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
selectedBrowser
)
;
gURLBar
.
blur
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
textbox
{
}
)
;
}
]
)
{
await
do_test
(
openFn
pickMethod
)
;
}
}
}
)
;
