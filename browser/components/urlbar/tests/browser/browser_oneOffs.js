const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
let
gMaxResults
;
let
engine
;
XPCOMUtils
.
defineLazyGetter
(
this
"
oneOffSearchButtons
"
(
)
=
>
{
return
UrlbarTestUtils
.
getOneOffSearchButtons
(
window
)
;
}
)
;
add_task
(
async
function
init
(
)
{
gMaxResults
=
Services
.
prefs
.
getIntPref
(
"
browser
.
urlbar
.
maxRichResults
"
)
;
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
false
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
update2
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
for
(
let
i
=
0
;
i
<
gMaxResults
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
i
)
;
}
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
1
)
)
;
}
await
updateTopSites
(
sites
=
>
{
return
sites
&
&
sites
[
0
]
&
&
sites
[
0
]
.
url
.
startsWith
(
"
http
:
/
/
example
.
com
/
"
)
;
}
)
;
}
)
;
add_task
(
async
function
topSitesView
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
fireInputEvent
:
true
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getOneOffSearchButtonsVisible
(
window
)
false
"
One
-
offs
should
be
hidden
"
)
;
await
hidePopup
(
)
;
}
)
;
add_task
(
async
function
topSitesViewUpdate2
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
true
]
]
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
fireInputEvent
:
true
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
oneOffSearchButtons
.
_rebuilding
"
Waiting
for
one
-
offs
to
finish
rebuilding
"
)
;
let
resultURL
=
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
1
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
1
"
Result
count
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getOneOffSearchButtonsVisible
(
window
)
true
"
One
-
offs
are
visible
"
)
;
assertState
(
-
1
-
1
"
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertState
(
0
-
1
resultURL
)
;
let
numButtons
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
.
length
;
for
(
let
i
=
0
;
i
<
numButtons
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertState
(
-
1
i
"
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertState
(
-
1
-
1
"
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertState
(
0
-
1
resultURL
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
-
1
-
1
"
"
)
;
for
(
let
i
=
numButtons
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
-
1
i
"
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
0
-
1
resultURL
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
-
1
-
1
"
"
)
;
await
hidePopup
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
editedView
(
)
{
let
typedValue
=
"
browser_urlbarOneOffs
"
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
gMaxResults
-
1
)
;
let
heuristicResult
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
assertState
(
0
-
1
typedValue
)
;
for
(
let
i
=
0
;
i
<
gMaxResults
-
1
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertState
(
i
+
1
-
1
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
i
-
1
)
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_visible
(
heuristicResult
.
element
.
action
)
"
The
heuristic
action
should
not
be
visible
"
)
;
}
let
numButtons
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
.
length
;
for
(
let
i
=
0
;
i
<
numButtons
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertState
(
-
1
i
typedValue
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
heuristicResult
.
element
.
action
)
!
oneOffSearchButtons
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
-
compact
"
)
"
The
heuristic
action
should
be
visible
when
a
one
-
off
button
is
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertState
(
0
-
1
typedValue
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
heuristicResult
.
element
.
action
)
"
The
heuristic
action
should
be
visible
"
)
;
for
(
let
i
=
numButtons
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
-
1
i
typedValue
)
;
Assert
.
equal
(
BrowserTestUtils
.
is_visible
(
heuristicResult
.
element
.
action
)
!
oneOffSearchButtons
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
-
compact
"
)
"
The
heuristic
action
should
be
visible
when
a
one
-
off
button
is
selected
"
)
;
}
for
(
let
i
=
gMaxResults
-
2
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
i
+
1
-
1
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
i
-
1
)
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_visible
(
heuristicResult
.
element
.
action
)
"
The
heuristic
action
should
not
be
visible
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
0
-
1
typedValue
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
heuristicResult
.
element
.
action
)
"
The
heuristic
action
should
be
visible
"
)
;
await
hidePopup
(
)
;
}
)
;
add_task
(
async
function
searchWith
(
)
{
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
oldSuggestPref
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
true
)
;
let
typedValue
=
"
foo
"
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
}
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
assertState
(
0
-
1
typedValue
)
;
Assert
.
equal
(
result
.
displayed
.
action
"
Search
with
"
+
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Sanity
check
:
first
result
'
s
action
text
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
repeat
:
2
}
)
;
assertState
(
0
1
typedValue
)
;
let
engineName
=
oneOffSearchButtons
.
selectedButton
.
engine
.
name
;
Assert
.
notEqual
(
engineName
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Sanity
check
:
Second
one
-
off
engine
should
not
be
the
current
engine
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
displayed
.
action
"
Search
with
"
+
engineName
"
First
result
'
s
action
text
should
be
updated
"
)
;
for
(
let
refresh
of
[
true
false
]
)
{
UrlbarPrefs
.
set
(
"
update2
"
refresh
)
;
UrlbarPrefs
.
set
(
"
update2
.
oneOffsRefresh
"
refresh
)
;
await
hidePopup
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
assertState
(
1
-
1
typedValue
+
"
foo
"
)
;
Assert
.
equal
(
result
.
displayed
.
action
"
Search
with
"
+
engine
.
name
"
Sanity
check
:
second
result
'
s
action
text
"
)
;
Assert
.
ok
(
!
result
.
heuristic
"
The
second
result
is
not
heuristic
.
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
repeat
:
2
}
)
;
assertState
(
1
1
typedValue
+
"
foo
"
)
;
engineName
=
oneOffSearchButtons
.
selectedButton
.
engine
.
name
;
Assert
.
notEqual
(
engineName
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Sanity
check
:
Second
one
-
off
engine
should
not
be
the
current
engine
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
if
(
refresh
)
{
Assert
.
equal
(
result
.
displayed
.
action
"
Search
with
"
+
(
await
Services
.
search
.
getDefault
(
)
)
.
name
"
Second
result
'
s
action
text
should
be
the
same
"
)
;
}
else
{
Assert
.
equal
(
result
.
displayed
.
action
"
Search
with
"
+
engineName
"
Second
result
'
s
action
text
should
be
updated
"
)
;
}
}
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
oldSuggestPref
)
;
await
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
await
hidePopup
(
)
;
}
)
;
add_task
(
async
function
oneOffClick
(
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
let
typedValue
=
"
foo
.
bar
"
;
for
(
let
refresh
of
[
true
false
]
)
{
UrlbarPrefs
.
set
(
"
update2
"
refresh
)
;
UrlbarPrefs
.
set
(
"
update2
.
oneOffsRefresh
"
refresh
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
}
)
;
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
assertState
(
0
-
1
typedValue
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
if
(
refresh
)
{
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
}
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
still
open
.
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isInSearchMode
(
window
oneOffs
[
0
]
.
engine
.
name
)
"
The
Urlbar
is
in
search
mode
.
"
)
;
window
.
gURLBar
.
setSearchMode
(
null
)
;
}
else
{
let
resultsPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
false
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
.
bar
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
}
)
;
await
resultsPromise
;
}
}
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
add_task
(
async
function
oneOffReturn
(
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
let
typedValue
=
"
foo
.
bar
"
;
for
(
let
refresh
of
[
true
false
]
)
{
UrlbarPrefs
.
set
(
"
update2
"
refresh
)
;
UrlbarPrefs
.
set
(
"
update2
.
oneOffsRefresh
"
refresh
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
assertState
(
0
-
1
typedValue
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
assertState
(
0
0
typedValue
)
;
if
(
refresh
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
still
open
.
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isInSearchMode
(
window
oneOffs
[
0
]
.
engine
.
name
)
"
The
Urlbar
is
in
search
mode
.
"
)
;
window
.
gURLBar
.
setSearchMode
(
null
)
;
}
else
{
let
resultsPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
false
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
.
bar
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
resultsPromise
;
}
}
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
add_task
(
async
function
hiddenOneOffs
(
)
{
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
engines
=
(
await
Services
.
search
.
getVisibleEngines
(
)
)
.
filter
(
e
=
>
e
.
name
!
=
defaultEngine
.
name
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
hiddenOneOffs
"
engines
.
map
(
e
=
>
e
.
name
)
.
join
(
"
"
)
]
]
}
)
;
let
typedValue
=
"
foo
"
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
assertState
(
0
-
1
)
;
Assert
.
equal
(
getComputedStyle
(
oneOffSearchButtons
.
container
)
.
display
"
none
"
"
The
one
-
off
buttons
should
be
hidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
assertState
(
1
-
1
)
;
await
hidePopup
(
)
;
}
)
;
add_task
(
async
function
hiddenWhenUsingSearchAlias
(
)
{
let
typedValue
=
"
example
"
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getOneOffSearchButtonsVisible
(
window
)
false
"
Should
not
be
showing
the
one
-
off
buttons
"
)
;
await
hidePopup
(
)
;
typedValue
=
"
not
an
engine
alias
"
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
typedValue
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getOneOffSearchButtonsVisible
(
window
)
true
"
Should
be
showing
the
one
-
off
buttons
"
)
;
await
hidePopup
(
)
;
}
)
;
function
assertState
(
result
oneOff
textValue
=
undefined
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
result
"
Expected
result
should
be
selected
"
)
;
Assert
.
equal
(
oneOffSearchButtons
.
selectedButtonIndex
oneOff
"
Expected
one
-
off
should
be
selected
"
)
;
if
(
textValue
!
=
=
undefined
)
{
Assert
.
equal
(
gURLBar
.
value
textValue
"
Expected
value
"
)
;
}
}
function
hidePopup
(
)
{
return
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
)
;
}
