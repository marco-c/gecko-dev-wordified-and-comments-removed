"
use
strict
"
;
const
RESULT_INDEX
=
2
;
const
DISMISS_ONE_COMMAND
=
"
dismiss
-
one
"
;
const
DISMISS_ALL_COMMAND
=
"
dismiss
-
all
"
;
const
FEEDBACK_COMMAND
=
"
show_less_frequently
"
;
let
gTestProvider
;
add_setup
(
async
function
(
)
{
gTestProvider
=
new
TestProvider
(
{
results
:
[
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
payload
:
{
url
:
"
https
:
/
/
example
.
com
/
"
isBlockable
:
true
}
suggestedIndex
:
1
isSuggestedIndexRelativeToGroup
:
true
}
)
]
}
)
;
gTestProvider
.
commandCount
=
{
}
;
UrlbarProvidersManager
.
registerProvider
(
gTestProvider
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
https
:
/
/
example
.
com
/
aaa
"
"
https
:
/
/
example
.
com
/
bbb
"
]
)
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarProvidersManager
.
unregisterProvider
(
gTestProvider
)
;
}
)
;
}
)
;
add_task
(
async
function
acknowledgeDismissal_rowNotSelected
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
doDismissTest
(
{
command
:
DISMISS_ONE_COMMAND
shouldBeSelected
:
false
}
)
;
}
)
;
add_task
(
async
function
acknowledgeDismissal_rowSelected
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
gURLBar
.
view
.
selectedRowIndex
=
RESULT_INDEX
;
await
doDismissTest
(
{
command
:
DISMISS_ONE_COMMAND
shouldBeSelected
:
true
}
)
;
}
)
;
add_task
(
async
function
acknowledgeFeedbackAndDismissal
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
RESULT_INDEX
)
;
await
UrlbarTestUtils
.
openResultMenuAndClickItem
(
window
FEEDBACK_COMMAND
{
resultIndex
:
RESULT_INDEX
}
)
;
Assert
.
equal
(
gTestProvider
.
commandCount
[
FEEDBACK_COMMAND
]
1
"
One
feedback
command
should
have
happened
"
)
;
gTestProvider
.
commandCount
[
FEEDBACK_COMMAND
]
=
0
;
Assert
.
ok
(
gURLBar
.
view
.
isOpen
"
The
view
should
remain
open
clicking
the
command
"
)
;
Assert
.
ok
(
details
.
element
.
row
.
hasAttribute
(
"
feedback
-
acknowledgment
"
)
"
Row
should
have
feedback
acknowledgment
after
clicking
command
"
)
;
info
(
"
Doing
dismissal
"
)
;
await
doDismissTest
(
{
command
:
DISMISS_ONE_COMMAND
shouldBeSelected
:
true
}
)
;
}
)
;
add_task
(
async
function
acknowledgeDismissal_all
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
doDismissTest
(
{
command
:
DISMISS_ALL_COMMAND
shouldBeSelected
:
false
}
)
;
}
)
;
add_task
(
async
function
acknowledgeDismissal_rowLabel
(
)
{
let
{
suggestedIndex
}
=
gTestProvider
.
results
[
0
]
;
gTestProvider
.
results
[
0
]
.
suggestedIndex
=
0
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
doDismissTest
(
{
resultIndex
:
1
command
:
DISMISS_ALL_COMMAND
shouldBeSelected
:
false
expectedLabelOnOriginalRow
:
"
Firefox
Suggest
"
}
)
;
gTestProvider
.
results
[
0
]
.
suggestedIndex
=
suggestedIndex
;
}
)
;
add_task
(
async
function
acknowledgeDismissal_hideRowLabel
(
)
{
let
{
suggestedIndex
}
=
gTestProvider
.
results
[
0
]
;
gTestProvider
.
results
[
0
]
.
suggestedIndex
=
0
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
checkRowLabel
(
1
"
Firefox
Suggest
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gTestProvider
.
results
[
0
]
.
hideRowLabel
=
true
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
checkRowLabel
(
1
null
)
;
await
checkRowLabel
(
2
"
Firefox
Suggest
"
)
;
await
doDismissTest
(
{
resultIndex
:
1
command
:
DISMISS_ALL_COMMAND
shouldBeSelected
:
false
expectedLabelOnOriginalRow
:
null
expectedLabelOnReplacementRow
:
"
Firefox
Suggest
"
}
)
;
gTestProvider
.
results
[
0
]
.
suggestedIndex
=
suggestedIndex
;
delete
gTestProvider
.
results
[
0
]
.
hideRowLabel
;
}
)
;
async
function
doDismissTest
(
{
command
shouldBeSelected
resultIndex
=
2
expectedLabelOnOriginalRow
=
null
expectedLabelOnReplacementRow
=
expectedLabelOnOriginalRow
}
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
resultIndex
)
;
Assert
.
equal
(
details
.
result
.
providerName
gTestProvider
.
name
"
The
test
result
should
be
at
the
expected
index
"
)
;
if
(
details
.
result
.
providerName
!
=
gTestProvider
.
name
)
{
return
;
}
let
selectedElement
=
gURLBar
.
view
.
selectedElement
;
Assert
.
ok
(
selectedElement
"
There
should
be
an
initially
selected
element
"
)
;
if
(
shouldBeSelected
)
{
Assert
.
equal
(
gURLBar
.
view
.
selectedRowIndex
resultIndex
"
The
test
result
should
be
selected
"
)
;
}
else
{
Assert
.
notEqual
(
gURLBar
.
view
.
selectedRowIndex
resultIndex
"
The
test
result
should
not
be
selected
"
)
;
}
info
(
"
Checking
the
row
label
on
the
original
row
"
)
;
await
checkRowLabel
(
resultIndex
expectedLabelOnOriginalRow
)
;
let
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
await
UrlbarTestUtils
.
openResultMenuAndClickItem
(
window
command
{
resultIndex
openByMouse
:
true
}
)
;
Assert
.
equal
(
gTestProvider
.
commandCount
[
command
]
1
"
One
dismissal
should
have
happened
"
)
;
gTestProvider
.
commandCount
[
command
]
=
0
;
Assert
.
ok
(
gURLBar
.
view
.
isOpen
"
The
view
should
remain
open
after
dismissal
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
resultCount
"
The
result
count
should
not
haved
changed
after
dismissal
"
)
;
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
resultIndex
)
;
Assert
.
equal
(
details
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
"
Row
should
be
a
tip
after
dismissal
"
)
;
Assert
.
equal
(
details
.
result
.
payload
.
type
"
dismissalAcknowledgment
"
"
Tip
type
should
be
dismissalAcknowledgment
"
)
;
Assert
.
equal
(
details
.
displayed
.
title
command
=
=
DISMISS_ONE_COMMAND
?
"
Thanks
for
your
feedback
.
You
won
t
see
this
suggestion
again
.
"
:
"
Thanks
for
your
feedback
.
You
won
t
see
these
suggestions
anymore
.
"
"
Tip
text
should
be
correct
for
the
dismiss
type
"
)
;
Assert
.
ok
(
!
details
.
element
.
row
.
hasAttribute
(
"
selected
"
)
"
Row
should
not
have
'
selected
'
attribute
"
)
;
Assert
.
ok
(
!
details
.
element
.
row
.
_content
.
hasAttribute
(
"
selected
"
)
"
Row
-
inner
should
not
have
'
selected
'
attribute
"
)
;
Assert
.
ok
(
!
details
.
element
.
row
.
hasAttribute
(
"
feedback
-
acknowledgment
"
)
"
Row
should
not
have
feedback
acknowledgment
after
dismissal
"
)
;
info
(
"
Checking
the
row
label
on
the
dismissal
acknowledgment
tip
"
)
;
await
checkRowLabel
(
resultIndex
expectedLabelOnOriginalRow
)
;
let
gotItButton
=
UrlbarTestUtils
.
getButtonForResultIndex
(
window
"
0
"
resultIndex
)
;
Assert
.
ok
(
gotItButton
"
Row
should
have
a
'
Got
it
'
button
"
)
;
if
(
shouldBeSelected
)
{
Assert
.
equal
(
gURLBar
.
view
.
selectedElement
gotItButton
"
The
'
Got
it
'
button
should
be
selected
"
)
;
}
else
{
Assert
.
notEqual
(
gURLBar
.
view
.
selectedElement
gotItButton
"
The
'
Got
it
'
button
should
not
be
selected
"
)
;
Assert
.
equal
(
gURLBar
.
view
.
selectedElement
selectedElement
"
The
initially
selected
element
should
remain
selected
"
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gotItButton
{
}
window
)
;
Assert
.
ok
(
gURLBar
.
view
.
isOpen
"
The
view
should
remain
open
clicking
the
'
Got
it
'
button
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
resultCount
-
1
"
The
result
count
should
be
one
less
after
clicking
'
Got
it
'
button
"
)
;
for
(
let
i
=
0
;
i
<
UrlbarTestUtils
.
getResultCount
(
window
)
;
i
+
+
)
{
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
ok
(
details
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
TIP
&
&
details
.
result
.
providerName
!
=
gTestProvider
.
name
"
Tip
result
and
test
result
should
not
be
present
"
)
;
}
info
(
"
Checking
the
row
label
on
the
row
that
replaced
the
dismissal
acknowledgment
tip
"
)
;
await
checkRowLabel
(
resultIndex
expectedLabelOnReplacementRow
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
class
TestProvider
extends
UrlbarTestUtils
.
TestProvider
{
getResultCommands
(
_result
)
{
return
[
{
name
:
FEEDBACK_COMMAND
l10n
:
{
id
:
"
urlbar
-
result
-
menu
-
report
-
inaccurate
-
location
"
}
}
{
name
:
DISMISS_ONE_COMMAND
l10n
:
{
id
:
"
firefox
-
suggest
-
command
-
not
-
interested
"
}
}
{
name
:
DISMISS_ALL_COMMAND
l10n
:
{
id
:
"
firefox
-
suggest
-
command
-
not
-
interested
"
}
}
]
;
}
onEngagement
(
queryContext
controller
details
)
{
if
(
details
.
result
?
.
providerName
=
=
this
.
name
)
{
let
{
selType
}
=
details
;
info
(
onEngagement
called
selType
=
+
selType
)
;
if
(
!
this
.
commandCount
.
hasOwnProperty
(
selType
)
)
{
this
.
commandCount
[
selType
]
=
0
;
}
this
.
commandCount
[
selType
]
+
+
;
switch
(
selType
)
{
case
FEEDBACK_COMMAND
:
controller
.
view
.
acknowledgeFeedback
(
details
.
result
)
;
break
;
case
DISMISS_ONE_COMMAND
:
details
.
result
.
acknowledgeDismissalL10n
=
{
id
:
"
firefox
-
suggest
-
dismissal
-
acknowledgment
-
one
"
}
;
controller
.
removeResult
(
details
.
result
)
;
break
;
case
DISMISS_ALL_COMMAND
:
details
.
result
.
acknowledgeDismissalL10n
=
{
id
:
"
urlbar
-
result
-
dismissal
-
acknowledgment
-
all
"
}
;
controller
.
removeResult
(
details
.
result
)
;
break
;
}
}
}
}
async
function
checkRowLabel
(
resultIndex
expectedLabel
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
resultIndex
)
;
let
{
row
}
=
details
.
element
;
let
before
=
getComputedStyle
(
row
"
:
:
before
"
)
;
if
(
expectedLabel
)
{
Assert
.
equal
(
before
.
content
"
attr
(
label
)
"
"
:
:
before
content
should
use
the
row
label
"
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
label
"
)
expectedLabel
"
Row
should
have
the
expected
label
attribute
"
)
;
}
else
{
Assert
.
equal
(
before
.
content
"
none
"
"
:
:
before
content
should
be
'
none
'
"
)
;
Assert
.
ok
(
!
row
.
hasAttribute
(
"
label
"
)
"
Row
should
not
have
a
label
attribute
"
)
;
}
}
