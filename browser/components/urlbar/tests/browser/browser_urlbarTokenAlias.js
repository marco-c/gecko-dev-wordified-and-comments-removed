"
use
strict
"
;
const
ALIAS
=
"
test
"
;
add_task
(
async
function
init
(
)
{
await
Services
.
search
.
addEngineWithDetails
(
"
Test
"
{
alias
:
ALIAS
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
registerCleanupFunction
(
async
function
(
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
"
Test
"
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testNoRevert
(
)
{
await
doSimpleTest
(
false
)
;
}
)
;
add_task
(
async
function
testRevert
(
)
{
await
doSimpleTest
(
true
)
;
}
)
;
add_task
(
async
function
spacesBeforeAlias
(
)
{
gURLBar
.
search
(
"
"
+
ALIAS
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
charsBeforeAlias
(
)
{
gURLBar
.
search
(
"
not
an
alias
"
+
ALIAS
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
restrictionCharBeforeAlias
(
)
{
gURLBar
.
search
(
UrlbarTokenizer
.
RESTRICT
.
BOOKMARK
+
"
"
+
ALIAS
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
aliasCase
(
)
{
let
alias
=
"
TeSt
"
;
gURLBar
.
search
(
alias
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
alias
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
inputDoesntMatchHeuristicResult
(
)
{
let
searchString
=
{
ALIAS
}
aaa
;
gURLBar
.
search
(
searchString
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
let
value
=
{
ALIAS
}
xxx
;
gURLBar
.
value
=
{
ALIAS
}
xxx
;
Assert
.
equal
(
gURLBar
.
untrimmedValue
value
)
;
Assert
.
ok
(
gURLBar
.
untrimmedValue
.
includes
(
ALIAS
)
)
;
assertHighlighted
(
false
ALIAS
)
;
searchString
=
{
ALIAS
}
bbb
;
gURLBar
.
search
(
searchString
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
value
=
bbb
{
ALIAS
}
;
gURLBar
.
value
=
bbb
{
ALIAS
}
;
Assert
.
equal
(
gURLBar
.
untrimmedValue
value
)
;
Assert
.
ok
(
gURLBar
.
untrimmedValue
.
includes
(
ALIAS
)
)
;
assertHighlighted
(
false
ALIAS
)
;
gURLBar
.
search
(
"
"
)
;
}
)
;
add_task
(
async
function
nonHeuristicAliases
(
)
{
let
tokenEngines
=
[
]
;
for
(
let
engine
of
await
Services
.
search
.
getEngines
(
)
)
{
let
aliases
=
[
]
;
if
(
engine
.
alias
)
{
aliases
.
push
(
engine
.
alias
)
;
}
aliases
.
push
(
.
.
.
engine
.
wrappedJSObject
.
_internalAliases
)
;
let
tokenAliases
=
aliases
.
filter
(
a
=
>
a
.
startsWith
(
"
"
)
)
;
if
(
tokenAliases
.
length
)
{
tokenEngines
.
push
(
{
engine
tokenAliases
}
)
;
}
}
if
(
!
tokenEngines
.
length
)
{
Assert
.
ok
(
true
"
No
token
alias
engines
skipping
task
.
"
)
;
return
;
}
info
(
"
Got
token
alias
engines
:
"
+
tokenEngines
.
map
(
(
{
engine
}
)
=
>
engine
.
name
)
)
;
gURLBar
.
search
(
"
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
tokenEngines
.
length
-
1
)
;
for
(
let
{
tokenAliases
}
of
tokenEngines
)
{
let
alias
=
tokenAliases
[
0
]
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
assertHighlighted
(
true
alias
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
nonTokenAlias
(
)
{
let
alias
=
"
nontokenalias
"
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Test
"
)
;
engine
.
alias
=
"
nontokenalias
"
;
Assert
.
equal
(
engine
.
alias
alias
)
;
gURLBar
.
search
(
alias
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertFirstResultIsAlias
(
true
alias
)
;
assertHighlighted
(
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
engine
.
alias
=
ALIAS
;
}
)
;
add_task
(
async
function
clickAndFillAlias
(
)
{
gURLBar
.
search
(
"
"
)
;
await
promiseSearchComplete
(
)
;
let
testEngineItem
;
for
(
let
i
=
0
;
!
testEngineItem
;
i
+
+
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
if
(
details
.
searchParams
&
&
details
.
searchParams
.
keyword
=
=
ALIAS
)
{
testEngineItem
=
await
waitForAutocompleteResultAt
(
i
)
;
}
}
EventUtils
.
synthesizeMouseAtCenter
(
testEngineItem
{
}
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
Assert
.
equal
(
gURLBar
.
value
{
ALIAS
}
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
Assert
.
equal
(
gURLBar
.
value
{
ALIAS
}
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
enterAndFillAlias
(
)
{
gURLBar
.
search
(
"
"
)
;
await
promiseSearchComplete
(
)
;
let
index
=
0
;
for
(
;
;
index
+
+
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
index
)
;
if
(
details
.
searchParams
&
&
details
.
searchParams
.
keyword
=
=
ALIAS
)
{
index
+
+
;
break
;
}
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
repeat
:
index
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
Assert
.
equal
(
gURLBar
.
value
{
ALIAS
}
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
Assert
.
equal
(
gURLBar
.
value
{
ALIAS
}
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
enterAutofillsAlias
(
)
{
let
expectedString
=
{
ALIAS
}
;
for
(
let
value
of
[
ALIAS
.
substring
(
0
ALIAS
.
length
-
1
)
ALIAS
]
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
selectionStart
:
value
.
length
selectionEnd
:
value
.
length
}
)
;
await
waitForAutocompleteResultAt
(
0
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
waitForAutocompleteResultAt
(
0
)
;
Assert
.
equal
(
gURLBar
.
value
expectedString
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
expectedString
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
expectedString
.
length
)
;
await
assertAlias
(
true
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
async
function
doSimpleTest
(
revertBetweenSteps
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
autoFill
"
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
"
)
;
}
)
;
await
promiseAutocompleteResultPopup
(
ALIAS
.
substr
(
0
ALIAS
.
length
-
1
)
window
true
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
false
)
;
if
(
revertBetweenSteps
)
{
gURLBar
.
handleRevert
(
)
;
gURLBar
.
blur
(
)
;
}
await
promiseAutocompleteResultPopup
(
ALIAS
window
true
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
if
(
revertBetweenSteps
)
{
gURLBar
.
handleRevert
(
)
;
gURLBar
.
blur
(
)
;
}
await
promiseAutocompleteResultPopup
(
ALIAS
+
"
foo
"
window
true
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
if
(
revertBetweenSteps
)
{
gURLBar
.
handleRevert
(
)
;
gURLBar
.
blur
(
)
;
}
await
promiseAutocompleteResultPopup
(
ALIAS
window
true
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
true
)
;
if
(
revertBetweenSteps
)
{
gURLBar
.
handleRevert
(
)
;
gURLBar
.
blur
(
)
;
}
await
promiseAutocompleteResultPopup
(
ALIAS
.
substr
(
0
ALIAS
.
length
-
1
)
window
true
)
;
await
waitForAutocompleteResultAt
(
0
)
;
await
assertAlias
(
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
"
)
;
}
async
function
assertAlias
(
aliasPresent
expectedAlias
=
ALIAS
)
{
await
assertFirstResultIsAlias
(
aliasPresent
expectedAlias
)
;
assertHighlighted
(
aliasPresent
expectedAlias
)
;
}
async
function
assertFirstResultIsAlias
(
isAlias
expectedAlias
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Should
have
the
correct
type
"
)
;
Assert
.
equal
(
"
keyword
"
in
result
.
searchParams
&
&
!
!
result
.
searchParams
.
keyword
isAlias
"
Should
have
a
keyword
if
expected
"
)
;
if
(
isAlias
)
{
Assert
.
equal
(
result
.
searchParams
.
keyword
expectedAlias
"
Should
have
the
correct
keyword
"
)
;
}
}
function
assertHighlighted
(
highlighted
expectedAlias
)
{
let
selection
=
gURLBar
.
editor
.
selectionController
.
getSelection
(
Ci
.
nsISelectionController
.
SELECTION_FIND
)
;
Assert
.
ok
(
selection
)
;
if
(
!
highlighted
)
{
Assert
.
equal
(
selection
.
rangeCount
0
)
;
return
;
}
Assert
.
equal
(
selection
.
rangeCount
1
)
;
let
index
=
gURLBar
.
value
.
indexOf
(
expectedAlias
)
;
Assert
.
ok
(
index
>
=
0
gURLBar
.
value
=
"
{
gURLBar
.
value
}
"
expectedAlias
=
"
{
expectedAlias
}
"
)
;
let
range
=
selection
.
getRangeAt
(
0
)
;
Assert
.
ok
(
range
)
;
Assert
.
equal
(
range
.
startOffset
index
)
;
Assert
.
equal
(
range
.
endOffset
index
+
expectedAlias
.
length
)
;
}
add_task
(
async
function
hiddenEngine
(
)
{
await
promiseAutocompleteResultPopup
(
"
"
window
true
)
;
const
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
foundDefaultEngineInPopup
=
false
;
for
(
let
i
=
0
;
i
<
UrlbarTestUtils
.
getResultCount
(
window
)
;
i
+
+
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
if
(
defaultEngine
.
name
=
=
details
.
searchParams
.
engine
)
{
foundDefaultEngineInPopup
=
true
;
break
;
}
}
Assert
.
ok
(
foundDefaultEngineInPopup
"
Default
engine
appears
in
the
popup
.
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
defaultEngine
.
hidden
=
true
;
await
promiseAutocompleteResultPopup
(
"
"
window
true
)
;
foundDefaultEngineInPopup
=
false
;
for
(
let
i
=
0
;
i
<
UrlbarTestUtils
.
getResultCount
(
window
)
;
i
+
+
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
if
(
defaultEngine
.
name
=
=
details
.
searchParams
.
engine
)
{
foundDefaultEngineInPopup
=
true
;
break
;
}
}
Assert
.
ok
(
!
foundDefaultEngineInPopup
"
Hidden
default
engine
does
not
appear
in
the
popup
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
defaultEngine
.
hidden
=
false
;
}
)
;
add_task
(
async
function
hiddenEngine
(
)
{
await
promiseAutocompleteResultPopup
(
"
"
window
true
)
;
const
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
foundDefaultEngineInPopup
=
false
;
for
(
let
i
=
0
;
i
<
UrlbarTestUtils
.
getResultCount
(
window
)
;
i
+
+
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
if
(
defaultEngine
.
name
=
=
details
.
searchParams
.
engine
)
{
foundDefaultEngineInPopup
=
true
;
break
;
}
}
Assert
.
ok
(
foundDefaultEngineInPopup
"
Default
engine
appears
in
the
popup
.
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
defaultEngine
.
hidden
=
true
;
await
promiseAutocompleteResultPopup
(
"
"
window
true
)
;
foundDefaultEngineInPopup
=
false
;
for
(
let
i
=
0
;
i
<
UrlbarTestUtils
.
getResultCount
(
window
)
;
i
+
+
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
if
(
defaultEngine
.
name
=
=
details
.
searchParams
.
engine
)
{
foundDefaultEngineInPopup
=
true
;
break
;
}
}
Assert
.
ok
(
!
foundDefaultEngineInPopup
"
Hidden
default
engine
does
not
appear
in
the
popup
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
defaultEngine
.
hidden
=
false
;
}
)
;
