"
use
strict
"
;
const
{
SearchSERPTelemetry
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
)
;
const
SCALAR_URLBAR_PERSISTED
=
"
browser
.
engagement
.
navigation
.
urlbar_persisted
"
;
const
SEARCH_STRING
=
"
chocolate
"
;
let
testEngine
;
add_setup
(
async
(
)
=
>
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
let
cleanup
=
await
installPersistTestEngines
(
)
;
testEngine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
cleanup
(
)
;
}
)
;
}
)
;
async
function
searchForString
(
searchString
tab
)
{
info
(
Search
for
string
:
{
searchString
}
.
)
;
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
testEngine
searchString
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
expectedSearchUrl
)
;
gURLBar
.
focus
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
searchString
fireInputEvent
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
browserLoadedPromise
;
info
(
Loaded
page
:
{
expectedSearchUrl
}
)
;
return
expectedSearchUrl
;
}
async
function
gotoUrl
(
url
tab
)
{
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
url
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
url
)
;
await
browserLoadedPromise
;
info
(
Loaded
page
:
{
url
}
)
;
await
TestUtils
.
waitForTick
(
)
;
}
async
function
goBack
(
browser
url
)
{
info
(
Go
back
to
{
url
}
)
;
let
promise
=
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
selectedBrowser
?
.
currentURI
?
.
spec
=
=
url
"
Waiting
for
the
expected
page
to
load
"
)
;
browser
.
goBack
(
)
;
await
promise
;
}
function
assertScalarSearchEnter
(
number
)
{
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
SCALAR_URLBAR_PERSISTED
"
search_enter
"
number
)
;
}
function
assertScalarDoesNotExist
(
scalar
)
{
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
Assert
.
ok
(
!
(
scalar
in
scalars
)
scalar
+
"
must
not
be
recorded
.
"
)
;
}
add_task
(
async
function
search_after_search
(
)
{
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
searchForString
(
SEARCH_STRING
tab
)
;
await
assertScalarDoesNotExist
(
SCALAR_URLBAR_PERSISTED
)
;
await
searchForString
(
SEARCH_STRING
tab
)
;
assertScalarSearchEnter
(
1
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
Example
.
urlbar
-
persisted
"
1
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
switch_to_tab_and_search
(
)
{
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
searchForString
(
SEARCH_STRING
tab1
)
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
gotoUrl
(
"
https
:
/
/
test1
.
example
.
com
/
"
tab2
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
searchForString
(
SEARCH_STRING
tab1
)
;
assertScalarSearchEnter
(
1
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
Example
.
urlbar
-
persisted
"
1
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
search_and_go_back_and_search_again
(
)
{
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
let
serpUrl
=
await
searchForString
(
SEARCH_STRING
tab
)
;
await
gotoUrl
(
"
https
:
/
/
test2
.
example
.
com
/
"
tab
)
;
await
goBack
(
tab
.
linkedBrowser
serpUrl
)
;
await
assertScalarDoesNotExist
(
SCALAR_URLBAR_PERSISTED
)
;
await
searchForString
(
SEARCH_STRING
tab
)
;
assertScalarSearchEnter
(
1
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
Example
.
urlbar
-
persisted
"
1
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
