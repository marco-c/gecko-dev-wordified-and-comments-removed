"
use
strict
"
;
const
TEST_VALUE
=
"
example
.
com
/
\
xF7
?
\
xF7
"
;
const
START_VALUE
=
"
example
.
com
/
%
C3
%
B7
?
%
C3
%
B7
"
;
add_task
(
async
function
setup
(
)
{
const
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
"
searchSuggestionEngine
.
xml
"
)
;
const
defaultEngine
=
Services
.
search
.
defaultEngine
;
Services
.
search
.
defaultEngine
=
engine
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
search
.
defaultEngine
=
defaultEngine
;
}
)
;
}
)
;
add_task
(
async
function
returnKeypress
(
)
{
info
(
"
Simple
return
keypress
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
START_VALUE
)
;
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
is
(
gURLBar
.
value
TEST_VALUE
"
Urlbar
should
preserve
the
value
on
return
keypress
"
)
;
is
(
gBrowser
.
selectedTab
tab
"
New
URL
was
loaded
in
the
current
tab
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
altReturnKeypress
(
)
{
info
(
"
Alt
+
Return
keypress
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
START_VALUE
)
;
let
tabOpenPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
altKey
:
true
}
)
;
await
tabOpenPromise
;
is
(
gURLBar
.
value
TEST_VALUE
"
Urlbar
should
preserve
the
value
on
return
keypress
"
)
;
isnot
(
gBrowser
.
selectedTab
tab
"
New
URL
was
loaded
in
a
new
tab
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
altGrReturnKeypress
(
)
{
info
(
"
AltGr
+
Return
keypress
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
START_VALUE
)
;
let
tabOpenPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
altGraphKey
:
true
}
)
;
await
tabOpenPromise
;
is
(
gURLBar
.
value
TEST_VALUE
"
Urlbar
should
preserve
the
value
on
return
keypress
"
)
;
isnot
(
gBrowser
.
selectedTab
tab
"
New
URL
was
loaded
in
a
new
tab
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
searchOnEnterNoPick
(
)
{
info
(
"
Search
on
Enter
without
picking
a
urlbar
result
"
)
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gBrowser
.
tabContainer
.
newTabButton
{
}
)
;
let
openEvent
=
await
promiseTabOpened
;
let
tab
=
openEvent
.
target
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
false
null
true
)
;
gURLBar
.
focus
(
)
;
gURLBar
.
value
=
"
test
test
"
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
loadPromise
;
Assert
.
ok
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
.
endsWith
(
"
test
+
test
"
)
"
Should
have
loaded
the
correct
page
"
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
gURLBar
.
untrimmedValue
"
The
location
should
have
changed
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
searchOnEnterSoon
(
)
{
info
(
"
Search
on
Enter
as
soon
as
typing
a
char
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
START_VALUE
)
;
const
onLoad
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
const
onBeforeUnload
=
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
content
.
window
.
addEventListener
(
"
beforeunload
"
(
)
=
>
{
resolve
(
)
;
}
)
;
}
)
;
}
)
;
const
onResult
=
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
content
.
window
.
addEventListener
(
"
keyup
"
(
)
=
>
{
resolve
(
"
keyup
"
)
;
}
)
;
content
.
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
resolve
(
"
unload
"
)
;
}
)
;
}
)
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
const
ownerDocument
=
gBrowser
.
selectedBrowser
.
ownerDocument
;
is
(
ownerDocument
.
activeElement
gURLBar
.
inputField
"
The
input
field
in
urlbar
has
focus
"
)
;
info
(
"
Keydown
a
char
and
Enter
"
)
;
EventUtils
.
synthesizeKey
(
"
x
"
{
type
:
"
keydown
"
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
type
:
"
keydown
"
}
)
;
await
onBeforeUnload
;
is
(
ownerDocument
.
activeElement
gURLBar
.
inputField
"
The
input
field
in
urlbar
still
has
focus
"
)
;
EventUtils
.
synthesizeKey
(
"
x
"
{
type
:
"
keyup
"
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
type
:
"
keyup
"
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
ownerDocument
.
activeElement
=
=
=
gBrowser
.
selectedBrowser
)
;
info
(
"
The
focus
is
moved
to
the
browser
"
)
;
const
result
=
await
onResult
;
is
(
result
"
unload
"
"
Keyup
event
is
not
captured
.
"
)
;
await
onLoad
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
