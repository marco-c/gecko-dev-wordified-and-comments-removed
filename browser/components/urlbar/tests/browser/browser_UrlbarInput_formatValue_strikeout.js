"
use
strict
"
;
const
TEST_URL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
mixed_active
.
html
"
;
async
function
testVal
(
urlFormatString
clobberedURLString
=
null
)
{
let
str
=
urlFormatString
.
replace
(
/
[
<
>
]
/
g
"
"
)
;
info
(
"
Setting
the
value
property
directly
"
)
;
gURLBar
.
value
=
str
;
gBrowser
.
selectedBrowser
.
focus
(
)
;
await
UrlbarTestUtils
.
checkFormatting
(
window
urlFormatString
{
clobberedURLString
selectionType
:
Ci
.
nsISelectionController
.
SELECTION_URLSTRIKEOUT
}
)
;
}
add_task
(
async
function
test_strikeout_on_no_https_trimming
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
trimHttps
"
false
]
[
"
security
.
insecure_connection_text
.
enabled
"
false
]
[
"
security
.
mixed_content
.
block_active_content
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
function
(
)
{
await
testVal
(
"
<
https
>
:
/
/
example
.
com
/
mixed_active
.
html
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_no_strikeout_on_https_trimming
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
trimHttps
"
true
]
[
"
security
.
insecure_connection_text
.
enabled
"
false
]
[
"
security
.
mixed_content
.
block_active_content
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
function
(
)
{
await
testVal
(
"
https
:
/
/
example
.
com
/
mixed_active
.
html
"
"
example
.
com
/
mixed_active
.
html
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
