"
use
strict
"
;
add_task
(
async
function
(
)
{
let
input
=
"
i
-
definitely
-
dont
-
exist
.
example
.
com
"
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
false
)
;
let
browser
=
tab
.
linkedBrowser
;
await
ContentTask
.
spawn
(
browser
null
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
content
.
document
&
&
!
content
.
document
.
hidden
;
}
)
;
}
)
;
let
errorPageLoaded
=
BrowserTestUtils
.
waitForErrorPage
(
tab
.
linkedBrowser
)
;
gURLBar
.
value
=
input
;
gURLBar
.
select
(
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
await
errorPageLoaded
;
is
(
gURLBar
.
value
input
"
Text
is
still
in
URL
bar
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
.
previousElementSibling
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
is
(
gURLBar
.
value
input
"
Text
is
still
in
URL
bar
after
tab
switch
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
(
)
{
let
input
=
"
To
be
or
not
to
be
-
that
is
the
question
"
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
keyword
.
enabled
"
false
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
false
)
;
let
browser
=
tab
.
linkedBrowser
;
await
ContentTask
.
spawn
(
browser
null
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
content
.
document
&
&
!
content
.
document
.
hidden
;
}
)
;
}
)
;
let
errorPageLoaded
=
BrowserTestUtils
.
waitForErrorPage
(
tab
.
linkedBrowser
)
;
gURLBar
.
value
=
input
;
gURLBar
.
select
(
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
await
errorPageLoaded
;
is
(
gURLBar
.
value
input
"
Text
is
still
in
URL
bar
"
)
;
is
(
tab
.
linkedBrowser
.
userTypedValue
input
"
Text
still
stored
on
browser
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
.
previousElementSibling
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
is
(
gURLBar
.
value
input
"
Text
is
still
in
URL
bar
after
tab
switch
"
)
;
is
(
tab
.
linkedBrowser
.
userTypedValue
input
"
Text
still
stored
on
browser
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
