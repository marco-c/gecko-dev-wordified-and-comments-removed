"
use
strict
"
;
const
TEST_URL
=
{
TEST_BASE_URL
}
dummy_page
.
html
;
add_task
(
async
function
(
)
{
let
charsToDelete
deletedURLTab
fullURLTab
partialURLTab
testPartialURL
testURL
;
charsToDelete
=
5
;
deletedURLTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
fullURLTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
partialURLTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
testURL
=
TEST_URL
;
let
loaded1
=
BrowserTestUtils
.
browserLoaded
(
deletedURLTab
.
linkedBrowser
false
testURL
)
;
let
loaded2
=
BrowserTestUtils
.
browserLoaded
(
fullURLTab
.
linkedBrowser
false
testURL
)
;
let
loaded3
=
BrowserTestUtils
.
browserLoaded
(
partialURLTab
.
linkedBrowser
false
testURL
)
;
BrowserTestUtils
.
loadURI
(
deletedURLTab
.
linkedBrowser
testURL
)
;
BrowserTestUtils
.
loadURI
(
fullURLTab
.
linkedBrowser
testURL
)
;
BrowserTestUtils
.
loadURI
(
partialURLTab
.
linkedBrowser
testURL
)
;
await
Promise
.
all
(
[
loaded1
loaded2
loaded3
]
)
;
testURL
=
gURLBar
.
trimValue
(
testURL
)
;
testPartialURL
=
testURL
.
substr
(
0
testURL
.
length
-
charsToDelete
)
;
function
cleanUp
(
)
{
gBrowser
.
removeTab
(
fullURLTab
)
;
gBrowser
.
removeTab
(
partialURLTab
)
;
gBrowser
.
removeTab
(
deletedURLTab
)
;
}
async
function
cycleTabs
(
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
fullURLTab
)
;
is
(
gURLBar
.
value
testURL
"
gURLBar
.
value
should
be
testURL
after
switching
back
to
fullURLTab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
partialURLTab
)
;
is
(
gURLBar
.
value
testPartialURL
"
gURLBar
.
value
should
be
testPartialURL
after
switching
back
to
partialURLTab
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
deletedURLTab
)
;
is
(
gURLBar
.
value
"
"
'
gURLBar
.
value
should
be
"
"
after
switching
back
to
deletedURLTab
'
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
fullURLTab
)
;
is
(
gURLBar
.
value
testURL
"
gURLBar
.
value
should
be
testURL
after
switching
back
to
fullURLTab
"
)
;
}
function
urlbarBackspace
(
removeAll
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
gBrowser
.
selectedBrowser
.
focus
(
)
;
gURLBar
.
addEventListener
(
"
input
"
function
(
)
{
resolve
(
)
;
}
{
once
:
true
}
)
;
gURLBar
.
focus
(
)
;
if
(
removeAll
)
{
gURLBar
.
select
(
)
;
}
else
{
gURLBar
.
selectionStart
=
gURLBar
.
selectionEnd
=
gURLBar
.
value
.
length
;
}
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
}
)
;
}
async
function
prepareDeletedURLTab
(
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
deletedURLTab
)
;
is
(
gURLBar
.
value
testURL
"
gURLBar
.
value
should
be
testURL
after
initial
switch
to
deletedURLTab
"
)
;
await
urlbarBackspace
(
true
)
;
is
(
gURLBar
.
value
"
"
'
gURLBar
.
value
should
be
"
"
(
just
set
)
'
)
;
}
async
function
prepareFullURLTab
(
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
fullURLTab
)
;
is
(
gURLBar
.
value
testURL
"
gURLBar
.
value
should
be
testURL
after
initial
switch
to
fullURLTab
"
)
;
}
async
function
preparePartialURLTab
(
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
partialURLTab
)
;
is
(
gURLBar
.
value
testURL
"
gURLBar
.
value
should
be
testURL
after
initial
switch
to
partialURLTab
"
)
;
let
deleted
=
0
;
while
(
deleted
<
charsToDelete
)
{
await
urlbarBackspace
(
false
)
;
deleted
+
+
;
}
is
(
gURLBar
.
value
testPartialURL
"
gURLBar
.
value
should
be
testPartialURL
(
just
set
)
"
)
;
}
await
prepareFullURLTab
(
)
;
await
preparePartialURLTab
(
)
;
await
prepareDeletedURLTab
(
)
;
await
cycleTabs
(
)
;
cleanUp
(
)
;
}
)
;
