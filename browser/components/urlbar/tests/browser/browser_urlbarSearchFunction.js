"
use
strict
"
;
add_task
(
async
function
init
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
let
which
=
gURLBar
.
_whichSearchSuggestionsNotification
|
|
undefined
;
registerCleanupFunction
(
async
function
(
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
if
(
which
=
=
=
undefined
)
{
delete
gURLBar
.
_whichSearchSuggestionsNotification
;
}
else
{
gURLBar
.
_whichSearchSuggestionsNotification
=
which
;
}
Services
.
prefs
.
clearUserPref
(
"
timesBeforeHidingSuggestionsHint
"
)
;
gURLBar
.
handleRevert
(
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
let
resetNotification
=
enableSearchSuggestionsNotification
(
)
;
gURLBar
.
search
(
"
basic
"
)
;
await
assertUrlbarValue
(
"
basic
"
)
;
assertSearchSuggestionsNotificationVisible
(
true
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
resetNotification
(
)
;
}
)
;
add_task
(
async
function
searchEngineAlias
(
)
{
let
resetNotification
=
enableSearchSuggestionsNotification
(
)
;
gURLBar
.
search
(
"
example
"
)
;
await
assertUrlbarValue
(
"
example
"
)
;
assertSearchSuggestionsNotificationVisible
(
false
)
;
assertOneOffButtonsVisible
(
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
gURLBar
.
search
(
"
not
an
engine
alias
"
)
;
await
assertUrlbarValue
(
"
not
an
engine
alias
"
)
;
assertSearchSuggestionsNotificationVisible
(
true
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
resetNotification
(
)
;
}
)
;
function
enableSearchSuggestionsNotification
(
)
{
let
which
=
gURLBar
.
_whichSearchSuggestionsNotification
|
|
undefined
;
gURLBar
.
_whichSearchSuggestionsNotification
=
"
opt
-
out
"
;
Services
.
prefs
.
setIntPref
(
"
timesBeforeHidingSuggestionsHint
"
10
)
;
return
function
reset
(
)
{
if
(
which
=
=
=
undefined
)
{
delete
gURLBar
.
_whichSearchSuggestionsNotification
;
}
else
{
gURLBar
.
_whichSearchSuggestionsNotification
=
which
;
}
Services
.
prefs
.
clearUserPref
(
"
timesBeforeHidingSuggestionsHint
"
)
;
}
;
}
function
assertSearchSuggestionsNotificationVisible
(
visible
)
{
if
(
UrlbarPrefs
.
get
(
"
quantumbar
"
)
)
{
return
;
}
Assert
.
equal
(
gURLBar
.
popup
.
classList
.
contains
(
"
showSearchSuggestionsNotification
"
)
visible
)
;
Assert
.
equal
(
window
.
getComputedStyle
(
gURLBar
.
popup
.
searchSuggestionsNotification
)
.
display
visible
?
"
-
moz
-
deck
"
:
"
none
"
)
;
}
function
assertOneOffButtonsVisible
(
visible
)
{
if
(
UrlbarPrefs
.
get
(
"
quantumbar
"
)
)
{
return
;
}
Assert
.
equal
(
UrlbarTestUtils
.
getOneOffSearchButtonsVisible
(
window
)
visible
"
Should
show
or
not
the
one
-
off
search
buttons
"
)
;
}
async
function
assertUrlbarValue
(
value
)
{
await
waitForAutocompleteResultAt
(
0
)
;
Assert
.
equal
(
gURLBar
.
value
value
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
window
)
0
"
Should
have
at
least
one
result
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Should
have
type
search
for
the
first
result
"
)
;
Assert
.
equal
(
result
.
searchParams
.
query
value
"
Should
have
the
correct
query
for
the
first
result
"
)
;
}
