let
originalEngine
defaultTestEngine
;
const
SEARCH_STRING
=
"
chocolate
cake
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch
"
search_url
:
"
https
:
/
/
www
.
example
.
com
/
"
search_url_get_params
:
"
q
=
{
searchTerms
}
&
pc
=
fake_code
"
}
)
;
defaultTestEngine
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
defaultTestEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
registerCleanupFunction
(
async
function
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
function
assertSearchStringIsInUrlbar
(
searchString
)
{
Assert
.
equal
(
gURLBar
.
value
searchString
Search
string
{
searchString
}
should
be
in
the
url
bar
)
;
Assert
.
equal
(
gBrowser
.
userTypedValue
searchString
{
searchString
}
should
be
the
userTypedValue
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
invalid
"
"
Pageproxystate
should
be
invalid
"
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
showingSearchTerms
true
"
showingSearchTerms
should
be
true
"
)
;
}
add_task
(
async
function
history_push_state
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
defaultTestEngine
SEARCH_STRING
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
expectedSearchUrl
)
;
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
expectedSearchUrl
)
;
await
browserLoadedPromise
;
let
locationChangePromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
function
(
)
{
let
url
=
new
URL
(
content
.
window
.
location
)
;
url
.
searchParams
.
set
(
"
pc
"
"
fake_code_2
"
)
;
content
.
history
.
pushState
(
{
}
"
"
url
)
;
}
)
;
await
locationChangePromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
https
:
/
/
www
.
example
.
com
/
?
q
=
chocolate
+
cake
&
pc
=
fake_code_2
"
URI
of
Urlbar
should
have
changed
"
)
;
Assert
.
equal
(
gURLBar
.
value
SEARCH_STRING
Search
string
{
SEARCH_STRING
}
should
be
in
the
url
bar
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
url_with_additional_query_params
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
defaultTestEngine
SEARCH_STRING
)
;
expectedSearchUrl
+
=
"
&
another_code
=
something_else
"
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
expectedSearchUrl
)
;
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
expectedSearchUrl
)
;
await
browserLoadedPromise
;
Assert
.
equal
(
gURLBar
.
value
expectedSearchUrl
URL
should
be
in
URL
bar
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
valid
"
"
Pageproxystate
should
be
valid
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
