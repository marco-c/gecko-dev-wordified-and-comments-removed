add_task
(
async
function
(
)
{
await
SearchTestUtils
.
installSearchExtension
(
{
keyword
:
"
moz
"
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Example
"
)
;
let
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
engine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
mozilla
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
autoFill
"
false
]
]
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
try
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
catch
(
ex
)
{
}
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
moz
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
moz
"
"
Value
should
be
unchanged
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
moz
open
a
search
"
}
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
engine
.
name
entry
:
"
typed
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
"
open
a
search
"
"
value
should
be
query
"
)
;
let
tabPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
tabPromise
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
"
https
:
/
/
example
.
com
/
?
q
=
open
+
a
+
search
"
"
Should
have
loaded
the
correct
page
"
)
;
}
)
;
