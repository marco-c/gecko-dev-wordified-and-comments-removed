"
use
strict
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
[
"
browser
.
urlbar
.
update2
.
localOneOffs
"
true
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
true
]
]
}
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
default
.
sites
"
"
http
:
/
/
example
.
com
/
"
]
]
}
)
;
await
updateTopSites
(
sites
=
>
sites
.
length
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
withNewWindow
(
async
win
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
"
"
}
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Top
sites
should
be
present
initially
"
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
panel
.
hasAttribute
(
"
noresults
"
)
"
Panel
has
results
therefore
should
not
have
noresults
attribute
"
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
win
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Zero
results
since
no
bookmarks
exist
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
panel
.
getAttribute
(
"
noresults
"
)
"
true
"
"
Panel
has
no
results
therefore
should
have
noresults
attribute
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
win
{
backspace
:
true
}
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Top
sites
should
be
present
again
"
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
panel
.
hasAttribute
(
"
noresults
"
)
"
noresults
attribute
should
be
absent
again
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
autoOpen
(
)
{
await
withNewWindow
(
async
win
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
"
"
}
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Top
sites
should
be
present
initially
"
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
panel
.
hasAttribute
(
"
noresults
"
)
"
Panel
has
results
therefore
should
not
have
noresults
attribute
"
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
win
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Zero
results
since
no
bookmarks
exist
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
panel
.
getAttribute
(
"
noresults
"
)
"
true
"
"
Panel
has
no
results
therefore
should
have
noresults
attribute
"
)
;
win
.
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
win
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
win
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
win
.
gURLBar
.
inputField
{
}
win
)
;
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Still
zero
results
since
no
bookmarks
exist
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
panel
.
getAttribute
(
"
noresults
"
)
"
true
"
"
Panel
still
has
no
results
therefore
should
have
noresults
attribute
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
win
{
backspace
:
true
}
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Top
sites
should
be
present
again
"
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
panel
.
hasAttribute
(
"
noresults
"
)
"
noresults
attribute
should
be
absent
again
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
backspaceRemainOpen
(
)
{
await
withNewWindow
(
async
win
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
"
x
"
}
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
At
least
the
heuristic
result
should
be
shown
"
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
panel
.
hasAttribute
(
"
noresults
"
)
"
Panel
has
results
therefore
should
not
have
noresults
attribute
"
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
win
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
At
least
the
heuristic
result
should
be
shown
"
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
panel
.
hasAttribute
(
"
noresults
"
)
"
Panel
has
results
therefore
should
not
have
noresults
attribute
"
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
{
}
win
)
;
await
searchPromise
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
win
)
"
View
remains
open
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
win
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Zero
results
since
no
bookmarks
exist
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
panel
.
getAttribute
(
"
noresults
"
)
"
true
"
"
Panel
has
no
results
therefore
should
have
noresults
attribute
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
win
{
backspace
:
true
}
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Top
sites
should
be
present
again
"
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
panel
.
hasAttribute
(
"
noresults
"
)
"
noresults
attribute
should
be
absent
again
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
spaceToEnterSearchMode
(
)
{
let
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
)
;
engine
.
alias
=
"
test
"
;
await
withNewWindow
(
async
win
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
engine
.
alias
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
EventUtils
.
synthesizeKey
(
"
"
{
}
win
)
;
await
searchPromise
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
win
)
0
"
Zero
results
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
panel
.
getAttribute
(
"
noresults
"
)
"
true
"
"
Panel
has
no
results
therefore
should
have
noresults
attribute
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
win
{
engineName
:
engine
.
name
}
)
;
this
.
Assert
.
equal
(
UrlbarTestUtils
.
getOneOffSearchButtonsVisible
(
window
)
true
"
One
-
offs
are
visible
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
win
{
backspace
:
true
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
}
)
;
}
)
;
async
function
withNewWindow
(
callback
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
callback
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
