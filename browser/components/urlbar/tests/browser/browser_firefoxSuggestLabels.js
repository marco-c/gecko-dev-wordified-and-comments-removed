"
use
strict
"
;
const
SUGGESTIONS_FIRST_PREF
=
"
browser
.
urlbar
.
showSearchSuggestionsFirst
"
;
const
SUGGESTIONS_PREF
=
"
browser
.
urlbar
.
suggest
.
searches
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
const
MAX_RESULTS
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
;
const
TOP_SITES
=
[
"
http
:
/
/
example
-
1
.
com
/
"
"
http
:
/
/
example
-
2
.
com
/
"
"
http
:
/
/
example
-
3
.
com
/
"
]
;
const
FIREFOX_SUGGEST_LABEL
=
"
Firefox
Suggest
"
;
add_task
(
async
function
init
(
)
{
Assert
.
ok
(
UrlbarPrefs
.
get
(
"
showSearchSuggestionsFirst
"
)
"
Precondition
:
Search
suggestions
shown
first
by
default
"
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
addHistory
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
topsites
"
true
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
default
.
sites
"
TOP_SITES
.
join
(
"
"
)
]
]
}
)
;
await
updateTopSites
(
sites
=
>
sites
&
&
sites
.
length
)
;
await
SearchTestUtils
.
installSearchExtension
(
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
"
Example
"
)
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
history
.
clear
(
)
;
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites
(
)
{
await
withExperiment
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
"
}
)
;
await
checkLabels
(
-
1
{
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
add_task
(
async
function
general
(
)
{
await
withExperiment
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
checkLabels
(
MAX_RESULTS
{
1
:
FIREFOX_SUGGEST_LABEL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
add_task
(
async
function
suggestionsBeforeGeneral
(
)
{
await
withExperiment
(
async
(
)
=
>
{
await
withSuggestions
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
checkLabels
(
MAX_RESULTS
{
3
:
FIREFOX_SUGGEST_LABEL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
generalBeforeSuggestions
(
)
{
await
withExperiment
(
async
(
)
=
>
{
await
withSuggestions
(
async
engine
=
>
{
Assert
.
ok
(
engine
.
name
"
Engine
name
is
non
-
empty
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGESTIONS_FIRST_PREF
false
]
]
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
checkLabels
(
MAX_RESULTS
{
1
:
FIREFOX_SUGGEST_LABEL
[
MAX_RESULTS
-
2
]
:
{
engine
.
name
}
suggestions
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
generalBeforeSuggestions_suggestionsOnly
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
withExperiment
(
async
(
)
=
>
{
await
withSuggestions
(
async
engine
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGESTIONS_FIRST_PREF
false
]
]
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
checkLabels
(
3
{
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
await
addHistory
(
)
;
}
)
;
add_task
(
async
function
suggestedIndex_only
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
let
index
=
-
1
;
let
provider
=
new
SuggestedIndexProvider
(
index
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
withExperiment
(
async
(
)
=
>
{
await
withSuggestions
(
async
engine
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
3
)
;
Assert
.
equal
(
result
.
element
.
row
.
result
.
suggestedIndex
index
"
Sanity
check
:
Our
suggested
-
index
result
is
present
"
)
;
await
checkLabels
(
4
{
3
:
FIREFOX_SUGGEST_LABEL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
await
addHistory
(
)
;
}
)
;
add_task
(
async
function
suggestedIndex_first
(
)
{
let
index
=
1
;
let
provider
=
new
SuggestedIndexProvider
(
index
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
withExperiment
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
index
)
;
Assert
.
equal
(
result
.
element
.
row
.
result
.
suggestedIndex
index
"
Sanity
check
:
Our
suggested
-
index
result
is
present
"
)
;
await
checkLabels
(
MAX_RESULTS
{
[
index
]
:
FIREFOX_SUGGEST_LABEL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
)
;
add_task
(
async
function
suggestedIndex_notFirst
(
)
{
let
index
=
-
1
;
let
provider
=
new
SuggestedIndexProvider
(
index
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
withExperiment
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
MAX_RESULTS
+
index
)
;
Assert
.
equal
(
result
.
element
.
row
.
result
.
suggestedIndex
index
"
Sanity
check
:
Our
suggested
-
index
result
is
present
"
)
;
await
checkLabels
(
MAX_RESULTS
{
1
:
FIREFOX_SUGGEST_LABEL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
)
;
add_task
(
async
function
repeatLabels
(
)
{
let
engineName
=
Services
.
search
.
defaultEngine
.
name
;
let
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
url
:
"
http
:
/
/
example
.
com
/
1
"
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
test1
"
engine
:
engineName
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
url
:
"
http
:
/
/
example
.
com
/
2
"
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
test2
"
engine
:
engineName
}
)
]
;
for
(
let
i
=
0
;
i
<
results
.
length
;
i
+
+
)
{
results
[
i
]
.
suggestedIndex
=
i
;
}
let
provider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
priority
:
Infinity
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
withExperiment
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
checkLabels
(
results
.
length
{
0
:
FIREFOX_SUGGEST_LABEL
1
:
{
engineName
}
suggestions
2
:
FIREFOX_SUGGEST_LABEL
3
:
{
engineName
}
suggestions
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
)
;
class
SuggestedIndexProvider
extends
UrlbarTestUtils
.
TestProvider
{
constructor
(
suggestedIndex
)
{
super
(
{
results
:
[
Object
.
assign
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
url
:
"
http
:
/
/
example
.
com
/
"
}
)
{
suggestedIndex
}
)
]
}
)
;
}
}
async
function
addHistory
(
)
{
for
(
let
i
=
0
;
i
<
MAX_RESULTS
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
example
.
com
/
"
+
i
)
;
}
}
async
function
checkLabels
(
resultCount
labelsByIndex
)
{
if
(
resultCount
>
=
0
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
resultCount
"
Expected
result
count
"
)
;
}
else
{
let
indexes
=
Object
.
keys
(
labelsByIndex
)
;
if
(
indexes
.
length
)
{
resultCount
=
indexes
.
sort
(
(
a
b
)
=
>
b
-
a
)
[
0
]
+
1
;
}
else
{
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
greater
(
resultCount
0
"
Actual
result
count
is
>
0
"
)
;
}
}
for
(
let
i
=
0
;
i
<
resultCount
;
i
+
+
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
let
{
row
}
=
result
.
element
;
let
before
=
getComputedStyle
(
row
"
:
:
before
"
)
;
if
(
labelsByIndex
.
hasOwnProperty
(
i
)
)
{
Assert
.
equal
(
before
.
content
"
attr
(
label
)
"
:
:
before
.
content
is
correct
at
index
{
i
}
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
label
"
)
labelsByIndex
[
i
]
Row
has
correct
label
at
index
{
i
}
)
;
}
else
{
Assert
.
equal
(
before
.
content
"
none
"
:
:
before
.
content
is
'
none
'
at
index
{
i
}
)
;
Assert
.
ok
(
!
row
.
hasAttribute
(
"
label
"
)
Row
does
not
have
label
attribute
at
index
{
i
}
)
;
}
}
}
async
function
withExperiment
(
callback
)
{
await
UrlbarTestUtils
.
withExperiment
(
{
callback
valueOverrides
:
{
firefoxSuggestLabelsEnabled
:
true
}
}
)
;
}
async
function
withSuggestions
(
callback
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGESTIONS_PREF
true
]
]
}
)
;
let
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
try
{
await
callback
(
engine
)
;
}
finally
{
await
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
}
