"
use
strict
"
;
const
TEST_QUERY
=
"
test
string
"
;
const
DEFAULT_ENGINE_NAME
=
"
Test
"
;
const
SUGGESTIONS_ENGINE_NAME
=
"
searchSuggestionEngine
.
xml
"
;
let
suggestionsEngine
;
let
defaultEngine
;
add_task
(
async
function
setup
(
)
{
suggestionsEngine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
SUGGESTIONS_ENGINE_NAME
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
defaultEngine
=
await
Services
.
search
.
addEngineWithDetails
(
DEFAULT_ENGINE_NAME
{
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
await
Services
.
search
.
setDefault
(
defaultEngine
)
;
await
Services
.
search
.
moveEngine
(
suggestionsEngine
0
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
await
Services
.
search
.
removeEngine
(
defaultEngine
)
;
}
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
false
]
[
"
browser
.
urlbar
.
update2
"
true
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
true
]
]
}
)
;
}
)
;
async
function
enterSearchMode
(
window
)
{
let
oneOffs
=
UrlbarTestUtils
.
getOneOffSearchButtons
(
window
)
.
getSelectableButtons
(
true
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
}
)
;
await
searchPromise
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
still
open
.
"
)
;
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engineName
:
oneOffs
[
0
]
.
engine
.
name
}
)
;
}
async
function
exitSearchMode
(
window
{
backspace
clickClose
waitForSearch
=
true
}
)
{
if
(
backspace
)
{
let
urlbarValue
=
gURLBar
.
value
;
gURLBar
.
selectionStart
=
gURLBar
.
selectionEnd
=
0
;
if
(
waitForSearch
)
{
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
searchPromise
;
}
else
{
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
}
Assert
.
equal
(
gURLBar
.
value
urlbarValue
"
Urlbar
value
hasn
'
t
changed
.
"
)
;
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
}
else
if
(
clickClose
)
{
let
indicator
=
gURLBar
.
querySelector
(
"
#
urlbar
-
search
-
mode
-
indicator
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
indicator
{
type
:
"
mouseover
"
}
)
;
let
closeButton
=
gURLBar
.
querySelector
(
"
#
urlbar
-
search
-
mode
-
indicator
-
close
"
)
;
if
(
waitForSearch
)
{
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
)
;
await
searchPromise
;
}
else
{
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
)
;
}
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
}
}
async
function
verifySearchModeResultsAdded
(
window
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
3
"
There
should
be
three
results
.
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
searchParams
.
engine
suggestionsEngine
.
name
"
The
first
result
should
be
a
search
result
for
our
suggestion
engine
.
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
result
.
searchParams
.
suggestion
{
TEST_QUERY
}
foo
"
The
second
result
should
be
a
suggestion
result
.
"
)
;
Assert
.
equal
(
result
.
searchParams
.
engine
suggestionsEngine
.
name
"
The
second
result
should
be
a
search
result
for
our
suggestion
engine
.
"
)
;
}
async
function
verifySearchModeResultsRemoved
(
window
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
1
"
There
should
only
be
one
result
.
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
searchParams
.
engine
defaultEngine
.
name
"
The
first
result
should
be
a
search
result
for
our
default
engine
.
"
)
;
}
add_task
(
async
function
backspace
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
await
verifySearchModeResultsAdded
(
window
)
;
await
exitSearchMode
(
window
{
backspace
:
true
}
)
;
await
verifySearchModeResultsRemoved
(
window
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
open
.
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
enterSearchMode
(
window
)
;
await
exitSearchMode
(
window
{
backspace
:
true
waitForSearch
:
false
}
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
open
.
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
await
verifySearchModeResultsAdded
(
window
)
;
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
exitSearchMode
(
window
{
backspace
:
true
}
)
;
await
verifySearchModeResultsRemoved
(
window
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
now
open
.
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
enterSearchMode
(
window
)
;
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
exitSearchMode
(
window
{
backspace
:
true
waitForSearch
:
false
}
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
still
closed
.
"
)
;
}
)
;
add_task
(
async
function
escape
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
await
verifySearchModeResultsAdded
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
"
UrlbarView
is
closed
.
"
)
)
;
Assert
.
equal
(
gURLBar
.
value
TEST_QUERY
"
Urlbar
value
hasn
'
t
changed
.
"
)
;
let
oneOffs
=
UrlbarTestUtils
.
getOneOffSearchButtons
(
window
)
.
getSelectableButtons
(
true
)
;
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engineName
:
oneOffs
[
0
]
.
engine
.
name
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
"
UrlbarView
is
closed
.
"
)
)
;
Assert
.
ok
(
!
gURLBar
.
value
"
Urlbar
value
is
empty
.
"
)
;
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
}
)
;
add_task
(
async
function
click_close
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
await
verifySearchModeResultsAdded
(
window
)
;
await
exitSearchMode
(
window
{
clickClose
:
true
}
)
;
await
verifySearchModeResultsRemoved
(
window
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
if
(
gURLBar
.
hasAttribute
(
"
breakout
-
extend
"
)
)
{
await
exitSearchMode
(
window
{
clickClose
:
true
waitForSearch
:
false
}
)
;
}
else
{
gURLBar
.
setSearchMode
(
null
)
;
}
}
)
;
add_task
(
async
function
invalidate_pageproxystate
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
robots
"
async
function
(
browser
)
{
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
valid
"
)
;
await
enterSearchMode
(
window
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
invalid
"
"
Entering
search
mode
should
clear
pageproxystate
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
Urlbar
value
should
be
cleared
.
"
)
;
await
exitSearchMode
(
window
{
clickClose
:
true
}
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
invalid
"
"
Pageproxystate
should
still
be
invalid
after
exiting
search
mode
.
"
)
;
}
)
;
}
)
;
