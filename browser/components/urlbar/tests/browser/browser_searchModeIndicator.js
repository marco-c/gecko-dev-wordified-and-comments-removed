"
use
strict
"
;
const
TEST_QUERY
=
"
test
string
"
;
add_task
(
async
function
setup
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
false
]
[
"
browser
.
urlbar
.
update2
"
true
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
true
]
]
}
)
;
}
)
;
async
function
enterSearchMode
(
window
)
{
let
oneOffs
=
UrlbarTestUtils
.
getOneOffSearchButtons
(
window
)
.
getSelectableButtons
(
true
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
}
)
;
await
searchPromise
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
still
open
.
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isInSearchMode
(
window
oneOffs
[
0
]
.
engine
.
name
)
"
The
Urlbar
is
in
search
mode
.
"
)
;
}
add_task
(
async
function
backspace
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
gURLBar
.
selectionStart
=
gURLBar
.
selectionEnd
=
0
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
Assert
.
equal
(
gURLBar
.
value
TEST_QUERY
"
Urlbar
value
hasn
'
t
changed
.
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
no
longer
in
search
mode
.
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
enterSearchMode
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
Urlbar
value
is
empty
.
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
no
longer
in
search
mode
.
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
selectionStart
=
gURLBar
.
selectionEnd
=
0
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
await
searchPromise
;
Assert
.
equal
(
gURLBar
.
value
TEST_QUERY
"
Urlbar
value
hasn
'
t
changed
.
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
no
longer
in
search
mode
.
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
now
open
.
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
enterSearchMode
(
window
)
;
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
selectionStart
=
gURLBar
.
selectionEnd
=
0
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
Urlbar
value
is
empty
.
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
no
longer
in
search
mode
.
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Urlbar
view
is
still
closed
.
"
)
;
}
)
;
add_task
(
async
function
escape
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
"
UrlbarView
is
closed
.
"
)
)
;
Assert
.
equal
(
gURLBar
.
value
TEST_QUERY
"
Urlbar
value
hasn
'
t
changed
.
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
in
search
mode
.
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
"
UrlbarView
is
closed
.
"
)
)
;
Assert
.
ok
(
!
gURLBar
.
value
"
Urlbar
value
is
empty
.
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
not
in
search
mode
.
"
)
;
}
)
;
add_task
(
async
function
click_close
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
let
indicator
=
gURLBar
.
querySelector
(
"
#
urlbar
-
search
-
mode
-
indicator
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
indicator
{
type
:
"
mouseover
"
}
)
;
let
closeButton
=
gURLBar
.
querySelector
(
"
#
urlbar
-
search
-
mode
-
indicator
-
close
"
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
)
;
await
searchPromise
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
no
longer
in
search
mode
.
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
enterSearchMode
(
window
)
;
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
if
(
gURLBar
.
hasAttribute
(
"
breakout
-
extend
"
)
)
{
Assert
.
ok
(
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
still
in
search
mode
.
"
)
;
indicator
=
gURLBar
.
querySelector
(
"
#
urlbar
-
search
-
mode
-
indicator
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
indicator
{
type
:
"
mouseover
"
}
)
;
closeButton
=
gURLBar
.
querySelector
(
"
#
urlbar
-
search
-
mode
-
indicator
-
close
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isInSearchMode
(
window
)
"
The
Urlbar
is
no
longer
in
search
mode
.
"
)
;
}
else
{
gURLBar
.
setSearchMode
(
null
)
;
}
}
)
;
