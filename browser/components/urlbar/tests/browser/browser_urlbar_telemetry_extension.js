"
use
strict
"
;
const
SCALAR_URLBAR
=
"
browser
.
engagement
.
navigation
.
urlbar
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarTestUtils
:
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
}
)
;
function
assertSearchTelemetryEmpty
(
search_hist
)
{
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
Assert
.
ok
(
!
(
SCALAR_URLBAR
in
scalars
)
Should
not
have
recorded
{
SCALAR_URLBAR
}
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
other
-
MozSearch
.
urlbar
"
undefined
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
other
-
MozSearch
.
alias
"
undefined
)
;
let
events
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
false
)
;
events
=
(
events
.
parent
|
|
[
]
)
.
filter
(
e
=
>
e
[
1
]
=
=
"
navigation
"
&
&
e
[
2
]
=
=
"
search
"
)
;
Assert
.
deepEqual
(
events
[
]
"
Should
not
have
recorded
any
navigation
search
events
"
)
;
}
function
snapshotHistograms
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
return
{
search_hist
:
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
}
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
false
]
[
"
browser
.
urlbar
.
maxHistoricalSearchSuggestions
"
0
]
[
"
browser
.
urlbar
.
autoFill
"
false
]
]
}
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_extension
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
omnibox
:
{
keyword
:
"
omniboxtest
"
}
}
background
(
)
{
browser
.
omnibox
.
setDefaultSuggestion
(
{
description
:
"
doit
"
}
)
;
browser
.
omnibox
.
onInputEntered
.
addListener
(
(
)
=
>
{
}
)
;
browser
.
omnibox
.
onInputChanged
.
addListener
(
(
text
suggest
)
=
>
{
suggest
(
[
]
)
;
}
)
;
}
}
)
;
await
extension
.
startup
(
)
;
const
histograms
=
snapshotHistograms
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
"
omniboxtest
"
fireInputEvent
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
assertSearchTelemetryEmpty
(
histograms
.
search_hist
)
;
await
extension
.
unload
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
