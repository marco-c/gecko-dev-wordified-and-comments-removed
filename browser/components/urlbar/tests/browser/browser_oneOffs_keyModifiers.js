"
use
strict
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
const
SEARCH_STRING
=
"
foo
.
bar
"
;
ChromeUtils
.
defineLazyGetter
(
this
"
oneOffSearchButtons
"
(
)
=
>
{
return
UrlbarTestUtils
.
getOneOffSearchButtons
(
window
)
;
}
)
;
let
engine
;
async
function
searchAndOpenPopup
(
value
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
fireInputEvent
:
true
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
oneOffSearchButtons
.
_rebuilding
"
Waiting
for
one
-
offs
to
finish
rebuilding
"
)
;
}
add_setup
(
async
function
(
)
{
engine
=
await
SearchTestUtils
.
installOpenSearchEngine
(
{
url
:
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
}
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
false
]
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
let
maxResults
=
Services
.
prefs
.
getIntPref
(
"
browser
.
urlbar
.
maxRichResults
"
)
;
for
(
let
i
=
0
;
i
<
maxResults
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
mochi
.
test
:
8888
/
browser_urlbarOneOffs
.
js
/
?
"
+
i
)
;
}
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
"
http
:
/
/
mochi
.
test
:
8888
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
maxResults
-
1
)
)
;
}
await
updateTopSites
(
sites
=
>
{
return
(
sites
&
&
sites
[
0
]
&
&
sites
[
0
]
.
url
.
startsWith
(
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
)
;
}
)
;
EventUtils
.
synthesizeMouse
(
gURLBar
.
inputField
0
0
{
type
:
"
mousemove
"
}
window
)
;
}
)
;
add_task
(
async
function
shift_click_empty
(
)
{
await
searchAndOpenPopup
(
"
"
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
shiftKey
:
true
}
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
oneOffs
[
0
]
.
engine
.
name
entry
:
"
oneoff
"
}
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
shift_click_search
(
)
{
await
searchAndOpenPopup
(
SEARCH_STRING
)
;
let
resultsPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
false
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
.
bar
"
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
shiftKey
:
true
}
)
;
await
resultsPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
shift_enter_empty
(
)
{
await
searchAndOpenPopup
(
"
"
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
shiftKey
:
true
}
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
oneOffs
[
0
]
.
engine
.
name
entry
:
"
oneoff
"
}
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
shift_enter_search
(
)
{
await
searchAndOpenPopup
(
SEARCH_STRING
)
;
let
resultsPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
false
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
.
bar
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
shiftKey
:
true
}
)
;
await
resultsPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
alt_enter_emptypage
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
home
"
async
function
(
browser
)
{
await
searchAndOpenPopup
(
SEARCH_STRING
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
altKey
:
true
}
)
;
await
searchPromise
;
Assert
.
equal
(
browser
gBrowser
.
selectedBrowser
"
The
foreground
tab
hasn
'
t
changed
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
oneOffs
[
0
]
.
engine
.
name
entry
:
"
oneoff
"
}
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
add_task
(
async
function
alt_enter_empty
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
robots
"
async
function
(
browser
)
{
await
searchAndOpenPopup
(
"
"
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
let
tabOpenPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
altKey
:
true
}
)
;
await
tabOpenPromise
;
Assert
.
notEqual
(
browser
gBrowser
.
selectedBrowser
"
The
current
foreground
tab
is
new
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
oneOffs
[
0
]
.
engine
.
name
entry
:
"
oneoff
"
}
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
Assert
.
equal
(
browser
gBrowser
.
selectedBrowser
"
We
'
re
back
in
the
original
tab
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
add_task
(
async
function
alt_enter_search_remote
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
robots
"
async
function
(
browser
)
{
await
searchAndOpenPopup
(
SEARCH_STRING
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
let
tabOpenPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
.
bar
"
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
altKey
:
true
}
)
;
let
newTab
=
await
tabOpenPromise
;
Assert
.
equal
(
newTab
gBrowser
.
selectedTab
"
The
current
foreground
tab
is
new
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
Assert
.
equal
(
browser
gBrowser
.
selectedBrowser
"
We
'
re
back
in
the
original
tab
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
add_task
(
async
function
alt_enter_search_local
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
robots
"
async
function
(
browser
)
{
await
searchAndOpenPopup
(
SEARCH_STRING
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
while
(
oneOffSearchButtons
.
selectedButton
.
id
!
=
"
urlbar
-
engine
-
one
-
off
-
item
-
bookmarks
"
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
}
let
tabOpenPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
altKey
:
true
}
)
;
await
tabOpenPromise
;
Assert
.
notEqual
(
browser
gBrowser
.
selectedBrowser
"
The
current
foreground
tab
is
new
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
oneoff
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
SEARCH_STRING
"
The
search
term
was
duplicated
to
the
new
tab
.
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
Assert
.
equal
(
browser
gBrowser
.
selectedBrowser
"
We
'
re
back
in
the
original
tab
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
}
)
;
add_task
(
async
function
accel_click_empty
(
)
{
await
searchAndOpenPopup
(
"
"
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
let
tabCount
=
gBrowser
.
tabs
.
length
;
let
tabOpenPromise
=
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
tabCount
+
1
?
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
:
false
"
Waiting
for
background
about
:
newtab
to
open
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
accelKey
:
true
}
)
;
let
newTab
=
await
tabOpenPromise
;
Assert
.
notEqual
(
newTab
.
linkedBrowser
gBrowser
.
selectedBrowser
"
The
foreground
tab
hasn
'
t
changed
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
switchTab
(
gBrowser
newTab
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
oneOffs
[
0
]
.
engine
.
name
entry
:
"
oneoff
"
}
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
accel_click_search_remote
(
)
{
await
searchAndOpenPopup
(
SEARCH_STRING
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
let
tabOpenPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
.
bar
"
true
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
accelKey
:
true
}
)
;
let
newTab
=
await
tabOpenPromise
;
Assert
.
notEqual
(
gBrowser
.
selectedTab
newTab
"
The
foreground
tab
hasn
'
t
changed
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
switchTab
(
gBrowser
newTab
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
accel_click_search_local
(
)
{
await
searchAndOpenPopup
(
SEARCH_STRING
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
let
oneOff
;
for
(
oneOff
of
oneOffs
)
{
if
(
oneOff
.
id
=
=
"
urlbar
-
engine
-
one
-
off
-
item
-
bookmarks
"
)
{
break
;
}
}
let
tabCount
=
gBrowser
.
tabs
.
length
;
let
tabOpenPromise
=
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
tabCount
+
1
?
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
:
false
"
Waiting
for
background
about
:
newtab
to
open
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOff
{
accelKey
:
true
}
)
;
let
newTab
=
await
tabOpenPromise
;
Assert
.
notEqual
(
newTab
.
linkedBrowser
gBrowser
.
selectedBrowser
"
The
foreground
tab
hasn
'
t
changed
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
BrowserTestUtils
.
switchTab
(
gBrowser
newTab
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
oneoff
"
}
)
;
Assert
.
equal
(
gURLBar
.
value
SEARCH_STRING
"
The
search
term
was
duplicated
to
the
new
tab
.
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
