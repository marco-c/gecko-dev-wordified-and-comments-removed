"
use
strict
"
;
let
params
=
{
queryString
:
"
&
invalidCompleteSize
=
1
"
}
;
let
downloadInfo
=
[
]
;
if
(
Services
.
prefs
.
getBoolPref
(
PREF_APP_UPDATE_BITS_ENABLED
false
)
)
{
downloadInfo
[
0
]
=
{
patchType
:
"
partial
"
bitsResult
:
"
0
"
}
;
}
else
{
downloadInfo
[
0
]
=
{
patchType
:
"
partial
"
internalResult
:
"
0
"
}
;
}
let
preSteps
=
[
{
panelId
:
"
checkingForUpdates
"
checkActiveUpdate
:
null
continueFile
:
CONTINUE_CHECK
}
{
panelId
:
"
downloadAndInstall
"
checkActiveUpdate
:
null
continueFile
:
null
}
]
;
let
postSteps
=
[
{
panelId
:
"
downloading
"
checkActiveUpdate
:
{
state
:
STATE_DOWNLOADING
}
continueFile
:
CONTINUE_DOWNLOAD
downloadInfo
}
{
panelId
:
"
apply
"
checkActiveUpdate
:
{
state
:
STATE_PENDING
}
continueFile
:
null
}
]
;
add_task
(
async
function
test
(
)
{
await
UpdateUtils
.
setAppUpdateAutoEnabled
(
false
)
;
await
initUpdate
(
params
)
;
UrlbarProviderInterventions
.
checkForBrowserUpdate
(
true
)
;
await
processUpdateSteps
(
preSteps
)
;
await
doUpdateTest
(
{
searchString
:
SEARCH_STRINGS
.
UPDATE
tip
:
TIPS
.
UPDATE_ASK
title
:
/
^
A
new
version
of
.
+
is
available
\
.
/
button
:
"
Install
and
Restart
to
Update
"
awaitCallback
(
)
{
return
Promise
.
all
(
[
processUpdateSteps
(
postSteps
)
awaitAppRestartRequest
(
)
]
)
;
}
}
)
;
}
)
;
