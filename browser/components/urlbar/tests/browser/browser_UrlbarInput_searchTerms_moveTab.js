const
SEARCH_STRING
=
"
chocolate
cake
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
let
cleanup
=
await
installPersistTestEngines
(
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
cleanup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
move_tab_into_new_window
(
)
{
let
{
tab
expectedSearchUrl
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
expectedSearchUrl
]
async
url
=
>
{
content
.
history
.
pushState
(
{
}
"
"
url
+
"
&
pc2
=
firefox
"
)
;
}
)
;
let
newWindow
=
gBrowser
.
replaceTabWithWindow
(
tab
)
;
await
BrowserTestUtils
.
waitForEvent
(
tab
.
linkedBrowser
"
SwapDocShells
"
)
;
assertSearchStringIsInUrlbar
(
SEARCH_STRING
{
win
:
newWindow
}
)
;
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
}
)
;
add_task
(
async
function
move_tab_into_existing_window
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
}
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
let
tab
=
win
.
gBrowser
.
tabs
[
0
]
;
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
Services
.
search
.
defaultEngine
SEARCH_STRING
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
expectedSearchUrl
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
expectedSearchUrl
)
;
await
browserLoadedPromise
;
await
SpecialPowers
.
spawn
(
browser
[
expectedSearchUrl
]
async
url
=
>
{
content
.
history
.
pushState
(
{
}
"
"
url
+
"
&
pc2
=
firefox
"
)
;
}
)
;
tab
=
gBrowser
.
adoptTab
(
tab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
assertSearchStringIsInUrlbar
(
SEARCH_STRING
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
