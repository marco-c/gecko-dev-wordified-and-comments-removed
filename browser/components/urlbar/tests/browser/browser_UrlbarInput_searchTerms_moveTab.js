let
originalEngine
defaultTestEngine
;
const
SEARCH_STRING
=
"
chocolate
cake
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch
"
search_url
:
"
https
:
/
/
www
.
example
.
com
/
"
search_url_get_params
:
"
q
=
{
searchTerms
}
&
pc
=
fake_code
"
}
)
;
defaultTestEngine
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
defaultTestEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
registerCleanupFunction
(
async
function
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
async
function
searchWithTab
(
searchString
tab
=
null
engine
=
defaultTestEngine
)
{
if
(
!
tab
)
{
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
}
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
engine
searchString
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
expectedSearchUrl
)
;
gURLBar
.
focus
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
searchString
fireInputEvent
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
browserLoadedPromise
;
return
{
tab
expectedSearchUrl
}
;
}
function
assertSearchStringIsInUrlbar
(
searchString
window
)
{
Assert
.
equal
(
window
.
gURLBar
.
value
searchString
Search
string
{
searchString
}
should
be
in
the
url
bar
)
;
Assert
.
equal
(
window
.
gBrowser
.
userTypedValue
searchString
{
searchString
}
should
be
the
userTypedValue
)
;
Assert
.
equal
(
window
.
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
invalid
"
"
Pageproxystate
should
be
invalid
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
selectedBrowser
.
showingSearchTerms
true
"
showingSearchTerms
should
be
true
"
)
;
}
add_task
(
async
function
move_tab_into_new_window
(
)
{
let
{
tab
expectedSearchUrl
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
expectedSearchUrl
]
async
url
=
>
{
content
.
history
.
pushState
(
{
}
"
"
url
+
"
&
pc2
=
firefox
"
)
;
}
)
;
let
newWindow
=
gBrowser
.
replaceTabWithWindow
(
tab
)
;
await
BrowserTestUtils
.
waitForEvent
(
tab
.
linkedBrowser
"
SwapDocShells
"
)
;
assertSearchStringIsInUrlbar
(
SEARCH_STRING
newWindow
)
;
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
}
)
;
add_task
(
async
function
move_tab_into_existing_window
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
}
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
let
tab
=
win
.
gBrowser
.
tabs
[
0
]
;
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
defaultTestEngine
SEARCH_STRING
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
expectedSearchUrl
)
;
BrowserTestUtils
.
loadURI
(
browser
expectedSearchUrl
)
;
await
browserLoadedPromise
;
await
SpecialPowers
.
spawn
(
browser
[
expectedSearchUrl
]
async
url
=
>
{
content
.
history
.
pushState
(
{
}
"
"
url
+
"
&
pc2
=
firefox
"
)
;
}
)
;
tab
=
gBrowser
.
adoptTab
(
tab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
assertSearchStringIsInUrlbar
(
SEARCH_STRING
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
