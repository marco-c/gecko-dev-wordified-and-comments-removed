let
originalEngine
defaultTestEngine
;
const
SEARCH_STRING
=
"
chocolate
cake
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch
"
search_url
:
"
https
:
/
/
www
.
example
.
com
/
"
search_url_get_params
:
"
q
=
{
searchTerms
}
&
pc
=
fake_code
"
}
)
;
defaultTestEngine
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
Services
.
search
.
defaultEngine
=
defaultTestEngine
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
search
.
defaultEngine
=
originalEngine
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
function
assertSearchStringIsInUrlbar
(
searchString
)
{
Assert
.
equal
(
gURLBar
.
value
searchString
Search
string
{
searchString
}
should
be
in
the
url
bar
)
;
Assert
.
equal
(
gBrowser
.
userTypedValue
searchString
{
searchString
}
should
be
the
userTypedValue
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
invalid
"
"
Pageproxystate
should
be
invalid
"
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
showingSearchTerms
true
"
showingSearchTerms
should
be
true
"
)
;
}
add_task
(
async
function
ctrl_open
(
)
{
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
defaultTestEngine
SEARCH_STRING
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
expectedSearchUrl
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
SEARCH_STRING
fireInputEvent
:
true
}
)
;
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
altKey
:
true
shiftKey
:
true
}
)
;
let
backgroundTab
=
await
newTabPromise
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
backgroundTab
)
;
assertSearchStringIsInUrlbar
(
SEARCH_STRING
)
;
BrowserTestUtils
.
removeTab
(
backgroundTab
)
;
}
)
;
