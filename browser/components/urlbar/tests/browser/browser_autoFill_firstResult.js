"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
example
.
com
/
"
]
)
;
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
gURLBar
.
_enableAutofillPlaceholder
=
false
;
registerCleanupFunction
(
async
(
)
=
>
{
gURLBar
.
_enableAutofillPlaceholder
=
true
;
}
)
;
}
)
;
add_task
(
async
function
successfulAutofill
(
)
{
await
doInitialAutofillSearch
(
)
;
gURLBar
.
value
=
"
exa
"
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
"
exa
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
exa
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
exa
"
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
exa
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
}
)
;
add_task
(
async
function
firstResultNotAutofill
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
foo
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
!
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
foo
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
foo
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
foo
"
.
length
)
;
}
)
;
add_task
(
async
function
caretNotAtEndOfSearchString
(
)
{
await
doInitialAutofillSearch
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
exam
"
selectionStart
:
"
exa
"
.
length
selectionEnd
:
"
exa
"
.
length
fireInputEvent
:
false
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
exam
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
exa
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
exa
"
.
length
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
selectionNotEmpty
(
)
{
await
doInitialAutofillSearch
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
exam
"
selectionStart
:
"
exa
"
.
length
selectionEnd
:
"
exam
"
.
length
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
exam
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
exa
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
exam
"
.
length
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
successfulAutofillAfterSettingPlaceholder
(
)
{
await
doInitialAutofillSearch
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
exam
"
selectionStart
:
"
exam
"
.
length
selectionEnd
:
"
exam
"
.
length
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
exam
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
cleanUp
(
)
;
}
)
;
add_task
(
async
function
successfulAutofillPlaceholderSelected
(
)
{
await
doInitialAutofillSearch
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
exam
"
selectionStart
:
"
exam
"
.
length
selectionEnd
:
"
example
.
com
/
"
.
length
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
exam
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
cleanUp
(
)
;
}
)
;
async
function
doInitialAutofillSearch
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
ex
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
}
async
function
cleanUp
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
reset
last
search
string
"
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
)
;
}
