"
use
strict
"
;
add_task
(
async
function
test
(
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
example
.
com
/
"
]
)
;
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
ex
"
fireInputEvent
:
true
}
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
!
details
.
autofill
)
;
Assert
.
equal
(
gURLBar
.
value
"
exx
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
exx
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
exx
"
.
length
)
;
goDoCommand
(
"
cmd_undo
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
gURLBar
.
value
"
example
.
com
/
"
)
;
Assert
.
ok
(
!
details
.
autofill
"
Autofill
should
not
be
set
.
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
"
ex
"
.
length
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
"
example
.
com
/
"
.
length
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
