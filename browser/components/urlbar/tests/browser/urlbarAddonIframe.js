addEventListener
(
"
TestEvent
"
event
=
>
{
let
type
=
event
.
detail
.
type
;
dump
(
"
urlbarAddonIframe
.
js
got
TestEvent
type
=
"
+
type
+
"
messageID
=
"
+
event
.
detail
.
messageID
+
"
\
n
"
)
;
switch
(
type
)
{
case
"
function
"
:
callUrlbarFunction
(
event
.
detail
)
;
break
;
case
"
event
"
:
expectEvent
(
event
.
detail
)
;
break
;
}
}
)
;
function
callUrlbarFunction
(
detail
)
{
let
args
=
detail
.
data
;
let
methodName
=
args
.
shift
(
)
;
dump
(
"
urlbarAddonIframe
.
js
calling
urlbar
.
"
+
methodName
+
"
\
n
"
)
;
let
rv
=
urlbar
[
methodName
]
(
.
.
.
args
)
;
ack
(
detail
rv
)
;
}
function
expectEvent
(
detail
)
{
let
type
=
detail
.
data
;
dump
(
"
urlbarAddonIframe
.
js
expecting
event
of
type
"
+
type
+
"
\
n
"
)
;
ack
(
detail
null
0
)
;
addEventListener
(
type
function
onEvent
(
event
)
{
dump
(
"
urlbarAddonIframe
.
js
got
event
of
type
"
+
type
+
"
\
n
"
)
;
if
(
event
.
type
!
=
type
)
{
return
;
}
dump
(
"
urlbarAddonIframe
.
js
got
expected
event
\
n
"
)
;
removeEventListener
(
type
onEvent
)
;
ack
(
detail
event
.
detail
1
)
;
}
)
;
}
function
ack
(
originalEventDetail
ackData
=
null
ackIndex
=
0
)
{
dispatchEvent
(
new
CustomEvent
(
"
TestEventAck
"
{
detail
:
{
messageID
:
originalEventDetail
.
messageID
ackIndex
data
:
ackData
}
}
)
)
;
}
