"
use
strict
"
;
add_task
(
async
function
test_setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
openViewOnFocus
"
false
]
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
http
:
/
/
one
.
mozilla
.
org
/
transition
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
{
uri
:
http
:
/
/
two
.
mozilla
.
org
/
transition
:
PlacesUtils
.
history
.
TRANSITIONS
.
TYPED
}
]
)
;
registerCleanupFunction
(
PlacesUtils
.
history
.
clear
)
;
}
)
;
add_task
(
async
function
test_empty
(
)
{
info
(
"
Test
searching
for
nothing
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
:
SimpleTest
.
waitForFocus
value
:
"
"
fireInputEvent
:
true
}
)
;
let
results
=
[
{
}
]
;
for
(
let
i
=
0
;
i
<
(
await
UrlbarTestUtils
.
getResultCount
(
window
)
)
;
+
+
i
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
delete
result
.
element
;
results
.
push
(
result
)
;
}
for
(
let
str
of
[
"
"
"
"
]
)
{
info
(
Test
searching
for
"
{
str
}
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
:
SimpleTest
.
waitForFocus
value
:
str
fireInputEvent
:
true
}
)
;
Assert
.
ok
(
(
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
)
.
heuristic
"
The
first
result
is
heuristic
"
)
;
let
length
=
await
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
equal
(
length
results
.
length
"
Comparing
results
count
"
)
;
for
(
let
i
=
1
;
i
<
length
;
+
+
i
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
delete
result
.
element
;
Assert
.
deepEqual
(
result
results
[
i
]
Comparing
result
at
index
{
i
}
)
;
}
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
test_backspace_empty
(
)
{
info
(
"
Testing
that
deleting
the
input
value
via
backspace
closes
the
popup
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
:
SimpleTest
.
waitForFocus
value
:
"
"
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
}
)
;
}
)
;
