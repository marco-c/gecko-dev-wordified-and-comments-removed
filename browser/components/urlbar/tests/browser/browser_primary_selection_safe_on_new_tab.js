"
use
strict
"
;
let
tabs
=
[
]
;
let
supportsPrimary
=
Services
.
clipboard
.
supportsSelectionClipboard
(
)
;
const
NON_EMPTY_URL
=
"
data
:
text
/
html
Hello
"
;
const
TEXT_FOR_PRIMARY
=
"
Text
for
PRIMARY
selection
"
;
add_task
(
async
function
(
)
{
tabs
.
push
(
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
NON_EMPTY_URL
)
)
;
gURLBar
.
select
(
)
;
Assert
.
equal
(
gURLBar
.
inputField
.
selectionStart
0
)
;
Assert
.
equal
(
gURLBar
.
inputField
.
selectionEnd
gURLBar
.
inputField
.
value
.
length
)
;
if
(
supportsPrimary
)
{
clipboardHelper
.
copyStringToClipboard
(
TEXT_FOR_PRIMARY
Services
.
clipboard
.
kSelectionClipboard
)
;
}
tabs
.
push
(
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
(
)
=
>
{
let
userInput
=
window
.
windowUtils
.
setHandlingUserInput
(
true
)
;
try
{
BrowserOpenTab
(
)
;
}
finally
{
userInput
.
destruct
(
)
;
}
}
waitForLoad
:
false
}
)
)
;
if
(
!
supportsPrimary
)
{
info
(
"
Primary
selection
not
supported
.
Skipping
assertion
.
"
)
;
return
;
}
let
primaryAsText
=
SpecialPowers
.
getClipboardData
(
"
text
/
unicode
"
SpecialPowers
.
Ci
.
nsIClipboard
.
kSelectionClipboard
)
;
Assert
.
equal
(
primaryAsText
TEXT_FOR_PRIMARY
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
