add_task
(
async
function
detach
(
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
&
&
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIEnvironment
)
.
get
(
"
MOZ_CHAOSMODE
"
)
)
{
Assert
.
ok
(
true
"
Skipping
test
in
chaos
mode
on
Mac
"
)
;
return
;
}
UrlbarPrefs
.
clear
(
"
formatting
.
enabled
"
)
;
Assert
.
ok
(
UrlbarPrefs
.
get
(
"
formatting
.
enabled
"
)
"
Formatting
is
enabled
by
default
"
)
;
info
(
"
Waiting
for
new
tab
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
detach
"
}
)
;
let
winPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
info
(
"
Detaching
tab
"
)
;
let
win
=
gBrowser
.
replaceTabWithWindow
(
tab
{
}
)
;
info
(
"
Waiting
for
new
window
"
)
;
await
winPromise
;
info
(
"
Waiting
for
delayed
startup
in
new
window
"
)
;
await
win
.
delayedStartupPromise
;
info
(
"
Waiting
for
tick
"
)
;
await
TestUtils
.
waitForTick
(
)
;
assertValue
(
"
<
https
:
/
/
>
example
.
com
<
/
detach
>
"
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
function
assertValue
(
expectedValue
win
=
window
)
{
let
selectionController
=
win
.
gURLBar
.
editor
.
selectionController
;
let
selection
=
selectionController
.
getSelection
(
selectionController
.
SELECTION_URLSECONDARY
)
;
let
value
=
win
.
gURLBar
.
editor
.
rootElement
.
textContent
;
let
result
=
"
"
;
for
(
let
i
=
0
;
i
<
selection
.
rangeCount
;
i
+
+
)
{
let
range
=
selection
.
getRangeAt
(
i
)
.
toString
(
)
;
let
pos
=
value
.
indexOf
(
range
)
;
result
+
=
value
.
substring
(
0
pos
)
+
"
<
"
+
range
+
"
>
"
;
value
=
value
.
substring
(
pos
+
range
.
length
)
;
}
result
+
=
value
;
Assert
.
equal
(
result
expectedValue
"
Correct
part
of
the
url
is
de
-
emphasized
"
)
;
}
