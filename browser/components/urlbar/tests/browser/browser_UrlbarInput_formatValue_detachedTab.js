async
function
detachTab
(
tab
)
{
let
winPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
info
(
"
Detaching
tab
"
)
;
let
win
=
gBrowser
.
replaceTabWithWindow
(
tab
{
}
)
;
info
(
"
Waiting
for
new
window
"
)
;
await
winPromise
;
info
(
"
Waiting
for
delayed
startup
in
new
window
"
)
;
await
win
.
delayedStartupPromise
;
info
(
"
Waiting
for
tick
"
)
;
await
TestUtils
.
waitForTick
(
)
;
return
win
;
}
add_task
(
async
function
detach
(
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
&
&
Services
.
env
.
get
(
"
MOZ_CHAOSMODE
"
)
)
{
Assert
.
ok
(
true
"
Skipping
test
in
chaos
mode
on
Mac
"
)
;
return
;
}
let
originalTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
original
-
tab
"
}
)
;
let
tabToDetach
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
detach
"
}
)
;
let
win
=
await
detachTab
(
tabToDetach
)
;
await
UrlbarTestUtils
.
checkFormatting
(
win
UrlbarTestUtils
.
trimURL
(
"
<
https
:
/
/
>
example
.
com
<
/
detach
>
"
)
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
UrlbarTestUtils
.
checkFormatting
(
window
UrlbarTestUtils
.
trimURL
(
"
<
https
:
/
/
>
example
.
com
<
/
original
-
tab
>
"
)
)
;
gBrowser
.
removeTab
(
originalTab
)
;
}
)
;
add_task
(
async
function
detach_emptyTab
(
)
{
let
originalTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
original
-
tab
"
}
)
;
let
emptyTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
)
;
gURLBar
.
focus
(
)
;
ok
(
gURLBar
.
focused
"
urlbar
is
focused
"
)
;
is
(
gURLBar
.
value
"
"
"
urlbar
is
empty
"
)
;
let
focusPromise
=
BrowserTestUtils
.
waitForEvent
(
originalTab
.
linkedBrowser
"
focus
"
)
;
let
win
=
await
detachTab
(
emptyTab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
focusPromise
;
ok
(
!
gURLBar
.
focused
"
urlbar
is
not
focused
"
)
;
await
UrlbarTestUtils
.
checkFormatting
(
window
UrlbarTestUtils
.
trimURL
(
"
<
https
:
/
/
>
example
.
com
<
/
original
-
tab
>
"
)
)
;
gBrowser
.
removeTab
(
originalTab
)
;
}
)
;
