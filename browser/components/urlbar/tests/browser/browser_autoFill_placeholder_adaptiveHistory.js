"
use
strict
"
;
add_task
(
async
function
(
)
{
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
UrlbarPrefs
.
set
(
"
autoFill
.
adaptiveHistory
.
enabled
"
true
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
example
.
com
/
test
"
}
]
)
;
await
UrlbarUtils
.
addToInputHistory
(
"
http
:
/
/
example
.
com
/
test
"
"
exa
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
"
exa
"
fireInputEvent
:
true
}
)
;
const
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
win
0
)
;
Assert
.
ok
(
details
.
autofill
)
;
Assert
.
equal
(
win
.
gURLBar
.
value
"
example
.
com
/
test
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
selectionStart
"
exa
"
.
length
)
;
Assert
.
equal
(
win
.
gURLBar
.
selectionEnd
"
example
.
com
/
test
"
.
length
)
;
await
searchAndCheck
(
"
e
"
"
example
.
com
/
test
"
win
)
;
await
searchAndCheck
(
"
ex
"
"
example
.
com
/
test
"
win
)
;
await
searchAndCheck
(
"
exa
"
"
example
.
com
/
test
"
win
)
;
UrlbarPrefs
.
clear
(
"
autoFill
.
adaptiveHistory
.
enabled
"
)
;
await
cleanUp
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
async
function
searchAndCheck
(
searchString
expectedAutofillValue
win
)
{
win
.
gURLBar
.
value
=
searchString
;
UrlbarTestUtils
.
fireInputEvent
(
win
)
;
Assert
.
equal
(
win
.
gURLBar
.
value
expectedAutofillValue
)
;
Assert
.
equal
(
win
.
gURLBar
.
selectionStart
searchString
.
length
)
;
Assert
.
equal
(
win
.
gURLBar
.
selectionEnd
expectedAutofillValue
.
length
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
}
async
function
cleanUp
(
win
)
{
await
UrlbarTestUtils
.
promisePopupClose
(
win
(
)
=
>
win
.
gURLBar
.
blur
(
)
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
