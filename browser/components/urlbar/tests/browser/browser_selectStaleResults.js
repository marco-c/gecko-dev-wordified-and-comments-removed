"
use
strict
"
;
add_task
(
async
function
test
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
let
maxResults
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
;
let
halfResults
=
Math
.
floor
(
maxResults
/
2
)
;
for
(
let
i
=
0
;
i
<
halfResults
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
mochi
.
test
:
8888
/
"
+
i
title
:
"
xx
"
+
i
}
)
;
}
for
(
let
i
=
0
;
i
<
maxResults
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
example
.
com
/
"
+
i
title
:
"
x
"
+
i
}
)
;
}
gURLBar
.
focus
(
)
;
await
promiseAutocompleteResultPopup
(
"
x
"
window
true
)
;
let
row
=
gURLBar
.
view
.
_rows
.
children
[
halfResults
]
;
let
mutationPromise
=
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
mutations
=
>
{
for
(
let
mut
of
mutations
)
{
if
(
mut
.
attributeName
=
=
"
stale
"
&
&
!
row
.
hasAttribute
(
"
stale
"
)
)
{
observer
.
disconnect
(
)
;
resolve
(
)
;
break
;
}
}
}
)
;
observer
.
observe
(
row
{
attributes
:
true
}
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
mutationPromise
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
await
gURLBar
.
lastQueryContextPromise
;
Assert
.
ok
(
gURLBar
.
controller
.
_lastQueryContextWrapper
)
;
let
{
queryContext
}
=
gURLBar
.
controller
.
_lastQueryContextWrapper
;
Assert
.
ok
(
queryContext
)
;
Assert
.
equal
(
queryContext
.
results
.
length
halfResults
+
1
)
;
let
items
=
Array
.
from
(
gURLBar
.
view
.
_rows
.
children
)
.
filter
(
r
=
>
gURLBar
.
view
.
_isRowVisible
(
r
)
)
;
Assert
.
equal
(
items
.
length
maxResults
)
;
for
(
let
i
=
1
;
i
<
maxResults
;
i
+
+
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedIndex
(
window
)
i
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
}
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedIndex
(
window
)
-
1
)
;
Assert
.
equal
(
gURLBar
.
view
.
oneOffSearchButtons
.
selectedButtonIndex
0
)
;
for
(
let
i
=
maxResults
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedIndex
(
window
)
i
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
