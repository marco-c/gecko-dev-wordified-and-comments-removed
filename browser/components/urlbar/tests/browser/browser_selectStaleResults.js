"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
sys
.
mjs
"
}
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quickactions
"
false
]
]
}
)
;
let
originalRemoveStaleRowsTimeout
=
UrlbarView
.
removeStaleRowsTimeout
;
UrlbarView
.
removeStaleRowsTimeout
=
1000
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarView
.
removeStaleRowsTimeout
=
originalRemoveStaleRowsTimeout
;
}
)
;
}
)
;
add_task
(
async
function
viewContainsStaleRows
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
let
maxResults
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
;
let
halfResults
=
Math
.
floor
(
maxResults
/
2
)
;
for
(
let
i
=
0
;
i
<
halfResults
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
mochi
.
test
:
8888
/
"
+
i
title
:
"
xx
"
+
i
}
)
;
}
for
(
let
i
=
0
;
i
<
maxResults
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
example
.
com
/
"
+
i
title
:
"
x
"
+
i
}
)
;
}
gURLBar
.
focus
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
x
"
fireInputEvent
:
true
}
)
;
let
row
=
UrlbarTestUtils
.
getRowAt
(
window
halfResults
)
;
let
mutationPromise
=
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
mutations
=
>
{
for
(
let
mut
of
mutations
)
{
if
(
mut
.
attributeName
=
=
"
stale
"
&
&
!
row
.
hasAttribute
(
"
stale
"
)
)
{
observer
.
disconnect
(
)
;
resolve
(
)
;
break
;
}
}
}
)
;
observer
.
observe
(
row
{
attributes
:
true
}
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
info
(
"
Waiting
for
'
stale
'
attribute
to
be
removed
.
.
.
"
)
;
await
mutationPromise
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
info
(
"
Waiting
for
the
search
to
stop
.
.
.
"
)
;
await
gURLBar
.
lastQueryContextPromise
;
Assert
.
ok
(
gURLBar
.
controller
.
_lastQueryContextWrapper
)
;
let
{
queryContext
}
=
gURLBar
.
controller
.
_lastQueryContextWrapper
;
Assert
.
ok
(
queryContext
)
;
Assert
.
equal
(
queryContext
.
results
.
length
halfResults
+
1
)
;
let
items
=
Array
.
from
(
UrlbarTestUtils
.
getResultsContainer
(
window
)
.
children
)
.
filter
(
r
=
>
BrowserTestUtils
.
is_visible
(
r
)
)
;
Assert
.
equal
(
items
.
length
maxResults
)
;
for
(
let
i
=
1
;
i
<
maxResults
;
i
+
+
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
i
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
equal
(
result
.
element
.
row
.
result
.
rowIndex
i
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
}
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
-
1
)
;
Assert
.
equal
(
gURLBar
.
view
.
oneOffSearchButtons
.
selectedButtonIndex
0
)
;
for
(
let
i
=
maxResults
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
i
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
staleReplacedWithFresh
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
let
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
url
:
getRootDirectory
(
gTestPath
)
+
"
searchSuggestionEngineSlow
.
xml
"
}
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
await
Services
.
search
.
setDefault
(
engine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
let
maxResults
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
;
for
(
let
i
=
0
;
i
<
maxResults
;
i
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
example
.
com
/
"
+
i
title
:
"
test
"
+
i
}
)
;
}
gURLBar
.
focus
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
tes
"
fireInputEvent
:
true
}
)
;
let
count
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
equal
(
count
maxResults
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
result
.
heuristic
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
ok
(
result
.
searchParams
)
;
Assert
.
equal
(
result
.
searchParams
.
suggestion
"
tesfoo
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
2
)
;
Assert
.
ok
(
result
.
searchParams
)
;
Assert
.
equal
(
result
.
searchParams
.
suggestion
"
tesbar
"
)
;
for
(
let
i
=
3
;
i
<
maxResults
;
i
+
+
)
{
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
result
.
title
"
test
"
+
(
maxResults
-
i
+
2
)
)
;
}
let
mutationPromise
=
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
mutations
=
>
{
let
row
=
UrlbarTestUtils
.
getRowAt
(
window
maxResults
-
2
)
;
if
(
row
&
&
row
.
_elements
.
get
(
"
title
"
)
.
textContent
=
=
"
test2
"
)
{
observer
.
disconnect
(
)
;
resolve
(
)
;
}
}
)
;
observer
.
observe
(
UrlbarTestUtils
.
getResultsContainer
(
window
)
{
subtree
:
true
characterData
:
true
childList
:
true
attributes
:
true
}
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
t
"
)
;
info
(
"
Waiting
for
the
'
test2
'
row
.
.
.
"
)
;
await
mutationPromise
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
info
(
"
Waiting
for
the
search
to
stop
.
.
.
"
)
;
await
gURLBar
.
lastQueryContextPromise
;
count
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
equal
(
count
maxResults
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
ok
(
result
.
heuristic
)
;
Assert
.
equal
(
result
.
element
.
row
.
result
.
rowIndex
0
)
;
for
(
let
i
=
1
;
i
<
maxResults
;
i
+
+
)
{
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
result
.
title
"
test
"
+
(
maxResults
-
i
)
)
;
Assert
.
equal
(
result
.
element
.
row
.
result
.
rowIndex
i
)
;
}
for
(
let
i
=
1
;
i
<
maxResults
;
i
+
+
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
i
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
}
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
-
1
)
;
Assert
.
equal
(
gURLBar
.
view
.
oneOffSearchButtons
.
selectedButtonIndex
0
)
;
for
(
let
i
=
maxResults
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
i
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
Services
.
search
.
setDefault
(
oldDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
}
)
;
