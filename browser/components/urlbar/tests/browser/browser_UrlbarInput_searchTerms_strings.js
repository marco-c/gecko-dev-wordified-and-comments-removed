ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarUtils
:
"
moz
-
src
:
/
/
/
browser
/
components
/
urlbar
/
UrlbarUtils
.
sys
.
mjs
"
}
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
let
cleanup
=
await
installPersistTestEngines
(
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
cleanup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
search_strings
(
)
{
const
searches
=
[
"
chocolate
"
"
chocolate
cake
"
"
chocolate
;
?
&
=
+
-
_
!
~
*
'
(
)
#
cake
"
"
what
is
255
.
255
.
255
.
255
"
"
what
is
https
:
/
/
"
'
"
chocolate
cake
"
-
recipes
'
"
window
.
location
how
to
use
"
"
http
"
"
https
"
"
h
"
.
repeat
(
UrlbarUtils
.
MAX_TEXT_LENGTH
)
]
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
for
(
let
searchString
of
searches
)
{
info
(
"
Search
for
term
:
"
searchString
)
;
let
[
searchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
Services
.
search
.
defaultEngine
searchString
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
searchUrl
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
searchUrl
)
;
await
browserLoadedPromise
;
assertSearchStringIsInUrlbar
(
searchString
)
;
info
(
"
Check
that
no
formatting
is
applied
.
"
)
;
await
UrlbarTestUtils
.
checkFormatting
(
window
searchString
)
;
}
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
