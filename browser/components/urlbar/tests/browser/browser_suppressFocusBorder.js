let
TEST_RESULT
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
"
http
:
/
/
mozilla
.
org
/
"
}
)
;
class
AwaitPromiseProvider
extends
UrlbarTestUtils
.
TestProvider
{
constructor
(
args
promise
)
{
super
(
args
)
;
this
.
_promise
=
promise
;
}
async
startQuery
(
context
add
)
{
await
this
.
_promise
;
for
(
let
result
of
this
.
_results
)
{
add
(
this
result
)
;
}
}
}
add_task
(
async
function
afterMousedown_topSites
(
)
{
await
withAwaitProvider
(
{
results
:
[
TEST_RESULT
]
priority
:
Infinity
}
getSuppressFocusPromise
(
)
async
(
)
=
>
{
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
)
"
Sanity
check
:
the
Urlbar
does
not
have
the
supress
-
focus
-
border
attribute
.
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
let
result
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
0
)
;
Assert
.
ok
(
result
"
The
provider
returned
a
result
after
waiting
for
the
suppress
-
focus
-
border
attribute
.
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
)
"
The
Urlbar
no
longer
has
the
supress
-
focus
-
border
attribute
after
close
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
openLocation_topSites
(
)
{
await
withAwaitProvider
(
{
results
:
[
TEST_RESULT
]
priority
:
Infinity
}
getSuppressFocusPromise
(
)
async
(
)
=
>
{
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
)
"
Sanity
check
:
the
Urlbar
does
not
have
the
supress
-
focus
-
border
attribute
.
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
l
"
{
accelKey
:
true
}
)
;
}
)
;
let
result
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
0
)
;
Assert
.
ok
(
result
"
The
provider
returned
a
result
after
waiting
for
the
suppress
-
focus
-
border
attribute
.
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
)
"
The
Urlbar
no
longer
has
the
supress
-
focus
-
border
attribute
after
close
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
afterMousedown_noTopSites
(
)
{
await
withAwaitProvider
(
{
results
:
[
]
priority
:
Infinity
}
getSuppressFocusPromise
(
)
async
(
)
=
>
{
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
)
"
Sanity
check
:
the
Urlbar
does
not
have
the
supress
-
focus
-
border
attribute
.
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
The
popup
is
not
open
.
"
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
)
"
The
Urlbar
no
longer
has
the
supress
-
focus
-
border
attribute
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
newTab
(
)
{
let
tabCount
=
gBrowser
.
tabs
.
length
;
let
tabOpenPromise
=
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
tabCount
+
1
?
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
:
false
"
Waiting
for
background
about
:
newtab
to
open
.
"
)
;
EventUtils
.
synthesizeKey
(
"
t
"
{
accelKey
:
true
}
)
;
let
tab
=
await
tabOpenPromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
hasAttribute
(
"
focused
"
)
"
Waiting
for
the
Urlbar
to
become
focused
.
"
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
"
The
Urlbar
does
not
have
the
suppress
-
focus
-
border
attribute
.
"
)
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
newTab_alreadyOpen
(
)
{
await
withAwaitProvider
(
{
results
:
[
TEST_RESULT
]
priority
:
Infinity
}
getSuppressFocusPromise
(
)
async
(
)
=
>
{
let
tabCount
=
gBrowser
.
tabs
.
length
;
let
tabOpenPromise
=
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
tabCount
+
1
?
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
:
false
"
Waiting
for
background
about
:
newtab
to
open
.
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
l
"
{
accelKey
:
true
}
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
t
"
{
accelKey
:
true
}
)
;
let
tab
=
await
tabOpenPromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Waiting
for
the
Urlbar
panel
to
close
.
"
)
;
Assert
.
ok
(
!
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
"
The
Urlbar
does
not
have
the
suppress
-
focus
-
border
attribute
.
"
)
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
function
getSuppressFocusPromise
(
win
=
window
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
(
)
=
>
{
if
(
win
.
gURLBar
.
hasAttribute
(
"
suppress
-
focus
-
border
"
)
&
&
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
)
{
resolve
(
)
;
observer
.
disconnect
(
)
;
}
}
)
;
observer
.
observe
(
win
.
gURLBar
.
textbox
{
attributes
:
true
attributeFilter
:
[
"
suppress
-
focus
-
border
"
]
}
)
;
}
)
;
}
async
function
withAwaitProvider
(
args
promise
callback
)
{
let
provider
=
new
AwaitPromiseProvider
(
args
promise
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
try
{
await
callback
(
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
finally
{
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
}
