"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarQuickSuggest
.
jsm
"
}
)
;
const
TEST_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
quicksuggest
.
sjs
"
;
const
TEST_DATA
=
[
{
id
:
1
url
:
{
TEST_URL
}
?
q
=
frabbits
title
:
"
frabbits
"
keywords
:
[
"
frab
"
]
}
]
;
const
ABOUT_BLANK
=
"
about
:
blank
"
;
const
SUGGESTIONS_PREF
=
"
browser
.
search
.
suggest
.
enabled
"
;
const
PRIVATE_SUGGESTIONS_PREF
=
"
browser
.
search
.
suggest
.
enabled
.
private
"
;
const
ONBOARDING_COUNT_PREF
=
"
quicksuggest
.
onboardingCount
"
;
const
ONBOARDING_MAX_COUNT_PREF
=
"
quicksuggest
.
onboardingMaxCount
"
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
async
function
assertIsQuickSuggest
(
index
=
-
1
)
{
if
(
index
<
0
)
{
index
=
UrlbarTestUtils
.
getResultCount
(
window
)
-
1
;
Assert
.
greater
(
index
-
1
"
Sanity
check
:
Result
count
should
be
>
0
"
)
;
}
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
index
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
result
.
url
{
TEST_URL
}
?
q
=
frabbits
)
;
return
result
;
}
async
function
assertNoQuickSuggestResults
(
)
{
for
(
let
i
=
0
;
i
<
UrlbarTestUtils
.
getResultCount
(
window
)
;
i
+
+
)
{
let
r
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
ok
(
r
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
URL
|
|
!
r
.
url
.
includes
(
TEST_URL
)
Result
at
index
{
i
}
should
not
be
a
QuickSuggest
result
)
;
}
}
function
resetOnboardingCount
(
)
{
UrlbarPrefs
.
clear
(
ONBOARDING_COUNT_PREF
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Sanity
check
:
Initial
onboarding
count
is
zero
"
)
;
}
add_task
(
async
function
init
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
true
]
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
let
engine
=
await
Services
.
search
.
addEngineWithDetails
(
"
Test
"
{
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
Services
.
search
.
setDefault
(
engine
)
;
await
UrlbarQuickSuggest
.
init
(
)
;
await
UrlbarQuickSuggest
.
_processSuggestionsJSON
(
TEST_DATA
)
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
}
)
;
add_task
(
async
function
basic_test
(
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
ABOUT_BLANK
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
}
)
;
await
assertIsQuickSuggest
(
1
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
async
function
test_suggestions_disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGESTIONS_PREF
false
]
]
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
ABOUT_BLANK
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
}
)
;
await
sleep
(
100
)
;
Assert
.
ok
(
window
.
gURLBar
.
view
.
_rows
.
children
.
length
=
=
1
"
There
are
no
additional
suggestions
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_suggestions_disabled_private
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGESTIONS_PREF
true
]
[
PRIVATE_SUGGESTIONS_PREF
false
]
]
}
)
;
let
window
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
browser
=
window
.
gBrowser
.
selectedTab
.
linkedBrowser
;
BrowserTestUtils
.
loadURI
(
browser
ABOUT_BLANK
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
ABOUT_BLANK
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
}
)
;
await
sleep
(
100
)
;
Assert
.
ok
(
window
.
gURLBar
.
view
.
_rows
.
children
.
length
=
=
1
"
There
are
no
additional
suggestions
"
)
;
await
BrowserTestUtils
.
closeWindow
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
onboarding_endOfEngagement
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
resetOnboardingCount
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
bogus
"
fireInputEvent
:
true
}
)
;
await
assertNoQuickSuggestResults
(
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Onboarding
count
should
remain
zero
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
fireInputEvent
:
true
}
)
;
let
result
=
await
assertIsQuickSuggest
(
)
;
let
helpButton
=
result
.
element
.
row
.
_elements
.
get
(
"
helpButton
"
)
;
Assert
.
ok
(
helpButton
"
The
help
button
should
be
present
"
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Onboarding
count
should
remain
zero
before
engagement
ends
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
1
"
Onboarding
count
should
be
incremented
after
engagement
ends
"
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
onboarding_notEndOfEngagement
(
)
{
resetOnboardingCount
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
fireInputEvent
:
true
}
)
;
let
result
=
await
assertIsQuickSuggest
(
1
)
;
let
helpButton
=
result
.
element
.
row
.
_elements
.
get
(
"
helpButton
"
)
;
Assert
.
ok
(
helpButton
"
The
help
button
should
be
present
"
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Onboarding
count
should
remain
zero
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
bogus
"
fireInputEvent
:
true
}
)
;
await
assertNoQuickSuggestResults
(
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Onboarding
count
should
remain
zero
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
gURLBar
.
blur
(
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Onboarding
count
should
be
remain
zero
after
engagement
ends
"
)
;
}
)
;
add_task
(
async
function
onboarding_abandonment
(
)
{
resetOnboardingCount
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
fireInputEvent
:
true
}
)
;
let
result
=
await
assertIsQuickSuggest
(
1
)
;
let
helpButton
=
result
.
element
.
row
.
_elements
.
get
(
"
helpButton
"
)
;
Assert
.
ok
(
helpButton
"
The
help
button
should
be
present
"
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Onboarding
count
should
remain
zero
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
gURLBar
.
blur
(
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
0
"
Onboarding
count
should
be
remain
zero
after
abandoning
engagement
"
)
;
}
)
;
add_task
(
async
function
onboarding_maxCount
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
resetOnboardingCount
(
)
;
let
maxCount
=
UrlbarPrefs
.
get
(
ONBOARDING_MAX_COUNT_PREF
)
;
Assert
.
greater
(
maxCount
0
"
Sanity
check
:
Default
onboarding
max
count
pref
exists
and
is
>
0
"
)
;
for
(
let
count
=
1
;
count
<
=
maxCount
;
count
+
+
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
fireInputEvent
:
true
}
)
;
let
result
=
await
assertIsQuickSuggest
(
)
;
let
helpButton
=
result
.
element
.
row
.
_elements
.
get
(
"
helpButton
"
)
;
Assert
.
ok
(
helpButton
"
The
help
button
should
be
present
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
count
"
Onboarding
count
should
be
incremented
after
the
engagement
ends
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
bogus
"
fireInputEvent
:
true
}
)
;
await
assertNoQuickSuggestResults
(
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
count
"
Onboarding
count
should
remain
the
same
after
not
showing
a
QS
result
"
)
;
}
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
fireInputEvent
:
true
}
)
;
let
result
=
await
assertIsQuickSuggest
(
)
;
let
helpButton
=
result
.
element
.
row
.
_elements
.
get
(
"
helpButton
"
)
;
Assert
.
ok
(
!
helpButton
"
The
help
button
should
be
absent
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
maxCount
"
Onboarding
count
should
remain
the
max
count
"
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
