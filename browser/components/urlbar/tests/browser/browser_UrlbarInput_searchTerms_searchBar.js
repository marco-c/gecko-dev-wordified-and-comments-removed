let
defaultTestEngine
originalEngine
;
const
{
CustomizableUITestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
jsm
"
)
;
const
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
const
SEARCH_STRING
=
"
example_string
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
widget
.
inNavBar
"
true
]
[
"
browser
.
urlbar
.
showSearchTerms
.
shouldShow
"
true
]
]
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch
"
search_url
:
"
https
:
/
/
www
.
example
.
com
/
"
search_url_get_params
:
"
q
=
{
searchTerms
}
&
pc
=
fake_code
"
}
)
;
defaultTestEngine
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
defaultTestEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
registerCleanupFunction
(
async
function
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
}
)
;
function
assertSearchStringIsNotInUrlbar
(
searchString
)
{
Assert
.
notEqual
(
gURLBar
.
value
searchString
Search
string
{
searchString
}
should
not
be
in
the
url
bar
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
valid
"
"
Pageproxystate
should
be
valid
"
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
showingSearchTerms
false
"
showingSearchTerms
should
be
false
"
)
;
Assert
.
notEqual
(
gBrowser
.
userTypedValue
searchString
{
searchString
}
should
not
be
the
user
typed
value
)
;
}
add_task
(
async
function
search_bar_on
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
gCUITestUtils
.
addSearchBar
(
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
https
:
/
/
www
.
example
.
com
/
?
q
=
{
SEARCH_STRING
}
&
pc
=
fake_code
)
;
let
searchBar
=
BrowserSearch
.
searchBar
;
searchBar
.
value
=
SEARCH_STRING
;
searchBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
browserLoadedPromise
;
assertSearchStringIsNotInUrlbar
(
SEARCH_STRING
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
search_bar_on_with_url_bar_search
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
gCUITestUtils
.
addSearchBar
(
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
https
:
/
/
www
.
example
.
com
/
?
q
=
{
SEARCH_STRING
}
&
pc
=
fake_code
)
;
gURLBar
.
focus
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
SEARCH_STRING
fireInputEvent
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
browserLoadedPromise
;
assertSearchStringIsNotInUrlbar
(
SEARCH_STRING
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
