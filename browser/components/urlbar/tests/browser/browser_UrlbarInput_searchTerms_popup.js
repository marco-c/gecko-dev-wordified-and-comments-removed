function
waitForPopupNotification
(
)
{
let
promisePopupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
"
test
-
notification
"
"
This
is
a
sample
popup
.
"
)
;
return
promisePopupShown
;
}
const
SEARCH_TERM
=
"
chocolate
"
;
const
PREF_SEARCHTERMS
=
"
browser
.
urlbar
.
showSearchTerms
.
enabled
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
true
]
]
}
)
;
let
cleanup
=
await
installPersistTestEngines
(
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
cleanup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
generic_popup_when_persist_is_enabled
(
)
{
let
{
tab
expectedSearchUrl
}
=
await
searchWithTab
(
SEARCH_TERM
)
;
await
waitForPopupNotification
(
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
valid
"
"
Urlbar
should
have
a
valid
pageproxystate
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
expectedSearchUrl
)
"
Search
url
should
be
in
the
urlbar
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
generic_popup_no_revert_when_persist_is_disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_SEARCHTERMS
false
]
]
}
)
;
let
{
tab
}
=
await
searchWithTab
(
SEARCH_TERM
null
Services
.
search
.
defaultEngine
false
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
SEARCH_TERM
}
)
;
gURLBar
.
blur
(
)
;
await
waitForPopupNotification
(
)
;
await
TestUtils
.
waitForTick
(
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
invalid
"
"
Urlbar
should
not
be
reverted
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
SEARCH_TERM
"
User
typed
value
should
remain
in
urlbar
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
