"
use
strict
"
;
const
CONFIG
=
[
{
identifier
:
"
defaultEngine
"
base
:
{
urls
:
{
trending
:
{
base
:
"
https
:
/
/
example
.
com
/
browser
/
browser
/
components
/
search
/
test
/
browser
/
trendingSuggestionEngine
.
sjs
"
method
:
"
GET
"
}
}
}
}
{
identifier
:
"
generalEngine
"
base
:
{
classification
:
"
general
"
}
}
]
;
var
appDefaultEngine
extraEngine
extraPrivateEngine
expectedString
;
var
tabs
=
[
]
;
var
noEngineString
;
SearchTestUtils
.
init
(
this
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
let
originalOrder
=
(
await
Services
.
search
.
getEngines
(
)
)
.
map
(
e
=
>
e
.
id
)
;
await
SearchTestUtils
.
updateRemoteSettingsConfig
(
CONFIG
)
;
appDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
[
noEngineString
expectedString
]
=
(
await
document
.
l10n
.
formatMessages
(
[
{
id
:
"
urlbar
-
placeholder
"
}
{
id
:
"
urlbar
-
placeholder
-
with
-
name
"
args
:
{
name
:
appDefaultEngine
.
name
}
}
]
)
)
.
map
(
msg
=
>
msg
.
attributes
[
0
]
.
value
)
;
let
rootUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
mochi
.
test
:
8888
/
"
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
extraEngine
"
search_url
:
"
https
:
/
/
mochi
.
test
:
8888
/
"
suggest_url
:
{
rootUrl
}
/
searchSuggestionEngine
.
sjs
}
)
;
extraEngine
=
Services
.
search
.
getEngineByName
(
"
extraEngine
"
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
extraPrivateEngine
"
search_url
:
"
https
:
/
/
mochi
.
test
:
8888
/
"
suggest_url
:
{
rootUrl
}
/
searchSuggestionEngine
.
sjs
}
)
;
extraPrivateEngine
=
Services
.
search
.
getEngineByName
(
"
extraPrivateEngine
"
)
;
let
urlTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
mozilla
"
)
;
BrowserTestUtils
.
removeTab
(
urlTab
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
recentsearches
.
featureGate
"
false
]
[
"
browser
.
urlbar
.
trending
.
featureGate
"
true
]
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
[
"
browser
.
urlbar
.
suggest
.
trending
"
true
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
for
(
let
[
index
id
]
of
originalOrder
.
entries
(
)
)
{
let
engine
=
Services
.
search
.
getEngineById
(
id
)
;
Services
.
search
.
moveEngine
(
engine
index
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_change_default_engine_updates_placeholder
(
)
{
tabs
.
push
(
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
)
;
await
Services
.
search
.
setDefault
(
extraEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
match
the
default
placeholder
for
non
-
built
-
in
engines
.
"
)
;
Assert
.
equal
(
gURLBar
.
placeholder
noEngineString
)
;
await
Services
.
search
.
setDefault
(
appDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
equal
(
gURLBar
.
placeholder
expectedString
)
;
}
)
;
add_task
(
async
function
test_delayed_update_placeholder
(
)
{
await
doDelayedUpdatePlaceholderTest
(
{
defaultEngine
:
extraEngine
}
)
;
await
doDelayedUpdatePlaceholderTest
(
{
defaultEngine
:
appDefaultEngine
}
)
;
}
)
;
async
function
doDelayedUpdatePlaceholderTest
(
{
defaultEngine
}
)
{
info
(
"
Set
default
search
engine
"
)
;
await
Services
.
search
.
setDefault
(
defaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
info
(
"
Clear
placeholder
cache
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
placeholderName
"
)
;
info
(
"
Open
a
new
window
"
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
Assert
.
equal
(
newWin
.
gURLBar
.
placeholder
noEngineString
"
Placeholder
should
be
unchanged
.
"
)
;
Assert
.
deepEqual
(
newWin
.
document
.
l10n
.
getAttributes
(
newWin
.
gURLBar
.
inputField
)
{
id
:
"
urlbar
-
placeholder
"
args
:
null
}
"
Placeholder
data
should
be
unchanged
.
"
)
;
info
(
"
Simulate
user
interaction
"
)
;
let
urlTab
=
await
BrowserTestUtils
.
addTab
(
newWin
.
gBrowser
"
about
:
mozilla
"
)
;
await
BrowserTestUtils
.
switchTab
(
newWin
.
gBrowser
urlTab
)
;
if
(
defaultEngine
.
isAppProvided
)
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
newWin
.
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
ok
(
true
"
Placeholder
should
be
updated
"
)
;
}
else
{
await
new
Promise
(
r
=
>
setTimeout
(
r
1000
)
)
;
Assert
.
equal
(
newWin
.
gURLBar
.
placeholder
noEngineString
"
Placeholder
should
be
unchanged
.
"
)
;
}
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
add_task
(
async
function
test_private_window_no_separate_engine
(
)
{
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
Services
.
search
.
setDefault
(
extraEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
match
the
default
placeholder
for
non
-
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
noEngineString
)
;
await
Services
.
search
.
setDefault
(
appDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
expectedString
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_private_window_separate_engine
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
"
true
]
]
}
)
;
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
Services
.
search
.
setDefault
(
appDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
Services
.
search
.
setDefaultPrivate
(
extraPrivateEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
match
the
default
placeholder
for
non
-
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
noEngineString
)
;
await
Services
.
search
.
setDefault
(
extraEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
Services
.
search
.
setDefaultPrivate
(
appDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
expectedString
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
Services
.
search
.
setDefault
(
appDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
Services
.
search
.
setDefaultPrivate
(
extraPrivateEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
const
win2
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
Assert
.
equal
(
win2
.
gURLBar
.
placeholder
noEngineString
)
;
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
tabs
.
push
(
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
expectedString
)
;
}
)
;
add_task
(
async
function
test_search_mode_engine_web
(
)
{
await
Services
.
search
.
setDefault
(
appDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engineName
:
"
generalEngine
"
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
web
-
2
"
args
:
{
name
:
"
generalEngine
"
}
}
)
;
}
)
;
add_task
(
async
function
test_search_mode_engine_other
(
)
{
await
doSearchModeTest
(
{
engineName
:
extraEngine
.
name
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
-
engine
"
args
:
{
name
:
extraEngine
.
name
}
}
)
;
}
)
;
add_task
(
async
function
test_search_mode_bookmarks
(
)
{
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
-
bookmarks
"
args
:
null
}
)
;
}
)
;
add_task
(
async
function
test_search_mode_tabs
(
)
{
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
-
tabs
"
args
:
null
}
)
;
}
)
;
add_task
(
async
function
test_search_mode_history
(
)
{
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
-
history
"
args
:
null
}
)
;
}
)
;
add_task
(
async
function
test_change_default_engine_updates_placeholder
(
)
{
tabs
.
push
(
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
)
;
info
(
Set
engine
to
{
extraEngine
.
name
}
)
;
await
Services
.
search
.
setDefault
(
extraEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
match
the
default
placeholder
for
non
-
built
-
in
engines
.
"
)
;
Assert
.
equal
(
gURLBar
.
placeholder
noEngineString
)
;
info
(
Set
engine
to
{
appDefaultEngine
.
name
}
)
;
await
Services
.
search
.
setDefault
(
appDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
gURLBar
.
_setPlaceholder
(
"
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
have
been
reset
.
"
)
;
info
(
"
Show
search
engine
removal
info
bar
"
)
;
BrowserUtils
.
callModulesFromCategory
(
{
categoryName
:
"
search
-
service
-
notification
"
}
"
search
-
engine
-
removal
"
extraEngine
.
name
appDefaultEngine
.
name
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gNotificationBox
.
getNotificationWithValue
(
"
search
-
engine
-
removal
"
)
"
Waiting
for
message
to
be
displayed
"
)
;
const
notificationBox
=
gNotificationBox
.
getNotificationWithValue
(
"
search
-
engine
-
removal
"
)
;
Assert
.
ok
(
notificationBox
"
Search
engine
removal
should
be
shown
.
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
equal
(
gURLBar
.
placeholder
expectedString
)
;
notificationBox
.
close
(
)
;
}
)
;
async
function
doSearchModeTest
(
expectedSearchMode
expectedPlaceholderL10n
)
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
expectedSearchMode
)
;
Assert
.
deepEqual
(
document
.
l10n
.
getAttributes
(
gURLBar
.
inputField
)
expectedPlaceholderL10n
"
Placeholder
has
expected
l10n
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
{
clickClose
:
true
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
