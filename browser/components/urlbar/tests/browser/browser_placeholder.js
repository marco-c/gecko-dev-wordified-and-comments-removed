"
use
strict
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
const
TEST_PRIVATE_ENGINE_BASENAME
=
"
searchSuggestionEngine2
.
xml
"
;
var
originalEngine
extraEngine
extraPrivateEngine
expectedString
;
var
tabs
=
[
]
;
var
noEngineString
;
add_task
(
async
function
setup
(
)
{
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
[
noEngineString
expectedString
]
=
(
await
document
.
l10n
.
formatMessages
(
[
{
id
:
"
urlbar
-
placeholder
"
}
{
id
:
"
urlbar
-
placeholder
-
with
-
name
"
args
:
{
name
:
originalEngine
.
name
}
}
]
)
)
.
map
(
msg
=
>
msg
.
attributes
[
0
]
.
value
)
;
let
rootDir
=
getRootDirectory
(
gTestPath
)
;
extraEngine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
rootDir
+
TEST_ENGINE_BASENAME
)
;
extraPrivateEngine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
rootDir
+
TEST_PRIVATE_ENGINE_BASENAME
)
;
let
urlTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
mozilla
"
)
;
BrowserTestUtils
.
removeTab
(
urlTab
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
true
]
[
"
browser
.
search
.
separatePrivateDefault
"
false
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
setDefault
(
originalEngine
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_change_default_engine_updates_placeholder
(
)
{
tabs
.
push
(
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
)
;
await
Services
.
search
.
setDefault
(
extraEngine
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
match
the
default
placeholder
for
non
-
built
-
in
engines
.
"
)
;
Assert
.
equal
(
gURLBar
.
placeholder
noEngineString
)
;
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
equal
(
gURLBar
.
placeholder
expectedString
)
;
}
)
;
add_task
(
async
function
test_delayed_update_placeholder
(
)
{
Services
.
obs
.
removeObserver
(
BrowserSearch
"
browser
-
search
-
engine
-
modified
"
)
;
let
urlTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
mozilla
"
)
;
tabs
.
push
(
urlTab
)
;
let
blankTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
tabs
.
push
(
blankTab
)
;
await
Services
.
search
.
setDefault
(
extraEngine
)
;
BrowserSearch
.
_updateURLBarPlaceholder
(
extraEngine
.
name
false
true
)
;
Assert
.
equal
(
gURLBar
.
placeholder
expectedString
"
Placeholder
should
be
unchanged
.
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
urlTab
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
have
updated
in
the
background
.
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
blankTab
)
;
await
Services
.
search
.
setDefault
(
originalEngine
)
;
BrowserSearch
.
_updateURLBarPlaceholder
(
originalEngine
.
name
false
true
)
;
Assert
.
equal
(
gURLBar
.
placeholder
noEngineString
"
Placeholder
should
be
unchanged
.
"
)
;
Assert
.
deepEqual
(
document
.
l10n
.
getAttributes
(
gURLBar
.
inputField
)
{
id
:
"
urlbar
-
placeholder
"
args
:
null
}
"
Placeholder
data
should
be
unchanged
.
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
urlTab
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
BrowserSearch
.
_updateURLBarPlaceholder
(
extraEngine
.
name
false
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
go
back
to
the
default
"
)
;
Assert
.
equal
(
gURLBar
.
placeholder
noEngineString
"
Placeholder
should
be
the
default
.
"
)
;
Services
.
obs
.
addObserver
(
BrowserSearch
"
browser
-
search
-
engine
-
modified
"
)
;
}
)
;
add_task
(
async
function
test_private_window_no_separate_engine
(
)
{
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
Services
.
search
.
setDefault
(
extraEngine
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
match
the
default
placeholder
for
non
-
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
noEngineString
)
;
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
expectedString
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_private_window_separate_engine
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
"
true
]
]
}
)
;
const
originalPrivateEngine
=
await
Services
.
search
.
getDefaultPrivate
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
setDefaultPrivate
(
originalPrivateEngine
)
;
}
)
;
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
Services
.
search
.
setDefaultPrivate
(
extraPrivateEngine
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
noEngineString
"
The
placeholder
should
match
the
default
placeholder
for
non
-
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
noEngineString
)
;
await
Services
.
search
.
setDefault
(
extraEngine
)
;
await
Services
.
search
.
setDefaultPrivate
(
originalEngine
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
placeholder
=
=
expectedString
"
The
placeholder
should
include
the
engine
name
for
built
-
in
engines
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
placeholder
expectedString
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_search_mode_engine_web
(
)
{
UrlbarUtils
.
WEB_ENGINE_NAMES
.
add
(
extraEngine
.
name
)
;
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
engineName
:
extraEngine
.
name
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
web
"
args
:
null
}
)
;
UrlbarUtils
.
WEB_ENGINE_NAMES
.
delete
(
extraEngine
.
name
)
;
}
)
;
add_task
(
async
function
test_search_mode_engine_other
(
)
{
await
doSearchModeTest
(
{
engineName
:
extraEngine
.
name
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
"
args
:
null
}
)
;
}
)
;
add_task
(
async
function
test_search_mode_bookmarks
(
)
{
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
"
args
:
null
}
)
;
}
)
;
add_task
(
async
function
test_search_mode_tabs
(
)
{
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
"
args
:
null
}
)
;
}
)
;
add_task
(
async
function
test_search_mode_history
(
)
{
await
doSearchModeTest
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
}
{
id
:
"
urlbar
-
placeholder
-
search
-
mode
-
other
"
args
:
null
}
)
;
}
)
;
async
function
doSearchModeTest
(
expectedSearchMode
expectedPlaceholderL10n
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
[
"
browser
.
urlbar
.
update2
.
localOneOffs
"
true
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
true
]
]
}
)
;
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
expectedSearchMode
)
;
Assert
.
deepEqual
(
document
.
l10n
.
getAttributes
(
gURLBar
.
inputField
)
expectedPlaceholderL10n
"
Placeholder
has
expected
l10n
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
{
clickClose
:
true
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
