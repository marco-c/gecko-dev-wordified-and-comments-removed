"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarProviderQuickActions
:
"
resource
:
/
/
/
modules
/
UrlbarProviderQuickActions
.
sys
.
mjs
"
}
)
;
let
testActionCalled
=
0
;
add_setup
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quickactions
"
true
]
]
}
)
;
UrlbarProviderQuickActions
.
addAction
(
"
testaction
"
{
commands
:
[
"
testaction
"
]
label
:
"
quickactions
-
downloads
"
onPick
:
(
)
=
>
testActionCalled
+
+
}
)
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarProviderQuickActions
.
removeAction
(
"
testaction
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test
(
)
{
const
histograms
=
snapshotHistograms
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
testaction
"
waitForFocus
fireInputEvent
:
true
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
Assert
.
equal
(
testActionCalled
1
"
Test
action
was
called
"
)
;
assertTelemetryResults
(
histograms
"
quickaction
"
"
1
"
UrlbarTestUtils
.
SELECTED_RESULT_METHODS
.
arrowEnterSelection
)
;
gURLBar
.
handleRevert
(
)
;
}
)
;
function
snapshotHistograms
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
return
{
resultMethodHist
:
TelemetryTestUtils
.
getAndClearHistogram
(
"
FX_URLBAR_SELECTED_RESULT_METHOD
"
)
}
;
}
function
assertTelemetryResults
(
histograms
type
index
method
)
{
TelemetryTestUtils
.
assertHistogram
(
histograms
.
resultMethodHist
method
1
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
urlbar
.
picked
.
{
type
}
index
1
)
;
}
