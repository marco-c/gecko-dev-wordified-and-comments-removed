"
use
strict
"
;
add_task
(
async
function
slowHeuristicSelected
(
)
{
let
engine
=
await
Services
.
search
.
getDefault
(
)
;
let
heuristicResult
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
test
"
engine
:
engine
.
name
}
)
;
heuristicResult
.
heuristic
=
true
;
let
heuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
heuristicResult
]
name
:
"
heuristicProvider
"
priority
:
Infinity
addTimeout
:
500
}
)
;
UrlbarProvidersManager
.
registerProvider
(
heuristicProvider
)
;
let
nonHeuristicResult
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
text
:
"
This
is
a
test
tip
.
"
buttonText
:
"
Done
"
type
:
"
test
"
helpUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
;
nonHeuristicResult
.
suggestedIndex
=
1
;
let
nonHeuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
nonHeuristicResult
]
name
:
"
nonHeuristicProvider
"
priority
:
Infinity
}
)
;
UrlbarProvidersManager
.
registerProvider
(
nonHeuristicProvider
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
waitForFocus
:
SimpleTest
.
waitForFocus
}
)
;
let
actualHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
actualHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElement
(
window
)
actualHeuristic
.
element
.
row
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElementIndex
(
window
)
0
)
;
let
actualNonHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
actualNonHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
UrlbarProvidersManager
.
unregisterProvider
(
heuristicProvider
)
;
UrlbarProvidersManager
.
unregisterProvider
(
nonHeuristicProvider
)
;
}
)
;
add_task
(
async
function
oneOffRemainsSelected
(
)
{
let
engine
=
await
Services
.
search
.
getDefault
(
)
;
let
heuristicResult
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
test
"
engine
:
engine
.
name
}
)
;
heuristicResult
.
heuristic
=
true
;
let
heuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
heuristicResult
]
name
:
"
heuristicProvider
"
priority
:
Infinity
addTimeout
:
500
}
)
;
UrlbarProvidersManager
.
registerProvider
(
heuristicProvider
)
;
let
nonHeuristicResult
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
text
:
"
This
is
a
test
tip
.
"
buttonText
:
"
Done
"
type
:
"
test
"
helpUrl
:
"
http
:
/
/
example
.
com
/
"
}
)
;
nonHeuristicResult
.
suggestedIndex
=
1
;
let
nonHeuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
nonHeuristicResult
]
name
:
"
nonHeuristicProvider
"
priority
:
Infinity
}
)
;
UrlbarProvidersManager
.
registerProvider
(
nonHeuristicProvider
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
waitForFocus
:
SimpleTest
.
waitForFocus
}
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
await
searchPromise
;
let
actualHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
actualHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
;
let
actualNonHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
actualNonHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElement
(
window
)
null
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElementIndex
(
window
)
-
1
)
;
Assert
.
equal
(
window
.
gURLBar
.
view
.
oneOffSearchButtons
.
selectedButton
window
.
gURLBar
.
view
.
oneOffSearchButtons
.
settingsButtonCompact
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
UrlbarProvidersManager
.
unregisterProvider
(
heuristicProvider
)
;
UrlbarProvidersManager
.
unregisterProvider
(
nonHeuristicProvider
)
;
}
)
;
