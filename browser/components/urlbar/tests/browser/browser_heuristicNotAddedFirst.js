"
use
strict
"
;
add_task
(
async
function
slowHeuristicSelected
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
let
engine
=
await
Services
.
search
.
getDefault
(
)
;
let
heuristicResult
=
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
true
payload
:
{
suggestion
:
"
test
"
engine
:
engine
.
name
}
}
)
;
let
heuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
heuristicResult
]
name
:
"
heuristicProvider
"
priority
:
Infinity
addTimeout
:
500
}
)
;
UrlbarProvidersManager
.
registerProvider
(
heuristicProvider
)
;
let
nonHeuristicResult
=
makeTipResult
(
{
suggestedIndex
:
1
}
)
;
let
nonHeuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
nonHeuristicResult
]
name
:
"
nonHeuristicProvider
"
priority
:
Infinity
}
)
;
UrlbarProvidersManager
.
registerProvider
(
nonHeuristicProvider
)
;
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
:
win
}
)
;
let
actualHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
win
0
)
;
Assert
.
equal
(
actualHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElementIndex
(
win
)
0
)
;
let
actualNonHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
win
1
)
;
Assert
.
equal
(
actualNonHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
UrlbarProvidersManager
.
unregisterProvider
(
heuristicProvider
)
;
UrlbarProvidersManager
.
unregisterProvider
(
nonHeuristicProvider
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
oneOffRemainsSelected
(
)
{
let
engine
=
await
Services
.
search
.
getDefault
(
)
;
let
heuristicResult
=
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
true
payload
:
{
suggestion
:
"
test
"
engine
:
engine
.
name
}
}
)
;
let
heuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
heuristicResult
]
name
:
"
heuristicProvider
"
priority
:
Infinity
addTimeout
:
500
}
)
;
UrlbarProvidersManager
.
registerProvider
(
heuristicProvider
)
;
let
nonHeuristicResult
=
makeTipResult
(
{
suggestedIndex
:
1
}
)
;
let
nonHeuristicProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
nonHeuristicResult
]
name
:
"
nonHeuristicProvider
"
priority
:
Infinity
}
)
;
UrlbarProvidersManager
.
registerProvider
(
nonHeuristicProvider
)
;
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
:
win
}
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
win
(
)
=
>
{
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
}
win
)
;
await
searchPromise
;
let
actualHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
win
0
)
;
Assert
.
equal
(
actualHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
;
let
actualNonHeuristic
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
win
1
)
;
Assert
.
equal
(
actualNonHeuristic
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElement
(
win
)
null
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElementIndex
(
win
)
-
1
)
;
Assert
.
equal
(
win
.
gURLBar
.
view
.
oneOffSearchButtons
.
selectedButton
win
.
gURLBar
.
view
.
oneOffSearchButtons
.
settingsButton
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
UrlbarProvidersManager
.
unregisterProvider
(
heuristicProvider
)
;
UrlbarProvidersManager
.
unregisterProvider
(
nonHeuristicProvider
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
function
makeTipResult
(
{
suggestedIndex
}
)
{
return
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
TIP
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
suggestedIndex
payload
:
{
helpUrl
:
"
http
:
/
/
example
.
com
/
"
type
:
"
test
"
titleL10n
:
{
id
:
"
urlbar
-
search
-
tips
-
confirm
"
}
buttons
:
[
{
url
:
"
http
:
/
/
example
.
com
/
"
l10n
:
{
id
:
"
urlbar
-
search
-
tips
-
confirm
"
}
}
]
}
}
)
;
}
