const
TEST_STRINGS
=
[
"
test
"
"
test
/
"
"
test
.
com
"
"
test
.
invalid
"
"
moz
"
"
moz
test
"
"
moz
test
"
"
keyword
"
"
keyword
test
"
"
test
/
test
/
"
"
test
/
test
/
"
]
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
autoFill
"
false
]
]
}
)
;
sandbox
=
sinon
.
createSandbox
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
Example2
"
}
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
https
:
/
/
example
.
com
/
?
q
=
%
s
"
title
:
"
test
"
}
)
;
await
PlacesUtils
.
keywords
.
insert
(
{
keyword
:
"
keyword
"
url
:
"
https
:
/
/
example
.
com
/
?
q
=
%
s
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
sandbox
.
restore
(
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
async
function
promiseLoadURL
(
)
{
return
new
Promise
(
resolve
=
>
{
sandbox
.
stub
(
gURLBar
"
_loadURL
"
)
.
callsFake
(
function
(
)
{
sandbox
.
restore
(
)
;
resolve
(
Array
.
from
(
arguments
)
.
slice
(
0
3
)
)
;
}
)
;
}
)
;
}
for
(
let
value
of
TEST_STRINGS
)
{
info
(
"
Input
the
value
normally
and
Enter
.
"
)
;
let
promise
=
promiseLoadURL
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
let
args
=
await
promise
;
Assert
.
ok
(
args
.
length
"
Sanity
check
"
)
;
info
(
"
Close
the
panel
and
confirm
again
.
"
)
;
promise
=
promiseLoadURL
(
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
Assert
.
deepEqual
(
await
promise
args
"
Check
arguments
are
coherent
"
)
;
info
(
"
Set
the
value
directly
and
Enter
.
"
)
;
if
(
gURLBar
.
searchMode
)
{
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
promise
=
promiseLoadURL
(
)
;
gURLBar
.
value
=
value
;
let
spy
=
sinon
.
spy
(
UrlbarUtils
"
getHeuristicResultFor
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
spy
.
restore
(
)
;
Assert
.
ok
(
spy
.
called
"
invoked
getHeuristicResultFor
"
)
;
Assert
.
deepEqual
(
await
promise
args
"
Check
arguments
are
coherent
"
)
;
gURLBar
.
handleRevert
(
)
;
}
}
)
;
add_task
(
async
function
no_heuristic_test
(
)
{
sandbox
=
sinon
.
createSandbox
(
)
;
let
stub
=
sandbox
.
stub
(
UrlbarUtils
"
getHeuristicResultFor
"
)
.
callsFake
(
async
function
(
)
{
throw
new
Error
(
"
I
failed
!
"
)
;
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
sandbox
.
restore
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
async
function
promiseLoadURL
(
)
{
return
new
Promise
(
resolve
=
>
{
sandbox
.
stub
(
gURLBar
"
_loadURL
"
)
.
callsFake
(
function
(
)
{
sandbox
.
restore
(
)
;
resolve
(
Array
.
from
(
arguments
)
.
slice
(
0
3
)
)
;
}
)
;
}
)
;
}
for
(
let
value
of
TEST_STRINGS
)
{
if
(
gURLBar
.
searchMode
)
{
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
}
let
promise
=
promiseLoadURL
(
)
;
gURLBar
.
value
=
value
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
Assert
.
ok
(
stub
.
called
"
invoked
getHeuristicResultFor
"
)
;
new
URL
(
(
await
promise
)
[
0
]
)
;
}
}
)
;
