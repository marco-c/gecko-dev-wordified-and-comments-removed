"
use
strict
"
;
add_task
(
async
function
test
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
sandbox
.
restore
(
)
)
;
let
spies
=
[
"
createObjectURL
"
"
revokeObjectURL
"
]
.
reduce
(
(
memo
name
)
=
>
{
memo
[
name
]
=
sandbox
.
spy
(
Cu
.
getGlobalForObject
(
gURLBar
.
view
)
.
URL
name
)
;
return
memo
;
}
{
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
checkCallCounts
(
spies
{
createObjectURL
:
0
revokeObjectURL
:
0
}
)
;
let
provider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
url
:
"
https
:
/
/
example
.
com
/
"
iconBlob
:
new
Blob
(
[
new
Uint8Array
(
[
]
)
]
)
}
)
]
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
doSearches
(
provider
spies
{
createObjectURL
:
1
revokeObjectURL
:
0
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
checkCallCounts
(
spies
{
createObjectURL
:
1
revokeObjectURL
:
1
}
)
;
await
doSearches
(
provider
spies
{
createObjectURL
:
2
revokeObjectURL
:
1
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
checkCallCounts
(
spies
{
createObjectURL
:
2
revokeObjectURL
:
2
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
checkCallCounts
(
spies
{
createObjectURL
:
2
revokeObjectURL
:
2
}
)
;
sandbox
.
restore
(
)
;
}
)
;
async
function
doSearches
(
provider
spies
expectedCountsByName
)
{
let
previousImage
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
+
i
}
)
;
let
result
=
await
getTestResult
(
provider
)
;
Assert
.
ok
(
result
"
Test
result
should
be
present
"
)
;
Assert
.
ok
(
result
.
image
"
Row
has
an
icon
with
a
src
"
)
;
Assert
.
ok
(
result
.
image
.
startsWith
(
"
blob
:
"
)
"
Row
icon
src
is
a
blob
URL
"
)
;
if
(
i
>
0
)
{
Assert
.
equal
(
result
.
image
previousImage
"
Blob
URL
should
be
the
same
as
in
previous
searches
"
)
;
}
previousImage
=
result
.
image
;
checkCallCounts
(
spies
expectedCountsByName
)
;
}
}
async
function
getTestResult
(
provider
)
{
for
(
let
i
=
0
;
i
<
UrlbarTestUtils
.
getResultCount
(
window
)
;
i
+
+
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
if
(
result
.
result
.
providerName
=
=
provider
.
name
)
{
return
result
;
}
}
return
null
;
}
function
checkCallCounts
(
spies
expectedCountsByName
)
{
for
(
let
[
name
count
]
of
Object
.
entries
(
expectedCountsByName
)
)
{
Assert
.
strictEqual
(
spies
[
name
]
.
callCount
count
"
Spy
call
count
:
"
+
name
)
;
}
}
