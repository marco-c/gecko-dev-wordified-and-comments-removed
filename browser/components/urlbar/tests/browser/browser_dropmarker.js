"
use
strict
"
;
add_task
(
async
function
basic
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
/
"
async
(
)
=
>
{
let
queryContext
=
await
clickDropmarker
(
)
;
is
(
queryContext
.
searchString
"
"
"
Clicking
the
history
dropmarker
should
initiate
an
empty
search
instead
of
searching
for
the
loaded
URL
"
)
;
is
(
gURLBar
.
value
"
http
:
/
/
example
.
com
/
"
"
Clicking
the
history
dropmarker
should
not
change
the
input
value
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
}
)
;
add_task
(
async
function
proxyState
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
browser1
=
>
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
/
"
async
browser2
=
>
{
await
clickDropmarker
(
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
getTabForBrowser
(
browser1
)
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
getTabForBrowser
(
browser2
)
)
;
Assert
.
equal
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
"
valid
"
)
;
}
)
;
}
)
;
}
)
;
async
function
clickDropmarker
(
)
{
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
let
historyDropMarker
=
window
.
document
.
getAnonymousElementByAttribute
(
gURLBar
.
textbox
"
anonid
"
"
historydropmarker
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
historyDropMarker
{
}
window
)
;
}
)
;
let
queryContext
=
await
gURLBar
.
lastQueryContextPromise
;
return
queryContext
;
}
