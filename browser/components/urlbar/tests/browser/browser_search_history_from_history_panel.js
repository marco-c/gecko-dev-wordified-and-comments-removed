"
use
strict
"
;
const
{
CustomizableUITestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
sys
.
mjs
"
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
add_task
(
async
function
searchHistoryFromHistoryPanel
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
history
-
panelmenu
"
CustomizableUI
.
AREA_NAVBAR
0
)
;
registerCleanupFunction
(
(
)
=
>
{
resetCUIAndReinitUrlbarInput
(
)
;
}
)
;
let
historyButton
=
document
.
getElementById
(
"
history
-
panelmenu
"
)
;
ok
(
historyButton
"
History
button
appears
in
Panel
Menu
"
)
;
historyButton
.
click
(
)
;
let
historyPanel
=
document
.
getElementById
(
"
PanelUI
-
history
"
)
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
historyPanel
"
ViewShown
"
)
;
await
promise
;
ok
(
historyPanel
.
getAttribute
(
"
visible
"
)
"
History
Panel
is
in
view
"
)
;
let
searchHistoryButton
=
document
.
getElementById
(
"
appMenuSearchHistory
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
searchHistoryButton
"
'
Search
History
Button
'
is
visible
.
"
)
)
;
EventUtils
.
synthesizeMouseAtCenter
(
searchHistoryButton
{
}
)
;
await
new
Promise
(
resolve
=
>
{
window
.
gURLBar
.
controller
.
addQueryListener
(
{
onViewOpen
(
)
{
window
.
gURLBar
.
controller
.
removeQueryListener
(
this
)
;
resolve
(
)
;
}
}
)
;
}
)
;
is
(
gURLBar
.
searchMode
?
.
source
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
"
Addressbar
in
correct
mode
.
"
)
;
gURLBar
.
searchMode
=
null
;
gURLBar
.
blur
(
)
;
}
)
;
add_task
(
async
function
searchHistoryFromAppMenuHistoryButton
(
)
{
await
gCUITestUtils
.
openMainMenu
(
)
;
let
historyButton
=
document
.
getElementById
(
"
appMenu
-
history
-
button
"
)
;
historyButton
.
click
(
)
;
let
historyPanel
=
document
.
getElementById
(
"
PanelUI
-
history
"
)
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
historyPanel
"
ViewShown
"
)
;
await
promise
;
ok
(
historyPanel
.
getAttribute
(
"
visible
"
)
"
History
Panel
is
in
view
"
)
;
let
searchHistoryButton
=
document
.
getElementById
(
"
appMenuSearchHistory
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
searchHistoryButton
"
'
Search
History
Button
'
is
visible
.
"
)
)
;
EventUtils
.
synthesizeMouseAtCenter
(
searchHistoryButton
{
}
)
;
await
new
Promise
(
resolve
=
>
{
window
.
gURLBar
.
controller
.
addQueryListener
(
{
onViewOpen
(
)
{
window
.
gURLBar
.
controller
.
removeQueryListener
(
this
)
;
resolve
(
)
;
}
}
)
;
}
)
;
is
(
gURLBar
.
searchMode
?
.
source
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
"
Addressbar
in
correct
mode
.
"
)
;
}
)
;
