"
use
strict
"
;
add_task
(
async
function
test
(
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
http
:
/
/
example
.
com
/
"
"
http
:
/
/
mozilla
.
org
/
"
]
)
;
await
promiseAutocompleteResultPopup
(
"
x
"
window
true
)
;
await
checkResults
(
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResults
(
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
)
;
EventUtils
.
synthesizeKey
(
"
x
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
checkResults
(
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
)
;
}
)
;
async
function
checkResults
(
)
{
Assert
.
equal
(
await
UrlbarTestUtils
.
getResultCount
(
window
)
2
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
details
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
;
Assert
.
equal
(
details
.
searchParams
.
query
"
x
"
)
;
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
details
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
)
;
Assert
.
equal
(
details
.
url
"
http
:
/
/
example
.
com
/
"
)
;
}
