"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
L10nCache
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
}
)
;
let
gL10n
;
add_setup
(
async
function
(
)
{
let
{
l10n
cleanup
}
=
initL10n
(
{
args0
:
"
Zero
args
value
"
args0Markup
:
"
Another
<
strong
>
zero
args
<
/
strong
>
value
"
args1
:
"
One
arg
value
is
{
arg1
}
"
args1Markup
:
"
Another
one
arg
value
<
strong
>
is
{
arg1
}
<
/
strong
>
"
attrs0
:
[
"
.
label
=
attrs0
label
has
zero
args
"
]
attrs0Markup
:
[
"
.
label
=
Markup
<
strong
>
should
not
be
parsed
<
/
strong
>
in
attributes
"
]
attrs1
:
[
"
.
label
=
attrs1
label
has
zero
args
"
"
.
tooltiptext
=
attrs1
tooltiptext
arg
value
is
{
arg1
}
"
]
}
)
;
gL10n
=
l10n
;
registerCleanupFunction
(
cleanup
)
;
}
)
;
add_task
(
async
function
comprehensive
(
)
{
let
tests
=
[
{
l10n
:
{
id
:
"
args0
"
}
assert
:
span
=
>
{
checkChildren
(
span
[
{
name
:
"
#
text
"
textContent
:
"
Zero
args
value
"
}
]
)
;
}
}
{
l10n
:
{
id
:
"
args0Markup
"
}
assert
:
span
=
>
{
checkChildren
(
span
[
{
name
:
"
#
text
"
textContent
:
"
Another
<
strong
>
zero
args
<
/
strong
>
value
"
}
]
)
;
}
}
{
l10n
:
{
id
:
"
args0Markup
"
parseMarkup
:
true
}
assert
:
span
=
>
{
checkChildren
(
span
[
{
name
:
"
#
text
"
textContent
:
"
Another
"
}
{
name
:
"
strong
"
textContent
:
"
zero
args
"
}
{
name
:
"
#
text
"
textContent
:
"
value
"
}
]
)
;
}
}
{
l10n
:
{
id
:
"
args1
"
args
:
{
arg1
:
"
foo
"
}
}
assert
:
span
=
>
{
checkChildren
(
span
[
{
name
:
"
#
text
"
textContent
:
"
One
arg
value
is
foo
"
}
]
)
;
}
}
{
l10n
:
{
id
:
"
args1Markup
"
args
:
{
arg1
:
"
bar
"
}
}
assert
:
span
=
>
{
checkChildren
(
span
[
{
name
:
"
#
text
"
textContent
:
"
Another
one
arg
value
<
strong
>
is
bar
<
/
strong
>
"
}
]
)
;
}
}
{
l10n
:
{
id
:
"
args1Markup
"
args
:
{
arg1
:
"
bar
"
}
parseMarkup
:
true
}
assert
:
span
=
>
{
checkChildren
(
span
[
{
name
:
"
#
text
"
textContent
:
"
Another
one
arg
value
"
}
{
name
:
"
strong
"
textContent
:
"
is
bar
"
}
]
)
;
}
}
{
l10n
:
{
id
:
"
attrs0
"
attribute
:
"
label
"
}
assert
:
span
=
>
{
checkAttributes
(
span
{
label
:
"
attrs0
label
has
zero
args
"
}
)
;
}
}
{
l10n
:
{
id
:
"
attrs0Markup
"
attribute
:
"
label
"
}
assert
:
span
=
>
{
checkAttributes
(
span
{
label
:
"
Markup
<
strong
>
should
not
be
parsed
<
/
strong
>
in
attributes
"
}
)
;
}
}
{
l10n
:
{
id
:
"
attrs0Markup
"
attribute
:
"
label
"
parseMarkup
:
true
}
assert
:
span
=
>
{
checkAttributes
(
span
{
label
:
"
Markup
<
strong
>
should
not
be
parsed
<
/
strong
>
in
attributes
"
}
)
;
}
}
{
l10n
:
{
id
:
"
attrs1
"
attribute
:
"
label
"
args
:
{
arg1
:
"
foo
"
}
}
assert
:
span
=
>
{
checkAttributes
(
span
{
label
:
"
attrs1
label
has
zero
args
"
}
)
;
}
}
{
l10n
:
{
id
:
"
attrs1
"
attribute
:
"
tooltiptext
"
args
:
{
arg1
:
"
foo
"
}
}
assert
:
span
=
>
{
checkAttributes
(
span
{
tooltiptext
:
"
attrs1
tooltiptext
arg
value
is
foo
"
}
)
;
}
}
]
;
let
cache
=
new
L10nCache
(
gL10n
)
;
for
(
let
{
l10n
assert
}
of
tests
)
{
info
(
"
Doing
subtest
:
"
+
JSON
.
stringify
(
l10n
)
)
;
let
span
=
document
.
createElement
(
"
span
"
)
;
await
cache
.
setElementL10n
(
span
l10n
)
;
Assert
.
ok
(
!
cache
.
get
(
l10n
)
"
String
should
not
be
cached
"
)
;
Assert
.
equal
(
span
.
dataset
.
l10nId
l10n
.
id
"
span
.
dataset
.
l10nId
should
be
set
"
)
;
if
(
l10n
.
attribute
)
{
Assert
.
equal
(
span
.
dataset
.
l10nAttrs
l10n
.
attribute
"
span
.
dataset
.
l10nAttrs
should
be
set
"
)
;
}
await
cache
.
setElementL10n
(
span
{
.
.
.
l10n
cacheable
:
true
}
)
;
Assert
.
ok
(
cache
.
get
(
l10n
)
"
String
should
be
cached
"
)
;
let
cachePromise
=
cache
.
setElementL10n
(
span
{
.
.
.
l10n
cacheable
:
true
}
)
;
Assert
.
ok
(
cache
.
get
(
l10n
)
"
String
should
still
be
cached
"
)
;
for
(
let
a
of
[
"
data
-
l10n
-
id
"
"
data
-
l10n
-
attrs
"
"
data
-
l10n
-
args
"
]
)
{
Assert
.
ok
(
!
span
.
hasAttribute
(
a
)
"
Attribute
should
be
unset
:
"
+
a
)
;
}
await
assert
(
span
)
;
await
cachePromise
;
cache
.
clear
(
)
;
}
}
)
;
add_task
(
async
function
removeElementL10n
(
)
{
let
cache
=
new
L10nCache
(
gL10n
)
;
let
span
=
document
.
createElement
(
"
span
"
)
;
let
l10n
=
{
id
:
"
attrs1
"
attribute
:
"
tooltiptext
"
args
:
{
arg1
:
"
foo
"
}
}
;
await
cache
.
setElementL10n
(
span
l10n
)
;
Assert
.
equal
(
span
.
dataset
.
l10nId
l10n
.
id
"
span
.
dataset
.
l10nId
should
be
set
"
)
;
Assert
.
equal
(
span
.
dataset
.
l10nAttrs
l10n
.
attribute
"
span
.
dataset
.
l10nAttrs
should
be
set
"
)
;
Assert
.
equal
(
span
.
dataset
.
l10nArgs
JSON
.
stringify
(
l10n
.
args
)
"
span
.
dataset
.
l10nArgs
should
be
set
"
)
;
cache
.
removeElementL10n
(
span
l10n
)
;
Assert
.
equal
(
span
.
textContent
"
"
"
textContent
should
be
empty
"
)
;
for
(
let
a
of
[
"
data
-
l10n
-
id
"
"
data
-
l10n
-
attrs
"
"
data
-
l10n
-
args
"
]
)
{
Assert
.
ok
(
!
span
.
hasAttribute
(
a
)
"
Attribute
should
be
unset
:
"
+
a
)
;
}
}
)
;
add_task
(
async
function
excludeArgsFromCacheKey
(
)
{
let
cache
=
new
L10nCache
(
document
.
l10n
)
;
let
span
=
document
.
createElement
(
"
span
"
)
;
document
.
documentElement
.
append
(
span
)
;
registerCleanupFunction
(
(
)
=
>
span
.
remove
(
)
)
;
let
id
=
"
urlbar
-
result
-
action
-
search
-
w
-
engine
"
;
let
arg
=
"
engine
"
;
let
value
=
a
=
>
Search
with
{
a
}
;
await
cache
.
setElementL10n
(
span
{
id
args
:
{
[
arg
]
:
"
aaa
"
}
cacheable
:
true
excludeArgsFromCacheKey
:
true
}
)
;
Assert
.
equal
(
span
.
dataset
.
l10nId
id
"
span
.
dataset
.
l10nId
should
be
set
"
)
;
Assert
.
equal
(
span
.
dataset
.
l10nArgs
JSON
.
stringify
(
{
[
arg
]
:
"
aaa
"
}
)
"
span
.
dataset
.
l10nArgs
should
be
set
"
)
;
Assert
.
deepEqual
(
cache
.
get
(
{
id
}
)
{
attributes
:
null
value
:
value
(
"
aaa
"
)
}
"
String
should
be
cached
with
'
aaa
'
arg
"
)
;
let
cachePromise
=
cache
.
setElementL10n
(
span
{
id
args
:
{
[
arg
]
:
"
bbb
"
}
cacheable
:
true
excludeArgsFromCacheKey
:
true
}
)
;
Assert
.
equal
(
span
.
textContent
value
(
"
aaa
"
)
"
span
.
textContent
should
be
the
old
cached
value
with
'
aaa
'
"
)
;
Assert
.
equal
(
span
.
dataset
.
l10nId
id
"
span
.
dataset
.
l10nId
should
be
set
"
)
;
Assert
.
equal
(
span
.
dataset
.
l10nArgs
JSON
.
stringify
(
{
[
arg
]
:
"
bbb
"
}
)
"
span
.
dataset
.
l10nArgs
should
be
set
with
the
new
'
bbb
'
arg
value
"
)
;
await
cachePromise
;
Assert
.
deepEqual
(
cache
.
get
(
{
id
}
)
{
attributes
:
null
value
:
value
(
"
bbb
"
)
}
"
String
should
be
cached
with
'
bbb
'
arg
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
info
(
"
Waiting
for
new
textContent
current
is
:
"
+
span
.
textContent
)
;
return
span
.
textContent
=
=
value
(
"
bbb
"
)
;
}
"
Waiting
for
new
textContent
with
'
bbb
'
arg
value
"
)
;
Assert
.
equal
(
span
.
textContent
value
(
"
bbb
"
)
"
span
.
textContent
should
have
the
new
'
bbb
'
arg
value
"
)
;
span
.
remove
(
)
;
}
)
;
function
initL10n
(
pairs
)
{
let
source
=
Object
.
entries
(
pairs
)
.
map
(
(
[
key
value
]
)
=
>
{
if
(
Array
.
isArray
(
value
)
)
{
value
=
value
.
map
(
s
=
>
"
\
n
"
+
s
)
.
join
(
"
"
)
;
}
return
{
key
}
=
{
value
}
;
}
)
.
join
(
"
\
n
"
)
;
let
registry
=
new
L10nRegistry
(
)
;
registry
.
registerSources
(
[
L10nFileSource
.
createMock
(
"
test
"
"
app
"
[
"
en
-
US
"
]
"
/
localization
/
{
locale
}
"
[
{
source
path
:
"
/
localization
/
en
-
US
/
test
.
ftl
"
}
]
)
]
)
;
return
{
l10n
:
new
Localization
(
[
"
/
test
.
ftl
"
]
true
registry
[
"
en
-
US
"
]
)
cleanup
:
(
)
=
>
{
registry
.
removeSources
(
[
"
test
"
]
)
;
}
}
;
}
function
checkChildren
(
element
expected
)
{
let
children
=
[
.
.
.
element
.
childNodes
]
.
map
(
n
=
>
(
{
name
:
n
.
nodeName
textContent
:
n
.
textContent
}
)
)
;
Assert
.
deepEqual
(
children
expected
"
Children
should
be
correct
"
)
;
}
function
checkAttributes
(
element
expected
)
{
let
attrs
=
{
}
;
for
(
let
i
=
0
;
i
<
element
.
attributes
.
length
;
i
+
+
)
{
let
a
=
element
.
attributes
.
item
(
i
)
;
attrs
[
a
.
name
]
=
a
.
value
;
}
Assert
.
deepEqual
(
attrs
expected
"
Attributes
should
be
correct
"
)
;
}
