"
use
strict
"
;
const
ALIAS
=
"
enginealias
"
;
let
aliasEngine
;
add_task
(
async
function
init
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
aliasEngine
=
await
Services
.
search
.
addEngineWithDetails
(
"
Test
"
{
alias
:
ALIAS
template
:
"
http
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
Services
.
search
.
removeEngine
(
aliasEngine
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
gURLBar
.
handleRevert
(
)
;
}
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
gURLBar
.
blur
(
)
;
gURLBar
.
search
(
"
basic
"
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
assertUrlbarValue
(
"
basic
"
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
searchEngineAlias
(
)
{
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
"
example
"
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
assertUrlbarValue
(
"
example
"
)
;
assertOneOffButtonsVisible
(
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
"
not
an
engine
alias
"
)
)
;
await
assertUrlbarValue
(
"
not
an
engine
alias
"
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
)
;
}
)
;
add_task
(
async
function
searchRestriction_legacy
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
false
]
]
}
)
;
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
UrlbarTokenizer
.
RESTRICT
.
SEARCH
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
assertUrlbarValue
(
UrlbarTokenizer
.
RESTRICT
.
SEARCH
+
"
"
)
;
assertOneOffButtonsVisible
(
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
searchRestriction
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
]
}
)
;
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
UrlbarTokenizer
.
RESTRICT
.
SEARCH
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
UrlbarSearchUtils
.
getDefaultEngine
(
)
.
name
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
entry
:
"
other
"
}
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
historyRestriction
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
]
}
)
;
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
UrlbarTokenizer
.
RESTRICT
.
HISTORY
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
entry
:
"
other
"
}
)
;
assertOneOffButtonsVisible
(
true
)
;
Assert
.
ok
(
!
gURLBar
.
value
"
The
Urlbar
has
no
value
.
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
historyRestrictionWithString
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
]
}
)
;
gURLBar
.
blur
(
)
;
let
searchString
=
"
foo
bar
"
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
{
UrlbarTokenizer
.
RESTRICT
.
HISTORY
}
{
searchString
}
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
entry
:
"
other
"
}
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
searchString
"
The
Urlbar
value
should
be
the
search
string
.
"
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
tagRestriction
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
]
}
)
;
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
UrlbarTokenizer
.
RESTRICT
.
TAG
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
await
assertUrlbarValue
(
{
UrlbarTokenizer
.
RESTRICT
.
TAG
}
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
searchTwice
(
)
{
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
"
test
"
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
assertUrlbarValue
(
"
test
"
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
"
test
"
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
assertUrlbarValue
(
"
test
"
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
searchIME
(
)
{
gURLBar
.
blur
(
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
gURLBar
.
search
(
"
test
"
)
)
;
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
url
bar
is
focused
"
)
;
await
assertUrlbarValue
(
"
test
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeComposition
(
{
type
:
"
compositionstart
"
}
)
)
;
gURLBar
.
search
(
"
test
"
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
The
panel
should
still
be
closed
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
EventUtils
.
synthesizeComposition
(
{
type
:
"
compositioncommitasis
"
}
)
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
searchWithAlias
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
]
}
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
async
(
)
=
>
gURLBar
.
search
(
{
ALIAS
}
test
{
searchModeEntry
:
"
handoff
"
}
)
)
;
Assert
.
ok
(
gURLBar
.
hasAttribute
(
"
focused
"
)
"
Urlbar
is
focused
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
aliasEngine
.
name
entry
:
"
handoff
"
}
)
;
await
assertUrlbarValue
(
"
test
"
)
;
assertOneOffButtonsVisible
(
true
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
function
assertOneOffButtonsVisible
(
visible
)
{
Assert
.
equal
(
UrlbarTestUtils
.
getOneOffSearchButtonsVisible
(
window
)
visible
"
Should
show
or
not
the
one
-
off
search
buttons
"
)
;
}
async
function
assertUrlbarValue
(
value
)
{
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
0
)
;
Assert
.
equal
(
gURLBar
.
value
value
)
;
Assert
.
greater
(
UrlbarTestUtils
.
getResultCount
(
window
)
0
"
Should
have
at
least
one
result
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Should
have
type
search
for
the
first
result
"
)
;
if
(
value
[
0
]
=
=
UrlbarTokenizer
.
RESTRICT
.
SEARCH
)
{
value
=
value
.
substring
(
1
)
.
trim
(
)
;
}
Assert
.
equal
(
result
.
searchParams
.
query
value
"
Should
have
the
correct
query
for
the
first
result
"
)
;
}
