"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
sys
.
mjs
"
UrlbarQueryContext
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
sys
.
mjs
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
sys
.
mjs
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PromptTestUtils
:
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
jsm
"
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
ExperimentAPI
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
ExperimentFakes
:
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
jsm
"
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
jsm
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
ResetProfile
:
"
resource
:
/
/
gre
/
modules
/
ResetProfile
.
jsm
"
TelemetryTestUtils
:
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
}
)
;
let
sandbox
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
head
-
common
.
js
"
this
)
;
const
{
sinon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
async
function
selectAndPaste
(
str
win
=
window
)
{
await
SimpleTest
.
promiseClipboardChange
(
str
(
)
=
>
{
clipboardHelper
.
copyString
(
str
)
;
}
)
;
win
.
gURLBar
.
select
(
)
;
win
.
document
.
commandDispatcher
.
getControllerForCommand
(
"
cmd_paste
"
)
.
doCommand
(
"
cmd_paste
"
)
;
}
async
function
updateTopSites
(
condition
searchShortcuts
=
false
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topsites
"
false
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topsites
"
true
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
improvesearch
.
topSiteSearchShortcuts
"
searchShortcuts
]
]
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
sites
=
AboutNewTab
.
getTopSites
(
)
;
return
condition
(
sites
)
;
}
"
Waiting
for
top
sites
to
be
updated
"
)
;
}
async
function
waitForLoadOrTimeout
(
win
=
window
timeoutMs
=
1000
)
{
let
event
;
let
listener
;
let
timeout
;
let
eventName
=
"
BrowserTestUtils
:
ContentEvent
:
load
"
;
try
{
event
=
await
Promise
.
race
(
[
new
Promise
(
resolve
=
>
{
listener
=
resolve
;
win
.
addEventListener
(
eventName
listener
true
)
;
}
)
new
Promise
(
resolve
=
>
{
timeout
=
win
.
setTimeout
(
resolve
timeoutMs
)
;
}
)
]
)
;
}
finally
{
win
.
removeEventListener
(
eventName
listener
true
)
;
win
.
clearTimeout
(
timeout
)
;
}
return
event
|
|
null
;
}
