"
use
strict
"
;
let
sandbox
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
ResetProfile
:
"
resource
:
/
/
gre
/
modules
/
ResetProfile
.
jsm
"
TelemetryTestUtils
:
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarQueryContext
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
head
-
common
.
js
"
this
)
;
const
{
sinon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
async
function
selectAndPaste
(
str
win
=
window
)
{
await
SimpleTest
.
promiseClipboardChange
(
str
(
)
=
>
{
clipboardHelper
.
copyString
(
str
)
;
}
)
;
win
.
gURLBar
.
select
(
)
;
win
.
document
.
commandDispatcher
.
getControllerForCommand
(
"
cmd_paste
"
)
.
doCommand
(
"
cmd_paste
"
)
;
}
async
function
updateTopSites
(
condition
searchShortcuts
=
false
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
topsites
"
false
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
topsites
"
true
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
improvesearch
.
topSiteSearchShortcuts
"
searchShortcuts
]
]
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
sites
=
AboutNewTab
.
getTopSites
(
)
;
return
condition
(
sites
)
;
}
"
Waiting
for
top
sites
to
be
updated
"
)
;
}
async
function
checkIntervention
(
{
searchString
tip
title
button
awaitCallback
}
=
{
}
)
{
let
[
result
element
]
=
await
awaitTip
(
searchString
)
;
Assert
.
strictEqual
(
result
.
payload
.
type
tip
)
;
Assert
.
equal
(
element
.
_elements
.
get
(
"
title
"
)
.
textContent
title
)
;
Assert
.
equal
(
element
.
_elements
.
get
(
"
tipButton
"
)
.
textContent
button
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
element
.
_elements
.
get
(
"
helpButton
"
)
)
)
;
let
values
=
await
Promise
.
all
(
[
awaitCallback
(
)
pickTip
(
)
]
)
;
Assert
.
ok
(
true
"
Refresh
dialog
opened
"
)
;
return
values
[
0
]
|
|
null
;
}
async
function
awaitTip
(
searchString
win
=
window
)
{
let
context
=
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
searchString
waitForFocus
fireInputEvent
:
true
}
)
;
Assert
.
ok
(
context
.
results
.
length
>
=
2
)
;
let
result
=
context
.
results
[
1
]
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
)
;
let
element
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
win
1
)
;
return
[
result
element
]
;
}
async
function
awaitNoTip
(
searchString
win
=
window
)
{
let
context
=
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
searchString
waitForFocus
fireInputEvent
:
true
}
)
;
for
(
let
result
of
context
.
results
)
{
Assert
.
notEqual
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
TIP
)
;
}
}
async
function
pickTip
(
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
let
button
=
result
.
element
.
row
.
_elements
.
get
(
"
tipButton
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
}
)
;
}
function
makeProfileResettable
(
)
{
let
profileService
=
Cc
[
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
]
.
getService
(
Ci
.
nsIToolkitProfileService
)
;
let
currentProfileDir
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
let
profileName
=
"
mochitest
-
test
-
profile
-
temp
-
"
+
Date
.
now
(
)
;
let
tempProfile
=
profileService
.
createProfile
(
currentProfileDir
profileName
)
;
Assert
.
ok
(
ResetProfile
.
resetSupported
(
)
"
Should
be
able
to
reset
from
mochitest
'
s
temporary
profile
once
it
'
s
in
the
profile
manager
.
"
)
;
registerCleanupFunction
(
(
)
=
>
{
tempProfile
.
remove
(
false
)
;
Assert
.
ok
(
!
ResetProfile
.
resetSupported
(
)
"
Shouldn
'
t
be
able
to
reset
from
mochitest
'
s
temporary
profile
once
removed
from
the
profile
manager
.
"
)
;
}
)
;
}
async
function
promiseAlertDialogOpen
(
buttonAction
uris
func
)
{
let
win
=
await
BrowserTestUtils
.
domWindowOpened
(
null
async
aWindow
=
>
{
await
BrowserTestUtils
.
waitForEvent
(
aWindow
"
load
"
)
;
return
uris
.
includes
(
aWindow
.
document
.
documentURI
)
;
}
)
;
if
(
func
)
{
await
func
(
win
)
;
return
win
;
}
let
dialog
=
win
.
document
.
querySelector
(
"
dialog
"
)
;
dialog
.
getButton
(
buttonAction
)
.
click
(
)
;
return
win
;
}
async
function
promiseAlertDialog
(
buttonAction
uris
func
)
{
let
win
=
await
promiseAlertDialogOpen
(
buttonAction
uris
func
)
;
return
BrowserTestUtils
.
windowClosed
(
win
)
;
}
