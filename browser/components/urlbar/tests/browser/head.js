"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
sys
.
mjs
"
BrowsetUIUtils
:
"
resource
:
/
/
/
modules
/
BrowserUIUtils
.
sys
.
mjs
"
ExperimentAPI
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
NimbusTestUtils
:
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
sys
.
mjs
"
PromptTestUtils
:
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
sys
.
mjs
"
ResetProfile
:
"
resource
:
/
/
gre
/
modules
/
ResetProfile
.
sys
.
mjs
"
SearchUITestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchUITestUtils
.
sys
.
mjs
"
SearchUtils
:
"
moz
-
src
:
/
/
/
toolkit
/
components
/
search
/
SearchUtils
.
sys
.
mjs
"
TelemetryTestUtils
:
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
sys
.
mjs
"
UrlbarEventBufferer
:
"
resource
:
/
/
/
modules
/
UrlbarEventBufferer
.
sys
.
mjs
"
UrlbarQueryContext
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
sys
.
mjs
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
sys
.
mjs
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
sys
.
mjs
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
sys
.
mjs
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
PlacesFrecencyRecalculator
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
places
/
frecency
-
recalculator
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
.
wrappedJSObject
;
}
)
;
SearchUITestUtils
.
init
(
this
)
;
let
sandbox
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
head
-
common
.
js
"
this
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
async
function
selectAndPaste
(
str
win
=
window
)
{
await
SimpleTest
.
promiseClipboardChange
(
str
(
)
=
>
{
clipboardHelper
.
copyString
(
str
)
;
}
)
;
win
.
gURLBar
.
select
(
)
;
win
.
document
.
commandDispatcher
.
getControllerForCommand
(
"
cmd_paste
"
)
.
doCommand
(
"
cmd_paste
"
)
;
}
function
waitForLoadStartOrTimeout
(
win
=
window
timeoutMs
=
1000
)
{
let
listener
;
let
timeout
;
return
Promise
.
race
(
[
new
Promise
(
resolve
=
>
{
listener
=
{
onStateChange
(
browser
webprogress
request
flags
)
{
if
(
flags
&
Ci
.
nsIWebProgressListener
.
STATE_START
)
{
resolve
(
request
.
QueryInterface
(
Ci
.
nsIChannel
)
.
URI
)
;
}
}
}
;
win
.
gBrowser
.
addTabsProgressListener
(
listener
)
;
}
)
new
Promise
(
(
resolve
reject
)
=
>
{
timeout
=
win
.
setTimeout
(
(
)
=
>
reject
(
"
timed
out
"
)
timeoutMs
)
;
}
)
]
)
.
finally
(
(
)
=
>
{
win
.
gBrowser
.
removeTabsProgressListener
(
listener
)
;
win
.
clearTimeout
(
timeout
)
;
}
)
;
}
async
function
promiseContextualMenuitem
(
anonid
)
{
let
textBox
=
gURLBar
.
querySelector
(
"
moz
-
input
-
box
"
)
;
let
cxmenu
=
textBox
.
menupopup
;
let
cxmenuPromise
=
BrowserTestUtils
.
waitForEvent
(
cxmenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
cxmenuPromise
;
return
textBox
.
getMenuItem
(
anonid
)
;
}
function
resetCUIAndReinitUrlbarInput
(
win
=
window
)
{
CustomizableUI
.
reset
(
)
;
CustomizableUI
.
dispatchToolboxEvent
(
"
aftercustomization
"
{
}
win
)
;
}
async
function
search
(
{
searchString
valueBefore
valueAfter
placeholderAfter
}
)
{
info
(
"
Searching
:
"
+
JSON
.
stringify
(
{
searchString
valueBefore
valueAfter
placeholderAfter
}
)
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
gURLBar
.
inputField
.
focus
(
)
;
gURLBar
.
_setValue
(
searchString
)
;
gURLBar
.
inputField
.
setSelectionRange
(
searchString
.
length
searchString
.
length
)
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
valueBefore
"
gURLBar
.
value
before
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
"
gURLBar
.
selectionStart
before
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
valueBefore
.
length
"
gURLBar
.
selectionEnd
before
the
search
completes
"
)
;
info
(
"
Waiting
for
the
search
to
complete
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
valueAfter
"
gURLBar
.
value
after
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
"
gURLBar
.
selectionStart
after
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
valueAfter
.
length
"
gURLBar
.
selectionEnd
after
the
search
completes
"
)
;
if
(
placeholderAfter
)
{
Assert
.
ok
(
gURLBar
.
_autofillPlaceholder
"
gURLBar
.
_autofillPlaceholder
exists
after
the
search
completes
"
)
;
Assert
.
strictEqual
(
gURLBar
.
_autofillPlaceholder
.
value
placeholderAfter
"
gURLBar
.
_autofillPlaceholder
.
value
after
the
search
completes
"
)
;
}
else
{
Assert
.
strictEqual
(
gURLBar
.
_autofillPlaceholder
null
"
gURLBar
.
_autofillPlaceholder
does
not
exist
after
the
search
completes
"
)
;
}
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
!
!
details
.
autofill
!
!
placeholderAfter
"
First
result
is
an
autofill
result
iff
a
placeholder
is
expected
"
)
;
}
function
selectWithMouseDrag
(
fromX
toX
win
=
window
)
{
let
target
=
win
.
gURLBar
.
inputField
;
let
rect
=
target
.
getBoundingClientRect
(
)
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
target
"
mouseup
"
)
;
EventUtils
.
synthesizeMouse
(
target
fromX
rect
.
height
/
2
{
type
:
"
mousemove
"
}
target
.
ownerGlobal
)
;
EventUtils
.
synthesizeMouse
(
target
fromX
rect
.
height
/
2
{
type
:
"
mousedown
"
}
target
.
ownerGlobal
)
;
EventUtils
.
synthesizeMouse
(
target
toX
rect
.
height
/
2
{
type
:
"
mousemove
"
}
target
.
ownerGlobal
)
;
EventUtils
.
synthesizeMouse
(
target
toX
rect
.
height
/
2
{
type
:
"
mouseup
"
}
target
.
ownerGlobal
)
;
return
promise
;
}
function
selectWithDoubleClick
(
offsetX
win
=
window
)
{
let
target
=
win
.
gURLBar
.
inputField
;
let
rect
=
target
.
getBoundingClientRect
(
)
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
target
"
dblclick
"
)
;
EventUtils
.
synthesizeMouse
(
target
offsetX
rect
.
height
/
2
{
clickCount
:
1
}
)
;
EventUtils
.
synthesizeMouse
(
target
offsetX
rect
.
height
/
2
{
clickCount
:
2
}
)
;
return
promise
;
}
function
assertSearchStringIsInUrlbar
(
searchString
{
win
=
window
pageProxyState
=
"
invalid
"
userTypedValue
=
searchString
persistSearchTerms
=
true
}
=
{
}
)
{
Assert
.
equal
(
win
.
gURLBar
.
value
searchString
Search
string
should
be
the
urlbar
value
.
)
;
let
state
=
win
.
gURLBar
.
getBrowserState
(
win
.
gBrowser
.
selectedBrowser
)
;
Assert
.
equal
(
state
.
persist
?
.
searchTerms
searchString
Search
terms
should
match
.
)
;
Assert
.
equal
(
win
.
gBrowser
.
userTypedValue
userTypedValue
"
userTypedValue
should
match
.
"
)
;
Assert
.
equal
(
win
.
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
pageProxyState
"
Pageproxystate
should
match
.
"
)
;
if
(
persistSearchTerms
)
{
Assert
.
ok
(
win
.
gURLBar
.
hasAttribute
(
"
persistsearchterms
"
)
"
Urlbar
has
persistsearchterms
attribute
.
"
)
;
}
else
{
Assert
.
ok
(
!
win
.
gURLBar
.
hasAttribute
(
"
persistsearchterms
"
)
"
Urlbar
does
not
have
persistsearchterms
attribute
.
"
)
;
}
}
async
function
searchWithTab
(
searchString
tab
=
null
engine
=
Services
.
search
.
defaultEngine
expectedPersistedSearchTerms
=
true
)
{
if
(
!
tab
)
{
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
}
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
engine
searchString
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
expectedSearchUrl
)
;
gURLBar
.
focus
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
searchString
fireInputEvent
:
true
selectionStart
:
0
selectionEnd
:
searchString
.
length
-
1
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
browserLoadedPromise
;
if
(
expectedPersistedSearchTerms
)
{
info
(
"
Load
a
tab
with
search
terms
persisting
in
the
urlbar
.
"
)
;
assertSearchStringIsInUrlbar
(
searchString
)
;
}
return
{
tab
expectedSearchUrl
}
;
}
async
function
focusSwitcher
(
win
=
window
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
waitForFocus
:
true
value
:
"
"
fireInputEvent
:
true
}
)
;
Assert
.
ok
(
win
.
gURLBar
.
hasAttribute
(
"
focused
"
)
"
Urlbar
was
focused
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
win
)
;
let
switcher
=
win
.
gURLBar
.
querySelector
(
"
.
searchmode
-
switcher
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
win
.
document
.
activeElement
=
=
switcher
)
;
Assert
.
ok
(
true
"
Search
mode
switcher
was
focused
"
)
;
}
function
clearSAPTelemetry
(
)
{
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
async
function
waitForIdle
(
)
{
for
(
let
i
=
0
;
i
<
10
;
i
+
+
)
{
await
new
Promise
(
resolve
=
>
Services
.
tm
.
idleDispatchToMainThread
(
resolve
)
)
;
}
}
