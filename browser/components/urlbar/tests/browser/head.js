"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
sys
.
mjs
"
ExperimentAPI
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
ExperimentFakes
:
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
sys
.
mjs
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
sys
.
mjs
"
PromptTestUtils
:
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
sys
.
mjs
"
ResetProfile
:
"
resource
:
/
/
gre
/
modules
/
ResetProfile
.
sys
.
mjs
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
TelemetryTestUtils
:
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
sys
.
mjs
"
UrlbarQueryContext
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
sys
.
mjs
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
sys
.
mjs
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
sys
.
mjs
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
PlacesFrecencyRecalculator
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
places
/
frecency
-
recalculator
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
.
wrappedJSObject
;
}
)
;
let
sandbox
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
head
-
common
.
js
"
this
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
async
function
selectAndPaste
(
str
win
=
window
)
{
await
SimpleTest
.
promiseClipboardChange
(
str
(
)
=
>
{
clipboardHelper
.
copyString
(
str
)
;
}
)
;
win
.
gURLBar
.
select
(
)
;
win
.
document
.
commandDispatcher
.
getControllerForCommand
(
"
cmd_paste
"
)
.
doCommand
(
"
cmd_paste
"
)
;
}
async
function
waitForLoadOrTimeout
(
win
=
window
timeoutMs
=
1000
)
{
let
event
;
let
listener
;
let
timeout
;
let
eventName
=
"
BrowserTestUtils
:
ContentEvent
:
load
"
;
try
{
event
=
await
Promise
.
race
(
[
new
Promise
(
resolve
=
>
{
listener
=
resolve
;
win
.
addEventListener
(
eventName
listener
true
)
;
}
)
new
Promise
(
resolve
=
>
{
timeout
=
win
.
setTimeout
(
resolve
timeoutMs
)
;
}
)
]
)
;
}
finally
{
win
.
removeEventListener
(
eventName
listener
true
)
;
win
.
clearTimeout
(
timeout
)
;
}
return
event
|
|
null
;
}
async
function
promiseContextualMenuitem
(
anonid
)
{
let
textBox
=
gURLBar
.
querySelector
(
"
moz
-
input
-
box
"
)
;
let
cxmenu
=
textBox
.
menupopup
;
let
cxmenuPromise
=
BrowserTestUtils
.
waitForEvent
(
cxmenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
cxmenuPromise
;
return
textBox
.
getMenuItem
(
anonid
)
;
}
function
resetCUIAndReinitUrlbarInput
(
win
=
window
)
{
CustomizableUI
.
reset
(
)
;
CustomizableUI
.
dispatchToolboxEvent
(
"
aftercustomization
"
{
}
win
)
;
}
async
function
search
(
{
searchString
valueBefore
valueAfter
placeholderAfter
}
)
{
info
(
"
Searching
:
"
+
JSON
.
stringify
(
{
searchString
valueBefore
valueAfter
placeholderAfter
}
)
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
gURLBar
.
inputField
.
focus
(
)
;
gURLBar
.
value
=
searchString
;
gURLBar
.
inputField
.
setSelectionRange
(
searchString
.
length
searchString
.
length
)
;
UrlbarTestUtils
.
fireInputEvent
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
valueBefore
"
gURLBar
.
value
before
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
"
gURLBar
.
selectionStart
before
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
valueBefore
.
length
"
gURLBar
.
selectionEnd
before
the
search
completes
"
)
;
info
(
"
Waiting
for
the
search
to
complete
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
Assert
.
equal
(
gURLBar
.
value
valueAfter
"
gURLBar
.
value
after
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionStart
searchString
.
length
"
gURLBar
.
selectionStart
after
the
search
completes
"
)
;
Assert
.
equal
(
gURLBar
.
selectionEnd
valueAfter
.
length
"
gURLBar
.
selectionEnd
after
the
search
completes
"
)
;
if
(
placeholderAfter
)
{
Assert
.
ok
(
gURLBar
.
_autofillPlaceholder
"
gURLBar
.
_autofillPlaceholder
exists
after
the
search
completes
"
)
;
Assert
.
strictEqual
(
gURLBar
.
_autofillPlaceholder
.
value
placeholderAfter
"
gURLBar
.
_autofillPlaceholder
.
value
after
the
search
completes
"
)
;
}
else
{
Assert
.
strictEqual
(
gURLBar
.
_autofillPlaceholder
null
"
gURLBar
.
_autofillPlaceholder
does
not
exist
after
the
search
completes
"
)
;
}
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
!
!
details
.
autofill
!
!
placeholderAfter
"
First
result
is
an
autofill
result
iff
a
placeholder
is
expected
"
)
;
}
