"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
Test
"
}
{
setAsDefault
:
true
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
"
https
:
/
/
example
.
com
/
bookmark
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
}
)
;
add_task
(
async
function
noResults
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
doesn
'
t
match
anything
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
0
"
Zero
results
since
no
bookmark
matches
"
)
;
let
promise
=
waitForLoadStartOrTimeout
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
Assert
.
rejects
(
promise
/
timed
out
/
"
Nothing
should
have
loaded
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
localNoHeuristic
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
bookmark
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
1
"
There
should
be
one
result
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
source
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
"
Result
source
should
be
BOOKMARKS
"
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
"
Result
type
should
be
URL
"
)
;
Assert
.
equal
(
result
.
url
"
https
:
/
/
example
.
com
/
bookmark
"
"
Result
URL
is
our
bookmark
URL
"
)
;
Assert
.
ok
(
!
result
.
heuristic
"
Result
should
not
be
heuristic
"
)
;
let
promise
=
waitForLoadStartOrTimeout
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
Assert
.
rejects
(
promise
/
timed
out
/
"
Nothing
should
have
loaded
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
localAutofill
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
example
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
2
"
There
should
be
two
results
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
source
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
"
Result
source
should
be
HISTORY
"
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
"
Result
type
should
be
URL
"
)
;
Assert
.
equal
(
result
.
url
"
https
:
/
/
example
.
com
/
"
"
Result
URL
is
our
bookmark
'
s
origin
"
)
;
Assert
.
ok
(
result
.
heuristic
"
Result
should
be
heuristic
"
)
;
Assert
.
ok
(
result
.
autofill
"
Result
should
be
autofill
"
)
;
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
1
)
;
Assert
.
equal
(
result
.
source
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
"
Result
source
should
be
BOOKMARKS
"
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
"
Result
type
should
be
URL
"
)
;
Assert
.
equal
(
result
.
url
"
https
:
/
/
example
.
com
/
bookmark
"
"
Result
URL
is
our
bookmark
URL
"
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
loadPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
https
:
/
/
example
.
com
/
"
"
Bookmark
'
s
origin
should
have
loaded
"
)
;
}
)
;
}
)
;
add_task
(
async
function
remote
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
remote
"
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
engineName
:
"
Test
"
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
1
"
There
should
be
one
result
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
source
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
"
Result
source
should
be
SEARCH
"
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Result
type
should
be
SEARCH
"
)
;
Assert
.
ok
(
result
.
searchParams
"
searchParams
should
be
present
"
)
;
Assert
.
equal
(
result
.
searchParams
.
engine
"
Test
"
"
searchParams
.
engine
should
be
our
test
engine
"
)
;
Assert
.
equal
(
result
.
searchParams
.
query
"
remote
"
"
searchParams
.
query
should
be
our
query
"
)
;
Assert
.
ok
(
result
.
heuristic
"
Result
should
be
heuristic
"
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
loadPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
https
:
/
/
example
.
com
/
?
q
=
remote
"
"
Engine
'
s
SERP
should
have
loaded
"
)
;
}
)
;
}
)
;
