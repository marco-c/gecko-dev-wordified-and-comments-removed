"
use
strict
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
let
gMaxResults
;
XPCOMUtils
.
defineLazyGetter
(
this
"
oneOffSearchButtons
"
(
)
=
>
{
return
UrlbarTestUtils
.
getOneOffSearchButtons
(
window
)
;
}
)
;
let
originalEngine
;
let
newEngine
;
add_task
(
async
function
setup
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
false
]
[
"
browser
.
tabs
.
loadInBackground
"
true
]
]
}
)
;
gMaxResults
=
Services
.
prefs
.
getIntPref
(
"
browser
.
urlbar
.
maxRichResults
"
)
;
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
newEngine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
)
;
await
Services
.
search
.
moveEngine
(
newEngine
0
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
Services
.
search
.
setDefault
(
originalEngine
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
let
visits
=
[
]
;
for
(
let
i
=
0
;
i
<
gMaxResults
;
i
+
+
)
{
visits
.
push
(
{
uri
:
makeURI
(
"
http
:
/
/
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
i
)
transition
:
Ci
.
nsINavHistoryService
.
TRANSITION_TYPED
}
)
;
}
await
PlacesTestUtils
.
addVisits
(
visits
)
;
}
)
;
async
function
searchInTab
(
checkFn
)
{
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
}
async
testBrowser
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
foo
"
}
)
;
let
contextMenu
=
oneOffSearchButtons
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
menu
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
popupShownPromise
;
let
tabOpenAndLoaded
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
null
true
)
;
let
openInTab
=
oneOffSearchButtons
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
open
-
in
-
new
-
tab
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
openInTab
{
}
)
;
let
newTab
=
await
tabOpenAndLoaded
;
checkFn
(
testBrowser
newTab
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
}
)
;
}
add_task
(
async
function
searchInNewTab_opensBackground
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
false
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
false
]
[
"
browser
.
tabs
.
loadInBackground
"
true
]
]
}
)
;
await
searchInTab
(
(
testBrowser
newTab
)
=
>
{
Assert
.
equal
(
newTab
.
linkedBrowser
.
currentURI
.
spec
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
"
"
Should
have
loaded
the
expected
URI
in
a
new
tab
.
"
)
;
Assert
.
equal
(
testBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
Should
not
have
touched
the
original
tab
"
)
;
Assert
.
equal
(
testBrowser
gBrowser
.
selectedTab
.
linkedBrowser
"
Should
not
have
changed
the
selected
tab
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
searchInNewTab_opensForeground
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
false
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
false
]
[
"
browser
.
tabs
.
loadInBackground
"
false
]
]
}
)
;
await
searchInTab
(
(
testBrowser
newTab
)
=
>
{
Assert
.
equal
(
newTab
.
linkedBrowser
.
currentURI
.
spec
"
http
:
/
/
mochi
.
test
:
8888
/
?
terms
=
foo
"
"
Should
have
loaded
the
expected
URI
in
a
new
tab
.
"
)
;
Assert
.
equal
(
testBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
Should
not
have
touched
the
original
tab
"
)
;
Assert
.
equal
(
newTab
gBrowser
.
selectedTab
"
Should
have
changed
the
selected
tab
"
)
;
}
)
;
}
)
;
add_task
(
async
function
switchDefaultEngine
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
}
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
foo
"
}
)
;
let
contextMenu
=
oneOffSearchButtons
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
menu
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
let
oneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
popupShownPromise
;
let
engineChangedPromise
=
SearchTestUtils
.
promiseSearchNotification
(
"
engine
-
default
"
"
browser
-
search
-
engine
-
modified
"
)
;
let
setDefault
=
oneOffSearchButtons
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
set
-
default
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
setDefault
{
}
)
;
await
engineChangedPromise
;
Assert
.
equal
(
await
Services
.
search
.
getDefault
(
)
newEngine
"
Should
have
correctly
changed
the
engine
to
the
new
one
"
)
;
}
)
;
}
)
;
add_task
(
async
function
localOneOffsContextMenu
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
[
"
browser
.
urlbar
.
update2
.
localOneOffs
"
true
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
true
]
]
}
)
;
let
popupshownFired
=
false
;
let
onPopupshown
=
(
)
=
>
{
popupshownFired
=
true
;
}
;
let
contextMenu
=
oneOffSearchButtons
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
menu
"
)
;
contextMenu
.
addEventListener
(
"
popupshown
"
onPopupshown
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
foo
"
}
)
;
let
allOneOffs
=
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
Assert
.
greater
(
allOneOffs
.
length
0
"
There
should
be
at
least
one
one
-
off
"
)
;
Assert
.
ok
(
allOneOffs
[
0
]
.
engine
"
The
first
one
-
off
should
be
a
remote
one
-
off
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
allOneOffs
[
0
]
{
type
:
"
contextmenu
"
button
:
2
}
)
;
let
timeout
=
500
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
timeout
)
)
;
Assert
.
ok
(
popupshownFired
"
popupshown
should
be
fired
on
a
remote
one
-
off
"
)
;
popupshownFired
=
false
;
let
hiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
contextMenu
.
hidePopup
(
)
;
await
hiddenPromise
;
let
localOneOffs
=
oneOffSearchButtons
.
localButtons
;
Assert
.
greater
(
localOneOffs
.
length
0
"
There
should
be
at
least
one
local
one
-
off
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
localOneOffs
[
0
]
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
timeout
)
)
;
Assert
.
ok
(
!
popupshownFired
"
popupshown
should
not
be
fired
on
a
local
one
-
off
"
)
;
contextMenu
.
removeEventListener
(
"
popupshown
"
onPopupshown
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
