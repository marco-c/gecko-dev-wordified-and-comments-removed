let
defaultTestEngine
;
const
SEARCH_STRING
=
"
chocolate
cake
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch
"
search_url
:
"
https
:
/
/
www
.
example
.
com
/
"
search_url_get_params
:
"
q
=
{
searchTerms
}
&
pc
=
fake_code
"
}
{
setAsDefault
:
true
}
)
;
defaultTestEngine
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
async
function
searchWithTab
(
searchString
tab
=
null
engine
=
defaultTestEngine
)
{
if
(
!
tab
)
{
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
}
let
[
expectedSearchUrl
]
=
UrlbarUtils
.
getSearchQueryUrl
(
engine
searchString
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
expectedSearchUrl
)
;
gURLBar
.
focus
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
waitForFocus
value
:
searchString
fireInputEvent
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
browserLoadedPromise
;
assertSearchStringIsInUrlbar
(
searchString
)
;
return
{
tab
expectedSearchUrl
}
;
}
function
synthesizeRevert
(
)
{
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
repeat
:
2
}
)
;
}
add_task
(
async
function
revert
(
)
{
let
{
tab
expectedSearchUrl
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
synthesizeRevert
(
)
;
Assert
.
equal
(
gURLBar
.
value
expectedSearchUrl
Urlbar
should
have
the
reverted
URI
{
expectedSearchUrl
}
as
its
value
.
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
revert_and_press_enter
(
)
{
let
{
tab
expectedSearchUrl
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
expectedSearchUrl
)
;
synthesizeRevert
(
)
;
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
browserLoadedPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
revert_and_change_tab
(
)
{
let
{
tab
expectedSearchUrl
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
synthesizeRevert
(
)
;
Assert
.
notEqual
(
gURLBar
.
value
SEARCH_STRING
Search
string
{
SEARCH_STRING
}
should
not
be
in
the
url
bar
)
;
Assert
.
equal
(
gURLBar
.
value
expectedSearchUrl
Urlbar
should
have
{
expectedSearchUrl
}
as
value
.
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
assertSearchStringIsInUrlbar
(
SEARCH_STRING
{
pageProxyState
:
"
invalid
"
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
revert_and_search_again
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
synthesizeRevert
(
)
;
await
searchWithTab
(
"
another
search
string
"
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
revert_when_using_content
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
synthesizeRevert
(
)
;
await
searchWithTab
(
"
another
search
string
"
tab
)
;
synthesizeRevert
(
)
;
let
pageShowPromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
pageshow
"
)
;
tab
.
linkedBrowser
.
goBack
(
)
;
await
pageShowPromise
;
assertSearchStringIsInUrlbar
(
SEARCH_STRING
)
;
pageShowPromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
pageshow
"
)
;
tab
.
linkedBrowser
.
goForward
(
)
;
await
pageShowPromise
;
assertSearchStringIsInUrlbar
(
"
another
search
string
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
