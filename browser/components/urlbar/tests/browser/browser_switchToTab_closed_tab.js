"
use
strict
"
;
const
{
UrlbarProviderOpenTabs
}
=
ChromeUtils
.
importESModule
(
"
moz
-
src
:
/
/
/
browser
/
components
/
urlbar
/
UrlbarProviderOpenTabs
.
sys
.
mjs
"
)
;
async
function
openPagesCount
(
)
{
let
conn
=
await
PlacesUtils
.
promiseLargeCacheDBConnection
(
)
;
let
res
=
await
conn
.
executeCached
(
"
SELECT
COUNT
(
*
)
AS
count
FROM
moz_openpages_temp
;
"
)
;
return
res
[
0
]
.
getResultByName
(
"
count
"
)
;
}
add_task
(
async
function
test_switchToTab_tab_closed
(
)
{
let
testURL
=
"
https
:
/
/
example
.
org
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
dummy_page
.
html
"
;
let
testTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
org
"
)
;
let
pagesCount
=
await
openPagesCount
(
)
;
await
UrlbarProviderOpenTabs
.
registerOpenTab
(
testURL
gBrowser
.
contentPrincipal
.
userContextId
null
false
)
;
Assert
.
equal
(
await
openPagesCount
(
)
pagesCount
+
1
"
We
registered
a
new
open
page
"
)
;
let
tabOpenPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
false
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
testURL
}
)
;
let
element
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
1
)
;
EventUtils
.
synthesizeMouseAtCenter
(
element
{
}
window
)
;
await
tabOpenPromise
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
false
testURL
)
;
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
testURL
"
We
opened
a
new
tab
with
the
URL
"
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
Assert
.
equal
(
await
openPagesCount
(
)
pagesCount
"
We
unregistered
the
orphaned
open
tab
"
)
;
gBrowser
.
removeTab
(
testTab
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
