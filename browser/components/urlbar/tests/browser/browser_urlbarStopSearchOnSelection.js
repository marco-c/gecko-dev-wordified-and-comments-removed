"
use
strict
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngineSlow
.
xml
"
;
const
TEST_ENGINE_SUGGESTIONS_TIMEOUT
=
3000
;
const
TEST_ENGINE_NUM_EXPECTED_RESULTS
=
2
;
add_task
(
async
function
init
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
let
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
add_task
(
async
function
mainTest
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
/
"
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
promiseAutocompleteResultPopup
(
"
amp
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
UrlbarTestUtils
.
getResultCount
(
window
)
=
=
2
+
TEST_ENGINE_NUM_EXPECTED_RESULTS
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
l
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
UrlbarTestUtils
.
getResultCount
(
window
)
=
=
2
;
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
await
promiseSearchComplete
(
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
1
+
TEST_ENGINE_SUGGESTIONS_TIMEOUT
)
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Should
have
the
correct
result
type
"
)
;
Assert
.
equal
(
result
.
searchParams
.
query
"
ampl
"
"
Should
have
the
correct
query
"
)
;
let
count
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
for
(
let
i
=
1
;
i
<
count
;
i
+
+
)
{
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
ok
(
result
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
|
|
!
[
"
amplfoo
"
"
amplbar
"
]
.
includes
(
result
.
searchParams
.
suggestion
)
"
Suggestions
should
not
contain
the
typed
l
char
"
)
;
}
}
)
;
}
)
;
}
)
;
