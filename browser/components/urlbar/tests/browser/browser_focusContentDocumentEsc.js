"
use
strict
"
;
add_task
(
async
function
(
)
{
let
focusBrowserPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
selectedBrowser
"
focus
"
)
;
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
focusBrowserPromise
;
Assert
.
equal
(
document
.
activeElement
gBrowser
.
selectedBrowser
"
Content
document
should
be
focused
"
)
;
}
)
;
add_task
(
async
function
(
)
{
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
UrlbarTestUtils
.
inputIntoURLBar
(
window
"
hello
"
)
)
;
is
(
gURLBar
.
value
"
hello
"
"
URL
bar
value
should
match
after
sending
a
key
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
true
"
Popup
should
be
open
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
false
"
Popup
shouldn
'
t
be
open
"
)
;
Assert
.
equal
(
document
.
activeElement
gURLBar
.
inputField
"
URL
Bar
should
be
focused
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
is
(
gURLBar
.
value
"
"
"
URL
bar
value
should
be
reset
after
escape
"
)
;
Assert
.
equal
(
document
.
activeElement
gURLBar
.
inputField
"
URL
Bar
should
still
be
focused
"
)
;
let
focusBrowserPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
selectedBrowser
"
focus
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
focusBrowserPromise
;
Assert
.
equal
(
document
.
activeElement
gBrowser
.
selectedBrowser
"
Content
document
should
be
focused
"
)
;
}
)
;
add_task
(
async
function
(
)
{
Preferences
.
set
(
"
browser
.
urlbar
.
focusContentDocumentOnEsc
"
false
)
;
let
focusUrlPromise
=
BrowserTestUtils
.
waitForEvent
(
gURLBar
.
inputField
"
focus
"
)
;
gURLBar
.
focus
(
)
;
await
focusUrlPromise
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
false
"
Popup
shouldn
'
t
be
open
"
)
;
Assert
.
equal
(
document
.
activeElement
gURLBar
.
inputField
"
URL
Bar
should
be
focused
"
)
;
Preferences
.
set
(
"
browser
.
urlbar
.
focusContentDocumentOnEsc
"
true
)
;
}
)
;
