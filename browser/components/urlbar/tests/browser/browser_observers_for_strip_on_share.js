"
use
strict
"
;
let
listService
;
const
QPS_PREF
=
"
privacy
.
query_stripping
.
enabled
"
;
const
STRIP_ON_SHARE_PREF
=
"
privacy
.
query_stripping
.
strip_on_share
.
enabled
"
;
add_setup
(
async
function
(
)
{
listService
=
Cc
[
"
mozilla
.
org
/
query
-
stripping
-
list
-
service
;
1
"
]
.
getService
(
Ci
.
nsIURLQueryStrippingListService
)
;
await
listService
.
testWaitForInit
(
)
;
}
)
;
add_task
(
async
function
checkStripOnShareObserversForVaryingStatesOfQPSAndStripOnShare
(
)
{
for
(
let
queryStrippingEnabled
of
[
false
true
]
)
{
for
(
let
stripOnShareEnabled
of
[
false
true
]
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
QPS_PREF
queryStrippingEnabled
]
[
STRIP_ON_SHARE_PREF
stripOnShareEnabled
]
]
}
)
;
let
areObserservesRegistered
;
await
BrowserTestUtils
.
waitForCondition
(
function
(
)
{
areObserservesRegistered
=
listService
.
testHasStripOnShareObservers
(
)
;
return
areObserservesRegistered
=
=
stripOnShareEnabled
;
}
"
waiting
for
init
of
URLQueryStrippingListService
ensuring
observers
have
time
to
register
if
they
need
"
)
;
if
(
!
stripOnShareEnabled
)
{
Assert
.
ok
(
!
areObserservesRegistered
"
Observers
are
unregistered
"
)
;
}
else
{
Assert
.
ok
(
areObserservesRegistered
"
Observers
are
registered
"
)
;
}
await
SpecialPowers
.
popPrefEnv
(
)
;
}
}
}
)
;
add_task
(
async
function
checkQPSObserversForVaryingStatesOfQPSAndStripOnShare
(
)
{
for
(
let
queryStrippingEnabled
of
[
false
true
]
)
{
for
(
let
stripOnShareEnabled
of
[
false
true
]
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
QPS_PREF
queryStrippingEnabled
]
[
STRIP_ON_SHARE_PREF
stripOnShareEnabled
]
]
}
)
;
let
areObserservesRegistered
;
await
BrowserTestUtils
.
waitForCondition
(
function
(
)
{
areObserservesRegistered
=
listService
.
testHasQPSObservers
(
)
;
return
areObserservesRegistered
=
=
queryStrippingEnabled
;
}
"
waiting
for
init
of
URLQueryStrippingListService
ensuring
observers
have
time
to
register
if
they
need
"
)
;
if
(
!
queryStrippingEnabled
)
{
Assert
.
ok
(
!
areObserservesRegistered
"
Observers
are
unregistered
"
)
;
}
else
{
Assert
.
ok
(
areObserservesRegistered
"
Observers
are
registered
"
)
;
}
await
SpecialPowers
.
popPrefEnv
(
)
;
}
}
}
)
;
