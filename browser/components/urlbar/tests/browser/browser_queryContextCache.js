"
use
strict
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
UrlbarProviderTopSites
:
"
resource
:
/
/
/
modules
/
UrlbarProviderTopSites
.
sys
.
mjs
"
}
)
;
const
TEST_URLS
=
[
]
;
const
TEST_URLS_COUNT
=
5
;
const
TOP_SITES_VISIT_COUNT
=
5
;
const
SEARCH_STRING
=
"
example
"
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
requestLongerTimeout
(
3
)
;
}
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
TestUtils
.
waitForTick
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quickactions
"
false
]
]
}
)
;
for
(
let
i
=
0
;
i
<
TEST_URLS_COUNT
;
i
+
+
)
{
let
url
=
https
:
/
/
{
i
}
.
example
.
com
/
{
SEARCH_STRING
}
;
TEST_URLS
.
unshift
(
url
)
;
for
(
let
j
=
0
;
j
<
TOP_SITES_VISIT_COUNT
;
j
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
url
)
;
}
}
await
updateTopSitesAndAwaitChanged
(
TEST_URLS_COUNT
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
)
;
add_task
(
async
function
search
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
SEARCH_STRING
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
await
openViewAndAssertCached
(
{
win
searchString
:
SEARCH_STRING
cached
:
true
}
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites_simple
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
}
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites_nonEmptySearch
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
"
test
"
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
win
.
gURLBar
.
handleRevert
(
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
}
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites_otherEmptySearch
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
EventUtils
.
synthesizeKey
(
"
k
"
{
accelKey
:
true
}
win
)
;
Assert
.
ok
(
!
win
.
gURLBar
.
view
.
isOpen
"
View
is
not
open
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
win
{
engineName
:
Services
.
search
.
defaultEngine
.
name
isGeneralPurposeEngine
:
true
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
isPreview
:
false
entry
:
"
shortcut
"
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
win
.
gURLBar
.
handleRevert
(
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
win
null
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
}
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites_changed
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
let
newURL
=
"
https
:
/
/
changed
.
example
.
com
/
"
;
for
(
let
j
=
0
;
j
<
TOP_SITES_VISIT_COUNT
;
j
+
+
)
{
await
PlacesTestUtils
.
addVisits
(
newURL
)
;
}
await
updateTopSitesAndAwaitChanged
(
TEST_URLS_COUNT
+
1
)
;
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
urls
:
[
newURL
.
.
.
TEST_URLS
]
ignoreOrder
:
true
}
)
;
info
(
"
Removing
new
URL
and
awaiting
newtab
-
top
-
sites
-
changed
"
)
;
let
changedPromise
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
topsites
.
component
.
enabled
"
)
)
{
changedPromise
=
TestUtils
.
topicObserved
(
"
topsites
-
refreshed
"
)
;
}
else
{
changedPromise
=
TestUtils
.
topicObserved
(
"
newtab
-
top
-
sites
-
changed
"
)
;
}
await
PlacesUtils
.
history
.
remove
(
[
newURL
]
)
;
await
changedPromise
;
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
}
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites_nonTopSitesResults
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
let
suggestedIndexURL
=
"
https
:
/
/
example
.
com
/
suggested
-
index
-
0
"
;
let
provider
=
new
UrlbarTestUtils
.
TestProvider
(
{
priority
:
lazy
.
UrlbarProviderTopSites
.
PRIORITY
results
:
[
Object
.
assign
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
url
:
suggestedIndexURL
}
)
{
suggestedIndex
:
0
}
)
]
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
keepOpen
:
true
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
win
)
TEST_URLS
.
length
+
1
"
Should
be
one
more
result
after
search
finishes
"
)
;
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
win
0
)
;
Assert
.
equal
(
details
.
url
suggestedIndexURL
"
First
result
after
search
finishes
should
be
the
suggested
index
result
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
urls
:
[
suggestedIndexURL
.
.
.
TEST_URLS
]
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites_disabled_1
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
topsites
"
false
)
;
await
openViewAndAssertCached
(
{
win
cached
:
false
cachedAfterOpen
:
false
}
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
topsites
"
)
;
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
}
)
;
}
)
;
}
)
;
add_task
(
async
function
topSites_disabled_2
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topsites
"
false
)
;
await
openViewAndAssertCached
(
{
win
cached
:
false
cachedAfterOpen
:
false
}
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topsites
"
)
;
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
}
)
;
}
)
;
}
)
;
add_task
(
async
function
evict
(
)
{
await
withNewBrowserWindow
(
async
win
=
>
{
let
cache
=
win
.
gURLBar
.
view
.
queryContextCache
;
Assert
.
equal
(
typeof
cache
.
size
"
number
"
"
Sanity
check
:
queryContextCache
.
size
is
a
number
"
)
;
await
openViewAndAssertCached
(
{
win
cached
:
false
}
)
;
for
(
let
i
=
0
;
i
<
cache
.
size
+
1
;
i
+
+
)
{
let
searchString
=
"
test
"
+
i
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
value
:
searchString
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
Assert
.
ok
(
cache
.
get
(
searchString
)
"
Cache
includes
search
string
:
"
+
searchString
)
;
}
Assert
.
ok
(
!
cache
.
get
(
"
test0
"
)
"
test0
has
been
evicted
from
the
cache
"
)
;
Assert
.
ok
(
cache
.
get
(
"
test1
"
)
"
Cache
includes
test1
"
)
;
win
.
gURLBar
.
handleRevert
(
)
;
Assert
.
equal
(
win
.
gURLBar
.
value
"
"
"
Input
is
empty
after
reverting
"
)
;
await
openViewAndAssertCached
(
{
win
cached
:
true
}
)
;
}
)
;
}
)
;
async
function
openViewAndAssertCached
(
{
win
cached
cachedAfterOpen
=
true
searchString
=
"
"
urls
=
TEST_URLS
ignoreOrder
=
false
keepOpen
=
false
}
)
{
let
cache
=
win
.
gURLBar
.
view
.
queryContextCache
;
let
getContext
=
(
)
=
>
searchString
?
cache
.
get
(
searchString
)
:
cache
.
topSitesContext
;
let
cachedContext
=
getContext
(
)
;
Assert
.
equal
(
!
!
cachedContext
cached
"
Context
is
present
or
not
in
cache
as
expected
for
search
string
:
"
+
JSON
.
stringify
(
searchString
)
)
;
Assert
.
deepEqual
(
cachedContext
JSON
.
parse
(
JSON
.
stringify
(
cachedContext
(
k
v
)
=
>
v
?
?
null
)
)
"
The
query
context
should
be
made
of
serializable
properties
"
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
win
.
document
.
getElementById
(
"
Browser
:
OpenLocation
"
)
.
doCommand
(
)
;
Assert
.
equal
(
win
.
gURLBar
.
view
.
isOpen
cached
"
View
is
open
or
not
as
expected
"
)
;
if
(
!
cached
&
&
cachedAfterOpen
)
{
await
TestUtils
.
waitForCondition
(
getContext
"
Waiting
for
context
to
be
cached
for
search
string
:
"
+
JSON
.
stringify
(
searchString
)
)
;
}
else
if
(
cached
)
{
let
startIndex
=
0
;
let
resultCount
=
urls
.
length
;
if
(
searchString
)
{
startIndex
+
+
;
resultCount
+
+
;
}
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
win
)
.
children
;
Assert
.
equal
(
rows
.
length
resultCount
"
View
has
expected
row
count
"
)
;
if
(
searchString
)
{
let
result
=
rows
[
0
]
.
result
;
Assert
.
ok
(
result
.
heuristic
"
First
row
should
be
a
heuristic
"
)
;
Assert
.
equal
(
result
.
payload
.
query
searchString
"
First
row
'
s
query
should
be
the
search
string
"
)
;
}
let
actualURLs
=
[
]
;
let
urlRows
=
Array
.
from
(
rows
)
.
slice
(
startIndex
)
;
for
(
let
row
of
urlRows
)
{
actualURLs
.
push
(
row
.
result
.
payload
.
url
)
;
}
if
(
ignoreOrder
)
{
urls
.
sort
(
)
;
actualURLs
.
sort
(
)
;
}
Assert
.
deepEqual
(
actualURLs
urls
"
View
should
contain
the
expected
URLs
"
)
;
}
await
win
.
gURLBar
.
lastQueryContextPromise
;
if
(
!
keepOpen
)
{
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
}
}
async
function
updateTopSitesAndAwaitChanged
(
expectedCount
)
{
info
(
"
Updating
top
sites
and
awaiting
newtab
-
top
-
sites
-
changed
"
)
;
let
changedPromise
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
topsites
.
component
.
enabled
"
)
)
{
changedPromise
=
TestUtils
.
topicObserved
(
"
topsites
-
refreshed
"
)
.
then
(
(
)
=
>
info
(
"
Observed
topsites
-
refreshed
"
)
)
;
}
else
{
changedPromise
=
TestUtils
.
topicObserved
(
"
newtab
-
top
-
sites
-
changed
"
)
.
then
(
(
)
=
>
info
(
"
Observed
newtab
-
top
-
sites
-
changed
"
)
)
;
}
await
updateTopSites
(
sites
=
>
sites
?
.
length
=
=
expectedCount
)
;
await
changedPromise
;
}
async
function
withNewBrowserWindow
(
callback
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
callback
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
