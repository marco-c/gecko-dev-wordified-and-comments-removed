"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
head
-
glean
.
js
"
this
)
;
add_setup
(
async
function
(
)
{
await
setup
(
)
;
}
)
;
add_task
(
async
function
cancelImpressionTimerByEngagementEvent
(
)
{
const
additionalInterval
=
1000
;
const
originalInterval
=
UrlbarPrefs
.
get
(
"
searchEngagementTelemetry
.
pauseImpressionIntervalMs
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
searchEngagementTelemetry
.
pauseImpressionIntervalMs
"
originalInterval
+
additionalInterval
]
]
}
)
;
for
(
const
trigger
of
[
doEnter
doBlur
]
)
{
await
doTest
(
async
browser
=
>
{
await
openPopup
(
"
https
:
/
/
example
.
com
"
)
;
await
trigger
(
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
originalInterval
+
additionalInterval
)
)
;
assertImpressionTelemetry
(
[
]
)
;
}
)
;
}
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
cancelInpressionTimerByType
(
)
{
const
originalInterval
=
UrlbarPrefs
.
get
(
"
searchEngagementTelemetry
.
pauseImpressionIntervalMs
"
)
;
await
doTest
(
async
browser
=
>
{
await
openPopup
(
"
x
"
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
originalInterval
/
10
)
)
;
assertImpressionTelemetry
(
[
]
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
EventUtils
.
synthesizeKey
(
"
z
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
assertImpressionTelemetry
(
[
]
)
;
await
waitForPauseImpression
(
)
;
assertImpressionTelemetry
(
[
{
n_chars
:
3
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
oneImpressionInOneSession
(
)
{
await
doTest
(
async
browser
=
>
{
await
openPopup
(
"
x
"
)
;
await
waitForPauseImpression
(
)
;
assertImpressionTelemetry
(
[
{
n_chars
:
1
}
]
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
EventUtils
.
synthesizeKey
(
"
z
"
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
await
waitForPauseImpression
(
)
;
assertImpressionTelemetry
(
[
{
n_chars
:
1
}
]
)
;
await
doEnter
(
)
;
await
openPopup
(
"
x
z
y
"
)
;
await
waitForPauseImpression
(
)
;
assertImpressionTelemetry
(
[
{
n_chars
:
1
}
{
n_chars
:
5
}
]
)
;
}
)
;
}
)
;
