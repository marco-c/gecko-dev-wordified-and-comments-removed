const
url
=
BrowserUtils
.
trimURLProtocol
+
"
invalid
.
somehost
/
mytest
"
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
trimURLs
"
true
]
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
url
)
;
registerCleanupFunction
(
PlacesUtils
.
history
.
clear
)
;
}
)
;
add_task
(
async
function
test_escape
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
invalid
"
}
)
;
let
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
greater
(
resultCount
1
"
There
should
be
at
least
two
results
"
)
;
for
(
let
i
=
0
;
i
<
resultCount
;
i
+
+
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
info
(
Result
at
{
i
}
has
url
{
result
.
url
}
)
;
if
(
result
.
url
.
startsWith
(
url
)
)
{
break
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
}
Assert
.
equal
(
gURLBar
.
value
url
"
The
string
displayed
in
the
textbox
should
be
the
untrimmed
url
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
)
;
let
promise
=
waitforLoadURL
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
let
loadedUrl
=
await
promise
;
Assert
.
equal
(
loadedUrl
url
"
Should
try
to
load
a
url
"
)
;
}
)
;
add_task
(
async
function
test_edit_url
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
invalid
"
}
)
;
let
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
greater
(
resultCount
1
"
There
should
be
at
least
two
results
"
)
;
for
(
let
i
=
1
;
i
<
resultCount
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
info
(
Result
at
{
i
}
has
url
{
result
.
url
}
)
;
if
(
result
.
url
.
startsWith
(
url
)
)
{
break
;
}
}
Assert
.
equal
(
gURLBar
.
value
url
"
The
string
displayed
in
the
textbox
should
be
the
untrimmed
url
"
)
;
EventUtils
.
synthesizeKey
(
"
2
"
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
"
Should
visit
a
url
"
)
;
Assert
.
equal
(
result
.
url
url
+
"
2
"
"
Should
visit
the
modified
url
"
)
;
let
promise
=
waitforLoadURL
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
let
loadedUrl
=
await
promise
;
Assert
.
equal
(
loadedUrl
url
+
"
2
"
"
Should
try
to
load
the
modified
url
"
)
;
}
)
;
async
function
waitforLoadURL
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
loadedUrl
=
await
new
Promise
(
resolve
=
>
sandbox
.
stub
(
gURLBar
"
_loadURL
"
)
.
callsFake
(
resolve
)
)
;
sandbox
.
restore
(
)
;
return
loadedUrl
;
}
