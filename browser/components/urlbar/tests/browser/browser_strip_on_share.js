"
use
strict
"
;
let
listService
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
strip_list
"
"
stripParam
"
]
[
"
privacy
.
query_stripping
.
enabled
"
false
]
]
}
)
;
listService
=
Cc
[
"
mozilla
.
org
/
query
-
stripping
-
list
-
service
;
1
"
]
.
getService
(
Ci
.
nsIURLQueryStrippingListService
)
;
await
listService
.
testWaitForInit
(
)
;
}
)
;
add_task
(
async
function
testInvalidURI
(
)
{
await
testMenuItemDisabled
(
"
https
:
/
/
www
.
example
.
com
/
?
stripParam
=
1234
"
true
true
)
;
}
)
;
add_task
(
async
function
testPrefDisabled
(
)
{
await
testMenuItemDisabled
(
"
https
:
/
/
www
.
example
.
com
/
?
stripParam
=
1234
"
false
false
)
;
}
)
;
add_task
(
async
function
testQueryParamIsStripped
(
)
{
let
originalUrl
=
"
https
:
/
/
www
.
example
.
com
/
?
stripParam
=
1234
"
;
let
shortenedUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
await
testMenuItemEnabled
(
{
selectWholeUrl
:
false
validUrl
:
originalUrl
strippedUrl
:
shortenedUrl
useTestList
:
false
}
)
;
}
)
;
add_task
(
async
function
testQueryParamIsStrippedSelectURL
(
)
{
let
originalUrl
=
"
https
:
/
/
www
.
example
.
com
/
?
stripParam
=
1234
"
;
let
shortenedUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
await
testMenuItemEnabled
(
{
selectWholeUrl
:
true
validUrl
:
originalUrl
strippedUrl
:
shortenedUrl
useTestList
:
false
}
)
;
}
)
;
add_task
(
async
function
testURLIsCopiedWithNoParams
(
)
{
let
originalUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
let
shortenedUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
await
testMenuItemEnabled
(
{
selectWholeUrl
:
true
validUrl
:
originalUrl
strippedUrl
:
shortenedUrl
useTestList
:
false
}
)
;
}
)
;
add_task
(
async
function
testQueryParamIsStrippedForSiteSpecific
(
)
{
let
originalUrl
=
"
https
:
/
/
www
.
example
.
com
/
?
test_2
=
1234
"
;
let
shortenedUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
await
testMenuItemEnabled
(
{
selectWholeUrl
:
true
validUrl
:
originalUrl
strippedUrl
:
shortenedUrl
useTestList
:
true
}
)
;
}
)
;
add_task
(
async
function
testQueryParamIsNotStrippedForWrongSiteSpecific
(
)
{
let
originalUrl
=
"
https
:
/
/
www
.
example
.
com
/
?
test_3
=
1234
"
;
let
shortenedUrl
=
"
https
:
/
/
www
.
example
.
com
/
?
test_3
=
1234
"
;
await
testMenuItemEnabled
(
{
selectWholeUrl
:
true
validUrl
:
originalUrl
strippedUrl
:
shortenedUrl
useTestList
:
true
}
)
;
}
)
;
add_task
(
async
function
testQueryParamIsStrippedWhenParamIsCapitalized
(
)
{
let
originalUrl
=
"
https
:
/
/
www
.
example
.
com
/
?
TEST_1
=
1234
"
;
let
shortenedUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
await
testMenuItemEnabled
(
{
selectWholeUrl
:
true
validUrl
:
originalUrl
strippedUrl
:
shortenedUrl
useTestList
:
true
}
)
;
}
)
;
add_task
(
async
function
testQueryParamIsStrippedWhenParamIsCapitalized
(
)
{
let
originalUrl
=
"
https
:
/
/
www
.
example
.
com
/
?
test_5
=
1234
"
;
let
shortenedUrl
=
"
https
:
/
/
www
.
example
.
com
/
"
;
await
testMenuItemEnabled
(
{
selectWholeUrl
:
true
validUrl
:
originalUrl
strippedUrl
:
shortenedUrl
useTestList
:
true
}
)
;
}
)
;
async
function
testMenuItemDisabled
(
url
prefEnabled
selection
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
strip_on_share
.
enabled
"
prefEnabled
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
)
{
gURLBar
.
focus
(
)
;
if
(
selection
)
{
gURLBar
.
selectionStart
=
url
.
indexOf
(
"
example
"
)
;
gURLBar
.
selectionEnd
=
url
.
indexOf
(
"
4
"
)
;
}
let
menuitem
=
await
promiseContextualMenuitem
(
"
strip
-
on
-
share
"
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
isVisible
(
menuitem
)
"
Menu
item
is
not
visible
"
)
;
let
hidePromise
=
BrowserTestUtils
.
waitForEvent
(
menuitem
.
parentElement
"
popuphidden
"
)
;
menuitem
.
parentElement
.
hidePopup
(
)
;
await
hidePromise
;
}
)
;
}
async
function
testMenuItemEnabled
(
{
selectWholeUrl
validUrl
strippedUrl
useTestList
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
strip_on_share
.
enabled
"
true
]
[
"
privacy
.
query_stripping
.
strip_on_share
.
enableTestMode
"
useTestList
]
]
}
)
;
if
(
useTestList
)
{
let
testJson
=
{
global
:
{
queryParams
:
[
"
utm_ad
"
]
topLevelSites
:
[
"
*
"
]
}
example
:
{
queryParams
:
[
"
test_2
"
"
test_1
"
"
TEST_5
"
]
topLevelSites
:
[
"
www
.
example
.
com
"
]
}
exampleNet
:
{
queryParams
:
[
"
test_3
"
"
test_4
"
]
topLevelSites
:
[
"
www
.
example
.
net
"
]
}
}
;
await
listService
.
testSetList
(
testJson
)
;
}
await
BrowserTestUtils
.
withNewTab
(
validUrl
async
function
(
)
{
gURLBar
.
focus
(
)
;
if
(
selectWholeUrl
)
{
gURLBar
.
select
(
)
;
}
let
menuitem
=
await
promiseContextualMenuitem
(
"
strip
-
on
-
share
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
menuitem
)
"
Menu
item
is
visible
"
)
;
let
hidePromise
=
BrowserTestUtils
.
waitForEvent
(
menuitem
.
parentElement
"
popuphidden
"
)
;
await
SimpleTest
.
promiseClipboardChange
(
strippedUrl
(
)
=
>
{
menuitem
.
closest
(
"
menupopup
"
)
.
activateItem
(
menuitem
)
;
}
)
;
await
hidePromise
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
