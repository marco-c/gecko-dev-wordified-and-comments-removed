requestLongerTimeout
(
3
)
;
const
SEARCH_STRING
=
"
chocolate
cake
"
;
const
PERSISTED_VIEWED
=
"
urlbar
.
persistedsearchterms
.
view_count
"
;
const
PERSISTED_REVERTED
=
"
urlbar
.
persistedsearchterms
.
revert_by_popup_count
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
true
]
]
}
)
;
let
cleanup
=
await
installPersistTestEngines
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
cleanup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
load_page_with_persisted_search
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
load_page_without_persisted_search
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
null
Services
.
search
.
defaultEngine
false
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
undefined
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
load_page_n_times
(
)
{
let
N
=
5
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
for
(
let
index
=
0
;
index
<
N
;
+
+
index
)
{
await
searchWithTab
(
SEARCH_STRING
tab
)
;
}
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
N
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
focus_and_unfocus
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
gURLBar
.
focus
(
)
;
gURLBar
.
select
(
)
;
gURLBar
.
blur
(
)
;
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
history_api
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
function
(
)
{
let
url
=
new
URL
(
content
.
window
.
location
)
;
let
someState
=
{
value
:
true
}
;
url
.
searchParams
.
set
(
"
pc
"
"
fake_code_2
"
)
;
content
.
history
.
pushState
(
someState
"
"
url
)
;
someState
.
value
=
false
;
content
.
history
.
replaceState
(
someState
"
"
url
)
;
}
)
;
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
switch_tabs
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
2
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
tabhistory
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
"
https
:
/
/
www
.
example
.
com
/
some_url
"
)
;
await
browserLoadedPromise
;
let
pageShowPromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
pageshow
"
)
;
tab
.
linkedBrowser
.
goBack
(
false
)
;
await
pageShowPromise
;
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
2
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
popup_in_urlbar
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
promisePopupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
"
test
-
notification
"
"
This
is
a
sample
popup
.
"
)
;
await
promisePopupShown
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
1
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
non_persistent_popup_in_urlbar_switch_tab
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
promisePopupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
"
test
-
notification
"
"
This
is
a
sample
popup
.
"
"
geo
-
notification
-
icon
"
)
;
await
promisePopupShown
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
1
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
2
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
1
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
persistent_popup_in_urlbar_switch_tab
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
promisePopupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
"
test
-
notification
"
"
This
is
a
sample
popup
.
"
"
geo
-
notification
-
icon
"
null
null
{
persistent
:
true
}
)
;
await
promisePopupShown
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
1
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
promisePopupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
await
promisePopupShown
;
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
2
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
2
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
popup_in_urlbar_without_feature
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
null
Services
.
search
.
defaultEngine
false
)
;
let
promisePopupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
"
test
-
notification
"
"
This
is
a
sample
popup
.
"
)
;
await
promisePopupShown
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
undefined
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
popup_not_in_urlbar
(
)
{
let
{
tab
}
=
await
searchWithTab
(
SEARCH_STRING
)
;
let
promisePopupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
"
test
-
notification
"
"
This
is
a
sample
popup
that
uses
the
unified
extensions
button
.
"
gUnifiedExtensions
.
getPopupAnchorID
(
gBrowser
.
selectedBrowser
window
)
)
;
await
promisePopupShown
;
let
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
false
true
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_VIEWED
1
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PERSISTED_REVERTED
undefined
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
