"
use
strict
"
;
const
TEST_URL
=
{
TEST_BASE_URL
}
dummy_page
.
html
;
add_task
(
async
function
(
)
{
let
normalWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
runTest
(
normalWindow
privateWindow
false
)
;
await
BrowserTestUtils
.
closeWindow
(
normalWindow
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
normalWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
runTest
(
privateWindow
normalWindow
false
)
;
await
BrowserTestUtils
.
closeWindow
(
normalWindow
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
runTest
(
privateWindow
privateWindow
false
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
normalWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
runTest
(
normalWindow
normalWindow
true
)
;
await
BrowserTestUtils
.
closeWindow
(
normalWindow
)
;
}
)
;
async
function
runTest
(
aSourceWindow
aDestWindow
aExpectSwitch
aCallback
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
aSourceWindow
.
gBrowser
TEST_URL
)
;
let
testTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
aDestWindow
.
gBrowser
)
;
info
(
"
waiting
for
focus
on
the
window
"
)
;
await
SimpleTest
.
promiseFocus
(
aDestWindow
)
;
info
(
"
got
focus
on
the
window
"
)
;
aDestWindow
.
gBrowser
.
selectedTab
=
testTab
;
let
sessionHistoryCount
=
await
new
Promise
(
resolve
=
>
{
SessionStore
.
getSessionHistory
(
gBrowser
.
selectedTab
function
(
sessionHistory
)
{
resolve
(
sessionHistory
.
entries
.
length
)
;
}
)
;
}
)
;
ok
(
sessionHistoryCount
<
2
The
test
tab
has
1
or
fewer
history
entries
.
sessionHistoryCount
=
{
sessionHistoryCount
}
)
;
is
(
testTab
.
linkedBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
The
test
tab
is
on
about
:
blank
"
)
;
await
ContentTask
.
spawn
(
testTab
.
linkedBrowser
null
async
function
(
)
{
ok
(
!
content
.
document
.
body
.
hasChildNodes
(
)
"
The
test
tab
has
no
child
nodes
"
)
;
}
)
;
ok
(
!
testTab
.
hasAttribute
(
"
busy
"
)
"
The
test
tab
doesn
'
t
have
the
busy
attribute
"
)
;
let
searchString
=
UrlbarPrefs
.
get
(
"
quantumbar
"
)
?
TEST_URL
:
TEST_URL
.
slice
(
1
)
;
await
promiseAutocompleteResultPopup
(
searchString
aDestWindow
)
;
info
(
awesomebar
popup
appeared
.
aExpectSwitch
:
{
aExpectSwitch
}
)
;
while
(
UrlbarTestUtils
.
getSelectedIndex
(
aDestWindow
)
<
UrlbarTestUtils
.
getResultCount
(
aDestWindow
)
-
1
)
{
info
(
"
handling
key
navigation
for
DOM_VK_DOWN
key
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
}
aDestWindow
)
;
}
let
awaitTabSwitch
;
if
(
aExpectSwitch
)
{
awaitTabSwitch
=
BrowserTestUtils
.
waitForTabClosing
(
testTab
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
aDestWindow
)
;
info
(
"
sent
Enter
command
to
the
controller
"
)
;
if
(
aExpectSwitch
)
{
await
awaitTabSwitch
;
}
else
{
await
BrowserTestUtils
.
browserLoaded
(
testTab
.
linkedBrowser
)
;
}
}
