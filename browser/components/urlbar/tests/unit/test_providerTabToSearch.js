"
use
strict
"
;
let
testEngine
;
add_task
(
async
function
init
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
update2
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
update2
.
tabToComplete
"
true
)
;
testEngine
=
await
Services
.
search
.
addEngineWithDetails
(
"
Test
"
{
template
:
"
https
:
/
/
example
.
com
/
?
search
=
{
searchTerms
}
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
Services
.
search
.
removeEngine
(
testEngine
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
update2
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
update2
.
tabToComplete
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
search
.
suggest
.
enabled
"
)
;
}
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
"
https
:
/
/
example
.
com
/
"
]
)
;
let
context
=
createContext
(
"
examp
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
example
.
com
/
"
completed
:
"
https
:
/
/
example
.
com
/
"
matches
:
[
makeVisitResult
(
context
{
uri
:
"
https
:
/
/
example
.
com
/
"
title
:
"
https
:
/
/
example
.
com
"
heuristic
:
true
providerName
:
"
Autofill
"
}
)
makeSearchResult
(
context
{
engineName
:
testEngine
.
name
uri
:
testEngine
.
getResultDomain
(
)
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
query
:
"
"
providerName
:
"
TabToSearch
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
}
)
;
add_task
(
async
function
noAutofill
(
)
{
let
context
=
createContext
(
"
examp
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
Services
.
search
.
defaultEngine
.
name
engineIconUri
:
Services
.
search
.
defaultEngine
.
iconURI
?
.
spec
heuristic
:
true
providerName
:
"
HeuristicFallback
"
}
)
]
}
)
;
}
)
;
add_task
(
async
function
autofillDoesNotMatchEngine
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
"
https
:
/
/
example
.
ca
/
"
]
)
;
let
context
=
createContext
(
"
example
.
c
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
example
.
ca
/
"
completed
:
"
https
:
/
/
example
.
ca
/
"
matches
:
[
makeVisitResult
(
context
{
uri
:
"
https
:
/
/
example
.
ca
/
"
title
:
"
https
:
/
/
example
.
ca
"
heuristic
:
true
providerName
:
"
Autofill
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
}
)
;
add_task
(
async
function
ignoreWww
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
"
https
:
/
/
www
.
example
.
com
/
"
]
)
;
let
context
=
createContext
(
"
www
.
examp
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
www
.
example
.
com
/
"
completed
:
"
https
:
/
/
www
.
example
.
com
/
"
matches
:
[
makeVisitResult
(
context
{
uri
:
"
https
:
/
/
www
.
example
.
com
/
"
title
:
"
https
:
/
/
www
.
example
.
com
"
heuristic
:
true
providerName
:
"
Autofill
"
}
)
makeSearchResult
(
context
{
engineName
:
testEngine
.
name
uri
:
testEngine
.
getResultDomain
(
)
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
query
:
"
"
providerName
:
"
TabToSearch
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
https
:
/
/
foo
.
bar
/
"
]
)
;
let
wwwTestEngine
=
await
Services
.
search
.
addEngineWithDetails
(
"
TestWww
"
{
template
:
"
https
:
/
/
www
.
foo
.
bar
/
?
search
=
{
searchTerms
}
"
}
)
;
context
=
createContext
(
"
foo
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
foo
.
bar
/
"
completed
:
"
https
:
/
/
foo
.
bar
/
"
matches
:
[
makeVisitResult
(
context
{
uri
:
"
https
:
/
/
foo
.
bar
/
"
title
:
"
https
:
/
/
foo
.
bar
"
heuristic
:
true
providerName
:
"
Autofill
"
}
)
makeSearchResult
(
context
{
engineName
:
wwwTestEngine
.
name
uri
:
wwwTestEngine
.
getResultDomain
(
)
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
query
:
"
"
providerName
:
"
TabToSearch
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
await
PlacesTestUtils
.
addVisits
(
[
"
https
:
/
/
www
.
foo
.
bar
/
"
]
)
;
context
=
createContext
(
"
foo
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
foo
.
bar
/
"
completed
:
"
https
:
/
/
www
.
foo
.
bar
/
"
matches
:
[
makeVisitResult
(
context
{
uri
:
"
https
:
/
/
www
.
foo
.
bar
/
"
title
:
"
https
:
/
/
www
.
foo
.
bar
"
heuristic
:
true
providerName
:
"
Autofill
"
}
)
makeSearchResult
(
context
{
engineName
:
wwwTestEngine
.
name
uri
:
wwwTestEngine
.
getResultDomain
(
)
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
query
:
"
"
providerName
:
"
TabToSearch
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
await
Services
.
search
.
removeEngine
(
wwwTestEngine
)
;
}
)
;
