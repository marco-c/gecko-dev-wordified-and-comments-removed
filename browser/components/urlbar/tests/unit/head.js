const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
var
{
UrlbarMuxer
UrlbarProvider
UrlbarQueryContext
UrlbarUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
HttpServer
:
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
sys
.
mjs
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
SearchTestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
sys
.
mjs
"
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
sys
.
mjs
"
UrlbarInput
:
"
resource
:
/
/
/
modules
/
UrlbarInput
.
sys
.
mjs
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
sys
.
mjs
"
UrlbarProviderOpenTabs
:
"
resource
:
/
/
/
modules
/
UrlbarProviderOpenTabs
.
sys
.
mjs
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
sys
.
mjs
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
sys
.
mjs
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
sys
.
mjs
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
QuickSuggestTestUtils
"
(
)
=
>
{
const
{
QuickSuggestTestUtils
:
module
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
QuickSuggestTestUtils
.
sys
.
mjs
"
)
;
module
.
init
(
this
)
;
return
module
;
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
MerinoTestUtils
"
(
)
=
>
{
const
{
MerinoTestUtils
:
module
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
MerinoTestUtils
.
sys
.
mjs
"
)
;
module
.
init
(
this
)
;
return
module
;
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
UrlbarTestUtils
"
(
)
=
>
{
const
{
UrlbarTestUtils
:
module
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
)
;
module
.
init
(
this
)
;
return
module
;
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
PlacesFrecencyRecalculator
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
places
/
frecency
-
recalculator
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
.
wrappedJSObject
;
}
)
;
do_get_profile
(
)
;
SearchTestUtils
.
init
(
this
)
;
const
SUGGESTIONS_ENGINE_NAME
=
"
Suggestions
"
;
const
TAIL_SUGGESTIONS_ENGINE_NAME
=
"
Tail
Suggestions
"
;
var
gDBConn
;
function
DBConn
(
aForceNewConnection
)
{
if
(
!
aForceNewConnection
)
{
let
db
=
PlacesUtils
.
history
.
DBConnection
;
if
(
db
.
connectionReady
)
{
return
db
;
}
}
if
(
!
gDBConn
|
|
aForceNewConnection
)
{
let
file
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
file
.
append
(
"
places
.
sqlite
"
)
;
let
dbConn
=
(
gDBConn
=
Services
.
storage
.
openDatabase
(
file
)
)
;
TestUtils
.
topicObserved
(
"
profile
-
before
-
change
"
)
.
then
(
(
)
=
>
dbConn
.
asyncClose
(
)
)
;
}
return
gDBConn
.
connectionReady
?
gDBConn
:
null
;
}
function
createContext
(
searchString
=
"
foo
"
properties
=
{
}
)
{
info
(
Creating
new
queryContext
with
searchString
:
{
searchString
}
)
;
let
context
=
new
UrlbarQueryContext
(
Object
.
assign
(
{
allowAutofill
:
UrlbarPrefs
.
get
(
"
autoFill
"
)
isPrivate
:
true
maxResults
:
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
searchString
}
properties
)
)
;
UrlbarTokenizer
.
tokenize
(
context
)
;
return
context
;
}
function
promiseControllerNotification
(
controller
notification
expected
=
true
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
proxifiedObserver
=
new
Proxy
(
{
}
{
get
:
(
target
name
)
=
>
{
if
(
name
=
=
notification
)
{
return
(
.
.
.
args
)
=
>
{
controller
.
removeQueryListener
(
proxifiedObserver
)
;
if
(
expected
)
{
resolve
(
args
)
;
}
else
{
reject
(
)
;
}
}
;
}
return
(
)
=
>
false
;
}
}
)
;
controller
.
addQueryListener
(
proxifiedObserver
)
;
}
)
;
}
function
convertToUtf8
(
str
)
{
return
String
.
fromCharCode
(
.
.
.
new
TextEncoder
(
)
.
encode
(
str
)
)
;
}
function
registerBasicTestProvider
(
results
=
[
]
onCancel
type
name
)
{
let
provider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
onCancel
type
name
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
registerCleanupFunction
(
(
)
=
>
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
)
;
return
provider
;
}
function
makeTestServer
(
port
=
-
1
)
{
let
httpServer
=
new
HttpServer
(
)
;
httpServer
.
start
(
port
)
;
registerCleanupFunction
(
(
)
=
>
httpServer
.
stop
(
(
)
=
>
{
}
)
)
;
return
httpServer
;
}
async
function
addTestSuggestionsEngine
(
suggestionsFn
=
null
{
name
=
SUGGESTIONS_ENGINE_NAME
}
=
{
}
)
{
let
server
=
makeTestServer
(
)
;
server
.
registerPathHandler
(
"
/
suggest
"
(
req
resp
)
=
>
{
let
params
=
new
URLSearchParams
(
req
.
queryString
)
;
let
searchStr
=
params
.
get
(
"
q
"
)
;
let
suggestions
=
suggestionsFn
?
suggestionsFn
(
searchStr
)
:
[
searchStr
]
.
concat
(
[
"
foo
"
"
bar
"
]
.
map
(
s
=
>
searchStr
+
"
"
+
s
)
)
;
let
data
=
[
searchStr
suggestions
]
;
resp
.
setHeader
(
"
Content
-
Type
"
"
application
/
json
"
false
)
;
resp
.
write
(
JSON
.
stringify
(
data
)
)
;
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
search_url
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
search
suggest_url
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
suggest
suggest_url_get_params
:
"
?
q
=
{
searchTerms
}
"
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
name
)
;
return
engine
;
}
async
function
addTestTailSuggestionsEngine
(
suggestionsFn
=
null
)
{
let
server
=
makeTestServer
(
)
;
server
.
registerPathHandler
(
"
/
suggest
"
(
req
resp
)
=
>
{
let
params
=
new
URLSearchParams
(
req
.
queryString
)
;
let
searchStr
=
params
.
get
(
"
q
"
)
;
let
suggestions
=
suggestionsFn
?
suggestionsFn
(
searchStr
)
:
[
"
what
time
is
it
in
t
"
[
"
what
is
the
time
today
texas
"
]
.
concat
(
[
"
toronto
"
"
tunisia
"
]
.
map
(
s
=
>
searchStr
+
s
.
slice
(
1
)
)
)
[
]
{
"
google
:
irrelevantparameter
"
:
[
]
"
google
:
suggestdetail
"
:
[
{
}
]
.
concat
(
[
"
toronto
"
"
tunisia
"
]
.
map
(
s
=
>
(
{
mp
:
"
"
t
:
s
}
)
)
)
}
]
;
let
data
=
suggestions
;
let
jsonString
=
JSON
.
stringify
(
data
)
;
let
stringOfUtf8Bytes
=
convertToUtf8
(
jsonString
)
;
resp
.
setHeader
(
"
Content
-
Type
"
"
application
/
json
"
false
)
;
resp
.
write
(
stringOfUtf8Bytes
)
;
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
TAIL_SUGGESTIONS_ENGINE_NAME
search_url
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
search
suggest_url
:
http
:
/
/
localhost
:
{
server
.
identity
.
primaryPort
}
/
suggest
suggest_url_get_params
:
"
?
q
=
{
searchTerms
}
"
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Tail
Suggestions
"
)
;
return
engine
;
}
function
defaultRichSuggestionsFn
(
searchStr
)
{
let
suffixes
=
[
"
toronto
"
"
tunisia
"
"
tacoma
"
"
taipei
"
]
;
return
[
"
what
time
is
it
in
t
"
suffixes
.
map
(
s
=
>
searchStr
+
s
.
slice
(
1
)
)
[
]
{
"
google
:
irrelevantparameter
"
:
[
]
"
google
:
suggestdetail
"
:
suffixes
.
map
(
(
suffix
i
)
=
>
{
if
(
i
%
2
)
{
return
{
}
;
}
return
{
a
:
"
description
"
dc
:
"
#
FFFFFF
"
i
:
"
data
:
image
/
gif
;
base64
R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw
=
=
"
t
:
"
Title
"
}
;
}
)
}
]
;
}
async
function
addOpenPages
(
uri
count
=
1
userContextId
=
0
)
{
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
await
UrlbarProviderOpenTabs
.
registerOpenTab
(
uri
.
spec
userContextId
false
)
;
}
}
async
function
removeOpenPages
(
aUri
aCount
=
1
aUserContextId
=
0
)
{
for
(
let
i
=
0
;
i
<
aCount
;
i
+
+
)
{
await
UrlbarProviderOpenTabs
.
unregisterOpenTab
(
aUri
.
spec
aUserContextId
false
)
;
}
}
function
testEngine_setup
(
)
{
add_setup
(
async
(
)
=
>
{
await
cleanupPlaces
(
)
;
let
engine
=
await
addTestSuggestionsEngine
(
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
)
;
Services
.
search
.
setDefault
(
oldDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
}
)
;
Services
.
search
.
setDefault
(
engine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
false
)
;
}
)
;
}
async
function
cleanupPlaces
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
"
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
function
makeBookmarkResult
(
queryContext
{
title
uri
iconUri
tags
=
[
]
heuristic
=
false
source
=
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
}
)
{
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
source
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
url
:
[
uri
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
typeof
iconUri
!
=
"
undefined
"
?
iconUri
:
page
-
icon
:
{
uri
}
]
title
:
[
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
tags
:
[
tags
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
isBlockable
:
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
?
true
:
undefined
blockL10n
:
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
?
{
id
:
"
urlbar
-
result
-
menu
-
remove
-
from
-
history
"
}
:
undefined
helpUrl
:
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
?
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
awesome
-
bar
-
result
-
menu
"
:
undefined
}
)
)
;
result
.
heuristic
=
heuristic
;
return
result
;
}
function
makeFormHistoryResult
(
queryContext
{
suggestion
engineName
}
)
{
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
engineName
suggestion
:
[
suggestion
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
lowerCaseSuggestion
:
suggestion
.
toLocaleLowerCase
(
)
isBlockable
:
true
blockL10n
:
{
id
:
"
urlbar
-
result
-
menu
-
remove
-
from
-
history
"
}
helpUrl
:
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
awesome
-
bar
-
result
-
menu
"
}
)
)
;
}
function
makeOmniboxResult
(
queryContext
{
content
description
keyword
heuristic
=
false
}
)
{
let
payload
=
{
title
:
[
description
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
content
:
[
content
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
keyword
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
[
UrlbarUtils
.
ICON
.
EXTENSION
]
}
;
if
(
!
heuristic
)
{
payload
.
blockL10n
=
{
id
:
"
urlbar
-
result
-
menu
-
dismiss
-
firefox
-
suggest
"
}
;
}
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
UrlbarUtils
.
RESULT_SOURCE
.
ADDON
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
payload
)
)
;
result
.
heuristic
=
heuristic
;
return
result
;
}
function
makeTabSwitchResult
(
queryContext
{
uri
title
iconUri
userContextId
}
)
{
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
UrlbarUtils
.
RESULT_SOURCE
.
TABS
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
url
:
[
uri
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
title
:
[
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
typeof
iconUri
!
=
"
undefined
"
?
iconUri
:
page
-
icon
:
{
uri
}
userContextId
:
[
userContextId
|
|
0
]
}
)
)
;
}
function
makeKeywordSearchResult
(
queryContext
{
uri
keyword
title
iconUri
postData
heuristic
=
false
}
)
{
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
KEYWORD
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
title
?
title
:
uri
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
url
:
[
uri
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
keyword
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
input
:
[
queryContext
.
searchString
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
postData
:
postData
|
|
null
icon
:
typeof
iconUri
!
=
"
undefined
"
?
iconUri
:
page
-
icon
:
{
uri
}
}
)
)
;
if
(
heuristic
)
{
result
.
heuristic
=
heuristic
;
}
return
result
;
}
function
makeRemoteTabResult
(
queryContext
{
uri
device
title
iconUri
lastUsed
=
0
}
)
{
let
payload
=
{
url
:
[
uri
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
device
:
[
device
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
typeof
iconUri
!
=
"
undefined
"
?
iconUri
:
page
-
icon
:
{
uri
}
lastUsed
:
lastUsed
*
1000
}
;
if
(
typeof
title
!
=
"
undefined
"
)
{
payload
.
title
=
[
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
;
}
else
{
payload
.
title
=
[
uri
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
;
}
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
UrlbarUtils
.
RESULT_SOURCE
.
TABS
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
payload
)
)
;
return
result
;
}
function
makeSearchResult
(
queryContext
{
suggestion
tailPrefix
tail
tailOffsetIndex
engineName
alias
uri
query
engineIconUri
providesSearchMode
providerName
inPrivateWindow
isPrivateEngine
searchUrlDomainWithoutSuffix
heuristic
=
false
trending
=
false
isRichSuggestion
=
false
type
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
source
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
satisfiesAutofillThreshold
=
false
}
)
{
if
(
tail
)
{
if
(
!
tailPrefix
&
&
!
isRichSuggestion
)
{
tailPrefix
=
"
"
;
}
if
(
!
tailOffsetIndex
)
{
tailOffsetIndex
=
suggestion
.
indexOf
(
tail
)
;
}
}
let
payload
=
{
engine
:
[
engineName
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
suggestion
:
[
suggestion
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
tailPrefix
tail
:
[
tail
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
tailOffsetIndex
keyword
:
[
alias
providesSearchMode
?
UrlbarUtils
.
HIGHLIGHT
.
TYPED
:
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
query
:
[
typeof
query
!
=
"
undefined
"
?
query
:
queryContext
.
trimmedSearchString
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
engineIconUri
providesSearchMode
inPrivateWindow
isPrivateEngine
}
;
if
(
uri
)
{
payload
.
url
=
uri
;
}
if
(
providerName
=
=
"
TabToSearch
"
)
{
if
(
searchUrlDomainWithoutSuffix
.
startsWith
(
"
www
.
"
)
)
{
searchUrlDomainWithoutSuffix
=
searchUrlDomainWithoutSuffix
.
substring
(
4
)
;
}
payload
.
searchUrlDomainWithoutSuffix
=
searchUrlDomainWithoutSuffix
;
payload
.
satisfiesAutofillThreshold
=
satisfiesAutofillThreshold
;
payload
.
isGeneralPurposeEngine
=
false
;
}
if
(
providerName
=
=
"
TokenAliasEngines
"
)
{
payload
.
keywords
=
alias
?
.
toLowerCase
(
)
;
}
let
result
=
new
UrlbarResult
(
type
source
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
payload
)
)
;
if
(
typeof
suggestion
=
=
"
string
"
)
{
result
.
payload
.
lowerCaseSuggestion
=
result
.
payload
.
suggestion
.
toLocaleLowerCase
(
)
;
result
.
payload
.
trending
=
trending
;
result
.
isRichSuggestion
=
isRichSuggestion
;
}
if
(
isRichSuggestion
)
{
result
.
payload
.
icon
=
"
data
:
image
/
gif
;
base64
R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw
=
=
"
;
result
.
payload
.
description
=
"
description
"
;
}
if
(
providerName
)
{
result
.
providerName
=
providerName
;
}
result
.
heuristic
=
heuristic
;
return
result
;
}
function
makeVisitResult
(
queryContext
{
title
fallbackTitle
uri
iconUri
providerName
tags
=
[
]
heuristic
=
false
source
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
}
)
{
let
payload
=
{
url
:
[
uri
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
}
;
if
(
title
)
{
payload
.
title
=
[
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
;
}
if
(
fallbackTitle
)
{
payload
.
fallbackTitle
=
[
fallbackTitle
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
;
}
if
(
!
heuristic
&
&
providerName
!
=
"
AboutPages
"
&
&
providerName
!
=
"
PreloadedSites
"
&
&
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
)
{
payload
.
isBlockable
=
true
;
payload
.
blockL10n
=
{
id
:
"
urlbar
-
result
-
menu
-
remove
-
from
-
history
"
}
;
payload
.
helpUrl
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
awesome
-
bar
-
result
-
menu
"
;
}
if
(
iconUri
)
{
payload
.
icon
=
iconUri
;
}
else
if
(
iconUri
=
=
=
undefined
&
&
source
!
=
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
)
{
payload
.
icon
=
page
-
icon
:
{
uri
}
;
}
if
(
!
heuristic
&
&
tags
)
{
payload
.
tags
=
[
tags
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
;
}
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
source
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
payload
)
)
;
if
(
providerName
)
{
result
.
providerName
=
providerName
;
}
result
.
heuristic
=
heuristic
;
return
result
;
}
async
function
check_results
(
{
context
incompleteSearch
autofilled
completed
matches
=
[
]
}
=
{
}
)
{
if
(
!
context
)
{
return
;
}
await
PlacesFrecencyRecalculator
.
recalculateAnyOutdatedFrecencies
(
)
;
const
controller
=
UrlbarTestUtils
.
newMockController
(
{
input
:
{
isPrivate
:
context
.
isPrivate
onFirstResult
(
)
{
return
false
;
}
getSearchSource
(
)
{
return
"
dummy
-
search
-
source
"
;
}
window
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
}
)
;
controller
.
setView
(
{
get
visibleResults
(
)
{
return
context
.
results
;
}
controller
:
{
removeResult
(
)
{
}
}
}
)
;
if
(
incompleteSearch
)
{
let
incompleteContext
=
createContext
(
incompleteSearch
{
isPrivate
:
context
.
isPrivate
}
)
;
controller
.
startQuery
(
incompleteContext
)
;
}
await
controller
.
startQuery
(
context
)
;
if
(
autofilled
)
{
Assert
.
ok
(
context
.
results
[
0
]
"
There
is
a
first
result
.
"
)
;
Assert
.
ok
(
context
.
results
[
0
]
.
autofill
"
The
first
result
is
an
autofill
result
"
)
;
Assert
.
equal
(
context
.
results
[
0
]
.
autofill
.
value
autofilled
"
The
correct
value
was
autofilled
.
"
)
;
if
(
completed
)
{
Assert
.
equal
(
context
.
results
[
0
]
.
payload
.
url
completed
"
The
completed
autofill
value
is
correct
.
"
)
;
}
}
if
(
context
.
results
.
length
!
=
matches
.
length
)
{
info
(
"
Actual
results
:
"
+
JSON
.
stringify
(
context
.
results
)
)
;
}
Assert
.
equal
(
context
.
results
.
length
matches
.
length
"
Found
the
expected
number
of
results
.
"
)
;
function
getPayload
(
result
)
{
let
payload
=
{
}
;
for
(
let
[
key
value
]
of
Object
.
entries
(
result
.
payload
)
)
{
if
(
value
!
=
=
undefined
)
{
payload
[
key
]
=
value
;
}
}
return
payload
;
}
let
propertiesToCheck
=
{
type
:
{
}
source
:
{
}
heuristic
:
{
}
isBestMatch
:
{
map
:
v
=
>
!
!
v
}
providerName
:
{
optional
:
true
}
suggestedIndex
:
{
optional
:
true
}
isSuggestedIndexRelativeToGroup
:
{
optional
:
true
map
:
v
=
>
!
!
v
}
exposureTelemetry
:
{
optional
:
true
}
}
;
for
(
let
i
=
0
;
i
<
matches
.
length
;
i
+
+
)
{
let
actual
=
context
.
results
[
i
]
;
let
expected
=
matches
[
i
]
;
info
(
Comparing
results
at
index
{
i
}
:
+
"
actual
=
"
+
JSON
.
stringify
(
actual
)
+
"
expected
=
"
+
JSON
.
stringify
(
expected
)
)
;
for
(
let
[
key
{
optional
map
}
]
of
Object
.
entries
(
propertiesToCheck
)
)
{
if
(
!
optional
|
|
expected
.
hasOwnProperty
(
key
)
)
{
map
?
?
=
v
=
>
v
;
Assert
.
equal
(
map
(
actual
[
key
]
)
map
(
expected
[
key
]
)
result
.
{
key
}
at
result
index
{
i
}
)
;
}
}
if
(
expected
.
payload
)
{
Assert
.
deepEqual
(
getPayload
(
actual
)
getPayload
(
expected
)
result
.
payload
at
result
index
{
i
}
)
;
}
}
}
async
function
getOriginFrecency
(
prefix
aHost
)
{
let
db
=
await
PlacesUtils
.
promiseDBConnection
(
)
;
let
rows
=
await
db
.
execute
(
SELECT
frecency
FROM
moz_origins
WHERE
prefix
=
:
prefix
AND
host
=
:
host
{
prefix
host
:
aHost
}
)
;
Assert
.
equal
(
rows
.
length
1
)
;
return
rows
[
0
]
.
getResultByIndex
(
0
)
;
}
async
function
getOriginAutofillThreshold
(
)
{
return
PlacesUtils
.
metadata
.
get
(
"
origin_frecency_threshold
"
2
.
0
)
;
}
async
function
checkOriginsOrder
(
host
prefixOrder
)
{
await
PlacesUtils
.
withConnectionWrapper
(
"
checkOriginsOrder
"
async
db
=
>
{
let
prefixes
=
(
await
db
.
execute
(
SELECT
prefix
|
|
iif
(
instr
(
host
"
www
.
"
)
=
1
"
www
.
"
"
"
)
FROM
moz_origins
WHERE
host
=
:
host
OR
host
=
"
www
.
"
|
|
:
host
ORDER
BY
ROWID
ASC
{
host
}
)
)
.
map
(
r
=
>
r
.
getResultByIndex
(
0
)
)
;
Assert
.
deepEqual
(
prefixes
prefixOrder
)
;
}
)
;
}
