ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
commonFile
=
do_get_file
(
"
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
toolkit
/
components
/
places
/
tests
/
head_common
.
js
"
false
)
;
if
(
commonFile
)
{
let
uri
=
Services
.
io
.
newFileURI
(
commonFile
)
;
Services
.
scriptloader
.
loadSubScript
(
uri
.
spec
this
)
;
}
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
jsm
"
UrlbarInput
:
"
resource
:
/
/
/
modules
/
UrlbarInput
.
jsm
"
UrlbarMatch
:
"
resource
:
/
/
/
modules
/
UrlbarMatch
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProviderOpenTabs
:
"
resource
:
/
/
/
modules
/
UrlbarProviderOpenTabs
.
jsm
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
}
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
testing
-
common
/
sinon
-
2
.
3
.
2
.
js
"
this
)
;
function
createContext
(
searchString
=
"
foo
"
properties
=
{
}
)
{
let
context
=
new
QueryContext
(
{
searchString
lastKey
:
searchString
?
searchString
[
searchString
.
length
-
1
]
:
"
"
maxResults
:
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
isPrivate
:
true
}
)
;
return
Object
.
assign
(
context
properties
)
;
}
function
promiseControllerNotification
(
controller
notification
expected
=
true
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
proxifiedObserver
=
new
Proxy
(
{
}
{
get
:
(
target
name
)
=
>
{
if
(
name
=
=
notification
)
{
return
(
.
.
.
args
)
=
>
{
controller
.
removeQueryListener
(
proxifiedObserver
)
;
if
(
expected
)
{
resolve
(
args
)
;
}
else
{
reject
(
)
;
}
}
;
}
return
(
)
=
>
false
;
}
}
)
;
controller
.
addQueryListener
(
proxifiedObserver
)
;
}
)
;
}
class
TestProvider
extends
UrlbarProvider
{
constructor
(
matches
cancelCallback
)
{
super
(
)
;
this
.
_name
=
"
TestProvider
"
+
Math
.
floor
(
Math
.
random
(
)
*
100000
)
;
this
.
_cancel
=
cancelCallback
;
this
.
_matches
=
matches
;
}
get
name
(
)
{
return
this
.
_name
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
get
sources
(
)
{
return
this
.
_matches
.
map
(
r
=
>
r
.
source
)
;
}
async
startQuery
(
context
add
)
{
Assert
.
ok
(
context
"
context
is
passed
-
in
"
)
;
Assert
.
equal
(
typeof
add
"
function
"
"
add
is
a
callback
"
)
;
this
.
_context
=
context
;
for
(
const
match
of
this
.
_matches
)
{
add
(
this
match
)
;
}
}
cancelQuery
(
context
)
{
Assert
.
equal
(
this
.
_context
context
"
context
is
the
same
"
)
;
if
(
this
.
_cancelCallback
)
{
this
.
_cancelCallback
(
)
;
}
}
}
function
registerBasicTestProvider
(
matches
cancelCallback
)
{
let
provider
=
new
TestProvider
(
matches
cancelCallback
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
return
provider
.
name
;
}
