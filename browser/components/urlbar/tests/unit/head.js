ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
commonFile
=
do_get_file
(
"
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
toolkit
/
components
/
places
/
tests
/
head_common
.
js
"
false
)
;
if
(
commonFile
)
{
let
uri
=
Services
.
io
.
newFileURI
(
commonFile
)
;
Services
.
scriptloader
.
loadSubScript
(
uri
.
spec
this
)
;
}
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarController
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
jsm
"
UrlbarInput
:
"
resource
:
/
/
/
modules
/
UrlbarInput
.
jsm
"
UrlbarMatch
:
"
resource
:
/
/
/
modules
/
UrlbarMatch
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProviderOpenTabs
:
"
resource
:
/
/
/
modules
/
UrlbarProviderOpenTabs
.
jsm
"
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
testing
-
common
/
sinon
-
2
.
3
.
2
.
js
"
this
)
;
function
createContext
(
searchString
=
"
foo
"
)
{
return
new
QueryContext
(
{
searchString
lastKey
:
searchString
?
searchString
[
searchString
.
length
-
1
]
:
"
"
maxResults
:
1
isPrivate
:
true
}
)
;
}
function
promiseControllerNotification
(
controller
notification
)
{
return
new
Promise
(
resolve
=
>
{
let
proxifiedObserver
=
new
Proxy
(
{
}
{
get
:
(
target
name
)
=
>
{
if
(
name
=
=
notification
)
{
return
(
.
.
.
args
)
=
>
{
controller
.
removeQueryListener
(
proxifiedObserver
)
;
resolve
(
args
)
;
}
;
}
return
(
)
=
>
false
;
}
}
)
;
controller
.
addQueryListener
(
proxifiedObserver
)
;
}
)
;
}
