"
use
strict
"
;
let
fakeController
;
let
sandbox
;
let
generalListener
;
let
input
;
let
inputOptions
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
function
assertContextMatches
(
context
expectedValues
)
{
Assert
.
ok
(
context
instanceof
QueryContext
"
Should
be
a
QueryContext
"
)
;
for
(
let
[
key
value
]
of
Object
.
entries
(
expectedValues
)
)
{
Assert
.
equal
(
context
[
key
]
value
Should
have
the
expected
value
for
{
key
}
in
the
QueryContext
)
;
}
}
function
createFakeElement
(
)
{
return
{
addEventListener
(
)
{
}
}
;
}
function
checkHandleQueryCall
(
stub
expectedQueryContextProps
)
{
Assert
.
equal
(
stub
.
callCount
1
"
Should
have
called
handleQuery
on
the
controller
"
)
;
let
args
=
stub
.
args
[
0
]
;
Assert
.
equal
(
args
.
length
1
"
Should
have
called
handleQuery
with
one
argument
"
)
;
let
queryContext
=
args
[
0
]
;
Assert
.
ok
(
queryContext
instanceof
QueryContext
"
Should
have
been
passed
a
QueryContext
"
)
;
for
(
let
[
name
value
]
of
Object
.
entries
(
expectedQueryContextProps
)
)
{
Assert
.
deepEqual
(
queryContext
[
name
]
value
Should
have
the
correct
value
for
queryContext
.
{
name
}
)
;
}
}
add_task
(
function
setup
(
)
{
sandbox
=
sinon
.
sandbox
.
create
(
)
;
fakeController
=
new
UrlbarController
(
)
;
sandbox
.
stub
(
fakeController
"
handleQuery
"
)
;
sandbox
.
stub
(
PrivateBrowsingUtils
"
isWindowPrivate
"
)
.
returns
(
false
)
;
let
textbox
=
createFakeElement
(
)
;
textbox
.
inputField
=
createFakeElement
(
)
;
inputOptions
=
{
textbox
panel
:
{
ownerDocument
:
{
}
querySelector
(
)
{
return
createFakeElement
(
)
;
}
}
controller
:
fakeController
}
;
input
=
new
UrlbarInput
(
inputOptions
)
;
}
)
;
add_task
(
function
test_input_starts_query
(
)
{
input
.
handleEvent
(
{
target
:
{
value
:
"
search
"
}
type
:
"
input
"
}
)
;
checkHandleQueryCall
(
fakeController
.
handleQuery
{
searchString
:
"
search
"
isPrivate
:
false
}
)
;
sandbox
.
resetHistory
(
)
;
}
)
;
add_task
(
function
test_input_with_private_browsing
(
)
{
PrivateBrowsingUtils
.
isWindowPrivate
.
returns
(
true
)
;
let
privateInput
=
new
UrlbarInput
(
inputOptions
)
;
privateInput
.
handleEvent
(
{
target
:
{
value
:
"
search
"
}
type
:
"
input
"
}
)
;
checkHandleQueryCall
(
fakeController
.
handleQuery
{
searchString
:
"
search
"
isPrivate
:
true
}
)
;
sandbox
.
resetHistory
(
)
;
}
)
;
