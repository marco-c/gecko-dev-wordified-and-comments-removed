const
SUGGESTIONS_ENGINE_NAME
=
"
engine
-
suggestions
.
xml
"
;
add_task
(
async
function
engineWithSuggestions
(
)
{
let
engine
=
await
addTestSuggestionsEngine
(
)
;
let
historyTitle
=
"
fire
"
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
engine
.
searchForm
title
:
historyTitle
}
)
;
for
(
let
private
of
[
false
true
]
)
{
for
(
let
alias
of
[
"
moz
"
"
moz
"
]
)
{
engine
.
alias
=
alias
;
Assert
.
equal
(
engine
.
alias
alias
)
;
let
context
=
createContext
(
{
alias
}
{
isPrivate
:
private
}
)
;
let
expectedMatches
=
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
alias
query
:
"
"
heuristic
:
true
}
)
]
;
if
(
alias
[
0
]
!
=
"
"
)
{
expectedMatches
.
push
(
makeVisitResult
(
context
{
uri
:
"
http
:
/
/
localhost
:
9000
/
search
?
terms
=
"
title
:
historyTitle
}
)
)
;
}
await
check_results
(
{
context
matches
:
expectedMatches
}
)
;
context
=
createContext
(
{
alias
}
{
isPrivate
:
private
}
)
;
expectedMatches
=
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
alias
query
:
"
"
heuristic
:
true
}
)
]
;
if
(
alias
[
0
]
!
=
"
"
)
{
expectedMatches
.
push
(
makeVisitResult
(
context
{
uri
:
"
http
:
/
/
localhost
:
9000
/
search
?
terms
=
"
title
:
historyTitle
}
)
)
;
}
await
check_results
(
{
context
matches
:
expectedMatches
}
)
;
context
=
createContext
(
{
alias
}
{
historyTitle
}
{
isPrivate
:
private
}
)
;
expectedMatches
=
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
alias
query
:
historyTitle
heuristic
:
true
}
)
]
;
if
(
!
private
)
{
expectedMatches
.
push
(
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
alias
query
:
historyTitle
suggestion
:
{
historyTitle
}
foo
}
)
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
alias
query
:
historyTitle
suggestion
:
{
historyTitle
}
bar
}
)
)
;
}
if
(
alias
[
0
]
!
=
"
"
)
{
expectedMatches
.
push
(
makeVisitResult
(
context
{
uri
:
"
http
:
/
/
localhost
:
9000
/
search
?
terms
=
"
title
:
historyTitle
}
)
)
;
}
await
check_results
(
{
context
matches
:
expectedMatches
}
)
;
}
}
engine
.
alias
=
"
"
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
