testEngine_setup
(
)
;
async
function
task_setCountDate
(
uri
count
date
)
{
let
visits
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
visits
.
push
(
{
uri
visitDate
:
date
transition
:
PlacesUtils
.
history
.
TRANSITION_TYPED
}
)
;
}
await
PlacesTestUtils
.
addVisits
(
visits
)
;
}
async
function
setBookmark
(
uri
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
menuGuid
url
:
uri
title
:
"
bleh
"
}
)
;
}
async
function
tagURI
(
uri
tags
)
{
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
url
:
uri
title
:
"
bleh
"
}
)
;
PlacesUtils
.
tagging
.
tagURI
(
uri
tags
)
;
}
async
function
preSearch
(
)
{
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
var
uri1
=
Services
.
io
.
newURI
(
"
http
:
/
/
site
.
tld
/
1
"
)
;
var
uri2
=
Services
.
io
.
newURI
(
"
http
:
/
/
site
.
tld
/
2
"
)
;
var
uri3
=
Services
.
io
.
newURI
(
"
http
:
/
/
aaaaaaaaaa
/
1
"
)
;
var
uri4
=
Services
.
io
.
newURI
(
"
http
:
/
/
aaaaaaaaaa
/
2
"
)
;
var
d1
=
new
Date
(
Date
.
now
(
)
-
1000
*
60
*
60
)
*
1000
;
var
d2
=
new
Date
(
Date
.
now
(
)
-
1000
*
60
*
60
*
24
*
10
)
*
1000
;
var
c1
=
10
;
var
c2
=
1
;
var
tests
=
[
async
function
(
)
{
info
(
"
Test
0
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c1
d2
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
query
:
"
"
}
)
makeVisitResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
1
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d2
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
query
:
"
"
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
makeVisitResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
2
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c2
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
query
:
"
"
}
)
makeVisitResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
3
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c2
d1
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
query
:
"
"
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
makeVisitResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
4
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c1
d2
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
site
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeBookmarkResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
tags
:
[
"
site
"
]
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
5
:
same
count
different
date
"
)
;
await
task_setCountDate
(
uri1
c1
d2
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
site
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
makeBookmarkResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
tags
:
[
"
site
"
]
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
6
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c1
d1
)
;
await
task_setCountDate
(
uri2
c2
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
site
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeBookmarkResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
tags
:
[
"
site
"
]
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
7
:
different
count
same
date
"
)
;
await
task_setCountDate
(
uri1
c2
d1
)
;
await
task_setCountDate
(
uri2
c1
d1
)
;
await
tagURI
(
uri1
[
"
site
"
]
)
;
let
context
=
createContext
(
"
site
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeVisitResult
(
context
{
uri
:
uri2
.
spec
title
:
test
visit
for
{
uri2
.
spec
}
}
)
makeBookmarkResult
(
context
{
uri
:
uri1
.
spec
title
:
"
bleh
"
tags
:
[
"
site
"
]
}
)
]
}
)
;
}
async
function
(
)
{
info
(
"
Test
8
.
1a
:
same
count
same
date
"
)
;
await
setBookmark
(
uri3
)
;
await
setBookmark
(
uri4
)
;
let
context
=
createContext
(
"
a
"
{
isPrivate
:
false
}
)
;
let
bookmarkResults
=
[
makeBookmarkResult
(
context
{
uri
:
uri4
.
spec
title
:
"
bleh
"
}
)
makeBookmarkResult
(
context
{
uri
:
uri3
.
spec
title
:
"
bleh
"
}
)
]
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
.
.
.
bookmarkResults
]
}
)
;
context
=
createContext
(
"
aa
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
.
.
.
bookmarkResults
]
}
)
;
context
=
createContext
(
"
aaa
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
.
.
.
bookmarkResults
]
}
)
;
context
=
createContext
(
"
aaaa
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
.
.
.
bookmarkResults
]
}
)
;
context
=
createContext
(
"
aaa
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
.
.
.
bookmarkResults
]
}
)
;
context
=
createContext
(
"
aa
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
.
.
.
bookmarkResults
]
}
)
;
context
=
createContext
(
"
a
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
.
.
.
bookmarkResults
]
}
)
;
}
]
;
add_task
(
async
function
test_frecency
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
autoFill
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
history
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
bookmark
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
openpage
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
engines
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
quickactions
"
false
)
;
for
(
let
test
of
tests
)
{
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
test
(
)
;
}
for
(
let
type
of
[
"
history
"
"
bookmark
"
"
openpage
"
"
searches
"
"
engines
"
"
quickactions
"
]
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
"
+
type
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
"
)
;
}
}
)
;
