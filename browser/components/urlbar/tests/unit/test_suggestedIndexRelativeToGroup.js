"
use
strict
"
;
const
MAX_RESULTS
=
10
;
const
RESULT_GROUPS_PREF
=
"
browser
.
urlbar
.
resultGroups
"
;
const
MAX_RICH_RESULTS_PREF
=
"
browser
.
urlbar
.
maxRichResults
"
;
add_task
(
async
function
test
(
)
{
Services
.
prefs
.
setIntPref
(
MAX_RICH_RESULTS_PREF
MAX_RESULTS
)
;
setResultGroups
(
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
)
;
let
basicResults
=
[
.
.
.
makeHistoryResults
(
)
.
.
.
makeFormHistoryResults
(
)
.
.
.
makeRemoteSuggestionResults
(
)
]
;
let
tests
=
[
{
desc
:
"
First
result
in
GENERAL
"
suggestedIndexResults
:
[
{
suggestedIndex
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
expected
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
count
:
4
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
suggestedIndex
:
0
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
count
:
2
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
offset
:
4
count
:
3
}
]
}
{
desc
:
"
Last
result
in
GENERAL
"
suggestedIndexResults
:
[
{
suggestedIndex
:
-
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
expected
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
count
:
4
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
count
:
2
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
suggestedIndex
:
-
1
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
offset
:
4
count
:
3
}
]
}
{
desc
:
"
First
result
in
GENERAL_PARENT
"
suggestedIndexResults
:
[
{
suggestedIndex
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
}
]
expected
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
suggestedIndex
:
0
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
offset
:
3
count
:
3
}
]
}
{
desc
:
"
Last
result
in
GENERAL_PARENT
"
suggestedIndexResults
:
[
{
suggestedIndex
:
-
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
}
]
expected
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
offset
:
3
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
suggestedIndex
:
-
1
}
]
}
{
desc
:
"
First
and
last
results
in
GENERAL
"
suggestedIndexResults
:
[
{
suggestedIndex
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
suggestedIndex
:
-
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
expected
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
count
:
4
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
suggestedIndex
:
0
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
count
:
1
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
suggestedIndex
:
-
1
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
offset
:
4
count
:
3
}
]
}
{
desc
:
"
First
and
last
results
in
GENERAL_PARENT
"
suggestedIndexResults
:
[
{
suggestedIndex
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
}
{
suggestedIndex
:
-
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
}
]
expected
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
suggestedIndex
:
0
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
offset
:
3
count
:
2
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
suggestedIndex
:
-
1
}
]
}
{
desc
:
"
First
result
in
GENERAL_PARENT
first
result
in
GENERAL
"
suggestedIndexResults
:
[
{
suggestedIndex
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
}
{
suggestedIndex
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
expected
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL_PARENT
suggestedIndex
:
0
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
count
:
3
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
suggestedIndex
:
0
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
count
:
2
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
offset
:
3
count
:
3
}
]
}
]
;
let
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
for
(
let
{
desc
suggestedIndexResults
expected
}
of
tests
)
{
info
(
Running
test
:
{
desc
}
)
;
let
results
=
basicResults
.
concat
(
makeSuggestedIndexResults
(
suggestedIndexResults
)
)
;
let
provider
=
registerBasicTestProvider
(
results
)
;
let
context
=
createContext
(
undefined
{
providers
:
[
provider
.
name
]
}
)
;
await
UrlbarProvidersManager
.
startQuery
(
context
controller
)
;
let
expectedResults
=
[
]
;
for
(
let
{
group
offset
count
suggestedIndex
}
of
expected
)
{
let
index
=
results
.
findIndex
(
r
=
>
UrlbarUtils
.
getResultGroup
(
r
)
=
=
group
&
&
r
.
suggestedIndex
=
=
=
suggestedIndex
)
;
Assert
.
notEqual
(
index
-
1
"
Sanity
check
:
Expected
result
is
in
results
"
)
;
if
(
offset
)
{
index
+
=
offset
;
}
count
=
count
|
|
1
;
expectedResults
.
push
(
.
.
.
results
.
slice
(
index
index
+
count
)
)
;
}
Assert
.
deepEqual
(
context
.
results
expectedResults
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
}
)
;
function
makeHistoryResults
(
count
=
MAX_RESULTS
)
{
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
"
http
:
/
/
example
.
com
/
"
+
i
}
)
)
;
}
return
results
;
}
function
makeRemoteSuggestionResults
(
count
=
MAX_RESULTS
)
{
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
engine
:
"
test
"
query
:
"
test
"
suggestion
:
"
test
"
+
i
lowerCaseSuggestion
:
"
test
"
+
i
}
)
)
;
}
return
results
;
}
function
makeFormHistoryResults
(
count
=
MAX_RESULTS
)
{
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
engine
:
"
test
"
suggestion
:
"
test
"
+
i
lowerCaseSuggestion
:
"
test
"
+
i
}
)
)
;
}
return
results
;
}
function
makeSuggestedIndexResults
(
objects
)
{
return
objects
.
map
(
(
{
suggestedIndex
group
}
)
=
>
Object
.
assign
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
url
:
"
http
:
/
/
example
.
com
/
si
"
+
suggestedIndex
}
)
{
group
suggestedIndex
isSuggestedIndexRelativeToGroup
:
true
}
)
)
;
}
function
setResultGroups
(
resultGroups
)
{
if
(
resultGroups
)
{
Services
.
prefs
.
setCharPref
(
RESULT_GROUPS_PREF
JSON
.
stringify
(
resultGroups
)
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
RESULT_GROUPS_PREF
)
;
}
}
