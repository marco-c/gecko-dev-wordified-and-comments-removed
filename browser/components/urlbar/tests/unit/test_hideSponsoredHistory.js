"
use
strict
"
;
add_task
(
async
function
test
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
searches
"
false
)
;
let
engine
=
await
Services
.
search
.
getDefault
(
)
;
let
pref
=
"
browser
.
newtabpage
.
activity
-
stream
.
hideTopSitesWithSearchParam
"
;
let
tests
=
{
"
"
:
{
"
"
:
true
test
:
true
"
test
=
"
:
true
"
test
=
hide
"
:
true
nomatch
:
true
"
nomatch
=
"
:
true
"
nomatch
=
hide
"
:
true
}
test
:
{
"
"
:
true
test
:
false
"
test
=
"
:
false
"
test
=
hide
"
:
true
nomatch
:
true
"
nomatch
=
"
:
true
"
nomatch
=
hide
"
:
true
}
"
test
=
hide
"
:
{
"
"
:
true
test
:
false
"
test
=
"
:
true
"
test
=
hide
"
:
false
nomatch
:
true
"
nomatch
=
"
:
true
"
nomatch
=
hide
"
:
true
}
"
test
=
foo
&
test
=
hide
"
:
{
"
"
:
true
test
:
false
"
test
=
"
:
true
"
test
=
hide
"
:
false
nomatch
:
true
"
nomatch
=
"
:
true
"
nomatch
=
hide
"
:
true
}
}
;
for
(
let
[
urlParams
expected
]
of
Object
.
entries
(
tests
)
)
{
for
(
let
[
prefValue
shouldAppear
]
of
Object
.
entries
(
expected
)
)
{
info
(
"
Running
test
:
"
+
JSON
.
stringify
(
{
urlParams
prefValue
shouldAppear
}
)
)
;
let
url
=
new
URL
(
"
http
:
/
/
example
.
com
/
"
)
;
url
.
search
=
urlParams
;
await
PlacesTestUtils
.
addVisits
(
url
)
;
Services
.
prefs
.
setCharPref
(
pref
prefValue
)
;
let
context
=
createContext
(
"
ample
"
{
isPrivate
:
false
}
)
;
let
expectedResults
=
[
makeSearchResult
(
context
{
heuristic
:
true
engineName
:
engine
.
name
engineIconUri
:
await
engine
.
getIconURL
(
)
}
)
]
;
if
(
shouldAppear
)
{
expectedResults
.
push
(
makeVisitResult
(
context
{
uri
:
url
.
toString
(
)
title
:
"
test
visit
for
"
+
url
}
)
)
;
}
await
check_results
(
{
context
matches
:
expectedResults
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
}
Services
.
prefs
.
clearUserPref
(
pref
)
;
}
)
;
