"
use
strict
"
;
const
{
Weave
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
function
MockTabsEngine
(
)
{
this
.
clients
=
null
;
}
MockTabsEngine
.
prototype
=
{
name
:
"
tabs
"
startTracking
(
)
{
}
getAllClients
(
)
{
return
this
.
clients
;
}
}
;
let
MockClientsEngine
=
{
getClientType
(
guid
)
{
Assert
.
ok
(
guid
.
endsWith
(
"
desktop
"
)
|
|
guid
.
endsWith
(
"
mobile
"
)
)
;
return
guid
.
endsWith
(
"
mobile
"
)
?
"
phone
"
:
"
desktop
"
;
}
remoteClientExists
(
id
)
{
return
true
;
}
getClientName
(
id
)
{
return
id
.
endsWith
(
"
mobile
"
)
?
"
My
Phone
"
:
"
My
Desktop
"
;
}
}
;
function
configureEngine
(
clients
)
{
let
engine
=
Weave
.
Service
.
engineManager
.
get
(
"
tabs
"
)
;
engine
.
clients
=
clients
;
Weave
.
Service
.
clientsEngine
=
MockClientsEngine
;
Services
.
obs
.
notifyObservers
(
null
"
weave
:
engine
:
sync
:
finish
"
"
tabs
"
)
;
}
add_task
(
async
function
setup
(
)
{
Weave
.
Service
.
engineManager
.
register
(
MockTabsEngine
)
;
let
weaveXPCService
=
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
weaveXPCService
.
ready
=
true
;
let
engine
=
await
addTestSuggestionsEngine
(
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
username
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
registerEngines
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
quickactions
"
)
;
await
cleanupPlaces
(
)
;
}
)
;
Services
.
search
.
setDefault
(
engine
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
username
"
"
someone
somewhere
.
com
"
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
registerEngines
"
"
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
quickactions
"
false
)
;
}
)
;
add_task
(
async
function
test_minimal
(
)
{
configureEngine
(
{
guid_desktop
:
{
id
:
"
desktop
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
}
]
}
}
)
;
let
query
=
"
ex
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
example
.
com
/
"
device
:
"
My
Desktop
"
}
)
]
}
)
;
}
)
;
add_task
(
async
function
test_maximal
(
)
{
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
title
:
"
An
Example
"
icon
:
"
http
:
/
/
favicon
"
}
]
}
}
)
;
let
query
=
"
ex
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
example
.
com
/
"
device
:
"
My
Phone
"
title
:
"
An
Example
"
iconUri
:
"
moz
-
anno
:
favicon
:
http
:
/
/
favicon
/
"
}
)
]
}
)
;
}
)
;
add_task
(
async
function
test_noShowIcons
(
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
false
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
title
:
"
An
Example
"
icon
:
"
http
:
/
/
favicon
"
}
]
}
}
)
;
let
query
=
"
ex
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
example
.
com
/
"
device
:
"
My
Phone
"
title
:
"
An
Example
"
iconUri
:
"
"
}
)
]
}
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteIcons
"
)
;
}
)
;
add_task
(
async
function
test_dontMatchSyncedTabs
(
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteTabs
"
false
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
title
:
"
An
Example
"
icon
:
"
http
:
/
/
favicon
"
}
]
}
}
)
;
let
context
=
createContext
(
"
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
syncedTabs
.
showRemoteTabs
"
)
;
}
)
;
add_task
(
async
function
test_tabsDisabledInUrlbar
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
remotetab
"
false
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
example
.
com
/
"
]
title
:
"
An
Example
"
icon
:
"
http
:
/
/
favicon
"
}
]
}
}
)
;
let
context
=
createContext
(
"
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
remotetab
"
)
;
}
)
;
add_task
(
async
function
test_matches_title
(
)
{
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
title
:
"
An
Example
"
}
]
}
}
)
;
let
query
=
"
ex
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
com
/
"
device
:
"
My
Phone
"
title
:
"
An
Example
"
}
)
]
}
)
;
}
)
;
add_task
(
async
function
test_localtab_matches_override
(
)
{
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
[
{
urlHistory
:
[
"
http
:
/
/
foo
.
com
/
"
]
title
:
"
An
Example
"
}
]
}
}
)
;
let
uri
=
Services
.
io
.
newURI
(
"
http
:
/
/
foo
.
com
/
"
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
title
:
"
An
Example
"
}
]
)
;
await
addOpenPages
(
uri
1
)
;
let
query
=
"
ex
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeTabSwitchResult
(
context
{
uri
:
"
http
:
/
/
foo
.
com
/
"
title
:
"
An
Example
"
}
)
]
}
)
;
await
removeOpenPages
(
uri
1
)
;
await
cleanupPlaces
(
)
;
}
)
;
add_task
(
async
function
test_remotetab_matches_override
(
)
{
let
url
=
"
http
:
/
/
foo
.
remote
.
com
/
"
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
[
{
urlHistory
:
[
url
]
title
:
"
An
Example
"
}
]
}
}
)
;
await
PlacesTestUtils
.
addVisits
(
url
)
;
let
query
=
"
ex
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
"
device
:
"
My
Phone
"
title
:
"
An
Example
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
}
)
;
add_task
(
async
function
test_mixed_result_types
(
)
{
let
url
=
"
http
:
/
/
foo
.
remote
.
com
/
"
;
let
tabs
=
Array
(
6
)
.
fill
(
0
)
.
map
(
(
e
i
)
=
>
(
{
urlHistory
:
[
{
url
}
{
i
}
]
title
:
"
A
title
"
lastUsed
:
Math
.
floor
(
Date
.
now
(
)
/
1000
)
-
i
*
86400
}
)
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
}
}
)
;
let
openTabUrl
=
url
+
"
openpage
/
"
;
let
uri
=
Services
.
io
.
newURI
(
openTabUrl
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
title
:
"
An
Example
"
}
]
)
;
await
addOpenPages
(
uri
1
)
;
let
historyUrl
=
url
+
"
history
/
"
;
await
PlacesTestUtils
.
addVisits
(
historyUrl
)
;
let
query
=
"
rem
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
0
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
0
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
1
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
1
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
2
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
2
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
3
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
3
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
4
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
4
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
5
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
5
]
.
lastUsed
}
)
makeVisitResult
(
context
{
uri
:
historyUrl
title
:
"
test
visit
for
"
+
historyUrl
}
)
makeTabSwitchResult
(
context
{
uri
:
openTabUrl
title
:
"
An
Example
"
}
)
]
}
)
;
await
removeOpenPages
(
uri
1
)
;
await
cleanupPlaces
(
)
;
}
)
;
add_task
(
async
function
test_many_remotetab_results
(
)
{
let
url
=
"
http
:
/
/
foo
.
remote
.
com
/
"
;
let
tabs
=
Array
(
8
)
.
fill
(
0
)
.
map
(
(
e
i
)
=
>
(
{
urlHistory
:
[
{
url
}
{
i
}
]
title
:
"
A
title
"
lastUsed
:
Math
.
floor
(
Date
.
now
(
)
/
1000
)
-
i
*
86400
}
)
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
}
}
)
;
let
query
=
"
rem
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
0
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
0
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
1
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
1
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
2
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
2
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
3
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
3
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
4
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
4
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
5
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
5
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
6
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
6
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
7
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
7
]
.
lastUsed
}
)
]
}
)
;
}
)
;
add_task
(
async
function
multiple_clients
(
)
{
let
url
=
"
http
:
/
/
foo
.
remote
.
com
/
"
;
let
mobileTabs
=
Array
(
2
)
.
fill
(
0
)
.
map
(
(
e
i
)
=
>
(
{
urlHistory
:
[
{
url
}
mobile
/
{
i
}
]
lastUsed
:
Date
.
now
(
)
/
1000
-
4
*
86400
}
)
)
;
let
desktopTabs
=
Array
(
3
)
.
fill
(
0
)
.
map
(
(
e
i
)
=
>
(
{
urlHistory
:
[
{
url
}
desktop
/
{
i
}
]
lastUsed
:
Date
.
now
(
)
/
1000
-
1
}
)
)
;
mobileTabs
.
push
(
{
urlHistory
:
[
{
url
}
mobile
/
fresh
]
lastUsed
:
Date
.
now
(
)
/
1000
}
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
:
mobileTabs
}
guid_desktop
:
{
id
:
"
desktop
"
tabs
:
desktopTabs
}
}
)
;
let
query
=
"
rem
"
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
mobile
/
fresh
"
device
:
"
My
Phone
"
lastUsed
:
mobileTabs
[
2
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
desktop
/
0
"
device
:
"
My
Desktop
"
lastUsed
:
desktopTabs
[
0
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
desktop
/
1
"
device
:
"
My
Desktop
"
lastUsed
:
desktopTabs
[
1
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
desktop
/
2
"
device
:
"
My
Desktop
"
lastUsed
:
desktopTabs
[
2
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
mobile
/
0
"
device
:
"
My
Phone
"
lastUsed
:
mobileTabs
[
0
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
mobile
/
1
"
device
:
"
My
Phone
"
lastUsed
:
mobileTabs
[
1
]
.
lastUsed
}
)
]
}
)
;
}
)
;
add_task
(
async
function
test_restrictionCharacter
(
)
{
let
url
=
"
http
:
/
/
foo
.
remote
.
com
/
"
;
let
tabs
=
Array
(
5
)
.
fill
(
0
)
.
map
(
(
e
i
)
=
>
(
{
urlHistory
:
[
{
url
}
{
i
}
]
title
:
"
A
title
"
lastUsed
:
Math
.
floor
(
Date
.
now
(
)
/
1000
)
-
i
}
)
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
}
}
)
;
let
openTabUrl
=
url
+
"
openpage
/
"
;
let
uri
=
Services
.
io
.
newURI
(
openTabUrl
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
title
:
"
An
Example
"
}
]
)
;
await
addOpenPages
(
uri
1
)
;
let
query
=
UrlbarTokenizer
.
RESTRICT
.
OPENPAGE
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
0
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
0
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
1
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
1
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
2
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
2
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
3
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
3
]
.
lastUsed
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
4
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
4
]
.
lastUsed
}
)
makeTabSwitchResult
(
context
{
uri
:
openTabUrl
title
:
"
An
Example
"
}
)
]
}
)
;
await
removeOpenPages
(
uri
1
)
;
await
cleanupPlaces
(
)
;
}
)
;
add_task
(
async
function
test_duplicate_remote_tabs
(
)
{
let
url
=
"
http
:
/
/
foo
.
remote
.
com
/
"
;
let
tabs
=
Array
(
3
)
.
fill
(
0
)
.
map
(
(
e
i
)
=
>
(
{
urlHistory
:
[
url
]
title
:
"
A
title
"
lastUsed
:
Math
.
floor
(
Date
.
now
(
)
/
1000
)
}
)
)
;
configureEngine
(
{
guid_mobile
:
{
id
:
"
mobile
"
tabs
}
}
)
;
let
query
=
UrlbarTokenizer
.
RESTRICT
.
OPENPAGE
;
let
context
=
createContext
(
query
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeRemoteTabResult
(
context
{
uri
:
"
http
:
/
/
foo
.
remote
.
com
/
"
device
:
"
My
Phone
"
title
:
"
A
title
"
lastUsed
:
tabs
[
0
]
.
lastUsed
}
)
]
}
)
;
}
)
;
