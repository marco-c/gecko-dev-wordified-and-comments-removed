"
use
strict
"
;
const
TEST_ENGINE_NAME
=
"
test
autofill
aliases
"
;
const
TEST_ENGINE_ALIAS
=
"
autofilltest
"
;
add_setup
(
async
(
)
=
>
{
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
TEST_ENGINE_NAME
keyword
:
TEST_ENGINE_ALIAS
}
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
example
.
com
/
"
title
:
TEST_ENGINE_ALIAS
}
)
;
let
search
=
TEST_ENGINE_ALIAS
.
substr
(
0
Math
.
round
(
TEST_ENGINE_ALIAS
.
length
/
2
)
)
;
let
autofilledValue
=
TEST_ENGINE_ALIAS
+
"
"
;
let
context
=
createContext
(
search
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
autofilledValue
matches
:
[
makeSearchResult
(
context
{
engineName
:
TEST_ENGINE_NAME
alias
:
TEST_ENGINE_ALIAS
query
:
"
"
providesSearchMode
:
true
heuristic
:
false
providerName
:
"
TokenAliasEngines
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
}
)
;
add_task
(
async
function
preserveCase
(
)
{
await
PlacesTestUtils
.
addVisits
(
{
uri
:
"
http
:
/
/
example
.
com
/
"
title
:
TEST_ENGINE_ALIAS
}
)
;
let
search
=
TEST_ENGINE_ALIAS
.
toUpperCase
(
)
.
substr
(
0
Math
.
round
(
TEST_ENGINE_ALIAS
.
length
/
2
)
)
;
let
alias
=
search
+
TEST_ENGINE_ALIAS
.
substr
(
search
.
length
)
;
let
autofilledValue
=
alias
+
"
"
;
let
context
=
createContext
(
search
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
autofilledValue
matches
:
[
makeSearchResult
(
context
{
engineName
:
TEST_ENGINE_NAME
alias
query
:
"
"
providesSearchMode
:
true
heuristic
:
false
providerName
:
"
TokenAliasEngines
"
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
}
)
;
