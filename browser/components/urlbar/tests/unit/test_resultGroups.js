"
use
strict
"
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
}
)
;
const
LIMIT_KEYS
=
[
"
availableSpan
"
"
maxResultCount
"
]
;
const
MAX_RICH_RESULTS_PREF
=
"
browser
.
urlbar
.
maxRichResults
"
;
const
MAX_RESULTS
=
10
;
let
sandbox
;
add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
setIntPref
(
MAX_RICH_RESULTS_PREF
MAX_RESULTS
)
;
sandbox
=
lazy
.
sinon
.
createSandbox
(
)
;
registerCleanupFunction
(
(
)
=
>
{
sandbox
.
restore
(
)
;
}
)
;
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
empty
root
"
resultGroups
:
{
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
root
with
empty
children
"
resultGroups
:
{
children
:
[
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
root
no
match
"
resultGroups
:
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
children
no
match
"
resultGroups
:
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
root
limit
:
0
"
resultGroups
:
{
limit
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
root
limit
:
0
with
children
"
resultGroups
:
{
limit
:
0
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
child
limit
:
0
"
resultGroups
:
{
children
:
[
{
limit
:
0
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
root
group
"
resultGroups
:
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
providerResults
:
[
.
.
.
makeHistoryResults
(
1
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
0
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
root
group
multiple
"
resultGroups
:
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
0
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
child
group
multiple
"
resultGroups
:
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
1
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
simple
limit
"
resultGroups
:
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
limit
siblings
"
resultGroups
:
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
1
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
limit
nested
"
resultGroups
:
{
children
:
[
{
limit
:
1
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
limit
nested
siblings
"
resultGroups
:
{
children
:
[
{
limit
:
1
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
limit
nested
uncle
"
resultGroups
:
{
children
:
[
{
limit
:
1
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
1
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
limit
nested
override
bad
"
resultGroups
:
{
children
:
[
{
limit
:
1
children
:
[
{
limit
:
99
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
limit
nested
override
good
"
resultGroups
:
{
children
:
[
{
limit
:
99
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
"
resultGroups
:
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
2
)
.
.
.
makeIndexRange
(
0
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
limit
1
"
resultGroups
:
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
1
)
.
.
.
makeIndexRange
(
0
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
limit
2
"
resultGroups
:
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
2
)
.
.
.
makeIndexRange
(
0
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
limit
3
"
resultGroups
:
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
1
)
.
.
.
makeIndexRange
(
0
2
)
.
.
.
makeIndexRange
(
3
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
limit
4
"
resultGroups
:
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
2
)
.
.
.
makeIndexRange
(
0
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
1
"
resultGroups
:
{
children
:
[
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
2
)
.
.
.
makeIndexRange
(
0
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
2
"
resultGroups
:
{
children
:
[
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
2
)
.
.
.
makeIndexRange
(
0
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
limit
1
"
resultGroups
:
{
children
:
[
{
limit
:
1
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
limit
2
"
resultGroups
:
{
children
:
[
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
1
)
.
.
.
makeIndexRange
(
0
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
limit
3
"
resultGroups
:
{
children
:
[
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
2
)
.
.
.
makeIndexRange
(
0
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
limit
4
"
resultGroups
:
{
children
:
[
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
1
)
.
.
.
makeIndexRange
(
0
2
)
.
.
.
makeIndexRange
(
3
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
limit
5
"
resultGroups
:
{
children
:
[
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
2
)
.
.
.
makeIndexRange
(
0
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
multiple
groups
nested
limit
6
"
resultGroups
:
{
children
:
[
{
children
:
[
{
limit
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
2
)
.
.
.
makeHistoryResults
(
2
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
1
)
.
.
.
makeIndexRange
(
0
2
)
.
.
.
makeIndexRange
(
3
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
1
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
5
)
.
.
.
makeIndexRange
(
0
5
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
2
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
7
)
.
.
.
makeIndexRange
(
0
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
3
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
3
)
.
.
.
makeIndexRange
(
0
7
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
4
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
]
}
providerResults
:
[
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
4
)
.
.
.
makeIndexRange
(
MAX_RESULTS
3
)
.
.
.
makeIndexRange
(
3
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
5
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
]
}
providerResults
:
[
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
5
)
.
.
.
makeIndexRange
(
MAX_RESULTS
3
)
.
.
.
makeIndexRange
(
3
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
6
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
]
}
providerResults
:
[
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
3
)
.
.
.
makeIndexRange
(
MAX_RESULTS
5
)
.
.
.
makeIndexRange
(
5
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
7
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
]
}
providerResults
:
[
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
3
)
.
.
.
makeIndexRange
(
MAX_RESULTS
2
)
.
.
.
makeIndexRange
(
2
5
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
overfill
1
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
]
}
providerResults
:
[
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
7
)
.
.
.
makeIndexRange
(
0
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
overfill
2
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
]
}
providerResults
:
[
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeRemoteSuggestionResults
(
1
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
+
1
6
)
.
.
.
makeIndexRange
(
MAX_RESULTS
1
)
.
.
.
makeIndexRange
(
1
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
limit
1
"
resultGroups
:
{
children
:
[
{
limit
:
5
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
3
)
.
.
.
makeIndexRange
(
0
2
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
limit
2
"
resultGroups
:
{
children
:
[
{
limit
:
7
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
2
)
.
.
.
makeIndexRange
(
0
5
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
limit
3
"
resultGroups
:
{
children
:
[
{
limit
:
7
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
limit
:
3
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
2
)
.
.
.
makeIndexRange
(
0
5
)
.
.
.
makeIndexRange
(
MAX_RESULTS
+
5
2
)
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
+
2
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
limit
4
"
resultGroups
:
{
children
:
[
{
limit
:
7
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
limit
:
3
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
2
)
.
.
.
makeIndexRange
(
0
5
)
.
.
.
makeIndexRange
(
MAX_RESULTS
+
5
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
limit
5
"
resultGroups
:
{
children
:
[
{
limit
:
7
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
limit
:
3
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
2
)
.
.
.
makeIndexRange
(
0
5
)
.
.
.
makeIndexRange
(
MAX_RESULTS
+
5
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
flex
:
1
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
2
)
.
.
.
makeIndexRange
(
0
5
)
.
.
.
makeIndexRange
(
MAX_RESULTS
+
5
2
)
.
.
.
makeIndexRange
(
2
*
MAX_RESULTS
+
2
1
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
overfill
1
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
flex
:
1
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
0
7
)
.
.
.
makeIndexRange
(
MAX_RESULTS
+
7
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
overfill
2
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
flex
:
1
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeFormHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
0
MAX_RESULTS
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
flex
nested
overfill
3
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
flex
:
2
flexChildren
:
true
children
:
[
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
{
flex
:
1
flexChildren
:
true
children
:
[
{
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
0
MAX_RESULTS
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
limit
ignored
with
flex
"
resultGroups
:
{
flexChildren
:
true
children
:
[
{
limit
:
1
flex
:
2
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
flex
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
7
)
.
.
.
makeIndexRange
(
0
3
)
]
}
)
;
add_resultGroupsLimit_tasks
(
{
testName
:
"
resultSpan
=
3
followed
by
others
"
resultGroups
:
{
children
:
[
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
{
group
:
UrlbarUtils
.
RESULT_GROUP
.
REMOTE_SUGGESTION
}
]
}
providerResults
:
[
.
.
.
makeRemoteSuggestionResults
(
MAX_RESULTS
)
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
3
}
)
]
expectedResultIndexes
:
[
.
.
.
makeIndexRange
(
MAX_RESULTS
1
)
.
.
.
makeIndexRange
(
0
7
)
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
maxResultCount
:
1
availableSpan
:
3
"
resultGroups
:
{
children
:
[
{
maxResultCount
:
1
availableSpan
:
3
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
maxResultCount
:
1
availableSpan
:
3
resultSpan
=
3
"
resultGroups
:
{
children
:
[
{
maxResultCount
:
1
availableSpan
:
3
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
3
}
)
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
3
}
)
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
3
}
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
maxResultCount
:
3
availableSpan
:
1
"
resultGroups
:
{
children
:
[
{
maxResultCount
:
3
availableSpan
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
maxResultCount
:
3
availableSpan
:
1
resultSpan
=
3
"
resultGroups
:
{
children
:
[
{
maxResultCount
:
3
availableSpan
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
3
}
)
]
expectedResultIndexes
:
[
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
availableSpan
:
1
"
resultGroups
:
{
children
:
[
{
availableSpan
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
.
.
.
makeHistoryResults
(
MAX_RESULTS
)
]
expectedResultIndexes
:
[
0
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
availableSpan
:
1
resultSpan
=
3
"
resultGroups
:
{
children
:
[
{
availableSpan
:
1
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
3
}
)
]
expectedResultIndexes
:
[
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
availableSpan
:
3
resultSpan
=
2
and
resultSpan
=
1
"
resultGroups
:
{
children
:
[
{
availableSpan
:
3
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
makeHistoryResults
(
1
)
[
0
]
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
2
}
)
makeHistoryResults
(
1
)
[
0
]
]
expectedResultIndexes
:
[
0
1
]
}
)
;
add_resultGroups_task
(
{
testName
:
"
availableSpan
:
3
resultSpan
=
1
and
resultSpan
=
2
"
resultGroups
:
{
children
:
[
{
availableSpan
:
3
group
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
}
]
}
providerResults
:
[
Object
.
assign
(
makeHistoryResults
(
1
)
[
0
]
{
resultSpan
:
2
}
)
makeHistoryResults
(
1
)
[
0
]
makeHistoryResults
(
1
)
[
0
]
]
expectedResultIndexes
:
[
0
1
]
}
)
;
function
add_resultGroups_task
(
{
testName
resultGroups
providerResults
expectedResultIndexes
}
)
{
let
func
=
async
(
)
=
>
{
info
(
Running
resultGroups
test
:
{
testName
}
)
;
info
(
Setting
result
groups
:
+
JSON
.
stringify
(
resultGroups
)
)
;
setResultGroups
(
resultGroups
)
;
let
provider
=
registerBasicTestProvider
(
providerResults
)
;
let
context
=
createContext
(
"
foo
"
{
providers
:
[
provider
.
name
]
}
)
;
let
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
await
UrlbarProvidersManager
.
startQuery
(
context
controller
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
let
expectedResults
=
expectedResultIndexes
.
map
(
i
=
>
providerResults
[
i
]
)
;
Assert
.
deepEqual
(
context
.
results
expectedResults
)
;
setResultGroups
(
null
)
;
}
;
Object
.
defineProperty
(
func
"
name
"
{
value
:
testName
}
)
;
add_task
(
func
)
;
}
function
add_resultGroupsLimit_tasks
(
{
testName
resultGroups
providerResults
expectedResultIndexes
}
)
{
for
(
let
key
of
LIMIT_KEYS
)
{
add_resultGroups_task
(
{
testName
:
{
testName
}
(
limit
:
{
key
}
)
resultGroups
:
replaceLimitWithKey
(
resultGroups
key
)
providerResults
expectedResultIndexes
}
)
;
}
}
function
replaceLimitWithKey
(
group
key
)
{
group
=
{
.
.
.
group
}
;
if
(
"
limit
"
in
group
)
{
group
[
key
]
=
group
.
limit
;
delete
group
.
limit
;
}
for
(
let
i
=
0
;
i
<
group
.
children
?
.
length
;
i
+
+
)
{
group
.
children
[
i
]
=
replaceLimitWithKey
(
group
.
children
[
i
]
key
)
;
}
return
group
;
}
function
makeHistoryResults
(
count
)
{
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
"
http
:
/
/
example
.
com
/
"
+
i
}
)
)
;
}
return
results
;
}
function
makeRemoteSuggestionResults
(
count
)
{
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
engine
:
"
test
"
query
:
"
test
"
suggestion
:
"
test
"
+
i
lowerCaseSuggestion
:
"
test
"
+
i
}
)
)
;
}
return
results
;
}
function
makeFormHistoryResults
(
count
)
{
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
engine
:
"
test
"
suggestion
:
"
test
"
+
i
lowerCaseSuggestion
:
"
test
"
+
i
}
)
)
;
}
return
results
;
}
function
makeIndexRange
(
startIndex
count
)
{
let
indexes
=
[
]
;
for
(
let
i
=
startIndex
;
i
<
startIndex
+
count
;
i
+
+
)
{
indexes
.
push
(
i
)
;
}
return
indexes
;
}
function
setResultGroups
(
resultGroups
)
{
sandbox
.
restore
(
)
;
if
(
resultGroups
)
{
sandbox
.
stub
(
UrlbarPrefs
"
resultGroups
"
)
.
get
(
(
)
=
>
resultGroups
)
;
}
}
