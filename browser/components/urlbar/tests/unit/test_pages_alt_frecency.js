testEngine_setup
(
)
;
add_task
(
async
function
test_autofill
(
)
{
const
searchString
=
"
match
"
;
const
singleVisitUrl
=
"
https
:
/
/
singlevisit
-
match
.
org
/
"
;
const
singleVisitBookmarkedUrl
=
"
https
:
/
/
singlevisitbookmarked
-
match
.
org
/
"
;
const
adaptiveVisitUrl
=
"
https
:
/
/
adaptivevisit
-
match
.
org
/
"
;
const
adaptiveManyVisitsUrl
=
"
https
:
/
/
adaptivemanyvisit
-
match
.
org
/
"
;
const
manyVisitsUrl
=
"
https
:
/
/
manyvisits
-
match
.
org
/
"
;
const
sampledVisitsUrl
=
"
https
:
/
/
sampledvisits
-
match
.
org
/
"
;
const
bookmarkedUrl
=
"
https
:
/
/
bookmarked
-
match
.
org
/
"
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
url
:
bookmarkedUrl
title
:
"
bookmark
"
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
}
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
url
:
singleVisitBookmarkedUrl
title
:
"
visited
bookmark
"
parentGuid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
singleVisitUrl
singleVisitBookmarkedUrl
adaptiveVisitUrl
.
.
.
new
Array
(
10
)
.
fill
(
adaptiveManyVisitsUrl
)
.
.
.
new
Array
(
100
)
.
fill
(
manyVisitsUrl
)
.
.
.
new
Array
(
10
)
.
fill
(
sampledVisitsUrl
)
]
)
;
await
UrlbarUtils
.
addToInputHistory
(
adaptiveVisitUrl
searchString
)
;
await
UrlbarUtils
.
addToInputHistory
(
adaptiveManyVisitsUrl
searchString
)
;
let
context
=
createContext
(
searchString
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
"
Suggestions
"
heuristic
:
true
}
)
makeVisitResult
(
context
{
uri
:
adaptiveManyVisitsUrl
title
:
test
visit
for
{
adaptiveManyVisitsUrl
}
}
)
makeVisitResult
(
context
{
uri
:
adaptiveVisitUrl
title
:
test
visit
for
{
adaptiveVisitUrl
}
}
)
makeVisitResult
(
context
{
uri
:
manyVisitsUrl
title
:
test
visit
for
{
manyVisitsUrl
}
}
)
makeVisitResult
(
context
{
uri
:
sampledVisitsUrl
title
:
test
visit
for
{
sampledVisitsUrl
}
}
)
makeBookmarkResult
(
context
{
uri
:
singleVisitBookmarkedUrl
title
:
"
visited
bookmark
"
}
)
makeBookmarkResult
(
context
{
uri
:
bookmarkedUrl
title
:
"
bookmark
"
}
)
makeVisitResult
(
context
{
uri
:
singleVisitUrl
title
:
test
visit
for
{
singleVisitUrl
}
}
)
]
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
