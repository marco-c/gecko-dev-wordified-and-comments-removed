"
use
strict
"
;
const
ENGINE_NAME
=
"
engine
.
xml
"
;
add_task
(
async
function
searchEngines
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
autoFill
.
searchEngines
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
autoFill
.
searchEngines
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
)
;
}
)
;
for
(
let
scheme
of
[
"
https
"
"
http
"
]
)
{
let
extension
;
if
(
scheme
=
=
"
https
"
)
{
extension
=
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
ENGINE_NAME
search_url
:
"
https
:
/
/
www
.
example
.
com
/
"
}
{
skipUnload
:
true
}
)
;
}
else
{
let
httpServer
=
makeTestServer
(
)
;
httpServer
.
registerDirectory
(
"
/
"
do_get_cwd
(
)
)
;
await
Services
.
search
.
addOpenSearchEngine
(
http
:
/
/
localhost
:
{
httpServer
.
identity
.
primaryPort
}
/
data
/
engine
.
xml
null
)
;
}
let
context
=
createContext
(
"
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
"
example
.
com
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
"
example
.
com
/
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
"
www
.
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
www
.
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
"
www
.
example
.
com
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
www
.
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
"
www
.
example
.
com
/
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
"
www
.
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
scheme
+
"
:
/
/
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
scheme
+
"
:
/
/
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
scheme
+
"
:
/
/
example
.
com
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
scheme
+
"
:
/
/
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
scheme
+
"
:
/
/
example
.
com
/
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
scheme
+
"
:
/
/
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
scheme
+
"
:
/
/
www
.
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
scheme
+
"
:
/
/
www
.
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
scheme
+
"
:
/
/
www
.
example
.
com
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
autofilled
:
scheme
+
"
:
/
/
www
.
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
scheme
+
"
:
/
/
www
.
example
.
com
/
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
search
:
scheme
+
"
:
/
/
www
.
example
.
com
/
"
autofilled
:
scheme
+
"
:
/
/
www
.
example
.
com
/
"
matches
:
[
makePrioritySearchResult
(
context
{
engineName
:
ENGINE_NAME
heuristic
:
true
}
)
]
}
)
;
let
otherScheme
=
scheme
=
=
"
http
"
?
"
https
"
:
"
http
"
;
context
=
createContext
(
otherScheme
+
"
:
/
/
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
search
:
otherScheme
+
"
:
/
/
ex
"
matches
:
[
makeVisitResult
(
context
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
uri
:
otherScheme
+
"
:
/
/
ex
/
"
title
:
otherScheme
+
"
:
/
/
ex
/
"
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
otherScheme
+
"
:
/
/
www
.
ex
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
search
:
otherScheme
+
"
:
/
/
www
.
ex
"
matches
:
[
makeVisitResult
(
context
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
uri
:
otherScheme
+
"
:
/
/
www
.
ex
/
"
title
:
otherScheme
+
"
:
/
/
www
.
ex
/
"
heuristic
:
true
}
)
]
}
)
;
context
=
createContext
(
"
example
/
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeVisitResult
(
context
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
uri
:
"
http
:
/
/
example
/
"
title
:
"
http
:
/
/
example
/
"
iconUri
:
"
page
-
icon
:
http
:
/
/
example
/
"
heuristic
:
true
}
)
]
}
)
;
await
extension
?
.
unload
(
)
;
}
}
)
;
