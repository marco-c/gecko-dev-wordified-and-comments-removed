testEngine_setup
(
)
;
add_task
(
async
function
test_tag_match_url
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
)
;
}
)
;
info
(
"
Make
sure
tag
matches
return
the
right
url
as
well
as
'
+
'
remain
escaped
"
)
;
let
uri1
=
Services
.
io
.
newURI
(
"
http
:
/
/
escaped
/
"
)
;
let
uri2
=
Services
.
io
.
newURI
(
"
http
:
/
/
asciiescaped
/
blocking
-
firefox3
%
2B
"
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
uri1
title
:
"
title
"
}
{
uri
:
uri2
title
:
"
title
"
}
]
)
;
await
PlacesTestUtils
.
addBookmarkWithDetails
(
{
uri
:
uri1
title
:
"
title
"
tags
:
[
"
superTag
"
]
style
:
[
"
bookmark
-
tag
"
]
}
)
;
await
PlacesTestUtils
.
addBookmarkWithDetails
(
{
uri
:
uri2
title
:
"
title
"
tags
:
[
"
superTag
"
]
style
:
[
"
bookmark
-
tag
"
]
}
)
;
let
context
=
createContext
(
"
superTag
"
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
}
)
makeBookmarkResult
(
context
{
uri
:
uri2
.
spec
title
:
"
title
"
tags
:
[
"
superTag
"
]
}
)
makeBookmarkResult
(
context
{
uri
:
uri1
.
spec
title
:
"
title
"
tags
:
[
"
superTag
"
]
}
)
]
}
)
;
await
cleanupPlaces
(
)
;
}
)
;
