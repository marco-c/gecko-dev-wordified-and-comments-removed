const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
class
SlowHeuristicProvider
extends
TestProvider
{
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
async
startQuery
(
context
add
)
{
this
.
_context
=
context
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
300
)
)
;
for
(
let
result
of
this
.
_results
)
{
add
(
this
result
)
;
}
}
}
class
FastHeuristicProvider
extends
TestProvider
{
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
async
startQuery
(
context
add
)
{
this
.
_context
=
context
;
for
(
let
result
of
this
.
_results
)
{
add
(
this
result
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
results
-
added
"
)
;
}
}
add_task
(
async
function
setup
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
false
)
;
}
)
;
add_task
(
async
function
(
)
{
let
context
=
createContext
(
"
m
"
{
isPrivate
:
false
}
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
info
(
"
Manually
set
up
query
and
then
overwrite
it
.
"
)
;
let
slowProvider
=
new
SlowHeuristicProvider
(
{
results
:
[
makeVisitResult
(
context
{
uri
:
http
:
/
/
mozilla
.
org
/
title
:
mozilla
.
org
/
}
)
]
}
)
;
UrlbarProvidersManager
.
registerProvider
(
slowProvider
)
;
let
fastProvider
=
new
FastHeuristicProvider
(
{
results
:
[
makeVisitResult
(
context
{
uri
:
http
:
/
/
mozilla
.
com
/
title
:
mozilla
.
com
/
heuristic
:
true
}
)
]
}
)
;
UrlbarProvidersManager
.
registerProvider
(
fastProvider
)
;
let
firstContext
=
createContext
(
"
m
"
{
providers
:
[
slowProvider
.
name
fastProvider
.
name
]
}
)
;
let
secondContext
=
createContext
(
"
ma
"
{
providers
:
[
slowProvider
.
name
fastProvider
.
name
]
}
)
;
let
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
let
queryRecieved
queryCancelled
;
const
controllerListener
=
{
onQueryResults
(
queryContext
)
{
console
.
trace
(
finished
query
.
context
:
{
JSON
.
stringify
(
queryContext
)
}
)
;
Assert
.
equal
(
queryContext
secondContext
"
Only
the
second
query
should
finish
.
"
)
;
queryRecieved
=
true
;
}
onQueryCancelled
(
queryContext
)
{
Assert
.
equal
(
queryContext
firstContext
"
The
first
query
should
be
cancelled
.
"
)
;
Assert
.
ok
(
!
queryCancelled
"
No
more
than
one
query
should
be
cancelled
.
"
)
;
queryCancelled
=
true
;
}
}
;
controller
.
addQueryListener
(
controllerListener
)
;
let
resultsAddedPromise
=
new
Promise
(
resolve
=
>
{
let
observe
=
async
(
subject
topic
data
)
=
>
{
Services
.
obs
.
removeObserver
(
observe
"
results
-
added
"
)
;
await
controller
.
startQuery
(
secondContext
)
;
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
observe
"
results
-
added
"
)
;
}
)
;
controller
.
startQuery
(
firstContext
)
;
await
resultsAddedPromise
;
Assert
.
ok
(
queryCancelled
"
At
least
one
query
was
cancelled
.
"
)
;
Assert
.
ok
(
queryRecieved
"
At
least
one
query
finished
.
"
)
;
controller
.
removeQueryListener
(
controllerListener
)
;
}
)
;
