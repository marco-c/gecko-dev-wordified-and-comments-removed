add_task
(
async
function
setup
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
geoSpecificDefaults
"
false
)
;
let
engine
=
await
addTestSuggestionsEngine
(
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
Services
.
search
.
setDefault
(
engine
)
;
registerCleanupFunction
(
async
(
)
=
>
Services
.
search
.
setDefault
(
oldDefaultEngine
)
)
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
unifiedComplete
"
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
unifiedcomplete
"
"
nsIAutoCompleteSearch
"
)
;
add_task
(
async
function
test_restrictions
(
)
{
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
"
http
:
/
/
history
.
com
/
"
title
:
"
match
"
}
]
)
;
await
PlacesUtils
.
bookmarks
.
insert
(
{
url
:
"
http
:
/
/
bookmark
.
com
/
"
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
match
"
}
)
;
await
UrlbarProviderOpenTabs
.
registerOpenTab
(
"
http
:
/
/
openpagematch
.
com
/
"
)
;
info
(
"
Bookmark
restrict
"
)
;
let
results
=
await
get_results
(
{
sources
:
[
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
]
searchString
:
"
match
"
}
)
;
Assert
.
deepEqual
(
results
.
filter
(
r
=
>
!
r
.
heuristic
)
.
map
(
r
=
>
r
.
payload
.
url
)
[
"
http
:
/
/
bookmark
.
com
/
"
]
)
;
info
(
"
History
restrict
"
)
;
results
=
await
get_results
(
{
sources
:
[
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
]
searchString
:
"
match
"
}
)
;
Assert
.
deepEqual
(
results
.
filter
(
r
=
>
!
r
.
heuristic
)
.
map
(
r
=
>
r
.
payload
.
url
)
[
"
http
:
/
/
history
.
com
/
"
]
)
;
info
(
"
tabs
restrict
"
)
;
results
=
await
get_results
(
{
sources
:
[
UrlbarUtils
.
RESULT_SOURCE
.
TABS
]
searchString
:
"
match
"
}
)
;
Assert
.
deepEqual
(
results
.
filter
(
r
=
>
!
r
.
heuristic
)
.
map
(
r
=
>
r
.
payload
.
url
)
[
"
http
:
/
/
openpagematch
.
com
/
"
]
)
;
info
(
"
search
restrict
"
)
;
results
=
await
get_results
(
{
sources
:
[
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
]
searchString
:
"
match
"
}
)
;
Assert
.
deepEqual
(
results
.
map
(
r
=
>
r
.
payload
.
engine
)
new
Array
(
4
)
.
fill
(
"
engine
-
suggestions
.
xml
"
)
)
;
}
)
;
async
function
get_results
(
test
)
{
let
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
let
queryContext
=
createContext
(
test
.
searchString
{
allowAutofill
:
false
isPrivate
:
false
maxResults
:
10
sources
:
test
.
sources
}
)
;
await
controller
.
startQuery
(
queryContext
)
;
info
(
JSON
.
stringify
(
queryContext
.
results
)
)
;
return
queryContext
.
results
;
}
