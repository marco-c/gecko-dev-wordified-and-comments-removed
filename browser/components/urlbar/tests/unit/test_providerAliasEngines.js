add_task
(
async
function
setup
(
)
{
let
engine
=
await
addTestSuggestionsEngine
(
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
)
;
Services
.
prefs
.
clearUserPref
(
"
keyword
.
enabled
"
)
;
}
)
;
Services
.
search
.
setDefault
(
engine
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
suggest
.
searches
"
false
)
;
}
)
;
add_task
(
async
function
basicGetAndPost
(
)
{
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
AliasedGETMozSearch
"
keyword
:
"
get
"
search_url
:
"
https
:
/
/
s
.
example
.
com
/
search
"
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
AliasedPOSTMozSearch
"
keyword
:
"
post
"
search_url
:
"
https
:
/
/
s
.
example
.
com
/
search
"
search_url_post_params
:
"
q
=
{
searchTerms
}
"
}
)
;
for
(
let
alias
of
[
"
get
"
"
post
"
]
)
{
let
context
=
createContext
(
alias
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
SUGGESTIONS_ENGINE_NAME
heuristic
:
true
providerName
:
"
HeuristicFallback
"
}
)
]
}
)
;
context
=
createContext
(
{
alias
}
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
Aliased
{
alias
.
toUpperCase
(
)
}
MozSearch
query
:
"
"
alias
heuristic
:
true
providerName
:
"
AliasEngines
"
}
)
]
}
)
;
context
=
createContext
(
{
alias
}
fire
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
Aliased
{
alias
.
toUpperCase
(
)
}
MozSearch
query
:
"
fire
"
alias
heuristic
:
true
providerName
:
"
AliasEngines
"
}
)
]
}
)
;
context
=
createContext
(
{
alias
}
mozilla
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
Aliased
{
alias
.
toUpperCase
(
)
}
MozSearch
query
:
"
mozilla
"
alias
heuristic
:
true
providerName
:
"
AliasEngines
"
}
)
]
}
)
;
context
=
createContext
(
{
alias
}
MoZiLlA
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
Aliased
{
alias
.
toUpperCase
(
)
}
MozSearch
query
:
"
MoZiLlA
"
alias
heuristic
:
true
providerName
:
"
AliasEngines
"
}
)
]
}
)
;
context
=
createContext
(
{
alias
}
mozzarella
mozilla
{
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
makeSearchResult
(
context
{
engineName
:
Aliased
{
alias
.
toUpperCase
(
)
}
MozSearch
query
:
"
mozzarella
mozilla
"
alias
heuristic
:
true
providerName
:
"
AliasEngines
"
}
)
]
}
)
;
}
await
cleanupPlaces
(
)
;
}
)
;
